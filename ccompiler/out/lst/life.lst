0001   0000             ; --- FILENAME: programs/life
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $i 
0011   0408             ; $j 
0012   0408             ; $n 
0013   0408 52 06 00      sub sp, 6
0014   040B             ;; for(i = 0; i <   30     ; i++){ 
0015   040B             _for1_init:
0016   040B FA FF FF      lea d, [bp + -1] ; $i
0017   040E DA            push d
0018   040F 26 00 00      mov b, $0
0019   0412 E7            pop d
0020   0413 FD 43         mov [d], b
0021   0415             _for1_cond:
0022   0415 FA FF FF      lea d, [bp + -1] ; $i
0023   0418 2A            mov b, [d]
0024   0419             ; START RELATIONAL
0025   0419 D7            push a
0026   041A 11            mov a, b
0027   041B 26 1E 00      mov b, $1e
0028   041E B0            cmp a, b
0029   041F FD 73         slt ; <= (signed)
0030   0421 E4            pop a
0031   0422             ; END RELATIONAL
0032   0422 C0 00 00      cmp b, 0
0033   0425 C6 98 04      je _for1_exit
0034   0428             _for1_block:
0035   0428             ;; for(j = 0; j <    40    ; j++){ 
0036   0428             _for2_init:
0037   0428 FA FD FF      lea d, [bp + -3] ; $j
0038   042B DA            push d
0039   042C 26 00 00      mov b, $0
0040   042F E7            pop d
0041   0430 FD 43         mov [d], b
0042   0432             _for2_cond:
0043   0432 FA FD FF      lea d, [bp + -3] ; $j
0044   0435 2A            mov b, [d]
0045   0436             ; START RELATIONAL
0046   0436 D7            push a
0047   0437 11            mov a, b
0048   0438 26 28 00      mov b, $28
0049   043B B0            cmp a, b
0050   043C FD 73         slt ; <= (signed)
0051   043E E4            pop a
0052   043F             ; END RELATIONAL
0053   043F C0 00 00      cmp b, 0
0054   0442 C6 88 04      je _for2_exit
0055   0445             _for2_block:
0056   0445             ;; nextState[i][j] = currState[i][j]; 
0057   0445 3B C7 22      mov d, _nextState_data ; $nextState
0058   0448 D7            push a
0059   0449 DA            push d
0060   044A FA FF FF      lea d, [bp + -1] ; $i
0061   044D 2A            mov b, [d]
0062   044E E7            pop d
0063   044F FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0064   0453 DA            push d
0065   0454 FA FD FF      lea d, [bp + -3] ; $j
0066   0457 2A            mov b, [d]
0067   0458 E7            pop d
0068   0459 5A            add d, b
0069   045A E4            pop a
0070   045B DA            push d
0071   045C 3B 77 27      mov d, _currState_data ; $currState
0072   045F D7            push a
0073   0460 DA            push d
0074   0461 FA FF FF      lea d, [bp + -1] ; $i
0075   0464 2A            mov b, [d]
0076   0465 E7            pop d
0077   0466 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0078   046A DA            push d
0079   046B FA FD FF      lea d, [bp + -3] ; $j
0080   046E 2A            mov b, [d]
0081   046F E7            pop d
0082   0470 5A            add d, b
0083   0471 E4            pop a
0084   0472 32            mov bl, [d]
0085   0473 A7 00         mov bh, 0
0086   0475 E7            pop d
0087   0476 FD 3E         mov [d], bl
0088   0478             _for2_update:
0089   0478 FA FD FF      lea d, [bp + -3] ; $j
0090   047B 2A            mov b, [d]
0091   047C D8            push b
0092   047D FD 77         inc b
0093   047F FA FD FF      lea d, [bp + -3] ; $j
0094   0482 FD 43         mov [d], b
0095   0484 E5            pop b
0096   0485 0A 32 04      jmp _for2_cond
0097   0488             _for2_exit:
0098   0488             _for1_update:
0099   0488 FA FF FF      lea d, [bp + -1] ; $i
0100   048B 2A            mov b, [d]
0101   048C D8            push b
0102   048D FD 77         inc b
0103   048F FA FF FF      lea d, [bp + -1] ; $i
0104   0492 FD 43         mov [d], b
0105   0494 E5            pop b
0106   0495 0A 15 04      jmp _for1_cond
0107   0498             _for1_exit:
0108   0498             ;; for(;;){ 
0109   0498             _for3_init:
0110   0498             _for3_cond:
0111   0498             _for3_block:
0112   0498             ;; for(i = 1; i <   30     +-1; i++){ 
0113   0498             _for4_init:
0114   0498 FA FF FF      lea d, [bp + -1] ; $i
0115   049B DA            push d
0116   049C 26 01 00      mov b, $1
0117   049F E7            pop d
0118   04A0 FD 43         mov [d], b
0119   04A2             _for4_cond:
0120   04A2 FA FF FF      lea d, [bp + -1] ; $i
0121   04A5 2A            mov b, [d]
0122   04A6             ; START RELATIONAL
0123   04A6 D7            push a
0124   04A7 11            mov a, b
0125   04A8 26 1E 00      mov b, $1e
0126   04AB             ; START TERMS
0127   04AB D7            push a
0128   04AC 11            mov a, b
0129   04AD 26 FF FF      mov b, $ffff
0130   04B0 56            add b, a
0131   04B1 E4            pop a
0132   04B2             ; END TERMS
0133   04B2 B0            cmp a, b
0134   04B3 FD 73         slt ; <= (signed)
0135   04B5 E4            pop a
0136   04B6             ; END RELATIONAL
0137   04B6 C0 00 00      cmp b, 0
0138   04B9 C6 93 05      je _for4_exit
0139   04BC             _for4_block:
0140   04BC             ;; for(j = 1; j <    40    +-1; j++){ 
0141   04BC             _for5_init:
0142   04BC FA FD FF      lea d, [bp + -3] ; $j
0143   04BF DA            push d
0144   04C0 26 01 00      mov b, $1
0145   04C3 E7            pop d
0146   04C4 FD 43         mov [d], b
0147   04C6             _for5_cond:
0148   04C6 FA FD FF      lea d, [bp + -3] ; $j
0149   04C9 2A            mov b, [d]
0150   04CA             ; START RELATIONAL
0151   04CA D7            push a
0152   04CB 11            mov a, b
0153   04CC 26 28 00      mov b, $28
0154   04CF             ; START TERMS
0155   04CF D7            push a
0156   04D0 11            mov a, b
0157   04D1 26 FF FF      mov b, $ffff
0158   04D4 56            add b, a
0159   04D5 E4            pop a
0160   04D6             ; END TERMS
0161   04D6 B0            cmp a, b
0162   04D7 FD 73         slt ; <= (signed)
0163   04D9 E4            pop a
0164   04DA             ; END RELATIONAL
0165   04DA C0 00 00      cmp b, 0
0166   04DD C6 83 05      je _for5_exit
0167   04E0             _for5_block:
0168   04E0             ;; n = neighbours(i, j); 
0169   04E0 FA FB FF      lea d, [bp + -5] ; $n
0170   04E3 DA            push d
0171   04E4 FA FD FF      lea d, [bp + -3] ; $j
0172   04E7 2A            mov b, [d]
0173   04E8 FD AB         swp b
0174   04EA D8            push b
0175   04EB FA FF FF      lea d, [bp + -1] ; $i
0176   04EE 2A            mov b, [d]
0177   04EF FD AB         swp b
0178   04F1 D8            push b
0179   04F2 07 4F 20      call neighbours
0180   04F5 51 04 00      add sp, 4
0181   04F8 E7            pop d
0182   04F9 FD 43         mov [d], b
0183   04FB             ;; if(n < 2 || n > 3) nextState[i][j] = ' '; 
0184   04FB             _if6_cond:
0185   04FB FA FB FF      lea d, [bp + -5] ; $n
0186   04FE 2A            mov b, [d]
0187   04FF             ; START RELATIONAL
0188   04FF D7            push a
0189   0500 11            mov a, b
0190   0501 26 02 00      mov b, $2
0191   0504 B0            cmp a, b
0192   0505 FD 73         slt ; <= (signed)
0193   0507 E4            pop a
0194   0508             ; END RELATIONAL
0195   0508 D7            push a
0196   0509 11            mov a, b
0197   050A FA FB FF      lea d, [bp + -5] ; $n
0198   050D 2A            mov b, [d]
0199   050E             ; START RELATIONAL
0200   050E D7            push a
0201   050F 11            mov a, b
0202   0510 26 03 00      mov b, $3
0203   0513 B0            cmp a, b
0204   0514 FD 7F         sgt ; >
0205   0516 E4            pop a
0206   0517             ; END RELATIONAL
0207   0517 FD A8         sor a, b ; ||
0208   0519 E4            pop a
0209   051A C0 00 00      cmp b, 0
0210   051D C6 40 05      je _if6_else
0211   0520             _if6_true:
0212   0520             ;; nextState[i][j] = ' '; 
0213   0520 3B C7 22      mov d, _nextState_data ; $nextState
0214   0523 D7            push a
0215   0524 DA            push d
0216   0525 FA FF FF      lea d, [bp + -1] ; $i
0217   0528 2A            mov b, [d]
0218   0529 E7            pop d
0219   052A FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0220   052E DA            push d
0221   052F FA FD FF      lea d, [bp + -3] ; $j
0222   0532 2A            mov b, [d]
0223   0533 E7            pop d
0224   0534 5A            add d, b
0225   0535 E4            pop a
0226   0536 DA            push d
0227   0537 26 20 00      mov b, $20
0228   053A E7            pop d
0229   053B FD 3E         mov [d], bl
0230   053D 0A 73 05      jmp _if6_exit
0231   0540             _if6_else:
0232   0540             ;; if(n == 3) nextState[i][j] = '@'; 
0233   0540             _if7_cond:
0234   0540 FA FB FF      lea d, [bp + -5] ; $n
0235   0543 2A            mov b, [d]
0236   0544             ; START RELATIONAL
0237   0544 D7            push a
0238   0545 11            mov a, b
0239   0546 26 03 00      mov b, $3
0240   0549 B0            cmp a, b
0241   054A FD 71         seq ; ==
0242   054C E4            pop a
0243   054D             ; END RELATIONAL
0244   054D C0 00 00      cmp b, 0
0245   0550 C6 73 05      je _if7_exit
0246   0553             _if7_true:
0247   0553             ;; nextState[i][j] = '@'; 
0248   0553 3B C7 22      mov d, _nextState_data ; $nextState
0249   0556 D7            push a
0250   0557 DA            push d
0251   0558 FA FF FF      lea d, [bp + -1] ; $i
0252   055B 2A            mov b, [d]
0253   055C E7            pop d
0254   055D FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0255   0561 DA            push d
0256   0562 FA FD FF      lea d, [bp + -3] ; $j
0257   0565 2A            mov b, [d]
0258   0566 E7            pop d
0259   0567 5A            add d, b
0260   0568 E4            pop a
0261   0569 DA            push d
0262   056A 26 40 00      mov b, $40
0263   056D E7            pop d
0264   056E FD 3E         mov [d], bl
0265   0570 0A 73 05      jmp _if7_exit
0266   0573             _if7_exit:
0267   0573             _if6_exit:
0268   0573             _for5_update:
0269   0573 FA FD FF      lea d, [bp + -3] ; $j
0270   0576 2A            mov b, [d]
0271   0577 D8            push b
0272   0578 FD 77         inc b
0273   057A FA FD FF      lea d, [bp + -3] ; $j
0274   057D FD 43         mov [d], b
0275   057F E5            pop b
0276   0580 0A C6 04      jmp _for5_cond
0277   0583             _for5_exit:
0278   0583             _for4_update:
0279   0583 FA FF FF      lea d, [bp + -1] ; $i
0280   0586 2A            mov b, [d]
0281   0587 D8            push b
0282   0588 FD 77         inc b
0283   058A FA FF FF      lea d, [bp + -1] ; $i
0284   058D FD 43         mov [d], b
0285   058F E5            pop b
0286   0590 0A A2 04      jmp _for4_cond
0287   0593             _for4_exit:
0288   0593             ;; for(i = 1; i <   30     +-1; i++){ 
0289   0593             _for8_init:
0290   0593 FA FF FF      lea d, [bp + -1] ; $i
0291   0596 DA            push d
0292   0597 26 01 00      mov b, $1
0293   059A E7            pop d
0294   059B FD 43         mov [d], b
0295   059D             _for8_cond:
0296   059D FA FF FF      lea d, [bp + -1] ; $i
0297   05A0 2A            mov b, [d]
0298   05A1             ; START RELATIONAL
0299   05A1 D7            push a
0300   05A2 11            mov a, b
0301   05A3 26 1E 00      mov b, $1e
0302   05A6             ; START TERMS
0303   05A6 D7            push a
0304   05A7 11            mov a, b
0305   05A8 26 FF FF      mov b, $ffff
0306   05AB 56            add b, a
0307   05AC E4            pop a
0308   05AD             ; END TERMS
0309   05AD B0            cmp a, b
0310   05AE FD 73         slt ; <= (signed)
0311   05B0 E4            pop a
0312   05B1             ; END RELATIONAL
0313   05B1 C0 00 00      cmp b, 0
0314   05B4 C6 2E 06      je _for8_exit
0315   05B7             _for8_block:
0316   05B7             ;; for(j = 1; j <    40    +-1; j++){ 
0317   05B7             _for9_init:
0318   05B7 FA FD FF      lea d, [bp + -3] ; $j
0319   05BA DA            push d
0320   05BB 26 01 00      mov b, $1
0321   05BE E7            pop d
0322   05BF FD 43         mov [d], b
0323   05C1             _for9_cond:
0324   05C1 FA FD FF      lea d, [bp + -3] ; $j
0325   05C4 2A            mov b, [d]
0326   05C5             ; START RELATIONAL
0327   05C5 D7            push a
0328   05C6 11            mov a, b
0329   05C7 26 28 00      mov b, $28
0330   05CA             ; START TERMS
0331   05CA D7            push a
0332   05CB 11            mov a, b
0333   05CC 26 FF FF      mov b, $ffff
0334   05CF 56            add b, a
0335   05D0 E4            pop a
0336   05D1             ; END TERMS
0337   05D1 B0            cmp a, b
0338   05D2 FD 73         slt ; <= (signed)
0339   05D4 E4            pop a
0340   05D5             ; END RELATIONAL
0341   05D5 C0 00 00      cmp b, 0
0342   05D8 C6 1E 06      je _for9_exit
0343   05DB             _for9_block:
0344   05DB             ;; currState[i][j] = nextState[i][j]; 
0345   05DB 3B 77 27      mov d, _currState_data ; $currState
0346   05DE D7            push a
0347   05DF DA            push d
0348   05E0 FA FF FF      lea d, [bp + -1] ; $i
0349   05E3 2A            mov b, [d]
0350   05E4 E7            pop d
0351   05E5 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0352   05E9 DA            push d
0353   05EA FA FD FF      lea d, [bp + -3] ; $j
0354   05ED 2A            mov b, [d]
0355   05EE E7            pop d
0356   05EF 5A            add d, b
0357   05F0 E4            pop a
0358   05F1 DA            push d
0359   05F2 3B C7 22      mov d, _nextState_data ; $nextState
0360   05F5 D7            push a
0361   05F6 DA            push d
0362   05F7 FA FF FF      lea d, [bp + -1] ; $i
0363   05FA 2A            mov b, [d]
0364   05FB E7            pop d
0365   05FC FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0366   0600 DA            push d
0367   0601 FA FD FF      lea d, [bp + -3] ; $j
0368   0604 2A            mov b, [d]
0369   0605 E7            pop d
0370   0606 5A            add d, b
0371   0607 E4            pop a
0372   0608 32            mov bl, [d]
0373   0609 A7 00         mov bh, 0
0374   060B E7            pop d
0375   060C FD 3E         mov [d], bl
0376   060E             _for9_update:
0377   060E FA FD FF      lea d, [bp + -3] ; $j
0378   0611 2A            mov b, [d]
0379   0612 D8            push b
0380   0613 FD 77         inc b
0381   0615 FA FD FF      lea d, [bp + -3] ; $j
0382   0618 FD 43         mov [d], b
0383   061A E5            pop b
0384   061B 0A C1 05      jmp _for9_cond
0385   061E             _for9_exit:
0386   061E             _for8_update:
0387   061E FA FF FF      lea d, [bp + -1] ; $i
0388   0621 2A            mov b, [d]
0389   0622 D8            push b
0390   0623 FD 77         inc b
0391   0625 FA FF FF      lea d, [bp + -1] ; $i
0392   0628 FD 43         mov [d], b
0393   062A E5            pop b
0394   062B 0A 9D 05      jmp _for8_cond
0395   062E             _for8_exit:
0396   062E             ;; printf(clear); 
0397   062E 3B BC 22      mov d, _clear_data ; $clear
0398   0631 2D            mov b, d
0399   0632 FD AB         swp b
0400   0634 D8            push b
0401   0635 07 F1 12      call printf
0402   0638 51 02 00      add sp, 2
0403   063B             ;; show(); 
0404   063B 07 66 1F      call show
0405   063E             ;; puts("\n\rPress CTRL+C to quit.\n\r"); 
0406   063E 26 27 2C      mov b, __s0 ; "\n\rPress CTRL+C to quit.\n\r"
0407   0641 FD AB         swp b
0408   0643 D8            push b
0409   0644 07 19 1B      call puts
0410   0647 51 02 00      add sp, 2
0411   064A             _for3_update:
0412   064A 0A 98 04      jmp _for3_cond
0413   064D             _for3_exit:
0414   064D 05 0B         syscall sys_terminate_proc
0415   064F             
0416   064F             strcpy:
0417   064F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0418   0652             ; $psrc 
0419   0652             ; $pdest 
0420   0652 52 04 00      sub sp, 4
0421   0655             ;; psrc = src; 
0422   0655 FA FF FF      lea d, [bp + -1] ; $psrc
0423   0658 DA            push d
0424   0659 FA 07 00      lea d, [bp + 7] ; $src
0425   065C 2A            mov b, [d]
0426   065D E7            pop d
0427   065E FD 43         mov [d], b
0428   0660             ;; pdest = dest; 
0429   0660 FA FD FF      lea d, [bp + -3] ; $pdest
0430   0663 DA            push d
0431   0664 FA 05 00      lea d, [bp + 5] ; $dest
0432   0667 2A            mov b, [d]
0433   0668 E7            pop d
0434   0669 FD 43         mov [d], b
0435   066B             ;; while(*psrc) *pdest++ = *psrc++; 
0436   066B             _while10_cond:
0437   066B FA FF FF      lea d, [bp + -1] ; $psrc
0438   066E 2A            mov b, [d]
0439   066F 74            mov d, b
0440   0670 32            mov bl, [d]
0441   0671 A7 00         mov bh, 0
0442   0673 C0 00 00      cmp b, 0
0443   0676 C6 9E 06      je _while10_exit
0444   0679             _while10_block:
0445   0679             ;; *pdest++ = *psrc++; 
0446   0679 FA FD FF      lea d, [bp + -3] ; $pdest
0447   067C 2A            mov b, [d]
0448   067D D8            push b
0449   067E FD 77         inc b
0450   0680 FA FD FF      lea d, [bp + -3] ; $pdest
0451   0683 FD 43         mov [d], b
0452   0685 E5            pop b
0453   0686 D8            push b
0454   0687 FA FF FF      lea d, [bp + -1] ; $psrc
0455   068A 2A            mov b, [d]
0456   068B D8            push b
0457   068C FD 77         inc b
0458   068E FA FF FF      lea d, [bp + -1] ; $psrc
0459   0691 FD 43         mov [d], b
0460   0693 E5            pop b
0461   0694 74            mov d, b
0462   0695 32            mov bl, [d]
0463   0696 A7 00         mov bh, 0
0464   0698 E7            pop d
0465   0699 FD 3E         mov [d], bl
0466   069B 0A 6B 06      jmp _while10_cond
0467   069E             _while10_exit:
0468   069E             ;; *pdest = '\0'; 
0469   069E FA FD FF      lea d, [bp + -3] ; $pdest
0470   06A1 2A            mov b, [d]
0471   06A2 D8            push b
0472   06A3 26 00 00      mov b, $0
0473   06A6 E7            pop d
0474   06A7 FD 3E         mov [d], bl
0475   06A9 F9            leave
0476   06AA 09            ret
0477   06AB             
0478   06AB             strcmp:
0479   06AB F8 00 00      enter 0 ; (push bp; mov bp, sp)
0480   06AE             ;; while (*s1 && (*s1 == *s2)) { 
0481   06AE             _while11_cond:
0482   06AE FA 05 00      lea d, [bp + 5] ; $s1
0483   06B1 2A            mov b, [d]
0484   06B2 74            mov d, b
0485   06B3 32            mov bl, [d]
0486   06B4 A7 00         mov bh, 0
0487   06B6 D7            push a
0488   06B7 11            mov a, b
0489   06B8 FA 05 00      lea d, [bp + 5] ; $s1
0490   06BB 2A            mov b, [d]
0491   06BC 74            mov d, b
0492   06BD 32            mov bl, [d]
0493   06BE A7 00         mov bh, 0
0494   06C0             ; START RELATIONAL
0495   06C0 D7            push a
0496   06C1 11            mov a, b
0497   06C2 FA 07 00      lea d, [bp + 7] ; $s2
0498   06C5 2A            mov b, [d]
0499   06C6 74            mov d, b
0500   06C7 32            mov bl, [d]
0501   06C8 A7 00         mov bh, 0
0502   06CA B0            cmp a, b
0503   06CB FD 71         seq ; ==
0504   06CD E4            pop a
0505   06CE             ; END RELATIONAL
0506   06CE FD A7         sand a, b ; &&
0507   06D0 E4            pop a
0508   06D1 C0 00 00      cmp b, 0
0509   06D4 C6 F4 06      je _while11_exit
0510   06D7             _while11_block:
0511   06D7             ;; s1++; 
0512   06D7 FA 05 00      lea d, [bp + 5] ; $s1
0513   06DA 2A            mov b, [d]
0514   06DB D8            push b
0515   06DC FD 77         inc b
0516   06DE FA 05 00      lea d, [bp + 5] ; $s1
0517   06E1 FD 43         mov [d], b
0518   06E3 E5            pop b
0519   06E4             ;; s2++; 
0520   06E4 FA 07 00      lea d, [bp + 7] ; $s2
0521   06E7 2A            mov b, [d]
0522   06E8 D8            push b
0523   06E9 FD 77         inc b
0524   06EB FA 07 00      lea d, [bp + 7] ; $s2
0525   06EE FD 43         mov [d], b
0526   06F0 E5            pop b
0527   06F1 0A AE 06      jmp _while11_cond
0528   06F4             _while11_exit:
0529   06F4             ;; return *s1 - *s2; 
0530   06F4 FA 05 00      lea d, [bp + 5] ; $s1
0531   06F7 2A            mov b, [d]
0532   06F8 74            mov d, b
0533   06F9 32            mov bl, [d]
0534   06FA A7 00         mov bh, 0
0535   06FC             ; START TERMS
0536   06FC D7            push a
0537   06FD 11            mov a, b
0538   06FE FA 07 00      lea d, [bp + 7] ; $s2
0539   0701 2A            mov b, [d]
0540   0702 74            mov d, b
0541   0703 32            mov bl, [d]
0542   0704 A7 00         mov bh, 0
0543   0706 60            sub a, b
0544   0707 27            mov b, a
0545   0708 E4            pop a
0546   0709             ; END TERMS
0547   0709 F9            leave
0548   070A 09            ret
0549   070B             
0550   070B             strcat:
0551   070B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0552   070E             ; $dest_len 
0553   070E             ; $i 
0554   070E 52 04 00      sub sp, 4
0555   0711             ;; dest_len = strlen(dest); 
0556   0711 FA FF FF      lea d, [bp + -1] ; $dest_len
0557   0714 DA            push d
0558   0715 FA 05 00      lea d, [bp + 5] ; $dest
0559   0718 2A            mov b, [d]
0560   0719 FD AB         swp b
0561   071B D8            push b
0562   071C 07 BE 07      call strlen
0563   071F 51 02 00      add sp, 2
0564   0722 E7            pop d
0565   0723 FD 43         mov [d], b
0566   0725             ;; for (i = 0; src[i] != 0; i=i+1) { 
0567   0725             _for12_init:
0568   0725 FA FD FF      lea d, [bp + -3] ; $i
0569   0728 DA            push d
0570   0729 26 00 00      mov b, $0
0571   072C E7            pop d
0572   072D FD 43         mov [d], b
0573   072F             _for12_cond:
0574   072F FA 07 00      lea d, [bp + 7] ; $src
0575   0732 FD 2A         mov d, [d]
0576   0734 D7            push a
0577   0735 DA            push d
0578   0736 FA FD FF      lea d, [bp + -3] ; $i
0579   0739 2A            mov b, [d]
0580   073A E7            pop d
0581   073B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0582   073F E4            pop a
0583   0740 32            mov bl, [d]
0584   0741 A7 00         mov bh, 0
0585   0743             ; START RELATIONAL
0586   0743 D7            push a
0587   0744 11            mov a, b
0588   0745 26 00 00      mov b, $0
0589   0748 B0            cmp a, b
0590   0749 FD 72         sneq ; !=
0591   074B E4            pop a
0592   074C             ; END RELATIONAL
0593   074C C0 00 00      cmp b, 0
0594   074F C6 98 07      je _for12_exit
0595   0752             _for12_block:
0596   0752             ;; dest[dest_len + i] = src[i]; 
0597   0752 FA 05 00      lea d, [bp + 5] ; $dest
0598   0755 FD 2A         mov d, [d]
0599   0757 D7            push a
0600   0758 DA            push d
0601   0759 FA FF FF      lea d, [bp + -1] ; $dest_len
0602   075C 2A            mov b, [d]
0603   075D             ; START TERMS
0604   075D D7            push a
0605   075E 11            mov a, b
0606   075F FA FD FF      lea d, [bp + -3] ; $i
0607   0762 2A            mov b, [d]
0608   0763 56            add b, a
0609   0764 E4            pop a
0610   0765             ; END TERMS
0611   0765 E7            pop d
0612   0766 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0613   076A E4            pop a
0614   076B DA            push d
0615   076C FA 07 00      lea d, [bp + 7] ; $src
0616   076F FD 2A         mov d, [d]
0617   0771 D7            push a
0618   0772 DA            push d
0619   0773 FA FD FF      lea d, [bp + -3] ; $i
0620   0776 2A            mov b, [d]
0621   0777 E7            pop d
0622   0778 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0623   077C E4            pop a
0624   077D 32            mov bl, [d]
0625   077E A7 00         mov bh, 0
0626   0780 E7            pop d
0627   0781 FD 3E         mov [d], bl
0628   0783             _for12_update:
0629   0783 FA FD FF      lea d, [bp + -3] ; $i
0630   0786 DA            push d
0631   0787 FA FD FF      lea d, [bp + -3] ; $i
0632   078A 2A            mov b, [d]
0633   078B             ; START TERMS
0634   078B D7            push a
0635   078C 11            mov a, b
0636   078D 26 01 00      mov b, $1
0637   0790 56            add b, a
0638   0791 E4            pop a
0639   0792             ; END TERMS
0640   0792 E7            pop d
0641   0793 FD 43         mov [d], b
0642   0795 0A 2F 07      jmp _for12_cond
0643   0798             _for12_exit:
0644   0798             ;; dest[dest_len + i] = 0; 
0645   0798 FA 05 00      lea d, [bp + 5] ; $dest
0646   079B FD 2A         mov d, [d]
0647   079D D7            push a
0648   079E DA            push d
0649   079F FA FF FF      lea d, [bp + -1] ; $dest_len
0650   07A2 2A            mov b, [d]
0651   07A3             ; START TERMS
0652   07A3 D7            push a
0653   07A4 11            mov a, b
0654   07A5 FA FD FF      lea d, [bp + -3] ; $i
0655   07A8 2A            mov b, [d]
0656   07A9 56            add b, a
0657   07AA E4            pop a
0658   07AB             ; END TERMS
0659   07AB E7            pop d
0660   07AC FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0661   07B0 E4            pop a
0662   07B1 DA            push d
0663   07B2 26 00 00      mov b, $0
0664   07B5 E7            pop d
0665   07B6 FD 3E         mov [d], bl
0666   07B8             ;; return dest; 
0667   07B8 FA 05 00      lea d, [bp + 5] ; $dest
0668   07BB 2A            mov b, [d]
0669   07BC F9            leave
0670   07BD 09            ret
0671   07BE             
0672   07BE             strlen:
0673   07BE F8 00 00      enter 0 ; (push bp; mov bp, sp)
0674   07C1             ; $length 
0675   07C1 52 02 00      sub sp, 2
0676   07C4             ;; length = 0; 
0677   07C4 FA FF FF      lea d, [bp + -1] ; $length
0678   07C7 DA            push d
0679   07C8 26 00 00      mov b, $0
0680   07CB E7            pop d
0681   07CC FD 43         mov [d], b
0682   07CE             ;; while (str[length] != 0) { 
0683   07CE             _while13_cond:
0684   07CE FA 05 00      lea d, [bp + 5] ; $str
0685   07D1 FD 2A         mov d, [d]
0686   07D3 D7            push a
0687   07D4 DA            push d
0688   07D5 FA FF FF      lea d, [bp + -1] ; $length
0689   07D8 2A            mov b, [d]
0690   07D9 E7            pop d
0691   07DA FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0692   07DE E4            pop a
0693   07DF 32            mov bl, [d]
0694   07E0 A7 00         mov bh, 0
0695   07E2             ; START RELATIONAL
0696   07E2 D7            push a
0697   07E3 11            mov a, b
0698   07E4 26 00 00      mov b, $0
0699   07E7 B0            cmp a, b
0700   07E8 FD 72         sneq ; !=
0701   07EA E4            pop a
0702   07EB             ; END RELATIONAL
0703   07EB C0 00 00      cmp b, 0
0704   07EE C6 01 08      je _while13_exit
0705   07F1             _while13_block:
0706   07F1             ;; length++; 
0707   07F1 FA FF FF      lea d, [bp + -1] ; $length
0708   07F4 2A            mov b, [d]
0709   07F5 D8            push b
0710   07F6 FD 77         inc b
0711   07F8 FA FF FF      lea d, [bp + -1] ; $length
0712   07FB FD 43         mov [d], b
0713   07FD E5            pop b
0714   07FE 0A CE 07      jmp _while13_cond
0715   0801             _while13_exit:
0716   0801             ;; return length; 
0717   0801 FA FF FF      lea d, [bp + -1] ; $length
0718   0804 2A            mov b, [d]
0719   0805 F9            leave
0720   0806 09            ret
0721   0807             
0722   0807             exit:
0723   0807 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0724   080A             
0725   080A             ; --- BEGIN INLINE ASM BLOCK
0726   080A 05 0B         syscall sys_terminate_proc
0727   080C             ; --- END INLINE ASM BLOCK
0728   080C             
0729   080C F9            leave
0730   080D 09            ret
0731   080E             
0732   080E             atoi:
0733   080E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0734   0811             ; $result 
0735   0811 10 00 00      mov a, $0
0736   0814 45 FF FF      mov [bp + -1], a
0737   0817             ; $sign 
0738   0817 10 01 00      mov a, $1
0739   081A 45 FD FF      mov [bp + -3], a
0740   081D 52 04 00      sub sp, 4
0741   0820             ;; while (*str == ' ') str++; 
0742   0820             _while14_cond:
0743   0820 FA 05 00      lea d, [bp + 5] ; $str
0744   0823 2A            mov b, [d]
0745   0824 74            mov d, b
0746   0825 32            mov bl, [d]
0747   0826 A7 00         mov bh, 0
0748   0828             ; START RELATIONAL
0749   0828 D7            push a
0750   0829 11            mov a, b
0751   082A 26 20 00      mov b, $20
0752   082D B0            cmp a, b
0753   082E FD 71         seq ; ==
0754   0830 E4            pop a
0755   0831             ; END RELATIONAL
0756   0831 C0 00 00      cmp b, 0
0757   0834 C6 47 08      je _while14_exit
0758   0837             _while14_block:
0759   0837             ;; str++; 
0760   0837 FA 05 00      lea d, [bp + 5] ; $str
0761   083A 2A            mov b, [d]
0762   083B D8            push b
0763   083C FD 77         inc b
0764   083E FA 05 00      lea d, [bp + 5] ; $str
0765   0841 FD 43         mov [d], b
0766   0843 E5            pop b
0767   0844 0A 20 08      jmp _while14_cond
0768   0847             _while14_exit:
0769   0847             ;; if (*str == '-' || *str == '+') { 
0770   0847             _if15_cond:
0771   0847 FA 05 00      lea d, [bp + 5] ; $str
0772   084A 2A            mov b, [d]
0773   084B 74            mov d, b
0774   084C 32            mov bl, [d]
0775   084D A7 00         mov bh, 0
0776   084F             ; START RELATIONAL
0777   084F D7            push a
0778   0850 11            mov a, b
0779   0851 26 2D 00      mov b, $2d
0780   0854 B0            cmp a, b
0781   0855 FD 71         seq ; ==
0782   0857 E4            pop a
0783   0858             ; END RELATIONAL
0784   0858 D7            push a
0785   0859 11            mov a, b
0786   085A FA 05 00      lea d, [bp + 5] ; $str
0787   085D 2A            mov b, [d]
0788   085E 74            mov d, b
0789   085F 32            mov bl, [d]
0790   0860 A7 00         mov bh, 0
0791   0862             ; START RELATIONAL
0792   0862 D7            push a
0793   0863 11            mov a, b
0794   0864 26 2B 00      mov b, $2b
0795   0867 B0            cmp a, b
0796   0868 FD 71         seq ; ==
0797   086A E4            pop a
0798   086B             ; END RELATIONAL
0799   086B FD A8         sor a, b ; ||
0800   086D E4            pop a
0801   086E C0 00 00      cmp b, 0
0802   0871 C6 A8 08      je _if15_exit
0803   0874             _if15_true:
0804   0874             ;; if (*str == '-') sign = -1; 
0805   0874             _if16_cond:
0806   0874 FA 05 00      lea d, [bp + 5] ; $str
0807   0877 2A            mov b, [d]
0808   0878 74            mov d, b
0809   0879 32            mov bl, [d]
0810   087A A7 00         mov bh, 0
0811   087C             ; START RELATIONAL
0812   087C D7            push a
0813   087D 11            mov a, b
0814   087E 26 2D 00      mov b, $2d
0815   0881 B0            cmp a, b
0816   0882 FD 71         seq ; ==
0817   0884 E4            pop a
0818   0885             ; END RELATIONAL
0819   0885 C0 00 00      cmp b, 0
0820   0888 C6 98 08      je _if16_exit
0821   088B             _if16_true:
0822   088B             ;; sign = -1; 
0823   088B FA FD FF      lea d, [bp + -3] ; $sign
0824   088E DA            push d
0825   088F 26 FF FF      mov b, $ffff
0826   0892 E7            pop d
0827   0893 FD 43         mov [d], b
0828   0895 0A 98 08      jmp _if16_exit
0829   0898             _if16_exit:
0830   0898             ;; str++; 
0831   0898 FA 05 00      lea d, [bp + 5] ; $str
0832   089B 2A            mov b, [d]
0833   089C D8            push b
0834   089D FD 77         inc b
0835   089F FA 05 00      lea d, [bp + 5] ; $str
0836   08A2 FD 43         mov [d], b
0837   08A4 E5            pop b
0838   08A5 0A A8 08      jmp _if15_exit
0839   08A8             _if15_exit:
0840   08A8             ;; while (*str >= '0' && *str <= '9') { 
0841   08A8             _while17_cond:
0842   08A8 FA 05 00      lea d, [bp + 5] ; $str
0843   08AB 2A            mov b, [d]
0844   08AC 74            mov d, b
0845   08AD 32            mov bl, [d]
0846   08AE A7 00         mov bh, 0
0847   08B0             ; START RELATIONAL
0848   08B0 D7            push a
0849   08B1 11            mov a, b
0850   08B2 26 30 00      mov b, $30
0851   08B5 B0            cmp a, b
0852   08B6 FD 82         sgeu ; >= (unsigned)
0853   08B8 E4            pop a
0854   08B9             ; END RELATIONAL
0855   08B9 D7            push a
0856   08BA 11            mov a, b
0857   08BB FA 05 00      lea d, [bp + 5] ; $str
0858   08BE 2A            mov b, [d]
0859   08BF 74            mov d, b
0860   08C0 32            mov bl, [d]
0861   08C1 A7 00         mov bh, 0
0862   08C3             ; START RELATIONAL
0863   08C3 D7            push a
0864   08C4 11            mov a, b
0865   08C5 26 39 00      mov b, $39
0866   08C8 B0            cmp a, b
0867   08C9 FD 76         sleu ; <= (unsigned)
0868   08CB E4            pop a
0869   08CC             ; END RELATIONAL
0870   08CC FD A7         sand a, b ; &&
0871   08CE E4            pop a
0872   08CF C0 00 00      cmp b, 0
0873   08D2 C6 0D 09      je _while17_exit
0874   08D5             _while17_block:
0875   08D5             ;; result = result * 10 + (*str - '0'); 
0876   08D5 FA FF FF      lea d, [bp + -1] ; $result
0877   08D8 DA            push d
0878   08D9 FA FF FF      lea d, [bp + -1] ; $result
0879   08DC 2A            mov b, [d]
0880   08DD             ; START FACTORS
0881   08DD D7            push a
0882   08DE 11            mov a, b
0883   08DF 26 0A 00      mov b, $a
0884   08E2 AC            mul a, b ; *
0885   08E3 11            mov a, b
0886   08E4 27            mov b, a
0887   08E5 E4            pop a
0888   08E6             ; END FACTORS
0889   08E6             ; START TERMS
0890   08E6 D7            push a
0891   08E7 11            mov a, b
0892   08E8 FA 05 00      lea d, [bp + 5] ; $str
0893   08EB 2A            mov b, [d]
0894   08EC 74            mov d, b
0895   08ED 32            mov bl, [d]
0896   08EE A7 00         mov bh, 0
0897   08F0             ; START TERMS
0898   08F0 D7            push a
0899   08F1 11            mov a, b
0900   08F2 26 30 00      mov b, $30
0901   08F5 60            sub a, b
0902   08F6 27            mov b, a
0903   08F7 E4            pop a
0904   08F8             ; END TERMS
0905   08F8 56            add b, a
0906   08F9 E4            pop a
0907   08FA             ; END TERMS
0908   08FA E7            pop d
0909   08FB FD 43         mov [d], b
0910   08FD             ;; str++; 
0911   08FD FA 05 00      lea d, [bp + 5] ; $str
0912   0900 2A            mov b, [d]
0913   0901 D8            push b
0914   0902 FD 77         inc b
0915   0904 FA 05 00      lea d, [bp + 5] ; $str
0916   0907 FD 43         mov [d], b
0917   0909 E5            pop b
0918   090A 0A A8 08      jmp _while17_cond
0919   090D             _while17_exit:
0920   090D             ;; return sign * result; 
0921   090D FA FD FF      lea d, [bp + -3] ; $sign
0922   0910 2A            mov b, [d]
0923   0911             ; START FACTORS
0924   0911 D7            push a
0925   0912 11            mov a, b
0926   0913 FA FF FF      lea d, [bp + -1] ; $result
0927   0916 2A            mov b, [d]
0928   0917 AC            mul a, b ; *
0929   0918 11            mov a, b
0930   0919 27            mov b, a
0931   091A E4            pop a
0932   091B             ; END FACTORS
0933   091B F9            leave
0934   091C 09            ret
0935   091D             
0936   091D             rand:
0937   091D F8 00 00      enter 0 ; (push bp; mov bp, sp)
0938   0920             ; $sec 
0939   0920 52 02 00      sub sp, 2
0940   0923             
0941   0923             ; --- BEGIN INLINE ASM BLOCK
0942   0923 19 00         mov al, 0
0943   0925 05 01         syscall sys_rtc					
0944   0927 1A            mov al, ah
0945   0928 FA FF FF      lea d, [bp + -1] ; $sec
0946   092B 1E            mov al, [d]
0947   092C 22 00         mov ah, 0
0948   092E             ; --- END INLINE ASM BLOCK
0949   092E             
0950   092E             ;; return sec; 
0951   092E FA FF FF      lea d, [bp + -1] ; $sec
0952   0931 2A            mov b, [d]
0953   0932 F9            leave
0954   0933 09            ret
0955   0934             
0956   0934             srand:
0957   0934 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0958   0937 F9            leave
0959   0938 09            ret
0960   0939             
0961   0939             malloc:
0962   0939 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0963   093C F9            leave
0964   093D 09            ret
0965   093E             
0966   093E             calloc:
0967   093E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0968   0941 F9            leave
0969   0942 09            ret
0970   0943             
0971   0943             realloc:
0972   0943 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0973   0946 F9            leave
0974   0947 09            ret
0975   0948             
0976   0948             alloc:
0977   0948 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0978   094B             ;; heap_top = heap_top + bytes; 
0979   094B 3B 8B 2C      mov d, _heap_top ; $heap_top
0980   094E DA            push d
0981   094F 3B 8B 2C      mov d, _heap_top ; $heap_top
0982   0952 2A            mov b, [d]
0983   0953             ; START TERMS
0984   0953 D7            push a
0985   0954 11            mov a, b
0986   0955 FA 05 00      lea d, [bp + 5] ; $bytes
0987   0958 2A            mov b, [d]
0988   0959 56            add b, a
0989   095A E4            pop a
0990   095B             ; END TERMS
0991   095B E7            pop d
0992   095C FD 43         mov [d], b
0993   095E             ;; return heap_top - bytes; 
0994   095E 3B 8B 2C      mov d, _heap_top ; $heap_top
0995   0961 2A            mov b, [d]
0996   0962             ; START TERMS
0997   0962 D7            push a
0998   0963 11            mov a, b
0999   0964 FA 05 00      lea d, [bp + 5] ; $bytes
1000   0967 2A            mov b, [d]
1001   0968 60            sub a, b
1002   0969 27            mov b, a
1003   096A E4            pop a
1004   096B             ; END TERMS
1005   096B F9            leave
1006   096C 09            ret
1007   096D             
1008   096D             free:
1009   096D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1010   0970             ;; return heap_top = heap_top - bytes; 
1011   0970 3B 8B 2C      mov d, _heap_top ; $heap_top
1012   0973 DA            push d
1013   0974 3B 8B 2C      mov d, _heap_top ; $heap_top
1014   0977 2A            mov b, [d]
1015   0978             ; START TERMS
1016   0978 D7            push a
1017   0979 11            mov a, b
1018   097A FA 05 00      lea d, [bp + 5] ; $bytes
1019   097D 2A            mov b, [d]
1020   097E 60            sub a, b
1021   097F 27            mov b, a
1022   0980 E4            pop a
1023   0981             ; END TERMS
1024   0981 E7            pop d
1025   0982 FD 43         mov [d], b
1026   0984 F9            leave
1027   0985 09            ret
1028   0986             
1029   0986             base64_encode:
1030   0986 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1031   0989             ; $i 
1032   0989 10 00 00      mov a, $0
1033   098C 45 FF FF      mov [bp + -1], a
1034   098F             ; $j 
1035   098F 10 00 00      mov a, $0
1036   0992 45 FD FF      mov [bp + -3], a
1037   0995             ; $k 
1038   0995             ; $input_len 
1039   0995             ; $input_buffer 
1040   0995             ; $output_buffer 
1041   0995 52 0F 00      sub sp, 15
1042   0998             ;; input_len = strlen(input); 
1043   0998 FA F9 FF      lea d, [bp + -7] ; $input_len
1044   099B DA            push d
1045   099C FA 05 00      lea d, [bp + 5] ; $input
1046   099F 2A            mov b, [d]
1047   09A0 FD AB         swp b
1048   09A2 D8            push b
1049   09A3 07 BE 07      call strlen
1050   09A6 51 02 00      add sp, 2
1051   09A9 E7            pop d
1052   09AA FD 43         mov [d], b
1053   09AC             ;; while (input_len--) { 
1054   09AC             _while18_cond:
1055   09AC FA F9 FF      lea d, [bp + -7] ; $input_len
1056   09AF 2A            mov b, [d]
1057   09B0 D8            push b
1058   09B1 FD 7D         dec b
1059   09B3 FA F9 FF      lea d, [bp + -7] ; $input_len
1060   09B6 FD 43         mov [d], b
1061   09B8 E5            pop b
1062   09B9 C0 00 00      cmp b, 0
1063   09BC C6 70 0B      je _while18_exit
1064   09BF             _while18_block:
1065   09BF             ;; input_buffer[i++] = *(input++); 
1066   09BF FA F6 FF      lea d, [bp + -10] ; $input_buffer
1067   09C2 D7            push a
1068   09C3 DA            push d
1069   09C4 FA FF FF      lea d, [bp + -1] ; $i
1070   09C7 2A            mov b, [d]
1071   09C8 D8            push b
1072   09C9 FD 77         inc b
1073   09CB FA FF FF      lea d, [bp + -1] ; $i
1074   09CE FD 43         mov [d], b
1075   09D0 E5            pop b
1076   09D1 E7            pop d
1077   09D2 5A            add d, b
1078   09D3 E4            pop a
1079   09D4 DA            push d
1080   09D5 FA 05 00      lea d, [bp + 5] ; $input
1081   09D8 2A            mov b, [d]
1082   09D9 D8            push b
1083   09DA FD 77         inc b
1084   09DC FA 05 00      lea d, [bp + 5] ; $input
1085   09DF FD 43         mov [d], b
1086   09E1 E5            pop b
1087   09E2 74            mov d, b
1088   09E3 32            mov bl, [d]
1089   09E4 A7 00         mov bh, 0
1090   09E6 E7            pop d
1091   09E7 FD 3E         mov [d], bl
1092   09E9             ;; if (i == 3) { 
1093   09E9             _if19_cond:
1094   09E9 FA FF FF      lea d, [bp + -1] ; $i
1095   09EC 2A            mov b, [d]
1096   09ED             ; START RELATIONAL
1097   09ED D7            push a
1098   09EE 11            mov a, b
1099   09EF 26 03 00      mov b, $3
1100   09F2 B0            cmp a, b
1101   09F3 FD 71         seq ; ==
1102   09F5 E4            pop a
1103   09F6             ; END RELATIONAL
1104   09F6 C0 00 00      cmp b, 0
1105   09F9 C6 6D 0B      je _if19_exit
1106   09FC             _if19_true:
1107   09FC             ;; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
1108   09FC FA F2 FF      lea d, [bp + -14] ; $output_buffer
1109   09FF D7            push a
1110   0A00 DA            push d
1111   0A01 26 00 00      mov b, $0
1112   0A04 E7            pop d
1113   0A05 5A            add d, b
1114   0A06 E4            pop a
1115   0A07 DA            push d
1116   0A08 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1117   0A0B D7            push a
1118   0A0C DA            push d
1119   0A0D 26 00 00      mov b, $0
1120   0A10 E7            pop d
1121   0A11 5A            add d, b
1122   0A12 E4            pop a
1123   0A13 32            mov bl, [d]
1124   0A14 A7 00         mov bh, 0
1125   0A16 D7            push a
1126   0A17 11            mov a, b
1127   0A18 26 FC 00      mov b, $fc
1128   0A1B 86            and a, b ; &
1129   0A1C 27            mov b, a
1130   0A1D E4            pop a
1131   0A1E             ; START SHIFT
1132   0A1E D7            push a
1133   0A1F 11            mov a, b
1134   0A20 26 02 00      mov b, $2
1135   0A23 FD 39         mov c, b
1136   0A25 A5            ashr a, cl
1137   0A26 27            mov b, a
1138   0A27 E4            pop a
1139   0A28             ; END SHIFT
1140   0A28 E7            pop d
1141   0A29 FD 3E         mov [d], bl
1142   0A2B             ;; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
1143   0A2B FA F2 FF      lea d, [bp + -14] ; $output_buffer
1144   0A2E D7            push a
1145   0A2F DA            push d
1146   0A30 26 01 00      mov b, $1
1147   0A33 E7            pop d
1148   0A34 5A            add d, b
1149   0A35 E4            pop a
1150   0A36 DA            push d
1151   0A37 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1152   0A3A D7            push a
1153   0A3B DA            push d
1154   0A3C 26 00 00      mov b, $0
1155   0A3F E7            pop d
1156   0A40 5A            add d, b
1157   0A41 E4            pop a
1158   0A42 32            mov bl, [d]
1159   0A43 A7 00         mov bh, 0
1160   0A45 D7            push a
1161   0A46 11            mov a, b
1162   0A47 26 03 00      mov b, $3
1163   0A4A 86            and a, b ; &
1164   0A4B 27            mov b, a
1165   0A4C E4            pop a
1166   0A4D             ; START SHIFT
1167   0A4D D7            push a
1168   0A4E 11            mov a, b
1169   0A4F 26 04 00      mov b, $4
1170   0A52 FD 39         mov c, b
1171   0A54 9D            shl a, cl
1172   0A55 27            mov b, a
1173   0A56 E4            pop a
1174   0A57             ; END SHIFT
1175   0A57             ; START TERMS
1176   0A57 D7            push a
1177   0A58 11            mov a, b
1178   0A59 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1179   0A5C D7            push a
1180   0A5D DA            push d
1181   0A5E 26 01 00      mov b, $1
1182   0A61 E7            pop d
1183   0A62 5A            add d, b
1184   0A63 E4            pop a
1185   0A64 32            mov bl, [d]
1186   0A65 A7 00         mov bh, 0
1187   0A67 D7            push a
1188   0A68 11            mov a, b
1189   0A69 26 F0 00      mov b, $f0
1190   0A6C 86            and a, b ; &
1191   0A6D 27            mov b, a
1192   0A6E E4            pop a
1193   0A6F             ; START SHIFT
1194   0A6F D7            push a
1195   0A70 11            mov a, b
1196   0A71 26 04 00      mov b, $4
1197   0A74 FD 39         mov c, b
1198   0A76 A5            ashr a, cl
1199   0A77 27            mov b, a
1200   0A78 E4            pop a
1201   0A79             ; END SHIFT
1202   0A79 56            add b, a
1203   0A7A E4            pop a
1204   0A7B             ; END TERMS
1205   0A7B E7            pop d
1206   0A7C FD 3E         mov [d], bl
1207   0A7E             ;; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
1208   0A7E FA F2 FF      lea d, [bp + -14] ; $output_buffer
1209   0A81 D7            push a
1210   0A82 DA            push d
1211   0A83 26 02 00      mov b, $2
1212   0A86 E7            pop d
1213   0A87 5A            add d, b
1214   0A88 E4            pop a
1215   0A89 DA            push d
1216   0A8A FA F6 FF      lea d, [bp + -10] ; $input_buffer
1217   0A8D D7            push a
1218   0A8E DA            push d
1219   0A8F 26 01 00      mov b, $1
1220   0A92 E7            pop d
1221   0A93 5A            add d, b
1222   0A94 E4            pop a
1223   0A95 32            mov bl, [d]
1224   0A96 A7 00         mov bh, 0
1225   0A98 D7            push a
1226   0A99 11            mov a, b
1227   0A9A 26 0F 00      mov b, $f
1228   0A9D 86            and a, b ; &
1229   0A9E 27            mov b, a
1230   0A9F E4            pop a
1231   0AA0             ; START SHIFT
1232   0AA0 D7            push a
1233   0AA1 11            mov a, b
1234   0AA2 26 02 00      mov b, $2
1235   0AA5 FD 39         mov c, b
1236   0AA7 9D            shl a, cl
1237   0AA8 27            mov b, a
1238   0AA9 E4            pop a
1239   0AAA             ; END SHIFT
1240   0AAA             ; START TERMS
1241   0AAA D7            push a
1242   0AAB 11            mov a, b
1243   0AAC FA F6 FF      lea d, [bp + -10] ; $input_buffer
1244   0AAF D7            push a
1245   0AB0 DA            push d
1246   0AB1 26 02 00      mov b, $2
1247   0AB4 E7            pop d
1248   0AB5 5A            add d, b
1249   0AB6 E4            pop a
1250   0AB7 32            mov bl, [d]
1251   0AB8 A7 00         mov bh, 0
1252   0ABA D7            push a
1253   0ABB 11            mov a, b
1254   0ABC 26 C0 00      mov b, $c0
1255   0ABF 86            and a, b ; &
1256   0AC0 27            mov b, a
1257   0AC1 E4            pop a
1258   0AC2             ; START SHIFT
1259   0AC2 D7            push a
1260   0AC3 11            mov a, b
1261   0AC4 26 06 00      mov b, $6
1262   0AC7 FD 39         mov c, b
1263   0AC9 A5            ashr a, cl
1264   0ACA 27            mov b, a
1265   0ACB E4            pop a
1266   0ACC             ; END SHIFT
1267   0ACC 56            add b, a
1268   0ACD E4            pop a
1269   0ACE             ; END TERMS
1270   0ACE E7            pop d
1271   0ACF FD 3E         mov [d], bl
1272   0AD1             ;; output_buffer[3] = input_buffer[2] & 0x3F; 
1273   0AD1 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1274   0AD4 D7            push a
1275   0AD5 DA            push d
1276   0AD6 26 03 00      mov b, $3
1277   0AD9 E7            pop d
1278   0ADA 5A            add d, b
1279   0ADB E4            pop a
1280   0ADC DA            push d
1281   0ADD FA F6 FF      lea d, [bp + -10] ; $input_buffer
1282   0AE0 D7            push a
1283   0AE1 DA            push d
1284   0AE2 26 02 00      mov b, $2
1285   0AE5 E7            pop d
1286   0AE6 5A            add d, b
1287   0AE7 E4            pop a
1288   0AE8 32            mov bl, [d]
1289   0AE9 A7 00         mov bh, 0
1290   0AEB D7            push a
1291   0AEC 11            mov a, b
1292   0AED 26 3F 00      mov b, $3f
1293   0AF0 86            and a, b ; &
1294   0AF1 27            mov b, a
1295   0AF2 E4            pop a
1296   0AF3 E7            pop d
1297   0AF4 FD 3E         mov [d], bl
1298   0AF6             ;; for (i = 0; i < 4; i++) { 
1299   0AF6             _for20_init:
1300   0AF6 FA FF FF      lea d, [bp + -1] ; $i
1301   0AF9 DA            push d
1302   0AFA 26 00 00      mov b, $0
1303   0AFD E7            pop d
1304   0AFE FD 43         mov [d], b
1305   0B00             _for20_cond:
1306   0B00 FA FF FF      lea d, [bp + -1] ; $i
1307   0B03 2A            mov b, [d]
1308   0B04             ; START RELATIONAL
1309   0B04 D7            push a
1310   0B05 11            mov a, b
1311   0B06 26 04 00      mov b, $4
1312   0B09 B0            cmp a, b
1313   0B0A FD 73         slt ; <= (signed)
1314   0B0C E4            pop a
1315   0B0D             ; END RELATIONAL
1316   0B0D C0 00 00      cmp b, 0
1317   0B10 C6 60 0B      je _for20_exit
1318   0B13             _for20_block:
1319   0B13             ;; output[j++] = base64_table[output_buffer[i]]; 
1320   0B13 FA 07 00      lea d, [bp + 7] ; $output
1321   0B16 FD 2A         mov d, [d]
1322   0B18 D7            push a
1323   0B19 DA            push d
1324   0B1A FA FD FF      lea d, [bp + -3] ; $j
1325   0B1D 2A            mov b, [d]
1326   0B1E D8            push b
1327   0B1F FD 77         inc b
1328   0B21 FA FD FF      lea d, [bp + -3] ; $j
1329   0B24 FD 43         mov [d], b
1330   0B26 E5            pop b
1331   0B27 E7            pop d
1332   0B28 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1333   0B2C E4            pop a
1334   0B2D DA            push d
1335   0B2E 3B BA 22      mov d, _base64_table ; $base64_table
1336   0B31 FD 2A         mov d, [d]
1337   0B33 D7            push a
1338   0B34 DA            push d
1339   0B35 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1340   0B38 D7            push a
1341   0B39 DA            push d
1342   0B3A FA FF FF      lea d, [bp + -1] ; $i
1343   0B3D 2A            mov b, [d]
1344   0B3E E7            pop d
1345   0B3F 5A            add d, b
1346   0B40 E4            pop a
1347   0B41 32            mov bl, [d]
1348   0B42 A7 00         mov bh, 0
1349   0B44 E7            pop d
1350   0B45 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1351   0B49 E4            pop a
1352   0B4A 32            mov bl, [d]
1353   0B4B A7 00         mov bh, 0
1354   0B4D E7            pop d
1355   0B4E FD 3E         mov [d], bl
1356   0B50             _for20_update:
1357   0B50 FA FF FF      lea d, [bp + -1] ; $i
1358   0B53 2A            mov b, [d]
1359   0B54 D8            push b
1360   0B55 FD 77         inc b
1361   0B57 FA FF FF      lea d, [bp + -1] ; $i
1362   0B5A FD 43         mov [d], b
1363   0B5C E5            pop b
1364   0B5D 0A 00 0B      jmp _for20_cond
1365   0B60             _for20_exit:
1366   0B60             ;; i = 0; 
1367   0B60 FA FF FF      lea d, [bp + -1] ; $i
1368   0B63 DA            push d
1369   0B64 26 00 00      mov b, $0
1370   0B67 E7            pop d
1371   0B68 FD 43         mov [d], b
1372   0B6A 0A 6D 0B      jmp _if19_exit
1373   0B6D             _if19_exit:
1374   0B6D 0A AC 09      jmp _while18_cond
1375   0B70             _while18_exit:
1376   0B70             ;; if (i) { 
1377   0B70             _if21_cond:
1378   0B70 FA FF FF      lea d, [bp + -1] ; $i
1379   0B73 2A            mov b, [d]
1380   0B74 C0 00 00      cmp b, 0
1381   0B77 C6 45 0D      je _if21_exit
1382   0B7A             _if21_true:
1383   0B7A             ;; for (k = i; k < 3; k++) { 
1384   0B7A             _for22_init:
1385   0B7A FA FB FF      lea d, [bp + -5] ; $k
1386   0B7D DA            push d
1387   0B7E FA FF FF      lea d, [bp + -1] ; $i
1388   0B81 2A            mov b, [d]
1389   0B82 E7            pop d
1390   0B83 FD 43         mov [d], b
1391   0B85             _for22_cond:
1392   0B85 FA FB FF      lea d, [bp + -5] ; $k
1393   0B88 2A            mov b, [d]
1394   0B89             ; START RELATIONAL
1395   0B89 D7            push a
1396   0B8A 11            mov a, b
1397   0B8B 26 03 00      mov b, $3
1398   0B8E B0            cmp a, b
1399   0B8F FD 73         slt ; <= (signed)
1400   0B91 E4            pop a
1401   0B92             ; END RELATIONAL
1402   0B92 C0 00 00      cmp b, 0
1403   0B95 C6 BB 0B      je _for22_exit
1404   0B98             _for22_block:
1405   0B98             ;; input_buffer[k] = '\0'; 
1406   0B98 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1407   0B9B D7            push a
1408   0B9C DA            push d
1409   0B9D FA FB FF      lea d, [bp + -5] ; $k
1410   0BA0 2A            mov b, [d]
1411   0BA1 E7            pop d
1412   0BA2 5A            add d, b
1413   0BA3 E4            pop a
1414   0BA4 DA            push d
1415   0BA5 26 00 00      mov b, $0
1416   0BA8 E7            pop d
1417   0BA9 FD 3E         mov [d], bl
1418   0BAB             _for22_update:
1419   0BAB FA FB FF      lea d, [bp + -5] ; $k
1420   0BAE 2A            mov b, [d]
1421   0BAF D8            push b
1422   0BB0 FD 77         inc b
1423   0BB2 FA FB FF      lea d, [bp + -5] ; $k
1424   0BB5 FD 43         mov [d], b
1425   0BB7 E5            pop b
1426   0BB8 0A 85 0B      jmp _for22_cond
1427   0BBB             _for22_exit:
1428   0BBB             ;; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
1429   0BBB FA F2 FF      lea d, [bp + -14] ; $output_buffer
1430   0BBE D7            push a
1431   0BBF DA            push d
1432   0BC0 26 00 00      mov b, $0
1433   0BC3 E7            pop d
1434   0BC4 5A            add d, b
1435   0BC5 E4            pop a
1436   0BC6 DA            push d
1437   0BC7 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1438   0BCA D7            push a
1439   0BCB DA            push d
1440   0BCC 26 00 00      mov b, $0
1441   0BCF E7            pop d
1442   0BD0 5A            add d, b
1443   0BD1 E4            pop a
1444   0BD2 32            mov bl, [d]
1445   0BD3 A7 00         mov bh, 0
1446   0BD5 D7            push a
1447   0BD6 11            mov a, b
1448   0BD7 26 FC 00      mov b, $fc
1449   0BDA 86            and a, b ; &
1450   0BDB 27            mov b, a
1451   0BDC E4            pop a
1452   0BDD             ; START SHIFT
1453   0BDD D7            push a
1454   0BDE 11            mov a, b
1455   0BDF 26 02 00      mov b, $2
1456   0BE2 FD 39         mov c, b
1457   0BE4 A5            ashr a, cl
1458   0BE5 27            mov b, a
1459   0BE6 E4            pop a
1460   0BE7             ; END SHIFT
1461   0BE7 E7            pop d
1462   0BE8 FD 3E         mov [d], bl
1463   0BEA             ;; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
1464   0BEA FA F2 FF      lea d, [bp + -14] ; $output_buffer
1465   0BED D7            push a
1466   0BEE DA            push d
1467   0BEF 26 01 00      mov b, $1
1468   0BF2 E7            pop d
1469   0BF3 5A            add d, b
1470   0BF4 E4            pop a
1471   0BF5 DA            push d
1472   0BF6 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1473   0BF9 D7            push a
1474   0BFA DA            push d
1475   0BFB 26 00 00      mov b, $0
1476   0BFE E7            pop d
1477   0BFF 5A            add d, b
1478   0C00 E4            pop a
1479   0C01 32            mov bl, [d]
1480   0C02 A7 00         mov bh, 0
1481   0C04 D7            push a
1482   0C05 11            mov a, b
1483   0C06 26 03 00      mov b, $3
1484   0C09 86            and a, b ; &
1485   0C0A 27            mov b, a
1486   0C0B E4            pop a
1487   0C0C             ; START SHIFT
1488   0C0C D7            push a
1489   0C0D 11            mov a, b
1490   0C0E 26 04 00      mov b, $4
1491   0C11 FD 39         mov c, b
1492   0C13 9D            shl a, cl
1493   0C14 27            mov b, a
1494   0C15 E4            pop a
1495   0C16             ; END SHIFT
1496   0C16             ; START TERMS
1497   0C16 D7            push a
1498   0C17 11            mov a, b
1499   0C18 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1500   0C1B D7            push a
1501   0C1C DA            push d
1502   0C1D 26 01 00      mov b, $1
1503   0C20 E7            pop d
1504   0C21 5A            add d, b
1505   0C22 E4            pop a
1506   0C23 32            mov bl, [d]
1507   0C24 A7 00         mov bh, 0
1508   0C26 D7            push a
1509   0C27 11            mov a, b
1510   0C28 26 F0 00      mov b, $f0
1511   0C2B 86            and a, b ; &
1512   0C2C 27            mov b, a
1513   0C2D E4            pop a
1514   0C2E             ; START SHIFT
1515   0C2E D7            push a
1516   0C2F 11            mov a, b
1517   0C30 26 04 00      mov b, $4
1518   0C33 FD 39         mov c, b
1519   0C35 A5            ashr a, cl
1520   0C36 27            mov b, a
1521   0C37 E4            pop a
1522   0C38             ; END SHIFT
1523   0C38 56            add b, a
1524   0C39 E4            pop a
1525   0C3A             ; END TERMS
1526   0C3A E7            pop d
1527   0C3B FD 3E         mov [d], bl
1528   0C3D             ;; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
1529   0C3D FA F2 FF      lea d, [bp + -14] ; $output_buffer
1530   0C40 D7            push a
1531   0C41 DA            push d
1532   0C42 26 02 00      mov b, $2
1533   0C45 E7            pop d
1534   0C46 5A            add d, b
1535   0C47 E4            pop a
1536   0C48 DA            push d
1537   0C49 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1538   0C4C D7            push a
1539   0C4D DA            push d
1540   0C4E 26 01 00      mov b, $1
1541   0C51 E7            pop d
1542   0C52 5A            add d, b
1543   0C53 E4            pop a
1544   0C54 32            mov bl, [d]
1545   0C55 A7 00         mov bh, 0
1546   0C57 D7            push a
1547   0C58 11            mov a, b
1548   0C59 26 0F 00      mov b, $f
1549   0C5C 86            and a, b ; &
1550   0C5D 27            mov b, a
1551   0C5E E4            pop a
1552   0C5F             ; START SHIFT
1553   0C5F D7            push a
1554   0C60 11            mov a, b
1555   0C61 26 02 00      mov b, $2
1556   0C64 FD 39         mov c, b
1557   0C66 9D            shl a, cl
1558   0C67 27            mov b, a
1559   0C68 E4            pop a
1560   0C69             ; END SHIFT
1561   0C69             ; START TERMS
1562   0C69 D7            push a
1563   0C6A 11            mov a, b
1564   0C6B FA F6 FF      lea d, [bp + -10] ; $input_buffer
1565   0C6E D7            push a
1566   0C6F DA            push d
1567   0C70 26 02 00      mov b, $2
1568   0C73 E7            pop d
1569   0C74 5A            add d, b
1570   0C75 E4            pop a
1571   0C76 32            mov bl, [d]
1572   0C77 A7 00         mov bh, 0
1573   0C79 D7            push a
1574   0C7A 11            mov a, b
1575   0C7B 26 C0 00      mov b, $c0
1576   0C7E 86            and a, b ; &
1577   0C7F 27            mov b, a
1578   0C80 E4            pop a
1579   0C81             ; START SHIFT
1580   0C81 D7            push a
1581   0C82 11            mov a, b
1582   0C83 26 06 00      mov b, $6
1583   0C86 FD 39         mov c, b
1584   0C88 A5            ashr a, cl
1585   0C89 27            mov b, a
1586   0C8A E4            pop a
1587   0C8B             ; END SHIFT
1588   0C8B 56            add b, a
1589   0C8C E4            pop a
1590   0C8D             ; END TERMS
1591   0C8D E7            pop d
1592   0C8E FD 3E         mov [d], bl
1593   0C90             ;; for (k = 0; k < i + 1; k++) { 
1594   0C90             _for23_init:
1595   0C90 FA FB FF      lea d, [bp + -5] ; $k
1596   0C93 DA            push d
1597   0C94 26 00 00      mov b, $0
1598   0C97 E7            pop d
1599   0C98 FD 43         mov [d], b
1600   0C9A             _for23_cond:
1601   0C9A FA FB FF      lea d, [bp + -5] ; $k
1602   0C9D 2A            mov b, [d]
1603   0C9E             ; START RELATIONAL
1604   0C9E D7            push a
1605   0C9F 11            mov a, b
1606   0CA0 FA FF FF      lea d, [bp + -1] ; $i
1607   0CA3 2A            mov b, [d]
1608   0CA4             ; START TERMS
1609   0CA4 D7            push a
1610   0CA5 11            mov a, b
1611   0CA6 26 01 00      mov b, $1
1612   0CA9 56            add b, a
1613   0CAA E4            pop a
1614   0CAB             ; END TERMS
1615   0CAB B0            cmp a, b
1616   0CAC FD 73         slt ; <= (signed)
1617   0CAE E4            pop a
1618   0CAF             ; END RELATIONAL
1619   0CAF C0 00 00      cmp b, 0
1620   0CB2 C6 02 0D      je _for23_exit
1621   0CB5             _for23_block:
1622   0CB5             ;; output[j++] = base64_table[output_buffer[k]]; 
1623   0CB5 FA 07 00      lea d, [bp + 7] ; $output
1624   0CB8 FD 2A         mov d, [d]
1625   0CBA D7            push a
1626   0CBB DA            push d
1627   0CBC FA FD FF      lea d, [bp + -3] ; $j
1628   0CBF 2A            mov b, [d]
1629   0CC0 D8            push b
1630   0CC1 FD 77         inc b
1631   0CC3 FA FD FF      lea d, [bp + -3] ; $j
1632   0CC6 FD 43         mov [d], b
1633   0CC8 E5            pop b
1634   0CC9 E7            pop d
1635   0CCA FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1636   0CCE E4            pop a
1637   0CCF DA            push d
1638   0CD0 3B BA 22      mov d, _base64_table ; $base64_table
1639   0CD3 FD 2A         mov d, [d]
1640   0CD5 D7            push a
1641   0CD6 DA            push d
1642   0CD7 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1643   0CDA D7            push a
1644   0CDB DA            push d
1645   0CDC FA FB FF      lea d, [bp + -5] ; $k
1646   0CDF 2A            mov b, [d]
1647   0CE0 E7            pop d
1648   0CE1 5A            add d, b
1649   0CE2 E4            pop a
1650   0CE3 32            mov bl, [d]
1651   0CE4 A7 00         mov bh, 0
1652   0CE6 E7            pop d
1653   0CE7 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1654   0CEB E4            pop a
1655   0CEC 32            mov bl, [d]
1656   0CED A7 00         mov bh, 0
1657   0CEF E7            pop d
1658   0CF0 FD 3E         mov [d], bl
1659   0CF2             _for23_update:
1660   0CF2 FA FB FF      lea d, [bp + -5] ; $k
1661   0CF5 2A            mov b, [d]
1662   0CF6 D8            push b
1663   0CF7 FD 77         inc b
1664   0CF9 FA FB FF      lea d, [bp + -5] ; $k
1665   0CFC FD 43         mov [d], b
1666   0CFE E5            pop b
1667   0CFF 0A 9A 0C      jmp _for23_cond
1668   0D02             _for23_exit:
1669   0D02             ;; while (i++ < 3) { 
1670   0D02             _while24_cond:
1671   0D02 FA FF FF      lea d, [bp + -1] ; $i
1672   0D05 2A            mov b, [d]
1673   0D06 D8            push b
1674   0D07 FD 77         inc b
1675   0D09 FA FF FF      lea d, [bp + -1] ; $i
1676   0D0C FD 43         mov [d], b
1677   0D0E E5            pop b
1678   0D0F             ; START RELATIONAL
1679   0D0F D7            push a
1680   0D10 11            mov a, b
1681   0D11 26 03 00      mov b, $3
1682   0D14 B0            cmp a, b
1683   0D15 FD 73         slt ; <= (signed)
1684   0D17 E4            pop a
1685   0D18             ; END RELATIONAL
1686   0D18 C0 00 00      cmp b, 0
1687   0D1B C6 42 0D      je _while24_exit
1688   0D1E             _while24_block:
1689   0D1E             ;; output[j++] = '='; 
1690   0D1E FA 07 00      lea d, [bp + 7] ; $output
1691   0D21 FD 2A         mov d, [d]
1692   0D23 D7            push a
1693   0D24 DA            push d
1694   0D25 FA FD FF      lea d, [bp + -3] ; $j
1695   0D28 2A            mov b, [d]
1696   0D29 D8            push b
1697   0D2A FD 77         inc b
1698   0D2C FA FD FF      lea d, [bp + -3] ; $j
1699   0D2F FD 43         mov [d], b
1700   0D31 E5            pop b
1701   0D32 E7            pop d
1702   0D33 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1703   0D37 E4            pop a
1704   0D38 DA            push d
1705   0D39 26 3D 00      mov b, $3d
1706   0D3C E7            pop d
1707   0D3D FD 3E         mov [d], bl
1708   0D3F 0A 02 0D      jmp _while24_cond
1709   0D42             _while24_exit:
1710   0D42 0A 45 0D      jmp _if21_exit
1711   0D45             _if21_exit:
1712   0D45             ;; output[j] = '\0'; 
1713   0D45 FA 07 00      lea d, [bp + 7] ; $output
1714   0D48 FD 2A         mov d, [d]
1715   0D4A D7            push a
1716   0D4B DA            push d
1717   0D4C FA FD FF      lea d, [bp + -3] ; $j
1718   0D4F 2A            mov b, [d]
1719   0D50 E7            pop d
1720   0D51 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1721   0D55 E4            pop a
1722   0D56 DA            push d
1723   0D57 26 00 00      mov b, $0
1724   0D5A E7            pop d
1725   0D5B FD 3E         mov [d], bl
1726   0D5D F9            leave
1727   0D5E 09            ret
1728   0D5F             
1729   0D5F             base64_char_value:
1730   0D5F F8 00 00      enter 0 ; (push bp; mov bp, sp)
1731   0D62             ;; if (c >= 'A' && c <= 'Z') return c - 'A'; 
1732   0D62             _if25_cond:
1733   0D62 FA 05 00      lea d, [bp + 5] ; $c
1734   0D65 32            mov bl, [d]
1735   0D66 A7 00         mov bh, 0
1736   0D68             ; START RELATIONAL
1737   0D68 D7            push a
1738   0D69 11            mov a, b
1739   0D6A 26 41 00      mov b, $41
1740   0D6D B0            cmp a, b
1741   0D6E FD 80         sge ; >=
1742   0D70 E4            pop a
1743   0D71             ; END RELATIONAL
1744   0D71 D7            push a
1745   0D72 11            mov a, b
1746   0D73 FA 05 00      lea d, [bp + 5] ; $c
1747   0D76 32            mov bl, [d]
1748   0D77 A7 00         mov bh, 0
1749   0D79             ; START RELATIONAL
1750   0D79 D7            push a
1751   0D7A 11            mov a, b
1752   0D7B 26 5A 00      mov b, $5a
1753   0D7E B0            cmp a, b
1754   0D7F FD 74         sle ; <=
1755   0D81 E4            pop a
1756   0D82             ; END RELATIONAL
1757   0D82 FD A7         sand a, b ; &&
1758   0D84 E4            pop a
1759   0D85 C0 00 00      cmp b, 0
1760   0D88 C6 9E 0D      je _if25_exit
1761   0D8B             _if25_true:
1762   0D8B             ;; return c - 'A'; 
1763   0D8B FA 05 00      lea d, [bp + 5] ; $c
1764   0D8E 32            mov bl, [d]
1765   0D8F A7 00         mov bh, 0
1766   0D91             ; START TERMS
1767   0D91 D7            push a
1768   0D92 11            mov a, b
1769   0D93 26 41 00      mov b, $41
1770   0D96 60            sub a, b
1771   0D97 27            mov b, a
1772   0D98 E4            pop a
1773   0D99             ; END TERMS
1774   0D99 F9            leave
1775   0D9A 09            ret
1776   0D9B 0A 9E 0D      jmp _if25_exit
1777   0D9E             _if25_exit:
1778   0D9E             ;; if (c >= 'a' && c <= 'z') return c - 'a' + 26; 
1779   0D9E             _if26_cond:
1780   0D9E FA 05 00      lea d, [bp + 5] ; $c
1781   0DA1 32            mov bl, [d]
1782   0DA2 A7 00         mov bh, 0
1783   0DA4             ; START RELATIONAL
1784   0DA4 D7            push a
1785   0DA5 11            mov a, b
1786   0DA6 26 61 00      mov b, $61
1787   0DA9 B0            cmp a, b
1788   0DAA FD 80         sge ; >=
1789   0DAC E4            pop a
1790   0DAD             ; END RELATIONAL
1791   0DAD D7            push a
1792   0DAE 11            mov a, b
1793   0DAF FA 05 00      lea d, [bp + 5] ; $c
1794   0DB2 32            mov bl, [d]
1795   0DB3 A7 00         mov bh, 0
1796   0DB5             ; START RELATIONAL
1797   0DB5 D7            push a
1798   0DB6 11            mov a, b
1799   0DB7 26 7A 00      mov b, $7a
1800   0DBA B0            cmp a, b
1801   0DBB FD 74         sle ; <=
1802   0DBD E4            pop a
1803   0DBE             ; END RELATIONAL
1804   0DBE FD A7         sand a, b ; &&
1805   0DC0 E4            pop a
1806   0DC1 C0 00 00      cmp b, 0
1807   0DC4 C6 DF 0D      je _if26_exit
1808   0DC7             _if26_true:
1809   0DC7             ;; return c - 'a' + 26; 
1810   0DC7 FA 05 00      lea d, [bp + 5] ; $c
1811   0DCA 32            mov bl, [d]
1812   0DCB A7 00         mov bh, 0
1813   0DCD             ; START TERMS
1814   0DCD D7            push a
1815   0DCE 11            mov a, b
1816   0DCF 26 61 00      mov b, $61
1817   0DD2 60            sub a, b
1818   0DD3 27            mov b, a
1819   0DD4 11            mov a, b
1820   0DD5 26 1A 00      mov b, $1a
1821   0DD8 56            add b, a
1822   0DD9 E4            pop a
1823   0DDA             ; END TERMS
1824   0DDA F9            leave
1825   0DDB 09            ret
1826   0DDC 0A DF 0D      jmp _if26_exit
1827   0DDF             _if26_exit:
1828   0DDF             ;; if (c >= '0' && c <= '9') return c - '0' + 52; 
1829   0DDF             _if27_cond:
1830   0DDF FA 05 00      lea d, [bp + 5] ; $c
1831   0DE2 32            mov bl, [d]
1832   0DE3 A7 00         mov bh, 0
1833   0DE5             ; START RELATIONAL
1834   0DE5 D7            push a
1835   0DE6 11            mov a, b
1836   0DE7 26 30 00      mov b, $30
1837   0DEA B0            cmp a, b
1838   0DEB FD 80         sge ; >=
1839   0DED E4            pop a
1840   0DEE             ; END RELATIONAL
1841   0DEE D7            push a
1842   0DEF 11            mov a, b
1843   0DF0 FA 05 00      lea d, [bp + 5] ; $c
1844   0DF3 32            mov bl, [d]
1845   0DF4 A7 00         mov bh, 0
1846   0DF6             ; START RELATIONAL
1847   0DF6 D7            push a
1848   0DF7 11            mov a, b
1849   0DF8 26 39 00      mov b, $39
1850   0DFB B0            cmp a, b
1851   0DFC FD 74         sle ; <=
1852   0DFE E4            pop a
1853   0DFF             ; END RELATIONAL
1854   0DFF FD A7         sand a, b ; &&
1855   0E01 E4            pop a
1856   0E02 C0 00 00      cmp b, 0
1857   0E05 C6 20 0E      je _if27_exit
1858   0E08             _if27_true:
1859   0E08             ;; return c - '0' + 52; 
1860   0E08 FA 05 00      lea d, [bp + 5] ; $c
1861   0E0B 32            mov bl, [d]
1862   0E0C A7 00         mov bh, 0
1863   0E0E             ; START TERMS
1864   0E0E D7            push a
1865   0E0F 11            mov a, b
1866   0E10 26 30 00      mov b, $30
1867   0E13 60            sub a, b
1868   0E14 27            mov b, a
1869   0E15 11            mov a, b
1870   0E16 26 34 00      mov b, $34
1871   0E19 56            add b, a
1872   0E1A E4            pop a
1873   0E1B             ; END TERMS
1874   0E1B F9            leave
1875   0E1C 09            ret
1876   0E1D 0A 20 0E      jmp _if27_exit
1877   0E20             _if27_exit:
1878   0E20             ;; if (c == '+') return 62; 
1879   0E20             _if28_cond:
1880   0E20 FA 05 00      lea d, [bp + 5] ; $c
1881   0E23 32            mov bl, [d]
1882   0E24 A7 00         mov bh, 0
1883   0E26             ; START RELATIONAL
1884   0E26 D7            push a
1885   0E27 11            mov a, b
1886   0E28 26 2B 00      mov b, $2b
1887   0E2B B0            cmp a, b
1888   0E2C FD 71         seq ; ==
1889   0E2E E4            pop a
1890   0E2F             ; END RELATIONAL
1891   0E2F C0 00 00      cmp b, 0
1892   0E32 C6 3D 0E      je _if28_exit
1893   0E35             _if28_true:
1894   0E35             ;; return 62; 
1895   0E35 26 3E 00      mov b, $3e
1896   0E38 F9            leave
1897   0E39 09            ret
1898   0E3A 0A 3D 0E      jmp _if28_exit
1899   0E3D             _if28_exit:
1900   0E3D             ;; if (c == '/') return 63; 
1901   0E3D             _if29_cond:
1902   0E3D FA 05 00      lea d, [bp + 5] ; $c
1903   0E40 32            mov bl, [d]
1904   0E41 A7 00         mov bh, 0
1905   0E43             ; START RELATIONAL
1906   0E43 D7            push a
1907   0E44 11            mov a, b
1908   0E45 26 2F 00      mov b, $2f
1909   0E48 B0            cmp a, b
1910   0E49 FD 71         seq ; ==
1911   0E4B E4            pop a
1912   0E4C             ; END RELATIONAL
1913   0E4C C0 00 00      cmp b, 0
1914   0E4F C6 5A 0E      je _if29_exit
1915   0E52             _if29_true:
1916   0E52             ;; return 63; 
1917   0E52 26 3F 00      mov b, $3f
1918   0E55 F9            leave
1919   0E56 09            ret
1920   0E57 0A 5A 0E      jmp _if29_exit
1921   0E5A             _if29_exit:
1922   0E5A             ;; return -1; 
1923   0E5A 26 FF FF      mov b, $ffff
1924   0E5D F9            leave
1925   0E5E 09            ret
1926   0E5F             
1927   0E5F             base64_decode:
1928   0E5F F8 00 00      enter 0 ; (push bp; mov bp, sp)
1929   0E62             ; $i 
1930   0E62 10 00 00      mov a, $0
1931   0E65 45 FF FF      mov [bp + -1], a
1932   0E68             ; $j 
1933   0E68 10 00 00      mov a, $0
1934   0E6B 45 FD FF      mov [bp + -3], a
1935   0E6E             ; $k 
1936   0E6E 10 00 00      mov a, $0
1937   0E71 45 FB FF      mov [bp + -5], a
1938   0E74             ; $input_len 
1939   0E74             ; $input_buffer 
1940   0E74             ; $output_buffer 
1941   0E74 52 0F 00      sub sp, 15
1942   0E77             ;; input_len = strlen(input); 
1943   0E77 FA F9 FF      lea d, [bp + -7] ; $input_len
1944   0E7A DA            push d
1945   0E7B FA 05 00      lea d, [bp + 5] ; $input
1946   0E7E 2A            mov b, [d]
1947   0E7F FD AB         swp b
1948   0E81 D8            push b
1949   0E82 07 BE 07      call strlen
1950   0E85 51 02 00      add sp, 2
1951   0E88 E7            pop d
1952   0E89 FD 43         mov [d], b
1953   0E8B             ;; while (input_len-- && (input[k] != '=') && base64_char_value(input[k]) != -1) { 
1954   0E8B             _while30_cond:
1955   0E8B FA F9 FF      lea d, [bp + -7] ; $input_len
1956   0E8E 2A            mov b, [d]
1957   0E8F D8            push b
1958   0E90 FD 7D         dec b
1959   0E92 FA F9 FF      lea d, [bp + -7] ; $input_len
1960   0E95 FD 43         mov [d], b
1961   0E97 E5            pop b
1962   0E98 D7            push a
1963   0E99 11            mov a, b
1964   0E9A FA 05 00      lea d, [bp + 5] ; $input
1965   0E9D FD 2A         mov d, [d]
1966   0E9F D7            push a
1967   0EA0 DA            push d
1968   0EA1 FA FB FF      lea d, [bp + -5] ; $k
1969   0EA4 2A            mov b, [d]
1970   0EA5 E7            pop d
1971   0EA6 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1972   0EAA E4            pop a
1973   0EAB 32            mov bl, [d]
1974   0EAC A7 00         mov bh, 0
1975   0EAE             ; START RELATIONAL
1976   0EAE D7            push a
1977   0EAF 11            mov a, b
1978   0EB0 26 3D 00      mov b, $3d
1979   0EB3 B0            cmp a, b
1980   0EB4 FD 72         sneq ; !=
1981   0EB6 E4            pop a
1982   0EB7             ; END RELATIONAL
1983   0EB7 FD A7         sand a, b ; &&
1984   0EB9 11            mov a, b
1985   0EBA FA 05 00      lea d, [bp + 5] ; $input
1986   0EBD FD 2A         mov d, [d]
1987   0EBF D7            push a
1988   0EC0 DA            push d
1989   0EC1 FA FB FF      lea d, [bp + -5] ; $k
1990   0EC4 2A            mov b, [d]
1991   0EC5 E7            pop d
1992   0EC6 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1993   0ECA E4            pop a
1994   0ECB 32            mov bl, [d]
1995   0ECC A7 00         mov bh, 0
1996   0ECE DD            push bl
1997   0ECF 07 5F 0D      call base64_char_value
1998   0ED2 51 01 00      add sp, 1
1999   0ED5             ; START RELATIONAL
2000   0ED5 D7            push a
2001   0ED6 11            mov a, b
2002   0ED7 26 FF FF      mov b, $ffff
2003   0EDA B0            cmp a, b
2004   0EDB FD 72         sneq ; !=
2005   0EDD E4            pop a
2006   0EDE             ; END RELATIONAL
2007   0EDE FD A7         sand a, b ; &&
2008   0EE0 E4            pop a
2009   0EE1 C0 00 00      cmp b, 0
2010   0EE4 C6 CC 10      je _while30_exit
2011   0EE7             _while30_block:
2012   0EE7             ;; input_buffer[i++] = input[k++]; 
2013   0EE7 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2014   0EEA D7            push a
2015   0EEB DA            push d
2016   0EEC FA FF FF      lea d, [bp + -1] ; $i
2017   0EEF 2A            mov b, [d]
2018   0EF0 D8            push b
2019   0EF1 FD 77         inc b
2020   0EF3 FA FF FF      lea d, [bp + -1] ; $i
2021   0EF6 FD 43         mov [d], b
2022   0EF8 E5            pop b
2023   0EF9 E7            pop d
2024   0EFA 5A            add d, b
2025   0EFB E4            pop a
2026   0EFC DA            push d
2027   0EFD FA 05 00      lea d, [bp + 5] ; $input
2028   0F00 FD 2A         mov d, [d]
2029   0F02 D7            push a
2030   0F03 DA            push d
2031   0F04 FA FB FF      lea d, [bp + -5] ; $k
2032   0F07 2A            mov b, [d]
2033   0F08 D8            push b
2034   0F09 FD 77         inc b
2035   0F0B FA FB FF      lea d, [bp + -5] ; $k
2036   0F0E FD 43         mov [d], b
2037   0F10 E5            pop b
2038   0F11 E7            pop d
2039   0F12 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2040   0F16 E4            pop a
2041   0F17 32            mov bl, [d]
2042   0F18 A7 00         mov bh, 0
2043   0F1A E7            pop d
2044   0F1B FD 3E         mov [d], bl
2045   0F1D             ;; if (i == 4) { 
2046   0F1D             _if31_cond:
2047   0F1D FA FF FF      lea d, [bp + -1] ; $i
2048   0F20 2A            mov b, [d]
2049   0F21             ; START RELATIONAL
2050   0F21 D7            push a
2051   0F22 11            mov a, b
2052   0F23 26 04 00      mov b, $4
2053   0F26 B0            cmp a, b
2054   0F27 FD 71         seq ; ==
2055   0F29 E4            pop a
2056   0F2A             ; END RELATIONAL
2057   0F2A C0 00 00      cmp b, 0
2058   0F2D C6 C9 10      je _if31_exit
2059   0F30             _if31_true:
2060   0F30             ;; for (i = 0; i < 4; i++) { 
2061   0F30             _for32_init:
2062   0F30 FA FF FF      lea d, [bp + -1] ; $i
2063   0F33 DA            push d
2064   0F34 26 00 00      mov b, $0
2065   0F37 E7            pop d
2066   0F38 FD 43         mov [d], b
2067   0F3A             _for32_cond:
2068   0F3A FA FF FF      lea d, [bp + -1] ; $i
2069   0F3D 2A            mov b, [d]
2070   0F3E             ; START RELATIONAL
2071   0F3E D7            push a
2072   0F3F 11            mov a, b
2073   0F40 26 04 00      mov b, $4
2074   0F43 B0            cmp a, b
2075   0F44 FD 73         slt ; <= (signed)
2076   0F46 E4            pop a
2077   0F47             ; END RELATIONAL
2078   0F47 C0 00 00      cmp b, 0
2079   0F4A C6 83 0F      je _for32_exit
2080   0F4D             _for32_block:
2081   0F4D             ;; input_buffer[i] = base64_char_value(input_buffer[i]); 
2082   0F4D FA F5 FF      lea d, [bp + -11] ; $input_buffer
2083   0F50 D7            push a
2084   0F51 DA            push d
2085   0F52 FA FF FF      lea d, [bp + -1] ; $i
2086   0F55 2A            mov b, [d]
2087   0F56 E7            pop d
2088   0F57 5A            add d, b
2089   0F58 E4            pop a
2090   0F59 DA            push d
2091   0F5A FA F5 FF      lea d, [bp + -11] ; $input_buffer
2092   0F5D D7            push a
2093   0F5E DA            push d
2094   0F5F FA FF FF      lea d, [bp + -1] ; $i
2095   0F62 2A            mov b, [d]
2096   0F63 E7            pop d
2097   0F64 5A            add d, b
2098   0F65 E4            pop a
2099   0F66 32            mov bl, [d]
2100   0F67 A7 00         mov bh, 0
2101   0F69 DD            push bl
2102   0F6A 07 5F 0D      call base64_char_value
2103   0F6D 51 01 00      add sp, 1
2104   0F70 E7            pop d
2105   0F71 FD 3E         mov [d], bl
2106   0F73             _for32_update:
2107   0F73 FA FF FF      lea d, [bp + -1] ; $i
2108   0F76 2A            mov b, [d]
2109   0F77 D8            push b
2110   0F78 FD 77         inc b
2111   0F7A FA FF FF      lea d, [bp + -1] ; $i
2112   0F7D FD 43         mov [d], b
2113   0F7F E5            pop b
2114   0F80 0A 3A 0F      jmp _for32_cond
2115   0F83             _for32_exit:
2116   0F83             ;; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
2117   0F83 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2118   0F86 D7            push a
2119   0F87 DA            push d
2120   0F88 26 00 00      mov b, $0
2121   0F8B E7            pop d
2122   0F8C 5A            add d, b
2123   0F8D E4            pop a
2124   0F8E DA            push d
2125   0F8F FA F5 FF      lea d, [bp + -11] ; $input_buffer
2126   0F92 D7            push a
2127   0F93 DA            push d
2128   0F94 26 00 00      mov b, $0
2129   0F97 E7            pop d
2130   0F98 5A            add d, b
2131   0F99 E4            pop a
2132   0F9A 32            mov bl, [d]
2133   0F9B A7 00         mov bh, 0
2134   0F9D             ; START SHIFT
2135   0F9D D7            push a
2136   0F9E 11            mov a, b
2137   0F9F 26 02 00      mov b, $2
2138   0FA2 FD 39         mov c, b
2139   0FA4 9D            shl a, cl
2140   0FA5 27            mov b, a
2141   0FA6 E4            pop a
2142   0FA7             ; END SHIFT
2143   0FA7             ; START TERMS
2144   0FA7 D7            push a
2145   0FA8 11            mov a, b
2146   0FA9 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2147   0FAC D7            push a
2148   0FAD DA            push d
2149   0FAE 26 01 00      mov b, $1
2150   0FB1 E7            pop d
2151   0FB2 5A            add d, b
2152   0FB3 E4            pop a
2153   0FB4 32            mov bl, [d]
2154   0FB5 A7 00         mov bh, 0
2155   0FB7 D7            push a
2156   0FB8 11            mov a, b
2157   0FB9 26 30 00      mov b, $30
2158   0FBC 86            and a, b ; &
2159   0FBD 27            mov b, a
2160   0FBE E4            pop a
2161   0FBF             ; START SHIFT
2162   0FBF D7            push a
2163   0FC0 11            mov a, b
2164   0FC1 26 04 00      mov b, $4
2165   0FC4 FD 39         mov c, b
2166   0FC6 A5            ashr a, cl
2167   0FC7 27            mov b, a
2168   0FC8 E4            pop a
2169   0FC9             ; END SHIFT
2170   0FC9 56            add b, a
2171   0FCA E4            pop a
2172   0FCB             ; END TERMS
2173   0FCB E7            pop d
2174   0FCC FD 3E         mov [d], bl
2175   0FCE             ;; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
2176   0FCE FA F2 FF      lea d, [bp + -14] ; $output_buffer
2177   0FD1 D7            push a
2178   0FD2 DA            push d
2179   0FD3 26 01 00      mov b, $1
2180   0FD6 E7            pop d
2181   0FD7 5A            add d, b
2182   0FD8 E4            pop a
2183   0FD9 DA            push d
2184   0FDA FA F5 FF      lea d, [bp + -11] ; $input_buffer
2185   0FDD D7            push a
2186   0FDE DA            push d
2187   0FDF 26 01 00      mov b, $1
2188   0FE2 E7            pop d
2189   0FE3 5A            add d, b
2190   0FE4 E4            pop a
2191   0FE5 32            mov bl, [d]
2192   0FE6 A7 00         mov bh, 0
2193   0FE8 D7            push a
2194   0FE9 11            mov a, b
2195   0FEA 26 0F 00      mov b, $f
2196   0FED 86            and a, b ; &
2197   0FEE 27            mov b, a
2198   0FEF E4            pop a
2199   0FF0             ; START SHIFT
2200   0FF0 D7            push a
2201   0FF1 11            mov a, b
2202   0FF2 26 04 00      mov b, $4
2203   0FF5 FD 39         mov c, b
2204   0FF7 9D            shl a, cl
2205   0FF8 27            mov b, a
2206   0FF9 E4            pop a
2207   0FFA             ; END SHIFT
2208   0FFA             ; START TERMS
2209   0FFA D7            push a
2210   0FFB 11            mov a, b
2211   0FFC FA F5 FF      lea d, [bp + -11] ; $input_buffer
2212   0FFF D7            push a
2213   1000 DA            push d
2214   1001 26 02 00      mov b, $2
2215   1004 E7            pop d
2216   1005 5A            add d, b
2217   1006 E4            pop a
2218   1007 32            mov bl, [d]
2219   1008 A7 00         mov bh, 0
2220   100A D7            push a
2221   100B 11            mov a, b
2222   100C 26 3C 00      mov b, $3c
2223   100F 86            and a, b ; &
2224   1010 27            mov b, a
2225   1011 E4            pop a
2226   1012             ; START SHIFT
2227   1012 D7            push a
2228   1013 11            mov a, b
2229   1014 26 02 00      mov b, $2
2230   1017 FD 39         mov c, b
2231   1019 A5            ashr a, cl
2232   101A 27            mov b, a
2233   101B E4            pop a
2234   101C             ; END SHIFT
2235   101C 56            add b, a
2236   101D E4            pop a
2237   101E             ; END TERMS
2238   101E E7            pop d
2239   101F FD 3E         mov [d], bl
2240   1021             ;; output_buffer[2] = ((input_buffer[2] & 0x03) << 6) + input_buffer[3]; 
2241   1021 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2242   1024 D7            push a
2243   1025 DA            push d
2244   1026 26 02 00      mov b, $2
2245   1029 E7            pop d
2246   102A 5A            add d, b
2247   102B E4            pop a
2248   102C DA            push d
2249   102D FA F5 FF      lea d, [bp + -11] ; $input_buffer
2250   1030 D7            push a
2251   1031 DA            push d
2252   1032 26 02 00      mov b, $2
2253   1035 E7            pop d
2254   1036 5A            add d, b
2255   1037 E4            pop a
2256   1038 32            mov bl, [d]
2257   1039 A7 00         mov bh, 0
2258   103B D7            push a
2259   103C 11            mov a, b
2260   103D 26 03 00      mov b, $3
2261   1040 86            and a, b ; &
2262   1041 27            mov b, a
2263   1042 E4            pop a
2264   1043             ; START SHIFT
2265   1043 D7            push a
2266   1044 11            mov a, b
2267   1045 26 06 00      mov b, $6
2268   1048 FD 39         mov c, b
2269   104A 9D            shl a, cl
2270   104B 27            mov b, a
2271   104C E4            pop a
2272   104D             ; END SHIFT
2273   104D             ; START TERMS
2274   104D D7            push a
2275   104E 11            mov a, b
2276   104F FA F5 FF      lea d, [bp + -11] ; $input_buffer
2277   1052 D7            push a
2278   1053 DA            push d
2279   1054 26 03 00      mov b, $3
2280   1057 E7            pop d
2281   1058 5A            add d, b
2282   1059 E4            pop a
2283   105A 32            mov bl, [d]
2284   105B A7 00         mov bh, 0
2285   105D 56            add b, a
2286   105E E4            pop a
2287   105F             ; END TERMS
2288   105F E7            pop d
2289   1060 FD 3E         mov [d], bl
2290   1062             ;; for (i = 0; i < 3; i++) { 
2291   1062             _for33_init:
2292   1062 FA FF FF      lea d, [bp + -1] ; $i
2293   1065 DA            push d
2294   1066 26 00 00      mov b, $0
2295   1069 E7            pop d
2296   106A FD 43         mov [d], b
2297   106C             _for33_cond:
2298   106C FA FF FF      lea d, [bp + -1] ; $i
2299   106F 2A            mov b, [d]
2300   1070             ; START RELATIONAL
2301   1070 D7            push a
2302   1071 11            mov a, b
2303   1072 26 03 00      mov b, $3
2304   1075 B0            cmp a, b
2305   1076 FD 73         slt ; <= (signed)
2306   1078 E4            pop a
2307   1079             ; END RELATIONAL
2308   1079 C0 00 00      cmp b, 0
2309   107C C6 BC 10      je _for33_exit
2310   107F             _for33_block:
2311   107F             ;; output[j++] = output_buffer[i]; 
2312   107F FA 07 00      lea d, [bp + 7] ; $output
2313   1082 FD 2A         mov d, [d]
2314   1084 D7            push a
2315   1085 DA            push d
2316   1086 FA FD FF      lea d, [bp + -3] ; $j
2317   1089 2A            mov b, [d]
2318   108A D8            push b
2319   108B FD 77         inc b
2320   108D FA FD FF      lea d, [bp + -3] ; $j
2321   1090 FD 43         mov [d], b
2322   1092 E5            pop b
2323   1093 E7            pop d
2324   1094 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2325   1098 E4            pop a
2326   1099 DA            push d
2327   109A FA F2 FF      lea d, [bp + -14] ; $output_buffer
2328   109D D7            push a
2329   109E DA            push d
2330   109F FA FF FF      lea d, [bp + -1] ; $i
2331   10A2 2A            mov b, [d]
2332   10A3 E7            pop d
2333   10A4 5A            add d, b
2334   10A5 E4            pop a
2335   10A6 32            mov bl, [d]
2336   10A7 A7 00         mov bh, 0
2337   10A9 E7            pop d
2338   10AA FD 3E         mov [d], bl
2339   10AC             _for33_update:
2340   10AC FA FF FF      lea d, [bp + -1] ; $i
2341   10AF 2A            mov b, [d]
2342   10B0 D8            push b
2343   10B1 FD 77         inc b
2344   10B3 FA FF FF      lea d, [bp + -1] ; $i
2345   10B6 FD 43         mov [d], b
2346   10B8 E5            pop b
2347   10B9 0A 6C 10      jmp _for33_cond
2348   10BC             _for33_exit:
2349   10BC             ;; i = 0; 
2350   10BC FA FF FF      lea d, [bp + -1] ; $i
2351   10BF DA            push d
2352   10C0 26 00 00      mov b, $0
2353   10C3 E7            pop d
2354   10C4 FD 43         mov [d], b
2355   10C6 0A C9 10      jmp _if31_exit
2356   10C9             _if31_exit:
2357   10C9 0A 8B 0E      jmp _while30_cond
2358   10CC             _while30_exit:
2359   10CC             ;; if (i) { 
2360   10CC             _if34_cond:
2361   10CC FA FF FF      lea d, [bp + -1] ; $i
2362   10CF 2A            mov b, [d]
2363   10D0 C0 00 00      cmp b, 0
2364   10D3 C6 6E 12      je _if34_exit
2365   10D6             _if34_true:
2366   10D6             ;; for (k = i; k < 4; k++) { 
2367   10D6             _for35_init:
2368   10D6 FA FB FF      lea d, [bp + -5] ; $k
2369   10D9 DA            push d
2370   10DA FA FF FF      lea d, [bp + -1] ; $i
2371   10DD 2A            mov b, [d]
2372   10DE E7            pop d
2373   10DF FD 43         mov [d], b
2374   10E1             _for35_cond:
2375   10E1 FA FB FF      lea d, [bp + -5] ; $k
2376   10E4 2A            mov b, [d]
2377   10E5             ; START RELATIONAL
2378   10E5 D7            push a
2379   10E6 11            mov a, b
2380   10E7 26 04 00      mov b, $4
2381   10EA B0            cmp a, b
2382   10EB FD 73         slt ; <= (signed)
2383   10ED E4            pop a
2384   10EE             ; END RELATIONAL
2385   10EE C0 00 00      cmp b, 0
2386   10F1 C6 17 11      je _for35_exit
2387   10F4             _for35_block:
2388   10F4             ;; input_buffer[k] = 0; 
2389   10F4 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2390   10F7 D7            push a
2391   10F8 DA            push d
2392   10F9 FA FB FF      lea d, [bp + -5] ; $k
2393   10FC 2A            mov b, [d]
2394   10FD E7            pop d
2395   10FE 5A            add d, b
2396   10FF E4            pop a
2397   1100 DA            push d
2398   1101 26 00 00      mov b, $0
2399   1104 E7            pop d
2400   1105 FD 3E         mov [d], bl
2401   1107             _for35_update:
2402   1107 FA FB FF      lea d, [bp + -5] ; $k
2403   110A 2A            mov b, [d]
2404   110B D8            push b
2405   110C FD 77         inc b
2406   110E FA FB FF      lea d, [bp + -5] ; $k
2407   1111 FD 43         mov [d], b
2408   1113 E5            pop b
2409   1114 0A E1 10      jmp _for35_cond
2410   1117             _for35_exit:
2411   1117             ;; for (k = 0; k < 4; k++) { 
2412   1117             _for36_init:
2413   1117 FA FB FF      lea d, [bp + -5] ; $k
2414   111A DA            push d
2415   111B 26 00 00      mov b, $0
2416   111E E7            pop d
2417   111F FD 43         mov [d], b
2418   1121             _for36_cond:
2419   1121 FA FB FF      lea d, [bp + -5] ; $k
2420   1124 2A            mov b, [d]
2421   1125             ; START RELATIONAL
2422   1125 D7            push a
2423   1126 11            mov a, b
2424   1127 26 04 00      mov b, $4
2425   112A B0            cmp a, b
2426   112B FD 73         slt ; <= (signed)
2427   112D E4            pop a
2428   112E             ; END RELATIONAL
2429   112E C0 00 00      cmp b, 0
2430   1131 C6 6A 11      je _for36_exit
2431   1134             _for36_block:
2432   1134             ;; input_buffer[k] = base64_char_value(input_buffer[k]); 
2433   1134 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2434   1137 D7            push a
2435   1138 DA            push d
2436   1139 FA FB FF      lea d, [bp + -5] ; $k
2437   113C 2A            mov b, [d]
2438   113D E7            pop d
2439   113E 5A            add d, b
2440   113F E4            pop a
2441   1140 DA            push d
2442   1141 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2443   1144 D7            push a
2444   1145 DA            push d
2445   1146 FA FB FF      lea d, [bp + -5] ; $k
2446   1149 2A            mov b, [d]
2447   114A E7            pop d
2448   114B 5A            add d, b
2449   114C E4            pop a
2450   114D 32            mov bl, [d]
2451   114E A7 00         mov bh, 0
2452   1150 DD            push bl
2453   1151 07 5F 0D      call base64_char_value
2454   1154 51 01 00      add sp, 1
2455   1157 E7            pop d
2456   1158 FD 3E         mov [d], bl
2457   115A             _for36_update:
2458   115A FA FB FF      lea d, [bp + -5] ; $k
2459   115D 2A            mov b, [d]
2460   115E D8            push b
2461   115F FD 77         inc b
2462   1161 FA FB FF      lea d, [bp + -5] ; $k
2463   1164 FD 43         mov [d], b
2464   1166 E5            pop b
2465   1167 0A 21 11      jmp _for36_cond
2466   116A             _for36_exit:
2467   116A             ;; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
2468   116A FA F2 FF      lea d, [bp + -14] ; $output_buffer
2469   116D D7            push a
2470   116E DA            push d
2471   116F 26 00 00      mov b, $0
2472   1172 E7            pop d
2473   1173 5A            add d, b
2474   1174 E4            pop a
2475   1175 DA            push d
2476   1176 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2477   1179 D7            push a
2478   117A DA            push d
2479   117B 26 00 00      mov b, $0
2480   117E E7            pop d
2481   117F 5A            add d, b
2482   1180 E4            pop a
2483   1181 32            mov bl, [d]
2484   1182 A7 00         mov bh, 0
2485   1184             ; START SHIFT
2486   1184 D7            push a
2487   1185 11            mov a, b
2488   1186 26 02 00      mov b, $2
2489   1189 FD 39         mov c, b
2490   118B 9D            shl a, cl
2491   118C 27            mov b, a
2492   118D E4            pop a
2493   118E             ; END SHIFT
2494   118E             ; START TERMS
2495   118E D7            push a
2496   118F 11            mov a, b
2497   1190 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2498   1193 D7            push a
2499   1194 DA            push d
2500   1195 26 01 00      mov b, $1
2501   1198 E7            pop d
2502   1199 5A            add d, b
2503   119A E4            pop a
2504   119B 32            mov bl, [d]
2505   119C A7 00         mov bh, 0
2506   119E D7            push a
2507   119F 11            mov a, b
2508   11A0 26 30 00      mov b, $30
2509   11A3 86            and a, b ; &
2510   11A4 27            mov b, a
2511   11A5 E4            pop a
2512   11A6             ; START SHIFT
2513   11A6 D7            push a
2514   11A7 11            mov a, b
2515   11A8 26 04 00      mov b, $4
2516   11AB FD 39         mov c, b
2517   11AD A5            ashr a, cl
2518   11AE 27            mov b, a
2519   11AF E4            pop a
2520   11B0             ; END SHIFT
2521   11B0 56            add b, a
2522   11B1 E4            pop a
2523   11B2             ; END TERMS
2524   11B2 E7            pop d
2525   11B3 FD 3E         mov [d], bl
2526   11B5             ;; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
2527   11B5 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2528   11B8 D7            push a
2529   11B9 DA            push d
2530   11BA 26 01 00      mov b, $1
2531   11BD E7            pop d
2532   11BE 5A            add d, b
2533   11BF E4            pop a
2534   11C0 DA            push d
2535   11C1 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2536   11C4 D7            push a
2537   11C5 DA            push d
2538   11C6 26 01 00      mov b, $1
2539   11C9 E7            pop d
2540   11CA 5A            add d, b
2541   11CB E4            pop a
2542   11CC 32            mov bl, [d]
2543   11CD A7 00         mov bh, 0
2544   11CF D7            push a
2545   11D0 11            mov a, b
2546   11D1 26 0F 00      mov b, $f
2547   11D4 86            and a, b ; &
2548   11D5 27            mov b, a
2549   11D6 E4            pop a
2550   11D7             ; START SHIFT
2551   11D7 D7            push a
2552   11D8 11            mov a, b
2553   11D9 26 04 00      mov b, $4
2554   11DC FD 39         mov c, b
2555   11DE 9D            shl a, cl
2556   11DF 27            mov b, a
2557   11E0 E4            pop a
2558   11E1             ; END SHIFT
2559   11E1             ; START TERMS
2560   11E1 D7            push a
2561   11E2 11            mov a, b
2562   11E3 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2563   11E6 D7            push a
2564   11E7 DA            push d
2565   11E8 26 02 00      mov b, $2
2566   11EB E7            pop d
2567   11EC 5A            add d, b
2568   11ED E4            pop a
2569   11EE 32            mov bl, [d]
2570   11EF A7 00         mov bh, 0
2571   11F1 D7            push a
2572   11F2 11            mov a, b
2573   11F3 26 3C 00      mov b, $3c
2574   11F6 86            and a, b ; &
2575   11F7 27            mov b, a
2576   11F8 E4            pop a
2577   11F9             ; START SHIFT
2578   11F9 D7            push a
2579   11FA 11            mov a, b
2580   11FB 26 02 00      mov b, $2
2581   11FE FD 39         mov c, b
2582   1200 A5            ashr a, cl
2583   1201 27            mov b, a
2584   1202 E4            pop a
2585   1203             ; END SHIFT
2586   1203 56            add b, a
2587   1204 E4            pop a
2588   1205             ; END TERMS
2589   1205 E7            pop d
2590   1206 FD 3E         mov [d], bl
2591   1208             ;; for (k = 0; k < i - 1; k++) { 
2592   1208             _for37_init:
2593   1208 FA FB FF      lea d, [bp + -5] ; $k
2594   120B DA            push d
2595   120C 26 00 00      mov b, $0
2596   120F E7            pop d
2597   1210 FD 43         mov [d], b
2598   1212             _for37_cond:
2599   1212 FA FB FF      lea d, [bp + -5] ; $k
2600   1215 2A            mov b, [d]
2601   1216             ; START RELATIONAL
2602   1216 D7            push a
2603   1217 11            mov a, b
2604   1218 FA FF FF      lea d, [bp + -1] ; $i
2605   121B 2A            mov b, [d]
2606   121C             ; START TERMS
2607   121C D7            push a
2608   121D 11            mov a, b
2609   121E 26 01 00      mov b, $1
2610   1221 60            sub a, b
2611   1222 27            mov b, a
2612   1223 E4            pop a
2613   1224             ; END TERMS
2614   1224 B0            cmp a, b
2615   1225 FD 73         slt ; <= (signed)
2616   1227 E4            pop a
2617   1228             ; END RELATIONAL
2618   1228 C0 00 00      cmp b, 0
2619   122B C6 6B 12      je _for37_exit
2620   122E             _for37_block:
2621   122E             ;; output[j++] = output_buffer[k]; 
2622   122E FA 07 00      lea d, [bp + 7] ; $output
2623   1231 FD 2A         mov d, [d]
2624   1233 D7            push a
2625   1234 DA            push d
2626   1235 FA FD FF      lea d, [bp + -3] ; $j
2627   1238 2A            mov b, [d]
2628   1239 D8            push b
2629   123A FD 77         inc b
2630   123C FA FD FF      lea d, [bp + -3] ; $j
2631   123F FD 43         mov [d], b
2632   1241 E5            pop b
2633   1242 E7            pop d
2634   1243 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2635   1247 E4            pop a
2636   1248 DA            push d
2637   1249 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2638   124C D7            push a
2639   124D DA            push d
2640   124E FA FB FF      lea d, [bp + -5] ; $k
2641   1251 2A            mov b, [d]
2642   1252 E7            pop d
2643   1253 5A            add d, b
2644   1254 E4            pop a
2645   1255 32            mov bl, [d]
2646   1256 A7 00         mov bh, 0
2647   1258 E7            pop d
2648   1259 FD 3E         mov [d], bl
2649   125B             _for37_update:
2650   125B FA FB FF      lea d, [bp + -5] ; $k
2651   125E 2A            mov b, [d]
2652   125F D8            push b
2653   1260 FD 77         inc b
2654   1262 FA FB FF      lea d, [bp + -5] ; $k
2655   1265 FD 43         mov [d], b
2656   1267 E5            pop b
2657   1268 0A 12 12      jmp _for37_cond
2658   126B             _for37_exit:
2659   126B 0A 6E 12      jmp _if34_exit
2660   126E             _if34_exit:
2661   126E             ;; output[j] = '\0'; 
2662   126E FA 07 00      lea d, [bp + 7] ; $output
2663   1271 FD 2A         mov d, [d]
2664   1273 D7            push a
2665   1274 DA            push d
2666   1275 FA FD FF      lea d, [bp + -3] ; $j
2667   1278 2A            mov b, [d]
2668   1279 E7            pop d
2669   127A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2670   127E E4            pop a
2671   127F DA            push d
2672   1280 26 00 00      mov b, $0
2673   1283 E7            pop d
2674   1284 FD 3E         mov [d], bl
2675   1286 F9            leave
2676   1287 09            ret
2677   1288             
2678   1288             va_start:
2679   1288 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2680   128B             ;; argp->current_arg = first_fixed_param + sizeof(first_fixed_param); 
2681   128B FA 05 00      lea d, [bp + 5] ; $argp
2682   128E FD 2A         mov d, [d]
2683   1290 58 00 00      add d, 0
2684   1293 DA            push d
2685   1294 FA 07 00      lea d, [bp + 7] ; $first_fixed_param
2686   1297 2A            mov b, [d]
2687   1298             ; START TERMS
2688   1298 D7            push a
2689   1299 11            mov a, b
2690   129A 26 02 00      mov b, 2
2691   129D 56            add b, a
2692   129E E4            pop a
2693   129F             ; END TERMS
2694   129F E7            pop d
2695   12A0 FD 43         mov [d], b
2696   12A2 F9            leave
2697   12A3 09            ret
2698   12A4             
2699   12A4             va_arg:
2700   12A4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2701   12A7             ; $p 
2702   12A7 52 02 00      sub sp, 2
2703   12AA             ;; p = argp->current_arg; 
2704   12AA FA FF FF      lea d, [bp + -1] ; $p
2705   12AD DA            push d
2706   12AE FA 05 00      lea d, [bp + 5] ; $argp
2707   12B1 FD 2A         mov d, [d]
2708   12B3 58 00 00      add d, 0
2709   12B6 2A            mov b, [d]
2710   12B7 E7            pop d
2711   12B8 FD 43         mov [d], b
2712   12BA             ;; argp->current_arg = argp->current_arg + size; 
2713   12BA FA 05 00      lea d, [bp + 5] ; $argp
2714   12BD FD 2A         mov d, [d]
2715   12BF 58 00 00      add d, 0
2716   12C2 DA            push d
2717   12C3 FA 05 00      lea d, [bp + 5] ; $argp
2718   12C6 FD 2A         mov d, [d]
2719   12C8 58 00 00      add d, 0
2720   12CB 2A            mov b, [d]
2721   12CC             ; START TERMS
2722   12CC D7            push a
2723   12CD 11            mov a, b
2724   12CE FA 07 00      lea d, [bp + 7] ; $size
2725   12D1 2A            mov b, [d]
2726   12D2 56            add b, a
2727   12D3 E4            pop a
2728   12D4             ; END TERMS
2729   12D4 E7            pop d
2730   12D5 FD 43         mov [d], b
2731   12D7             ;; return p; 
2732   12D7 FA FF FF      lea d, [bp + -1] ; $p
2733   12DA 2A            mov b, [d]
2734   12DB F9            leave
2735   12DC 09            ret
2736   12DD             
2737   12DD             va_end:
2738   12DD F8 00 00      enter 0 ; (push bp; mov bp, sp)
2739   12E0             ;; argp->current_arg =   0   ; 
2740   12E0 FA 05 00      lea d, [bp + 5] ; $argp
2741   12E3 FD 2A         mov d, [d]
2742   12E5 58 00 00      add d, 0
2743   12E8 DA            push d
2744   12E9 26 00 00      mov b, $0
2745   12EC E7            pop d
2746   12ED FD 43         mov [d], b
2747   12EF F9            leave
2748   12F0 09            ret
2749   12F1             
2750   12F1             printf:
2751   12F1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2752   12F4             ; $p 
2753   12F4             ; $fp 
2754   12F4             ; $i 
2755   12F4 52 06 00      sub sp, 6
2756   12F7             ;; fp = format; 
2757   12F7 FA FD FF      lea d, [bp + -3] ; $fp
2758   12FA DA            push d
2759   12FB FA 05 00      lea d, [bp + 5] ; $format
2760   12FE 2A            mov b, [d]
2761   12FF E7            pop d
2762   1300 FD 43         mov [d], b
2763   1302             ;; p = &format + 2; 
2764   1302 FA FF FF      lea d, [bp + -1] ; $p
2765   1305 DA            push d
2766   1306 FA 05 00      lea d, [bp + 5] ; $format
2767   1309 2D            mov b, d
2768   130A             ; START TERMS
2769   130A D7            push a
2770   130B 11            mov a, b
2771   130C 26 02 00      mov b, $2
2772   130F 56            add b, a
2773   1310 E4            pop a
2774   1311             ; END TERMS
2775   1311 E7            pop d
2776   1312 FD 43         mov [d], b
2777   1314             ;; for(;;){ 
2778   1314             _for38_init:
2779   1314             _for38_cond:
2780   1314             _for38_block:
2781   1314             ;; if(!*fp) break; 
2782   1314             _if39_cond:
2783   1314 FA FD FF      lea d, [bp + -3] ; $fp
2784   1317 2A            mov b, [d]
2785   1318 74            mov d, b
2786   1319 32            mov bl, [d]
2787   131A A7 00         mov bh, 0
2788   131C C0 00 00      cmp b, 0
2789   131F FD 71         seq ; !
2790   1321 C0 00 00      cmp b, 0
2791   1324 C6 2D 13      je _if39_else
2792   1327             _if39_true:
2793   1327             ;; break; 
2794   1327 0A 36 15      jmp _for38_exit ; for break
2795   132A 0A 33 15      jmp _if39_exit
2796   132D             _if39_else:
2797   132D             ;; if(*fp == '%'){ 
2798   132D             _if40_cond:
2799   132D FA FD FF      lea d, [bp + -3] ; $fp
2800   1330 2A            mov b, [d]
2801   1331 74            mov d, b
2802   1332 32            mov bl, [d]
2803   1333 A7 00         mov bh, 0
2804   1335             ; START RELATIONAL
2805   1335 D7            push a
2806   1336 11            mov a, b
2807   1337 26 25 00      mov b, $25
2808   133A B0            cmp a, b
2809   133B FD 71         seq ; ==
2810   133D E4            pop a
2811   133E             ; END RELATIONAL
2812   133E C0 00 00      cmp b, 0
2813   1341 C6 17 15      je _if40_else
2814   1344             _if40_true:
2815   1344             ;; fp++; 
2816   1344 FA FD FF      lea d, [bp + -3] ; $fp
2817   1347 2A            mov b, [d]
2818   1348 D8            push b
2819   1349 FD 77         inc b
2820   134B FA FD FF      lea d, [bp + -3] ; $fp
2821   134E FD 43         mov [d], b
2822   1350 E5            pop b
2823   1351             ;; switch(*fp){ 
2824   1351             _switch41_expr:
2825   1351 FA FD FF      lea d, [bp + -3] ; $fp
2826   1354 2A            mov b, [d]
2827   1355 74            mov d, b
2828   1356 32            mov bl, [d]
2829   1357 A7 00         mov bh, 0
2830   1359             _switch41_comparisons:
2831   1359 C1 6C         cmp bl, $6c
2832   135B C6 87 13      je _switch41_case0
2833   135E C1 4C         cmp bl, $4c
2834   1360 C6 87 13      je _switch41_case1
2835   1363 C1 64         cmp bl, $64
2836   1365 C6 57 14      je _switch41_case2
2837   1368 C1 69         cmp bl, $69
2838   136A C6 57 14      je _switch41_case3
2839   136D C1 75         cmp bl, $75
2840   136F C6 7B 14      je _switch41_case4
2841   1372 C1 78         cmp bl, $78
2842   1374 C6 9F 14      je _switch41_case5
2843   1377 C1 63         cmp bl, $63
2844   1379 C6 BD 14      je _switch41_case6
2845   137C C1 73         cmp bl, $73
2846   137E C6 DC 14      je _switch41_case7
2847   1381 0A FB 14      jmp _switch41_default
2848   1384 0A 07 15      jmp _switch41_exit
2849   1387             _switch41_case0:
2850   1387             _switch41_case1:
2851   1387             ;; fp++; 
2852   1387 FA FD FF      lea d, [bp + -3] ; $fp
2853   138A 2A            mov b, [d]
2854   138B D8            push b
2855   138C FD 77         inc b
2856   138E FA FD FF      lea d, [bp + -3] ; $fp
2857   1391 FD 43         mov [d], b
2858   1393 E5            pop b
2859   1394             ;; if(*fp == 'd' || *fp == 'i') 
2860   1394             _if42_cond:
2861   1394 FA FD FF      lea d, [bp + -3] ; $fp
2862   1397 2A            mov b, [d]
2863   1398 74            mov d, b
2864   1399 32            mov bl, [d]
2865   139A A7 00         mov bh, 0
2866   139C             ; START RELATIONAL
2867   139C D7            push a
2868   139D 11            mov a, b
2869   139E 26 64 00      mov b, $64
2870   13A1 B0            cmp a, b
2871   13A2 FD 71         seq ; ==
2872   13A4 E4            pop a
2873   13A5             ; END RELATIONAL
2874   13A5 D7            push a
2875   13A6 11            mov a, b
2876   13A7 FA FD FF      lea d, [bp + -3] ; $fp
2877   13AA 2A            mov b, [d]
2878   13AB 74            mov d, b
2879   13AC 32            mov bl, [d]
2880   13AD A7 00         mov bh, 0
2881   13AF             ; START RELATIONAL
2882   13AF D7            push a
2883   13B0 11            mov a, b
2884   13B1 26 69 00      mov b, $69
2885   13B4 B0            cmp a, b
2886   13B5 FD 71         seq ; ==
2887   13B7 E4            pop a
2888   13B8             ; END RELATIONAL
2889   13B8 FD A8         sor a, b ; ||
2890   13BA E4            pop a
2891   13BB C0 00 00      cmp b, 0
2892   13BE C6 D5 13      je _if42_else
2893   13C1             _if42_true:
2894   13C1             ;; print_signed_long(*(long *)p); 
2895   13C1 FD 79         mov g, b
2896   13C3 28            mov b, c
2897   13C4 FD AB         swp b
2898   13C6 D8            push b
2899   13C7 FD 27         mov b, g
2900   13C9 FD AB         swp b
2901   13CB D8            push b
2902   13CC 07 C4 17      call print_signed_long
2903   13CF 51 04 00      add sp, 4
2904   13D2 0A 42 14      jmp _if42_exit
2905   13D5             _if42_else:
2906   13D5             ;; if(*fp == 'u') 
2907   13D5             _if43_cond:
2908   13D5 FA FD FF      lea d, [bp + -3] ; $fp
2909   13D8 2A            mov b, [d]
2910   13D9 74            mov d, b
2911   13DA 32            mov bl, [d]
2912   13DB A7 00         mov bh, 0
2913   13DD             ; START RELATIONAL
2914   13DD D7            push a
2915   13DE 11            mov a, b
2916   13DF 26 75 00      mov b, $75
2917   13E2 B0            cmp a, b
2918   13E3 FD 71         seq ; ==
2919   13E5 E4            pop a
2920   13E6             ; END RELATIONAL
2921   13E6 C0 00 00      cmp b, 0
2922   13E9 C6 00 14      je _if43_else
2923   13EC             _if43_true:
2924   13EC             ;; print_unsigned_long(*(unsigned long *)p); 
2925   13EC FD 79         mov g, b
2926   13EE 28            mov b, c
2927   13EF FD AB         swp b
2928   13F1 D8            push b
2929   13F2 FD 27         mov b, g
2930   13F4 FD AB         swp b
2931   13F6 D8            push b
2932   13F7 07 16 19      call print_unsigned_long
2933   13FA 51 04 00      add sp, 4
2934   13FD 0A 42 14      jmp _if43_exit
2935   1400             _if43_else:
2936   1400             ;; if(*fp == 'x') 
2937   1400             _if44_cond:
2938   1400 FA FD FF      lea d, [bp + -3] ; $fp
2939   1403 2A            mov b, [d]
2940   1404 74            mov d, b
2941   1405 32            mov bl, [d]
2942   1406 A7 00         mov bh, 0
2943   1408             ; START RELATIONAL
2944   1408 D7            push a
2945   1409 11            mov a, b
2946   140A 26 78 00      mov b, $78
2947   140D B0            cmp a, b
2948   140E FD 71         seq ; ==
2949   1410 E4            pop a
2950   1411             ; END RELATIONAL
2951   1411 C0 00 00      cmp b, 0
2952   1414 C6 36 14      je _if44_else
2953   1417             _if44_true:
2954   1417             ;; printx32(*(long int *)p); 
2955   1417 FA FF FF      lea d, [bp + -1] ; $p
2956   141A 2A            mov b, [d]
2957   141B 74            mov d, b
2958   141C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2959   141F FD 39         mov c, b ; And place it into C
2960   1421 2A            mov b, [d] ; Lower Word in B
2961   1422 FD 79         mov g, b
2962   1424 28            mov b, c
2963   1425 FD AB         swp b
2964   1427 D8            push b
2965   1428 FD 27         mov b, g
2966   142A FD AB         swp b
2967   142C D8            push b
2968   142D 07 4D 15      call printx32
2969   1430 51 04 00      add sp, 4
2970   1433 0A 42 14      jmp _if44_exit
2971   1436             _if44_else:
2972   1436             ;; err("Unexpected format in printf."); 
2973   1436 26 41 2C      mov b, __s1 ; "Unexpected format in printf."
2974   1439 FD AB         swp b
2975   143B D8            push b
2976   143C 07 38 15      call err
2977   143F 51 02 00      add sp, 2
2978   1442             _if44_exit:
2979   1442             _if43_exit:
2980   1442             _if42_exit:
2981   1442             ;; p = p + 4; 
2982   1442 FA FF FF      lea d, [bp + -1] ; $p
2983   1445 DA            push d
2984   1446 FA FF FF      lea d, [bp + -1] ; $p
2985   1449 2A            mov b, [d]
2986   144A             ; START TERMS
2987   144A D7            push a
2988   144B 11            mov a, b
2989   144C 26 04 00      mov b, $4
2990   144F 56            add b, a
2991   1450 E4            pop a
2992   1451             ; END TERMS
2993   1451 E7            pop d
2994   1452 FD 43         mov [d], b
2995   1454             ;; break; 
2996   1454 0A 07 15      jmp _switch41_exit ; case break
2997   1457             _switch41_case2:
2998   1457             _switch41_case3:
2999   1457             ;; print_signed(*(int*)p); 
3000   1457 FA FF FF      lea d, [bp + -1] ; $p
3001   145A 2A            mov b, [d]
3002   145B 74            mov d, b
3003   145C 2A            mov b, [d]
3004   145D FD AB         swp b
3005   145F D8            push b
3006   1460 07 D4 16      call print_signed
3007   1463 51 02 00      add sp, 2
3008   1466             ;; p = p + 2; 
3009   1466 FA FF FF      lea d, [bp + -1] ; $p
3010   1469 DA            push d
3011   146A FA FF FF      lea d, [bp + -1] ; $p
3012   146D 2A            mov b, [d]
3013   146E             ; START TERMS
3014   146E D7            push a
3015   146F 11            mov a, b
3016   1470 26 02 00      mov b, $2
3017   1473 56            add b, a
3018   1474 E4            pop a
3019   1475             ; END TERMS
3020   1475 E7            pop d
3021   1476 FD 43         mov [d], b
3022   1478             ;; break; 
3023   1478 0A 07 15      jmp _switch41_exit ; case break
3024   147B             _switch41_case4:
3025   147B             ;; print_unsigned(*(unsigned int*)p); 
3026   147B FA FF FF      lea d, [bp + -1] ; $p
3027   147E 2A            mov b, [d]
3028   147F 74            mov d, b
3029   1480 2A            mov b, [d]
3030   1481 FD AB         swp b
3031   1483 D8            push b
3032   1484 07 13 1A      call print_unsigned
3033   1487 51 02 00      add sp, 2
3034   148A             ;; p = p + 2; 
3035   148A FA FF FF      lea d, [bp + -1] ; $p
3036   148D DA            push d
3037   148E FA FF FF      lea d, [bp + -1] ; $p
3038   1491 2A            mov b, [d]
3039   1492             ; START TERMS
3040   1492 D7            push a
3041   1493 11            mov a, b
3042   1494 26 02 00      mov b, $2
3043   1497 56            add b, a
3044   1498 E4            pop a
3045   1499             ; END TERMS
3046   1499 E7            pop d
3047   149A FD 43         mov [d], b
3048   149C             ;; break; 
3049   149C 0A 07 15      jmp _switch41_exit ; case break
3050   149F             _switch41_case5:
3051   149F             
3052   149F             ; --- BEGIN INLINE ASM BLOCK
3053   149F FA FF FF      lea d, [bp + -1] ; $p
3054   14A2 FD 2A         mov d, [d]
3055   14A4 2A            mov b, [d]
3056   14A5 07 66 1E      call print_u16x
3057   14A8             ; --- END INLINE ASM BLOCK
3058   14A8             
3059   14A8             ;; p = p + 2; 
3060   14A8 FA FF FF      lea d, [bp + -1] ; $p
3061   14AB DA            push d
3062   14AC FA FF FF      lea d, [bp + -1] ; $p
3063   14AF 2A            mov b, [d]
3064   14B0             ; START TERMS
3065   14B0 D7            push a
3066   14B1 11            mov a, b
3067   14B2 26 02 00      mov b, $2
3068   14B5 56            add b, a
3069   14B6 E4            pop a
3070   14B7             ; END TERMS
3071   14B7 E7            pop d
3072   14B8 FD 43         mov [d], b
3073   14BA             ;; break; 
3074   14BA 0A 07 15      jmp _switch41_exit ; case break
3075   14BD             _switch41_case6:
3076   14BD             
3077   14BD             ; --- BEGIN INLINE ASM BLOCK
3078   14BD FA FF FF      lea d, [bp + -1] ; $p
3079   14C0 FD 2A         mov d, [d]
3080   14C2 1E            mov al, [d]
3081   14C3 23            mov ah, al
3082   14C4 07 C4 1C      call _putchar
3083   14C7             ; --- END INLINE ASM BLOCK
3084   14C7             
3085   14C7             ;; p = p + 2; 
3086   14C7 FA FF FF      lea d, [bp + -1] ; $p
3087   14CA DA            push d
3088   14CB FA FF FF      lea d, [bp + -1] ; $p
3089   14CE 2A            mov b, [d]
3090   14CF             ; START TERMS
3091   14CF D7            push a
3092   14D0 11            mov a, b
3093   14D1 26 02 00      mov b, $2
3094   14D4 56            add b, a
3095   14D5 E4            pop a
3096   14D6             ; END TERMS
3097   14D6 E7            pop d
3098   14D7 FD 43         mov [d], b
3099   14D9             ;; break; 
3100   14D9 0A 07 15      jmp _switch41_exit ; case break
3101   14DC             _switch41_case7:
3102   14DC             
3103   14DC             ; --- BEGIN INLINE ASM BLOCK
3104   14DC FA FF FF      lea d, [bp + -1] ; $p
3105   14DF FD 2A         mov d, [d]
3106   14E1 FD 2A         mov d, [d]
3107   14E3 07 0E 1E      call _puts
3108   14E6             ; --- END INLINE ASM BLOCK
3109   14E6             
3110   14E6             ;; p = p + 2; 
3111   14E6 FA FF FF      lea d, [bp + -1] ; $p
3112   14E9 DA            push d
3113   14EA FA FF FF      lea d, [bp + -1] ; $p
3114   14ED 2A            mov b, [d]
3115   14EE             ; START TERMS
3116   14EE D7            push a
3117   14EF 11            mov a, b
3118   14F0 26 02 00      mov b, $2
3119   14F3 56            add b, a
3120   14F4 E4            pop a
3121   14F5             ; END TERMS
3122   14F5 E7            pop d
3123   14F6 FD 43         mov [d], b
3124   14F8             ;; break; 
3125   14F8 0A 07 15      jmp _switch41_exit ; case break
3126   14FB             _switch41_default:
3127   14FB             ;; print("Error: Unknown argument type.\n"); 
3128   14FB 26 5E 2C      mov b, __s2 ; "Error: Unknown argument type.\n"
3129   14FE FD AB         swp b
3130   1500 D8            push b
3131   1501 07 2B 1B      call print
3132   1504 51 02 00      add sp, 2
3133   1507             _switch41_exit:
3134   1507             ;; fp++; 
3135   1507 FA FD FF      lea d, [bp + -3] ; $fp
3136   150A 2A            mov b, [d]
3137   150B D8            push b
3138   150C FD 77         inc b
3139   150E FA FD FF      lea d, [bp + -3] ; $fp
3140   1511 FD 43         mov [d], b
3141   1513 E5            pop b
3142   1514 0A 33 15      jmp _if40_exit
3143   1517             _if40_else:
3144   1517             ;; putchar(*fp); 
3145   1517 FA FD FF      lea d, [bp + -3] ; $fp
3146   151A 2A            mov b, [d]
3147   151B 74            mov d, b
3148   151C 32            mov bl, [d]
3149   151D A7 00         mov bh, 0
3150   151F DD            push bl
3151   1520 07 E3 1A      call putchar
3152   1523 51 01 00      add sp, 1
3153   1526             ;; fp++; 
3154   1526 FA FD FF      lea d, [bp + -3] ; $fp
3155   1529 2A            mov b, [d]
3156   152A D8            push b
3157   152B FD 77         inc b
3158   152D FA FD FF      lea d, [bp + -3] ; $fp
3159   1530 FD 43         mov [d], b
3160   1532 E5            pop b
3161   1533             _if40_exit:
3162   1533             _if39_exit:
3163   1533             _for38_update:
3164   1533 0A 14 13      jmp _for38_cond
3165   1536             _for38_exit:
3166   1536 F9            leave
3167   1537 09            ret
3168   1538             
3169   1538             err:
3170   1538 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3171   153B             ;; print(e); 
3172   153B FA 05 00      lea d, [bp + 5] ; $e
3173   153E 2A            mov b, [d]
3174   153F FD AB         swp b
3175   1541 D8            push b
3176   1542 07 2B 1B      call print
3177   1545 51 02 00      add sp, 2
3178   1548             ;; exit(); 
3179   1548 07 07 08      call exit
3180   154B F9            leave
3181   154C 09            ret
3182   154D             
3183   154D             printx32:
3184   154D F8 00 00      enter 0 ; (push bp; mov bp, sp)
3185   1550             
3186   1550             ; --- BEGIN INLINE ASM BLOCK
3187   1550 FA 05 00      lea d, [bp + 5] ; $hex
3188   1553 2B 02 00      mov b, [d+2]
3189   1556 07 66 1E      call print_u16x
3190   1559 2A            mov b, [d]
3191   155A 07 66 1E      call print_u16x
3192   155D             ; --- END INLINE ASM BLOCK
3193   155D             
3194   155D F9            leave
3195   155E 09            ret
3196   155F             
3197   155F             printx16:
3198   155F F8 00 00      enter 0 ; (push bp; mov bp, sp)
3199   1562             
3200   1562             ; --- BEGIN INLINE ASM BLOCK
3201   1562 FA 05 00      lea d, [bp + 5] ; $hex
3202   1565 2A            mov b, [d]
3203   1566 07 66 1E      call print_u16x
3204   1569             ; --- END INLINE ASM BLOCK
3205   1569             
3206   1569 F9            leave
3207   156A 09            ret
3208   156B             
3209   156B             printx8:
3210   156B F8 00 00      enter 0 ; (push bp; mov bp, sp)
3211   156E             
3212   156E             ; --- BEGIN INLINE ASM BLOCK
3213   156E FA 05 00      lea d, [bp + 5] ; $hex
3214   1571 32            mov bl, [d]
3215   1572 07 AA 1E      call print_u8x
3216   1575             ; --- END INLINE ASM BLOCK
3217   1575             
3218   1575 F9            leave
3219   1576 09            ret
3220   1577             
3221   1577             hex_to_int:
3222   1577 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3223   157A             ; $value 
3224   157A 10 00 00      mov a, $0
3225   157D 45 FF FF      mov [bp + -1], a
3226   1580             ; $i 
3227   1580             ; $hex_char 
3228   1580             ; $len 
3229   1580 52 07 00      sub sp, 7
3230   1583             ;; len = strlen(hex_string); 
3231   1583 FA FA FF      lea d, [bp + -6] ; $len
3232   1586 DA            push d
3233   1587 FA 05 00      lea d, [bp + 5] ; $hex_string
3234   158A 2A            mov b, [d]
3235   158B FD AB         swp b
3236   158D D8            push b
3237   158E 07 BE 07      call strlen
3238   1591 51 02 00      add sp, 2
3239   1594 E7            pop d
3240   1595 FD 43         mov [d], b
3241   1597             ;; for (i = 0; i < len; i++) { 
3242   1597             _for45_init:
3243   1597 FA FD FF      lea d, [bp + -3] ; $i
3244   159A DA            push d
3245   159B 26 00 00      mov b, $0
3246   159E E7            pop d
3247   159F FD 43         mov [d], b
3248   15A1             _for45_cond:
3249   15A1 FA FD FF      lea d, [bp + -3] ; $i
3250   15A4 2A            mov b, [d]
3251   15A5             ; START RELATIONAL
3252   15A5 D7            push a
3253   15A6 11            mov a, b
3254   15A7 FA FA FF      lea d, [bp + -6] ; $len
3255   15AA 2A            mov b, [d]
3256   15AB B0            cmp a, b
3257   15AC FD 73         slt ; <= (signed)
3258   15AE E4            pop a
3259   15AF             ; END RELATIONAL
3260   15AF C0 00 00      cmp b, 0
3261   15B2 C6 B4 16      je _for45_exit
3262   15B5             _for45_block:
3263   15B5             ;; hex_char = hex_string[i]; 
3264   15B5 FA FC FF      lea d, [bp + -4] ; $hex_char
3265   15B8 DA            push d
3266   15B9 FA 05 00      lea d, [bp + 5] ; $hex_string
3267   15BC FD 2A         mov d, [d]
3268   15BE D7            push a
3269   15BF DA            push d
3270   15C0 FA FD FF      lea d, [bp + -3] ; $i
3271   15C3 2A            mov b, [d]
3272   15C4 E7            pop d
3273   15C5 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3274   15C9 E4            pop a
3275   15CA 32            mov bl, [d]
3276   15CB A7 00         mov bh, 0
3277   15CD E7            pop d
3278   15CE FD 3E         mov [d], bl
3279   15D0             ;; if (hex_char >= 'a' && hex_char <= 'f')  
3280   15D0             _if46_cond:
3281   15D0 FA FC FF      lea d, [bp + -4] ; $hex_char
3282   15D3 32            mov bl, [d]
3283   15D4 A7 00         mov bh, 0
3284   15D6             ; START RELATIONAL
3285   15D6 D7            push a
3286   15D7 11            mov a, b
3287   15D8 26 61 00      mov b, $61
3288   15DB B0            cmp a, b
3289   15DC FD 80         sge ; >=
3290   15DE E4            pop a
3291   15DF             ; END RELATIONAL
3292   15DF D7            push a
3293   15E0 11            mov a, b
3294   15E1 FA FC FF      lea d, [bp + -4] ; $hex_char
3295   15E4 32            mov bl, [d]
3296   15E5 A7 00         mov bh, 0
3297   15E7             ; START RELATIONAL
3298   15E7 D7            push a
3299   15E8 11            mov a, b
3300   15E9 26 66 00      mov b, $66
3301   15EC B0            cmp a, b
3302   15ED FD 74         sle ; <=
3303   15EF E4            pop a
3304   15F0             ; END RELATIONAL
3305   15F0 FD A7         sand a, b ; &&
3306   15F2 E4            pop a
3307   15F3 C0 00 00      cmp b, 0
3308   15F6 C6 27 16      je _if46_else
3309   15F9             _if46_true:
3310   15F9             ;; value = (value * 16) + (hex_char - 'a' + 10); 
3311   15F9 FA FF FF      lea d, [bp + -1] ; $value
3312   15FC DA            push d
3313   15FD FA FF FF      lea d, [bp + -1] ; $value
3314   1600 2A            mov b, [d]
3315   1601             ; START FACTORS
3316   1601 D7            push a
3317   1602 11            mov a, b
3318   1603 26 10 00      mov b, $10
3319   1606 AC            mul a, b ; *
3320   1607 11            mov a, b
3321   1608 27            mov b, a
3322   1609 E4            pop a
3323   160A             ; END FACTORS
3324   160A             ; START TERMS
3325   160A D7            push a
3326   160B 11            mov a, b
3327   160C FA FC FF      lea d, [bp + -4] ; $hex_char
3328   160F 32            mov bl, [d]
3329   1610 A7 00         mov bh, 0
3330   1612             ; START TERMS
3331   1612 D7            push a
3332   1613 11            mov a, b
3333   1614 26 61 00      mov b, $61
3334   1617 60            sub a, b
3335   1618 27            mov b, a
3336   1619 11            mov a, b
3337   161A 26 0A 00      mov b, $a
3338   161D 56            add b, a
3339   161E E4            pop a
3340   161F             ; END TERMS
3341   161F 56            add b, a
3342   1620 E4            pop a
3343   1621             ; END TERMS
3344   1621 E7            pop d
3345   1622 FD 43         mov [d], b
3346   1624 0A A4 16      jmp _if46_exit
3347   1627             _if46_else:
3348   1627             ;; if (hex_char >= 'A' && hex_char <= 'F')  
3349   1627             _if47_cond:
3350   1627 FA FC FF      lea d, [bp + -4] ; $hex_char
3351   162A 32            mov bl, [d]
3352   162B A7 00         mov bh, 0
3353   162D             ; START RELATIONAL
3354   162D D7            push a
3355   162E 11            mov a, b
3356   162F 26 41 00      mov b, $41
3357   1632 B0            cmp a, b
3358   1633 FD 80         sge ; >=
3359   1635 E4            pop a
3360   1636             ; END RELATIONAL
3361   1636 D7            push a
3362   1637 11            mov a, b
3363   1638 FA FC FF      lea d, [bp + -4] ; $hex_char
3364   163B 32            mov bl, [d]
3365   163C A7 00         mov bh, 0
3366   163E             ; START RELATIONAL
3367   163E D7            push a
3368   163F 11            mov a, b
3369   1640 26 46 00      mov b, $46
3370   1643 B0            cmp a, b
3371   1644 FD 74         sle ; <=
3372   1646 E4            pop a
3373   1647             ; END RELATIONAL
3374   1647 FD A7         sand a, b ; &&
3375   1649 E4            pop a
3376   164A C0 00 00      cmp b, 0
3377   164D C6 7E 16      je _if47_else
3378   1650             _if47_true:
3379   1650             ;; value = (value * 16) + (hex_char - 'A' + 10); 
3380   1650 FA FF FF      lea d, [bp + -1] ; $value
3381   1653 DA            push d
3382   1654 FA FF FF      lea d, [bp + -1] ; $value
3383   1657 2A            mov b, [d]
3384   1658             ; START FACTORS
3385   1658 D7            push a
3386   1659 11            mov a, b
3387   165A 26 10 00      mov b, $10
3388   165D AC            mul a, b ; *
3389   165E 11            mov a, b
3390   165F 27            mov b, a
3391   1660 E4            pop a
3392   1661             ; END FACTORS
3393   1661             ; START TERMS
3394   1661 D7            push a
3395   1662 11            mov a, b
3396   1663 FA FC FF      lea d, [bp + -4] ; $hex_char
3397   1666 32            mov bl, [d]
3398   1667 A7 00         mov bh, 0
3399   1669             ; START TERMS
3400   1669 D7            push a
3401   166A 11            mov a, b
3402   166B 26 41 00      mov b, $41
3403   166E 60            sub a, b
3404   166F 27            mov b, a
3405   1670 11            mov a, b
3406   1671 26 0A 00      mov b, $a
3407   1674 56            add b, a
3408   1675 E4            pop a
3409   1676             ; END TERMS
3410   1676 56            add b, a
3411   1677 E4            pop a
3412   1678             ; END TERMS
3413   1678 E7            pop d
3414   1679 FD 43         mov [d], b
3415   167B 0A A4 16      jmp _if47_exit
3416   167E             _if47_else:
3417   167E             ;; value = (value * 16) + (hex_char - '0'); 
3418   167E FA FF FF      lea d, [bp + -1] ; $value
3419   1681 DA            push d
3420   1682 FA FF FF      lea d, [bp + -1] ; $value
3421   1685 2A            mov b, [d]
3422   1686             ; START FACTORS
3423   1686 D7            push a
3424   1687 11            mov a, b
3425   1688 26 10 00      mov b, $10
3426   168B AC            mul a, b ; *
3427   168C 11            mov a, b
3428   168D 27            mov b, a
3429   168E E4            pop a
3430   168F             ; END FACTORS
3431   168F             ; START TERMS
3432   168F D7            push a
3433   1690 11            mov a, b
3434   1691 FA FC FF      lea d, [bp + -4] ; $hex_char
3435   1694 32            mov bl, [d]
3436   1695 A7 00         mov bh, 0
3437   1697             ; START TERMS
3438   1697 D7            push a
3439   1698 11            mov a, b
3440   1699 26 30 00      mov b, $30
3441   169C 60            sub a, b
3442   169D 27            mov b, a
3443   169E E4            pop a
3444   169F             ; END TERMS
3445   169F 56            add b, a
3446   16A0 E4            pop a
3447   16A1             ; END TERMS
3448   16A1 E7            pop d
3449   16A2 FD 43         mov [d], b
3450   16A4             _if47_exit:
3451   16A4             _if46_exit:
3452   16A4             _for45_update:
3453   16A4 FA FD FF      lea d, [bp + -3] ; $i
3454   16A7 2A            mov b, [d]
3455   16A8 D8            push b
3456   16A9 FD 77         inc b
3457   16AB FA FD FF      lea d, [bp + -3] ; $i
3458   16AE FD 43         mov [d], b
3459   16B0 E5            pop b
3460   16B1 0A A1 15      jmp _for45_cond
3461   16B4             _for45_exit:
3462   16B4             ;; return value; 
3463   16B4 FA FF FF      lea d, [bp + -1] ; $value
3464   16B7 2A            mov b, [d]
3465   16B8 F9            leave
3466   16B9 09            ret
3467   16BA             
3468   16BA             gets:
3469   16BA F8 00 00      enter 0 ; (push bp; mov bp, sp)
3470   16BD             
3471   16BD             ; --- BEGIN INLINE ASM BLOCK
3472   16BD FA 05 00      lea d, [bp + 5] ; $s
3473   16C0 15            mov a, [d]
3474   16C1 3C            mov d, a
3475   16C2 07 CB 1C      call _gets
3476   16C5             ; --- END INLINE ASM BLOCK
3477   16C5             
3478   16C5             ;; return strlen(s); 
3479   16C5 FA 05 00      lea d, [bp + 5] ; $s
3480   16C8 2A            mov b, [d]
3481   16C9 FD AB         swp b
3482   16CB D8            push b
3483   16CC 07 BE 07      call strlen
3484   16CF 51 02 00      add sp, 2
3485   16D2 F9            leave
3486   16D3 09            ret
3487   16D4             
3488   16D4             print_signed:
3489   16D4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3490   16D7             ; $digits 
3491   16D7             ; $i 
3492   16D7 10 00 00      mov a, $0
3493   16DA 45 FA FF      mov [bp + -6], a
3494   16DD 52 07 00      sub sp, 7
3495   16E0             ;; if (num < 0) { 
3496   16E0             _if48_cond:
3497   16E0 FA 05 00      lea d, [bp + 5] ; $num
3498   16E3 2A            mov b, [d]
3499   16E4             ; START RELATIONAL
3500   16E4 D7            push a
3501   16E5 11            mov a, b
3502   16E6 26 00 00      mov b, $0
3503   16E9 B0            cmp a, b
3504   16EA FD 73         slt ; <= (signed)
3505   16EC E4            pop a
3506   16ED             ; END RELATIONAL
3507   16ED C0 00 00      cmp b, 0
3508   16F0 C6 0D 17      je _if48_else
3509   16F3             _if48_true:
3510   16F3             ;; putchar('-'); 
3511   16F3 26 2D 00      mov b, $2d
3512   16F6 DD            push bl
3513   16F7 07 E3 1A      call putchar
3514   16FA 51 01 00      add sp, 1
3515   16FD             ;; num = -num; 
3516   16FD FA 05 00      lea d, [bp + 5] ; $num
3517   1700 DA            push d
3518   1701 FA 05 00      lea d, [bp + 5] ; $num
3519   1704 2A            mov b, [d]
3520   1705 FD 97         neg b
3521   1707 E7            pop d
3522   1708 FD 43         mov [d], b
3523   170A 0A 2F 17      jmp _if48_exit
3524   170D             _if48_else:
3525   170D             ;; if (num == 0) { 
3526   170D             _if49_cond:
3527   170D FA 05 00      lea d, [bp + 5] ; $num
3528   1710 2A            mov b, [d]
3529   1711             ; START RELATIONAL
3530   1711 D7            push a
3531   1712 11            mov a, b
3532   1713 26 00 00      mov b, $0
3533   1716 B0            cmp a, b
3534   1717 FD 71         seq ; ==
3535   1719 E4            pop a
3536   171A             ; END RELATIONAL
3537   171A C0 00 00      cmp b, 0
3538   171D C6 2F 17      je _if49_exit
3539   1720             _if49_true:
3540   1720             ;; putchar('0'); 
3541   1720 26 30 00      mov b, $30
3542   1723 DD            push bl
3543   1724 07 E3 1A      call putchar
3544   1727 51 01 00      add sp, 1
3545   172A             ;; return; 
3546   172A F9            leave
3547   172B 09            ret
3548   172C 0A 2F 17      jmp _if49_exit
3549   172F             _if49_exit:
3550   172F             _if48_exit:
3551   172F             ;; while (num > 0) { 
3552   172F             _while50_cond:
3553   172F FA 05 00      lea d, [bp + 5] ; $num
3554   1732 2A            mov b, [d]
3555   1733             ; START RELATIONAL
3556   1733 D7            push a
3557   1734 11            mov a, b
3558   1735 26 00 00      mov b, $0
3559   1738 B0            cmp a, b
3560   1739 FD 7F         sgt ; >
3561   173B E4            pop a
3562   173C             ; END RELATIONAL
3563   173C C0 00 00      cmp b, 0
3564   173F C6 89 17      je _while50_exit
3565   1742             _while50_block:
3566   1742             ;; digits[i] = '0' + (num % 10); 
3567   1742 FA FC FF      lea d, [bp + -4] ; $digits
3568   1745 D7            push a
3569   1746 DA            push d
3570   1747 FA FA FF      lea d, [bp + -6] ; $i
3571   174A 2A            mov b, [d]
3572   174B E7            pop d
3573   174C 5A            add d, b
3574   174D E4            pop a
3575   174E DA            push d
3576   174F 26 30 00      mov b, $30
3577   1752             ; START TERMS
3578   1752 D7            push a
3579   1753 11            mov a, b
3580   1754 FA 05 00      lea d, [bp + 5] ; $num
3581   1757 2A            mov b, [d]
3582   1758             ; START FACTORS
3583   1758 D7            push a
3584   1759 11            mov a, b
3585   175A 26 0A 00      mov b, $a
3586   175D AE            div a, b ; 
3587   175E 11            mov a, b
3588   175F 27            mov b, a
3589   1760 E4            pop a
3590   1761             ; END FACTORS
3591   1761 56            add b, a
3592   1762 E4            pop a
3593   1763             ; END TERMS
3594   1763 E7            pop d
3595   1764 FD 3E         mov [d], bl
3596   1766             ;; num = num / 10; 
3597   1766 FA 05 00      lea d, [bp + 5] ; $num
3598   1769 DA            push d
3599   176A FA 05 00      lea d, [bp + 5] ; $num
3600   176D 2A            mov b, [d]
3601   176E             ; START FACTORS
3602   176E D7            push a
3603   176F 11            mov a, b
3604   1770 26 0A 00      mov b, $a
3605   1773 AE            div a, b
3606   1774 27            mov b, a
3607   1775 E4            pop a
3608   1776             ; END FACTORS
3609   1776 E7            pop d
3610   1777 FD 43         mov [d], b
3611   1779             ;; i++; 
3612   1779 FA FA FF      lea d, [bp + -6] ; $i
3613   177C 2A            mov b, [d]
3614   177D D8            push b
3615   177E FD 77         inc b
3616   1780 FA FA FF      lea d, [bp + -6] ; $i
3617   1783 FD 43         mov [d], b
3618   1785 E5            pop b
3619   1786 0A 2F 17      jmp _while50_cond
3620   1789             _while50_exit:
3621   1789             ;; while (i > 0) { 
3622   1789             _while51_cond:
3623   1789 FA FA FF      lea d, [bp + -6] ; $i
3624   178C 2A            mov b, [d]
3625   178D             ; START RELATIONAL
3626   178D D7            push a
3627   178E 11            mov a, b
3628   178F 26 00 00      mov b, $0
3629   1792 B0            cmp a, b
3630   1793 FD 7F         sgt ; >
3631   1795 E4            pop a
3632   1796             ; END RELATIONAL
3633   1796 C0 00 00      cmp b, 0
3634   1799 C6 C2 17      je _while51_exit
3635   179C             _while51_block:
3636   179C             ;; i--; 
3637   179C FA FA FF      lea d, [bp + -6] ; $i
3638   179F 2A            mov b, [d]
3639   17A0 D8            push b
3640   17A1 FD 7D         dec b
3641   17A3 FA FA FF      lea d, [bp + -6] ; $i
3642   17A6 FD 43         mov [d], b
3643   17A8 E5            pop b
3644   17A9             ;; putchar(digits[i]); 
3645   17A9 FA FC FF      lea d, [bp + -4] ; $digits
3646   17AC D7            push a
3647   17AD DA            push d
3648   17AE FA FA FF      lea d, [bp + -6] ; $i
3649   17B1 2A            mov b, [d]
3650   17B2 E7            pop d
3651   17B3 5A            add d, b
3652   17B4 E4            pop a
3653   17B5 32            mov bl, [d]
3654   17B6 A7 00         mov bh, 0
3655   17B8 DD            push bl
3656   17B9 07 E3 1A      call putchar
3657   17BC 51 01 00      add sp, 1
3658   17BF 0A 89 17      jmp _while51_cond
3659   17C2             _while51_exit:
3660   17C2 F9            leave
3661   17C3 09            ret
3662   17C4             
3663   17C4             print_signed_long:
3664   17C4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3665   17C7             ; $digits 
3666   17C7             ; $i 
3667   17C7 10 00 00      mov a, $0
3668   17CA 45 F5 FF      mov [bp + -11], a
3669   17CD 52 0C 00      sub sp, 12
3670   17D0             ;; if (num < 0) { 
3671   17D0             _if52_cond:
3672   17D0 FA 05 00      lea d, [bp + 5] ; $num
3673   17D3 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3674   17D6 FD 39         mov c, b ; And place it into C
3675   17D8 2A            mov b, [d] ; Lower Word in B
3676   17D9             ; START RELATIONAL
3677   17D9 D7            push a
3678   17DA FD D8         push g
3679   17DC 11            mov a, b
3680   17DD FD 7A         mov g, c
3681   17DF 26 00 00      mov b, $0
3682   17E2 4D            mov si, a
3683   17E3 11            mov a, b
3684   17E4 4F            mov di, a
3685   17E5 FD 12         mov a, g
3686   17E7 28            mov b, c
3687   17E8 B0            cmp a, b
3688   17E9 FD 75         slu ; <
3689   17EB D8            push b
3690   17EC 28            mov b, c
3691   17ED FD 71         seq ; ==
3692   17EF D8            push b
3693   17F0 50            mov a, di
3694   17F1 27            mov b, a
3695   17F2 4E            mov a, si
3696   17F3 B0            cmp a, b
3697   17F4 FD 75         slu ; <
3698   17F6 E4            pop a
3699   17F7 FD 92         and b, a
3700   17F9 E4            pop a
3701   17FA FD 70         or b, a
3702   17FC               
3703   17FC FD F1         pop g
3704   17FE E4            pop a
3705   17FF             ; END RELATIONAL
3706   17FF C0 00 00      cmp b, 0
3707   1802 C6 29 18      je _if52_else
3708   1805             _if52_true:
3709   1805             ;; putchar('-'); 
3710   1805 26 2D 00      mov b, $2d
3711   1808 DD            push bl
3712   1809 07 E3 1A      call putchar
3713   180C 51 01 00      add sp, 1
3714   180F             ;; num = -num; 
3715   180F FA 05 00      lea d, [bp + 5] ; $num
3716   1812 DA            push d
3717   1813 FA 05 00      lea d, [bp + 5] ; $num
3718   1816 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3719   1819 FD 39         mov c, b ; And place it into C
3720   181B 2A            mov b, [d] ; Lower Word in B
3721   181C FD 97         neg b
3722   181E E7            pop d
3723   181F FD 43         mov [d], b
3724   1821 28            mov b, c
3725   1822 FD 44 02 00   mov [d + 2], b
3726   1826 0A 60 18      jmp _if52_exit
3727   1829             _if52_else:
3728   1829             ;; if (num == 0) { 
3729   1829             _if53_cond:
3730   1829 FA 05 00      lea d, [bp + 5] ; $num
3731   182C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3732   182F FD 39         mov c, b ; And place it into C
3733   1831 2A            mov b, [d] ; Lower Word in B
3734   1832             ; START RELATIONAL
3735   1832 D7            push a
3736   1833 FD D8         push g
3737   1835 11            mov a, b
3738   1836 FD 7A         mov g, c
3739   1838 26 00 00      mov b, $0
3740   183B B0            cmp a, b
3741   183C FD 71         seq ; ==
3742   183E D8            push b
3743   183F 12            mov a, c
3744   1840 FD 27         mov b, g
3745   1842 B0            cmp a, b
3746   1843 FD 71         seq ; ==
3747   1845 E4            pop a
3748   1846 FD A7         sand a, b
3749   1848 FD F1         pop g
3750   184A E4            pop a
3751   184B             ; END RELATIONAL
3752   184B C0 00 00      cmp b, 0
3753   184E C6 60 18      je _if53_exit
3754   1851             _if53_true:
3755   1851             ;; putchar('0'); 
3756   1851 26 30 00      mov b, $30
3757   1854 DD            push bl
3758   1855 07 E3 1A      call putchar
3759   1858 51 01 00      add sp, 1
3760   185B             ;; return; 
3761   185B F9            leave
3762   185C 09            ret
3763   185D 0A 60 18      jmp _if53_exit
3764   1860             _if53_exit:
3765   1860             _if52_exit:
3766   1860             ;; while (num > 0) { 
3767   1860             _while54_cond:
3768   1860 FA 05 00      lea d, [bp + 5] ; $num
3769   1863 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3770   1866 FD 39         mov c, b ; And place it into C
3771   1868 2A            mov b, [d] ; Lower Word in B
3772   1869             ; START RELATIONAL
3773   1869 D7            push a
3774   186A FD D8         push g
3775   186C 11            mov a, b
3776   186D FD 7A         mov g, c
3777   186F 26 00 00      mov b, $0
3778   1872 B0            cmp a, b
3779   1873 FD 7F         sgt ; >
3780   1875 FD F1         pop g
3781   1877 E4            pop a
3782   1878             ; END RELATIONAL
3783   1878 C0 00 00      cmp b, 0
3784   187B C6 DB 18      je _while54_exit
3785   187E             _while54_block:
3786   187E             ;; digits[i] = '0' + (num % 10); 
3787   187E FA F7 FF      lea d, [bp + -9] ; $digits
3788   1881 D7            push a
3789   1882 DA            push d
3790   1883 FA F5 FF      lea d, [bp + -11] ; $i
3791   1886 2A            mov b, [d]
3792   1887 E7            pop d
3793   1888 5A            add d, b
3794   1889 E4            pop a
3795   188A DA            push d
3796   188B 26 30 00      mov b, $30
3797   188E             ; START TERMS
3798   188E D7            push a
3799   188F 11            mov a, b
3800   1890 FA 05 00      lea d, [bp + 5] ; $num
3801   1893 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3802   1896 FD 39         mov c, b ; And place it into C
3803   1898 2A            mov b, [d] ; Lower Word in B
3804   1899             ; START FACTORS
3805   1899 D7            push a
3806   189A 11            mov a, b
3807   189B 26 0A 00      mov b, $a
3808   189E AE            div a, b ; 
3809   189F 11            mov a, b
3810   18A0 27            mov b, a
3811   18A1 E4            pop a
3812   18A2             ; END FACTORS
3813   18A2 54            add a, b
3814   18A3 D7            push a
3815   18A4 FD 12         mov a, g
3816   18A6 28            mov b, c
3817   18A7 5C            adc a, b
3818   18A8 39            mov c, a
3819   18A9 E5            pop b
3820   18AA E4            pop a
3821   18AB             ; END TERMS
3822   18AB E7            pop d
3823   18AC FD 3E         mov [d], bl
3824   18AE             ;; num = num / 10; 
3825   18AE FA 05 00      lea d, [bp + 5] ; $num
3826   18B1 DA            push d
3827   18B2 FA 05 00      lea d, [bp + 5] ; $num
3828   18B5 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3829   18B8 FD 39         mov c, b ; And place it into C
3830   18BA 2A            mov b, [d] ; Lower Word in B
3831   18BB             ; START FACTORS
3832   18BB D7            push a
3833   18BC 11            mov a, b
3834   18BD 26 0A 00      mov b, $a
3835   18C0 AE            div a, b
3836   18C1 27            mov b, a
3837   18C2 E4            pop a
3838   18C3             ; END FACTORS
3839   18C3 E7            pop d
3840   18C4 FD 43         mov [d], b
3841   18C6 28            mov b, c
3842   18C7 FD 44 02 00   mov [d + 2], b
3843   18CB             ;; i++; 
3844   18CB FA F5 FF      lea d, [bp + -11] ; $i
3845   18CE 2A            mov b, [d]
3846   18CF D8            push b
3847   18D0 FD 77         inc b
3848   18D2 FA F5 FF      lea d, [bp + -11] ; $i
3849   18D5 FD 43         mov [d], b
3850   18D7 E5            pop b
3851   18D8 0A 60 18      jmp _while54_cond
3852   18DB             _while54_exit:
3853   18DB             ;; while (i > 0) { 
3854   18DB             _while55_cond:
3855   18DB FA F5 FF      lea d, [bp + -11] ; $i
3856   18DE 2A            mov b, [d]
3857   18DF             ; START RELATIONAL
3858   18DF D7            push a
3859   18E0 11            mov a, b
3860   18E1 26 00 00      mov b, $0
3861   18E4 B0            cmp a, b
3862   18E5 FD 7F         sgt ; >
3863   18E7 E4            pop a
3864   18E8             ; END RELATIONAL
3865   18E8 C0 00 00      cmp b, 0
3866   18EB C6 14 19      je _while55_exit
3867   18EE             _while55_block:
3868   18EE             ;; i--; 
3869   18EE FA F5 FF      lea d, [bp + -11] ; $i
3870   18F1 2A            mov b, [d]
3871   18F2 D8            push b
3872   18F3 FD 7D         dec b
3873   18F5 FA F5 FF      lea d, [bp + -11] ; $i
3874   18F8 FD 43         mov [d], b
3875   18FA E5            pop b
3876   18FB             ;; putchar(digits[i]); 
3877   18FB FA F7 FF      lea d, [bp + -9] ; $digits
3878   18FE D7            push a
3879   18FF DA            push d
3880   1900 FA F5 FF      lea d, [bp + -11] ; $i
3881   1903 2A            mov b, [d]
3882   1904 E7            pop d
3883   1905 5A            add d, b
3884   1906 E4            pop a
3885   1907 32            mov bl, [d]
3886   1908 A7 00         mov bh, 0
3887   190A DD            push bl
3888   190B 07 E3 1A      call putchar
3889   190E 51 01 00      add sp, 1
3890   1911 0A DB 18      jmp _while55_cond
3891   1914             _while55_exit:
3892   1914 F9            leave
3893   1915 09            ret
3894   1916             
3895   1916             print_unsigned_long:
3896   1916 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3897   1919             ; $digits 
3898   1919             ; $i 
3899   1919 52 0C 00      sub sp, 12
3900   191C             ;; i = 0; 
3901   191C FA F5 FF      lea d, [bp + -11] ; $i
3902   191F DA            push d
3903   1920 26 00 00      mov b, $0
3904   1923 E7            pop d
3905   1924 FD 43         mov [d], b
3906   1926             ;; if(num == 0){ 
3907   1926             _if56_cond:
3908   1926 FA 05 00      lea d, [bp + 5] ; $num
3909   1929 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3910   192C FD 39         mov c, b ; And place it into C
3911   192E 2A            mov b, [d] ; Lower Word in B
3912   192F             ; START RELATIONAL
3913   192F D7            push a
3914   1930 FD D8         push g
3915   1932 11            mov a, b
3916   1933 FD 7A         mov g, c
3917   1935 26 00 00      mov b, $0
3918   1938 B0            cmp a, b
3919   1939 FD 71         seq ; ==
3920   193B D8            push b
3921   193C 12            mov a, c
3922   193D FD 27         mov b, g
3923   193F B0            cmp a, b
3924   1940 FD 71         seq ; ==
3925   1942 E4            pop a
3926   1943 FD A7         sand a, b
3927   1945 FD F1         pop g
3928   1947 E4            pop a
3929   1948             ; END RELATIONAL
3930   1948 C0 00 00      cmp b, 0
3931   194B C6 5D 19      je _if56_exit
3932   194E             _if56_true:
3933   194E             ;; putchar('0'); 
3934   194E 26 30 00      mov b, $30
3935   1951 DD            push bl
3936   1952 07 E3 1A      call putchar
3937   1955 51 01 00      add sp, 1
3938   1958             ;; return; 
3939   1958 F9            leave
3940   1959 09            ret
3941   195A 0A 5D 19      jmp _if56_exit
3942   195D             _if56_exit:
3943   195D             ;; while (num > 0) { 
3944   195D             _while57_cond:
3945   195D FA 05 00      lea d, [bp + 5] ; $num
3946   1960 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3947   1963 FD 39         mov c, b ; And place it into C
3948   1965 2A            mov b, [d] ; Lower Word in B
3949   1966             ; START RELATIONAL
3950   1966 D7            push a
3951   1967 FD D8         push g
3952   1969 11            mov a, b
3953   196A FD 7A         mov g, c
3954   196C 26 00 00      mov b, $0
3955   196F B0            cmp a, b
3956   1970 FD 81         sgu ; > (unsigned)
3957   1972 FD F1         pop g
3958   1974 E4            pop a
3959   1975             ; END RELATIONAL
3960   1975 C0 00 00      cmp b, 0
3961   1978 C6 D8 19      je _while57_exit
3962   197B             _while57_block:
3963   197B             ;; digits[i] = '0' + (num % 10); 
3964   197B FA F7 FF      lea d, [bp + -9] ; $digits
3965   197E D7            push a
3966   197F DA            push d
3967   1980 FA F5 FF      lea d, [bp + -11] ; $i
3968   1983 2A            mov b, [d]
3969   1984 E7            pop d
3970   1985 5A            add d, b
3971   1986 E4            pop a
3972   1987 DA            push d
3973   1988 26 30 00      mov b, $30
3974   198B             ; START TERMS
3975   198B D7            push a
3976   198C 11            mov a, b
3977   198D FA 05 00      lea d, [bp + 5] ; $num
3978   1990 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3979   1993 FD 39         mov c, b ; And place it into C
3980   1995 2A            mov b, [d] ; Lower Word in B
3981   1996             ; START FACTORS
3982   1996 D7            push a
3983   1997 11            mov a, b
3984   1998 26 0A 00      mov b, $a
3985   199B AE            div a, b ; 
3986   199C 11            mov a, b
3987   199D 27            mov b, a
3988   199E E4            pop a
3989   199F             ; END FACTORS
3990   199F 54            add a, b
3991   19A0 D7            push a
3992   19A1 FD 12         mov a, g
3993   19A3 28            mov b, c
3994   19A4 5C            adc a, b
3995   19A5 39            mov c, a
3996   19A6 E5            pop b
3997   19A7 E4            pop a
3998   19A8             ; END TERMS
3999   19A8 E7            pop d
4000   19A9 FD 3E         mov [d], bl
4001   19AB             ;; num = num / 10; 
4002   19AB FA 05 00      lea d, [bp + 5] ; $num
4003   19AE DA            push d
4004   19AF FA 05 00      lea d, [bp + 5] ; $num
4005   19B2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4006   19B5 FD 39         mov c, b ; And place it into C
4007   19B7 2A            mov b, [d] ; Lower Word in B
4008   19B8             ; START FACTORS
4009   19B8 D7            push a
4010   19B9 11            mov a, b
4011   19BA 26 0A 00      mov b, $a
4012   19BD AE            div a, b
4013   19BE 27            mov b, a
4014   19BF E4            pop a
4015   19C0             ; END FACTORS
4016   19C0 E7            pop d
4017   19C1 FD 43         mov [d], b
4018   19C3 28            mov b, c
4019   19C4 FD 44 02 00   mov [d + 2], b
4020   19C8             ;; i++; 
4021   19C8 FA F5 FF      lea d, [bp + -11] ; $i
4022   19CB 2A            mov b, [d]
4023   19CC D8            push b
4024   19CD FD 77         inc b
4025   19CF FA F5 FF      lea d, [bp + -11] ; $i
4026   19D2 FD 43         mov [d], b
4027   19D4 E5            pop b
4028   19D5 0A 5D 19      jmp _while57_cond
4029   19D8             _while57_exit:
4030   19D8             ;; while (i > 0) { 
4031   19D8             _while58_cond:
4032   19D8 FA F5 FF      lea d, [bp + -11] ; $i
4033   19DB 2A            mov b, [d]
4034   19DC             ; START RELATIONAL
4035   19DC D7            push a
4036   19DD 11            mov a, b
4037   19DE 26 00 00      mov b, $0
4038   19E1 B0            cmp a, b
4039   19E2 FD 7F         sgt ; >
4040   19E4 E4            pop a
4041   19E5             ; END RELATIONAL
4042   19E5 C0 00 00      cmp b, 0
4043   19E8 C6 11 1A      je _while58_exit
4044   19EB             _while58_block:
4045   19EB             ;; i--; 
4046   19EB FA F5 FF      lea d, [bp + -11] ; $i
4047   19EE 2A            mov b, [d]
4048   19EF D8            push b
4049   19F0 FD 7D         dec b
4050   19F2 FA F5 FF      lea d, [bp + -11] ; $i
4051   19F5 FD 43         mov [d], b
4052   19F7 E5            pop b
4053   19F8             ;; putchar(digits[i]); 
4054   19F8 FA F7 FF      lea d, [bp + -9] ; $digits
4055   19FB D7            push a
4056   19FC DA            push d
4057   19FD FA F5 FF      lea d, [bp + -11] ; $i
4058   1A00 2A            mov b, [d]
4059   1A01 E7            pop d
4060   1A02 5A            add d, b
4061   1A03 E4            pop a
4062   1A04 32            mov bl, [d]
4063   1A05 A7 00         mov bh, 0
4064   1A07 DD            push bl
4065   1A08 07 E3 1A      call putchar
4066   1A0B 51 01 00      add sp, 1
4067   1A0E 0A D8 19      jmp _while58_cond
4068   1A11             _while58_exit:
4069   1A11 F9            leave
4070   1A12 09            ret
4071   1A13             
4072   1A13             print_unsigned:
4073   1A13 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4074   1A16             ; $digits 
4075   1A16             ; $i 
4076   1A16 52 07 00      sub sp, 7
4077   1A19             ;; i = 0; 
4078   1A19 FA FA FF      lea d, [bp + -6] ; $i
4079   1A1C DA            push d
4080   1A1D 26 00 00      mov b, $0
4081   1A20 E7            pop d
4082   1A21 FD 43         mov [d], b
4083   1A23             ;; if(num == 0){ 
4084   1A23             _if59_cond:
4085   1A23 FA 05 00      lea d, [bp + 5] ; $num
4086   1A26 2A            mov b, [d]
4087   1A27             ; START RELATIONAL
4088   1A27 D7            push a
4089   1A28 11            mov a, b
4090   1A29 26 00 00      mov b, $0
4091   1A2C B0            cmp a, b
4092   1A2D FD 71         seq ; ==
4093   1A2F E4            pop a
4094   1A30             ; END RELATIONAL
4095   1A30 C0 00 00      cmp b, 0
4096   1A33 C6 45 1A      je _if59_exit
4097   1A36             _if59_true:
4098   1A36             ;; putchar('0'); 
4099   1A36 26 30 00      mov b, $30
4100   1A39 DD            push bl
4101   1A3A 07 E3 1A      call putchar
4102   1A3D 51 01 00      add sp, 1
4103   1A40             ;; return; 
4104   1A40 F9            leave
4105   1A41 09            ret
4106   1A42 0A 45 1A      jmp _if59_exit
4107   1A45             _if59_exit:
4108   1A45             ;; while (num > 0) { 
4109   1A45             _while60_cond:
4110   1A45 FA 05 00      lea d, [bp + 5] ; $num
4111   1A48 2A            mov b, [d]
4112   1A49             ; START RELATIONAL
4113   1A49 D7            push a
4114   1A4A 11            mov a, b
4115   1A4B 26 00 00      mov b, $0
4116   1A4E B0            cmp a, b
4117   1A4F FD 81         sgu ; > (unsigned)
4118   1A51 E4            pop a
4119   1A52             ; END RELATIONAL
4120   1A52 C0 00 00      cmp b, 0
4121   1A55 C6 9F 1A      je _while60_exit
4122   1A58             _while60_block:
4123   1A58             ;; digits[i] = '0' + (num % 10); 
4124   1A58 FA FC FF      lea d, [bp + -4] ; $digits
4125   1A5B D7            push a
4126   1A5C DA            push d
4127   1A5D FA FA FF      lea d, [bp + -6] ; $i
4128   1A60 2A            mov b, [d]
4129   1A61 E7            pop d
4130   1A62 5A            add d, b
4131   1A63 E4            pop a
4132   1A64 DA            push d
4133   1A65 26 30 00      mov b, $30
4134   1A68             ; START TERMS
4135   1A68 D7            push a
4136   1A69 11            mov a, b
4137   1A6A FA 05 00      lea d, [bp + 5] ; $num
4138   1A6D 2A            mov b, [d]
4139   1A6E             ; START FACTORS
4140   1A6E D7            push a
4141   1A6F 11            mov a, b
4142   1A70 26 0A 00      mov b, $a
4143   1A73 AE            div a, b ; 
4144   1A74 11            mov a, b
4145   1A75 27            mov b, a
4146   1A76 E4            pop a
4147   1A77             ; END FACTORS
4148   1A77 56            add b, a
4149   1A78 E4            pop a
4150   1A79             ; END TERMS
4151   1A79 E7            pop d
4152   1A7A FD 3E         mov [d], bl
4153   1A7C             ;; num = num / 10; 
4154   1A7C FA 05 00      lea d, [bp + 5] ; $num
4155   1A7F DA            push d
4156   1A80 FA 05 00      lea d, [bp + 5] ; $num
4157   1A83 2A            mov b, [d]
4158   1A84             ; START FACTORS
4159   1A84 D7            push a
4160   1A85 11            mov a, b
4161   1A86 26 0A 00      mov b, $a
4162   1A89 AE            div a, b
4163   1A8A 27            mov b, a
4164   1A8B E4            pop a
4165   1A8C             ; END FACTORS
4166   1A8C E7            pop d
4167   1A8D FD 43         mov [d], b
4168   1A8F             ;; i++; 
4169   1A8F FA FA FF      lea d, [bp + -6] ; $i
4170   1A92 2A            mov b, [d]
4171   1A93 D8            push b
4172   1A94 FD 77         inc b
4173   1A96 FA FA FF      lea d, [bp + -6] ; $i
4174   1A99 FD 43         mov [d], b
4175   1A9B E5            pop b
4176   1A9C 0A 45 1A      jmp _while60_cond
4177   1A9F             _while60_exit:
4178   1A9F             ;; while (i > 0) { 
4179   1A9F             _while61_cond:
4180   1A9F FA FA FF      lea d, [bp + -6] ; $i
4181   1AA2 2A            mov b, [d]
4182   1AA3             ; START RELATIONAL
4183   1AA3 D7            push a
4184   1AA4 11            mov a, b
4185   1AA5 26 00 00      mov b, $0
4186   1AA8 B0            cmp a, b
4187   1AA9 FD 7F         sgt ; >
4188   1AAB E4            pop a
4189   1AAC             ; END RELATIONAL
4190   1AAC C0 00 00      cmp b, 0
4191   1AAF C6 D8 1A      je _while61_exit
4192   1AB2             _while61_block:
4193   1AB2             ;; i--; 
4194   1AB2 FA FA FF      lea d, [bp + -6] ; $i
4195   1AB5 2A            mov b, [d]
4196   1AB6 D8            push b
4197   1AB7 FD 7D         dec b
4198   1AB9 FA FA FF      lea d, [bp + -6] ; $i
4199   1ABC FD 43         mov [d], b
4200   1ABE E5            pop b
4201   1ABF             ;; putchar(digits[i]); 
4202   1ABF FA FC FF      lea d, [bp + -4] ; $digits
4203   1AC2 D7            push a
4204   1AC3 DA            push d
4205   1AC4 FA FA FF      lea d, [bp + -6] ; $i
4206   1AC7 2A            mov b, [d]
4207   1AC8 E7            pop d
4208   1AC9 5A            add d, b
4209   1ACA E4            pop a
4210   1ACB 32            mov bl, [d]
4211   1ACC A7 00         mov bh, 0
4212   1ACE DD            push bl
4213   1ACF 07 E3 1A      call putchar
4214   1AD2 51 01 00      add sp, 1
4215   1AD5 0A 9F 1A      jmp _while61_cond
4216   1AD8             _while61_exit:
4217   1AD8 F9            leave
4218   1AD9 09            ret
4219   1ADA             
4220   1ADA             date:
4221   1ADA F8 00 00      enter 0 ; (push bp; mov bp, sp)
4222   1ADD             
4223   1ADD             ; --- BEGIN INLINE ASM BLOCK
4224   1ADD 19 00         mov al, 0 
4225   1ADF 05 07         syscall sys_datetime
4226   1AE1             ; --- END INLINE ASM BLOCK
4227   1AE1             
4228   1AE1 F9            leave
4229   1AE2 09            ret
4230   1AE3             
4231   1AE3             putchar:
4232   1AE3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4233   1AE6             
4234   1AE6             ; --- BEGIN INLINE ASM BLOCK
4235   1AE6 FA 05 00      lea d, [bp + 5] ; $c
4236   1AE9 1E            mov al, [d]
4237   1AEA 23            mov ah, al
4238   1AEB 07 C4 1C      call _putchar
4239   1AEE             ; --- END INLINE ASM BLOCK
4240   1AEE             
4241   1AEE F9            leave
4242   1AEF 09            ret
4243   1AF0             
4244   1AF0             getchar:
4245   1AF0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4246   1AF3             ; $c 
4247   1AF3 52 01 00      sub sp, 1
4248   1AF6             
4249   1AF6             ; --- BEGIN INLINE ASM BLOCK
4250   1AF6 07 BD 1C      call getch
4251   1AF9 1A            mov al, ah
4252   1AFA FA 00 00      lea d, [bp + 0] ; $c
4253   1AFD 3E            mov [d], al
4254   1AFE             ; --- END INLINE ASM BLOCK
4255   1AFE             
4256   1AFE             ;; return c; 
4257   1AFE FA 00 00      lea d, [bp + 0] ; $c
4258   1B01 32            mov bl, [d]
4259   1B02 A7 00         mov bh, 0
4260   1B04 F9            leave
4261   1B05 09            ret
4262   1B06             
4263   1B06             scann:
4264   1B06 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4265   1B09             ; $m 
4266   1B09 52 02 00      sub sp, 2
4267   1B0C             
4268   1B0C             ; --- BEGIN INLINE ASM BLOCK
4269   1B0C 07 08 1F      call scan_u16d
4270   1B0F FA FF FF      lea d, [bp + -1] ; $m
4271   1B12 43            mov [d], a
4272   1B13             ; --- END INLINE ASM BLOCK
4273   1B13             
4274   1B13             ;; return m; 
4275   1B13 FA FF FF      lea d, [bp + -1] ; $m
4276   1B16 2A            mov b, [d]
4277   1B17 F9            leave
4278   1B18 09            ret
4279   1B19             
4280   1B19             puts:
4281   1B19 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4282   1B1C             
4283   1B1C             ; --- BEGIN INLINE ASM BLOCK
4284   1B1C FA 05 00      lea d, [bp + 5] ; $s
4285   1B1F 15            mov a, [d]
4286   1B20 3C            mov d, a
4287   1B21 07 0E 1E      call _puts
4288   1B24 10 00 0A      mov a, $0A00
4289   1B27 05 03         syscall sys_io
4290   1B29             ; --- END INLINE ASM BLOCK
4291   1B29             
4292   1B29 F9            leave
4293   1B2A 09            ret
4294   1B2B             
4295   1B2B             print:
4296   1B2B F8 00 00      enter 0 ; (push bp; mov bp, sp)
4297   1B2E             
4298   1B2E             ; --- BEGIN INLINE ASM BLOCK
4299   1B2E FA 05 00      lea d, [bp + 5] ; $s
4300   1B31 FD 2A         mov d, [d]
4301   1B33 07 0E 1E      call _puts
4302   1B36             ; --- END INLINE ASM BLOCK
4303   1B36             
4304   1B36 F9            leave
4305   1B37 09            ret
4306   1B38             
4307   1B38             loadfile:
4308   1B38 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4309   1B3B             
4310   1B3B             ; --- BEGIN INLINE ASM BLOCK
4311   1B3B FA 07 00      lea d, [bp + 7] ; $destination
4312   1B3E 15            mov a, [d]
4313   1B3F 4F            mov di, a
4314   1B40 FA 05 00      lea d, [bp + 5] ; $filename
4315   1B43 FD 2A         mov d, [d]
4316   1B45 19 14         mov al, 20
4317   1B47 05 04         syscall sys_filesystem
4318   1B49             ; --- END INLINE ASM BLOCK
4319   1B49             
4320   1B49 F9            leave
4321   1B4A 09            ret
4322   1B4B             
4323   1B4B             create_file:
4324   1B4B F8 00 00      enter 0 ; (push bp; mov bp, sp)
4325   1B4E F9            leave
4326   1B4F 09            ret
4327   1B50             
4328   1B50             delete_file:
4329   1B50 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4330   1B53             
4331   1B53             ; --- BEGIN INLINE ASM BLOCK
4332   1B53 FA 05 00      lea d, [bp + 5] ; $filename
4333   1B56 19 0A         mov al, 10
4334   1B58 05 04         syscall sys_filesystem
4335   1B5A             ; --- END INLINE ASM BLOCK
4336   1B5A             
4337   1B5A F9            leave
4338   1B5B 09            ret
4339   1B5C             
4340   1B5C             fopen:
4341   1B5C F8 00 00      enter 0 ; (push bp; mov bp, sp)
4342   1B5F F9            leave
4343   1B60 09            ret
4344   1B61             
4345   1B61             fclose:
4346   1B61 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4347   1B64 F9            leave
4348   1B65 09            ret
4349   1B66             
4350   1B66             load_hex:
4351   1B66 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4352   1B69             ; $temp 
4353   1B69 52 02 00      sub sp, 2
4354   1B6C             ;; temp = alloc(32768); 
4355   1B6C FA FF FF      lea d, [bp + -1] ; $temp
4356   1B6F DA            push d
4357   1B70 26 00 80      mov b, $8000
4358   1B73 FD AB         swp b
4359   1B75 D8            push b
4360   1B76 07 48 09      call alloc
4361   1B79 51 02 00      add sp, 2
4362   1B7C E7            pop d
4363   1B7D FD 43         mov [d], b
4364   1B7F             
4365   1B7F             ; --- BEGIN INLINE ASM BLOCK
4366   1B7F               
4367   1B7F               
4368   1B7F               
4369   1B7F               
4370   1B7F               
4371   1B7F             _load_hex:
4372   1B7F D7            push a
4373   1B80 D8            push b
4374   1B81 DA            push d
4375   1B82 E2            push si
4376   1B83 E3            push di
4377   1B84 52 00 80      sub sp, $8000      
4378   1B87 38 00 00      mov c, 0
4379   1B8A 48            mov a, sp
4380   1B8B 77            inc a
4381   1B8C 3C            mov d, a          
4382   1B8D 07 CB 1C      call _gets        
4383   1B90 4D            mov si, a
4384   1B91             __load_hex_loop:
4385   1B91 F6            lodsb             
4386   1B92 B9 00         cmp al, 0         
4387   1B94 C6 A2 1B      jz __load_hex_ret
4388   1B97 36            mov bh, al
4389   1B98 F6            lodsb
4390   1B99 2F            mov bl, al
4391   1B9A 07 81 1C      call _atoi        
4392   1B9D F7            stosb             
4393   1B9E 78            inc c
4394   1B9F 0A 91 1B      jmp __load_hex_loop
4395   1BA2             __load_hex_ret:
4396   1BA2 51 00 80      add sp, $8000
4397   1BA5 F0            pop di
4398   1BA6 EF            pop si
4399   1BA7 E7            pop d
4400   1BA8 E5            pop b
4401   1BA9 E4            pop a
4402   1BAA             ; --- END INLINE ASM BLOCK
4403   1BAA             
4404   1BAA F9            leave
4405   1BAB 09            ret
4406   1BAC             
4407   1BAC             getparam:
4408   1BAC F8 00 00      enter 0 ; (push bp; mov bp, sp)
4409   1BAF             ; $data 
4410   1BAF 52 01 00      sub sp, 1
4411   1BB2             
4412   1BB2             ; --- BEGIN INLINE ASM BLOCK
4413   1BB2 19 04         mov al, 4
4414   1BB4 FA 05 00      lea d, [bp + 5] ; $address
4415   1BB7 FD 2A         mov d, [d]
4416   1BB9 05 0C         syscall sys_system
4417   1BBB FA 00 00      lea d, [bp + 0] ; $data
4418   1BBE FD 3E         mov [d], bl
4419   1BC0             ; --- END INLINE ASM BLOCK
4420   1BC0             
4421   1BC0             ;; return data; 
4422   1BC0 FA 00 00      lea d, [bp + 0] ; $data
4423   1BC3 32            mov bl, [d]
4424   1BC4 A7 00         mov bh, 0
4425   1BC6 F9            leave
4426   1BC7 09            ret
4427   1BC8             
4428   1BC8             clear:
4429   1BC8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4430   1BCB             ;; print("\033[2J\033[H"); 
4431   1BCB 26 7D 2C      mov b, __s3 ; "\033[2J\033[H"
4432   1BCE FD AB         swp b
4433   1BD0 D8            push b
4434   1BD1 07 2B 1B      call print
4435   1BD4 51 02 00      add sp, 2
4436   1BD7 F9            leave
4437   1BD8 09            ret
4438   1BD9             
4439   1BD9             include_stdio_asm:
4440   1BD9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4441   1BDC             
4442   1BDC             ; --- BEGIN INLINE ASM BLOCK
4443   1BDC             .include "lib/asm/stdio.asm"
0001+  1BDC             ;-----------------------------------------------------------------------------
0002+  1BDC             ; stdio.s
0003+  1BDC             ;-----------------------------------------------------------------------------
0004+  1BDC             .include "lib/asm/string.asm"
0001++ 1BDC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1BDC             ; string.s
0003++ 1BDC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1BDC             
0005++ 1BDC             
0006++ 1BDC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1BDC             ; _strrev
0008++ 1BDC             ; reverse a string
0009++ 1BDC             ; D = string address
0010++ 1BDC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1BDC             ; 01234
0012++ 1BDC             _strrev:
0013++ 1BDC 4B          	pusha
0014++ 1BDD 07 23 1C    	call _strlen	; length in C
0015++ 1BE0 12          	mov a, c
0016++ 1BE1 AF 01 00    	cmp a, 1
0017++ 1BE4 D0 FE 1B    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1BE7 7D          	dec a
0019++ 1BE8 FD 4E       	mov si, d	; beginning of string
0020++ 1BEA FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1BEC 59          	add d, a	; end of string
0022++ 1BED 12          	mov a, c
0023++ 1BEE FD 9B       	shr a		; divide by 2
0024++ 1BF0 39          	mov c, a	; C now counts the steps
0025++ 1BF1             _strrev_L0:
0026++ 1BF1 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1BF2 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1BF3 3E          	mov [d], al	; store left char into right side
0029++ 1BF4 1B          	mov al, bl
0030++ 1BF5 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1BF6 7E          	dec c
0032++ 1BF7 7F          	dec d
0033++ 1BF8 C2 00 00    	cmp c, 0
0034++ 1BFB C7 F1 1B    	jne _strrev_L0
0035++ 1BFE             _strrev_end:
0036++ 1BFE 4C          	popa
0037++ 1BFF 09          	ret
0038++ 1C00             	
0039++ 1C00             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1C00             ; _strchr
0041++ 1C00             ; search string in D for char in AL
0042++ 1C00             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1C00             _strchr:
0044++ 1C00             _strchr_L0:
0045++ 1C00 32          	mov bl, [d]
0046++ 1C01 C1 00       	cmp bl, 0
0047++ 1C03 C6 0E 1C    	je _strchr_end
0048++ 1C06 BA          	cmp al, bl
0049++ 1C07 C6 0E 1C    	je _strchr_end
0050++ 1C0A 79          	inc d
0051++ 1C0B 0A 00 1C    	jmp _strchr_L0
0052++ 1C0E             _strchr_end:
0053++ 1C0E 1B          	mov al, bl
0054++ 1C0F 09          	ret
0055++ 1C10             
0056++ 1C10             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1C10             ; _strstr
0058++ 1C10             ; find sub-string
0059++ 1C10             ; str1 in SI
0060++ 1C10             ; str2 in DI
0061++ 1C10             ; SI points to end of source string
0062++ 1C10             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1C10             _strstr:
0064++ 1C10 DB          	push al
0065++ 1C11 DA          	push d
0066++ 1C12 E3          	push di
0067++ 1C13             _strstr_loop:
0068++ 1C13 F3          	cmpsb					; compare a byte of the strings
0069++ 1C14 C7 1F 1C    	jne _strstr_ret
0070++ 1C17 FC 00 00    	lea d, [di + 0]
0071++ 1C1A BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1C1C C7 13 1C    	jne _strstr_loop				; equal chars but not at end
0073++ 1C1F             _strstr_ret:
0074++ 1C1F F0          	pop di
0075++ 1C20 E7          	pop d
0076++ 1C21 E8          	pop al
0077++ 1C22 09          	ret
0078++ 1C23             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1C23             ; length of null terminated string
0080++ 1C23             ; result in C
0081++ 1C23             ; pointer in D
0082++ 1C23             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1C23             _strlen:
0084++ 1C23 DA          	push d
0085++ 1C24 38 00 00    	mov c, 0
0086++ 1C27             _strlen_L1:
0087++ 1C27 BD 00       	cmp byte [d], 0
0088++ 1C29 C6 31 1C    	je _strlen_ret
0089++ 1C2C 79          	inc d
0090++ 1C2D 78          	inc c
0091++ 1C2E 0A 27 1C    	jmp _strlen_L1
0092++ 1C31             _strlen_ret:
0093++ 1C31 E7          	pop d
0094++ 1C32 09          	ret
0095++ 1C33             
0096++ 1C33             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1C33             ; STRCMP
0098++ 1C33             ; compare two strings
0099++ 1C33             ; str1 in SI
0100++ 1C33             ; str2 in DI
0101++ 1C33             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1C33             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1C33             _strcmp:
0104++ 1C33 DB          	push al
0105++ 1C34 DA          	push d
0106++ 1C35 E3          	push di
0107++ 1C36 E2          	push si
0108++ 1C37             _strcmp_loop:
0109++ 1C37 F3          	cmpsb					; compare a byte of the strings
0110++ 1C38 C7 43 1C    	jne _strcmp_ret
0111++ 1C3B FB FF FF    	lea d, [si +- 1]
0112++ 1C3E BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1C40 C7 37 1C    	jne _strcmp_loop				; equal chars but not at end
0114++ 1C43             _strcmp_ret:
0115++ 1C43 EF          	pop si
0116++ 1C44 F0          	pop di
0117++ 1C45 E7          	pop d
0118++ 1C46 E8          	pop al
0119++ 1C47 09          	ret
0120++ 1C48             
0121++ 1C48             
0122++ 1C48             ; STRCPY
0123++ 1C48             ; copy null terminated string from SI to DI
0124++ 1C48             ; source in SI
0125++ 1C48             ; destination in DI
0126++ 1C48             _strcpy:
0127++ 1C48 E2          	push si
0128++ 1C49 E3          	push di
0129++ 1C4A DB          	push al
0130++ 1C4B             _strcpy_L1:
0131++ 1C4B F6          	lodsb
0132++ 1C4C F7          	stosb
0133++ 1C4D B9 00       	cmp al, 0
0134++ 1C4F C7 4B 1C    	jne _strcpy_L1
0135++ 1C52             _strcpy_end:
0136++ 1C52 E8          	pop al
0137++ 1C53 F0          	pop di
0138++ 1C54 EF          	pop si
0139++ 1C55 09          	ret
0140++ 1C56             
0141++ 1C56             ; STRCAT
0142++ 1C56             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1C56             ; source in SI
0144++ 1C56             ; destination in DI
0145++ 1C56             _strcat:
0146++ 1C56 E2          	push si
0147++ 1C57 E3          	push di
0148++ 1C58 D7          	push a
0149++ 1C59 DA          	push d
0150++ 1C5A 50          	mov a, di
0151++ 1C5B 3C          	mov d, a
0152++ 1C5C             _strcat_goto_end_L1:
0153++ 1C5C BD 00       	cmp byte[d], 0
0154++ 1C5E C6 65 1C    	je _strcat_start
0155++ 1C61 79          	inc d
0156++ 1C62 0A 5C 1C    	jmp _strcat_goto_end_L1
0157++ 1C65             _strcat_start:
0158++ 1C65 FD 50       	mov di, d
0159++ 1C67             _strcat_L1:
0160++ 1C67 F6          	lodsb
0161++ 1C68 F7          	stosb
0162++ 1C69 B9 00       	cmp al, 0
0163++ 1C6B C7 67 1C    	jne _strcat_L1
0164++ 1C6E             _strcat_end:
0165++ 1C6E E7          	pop d
0166++ 1C6F E4          	pop a
0167++ 1C70 F0          	pop di
0168++ 1C71 EF          	pop si
0169++ 1C72 09          	ret
0170++ 1C73             
0171++ 1C73             
0005+  1C73             
0006+  1C73             ;-----------------------------------------------------------------------------
0007+  1C73             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  1C73             ; ASCII in BL
0009+  1C73             ; result in AL
0010+  1C73             ; ascii for F = 0100 0110
0011+  1C73             ; ascii for 9 = 0011 1001
0012+  1C73             ;-----------------------------------------------------------------------------
0013+  1C73             hex_ascii_encode:
0014+  1C73 1B            mov al, bl
0015+  1C74 93 40         test al, $40        ; test if letter or number
0016+  1C76 C7 7C 1C      jnz hex_letter
0017+  1C79 87 0F         and al, $0F        ; get number
0018+  1C7B 09            ret
0019+  1C7C             hex_letter:
0020+  1C7C 87 0F         and al, $0F        ; get letter
0021+  1C7E 6A 09         add al, 9
0022+  1C80 09            ret
0023+  1C81             
0024+  1C81             ;-----------------------------------------------------------------------------
0025+  1C81             ; ATOI
0026+  1C81             ; 2 letter hex string in B
0027+  1C81             ; 8bit integer returned in AL
0028+  1C81             ;-----------------------------------------------------------------------------
0029+  1C81             _atoi:
0030+  1C81 D8            push b
0031+  1C82 07 73 1C      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  1C85 30            mov bl, bh
0033+  1C86 DB            push al          ; save a
0034+  1C87 07 73 1C      call hex_ascii_encode
0035+  1C8A EA            pop bl  
0036+  1C8B FD 9E 04      shl al, 4
0037+  1C8E 8C            or al, bl
0038+  1C8F E5            pop b
0039+  1C90 09            ret  
0040+  1C91             
0041+  1C91             ;-----------------------------------------------------------------------------
0042+  1C91             ; scanf
0043+  1C91             ; no need for explanations!
0044+  1C91             ;-----------------------------------------------------------------------------
0045+  1C91             scanf:
0046+  1C91 09            ret
0047+  1C92             
0048+  1C92             ;-----------------------------------------------------------------------------
0049+  1C92             ; ITOA
0050+  1C92             ; 8bit value in BL
0051+  1C92             ; 2 byte ASCII result in A
0052+  1C92             ;-----------------------------------------------------------------------------
0053+  1C92             _itoa:
0054+  1C92 DA            push d
0055+  1C93 D8            push b
0056+  1C94 A7 00         mov bh, 0
0057+  1C96 FD A4 04      shr bl, 4  
0058+  1C99 74            mov d, b
0059+  1C9A 1F 42 1F      mov al, [d + s_hex_digits]
0060+  1C9D 23            mov ah, al
0061+  1C9E               
0062+  1C9E E5            pop b
0063+  1C9F D8            push b
0064+  1CA0 A7 00         mov bh, 0
0065+  1CA2 FD 87 0F      and bl, $0F
0066+  1CA5 74            mov d, b
0067+  1CA6 1F 42 1F      mov al, [d + s_hex_digits]
0068+  1CA9 E5            pop b
0069+  1CAA E7            pop d
0070+  1CAB 09            ret
0071+  1CAC             
0072+  1CAC             ;-----------------------------------------------------------------------------
0073+  1CAC             ; HEX STRING TO BINARY
0074+  1CAC             ; di = destination address
0075+  1CAC             ; si = source
0076+  1CAC             ;-----------------------------------------------------------------------------
0077+  1CAC             _hex_to_int:
0078+  1CAC             _hex_to_int_L1:
0079+  1CAC F6            lodsb          ; load from [SI] to AL
0080+  1CAD B9 00         cmp al, 0        ; check if ASCII 0
0081+  1CAF C6 BC 1C      jz _hex_to_int_ret
0082+  1CB2 36            mov bh, al
0083+  1CB3 F6            lodsb
0084+  1CB4 2F            mov bl, al
0085+  1CB5 07 81 1C      call _atoi        ; convert ASCII byte in B to int (to AL)
0086+  1CB8 F7            stosb          ; store AL to [DI]
0087+  1CB9 0A AC 1C      jmp _hex_to_int_L1
0088+  1CBC             _hex_to_int_ret:
0089+  1CBC 09            ret    
0090+  1CBD             
0091+  1CBD             ;-----------------------------------------------------------------------------
0092+  1CBD             ; GETCHAR
0093+  1CBD             ; char in ah
0094+  1CBD             ;-----------------------------------------------------------------------------
0095+  1CBD             getch:
0096+  1CBD DB            push al
0097+  1CBE             getch_retry:
0098+  1CBE 19 01         mov al, 1
0099+  1CC0 05 03         syscall sys_io      ; receive in AH
0100+  1CC2 E8            pop al
0101+  1CC3 09            ret
0102+  1CC4             
0103+  1CC4             ;-----------------------------------------------------------------------------
0104+  1CC4             ; PUTCHAR
0105+  1CC4             ; char in ah
0106+  1CC4             ;-----------------------------------------------------------------------------
0107+  1CC4             _putchar:
0108+  1CC4 D7            push a
0109+  1CC5 19 00         mov al, 0
0110+  1CC7 05 03         syscall sys_io      ; char in AH
0111+  1CC9 E4            pop a
0112+  1CCA 09            ret
0113+  1CCB             
0114+  1CCB             ;-----------------------------------------------------------------------------
0115+  1CCB             ;; INPUT A STRING
0116+  1CCB             ;; terminates with null
0117+  1CCB             ;; pointer in D
0118+  1CCB             ;-----------------------------------------------------------------------------
0119+  1CCB             _gets:
0120+  1CCB D7            push a
0121+  1CCC DA            push d
0122+  1CCD             _gets_loop:
0123+  1CCD 19 01         mov al, 1
0124+  1CCF 05 03         syscall sys_io      ; receive in AH
0125+  1CD1 B9 00         cmp al, 0        ; check error code (AL)
0126+  1CD3 C6 CD 1C      je _gets_loop      ; if no char received, retry
0127+  1CD6             
0128+  1CD6 76 1B         cmp ah, 27
0129+  1CD8 C6 F9 1C      je _gets_ansi_esc
0130+  1CDB 76 0A         cmp ah, $0A        ; LF
0131+  1CDD C6 64 1D      je _gets_end
0132+  1CE0 76 0D         cmp ah, $0D        ; CR
0133+  1CE2 C6 64 1D      je _gets_end
0134+  1CE5 76 5C         cmp ah, $5C        ; '\\'
0135+  1CE7 C6 25 1D      je _gets_escape
0136+  1CEA               
0137+  1CEA 76 08         cmp ah, $08      ; check for backspace
0138+  1CEC C6 F5 1C      je _gets_backspace
0139+  1CEF             
0140+  1CEF 1A            mov al, ah
0141+  1CF0 3E            mov [d], al
0142+  1CF1 79            inc d
0143+  1CF2 0A CD 1C      jmp _gets_loop
0144+  1CF5             _gets_backspace:
0145+  1CF5 7F            dec d
0146+  1CF6 0A CD 1C      jmp _gets_loop
0147+  1CF9             _gets_ansi_esc:
0148+  1CF9 19 01         mov al, 1
0149+  1CFB 05 03         syscall sys_io        ; receive in AH without echo
0150+  1CFD B9 00         cmp al, 0          ; check error code (AL)
0151+  1CFF C6 F9 1C      je _gets_ansi_esc    ; if no char received, retry
0152+  1D02 76 5B         cmp ah, '['
0153+  1D04 C7 CD 1C      jne _gets_loop
0154+  1D07             _gets_ansi_esc_2:
0155+  1D07 19 01         mov al, 1
0156+  1D09 05 03         syscall sys_io          ; receive in AH without echo
0157+  1D0B B9 00         cmp al, 0            ; check error code (AL)
0158+  1D0D C6 07 1D      je _gets_ansi_esc_2  ; if no char received, retry
0159+  1D10 76 44         cmp ah, 'D'
0160+  1D12 C6 1D 1D      je _gets_left_arrow
0161+  1D15 76 43         cmp ah, 'C'
0162+  1D17 C6 21 1D      je _gets_right_arrow
0163+  1D1A 0A CD 1C      jmp _gets_loop
0164+  1D1D             _gets_left_arrow:
0165+  1D1D 7F            dec d
0166+  1D1E 0A CD 1C      jmp _gets_loop
0167+  1D21             _gets_right_arrow:
0168+  1D21 79            inc d
0169+  1D22 0A CD 1C      jmp _gets_loop
0170+  1D25             _gets_escape:
0171+  1D25 19 01         mov al, 1
0172+  1D27 05 03         syscall sys_io      ; receive in AH
0173+  1D29 B9 00         cmp al, 0        ; check error code (AL)
0174+  1D2B C6 25 1D      je _gets_escape      ; if no char received, retry
0175+  1D2E 76 6E         cmp ah, 'n'
0176+  1D30 C6 4F 1D      je _gets_LF
0177+  1D33 76 72         cmp ah, 'r'
0178+  1D35 C6 56 1D      je _gets_CR
0179+  1D38 76 30         cmp ah, '0'
0180+  1D3A C6 5D 1D      je _gets_NULL
0181+  1D3D 76 5C         cmp ah, $5C  ; '\'
0182+  1D3F C6 48 1D      je _gets_slash
0183+  1D42 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0184+  1D43 3E            mov [d], al
0185+  1D44 79            inc d
0186+  1D45 0A CD 1C      jmp _gets_loop
0187+  1D48             _gets_slash:
0188+  1D48 19 5C         mov al, $5C
0189+  1D4A 3E            mov [d], al
0190+  1D4B 79            inc d
0191+  1D4C 0A CD 1C      jmp _gets_loop
0192+  1D4F             _gets_LF:
0193+  1D4F 19 0A         mov al, $0A
0194+  1D51 3E            mov [d], al
0195+  1D52 79            inc d
0196+  1D53 0A CD 1C      jmp _gets_loop
0197+  1D56             _gets_CR:
0198+  1D56 19 0D         mov al, $0D
0199+  1D58 3E            mov [d], al
0200+  1D59 79            inc d
0201+  1D5A 0A CD 1C      jmp _gets_loop
0202+  1D5D             _gets_NULL:
0203+  1D5D 19 00         mov al, $00
0204+  1D5F 3E            mov [d], al
0205+  1D60 79            inc d
0206+  1D61 0A CD 1C      jmp _gets_loop
0207+  1D64             _gets_end:
0208+  1D64 19 00         mov al, 0
0209+  1D66 3E            mov [d], al        ; terminate string
0210+  1D67 E7            pop d
0211+  1D68 E4            pop a
0212+  1D69 09            ret
0213+  1D6A             
0214+  1D6A             ;-----------------------------------------------------------------------------
0215+  1D6A             ;; INPUT TEXT
0216+  1D6A             ;; terminated with CTRL+D
0217+  1D6A             ;; pointer in D
0218+  1D6A             ;-----------------------------------------------------------------------------
0219+  1D6A             _gettxt:
0220+  1D6A D7            push a
0221+  1D6B DA            push d
0222+  1D6C             _gettxt_loop:
0223+  1D6C 19 01         mov al, 1
0224+  1D6E 05 03         syscall sys_io      ; receive in AH
0225+  1D70 B9 00         cmp al, 0        ; check error code (AL)
0226+  1D72 C6 6C 1D      je _gettxt_loop    ; if no char received, retry
0227+  1D75 76 04         cmp ah, 4      ; EOT
0228+  1D77 C6 B5 1D      je _gettxt_end
0229+  1D7A 76 08         cmp ah, $08      ; check for backspace
0230+  1D7C C6 B1 1D      je _gettxt_backspace
0231+  1D7F 76 5C         cmp ah, $5C        ; '\'
0232+  1D81 C6 8A 1D      je _gettxt_escape
0233+  1D84 1A            mov al, ah
0234+  1D85 3E            mov [d], al
0235+  1D86 79            inc d
0236+  1D87 0A 6C 1D      jmp _gettxt_loop
0237+  1D8A             _gettxt_escape:
0238+  1D8A 19 01         mov al, 1
0239+  1D8C 05 03         syscall sys_io      ; receive in AH
0240+  1D8E B9 00         cmp al, 0        ; check error code (AL)
0241+  1D90 C6 8A 1D      je _gettxt_escape    ; if no char received, retry
0242+  1D93 76 6E         cmp ah, 'n'
0243+  1D95 C6 A3 1D      je _gettxt_LF
0244+  1D98 76 72         cmp ah, 'r'
0245+  1D9A C6 AA 1D      je _gettxt_CR
0246+  1D9D 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0247+  1D9E 3E            mov [d], al
0248+  1D9F 79            inc d
0249+  1DA0 0A 6C 1D      jmp _gettxt_loop
0250+  1DA3             _gettxt_LF:
0251+  1DA3 19 0A         mov al, $0A
0252+  1DA5 3E            mov [d], al
0253+  1DA6 79            inc d
0254+  1DA7 0A 6C 1D      jmp _gettxt_loop
0255+  1DAA             _gettxt_CR:
0256+  1DAA 19 0D         mov al, $0D
0257+  1DAC 3E            mov [d], al
0258+  1DAD 79            inc d
0259+  1DAE 0A 6C 1D      jmp _gettxt_loop
0260+  1DB1             _gettxt_backspace:
0261+  1DB1 7F            dec d
0262+  1DB2 0A 6C 1D      jmp _gettxt_loop
0263+  1DB5             _gettxt_end:
0264+  1DB5 19 00         mov al, 0
0265+  1DB7 3E            mov [d], al        ; terminate string
0266+  1DB8 E7            pop d
0267+  1DB9 E4            pop a
0268+  1DBA 09            ret
0269+  1DBB             
0270+  1DBB             ;-----------------------------------------------------------------------------
0271+  1DBB             ; PRINT NEW LINE
0272+  1DBB             ;-----------------------------------------------------------------------------
0273+  1DBB             printnl:
0274+  1DBB D7            push a
0275+  1DBC 10 00 0A      mov a, $0A00
0276+  1DBF 05 03         syscall sys_io
0277+  1DC1 10 00 0D      mov a, $0D00
0278+  1DC4 05 03         syscall sys_io
0279+  1DC6 E4            pop a
0280+  1DC7 09            ret
0281+  1DC8             
0282+  1DC8             ;-----------------------------------------------------------------------------
0283+  1DC8             ; _strtoint
0284+  1DC8             ; 4 digit hex string number in d
0285+  1DC8             ; integer returned in A
0286+  1DC8             ;-----------------------------------------------------------------------------
0287+  1DC8             _strtointx:
0288+  1DC8 D8            push b
0289+  1DC9 32            mov bl, [d]
0290+  1DCA 37            mov bh, bl
0291+  1DCB 33 01 00      mov bl, [d + 1]
0292+  1DCE 07 81 1C      call _atoi        ; convert to int in AL
0293+  1DD1 23            mov ah, al        ; move to AH
0294+  1DD2 33 02 00      mov bl, [d + 2]
0295+  1DD5 37            mov bh, bl
0296+  1DD6 33 03 00      mov bl, [d + 3]
0297+  1DD9 07 81 1C      call _atoi        ; convert to int in AL
0298+  1DDC E5            pop b
0299+  1DDD 09            ret
0300+  1DDE             
0301+  1DDE             ;-----------------------------------------------------------------------------
0302+  1DDE             ; _strtoint
0303+  1DDE             ; 5 digit base10 string number in d
0304+  1DDE             ; integer returned in A
0305+  1DDE             ;-----------------------------------------------------------------------------
0306+  1DDE             _strtoint:
0307+  1DDE E2            push si
0308+  1DDF D8            push b
0309+  1DE0 D9            push c
0310+  1DE1 DA            push d
0311+  1DE2 07 23 1C      call _strlen      ; get string length in C
0312+  1DE5 7E            dec c
0313+  1DE6 FD 4E         mov si, d
0314+  1DE8 12            mov a, c
0315+  1DE9 FD 99         shl a
0316+  1DEB 3B 5A 1F      mov d, table_power
0317+  1DEE 59            add d, a
0318+  1DEF 38 00 00      mov c, 0
0319+  1DF2             _strtoint_L0:
0320+  1DF2 F6            lodsb      ; load ASCII to al
0321+  1DF3 B9 00         cmp al, 0
0322+  1DF5 C6 08 1E      je _strtoint_end
0323+  1DF8 6F 30         sub al, $30    ; make into integer
0324+  1DFA 22 00         mov ah, 0
0325+  1DFC 2A            mov b, [d]
0326+  1DFD AC            mul a, b      ; result in B since it fits in 16bits
0327+  1DFE 11            mov a, b
0328+  1DFF 28            mov b, c
0329+  1E00 54            add a, b
0330+  1E01 39            mov c, a
0331+  1E02 63 02 00      sub d, 2
0332+  1E05 0A F2 1D      jmp _strtoint_L0
0333+  1E08             _strtoint_end:
0334+  1E08 12            mov a, c
0335+  1E09 E7            pop d
0336+  1E0A E6            pop c
0337+  1E0B E5            pop b
0338+  1E0C EF            pop si
0339+  1E0D 09            ret
0340+  1E0E             
0341+  1E0E             ;-----------------------------------------------------------------------------
0342+  1E0E             ; PRINT NULL TERMINATED STRING
0343+  1E0E             ; pointer in D
0344+  1E0E             ;-----------------------------------------------------------------------------
0345+  1E0E             _puts:
0346+  1E0E D7            push a
0347+  1E0F DA            push d
0348+  1E10             _puts_L1:
0349+  1E10 1E            mov al, [d]
0350+  1E11 B9 00         cmp al, 0
0351+  1E13 C6 1F 1E      jz _puts_END
0352+  1E16 23            mov ah, al
0353+  1E17 19 00         mov al, 0
0354+  1E19 05 03         syscall sys_io
0355+  1E1B 79            inc d
0356+  1E1C 0A 10 1E      jmp _puts_L1
0357+  1E1F             _puts_END:
0358+  1E1F E7            pop d
0359+  1E20 E4            pop a
0360+  1E21 09            ret
0361+  1E22             
0362+  1E22             ;-----------------------------------------------------------------------------
0363+  1E22             ; PRINT N SIZE STRING
0364+  1E22             ; pointer in D
0365+  1E22             ; size in C
0366+  1E22             ;-----------------------------------------------------------------------------
0367+  1E22             _putsn:
0368+  1E22 DB            push al
0369+  1E23 DA            push d
0370+  1E24 D9            push c
0371+  1E25             _putsn_L0:
0372+  1E25 1E            mov al, [d]
0373+  1E26 23            mov ah, al
0374+  1E27 19 00         mov al, 0
0375+  1E29 05 03         syscall sys_io
0376+  1E2B 79            inc d
0377+  1E2C 7E            dec c  
0378+  1E2D C2 00 00      cmp c, 0
0379+  1E30 C7 25 1E      jne _putsn_L0
0380+  1E33             _putsn_end:
0381+  1E33 E6            pop c
0382+  1E34 E7            pop d
0383+  1E35 E8            pop al
0384+  1E36 09            ret
0385+  1E37             
0386+  1E37             ;-----------------------------------------------------------------------------
0387+  1E37             ; print 16bit decimal number
0388+  1E37             ; input number in A
0389+  1E37             ;-----------------------------------------------------------------------------
0390+  1E37             print_u16d:
0391+  1E37 D7            push a
0392+  1E38 D8            push b
0393+  1E39 26 10 27      mov b, 10000
0394+  1E3C AE            div a, b      ; get 10000's coeff.
0395+  1E3D 07 5F 1E      call print_number
0396+  1E40 11            mov a, b
0397+  1E41 26 E8 03      mov b, 1000
0398+  1E44 AE            div a, b      ; get 1000's coeff.
0399+  1E45 07 5F 1E      call print_number
0400+  1E48 11            mov a, b
0401+  1E49 26 64 00      mov b, 100
0402+  1E4C AE            div a, b
0403+  1E4D 07 5F 1E      call print_number
0404+  1E50 11            mov a, b
0405+  1E51 26 0A 00      mov b, 10
0406+  1E54 AE            div a, b
0407+  1E55 07 5F 1E      call print_number
0408+  1E58 1B            mov al, bl      ; 1's coeff in bl
0409+  1E59 07 5F 1E      call print_number
0410+  1E5C E5            pop b
0411+  1E5D E4            pop a
0412+  1E5E 09            ret
0413+  1E5F             
0414+  1E5F             ;-----------------------------------------------------------------------------
0415+  1E5F             ; print AL
0416+  1E5F             ;-----------------------------------------------------------------------------
0417+  1E5F             print_number:
0418+  1E5F 6A 30         add al, $30
0419+  1E61 23            mov ah, al
0420+  1E62 07 C4 1C      call _putchar
0421+  1E65 09            ret
0422+  1E66             
0423+  1E66             ;-----------------------------------------------------------------------------
0424+  1E66             ; PRINT 16BIT HEX INTEGER
0425+  1E66             ; integer value in reg B
0426+  1E66             ;-----------------------------------------------------------------------------
0427+  1E66             print_u16x:
0428+  1E66 D7            push a
0429+  1E67 D8            push b
0430+  1E68 DD            push bl
0431+  1E69 30            mov bl, bh
0432+  1E6A 07 92 1C      call _itoa        ; convert bh to char in A
0433+  1E6D 2F            mov bl, al        ; save al
0434+  1E6E 19 00         mov al, 0
0435+  1E70 05 03         syscall sys_io        ; display AH
0436+  1E72 24            mov ah, bl        ; retrieve al
0437+  1E73 19 00         mov al, 0
0438+  1E75 05 03         syscall sys_io        ; display AL
0439+  1E77             
0440+  1E77 EA            pop bl
0441+  1E78 07 92 1C      call _itoa        ; convert bh to char in A
0442+  1E7B 2F            mov bl, al        ; save al
0443+  1E7C 19 00         mov al, 0
0444+  1E7E 05 03         syscall sys_io        ; display AH
0445+  1E80 24            mov ah, bl        ; retrieve al
0446+  1E81 19 00         mov al, 0
0447+  1E83 05 03         syscall sys_io        ; display AL
0448+  1E85             
0449+  1E85 E5            pop b
0450+  1E86 E4            pop a
0451+  1E87 09            ret
0452+  1E88             
0453+  1E88             ;-----------------------------------------------------------------------------
0454+  1E88             ; INPUT 16BIT HEX INTEGER
0455+  1E88             ; read 16bit integer into A
0456+  1E88             ;-----------------------------------------------------------------------------
0457+  1E88             scan_u16x:
0458+  1E88 F8 10 00      enter 16
0459+  1E8B D8            push b
0460+  1E8C DA            push d
0461+  1E8D             
0462+  1E8D FA F1 FF      lea d, [bp + -15]
0463+  1E90 07 CB 1C      call _gets        ; get number
0464+  1E93             
0465+  1E93 32            mov bl, [d]
0466+  1E94 37            mov bh, bl
0467+  1E95 33 01 00      mov bl, [d + 1]
0468+  1E98 07 81 1C      call _atoi        ; convert to int in AL
0469+  1E9B 23            mov ah, al        ; move to AH
0470+  1E9C             
0471+  1E9C 33 02 00      mov bl, [d + 2]
0472+  1E9F 37            mov bh, bl
0473+  1EA0 33 03 00      mov bl, [d + 3]
0474+  1EA3 07 81 1C      call _atoi        ; convert to int in AL
0475+  1EA6             
0476+  1EA6 E7            pop d
0477+  1EA7 E5            pop b
0478+  1EA8 F9            leave
0479+  1EA9 09            ret
0480+  1EAA             
0481+  1EAA             ;-----------------------------------------------------------------------------
0482+  1EAA             ; PRINT 8bit HEX INTEGER
0483+  1EAA             ; integer value in reg bl
0484+  1EAA             ;-----------------------------------------------------------------------------
0485+  1EAA             print_u8x:
0486+  1EAA D7            push a
0487+  1EAB DD            push bl
0488+  1EAC             
0489+  1EAC 07 92 1C      call _itoa        ; convert bl to char in A
0490+  1EAF 2F            mov bl, al        ; save al
0491+  1EB0 19 00         mov al, 0
0492+  1EB2 05 03         syscall sys_io        ; display AH
0493+  1EB4 24            mov ah, bl        ; retrieve al
0494+  1EB5 19 00         mov al, 0
0495+  1EB7 05 03         syscall sys_io        ; display AL
0496+  1EB9             
0497+  1EB9 EA            pop bl
0498+  1EBA E4            pop a
0499+  1EBB 09            ret
0500+  1EBC             
0501+  1EBC             ;-----------------------------------------------------------------------------
0502+  1EBC             ; print 8bit decimal unsigned number
0503+  1EBC             ; input number in AL
0504+  1EBC             ;-----------------------------------------------------------------------------
0505+  1EBC             print_u8d:
0506+  1EBC D7            push a
0507+  1EBD D8            push b
0508+  1EBE             
0509+  1EBE 22 00         mov ah, 0
0510+  1EC0 26 64 00      mov b, 100
0511+  1EC3 AE            div a, b
0512+  1EC4 D8            push b      ; save remainder
0513+  1EC5 B9 00         cmp al, 0
0514+  1EC7 C6 D1 1E      je skip100
0515+  1ECA 6A 30         add al, $30
0516+  1ECC 23            mov ah, al
0517+  1ECD 19 00         mov al, 0
0518+  1ECF 05 03         syscall sys_io  ; print coeff
0519+  1ED1             skip100:
0520+  1ED1 E4            pop a
0521+  1ED2 22 00         mov ah, 0
0522+  1ED4 26 0A 00      mov b, 10
0523+  1ED7 AE            div a, b
0524+  1ED8 D8            push b      ; save remainder
0525+  1ED9 B9 00         cmp al, 0
0526+  1EDB C6 E5 1E      je skip10
0527+  1EDE 6A 30         add al, $30
0528+  1EE0 23            mov ah, al
0529+  1EE1 19 00         mov al, 0
0530+  1EE3 05 03         syscall sys_io  ; print coeff
0531+  1EE5             skip10:
0532+  1EE5 E4            pop a
0533+  1EE6 1B            mov al, bl
0534+  1EE7 6A 30         add al, $30
0535+  1EE9 23            mov ah, al
0536+  1EEA 19 00         mov al, 0
0537+  1EEC 05 03         syscall sys_io  ; print coeff
0538+  1EEE E5            pop b
0539+  1EEF E4            pop a
0540+  1EF0 09            ret
0541+  1EF1             
0542+  1EF1             ;-----------------------------------------------------------------------------
0543+  1EF1             ; INPUT 8BIT HEX INTEGER
0544+  1EF1             ; read 8bit integer into AL
0545+  1EF1             ;-----------------------------------------------------------------------------
0546+  1EF1             scan_u8x:
0547+  1EF1 F8 04 00      enter 4
0548+  1EF4 D8            push b
0549+  1EF5 DA            push d
0550+  1EF6             
0551+  1EF6 FA FD FF      lea d, [bp + -3]
0552+  1EF9 07 CB 1C      call _gets        ; get number
0553+  1EFC             
0554+  1EFC 32            mov bl, [d]
0555+  1EFD 37            mov bh, bl
0556+  1EFE 33 01 00      mov bl, [d + 1]
0557+  1F01 07 81 1C      call _atoi        ; convert to int in AL
0558+  1F04             
0559+  1F04 E7            pop d
0560+  1F05 E5            pop b
0561+  1F06 F9            leave
0562+  1F07 09            ret
0563+  1F08             
0564+  1F08             ;-----------------------------------------------------------------------------
0565+  1F08             ; input decimal number
0566+  1F08             ; result in A
0567+  1F08             ; 655'\0'
0568+  1F08             ; low--------high
0569+  1F08             ;-----------------------------------------------------------------------------
0570+  1F08             scan_u16d:
0571+  1F08 F8 08 00      enter 8
0572+  1F0B E2            push si
0573+  1F0C D8            push b
0574+  1F0D D9            push c
0575+  1F0E DA            push d
0576+  1F0F FA F9 FF      lea d, [bp +- 7]
0577+  1F12 07 CB 1C      call _gets
0578+  1F15 07 23 1C      call _strlen      ; get string length in C
0579+  1F18 7E            dec c
0580+  1F19 FD 4E         mov si, d
0581+  1F1B 12            mov a, c
0582+  1F1C FD 99         shl a
0583+  1F1E 3B 5A 1F      mov d, table_power
0584+  1F21 59            add d, a
0585+  1F22 38 00 00      mov c, 0
0586+  1F25             mul_loop:
0587+  1F25 F6            lodsb      ; load ASCII to al
0588+  1F26 B9 00         cmp al, 0
0589+  1F28 C6 3B 1F      je mul_exit
0590+  1F2B 6F 30         sub al, $30    ; make into integer
0591+  1F2D 22 00         mov ah, 0
0592+  1F2F 2A            mov b, [d]
0593+  1F30 AC            mul a, b      ; result in B since it fits in 16bits
0594+  1F31 11            mov a, b
0595+  1F32 28            mov b, c
0596+  1F33 54            add a, b
0597+  1F34 39            mov c, a
0598+  1F35 63 02 00      sub d, 2
0599+  1F38 0A 25 1F      jmp mul_loop
0600+  1F3B             mul_exit:
0601+  1F3B 12            mov a, c
0602+  1F3C E7            pop d
0603+  1F3D E6            pop c
0604+  1F3E E5            pop b
0605+  1F3F EF            pop si
0606+  1F40 F9            leave
0607+  1F41 09            ret
0608+  1F42             
0609+  1F42 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0609+  1F46 34 35 36 37 
0609+  1F4A 38 39 41 42 
0609+  1F4E 43 44 45 46 
0610+  1F52 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0610+  1F56 1B 5B 48 00 
0611+  1F5A             
0612+  1F5A             table_power:
0613+  1F5A 01 00         .dw 1
0614+  1F5C 0A 00         .dw 10
0615+  1F5E 64 00         .dw 100
0616+  1F60 E8 03         .dw 1000
0617+  1F62 10 27         .dw 100004444   1F64             ; --- END INLINE ASM BLOCK
4445   1F64             
4446   1F64 F9            leave
4447   1F65 09            ret
4448   1F66             
4449   1F66             show:
4450   1F66 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4451   1F69             ; $i 
4452   1F69             ; $j 
4453   1F69 52 04 00      sub sp, 4
4454   1F6C             ;; for(i = 0; i <   30     ; i++){ 
4455   1F6C             _for62_init:
4456   1F6C FA FF FF      lea d, [bp + -1] ; $i
4457   1F6F DA            push d
4458   1F70 26 00 00      mov b, $0
4459   1F73 E7            pop d
4460   1F74 FD 43         mov [d], b
4461   1F76             _for62_cond:
4462   1F76 FA FF FF      lea d, [bp + -1] ; $i
4463   1F79 2A            mov b, [d]
4464   1F7A             ; START RELATIONAL
4465   1F7A D7            push a
4466   1F7B 11            mov a, b
4467   1F7C 26 1E 00      mov b, $1e
4468   1F7F B0            cmp a, b
4469   1F80 FD 73         slt ; <= (signed)
4470   1F82 E4            pop a
4471   1F83             ; END RELATIONAL
4472   1F83 C0 00 00      cmp b, 0
4473   1F86 C6 13 20      je _for62_exit
4474   1F89             _for62_block:
4475   1F89             ;; for(j = 0; j <    40    ; j++){ 
4476   1F89             _for63_init:
4477   1F89 FA FD FF      lea d, [bp + -3] ; $j
4478   1F8C DA            push d
4479   1F8D 26 00 00      mov b, $0
4480   1F90 E7            pop d
4481   1F91 FD 43         mov [d], b
4482   1F93             _for63_cond:
4483   1F93 FA FD FF      lea d, [bp + -3] ; $j
4484   1F96 2A            mov b, [d]
4485   1F97             ; START RELATIONAL
4486   1F97 D7            push a
4487   1F98 11            mov a, b
4488   1F99 26 28 00      mov b, $28
4489   1F9C B0            cmp a, b
4490   1F9D FD 73         slt ; <= (signed)
4491   1F9F E4            pop a
4492   1FA0             ; END RELATIONAL
4493   1FA0 C0 00 00      cmp b, 0
4494   1FA3 C6 F9 1F      je _for63_exit
4495   1FA6             _for63_block:
4496   1FA6             ;; currState[i][j] == '@' ? printf("@ ") : printf(". "); 
4497   1FA6             _ternary64_cond:
4498   1FA6 3B 77 27      mov d, _currState_data ; $currState
4499   1FA9 D7            push a
4500   1FAA DA            push d
4501   1FAB FA FF FF      lea d, [bp + -1] ; $i
4502   1FAE 2A            mov b, [d]
4503   1FAF E7            pop d
4504   1FB0 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
4505   1FB4 DA            push d
4506   1FB5 FA FD FF      lea d, [bp + -3] ; $j
4507   1FB8 2A            mov b, [d]
4508   1FB9 E7            pop d
4509   1FBA 5A            add d, b
4510   1FBB E4            pop a
4511   1FBC 32            mov bl, [d]
4512   1FBD A7 00         mov bh, 0
4513   1FBF             ; START RELATIONAL
4514   1FBF D7            push a
4515   1FC0 11            mov a, b
4516   1FC1 26 40 00      mov b, $40
4517   1FC4 B0            cmp a, b
4518   1FC5 FD 71         seq ; ==
4519   1FC7 E4            pop a
4520   1FC8             ; END RELATIONAL
4521   1FC8 C0 00 00      cmp b, 0
4522   1FCB C6 DD 1F      je _ternary64_false
4523   1FCE             _ternary64_true:
4524   1FCE 26 85 2C      mov b, __s4 ; "@ "
4525   1FD1 FD AB         swp b
4526   1FD3 D8            push b
4527   1FD4 07 F1 12      call printf
4528   1FD7 51 02 00      add sp, 2
4529   1FDA 0A E9 1F      jmp _ternary64_exit
4530   1FDD             _ternary64_false:
4531   1FDD 26 88 2C      mov b, __s5 ; ". "
4532   1FE0 FD AB         swp b
4533   1FE2 D8            push b
4534   1FE3 07 F1 12      call printf
4535   1FE6 51 02 00      add sp, 2
4536   1FE9             _ternary64_exit:
4537   1FE9             _for63_update:
4538   1FE9 FA FD FF      lea d, [bp + -3] ; $j
4539   1FEC 2A            mov b, [d]
4540   1FED D8            push b
4541   1FEE FD 77         inc b
4542   1FF0 FA FD FF      lea d, [bp + -3] ; $j
4543   1FF3 FD 43         mov [d], b
4544   1FF5 E5            pop b
4545   1FF6 0A 93 1F      jmp _for63_cond
4546   1FF9             _for63_exit:
4547   1FF9             ;; putchar(10); 
4548   1FF9 26 0A 00      mov b, $a
4549   1FFC DD            push bl
4550   1FFD 07 E3 1A      call putchar
4551   2000 51 01 00      add sp, 1
4552   2003             _for62_update:
4553   2003 FA FF FF      lea d, [bp + -1] ; $i
4554   2006 2A            mov b, [d]
4555   2007 D8            push b
4556   2008 FD 77         inc b
4557   200A FA FF FF      lea d, [bp + -1] ; $i
4558   200D FD 43         mov [d], b
4559   200F E5            pop b
4560   2010 0A 76 1F      jmp _for62_cond
4561   2013             _for62_exit:
4562   2013 F9            leave
4563   2014 09            ret
4564   2015             
4565   2015             alive:
4566   2015 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4567   2018             ;; if(currState[i][j] == '@') return 1; 
4568   2018             _if65_cond:
4569   2018 3B 77 27      mov d, _currState_data ; $currState
4570   201B D7            push a
4571   201C DA            push d
4572   201D FA 05 00      lea d, [bp + 5] ; $i
4573   2020 2A            mov b, [d]
4574   2021 E7            pop d
4575   2022 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
4576   2026 DA            push d
4577   2027 FA 07 00      lea d, [bp + 7] ; $j
4578   202A 2A            mov b, [d]
4579   202B E7            pop d
4580   202C 5A            add d, b
4581   202D E4            pop a
4582   202E 32            mov bl, [d]
4583   202F A7 00         mov bh, 0
4584   2031             ; START RELATIONAL
4585   2031 D7            push a
4586   2032 11            mov a, b
4587   2033 26 40 00      mov b, $40
4588   2036 B0            cmp a, b
4589   2037 FD 71         seq ; ==
4590   2039 E4            pop a
4591   203A             ; END RELATIONAL
4592   203A C0 00 00      cmp b, 0
4593   203D C6 48 20      je _if65_else
4594   2040             _if65_true:
4595   2040             ;; return 1; 
4596   2040 26 01 00      mov b, $1
4597   2043 F9            leave
4598   2044 09            ret
4599   2045 0A 4D 20      jmp _if65_exit
4600   2048             _if65_else:
4601   2048             ;; return 0; 
4602   2048 26 00 00      mov b, $0
4603   204B F9            leave
4604   204C 09            ret
4605   204D             _if65_exit:
4606   204D F9            leave
4607   204E 09            ret
4608   204F             
4609   204F             neighbours:
4610   204F F8 00 00      enter 0 ; (push bp; mov bp, sp)
4611   2052             ; $count 
4612   2052 52 02 00      sub sp, 2
4613   2055             ;; count = 0; 
4614   2055 FA FF FF      lea d, [bp + -1] ; $count
4615   2058 DA            push d
4616   2059 26 00 00      mov b, $0
4617   205C E7            pop d
4618   205D FD 43         mov [d], b
4619   205F             ;; if(currState[i+-1][j] == '@')			count++; 
4620   205F             _if66_cond:
4621   205F 3B 77 27      mov d, _currState_data ; $currState
4622   2062 D7            push a
4623   2063 DA            push d
4624   2064 FA 05 00      lea d, [bp + 5] ; $i
4625   2067 2A            mov b, [d]
4626   2068             ; START TERMS
4627   2068 D7            push a
4628   2069 11            mov a, b
4629   206A 26 FF FF      mov b, $ffff
4630   206D 56            add b, a
4631   206E E4            pop a
4632   206F             ; END TERMS
4633   206F E7            pop d
4634   2070 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
4635   2074 DA            push d
4636   2075 FA 07 00      lea d, [bp + 7] ; $j
4637   2078 2A            mov b, [d]
4638   2079 E7            pop d
4639   207A 5A            add d, b
4640   207B E4            pop a
4641   207C 32            mov bl, [d]
4642   207D A7 00         mov bh, 0
4643   207F             ; START RELATIONAL
4644   207F D7            push a
4645   2080 11            mov a, b
4646   2081 26 40 00      mov b, $40
4647   2084 B0            cmp a, b
4648   2085 FD 71         seq ; ==
4649   2087 E4            pop a
4650   2088             ; END RELATIONAL
4651   2088 C0 00 00      cmp b, 0
4652   208B C6 9E 20      je _if66_exit
4653   208E             _if66_true:
4654   208E             ;; count++; 
4655   208E FA FF FF      lea d, [bp + -1] ; $count
4656   2091 2A            mov b, [d]
4657   2092 D8            push b
4658   2093 FD 77         inc b
4659   2095 FA FF FF      lea d, [bp + -1] ; $count
4660   2098 FD 43         mov [d], b
4661   209A E5            pop b
4662   209B 0A 9E 20      jmp _if66_exit
4663   209E             _if66_exit:
4664   209E             ;; if(currState[i+-1][j+-1] == '@') 	count++; 
4665   209E             _if67_cond:
4666   209E 3B 77 27      mov d, _currState_data ; $currState
4667   20A1 D7            push a
4668   20A2 DA            push d
4669   20A3 FA 05 00      lea d, [bp + 5] ; $i
4670   20A6 2A            mov b, [d]
4671   20A7             ; START TERMS
4672   20A7 D7            push a
4673   20A8 11            mov a, b
4674   20A9 26 FF FF      mov b, $ffff
4675   20AC 56            add b, a
4676   20AD E4            pop a
4677   20AE             ; END TERMS
4678   20AE E7            pop d
4679   20AF FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
4680   20B3 DA            push d
4681   20B4 FA 07 00      lea d, [bp + 7] ; $j
4682   20B7 2A            mov b, [d]
4683   20B8             ; START TERMS
4684   20B8 D7            push a
4685   20B9 11            mov a, b
4686   20BA 26 FF FF      mov b, $ffff
4687   20BD 56            add b, a
4688   20BE E4            pop a
4689   20BF             ; END TERMS
4690   20BF E7            pop d
4691   20C0 5A            add d, b
4692   20C1 E4            pop a
4693   20C2 32            mov bl, [d]
4694   20C3 A7 00         mov bh, 0
4695   20C5             ; START RELATIONAL
4696   20C5 D7            push a
4697   20C6 11            mov a, b
4698   20C7 26 40 00      mov b, $40
4699   20CA B0            cmp a, b
4700   20CB FD 71         seq ; ==
4701   20CD E4            pop a
4702   20CE             ; END RELATIONAL
4703   20CE C0 00 00      cmp b, 0
4704   20D1 C6 E4 20      je _if67_exit
4705   20D4             _if67_true:
4706   20D4             ;; count++; 
4707   20D4 FA FF FF      lea d, [bp + -1] ; $count
4708   20D7 2A            mov b, [d]
4709   20D8 D8            push b
4710   20D9 FD 77         inc b
4711   20DB FA FF FF      lea d, [bp + -1] ; $count
4712   20DE FD 43         mov [d], b
4713   20E0 E5            pop b
4714   20E1 0A E4 20      jmp _if67_exit
4715   20E4             _if67_exit:
4716   20E4             ;; if(currState[i+-1][j+1] == '@') 	count++; 
4717   20E4             _if68_cond:
4718   20E4 3B 77 27      mov d, _currState_data ; $currState
4719   20E7 D7            push a
4720   20E8 DA            push d
4721   20E9 FA 05 00      lea d, [bp + 5] ; $i
4722   20EC 2A            mov b, [d]
4723   20ED             ; START TERMS
4724   20ED D7            push a
4725   20EE 11            mov a, b
4726   20EF 26 FF FF      mov b, $ffff
4727   20F2 56            add b, a
4728   20F3 E4            pop a
4729   20F4             ; END TERMS
4730   20F4 E7            pop d
4731   20F5 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
4732   20F9 DA            push d
4733   20FA FA 07 00      lea d, [bp + 7] ; $j
4734   20FD 2A            mov b, [d]
4735   20FE             ; START TERMS
4736   20FE D7            push a
4737   20FF 11            mov a, b
4738   2100 26 01 00      mov b, $1
4739   2103 56            add b, a
4740   2104 E4            pop a
4741   2105             ; END TERMS
4742   2105 E7            pop d
4743   2106 5A            add d, b
4744   2107 E4            pop a
4745   2108 32            mov bl, [d]
4746   2109 A7 00         mov bh, 0
4747   210B             ; START RELATIONAL
4748   210B D7            push a
4749   210C 11            mov a, b
4750   210D 26 40 00      mov b, $40
4751   2110 B0            cmp a, b
4752   2111 FD 71         seq ; ==
4753   2113 E4            pop a
4754   2114             ; END RELATIONAL
4755   2114 C0 00 00      cmp b, 0
4756   2117 C6 2A 21      je _if68_exit
4757   211A             _if68_true:
4758   211A             ;; count++; 
4759   211A FA FF FF      lea d, [bp + -1] ; $count
4760   211D 2A            mov b, [d]
4761   211E D8            push b
4762   211F FD 77         inc b
4763   2121 FA FF FF      lea d, [bp + -1] ; $count
4764   2124 FD 43         mov [d], b
4765   2126 E5            pop b
4766   2127 0A 2A 21      jmp _if68_exit
4767   212A             _if68_exit:
4768   212A             ;; if(currState[i][j+-1] == '@') 		count++; 
4769   212A             _if69_cond:
4770   212A 3B 77 27      mov d, _currState_data ; $currState
4771   212D D7            push a
4772   212E DA            push d
4773   212F FA 05 00      lea d, [bp + 5] ; $i
4774   2132 2A            mov b, [d]
4775   2133 E7            pop d
4776   2134 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
4777   2138 DA            push d
4778   2139 FA 07 00      lea d, [bp + 7] ; $j
4779   213C 2A            mov b, [d]
4780   213D             ; START TERMS
4781   213D D7            push a
4782   213E 11            mov a, b
4783   213F 26 FF FF      mov b, $ffff
4784   2142 56            add b, a
4785   2143 E4            pop a
4786   2144             ; END TERMS
4787   2144 E7            pop d
4788   2145 5A            add d, b
4789   2146 E4            pop a
4790   2147 32            mov bl, [d]
4791   2148 A7 00         mov bh, 0
4792   214A             ; START RELATIONAL
4793   214A D7            push a
4794   214B 11            mov a, b
4795   214C 26 40 00      mov b, $40
4796   214F B0            cmp a, b
4797   2150 FD 71         seq ; ==
4798   2152 E4            pop a
4799   2153             ; END RELATIONAL
4800   2153 C0 00 00      cmp b, 0
4801   2156 C6 69 21      je _if69_exit
4802   2159             _if69_true:
4803   2159             ;; count++; 
4804   2159 FA FF FF      lea d, [bp + -1] ; $count
4805   215C 2A            mov b, [d]
4806   215D D8            push b
4807   215E FD 77         inc b
4808   2160 FA FF FF      lea d, [bp + -1] ; $count
4809   2163 FD 43         mov [d], b
4810   2165 E5            pop b
4811   2166 0A 69 21      jmp _if69_exit
4812   2169             _if69_exit:
4813   2169             ;; if(currState[i][j+1] == '@') 			count++; 
4814   2169             _if70_cond:
4815   2169 3B 77 27      mov d, _currState_data ; $currState
4816   216C D7            push a
4817   216D DA            push d
4818   216E FA 05 00      lea d, [bp + 5] ; $i
4819   2171 2A            mov b, [d]
4820   2172 E7            pop d
4821   2173 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
4822   2177 DA            push d
4823   2178 FA 07 00      lea d, [bp + 7] ; $j
4824   217B 2A            mov b, [d]
4825   217C             ; START TERMS
4826   217C D7            push a
4827   217D 11            mov a, b
4828   217E 26 01 00      mov b, $1
4829   2181 56            add b, a
4830   2182 E4            pop a
4831   2183             ; END TERMS
4832   2183 E7            pop d
4833   2184 5A            add d, b
4834   2185 E4            pop a
4835   2186 32            mov bl, [d]
4836   2187 A7 00         mov bh, 0
4837   2189             ; START RELATIONAL
4838   2189 D7            push a
4839   218A 11            mov a, b
4840   218B 26 40 00      mov b, $40
4841   218E B0            cmp a, b
4842   218F FD 71         seq ; ==
4843   2191 E4            pop a
4844   2192             ; END RELATIONAL
4845   2192 C0 00 00      cmp b, 0
4846   2195 C6 A8 21      je _if70_exit
4847   2198             _if70_true:
4848   2198             ;; count++; 
4849   2198 FA FF FF      lea d, [bp + -1] ; $count
4850   219B 2A            mov b, [d]
4851   219C D8            push b
4852   219D FD 77         inc b
4853   219F FA FF FF      lea d, [bp + -1] ; $count
4854   21A2 FD 43         mov [d], b
4855   21A4 E5            pop b
4856   21A5 0A A8 21      jmp _if70_exit
4857   21A8             _if70_exit:
4858   21A8             ;; if(currState[i+1][j+-1] == '@') 	count++; 
4859   21A8             _if71_cond:
4860   21A8 3B 77 27      mov d, _currState_data ; $currState
4861   21AB D7            push a
4862   21AC DA            push d
4863   21AD FA 05 00      lea d, [bp + 5] ; $i
4864   21B0 2A            mov b, [d]
4865   21B1             ; START TERMS
4866   21B1 D7            push a
4867   21B2 11            mov a, b
4868   21B3 26 01 00      mov b, $1
4869   21B6 56            add b, a
4870   21B7 E4            pop a
4871   21B8             ; END TERMS
4872   21B8 E7            pop d
4873   21B9 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
4874   21BD DA            push d
4875   21BE FA 07 00      lea d, [bp + 7] ; $j
4876   21C1 2A            mov b, [d]
4877   21C2             ; START TERMS
4878   21C2 D7            push a
4879   21C3 11            mov a, b
4880   21C4 26 FF FF      mov b, $ffff
4881   21C7 56            add b, a
4882   21C8 E4            pop a
4883   21C9             ; END TERMS
4884   21C9 E7            pop d
4885   21CA 5A            add d, b
4886   21CB E4            pop a
4887   21CC 32            mov bl, [d]
4888   21CD A7 00         mov bh, 0
4889   21CF             ; START RELATIONAL
4890   21CF D7            push a
4891   21D0 11            mov a, b
4892   21D1 26 40 00      mov b, $40
4893   21D4 B0            cmp a, b
4894   21D5 FD 71         seq ; ==
4895   21D7 E4            pop a
4896   21D8             ; END RELATIONAL
4897   21D8 C0 00 00      cmp b, 0
4898   21DB C6 EE 21      je _if71_exit
4899   21DE             _if71_true:
4900   21DE             ;; count++; 
4901   21DE FA FF FF      lea d, [bp + -1] ; $count
4902   21E1 2A            mov b, [d]
4903   21E2 D8            push b
4904   21E3 FD 77         inc b
4905   21E5 FA FF FF      lea d, [bp + -1] ; $count
4906   21E8 FD 43         mov [d], b
4907   21EA E5            pop b
4908   21EB 0A EE 21      jmp _if71_exit
4909   21EE             _if71_exit:
4910   21EE             ;; if(currState[i+1][j] == '@') 			count++; 
4911   21EE             _if72_cond:
4912   21EE 3B 77 27      mov d, _currState_data ; $currState
4913   21F1 D7            push a
4914   21F2 DA            push d
4915   21F3 FA 05 00      lea d, [bp + 5] ; $i
4916   21F6 2A            mov b, [d]
4917   21F7             ; START TERMS
4918   21F7 D7            push a
4919   21F8 11            mov a, b
4920   21F9 26 01 00      mov b, $1
4921   21FC 56            add b, a
4922   21FD E4            pop a
4923   21FE             ; END TERMS
4924   21FE E7            pop d
4925   21FF FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
4926   2203 DA            push d
4927   2204 FA 07 00      lea d, [bp + 7] ; $j
4928   2207 2A            mov b, [d]
4929   2208 E7            pop d
4930   2209 5A            add d, b
4931   220A E4            pop a
4932   220B 32            mov bl, [d]
4933   220C A7 00         mov bh, 0
4934   220E             ; START RELATIONAL
4935   220E D7            push a
4936   220F 11            mov a, b
4937   2210 26 40 00      mov b, $40
4938   2213 B0            cmp a, b
4939   2214 FD 71         seq ; ==
4940   2216 E4            pop a
4941   2217             ; END RELATIONAL
4942   2217 C0 00 00      cmp b, 0
4943   221A C6 2D 22      je _if72_exit
4944   221D             _if72_true:
4945   221D             ;; count++; 
4946   221D FA FF FF      lea d, [bp + -1] ; $count
4947   2220 2A            mov b, [d]
4948   2221 D8            push b
4949   2222 FD 77         inc b
4950   2224 FA FF FF      lea d, [bp + -1] ; $count
4951   2227 FD 43         mov [d], b
4952   2229 E5            pop b
4953   222A 0A 2D 22      jmp _if72_exit
4954   222D             _if72_exit:
4955   222D             ;; if(currState[i+1][j+1] == '@') 		count++; 
4956   222D             _if73_cond:
4957   222D 3B 77 27      mov d, _currState_data ; $currState
4958   2230 D7            push a
4959   2231 DA            push d
4960   2232 FA 05 00      lea d, [bp + 5] ; $i
4961   2235 2A            mov b, [d]
4962   2236             ; START TERMS
4963   2236 D7            push a
4964   2237 11            mov a, b
4965   2238 26 01 00      mov b, $1
4966   223B 56            add b, a
4967   223C E4            pop a
4968   223D             ; END TERMS
4969   223D E7            pop d
4970   223E FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
4971   2242 DA            push d
4972   2243 FA 07 00      lea d, [bp + 7] ; $j
4973   2246 2A            mov b, [d]
4974   2247             ; START TERMS
4975   2247 D7            push a
4976   2248 11            mov a, b
4977   2249 26 01 00      mov b, $1
4978   224C 56            add b, a
4979   224D E4            pop a
4980   224E             ; END TERMS
4981   224E E7            pop d
4982   224F 5A            add d, b
4983   2250 E4            pop a
4984   2251 32            mov bl, [d]
4985   2252 A7 00         mov bh, 0
4986   2254             ; START RELATIONAL
4987   2254 D7            push a
4988   2255 11            mov a, b
4989   2256 26 40 00      mov b, $40
4990   2259 B0            cmp a, b
4991   225A FD 71         seq ; ==
4992   225C E4            pop a
4993   225D             ; END RELATIONAL
4994   225D C0 00 00      cmp b, 0
4995   2260 C6 73 22      je _if73_exit
4996   2263             _if73_true:
4997   2263             ;; count++; 
4998   2263 FA FF FF      lea d, [bp + -1] ; $count
4999   2266 2A            mov b, [d]
5000   2267 D8            push b
5001   2268 FD 77         inc b
5002   226A FA FF FF      lea d, [bp + -1] ; $count
5003   226D FD 43         mov [d], b
5004   226F E5            pop b
5005   2270 0A 73 22      jmp _if73_exit
5006   2273             _if73_exit:
5007   2273             ;; return count; 
5008   2273 FA FF FF      lea d, [bp + -1] ; $count
5009   2276 2A            mov b, [d]
5010   2277 F9            leave
5011   2278 09            ret
5012   2279             ; --- END TEXT BLOCK
5013   2279             
5014   2279             ; --- BEGIN DATA BLOCK
5015   2279 41 42 43 44 _base64_table_data: .db "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 0
5015   227D 45 46 47 48 
5015   2281 49 4A 4B 4C 
5015   2285 4D 4E 4F 50 
5015   2289 51 52 53 54 
5015   228D 55 56 57 58 
5015   2291 59 5A 61 62 
5015   2295 63 64 65 66 
5015   2299 67 68 69 6A 
5015   229D 6B 6C 6D 6E 
5015   22A1 6F 70 71 72 
5015   22A5 73 74 75 76 
5015   22A9 77 78 79 7A 
5015   22AD 30 31 32 33 
5015   22B1 34 35 36 37 
5015   22B5 38 39 2B 2F 
5015   22B9 00 
5016   22BA 79 22       _base64_table: .dw _base64_table_data
5017   22BC             _clear_data: 
5018   22BC 1B 5B 32 4A .db 27,$5b,$32,$4a,27,$5b,$48,0,
5018   22C0 1B 5B 48 00 
5019   22C4 00 00 00    .fill 3, 0
5020   22C7 00 00 00 00 _nextState_data: .fill 1200, 0
5020   22CB 00 00 00 00 
5020   22CF 00 00 00 00 
5020   22D3 00 00 00 00 
5020   22D7 00 00 00 00 
5020   22DB 00 00 00 00 
5020   22DF 00 00 00 00 
5020   22E3 00 00 00 00 
5020   22E7 00 00 00 00 
5020   22EB 00 00 00 00 
5020   22EF 00 00 00 00 
5020   22F3 00 00 00 00 
5020   22F7 00 00 00 00 
5020   22FB 00 00 00 00 
5020   22FF 00 00 00 00 
5020   2303 00 00 00 00 
5020   2307 00 00 00 00 
5020   230B 00 00 00 00 
5020   230F 00 00 00 00 
5020   2313 00 00 00 00 
5020   2317 00 00 00 00 
5020   231B 00 00 00 00 
5020   231F 00 00 00 00 
5020   2323 00 00 00 00 
5020   2327 00 00 00 00 
5020   232B 00 00 00 00 
5020   232F 00 00 00 00 
5020   2333 00 00 00 00 
5020   2337 00 00 00 00 
5020   233B 00 00 00 00 
5020   233F 00 00 00 00 
5020   2343 00 00 00 00 
5020   2347 00 00 00 00 
5020   234B 00 00 00 00 
5020   234F 00 00 00 00 
5020   2353 00 00 00 00 
5020   2357 00 00 00 00 
5020   235B 00 00 00 00 
5020   235F 00 00 00 00 
5020   2363 00 00 00 00 
5020   2367 00 00 00 00 
5020   236B 00 00 00 00 
5020   236F 00 00 00 00 
5020   2373 00 00 00 00 
5020   2377 00 00 00 00 
5020   237B 00 00 00 00 
5020   237F 00 00 00 00 
5020   2383 00 00 00 00 
5020   2387 00 00 00 00 
5020   238B 00 00 00 00 
5020   238F 00 00 00 00 
5020   2393 00 00 00 00 
5020   2397 00 00 00 00 
5020   239B 00 00 00 00 
5020   239F 00 00 00 00 
5020   23A3 00 00 00 00 
5020   23A7 00 00 00 00 
5020   23AB 00 00 00 00 
5020   23AF 00 00 00 00 
5020   23B3 00 00 00 00 
5020   23B7 00 00 00 00 
5020   23BB 00 00 00 00 
5020   23BF 00 00 00 00 
5020   23C3 00 00 00 00 
5020   23C7 00 00 00 00 
5020   23CB 00 00 00 00 
5020   23CF 00 00 00 00 
5020   23D3 00 00 00 00 
5020   23D7 00 00 00 00 
5020   23DB 00 00 00 00 
5020   23DF 00 00 00 00 
5020   23E3 00 00 00 00 
5020   23E7 00 00 00 00 
5020   23EB 00 00 00 00 
5020   23EF 00 00 00 00 
5020   23F3 00 00 00 00 
5020   23F7 00 00 00 00 
5020   23FB 00 00 00 00 
5020   23FF 00 00 00 00 
5020   2403 00 00 00 00 
5020   2407 00 00 00 00 
5020   240B 00 00 00 00 
5020   240F 00 00 00 00 
5020   2413 00 00 00 00 
5020   2417 00 00 00 00 
5020   241B 00 00 00 00 
5020   241F 00 00 00 00 
5020   2423 00 00 00 00 
5020   2427 00 00 00 00 
5020   242B 00 00 00 00 
5020   242F 00 00 00 00 
5020   2433 00 00 00 00 
5020   2437 00 00 00 00 
5020   243B 00 00 00 00 
5020   243F 00 00 00 00 
5020   2443 00 00 00 00 
5020   2447 00 00 00 00 
5020   244B 00 00 00 00 
5020   244F 00 00 00 00 
5020   2453 00 00 00 00 
5020   2457 00 00 00 00 
5020   245B 00 00 00 00 
5020   245F 00 00 00 00 
5020   2463 00 00 00 00 
5020   2467 00 00 00 00 
5020   246B 00 00 00 00 
5020   246F 00 00 00 00 
5020   2473 00 00 00 00 
5020   2477 00 00 00 00 
5020   247B 00 00 00 00 
5020   247F 00 00 00 00 
5020   2483 00 00 00 00 
5020   2487 00 00 00 00 
5020   248B 00 00 00 00 
5020   248F 00 00 00 00 
5020   2493 00 00 00 00 
5020   2497 00 00 00 00 
5020   249B 00 00 00 00 
5020   249F 00 00 00 00 
5020   24A3 00 00 00 00 
5020   24A7 00 00 00 00 
5020   24AB 00 00 00 00 
5020   24AF 00 00 00 00 
5020   24B3 00 00 00 00 
5020   24B7 00 00 00 00 
5020   24BB 00 00 00 00 
5020   24BF 00 00 00 00 
5020   24C3 00 00 00 00 
5020   24C7 00 00 00 00 
5020   24CB 00 00 00 00 
5020   24CF 00 00 00 00 
5020   24D3 00 00 00 00 
5020   24D7 00 00 00 00 
5020   24DB 00 00 00 00 
5020   24DF 00 00 00 00 
5020   24E3 00 00 00 00 
5020   24E7 00 00 00 00 
5020   24EB 00 00 00 00 
5020   24EF 00 00 00 00 
5020   24F3 00 00 00 00 
5020   24F7 00 00 00 00 
5020   24FB 00 00 00 00 
5020   24FF 00 00 00 00 
5020   2503 00 00 00 00 
5020   2507 00 00 00 00 
5020   250B 00 00 00 00 
5020   250F 00 00 00 00 
5020   2513 00 00 00 00 
5020   2517 00 00 00 00 
5020   251B 00 00 00 00 
5020   251F 00 00 00 00 
5020   2523 00 00 00 00 
5020   2527 00 00 00 00 
5020   252B 00 00 00 00 
5020   252F 00 00 00 00 
5020   2533 00 00 00 00 
5020   2537 00 00 00 00 
5020   253B 00 00 00 00 
5020   253F 00 00 00 00 
5020   2543 00 00 00 00 
5020   2547 00 00 00 00 
5020   254B 00 00 00 00 
5020   254F 00 00 00 00 
5020   2553 00 00 00 00 
5020   2557 00 00 00 00 
5020   255B 00 00 00 00 
5020   255F 00 00 00 00 
5020   2563 00 00 00 00 
5020   2567 00 00 00 00 
5020   256B 00 00 00 00 
5020   256F 00 00 00 00 
5020   2573 00 00 00 00 
5020   2577 00 00 00 00 
5020   257B 00 00 00 00 
5020   257F 00 00 00 00 
5020   2583 00 00 00 00 
5020   2587 00 00 00 00 
5020   258B 00 00 00 00 
5020   258F 00 00 00 00 
5020   2593 00 00 00 00 
5020   2597 00 00 00 00 
5020   259B 00 00 00 00 
5020   259F 00 00 00 00 
5020   25A3 00 00 00 00 
5020   25A7 00 00 00 00 
5020   25AB 00 00 00 00 
5020   25AF 00 00 00 00 
5020   25B3 00 00 00 00 
5020   25B7 00 00 00 00 
5020   25BB 00 00 00 00 
5020   25BF 00 00 00 00 
5020   25C3 00 00 00 00 
5020   25C7 00 00 00 00 
5020   25CB 00 00 00 00 
5020   25CF 00 00 00 00 
5020   25D3 00 00 00 00 
5020   25D7 00 00 00 00 
5020   25DB 00 00 00 00 
5020   25DF 00 00 00 00 
5020   25E3 00 00 00 00 
5020   25E7 00 00 00 00 
5020   25EB 00 00 00 00 
5020   25EF 00 00 00 00 
5020   25F3 00 00 00 00 
5020   25F7 00 00 00 00 
5020   25FB 00 00 00 00 
5020   25FF 00 00 00 00 
5020   2603 00 00 00 00 
5020   2607 00 00 00 00 
5020   260B 00 00 00 00 
5020   260F 00 00 00 00 
5020   2613 00 00 00 00 
5020   2617 00 00 00 00 
5020   261B 00 00 00 00 
5020   261F 00 00 00 00 
5020   2623 00 00 00 00 
5020   2627 00 00 00 00 
5020   262B 00 00 00 00 
5020   262F 00 00 00 00 
5020   2633 00 00 00 00 
5020   2637 00 00 00 00 
5020   263B 00 00 00 00 
5020   263F 00 00 00 00 
5020   2643 00 00 00 00 
5020   2647 00 00 00 00 
5020   264B 00 00 00 00 
5020   264F 00 00 00 00 
5020   2653 00 00 00 00 
5020   2657 00 00 00 00 
5020   265B 00 00 00 00 
5020   265F 00 00 00 00 
5020   2663 00 00 00 00 
5020   2667 00 00 00 00 
5020   266B 00 00 00 00 
5020   266F 00 00 00 00 
5020   2673 00 00 00 00 
5020   2677 00 00 00 00 
5020   267B 00 00 00 00 
5020   267F 00 00 00 00 
5020   2683 00 00 00 00 
5020   2687 00 00 00 00 
5020   268B 00 00 00 00 
5020   268F 00 00 00 00 
5020   2693 00 00 00 00 
5020   2697 00 00 00 00 
5020   269B 00 00 00 00 
5020   269F 00 00 00 00 
5020   26A3 00 00 00 00 
5020   26A7 00 00 00 00 
5020   26AB 00 00 00 00 
5020   26AF 00 00 00 00 
5020   26B3 00 00 00 00 
5020   26B7 00 00 00 00 
5020   26BB 00 00 00 00 
5020   26BF 00 00 00 00 
5020   26C3 00 00 00 00 
5020   26C7 00 00 00 00 
5020   26CB 00 00 00 00 
5020   26CF 00 00 00 00 
5020   26D3 00 00 00 00 
5020   26D7 00 00 00 00 
5020   26DB 00 00 00 00 
5020   26DF 00 00 00 00 
5020   26E3 00 00 00 00 
5020   26E7 00 00 00 00 
5020   26EB 00 00 00 00 
5020   26EF 00 00 00 00 
5020   26F3 00 00 00 00 
5020   26F7 00 00 00 00 
5020   26FB 00 00 00 00 
5020   26FF 00 00 00 00 
5020   2703 00 00 00 00 
5020   2707 00 00 00 00 
5020   270B 00 00 00 00 
5020   270F 00 00 00 00 
5020   2713 00 00 00 00 
5020   2717 00 00 00 00 
5020   271B 00 00 00 00 
5020   271F 00 00 00 00 
5020   2723 00 00 00 00 
5020   2727 00 00 00 00 
5020   272B 00 00 00 00 
5020   272F 00 00 00 00 
5020   2733 00 00 00 00 
5020   2737 00 00 00 00 
5020   273B 00 00 00 00 
5020   273F 00 00 00 00 
5020   2743 00 00 00 00 
5020   2747 00 00 00 00 
5020   274B 00 00 00 00 
5020   274F 00 00 00 00 
5020   2753 00 00 00 00 
5020   2757 00 00 00 00 
5020   275B 00 00 00 00 
5020   275F 00 00 00 00 
5020   2763 00 00 00 00 
5020   2767 00 00 00 00 
5020   276B 00 00 00 00 
5020   276F 00 00 00 00 
5020   2773 00 00 00 00 
5021   2777             _currState_data: 
5022   2777 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5022   277B 20 20 20 20 
5022   277F 20 20 20 20 
5022   2783 20 20 20 20 
5022   2787 20 20 20 20 
5022   278B 20 20 20 20 
5022   278F 20 20 20 20 
5022   2793 20 20 
5023   2795 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5023   2799 20 20 20 20 
5023   279D 20 20 20 20 
5023   27A1 20 20 20 20 
5023   27A5 20 20 20 20 
5023   27A9 20 20 20 20 
5023   27AD 20 20 20 20 
5023   27B1 20 20 
5024   27B3 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5024   27B7 20 20 20 20 
5024   27BB 20 20 20 20 
5024   27BF 20 20 20 20 
5024   27C3 20 20 20 20 
5024   27C7 20 20 20 20 
5024   27CB 20 20 20 20 
5024   27CF 20 20 
5025   27D1 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5025   27D5 20 20 20 20 
5025   27D9 20 20 20 20 
5025   27DD 20 20 20 20 
5025   27E1 20 20 20 20 
5025   27E5 20 20 20 20 
5025   27E9 20 20 20 20 
5025   27ED 20 20 
5026   27EF 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,
5026   27F3 20 20 20 20 
5026   27F7 20 20 20 20 
5026   27FB 20 20 20 20 
5026   27FF 20 20 20 20 
5026   2803 20 20 20 20 
5026   2807 20 20 20 40 
5026   280B 20 20 
5027   280D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5027   2811 20 20 20 20 
5027   2815 20 20 20 20 
5027   2819 20 20 20 20 
5027   281D 20 20 20 20 
5027   2821 20 20 20 20 
5027   2825 20 20 20 20 
5027   2829 20 20 
5028   282B 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5028   282F 20 40 20 40 
5028   2833 20 20 20 20 
5028   2837 20 20 20 20 
5028   283B 20 20 20 20 
5028   283F 20 20 20 20 
5028   2843 20 20 20 20 
5028   2847 20 20 
5029   2849 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,
5029   284D 20 40 40 20 
5029   2851 20 20 20 20 
5029   2855 20 40 40 20 
5029   2859 20 20 20 20 
5029   285D 20 20 20 20 
5029   2861 20 20 20 40 
5029   2865 40 20 
5030   2867 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,
5030   286B 20 20 20 20 
5030   286F 20 20 20 20 
5030   2873 20 20 40 20 
5030   2877 20 20 40 20 
5030   287B 20 20 20 40 
5030   287F 40 20 20 20 
5030   2883 20 20 
5031   2885 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,
5031   2889 20 20 20 40 
5031   288D 40 20 20 20 
5031   2891 20 40 40 20 
5031   2895 20 20 20 20 
5031   2899 20 20 20 40 
5031   289D 20 20 20 20 
5031   28A1 20 40 
5032   28A3 20 20 20 40 .db $20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,
5032   28A7 40 20 20 20 
5032   28AB 20 20 20 20 
5032   28AF 20 20 20 20 
5032   28B3 20 20 20 20 
5032   28B7 20 20 20 40 
5032   28BB 40 20 20 20 
5032   28BF 20 20 
5033   28C1 20 20 20 40 .db $20,$20,$20,$40,$20,$20,$20,$40,$20,$40,$40,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5033   28C5 20 20 20 40 
5033   28C9 20 40 40 20 
5033   28CD 20 20 20 40 
5033   28D1 20 40 20 20 
5033   28D5 20 20 20 20 
5033   28D9 20 20 20 20 
5033   28DD 20 20 
5034   28DF 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,
5034   28E3 20 20 20 20 
5034   28E7 20 20 20 20 
5034   28EB 20 40 20 20 
5034   28EF 20 20 20 40 
5034   28F3 20 20 20 20 
5034   28F7 20 20 20 40 
5034   28FB 20 20 
5035   28FD 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$40,$20,
5035   2901 20 20 20 20 
5035   2905 20 20 20 20 
5035   2909 20 20 20 20 
5035   290D 20 20 20 20 
5035   2911 20 20 20 20 
5035   2915 40 20 20 20 
5035   2919 40 20 
5036   291B 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5036   291F 20 20 20 20 
5036   2923 20 20 20 20 
5036   2927 20 20 20 20 
5036   292B 20 20 20 20 
5036   292F 20 20 20 20 
5036   2933 20 20 20 20 
5036   2937 20 20 
5037   2939 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5037   293D 20 40 40 20 
5037   2941 20 20 20 20 
5037   2945 20 20 20 20 
5037   2949 20 20 20 20 
5037   294D 20 20 20 20 
5037   2951 20 20 20 20 
5037   2955 20 20 
5038   2957 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5038   295B 20 20 20 20 
5038   295F 20 20 20 20 
5038   2963 20 20 20 20 
5038   2967 20 20 20 20 
5038   296B 20 20 20 20 
5038   296F 20 20 20 20 
5038   2973 20 20 
5039   2975 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5039   2979 20 20 20 20 
5039   297D 20 20 20 20 
5039   2981 20 20 20 20 
5039   2985 20 20 20 20 
5039   2989 20 20 20 20 
5039   298D 20 20 20 20 
5039   2991 20 20 
5040   2993 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5040   2997 20 20 20 20 
5040   299B 20 20 20 20 
5040   299F 20 20 20 20 
5040   29A3 20 20 20 20 
5040   29A7 20 20 20 20 
5040   29AB 20 20 20 20 
5040   29AF 20 20 
5041   29B1 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5041   29B5 20 20 20 20 
5041   29B9 20 20 20 20 
5041   29BD 20 20 20 20 
5041   29C1 20 20 20 20 
5041   29C5 20 20 20 20 
5041   29C9 20 20 20 20 
5041   29CD 20 20 
5042   29CF 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5042   29D3 20 20 20 20 
5042   29D7 20 20 20 20 
5042   29DB 20 20 20 20 
5042   29DF 20 20 20 20 
5042   29E3 20 20 20 20 
5042   29E7 20 20 20 20 
5042   29EB 20 20 
5043   29ED 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5043   29F1 20 20 20 20 
5043   29F5 20 20 20 20 
5043   29F9 20 20 20 20 
5043   29FD 20 20 20 20 
5043   2A01 20 20 20 20 
5043   2A05 20 20 20 20 
5043   2A09 20 20 
5044   2A0B 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5044   2A0F 20 20 20 20 
5044   2A13 20 20 20 20 
5044   2A17 20 20 20 20 
5044   2A1B 20 20 20 20 
5044   2A1F 20 20 20 20 
5044   2A23 20 20 20 20 
5044   2A27 20 20 
5045   2A29 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5045   2A2D 20 20 20 20 
5045   2A31 20 20 20 20 
5045   2A35 20 20 20 20 
5045   2A39 20 20 20 20 
5045   2A3D 20 20 20 20 
5045   2A41 20 20 20 20 
5045   2A45 20 20 
5046   2A47 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5046   2A4B 20 20 20 20 
5046   2A4F 20 20 20 20 
5046   2A53 20 20 20 20 
5046   2A57 20 20 20 20 
5046   2A5B 20 20 20 20 
5046   2A5F 20 20 20 20 
5046   2A63 20 20 
5047   2A65 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5047   2A69 20 20 20 20 
5047   2A6D 20 20 20 20 
5047   2A71 20 20 20 20 
5047   2A75 20 20 20 20 
5047   2A79 20 20 20 20 
5047   2A7D 20 20 20 20 
5047   2A81 20 20 
5048   2A83 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5048   2A87 20 20 20 20 
5048   2A8B 20 20 20 20 
5048   2A8F 20 20 20 20 
5048   2A93 20 20 20 20 
5049   2A97 00 00 00 00 .fill 400, 0
5049   2A9B 00 00 00 00 
5049   2A9F 00 00 00 00 
5049   2AA3 00 00 00 00 
5049   2AA7 00 00 00 00 
5049   2AAB 00 00 00 00 
5049   2AAF 00 00 00 00 
5049   2AB3 00 00 00 00 
5049   2AB7 00 00 00 00 
5049   2ABB 00 00 00 00 
5049   2ABF 00 00 00 00 
5049   2AC3 00 00 00 00 
5049   2AC7 00 00 00 00 
5049   2ACB 00 00 00 00 
5049   2ACF 00 00 00 00 
5049   2AD3 00 00 00 00 
5049   2AD7 00 00 00 00 
5049   2ADB 00 00 00 00 
5049   2ADF 00 00 00 00 
5049   2AE3 00 00 00 00 
5049   2AE7 00 00 00 00 
5049   2AEB 00 00 00 00 
5049   2AEF 00 00 00 00 
5049   2AF3 00 00 00 00 
5049   2AF7 00 00 00 00 
5049   2AFB 00 00 00 00 
5049   2AFF 00 00 00 00 
5049   2B03 00 00 00 00 
5049   2B07 00 00 00 00 
5049   2B0B 00 00 00 00 
5049   2B0F 00 00 00 00 
5049   2B13 00 00 00 00 
5049   2B17 00 00 00 00 
5049   2B1B 00 00 00 00 
5049   2B1F 00 00 00 00 
5049   2B23 00 00 00 00 
5049   2B27 00 00 00 00 
5049   2B2B 00 00 00 00 
5049   2B2F 00 00 00 00 
5049   2B33 00 00 00 00 
5049   2B37 00 00 00 00 
5049   2B3B 00 00 00 00 
5049   2B3F 00 00 00 00 
5049   2B43 00 00 00 00 
5049   2B47 00 00 00 00 
5049   2B4B 00 00 00 00 
5049   2B4F 00 00 00 00 
5049   2B53 00 00 00 00 
5049   2B57 00 00 00 00 
5049   2B5B 00 00 00 00 
5049   2B5F 00 00 00 00 
5049   2B63 00 00 00 00 
5049   2B67 00 00 00 00 
5049   2B6B 00 00 00 00 
5049   2B6F 00 00 00 00 
5049   2B73 00 00 00 00 
5049   2B77 00 00 00 00 
5049   2B7B 00 00 00 00 
5049   2B7F 00 00 00 00 
5049   2B83 00 00 00 00 
5049   2B87 00 00 00 00 
5049   2B8B 00 00 00 00 
5049   2B8F 00 00 00 00 
5049   2B93 00 00 00 00 
5049   2B97 00 00 00 00 
5049   2B9B 00 00 00 00 
5049   2B9F 00 00 00 00 
5049   2BA3 00 00 00 00 
5049   2BA7 00 00 00 00 
5049   2BAB 00 00 00 00 
5049   2BAF 00 00 00 00 
5049   2BB3 00 00 00 00 
5049   2BB7 00 00 00 00 
5049   2BBB 00 00 00 00 
5049   2BBF 00 00 00 00 
5049   2BC3 00 00 00 00 
5049   2BC7 00 00 00 00 
5049   2BCB 00 00 00 00 
5049   2BCF 00 00 00 00 
5049   2BD3 00 00 00 00 
5049   2BD7 00 00 00 00 
5049   2BDB 00 00 00 00 
5049   2BDF 00 00 00 00 
5049   2BE3 00 00 00 00 
5049   2BE7 00 00 00 00 
5049   2BEB 00 00 00 00 
5049   2BEF 00 00 00 00 
5049   2BF3 00 00 00 00 
5049   2BF7 00 00 00 00 
5049   2BFB 00 00 00 00 
5049   2BFF 00 00 00 00 
5049   2C03 00 00 00 00 
5049   2C07 00 00 00 00 
5049   2C0B 00 00 00 00 
5049   2C0F 00 00 00 00 
5049   2C13 00 00 00 00 
5049   2C17 00 00 00 00 
5049   2C1B 00 00 00 00 
5049   2C1F 00 00 00 00 
5049   2C23 00 00 00 00 
5050   2C27 0A 0D 50 72 __s0: .db "\n\rPress CTRL+C to quit.\n\r", 0
5050   2C2B 65 73 73 20 
5050   2C2F 43 54 52 4C 
5050   2C33 2B 43 20 74 
5050   2C37 6F 20 71 75 
5050   2C3B 69 74 2E 0A 
5050   2C3F 0D 00 
5051   2C41 55 6E 65 78 __s1: .db "Unexpected format in printf.", 0
5051   2C45 70 65 63 74 
5051   2C49 65 64 20 66 
5051   2C4D 6F 72 6D 61 
5051   2C51 74 20 69 6E 
5051   2C55 20 70 72 69 
5051   2C59 6E 74 66 2E 
5051   2C5D 00 
5052   2C5E 45 72 72 6F __s2: .db "Error: Unknown argument type.\n", 0
5052   2C62 72 3A 20 55 
5052   2C66 6E 6B 6E 6F 
5052   2C6A 77 6E 20 61 
5052   2C6E 72 67 75 6D 
5052   2C72 65 6E 74 20 
5052   2C76 74 79 70 65 
5052   2C7A 2E 0A 00 
5053   2C7D 1B 5B 32 4A __s3: .db "\033[2J\033[H", 0
5053   2C81 1B 5B 48 00 
5054   2C85 40 20 00    __s4: .db "@ ", 0
5055   2C88 2E 20 00    __s5: .db ". ", 0
5056   2C8B             
5057   2C8B 8D 2C       _heap_top: .dw _heap
5058   2C8D 00          _heap: .db 0
5059   2C8E             ; --- END DATA BLOCK
5060   2C8E             
5061   2C8E             .end
tasm: Number of errors = 0
