0001   0000             ; --- FILENAME: programs/life
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $i 
0011   0408             ; $j 
0012   0408             ; $n 
0013   0408 52 06 00      sub sp, 6
0014   040B             ;; for(i = 0; i <   30     ; i++){ 
0015   040B             _for1_init:
0016   040B FA FF FF      lea d, [bp + -1] ; $i
0017   040E DA            push d
0018   040F 26 00 00      mov b, $0
0019   0412 E7            pop d
0020   0413 FD 43         mov [d], b
0021   0415             _for1_cond:
0022   0415 FA FF FF      lea d, [bp + -1] ; $i
0023   0418 2A            mov b, [d]
0024   0419             ; START RELATIONAL
0025   0419 D7            push a
0026   041A 11            mov a, b
0027   041B 26 1E 00      mov b, $1e
0028   041E B0            cmp a, b
0029   041F FD 73         slt ; < (signed)
0030   0421 E4            pop a
0031   0422             ; END RELATIONAL
0032   0422 C0 00 00      cmp b, 0
0033   0425 C6 98 04      je _for1_exit
0034   0428             _for1_block:
0035   0428             ;; for(j = 0; j <    40    ; j++){ 
0036   0428             _for2_init:
0037   0428 FA FD FF      lea d, [bp + -3] ; $j
0038   042B DA            push d
0039   042C 26 00 00      mov b, $0
0040   042F E7            pop d
0041   0430 FD 43         mov [d], b
0042   0432             _for2_cond:
0043   0432 FA FD FF      lea d, [bp + -3] ; $j
0044   0435 2A            mov b, [d]
0045   0436             ; START RELATIONAL
0046   0436 D7            push a
0047   0437 11            mov a, b
0048   0438 26 28 00      mov b, $28
0049   043B B0            cmp a, b
0050   043C FD 73         slt ; < (signed)
0051   043E E4            pop a
0052   043F             ; END RELATIONAL
0053   043F C0 00 00      cmp b, 0
0054   0442 C6 88 04      je _for2_exit
0055   0445             _for2_block:
0056   0445             ;; nextState[i][j] = currState[i][j]; 
0057   0445 3B 8C 1C      mov d, _nextState_data ; $nextState
0058   0448 D7            push a
0059   0449 DA            push d
0060   044A FA FF FF      lea d, [bp + -1] ; $i
0061   044D 2A            mov b, [d]
0062   044E E7            pop d
0063   044F FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0064   0453 DA            push d
0065   0454 FA FD FF      lea d, [bp + -3] ; $j
0066   0457 2A            mov b, [d]
0067   0458 E7            pop d
0068   0459 5A            add d, b
0069   045A E4            pop a
0070   045B DA            push d
0071   045C 3B 3C 21      mov d, _currState_data ; $currState
0072   045F D7            push a
0073   0460 DA            push d
0074   0461 FA FF FF      lea d, [bp + -1] ; $i
0075   0464 2A            mov b, [d]
0076   0465 E7            pop d
0077   0466 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0078   046A DA            push d
0079   046B FA FD FF      lea d, [bp + -3] ; $j
0080   046E 2A            mov b, [d]
0081   046F E7            pop d
0082   0470 5A            add d, b
0083   0471 E4            pop a
0084   0472 32            mov bl, [d]
0085   0473 A7 00         mov bh, 0
0086   0475 E7            pop d
0087   0476 FD 3E         mov [d], bl
0088   0478             _for2_update:
0089   0478 FA FD FF      lea d, [bp + -3] ; $j
0090   047B 2A            mov b, [d]
0091   047C D8            push b
0092   047D FD 77         inc b
0093   047F FA FD FF      lea d, [bp + -3] ; $j
0094   0482 FD 43         mov [d], b
0095   0484 E5            pop b
0096   0485 0A 32 04      jmp _for2_cond
0097   0488             _for2_exit:
0098   0488             _for1_update:
0099   0488 FA FF FF      lea d, [bp + -1] ; $i
0100   048B 2A            mov b, [d]
0101   048C D8            push b
0102   048D FD 77         inc b
0103   048F FA FF FF      lea d, [bp + -1] ; $i
0104   0492 FD 43         mov [d], b
0105   0494 E5            pop b
0106   0495 0A 15 04      jmp _for1_cond
0107   0498             _for1_exit:
0108   0498             ;; for(;;){ 
0109   0498             _for3_init:
0110   0498             _for3_cond:
0111   0498             _for3_block:
0112   0498             ;; for(i = 1; i <   30     +-1; i++){ 
0113   0498             _for4_init:
0114   0498 FA FF FF      lea d, [bp + -1] ; $i
0115   049B DA            push d
0116   049C 26 01 00      mov b, $1
0117   049F E7            pop d
0118   04A0 FD 43         mov [d], b
0119   04A2             _for4_cond:
0120   04A2 FA FF FF      lea d, [bp + -1] ; $i
0121   04A5 2A            mov b, [d]
0122   04A6             ; START RELATIONAL
0123   04A6 D7            push a
0124   04A7 11            mov a, b
0125   04A8 26 1E 00      mov b, $1e
0126   04AB             ; START TERMS
0127   04AB D7            push a
0128   04AC 11            mov a, b
0129   04AD 26 FF FF      mov b, $ffff
0130   04B0 56            add b, a
0131   04B1 E4            pop a
0132   04B2             ; END TERMS
0133   04B2 B0            cmp a, b
0134   04B3 FD 73         slt ; < (signed)
0135   04B5 E4            pop a
0136   04B6             ; END RELATIONAL
0137   04B6 C0 00 00      cmp b, 0
0138   04B9 C6 93 05      je _for4_exit
0139   04BC             _for4_block:
0140   04BC             ;; for(j = 1; j <    40    +-1; j++){ 
0141   04BC             _for5_init:
0142   04BC FA FD FF      lea d, [bp + -3] ; $j
0143   04BF DA            push d
0144   04C0 26 01 00      mov b, $1
0145   04C3 E7            pop d
0146   04C4 FD 43         mov [d], b
0147   04C6             _for5_cond:
0148   04C6 FA FD FF      lea d, [bp + -3] ; $j
0149   04C9 2A            mov b, [d]
0150   04CA             ; START RELATIONAL
0151   04CA D7            push a
0152   04CB 11            mov a, b
0153   04CC 26 28 00      mov b, $28
0154   04CF             ; START TERMS
0155   04CF D7            push a
0156   04D0 11            mov a, b
0157   04D1 26 FF FF      mov b, $ffff
0158   04D4 56            add b, a
0159   04D5 E4            pop a
0160   04D6             ; END TERMS
0161   04D6 B0            cmp a, b
0162   04D7 FD 73         slt ; < (signed)
0163   04D9 E4            pop a
0164   04DA             ; END RELATIONAL
0165   04DA C0 00 00      cmp b, 0
0166   04DD C6 83 05      je _for5_exit
0167   04E0             _for5_block:
0168   04E0             ;; n = neighbours(i, j); 
0169   04E0 FA FB FF      lea d, [bp + -5] ; $n
0170   04E3 DA            push d
0171   04E4 FA FD FF      lea d, [bp + -3] ; $j
0172   04E7 2A            mov b, [d]
0173   04E8 FD AB         swp b
0174   04EA D8            push b
0175   04EB FA FF FF      lea d, [bp + -1] ; $i
0176   04EE 2A            mov b, [d]
0177   04EF FD AB         swp b
0178   04F1 D8            push b
0179   04F2 07 57 1A      call neighbours
0180   04F5 51 04 00      add sp, 4
0181   04F8 E7            pop d
0182   04F9 FD 43         mov [d], b
0183   04FB             ;; if(n < 2 || n > 3) nextState[i][j] = ' '; 
0184   04FB             _if6_cond:
0185   04FB FA FB FF      lea d, [bp + -5] ; $n
0186   04FE 2A            mov b, [d]
0187   04FF             ; START RELATIONAL
0188   04FF D7            push a
0189   0500 11            mov a, b
0190   0501 26 02 00      mov b, $2
0191   0504 B0            cmp a, b
0192   0505 FD 73         slt ; < (signed)
0193   0507 E4            pop a
0194   0508             ; END RELATIONAL
0195   0508 D7            push a
0196   0509 11            mov a, b
0197   050A FA FB FF      lea d, [bp + -5] ; $n
0198   050D 2A            mov b, [d]
0199   050E             ; START RELATIONAL
0200   050E D7            push a
0201   050F 11            mov a, b
0202   0510 26 03 00      mov b, $3
0203   0513 B0            cmp a, b
0204   0514 FD 7F         sgt ; >
0205   0516 E4            pop a
0206   0517             ; END RELATIONAL
0207   0517 FD A8         sor a, b ; ||
0208   0519 E4            pop a
0209   051A C0 00 00      cmp b, 0
0210   051D C6 40 05      je _if6_else
0211   0520             _if6_true:
0212   0520             ;; nextState[i][j] = ' '; 
0213   0520 3B 8C 1C      mov d, _nextState_data ; $nextState
0214   0523 D7            push a
0215   0524 DA            push d
0216   0525 FA FF FF      lea d, [bp + -1] ; $i
0217   0528 2A            mov b, [d]
0218   0529 E7            pop d
0219   052A FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0220   052E DA            push d
0221   052F FA FD FF      lea d, [bp + -3] ; $j
0222   0532 2A            mov b, [d]
0223   0533 E7            pop d
0224   0534 5A            add d, b
0225   0535 E4            pop a
0226   0536 DA            push d
0227   0537 26 20 00      mov b, $20
0228   053A E7            pop d
0229   053B FD 3E         mov [d], bl
0230   053D 0A 73 05      jmp _if6_exit
0231   0540             _if6_else:
0232   0540             ;; if(n == 3) nextState[i][j] = '@'; 
0233   0540             _if7_cond:
0234   0540 FA FB FF      lea d, [bp + -5] ; $n
0235   0543 2A            mov b, [d]
0236   0544             ; START RELATIONAL
0237   0544 D7            push a
0238   0545 11            mov a, b
0239   0546 26 03 00      mov b, $3
0240   0549 B0            cmp a, b
0241   054A FD 71         seq ; ==
0242   054C E4            pop a
0243   054D             ; END RELATIONAL
0244   054D C0 00 00      cmp b, 0
0245   0550 C6 73 05      je _if7_exit
0246   0553             _if7_true:
0247   0553             ;; nextState[i][j] = '@'; 
0248   0553 3B 8C 1C      mov d, _nextState_data ; $nextState
0249   0556 D7            push a
0250   0557 DA            push d
0251   0558 FA FF FF      lea d, [bp + -1] ; $i
0252   055B 2A            mov b, [d]
0253   055C E7            pop d
0254   055D FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0255   0561 DA            push d
0256   0562 FA FD FF      lea d, [bp + -3] ; $j
0257   0565 2A            mov b, [d]
0258   0566 E7            pop d
0259   0567 5A            add d, b
0260   0568 E4            pop a
0261   0569 DA            push d
0262   056A 26 40 00      mov b, $40
0263   056D E7            pop d
0264   056E FD 3E         mov [d], bl
0265   0570 0A 73 05      jmp _if7_exit
0266   0573             _if7_exit:
0267   0573             _if6_exit:
0268   0573             _for5_update:
0269   0573 FA FD FF      lea d, [bp + -3] ; $j
0270   0576 2A            mov b, [d]
0271   0577 D8            push b
0272   0578 FD 77         inc b
0273   057A FA FD FF      lea d, [bp + -3] ; $j
0274   057D FD 43         mov [d], b
0275   057F E5            pop b
0276   0580 0A C6 04      jmp _for5_cond
0277   0583             _for5_exit:
0278   0583             _for4_update:
0279   0583 FA FF FF      lea d, [bp + -1] ; $i
0280   0586 2A            mov b, [d]
0281   0587 D8            push b
0282   0588 FD 77         inc b
0283   058A FA FF FF      lea d, [bp + -1] ; $i
0284   058D FD 43         mov [d], b
0285   058F E5            pop b
0286   0590 0A A2 04      jmp _for4_cond
0287   0593             _for4_exit:
0288   0593             ;; for(i = 1; i <   30     +-1; i++){ 
0289   0593             _for8_init:
0290   0593 FA FF FF      lea d, [bp + -1] ; $i
0291   0596 DA            push d
0292   0597 26 01 00      mov b, $1
0293   059A E7            pop d
0294   059B FD 43         mov [d], b
0295   059D             _for8_cond:
0296   059D FA FF FF      lea d, [bp + -1] ; $i
0297   05A0 2A            mov b, [d]
0298   05A1             ; START RELATIONAL
0299   05A1 D7            push a
0300   05A2 11            mov a, b
0301   05A3 26 1E 00      mov b, $1e
0302   05A6             ; START TERMS
0303   05A6 D7            push a
0304   05A7 11            mov a, b
0305   05A8 26 FF FF      mov b, $ffff
0306   05AB 56            add b, a
0307   05AC E4            pop a
0308   05AD             ; END TERMS
0309   05AD B0            cmp a, b
0310   05AE FD 73         slt ; < (signed)
0311   05B0 E4            pop a
0312   05B1             ; END RELATIONAL
0313   05B1 C0 00 00      cmp b, 0
0314   05B4 C6 2E 06      je _for8_exit
0315   05B7             _for8_block:
0316   05B7             ;; for(j = 1; j <    40    +-1; j++){ 
0317   05B7             _for9_init:
0318   05B7 FA FD FF      lea d, [bp + -3] ; $j
0319   05BA DA            push d
0320   05BB 26 01 00      mov b, $1
0321   05BE E7            pop d
0322   05BF FD 43         mov [d], b
0323   05C1             _for9_cond:
0324   05C1 FA FD FF      lea d, [bp + -3] ; $j
0325   05C4 2A            mov b, [d]
0326   05C5             ; START RELATIONAL
0327   05C5 D7            push a
0328   05C6 11            mov a, b
0329   05C7 26 28 00      mov b, $28
0330   05CA             ; START TERMS
0331   05CA D7            push a
0332   05CB 11            mov a, b
0333   05CC 26 FF FF      mov b, $ffff
0334   05CF 56            add b, a
0335   05D0 E4            pop a
0336   05D1             ; END TERMS
0337   05D1 B0            cmp a, b
0338   05D2 FD 73         slt ; < (signed)
0339   05D4 E4            pop a
0340   05D5             ; END RELATIONAL
0341   05D5 C0 00 00      cmp b, 0
0342   05D8 C6 1E 06      je _for9_exit
0343   05DB             _for9_block:
0344   05DB             ;; currState[i][j] = nextState[i][j]; 
0345   05DB 3B 3C 21      mov d, _currState_data ; $currState
0346   05DE D7            push a
0347   05DF DA            push d
0348   05E0 FA FF FF      lea d, [bp + -1] ; $i
0349   05E3 2A            mov b, [d]
0350   05E4 E7            pop d
0351   05E5 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0352   05E9 DA            push d
0353   05EA FA FD FF      lea d, [bp + -3] ; $j
0354   05ED 2A            mov b, [d]
0355   05EE E7            pop d
0356   05EF 5A            add d, b
0357   05F0 E4            pop a
0358   05F1 DA            push d
0359   05F2 3B 8C 1C      mov d, _nextState_data ; $nextState
0360   05F5 D7            push a
0361   05F6 DA            push d
0362   05F7 FA FF FF      lea d, [bp + -1] ; $i
0363   05FA 2A            mov b, [d]
0364   05FB E7            pop d
0365   05FC FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0366   0600 DA            push d
0367   0601 FA FD FF      lea d, [bp + -3] ; $j
0368   0604 2A            mov b, [d]
0369   0605 E7            pop d
0370   0606 5A            add d, b
0371   0607 E4            pop a
0372   0608 32            mov bl, [d]
0373   0609 A7 00         mov bh, 0
0374   060B E7            pop d
0375   060C FD 3E         mov [d], bl
0376   060E             _for9_update:
0377   060E FA FD FF      lea d, [bp + -3] ; $j
0378   0611 2A            mov b, [d]
0379   0612 D8            push b
0380   0613 FD 77         inc b
0381   0615 FA FD FF      lea d, [bp + -3] ; $j
0382   0618 FD 43         mov [d], b
0383   061A E5            pop b
0384   061B 0A C1 05      jmp _for9_cond
0385   061E             _for9_exit:
0386   061E             _for8_update:
0387   061E FA FF FF      lea d, [bp + -1] ; $i
0388   0621 2A            mov b, [d]
0389   0622 D8            push b
0390   0623 FD 77         inc b
0391   0625 FA FF FF      lea d, [bp + -1] ; $i
0392   0628 FD 43         mov [d], b
0393   062A E5            pop b
0394   062B 0A 9D 05      jmp _for8_cond
0395   062E             _for8_exit:
0396   062E             ;; printf(clear); 
0397   062E 3B 81 1C      mov d, _clear_data ; $clear
0398   0631 2D            mov b, d
0399   0632 FD AB         swp b
0400   0634 D8            push b
0401   0635 07 11 08      call printf
0402   0638 51 02 00      add sp, 2
0403   063B             ;; show(); 
0404   063B 07 6E 19      call show
0405   063E             ;; puts("\n\rPress CTRL+C to quit.\n\r"); 
0406   063E 26 EC 25      mov b, _s0 ; "\n\rPress CTRL+C to quit.\n\r"
0407   0641 FD AB         swp b
0408   0643 D8            push b
0409   0644 07 71 15      call puts
0410   0647 51 02 00      add sp, 2
0411   064A             _for3_update:
0412   064A 0A 98 04      jmp _for3_cond
0413   064D             _for3_exit:
0414   064D 05 0B         syscall sys_terminate_proc
0415   064F             
0416   064F             strcpy:
0417   064F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0418   0652             ; $psrc 
0419   0652             ; $pdest 
0420   0652 52 04 00      sub sp, 4
0421   0655             ;; psrc = src; 
0422   0655 FA FF FF      lea d, [bp + -1] ; $psrc
0423   0658 DA            push d
0424   0659 FA 07 00      lea d, [bp + 7] ; $src
0425   065C 2A            mov b, [d]
0426   065D E7            pop d
0427   065E FD 43         mov [d], b
0428   0660             ;; pdest = dest; 
0429   0660 FA FD FF      lea d, [bp + -3] ; $pdest
0430   0663 DA            push d
0431   0664 FA 05 00      lea d, [bp + 5] ; $dest
0432   0667 2A            mov b, [d]
0433   0668 E7            pop d
0434   0669 FD 43         mov [d], b
0435   066B             ;; while(*psrc) *pdest++ = *psrc++; 
0436   066B             _while10_cond:
0437   066B FA FF FF      lea d, [bp + -1] ; $psrc
0438   066E 2A            mov b, [d]
0439   066F 74            mov d, b
0440   0670 32            mov bl, [d]
0441   0671 A7 00         mov bh, 0
0442   0673 C0 00 00      cmp b, 0
0443   0676 C6 9E 06      je _while10_exit
0444   0679             _while10_block:
0445   0679             ;; *pdest++ = *psrc++; 
0446   0679 FA FD FF      lea d, [bp + -3] ; $pdest
0447   067C 2A            mov b, [d]
0448   067D D8            push b
0449   067E FD 77         inc b
0450   0680 FA FD FF      lea d, [bp + -3] ; $pdest
0451   0683 FD 43         mov [d], b
0452   0685 E5            pop b
0453   0686 D8            push b
0454   0687 FA FF FF      lea d, [bp + -1] ; $psrc
0455   068A 2A            mov b, [d]
0456   068B D8            push b
0457   068C FD 77         inc b
0458   068E FA FF FF      lea d, [bp + -1] ; $psrc
0459   0691 FD 43         mov [d], b
0460   0693 E5            pop b
0461   0694 74            mov d, b
0462   0695 32            mov bl, [d]
0463   0696 A7 00         mov bh, 0
0464   0698 E7            pop d
0465   0699 FD 3E         mov [d], bl
0466   069B 0A 6B 06      jmp _while10_cond
0467   069E             _while10_exit:
0468   069E             ;; *pdest = '\0'; 
0469   069E FA FD FF      lea d, [bp + -3] ; $pdest
0470   06A1 2A            mov b, [d]
0471   06A2 D8            push b
0472   06A3 26 00 00      mov b, $0
0473   06A6 E7            pop d
0474   06A7 FD 3E         mov [d], bl
0475   06A9 F9            leave
0476   06AA 09            ret
0477   06AB             
0478   06AB             strcmp:
0479   06AB F8 00 00      enter 0 ; (push bp; mov bp, sp)
0480   06AE             ;; while (*s1 && (*s1 == *s2)) { 
0481   06AE             _while11_cond:
0482   06AE FA 05 00      lea d, [bp + 5] ; $s1
0483   06B1 2A            mov b, [d]
0484   06B2 74            mov d, b
0485   06B3 32            mov bl, [d]
0486   06B4 A7 00         mov bh, 0
0487   06B6 D7            push a
0488   06B7 11            mov a, b
0489   06B8 FA 05 00      lea d, [bp + 5] ; $s1
0490   06BB 2A            mov b, [d]
0491   06BC 74            mov d, b
0492   06BD 32            mov bl, [d]
0493   06BE A7 00         mov bh, 0
0494   06C0             ; START RELATIONAL
0495   06C0 D7            push a
0496   06C1 11            mov a, b
0497   06C2 FA 07 00      lea d, [bp + 7] ; $s2
0498   06C5 2A            mov b, [d]
0499   06C6 74            mov d, b
0500   06C7 32            mov bl, [d]
0501   06C8 A7 00         mov bh, 0
0502   06CA B0            cmp a, b
0503   06CB FD 71         seq ; ==
0504   06CD E4            pop a
0505   06CE             ; END RELATIONAL
0506   06CE FD A7         sand a, b
0507   06D0 E4            pop a
0508   06D1 C0 00 00      cmp b, 0
0509   06D4 C6 F4 06      je _while11_exit
0510   06D7             _while11_block:
0511   06D7             ;; s1++; 
0512   06D7 FA 05 00      lea d, [bp + 5] ; $s1
0513   06DA 2A            mov b, [d]
0514   06DB D8            push b
0515   06DC FD 77         inc b
0516   06DE FA 05 00      lea d, [bp + 5] ; $s1
0517   06E1 FD 43         mov [d], b
0518   06E3 E5            pop b
0519   06E4             ;; s2++; 
0520   06E4 FA 07 00      lea d, [bp + 7] ; $s2
0521   06E7 2A            mov b, [d]
0522   06E8 D8            push b
0523   06E9 FD 77         inc b
0524   06EB FA 07 00      lea d, [bp + 7] ; $s2
0525   06EE FD 43         mov [d], b
0526   06F0 E5            pop b
0527   06F1 0A AE 06      jmp _while11_cond
0528   06F4             _while11_exit:
0529   06F4             ;; return *s1 - *s2; 
0530   06F4 FA 05 00      lea d, [bp + 5] ; $s1
0531   06F7 2A            mov b, [d]
0532   06F8 74            mov d, b
0533   06F9 32            mov bl, [d]
0534   06FA A7 00         mov bh, 0
0535   06FC             ; START TERMS
0536   06FC D7            push a
0537   06FD 11            mov a, b
0538   06FE FA 07 00      lea d, [bp + 7] ; $s2
0539   0701 2A            mov b, [d]
0540   0702 74            mov d, b
0541   0703 32            mov bl, [d]
0542   0704 A7 00         mov bh, 0
0543   0706 60            sub a, b
0544   0707 27            mov b, a
0545   0708 E4            pop a
0546   0709             ; END TERMS
0547   0709 F9            leave
0548   070A 09            ret
0549   070B             
0550   070B             strncmp:
0551   070B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0552   070E F9            leave
0553   070F 09            ret
0554   0710             
0555   0710             strcat:
0556   0710 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0557   0713             ; $dest_len 
0558   0713             ; $i 
0559   0713 52 04 00      sub sp, 4
0560   0716             ;; dest_len = strlen(dest); 
0561   0716 FA FF FF      lea d, [bp + -1] ; $dest_len
0562   0719 DA            push d
0563   071A FA 05 00      lea d, [bp + 5] ; $dest
0564   071D 2A            mov b, [d]
0565   071E FD AB         swp b
0566   0720 D8            push b
0567   0721 07 C3 07      call strlen
0568   0724 51 02 00      add sp, 2
0569   0727 E7            pop d
0570   0728 FD 43         mov [d], b
0571   072A             ;; for (i = 0; src[i] != 0; i=i+1) { 
0572   072A             _for12_init:
0573   072A FA FD FF      lea d, [bp + -3] ; $i
0574   072D DA            push d
0575   072E 26 00 00      mov b, $0
0576   0731 E7            pop d
0577   0732 FD 43         mov [d], b
0578   0734             _for12_cond:
0579   0734 FA 07 00      lea d, [bp + 7] ; $src
0580   0737 FD 2A         mov d, [d]
0581   0739 D7            push a
0582   073A DA            push d
0583   073B FA FD FF      lea d, [bp + -3] ; $i
0584   073E 2A            mov b, [d]
0585   073F E7            pop d
0586   0740 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0587   0744 E4            pop a
0588   0745 32            mov bl, [d]
0589   0746 A7 00         mov bh, 0
0590   0748             ; START RELATIONAL
0591   0748 D7            push a
0592   0749 11            mov a, b
0593   074A 26 00 00      mov b, $0
0594   074D B0            cmp a, b
0595   074E FD 72         sneq ; !=
0596   0750 E4            pop a
0597   0751             ; END RELATIONAL
0598   0751 C0 00 00      cmp b, 0
0599   0754 C6 9D 07      je _for12_exit
0600   0757             _for12_block:
0601   0757             ;; dest[dest_len + i] = src[i]; 
0602   0757 FA 05 00      lea d, [bp + 5] ; $dest
0603   075A FD 2A         mov d, [d]
0604   075C D7            push a
0605   075D DA            push d
0606   075E FA FF FF      lea d, [bp + -1] ; $dest_len
0607   0761 2A            mov b, [d]
0608   0762             ; START TERMS
0609   0762 D7            push a
0610   0763 11            mov a, b
0611   0764 FA FD FF      lea d, [bp + -3] ; $i
0612   0767 2A            mov b, [d]
0613   0768 56            add b, a
0614   0769 E4            pop a
0615   076A             ; END TERMS
0616   076A E7            pop d
0617   076B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0618   076F E4            pop a
0619   0770 DA            push d
0620   0771 FA 07 00      lea d, [bp + 7] ; $src
0621   0774 FD 2A         mov d, [d]
0622   0776 D7            push a
0623   0777 DA            push d
0624   0778 FA FD FF      lea d, [bp + -3] ; $i
0625   077B 2A            mov b, [d]
0626   077C E7            pop d
0627   077D FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0628   0781 E4            pop a
0629   0782 32            mov bl, [d]
0630   0783 A7 00         mov bh, 0
0631   0785 E7            pop d
0632   0786 FD 3E         mov [d], bl
0633   0788             _for12_update:
0634   0788 FA FD FF      lea d, [bp + -3] ; $i
0635   078B DA            push d
0636   078C FA FD FF      lea d, [bp + -3] ; $i
0637   078F 2A            mov b, [d]
0638   0790             ; START TERMS
0639   0790 D7            push a
0640   0791 11            mov a, b
0641   0792 26 01 00      mov b, $1
0642   0795 56            add b, a
0643   0796 E4            pop a
0644   0797             ; END TERMS
0645   0797 E7            pop d
0646   0798 FD 43         mov [d], b
0647   079A 0A 34 07      jmp _for12_cond
0648   079D             _for12_exit:
0649   079D             ;; dest[dest_len + i] = 0; 
0650   079D FA 05 00      lea d, [bp + 5] ; $dest
0651   07A0 FD 2A         mov d, [d]
0652   07A2 D7            push a
0653   07A3 DA            push d
0654   07A4 FA FF FF      lea d, [bp + -1] ; $dest_len
0655   07A7 2A            mov b, [d]
0656   07A8             ; START TERMS
0657   07A8 D7            push a
0658   07A9 11            mov a, b
0659   07AA FA FD FF      lea d, [bp + -3] ; $i
0660   07AD 2A            mov b, [d]
0661   07AE 56            add b, a
0662   07AF E4            pop a
0663   07B0             ; END TERMS
0664   07B0 E7            pop d
0665   07B1 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0666   07B5 E4            pop a
0667   07B6 DA            push d
0668   07B7 26 00 00      mov b, $0
0669   07BA E7            pop d
0670   07BB FD 3E         mov [d], bl
0671   07BD             ;; return dest; 
0672   07BD FA 05 00      lea d, [bp + 5] ; $dest
0673   07C0 2A            mov b, [d]
0674   07C1 F9            leave
0675   07C2 09            ret
0676   07C3             
0677   07C3             strlen:
0678   07C3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0679   07C6             ; $length 
0680   07C6 52 02 00      sub sp, 2
0681   07C9             ;; length = 0; 
0682   07C9 FA FF FF      lea d, [bp + -1] ; $length
0683   07CC DA            push d
0684   07CD 26 00 00      mov b, $0
0685   07D0 E7            pop d
0686   07D1 FD 43         mov [d], b
0687   07D3             ;; while (str[length] != 0) { 
0688   07D3             _while13_cond:
0689   07D3 FA 05 00      lea d, [bp + 5] ; $str
0690   07D6 FD 2A         mov d, [d]
0691   07D8 D7            push a
0692   07D9 DA            push d
0693   07DA FA FF FF      lea d, [bp + -1] ; $length
0694   07DD 2A            mov b, [d]
0695   07DE E7            pop d
0696   07DF FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0697   07E3 E4            pop a
0698   07E4 32            mov bl, [d]
0699   07E5 A7 00         mov bh, 0
0700   07E7             ; START RELATIONAL
0701   07E7 D7            push a
0702   07E8 11            mov a, b
0703   07E9 26 00 00      mov b, $0
0704   07EC B0            cmp a, b
0705   07ED FD 72         sneq ; !=
0706   07EF E4            pop a
0707   07F0             ; END RELATIONAL
0708   07F0 C0 00 00      cmp b, 0
0709   07F3 C6 06 08      je _while13_exit
0710   07F6             _while13_block:
0711   07F6             ;; length++; 
0712   07F6 FA FF FF      lea d, [bp + -1] ; $length
0713   07F9 2A            mov b, [d]
0714   07FA D8            push b
0715   07FB FD 77         inc b
0716   07FD FA FF FF      lea d, [bp + -1] ; $length
0717   0800 FD 43         mov [d], b
0718   0802 E5            pop b
0719   0803 0A D3 07      jmp _while13_cond
0720   0806             _while13_exit:
0721   0806             ;; return length; 
0722   0806 FA FF FF      lea d, [bp + -1] ; $length
0723   0809 2A            mov b, [d]
0724   080A F9            leave
0725   080B 09            ret
0726   080C             
0727   080C             fopen:
0728   080C F8 00 00      enter 0 ; (push bp; mov bp, sp)
0729   080F F9            leave
0730   0810 09            ret
0731   0811             
0732   0811             printf:
0733   0811 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0734   0814             ; $p 
0735   0814             ; $format_p 
0736   0814 52 04 00      sub sp, 4
0737   0817             ;; format_p = format; 
0738   0817 FA FD FF      lea d, [bp + -3] ; $format_p
0739   081A DA            push d
0740   081B FA 05 00      lea d, [bp + 5] ; $format
0741   081E 2A            mov b, [d]
0742   081F E7            pop d
0743   0820 FD 43         mov [d], b
0744   0822             ;; p = &format + 2; 
0745   0822 FA FF FF      lea d, [bp + -1] ; $p
0746   0825 DA            push d
0747   0826 FA 05 00      lea d, [bp + 5] ; $format
0748   0829 2D            mov b, d
0749   082A             ; START TERMS
0750   082A D7            push a
0751   082B 11            mov a, b
0752   082C 26 02 00      mov b, $2
0753   082F 56            add b, a
0754   0830 E4            pop a
0755   0831             ; END TERMS
0756   0831 E7            pop d
0757   0832 FD 43         mov [d], b
0758   0834             ;; for(;;){ 
0759   0834             _for14_init:
0760   0834             _for14_cond:
0761   0834             _for14_block:
0762   0834             ;; if(!*format_p) break; 
0763   0834             _if15_cond:
0764   0834 FA FD FF      lea d, [bp + -3] ; $format_p
0765   0837 2A            mov b, [d]
0766   0838 74            mov d, b
0767   0839 32            mov bl, [d]
0768   083A A7 00         mov bh, 0
0769   083C C0 00 00      cmp b, 0
0770   083F FD 71         seq ; !
0771   0841 C0 00 00      cmp b, 0
0772   0844 C6 4D 08      je _if15_else
0773   0847             _if15_true:
0774   0847             ;; break; 
0775   0847 0A 74 0A      jmp _for14_exit ; for break
0776   084A 0A 71 0A      jmp _if15_exit
0777   084D             _if15_else:
0778   084D             ;; if(*format_p == '%'){ 
0779   084D             _if16_cond:
0780   084D FA FD FF      lea d, [bp + -3] ; $format_p
0781   0850 2A            mov b, [d]
0782   0851 74            mov d, b
0783   0852 32            mov bl, [d]
0784   0853 A7 00         mov bh, 0
0785   0855             ; START RELATIONAL
0786   0855 D7            push a
0787   0856 11            mov a, b
0788   0857 26 25 00      mov b, $25
0789   085A B0            cmp a, b
0790   085B FD 71         seq ; ==
0791   085D E4            pop a
0792   085E             ; END RELATIONAL
0793   085E C0 00 00      cmp b, 0
0794   0861 C6 55 0A      je _if16_else
0795   0864             _if16_true:
0796   0864             ;; format_p++; 
0797   0864 FA FD FF      lea d, [bp + -3] ; $format_p
0798   0867 2A            mov b, [d]
0799   0868 D8            push b
0800   0869 FD 77         inc b
0801   086B FA FD FF      lea d, [bp + -3] ; $format_p
0802   086E FD 43         mov [d], b
0803   0870 E5            pop b
0804   0871             ;; switch(*format_p){ 
0805   0871             _switch17_expr:
0806   0871 FA FD FF      lea d, [bp + -3] ; $format_p
0807   0874 2A            mov b, [d]
0808   0875 74            mov d, b
0809   0876 32            mov bl, [d]
0810   0877 A7 00         mov bh, 0
0811   0879             _switch17_comparisons:
0812   0879 C1 6C         cmp bl, $6c
0813   087B C6 A7 08      je _switch17_case0
0814   087E C1 4C         cmp bl, $4c
0815   0880 C6 A7 08      je _switch17_case1
0816   0883 C1 64         cmp bl, $64
0817   0885 C6 95 09      je _switch17_case2
0818   0888 C1 69         cmp bl, $69
0819   088A C6 95 09      je _switch17_case3
0820   088D C1 75         cmp bl, $75
0821   088F C6 B9 09      je _switch17_case4
0822   0892 C1 78         cmp bl, $78
0823   0894 C6 DD 09      je _switch17_case5
0824   0897 C1 63         cmp bl, $63
0825   0899 C6 FB 09      je _switch17_case6
0826   089C C1 73         cmp bl, $73
0827   089E C6 1A 0A      je _switch17_case7
0828   08A1 0A 39 0A      jmp _switch17_default
0829   08A4 0A 45 0A      jmp _switch17_exit
0830   08A7             _switch17_case0:
0831   08A7             _switch17_case1:
0832   08A7             ;; format_p++; 
0833   08A7 FA FD FF      lea d, [bp + -3] ; $format_p
0834   08AA 2A            mov b, [d]
0835   08AB D8            push b
0836   08AC FD 77         inc b
0837   08AE FA FD FF      lea d, [bp + -3] ; $format_p
0838   08B1 FD 43         mov [d], b
0839   08B3 E5            pop b
0840   08B4             ;; if(*format_p == 'd' || *format_p == 'i') 
0841   08B4             _if18_cond:
0842   08B4 FA FD FF      lea d, [bp + -3] ; $format_p
0843   08B7 2A            mov b, [d]
0844   08B8 74            mov d, b
0845   08B9 32            mov bl, [d]
0846   08BA A7 00         mov bh, 0
0847   08BC             ; START RELATIONAL
0848   08BC D7            push a
0849   08BD 11            mov a, b
0850   08BE 26 64 00      mov b, $64
0851   08C1 B0            cmp a, b
0852   08C2 FD 71         seq ; ==
0853   08C4 E4            pop a
0854   08C5             ; END RELATIONAL
0855   08C5 D7            push a
0856   08C6 11            mov a, b
0857   08C7 FA FD FF      lea d, [bp + -3] ; $format_p
0858   08CA 2A            mov b, [d]
0859   08CB 74            mov d, b
0860   08CC 32            mov bl, [d]
0861   08CD A7 00         mov bh, 0
0862   08CF             ; START RELATIONAL
0863   08CF D7            push a
0864   08D0 11            mov a, b
0865   08D1 26 69 00      mov b, $69
0866   08D4 B0            cmp a, b
0867   08D5 FD 71         seq ; ==
0868   08D7 E4            pop a
0869   08D8             ; END RELATIONAL
0870   08D8 FD A8         sor a, b ; ||
0871   08DA E4            pop a
0872   08DB C0 00 00      cmp b, 0
0873   08DE C6 03 09      je _if18_else
0874   08E1             _if18_true:
0875   08E1             ;; print_signed_long(*(long *)p); 
0876   08E1 FA FF FF      lea d, [bp + -1] ; $p
0877   08E4 2A            mov b, [d]
0878   08E5 AB            snex b
0879   08E6 FD 39         mov c, b
0880   08E8 74            mov d, b
0881   08E9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0882   08EC FD 39         mov c, b ; And place it into C
0883   08EE 2A            mov b, [d] ; Lower Word in B
0884   08EF FD 79         mov g, b
0885   08F1 28            mov b, c
0886   08F2 FD AB         swp b
0887   08F4 D8            push b
0888   08F5 FD 27         mov b, g
0889   08F7 FD AB         swp b
0890   08F9 D8            push b
0891   08FA 07 3A 0F      call print_signed_long
0892   08FD 51 04 00      add sp, 4
0893   0900 0A 80 09      jmp _if18_exit
0894   0903             _if18_else:
0895   0903             ;; if(*format_p == 'u') 
0896   0903             _if19_cond:
0897   0903 FA FD FF      lea d, [bp + -3] ; $format_p
0898   0906 2A            mov b, [d]
0899   0907 74            mov d, b
0900   0908 32            mov bl, [d]
0901   0909 A7 00         mov bh, 0
0902   090B             ; START RELATIONAL
0903   090B D7            push a
0904   090C 11            mov a, b
0905   090D 26 75 00      mov b, $75
0906   0910 B0            cmp a, b
0907   0911 FD 71         seq ; ==
0908   0913 E4            pop a
0909   0914             ; END RELATIONAL
0910   0914 C0 00 00      cmp b, 0
0911   0917 C6 3E 09      je _if19_else
0912   091A             _if19_true:
0913   091A             ;; print_unsigned_long(*(unsigned long *)p); 
0914   091A FA FF FF      lea d, [bp + -1] ; $p
0915   091D 2A            mov b, [d]
0916   091E A7 00         mov bh, 0
0917   0920 38 00 00      mov c, 0
0918   0923 74            mov d, b
0919   0924 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0920   0927 FD 39         mov c, b ; And place it into C
0921   0929 2A            mov b, [d] ; Lower Word in B
0922   092A FD 79         mov g, b
0923   092C 28            mov b, c
0924   092D FD AB         swp b
0925   092F D8            push b
0926   0930 FD 27         mov b, g
0927   0932 FD AB         swp b
0928   0934 D8            push b
0929   0935 07 73 12      call print_unsigned_long
0930   0938 51 04 00      add sp, 4
0931   093B 0A 80 09      jmp _if19_exit
0932   093E             _if19_else:
0933   093E             ;; if(*format_p == 'x') 
0934   093E             _if20_cond:
0935   093E FA FD FF      lea d, [bp + -3] ; $format_p
0936   0941 2A            mov b, [d]
0937   0942 74            mov d, b
0938   0943 32            mov bl, [d]
0939   0944 A7 00         mov bh, 0
0940   0946             ; START RELATIONAL
0941   0946 D7            push a
0942   0947 11            mov a, b
0943   0948 26 78 00      mov b, $78
0944   094B B0            cmp a, b
0945   094C FD 71         seq ; ==
0946   094E E4            pop a
0947   094F             ; END RELATIONAL
0948   094F C0 00 00      cmp b, 0
0949   0952 C6 74 09      je _if20_else
0950   0955             _if20_true:
0951   0955             ;; printx32(*(long int *)p); 
0952   0955 FA FF FF      lea d, [bp + -1] ; $p
0953   0958 2A            mov b, [d]
0954   0959 74            mov d, b
0955   095A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0956   095D FD 39         mov c, b ; And place it into C
0957   095F 2A            mov b, [d] ; Lower Word in B
0958   0960 FD 79         mov g, b
0959   0962 28            mov b, c
0960   0963 FD AB         swp b
0961   0965 D8            push b
0962   0966 FD 27         mov b, g
0963   0968 FD AB         swp b
0964   096A D8            push b
0965   096B 07 C3 0C      call printx32
0966   096E 51 04 00      add sp, 4
0967   0971 0A 80 09      jmp _if20_exit
0968   0974             _if20_else:
0969   0974             ;; err("Unexpected format in printf."); 
0970   0974 26 06 26      mov b, _s1 ; "Unexpected format in printf."
0971   0977 FD AB         swp b
0972   0979 D8            push b
0973   097A 07 B1 0C      call err
0974   097D 51 02 00      add sp, 2
0975   0980             _if20_exit:
0976   0980             _if19_exit:
0977   0980             _if18_exit:
0978   0980             ;; p = p + 4; 
0979   0980 FA FF FF      lea d, [bp + -1] ; $p
0980   0983 DA            push d
0981   0984 FA FF FF      lea d, [bp + -1] ; $p
0982   0987 2A            mov b, [d]
0983   0988             ; START TERMS
0984   0988 D7            push a
0985   0989 11            mov a, b
0986   098A 26 04 00      mov b, $4
0987   098D 56            add b, a
0988   098E E4            pop a
0989   098F             ; END TERMS
0990   098F E7            pop d
0991   0990 FD 43         mov [d], b
0992   0992             ;; break; 
0993   0992 0A 45 0A      jmp _switch17_exit ; case break
0994   0995             _switch17_case2:
0995   0995             _switch17_case3:
0996   0995             ;; print_signed(*(int*)p); 
0997   0995 FA FF FF      lea d, [bp + -1] ; $p
0998   0998 2A            mov b, [d]
0999   0999 74            mov d, b
1000   099A 2A            mov b, [d]
1001   099B FD AB         swp b
1002   099D D8            push b
1003   099E 07 4A 0E      call print_signed
1004   09A1 51 02 00      add sp, 2
1005   09A4             ;; p = p + 2; 
1006   09A4 FA FF FF      lea d, [bp + -1] ; $p
1007   09A7 DA            push d
1008   09A8 FA FF FF      lea d, [bp + -1] ; $p
1009   09AB 2A            mov b, [d]
1010   09AC             ; START TERMS
1011   09AC D7            push a
1012   09AD 11            mov a, b
1013   09AE 26 02 00      mov b, $2
1014   09B1 56            add b, a
1015   09B2 E4            pop a
1016   09B3             ; END TERMS
1017   09B3 E7            pop d
1018   09B4 FD 43         mov [d], b
1019   09B6             ;; break; 
1020   09B6 0A 45 0A      jmp _switch17_exit ; case break
1021   09B9             _switch17_case4:
1022   09B9             ;; print_unsigned(*(unsigned int*)p); 
1023   09B9 FA FF FF      lea d, [bp + -1] ; $p
1024   09BC 2A            mov b, [d]
1025   09BD 74            mov d, b
1026   09BE 2A            mov b, [d]
1027   09BF FD AB         swp b
1028   09C1 D8            push b
1029   09C2 07 6B 14      call print_unsigned
1030   09C5 51 02 00      add sp, 2
1031   09C8             ;; p = p + 2; 
1032   09C8 FA FF FF      lea d, [bp + -1] ; $p
1033   09CB DA            push d
1034   09CC FA FF FF      lea d, [bp + -1] ; $p
1035   09CF 2A            mov b, [d]
1036   09D0             ; START TERMS
1037   09D0 D7            push a
1038   09D1 11            mov a, b
1039   09D2 26 02 00      mov b, $2
1040   09D5 56            add b, a
1041   09D6 E4            pop a
1042   09D7             ; END TERMS
1043   09D7 E7            pop d
1044   09D8 FD 43         mov [d], b
1045   09DA             ;; break; 
1046   09DA 0A 45 0A      jmp _switch17_exit ; case break
1047   09DD             _switch17_case5:
1048   09DD             
1049   09DD             ; --- BEGIN INLINE ASM BLOCK
1050   09DD FA FF FF      lea d, [bp + -1] ; $p
1051   09E0 FD 2A         mov d, [d]
1052   09E2 2A            mov b, [d]
1053   09E3 07 6E 18      call print_u16x
1054   09E6             ; --- END INLINE ASM BLOCK
1055   09E6             
1056   09E6             ;; p = p + 2; 
1057   09E6 FA FF FF      lea d, [bp + -1] ; $p
1058   09E9 DA            push d
1059   09EA FA FF FF      lea d, [bp + -1] ; $p
1060   09ED 2A            mov b, [d]
1061   09EE             ; START TERMS
1062   09EE D7            push a
1063   09EF 11            mov a, b
1064   09F0 26 02 00      mov b, $2
1065   09F3 56            add b, a
1066   09F4 E4            pop a
1067   09F5             ; END TERMS
1068   09F5 E7            pop d
1069   09F6 FD 43         mov [d], b
1070   09F8             ;; break; 
1071   09F8 0A 45 0A      jmp _switch17_exit ; case break
1072   09FB             _switch17_case6:
1073   09FB             
1074   09FB             ; --- BEGIN INLINE ASM BLOCK
1075   09FB FA FF FF      lea d, [bp + -1] ; $p
1076   09FE FD 2A         mov d, [d]
1077   0A00 1E            mov al, [d]
1078   0A01 23            mov ah, al
1079   0A02 07 CC 16      call _putchar
1080   0A05             ; --- END INLINE ASM BLOCK
1081   0A05             
1082   0A05             ;; p = p + 2; 
1083   0A05 FA FF FF      lea d, [bp + -1] ; $p
1084   0A08 DA            push d
1085   0A09 FA FF FF      lea d, [bp + -1] ; $p
1086   0A0C 2A            mov b, [d]
1087   0A0D             ; START TERMS
1088   0A0D D7            push a
1089   0A0E 11            mov a, b
1090   0A0F 26 02 00      mov b, $2
1091   0A12 56            add b, a
1092   0A13 E4            pop a
1093   0A14             ; END TERMS
1094   0A14 E7            pop d
1095   0A15 FD 43         mov [d], b
1096   0A17             ;; break; 
1097   0A17 0A 45 0A      jmp _switch17_exit ; case break
1098   0A1A             _switch17_case7:
1099   0A1A             
1100   0A1A             ; --- BEGIN INLINE ASM BLOCK
1101   0A1A FA FF FF      lea d, [bp + -1] ; $p
1102   0A1D FD 2A         mov d, [d]
1103   0A1F FD 2A         mov d, [d]
1104   0A21 07 16 18      call _puts
1105   0A24             ; --- END INLINE ASM BLOCK
1106   0A24             
1107   0A24             ;; p = p + 2; 
1108   0A24 FA FF FF      lea d, [bp + -1] ; $p
1109   0A27 DA            push d
1110   0A28 FA FF FF      lea d, [bp + -1] ; $p
1111   0A2B 2A            mov b, [d]
1112   0A2C             ; START TERMS
1113   0A2C D7            push a
1114   0A2D 11            mov a, b
1115   0A2E 26 02 00      mov b, $2
1116   0A31 56            add b, a
1117   0A32 E4            pop a
1118   0A33             ; END TERMS
1119   0A33 E7            pop d
1120   0A34 FD 43         mov [d], b
1121   0A36             ;; break; 
1122   0A36 0A 45 0A      jmp _switch17_exit ; case break
1123   0A39             _switch17_default:
1124   0A39             ;; print("Error: Unknown argument type.\n"); 
1125   0A39 26 23 26      mov b, _s2 ; "Error: Unknown argument type.\n"
1126   0A3C FD AB         swp b
1127   0A3E D8            push b
1128   0A3F 07 83 15      call print
1129   0A42 51 02 00      add sp, 2
1130   0A45             _switch17_exit:
1131   0A45             ;; format_p++; 
1132   0A45 FA FD FF      lea d, [bp + -3] ; $format_p
1133   0A48 2A            mov b, [d]
1134   0A49 D8            push b
1135   0A4A FD 77         inc b
1136   0A4C FA FD FF      lea d, [bp + -3] ; $format_p
1137   0A4F FD 43         mov [d], b
1138   0A51 E5            pop b
1139   0A52 0A 71 0A      jmp _if16_exit
1140   0A55             _if16_else:
1141   0A55             ;; putchar(*format_p); 
1142   0A55 FA FD FF      lea d, [bp + -3] ; $format_p
1143   0A58 2A            mov b, [d]
1144   0A59 74            mov d, b
1145   0A5A 32            mov bl, [d]
1146   0A5B A7 00         mov bh, 0
1147   0A5D DD            push bl
1148   0A5E 07 3B 15      call putchar
1149   0A61 51 01 00      add sp, 1
1150   0A64             ;; format_p++; 
1151   0A64 FA FD FF      lea d, [bp + -3] ; $format_p
1152   0A67 2A            mov b, [d]
1153   0A68 D8            push b
1154   0A69 FD 77         inc b
1155   0A6B FA FD FF      lea d, [bp + -3] ; $format_p
1156   0A6E FD 43         mov [d], b
1157   0A70 E5            pop b
1158   0A71             _if16_exit:
1159   0A71             _if15_exit:
1160   0A71             _for14_update:
1161   0A71 0A 34 08      jmp _for14_cond
1162   0A74             _for14_exit:
1163   0A74 F9            leave
1164   0A75 09            ret
1165   0A76             
1166   0A76             scanf:
1167   0A76 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1168   0A79             ; $p 
1169   0A79             ; $format_p 
1170   0A79             ; $c 
1171   0A79             ; $i 
1172   0A79             ; $input_string 
1173   0A79 52 07 02      sub sp, 519
1174   0A7C             ;; format_p = format; 
1175   0A7C FA FD FF      lea d, [bp + -3] ; $format_p
1176   0A7F DA            push d
1177   0A80 FA 05 00      lea d, [bp + 5] ; $format
1178   0A83 2A            mov b, [d]
1179   0A84 E7            pop d
1180   0A85 FD 43         mov [d], b
1181   0A87             ;; p = &format + 2; 
1182   0A87 FA FF FF      lea d, [bp + -1] ; $p
1183   0A8A DA            push d
1184   0A8B FA 05 00      lea d, [bp + 5] ; $format
1185   0A8E 2D            mov b, d
1186   0A8F             ; START TERMS
1187   0A8F D7            push a
1188   0A90 11            mov a, b
1189   0A91 26 02 00      mov b, $2
1190   0A94 56            add b, a
1191   0A95 E4            pop a
1192   0A96             ; END TERMS
1193   0A96 E7            pop d
1194   0A97 FD 43         mov [d], b
1195   0A99             ;; for(;;){ 
1196   0A99             _for21_init:
1197   0A99             _for21_cond:
1198   0A99             _for21_block:
1199   0A99             ;; if(!*format_p) break; 
1200   0A99             _if22_cond:
1201   0A99 FA FD FF      lea d, [bp + -3] ; $format_p
1202   0A9C 2A            mov b, [d]
1203   0A9D 74            mov d, b
1204   0A9E 32            mov bl, [d]
1205   0A9F A7 00         mov bh, 0
1206   0AA1 C0 00 00      cmp b, 0
1207   0AA4 FD 71         seq ; !
1208   0AA6 C0 00 00      cmp b, 0
1209   0AA9 C6 B2 0A      je _if22_else
1210   0AAC             _if22_true:
1211   0AAC             ;; break; 
1212   0AAC 0A AF 0C      jmp _for21_exit ; for break
1213   0AAF 0A AC 0C      jmp _if22_exit
1214   0AB2             _if22_else:
1215   0AB2             ;; if(*format_p == '%'){ 
1216   0AB2             _if23_cond:
1217   0AB2 FA FD FF      lea d, [bp + -3] ; $format_p
1218   0AB5 2A            mov b, [d]
1219   0AB6 74            mov d, b
1220   0AB7 32            mov bl, [d]
1221   0AB8 A7 00         mov bh, 0
1222   0ABA             ; START RELATIONAL
1223   0ABA D7            push a
1224   0ABB 11            mov a, b
1225   0ABC 26 25 00      mov b, $25
1226   0ABF B0            cmp a, b
1227   0AC0 FD 71         seq ; ==
1228   0AC2 E4            pop a
1229   0AC3             ; END RELATIONAL
1230   0AC3 C0 00 00      cmp b, 0
1231   0AC6 C6 90 0C      je _if23_else
1232   0AC9             _if23_true:
1233   0AC9             ;; format_p++; 
1234   0AC9 FA FD FF      lea d, [bp + -3] ; $format_p
1235   0ACC 2A            mov b, [d]
1236   0ACD D8            push b
1237   0ACE FD 77         inc b
1238   0AD0 FA FD FF      lea d, [bp + -3] ; $format_p
1239   0AD3 FD 43         mov [d], b
1240   0AD5 E5            pop b
1241   0AD6             ;; switch(*format_p){ 
1242   0AD6             _switch24_expr:
1243   0AD6 FA FD FF      lea d, [bp + -3] ; $format_p
1244   0AD9 2A            mov b, [d]
1245   0ADA 74            mov d, b
1246   0ADB 32            mov bl, [d]
1247   0ADC A7 00         mov bh, 0
1248   0ADE             _switch24_comparisons:
1249   0ADE C1 6C         cmp bl, $6c
1250   0AE0 C6 0C 0B      je _switch24_case0
1251   0AE3 C1 4C         cmp bl, $4c
1252   0AE5 C6 0C 0B      je _switch24_case1
1253   0AE8 C1 64         cmp bl, $64
1254   0AEA C6 9E 0B      je _switch24_case2
1255   0AED C1 69         cmp bl, $69
1256   0AEF C6 9E 0B      je _switch24_case3
1257   0AF2 C1 75         cmp bl, $75
1258   0AF4 C6 CB 0B      je _switch24_case4
1259   0AF7 C1 78         cmp bl, $78
1260   0AF9 C6 F8 0B      je _switch24_case5
1261   0AFC C1 63         cmp bl, $63
1262   0AFE C6 0D 0C      je _switch24_case6
1263   0B01 C1 73         cmp bl, $73
1264   0B03 C6 3C 0C      je _switch24_case7
1265   0B06 0A 74 0C      jmp _switch24_default
1266   0B09 0A 80 0C      jmp _switch24_exit
1267   0B0C             _switch24_case0:
1268   0B0C             _switch24_case1:
1269   0B0C             ;; format_p++; 
1270   0B0C FA FD FF      lea d, [bp + -3] ; $format_p
1271   0B0F 2A            mov b, [d]
1272   0B10 D8            push b
1273   0B11 FD 77         inc b
1274   0B13 FA FD FF      lea d, [bp + -3] ; $format_p
1275   0B16 FD 43         mov [d], b
1276   0B18 E5            pop b
1277   0B19             ;; if(*format_p == 'd' || *format_p == 'i'); 
1278   0B19             _if25_cond:
1279   0B19 FA FD FF      lea d, [bp + -3] ; $format_p
1280   0B1C 2A            mov b, [d]
1281   0B1D 74            mov d, b
1282   0B1E 32            mov bl, [d]
1283   0B1F A7 00         mov bh, 0
1284   0B21             ; START RELATIONAL
1285   0B21 D7            push a
1286   0B22 11            mov a, b
1287   0B23 26 64 00      mov b, $64
1288   0B26 B0            cmp a, b
1289   0B27 FD 71         seq ; ==
1290   0B29 E4            pop a
1291   0B2A             ; END RELATIONAL
1292   0B2A D7            push a
1293   0B2B 11            mov a, b
1294   0B2C FA FD FF      lea d, [bp + -3] ; $format_p
1295   0B2F 2A            mov b, [d]
1296   0B30 74            mov d, b
1297   0B31 32            mov bl, [d]
1298   0B32 A7 00         mov bh, 0
1299   0B34             ; START RELATIONAL
1300   0B34 D7            push a
1301   0B35 11            mov a, b
1302   0B36 26 69 00      mov b, $69
1303   0B39 B0            cmp a, b
1304   0B3A FD 71         seq ; ==
1305   0B3C E4            pop a
1306   0B3D             ; END RELATIONAL
1307   0B3D FD A8         sor a, b ; ||
1308   0B3F E4            pop a
1309   0B40 C0 00 00      cmp b, 0
1310   0B43 C6 49 0B      je _if25_else
1311   0B46             _if25_true:
1312   0B46             ;; ; 
1313   0B46 0A 89 0B      jmp _if25_exit
1314   0B49             _if25_else:
1315   0B49             ;; if(*format_p == 'u'); 
1316   0B49             _if26_cond:
1317   0B49 FA FD FF      lea d, [bp + -3] ; $format_p
1318   0B4C 2A            mov b, [d]
1319   0B4D 74            mov d, b
1320   0B4E 32            mov bl, [d]
1321   0B4F A7 00         mov bh, 0
1322   0B51             ; START RELATIONAL
1323   0B51 D7            push a
1324   0B52 11            mov a, b
1325   0B53 26 75 00      mov b, $75
1326   0B56 B0            cmp a, b
1327   0B57 FD 71         seq ; ==
1328   0B59 E4            pop a
1329   0B5A             ; END RELATIONAL
1330   0B5A C0 00 00      cmp b, 0
1331   0B5D C6 63 0B      je _if26_else
1332   0B60             _if26_true:
1333   0B60             ;; ; 
1334   0B60 0A 89 0B      jmp _if26_exit
1335   0B63             _if26_else:
1336   0B63             ;; if(*format_p == 'x'); 
1337   0B63             _if27_cond:
1338   0B63 FA FD FF      lea d, [bp + -3] ; $format_p
1339   0B66 2A            mov b, [d]
1340   0B67 74            mov d, b
1341   0B68 32            mov bl, [d]
1342   0B69 A7 00         mov bh, 0
1343   0B6B             ; START RELATIONAL
1344   0B6B D7            push a
1345   0B6C 11            mov a, b
1346   0B6D 26 78 00      mov b, $78
1347   0B70 B0            cmp a, b
1348   0B71 FD 71         seq ; ==
1349   0B73 E4            pop a
1350   0B74             ; END RELATIONAL
1351   0B74 C0 00 00      cmp b, 0
1352   0B77 C6 7D 0B      je _if27_else
1353   0B7A             _if27_true:
1354   0B7A             ;; ; 
1355   0B7A 0A 89 0B      jmp _if27_exit
1356   0B7D             _if27_else:
1357   0B7D             ;; err("Unexpected format in printf."); 
1358   0B7D 26 06 26      mov b, _s1 ; "Unexpected format in printf."
1359   0B80 FD AB         swp b
1360   0B82 D8            push b
1361   0B83 07 B1 0C      call err
1362   0B86 51 02 00      add sp, 2
1363   0B89             _if27_exit:
1364   0B89             _if26_exit:
1365   0B89             _if25_exit:
1366   0B89             ;; p = p + 4; 
1367   0B89 FA FF FF      lea d, [bp + -1] ; $p
1368   0B8C DA            push d
1369   0B8D FA FF FF      lea d, [bp + -1] ; $p
1370   0B90 2A            mov b, [d]
1371   0B91             ; START TERMS
1372   0B91 D7            push a
1373   0B92 11            mov a, b
1374   0B93 26 04 00      mov b, $4
1375   0B96 56            add b, a
1376   0B97 E4            pop a
1377   0B98             ; END TERMS
1378   0B98 E7            pop d
1379   0B99 FD 43         mov [d], b
1380   0B9B             ;; break; 
1381   0B9B 0A 80 0C      jmp _switch24_exit ; case break
1382   0B9E             _switch24_case2:
1383   0B9E             _switch24_case3:
1384   0B9E             ;; i = scann(); 
1385   0B9E FA FA FF      lea d, [bp + -6] ; $i
1386   0BA1 DA            push d
1387   0BA2 07 5E 15      call scann
1388   0BA5 E7            pop d
1389   0BA6 FD 43         mov [d], b
1390   0BA8             ;; **(int **)p = i; 
1391   0BA8 FA FF FF      lea d, [bp + -1] ; $p
1392   0BAB 2A            mov b, [d]
1393   0BAC 74            mov d, b
1394   0BAD 2A            mov b, [d]
1395   0BAE D8            push b
1396   0BAF FA FA FF      lea d, [bp + -6] ; $i
1397   0BB2 2A            mov b, [d]
1398   0BB3 E7            pop d
1399   0BB4 FD 43         mov [d], b
1400   0BB6             ;; p = p + 2; 
1401   0BB6 FA FF FF      lea d, [bp + -1] ; $p
1402   0BB9 DA            push d
1403   0BBA FA FF FF      lea d, [bp + -1] ; $p
1404   0BBD 2A            mov b, [d]
1405   0BBE             ; START TERMS
1406   0BBE D7            push a
1407   0BBF 11            mov a, b
1408   0BC0 26 02 00      mov b, $2
1409   0BC3 56            add b, a
1410   0BC4 E4            pop a
1411   0BC5             ; END TERMS
1412   0BC5 E7            pop d
1413   0BC6 FD 43         mov [d], b
1414   0BC8             ;; break; 
1415   0BC8 0A 80 0C      jmp _switch24_exit ; case break
1416   0BCB             _switch24_case4:
1417   0BCB             ;; i = scann(); 
1418   0BCB FA FA FF      lea d, [bp + -6] ; $i
1419   0BCE DA            push d
1420   0BCF 07 5E 15      call scann
1421   0BD2 E7            pop d
1422   0BD3 FD 43         mov [d], b
1423   0BD5             ;; **(int **)p = i; 
1424   0BD5 FA FF FF      lea d, [bp + -1] ; $p
1425   0BD8 2A            mov b, [d]
1426   0BD9 74            mov d, b
1427   0BDA 2A            mov b, [d]
1428   0BDB D8            push b
1429   0BDC FA FA FF      lea d, [bp + -6] ; $i
1430   0BDF 2A            mov b, [d]
1431   0BE0 E7            pop d
1432   0BE1 FD 43         mov [d], b
1433   0BE3             ;; p = p + 2; 
1434   0BE3 FA FF FF      lea d, [bp + -1] ; $p
1435   0BE6 DA            push d
1436   0BE7 FA FF FF      lea d, [bp + -1] ; $p
1437   0BEA 2A            mov b, [d]
1438   0BEB             ; START TERMS
1439   0BEB D7            push a
1440   0BEC 11            mov a, b
1441   0BED 26 02 00      mov b, $2
1442   0BF0 56            add b, a
1443   0BF1 E4            pop a
1444   0BF2             ; END TERMS
1445   0BF2 E7            pop d
1446   0BF3 FD 43         mov [d], b
1447   0BF5             ;; break; 
1448   0BF5 0A 80 0C      jmp _switch24_exit ; case break
1449   0BF8             _switch24_case5:
1450   0BF8             ;; p = p + 2; 
1451   0BF8 FA FF FF      lea d, [bp + -1] ; $p
1452   0BFB DA            push d
1453   0BFC FA FF FF      lea d, [bp + -1] ; $p
1454   0BFF 2A            mov b, [d]
1455   0C00             ; START TERMS
1456   0C00 D7            push a
1457   0C01 11            mov a, b
1458   0C02 26 02 00      mov b, $2
1459   0C05 56            add b, a
1460   0C06 E4            pop a
1461   0C07             ; END TERMS
1462   0C07 E7            pop d
1463   0C08 FD 43         mov [d], b
1464   0C0A             ;; break; 
1465   0C0A 0A 80 0C      jmp _switch24_exit ; case break
1466   0C0D             _switch24_case6:
1467   0C0D             ;; c = getchar(); 
1468   0C0D FA FC FF      lea d, [bp + -4] ; $c
1469   0C10 DA            push d
1470   0C11 07 48 15      call getchar
1471   0C14 E7            pop d
1472   0C15 FD 3E         mov [d], bl
1473   0C17             ;; **(char **)p = c; 
1474   0C17 FA FF FF      lea d, [bp + -1] ; $p
1475   0C1A 2A            mov b, [d]
1476   0C1B 74            mov d, b
1477   0C1C 2A            mov b, [d]
1478   0C1D D8            push b
1479   0C1E FA FC FF      lea d, [bp + -4] ; $c
1480   0C21 32            mov bl, [d]
1481   0C22 A7 00         mov bh, 0
1482   0C24 E7            pop d
1483   0C25 FD 43         mov [d], b
1484   0C27             ;; p = p + 2; 
1485   0C27 FA FF FF      lea d, [bp + -1] ; $p
1486   0C2A DA            push d
1487   0C2B FA FF FF      lea d, [bp + -1] ; $p
1488   0C2E 2A            mov b, [d]
1489   0C2F             ; START TERMS
1490   0C2F D7            push a
1491   0C30 11            mov a, b
1492   0C31 26 02 00      mov b, $2
1493   0C34 56            add b, a
1494   0C35 E4            pop a
1495   0C36             ; END TERMS
1496   0C36 E7            pop d
1497   0C37 FD 43         mov [d], b
1498   0C39             ;; break; 
1499   0C39 0A 80 0C      jmp _switch24_exit ; case break
1500   0C3C             _switch24_case7:
1501   0C3C             ;; gets(input_string); 
1502   0C3C FA FA FD      lea d, [bp + -518] ; $input_string
1503   0C3F 2D            mov b, d
1504   0C40 FD AB         swp b
1505   0C42 D8            push b
1506   0C43 07 30 0E      call gets
1507   0C46 51 02 00      add sp, 2
1508   0C49             ;; strcpy(*(char **)p, input_string); 
1509   0C49 FA FA FD      lea d, [bp + -518] ; $input_string
1510   0C4C 2D            mov b, d
1511   0C4D FD AB         swp b
1512   0C4F D8            push b
1513   0C50 FA FF FF      lea d, [bp + -1] ; $p
1514   0C53 2A            mov b, [d]
1515   0C54 74            mov d, b
1516   0C55 2A            mov b, [d]
1517   0C56 FD AB         swp b
1518   0C58 D8            push b
1519   0C59 07 4F 06      call strcpy
1520   0C5C 51 04 00      add sp, 4
1521   0C5F             ;; p = p + 2; 
1522   0C5F FA FF FF      lea d, [bp + -1] ; $p
1523   0C62 DA            push d
1524   0C63 FA FF FF      lea d, [bp + -1] ; $p
1525   0C66 2A            mov b, [d]
1526   0C67             ; START TERMS
1527   0C67 D7            push a
1528   0C68 11            mov a, b
1529   0C69 26 02 00      mov b, $2
1530   0C6C 56            add b, a
1531   0C6D E4            pop a
1532   0C6E             ; END TERMS
1533   0C6E E7            pop d
1534   0C6F FD 43         mov [d], b
1535   0C71             ;; break; 
1536   0C71 0A 80 0C      jmp _switch24_exit ; case break
1537   0C74             _switch24_default:
1538   0C74             ;; print("Error: Unknown argument type.\n"); 
1539   0C74 26 23 26      mov b, _s2 ; "Error: Unknown argument type.\n"
1540   0C77 FD AB         swp b
1541   0C79 D8            push b
1542   0C7A 07 83 15      call print
1543   0C7D 51 02 00      add sp, 2
1544   0C80             _switch24_exit:
1545   0C80             ;; format_p++; 
1546   0C80 FA FD FF      lea d, [bp + -3] ; $format_p
1547   0C83 2A            mov b, [d]
1548   0C84 D8            push b
1549   0C85 FD 77         inc b
1550   0C87 FA FD FF      lea d, [bp + -3] ; $format_p
1551   0C8A FD 43         mov [d], b
1552   0C8C E5            pop b
1553   0C8D 0A AC 0C      jmp _if23_exit
1554   0C90             _if23_else:
1555   0C90             ;; putchar(*format_p); 
1556   0C90 FA FD FF      lea d, [bp + -3] ; $format_p
1557   0C93 2A            mov b, [d]
1558   0C94 74            mov d, b
1559   0C95 32            mov bl, [d]
1560   0C96 A7 00         mov bh, 0
1561   0C98 DD            push bl
1562   0C99 07 3B 15      call putchar
1563   0C9C 51 01 00      add sp, 1
1564   0C9F             ;; format_p++; 
1565   0C9F FA FD FF      lea d, [bp + -3] ; $format_p
1566   0CA2 2A            mov b, [d]
1567   0CA3 D8            push b
1568   0CA4 FD 77         inc b
1569   0CA6 FA FD FF      lea d, [bp + -3] ; $format_p
1570   0CA9 FD 43         mov [d], b
1571   0CAB E5            pop b
1572   0CAC             _if23_exit:
1573   0CAC             _if22_exit:
1574   0CAC             _for21_update:
1575   0CAC 0A 99 0A      jmp _for21_cond
1576   0CAF             _for21_exit:
1577   0CAF F9            leave
1578   0CB0 09            ret
1579   0CB1             
1580   0CB1             err:
1581   0CB1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1582   0CB4             ;; print(e); 
1583   0CB4 FA 05 00      lea d, [bp + 5] ; $e
1584   0CB7 2A            mov b, [d]
1585   0CB8 FD AB         swp b
1586   0CBA D8            push b
1587   0CBB 07 83 15      call print
1588   0CBE 51 02 00      add sp, 2
1589   0CC1 F9            leave
1590   0CC2 09            ret
1591   0CC3             
1592   0CC3             printx32:
1593   0CC3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1594   0CC6             
1595   0CC6             ; --- BEGIN INLINE ASM BLOCK
1596   0CC6 FA 05 00      lea d, [bp + 5] ; $hex
1597   0CC9 2B 02 00      mov b, [d+2]
1598   0CCC 07 6E 18      call print_u16x
1599   0CCF 2A            mov b, [d]
1600   0CD0 07 6E 18      call print_u16x
1601   0CD3             ; --- END INLINE ASM BLOCK
1602   0CD3             
1603   0CD3 F9            leave
1604   0CD4 09            ret
1605   0CD5             
1606   0CD5             printx16:
1607   0CD5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1608   0CD8             
1609   0CD8             ; --- BEGIN INLINE ASM BLOCK
1610   0CD8 FA 05 00      lea d, [bp + 5] ; $hex
1611   0CDB 2A            mov b, [d]
1612   0CDC 07 6E 18      call print_u16x
1613   0CDF             ; --- END INLINE ASM BLOCK
1614   0CDF             
1615   0CDF F9            leave
1616   0CE0 09            ret
1617   0CE1             
1618   0CE1             printx8:
1619   0CE1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1620   0CE4             
1621   0CE4             ; --- BEGIN INLINE ASM BLOCK
1622   0CE4 FA 05 00      lea d, [bp + 5] ; $hex
1623   0CE7 32            mov bl, [d]
1624   0CE8 07 B2 18      call print_u8x
1625   0CEB             ; --- END INLINE ASM BLOCK
1626   0CEB             
1627   0CEB F9            leave
1628   0CEC 09            ret
1629   0CED             
1630   0CED             hex_str_to_int:
1631   0CED F8 00 00      enter 0 ; (push bp; mov bp, sp)
1632   0CF0             ; $value 
1633   0CF0 10 00 00      mov a, $0
1634   0CF3 45 FF FF      mov [bp + -1], a
1635   0CF6             ; $i 
1636   0CF6             ; $hex_char 
1637   0CF6             ; $len 
1638   0CF6 52 07 00      sub sp, 7
1639   0CF9             ;; len = strlen(hex_string); 
1640   0CF9 FA FA FF      lea d, [bp + -6] ; $len
1641   0CFC DA            push d
1642   0CFD FA 05 00      lea d, [bp + 5] ; $hex_string
1643   0D00 2A            mov b, [d]
1644   0D01 FD AB         swp b
1645   0D03 D8            push b
1646   0D04 07 C3 07      call strlen
1647   0D07 51 02 00      add sp, 2
1648   0D0A E7            pop d
1649   0D0B FD 43         mov [d], b
1650   0D0D             ;; for (i = 0; i < len; i++) { 
1651   0D0D             _for28_init:
1652   0D0D FA FD FF      lea d, [bp + -3] ; $i
1653   0D10 DA            push d
1654   0D11 26 00 00      mov b, $0
1655   0D14 E7            pop d
1656   0D15 FD 43         mov [d], b
1657   0D17             _for28_cond:
1658   0D17 FA FD FF      lea d, [bp + -3] ; $i
1659   0D1A 2A            mov b, [d]
1660   0D1B             ; START RELATIONAL
1661   0D1B D7            push a
1662   0D1C 11            mov a, b
1663   0D1D FA FA FF      lea d, [bp + -6] ; $len
1664   0D20 2A            mov b, [d]
1665   0D21 B0            cmp a, b
1666   0D22 FD 73         slt ; < (signed)
1667   0D24 E4            pop a
1668   0D25             ; END RELATIONAL
1669   0D25 C0 00 00      cmp b, 0
1670   0D28 C6 2A 0E      je _for28_exit
1671   0D2B             _for28_block:
1672   0D2B             ;; hex_char = hex_string[i]; 
1673   0D2B FA FC FF      lea d, [bp + -4] ; $hex_char
1674   0D2E DA            push d
1675   0D2F FA 05 00      lea d, [bp + 5] ; $hex_string
1676   0D32 FD 2A         mov d, [d]
1677   0D34 D7            push a
1678   0D35 DA            push d
1679   0D36 FA FD FF      lea d, [bp + -3] ; $i
1680   0D39 2A            mov b, [d]
1681   0D3A E7            pop d
1682   0D3B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1683   0D3F E4            pop a
1684   0D40 32            mov bl, [d]
1685   0D41 A7 00         mov bh, 0
1686   0D43 E7            pop d
1687   0D44 FD 3E         mov [d], bl
1688   0D46             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1689   0D46             _if29_cond:
1690   0D46 FA FC FF      lea d, [bp + -4] ; $hex_char
1691   0D49 32            mov bl, [d]
1692   0D4A A7 00         mov bh, 0
1693   0D4C             ; START RELATIONAL
1694   0D4C D7            push a
1695   0D4D 11            mov a, b
1696   0D4E 26 61 00      mov b, $61
1697   0D51 B0            cmp a, b
1698   0D52 FD 80         sge ; >=
1699   0D54 E4            pop a
1700   0D55             ; END RELATIONAL
1701   0D55 D7            push a
1702   0D56 11            mov a, b
1703   0D57 FA FC FF      lea d, [bp + -4] ; $hex_char
1704   0D5A 32            mov bl, [d]
1705   0D5B A7 00         mov bh, 0
1706   0D5D             ; START RELATIONAL
1707   0D5D D7            push a
1708   0D5E 11            mov a, b
1709   0D5F 26 66 00      mov b, $66
1710   0D62 B0            cmp a, b
1711   0D63 FD 73         slt ; <= (signed)
1712   0D65 E4            pop a
1713   0D66             ; END RELATIONAL
1714   0D66 FD A7         sand a, b
1715   0D68 E4            pop a
1716   0D69 C0 00 00      cmp b, 0
1717   0D6C C6 9D 0D      je _if29_else
1718   0D6F             _if29_true:
1719   0D6F             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1720   0D6F FA FF FF      lea d, [bp + -1] ; $value
1721   0D72 DA            push d
1722   0D73 FA FF FF      lea d, [bp + -1] ; $value
1723   0D76 2A            mov b, [d]
1724   0D77             ; START FACTORS
1725   0D77 D7            push a
1726   0D78 11            mov a, b
1727   0D79 26 10 00      mov b, $10
1728   0D7C AC            mul a, b ; *
1729   0D7D 11            mov a, b
1730   0D7E 27            mov b, a
1731   0D7F E4            pop a
1732   0D80             ; END FACTORS
1733   0D80             ; START TERMS
1734   0D80 D7            push a
1735   0D81 11            mov a, b
1736   0D82 FA FC FF      lea d, [bp + -4] ; $hex_char
1737   0D85 32            mov bl, [d]
1738   0D86 A7 00         mov bh, 0
1739   0D88             ; START TERMS
1740   0D88 D7            push a
1741   0D89 11            mov a, b
1742   0D8A 26 61 00      mov b, $61
1743   0D8D 60            sub a, b
1744   0D8E 27            mov b, a
1745   0D8F 11            mov a, b
1746   0D90 26 0A 00      mov b, $a
1747   0D93 56            add b, a
1748   0D94 E4            pop a
1749   0D95             ; END TERMS
1750   0D95 56            add b, a
1751   0D96 E4            pop a
1752   0D97             ; END TERMS
1753   0D97 E7            pop d
1754   0D98 FD 43         mov [d], b
1755   0D9A 0A 1A 0E      jmp _if29_exit
1756   0D9D             _if29_else:
1757   0D9D             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1758   0D9D             _if30_cond:
1759   0D9D FA FC FF      lea d, [bp + -4] ; $hex_char
1760   0DA0 32            mov bl, [d]
1761   0DA1 A7 00         mov bh, 0
1762   0DA3             ; START RELATIONAL
1763   0DA3 D7            push a
1764   0DA4 11            mov a, b
1765   0DA5 26 41 00      mov b, $41
1766   0DA8 B0            cmp a, b
1767   0DA9 FD 80         sge ; >=
1768   0DAB E4            pop a
1769   0DAC             ; END RELATIONAL
1770   0DAC D7            push a
1771   0DAD 11            mov a, b
1772   0DAE FA FC FF      lea d, [bp + -4] ; $hex_char
1773   0DB1 32            mov bl, [d]
1774   0DB2 A7 00         mov bh, 0
1775   0DB4             ; START RELATIONAL
1776   0DB4 D7            push a
1777   0DB5 11            mov a, b
1778   0DB6 26 46 00      mov b, $46
1779   0DB9 B0            cmp a, b
1780   0DBA FD 73         slt ; <= (signed)
1781   0DBC E4            pop a
1782   0DBD             ; END RELATIONAL
1783   0DBD FD A7         sand a, b
1784   0DBF E4            pop a
1785   0DC0 C0 00 00      cmp b, 0
1786   0DC3 C6 F4 0D      je _if30_else
1787   0DC6             _if30_true:
1788   0DC6             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1789   0DC6 FA FF FF      lea d, [bp + -1] ; $value
1790   0DC9 DA            push d
1791   0DCA FA FF FF      lea d, [bp + -1] ; $value
1792   0DCD 2A            mov b, [d]
1793   0DCE             ; START FACTORS
1794   0DCE D7            push a
1795   0DCF 11            mov a, b
1796   0DD0 26 10 00      mov b, $10
1797   0DD3 AC            mul a, b ; *
1798   0DD4 11            mov a, b
1799   0DD5 27            mov b, a
1800   0DD6 E4            pop a
1801   0DD7             ; END FACTORS
1802   0DD7             ; START TERMS
1803   0DD7 D7            push a
1804   0DD8 11            mov a, b
1805   0DD9 FA FC FF      lea d, [bp + -4] ; $hex_char
1806   0DDC 32            mov bl, [d]
1807   0DDD A7 00         mov bh, 0
1808   0DDF             ; START TERMS
1809   0DDF D7            push a
1810   0DE0 11            mov a, b
1811   0DE1 26 41 00      mov b, $41
1812   0DE4 60            sub a, b
1813   0DE5 27            mov b, a
1814   0DE6 11            mov a, b
1815   0DE7 26 0A 00      mov b, $a
1816   0DEA 56            add b, a
1817   0DEB E4            pop a
1818   0DEC             ; END TERMS
1819   0DEC 56            add b, a
1820   0DED E4            pop a
1821   0DEE             ; END TERMS
1822   0DEE E7            pop d
1823   0DEF FD 43         mov [d], b
1824   0DF1 0A 1A 0E      jmp _if30_exit
1825   0DF4             _if30_else:
1826   0DF4             ;; value = (value * 16) + (hex_char - '0'); 
1827   0DF4 FA FF FF      lea d, [bp + -1] ; $value
1828   0DF7 DA            push d
1829   0DF8 FA FF FF      lea d, [bp + -1] ; $value
1830   0DFB 2A            mov b, [d]
1831   0DFC             ; START FACTORS
1832   0DFC D7            push a
1833   0DFD 11            mov a, b
1834   0DFE 26 10 00      mov b, $10
1835   0E01 AC            mul a, b ; *
1836   0E02 11            mov a, b
1837   0E03 27            mov b, a
1838   0E04 E4            pop a
1839   0E05             ; END FACTORS
1840   0E05             ; START TERMS
1841   0E05 D7            push a
1842   0E06 11            mov a, b
1843   0E07 FA FC FF      lea d, [bp + -4] ; $hex_char
1844   0E0A 32            mov bl, [d]
1845   0E0B A7 00         mov bh, 0
1846   0E0D             ; START TERMS
1847   0E0D D7            push a
1848   0E0E 11            mov a, b
1849   0E0F 26 30 00      mov b, $30
1850   0E12 60            sub a, b
1851   0E13 27            mov b, a
1852   0E14 E4            pop a
1853   0E15             ; END TERMS
1854   0E15 56            add b, a
1855   0E16 E4            pop a
1856   0E17             ; END TERMS
1857   0E17 E7            pop d
1858   0E18 FD 43         mov [d], b
1859   0E1A             _if30_exit:
1860   0E1A             _if29_exit:
1861   0E1A             _for28_update:
1862   0E1A FA FD FF      lea d, [bp + -3] ; $i
1863   0E1D 2A            mov b, [d]
1864   0E1E D8            push b
1865   0E1F FD 77         inc b
1866   0E21 FA FD FF      lea d, [bp + -3] ; $i
1867   0E24 FD 43         mov [d], b
1868   0E26 E5            pop b
1869   0E27 0A 17 0D      jmp _for28_cond
1870   0E2A             _for28_exit:
1871   0E2A             ;; return value; 
1872   0E2A FA FF FF      lea d, [bp + -1] ; $value
1873   0E2D 2A            mov b, [d]
1874   0E2E F9            leave
1875   0E2F 09            ret
1876   0E30             
1877   0E30             gets:
1878   0E30 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1879   0E33             
1880   0E33             ; --- BEGIN INLINE ASM BLOCK
1881   0E33 FA 05 00      lea d, [bp + 5] ; $s
1882   0E36 15            mov a, [d]
1883   0E37 3C            mov d, a
1884   0E38 07 D3 16      call _gets
1885   0E3B             ; --- END INLINE ASM BLOCK
1886   0E3B             
1887   0E3B             ;; return strlen(s); 
1888   0E3B FA 05 00      lea d, [bp + 5] ; $s
1889   0E3E 2A            mov b, [d]
1890   0E3F FD AB         swp b
1891   0E41 D8            push b
1892   0E42 07 C3 07      call strlen
1893   0E45 51 02 00      add sp, 2
1894   0E48 F9            leave
1895   0E49 09            ret
1896   0E4A             
1897   0E4A             print_signed:
1898   0E4A F8 00 00      enter 0 ; (push bp; mov bp, sp)
1899   0E4D             ; $digits 
1900   0E4D             ; $i 
1901   0E4D 10 00 00      mov a, $0
1902   0E50 45 FA FF      mov [bp + -6], a
1903   0E53 52 07 00      sub sp, 7
1904   0E56             ;; if (num < 0) { 
1905   0E56             _if31_cond:
1906   0E56 FA 05 00      lea d, [bp + 5] ; $num
1907   0E59 2A            mov b, [d]
1908   0E5A             ; START RELATIONAL
1909   0E5A D7            push a
1910   0E5B 11            mov a, b
1911   0E5C 26 00 00      mov b, $0
1912   0E5F B0            cmp a, b
1913   0E60 FD 73         slt ; < (signed)
1914   0E62 E4            pop a
1915   0E63             ; END RELATIONAL
1916   0E63 C0 00 00      cmp b, 0
1917   0E66 C6 83 0E      je _if31_else
1918   0E69             _if31_true:
1919   0E69             ;; putchar('-'); 
1920   0E69 26 2D 00      mov b, $2d
1921   0E6C DD            push bl
1922   0E6D 07 3B 15      call putchar
1923   0E70 51 01 00      add sp, 1
1924   0E73             ;; num = -num; 
1925   0E73 FA 05 00      lea d, [bp + 5] ; $num
1926   0E76 DA            push d
1927   0E77 FA 05 00      lea d, [bp + 5] ; $num
1928   0E7A 2A            mov b, [d]
1929   0E7B FD 97         neg b
1930   0E7D E7            pop d
1931   0E7E FD 43         mov [d], b
1932   0E80 0A A5 0E      jmp _if31_exit
1933   0E83             _if31_else:
1934   0E83             ;; if (num == 0) { 
1935   0E83             _if32_cond:
1936   0E83 FA 05 00      lea d, [bp + 5] ; $num
1937   0E86 2A            mov b, [d]
1938   0E87             ; START RELATIONAL
1939   0E87 D7            push a
1940   0E88 11            mov a, b
1941   0E89 26 00 00      mov b, $0
1942   0E8C B0            cmp a, b
1943   0E8D FD 71         seq ; ==
1944   0E8F E4            pop a
1945   0E90             ; END RELATIONAL
1946   0E90 C0 00 00      cmp b, 0
1947   0E93 C6 A5 0E      je _if32_exit
1948   0E96             _if32_true:
1949   0E96             ;; putchar('0'); 
1950   0E96 26 30 00      mov b, $30
1951   0E99 DD            push bl
1952   0E9A 07 3B 15      call putchar
1953   0E9D 51 01 00      add sp, 1
1954   0EA0             ;; return; 
1955   0EA0 F9            leave
1956   0EA1 09            ret
1957   0EA2 0A A5 0E      jmp _if32_exit
1958   0EA5             _if32_exit:
1959   0EA5             _if31_exit:
1960   0EA5             ;; while (num > 0) { 
1961   0EA5             _while33_cond:
1962   0EA5 FA 05 00      lea d, [bp + 5] ; $num
1963   0EA8 2A            mov b, [d]
1964   0EA9             ; START RELATIONAL
1965   0EA9 D7            push a
1966   0EAA 11            mov a, b
1967   0EAB 26 00 00      mov b, $0
1968   0EAE B0            cmp a, b
1969   0EAF FD 7F         sgt ; >
1970   0EB1 E4            pop a
1971   0EB2             ; END RELATIONAL
1972   0EB2 C0 00 00      cmp b, 0
1973   0EB5 C6 FF 0E      je _while33_exit
1974   0EB8             _while33_block:
1975   0EB8             ;; digits[i] = '0' + (num % 10); 
1976   0EB8 FA FC FF      lea d, [bp + -4] ; $digits
1977   0EBB D7            push a
1978   0EBC DA            push d
1979   0EBD FA FA FF      lea d, [bp + -6] ; $i
1980   0EC0 2A            mov b, [d]
1981   0EC1 E7            pop d
1982   0EC2 5A            add d, b
1983   0EC3 E4            pop a
1984   0EC4 DA            push d
1985   0EC5 26 30 00      mov b, $30
1986   0EC8             ; START TERMS
1987   0EC8 D7            push a
1988   0EC9 11            mov a, b
1989   0ECA FA 05 00      lea d, [bp + 5] ; $num
1990   0ECD 2A            mov b, [d]
1991   0ECE             ; START FACTORS
1992   0ECE D7            push a
1993   0ECF 11            mov a, b
1994   0ED0 26 0A 00      mov b, $a
1995   0ED3 AE            div a, b ; 
1996   0ED4 11            mov a, b
1997   0ED5 27            mov b, a
1998   0ED6 E4            pop a
1999   0ED7             ; END FACTORS
2000   0ED7 56            add b, a
2001   0ED8 E4            pop a
2002   0ED9             ; END TERMS
2003   0ED9 E7            pop d
2004   0EDA FD 3E         mov [d], bl
2005   0EDC             ;; num = num / 10; 
2006   0EDC FA 05 00      lea d, [bp + 5] ; $num
2007   0EDF DA            push d
2008   0EE0 FA 05 00      lea d, [bp + 5] ; $num
2009   0EE3 2A            mov b, [d]
2010   0EE4             ; START FACTORS
2011   0EE4 D7            push a
2012   0EE5 11            mov a, b
2013   0EE6 26 0A 00      mov b, $a
2014   0EE9 AE            div a, b
2015   0EEA 27            mov b, a
2016   0EEB E4            pop a
2017   0EEC             ; END FACTORS
2018   0EEC E7            pop d
2019   0EED FD 43         mov [d], b
2020   0EEF             ;; i++; 
2021   0EEF FA FA FF      lea d, [bp + -6] ; $i
2022   0EF2 2A            mov b, [d]
2023   0EF3 D8            push b
2024   0EF4 FD 77         inc b
2025   0EF6 FA FA FF      lea d, [bp + -6] ; $i
2026   0EF9 FD 43         mov [d], b
2027   0EFB E5            pop b
2028   0EFC 0A A5 0E      jmp _while33_cond
2029   0EFF             _while33_exit:
2030   0EFF             ;; while (i > 0) { 
2031   0EFF             _while34_cond:
2032   0EFF FA FA FF      lea d, [bp + -6] ; $i
2033   0F02 2A            mov b, [d]
2034   0F03             ; START RELATIONAL
2035   0F03 D7            push a
2036   0F04 11            mov a, b
2037   0F05 26 00 00      mov b, $0
2038   0F08 B0            cmp a, b
2039   0F09 FD 7F         sgt ; >
2040   0F0B E4            pop a
2041   0F0C             ; END RELATIONAL
2042   0F0C C0 00 00      cmp b, 0
2043   0F0F C6 38 0F      je _while34_exit
2044   0F12             _while34_block:
2045   0F12             ;; i--; 
2046   0F12 FA FA FF      lea d, [bp + -6] ; $i
2047   0F15 2A            mov b, [d]
2048   0F16 D8            push b
2049   0F17 FD 7D         dec b
2050   0F19 FA FA FF      lea d, [bp + -6] ; $i
2051   0F1C FD 43         mov [d], b
2052   0F1E E5            pop b
2053   0F1F             ;; putchar(digits[i]); 
2054   0F1F FA FC FF      lea d, [bp + -4] ; $digits
2055   0F22 D7            push a
2056   0F23 DA            push d
2057   0F24 FA FA FF      lea d, [bp + -6] ; $i
2058   0F27 2A            mov b, [d]
2059   0F28 E7            pop d
2060   0F29 5A            add d, b
2061   0F2A E4            pop a
2062   0F2B 32            mov bl, [d]
2063   0F2C A7 00         mov bh, 0
2064   0F2E DD            push bl
2065   0F2F 07 3B 15      call putchar
2066   0F32 51 01 00      add sp, 1
2067   0F35 0A FF 0E      jmp _while34_cond
2068   0F38             _while34_exit:
2069   0F38 F9            leave
2070   0F39 09            ret
2071   0F3A             
2072   0F3A             print_signed_long:
2073   0F3A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2074   0F3D             ; $digits 
2075   0F3D             ; $i 
2076   0F3D 10 00 00      mov a, $0
2077   0F40 45 F5 FF      mov [bp + -11], a
2078   0F43 52 0C 00      sub sp, 12
2079   0F46             ;; if (num < 0) { 
2080   0F46             _if35_cond:
2081   0F46 FA 05 00      lea d, [bp + 5] ; $num
2082   0F49 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2083   0F4C FD 39         mov c, b ; And place it into C
2084   0F4E 2A            mov b, [d] ; Lower Word in B
2085   0F4F             ; START RELATIONAL
2086   0F4F D7            push a
2087   0F50 FD D8         push g
2088   0F52 11            mov a, b
2089   0F53 FD 7A         mov g, c
2090   0F55 26 00 00      mov b, $0
2091   0F58 38 00 00      mov c, 0
2092   0F5B FD AF 00 00   cmp32 ga, cb
2092   0F5F 00 00 00 00 
2092   0F63 00 00 00 00 
2092   0F67 00 00 00 00 
2092   0F6B 00 00 00 00 
2092   0F6F 00 00 00 00 
2092   0F73 00 00 00 00 
2092   0F77 00 00 00 00 
2092   0F7B 00 00 00 00 
2092   0F7F 00 00 00 00 
2092   0F83 00 00 00 00 
2092   0F87 00 00 00 00 
2092   0F8B 00 00 00 00 
2092   0F8F 00 00 00 00 
2092   0F93 00 00 00 00 
2092   0F97 00 00 00 00 
2092   0F9B 00 00 00 00 
2092   0F9F 00 00 00 00 
2092   0FA3 00 00 00 00 
2092   0FA7 00 00 00 00 
2092   0FAB 00 00 00 00 
2092   0FAF 00 00 00 00 
2092   0FB3 00 00 00 00 
2092   0FB7 00 00 00 00 
2092   0FBB 00 00 00 00 
2092   0FBF 00 00 00 00 
2092   0FC3 00 00 00 00 
2092   0FC7 00 00 00 00 
2092   0FCB 00 00 00 00 
2092   0FCF 00 00 00 00 
2092   0FD3 00 00 00 00 
2092   0FD7 00 00 00 00 
2092   0FDB 00 00 00 00 
2092   0FDF 00 00 00 00 
2092   0FE3 00 00 00 00 
2092   0FE7 00 00 00 00 
2092   0FEB 00 00 00 00 
2092   0FEF 00 00 00 00 
2092   0FF3 00 00 00 00 
2092   0FF7 00 00 00 00 
2092   0FFB 00 00 00 00 
2092   0FFF 00 00 00 00 
2092   1003 00 00 00 00 
2092   1007 00 00 00 00 
2092   100B 00 00 00 00 
2092   100F 00 00 00 00 
2092   1013 00 00 00 00 
2092   1017 00 00 00 00 
2092   101B 00 00 00 00 
2092   101F 00 00 00 00 
2092   1023 00 00 00 00 
2092   1027 00 00 00 00 
2092   102B 00 00 00 00 
2092   102F 00 00 00 00 
2092   1033 00 00 00 00 
2092   1037 00 00 00 00 
2092   103B 00 00 00 00 
2092   103F 00 00 00 00 
2092   1043 00 00 00 00 
2092   1047 00 00 00 00 
2092   104B 00 00 00 00 
2092   104F 00 00 00 00 
2092   1053 00 00 00 00 
2092   1057 00 00 00 00 
2092   105B 00 
2093   105C FD 73         slt ; <
2094   105E FD F1         pop g
2095   1060 E4            pop a
2096   1061             ; END RELATIONAL
2097   1061 C0 00 00      cmp b, 0
2098   1064 C6 8B 10      je _if35_else
2099   1067             _if35_true:
2100   1067             ;; putchar('-'); 
2101   1067 26 2D 00      mov b, $2d
2102   106A DD            push bl
2103   106B 07 3B 15      call putchar
2104   106E 51 01 00      add sp, 1
2105   1071             ;; num = -num; 
2106   1071 FA 05 00      lea d, [bp + 5] ; $num
2107   1074 DA            push d
2108   1075 FA 05 00      lea d, [bp + 5] ; $num
2109   1078 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2110   107B FD 39         mov c, b ; And place it into C
2111   107D 2A            mov b, [d] ; Lower Word in B
2112   107E FD 97         neg b
2113   1080 E7            pop d
2114   1081 FD 43         mov [d], b
2115   1083 28            mov b, c
2116   1084 FD 44 02 00   mov [d + 2], b
2117   1088 0A BB 11      jmp _if35_exit
2118   108B             _if35_else:
2119   108B             ;; if (num == 0) { 
2120   108B             _if36_cond:
2121   108B FA 05 00      lea d, [bp + 5] ; $num
2122   108E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2123   1091 FD 39         mov c, b ; And place it into C
2124   1093 2A            mov b, [d] ; Lower Word in B
2125   1094             ; START RELATIONAL
2126   1094 D7            push a
2127   1095 FD D8         push g
2128   1097 11            mov a, b
2129   1098 FD 7A         mov g, c
2130   109A 26 00 00      mov b, $0
2131   109D 38 00 00      mov c, 0
2132   10A0 FD AF 00 00   cmp32 ga, cb
2132   10A4 00 00 00 00 
2132   10A8 00 00 00 00 
2132   10AC 00 00 00 00 
2132   10B0 00 00 00 00 
2132   10B4 00 00 00 00 
2132   10B8 00 00 00 00 
2132   10BC 00 00 00 00 
2132   10C0 00 00 00 00 
2132   10C4 00 00 00 00 
2132   10C8 00 00 00 00 
2132   10CC 00 00 00 00 
2132   10D0 00 00 00 00 
2132   10D4 00 00 00 00 
2132   10D8 00 00 00 00 
2132   10DC 00 00 00 00 
2132   10E0 00 00 00 00 
2132   10E4 00 00 00 00 
2132   10E8 00 00 00 00 
2132   10EC 00 00 00 00 
2132   10F0 00 00 00 00 
2132   10F4 00 00 00 00 
2132   10F8 00 00 00 00 
2132   10FC 00 00 00 00 
2132   1100 00 00 00 00 
2132   1104 00 00 00 00 
2132   1108 00 00 00 00 
2132   110C 00 00 00 00 
2132   1110 00 00 00 00 
2132   1114 00 00 00 00 
2132   1118 00 00 00 00 
2132   111C 00 00 00 00 
2132   1120 00 00 00 00 
2132   1124 00 00 00 00 
2132   1128 00 00 00 00 
2132   112C 00 00 00 00 
2132   1130 00 00 00 00 
2132   1134 00 00 00 00 
2132   1138 00 00 00 00 
2132   113C 00 00 00 00 
2132   1140 00 00 00 00 
2132   1144 00 00 00 00 
2132   1148 00 00 00 00 
2132   114C 00 00 00 00 
2132   1150 00 00 00 00 
2132   1154 00 00 00 00 
2132   1158 00 00 00 00 
2132   115C 00 00 00 00 
2132   1160 00 00 00 00 
2132   1164 00 00 00 00 
2132   1168 00 00 00 00 
2132   116C 00 00 00 00 
2132   1170 00 00 00 00 
2132   1174 00 00 00 00 
2132   1178 00 00 00 00 
2132   117C 00 00 00 00 
2132   1180 00 00 00 00 
2132   1184 00 00 00 00 
2132   1188 00 00 00 00 
2132   118C 00 00 00 00 
2132   1190 00 00 00 00 
2132   1194 00 00 00 00 
2132   1198 00 00 00 00 
2132   119C 00 00 00 00 
2132   11A0 00 
2133   11A1 FD 71         seq ; ==
2134   11A3 FD F1         pop g
2135   11A5 E4            pop a
2136   11A6             ; END RELATIONAL
2137   11A6 C0 00 00      cmp b, 0
2138   11A9 C6 BB 11      je _if36_exit
2139   11AC             _if36_true:
2140   11AC             ;; putchar('0'); 
2141   11AC 26 30 00      mov b, $30
2142   11AF DD            push bl
2143   11B0 07 3B 15      call putchar
2144   11B3 51 01 00      add sp, 1
2145   11B6             ;; return; 
2146   11B6 F9            leave
2147   11B7 09            ret
2148   11B8 0A BB 11      jmp _if36_exit
2149   11BB             _if36_exit:
2150   11BB             _if35_exit:
2151   11BB             ;; while (num > 0) { 
2152   11BB             _while37_cond:
2153   11BB FA 05 00      lea d, [bp + 5] ; $num
2154   11BE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2155   11C1 FD 39         mov c, b ; And place it into C
2156   11C3 2A            mov b, [d] ; Lower Word in B
2157   11C4             ; START RELATIONAL
2158   11C4 D7            push a
2159   11C5 FD D8         push g
2160   11C7 11            mov a, b
2161   11C8 FD 7A         mov g, c
2162   11CA 26 00 00      mov b, $0
2163   11CD 38 00 00      mov c, 0
2164   11D0 FD 7F         sgt
2165   11D2 FD F1         pop g
2166   11D4 E4            pop a
2167   11D5             ; END RELATIONAL
2168   11D5 C0 00 00      cmp b, 0
2169   11D8 C6 38 12      je _while37_exit
2170   11DB             _while37_block:
2171   11DB             ;; digits[i] = '0' + (num % 10); 
2172   11DB FA F7 FF      lea d, [bp + -9] ; $digits
2173   11DE D7            push a
2174   11DF DA            push d
2175   11E0 FA F5 FF      lea d, [bp + -11] ; $i
2176   11E3 2A            mov b, [d]
2177   11E4 E7            pop d
2178   11E5 5A            add d, b
2179   11E6 E4            pop a
2180   11E7 DA            push d
2181   11E8 26 30 00      mov b, $30
2182   11EB             ; START TERMS
2183   11EB D7            push a
2184   11EC 11            mov a, b
2185   11ED FA 05 00      lea d, [bp + 5] ; $num
2186   11F0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2187   11F3 FD 39         mov c, b ; And place it into C
2188   11F5 2A            mov b, [d] ; Lower Word in B
2189   11F6             ; START FACTORS
2190   11F6 D7            push a
2191   11F7 11            mov a, b
2192   11F8 26 0A 00      mov b, $a
2193   11FB AE            div a, b ; 
2194   11FC 11            mov a, b
2195   11FD 27            mov b, a
2196   11FE E4            pop a
2197   11FF             ; END FACTORS
2198   11FF 54            add a, b
2199   1200 D7            push a
2200   1201 FD 12         mov a, g
2201   1203 28            mov b, c
2202   1204 5C            adc a, b
2203   1205 39            mov c, a
2204   1206 E5            pop b
2205   1207 E4            pop a
2206   1208             ; END TERMS
2207   1208 E7            pop d
2208   1209 FD 3E         mov [d], bl
2209   120B             ;; num = num / 10; 
2210   120B FA 05 00      lea d, [bp + 5] ; $num
2211   120E DA            push d
2212   120F FA 05 00      lea d, [bp + 5] ; $num
2213   1212 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2214   1215 FD 39         mov c, b ; And place it into C
2215   1217 2A            mov b, [d] ; Lower Word in B
2216   1218             ; START FACTORS
2217   1218 D7            push a
2218   1219 11            mov a, b
2219   121A 26 0A 00      mov b, $a
2220   121D AE            div a, b
2221   121E 27            mov b, a
2222   121F E4            pop a
2223   1220             ; END FACTORS
2224   1220 E7            pop d
2225   1221 FD 43         mov [d], b
2226   1223 28            mov b, c
2227   1224 FD 44 02 00   mov [d + 2], b
2228   1228             ;; i++; 
2229   1228 FA F5 FF      lea d, [bp + -11] ; $i
2230   122B 2A            mov b, [d]
2231   122C D8            push b
2232   122D FD 77         inc b
2233   122F FA F5 FF      lea d, [bp + -11] ; $i
2234   1232 FD 43         mov [d], b
2235   1234 E5            pop b
2236   1235 0A BB 11      jmp _while37_cond
2237   1238             _while37_exit:
2238   1238             ;; while (i > 0) { 
2239   1238             _while38_cond:
2240   1238 FA F5 FF      lea d, [bp + -11] ; $i
2241   123B 2A            mov b, [d]
2242   123C             ; START RELATIONAL
2243   123C D7            push a
2244   123D 11            mov a, b
2245   123E 26 00 00      mov b, $0
2246   1241 B0            cmp a, b
2247   1242 FD 7F         sgt ; >
2248   1244 E4            pop a
2249   1245             ; END RELATIONAL
2250   1245 C0 00 00      cmp b, 0
2251   1248 C6 71 12      je _while38_exit
2252   124B             _while38_block:
2253   124B             ;; i--; 
2254   124B FA F5 FF      lea d, [bp + -11] ; $i
2255   124E 2A            mov b, [d]
2256   124F D8            push b
2257   1250 FD 7D         dec b
2258   1252 FA F5 FF      lea d, [bp + -11] ; $i
2259   1255 FD 43         mov [d], b
2260   1257 E5            pop b
2261   1258             ;; putchar(digits[i]); 
2262   1258 FA F7 FF      lea d, [bp + -9] ; $digits
2263   125B D7            push a
2264   125C DA            push d
2265   125D FA F5 FF      lea d, [bp + -11] ; $i
2266   1260 2A            mov b, [d]
2267   1261 E7            pop d
2268   1262 5A            add d, b
2269   1263 E4            pop a
2270   1264 32            mov bl, [d]
2271   1265 A7 00         mov bh, 0
2272   1267 DD            push bl
2273   1268 07 3B 15      call putchar
2274   126B 51 01 00      add sp, 1
2275   126E 0A 38 12      jmp _while38_cond
2276   1271             _while38_exit:
2277   1271 F9            leave
2278   1272 09            ret
2279   1273             
2280   1273             print_unsigned_long:
2281   1273 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2282   1276             ; $digits 
2283   1276             ; $i 
2284   1276 52 0C 00      sub sp, 12
2285   1279             ;; i = 0; 
2286   1279 FA F5 FF      lea d, [bp + -11] ; $i
2287   127C DA            push d
2288   127D 26 00 00      mov b, $0
2289   1280 E7            pop d
2290   1281 FD 43         mov [d], b
2291   1283             ;; if(num == 0){ 
2292   1283             _if39_cond:
2293   1283 FA 05 00      lea d, [bp + 5] ; $num
2294   1286 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2295   1289 FD 39         mov c, b ; And place it into C
2296   128B 2A            mov b, [d] ; Lower Word in B
2297   128C             ; START RELATIONAL
2298   128C D7            push a
2299   128D FD D8         push g
2300   128F 11            mov a, b
2301   1290 FD 7A         mov g, c
2302   1292 26 00 00      mov b, $0
2303   1295 38 00 00      mov c, 0
2304   1298 FD AF 00 00   cmp32 ga, cb
2304   129C 00 00 00 00 
2304   12A0 00 00 00 00 
2304   12A4 00 00 00 00 
2304   12A8 00 00 00 00 
2304   12AC 00 00 00 00 
2304   12B0 00 00 00 00 
2304   12B4 00 00 00 00 
2304   12B8 00 00 00 00 
2304   12BC 00 00 00 00 
2304   12C0 00 00 00 00 
2304   12C4 00 00 00 00 
2304   12C8 00 00 00 00 
2304   12CC 00 00 00 00 
2304   12D0 00 00 00 00 
2304   12D4 00 00 00 00 
2304   12D8 00 00 00 00 
2304   12DC 00 00 00 00 
2304   12E0 00 00 00 00 
2304   12E4 00 00 00 00 
2304   12E8 00 00 00 00 
2304   12EC 00 00 00 00 
2304   12F0 00 00 00 00 
2304   12F4 00 00 00 00 
2304   12F8 00 00 00 00 
2304   12FC 00 00 00 00 
2304   1300 00 00 00 00 
2304   1304 00 00 00 00 
2304   1308 00 00 00 00 
2304   130C 00 00 00 00 
2304   1310 00 00 00 00 
2304   1314 00 00 00 00 
2304   1318 00 00 00 00 
2304   131C 00 00 00 00 
2304   1320 00 00 00 00 
2304   1324 00 00 00 00 
2304   1328 00 00 00 00 
2304   132C 00 00 00 00 
2304   1330 00 00 00 00 
2304   1334 00 00 00 00 
2304   1338 00 00 00 00 
2304   133C 00 00 00 00 
2304   1340 00 00 00 00 
2304   1344 00 00 00 00 
2304   1348 00 00 00 00 
2304   134C 00 00 00 00 
2304   1350 00 00 00 00 
2304   1354 00 00 00 00 
2304   1358 00 00 00 00 
2304   135C 00 00 00 00 
2304   1360 00 00 00 00 
2304   1364 00 00 00 00 
2304   1368 00 00 00 00 
2304   136C 00 00 00 00 
2304   1370 00 00 00 00 
2304   1374 00 00 00 00 
2304   1378 00 00 00 00 
2304   137C 00 00 00 00 
2304   1380 00 00 00 00 
2304   1384 00 00 00 00 
2304   1388 00 00 00 00 
2304   138C 00 00 00 00 
2304   1390 00 00 00 00 
2304   1394 00 00 00 00 
2304   1398 00 
2305   1399 FD 71         seq ; ==
2306   139B FD F1         pop g
2307   139D E4            pop a
2308   139E             ; END RELATIONAL
2309   139E C0 00 00      cmp b, 0
2310   13A1 C6 B3 13      je _if39_exit
2311   13A4             _if39_true:
2312   13A4             ;; putchar('0'); 
2313   13A4 26 30 00      mov b, $30
2314   13A7 DD            push bl
2315   13A8 07 3B 15      call putchar
2316   13AB 51 01 00      add sp, 1
2317   13AE             ;; return; 
2318   13AE F9            leave
2319   13AF 09            ret
2320   13B0 0A B3 13      jmp _if39_exit
2321   13B3             _if39_exit:
2322   13B3             ;; while (num > 0) { 
2323   13B3             _while40_cond:
2324   13B3 FA 05 00      lea d, [bp + 5] ; $num
2325   13B6 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2326   13B9 FD 39         mov c, b ; And place it into C
2327   13BB 2A            mov b, [d] ; Lower Word in B
2328   13BC             ; START RELATIONAL
2329   13BC D7            push a
2330   13BD FD D8         push g
2331   13BF 11            mov a, b
2332   13C0 FD 7A         mov g, c
2333   13C2 26 00 00      mov b, $0
2334   13C5 38 00 00      mov c, 0
2335   13C8 FD 81         sgu
2336   13CA FD F1         pop g
2337   13CC E4            pop a
2338   13CD             ; END RELATIONAL
2339   13CD C0 00 00      cmp b, 0
2340   13D0 C6 30 14      je _while40_exit
2341   13D3             _while40_block:
2342   13D3             ;; digits[i] = '0' + (num % 10); 
2343   13D3 FA F7 FF      lea d, [bp + -9] ; $digits
2344   13D6 D7            push a
2345   13D7 DA            push d
2346   13D8 FA F5 FF      lea d, [bp + -11] ; $i
2347   13DB 2A            mov b, [d]
2348   13DC E7            pop d
2349   13DD 5A            add d, b
2350   13DE E4            pop a
2351   13DF DA            push d
2352   13E0 26 30 00      mov b, $30
2353   13E3             ; START TERMS
2354   13E3 D7            push a
2355   13E4 11            mov a, b
2356   13E5 FA 05 00      lea d, [bp + 5] ; $num
2357   13E8 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2358   13EB FD 39         mov c, b ; And place it into C
2359   13ED 2A            mov b, [d] ; Lower Word in B
2360   13EE             ; START FACTORS
2361   13EE D7            push a
2362   13EF 11            mov a, b
2363   13F0 26 0A 00      mov b, $a
2364   13F3 AE            div a, b ; 
2365   13F4 11            mov a, b
2366   13F5 27            mov b, a
2367   13F6 E4            pop a
2368   13F7             ; END FACTORS
2369   13F7 54            add a, b
2370   13F8 D7            push a
2371   13F9 FD 12         mov a, g
2372   13FB 28            mov b, c
2373   13FC 5C            adc a, b
2374   13FD 39            mov c, a
2375   13FE E5            pop b
2376   13FF E4            pop a
2377   1400             ; END TERMS
2378   1400 E7            pop d
2379   1401 FD 3E         mov [d], bl
2380   1403             ;; num = num / 10; 
2381   1403 FA 05 00      lea d, [bp + 5] ; $num
2382   1406 DA            push d
2383   1407 FA 05 00      lea d, [bp + 5] ; $num
2384   140A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2385   140D FD 39         mov c, b ; And place it into C
2386   140F 2A            mov b, [d] ; Lower Word in B
2387   1410             ; START FACTORS
2388   1410 D7            push a
2389   1411 11            mov a, b
2390   1412 26 0A 00      mov b, $a
2391   1415 AE            div a, b
2392   1416 27            mov b, a
2393   1417 E4            pop a
2394   1418             ; END FACTORS
2395   1418 E7            pop d
2396   1419 FD 43         mov [d], b
2397   141B 28            mov b, c
2398   141C FD 44 02 00   mov [d + 2], b
2399   1420             ;; i++; 
2400   1420 FA F5 FF      lea d, [bp + -11] ; $i
2401   1423 2A            mov b, [d]
2402   1424 D8            push b
2403   1425 FD 77         inc b
2404   1427 FA F5 FF      lea d, [bp + -11] ; $i
2405   142A FD 43         mov [d], b
2406   142C E5            pop b
2407   142D 0A B3 13      jmp _while40_cond
2408   1430             _while40_exit:
2409   1430             ;; while (i > 0) { 
2410   1430             _while41_cond:
2411   1430 FA F5 FF      lea d, [bp + -11] ; $i
2412   1433 2A            mov b, [d]
2413   1434             ; START RELATIONAL
2414   1434 D7            push a
2415   1435 11            mov a, b
2416   1436 26 00 00      mov b, $0
2417   1439 B0            cmp a, b
2418   143A FD 7F         sgt ; >
2419   143C E4            pop a
2420   143D             ; END RELATIONAL
2421   143D C0 00 00      cmp b, 0
2422   1440 C6 69 14      je _while41_exit
2423   1443             _while41_block:
2424   1443             ;; i--; 
2425   1443 FA F5 FF      lea d, [bp + -11] ; $i
2426   1446 2A            mov b, [d]
2427   1447 D8            push b
2428   1448 FD 7D         dec b
2429   144A FA F5 FF      lea d, [bp + -11] ; $i
2430   144D FD 43         mov [d], b
2431   144F E5            pop b
2432   1450             ;; putchar(digits[i]); 
2433   1450 FA F7 FF      lea d, [bp + -9] ; $digits
2434   1453 D7            push a
2435   1454 DA            push d
2436   1455 FA F5 FF      lea d, [bp + -11] ; $i
2437   1458 2A            mov b, [d]
2438   1459 E7            pop d
2439   145A 5A            add d, b
2440   145B E4            pop a
2441   145C 32            mov bl, [d]
2442   145D A7 00         mov bh, 0
2443   145F DD            push bl
2444   1460 07 3B 15      call putchar
2445   1463 51 01 00      add sp, 1
2446   1466 0A 30 14      jmp _while41_cond
2447   1469             _while41_exit:
2448   1469 F9            leave
2449   146A 09            ret
2450   146B             
2451   146B             print_unsigned:
2452   146B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2453   146E             ; $digits 
2454   146E             ; $i 
2455   146E 52 07 00      sub sp, 7
2456   1471             ;; i = 0; 
2457   1471 FA FA FF      lea d, [bp + -6] ; $i
2458   1474 DA            push d
2459   1475 26 00 00      mov b, $0
2460   1478 E7            pop d
2461   1479 FD 43         mov [d], b
2462   147B             ;; if(num == 0){ 
2463   147B             _if42_cond:
2464   147B FA 05 00      lea d, [bp + 5] ; $num
2465   147E 2A            mov b, [d]
2466   147F             ; START RELATIONAL
2467   147F D7            push a
2468   1480 11            mov a, b
2469   1481 26 00 00      mov b, $0
2470   1484 B0            cmp a, b
2471   1485 FD 71         seq ; ==
2472   1487 E4            pop a
2473   1488             ; END RELATIONAL
2474   1488 C0 00 00      cmp b, 0
2475   148B C6 9D 14      je _if42_exit
2476   148E             _if42_true:
2477   148E             ;; putchar('0'); 
2478   148E 26 30 00      mov b, $30
2479   1491 DD            push bl
2480   1492 07 3B 15      call putchar
2481   1495 51 01 00      add sp, 1
2482   1498             ;; return; 
2483   1498 F9            leave
2484   1499 09            ret
2485   149A 0A 9D 14      jmp _if42_exit
2486   149D             _if42_exit:
2487   149D             ;; while (num > 0) { 
2488   149D             _while43_cond:
2489   149D FA 05 00      lea d, [bp + 5] ; $num
2490   14A0 2A            mov b, [d]
2491   14A1             ; START RELATIONAL
2492   14A1 D7            push a
2493   14A2 11            mov a, b
2494   14A3 26 00 00      mov b, $0
2495   14A6 B0            cmp a, b
2496   14A7 FD 81         sgu ; > (unsigned)
2497   14A9 E4            pop a
2498   14AA             ; END RELATIONAL
2499   14AA C0 00 00      cmp b, 0
2500   14AD C6 F7 14      je _while43_exit
2501   14B0             _while43_block:
2502   14B0             ;; digits[i] = '0' + (num % 10); 
2503   14B0 FA FC FF      lea d, [bp + -4] ; $digits
2504   14B3 D7            push a
2505   14B4 DA            push d
2506   14B5 FA FA FF      lea d, [bp + -6] ; $i
2507   14B8 2A            mov b, [d]
2508   14B9 E7            pop d
2509   14BA 5A            add d, b
2510   14BB E4            pop a
2511   14BC DA            push d
2512   14BD 26 30 00      mov b, $30
2513   14C0             ; START TERMS
2514   14C0 D7            push a
2515   14C1 11            mov a, b
2516   14C2 FA 05 00      lea d, [bp + 5] ; $num
2517   14C5 2A            mov b, [d]
2518   14C6             ; START FACTORS
2519   14C6 D7            push a
2520   14C7 11            mov a, b
2521   14C8 26 0A 00      mov b, $a
2522   14CB AE            div a, b ; 
2523   14CC 11            mov a, b
2524   14CD 27            mov b, a
2525   14CE E4            pop a
2526   14CF             ; END FACTORS
2527   14CF 56            add b, a
2528   14D0 E4            pop a
2529   14D1             ; END TERMS
2530   14D1 E7            pop d
2531   14D2 FD 3E         mov [d], bl
2532   14D4             ;; num = num / 10; 
2533   14D4 FA 05 00      lea d, [bp + 5] ; $num
2534   14D7 DA            push d
2535   14D8 FA 05 00      lea d, [bp + 5] ; $num
2536   14DB 2A            mov b, [d]
2537   14DC             ; START FACTORS
2538   14DC D7            push a
2539   14DD 11            mov a, b
2540   14DE 26 0A 00      mov b, $a
2541   14E1 AE            div a, b
2542   14E2 27            mov b, a
2543   14E3 E4            pop a
2544   14E4             ; END FACTORS
2545   14E4 E7            pop d
2546   14E5 FD 43         mov [d], b
2547   14E7             ;; i++; 
2548   14E7 FA FA FF      lea d, [bp + -6] ; $i
2549   14EA 2A            mov b, [d]
2550   14EB D8            push b
2551   14EC FD 77         inc b
2552   14EE FA FA FF      lea d, [bp + -6] ; $i
2553   14F1 FD 43         mov [d], b
2554   14F3 E5            pop b
2555   14F4 0A 9D 14      jmp _while43_cond
2556   14F7             _while43_exit:
2557   14F7             ;; while (i > 0) { 
2558   14F7             _while44_cond:
2559   14F7 FA FA FF      lea d, [bp + -6] ; $i
2560   14FA 2A            mov b, [d]
2561   14FB             ; START RELATIONAL
2562   14FB D7            push a
2563   14FC 11            mov a, b
2564   14FD 26 00 00      mov b, $0
2565   1500 B0            cmp a, b
2566   1501 FD 7F         sgt ; >
2567   1503 E4            pop a
2568   1504             ; END RELATIONAL
2569   1504 C0 00 00      cmp b, 0
2570   1507 C6 30 15      je _while44_exit
2571   150A             _while44_block:
2572   150A             ;; i--; 
2573   150A FA FA FF      lea d, [bp + -6] ; $i
2574   150D 2A            mov b, [d]
2575   150E D8            push b
2576   150F FD 7D         dec b
2577   1511 FA FA FF      lea d, [bp + -6] ; $i
2578   1514 FD 43         mov [d], b
2579   1516 E5            pop b
2580   1517             ;; putchar(digits[i]); 
2581   1517 FA FC FF      lea d, [bp + -4] ; $digits
2582   151A D7            push a
2583   151B DA            push d
2584   151C FA FA FF      lea d, [bp + -6] ; $i
2585   151F 2A            mov b, [d]
2586   1520 E7            pop d
2587   1521 5A            add d, b
2588   1522 E4            pop a
2589   1523 32            mov bl, [d]
2590   1524 A7 00         mov bh, 0
2591   1526 DD            push bl
2592   1527 07 3B 15      call putchar
2593   152A 51 01 00      add sp, 1
2594   152D 0A F7 14      jmp _while44_cond
2595   1530             _while44_exit:
2596   1530 F9            leave
2597   1531 09            ret
2598   1532             
2599   1532             date:
2600   1532 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2601   1535             
2602   1535             ; --- BEGIN INLINE ASM BLOCK
2603   1535 19 00         mov al, 0 
2604   1537 05 07         syscall sys_datetime
2605   1539             ; --- END INLINE ASM BLOCK
2606   1539             
2607   1539 F9            leave
2608   153A 09            ret
2609   153B             
2610   153B             putchar:
2611   153B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2612   153E             
2613   153E             ; --- BEGIN INLINE ASM BLOCK
2614   153E FA 05 00      lea d, [bp + 5] ; $c
2615   1541 1E            mov al, [d]
2616   1542 23            mov ah, al
2617   1543 07 CC 16      call _putchar
2618   1546             ; --- END INLINE ASM BLOCK
2619   1546             
2620   1546 F9            leave
2621   1547 09            ret
2622   1548             
2623   1548             getchar:
2624   1548 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2625   154B             ; $c 
2626   154B 52 01 00      sub sp, 1
2627   154E             
2628   154E             ; --- BEGIN INLINE ASM BLOCK
2629   154E 07 C5 16      call getch
2630   1551 1A            mov al, ah
2631   1552 FA 00 00      lea d, [bp + 0] ; $c
2632   1555 3E            mov [d], al
2633   1556             ; --- END INLINE ASM BLOCK
2634   1556             
2635   1556             ;; return c; 
2636   1556 FA 00 00      lea d, [bp + 0] ; $c
2637   1559 32            mov bl, [d]
2638   155A A7 00         mov bh, 0
2639   155C F9            leave
2640   155D 09            ret
2641   155E             
2642   155E             scann:
2643   155E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2644   1561             ; $m 
2645   1561 52 02 00      sub sp, 2
2646   1564             
2647   1564             ; --- BEGIN INLINE ASM BLOCK
2648   1564 07 10 19      call scan_u16d
2649   1567 FA FF FF      lea d, [bp + -1] ; $m
2650   156A 43            mov [d], a
2651   156B             ; --- END INLINE ASM BLOCK
2652   156B             
2653   156B             ;; return m; 
2654   156B FA FF FF      lea d, [bp + -1] ; $m
2655   156E 2A            mov b, [d]
2656   156F F9            leave
2657   1570 09            ret
2658   1571             
2659   1571             puts:
2660   1571 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2661   1574             
2662   1574             ; --- BEGIN INLINE ASM BLOCK
2663   1574 FA 05 00      lea d, [bp + 5] ; $s
2664   1577 15            mov a, [d]
2665   1578 3C            mov d, a
2666   1579 07 16 18      call _puts
2667   157C 10 00 0A      mov a, $0A00
2668   157F 05 03         syscall sys_io
2669   1581             ; --- END INLINE ASM BLOCK
2670   1581             
2671   1581 F9            leave
2672   1582 09            ret
2673   1583             
2674   1583             print:
2675   1583 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2676   1586             
2677   1586             ; --- BEGIN INLINE ASM BLOCK
2678   1586 FA 05 00      lea d, [bp + 5] ; $s
2679   1589 FD 2A         mov d, [d]
2680   158B 07 16 18      call _puts
2681   158E             ; --- END INLINE ASM BLOCK
2682   158E             
2683   158E F9            leave
2684   158F 09            ret
2685   1590             
2686   1590             getparam:
2687   1590 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2688   1593             ; $data 
2689   1593 52 01 00      sub sp, 1
2690   1596             
2691   1596             ; --- BEGIN INLINE ASM BLOCK
2692   1596 19 04         mov al, 4
2693   1598 FA 05 00      lea d, [bp + 5] ; $address
2694   159B FD 2A         mov d, [d]
2695   159D 05 0C         syscall sys_system
2696   159F FA 00 00      lea d, [bp + 0] ; $data
2697   15A2 FD 3E         mov [d], bl
2698   15A4             ; --- END INLINE ASM BLOCK
2699   15A4             
2700   15A4             ;; return data; 
2701   15A4 FA 00 00      lea d, [bp + 0] ; $data
2702   15A7 32            mov bl, [d]
2703   15A8 A7 00         mov bh, 0
2704   15AA F9            leave
2705   15AB 09            ret
2706   15AC             
2707   15AC             clear:
2708   15AC F8 00 00      enter 0 ; (push bp; mov bp, sp)
2709   15AF             ;; print("\033[2J\033[H"); 
2710   15AF 26 42 26      mov b, _s3 ; "\033[2J\033[H"
2711   15B2 FD AB         swp b
2712   15B4 D8            push b
2713   15B5 07 83 15      call print
2714   15B8 51 02 00      add sp, 2
2715   15BB F9            leave
2716   15BC 09            ret
2717   15BD             
2718   15BD             abs:
2719   15BD F8 00 00      enter 0 ; (push bp; mov bp, sp)
2720   15C0             ;; return i < 0 ? -i : i; 
2721   15C0             _ternary45_cond:
2722   15C0 FA 05 00      lea d, [bp + 5] ; $i
2723   15C3 2A            mov b, [d]
2724   15C4             ; START RELATIONAL
2725   15C4 D7            push a
2726   15C5 11            mov a, b
2727   15C6 26 00 00      mov b, $0
2728   15C9 B0            cmp a, b
2729   15CA FD 73         slt ; < (signed)
2730   15CC E4            pop a
2731   15CD             ; END RELATIONAL
2732   15CD C0 00 00      cmp b, 0
2733   15D0 C6 DC 15      je _ternary45_false
2734   15D3             _ternary45_true:
2735   15D3 FA 05 00      lea d, [bp + 5] ; $i
2736   15D6 2A            mov b, [d]
2737   15D7 FD 97         neg b
2738   15D9 0A E0 15      jmp _ternary45_exit
2739   15DC             _ternary45_false:
2740   15DC FA 05 00      lea d, [bp + 5] ; $i
2741   15DF 2A            mov b, [d]
2742   15E0             _ternary45_exit:
2743   15E0 F9            leave
2744   15E1 09            ret
2745   15E2             
2746   15E2             include_stdio_asm:
2747   15E2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2748   15E5             
2749   15E5             ; --- BEGIN INLINE ASM BLOCK
2750   15E5             .include "lib/asm/stdio.asm"
0001+  15E5             ;-----------------------------------------------------------------------------
0002+  15E5             ; stdio.s
0003+  15E5             ;-----------------------------------------------------------------------------
0004+  15E5             .include "lib/asm/string.asm"
0001++ 15E5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 15E5             ; string.s
0003++ 15E5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 15E5             
0005++ 15E5             
0006++ 15E5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 15E5             ; _strrev
0008++ 15E5             ; reverse a string
0009++ 15E5             ; D = string address
0010++ 15E5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 15E5             ; 01234
0012++ 15E5             _strrev:
0013++ 15E5 4B          	pusha
0014++ 15E6 07 2C 16    	call _strlen	; length in C
0015++ 15E9 12          	mov a, c
0016++ 15EA AF 01 00    	cmp a, 1
0017++ 15ED D0 07 16    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 15F0 7D          	dec a
0019++ 15F1 FD 4E       	mov si, d	; beginning of string
0020++ 15F3 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 15F5 59          	add d, a	; end of string
0022++ 15F6 12          	mov a, c
0023++ 15F7 FD 9B       	shr a		; divide by 2
0024++ 15F9 39          	mov c, a	; C now counts the steps
0025++ 15FA             _strrev_L0:
0026++ 15FA 32          	mov bl, [d]	; save load right-side char into BL
0027++ 15FB F6          	lodsb		; load left-side char into AL; increase SI
0028++ 15FC 3E          	mov [d], al	; store left char into right side
0029++ 15FD 1B          	mov al, bl
0030++ 15FE F7          	stosb		; store right-side char into left-side; increase DI
0031++ 15FF 7E          	dec c
0032++ 1600 7F          	dec d
0033++ 1601 C2 00 00    	cmp c, 0
0034++ 1604 C7 FA 15    	jne _strrev_L0
0035++ 1607             _strrev_end:
0036++ 1607 4C          	popa
0037++ 1608 09          	ret
0038++ 1609             	
0039++ 1609             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1609             ; _strchr
0041++ 1609             ; search string in D for char in AL
0042++ 1609             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1609             _strchr:
0044++ 1609             _strchr_L0:
0045++ 1609 32          	mov bl, [d]
0046++ 160A C1 00       	cmp bl, 0
0047++ 160C C6 17 16    	je _strchr_end
0048++ 160F BA          	cmp al, bl
0049++ 1610 C6 17 16    	je _strchr_end
0050++ 1613 79          	inc d
0051++ 1614 0A 09 16    	jmp _strchr_L0
0052++ 1617             _strchr_end:
0053++ 1617 1B          	mov al, bl
0054++ 1618 09          	ret
0055++ 1619             
0056++ 1619             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1619             ; _strstr
0058++ 1619             ; find sub-string
0059++ 1619             ; str1 in SI
0060++ 1619             ; str2 in DI
0061++ 1619             ; SI points to end of source string
0062++ 1619             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1619             _strstr:
0064++ 1619 DB          	push al
0065++ 161A DA          	push d
0066++ 161B E3          	push di
0067++ 161C             _strstr_loop:
0068++ 161C F3          	cmpsb					; compare a byte of the strings
0069++ 161D C7 28 16    	jne _strstr_ret
0070++ 1620 FC 00 00    	lea d, [di + 0]
0071++ 1623 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1625 C7 1C 16    	jne _strstr_loop				; equal chars but not at end
0073++ 1628             _strstr_ret:
0074++ 1628 F0          	pop di
0075++ 1629 E7          	pop d
0076++ 162A E8          	pop al
0077++ 162B 09          	ret
0078++ 162C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 162C             ; length of null terminated string
0080++ 162C             ; result in C
0081++ 162C             ; pointer in D
0082++ 162C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 162C             _strlen:
0084++ 162C DA          	push d
0085++ 162D 38 00 00    	mov c, 0
0086++ 1630             _strlen_L1:
0087++ 1630 BD 00       	cmp byte [d], 0
0088++ 1632 C6 3A 16    	je _strlen_ret
0089++ 1635 79          	inc d
0090++ 1636 78          	inc c
0091++ 1637 0A 30 16    	jmp _strlen_L1
0092++ 163A             _strlen_ret:
0093++ 163A E7          	pop d
0094++ 163B 09          	ret
0095++ 163C             
0096++ 163C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 163C             ; STRCMP
0098++ 163C             ; compare two strings
0099++ 163C             ; str1 in SI
0100++ 163C             ; str2 in DI
0101++ 163C             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 163C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 163C             _strcmp:
0104++ 163C DB          	push al
0105++ 163D DA          	push d
0106++ 163E E3          	push di
0107++ 163F E2          	push si
0108++ 1640             _strcmp_loop:
0109++ 1640 F3          	cmpsb					; compare a byte of the strings
0110++ 1641 C7 4C 16    	jne _strcmp_ret
0111++ 1644 FB FF FF    	lea d, [si +- 1]
0112++ 1647 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1649 C7 40 16    	jne _strcmp_loop				; equal chars but not at end
0114++ 164C             _strcmp_ret:
0115++ 164C EF          	pop si
0116++ 164D F0          	pop di
0117++ 164E E7          	pop d
0118++ 164F E8          	pop al
0119++ 1650 09          	ret
0120++ 1651             
0121++ 1651             
0122++ 1651             ; STRCPY
0123++ 1651             ; copy null terminated string from SI to DI
0124++ 1651             ; source in SI
0125++ 1651             ; destination in DI
0126++ 1651             _strcpy:
0127++ 1651 E2          	push si
0128++ 1652 E3          	push di
0129++ 1653 DB          	push al
0130++ 1654             _strcpy_L1:
0131++ 1654 F6          	lodsb
0132++ 1655 F7          	stosb
0133++ 1656 B9 00       	cmp al, 0
0134++ 1658 C7 54 16    	jne _strcpy_L1
0135++ 165B             _strcpy_end:
0136++ 165B E8          	pop al
0137++ 165C F0          	pop di
0138++ 165D EF          	pop si
0139++ 165E 09          	ret
0140++ 165F             
0141++ 165F             ; STRCAT
0142++ 165F             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 165F             ; source in SI
0144++ 165F             ; destination in DI
0145++ 165F             _strcat:
0146++ 165F E2          	push si
0147++ 1660 E3          	push di
0148++ 1661 D7          	push a
0149++ 1662 DA          	push d
0150++ 1663 50          	mov a, di
0151++ 1664 3C          	mov d, a
0152++ 1665             _strcat_goto_end_L1:
0153++ 1665 BD 00       	cmp byte[d], 0
0154++ 1667 C6 6E 16    	je _strcat_start
0155++ 166A 79          	inc d
0156++ 166B 0A 65 16    	jmp _strcat_goto_end_L1
0157++ 166E             _strcat_start:
0158++ 166E FD 50       	mov di, d
0159++ 1670             _strcat_L1:
0160++ 1670 F6          	lodsb
0161++ 1671 F7          	stosb
0162++ 1672 B9 00       	cmp al, 0
0163++ 1674 C7 70 16    	jne _strcat_L1
0164++ 1677             _strcat_end:
0165++ 1677 E7          	pop d
0166++ 1678 E4          	pop a
0167++ 1679 F0          	pop di
0168++ 167A EF          	pop si
0169++ 167B 09          	ret
0170++ 167C             
0171++ 167C             
0005+  167C             
0006+  167C             ;-----------------------------------------------------------------------------
0007+  167C             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  167C             ; ASCII in BL
0009+  167C             ; result in AL
0010+  167C             ; ascii for F = 0100 0110
0011+  167C             ; ascii for 9 = 0011 1001
0012+  167C             ;-----------------------------------------------------------------------------
0013+  167C             hex_ascii_encode:
0014+  167C 1B            mov al, bl
0015+  167D 93 40         test al, $40        ; test if letter or number
0016+  167F C7 85 16      jnz hex_letter
0017+  1682 87 0F         and al, $0F        ; get number
0018+  1684 09            ret
0019+  1685             hex_letter:
0020+  1685 87 0F         and al, $0F        ; get letter
0021+  1687 6A 09         add al, 9
0022+  1689 09            ret
0023+  168A             
0024+  168A             ;-----------------------------------------------------------------------------
0025+  168A             ; ATOI
0026+  168A             ; 2 letter hex string in B
0027+  168A             ; 8bit integer returned in AL
0028+  168A             ;-----------------------------------------------------------------------------
0029+  168A             _atoi:
0030+  168A D8            push b
0031+  168B 07 7C 16      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  168E 30            mov bl, bh
0033+  168F DB            push al          ; save a
0034+  1690 07 7C 16      call hex_ascii_encode
0035+  1693 EA            pop bl  
0036+  1694 FD 9E 04      shl al, 4
0037+  1697 8C            or al, bl
0038+  1698 E5            pop b
0039+  1699 09            ret  
0040+  169A             
0041+  169A             
0042+  169A             ;-----------------------------------------------------------------------------
0043+  169A             ; ITOA
0044+  169A             ; 8bit value in BL
0045+  169A             ; 2 byte ASCII result in A
0046+  169A             ;-----------------------------------------------------------------------------
0047+  169A             _itoa:
0048+  169A DA            push d
0049+  169B D8            push b
0050+  169C A7 00         mov bh, 0
0051+  169E FD A4 04      shr bl, 4  
0052+  16A1 74            mov d, b
0053+  16A2 1F 4A 19      mov al, [d + s_hex_digits]
0054+  16A5 23            mov ah, al
0055+  16A6               
0056+  16A6 E5            pop b
0057+  16A7 D8            push b
0058+  16A8 A7 00         mov bh, 0
0059+  16AA FD 87 0F      and bl, $0F
0060+  16AD 74            mov d, b
0061+  16AE 1F 4A 19      mov al, [d + s_hex_digits]
0062+  16B1 E5            pop b
0063+  16B2 E7            pop d
0064+  16B3 09            ret
0065+  16B4             
0066+  16B4             ;-----------------------------------------------------------------------------
0067+  16B4             ; HEX STRING TO BINARY
0068+  16B4             ; di = destination address
0069+  16B4             ; si = source
0070+  16B4             ;-----------------------------------------------------------------------------
0071+  16B4             _hex_to_int:
0072+  16B4             _hex_to_int_L1:
0073+  16B4 F6            lodsb          ; load from [SI] to AL
0074+  16B5 B9 00         cmp al, 0        ; check if ASCII 0
0075+  16B7 C6 C4 16      jz _hex_to_int_ret
0076+  16BA 36            mov bh, al
0077+  16BB F6            lodsb
0078+  16BC 2F            mov bl, al
0079+  16BD 07 8A 16      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  16C0 F7            stosb          ; store AL to [DI]
0081+  16C1 0A B4 16      jmp _hex_to_int_L1
0082+  16C4             _hex_to_int_ret:
0083+  16C4 09            ret    
0084+  16C5             
0085+  16C5             ;-----------------------------------------------------------------------------
0086+  16C5             ; GETCHAR
0087+  16C5             ; char in ah
0088+  16C5             ;-----------------------------------------------------------------------------
0089+  16C5             getch:
0090+  16C5 DB            push al
0091+  16C6             getch_retry:
0092+  16C6 19 01         mov al, 1
0093+  16C8 05 03         syscall sys_io      ; receive in AH
0094+  16CA E8            pop al
0095+  16CB 09            ret
0096+  16CC             
0097+  16CC             ;-----------------------------------------------------------------------------
0098+  16CC             ; PUTCHAR
0099+  16CC             ; char in ah
0100+  16CC             ;-----------------------------------------------------------------------------
0101+  16CC             _putchar:
0102+  16CC D7            push a
0103+  16CD 19 00         mov al, 0
0104+  16CF 05 03         syscall sys_io      ; char in AH
0105+  16D1 E4            pop a
0106+  16D2 09            ret
0107+  16D3             
0108+  16D3             ;-----------------------------------------------------------------------------
0109+  16D3             ;; INPUT A STRING
0110+  16D3             ;; terminates with null
0111+  16D3             ;; pointer in D
0112+  16D3             ;-----------------------------------------------------------------------------
0113+  16D3             _gets:
0114+  16D3 D7            push a
0115+  16D4 DA            push d
0116+  16D5             _gets_loop:
0117+  16D5 19 01         mov al, 1
0118+  16D7 05 03         syscall sys_io      ; receive in AH
0119+  16D9 B9 00         cmp al, 0        ; check error code (AL)
0120+  16DB C6 D5 16      je _gets_loop      ; if no char received, retry
0121+  16DE             
0122+  16DE 76 1B         cmp ah, 27
0123+  16E0 C6 01 17      je _gets_ansi_esc
0124+  16E3 76 0A         cmp ah, $0A        ; LF
0125+  16E5 C6 6C 17      je _gets_end
0126+  16E8 76 0D         cmp ah, $0D        ; CR
0127+  16EA C6 6C 17      je _gets_end
0128+  16ED 76 5C         cmp ah, $5C        ; '\\'
0129+  16EF C6 2D 17      je _gets_escape
0130+  16F2               
0131+  16F2 76 08         cmp ah, $08      ; check for backspace
0132+  16F4 C6 FD 16      je _gets_backspace
0133+  16F7             
0134+  16F7 1A            mov al, ah
0135+  16F8 3E            mov [d], al
0136+  16F9 79            inc d
0137+  16FA 0A D5 16      jmp _gets_loop
0138+  16FD             _gets_backspace:
0139+  16FD 7F            dec d
0140+  16FE 0A D5 16      jmp _gets_loop
0141+  1701             _gets_ansi_esc:
0142+  1701 19 01         mov al, 1
0143+  1703 05 03         syscall sys_io        ; receive in AH without echo
0144+  1705 B9 00         cmp al, 0          ; check error code (AL)
0145+  1707 C6 01 17      je _gets_ansi_esc    ; if no char received, retry
0146+  170A 76 5B         cmp ah, '['
0147+  170C C7 D5 16      jne _gets_loop
0148+  170F             _gets_ansi_esc_2:
0149+  170F 19 01         mov al, 1
0150+  1711 05 03         syscall sys_io          ; receive in AH without echo
0151+  1713 B9 00         cmp al, 0            ; check error code (AL)
0152+  1715 C6 0F 17      je _gets_ansi_esc_2  ; if no char received, retry
0153+  1718 76 44         cmp ah, 'D'
0154+  171A C6 25 17      je _gets_left_arrow
0155+  171D 76 43         cmp ah, 'C'
0156+  171F C6 29 17      je _gets_right_arrow
0157+  1722 0A D5 16      jmp _gets_loop
0158+  1725             _gets_left_arrow:
0159+  1725 7F            dec d
0160+  1726 0A D5 16      jmp _gets_loop
0161+  1729             _gets_right_arrow:
0162+  1729 79            inc d
0163+  172A 0A D5 16      jmp _gets_loop
0164+  172D             _gets_escape:
0165+  172D 19 01         mov al, 1
0166+  172F 05 03         syscall sys_io      ; receive in AH
0167+  1731 B9 00         cmp al, 0        ; check error code (AL)
0168+  1733 C6 2D 17      je _gets_escape      ; if no char received, retry
0169+  1736 76 6E         cmp ah, 'n'
0170+  1738 C6 57 17      je _gets_LF
0171+  173B 76 72         cmp ah, 'r'
0172+  173D C6 5E 17      je _gets_CR
0173+  1740 76 30         cmp ah, '0'
0174+  1742 C6 65 17      je _gets_NULL
0175+  1745 76 5C         cmp ah, $5C  ; '\'
0176+  1747 C6 50 17      je _gets_slash
0177+  174A 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  174B 3E            mov [d], al
0179+  174C 79            inc d
0180+  174D 0A D5 16      jmp _gets_loop
0181+  1750             _gets_slash:
0182+  1750 19 5C         mov al, $5C
0183+  1752 3E            mov [d], al
0184+  1753 79            inc d
0185+  1754 0A D5 16      jmp _gets_loop
0186+  1757             _gets_LF:
0187+  1757 19 0A         mov al, $0A
0188+  1759 3E            mov [d], al
0189+  175A 79            inc d
0190+  175B 0A D5 16      jmp _gets_loop
0191+  175E             _gets_CR:
0192+  175E 19 0D         mov al, $0D
0193+  1760 3E            mov [d], al
0194+  1761 79            inc d
0195+  1762 0A D5 16      jmp _gets_loop
0196+  1765             _gets_NULL:
0197+  1765 19 00         mov al, $00
0198+  1767 3E            mov [d], al
0199+  1768 79            inc d
0200+  1769 0A D5 16      jmp _gets_loop
0201+  176C             _gets_end:
0202+  176C 19 00         mov al, 0
0203+  176E 3E            mov [d], al        ; terminate string
0204+  176F E7            pop d
0205+  1770 E4            pop a
0206+  1771 09            ret
0207+  1772             
0208+  1772             ;-----------------------------------------------------------------------------
0209+  1772             ;; INPUT TEXT
0210+  1772             ;; terminated with CTRL+D
0211+  1772             ;; pointer in D
0212+  1772             ;-----------------------------------------------------------------------------
0213+  1772             _gettxt:
0214+  1772 D7            push a
0215+  1773 DA            push d
0216+  1774             _gettxt_loop:
0217+  1774 19 01         mov al, 1
0218+  1776 05 03         syscall sys_io      ; receive in AH
0219+  1778 B9 00         cmp al, 0        ; check error code (AL)
0220+  177A C6 74 17      je _gettxt_loop    ; if no char received, retry
0221+  177D 76 04         cmp ah, 4      ; EOT
0222+  177F C6 BD 17      je _gettxt_end
0223+  1782 76 08         cmp ah, $08      ; check for backspace
0224+  1784 C6 B9 17      je _gettxt_backspace
0225+  1787 76 5C         cmp ah, $5C        ; '\'
0226+  1789 C6 92 17      je _gettxt_escape
0227+  178C 1A            mov al, ah
0228+  178D 3E            mov [d], al
0229+  178E 79            inc d
0230+  178F 0A 74 17      jmp _gettxt_loop
0231+  1792             _gettxt_escape:
0232+  1792 19 01         mov al, 1
0233+  1794 05 03         syscall sys_io      ; receive in AH
0234+  1796 B9 00         cmp al, 0        ; check error code (AL)
0235+  1798 C6 92 17      je _gettxt_escape    ; if no char received, retry
0236+  179B 76 6E         cmp ah, 'n'
0237+  179D C6 AB 17      je _gettxt_LF
0238+  17A0 76 72         cmp ah, 'r'
0239+  17A2 C6 B2 17      je _gettxt_CR
0240+  17A5 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  17A6 3E            mov [d], al
0242+  17A7 79            inc d
0243+  17A8 0A 74 17      jmp _gettxt_loop
0244+  17AB             _gettxt_LF:
0245+  17AB 19 0A         mov al, $0A
0246+  17AD 3E            mov [d], al
0247+  17AE 79            inc d
0248+  17AF 0A 74 17      jmp _gettxt_loop
0249+  17B2             _gettxt_CR:
0250+  17B2 19 0D         mov al, $0D
0251+  17B4 3E            mov [d], al
0252+  17B5 79            inc d
0253+  17B6 0A 74 17      jmp _gettxt_loop
0254+  17B9             _gettxt_backspace:
0255+  17B9 7F            dec d
0256+  17BA 0A 74 17      jmp _gettxt_loop
0257+  17BD             _gettxt_end:
0258+  17BD 19 00         mov al, 0
0259+  17BF 3E            mov [d], al        ; terminate string
0260+  17C0 E7            pop d
0261+  17C1 E4            pop a
0262+  17C2 09            ret
0263+  17C3             
0264+  17C3             ;-----------------------------------------------------------------------------
0265+  17C3             ; PRINT NEW LINE
0266+  17C3             ;-----------------------------------------------------------------------------
0267+  17C3             printnl:
0268+  17C3 D7            push a
0269+  17C4 10 00 0A      mov a, $0A00
0270+  17C7 05 03         syscall sys_io
0271+  17C9 10 00 0D      mov a, $0D00
0272+  17CC 05 03         syscall sys_io
0273+  17CE E4            pop a
0274+  17CF 09            ret
0275+  17D0             
0276+  17D0             ;-----------------------------------------------------------------------------
0277+  17D0             ; _strtoint
0278+  17D0             ; 4 digit hex string number in d
0279+  17D0             ; integer returned in A
0280+  17D0             ;-----------------------------------------------------------------------------
0281+  17D0             _strtointx:
0282+  17D0 D8            push b
0283+  17D1 32            mov bl, [d]
0284+  17D2 37            mov bh, bl
0285+  17D3 33 01 00      mov bl, [d + 1]
0286+  17D6 07 8A 16      call _atoi        ; convert to int in AL
0287+  17D9 23            mov ah, al        ; move to AH
0288+  17DA 33 02 00      mov bl, [d + 2]
0289+  17DD 37            mov bh, bl
0290+  17DE 33 03 00      mov bl, [d + 3]
0291+  17E1 07 8A 16      call _atoi        ; convert to int in AL
0292+  17E4 E5            pop b
0293+  17E5 09            ret
0294+  17E6             
0295+  17E6             ;-----------------------------------------------------------------------------
0296+  17E6             ; _strtoint
0297+  17E6             ; 5 digit base10 string number in d
0298+  17E6             ; integer returned in A
0299+  17E6             ;-----------------------------------------------------------------------------
0300+  17E6             _strtoint:
0301+  17E6 E2            push si
0302+  17E7 D8            push b
0303+  17E8 D9            push c
0304+  17E9 DA            push d
0305+  17EA 07 2C 16      call _strlen      ; get string length in C
0306+  17ED 7E            dec c
0307+  17EE FD 4E         mov si, d
0308+  17F0 12            mov a, c
0309+  17F1 FD 99         shl a
0310+  17F3 3B 62 19      mov d, table_power
0311+  17F6 59            add d, a
0312+  17F7 38 00 00      mov c, 0
0313+  17FA             _strtoint_L0:
0314+  17FA F6            lodsb      ; load ASCII to al
0315+  17FB B9 00         cmp al, 0
0316+  17FD C6 10 18      je _strtoint_end
0317+  1800 6F 30         sub al, $30    ; make into integer
0318+  1802 22 00         mov ah, 0
0319+  1804 2A            mov b, [d]
0320+  1805 AC            mul a, b      ; result in B since it fits in 16bits
0321+  1806 11            mov a, b
0322+  1807 28            mov b, c
0323+  1808 54            add a, b
0324+  1809 39            mov c, a
0325+  180A 63 02 00      sub d, 2
0326+  180D 0A FA 17      jmp _strtoint_L0
0327+  1810             _strtoint_end:
0328+  1810 12            mov a, c
0329+  1811 E7            pop d
0330+  1812 E6            pop c
0331+  1813 E5            pop b
0332+  1814 EF            pop si
0333+  1815 09            ret
0334+  1816             
0335+  1816             ;-----------------------------------------------------------------------------
0336+  1816             ; PRINT NULL TERMINATED STRING
0337+  1816             ; pointer in D
0338+  1816             ;-----------------------------------------------------------------------------
0339+  1816             _puts:
0340+  1816 D7            push a
0341+  1817 DA            push d
0342+  1818             _puts_L1:
0343+  1818 1E            mov al, [d]
0344+  1819 B9 00         cmp al, 0
0345+  181B C6 27 18      jz _puts_END
0346+  181E 23            mov ah, al
0347+  181F 19 00         mov al, 0
0348+  1821 05 03         syscall sys_io
0349+  1823 79            inc d
0350+  1824 0A 18 18      jmp _puts_L1
0351+  1827             _puts_END:
0352+  1827 E7            pop d
0353+  1828 E4            pop a
0354+  1829 09            ret
0355+  182A             
0356+  182A             ;-----------------------------------------------------------------------------
0357+  182A             ; PRINT N SIZE STRING
0358+  182A             ; pointer in D
0359+  182A             ; size in C
0360+  182A             ;-----------------------------------------------------------------------------
0361+  182A             _putsn:
0362+  182A DB            push al
0363+  182B DA            push d
0364+  182C D9            push c
0365+  182D             _putsn_L0:
0366+  182D 1E            mov al, [d]
0367+  182E 23            mov ah, al
0368+  182F 19 00         mov al, 0
0369+  1831 05 03         syscall sys_io
0370+  1833 79            inc d
0371+  1834 7E            dec c  
0372+  1835 C2 00 00      cmp c, 0
0373+  1838 C7 2D 18      jne _putsn_L0
0374+  183B             _putsn_end:
0375+  183B E6            pop c
0376+  183C E7            pop d
0377+  183D E8            pop al
0378+  183E 09            ret
0379+  183F             
0380+  183F             ;-----------------------------------------------------------------------------
0381+  183F             ; print 16bit decimal number
0382+  183F             ; input number in A
0383+  183F             ;-----------------------------------------------------------------------------
0384+  183F             print_u16d:
0385+  183F D7            push a
0386+  1840 D8            push b
0387+  1841 26 10 27      mov b, 10000
0388+  1844 AE            div a, b      ; get 10000's coeff.
0389+  1845 07 67 18      call print_number
0390+  1848 11            mov a, b
0391+  1849 26 E8 03      mov b, 1000
0392+  184C AE            div a, b      ; get 1000's coeff.
0393+  184D 07 67 18      call print_number
0394+  1850 11            mov a, b
0395+  1851 26 64 00      mov b, 100
0396+  1854 AE            div a, b
0397+  1855 07 67 18      call print_number
0398+  1858 11            mov a, b
0399+  1859 26 0A 00      mov b, 10
0400+  185C AE            div a, b
0401+  185D 07 67 18      call print_number
0402+  1860 1B            mov al, bl      ; 1's coeff in bl
0403+  1861 07 67 18      call print_number
0404+  1864 E5            pop b
0405+  1865 E4            pop a
0406+  1866 09            ret
0407+  1867             
0408+  1867             ;-----------------------------------------------------------------------------
0409+  1867             ; print AL
0410+  1867             ;-----------------------------------------------------------------------------
0411+  1867             print_number:
0412+  1867 6A 30         add al, $30
0413+  1869 23            mov ah, al
0414+  186A 07 CC 16      call _putchar
0415+  186D 09            ret
0416+  186E             
0417+  186E             ;-----------------------------------------------------------------------------
0418+  186E             ; PRINT 16BIT HEX INTEGER
0419+  186E             ; integer value in reg B
0420+  186E             ;-----------------------------------------------------------------------------
0421+  186E             print_u16x:
0422+  186E D7            push a
0423+  186F D8            push b
0424+  1870 DD            push bl
0425+  1871 30            mov bl, bh
0426+  1872 07 9A 16      call _itoa        ; convert bh to char in A
0427+  1875 2F            mov bl, al        ; save al
0428+  1876 19 00         mov al, 0
0429+  1878 05 03         syscall sys_io        ; display AH
0430+  187A 24            mov ah, bl        ; retrieve al
0431+  187B 19 00         mov al, 0
0432+  187D 05 03         syscall sys_io        ; display AL
0433+  187F             
0434+  187F EA            pop bl
0435+  1880 07 9A 16      call _itoa        ; convert bh to char in A
0436+  1883 2F            mov bl, al        ; save al
0437+  1884 19 00         mov al, 0
0438+  1886 05 03         syscall sys_io        ; display AH
0439+  1888 24            mov ah, bl        ; retrieve al
0440+  1889 19 00         mov al, 0
0441+  188B 05 03         syscall sys_io        ; display AL
0442+  188D             
0443+  188D E5            pop b
0444+  188E E4            pop a
0445+  188F 09            ret
0446+  1890             
0447+  1890             ;-----------------------------------------------------------------------------
0448+  1890             ; INPUT 16BIT HEX INTEGER
0449+  1890             ; read 16bit integer into A
0450+  1890             ;-----------------------------------------------------------------------------
0451+  1890             scan_u16x:
0452+  1890 F8 10 00      enter 16
0453+  1893 D8            push b
0454+  1894 DA            push d
0455+  1895             
0456+  1895 FA F1 FF      lea d, [bp + -15]
0457+  1898 07 D3 16      call _gets        ; get number
0458+  189B             
0459+  189B 32            mov bl, [d]
0460+  189C 37            mov bh, bl
0461+  189D 33 01 00      mov bl, [d + 1]
0462+  18A0 07 8A 16      call _atoi        ; convert to int in AL
0463+  18A3 23            mov ah, al        ; move to AH
0464+  18A4             
0465+  18A4 33 02 00      mov bl, [d + 2]
0466+  18A7 37            mov bh, bl
0467+  18A8 33 03 00      mov bl, [d + 3]
0468+  18AB 07 8A 16      call _atoi        ; convert to int in AL
0469+  18AE             
0470+  18AE E7            pop d
0471+  18AF E5            pop b
0472+  18B0 F9            leave
0473+  18B1 09            ret
0474+  18B2             
0475+  18B2             ;-----------------------------------------------------------------------------
0476+  18B2             ; PRINT 8bit HEX INTEGER
0477+  18B2             ; integer value in reg bl
0478+  18B2             ;-----------------------------------------------------------------------------
0479+  18B2             print_u8x:
0480+  18B2 D7            push a
0481+  18B3 DD            push bl
0482+  18B4             
0483+  18B4 07 9A 16      call _itoa        ; convert bl to char in A
0484+  18B7 2F            mov bl, al        ; save al
0485+  18B8 19 00         mov al, 0
0486+  18BA 05 03         syscall sys_io        ; display AH
0487+  18BC 24            mov ah, bl        ; retrieve al
0488+  18BD 19 00         mov al, 0
0489+  18BF 05 03         syscall sys_io        ; display AL
0490+  18C1             
0491+  18C1 EA            pop bl
0492+  18C2 E4            pop a
0493+  18C3 09            ret
0494+  18C4             
0495+  18C4             ;-----------------------------------------------------------------------------
0496+  18C4             ; print 8bit decimal unsigned number
0497+  18C4             ; input number in AL
0498+  18C4             ;-----------------------------------------------------------------------------
0499+  18C4             print_u8d:
0500+  18C4 D7            push a
0501+  18C5 D8            push b
0502+  18C6             
0503+  18C6 22 00         mov ah, 0
0504+  18C8 26 64 00      mov b, 100
0505+  18CB AE            div a, b
0506+  18CC D8            push b      ; save remainder
0507+  18CD B9 00         cmp al, 0
0508+  18CF C6 D9 18      je skip100
0509+  18D2 6A 30         add al, $30
0510+  18D4 23            mov ah, al
0511+  18D5 19 00         mov al, 0
0512+  18D7 05 03         syscall sys_io  ; print coeff
0513+  18D9             skip100:
0514+  18D9 E4            pop a
0515+  18DA 22 00         mov ah, 0
0516+  18DC 26 0A 00      mov b, 10
0517+  18DF AE            div a, b
0518+  18E0 D8            push b      ; save remainder
0519+  18E1 B9 00         cmp al, 0
0520+  18E3 C6 ED 18      je skip10
0521+  18E6 6A 30         add al, $30
0522+  18E8 23            mov ah, al
0523+  18E9 19 00         mov al, 0
0524+  18EB 05 03         syscall sys_io  ; print coeff
0525+  18ED             skip10:
0526+  18ED E4            pop a
0527+  18EE 1B            mov al, bl
0528+  18EF 6A 30         add al, $30
0529+  18F1 23            mov ah, al
0530+  18F2 19 00         mov al, 0
0531+  18F4 05 03         syscall sys_io  ; print coeff
0532+  18F6 E5            pop b
0533+  18F7 E4            pop a
0534+  18F8 09            ret
0535+  18F9             
0536+  18F9             ;-----------------------------------------------------------------------------
0537+  18F9             ; INPUT 8BIT HEX INTEGER
0538+  18F9             ; read 8bit integer into AL
0539+  18F9             ;-----------------------------------------------------------------------------
0540+  18F9             scan_u8x:
0541+  18F9 F8 04 00      enter 4
0542+  18FC D8            push b
0543+  18FD DA            push d
0544+  18FE             
0545+  18FE FA FD FF      lea d, [bp + -3]
0546+  1901 07 D3 16      call _gets        ; get number
0547+  1904             
0548+  1904 32            mov bl, [d]
0549+  1905 37            mov bh, bl
0550+  1906 33 01 00      mov bl, [d + 1]
0551+  1909 07 8A 16      call _atoi        ; convert to int in AL
0552+  190C             
0553+  190C E7            pop d
0554+  190D E5            pop b
0555+  190E F9            leave
0556+  190F 09            ret
0557+  1910             
0558+  1910             ;-----------------------------------------------------------------------------
0559+  1910             ; input decimal number
0560+  1910             ; result in A
0561+  1910             ; 655'\0'
0562+  1910             ; low--------high
0563+  1910             ;-----------------------------------------------------------------------------
0564+  1910             scan_u16d:
0565+  1910 F8 08 00      enter 8
0566+  1913 E2            push si
0567+  1914 D8            push b
0568+  1915 D9            push c
0569+  1916 DA            push d
0570+  1917 FA F9 FF      lea d, [bp +- 7]
0571+  191A 07 D3 16      call _gets
0572+  191D 07 2C 16      call _strlen      ; get string length in C
0573+  1920 7E            dec c
0574+  1921 FD 4E         mov si, d
0575+  1923 12            mov a, c
0576+  1924 FD 99         shl a
0577+  1926 3B 62 19      mov d, table_power
0578+  1929 59            add d, a
0579+  192A 38 00 00      mov c, 0
0580+  192D             mul_loop:
0581+  192D F6            lodsb      ; load ASCII to al
0582+  192E B9 00         cmp al, 0
0583+  1930 C6 43 19      je mul_exit
0584+  1933 6F 30         sub al, $30    ; make into integer
0585+  1935 22 00         mov ah, 0
0586+  1937 2A            mov b, [d]
0587+  1938 AC            mul a, b      ; result in B since it fits in 16bits
0588+  1939 11            mov a, b
0589+  193A 28            mov b, c
0590+  193B 54            add a, b
0591+  193C 39            mov c, a
0592+  193D 63 02 00      sub d, 2
0593+  1940 0A 2D 19      jmp mul_loop
0594+  1943             mul_exit:
0595+  1943 12            mov a, c
0596+  1944 E7            pop d
0597+  1945 E6            pop c
0598+  1946 E5            pop b
0599+  1947 EF            pop si
0600+  1948 F9            leave
0601+  1949 09            ret
0602+  194A             
0603+  194A 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  194E 34 35 36 37 
0603+  1952 38 39 41 42 
0603+  1956 43 44 45 46 
0604+  195A 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  195E 1B 5B 48 00 
0605+  1962             
0606+  1962             table_power:
0607+  1962 01 00         .dw 1
0608+  1964 0A 00         .dw 10
0609+  1966 64 00         .dw 100
0610+  1968 E8 03         .dw 1000
0611+  196A 10 27         .dw 100002751   196C             ; --- END INLINE ASM BLOCK
2752   196C             
2753   196C F9            leave
2754   196D 09            ret
2755   196E             
2756   196E             show:
2757   196E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2758   1971             ; $i 
2759   1971             ; $j 
2760   1971 52 04 00      sub sp, 4
2761   1974             ;; for(i = 0; i <   30     ; i++){ 
2762   1974             _for46_init:
2763   1974 FA FF FF      lea d, [bp + -1] ; $i
2764   1977 DA            push d
2765   1978 26 00 00      mov b, $0
2766   197B E7            pop d
2767   197C FD 43         mov [d], b
2768   197E             _for46_cond:
2769   197E FA FF FF      lea d, [bp + -1] ; $i
2770   1981 2A            mov b, [d]
2771   1982             ; START RELATIONAL
2772   1982 D7            push a
2773   1983 11            mov a, b
2774   1984 26 1E 00      mov b, $1e
2775   1987 B0            cmp a, b
2776   1988 FD 73         slt ; < (signed)
2777   198A E4            pop a
2778   198B             ; END RELATIONAL
2779   198B C0 00 00      cmp b, 0
2780   198E C6 1B 1A      je _for46_exit
2781   1991             _for46_block:
2782   1991             ;; for(j = 0; j <    40    ; j++){ 
2783   1991             _for47_init:
2784   1991 FA FD FF      lea d, [bp + -3] ; $j
2785   1994 DA            push d
2786   1995 26 00 00      mov b, $0
2787   1998 E7            pop d
2788   1999 FD 43         mov [d], b
2789   199B             _for47_cond:
2790   199B FA FD FF      lea d, [bp + -3] ; $j
2791   199E 2A            mov b, [d]
2792   199F             ; START RELATIONAL
2793   199F D7            push a
2794   19A0 11            mov a, b
2795   19A1 26 28 00      mov b, $28
2796   19A4 B0            cmp a, b
2797   19A5 FD 73         slt ; < (signed)
2798   19A7 E4            pop a
2799   19A8             ; END RELATIONAL
2800   19A8 C0 00 00      cmp b, 0
2801   19AB C6 01 1A      je _for47_exit
2802   19AE             _for47_block:
2803   19AE             ;; currState[i][j] == '@' ? printf("@ ") : printf(". "); 
2804   19AE             _ternary48_cond:
2805   19AE 3B 3C 21      mov d, _currState_data ; $currState
2806   19B1 D7            push a
2807   19B2 DA            push d
2808   19B3 FA FF FF      lea d, [bp + -1] ; $i
2809   19B6 2A            mov b, [d]
2810   19B7 E7            pop d
2811   19B8 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2812   19BC DA            push d
2813   19BD FA FD FF      lea d, [bp + -3] ; $j
2814   19C0 2A            mov b, [d]
2815   19C1 E7            pop d
2816   19C2 5A            add d, b
2817   19C3 E4            pop a
2818   19C4 32            mov bl, [d]
2819   19C5 A7 00         mov bh, 0
2820   19C7             ; START RELATIONAL
2821   19C7 D7            push a
2822   19C8 11            mov a, b
2823   19C9 26 40 00      mov b, $40
2824   19CC B0            cmp a, b
2825   19CD FD 71         seq ; ==
2826   19CF E4            pop a
2827   19D0             ; END RELATIONAL
2828   19D0 C0 00 00      cmp b, 0
2829   19D3 C6 E5 19      je _ternary48_false
2830   19D6             _ternary48_true:
2831   19D6 26 4A 26      mov b, _s4 ; "@ "
2832   19D9 FD AB         swp b
2833   19DB D8            push b
2834   19DC 07 11 08      call printf
2835   19DF 51 02 00      add sp, 2
2836   19E2 0A F1 19      jmp _ternary48_exit
2837   19E5             _ternary48_false:
2838   19E5 26 4D 26      mov b, _s5 ; ". "
2839   19E8 FD AB         swp b
2840   19EA D8            push b
2841   19EB 07 11 08      call printf
2842   19EE 51 02 00      add sp, 2
2843   19F1             _ternary48_exit:
2844   19F1             _for47_update:
2845   19F1 FA FD FF      lea d, [bp + -3] ; $j
2846   19F4 2A            mov b, [d]
2847   19F5 D8            push b
2848   19F6 FD 77         inc b
2849   19F8 FA FD FF      lea d, [bp + -3] ; $j
2850   19FB FD 43         mov [d], b
2851   19FD E5            pop b
2852   19FE 0A 9B 19      jmp _for47_cond
2853   1A01             _for47_exit:
2854   1A01             ;; putchar(10); 
2855   1A01 26 0A 00      mov b, $a
2856   1A04 DD            push bl
2857   1A05 07 3B 15      call putchar
2858   1A08 51 01 00      add sp, 1
2859   1A0B             _for46_update:
2860   1A0B FA FF FF      lea d, [bp + -1] ; $i
2861   1A0E 2A            mov b, [d]
2862   1A0F D8            push b
2863   1A10 FD 77         inc b
2864   1A12 FA FF FF      lea d, [bp + -1] ; $i
2865   1A15 FD 43         mov [d], b
2866   1A17 E5            pop b
2867   1A18 0A 7E 19      jmp _for46_cond
2868   1A1B             _for46_exit:
2869   1A1B F9            leave
2870   1A1C 09            ret
2871   1A1D             
2872   1A1D             alive:
2873   1A1D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2874   1A20             ;; if(currState[i][j] == '@') return 1; 
2875   1A20             _if49_cond:
2876   1A20 3B 3C 21      mov d, _currState_data ; $currState
2877   1A23 D7            push a
2878   1A24 DA            push d
2879   1A25 FA 05 00      lea d, [bp + 5] ; $i
2880   1A28 2A            mov b, [d]
2881   1A29 E7            pop d
2882   1A2A FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2883   1A2E DA            push d
2884   1A2F FA 07 00      lea d, [bp + 7] ; $j
2885   1A32 2A            mov b, [d]
2886   1A33 E7            pop d
2887   1A34 5A            add d, b
2888   1A35 E4            pop a
2889   1A36 32            mov bl, [d]
2890   1A37 A7 00         mov bh, 0
2891   1A39             ; START RELATIONAL
2892   1A39 D7            push a
2893   1A3A 11            mov a, b
2894   1A3B 26 40 00      mov b, $40
2895   1A3E B0            cmp a, b
2896   1A3F FD 71         seq ; ==
2897   1A41 E4            pop a
2898   1A42             ; END RELATIONAL
2899   1A42 C0 00 00      cmp b, 0
2900   1A45 C6 50 1A      je _if49_else
2901   1A48             _if49_true:
2902   1A48             ;; return 1; 
2903   1A48 26 01 00      mov b, $1
2904   1A4B F9            leave
2905   1A4C 09            ret
2906   1A4D 0A 55 1A      jmp _if49_exit
2907   1A50             _if49_else:
2908   1A50             ;; return 0; 
2909   1A50 26 00 00      mov b, $0
2910   1A53 F9            leave
2911   1A54 09            ret
2912   1A55             _if49_exit:
2913   1A55 F9            leave
2914   1A56 09            ret
2915   1A57             
2916   1A57             neighbours:
2917   1A57 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2918   1A5A             ; $count 
2919   1A5A 52 02 00      sub sp, 2
2920   1A5D             ;; count = 0; 
2921   1A5D FA FF FF      lea d, [bp + -1] ; $count
2922   1A60 DA            push d
2923   1A61 26 00 00      mov b, $0
2924   1A64 E7            pop d
2925   1A65 FD 43         mov [d], b
2926   1A67             ;; if(currState[i+-1][j] == '@')			count++; 
2927   1A67             _if50_cond:
2928   1A67 3B 3C 21      mov d, _currState_data ; $currState
2929   1A6A D7            push a
2930   1A6B DA            push d
2931   1A6C FA 05 00      lea d, [bp + 5] ; $i
2932   1A6F 2A            mov b, [d]
2933   1A70             ; START TERMS
2934   1A70 D7            push a
2935   1A71 11            mov a, b
2936   1A72 26 FF FF      mov b, $ffff
2937   1A75 56            add b, a
2938   1A76 E4            pop a
2939   1A77             ; END TERMS
2940   1A77 E7            pop d
2941   1A78 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2942   1A7C DA            push d
2943   1A7D FA 07 00      lea d, [bp + 7] ; $j
2944   1A80 2A            mov b, [d]
2945   1A81 E7            pop d
2946   1A82 5A            add d, b
2947   1A83 E4            pop a
2948   1A84 32            mov bl, [d]
2949   1A85 A7 00         mov bh, 0
2950   1A87             ; START RELATIONAL
2951   1A87 D7            push a
2952   1A88 11            mov a, b
2953   1A89 26 40 00      mov b, $40
2954   1A8C B0            cmp a, b
2955   1A8D FD 71         seq ; ==
2956   1A8F E4            pop a
2957   1A90             ; END RELATIONAL
2958   1A90 C0 00 00      cmp b, 0
2959   1A93 C6 A6 1A      je _if50_exit
2960   1A96             _if50_true:
2961   1A96             ;; count++; 
2962   1A96 FA FF FF      lea d, [bp + -1] ; $count
2963   1A99 2A            mov b, [d]
2964   1A9A D8            push b
2965   1A9B FD 77         inc b
2966   1A9D FA FF FF      lea d, [bp + -1] ; $count
2967   1AA0 FD 43         mov [d], b
2968   1AA2 E5            pop b
2969   1AA3 0A A6 1A      jmp _if50_exit
2970   1AA6             _if50_exit:
2971   1AA6             ;; if(currState[i+-1][j+-1] == '@') 	count++; 
2972   1AA6             _if51_cond:
2973   1AA6 3B 3C 21      mov d, _currState_data ; $currState
2974   1AA9 D7            push a
2975   1AAA DA            push d
2976   1AAB FA 05 00      lea d, [bp + 5] ; $i
2977   1AAE 2A            mov b, [d]
2978   1AAF             ; START TERMS
2979   1AAF D7            push a
2980   1AB0 11            mov a, b
2981   1AB1 26 FF FF      mov b, $ffff
2982   1AB4 56            add b, a
2983   1AB5 E4            pop a
2984   1AB6             ; END TERMS
2985   1AB6 E7            pop d
2986   1AB7 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2987   1ABB DA            push d
2988   1ABC FA 07 00      lea d, [bp + 7] ; $j
2989   1ABF 2A            mov b, [d]
2990   1AC0             ; START TERMS
2991   1AC0 D7            push a
2992   1AC1 11            mov a, b
2993   1AC2 26 FF FF      mov b, $ffff
2994   1AC5 56            add b, a
2995   1AC6 E4            pop a
2996   1AC7             ; END TERMS
2997   1AC7 E7            pop d
2998   1AC8 5A            add d, b
2999   1AC9 E4            pop a
3000   1ACA 32            mov bl, [d]
3001   1ACB A7 00         mov bh, 0
3002   1ACD             ; START RELATIONAL
3003   1ACD D7            push a
3004   1ACE 11            mov a, b
3005   1ACF 26 40 00      mov b, $40
3006   1AD2 B0            cmp a, b
3007   1AD3 FD 71         seq ; ==
3008   1AD5 E4            pop a
3009   1AD6             ; END RELATIONAL
3010   1AD6 C0 00 00      cmp b, 0
3011   1AD9 C6 EC 1A      je _if51_exit
3012   1ADC             _if51_true:
3013   1ADC             ;; count++; 
3014   1ADC FA FF FF      lea d, [bp + -1] ; $count
3015   1ADF 2A            mov b, [d]
3016   1AE0 D8            push b
3017   1AE1 FD 77         inc b
3018   1AE3 FA FF FF      lea d, [bp + -1] ; $count
3019   1AE6 FD 43         mov [d], b
3020   1AE8 E5            pop b
3021   1AE9 0A EC 1A      jmp _if51_exit
3022   1AEC             _if51_exit:
3023   1AEC             ;; if(currState[i+-1][j+1] == '@') 	count++; 
3024   1AEC             _if52_cond:
3025   1AEC 3B 3C 21      mov d, _currState_data ; $currState
3026   1AEF D7            push a
3027   1AF0 DA            push d
3028   1AF1 FA 05 00      lea d, [bp + 5] ; $i
3029   1AF4 2A            mov b, [d]
3030   1AF5             ; START TERMS
3031   1AF5 D7            push a
3032   1AF6 11            mov a, b
3033   1AF7 26 FF FF      mov b, $ffff
3034   1AFA 56            add b, a
3035   1AFB E4            pop a
3036   1AFC             ; END TERMS
3037   1AFC E7            pop d
3038   1AFD FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3039   1B01 DA            push d
3040   1B02 FA 07 00      lea d, [bp + 7] ; $j
3041   1B05 2A            mov b, [d]
3042   1B06             ; START TERMS
3043   1B06 D7            push a
3044   1B07 11            mov a, b
3045   1B08 26 01 00      mov b, $1
3046   1B0B 56            add b, a
3047   1B0C E4            pop a
3048   1B0D             ; END TERMS
3049   1B0D E7            pop d
3050   1B0E 5A            add d, b
3051   1B0F E4            pop a
3052   1B10 32            mov bl, [d]
3053   1B11 A7 00         mov bh, 0
3054   1B13             ; START RELATIONAL
3055   1B13 D7            push a
3056   1B14 11            mov a, b
3057   1B15 26 40 00      mov b, $40
3058   1B18 B0            cmp a, b
3059   1B19 FD 71         seq ; ==
3060   1B1B E4            pop a
3061   1B1C             ; END RELATIONAL
3062   1B1C C0 00 00      cmp b, 0
3063   1B1F C6 32 1B      je _if52_exit
3064   1B22             _if52_true:
3065   1B22             ;; count++; 
3066   1B22 FA FF FF      lea d, [bp + -1] ; $count
3067   1B25 2A            mov b, [d]
3068   1B26 D8            push b
3069   1B27 FD 77         inc b
3070   1B29 FA FF FF      lea d, [bp + -1] ; $count
3071   1B2C FD 43         mov [d], b
3072   1B2E E5            pop b
3073   1B2F 0A 32 1B      jmp _if52_exit
3074   1B32             _if52_exit:
3075   1B32             ;; if(currState[i][j+-1] == '@') 		count++; 
3076   1B32             _if53_cond:
3077   1B32 3B 3C 21      mov d, _currState_data ; $currState
3078   1B35 D7            push a
3079   1B36 DA            push d
3080   1B37 FA 05 00      lea d, [bp + 5] ; $i
3081   1B3A 2A            mov b, [d]
3082   1B3B E7            pop d
3083   1B3C FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3084   1B40 DA            push d
3085   1B41 FA 07 00      lea d, [bp + 7] ; $j
3086   1B44 2A            mov b, [d]
3087   1B45             ; START TERMS
3088   1B45 D7            push a
3089   1B46 11            mov a, b
3090   1B47 26 FF FF      mov b, $ffff
3091   1B4A 56            add b, a
3092   1B4B E4            pop a
3093   1B4C             ; END TERMS
3094   1B4C E7            pop d
3095   1B4D 5A            add d, b
3096   1B4E E4            pop a
3097   1B4F 32            mov bl, [d]
3098   1B50 A7 00         mov bh, 0
3099   1B52             ; START RELATIONAL
3100   1B52 D7            push a
3101   1B53 11            mov a, b
3102   1B54 26 40 00      mov b, $40
3103   1B57 B0            cmp a, b
3104   1B58 FD 71         seq ; ==
3105   1B5A E4            pop a
3106   1B5B             ; END RELATIONAL
3107   1B5B C0 00 00      cmp b, 0
3108   1B5E C6 71 1B      je _if53_exit
3109   1B61             _if53_true:
3110   1B61             ;; count++; 
3111   1B61 FA FF FF      lea d, [bp + -1] ; $count
3112   1B64 2A            mov b, [d]
3113   1B65 D8            push b
3114   1B66 FD 77         inc b
3115   1B68 FA FF FF      lea d, [bp + -1] ; $count
3116   1B6B FD 43         mov [d], b
3117   1B6D E5            pop b
3118   1B6E 0A 71 1B      jmp _if53_exit
3119   1B71             _if53_exit:
3120   1B71             ;; if(currState[i][j+1] == '@') 			count++; 
3121   1B71             _if54_cond:
3122   1B71 3B 3C 21      mov d, _currState_data ; $currState
3123   1B74 D7            push a
3124   1B75 DA            push d
3125   1B76 FA 05 00      lea d, [bp + 5] ; $i
3126   1B79 2A            mov b, [d]
3127   1B7A E7            pop d
3128   1B7B FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3129   1B7F DA            push d
3130   1B80 FA 07 00      lea d, [bp + 7] ; $j
3131   1B83 2A            mov b, [d]
3132   1B84             ; START TERMS
3133   1B84 D7            push a
3134   1B85 11            mov a, b
3135   1B86 26 01 00      mov b, $1
3136   1B89 56            add b, a
3137   1B8A E4            pop a
3138   1B8B             ; END TERMS
3139   1B8B E7            pop d
3140   1B8C 5A            add d, b
3141   1B8D E4            pop a
3142   1B8E 32            mov bl, [d]
3143   1B8F A7 00         mov bh, 0
3144   1B91             ; START RELATIONAL
3145   1B91 D7            push a
3146   1B92 11            mov a, b
3147   1B93 26 40 00      mov b, $40
3148   1B96 B0            cmp a, b
3149   1B97 FD 71         seq ; ==
3150   1B99 E4            pop a
3151   1B9A             ; END RELATIONAL
3152   1B9A C0 00 00      cmp b, 0
3153   1B9D C6 B0 1B      je _if54_exit
3154   1BA0             _if54_true:
3155   1BA0             ;; count++; 
3156   1BA0 FA FF FF      lea d, [bp + -1] ; $count
3157   1BA3 2A            mov b, [d]
3158   1BA4 D8            push b
3159   1BA5 FD 77         inc b
3160   1BA7 FA FF FF      lea d, [bp + -1] ; $count
3161   1BAA FD 43         mov [d], b
3162   1BAC E5            pop b
3163   1BAD 0A B0 1B      jmp _if54_exit
3164   1BB0             _if54_exit:
3165   1BB0             ;; if(currState[i+1][j+-1] == '@') 	count++; 
3166   1BB0             _if55_cond:
3167   1BB0 3B 3C 21      mov d, _currState_data ; $currState
3168   1BB3 D7            push a
3169   1BB4 DA            push d
3170   1BB5 FA 05 00      lea d, [bp + 5] ; $i
3171   1BB8 2A            mov b, [d]
3172   1BB9             ; START TERMS
3173   1BB9 D7            push a
3174   1BBA 11            mov a, b
3175   1BBB 26 01 00      mov b, $1
3176   1BBE 56            add b, a
3177   1BBF E4            pop a
3178   1BC0             ; END TERMS
3179   1BC0 E7            pop d
3180   1BC1 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3181   1BC5 DA            push d
3182   1BC6 FA 07 00      lea d, [bp + 7] ; $j
3183   1BC9 2A            mov b, [d]
3184   1BCA             ; START TERMS
3185   1BCA D7            push a
3186   1BCB 11            mov a, b
3187   1BCC 26 FF FF      mov b, $ffff
3188   1BCF 56            add b, a
3189   1BD0 E4            pop a
3190   1BD1             ; END TERMS
3191   1BD1 E7            pop d
3192   1BD2 5A            add d, b
3193   1BD3 E4            pop a
3194   1BD4 32            mov bl, [d]
3195   1BD5 A7 00         mov bh, 0
3196   1BD7             ; START RELATIONAL
3197   1BD7 D7            push a
3198   1BD8 11            mov a, b
3199   1BD9 26 40 00      mov b, $40
3200   1BDC B0            cmp a, b
3201   1BDD FD 71         seq ; ==
3202   1BDF E4            pop a
3203   1BE0             ; END RELATIONAL
3204   1BE0 C0 00 00      cmp b, 0
3205   1BE3 C6 F6 1B      je _if55_exit
3206   1BE6             _if55_true:
3207   1BE6             ;; count++; 
3208   1BE6 FA FF FF      lea d, [bp + -1] ; $count
3209   1BE9 2A            mov b, [d]
3210   1BEA D8            push b
3211   1BEB FD 77         inc b
3212   1BED FA FF FF      lea d, [bp + -1] ; $count
3213   1BF0 FD 43         mov [d], b
3214   1BF2 E5            pop b
3215   1BF3 0A F6 1B      jmp _if55_exit
3216   1BF6             _if55_exit:
3217   1BF6             ;; if(currState[i+1][j] == '@') 			count++; 
3218   1BF6             _if56_cond:
3219   1BF6 3B 3C 21      mov d, _currState_data ; $currState
3220   1BF9 D7            push a
3221   1BFA DA            push d
3222   1BFB FA 05 00      lea d, [bp + 5] ; $i
3223   1BFE 2A            mov b, [d]
3224   1BFF             ; START TERMS
3225   1BFF D7            push a
3226   1C00 11            mov a, b
3227   1C01 26 01 00      mov b, $1
3228   1C04 56            add b, a
3229   1C05 E4            pop a
3230   1C06             ; END TERMS
3231   1C06 E7            pop d
3232   1C07 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3233   1C0B DA            push d
3234   1C0C FA 07 00      lea d, [bp + 7] ; $j
3235   1C0F 2A            mov b, [d]
3236   1C10 E7            pop d
3237   1C11 5A            add d, b
3238   1C12 E4            pop a
3239   1C13 32            mov bl, [d]
3240   1C14 A7 00         mov bh, 0
3241   1C16             ; START RELATIONAL
3242   1C16 D7            push a
3243   1C17 11            mov a, b
3244   1C18 26 40 00      mov b, $40
3245   1C1B B0            cmp a, b
3246   1C1C FD 71         seq ; ==
3247   1C1E E4            pop a
3248   1C1F             ; END RELATIONAL
3249   1C1F C0 00 00      cmp b, 0
3250   1C22 C6 35 1C      je _if56_exit
3251   1C25             _if56_true:
3252   1C25             ;; count++; 
3253   1C25 FA FF FF      lea d, [bp + -1] ; $count
3254   1C28 2A            mov b, [d]
3255   1C29 D8            push b
3256   1C2A FD 77         inc b
3257   1C2C FA FF FF      lea d, [bp + -1] ; $count
3258   1C2F FD 43         mov [d], b
3259   1C31 E5            pop b
3260   1C32 0A 35 1C      jmp _if56_exit
3261   1C35             _if56_exit:
3262   1C35             ;; if(currState[i+1][j+1] == '@') 		count++; 
3263   1C35             _if57_cond:
3264   1C35 3B 3C 21      mov d, _currState_data ; $currState
3265   1C38 D7            push a
3266   1C39 DA            push d
3267   1C3A FA 05 00      lea d, [bp + 5] ; $i
3268   1C3D 2A            mov b, [d]
3269   1C3E             ; START TERMS
3270   1C3E D7            push a
3271   1C3F 11            mov a, b
3272   1C40 26 01 00      mov b, $1
3273   1C43 56            add b, a
3274   1C44 E4            pop a
3275   1C45             ; END TERMS
3276   1C45 E7            pop d
3277   1C46 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
3278   1C4A DA            push d
3279   1C4B FA 07 00      lea d, [bp + 7] ; $j
3280   1C4E 2A            mov b, [d]
3281   1C4F             ; START TERMS
3282   1C4F D7            push a
3283   1C50 11            mov a, b
3284   1C51 26 01 00      mov b, $1
3285   1C54 56            add b, a
3286   1C55 E4            pop a
3287   1C56             ; END TERMS
3288   1C56 E7            pop d
3289   1C57 5A            add d, b
3290   1C58 E4            pop a
3291   1C59 32            mov bl, [d]
3292   1C5A A7 00         mov bh, 0
3293   1C5C             ; START RELATIONAL
3294   1C5C D7            push a
3295   1C5D 11            mov a, b
3296   1C5E 26 40 00      mov b, $40
3297   1C61 B0            cmp a, b
3298   1C62 FD 71         seq ; ==
3299   1C64 E4            pop a
3300   1C65             ; END RELATIONAL
3301   1C65 C0 00 00      cmp b, 0
3302   1C68 C6 7B 1C      je _if57_exit
3303   1C6B             _if57_true:
3304   1C6B             ;; count++; 
3305   1C6B FA FF FF      lea d, [bp + -1] ; $count
3306   1C6E 2A            mov b, [d]
3307   1C6F D8            push b
3308   1C70 FD 77         inc b
3309   1C72 FA FF FF      lea d, [bp + -1] ; $count
3310   1C75 FD 43         mov [d], b
3311   1C77 E5            pop b
3312   1C78 0A 7B 1C      jmp _if57_exit
3313   1C7B             _if57_exit:
3314   1C7B             ;; return count; 
3315   1C7B FA FF FF      lea d, [bp + -1] ; $count
3316   1C7E 2A            mov b, [d]
3317   1C7F F9            leave
3318   1C80 09            ret
3319   1C81             ; --- END TEXT BLOCK
3320   1C81             
3321   1C81             ; --- BEGIN DATA BLOCK
3322   1C81             _clear_data: 
3323   1C81 1B 5B 32 4A .db $1b,$5b,$32,$4a,$1b,$5b,$48,$0,
3323   1C85 1B 5B 48 00 
3324   1C89 00 00 00    .fill 3, 0
3325   1C8C 00 00 00 00 _nextState_data: .fill 1200, 0
3325   1C90 00 00 00 00 
3325   1C94 00 00 00 00 
3325   1C98 00 00 00 00 
3325   1C9C 00 00 00 00 
3325   1CA0 00 00 00 00 
3325   1CA4 00 00 00 00 
3325   1CA8 00 00 00 00 
3325   1CAC 00 00 00 00 
3325   1CB0 00 00 00 00 
3325   1CB4 00 00 00 00 
3325   1CB8 00 00 00 00 
3325   1CBC 00 00 00 00 
3325   1CC0 00 00 00 00 
3325   1CC4 00 00 00 00 
3325   1CC8 00 00 00 00 
3325   1CCC 00 00 00 00 
3325   1CD0 00 00 00 00 
3325   1CD4 00 00 00 00 
3325   1CD8 00 00 00 00 
3325   1CDC 00 00 00 00 
3325   1CE0 00 00 00 00 
3325   1CE4 00 00 00 00 
3325   1CE8 00 00 00 00 
3325   1CEC 00 00 00 00 
3325   1CF0 00 00 00 00 
3325   1CF4 00 00 00 00 
3325   1CF8 00 00 00 00 
3325   1CFC 00 00 00 00 
3325   1D00 00 00 00 00 
3325   1D04 00 00 00 00 
3325   1D08 00 00 00 00 
3325   1D0C 00 00 00 00 
3325   1D10 00 00 00 00 
3325   1D14 00 00 00 00 
3325   1D18 00 00 00 00 
3325   1D1C 00 00 00 00 
3325   1D20 00 00 00 00 
3325   1D24 00 00 00 00 
3325   1D28 00 00 00 00 
3325   1D2C 00 00 00 00 
3325   1D30 00 00 00 00 
3325   1D34 00 00 00 00 
3325   1D38 00 00 00 00 
3325   1D3C 00 00 00 00 
3325   1D40 00 00 00 00 
3325   1D44 00 00 00 00 
3325   1D48 00 00 00 00 
3325   1D4C 00 00 00 00 
3325   1D50 00 00 00 00 
3325   1D54 00 00 00 00 
3325   1D58 00 00 00 00 
3325   1D5C 00 00 00 00 
3325   1D60 00 00 00 00 
3325   1D64 00 00 00 00 
3325   1D68 00 00 00 00 
3325   1D6C 00 00 00 00 
3325   1D70 00 00 00 00 
3325   1D74 00 00 00 00 
3325   1D78 00 00 00 00 
3325   1D7C 00 00 00 00 
3325   1D80 00 00 00 00 
3325   1D84 00 00 00 00 
3325   1D88 00 00 00 00 
3325   1D8C 00 00 00 00 
3325   1D90 00 00 00 00 
3325   1D94 00 00 00 00 
3325   1D98 00 00 00 00 
3325   1D9C 00 00 00 00 
3325   1DA0 00 00 00 00 
3325   1DA4 00 00 00 00 
3325   1DA8 00 00 00 00 
3325   1DAC 00 00 00 00 
3325   1DB0 00 00 00 00 
3325   1DB4 00 00 00 00 
3325   1DB8 00 00 00 00 
3325   1DBC 00 00 00 00 
3325   1DC0 00 00 00 00 
3325   1DC4 00 00 00 00 
3325   1DC8 00 00 00 00 
3325   1DCC 00 00 00 00 
3325   1DD0 00 00 00 00 
3325   1DD4 00 00 00 00 
3325   1DD8 00 00 00 00 
3325   1DDC 00 00 00 00 
3325   1DE0 00 00 00 00 
3325   1DE4 00 00 00 00 
3325   1DE8 00 00 00 00 
3325   1DEC 00 00 00 00 
3325   1DF0 00 00 00 00 
3325   1DF4 00 00 00 00 
3325   1DF8 00 00 00 00 
3325   1DFC 00 00 00 00 
3325   1E00 00 00 00 00 
3325   1E04 00 00 00 00 
3325   1E08 00 00 00 00 
3325   1E0C 00 00 00 00 
3325   1E10 00 00 00 00 
3325   1E14 00 00 00 00 
3325   1E18 00 00 00 00 
3325   1E1C 00 00 00 00 
3325   1E20 00 00 00 00 
3325   1E24 00 00 00 00 
3325   1E28 00 00 00 00 
3325   1E2C 00 00 00 00 
3325   1E30 00 00 00 00 
3325   1E34 00 00 00 00 
3325   1E38 00 00 00 00 
3325   1E3C 00 00 00 00 
3325   1E40 00 00 00 00 
3325   1E44 00 00 00 00 
3325   1E48 00 00 00 00 
3325   1E4C 00 00 00 00 
3325   1E50 00 00 00 00 
3325   1E54 00 00 00 00 
3325   1E58 00 00 00 00 
3325   1E5C 00 00 00 00 
3325   1E60 00 00 00 00 
3325   1E64 00 00 00 00 
3325   1E68 00 00 00 00 
3325   1E6C 00 00 00 00 
3325   1E70 00 00 00 00 
3325   1E74 00 00 00 00 
3325   1E78 00 00 00 00 
3325   1E7C 00 00 00 00 
3325   1E80 00 00 00 00 
3325   1E84 00 00 00 00 
3325   1E88 00 00 00 00 
3325   1E8C 00 00 00 00 
3325   1E90 00 00 00 00 
3325   1E94 00 00 00 00 
3325   1E98 00 00 00 00 
3325   1E9C 00 00 00 00 
3325   1EA0 00 00 00 00 
3325   1EA4 00 00 00 00 
3325   1EA8 00 00 00 00 
3325   1EAC 00 00 00 00 
3325   1EB0 00 00 00 00 
3325   1EB4 00 00 00 00 
3325   1EB8 00 00 00 00 
3325   1EBC 00 00 00 00 
3325   1EC0 00 00 00 00 
3325   1EC4 00 00 00 00 
3325   1EC8 00 00 00 00 
3325   1ECC 00 00 00 00 
3325   1ED0 00 00 00 00 
3325   1ED4 00 00 00 00 
3325   1ED8 00 00 00 00 
3325   1EDC 00 00 00 00 
3325   1EE0 00 00 00 00 
3325   1EE4 00 00 00 00 
3325   1EE8 00 00 00 00 
3325   1EEC 00 00 00 00 
3325   1EF0 00 00 00 00 
3325   1EF4 00 00 00 00 
3325   1EF8 00 00 00 00 
3325   1EFC 00 00 00 00 
3325   1F00 00 00 00 00 
3325   1F04 00 00 00 00 
3325   1F08 00 00 00 00 
3325   1F0C 00 00 00 00 
3325   1F10 00 00 00 00 
3325   1F14 00 00 00 00 
3325   1F18 00 00 00 00 
3325   1F1C 00 00 00 00 
3325   1F20 00 00 00 00 
3325   1F24 00 00 00 00 
3325   1F28 00 00 00 00 
3325   1F2C 00 00 00 00 
3325   1F30 00 00 00 00 
3325   1F34 00 00 00 00 
3325   1F38 00 00 00 00 
3325   1F3C 00 00 00 00 
3325   1F40 00 00 00 00 
3325   1F44 00 00 00 00 
3325   1F48 00 00 00 00 
3325   1F4C 00 00 00 00 
3325   1F50 00 00 00 00 
3325   1F54 00 00 00 00 
3325   1F58 00 00 00 00 
3325   1F5C 00 00 00 00 
3325   1F60 00 00 00 00 
3325   1F64 00 00 00 00 
3325   1F68 00 00 00 00 
3325   1F6C 00 00 00 00 
3325   1F70 00 00 00 00 
3325   1F74 00 00 00 00 
3325   1F78 00 00 00 00 
3325   1F7C 00 00 00 00 
3325   1F80 00 00 00 00 
3325   1F84 00 00 00 00 
3325   1F88 00 00 00 00 
3325   1F8C 00 00 00 00 
3325   1F90 00 00 00 00 
3325   1F94 00 00 00 00 
3325   1F98 00 00 00 00 
3325   1F9C 00 00 00 00 
3325   1FA0 00 00 00 00 
3325   1FA4 00 00 00 00 
3325   1FA8 00 00 00 00 
3325   1FAC 00 00 00 00 
3325   1FB0 00 00 00 00 
3325   1FB4 00 00 00 00 
3325   1FB8 00 00 00 00 
3325   1FBC 00 00 00 00 
3325   1FC0 00 00 00 00 
3325   1FC4 00 00 00 00 
3325   1FC8 00 00 00 00 
3325   1FCC 00 00 00 00 
3325   1FD0 00 00 00 00 
3325   1FD4 00 00 00 00 
3325   1FD8 00 00 00 00 
3325   1FDC 00 00 00 00 
3325   1FE0 00 00 00 00 
3325   1FE4 00 00 00 00 
3325   1FE8 00 00 00 00 
3325   1FEC 00 00 00 00 
3325   1FF0 00 00 00 00 
3325   1FF4 00 00 00 00 
3325   1FF8 00 00 00 00 
3325   1FFC 00 00 00 00 
3325   2000 00 00 00 00 
3325   2004 00 00 00 00 
3325   2008 00 00 00 00 
3325   200C 00 00 00 00 
3325   2010 00 00 00 00 
3325   2014 00 00 00 00 
3325   2018 00 00 00 00 
3325   201C 00 00 00 00 
3325   2020 00 00 00 00 
3325   2024 00 00 00 00 
3325   2028 00 00 00 00 
3325   202C 00 00 00 00 
3325   2030 00 00 00 00 
3325   2034 00 00 00 00 
3325   2038 00 00 00 00 
3325   203C 00 00 00 00 
3325   2040 00 00 00 00 
3325   2044 00 00 00 00 
3325   2048 00 00 00 00 
3325   204C 00 00 00 00 
3325   2050 00 00 00 00 
3325   2054 00 00 00 00 
3325   2058 00 00 00 00 
3325   205C 00 00 00 00 
3325   2060 00 00 00 00 
3325   2064 00 00 00 00 
3325   2068 00 00 00 00 
3325   206C 00 00 00 00 
3325   2070 00 00 00 00 
3325   2074 00 00 00 00 
3325   2078 00 00 00 00 
3325   207C 00 00 00 00 
3325   2080 00 00 00 00 
3325   2084 00 00 00 00 
3325   2088 00 00 00 00 
3325   208C 00 00 00 00 
3325   2090 00 00 00 00 
3325   2094 00 00 00 00 
3325   2098 00 00 00 00 
3325   209C 00 00 00 00 
3325   20A0 00 00 00 00 
3325   20A4 00 00 00 00 
3325   20A8 00 00 00 00 
3325   20AC 00 00 00 00 
3325   20B0 00 00 00 00 
3325   20B4 00 00 00 00 
3325   20B8 00 00 00 00 
3325   20BC 00 00 00 00 
3325   20C0 00 00 00 00 
3325   20C4 00 00 00 00 
3325   20C8 00 00 00 00 
3325   20CC 00 00 00 00 
3325   20D0 00 00 00 00 
3325   20D4 00 00 00 00 
3325   20D8 00 00 00 00 
3325   20DC 00 00 00 00 
3325   20E0 00 00 00 00 
3325   20E4 00 00 00 00 
3325   20E8 00 00 00 00 
3325   20EC 00 00 00 00 
3325   20F0 00 00 00 00 
3325   20F4 00 00 00 00 
3325   20F8 00 00 00 00 
3325   20FC 00 00 00 00 
3325   2100 00 00 00 00 
3325   2104 00 00 00 00 
3325   2108 00 00 00 00 
3325   210C 00 00 00 00 
3325   2110 00 00 00 00 
3325   2114 00 00 00 00 
3325   2118 00 00 00 00 
3325   211C 00 00 00 00 
3325   2120 00 00 00 00 
3325   2124 00 00 00 00 
3325   2128 00 00 00 00 
3325   212C 00 00 00 00 
3325   2130 00 00 00 00 
3325   2134 00 00 00 00 
3325   2138 00 00 00 00 
3326   213C             _currState_data: 
3327   213C 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3327   2140 20 20 20 20 
3327   2144 20 20 20 20 
3327   2148 20 20 20 20 
3327   214C 20 20 20 20 
3327   2150 20 20 20 20 
3327   2154 20 20 20 20 
3327   2158 20 20 
3328   215A 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3328   215E 20 20 20 20 
3328   2162 20 20 20 20 
3328   2166 20 20 20 20 
3328   216A 20 20 20 20 
3328   216E 20 20 20 20 
3328   2172 20 20 20 20 
3328   2176 20 20 
3329   2178 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3329   217C 20 20 20 20 
3329   2180 20 20 20 20 
3329   2184 20 20 20 20 
3329   2188 20 20 20 20 
3329   218C 20 20 20 20 
3329   2190 20 20 20 20 
3329   2194 20 20 
3330   2196 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3330   219A 20 20 20 20 
3330   219E 20 20 20 20 
3330   21A2 20 20 20 20 
3330   21A6 20 20 20 20 
3330   21AA 20 20 20 20 
3330   21AE 20 20 20 20 
3330   21B2 20 20 
3331   21B4 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,
3331   21B8 20 20 20 20 
3331   21BC 20 20 20 20 
3331   21C0 20 20 20 20 
3331   21C4 20 20 20 20 
3331   21C8 20 20 20 20 
3331   21CC 20 20 20 40 
3331   21D0 20 20 
3332   21D2 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3332   21D6 20 20 20 20 
3332   21DA 20 20 20 20 
3332   21DE 20 20 20 20 
3332   21E2 20 20 20 20 
3332   21E6 20 20 20 20 
3332   21EA 20 20 20 20 
3332   21EE 20 20 
3333   21F0 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3333   21F4 20 40 20 40 
3333   21F8 20 20 20 20 
3333   21FC 20 20 20 20 
3333   2200 20 20 20 20 
3333   2204 20 20 20 20 
3333   2208 20 20 20 20 
3333   220C 20 20 
3334   220E 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,
3334   2212 20 40 40 20 
3334   2216 20 20 20 20 
3334   221A 20 40 40 20 
3334   221E 20 20 20 20 
3334   2222 20 20 20 20 
3334   2226 20 20 20 40 
3334   222A 40 20 
3335   222C 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,
3335   2230 20 20 20 20 
3335   2234 20 20 20 20 
3335   2238 20 20 40 20 
3335   223C 20 20 40 20 
3335   2240 20 20 20 40 
3335   2244 40 20 20 20 
3335   2248 20 20 
3336   224A 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,
3336   224E 20 20 20 40 
3336   2252 40 20 20 20 
3336   2256 20 40 40 20 
3336   225A 20 20 20 20 
3336   225E 20 20 20 40 
3336   2262 20 20 20 20 
3336   2266 20 40 
3337   2268 20 20 20 40 .db $20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,
3337   226C 40 20 20 20 
3337   2270 20 20 20 20 
3337   2274 20 20 20 20 
3337   2278 20 20 20 20 
3337   227C 20 20 20 40 
3337   2280 40 20 20 20 
3337   2284 20 20 
3338   2286 20 20 20 40 .db $20,$20,$20,$40,$20,$20,$20,$40,$20,$40,$40,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3338   228A 20 20 20 40 
3338   228E 20 40 40 20 
3338   2292 20 20 20 40 
3338   2296 20 40 20 20 
3338   229A 20 20 20 20 
3338   229E 20 20 20 20 
3338   22A2 20 20 
3339   22A4 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,
3339   22A8 20 20 20 20 
3339   22AC 20 20 20 20 
3339   22B0 20 40 20 20 
3339   22B4 20 20 20 40 
3339   22B8 20 20 20 20 
3339   22BC 20 20 20 40 
3339   22C0 20 20 
3340   22C2 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$40,$20,
3340   22C6 20 20 20 20 
3340   22CA 20 20 20 20 
3340   22CE 20 20 20 20 
3340   22D2 20 20 20 20 
3340   22D6 20 20 20 20 
3340   22DA 40 20 20 20 
3340   22DE 40 20 
3341   22E0 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3341   22E4 20 20 20 20 
3341   22E8 20 20 20 20 
3341   22EC 20 20 20 20 
3341   22F0 20 20 20 20 
3341   22F4 20 20 20 20 
3341   22F8 20 20 20 20 
3341   22FC 20 20 
3342   22FE 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3342   2302 20 40 40 20 
3342   2306 20 20 20 20 
3342   230A 20 20 20 20 
3342   230E 20 20 20 20 
3342   2312 20 20 20 20 
3342   2316 20 20 20 20 
3342   231A 20 20 
3343   231C 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3343   2320 20 20 20 20 
3343   2324 20 20 20 20 
3343   2328 20 20 20 20 
3343   232C 20 20 20 20 
3343   2330 20 20 20 20 
3343   2334 20 20 20 20 
3343   2338 20 20 
3344   233A 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3344   233E 20 20 20 20 
3344   2342 20 20 20 20 
3344   2346 20 20 20 20 
3344   234A 20 20 20 20 
3344   234E 20 20 20 20 
3344   2352 20 20 20 20 
3344   2356 20 20 
3345   2358 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3345   235C 20 20 20 20 
3345   2360 20 20 20 20 
3345   2364 20 20 20 20 
3345   2368 20 20 20 20 
3345   236C 20 20 20 20 
3345   2370 20 20 20 20 
3345   2374 20 20 
3346   2376 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3346   237A 20 20 20 20 
3346   237E 20 20 20 20 
3346   2382 20 20 20 20 
3346   2386 20 20 20 20 
3346   238A 20 20 20 20 
3346   238E 20 20 20 20 
3346   2392 20 20 
3347   2394 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3347   2398 20 20 20 20 
3347   239C 20 20 20 20 
3347   23A0 20 20 20 20 
3347   23A4 20 20 20 20 
3347   23A8 20 20 20 20 
3347   23AC 20 20 20 20 
3347   23B0 20 20 
3348   23B2 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3348   23B6 20 20 20 20 
3348   23BA 20 20 20 20 
3348   23BE 20 20 20 20 
3348   23C2 20 20 20 20 
3348   23C6 20 20 20 20 
3348   23CA 20 20 20 20 
3348   23CE 20 20 
3349   23D0 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3349   23D4 20 20 20 20 
3349   23D8 20 20 20 20 
3349   23DC 20 20 20 20 
3349   23E0 20 20 20 20 
3349   23E4 20 20 20 20 
3349   23E8 20 20 20 20 
3349   23EC 20 20 
3350   23EE 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3350   23F2 20 20 20 20 
3350   23F6 20 20 20 20 
3350   23FA 20 20 20 20 
3350   23FE 20 20 20 20 
3350   2402 20 20 20 20 
3350   2406 20 20 20 20 
3350   240A 20 20 
3351   240C 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3351   2410 20 20 20 20 
3351   2414 20 20 20 20 
3351   2418 20 20 20 20 
3351   241C 20 20 20 20 
3351   2420 20 20 20 20 
3351   2424 20 20 20 20 
3351   2428 20 20 
3352   242A 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3352   242E 20 20 20 20 
3352   2432 20 20 20 20 
3352   2436 20 20 20 20 
3352   243A 20 20 20 20 
3352   243E 20 20 20 20 
3352   2442 20 20 20 20 
3352   2446 20 20 
3353   2448 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
3353   244C 20 20 20 20 
3353   2450 20 20 20 20 
3353   2454 20 20 20 20 
3353   2458 20 20 20 20 
3354   245C 00 00 00 00 .fill 400, 0
3354   2460 00 00 00 00 
3354   2464 00 00 00 00 
3354   2468 00 00 00 00 
3354   246C 00 00 00 00 
3354   2470 00 00 00 00 
3354   2474 00 00 00 00 
3354   2478 00 00 00 00 
3354   247C 00 00 00 00 
3354   2480 00 00 00 00 
3354   2484 00 00 00 00 
3354   2488 00 00 00 00 
3354   248C 00 00 00 00 
3354   2490 00 00 00 00 
3354   2494 00 00 00 00 
3354   2498 00 00 00 00 
3354   249C 00 00 00 00 
3354   24A0 00 00 00 00 
3354   24A4 00 00 00 00 
3354   24A8 00 00 00 00 
3354   24AC 00 00 00 00 
3354   24B0 00 00 00 00 
3354   24B4 00 00 00 00 
3354   24B8 00 00 00 00 
3354   24BC 00 00 00 00 
3354   24C0 00 00 00 00 
3354   24C4 00 00 00 00 
3354   24C8 00 00 00 00 
3354   24CC 00 00 00 00 
3354   24D0 00 00 00 00 
3354   24D4 00 00 00 00 
3354   24D8 00 00 00 00 
3354   24DC 00 00 00 00 
3354   24E0 00 00 00 00 
3354   24E4 00 00 00 00 
3354   24E8 00 00 00 00 
3354   24EC 00 00 00 00 
3354   24F0 00 00 00 00 
3354   24F4 00 00 00 00 
3354   24F8 00 00 00 00 
3354   24FC 00 00 00 00 
3354   2500 00 00 00 00 
3354   2504 00 00 00 00 
3354   2508 00 00 00 00 
3354   250C 00 00 00 00 
3354   2510 00 00 00 00 
3354   2514 00 00 00 00 
3354   2518 00 00 00 00 
3354   251C 00 00 00 00 
3354   2520 00 00 00 00 
3354   2524 00 00 00 00 
3354   2528 00 00 00 00 
3354   252C 00 00 00 00 
3354   2530 00 00 00 00 
3354   2534 00 00 00 00 
3354   2538 00 00 00 00 
3354   253C 00 00 00 00 
3354   2540 00 00 00 00 
3354   2544 00 00 00 00 
3354   2548 00 00 00 00 
3354   254C 00 00 00 00 
3354   2550 00 00 00 00 
3354   2554 00 00 00 00 
3354   2558 00 00 00 00 
3354   255C 00 00 00 00 
3354   2560 00 00 00 00 
3354   2564 00 00 00 00 
3354   2568 00 00 00 00 
3354   256C 00 00 00 00 
3354   2570 00 00 00 00 
3354   2574 00 00 00 00 
3354   2578 00 00 00 00 
3354   257C 00 00 00 00 
3354   2580 00 00 00 00 
3354   2584 00 00 00 00 
3354   2588 00 00 00 00 
3354   258C 00 00 00 00 
3354   2590 00 00 00 00 
3354   2594 00 00 00 00 
3354   2598 00 00 00 00 
3354   259C 00 00 00 00 
3354   25A0 00 00 00 00 
3354   25A4 00 00 00 00 
3354   25A8 00 00 00 00 
3354   25AC 00 00 00 00 
3354   25B0 00 00 00 00 
3354   25B4 00 00 00 00 
3354   25B8 00 00 00 00 
3354   25BC 00 00 00 00 
3354   25C0 00 00 00 00 
3354   25C4 00 00 00 00 
3354   25C8 00 00 00 00 
3354   25CC 00 00 00 00 
3354   25D0 00 00 00 00 
3354   25D4 00 00 00 00 
3354   25D8 00 00 00 00 
3354   25DC 00 00 00 00 
3354   25E0 00 00 00 00 
3354   25E4 00 00 00 00 
3354   25E8 00 00 00 00 
3355   25EC 0A 0D 50 72 _s0: .db "\n\rPress CTRL+C to quit.\n\r", 0
3355   25F0 65 73 73 20 
3355   25F4 43 54 52 4C 
3355   25F8 2B 43 20 74 
3355   25FC 6F 20 71 75 
3355   2600 69 74 2E 0A 
3355   2604 0D 00 
3356   2606 55 6E 65 78 _s1: .db "Unexpected format in printf.", 0
3356   260A 70 65 63 74 
3356   260E 65 64 20 66 
3356   2612 6F 72 6D 61 
3356   2616 74 20 69 6E 
3356   261A 20 70 72 69 
3356   261E 6E 74 66 2E 
3356   2622 00 
3357   2623 45 72 72 6F _s2: .db "Error: Unknown argument type.\n", 0
3357   2627 72 3A 20 55 
3357   262B 6E 6B 6E 6F 
3357   262F 77 6E 20 61 
3357   2633 72 67 75 6D 
3357   2637 65 6E 74 20 
3357   263B 74 79 70 65 
3357   263F 2E 0A 00 
3358   2642 1B 5B 32 4A _s3: .db "\033[2J\033[H", 0
3358   2646 1B 5B 48 00 
3359   264A 40 20 00    _s4: .db "@ ", 0
3360   264D 2E 20 00    _s5: .db ". ", 0
3361   2650             
3362   2650 52 26       _heap_top: .dw _heap
3363   2652 00          _heap: .db 0
3364   2653             ; --- END DATA BLOCK
3365   2653             
3366   2653             .end
tasm: Number of errors = 0
