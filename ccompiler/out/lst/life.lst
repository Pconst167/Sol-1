0001   0000             ; --- FILENAME: programs/life
0002   0000             .include "lib/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $i 
0011   0408             ; $j 
0012   0408             ; $n 
0013   0408 52 06 00      sub sp, 6
0014   040B             ;; for(i = 0; i <  30     ; i++){ 
0015   040B             _for1_init:
0016   040B FA FF FF      lea d, [bp + -1] ; $i
0017   040E DA            push d
0018   040F 26 00 00      mov b, $0
0019   0412 E7            pop d
0020   0413 FD 43         mov [d], b
0021   0415             _for1_cond:
0022   0415 FA FF FF      lea d, [bp + -1] ; $i
0023   0418 2A            mov b, [d]
0024   0419             ; START RELATIONAL
0025   0419 D7            push a
0026   041A 11            mov a, b
0027   041B 26 1E 00      mov b, $1e
0028   041E B0            cmp a, b
0029   041F FD 73         slt ; < 
0030   0421 E4            pop a
0031   0422             ; END RELATIONAL
0032   0422 C0 00 00      cmp b, 0
0033   0425 C6 9C 04      je _for1_exit
0034   0428             _for1_block:
0035   0428             ;; for(j = 0; j <  40    ; j++){ 
0036   0428             _for2_init:
0037   0428 FA FD FF      lea d, [bp + -3] ; $j
0038   042B DA            push d
0039   042C 26 00 00      mov b, $0
0040   042F E7            pop d
0041   0430 FD 43         mov [d], b
0042   0432             _for2_cond:
0043   0432 FA FD FF      lea d, [bp + -3] ; $j
0044   0435 2A            mov b, [d]
0045   0436             ; START RELATIONAL
0046   0436 D7            push a
0047   0437 11            mov a, b
0048   0438 26 28 00      mov b, $28
0049   043B B0            cmp a, b
0050   043C FD 73         slt ; < 
0051   043E E4            pop a
0052   043F             ; END RELATIONAL
0053   043F C0 00 00      cmp b, 0
0054   0442 C6 8A 04      je _for2_exit
0055   0445             _for2_block:
0056   0445             ;; nextState[i][j] = currState[i][j]; 
0057   0445 3B 8F 16      mov d, _nextState_data ; $nextState
0058   0448 D7            push a
0059   0449 DA            push d
0060   044A FA FF FF      lea d, [bp + -1] ; $i
0061   044D 2A            mov b, [d]
0062   044E E7            pop d
0063   044F FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0064   0453 DA            push d
0065   0454 FA FD FF      lea d, [bp + -3] ; $j
0066   0457 2A            mov b, [d]
0067   0458 E7            pop d
0068   0459 5A            add d, b
0069   045A E4            pop a
0070   045B DA            push d
0071   045C 3B 3F 1B      mov d, _currState_data ; $currState
0072   045F D7            push a
0073   0460 DA            push d
0074   0461 FA FF FF      lea d, [bp + -1] ; $i
0075   0464 2A            mov b, [d]
0076   0465 E7            pop d
0077   0466 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0078   046A DA            push d
0079   046B FA FD FF      lea d, [bp + -3] ; $j
0080   046E 2A            mov b, [d]
0081   046F E7            pop d
0082   0470 5A            add d, b
0083   0471 E4            pop a
0084   0472 32            mov bl, [d]
0085   0473 A7 00         mov bh, 0
0086   0475 E7            pop d
0087   0476 FD 3E         mov [d], bl
0088   0478             _for2_update:
0089   0478 FA FD FF      lea d, [bp + -3] ; $j
0090   047B 2A            mov b, [d]
0091   047C FD 79         mov g, b
0092   047E FD 77         inc b
0093   0480 FA FD FF      lea d, [bp + -3] ; $j
0094   0483 FD 43         mov [d], b
0095   0485 FD 27         mov b, g
0096   0487 0A 32 04      jmp _for2_cond
0097   048A             _for2_exit:
0098   048A             _for1_update:
0099   048A FA FF FF      lea d, [bp + -1] ; $i
0100   048D 2A            mov b, [d]
0101   048E FD 79         mov g, b
0102   0490 FD 77         inc b
0103   0492 FA FF FF      lea d, [bp + -1] ; $i
0104   0495 FD 43         mov [d], b
0105   0497 FD 27         mov b, g
0106   0499 0A 15 04      jmp _for1_cond
0107   049C             _for1_exit:
0108   049C             ;; for(;;){ 
0109   049C             _for3_init:
0110   049C             _for3_cond:
0111   049C             _for3_block:
0112   049C             ;; for(i = 1; i <  30     +-1; i++){ 
0113   049C             _for4_init:
0114   049C FA FF FF      lea d, [bp + -1] ; $i
0115   049F DA            push d
0116   04A0 26 01 00      mov b, $1
0117   04A3 E7            pop d
0118   04A4 FD 43         mov [d], b
0119   04A6             _for4_cond:
0120   04A6 FA FF FF      lea d, [bp + -1] ; $i
0121   04A9 2A            mov b, [d]
0122   04AA             ; START RELATIONAL
0123   04AA D7            push a
0124   04AB 11            mov a, b
0125   04AC 26 1E 00      mov b, $1e
0126   04AF             ; START TERMS
0127   04AF D7            push a
0128   04B0 11            mov a, b
0129   04B1 26 01 00      mov b, $1
0130   04B4 FD 97         neg b
0131   04B6 54            add a, b
0132   04B7 27            mov b, a
0133   04B8 E4            pop a
0134   04B9             ; END TERMS
0135   04B9 B0            cmp a, b
0136   04BA FD 73         slt ; < 
0137   04BC E4            pop a
0138   04BD             ; END RELATIONAL
0139   04BD C0 00 00      cmp b, 0
0140   04C0 C6 A1 05      je _for4_exit
0141   04C3             _for4_block:
0142   04C3             ;; for(j = 1; j <  40    +-1; j++){ 
0143   04C3             _for5_init:
0144   04C3 FA FD FF      lea d, [bp + -3] ; $j
0145   04C6 DA            push d
0146   04C7 26 01 00      mov b, $1
0147   04CA E7            pop d
0148   04CB FD 43         mov [d], b
0149   04CD             _for5_cond:
0150   04CD FA FD FF      lea d, [bp + -3] ; $j
0151   04D0 2A            mov b, [d]
0152   04D1             ; START RELATIONAL
0153   04D1 D7            push a
0154   04D2 11            mov a, b
0155   04D3 26 28 00      mov b, $28
0156   04D6             ; START TERMS
0157   04D6 D7            push a
0158   04D7 11            mov a, b
0159   04D8 26 01 00      mov b, $1
0160   04DB FD 97         neg b
0161   04DD 54            add a, b
0162   04DE 27            mov b, a
0163   04DF E4            pop a
0164   04E0             ; END TERMS
0165   04E0 B0            cmp a, b
0166   04E1 FD 73         slt ; < 
0167   04E3 E4            pop a
0168   04E4             ; END RELATIONAL
0169   04E4 C0 00 00      cmp b, 0
0170   04E7 C6 8F 05      je _for5_exit
0171   04EA             _for5_block:
0172   04EA             ;; n = neighbours(i, j); 
0173   04EA FA FB FF      lea d, [bp + -5] ; $n
0174   04ED DA            push d
0175   04EE FA FD FF      lea d, [bp + -3] ; $j
0176   04F1 2A            mov b, [d]
0177   04F2 FD AB         swp b
0178   04F4 D8            push b
0179   04F5 FA FF FF      lea d, [bp + -1] ; $i
0180   04F8 2A            mov b, [d]
0181   04F9 FD AB         swp b
0182   04FB D8            push b
0183   04FC 07 32 14      call neighbours
0184   04FF 51 04 00      add sp, 4
0185   0502 E7            pop d
0186   0503 FD 43         mov [d], b
0187   0505             ;; if(n < 2 || n > 3) nextState[i][j] = ' '; 
0188   0505             _if6_cond:
0189   0505 FA FB FF      lea d, [bp + -5] ; $n
0190   0508 2A            mov b, [d]
0191   0509             ; START RELATIONAL
0192   0509 D7            push a
0193   050A 11            mov a, b
0194   050B 26 02 00      mov b, $2
0195   050E B0            cmp a, b
0196   050F FD 73         slt ; < 
0197   0511 E4            pop a
0198   0512             ; END RELATIONAL
0199   0512 D7            push a
0200   0513 11            mov a, b
0201   0514 FA FB FF      lea d, [bp + -5] ; $n
0202   0517 2A            mov b, [d]
0203   0518             ; START RELATIONAL
0204   0518 D7            push a
0205   0519 11            mov a, b
0206   051A 26 03 00      mov b, $3
0207   051D B0            cmp a, b
0208   051E FD 7F         sgt ; >
0209   0520 E4            pop a
0210   0521             ; END RELATIONAL
0211   0521 FD A8         sor a, b ; ||
0212   0523 E4            pop a
0213   0524 C0 00 00      cmp b, 0
0214   0527 C6 4A 05      je _if6_else
0215   052A             _if6_true:
0216   052A             ;; nextState[i][j] = ' '; 
0217   052A 3B 8F 16      mov d, _nextState_data ; $nextState
0218   052D D7            push a
0219   052E DA            push d
0220   052F FA FF FF      lea d, [bp + -1] ; $i
0221   0532 2A            mov b, [d]
0222   0533 E7            pop d
0223   0534 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0224   0538 DA            push d
0225   0539 FA FD FF      lea d, [bp + -3] ; $j
0226   053C 2A            mov b, [d]
0227   053D E7            pop d
0228   053E 5A            add d, b
0229   053F E4            pop a
0230   0540 DA            push d
0231   0541 26 20 00      mov b, $20
0232   0544 E7            pop d
0233   0545 FD 3E         mov [d], bl
0234   0547 0A 7D 05      jmp _if6_exit
0235   054A             _if6_else:
0236   054A             ;; if(n == 3) nextState[i][j] = '@'; 
0237   054A             _if7_cond:
0238   054A FA FB FF      lea d, [bp + -5] ; $n
0239   054D 2A            mov b, [d]
0240   054E             ; START RELATIONAL
0241   054E D7            push a
0242   054F 11            mov a, b
0243   0550 26 03 00      mov b, $3
0244   0553 B0            cmp a, b
0245   0554 FD 71         seq ; ==
0246   0556 E4            pop a
0247   0557             ; END RELATIONAL
0248   0557 C0 00 00      cmp b, 0
0249   055A C6 7D 05      je _if7_exit
0250   055D             _if7_true:
0251   055D             ;; nextState[i][j] = '@'; 
0252   055D 3B 8F 16      mov d, _nextState_data ; $nextState
0253   0560 D7            push a
0254   0561 DA            push d
0255   0562 FA FF FF      lea d, [bp + -1] ; $i
0256   0565 2A            mov b, [d]
0257   0566 E7            pop d
0258   0567 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0259   056B DA            push d
0260   056C FA FD FF      lea d, [bp + -3] ; $j
0261   056F 2A            mov b, [d]
0262   0570 E7            pop d
0263   0571 5A            add d, b
0264   0572 E4            pop a
0265   0573 DA            push d
0266   0574 26 40 00      mov b, $40
0267   0577 E7            pop d
0268   0578 FD 3E         mov [d], bl
0269   057A 0A 7D 05      jmp _if7_exit
0270   057D             _if7_exit:
0271   057D             _if6_exit:
0272   057D             _for5_update:
0273   057D FA FD FF      lea d, [bp + -3] ; $j
0274   0580 2A            mov b, [d]
0275   0581 FD 79         mov g, b
0276   0583 FD 77         inc b
0277   0585 FA FD FF      lea d, [bp + -3] ; $j
0278   0588 FD 43         mov [d], b
0279   058A FD 27         mov b, g
0280   058C 0A CD 04      jmp _for5_cond
0281   058F             _for5_exit:
0282   058F             _for4_update:
0283   058F FA FF FF      lea d, [bp + -1] ; $i
0284   0592 2A            mov b, [d]
0285   0593 FD 79         mov g, b
0286   0595 FD 77         inc b
0287   0597 FA FF FF      lea d, [bp + -1] ; $i
0288   059A FD 43         mov [d], b
0289   059C FD 27         mov b, g
0290   059E 0A A6 04      jmp _for4_cond
0291   05A1             _for4_exit:
0292   05A1             ;; for(i = 1; i <  30     +-1; i++){ 
0293   05A1             _for8_init:
0294   05A1 FA FF FF      lea d, [bp + -1] ; $i
0295   05A4 DA            push d
0296   05A5 26 01 00      mov b, $1
0297   05A8 E7            pop d
0298   05A9 FD 43         mov [d], b
0299   05AB             _for8_cond:
0300   05AB FA FF FF      lea d, [bp + -1] ; $i
0301   05AE 2A            mov b, [d]
0302   05AF             ; START RELATIONAL
0303   05AF D7            push a
0304   05B0 11            mov a, b
0305   05B1 26 1E 00      mov b, $1e
0306   05B4             ; START TERMS
0307   05B4 D7            push a
0308   05B5 11            mov a, b
0309   05B6 26 01 00      mov b, $1
0310   05B9 FD 97         neg b
0311   05BB 54            add a, b
0312   05BC 27            mov b, a
0313   05BD E4            pop a
0314   05BE             ; END TERMS
0315   05BE B0            cmp a, b
0316   05BF FD 73         slt ; < 
0317   05C1 E4            pop a
0318   05C2             ; END RELATIONAL
0319   05C2 C0 00 00      cmp b, 0
0320   05C5 C6 46 06      je _for8_exit
0321   05C8             _for8_block:
0322   05C8             ;; for(j = 1; j <  40    +-1; j++){ 
0323   05C8             _for9_init:
0324   05C8 FA FD FF      lea d, [bp + -3] ; $j
0325   05CB DA            push d
0326   05CC 26 01 00      mov b, $1
0327   05CF E7            pop d
0328   05D0 FD 43         mov [d], b
0329   05D2             _for9_cond:
0330   05D2 FA FD FF      lea d, [bp + -3] ; $j
0331   05D5 2A            mov b, [d]
0332   05D6             ; START RELATIONAL
0333   05D6 D7            push a
0334   05D7 11            mov a, b
0335   05D8 26 28 00      mov b, $28
0336   05DB             ; START TERMS
0337   05DB D7            push a
0338   05DC 11            mov a, b
0339   05DD 26 01 00      mov b, $1
0340   05E0 FD 97         neg b
0341   05E2 54            add a, b
0342   05E3 27            mov b, a
0343   05E4 E4            pop a
0344   05E5             ; END TERMS
0345   05E5 B0            cmp a, b
0346   05E6 FD 73         slt ; < 
0347   05E8 E4            pop a
0348   05E9             ; END RELATIONAL
0349   05E9 C0 00 00      cmp b, 0
0350   05EC C6 34 06      je _for9_exit
0351   05EF             _for9_block:
0352   05EF             ;; currState[i][j] = nextState[i][j]; 
0353   05EF 3B 3F 1B      mov d, _currState_data ; $currState
0354   05F2 D7            push a
0355   05F3 DA            push d
0356   05F4 FA FF FF      lea d, [bp + -1] ; $i
0357   05F7 2A            mov b, [d]
0358   05F8 E7            pop d
0359   05F9 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0360   05FD DA            push d
0361   05FE FA FD FF      lea d, [bp + -3] ; $j
0362   0601 2A            mov b, [d]
0363   0602 E7            pop d
0364   0603 5A            add d, b
0365   0604 E4            pop a
0366   0605 DA            push d
0367   0606 3B 8F 16      mov d, _nextState_data ; $nextState
0368   0609 D7            push a
0369   060A DA            push d
0370   060B FA FF FF      lea d, [bp + -1] ; $i
0371   060E 2A            mov b, [d]
0372   060F E7            pop d
0373   0610 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0374   0614 DA            push d
0375   0615 FA FD FF      lea d, [bp + -3] ; $j
0376   0618 2A            mov b, [d]
0377   0619 E7            pop d
0378   061A 5A            add d, b
0379   061B E4            pop a
0380   061C 32            mov bl, [d]
0381   061D A7 00         mov bh, 0
0382   061F E7            pop d
0383   0620 FD 3E         mov [d], bl
0384   0622             _for9_update:
0385   0622 FA FD FF      lea d, [bp + -3] ; $j
0386   0625 2A            mov b, [d]
0387   0626 FD 79         mov g, b
0388   0628 FD 77         inc b
0389   062A FA FD FF      lea d, [bp + -3] ; $j
0390   062D FD 43         mov [d], b
0391   062F FD 27         mov b, g
0392   0631 0A D2 05      jmp _for9_cond
0393   0634             _for9_exit:
0394   0634             _for8_update:
0395   0634 FA FF FF      lea d, [bp + -1] ; $i
0396   0637 2A            mov b, [d]
0397   0638 FD 79         mov g, b
0398   063A FD 77         inc b
0399   063C FA FF FF      lea d, [bp + -1] ; $i
0400   063F FD 43         mov [d], b
0401   0641 FD 27         mov b, g
0402   0643 0A AB 05      jmp _for8_cond
0403   0646             _for8_exit:
0404   0646             ;; printf(clear); 
0405   0646 3B 84 16      mov d, _clear_data ; $clear
0406   0649 2D            mov b, d
0407   064A FD AB         swp b
0408   064C D8            push b
0409   064D 07 2C 08      call printf
0410   0650 51 02 00      add sp, 2
0411   0653             ;; show(); 
0412   0653 07 45 13      call show
0413   0656             ;; puts("\n\rPress CTRL+C to quit.\n\r"); 
0414   0656 26 EF 1F      mov b, __s0 ; "\n\rPress CTRL+C to quit.\n\r"
0415   0659 FD AB         swp b
0416   065B D8            push b
0417   065C 07 5C 0E      call puts
0418   065F 51 02 00      add sp, 2
0419   0662             _for3_update:
0420   0662 0A 9C 04      jmp _for3_cond
0421   0665             _for3_exit:
0422   0665 05 0B         syscall sys_terminate_proc
0423   0667             
0424   0667             strcpy:
0425   0667 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0426   066A             ; $psrc 
0427   066A             ; $pdest 
0428   066A 52 04 00      sub sp, 4
0429   066D             ;; psrc = src; 
0430   066D FA FF FF      lea d, [bp + -1] ; $psrc
0431   0670 DA            push d
0432   0671 FA 05 00      lea d, [bp + 5] ; $src
0433   0674 2A            mov b, [d]
0434   0675 E7            pop d
0435   0676 FD 43         mov [d], b
0436   0678             ;; pdest = dest; 
0437   0678 FA FD FF      lea d, [bp + -3] ; $pdest
0438   067B DA            push d
0439   067C FA 07 00      lea d, [bp + 7] ; $dest
0440   067F 2A            mov b, [d]
0441   0680 E7            pop d
0442   0681 FD 43         mov [d], b
0443   0683             ;; while(*psrc) *pdest++ = *psrc++; 
0444   0683             _while10_cond:
0445   0683 FA FF FF      lea d, [bp + -1] ; $psrc
0446   0686 2A            mov b, [d]
0447   0687 74            mov d, b
0448   0688 32            mov bl, [d]
0449   0689 A7 00         mov bh, 0
0450   068B C0 00 00      cmp b, 0
0451   068E C6 BA 06      je _while10_exit
0452   0691             _while10_block:
0453   0691             ;; *pdest++ = *psrc++; 
0454   0691 FA FD FF      lea d, [bp + -3] ; $pdest
0455   0694 2A            mov b, [d]
0456   0695 FD 79         mov g, b
0457   0697 FD 77         inc b
0458   0699 FA FD FF      lea d, [bp + -3] ; $pdest
0459   069C FD 43         mov [d], b
0460   069E FD 27         mov b, g
0461   06A0 D8            push b
0462   06A1 FA FF FF      lea d, [bp + -1] ; $psrc
0463   06A4 2A            mov b, [d]
0464   06A5 FD 79         mov g, b
0465   06A7 FD 77         inc b
0466   06A9 FA FF FF      lea d, [bp + -1] ; $psrc
0467   06AC FD 43         mov [d], b
0468   06AE FD 27         mov b, g
0469   06B0 74            mov d, b
0470   06B1 32            mov bl, [d]
0471   06B2 A7 00         mov bh, 0
0472   06B4 E7            pop d
0473   06B5 FD 3E         mov [d], bl
0474   06B7 0A 83 06      jmp _while10_cond
0475   06BA             _while10_exit:
0476   06BA             ;; *pdest = '\0'; 
0477   06BA FA FD FF      lea d, [bp + -3] ; $pdest
0478   06BD 2A            mov b, [d]
0479   06BE D8            push b
0480   06BF 26 00 00      mov b, $0
0481   06C2 E7            pop d
0482   06C3 FD 3E         mov [d], bl
0483   06C5 F9            leave
0484   06C6 09            ret
0485   06C7             
0486   06C7             strcmp:
0487   06C7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0488   06CA             ;; while (*s1 && (*s1 == *s2)) { 
0489   06CA             _while11_cond:
0490   06CA FA 07 00      lea d, [bp + 7] ; $s1
0491   06CD 2A            mov b, [d]
0492   06CE 74            mov d, b
0493   06CF 32            mov bl, [d]
0494   06D0 A7 00         mov bh, 0
0495   06D2 D7            push a
0496   06D3 11            mov a, b
0497   06D4 FA 07 00      lea d, [bp + 7] ; $s1
0498   06D7 2A            mov b, [d]
0499   06D8 74            mov d, b
0500   06D9 32            mov bl, [d]
0501   06DA A7 00         mov bh, 0
0502   06DC             ; START RELATIONAL
0503   06DC D7            push a
0504   06DD 11            mov a, b
0505   06DE FA 05 00      lea d, [bp + 5] ; $s2
0506   06E1 2A            mov b, [d]
0507   06E2 74            mov d, b
0508   06E3 32            mov bl, [d]
0509   06E4 A7 00         mov bh, 0
0510   06E6 B0            cmp a, b
0511   06E7 FD 71         seq ; ==
0512   06E9 E4            pop a
0513   06EA             ; END RELATIONAL
0514   06EA FD A7         sand a, b ; &&
0515   06EC E4            pop a
0516   06ED C0 00 00      cmp b, 0
0517   06F0 C6 14 07      je _while11_exit
0518   06F3             _while11_block:
0519   06F3             ;; s1++; 
0520   06F3 FA 07 00      lea d, [bp + 7] ; $s1
0521   06F6 2A            mov b, [d]
0522   06F7 FD 79         mov g, b
0523   06F9 FD 77         inc b
0524   06FB FA 07 00      lea d, [bp + 7] ; $s1
0525   06FE FD 43         mov [d], b
0526   0700 FD 27         mov b, g
0527   0702             ;; s2++; 
0528   0702 FA 05 00      lea d, [bp + 5] ; $s2
0529   0705 2A            mov b, [d]
0530   0706 FD 79         mov g, b
0531   0708 FD 77         inc b
0532   070A FA 05 00      lea d, [bp + 5] ; $s2
0533   070D FD 43         mov [d], b
0534   070F FD 27         mov b, g
0535   0711 0A CA 06      jmp _while11_cond
0536   0714             _while11_exit:
0537   0714             ;; return *s1 - *s2; 
0538   0714 FA 07 00      lea d, [bp + 7] ; $s1
0539   0717 2A            mov b, [d]
0540   0718 74            mov d, b
0541   0719 32            mov bl, [d]
0542   071A A7 00         mov bh, 0
0543   071C             ; START TERMS
0544   071C D7            push a
0545   071D 11            mov a, b
0546   071E FA 05 00      lea d, [bp + 5] ; $s2
0547   0721 2A            mov b, [d]
0548   0722 74            mov d, b
0549   0723 32            mov bl, [d]
0550   0724 A7 00         mov bh, 0
0551   0726 60            sub a, b
0552   0727 27            mov b, a
0553   0728 E4            pop a
0554   0729             ; END TERMS
0555   0729 F9            leave
0556   072A 09            ret
0557   072B             
0558   072B             strcat:
0559   072B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0560   072E             ; $dest_len 
0561   072E             ; $i 
0562   072E 52 04 00      sub sp, 4
0563   0731             ;; dest_len = strlen(dest); 
0564   0731 FA FF FF      lea d, [bp + -1] ; $dest_len
0565   0734 DA            push d
0566   0735 FA 07 00      lea d, [bp + 7] ; $dest
0567   0738 2A            mov b, [d]
0568   0739 FD AB         swp b
0569   073B D8            push b
0570   073C 07 E1 07      call strlen
0571   073F 51 02 00      add sp, 2
0572   0742 E7            pop d
0573   0743 FD 43         mov [d], b
0574   0745             ;; for (i = 0; src[i] != 0; i=i+1) { 
0575   0745             _for12_init:
0576   0745 FA FD FF      lea d, [bp + -3] ; $i
0577   0748 DA            push d
0578   0749 26 00 00      mov b, $0
0579   074C E7            pop d
0580   074D FD 43         mov [d], b
0581   074F             _for12_cond:
0582   074F FA 05 00      lea d, [bp + 5] ; $src
0583   0752 FD 2A         mov d, [d]
0584   0754 D7            push a
0585   0755 DA            push d
0586   0756 FA FD FF      lea d, [bp + -3] ; $i
0587   0759 2A            mov b, [d]
0588   075A E7            pop d
0589   075B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0590   075F E4            pop a
0591   0760 32            mov bl, [d]
0592   0761 A7 00         mov bh, 0
0593   0763             ; START RELATIONAL
0594   0763 D7            push a
0595   0764 11            mov a, b
0596   0765 26 00 00      mov b, $0
0597   0768 B0            cmp a, b
0598   0769 FD 72         sneq ; !=
0599   076B E4            pop a
0600   076C             ; END RELATIONAL
0601   076C C0 00 00      cmp b, 0
0602   076F C6 BA 07      je _for12_exit
0603   0772             _for12_block:
0604   0772             ;; dest[dest_len + i] = src[i]; 
0605   0772 FA 07 00      lea d, [bp + 7] ; $dest
0606   0775 FD 2A         mov d, [d]
0607   0777 D7            push a
0608   0778 DA            push d
0609   0779 FA FF FF      lea d, [bp + -1] ; $dest_len
0610   077C 2A            mov b, [d]
0611   077D             ; START TERMS
0612   077D D7            push a
0613   077E 11            mov a, b
0614   077F FA FD FF      lea d, [bp + -3] ; $i
0615   0782 2A            mov b, [d]
0616   0783 54            add a, b
0617   0784 27            mov b, a
0618   0785 E4            pop a
0619   0786             ; END TERMS
0620   0786 E7            pop d
0621   0787 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0622   078B E4            pop a
0623   078C DA            push d
0624   078D FA 05 00      lea d, [bp + 5] ; $src
0625   0790 FD 2A         mov d, [d]
0626   0792 D7            push a
0627   0793 DA            push d
0628   0794 FA FD FF      lea d, [bp + -3] ; $i
0629   0797 2A            mov b, [d]
0630   0798 E7            pop d
0631   0799 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0632   079D E4            pop a
0633   079E 32            mov bl, [d]
0634   079F A7 00         mov bh, 0
0635   07A1 E7            pop d
0636   07A2 FD 3E         mov [d], bl
0637   07A4             _for12_update:
0638   07A4 FA FD FF      lea d, [bp + -3] ; $i
0639   07A7 DA            push d
0640   07A8 FA FD FF      lea d, [bp + -3] ; $i
0641   07AB 2A            mov b, [d]
0642   07AC             ; START TERMS
0643   07AC D7            push a
0644   07AD 11            mov a, b
0645   07AE 26 01 00      mov b, $1
0646   07B1 54            add a, b
0647   07B2 27            mov b, a
0648   07B3 E4            pop a
0649   07B4             ; END TERMS
0650   07B4 E7            pop d
0651   07B5 FD 43         mov [d], b
0652   07B7 0A 4F 07      jmp _for12_cond
0653   07BA             _for12_exit:
0654   07BA             ;; dest[dest_len + i] = 0; 
0655   07BA FA 07 00      lea d, [bp + 7] ; $dest
0656   07BD FD 2A         mov d, [d]
0657   07BF D7            push a
0658   07C0 DA            push d
0659   07C1 FA FF FF      lea d, [bp + -1] ; $dest_len
0660   07C4 2A            mov b, [d]
0661   07C5             ; START TERMS
0662   07C5 D7            push a
0663   07C6 11            mov a, b
0664   07C7 FA FD FF      lea d, [bp + -3] ; $i
0665   07CA 2A            mov b, [d]
0666   07CB 54            add a, b
0667   07CC 27            mov b, a
0668   07CD E4            pop a
0669   07CE             ; END TERMS
0670   07CE E7            pop d
0671   07CF FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0672   07D3 E4            pop a
0673   07D4 DA            push d
0674   07D5 26 00 00      mov b, $0
0675   07D8 E7            pop d
0676   07D9 FD 3E         mov [d], bl
0677   07DB             ;; return dest; 
0678   07DB FA 07 00      lea d, [bp + 7] ; $dest
0679   07DE 2A            mov b, [d]
0680   07DF F9            leave
0681   07E0 09            ret
0682   07E1             
0683   07E1             strlen:
0684   07E1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0685   07E4             ; $length 
0686   07E4 52 02 00      sub sp, 2
0687   07E7             ;; length = 0; 
0688   07E7 FA FF FF      lea d, [bp + -1] ; $length
0689   07EA DA            push d
0690   07EB 26 00 00      mov b, $0
0691   07EE E7            pop d
0692   07EF FD 43         mov [d], b
0693   07F1             ;; while (str[length] != 0) { 
0694   07F1             _while13_cond:
0695   07F1 FA 05 00      lea d, [bp + 5] ; $str
0696   07F4 FD 2A         mov d, [d]
0697   07F6 D7            push a
0698   07F7 DA            push d
0699   07F8 FA FF FF      lea d, [bp + -1] ; $length
0700   07FB 2A            mov b, [d]
0701   07FC E7            pop d
0702   07FD FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0703   0801 E4            pop a
0704   0802 32            mov bl, [d]
0705   0803 A7 00         mov bh, 0
0706   0805             ; START RELATIONAL
0707   0805 D7            push a
0708   0806 11            mov a, b
0709   0807 26 00 00      mov b, $0
0710   080A B0            cmp a, b
0711   080B FD 72         sneq ; !=
0712   080D E4            pop a
0713   080E             ; END RELATIONAL
0714   080E C0 00 00      cmp b, 0
0715   0811 C6 26 08      je _while13_exit
0716   0814             _while13_block:
0717   0814             ;; length++; 
0718   0814 FA FF FF      lea d, [bp + -1] ; $length
0719   0817 2A            mov b, [d]
0720   0818 FD 79         mov g, b
0721   081A FD 77         inc b
0722   081C FA FF FF      lea d, [bp + -1] ; $length
0723   081F FD 43         mov [d], b
0724   0821 FD 27         mov b, g
0725   0823 0A F1 07      jmp _while13_cond
0726   0826             _while13_exit:
0727   0826             ;; return length; 
0728   0826 FA FF FF      lea d, [bp + -1] ; $length
0729   0829 2A            mov b, [d]
0730   082A F9            leave
0731   082B 09            ret
0732   082C             
0733   082C             printf:
0734   082C F8 00 00      enter 0 ; (push bp; mov bp, sp)
0735   082F             ; $p 
0736   082F             ; $fp 
0737   082F             ; $i 
0738   082F 52 06 00      sub sp, 6
0739   0832             ;; fp = format; 
0740   0832 FA FD FF      lea d, [bp + -3] ; $fp
0741   0835 DA            push d
0742   0836 FA 05 00      lea d, [bp + 5] ; $format
0743   0839 2A            mov b, [d]
0744   083A E7            pop d
0745   083B FD 43         mov [d], b
0746   083D             ;; p = &format + 2; 
0747   083D FA FF FF      lea d, [bp + -1] ; $p
0748   0840 DA            push d
0749   0841 FA 05 00      lea d, [bp + 5] ; $format
0750   0844 2D            mov b, d
0751   0845             ; START TERMS
0752   0845 D7            push a
0753   0846 11            mov a, b
0754   0847 26 02 00      mov b, $2
0755   084A 54            add a, b
0756   084B 27            mov b, a
0757   084C E4            pop a
0758   084D             ; END TERMS
0759   084D E7            pop d
0760   084E FD 43         mov [d], b
0761   0850             ;; for(;;){ 
0762   0850             _for14_init:
0763   0850             _for14_cond:
0764   0850             _for14_block:
0765   0850             ;; if(!*fp) break; 
0766   0850             _if15_cond:
0767   0850 FA FD FF      lea d, [bp + -3] ; $fp
0768   0853 2A            mov b, [d]
0769   0854 74            mov d, b
0770   0855 32            mov bl, [d]
0771   0856 A7 00         mov bh, 0
0772   0858 C0 00 00      cmp b, 0
0773   085B FD 71         seq ; !
0774   085D C0 00 00      cmp b, 0
0775   0860 C6 69 08      je _if15_else
0776   0863             _if15_true:
0777   0863             ;; break; 
0778   0863 0A B3 09      jmp _for14_exit ; for break
0779   0866 0A B0 09      jmp _if15_exit
0780   0869             _if15_else:
0781   0869             ;; if(*fp == '%'){ 
0782   0869             _if16_cond:
0783   0869 FA FD FF      lea d, [bp + -3] ; $fp
0784   086C 2A            mov b, [d]
0785   086D 74            mov d, b
0786   086E 32            mov bl, [d]
0787   086F A7 00         mov bh, 0
0788   0871             ; START RELATIONAL
0789   0871 D7            push a
0790   0872 11            mov a, b
0791   0873 26 25 00      mov b, $25
0792   0876 B0            cmp a, b
0793   0877 FD 71         seq ; ==
0794   0879 E4            pop a
0795   087A             ; END RELATIONAL
0796   087A C0 00 00      cmp b, 0
0797   087D C6 92 09      je _if16_else
0798   0880             _if16_true:
0799   0880             ;; fp++; 
0800   0880 FA FD FF      lea d, [bp + -3] ; $fp
0801   0883 2A            mov b, [d]
0802   0884 FD 79         mov g, b
0803   0886 FD 77         inc b
0804   0888 FA FD FF      lea d, [bp + -3] ; $fp
0805   088B FD 43         mov [d], b
0806   088D FD 27         mov b, g
0807   088F             ;; switch(*fp){ 
0808   088F             _switch17_expr:
0809   088F FA FD FF      lea d, [bp + -3] ; $fp
0810   0892 2A            mov b, [d]
0811   0893 74            mov d, b
0812   0894 32            mov bl, [d]
0813   0895 A7 00         mov bh, 0
0814   0897             _switch17_comparisons:
0815   0897 C1 64         cmp bl, $64
0816   0899 C6 BB 08      je _switch17_case0
0817   089C C1 69         cmp bl, $69
0818   089E C6 BB 08      je _switch17_case1
0819   08A1 C1 75         cmp bl, $75
0820   08A3 C6 E0 08      je _switch17_case2
0821   08A6 C1 78         cmp bl, $78
0822   08A8 C6 05 09      je _switch17_case3
0823   08AB C1 63         cmp bl, $63
0824   08AD C6 2A 09      je _switch17_case4
0825   08B0 C1 73         cmp bl, $73
0826   08B2 C6 4F 09      je _switch17_case5
0827   08B5 0A 74 09      jmp _switch17_default
0828   08B8 0A 80 09      jmp _switch17_exit
0829   08BB             _switch17_case0:
0830   08BB             _switch17_case1:
0831   08BB             ;; prints(*(int*)p); 
0832   08BB FA FF FF      lea d, [bp + -1] ; $p
0833   08BE 2A            mov b, [d]
0834   08BF 74            mov d, b
0835   08C0 2A            mov b, [d]
0836   08C1 FD AB         swp b
0837   08C3 D8            push b
0838   08C4 07 45 0C      call prints
0839   08C7 51 02 00      add sp, 2
0840   08CA             ;; p = p + 2; 
0841   08CA FA FF FF      lea d, [bp + -1] ; $p
0842   08CD DA            push d
0843   08CE FA FF FF      lea d, [bp + -1] ; $p
0844   08D1 2A            mov b, [d]
0845   08D2             ; START TERMS
0846   08D2 D7            push a
0847   08D3 11            mov a, b
0848   08D4 26 02 00      mov b, $2
0849   08D7 54            add a, b
0850   08D8 27            mov b, a
0851   08D9 E4            pop a
0852   08DA             ; END TERMS
0853   08DA E7            pop d
0854   08DB FD 43         mov [d], b
0855   08DD             ;; break; 
0856   08DD 0A 80 09      jmp _switch17_exit ; case break
0857   08E0             _switch17_case2:
0858   08E0             ;; printu(*(unsigned int*)p); 
0859   08E0 FA FF FF      lea d, [bp + -1] ; $p
0860   08E3 2A            mov b, [d]
0861   08E4 74            mov d, b
0862   08E5 2A            mov b, [d]
0863   08E6 FD AB         swp b
0864   08E8 D8            push b
0865   08E9 07 3A 0D      call printu
0866   08EC 51 02 00      add sp, 2
0867   08EF             ;; p = p + 2; 
0868   08EF FA FF FF      lea d, [bp + -1] ; $p
0869   08F2 DA            push d
0870   08F3 FA FF FF      lea d, [bp + -1] ; $p
0871   08F6 2A            mov b, [d]
0872   08F7             ; START TERMS
0873   08F7 D7            push a
0874   08F8 11            mov a, b
0875   08F9 26 02 00      mov b, $2
0876   08FC 54            add a, b
0877   08FD 27            mov b, a
0878   08FE E4            pop a
0879   08FF             ; END TERMS
0880   08FF E7            pop d
0881   0900 FD 43         mov [d], b
0882   0902             ;; break; 
0883   0902 0A 80 09      jmp _switch17_exit ; case break
0884   0905             _switch17_case3:
0885   0905             ;; printx16(*(unsigned int*)p); 
0886   0905 FA FF FF      lea d, [bp + -1] ; $p
0887   0908 2A            mov b, [d]
0888   0909 74            mov d, b
0889   090A 2A            mov b, [d]
0890   090B FD AB         swp b
0891   090D D8            push b
0892   090E 07 B5 09      call printx16
0893   0911 51 02 00      add sp, 2
0894   0914             ;; p = p + 2; 
0895   0914 FA FF FF      lea d, [bp + -1] ; $p
0896   0917 DA            push d
0897   0918 FA FF FF      lea d, [bp + -1] ; $p
0898   091B 2A            mov b, [d]
0899   091C             ; START TERMS
0900   091C D7            push a
0901   091D 11            mov a, b
0902   091E 26 02 00      mov b, $2
0903   0921 54            add a, b
0904   0922 27            mov b, a
0905   0923 E4            pop a
0906   0924             ; END TERMS
0907   0924 E7            pop d
0908   0925 FD 43         mov [d], b
0909   0927             ;; break; 
0910   0927 0A 80 09      jmp _switch17_exit ; case break
0911   092A             _switch17_case4:
0912   092A             ;; putchar(*(char*)p); 
0913   092A FA FF FF      lea d, [bp + -1] ; $p
0914   092D 2A            mov b, [d]
0915   092E 74            mov d, b
0916   092F 32            mov bl, [d]
0917   0930 A7 00         mov bh, 0
0918   0932 DD            push bl
0919   0933 07 26 0E      call putchar
0920   0936 51 01 00      add sp, 1
0921   0939             ;; p = p + 2; 
0922   0939 FA FF FF      lea d, [bp + -1] ; $p
0923   093C DA            push d
0924   093D FA FF FF      lea d, [bp + -1] ; $p
0925   0940 2A            mov b, [d]
0926   0941             ; START TERMS
0927   0941 D7            push a
0928   0942 11            mov a, b
0929   0943 26 02 00      mov b, $2
0930   0946 54            add a, b
0931   0947 27            mov b, a
0932   0948 E4            pop a
0933   0949             ; END TERMS
0934   0949 E7            pop d
0935   094A FD 43         mov [d], b
0936   094C             ;; break; 
0937   094C 0A 80 09      jmp _switch17_exit ; case break
0938   094F             _switch17_case5:
0939   094F             ;; print(*(char**)p); 
0940   094F FA FF FF      lea d, [bp + -1] ; $p
0941   0952 2A            mov b, [d]
0942   0953 74            mov d, b
0943   0954 2A            mov b, [d]
0944   0955 FD AB         swp b
0945   0957 D8            push b
0946   0958 07 6E 0E      call print
0947   095B 51 02 00      add sp, 2
0948   095E             ;; p = p + 2; 
0949   095E FA FF FF      lea d, [bp + -1] ; $p
0950   0961 DA            push d
0951   0962 FA FF FF      lea d, [bp + -1] ; $p
0952   0965 2A            mov b, [d]
0953   0966             ; START TERMS
0954   0966 D7            push a
0955   0967 11            mov a, b
0956   0968 26 02 00      mov b, $2
0957   096B 54            add a, b
0958   096C 27            mov b, a
0959   096D E4            pop a
0960   096E             ; END TERMS
0961   096E E7            pop d
0962   096F FD 43         mov [d], b
0963   0971             ;; break; 
0964   0971 0A 80 09      jmp _switch17_exit ; case break
0965   0974             _switch17_default:
0966   0974             ;; print("Error: Unknown argument type.\n"); 
0967   0974 26 09 20      mov b, __s1 ; "Error: Unknown argument type.\n"
0968   0977 FD AB         swp b
0969   0979 D8            push b
0970   097A 07 6E 0E      call print
0971   097D 51 02 00      add sp, 2
0972   0980             _switch17_exit:
0973   0980             ;; fp++; 
0974   0980 FA FD FF      lea d, [bp + -3] ; $fp
0975   0983 2A            mov b, [d]
0976   0984 FD 79         mov g, b
0977   0986 FD 77         inc b
0978   0988 FA FD FF      lea d, [bp + -3] ; $fp
0979   098B FD 43         mov [d], b
0980   098D FD 27         mov b, g
0981   098F 0A B0 09      jmp _if16_exit
0982   0992             _if16_else:
0983   0992             ;; putchar(*fp); 
0984   0992 FA FD FF      lea d, [bp + -3] ; $fp
0985   0995 2A            mov b, [d]
0986   0996 74            mov d, b
0987   0997 32            mov bl, [d]
0988   0998 A7 00         mov bh, 0
0989   099A DD            push bl
0990   099B 07 26 0E      call putchar
0991   099E 51 01 00      add sp, 1
0992   09A1             ;; fp++; 
0993   09A1 FA FD FF      lea d, [bp + -3] ; $fp
0994   09A4 2A            mov b, [d]
0995   09A5 FD 79         mov g, b
0996   09A7 FD 77         inc b
0997   09A9 FA FD FF      lea d, [bp + -3] ; $fp
0998   09AC FD 43         mov [d], b
0999   09AE FD 27         mov b, g
1000   09B0             _if16_exit:
1001   09B0             _if15_exit:
1002   09B0             _for14_update:
1003   09B0 0A 50 08      jmp _for14_cond
1004   09B3             _for14_exit:
1005   09B3 F9            leave
1006   09B4 09            ret
1007   09B5             
1008   09B5             printx16:
1009   09B5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1010   09B8             
1011   09B8             ; --- BEGIN INLINE ASM BLOCK
1012   09B8 FA 05 00      lea d, [bp + 5] ; $hex
1013   09BB 2A            mov b, [d]
1014   09BC 07 45 12      call print_u16x
1015   09BF             ; --- END INLINE ASM BLOCK
1016   09BF             
1017   09BF F9            leave
1018   09C0 09            ret
1019   09C1             
1020   09C1             printx8:
1021   09C1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1022   09C4             
1023   09C4             ; --- BEGIN INLINE ASM BLOCK
1024   09C4 FA 05 00      lea d, [bp + 5] ; $hex
1025   09C7 32            mov bl, [d]
1026   09C8 07 89 12      call print_u8x
1027   09CB             ; --- END INLINE ASM BLOCK
1028   09CB             
1029   09CB F9            leave
1030   09CC 09            ret
1031   09CD             
1032   09CD             hex_to_int:
1033   09CD F8 00 00      enter 0 ; (push bp; mov bp, sp)
1034   09D0             ; $value 
1035   09D0 10 00 00      mov a, $0
1036   09D3 45 FF FF      mov [bp + -1], a
1037   09D6             ; $i 
1038   09D6             ; $hex_char 
1039   09D6             ; $len 
1040   09D6 52 07 00      sub sp, 7
1041   09D9             ;; len = strlen(hex_string); 
1042   09D9 FA FA FF      lea d, [bp + -6] ; $len
1043   09DC DA            push d
1044   09DD FA 05 00      lea d, [bp + 5] ; $hex_string
1045   09E0 2A            mov b, [d]
1046   09E1 FD AB         swp b
1047   09E3 D8            push b
1048   09E4 07 E1 07      call strlen
1049   09E7 51 02 00      add sp, 2
1050   09EA E7            pop d
1051   09EB FD 43         mov [d], b
1052   09ED             ;; for (i = 0; i < len; i++) { 
1053   09ED             _for18_init:
1054   09ED FA FD FF      lea d, [bp + -3] ; $i
1055   09F0 DA            push d
1056   09F1 26 00 00      mov b, $0
1057   09F4 E7            pop d
1058   09F5 FD 43         mov [d], b
1059   09F7             _for18_cond:
1060   09F7 FA FD FF      lea d, [bp + -3] ; $i
1061   09FA 2A            mov b, [d]
1062   09FB             ; START RELATIONAL
1063   09FB D7            push a
1064   09FC 11            mov a, b
1065   09FD FA FA FF      lea d, [bp + -6] ; $len
1066   0A00 2A            mov b, [d]
1067   0A01 B0            cmp a, b
1068   0A02 FD 73         slt ; < 
1069   0A04 E4            pop a
1070   0A05             ; END RELATIONAL
1071   0A05 C0 00 00      cmp b, 0
1072   0A08 C6 0D 0B      je _for18_exit
1073   0A0B             _for18_block:
1074   0A0B             ;; hex_char = hex_string[i]; 
1075   0A0B FA FC FF      lea d, [bp + -4] ; $hex_char
1076   0A0E DA            push d
1077   0A0F FA 05 00      lea d, [bp + 5] ; $hex_string
1078   0A12 FD 2A         mov d, [d]
1079   0A14 D7            push a
1080   0A15 DA            push d
1081   0A16 FA FD FF      lea d, [bp + -3] ; $i
1082   0A19 2A            mov b, [d]
1083   0A1A E7            pop d
1084   0A1B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1085   0A1F E4            pop a
1086   0A20 32            mov bl, [d]
1087   0A21 A7 00         mov bh, 0
1088   0A23 E7            pop d
1089   0A24 FD 3E         mov [d], bl
1090   0A26             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1091   0A26             _if19_cond:
1092   0A26 FA FC FF      lea d, [bp + -4] ; $hex_char
1093   0A29 32            mov bl, [d]
1094   0A2A A7 00         mov bh, 0
1095   0A2C             ; START RELATIONAL
1096   0A2C D7            push a
1097   0A2D 11            mov a, b
1098   0A2E 26 61 00      mov b, $61
1099   0A31 B0            cmp a, b
1100   0A32 FD 80         sge ; >=
1101   0A34 E4            pop a
1102   0A35             ; END RELATIONAL
1103   0A35 D7            push a
1104   0A36 11            mov a, b
1105   0A37 FA FC FF      lea d, [bp + -4] ; $hex_char
1106   0A3A 32            mov bl, [d]
1107   0A3B A7 00         mov bh, 0
1108   0A3D             ; START RELATIONAL
1109   0A3D D7            push a
1110   0A3E 11            mov a, b
1111   0A3F 26 66 00      mov b, $66
1112   0A42 B0            cmp a, b
1113   0A43 FD 74         sle ; <=
1114   0A45 E4            pop a
1115   0A46             ; END RELATIONAL
1116   0A46 FD A7         sand a, b ; &&
1117   0A48 E4            pop a
1118   0A49 C0 00 00      cmp b, 0
1119   0A4C C6 7D 0A      je _if19_else
1120   0A4F             _if19_true:
1121   0A4F             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1122   0A4F FA FF FF      lea d, [bp + -1] ; $value
1123   0A52 DA            push d
1124   0A53 FA FF FF      lea d, [bp + -1] ; $value
1125   0A56 2A            mov b, [d]
1126   0A57             ; START FACTORS
1127   0A57 D7            push a
1128   0A58 11            mov a, b
1129   0A59 26 10 00      mov b, $10
1130   0A5C AC            mul a, b ; *
1131   0A5D 11            mov a, b
1132   0A5E 27            mov b, a
1133   0A5F E4            pop a
1134   0A60             ; END FACTORS
1135   0A60             ; START TERMS
1136   0A60 D7            push a
1137   0A61 11            mov a, b
1138   0A62 FA FC FF      lea d, [bp + -4] ; $hex_char
1139   0A65 32            mov bl, [d]
1140   0A66 A7 00         mov bh, 0
1141   0A68             ; START TERMS
1142   0A68 D7            push a
1143   0A69 11            mov a, b
1144   0A6A 26 61 00      mov b, $61
1145   0A6D 60            sub a, b
1146   0A6E 26 0A 00      mov b, $a
1147   0A71 54            add a, b
1148   0A72 27            mov b, a
1149   0A73 E4            pop a
1150   0A74             ; END TERMS
1151   0A74 54            add a, b
1152   0A75 27            mov b, a
1153   0A76 E4            pop a
1154   0A77             ; END TERMS
1155   0A77 E7            pop d
1156   0A78 FD 43         mov [d], b
1157   0A7A 0A FB 0A      jmp _if19_exit
1158   0A7D             _if19_else:
1159   0A7D             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1160   0A7D             _if20_cond:
1161   0A7D FA FC FF      lea d, [bp + -4] ; $hex_char
1162   0A80 32            mov bl, [d]
1163   0A81 A7 00         mov bh, 0
1164   0A83             ; START RELATIONAL
1165   0A83 D7            push a
1166   0A84 11            mov a, b
1167   0A85 26 41 00      mov b, $41
1168   0A88 B0            cmp a, b
1169   0A89 FD 80         sge ; >=
1170   0A8B E4            pop a
1171   0A8C             ; END RELATIONAL
1172   0A8C D7            push a
1173   0A8D 11            mov a, b
1174   0A8E FA FC FF      lea d, [bp + -4] ; $hex_char
1175   0A91 32            mov bl, [d]
1176   0A92 A7 00         mov bh, 0
1177   0A94             ; START RELATIONAL
1178   0A94 D7            push a
1179   0A95 11            mov a, b
1180   0A96 26 46 00      mov b, $46
1181   0A99 B0            cmp a, b
1182   0A9A FD 74         sle ; <=
1183   0A9C E4            pop a
1184   0A9D             ; END RELATIONAL
1185   0A9D FD A7         sand a, b ; &&
1186   0A9F E4            pop a
1187   0AA0 C0 00 00      cmp b, 0
1188   0AA3 C6 D4 0A      je _if20_else
1189   0AA6             _if20_true:
1190   0AA6             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1191   0AA6 FA FF FF      lea d, [bp + -1] ; $value
1192   0AA9 DA            push d
1193   0AAA FA FF FF      lea d, [bp + -1] ; $value
1194   0AAD 2A            mov b, [d]
1195   0AAE             ; START FACTORS
1196   0AAE D7            push a
1197   0AAF 11            mov a, b
1198   0AB0 26 10 00      mov b, $10
1199   0AB3 AC            mul a, b ; *
1200   0AB4 11            mov a, b
1201   0AB5 27            mov b, a
1202   0AB6 E4            pop a
1203   0AB7             ; END FACTORS
1204   0AB7             ; START TERMS
1205   0AB7 D7            push a
1206   0AB8 11            mov a, b
1207   0AB9 FA FC FF      lea d, [bp + -4] ; $hex_char
1208   0ABC 32            mov bl, [d]
1209   0ABD A7 00         mov bh, 0
1210   0ABF             ; START TERMS
1211   0ABF D7            push a
1212   0AC0 11            mov a, b
1213   0AC1 26 41 00      mov b, $41
1214   0AC4 60            sub a, b
1215   0AC5 26 0A 00      mov b, $a
1216   0AC8 54            add a, b
1217   0AC9 27            mov b, a
1218   0ACA E4            pop a
1219   0ACB             ; END TERMS
1220   0ACB 54            add a, b
1221   0ACC 27            mov b, a
1222   0ACD E4            pop a
1223   0ACE             ; END TERMS
1224   0ACE E7            pop d
1225   0ACF FD 43         mov [d], b
1226   0AD1 0A FB 0A      jmp _if20_exit
1227   0AD4             _if20_else:
1228   0AD4             ;; value = (value * 16) + (hex_char - '0'); 
1229   0AD4 FA FF FF      lea d, [bp + -1] ; $value
1230   0AD7 DA            push d
1231   0AD8 FA FF FF      lea d, [bp + -1] ; $value
1232   0ADB 2A            mov b, [d]
1233   0ADC             ; START FACTORS
1234   0ADC D7            push a
1235   0ADD 11            mov a, b
1236   0ADE 26 10 00      mov b, $10
1237   0AE1 AC            mul a, b ; *
1238   0AE2 11            mov a, b
1239   0AE3 27            mov b, a
1240   0AE4 E4            pop a
1241   0AE5             ; END FACTORS
1242   0AE5             ; START TERMS
1243   0AE5 D7            push a
1244   0AE6 11            mov a, b
1245   0AE7 FA FC FF      lea d, [bp + -4] ; $hex_char
1246   0AEA 32            mov bl, [d]
1247   0AEB A7 00         mov bh, 0
1248   0AED             ; START TERMS
1249   0AED D7            push a
1250   0AEE 11            mov a, b
1251   0AEF 26 30 00      mov b, $30
1252   0AF2 60            sub a, b
1253   0AF3 27            mov b, a
1254   0AF4 E4            pop a
1255   0AF5             ; END TERMS
1256   0AF5 54            add a, b
1257   0AF6 27            mov b, a
1258   0AF7 E4            pop a
1259   0AF8             ; END TERMS
1260   0AF8 E7            pop d
1261   0AF9 FD 43         mov [d], b
1262   0AFB             _if20_exit:
1263   0AFB             _if19_exit:
1264   0AFB             _for18_update:
1265   0AFB FA FD FF      lea d, [bp + -3] ; $i
1266   0AFE 2A            mov b, [d]
1267   0AFF FD 79         mov g, b
1268   0B01 FD 77         inc b
1269   0B03 FA FD FF      lea d, [bp + -3] ; $i
1270   0B06 FD 43         mov [d], b
1271   0B08 FD 27         mov b, g
1272   0B0A 0A F7 09      jmp _for18_cond
1273   0B0D             _for18_exit:
1274   0B0D             ;; return value; 
1275   0B0D FA FF FF      lea d, [bp + -1] ; $value
1276   0B10 2A            mov b, [d]
1277   0B11 F9            leave
1278   0B12 09            ret
1279   0B13             
1280   0B13             atoi:
1281   0B13 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1282   0B16             ; $result 
1283   0B16 10 00 00      mov a, $0
1284   0B19 45 FF FF      mov [bp + -1], a
1285   0B1C             ; $sign 
1286   0B1C 10 01 00      mov a, $1
1287   0B1F 45 FD FF      mov [bp + -3], a
1288   0B22 52 04 00      sub sp, 4
1289   0B25             ;; while (*str == ' ') str++; 
1290   0B25             _while21_cond:
1291   0B25 FA 05 00      lea d, [bp + 5] ; $str
1292   0B28 2A            mov b, [d]
1293   0B29 74            mov d, b
1294   0B2A 32            mov bl, [d]
1295   0B2B A7 00         mov bh, 0
1296   0B2D             ; START RELATIONAL
1297   0B2D D7            push a
1298   0B2E 11            mov a, b
1299   0B2F 26 20 00      mov b, $20
1300   0B32 B0            cmp a, b
1301   0B33 FD 71         seq ; ==
1302   0B35 E4            pop a
1303   0B36             ; END RELATIONAL
1304   0B36 C0 00 00      cmp b, 0
1305   0B39 C6 4E 0B      je _while21_exit
1306   0B3C             _while21_block:
1307   0B3C             ;; str++; 
1308   0B3C FA 05 00      lea d, [bp + 5] ; $str
1309   0B3F 2A            mov b, [d]
1310   0B40 FD 79         mov g, b
1311   0B42 FD 77         inc b
1312   0B44 FA 05 00      lea d, [bp + 5] ; $str
1313   0B47 FD 43         mov [d], b
1314   0B49 FD 27         mov b, g
1315   0B4B 0A 25 0B      jmp _while21_cond
1316   0B4E             _while21_exit:
1317   0B4E             ;; if (*str == '-' || *str == '+') { 
1318   0B4E             _if22_cond:
1319   0B4E FA 05 00      lea d, [bp + 5] ; $str
1320   0B51 2A            mov b, [d]
1321   0B52 74            mov d, b
1322   0B53 32            mov bl, [d]
1323   0B54 A7 00         mov bh, 0
1324   0B56             ; START RELATIONAL
1325   0B56 D7            push a
1326   0B57 11            mov a, b
1327   0B58 26 2D 00      mov b, $2d
1328   0B5B B0            cmp a, b
1329   0B5C FD 71         seq ; ==
1330   0B5E E4            pop a
1331   0B5F             ; END RELATIONAL
1332   0B5F D7            push a
1333   0B60 11            mov a, b
1334   0B61 FA 05 00      lea d, [bp + 5] ; $str
1335   0B64 2A            mov b, [d]
1336   0B65 74            mov d, b
1337   0B66 32            mov bl, [d]
1338   0B67 A7 00         mov bh, 0
1339   0B69             ; START RELATIONAL
1340   0B69 D7            push a
1341   0B6A 11            mov a, b
1342   0B6B 26 2B 00      mov b, $2b
1343   0B6E B0            cmp a, b
1344   0B6F FD 71         seq ; ==
1345   0B71 E4            pop a
1346   0B72             ; END RELATIONAL
1347   0B72 FD A8         sor a, b ; ||
1348   0B74 E4            pop a
1349   0B75 C0 00 00      cmp b, 0
1350   0B78 C6 B3 0B      je _if22_exit
1351   0B7B             _if22_true:
1352   0B7B             ;; if (*str == '-') sign = -1; 
1353   0B7B             _if23_cond:
1354   0B7B FA 05 00      lea d, [bp + 5] ; $str
1355   0B7E 2A            mov b, [d]
1356   0B7F 74            mov d, b
1357   0B80 32            mov bl, [d]
1358   0B81 A7 00         mov bh, 0
1359   0B83             ; START RELATIONAL
1360   0B83 D7            push a
1361   0B84 11            mov a, b
1362   0B85 26 2D 00      mov b, $2d
1363   0B88 B0            cmp a, b
1364   0B89 FD 71         seq ; ==
1365   0B8B E4            pop a
1366   0B8C             ; END RELATIONAL
1367   0B8C C0 00 00      cmp b, 0
1368   0B8F C6 A1 0B      je _if23_exit
1369   0B92             _if23_true:
1370   0B92             ;; sign = -1; 
1371   0B92 FA FD FF      lea d, [bp + -3] ; $sign
1372   0B95 DA            push d
1373   0B96 26 01 00      mov b, $1
1374   0B99 FD 97         neg b
1375   0B9B E7            pop d
1376   0B9C FD 43         mov [d], b
1377   0B9E 0A A1 0B      jmp _if23_exit
1378   0BA1             _if23_exit:
1379   0BA1             ;; str++; 
1380   0BA1 FA 05 00      lea d, [bp + 5] ; $str
1381   0BA4 2A            mov b, [d]
1382   0BA5 FD 79         mov g, b
1383   0BA7 FD 77         inc b
1384   0BA9 FA 05 00      lea d, [bp + 5] ; $str
1385   0BAC FD 43         mov [d], b
1386   0BAE FD 27         mov b, g
1387   0BB0 0A B3 0B      jmp _if22_exit
1388   0BB3             _if22_exit:
1389   0BB3             ;; while (*str >= '0' && *str <= '9') { 
1390   0BB3             _while24_cond:
1391   0BB3 FA 05 00      lea d, [bp + 5] ; $str
1392   0BB6 2A            mov b, [d]
1393   0BB7 74            mov d, b
1394   0BB8 32            mov bl, [d]
1395   0BB9 A7 00         mov bh, 0
1396   0BBB             ; START RELATIONAL
1397   0BBB D7            push a
1398   0BBC 11            mov a, b
1399   0BBD 26 30 00      mov b, $30
1400   0BC0 B0            cmp a, b
1401   0BC1 FD 80         sge ; >=
1402   0BC3 E4            pop a
1403   0BC4             ; END RELATIONAL
1404   0BC4 D7            push a
1405   0BC5 11            mov a, b
1406   0BC6 FA 05 00      lea d, [bp + 5] ; $str
1407   0BC9 2A            mov b, [d]
1408   0BCA 74            mov d, b
1409   0BCB 32            mov bl, [d]
1410   0BCC A7 00         mov bh, 0
1411   0BCE             ; START RELATIONAL
1412   0BCE D7            push a
1413   0BCF 11            mov a, b
1414   0BD0 26 39 00      mov b, $39
1415   0BD3 B0            cmp a, b
1416   0BD4 FD 74         sle ; <=
1417   0BD6 E4            pop a
1418   0BD7             ; END RELATIONAL
1419   0BD7 FD A7         sand a, b ; &&
1420   0BD9 E4            pop a
1421   0BDA C0 00 00      cmp b, 0
1422   0BDD C6 1B 0C      je _while24_exit
1423   0BE0             _while24_block:
1424   0BE0             ;; result = result * 10 + (*str - '0'); 
1425   0BE0 FA FF FF      lea d, [bp + -1] ; $result
1426   0BE3 DA            push d
1427   0BE4 FA FF FF      lea d, [bp + -1] ; $result
1428   0BE7 2A            mov b, [d]
1429   0BE8             ; START FACTORS
1430   0BE8 D7            push a
1431   0BE9 11            mov a, b
1432   0BEA 26 0A 00      mov b, $a
1433   0BED AC            mul a, b ; *
1434   0BEE 11            mov a, b
1435   0BEF 27            mov b, a
1436   0BF0 E4            pop a
1437   0BF1             ; END FACTORS
1438   0BF1             ; START TERMS
1439   0BF1 D7            push a
1440   0BF2 11            mov a, b
1441   0BF3 FA 05 00      lea d, [bp + 5] ; $str
1442   0BF6 2A            mov b, [d]
1443   0BF7 74            mov d, b
1444   0BF8 32            mov bl, [d]
1445   0BF9 A7 00         mov bh, 0
1446   0BFB             ; START TERMS
1447   0BFB D7            push a
1448   0BFC 11            mov a, b
1449   0BFD 26 30 00      mov b, $30
1450   0C00 60            sub a, b
1451   0C01 27            mov b, a
1452   0C02 E4            pop a
1453   0C03             ; END TERMS
1454   0C03 54            add a, b
1455   0C04 27            mov b, a
1456   0C05 E4            pop a
1457   0C06             ; END TERMS
1458   0C06 E7            pop d
1459   0C07 FD 43         mov [d], b
1460   0C09             ;; str++; 
1461   0C09 FA 05 00      lea d, [bp + 5] ; $str
1462   0C0C 2A            mov b, [d]
1463   0C0D FD 79         mov g, b
1464   0C0F FD 77         inc b
1465   0C11 FA 05 00      lea d, [bp + 5] ; $str
1466   0C14 FD 43         mov [d], b
1467   0C16 FD 27         mov b, g
1468   0C18 0A B3 0B      jmp _while24_cond
1469   0C1B             _while24_exit:
1470   0C1B             ;; return sign * result; 
1471   0C1B FA FD FF      lea d, [bp + -3] ; $sign
1472   0C1E 2A            mov b, [d]
1473   0C1F             ; START FACTORS
1474   0C1F D7            push a
1475   0C20 11            mov a, b
1476   0C21 FA FF FF      lea d, [bp + -1] ; $result
1477   0C24 2A            mov b, [d]
1478   0C25 AC            mul a, b ; *
1479   0C26 11            mov a, b
1480   0C27 27            mov b, a
1481   0C28 E4            pop a
1482   0C29             ; END FACTORS
1483   0C29 F9            leave
1484   0C2A 09            ret
1485   0C2B             
1486   0C2B             gets:
1487   0C2B F8 00 00      enter 0 ; (push bp; mov bp, sp)
1488   0C2E             
1489   0C2E             ; --- BEGIN INLINE ASM BLOCK
1490   0C2E FA 05 00      lea d, [bp + 5] ; $s
1491   0C31 15            mov a, [d]
1492   0C32 3C            mov d, a
1493   0C33 07 AA 10      call _gets
1494   0C36             ; --- END INLINE ASM BLOCK
1495   0C36             
1496   0C36             ;; return strlen(s); 
1497   0C36 FA 05 00      lea d, [bp + 5] ; $s
1498   0C39 2A            mov b, [d]
1499   0C3A FD AB         swp b
1500   0C3C D8            push b
1501   0C3D 07 E1 07      call strlen
1502   0C40 51 02 00      add sp, 2
1503   0C43 F9            leave
1504   0C44 09            ret
1505   0C45             
1506   0C45             prints:
1507   0C45 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1508   0C48             ; $digits 
1509   0C48             ; $i 
1510   0C48 10 00 00      mov a, $0
1511   0C4B 45 FA FF      mov [bp + -6], a
1512   0C4E 52 07 00      sub sp, 7
1513   0C51             ;; if (num < 0) { 
1514   0C51             _if25_cond:
1515   0C51 FA 05 00      lea d, [bp + 5] ; $num
1516   0C54 2A            mov b, [d]
1517   0C55             ; START RELATIONAL
1518   0C55 D7            push a
1519   0C56 11            mov a, b
1520   0C57 26 00 00      mov b, $0
1521   0C5A B0            cmp a, b
1522   0C5B FD 73         slt ; < 
1523   0C5D E4            pop a
1524   0C5E             ; END RELATIONAL
1525   0C5E C0 00 00      cmp b, 0
1526   0C61 C6 7E 0C      je _if25_else
1527   0C64             _if25_true:
1528   0C64             ;; putchar('-'); 
1529   0C64 26 2D 00      mov b, $2d
1530   0C67 DD            push bl
1531   0C68 07 26 0E      call putchar
1532   0C6B 51 01 00      add sp, 1
1533   0C6E             ;; num = -num; 
1534   0C6E FA 05 00      lea d, [bp + 5] ; $num
1535   0C71 DA            push d
1536   0C72 FA 05 00      lea d, [bp + 5] ; $num
1537   0C75 2A            mov b, [d]
1538   0C76 FD 97         neg b
1539   0C78 E7            pop d
1540   0C79 FD 43         mov [d], b
1541   0C7B 0A A0 0C      jmp _if25_exit
1542   0C7E             _if25_else:
1543   0C7E             ;; if (num == 0) { 
1544   0C7E             _if26_cond:
1545   0C7E FA 05 00      lea d, [bp + 5] ; $num
1546   0C81 2A            mov b, [d]
1547   0C82             ; START RELATIONAL
1548   0C82 D7            push a
1549   0C83 11            mov a, b
1550   0C84 26 00 00      mov b, $0
1551   0C87 B0            cmp a, b
1552   0C88 FD 71         seq ; ==
1553   0C8A E4            pop a
1554   0C8B             ; END RELATIONAL
1555   0C8B C0 00 00      cmp b, 0
1556   0C8E C6 A0 0C      je _if26_exit
1557   0C91             _if26_true:
1558   0C91             ;; putchar('0'); 
1559   0C91 26 30 00      mov b, $30
1560   0C94 DD            push bl
1561   0C95 07 26 0E      call putchar
1562   0C98 51 01 00      add sp, 1
1563   0C9B             ;; return; 
1564   0C9B F9            leave
1565   0C9C 09            ret
1566   0C9D 0A A0 0C      jmp _if26_exit
1567   0CA0             _if26_exit:
1568   0CA0             _if25_exit:
1569   0CA0             ;; while (num > 0) { 
1570   0CA0             _while27_cond:
1571   0CA0 FA 05 00      lea d, [bp + 5] ; $num
1572   0CA3 2A            mov b, [d]
1573   0CA4             ; START RELATIONAL
1574   0CA4 D7            push a
1575   0CA5 11            mov a, b
1576   0CA6 26 00 00      mov b, $0
1577   0CA9 B0            cmp a, b
1578   0CAA FD 7F         sgt ; >
1579   0CAC E4            pop a
1580   0CAD             ; END RELATIONAL
1581   0CAD C0 00 00      cmp b, 0
1582   0CB0 C6 FD 0C      je _while27_exit
1583   0CB3             _while27_block:
1584   0CB3             ;; digits[i] = '0' + (num % 10); 
1585   0CB3 FA FC FF      lea d, [bp + -4] ; $digits
1586   0CB6 D7            push a
1587   0CB7 DA            push d
1588   0CB8 FA FA FF      lea d, [bp + -6] ; $i
1589   0CBB 2A            mov b, [d]
1590   0CBC E7            pop d
1591   0CBD 5A            add d, b
1592   0CBE E4            pop a
1593   0CBF DA            push d
1594   0CC0 26 30 00      mov b, $30
1595   0CC3             ; START TERMS
1596   0CC3 D7            push a
1597   0CC4 11            mov a, b
1598   0CC5 FA 05 00      lea d, [bp + 5] ; $num
1599   0CC8 2A            mov b, [d]
1600   0CC9             ; START FACTORS
1601   0CC9 D7            push a
1602   0CCA 11            mov a, b
1603   0CCB 26 0A 00      mov b, $a
1604   0CCE AE            div a, b ; 
1605   0CCF 11            mov a, b
1606   0CD0 27            mov b, a
1607   0CD1 E4            pop a
1608   0CD2             ; END FACTORS
1609   0CD2 54            add a, b
1610   0CD3 27            mov b, a
1611   0CD4 E4            pop a
1612   0CD5             ; END TERMS
1613   0CD5 E7            pop d
1614   0CD6 FD 3E         mov [d], bl
1615   0CD8             ;; num = num / 10; 
1616   0CD8 FA 05 00      lea d, [bp + 5] ; $num
1617   0CDB DA            push d
1618   0CDC FA 05 00      lea d, [bp + 5] ; $num
1619   0CDF 2A            mov b, [d]
1620   0CE0             ; START FACTORS
1621   0CE0 D7            push a
1622   0CE1 11            mov a, b
1623   0CE2 26 0A 00      mov b, $a
1624   0CE5 AE            div a, b
1625   0CE6 27            mov b, a
1626   0CE7 E4            pop a
1627   0CE8             ; END FACTORS
1628   0CE8 E7            pop d
1629   0CE9 FD 43         mov [d], b
1630   0CEB             ;; i++; 
1631   0CEB FA FA FF      lea d, [bp + -6] ; $i
1632   0CEE 2A            mov b, [d]
1633   0CEF FD 79         mov g, b
1634   0CF1 FD 77         inc b
1635   0CF3 FA FA FF      lea d, [bp + -6] ; $i
1636   0CF6 FD 43         mov [d], b
1637   0CF8 FD 27         mov b, g
1638   0CFA 0A A0 0C      jmp _while27_cond
1639   0CFD             _while27_exit:
1640   0CFD             ;; while (i > 0) { 
1641   0CFD             _while28_cond:
1642   0CFD FA FA FF      lea d, [bp + -6] ; $i
1643   0D00 2A            mov b, [d]
1644   0D01             ; START RELATIONAL
1645   0D01 D7            push a
1646   0D02 11            mov a, b
1647   0D03 26 00 00      mov b, $0
1648   0D06 B0            cmp a, b
1649   0D07 FD 7F         sgt ; >
1650   0D09 E4            pop a
1651   0D0A             ; END RELATIONAL
1652   0D0A C0 00 00      cmp b, 0
1653   0D0D C6 38 0D      je _while28_exit
1654   0D10             _while28_block:
1655   0D10             ;; i--; 
1656   0D10 FA FA FF      lea d, [bp + -6] ; $i
1657   0D13 2A            mov b, [d]
1658   0D14 FD 79         mov g, b
1659   0D16 FD 7D         dec b
1660   0D18 FA FA FF      lea d, [bp + -6] ; $i
1661   0D1B FD 43         mov [d], b
1662   0D1D FD 27         mov b, g
1663   0D1F             ;; putchar(digits[i]); 
1664   0D1F FA FC FF      lea d, [bp + -4] ; $digits
1665   0D22 D7            push a
1666   0D23 DA            push d
1667   0D24 FA FA FF      lea d, [bp + -6] ; $i
1668   0D27 2A            mov b, [d]
1669   0D28 E7            pop d
1670   0D29 5A            add d, b
1671   0D2A E4            pop a
1672   0D2B 32            mov bl, [d]
1673   0D2C A7 00         mov bh, 0
1674   0D2E DD            push bl
1675   0D2F 07 26 0E      call putchar
1676   0D32 51 01 00      add sp, 1
1677   0D35 0A FD 0C      jmp _while28_cond
1678   0D38             _while28_exit:
1679   0D38 F9            leave
1680   0D39 09            ret
1681   0D3A             
1682   0D3A             printu:
1683   0D3A F8 00 00      enter 0 ; (push bp; mov bp, sp)
1684   0D3D             ; $digits 
1685   0D3D             ; $i 
1686   0D3D 52 07 00      sub sp, 7
1687   0D40             ;; i = 0; 
1688   0D40 FA FA FF      lea d, [bp + -6] ; $i
1689   0D43 DA            push d
1690   0D44 26 00 00      mov b, $0
1691   0D47 E7            pop d
1692   0D48 FD 43         mov [d], b
1693   0D4A             ;; if(num == 0){ 
1694   0D4A             _if29_cond:
1695   0D4A FA 05 00      lea d, [bp + 5] ; $num
1696   0D4D 2A            mov b, [d]
1697   0D4E             ; START RELATIONAL
1698   0D4E D7            push a
1699   0D4F 11            mov a, b
1700   0D50 26 00 00      mov b, $0
1701   0D53 B0            cmp a, b
1702   0D54 FD 71         seq ; ==
1703   0D56 E4            pop a
1704   0D57             ; END RELATIONAL
1705   0D57 C0 00 00      cmp b, 0
1706   0D5A C6 6C 0D      je _if29_exit
1707   0D5D             _if29_true:
1708   0D5D             ;; putchar('0'); 
1709   0D5D 26 30 00      mov b, $30
1710   0D60 DD            push bl
1711   0D61 07 26 0E      call putchar
1712   0D64 51 01 00      add sp, 1
1713   0D67             ;; return; 
1714   0D67 F9            leave
1715   0D68 09            ret
1716   0D69 0A 6C 0D      jmp _if29_exit
1717   0D6C             _if29_exit:
1718   0D6C             ;; while (num > 0) { 
1719   0D6C             _while30_cond:
1720   0D6C FA 05 00      lea d, [bp + 5] ; $num
1721   0D6F 2A            mov b, [d]
1722   0D70             ; START RELATIONAL
1723   0D70 D7            push a
1724   0D71 11            mov a, b
1725   0D72 26 00 00      mov b, $0
1726   0D75 B0            cmp a, b
1727   0D76 FD 81         sgu ; > (unsigned)
1728   0D78 E4            pop a
1729   0D79             ; END RELATIONAL
1730   0D79 C0 00 00      cmp b, 0
1731   0D7C C6 C9 0D      je _while30_exit
1732   0D7F             _while30_block:
1733   0D7F             ;; digits[i] = '0' + (num % 10); 
1734   0D7F FA FC FF      lea d, [bp + -4] ; $digits
1735   0D82 D7            push a
1736   0D83 DA            push d
1737   0D84 FA FA FF      lea d, [bp + -6] ; $i
1738   0D87 2A            mov b, [d]
1739   0D88 E7            pop d
1740   0D89 5A            add d, b
1741   0D8A E4            pop a
1742   0D8B DA            push d
1743   0D8C 26 30 00      mov b, $30
1744   0D8F             ; START TERMS
1745   0D8F D7            push a
1746   0D90 11            mov a, b
1747   0D91 FA 05 00      lea d, [bp + 5] ; $num
1748   0D94 2A            mov b, [d]
1749   0D95             ; START FACTORS
1750   0D95 D7            push a
1751   0D96 11            mov a, b
1752   0D97 26 0A 00      mov b, $a
1753   0D9A AE            div a, b ; 
1754   0D9B 11            mov a, b
1755   0D9C 27            mov b, a
1756   0D9D E4            pop a
1757   0D9E             ; END FACTORS
1758   0D9E 54            add a, b
1759   0D9F 27            mov b, a
1760   0DA0 E4            pop a
1761   0DA1             ; END TERMS
1762   0DA1 E7            pop d
1763   0DA2 FD 3E         mov [d], bl
1764   0DA4             ;; num = num / 10; 
1765   0DA4 FA 05 00      lea d, [bp + 5] ; $num
1766   0DA7 DA            push d
1767   0DA8 FA 05 00      lea d, [bp + 5] ; $num
1768   0DAB 2A            mov b, [d]
1769   0DAC             ; START FACTORS
1770   0DAC D7            push a
1771   0DAD 11            mov a, b
1772   0DAE 26 0A 00      mov b, $a
1773   0DB1 AE            div a, b
1774   0DB2 27            mov b, a
1775   0DB3 E4            pop a
1776   0DB4             ; END FACTORS
1777   0DB4 E7            pop d
1778   0DB5 FD 43         mov [d], b
1779   0DB7             ;; i++; 
1780   0DB7 FA FA FF      lea d, [bp + -6] ; $i
1781   0DBA 2A            mov b, [d]
1782   0DBB FD 79         mov g, b
1783   0DBD FD 77         inc b
1784   0DBF FA FA FF      lea d, [bp + -6] ; $i
1785   0DC2 FD 43         mov [d], b
1786   0DC4 FD 27         mov b, g
1787   0DC6 0A 6C 0D      jmp _while30_cond
1788   0DC9             _while30_exit:
1789   0DC9             ;; while (i > 0) { 
1790   0DC9             _while31_cond:
1791   0DC9 FA FA FF      lea d, [bp + -6] ; $i
1792   0DCC 2A            mov b, [d]
1793   0DCD             ; START RELATIONAL
1794   0DCD D7            push a
1795   0DCE 11            mov a, b
1796   0DCF 26 00 00      mov b, $0
1797   0DD2 B0            cmp a, b
1798   0DD3 FD 7F         sgt ; >
1799   0DD5 E4            pop a
1800   0DD6             ; END RELATIONAL
1801   0DD6 C0 00 00      cmp b, 0
1802   0DD9 C6 04 0E      je _while31_exit
1803   0DDC             _while31_block:
1804   0DDC             ;; i--; 
1805   0DDC FA FA FF      lea d, [bp + -6] ; $i
1806   0DDF 2A            mov b, [d]
1807   0DE0 FD 79         mov g, b
1808   0DE2 FD 7D         dec b
1809   0DE4 FA FA FF      lea d, [bp + -6] ; $i
1810   0DE7 FD 43         mov [d], b
1811   0DE9 FD 27         mov b, g
1812   0DEB             ;; putchar(digits[i]); 
1813   0DEB FA FC FF      lea d, [bp + -4] ; $digits
1814   0DEE D7            push a
1815   0DEF DA            push d
1816   0DF0 FA FA FF      lea d, [bp + -6] ; $i
1817   0DF3 2A            mov b, [d]
1818   0DF4 E7            pop d
1819   0DF5 5A            add d, b
1820   0DF6 E4            pop a
1821   0DF7 32            mov bl, [d]
1822   0DF8 A7 00         mov bh, 0
1823   0DFA DD            push bl
1824   0DFB 07 26 0E      call putchar
1825   0DFE 51 01 00      add sp, 1
1826   0E01 0A C9 0D      jmp _while31_cond
1827   0E04             _while31_exit:
1828   0E04 F9            leave
1829   0E05 09            ret
1830   0E06             
1831   0E06             rand:
1832   0E06 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1833   0E09             ; $sec 
1834   0E09 52 01 00      sub sp, 1
1835   0E0C             
1836   0E0C             ; --- BEGIN INLINE ASM BLOCK
1837   0E0C 19 00         mov al, 0
1838   0E0E 05 01         syscall sys_rtc					
1839   0E10 1A            mov al, ah
1840   0E11 FA 00 00      lea d, [bp + 0] ; $sec
1841   0E14 1E            mov al, [d]
1842   0E15             ; --- END INLINE ASM BLOCK
1843   0E15             
1844   0E15             ;; return sec; 
1845   0E15 FA 00 00      lea d, [bp + 0] ; $sec
1846   0E18 32            mov bl, [d]
1847   0E19 A7 00         mov bh, 0
1848   0E1B F9            leave
1849   0E1C 09            ret
1850   0E1D             
1851   0E1D             date:
1852   0E1D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1853   0E20             
1854   0E20             ; --- BEGIN INLINE ASM BLOCK
1855   0E20 19 00         mov al, 0 
1856   0E22 05 07         syscall sys_datetime
1857   0E24             ; --- END INLINE ASM BLOCK
1858   0E24             
1859   0E24 F9            leave
1860   0E25 09            ret
1861   0E26             
1862   0E26             putchar:
1863   0E26 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1864   0E29             
1865   0E29             ; --- BEGIN INLINE ASM BLOCK
1866   0E29 FA 05 00      lea d, [bp + 5] ; $c
1867   0E2C 1E            mov al, [d]
1868   0E2D 23            mov ah, al
1869   0E2E 07 A3 10      call _putchar
1870   0E31             ; --- END INLINE ASM BLOCK
1871   0E31             
1872   0E31 F9            leave
1873   0E32 09            ret
1874   0E33             
1875   0E33             getchar:
1876   0E33 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1877   0E36             ; $c 
1878   0E36 52 01 00      sub sp, 1
1879   0E39             
1880   0E39             ; --- BEGIN INLINE ASM BLOCK
1881   0E39 07 9C 10      call getch
1882   0E3C 1A            mov al, ah
1883   0E3D FA 00 00      lea d, [bp + 0] ; $c
1884   0E40 3E            mov [d], al
1885   0E41             ; --- END INLINE ASM BLOCK
1886   0E41             
1887   0E41             ;; return c; 
1888   0E41 FA 00 00      lea d, [bp + 0] ; $c
1889   0E44 32            mov bl, [d]
1890   0E45 A7 00         mov bh, 0
1891   0E47 F9            leave
1892   0E48 09            ret
1893   0E49             
1894   0E49             scann:
1895   0E49 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1896   0E4C             ; $m 
1897   0E4C 52 02 00      sub sp, 2
1898   0E4F             
1899   0E4F             ; --- BEGIN INLINE ASM BLOCK
1900   0E4F 07 E7 12      call scan_u16d
1901   0E52 FA FF FF      lea d, [bp + -1] ; $m
1902   0E55 43            mov [d], a
1903   0E56             ; --- END INLINE ASM BLOCK
1904   0E56             
1905   0E56             ;; return m; 
1906   0E56 FA FF FF      lea d, [bp + -1] ; $m
1907   0E59 2A            mov b, [d]
1908   0E5A F9            leave
1909   0E5B 09            ret
1910   0E5C             
1911   0E5C             puts:
1912   0E5C F8 00 00      enter 0 ; (push bp; mov bp, sp)
1913   0E5F             
1914   0E5F             ; --- BEGIN INLINE ASM BLOCK
1915   0E5F FA 05 00      lea d, [bp + 5] ; $s
1916   0E62 15            mov a, [d]
1917   0E63 3C            mov d, a
1918   0E64 07 ED 11      call _puts
1919   0E67 10 00 0A      mov a, $0A00
1920   0E6A 05 03         syscall sys_io
1921   0E6C             ; --- END INLINE ASM BLOCK
1922   0E6C             
1923   0E6C F9            leave
1924   0E6D 09            ret
1925   0E6E             
1926   0E6E             print:
1927   0E6E F8 00 00      enter 0 ; (push bp; mov bp, sp)
1928   0E71             
1929   0E71             ; --- BEGIN INLINE ASM BLOCK
1930   0E71 FA 05 00      lea d, [bp + 5] ; $s
1931   0E74 FD 2A         mov d, [d]
1932   0E76 07 ED 11      call _puts
1933   0E79             ; --- END INLINE ASM BLOCK
1934   0E79             
1935   0E79 F9            leave
1936   0E7A 09            ret
1937   0E7B             
1938   0E7B             loadfile:
1939   0E7B F8 00 00      enter 0 ; (push bp; mov bp, sp)
1940   0E7E             
1941   0E7E             ; --- BEGIN INLINE ASM BLOCK
1942   0E7E FA 05 00      lea d, [bp + 5] ; $destination
1943   0E81 15            mov a, [d]
1944   0E82 4F            mov di, a
1945   0E83 FA 07 00      lea d, [bp + 7] ; $filename
1946   0E86 FD 2A         mov d, [d]
1947   0E88 19 14         mov al, 20
1948   0E8A 05 04         syscall sys_filesystem
1949   0E8C             ; --- END INLINE ASM BLOCK
1950   0E8C             
1951   0E8C F9            leave
1952   0E8D 09            ret
1953   0E8E             
1954   0E8E             create_file:
1955   0E8E F8 00 00      enter 0 ; (push bp; mov bp, sp)
1956   0E91 F9            leave
1957   0E92 09            ret
1958   0E93             
1959   0E93             delete_file:
1960   0E93 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1961   0E96             
1962   0E96             ; --- BEGIN INLINE ASM BLOCK
1963   0E96 FA 05 00      lea d, [bp + 5] ; $filename
1964   0E99 19 0A         mov al, 10
1965   0E9B 05 04         syscall sys_filesystem
1966   0E9D             ; --- END INLINE ASM BLOCK
1967   0E9D             
1968   0E9D F9            leave
1969   0E9E 09            ret
1970   0E9F             
1971   0E9F             fopen:
1972   0E9F F8 00 00      enter 0 ; (push bp; mov bp, sp)
1973   0EA2 F9            leave
1974   0EA3 09            ret
1975   0EA4             
1976   0EA4             fclose:
1977   0EA4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1978   0EA7 F9            leave
1979   0EA8 09            ret
1980   0EA9             
1981   0EA9             alloc:
1982   0EA9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1983   0EAC             ;; heap_top = heap_top + bytes; 
1984   0EAC 3B 38 20      mov d, _heap_top ; $heap_top
1985   0EAF DA            push d
1986   0EB0 3B 38 20      mov d, _heap_top ; $heap_top
1987   0EB3 2A            mov b, [d]
1988   0EB4             ; START TERMS
1989   0EB4 D7            push a
1990   0EB5 11            mov a, b
1991   0EB6 FA 05 00      lea d, [bp + 5] ; $bytes
1992   0EB9 2A            mov b, [d]
1993   0EBA 54            add a, b
1994   0EBB 27            mov b, a
1995   0EBC E4            pop a
1996   0EBD             ; END TERMS
1997   0EBD E7            pop d
1998   0EBE FD 43         mov [d], b
1999   0EC0             ;; return heap_top - bytes; 
2000   0EC0 3B 38 20      mov d, _heap_top ; $heap_top
2001   0EC3 2A            mov b, [d]
2002   0EC4             ; START TERMS
2003   0EC4 D7            push a
2004   0EC5 11            mov a, b
2005   0EC6 FA 05 00      lea d, [bp + 5] ; $bytes
2006   0EC9 2A            mov b, [d]
2007   0ECA 60            sub a, b
2008   0ECB 27            mov b, a
2009   0ECC E4            pop a
2010   0ECD             ; END TERMS
2011   0ECD F9            leave
2012   0ECE 09            ret
2013   0ECF             
2014   0ECF             free:
2015   0ECF F8 00 00      enter 0 ; (push bp; mov bp, sp)
2016   0ED2             ;; return heap_top = heap_top - bytes; 
2017   0ED2 3B 38 20      mov d, _heap_top ; $heap_top
2018   0ED5 DA            push d
2019   0ED6 3B 38 20      mov d, _heap_top ; $heap_top
2020   0ED9 2A            mov b, [d]
2021   0EDA             ; START TERMS
2022   0EDA D7            push a
2023   0EDB 11            mov a, b
2024   0EDC FA 05 00      lea d, [bp + 5] ; $bytes
2025   0EDF 2A            mov b, [d]
2026   0EE0 60            sub a, b
2027   0EE1 27            mov b, a
2028   0EE2 E4            pop a
2029   0EE3             ; END TERMS
2030   0EE3 E7            pop d
2031   0EE4 FD 43         mov [d], b
2032   0EE6 F9            leave
2033   0EE7 09            ret
2034   0EE8             
2035   0EE8             exit:
2036   0EE8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2037   0EEB             
2038   0EEB             ; --- BEGIN INLINE ASM BLOCK
2039   0EEB 05 0B         syscall sys_terminate_proc
2040   0EED             ; --- END INLINE ASM BLOCK
2041   0EED             
2042   0EED F9            leave
2043   0EEE 09            ret
2044   0EEF             
2045   0EEF             load_hex:
2046   0EEF F8 00 00      enter 0 ; (push bp; mov bp, sp)
2047   0EF2             ; $temp 
2048   0EF2 52 02 00      sub sp, 2
2049   0EF5             ;; temp = alloc(32768); 
2050   0EF5 FA FF FF      lea d, [bp + -1] ; $temp
2051   0EF8 DA            push d
2052   0EF9 26 00 80      mov b, $8000
2053   0EFC FD AB         swp b
2054   0EFE D8            push b
2055   0EFF 07 A9 0E      call alloc
2056   0F02 51 02 00      add sp, 2
2057   0F05 E7            pop d
2058   0F06 FD 43         mov [d], b
2059   0F08             
2060   0F08             ; --- BEGIN INLINE ASM BLOCK
2061   0F08               
2062   0F08               
2063   0F08               
2064   0F08               
2065   0F08               
2066   0F08             _load_hex:
2067   0F08 D7            push a
2068   0F09 D8            push b
2069   0F0A DA            push d
2070   0F0B E2            push si
2071   0F0C E3            push di
2072   0F0D 52 00 80      sub sp, $8000      
2073   0F10 38 00 00      mov c, 0
2074   0F13 48            mov a, sp
2075   0F14 77            inc a
2076   0F15 3C            mov d, a          
2077   0F16 07 AA 10      call _gets        
2078   0F19 4D            mov si, a
2079   0F1A             __load_hex_loop:
2080   0F1A F6            lodsb             
2081   0F1B B9 00         cmp al, 0         
2082   0F1D C6 2B 0F      jz __load_hex_ret
2083   0F20 36            mov bh, al
2084   0F21 F6            lodsb
2085   0F22 2F            mov bl, al
2086   0F23 07 60 10      call _atoi        
2087   0F26 F7            stosb             
2088   0F27 78            inc c
2089   0F28 0A 1A 0F      jmp __load_hex_loop
2090   0F2B             __load_hex_ret:
2091   0F2B 51 00 80      add sp, $8000
2092   0F2E F0            pop di
2093   0F2F EF            pop si
2094   0F30 E7            pop d
2095   0F31 E5            pop b
2096   0F32 E4            pop a
2097   0F33             ; --- END INLINE ASM BLOCK
2098   0F33             
2099   0F33 F9            leave
2100   0F34 09            ret
2101   0F35             
2102   0F35             getparam:
2103   0F35 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2104   0F38             ; $data 
2105   0F38 52 01 00      sub sp, 1
2106   0F3B             
2107   0F3B             ; --- BEGIN INLINE ASM BLOCK
2108   0F3B 19 04         mov al, 4
2109   0F3D FA 05 00      lea d, [bp + 5] ; $address
2110   0F40 FD 2A         mov d, [d]
2111   0F42 05 0C         syscall sys_system
2112   0F44 FA 00 00      lea d, [bp + 0] ; $data
2113   0F47 FD 3E         mov [d], bl
2114   0F49             ; --- END INLINE ASM BLOCK
2115   0F49             
2116   0F49             ;; return data; 
2117   0F49 FA 00 00      lea d, [bp + 0] ; $data
2118   0F4C 32            mov bl, [d]
2119   0F4D A7 00         mov bh, 0
2120   0F4F F9            leave
2121   0F50 09            ret
2122   0F51             
2123   0F51             clear:
2124   0F51 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2125   0F54             ;; print("\033[2J\033[H"); 
2126   0F54 26 28 20      mov b, __s2 ; "\033[2J\033[H"
2127   0F57 FD AB         swp b
2128   0F59 D8            push b
2129   0F5A 07 6E 0E      call print
2130   0F5D 51 02 00      add sp, 2
2131   0F60 F9            leave
2132   0F61 09            ret
2133   0F62             
2134   0F62             printun:
2135   0F62 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2136   0F65             ;; print(prompt); 
2137   0F65 FA 07 00      lea d, [bp + 7] ; $prompt
2138   0F68 2A            mov b, [d]
2139   0F69 FD AB         swp b
2140   0F6B D8            push b
2141   0F6C 07 6E 0E      call print
2142   0F6F 51 02 00      add sp, 2
2143   0F72             ;; printu(n); 
2144   0F72 FA 05 00      lea d, [bp + 5] ; $n
2145   0F75 2A            mov b, [d]
2146   0F76 FD AB         swp b
2147   0F78 D8            push b
2148   0F79 07 3A 0D      call printu
2149   0F7C 51 02 00      add sp, 2
2150   0F7F             ;; print("\n"); 
2151   0F7F 26 30 20      mov b, __s3 ; "\n"
2152   0F82 FD AB         swp b
2153   0F84 D8            push b
2154   0F85 07 6E 0E      call print
2155   0F88 51 02 00      add sp, 2
2156   0F8B F9            leave
2157   0F8C 09            ret
2158   0F8D             
2159   0F8D             printsn:
2160   0F8D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2161   0F90             ;; print(prompt); 
2162   0F90 FA 07 00      lea d, [bp + 7] ; $prompt
2163   0F93 2A            mov b, [d]
2164   0F94 FD AB         swp b
2165   0F96 D8            push b
2166   0F97 07 6E 0E      call print
2167   0F9A 51 02 00      add sp, 2
2168   0F9D             ;; prints(n); 
2169   0F9D FA 05 00      lea d, [bp + 5] ; $n
2170   0FA0 2A            mov b, [d]
2171   0FA1 FD AB         swp b
2172   0FA3 D8            push b
2173   0FA4 07 45 0C      call prints
2174   0FA7 51 02 00      add sp, 2
2175   0FAA             ;; print("\n"); 
2176   0FAA 26 30 20      mov b, __s3 ; "\n"
2177   0FAD FD AB         swp b
2178   0FAF D8            push b
2179   0FB0 07 6E 0E      call print
2180   0FB3 51 02 00      add sp, 2
2181   0FB6 F9            leave
2182   0FB7 09            ret
2183   0FB8             
2184   0FB8             include_stdio_asm:
2185   0FB8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2186   0FBB             
2187   0FBB             ; --- BEGIN INLINE ASM BLOCK
2188   0FBB             .include "lib/stdio.asm"
0001+  0FBB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0FBB             ; stdio.s
0003+  0FBB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0FBB             .include "lib/string.asm"
0001++ 0FBB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0FBB             ; string.s
0003++ 0FBB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0FBB             
0005++ 0FBB             
0006++ 0FBB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0FBB             ; _strrev
0008++ 0FBB             ; reverse a string
0009++ 0FBB             ; D = string address
0010++ 0FBB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0FBB             ; 01234
0012++ 0FBB             _strrev:
0013++ 0FBB 4B          	pusha
0014++ 0FBC 07 02 10    	call _strlen	; length in C
0015++ 0FBF 12          	mov a, c
0016++ 0FC0 AF 01 00    	cmp a, 1
0017++ 0FC3 D0 DD 0F    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 0FC6 7D          	dec a
0019++ 0FC7 FD 4E       	mov si, d	; beginning of string
0020++ 0FC9 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0FCB 59          	add d, a	; end of string
0022++ 0FCC 12          	mov a, c
0023++ 0FCD FD 9B       	shr a		; divide by 2
0024++ 0FCF 39          	mov c, a	; C now counts the steps
0025++ 0FD0             _strrev_L0:
0026++ 0FD0 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0FD1 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0FD2 3E          	mov [d], al	; store left char into right side
0029++ 0FD3 1B          	mov al, bl
0030++ 0FD4 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0FD5 7E          	dec c
0032++ 0FD6 7F          	dec d
0033++ 0FD7 C2 00 00    	cmp c, 0
0034++ 0FDA C7 D0 0F    	jne _strrev_L0
0035++ 0FDD             _strrev_end:
0036++ 0FDD 4C          	popa
0037++ 0FDE 09          	ret
0038++ 0FDF             	
0039++ 0FDF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0FDF             ; _strchr
0041++ 0FDF             ; search string in D for char in AL
0042++ 0FDF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0FDF             _strchr:
0044++ 0FDF             _strchr_L0:
0045++ 0FDF 32          	mov bl, [d]
0046++ 0FE0 C1 00       	cmp bl, 0
0047++ 0FE2 C6 ED 0F    	je _strchr_end
0048++ 0FE5 BA          	cmp al, bl
0049++ 0FE6 C6 ED 0F    	je _strchr_end
0050++ 0FE9 79          	inc d
0051++ 0FEA 0A DF 0F    	jmp _strchr_L0
0052++ 0FED             _strchr_end:
0053++ 0FED 1B          	mov al, bl
0054++ 0FEE 09          	ret
0055++ 0FEF             
0056++ 0FEF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0FEF             ; _strstr
0058++ 0FEF             ; find sub-string
0059++ 0FEF             ; str1 in SI
0060++ 0FEF             ; str2 in DI
0061++ 0FEF             ; SI points to end of source string
0062++ 0FEF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0FEF             _strstr:
0064++ 0FEF DB          	push al
0065++ 0FF0 DA          	push d
0066++ 0FF1 E3          	push di
0067++ 0FF2             _strstr_loop:
0068++ 0FF2 F3          	cmpsb					; compare a byte of the strings
0069++ 0FF3 C7 FE 0F    	jne _strstr_ret
0070++ 0FF6 FC 00 00    	lea d, [di + 0]
0071++ 0FF9 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0FFB C7 F2 0F    	jne _strstr_loop				; equal chars but not at end
0073++ 0FFE             _strstr_ret:
0074++ 0FFE F0          	pop di
0075++ 0FFF E7          	pop d
0076++ 1000 E8          	pop al
0077++ 1001 09          	ret
0078++ 1002             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1002             ; length of null terminated string
0080++ 1002             ; result in C
0081++ 1002             ; pointer in D
0082++ 1002             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1002             _strlen:
0084++ 1002 DA          	push d
0085++ 1003 38 00 00    	mov c, 0
0086++ 1006             _strlen_L1:
0087++ 1006 BD 00       	cmp byte [d], 0
0088++ 1008 C6 10 10    	je _strlen_ret
0089++ 100B 79          	inc d
0090++ 100C 78          	inc c
0091++ 100D 0A 06 10    	jmp _strlen_L1
0092++ 1010             _strlen_ret:
0093++ 1010 E7          	pop d
0094++ 1011 09          	ret
0095++ 1012             
0096++ 1012             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1012             ; STRCMP
0098++ 1012             ; compare two strings
0099++ 1012             ; str1 in SI
0100++ 1012             ; str2 in DI
0101++ 1012             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1012             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1012             _strcmp:
0104++ 1012 DB          	push al
0105++ 1013 DA          	push d
0106++ 1014 E3          	push di
0107++ 1015 E2          	push si
0108++ 1016             _strcmp_loop:
0109++ 1016 F3          	cmpsb					; compare a byte of the strings
0110++ 1017 C7 22 10    	jne _strcmp_ret
0111++ 101A FB FF FF    	lea d, [si +- 1]
0112++ 101D BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 101F C7 16 10    	jne _strcmp_loop				; equal chars but not at end
0114++ 1022             _strcmp_ret:
0115++ 1022 EF          	pop si
0116++ 1023 F0          	pop di
0117++ 1024 E7          	pop d
0118++ 1025 E8          	pop al
0119++ 1026 09          	ret
0120++ 1027             
0121++ 1027             
0122++ 1027             ; STRCPY
0123++ 1027             ; copy null terminated string from SI to DI
0124++ 1027             ; source in SI
0125++ 1027             ; destination in DI
0126++ 1027             _strcpy:
0127++ 1027 E2          	push si
0128++ 1028 E3          	push di
0129++ 1029 DB          	push al
0130++ 102A             _strcpy_L1:
0131++ 102A F6          	lodsb
0132++ 102B F7          	stosb
0133++ 102C B9 00       	cmp al, 0
0134++ 102E C7 2A 10    	jne _strcpy_L1
0135++ 1031             _strcpy_end:
0136++ 1031 E8          	pop al
0137++ 1032 F0          	pop di
0138++ 1033 EF          	pop si
0139++ 1034 09          	ret
0140++ 1035             
0141++ 1035             ; STRCAT
0142++ 1035             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1035             ; source in SI
0144++ 1035             ; destination in DI
0145++ 1035             _strcat:
0146++ 1035 E2          	push si
0147++ 1036 E3          	push di
0148++ 1037 D7          	push a
0149++ 1038 DA          	push d
0150++ 1039 50          	mov a, di
0151++ 103A 3C          	mov d, a
0152++ 103B             _strcat_goto_end_L1:
0153++ 103B BD 00       	cmp byte[d], 0
0154++ 103D C6 44 10    	je _strcat_start
0155++ 1040 79          	inc d
0156++ 1041 0A 3B 10    	jmp _strcat_goto_end_L1
0157++ 1044             _strcat_start:
0158++ 1044 FD 50       	mov di, d
0159++ 1046             _strcat_L1:
0160++ 1046 F6          	lodsb
0161++ 1047 F7          	stosb
0162++ 1048 B9 00       	cmp al, 0
0163++ 104A C7 46 10    	jne _strcat_L1
0164++ 104D             _strcat_end:
0165++ 104D E7          	pop d
0166++ 104E E4          	pop a
0167++ 104F F0          	pop di
0168++ 1050 EF          	pop si
0169++ 1051 09          	ret
0170++ 1052             
0171++ 1052             
0005+  1052             
0006+  1052             
0007+  1052             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  1052             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0009+  1052             ; ASCII in BL
0010+  1052             ; result in AL
0011+  1052             ; ascii for F = 0100 0110
0012+  1052             ; ascii for 9 = 0011 1001
0013+  1052             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  1052             hex_ascii_encode:
0015+  1052 1B            mov al, bl
0016+  1053 93 40         test al, $40        ; test if letter or number
0017+  1055 C7 5B 10      jnz hex_letter
0018+  1058 87 0F         and al, $0F        ; get number
0019+  105A 09            ret
0020+  105B             hex_letter:
0021+  105B 87 0F         and al, $0F        ; get letter
0022+  105D 6A 09         add al, 9
0023+  105F 09            ret
0024+  1060             
0025+  1060             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  1060             ; ATOI
0027+  1060             ; 2 letter hex string in B
0028+  1060             ; 8bit integer returned in AL
0029+  1060             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  1060             _atoi:
0031+  1060 D8            push b
0032+  1061 07 52 10      call hex_ascii_encode      ; convert BL to 4bit code in AL
0033+  1064 30            mov bl, bh
0034+  1065 DB            push al          ; save a
0035+  1066 07 52 10      call hex_ascii_encode
0036+  1069 EA            pop bl  
0037+  106A FD 9E 04      shl al, 4
0038+  106D 8C            or al, bl
0039+  106E E5            pop b
0040+  106F 09            ret  
0041+  1070             
0042+  1070             
0043+  1070             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  1070             ; scanf
0045+  1070             ; no need for explanations!
0046+  1070             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  1070             scanf:
0048+  1070 09            ret
0049+  1071             
0050+  1071             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  1071             ; ITOA
0052+  1071             ; 8bit value in BL
0053+  1071             ; 2 byte ASCII result in A
0054+  1071             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  1071             _itoa:
0056+  1071 DA            push d
0057+  1072 D8            push b
0058+  1073 A7 00         mov bh, 0
0059+  1075 FD A4 04      shr bl, 4  
0060+  1078 74            mov d, b
0061+  1079 1F 21 13      mov al, [d + s_hex_digits]
0062+  107C 23            mov ah, al
0063+  107D               
0064+  107D E5            pop b
0065+  107E D8            push b
0066+  107F A7 00         mov bh, 0
0067+  1081 FD 87 0F      and bl, $0F
0068+  1084 74            mov d, b
0069+  1085 1F 21 13      mov al, [d + s_hex_digits]
0070+  1088 E5            pop b
0071+  1089 E7            pop d
0072+  108A 09            ret
0073+  108B             
0074+  108B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  108B             ; HEX STRING TO BINARY
0076+  108B             ; di = destination address
0077+  108B             ; si = source
0078+  108B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  108B             _hex_to_int:
0080+  108B             _hex_to_int_L1:
0081+  108B F6            lodsb          ; load from [SI] to AL
0082+  108C B9 00         cmp al, 0        ; check if ASCII 0
0083+  108E C6 9B 10      jz _hex_to_int_ret
0084+  1091 36            mov bh, al
0085+  1092 F6            lodsb
0086+  1093 2F            mov bl, al
0087+  1094 07 60 10      call _atoi        ; convert ASCII byte in B to int (to AL)
0088+  1097 F7            stosb          ; store AL to [DI]
0089+  1098 0A 8B 10      jmp _hex_to_int_L1
0090+  109B             _hex_to_int_ret:
0091+  109B 09            ret    
0092+  109C             
0093+  109C             
0094+  109C             
0095+  109C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  109C             ; GETCHAR
0097+  109C             ; char in ah
0098+  109C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  109C             getch:
0100+  109C DB            push al
0101+  109D             getch_retry:
0102+  109D 19 01         mov al, 1
0103+  109F 05 03         syscall sys_io      ; receive in AH
0104+  10A1 E8            pop al
0105+  10A2 09            ret
0106+  10A3             
0107+  10A3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  10A3             ; PUTCHAR
0109+  10A3             ; char in ah
0110+  10A3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  10A3             _putchar:
0112+  10A3 D7            push a
0113+  10A4 19 00         mov al, 0
0114+  10A6 05 03         syscall sys_io      ; char in AH
0115+  10A8 E4            pop a
0116+  10A9 09            ret
0117+  10AA             
0118+  10AA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  10AA             ;; INPUT A STRING
0120+  10AA             ;; terminates with null
0121+  10AA             ;; pointer in D
0122+  10AA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  10AA             _gets:
0124+  10AA D7            push a
0125+  10AB DA            push d
0126+  10AC             _gets_loop:
0127+  10AC 19 01         mov al, 1
0128+  10AE 05 03         syscall sys_io      ; receive in AH
0129+  10B0 B9 00         cmp al, 0        ; check error code (AL)
0130+  10B2 C6 AC 10      je _gets_loop      ; if no char received, retry
0131+  10B5             
0132+  10B5 76 1B         cmp ah, 27
0133+  10B7 C6 D8 10      je _gets_ansi_esc
0134+  10BA 76 0A         cmp ah, $0A        ; LF
0135+  10BC C6 43 11      je _gets_end
0136+  10BF 76 0D         cmp ah, $0D        ; CR
0137+  10C1 C6 43 11      je _gets_end
0138+  10C4 76 5C         cmp ah, $5C        ; '\\'
0139+  10C6 C6 04 11      je _gets_escape
0140+  10C9               
0141+  10C9 76 08         cmp ah, $08      ; check for backspace
0142+  10CB C6 D4 10      je _gets_backspace
0143+  10CE             
0144+  10CE 1A            mov al, ah
0145+  10CF 3E            mov [d], al
0146+  10D0 79            inc d
0147+  10D1 0A AC 10      jmp _gets_loop
0148+  10D4             _gets_backspace:
0149+  10D4 7F            dec d
0150+  10D5 0A AC 10      jmp _gets_loop
0151+  10D8             _gets_ansi_esc:
0152+  10D8 19 01         mov al, 1
0153+  10DA 05 03         syscall sys_io        ; receive in AH without echo
0154+  10DC B9 00         cmp al, 0          ; check error code (AL)
0155+  10DE C6 D8 10      je _gets_ansi_esc    ; if no char received, retry
0156+  10E1 76 5B         cmp ah, '['
0157+  10E3 C7 AC 10      jne _gets_loop
0158+  10E6             _gets_ansi_esc_2:
0159+  10E6 19 01         mov al, 1
0160+  10E8 05 03         syscall sys_io          ; receive in AH without echo
0161+  10EA B9 00         cmp al, 0            ; check error code (AL)
0162+  10EC C6 E6 10      je _gets_ansi_esc_2  ; if no char received, retry
0163+  10EF 76 44         cmp ah, 'D'
0164+  10F1 C6 FC 10      je _gets_left_arrow
0165+  10F4 76 43         cmp ah, 'C'
0166+  10F6 C6 00 11      je _gets_right_arrow
0167+  10F9 0A AC 10      jmp _gets_loop
0168+  10FC             _gets_left_arrow:
0169+  10FC 7F            dec d
0170+  10FD 0A AC 10      jmp _gets_loop
0171+  1100             _gets_right_arrow:
0172+  1100 79            inc d
0173+  1101 0A AC 10      jmp _gets_loop
0174+  1104             _gets_escape:
0175+  1104 19 01         mov al, 1
0176+  1106 05 03         syscall sys_io      ; receive in AH
0177+  1108 B9 00         cmp al, 0        ; check error code (AL)
0178+  110A C6 04 11      je _gets_escape      ; if no char received, retry
0179+  110D 76 6E         cmp ah, 'n'
0180+  110F C6 2E 11      je _gets_LF
0181+  1112 76 72         cmp ah, 'r'
0182+  1114 C6 35 11      je _gets_CR
0183+  1117 76 30         cmp ah, '0'
0184+  1119 C6 3C 11      je _gets_NULL
0185+  111C 76 5C         cmp ah, $5C  ; '\'
0186+  111E C6 27 11      je _gets_slash
0187+  1121 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0188+  1122 3E            mov [d], al
0189+  1123 79            inc d
0190+  1124 0A AC 10      jmp _gets_loop
0191+  1127             _gets_slash:
0192+  1127 19 5C         mov al, $5C
0193+  1129 3E            mov [d], al
0194+  112A 79            inc d
0195+  112B 0A AC 10      jmp _gets_loop
0196+  112E             _gets_LF:
0197+  112E 19 0A         mov al, $0A
0198+  1130 3E            mov [d], al
0199+  1131 79            inc d
0200+  1132 0A AC 10      jmp _gets_loop
0201+  1135             _gets_CR:
0202+  1135 19 0D         mov al, $0D
0203+  1137 3E            mov [d], al
0204+  1138 79            inc d
0205+  1139 0A AC 10      jmp _gets_loop
0206+  113C             _gets_NULL:
0207+  113C 19 00         mov al, $00
0208+  113E 3E            mov [d], al
0209+  113F 79            inc d
0210+  1140 0A AC 10      jmp _gets_loop
0211+  1143             _gets_end:
0212+  1143 19 00         mov al, 0
0213+  1145 3E            mov [d], al        ; terminate string
0214+  1146 E7            pop d
0215+  1147 E4            pop a
0216+  1148 09            ret
0217+  1149             
0218+  1149             
0219+  1149             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0220+  1149             ;; INPUT TEXT
0221+  1149             ;; terminated with CTRL+D
0222+  1149             ;; pointer in D
0223+  1149             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0224+  1149             _gettxt:
0225+  1149 D7            push a
0226+  114A DA            push d
0227+  114B             _gettxt_loop:
0228+  114B 19 01         mov al, 1
0229+  114D 05 03         syscall sys_io      ; receive in AH
0230+  114F B9 00         cmp al, 0        ; check error code (AL)
0231+  1151 C6 4B 11      je _gettxt_loop    ; if no char received, retry
0232+  1154 76 04         cmp ah, 4      ; EOT
0233+  1156 C6 94 11      je _gettxt_end
0234+  1159 76 08         cmp ah, $08      ; check for backspace
0235+  115B C6 90 11      je _gettxt_backspace
0236+  115E 76 5C         cmp ah, $5C        ; '\'
0237+  1160 C6 69 11      je _gettxt_escape
0238+  1163 1A            mov al, ah
0239+  1164 3E            mov [d], al
0240+  1165 79            inc d
0241+  1166 0A 4B 11      jmp _gettxt_loop
0242+  1169             _gettxt_escape:
0243+  1169 19 01         mov al, 1
0244+  116B 05 03         syscall sys_io      ; receive in AH
0245+  116D B9 00         cmp al, 0        ; check error code (AL)
0246+  116F C6 69 11      je _gettxt_escape    ; if no char received, retry
0247+  1172 76 6E         cmp ah, 'n'
0248+  1174 C6 82 11      je _gettxt_LF
0249+  1177 76 72         cmp ah, 'r'
0250+  1179 C6 89 11      je _gettxt_CR
0251+  117C 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0252+  117D 3E            mov [d], al
0253+  117E 79            inc d
0254+  117F 0A 4B 11      jmp _gettxt_loop
0255+  1182             _gettxt_LF:
0256+  1182 19 0A         mov al, $0A
0257+  1184 3E            mov [d], al
0258+  1185 79            inc d
0259+  1186 0A 4B 11      jmp _gettxt_loop
0260+  1189             _gettxt_CR:
0261+  1189 19 0D         mov al, $0D
0262+  118B 3E            mov [d], al
0263+  118C 79            inc d
0264+  118D 0A 4B 11      jmp _gettxt_loop
0265+  1190             _gettxt_backspace:
0266+  1190 7F            dec d
0267+  1191 0A 4B 11      jmp _gettxt_loop
0268+  1194             _gettxt_end:
0269+  1194 19 00         mov al, 0
0270+  1196 3E            mov [d], al        ; terminate string
0271+  1197 E7            pop d
0272+  1198 E4            pop a
0273+  1199 09            ret
0274+  119A             
0275+  119A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  119A             ; PRINT NEW LINE
0277+  119A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0278+  119A             printnl:
0279+  119A D7            push a
0280+  119B 10 00 0A      mov a, $0A00
0281+  119E 05 03         syscall sys_io
0282+  11A0 10 00 0D      mov a, $0D00
0283+  11A3 05 03         syscall sys_io
0284+  11A5 E4            pop a
0285+  11A6 09            ret
0286+  11A7             
0287+  11A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  11A7             ; _strtoint
0289+  11A7             ; 4 digit hex string number in d
0290+  11A7             ; integer returned in A
0291+  11A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0292+  11A7             _strtointx:
0293+  11A7 D8            push b
0294+  11A8 32            mov bl, [d]
0295+  11A9 37            mov bh, bl
0296+  11AA 33 01 00      mov bl, [d + 1]
0297+  11AD 07 60 10      call _atoi        ; convert to int in AL
0298+  11B0 23            mov ah, al        ; move to AH
0299+  11B1 33 02 00      mov bl, [d + 2]
0300+  11B4 37            mov bh, bl
0301+  11B5 33 03 00      mov bl, [d + 3]
0302+  11B8 07 60 10      call _atoi        ; convert to int in AL
0303+  11BB E5            pop b
0304+  11BC 09            ret
0305+  11BD             
0306+  11BD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0307+  11BD             ; _strtoint
0308+  11BD             ; 5 digit base10 string number in d
0309+  11BD             ; integer returned in A
0310+  11BD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0311+  11BD             _strtoint:
0312+  11BD E2            push si
0313+  11BE D8            push b
0314+  11BF D9            push c
0315+  11C0 DA            push d
0316+  11C1 07 02 10      call _strlen      ; get string length in C
0317+  11C4 7E            dec c
0318+  11C5 FD 4E         mov si, d
0319+  11C7 12            mov a, c
0320+  11C8 FD 99         shl a
0321+  11CA 3B 39 13      mov d, table_power
0322+  11CD 59            add d, a
0323+  11CE 38 00 00      mov c, 0
0324+  11D1             _strtoint_L0:
0325+  11D1 F6            lodsb      ; load ASCII to al
0326+  11D2 B9 00         cmp al, 0
0327+  11D4 C6 E7 11      je _strtoint_end
0328+  11D7 6F 30         sub al, $30    ; make into integer
0329+  11D9 22 00         mov ah, 0
0330+  11DB 2A            mov b, [d]
0331+  11DC AC            mul a, b      ; result in B since it fits in 16bits
0332+  11DD 11            mov a, b
0333+  11DE 28            mov b, c
0334+  11DF 54            add a, b
0335+  11E0 39            mov c, a
0336+  11E1 63 02 00      sub d, 2
0337+  11E4 0A D1 11      jmp _strtoint_L0
0338+  11E7             _strtoint_end:
0339+  11E7 12            mov a, c
0340+  11E8 E7            pop d
0341+  11E9 E6            pop c
0342+  11EA E5            pop b
0343+  11EB EF            pop si
0344+  11EC 09            ret
0345+  11ED             
0346+  11ED             
0347+  11ED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0348+  11ED             ; PRINT NULL TERMINATED STRING
0349+  11ED             ; pointer in D
0350+  11ED             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0351+  11ED             _puts:
0352+  11ED D7            push a
0353+  11EE DA            push d
0354+  11EF             _puts_L1:
0355+  11EF 1E            mov al, [d]
0356+  11F0 B9 00         cmp al, 0
0357+  11F2 C6 FE 11      jz _puts_END
0358+  11F5 23            mov ah, al
0359+  11F6 19 00         mov al, 0
0360+  11F8 05 03         syscall sys_io
0361+  11FA 79            inc d
0362+  11FB 0A EF 11      jmp _puts_L1
0363+  11FE             _puts_END:
0364+  11FE E7            pop d
0365+  11FF E4            pop a
0366+  1200 09            ret
0367+  1201             
0368+  1201             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0369+  1201             ; PRINT N SIZE STRING
0370+  1201             ; pointer in D
0371+  1201             ; size in C
0372+  1201             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0373+  1201             _putsn:
0374+  1201 DB            push al
0375+  1202 DA            push d
0376+  1203 D9            push c
0377+  1204             _putsn_L0:
0378+  1204 1E            mov al, [d]
0379+  1205 23            mov ah, al
0380+  1206 19 00         mov al, 0
0381+  1208 05 03         syscall sys_io
0382+  120A 79            inc d
0383+  120B 7E            dec c  
0384+  120C C2 00 00      cmp c, 0
0385+  120F C7 04 12      jne _putsn_L0
0386+  1212             _putsn_end:
0387+  1212 E6            pop c
0388+  1213 E7            pop d
0389+  1214 E8            pop al
0390+  1215 09            ret
0391+  1216             
0392+  1216             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0393+  1216             ; print 16bit decimal number
0394+  1216             ; input number in A
0395+  1216             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0396+  1216             print_u16d:
0397+  1216 D7            push a
0398+  1217 D8            push b
0399+  1218 26 10 27      mov b, 10000
0400+  121B AE            div a, b      ; get 10000's coeff.
0401+  121C 07 3E 12      call print_number
0402+  121F 11            mov a, b
0403+  1220 26 E8 03      mov b, 1000
0404+  1223 AE            div a, b      ; get 1000's coeff.
0405+  1224 07 3E 12      call print_number
0406+  1227 11            mov a, b
0407+  1228 26 64 00      mov b, 100
0408+  122B AE            div a, b
0409+  122C 07 3E 12      call print_number
0410+  122F 11            mov a, b
0411+  1230 26 0A 00      mov b, 10
0412+  1233 AE            div a, b
0413+  1234 07 3E 12      call print_number
0414+  1237 1B            mov al, bl      ; 1's coeff in bl
0415+  1238 07 3E 12      call print_number
0416+  123B E5            pop b
0417+  123C E4            pop a
0418+  123D 09            ret
0419+  123E             
0420+  123E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0421+  123E             ; print AL
0422+  123E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0423+  123E             print_number:
0424+  123E 6A 30         add al, $30
0425+  1240 23            mov ah, al
0426+  1241 07 A3 10      call _putchar
0427+  1244 09            ret
0428+  1245             
0429+  1245             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0430+  1245             ; PRINT 16BIT HEX INTEGER
0431+  1245             ; integer value in reg B
0432+  1245             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0433+  1245             print_u16x:
0434+  1245 D7            push a
0435+  1246 D8            push b
0436+  1247 DD            push bl
0437+  1248 30            mov bl, bh
0438+  1249 07 71 10      call _itoa        ; convert bh to char in A
0439+  124C 2F            mov bl, al        ; save al
0440+  124D 19 00         mov al, 0
0441+  124F 05 03         syscall sys_io        ; display AH
0442+  1251 24            mov ah, bl        ; retrieve al
0443+  1252 19 00         mov al, 0
0444+  1254 05 03         syscall sys_io        ; display AL
0445+  1256             
0446+  1256 EA            pop bl
0447+  1257 07 71 10      call _itoa        ; convert bh to char in A
0448+  125A 2F            mov bl, al        ; save al
0449+  125B 19 00         mov al, 0
0450+  125D 05 03         syscall sys_io        ; display AH
0451+  125F 24            mov ah, bl        ; retrieve al
0452+  1260 19 00         mov al, 0
0453+  1262 05 03         syscall sys_io        ; display AL
0454+  1264             
0455+  1264 E5            pop b
0456+  1265 E4            pop a
0457+  1266 09            ret
0458+  1267             
0459+  1267             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0460+  1267             ; INPUT 16BIT HEX INTEGER
0461+  1267             ; read 16bit integer into A
0462+  1267             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0463+  1267             scan_u16x:
0464+  1267 F8 10 00      enter 16
0465+  126A D8            push b
0466+  126B DA            push d
0467+  126C             
0468+  126C FA F1 FF      lea d, [bp + -15]
0469+  126F 07 AA 10      call _gets        ; get number
0470+  1272             
0471+  1272 32            mov bl, [d]
0472+  1273 37            mov bh, bl
0473+  1274 33 01 00      mov bl, [d + 1]
0474+  1277 07 60 10      call _atoi        ; convert to int in AL
0475+  127A 23            mov ah, al        ; move to AH
0476+  127B             
0477+  127B 33 02 00      mov bl, [d + 2]
0478+  127E 37            mov bh, bl
0479+  127F 33 03 00      mov bl, [d + 3]
0480+  1282 07 60 10      call _atoi        ; convert to int in AL
0481+  1285             
0482+  1285 E7            pop d
0483+  1286 E5            pop b
0484+  1287 F9            leave
0485+  1288 09            ret
0486+  1289             
0487+  1289             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0488+  1289             ; PRINT 8bit HEX INTEGER
0489+  1289             ; integer value in reg bl
0490+  1289             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0491+  1289             print_u8x:
0492+  1289 D7            push a
0493+  128A DD            push bl
0494+  128B             
0495+  128B 07 71 10      call _itoa        ; convert bl to char in A
0496+  128E 2F            mov bl, al        ; save al
0497+  128F 19 00         mov al, 0
0498+  1291 05 03         syscall sys_io        ; display AH
0499+  1293 24            mov ah, bl        ; retrieve al
0500+  1294 19 00         mov al, 0
0501+  1296 05 03         syscall sys_io        ; display AL
0502+  1298             
0503+  1298 EA            pop bl
0504+  1299 E4            pop a
0505+  129A 09            ret
0506+  129B             
0507+  129B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0508+  129B             ; print 8bit decimal unsigned number
0509+  129B             ; input number in AL
0510+  129B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0511+  129B             print_u8d:
0512+  129B D7            push a
0513+  129C D8            push b
0514+  129D             
0515+  129D 22 00         mov ah, 0
0516+  129F 26 64 00      mov b, 100
0517+  12A2 AE            div a, b
0518+  12A3 D8            push b      ; save remainder
0519+  12A4 B9 00         cmp al, 0
0520+  12A6 C6 B0 12      je skip100
0521+  12A9 6A 30         add al, $30
0522+  12AB 23            mov ah, al
0523+  12AC 19 00         mov al, 0
0524+  12AE 05 03         syscall sys_io  ; print coeff
0525+  12B0             skip100:
0526+  12B0 E4            pop a
0527+  12B1 22 00         mov ah, 0
0528+  12B3 26 0A 00      mov b, 10
0529+  12B6 AE            div a, b
0530+  12B7 D8            push b      ; save remainder
0531+  12B8 B9 00         cmp al, 0
0532+  12BA C6 C4 12      je skip10
0533+  12BD 6A 30         add al, $30
0534+  12BF 23            mov ah, al
0535+  12C0 19 00         mov al, 0
0536+  12C2 05 03         syscall sys_io  ; print coeff
0537+  12C4             skip10:
0538+  12C4 E4            pop a
0539+  12C5 1B            mov al, bl
0540+  12C6 6A 30         add al, $30
0541+  12C8 23            mov ah, al
0542+  12C9 19 00         mov al, 0
0543+  12CB 05 03         syscall sys_io  ; print coeff
0544+  12CD E5            pop b
0545+  12CE E4            pop a
0546+  12CF 09            ret
0547+  12D0             
0548+  12D0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0549+  12D0             ; INPUT 8BIT HEX INTEGER
0550+  12D0             ; read 8bit integer into AL
0551+  12D0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0552+  12D0             scan_u8x:
0553+  12D0 F8 04 00      enter 4
0554+  12D3 D8            push b
0555+  12D4 DA            push d
0556+  12D5             
0557+  12D5 FA FD FF      lea d, [bp + -3]
0558+  12D8 07 AA 10      call _gets        ; get number
0559+  12DB             
0560+  12DB 32            mov bl, [d]
0561+  12DC 37            mov bh, bl
0562+  12DD 33 01 00      mov bl, [d + 1]
0563+  12E0 07 60 10      call _atoi        ; convert to int in AL
0564+  12E3             
0565+  12E3 E7            pop d
0566+  12E4 E5            pop b
0567+  12E5 F9            leave
0568+  12E6 09            ret
0569+  12E7             
0570+  12E7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0571+  12E7             ; input decimal number
0572+  12E7             ; result in A
0573+  12E7             ; 655'\0'
0574+  12E7             ; low--------high
0575+  12E7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0576+  12E7             scan_u16d:
0577+  12E7 F8 08 00      enter 8
0578+  12EA E2            push si
0579+  12EB D8            push b
0580+  12EC D9            push c
0581+  12ED DA            push d
0582+  12EE FA F9 FF      lea d, [bp +- 7]
0583+  12F1 07 AA 10      call _gets
0584+  12F4 07 02 10      call _strlen      ; get string length in C
0585+  12F7 7E            dec c
0586+  12F8 FD 4E         mov si, d
0587+  12FA 12            mov a, c
0588+  12FB FD 99         shl a
0589+  12FD 3B 39 13      mov d, table_power
0590+  1300 59            add d, a
0591+  1301 38 00 00      mov c, 0
0592+  1304             mul_loop:
0593+  1304 F6            lodsb      ; load ASCII to al
0594+  1305 B9 00         cmp al, 0
0595+  1307 C6 1A 13      je mul_exit
0596+  130A 6F 30         sub al, $30    ; make into integer
0597+  130C 22 00         mov ah, 0
0598+  130E 2A            mov b, [d]
0599+  130F AC            mul a, b      ; result in B since it fits in 16bits
0600+  1310 11            mov a, b
0601+  1311 28            mov b, c
0602+  1312 54            add a, b
0603+  1313 39            mov c, a
0604+  1314 63 02 00      sub d, 2
0605+  1317 0A 04 13      jmp mul_loop
0606+  131A             mul_exit:
0607+  131A 12            mov a, c
0608+  131B E7            pop d
0609+  131C E6            pop c
0610+  131D E5            pop b
0611+  131E EF            pop si
0612+  131F F9            leave
0613+  1320 09            ret
0614+  1321             
0615+  1321             
0616+  1321 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0616+  1325 34 35 36 37 
0616+  1329 38 39 41 42 
0616+  132D 43 44 45 46 
0617+  1331 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0617+  1335 1B 5B 48 00 
0618+  1339             
0619+  1339             table_power:
0620+  1339 01 00         .dw 1
0621+  133B 0A 00         .dw 10
0622+  133D 64 00         .dw 100
0623+  133F E8 03         .dw 1000
0624+  1341 10 27         .dw 100002189   1343             ; --- END INLINE ASM BLOCK
2190   1343             
2191   1343 F9            leave
2192   1344 09            ret
2193   1345             
2194   1345             show:
2195   1345 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2196   1348             ; $i 
2197   1348             ; $j 
2198   1348 52 04 00      sub sp, 4
2199   134B             ;; for(i = 0; i <  30     ; i++){ 
2200   134B             _for32_init:
2201   134B FA FF FF      lea d, [bp + -1] ; $i
2202   134E DA            push d
2203   134F 26 00 00      mov b, $0
2204   1352 E7            pop d
2205   1353 FD 43         mov [d], b
2206   1355             _for32_cond:
2207   1355 FA FF FF      lea d, [bp + -1] ; $i
2208   1358 2A            mov b, [d]
2209   1359             ; START RELATIONAL
2210   1359 D7            push a
2211   135A 11            mov a, b
2212   135B 26 1E 00      mov b, $1e
2213   135E B0            cmp a, b
2214   135F FD 73         slt ; < 
2215   1361 E4            pop a
2216   1362             ; END RELATIONAL
2217   1362 C0 00 00      cmp b, 0
2218   1365 C6 F6 13      je _for32_exit
2219   1368             _for32_block:
2220   1368             ;; for(j = 0; j <  40    ; j++){ 
2221   1368             _for33_init:
2222   1368 FA FD FF      lea d, [bp + -3] ; $j
2223   136B DA            push d
2224   136C 26 00 00      mov b, $0
2225   136F E7            pop d
2226   1370 FD 43         mov [d], b
2227   1372             _for33_cond:
2228   1372 FA FD FF      lea d, [bp + -3] ; $j
2229   1375 2A            mov b, [d]
2230   1376             ; START RELATIONAL
2231   1376 D7            push a
2232   1377 11            mov a, b
2233   1378 26 28 00      mov b, $28
2234   137B B0            cmp a, b
2235   137C FD 73         slt ; < 
2236   137E E4            pop a
2237   137F             ; END RELATIONAL
2238   137F C0 00 00      cmp b, 0
2239   1382 C6 DA 13      je _for33_exit
2240   1385             _for33_block:
2241   1385             ;; currState[i][j] == '@' ? printf("@ ") : printf(". "); 
2242   1385             _ternary34_cond:
2243   1385 3B 3F 1B      mov d, _currState_data ; $currState
2244   1388 D7            push a
2245   1389 DA            push d
2246   138A FA FF FF      lea d, [bp + -1] ; $i
2247   138D 2A            mov b, [d]
2248   138E E7            pop d
2249   138F FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2250   1393 DA            push d
2251   1394 FA FD FF      lea d, [bp + -3] ; $j
2252   1397 2A            mov b, [d]
2253   1398 E7            pop d
2254   1399 5A            add d, b
2255   139A E4            pop a
2256   139B 32            mov bl, [d]
2257   139C A7 00         mov bh, 0
2258   139E             ; START RELATIONAL
2259   139E D7            push a
2260   139F 11            mov a, b
2261   13A0 26 40 00      mov b, $40
2262   13A3 B0            cmp a, b
2263   13A4 FD 71         seq ; ==
2264   13A6 E4            pop a
2265   13A7             ; END RELATIONAL
2266   13A7 C0 00 00      cmp b, 0
2267   13AA C6 BC 13      je _ternary34_false
2268   13AD             _ternary34_true:
2269   13AD 26 32 20      mov b, __s4 ; "@ "
2270   13B0 FD AB         swp b
2271   13B2 D8            push b
2272   13B3 07 2C 08      call printf
2273   13B6 51 02 00      add sp, 2
2274   13B9 0A C8 13      jmp _ternary34_exit
2275   13BC             _ternary34_false:
2276   13BC 26 35 20      mov b, __s5 ; ". "
2277   13BF FD AB         swp b
2278   13C1 D8            push b
2279   13C2 07 2C 08      call printf
2280   13C5 51 02 00      add sp, 2
2281   13C8             _ternary34_exit:
2282   13C8             _for33_update:
2283   13C8 FA FD FF      lea d, [bp + -3] ; $j
2284   13CB 2A            mov b, [d]
2285   13CC FD 79         mov g, b
2286   13CE FD 77         inc b
2287   13D0 FA FD FF      lea d, [bp + -3] ; $j
2288   13D3 FD 43         mov [d], b
2289   13D5 FD 27         mov b, g
2290   13D7 0A 72 13      jmp _for33_cond
2291   13DA             _for33_exit:
2292   13DA             ;; putchar(10); 
2293   13DA 26 0A 00      mov b, $a
2294   13DD DD            push bl
2295   13DE 07 26 0E      call putchar
2296   13E1 51 01 00      add sp, 1
2297   13E4             _for32_update:
2298   13E4 FA FF FF      lea d, [bp + -1] ; $i
2299   13E7 2A            mov b, [d]
2300   13E8 FD 79         mov g, b
2301   13EA FD 77         inc b
2302   13EC FA FF FF      lea d, [bp + -1] ; $i
2303   13EF FD 43         mov [d], b
2304   13F1 FD 27         mov b, g
2305   13F3 0A 55 13      jmp _for32_cond
2306   13F6             _for32_exit:
2307   13F6 F9            leave
2308   13F7 09            ret
2309   13F8             
2310   13F8             alive:
2311   13F8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2312   13FB             ;; if(currState[i][j] == '@') return 1; 
2313   13FB             _if35_cond:
2314   13FB 3B 3F 1B      mov d, _currState_data ; $currState
2315   13FE D7            push a
2316   13FF DA            push d
2317   1400 FA 07 00      lea d, [bp + 7] ; $i
2318   1403 2A            mov b, [d]
2319   1404 E7            pop d
2320   1405 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2321   1409 DA            push d
2322   140A FA 05 00      lea d, [bp + 5] ; $j
2323   140D 2A            mov b, [d]
2324   140E E7            pop d
2325   140F 5A            add d, b
2326   1410 E4            pop a
2327   1411 32            mov bl, [d]
2328   1412 A7 00         mov bh, 0
2329   1414             ; START RELATIONAL
2330   1414 D7            push a
2331   1415 11            mov a, b
2332   1416 26 40 00      mov b, $40
2333   1419 B0            cmp a, b
2334   141A FD 71         seq ; ==
2335   141C E4            pop a
2336   141D             ; END RELATIONAL
2337   141D C0 00 00      cmp b, 0
2338   1420 C6 2B 14      je _if35_else
2339   1423             _if35_true:
2340   1423             ;; return 1; 
2341   1423 26 01 00      mov b, $1
2342   1426 F9            leave
2343   1427 09            ret
2344   1428 0A 30 14      jmp _if35_exit
2345   142B             _if35_else:
2346   142B             ;; return 0; 
2347   142B 26 00 00      mov b, $0
2348   142E F9            leave
2349   142F 09            ret
2350   1430             _if35_exit:
2351   1430 F9            leave
2352   1431 09            ret
2353   1432             
2354   1432             neighbours:
2355   1432 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2356   1435             ; $count 
2357   1435 52 02 00      sub sp, 2
2358   1438             ;; count = 0; 
2359   1438 FA FF FF      lea d, [bp + -1] ; $count
2360   143B DA            push d
2361   143C 26 00 00      mov b, $0
2362   143F E7            pop d
2363   1440 FD 43         mov [d], b
2364   1442             ;; if(currState[i+-1][j] == '@')			count++; 
2365   1442             _if36_cond:
2366   1442 3B 3F 1B      mov d, _currState_data ; $currState
2367   1445 D7            push a
2368   1446 DA            push d
2369   1447 FA 07 00      lea d, [bp + 7] ; $i
2370   144A 2A            mov b, [d]
2371   144B             ; START TERMS
2372   144B D7            push a
2373   144C 11            mov a, b
2374   144D 26 01 00      mov b, $1
2375   1450 FD 97         neg b
2376   1452 54            add a, b
2377   1453 27            mov b, a
2378   1454 E4            pop a
2379   1455             ; END TERMS
2380   1455 E7            pop d
2381   1456 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2382   145A DA            push d
2383   145B FA 05 00      lea d, [bp + 5] ; $j
2384   145E 2A            mov b, [d]
2385   145F E7            pop d
2386   1460 5A            add d, b
2387   1461 E4            pop a
2388   1462 32            mov bl, [d]
2389   1463 A7 00         mov bh, 0
2390   1465             ; START RELATIONAL
2391   1465 D7            push a
2392   1466 11            mov a, b
2393   1467 26 40 00      mov b, $40
2394   146A B0            cmp a, b
2395   146B FD 71         seq ; ==
2396   146D E4            pop a
2397   146E             ; END RELATIONAL
2398   146E C0 00 00      cmp b, 0
2399   1471 C6 86 14      je _if36_exit
2400   1474             _if36_true:
2401   1474             ;; count++; 
2402   1474 FA FF FF      lea d, [bp + -1] ; $count
2403   1477 2A            mov b, [d]
2404   1478 FD 79         mov g, b
2405   147A FD 77         inc b
2406   147C FA FF FF      lea d, [bp + -1] ; $count
2407   147F FD 43         mov [d], b
2408   1481 FD 27         mov b, g
2409   1483 0A 86 14      jmp _if36_exit
2410   1486             _if36_exit:
2411   1486             ;; if(currState[i+-1][j+-1] == '@') 	count++; 
2412   1486             _if37_cond:
2413   1486 3B 3F 1B      mov d, _currState_data ; $currState
2414   1489 D7            push a
2415   148A DA            push d
2416   148B FA 07 00      lea d, [bp + 7] ; $i
2417   148E 2A            mov b, [d]
2418   148F             ; START TERMS
2419   148F D7            push a
2420   1490 11            mov a, b
2421   1491 26 01 00      mov b, $1
2422   1494 FD 97         neg b
2423   1496 54            add a, b
2424   1497 27            mov b, a
2425   1498 E4            pop a
2426   1499             ; END TERMS
2427   1499 E7            pop d
2428   149A FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2429   149E DA            push d
2430   149F FA 05 00      lea d, [bp + 5] ; $j
2431   14A2 2A            mov b, [d]
2432   14A3             ; START TERMS
2433   14A3 D7            push a
2434   14A4 11            mov a, b
2435   14A5 26 01 00      mov b, $1
2436   14A8 FD 97         neg b
2437   14AA 54            add a, b
2438   14AB 27            mov b, a
2439   14AC E4            pop a
2440   14AD             ; END TERMS
2441   14AD E7            pop d
2442   14AE 5A            add d, b
2443   14AF E4            pop a
2444   14B0 32            mov bl, [d]
2445   14B1 A7 00         mov bh, 0
2446   14B3             ; START RELATIONAL
2447   14B3 D7            push a
2448   14B4 11            mov a, b
2449   14B5 26 40 00      mov b, $40
2450   14B8 B0            cmp a, b
2451   14B9 FD 71         seq ; ==
2452   14BB E4            pop a
2453   14BC             ; END RELATIONAL
2454   14BC C0 00 00      cmp b, 0
2455   14BF C6 D4 14      je _if37_exit
2456   14C2             _if37_true:
2457   14C2             ;; count++; 
2458   14C2 FA FF FF      lea d, [bp + -1] ; $count
2459   14C5 2A            mov b, [d]
2460   14C6 FD 79         mov g, b
2461   14C8 FD 77         inc b
2462   14CA FA FF FF      lea d, [bp + -1] ; $count
2463   14CD FD 43         mov [d], b
2464   14CF FD 27         mov b, g
2465   14D1 0A D4 14      jmp _if37_exit
2466   14D4             _if37_exit:
2467   14D4             ;; if(currState[i+-1][j+1] == '@') 	count++; 
2468   14D4             _if38_cond:
2469   14D4 3B 3F 1B      mov d, _currState_data ; $currState
2470   14D7 D7            push a
2471   14D8 DA            push d
2472   14D9 FA 07 00      lea d, [bp + 7] ; $i
2473   14DC 2A            mov b, [d]
2474   14DD             ; START TERMS
2475   14DD D7            push a
2476   14DE 11            mov a, b
2477   14DF 26 01 00      mov b, $1
2478   14E2 FD 97         neg b
2479   14E4 54            add a, b
2480   14E5 27            mov b, a
2481   14E6 E4            pop a
2482   14E7             ; END TERMS
2483   14E7 E7            pop d
2484   14E8 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2485   14EC DA            push d
2486   14ED FA 05 00      lea d, [bp + 5] ; $j
2487   14F0 2A            mov b, [d]
2488   14F1             ; START TERMS
2489   14F1 D7            push a
2490   14F2 11            mov a, b
2491   14F3 26 01 00      mov b, $1
2492   14F6 54            add a, b
2493   14F7 27            mov b, a
2494   14F8 E4            pop a
2495   14F9             ; END TERMS
2496   14F9 E7            pop d
2497   14FA 5A            add d, b
2498   14FB E4            pop a
2499   14FC 32            mov bl, [d]
2500   14FD A7 00         mov bh, 0
2501   14FF             ; START RELATIONAL
2502   14FF D7            push a
2503   1500 11            mov a, b
2504   1501 26 40 00      mov b, $40
2505   1504 B0            cmp a, b
2506   1505 FD 71         seq ; ==
2507   1507 E4            pop a
2508   1508             ; END RELATIONAL
2509   1508 C0 00 00      cmp b, 0
2510   150B C6 20 15      je _if38_exit
2511   150E             _if38_true:
2512   150E             ;; count++; 
2513   150E FA FF FF      lea d, [bp + -1] ; $count
2514   1511 2A            mov b, [d]
2515   1512 FD 79         mov g, b
2516   1514 FD 77         inc b
2517   1516 FA FF FF      lea d, [bp + -1] ; $count
2518   1519 FD 43         mov [d], b
2519   151B FD 27         mov b, g
2520   151D 0A 20 15      jmp _if38_exit
2521   1520             _if38_exit:
2522   1520             ;; if(currState[i][j+-1] == '@') 		count++; 
2523   1520             _if39_cond:
2524   1520 3B 3F 1B      mov d, _currState_data ; $currState
2525   1523 D7            push a
2526   1524 DA            push d
2527   1525 FA 07 00      lea d, [bp + 7] ; $i
2528   1528 2A            mov b, [d]
2529   1529 E7            pop d
2530   152A FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2531   152E DA            push d
2532   152F FA 05 00      lea d, [bp + 5] ; $j
2533   1532 2A            mov b, [d]
2534   1533             ; START TERMS
2535   1533 D7            push a
2536   1534 11            mov a, b
2537   1535 26 01 00      mov b, $1
2538   1538 FD 97         neg b
2539   153A 54            add a, b
2540   153B 27            mov b, a
2541   153C E4            pop a
2542   153D             ; END TERMS
2543   153D E7            pop d
2544   153E 5A            add d, b
2545   153F E4            pop a
2546   1540 32            mov bl, [d]
2547   1541 A7 00         mov bh, 0
2548   1543             ; START RELATIONAL
2549   1543 D7            push a
2550   1544 11            mov a, b
2551   1545 26 40 00      mov b, $40
2552   1548 B0            cmp a, b
2553   1549 FD 71         seq ; ==
2554   154B E4            pop a
2555   154C             ; END RELATIONAL
2556   154C C0 00 00      cmp b, 0
2557   154F C6 64 15      je _if39_exit
2558   1552             _if39_true:
2559   1552             ;; count++; 
2560   1552 FA FF FF      lea d, [bp + -1] ; $count
2561   1555 2A            mov b, [d]
2562   1556 FD 79         mov g, b
2563   1558 FD 77         inc b
2564   155A FA FF FF      lea d, [bp + -1] ; $count
2565   155D FD 43         mov [d], b
2566   155F FD 27         mov b, g
2567   1561 0A 64 15      jmp _if39_exit
2568   1564             _if39_exit:
2569   1564             ;; if(currState[i][j+1] == '@') 			count++; 
2570   1564             _if40_cond:
2571   1564 3B 3F 1B      mov d, _currState_data ; $currState
2572   1567 D7            push a
2573   1568 DA            push d
2574   1569 FA 07 00      lea d, [bp + 7] ; $i
2575   156C 2A            mov b, [d]
2576   156D E7            pop d
2577   156E FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2578   1572 DA            push d
2579   1573 FA 05 00      lea d, [bp + 5] ; $j
2580   1576 2A            mov b, [d]
2581   1577             ; START TERMS
2582   1577 D7            push a
2583   1578 11            mov a, b
2584   1579 26 01 00      mov b, $1
2585   157C 54            add a, b
2586   157D 27            mov b, a
2587   157E E4            pop a
2588   157F             ; END TERMS
2589   157F E7            pop d
2590   1580 5A            add d, b
2591   1581 E4            pop a
2592   1582 32            mov bl, [d]
2593   1583 A7 00         mov bh, 0
2594   1585             ; START RELATIONAL
2595   1585 D7            push a
2596   1586 11            mov a, b
2597   1587 26 40 00      mov b, $40
2598   158A B0            cmp a, b
2599   158B FD 71         seq ; ==
2600   158D E4            pop a
2601   158E             ; END RELATIONAL
2602   158E C0 00 00      cmp b, 0
2603   1591 C6 A6 15      je _if40_exit
2604   1594             _if40_true:
2605   1594             ;; count++; 
2606   1594 FA FF FF      lea d, [bp + -1] ; $count
2607   1597 2A            mov b, [d]
2608   1598 FD 79         mov g, b
2609   159A FD 77         inc b
2610   159C FA FF FF      lea d, [bp + -1] ; $count
2611   159F FD 43         mov [d], b
2612   15A1 FD 27         mov b, g
2613   15A3 0A A6 15      jmp _if40_exit
2614   15A6             _if40_exit:
2615   15A6             ;; if(currState[i+1][j+-1] == '@') 	count++; 
2616   15A6             _if41_cond:
2617   15A6 3B 3F 1B      mov d, _currState_data ; $currState
2618   15A9 D7            push a
2619   15AA DA            push d
2620   15AB FA 07 00      lea d, [bp + 7] ; $i
2621   15AE 2A            mov b, [d]
2622   15AF             ; START TERMS
2623   15AF D7            push a
2624   15B0 11            mov a, b
2625   15B1 26 01 00      mov b, $1
2626   15B4 54            add a, b
2627   15B5 27            mov b, a
2628   15B6 E4            pop a
2629   15B7             ; END TERMS
2630   15B7 E7            pop d
2631   15B8 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2632   15BC DA            push d
2633   15BD FA 05 00      lea d, [bp + 5] ; $j
2634   15C0 2A            mov b, [d]
2635   15C1             ; START TERMS
2636   15C1 D7            push a
2637   15C2 11            mov a, b
2638   15C3 26 01 00      mov b, $1
2639   15C6 FD 97         neg b
2640   15C8 54            add a, b
2641   15C9 27            mov b, a
2642   15CA E4            pop a
2643   15CB             ; END TERMS
2644   15CB E7            pop d
2645   15CC 5A            add d, b
2646   15CD E4            pop a
2647   15CE 32            mov bl, [d]
2648   15CF A7 00         mov bh, 0
2649   15D1             ; START RELATIONAL
2650   15D1 D7            push a
2651   15D2 11            mov a, b
2652   15D3 26 40 00      mov b, $40
2653   15D6 B0            cmp a, b
2654   15D7 FD 71         seq ; ==
2655   15D9 E4            pop a
2656   15DA             ; END RELATIONAL
2657   15DA C0 00 00      cmp b, 0
2658   15DD C6 F2 15      je _if41_exit
2659   15E0             _if41_true:
2660   15E0             ;; count++; 
2661   15E0 FA FF FF      lea d, [bp + -1] ; $count
2662   15E3 2A            mov b, [d]
2663   15E4 FD 79         mov g, b
2664   15E6 FD 77         inc b
2665   15E8 FA FF FF      lea d, [bp + -1] ; $count
2666   15EB FD 43         mov [d], b
2667   15ED FD 27         mov b, g
2668   15EF 0A F2 15      jmp _if41_exit
2669   15F2             _if41_exit:
2670   15F2             ;; if(currState[i+1][j] == '@') 			count++; 
2671   15F2             _if42_cond:
2672   15F2 3B 3F 1B      mov d, _currState_data ; $currState
2673   15F5 D7            push a
2674   15F6 DA            push d
2675   15F7 FA 07 00      lea d, [bp + 7] ; $i
2676   15FA 2A            mov b, [d]
2677   15FB             ; START TERMS
2678   15FB D7            push a
2679   15FC 11            mov a, b
2680   15FD 26 01 00      mov b, $1
2681   1600 54            add a, b
2682   1601 27            mov b, a
2683   1602 E4            pop a
2684   1603             ; END TERMS
2685   1603 E7            pop d
2686   1604 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2687   1608 DA            push d
2688   1609 FA 05 00      lea d, [bp + 5] ; $j
2689   160C 2A            mov b, [d]
2690   160D E7            pop d
2691   160E 5A            add d, b
2692   160F E4            pop a
2693   1610 32            mov bl, [d]
2694   1611 A7 00         mov bh, 0
2695   1613             ; START RELATIONAL
2696   1613 D7            push a
2697   1614 11            mov a, b
2698   1615 26 40 00      mov b, $40
2699   1618 B0            cmp a, b
2700   1619 FD 71         seq ; ==
2701   161B E4            pop a
2702   161C             ; END RELATIONAL
2703   161C C0 00 00      cmp b, 0
2704   161F C6 34 16      je _if42_exit
2705   1622             _if42_true:
2706   1622             ;; count++; 
2707   1622 FA FF FF      lea d, [bp + -1] ; $count
2708   1625 2A            mov b, [d]
2709   1626 FD 79         mov g, b
2710   1628 FD 77         inc b
2711   162A FA FF FF      lea d, [bp + -1] ; $count
2712   162D FD 43         mov [d], b
2713   162F FD 27         mov b, g
2714   1631 0A 34 16      jmp _if42_exit
2715   1634             _if42_exit:
2716   1634             ;; if(currState[i+1][j+1] == '@') 		count++; 
2717   1634             _if43_cond:
2718   1634 3B 3F 1B      mov d, _currState_data ; $currState
2719   1637 D7            push a
2720   1638 DA            push d
2721   1639 FA 07 00      lea d, [bp + 7] ; $i
2722   163C 2A            mov b, [d]
2723   163D             ; START TERMS
2724   163D D7            push a
2725   163E 11            mov a, b
2726   163F 26 01 00      mov b, $1
2727   1642 54            add a, b
2728   1643 27            mov b, a
2729   1644 E4            pop a
2730   1645             ; END TERMS
2731   1645 E7            pop d
2732   1646 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
2733   164A DA            push d
2734   164B FA 05 00      lea d, [bp + 5] ; $j
2735   164E 2A            mov b, [d]
2736   164F             ; START TERMS
2737   164F D7            push a
2738   1650 11            mov a, b
2739   1651 26 01 00      mov b, $1
2740   1654 54            add a, b
2741   1655 27            mov b, a
2742   1656 E4            pop a
2743   1657             ; END TERMS
2744   1657 E7            pop d
2745   1658 5A            add d, b
2746   1659 E4            pop a
2747   165A 32            mov bl, [d]
2748   165B A7 00         mov bh, 0
2749   165D             ; START RELATIONAL
2750   165D D7            push a
2751   165E 11            mov a, b
2752   165F 26 40 00      mov b, $40
2753   1662 B0            cmp a, b
2754   1663 FD 71         seq ; ==
2755   1665 E4            pop a
2756   1666             ; END RELATIONAL
2757   1666 C0 00 00      cmp b, 0
2758   1669 C6 7E 16      je _if43_exit
2759   166C             _if43_true:
2760   166C             ;; count++; 
2761   166C FA FF FF      lea d, [bp + -1] ; $count
2762   166F 2A            mov b, [d]
2763   1670 FD 79         mov g, b
2764   1672 FD 77         inc b
2765   1674 FA FF FF      lea d, [bp + -1] ; $count
2766   1677 FD 43         mov [d], b
2767   1679 FD 27         mov b, g
2768   167B 0A 7E 16      jmp _if43_exit
2769   167E             _if43_exit:
2770   167E             ;; return count; 
2771   167E FA FF FF      lea d, [bp + -1] ; $count
2772   1681 2A            mov b, [d]
2773   1682 F9            leave
2774   1683 09            ret
2775   1684             ; --- END TEXT BLOCK
2776   1684             
2777   1684             ; --- BEGIN DATA BLOCK
2778   1684             _clear_data: 
2779   1684 1B 5B 32 4A .db 27,$5b,$32,$4a,27,$5b,$48,0,
2779   1688 1B 5B 48 00 
2780   168C 00 00 00    .fill 3, 0
2781   168F 00 00 00 00 _nextState_data: .fill 1200, 0
2781   1693 00 00 00 00 
2781   1697 00 00 00 00 
2781   169B 00 00 00 00 
2781   169F 00 00 00 00 
2781   16A3 00 00 00 00 
2781   16A7 00 00 00 00 
2781   16AB 00 00 00 00 
2781   16AF 00 00 00 00 
2781   16B3 00 00 00 00 
2781   16B7 00 00 00 00 
2781   16BB 00 00 00 00 
2781   16BF 00 00 00 00 
2781   16C3 00 00 00 00 
2781   16C7 00 00 00 00 
2781   16CB 00 00 00 00 
2781   16CF 00 00 00 00 
2781   16D3 00 00 00 00 
2781   16D7 00 00 00 00 
2781   16DB 00 00 00 00 
2781   16DF 00 00 00 00 
2781   16E3 00 00 00 00 
2781   16E7 00 00 00 00 
2781   16EB 00 00 00 00 
2781   16EF 00 00 00 00 
2781   16F3 00 00 00 00 
2781   16F7 00 00 00 00 
2781   16FB 00 00 00 00 
2781   16FF 00 00 00 00 
2781   1703 00 00 00 00 
2781   1707 00 00 00 00 
2781   170B 00 00 00 00 
2781   170F 00 00 00 00 
2781   1713 00 00 00 00 
2781   1717 00 00 00 00 
2781   171B 00 00 00 00 
2781   171F 00 00 00 00 
2781   1723 00 00 00 00 
2781   1727 00 00 00 00 
2781   172B 00 00 00 00 
2781   172F 00 00 00 00 
2781   1733 00 00 00 00 
2781   1737 00 00 00 00 
2781   173B 00 00 00 00 
2781   173F 00 00 00 00 
2781   1743 00 00 00 00 
2781   1747 00 00 00 00 
2781   174B 00 00 00 00 
2781   174F 00 00 00 00 
2781   1753 00 00 00 00 
2781   1757 00 00 00 00 
2781   175B 00 00 00 00 
2781   175F 00 00 00 00 
2781   1763 00 00 00 00 
2781   1767 00 00 00 00 
2781   176B 00 00 00 00 
2781   176F 00 00 00 00 
2781   1773 00 00 00 00 
2781   1777 00 00 00 00 
2781   177B 00 00 00 00 
2781   177F 00 00 00 00 
2781   1783 00 00 00 00 
2781   1787 00 00 00 00 
2781   178B 00 00 00 00 
2781   178F 00 00 00 00 
2781   1793 00 00 00 00 
2781   1797 00 00 00 00 
2781   179B 00 00 00 00 
2781   179F 00 00 00 00 
2781   17A3 00 00 00 00 
2781   17A7 00 00 00 00 
2781   17AB 00 00 00 00 
2781   17AF 00 00 00 00 
2781   17B3 00 00 00 00 
2781   17B7 00 00 00 00 
2781   17BB 00 00 00 00 
2781   17BF 00 00 00 00 
2781   17C3 00 00 00 00 
2781   17C7 00 00 00 00 
2781   17CB 00 00 00 00 
2781   17CF 00 00 00 00 
2781   17D3 00 00 00 00 
2781   17D7 00 00 00 00 
2781   17DB 00 00 00 00 
2781   17DF 00 00 00 00 
2781   17E3 00 00 00 00 
2781   17E7 00 00 00 00 
2781   17EB 00 00 00 00 
2781   17EF 00 00 00 00 
2781   17F3 00 00 00 00 
2781   17F7 00 00 00 00 
2781   17FB 00 00 00 00 
2781   17FF 00 00 00 00 
2781   1803 00 00 00 00 
2781   1807 00 00 00 00 
2781   180B 00 00 00 00 
2781   180F 00 00 00 00 
2781   1813 00 00 00 00 
2781   1817 00 00 00 00 
2781   181B 00 00 00 00 
2781   181F 00 00 00 00 
2781   1823 00 00 00 00 
2781   1827 00 00 00 00 
2781   182B 00 00 00 00 
2781   182F 00 00 00 00 
2781   1833 00 00 00 00 
2781   1837 00 00 00 00 
2781   183B 00 00 00 00 
2781   183F 00 00 00 00 
2781   1843 00 00 00 00 
2781   1847 00 00 00 00 
2781   184B 00 00 00 00 
2781   184F 00 00 00 00 
2781   1853 00 00 00 00 
2781   1857 00 00 00 00 
2781   185B 00 00 00 00 
2781   185F 00 00 00 00 
2781   1863 00 00 00 00 
2781   1867 00 00 00 00 
2781   186B 00 00 00 00 
2781   186F 00 00 00 00 
2781   1873 00 00 00 00 
2781   1877 00 00 00 00 
2781   187B 00 00 00 00 
2781   187F 00 00 00 00 
2781   1883 00 00 00 00 
2781   1887 00 00 00 00 
2781   188B 00 00 00 00 
2781   188F 00 00 00 00 
2781   1893 00 00 00 00 
2781   1897 00 00 00 00 
2781   189B 00 00 00 00 
2781   189F 00 00 00 00 
2781   18A3 00 00 00 00 
2781   18A7 00 00 00 00 
2781   18AB 00 00 00 00 
2781   18AF 00 00 00 00 
2781   18B3 00 00 00 00 
2781   18B7 00 00 00 00 
2781   18BB 00 00 00 00 
2781   18BF 00 00 00 00 
2781   18C3 00 00 00 00 
2781   18C7 00 00 00 00 
2781   18CB 00 00 00 00 
2781   18CF 00 00 00 00 
2781   18D3 00 00 00 00 
2781   18D7 00 00 00 00 
2781   18DB 00 00 00 00 
2781   18DF 00 00 00 00 
2781   18E3 00 00 00 00 
2781   18E7 00 00 00 00 
2781   18EB 00 00 00 00 
2781   18EF 00 00 00 00 
2781   18F3 00 00 00 00 
2781   18F7 00 00 00 00 
2781   18FB 00 00 00 00 
2781   18FF 00 00 00 00 
2781   1903 00 00 00 00 
2781   1907 00 00 00 00 
2781   190B 00 00 00 00 
2781   190F 00 00 00 00 
2781   1913 00 00 00 00 
2781   1917 00 00 00 00 
2781   191B 00 00 00 00 
2781   191F 00 00 00 00 
2781   1923 00 00 00 00 
2781   1927 00 00 00 00 
2781   192B 00 00 00 00 
2781   192F 00 00 00 00 
2781   1933 00 00 00 00 
2781   1937 00 00 00 00 
2781   193B 00 00 00 00 
2781   193F 00 00 00 00 
2781   1943 00 00 00 00 
2781   1947 00 00 00 00 
2781   194B 00 00 00 00 
2781   194F 00 00 00 00 
2781   1953 00 00 00 00 
2781   1957 00 00 00 00 
2781   195B 00 00 00 00 
2781   195F 00 00 00 00 
2781   1963 00 00 00 00 
2781   1967 00 00 00 00 
2781   196B 00 00 00 00 
2781   196F 00 00 00 00 
2781   1973 00 00 00 00 
2781   1977 00 00 00 00 
2781   197B 00 00 00 00 
2781   197F 00 00 00 00 
2781   1983 00 00 00 00 
2781   1987 00 00 00 00 
2781   198B 00 00 00 00 
2781   198F 00 00 00 00 
2781   1993 00 00 00 00 
2781   1997 00 00 00 00 
2781   199B 00 00 00 00 
2781   199F 00 00 00 00 
2781   19A3 00 00 00 00 
2781   19A7 00 00 00 00 
2781   19AB 00 00 00 00 
2781   19AF 00 00 00 00 
2781   19B3 00 00 00 00 
2781   19B7 00 00 00 00 
2781   19BB 00 00 00 00 
2781   19BF 00 00 00 00 
2781   19C3 00 00 00 00 
2781   19C7 00 00 00 00 
2781   19CB 00 00 00 00 
2781   19CF 00 00 00 00 
2781   19D3 00 00 00 00 
2781   19D7 00 00 00 00 
2781   19DB 00 00 00 00 
2781   19DF 00 00 00 00 
2781   19E3 00 00 00 00 
2781   19E7 00 00 00 00 
2781   19EB 00 00 00 00 
2781   19EF 00 00 00 00 
2781   19F3 00 00 00 00 
2781   19F7 00 00 00 00 
2781   19FB 00 00 00 00 
2781   19FF 00 00 00 00 
2781   1A03 00 00 00 00 
2781   1A07 00 00 00 00 
2781   1A0B 00 00 00 00 
2781   1A0F 00 00 00 00 
2781   1A13 00 00 00 00 
2781   1A17 00 00 00 00 
2781   1A1B 00 00 00 00 
2781   1A1F 00 00 00 00 
2781   1A23 00 00 00 00 
2781   1A27 00 00 00 00 
2781   1A2B 00 00 00 00 
2781   1A2F 00 00 00 00 
2781   1A33 00 00 00 00 
2781   1A37 00 00 00 00 
2781   1A3B 00 00 00 00 
2781   1A3F 00 00 00 00 
2781   1A43 00 00 00 00 
2781   1A47 00 00 00 00 
2781   1A4B 00 00 00 00 
2781   1A4F 00 00 00 00 
2781   1A53 00 00 00 00 
2781   1A57 00 00 00 00 
2781   1A5B 00 00 00 00 
2781   1A5F 00 00 00 00 
2781   1A63 00 00 00 00 
2781   1A67 00 00 00 00 
2781   1A6B 00 00 00 00 
2781   1A6F 00 00 00 00 
2781   1A73 00 00 00 00 
2781   1A77 00 00 00 00 
2781   1A7B 00 00 00 00 
2781   1A7F 00 00 00 00 
2781   1A83 00 00 00 00 
2781   1A87 00 00 00 00 
2781   1A8B 00 00 00 00 
2781   1A8F 00 00 00 00 
2781   1A93 00 00 00 00 
2781   1A97 00 00 00 00 
2781   1A9B 00 00 00 00 
2781   1A9F 00 00 00 00 
2781   1AA3 00 00 00 00 
2781   1AA7 00 00 00 00 
2781   1AAB 00 00 00 00 
2781   1AAF 00 00 00 00 
2781   1AB3 00 00 00 00 
2781   1AB7 00 00 00 00 
2781   1ABB 00 00 00 00 
2781   1ABF 00 00 00 00 
2781   1AC3 00 00 00 00 
2781   1AC7 00 00 00 00 
2781   1ACB 00 00 00 00 
2781   1ACF 00 00 00 00 
2781   1AD3 00 00 00 00 
2781   1AD7 00 00 00 00 
2781   1ADB 00 00 00 00 
2781   1ADF 00 00 00 00 
2781   1AE3 00 00 00 00 
2781   1AE7 00 00 00 00 
2781   1AEB 00 00 00 00 
2781   1AEF 00 00 00 00 
2781   1AF3 00 00 00 00 
2781   1AF7 00 00 00 00 
2781   1AFB 00 00 00 00 
2781   1AFF 00 00 00 00 
2781   1B03 00 00 00 00 
2781   1B07 00 00 00 00 
2781   1B0B 00 00 00 00 
2781   1B0F 00 00 00 00 
2781   1B13 00 00 00 00 
2781   1B17 00 00 00 00 
2781   1B1B 00 00 00 00 
2781   1B1F 00 00 00 00 
2781   1B23 00 00 00 00 
2781   1B27 00 00 00 00 
2781   1B2B 00 00 00 00 
2781   1B2F 00 00 00 00 
2781   1B33 00 00 00 00 
2781   1B37 00 00 00 00 
2781   1B3B 00 00 00 00 
2782   1B3F             _currState_data: 
2783   1B3F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2783   1B43 20 20 20 20 
2783   1B47 20 20 20 20 
2783   1B4B 20 20 20 20 
2783   1B4F 20 20 20 20 
2783   1B53 20 20 20 20 
2783   1B57 20 20 20 20 
2783   1B5B 20 20 
2784   1B5D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2784   1B61 20 20 20 20 
2784   1B65 20 20 20 20 
2784   1B69 20 20 20 20 
2784   1B6D 20 20 20 20 
2784   1B71 20 20 20 20 
2784   1B75 20 20 20 20 
2784   1B79 20 20 
2785   1B7B 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2785   1B7F 20 20 20 20 
2785   1B83 20 20 20 20 
2785   1B87 20 20 20 20 
2785   1B8B 20 20 20 20 
2785   1B8F 20 20 20 20 
2785   1B93 20 20 20 20 
2785   1B97 20 20 
2786   1B99 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2786   1B9D 20 20 20 20 
2786   1BA1 20 20 20 20 
2786   1BA5 20 20 20 20 
2786   1BA9 20 20 20 20 
2786   1BAD 20 20 20 20 
2786   1BB1 20 20 20 20 
2786   1BB5 20 20 
2787   1BB7 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,
2787   1BBB 20 20 20 20 
2787   1BBF 20 20 20 20 
2787   1BC3 20 20 20 20 
2787   1BC7 20 20 20 20 
2787   1BCB 20 20 20 20 
2787   1BCF 20 20 20 40 
2787   1BD3 20 20 
2788   1BD5 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2788   1BD9 20 20 20 20 
2788   1BDD 20 20 20 20 
2788   1BE1 20 20 20 20 
2788   1BE5 20 20 20 20 
2788   1BE9 20 20 20 20 
2788   1BED 20 20 20 20 
2788   1BF1 20 20 
2789   1BF3 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2789   1BF7 20 40 20 40 
2789   1BFB 20 20 20 20 
2789   1BFF 20 20 20 20 
2789   1C03 20 20 20 20 
2789   1C07 20 20 20 20 
2789   1C0B 20 20 20 20 
2789   1C0F 20 20 
2790   1C11 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,
2790   1C15 20 40 40 20 
2790   1C19 20 20 20 20 
2790   1C1D 20 40 40 20 
2790   1C21 20 20 20 20 
2790   1C25 20 20 20 20 
2790   1C29 20 20 20 40 
2790   1C2D 40 20 
2791   1C2F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,
2791   1C33 20 20 20 20 
2791   1C37 20 20 20 20 
2791   1C3B 20 20 40 20 
2791   1C3F 20 20 40 20 
2791   1C43 20 20 20 40 
2791   1C47 40 20 20 20 
2791   1C4B 20 20 
2792   1C4D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,
2792   1C51 20 20 20 40 
2792   1C55 40 20 20 20 
2792   1C59 20 40 40 20 
2792   1C5D 20 20 20 20 
2792   1C61 20 20 20 40 
2792   1C65 20 20 20 20 
2792   1C69 20 40 
2793   1C6B 20 20 20 40 .db $20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,
2793   1C6F 40 20 20 20 
2793   1C73 20 20 20 20 
2793   1C77 20 20 20 20 
2793   1C7B 20 20 20 20 
2793   1C7F 20 20 20 40 
2793   1C83 40 20 20 20 
2793   1C87 20 20 
2794   1C89 20 20 20 40 .db $20,$20,$20,$40,$20,$20,$20,$40,$20,$40,$40,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2794   1C8D 20 20 20 40 
2794   1C91 20 40 40 20 
2794   1C95 20 20 20 40 
2794   1C99 20 40 20 20 
2794   1C9D 20 20 20 20 
2794   1CA1 20 20 20 20 
2794   1CA5 20 20 
2795   1CA7 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,
2795   1CAB 20 20 20 20 
2795   1CAF 20 20 20 20 
2795   1CB3 20 40 20 20 
2795   1CB7 20 20 20 40 
2795   1CBB 20 20 20 20 
2795   1CBF 20 20 20 40 
2795   1CC3 20 20 
2796   1CC5 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$40,$20,
2796   1CC9 20 20 20 20 
2796   1CCD 20 20 20 20 
2796   1CD1 20 20 20 20 
2796   1CD5 20 20 20 20 
2796   1CD9 20 20 20 20 
2796   1CDD 40 20 20 20 
2796   1CE1 40 20 
2797   1CE3 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2797   1CE7 20 20 20 20 
2797   1CEB 20 20 20 20 
2797   1CEF 20 20 20 20 
2797   1CF3 20 20 20 20 
2797   1CF7 20 20 20 20 
2797   1CFB 20 20 20 20 
2797   1CFF 20 20 
2798   1D01 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2798   1D05 20 40 40 20 
2798   1D09 20 20 20 20 
2798   1D0D 20 20 20 20 
2798   1D11 20 20 20 20 
2798   1D15 20 20 20 20 
2798   1D19 20 20 20 20 
2798   1D1D 20 20 
2799   1D1F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2799   1D23 20 20 20 20 
2799   1D27 20 20 20 20 
2799   1D2B 20 20 20 20 
2799   1D2F 20 20 20 20 
2799   1D33 20 20 20 20 
2799   1D37 20 20 20 20 
2799   1D3B 20 20 
2800   1D3D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2800   1D41 20 20 20 20 
2800   1D45 20 20 20 20 
2800   1D49 20 20 20 20 
2800   1D4D 20 20 20 20 
2800   1D51 20 20 20 20 
2800   1D55 20 20 20 20 
2800   1D59 20 20 
2801   1D5B 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2801   1D5F 20 20 20 20 
2801   1D63 20 20 20 20 
2801   1D67 20 20 20 20 
2801   1D6B 20 20 20 20 
2801   1D6F 20 20 20 20 
2801   1D73 20 20 20 20 
2801   1D77 20 20 
2802   1D79 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2802   1D7D 20 20 20 20 
2802   1D81 20 20 20 20 
2802   1D85 20 20 20 20 
2802   1D89 20 20 20 20 
2802   1D8D 20 20 20 20 
2802   1D91 20 20 20 20 
2802   1D95 20 20 
2803   1D97 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2803   1D9B 20 20 20 20 
2803   1D9F 20 20 20 20 
2803   1DA3 20 20 20 20 
2803   1DA7 20 20 20 20 
2803   1DAB 20 20 20 20 
2803   1DAF 20 20 20 20 
2803   1DB3 20 20 
2804   1DB5 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2804   1DB9 20 20 20 20 
2804   1DBD 20 20 20 20 
2804   1DC1 20 20 20 20 
2804   1DC5 20 20 20 20 
2804   1DC9 20 20 20 20 
2804   1DCD 20 20 20 20 
2804   1DD1 20 20 
2805   1DD3 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2805   1DD7 20 20 20 20 
2805   1DDB 20 20 20 20 
2805   1DDF 20 20 20 20 
2805   1DE3 20 20 20 20 
2805   1DE7 20 20 20 20 
2805   1DEB 20 20 20 20 
2805   1DEF 20 20 
2806   1DF1 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2806   1DF5 20 20 20 20 
2806   1DF9 20 20 20 20 
2806   1DFD 20 20 20 20 
2806   1E01 20 20 20 20 
2806   1E05 20 20 20 20 
2806   1E09 20 20 20 20 
2806   1E0D 20 20 
2807   1E0F 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2807   1E13 20 20 20 20 
2807   1E17 20 20 20 20 
2807   1E1B 20 20 20 20 
2807   1E1F 20 20 20 20 
2807   1E23 20 20 20 20 
2807   1E27 20 20 20 20 
2807   1E2B 20 20 
2808   1E2D 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2808   1E31 20 20 20 20 
2808   1E35 20 20 20 20 
2808   1E39 20 20 20 20 
2808   1E3D 20 20 20 20 
2808   1E41 20 20 20 20 
2808   1E45 20 20 20 20 
2808   1E49 20 20 
2809   1E4B 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
2809   1E4F 20 20 20 20 
2809   1E53 20 20 20 20 
2809   1E57 20 20 20 20 
2809   1E5B 20 20 20 20 
2810   1E5F 00 00 00 00 .fill 400, 0
2810   1E63 00 00 00 00 
2810   1E67 00 00 00 00 
2810   1E6B 00 00 00 00 
2810   1E6F 00 00 00 00 
2810   1E73 00 00 00 00 
2810   1E77 00 00 00 00 
2810   1E7B 00 00 00 00 
2810   1E7F 00 00 00 00 
2810   1E83 00 00 00 00 
2810   1E87 00 00 00 00 
2810   1E8B 00 00 00 00 
2810   1E8F 00 00 00 00 
2810   1E93 00 00 00 00 
2810   1E97 00 00 00 00 
2810   1E9B 00 00 00 00 
2810   1E9F 00 00 00 00 
2810   1EA3 00 00 00 00 
2810   1EA7 00 00 00 00 
2810   1EAB 00 00 00 00 
2810   1EAF 00 00 00 00 
2810   1EB3 00 00 00 00 
2810   1EB7 00 00 00 00 
2810   1EBB 00 00 00 00 
2810   1EBF 00 00 00 00 
2810   1EC3 00 00 00 00 
2810   1EC7 00 00 00 00 
2810   1ECB 00 00 00 00 
2810   1ECF 00 00 00 00 
2810   1ED3 00 00 00 00 
2810   1ED7 00 00 00 00 
2810   1EDB 00 00 00 00 
2810   1EDF 00 00 00 00 
2810   1EE3 00 00 00 00 
2810   1EE7 00 00 00 00 
2810   1EEB 00 00 00 00 
2810   1EEF 00 00 00 00 
2810   1EF3 00 00 00 00 
2810   1EF7 00 00 00 00 
2810   1EFB 00 00 00 00 
2810   1EFF 00 00 00 00 
2810   1F03 00 00 00 00 
2810   1F07 00 00 00 00 
2810   1F0B 00 00 00 00 
2810   1F0F 00 00 00 00 
2810   1F13 00 00 00 00 
2810   1F17 00 00 00 00 
2810   1F1B 00 00 00 00 
2810   1F1F 00 00 00 00 
2810   1F23 00 00 00 00 
2810   1F27 00 00 00 00 
2810   1F2B 00 00 00 00 
2810   1F2F 00 00 00 00 
2810   1F33 00 00 00 00 
2810   1F37 00 00 00 00 
2810   1F3B 00 00 00 00 
2810   1F3F 00 00 00 00 
2810   1F43 00 00 00 00 
2810   1F47 00 00 00 00 
2810   1F4B 00 00 00 00 
2810   1F4F 00 00 00 00 
2810   1F53 00 00 00 00 
2810   1F57 00 00 00 00 
2810   1F5B 00 00 00 00 
2810   1F5F 00 00 00 00 
2810   1F63 00 00 00 00 
2810   1F67 00 00 00 00 
2810   1F6B 00 00 00 00 
2810   1F6F 00 00 00 00 
2810   1F73 00 00 00 00 
2810   1F77 00 00 00 00 
2810   1F7B 00 00 00 00 
2810   1F7F 00 00 00 00 
2810   1F83 00 00 00 00 
2810   1F87 00 00 00 00 
2810   1F8B 00 00 00 00 
2810   1F8F 00 00 00 00 
2810   1F93 00 00 00 00 
2810   1F97 00 00 00 00 
2810   1F9B 00 00 00 00 
2810   1F9F 00 00 00 00 
2810   1FA3 00 00 00 00 
2810   1FA7 00 00 00 00 
2810   1FAB 00 00 00 00 
2810   1FAF 00 00 00 00 
2810   1FB3 00 00 00 00 
2810   1FB7 00 00 00 00 
2810   1FBB 00 00 00 00 
2810   1FBF 00 00 00 00 
2810   1FC3 00 00 00 00 
2810   1FC7 00 00 00 00 
2810   1FCB 00 00 00 00 
2810   1FCF 00 00 00 00 
2810   1FD3 00 00 00 00 
2810   1FD7 00 00 00 00 
2810   1FDB 00 00 00 00 
2810   1FDF 00 00 00 00 
2810   1FE3 00 00 00 00 
2810   1FE7 00 00 00 00 
2810   1FEB 00 00 00 00 
2811   1FEF 0A 0D 50 72 __s0: .db "\n\rPress CTRL+C to quit.\n\r", 0
2811   1FF3 65 73 73 20 
2811   1FF7 43 54 52 4C 
2811   1FFB 2B 43 20 74 
2811   1FFF 6F 20 71 75 
2811   2003 69 74 2E 0A 
2811   2007 0D 00 
2812   2009 45 72 72 6F __s1: .db "Error: Unknown argument type.\n", 0
2812   200D 72 3A 20 55 
2812   2011 6E 6B 6E 6F 
2812   2015 77 6E 20 61 
2812   2019 72 67 75 6D 
2812   201D 65 6E 74 20 
2812   2021 74 79 70 65 
2812   2025 2E 0A 00 
2813   2028 1B 5B 32 4A __s2: .db "\033[2J\033[H", 0
2813   202C 1B 5B 48 00 
2814   2030 0A 00       __s3: .db "\n", 0
2815   2032 40 20 00    __s4: .db "@ ", 0
2816   2035 2E 20 00    __s5: .db ". ", 0
2817   2038             
2818   2038 3A 20       _heap_top: .dw _heap
2819   203A 00          _heap: .db 0
2820   203B             ; --- END DATA BLOCK
2821   203B             
2822   203B             .end
tasm: Number of errors = 0
