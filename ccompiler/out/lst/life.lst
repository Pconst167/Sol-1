0001   0000             ; --- FILENAME: programs/life
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $i 
0011   0408             ; $j 
0012   0408             ; $n 
0013   0408 52 06 00      sub sp, 6
0014   040B             ;; for(i = 0; i <   30     ; i++){ 
0015   040B             _for1_init:
0016   040B FA FF FF      lea d, [bp + -1] ; $i
0017   040E DA            push d
0018   040F 26 00 00      mov b, $0
0019   0412 E7            pop d
0020   0413 FD 43         mov [d], b
0021   0415             _for1_cond:
0022   0415 FA FF FF      lea d, [bp + -1] ; $i
0023   0418 2A            mov b, [d]
0024   0419             ; START RELATIONAL
0025   0419 D7            push a
0026   041A 11            mov a, b
0027   041B 26 1E 00      mov b, $1e
0028   041E B0            cmp a, b
0029   041F FD 73         slt ; <= (signed)
0030   0421 E4            pop a
0031   0422             ; END RELATIONAL
0032   0422 C0 00 00      cmp b, 0
0033   0425 C6 98 04      je _for1_exit
0034   0428             _for1_block:
0035   0428             ;; for(j = 0; j <    40    ; j++){ 
0036   0428             _for2_init:
0037   0428 FA FD FF      lea d, [bp + -3] ; $j
0038   042B DA            push d
0039   042C 26 00 00      mov b, $0
0040   042F E7            pop d
0041   0430 FD 43         mov [d], b
0042   0432             _for2_cond:
0043   0432 FA FD FF      lea d, [bp + -3] ; $j
0044   0435 2A            mov b, [d]
0045   0436             ; START RELATIONAL
0046   0436 D7            push a
0047   0437 11            mov a, b
0048   0438 26 28 00      mov b, $28
0049   043B B0            cmp a, b
0050   043C FD 73         slt ; <= (signed)
0051   043E E4            pop a
0052   043F             ; END RELATIONAL
0053   043F C0 00 00      cmp b, 0
0054   0442 C6 88 04      je _for2_exit
0055   0445             _for2_block:
0056   0445             ;; nextState[i][j] = currState[i][j]; 
0057   0445 3B AA 22      mov d, _nextState_data ; $nextState
0058   0448 D7            push a
0059   0449 DA            push d
0060   044A FA FF FF      lea d, [bp + -1] ; $i
0061   044D 2A            mov b, [d]
0062   044E E7            pop d
0063   044F FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0064   0453 DA            push d
0065   0454 FA FD FF      lea d, [bp + -3] ; $j
0066   0457 2A            mov b, [d]
0067   0458 E7            pop d
0068   0459 5A            add d, b
0069   045A E4            pop a
0070   045B DA            push d
0071   045C 3B 5A 27      mov d, _currState_data ; $currState
0072   045F D7            push a
0073   0460 DA            push d
0074   0461 FA FF FF      lea d, [bp + -1] ; $i
0075   0464 2A            mov b, [d]
0076   0465 E7            pop d
0077   0466 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0078   046A DA            push d
0079   046B FA FD FF      lea d, [bp + -3] ; $j
0080   046E 2A            mov b, [d]
0081   046F E7            pop d
0082   0470 5A            add d, b
0083   0471 E4            pop a
0084   0472 32            mov bl, [d]
0085   0473 A7 00         mov bh, 0
0086   0475 E7            pop d
0087   0476 FD 3E         mov [d], bl
0088   0478             _for2_update:
0089   0478 FA FD FF      lea d, [bp + -3] ; $j
0090   047B 2A            mov b, [d]
0091   047C D8            push b
0092   047D FD 77         inc b
0093   047F FA FD FF      lea d, [bp + -3] ; $j
0094   0482 FD 43         mov [d], b
0095   0484 E5            pop b
0096   0485 0A 32 04      jmp _for2_cond
0097   0488             _for2_exit:
0098   0488             _for1_update:
0099   0488 FA FF FF      lea d, [bp + -1] ; $i
0100   048B 2A            mov b, [d]
0101   048C D8            push b
0102   048D FD 77         inc b
0103   048F FA FF FF      lea d, [bp + -1] ; $i
0104   0492 FD 43         mov [d], b
0105   0494 E5            pop b
0106   0495 0A 15 04      jmp _for1_cond
0107   0498             _for1_exit:
0108   0498             ;; for(;;){ 
0109   0498             _for3_init:
0110   0498             _for3_cond:
0111   0498             _for3_block:
0112   0498             ;; for(i = 1; i <   30     +-1; i++){ 
0113   0498             _for4_init:
0114   0498 FA FF FF      lea d, [bp + -1] ; $i
0115   049B DA            push d
0116   049C 26 01 00      mov b, $1
0117   049F E7            pop d
0118   04A0 FD 43         mov [d], b
0119   04A2             _for4_cond:
0120   04A2 FA FF FF      lea d, [bp + -1] ; $i
0121   04A5 2A            mov b, [d]
0122   04A6             ; START RELATIONAL
0123   04A6 D7            push a
0124   04A7 11            mov a, b
0125   04A8 26 1E 00      mov b, $1e
0126   04AB             ; START TERMS
0127   04AB D7            push a
0128   04AC 11            mov a, b
0129   04AD 26 FF FF      mov b, $ffff
0130   04B0 56            add b, a
0131   04B1 E4            pop a
0132   04B2             ; END TERMS
0133   04B2 B0            cmp a, b
0134   04B3 FD 73         slt ; <= (signed)
0135   04B5 E4            pop a
0136   04B6             ; END RELATIONAL
0137   04B6 C0 00 00      cmp b, 0
0138   04B9 C6 82 05      je _for4_exit
0139   04BC             _for4_block:
0140   04BC             ;; for(j = 1; j <    40    +-1; j++){ 
0141   04BC             _for5_init:
0142   04BC FA FD FF      lea d, [bp + -3] ; $j
0143   04BF DA            push d
0144   04C0 26 01 00      mov b, $1
0145   04C3 E7            pop d
0146   04C4 FD 43         mov [d], b
0147   04C6             _for5_cond:
0148   04C6 FA FD FF      lea d, [bp + -3] ; $j
0149   04C9 2A            mov b, [d]
0150   04CA             ; START RELATIONAL
0151   04CA D7            push a
0152   04CB 11            mov a, b
0153   04CC 26 28 00      mov b, $28
0154   04CF             ; START TERMS
0155   04CF D7            push a
0156   04D0 11            mov a, b
0157   04D1 26 FF FF      mov b, $ffff
0158   04D4 56            add b, a
0159   04D5 E4            pop a
0160   04D6             ; END TERMS
0161   04D6 B0            cmp a, b
0162   04D7 FD 73         slt ; <= (signed)
0163   04D9 E4            pop a
0164   04DA             ; END RELATIONAL
0165   04DA C0 00 00      cmp b, 0
0166   04DD C6 72 05      je _for5_exit
0167   04E0             _for5_block:
0168   04E0             ;; n = rand(); 
0169   04E0 FA FB FF      lea d, [bp + -5] ; $n
0170   04E3 DA            push d
0171   04E4 07 09 09      call rand
0172   04E7 E7            pop d
0173   04E8 FD 43         mov [d], b
0174   04EA             ;; if(n < 2 || n > 3) nextState[i][j] = ' '; 
0175   04EA             _if6_cond:
0176   04EA FA FB FF      lea d, [bp + -5] ; $n
0177   04ED 2A            mov b, [d]
0178   04EE             ; START RELATIONAL
0179   04EE D7            push a
0180   04EF 11            mov a, b
0181   04F0 26 02 00      mov b, $2
0182   04F3 B0            cmp a, b
0183   04F4 FD 73         slt ; <= (signed)
0184   04F6 E4            pop a
0185   04F7             ; END RELATIONAL
0186   04F7 D7            push a
0187   04F8 11            mov a, b
0188   04F9 FA FB FF      lea d, [bp + -5] ; $n
0189   04FC 2A            mov b, [d]
0190   04FD             ; START RELATIONAL
0191   04FD D7            push a
0192   04FE 11            mov a, b
0193   04FF 26 03 00      mov b, $3
0194   0502 B0            cmp a, b
0195   0503 FD 7F         sgt ; >
0196   0505 E4            pop a
0197   0506             ; END RELATIONAL
0198   0506 FD A8         sor a, b ; ||
0199   0508 E4            pop a
0200   0509 C0 00 00      cmp b, 0
0201   050C C6 2F 05      je _if6_else
0202   050F             _if6_true:
0203   050F             ;; nextState[i][j] = ' '; 
0204   050F 3B AA 22      mov d, _nextState_data ; $nextState
0205   0512 D7            push a
0206   0513 DA            push d
0207   0514 FA FF FF      lea d, [bp + -1] ; $i
0208   0517 2A            mov b, [d]
0209   0518 E7            pop d
0210   0519 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0211   051D DA            push d
0212   051E FA FD FF      lea d, [bp + -3] ; $j
0213   0521 2A            mov b, [d]
0214   0522 E7            pop d
0215   0523 5A            add d, b
0216   0524 E4            pop a
0217   0525 DA            push d
0218   0526 26 20 00      mov b, $20
0219   0529 E7            pop d
0220   052A FD 3E         mov [d], bl
0221   052C 0A 62 05      jmp _if6_exit
0222   052F             _if6_else:
0223   052F             ;; if(n == 3) nextState[i][j] = '@'; 
0224   052F             _if7_cond:
0225   052F FA FB FF      lea d, [bp + -5] ; $n
0226   0532 2A            mov b, [d]
0227   0533             ; START RELATIONAL
0228   0533 D7            push a
0229   0534 11            mov a, b
0230   0535 26 03 00      mov b, $3
0231   0538 B0            cmp a, b
0232   0539 FD 71         seq ; ==
0233   053B E4            pop a
0234   053C             ; END RELATIONAL
0235   053C C0 00 00      cmp b, 0
0236   053F C6 62 05      je _if7_exit
0237   0542             _if7_true:
0238   0542             ;; nextState[i][j] = '@'; 
0239   0542 3B AA 22      mov d, _nextState_data ; $nextState
0240   0545 D7            push a
0241   0546 DA            push d
0242   0547 FA FF FF      lea d, [bp + -1] ; $i
0243   054A 2A            mov b, [d]
0244   054B E7            pop d
0245   054C FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0246   0550 DA            push d
0247   0551 FA FD FF      lea d, [bp + -3] ; $j
0248   0554 2A            mov b, [d]
0249   0555 E7            pop d
0250   0556 5A            add d, b
0251   0557 E4            pop a
0252   0558 DA            push d
0253   0559 26 40 00      mov b, $40
0254   055C E7            pop d
0255   055D FD 3E         mov [d], bl
0256   055F 0A 62 05      jmp _if7_exit
0257   0562             _if7_exit:
0258   0562             _if6_exit:
0259   0562             _for5_update:
0260   0562 FA FD FF      lea d, [bp + -3] ; $j
0261   0565 2A            mov b, [d]
0262   0566 D8            push b
0263   0567 FD 77         inc b
0264   0569 FA FD FF      lea d, [bp + -3] ; $j
0265   056C FD 43         mov [d], b
0266   056E E5            pop b
0267   056F 0A C6 04      jmp _for5_cond
0268   0572             _for5_exit:
0269   0572             _for4_update:
0270   0572 FA FF FF      lea d, [bp + -1] ; $i
0271   0575 2A            mov b, [d]
0272   0576 D8            push b
0273   0577 FD 77         inc b
0274   0579 FA FF FF      lea d, [bp + -1] ; $i
0275   057C FD 43         mov [d], b
0276   057E E5            pop b
0277   057F 0A A2 04      jmp _for4_cond
0278   0582             _for4_exit:
0279   0582             ;; for(i = 1; i <   30     +-1; i++){ 
0280   0582             _for8_init:
0281   0582 FA FF FF      lea d, [bp + -1] ; $i
0282   0585 DA            push d
0283   0586 26 01 00      mov b, $1
0284   0589 E7            pop d
0285   058A FD 43         mov [d], b
0286   058C             _for8_cond:
0287   058C FA FF FF      lea d, [bp + -1] ; $i
0288   058F 2A            mov b, [d]
0289   0590             ; START RELATIONAL
0290   0590 D7            push a
0291   0591 11            mov a, b
0292   0592 26 1E 00      mov b, $1e
0293   0595             ; START TERMS
0294   0595 D7            push a
0295   0596 11            mov a, b
0296   0597 26 FF FF      mov b, $ffff
0297   059A 56            add b, a
0298   059B E4            pop a
0299   059C             ; END TERMS
0300   059C B0            cmp a, b
0301   059D FD 73         slt ; <= (signed)
0302   059F E4            pop a
0303   05A0             ; END RELATIONAL
0304   05A0 C0 00 00      cmp b, 0
0305   05A3 C6 1D 06      je _for8_exit
0306   05A6             _for8_block:
0307   05A6             ;; for(j = 1; j <    40    +-1; j++){ 
0308   05A6             _for9_init:
0309   05A6 FA FD FF      lea d, [bp + -3] ; $j
0310   05A9 DA            push d
0311   05AA 26 01 00      mov b, $1
0312   05AD E7            pop d
0313   05AE FD 43         mov [d], b
0314   05B0             _for9_cond:
0315   05B0 FA FD FF      lea d, [bp + -3] ; $j
0316   05B3 2A            mov b, [d]
0317   05B4             ; START RELATIONAL
0318   05B4 D7            push a
0319   05B5 11            mov a, b
0320   05B6 26 28 00      mov b, $28
0321   05B9             ; START TERMS
0322   05B9 D7            push a
0323   05BA 11            mov a, b
0324   05BB 26 FF FF      mov b, $ffff
0325   05BE 56            add b, a
0326   05BF E4            pop a
0327   05C0             ; END TERMS
0328   05C0 B0            cmp a, b
0329   05C1 FD 73         slt ; <= (signed)
0330   05C3 E4            pop a
0331   05C4             ; END RELATIONAL
0332   05C4 C0 00 00      cmp b, 0
0333   05C7 C6 0D 06      je _for9_exit
0334   05CA             _for9_block:
0335   05CA             ;; currState[i][j] = nextState[i][j]; 
0336   05CA 3B 5A 27      mov d, _currState_data ; $currState
0337   05CD D7            push a
0338   05CE DA            push d
0339   05CF FA FF FF      lea d, [bp + -1] ; $i
0340   05D2 2A            mov b, [d]
0341   05D3 E7            pop d
0342   05D4 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0343   05D8 DA            push d
0344   05D9 FA FD FF      lea d, [bp + -3] ; $j
0345   05DC 2A            mov b, [d]
0346   05DD E7            pop d
0347   05DE 5A            add d, b
0348   05DF E4            pop a
0349   05E0 DA            push d
0350   05E1 3B AA 22      mov d, _nextState_data ; $nextState
0351   05E4 D7            push a
0352   05E5 DA            push d
0353   05E6 FA FF FF      lea d, [bp + -1] ; $i
0354   05E9 2A            mov b, [d]
0355   05EA E7            pop d
0356   05EB FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
0357   05EF DA            push d
0358   05F0 FA FD FF      lea d, [bp + -3] ; $j
0359   05F3 2A            mov b, [d]
0360   05F4 E7            pop d
0361   05F5 5A            add d, b
0362   05F6 E4            pop a
0363   05F7 32            mov bl, [d]
0364   05F8 A7 00         mov bh, 0
0365   05FA E7            pop d
0366   05FB FD 3E         mov [d], bl
0367   05FD             _for9_update:
0368   05FD FA FD FF      lea d, [bp + -3] ; $j
0369   0600 2A            mov b, [d]
0370   0601 D8            push b
0371   0602 FD 77         inc b
0372   0604 FA FD FF      lea d, [bp + -3] ; $j
0373   0607 FD 43         mov [d], b
0374   0609 E5            pop b
0375   060A 0A B0 05      jmp _for9_cond
0376   060D             _for9_exit:
0377   060D             _for8_update:
0378   060D FA FF FF      lea d, [bp + -1] ; $i
0379   0610 2A            mov b, [d]
0380   0611 D8            push b
0381   0612 FD 77         inc b
0382   0614 FA FF FF      lea d, [bp + -1] ; $i
0383   0617 FD 43         mov [d], b
0384   0619 E5            pop b
0385   061A 0A 8C 05      jmp _for8_cond
0386   061D             _for8_exit:
0387   061D             ;; printf(clear); 
0388   061D 3B 9F 22      mov d, _clear_data ; $clear
0389   0620 2D            mov b, d
0390   0621 FD AB         swp b
0391   0623 D8            push b
0392   0624 07 DD 12      call printf
0393   0627             ;; show(); 
0394   0627 07 4F 1F      call show
0395   062A             ;; puts("\n\rPress CTRL+C to quit.\n\r"); 
0396   062A 26 0A 2C      mov b, __s0 ; "\n\rPress CTRL+C to quit.\n\r"
0397   062D FD AB         swp b
0398   062F D8            push b
0399   0630 07 02 1B      call puts
0400   0633 51 02 00      add sp, 2
0401   0636             _for3_update:
0402   0636 0A 98 04      jmp _for3_cond
0403   0639             _for3_exit:
0404   0639 05 0B         syscall sys_terminate_proc
0405   063B             
0406   063B             strcpy:
0407   063B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0408   063E             ; $psrc 
0409   063E             ; $pdest 
0410   063E 52 04 00      sub sp, 4
0411   0641             ;; psrc = src; 
0412   0641 FA FF FF      lea d, [bp + -1] ; $psrc
0413   0644 DA            push d
0414   0645 FA 07 00      lea d, [bp + 7] ; $src
0415   0648 2A            mov b, [d]
0416   0649 E7            pop d
0417   064A FD 43         mov [d], b
0418   064C             ;; pdest = dest; 
0419   064C FA FD FF      lea d, [bp + -3] ; $pdest
0420   064F DA            push d
0421   0650 FA 05 00      lea d, [bp + 5] ; $dest
0422   0653 2A            mov b, [d]
0423   0654 E7            pop d
0424   0655 FD 43         mov [d], b
0425   0657             ;; while(*psrc) *pdest++ = *psrc++; 
0426   0657             _while10_cond:
0427   0657 FA FF FF      lea d, [bp + -1] ; $psrc
0428   065A 2A            mov b, [d]
0429   065B 74            mov d, b
0430   065C 32            mov bl, [d]
0431   065D A7 00         mov bh, 0
0432   065F C0 00 00      cmp b, 0
0433   0662 C6 8A 06      je _while10_exit
0434   0665             _while10_block:
0435   0665             ;; *pdest++ = *psrc++; 
0436   0665 FA FD FF      lea d, [bp + -3] ; $pdest
0437   0668 2A            mov b, [d]
0438   0669 D8            push b
0439   066A FD 77         inc b
0440   066C FA FD FF      lea d, [bp + -3] ; $pdest
0441   066F FD 43         mov [d], b
0442   0671 E5            pop b
0443   0672 D8            push b
0444   0673 FA FF FF      lea d, [bp + -1] ; $psrc
0445   0676 2A            mov b, [d]
0446   0677 D8            push b
0447   0678 FD 77         inc b
0448   067A FA FF FF      lea d, [bp + -1] ; $psrc
0449   067D FD 43         mov [d], b
0450   067F E5            pop b
0451   0680 74            mov d, b
0452   0681 32            mov bl, [d]
0453   0682 A7 00         mov bh, 0
0454   0684 E7            pop d
0455   0685 FD 3E         mov [d], bl
0456   0687 0A 57 06      jmp _while10_cond
0457   068A             _while10_exit:
0458   068A             ;; *pdest = '\0'; 
0459   068A FA FD FF      lea d, [bp + -3] ; $pdest
0460   068D 2A            mov b, [d]
0461   068E D8            push b
0462   068F 26 00 00      mov b, $0
0463   0692 E7            pop d
0464   0693 FD 3E         mov [d], bl
0465   0695 F9            leave
0466   0696 09            ret
0467   0697             
0468   0697             strcmp:
0469   0697 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0470   069A             ;; while (*s1 && (*s1 == *s2)) { 
0471   069A             _while11_cond:
0472   069A FA 05 00      lea d, [bp + 5] ; $s1
0473   069D 2A            mov b, [d]
0474   069E 74            mov d, b
0475   069F 32            mov bl, [d]
0476   06A0 A7 00         mov bh, 0
0477   06A2 D7            push a
0478   06A3 11            mov a, b
0479   06A4 FA 05 00      lea d, [bp + 5] ; $s1
0480   06A7 2A            mov b, [d]
0481   06A8 74            mov d, b
0482   06A9 32            mov bl, [d]
0483   06AA A7 00         mov bh, 0
0484   06AC             ; START RELATIONAL
0485   06AC D7            push a
0486   06AD 11            mov a, b
0487   06AE FA 07 00      lea d, [bp + 7] ; $s2
0488   06B1 2A            mov b, [d]
0489   06B2 74            mov d, b
0490   06B3 32            mov bl, [d]
0491   06B4 A7 00         mov bh, 0
0492   06B6 B0            cmp a, b
0493   06B7 FD 71         seq ; ==
0494   06B9 E4            pop a
0495   06BA             ; END RELATIONAL
0496   06BA FD A7         sand a, b ; &&
0497   06BC E4            pop a
0498   06BD C0 00 00      cmp b, 0
0499   06C0 C6 E0 06      je _while11_exit
0500   06C3             _while11_block:
0501   06C3             ;; s1++; 
0502   06C3 FA 05 00      lea d, [bp + 5] ; $s1
0503   06C6 2A            mov b, [d]
0504   06C7 D8            push b
0505   06C8 FD 77         inc b
0506   06CA FA 05 00      lea d, [bp + 5] ; $s1
0507   06CD FD 43         mov [d], b
0508   06CF E5            pop b
0509   06D0             ;; s2++; 
0510   06D0 FA 07 00      lea d, [bp + 7] ; $s2
0511   06D3 2A            mov b, [d]
0512   06D4 D8            push b
0513   06D5 FD 77         inc b
0514   06D7 FA 07 00      lea d, [bp + 7] ; $s2
0515   06DA FD 43         mov [d], b
0516   06DC E5            pop b
0517   06DD 0A 9A 06      jmp _while11_cond
0518   06E0             _while11_exit:
0519   06E0             ;; return *s1 - *s2; 
0520   06E0 FA 05 00      lea d, [bp + 5] ; $s1
0521   06E3 2A            mov b, [d]
0522   06E4 74            mov d, b
0523   06E5 32            mov bl, [d]
0524   06E6 A7 00         mov bh, 0
0525   06E8             ; START TERMS
0526   06E8 D7            push a
0527   06E9 11            mov a, b
0528   06EA FA 07 00      lea d, [bp + 7] ; $s2
0529   06ED 2A            mov b, [d]
0530   06EE 74            mov d, b
0531   06EF 32            mov bl, [d]
0532   06F0 A7 00         mov bh, 0
0533   06F2 60            sub a, b
0534   06F3 27            mov b, a
0535   06F4 E4            pop a
0536   06F5             ; END TERMS
0537   06F5 F9            leave
0538   06F6 09            ret
0539   06F7             
0540   06F7             strcat:
0541   06F7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0542   06FA             ; $dest_len 
0543   06FA             ; $i 
0544   06FA 52 04 00      sub sp, 4
0545   06FD             ;; dest_len = strlen(dest); 
0546   06FD FA FF FF      lea d, [bp + -1] ; $dest_len
0547   0700 DA            push d
0548   0701 FA 05 00      lea d, [bp + 5] ; $dest
0549   0704 2A            mov b, [d]
0550   0705 FD AB         swp b
0551   0707 D8            push b
0552   0708 07 AA 07      call strlen
0553   070B 51 02 00      add sp, 2
0554   070E E7            pop d
0555   070F FD 43         mov [d], b
0556   0711             ;; for (i = 0; src[i] != 0; i=i+1) { 
0557   0711             _for12_init:
0558   0711 FA FD FF      lea d, [bp + -3] ; $i
0559   0714 DA            push d
0560   0715 26 00 00      mov b, $0
0561   0718 E7            pop d
0562   0719 FD 43         mov [d], b
0563   071B             _for12_cond:
0564   071B FA 07 00      lea d, [bp + 7] ; $src
0565   071E FD 2A         mov d, [d]
0566   0720 D7            push a
0567   0721 DA            push d
0568   0722 FA FD FF      lea d, [bp + -3] ; $i
0569   0725 2A            mov b, [d]
0570   0726 E7            pop d
0571   0727 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0572   072B E4            pop a
0573   072C 32            mov bl, [d]
0574   072D A7 00         mov bh, 0
0575   072F             ; START RELATIONAL
0576   072F D7            push a
0577   0730 11            mov a, b
0578   0731 26 00 00      mov b, $0
0579   0734 B0            cmp a, b
0580   0735 FD 72         sneq ; !=
0581   0737 E4            pop a
0582   0738             ; END RELATIONAL
0583   0738 C0 00 00      cmp b, 0
0584   073B C6 84 07      je _for12_exit
0585   073E             _for12_block:
0586   073E             ;; dest[dest_len + i] = src[i]; 
0587   073E FA 05 00      lea d, [bp + 5] ; $dest
0588   0741 FD 2A         mov d, [d]
0589   0743 D7            push a
0590   0744 DA            push d
0591   0745 FA FF FF      lea d, [bp + -1] ; $dest_len
0592   0748 2A            mov b, [d]
0593   0749             ; START TERMS
0594   0749 D7            push a
0595   074A 11            mov a, b
0596   074B FA FD FF      lea d, [bp + -3] ; $i
0597   074E 2A            mov b, [d]
0598   074F 56            add b, a
0599   0750 E4            pop a
0600   0751             ; END TERMS
0601   0751 E7            pop d
0602   0752 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0603   0756 E4            pop a
0604   0757 DA            push d
0605   0758 FA 07 00      lea d, [bp + 7] ; $src
0606   075B FD 2A         mov d, [d]
0607   075D D7            push a
0608   075E DA            push d
0609   075F FA FD FF      lea d, [bp + -3] ; $i
0610   0762 2A            mov b, [d]
0611   0763 E7            pop d
0612   0764 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0613   0768 E4            pop a
0614   0769 32            mov bl, [d]
0615   076A A7 00         mov bh, 0
0616   076C E7            pop d
0617   076D FD 3E         mov [d], bl
0618   076F             _for12_update:
0619   076F FA FD FF      lea d, [bp + -3] ; $i
0620   0772 DA            push d
0621   0773 FA FD FF      lea d, [bp + -3] ; $i
0622   0776 2A            mov b, [d]
0623   0777             ; START TERMS
0624   0777 D7            push a
0625   0778 11            mov a, b
0626   0779 26 01 00      mov b, $1
0627   077C 56            add b, a
0628   077D E4            pop a
0629   077E             ; END TERMS
0630   077E E7            pop d
0631   077F FD 43         mov [d], b
0632   0781 0A 1B 07      jmp _for12_cond
0633   0784             _for12_exit:
0634   0784             ;; dest[dest_len + i] = 0; 
0635   0784 FA 05 00      lea d, [bp + 5] ; $dest
0636   0787 FD 2A         mov d, [d]
0637   0789 D7            push a
0638   078A DA            push d
0639   078B FA FF FF      lea d, [bp + -1] ; $dest_len
0640   078E 2A            mov b, [d]
0641   078F             ; START TERMS
0642   078F D7            push a
0643   0790 11            mov a, b
0644   0791 FA FD FF      lea d, [bp + -3] ; $i
0645   0794 2A            mov b, [d]
0646   0795 56            add b, a
0647   0796 E4            pop a
0648   0797             ; END TERMS
0649   0797 E7            pop d
0650   0798 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0651   079C E4            pop a
0652   079D DA            push d
0653   079E 26 00 00      mov b, $0
0654   07A1 E7            pop d
0655   07A2 FD 3E         mov [d], bl
0656   07A4             ;; return dest; 
0657   07A4 FA 05 00      lea d, [bp + 5] ; $dest
0658   07A7 2A            mov b, [d]
0659   07A8 F9            leave
0660   07A9 09            ret
0661   07AA             
0662   07AA             strlen:
0663   07AA F8 00 00      enter 0 ; (push bp; mov bp, sp)
0664   07AD             ; $length 
0665   07AD 52 02 00      sub sp, 2
0666   07B0             ;; length = 0; 
0667   07B0 FA FF FF      lea d, [bp + -1] ; $length
0668   07B3 DA            push d
0669   07B4 26 00 00      mov b, $0
0670   07B7 E7            pop d
0671   07B8 FD 43         mov [d], b
0672   07BA             ;; while (str[length] != 0) { 
0673   07BA             _while13_cond:
0674   07BA FA 05 00      lea d, [bp + 5] ; $str
0675   07BD FD 2A         mov d, [d]
0676   07BF D7            push a
0677   07C0 DA            push d
0678   07C1 FA FF FF      lea d, [bp + -1] ; $length
0679   07C4 2A            mov b, [d]
0680   07C5 E7            pop d
0681   07C6 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0682   07CA E4            pop a
0683   07CB 32            mov bl, [d]
0684   07CC A7 00         mov bh, 0
0685   07CE             ; START RELATIONAL
0686   07CE D7            push a
0687   07CF 11            mov a, b
0688   07D0 26 00 00      mov b, $0
0689   07D3 B0            cmp a, b
0690   07D4 FD 72         sneq ; !=
0691   07D6 E4            pop a
0692   07D7             ; END RELATIONAL
0693   07D7 C0 00 00      cmp b, 0
0694   07DA C6 ED 07      je _while13_exit
0695   07DD             _while13_block:
0696   07DD             ;; length++; 
0697   07DD FA FF FF      lea d, [bp + -1] ; $length
0698   07E0 2A            mov b, [d]
0699   07E1 D8            push b
0700   07E2 FD 77         inc b
0701   07E4 FA FF FF      lea d, [bp + -1] ; $length
0702   07E7 FD 43         mov [d], b
0703   07E9 E5            pop b
0704   07EA 0A BA 07      jmp _while13_cond
0705   07ED             _while13_exit:
0706   07ED             ;; return length; 
0707   07ED FA FF FF      lea d, [bp + -1] ; $length
0708   07F0 2A            mov b, [d]
0709   07F1 F9            leave
0710   07F2 09            ret
0711   07F3             
0712   07F3             exit:
0713   07F3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0714   07F6             
0715   07F6             ; --- BEGIN INLINE ASM BLOCK
0716   07F6 05 0B         syscall sys_terminate_proc
0717   07F8             ; --- END INLINE ASM BLOCK
0718   07F8             
0719   07F8 F9            leave
0720   07F9 09            ret
0721   07FA             
0722   07FA             atoi:
0723   07FA F8 00 00      enter 0 ; (push bp; mov bp, sp)
0724   07FD             ; $result 
0725   07FD 10 00 00      mov a, $0
0726   0800 45 FF FF      mov [bp + -1], a
0727   0803             ; $sign 
0728   0803 10 01 00      mov a, $1
0729   0806 45 FD FF      mov [bp + -3], a
0730   0809 52 04 00      sub sp, 4
0731   080C             ;; while (*str == ' ') str++; 
0732   080C             _while14_cond:
0733   080C FA 05 00      lea d, [bp + 5] ; $str
0734   080F 2A            mov b, [d]
0735   0810 74            mov d, b
0736   0811 32            mov bl, [d]
0737   0812 A7 00         mov bh, 0
0738   0814             ; START RELATIONAL
0739   0814 D7            push a
0740   0815 11            mov a, b
0741   0816 26 20 00      mov b, $20
0742   0819 B0            cmp a, b
0743   081A FD 71         seq ; ==
0744   081C E4            pop a
0745   081D             ; END RELATIONAL
0746   081D C0 00 00      cmp b, 0
0747   0820 C6 33 08      je _while14_exit
0748   0823             _while14_block:
0749   0823             ;; str++; 
0750   0823 FA 05 00      lea d, [bp + 5] ; $str
0751   0826 2A            mov b, [d]
0752   0827 D8            push b
0753   0828 FD 77         inc b
0754   082A FA 05 00      lea d, [bp + 5] ; $str
0755   082D FD 43         mov [d], b
0756   082F E5            pop b
0757   0830 0A 0C 08      jmp _while14_cond
0758   0833             _while14_exit:
0759   0833             ;; if (*str == '-' || *str == '+') { 
0760   0833             _if15_cond:
0761   0833 FA 05 00      lea d, [bp + 5] ; $str
0762   0836 2A            mov b, [d]
0763   0837 74            mov d, b
0764   0838 32            mov bl, [d]
0765   0839 A7 00         mov bh, 0
0766   083B             ; START RELATIONAL
0767   083B D7            push a
0768   083C 11            mov a, b
0769   083D 26 2D 00      mov b, $2d
0770   0840 B0            cmp a, b
0771   0841 FD 71         seq ; ==
0772   0843 E4            pop a
0773   0844             ; END RELATIONAL
0774   0844 D7            push a
0775   0845 11            mov a, b
0776   0846 FA 05 00      lea d, [bp + 5] ; $str
0777   0849 2A            mov b, [d]
0778   084A 74            mov d, b
0779   084B 32            mov bl, [d]
0780   084C A7 00         mov bh, 0
0781   084E             ; START RELATIONAL
0782   084E D7            push a
0783   084F 11            mov a, b
0784   0850 26 2B 00      mov b, $2b
0785   0853 B0            cmp a, b
0786   0854 FD 71         seq ; ==
0787   0856 E4            pop a
0788   0857             ; END RELATIONAL
0789   0857 FD A8         sor a, b ; ||
0790   0859 E4            pop a
0791   085A C0 00 00      cmp b, 0
0792   085D C6 94 08      je _if15_exit
0793   0860             _if15_true:
0794   0860             ;; if (*str == '-') sign = -1; 
0795   0860             _if16_cond:
0796   0860 FA 05 00      lea d, [bp + 5] ; $str
0797   0863 2A            mov b, [d]
0798   0864 74            mov d, b
0799   0865 32            mov bl, [d]
0800   0866 A7 00         mov bh, 0
0801   0868             ; START RELATIONAL
0802   0868 D7            push a
0803   0869 11            mov a, b
0804   086A 26 2D 00      mov b, $2d
0805   086D B0            cmp a, b
0806   086E FD 71         seq ; ==
0807   0870 E4            pop a
0808   0871             ; END RELATIONAL
0809   0871 C0 00 00      cmp b, 0
0810   0874 C6 84 08      je _if16_exit
0811   0877             _if16_true:
0812   0877             ;; sign = -1; 
0813   0877 FA FD FF      lea d, [bp + -3] ; $sign
0814   087A DA            push d
0815   087B 26 FF FF      mov b, $ffff
0816   087E E7            pop d
0817   087F FD 43         mov [d], b
0818   0881 0A 84 08      jmp _if16_exit
0819   0884             _if16_exit:
0820   0884             ;; str++; 
0821   0884 FA 05 00      lea d, [bp + 5] ; $str
0822   0887 2A            mov b, [d]
0823   0888 D8            push b
0824   0889 FD 77         inc b
0825   088B FA 05 00      lea d, [bp + 5] ; $str
0826   088E FD 43         mov [d], b
0827   0890 E5            pop b
0828   0891 0A 94 08      jmp _if15_exit
0829   0894             _if15_exit:
0830   0894             ;; while (*str >= '0' && *str <= '9') { 
0831   0894             _while17_cond:
0832   0894 FA 05 00      lea d, [bp + 5] ; $str
0833   0897 2A            mov b, [d]
0834   0898 74            mov d, b
0835   0899 32            mov bl, [d]
0836   089A A7 00         mov bh, 0
0837   089C             ; START RELATIONAL
0838   089C D7            push a
0839   089D 11            mov a, b
0840   089E 26 30 00      mov b, $30
0841   08A1 B0            cmp a, b
0842   08A2 FD 82         sgeu ; >= (unsigned)
0843   08A4 E4            pop a
0844   08A5             ; END RELATIONAL
0845   08A5 D7            push a
0846   08A6 11            mov a, b
0847   08A7 FA 05 00      lea d, [bp + 5] ; $str
0848   08AA 2A            mov b, [d]
0849   08AB 74            mov d, b
0850   08AC 32            mov bl, [d]
0851   08AD A7 00         mov bh, 0
0852   08AF             ; START RELATIONAL
0853   08AF D7            push a
0854   08B0 11            mov a, b
0855   08B1 26 39 00      mov b, $39
0856   08B4 B0            cmp a, b
0857   08B5 FD 76         sleu ; <= (unsigned)
0858   08B7 E4            pop a
0859   08B8             ; END RELATIONAL
0860   08B8 FD A7         sand a, b ; &&
0861   08BA E4            pop a
0862   08BB C0 00 00      cmp b, 0
0863   08BE C6 F9 08      je _while17_exit
0864   08C1             _while17_block:
0865   08C1             ;; result = result * 10 + (*str - '0'); 
0866   08C1 FA FF FF      lea d, [bp + -1] ; $result
0867   08C4 DA            push d
0868   08C5 FA FF FF      lea d, [bp + -1] ; $result
0869   08C8 2A            mov b, [d]
0870   08C9             ; START FACTORS
0871   08C9 D7            push a
0872   08CA 11            mov a, b
0873   08CB 26 0A 00      mov b, $a
0874   08CE AC            mul a, b ; *
0875   08CF 11            mov a, b
0876   08D0 27            mov b, a
0877   08D1 E4            pop a
0878   08D2             ; END FACTORS
0879   08D2             ; START TERMS
0880   08D2 D7            push a
0881   08D3 11            mov a, b
0882   08D4 FA 05 00      lea d, [bp + 5] ; $str
0883   08D7 2A            mov b, [d]
0884   08D8 74            mov d, b
0885   08D9 32            mov bl, [d]
0886   08DA A7 00         mov bh, 0
0887   08DC             ; START TERMS
0888   08DC D7            push a
0889   08DD 11            mov a, b
0890   08DE 26 30 00      mov b, $30
0891   08E1 60            sub a, b
0892   08E2 27            mov b, a
0893   08E3 E4            pop a
0894   08E4             ; END TERMS
0895   08E4 56            add b, a
0896   08E5 E4            pop a
0897   08E6             ; END TERMS
0898   08E6 E7            pop d
0899   08E7 FD 43         mov [d], b
0900   08E9             ;; str++; 
0901   08E9 FA 05 00      lea d, [bp + 5] ; $str
0902   08EC 2A            mov b, [d]
0903   08ED D8            push b
0904   08EE FD 77         inc b
0905   08F0 FA 05 00      lea d, [bp + 5] ; $str
0906   08F3 FD 43         mov [d], b
0907   08F5 E5            pop b
0908   08F6 0A 94 08      jmp _while17_cond
0909   08F9             _while17_exit:
0910   08F9             ;; return sign * result; 
0911   08F9 FA FD FF      lea d, [bp + -3] ; $sign
0912   08FC 2A            mov b, [d]
0913   08FD             ; START FACTORS
0914   08FD D7            push a
0915   08FE 11            mov a, b
0916   08FF FA FF FF      lea d, [bp + -1] ; $result
0917   0902 2A            mov b, [d]
0918   0903 AC            mul a, b ; *
0919   0904 11            mov a, b
0920   0905 27            mov b, a
0921   0906 E4            pop a
0922   0907             ; END FACTORS
0923   0907 F9            leave
0924   0908 09            ret
0925   0909             
0926   0909             rand:
0927   0909 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0928   090C             ; $sec 
0929   090C 52 02 00      sub sp, 2
0930   090F             
0931   090F             ; --- BEGIN INLINE ASM BLOCK
0932   090F 19 00         mov al, 0
0933   0911 05 01         syscall sys_rtc					
0934   0913 1A            mov al, ah
0935   0914 FA FF FF      lea d, [bp + -1] ; $sec
0936   0917 1E            mov al, [d]
0937   0918 22 00         mov ah, 0
0938   091A             ; --- END INLINE ASM BLOCK
0939   091A             
0940   091A             ;; return sec; 
0941   091A FA FF FF      lea d, [bp + -1] ; $sec
0942   091D 2A            mov b, [d]
0943   091E F9            leave
0944   091F 09            ret
0945   0920             
0946   0920             srand:
0947   0920 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0948   0923 F9            leave
0949   0924 09            ret
0950   0925             
0951   0925             malloc:
0952   0925 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0953   0928 F9            leave
0954   0929 09            ret
0955   092A             
0956   092A             calloc:
0957   092A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0958   092D F9            leave
0959   092E 09            ret
0960   092F             
0961   092F             realloc:
0962   092F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0963   0932 F9            leave
0964   0933 09            ret
0965   0934             
0966   0934             alloc:
0967   0934 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0968   0937             ;; heap_top = heap_top + bytes; 
0969   0937 3B 6E 2C      mov d, _heap_top ; $heap_top
0970   093A DA            push d
0971   093B 3B 6E 2C      mov d, _heap_top ; $heap_top
0972   093E 2A            mov b, [d]
0973   093F             ; START TERMS
0974   093F D7            push a
0975   0940 11            mov a, b
0976   0941 FA 05 00      lea d, [bp + 5] ; $bytes
0977   0944 2A            mov b, [d]
0978   0945 56            add b, a
0979   0946 E4            pop a
0980   0947             ; END TERMS
0981   0947 E7            pop d
0982   0948 FD 43         mov [d], b
0983   094A             ;; return heap_top - bytes; 
0984   094A 3B 6E 2C      mov d, _heap_top ; $heap_top
0985   094D 2A            mov b, [d]
0986   094E             ; START TERMS
0987   094E D7            push a
0988   094F 11            mov a, b
0989   0950 FA 05 00      lea d, [bp + 5] ; $bytes
0990   0953 2A            mov b, [d]
0991   0954 60            sub a, b
0992   0955 27            mov b, a
0993   0956 E4            pop a
0994   0957             ; END TERMS
0995   0957 F9            leave
0996   0958 09            ret
0997   0959             
0998   0959             free:
0999   0959 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1000   095C             ;; return heap_top = heap_top - bytes; 
1001   095C 3B 6E 2C      mov d, _heap_top ; $heap_top
1002   095F DA            push d
1003   0960 3B 6E 2C      mov d, _heap_top ; $heap_top
1004   0963 2A            mov b, [d]
1005   0964             ; START TERMS
1006   0964 D7            push a
1007   0965 11            mov a, b
1008   0966 FA 05 00      lea d, [bp + 5] ; $bytes
1009   0969 2A            mov b, [d]
1010   096A 60            sub a, b
1011   096B 27            mov b, a
1012   096C E4            pop a
1013   096D             ; END TERMS
1014   096D E7            pop d
1015   096E FD 43         mov [d], b
1016   0970 F9            leave
1017   0971 09            ret
1018   0972             
1019   0972             base64_encode:
1020   0972 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1021   0975             ; $i 
1022   0975 10 00 00      mov a, $0
1023   0978 45 FF FF      mov [bp + -1], a
1024   097B             ; $j 
1025   097B 10 00 00      mov a, $0
1026   097E 45 FD FF      mov [bp + -3], a
1027   0981             ; $k 
1028   0981             ; $input_len 
1029   0981             ; $input_buffer 
1030   0981             ; $output_buffer 
1031   0981 52 0F 00      sub sp, 15
1032   0984             ;; input_len = strlen(input); 
1033   0984 FA F9 FF      lea d, [bp + -7] ; $input_len
1034   0987 DA            push d
1035   0988 FA 05 00      lea d, [bp + 5] ; $input
1036   098B 2A            mov b, [d]
1037   098C FD AB         swp b
1038   098E D8            push b
1039   098F 07 AA 07      call strlen
1040   0992 51 02 00      add sp, 2
1041   0995 E7            pop d
1042   0996 FD 43         mov [d], b
1043   0998             ;; while (input_len--) { 
1044   0998             _while18_cond:
1045   0998 FA F9 FF      lea d, [bp + -7] ; $input_len
1046   099B 2A            mov b, [d]
1047   099C D8            push b
1048   099D FD 7D         dec b
1049   099F FA F9 FF      lea d, [bp + -7] ; $input_len
1050   09A2 FD 43         mov [d], b
1051   09A4 E5            pop b
1052   09A5 C0 00 00      cmp b, 0
1053   09A8 C6 5C 0B      je _while18_exit
1054   09AB             _while18_block:
1055   09AB             ;; input_buffer[i++] = *(input++); 
1056   09AB FA F6 FF      lea d, [bp + -10] ; $input_buffer
1057   09AE D7            push a
1058   09AF DA            push d
1059   09B0 FA FF FF      lea d, [bp + -1] ; $i
1060   09B3 2A            mov b, [d]
1061   09B4 D8            push b
1062   09B5 FD 77         inc b
1063   09B7 FA FF FF      lea d, [bp + -1] ; $i
1064   09BA FD 43         mov [d], b
1065   09BC E5            pop b
1066   09BD E7            pop d
1067   09BE 5A            add d, b
1068   09BF E4            pop a
1069   09C0 DA            push d
1070   09C1 FA 05 00      lea d, [bp + 5] ; $input
1071   09C4 2A            mov b, [d]
1072   09C5 D8            push b
1073   09C6 FD 77         inc b
1074   09C8 FA 05 00      lea d, [bp + 5] ; $input
1075   09CB FD 43         mov [d], b
1076   09CD E5            pop b
1077   09CE 74            mov d, b
1078   09CF 32            mov bl, [d]
1079   09D0 A7 00         mov bh, 0
1080   09D2 E7            pop d
1081   09D3 FD 3E         mov [d], bl
1082   09D5             ;; if (i == 3) { 
1083   09D5             _if19_cond:
1084   09D5 FA FF FF      lea d, [bp + -1] ; $i
1085   09D8 2A            mov b, [d]
1086   09D9             ; START RELATIONAL
1087   09D9 D7            push a
1088   09DA 11            mov a, b
1089   09DB 26 03 00      mov b, $3
1090   09DE B0            cmp a, b
1091   09DF FD 71         seq ; ==
1092   09E1 E4            pop a
1093   09E2             ; END RELATIONAL
1094   09E2 C0 00 00      cmp b, 0
1095   09E5 C6 59 0B      je _if19_exit
1096   09E8             _if19_true:
1097   09E8             ;; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
1098   09E8 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1099   09EB D7            push a
1100   09EC DA            push d
1101   09ED 26 00 00      mov b, $0
1102   09F0 E7            pop d
1103   09F1 5A            add d, b
1104   09F2 E4            pop a
1105   09F3 DA            push d
1106   09F4 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1107   09F7 D7            push a
1108   09F8 DA            push d
1109   09F9 26 00 00      mov b, $0
1110   09FC E7            pop d
1111   09FD 5A            add d, b
1112   09FE E4            pop a
1113   09FF 32            mov bl, [d]
1114   0A00 A7 00         mov bh, 0
1115   0A02 D7            push a
1116   0A03 11            mov a, b
1117   0A04 26 FC 00      mov b, $fc
1118   0A07 86            and a, b ; &
1119   0A08 27            mov b, a
1120   0A09 E4            pop a
1121   0A0A             ; START SHIFT
1122   0A0A D7            push a
1123   0A0B 11            mov a, b
1124   0A0C 26 02 00      mov b, $2
1125   0A0F FD 39         mov c, b
1126   0A11 A5            ashr a, cl
1127   0A12 27            mov b, a
1128   0A13 E4            pop a
1129   0A14             ; END SHIFT
1130   0A14 E7            pop d
1131   0A15 FD 3E         mov [d], bl
1132   0A17             ;; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
1133   0A17 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1134   0A1A D7            push a
1135   0A1B DA            push d
1136   0A1C 26 01 00      mov b, $1
1137   0A1F E7            pop d
1138   0A20 5A            add d, b
1139   0A21 E4            pop a
1140   0A22 DA            push d
1141   0A23 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1142   0A26 D7            push a
1143   0A27 DA            push d
1144   0A28 26 00 00      mov b, $0
1145   0A2B E7            pop d
1146   0A2C 5A            add d, b
1147   0A2D E4            pop a
1148   0A2E 32            mov bl, [d]
1149   0A2F A7 00         mov bh, 0
1150   0A31 D7            push a
1151   0A32 11            mov a, b
1152   0A33 26 03 00      mov b, $3
1153   0A36 86            and a, b ; &
1154   0A37 27            mov b, a
1155   0A38 E4            pop a
1156   0A39             ; START SHIFT
1157   0A39 D7            push a
1158   0A3A 11            mov a, b
1159   0A3B 26 04 00      mov b, $4
1160   0A3E FD 39         mov c, b
1161   0A40 9D            shl a, cl
1162   0A41 27            mov b, a
1163   0A42 E4            pop a
1164   0A43             ; END SHIFT
1165   0A43             ; START TERMS
1166   0A43 D7            push a
1167   0A44 11            mov a, b
1168   0A45 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1169   0A48 D7            push a
1170   0A49 DA            push d
1171   0A4A 26 01 00      mov b, $1
1172   0A4D E7            pop d
1173   0A4E 5A            add d, b
1174   0A4F E4            pop a
1175   0A50 32            mov bl, [d]
1176   0A51 A7 00         mov bh, 0
1177   0A53 D7            push a
1178   0A54 11            mov a, b
1179   0A55 26 F0 00      mov b, $f0
1180   0A58 86            and a, b ; &
1181   0A59 27            mov b, a
1182   0A5A E4            pop a
1183   0A5B             ; START SHIFT
1184   0A5B D7            push a
1185   0A5C 11            mov a, b
1186   0A5D 26 04 00      mov b, $4
1187   0A60 FD 39         mov c, b
1188   0A62 A5            ashr a, cl
1189   0A63 27            mov b, a
1190   0A64 E4            pop a
1191   0A65             ; END SHIFT
1192   0A65 56            add b, a
1193   0A66 E4            pop a
1194   0A67             ; END TERMS
1195   0A67 E7            pop d
1196   0A68 FD 3E         mov [d], bl
1197   0A6A             ;; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
1198   0A6A FA F2 FF      lea d, [bp + -14] ; $output_buffer
1199   0A6D D7            push a
1200   0A6E DA            push d
1201   0A6F 26 02 00      mov b, $2
1202   0A72 E7            pop d
1203   0A73 5A            add d, b
1204   0A74 E4            pop a
1205   0A75 DA            push d
1206   0A76 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1207   0A79 D7            push a
1208   0A7A DA            push d
1209   0A7B 26 01 00      mov b, $1
1210   0A7E E7            pop d
1211   0A7F 5A            add d, b
1212   0A80 E4            pop a
1213   0A81 32            mov bl, [d]
1214   0A82 A7 00         mov bh, 0
1215   0A84 D7            push a
1216   0A85 11            mov a, b
1217   0A86 26 0F 00      mov b, $f
1218   0A89 86            and a, b ; &
1219   0A8A 27            mov b, a
1220   0A8B E4            pop a
1221   0A8C             ; START SHIFT
1222   0A8C D7            push a
1223   0A8D 11            mov a, b
1224   0A8E 26 02 00      mov b, $2
1225   0A91 FD 39         mov c, b
1226   0A93 9D            shl a, cl
1227   0A94 27            mov b, a
1228   0A95 E4            pop a
1229   0A96             ; END SHIFT
1230   0A96             ; START TERMS
1231   0A96 D7            push a
1232   0A97 11            mov a, b
1233   0A98 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1234   0A9B D7            push a
1235   0A9C DA            push d
1236   0A9D 26 02 00      mov b, $2
1237   0AA0 E7            pop d
1238   0AA1 5A            add d, b
1239   0AA2 E4            pop a
1240   0AA3 32            mov bl, [d]
1241   0AA4 A7 00         mov bh, 0
1242   0AA6 D7            push a
1243   0AA7 11            mov a, b
1244   0AA8 26 C0 00      mov b, $c0
1245   0AAB 86            and a, b ; &
1246   0AAC 27            mov b, a
1247   0AAD E4            pop a
1248   0AAE             ; START SHIFT
1249   0AAE D7            push a
1250   0AAF 11            mov a, b
1251   0AB0 26 06 00      mov b, $6
1252   0AB3 FD 39         mov c, b
1253   0AB5 A5            ashr a, cl
1254   0AB6 27            mov b, a
1255   0AB7 E4            pop a
1256   0AB8             ; END SHIFT
1257   0AB8 56            add b, a
1258   0AB9 E4            pop a
1259   0ABA             ; END TERMS
1260   0ABA E7            pop d
1261   0ABB FD 3E         mov [d], bl
1262   0ABD             ;; output_buffer[3] = input_buffer[2] & 0x3F; 
1263   0ABD FA F2 FF      lea d, [bp + -14] ; $output_buffer
1264   0AC0 D7            push a
1265   0AC1 DA            push d
1266   0AC2 26 03 00      mov b, $3
1267   0AC5 E7            pop d
1268   0AC6 5A            add d, b
1269   0AC7 E4            pop a
1270   0AC8 DA            push d
1271   0AC9 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1272   0ACC D7            push a
1273   0ACD DA            push d
1274   0ACE 26 02 00      mov b, $2
1275   0AD1 E7            pop d
1276   0AD2 5A            add d, b
1277   0AD3 E4            pop a
1278   0AD4 32            mov bl, [d]
1279   0AD5 A7 00         mov bh, 0
1280   0AD7 D7            push a
1281   0AD8 11            mov a, b
1282   0AD9 26 3F 00      mov b, $3f
1283   0ADC 86            and a, b ; &
1284   0ADD 27            mov b, a
1285   0ADE E4            pop a
1286   0ADF E7            pop d
1287   0AE0 FD 3E         mov [d], bl
1288   0AE2             ;; for (i = 0; i < 4; i++) { 
1289   0AE2             _for20_init:
1290   0AE2 FA FF FF      lea d, [bp + -1] ; $i
1291   0AE5 DA            push d
1292   0AE6 26 00 00      mov b, $0
1293   0AE9 E7            pop d
1294   0AEA FD 43         mov [d], b
1295   0AEC             _for20_cond:
1296   0AEC FA FF FF      lea d, [bp + -1] ; $i
1297   0AEF 2A            mov b, [d]
1298   0AF0             ; START RELATIONAL
1299   0AF0 D7            push a
1300   0AF1 11            mov a, b
1301   0AF2 26 04 00      mov b, $4
1302   0AF5 B0            cmp a, b
1303   0AF6 FD 73         slt ; <= (signed)
1304   0AF8 E4            pop a
1305   0AF9             ; END RELATIONAL
1306   0AF9 C0 00 00      cmp b, 0
1307   0AFC C6 4C 0B      je _for20_exit
1308   0AFF             _for20_block:
1309   0AFF             ;; output[j++] = base64_table[output_buffer[i]]; 
1310   0AFF FA 07 00      lea d, [bp + 7] ; $output
1311   0B02 FD 2A         mov d, [d]
1312   0B04 D7            push a
1313   0B05 DA            push d
1314   0B06 FA FD FF      lea d, [bp + -3] ; $j
1315   0B09 2A            mov b, [d]
1316   0B0A D8            push b
1317   0B0B FD 77         inc b
1318   0B0D FA FD FF      lea d, [bp + -3] ; $j
1319   0B10 FD 43         mov [d], b
1320   0B12 E5            pop b
1321   0B13 E7            pop d
1322   0B14 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1323   0B18 E4            pop a
1324   0B19 DA            push d
1325   0B1A 3B 9D 22      mov d, _base64_table ; $base64_table
1326   0B1D FD 2A         mov d, [d]
1327   0B1F D7            push a
1328   0B20 DA            push d
1329   0B21 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1330   0B24 D7            push a
1331   0B25 DA            push d
1332   0B26 FA FF FF      lea d, [bp + -1] ; $i
1333   0B29 2A            mov b, [d]
1334   0B2A E7            pop d
1335   0B2B 5A            add d, b
1336   0B2C E4            pop a
1337   0B2D 32            mov bl, [d]
1338   0B2E A7 00         mov bh, 0
1339   0B30 E7            pop d
1340   0B31 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1341   0B35 E4            pop a
1342   0B36 32            mov bl, [d]
1343   0B37 A7 00         mov bh, 0
1344   0B39 E7            pop d
1345   0B3A FD 3E         mov [d], bl
1346   0B3C             _for20_update:
1347   0B3C FA FF FF      lea d, [bp + -1] ; $i
1348   0B3F 2A            mov b, [d]
1349   0B40 D8            push b
1350   0B41 FD 77         inc b
1351   0B43 FA FF FF      lea d, [bp + -1] ; $i
1352   0B46 FD 43         mov [d], b
1353   0B48 E5            pop b
1354   0B49 0A EC 0A      jmp _for20_cond
1355   0B4C             _for20_exit:
1356   0B4C             ;; i = 0; 
1357   0B4C FA FF FF      lea d, [bp + -1] ; $i
1358   0B4F DA            push d
1359   0B50 26 00 00      mov b, $0
1360   0B53 E7            pop d
1361   0B54 FD 43         mov [d], b
1362   0B56 0A 59 0B      jmp _if19_exit
1363   0B59             _if19_exit:
1364   0B59 0A 98 09      jmp _while18_cond
1365   0B5C             _while18_exit:
1366   0B5C             ;; if (i) { 
1367   0B5C             _if21_cond:
1368   0B5C FA FF FF      lea d, [bp + -1] ; $i
1369   0B5F 2A            mov b, [d]
1370   0B60 C0 00 00      cmp b, 0
1371   0B63 C6 31 0D      je _if21_exit
1372   0B66             _if21_true:
1373   0B66             ;; for (k = i; k < 3; k++) { 
1374   0B66             _for22_init:
1375   0B66 FA FB FF      lea d, [bp + -5] ; $k
1376   0B69 DA            push d
1377   0B6A FA FF FF      lea d, [bp + -1] ; $i
1378   0B6D 2A            mov b, [d]
1379   0B6E E7            pop d
1380   0B6F FD 43         mov [d], b
1381   0B71             _for22_cond:
1382   0B71 FA FB FF      lea d, [bp + -5] ; $k
1383   0B74 2A            mov b, [d]
1384   0B75             ; START RELATIONAL
1385   0B75 D7            push a
1386   0B76 11            mov a, b
1387   0B77 26 03 00      mov b, $3
1388   0B7A B0            cmp a, b
1389   0B7B FD 73         slt ; <= (signed)
1390   0B7D E4            pop a
1391   0B7E             ; END RELATIONAL
1392   0B7E C0 00 00      cmp b, 0
1393   0B81 C6 A7 0B      je _for22_exit
1394   0B84             _for22_block:
1395   0B84             ;; input_buffer[k] = '\0'; 
1396   0B84 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1397   0B87 D7            push a
1398   0B88 DA            push d
1399   0B89 FA FB FF      lea d, [bp + -5] ; $k
1400   0B8C 2A            mov b, [d]
1401   0B8D E7            pop d
1402   0B8E 5A            add d, b
1403   0B8F E4            pop a
1404   0B90 DA            push d
1405   0B91 26 00 00      mov b, $0
1406   0B94 E7            pop d
1407   0B95 FD 3E         mov [d], bl
1408   0B97             _for22_update:
1409   0B97 FA FB FF      lea d, [bp + -5] ; $k
1410   0B9A 2A            mov b, [d]
1411   0B9B D8            push b
1412   0B9C FD 77         inc b
1413   0B9E FA FB FF      lea d, [bp + -5] ; $k
1414   0BA1 FD 43         mov [d], b
1415   0BA3 E5            pop b
1416   0BA4 0A 71 0B      jmp _for22_cond
1417   0BA7             _for22_exit:
1418   0BA7             ;; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
1419   0BA7 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1420   0BAA D7            push a
1421   0BAB DA            push d
1422   0BAC 26 00 00      mov b, $0
1423   0BAF E7            pop d
1424   0BB0 5A            add d, b
1425   0BB1 E4            pop a
1426   0BB2 DA            push d
1427   0BB3 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1428   0BB6 D7            push a
1429   0BB7 DA            push d
1430   0BB8 26 00 00      mov b, $0
1431   0BBB E7            pop d
1432   0BBC 5A            add d, b
1433   0BBD E4            pop a
1434   0BBE 32            mov bl, [d]
1435   0BBF A7 00         mov bh, 0
1436   0BC1 D7            push a
1437   0BC2 11            mov a, b
1438   0BC3 26 FC 00      mov b, $fc
1439   0BC6 86            and a, b ; &
1440   0BC7 27            mov b, a
1441   0BC8 E4            pop a
1442   0BC9             ; START SHIFT
1443   0BC9 D7            push a
1444   0BCA 11            mov a, b
1445   0BCB 26 02 00      mov b, $2
1446   0BCE FD 39         mov c, b
1447   0BD0 A5            ashr a, cl
1448   0BD1 27            mov b, a
1449   0BD2 E4            pop a
1450   0BD3             ; END SHIFT
1451   0BD3 E7            pop d
1452   0BD4 FD 3E         mov [d], bl
1453   0BD6             ;; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
1454   0BD6 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1455   0BD9 D7            push a
1456   0BDA DA            push d
1457   0BDB 26 01 00      mov b, $1
1458   0BDE E7            pop d
1459   0BDF 5A            add d, b
1460   0BE0 E4            pop a
1461   0BE1 DA            push d
1462   0BE2 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1463   0BE5 D7            push a
1464   0BE6 DA            push d
1465   0BE7 26 00 00      mov b, $0
1466   0BEA E7            pop d
1467   0BEB 5A            add d, b
1468   0BEC E4            pop a
1469   0BED 32            mov bl, [d]
1470   0BEE A7 00         mov bh, 0
1471   0BF0 D7            push a
1472   0BF1 11            mov a, b
1473   0BF2 26 03 00      mov b, $3
1474   0BF5 86            and a, b ; &
1475   0BF6 27            mov b, a
1476   0BF7 E4            pop a
1477   0BF8             ; START SHIFT
1478   0BF8 D7            push a
1479   0BF9 11            mov a, b
1480   0BFA 26 04 00      mov b, $4
1481   0BFD FD 39         mov c, b
1482   0BFF 9D            shl a, cl
1483   0C00 27            mov b, a
1484   0C01 E4            pop a
1485   0C02             ; END SHIFT
1486   0C02             ; START TERMS
1487   0C02 D7            push a
1488   0C03 11            mov a, b
1489   0C04 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1490   0C07 D7            push a
1491   0C08 DA            push d
1492   0C09 26 01 00      mov b, $1
1493   0C0C E7            pop d
1494   0C0D 5A            add d, b
1495   0C0E E4            pop a
1496   0C0F 32            mov bl, [d]
1497   0C10 A7 00         mov bh, 0
1498   0C12 D7            push a
1499   0C13 11            mov a, b
1500   0C14 26 F0 00      mov b, $f0
1501   0C17 86            and a, b ; &
1502   0C18 27            mov b, a
1503   0C19 E4            pop a
1504   0C1A             ; START SHIFT
1505   0C1A D7            push a
1506   0C1B 11            mov a, b
1507   0C1C 26 04 00      mov b, $4
1508   0C1F FD 39         mov c, b
1509   0C21 A5            ashr a, cl
1510   0C22 27            mov b, a
1511   0C23 E4            pop a
1512   0C24             ; END SHIFT
1513   0C24 56            add b, a
1514   0C25 E4            pop a
1515   0C26             ; END TERMS
1516   0C26 E7            pop d
1517   0C27 FD 3E         mov [d], bl
1518   0C29             ;; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
1519   0C29 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1520   0C2C D7            push a
1521   0C2D DA            push d
1522   0C2E 26 02 00      mov b, $2
1523   0C31 E7            pop d
1524   0C32 5A            add d, b
1525   0C33 E4            pop a
1526   0C34 DA            push d
1527   0C35 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1528   0C38 D7            push a
1529   0C39 DA            push d
1530   0C3A 26 01 00      mov b, $1
1531   0C3D E7            pop d
1532   0C3E 5A            add d, b
1533   0C3F E4            pop a
1534   0C40 32            mov bl, [d]
1535   0C41 A7 00         mov bh, 0
1536   0C43 D7            push a
1537   0C44 11            mov a, b
1538   0C45 26 0F 00      mov b, $f
1539   0C48 86            and a, b ; &
1540   0C49 27            mov b, a
1541   0C4A E4            pop a
1542   0C4B             ; START SHIFT
1543   0C4B D7            push a
1544   0C4C 11            mov a, b
1545   0C4D 26 02 00      mov b, $2
1546   0C50 FD 39         mov c, b
1547   0C52 9D            shl a, cl
1548   0C53 27            mov b, a
1549   0C54 E4            pop a
1550   0C55             ; END SHIFT
1551   0C55             ; START TERMS
1552   0C55 D7            push a
1553   0C56 11            mov a, b
1554   0C57 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1555   0C5A D7            push a
1556   0C5B DA            push d
1557   0C5C 26 02 00      mov b, $2
1558   0C5F E7            pop d
1559   0C60 5A            add d, b
1560   0C61 E4            pop a
1561   0C62 32            mov bl, [d]
1562   0C63 A7 00         mov bh, 0
1563   0C65 D7            push a
1564   0C66 11            mov a, b
1565   0C67 26 C0 00      mov b, $c0
1566   0C6A 86            and a, b ; &
1567   0C6B 27            mov b, a
1568   0C6C E4            pop a
1569   0C6D             ; START SHIFT
1570   0C6D D7            push a
1571   0C6E 11            mov a, b
1572   0C6F 26 06 00      mov b, $6
1573   0C72 FD 39         mov c, b
1574   0C74 A5            ashr a, cl
1575   0C75 27            mov b, a
1576   0C76 E4            pop a
1577   0C77             ; END SHIFT
1578   0C77 56            add b, a
1579   0C78 E4            pop a
1580   0C79             ; END TERMS
1581   0C79 E7            pop d
1582   0C7A FD 3E         mov [d], bl
1583   0C7C             ;; for (k = 0; k < i + 1; k++) { 
1584   0C7C             _for23_init:
1585   0C7C FA FB FF      lea d, [bp + -5] ; $k
1586   0C7F DA            push d
1587   0C80 26 00 00      mov b, $0
1588   0C83 E7            pop d
1589   0C84 FD 43         mov [d], b
1590   0C86             _for23_cond:
1591   0C86 FA FB FF      lea d, [bp + -5] ; $k
1592   0C89 2A            mov b, [d]
1593   0C8A             ; START RELATIONAL
1594   0C8A D7            push a
1595   0C8B 11            mov a, b
1596   0C8C FA FF FF      lea d, [bp + -1] ; $i
1597   0C8F 2A            mov b, [d]
1598   0C90             ; START TERMS
1599   0C90 D7            push a
1600   0C91 11            mov a, b
1601   0C92 26 01 00      mov b, $1
1602   0C95 56            add b, a
1603   0C96 E4            pop a
1604   0C97             ; END TERMS
1605   0C97 B0            cmp a, b
1606   0C98 FD 73         slt ; <= (signed)
1607   0C9A E4            pop a
1608   0C9B             ; END RELATIONAL
1609   0C9B C0 00 00      cmp b, 0
1610   0C9E C6 EE 0C      je _for23_exit
1611   0CA1             _for23_block:
1612   0CA1             ;; output[j++] = base64_table[output_buffer[k]]; 
1613   0CA1 FA 07 00      lea d, [bp + 7] ; $output
1614   0CA4 FD 2A         mov d, [d]
1615   0CA6 D7            push a
1616   0CA7 DA            push d
1617   0CA8 FA FD FF      lea d, [bp + -3] ; $j
1618   0CAB 2A            mov b, [d]
1619   0CAC D8            push b
1620   0CAD FD 77         inc b
1621   0CAF FA FD FF      lea d, [bp + -3] ; $j
1622   0CB2 FD 43         mov [d], b
1623   0CB4 E5            pop b
1624   0CB5 E7            pop d
1625   0CB6 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1626   0CBA E4            pop a
1627   0CBB DA            push d
1628   0CBC 3B 9D 22      mov d, _base64_table ; $base64_table
1629   0CBF FD 2A         mov d, [d]
1630   0CC1 D7            push a
1631   0CC2 DA            push d
1632   0CC3 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1633   0CC6 D7            push a
1634   0CC7 DA            push d
1635   0CC8 FA FB FF      lea d, [bp + -5] ; $k
1636   0CCB 2A            mov b, [d]
1637   0CCC E7            pop d
1638   0CCD 5A            add d, b
1639   0CCE E4            pop a
1640   0CCF 32            mov bl, [d]
1641   0CD0 A7 00         mov bh, 0
1642   0CD2 E7            pop d
1643   0CD3 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1644   0CD7 E4            pop a
1645   0CD8 32            mov bl, [d]
1646   0CD9 A7 00         mov bh, 0
1647   0CDB E7            pop d
1648   0CDC FD 3E         mov [d], bl
1649   0CDE             _for23_update:
1650   0CDE FA FB FF      lea d, [bp + -5] ; $k
1651   0CE1 2A            mov b, [d]
1652   0CE2 D8            push b
1653   0CE3 FD 77         inc b
1654   0CE5 FA FB FF      lea d, [bp + -5] ; $k
1655   0CE8 FD 43         mov [d], b
1656   0CEA E5            pop b
1657   0CEB 0A 86 0C      jmp _for23_cond
1658   0CEE             _for23_exit:
1659   0CEE             ;; while (i++ < 3) { 
1660   0CEE             _while24_cond:
1661   0CEE FA FF FF      lea d, [bp + -1] ; $i
1662   0CF1 2A            mov b, [d]
1663   0CF2 D8            push b
1664   0CF3 FD 77         inc b
1665   0CF5 FA FF FF      lea d, [bp + -1] ; $i
1666   0CF8 FD 43         mov [d], b
1667   0CFA E5            pop b
1668   0CFB             ; START RELATIONAL
1669   0CFB D7            push a
1670   0CFC 11            mov a, b
1671   0CFD 26 03 00      mov b, $3
1672   0D00 B0            cmp a, b
1673   0D01 FD 73         slt ; <= (signed)
1674   0D03 E4            pop a
1675   0D04             ; END RELATIONAL
1676   0D04 C0 00 00      cmp b, 0
1677   0D07 C6 2E 0D      je _while24_exit
1678   0D0A             _while24_block:
1679   0D0A             ;; output[j++] = '='; 
1680   0D0A FA 07 00      lea d, [bp + 7] ; $output
1681   0D0D FD 2A         mov d, [d]
1682   0D0F D7            push a
1683   0D10 DA            push d
1684   0D11 FA FD FF      lea d, [bp + -3] ; $j
1685   0D14 2A            mov b, [d]
1686   0D15 D8            push b
1687   0D16 FD 77         inc b
1688   0D18 FA FD FF      lea d, [bp + -3] ; $j
1689   0D1B FD 43         mov [d], b
1690   0D1D E5            pop b
1691   0D1E E7            pop d
1692   0D1F FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1693   0D23 E4            pop a
1694   0D24 DA            push d
1695   0D25 26 3D 00      mov b, $3d
1696   0D28 E7            pop d
1697   0D29 FD 3E         mov [d], bl
1698   0D2B 0A EE 0C      jmp _while24_cond
1699   0D2E             _while24_exit:
1700   0D2E 0A 31 0D      jmp _if21_exit
1701   0D31             _if21_exit:
1702   0D31             ;; output[j] = '\0'; 
1703   0D31 FA 07 00      lea d, [bp + 7] ; $output
1704   0D34 FD 2A         mov d, [d]
1705   0D36 D7            push a
1706   0D37 DA            push d
1707   0D38 FA FD FF      lea d, [bp + -3] ; $j
1708   0D3B 2A            mov b, [d]
1709   0D3C E7            pop d
1710   0D3D FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1711   0D41 E4            pop a
1712   0D42 DA            push d
1713   0D43 26 00 00      mov b, $0
1714   0D46 E7            pop d
1715   0D47 FD 3E         mov [d], bl
1716   0D49 F9            leave
1717   0D4A 09            ret
1718   0D4B             
1719   0D4B             base64_char_value:
1720   0D4B F8 00 00      enter 0 ; (push bp; mov bp, sp)
1721   0D4E             ;; if (c >= 'A' && c <= 'Z') return c - 'A'; 
1722   0D4E             _if25_cond:
1723   0D4E FA 05 00      lea d, [bp + 5] ; $c
1724   0D51 32            mov bl, [d]
1725   0D52 A7 00         mov bh, 0
1726   0D54             ; START RELATIONAL
1727   0D54 D7            push a
1728   0D55 11            mov a, b
1729   0D56 26 41 00      mov b, $41
1730   0D59 B0            cmp a, b
1731   0D5A FD 80         sge ; >=
1732   0D5C E4            pop a
1733   0D5D             ; END RELATIONAL
1734   0D5D D7            push a
1735   0D5E 11            mov a, b
1736   0D5F FA 05 00      lea d, [bp + 5] ; $c
1737   0D62 32            mov bl, [d]
1738   0D63 A7 00         mov bh, 0
1739   0D65             ; START RELATIONAL
1740   0D65 D7            push a
1741   0D66 11            mov a, b
1742   0D67 26 5A 00      mov b, $5a
1743   0D6A B0            cmp a, b
1744   0D6B FD 74         sle ; <=
1745   0D6D E4            pop a
1746   0D6E             ; END RELATIONAL
1747   0D6E FD A7         sand a, b ; &&
1748   0D70 E4            pop a
1749   0D71 C0 00 00      cmp b, 0
1750   0D74 C6 8A 0D      je _if25_exit
1751   0D77             _if25_true:
1752   0D77             ;; return c - 'A'; 
1753   0D77 FA 05 00      lea d, [bp + 5] ; $c
1754   0D7A 32            mov bl, [d]
1755   0D7B A7 00         mov bh, 0
1756   0D7D             ; START TERMS
1757   0D7D D7            push a
1758   0D7E 11            mov a, b
1759   0D7F 26 41 00      mov b, $41
1760   0D82 60            sub a, b
1761   0D83 27            mov b, a
1762   0D84 E4            pop a
1763   0D85             ; END TERMS
1764   0D85 F9            leave
1765   0D86 09            ret
1766   0D87 0A 8A 0D      jmp _if25_exit
1767   0D8A             _if25_exit:
1768   0D8A             ;; if (c >= 'a' && c <= 'z') return c - 'a' + 26; 
1769   0D8A             _if26_cond:
1770   0D8A FA 05 00      lea d, [bp + 5] ; $c
1771   0D8D 32            mov bl, [d]
1772   0D8E A7 00         mov bh, 0
1773   0D90             ; START RELATIONAL
1774   0D90 D7            push a
1775   0D91 11            mov a, b
1776   0D92 26 61 00      mov b, $61
1777   0D95 B0            cmp a, b
1778   0D96 FD 80         sge ; >=
1779   0D98 E4            pop a
1780   0D99             ; END RELATIONAL
1781   0D99 D7            push a
1782   0D9A 11            mov a, b
1783   0D9B FA 05 00      lea d, [bp + 5] ; $c
1784   0D9E 32            mov bl, [d]
1785   0D9F A7 00         mov bh, 0
1786   0DA1             ; START RELATIONAL
1787   0DA1 D7            push a
1788   0DA2 11            mov a, b
1789   0DA3 26 7A 00      mov b, $7a
1790   0DA6 B0            cmp a, b
1791   0DA7 FD 74         sle ; <=
1792   0DA9 E4            pop a
1793   0DAA             ; END RELATIONAL
1794   0DAA FD A7         sand a, b ; &&
1795   0DAC E4            pop a
1796   0DAD C0 00 00      cmp b, 0
1797   0DB0 C6 CB 0D      je _if26_exit
1798   0DB3             _if26_true:
1799   0DB3             ;; return c - 'a' + 26; 
1800   0DB3 FA 05 00      lea d, [bp + 5] ; $c
1801   0DB6 32            mov bl, [d]
1802   0DB7 A7 00         mov bh, 0
1803   0DB9             ; START TERMS
1804   0DB9 D7            push a
1805   0DBA 11            mov a, b
1806   0DBB 26 61 00      mov b, $61
1807   0DBE 60            sub a, b
1808   0DBF 27            mov b, a
1809   0DC0 11            mov a, b
1810   0DC1 26 1A 00      mov b, $1a
1811   0DC4 56            add b, a
1812   0DC5 E4            pop a
1813   0DC6             ; END TERMS
1814   0DC6 F9            leave
1815   0DC7 09            ret
1816   0DC8 0A CB 0D      jmp _if26_exit
1817   0DCB             _if26_exit:
1818   0DCB             ;; if (c >= '0' && c <= '9') return c - '0' + 52; 
1819   0DCB             _if27_cond:
1820   0DCB FA 05 00      lea d, [bp + 5] ; $c
1821   0DCE 32            mov bl, [d]
1822   0DCF A7 00         mov bh, 0
1823   0DD1             ; START RELATIONAL
1824   0DD1 D7            push a
1825   0DD2 11            mov a, b
1826   0DD3 26 30 00      mov b, $30
1827   0DD6 B0            cmp a, b
1828   0DD7 FD 80         sge ; >=
1829   0DD9 E4            pop a
1830   0DDA             ; END RELATIONAL
1831   0DDA D7            push a
1832   0DDB 11            mov a, b
1833   0DDC FA 05 00      lea d, [bp + 5] ; $c
1834   0DDF 32            mov bl, [d]
1835   0DE0 A7 00         mov bh, 0
1836   0DE2             ; START RELATIONAL
1837   0DE2 D7            push a
1838   0DE3 11            mov a, b
1839   0DE4 26 39 00      mov b, $39
1840   0DE7 B0            cmp a, b
1841   0DE8 FD 74         sle ; <=
1842   0DEA E4            pop a
1843   0DEB             ; END RELATIONAL
1844   0DEB FD A7         sand a, b ; &&
1845   0DED E4            pop a
1846   0DEE C0 00 00      cmp b, 0
1847   0DF1 C6 0C 0E      je _if27_exit
1848   0DF4             _if27_true:
1849   0DF4             ;; return c - '0' + 52; 
1850   0DF4 FA 05 00      lea d, [bp + 5] ; $c
1851   0DF7 32            mov bl, [d]
1852   0DF8 A7 00         mov bh, 0
1853   0DFA             ; START TERMS
1854   0DFA D7            push a
1855   0DFB 11            mov a, b
1856   0DFC 26 30 00      mov b, $30
1857   0DFF 60            sub a, b
1858   0E00 27            mov b, a
1859   0E01 11            mov a, b
1860   0E02 26 34 00      mov b, $34
1861   0E05 56            add b, a
1862   0E06 E4            pop a
1863   0E07             ; END TERMS
1864   0E07 F9            leave
1865   0E08 09            ret
1866   0E09 0A 0C 0E      jmp _if27_exit
1867   0E0C             _if27_exit:
1868   0E0C             ;; if (c == '+') return 62; 
1869   0E0C             _if28_cond:
1870   0E0C FA 05 00      lea d, [bp + 5] ; $c
1871   0E0F 32            mov bl, [d]
1872   0E10 A7 00         mov bh, 0
1873   0E12             ; START RELATIONAL
1874   0E12 D7            push a
1875   0E13 11            mov a, b
1876   0E14 26 2B 00      mov b, $2b
1877   0E17 B0            cmp a, b
1878   0E18 FD 71         seq ; ==
1879   0E1A E4            pop a
1880   0E1B             ; END RELATIONAL
1881   0E1B C0 00 00      cmp b, 0
1882   0E1E C6 29 0E      je _if28_exit
1883   0E21             _if28_true:
1884   0E21             ;; return 62; 
1885   0E21 26 3E 00      mov b, $3e
1886   0E24 F9            leave
1887   0E25 09            ret
1888   0E26 0A 29 0E      jmp _if28_exit
1889   0E29             _if28_exit:
1890   0E29             ;; if (c == '/') return 63; 
1891   0E29             _if29_cond:
1892   0E29 FA 05 00      lea d, [bp + 5] ; $c
1893   0E2C 32            mov bl, [d]
1894   0E2D A7 00         mov bh, 0
1895   0E2F             ; START RELATIONAL
1896   0E2F D7            push a
1897   0E30 11            mov a, b
1898   0E31 26 2F 00      mov b, $2f
1899   0E34 B0            cmp a, b
1900   0E35 FD 71         seq ; ==
1901   0E37 E4            pop a
1902   0E38             ; END RELATIONAL
1903   0E38 C0 00 00      cmp b, 0
1904   0E3B C6 46 0E      je _if29_exit
1905   0E3E             _if29_true:
1906   0E3E             ;; return 63; 
1907   0E3E 26 3F 00      mov b, $3f
1908   0E41 F9            leave
1909   0E42 09            ret
1910   0E43 0A 46 0E      jmp _if29_exit
1911   0E46             _if29_exit:
1912   0E46             ;; return -1; 
1913   0E46 26 FF FF      mov b, $ffff
1914   0E49 F9            leave
1915   0E4A 09            ret
1916   0E4B             
1917   0E4B             base64_decode:
1918   0E4B F8 00 00      enter 0 ; (push bp; mov bp, sp)
1919   0E4E             ; $i 
1920   0E4E 10 00 00      mov a, $0
1921   0E51 45 FF FF      mov [bp + -1], a
1922   0E54             ; $j 
1923   0E54 10 00 00      mov a, $0
1924   0E57 45 FD FF      mov [bp + -3], a
1925   0E5A             ; $k 
1926   0E5A 10 00 00      mov a, $0
1927   0E5D 45 FB FF      mov [bp + -5], a
1928   0E60             ; $input_len 
1929   0E60             ; $input_buffer 
1930   0E60             ; $output_buffer 
1931   0E60 52 0F 00      sub sp, 15
1932   0E63             ;; input_len = strlen(input); 
1933   0E63 FA F9 FF      lea d, [bp + -7] ; $input_len
1934   0E66 DA            push d
1935   0E67 FA 05 00      lea d, [bp + 5] ; $input
1936   0E6A 2A            mov b, [d]
1937   0E6B FD AB         swp b
1938   0E6D D8            push b
1939   0E6E 07 AA 07      call strlen
1940   0E71 51 02 00      add sp, 2
1941   0E74 E7            pop d
1942   0E75 FD 43         mov [d], b
1943   0E77             ;; while (input_len-- && (input[k] != '=') && base64_char_value(input[k]) != -1) { 
1944   0E77             _while30_cond:
1945   0E77 FA F9 FF      lea d, [bp + -7] ; $input_len
1946   0E7A 2A            mov b, [d]
1947   0E7B D8            push b
1948   0E7C FD 7D         dec b
1949   0E7E FA F9 FF      lea d, [bp + -7] ; $input_len
1950   0E81 FD 43         mov [d], b
1951   0E83 E5            pop b
1952   0E84 D7            push a
1953   0E85 11            mov a, b
1954   0E86 FA 05 00      lea d, [bp + 5] ; $input
1955   0E89 FD 2A         mov d, [d]
1956   0E8B D7            push a
1957   0E8C DA            push d
1958   0E8D FA FB FF      lea d, [bp + -5] ; $k
1959   0E90 2A            mov b, [d]
1960   0E91 E7            pop d
1961   0E92 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1962   0E96 E4            pop a
1963   0E97 32            mov bl, [d]
1964   0E98 A7 00         mov bh, 0
1965   0E9A             ; START RELATIONAL
1966   0E9A D7            push a
1967   0E9B 11            mov a, b
1968   0E9C 26 3D 00      mov b, $3d
1969   0E9F B0            cmp a, b
1970   0EA0 FD 72         sneq ; !=
1971   0EA2 E4            pop a
1972   0EA3             ; END RELATIONAL
1973   0EA3 FD A7         sand a, b ; &&
1974   0EA5 11            mov a, b
1975   0EA6 FA 05 00      lea d, [bp + 5] ; $input
1976   0EA9 FD 2A         mov d, [d]
1977   0EAB D7            push a
1978   0EAC DA            push d
1979   0EAD FA FB FF      lea d, [bp + -5] ; $k
1980   0EB0 2A            mov b, [d]
1981   0EB1 E7            pop d
1982   0EB2 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1983   0EB6 E4            pop a
1984   0EB7 32            mov bl, [d]
1985   0EB8 A7 00         mov bh, 0
1986   0EBA DD            push bl
1987   0EBB 07 4B 0D      call base64_char_value
1988   0EBE 51 01 00      add sp, 1
1989   0EC1             ; START RELATIONAL
1990   0EC1 D7            push a
1991   0EC2 11            mov a, b
1992   0EC3 26 FF FF      mov b, $ffff
1993   0EC6 B0            cmp a, b
1994   0EC7 FD 72         sneq ; !=
1995   0EC9 E4            pop a
1996   0ECA             ; END RELATIONAL
1997   0ECA FD A7         sand a, b ; &&
1998   0ECC E4            pop a
1999   0ECD C0 00 00      cmp b, 0
2000   0ED0 C6 B8 10      je _while30_exit
2001   0ED3             _while30_block:
2002   0ED3             ;; input_buffer[i++] = input[k++]; 
2003   0ED3 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2004   0ED6 D7            push a
2005   0ED7 DA            push d
2006   0ED8 FA FF FF      lea d, [bp + -1] ; $i
2007   0EDB 2A            mov b, [d]
2008   0EDC D8            push b
2009   0EDD FD 77         inc b
2010   0EDF FA FF FF      lea d, [bp + -1] ; $i
2011   0EE2 FD 43         mov [d], b
2012   0EE4 E5            pop b
2013   0EE5 E7            pop d
2014   0EE6 5A            add d, b
2015   0EE7 E4            pop a
2016   0EE8 DA            push d
2017   0EE9 FA 05 00      lea d, [bp + 5] ; $input
2018   0EEC FD 2A         mov d, [d]
2019   0EEE D7            push a
2020   0EEF DA            push d
2021   0EF0 FA FB FF      lea d, [bp + -5] ; $k
2022   0EF3 2A            mov b, [d]
2023   0EF4 D8            push b
2024   0EF5 FD 77         inc b
2025   0EF7 FA FB FF      lea d, [bp + -5] ; $k
2026   0EFA FD 43         mov [d], b
2027   0EFC E5            pop b
2028   0EFD E7            pop d
2029   0EFE FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2030   0F02 E4            pop a
2031   0F03 32            mov bl, [d]
2032   0F04 A7 00         mov bh, 0
2033   0F06 E7            pop d
2034   0F07 FD 3E         mov [d], bl
2035   0F09             ;; if (i == 4) { 
2036   0F09             _if31_cond:
2037   0F09 FA FF FF      lea d, [bp + -1] ; $i
2038   0F0C 2A            mov b, [d]
2039   0F0D             ; START RELATIONAL
2040   0F0D D7            push a
2041   0F0E 11            mov a, b
2042   0F0F 26 04 00      mov b, $4
2043   0F12 B0            cmp a, b
2044   0F13 FD 71         seq ; ==
2045   0F15 E4            pop a
2046   0F16             ; END RELATIONAL
2047   0F16 C0 00 00      cmp b, 0
2048   0F19 C6 B5 10      je _if31_exit
2049   0F1C             _if31_true:
2050   0F1C             ;; for (i = 0; i < 4; i++) { 
2051   0F1C             _for32_init:
2052   0F1C FA FF FF      lea d, [bp + -1] ; $i
2053   0F1F DA            push d
2054   0F20 26 00 00      mov b, $0
2055   0F23 E7            pop d
2056   0F24 FD 43         mov [d], b
2057   0F26             _for32_cond:
2058   0F26 FA FF FF      lea d, [bp + -1] ; $i
2059   0F29 2A            mov b, [d]
2060   0F2A             ; START RELATIONAL
2061   0F2A D7            push a
2062   0F2B 11            mov a, b
2063   0F2C 26 04 00      mov b, $4
2064   0F2F B0            cmp a, b
2065   0F30 FD 73         slt ; <= (signed)
2066   0F32 E4            pop a
2067   0F33             ; END RELATIONAL
2068   0F33 C0 00 00      cmp b, 0
2069   0F36 C6 6F 0F      je _for32_exit
2070   0F39             _for32_block:
2071   0F39             ;; input_buffer[i] = base64_char_value(input_buffer[i]); 
2072   0F39 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2073   0F3C D7            push a
2074   0F3D DA            push d
2075   0F3E FA FF FF      lea d, [bp + -1] ; $i
2076   0F41 2A            mov b, [d]
2077   0F42 E7            pop d
2078   0F43 5A            add d, b
2079   0F44 E4            pop a
2080   0F45 DA            push d
2081   0F46 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2082   0F49 D7            push a
2083   0F4A DA            push d
2084   0F4B FA FF FF      lea d, [bp + -1] ; $i
2085   0F4E 2A            mov b, [d]
2086   0F4F E7            pop d
2087   0F50 5A            add d, b
2088   0F51 E4            pop a
2089   0F52 32            mov bl, [d]
2090   0F53 A7 00         mov bh, 0
2091   0F55 DD            push bl
2092   0F56 07 4B 0D      call base64_char_value
2093   0F59 51 01 00      add sp, 1
2094   0F5C E7            pop d
2095   0F5D FD 3E         mov [d], bl
2096   0F5F             _for32_update:
2097   0F5F FA FF FF      lea d, [bp + -1] ; $i
2098   0F62 2A            mov b, [d]
2099   0F63 D8            push b
2100   0F64 FD 77         inc b
2101   0F66 FA FF FF      lea d, [bp + -1] ; $i
2102   0F69 FD 43         mov [d], b
2103   0F6B E5            pop b
2104   0F6C 0A 26 0F      jmp _for32_cond
2105   0F6F             _for32_exit:
2106   0F6F             ;; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
2107   0F6F FA F2 FF      lea d, [bp + -14] ; $output_buffer
2108   0F72 D7            push a
2109   0F73 DA            push d
2110   0F74 26 00 00      mov b, $0
2111   0F77 E7            pop d
2112   0F78 5A            add d, b
2113   0F79 E4            pop a
2114   0F7A DA            push d
2115   0F7B FA F5 FF      lea d, [bp + -11] ; $input_buffer
2116   0F7E D7            push a
2117   0F7F DA            push d
2118   0F80 26 00 00      mov b, $0
2119   0F83 E7            pop d
2120   0F84 5A            add d, b
2121   0F85 E4            pop a
2122   0F86 32            mov bl, [d]
2123   0F87 A7 00         mov bh, 0
2124   0F89             ; START SHIFT
2125   0F89 D7            push a
2126   0F8A 11            mov a, b
2127   0F8B 26 02 00      mov b, $2
2128   0F8E FD 39         mov c, b
2129   0F90 9D            shl a, cl
2130   0F91 27            mov b, a
2131   0F92 E4            pop a
2132   0F93             ; END SHIFT
2133   0F93             ; START TERMS
2134   0F93 D7            push a
2135   0F94 11            mov a, b
2136   0F95 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2137   0F98 D7            push a
2138   0F99 DA            push d
2139   0F9A 26 01 00      mov b, $1
2140   0F9D E7            pop d
2141   0F9E 5A            add d, b
2142   0F9F E4            pop a
2143   0FA0 32            mov bl, [d]
2144   0FA1 A7 00         mov bh, 0
2145   0FA3 D7            push a
2146   0FA4 11            mov a, b
2147   0FA5 26 30 00      mov b, $30
2148   0FA8 86            and a, b ; &
2149   0FA9 27            mov b, a
2150   0FAA E4            pop a
2151   0FAB             ; START SHIFT
2152   0FAB D7            push a
2153   0FAC 11            mov a, b
2154   0FAD 26 04 00      mov b, $4
2155   0FB0 FD 39         mov c, b
2156   0FB2 A5            ashr a, cl
2157   0FB3 27            mov b, a
2158   0FB4 E4            pop a
2159   0FB5             ; END SHIFT
2160   0FB5 56            add b, a
2161   0FB6 E4            pop a
2162   0FB7             ; END TERMS
2163   0FB7 E7            pop d
2164   0FB8 FD 3E         mov [d], bl
2165   0FBA             ;; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
2166   0FBA FA F2 FF      lea d, [bp + -14] ; $output_buffer
2167   0FBD D7            push a
2168   0FBE DA            push d
2169   0FBF 26 01 00      mov b, $1
2170   0FC2 E7            pop d
2171   0FC3 5A            add d, b
2172   0FC4 E4            pop a
2173   0FC5 DA            push d
2174   0FC6 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2175   0FC9 D7            push a
2176   0FCA DA            push d
2177   0FCB 26 01 00      mov b, $1
2178   0FCE E7            pop d
2179   0FCF 5A            add d, b
2180   0FD0 E4            pop a
2181   0FD1 32            mov bl, [d]
2182   0FD2 A7 00         mov bh, 0
2183   0FD4 D7            push a
2184   0FD5 11            mov a, b
2185   0FD6 26 0F 00      mov b, $f
2186   0FD9 86            and a, b ; &
2187   0FDA 27            mov b, a
2188   0FDB E4            pop a
2189   0FDC             ; START SHIFT
2190   0FDC D7            push a
2191   0FDD 11            mov a, b
2192   0FDE 26 04 00      mov b, $4
2193   0FE1 FD 39         mov c, b
2194   0FE3 9D            shl a, cl
2195   0FE4 27            mov b, a
2196   0FE5 E4            pop a
2197   0FE6             ; END SHIFT
2198   0FE6             ; START TERMS
2199   0FE6 D7            push a
2200   0FE7 11            mov a, b
2201   0FE8 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2202   0FEB D7            push a
2203   0FEC DA            push d
2204   0FED 26 02 00      mov b, $2
2205   0FF0 E7            pop d
2206   0FF1 5A            add d, b
2207   0FF2 E4            pop a
2208   0FF3 32            mov bl, [d]
2209   0FF4 A7 00         mov bh, 0
2210   0FF6 D7            push a
2211   0FF7 11            mov a, b
2212   0FF8 26 3C 00      mov b, $3c
2213   0FFB 86            and a, b ; &
2214   0FFC 27            mov b, a
2215   0FFD E4            pop a
2216   0FFE             ; START SHIFT
2217   0FFE D7            push a
2218   0FFF 11            mov a, b
2219   1000 26 02 00      mov b, $2
2220   1003 FD 39         mov c, b
2221   1005 A5            ashr a, cl
2222   1006 27            mov b, a
2223   1007 E4            pop a
2224   1008             ; END SHIFT
2225   1008 56            add b, a
2226   1009 E4            pop a
2227   100A             ; END TERMS
2228   100A E7            pop d
2229   100B FD 3E         mov [d], bl
2230   100D             ;; output_buffer[2] = ((input_buffer[2] & 0x03) << 6) + input_buffer[3]; 
2231   100D FA F2 FF      lea d, [bp + -14] ; $output_buffer
2232   1010 D7            push a
2233   1011 DA            push d
2234   1012 26 02 00      mov b, $2
2235   1015 E7            pop d
2236   1016 5A            add d, b
2237   1017 E4            pop a
2238   1018 DA            push d
2239   1019 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2240   101C D7            push a
2241   101D DA            push d
2242   101E 26 02 00      mov b, $2
2243   1021 E7            pop d
2244   1022 5A            add d, b
2245   1023 E4            pop a
2246   1024 32            mov bl, [d]
2247   1025 A7 00         mov bh, 0
2248   1027 D7            push a
2249   1028 11            mov a, b
2250   1029 26 03 00      mov b, $3
2251   102C 86            and a, b ; &
2252   102D 27            mov b, a
2253   102E E4            pop a
2254   102F             ; START SHIFT
2255   102F D7            push a
2256   1030 11            mov a, b
2257   1031 26 06 00      mov b, $6
2258   1034 FD 39         mov c, b
2259   1036 9D            shl a, cl
2260   1037 27            mov b, a
2261   1038 E4            pop a
2262   1039             ; END SHIFT
2263   1039             ; START TERMS
2264   1039 D7            push a
2265   103A 11            mov a, b
2266   103B FA F5 FF      lea d, [bp + -11] ; $input_buffer
2267   103E D7            push a
2268   103F DA            push d
2269   1040 26 03 00      mov b, $3
2270   1043 E7            pop d
2271   1044 5A            add d, b
2272   1045 E4            pop a
2273   1046 32            mov bl, [d]
2274   1047 A7 00         mov bh, 0
2275   1049 56            add b, a
2276   104A E4            pop a
2277   104B             ; END TERMS
2278   104B E7            pop d
2279   104C FD 3E         mov [d], bl
2280   104E             ;; for (i = 0; i < 3; i++) { 
2281   104E             _for33_init:
2282   104E FA FF FF      lea d, [bp + -1] ; $i
2283   1051 DA            push d
2284   1052 26 00 00      mov b, $0
2285   1055 E7            pop d
2286   1056 FD 43         mov [d], b
2287   1058             _for33_cond:
2288   1058 FA FF FF      lea d, [bp + -1] ; $i
2289   105B 2A            mov b, [d]
2290   105C             ; START RELATIONAL
2291   105C D7            push a
2292   105D 11            mov a, b
2293   105E 26 03 00      mov b, $3
2294   1061 B0            cmp a, b
2295   1062 FD 73         slt ; <= (signed)
2296   1064 E4            pop a
2297   1065             ; END RELATIONAL
2298   1065 C0 00 00      cmp b, 0
2299   1068 C6 A8 10      je _for33_exit
2300   106B             _for33_block:
2301   106B             ;; output[j++] = output_buffer[i]; 
2302   106B FA 07 00      lea d, [bp + 7] ; $output
2303   106E FD 2A         mov d, [d]
2304   1070 D7            push a
2305   1071 DA            push d
2306   1072 FA FD FF      lea d, [bp + -3] ; $j
2307   1075 2A            mov b, [d]
2308   1076 D8            push b
2309   1077 FD 77         inc b
2310   1079 FA FD FF      lea d, [bp + -3] ; $j
2311   107C FD 43         mov [d], b
2312   107E E5            pop b
2313   107F E7            pop d
2314   1080 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2315   1084 E4            pop a
2316   1085 DA            push d
2317   1086 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2318   1089 D7            push a
2319   108A DA            push d
2320   108B FA FF FF      lea d, [bp + -1] ; $i
2321   108E 2A            mov b, [d]
2322   108F E7            pop d
2323   1090 5A            add d, b
2324   1091 E4            pop a
2325   1092 32            mov bl, [d]
2326   1093 A7 00         mov bh, 0
2327   1095 E7            pop d
2328   1096 FD 3E         mov [d], bl
2329   1098             _for33_update:
2330   1098 FA FF FF      lea d, [bp + -1] ; $i
2331   109B 2A            mov b, [d]
2332   109C D8            push b
2333   109D FD 77         inc b
2334   109F FA FF FF      lea d, [bp + -1] ; $i
2335   10A2 FD 43         mov [d], b
2336   10A4 E5            pop b
2337   10A5 0A 58 10      jmp _for33_cond
2338   10A8             _for33_exit:
2339   10A8             ;; i = 0; 
2340   10A8 FA FF FF      lea d, [bp + -1] ; $i
2341   10AB DA            push d
2342   10AC 26 00 00      mov b, $0
2343   10AF E7            pop d
2344   10B0 FD 43         mov [d], b
2345   10B2 0A B5 10      jmp _if31_exit
2346   10B5             _if31_exit:
2347   10B5 0A 77 0E      jmp _while30_cond
2348   10B8             _while30_exit:
2349   10B8             ;; if (i) { 
2350   10B8             _if34_cond:
2351   10B8 FA FF FF      lea d, [bp + -1] ; $i
2352   10BB 2A            mov b, [d]
2353   10BC C0 00 00      cmp b, 0
2354   10BF C6 5A 12      je _if34_exit
2355   10C2             _if34_true:
2356   10C2             ;; for (k = i; k < 4; k++) { 
2357   10C2             _for35_init:
2358   10C2 FA FB FF      lea d, [bp + -5] ; $k
2359   10C5 DA            push d
2360   10C6 FA FF FF      lea d, [bp + -1] ; $i
2361   10C9 2A            mov b, [d]
2362   10CA E7            pop d
2363   10CB FD 43         mov [d], b
2364   10CD             _for35_cond:
2365   10CD FA FB FF      lea d, [bp + -5] ; $k
2366   10D0 2A            mov b, [d]
2367   10D1             ; START RELATIONAL
2368   10D1 D7            push a
2369   10D2 11            mov a, b
2370   10D3 26 04 00      mov b, $4
2371   10D6 B0            cmp a, b
2372   10D7 FD 73         slt ; <= (signed)
2373   10D9 E4            pop a
2374   10DA             ; END RELATIONAL
2375   10DA C0 00 00      cmp b, 0
2376   10DD C6 03 11      je _for35_exit
2377   10E0             _for35_block:
2378   10E0             ;; input_buffer[k] = 0; 
2379   10E0 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2380   10E3 D7            push a
2381   10E4 DA            push d
2382   10E5 FA FB FF      lea d, [bp + -5] ; $k
2383   10E8 2A            mov b, [d]
2384   10E9 E7            pop d
2385   10EA 5A            add d, b
2386   10EB E4            pop a
2387   10EC DA            push d
2388   10ED 26 00 00      mov b, $0
2389   10F0 E7            pop d
2390   10F1 FD 3E         mov [d], bl
2391   10F3             _for35_update:
2392   10F3 FA FB FF      lea d, [bp + -5] ; $k
2393   10F6 2A            mov b, [d]
2394   10F7 D8            push b
2395   10F8 FD 77         inc b
2396   10FA FA FB FF      lea d, [bp + -5] ; $k
2397   10FD FD 43         mov [d], b
2398   10FF E5            pop b
2399   1100 0A CD 10      jmp _for35_cond
2400   1103             _for35_exit:
2401   1103             ;; for (k = 0; k < 4; k++) { 
2402   1103             _for36_init:
2403   1103 FA FB FF      lea d, [bp + -5] ; $k
2404   1106 DA            push d
2405   1107 26 00 00      mov b, $0
2406   110A E7            pop d
2407   110B FD 43         mov [d], b
2408   110D             _for36_cond:
2409   110D FA FB FF      lea d, [bp + -5] ; $k
2410   1110 2A            mov b, [d]
2411   1111             ; START RELATIONAL
2412   1111 D7            push a
2413   1112 11            mov a, b
2414   1113 26 04 00      mov b, $4
2415   1116 B0            cmp a, b
2416   1117 FD 73         slt ; <= (signed)
2417   1119 E4            pop a
2418   111A             ; END RELATIONAL
2419   111A C0 00 00      cmp b, 0
2420   111D C6 56 11      je _for36_exit
2421   1120             _for36_block:
2422   1120             ;; input_buffer[k] = base64_char_value(input_buffer[k]); 
2423   1120 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2424   1123 D7            push a
2425   1124 DA            push d
2426   1125 FA FB FF      lea d, [bp + -5] ; $k
2427   1128 2A            mov b, [d]
2428   1129 E7            pop d
2429   112A 5A            add d, b
2430   112B E4            pop a
2431   112C DA            push d
2432   112D FA F5 FF      lea d, [bp + -11] ; $input_buffer
2433   1130 D7            push a
2434   1131 DA            push d
2435   1132 FA FB FF      lea d, [bp + -5] ; $k
2436   1135 2A            mov b, [d]
2437   1136 E7            pop d
2438   1137 5A            add d, b
2439   1138 E4            pop a
2440   1139 32            mov bl, [d]
2441   113A A7 00         mov bh, 0
2442   113C DD            push bl
2443   113D 07 4B 0D      call base64_char_value
2444   1140 51 01 00      add sp, 1
2445   1143 E7            pop d
2446   1144 FD 3E         mov [d], bl
2447   1146             _for36_update:
2448   1146 FA FB FF      lea d, [bp + -5] ; $k
2449   1149 2A            mov b, [d]
2450   114A D8            push b
2451   114B FD 77         inc b
2452   114D FA FB FF      lea d, [bp + -5] ; $k
2453   1150 FD 43         mov [d], b
2454   1152 E5            pop b
2455   1153 0A 0D 11      jmp _for36_cond
2456   1156             _for36_exit:
2457   1156             ;; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
2458   1156 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2459   1159 D7            push a
2460   115A DA            push d
2461   115B 26 00 00      mov b, $0
2462   115E E7            pop d
2463   115F 5A            add d, b
2464   1160 E4            pop a
2465   1161 DA            push d
2466   1162 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2467   1165 D7            push a
2468   1166 DA            push d
2469   1167 26 00 00      mov b, $0
2470   116A E7            pop d
2471   116B 5A            add d, b
2472   116C E4            pop a
2473   116D 32            mov bl, [d]
2474   116E A7 00         mov bh, 0
2475   1170             ; START SHIFT
2476   1170 D7            push a
2477   1171 11            mov a, b
2478   1172 26 02 00      mov b, $2
2479   1175 FD 39         mov c, b
2480   1177 9D            shl a, cl
2481   1178 27            mov b, a
2482   1179 E4            pop a
2483   117A             ; END SHIFT
2484   117A             ; START TERMS
2485   117A D7            push a
2486   117B 11            mov a, b
2487   117C FA F5 FF      lea d, [bp + -11] ; $input_buffer
2488   117F D7            push a
2489   1180 DA            push d
2490   1181 26 01 00      mov b, $1
2491   1184 E7            pop d
2492   1185 5A            add d, b
2493   1186 E4            pop a
2494   1187 32            mov bl, [d]
2495   1188 A7 00         mov bh, 0
2496   118A D7            push a
2497   118B 11            mov a, b
2498   118C 26 30 00      mov b, $30
2499   118F 86            and a, b ; &
2500   1190 27            mov b, a
2501   1191 E4            pop a
2502   1192             ; START SHIFT
2503   1192 D7            push a
2504   1193 11            mov a, b
2505   1194 26 04 00      mov b, $4
2506   1197 FD 39         mov c, b
2507   1199 A5            ashr a, cl
2508   119A 27            mov b, a
2509   119B E4            pop a
2510   119C             ; END SHIFT
2511   119C 56            add b, a
2512   119D E4            pop a
2513   119E             ; END TERMS
2514   119E E7            pop d
2515   119F FD 3E         mov [d], bl
2516   11A1             ;; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
2517   11A1 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2518   11A4 D7            push a
2519   11A5 DA            push d
2520   11A6 26 01 00      mov b, $1
2521   11A9 E7            pop d
2522   11AA 5A            add d, b
2523   11AB E4            pop a
2524   11AC DA            push d
2525   11AD FA F5 FF      lea d, [bp + -11] ; $input_buffer
2526   11B0 D7            push a
2527   11B1 DA            push d
2528   11B2 26 01 00      mov b, $1
2529   11B5 E7            pop d
2530   11B6 5A            add d, b
2531   11B7 E4            pop a
2532   11B8 32            mov bl, [d]
2533   11B9 A7 00         mov bh, 0
2534   11BB D7            push a
2535   11BC 11            mov a, b
2536   11BD 26 0F 00      mov b, $f
2537   11C0 86            and a, b ; &
2538   11C1 27            mov b, a
2539   11C2 E4            pop a
2540   11C3             ; START SHIFT
2541   11C3 D7            push a
2542   11C4 11            mov a, b
2543   11C5 26 04 00      mov b, $4
2544   11C8 FD 39         mov c, b
2545   11CA 9D            shl a, cl
2546   11CB 27            mov b, a
2547   11CC E4            pop a
2548   11CD             ; END SHIFT
2549   11CD             ; START TERMS
2550   11CD D7            push a
2551   11CE 11            mov a, b
2552   11CF FA F5 FF      lea d, [bp + -11] ; $input_buffer
2553   11D2 D7            push a
2554   11D3 DA            push d
2555   11D4 26 02 00      mov b, $2
2556   11D7 E7            pop d
2557   11D8 5A            add d, b
2558   11D9 E4            pop a
2559   11DA 32            mov bl, [d]
2560   11DB A7 00         mov bh, 0
2561   11DD D7            push a
2562   11DE 11            mov a, b
2563   11DF 26 3C 00      mov b, $3c
2564   11E2 86            and a, b ; &
2565   11E3 27            mov b, a
2566   11E4 E4            pop a
2567   11E5             ; START SHIFT
2568   11E5 D7            push a
2569   11E6 11            mov a, b
2570   11E7 26 02 00      mov b, $2
2571   11EA FD 39         mov c, b
2572   11EC A5            ashr a, cl
2573   11ED 27            mov b, a
2574   11EE E4            pop a
2575   11EF             ; END SHIFT
2576   11EF 56            add b, a
2577   11F0 E4            pop a
2578   11F1             ; END TERMS
2579   11F1 E7            pop d
2580   11F2 FD 3E         mov [d], bl
2581   11F4             ;; for (k = 0; k < i - 1; k++) { 
2582   11F4             _for37_init:
2583   11F4 FA FB FF      lea d, [bp + -5] ; $k
2584   11F7 DA            push d
2585   11F8 26 00 00      mov b, $0
2586   11FB E7            pop d
2587   11FC FD 43         mov [d], b
2588   11FE             _for37_cond:
2589   11FE FA FB FF      lea d, [bp + -5] ; $k
2590   1201 2A            mov b, [d]
2591   1202             ; START RELATIONAL
2592   1202 D7            push a
2593   1203 11            mov a, b
2594   1204 FA FF FF      lea d, [bp + -1] ; $i
2595   1207 2A            mov b, [d]
2596   1208             ; START TERMS
2597   1208 D7            push a
2598   1209 11            mov a, b
2599   120A 26 01 00      mov b, $1
2600   120D 60            sub a, b
2601   120E 27            mov b, a
2602   120F E4            pop a
2603   1210             ; END TERMS
2604   1210 B0            cmp a, b
2605   1211 FD 73         slt ; <= (signed)
2606   1213 E4            pop a
2607   1214             ; END RELATIONAL
2608   1214 C0 00 00      cmp b, 0
2609   1217 C6 57 12      je _for37_exit
2610   121A             _for37_block:
2611   121A             ;; output[j++] = output_buffer[k]; 
2612   121A FA 07 00      lea d, [bp + 7] ; $output
2613   121D FD 2A         mov d, [d]
2614   121F D7            push a
2615   1220 DA            push d
2616   1221 FA FD FF      lea d, [bp + -3] ; $j
2617   1224 2A            mov b, [d]
2618   1225 D8            push b
2619   1226 FD 77         inc b
2620   1228 FA FD FF      lea d, [bp + -3] ; $j
2621   122B FD 43         mov [d], b
2622   122D E5            pop b
2623   122E E7            pop d
2624   122F FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2625   1233 E4            pop a
2626   1234 DA            push d
2627   1235 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2628   1238 D7            push a
2629   1239 DA            push d
2630   123A FA FB FF      lea d, [bp + -5] ; $k
2631   123D 2A            mov b, [d]
2632   123E E7            pop d
2633   123F 5A            add d, b
2634   1240 E4            pop a
2635   1241 32            mov bl, [d]
2636   1242 A7 00         mov bh, 0
2637   1244 E7            pop d
2638   1245 FD 3E         mov [d], bl
2639   1247             _for37_update:
2640   1247 FA FB FF      lea d, [bp + -5] ; $k
2641   124A 2A            mov b, [d]
2642   124B D8            push b
2643   124C FD 77         inc b
2644   124E FA FB FF      lea d, [bp + -5] ; $k
2645   1251 FD 43         mov [d], b
2646   1253 E5            pop b
2647   1254 0A FE 11      jmp _for37_cond
2648   1257             _for37_exit:
2649   1257 0A 5A 12      jmp _if34_exit
2650   125A             _if34_exit:
2651   125A             ;; output[j] = '\0'; 
2652   125A FA 07 00      lea d, [bp + 7] ; $output
2653   125D FD 2A         mov d, [d]
2654   125F D7            push a
2655   1260 DA            push d
2656   1261 FA FD FF      lea d, [bp + -3] ; $j
2657   1264 2A            mov b, [d]
2658   1265 E7            pop d
2659   1266 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2660   126A E4            pop a
2661   126B DA            push d
2662   126C 26 00 00      mov b, $0
2663   126F E7            pop d
2664   1270 FD 3E         mov [d], bl
2665   1272 F9            leave
2666   1273 09            ret
2667   1274             
2668   1274             va_start:
2669   1274 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2670   1277             ;; argp->current_arg = first_fixed_param + sizeof(first_fixed_param); 
2671   1277 FA 05 00      lea d, [bp + 5] ; $argp
2672   127A FD 2A         mov d, [d]
2673   127C 58 00 00      add d, 0
2674   127F DA            push d
2675   1280 FA 07 00      lea d, [bp + 7] ; $first_fixed_param
2676   1283 2A            mov b, [d]
2677   1284             ; START TERMS
2678   1284 D7            push a
2679   1285 11            mov a, b
2680   1286 26 02 00      mov b, 2
2681   1289 56            add b, a
2682   128A E4            pop a
2683   128B             ; END TERMS
2684   128B E7            pop d
2685   128C FD 43         mov [d], b
2686   128E F9            leave
2687   128F 09            ret
2688   1290             
2689   1290             va_arg:
2690   1290 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2691   1293             ; $p 
2692   1293 52 02 00      sub sp, 2
2693   1296             ;; p = argp->current_arg; 
2694   1296 FA FF FF      lea d, [bp + -1] ; $p
2695   1299 DA            push d
2696   129A FA 05 00      lea d, [bp + 5] ; $argp
2697   129D FD 2A         mov d, [d]
2698   129F 58 00 00      add d, 0
2699   12A2 2A            mov b, [d]
2700   12A3 E7            pop d
2701   12A4 FD 43         mov [d], b
2702   12A6             ;; argp->current_arg = argp->current_arg + size; 
2703   12A6 FA 05 00      lea d, [bp + 5] ; $argp
2704   12A9 FD 2A         mov d, [d]
2705   12AB 58 00 00      add d, 0
2706   12AE DA            push d
2707   12AF FA 05 00      lea d, [bp + 5] ; $argp
2708   12B2 FD 2A         mov d, [d]
2709   12B4 58 00 00      add d, 0
2710   12B7 2A            mov b, [d]
2711   12B8             ; START TERMS
2712   12B8 D7            push a
2713   12B9 11            mov a, b
2714   12BA FA 07 00      lea d, [bp + 7] ; $size
2715   12BD 2A            mov b, [d]
2716   12BE 56            add b, a
2717   12BF E4            pop a
2718   12C0             ; END TERMS
2719   12C0 E7            pop d
2720   12C1 FD 43         mov [d], b
2721   12C3             ;; return p; 
2722   12C3 FA FF FF      lea d, [bp + -1] ; $p
2723   12C6 2A            mov b, [d]
2724   12C7 F9            leave
2725   12C8 09            ret
2726   12C9             
2727   12C9             va_end:
2728   12C9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2729   12CC             ;; argp->current_arg =   0   ; 
2730   12CC FA 05 00      lea d, [bp + 5] ; $argp
2731   12CF FD 2A         mov d, [d]
2732   12D1 58 00 00      add d, 0
2733   12D4 DA            push d
2734   12D5 26 00 00      mov b, $0
2735   12D8 E7            pop d
2736   12D9 FD 43         mov [d], b
2737   12DB F9            leave
2738   12DC 09            ret
2739   12DD             
2740   12DD             printf:
2741   12DD F8 00 00      enter 0 ; (push bp; mov bp, sp)
2742   12E0             ; $p 
2743   12E0             ; $fp 
2744   12E0             ; $i 
2745   12E0 52 06 00      sub sp, 6
2746   12E3             ;; fp = format; 
2747   12E3 FA FD FF      lea d, [bp + -3] ; $fp
2748   12E6 DA            push d
2749   12E7 FA 05 00      lea d, [bp + 5] ; $format
2750   12EA 2A            mov b, [d]
2751   12EB E7            pop d
2752   12EC FD 43         mov [d], b
2753   12EE             ;; p = &format + 2; 
2754   12EE FA FF FF      lea d, [bp + -1] ; $p
2755   12F1 DA            push d
2756   12F2 FA 05 00      lea d, [bp + 5] ; $format
2757   12F5 2D            mov b, d
2758   12F6             ; START TERMS
2759   12F6 D7            push a
2760   12F7 11            mov a, b
2761   12F8 26 02 00      mov b, $2
2762   12FB 56            add b, a
2763   12FC E4            pop a
2764   12FD             ; END TERMS
2765   12FD E7            pop d
2766   12FE FD 43         mov [d], b
2767   1300             ;; for(;;){ 
2768   1300             _for38_init:
2769   1300             _for38_cond:
2770   1300             _for38_block:
2771   1300             ;; if(!*fp) break; 
2772   1300             _if39_cond:
2773   1300 FA FD FF      lea d, [bp + -3] ; $fp
2774   1303 2A            mov b, [d]
2775   1304 74            mov d, b
2776   1305 32            mov bl, [d]
2777   1306 A7 00         mov bh, 0
2778   1308 C0 00 00      cmp b, 0
2779   130B FD 71         seq ; !
2780   130D C0 00 00      cmp b, 0
2781   1310 C6 19 13      je _if39_else
2782   1313             _if39_true:
2783   1313             ;; break; 
2784   1313 0A 1F 15      jmp _for38_exit ; for break
2785   1316 0A 1C 15      jmp _if39_exit
2786   1319             _if39_else:
2787   1319             ;; if(*fp == '%'){ 
2788   1319             _if40_cond:
2789   1319 FA FD FF      lea d, [bp + -3] ; $fp
2790   131C 2A            mov b, [d]
2791   131D 74            mov d, b
2792   131E 32            mov bl, [d]
2793   131F A7 00         mov bh, 0
2794   1321             ; START RELATIONAL
2795   1321 D7            push a
2796   1322 11            mov a, b
2797   1323 26 25 00      mov b, $25
2798   1326 B0            cmp a, b
2799   1327 FD 71         seq ; ==
2800   1329 E4            pop a
2801   132A             ; END RELATIONAL
2802   132A C0 00 00      cmp b, 0
2803   132D C6 00 15      je _if40_else
2804   1330             _if40_true:
2805   1330             ;; fp++; 
2806   1330 FA FD FF      lea d, [bp + -3] ; $fp
2807   1333 2A            mov b, [d]
2808   1334 D8            push b
2809   1335 FD 77         inc b
2810   1337 FA FD FF      lea d, [bp + -3] ; $fp
2811   133A FD 43         mov [d], b
2812   133C E5            pop b
2813   133D             ;; switch(*fp){ 
2814   133D             _switch41_expr:
2815   133D FA FD FF      lea d, [bp + -3] ; $fp
2816   1340 2A            mov b, [d]
2817   1341 74            mov d, b
2818   1342 32            mov bl, [d]
2819   1343 A7 00         mov bh, 0
2820   1345             _switch41_comparisons:
2821   1345 C1 6C         cmp bl, $6c
2822   1347 C6 73 13      je _switch41_case0
2823   134A C1 4C         cmp bl, $4c
2824   134C C6 73 13      je _switch41_case1
2825   134F C1 64         cmp bl, $64
2826   1351 C6 40 14      je _switch41_case2
2827   1354 C1 69         cmp bl, $69
2828   1356 C6 40 14      je _switch41_case3
2829   1359 C1 75         cmp bl, $75
2830   135B C6 64 14      je _switch41_case4
2831   135E C1 78         cmp bl, $78
2832   1360 C6 88 14      je _switch41_case5
2833   1363 C1 63         cmp bl, $63
2834   1365 C6 A6 14      je _switch41_case6
2835   1368 C1 73         cmp bl, $73
2836   136A C6 C5 14      je _switch41_case7
2837   136D 0A E4 14      jmp _switch41_default
2838   1370 0A F0 14      jmp _switch41_exit
2839   1373             _switch41_case0:
2840   1373             _switch41_case1:
2841   1373             ;; fp++; 
2842   1373 FA FD FF      lea d, [bp + -3] ; $fp
2843   1376 2A            mov b, [d]
2844   1377 D8            push b
2845   1378 FD 77         inc b
2846   137A FA FD FF      lea d, [bp + -3] ; $fp
2847   137D FD 43         mov [d], b
2848   137F E5            pop b
2849   1380             ;; if(*fp == 'd' || *fp == 'i') 
2850   1380             _if42_cond:
2851   1380 FA FD FF      lea d, [bp + -3] ; $fp
2852   1383 2A            mov b, [d]
2853   1384 74            mov d, b
2854   1385 32            mov bl, [d]
2855   1386 A7 00         mov bh, 0
2856   1388             ; START RELATIONAL
2857   1388 D7            push a
2858   1389 11            mov a, b
2859   138A 26 64 00      mov b, $64
2860   138D B0            cmp a, b
2861   138E FD 71         seq ; ==
2862   1390 E4            pop a
2863   1391             ; END RELATIONAL
2864   1391 D7            push a
2865   1392 11            mov a, b
2866   1393 FA FD FF      lea d, [bp + -3] ; $fp
2867   1396 2A            mov b, [d]
2868   1397 74            mov d, b
2869   1398 32            mov bl, [d]
2870   1399 A7 00         mov bh, 0
2871   139B             ; START RELATIONAL
2872   139B D7            push a
2873   139C 11            mov a, b
2874   139D 26 69 00      mov b, $69
2875   13A0 B0            cmp a, b
2876   13A1 FD 71         seq ; ==
2877   13A3 E4            pop a
2878   13A4             ; END RELATIONAL
2879   13A4 FD A8         sor a, b ; ||
2880   13A6 E4            pop a
2881   13A7 C0 00 00      cmp b, 0
2882   13AA C6 C1 13      je _if42_else
2883   13AD             _if42_true:
2884   13AD             ;; print_signed_long(*(long *)p); 
2885   13AD FD 79         mov g, b
2886   13AF 28            mov b, c
2887   13B0 FD AB         swp b
2888   13B2 D8            push b
2889   13B3 FD 27         mov b, g
2890   13B5 FD AB         swp b
2891   13B7 D8            push b
2892   13B8 07 AD 17      call print_signed_long
2893   13BB 51 04 00      add sp, 4
2894   13BE 0A 2B 14      jmp _if42_exit
2895   13C1             _if42_else:
2896   13C1             ;; if(*fp == 'u') 
2897   13C1             _if43_cond:
2898   13C1 FA FD FF      lea d, [bp + -3] ; $fp
2899   13C4 2A            mov b, [d]
2900   13C5 74            mov d, b
2901   13C6 32            mov bl, [d]
2902   13C7 A7 00         mov bh, 0
2903   13C9             ; START RELATIONAL
2904   13C9 D7            push a
2905   13CA 11            mov a, b
2906   13CB 26 75 00      mov b, $75
2907   13CE B0            cmp a, b
2908   13CF FD 71         seq ; ==
2909   13D1 E4            pop a
2910   13D2             ; END RELATIONAL
2911   13D2 C0 00 00      cmp b, 0
2912   13D5 C6 EC 13      je _if43_else
2913   13D8             _if43_true:
2914   13D8             ;; print_unsigned_long(*(unsigned long *)p); 
2915   13D8 FD 79         mov g, b
2916   13DA 28            mov b, c
2917   13DB FD AB         swp b
2918   13DD D8            push b
2919   13DE FD 27         mov b, g
2920   13E0 FD AB         swp b
2921   13E2 D8            push b
2922   13E3 07 FF 18      call print_unsigned_long
2923   13E6 51 04 00      add sp, 4
2924   13E9 0A 2B 14      jmp _if43_exit
2925   13EC             _if43_else:
2926   13EC             ;; if(*fp == 'x') 
2927   13EC             _if44_cond:
2928   13EC FA FD FF      lea d, [bp + -3] ; $fp
2929   13EF 2A            mov b, [d]
2930   13F0 74            mov d, b
2931   13F1 32            mov bl, [d]
2932   13F2 A7 00         mov bh, 0
2933   13F4             ; START RELATIONAL
2934   13F4 D7            push a
2935   13F5 11            mov a, b
2936   13F6 26 78 00      mov b, $78
2937   13F9 B0            cmp a, b
2938   13FA FD 71         seq ; ==
2939   13FC E4            pop a
2940   13FD             ; END RELATIONAL
2941   13FD C0 00 00      cmp b, 0
2942   1400 C6 22 14      je _if44_else
2943   1403             _if44_true:
2944   1403             ;; printx32(*(long int *)p); 
2945   1403 FA FF FF      lea d, [bp + -1] ; $p
2946   1406 2A            mov b, [d]
2947   1407 74            mov d, b
2948   1408 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2949   140B FD 39         mov c, b ; And place it into C
2950   140D 2A            mov b, [d] ; Lower Word in B
2951   140E FD 79         mov g, b
2952   1410 28            mov b, c
2953   1411 FD AB         swp b
2954   1413 D8            push b
2955   1414 FD 27         mov b, g
2956   1416 FD AB         swp b
2957   1418 D8            push b
2958   1419 07 36 15      call printx32
2959   141C 51 04 00      add sp, 4
2960   141F 0A 2B 14      jmp _if44_exit
2961   1422             _if44_else:
2962   1422             ;; err("Unexpected format in printf."); 
2963   1422 26 24 2C      mov b, __s1 ; "Unexpected format in printf."
2964   1425 FD AB         swp b
2965   1427 D8            push b
2966   1428 07 21 15      call err
2967   142B             _if44_exit:
2968   142B             _if43_exit:
2969   142B             _if42_exit:
2970   142B             ;; p = p + 4; 
2971   142B FA FF FF      lea d, [bp + -1] ; $p
2972   142E DA            push d
2973   142F FA FF FF      lea d, [bp + -1] ; $p
2974   1432 2A            mov b, [d]
2975   1433             ; START TERMS
2976   1433 D7            push a
2977   1434 11            mov a, b
2978   1435 26 04 00      mov b, $4
2979   1438 56            add b, a
2980   1439 E4            pop a
2981   143A             ; END TERMS
2982   143A E7            pop d
2983   143B FD 43         mov [d], b
2984   143D             ;; break; 
2985   143D 0A F0 14      jmp _switch41_exit ; case break
2986   1440             _switch41_case2:
2987   1440             _switch41_case3:
2988   1440             ;; print_signed(*(int*)p); 
2989   1440 FA FF FF      lea d, [bp + -1] ; $p
2990   1443 2A            mov b, [d]
2991   1444 74            mov d, b
2992   1445 2A            mov b, [d]
2993   1446 FD AB         swp b
2994   1448 D8            push b
2995   1449 07 BD 16      call print_signed
2996   144C 51 02 00      add sp, 2
2997   144F             ;; p = p + 2; 
2998   144F FA FF FF      lea d, [bp + -1] ; $p
2999   1452 DA            push d
3000   1453 FA FF FF      lea d, [bp + -1] ; $p
3001   1456 2A            mov b, [d]
3002   1457             ; START TERMS
3003   1457 D7            push a
3004   1458 11            mov a, b
3005   1459 26 02 00      mov b, $2
3006   145C 56            add b, a
3007   145D E4            pop a
3008   145E             ; END TERMS
3009   145E E7            pop d
3010   145F FD 43         mov [d], b
3011   1461             ;; break; 
3012   1461 0A F0 14      jmp _switch41_exit ; case break
3013   1464             _switch41_case4:
3014   1464             ;; print_unsigned(*(unsigned int*)p); 
3015   1464 FA FF FF      lea d, [bp + -1] ; $p
3016   1467 2A            mov b, [d]
3017   1468 74            mov d, b
3018   1469 2A            mov b, [d]
3019   146A FD AB         swp b
3020   146C D8            push b
3021   146D 07 FC 19      call print_unsigned
3022   1470 51 02 00      add sp, 2
3023   1473             ;; p = p + 2; 
3024   1473 FA FF FF      lea d, [bp + -1] ; $p
3025   1476 DA            push d
3026   1477 FA FF FF      lea d, [bp + -1] ; $p
3027   147A 2A            mov b, [d]
3028   147B             ; START TERMS
3029   147B D7            push a
3030   147C 11            mov a, b
3031   147D 26 02 00      mov b, $2
3032   1480 56            add b, a
3033   1481 E4            pop a
3034   1482             ; END TERMS
3035   1482 E7            pop d
3036   1483 FD 43         mov [d], b
3037   1485             ;; break; 
3038   1485 0A F0 14      jmp _switch41_exit ; case break
3039   1488             _switch41_case5:
3040   1488             
3041   1488             ; --- BEGIN INLINE ASM BLOCK
3042   1488 FA FF FF      lea d, [bp + -1] ; $p
3043   148B FD 2A         mov d, [d]
3044   148D 2A            mov b, [d]
3045   148E 07 4F 1E      call print_u16x
3046   1491             ; --- END INLINE ASM BLOCK
3047   1491             
3048   1491             ;; p = p + 2; 
3049   1491 FA FF FF      lea d, [bp + -1] ; $p
3050   1494 DA            push d
3051   1495 FA FF FF      lea d, [bp + -1] ; $p
3052   1498 2A            mov b, [d]
3053   1499             ; START TERMS
3054   1499 D7            push a
3055   149A 11            mov a, b
3056   149B 26 02 00      mov b, $2
3057   149E 56            add b, a
3058   149F E4            pop a
3059   14A0             ; END TERMS
3060   14A0 E7            pop d
3061   14A1 FD 43         mov [d], b
3062   14A3             ;; break; 
3063   14A3 0A F0 14      jmp _switch41_exit ; case break
3064   14A6             _switch41_case6:
3065   14A6             
3066   14A6             ; --- BEGIN INLINE ASM BLOCK
3067   14A6 FA FF FF      lea d, [bp + -1] ; $p
3068   14A9 FD 2A         mov d, [d]
3069   14AB 1E            mov al, [d]
3070   14AC 23            mov ah, al
3071   14AD 07 AD 1C      call _putchar
3072   14B0             ; --- END INLINE ASM BLOCK
3073   14B0             
3074   14B0             ;; p = p + 2; 
3075   14B0 FA FF FF      lea d, [bp + -1] ; $p
3076   14B3 DA            push d
3077   14B4 FA FF FF      lea d, [bp + -1] ; $p
3078   14B7 2A            mov b, [d]
3079   14B8             ; START TERMS
3080   14B8 D7            push a
3081   14B9 11            mov a, b
3082   14BA 26 02 00      mov b, $2
3083   14BD 56            add b, a
3084   14BE E4            pop a
3085   14BF             ; END TERMS
3086   14BF E7            pop d
3087   14C0 FD 43         mov [d], b
3088   14C2             ;; break; 
3089   14C2 0A F0 14      jmp _switch41_exit ; case break
3090   14C5             _switch41_case7:
3091   14C5             
3092   14C5             ; --- BEGIN INLINE ASM BLOCK
3093   14C5 FA FF FF      lea d, [bp + -1] ; $p
3094   14C8 FD 2A         mov d, [d]
3095   14CA FD 2A         mov d, [d]
3096   14CC 07 F7 1D      call _puts
3097   14CF             ; --- END INLINE ASM BLOCK
3098   14CF             
3099   14CF             ;; p = p + 2; 
3100   14CF FA FF FF      lea d, [bp + -1] ; $p
3101   14D2 DA            push d
3102   14D3 FA FF FF      lea d, [bp + -1] ; $p
3103   14D6 2A            mov b, [d]
3104   14D7             ; START TERMS
3105   14D7 D7            push a
3106   14D8 11            mov a, b
3107   14D9 26 02 00      mov b, $2
3108   14DC 56            add b, a
3109   14DD E4            pop a
3110   14DE             ; END TERMS
3111   14DE E7            pop d
3112   14DF FD 43         mov [d], b
3113   14E1             ;; break; 
3114   14E1 0A F0 14      jmp _switch41_exit ; case break
3115   14E4             _switch41_default:
3116   14E4             ;; print("Error: Unknown argument type.\n"); 
3117   14E4 26 41 2C      mov b, __s2 ; "Error: Unknown argument type.\n"
3118   14E7 FD AB         swp b
3119   14E9 D8            push b
3120   14EA 07 14 1B      call print
3121   14ED 51 02 00      add sp, 2
3122   14F0             _switch41_exit:
3123   14F0             ;; fp++; 
3124   14F0 FA FD FF      lea d, [bp + -3] ; $fp
3125   14F3 2A            mov b, [d]
3126   14F4 D8            push b
3127   14F5 FD 77         inc b
3128   14F7 FA FD FF      lea d, [bp + -3] ; $fp
3129   14FA FD 43         mov [d], b
3130   14FC E5            pop b
3131   14FD 0A 1C 15      jmp _if40_exit
3132   1500             _if40_else:
3133   1500             ;; putchar(*fp); 
3134   1500 FA FD FF      lea d, [bp + -3] ; $fp
3135   1503 2A            mov b, [d]
3136   1504 74            mov d, b
3137   1505 32            mov bl, [d]
3138   1506 A7 00         mov bh, 0
3139   1508 DD            push bl
3140   1509 07 CC 1A      call putchar
3141   150C 51 01 00      add sp, 1
3142   150F             ;; fp++; 
3143   150F FA FD FF      lea d, [bp + -3] ; $fp
3144   1512 2A            mov b, [d]
3145   1513 D8            push b
3146   1514 FD 77         inc b
3147   1516 FA FD FF      lea d, [bp + -3] ; $fp
3148   1519 FD 43         mov [d], b
3149   151B E5            pop b
3150   151C             _if40_exit:
3151   151C             _if39_exit:
3152   151C             _for38_update:
3153   151C 0A 00 13      jmp _for38_cond
3154   151F             _for38_exit:
3155   151F F9            leave
3156   1520 09            ret
3157   1521             
3158   1521             err:
3159   1521 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3160   1524             ;; print(e); 
3161   1524 FA 05 00      lea d, [bp + 5] ; $e
3162   1527 2A            mov b, [d]
3163   1528 FD AB         swp b
3164   152A D8            push b
3165   152B 07 14 1B      call print
3166   152E 51 02 00      add sp, 2
3167   1531             ;; exit(); 
3168   1531 07 F3 07      call exit
3169   1534 F9            leave
3170   1535 09            ret
3171   1536             
3172   1536             printx32:
3173   1536 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3174   1539             
3175   1539             ; --- BEGIN INLINE ASM BLOCK
3176   1539 FA 05 00      lea d, [bp + 5] ; $hex
3177   153C 2B 02 00      mov b, [d+2]
3178   153F 07 4F 1E      call print_u16x
3179   1542 2A            mov b, [d]
3180   1543 07 4F 1E      call print_u16x
3181   1546             ; --- END INLINE ASM BLOCK
3182   1546             
3183   1546 F9            leave
3184   1547 09            ret
3185   1548             
3186   1548             printx16:
3187   1548 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3188   154B             
3189   154B             ; --- BEGIN INLINE ASM BLOCK
3190   154B FA 05 00      lea d, [bp + 5] ; $hex
3191   154E 2A            mov b, [d]
3192   154F 07 4F 1E      call print_u16x
3193   1552             ; --- END INLINE ASM BLOCK
3194   1552             
3195   1552 F9            leave
3196   1553 09            ret
3197   1554             
3198   1554             printx8:
3199   1554 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3200   1557             
3201   1557             ; --- BEGIN INLINE ASM BLOCK
3202   1557 FA 05 00      lea d, [bp + 5] ; $hex
3203   155A 32            mov bl, [d]
3204   155B 07 93 1E      call print_u8x
3205   155E             ; --- END INLINE ASM BLOCK
3206   155E             
3207   155E F9            leave
3208   155F 09            ret
3209   1560             
3210   1560             hex_to_int:
3211   1560 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3212   1563             ; $value 
3213   1563 10 00 00      mov a, $0
3214   1566 45 FF FF      mov [bp + -1], a
3215   1569             ; $i 
3216   1569             ; $hex_char 
3217   1569             ; $len 
3218   1569 52 07 00      sub sp, 7
3219   156C             ;; len = strlen(hex_string); 
3220   156C FA FA FF      lea d, [bp + -6] ; $len
3221   156F DA            push d
3222   1570 FA 05 00      lea d, [bp + 5] ; $hex_string
3223   1573 2A            mov b, [d]
3224   1574 FD AB         swp b
3225   1576 D8            push b
3226   1577 07 AA 07      call strlen
3227   157A 51 02 00      add sp, 2
3228   157D E7            pop d
3229   157E FD 43         mov [d], b
3230   1580             ;; for (i = 0; i < len; i++) { 
3231   1580             _for45_init:
3232   1580 FA FD FF      lea d, [bp + -3] ; $i
3233   1583 DA            push d
3234   1584 26 00 00      mov b, $0
3235   1587 E7            pop d
3236   1588 FD 43         mov [d], b
3237   158A             _for45_cond:
3238   158A FA FD FF      lea d, [bp + -3] ; $i
3239   158D 2A            mov b, [d]
3240   158E             ; START RELATIONAL
3241   158E D7            push a
3242   158F 11            mov a, b
3243   1590 FA FA FF      lea d, [bp + -6] ; $len
3244   1593 2A            mov b, [d]
3245   1594 B0            cmp a, b
3246   1595 FD 73         slt ; <= (signed)
3247   1597 E4            pop a
3248   1598             ; END RELATIONAL
3249   1598 C0 00 00      cmp b, 0
3250   159B C6 9D 16      je _for45_exit
3251   159E             _for45_block:
3252   159E             ;; hex_char = hex_string[i]; 
3253   159E FA FC FF      lea d, [bp + -4] ; $hex_char
3254   15A1 DA            push d
3255   15A2 FA 05 00      lea d, [bp + 5] ; $hex_string
3256   15A5 FD 2A         mov d, [d]
3257   15A7 D7            push a
3258   15A8 DA            push d
3259   15A9 FA FD FF      lea d, [bp + -3] ; $i
3260   15AC 2A            mov b, [d]
3261   15AD E7            pop d
3262   15AE FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3263   15B2 E4            pop a
3264   15B3 32            mov bl, [d]
3265   15B4 A7 00         mov bh, 0
3266   15B6 E7            pop d
3267   15B7 FD 3E         mov [d], bl
3268   15B9             ;; if (hex_char >= 'a' && hex_char <= 'f')  
3269   15B9             _if46_cond:
3270   15B9 FA FC FF      lea d, [bp + -4] ; $hex_char
3271   15BC 32            mov bl, [d]
3272   15BD A7 00         mov bh, 0
3273   15BF             ; START RELATIONAL
3274   15BF D7            push a
3275   15C0 11            mov a, b
3276   15C1 26 61 00      mov b, $61
3277   15C4 B0            cmp a, b
3278   15C5 FD 80         sge ; >=
3279   15C7 E4            pop a
3280   15C8             ; END RELATIONAL
3281   15C8 D7            push a
3282   15C9 11            mov a, b
3283   15CA FA FC FF      lea d, [bp + -4] ; $hex_char
3284   15CD 32            mov bl, [d]
3285   15CE A7 00         mov bh, 0
3286   15D0             ; START RELATIONAL
3287   15D0 D7            push a
3288   15D1 11            mov a, b
3289   15D2 26 66 00      mov b, $66
3290   15D5 B0            cmp a, b
3291   15D6 FD 74         sle ; <=
3292   15D8 E4            pop a
3293   15D9             ; END RELATIONAL
3294   15D9 FD A7         sand a, b ; &&
3295   15DB E4            pop a
3296   15DC C0 00 00      cmp b, 0
3297   15DF C6 10 16      je _if46_else
3298   15E2             _if46_true:
3299   15E2             ;; value = (value * 16) + (hex_char - 'a' + 10); 
3300   15E2 FA FF FF      lea d, [bp + -1] ; $value
3301   15E5 DA            push d
3302   15E6 FA FF FF      lea d, [bp + -1] ; $value
3303   15E9 2A            mov b, [d]
3304   15EA             ; START FACTORS
3305   15EA D7            push a
3306   15EB 11            mov a, b
3307   15EC 26 10 00      mov b, $10
3308   15EF AC            mul a, b ; *
3309   15F0 11            mov a, b
3310   15F1 27            mov b, a
3311   15F2 E4            pop a
3312   15F3             ; END FACTORS
3313   15F3             ; START TERMS
3314   15F3 D7            push a
3315   15F4 11            mov a, b
3316   15F5 FA FC FF      lea d, [bp + -4] ; $hex_char
3317   15F8 32            mov bl, [d]
3318   15F9 A7 00         mov bh, 0
3319   15FB             ; START TERMS
3320   15FB D7            push a
3321   15FC 11            mov a, b
3322   15FD 26 61 00      mov b, $61
3323   1600 60            sub a, b
3324   1601 27            mov b, a
3325   1602 11            mov a, b
3326   1603 26 0A 00      mov b, $a
3327   1606 56            add b, a
3328   1607 E4            pop a
3329   1608             ; END TERMS
3330   1608 56            add b, a
3331   1609 E4            pop a
3332   160A             ; END TERMS
3333   160A E7            pop d
3334   160B FD 43         mov [d], b
3335   160D 0A 8D 16      jmp _if46_exit
3336   1610             _if46_else:
3337   1610             ;; if (hex_char >= 'A' && hex_char <= 'F')  
3338   1610             _if47_cond:
3339   1610 FA FC FF      lea d, [bp + -4] ; $hex_char
3340   1613 32            mov bl, [d]
3341   1614 A7 00         mov bh, 0
3342   1616             ; START RELATIONAL
3343   1616 D7            push a
3344   1617 11            mov a, b
3345   1618 26 41 00      mov b, $41
3346   161B B0            cmp a, b
3347   161C FD 80         sge ; >=
3348   161E E4            pop a
3349   161F             ; END RELATIONAL
3350   161F D7            push a
3351   1620 11            mov a, b
3352   1621 FA FC FF      lea d, [bp + -4] ; $hex_char
3353   1624 32            mov bl, [d]
3354   1625 A7 00         mov bh, 0
3355   1627             ; START RELATIONAL
3356   1627 D7            push a
3357   1628 11            mov a, b
3358   1629 26 46 00      mov b, $46
3359   162C B0            cmp a, b
3360   162D FD 74         sle ; <=
3361   162F E4            pop a
3362   1630             ; END RELATIONAL
3363   1630 FD A7         sand a, b ; &&
3364   1632 E4            pop a
3365   1633 C0 00 00      cmp b, 0
3366   1636 C6 67 16      je _if47_else
3367   1639             _if47_true:
3368   1639             ;; value = (value * 16) + (hex_char - 'A' + 10); 
3369   1639 FA FF FF      lea d, [bp + -1] ; $value
3370   163C DA            push d
3371   163D FA FF FF      lea d, [bp + -1] ; $value
3372   1640 2A            mov b, [d]
3373   1641             ; START FACTORS
3374   1641 D7            push a
3375   1642 11            mov a, b
3376   1643 26 10 00      mov b, $10
3377   1646 AC            mul a, b ; *
3378   1647 11            mov a, b
3379   1648 27            mov b, a
3380   1649 E4            pop a
3381   164A             ; END FACTORS
3382   164A             ; START TERMS
3383   164A D7            push a
3384   164B 11            mov a, b
3385   164C FA FC FF      lea d, [bp + -4] ; $hex_char
3386   164F 32            mov bl, [d]
3387   1650 A7 00         mov bh, 0
3388   1652             ; START TERMS
3389   1652 D7            push a
3390   1653 11            mov a, b
3391   1654 26 41 00      mov b, $41
3392   1657 60            sub a, b
3393   1658 27            mov b, a
3394   1659 11            mov a, b
3395   165A 26 0A 00      mov b, $a
3396   165D 56            add b, a
3397   165E E4            pop a
3398   165F             ; END TERMS
3399   165F 56            add b, a
3400   1660 E4            pop a
3401   1661             ; END TERMS
3402   1661 E7            pop d
3403   1662 FD 43         mov [d], b
3404   1664 0A 8D 16      jmp _if47_exit
3405   1667             _if47_else:
3406   1667             ;; value = (value * 16) + (hex_char - '0'); 
3407   1667 FA FF FF      lea d, [bp + -1] ; $value
3408   166A DA            push d
3409   166B FA FF FF      lea d, [bp + -1] ; $value
3410   166E 2A            mov b, [d]
3411   166F             ; START FACTORS
3412   166F D7            push a
3413   1670 11            mov a, b
3414   1671 26 10 00      mov b, $10
3415   1674 AC            mul a, b ; *
3416   1675 11            mov a, b
3417   1676 27            mov b, a
3418   1677 E4            pop a
3419   1678             ; END FACTORS
3420   1678             ; START TERMS
3421   1678 D7            push a
3422   1679 11            mov a, b
3423   167A FA FC FF      lea d, [bp + -4] ; $hex_char
3424   167D 32            mov bl, [d]
3425   167E A7 00         mov bh, 0
3426   1680             ; START TERMS
3427   1680 D7            push a
3428   1681 11            mov a, b
3429   1682 26 30 00      mov b, $30
3430   1685 60            sub a, b
3431   1686 27            mov b, a
3432   1687 E4            pop a
3433   1688             ; END TERMS
3434   1688 56            add b, a
3435   1689 E4            pop a
3436   168A             ; END TERMS
3437   168A E7            pop d
3438   168B FD 43         mov [d], b
3439   168D             _if47_exit:
3440   168D             _if46_exit:
3441   168D             _for45_update:
3442   168D FA FD FF      lea d, [bp + -3] ; $i
3443   1690 2A            mov b, [d]
3444   1691 D8            push b
3445   1692 FD 77         inc b
3446   1694 FA FD FF      lea d, [bp + -3] ; $i
3447   1697 FD 43         mov [d], b
3448   1699 E5            pop b
3449   169A 0A 8A 15      jmp _for45_cond
3450   169D             _for45_exit:
3451   169D             ;; return value; 
3452   169D FA FF FF      lea d, [bp + -1] ; $value
3453   16A0 2A            mov b, [d]
3454   16A1 F9            leave
3455   16A2 09            ret
3456   16A3             
3457   16A3             gets:
3458   16A3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3459   16A6             
3460   16A6             ; --- BEGIN INLINE ASM BLOCK
3461   16A6 FA 05 00      lea d, [bp + 5] ; $s
3462   16A9 15            mov a, [d]
3463   16AA 3C            mov d, a
3464   16AB 07 B4 1C      call _gets
3465   16AE             ; --- END INLINE ASM BLOCK
3466   16AE             
3467   16AE             ;; return strlen(s); 
3468   16AE FA 05 00      lea d, [bp + 5] ; $s
3469   16B1 2A            mov b, [d]
3470   16B2 FD AB         swp b
3471   16B4 D8            push b
3472   16B5 07 AA 07      call strlen
3473   16B8 51 02 00      add sp, 2
3474   16BB F9            leave
3475   16BC 09            ret
3476   16BD             
3477   16BD             print_signed:
3478   16BD F8 00 00      enter 0 ; (push bp; mov bp, sp)
3479   16C0             ; $digits 
3480   16C0             ; $i 
3481   16C0 10 00 00      mov a, $0
3482   16C3 45 FA FF      mov [bp + -6], a
3483   16C6 52 07 00      sub sp, 7
3484   16C9             ;; if (num < 0) { 
3485   16C9             _if48_cond:
3486   16C9 FA 05 00      lea d, [bp + 5] ; $num
3487   16CC 2A            mov b, [d]
3488   16CD             ; START RELATIONAL
3489   16CD D7            push a
3490   16CE 11            mov a, b
3491   16CF 26 00 00      mov b, $0
3492   16D2 B0            cmp a, b
3493   16D3 FD 73         slt ; <= (signed)
3494   16D5 E4            pop a
3495   16D6             ; END RELATIONAL
3496   16D6 C0 00 00      cmp b, 0
3497   16D9 C6 F6 16      je _if48_else
3498   16DC             _if48_true:
3499   16DC             ;; putchar('-'); 
3500   16DC 26 2D 00      mov b, $2d
3501   16DF DD            push bl
3502   16E0 07 CC 1A      call putchar
3503   16E3 51 01 00      add sp, 1
3504   16E6             ;; num = -num; 
3505   16E6 FA 05 00      lea d, [bp + 5] ; $num
3506   16E9 DA            push d
3507   16EA FA 05 00      lea d, [bp + 5] ; $num
3508   16ED 2A            mov b, [d]
3509   16EE FD 97         neg b
3510   16F0 E7            pop d
3511   16F1 FD 43         mov [d], b
3512   16F3 0A 18 17      jmp _if48_exit
3513   16F6             _if48_else:
3514   16F6             ;; if (num == 0) { 
3515   16F6             _if49_cond:
3516   16F6 FA 05 00      lea d, [bp + 5] ; $num
3517   16F9 2A            mov b, [d]
3518   16FA             ; START RELATIONAL
3519   16FA D7            push a
3520   16FB 11            mov a, b
3521   16FC 26 00 00      mov b, $0
3522   16FF B0            cmp a, b
3523   1700 FD 71         seq ; ==
3524   1702 E4            pop a
3525   1703             ; END RELATIONAL
3526   1703 C0 00 00      cmp b, 0
3527   1706 C6 18 17      je _if49_exit
3528   1709             _if49_true:
3529   1709             ;; putchar('0'); 
3530   1709 26 30 00      mov b, $30
3531   170C DD            push bl
3532   170D 07 CC 1A      call putchar
3533   1710 51 01 00      add sp, 1
3534   1713             ;; return; 
3535   1713 F9            leave
3536   1714 09            ret
3537   1715 0A 18 17      jmp _if49_exit
3538   1718             _if49_exit:
3539   1718             _if48_exit:
3540   1718             ;; while (num > 0) { 
3541   1718             _while50_cond:
3542   1718 FA 05 00      lea d, [bp + 5] ; $num
3543   171B 2A            mov b, [d]
3544   171C             ; START RELATIONAL
3545   171C D7            push a
3546   171D 11            mov a, b
3547   171E 26 00 00      mov b, $0
3548   1721 B0            cmp a, b
3549   1722 FD 7F         sgt ; >
3550   1724 E4            pop a
3551   1725             ; END RELATIONAL
3552   1725 C0 00 00      cmp b, 0
3553   1728 C6 72 17      je _while50_exit
3554   172B             _while50_block:
3555   172B             ;; digits[i] = '0' + (num % 10); 
3556   172B FA FC FF      lea d, [bp + -4] ; $digits
3557   172E D7            push a
3558   172F DA            push d
3559   1730 FA FA FF      lea d, [bp + -6] ; $i
3560   1733 2A            mov b, [d]
3561   1734 E7            pop d
3562   1735 5A            add d, b
3563   1736 E4            pop a
3564   1737 DA            push d
3565   1738 26 30 00      mov b, $30
3566   173B             ; START TERMS
3567   173B D7            push a
3568   173C 11            mov a, b
3569   173D FA 05 00      lea d, [bp + 5] ; $num
3570   1740 2A            mov b, [d]
3571   1741             ; START FACTORS
3572   1741 D7            push a
3573   1742 11            mov a, b
3574   1743 26 0A 00      mov b, $a
3575   1746 AE            div a, b ; 
3576   1747 11            mov a, b
3577   1748 27            mov b, a
3578   1749 E4            pop a
3579   174A             ; END FACTORS
3580   174A 56            add b, a
3581   174B E4            pop a
3582   174C             ; END TERMS
3583   174C E7            pop d
3584   174D FD 3E         mov [d], bl
3585   174F             ;; num = num / 10; 
3586   174F FA 05 00      lea d, [bp + 5] ; $num
3587   1752 DA            push d
3588   1753 FA 05 00      lea d, [bp + 5] ; $num
3589   1756 2A            mov b, [d]
3590   1757             ; START FACTORS
3591   1757 D7            push a
3592   1758 11            mov a, b
3593   1759 26 0A 00      mov b, $a
3594   175C AE            div a, b
3595   175D 27            mov b, a
3596   175E E4            pop a
3597   175F             ; END FACTORS
3598   175F E7            pop d
3599   1760 FD 43         mov [d], b
3600   1762             ;; i++; 
3601   1762 FA FA FF      lea d, [bp + -6] ; $i
3602   1765 2A            mov b, [d]
3603   1766 D8            push b
3604   1767 FD 77         inc b
3605   1769 FA FA FF      lea d, [bp + -6] ; $i
3606   176C FD 43         mov [d], b
3607   176E E5            pop b
3608   176F 0A 18 17      jmp _while50_cond
3609   1772             _while50_exit:
3610   1772             ;; while (i > 0) { 
3611   1772             _while51_cond:
3612   1772 FA FA FF      lea d, [bp + -6] ; $i
3613   1775 2A            mov b, [d]
3614   1776             ; START RELATIONAL
3615   1776 D7            push a
3616   1777 11            mov a, b
3617   1778 26 00 00      mov b, $0
3618   177B B0            cmp a, b
3619   177C FD 7F         sgt ; >
3620   177E E4            pop a
3621   177F             ; END RELATIONAL
3622   177F C0 00 00      cmp b, 0
3623   1782 C6 AB 17      je _while51_exit
3624   1785             _while51_block:
3625   1785             ;; i--; 
3626   1785 FA FA FF      lea d, [bp + -6] ; $i
3627   1788 2A            mov b, [d]
3628   1789 D8            push b
3629   178A FD 7D         dec b
3630   178C FA FA FF      lea d, [bp + -6] ; $i
3631   178F FD 43         mov [d], b
3632   1791 E5            pop b
3633   1792             ;; putchar(digits[i]); 
3634   1792 FA FC FF      lea d, [bp + -4] ; $digits
3635   1795 D7            push a
3636   1796 DA            push d
3637   1797 FA FA FF      lea d, [bp + -6] ; $i
3638   179A 2A            mov b, [d]
3639   179B E7            pop d
3640   179C 5A            add d, b
3641   179D E4            pop a
3642   179E 32            mov bl, [d]
3643   179F A7 00         mov bh, 0
3644   17A1 DD            push bl
3645   17A2 07 CC 1A      call putchar
3646   17A5 51 01 00      add sp, 1
3647   17A8 0A 72 17      jmp _while51_cond
3648   17AB             _while51_exit:
3649   17AB F9            leave
3650   17AC 09            ret
3651   17AD             
3652   17AD             print_signed_long:
3653   17AD F8 00 00      enter 0 ; (push bp; mov bp, sp)
3654   17B0             ; $digits 
3655   17B0             ; $i 
3656   17B0 10 00 00      mov a, $0
3657   17B3 45 F5 FF      mov [bp + -11], a
3658   17B6 52 0C 00      sub sp, 12
3659   17B9             ;; if (num < 0) { 
3660   17B9             _if52_cond:
3661   17B9 FA 05 00      lea d, [bp + 5] ; $num
3662   17BC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3663   17BF FD 39         mov c, b ; And place it into C
3664   17C1 2A            mov b, [d] ; Lower Word in B
3665   17C2             ; START RELATIONAL
3666   17C2 D7            push a
3667   17C3 FD D8         push g
3668   17C5 11            mov a, b
3669   17C6 FD 7A         mov g, c
3670   17C8 26 00 00      mov b, $0
3671   17CB 4D            mov si, a
3672   17CC 11            mov a, b
3673   17CD 4F            mov di, a
3674   17CE FD 12         mov a, g
3675   17D0 28            mov b, c
3676   17D1 B0            cmp a, b
3677   17D2 FD 75         slu ; <
3678   17D4 D8            push b
3679   17D5 28            mov b, c
3680   17D6 FD 71         seq ; ==
3681   17D8 D8            push b
3682   17D9 50            mov a, di
3683   17DA 27            mov b, a
3684   17DB 4E            mov a, si
3685   17DC B0            cmp a, b
3686   17DD FD 75         slu ; <
3687   17DF E4            pop a
3688   17E0 FD 92         and b, a
3689   17E2 E4            pop a
3690   17E3 FD 70         or b, a
3691   17E5               
3692   17E5 FD F1         pop g
3693   17E7 E4            pop a
3694   17E8             ; END RELATIONAL
3695   17E8 C0 00 00      cmp b, 0
3696   17EB C6 12 18      je _if52_else
3697   17EE             _if52_true:
3698   17EE             ;; putchar('-'); 
3699   17EE 26 2D 00      mov b, $2d
3700   17F1 DD            push bl
3701   17F2 07 CC 1A      call putchar
3702   17F5 51 01 00      add sp, 1
3703   17F8             ;; num = -num; 
3704   17F8 FA 05 00      lea d, [bp + 5] ; $num
3705   17FB DA            push d
3706   17FC FA 05 00      lea d, [bp + 5] ; $num
3707   17FF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3708   1802 FD 39         mov c, b ; And place it into C
3709   1804 2A            mov b, [d] ; Lower Word in B
3710   1805 FD 97         neg b
3711   1807 E7            pop d
3712   1808 FD 43         mov [d], b
3713   180A 28            mov b, c
3714   180B FD 44 02 00   mov [d + 2], b
3715   180F 0A 49 18      jmp _if52_exit
3716   1812             _if52_else:
3717   1812             ;; if (num == 0) { 
3718   1812             _if53_cond:
3719   1812 FA 05 00      lea d, [bp + 5] ; $num
3720   1815 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3721   1818 FD 39         mov c, b ; And place it into C
3722   181A 2A            mov b, [d] ; Lower Word in B
3723   181B             ; START RELATIONAL
3724   181B D7            push a
3725   181C FD D8         push g
3726   181E 11            mov a, b
3727   181F FD 7A         mov g, c
3728   1821 26 00 00      mov b, $0
3729   1824 B0            cmp a, b
3730   1825 FD 71         seq ; ==
3731   1827 D8            push b
3732   1828 12            mov a, c
3733   1829 FD 27         mov b, g
3734   182B B0            cmp a, b
3735   182C FD 71         seq ; ==
3736   182E E4            pop a
3737   182F FD A7         sand a, b
3738   1831 FD F1         pop g
3739   1833 E4            pop a
3740   1834             ; END RELATIONAL
3741   1834 C0 00 00      cmp b, 0
3742   1837 C6 49 18      je _if53_exit
3743   183A             _if53_true:
3744   183A             ;; putchar('0'); 
3745   183A 26 30 00      mov b, $30
3746   183D DD            push bl
3747   183E 07 CC 1A      call putchar
3748   1841 51 01 00      add sp, 1
3749   1844             ;; return; 
3750   1844 F9            leave
3751   1845 09            ret
3752   1846 0A 49 18      jmp _if53_exit
3753   1849             _if53_exit:
3754   1849             _if52_exit:
3755   1849             ;; while (num > 0) { 
3756   1849             _while54_cond:
3757   1849 FA 05 00      lea d, [bp + 5] ; $num
3758   184C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3759   184F FD 39         mov c, b ; And place it into C
3760   1851 2A            mov b, [d] ; Lower Word in B
3761   1852             ; START RELATIONAL
3762   1852 D7            push a
3763   1853 FD D8         push g
3764   1855 11            mov a, b
3765   1856 FD 7A         mov g, c
3766   1858 26 00 00      mov b, $0
3767   185B B0            cmp a, b
3768   185C FD 7F         sgt ; >
3769   185E FD F1         pop g
3770   1860 E4            pop a
3771   1861             ; END RELATIONAL
3772   1861 C0 00 00      cmp b, 0
3773   1864 C6 C4 18      je _while54_exit
3774   1867             _while54_block:
3775   1867             ;; digits[i] = '0' + (num % 10); 
3776   1867 FA F7 FF      lea d, [bp + -9] ; $digits
3777   186A D7            push a
3778   186B DA            push d
3779   186C FA F5 FF      lea d, [bp + -11] ; $i
3780   186F 2A            mov b, [d]
3781   1870 E7            pop d
3782   1871 5A            add d, b
3783   1872 E4            pop a
3784   1873 DA            push d
3785   1874 26 30 00      mov b, $30
3786   1877             ; START TERMS
3787   1877 D7            push a
3788   1878 11            mov a, b
3789   1879 FA 05 00      lea d, [bp + 5] ; $num
3790   187C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3791   187F FD 39         mov c, b ; And place it into C
3792   1881 2A            mov b, [d] ; Lower Word in B
3793   1882             ; START FACTORS
3794   1882 D7            push a
3795   1883 11            mov a, b
3796   1884 26 0A 00      mov b, $a
3797   1887 AE            div a, b ; 
3798   1888 11            mov a, b
3799   1889 27            mov b, a
3800   188A E4            pop a
3801   188B             ; END FACTORS
3802   188B 54            add a, b
3803   188C D7            push a
3804   188D FD 12         mov a, g
3805   188F 28            mov b, c
3806   1890 5C            adc a, b
3807   1891 39            mov c, a
3808   1892 E5            pop b
3809   1893 E4            pop a
3810   1894             ; END TERMS
3811   1894 E7            pop d
3812   1895 FD 3E         mov [d], bl
3813   1897             ;; num = num / 10; 
3814   1897 FA 05 00      lea d, [bp + 5] ; $num
3815   189A DA            push d
3816   189B FA 05 00      lea d, [bp + 5] ; $num
3817   189E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3818   18A1 FD 39         mov c, b ; And place it into C
3819   18A3 2A            mov b, [d] ; Lower Word in B
3820   18A4             ; START FACTORS
3821   18A4 D7            push a
3822   18A5 11            mov a, b
3823   18A6 26 0A 00      mov b, $a
3824   18A9 AE            div a, b
3825   18AA 27            mov b, a
3826   18AB E4            pop a
3827   18AC             ; END FACTORS
3828   18AC E7            pop d
3829   18AD FD 43         mov [d], b
3830   18AF 28            mov b, c
3831   18B0 FD 44 02 00   mov [d + 2], b
3832   18B4             ;; i++; 
3833   18B4 FA F5 FF      lea d, [bp + -11] ; $i
3834   18B7 2A            mov b, [d]
3835   18B8 D8            push b
3836   18B9 FD 77         inc b
3837   18BB FA F5 FF      lea d, [bp + -11] ; $i
3838   18BE FD 43         mov [d], b
3839   18C0 E5            pop b
3840   18C1 0A 49 18      jmp _while54_cond
3841   18C4             _while54_exit:
3842   18C4             ;; while (i > 0) { 
3843   18C4             _while55_cond:
3844   18C4 FA F5 FF      lea d, [bp + -11] ; $i
3845   18C7 2A            mov b, [d]
3846   18C8             ; START RELATIONAL
3847   18C8 D7            push a
3848   18C9 11            mov a, b
3849   18CA 26 00 00      mov b, $0
3850   18CD B0            cmp a, b
3851   18CE FD 7F         sgt ; >
3852   18D0 E4            pop a
3853   18D1             ; END RELATIONAL
3854   18D1 C0 00 00      cmp b, 0
3855   18D4 C6 FD 18      je _while55_exit
3856   18D7             _while55_block:
3857   18D7             ;; i--; 
3858   18D7 FA F5 FF      lea d, [bp + -11] ; $i
3859   18DA 2A            mov b, [d]
3860   18DB D8            push b
3861   18DC FD 7D         dec b
3862   18DE FA F5 FF      lea d, [bp + -11] ; $i
3863   18E1 FD 43         mov [d], b
3864   18E3 E5            pop b
3865   18E4             ;; putchar(digits[i]); 
3866   18E4 FA F7 FF      lea d, [bp + -9] ; $digits
3867   18E7 D7            push a
3868   18E8 DA            push d
3869   18E9 FA F5 FF      lea d, [bp + -11] ; $i
3870   18EC 2A            mov b, [d]
3871   18ED E7            pop d
3872   18EE 5A            add d, b
3873   18EF E4            pop a
3874   18F0 32            mov bl, [d]
3875   18F1 A7 00         mov bh, 0
3876   18F3 DD            push bl
3877   18F4 07 CC 1A      call putchar
3878   18F7 51 01 00      add sp, 1
3879   18FA 0A C4 18      jmp _while55_cond
3880   18FD             _while55_exit:
3881   18FD F9            leave
3882   18FE 09            ret
3883   18FF             
3884   18FF             print_unsigned_long:
3885   18FF F8 00 00      enter 0 ; (push bp; mov bp, sp)
3886   1902             ; $digits 
3887   1902             ; $i 
3888   1902 52 0C 00      sub sp, 12
3889   1905             ;; i = 0; 
3890   1905 FA F5 FF      lea d, [bp + -11] ; $i
3891   1908 DA            push d
3892   1909 26 00 00      mov b, $0
3893   190C E7            pop d
3894   190D FD 43         mov [d], b
3895   190F             ;; if(num == 0){ 
3896   190F             _if56_cond:
3897   190F FA 05 00      lea d, [bp + 5] ; $num
3898   1912 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3899   1915 FD 39         mov c, b ; And place it into C
3900   1917 2A            mov b, [d] ; Lower Word in B
3901   1918             ; START RELATIONAL
3902   1918 D7            push a
3903   1919 FD D8         push g
3904   191B 11            mov a, b
3905   191C FD 7A         mov g, c
3906   191E 26 00 00      mov b, $0
3907   1921 B0            cmp a, b
3908   1922 FD 71         seq ; ==
3909   1924 D8            push b
3910   1925 12            mov a, c
3911   1926 FD 27         mov b, g
3912   1928 B0            cmp a, b
3913   1929 FD 71         seq ; ==
3914   192B E4            pop a
3915   192C FD A7         sand a, b
3916   192E FD F1         pop g
3917   1930 E4            pop a
3918   1931             ; END RELATIONAL
3919   1931 C0 00 00      cmp b, 0
3920   1934 C6 46 19      je _if56_exit
3921   1937             _if56_true:
3922   1937             ;; putchar('0'); 
3923   1937 26 30 00      mov b, $30
3924   193A DD            push bl
3925   193B 07 CC 1A      call putchar
3926   193E 51 01 00      add sp, 1
3927   1941             ;; return; 
3928   1941 F9            leave
3929   1942 09            ret
3930   1943 0A 46 19      jmp _if56_exit
3931   1946             _if56_exit:
3932   1946             ;; while (num > 0) { 
3933   1946             _while57_cond:
3934   1946 FA 05 00      lea d, [bp + 5] ; $num
3935   1949 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3936   194C FD 39         mov c, b ; And place it into C
3937   194E 2A            mov b, [d] ; Lower Word in B
3938   194F             ; START RELATIONAL
3939   194F D7            push a
3940   1950 FD D8         push g
3941   1952 11            mov a, b
3942   1953 FD 7A         mov g, c
3943   1955 26 00 00      mov b, $0
3944   1958 B0            cmp a, b
3945   1959 FD 81         sgu ; > (unsigned)
3946   195B FD F1         pop g
3947   195D E4            pop a
3948   195E             ; END RELATIONAL
3949   195E C0 00 00      cmp b, 0
3950   1961 C6 C1 19      je _while57_exit
3951   1964             _while57_block:
3952   1964             ;; digits[i] = '0' + (num % 10); 
3953   1964 FA F7 FF      lea d, [bp + -9] ; $digits
3954   1967 D7            push a
3955   1968 DA            push d
3956   1969 FA F5 FF      lea d, [bp + -11] ; $i
3957   196C 2A            mov b, [d]
3958   196D E7            pop d
3959   196E 5A            add d, b
3960   196F E4            pop a
3961   1970 DA            push d
3962   1971 26 30 00      mov b, $30
3963   1974             ; START TERMS
3964   1974 D7            push a
3965   1975 11            mov a, b
3966   1976 FA 05 00      lea d, [bp + 5] ; $num
3967   1979 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3968   197C FD 39         mov c, b ; And place it into C
3969   197E 2A            mov b, [d] ; Lower Word in B
3970   197F             ; START FACTORS
3971   197F D7            push a
3972   1980 11            mov a, b
3973   1981 26 0A 00      mov b, $a
3974   1984 AE            div a, b ; 
3975   1985 11            mov a, b
3976   1986 27            mov b, a
3977   1987 E4            pop a
3978   1988             ; END FACTORS
3979   1988 54            add a, b
3980   1989 D7            push a
3981   198A FD 12         mov a, g
3982   198C 28            mov b, c
3983   198D 5C            adc a, b
3984   198E 39            mov c, a
3985   198F E5            pop b
3986   1990 E4            pop a
3987   1991             ; END TERMS
3988   1991 E7            pop d
3989   1992 FD 3E         mov [d], bl
3990   1994             ;; num = num / 10; 
3991   1994 FA 05 00      lea d, [bp + 5] ; $num
3992   1997 DA            push d
3993   1998 FA 05 00      lea d, [bp + 5] ; $num
3994   199B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3995   199E FD 39         mov c, b ; And place it into C
3996   19A0 2A            mov b, [d] ; Lower Word in B
3997   19A1             ; START FACTORS
3998   19A1 D7            push a
3999   19A2 11            mov a, b
4000   19A3 26 0A 00      mov b, $a
4001   19A6 AE            div a, b
4002   19A7 27            mov b, a
4003   19A8 E4            pop a
4004   19A9             ; END FACTORS
4005   19A9 E7            pop d
4006   19AA FD 43         mov [d], b
4007   19AC 28            mov b, c
4008   19AD FD 44 02 00   mov [d + 2], b
4009   19B1             ;; i++; 
4010   19B1 FA F5 FF      lea d, [bp + -11] ; $i
4011   19B4 2A            mov b, [d]
4012   19B5 D8            push b
4013   19B6 FD 77         inc b
4014   19B8 FA F5 FF      lea d, [bp + -11] ; $i
4015   19BB FD 43         mov [d], b
4016   19BD E5            pop b
4017   19BE 0A 46 19      jmp _while57_cond
4018   19C1             _while57_exit:
4019   19C1             ;; while (i > 0) { 
4020   19C1             _while58_cond:
4021   19C1 FA F5 FF      lea d, [bp + -11] ; $i
4022   19C4 2A            mov b, [d]
4023   19C5             ; START RELATIONAL
4024   19C5 D7            push a
4025   19C6 11            mov a, b
4026   19C7 26 00 00      mov b, $0
4027   19CA B0            cmp a, b
4028   19CB FD 7F         sgt ; >
4029   19CD E4            pop a
4030   19CE             ; END RELATIONAL
4031   19CE C0 00 00      cmp b, 0
4032   19D1 C6 FA 19      je _while58_exit
4033   19D4             _while58_block:
4034   19D4             ;; i--; 
4035   19D4 FA F5 FF      lea d, [bp + -11] ; $i
4036   19D7 2A            mov b, [d]
4037   19D8 D8            push b
4038   19D9 FD 7D         dec b
4039   19DB FA F5 FF      lea d, [bp + -11] ; $i
4040   19DE FD 43         mov [d], b
4041   19E0 E5            pop b
4042   19E1             ;; putchar(digits[i]); 
4043   19E1 FA F7 FF      lea d, [bp + -9] ; $digits
4044   19E4 D7            push a
4045   19E5 DA            push d
4046   19E6 FA F5 FF      lea d, [bp + -11] ; $i
4047   19E9 2A            mov b, [d]
4048   19EA E7            pop d
4049   19EB 5A            add d, b
4050   19EC E4            pop a
4051   19ED 32            mov bl, [d]
4052   19EE A7 00         mov bh, 0
4053   19F0 DD            push bl
4054   19F1 07 CC 1A      call putchar
4055   19F4 51 01 00      add sp, 1
4056   19F7 0A C1 19      jmp _while58_cond
4057   19FA             _while58_exit:
4058   19FA F9            leave
4059   19FB 09            ret
4060   19FC             
4061   19FC             print_unsigned:
4062   19FC F8 00 00      enter 0 ; (push bp; mov bp, sp)
4063   19FF             ; $digits 
4064   19FF             ; $i 
4065   19FF 52 07 00      sub sp, 7
4066   1A02             ;; i = 0; 
4067   1A02 FA FA FF      lea d, [bp + -6] ; $i
4068   1A05 DA            push d
4069   1A06 26 00 00      mov b, $0
4070   1A09 E7            pop d
4071   1A0A FD 43         mov [d], b
4072   1A0C             ;; if(num == 0){ 
4073   1A0C             _if59_cond:
4074   1A0C FA 05 00      lea d, [bp + 5] ; $num
4075   1A0F 2A            mov b, [d]
4076   1A10             ; START RELATIONAL
4077   1A10 D7            push a
4078   1A11 11            mov a, b
4079   1A12 26 00 00      mov b, $0
4080   1A15 B0            cmp a, b
4081   1A16 FD 71         seq ; ==
4082   1A18 E4            pop a
4083   1A19             ; END RELATIONAL
4084   1A19 C0 00 00      cmp b, 0
4085   1A1C C6 2E 1A      je _if59_exit
4086   1A1F             _if59_true:
4087   1A1F             ;; putchar('0'); 
4088   1A1F 26 30 00      mov b, $30
4089   1A22 DD            push bl
4090   1A23 07 CC 1A      call putchar
4091   1A26 51 01 00      add sp, 1
4092   1A29             ;; return; 
4093   1A29 F9            leave
4094   1A2A 09            ret
4095   1A2B 0A 2E 1A      jmp _if59_exit
4096   1A2E             _if59_exit:
4097   1A2E             ;; while (num > 0) { 
4098   1A2E             _while60_cond:
4099   1A2E FA 05 00      lea d, [bp + 5] ; $num
4100   1A31 2A            mov b, [d]
4101   1A32             ; START RELATIONAL
4102   1A32 D7            push a
4103   1A33 11            mov a, b
4104   1A34 26 00 00      mov b, $0
4105   1A37 B0            cmp a, b
4106   1A38 FD 81         sgu ; > (unsigned)
4107   1A3A E4            pop a
4108   1A3B             ; END RELATIONAL
4109   1A3B C0 00 00      cmp b, 0
4110   1A3E C6 88 1A      je _while60_exit
4111   1A41             _while60_block:
4112   1A41             ;; digits[i] = '0' + (num % 10); 
4113   1A41 FA FC FF      lea d, [bp + -4] ; $digits
4114   1A44 D7            push a
4115   1A45 DA            push d
4116   1A46 FA FA FF      lea d, [bp + -6] ; $i
4117   1A49 2A            mov b, [d]
4118   1A4A E7            pop d
4119   1A4B 5A            add d, b
4120   1A4C E4            pop a
4121   1A4D DA            push d
4122   1A4E 26 30 00      mov b, $30
4123   1A51             ; START TERMS
4124   1A51 D7            push a
4125   1A52 11            mov a, b
4126   1A53 FA 05 00      lea d, [bp + 5] ; $num
4127   1A56 2A            mov b, [d]
4128   1A57             ; START FACTORS
4129   1A57 D7            push a
4130   1A58 11            mov a, b
4131   1A59 26 0A 00      mov b, $a
4132   1A5C AE            div a, b ; 
4133   1A5D 11            mov a, b
4134   1A5E 27            mov b, a
4135   1A5F E4            pop a
4136   1A60             ; END FACTORS
4137   1A60 56            add b, a
4138   1A61 E4            pop a
4139   1A62             ; END TERMS
4140   1A62 E7            pop d
4141   1A63 FD 3E         mov [d], bl
4142   1A65             ;; num = num / 10; 
4143   1A65 FA 05 00      lea d, [bp + 5] ; $num
4144   1A68 DA            push d
4145   1A69 FA 05 00      lea d, [bp + 5] ; $num
4146   1A6C 2A            mov b, [d]
4147   1A6D             ; START FACTORS
4148   1A6D D7            push a
4149   1A6E 11            mov a, b
4150   1A6F 26 0A 00      mov b, $a
4151   1A72 AE            div a, b
4152   1A73 27            mov b, a
4153   1A74 E4            pop a
4154   1A75             ; END FACTORS
4155   1A75 E7            pop d
4156   1A76 FD 43         mov [d], b
4157   1A78             ;; i++; 
4158   1A78 FA FA FF      lea d, [bp + -6] ; $i
4159   1A7B 2A            mov b, [d]
4160   1A7C D8            push b
4161   1A7D FD 77         inc b
4162   1A7F FA FA FF      lea d, [bp + -6] ; $i
4163   1A82 FD 43         mov [d], b
4164   1A84 E5            pop b
4165   1A85 0A 2E 1A      jmp _while60_cond
4166   1A88             _while60_exit:
4167   1A88             ;; while (i > 0) { 
4168   1A88             _while61_cond:
4169   1A88 FA FA FF      lea d, [bp + -6] ; $i
4170   1A8B 2A            mov b, [d]
4171   1A8C             ; START RELATIONAL
4172   1A8C D7            push a
4173   1A8D 11            mov a, b
4174   1A8E 26 00 00      mov b, $0
4175   1A91 B0            cmp a, b
4176   1A92 FD 7F         sgt ; >
4177   1A94 E4            pop a
4178   1A95             ; END RELATIONAL
4179   1A95 C0 00 00      cmp b, 0
4180   1A98 C6 C1 1A      je _while61_exit
4181   1A9B             _while61_block:
4182   1A9B             ;; i--; 
4183   1A9B FA FA FF      lea d, [bp + -6] ; $i
4184   1A9E 2A            mov b, [d]
4185   1A9F D8            push b
4186   1AA0 FD 7D         dec b
4187   1AA2 FA FA FF      lea d, [bp + -6] ; $i
4188   1AA5 FD 43         mov [d], b
4189   1AA7 E5            pop b
4190   1AA8             ;; putchar(digits[i]); 
4191   1AA8 FA FC FF      lea d, [bp + -4] ; $digits
4192   1AAB D7            push a
4193   1AAC DA            push d
4194   1AAD FA FA FF      lea d, [bp + -6] ; $i
4195   1AB0 2A            mov b, [d]
4196   1AB1 E7            pop d
4197   1AB2 5A            add d, b
4198   1AB3 E4            pop a
4199   1AB4 32            mov bl, [d]
4200   1AB5 A7 00         mov bh, 0
4201   1AB7 DD            push bl
4202   1AB8 07 CC 1A      call putchar
4203   1ABB 51 01 00      add sp, 1
4204   1ABE 0A 88 1A      jmp _while61_cond
4205   1AC1             _while61_exit:
4206   1AC1 F9            leave
4207   1AC2 09            ret
4208   1AC3             
4209   1AC3             date:
4210   1AC3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4211   1AC6             
4212   1AC6             ; --- BEGIN INLINE ASM BLOCK
4213   1AC6 19 00         mov al, 0 
4214   1AC8 05 07         syscall sys_datetime
4215   1ACA             ; --- END INLINE ASM BLOCK
4216   1ACA             
4217   1ACA F9            leave
4218   1ACB 09            ret
4219   1ACC             
4220   1ACC             putchar:
4221   1ACC F8 00 00      enter 0 ; (push bp; mov bp, sp)
4222   1ACF             
4223   1ACF             ; --- BEGIN INLINE ASM BLOCK
4224   1ACF FA 05 00      lea d, [bp + 5] ; $c
4225   1AD2 1E            mov al, [d]
4226   1AD3 23            mov ah, al
4227   1AD4 07 AD 1C      call _putchar
4228   1AD7             ; --- END INLINE ASM BLOCK
4229   1AD7             
4230   1AD7 F9            leave
4231   1AD8 09            ret
4232   1AD9             
4233   1AD9             getchar:
4234   1AD9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4235   1ADC             ; $c 
4236   1ADC 52 01 00      sub sp, 1
4237   1ADF             
4238   1ADF             ; --- BEGIN INLINE ASM BLOCK
4239   1ADF 07 A6 1C      call getch
4240   1AE2 1A            mov al, ah
4241   1AE3 FA 00 00      lea d, [bp + 0] ; $c
4242   1AE6 3E            mov [d], al
4243   1AE7             ; --- END INLINE ASM BLOCK
4244   1AE7             
4245   1AE7             ;; return c; 
4246   1AE7 FA 00 00      lea d, [bp + 0] ; $c
4247   1AEA 32            mov bl, [d]
4248   1AEB A7 00         mov bh, 0
4249   1AED F9            leave
4250   1AEE 09            ret
4251   1AEF             
4252   1AEF             scann:
4253   1AEF F8 00 00      enter 0 ; (push bp; mov bp, sp)
4254   1AF2             ; $m 
4255   1AF2 52 02 00      sub sp, 2
4256   1AF5             
4257   1AF5             ; --- BEGIN INLINE ASM BLOCK
4258   1AF5 07 F1 1E      call scan_u16d
4259   1AF8 FA FF FF      lea d, [bp + -1] ; $m
4260   1AFB 43            mov [d], a
4261   1AFC             ; --- END INLINE ASM BLOCK
4262   1AFC             
4263   1AFC             ;; return m; 
4264   1AFC FA FF FF      lea d, [bp + -1] ; $m
4265   1AFF 2A            mov b, [d]
4266   1B00 F9            leave
4267   1B01 09            ret
4268   1B02             
4269   1B02             puts:
4270   1B02 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4271   1B05             
4272   1B05             ; --- BEGIN INLINE ASM BLOCK
4273   1B05 FA 05 00      lea d, [bp + 5] ; $s
4274   1B08 15            mov a, [d]
4275   1B09 3C            mov d, a
4276   1B0A 07 F7 1D      call _puts
4277   1B0D 10 00 0A      mov a, $0A00
4278   1B10 05 03         syscall sys_io
4279   1B12             ; --- END INLINE ASM BLOCK
4280   1B12             
4281   1B12 F9            leave
4282   1B13 09            ret
4283   1B14             
4284   1B14             print:
4285   1B14 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4286   1B17             
4287   1B17             ; --- BEGIN INLINE ASM BLOCK
4288   1B17 FA 05 00      lea d, [bp + 5] ; $s
4289   1B1A FD 2A         mov d, [d]
4290   1B1C 07 F7 1D      call _puts
4291   1B1F             ; --- END INLINE ASM BLOCK
4292   1B1F             
4293   1B1F F9            leave
4294   1B20 09            ret
4295   1B21             
4296   1B21             loadfile:
4297   1B21 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4298   1B24             
4299   1B24             ; --- BEGIN INLINE ASM BLOCK
4300   1B24 FA 07 00      lea d, [bp + 7] ; $destination
4301   1B27 15            mov a, [d]
4302   1B28 4F            mov di, a
4303   1B29 FA 05 00      lea d, [bp + 5] ; $filename
4304   1B2C FD 2A         mov d, [d]
4305   1B2E 19 14         mov al, 20
4306   1B30 05 04         syscall sys_filesystem
4307   1B32             ; --- END INLINE ASM BLOCK
4308   1B32             
4309   1B32 F9            leave
4310   1B33 09            ret
4311   1B34             
4312   1B34             create_file:
4313   1B34 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4314   1B37 F9            leave
4315   1B38 09            ret
4316   1B39             
4317   1B39             delete_file:
4318   1B39 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4319   1B3C             
4320   1B3C             ; --- BEGIN INLINE ASM BLOCK
4321   1B3C FA 05 00      lea d, [bp + 5] ; $filename
4322   1B3F 19 0A         mov al, 10
4323   1B41 05 04         syscall sys_filesystem
4324   1B43             ; --- END INLINE ASM BLOCK
4325   1B43             
4326   1B43 F9            leave
4327   1B44 09            ret
4328   1B45             
4329   1B45             fopen:
4330   1B45 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4331   1B48 F9            leave
4332   1B49 09            ret
4333   1B4A             
4334   1B4A             fclose:
4335   1B4A F8 00 00      enter 0 ; (push bp; mov bp, sp)
4336   1B4D F9            leave
4337   1B4E 09            ret
4338   1B4F             
4339   1B4F             load_hex:
4340   1B4F F8 00 00      enter 0 ; (push bp; mov bp, sp)
4341   1B52             ; $temp 
4342   1B52 52 02 00      sub sp, 2
4343   1B55             ;; temp = alloc(32768); 
4344   1B55 FA FF FF      lea d, [bp + -1] ; $temp
4345   1B58 DA            push d
4346   1B59 26 00 80      mov b, $8000
4347   1B5C FD AB         swp b
4348   1B5E D8            push b
4349   1B5F 07 34 09      call alloc
4350   1B62 51 02 00      add sp, 2
4351   1B65 E7            pop d
4352   1B66 FD 43         mov [d], b
4353   1B68             
4354   1B68             ; --- BEGIN INLINE ASM BLOCK
4355   1B68               
4356   1B68               
4357   1B68               
4358   1B68               
4359   1B68               
4360   1B68             _load_hex:
4361   1B68 D7            push a
4362   1B69 D8            push b
4363   1B6A DA            push d
4364   1B6B E2            push si
4365   1B6C E3            push di
4366   1B6D 52 00 80      sub sp, $8000      
4367   1B70 38 00 00      mov c, 0
4368   1B73 48            mov a, sp
4369   1B74 77            inc a
4370   1B75 3C            mov d, a          
4371   1B76 07 B4 1C      call _gets        
4372   1B79 4D            mov si, a
4373   1B7A             __load_hex_loop:
4374   1B7A F6            lodsb             
4375   1B7B B9 00         cmp al, 0         
4376   1B7D C6 8B 1B      jz __load_hex_ret
4377   1B80 36            mov bh, al
4378   1B81 F6            lodsb
4379   1B82 2F            mov bl, al
4380   1B83 07 6A 1C      call _atoi        
4381   1B86 F7            stosb             
4382   1B87 78            inc c
4383   1B88 0A 7A 1B      jmp __load_hex_loop
4384   1B8B             __load_hex_ret:
4385   1B8B 51 00 80      add sp, $8000
4386   1B8E F0            pop di
4387   1B8F EF            pop si
4388   1B90 E7            pop d
4389   1B91 E5            pop b
4390   1B92 E4            pop a
4391   1B93             ; --- END INLINE ASM BLOCK
4392   1B93             
4393   1B93 F9            leave
4394   1B94 09            ret
4395   1B95             
4396   1B95             getparam:
4397   1B95 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4398   1B98             ; $data 
4399   1B98 52 01 00      sub sp, 1
4400   1B9B             
4401   1B9B             ; --- BEGIN INLINE ASM BLOCK
4402   1B9B 19 04         mov al, 4
4403   1B9D FA 05 00      lea d, [bp + 5] ; $address
4404   1BA0 FD 2A         mov d, [d]
4405   1BA2 05 0C         syscall sys_system
4406   1BA4 FA 00 00      lea d, [bp + 0] ; $data
4407   1BA7 FD 3E         mov [d], bl
4408   1BA9             ; --- END INLINE ASM BLOCK
4409   1BA9             
4410   1BA9             ;; return data; 
4411   1BA9 FA 00 00      lea d, [bp + 0] ; $data
4412   1BAC 32            mov bl, [d]
4413   1BAD A7 00         mov bh, 0
4414   1BAF F9            leave
4415   1BB0 09            ret
4416   1BB1             
4417   1BB1             clear:
4418   1BB1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4419   1BB4             ;; print("\033[2J\033[H"); 
4420   1BB4 26 60 2C      mov b, __s3 ; "\033[2J\033[H"
4421   1BB7 FD AB         swp b
4422   1BB9 D8            push b
4423   1BBA 07 14 1B      call print
4424   1BBD 51 02 00      add sp, 2
4425   1BC0 F9            leave
4426   1BC1 09            ret
4427   1BC2             
4428   1BC2             include_stdio_asm:
4429   1BC2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4430   1BC5             
4431   1BC5             ; --- BEGIN INLINE ASM BLOCK
4432   1BC5             .include "lib/asm/stdio.asm"
0001+  1BC5             ;-----------------------------------------------------------------------------
0002+  1BC5             ; stdio.s
0003+  1BC5             ;-----------------------------------------------------------------------------
0004+  1BC5             .include "lib/asm/string.asm"
0001++ 1BC5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1BC5             ; string.s
0003++ 1BC5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1BC5             
0005++ 1BC5             
0006++ 1BC5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1BC5             ; _strrev
0008++ 1BC5             ; reverse a string
0009++ 1BC5             ; D = string address
0010++ 1BC5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1BC5             ; 01234
0012++ 1BC5             _strrev:
0013++ 1BC5 4B          	pusha
0014++ 1BC6 07 0C 1C    	call _strlen	; length in C
0015++ 1BC9 12          	mov a, c
0016++ 1BCA AF 01 00    	cmp a, 1
0017++ 1BCD D0 E7 1B    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1BD0 7D          	dec a
0019++ 1BD1 FD 4E       	mov si, d	; beginning of string
0020++ 1BD3 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1BD5 59          	add d, a	; end of string
0022++ 1BD6 12          	mov a, c
0023++ 1BD7 FD 9B       	shr a		; divide by 2
0024++ 1BD9 39          	mov c, a	; C now counts the steps
0025++ 1BDA             _strrev_L0:
0026++ 1BDA 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1BDB F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1BDC 3E          	mov [d], al	; store left char into right side
0029++ 1BDD 1B          	mov al, bl
0030++ 1BDE F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1BDF 7E          	dec c
0032++ 1BE0 7F          	dec d
0033++ 1BE1 C2 00 00    	cmp c, 0
0034++ 1BE4 C7 DA 1B    	jne _strrev_L0
0035++ 1BE7             _strrev_end:
0036++ 1BE7 4C          	popa
0037++ 1BE8 09          	ret
0038++ 1BE9             	
0039++ 1BE9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1BE9             ; _strchr
0041++ 1BE9             ; search string in D for char in AL
0042++ 1BE9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1BE9             _strchr:
0044++ 1BE9             _strchr_L0:
0045++ 1BE9 32          	mov bl, [d]
0046++ 1BEA C1 00       	cmp bl, 0
0047++ 1BEC C6 F7 1B    	je _strchr_end
0048++ 1BEF BA          	cmp al, bl
0049++ 1BF0 C6 F7 1B    	je _strchr_end
0050++ 1BF3 79          	inc d
0051++ 1BF4 0A E9 1B    	jmp _strchr_L0
0052++ 1BF7             _strchr_end:
0053++ 1BF7 1B          	mov al, bl
0054++ 1BF8 09          	ret
0055++ 1BF9             
0056++ 1BF9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1BF9             ; _strstr
0058++ 1BF9             ; find sub-string
0059++ 1BF9             ; str1 in SI
0060++ 1BF9             ; str2 in DI
0061++ 1BF9             ; SI points to end of source string
0062++ 1BF9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1BF9             _strstr:
0064++ 1BF9 DB          	push al
0065++ 1BFA DA          	push d
0066++ 1BFB E3          	push di
0067++ 1BFC             _strstr_loop:
0068++ 1BFC F3          	cmpsb					; compare a byte of the strings
0069++ 1BFD C7 08 1C    	jne _strstr_ret
0070++ 1C00 FC 00 00    	lea d, [di + 0]
0071++ 1C03 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1C05 C7 FC 1B    	jne _strstr_loop				; equal chars but not at end
0073++ 1C08             _strstr_ret:
0074++ 1C08 F0          	pop di
0075++ 1C09 E7          	pop d
0076++ 1C0A E8          	pop al
0077++ 1C0B 09          	ret
0078++ 1C0C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1C0C             ; length of null terminated string
0080++ 1C0C             ; result in C
0081++ 1C0C             ; pointer in D
0082++ 1C0C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1C0C             _strlen:
0084++ 1C0C DA          	push d
0085++ 1C0D 38 00 00    	mov c, 0
0086++ 1C10             _strlen_L1:
0087++ 1C10 BD 00       	cmp byte [d], 0
0088++ 1C12 C6 1A 1C    	je _strlen_ret
0089++ 1C15 79          	inc d
0090++ 1C16 78          	inc c
0091++ 1C17 0A 10 1C    	jmp _strlen_L1
0092++ 1C1A             _strlen_ret:
0093++ 1C1A E7          	pop d
0094++ 1C1B 09          	ret
0095++ 1C1C             
0096++ 1C1C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1C1C             ; STRCMP
0098++ 1C1C             ; compare two strings
0099++ 1C1C             ; str1 in SI
0100++ 1C1C             ; str2 in DI
0101++ 1C1C             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1C1C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1C1C             _strcmp:
0104++ 1C1C DB          	push al
0105++ 1C1D DA          	push d
0106++ 1C1E E3          	push di
0107++ 1C1F E2          	push si
0108++ 1C20             _strcmp_loop:
0109++ 1C20 F3          	cmpsb					; compare a byte of the strings
0110++ 1C21 C7 2C 1C    	jne _strcmp_ret
0111++ 1C24 FB FF FF    	lea d, [si +- 1]
0112++ 1C27 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1C29 C7 20 1C    	jne _strcmp_loop				; equal chars but not at end
0114++ 1C2C             _strcmp_ret:
0115++ 1C2C EF          	pop si
0116++ 1C2D F0          	pop di
0117++ 1C2E E7          	pop d
0118++ 1C2F E8          	pop al
0119++ 1C30 09          	ret
0120++ 1C31             
0121++ 1C31             
0122++ 1C31             ; STRCPY
0123++ 1C31             ; copy null terminated string from SI to DI
0124++ 1C31             ; source in SI
0125++ 1C31             ; destination in DI
0126++ 1C31             _strcpy:
0127++ 1C31 E2          	push si
0128++ 1C32 E3          	push di
0129++ 1C33 DB          	push al
0130++ 1C34             _strcpy_L1:
0131++ 1C34 F6          	lodsb
0132++ 1C35 F7          	stosb
0133++ 1C36 B9 00       	cmp al, 0
0134++ 1C38 C7 34 1C    	jne _strcpy_L1
0135++ 1C3B             _strcpy_end:
0136++ 1C3B E8          	pop al
0137++ 1C3C F0          	pop di
0138++ 1C3D EF          	pop si
0139++ 1C3E 09          	ret
0140++ 1C3F             
0141++ 1C3F             ; STRCAT
0142++ 1C3F             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1C3F             ; source in SI
0144++ 1C3F             ; destination in DI
0145++ 1C3F             _strcat:
0146++ 1C3F E2          	push si
0147++ 1C40 E3          	push di
0148++ 1C41 D7          	push a
0149++ 1C42 DA          	push d
0150++ 1C43 50          	mov a, di
0151++ 1C44 3C          	mov d, a
0152++ 1C45             _strcat_goto_end_L1:
0153++ 1C45 BD 00       	cmp byte[d], 0
0154++ 1C47 C6 4E 1C    	je _strcat_start
0155++ 1C4A 79          	inc d
0156++ 1C4B 0A 45 1C    	jmp _strcat_goto_end_L1
0157++ 1C4E             _strcat_start:
0158++ 1C4E FD 50       	mov di, d
0159++ 1C50             _strcat_L1:
0160++ 1C50 F6          	lodsb
0161++ 1C51 F7          	stosb
0162++ 1C52 B9 00       	cmp al, 0
0163++ 1C54 C7 50 1C    	jne _strcat_L1
0164++ 1C57             _strcat_end:
0165++ 1C57 E7          	pop d
0166++ 1C58 E4          	pop a
0167++ 1C59 F0          	pop di
0168++ 1C5A EF          	pop si
0169++ 1C5B 09          	ret
0170++ 1C5C             
0171++ 1C5C             
0005+  1C5C             
0006+  1C5C             ;-----------------------------------------------------------------------------
0007+  1C5C             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  1C5C             ; ASCII in BL
0009+  1C5C             ; result in AL
0010+  1C5C             ; ascii for F = 0100 0110
0011+  1C5C             ; ascii for 9 = 0011 1001
0012+  1C5C             ;-----------------------------------------------------------------------------
0013+  1C5C             hex_ascii_encode:
0014+  1C5C 1B            mov al, bl
0015+  1C5D 93 40         test al, $40        ; test if letter or number
0016+  1C5F C7 65 1C      jnz hex_letter
0017+  1C62 87 0F         and al, $0F        ; get number
0018+  1C64 09            ret
0019+  1C65             hex_letter:
0020+  1C65 87 0F         and al, $0F        ; get letter
0021+  1C67 6A 09         add al, 9
0022+  1C69 09            ret
0023+  1C6A             
0024+  1C6A             ;-----------------------------------------------------------------------------
0025+  1C6A             ; ATOI
0026+  1C6A             ; 2 letter hex string in B
0027+  1C6A             ; 8bit integer returned in AL
0028+  1C6A             ;-----------------------------------------------------------------------------
0029+  1C6A             _atoi:
0030+  1C6A D8            push b
0031+  1C6B 07 5C 1C      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  1C6E 30            mov bl, bh
0033+  1C6F DB            push al          ; save a
0034+  1C70 07 5C 1C      call hex_ascii_encode
0035+  1C73 EA            pop bl  
0036+  1C74 FD 9E 04      shl al, 4
0037+  1C77 8C            or al, bl
0038+  1C78 E5            pop b
0039+  1C79 09            ret  
0040+  1C7A             
0041+  1C7A             ;-----------------------------------------------------------------------------
0042+  1C7A             ; scanf
0043+  1C7A             ; no need for explanations!
0044+  1C7A             ;-----------------------------------------------------------------------------
0045+  1C7A             scanf:
0046+  1C7A 09            ret
0047+  1C7B             
0048+  1C7B             ;-----------------------------------------------------------------------------
0049+  1C7B             ; ITOA
0050+  1C7B             ; 8bit value in BL
0051+  1C7B             ; 2 byte ASCII result in A
0052+  1C7B             ;-----------------------------------------------------------------------------
0053+  1C7B             _itoa:
0054+  1C7B DA            push d
0055+  1C7C D8            push b
0056+  1C7D A7 00         mov bh, 0
0057+  1C7F FD A4 04      shr bl, 4  
0058+  1C82 74            mov d, b
0059+  1C83 1F 2B 1F      mov al, [d + s_hex_digits]
0060+  1C86 23            mov ah, al
0061+  1C87               
0062+  1C87 E5            pop b
0063+  1C88 D8            push b
0064+  1C89 A7 00         mov bh, 0
0065+  1C8B FD 87 0F      and bl, $0F
0066+  1C8E 74            mov d, b
0067+  1C8F 1F 2B 1F      mov al, [d + s_hex_digits]
0068+  1C92 E5            pop b
0069+  1C93 E7            pop d
0070+  1C94 09            ret
0071+  1C95             
0072+  1C95             ;-----------------------------------------------------------------------------
0073+  1C95             ; HEX STRING TO BINARY
0074+  1C95             ; di = destination address
0075+  1C95             ; si = source
0076+  1C95             ;-----------------------------------------------------------------------------
0077+  1C95             _hex_to_int:
0078+  1C95             _hex_to_int_L1:
0079+  1C95 F6            lodsb          ; load from [SI] to AL
0080+  1C96 B9 00         cmp al, 0        ; check if ASCII 0
0081+  1C98 C6 A5 1C      jz _hex_to_int_ret
0082+  1C9B 36            mov bh, al
0083+  1C9C F6            lodsb
0084+  1C9D 2F            mov bl, al
0085+  1C9E 07 6A 1C      call _atoi        ; convert ASCII byte in B to int (to AL)
0086+  1CA1 F7            stosb          ; store AL to [DI]
0087+  1CA2 0A 95 1C      jmp _hex_to_int_L1
0088+  1CA5             _hex_to_int_ret:
0089+  1CA5 09            ret    
0090+  1CA6             
0091+  1CA6             ;-----------------------------------------------------------------------------
0092+  1CA6             ; GETCHAR
0093+  1CA6             ; char in ah
0094+  1CA6             ;-----------------------------------------------------------------------------
0095+  1CA6             getch:
0096+  1CA6 DB            push al
0097+  1CA7             getch_retry:
0098+  1CA7 19 01         mov al, 1
0099+  1CA9 05 03         syscall sys_io      ; receive in AH
0100+  1CAB E8            pop al
0101+  1CAC 09            ret
0102+  1CAD             
0103+  1CAD             ;-----------------------------------------------------------------------------
0104+  1CAD             ; PUTCHAR
0105+  1CAD             ; char in ah
0106+  1CAD             ;-----------------------------------------------------------------------------
0107+  1CAD             _putchar:
0108+  1CAD D7            push a
0109+  1CAE 19 00         mov al, 0
0110+  1CB0 05 03         syscall sys_io      ; char in AH
0111+  1CB2 E4            pop a
0112+  1CB3 09            ret
0113+  1CB4             
0114+  1CB4             ;-----------------------------------------------------------------------------
0115+  1CB4             ;; INPUT A STRING
0116+  1CB4             ;; terminates with null
0117+  1CB4             ;; pointer in D
0118+  1CB4             ;-----------------------------------------------------------------------------
0119+  1CB4             _gets:
0120+  1CB4 D7            push a
0121+  1CB5 DA            push d
0122+  1CB6             _gets_loop:
0123+  1CB6 19 01         mov al, 1
0124+  1CB8 05 03         syscall sys_io      ; receive in AH
0125+  1CBA B9 00         cmp al, 0        ; check error code (AL)
0126+  1CBC C6 B6 1C      je _gets_loop      ; if no char received, retry
0127+  1CBF             
0128+  1CBF 76 1B         cmp ah, 27
0129+  1CC1 C6 E2 1C      je _gets_ansi_esc
0130+  1CC4 76 0A         cmp ah, $0A        ; LF
0131+  1CC6 C6 4D 1D      je _gets_end
0132+  1CC9 76 0D         cmp ah, $0D        ; CR
0133+  1CCB C6 4D 1D      je _gets_end
0134+  1CCE 76 5C         cmp ah, $5C        ; '\\'
0135+  1CD0 C6 0E 1D      je _gets_escape
0136+  1CD3               
0137+  1CD3 76 08         cmp ah, $08      ; check for backspace
0138+  1CD5 C6 DE 1C      je _gets_backspace
0139+  1CD8             
0140+  1CD8 1A            mov al, ah
0141+  1CD9 3E            mov [d], al
0142+  1CDA 79            inc d
0143+  1CDB 0A B6 1C      jmp _gets_loop
0144+  1CDE             _gets_backspace:
0145+  1CDE 7F            dec d
0146+  1CDF 0A B6 1C      jmp _gets_loop
0147+  1CE2             _gets_ansi_esc:
0148+  1CE2 19 01         mov al, 1
0149+  1CE4 05 03         syscall sys_io        ; receive in AH without echo
0150+  1CE6 B9 00         cmp al, 0          ; check error code (AL)
0151+  1CE8 C6 E2 1C      je _gets_ansi_esc    ; if no char received, retry
0152+  1CEB 76 5B         cmp ah, '['
0153+  1CED C7 B6 1C      jne _gets_loop
0154+  1CF0             _gets_ansi_esc_2:
0155+  1CF0 19 01         mov al, 1
0156+  1CF2 05 03         syscall sys_io          ; receive in AH without echo
0157+  1CF4 B9 00         cmp al, 0            ; check error code (AL)
0158+  1CF6 C6 F0 1C      je _gets_ansi_esc_2  ; if no char received, retry
0159+  1CF9 76 44         cmp ah, 'D'
0160+  1CFB C6 06 1D      je _gets_left_arrow
0161+  1CFE 76 43         cmp ah, 'C'
0162+  1D00 C6 0A 1D      je _gets_right_arrow
0163+  1D03 0A B6 1C      jmp _gets_loop
0164+  1D06             _gets_left_arrow:
0165+  1D06 7F            dec d
0166+  1D07 0A B6 1C      jmp _gets_loop
0167+  1D0A             _gets_right_arrow:
0168+  1D0A 79            inc d
0169+  1D0B 0A B6 1C      jmp _gets_loop
0170+  1D0E             _gets_escape:
0171+  1D0E 19 01         mov al, 1
0172+  1D10 05 03         syscall sys_io      ; receive in AH
0173+  1D12 B9 00         cmp al, 0        ; check error code (AL)
0174+  1D14 C6 0E 1D      je _gets_escape      ; if no char received, retry
0175+  1D17 76 6E         cmp ah, 'n'
0176+  1D19 C6 38 1D      je _gets_LF
0177+  1D1C 76 72         cmp ah, 'r'
0178+  1D1E C6 3F 1D      je _gets_CR
0179+  1D21 76 30         cmp ah, '0'
0180+  1D23 C6 46 1D      je _gets_NULL
0181+  1D26 76 5C         cmp ah, $5C  ; '\'
0182+  1D28 C6 31 1D      je _gets_slash
0183+  1D2B 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0184+  1D2C 3E            mov [d], al
0185+  1D2D 79            inc d
0186+  1D2E 0A B6 1C      jmp _gets_loop
0187+  1D31             _gets_slash:
0188+  1D31 19 5C         mov al, $5C
0189+  1D33 3E            mov [d], al
0190+  1D34 79            inc d
0191+  1D35 0A B6 1C      jmp _gets_loop
0192+  1D38             _gets_LF:
0193+  1D38 19 0A         mov al, $0A
0194+  1D3A 3E            mov [d], al
0195+  1D3B 79            inc d
0196+  1D3C 0A B6 1C      jmp _gets_loop
0197+  1D3F             _gets_CR:
0198+  1D3F 19 0D         mov al, $0D
0199+  1D41 3E            mov [d], al
0200+  1D42 79            inc d
0201+  1D43 0A B6 1C      jmp _gets_loop
0202+  1D46             _gets_NULL:
0203+  1D46 19 00         mov al, $00
0204+  1D48 3E            mov [d], al
0205+  1D49 79            inc d
0206+  1D4A 0A B6 1C      jmp _gets_loop
0207+  1D4D             _gets_end:
0208+  1D4D 19 00         mov al, 0
0209+  1D4F 3E            mov [d], al        ; terminate string
0210+  1D50 E7            pop d
0211+  1D51 E4            pop a
0212+  1D52 09            ret
0213+  1D53             
0214+  1D53             ;-----------------------------------------------------------------------------
0215+  1D53             ;; INPUT TEXT
0216+  1D53             ;; terminated with CTRL+D
0217+  1D53             ;; pointer in D
0218+  1D53             ;-----------------------------------------------------------------------------
0219+  1D53             _gettxt:
0220+  1D53 D7            push a
0221+  1D54 DA            push d
0222+  1D55             _gettxt_loop:
0223+  1D55 19 01         mov al, 1
0224+  1D57 05 03         syscall sys_io      ; receive in AH
0225+  1D59 B9 00         cmp al, 0        ; check error code (AL)
0226+  1D5B C6 55 1D      je _gettxt_loop    ; if no char received, retry
0227+  1D5E 76 04         cmp ah, 4      ; EOT
0228+  1D60 C6 9E 1D      je _gettxt_end
0229+  1D63 76 08         cmp ah, $08      ; check for backspace
0230+  1D65 C6 9A 1D      je _gettxt_backspace
0231+  1D68 76 5C         cmp ah, $5C        ; '\'
0232+  1D6A C6 73 1D      je _gettxt_escape
0233+  1D6D 1A            mov al, ah
0234+  1D6E 3E            mov [d], al
0235+  1D6F 79            inc d
0236+  1D70 0A 55 1D      jmp _gettxt_loop
0237+  1D73             _gettxt_escape:
0238+  1D73 19 01         mov al, 1
0239+  1D75 05 03         syscall sys_io      ; receive in AH
0240+  1D77 B9 00         cmp al, 0        ; check error code (AL)
0241+  1D79 C6 73 1D      je _gettxt_escape    ; if no char received, retry
0242+  1D7C 76 6E         cmp ah, 'n'
0243+  1D7E C6 8C 1D      je _gettxt_LF
0244+  1D81 76 72         cmp ah, 'r'
0245+  1D83 C6 93 1D      je _gettxt_CR
0246+  1D86 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0247+  1D87 3E            mov [d], al
0248+  1D88 79            inc d
0249+  1D89 0A 55 1D      jmp _gettxt_loop
0250+  1D8C             _gettxt_LF:
0251+  1D8C 19 0A         mov al, $0A
0252+  1D8E 3E            mov [d], al
0253+  1D8F 79            inc d
0254+  1D90 0A 55 1D      jmp _gettxt_loop
0255+  1D93             _gettxt_CR:
0256+  1D93 19 0D         mov al, $0D
0257+  1D95 3E            mov [d], al
0258+  1D96 79            inc d
0259+  1D97 0A 55 1D      jmp _gettxt_loop
0260+  1D9A             _gettxt_backspace:
0261+  1D9A 7F            dec d
0262+  1D9B 0A 55 1D      jmp _gettxt_loop
0263+  1D9E             _gettxt_end:
0264+  1D9E 19 00         mov al, 0
0265+  1DA0 3E            mov [d], al        ; terminate string
0266+  1DA1 E7            pop d
0267+  1DA2 E4            pop a
0268+  1DA3 09            ret
0269+  1DA4             
0270+  1DA4             ;-----------------------------------------------------------------------------
0271+  1DA4             ; PRINT NEW LINE
0272+  1DA4             ;-----------------------------------------------------------------------------
0273+  1DA4             printnl:
0274+  1DA4 D7            push a
0275+  1DA5 10 00 0A      mov a, $0A00
0276+  1DA8 05 03         syscall sys_io
0277+  1DAA 10 00 0D      mov a, $0D00
0278+  1DAD 05 03         syscall sys_io
0279+  1DAF E4            pop a
0280+  1DB0 09            ret
0281+  1DB1             
0282+  1DB1             ;-----------------------------------------------------------------------------
0283+  1DB1             ; _strtoint
0284+  1DB1             ; 4 digit hex string number in d
0285+  1DB1             ; integer returned in A
0286+  1DB1             ;-----------------------------------------------------------------------------
0287+  1DB1             _strtointx:
0288+  1DB1 D8            push b
0289+  1DB2 32            mov bl, [d]
0290+  1DB3 37            mov bh, bl
0291+  1DB4 33 01 00      mov bl, [d + 1]
0292+  1DB7 07 6A 1C      call _atoi        ; convert to int in AL
0293+  1DBA 23            mov ah, al        ; move to AH
0294+  1DBB 33 02 00      mov bl, [d + 2]
0295+  1DBE 37            mov bh, bl
0296+  1DBF 33 03 00      mov bl, [d + 3]
0297+  1DC2 07 6A 1C      call _atoi        ; convert to int in AL
0298+  1DC5 E5            pop b
0299+  1DC6 09            ret
0300+  1DC7             
0301+  1DC7             ;-----------------------------------------------------------------------------
0302+  1DC7             ; _strtoint
0303+  1DC7             ; 5 digit base10 string number in d
0304+  1DC7             ; integer returned in A
0305+  1DC7             ;-----------------------------------------------------------------------------
0306+  1DC7             _strtoint:
0307+  1DC7 E2            push si
0308+  1DC8 D8            push b
0309+  1DC9 D9            push c
0310+  1DCA DA            push d
0311+  1DCB 07 0C 1C      call _strlen      ; get string length in C
0312+  1DCE 7E            dec c
0313+  1DCF FD 4E         mov si, d
0314+  1DD1 12            mov a, c
0315+  1DD2 FD 99         shl a
0316+  1DD4 3B 43 1F      mov d, table_power
0317+  1DD7 59            add d, a
0318+  1DD8 38 00 00      mov c, 0
0319+  1DDB             _strtoint_L0:
0320+  1DDB F6            lodsb      ; load ASCII to al
0321+  1DDC B9 00         cmp al, 0
0322+  1DDE C6 F1 1D      je _strtoint_end
0323+  1DE1 6F 30         sub al, $30    ; make into integer
0324+  1DE3 22 00         mov ah, 0
0325+  1DE5 2A            mov b, [d]
0326+  1DE6 AC            mul a, b      ; result in B since it fits in 16bits
0327+  1DE7 11            mov a, b
0328+  1DE8 28            mov b, c
0329+  1DE9 54            add a, b
0330+  1DEA 39            mov c, a
0331+  1DEB 63 02 00      sub d, 2
0332+  1DEE 0A DB 1D      jmp _strtoint_L0
0333+  1DF1             _strtoint_end:
0334+  1DF1 12            mov a, c
0335+  1DF2 E7            pop d
0336+  1DF3 E6            pop c
0337+  1DF4 E5            pop b
0338+  1DF5 EF            pop si
0339+  1DF6 09            ret
0340+  1DF7             
0341+  1DF7             ;-----------------------------------------------------------------------------
0342+  1DF7             ; PRINT NULL TERMINATED STRING
0343+  1DF7             ; pointer in D
0344+  1DF7             ;-----------------------------------------------------------------------------
0345+  1DF7             _puts:
0346+  1DF7 D7            push a
0347+  1DF8 DA            push d
0348+  1DF9             _puts_L1:
0349+  1DF9 1E            mov al, [d]
0350+  1DFA B9 00         cmp al, 0
0351+  1DFC C6 08 1E      jz _puts_END
0352+  1DFF 23            mov ah, al
0353+  1E00 19 00         mov al, 0
0354+  1E02 05 03         syscall sys_io
0355+  1E04 79            inc d
0356+  1E05 0A F9 1D      jmp _puts_L1
0357+  1E08             _puts_END:
0358+  1E08 E7            pop d
0359+  1E09 E4            pop a
0360+  1E0A 09            ret
0361+  1E0B             
0362+  1E0B             ;-----------------------------------------------------------------------------
0363+  1E0B             ; PRINT N SIZE STRING
0364+  1E0B             ; pointer in D
0365+  1E0B             ; size in C
0366+  1E0B             ;-----------------------------------------------------------------------------
0367+  1E0B             _putsn:
0368+  1E0B DB            push al
0369+  1E0C DA            push d
0370+  1E0D D9            push c
0371+  1E0E             _putsn_L0:
0372+  1E0E 1E            mov al, [d]
0373+  1E0F 23            mov ah, al
0374+  1E10 19 00         mov al, 0
0375+  1E12 05 03         syscall sys_io
0376+  1E14 79            inc d
0377+  1E15 7E            dec c  
0378+  1E16 C2 00 00      cmp c, 0
0379+  1E19 C7 0E 1E      jne _putsn_L0
0380+  1E1C             _putsn_end:
0381+  1E1C E6            pop c
0382+  1E1D E7            pop d
0383+  1E1E E8            pop al
0384+  1E1F 09            ret
0385+  1E20             
0386+  1E20             ;-----------------------------------------------------------------------------
0387+  1E20             ; print 16bit decimal number
0388+  1E20             ; input number in A
0389+  1E20             ;-----------------------------------------------------------------------------
0390+  1E20             print_u16d:
0391+  1E20 D7            push a
0392+  1E21 D8            push b
0393+  1E22 26 10 27      mov b, 10000
0394+  1E25 AE            div a, b      ; get 10000's coeff.
0395+  1E26 07 48 1E      call print_number
0396+  1E29 11            mov a, b
0397+  1E2A 26 E8 03      mov b, 1000
0398+  1E2D AE            div a, b      ; get 1000's coeff.
0399+  1E2E 07 48 1E      call print_number
0400+  1E31 11            mov a, b
0401+  1E32 26 64 00      mov b, 100
0402+  1E35 AE            div a, b
0403+  1E36 07 48 1E      call print_number
0404+  1E39 11            mov a, b
0405+  1E3A 26 0A 00      mov b, 10
0406+  1E3D AE            div a, b
0407+  1E3E 07 48 1E      call print_number
0408+  1E41 1B            mov al, bl      ; 1's coeff in bl
0409+  1E42 07 48 1E      call print_number
0410+  1E45 E5            pop b
0411+  1E46 E4            pop a
0412+  1E47 09            ret
0413+  1E48             
0414+  1E48             ;-----------------------------------------------------------------------------
0415+  1E48             ; print AL
0416+  1E48             ;-----------------------------------------------------------------------------
0417+  1E48             print_number:
0418+  1E48 6A 30         add al, $30
0419+  1E4A 23            mov ah, al
0420+  1E4B 07 AD 1C      call _putchar
0421+  1E4E 09            ret
0422+  1E4F             
0423+  1E4F             ;-----------------------------------------------------------------------------
0424+  1E4F             ; PRINT 16BIT HEX INTEGER
0425+  1E4F             ; integer value in reg B
0426+  1E4F             ;-----------------------------------------------------------------------------
0427+  1E4F             print_u16x:
0428+  1E4F D7            push a
0429+  1E50 D8            push b
0430+  1E51 DD            push bl
0431+  1E52 30            mov bl, bh
0432+  1E53 07 7B 1C      call _itoa        ; convert bh to char in A
0433+  1E56 2F            mov bl, al        ; save al
0434+  1E57 19 00         mov al, 0
0435+  1E59 05 03         syscall sys_io        ; display AH
0436+  1E5B 24            mov ah, bl        ; retrieve al
0437+  1E5C 19 00         mov al, 0
0438+  1E5E 05 03         syscall sys_io        ; display AL
0439+  1E60             
0440+  1E60 EA            pop bl
0441+  1E61 07 7B 1C      call _itoa        ; convert bh to char in A
0442+  1E64 2F            mov bl, al        ; save al
0443+  1E65 19 00         mov al, 0
0444+  1E67 05 03         syscall sys_io        ; display AH
0445+  1E69 24            mov ah, bl        ; retrieve al
0446+  1E6A 19 00         mov al, 0
0447+  1E6C 05 03         syscall sys_io        ; display AL
0448+  1E6E             
0449+  1E6E E5            pop b
0450+  1E6F E4            pop a
0451+  1E70 09            ret
0452+  1E71             
0453+  1E71             ;-----------------------------------------------------------------------------
0454+  1E71             ; INPUT 16BIT HEX INTEGER
0455+  1E71             ; read 16bit integer into A
0456+  1E71             ;-----------------------------------------------------------------------------
0457+  1E71             scan_u16x:
0458+  1E71 F8 10 00      enter 16
0459+  1E74 D8            push b
0460+  1E75 DA            push d
0461+  1E76             
0462+  1E76 FA F1 FF      lea d, [bp + -15]
0463+  1E79 07 B4 1C      call _gets        ; get number
0464+  1E7C             
0465+  1E7C 32            mov bl, [d]
0466+  1E7D 37            mov bh, bl
0467+  1E7E 33 01 00      mov bl, [d + 1]
0468+  1E81 07 6A 1C      call _atoi        ; convert to int in AL
0469+  1E84 23            mov ah, al        ; move to AH
0470+  1E85             
0471+  1E85 33 02 00      mov bl, [d + 2]
0472+  1E88 37            mov bh, bl
0473+  1E89 33 03 00      mov bl, [d + 3]
0474+  1E8C 07 6A 1C      call _atoi        ; convert to int in AL
0475+  1E8F             
0476+  1E8F E7            pop d
0477+  1E90 E5            pop b
0478+  1E91 F9            leave
0479+  1E92 09            ret
0480+  1E93             
0481+  1E93             ;-----------------------------------------------------------------------------
0482+  1E93             ; PRINT 8bit HEX INTEGER
0483+  1E93             ; integer value in reg bl
0484+  1E93             ;-----------------------------------------------------------------------------
0485+  1E93             print_u8x:
0486+  1E93 D7            push a
0487+  1E94 DD            push bl
0488+  1E95             
0489+  1E95 07 7B 1C      call _itoa        ; convert bl to char in A
0490+  1E98 2F            mov bl, al        ; save al
0491+  1E99 19 00         mov al, 0
0492+  1E9B 05 03         syscall sys_io        ; display AH
0493+  1E9D 24            mov ah, bl        ; retrieve al
0494+  1E9E 19 00         mov al, 0
0495+  1EA0 05 03         syscall sys_io        ; display AL
0496+  1EA2             
0497+  1EA2 EA            pop bl
0498+  1EA3 E4            pop a
0499+  1EA4 09            ret
0500+  1EA5             
0501+  1EA5             ;-----------------------------------------------------------------------------
0502+  1EA5             ; print 8bit decimal unsigned number
0503+  1EA5             ; input number in AL
0504+  1EA5             ;-----------------------------------------------------------------------------
0505+  1EA5             print_u8d:
0506+  1EA5 D7            push a
0507+  1EA6 D8            push b
0508+  1EA7             
0509+  1EA7 22 00         mov ah, 0
0510+  1EA9 26 64 00      mov b, 100
0511+  1EAC AE            div a, b
0512+  1EAD D8            push b      ; save remainder
0513+  1EAE B9 00         cmp al, 0
0514+  1EB0 C6 BA 1E      je skip100
0515+  1EB3 6A 30         add al, $30
0516+  1EB5 23            mov ah, al
0517+  1EB6 19 00         mov al, 0
0518+  1EB8 05 03         syscall sys_io  ; print coeff
0519+  1EBA             skip100:
0520+  1EBA E4            pop a
0521+  1EBB 22 00         mov ah, 0
0522+  1EBD 26 0A 00      mov b, 10
0523+  1EC0 AE            div a, b
0524+  1EC1 D8            push b      ; save remainder
0525+  1EC2 B9 00         cmp al, 0
0526+  1EC4 C6 CE 1E      je skip10
0527+  1EC7 6A 30         add al, $30
0528+  1EC9 23            mov ah, al
0529+  1ECA 19 00         mov al, 0
0530+  1ECC 05 03         syscall sys_io  ; print coeff
0531+  1ECE             skip10:
0532+  1ECE E4            pop a
0533+  1ECF 1B            mov al, bl
0534+  1ED0 6A 30         add al, $30
0535+  1ED2 23            mov ah, al
0536+  1ED3 19 00         mov al, 0
0537+  1ED5 05 03         syscall sys_io  ; print coeff
0538+  1ED7 E5            pop b
0539+  1ED8 E4            pop a
0540+  1ED9 09            ret
0541+  1EDA             
0542+  1EDA             ;-----------------------------------------------------------------------------
0543+  1EDA             ; INPUT 8BIT HEX INTEGER
0544+  1EDA             ; read 8bit integer into AL
0545+  1EDA             ;-----------------------------------------------------------------------------
0546+  1EDA             scan_u8x:
0547+  1EDA F8 04 00      enter 4
0548+  1EDD D8            push b
0549+  1EDE DA            push d
0550+  1EDF             
0551+  1EDF FA FD FF      lea d, [bp + -3]
0552+  1EE2 07 B4 1C      call _gets        ; get number
0553+  1EE5             
0554+  1EE5 32            mov bl, [d]
0555+  1EE6 37            mov bh, bl
0556+  1EE7 33 01 00      mov bl, [d + 1]
0557+  1EEA 07 6A 1C      call _atoi        ; convert to int in AL
0558+  1EED             
0559+  1EED E7            pop d
0560+  1EEE E5            pop b
0561+  1EEF F9            leave
0562+  1EF0 09            ret
0563+  1EF1             
0564+  1EF1             ;-----------------------------------------------------------------------------
0565+  1EF1             ; input decimal number
0566+  1EF1             ; result in A
0567+  1EF1             ; 655'\0'
0568+  1EF1             ; low--------high
0569+  1EF1             ;-----------------------------------------------------------------------------
0570+  1EF1             scan_u16d:
0571+  1EF1 F8 08 00      enter 8
0572+  1EF4 E2            push si
0573+  1EF5 D8            push b
0574+  1EF6 D9            push c
0575+  1EF7 DA            push d
0576+  1EF8 FA F9 FF      lea d, [bp +- 7]
0577+  1EFB 07 B4 1C      call _gets
0578+  1EFE 07 0C 1C      call _strlen      ; get string length in C
0579+  1F01 7E            dec c
0580+  1F02 FD 4E         mov si, d
0581+  1F04 12            mov a, c
0582+  1F05 FD 99         shl a
0583+  1F07 3B 43 1F      mov d, table_power
0584+  1F0A 59            add d, a
0585+  1F0B 38 00 00      mov c, 0
0586+  1F0E             mul_loop:
0587+  1F0E F6            lodsb      ; load ASCII to al
0588+  1F0F B9 00         cmp al, 0
0589+  1F11 C6 24 1F      je mul_exit
0590+  1F14 6F 30         sub al, $30    ; make into integer
0591+  1F16 22 00         mov ah, 0
0592+  1F18 2A            mov b, [d]
0593+  1F19 AC            mul a, b      ; result in B since it fits in 16bits
0594+  1F1A 11            mov a, b
0595+  1F1B 28            mov b, c
0596+  1F1C 54            add a, b
0597+  1F1D 39            mov c, a
0598+  1F1E 63 02 00      sub d, 2
0599+  1F21 0A 0E 1F      jmp mul_loop
0600+  1F24             mul_exit:
0601+  1F24 12            mov a, c
0602+  1F25 E7            pop d
0603+  1F26 E6            pop c
0604+  1F27 E5            pop b
0605+  1F28 EF            pop si
0606+  1F29 F9            leave
0607+  1F2A 09            ret
0608+  1F2B             
0609+  1F2B 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0609+  1F2F 34 35 36 37 
0609+  1F33 38 39 41 42 
0609+  1F37 43 44 45 46 
0610+  1F3B 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0610+  1F3F 1B 5B 48 00 
0611+  1F43             
0612+  1F43             table_power:
0613+  1F43 01 00         .dw 1
0614+  1F45 0A 00         .dw 10
0615+  1F47 64 00         .dw 100
0616+  1F49 E8 03         .dw 1000
0617+  1F4B 10 27         .dw 100004433   1F4D             ; --- END INLINE ASM BLOCK
4434   1F4D             
4435   1F4D F9            leave
4436   1F4E 09            ret
4437   1F4F             
4438   1F4F             show:
4439   1F4F F8 00 00      enter 0 ; (push bp; mov bp, sp)
4440   1F52             ; $i 
4441   1F52             ; $j 
4442   1F52 52 04 00      sub sp, 4
4443   1F55             ;; for(i = 0; i <   30     ; i++){ 
4444   1F55             _for62_init:
4445   1F55 FA FF FF      lea d, [bp + -1] ; $i
4446   1F58 DA            push d
4447   1F59 26 00 00      mov b, $0
4448   1F5C E7            pop d
4449   1F5D FD 43         mov [d], b
4450   1F5F             _for62_cond:
4451   1F5F FA FF FF      lea d, [bp + -1] ; $i
4452   1F62 2A            mov b, [d]
4453   1F63             ; START RELATIONAL
4454   1F63 D7            push a
4455   1F64 11            mov a, b
4456   1F65 26 1E 00      mov b, $1e
4457   1F68 B0            cmp a, b
4458   1F69 FD 73         slt ; <= (signed)
4459   1F6B E4            pop a
4460   1F6C             ; END RELATIONAL
4461   1F6C C0 00 00      cmp b, 0
4462   1F6F C6 F6 1F      je _for62_exit
4463   1F72             _for62_block:
4464   1F72             ;; for(j = 0; j <    40    ; j++){ 
4465   1F72             _for63_init:
4466   1F72 FA FD FF      lea d, [bp + -3] ; $j
4467   1F75 DA            push d
4468   1F76 26 00 00      mov b, $0
4469   1F79 E7            pop d
4470   1F7A FD 43         mov [d], b
4471   1F7C             _for63_cond:
4472   1F7C FA FD FF      lea d, [bp + -3] ; $j
4473   1F7F 2A            mov b, [d]
4474   1F80             ; START RELATIONAL
4475   1F80 D7            push a
4476   1F81 11            mov a, b
4477   1F82 26 28 00      mov b, $28
4478   1F85 B0            cmp a, b
4479   1F86 FD 73         slt ; <= (signed)
4480   1F88 E4            pop a
4481   1F89             ; END RELATIONAL
4482   1F89 C0 00 00      cmp b, 0
4483   1F8C C6 DC 1F      je _for63_exit
4484   1F8F             _for63_block:
4485   1F8F             ;; currState[i][j] == '@' ? printf("@ ") : printf(". "); 
4486   1F8F             _ternary64_cond:
4487   1F8F 3B 5A 27      mov d, _currState_data ; $currState
4488   1F92 D7            push a
4489   1F93 DA            push d
4490   1F94 FA FF FF      lea d, [bp + -1] ; $i
4491   1F97 2A            mov b, [d]
4492   1F98 E7            pop d
4493   1F99 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
4494   1F9D DA            push d
4495   1F9E FA FD FF      lea d, [bp + -3] ; $j
4496   1FA1 2A            mov b, [d]
4497   1FA2 E7            pop d
4498   1FA3 5A            add d, b
4499   1FA4 E4            pop a
4500   1FA5 32            mov bl, [d]
4501   1FA6 A7 00         mov bh, 0
4502   1FA8             ; START RELATIONAL
4503   1FA8 D7            push a
4504   1FA9 11            mov a, b
4505   1FAA 26 40 00      mov b, $40
4506   1FAD B0            cmp a, b
4507   1FAE FD 71         seq ; ==
4508   1FB0 E4            pop a
4509   1FB1             ; END RELATIONAL
4510   1FB1 C0 00 00      cmp b, 0
4511   1FB4 C6 C3 1F      je _ternary64_false
4512   1FB7             _ternary64_true:
4513   1FB7 26 68 2C      mov b, __s4 ; "@ "
4514   1FBA FD AB         swp b
4515   1FBC D8            push b
4516   1FBD 07 DD 12      call printf
4517   1FC0 0A CC 1F      jmp _ternary64_exit
4518   1FC3             _ternary64_false:
4519   1FC3 26 6B 2C      mov b, __s5 ; ". "
4520   1FC6 FD AB         swp b
4521   1FC8 D8            push b
4522   1FC9 07 DD 12      call printf
4523   1FCC             _ternary64_exit:
4524   1FCC             _for63_update:
4525   1FCC FA FD FF      lea d, [bp + -3] ; $j
4526   1FCF 2A            mov b, [d]
4527   1FD0 D8            push b
4528   1FD1 FD 77         inc b
4529   1FD3 FA FD FF      lea d, [bp + -3] ; $j
4530   1FD6 FD 43         mov [d], b
4531   1FD8 E5            pop b
4532   1FD9 0A 7C 1F      jmp _for63_cond
4533   1FDC             _for63_exit:
4534   1FDC             ;; putchar(10); 
4535   1FDC 26 0A 00      mov b, $a
4536   1FDF DD            push bl
4537   1FE0 07 CC 1A      call putchar
4538   1FE3 51 01 00      add sp, 1
4539   1FE6             _for62_update:
4540   1FE6 FA FF FF      lea d, [bp + -1] ; $i
4541   1FE9 2A            mov b, [d]
4542   1FEA D8            push b
4543   1FEB FD 77         inc b
4544   1FED FA FF FF      lea d, [bp + -1] ; $i
4545   1FF0 FD 43         mov [d], b
4546   1FF2 E5            pop b
4547   1FF3 0A 5F 1F      jmp _for62_cond
4548   1FF6             _for62_exit:
4549   1FF6 F9            leave
4550   1FF7 09            ret
4551   1FF8             
4552   1FF8             alive:
4553   1FF8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4554   1FFB             ;; if(currState[i][j] == '@') return 1; 
4555   1FFB             _if65_cond:
4556   1FFB 3B 5A 27      mov d, _currState_data ; $currState
4557   1FFE D7            push a
4558   1FFF DA            push d
4559   2000 FA 05 00      lea d, [bp + 5] ; $i
4560   2003 2A            mov b, [d]
4561   2004 E7            pop d
4562   2005 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
4563   2009 DA            push d
4564   200A FA 07 00      lea d, [bp + 7] ; $j
4565   200D 2A            mov b, [d]
4566   200E E7            pop d
4567   200F 5A            add d, b
4568   2010 E4            pop a
4569   2011 32            mov bl, [d]
4570   2012 A7 00         mov bh, 0
4571   2014             ; START RELATIONAL
4572   2014 D7            push a
4573   2015 11            mov a, b
4574   2016 26 40 00      mov b, $40
4575   2019 B0            cmp a, b
4576   201A FD 71         seq ; ==
4577   201C E4            pop a
4578   201D             ; END RELATIONAL
4579   201D C0 00 00      cmp b, 0
4580   2020 C6 2B 20      je _if65_else
4581   2023             _if65_true:
4582   2023             ;; return 1; 
4583   2023 26 01 00      mov b, $1
4584   2026 F9            leave
4585   2027 09            ret
4586   2028 0A 30 20      jmp _if65_exit
4587   202B             _if65_else:
4588   202B             ;; return 0; 
4589   202B 26 00 00      mov b, $0
4590   202E F9            leave
4591   202F 09            ret
4592   2030             _if65_exit:
4593   2030 F9            leave
4594   2031 09            ret
4595   2032             
4596   2032             neighbours:
4597   2032 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4598   2035             ; $count 
4599   2035 52 02 00      sub sp, 2
4600   2038             ;; count = 0; 
4601   2038 FA FF FF      lea d, [bp + -1] ; $count
4602   203B DA            push d
4603   203C 26 00 00      mov b, $0
4604   203F E7            pop d
4605   2040 FD 43         mov [d], b
4606   2042             ;; if(currState[i+-1][j] == '@')			count++; 
4607   2042             _if66_cond:
4608   2042 3B 5A 27      mov d, _currState_data ; $currState
4609   2045 D7            push a
4610   2046 DA            push d
4611   2047 FA 05 00      lea d, [bp + 5] ; $i
4612   204A 2A            mov b, [d]
4613   204B             ; START TERMS
4614   204B D7            push a
4615   204C 11            mov a, b
4616   204D 26 FF FF      mov b, $ffff
4617   2050 56            add b, a
4618   2051 E4            pop a
4619   2052             ; END TERMS
4620   2052 E7            pop d
4621   2053 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
4622   2057 DA            push d
4623   2058 FA 07 00      lea d, [bp + 7] ; $j
4624   205B 2A            mov b, [d]
4625   205C E7            pop d
4626   205D 5A            add d, b
4627   205E E4            pop a
4628   205F 32            mov bl, [d]
4629   2060 A7 00         mov bh, 0
4630   2062             ; START RELATIONAL
4631   2062 D7            push a
4632   2063 11            mov a, b
4633   2064 26 40 00      mov b, $40
4634   2067 B0            cmp a, b
4635   2068 FD 71         seq ; ==
4636   206A E4            pop a
4637   206B             ; END RELATIONAL
4638   206B C0 00 00      cmp b, 0
4639   206E C6 81 20      je _if66_exit
4640   2071             _if66_true:
4641   2071             ;; count++; 
4642   2071 FA FF FF      lea d, [bp + -1] ; $count
4643   2074 2A            mov b, [d]
4644   2075 D8            push b
4645   2076 FD 77         inc b
4646   2078 FA FF FF      lea d, [bp + -1] ; $count
4647   207B FD 43         mov [d], b
4648   207D E5            pop b
4649   207E 0A 81 20      jmp _if66_exit
4650   2081             _if66_exit:
4651   2081             ;; if(currState[i+-1][j+-1] == '@') 	count++; 
4652   2081             _if67_cond:
4653   2081 3B 5A 27      mov d, _currState_data ; $currState
4654   2084 D7            push a
4655   2085 DA            push d
4656   2086 FA 05 00      lea d, [bp + 5] ; $i
4657   2089 2A            mov b, [d]
4658   208A             ; START TERMS
4659   208A D7            push a
4660   208B 11            mov a, b
4661   208C 26 FF FF      mov b, $ffff
4662   208F 56            add b, a
4663   2090 E4            pop a
4664   2091             ; END TERMS
4665   2091 E7            pop d
4666   2092 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
4667   2096 DA            push d
4668   2097 FA 07 00      lea d, [bp + 7] ; $j
4669   209A 2A            mov b, [d]
4670   209B             ; START TERMS
4671   209B D7            push a
4672   209C 11            mov a, b
4673   209D 26 FF FF      mov b, $ffff
4674   20A0 56            add b, a
4675   20A1 E4            pop a
4676   20A2             ; END TERMS
4677   20A2 E7            pop d
4678   20A3 5A            add d, b
4679   20A4 E4            pop a
4680   20A5 32            mov bl, [d]
4681   20A6 A7 00         mov bh, 0
4682   20A8             ; START RELATIONAL
4683   20A8 D7            push a
4684   20A9 11            mov a, b
4685   20AA 26 40 00      mov b, $40
4686   20AD B0            cmp a, b
4687   20AE FD 71         seq ; ==
4688   20B0 E4            pop a
4689   20B1             ; END RELATIONAL
4690   20B1 C0 00 00      cmp b, 0
4691   20B4 C6 C7 20      je _if67_exit
4692   20B7             _if67_true:
4693   20B7             ;; count++; 
4694   20B7 FA FF FF      lea d, [bp + -1] ; $count
4695   20BA 2A            mov b, [d]
4696   20BB D8            push b
4697   20BC FD 77         inc b
4698   20BE FA FF FF      lea d, [bp + -1] ; $count
4699   20C1 FD 43         mov [d], b
4700   20C3 E5            pop b
4701   20C4 0A C7 20      jmp _if67_exit
4702   20C7             _if67_exit:
4703   20C7             ;; if(currState[i+-1][j+1] == '@') 	count++; 
4704   20C7             _if68_cond:
4705   20C7 3B 5A 27      mov d, _currState_data ; $currState
4706   20CA D7            push a
4707   20CB DA            push d
4708   20CC FA 05 00      lea d, [bp + 5] ; $i
4709   20CF 2A            mov b, [d]
4710   20D0             ; START TERMS
4711   20D0 D7            push a
4712   20D1 11            mov a, b
4713   20D2 26 FF FF      mov b, $ffff
4714   20D5 56            add b, a
4715   20D6 E4            pop a
4716   20D7             ; END TERMS
4717   20D7 E7            pop d
4718   20D8 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
4719   20DC DA            push d
4720   20DD FA 07 00      lea d, [bp + 7] ; $j
4721   20E0 2A            mov b, [d]
4722   20E1             ; START TERMS
4723   20E1 D7            push a
4724   20E2 11            mov a, b
4725   20E3 26 01 00      mov b, $1
4726   20E6 56            add b, a
4727   20E7 E4            pop a
4728   20E8             ; END TERMS
4729   20E8 E7            pop d
4730   20E9 5A            add d, b
4731   20EA E4            pop a
4732   20EB 32            mov bl, [d]
4733   20EC A7 00         mov bh, 0
4734   20EE             ; START RELATIONAL
4735   20EE D7            push a
4736   20EF 11            mov a, b
4737   20F0 26 40 00      mov b, $40
4738   20F3 B0            cmp a, b
4739   20F4 FD 71         seq ; ==
4740   20F6 E4            pop a
4741   20F7             ; END RELATIONAL
4742   20F7 C0 00 00      cmp b, 0
4743   20FA C6 0D 21      je _if68_exit
4744   20FD             _if68_true:
4745   20FD             ;; count++; 
4746   20FD FA FF FF      lea d, [bp + -1] ; $count
4747   2100 2A            mov b, [d]
4748   2101 D8            push b
4749   2102 FD 77         inc b
4750   2104 FA FF FF      lea d, [bp + -1] ; $count
4751   2107 FD 43         mov [d], b
4752   2109 E5            pop b
4753   210A 0A 0D 21      jmp _if68_exit
4754   210D             _if68_exit:
4755   210D             ;; if(currState[i][j+-1] == '@') 		count++; 
4756   210D             _if69_cond:
4757   210D 3B 5A 27      mov d, _currState_data ; $currState
4758   2110 D7            push a
4759   2111 DA            push d
4760   2112 FA 05 00      lea d, [bp + 5] ; $i
4761   2115 2A            mov b, [d]
4762   2116 E7            pop d
4763   2117 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
4764   211B DA            push d
4765   211C FA 07 00      lea d, [bp + 7] ; $j
4766   211F 2A            mov b, [d]
4767   2120             ; START TERMS
4768   2120 D7            push a
4769   2121 11            mov a, b
4770   2122 26 FF FF      mov b, $ffff
4771   2125 56            add b, a
4772   2126 E4            pop a
4773   2127             ; END TERMS
4774   2127 E7            pop d
4775   2128 5A            add d, b
4776   2129 E4            pop a
4777   212A 32            mov bl, [d]
4778   212B A7 00         mov bh, 0
4779   212D             ; START RELATIONAL
4780   212D D7            push a
4781   212E 11            mov a, b
4782   212F 26 40 00      mov b, $40
4783   2132 B0            cmp a, b
4784   2133 FD 71         seq ; ==
4785   2135 E4            pop a
4786   2136             ; END RELATIONAL
4787   2136 C0 00 00      cmp b, 0
4788   2139 C6 4C 21      je _if69_exit
4789   213C             _if69_true:
4790   213C             ;; count++; 
4791   213C FA FF FF      lea d, [bp + -1] ; $count
4792   213F 2A            mov b, [d]
4793   2140 D8            push b
4794   2141 FD 77         inc b
4795   2143 FA FF FF      lea d, [bp + -1] ; $count
4796   2146 FD 43         mov [d], b
4797   2148 E5            pop b
4798   2149 0A 4C 21      jmp _if69_exit
4799   214C             _if69_exit:
4800   214C             ;; if(currState[i][j+1] == '@') 			count++; 
4801   214C             _if70_cond:
4802   214C 3B 5A 27      mov d, _currState_data ; $currState
4803   214F D7            push a
4804   2150 DA            push d
4805   2151 FA 05 00      lea d, [bp + 5] ; $i
4806   2154 2A            mov b, [d]
4807   2155 E7            pop d
4808   2156 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
4809   215A DA            push d
4810   215B FA 07 00      lea d, [bp + 7] ; $j
4811   215E 2A            mov b, [d]
4812   215F             ; START TERMS
4813   215F D7            push a
4814   2160 11            mov a, b
4815   2161 26 01 00      mov b, $1
4816   2164 56            add b, a
4817   2165 E4            pop a
4818   2166             ; END TERMS
4819   2166 E7            pop d
4820   2167 5A            add d, b
4821   2168 E4            pop a
4822   2169 32            mov bl, [d]
4823   216A A7 00         mov bh, 0
4824   216C             ; START RELATIONAL
4825   216C D7            push a
4826   216D 11            mov a, b
4827   216E 26 40 00      mov b, $40
4828   2171 B0            cmp a, b
4829   2172 FD 71         seq ; ==
4830   2174 E4            pop a
4831   2175             ; END RELATIONAL
4832   2175 C0 00 00      cmp b, 0
4833   2178 C6 8B 21      je _if70_exit
4834   217B             _if70_true:
4835   217B             ;; count++; 
4836   217B FA FF FF      lea d, [bp + -1] ; $count
4837   217E 2A            mov b, [d]
4838   217F D8            push b
4839   2180 FD 77         inc b
4840   2182 FA FF FF      lea d, [bp + -1] ; $count
4841   2185 FD 43         mov [d], b
4842   2187 E5            pop b
4843   2188 0A 8B 21      jmp _if70_exit
4844   218B             _if70_exit:
4845   218B             ;; if(currState[i+1][j+-1] == '@') 	count++; 
4846   218B             _if71_cond:
4847   218B 3B 5A 27      mov d, _currState_data ; $currState
4848   218E D7            push a
4849   218F DA            push d
4850   2190 FA 05 00      lea d, [bp + 5] ; $i
4851   2193 2A            mov b, [d]
4852   2194             ; START TERMS
4853   2194 D7            push a
4854   2195 11            mov a, b
4855   2196 26 01 00      mov b, $1
4856   2199 56            add b, a
4857   219A E4            pop a
4858   219B             ; END TERMS
4859   219B E7            pop d
4860   219C FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
4861   21A0 DA            push d
4862   21A1 FA 07 00      lea d, [bp + 7] ; $j
4863   21A4 2A            mov b, [d]
4864   21A5             ; START TERMS
4865   21A5 D7            push a
4866   21A6 11            mov a, b
4867   21A7 26 FF FF      mov b, $ffff
4868   21AA 56            add b, a
4869   21AB E4            pop a
4870   21AC             ; END TERMS
4871   21AC E7            pop d
4872   21AD 5A            add d, b
4873   21AE E4            pop a
4874   21AF 32            mov bl, [d]
4875   21B0 A7 00         mov bh, 0
4876   21B2             ; START RELATIONAL
4877   21B2 D7            push a
4878   21B3 11            mov a, b
4879   21B4 26 40 00      mov b, $40
4880   21B7 B0            cmp a, b
4881   21B8 FD 71         seq ; ==
4882   21BA E4            pop a
4883   21BB             ; END RELATIONAL
4884   21BB C0 00 00      cmp b, 0
4885   21BE C6 D1 21      je _if71_exit
4886   21C1             _if71_true:
4887   21C1             ;; count++; 
4888   21C1 FA FF FF      lea d, [bp + -1] ; $count
4889   21C4 2A            mov b, [d]
4890   21C5 D8            push b
4891   21C6 FD 77         inc b
4892   21C8 FA FF FF      lea d, [bp + -1] ; $count
4893   21CB FD 43         mov [d], b
4894   21CD E5            pop b
4895   21CE 0A D1 21      jmp _if71_exit
4896   21D1             _if71_exit:
4897   21D1             ;; if(currState[i+1][j] == '@') 			count++; 
4898   21D1             _if72_cond:
4899   21D1 3B 5A 27      mov d, _currState_data ; $currState
4900   21D4 D7            push a
4901   21D5 DA            push d
4902   21D6 FA 05 00      lea d, [bp + 5] ; $i
4903   21D9 2A            mov b, [d]
4904   21DA             ; START TERMS
4905   21DA D7            push a
4906   21DB 11            mov a, b
4907   21DC 26 01 00      mov b, $1
4908   21DF 56            add b, a
4909   21E0 E4            pop a
4910   21E1             ; END TERMS
4911   21E1 E7            pop d
4912   21E2 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
4913   21E6 DA            push d
4914   21E7 FA 07 00      lea d, [bp + 7] ; $j
4915   21EA 2A            mov b, [d]
4916   21EB E7            pop d
4917   21EC 5A            add d, b
4918   21ED E4            pop a
4919   21EE 32            mov bl, [d]
4920   21EF A7 00         mov bh, 0
4921   21F1             ; START RELATIONAL
4922   21F1 D7            push a
4923   21F2 11            mov a, b
4924   21F3 26 40 00      mov b, $40
4925   21F6 B0            cmp a, b
4926   21F7 FD 71         seq ; ==
4927   21F9 E4            pop a
4928   21FA             ; END RELATIONAL
4929   21FA C0 00 00      cmp b, 0
4930   21FD C6 10 22      je _if72_exit
4931   2200             _if72_true:
4932   2200             ;; count++; 
4933   2200 FA FF FF      lea d, [bp + -1] ; $count
4934   2203 2A            mov b, [d]
4935   2204 D8            push b
4936   2205 FD 77         inc b
4937   2207 FA FF FF      lea d, [bp + -1] ; $count
4938   220A FD 43         mov [d], b
4939   220C E5            pop b
4940   220D 0A 10 22      jmp _if72_exit
4941   2210             _if72_exit:
4942   2210             ;; if(currState[i+1][j+1] == '@') 		count++; 
4943   2210             _if73_cond:
4944   2210 3B 5A 27      mov d, _currState_data ; $currState
4945   2213 D7            push a
4946   2214 DA            push d
4947   2215 FA 05 00      lea d, [bp + 5] ; $i
4948   2218 2A            mov b, [d]
4949   2219             ; START TERMS
4950   2219 D7            push a
4951   221A 11            mov a, b
4952   221B 26 01 00      mov b, $1
4953   221E 56            add b, a
4954   221F E4            pop a
4955   2220             ; END TERMS
4956   2220 E7            pop d
4957   2221 FD 13 28 00   mma 40 ; mov a, 40; mul a, b; add d, b
4958   2225 DA            push d
4959   2226 FA 07 00      lea d, [bp + 7] ; $j
4960   2229 2A            mov b, [d]
4961   222A             ; START TERMS
4962   222A D7            push a
4963   222B 11            mov a, b
4964   222C 26 01 00      mov b, $1
4965   222F 56            add b, a
4966   2230 E4            pop a
4967   2231             ; END TERMS
4968   2231 E7            pop d
4969   2232 5A            add d, b
4970   2233 E4            pop a
4971   2234 32            mov bl, [d]
4972   2235 A7 00         mov bh, 0
4973   2237             ; START RELATIONAL
4974   2237 D7            push a
4975   2238 11            mov a, b
4976   2239 26 40 00      mov b, $40
4977   223C B0            cmp a, b
4978   223D FD 71         seq ; ==
4979   223F E4            pop a
4980   2240             ; END RELATIONAL
4981   2240 C0 00 00      cmp b, 0
4982   2243 C6 56 22      je _if73_exit
4983   2246             _if73_true:
4984   2246             ;; count++; 
4985   2246 FA FF FF      lea d, [bp + -1] ; $count
4986   2249 2A            mov b, [d]
4987   224A D8            push b
4988   224B FD 77         inc b
4989   224D FA FF FF      lea d, [bp + -1] ; $count
4990   2250 FD 43         mov [d], b
4991   2252 E5            pop b
4992   2253 0A 56 22      jmp _if73_exit
4993   2256             _if73_exit:
4994   2256             ;; return count; 
4995   2256 FA FF FF      lea d, [bp + -1] ; $count
4996   2259 2A            mov b, [d]
4997   225A F9            leave
4998   225B 09            ret
4999   225C             ; --- END TEXT BLOCK
5000   225C             
5001   225C             ; --- BEGIN DATA BLOCK
5002   225C 41 42 43 44 _base64_table_data: .db "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 0
5002   2260 45 46 47 48 
5002   2264 49 4A 4B 4C 
5002   2268 4D 4E 4F 50 
5002   226C 51 52 53 54 
5002   2270 55 56 57 58 
5002   2274 59 5A 61 62 
5002   2278 63 64 65 66 
5002   227C 67 68 69 6A 
5002   2280 6B 6C 6D 6E 
5002   2284 6F 70 71 72 
5002   2288 73 74 75 76 
5002   228C 77 78 79 7A 
5002   2290 30 31 32 33 
5002   2294 34 35 36 37 
5002   2298 38 39 2B 2F 
5002   229C 00 
5003   229D 5C 22       _base64_table: .dw _base64_table_data
5004   229F             _clear_data: 
5005   229F 1B 5B 32 4A .db 27,$5b,$32,$4a,27,$5b,$48,0,
5005   22A3 1B 5B 48 00 
5006   22A7 00 00 00    .fill 3, 0
5007   22AA 00 00 00 00 _nextState_data: .fill 1200, 0
5007   22AE 00 00 00 00 
5007   22B2 00 00 00 00 
5007   22B6 00 00 00 00 
5007   22BA 00 00 00 00 
5007   22BE 00 00 00 00 
5007   22C2 00 00 00 00 
5007   22C6 00 00 00 00 
5007   22CA 00 00 00 00 
5007   22CE 00 00 00 00 
5007   22D2 00 00 00 00 
5007   22D6 00 00 00 00 
5007   22DA 00 00 00 00 
5007   22DE 00 00 00 00 
5007   22E2 00 00 00 00 
5007   22E6 00 00 00 00 
5007   22EA 00 00 00 00 
5007   22EE 00 00 00 00 
5007   22F2 00 00 00 00 
5007   22F6 00 00 00 00 
5007   22FA 00 00 00 00 
5007   22FE 00 00 00 00 
5007   2302 00 00 00 00 
5007   2306 00 00 00 00 
5007   230A 00 00 00 00 
5007   230E 00 00 00 00 
5007   2312 00 00 00 00 
5007   2316 00 00 00 00 
5007   231A 00 00 00 00 
5007   231E 00 00 00 00 
5007   2322 00 00 00 00 
5007   2326 00 00 00 00 
5007   232A 00 00 00 00 
5007   232E 00 00 00 00 
5007   2332 00 00 00 00 
5007   2336 00 00 00 00 
5007   233A 00 00 00 00 
5007   233E 00 00 00 00 
5007   2342 00 00 00 00 
5007   2346 00 00 00 00 
5007   234A 00 00 00 00 
5007   234E 00 00 00 00 
5007   2352 00 00 00 00 
5007   2356 00 00 00 00 
5007   235A 00 00 00 00 
5007   235E 00 00 00 00 
5007   2362 00 00 00 00 
5007   2366 00 00 00 00 
5007   236A 00 00 00 00 
5007   236E 00 00 00 00 
5007   2372 00 00 00 00 
5007   2376 00 00 00 00 
5007   237A 00 00 00 00 
5007   237E 00 00 00 00 
5007   2382 00 00 00 00 
5007   2386 00 00 00 00 
5007   238A 00 00 00 00 
5007   238E 00 00 00 00 
5007   2392 00 00 00 00 
5007   2396 00 00 00 00 
5007   239A 00 00 00 00 
5007   239E 00 00 00 00 
5007   23A2 00 00 00 00 
5007   23A6 00 00 00 00 
5007   23AA 00 00 00 00 
5007   23AE 00 00 00 00 
5007   23B2 00 00 00 00 
5007   23B6 00 00 00 00 
5007   23BA 00 00 00 00 
5007   23BE 00 00 00 00 
5007   23C2 00 00 00 00 
5007   23C6 00 00 00 00 
5007   23CA 00 00 00 00 
5007   23CE 00 00 00 00 
5007   23D2 00 00 00 00 
5007   23D6 00 00 00 00 
5007   23DA 00 00 00 00 
5007   23DE 00 00 00 00 
5007   23E2 00 00 00 00 
5007   23E6 00 00 00 00 
5007   23EA 00 00 00 00 
5007   23EE 00 00 00 00 
5007   23F2 00 00 00 00 
5007   23F6 00 00 00 00 
5007   23FA 00 00 00 00 
5007   23FE 00 00 00 00 
5007   2402 00 00 00 00 
5007   2406 00 00 00 00 
5007   240A 00 00 00 00 
5007   240E 00 00 00 00 
5007   2412 00 00 00 00 
5007   2416 00 00 00 00 
5007   241A 00 00 00 00 
5007   241E 00 00 00 00 
5007   2422 00 00 00 00 
5007   2426 00 00 00 00 
5007   242A 00 00 00 00 
5007   242E 00 00 00 00 
5007   2432 00 00 00 00 
5007   2436 00 00 00 00 
5007   243A 00 00 00 00 
5007   243E 00 00 00 00 
5007   2442 00 00 00 00 
5007   2446 00 00 00 00 
5007   244A 00 00 00 00 
5007   244E 00 00 00 00 
5007   2452 00 00 00 00 
5007   2456 00 00 00 00 
5007   245A 00 00 00 00 
5007   245E 00 00 00 00 
5007   2462 00 00 00 00 
5007   2466 00 00 00 00 
5007   246A 00 00 00 00 
5007   246E 00 00 00 00 
5007   2472 00 00 00 00 
5007   2476 00 00 00 00 
5007   247A 00 00 00 00 
5007   247E 00 00 00 00 
5007   2482 00 00 00 00 
5007   2486 00 00 00 00 
5007   248A 00 00 00 00 
5007   248E 00 00 00 00 
5007   2492 00 00 00 00 
5007   2496 00 00 00 00 
5007   249A 00 00 00 00 
5007   249E 00 00 00 00 
5007   24A2 00 00 00 00 
5007   24A6 00 00 00 00 
5007   24AA 00 00 00 00 
5007   24AE 00 00 00 00 
5007   24B2 00 00 00 00 
5007   24B6 00 00 00 00 
5007   24BA 00 00 00 00 
5007   24BE 00 00 00 00 
5007   24C2 00 00 00 00 
5007   24C6 00 00 00 00 
5007   24CA 00 00 00 00 
5007   24CE 00 00 00 00 
5007   24D2 00 00 00 00 
5007   24D6 00 00 00 00 
5007   24DA 00 00 00 00 
5007   24DE 00 00 00 00 
5007   24E2 00 00 00 00 
5007   24E6 00 00 00 00 
5007   24EA 00 00 00 00 
5007   24EE 00 00 00 00 
5007   24F2 00 00 00 00 
5007   24F6 00 00 00 00 
5007   24FA 00 00 00 00 
5007   24FE 00 00 00 00 
5007   2502 00 00 00 00 
5007   2506 00 00 00 00 
5007   250A 00 00 00 00 
5007   250E 00 00 00 00 
5007   2512 00 00 00 00 
5007   2516 00 00 00 00 
5007   251A 00 00 00 00 
5007   251E 00 00 00 00 
5007   2522 00 00 00 00 
5007   2526 00 00 00 00 
5007   252A 00 00 00 00 
5007   252E 00 00 00 00 
5007   2532 00 00 00 00 
5007   2536 00 00 00 00 
5007   253A 00 00 00 00 
5007   253E 00 00 00 00 
5007   2542 00 00 00 00 
5007   2546 00 00 00 00 
5007   254A 00 00 00 00 
5007   254E 00 00 00 00 
5007   2552 00 00 00 00 
5007   2556 00 00 00 00 
5007   255A 00 00 00 00 
5007   255E 00 00 00 00 
5007   2562 00 00 00 00 
5007   2566 00 00 00 00 
5007   256A 00 00 00 00 
5007   256E 00 00 00 00 
5007   2572 00 00 00 00 
5007   2576 00 00 00 00 
5007   257A 00 00 00 00 
5007   257E 00 00 00 00 
5007   2582 00 00 00 00 
5007   2586 00 00 00 00 
5007   258A 00 00 00 00 
5007   258E 00 00 00 00 
5007   2592 00 00 00 00 
5007   2596 00 00 00 00 
5007   259A 00 00 00 00 
5007   259E 00 00 00 00 
5007   25A2 00 00 00 00 
5007   25A6 00 00 00 00 
5007   25AA 00 00 00 00 
5007   25AE 00 00 00 00 
5007   25B2 00 00 00 00 
5007   25B6 00 00 00 00 
5007   25BA 00 00 00 00 
5007   25BE 00 00 00 00 
5007   25C2 00 00 00 00 
5007   25C6 00 00 00 00 
5007   25CA 00 00 00 00 
5007   25CE 00 00 00 00 
5007   25D2 00 00 00 00 
5007   25D6 00 00 00 00 
5007   25DA 00 00 00 00 
5007   25DE 00 00 00 00 
5007   25E2 00 00 00 00 
5007   25E6 00 00 00 00 
5007   25EA 00 00 00 00 
5007   25EE 00 00 00 00 
5007   25F2 00 00 00 00 
5007   25F6 00 00 00 00 
5007   25FA 00 00 00 00 
5007   25FE 00 00 00 00 
5007   2602 00 00 00 00 
5007   2606 00 00 00 00 
5007   260A 00 00 00 00 
5007   260E 00 00 00 00 
5007   2612 00 00 00 00 
5007   2616 00 00 00 00 
5007   261A 00 00 00 00 
5007   261E 00 00 00 00 
5007   2622 00 00 00 00 
5007   2626 00 00 00 00 
5007   262A 00 00 00 00 
5007   262E 00 00 00 00 
5007   2632 00 00 00 00 
5007   2636 00 00 00 00 
5007   263A 00 00 00 00 
5007   263E 00 00 00 00 
5007   2642 00 00 00 00 
5007   2646 00 00 00 00 
5007   264A 00 00 00 00 
5007   264E 00 00 00 00 
5007   2652 00 00 00 00 
5007   2656 00 00 00 00 
5007   265A 00 00 00 00 
5007   265E 00 00 00 00 
5007   2662 00 00 00 00 
5007   2666 00 00 00 00 
5007   266A 00 00 00 00 
5007   266E 00 00 00 00 
5007   2672 00 00 00 00 
5007   2676 00 00 00 00 
5007   267A 00 00 00 00 
5007   267E 00 00 00 00 
5007   2682 00 00 00 00 
5007   2686 00 00 00 00 
5007   268A 00 00 00 00 
5007   268E 00 00 00 00 
5007   2692 00 00 00 00 
5007   2696 00 00 00 00 
5007   269A 00 00 00 00 
5007   269E 00 00 00 00 
5007   26A2 00 00 00 00 
5007   26A6 00 00 00 00 
5007   26AA 00 00 00 00 
5007   26AE 00 00 00 00 
5007   26B2 00 00 00 00 
5007   26B6 00 00 00 00 
5007   26BA 00 00 00 00 
5007   26BE 00 00 00 00 
5007   26C2 00 00 00 00 
5007   26C6 00 00 00 00 
5007   26CA 00 00 00 00 
5007   26CE 00 00 00 00 
5007   26D2 00 00 00 00 
5007   26D6 00 00 00 00 
5007   26DA 00 00 00 00 
5007   26DE 00 00 00 00 
5007   26E2 00 00 00 00 
5007   26E6 00 00 00 00 
5007   26EA 00 00 00 00 
5007   26EE 00 00 00 00 
5007   26F2 00 00 00 00 
5007   26F6 00 00 00 00 
5007   26FA 00 00 00 00 
5007   26FE 00 00 00 00 
5007   2702 00 00 00 00 
5007   2706 00 00 00 00 
5007   270A 00 00 00 00 
5007   270E 00 00 00 00 
5007   2712 00 00 00 00 
5007   2716 00 00 00 00 
5007   271A 00 00 00 00 
5007   271E 00 00 00 00 
5007   2722 00 00 00 00 
5007   2726 00 00 00 00 
5007   272A 00 00 00 00 
5007   272E 00 00 00 00 
5007   2732 00 00 00 00 
5007   2736 00 00 00 00 
5007   273A 00 00 00 00 
5007   273E 00 00 00 00 
5007   2742 00 00 00 00 
5007   2746 00 00 00 00 
5007   274A 00 00 00 00 
5007   274E 00 00 00 00 
5007   2752 00 00 00 00 
5007   2756 00 00 00 00 
5008   275A             _currState_data: 
5009   275A 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5009   275E 20 20 20 20 
5009   2762 20 20 20 20 
5009   2766 20 20 20 20 
5009   276A 20 20 20 20 
5009   276E 20 20 20 20 
5009   2772 20 20 20 20 
5009   2776 20 20 
5010   2778 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5010   277C 20 20 20 20 
5010   2780 20 20 20 20 
5010   2784 20 20 20 20 
5010   2788 20 20 20 20 
5010   278C 20 20 20 20 
5010   2790 20 20 20 20 
5010   2794 20 20 
5011   2796 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5011   279A 20 20 20 20 
5011   279E 20 20 20 20 
5011   27A2 20 20 20 20 
5011   27A6 20 20 20 20 
5011   27AA 20 20 20 20 
5011   27AE 20 20 20 20 
5011   27B2 20 20 
5012   27B4 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5012   27B8 20 20 20 20 
5012   27BC 20 20 20 20 
5012   27C0 20 20 20 20 
5012   27C4 20 20 20 20 
5012   27C8 20 20 20 20 
5012   27CC 20 20 20 20 
5012   27D0 20 20 
5013   27D2 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,
5013   27D6 20 20 20 20 
5013   27DA 20 20 20 20 
5013   27DE 20 20 20 20 
5013   27E2 20 20 20 20 
5013   27E6 20 20 20 20 
5013   27EA 20 20 20 40 
5013   27EE 20 20 
5014   27F0 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5014   27F4 20 20 20 20 
5014   27F8 20 20 20 20 
5014   27FC 20 20 20 20 
5014   2800 20 20 20 20 
5014   2804 20 20 20 20 
5014   2808 20 20 20 20 
5014   280C 20 20 
5015   280E 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5015   2812 20 40 20 40 
5015   2816 20 20 20 20 
5015   281A 20 20 20 20 
5015   281E 20 20 20 20 
5015   2822 20 20 20 20 
5015   2826 20 20 20 20 
5015   282A 20 20 
5016   282C 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,
5016   2830 20 40 40 20 
5016   2834 20 20 20 20 
5016   2838 20 40 40 20 
5016   283C 20 20 20 20 
5016   2840 20 20 20 20 
5016   2844 20 20 20 40 
5016   2848 40 20 
5017   284A 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,
5017   284E 20 20 20 20 
5017   2852 20 20 20 20 
5017   2856 20 20 40 20 
5017   285A 20 20 40 20 
5017   285E 20 20 20 40 
5017   2862 40 20 20 20 
5017   2866 20 20 
5018   2868 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,
5018   286C 20 20 20 40 
5018   2870 40 20 20 20 
5018   2874 20 40 40 20 
5018   2878 20 20 20 20 
5018   287C 20 20 20 40 
5018   2880 20 20 20 20 
5018   2884 20 40 
5019   2886 20 20 20 40 .db $20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,
5019   288A 40 20 20 20 
5019   288E 20 20 20 20 
5019   2892 20 20 20 20 
5019   2896 20 20 20 20 
5019   289A 20 20 20 40 
5019   289E 40 20 20 20 
5019   28A2 20 20 
5020   28A4 20 20 20 40 .db $20,$20,$20,$40,$20,$20,$20,$40,$20,$40,$40,$20,$20,$20,$20,$40,$20,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5020   28A8 20 20 20 40 
5020   28AC 20 40 40 20 
5020   28B0 20 20 20 40 
5020   28B4 20 40 20 20 
5020   28B8 20 20 20 20 
5020   28BC 20 20 20 20 
5020   28C0 20 20 
5021   28C2 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$40,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,
5021   28C6 20 20 20 20 
5021   28CA 20 20 20 20 
5021   28CE 20 40 20 20 
5021   28D2 20 20 20 40 
5021   28D6 20 20 20 20 
5021   28DA 20 20 20 40 
5021   28DE 20 20 
5022   28E0 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$40,$20,$20,$20,$40,$20,
5022   28E4 20 20 20 20 
5022   28E8 20 20 20 20 
5022   28EC 20 20 20 20 
5022   28F0 20 20 20 20 
5022   28F4 20 20 20 20 
5022   28F8 40 20 20 20 
5022   28FC 40 20 
5023   28FE 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5023   2902 20 20 20 20 
5023   2906 20 20 20 20 
5023   290A 20 20 20 20 
5023   290E 20 20 20 20 
5023   2912 20 20 20 20 
5023   2916 20 20 20 20 
5023   291A 20 20 
5024   291C 20 20 20 20 .db $20,$20,$20,$20,$20,$40,$40,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5024   2920 20 40 40 20 
5024   2924 20 20 20 20 
5024   2928 20 20 20 20 
5024   292C 20 20 20 20 
5024   2930 20 20 20 20 
5024   2934 20 20 20 20 
5024   2938 20 20 
5025   293A 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5025   293E 20 20 20 20 
5025   2942 20 20 20 20 
5025   2946 20 20 20 20 
5025   294A 20 20 20 20 
5025   294E 20 20 20 20 
5025   2952 20 20 20 20 
5025   2956 20 20 
5026   2958 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5026   295C 20 20 20 20 
5026   2960 20 20 20 20 
5026   2964 20 20 20 20 
5026   2968 20 20 20 20 
5026   296C 20 20 20 20 
5026   2970 20 20 20 20 
5026   2974 20 20 
5027   2976 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5027   297A 20 20 20 20 
5027   297E 20 20 20 20 
5027   2982 20 20 20 20 
5027   2986 20 20 20 20 
5027   298A 20 20 20 20 
5027   298E 20 20 20 20 
5027   2992 20 20 
5028   2994 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5028   2998 20 20 20 20 
5028   299C 20 20 20 20 
5028   29A0 20 20 20 20 
5028   29A4 20 20 20 20 
5028   29A8 20 20 20 20 
5028   29AC 20 20 20 20 
5028   29B0 20 20 
5029   29B2 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5029   29B6 20 20 20 20 
5029   29BA 20 20 20 20 
5029   29BE 20 20 20 20 
5029   29C2 20 20 20 20 
5029   29C6 20 20 20 20 
5029   29CA 20 20 20 20 
5029   29CE 20 20 
5030   29D0 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5030   29D4 20 20 20 20 
5030   29D8 20 20 20 20 
5030   29DC 20 20 20 20 
5030   29E0 20 20 20 20 
5030   29E4 20 20 20 20 
5030   29E8 20 20 20 20 
5030   29EC 20 20 
5031   29EE 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5031   29F2 20 20 20 20 
5031   29F6 20 20 20 20 
5031   29FA 20 20 20 20 
5031   29FE 20 20 20 20 
5031   2A02 20 20 20 20 
5031   2A06 20 20 20 20 
5031   2A0A 20 20 
5032   2A0C 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5032   2A10 20 20 20 20 
5032   2A14 20 20 20 20 
5032   2A18 20 20 20 20 
5032   2A1C 20 20 20 20 
5032   2A20 20 20 20 20 
5032   2A24 20 20 20 20 
5032   2A28 20 20 
5033   2A2A 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5033   2A2E 20 20 20 20 
5033   2A32 20 20 20 20 
5033   2A36 20 20 20 20 
5033   2A3A 20 20 20 20 
5033   2A3E 20 20 20 20 
5033   2A42 20 20 20 20 
5033   2A46 20 20 
5034   2A48 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5034   2A4C 20 20 20 20 
5034   2A50 20 20 20 20 
5034   2A54 20 20 20 20 
5034   2A58 20 20 20 20 
5034   2A5C 20 20 20 20 
5034   2A60 20 20 20 20 
5034   2A64 20 20 
5035   2A66 20 20 20 20 .db $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,
5035   2A6A 20 20 20 20 
5035   2A6E 20 20 20 20 
5035   2A72 20 20 20 20 
5035   2A76 20 20 20 20 
5036   2A7A 00 00 00 00 .fill 400, 0
5036   2A7E 00 00 00 00 
5036   2A82 00 00 00 00 
5036   2A86 00 00 00 00 
5036   2A8A 00 00 00 00 
5036   2A8E 00 00 00 00 
5036   2A92 00 00 00 00 
5036   2A96 00 00 00 00 
5036   2A9A 00 00 00 00 
5036   2A9E 00 00 00 00 
5036   2AA2 00 00 00 00 
5036   2AA6 00 00 00 00 
5036   2AAA 00 00 00 00 
5036   2AAE 00 00 00 00 
5036   2AB2 00 00 00 00 
5036   2AB6 00 00 00 00 
5036   2ABA 00 00 00 00 
5036   2ABE 00 00 00 00 
5036   2AC2 00 00 00 00 
5036   2AC6 00 00 00 00 
5036   2ACA 00 00 00 00 
5036   2ACE 00 00 00 00 
5036   2AD2 00 00 00 00 
5036   2AD6 00 00 00 00 
5036   2ADA 00 00 00 00 
5036   2ADE 00 00 00 00 
5036   2AE2 00 00 00 00 
5036   2AE6 00 00 00 00 
5036   2AEA 00 00 00 00 
5036   2AEE 00 00 00 00 
5036   2AF2 00 00 00 00 
5036   2AF6 00 00 00 00 
5036   2AFA 00 00 00 00 
5036   2AFE 00 00 00 00 
5036   2B02 00 00 00 00 
5036   2B06 00 00 00 00 
5036   2B0A 00 00 00 00 
5036   2B0E 00 00 00 00 
5036   2B12 00 00 00 00 
5036   2B16 00 00 00 00 
5036   2B1A 00 00 00 00 
5036   2B1E 00 00 00 00 
5036   2B22 00 00 00 00 
5036   2B26 00 00 00 00 
5036   2B2A 00 00 00 00 
5036   2B2E 00 00 00 00 
5036   2B32 00 00 00 00 
5036   2B36 00 00 00 00 
5036   2B3A 00 00 00 00 
5036   2B3E 00 00 00 00 
5036   2B42 00 00 00 00 
5036   2B46 00 00 00 00 
5036   2B4A 00 00 00 00 
5036   2B4E 00 00 00 00 
5036   2B52 00 00 00 00 
5036   2B56 00 00 00 00 
5036   2B5A 00 00 00 00 
5036   2B5E 00 00 00 00 
5036   2B62 00 00 00 00 
5036   2B66 00 00 00 00 
5036   2B6A 00 00 00 00 
5036   2B6E 00 00 00 00 
5036   2B72 00 00 00 00 
5036   2B76 00 00 00 00 
5036   2B7A 00 00 00 00 
5036   2B7E 00 00 00 00 
5036   2B82 00 00 00 00 
5036   2B86 00 00 00 00 
5036   2B8A 00 00 00 00 
5036   2B8E 00 00 00 00 
5036   2B92 00 00 00 00 
5036   2B96 00 00 00 00 
5036   2B9A 00 00 00 00 
5036   2B9E 00 00 00 00 
5036   2BA2 00 00 00 00 
5036   2BA6 00 00 00 00 
5036   2BAA 00 00 00 00 
5036   2BAE 00 00 00 00 
5036   2BB2 00 00 00 00 
5036   2BB6 00 00 00 00 
5036   2BBA 00 00 00 00 
5036   2BBE 00 00 00 00 
5036   2BC2 00 00 00 00 
5036   2BC6 00 00 00 00 
5036   2BCA 00 00 00 00 
5036   2BCE 00 00 00 00 
5036   2BD2 00 00 00 00 
5036   2BD6 00 00 00 00 
5036   2BDA 00 00 00 00 
5036   2BDE 00 00 00 00 
5036   2BE2 00 00 00 00 
5036   2BE6 00 00 00 00 
5036   2BEA 00 00 00 00 
5036   2BEE 00 00 00 00 
5036   2BF2 00 00 00 00 
5036   2BF6 00 00 00 00 
5036   2BFA 00 00 00 00 
5036   2BFE 00 00 00 00 
5036   2C02 00 00 00 00 
5036   2C06 00 00 00 00 
5037   2C0A 0A 0D 50 72 __s0: .db "\n\rPress CTRL+C to quit.\n\r", 0
5037   2C0E 65 73 73 20 
5037   2C12 43 54 52 4C 
5037   2C16 2B 43 20 74 
5037   2C1A 6F 20 71 75 
5037   2C1E 69 74 2E 0A 
5037   2C22 0D 00 
5038   2C24 55 6E 65 78 __s1: .db "Unexpected format in printf.", 0
5038   2C28 70 65 63 74 
5038   2C2C 65 64 20 66 
5038   2C30 6F 72 6D 61 
5038   2C34 74 20 69 6E 
5038   2C38 20 70 72 69 
5038   2C3C 6E 74 66 2E 
5038   2C40 00 
5039   2C41 45 72 72 6F __s2: .db "Error: Unknown argument type.\n", 0
5039   2C45 72 3A 20 55 
5039   2C49 6E 6B 6E 6F 
5039   2C4D 77 6E 20 61 
5039   2C51 72 67 75 6D 
5039   2C55 65 6E 74 20 
5039   2C59 74 79 70 65 
5039   2C5D 2E 0A 00 
5040   2C60 1B 5B 32 4A __s3: .db "\033[2J\033[H", 0
5040   2C64 1B 5B 48 00 
5041   2C68 40 20 00    __s4: .db "@ ", 0
5042   2C6B 2E 20 00    __s5: .db ". ", 0
5043   2C6E             
5044   2C6E 70 2C       _heap_top: .dw _heap
5045   2C70 00          _heap: .db 0
5046   2C71             ; --- END DATA BLOCK
5047   2C71             
5048   2C71             .end
tasm: Number of errors = 0
