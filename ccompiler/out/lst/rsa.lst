0001   0000             ; --- FILENAME: programs/rsa.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; int p, q, n, phi, e, d; 
0011   0408 52 02 00      sub sp, 2
0012   040B 52 02 00      sub sp, 2
0013   040E 52 02 00      sub sp, 2
0014   0411 52 02 00      sub sp, 2
0015   0414 52 02 00      sub sp, 2
0016   0417 52 02 00      sub sp, 2
0017   041A             ; p = 13; 
0018   041A FA FF FF      lea d, [bp + -1] ; $p
0019   041D DA            push d
0020   041E 26 0D 00      mov b, $d
0021   0421 38 00 00      mov c, 0
0022   0424 E7            pop d
0023   0425 FD 43         mov [d], b
0024   0427             ; q = 11; 
0025   0427 FA FD FF      lea d, [bp + -3] ; $q
0026   042A DA            push d
0027   042B 26 0B 00      mov b, $b
0028   042E 38 00 00      mov c, 0
0029   0431 E7            pop d
0030   0432 FD 43         mov [d], b
0031   0434             ; n = p * q; 
0032   0434 FA FB FF      lea d, [bp + -5] ; $n
0033   0437 DA            push d
0034   0438 FA FF FF      lea d, [bp + -1] ; $p
0035   043B 2A            mov b, [d]
0036   043C 38 00 00      mov c, 0
0037   043F             ; --- START FACTORS
0038   043F D7            push a
0039   0440 11            mov a, b
0040   0441 FA FD FF      lea d, [bp + -3] ; $q
0041   0444 2A            mov b, [d]
0042   0445 38 00 00      mov c, 0
0043   0448 AC            mul a, b ; *
0044   0449 11            mov a, b
0045   044A 27            mov b, a
0046   044B E4            pop a
0047   044C             ; --- END FACTORS
0048   044C E7            pop d
0049   044D FD 43         mov [d], b
0050   044F             ; phi = (p - 1) * (q - 1); 
0051   044F FA F9 FF      lea d, [bp + -7] ; $phi
0052   0452 DA            push d
0053   0453 FA FF FF      lea d, [bp + -1] ; $p
0054   0456 2A            mov b, [d]
0055   0457 38 00 00      mov c, 0
0056   045A             ; --- START TERMS
0057   045A D7            push a
0058   045B 11            mov a, b
0059   045C 26 01 00      mov b, $1
0060   045F 38 00 00      mov c, 0
0061   0462 60            sub a, b
0062   0463 27            mov b, a
0063   0464 E4            pop a
0064   0465             ; --- END TERMS
0065   0465             ; --- START FACTORS
0066   0465 D7            push a
0067   0466 11            mov a, b
0068   0467 FA FD FF      lea d, [bp + -3] ; $q
0069   046A 2A            mov b, [d]
0070   046B 38 00 00      mov c, 0
0071   046E             ; --- START TERMS
0072   046E D7            push a
0073   046F 11            mov a, b
0074   0470 26 01 00      mov b, $1
0075   0473 38 00 00      mov c, 0
0076   0476 60            sub a, b
0077   0477 27            mov b, a
0078   0478 E4            pop a
0079   0479             ; --- END TERMS
0080   0479 AC            mul a, b ; *
0081   047A 11            mov a, b
0082   047B 27            mov b, a
0083   047C E4            pop a
0084   047D             ; --- END FACTORS
0085   047D E7            pop d
0086   047E FD 43         mov [d], b
0087   0480             ; e = find_e(phi); 
0088   0480 FA F7 FF      lea d, [bp + -9] ; $e
0089   0483 DA            push d
0090   0484             ; --- START FUNCTION CALL
0091   0484 FA F9 FF      lea d, [bp + -7] ; $phi
0092   0487 2A            mov b, [d]
0093   0488 38 00 00      mov c, 0
0094   048B FD AB         swp b
0095   048D D8            push b
0096   048E 07 EF 24      call find_e
0097   0491 51 02 00      add sp, 2
0098   0494             ; --- END FUNCTION CALL
0099   0494 E7            pop d
0100   0495 FD 43         mov [d], b
0101   0497             ; d = find_d(e, phi); 
0102   0497 FA F5 FF      lea d, [bp + -11] ; $d
0103   049A DA            push d
0104   049B             ; --- START FUNCTION CALL
0105   049B FA F9 FF      lea d, [bp + -7] ; $phi
0106   049E 2A            mov b, [d]
0107   049F 38 00 00      mov c, 0
0108   04A2 FD AB         swp b
0109   04A4 D8            push b
0110   04A5 FA F7 FF      lea d, [bp + -9] ; $e
0111   04A8 2A            mov b, [d]
0112   04A9 38 00 00      mov c, 0
0113   04AC FD AB         swp b
0114   04AE D8            push b
0115   04AF 07 6F 25      call find_d
0116   04B2 51 04 00      add sp, 4
0117   04B5             ; --- END FUNCTION CALL
0118   04B5 E7            pop d
0119   04B6 FD 43         mov [d], b
0120   04B8             ; printf("Public Key: "); 
0121   04B8             ; --- START FUNCTION CALL
0122   04B8 26 F8 25      mov b, _s0 ; "Public Key: "
0123   04BB FD AB         swp b
0124   04BD D8            push b
0125   04BE 07 19 0C      call printf
0126   04C1 51 02 00      add sp, 2
0127   04C4             ; --- END FUNCTION CALL
0128   04C4             ; printf("%d, ", n); 
0129   04C4             ; --- START FUNCTION CALL
0130   04C4 FA FB FF      lea d, [bp + -5] ; $n
0131   04C7 2A            mov b, [d]
0132   04C8 38 00 00      mov c, 0
0133   04CB FD AB         swp b
0134   04CD D8            push b
0135   04CE 26 05 26      mov b, _s1 ; "%d, "
0136   04D1 FD AB         swp b
0137   04D3 D8            push b
0138   04D4 07 19 0C      call printf
0139   04D7 51 04 00      add sp, 4
0140   04DA             ; --- END FUNCTION CALL
0141   04DA             ; printf("%d\n", e); 
0142   04DA             ; --- START FUNCTION CALL
0143   04DA FA F7 FF      lea d, [bp + -9] ; $e
0144   04DD 2A            mov b, [d]
0145   04DE 38 00 00      mov c, 0
0146   04E1 FD AB         swp b
0147   04E3 D8            push b
0148   04E4 26 0A 26      mov b, _s2 ; "%d\n"
0149   04E7 FD AB         swp b
0150   04E9 D8            push b
0151   04EA 07 19 0C      call printf
0152   04ED 51 04 00      add sp, 4
0153   04F0             ; --- END FUNCTION CALL
0154   04F0             ; print("Private Key: "); 
0155   04F0             ; --- START FUNCTION CALL
0156   04F0 26 0E 26      mov b, _s3 ; "Private Key: "
0157   04F3 FD AB         swp b
0158   04F5 D8            push b
0159   04F6 07 7D 1F      call print
0160   04F9 51 02 00      add sp, 2
0161   04FC             ; --- END FUNCTION CALL
0162   04FC             ; printf("%d, ", n); 
0163   04FC             ; --- START FUNCTION CALL
0164   04FC FA FB FF      lea d, [bp + -5] ; $n
0165   04FF 2A            mov b, [d]
0166   0500 38 00 00      mov c, 0
0167   0503 FD AB         swp b
0168   0505 D8            push b
0169   0506 26 05 26      mov b, _s1 ; "%d, "
0170   0509 FD AB         swp b
0171   050B D8            push b
0172   050C 07 19 0C      call printf
0173   050F 51 04 00      add sp, 4
0174   0512             ; --- END FUNCTION CALL
0175   0512             ; printf("%d\n", d); 
0176   0512             ; --- START FUNCTION CALL
0177   0512 FA F5 FF      lea d, [bp + -11] ; $d
0178   0515 2A            mov b, [d]
0179   0516 38 00 00      mov c, 0
0180   0519 FD AB         swp b
0181   051B D8            push b
0182   051C 26 0A 26      mov b, _s2 ; "%d\n"
0183   051F FD AB         swp b
0184   0521 D8            push b
0185   0522 07 19 0C      call printf
0186   0525 51 04 00      add sp, 4
0187   0528             ; --- END FUNCTION CALL
0188   0528             ; char input_str[100]; 
0189   0528 52 64 00      sub sp, 100
0190   052B             ; printf("Enter a string: "); 
0191   052B             ; --- START FUNCTION CALL
0192   052B 26 1C 26      mov b, _s4 ; "Enter a string: "
0193   052E FD AB         swp b
0194   0530 D8            push b
0195   0531 07 19 0C      call printf
0196   0534 51 02 00      add sp, 2
0197   0537             ; --- END FUNCTION CALL
0198   0537             ; gets(input_str); 
0199   0537             ; --- START FUNCTION CALL
0200   0537 FA 91 FF      lea d, [bp + -111] ; $input_str
0201   053A 2D            mov b, d
0202   053B 38 00 00      mov c, 0
0203   053E FD AB         swp b
0204   0540 D8            push b
0205   0541 07 27 17      call gets
0206   0544 51 02 00      add sp, 2
0207   0547             ; --- END FUNCTION CALL
0208   0547             ; int encrypted_chars[100]; 
0209   0547 52 C8 00      sub sp, 200
0210   054A             ; int encrypted_chars_len ; 
0211   054A 52 02 00      sub sp, 2
0212   054D             ; encrypted_chars_len = 0; 
0213   054D FA C7 FE      lea d, [bp + -313] ; $encrypted_chars_len
0214   0550 DA            push d
0215   0551 26 00 00      mov b, $0
0216   0554 38 00 00      mov c, 0
0217   0557 E7            pop d
0218   0558 FD 43         mov [d], b
0219   055A             ; printf("Encrypted text: "); 
0220   055A             ; --- START FUNCTION CALL
0221   055A 26 2D 26      mov b, _s5 ; "Encrypted text: "
0222   055D FD AB         swp b
0223   055F D8            push b
0224   0560 07 19 0C      call printf
0225   0563 51 02 00      add sp, 2
0226   0566             ; --- END FUNCTION CALL
0227   0566             ; int i; 
0228   0566 52 02 00      sub sp, 2
0229   0569             ; for (i = 0; input_str[i] != '\0' && input_str[i] != '\n'; i++) { 
0230   0569             _for1_init:
0231   0569 FA C5 FE      lea d, [bp + -315] ; $i
0232   056C DA            push d
0233   056D 26 00 00      mov b, $0
0234   0570 38 00 00      mov c, 0
0235   0573 E7            pop d
0236   0574 FD 43         mov [d], b
0237   0576             _for1_cond:
0238   0576 FA 91 FF      lea d, [bp + -111] ; $input_str
0239   0579 D7            push a
0240   057A DA            push d
0241   057B FA C5 FE      lea d, [bp + -315] ; $i
0242   057E 2A            mov b, [d]
0243   057F 38 00 00      mov c, 0
0244   0582 E7            pop d
0245   0583 5A            add d, b
0246   0584 E4            pop a
0247   0585 32            mov bl, [d]
0248   0586 A7 00         mov bh, 0
0249   0588 38 00 00      mov c, 0
0250   058B             ; --- START RELATIONAL
0251   058B D7            push a
0252   058C 11            mov a, b
0253   058D 26 00 00      mov b, $0
0254   0590 38 00 00      mov c, 0
0255   0593 B0            cmp a, b
0256   0594 FD 72         sneq ; !=
0257   0596 E4            pop a
0258   0597             ; --- END RELATIONAL
0259   0597             ; --- START LOGICAL AND
0260   0597 D7            push a
0261   0598 11            mov a, b
0262   0599 FA 91 FF      lea d, [bp + -111] ; $input_str
0263   059C D7            push a
0264   059D DA            push d
0265   059E FA C5 FE      lea d, [bp + -315] ; $i
0266   05A1 2A            mov b, [d]
0267   05A2 38 00 00      mov c, 0
0268   05A5 E7            pop d
0269   05A6 5A            add d, b
0270   05A7 E4            pop a
0271   05A8 32            mov bl, [d]
0272   05A9 A7 00         mov bh, 0
0273   05AB 38 00 00      mov c, 0
0274   05AE             ; --- START RELATIONAL
0275   05AE D7            push a
0276   05AF 11            mov a, b
0277   05B0 26 0A 00      mov b, $a
0278   05B3 38 00 00      mov c, 0
0279   05B6 B0            cmp a, b
0280   05B7 FD 72         sneq ; !=
0281   05B9 E4            pop a
0282   05BA             ; --- END RELATIONAL
0283   05BA FD A7         sand a, b
0284   05BC E4            pop a
0285   05BD             ; --- END LOGICAL AND
0286   05BD C0 00 00      cmp b, 0
0287   05C0 C6 53 06      je _for1_exit
0288   05C3             _for1_block:
0289   05C3             ; encrypted_chars[i] = mod_exp(input_str[i], e, n); 
0290   05C3 FA C9 FE      lea d, [bp + -311] ; $encrypted_chars
0291   05C6 D7            push a
0292   05C7 DA            push d
0293   05C8 FA C5 FE      lea d, [bp + -315] ; $i
0294   05CB 2A            mov b, [d]
0295   05CC 38 00 00      mov c, 0
0296   05CF E7            pop d
0297   05D0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0298   05D4 E4            pop a
0299   05D5 DA            push d
0300   05D6             ; --- START FUNCTION CALL
0301   05D6 FA FB FF      lea d, [bp + -5] ; $n
0302   05D9 2A            mov b, [d]
0303   05DA 38 00 00      mov c, 0
0304   05DD FD AB         swp b
0305   05DF D8            push b
0306   05E0 FA F7 FF      lea d, [bp + -9] ; $e
0307   05E3 2A            mov b, [d]
0308   05E4 38 00 00      mov c, 0
0309   05E7 FD AB         swp b
0310   05E9 D8            push b
0311   05EA FA 91 FF      lea d, [bp + -111] ; $input_str
0312   05ED D7            push a
0313   05EE DA            push d
0314   05EF FA C5 FE      lea d, [bp + -315] ; $i
0315   05F2 2A            mov b, [d]
0316   05F3 38 00 00      mov c, 0
0317   05F6 E7            pop d
0318   05F7 5A            add d, b
0319   05F8 E4            pop a
0320   05F9 32            mov bl, [d]
0321   05FA A7 00         mov bh, 0
0322   05FC 38 00 00      mov c, 0
0323   05FF FD AB         swp b
0324   0601 D8            push b
0325   0602 07 31 24      call mod_exp
0326   0605 51 06 00      add sp, 6
0327   0608             ; --- END FUNCTION CALL
0328   0608 E7            pop d
0329   0609 FD 43         mov [d], b
0330   060B             ; printf("%d ", encrypted_chars[i]); 
0331   060B             ; --- START FUNCTION CALL
0332   060B FA C9 FE      lea d, [bp + -311] ; $encrypted_chars
0333   060E D7            push a
0334   060F DA            push d
0335   0610 FA C5 FE      lea d, [bp + -315] ; $i
0336   0613 2A            mov b, [d]
0337   0614 38 00 00      mov c, 0
0338   0617 E7            pop d
0339   0618 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0340   061C E4            pop a
0341   061D 2A            mov b, [d]
0342   061E 38 00 00      mov c, 0
0343   0621 FD AB         swp b
0344   0623 D8            push b
0345   0624 26 3E 26      mov b, _s6 ; "%d "
0346   0627 FD AB         swp b
0347   0629 D8            push b
0348   062A 07 19 0C      call printf
0349   062D 51 04 00      add sp, 4
0350   0630             ; --- END FUNCTION CALL
0351   0630             ; encrypted_chars_len++; 
0352   0630 FA C7 FE      lea d, [bp + -313] ; $encrypted_chars_len
0353   0633 2A            mov b, [d]
0354   0634 38 00 00      mov c, 0
0355   0637 FD 77         inc b
0356   0639 FA C7 FE      lea d, [bp + -313] ; $encrypted_chars_len
0357   063C FD 43         mov [d], b
0358   063E FD 7D         dec b
0359   0640             _for1_update:
0360   0640 FA C5 FE      lea d, [bp + -315] ; $i
0361   0643 2A            mov b, [d]
0362   0644 38 00 00      mov c, 0
0363   0647 FD 77         inc b
0364   0649 FA C5 FE      lea d, [bp + -315] ; $i
0365   064C FD 43         mov [d], b
0366   064E FD 7D         dec b
0367   0650 0A 76 05      jmp _for1_cond
0368   0653             _for1_exit:
0369   0653             ; printf("\n"); 
0370   0653             ; --- START FUNCTION CALL
0371   0653 26 42 26      mov b, _s7 ; "\n"
0372   0656 FD AB         swp b
0373   0658 D8            push b
0374   0659 07 19 0C      call printf
0375   065C 51 02 00      add sp, 2
0376   065F             ; --- END FUNCTION CALL
0377   065F             ; int decrypted_char; 
0378   065F 52 02 00      sub sp, 2
0379   0662             ; char c; 
0380   0662 52 01 00      sub sp, 1
0381   0665             ; printf("Decrypted text: "); 
0382   0665             ; --- START FUNCTION CALL
0383   0665 26 44 26      mov b, _s8 ; "Decrypted text: "
0384   0668 FD AB         swp b
0385   066A D8            push b
0386   066B 07 19 0C      call printf
0387   066E 51 02 00      add sp, 2
0388   0671             ; --- END FUNCTION CALL
0389   0671             ; for (i = 0; i < encrypted_chars_len; i++) { 
0390   0671             _for2_init:
0391   0671 FA C5 FE      lea d, [bp + -315] ; $i
0392   0674 DA            push d
0393   0675 26 00 00      mov b, $0
0394   0678 38 00 00      mov c, 0
0395   067B E7            pop d
0396   067C FD 43         mov [d], b
0397   067E             _for2_cond:
0398   067E FA C5 FE      lea d, [bp + -315] ; $i
0399   0681 2A            mov b, [d]
0400   0682 38 00 00      mov c, 0
0401   0685             ; --- START RELATIONAL
0402   0685 D7            push a
0403   0686 11            mov a, b
0404   0687 FA C7 FE      lea d, [bp + -313] ; $encrypted_chars_len
0405   068A 2A            mov b, [d]
0406   068B 38 00 00      mov c, 0
0407   068E B0            cmp a, b
0408   068F FD 73         slt ; < (signed)
0409   0691 E4            pop a
0410   0692             ; --- END RELATIONAL
0411   0692 C0 00 00      cmp b, 0
0412   0695 C6 03 07      je _for2_exit
0413   0698             _for2_block:
0414   0698             ; decrypted_char = mod_exp(encrypted_chars[i], d, n); 
0415   0698 FA C3 FE      lea d, [bp + -317] ; $decrypted_char
0416   069B DA            push d
0417   069C             ; --- START FUNCTION CALL
0418   069C FA FB FF      lea d, [bp + -5] ; $n
0419   069F 2A            mov b, [d]
0420   06A0 38 00 00      mov c, 0
0421   06A3 FD AB         swp b
0422   06A5 D8            push b
0423   06A6 FA F5 FF      lea d, [bp + -11] ; $d
0424   06A9 2A            mov b, [d]
0425   06AA 38 00 00      mov c, 0
0426   06AD FD AB         swp b
0427   06AF D8            push b
0428   06B0 FA C9 FE      lea d, [bp + -311] ; $encrypted_chars
0429   06B3 D7            push a
0430   06B4 DA            push d
0431   06B5 FA C5 FE      lea d, [bp + -315] ; $i
0432   06B8 2A            mov b, [d]
0433   06B9 38 00 00      mov c, 0
0434   06BC E7            pop d
0435   06BD FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0436   06C1 E4            pop a
0437   06C2 2A            mov b, [d]
0438   06C3 38 00 00      mov c, 0
0439   06C6 FD AB         swp b
0440   06C8 D8            push b
0441   06C9 07 31 24      call mod_exp
0442   06CC 51 06 00      add sp, 6
0443   06CF             ; --- END FUNCTION CALL
0444   06CF E7            pop d
0445   06D0 FD 43         mov [d], b
0446   06D2             ; c = decrypted_char; 
0447   06D2 FA C2 FE      lea d, [bp + -318] ; $c
0448   06D5 DA            push d
0449   06D6 FA C3 FE      lea d, [bp + -317] ; $decrypted_char
0450   06D9 2A            mov b, [d]
0451   06DA 38 00 00      mov c, 0
0452   06DD E7            pop d
0453   06DE FD 3E         mov [d], bl
0454   06E0             ; putchar(c); 
0455   06E0             ; --- START FUNCTION CALL
0456   06E0 FA C2 FE      lea d, [bp + -318] ; $c
0457   06E3 32            mov bl, [d]
0458   06E4 A7 00         mov bh, 0
0459   06E6 38 00 00      mov c, 0
0460   06E9 DD            push bl
0461   06EA 07 2F 1F      call putchar
0462   06ED 51 01 00      add sp, 1
0463   06F0             ; --- END FUNCTION CALL
0464   06F0             _for2_update:
0465   06F0 FA C5 FE      lea d, [bp + -315] ; $i
0466   06F3 2A            mov b, [d]
0467   06F4 38 00 00      mov c, 0
0468   06F7 FD 77         inc b
0469   06F9 FA C5 FE      lea d, [bp + -315] ; $i
0470   06FC FD 43         mov [d], b
0471   06FE FD 7D         dec b
0472   0700 0A 7E 06      jmp _for2_cond
0473   0703             _for2_exit:
0474   0703             ; printf("\n"); 
0475   0703             ; --- START FUNCTION CALL
0476   0703 26 42 26      mov b, _s7 ; "\n"
0477   0706 FD AB         swp b
0478   0708 D8            push b
0479   0709 07 19 0C      call printf
0480   070C 51 02 00      add sp, 2
0481   070F             ; --- END FUNCTION CALL
0482   070F             ; return 0; 
0483   070F 26 00 00      mov b, $0
0484   0712 38 00 00      mov c, 0
0485   0715 F9            leave
0486   0716 05 0B         syscall sys_terminate_proc
0487   0718             
0488   0718             strcpy:
0489   0718 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0490   071B             ; char *psrc; 
0491   071B 52 02 00      sub sp, 2
0492   071E             ; char *pdest; 
0493   071E 52 02 00      sub sp, 2
0494   0721             ; psrc = src; 
0495   0721 FA FF FF      lea d, [bp + -1] ; $psrc
0496   0724 DA            push d
0497   0725 FA 07 00      lea d, [bp + 7] ; $src
0498   0728 2A            mov b, [d]
0499   0729 38 00 00      mov c, 0
0500   072C E7            pop d
0501   072D FD 43         mov [d], b
0502   072F             ; pdest = dest; 
0503   072F FA FD FF      lea d, [bp + -3] ; $pdest
0504   0732 DA            push d
0505   0733 FA 05 00      lea d, [bp + 5] ; $dest
0506   0736 2A            mov b, [d]
0507   0737 38 00 00      mov c, 0
0508   073A E7            pop d
0509   073B FD 43         mov [d], b
0510   073D             ; while(*psrc) *pdest++ = *psrc++; 
0511   073D             _while3_cond:
0512   073D FA FF FF      lea d, [bp + -1] ; $psrc
0513   0740 2A            mov b, [d]
0514   0741 38 00 00      mov c, 0
0515   0744 74            mov d, b
0516   0745 32            mov bl, [d]
0517   0746 A7 00         mov bh, 0
0518   0748 C0 00 00      cmp b, 0
0519   074B C6 79 07      je _while3_exit
0520   074E             _while3_block:
0521   074E             ; *pdest++ = *psrc++; 
0522   074E FA FD FF      lea d, [bp + -3] ; $pdest
0523   0751 2A            mov b, [d]
0524   0752 38 00 00      mov c, 0
0525   0755 FD 77         inc b
0526   0757 FA FD FF      lea d, [bp + -3] ; $pdest
0527   075A FD 43         mov [d], b
0528   075C FD 7D         dec b
0529   075E D8            push b
0530   075F FA FF FF      lea d, [bp + -1] ; $psrc
0531   0762 2A            mov b, [d]
0532   0763 38 00 00      mov c, 0
0533   0766 FD 77         inc b
0534   0768 FA FF FF      lea d, [bp + -1] ; $psrc
0535   076B FD 43         mov [d], b
0536   076D FD 7D         dec b
0537   076F 74            mov d, b
0538   0770 32            mov bl, [d]
0539   0771 A7 00         mov bh, 0
0540   0773 E7            pop d
0541   0774 FD 3E         mov [d], bl
0542   0776 0A 3D 07      jmp _while3_cond
0543   0779             _while3_exit:
0544   0779             ; *pdest = '\0'; 
0545   0779 FA FD FF      lea d, [bp + -3] ; $pdest
0546   077C 2A            mov b, [d]
0547   077D 38 00 00      mov c, 0
0548   0780 D8            push b
0549   0781 26 00 00      mov b, $0
0550   0784 38 00 00      mov c, 0
0551   0787 E7            pop d
0552   0788 FD 3E         mov [d], bl
0553   078A F9            leave
0554   078B 09            ret
0555   078C             
0556   078C             strcmp:
0557   078C F8 00 00      enter 0 ; (push bp; mov bp, sp)
0558   078F             ; while (*s1 && (*s1 == *s2)) { 
0559   078F             _while4_cond:
0560   078F FA 05 00      lea d, [bp + 5] ; $s1
0561   0792 2A            mov b, [d]
0562   0793 38 00 00      mov c, 0
0563   0796 74            mov d, b
0564   0797 32            mov bl, [d]
0565   0798 A7 00         mov bh, 0
0566   079A             ; --- START LOGICAL AND
0567   079A D7            push a
0568   079B 11            mov a, b
0569   079C FA 05 00      lea d, [bp + 5] ; $s1
0570   079F 2A            mov b, [d]
0571   07A0 38 00 00      mov c, 0
0572   07A3 74            mov d, b
0573   07A4 32            mov bl, [d]
0574   07A5 A7 00         mov bh, 0
0575   07A7             ; --- START RELATIONAL
0576   07A7 D7            push a
0577   07A8 11            mov a, b
0578   07A9 FA 07 00      lea d, [bp + 7] ; $s2
0579   07AC 2A            mov b, [d]
0580   07AD 38 00 00      mov c, 0
0581   07B0 74            mov d, b
0582   07B1 32            mov bl, [d]
0583   07B2 A7 00         mov bh, 0
0584   07B4 B0            cmp a, b
0585   07B5 FD 71         seq ; ==
0586   07B7 E4            pop a
0587   07B8             ; --- END RELATIONAL
0588   07B8 FD A7         sand a, b
0589   07BA E4            pop a
0590   07BB             ; --- END LOGICAL AND
0591   07BB C0 00 00      cmp b, 0
0592   07BE C6 E4 07      je _while4_exit
0593   07C1             _while4_block:
0594   07C1             ; s1++; 
0595   07C1 FA 05 00      lea d, [bp + 5] ; $s1
0596   07C4 2A            mov b, [d]
0597   07C5 38 00 00      mov c, 0
0598   07C8 FD 77         inc b
0599   07CA FA 05 00      lea d, [bp + 5] ; $s1
0600   07CD FD 43         mov [d], b
0601   07CF FD 7D         dec b
0602   07D1             ; s2++; 
0603   07D1 FA 07 00      lea d, [bp + 7] ; $s2
0604   07D4 2A            mov b, [d]
0605   07D5 38 00 00      mov c, 0
0606   07D8 FD 77         inc b
0607   07DA FA 07 00      lea d, [bp + 7] ; $s2
0608   07DD FD 43         mov [d], b
0609   07DF FD 7D         dec b
0610   07E1 0A 8F 07      jmp _while4_cond
0611   07E4             _while4_exit:
0612   07E4             ; return *s1 - *s2; 
0613   07E4 FA 05 00      lea d, [bp + 5] ; $s1
0614   07E7 2A            mov b, [d]
0615   07E8 38 00 00      mov c, 0
0616   07EB 74            mov d, b
0617   07EC 32            mov bl, [d]
0618   07ED A7 00         mov bh, 0
0619   07EF             ; --- START TERMS
0620   07EF D7            push a
0621   07F0 11            mov a, b
0622   07F1 FA 07 00      lea d, [bp + 7] ; $s2
0623   07F4 2A            mov b, [d]
0624   07F5 38 00 00      mov c, 0
0625   07F8 74            mov d, b
0626   07F9 32            mov bl, [d]
0627   07FA A7 00         mov bh, 0
0628   07FC 60            sub a, b
0629   07FD 27            mov b, a
0630   07FE E4            pop a
0631   07FF             ; --- END TERMS
0632   07FF F9            leave
0633   0800 09            ret
0634   0801             
0635   0801             strncmp:
0636   0801 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0637   0804 F9            leave
0638   0805 09            ret
0639   0806             
0640   0806             strcat:
0641   0806 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0642   0809             ; int dest_len; 
0643   0809 52 02 00      sub sp, 2
0644   080C             ; int i; 
0645   080C 52 02 00      sub sp, 2
0646   080F             ; dest_len = strlen(dest); 
0647   080F FA FF FF      lea d, [bp + -1] ; $dest_len
0648   0812 DA            push d
0649   0813             ; --- START FUNCTION CALL
0650   0813 FA 05 00      lea d, [bp + 5] ; $dest
0651   0816 2A            mov b, [d]
0652   0817 38 00 00      mov c, 0
0653   081A FD AB         swp b
0654   081C D8            push b
0655   081D 07 E9 08      call strlen
0656   0820 51 02 00      add sp, 2
0657   0823             ; --- END FUNCTION CALL
0658   0823 E7            pop d
0659   0824 FD 43         mov [d], b
0660   0826             ; for (i = 0; src[i] != 0; i=i+1) { 
0661   0826             _for5_init:
0662   0826 FA FD FF      lea d, [bp + -3] ; $i
0663   0829 DA            push d
0664   082A 26 00 00      mov b, $0
0665   082D 38 00 00      mov c, 0
0666   0830 E7            pop d
0667   0831 FD 43         mov [d], b
0668   0833             _for5_cond:
0669   0833 FA 07 00      lea d, [bp + 7] ; $src
0670   0836 FD 2A         mov d, [d]
0671   0838 D7            push a
0672   0839 DA            push d
0673   083A FA FD FF      lea d, [bp + -3] ; $i
0674   083D 2A            mov b, [d]
0675   083E 38 00 00      mov c, 0
0676   0841 E7            pop d
0677   0842 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0678   0846 E4            pop a
0679   0847 32            mov bl, [d]
0680   0848 A7 00         mov bh, 0
0681   084A 38 00 00      mov c, 0
0682   084D             ; --- START RELATIONAL
0683   084D D7            push a
0684   084E 11            mov a, b
0685   084F 26 00 00      mov b, $0
0686   0852 38 00 00      mov c, 0
0687   0855 B0            cmp a, b
0688   0856 FD 72         sneq ; !=
0689   0858 E4            pop a
0690   0859             ; --- END RELATIONAL
0691   0859 C0 00 00      cmp b, 0
0692   085C C6 B7 08      je _for5_exit
0693   085F             _for5_block:
0694   085F             ; dest[dest_len + i] = src[i]; 
0695   085F FA 05 00      lea d, [bp + 5] ; $dest
0696   0862 FD 2A         mov d, [d]
0697   0864 D7            push a
0698   0865 DA            push d
0699   0866 FA FF FF      lea d, [bp + -1] ; $dest_len
0700   0869 2A            mov b, [d]
0701   086A 38 00 00      mov c, 0
0702   086D             ; --- START TERMS
0703   086D D7            push a
0704   086E 11            mov a, b
0705   086F FA FD FF      lea d, [bp + -3] ; $i
0706   0872 2A            mov b, [d]
0707   0873 38 00 00      mov c, 0
0708   0876 56            add b, a
0709   0877 E4            pop a
0710   0878             ; --- END TERMS
0711   0878 E7            pop d
0712   0879 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0713   087D E4            pop a
0714   087E DA            push d
0715   087F FA 07 00      lea d, [bp + 7] ; $src
0716   0882 FD 2A         mov d, [d]
0717   0884 D7            push a
0718   0885 DA            push d
0719   0886 FA FD FF      lea d, [bp + -3] ; $i
0720   0889 2A            mov b, [d]
0721   088A 38 00 00      mov c, 0
0722   088D E7            pop d
0723   088E FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0724   0892 E4            pop a
0725   0893 32            mov bl, [d]
0726   0894 A7 00         mov bh, 0
0727   0896 38 00 00      mov c, 0
0728   0899 E7            pop d
0729   089A FD 3E         mov [d], bl
0730   089C             _for5_update:
0731   089C FA FD FF      lea d, [bp + -3] ; $i
0732   089F DA            push d
0733   08A0 FA FD FF      lea d, [bp + -3] ; $i
0734   08A3 2A            mov b, [d]
0735   08A4 38 00 00      mov c, 0
0736   08A7             ; --- START TERMS
0737   08A7 D7            push a
0738   08A8 11            mov a, b
0739   08A9 26 01 00      mov b, $1
0740   08AC 38 00 00      mov c, 0
0741   08AF 56            add b, a
0742   08B0 E4            pop a
0743   08B1             ; --- END TERMS
0744   08B1 E7            pop d
0745   08B2 FD 43         mov [d], b
0746   08B4 0A 33 08      jmp _for5_cond
0747   08B7             _for5_exit:
0748   08B7             ; dest[dest_len + i] = 0; 
0749   08B7 FA 05 00      lea d, [bp + 5] ; $dest
0750   08BA FD 2A         mov d, [d]
0751   08BC D7            push a
0752   08BD DA            push d
0753   08BE FA FF FF      lea d, [bp + -1] ; $dest_len
0754   08C1 2A            mov b, [d]
0755   08C2 38 00 00      mov c, 0
0756   08C5             ; --- START TERMS
0757   08C5 D7            push a
0758   08C6 11            mov a, b
0759   08C7 FA FD FF      lea d, [bp + -3] ; $i
0760   08CA 2A            mov b, [d]
0761   08CB 38 00 00      mov c, 0
0762   08CE 56            add b, a
0763   08CF E4            pop a
0764   08D0             ; --- END TERMS
0765   08D0 E7            pop d
0766   08D1 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0767   08D5 E4            pop a
0768   08D6 DA            push d
0769   08D7 26 00 00      mov b, $0
0770   08DA 38 00 00      mov c, 0
0771   08DD E7            pop d
0772   08DE FD 3E         mov [d], bl
0773   08E0             ; return dest; 
0774   08E0 FA 05 00      lea d, [bp + 5] ; $dest
0775   08E3 2A            mov b, [d]
0776   08E4 38 00 00      mov c, 0
0777   08E7 F9            leave
0778   08E8 09            ret
0779   08E9             
0780   08E9             strlen:
0781   08E9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0782   08EC             ; int length; 
0783   08EC 52 02 00      sub sp, 2
0784   08EF             ; length = 0; 
0785   08EF FA FF FF      lea d, [bp + -1] ; $length
0786   08F2 DA            push d
0787   08F3 26 00 00      mov b, $0
0788   08F6 38 00 00      mov c, 0
0789   08F9 E7            pop d
0790   08FA FD 43         mov [d], b
0791   08FC             ; while (str[length] != 0) { 
0792   08FC             _while6_cond:
0793   08FC FA 05 00      lea d, [bp + 5] ; $str
0794   08FF FD 2A         mov d, [d]
0795   0901 D7            push a
0796   0902 DA            push d
0797   0903 FA FF FF      lea d, [bp + -1] ; $length
0798   0906 2A            mov b, [d]
0799   0907 38 00 00      mov c, 0
0800   090A E7            pop d
0801   090B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0802   090F E4            pop a
0803   0910 32            mov bl, [d]
0804   0911 A7 00         mov bh, 0
0805   0913 38 00 00      mov c, 0
0806   0916             ; --- START RELATIONAL
0807   0916 D7            push a
0808   0917 11            mov a, b
0809   0918 26 00 00      mov b, $0
0810   091B 38 00 00      mov c, 0
0811   091E B0            cmp a, b
0812   091F FD 72         sneq ; !=
0813   0921 E4            pop a
0814   0922             ; --- END RELATIONAL
0815   0922 C0 00 00      cmp b, 0
0816   0925 C6 3B 09      je _while6_exit
0817   0928             _while6_block:
0818   0928             ; length++; 
0819   0928 FA FF FF      lea d, [bp + -1] ; $length
0820   092B 2A            mov b, [d]
0821   092C 38 00 00      mov c, 0
0822   092F FD 77         inc b
0823   0931 FA FF FF      lea d, [bp + -1] ; $length
0824   0934 FD 43         mov [d], b
0825   0936 FD 7D         dec b
0826   0938 0A FC 08      jmp _while6_cond
0827   093B             _while6_exit:
0828   093B             ; return length; 
0829   093B FA FF FF      lea d, [bp + -1] ; $length
0830   093E 2A            mov b, [d]
0831   093F 38 00 00      mov c, 0
0832   0942 F9            leave
0833   0943 09            ret
0834   0944             
0835   0944             exit:
0836   0944 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0837   0947             
0838   0947             ; --- BEGIN INLINE ASM SEGMENT
0839   0947 05 0B         syscall sys_terminate_proc
0840   0949             ; --- END INLINE ASM SEGMENT
0841   0949             
0842   0949 F9            leave
0843   094A 09            ret
0844   094B             
0845   094B             memset:
0846   094B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0847   094E             ; int i; 
0848   094E 52 02 00      sub sp, 2
0849   0951             ; for(i = 0; i < size; i++){ 
0850   0951             _for7_init:
0851   0951 FA FF FF      lea d, [bp + -1] ; $i
0852   0954 DA            push d
0853   0955 26 00 00      mov b, $0
0854   0958 38 00 00      mov c, 0
0855   095B E7            pop d
0856   095C FD 43         mov [d], b
0857   095E             _for7_cond:
0858   095E FA FF FF      lea d, [bp + -1] ; $i
0859   0961 2A            mov b, [d]
0860   0962 38 00 00      mov c, 0
0861   0965             ; --- START RELATIONAL
0862   0965 D7            push a
0863   0966 11            mov a, b
0864   0967 FA 08 00      lea d, [bp + 8] ; $size
0865   096A 2A            mov b, [d]
0866   096B 38 00 00      mov c, 0
0867   096E B0            cmp a, b
0868   096F FD 73         slt ; < (signed)
0869   0971 E4            pop a
0870   0972             ; --- END RELATIONAL
0871   0972 C0 00 00      cmp b, 0
0872   0975 C6 AA 09      je _for7_exit
0873   0978             _for7_block:
0874   0978             ; *(s+i) = c; 
0875   0978 FA 05 00      lea d, [bp + 5] ; $s
0876   097B 2A            mov b, [d]
0877   097C 38 00 00      mov c, 0
0878   097F             ; --- START TERMS
0879   097F D7            push a
0880   0980 11            mov a, b
0881   0981 FA FF FF      lea d, [bp + -1] ; $i
0882   0984 2A            mov b, [d]
0883   0985 38 00 00      mov c, 0
0884   0988 56            add b, a
0885   0989 E4            pop a
0886   098A             ; --- END TERMS
0887   098A D8            push b
0888   098B FA 07 00      lea d, [bp + 7] ; $c
0889   098E 32            mov bl, [d]
0890   098F A7 00         mov bh, 0
0891   0991 38 00 00      mov c, 0
0892   0994 E7            pop d
0893   0995 FD 3E         mov [d], bl
0894   0997             _for7_update:
0895   0997 FA FF FF      lea d, [bp + -1] ; $i
0896   099A 2A            mov b, [d]
0897   099B 38 00 00      mov c, 0
0898   099E FD 77         inc b
0899   09A0 FA FF FF      lea d, [bp + -1] ; $i
0900   09A3 FD 43         mov [d], b
0901   09A5 FD 7D         dec b
0902   09A7 0A 5E 09      jmp _for7_cond
0903   09AA             _for7_exit:
0904   09AA             ; return s; 
0905   09AA FA 05 00      lea d, [bp + 5] ; $s
0906   09AD 2A            mov b, [d]
0907   09AE 38 00 00      mov c, 0
0908   09B1 F9            leave
0909   09B2 09            ret
0910   09B3             
0911   09B3             atoi:
0912   09B3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0913   09B6             ; int result = 0;  // Initialize result 
0914   09B6 52 02 00      sub sp, 2
0915   09B9             ; --- START LOCAL VAR INITIALIZATION
0916   09B9 FA FF FF      lea d, [bp + -1] ; $result
0917   09BC DA            push d
0918   09BD 26 00 00      mov b, $0
0919   09C0 38 00 00      mov c, 0
0920   09C3 E7            pop d
0921   09C4 FD 43         mov [d], b
0922   09C6             ; --- END LOCAL VAR INITIALIZATION
0923   09C6             ; int sign = 1;    // Initialize sign as positive 
0924   09C6 52 02 00      sub sp, 2
0925   09C9             ; --- START LOCAL VAR INITIALIZATION
0926   09C9 FA FD FF      lea d, [bp + -3] ; $sign
0927   09CC DA            push d
0928   09CD 26 01 00      mov b, $1
0929   09D0 38 00 00      mov c, 0
0930   09D3 E7            pop d
0931   09D4 FD 43         mov [d], b
0932   09D6             ; --- END LOCAL VAR INITIALIZATION
0933   09D6             ; while (*str == ' ') str++; 
0934   09D6             _while8_cond:
0935   09D6 FA 05 00      lea d, [bp + 5] ; $str
0936   09D9 2A            mov b, [d]
0937   09DA 38 00 00      mov c, 0
0938   09DD 74            mov d, b
0939   09DE 32            mov bl, [d]
0940   09DF A7 00         mov bh, 0
0941   09E1             ; --- START RELATIONAL
0942   09E1 D7            push a
0943   09E2 11            mov a, b
0944   09E3 26 20 00      mov b, $20
0945   09E6 38 00 00      mov c, 0
0946   09E9 B0            cmp a, b
0947   09EA FD 71         seq ; ==
0948   09EC E4            pop a
0949   09ED             ; --- END RELATIONAL
0950   09ED C0 00 00      cmp b, 0
0951   09F0 C6 06 0A      je _while8_exit
0952   09F3             _while8_block:
0953   09F3             ; str++; 
0954   09F3 FA 05 00      lea d, [bp + 5] ; $str
0955   09F6 2A            mov b, [d]
0956   09F7 38 00 00      mov c, 0
0957   09FA FD 77         inc b
0958   09FC FA 05 00      lea d, [bp + 5] ; $str
0959   09FF FD 43         mov [d], b
0960   0A01 FD 7D         dec b
0961   0A03 0A D6 09      jmp _while8_cond
0962   0A06             _while8_exit:
0963   0A06             ; if (*str == '-' || *str == '+') { 
0964   0A06             _if9_cond:
0965   0A06 FA 05 00      lea d, [bp + 5] ; $str
0966   0A09 2A            mov b, [d]
0967   0A0A 38 00 00      mov c, 0
0968   0A0D 74            mov d, b
0969   0A0E 32            mov bl, [d]
0970   0A0F A7 00         mov bh, 0
0971   0A11             ; --- START RELATIONAL
0972   0A11 D7            push a
0973   0A12 11            mov a, b
0974   0A13 26 2D 00      mov b, $2d
0975   0A16 38 00 00      mov c, 0
0976   0A19 B0            cmp a, b
0977   0A1A FD 71         seq ; ==
0978   0A1C E4            pop a
0979   0A1D             ; --- END RELATIONAL
0980   0A1D             ; --- START LOGICAL OR
0981   0A1D D7            push a
0982   0A1E 11            mov a, b
0983   0A1F FA 05 00      lea d, [bp + 5] ; $str
0984   0A22 2A            mov b, [d]
0985   0A23 38 00 00      mov c, 0
0986   0A26 74            mov d, b
0987   0A27 32            mov bl, [d]
0988   0A28 A7 00         mov bh, 0
0989   0A2A             ; --- START RELATIONAL
0990   0A2A D7            push a
0991   0A2B 11            mov a, b
0992   0A2C 26 2B 00      mov b, $2b
0993   0A2F 38 00 00      mov c, 0
0994   0A32 B0            cmp a, b
0995   0A33 FD 71         seq ; ==
0996   0A35 E4            pop a
0997   0A36             ; --- END RELATIONAL
0998   0A36 FD A8         sor a, b ; ||
0999   0A38 E4            pop a
1000   0A39             ; --- END LOGICAL OR
1001   0A39 C0 00 00      cmp b, 0
1002   0A3C C6 81 0A      je _if9_exit
1003   0A3F             _if9_true:
1004   0A3F             ; if (*str == '-') sign = -1; 
1005   0A3F             _if10_cond:
1006   0A3F FA 05 00      lea d, [bp + 5] ; $str
1007   0A42 2A            mov b, [d]
1008   0A43 38 00 00      mov c, 0
1009   0A46 74            mov d, b
1010   0A47 32            mov bl, [d]
1011   0A48 A7 00         mov bh, 0
1012   0A4A             ; --- START RELATIONAL
1013   0A4A D7            push a
1014   0A4B 11            mov a, b
1015   0A4C 26 2D 00      mov b, $2d
1016   0A4F 38 00 00      mov c, 0
1017   0A52 B0            cmp a, b
1018   0A53 FD 71         seq ; ==
1019   0A55 E4            pop a
1020   0A56             ; --- END RELATIONAL
1021   0A56 C0 00 00      cmp b, 0
1022   0A59 C6 6E 0A      je _if10_exit
1023   0A5C             _if10_true:
1024   0A5C             ; sign = -1; 
1025   0A5C FA FD FF      lea d, [bp + -3] ; $sign
1026   0A5F DA            push d
1027   0A60 26 01 00      mov b, $1
1028   0A63 38 00 00      mov c, 0
1029   0A66 FD 97         neg b
1030   0A68 E7            pop d
1031   0A69 FD 43         mov [d], b
1032   0A6B 0A 6E 0A      jmp _if10_exit
1033   0A6E             _if10_exit:
1034   0A6E             ; str++; 
1035   0A6E FA 05 00      lea d, [bp + 5] ; $str
1036   0A71 2A            mov b, [d]
1037   0A72 38 00 00      mov c, 0
1038   0A75 FD 77         inc b
1039   0A77 FA 05 00      lea d, [bp + 5] ; $str
1040   0A7A FD 43         mov [d], b
1041   0A7C FD 7D         dec b
1042   0A7E 0A 81 0A      jmp _if9_exit
1043   0A81             _if9_exit:
1044   0A81             ; while (*str >= '0' && *str <= '9') { 
1045   0A81             _while11_cond:
1046   0A81 FA 05 00      lea d, [bp + 5] ; $str
1047   0A84 2A            mov b, [d]
1048   0A85 38 00 00      mov c, 0
1049   0A88 74            mov d, b
1050   0A89 32            mov bl, [d]
1051   0A8A A7 00         mov bh, 0
1052   0A8C             ; --- START RELATIONAL
1053   0A8C D7            push a
1054   0A8D 11            mov a, b
1055   0A8E 26 30 00      mov b, $30
1056   0A91 38 00 00      mov c, 0
1057   0A94 B0            cmp a, b
1058   0A95 FD 82         sgeu ; >= (unsigned)
1059   0A97 E4            pop a
1060   0A98             ; --- END RELATIONAL
1061   0A98             ; --- START LOGICAL AND
1062   0A98 D7            push a
1063   0A99 11            mov a, b
1064   0A9A FA 05 00      lea d, [bp + 5] ; $str
1065   0A9D 2A            mov b, [d]
1066   0A9E 38 00 00      mov c, 0
1067   0AA1 74            mov d, b
1068   0AA2 32            mov bl, [d]
1069   0AA3 A7 00         mov bh, 0
1070   0AA5             ; --- START RELATIONAL
1071   0AA5 D7            push a
1072   0AA6 11            mov a, b
1073   0AA7 26 39 00      mov b, $39
1074   0AAA 38 00 00      mov c, 0
1075   0AAD B0            cmp a, b
1076   0AAE FD 76         sleu ; <= (unsigned)
1077   0AB0 E4            pop a
1078   0AB1             ; --- END RELATIONAL
1079   0AB1 FD A7         sand a, b
1080   0AB3 E4            pop a
1081   0AB4             ; --- END LOGICAL AND
1082   0AB4 C0 00 00      cmp b, 0
1083   0AB7 C6 01 0B      je _while11_exit
1084   0ABA             _while11_block:
1085   0ABA             ; result = result * 10 + (*str - '0'); 
1086   0ABA FA FF FF      lea d, [bp + -1] ; $result
1087   0ABD DA            push d
1088   0ABE FA FF FF      lea d, [bp + -1] ; $result
1089   0AC1 2A            mov b, [d]
1090   0AC2 38 00 00      mov c, 0
1091   0AC5             ; --- START FACTORS
1092   0AC5 D7            push a
1093   0AC6 11            mov a, b
1094   0AC7 26 0A 00      mov b, $a
1095   0ACA 38 00 00      mov c, 0
1096   0ACD AC            mul a, b ; *
1097   0ACE 11            mov a, b
1098   0ACF 27            mov b, a
1099   0AD0 E4            pop a
1100   0AD1             ; --- END FACTORS
1101   0AD1             ; --- START TERMS
1102   0AD1 D7            push a
1103   0AD2 11            mov a, b
1104   0AD3 FA 05 00      lea d, [bp + 5] ; $str
1105   0AD6 2A            mov b, [d]
1106   0AD7 38 00 00      mov c, 0
1107   0ADA 74            mov d, b
1108   0ADB 32            mov bl, [d]
1109   0ADC A7 00         mov bh, 0
1110   0ADE             ; --- START TERMS
1111   0ADE D7            push a
1112   0ADF 11            mov a, b
1113   0AE0 26 30 00      mov b, $30
1114   0AE3 38 00 00      mov c, 0
1115   0AE6 60            sub a, b
1116   0AE7 27            mov b, a
1117   0AE8 E4            pop a
1118   0AE9             ; --- END TERMS
1119   0AE9 56            add b, a
1120   0AEA E4            pop a
1121   0AEB             ; --- END TERMS
1122   0AEB E7            pop d
1123   0AEC FD 43         mov [d], b
1124   0AEE             ; str++; 
1125   0AEE FA 05 00      lea d, [bp + 5] ; $str
1126   0AF1 2A            mov b, [d]
1127   0AF2 38 00 00      mov c, 0
1128   0AF5 FD 77         inc b
1129   0AF7 FA 05 00      lea d, [bp + 5] ; $str
1130   0AFA FD 43         mov [d], b
1131   0AFC FD 7D         dec b
1132   0AFE 0A 81 0A      jmp _while11_cond
1133   0B01             _while11_exit:
1134   0B01             ; return sign * result; 
1135   0B01 FA FD FF      lea d, [bp + -3] ; $sign
1136   0B04 2A            mov b, [d]
1137   0B05 38 00 00      mov c, 0
1138   0B08             ; --- START FACTORS
1139   0B08 D7            push a
1140   0B09 11            mov a, b
1141   0B0A FA FF FF      lea d, [bp + -1] ; $result
1142   0B0D 2A            mov b, [d]
1143   0B0E 38 00 00      mov c, 0
1144   0B11 AC            mul a, b ; *
1145   0B12 11            mov a, b
1146   0B13 27            mov b, a
1147   0B14 E4            pop a
1148   0B15             ; --- END FACTORS
1149   0B15 F9            leave
1150   0B16 09            ret
1151   0B17             
1152   0B17             rand:
1153   0B17 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1154   0B1A             ; int  sec; 
1155   0B1A 52 02 00      sub sp, 2
1156   0B1D             
1157   0B1D             ; --- BEGIN INLINE ASM SEGMENT
1158   0B1D 19 00         mov al, 0
1159   0B1F 05 01         syscall sys_rtc					
1160   0B21 1A            mov al, ah
1161   0B22 FA FF FF      lea d, [bp + -1] ; $sec
1162   0B25 1E            mov al, [d]
1163   0B26 22 00         mov ah, 0
1164   0B28             ; --- END INLINE ASM SEGMENT
1165   0B28             
1166   0B28             ; return sec; 
1167   0B28 FA FF FF      lea d, [bp + -1] ; $sec
1168   0B2B 2A            mov b, [d]
1169   0B2C 38 00 00      mov c, 0
1170   0B2F F9            leave
1171   0B30 09            ret
1172   0B31             
1173   0B31             alloc:
1174   0B31 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1175   0B34             ; heap_top = heap_top + bytes; 
1176   0B34 3B 99 26      mov d, _heap_top ; $heap_top
1177   0B37 DA            push d
1178   0B38 3B 99 26      mov d, _heap_top ; $heap_top
1179   0B3B 2A            mov b, [d]
1180   0B3C 38 00 00      mov c, 0
1181   0B3F             ; --- START TERMS
1182   0B3F D7            push a
1183   0B40 11            mov a, b
1184   0B41 FA 05 00      lea d, [bp + 5] ; $bytes
1185   0B44 2A            mov b, [d]
1186   0B45 38 00 00      mov c, 0
1187   0B48 56            add b, a
1188   0B49 E4            pop a
1189   0B4A             ; --- END TERMS
1190   0B4A E7            pop d
1191   0B4B FD 43         mov [d], b
1192   0B4D             ; return heap_top - bytes; 
1193   0B4D 3B 99 26      mov d, _heap_top ; $heap_top
1194   0B50 2A            mov b, [d]
1195   0B51 38 00 00      mov c, 0
1196   0B54             ; --- START TERMS
1197   0B54 D7            push a
1198   0B55 11            mov a, b
1199   0B56 FA 05 00      lea d, [bp + 5] ; $bytes
1200   0B59 2A            mov b, [d]
1201   0B5A 38 00 00      mov c, 0
1202   0B5D 60            sub a, b
1203   0B5E 27            mov b, a
1204   0B5F E4            pop a
1205   0B60             ; --- END TERMS
1206   0B60 F9            leave
1207   0B61 09            ret
1208   0B62             
1209   0B62             free:
1210   0B62 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1211   0B65             ; return heap_top = heap_top - bytes; 
1212   0B65 3B 99 26      mov d, _heap_top ; $heap_top
1213   0B68 DA            push d
1214   0B69 3B 99 26      mov d, _heap_top ; $heap_top
1215   0B6C 2A            mov b, [d]
1216   0B6D 38 00 00      mov c, 0
1217   0B70             ; --- START TERMS
1218   0B70 D7            push a
1219   0B71 11            mov a, b
1220   0B72 FA 05 00      lea d, [bp + 5] ; $bytes
1221   0B75 2A            mov b, [d]
1222   0B76 38 00 00      mov c, 0
1223   0B79 60            sub a, b
1224   0B7A 27            mov b, a
1225   0B7B E4            pop a
1226   0B7C             ; --- END TERMS
1227   0B7C E7            pop d
1228   0B7D FD 43         mov [d], b
1229   0B7F F9            leave
1230   0B80 09            ret
1231   0B81             
1232   0B81             fopen:
1233   0B81 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1234   0B84             ; FILE *fp; 
1235   0B84 52 02 00      sub sp, 2
1236   0B87             ; static int max_handle = 0; 
1237   0B87 52 02 00      sub sp, 2
1238   0B8A             ; fp = alloc(sizeof(FILE)); 
1239   0B8A FA FF FF      lea d, [bp + -1] ; $fp
1240   0B8D DA            push d
1241   0B8E             ; --- START FUNCTION CALL
1242   0B8E 26 04 01      mov b, 260
1243   0B91 FD AB         swp b
1244   0B93 D8            push b
1245   0B94 07 31 0B      call alloc
1246   0B97 51 02 00      add sp, 2
1247   0B9A             ; --- END FUNCTION CALL
1248   0B9A E7            pop d
1249   0B9B FD 43         mov [d], b
1250   0B9D             ; strcpy(fp->filename, filename); 
1251   0B9D             ; --- START FUNCTION CALL
1252   0B9D FA 05 00      lea d, [bp + 5] ; $filename
1253   0BA0 2A            mov b, [d]
1254   0BA1 38 00 00      mov c, 0
1255   0BA4 FD AB         swp b
1256   0BA6 D8            push b
1257   0BA7 FA FF FF      lea d, [bp + -1] ; $fp
1258   0BAA FD 2A         mov d, [d]
1259   0BAC 58 02 00      add d, 2
1260   0BAF 2D            mov b, d
1261   0BB0 38 00 00      mov c, 0
1262   0BB3 FD AB         swp b
1263   0BB5 D8            push b
1264   0BB6 07 18 07      call strcpy
1265   0BB9 51 04 00      add sp, 4
1266   0BBC             ; --- END FUNCTION CALL
1267   0BBC             ; fp->handle = max_handle; 
1268   0BBC FA FF FF      lea d, [bp + -1] ; $fp
1269   0BBF FD 2A         mov d, [d]
1270   0BC1 58 00 00      add d, 0
1271   0BC4 DA            push d
1272   0BC5 3B F6 25      mov d, st_fopen_max_handle ; static max_handle
1273   0BC8 2A            mov b, [d]
1274   0BC9 38 00 00      mov c, 0
1275   0BCC E7            pop d
1276   0BCD FD 43         mov [d], b
1277   0BCF             ; fp->mode = mode; 
1278   0BCF FA FF FF      lea d, [bp + -1] ; $fp
1279   0BD2 FD 2A         mov d, [d]
1280   0BD4 58 02 01      add d, 258
1281   0BD7 DA            push d
1282   0BD8 FA 07 00      lea d, [bp + 7] ; $mode
1283   0BDB 32            mov bl, [d]
1284   0BDC A7 00         mov bh, 0
1285   0BDE 38 00 00      mov c, 0
1286   0BE1 E7            pop d
1287   0BE2 FD 3E         mov [d], bl
1288   0BE4             ; fp->loc = 0; 
1289   0BE4 FA FF FF      lea d, [bp + -1] ; $fp
1290   0BE7 FD 2A         mov d, [d]
1291   0BE9 58 03 01      add d, 259
1292   0BEC DA            push d
1293   0BED 26 00 00      mov b, $0
1294   0BF0 38 00 00      mov c, 0
1295   0BF3 E7            pop d
1296   0BF4 FD 3E         mov [d], bl
1297   0BF6             ; max_handle++; 
1298   0BF6 3B F6 25      mov d, st_fopen_max_handle ; static max_handle
1299   0BF9 2A            mov b, [d]
1300   0BFA 38 00 00      mov c, 0
1301   0BFD FD 77         inc b
1302   0BFF 3B F6 25      mov d, st_fopen_max_handle ; static max_handle
1303   0C02 FD 43         mov [d], b
1304   0C04 FD 7D         dec b
1305   0C06 F9            leave
1306   0C07 09            ret
1307   0C08             
1308   0C08             fclose:
1309   0C08 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1310   0C0B             ; free(sizeof(FILE)); 
1311   0C0B             ; --- START FUNCTION CALL
1312   0C0B 26 04 01      mov b, 260
1313   0C0E FD AB         swp b
1314   0C10 D8            push b
1315   0C11 07 62 0B      call free
1316   0C14 51 02 00      add sp, 2
1317   0C17             ; --- END FUNCTION CALL
1318   0C17 F9            leave
1319   0C18 09            ret
1320   0C19             
1321   0C19             printf:
1322   0C19 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1323   0C1C             ; char *p, *format_p; 
1324   0C1C 52 02 00      sub sp, 2
1325   0C1F 52 02 00      sub sp, 2
1326   0C22             ; format_p = format; 
1327   0C22 FA FD FF      lea d, [bp + -3] ; $format_p
1328   0C25 DA            push d
1329   0C26 FA 05 00      lea d, [bp + 5] ; $format
1330   0C29 2A            mov b, [d]
1331   0C2A 38 00 00      mov c, 0
1332   0C2D E7            pop d
1333   0C2E FD 43         mov [d], b
1334   0C30             ; p = &format + 2; 
1335   0C30 FA FF FF      lea d, [bp + -1] ; $p
1336   0C33 DA            push d
1337   0C34 FA 05 00      lea d, [bp + 5] ; $format
1338   0C37 2D            mov b, d
1339   0C38             ; --- START TERMS
1340   0C38 D7            push a
1341   0C39 11            mov a, b
1342   0C3A 26 02 00      mov b, $2
1343   0C3D 38 00 00      mov c, 0
1344   0C40 56            add b, a
1345   0C41 E4            pop a
1346   0C42             ; --- END TERMS
1347   0C42 E7            pop d
1348   0C43 FD 43         mov [d], b
1349   0C45             ; for(;;){ 
1350   0C45             _for12_init:
1351   0C45             _for12_cond:
1352   0C45             _for12_block:
1353   0C45             ; if(!*format_p) break; 
1354   0C45             _if13_cond:
1355   0C45 FA FD FF      lea d, [bp + -3] ; $format_p
1356   0C48 2A            mov b, [d]
1357   0C49 38 00 00      mov c, 0
1358   0C4C 74            mov d, b
1359   0C4D 32            mov bl, [d]
1360   0C4E A7 00         mov bh, 0
1361   0C50 C0 00 00      cmp b, 0
1362   0C53 FD 71         seq ; !
1363   0C55 C0 00 00      cmp b, 0
1364   0C58 C6 61 0C      je _if13_else
1365   0C5B             _if13_true:
1366   0C5B             ; break; 
1367   0C5B 0A DF 0E      jmp _for12_exit ; for break
1368   0C5E 0A DC 0E      jmp _if13_exit
1369   0C61             _if13_else:
1370   0C61             ; if(*format_p == '%'){ 
1371   0C61             _if14_cond:
1372   0C61 FA FD FF      lea d, [bp + -3] ; $format_p
1373   0C64 2A            mov b, [d]
1374   0C65 38 00 00      mov c, 0
1375   0C68 74            mov d, b
1376   0C69 32            mov bl, [d]
1377   0C6A A7 00         mov bh, 0
1378   0C6C             ; --- START RELATIONAL
1379   0C6C D7            push a
1380   0C6D 11            mov a, b
1381   0C6E 26 25 00      mov b, $25
1382   0C71 38 00 00      mov c, 0
1383   0C74 B0            cmp a, b
1384   0C75 FD 71         seq ; ==
1385   0C77 E4            pop a
1386   0C78             ; --- END RELATIONAL
1387   0C78 C0 00 00      cmp b, 0
1388   0C7B C6 BA 0E      je _if14_else
1389   0C7E             _if14_true:
1390   0C7E             ; format_p++; 
1391   0C7E FA FD FF      lea d, [bp + -3] ; $format_p
1392   0C81 2A            mov b, [d]
1393   0C82 38 00 00      mov c, 0
1394   0C85 FD 77         inc b
1395   0C87 FA FD FF      lea d, [bp + -3] ; $format_p
1396   0C8A FD 43         mov [d], b
1397   0C8C FD 7D         dec b
1398   0C8E             ; switch(*format_p){ 
1399   0C8E             _switch15_expr:
1400   0C8E FA FD FF      lea d, [bp + -3] ; $format_p
1401   0C91 2A            mov b, [d]
1402   0C92 38 00 00      mov c, 0
1403   0C95 74            mov d, b
1404   0C96 32            mov bl, [d]
1405   0C97 A7 00         mov bh, 0
1406   0C99             _switch15_comparisons:
1407   0C99 C1 6C         cmp bl, $6c
1408   0C9B C6 C7 0C      je _switch15_case0
1409   0C9E C1 4C         cmp bl, $4c
1410   0CA0 C6 C7 0C      je _switch15_case1
1411   0CA3 C1 64         cmp bl, $64
1412   0CA5 C6 D3 0D      je _switch15_case2
1413   0CA8 C1 69         cmp bl, $69
1414   0CAA C6 D3 0D      je _switch15_case3
1415   0CAD C1 75         cmp bl, $75
1416   0CAF C6 00 0E      je _switch15_case4
1417   0CB2 C1 78         cmp bl, $78
1418   0CB4 C6 2D 0E      je _switch15_case5
1419   0CB7 C1 63         cmp bl, $63
1420   0CB9 C6 51 0E      je _switch15_case6
1421   0CBC C1 73         cmp bl, $73
1422   0CBE C6 76 0E      je _switch15_case7
1423   0CC1 0A 9B 0E      jmp _switch15_default
1424   0CC4 0A A7 0E      jmp _switch15_exit
1425   0CC7             _switch15_case0:
1426   0CC7             _switch15_case1:
1427   0CC7             ; format_p++; 
1428   0CC7 FA FD FF      lea d, [bp + -3] ; $format_p
1429   0CCA 2A            mov b, [d]
1430   0CCB 38 00 00      mov c, 0
1431   0CCE FD 77         inc b
1432   0CD0 FA FD FF      lea d, [bp + -3] ; $format_p
1433   0CD3 FD 43         mov [d], b
1434   0CD5 FD 7D         dec b
1435   0CD7             ; if(*format_p == 'd' || *format_p == 'i') 
1436   0CD7             _if16_cond:
1437   0CD7 FA FD FF      lea d, [bp + -3] ; $format_p
1438   0CDA 2A            mov b, [d]
1439   0CDB 38 00 00      mov c, 0
1440   0CDE 74            mov d, b
1441   0CDF 32            mov bl, [d]
1442   0CE0 A7 00         mov bh, 0
1443   0CE2             ; --- START RELATIONAL
1444   0CE2 D7            push a
1445   0CE3 11            mov a, b
1446   0CE4 26 64 00      mov b, $64
1447   0CE7 38 00 00      mov c, 0
1448   0CEA B0            cmp a, b
1449   0CEB FD 71         seq ; ==
1450   0CED E4            pop a
1451   0CEE             ; --- END RELATIONAL
1452   0CEE             ; --- START LOGICAL OR
1453   0CEE D7            push a
1454   0CEF 11            mov a, b
1455   0CF0 FA FD FF      lea d, [bp + -3] ; $format_p
1456   0CF3 2A            mov b, [d]
1457   0CF4 38 00 00      mov c, 0
1458   0CF7 74            mov d, b
1459   0CF8 32            mov bl, [d]
1460   0CF9 A7 00         mov bh, 0
1461   0CFB             ; --- START RELATIONAL
1462   0CFB D7            push a
1463   0CFC 11            mov a, b
1464   0CFD 26 69 00      mov b, $69
1465   0D00 38 00 00      mov c, 0
1466   0D03 B0            cmp a, b
1467   0D04 FD 71         seq ; ==
1468   0D06 E4            pop a
1469   0D07             ; --- END RELATIONAL
1470   0D07 FD A8         sor a, b ; ||
1471   0D09 E4            pop a
1472   0D0A             ; --- END LOGICAL OR
1473   0D0A C0 00 00      cmp b, 0
1474   0D0D C6 31 0D      je _if16_else
1475   0D10             _if16_true:
1476   0D10             ; print_signed_long(*(long *)p); 
1477   0D10             ; --- START FUNCTION CALL
1478   0D10 FA FF FF      lea d, [bp + -1] ; $p
1479   0D13 2A            mov b, [d]
1480   0D14 38 00 00      mov c, 0
1481   0D17 AB            snex b
1482   0D18 FD 39         mov c, b
1483   0D1A 74            mov d, b
1484   0D1B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1485   0D1E FD 39         mov c, b ; And place it into C
1486   0D20 2A            mov b, [d] ; Lower Word in B
1487   0D21 12            mov a, c
1488   0D22 FD AA         swp a
1489   0D24 D7            push a
1490   0D25 FD AB         swp b
1491   0D27 D8            push b
1492   0D28 07 7D 18      call print_signed_long
1493   0D2B 51 04 00      add sp, 4
1494   0D2E             ; --- END FUNCTION CALL
1495   0D2E 0A B8 0D      jmp _if16_exit
1496   0D31             _if16_else:
1497   0D31             ; if(*format_p == 'u') 
1498   0D31             _if17_cond:
1499   0D31 FA FD FF      lea d, [bp + -3] ; $format_p
1500   0D34 2A            mov b, [d]
1501   0D35 38 00 00      mov c, 0
1502   0D38 74            mov d, b
1503   0D39 32            mov bl, [d]
1504   0D3A A7 00         mov bh, 0
1505   0D3C             ; --- START RELATIONAL
1506   0D3C D7            push a
1507   0D3D 11            mov a, b
1508   0D3E 26 75 00      mov b, $75
1509   0D41 38 00 00      mov c, 0
1510   0D44 B0            cmp a, b
1511   0D45 FD 71         seq ; ==
1512   0D47 E4            pop a
1513   0D48             ; --- END RELATIONAL
1514   0D48 C0 00 00      cmp b, 0
1515   0D4B C6 71 0D      je _if17_else
1516   0D4E             _if17_true:
1517   0D4E             ; print_unsigned_long(*(unsigned long *)p); 
1518   0D4E             ; --- START FUNCTION CALL
1519   0D4E FA FF FF      lea d, [bp + -1] ; $p
1520   0D51 2A            mov b, [d]
1521   0D52 38 00 00      mov c, 0
1522   0D55 A7 00         mov bh, 0
1523   0D57 38 00 00      mov c, 0
1524   0D5A 74            mov d, b
1525   0D5B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1526   0D5E FD 39         mov c, b ; And place it into C
1527   0D60 2A            mov b, [d] ; Lower Word in B
1528   0D61 12            mov a, c
1529   0D62 FD AA         swp a
1530   0D64 D7            push a
1531   0D65 FD AB         swp b
1532   0D67 D8            push b
1533   0D68 07 ED 19      call print_unsigned_long
1534   0D6B 51 04 00      add sp, 4
1535   0D6E             ; --- END FUNCTION CALL
1536   0D6E 0A B8 0D      jmp _if17_exit
1537   0D71             _if17_else:
1538   0D71             ; if(*format_p == 'x') 
1539   0D71             _if18_cond:
1540   0D71 FA FD FF      lea d, [bp + -3] ; $format_p
1541   0D74 2A            mov b, [d]
1542   0D75 38 00 00      mov c, 0
1543   0D78 74            mov d, b
1544   0D79 32            mov bl, [d]
1545   0D7A A7 00         mov bh, 0
1546   0D7C             ; --- START RELATIONAL
1547   0D7C D7            push a
1548   0D7D 11            mov a, b
1549   0D7E 26 78 00      mov b, $78
1550   0D81 38 00 00      mov c, 0
1551   0D84 B0            cmp a, b
1552   0D85 FD 71         seq ; ==
1553   0D87 E4            pop a
1554   0D88             ; --- END RELATIONAL
1555   0D88 C0 00 00      cmp b, 0
1556   0D8B C6 AC 0D      je _if18_else
1557   0D8E             _if18_true:
1558   0D8E             ; printx32(*(long int *)p); 
1559   0D8E             ; --- START FUNCTION CALL
1560   0D8E FA FF FF      lea d, [bp + -1] ; $p
1561   0D91 2A            mov b, [d]
1562   0D92 38 00 00      mov c, 0
1563   0D95 74            mov d, b
1564   0D96 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1565   0D99 FD 39         mov c, b ; And place it into C
1566   0D9B 2A            mov b, [d] ; Lower Word in B
1567   0D9C 12            mov a, c
1568   0D9D FD AA         swp a
1569   0D9F D7            push a
1570   0DA0 FD AB         swp b
1571   0DA2 D8            push b
1572   0DA3 07 50 15      call printx32
1573   0DA6 51 04 00      add sp, 4
1574   0DA9             ; --- END FUNCTION CALL
1575   0DA9 0A B8 0D      jmp _if18_exit
1576   0DAC             _if18_else:
1577   0DAC             ; err("Unexpected format in printf."); 
1578   0DAC             ; --- START FUNCTION CALL
1579   0DAC 26 55 26      mov b, _s9 ; "Unexpected format in printf."
1580   0DAF FD AB         swp b
1581   0DB1 D8            push b
1582   0DB2 07 3B 15      call err
1583   0DB5 51 02 00      add sp, 2
1584   0DB8             ; --- END FUNCTION CALL
1585   0DB8             _if18_exit:
1586   0DB8             _if17_exit:
1587   0DB8             _if16_exit:
1588   0DB8             ; p = p + 4; 
1589   0DB8 FA FF FF      lea d, [bp + -1] ; $p
1590   0DBB DA            push d
1591   0DBC FA FF FF      lea d, [bp + -1] ; $p
1592   0DBF 2A            mov b, [d]
1593   0DC0 38 00 00      mov c, 0
1594   0DC3             ; --- START TERMS
1595   0DC3 D7            push a
1596   0DC4 11            mov a, b
1597   0DC5 26 04 00      mov b, $4
1598   0DC8 38 00 00      mov c, 0
1599   0DCB 56            add b, a
1600   0DCC E4            pop a
1601   0DCD             ; --- END TERMS
1602   0DCD E7            pop d
1603   0DCE FD 43         mov [d], b
1604   0DD0             ; break; 
1605   0DD0 0A A7 0E      jmp _switch15_exit ; case break
1606   0DD3             _switch15_case2:
1607   0DD3             _switch15_case3:
1608   0DD3             ; print_signed(*(int*)p); 
1609   0DD3             ; --- START FUNCTION CALL
1610   0DD3 FA FF FF      lea d, [bp + -1] ; $p
1611   0DD6 2A            mov b, [d]
1612   0DD7 38 00 00      mov c, 0
1613   0DDA 74            mov d, b
1614   0DDB 2A            mov b, [d]
1615   0DDC FD AB         swp b
1616   0DDE D8            push b
1617   0DDF 07 44 17      call print_signed
1618   0DE2 51 02 00      add sp, 2
1619   0DE5             ; --- END FUNCTION CALL
1620   0DE5             ; p = p + 2; 
1621   0DE5 FA FF FF      lea d, [bp + -1] ; $p
1622   0DE8 DA            push d
1623   0DE9 FA FF FF      lea d, [bp + -1] ; $p
1624   0DEC 2A            mov b, [d]
1625   0DED 38 00 00      mov c, 0
1626   0DF0             ; --- START TERMS
1627   0DF0 D7            push a
1628   0DF1 11            mov a, b
1629   0DF2 26 02 00      mov b, $2
1630   0DF5 38 00 00      mov c, 0
1631   0DF8 56            add b, a
1632   0DF9 E4            pop a
1633   0DFA             ; --- END TERMS
1634   0DFA E7            pop d
1635   0DFB FD 43         mov [d], b
1636   0DFD             ; break; 
1637   0DFD 0A A7 0E      jmp _switch15_exit ; case break
1638   0E00             _switch15_case4:
1639   0E00             ; print_unsigned(*(unsigned int*)p); 
1640   0E00             ; --- START FUNCTION CALL
1641   0E00 FA FF FF      lea d, [bp + -1] ; $p
1642   0E03 2A            mov b, [d]
1643   0E04 38 00 00      mov c, 0
1644   0E07 74            mov d, b
1645   0E08 2A            mov b, [d]
1646   0E09 FD AB         swp b
1647   0E0B D8            push b
1648   0E0C 07 67 1C      call print_unsigned
1649   0E0F 51 02 00      add sp, 2
1650   0E12             ; --- END FUNCTION CALL
1651   0E12             ; p = p + 2; 
1652   0E12 FA FF FF      lea d, [bp + -1] ; $p
1653   0E15 DA            push d
1654   0E16 FA FF FF      lea d, [bp + -1] ; $p
1655   0E19 2A            mov b, [d]
1656   0E1A 38 00 00      mov c, 0
1657   0E1D             ; --- START TERMS
1658   0E1D D7            push a
1659   0E1E 11            mov a, b
1660   0E1F 26 02 00      mov b, $2
1661   0E22 38 00 00      mov c, 0
1662   0E25 56            add b, a
1663   0E26 E4            pop a
1664   0E27             ; --- END TERMS
1665   0E27 E7            pop d
1666   0E28 FD 43         mov [d], b
1667   0E2A             ; break; 
1668   0E2A 0A A7 0E      jmp _switch15_exit ; case break
1669   0E2D             _switch15_case5:
1670   0E2D             
1671   0E2D             ; --- BEGIN INLINE ASM SEGMENT
1672   0E2D FA FF FF      lea d, [bp + -1] ; $p
1673   0E30 FD 2A         mov d, [d]
1674   0E32 2A            mov b, [d]
1675   0E33 07 E0 22      call print_u16x
1676   0E36             ; --- END INLINE ASM SEGMENT
1677   0E36             
1678   0E36             ; p = p + 2; 
1679   0E36 FA FF FF      lea d, [bp + -1] ; $p
1680   0E39 DA            push d
1681   0E3A FA FF FF      lea d, [bp + -1] ; $p
1682   0E3D 2A            mov b, [d]
1683   0E3E 38 00 00      mov c, 0
1684   0E41             ; --- START TERMS
1685   0E41 D7            push a
1686   0E42 11            mov a, b
1687   0E43 26 02 00      mov b, $2
1688   0E46 38 00 00      mov c, 0
1689   0E49 56            add b, a
1690   0E4A E4            pop a
1691   0E4B             ; --- END TERMS
1692   0E4B E7            pop d
1693   0E4C FD 43         mov [d], b
1694   0E4E             ; break; 
1695   0E4E 0A A7 0E      jmp _switch15_exit ; case break
1696   0E51             _switch15_case6:
1697   0E51             
1698   0E51             ; --- BEGIN INLINE ASM SEGMENT
1699   0E51 FA FF FF      lea d, [bp + -1] ; $p
1700   0E54 FD 2A         mov d, [d]
1701   0E56 1E            mov al, [d]
1702   0E57 23            mov ah, al
1703   0E58 07 3E 21      call _putchar
1704   0E5B             ; --- END INLINE ASM SEGMENT
1705   0E5B             
1706   0E5B             ; p = p + 1; 
1707   0E5B FA FF FF      lea d, [bp + -1] ; $p
1708   0E5E DA            push d
1709   0E5F FA FF FF      lea d, [bp + -1] ; $p
1710   0E62 2A            mov b, [d]
1711   0E63 38 00 00      mov c, 0
1712   0E66             ; --- START TERMS
1713   0E66 D7            push a
1714   0E67 11            mov a, b
1715   0E68 26 01 00      mov b, $1
1716   0E6B 38 00 00      mov c, 0
1717   0E6E 56            add b, a
1718   0E6F E4            pop a
1719   0E70             ; --- END TERMS
1720   0E70 E7            pop d
1721   0E71 FD 43         mov [d], b
1722   0E73             ; break; 
1723   0E73 0A A7 0E      jmp _switch15_exit ; case break
1724   0E76             _switch15_case7:
1725   0E76             
1726   0E76             ; --- BEGIN INLINE ASM SEGMENT
1727   0E76 FA FF FF      lea d, [bp + -1] ; $p
1728   0E79 FD 2A         mov d, [d]
1729   0E7B FD 2A         mov d, [d]
1730   0E7D 07 88 22      call _puts
1731   0E80             ; --- END INLINE ASM SEGMENT
1732   0E80             
1733   0E80             ; p = p + 2; 
1734   0E80 FA FF FF      lea d, [bp + -1] ; $p
1735   0E83 DA            push d
1736   0E84 FA FF FF      lea d, [bp + -1] ; $p
1737   0E87 2A            mov b, [d]
1738   0E88 38 00 00      mov c, 0
1739   0E8B             ; --- START TERMS
1740   0E8B D7            push a
1741   0E8C 11            mov a, b
1742   0E8D 26 02 00      mov b, $2
1743   0E90 38 00 00      mov c, 0
1744   0E93 56            add b, a
1745   0E94 E4            pop a
1746   0E95             ; --- END TERMS
1747   0E95 E7            pop d
1748   0E96 FD 43         mov [d], b
1749   0E98             ; break; 
1750   0E98 0A A7 0E      jmp _switch15_exit ; case break
1751   0E9B             _switch15_default:
1752   0E9B             ; print("Error: Unknown argument type.\n"); 
1753   0E9B             ; --- START FUNCTION CALL
1754   0E9B 26 72 26      mov b, _s10 ; "Error: Unknown argument type.\n"
1755   0E9E FD AB         swp b
1756   0EA0 D8            push b
1757   0EA1 07 7D 1F      call print
1758   0EA4 51 02 00      add sp, 2
1759   0EA7             ; --- END FUNCTION CALL
1760   0EA7             _switch15_exit:
1761   0EA7             ; format_p++; 
1762   0EA7 FA FD FF      lea d, [bp + -3] ; $format_p
1763   0EAA 2A            mov b, [d]
1764   0EAB 38 00 00      mov c, 0
1765   0EAE FD 77         inc b
1766   0EB0 FA FD FF      lea d, [bp + -3] ; $format_p
1767   0EB3 FD 43         mov [d], b
1768   0EB5 FD 7D         dec b
1769   0EB7 0A DC 0E      jmp _if14_exit
1770   0EBA             _if14_else:
1771   0EBA             ; putchar(*format_p); 
1772   0EBA             ; --- START FUNCTION CALL
1773   0EBA FA FD FF      lea d, [bp + -3] ; $format_p
1774   0EBD 2A            mov b, [d]
1775   0EBE 38 00 00      mov c, 0
1776   0EC1 74            mov d, b
1777   0EC2 32            mov bl, [d]
1778   0EC3 A7 00         mov bh, 0
1779   0EC5 DD            push bl
1780   0EC6 07 2F 1F      call putchar
1781   0EC9 51 01 00      add sp, 1
1782   0ECC             ; --- END FUNCTION CALL
1783   0ECC             ; format_p++; 
1784   0ECC FA FD FF      lea d, [bp + -3] ; $format_p
1785   0ECF 2A            mov b, [d]
1786   0ED0 38 00 00      mov c, 0
1787   0ED3 FD 77         inc b
1788   0ED5 FA FD FF      lea d, [bp + -3] ; $format_p
1789   0ED8 FD 43         mov [d], b
1790   0EDA FD 7D         dec b
1791   0EDC             _if14_exit:
1792   0EDC             _if13_exit:
1793   0EDC             _for12_update:
1794   0EDC 0A 45 0C      jmp _for12_cond
1795   0EDF             _for12_exit:
1796   0EDF F9            leave
1797   0EE0 09            ret
1798   0EE1             
1799   0EE1             scanf:
1800   0EE1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1801   0EE4             ; char *p, *format_p; 
1802   0EE4 52 02 00      sub sp, 2
1803   0EE7 52 02 00      sub sp, 2
1804   0EEA             ; char c; 
1805   0EEA 52 01 00      sub sp, 1
1806   0EED             ; int i; 
1807   0EED 52 02 00      sub sp, 2
1808   0EF0             ; char input_string[  512                    ]; 
1809   0EF0 52 00 02      sub sp, 512
1810   0EF3             ; format_p = format; 
1811   0EF3 FA FD FF      lea d, [bp + -3] ; $format_p
1812   0EF6 DA            push d
1813   0EF7 FA 05 00      lea d, [bp + 5] ; $format
1814   0EFA 2A            mov b, [d]
1815   0EFB 38 00 00      mov c, 0
1816   0EFE E7            pop d
1817   0EFF FD 43         mov [d], b
1818   0F01             ; p = &format + 2; 
1819   0F01 FA FF FF      lea d, [bp + -1] ; $p
1820   0F04 DA            push d
1821   0F05 FA 05 00      lea d, [bp + 5] ; $format
1822   0F08 2D            mov b, d
1823   0F09             ; --- START TERMS
1824   0F09 D7            push a
1825   0F0A 11            mov a, b
1826   0F0B 26 02 00      mov b, $2
1827   0F0E 38 00 00      mov c, 0
1828   0F11 56            add b, a
1829   0F12 E4            pop a
1830   0F13             ; --- END TERMS
1831   0F13 E7            pop d
1832   0F14 FD 43         mov [d], b
1833   0F16             ; for(;;){ 
1834   0F16             _for19_init:
1835   0F16             _for19_cond:
1836   0F16             _for19_block:
1837   0F16             ; if(!*format_p) break; 
1838   0F16             _if20_cond:
1839   0F16 FA FD FF      lea d, [bp + -3] ; $format_p
1840   0F19 2A            mov b, [d]
1841   0F1A 38 00 00      mov c, 0
1842   0F1D 74            mov d, b
1843   0F1E 32            mov bl, [d]
1844   0F1F A7 00         mov bh, 0
1845   0F21 C0 00 00      cmp b, 0
1846   0F24 FD 71         seq ; !
1847   0F26 C0 00 00      cmp b, 0
1848   0F29 C6 32 0F      je _if20_else
1849   0F2C             _if20_true:
1850   0F2C             ; break; 
1851   0F2C 0A A2 11      jmp _for19_exit ; for break
1852   0F2F 0A 9F 11      jmp _if20_exit
1853   0F32             _if20_else:
1854   0F32             ; if(*format_p == '%'){ 
1855   0F32             _if21_cond:
1856   0F32 FA FD FF      lea d, [bp + -3] ; $format_p
1857   0F35 2A            mov b, [d]
1858   0F36 38 00 00      mov c, 0
1859   0F39 74            mov d, b
1860   0F3A 32            mov bl, [d]
1861   0F3B A7 00         mov bh, 0
1862   0F3D             ; --- START RELATIONAL
1863   0F3D D7            push a
1864   0F3E 11            mov a, b
1865   0F3F 26 25 00      mov b, $25
1866   0F42 38 00 00      mov c, 0
1867   0F45 B0            cmp a, b
1868   0F46 FD 71         seq ; ==
1869   0F48 E4            pop a
1870   0F49             ; --- END RELATIONAL
1871   0F49 C0 00 00      cmp b, 0
1872   0F4C C6 7D 11      je _if21_else
1873   0F4F             _if21_true:
1874   0F4F             ; format_p++; 
1875   0F4F FA FD FF      lea d, [bp + -3] ; $format_p
1876   0F52 2A            mov b, [d]
1877   0F53 38 00 00      mov c, 0
1878   0F56 FD 77         inc b
1879   0F58 FA FD FF      lea d, [bp + -3] ; $format_p
1880   0F5B FD 43         mov [d], b
1881   0F5D FD 7D         dec b
1882   0F5F             ; switch(*format_p){ 
1883   0F5F             _switch22_expr:
1884   0F5F FA FD FF      lea d, [bp + -3] ; $format_p
1885   0F62 2A            mov b, [d]
1886   0F63 38 00 00      mov c, 0
1887   0F66 74            mov d, b
1888   0F67 32            mov bl, [d]
1889   0F68 A7 00         mov bh, 0
1890   0F6A             _switch22_comparisons:
1891   0F6A C1 6C         cmp bl, $6c
1892   0F6C C6 98 0F      je _switch22_case0
1893   0F6F C1 4C         cmp bl, $4c
1894   0F71 C6 98 0F      je _switch22_case1
1895   0F74 C1 64         cmp bl, $64
1896   0F76 C6 4B 10      je _switch22_case2
1897   0F79 C1 69         cmp bl, $69
1898   0F7B C6 4B 10      je _switch22_case3
1899   0F7E C1 75         cmp bl, $75
1900   0F80 C6 84 10      je _switch22_case4
1901   0F83 C1 78         cmp bl, $78
1902   0F85 C6 BD 10      je _switch22_case5
1903   0F88 C1 63         cmp bl, $63
1904   0F8A C6 D8 10      je _switch22_case6
1905   0F8D C1 73         cmp bl, $73
1906   0F8F C6 17 11      je _switch22_case7
1907   0F92 0A 5E 11      jmp _switch22_default
1908   0F95 0A 6A 11      jmp _switch22_exit
1909   0F98             _switch22_case0:
1910   0F98             _switch22_case1:
1911   0F98             ; format_p++; 
1912   0F98 FA FD FF      lea d, [bp + -3] ; $format_p
1913   0F9B 2A            mov b, [d]
1914   0F9C 38 00 00      mov c, 0
1915   0F9F FD 77         inc b
1916   0FA1 FA FD FF      lea d, [bp + -3] ; $format_p
1917   0FA4 FD 43         mov [d], b
1918   0FA6 FD 7D         dec b
1919   0FA8             ; if(*format_p == 'd' || *format_p == 'i'); 
1920   0FA8             _if23_cond:
1921   0FA8 FA FD FF      lea d, [bp + -3] ; $format_p
1922   0FAB 2A            mov b, [d]
1923   0FAC 38 00 00      mov c, 0
1924   0FAF 74            mov d, b
1925   0FB0 32            mov bl, [d]
1926   0FB1 A7 00         mov bh, 0
1927   0FB3             ; --- START RELATIONAL
1928   0FB3 D7            push a
1929   0FB4 11            mov a, b
1930   0FB5 26 64 00      mov b, $64
1931   0FB8 38 00 00      mov c, 0
1932   0FBB B0            cmp a, b
1933   0FBC FD 71         seq ; ==
1934   0FBE E4            pop a
1935   0FBF             ; --- END RELATIONAL
1936   0FBF             ; --- START LOGICAL OR
1937   0FBF D7            push a
1938   0FC0 11            mov a, b
1939   0FC1 FA FD FF      lea d, [bp + -3] ; $format_p
1940   0FC4 2A            mov b, [d]
1941   0FC5 38 00 00      mov c, 0
1942   0FC8 74            mov d, b
1943   0FC9 32            mov bl, [d]
1944   0FCA A7 00         mov bh, 0
1945   0FCC             ; --- START RELATIONAL
1946   0FCC D7            push a
1947   0FCD 11            mov a, b
1948   0FCE 26 69 00      mov b, $69
1949   0FD1 38 00 00      mov c, 0
1950   0FD4 B0            cmp a, b
1951   0FD5 FD 71         seq ; ==
1952   0FD7 E4            pop a
1953   0FD8             ; --- END RELATIONAL
1954   0FD8 FD A8         sor a, b ; ||
1955   0FDA E4            pop a
1956   0FDB             ; --- END LOGICAL OR
1957   0FDB C0 00 00      cmp b, 0
1958   0FDE C6 E4 0F      je _if23_else
1959   0FE1             _if23_true:
1960   0FE1             ; ; 
1961   0FE1 0A 30 10      jmp _if23_exit
1962   0FE4             _if23_else:
1963   0FE4             ; if(*format_p == 'u'); 
1964   0FE4             _if24_cond:
1965   0FE4 FA FD FF      lea d, [bp + -3] ; $format_p
1966   0FE7 2A            mov b, [d]
1967   0FE8 38 00 00      mov c, 0
1968   0FEB 74            mov d, b
1969   0FEC 32            mov bl, [d]
1970   0FED A7 00         mov bh, 0
1971   0FEF             ; --- START RELATIONAL
1972   0FEF D7            push a
1973   0FF0 11            mov a, b
1974   0FF1 26 75 00      mov b, $75
1975   0FF4 38 00 00      mov c, 0
1976   0FF7 B0            cmp a, b
1977   0FF8 FD 71         seq ; ==
1978   0FFA E4            pop a
1979   0FFB             ; --- END RELATIONAL
1980   0FFB C0 00 00      cmp b, 0
1981   0FFE C6 04 10      je _if24_else
1982   1001             _if24_true:
1983   1001             ; ; 
1984   1001 0A 30 10      jmp _if24_exit
1985   1004             _if24_else:
1986   1004             ; if(*format_p == 'x'); 
1987   1004             _if25_cond:
1988   1004 FA FD FF      lea d, [bp + -3] ; $format_p
1989   1007 2A            mov b, [d]
1990   1008 38 00 00      mov c, 0
1991   100B 74            mov d, b
1992   100C 32            mov bl, [d]
1993   100D A7 00         mov bh, 0
1994   100F             ; --- START RELATIONAL
1995   100F D7            push a
1996   1010 11            mov a, b
1997   1011 26 78 00      mov b, $78
1998   1014 38 00 00      mov c, 0
1999   1017 B0            cmp a, b
2000   1018 FD 71         seq ; ==
2001   101A E4            pop a
2002   101B             ; --- END RELATIONAL
2003   101B C0 00 00      cmp b, 0
2004   101E C6 24 10      je _if25_else
2005   1021             _if25_true:
2006   1021             ; ; 
2007   1021 0A 30 10      jmp _if25_exit
2008   1024             _if25_else:
2009   1024             ; err("Unexpected format in printf."); 
2010   1024             ; --- START FUNCTION CALL
2011   1024 26 55 26      mov b, _s9 ; "Unexpected format in printf."
2012   1027 FD AB         swp b
2013   1029 D8            push b
2014   102A 07 3B 15      call err
2015   102D 51 02 00      add sp, 2
2016   1030             ; --- END FUNCTION CALL
2017   1030             _if25_exit:
2018   1030             _if24_exit:
2019   1030             _if23_exit:
2020   1030             ; p = p + 4; 
2021   1030 FA FF FF      lea d, [bp + -1] ; $p
2022   1033 DA            push d
2023   1034 FA FF FF      lea d, [bp + -1] ; $p
2024   1037 2A            mov b, [d]
2025   1038 38 00 00      mov c, 0
2026   103B             ; --- START TERMS
2027   103B D7            push a
2028   103C 11            mov a, b
2029   103D 26 04 00      mov b, $4
2030   1040 38 00 00      mov c, 0
2031   1043 56            add b, a
2032   1044 E4            pop a
2033   1045             ; --- END TERMS
2034   1045 E7            pop d
2035   1046 FD 43         mov [d], b
2036   1048             ; break; 
2037   1048 0A 6A 11      jmp _switch22_exit ; case break
2038   104B             _switch22_case2:
2039   104B             _switch22_case3:
2040   104B             ; i = scann(); 
2041   104B FA FA FF      lea d, [bp + -6] ; $i
2042   104E DA            push d
2043   104F             ; --- START FUNCTION CALL
2044   104F 07 55 1F      call scann
2045   1052 E7            pop d
2046   1053 FD 43         mov [d], b
2047   1055             ; **(int **)p = i; 
2048   1055 FA FF FF      lea d, [bp + -1] ; $p
2049   1058 2A            mov b, [d]
2050   1059 38 00 00      mov c, 0
2051   105C 74            mov d, b
2052   105D 2A            mov b, [d]
2053   105E D8            push b
2054   105F FA FA FF      lea d, [bp + -6] ; $i
2055   1062 2A            mov b, [d]
2056   1063 38 00 00      mov c, 0
2057   1066 E7            pop d
2058   1067 FD 43         mov [d], b
2059   1069             ; p = p + 2; 
2060   1069 FA FF FF      lea d, [bp + -1] ; $p
2061   106C DA            push d
2062   106D FA FF FF      lea d, [bp + -1] ; $p
2063   1070 2A            mov b, [d]
2064   1071 38 00 00      mov c, 0
2065   1074             ; --- START TERMS
2066   1074 D7            push a
2067   1075 11            mov a, b
2068   1076 26 02 00      mov b, $2
2069   1079 38 00 00      mov c, 0
2070   107C 56            add b, a
2071   107D E4            pop a
2072   107E             ; --- END TERMS
2073   107E E7            pop d
2074   107F FD 43         mov [d], b
2075   1081             ; break; 
2076   1081 0A 6A 11      jmp _switch22_exit ; case break
2077   1084             _switch22_case4:
2078   1084             ; i = scann(); 
2079   1084 FA FA FF      lea d, [bp + -6] ; $i
2080   1087 DA            push d
2081   1088             ; --- START FUNCTION CALL
2082   1088 07 55 1F      call scann
2083   108B E7            pop d
2084   108C FD 43         mov [d], b
2085   108E             ; **(int **)p = i; 
2086   108E FA FF FF      lea d, [bp + -1] ; $p
2087   1091 2A            mov b, [d]
2088   1092 38 00 00      mov c, 0
2089   1095 74            mov d, b
2090   1096 2A            mov b, [d]
2091   1097 D8            push b
2092   1098 FA FA FF      lea d, [bp + -6] ; $i
2093   109B 2A            mov b, [d]
2094   109C 38 00 00      mov c, 0
2095   109F E7            pop d
2096   10A0 FD 43         mov [d], b
2097   10A2             ; p = p + 2; 
2098   10A2 FA FF FF      lea d, [bp + -1] ; $p
2099   10A5 DA            push d
2100   10A6 FA FF FF      lea d, [bp + -1] ; $p
2101   10A9 2A            mov b, [d]
2102   10AA 38 00 00      mov c, 0
2103   10AD             ; --- START TERMS
2104   10AD D7            push a
2105   10AE 11            mov a, b
2106   10AF 26 02 00      mov b, $2
2107   10B2 38 00 00      mov c, 0
2108   10B5 56            add b, a
2109   10B6 E4            pop a
2110   10B7             ; --- END TERMS
2111   10B7 E7            pop d
2112   10B8 FD 43         mov [d], b
2113   10BA             ; break; 
2114   10BA 0A 6A 11      jmp _switch22_exit ; case break
2115   10BD             _switch22_case5:
2116   10BD             ; p = p + 2; 
2117   10BD FA FF FF      lea d, [bp + -1] ; $p
2118   10C0 DA            push d
2119   10C1 FA FF FF      lea d, [bp + -1] ; $p
2120   10C4 2A            mov b, [d]
2121   10C5 38 00 00      mov c, 0
2122   10C8             ; --- START TERMS
2123   10C8 D7            push a
2124   10C9 11            mov a, b
2125   10CA 26 02 00      mov b, $2
2126   10CD 38 00 00      mov c, 0
2127   10D0 56            add b, a
2128   10D1 E4            pop a
2129   10D2             ; --- END TERMS
2130   10D2 E7            pop d
2131   10D3 FD 43         mov [d], b
2132   10D5             ; break; 
2133   10D5 0A 6A 11      jmp _switch22_exit ; case break
2134   10D8             _switch22_case6:
2135   10D8             ; c = getchar(); 
2136   10D8 FA FC FF      lea d, [bp + -4] ; $c
2137   10DB DA            push d
2138   10DC             ; --- START FUNCTION CALL
2139   10DC 07 3C 1F      call getchar
2140   10DF E7            pop d
2141   10E0 FD 3E         mov [d], bl
2142   10E2             ; **(char **)p = *(char *)c; 
2143   10E2 FA FF FF      lea d, [bp + -1] ; $p
2144   10E5 2A            mov b, [d]
2145   10E6 38 00 00      mov c, 0
2146   10E9 74            mov d, b
2147   10EA 2A            mov b, [d]
2148   10EB D8            push b
2149   10EC FA FC FF      lea d, [bp + -4] ; $c
2150   10EF 32            mov bl, [d]
2151   10F0 A7 00         mov bh, 0
2152   10F2 38 00 00      mov c, 0
2153   10F5 74            mov d, b
2154   10F6 32            mov bl, [d]
2155   10F7 A7 00         mov bh, 0
2156   10F9 E7            pop d
2157   10FA FD 43         mov [d], b
2158   10FC             ; p = p + 1; 
2159   10FC FA FF FF      lea d, [bp + -1] ; $p
2160   10FF DA            push d
2161   1100 FA FF FF      lea d, [bp + -1] ; $p
2162   1103 2A            mov b, [d]
2163   1104 38 00 00      mov c, 0
2164   1107             ; --- START TERMS
2165   1107 D7            push a
2166   1108 11            mov a, b
2167   1109 26 01 00      mov b, $1
2168   110C 38 00 00      mov c, 0
2169   110F 56            add b, a
2170   1110 E4            pop a
2171   1111             ; --- END TERMS
2172   1111 E7            pop d
2173   1112 FD 43         mov [d], b
2174   1114             ; break; 
2175   1114 0A 6A 11      jmp _switch22_exit ; case break
2176   1117             _switch22_case7:
2177   1117             ; gets(input_string); 
2178   1117             ; --- START FUNCTION CALL
2179   1117 FA FA FD      lea d, [bp + -518] ; $input_string
2180   111A 2D            mov b, d
2181   111B 38 00 00      mov c, 0
2182   111E FD AB         swp b
2183   1120 D8            push b
2184   1121 07 27 17      call gets
2185   1124 51 02 00      add sp, 2
2186   1127             ; --- END FUNCTION CALL
2187   1127             ; strcpy(*(char **)p, input_string); 
2188   1127             ; --- START FUNCTION CALL
2189   1127 FA FA FD      lea d, [bp + -518] ; $input_string
2190   112A 2D            mov b, d
2191   112B 38 00 00      mov c, 0
2192   112E FD AB         swp b
2193   1130 D8            push b
2194   1131 FA FF FF      lea d, [bp + -1] ; $p
2195   1134 2A            mov b, [d]
2196   1135 38 00 00      mov c, 0
2197   1138 74            mov d, b
2198   1139 2A            mov b, [d]
2199   113A FD AB         swp b
2200   113C D8            push b
2201   113D 07 18 07      call strcpy
2202   1140 51 04 00      add sp, 4
2203   1143             ; --- END FUNCTION CALL
2204   1143             ; p = p + 2; 
2205   1143 FA FF FF      lea d, [bp + -1] ; $p
2206   1146 DA            push d
2207   1147 FA FF FF      lea d, [bp + -1] ; $p
2208   114A 2A            mov b, [d]
2209   114B 38 00 00      mov c, 0
2210   114E             ; --- START TERMS
2211   114E D7            push a
2212   114F 11            mov a, b
2213   1150 26 02 00      mov b, $2
2214   1153 38 00 00      mov c, 0
2215   1156 56            add b, a
2216   1157 E4            pop a
2217   1158             ; --- END TERMS
2218   1158 E7            pop d
2219   1159 FD 43         mov [d], b
2220   115B             ; break; 
2221   115B 0A 6A 11      jmp _switch22_exit ; case break
2222   115E             _switch22_default:
2223   115E             ; print("Error: Unknown argument type.\n"); 
2224   115E             ; --- START FUNCTION CALL
2225   115E 26 72 26      mov b, _s10 ; "Error: Unknown argument type.\n"
2226   1161 FD AB         swp b
2227   1163 D8            push b
2228   1164 07 7D 1F      call print
2229   1167 51 02 00      add sp, 2
2230   116A             ; --- END FUNCTION CALL
2231   116A             _switch22_exit:
2232   116A             ; format_p++; 
2233   116A FA FD FF      lea d, [bp + -3] ; $format_p
2234   116D 2A            mov b, [d]
2235   116E 38 00 00      mov c, 0
2236   1171 FD 77         inc b
2237   1173 FA FD FF      lea d, [bp + -3] ; $format_p
2238   1176 FD 43         mov [d], b
2239   1178 FD 7D         dec b
2240   117A 0A 9F 11      jmp _if21_exit
2241   117D             _if21_else:
2242   117D             ; putchar(*format_p); 
2243   117D             ; --- START FUNCTION CALL
2244   117D FA FD FF      lea d, [bp + -3] ; $format_p
2245   1180 2A            mov b, [d]
2246   1181 38 00 00      mov c, 0
2247   1184 74            mov d, b
2248   1185 32            mov bl, [d]
2249   1186 A7 00         mov bh, 0
2250   1188 DD            push bl
2251   1189 07 2F 1F      call putchar
2252   118C 51 01 00      add sp, 1
2253   118F             ; --- END FUNCTION CALL
2254   118F             ; format_p++; 
2255   118F FA FD FF      lea d, [bp + -3] ; $format_p
2256   1192 2A            mov b, [d]
2257   1193 38 00 00      mov c, 0
2258   1196 FD 77         inc b
2259   1198 FA FD FF      lea d, [bp + -3] ; $format_p
2260   119B FD 43         mov [d], b
2261   119D FD 7D         dec b
2262   119F             _if21_exit:
2263   119F             _if20_exit:
2264   119F             _for19_update:
2265   119F 0A 16 0F      jmp _for19_cond
2266   11A2             _for19_exit:
2267   11A2 F9            leave
2268   11A3 09            ret
2269   11A4             
2270   11A4             sprintf:
2271   11A4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2272   11A7             ; char *p, *format_p; 
2273   11A7 52 02 00      sub sp, 2
2274   11AA 52 02 00      sub sp, 2
2275   11AD             ; char *sp; 
2276   11AD 52 02 00      sub sp, 2
2277   11B0             ; sp = dest; 
2278   11B0 FA FB FF      lea d, [bp + -5] ; $sp
2279   11B3 DA            push d
2280   11B4 FA 05 00      lea d, [bp + 5] ; $dest
2281   11B7 2A            mov b, [d]
2282   11B8 38 00 00      mov c, 0
2283   11BB E7            pop d
2284   11BC FD 43         mov [d], b
2285   11BE             ; format_p = format; 
2286   11BE FA FD FF      lea d, [bp + -3] ; $format_p
2287   11C1 DA            push d
2288   11C2 FA 07 00      lea d, [bp + 7] ; $format
2289   11C5 2A            mov b, [d]
2290   11C6 38 00 00      mov c, 0
2291   11C9 E7            pop d
2292   11CA FD 43         mov [d], b
2293   11CC             ; p = &format + 2; 
2294   11CC FA FF FF      lea d, [bp + -1] ; $p
2295   11CF DA            push d
2296   11D0 FA 07 00      lea d, [bp + 7] ; $format
2297   11D3 2D            mov b, d
2298   11D4             ; --- START TERMS
2299   11D4 D7            push a
2300   11D5 11            mov a, b
2301   11D6 26 02 00      mov b, $2
2302   11D9 38 00 00      mov c, 0
2303   11DC 56            add b, a
2304   11DD E4            pop a
2305   11DE             ; --- END TERMS
2306   11DE E7            pop d
2307   11DF FD 43         mov [d], b
2308   11E1             ; for(;;){ 
2309   11E1             _for26_init:
2310   11E1             _for26_cond:
2311   11E1             _for26_block:
2312   11E1             ; if(!*format_p) break; 
2313   11E1             _if27_cond:
2314   11E1 FA FD FF      lea d, [bp + -3] ; $format_p
2315   11E4 2A            mov b, [d]
2316   11E5 38 00 00      mov c, 0
2317   11E8 74            mov d, b
2318   11E9 32            mov bl, [d]
2319   11EA A7 00         mov bh, 0
2320   11EC C0 00 00      cmp b, 0
2321   11EF FD 71         seq ; !
2322   11F1 C0 00 00      cmp b, 0
2323   11F4 C6 FD 11      je _if27_else
2324   11F7             _if27_true:
2325   11F7             ; break; 
2326   11F7 0A 15 15      jmp _for26_exit ; for break
2327   11FA 0A 12 15      jmp _if27_exit
2328   11FD             _if27_else:
2329   11FD             ; if(*format_p == '%'){ 
2330   11FD             _if28_cond:
2331   11FD FA FD FF      lea d, [bp + -3] ; $format_p
2332   1200 2A            mov b, [d]
2333   1201 38 00 00      mov c, 0
2334   1204 74            mov d, b
2335   1205 32            mov bl, [d]
2336   1206 A7 00         mov bh, 0
2337   1208             ; --- START RELATIONAL
2338   1208 D7            push a
2339   1209 11            mov a, b
2340   120A 26 25 00      mov b, $25
2341   120D 38 00 00      mov c, 0
2342   1210 B0            cmp a, b
2343   1211 FD 71         seq ; ==
2344   1213 E4            pop a
2345   1214             ; --- END RELATIONAL
2346   1214 C0 00 00      cmp b, 0
2347   1217 C6 EA 14      je _if28_else
2348   121A             _if28_true:
2349   121A             ; format_p++; 
2350   121A FA FD FF      lea d, [bp + -3] ; $format_p
2351   121D 2A            mov b, [d]
2352   121E 38 00 00      mov c, 0
2353   1221 FD 77         inc b
2354   1223 FA FD FF      lea d, [bp + -3] ; $format_p
2355   1226 FD 43         mov [d], b
2356   1228 FD 7D         dec b
2357   122A             ; switch(*format_p){ 
2358   122A             _switch29_expr:
2359   122A FA FD FF      lea d, [bp + -3] ; $format_p
2360   122D 2A            mov b, [d]
2361   122E 38 00 00      mov c, 0
2362   1231 74            mov d, b
2363   1232 32            mov bl, [d]
2364   1233 A7 00         mov bh, 0
2365   1235             _switch29_comparisons:
2366   1235 C1 6C         cmp bl, $6c
2367   1237 C6 63 12      je _switch29_case0
2368   123A C1 4C         cmp bl, $4c
2369   123C C6 63 12      je _switch29_case1
2370   123F C1 64         cmp bl, $64
2371   1241 C6 6F 13      je _switch29_case2
2372   1244 C1 69         cmp bl, $69
2373   1246 C6 6F 13      je _switch29_case3
2374   1249 C1 75         cmp bl, $75
2375   124B C6 B8 13      je _switch29_case4
2376   124E C1 78         cmp bl, $78
2377   1250 C6 01 14      je _switch29_case5
2378   1253 C1 63         cmp bl, $63
2379   1255 C6 25 14      je _switch29_case6
2380   1258 C1 73         cmp bl, $73
2381   125A C6 5F 14      je _switch29_case7
2382   125D 0A CB 14      jmp _switch29_default
2383   1260 0A D7 14      jmp _switch29_exit
2384   1263             _switch29_case0:
2385   1263             _switch29_case1:
2386   1263             ; format_p++; 
2387   1263 FA FD FF      lea d, [bp + -3] ; $format_p
2388   1266 2A            mov b, [d]
2389   1267 38 00 00      mov c, 0
2390   126A FD 77         inc b
2391   126C FA FD FF      lea d, [bp + -3] ; $format_p
2392   126F FD 43         mov [d], b
2393   1271 FD 7D         dec b
2394   1273             ; if(*format_p == 'd' || *format_p == 'i') 
2395   1273             _if30_cond:
2396   1273 FA FD FF      lea d, [bp + -3] ; $format_p
2397   1276 2A            mov b, [d]
2398   1277 38 00 00      mov c, 0
2399   127A 74            mov d, b
2400   127B 32            mov bl, [d]
2401   127C A7 00         mov bh, 0
2402   127E             ; --- START RELATIONAL
2403   127E D7            push a
2404   127F 11            mov a, b
2405   1280 26 64 00      mov b, $64
2406   1283 38 00 00      mov c, 0
2407   1286 B0            cmp a, b
2408   1287 FD 71         seq ; ==
2409   1289 E4            pop a
2410   128A             ; --- END RELATIONAL
2411   128A             ; --- START LOGICAL OR
2412   128A D7            push a
2413   128B 11            mov a, b
2414   128C FA FD FF      lea d, [bp + -3] ; $format_p
2415   128F 2A            mov b, [d]
2416   1290 38 00 00      mov c, 0
2417   1293 74            mov d, b
2418   1294 32            mov bl, [d]
2419   1295 A7 00         mov bh, 0
2420   1297             ; --- START RELATIONAL
2421   1297 D7            push a
2422   1298 11            mov a, b
2423   1299 26 69 00      mov b, $69
2424   129C 38 00 00      mov c, 0
2425   129F B0            cmp a, b
2426   12A0 FD 71         seq ; ==
2427   12A2 E4            pop a
2428   12A3             ; --- END RELATIONAL
2429   12A3 FD A8         sor a, b ; ||
2430   12A5 E4            pop a
2431   12A6             ; --- END LOGICAL OR
2432   12A6 C0 00 00      cmp b, 0
2433   12A9 C6 CD 12      je _if30_else
2434   12AC             _if30_true:
2435   12AC             ; print_signed_long(*(long *)p); 
2436   12AC             ; --- START FUNCTION CALL
2437   12AC FA FF FF      lea d, [bp + -1] ; $p
2438   12AF 2A            mov b, [d]
2439   12B0 38 00 00      mov c, 0
2440   12B3 AB            snex b
2441   12B4 FD 39         mov c, b
2442   12B6 74            mov d, b
2443   12B7 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2444   12BA FD 39         mov c, b ; And place it into C
2445   12BC 2A            mov b, [d] ; Lower Word in B
2446   12BD 12            mov a, c
2447   12BE FD AA         swp a
2448   12C0 D7            push a
2449   12C1 FD AB         swp b
2450   12C3 D8            push b
2451   12C4 07 7D 18      call print_signed_long
2452   12C7 51 04 00      add sp, 4
2453   12CA             ; --- END FUNCTION CALL
2454   12CA 0A 54 13      jmp _if30_exit
2455   12CD             _if30_else:
2456   12CD             ; if(*format_p == 'u') 
2457   12CD             _if31_cond:
2458   12CD FA FD FF      lea d, [bp + -3] ; $format_p
2459   12D0 2A            mov b, [d]
2460   12D1 38 00 00      mov c, 0
2461   12D4 74            mov d, b
2462   12D5 32            mov bl, [d]
2463   12D6 A7 00         mov bh, 0
2464   12D8             ; --- START RELATIONAL
2465   12D8 D7            push a
2466   12D9 11            mov a, b
2467   12DA 26 75 00      mov b, $75
2468   12DD 38 00 00      mov c, 0
2469   12E0 B0            cmp a, b
2470   12E1 FD 71         seq ; ==
2471   12E3 E4            pop a
2472   12E4             ; --- END RELATIONAL
2473   12E4 C0 00 00      cmp b, 0
2474   12E7 C6 0D 13      je _if31_else
2475   12EA             _if31_true:
2476   12EA             ; print_unsigned_long(*(unsigned long *)p); 
2477   12EA             ; --- START FUNCTION CALL
2478   12EA FA FF FF      lea d, [bp + -1] ; $p
2479   12ED 2A            mov b, [d]
2480   12EE 38 00 00      mov c, 0
2481   12F1 A7 00         mov bh, 0
2482   12F3 38 00 00      mov c, 0
2483   12F6 74            mov d, b
2484   12F7 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2485   12FA FD 39         mov c, b ; And place it into C
2486   12FC 2A            mov b, [d] ; Lower Word in B
2487   12FD 12            mov a, c
2488   12FE FD AA         swp a
2489   1300 D7            push a
2490   1301 FD AB         swp b
2491   1303 D8            push b
2492   1304 07 ED 19      call print_unsigned_long
2493   1307 51 04 00      add sp, 4
2494   130A             ; --- END FUNCTION CALL
2495   130A 0A 54 13      jmp _if31_exit
2496   130D             _if31_else:
2497   130D             ; if(*format_p == 'x') 
2498   130D             _if32_cond:
2499   130D FA FD FF      lea d, [bp + -3] ; $format_p
2500   1310 2A            mov b, [d]
2501   1311 38 00 00      mov c, 0
2502   1314 74            mov d, b
2503   1315 32            mov bl, [d]
2504   1316 A7 00         mov bh, 0
2505   1318             ; --- START RELATIONAL
2506   1318 D7            push a
2507   1319 11            mov a, b
2508   131A 26 78 00      mov b, $78
2509   131D 38 00 00      mov c, 0
2510   1320 B0            cmp a, b
2511   1321 FD 71         seq ; ==
2512   1323 E4            pop a
2513   1324             ; --- END RELATIONAL
2514   1324 C0 00 00      cmp b, 0
2515   1327 C6 48 13      je _if32_else
2516   132A             _if32_true:
2517   132A             ; printx32(*(long int *)p); 
2518   132A             ; --- START FUNCTION CALL
2519   132A FA FF FF      lea d, [bp + -1] ; $p
2520   132D 2A            mov b, [d]
2521   132E 38 00 00      mov c, 0
2522   1331 74            mov d, b
2523   1332 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2524   1335 FD 39         mov c, b ; And place it into C
2525   1337 2A            mov b, [d] ; Lower Word in B
2526   1338 12            mov a, c
2527   1339 FD AA         swp a
2528   133B D7            push a
2529   133C FD AB         swp b
2530   133E D8            push b
2531   133F 07 50 15      call printx32
2532   1342 51 04 00      add sp, 4
2533   1345             ; --- END FUNCTION CALL
2534   1345 0A 54 13      jmp _if32_exit
2535   1348             _if32_else:
2536   1348             ; err("Unexpected format in printf."); 
2537   1348             ; --- START FUNCTION CALL
2538   1348 26 55 26      mov b, _s9 ; "Unexpected format in printf."
2539   134B FD AB         swp b
2540   134D D8            push b
2541   134E 07 3B 15      call err
2542   1351 51 02 00      add sp, 2
2543   1354             ; --- END FUNCTION CALL
2544   1354             _if32_exit:
2545   1354             _if31_exit:
2546   1354             _if30_exit:
2547   1354             ; p = p + 4; 
2548   1354 FA FF FF      lea d, [bp + -1] ; $p
2549   1357 DA            push d
2550   1358 FA FF FF      lea d, [bp + -1] ; $p
2551   135B 2A            mov b, [d]
2552   135C 38 00 00      mov c, 0
2553   135F             ; --- START TERMS
2554   135F D7            push a
2555   1360 11            mov a, b
2556   1361 26 04 00      mov b, $4
2557   1364 38 00 00      mov c, 0
2558   1367 56            add b, a
2559   1368 E4            pop a
2560   1369             ; --- END TERMS
2561   1369 E7            pop d
2562   136A FD 43         mov [d], b
2563   136C             ; break; 
2564   136C 0A D7 14      jmp _switch29_exit ; case break
2565   136F             _switch29_case2:
2566   136F             _switch29_case3:
2567   136F             ; sp = sp + sprint_signed(sp, *(int*)p); 
2568   136F FA FB FF      lea d, [bp + -5] ; $sp
2569   1372 DA            push d
2570   1373 FA FB FF      lea d, [bp + -5] ; $sp
2571   1376 2A            mov b, [d]
2572   1377 38 00 00      mov c, 0
2573   137A             ; --- START TERMS
2574   137A D7            push a
2575   137B 11            mov a, b
2576   137C             ; --- START FUNCTION CALL
2577   137C FA FF FF      lea d, [bp + -1] ; $p
2578   137F 2A            mov b, [d]
2579   1380 38 00 00      mov c, 0
2580   1383 74            mov d, b
2581   1384 2A            mov b, [d]
2582   1385 FD AB         swp b
2583   1387 D8            push b
2584   1388 FA FB FF      lea d, [bp + -5] ; $sp
2585   138B 2A            mov b, [d]
2586   138C 38 00 00      mov c, 0
2587   138F FD AB         swp b
2588   1391 D8            push b
2589   1392 07 67 1D      call sprint_signed
2590   1395 51 04 00      add sp, 4
2591   1398             ; --- END FUNCTION CALL
2592   1398 56            add b, a
2593   1399 E4            pop a
2594   139A             ; --- END TERMS
2595   139A E7            pop d
2596   139B FD 43         mov [d], b
2597   139D             ; p = p + 2; 
2598   139D FA FF FF      lea d, [bp + -1] ; $p
2599   13A0 DA            push d
2600   13A1 FA FF FF      lea d, [bp + -1] ; $p
2601   13A4 2A            mov b, [d]
2602   13A5 38 00 00      mov c, 0
2603   13A8             ; --- START TERMS
2604   13A8 D7            push a
2605   13A9 11            mov a, b
2606   13AA 26 02 00      mov b, $2
2607   13AD 38 00 00      mov c, 0
2608   13B0 56            add b, a
2609   13B1 E4            pop a
2610   13B2             ; --- END TERMS
2611   13B2 E7            pop d
2612   13B3 FD 43         mov [d], b
2613   13B5             ; break; 
2614   13B5 0A D7 14      jmp _switch29_exit ; case break
2615   13B8             _switch29_case4:
2616   13B8             ; sp = sp + sprint_unsigned(sp, *(unsigned int*)p); 
2617   13B8 FA FB FF      lea d, [bp + -5] ; $sp
2618   13BB DA            push d
2619   13BC FA FB FF      lea d, [bp + -5] ; $sp
2620   13BF 2A            mov b, [d]
2621   13C0 38 00 00      mov c, 0
2622   13C3             ; --- START TERMS
2623   13C3 D7            push a
2624   13C4 11            mov a, b
2625   13C5             ; --- START FUNCTION CALL
2626   13C5 FA FF FF      lea d, [bp + -1] ; $p
2627   13C8 2A            mov b, [d]
2628   13C9 38 00 00      mov c, 0
2629   13CC 74            mov d, b
2630   13CD 2A            mov b, [d]
2631   13CE FD AB         swp b
2632   13D0 D8            push b
2633   13D1 FA FB FF      lea d, [bp + -5] ; $sp
2634   13D4 2A            mov b, [d]
2635   13D5 38 00 00      mov c, 0
2636   13D8 FD AB         swp b
2637   13DA D8            push b
2638   13DB 07 0F 1B      call sprint_unsigned
2639   13DE 51 04 00      add sp, 4
2640   13E1             ; --- END FUNCTION CALL
2641   13E1 56            add b, a
2642   13E2 E4            pop a
2643   13E3             ; --- END TERMS
2644   13E3 E7            pop d
2645   13E4 FD 43         mov [d], b
2646   13E6             ; p = p + 2; 
2647   13E6 FA FF FF      lea d, [bp + -1] ; $p
2648   13E9 DA            push d
2649   13EA FA FF FF      lea d, [bp + -1] ; $p
2650   13ED 2A            mov b, [d]
2651   13EE 38 00 00      mov c, 0
2652   13F1             ; --- START TERMS
2653   13F1 D7            push a
2654   13F2 11            mov a, b
2655   13F3 26 02 00      mov b, $2
2656   13F6 38 00 00      mov c, 0
2657   13F9 56            add b, a
2658   13FA E4            pop a
2659   13FB             ; --- END TERMS
2660   13FB E7            pop d
2661   13FC FD 43         mov [d], b
2662   13FE             ; break; 
2663   13FE 0A D7 14      jmp _switch29_exit ; case break
2664   1401             _switch29_case5:
2665   1401             
2666   1401             ; --- BEGIN INLINE ASM SEGMENT
2667   1401 FA FF FF      lea d, [bp + -1] ; $p
2668   1404 FD 2A         mov d, [d]
2669   1406 2A            mov b, [d]
2670   1407 07 E0 22      call print_u16x
2671   140A             ; --- END INLINE ASM SEGMENT
2672   140A             
2673   140A             ; p = p + 2; 
2674   140A FA FF FF      lea d, [bp + -1] ; $p
2675   140D DA            push d
2676   140E FA FF FF      lea d, [bp + -1] ; $p
2677   1411 2A            mov b, [d]
2678   1412 38 00 00      mov c, 0
2679   1415             ; --- START TERMS
2680   1415 D7            push a
2681   1416 11            mov a, b
2682   1417 26 02 00      mov b, $2
2683   141A 38 00 00      mov c, 0
2684   141D 56            add b, a
2685   141E E4            pop a
2686   141F             ; --- END TERMS
2687   141F E7            pop d
2688   1420 FD 43         mov [d], b
2689   1422             ; break; 
2690   1422 0A D7 14      jmp _switch29_exit ; case break
2691   1425             _switch29_case6:
2692   1425             ; *sp++ = *(char *)p; 
2693   1425 FA FB FF      lea d, [bp + -5] ; $sp
2694   1428 2A            mov b, [d]
2695   1429 38 00 00      mov c, 0
2696   142C FD 77         inc b
2697   142E FA FB FF      lea d, [bp + -5] ; $sp
2698   1431 FD 43         mov [d], b
2699   1433 FD 7D         dec b
2700   1435 D8            push b
2701   1436 FA FF FF      lea d, [bp + -1] ; $p
2702   1439 2A            mov b, [d]
2703   143A 38 00 00      mov c, 0
2704   143D 74            mov d, b
2705   143E 32            mov bl, [d]
2706   143F A7 00         mov bh, 0
2707   1441 E7            pop d
2708   1442 FD 3E         mov [d], bl
2709   1444             ; p = p + 1; 
2710   1444 FA FF FF      lea d, [bp + -1] ; $p
2711   1447 DA            push d
2712   1448 FA FF FF      lea d, [bp + -1] ; $p
2713   144B 2A            mov b, [d]
2714   144C 38 00 00      mov c, 0
2715   144F             ; --- START TERMS
2716   144F D7            push a
2717   1450 11            mov a, b
2718   1451 26 01 00      mov b, $1
2719   1454 38 00 00      mov c, 0
2720   1457 56            add b, a
2721   1458 E4            pop a
2722   1459             ; --- END TERMS
2723   1459 E7            pop d
2724   145A FD 43         mov [d], b
2725   145C             ; break; 
2726   145C 0A D7 14      jmp _switch29_exit ; case break
2727   145F             _switch29_case7:
2728   145F             ; int len = strlen(*(char **)p); 
2729   145F 52 02 00      sub sp, 2
2730   1462             ; --- START LOCAL VAR INITIALIZATION
2731   1462 FA F9 FF      lea d, [bp + -7] ; $len
2732   1465 DA            push d
2733   1466             ; --- START FUNCTION CALL
2734   1466 FA FF FF      lea d, [bp + -1] ; $p
2735   1469 2A            mov b, [d]
2736   146A 38 00 00      mov c, 0
2737   146D 74            mov d, b
2738   146E 2A            mov b, [d]
2739   146F FD AB         swp b
2740   1471 D8            push b
2741   1472 07 E9 08      call strlen
2742   1475 51 02 00      add sp, 2
2743   1478             ; --- END FUNCTION CALL
2744   1478 E7            pop d
2745   1479 FD 43         mov [d], b
2746   147B             ; --- END LOCAL VAR INITIALIZATION
2747   147B             ; strcpy(sp, *(char **)p); 
2748   147B             ; --- START FUNCTION CALL
2749   147B FA FF FF      lea d, [bp + -1] ; $p
2750   147E 2A            mov b, [d]
2751   147F 38 00 00      mov c, 0
2752   1482 74            mov d, b
2753   1483 2A            mov b, [d]
2754   1484 FD AB         swp b
2755   1486 D8            push b
2756   1487 FA FB FF      lea d, [bp + -5] ; $sp
2757   148A 2A            mov b, [d]
2758   148B 38 00 00      mov c, 0
2759   148E FD AB         swp b
2760   1490 D8            push b
2761   1491 07 18 07      call strcpy
2762   1494 51 04 00      add sp, 4
2763   1497             ; --- END FUNCTION CALL
2764   1497             ; sp = sp + len; 
2765   1497 FA FB FF      lea d, [bp + -5] ; $sp
2766   149A DA            push d
2767   149B FA FB FF      lea d, [bp + -5] ; $sp
2768   149E 2A            mov b, [d]
2769   149F 38 00 00      mov c, 0
2770   14A2             ; --- START TERMS
2771   14A2 D7            push a
2772   14A3 11            mov a, b
2773   14A4 FA F9 FF      lea d, [bp + -7] ; $len
2774   14A7 2A            mov b, [d]
2775   14A8 38 00 00      mov c, 0
2776   14AB 56            add b, a
2777   14AC E4            pop a
2778   14AD             ; --- END TERMS
2779   14AD E7            pop d
2780   14AE FD 43         mov [d], b
2781   14B0             ; p = p + 2; 
2782   14B0 FA FF FF      lea d, [bp + -1] ; $p
2783   14B3 DA            push d
2784   14B4 FA FF FF      lea d, [bp + -1] ; $p
2785   14B7 2A            mov b, [d]
2786   14B8 38 00 00      mov c, 0
2787   14BB             ; --- START TERMS
2788   14BB D7            push a
2789   14BC 11            mov a, b
2790   14BD 26 02 00      mov b, $2
2791   14C0 38 00 00      mov c, 0
2792   14C3 56            add b, a
2793   14C4 E4            pop a
2794   14C5             ; --- END TERMS
2795   14C5 E7            pop d
2796   14C6 FD 43         mov [d], b
2797   14C8             ; break; 
2798   14C8 0A D7 14      jmp _switch29_exit ; case break
2799   14CB             _switch29_default:
2800   14CB             ; print("Error: Unknown argument type.\n"); 
2801   14CB             ; --- START FUNCTION CALL
2802   14CB 26 72 26      mov b, _s10 ; "Error: Unknown argument type.\n"
2803   14CE FD AB         swp b
2804   14D0 D8            push b
2805   14D1 07 7D 1F      call print
2806   14D4 51 02 00      add sp, 2
2807   14D7             ; --- END FUNCTION CALL
2808   14D7             _switch29_exit:
2809   14D7             ; format_p++; 
2810   14D7 FA FD FF      lea d, [bp + -3] ; $format_p
2811   14DA 2A            mov b, [d]
2812   14DB 38 00 00      mov c, 0
2813   14DE FD 77         inc b
2814   14E0 FA FD FF      lea d, [bp + -3] ; $format_p
2815   14E3 FD 43         mov [d], b
2816   14E5 FD 7D         dec b
2817   14E7 0A 12 15      jmp _if28_exit
2818   14EA             _if28_else:
2819   14EA             ; *sp++ = *format_p++; 
2820   14EA FA FB FF      lea d, [bp + -5] ; $sp
2821   14ED 2A            mov b, [d]
2822   14EE 38 00 00      mov c, 0
2823   14F1 FD 77         inc b
2824   14F3 FA FB FF      lea d, [bp + -5] ; $sp
2825   14F6 FD 43         mov [d], b
2826   14F8 FD 7D         dec b
2827   14FA D8            push b
2828   14FB FA FD FF      lea d, [bp + -3] ; $format_p
2829   14FE 2A            mov b, [d]
2830   14FF 38 00 00      mov c, 0
2831   1502 FD 77         inc b
2832   1504 FA FD FF      lea d, [bp + -3] ; $format_p
2833   1507 FD 43         mov [d], b
2834   1509 FD 7D         dec b
2835   150B 74            mov d, b
2836   150C 32            mov bl, [d]
2837   150D A7 00         mov bh, 0
2838   150F E7            pop d
2839   1510 FD 3E         mov [d], bl
2840   1512             _if28_exit:
2841   1512             _if27_exit:
2842   1512             _for26_update:
2843   1512 0A E1 11      jmp _for26_cond
2844   1515             _for26_exit:
2845   1515             ; *sp = '\0'; 
2846   1515 FA FB FF      lea d, [bp + -5] ; $sp
2847   1518 2A            mov b, [d]
2848   1519 38 00 00      mov c, 0
2849   151C D8            push b
2850   151D 26 00 00      mov b, $0
2851   1520 38 00 00      mov c, 0
2852   1523 E7            pop d
2853   1524 FD 3E         mov [d], bl
2854   1526             ; return sp - dest; // return total number of chars written 
2855   1526 FA FB FF      lea d, [bp + -5] ; $sp
2856   1529 2A            mov b, [d]
2857   152A 38 00 00      mov c, 0
2858   152D             ; --- START TERMS
2859   152D D7            push a
2860   152E 11            mov a, b
2861   152F FA 05 00      lea d, [bp + 5] ; $dest
2862   1532 2A            mov b, [d]
2863   1533 38 00 00      mov c, 0
2864   1536 60            sub a, b
2865   1537 27            mov b, a
2866   1538 E4            pop a
2867   1539             ; --- END TERMS
2868   1539 F9            leave
2869   153A 09            ret
2870   153B             
2871   153B             err:
2872   153B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2873   153E             ; print(e); 
2874   153E             ; --- START FUNCTION CALL
2875   153E FA 05 00      lea d, [bp + 5] ; $e
2876   1541 2A            mov b, [d]
2877   1542 38 00 00      mov c, 0
2878   1545 FD AB         swp b
2879   1547 D8            push b
2880   1548 07 7D 1F      call print
2881   154B 51 02 00      add sp, 2
2882   154E             ; --- END FUNCTION CALL
2883   154E F9            leave
2884   154F 09            ret
2885   1550             
2886   1550             printx32:
2887   1550 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2888   1553             
2889   1553             ; --- BEGIN INLINE ASM SEGMENT
2890   1553 FA 05 00      lea d, [bp + 5] ; $hex
2891   1556 2B 02 00      mov b, [d+2]
2892   1559 07 E0 22      call print_u16x
2893   155C 2A            mov b, [d]
2894   155D 07 E0 22      call print_u16x
2895   1560             ; --- END INLINE ASM SEGMENT
2896   1560             
2897   1560 F9            leave
2898   1561 09            ret
2899   1562             
2900   1562             printx16:
2901   1562 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2902   1565             
2903   1565             ; --- BEGIN INLINE ASM SEGMENT
2904   1565 FA 05 00      lea d, [bp + 5] ; $hex
2905   1568 2A            mov b, [d]
2906   1569 07 E0 22      call print_u16x
2907   156C             ; --- END INLINE ASM SEGMENT
2908   156C             
2909   156C F9            leave
2910   156D 09            ret
2911   156E             
2912   156E             printx8:
2913   156E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2914   1571             
2915   1571             ; --- BEGIN INLINE ASM SEGMENT
2916   1571 FA 05 00      lea d, [bp + 5] ; $hex
2917   1574 32            mov bl, [d]
2918   1575 07 24 23      call print_u8x
2919   1578             ; --- END INLINE ASM SEGMENT
2920   1578             
2921   1578 F9            leave
2922   1579 09            ret
2923   157A             
2924   157A             hex_str_to_int:
2925   157A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2926   157D             ; int value = 0; 
2927   157D 52 02 00      sub sp, 2
2928   1580             ; --- START LOCAL VAR INITIALIZATION
2929   1580 FA FF FF      lea d, [bp + -1] ; $value
2930   1583 DA            push d
2931   1584 26 00 00      mov b, $0
2932   1587 38 00 00      mov c, 0
2933   158A E7            pop d
2934   158B FD 43         mov [d], b
2935   158D             ; --- END LOCAL VAR INITIALIZATION
2936   158D             ; int i; 
2937   158D 52 02 00      sub sp, 2
2938   1590             ; char hex_char; 
2939   1590 52 01 00      sub sp, 1
2940   1593             ; int len; 
2941   1593 52 02 00      sub sp, 2
2942   1596             ; len = strlen(hex_string); 
2943   1596 FA FA FF      lea d, [bp + -6] ; $len
2944   1599 DA            push d
2945   159A             ; --- START FUNCTION CALL
2946   159A FA 05 00      lea d, [bp + 5] ; $hex_string
2947   159D 2A            mov b, [d]
2948   159E 38 00 00      mov c, 0
2949   15A1 FD AB         swp b
2950   15A3 D8            push b
2951   15A4 07 E9 08      call strlen
2952   15A7 51 02 00      add sp, 2
2953   15AA             ; --- END FUNCTION CALL
2954   15AA E7            pop d
2955   15AB FD 43         mov [d], b
2956   15AD             ; for (i = 0; i < len; i++) { 
2957   15AD             _for33_init:
2958   15AD FA FD FF      lea d, [bp + -3] ; $i
2959   15B0 DA            push d
2960   15B1 26 00 00      mov b, $0
2961   15B4 38 00 00      mov c, 0
2962   15B7 E7            pop d
2963   15B8 FD 43         mov [d], b
2964   15BA             _for33_cond:
2965   15BA FA FD FF      lea d, [bp + -3] ; $i
2966   15BD 2A            mov b, [d]
2967   15BE 38 00 00      mov c, 0
2968   15C1             ; --- START RELATIONAL
2969   15C1 D7            push a
2970   15C2 11            mov a, b
2971   15C3 FA FA FF      lea d, [bp + -6] ; $len
2972   15C6 2A            mov b, [d]
2973   15C7 38 00 00      mov c, 0
2974   15CA B0            cmp a, b
2975   15CB FD 73         slt ; < (signed)
2976   15CD E4            pop a
2977   15CE             ; --- END RELATIONAL
2978   15CE C0 00 00      cmp b, 0
2979   15D1 C6 1E 17      je _for33_exit
2980   15D4             _for33_block:
2981   15D4             ; hex_char = hex_string[i]; 
2982   15D4 FA FC FF      lea d, [bp + -4] ; $hex_char
2983   15D7 DA            push d
2984   15D8 FA 05 00      lea d, [bp + 5] ; $hex_string
2985   15DB FD 2A         mov d, [d]
2986   15DD D7            push a
2987   15DE DA            push d
2988   15DF FA FD FF      lea d, [bp + -3] ; $i
2989   15E2 2A            mov b, [d]
2990   15E3 38 00 00      mov c, 0
2991   15E6 E7            pop d
2992   15E7 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2993   15EB E4            pop a
2994   15EC 32            mov bl, [d]
2995   15ED A7 00         mov bh, 0
2996   15EF 38 00 00      mov c, 0
2997   15F2 E7            pop d
2998   15F3 FD 3E         mov [d], bl
2999   15F5             ; if (hex_char >= 'a' && hex_char <= 'f')  
3000   15F5             _if34_cond:
3001   15F5 FA FC FF      lea d, [bp + -4] ; $hex_char
3002   15F8 32            mov bl, [d]
3003   15F9 A7 00         mov bh, 0
3004   15FB 38 00 00      mov c, 0
3005   15FE             ; --- START RELATIONAL
3006   15FE D7            push a
3007   15FF 11            mov a, b
3008   1600 26 61 00      mov b, $61
3009   1603 38 00 00      mov c, 0
3010   1606 B0            cmp a, b
3011   1607 FD 80         sge ; >=
3012   1609 E4            pop a
3013   160A             ; --- END RELATIONAL
3014   160A             ; --- START LOGICAL AND
3015   160A D7            push a
3016   160B 11            mov a, b
3017   160C FA FC FF      lea d, [bp + -4] ; $hex_char
3018   160F 32            mov bl, [d]
3019   1610 A7 00         mov bh, 0
3020   1612 38 00 00      mov c, 0
3021   1615             ; --- START RELATIONAL
3022   1615 D7            push a
3023   1616 11            mov a, b
3024   1617 26 66 00      mov b, $66
3025   161A 38 00 00      mov c, 0
3026   161D B0            cmp a, b
3027   161E FD 74         sle ; <= (signed)
3028   1620 E4            pop a
3029   1621             ; --- END RELATIONAL
3030   1621 FD A7         sand a, b
3031   1623 E4            pop a
3032   1624             ; --- END LOGICAL AND
3033   1624 C0 00 00      cmp b, 0
3034   1627 C6 67 16      je _if34_else
3035   162A             _if34_true:
3036   162A             ; value = (value * 16) + (hex_char - 'a' + 10); 
3037   162A FA FF FF      lea d, [bp + -1] ; $value
3038   162D DA            push d
3039   162E FA FF FF      lea d, [bp + -1] ; $value
3040   1631 2A            mov b, [d]
3041   1632 38 00 00      mov c, 0
3042   1635             ; --- START FACTORS
3043   1635 D7            push a
3044   1636 11            mov a, b
3045   1637 26 10 00      mov b, $10
3046   163A 38 00 00      mov c, 0
3047   163D AC            mul a, b ; *
3048   163E 11            mov a, b
3049   163F 27            mov b, a
3050   1640 E4            pop a
3051   1641             ; --- END FACTORS
3052   1641             ; --- START TERMS
3053   1641 D7            push a
3054   1642 11            mov a, b
3055   1643 FA FC FF      lea d, [bp + -4] ; $hex_char
3056   1646 32            mov bl, [d]
3057   1647 A7 00         mov bh, 0
3058   1649 38 00 00      mov c, 0
3059   164C             ; --- START TERMS
3060   164C D7            push a
3061   164D 11            mov a, b
3062   164E 26 61 00      mov b, $61
3063   1651 38 00 00      mov c, 0
3064   1654 60            sub a, b
3065   1655 27            mov b, a
3066   1656 11            mov a, b
3067   1657 26 0A 00      mov b, $a
3068   165A 38 00 00      mov c, 0
3069   165D 56            add b, a
3070   165E E4            pop a
3071   165F             ; --- END TERMS
3072   165F 56            add b, a
3073   1660 E4            pop a
3074   1661             ; --- END TERMS
3075   1661 E7            pop d
3076   1662 FD 43         mov [d], b
3077   1664 0A 0B 17      jmp _if34_exit
3078   1667             _if34_else:
3079   1667             ; if (hex_char >= 'A' && hex_char <= 'F')  
3080   1667             _if35_cond:
3081   1667 FA FC FF      lea d, [bp + -4] ; $hex_char
3082   166A 32            mov bl, [d]
3083   166B A7 00         mov bh, 0
3084   166D 38 00 00      mov c, 0
3085   1670             ; --- START RELATIONAL
3086   1670 D7            push a
3087   1671 11            mov a, b
3088   1672 26 41 00      mov b, $41
3089   1675 38 00 00      mov c, 0
3090   1678 B0            cmp a, b
3091   1679 FD 80         sge ; >=
3092   167B E4            pop a
3093   167C             ; --- END RELATIONAL
3094   167C             ; --- START LOGICAL AND
3095   167C D7            push a
3096   167D 11            mov a, b
3097   167E FA FC FF      lea d, [bp + -4] ; $hex_char
3098   1681 32            mov bl, [d]
3099   1682 A7 00         mov bh, 0
3100   1684 38 00 00      mov c, 0
3101   1687             ; --- START RELATIONAL
3102   1687 D7            push a
3103   1688 11            mov a, b
3104   1689 26 46 00      mov b, $46
3105   168C 38 00 00      mov c, 0
3106   168F B0            cmp a, b
3107   1690 FD 74         sle ; <= (signed)
3108   1692 E4            pop a
3109   1693             ; --- END RELATIONAL
3110   1693 FD A7         sand a, b
3111   1695 E4            pop a
3112   1696             ; --- END LOGICAL AND
3113   1696 C0 00 00      cmp b, 0
3114   1699 C6 D9 16      je _if35_else
3115   169C             _if35_true:
3116   169C             ; value = (value * 16) + (hex_char - 'A' + 10); 
3117   169C FA FF FF      lea d, [bp + -1] ; $value
3118   169F DA            push d
3119   16A0 FA FF FF      lea d, [bp + -1] ; $value
3120   16A3 2A            mov b, [d]
3121   16A4 38 00 00      mov c, 0
3122   16A7             ; --- START FACTORS
3123   16A7 D7            push a
3124   16A8 11            mov a, b
3125   16A9 26 10 00      mov b, $10
3126   16AC 38 00 00      mov c, 0
3127   16AF AC            mul a, b ; *
3128   16B0 11            mov a, b
3129   16B1 27            mov b, a
3130   16B2 E4            pop a
3131   16B3             ; --- END FACTORS
3132   16B3             ; --- START TERMS
3133   16B3 D7            push a
3134   16B4 11            mov a, b
3135   16B5 FA FC FF      lea d, [bp + -4] ; $hex_char
3136   16B8 32            mov bl, [d]
3137   16B9 A7 00         mov bh, 0
3138   16BB 38 00 00      mov c, 0
3139   16BE             ; --- START TERMS
3140   16BE D7            push a
3141   16BF 11            mov a, b
3142   16C0 26 41 00      mov b, $41
3143   16C3 38 00 00      mov c, 0
3144   16C6 60            sub a, b
3145   16C7 27            mov b, a
3146   16C8 11            mov a, b
3147   16C9 26 0A 00      mov b, $a
3148   16CC 38 00 00      mov c, 0
3149   16CF 56            add b, a
3150   16D0 E4            pop a
3151   16D1             ; --- END TERMS
3152   16D1 56            add b, a
3153   16D2 E4            pop a
3154   16D3             ; --- END TERMS
3155   16D3 E7            pop d
3156   16D4 FD 43         mov [d], b
3157   16D6 0A 0B 17      jmp _if35_exit
3158   16D9             _if35_else:
3159   16D9             ; value = (value * 16) + (hex_char - '0'); 
3160   16D9 FA FF FF      lea d, [bp + -1] ; $value
3161   16DC DA            push d
3162   16DD FA FF FF      lea d, [bp + -1] ; $value
3163   16E0 2A            mov b, [d]
3164   16E1 38 00 00      mov c, 0
3165   16E4             ; --- START FACTORS
3166   16E4 D7            push a
3167   16E5 11            mov a, b
3168   16E6 26 10 00      mov b, $10
3169   16E9 38 00 00      mov c, 0
3170   16EC AC            mul a, b ; *
3171   16ED 11            mov a, b
3172   16EE 27            mov b, a
3173   16EF E4            pop a
3174   16F0             ; --- END FACTORS
3175   16F0             ; --- START TERMS
3176   16F0 D7            push a
3177   16F1 11            mov a, b
3178   16F2 FA FC FF      lea d, [bp + -4] ; $hex_char
3179   16F5 32            mov bl, [d]
3180   16F6 A7 00         mov bh, 0
3181   16F8 38 00 00      mov c, 0
3182   16FB             ; --- START TERMS
3183   16FB D7            push a
3184   16FC 11            mov a, b
3185   16FD 26 30 00      mov b, $30
3186   1700 38 00 00      mov c, 0
3187   1703 60            sub a, b
3188   1704 27            mov b, a
3189   1705 E4            pop a
3190   1706             ; --- END TERMS
3191   1706 56            add b, a
3192   1707 E4            pop a
3193   1708             ; --- END TERMS
3194   1708 E7            pop d
3195   1709 FD 43         mov [d], b
3196   170B             _if35_exit:
3197   170B             _if34_exit:
3198   170B             _for33_update:
3199   170B FA FD FF      lea d, [bp + -3] ; $i
3200   170E 2A            mov b, [d]
3201   170F 38 00 00      mov c, 0
3202   1712 FD 77         inc b
3203   1714 FA FD FF      lea d, [bp + -3] ; $i
3204   1717 FD 43         mov [d], b
3205   1719 FD 7D         dec b
3206   171B 0A BA 15      jmp _for33_cond
3207   171E             _for33_exit:
3208   171E             ; return value; 
3209   171E FA FF FF      lea d, [bp + -1] ; $value
3210   1721 2A            mov b, [d]
3211   1722 38 00 00      mov c, 0
3212   1725 F9            leave
3213   1726 09            ret
3214   1727             
3215   1727             gets:
3216   1727 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3217   172A             
3218   172A             ; --- BEGIN INLINE ASM SEGMENT
3219   172A FA 05 00      lea d, [bp + 5] ; $s
3220   172D 15            mov a, [d]
3221   172E 3C            mov d, a
3222   172F 07 45 21      call _gets
3223   1732             ; --- END INLINE ASM SEGMENT
3224   1732             
3225   1732             ; return strlen(s); 
3226   1732             ; --- START FUNCTION CALL
3227   1732 FA 05 00      lea d, [bp + 5] ; $s
3228   1735 2A            mov b, [d]
3229   1736 38 00 00      mov c, 0
3230   1739 FD AB         swp b
3231   173B D8            push b
3232   173C 07 E9 08      call strlen
3233   173F 51 02 00      add sp, 2
3234   1742             ; --- END FUNCTION CALL
3235   1742 F9            leave
3236   1743 09            ret
3237   1744             
3238   1744             print_signed:
3239   1744 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3240   1747             ; char digits[5]; 
3241   1747 52 05 00      sub sp, 5
3242   174A             ; int i = 0; 
3243   174A 52 02 00      sub sp, 2
3244   174D             ; --- START LOCAL VAR INITIALIZATION
3245   174D FA FA FF      lea d, [bp + -6] ; $i
3246   1750 DA            push d
3247   1751 26 00 00      mov b, $0
3248   1754 38 00 00      mov c, 0
3249   1757 E7            pop d
3250   1758 FD 43         mov [d], b
3251   175A             ; --- END LOCAL VAR INITIALIZATION
3252   175A             ; if (num < 0) { 
3253   175A             _if36_cond:
3254   175A FA 05 00      lea d, [bp + 5] ; $num
3255   175D 2A            mov b, [d]
3256   175E 38 00 00      mov c, 0
3257   1761             ; --- START RELATIONAL
3258   1761 D7            push a
3259   1762 11            mov a, b
3260   1763 26 00 00      mov b, $0
3261   1766 38 00 00      mov c, 0
3262   1769 B0            cmp a, b
3263   176A FD 73         slt ; < (signed)
3264   176C E4            pop a
3265   176D             ; --- END RELATIONAL
3266   176D C0 00 00      cmp b, 0
3267   1770 C6 93 17      je _if36_else
3268   1773             _if36_true:
3269   1773             ; putchar('-'); 
3270   1773             ; --- START FUNCTION CALL
3271   1773 26 2D 00      mov b, $2d
3272   1776 38 00 00      mov c, 0
3273   1779 DD            push bl
3274   177A 07 2F 1F      call putchar
3275   177D 51 01 00      add sp, 1
3276   1780             ; --- END FUNCTION CALL
3277   1780             ; num = -num; 
3278   1780 FA 05 00      lea d, [bp + 5] ; $num
3279   1783 DA            push d
3280   1784 FA 05 00      lea d, [bp + 5] ; $num
3281   1787 2A            mov b, [d]
3282   1788 38 00 00      mov c, 0
3283   178B FD 97         neg b
3284   178D E7            pop d
3285   178E FD 43         mov [d], b
3286   1790 0A BE 17      jmp _if36_exit
3287   1793             _if36_else:
3288   1793             ; if (num == 0) { 
3289   1793             _if37_cond:
3290   1793 FA 05 00      lea d, [bp + 5] ; $num
3291   1796 2A            mov b, [d]
3292   1797 38 00 00      mov c, 0
3293   179A             ; --- START RELATIONAL
3294   179A D7            push a
3295   179B 11            mov a, b
3296   179C 26 00 00      mov b, $0
3297   179F 38 00 00      mov c, 0
3298   17A2 B0            cmp a, b
3299   17A3 FD 71         seq ; ==
3300   17A5 E4            pop a
3301   17A6             ; --- END RELATIONAL
3302   17A6 C0 00 00      cmp b, 0
3303   17A9 C6 BE 17      je _if37_exit
3304   17AC             _if37_true:
3305   17AC             ; putchar('0'); 
3306   17AC             ; --- START FUNCTION CALL
3307   17AC 26 30 00      mov b, $30
3308   17AF 38 00 00      mov c, 0
3309   17B2 DD            push bl
3310   17B3 07 2F 1F      call putchar
3311   17B6 51 01 00      add sp, 1
3312   17B9             ; --- END FUNCTION CALL
3313   17B9             ; return; 
3314   17B9 F9            leave
3315   17BA 09            ret
3316   17BB 0A BE 17      jmp _if37_exit
3317   17BE             _if37_exit:
3318   17BE             _if36_exit:
3319   17BE             ; while (num > 0) { 
3320   17BE             _while38_cond:
3321   17BE FA 05 00      lea d, [bp + 5] ; $num
3322   17C1 2A            mov b, [d]
3323   17C2 38 00 00      mov c, 0
3324   17C5             ; --- START RELATIONAL
3325   17C5 D7            push a
3326   17C6 11            mov a, b
3327   17C7 26 00 00      mov b, $0
3328   17CA 38 00 00      mov c, 0
3329   17CD B0            cmp a, b
3330   17CE FD 7F         sgt ; >
3331   17D0 E4            pop a
3332   17D1             ; --- END RELATIONAL
3333   17D1 C0 00 00      cmp b, 0
3334   17D4 C6 33 18      je _while38_exit
3335   17D7             _while38_block:
3336   17D7             ; digits[i] = '0' + (num % 10); 
3337   17D7 FA FC FF      lea d, [bp + -4] ; $digits
3338   17DA D7            push a
3339   17DB DA            push d
3340   17DC FA FA FF      lea d, [bp + -6] ; $i
3341   17DF 2A            mov b, [d]
3342   17E0 38 00 00      mov c, 0
3343   17E3 E7            pop d
3344   17E4 5A            add d, b
3345   17E5 E4            pop a
3346   17E6 DA            push d
3347   17E7 26 30 00      mov b, $30
3348   17EA 38 00 00      mov c, 0
3349   17ED             ; --- START TERMS
3350   17ED D7            push a
3351   17EE 11            mov a, b
3352   17EF FA 05 00      lea d, [bp + 5] ; $num
3353   17F2 2A            mov b, [d]
3354   17F3 38 00 00      mov c, 0
3355   17F6             ; --- START FACTORS
3356   17F6 D7            push a
3357   17F7 11            mov a, b
3358   17F8 26 0A 00      mov b, $a
3359   17FB 38 00 00      mov c, 0
3360   17FE AE            div a, b ; 
3361   17FF 11            mov a, b
3362   1800 27            mov b, a
3363   1801 E4            pop a
3364   1802             ; --- END FACTORS
3365   1802 56            add b, a
3366   1803 E4            pop a
3367   1804             ; --- END TERMS
3368   1804 E7            pop d
3369   1805 FD 3E         mov [d], bl
3370   1807             ; num = num / 10; 
3371   1807 FA 05 00      lea d, [bp + 5] ; $num
3372   180A DA            push d
3373   180B FA 05 00      lea d, [bp + 5] ; $num
3374   180E 2A            mov b, [d]
3375   180F 38 00 00      mov c, 0
3376   1812             ; --- START FACTORS
3377   1812 D7            push a
3378   1813 11            mov a, b
3379   1814 26 0A 00      mov b, $a
3380   1817 38 00 00      mov c, 0
3381   181A AE            div a, b
3382   181B 27            mov b, a
3383   181C E4            pop a
3384   181D             ; --- END FACTORS
3385   181D E7            pop d
3386   181E FD 43         mov [d], b
3387   1820             ; i++; 
3388   1820 FA FA FF      lea d, [bp + -6] ; $i
3389   1823 2A            mov b, [d]
3390   1824 38 00 00      mov c, 0
3391   1827 FD 77         inc b
3392   1829 FA FA FF      lea d, [bp + -6] ; $i
3393   182C FD 43         mov [d], b
3394   182E FD 7D         dec b
3395   1830 0A BE 17      jmp _while38_cond
3396   1833             _while38_exit:
3397   1833             ; while (i > 0) { 
3398   1833             _while39_cond:
3399   1833 FA FA FF      lea d, [bp + -6] ; $i
3400   1836 2A            mov b, [d]
3401   1837 38 00 00      mov c, 0
3402   183A             ; --- START RELATIONAL
3403   183A D7            push a
3404   183B 11            mov a, b
3405   183C 26 00 00      mov b, $0
3406   183F 38 00 00      mov c, 0
3407   1842 B0            cmp a, b
3408   1843 FD 7F         sgt ; >
3409   1845 E4            pop a
3410   1846             ; --- END RELATIONAL
3411   1846 C0 00 00      cmp b, 0
3412   1849 C6 7B 18      je _while39_exit
3413   184C             _while39_block:
3414   184C             ; i--; 
3415   184C FA FA FF      lea d, [bp + -6] ; $i
3416   184F 2A            mov b, [d]
3417   1850 38 00 00      mov c, 0
3418   1853 FD 7D         dec b
3419   1855 FA FA FF      lea d, [bp + -6] ; $i
3420   1858 FD 43         mov [d], b
3421   185A FD 77         inc b
3422   185C             ; putchar(digits[i]); 
3423   185C             ; --- START FUNCTION CALL
3424   185C FA FC FF      lea d, [bp + -4] ; $digits
3425   185F D7            push a
3426   1860 DA            push d
3427   1861 FA FA FF      lea d, [bp + -6] ; $i
3428   1864 2A            mov b, [d]
3429   1865 38 00 00      mov c, 0
3430   1868 E7            pop d
3431   1869 5A            add d, b
3432   186A E4            pop a
3433   186B 32            mov bl, [d]
3434   186C A7 00         mov bh, 0
3435   186E 38 00 00      mov c, 0
3436   1871 DD            push bl
3437   1872 07 2F 1F      call putchar
3438   1875 51 01 00      add sp, 1
3439   1878             ; --- END FUNCTION CALL
3440   1878 0A 33 18      jmp _while39_cond
3441   187B             _while39_exit:
3442   187B F9            leave
3443   187C 09            ret
3444   187D             
3445   187D             print_signed_long:
3446   187D F8 00 00      enter 0 ; (push bp; mov bp, sp)
3447   1880             ; char digits[10]; 
3448   1880 52 0A 00      sub sp, 10
3449   1883             ; int i = 0; 
3450   1883 52 02 00      sub sp, 2
3451   1886             ; --- START LOCAL VAR INITIALIZATION
3452   1886 FA F5 FF      lea d, [bp + -11] ; $i
3453   1889 DA            push d
3454   188A 26 00 00      mov b, $0
3455   188D 38 00 00      mov c, 0
3456   1890 E7            pop d
3457   1891 FD 43         mov [d], b
3458   1893             ; --- END LOCAL VAR INITIALIZATION
3459   1893             ; if (num < 0) { 
3460   1893             _if40_cond:
3461   1893 FA 05 00      lea d, [bp + 5] ; $num
3462   1896 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3463   1899 FD 39         mov c, b ; And place it into C
3464   189B 2A            mov b, [d] ; Lower Word in B
3465   189C             ; --- START RELATIONAL
3466   189C D7            push a
3467   189D FD D8         push g
3468   189F 11            mov a, b
3469   18A0 FD 7A         mov g, c
3470   18A2 26 00 00      mov b, $0
3471   18A5 38 00 00      mov c, 0
3472   18A8 38 00 00      mov c, 0
3473   18AB FD AF         cmp32 ga, cb
3474   18AD FD 73         slt ; <
3475   18AF FD F1         pop g
3476   18B1 E4            pop a
3477   18B2             ; --- END RELATIONAL
3478   18B2 C0 00 00      cmp b, 0
3479   18B5 C6 E1 18      je _if40_else
3480   18B8             _if40_true:
3481   18B8             ; putchar('-'); 
3482   18B8             ; --- START FUNCTION CALL
3483   18B8 26 2D 00      mov b, $2d
3484   18BB 38 00 00      mov c, 0
3485   18BE DD            push bl
3486   18BF 07 2F 1F      call putchar
3487   18C2 51 01 00      add sp, 1
3488   18C5             ; --- END FUNCTION CALL
3489   18C5             ; num = -num; 
3490   18C5 FA 05 00      lea d, [bp + 5] ; $num
3491   18C8 DA            push d
3492   18C9 FA 05 00      lea d, [bp + 5] ; $num
3493   18CC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3494   18CF FD 39         mov c, b ; And place it into C
3495   18D1 2A            mov b, [d] ; Lower Word in B
3496   18D2 FD 97         neg b
3497   18D4 E7            pop d
3498   18D5 FD 43         mov [d], b
3499   18D7 26 00 00      mov b, 0
3500   18DA FD 44 02 00   mov [d + 2], b
3501   18DE 0A 18 19      jmp _if40_exit
3502   18E1             _if40_else:
3503   18E1             ; if (num == 0) { 
3504   18E1             _if41_cond:
3505   18E1 FA 05 00      lea d, [bp + 5] ; $num
3506   18E4 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3507   18E7 FD 39         mov c, b ; And place it into C
3508   18E9 2A            mov b, [d] ; Lower Word in B
3509   18EA             ; --- START RELATIONAL
3510   18EA D7            push a
3511   18EB FD D8         push g
3512   18ED 11            mov a, b
3513   18EE FD 7A         mov g, c
3514   18F0 26 00 00      mov b, $0
3515   18F3 38 00 00      mov c, 0
3516   18F6 38 00 00      mov c, 0
3517   18F9 FD AF         cmp32 ga, cb
3518   18FB FD 71         seq ; ==
3519   18FD FD F1         pop g
3520   18FF E4            pop a
3521   1900             ; --- END RELATIONAL
3522   1900 C0 00 00      cmp b, 0
3523   1903 C6 18 19      je _if41_exit
3524   1906             _if41_true:
3525   1906             ; putchar('0'); 
3526   1906             ; --- START FUNCTION CALL
3527   1906 26 30 00      mov b, $30
3528   1909 38 00 00      mov c, 0
3529   190C DD            push bl
3530   190D 07 2F 1F      call putchar
3531   1910 51 01 00      add sp, 1
3532   1913             ; --- END FUNCTION CALL
3533   1913             ; return; 
3534   1913 F9            leave
3535   1914 09            ret
3536   1915 0A 18 19      jmp _if41_exit
3537   1918             _if41_exit:
3538   1918             _if40_exit:
3539   1918             ; while (num > 0) { 
3540   1918             _while42_cond:
3541   1918 FA 05 00      lea d, [bp + 5] ; $num
3542   191B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3543   191E FD 39         mov c, b ; And place it into C
3544   1920 2A            mov b, [d] ; Lower Word in B
3545   1921             ; --- START RELATIONAL
3546   1921 D7            push a
3547   1922 FD D8         push g
3548   1924 11            mov a, b
3549   1925 FD 7A         mov g, c
3550   1927 26 00 00      mov b, $0
3551   192A 38 00 00      mov c, 0
3552   192D 38 00 00      mov c, 0
3553   1930 FD AF         cmp32 ga, cb
3554   1932 FD 7F         sgt
3555   1934 FD F1         pop g
3556   1936 E4            pop a
3557   1937             ; --- END RELATIONAL
3558   1937 C0 00 00      cmp b, 0
3559   193A C6 A3 19      je _while42_exit
3560   193D             _while42_block:
3561   193D             ; digits[i] = '0' + (num % 10); 
3562   193D FA F7 FF      lea d, [bp + -9] ; $digits
3563   1940 D7            push a
3564   1941 DA            push d
3565   1942 FA F5 FF      lea d, [bp + -11] ; $i
3566   1945 2A            mov b, [d]
3567   1946 38 00 00      mov c, 0
3568   1949 E7            pop d
3569   194A 5A            add d, b
3570   194B E4            pop a
3571   194C DA            push d
3572   194D 26 30 00      mov b, $30
3573   1950 38 00 00      mov c, 0
3574   1953             ; --- START TERMS
3575   1953 D7            push a
3576   1954 11            mov a, b
3577   1955 FA 05 00      lea d, [bp + 5] ; $num
3578   1958 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3579   195B FD 39         mov c, b ; And place it into C
3580   195D 2A            mov b, [d] ; Lower Word in B
3581   195E             ; --- START FACTORS
3582   195E D7            push a
3583   195F 11            mov a, b
3584   1960 26 0A 00      mov b, $a
3585   1963 38 00 00      mov c, 0
3586   1966 AE            div a, b ; 
3587   1967 11            mov a, b
3588   1968 27            mov b, a
3589   1969 E4            pop a
3590   196A             ; --- END FACTORS
3591   196A FD 15         add32 cb, ga
3592   196C E4            pop a
3593   196D             ; --- END TERMS
3594   196D E7            pop d
3595   196E FD 3E         mov [d], bl
3596   1970             ; num = num / 10; 
3597   1970 FA 05 00      lea d, [bp + 5] ; $num
3598   1973 DA            push d
3599   1974 FA 05 00      lea d, [bp + 5] ; $num
3600   1977 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3601   197A FD 39         mov c, b ; And place it into C
3602   197C 2A            mov b, [d] ; Lower Word in B
3603   197D             ; --- START FACTORS
3604   197D D7            push a
3605   197E 11            mov a, b
3606   197F 26 0A 00      mov b, $a
3607   1982 38 00 00      mov c, 0
3608   1985 AE            div a, b
3609   1986 27            mov b, a
3610   1987 E4            pop a
3611   1988             ; --- END FACTORS
3612   1988 E7            pop d
3613   1989 FD 43         mov [d], b
3614   198B 28            mov b, c
3615   198C FD 44 02 00   mov [d + 2], b
3616   1990             ; i++; 
3617   1990 FA F5 FF      lea d, [bp + -11] ; $i
3618   1993 2A            mov b, [d]
3619   1994 38 00 00      mov c, 0
3620   1997 FD 77         inc b
3621   1999 FA F5 FF      lea d, [bp + -11] ; $i
3622   199C FD 43         mov [d], b
3623   199E FD 7D         dec b
3624   19A0 0A 18 19      jmp _while42_cond
3625   19A3             _while42_exit:
3626   19A3             ; while (i > 0) { 
3627   19A3             _while43_cond:
3628   19A3 FA F5 FF      lea d, [bp + -11] ; $i
3629   19A6 2A            mov b, [d]
3630   19A7 38 00 00      mov c, 0
3631   19AA             ; --- START RELATIONAL
3632   19AA D7            push a
3633   19AB 11            mov a, b
3634   19AC 26 00 00      mov b, $0
3635   19AF 38 00 00      mov c, 0
3636   19B2 B0            cmp a, b
3637   19B3 FD 7F         sgt ; >
3638   19B5 E4            pop a
3639   19B6             ; --- END RELATIONAL
3640   19B6 C0 00 00      cmp b, 0
3641   19B9 C6 EB 19      je _while43_exit
3642   19BC             _while43_block:
3643   19BC             ; i--; 
3644   19BC FA F5 FF      lea d, [bp + -11] ; $i
3645   19BF 2A            mov b, [d]
3646   19C0 38 00 00      mov c, 0
3647   19C3 FD 7D         dec b
3648   19C5 FA F5 FF      lea d, [bp + -11] ; $i
3649   19C8 FD 43         mov [d], b
3650   19CA FD 77         inc b
3651   19CC             ; putchar(digits[i]); 
3652   19CC             ; --- START FUNCTION CALL
3653   19CC FA F7 FF      lea d, [bp + -9] ; $digits
3654   19CF D7            push a
3655   19D0 DA            push d
3656   19D1 FA F5 FF      lea d, [bp + -11] ; $i
3657   19D4 2A            mov b, [d]
3658   19D5 38 00 00      mov c, 0
3659   19D8 E7            pop d
3660   19D9 5A            add d, b
3661   19DA E4            pop a
3662   19DB 32            mov bl, [d]
3663   19DC A7 00         mov bh, 0
3664   19DE 38 00 00      mov c, 0
3665   19E1 DD            push bl
3666   19E2 07 2F 1F      call putchar
3667   19E5 51 01 00      add sp, 1
3668   19E8             ; --- END FUNCTION CALL
3669   19E8 0A A3 19      jmp _while43_cond
3670   19EB             _while43_exit:
3671   19EB F9            leave
3672   19EC 09            ret
3673   19ED             
3674   19ED             print_unsigned_long:
3675   19ED F8 00 00      enter 0 ; (push bp; mov bp, sp)
3676   19F0             ; char digits[10]; 
3677   19F0 52 0A 00      sub sp, 10
3678   19F3             ; int i; 
3679   19F3 52 02 00      sub sp, 2
3680   19F6             ; i = 0; 
3681   19F6 FA F5 FF      lea d, [bp + -11] ; $i
3682   19F9 DA            push d
3683   19FA 26 00 00      mov b, $0
3684   19FD 38 00 00      mov c, 0
3685   1A00 E7            pop d
3686   1A01 FD 43         mov [d], b
3687   1A03             ; if(num == 0){ 
3688   1A03             _if44_cond:
3689   1A03 FA 05 00      lea d, [bp + 5] ; $num
3690   1A06 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3691   1A09 FD 39         mov c, b ; And place it into C
3692   1A0B 2A            mov b, [d] ; Lower Word in B
3693   1A0C             ; --- START RELATIONAL
3694   1A0C D7            push a
3695   1A0D FD D8         push g
3696   1A0F 11            mov a, b
3697   1A10 FD 7A         mov g, c
3698   1A12 26 00 00      mov b, $0
3699   1A15 38 00 00      mov c, 0
3700   1A18 38 00 00      mov c, 0
3701   1A1B FD AF         cmp32 ga, cb
3702   1A1D FD 71         seq ; ==
3703   1A1F FD F1         pop g
3704   1A21 E4            pop a
3705   1A22             ; --- END RELATIONAL
3706   1A22 C0 00 00      cmp b, 0
3707   1A25 C6 3A 1A      je _if44_exit
3708   1A28             _if44_true:
3709   1A28             ; putchar('0'); 
3710   1A28             ; --- START FUNCTION CALL
3711   1A28 26 30 00      mov b, $30
3712   1A2B 38 00 00      mov c, 0
3713   1A2E DD            push bl
3714   1A2F 07 2F 1F      call putchar
3715   1A32 51 01 00      add sp, 1
3716   1A35             ; --- END FUNCTION CALL
3717   1A35             ; return; 
3718   1A35 F9            leave
3719   1A36 09            ret
3720   1A37 0A 3A 1A      jmp _if44_exit
3721   1A3A             _if44_exit:
3722   1A3A             ; while (num > 0) { 
3723   1A3A             _while45_cond:
3724   1A3A FA 05 00      lea d, [bp + 5] ; $num
3725   1A3D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3726   1A40 FD 39         mov c, b ; And place it into C
3727   1A42 2A            mov b, [d] ; Lower Word in B
3728   1A43             ; --- START RELATIONAL
3729   1A43 D7            push a
3730   1A44 FD D8         push g
3731   1A46 11            mov a, b
3732   1A47 FD 7A         mov g, c
3733   1A49 26 00 00      mov b, $0
3734   1A4C 38 00 00      mov c, 0
3735   1A4F 38 00 00      mov c, 0
3736   1A52 FD AF         cmp32 ga, cb
3737   1A54 FD 81         sgu
3738   1A56 FD F1         pop g
3739   1A58 E4            pop a
3740   1A59             ; --- END RELATIONAL
3741   1A59 C0 00 00      cmp b, 0
3742   1A5C C6 C5 1A      je _while45_exit
3743   1A5F             _while45_block:
3744   1A5F             ; digits[i] = '0' + (num % 10); 
3745   1A5F FA F7 FF      lea d, [bp + -9] ; $digits
3746   1A62 D7            push a
3747   1A63 DA            push d
3748   1A64 FA F5 FF      lea d, [bp + -11] ; $i
3749   1A67 2A            mov b, [d]
3750   1A68 38 00 00      mov c, 0
3751   1A6B E7            pop d
3752   1A6C 5A            add d, b
3753   1A6D E4            pop a
3754   1A6E DA            push d
3755   1A6F 26 30 00      mov b, $30
3756   1A72 38 00 00      mov c, 0
3757   1A75             ; --- START TERMS
3758   1A75 D7            push a
3759   1A76 11            mov a, b
3760   1A77 FA 05 00      lea d, [bp + 5] ; $num
3761   1A7A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3762   1A7D FD 39         mov c, b ; And place it into C
3763   1A7F 2A            mov b, [d] ; Lower Word in B
3764   1A80             ; --- START FACTORS
3765   1A80 D7            push a
3766   1A81 11            mov a, b
3767   1A82 26 0A 00      mov b, $a
3768   1A85 38 00 00      mov c, 0
3769   1A88 AE            div a, b ; 
3770   1A89 11            mov a, b
3771   1A8A 27            mov b, a
3772   1A8B E4            pop a
3773   1A8C             ; --- END FACTORS
3774   1A8C FD 15         add32 cb, ga
3775   1A8E E4            pop a
3776   1A8F             ; --- END TERMS
3777   1A8F E7            pop d
3778   1A90 FD 3E         mov [d], bl
3779   1A92             ; num = num / 10; 
3780   1A92 FA 05 00      lea d, [bp + 5] ; $num
3781   1A95 DA            push d
3782   1A96 FA 05 00      lea d, [bp + 5] ; $num
3783   1A99 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3784   1A9C FD 39         mov c, b ; And place it into C
3785   1A9E 2A            mov b, [d] ; Lower Word in B
3786   1A9F             ; --- START FACTORS
3787   1A9F D7            push a
3788   1AA0 11            mov a, b
3789   1AA1 26 0A 00      mov b, $a
3790   1AA4 38 00 00      mov c, 0
3791   1AA7 AE            div a, b
3792   1AA8 27            mov b, a
3793   1AA9 E4            pop a
3794   1AAA             ; --- END FACTORS
3795   1AAA E7            pop d
3796   1AAB FD 43         mov [d], b
3797   1AAD 28            mov b, c
3798   1AAE FD 44 02 00   mov [d + 2], b
3799   1AB2             ; i++; 
3800   1AB2 FA F5 FF      lea d, [bp + -11] ; $i
3801   1AB5 2A            mov b, [d]
3802   1AB6 38 00 00      mov c, 0
3803   1AB9 FD 77         inc b
3804   1ABB FA F5 FF      lea d, [bp + -11] ; $i
3805   1ABE FD 43         mov [d], b
3806   1AC0 FD 7D         dec b
3807   1AC2 0A 3A 1A      jmp _while45_cond
3808   1AC5             _while45_exit:
3809   1AC5             ; while (i > 0) { 
3810   1AC5             _while46_cond:
3811   1AC5 FA F5 FF      lea d, [bp + -11] ; $i
3812   1AC8 2A            mov b, [d]
3813   1AC9 38 00 00      mov c, 0
3814   1ACC             ; --- START RELATIONAL
3815   1ACC D7            push a
3816   1ACD 11            mov a, b
3817   1ACE 26 00 00      mov b, $0
3818   1AD1 38 00 00      mov c, 0
3819   1AD4 B0            cmp a, b
3820   1AD5 FD 7F         sgt ; >
3821   1AD7 E4            pop a
3822   1AD8             ; --- END RELATIONAL
3823   1AD8 C0 00 00      cmp b, 0
3824   1ADB C6 0D 1B      je _while46_exit
3825   1ADE             _while46_block:
3826   1ADE             ; i--; 
3827   1ADE FA F5 FF      lea d, [bp + -11] ; $i
3828   1AE1 2A            mov b, [d]
3829   1AE2 38 00 00      mov c, 0
3830   1AE5 FD 7D         dec b
3831   1AE7 FA F5 FF      lea d, [bp + -11] ; $i
3832   1AEA FD 43         mov [d], b
3833   1AEC FD 77         inc b
3834   1AEE             ; putchar(digits[i]); 
3835   1AEE             ; --- START FUNCTION CALL
3836   1AEE FA F7 FF      lea d, [bp + -9] ; $digits
3837   1AF1 D7            push a
3838   1AF2 DA            push d
3839   1AF3 FA F5 FF      lea d, [bp + -11] ; $i
3840   1AF6 2A            mov b, [d]
3841   1AF7 38 00 00      mov c, 0
3842   1AFA E7            pop d
3843   1AFB 5A            add d, b
3844   1AFC E4            pop a
3845   1AFD 32            mov bl, [d]
3846   1AFE A7 00         mov bh, 0
3847   1B00 38 00 00      mov c, 0
3848   1B03 DD            push bl
3849   1B04 07 2F 1F      call putchar
3850   1B07 51 01 00      add sp, 1
3851   1B0A             ; --- END FUNCTION CALL
3852   1B0A 0A C5 1A      jmp _while46_cond
3853   1B0D             _while46_exit:
3854   1B0D F9            leave
3855   1B0E 09            ret
3856   1B0F             
3857   1B0F             sprint_unsigned:
3858   1B0F F8 00 00      enter 0 ; (push bp; mov bp, sp)
3859   1B12             ; char digits[5]; 
3860   1B12 52 05 00      sub sp, 5
3861   1B15             ; int i; 
3862   1B15 52 02 00      sub sp, 2
3863   1B18             ; int len = 0; 
3864   1B18 52 02 00      sub sp, 2
3865   1B1B             ; --- START LOCAL VAR INITIALIZATION
3866   1B1B FA F8 FF      lea d, [bp + -8] ; $len
3867   1B1E DA            push d
3868   1B1F 26 00 00      mov b, $0
3869   1B22 38 00 00      mov c, 0
3870   1B25 E7            pop d
3871   1B26 FD 43         mov [d], b
3872   1B28             ; --- END LOCAL VAR INITIALIZATION
3873   1B28             ; i = 0; 
3874   1B28 FA FA FF      lea d, [bp + -6] ; $i
3875   1B2B DA            push d
3876   1B2C 26 00 00      mov b, $0
3877   1B2F 38 00 00      mov c, 0
3878   1B32 E7            pop d
3879   1B33 FD 43         mov [d], b
3880   1B35             ; if(num == 0){ 
3881   1B35             _if47_cond:
3882   1B35 FA 07 00      lea d, [bp + 7] ; $num
3883   1B38 2A            mov b, [d]
3884   1B39 38 00 00      mov c, 0
3885   1B3C             ; --- START RELATIONAL
3886   1B3C D7            push a
3887   1B3D 11            mov a, b
3888   1B3E 26 00 00      mov b, $0
3889   1B41 38 00 00      mov c, 0
3890   1B44 B0            cmp a, b
3891   1B45 FD 71         seq ; ==
3892   1B47 E4            pop a
3893   1B48             ; --- END RELATIONAL
3894   1B48 C0 00 00      cmp b, 0
3895   1B4B C6 73 1B      je _if47_exit
3896   1B4E             _if47_true:
3897   1B4E             ; *dest++ = '0'; 
3898   1B4E FA 05 00      lea d, [bp + 5] ; $dest
3899   1B51 2A            mov b, [d]
3900   1B52 38 00 00      mov c, 0
3901   1B55 FD 77         inc b
3902   1B57 FA 05 00      lea d, [bp + 5] ; $dest
3903   1B5A FD 43         mov [d], b
3904   1B5C FD 7D         dec b
3905   1B5E D8            push b
3906   1B5F 26 30 00      mov b, $30
3907   1B62 38 00 00      mov c, 0
3908   1B65 E7            pop d
3909   1B66 FD 3E         mov [d], bl
3910   1B68             ; return 1; 
3911   1B68 26 01 00      mov b, $1
3912   1B6B 38 00 00      mov c, 0
3913   1B6E F9            leave
3914   1B6F 09            ret
3915   1B70 0A 73 1B      jmp _if47_exit
3916   1B73             _if47_exit:
3917   1B73             ; while (num > 0) { 
3918   1B73             _while48_cond:
3919   1B73 FA 07 00      lea d, [bp + 7] ; $num
3920   1B76 2A            mov b, [d]
3921   1B77 38 00 00      mov c, 0
3922   1B7A             ; --- START RELATIONAL
3923   1B7A D7            push a
3924   1B7B 11            mov a, b
3925   1B7C 26 00 00      mov b, $0
3926   1B7F 38 00 00      mov c, 0
3927   1B82 B0            cmp a, b
3928   1B83 FD 81         sgu ; > (unsigned)
3929   1B85 E4            pop a
3930   1B86             ; --- END RELATIONAL
3931   1B86 C0 00 00      cmp b, 0
3932   1B89 C6 E8 1B      je _while48_exit
3933   1B8C             _while48_block:
3934   1B8C             ; digits[i] = '0' + (num % 10); 
3935   1B8C FA FC FF      lea d, [bp + -4] ; $digits
3936   1B8F D7            push a
3937   1B90 DA            push d
3938   1B91 FA FA FF      lea d, [bp + -6] ; $i
3939   1B94 2A            mov b, [d]
3940   1B95 38 00 00      mov c, 0
3941   1B98 E7            pop d
3942   1B99 5A            add d, b
3943   1B9A E4            pop a
3944   1B9B DA            push d
3945   1B9C 26 30 00      mov b, $30
3946   1B9F 38 00 00      mov c, 0
3947   1BA2             ; --- START TERMS
3948   1BA2 D7            push a
3949   1BA3 11            mov a, b
3950   1BA4 FA 07 00      lea d, [bp + 7] ; $num
3951   1BA7 2A            mov b, [d]
3952   1BA8 38 00 00      mov c, 0
3953   1BAB             ; --- START FACTORS
3954   1BAB D7            push a
3955   1BAC 11            mov a, b
3956   1BAD 26 0A 00      mov b, $a
3957   1BB0 38 00 00      mov c, 0
3958   1BB3 AE            div a, b ; 
3959   1BB4 11            mov a, b
3960   1BB5 27            mov b, a
3961   1BB6 E4            pop a
3962   1BB7             ; --- END FACTORS
3963   1BB7 56            add b, a
3964   1BB8 E4            pop a
3965   1BB9             ; --- END TERMS
3966   1BB9 E7            pop d
3967   1BBA FD 3E         mov [d], bl
3968   1BBC             ; num = num / 10; 
3969   1BBC FA 07 00      lea d, [bp + 7] ; $num
3970   1BBF DA            push d
3971   1BC0 FA 07 00      lea d, [bp + 7] ; $num
3972   1BC3 2A            mov b, [d]
3973   1BC4 38 00 00      mov c, 0
3974   1BC7             ; --- START FACTORS
3975   1BC7 D7            push a
3976   1BC8 11            mov a, b
3977   1BC9 26 0A 00      mov b, $a
3978   1BCC 38 00 00      mov c, 0
3979   1BCF AE            div a, b
3980   1BD0 27            mov b, a
3981   1BD1 E4            pop a
3982   1BD2             ; --- END FACTORS
3983   1BD2 E7            pop d
3984   1BD3 FD 43         mov [d], b
3985   1BD5             ; i++; 
3986   1BD5 FA FA FF      lea d, [bp + -6] ; $i
3987   1BD8 2A            mov b, [d]
3988   1BD9 38 00 00      mov c, 0
3989   1BDC FD 77         inc b
3990   1BDE FA FA FF      lea d, [bp + -6] ; $i
3991   1BE1 FD 43         mov [d], b
3992   1BE3 FD 7D         dec b
3993   1BE5 0A 73 1B      jmp _while48_cond
3994   1BE8             _while48_exit:
3995   1BE8             ; while (i > 0) { 
3996   1BE8             _while49_cond:
3997   1BE8 FA FA FF      lea d, [bp + -6] ; $i
3998   1BEB 2A            mov b, [d]
3999   1BEC 38 00 00      mov c, 0
4000   1BEF             ; --- START RELATIONAL
4001   1BEF D7            push a
4002   1BF0 11            mov a, b
4003   1BF1 26 00 00      mov b, $0
4004   1BF4 38 00 00      mov c, 0
4005   1BF7 B0            cmp a, b
4006   1BF8 FD 7F         sgt ; >
4007   1BFA E4            pop a
4008   1BFB             ; --- END RELATIONAL
4009   1BFB C0 00 00      cmp b, 0
4010   1BFE C6 4D 1C      je _while49_exit
4011   1C01             _while49_block:
4012   1C01             ; i--; 
4013   1C01 FA FA FF      lea d, [bp + -6] ; $i
4014   1C04 2A            mov b, [d]
4015   1C05 38 00 00      mov c, 0
4016   1C08 FD 7D         dec b
4017   1C0A FA FA FF      lea d, [bp + -6] ; $i
4018   1C0D FD 43         mov [d], b
4019   1C0F FD 77         inc b
4020   1C11             ; *dest++ = digits[i]; 
4021   1C11 FA 05 00      lea d, [bp + 5] ; $dest
4022   1C14 2A            mov b, [d]
4023   1C15 38 00 00      mov c, 0
4024   1C18 FD 77         inc b
4025   1C1A FA 05 00      lea d, [bp + 5] ; $dest
4026   1C1D FD 43         mov [d], b
4027   1C1F FD 7D         dec b
4028   1C21 D8            push b
4029   1C22 FA FC FF      lea d, [bp + -4] ; $digits
4030   1C25 D7            push a
4031   1C26 DA            push d
4032   1C27 FA FA FF      lea d, [bp + -6] ; $i
4033   1C2A 2A            mov b, [d]
4034   1C2B 38 00 00      mov c, 0
4035   1C2E E7            pop d
4036   1C2F 5A            add d, b
4037   1C30 E4            pop a
4038   1C31 32            mov bl, [d]
4039   1C32 A7 00         mov bh, 0
4040   1C34 38 00 00      mov c, 0
4041   1C37 E7            pop d
4042   1C38 FD 3E         mov [d], bl
4043   1C3A             ; len++; 
4044   1C3A FA F8 FF      lea d, [bp + -8] ; $len
4045   1C3D 2A            mov b, [d]
4046   1C3E 38 00 00      mov c, 0
4047   1C41 FD 77         inc b
4048   1C43 FA F8 FF      lea d, [bp + -8] ; $len
4049   1C46 FD 43         mov [d], b
4050   1C48 FD 7D         dec b
4051   1C4A 0A E8 1B      jmp _while49_cond
4052   1C4D             _while49_exit:
4053   1C4D             ; *dest = '\0'; 
4054   1C4D FA 05 00      lea d, [bp + 5] ; $dest
4055   1C50 2A            mov b, [d]
4056   1C51 38 00 00      mov c, 0
4057   1C54 D8            push b
4058   1C55 26 00 00      mov b, $0
4059   1C58 38 00 00      mov c, 0
4060   1C5B E7            pop d
4061   1C5C FD 3E         mov [d], bl
4062   1C5E             ; return len; 
4063   1C5E FA F8 FF      lea d, [bp + -8] ; $len
4064   1C61 2A            mov b, [d]
4065   1C62 38 00 00      mov c, 0
4066   1C65 F9            leave
4067   1C66 09            ret
4068   1C67             
4069   1C67             print_unsigned:
4070   1C67 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4071   1C6A             ; char digits[5]; 
4072   1C6A 52 05 00      sub sp, 5
4073   1C6D             ; int i; 
4074   1C6D 52 02 00      sub sp, 2
4075   1C70             ; i = 0; 
4076   1C70 FA FA FF      lea d, [bp + -6] ; $i
4077   1C73 DA            push d
4078   1C74 26 00 00      mov b, $0
4079   1C77 38 00 00      mov c, 0
4080   1C7A E7            pop d
4081   1C7B FD 43         mov [d], b
4082   1C7D             ; if(num == 0){ 
4083   1C7D             _if50_cond:
4084   1C7D FA 05 00      lea d, [bp + 5] ; $num
4085   1C80 2A            mov b, [d]
4086   1C81 38 00 00      mov c, 0
4087   1C84             ; --- START RELATIONAL
4088   1C84 D7            push a
4089   1C85 11            mov a, b
4090   1C86 26 00 00      mov b, $0
4091   1C89 38 00 00      mov c, 0
4092   1C8C B0            cmp a, b
4093   1C8D FD 71         seq ; ==
4094   1C8F E4            pop a
4095   1C90             ; --- END RELATIONAL
4096   1C90 C0 00 00      cmp b, 0
4097   1C93 C6 A8 1C      je _if50_exit
4098   1C96             _if50_true:
4099   1C96             ; putchar('0'); 
4100   1C96             ; --- START FUNCTION CALL
4101   1C96 26 30 00      mov b, $30
4102   1C99 38 00 00      mov c, 0
4103   1C9C DD            push bl
4104   1C9D 07 2F 1F      call putchar
4105   1CA0 51 01 00      add sp, 1
4106   1CA3             ; --- END FUNCTION CALL
4107   1CA3             ; return; 
4108   1CA3 F9            leave
4109   1CA4 09            ret
4110   1CA5 0A A8 1C      jmp _if50_exit
4111   1CA8             _if50_exit:
4112   1CA8             ; while (num > 0) { 
4113   1CA8             _while51_cond:
4114   1CA8 FA 05 00      lea d, [bp + 5] ; $num
4115   1CAB 2A            mov b, [d]
4116   1CAC 38 00 00      mov c, 0
4117   1CAF             ; --- START RELATIONAL
4118   1CAF D7            push a
4119   1CB0 11            mov a, b
4120   1CB1 26 00 00      mov b, $0
4121   1CB4 38 00 00      mov c, 0
4122   1CB7 B0            cmp a, b
4123   1CB8 FD 81         sgu ; > (unsigned)
4124   1CBA E4            pop a
4125   1CBB             ; --- END RELATIONAL
4126   1CBB C0 00 00      cmp b, 0
4127   1CBE C6 1D 1D      je _while51_exit
4128   1CC1             _while51_block:
4129   1CC1             ; digits[i] = '0' + (num % 10); 
4130   1CC1 FA FC FF      lea d, [bp + -4] ; $digits
4131   1CC4 D7            push a
4132   1CC5 DA            push d
4133   1CC6 FA FA FF      lea d, [bp + -6] ; $i
4134   1CC9 2A            mov b, [d]
4135   1CCA 38 00 00      mov c, 0
4136   1CCD E7            pop d
4137   1CCE 5A            add d, b
4138   1CCF E4            pop a
4139   1CD0 DA            push d
4140   1CD1 26 30 00      mov b, $30
4141   1CD4 38 00 00      mov c, 0
4142   1CD7             ; --- START TERMS
4143   1CD7 D7            push a
4144   1CD8 11            mov a, b
4145   1CD9 FA 05 00      lea d, [bp + 5] ; $num
4146   1CDC 2A            mov b, [d]
4147   1CDD 38 00 00      mov c, 0
4148   1CE0             ; --- START FACTORS
4149   1CE0 D7            push a
4150   1CE1 11            mov a, b
4151   1CE2 26 0A 00      mov b, $a
4152   1CE5 38 00 00      mov c, 0
4153   1CE8 AE            div a, b ; 
4154   1CE9 11            mov a, b
4155   1CEA 27            mov b, a
4156   1CEB E4            pop a
4157   1CEC             ; --- END FACTORS
4158   1CEC 56            add b, a
4159   1CED E4            pop a
4160   1CEE             ; --- END TERMS
4161   1CEE E7            pop d
4162   1CEF FD 3E         mov [d], bl
4163   1CF1             ; num = num / 10; 
4164   1CF1 FA 05 00      lea d, [bp + 5] ; $num
4165   1CF4 DA            push d
4166   1CF5 FA 05 00      lea d, [bp + 5] ; $num
4167   1CF8 2A            mov b, [d]
4168   1CF9 38 00 00      mov c, 0
4169   1CFC             ; --- START FACTORS
4170   1CFC D7            push a
4171   1CFD 11            mov a, b
4172   1CFE 26 0A 00      mov b, $a
4173   1D01 38 00 00      mov c, 0
4174   1D04 AE            div a, b
4175   1D05 27            mov b, a
4176   1D06 E4            pop a
4177   1D07             ; --- END FACTORS
4178   1D07 E7            pop d
4179   1D08 FD 43         mov [d], b
4180   1D0A             ; i++; 
4181   1D0A FA FA FF      lea d, [bp + -6] ; $i
4182   1D0D 2A            mov b, [d]
4183   1D0E 38 00 00      mov c, 0
4184   1D11 FD 77         inc b
4185   1D13 FA FA FF      lea d, [bp + -6] ; $i
4186   1D16 FD 43         mov [d], b
4187   1D18 FD 7D         dec b
4188   1D1A 0A A8 1C      jmp _while51_cond
4189   1D1D             _while51_exit:
4190   1D1D             ; while (i > 0) { 
4191   1D1D             _while52_cond:
4192   1D1D FA FA FF      lea d, [bp + -6] ; $i
4193   1D20 2A            mov b, [d]
4194   1D21 38 00 00      mov c, 0
4195   1D24             ; --- START RELATIONAL
4196   1D24 D7            push a
4197   1D25 11            mov a, b
4198   1D26 26 00 00      mov b, $0
4199   1D29 38 00 00      mov c, 0
4200   1D2C B0            cmp a, b
4201   1D2D FD 7F         sgt ; >
4202   1D2F E4            pop a
4203   1D30             ; --- END RELATIONAL
4204   1D30 C0 00 00      cmp b, 0
4205   1D33 C6 65 1D      je _while52_exit
4206   1D36             _while52_block:
4207   1D36             ; i--; 
4208   1D36 FA FA FF      lea d, [bp + -6] ; $i
4209   1D39 2A            mov b, [d]
4210   1D3A 38 00 00      mov c, 0
4211   1D3D FD 7D         dec b
4212   1D3F FA FA FF      lea d, [bp + -6] ; $i
4213   1D42 FD 43         mov [d], b
4214   1D44 FD 77         inc b
4215   1D46             ; putchar(digits[i]); 
4216   1D46             ; --- START FUNCTION CALL
4217   1D46 FA FC FF      lea d, [bp + -4] ; $digits
4218   1D49 D7            push a
4219   1D4A DA            push d
4220   1D4B FA FA FF      lea d, [bp + -6] ; $i
4221   1D4E 2A            mov b, [d]
4222   1D4F 38 00 00      mov c, 0
4223   1D52 E7            pop d
4224   1D53 5A            add d, b
4225   1D54 E4            pop a
4226   1D55 32            mov bl, [d]
4227   1D56 A7 00         mov bh, 0
4228   1D58 38 00 00      mov c, 0
4229   1D5B DD            push bl
4230   1D5C 07 2F 1F      call putchar
4231   1D5F 51 01 00      add sp, 1
4232   1D62             ; --- END FUNCTION CALL
4233   1D62 0A 1D 1D      jmp _while52_cond
4234   1D65             _while52_exit:
4235   1D65 F9            leave
4236   1D66 09            ret
4237   1D67             
4238   1D67             sprint_signed:
4239   1D67 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4240   1D6A             ; char digits[5]; 
4241   1D6A 52 05 00      sub sp, 5
4242   1D6D             ; int i = 0; 
4243   1D6D 52 02 00      sub sp, 2
4244   1D70             ; --- START LOCAL VAR INITIALIZATION
4245   1D70 FA FA FF      lea d, [bp + -6] ; $i
4246   1D73 DA            push d
4247   1D74 26 00 00      mov b, $0
4248   1D77 38 00 00      mov c, 0
4249   1D7A E7            pop d
4250   1D7B FD 43         mov [d], b
4251   1D7D             ; --- END LOCAL VAR INITIALIZATION
4252   1D7D             ; int len = 0; 
4253   1D7D 52 02 00      sub sp, 2
4254   1D80             ; --- START LOCAL VAR INITIALIZATION
4255   1D80 FA F8 FF      lea d, [bp + -8] ; $len
4256   1D83 DA            push d
4257   1D84 26 00 00      mov b, $0
4258   1D87 38 00 00      mov c, 0
4259   1D8A E7            pop d
4260   1D8B FD 43         mov [d], b
4261   1D8D             ; --- END LOCAL VAR INITIALIZATION
4262   1D8D             ; if (num < 0) { 
4263   1D8D             _if53_cond:
4264   1D8D FA 07 00      lea d, [bp + 7] ; $num
4265   1D90 2A            mov b, [d]
4266   1D91 38 00 00      mov c, 0
4267   1D94             ; --- START RELATIONAL
4268   1D94 D7            push a
4269   1D95 11            mov a, b
4270   1D96 26 00 00      mov b, $0
4271   1D99 38 00 00      mov c, 0
4272   1D9C B0            cmp a, b
4273   1D9D FD 73         slt ; < (signed)
4274   1D9F E4            pop a
4275   1DA0             ; --- END RELATIONAL
4276   1DA0 C0 00 00      cmp b, 0
4277   1DA3 C6 E3 1D      je _if53_else
4278   1DA6             _if53_true:
4279   1DA6             ; *dest++ = '-'; 
4280   1DA6 FA 05 00      lea d, [bp + 5] ; $dest
4281   1DA9 2A            mov b, [d]
4282   1DAA 38 00 00      mov c, 0
4283   1DAD FD 77         inc b
4284   1DAF FA 05 00      lea d, [bp + 5] ; $dest
4285   1DB2 FD 43         mov [d], b
4286   1DB4 FD 7D         dec b
4287   1DB6 D8            push b
4288   1DB7 26 2D 00      mov b, $2d
4289   1DBA 38 00 00      mov c, 0
4290   1DBD E7            pop d
4291   1DBE FD 3E         mov [d], bl
4292   1DC0             ; num = -num; 
4293   1DC0 FA 07 00      lea d, [bp + 7] ; $num
4294   1DC3 DA            push d
4295   1DC4 FA 07 00      lea d, [bp + 7] ; $num
4296   1DC7 2A            mov b, [d]
4297   1DC8 38 00 00      mov c, 0
4298   1DCB FD 97         neg b
4299   1DCD E7            pop d
4300   1DCE FD 43         mov [d], b
4301   1DD0             ; len++; 
4302   1DD0 FA F8 FF      lea d, [bp + -8] ; $len
4303   1DD3 2A            mov b, [d]
4304   1DD4 38 00 00      mov c, 0
4305   1DD7 FD 77         inc b
4306   1DD9 FA F8 FF      lea d, [bp + -8] ; $len
4307   1DDC FD 43         mov [d], b
4308   1DDE FD 7D         dec b
4309   1DE0 0A 32 1E      jmp _if53_exit
4310   1DE3             _if53_else:
4311   1DE3             ; if (num == 0) { 
4312   1DE3             _if54_cond:
4313   1DE3 FA 07 00      lea d, [bp + 7] ; $num
4314   1DE6 2A            mov b, [d]
4315   1DE7 38 00 00      mov c, 0
4316   1DEA             ; --- START RELATIONAL
4317   1DEA D7            push a
4318   1DEB 11            mov a, b
4319   1DEC 26 00 00      mov b, $0
4320   1DEF 38 00 00      mov c, 0
4321   1DF2 B0            cmp a, b
4322   1DF3 FD 71         seq ; ==
4323   1DF5 E4            pop a
4324   1DF6             ; --- END RELATIONAL
4325   1DF6 C0 00 00      cmp b, 0
4326   1DF9 C6 32 1E      je _if54_exit
4327   1DFC             _if54_true:
4328   1DFC             ; *dest++ = '0'; 
4329   1DFC FA 05 00      lea d, [bp + 5] ; $dest
4330   1DFF 2A            mov b, [d]
4331   1E00 38 00 00      mov c, 0
4332   1E03 FD 77         inc b
4333   1E05 FA 05 00      lea d, [bp + 5] ; $dest
4334   1E08 FD 43         mov [d], b
4335   1E0A FD 7D         dec b
4336   1E0C D8            push b
4337   1E0D 26 30 00      mov b, $30
4338   1E10 38 00 00      mov c, 0
4339   1E13 E7            pop d
4340   1E14 FD 3E         mov [d], bl
4341   1E16             ; *dest = '\0'; 
4342   1E16 FA 05 00      lea d, [bp + 5] ; $dest
4343   1E19 2A            mov b, [d]
4344   1E1A 38 00 00      mov c, 0
4345   1E1D D8            push b
4346   1E1E 26 00 00      mov b, $0
4347   1E21 38 00 00      mov c, 0
4348   1E24 E7            pop d
4349   1E25 FD 3E         mov [d], bl
4350   1E27             ; return 1; 
4351   1E27 26 01 00      mov b, $1
4352   1E2A 38 00 00      mov c, 0
4353   1E2D F9            leave
4354   1E2E 09            ret
4355   1E2F 0A 32 1E      jmp _if54_exit
4356   1E32             _if54_exit:
4357   1E32             _if53_exit:
4358   1E32             ; while (num > 0) { 
4359   1E32             _while55_cond:
4360   1E32 FA 07 00      lea d, [bp + 7] ; $num
4361   1E35 2A            mov b, [d]
4362   1E36 38 00 00      mov c, 0
4363   1E39             ; --- START RELATIONAL
4364   1E39 D7            push a
4365   1E3A 11            mov a, b
4366   1E3B 26 00 00      mov b, $0
4367   1E3E 38 00 00      mov c, 0
4368   1E41 B0            cmp a, b
4369   1E42 FD 7F         sgt ; >
4370   1E44 E4            pop a
4371   1E45             ; --- END RELATIONAL
4372   1E45 C0 00 00      cmp b, 0
4373   1E48 C6 A7 1E      je _while55_exit
4374   1E4B             _while55_block:
4375   1E4B             ; digits[i] = '0' + (num % 10); 
4376   1E4B FA FC FF      lea d, [bp + -4] ; $digits
4377   1E4E D7            push a
4378   1E4F DA            push d
4379   1E50 FA FA FF      lea d, [bp + -6] ; $i
4380   1E53 2A            mov b, [d]
4381   1E54 38 00 00      mov c, 0
4382   1E57 E7            pop d
4383   1E58 5A            add d, b
4384   1E59 E4            pop a
4385   1E5A DA            push d
4386   1E5B 26 30 00      mov b, $30
4387   1E5E 38 00 00      mov c, 0
4388   1E61             ; --- START TERMS
4389   1E61 D7            push a
4390   1E62 11            mov a, b
4391   1E63 FA 07 00      lea d, [bp + 7] ; $num
4392   1E66 2A            mov b, [d]
4393   1E67 38 00 00      mov c, 0
4394   1E6A             ; --- START FACTORS
4395   1E6A D7            push a
4396   1E6B 11            mov a, b
4397   1E6C 26 0A 00      mov b, $a
4398   1E6F 38 00 00      mov c, 0
4399   1E72 AE            div a, b ; 
4400   1E73 11            mov a, b
4401   1E74 27            mov b, a
4402   1E75 E4            pop a
4403   1E76             ; --- END FACTORS
4404   1E76 56            add b, a
4405   1E77 E4            pop a
4406   1E78             ; --- END TERMS
4407   1E78 E7            pop d
4408   1E79 FD 3E         mov [d], bl
4409   1E7B             ; num = num / 10; 
4410   1E7B FA 07 00      lea d, [bp + 7] ; $num
4411   1E7E DA            push d
4412   1E7F FA 07 00      lea d, [bp + 7] ; $num
4413   1E82 2A            mov b, [d]
4414   1E83 38 00 00      mov c, 0
4415   1E86             ; --- START FACTORS
4416   1E86 D7            push a
4417   1E87 11            mov a, b
4418   1E88 26 0A 00      mov b, $a
4419   1E8B 38 00 00      mov c, 0
4420   1E8E AE            div a, b
4421   1E8F 27            mov b, a
4422   1E90 E4            pop a
4423   1E91             ; --- END FACTORS
4424   1E91 E7            pop d
4425   1E92 FD 43         mov [d], b
4426   1E94             ; i++; 
4427   1E94 FA FA FF      lea d, [bp + -6] ; $i
4428   1E97 2A            mov b, [d]
4429   1E98 38 00 00      mov c, 0
4430   1E9B FD 77         inc b
4431   1E9D FA FA FF      lea d, [bp + -6] ; $i
4432   1EA0 FD 43         mov [d], b
4433   1EA2 FD 7D         dec b
4434   1EA4 0A 32 1E      jmp _while55_cond
4435   1EA7             _while55_exit:
4436   1EA7             ; while (i > 0) { 
4437   1EA7             _while56_cond:
4438   1EA7 FA FA FF      lea d, [bp + -6] ; $i
4439   1EAA 2A            mov b, [d]
4440   1EAB 38 00 00      mov c, 0
4441   1EAE             ; --- START RELATIONAL
4442   1EAE D7            push a
4443   1EAF 11            mov a, b
4444   1EB0 26 00 00      mov b, $0
4445   1EB3 38 00 00      mov c, 0
4446   1EB6 B0            cmp a, b
4447   1EB7 FD 7F         sgt ; >
4448   1EB9 E4            pop a
4449   1EBA             ; --- END RELATIONAL
4450   1EBA C0 00 00      cmp b, 0
4451   1EBD C6 0C 1F      je _while56_exit
4452   1EC0             _while56_block:
4453   1EC0             ; i--; 
4454   1EC0 FA FA FF      lea d, [bp + -6] ; $i
4455   1EC3 2A            mov b, [d]
4456   1EC4 38 00 00      mov c, 0
4457   1EC7 FD 7D         dec b
4458   1EC9 FA FA FF      lea d, [bp + -6] ; $i
4459   1ECC FD 43         mov [d], b
4460   1ECE FD 77         inc b
4461   1ED0             ; *dest++ = digits[i]; 
4462   1ED0 FA 05 00      lea d, [bp + 5] ; $dest
4463   1ED3 2A            mov b, [d]
4464   1ED4 38 00 00      mov c, 0
4465   1ED7 FD 77         inc b
4466   1ED9 FA 05 00      lea d, [bp + 5] ; $dest
4467   1EDC FD 43         mov [d], b
4468   1EDE FD 7D         dec b
4469   1EE0 D8            push b
4470   1EE1 FA FC FF      lea d, [bp + -4] ; $digits
4471   1EE4 D7            push a
4472   1EE5 DA            push d
4473   1EE6 FA FA FF      lea d, [bp + -6] ; $i
4474   1EE9 2A            mov b, [d]
4475   1EEA 38 00 00      mov c, 0
4476   1EED E7            pop d
4477   1EEE 5A            add d, b
4478   1EEF E4            pop a
4479   1EF0 32            mov bl, [d]
4480   1EF1 A7 00         mov bh, 0
4481   1EF3 38 00 00      mov c, 0
4482   1EF6 E7            pop d
4483   1EF7 FD 3E         mov [d], bl
4484   1EF9             ; len++; 
4485   1EF9 FA F8 FF      lea d, [bp + -8] ; $len
4486   1EFC 2A            mov b, [d]
4487   1EFD 38 00 00      mov c, 0
4488   1F00 FD 77         inc b
4489   1F02 FA F8 FF      lea d, [bp + -8] ; $len
4490   1F05 FD 43         mov [d], b
4491   1F07 FD 7D         dec b
4492   1F09 0A A7 1E      jmp _while56_cond
4493   1F0C             _while56_exit:
4494   1F0C             ; *dest = '\0'; 
4495   1F0C FA 05 00      lea d, [bp + 5] ; $dest
4496   1F0F 2A            mov b, [d]
4497   1F10 38 00 00      mov c, 0
4498   1F13 D8            push b
4499   1F14 26 00 00      mov b, $0
4500   1F17 38 00 00      mov c, 0
4501   1F1A E7            pop d
4502   1F1B FD 3E         mov [d], bl
4503   1F1D             ; return len; 
4504   1F1D FA F8 FF      lea d, [bp + -8] ; $len
4505   1F20 2A            mov b, [d]
4506   1F21 38 00 00      mov c, 0
4507   1F24 F9            leave
4508   1F25 09            ret
4509   1F26             
4510   1F26             date:
4511   1F26 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4512   1F29             
4513   1F29             ; --- BEGIN INLINE ASM SEGMENT
4514   1F29 19 00         mov al, 0 
4515   1F2B 05 07         syscall sys_datetime
4516   1F2D             ; --- END INLINE ASM SEGMENT
4517   1F2D             
4518   1F2D F9            leave
4519   1F2E 09            ret
4520   1F2F             
4521   1F2F             putchar:
4522   1F2F F8 00 00      enter 0 ; (push bp; mov bp, sp)
4523   1F32             
4524   1F32             ; --- BEGIN INLINE ASM SEGMENT
4525   1F32 FA 05 00      lea d, [bp + 5] ; $c
4526   1F35 1E            mov al, [d]
4527   1F36 23            mov ah, al
4528   1F37 07 3E 21      call _putchar
4529   1F3A             ; --- END INLINE ASM SEGMENT
4530   1F3A             
4531   1F3A F9            leave
4532   1F3B 09            ret
4533   1F3C             
4534   1F3C             getchar:
4535   1F3C F8 00 00      enter 0 ; (push bp; mov bp, sp)
4536   1F3F             ; char c; 
4537   1F3F 52 01 00      sub sp, 1
4538   1F42             
4539   1F42             ; --- BEGIN INLINE ASM SEGMENT
4540   1F42 07 37 21      call getch
4541   1F45 1A            mov al, ah
4542   1F46 FA 00 00      lea d, [bp + 0] ; $c
4543   1F49 3E            mov [d], al
4544   1F4A             ; --- END INLINE ASM SEGMENT
4545   1F4A             
4546   1F4A             ; return c; 
4547   1F4A FA 00 00      lea d, [bp + 0] ; $c
4548   1F4D 32            mov bl, [d]
4549   1F4E A7 00         mov bh, 0
4550   1F50 38 00 00      mov c, 0
4551   1F53 F9            leave
4552   1F54 09            ret
4553   1F55             
4554   1F55             scann:
4555   1F55 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4556   1F58             ; int m; 
4557   1F58 52 02 00      sub sp, 2
4558   1F5B             
4559   1F5B             ; --- BEGIN INLINE ASM SEGMENT
4560   1F5B 07 82 23      call scan_u16d
4561   1F5E FA FF FF      lea d, [bp + -1] ; $m
4562   1F61 43            mov [d], a
4563   1F62             ; --- END INLINE ASM SEGMENT
4564   1F62             
4565   1F62             ; return m; 
4566   1F62 FA FF FF      lea d, [bp + -1] ; $m
4567   1F65 2A            mov b, [d]
4568   1F66 38 00 00      mov c, 0
4569   1F69 F9            leave
4570   1F6A 09            ret
4571   1F6B             
4572   1F6B             puts:
4573   1F6B F8 00 00      enter 0 ; (push bp; mov bp, sp)
4574   1F6E             
4575   1F6E             ; --- BEGIN INLINE ASM SEGMENT
4576   1F6E FA 05 00      lea d, [bp + 5] ; $s
4577   1F71 15            mov a, [d]
4578   1F72 3C            mov d, a
4579   1F73 07 88 22      call _puts
4580   1F76 10 00 0A      mov a, $0A00
4581   1F79 05 03         syscall sys_io
4582   1F7B             ; --- END INLINE ASM SEGMENT
4583   1F7B             
4584   1F7B F9            leave
4585   1F7C 09            ret
4586   1F7D             
4587   1F7D             print:
4588   1F7D F8 00 00      enter 0 ; (push bp; mov bp, sp)
4589   1F80             
4590   1F80             ; --- BEGIN INLINE ASM SEGMENT
4591   1F80 FA 05 00      lea d, [bp + 5] ; $s
4592   1F83 FD 2A         mov d, [d]
4593   1F85 07 88 22      call _puts
4594   1F88             ; --- END INLINE ASM SEGMENT
4595   1F88             
4596   1F88 F9            leave
4597   1F89 09            ret
4598   1F8A             
4599   1F8A             getparam:
4600   1F8A F8 00 00      enter 0 ; (push bp; mov bp, sp)
4601   1F8D             ; char data; 
4602   1F8D 52 01 00      sub sp, 1
4603   1F90             
4604   1F90             ; --- BEGIN INLINE ASM SEGMENT
4605   1F90 19 04         mov al, 4
4606   1F92 FA 05 00      lea d, [bp + 5] ; $address
4607   1F95 FD 2A         mov d, [d]
4608   1F97 05 0C         syscall sys_system
4609   1F99 FA 00 00      lea d, [bp + 0] ; $data
4610   1F9C FD 3E         mov [d], bl
4611   1F9E             ; --- END INLINE ASM SEGMENT
4612   1F9E             
4613   1F9E             ; return data; 
4614   1F9E FA 00 00      lea d, [bp + 0] ; $data
4615   1FA1 32            mov bl, [d]
4616   1FA2 A7 00         mov bh, 0
4617   1FA4 38 00 00      mov c, 0
4618   1FA7 F9            leave
4619   1FA8 09            ret
4620   1FA9             
4621   1FA9             clear:
4622   1FA9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4623   1FAC             ; print("\033[2J\033[H"); 
4624   1FAC             ; --- START FUNCTION CALL
4625   1FAC 26 91 26      mov b, _s11 ; "\033[2J\033[H"
4626   1FAF FD AB         swp b
4627   1FB1 D8            push b
4628   1FB2 07 7D 1F      call print
4629   1FB5 51 02 00      add sp, 2
4630   1FB8             ; --- END FUNCTION CALL
4631   1FB8 F9            leave
4632   1FB9 09            ret
4633   1FBA             
4634   1FBA             abs:
4635   1FBA F8 00 00      enter 0 ; (push bp; mov bp, sp)
4636   1FBD             ; return i < 0 ? -i : i; 
4637   1FBD             _ternary57_cond:
4638   1FBD FA 05 00      lea d, [bp + 5] ; $i
4639   1FC0 2A            mov b, [d]
4640   1FC1 38 00 00      mov c, 0
4641   1FC4             ; --- START RELATIONAL
4642   1FC4 D7            push a
4643   1FC5 11            mov a, b
4644   1FC6 26 00 00      mov b, $0
4645   1FC9 38 00 00      mov c, 0
4646   1FCC B0            cmp a, b
4647   1FCD FD 73         slt ; < (signed)
4648   1FCF E4            pop a
4649   1FD0             ; --- END RELATIONAL
4650   1FD0 C0 00 00      cmp b, 0
4651   1FD3 C6 E2 1F      je _ternary57_false
4652   1FD6             _ternary57_true:
4653   1FD6 FA 05 00      lea d, [bp + 5] ; $i
4654   1FD9 2A            mov b, [d]
4655   1FDA 38 00 00      mov c, 0
4656   1FDD FD 97         neg b
4657   1FDF 0A E9 1F      jmp _ternary57_exit
4658   1FE2             _ternary57_false:
4659   1FE2 FA 05 00      lea d, [bp + 5] ; $i
4660   1FE5 2A            mov b, [d]
4661   1FE6 38 00 00      mov c, 0
4662   1FE9             _ternary57_exit:
4663   1FE9 F9            leave
4664   1FEA 09            ret
4665   1FEB             
4666   1FEB             loadfile:
4667   1FEB F8 00 00      enter 0 ; (push bp; mov bp, sp)
4668   1FEE             
4669   1FEE             ; --- BEGIN INLINE ASM SEGMENT
4670   1FEE FA 07 00      lea d, [bp + 7] ; $destination
4671   1FF1 15            mov a, [d]
4672   1FF2 4F            mov di, a
4673   1FF3 FA 05 00      lea d, [bp + 5] ; $filename
4674   1FF6 FD 2A         mov d, [d]
4675   1FF8 19 14         mov al, 20
4676   1FFA 05 04         syscall sys_filesystem
4677   1FFC             ; --- END INLINE ASM SEGMENT
4678   1FFC             
4679   1FFC F9            leave
4680   1FFD 09            ret
4681   1FFE             
4682   1FFE             create_file:
4683   1FFE F8 00 00      enter 0 ; (push bp; mov bp, sp)
4684   2001 F9            leave
4685   2002 09            ret
4686   2003             
4687   2003             delete_file:
4688   2003 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4689   2006             
4690   2006             ; --- BEGIN INLINE ASM SEGMENT
4691   2006 FA 05 00      lea d, [bp + 5] ; $filename
4692   2009 19 0A         mov al, 10
4693   200B 05 04         syscall sys_filesystem
4694   200D             ; --- END INLINE ASM SEGMENT
4695   200D             
4696   200D F9            leave
4697   200E 09            ret
4698   200F             
4699   200F             load_hex:
4700   200F F8 00 00      enter 0 ; (push bp; mov bp, sp)
4701   2012             ; char *temp; 
4702   2012 52 02 00      sub sp, 2
4703   2015             ; temp = alloc(32768); 
4704   2015 FA FF FF      lea d, [bp + -1] ; $temp
4705   2018 DA            push d
4706   2019             ; --- START FUNCTION CALL
4707   2019 26 00 80      mov b, $8000
4708   201C 38 00 00      mov c, 0
4709   201F FD AB         swp b
4710   2021 D8            push b
4711   2022 07 31 0B      call alloc
4712   2025 51 02 00      add sp, 2
4713   2028             ; --- END FUNCTION CALL
4714   2028 E7            pop d
4715   2029 FD 43         mov [d], b
4716   202B             
4717   202B             ; --- BEGIN INLINE ASM SEGMENT
4718   202B               
4719   202B               
4720   202B               
4721   202B             _load_hex:
4722   202B FA 05 00      lea d, [bp + 5] ; $destination
4723   202E FD 2A         mov d, [d]
4724   2030 FD 50         mov di, d
4725   2032 FA FF FF      lea d, [bp + -1] ; $temp
4726   2035 FD 2A         mov d, [d]
4727   2037 38 00 00      mov c, 0
4728   203A 48            mov a, sp
4729   203B 77            inc a
4730   203C 3C            mov d, a          
4731   203D 07 45 21      call _gets        
4732   2040 4D            mov si, a
4733   2041             __load_hex_loop:
4734   2041 F6            lodsb             
4735   2042 B9 00         cmp al, 0         
4736   2044 C6 52 20      jz __load_hex_ret
4737   2047 36            mov bh, al
4738   2048 F6            lodsb
4739   2049 2F            mov bl, al
4740   204A 07 FC 20      call _atoi        
4741   204D F7            stosb             
4742   204E 78            inc c
4743   204F 0A 41 20      jmp __load_hex_loop
4744   2052             __load_hex_ret:
4745   2052             ; --- END INLINE ASM SEGMENT
4746   2052             
4747   2052 F9            leave
4748   2053 09            ret
4749   2054             
4750   2054             include_stdio_asm:
4751   2054 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4752   2057             
4753   2057             ; --- BEGIN INLINE ASM SEGMENT
4754   2057             .include "lib/asm/stdio.asm"
0001+  2057             ;-----------------------------------------------------------------------------
0002+  2057             ; stdio.s
0003+  2057             ;-----------------------------------------------------------------------------
0004+  2057             .include "lib/asm/string.asm"
0001++ 2057             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 2057             ; string.s
0003++ 2057             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 2057             
0005++ 2057             
0006++ 2057             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 2057             ; _strrev
0008++ 2057             ; reverse a string
0009++ 2057             ; D = string address
0010++ 2057             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 2057             ; 01234
0012++ 2057             _strrev:
0013++ 2057 4B          	pusha
0014++ 2058 07 9E 20    	call _strlen	; length in C
0015++ 205B 12          	mov a, c
0016++ 205C AF 01 00    	cmp a, 1
0017++ 205F D0 79 20    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 2062 7D          	dec a
0019++ 2063 FD 4E       	mov si, d	; beginning of string
0020++ 2065 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 2067 59          	add d, a	; end of string
0022++ 2068 12          	mov a, c
0023++ 2069 FD 9B       	shr a		; divide by 2
0024++ 206B 39          	mov c, a	; C now counts the steps
0025++ 206C             _strrev_L0:
0026++ 206C 32          	mov bl, [d]	; save load right-side char into BL
0027++ 206D F6          	lodsb		; load left-side char into AL; increase SI
0028++ 206E 3E          	mov [d], al	; store left char into right side
0029++ 206F 1B          	mov al, bl
0030++ 2070 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 2071 7E          	dec c
0032++ 2072 7F          	dec d
0033++ 2073 C2 00 00    	cmp c, 0
0034++ 2076 C7 6C 20    	jne _strrev_L0
0035++ 2079             _strrev_end:
0036++ 2079 4C          	popa
0037++ 207A 09          	ret
0038++ 207B             	
0039++ 207B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 207B             ; _strchr
0041++ 207B             ; search string in D for char in AL
0042++ 207B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 207B             _strchr:
0044++ 207B             _strchr_L0:
0045++ 207B 32          	mov bl, [d]
0046++ 207C C1 00       	cmp bl, 0
0047++ 207E C6 89 20    	je _strchr_end
0048++ 2081 BA          	cmp al, bl
0049++ 2082 C6 89 20    	je _strchr_end
0050++ 2085 79          	inc d
0051++ 2086 0A 7B 20    	jmp _strchr_L0
0052++ 2089             _strchr_end:
0053++ 2089 1B          	mov al, bl
0054++ 208A 09          	ret
0055++ 208B             
0056++ 208B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 208B             ; _strstr
0058++ 208B             ; find sub-string
0059++ 208B             ; str1 in SI
0060++ 208B             ; str2 in DI
0061++ 208B             ; SI points to end of source string
0062++ 208B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 208B             _strstr:
0064++ 208B DB          	push al
0065++ 208C DA          	push d
0066++ 208D E3          	push di
0067++ 208E             _strstr_loop:
0068++ 208E F3          	cmpsb					; compare a byte of the strings
0069++ 208F C7 9A 20    	jne _strstr_ret
0070++ 2092 FC 00 00    	lea d, [di + 0]
0071++ 2095 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 2097 C7 8E 20    	jne _strstr_loop				; equal chars but not at end
0073++ 209A             _strstr_ret:
0074++ 209A F0          	pop di
0075++ 209B E7          	pop d
0076++ 209C E8          	pop al
0077++ 209D 09          	ret
0078++ 209E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 209E             ; length of null terminated string
0080++ 209E             ; result in C
0081++ 209E             ; pointer in D
0082++ 209E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 209E             _strlen:
0084++ 209E DA          	push d
0085++ 209F 38 00 00    	mov c, 0
0086++ 20A2             _strlen_L1:
0087++ 20A2 BD 00       	cmp byte [d], 0
0088++ 20A4 C6 AC 20    	je _strlen_ret
0089++ 20A7 79          	inc d
0090++ 20A8 78          	inc c
0091++ 20A9 0A A2 20    	jmp _strlen_L1
0092++ 20AC             _strlen_ret:
0093++ 20AC E7          	pop d
0094++ 20AD 09          	ret
0095++ 20AE             
0096++ 20AE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 20AE             ; STRCMP
0098++ 20AE             ; compare two strings
0099++ 20AE             ; str1 in SI
0100++ 20AE             ; str2 in DI
0101++ 20AE             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 20AE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 20AE             _strcmp:
0104++ 20AE DB          	push al
0105++ 20AF DA          	push d
0106++ 20B0 E3          	push di
0107++ 20B1 E2          	push si
0108++ 20B2             _strcmp_loop:
0109++ 20B2 F3          	cmpsb					; compare a byte of the strings
0110++ 20B3 C7 BE 20    	jne _strcmp_ret
0111++ 20B6 FB FF FF    	lea d, [si +- 1]
0112++ 20B9 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 20BB C7 B2 20    	jne _strcmp_loop				; equal chars but not at end
0114++ 20BE             _strcmp_ret:
0115++ 20BE EF          	pop si
0116++ 20BF F0          	pop di
0117++ 20C0 E7          	pop d
0118++ 20C1 E8          	pop al
0119++ 20C2 09          	ret
0120++ 20C3             
0121++ 20C3             
0122++ 20C3             ; STRCPY
0123++ 20C3             ; copy null terminated string from SI to DI
0124++ 20C3             ; source in SI
0125++ 20C3             ; destination in DI
0126++ 20C3             _strcpy:
0127++ 20C3 E2          	push si
0128++ 20C4 E3          	push di
0129++ 20C5 DB          	push al
0130++ 20C6             _strcpy_L1:
0131++ 20C6 F6          	lodsb
0132++ 20C7 F7          	stosb
0133++ 20C8 B9 00       	cmp al, 0
0134++ 20CA C7 C6 20    	jne _strcpy_L1
0135++ 20CD             _strcpy_end:
0136++ 20CD E8          	pop al
0137++ 20CE F0          	pop di
0138++ 20CF EF          	pop si
0139++ 20D0 09          	ret
0140++ 20D1             
0141++ 20D1             ; STRCAT
0142++ 20D1             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 20D1             ; source in SI
0144++ 20D1             ; destination in DI
0145++ 20D1             _strcat:
0146++ 20D1 E2          	push si
0147++ 20D2 E3          	push di
0148++ 20D3 D7          	push a
0149++ 20D4 DA          	push d
0150++ 20D5 50          	mov a, di
0151++ 20D6 3C          	mov d, a
0152++ 20D7             _strcat_goto_end_L1:
0153++ 20D7 BD 00       	cmp byte[d], 0
0154++ 20D9 C6 E0 20    	je _strcat_start
0155++ 20DC 79          	inc d
0156++ 20DD 0A D7 20    	jmp _strcat_goto_end_L1
0157++ 20E0             _strcat_start:
0158++ 20E0 FD 50       	mov di, d
0159++ 20E2             _strcat_L1:
0160++ 20E2 F6          	lodsb
0161++ 20E3 F7          	stosb
0162++ 20E4 B9 00       	cmp al, 0
0163++ 20E6 C7 E2 20    	jne _strcat_L1
0164++ 20E9             _strcat_end:
0165++ 20E9 E7          	pop d
0166++ 20EA E4          	pop a
0167++ 20EB F0          	pop di
0168++ 20EC EF          	pop si
0169++ 20ED 09          	ret
0170++ 20EE             
0171++ 20EE             
0005+  20EE             
0006+  20EE             ;-----------------------------------------------------------------------------
0007+  20EE             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  20EE             ; ASCII in BL
0009+  20EE             ; result in AL
0010+  20EE             ; ascii for F = 0100 0110
0011+  20EE             ; ascii for 9 = 0011 1001
0012+  20EE             ;-----------------------------------------------------------------------------
0013+  20EE             hex_ascii_encode:
0014+  20EE 1B            mov al, bl
0015+  20EF 93 40         test al, $40        ; test if letter or number
0016+  20F1 C7 F7 20      jnz hex_letter
0017+  20F4 87 0F         and al, $0F        ; get number
0018+  20F6 09            ret
0019+  20F7             hex_letter:
0020+  20F7 87 0F         and al, $0F        ; get letter
0021+  20F9 6A 09         add al, 9
0022+  20FB 09            ret
0023+  20FC             
0024+  20FC             ;-----------------------------------------------------------------------------
0025+  20FC             ; ATOI
0026+  20FC             ; 2 letter hex string in B
0027+  20FC             ; 8bit integer returned in AL
0028+  20FC             ;-----------------------------------------------------------------------------
0029+  20FC             _atoi:
0030+  20FC D8            push b
0031+  20FD 07 EE 20      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  2100 30            mov bl, bh
0033+  2101 DB            push al          ; save a
0034+  2102 07 EE 20      call hex_ascii_encode
0035+  2105 EA            pop bl  
0036+  2106 FD 9E 04      shl al, 4
0037+  2109 8C            or al, bl
0038+  210A E5            pop b
0039+  210B 09            ret  
0040+  210C             
0041+  210C             
0042+  210C             ;-----------------------------------------------------------------------------
0043+  210C             ; ITOA
0044+  210C             ; 8bit value in BL
0045+  210C             ; 2 byte ASCII result in A
0046+  210C             ;-----------------------------------------------------------------------------
0047+  210C             _itoa:
0048+  210C DA            push d
0049+  210D D8            push b
0050+  210E A7 00         mov bh, 0
0051+  2110 FD A4 04      shr bl, 4  
0052+  2113 74            mov d, b
0053+  2114 1F BC 23      mov al, [d + s_hex_digits]
0054+  2117 23            mov ah, al
0055+  2118               
0056+  2118 E5            pop b
0057+  2119 D8            push b
0058+  211A A7 00         mov bh, 0
0059+  211C FD 87 0F      and bl, $0F
0060+  211F 74            mov d, b
0061+  2120 1F BC 23      mov al, [d + s_hex_digits]
0062+  2123 E5            pop b
0063+  2124 E7            pop d
0064+  2125 09            ret
0065+  2126             
0066+  2126             ;-----------------------------------------------------------------------------
0067+  2126             ; HEX STRING TO BINARY
0068+  2126             ; di = destination address
0069+  2126             ; si = source
0070+  2126             ;-----------------------------------------------------------------------------
0071+  2126             _hex_to_int:
0072+  2126             _hex_to_int_L1:
0073+  2126 F6            lodsb          ; load from [SI] to AL
0074+  2127 B9 00         cmp al, 0        ; check if ASCII 0
0075+  2129 C6 36 21      jz _hex_to_int_ret
0076+  212C 36            mov bh, al
0077+  212D F6            lodsb
0078+  212E 2F            mov bl, al
0079+  212F 07 FC 20      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  2132 F7            stosb          ; store AL to [DI]
0081+  2133 0A 26 21      jmp _hex_to_int_L1
0082+  2136             _hex_to_int_ret:
0083+  2136 09            ret    
0084+  2137             
0085+  2137             ;-----------------------------------------------------------------------------
0086+  2137             ; GETCHAR
0087+  2137             ; char in ah
0088+  2137             ;-----------------------------------------------------------------------------
0089+  2137             getch:
0090+  2137 DB            push al
0091+  2138             getch_retry:
0092+  2138 19 01         mov al, 1
0093+  213A 05 03         syscall sys_io      ; receive in AH
0094+  213C E8            pop al
0095+  213D 09            ret
0096+  213E             
0097+  213E             ;-----------------------------------------------------------------------------
0098+  213E             ; PUTCHAR
0099+  213E             ; char in ah
0100+  213E             ;-----------------------------------------------------------------------------
0101+  213E             _putchar:
0102+  213E D7            push a
0103+  213F 19 00         mov al, 0
0104+  2141 05 03         syscall sys_io      ; char in AH
0105+  2143 E4            pop a
0106+  2144 09            ret
0107+  2145             
0108+  2145             ;-----------------------------------------------------------------------------
0109+  2145             ;; INPUT A STRING
0110+  2145             ;; terminates with null
0111+  2145             ;; pointer in D
0112+  2145             ;-----------------------------------------------------------------------------
0113+  2145             _gets:
0114+  2145 D7            push a
0115+  2146 DA            push d
0116+  2147             _gets_loop:
0117+  2147 19 01         mov al, 1
0118+  2149 05 03         syscall sys_io      ; receive in AH
0119+  214B B9 00         cmp al, 0        ; check error code (AL)
0120+  214D C6 47 21      je _gets_loop      ; if no char received, retry
0121+  2150             
0122+  2150 76 1B         cmp ah, 27
0123+  2152 C6 73 21      je _gets_ansi_esc
0124+  2155 76 0A         cmp ah, $0A        ; LF
0125+  2157 C6 DE 21      je _gets_end
0126+  215A 76 0D         cmp ah, $0D        ; CR
0127+  215C C6 DE 21      je _gets_end
0128+  215F 76 5C         cmp ah, $5C        ; '\\'
0129+  2161 C6 9F 21      je _gets_escape
0130+  2164               
0131+  2164 76 08         cmp ah, $08      ; check for backspace
0132+  2166 C6 6F 21      je _gets_backspace
0133+  2169             
0134+  2169 1A            mov al, ah
0135+  216A 3E            mov [d], al
0136+  216B 79            inc d
0137+  216C 0A 47 21      jmp _gets_loop
0138+  216F             _gets_backspace:
0139+  216F 7F            dec d
0140+  2170 0A 47 21      jmp _gets_loop
0141+  2173             _gets_ansi_esc:
0142+  2173 19 01         mov al, 1
0143+  2175 05 03         syscall sys_io        ; receive in AH without echo
0144+  2177 B9 00         cmp al, 0          ; check error code (AL)
0145+  2179 C6 73 21      je _gets_ansi_esc    ; if no char received, retry
0146+  217C 76 5B         cmp ah, '['
0147+  217E C7 47 21      jne _gets_loop
0148+  2181             _gets_ansi_esc_2:
0149+  2181 19 01         mov al, 1
0150+  2183 05 03         syscall sys_io          ; receive in AH without echo
0151+  2185 B9 00         cmp al, 0            ; check error code (AL)
0152+  2187 C6 81 21      je _gets_ansi_esc_2  ; if no char received, retry
0153+  218A 76 44         cmp ah, 'D'
0154+  218C C6 97 21      je _gets_left_arrow
0155+  218F 76 43         cmp ah, 'C'
0156+  2191 C6 9B 21      je _gets_right_arrow
0157+  2194 0A 47 21      jmp _gets_loop
0158+  2197             _gets_left_arrow:
0159+  2197 7F            dec d
0160+  2198 0A 47 21      jmp _gets_loop
0161+  219B             _gets_right_arrow:
0162+  219B 79            inc d
0163+  219C 0A 47 21      jmp _gets_loop
0164+  219F             _gets_escape:
0165+  219F 19 01         mov al, 1
0166+  21A1 05 03         syscall sys_io      ; receive in AH
0167+  21A3 B9 00         cmp al, 0        ; check error code (AL)
0168+  21A5 C6 9F 21      je _gets_escape      ; if no char received, retry
0169+  21A8 76 6E         cmp ah, 'n'
0170+  21AA C6 C9 21      je _gets_LF
0171+  21AD 76 72         cmp ah, 'r'
0172+  21AF C6 D0 21      je _gets_CR
0173+  21B2 76 30         cmp ah, '0'
0174+  21B4 C6 D7 21      je _gets_NULL
0175+  21B7 76 5C         cmp ah, $5C  ; '\'
0176+  21B9 C6 C2 21      je _gets_slash
0177+  21BC 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  21BD 3E            mov [d], al
0179+  21BE 79            inc d
0180+  21BF 0A 47 21      jmp _gets_loop
0181+  21C2             _gets_slash:
0182+  21C2 19 5C         mov al, $5C
0183+  21C4 3E            mov [d], al
0184+  21C5 79            inc d
0185+  21C6 0A 47 21      jmp _gets_loop
0186+  21C9             _gets_LF:
0187+  21C9 19 0A         mov al, $0A
0188+  21CB 3E            mov [d], al
0189+  21CC 79            inc d
0190+  21CD 0A 47 21      jmp _gets_loop
0191+  21D0             _gets_CR:
0192+  21D0 19 0D         mov al, $0D
0193+  21D2 3E            mov [d], al
0194+  21D3 79            inc d
0195+  21D4 0A 47 21      jmp _gets_loop
0196+  21D7             _gets_NULL:
0197+  21D7 19 00         mov al, $00
0198+  21D9 3E            mov [d], al
0199+  21DA 79            inc d
0200+  21DB 0A 47 21      jmp _gets_loop
0201+  21DE             _gets_end:
0202+  21DE 19 00         mov al, 0
0203+  21E0 3E            mov [d], al        ; terminate string
0204+  21E1 E7            pop d
0205+  21E2 E4            pop a
0206+  21E3 09            ret
0207+  21E4             
0208+  21E4             ;-----------------------------------------------------------------------------
0209+  21E4             ;; INPUT TEXT
0210+  21E4             ;; terminated with CTRL+D
0211+  21E4             ;; pointer in D
0212+  21E4             ;-----------------------------------------------------------------------------
0213+  21E4             _gettxt:
0214+  21E4 D7            push a
0215+  21E5 DA            push d
0216+  21E6             _gettxt_loop:
0217+  21E6 19 01         mov al, 1
0218+  21E8 05 03         syscall sys_io      ; receive in AH
0219+  21EA B9 00         cmp al, 0        ; check error code (AL)
0220+  21EC C6 E6 21      je _gettxt_loop    ; if no char received, retry
0221+  21EF 76 04         cmp ah, 4      ; EOT
0222+  21F1 C6 2F 22      je _gettxt_end
0223+  21F4 76 08         cmp ah, $08      ; check for backspace
0224+  21F6 C6 2B 22      je _gettxt_backspace
0225+  21F9 76 5C         cmp ah, $5C        ; '\'
0226+  21FB C6 04 22      je _gettxt_escape
0227+  21FE 1A            mov al, ah
0228+  21FF 3E            mov [d], al
0229+  2200 79            inc d
0230+  2201 0A E6 21      jmp _gettxt_loop
0231+  2204             _gettxt_escape:
0232+  2204 19 01         mov al, 1
0233+  2206 05 03         syscall sys_io      ; receive in AH
0234+  2208 B9 00         cmp al, 0        ; check error code (AL)
0235+  220A C6 04 22      je _gettxt_escape    ; if no char received, retry
0236+  220D 76 6E         cmp ah, 'n'
0237+  220F C6 1D 22      je _gettxt_LF
0238+  2212 76 72         cmp ah, 'r'
0239+  2214 C6 24 22      je _gettxt_CR
0240+  2217 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  2218 3E            mov [d], al
0242+  2219 79            inc d
0243+  221A 0A E6 21      jmp _gettxt_loop
0244+  221D             _gettxt_LF:
0245+  221D 19 0A         mov al, $0A
0246+  221F 3E            mov [d], al
0247+  2220 79            inc d
0248+  2221 0A E6 21      jmp _gettxt_loop
0249+  2224             _gettxt_CR:
0250+  2224 19 0D         mov al, $0D
0251+  2226 3E            mov [d], al
0252+  2227 79            inc d
0253+  2228 0A E6 21      jmp _gettxt_loop
0254+  222B             _gettxt_backspace:
0255+  222B 7F            dec d
0256+  222C 0A E6 21      jmp _gettxt_loop
0257+  222F             _gettxt_end:
0258+  222F 19 00         mov al, 0
0259+  2231 3E            mov [d], al        ; terminate string
0260+  2232 E7            pop d
0261+  2233 E4            pop a
0262+  2234 09            ret
0263+  2235             
0264+  2235             ;-----------------------------------------------------------------------------
0265+  2235             ; PRINT NEW LINE
0266+  2235             ;-----------------------------------------------------------------------------
0267+  2235             printnl:
0268+  2235 D7            push a
0269+  2236 10 00 0A      mov a, $0A00
0270+  2239 05 03         syscall sys_io
0271+  223B 10 00 0D      mov a, $0D00
0272+  223E 05 03         syscall sys_io
0273+  2240 E4            pop a
0274+  2241 09            ret
0275+  2242             
0276+  2242             ;-----------------------------------------------------------------------------
0277+  2242             ; _strtoint
0278+  2242             ; 4 digit hex string number in d
0279+  2242             ; integer returned in A
0280+  2242             ;-----------------------------------------------------------------------------
0281+  2242             _strtointx:
0282+  2242 D8            push b
0283+  2243 32            mov bl, [d]
0284+  2244 37            mov bh, bl
0285+  2245 33 01 00      mov bl, [d + 1]
0286+  2248 07 FC 20      call _atoi        ; convert to int in AL
0287+  224B 23            mov ah, al        ; move to AH
0288+  224C 33 02 00      mov bl, [d + 2]
0289+  224F 37            mov bh, bl
0290+  2250 33 03 00      mov bl, [d + 3]
0291+  2253 07 FC 20      call _atoi        ; convert to int in AL
0292+  2256 E5            pop b
0293+  2257 09            ret
0294+  2258             
0295+  2258             ;-----------------------------------------------------------------------------
0296+  2258             ; _strtoint
0297+  2258             ; 5 digit base10 string number in d
0298+  2258             ; integer returned in A
0299+  2258             ;-----------------------------------------------------------------------------
0300+  2258             _strtoint:
0301+  2258 E2            push si
0302+  2259 D8            push b
0303+  225A D9            push c
0304+  225B DA            push d
0305+  225C 07 9E 20      call _strlen      ; get string length in C
0306+  225F 7E            dec c
0307+  2260 FD 4E         mov si, d
0308+  2262 12            mov a, c
0309+  2263 FD 99         shl a
0310+  2265 3B D4 23      mov d, table_power
0311+  2268 59            add d, a
0312+  2269 38 00 00      mov c, 0
0313+  226C             _strtoint_L0:
0314+  226C F6            lodsb      ; load ASCII to al
0315+  226D B9 00         cmp al, 0
0316+  226F C6 82 22      je _strtoint_end
0317+  2272 6F 30         sub al, $30    ; make into integer
0318+  2274 22 00         mov ah, 0
0319+  2276 2A            mov b, [d]
0320+  2277 AC            mul a, b      ; result in B since it fits in 16bits
0321+  2278 11            mov a, b
0322+  2279 28            mov b, c
0323+  227A 54            add a, b
0324+  227B 39            mov c, a
0325+  227C 63 02 00      sub d, 2
0326+  227F 0A 6C 22      jmp _strtoint_L0
0327+  2282             _strtoint_end:
0328+  2282 12            mov a, c
0329+  2283 E7            pop d
0330+  2284 E6            pop c
0331+  2285 E5            pop b
0332+  2286 EF            pop si
0333+  2287 09            ret
0334+  2288             
0335+  2288             ;-----------------------------------------------------------------------------
0336+  2288             ; PRINT NULL TERMINATED STRING
0337+  2288             ; pointer in D
0338+  2288             ;-----------------------------------------------------------------------------
0339+  2288             _puts:
0340+  2288 D7            push a
0341+  2289 DA            push d
0342+  228A             _puts_L1:
0343+  228A 1E            mov al, [d]
0344+  228B B9 00         cmp al, 0
0345+  228D C6 99 22      jz _puts_END
0346+  2290 23            mov ah, al
0347+  2291 19 00         mov al, 0
0348+  2293 05 03         syscall sys_io
0349+  2295 79            inc d
0350+  2296 0A 8A 22      jmp _puts_L1
0351+  2299             _puts_END:
0352+  2299 E7            pop d
0353+  229A E4            pop a
0354+  229B 09            ret
0355+  229C             
0356+  229C             ;-----------------------------------------------------------------------------
0357+  229C             ; PRINT N SIZE STRING
0358+  229C             ; pointer in D
0359+  229C             ; size in C
0360+  229C             ;-----------------------------------------------------------------------------
0361+  229C             _putsn:
0362+  229C DB            push al
0363+  229D DA            push d
0364+  229E D9            push c
0365+  229F             _putsn_L0:
0366+  229F 1E            mov al, [d]
0367+  22A0 23            mov ah, al
0368+  22A1 19 00         mov al, 0
0369+  22A3 05 03         syscall sys_io
0370+  22A5 79            inc d
0371+  22A6 7E            dec c  
0372+  22A7 C2 00 00      cmp c, 0
0373+  22AA C7 9F 22      jne _putsn_L0
0374+  22AD             _putsn_end:
0375+  22AD E6            pop c
0376+  22AE E7            pop d
0377+  22AF E8            pop al
0378+  22B0 09            ret
0379+  22B1             
0380+  22B1             ;-----------------------------------------------------------------------------
0381+  22B1             ; print 16bit decimal number
0382+  22B1             ; input number in A
0383+  22B1             ;-----------------------------------------------------------------------------
0384+  22B1             print_u16d:
0385+  22B1 D7            push a
0386+  22B2 D8            push b
0387+  22B3 26 10 27      mov b, 10000
0388+  22B6 AE            div a, b      ; get 10000's coeff.
0389+  22B7 07 D9 22      call print_number
0390+  22BA 11            mov a, b
0391+  22BB 26 E8 03      mov b, 1000
0392+  22BE AE            div a, b      ; get 1000's coeff.
0393+  22BF 07 D9 22      call print_number
0394+  22C2 11            mov a, b
0395+  22C3 26 64 00      mov b, 100
0396+  22C6 AE            div a, b
0397+  22C7 07 D9 22      call print_number
0398+  22CA 11            mov a, b
0399+  22CB 26 0A 00      mov b, 10
0400+  22CE AE            div a, b
0401+  22CF 07 D9 22      call print_number
0402+  22D2 1B            mov al, bl      ; 1's coeff in bl
0403+  22D3 07 D9 22      call print_number
0404+  22D6 E5            pop b
0405+  22D7 E4            pop a
0406+  22D8 09            ret
0407+  22D9             
0408+  22D9             ;-----------------------------------------------------------------------------
0409+  22D9             ; print AL
0410+  22D9             ;-----------------------------------------------------------------------------
0411+  22D9             print_number:
0412+  22D9 6A 30         add al, $30
0413+  22DB 23            mov ah, al
0414+  22DC 07 3E 21      call _putchar
0415+  22DF 09            ret
0416+  22E0             
0417+  22E0             ;-----------------------------------------------------------------------------
0418+  22E0             ; PRINT 16BIT HEX INTEGER
0419+  22E0             ; integer value in reg B
0420+  22E0             ;-----------------------------------------------------------------------------
0421+  22E0             print_u16x:
0422+  22E0 D7            push a
0423+  22E1 D8            push b
0424+  22E2 DD            push bl
0425+  22E3 30            mov bl, bh
0426+  22E4 07 0C 21      call _itoa        ; convert bh to char in A
0427+  22E7 2F            mov bl, al        ; save al
0428+  22E8 19 00         mov al, 0
0429+  22EA 05 03         syscall sys_io        ; display AH
0430+  22EC 24            mov ah, bl        ; retrieve al
0431+  22ED 19 00         mov al, 0
0432+  22EF 05 03         syscall sys_io        ; display AL
0433+  22F1             
0434+  22F1 EA            pop bl
0435+  22F2 07 0C 21      call _itoa        ; convert bh to char in A
0436+  22F5 2F            mov bl, al        ; save al
0437+  22F6 19 00         mov al, 0
0438+  22F8 05 03         syscall sys_io        ; display AH
0439+  22FA 24            mov ah, bl        ; retrieve al
0440+  22FB 19 00         mov al, 0
0441+  22FD 05 03         syscall sys_io        ; display AL
0442+  22FF             
0443+  22FF E5            pop b
0444+  2300 E4            pop a
0445+  2301 09            ret
0446+  2302             
0447+  2302             ;-----------------------------------------------------------------------------
0448+  2302             ; INPUT 16BIT HEX INTEGER
0449+  2302             ; read 16bit integer into A
0450+  2302             ;-----------------------------------------------------------------------------
0451+  2302             scan_u16x:
0452+  2302 F8 10 00      enter 16
0453+  2305 D8            push b
0454+  2306 DA            push d
0455+  2307             
0456+  2307 FA F1 FF      lea d, [bp + -15]
0457+  230A 07 45 21      call _gets        ; get number
0458+  230D             
0459+  230D 32            mov bl, [d]
0460+  230E 37            mov bh, bl
0461+  230F 33 01 00      mov bl, [d + 1]
0462+  2312 07 FC 20      call _atoi        ; convert to int in AL
0463+  2315 23            mov ah, al        ; move to AH
0464+  2316             
0465+  2316 33 02 00      mov bl, [d + 2]
0466+  2319 37            mov bh, bl
0467+  231A 33 03 00      mov bl, [d + 3]
0468+  231D 07 FC 20      call _atoi        ; convert to int in AL
0469+  2320             
0470+  2320 E7            pop d
0471+  2321 E5            pop b
0472+  2322 F9            leave
0473+  2323 09            ret
0474+  2324             
0475+  2324             ;-----------------------------------------------------------------------------
0476+  2324             ; PRINT 8bit HEX INTEGER
0477+  2324             ; integer value in reg bl
0478+  2324             ;-----------------------------------------------------------------------------
0479+  2324             print_u8x:
0480+  2324 D7            push a
0481+  2325 DD            push bl
0482+  2326             
0483+  2326 07 0C 21      call _itoa        ; convert bl to char in A
0484+  2329 2F            mov bl, al        ; save al
0485+  232A 19 00         mov al, 0
0486+  232C 05 03         syscall sys_io        ; display AH
0487+  232E 24            mov ah, bl        ; retrieve al
0488+  232F 19 00         mov al, 0
0489+  2331 05 03         syscall sys_io        ; display AL
0490+  2333             
0491+  2333 EA            pop bl
0492+  2334 E4            pop a
0493+  2335 09            ret
0494+  2336             
0495+  2336             ;-----------------------------------------------------------------------------
0496+  2336             ; print 8bit decimal unsigned number
0497+  2336             ; input number in AL
0498+  2336             ;-----------------------------------------------------------------------------
0499+  2336             print_u8d:
0500+  2336 D7            push a
0501+  2337 D8            push b
0502+  2338             
0503+  2338 22 00         mov ah, 0
0504+  233A 26 64 00      mov b, 100
0505+  233D AE            div a, b
0506+  233E D8            push b      ; save remainder
0507+  233F B9 00         cmp al, 0
0508+  2341 C6 4B 23      je skip100
0509+  2344 6A 30         add al, $30
0510+  2346 23            mov ah, al
0511+  2347 19 00         mov al, 0
0512+  2349 05 03         syscall sys_io  ; print coeff
0513+  234B             skip100:
0514+  234B E4            pop a
0515+  234C 22 00         mov ah, 0
0516+  234E 26 0A 00      mov b, 10
0517+  2351 AE            div a, b
0518+  2352 D8            push b      ; save remainder
0519+  2353 B9 00         cmp al, 0
0520+  2355 C6 5F 23      je skip10
0521+  2358 6A 30         add al, $30
0522+  235A 23            mov ah, al
0523+  235B 19 00         mov al, 0
0524+  235D 05 03         syscall sys_io  ; print coeff
0525+  235F             skip10:
0526+  235F E4            pop a
0527+  2360 1B            mov al, bl
0528+  2361 6A 30         add al, $30
0529+  2363 23            mov ah, al
0530+  2364 19 00         mov al, 0
0531+  2366 05 03         syscall sys_io  ; print coeff
0532+  2368 E5            pop b
0533+  2369 E4            pop a
0534+  236A 09            ret
0535+  236B             
0536+  236B             ;-----------------------------------------------------------------------------
0537+  236B             ; INPUT 8BIT HEX INTEGER
0538+  236B             ; read 8bit integer into AL
0539+  236B             ;-----------------------------------------------------------------------------
0540+  236B             scan_u8x:
0541+  236B F8 04 00      enter 4
0542+  236E D8            push b
0543+  236F DA            push d
0544+  2370             
0545+  2370 FA FD FF      lea d, [bp + -3]
0546+  2373 07 45 21      call _gets        ; get number
0547+  2376             
0548+  2376 32            mov bl, [d]
0549+  2377 37            mov bh, bl
0550+  2378 33 01 00      mov bl, [d + 1]
0551+  237B 07 FC 20      call _atoi        ; convert to int in AL
0552+  237E             
0553+  237E E7            pop d
0554+  237F E5            pop b
0555+  2380 F9            leave
0556+  2381 09            ret
0557+  2382             
0558+  2382             ;-----------------------------------------------------------------------------
0559+  2382             ; input decimal number
0560+  2382             ; result in A
0561+  2382             ; 655'\0'
0562+  2382             ; low--------high
0563+  2382             ;-----------------------------------------------------------------------------
0564+  2382             scan_u16d:
0565+  2382 F8 08 00      enter 8
0566+  2385 E2            push si
0567+  2386 D8            push b
0568+  2387 D9            push c
0569+  2388 DA            push d
0570+  2389 FA F9 FF      lea d, [bp +- 7]
0571+  238C 07 45 21      call _gets
0572+  238F 07 9E 20      call _strlen      ; get string length in C
0573+  2392 7E            dec c
0574+  2393 FD 4E         mov si, d
0575+  2395 12            mov a, c
0576+  2396 FD 99         shl a
0577+  2398 3B D4 23      mov d, table_power
0578+  239B 59            add d, a
0579+  239C 38 00 00      mov c, 0
0580+  239F             mul_loop:
0581+  239F F6            lodsb      ; load ASCII to al
0582+  23A0 B9 00         cmp al, 0
0583+  23A2 C6 B5 23      je mul_exit
0584+  23A5 6F 30         sub al, $30    ; make into integer
0585+  23A7 22 00         mov ah, 0
0586+  23A9 2A            mov b, [d]
0587+  23AA AC            mul a, b      ; result in B since it fits in 16bits
0588+  23AB 11            mov a, b
0589+  23AC 28            mov b, c
0590+  23AD 54            add a, b
0591+  23AE 39            mov c, a
0592+  23AF 63 02 00      sub d, 2
0593+  23B2 0A 9F 23      jmp mul_loop
0594+  23B5             mul_exit:
0595+  23B5 12            mov a, c
0596+  23B6 E7            pop d
0597+  23B7 E6            pop c
0598+  23B8 E5            pop b
0599+  23B9 EF            pop si
0600+  23BA F9            leave
0601+  23BB 09            ret
0602+  23BC             
0603+  23BC 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  23C0 34 35 36 37 
0603+  23C4 38 39 41 42 
0603+  23C8 43 44 45 46 
0604+  23CC 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  23D0 1B 5B 48 00 
0605+  23D4             
0606+  23D4             table_power:
0607+  23D4 01 00         .dw 1
0608+  23D6 0A 00         .dw 10
0609+  23D8 64 00         .dw 100
0610+  23DA E8 03         .dw 1000
0611+  23DC 10 27         .dw 100004755   23DE             ; --- END INLINE ASM SEGMENT
4756   23DE             
4757   23DE F9            leave
4758   23DF 09            ret
4759   23E0             
4760   23E0             gcd:
4761   23E0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4762   23E3             ; if (b == 0) { 
4763   23E3             _if58_cond:
4764   23E3 FA 07 00      lea d, [bp + 7] ; $b
4765   23E6 2A            mov b, [d]
4766   23E7 38 00 00      mov c, 0
4767   23EA             ; --- START RELATIONAL
4768   23EA D7            push a
4769   23EB 11            mov a, b
4770   23EC 26 00 00      mov b, $0
4771   23EF 38 00 00      mov c, 0
4772   23F2 B0            cmp a, b
4773   23F3 FD 71         seq ; ==
4774   23F5 E4            pop a
4775   23F6             ; --- END RELATIONAL
4776   23F6 C0 00 00      cmp b, 0
4777   23F9 C6 08 24      je _if58_exit
4778   23FC             _if58_true:
4779   23FC             ; return a; 
4780   23FC FA 05 00      lea d, [bp + 5] ; $a
4781   23FF 2A            mov b, [d]
4782   2400 38 00 00      mov c, 0
4783   2403 F9            leave
4784   2404 09            ret
4785   2405 0A 08 24      jmp _if58_exit
4786   2408             _if58_exit:
4787   2408             ; return gcd(b, a % b); 
4788   2408             ; --- START FUNCTION CALL
4789   2408 FA 05 00      lea d, [bp + 5] ; $a
4790   240B 2A            mov b, [d]
4791   240C 38 00 00      mov c, 0
4792   240F             ; --- START FACTORS
4793   240F D7            push a
4794   2410 11            mov a, b
4795   2411 FA 07 00      lea d, [bp + 7] ; $b
4796   2414 2A            mov b, [d]
4797   2415 38 00 00      mov c, 0
4798   2418 AE            div a, b ; 
4799   2419 11            mov a, b
4800   241A 27            mov b, a
4801   241B E4            pop a
4802   241C             ; --- END FACTORS
4803   241C FD AB         swp b
4804   241E D8            push b
4805   241F FA 07 00      lea d, [bp + 7] ; $b
4806   2422 2A            mov b, [d]
4807   2423 38 00 00      mov c, 0
4808   2426 FD AB         swp b
4809   2428 D8            push b
4810   2429 07 E0 23      call gcd
4811   242C 51 04 00      add sp, 4
4812   242F             ; --- END FUNCTION CALL
4813   242F F9            leave
4814   2430 09            ret
4815   2431             
4816   2431             mod_exp:
4817   2431 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4818   2434             ; int result; 
4819   2434 52 02 00      sub sp, 2
4820   2437             ; result = 1; 
4821   2437 FA FF FF      lea d, [bp + -1] ; $result
4822   243A DA            push d
4823   243B 26 01 00      mov b, $1
4824   243E 38 00 00      mov c, 0
4825   2441 E7            pop d
4826   2442 FD 43         mov [d], b
4827   2444             ; while (exp > 0) { 
4828   2444             _while59_cond:
4829   2444 FA 07 00      lea d, [bp + 7] ; $exp
4830   2447 2A            mov b, [d]
4831   2448 38 00 00      mov c, 0
4832   244B             ; --- START RELATIONAL
4833   244B D7            push a
4834   244C 11            mov a, b
4835   244D 26 00 00      mov b, $0
4836   2450 38 00 00      mov c, 0
4837   2453 B0            cmp a, b
4838   2454 FD 7F         sgt ; >
4839   2456 E4            pop a
4840   2457             ; --- END RELATIONAL
4841   2457 C0 00 00      cmp b, 0
4842   245A C6 E6 24      je _while59_exit
4843   245D             _while59_block:
4844   245D             ; if (exp & 1) { 
4845   245D             _if60_cond:
4846   245D FA 07 00      lea d, [bp + 7] ; $exp
4847   2460 2A            mov b, [d]
4848   2461 38 00 00      mov c, 0
4849   2464 D7            push a
4850   2465 11            mov a, b
4851   2466 26 01 00      mov b, $1
4852   2469 38 00 00      mov c, 0
4853   246C FD 92         and b, a ; &
4854   246E E4            pop a
4855   246F C0 00 00      cmp b, 0
4856   2472 C6 A0 24      je _if60_exit
4857   2475             _if60_true:
4858   2475             ; result = (result * base) % mod; 
4859   2475 FA FF FF      lea d, [bp + -1] ; $result
4860   2478 DA            push d
4861   2479 FA FF FF      lea d, [bp + -1] ; $result
4862   247C 2A            mov b, [d]
4863   247D 38 00 00      mov c, 0
4864   2480             ; --- START FACTORS
4865   2480 D7            push a
4866   2481 11            mov a, b
4867   2482 FA 05 00      lea d, [bp + 5] ; $base
4868   2485 2A            mov b, [d]
4869   2486 38 00 00      mov c, 0
4870   2489 AC            mul a, b ; *
4871   248A 11            mov a, b
4872   248B 27            mov b, a
4873   248C E4            pop a
4874   248D             ; --- END FACTORS
4875   248D             ; --- START FACTORS
4876   248D D7            push a
4877   248E 11            mov a, b
4878   248F FA 09 00      lea d, [bp + 9] ; $mod
4879   2492 2A            mov b, [d]
4880   2493 38 00 00      mov c, 0
4881   2496 AE            div a, b ; 
4882   2497 11            mov a, b
4883   2498 27            mov b, a
4884   2499 E4            pop a
4885   249A             ; --- END FACTORS
4886   249A E7            pop d
4887   249B FD 43         mov [d], b
4888   249D 0A A0 24      jmp _if60_exit
4889   24A0             _if60_exit:
4890   24A0             ; exp = exp >> 1; 
4891   24A0 FA 07 00      lea d, [bp + 7] ; $exp
4892   24A3 DA            push d
4893   24A4 FA 07 00      lea d, [bp + 7] ; $exp
4894   24A7 2A            mov b, [d]
4895   24A8 38 00 00      mov c, 0
4896   24AB             ; --- START SHIFT
4897   24AB D7            push a
4898   24AC 11            mov a, b
4899   24AD 26 01 00      mov b, $1
4900   24B0 38 00 00      mov c, 0
4901   24B3 FD 39         mov c, b
4902   24B5 A5            ashr a, cl
4903   24B6 27            mov b, a
4904   24B7 E4            pop a
4905   24B8             ; --- END SHIFT
4906   24B8 E7            pop d
4907   24B9 FD 43         mov [d], b
4908   24BB             ; base = (base * base) % mod; 
4909   24BB FA 05 00      lea d, [bp + 5] ; $base
4910   24BE DA            push d
4911   24BF FA 05 00      lea d, [bp + 5] ; $base
4912   24C2 2A            mov b, [d]
4913   24C3 38 00 00      mov c, 0
4914   24C6             ; --- START FACTORS
4915   24C6 D7            push a
4916   24C7 11            mov a, b
4917   24C8 FA 05 00      lea d, [bp + 5] ; $base
4918   24CB 2A            mov b, [d]
4919   24CC 38 00 00      mov c, 0
4920   24CF AC            mul a, b ; *
4921   24D0 11            mov a, b
4922   24D1 27            mov b, a
4923   24D2 E4            pop a
4924   24D3             ; --- END FACTORS
4925   24D3             ; --- START FACTORS
4926   24D3 D7            push a
4927   24D4 11            mov a, b
4928   24D5 FA 09 00      lea d, [bp + 9] ; $mod
4929   24D8 2A            mov b, [d]
4930   24D9 38 00 00      mov c, 0
4931   24DC AE            div a, b ; 
4932   24DD 11            mov a, b
4933   24DE 27            mov b, a
4934   24DF E4            pop a
4935   24E0             ; --- END FACTORS
4936   24E0 E7            pop d
4937   24E1 FD 43         mov [d], b
4938   24E3 0A 44 24      jmp _while59_cond
4939   24E6             _while59_exit:
4940   24E6             ; return result; 
4941   24E6 FA FF FF      lea d, [bp + -1] ; $result
4942   24E9 2A            mov b, [d]
4943   24EA 38 00 00      mov c, 0
4944   24ED F9            leave
4945   24EE 09            ret
4946   24EF             
4947   24EF             find_e:
4948   24EF F8 00 00      enter 0 ; (push bp; mov bp, sp)
4949   24F2             ; int e; 
4950   24F2 52 02 00      sub sp, 2
4951   24F5             ; for (e = 2; e < phi; e++) { 
4952   24F5             _for61_init:
4953   24F5 FA FF FF      lea d, [bp + -1] ; $e
4954   24F8 DA            push d
4955   24F9 26 02 00      mov b, $2
4956   24FC 38 00 00      mov c, 0
4957   24FF E7            pop d
4958   2500 FD 43         mov [d], b
4959   2502             _for61_cond:
4960   2502 FA FF FF      lea d, [bp + -1] ; $e
4961   2505 2A            mov b, [d]
4962   2506 38 00 00      mov c, 0
4963   2509             ; --- START RELATIONAL
4964   2509 D7            push a
4965   250A 11            mov a, b
4966   250B FA 05 00      lea d, [bp + 5] ; $phi
4967   250E 2A            mov b, [d]
4968   250F 38 00 00      mov c, 0
4969   2512 B0            cmp a, b
4970   2513 FD 73         slt ; < (signed)
4971   2515 E4            pop a
4972   2516             ; --- END RELATIONAL
4973   2516 C0 00 00      cmp b, 0
4974   2519 C6 67 25      je _for61_exit
4975   251C             _for61_block:
4976   251C             ; if (gcd(e, phi) == 1) { 
4977   251C             _if62_cond:
4978   251C             ; --- START FUNCTION CALL
4979   251C FA 05 00      lea d, [bp + 5] ; $phi
4980   251F 2A            mov b, [d]
4981   2520 38 00 00      mov c, 0
4982   2523 FD AB         swp b
4983   2525 D8            push b
4984   2526 FA FF FF      lea d, [bp + -1] ; $e
4985   2529 2A            mov b, [d]
4986   252A 38 00 00      mov c, 0
4987   252D FD AB         swp b
4988   252F D8            push b
4989   2530 07 E0 23      call gcd
4990   2533 51 04 00      add sp, 4
4991   2536             ; --- END FUNCTION CALL
4992   2536             ; --- START RELATIONAL
4993   2536 D7            push a
4994   2537 11            mov a, b
4995   2538 26 01 00      mov b, $1
4996   253B 38 00 00      mov c, 0
4997   253E B0            cmp a, b
4998   253F FD 71         seq ; ==
4999   2541 E4            pop a
5000   2542             ; --- END RELATIONAL
5001   2542 C0 00 00      cmp b, 0
5002   2545 C6 54 25      je _if62_exit
5003   2548             _if62_true:
5004   2548             ; return e; 
5005   2548 FA FF FF      lea d, [bp + -1] ; $e
5006   254B 2A            mov b, [d]
5007   254C 38 00 00      mov c, 0
5008   254F F9            leave
5009   2550 09            ret
5010   2551 0A 54 25      jmp _if62_exit
5011   2554             _if62_exit:
5012   2554             _for61_update:
5013   2554 FA FF FF      lea d, [bp + -1] ; $e
5014   2557 2A            mov b, [d]
5015   2558 38 00 00      mov c, 0
5016   255B FD 77         inc b
5017   255D FA FF FF      lea d, [bp + -1] ; $e
5018   2560 FD 43         mov [d], b
5019   2562 FD 7D         dec b
5020   2564 0A 02 25      jmp _for61_cond
5021   2567             _for61_exit:
5022   2567             ; return 0; 
5023   2567 26 00 00      mov b, $0
5024   256A 38 00 00      mov c, 0
5025   256D F9            leave
5026   256E 09            ret
5027   256F             
5028   256F             find_d:
5029   256F F8 00 00      enter 0 ; (push bp; mov bp, sp)
5030   2572             ; int d; 
5031   2572 52 02 00      sub sp, 2
5032   2575             ; for (d = 2; d < phi; d++) { 
5033   2575             _for63_init:
5034   2575 FA FF FF      lea d, [bp + -1] ; $d
5035   2578 DA            push d
5036   2579 26 02 00      mov b, $2
5037   257C 38 00 00      mov c, 0
5038   257F E7            pop d
5039   2580 FD 43         mov [d], b
5040   2582             _for63_cond:
5041   2582 FA FF FF      lea d, [bp + -1] ; $d
5042   2585 2A            mov b, [d]
5043   2586 38 00 00      mov c, 0
5044   2589             ; --- START RELATIONAL
5045   2589 D7            push a
5046   258A 11            mov a, b
5047   258B FA 07 00      lea d, [bp + 7] ; $phi
5048   258E 2A            mov b, [d]
5049   258F 38 00 00      mov c, 0
5050   2592 B0            cmp a, b
5051   2593 FD 73         slt ; < (signed)
5052   2595 E4            pop a
5053   2596             ; --- END RELATIONAL
5054   2596 C0 00 00      cmp b, 0
5055   2599 C6 EE 25      je _for63_exit
5056   259C             _for63_block:
5057   259C             ; if ((d * e) % phi == 1) { 
5058   259C             _if64_cond:
5059   259C FA FF FF      lea d, [bp + -1] ; $d
5060   259F 2A            mov b, [d]
5061   25A0 38 00 00      mov c, 0
5062   25A3             ; --- START FACTORS
5063   25A3 D7            push a
5064   25A4 11            mov a, b
5065   25A5 FA 05 00      lea d, [bp + 5] ; $e
5066   25A8 2A            mov b, [d]
5067   25A9 38 00 00      mov c, 0
5068   25AC AC            mul a, b ; *
5069   25AD 11            mov a, b
5070   25AE 27            mov b, a
5071   25AF E4            pop a
5072   25B0             ; --- END FACTORS
5073   25B0             ; --- START FACTORS
5074   25B0 D7            push a
5075   25B1 11            mov a, b
5076   25B2 FA 07 00      lea d, [bp + 7] ; $phi
5077   25B5 2A            mov b, [d]
5078   25B6 38 00 00      mov c, 0
5079   25B9 AE            div a, b ; 
5080   25BA 11            mov a, b
5081   25BB 27            mov b, a
5082   25BC E4            pop a
5083   25BD             ; --- END FACTORS
5084   25BD             ; --- START RELATIONAL
5085   25BD D7            push a
5086   25BE 11            mov a, b
5087   25BF 26 01 00      mov b, $1
5088   25C2 38 00 00      mov c, 0
5089   25C5 B0            cmp a, b
5090   25C6 FD 71         seq ; ==
5091   25C8 E4            pop a
5092   25C9             ; --- END RELATIONAL
5093   25C9 C0 00 00      cmp b, 0
5094   25CC C6 DB 25      je _if64_exit
5095   25CF             _if64_true:
5096   25CF             ; return d; 
5097   25CF FA FF FF      lea d, [bp + -1] ; $d
5098   25D2 2A            mov b, [d]
5099   25D3 38 00 00      mov c, 0
5100   25D6 F9            leave
5101   25D7 09            ret
5102   25D8 0A DB 25      jmp _if64_exit
5103   25DB             _if64_exit:
5104   25DB             _for63_update:
5105   25DB FA FF FF      lea d, [bp + -1] ; $d
5106   25DE 2A            mov b, [d]
5107   25DF 38 00 00      mov c, 0
5108   25E2 FD 77         inc b
5109   25E4 FA FF FF      lea d, [bp + -1] ; $d
5110   25E7 FD 43         mov [d], b
5111   25E9 FD 7D         dec b
5112   25EB 0A 82 25      jmp _for63_cond
5113   25EE             _for63_exit:
5114   25EE             ; return 0; 
5115   25EE 26 00 00      mov b, $0
5116   25F1 38 00 00      mov c, 0
5117   25F4 F9            leave
5118   25F5 09            ret
5119   25F6             ; --- END TEXT SEGMENT
5120   25F6             
5121   25F6             ; --- BEGIN DATA SEGMENT
5122   25F6 00 00       st_fopen_max_handle: .dw 0
5123   25F8 50 75 62 6C _s0: .db "Public Key: ", 0
5123   25FC 69 63 20 4B 
5123   2600 65 79 3A 20 
5123   2604 00 
5124   2605 25 64 2C 20 _s1: .db "%d, ", 0
5124   2609 00 
5125   260A 25 64 0A 00 _s2: .db "%d\n", 0
5126   260E 50 72 69 76 _s3: .db "Private Key: ", 0
5126   2612 61 74 65 20 
5126   2616 4B 65 79 3A 
5126   261A 20 00 
5127   261C 45 6E 74 65 _s4: .db "Enter a string: ", 0
5127   2620 72 20 61 20 
5127   2624 73 74 72 69 
5127   2628 6E 67 3A 20 
5127   262C 00 
5128   262D 45 6E 63 72 _s5: .db "Encrypted text: ", 0
5128   2631 79 70 74 65 
5128   2635 64 20 74 65 
5128   2639 78 74 3A 20 
5128   263D 00 
5129   263E 25 64 20 00 _s6: .db "%d ", 0
5130   2642 0A 00       _s7: .db "\n", 0
5131   2644 44 65 63 72 _s8: .db "Decrypted text: ", 0
5131   2648 79 70 74 65 
5131   264C 64 20 74 65 
5131   2650 78 74 3A 20 
5131   2654 00 
5132   2655 55 6E 65 78 _s9: .db "Unexpected format in printf.", 0
5132   2659 70 65 63 74 
5132   265D 65 64 20 66 
5132   2661 6F 72 6D 61 
5132   2665 74 20 69 6E 
5132   2669 20 70 72 69 
5132   266D 6E 74 66 2E 
5132   2671 00 
5133   2672 45 72 72 6F _s10: .db "Error: Unknown argument type.\n", 0
5133   2676 72 3A 20 55 
5133   267A 6E 6B 6E 6F 
5133   267E 77 6E 20 61 
5133   2682 72 67 75 6D 
5133   2686 65 6E 74 20 
5133   268A 74 79 70 65 
5133   268E 2E 0A 00 
5134   2691 1B 5B 32 4A _s11: .db "\033[2J\033[H", 0
5134   2695 1B 5B 48 00 
5135   2699             
5136   2699 9B 26       _heap_top: .dw _heap
5137   269B 00          _heap: .db 0
5138   269C             ; --- END DATA SEGMENT
5139   269C             
5140   269C             .end
tasm: Number of errors = 0
