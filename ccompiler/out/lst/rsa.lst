0001   0000             ; --- FILENAME: programs/rsa.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; int p, q, n, phi, e, d; 
0011   0408 52 02 00      sub sp, 2
0012   040B 52 02 00      sub sp, 2
0013   040E 52 02 00      sub sp, 2
0014   0411 52 02 00      sub sp, 2
0015   0414 52 02 00      sub sp, 2
0016   0417 52 02 00      sub sp, 2
0017   041A             ; p = 13; 
0018   041A FA FF FF      lea d, [bp + -1] ; $p
0019   041D DA            push d
0020   041E FD 2E 0D 00   mov32 cb, $0000000d
0020   0422 00 00 
0021   0424 E7            pop d
0022   0425 FD 43         mov [d], b
0023   0427             ; q = 11; 
0024   0427 FA FD FF      lea d, [bp + -3] ; $q
0025   042A DA            push d
0026   042B FD 2E 0B 00   mov32 cb, $0000000b
0026   042F 00 00 
0027   0431 E7            pop d
0028   0432 FD 43         mov [d], b
0029   0434             ; n = p * q; 
0030   0434 FA FB FF      lea d, [bp + -5] ; $n
0031   0437 DA            push d
0032   0438 FA FF FF      lea d, [bp + -1] ; $p
0033   043B 2A            mov b, [d]
0034   043C 38 00 00      mov c, 0
0035   043F             ; --- START FACTORS
0036   043F D7            push a
0037   0440 11            mov a, b
0038   0441 FA FD FF      lea d, [bp + -3] ; $q
0039   0444 2A            mov b, [d]
0040   0445 38 00 00      mov c, 0
0041   0448 AC            mul a, b ; *
0042   0449 11            mov a, b
0043   044A 27            mov b, a
0044   044B E4            pop a
0045   044C             ; --- END FACTORS
0046   044C E7            pop d
0047   044D FD 43         mov [d], b
0048   044F             ; phi = (p - 1) * (q - 1); 
0049   044F FA F9 FF      lea d, [bp + -7] ; $phi
0050   0452 DA            push d
0051   0453 FA FF FF      lea d, [bp + -1] ; $p
0052   0456 2A            mov b, [d]
0053   0457 38 00 00      mov c, 0
0054   045A             ; --- START TERMS
0055   045A D7            push a
0056   045B 11            mov a, b
0057   045C FD 2E 01 00   mov32 cb, $00000001
0057   0460 00 00 
0058   0462 60            sub a, b
0059   0463 27            mov b, a
0060   0464 E4            pop a
0061   0465             ; --- END TERMS
0062   0465             ; --- START FACTORS
0063   0465 D7            push a
0064   0466 11            mov a, b
0065   0467 FA FD FF      lea d, [bp + -3] ; $q
0066   046A 2A            mov b, [d]
0067   046B 38 00 00      mov c, 0
0068   046E             ; --- START TERMS
0069   046E D7            push a
0070   046F 11            mov a, b
0071   0470 FD 2E 01 00   mov32 cb, $00000001
0071   0474 00 00 
0072   0476 60            sub a, b
0073   0477 27            mov b, a
0074   0478 E4            pop a
0075   0479             ; --- END TERMS
0076   0479 AC            mul a, b ; *
0077   047A 11            mov a, b
0078   047B 27            mov b, a
0079   047C E4            pop a
0080   047D             ; --- END FACTORS
0081   047D E7            pop d
0082   047E FD 43         mov [d], b
0083   0480             ; e = find_e(phi); 
0084   0480 FA F7 FF      lea d, [bp + -9] ; $e
0085   0483 DA            push d
0086   0484             ; --- START FUNCTION CALL
0087   0484 FA F9 FF      lea d, [bp + -7] ; $phi
0088   0487 2A            mov b, [d]
0089   0488 38 00 00      mov c, 0
0090   048B FD AB         swp b
0091   048D D8            push b
0092   048E 07 62 25      call find_e
0093   0491 51 02 00      add sp, 2
0094   0494             ; --- END FUNCTION CALL
0095   0494 E7            pop d
0096   0495 FD 43         mov [d], b
0097   0497             ; d = find_d(e, phi); 
0098   0497 FA F5 FF      lea d, [bp + -11] ; $d
0099   049A DA            push d
0100   049B             ; --- START FUNCTION CALL
0101   049B FA F9 FF      lea d, [bp + -7] ; $phi
0102   049E 2A            mov b, [d]
0103   049F 38 00 00      mov c, 0
0104   04A2 FD AB         swp b
0105   04A4 D8            push b
0106   04A5 FA F7 FF      lea d, [bp + -9] ; $e
0107   04A8 2A            mov b, [d]
0108   04A9 38 00 00      mov c, 0
0109   04AC FD AB         swp b
0110   04AE D8            push b
0111   04AF 07 E2 25      call find_d
0112   04B2 51 04 00      add sp, 4
0113   04B5             ; --- END FUNCTION CALL
0114   04B5 E7            pop d
0115   04B6 FD 43         mov [d], b
0116   04B8             ; printf("Public Key: "); 
0117   04B8             ; --- START FUNCTION CALL
0118   04B8 26 6B 26      mov b, _s0 ; "Public Key: "
0119   04BB FD AB         swp b
0120   04BD D8            push b
0121   04BE 07 49 0C      call printf
0122   04C1 51 02 00      add sp, 2
0123   04C4             ; --- END FUNCTION CALL
0124   04C4             ; printf("%d, ", n); 
0125   04C4             ; --- START FUNCTION CALL
0126   04C4 FA FB FF      lea d, [bp + -5] ; $n
0127   04C7 2A            mov b, [d]
0128   04C8 38 00 00      mov c, 0
0129   04CB FD AB         swp b
0130   04CD D8            push b
0131   04CE 26 78 26      mov b, _s1 ; "%d, "
0132   04D1 FD AB         swp b
0133   04D3 D8            push b
0134   04D4 07 49 0C      call printf
0135   04D7 51 04 00      add sp, 4
0136   04DA             ; --- END FUNCTION CALL
0137   04DA             ; printf("%d\n", e); 
0138   04DA             ; --- START FUNCTION CALL
0139   04DA FA F7 FF      lea d, [bp + -9] ; $e
0140   04DD 2A            mov b, [d]
0141   04DE 38 00 00      mov c, 0
0142   04E1 FD AB         swp b
0143   04E3 D8            push b
0144   04E4 26 7D 26      mov b, _s2 ; "%d\n"
0145   04E7 FD AB         swp b
0146   04E9 D8            push b
0147   04EA 07 49 0C      call printf
0148   04ED 51 04 00      add sp, 4
0149   04F0             ; --- END FUNCTION CALL
0150   04F0             ; print("Private Key: "); 
0151   04F0             ; --- START FUNCTION CALL
0152   04F0 26 81 26      mov b, _s3 ; "Private Key: "
0153   04F3 FD AB         swp b
0154   04F5 D8            push b
0155   04F6 07 F0 1F      call print
0156   04F9 51 02 00      add sp, 2
0157   04FC             ; --- END FUNCTION CALL
0158   04FC             ; printf("%d, ", n); 
0159   04FC             ; --- START FUNCTION CALL
0160   04FC FA FB FF      lea d, [bp + -5] ; $n
0161   04FF 2A            mov b, [d]
0162   0500 38 00 00      mov c, 0
0163   0503 FD AB         swp b
0164   0505 D8            push b
0165   0506 26 78 26      mov b, _s1 ; "%d, "
0166   0509 FD AB         swp b
0167   050B D8            push b
0168   050C 07 49 0C      call printf
0169   050F 51 04 00      add sp, 4
0170   0512             ; --- END FUNCTION CALL
0171   0512             ; printf("%d\n", d); 
0172   0512             ; --- START FUNCTION CALL
0173   0512 FA F5 FF      lea d, [bp + -11] ; $d
0174   0515 2A            mov b, [d]
0175   0516 38 00 00      mov c, 0
0176   0519 FD AB         swp b
0177   051B D8            push b
0178   051C 26 7D 26      mov b, _s2 ; "%d\n"
0179   051F FD AB         swp b
0180   0521 D8            push b
0181   0522 07 49 0C      call printf
0182   0525 51 04 00      add sp, 4
0183   0528             ; --- END FUNCTION CALL
0184   0528             ; char input_str[100]; 
0185   0528 52 64 00      sub sp, 100
0186   052B             ; printf("Enter a string: "); 
0187   052B             ; --- START FUNCTION CALL
0188   052B 26 8F 26      mov b, _s4 ; "Enter a string: "
0189   052E FD AB         swp b
0190   0530 D8            push b
0191   0531 07 49 0C      call printf
0192   0534 51 02 00      add sp, 2
0193   0537             ; --- END FUNCTION CALL
0194   0537             ; gets(input_str); 
0195   0537             ; --- START FUNCTION CALL
0196   0537 FA 91 FF      lea d, [bp + -111] ; $input_str
0197   053A 2D            mov b, d
0198   053B 38 00 00      mov c, 0
0199   053E FD AB         swp b
0200   0540 D8            push b
0201   0541 07 A1 17      call gets
0202   0544 51 02 00      add sp, 2
0203   0547             ; --- END FUNCTION CALL
0204   0547             ; int encrypted_chars[100]; 
0205   0547 52 C8 00      sub sp, 200
0206   054A             ; int encrypted_chars_len ; 
0207   054A 52 02 00      sub sp, 2
0208   054D             ; encrypted_chars_len = 0; 
0209   054D FA C7 FE      lea d, [bp + -313] ; $encrypted_chars_len
0210   0550 DA            push d
0211   0551 FD 2E 00 00   mov32 cb, $00000000
0211   0555 00 00 
0212   0557 E7            pop d
0213   0558 FD 43         mov [d], b
0214   055A             ; printf("Encrypted text: "); 
0215   055A             ; --- START FUNCTION CALL
0216   055A 26 A0 26      mov b, _s5 ; "Encrypted text: "
0217   055D FD AB         swp b
0218   055F D8            push b
0219   0560 07 49 0C      call printf
0220   0563 51 02 00      add sp, 2
0221   0566             ; --- END FUNCTION CALL
0222   0566             ; int i; 
0223   0566 52 02 00      sub sp, 2
0224   0569             ; for (i = 0; input_str[i] != '\0' && input_str[i] != '\n'; i++) { 
0225   0569             _for1_init:
0226   0569 FA C5 FE      lea d, [bp + -315] ; $i
0227   056C DA            push d
0228   056D FD 2E 00 00   mov32 cb, $00000000
0228   0571 00 00 
0229   0573 E7            pop d
0230   0574 FD 43         mov [d], b
0231   0576             _for1_cond:
0232   0576 FA 91 FF      lea d, [bp + -111] ; $input_str
0233   0579 D7            push a
0234   057A DA            push d
0235   057B FA C5 FE      lea d, [bp + -315] ; $i
0236   057E 2A            mov b, [d]
0237   057F 38 00 00      mov c, 0
0238   0582 E7            pop d
0239   0583 5A            add d, b
0240   0584 E4            pop a
0241   0585 32            mov bl, [d]
0242   0586 A7 00         mov bh, 0
0243   0588 38 00 00      mov c, 0
0244   058B             ; --- START RELATIONAL
0245   058B D7            push a
0246   058C 11            mov a, b
0247   058D FD 2E 00 00   mov32 cb, $00000000
0247   0591 00 00 
0248   0593 B0            cmp a, b
0249   0594 FD 72         sneq ; !=
0250   0596 E4            pop a
0251   0597             ; --- END RELATIONAL
0252   0597             ; --- START LOGICAL AND
0253   0597 D7            push a
0254   0598 11            mov a, b
0255   0599 FA 91 FF      lea d, [bp + -111] ; $input_str
0256   059C D7            push a
0257   059D DA            push d
0258   059E FA C5 FE      lea d, [bp + -315] ; $i
0259   05A1 2A            mov b, [d]
0260   05A2 38 00 00      mov c, 0
0261   05A5 E7            pop d
0262   05A6 5A            add d, b
0263   05A7 E4            pop a
0264   05A8 32            mov bl, [d]
0265   05A9 A7 00         mov bh, 0
0266   05AB 38 00 00      mov c, 0
0267   05AE             ; --- START RELATIONAL
0268   05AE D7            push a
0269   05AF 11            mov a, b
0270   05B0 FD 2E 0A 00   mov32 cb, $0000000a
0270   05B4 00 00 
0271   05B6 B0            cmp a, b
0272   05B7 FD 72         sneq ; !=
0273   05B9 E4            pop a
0274   05BA             ; --- END RELATIONAL
0275   05BA FD A7         sand a, b
0276   05BC E4            pop a
0277   05BD             ; --- END LOGICAL AND
0278   05BD C0 00 00      cmp b, 0
0279   05C0 C6 53 06      je _for1_exit
0280   05C3             _for1_block:
0281   05C3             ; encrypted_chars[i] = mod_exp(input_str[i], e, n); 
0282   05C3 FA C9 FE      lea d, [bp + -311] ; $encrypted_chars
0283   05C6 D7            push a
0284   05C7 DA            push d
0285   05C8 FA C5 FE      lea d, [bp + -315] ; $i
0286   05CB 2A            mov b, [d]
0287   05CC 38 00 00      mov c, 0
0288   05CF E7            pop d
0289   05D0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0290   05D4 E4            pop a
0291   05D5 DA            push d
0292   05D6             ; --- START FUNCTION CALL
0293   05D6 FA FB FF      lea d, [bp + -5] ; $n
0294   05D9 2A            mov b, [d]
0295   05DA 38 00 00      mov c, 0
0296   05DD FD AB         swp b
0297   05DF D8            push b
0298   05E0 FA F7 FF      lea d, [bp + -9] ; $e
0299   05E3 2A            mov b, [d]
0300   05E4 38 00 00      mov c, 0
0301   05E7 FD AB         swp b
0302   05E9 D8            push b
0303   05EA FA 91 FF      lea d, [bp + -111] ; $input_str
0304   05ED D7            push a
0305   05EE DA            push d
0306   05EF FA C5 FE      lea d, [bp + -315] ; $i
0307   05F2 2A            mov b, [d]
0308   05F3 38 00 00      mov c, 0
0309   05F6 E7            pop d
0310   05F7 5A            add d, b
0311   05F8 E4            pop a
0312   05F9 32            mov bl, [d]
0313   05FA A7 00         mov bh, 0
0314   05FC 38 00 00      mov c, 0
0315   05FF FD AB         swp b
0316   0601 D8            push b
0317   0602 07 A4 24      call mod_exp
0318   0605 51 06 00      add sp, 6
0319   0608             ; --- END FUNCTION CALL
0320   0608 E7            pop d
0321   0609 FD 43         mov [d], b
0322   060B             ; printf("%d ", encrypted_chars[i]); 
0323   060B             ; --- START FUNCTION CALL
0324   060B FA C9 FE      lea d, [bp + -311] ; $encrypted_chars
0325   060E D7            push a
0326   060F DA            push d
0327   0610 FA C5 FE      lea d, [bp + -315] ; $i
0328   0613 2A            mov b, [d]
0329   0614 38 00 00      mov c, 0
0330   0617 E7            pop d
0331   0618 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0332   061C E4            pop a
0333   061D 2A            mov b, [d]
0334   061E 38 00 00      mov c, 0
0335   0621 FD AB         swp b
0336   0623 D8            push b
0337   0624 26 B1 26      mov b, _s6 ; "%d "
0338   0627 FD AB         swp b
0339   0629 D8            push b
0340   062A 07 49 0C      call printf
0341   062D 51 04 00      add sp, 4
0342   0630             ; --- END FUNCTION CALL
0343   0630             ; encrypted_chars_len++; 
0344   0630 FA C7 FE      lea d, [bp + -313] ; $encrypted_chars_len
0345   0633 2A            mov b, [d]
0346   0634 38 00 00      mov c, 0
0347   0637 11            mov a, b
0348   0638 FD 77         inc b
0349   063A FA C7 FE      lea d, [bp + -313] ; $encrypted_chars_len
0350   063D FD 43         mov [d], b
0351   063F 27            mov b, a
0352   0640             _for1_update:
0353   0640 FA C5 FE      lea d, [bp + -315] ; $i
0354   0643 2A            mov b, [d]
0355   0644 38 00 00      mov c, 0
0356   0647 11            mov a, b
0357   0648 FD 77         inc b
0358   064A FA C5 FE      lea d, [bp + -315] ; $i
0359   064D FD 43         mov [d], b
0360   064F 27            mov b, a
0361   0650 0A 76 05      jmp _for1_cond
0362   0653             _for1_exit:
0363   0653             ; printf("\n"); 
0364   0653             ; --- START FUNCTION CALL
0365   0653 26 B5 26      mov b, _s7 ; "\n"
0366   0656 FD AB         swp b
0367   0658 D8            push b
0368   0659 07 49 0C      call printf
0369   065C 51 02 00      add sp, 2
0370   065F             ; --- END FUNCTION CALL
0371   065F             ; int decrypted_char; 
0372   065F 52 02 00      sub sp, 2
0373   0662             ; char c; 
0374   0662 52 01 00      sub sp, 1
0375   0665             ; printf("Decrypted text: "); 
0376   0665             ; --- START FUNCTION CALL
0377   0665 26 B7 26      mov b, _s8 ; "Decrypted text: "
0378   0668 FD AB         swp b
0379   066A D8            push b
0380   066B 07 49 0C      call printf
0381   066E 51 02 00      add sp, 2
0382   0671             ; --- END FUNCTION CALL
0383   0671             ; for (i = 0; i < encrypted_chars_len; i++) { 
0384   0671             _for2_init:
0385   0671 FA C5 FE      lea d, [bp + -315] ; $i
0386   0674 DA            push d
0387   0675 FD 2E 00 00   mov32 cb, $00000000
0387   0679 00 00 
0388   067B E7            pop d
0389   067C FD 43         mov [d], b
0390   067E             _for2_cond:
0391   067E FA C5 FE      lea d, [bp + -315] ; $i
0392   0681 2A            mov b, [d]
0393   0682 38 00 00      mov c, 0
0394   0685             ; --- START RELATIONAL
0395   0685 D7            push a
0396   0686 11            mov a, b
0397   0687 FA C7 FE      lea d, [bp + -313] ; $encrypted_chars_len
0398   068A 2A            mov b, [d]
0399   068B 38 00 00      mov c, 0
0400   068E B0            cmp a, b
0401   068F FD 73         slt ; < (signed)
0402   0691 E4            pop a
0403   0692             ; --- END RELATIONAL
0404   0692 C0 00 00      cmp b, 0
0405   0695 C6 03 07      je _for2_exit
0406   0698             _for2_block:
0407   0698             ; decrypted_char = mod_exp(encrypted_chars[i], d, n); 
0408   0698 FA C3 FE      lea d, [bp + -317] ; $decrypted_char
0409   069B DA            push d
0410   069C             ; --- START FUNCTION CALL
0411   069C FA FB FF      lea d, [bp + -5] ; $n
0412   069F 2A            mov b, [d]
0413   06A0 38 00 00      mov c, 0
0414   06A3 FD AB         swp b
0415   06A5 D8            push b
0416   06A6 FA F5 FF      lea d, [bp + -11] ; $d
0417   06A9 2A            mov b, [d]
0418   06AA 38 00 00      mov c, 0
0419   06AD FD AB         swp b
0420   06AF D8            push b
0421   06B0 FA C9 FE      lea d, [bp + -311] ; $encrypted_chars
0422   06B3 D7            push a
0423   06B4 DA            push d
0424   06B5 FA C5 FE      lea d, [bp + -315] ; $i
0425   06B8 2A            mov b, [d]
0426   06B9 38 00 00      mov c, 0
0427   06BC E7            pop d
0428   06BD FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0429   06C1 E4            pop a
0430   06C2 2A            mov b, [d]
0431   06C3 38 00 00      mov c, 0
0432   06C6 FD AB         swp b
0433   06C8 D8            push b
0434   06C9 07 A4 24      call mod_exp
0435   06CC 51 06 00      add sp, 6
0436   06CF             ; --- END FUNCTION CALL
0437   06CF E7            pop d
0438   06D0 FD 43         mov [d], b
0439   06D2             ; c = decrypted_char; 
0440   06D2 FA C2 FE      lea d, [bp + -318] ; $c
0441   06D5 DA            push d
0442   06D6 FA C3 FE      lea d, [bp + -317] ; $decrypted_char
0443   06D9 2A            mov b, [d]
0444   06DA 38 00 00      mov c, 0
0445   06DD E7            pop d
0446   06DE FD 3E         mov [d], bl
0447   06E0             ; putchar(c); 
0448   06E0             ; --- START FUNCTION CALL
0449   06E0 FA C2 FE      lea d, [bp + -318] ; $c
0450   06E3 32            mov bl, [d]
0451   06E4 A7 00         mov bh, 0
0452   06E6 38 00 00      mov c, 0
0453   06E9 DD            push bl
0454   06EA 07 A2 1F      call putchar
0455   06ED 51 01 00      add sp, 1
0456   06F0             ; --- END FUNCTION CALL
0457   06F0             _for2_update:
0458   06F0 FA C5 FE      lea d, [bp + -315] ; $i
0459   06F3 2A            mov b, [d]
0460   06F4 38 00 00      mov c, 0
0461   06F7 11            mov a, b
0462   06F8 FD 77         inc b
0463   06FA FA C5 FE      lea d, [bp + -315] ; $i
0464   06FD FD 43         mov [d], b
0465   06FF 27            mov b, a
0466   0700 0A 7E 06      jmp _for2_cond
0467   0703             _for2_exit:
0468   0703             ; printf("\n"); 
0469   0703             ; --- START FUNCTION CALL
0470   0703 26 B5 26      mov b, _s7 ; "\n"
0471   0706 FD AB         swp b
0472   0708 D8            push b
0473   0709 07 49 0C      call printf
0474   070C 51 02 00      add sp, 2
0475   070F             ; --- END FUNCTION CALL
0476   070F             ; return 0; 
0477   070F FD 2E 00 00   mov32 cb, $00000000
0477   0713 00 00 
0478   0715 F9            leave
0479   0716 05 0B         syscall sys_terminate_proc
0480   0718             
0481   0718             strcpy:
0482   0718 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0483   071B             ; char *psrc; 
0484   071B 52 02 00      sub sp, 2
0485   071E             ; char *pdest; 
0486   071E 52 02 00      sub sp, 2
0487   0721             ; psrc = src; 
0488   0721 FA FF FF      lea d, [bp + -1] ; $psrc
0489   0724 DA            push d
0490   0725 FA 07 00      lea d, [bp + 7] ; $src
0491   0728 2A            mov b, [d]
0492   0729 38 00 00      mov c, 0
0493   072C E7            pop d
0494   072D FD 43         mov [d], b
0495   072F             ; pdest = dest; 
0496   072F FA FD FF      lea d, [bp + -3] ; $pdest
0497   0732 DA            push d
0498   0733 FA 05 00      lea d, [bp + 5] ; $dest
0499   0736 2A            mov b, [d]
0500   0737 38 00 00      mov c, 0
0501   073A E7            pop d
0502   073B FD 43         mov [d], b
0503   073D             ; while(*psrc) *pdest++ = *psrc++; 
0504   073D             _while3_cond:
0505   073D FA FF FF      lea d, [bp + -1] ; $psrc
0506   0740 2A            mov b, [d]
0507   0741 38 00 00      mov c, 0
0508   0744 74            mov d, b
0509   0745 32            mov bl, [d]
0510   0746 A7 00         mov bh, 0
0511   0748 38 00 00      mov c, 0
0512   074B C0 00 00      cmp b, 0
0513   074E C6 7F 07      je _while3_exit
0514   0751             _while3_block:
0515   0751             ; *pdest++ = *psrc++; 
0516   0751 FA FD FF      lea d, [bp + -3] ; $pdest
0517   0754 2A            mov b, [d]
0518   0755 38 00 00      mov c, 0
0519   0758 FD 77         inc b
0520   075A FA FD FF      lea d, [bp + -3] ; $pdest
0521   075D FD 43         mov [d], b
0522   075F FD 7D         dec b
0523   0761 D8            push b
0524   0762 FA FF FF      lea d, [bp + -1] ; $psrc
0525   0765 2A            mov b, [d]
0526   0766 38 00 00      mov c, 0
0527   0769 FD 77         inc b
0528   076B FA FF FF      lea d, [bp + -1] ; $psrc
0529   076E FD 43         mov [d], b
0530   0770 FD 7D         dec b
0531   0772 74            mov d, b
0532   0773 32            mov bl, [d]
0533   0774 A7 00         mov bh, 0
0534   0776 38 00 00      mov c, 0
0535   0779 E7            pop d
0536   077A FD 3E         mov [d], bl
0537   077C 0A 3D 07      jmp _while3_cond
0538   077F             _while3_exit:
0539   077F             ; *pdest = '\0'; 
0540   077F FA FD FF      lea d, [bp + -3] ; $pdest
0541   0782 2A            mov b, [d]
0542   0783 38 00 00      mov c, 0
0543   0786 D8            push b
0544   0787 FD 2E 00 00   mov32 cb, $00000000
0544   078B 00 00 
0545   078D E7            pop d
0546   078E FD 3E         mov [d], bl
0547   0790 F9            leave
0548   0791 09            ret
0549   0792             
0550   0792             strcmp:
0551   0792 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0552   0795             ; while (*s1 && (*s1 == *s2)) { 
0553   0795             _while4_cond:
0554   0795 FA 05 00      lea d, [bp + 5] ; $s1
0555   0798 2A            mov b, [d]
0556   0799 38 00 00      mov c, 0
0557   079C 74            mov d, b
0558   079D 32            mov bl, [d]
0559   079E A7 00         mov bh, 0
0560   07A0 38 00 00      mov c, 0
0561   07A3             ; --- START LOGICAL AND
0562   07A3 D7            push a
0563   07A4 11            mov a, b
0564   07A5 FA 05 00      lea d, [bp + 5] ; $s1
0565   07A8 2A            mov b, [d]
0566   07A9 38 00 00      mov c, 0
0567   07AC 74            mov d, b
0568   07AD 32            mov bl, [d]
0569   07AE A7 00         mov bh, 0
0570   07B0 38 00 00      mov c, 0
0571   07B3             ; --- START RELATIONAL
0572   07B3 D7            push a
0573   07B4 11            mov a, b
0574   07B5 FA 07 00      lea d, [bp + 7] ; $s2
0575   07B8 2A            mov b, [d]
0576   07B9 38 00 00      mov c, 0
0577   07BC 74            mov d, b
0578   07BD 32            mov bl, [d]
0579   07BE A7 00         mov bh, 0
0580   07C0 38 00 00      mov c, 0
0581   07C3 B0            cmp a, b
0582   07C4 FD 71         seq ; ==
0583   07C6 E4            pop a
0584   07C7             ; --- END RELATIONAL
0585   07C7 FD A7         sand a, b
0586   07C9 E4            pop a
0587   07CA             ; --- END LOGICAL AND
0588   07CA C0 00 00      cmp b, 0
0589   07CD C6 F3 07      je _while4_exit
0590   07D0             _while4_block:
0591   07D0             ; s1++; 
0592   07D0 FA 05 00      lea d, [bp + 5] ; $s1
0593   07D3 2A            mov b, [d]
0594   07D4 38 00 00      mov c, 0
0595   07D7 FD 77         inc b
0596   07D9 FA 05 00      lea d, [bp + 5] ; $s1
0597   07DC FD 43         mov [d], b
0598   07DE FD 7D         dec b
0599   07E0             ; s2++; 
0600   07E0 FA 07 00      lea d, [bp + 7] ; $s2
0601   07E3 2A            mov b, [d]
0602   07E4 38 00 00      mov c, 0
0603   07E7 FD 77         inc b
0604   07E9 FA 07 00      lea d, [bp + 7] ; $s2
0605   07EC FD 43         mov [d], b
0606   07EE FD 7D         dec b
0607   07F0 0A 95 07      jmp _while4_cond
0608   07F3             _while4_exit:
0609   07F3             ; return *s1 - *s2; 
0610   07F3 FA 05 00      lea d, [bp + 5] ; $s1
0611   07F6 2A            mov b, [d]
0612   07F7 38 00 00      mov c, 0
0613   07FA 74            mov d, b
0614   07FB 32            mov bl, [d]
0615   07FC A7 00         mov bh, 0
0616   07FE 38 00 00      mov c, 0
0617   0801             ; --- START TERMS
0618   0801 D7            push a
0619   0802 11            mov a, b
0620   0803 FA 07 00      lea d, [bp + 7] ; $s2
0621   0806 2A            mov b, [d]
0622   0807 38 00 00      mov c, 0
0623   080A 74            mov d, b
0624   080B 32            mov bl, [d]
0625   080C A7 00         mov bh, 0
0626   080E 38 00 00      mov c, 0
0627   0811 60            sub a, b
0628   0812 27            mov b, a
0629   0813 E4            pop a
0630   0814             ; --- END TERMS
0631   0814 F9            leave
0632   0815 09            ret
0633   0816             
0634   0816             strncmp:
0635   0816 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0636   0819 F9            leave
0637   081A 09            ret
0638   081B             
0639   081B             strcat:
0640   081B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0641   081E             ; int dest_len; 
0642   081E 52 02 00      sub sp, 2
0643   0821             ; int i; 
0644   0821 52 02 00      sub sp, 2
0645   0824             ; dest_len = strlen(dest); 
0646   0824 FA FF FF      lea d, [bp + -1] ; $dest_len
0647   0827 DA            push d
0648   0828             ; --- START FUNCTION CALL
0649   0828 FA 05 00      lea d, [bp + 5] ; $dest
0650   082B 2A            mov b, [d]
0651   082C 38 00 00      mov c, 0
0652   082F FD AB         swp b
0653   0831 D8            push b
0654   0832 07 FE 08      call strlen
0655   0835 51 02 00      add sp, 2
0656   0838             ; --- END FUNCTION CALL
0657   0838 E7            pop d
0658   0839 FD 43         mov [d], b
0659   083B             ; for (i = 0; src[i] != 0; i=i+1) { 
0660   083B             _for5_init:
0661   083B FA FD FF      lea d, [bp + -3] ; $i
0662   083E DA            push d
0663   083F FD 2E 00 00   mov32 cb, $00000000
0663   0843 00 00 
0664   0845 E7            pop d
0665   0846 FD 43         mov [d], b
0666   0848             _for5_cond:
0667   0848 FA 07 00      lea d, [bp + 7] ; $src
0668   084B FD 2A         mov d, [d]
0669   084D D7            push a
0670   084E DA            push d
0671   084F FA FD FF      lea d, [bp + -3] ; $i
0672   0852 2A            mov b, [d]
0673   0853 38 00 00      mov c, 0
0674   0856 E7            pop d
0675   0857 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0676   085B E4            pop a
0677   085C 32            mov bl, [d]
0678   085D A7 00         mov bh, 0
0679   085F 38 00 00      mov c, 0
0680   0862             ; --- START RELATIONAL
0681   0862 D7            push a
0682   0863 11            mov a, b
0683   0864 FD 2E 00 00   mov32 cb, $00000000
0683   0868 00 00 
0684   086A B0            cmp a, b
0685   086B FD 72         sneq ; !=
0686   086D E4            pop a
0687   086E             ; --- END RELATIONAL
0688   086E C0 00 00      cmp b, 0
0689   0871 C6 CC 08      je _for5_exit
0690   0874             _for5_block:
0691   0874             ; dest[dest_len + i] = src[i]; 
0692   0874 FA 05 00      lea d, [bp + 5] ; $dest
0693   0877 FD 2A         mov d, [d]
0694   0879 D7            push a
0695   087A DA            push d
0696   087B FA FF FF      lea d, [bp + -1] ; $dest_len
0697   087E 2A            mov b, [d]
0698   087F 38 00 00      mov c, 0
0699   0882             ; --- START TERMS
0700   0882 D7            push a
0701   0883 11            mov a, b
0702   0884 FA FD FF      lea d, [bp + -3] ; $i
0703   0887 2A            mov b, [d]
0704   0888 38 00 00      mov c, 0
0705   088B 56            add b, a
0706   088C E4            pop a
0707   088D             ; --- END TERMS
0708   088D E7            pop d
0709   088E FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0710   0892 E4            pop a
0711   0893 DA            push d
0712   0894 FA 07 00      lea d, [bp + 7] ; $src
0713   0897 FD 2A         mov d, [d]
0714   0899 D7            push a
0715   089A DA            push d
0716   089B FA FD FF      lea d, [bp + -3] ; $i
0717   089E 2A            mov b, [d]
0718   089F 38 00 00      mov c, 0
0719   08A2 E7            pop d
0720   08A3 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0721   08A7 E4            pop a
0722   08A8 32            mov bl, [d]
0723   08A9 A7 00         mov bh, 0
0724   08AB 38 00 00      mov c, 0
0725   08AE E7            pop d
0726   08AF FD 3E         mov [d], bl
0727   08B1             _for5_update:
0728   08B1 FA FD FF      lea d, [bp + -3] ; $i
0729   08B4 DA            push d
0730   08B5 FA FD FF      lea d, [bp + -3] ; $i
0731   08B8 2A            mov b, [d]
0732   08B9 38 00 00      mov c, 0
0733   08BC             ; --- START TERMS
0734   08BC D7            push a
0735   08BD 11            mov a, b
0736   08BE FD 2E 01 00   mov32 cb, $00000001
0736   08C2 00 00 
0737   08C4 56            add b, a
0738   08C5 E4            pop a
0739   08C6             ; --- END TERMS
0740   08C6 E7            pop d
0741   08C7 FD 43         mov [d], b
0742   08C9 0A 48 08      jmp _for5_cond
0743   08CC             _for5_exit:
0744   08CC             ; dest[dest_len + i] = 0; 
0745   08CC FA 05 00      lea d, [bp + 5] ; $dest
0746   08CF FD 2A         mov d, [d]
0747   08D1 D7            push a
0748   08D2 DA            push d
0749   08D3 FA FF FF      lea d, [bp + -1] ; $dest_len
0750   08D6 2A            mov b, [d]
0751   08D7 38 00 00      mov c, 0
0752   08DA             ; --- START TERMS
0753   08DA D7            push a
0754   08DB 11            mov a, b
0755   08DC FA FD FF      lea d, [bp + -3] ; $i
0756   08DF 2A            mov b, [d]
0757   08E0 38 00 00      mov c, 0
0758   08E3 56            add b, a
0759   08E4 E4            pop a
0760   08E5             ; --- END TERMS
0761   08E5 E7            pop d
0762   08E6 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0763   08EA E4            pop a
0764   08EB DA            push d
0765   08EC FD 2E 00 00   mov32 cb, $00000000
0765   08F0 00 00 
0766   08F2 E7            pop d
0767   08F3 FD 3E         mov [d], bl
0768   08F5             ; return dest; 
0769   08F5 FA 05 00      lea d, [bp + 5] ; $dest
0770   08F8 2A            mov b, [d]
0771   08F9 38 00 00      mov c, 0
0772   08FC F9            leave
0773   08FD 09            ret
0774   08FE             
0775   08FE             strlen:
0776   08FE F8 00 00      enter 0 ; (push bp; mov bp, sp)
0777   0901             ; int length; 
0778   0901 52 02 00      sub sp, 2
0779   0904             ; length = 0; 
0780   0904 FA FF FF      lea d, [bp + -1] ; $length
0781   0907 DA            push d
0782   0908 FD 2E 00 00   mov32 cb, $00000000
0782   090C 00 00 
0783   090E E7            pop d
0784   090F FD 43         mov [d], b
0785   0911             ; while (str[length] != 0) { 
0786   0911             _while6_cond:
0787   0911 FA 05 00      lea d, [bp + 5] ; $str
0788   0914 FD 2A         mov d, [d]
0789   0916 D7            push a
0790   0917 DA            push d
0791   0918 FA FF FF      lea d, [bp + -1] ; $length
0792   091B 2A            mov b, [d]
0793   091C 38 00 00      mov c, 0
0794   091F E7            pop d
0795   0920 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0796   0924 E4            pop a
0797   0925 32            mov bl, [d]
0798   0926 A7 00         mov bh, 0
0799   0928 38 00 00      mov c, 0
0800   092B             ; --- START RELATIONAL
0801   092B D7            push a
0802   092C 11            mov a, b
0803   092D FD 2E 00 00   mov32 cb, $00000000
0803   0931 00 00 
0804   0933 B0            cmp a, b
0805   0934 FD 72         sneq ; !=
0806   0936 E4            pop a
0807   0937             ; --- END RELATIONAL
0808   0937 C0 00 00      cmp b, 0
0809   093A C6 50 09      je _while6_exit
0810   093D             _while6_block:
0811   093D             ; length++; 
0812   093D FA FF FF      lea d, [bp + -1] ; $length
0813   0940 2A            mov b, [d]
0814   0941 38 00 00      mov c, 0
0815   0944 11            mov a, b
0816   0945 FD 77         inc b
0817   0947 FA FF FF      lea d, [bp + -1] ; $length
0818   094A FD 43         mov [d], b
0819   094C 27            mov b, a
0820   094D 0A 11 09      jmp _while6_cond
0821   0950             _while6_exit:
0822   0950             ; return length; 
0823   0950 FA FF FF      lea d, [bp + -1] ; $length
0824   0953 2A            mov b, [d]
0825   0954 38 00 00      mov c, 0
0826   0957 F9            leave
0827   0958 09            ret
0828   0959             
0829   0959             exit:
0830   0959 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0831   095C             
0832   095C             ; --- BEGIN INLINE ASM SEGMENT
0833   095C 05 0B         syscall sys_terminate_proc
0834   095E             ; --- END INLINE ASM SEGMENT
0835   095E             
0836   095E F9            leave
0837   095F 09            ret
0838   0960             
0839   0960             memset:
0840   0960 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0841   0963             ; int i; 
0842   0963 52 02 00      sub sp, 2
0843   0966             ; for(i = 0; i < size; i++){ 
0844   0966             _for7_init:
0845   0966 FA FF FF      lea d, [bp + -1] ; $i
0846   0969 DA            push d
0847   096A FD 2E 00 00   mov32 cb, $00000000
0847   096E 00 00 
0848   0970 E7            pop d
0849   0971 FD 43         mov [d], b
0850   0973             _for7_cond:
0851   0973 FA FF FF      lea d, [bp + -1] ; $i
0852   0976 2A            mov b, [d]
0853   0977 38 00 00      mov c, 0
0854   097A             ; --- START RELATIONAL
0855   097A D7            push a
0856   097B 11            mov a, b
0857   097C FA 08 00      lea d, [bp + 8] ; $size
0858   097F 2A            mov b, [d]
0859   0980 38 00 00      mov c, 0
0860   0983 B0            cmp a, b
0861   0984 FD 73         slt ; < (signed)
0862   0986 E4            pop a
0863   0987             ; --- END RELATIONAL
0864   0987 C0 00 00      cmp b, 0
0865   098A C6 BF 09      je _for7_exit
0866   098D             _for7_block:
0867   098D             ; *(s+i) = c; 
0868   098D FA 05 00      lea d, [bp + 5] ; $s
0869   0990 2A            mov b, [d]
0870   0991 38 00 00      mov c, 0
0871   0994             ; --- START TERMS
0872   0994 D7            push a
0873   0995 11            mov a, b
0874   0996 FA FF FF      lea d, [bp + -1] ; $i
0875   0999 2A            mov b, [d]
0876   099A 38 00 00      mov c, 0
0877   099D 56            add b, a
0878   099E E4            pop a
0879   099F             ; --- END TERMS
0880   099F D8            push b
0881   09A0 FA 07 00      lea d, [bp + 7] ; $c
0882   09A3 32            mov bl, [d]
0883   09A4 A7 00         mov bh, 0
0884   09A6 38 00 00      mov c, 0
0885   09A9 E7            pop d
0886   09AA FD 3E         mov [d], bl
0887   09AC             _for7_update:
0888   09AC FA FF FF      lea d, [bp + -1] ; $i
0889   09AF 2A            mov b, [d]
0890   09B0 38 00 00      mov c, 0
0891   09B3 11            mov a, b
0892   09B4 FD 77         inc b
0893   09B6 FA FF FF      lea d, [bp + -1] ; $i
0894   09B9 FD 43         mov [d], b
0895   09BB 27            mov b, a
0896   09BC 0A 73 09      jmp _for7_cond
0897   09BF             _for7_exit:
0898   09BF             ; return s; 
0899   09BF FA 05 00      lea d, [bp + 5] ; $s
0900   09C2 2A            mov b, [d]
0901   09C3 38 00 00      mov c, 0
0902   09C6 F9            leave
0903   09C7 09            ret
0904   09C8             
0905   09C8             atoi:
0906   09C8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0907   09CB             ; int result = 0;  // Initialize result 
0908   09CB 52 02 00      sub sp, 2
0909   09CE             ; --- START LOCAL VAR INITIALIZATION
0910   09CE FA FF FF      lea d, [bp + -1] ; $result
0911   09D1 DA            push d
0912   09D2 FD 2E 00 00   mov32 cb, $00000000
0912   09D6 00 00 
0913   09D8 E7            pop d
0914   09D9 FD 43         mov [d], b
0915   09DB             ; --- END LOCAL VAR INITIALIZATION
0916   09DB             ; int sign = 1;    // Initialize sign as positive 
0917   09DB 52 02 00      sub sp, 2
0918   09DE             ; --- START LOCAL VAR INITIALIZATION
0919   09DE FA FD FF      lea d, [bp + -3] ; $sign
0920   09E1 DA            push d
0921   09E2 FD 2E 01 00   mov32 cb, $00000001
0921   09E6 00 00 
0922   09E8 E7            pop d
0923   09E9 FD 43         mov [d], b
0924   09EB             ; --- END LOCAL VAR INITIALIZATION
0925   09EB             ; while (*str == ' ') str++; 
0926   09EB             _while8_cond:
0927   09EB FA 05 00      lea d, [bp + 5] ; $str
0928   09EE 2A            mov b, [d]
0929   09EF 38 00 00      mov c, 0
0930   09F2 74            mov d, b
0931   09F3 32            mov bl, [d]
0932   09F4 A7 00         mov bh, 0
0933   09F6 38 00 00      mov c, 0
0934   09F9             ; --- START RELATIONAL
0935   09F9 D7            push a
0936   09FA 11            mov a, b
0937   09FB FD 2E 20 00   mov32 cb, $00000020
0937   09FF 00 00 
0938   0A01 B0            cmp a, b
0939   0A02 FD 71         seq ; ==
0940   0A04 E4            pop a
0941   0A05             ; --- END RELATIONAL
0942   0A05 C0 00 00      cmp b, 0
0943   0A08 C6 1E 0A      je _while8_exit
0944   0A0B             _while8_block:
0945   0A0B             ; str++; 
0946   0A0B FA 05 00      lea d, [bp + 5] ; $str
0947   0A0E 2A            mov b, [d]
0948   0A0F 38 00 00      mov c, 0
0949   0A12 FD 77         inc b
0950   0A14 FA 05 00      lea d, [bp + 5] ; $str
0951   0A17 FD 43         mov [d], b
0952   0A19 FD 7D         dec b
0953   0A1B 0A EB 09      jmp _while8_cond
0954   0A1E             _while8_exit:
0955   0A1E             ; if (*str == '-' || *str == '+') { 
0956   0A1E             _if9_cond:
0957   0A1E FA 05 00      lea d, [bp + 5] ; $str
0958   0A21 2A            mov b, [d]
0959   0A22 38 00 00      mov c, 0
0960   0A25 74            mov d, b
0961   0A26 32            mov bl, [d]
0962   0A27 A7 00         mov bh, 0
0963   0A29 38 00 00      mov c, 0
0964   0A2C             ; --- START RELATIONAL
0965   0A2C D7            push a
0966   0A2D 11            mov a, b
0967   0A2E FD 2E 2D 00   mov32 cb, $0000002d
0967   0A32 00 00 
0968   0A34 B0            cmp a, b
0969   0A35 FD 71         seq ; ==
0970   0A37 E4            pop a
0971   0A38             ; --- END RELATIONAL
0972   0A38             ; --- START LOGICAL OR
0973   0A38 D7            push a
0974   0A39 11            mov a, b
0975   0A3A FA 05 00      lea d, [bp + 5] ; $str
0976   0A3D 2A            mov b, [d]
0977   0A3E 38 00 00      mov c, 0
0978   0A41 74            mov d, b
0979   0A42 32            mov bl, [d]
0980   0A43 A7 00         mov bh, 0
0981   0A45 38 00 00      mov c, 0
0982   0A48             ; --- START RELATIONAL
0983   0A48 D7            push a
0984   0A49 11            mov a, b
0985   0A4A FD 2E 2B 00   mov32 cb, $0000002b
0985   0A4E 00 00 
0986   0A50 B0            cmp a, b
0987   0A51 FD 71         seq ; ==
0988   0A53 E4            pop a
0989   0A54             ; --- END RELATIONAL
0990   0A54 FD A8         sor a, b ; ||
0991   0A56 E4            pop a
0992   0A57             ; --- END LOGICAL OR
0993   0A57 C0 00 00      cmp b, 0
0994   0A5A C6 A2 0A      je _if9_exit
0995   0A5D             _if9_TRUE:
0996   0A5D             ; if (*str == '-') sign = -1; 
0997   0A5D             _if10_cond:
0998   0A5D FA 05 00      lea d, [bp + 5] ; $str
0999   0A60 2A            mov b, [d]
1000   0A61 38 00 00      mov c, 0
1001   0A64 74            mov d, b
1002   0A65 32            mov bl, [d]
1003   0A66 A7 00         mov bh, 0
1004   0A68 38 00 00      mov c, 0
1005   0A6B             ; --- START RELATIONAL
1006   0A6B D7            push a
1007   0A6C 11            mov a, b
1008   0A6D FD 2E 2D 00   mov32 cb, $0000002d
1008   0A71 00 00 
1009   0A73 B0            cmp a, b
1010   0A74 FD 71         seq ; ==
1011   0A76 E4            pop a
1012   0A77             ; --- END RELATIONAL
1013   0A77 C0 00 00      cmp b, 0
1014   0A7A C6 8F 0A      je _if10_exit
1015   0A7D             _if10_TRUE:
1016   0A7D             ; sign = -1; 
1017   0A7D FA FD FF      lea d, [bp + -3] ; $sign
1018   0A80 DA            push d
1019   0A81 FD 2E 01 00   mov32 cb, $00000001
1019   0A85 00 00 
1020   0A87 FD 97         neg b
1021   0A89 E7            pop d
1022   0A8A FD 43         mov [d], b
1023   0A8C 0A 8F 0A      jmp _if10_exit
1024   0A8F             _if10_exit:
1025   0A8F             ; str++; 
1026   0A8F FA 05 00      lea d, [bp + 5] ; $str
1027   0A92 2A            mov b, [d]
1028   0A93 38 00 00      mov c, 0
1029   0A96 FD 77         inc b
1030   0A98 FA 05 00      lea d, [bp + 5] ; $str
1031   0A9B FD 43         mov [d], b
1032   0A9D FD 7D         dec b
1033   0A9F 0A A2 0A      jmp _if9_exit
1034   0AA2             _if9_exit:
1035   0AA2             ; while (*str >= '0' && *str <= '9') { 
1036   0AA2             _while11_cond:
1037   0AA2 FA 05 00      lea d, [bp + 5] ; $str
1038   0AA5 2A            mov b, [d]
1039   0AA6 38 00 00      mov c, 0
1040   0AA9 74            mov d, b
1041   0AAA 32            mov bl, [d]
1042   0AAB A7 00         mov bh, 0
1043   0AAD 38 00 00      mov c, 0
1044   0AB0             ; --- START RELATIONAL
1045   0AB0 D7            push a
1046   0AB1 11            mov a, b
1047   0AB2 FD 2E 30 00   mov32 cb, $00000030
1047   0AB6 00 00 
1048   0AB8 B0            cmp a, b
1049   0AB9 FD 82         sgeu ; >= (unsigned)
1050   0ABB E4            pop a
1051   0ABC             ; --- END RELATIONAL
1052   0ABC             ; --- START LOGICAL AND
1053   0ABC D7            push a
1054   0ABD 11            mov a, b
1055   0ABE FA 05 00      lea d, [bp + 5] ; $str
1056   0AC1 2A            mov b, [d]
1057   0AC2 38 00 00      mov c, 0
1058   0AC5 74            mov d, b
1059   0AC6 32            mov bl, [d]
1060   0AC7 A7 00         mov bh, 0
1061   0AC9 38 00 00      mov c, 0
1062   0ACC             ; --- START RELATIONAL
1063   0ACC D7            push a
1064   0ACD 11            mov a, b
1065   0ACE FD 2E 39 00   mov32 cb, $00000039
1065   0AD2 00 00 
1066   0AD4 B0            cmp a, b
1067   0AD5 FD 76         sleu ; <= (unsigned)
1068   0AD7 E4            pop a
1069   0AD8             ; --- END RELATIONAL
1070   0AD8 FD A7         sand a, b
1071   0ADA E4            pop a
1072   0ADB             ; --- END LOGICAL AND
1073   0ADB C0 00 00      cmp b, 0
1074   0ADE C6 2B 0B      je _while11_exit
1075   0AE1             _while11_block:
1076   0AE1             ; result = result * 10 + (*str - '0'); 
1077   0AE1 FA FF FF      lea d, [bp + -1] ; $result
1078   0AE4 DA            push d
1079   0AE5 FA FF FF      lea d, [bp + -1] ; $result
1080   0AE8 2A            mov b, [d]
1081   0AE9 38 00 00      mov c, 0
1082   0AEC             ; --- START FACTORS
1083   0AEC D7            push a
1084   0AED 11            mov a, b
1085   0AEE FD 2E 0A 00   mov32 cb, $0000000a
1085   0AF2 00 00 
1086   0AF4 AC            mul a, b ; *
1087   0AF5 11            mov a, b
1088   0AF6 27            mov b, a
1089   0AF7 E4            pop a
1090   0AF8             ; --- END FACTORS
1091   0AF8             ; --- START TERMS
1092   0AF8 D7            push a
1093   0AF9 11            mov a, b
1094   0AFA FA 05 00      lea d, [bp + 5] ; $str
1095   0AFD 2A            mov b, [d]
1096   0AFE 38 00 00      mov c, 0
1097   0B01 74            mov d, b
1098   0B02 32            mov bl, [d]
1099   0B03 A7 00         mov bh, 0
1100   0B05 38 00 00      mov c, 0
1101   0B08             ; --- START TERMS
1102   0B08 D7            push a
1103   0B09 11            mov a, b
1104   0B0A FD 2E 30 00   mov32 cb, $00000030
1104   0B0E 00 00 
1105   0B10 60            sub a, b
1106   0B11 27            mov b, a
1107   0B12 E4            pop a
1108   0B13             ; --- END TERMS
1109   0B13 56            add b, a
1110   0B14 E4            pop a
1111   0B15             ; --- END TERMS
1112   0B15 E7            pop d
1113   0B16 FD 43         mov [d], b
1114   0B18             ; str++; 
1115   0B18 FA 05 00      lea d, [bp + 5] ; $str
1116   0B1B 2A            mov b, [d]
1117   0B1C 38 00 00      mov c, 0
1118   0B1F FD 77         inc b
1119   0B21 FA 05 00      lea d, [bp + 5] ; $str
1120   0B24 FD 43         mov [d], b
1121   0B26 FD 7D         dec b
1122   0B28 0A A2 0A      jmp _while11_cond
1123   0B2B             _while11_exit:
1124   0B2B             ; return sign * result; 
1125   0B2B FA FD FF      lea d, [bp + -3] ; $sign
1126   0B2E 2A            mov b, [d]
1127   0B2F 38 00 00      mov c, 0
1128   0B32             ; --- START FACTORS
1129   0B32 D7            push a
1130   0B33 11            mov a, b
1131   0B34 FA FF FF      lea d, [bp + -1] ; $result
1132   0B37 2A            mov b, [d]
1133   0B38 38 00 00      mov c, 0
1134   0B3B AC            mul a, b ; *
1135   0B3C 11            mov a, b
1136   0B3D 27            mov b, a
1137   0B3E E4            pop a
1138   0B3F             ; --- END FACTORS
1139   0B3F F9            leave
1140   0B40 09            ret
1141   0B41             
1142   0B41             rand:
1143   0B41 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1144   0B44             ; int  sec; 
1145   0B44 52 02 00      sub sp, 2
1146   0B47             
1147   0B47             ; --- BEGIN INLINE ASM SEGMENT
1148   0B47 19 00         mov al, 0
1149   0B49 05 01         syscall sys_rtc					
1150   0B4B 1A            mov al, ah
1151   0B4C FA FF FF      lea d, [bp + -1] ; $sec
1152   0B4F 1E            mov al, [d]
1153   0B50 22 00         mov ah, 0
1154   0B52             ; --- END INLINE ASM SEGMENT
1155   0B52             
1156   0B52             ; return sec; 
1157   0B52 FA FF FF      lea d, [bp + -1] ; $sec
1158   0B55 2A            mov b, [d]
1159   0B56 38 00 00      mov c, 0
1160   0B59 F9            leave
1161   0B5A 09            ret
1162   0B5B             
1163   0B5B             alloc:
1164   0B5B F8 00 00      enter 0 ; (push bp; mov bp, sp)
1165   0B5E             ; heap_top = heap_top + bytes; 
1166   0B5E 3B 0C 27      mov d, _heap_top ; $heap_top
1167   0B61 DA            push d
1168   0B62 3B 0C 27      mov d, _heap_top ; $heap_top
1169   0B65 2A            mov b, [d]
1170   0B66 38 00 00      mov c, 0
1171   0B69             ; --- START TERMS
1172   0B69 D7            push a
1173   0B6A 11            mov a, b
1174   0B6B FA 05 00      lea d, [bp + 5] ; $bytes
1175   0B6E 2A            mov b, [d]
1176   0B6F 38 00 00      mov c, 0
1177   0B72 56            add b, a
1178   0B73 E4            pop a
1179   0B74             ; --- END TERMS
1180   0B74 E7            pop d
1181   0B75 FD 43         mov [d], b
1182   0B77             ; return heap_top - bytes; 
1183   0B77 3B 0C 27      mov d, _heap_top ; $heap_top
1184   0B7A 2A            mov b, [d]
1185   0B7B 38 00 00      mov c, 0
1186   0B7E             ; --- START TERMS
1187   0B7E D7            push a
1188   0B7F 11            mov a, b
1189   0B80 FA 05 00      lea d, [bp + 5] ; $bytes
1190   0B83 2A            mov b, [d]
1191   0B84 38 00 00      mov c, 0
1192   0B87 60            sub a, b
1193   0B88 27            mov b, a
1194   0B89 E4            pop a
1195   0B8A             ; --- END TERMS
1196   0B8A F9            leave
1197   0B8B 09            ret
1198   0B8C             
1199   0B8C             free:
1200   0B8C F8 00 00      enter 0 ; (push bp; mov bp, sp)
1201   0B8F             ; return heap_top = heap_top - bytes; 
1202   0B8F 3B 0C 27      mov d, _heap_top ; $heap_top
1203   0B92 DA            push d
1204   0B93 3B 0C 27      mov d, _heap_top ; $heap_top
1205   0B96 2A            mov b, [d]
1206   0B97 38 00 00      mov c, 0
1207   0B9A             ; --- START TERMS
1208   0B9A D7            push a
1209   0B9B 11            mov a, b
1210   0B9C FA 05 00      lea d, [bp + 5] ; $bytes
1211   0B9F 2A            mov b, [d]
1212   0BA0 38 00 00      mov c, 0
1213   0BA3 60            sub a, b
1214   0BA4 27            mov b, a
1215   0BA5 E4            pop a
1216   0BA6             ; --- END TERMS
1217   0BA6 E7            pop d
1218   0BA7 FD 43         mov [d], b
1219   0BA9 F9            leave
1220   0BAA 09            ret
1221   0BAB             
1222   0BAB             fopen:
1223   0BAB F8 00 00      enter 0 ; (push bp; mov bp, sp)
1224   0BAE             ; FILE *fp; 
1225   0BAE 52 02 00      sub sp, 2
1226   0BB1             ; static int max_handle = 0; 
1227   0BB1 52 02 00      sub sp, 2
1228   0BB4             ; fp = alloc(sizeof(FILE)); 
1229   0BB4 FA FF FF      lea d, [bp + -1] ; $fp
1230   0BB7 DA            push d
1231   0BB8             ; --- START FUNCTION CALL
1232   0BB8 FD 2E 04 01   mov32 cb, 260
1232   0BBC 00 00 
1233   0BBE FD AB         swp b
1234   0BC0 D8            push b
1235   0BC1 07 5B 0B      call alloc
1236   0BC4 51 02 00      add sp, 2
1237   0BC7             ; --- END FUNCTION CALL
1238   0BC7 E7            pop d
1239   0BC8 FD 43         mov [d], b
1240   0BCA             ; strcpy(fp->filename, filename); 
1241   0BCA             ; --- START FUNCTION CALL
1242   0BCA FA 05 00      lea d, [bp + 5] ; $filename
1243   0BCD 2A            mov b, [d]
1244   0BCE 38 00 00      mov c, 0
1245   0BD1 FD AB         swp b
1246   0BD3 D8            push b
1247   0BD4 FA FF FF      lea d, [bp + -1] ; $fp
1248   0BD7 FD 2A         mov d, [d]
1249   0BD9 58 02 00      add d, 2
1250   0BDC 2D            mov b, d
1251   0BDD 38 00 00      mov c, 0
1252   0BE0 FD AB         swp b
1253   0BE2 D8            push b
1254   0BE3 07 18 07      call strcpy
1255   0BE6 51 04 00      add sp, 4
1256   0BE9             ; --- END FUNCTION CALL
1257   0BE9             ; fp->handle = max_handle; 
1258   0BE9 FA FF FF      lea d, [bp + -1] ; $fp
1259   0BEC FD 2A         mov d, [d]
1260   0BEE 58 00 00      add d, 0
1261   0BF1 DA            push d
1262   0BF2 3B 69 26      mov d, st_fopen_max_handle ; static max_handle
1263   0BF5 2A            mov b, [d]
1264   0BF6 38 00 00      mov c, 0
1265   0BF9 E7            pop d
1266   0BFA FD 43         mov [d], b
1267   0BFC             ; fp->mode = mode; 
1268   0BFC FA FF FF      lea d, [bp + -1] ; $fp
1269   0BFF FD 2A         mov d, [d]
1270   0C01 58 02 01      add d, 258
1271   0C04 DA            push d
1272   0C05 FA 07 00      lea d, [bp + 7] ; $mode
1273   0C08 32            mov bl, [d]
1274   0C09 A7 00         mov bh, 0
1275   0C0B 38 00 00      mov c, 0
1276   0C0E E7            pop d
1277   0C0F FD 3E         mov [d], bl
1278   0C11             ; fp->loc = 0; 
1279   0C11 FA FF FF      lea d, [bp + -1] ; $fp
1280   0C14 FD 2A         mov d, [d]
1281   0C16 58 03 01      add d, 259
1282   0C19 DA            push d
1283   0C1A FD 2E 00 00   mov32 cb, $00000000
1283   0C1E 00 00 
1284   0C20 E7            pop d
1285   0C21 FD 3E         mov [d], bl
1286   0C23             ; max_handle++; 
1287   0C23 3B 69 26      mov d, st_fopen_max_handle ; static max_handle
1288   0C26 2A            mov b, [d]
1289   0C27 38 00 00      mov c, 0
1290   0C2A 11            mov a, b
1291   0C2B FD 77         inc b
1292   0C2D 3B 69 26      mov d, st_fopen_max_handle ; static max_handle
1293   0C30 FD 43         mov [d], b
1294   0C32 27            mov b, a
1295   0C33 F9            leave
1296   0C34 09            ret
1297   0C35             
1298   0C35             fclose:
1299   0C35 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1300   0C38             ; free(sizeof(FILE)); 
1301   0C38             ; --- START FUNCTION CALL
1302   0C38 FD 2E 04 01   mov32 cb, 260
1302   0C3C 00 00 
1303   0C3E FD AB         swp b
1304   0C40 D8            push b
1305   0C41 07 8C 0B      call free
1306   0C44 51 02 00      add sp, 2
1307   0C47             ; --- END FUNCTION CALL
1308   0C47 F9            leave
1309   0C48 09            ret
1310   0C49             
1311   0C49             printf:
1312   0C49 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1313   0C4C             ; char *p, *format_p; 
1314   0C4C 52 02 00      sub sp, 2
1315   0C4F 52 02 00      sub sp, 2
1316   0C52             ; format_p = format; 
1317   0C52 FA FD FF      lea d, [bp + -3] ; $format_p
1318   0C55 DA            push d
1319   0C56 FA 05 00      lea d, [bp + 5] ; $format
1320   0C59 2A            mov b, [d]
1321   0C5A 38 00 00      mov c, 0
1322   0C5D E7            pop d
1323   0C5E FD 43         mov [d], b
1324   0C60             ; p = &format + 2; 
1325   0C60 FA FF FF      lea d, [bp + -1] ; $p
1326   0C63 DA            push d
1327   0C64 FA 05 00      lea d, [bp + 5] ; $format
1328   0C67 2D            mov b, d
1329   0C68             ; --- START TERMS
1330   0C68 D7            push a
1331   0C69 11            mov a, b
1332   0C6A FD 2E 02 00   mov32 cb, $00000002
1332   0C6E 00 00 
1333   0C70 56            add b, a
1334   0C71 E4            pop a
1335   0C72             ; --- END TERMS
1336   0C72 E7            pop d
1337   0C73 FD 43         mov [d], b
1338   0C75             ; for(;;){ 
1339   0C75             _for12_init:
1340   0C75             _for12_cond:
1341   0C75             _for12_block:
1342   0C75             ; if(!*format_p) break; 
1343   0C75             _if13_cond:
1344   0C75 FA FD FF      lea d, [bp + -3] ; $format_p
1345   0C78 2A            mov b, [d]
1346   0C79 38 00 00      mov c, 0
1347   0C7C 74            mov d, b
1348   0C7D 32            mov bl, [d]
1349   0C7E A7 00         mov bh, 0
1350   0C80 38 00 00      mov c, 0
1351   0C83 C0 00 00      cmp b, 0
1352   0C86 FD 71         seq ; !
1353   0C88 C0 00 00      cmp b, 0
1354   0C8B C6 94 0C      je _if13_else
1355   0C8E             _if13_TRUE:
1356   0C8E             ; break; 
1357   0C8E 0A 25 0F      jmp _for12_exit ; for break
1358   0C91 0A 22 0F      jmp _if13_exit
1359   0C94             _if13_else:
1360   0C94             ; if(*format_p == '%'){ 
1361   0C94             _if14_cond:
1362   0C94 FA FD FF      lea d, [bp + -3] ; $format_p
1363   0C97 2A            mov b, [d]
1364   0C98 38 00 00      mov c, 0
1365   0C9B 74            mov d, b
1366   0C9C 32            mov bl, [d]
1367   0C9D A7 00         mov bh, 0
1368   0C9F 38 00 00      mov c, 0
1369   0CA2             ; --- START RELATIONAL
1370   0CA2 D7            push a
1371   0CA3 11            mov a, b
1372   0CA4 FD 2E 25 00   mov32 cb, $00000025
1372   0CA8 00 00 
1373   0CAA B0            cmp a, b
1374   0CAB FD 71         seq ; ==
1375   0CAD E4            pop a
1376   0CAE             ; --- END RELATIONAL
1377   0CAE C0 00 00      cmp b, 0
1378   0CB1 C6 FD 0E      je _if14_else
1379   0CB4             _if14_TRUE:
1380   0CB4             ; format_p++; 
1381   0CB4 FA FD FF      lea d, [bp + -3] ; $format_p
1382   0CB7 2A            mov b, [d]
1383   0CB8 38 00 00      mov c, 0
1384   0CBB FD 77         inc b
1385   0CBD FA FD FF      lea d, [bp + -3] ; $format_p
1386   0CC0 FD 43         mov [d], b
1387   0CC2 FD 7D         dec b
1388   0CC4             ; switch(*format_p){ 
1389   0CC4             _switch15_expr:
1390   0CC4 FA FD FF      lea d, [bp + -3] ; $format_p
1391   0CC7 2A            mov b, [d]
1392   0CC8 38 00 00      mov c, 0
1393   0CCB 74            mov d, b
1394   0CCC 32            mov bl, [d]
1395   0CCD A7 00         mov bh, 0
1396   0CCF 38 00 00      mov c, 0
1397   0CD2             _switch15_comparisons:
1398   0CD2 C1 6C         cmp bl, $6c
1399   0CD4 C6 00 0D      je _switch15_case0
1400   0CD7 C1 4C         cmp bl, $4c
1401   0CD9 C6 00 0D      je _switch15_case1
1402   0CDC C1 64         cmp bl, $64
1403   0CDE C6 10 0E      je _switch15_case2
1404   0CE1 C1 69         cmp bl, $69
1405   0CE3 C6 10 0E      je _switch15_case3
1406   0CE6 C1 75         cmp bl, $75
1407   0CE8 C6 40 0E      je _switch15_case4
1408   0CEB C1 78         cmp bl, $78
1409   0CED C6 70 0E      je _switch15_case5
1410   0CF0 C1 63         cmp bl, $63
1411   0CF2 C6 94 0E      je _switch15_case6
1412   0CF5 C1 73         cmp bl, $73
1413   0CF7 C6 B9 0E      je _switch15_case7
1414   0CFA 0A DE 0E      jmp _switch15_default
1415   0CFD 0A EA 0E      jmp _switch15_exit
1416   0D00             _switch15_case0:
1417   0D00             _switch15_case1:
1418   0D00             ; format_p++; 
1419   0D00 FA FD FF      lea d, [bp + -3] ; $format_p
1420   0D03 2A            mov b, [d]
1421   0D04 38 00 00      mov c, 0
1422   0D07 FD 77         inc b
1423   0D09 FA FD FF      lea d, [bp + -3] ; $format_p
1424   0D0C FD 43         mov [d], b
1425   0D0E FD 7D         dec b
1426   0D10             ; if(*format_p == 'd' || *format_p == 'i') 
1427   0D10             _if16_cond:
1428   0D10 FA FD FF      lea d, [bp + -3] ; $format_p
1429   0D13 2A            mov b, [d]
1430   0D14 38 00 00      mov c, 0
1431   0D17 74            mov d, b
1432   0D18 32            mov bl, [d]
1433   0D19 A7 00         mov bh, 0
1434   0D1B 38 00 00      mov c, 0
1435   0D1E             ; --- START RELATIONAL
1436   0D1E D7            push a
1437   0D1F 11            mov a, b
1438   0D20 FD 2E 64 00   mov32 cb, $00000064
1438   0D24 00 00 
1439   0D26 B0            cmp a, b
1440   0D27 FD 71         seq ; ==
1441   0D29 E4            pop a
1442   0D2A             ; --- END RELATIONAL
1443   0D2A             ; --- START LOGICAL OR
1444   0D2A D7            push a
1445   0D2B 11            mov a, b
1446   0D2C FA FD FF      lea d, [bp + -3] ; $format_p
1447   0D2F 2A            mov b, [d]
1448   0D30 38 00 00      mov c, 0
1449   0D33 74            mov d, b
1450   0D34 32            mov bl, [d]
1451   0D35 A7 00         mov bh, 0
1452   0D37 38 00 00      mov c, 0
1453   0D3A             ; --- START RELATIONAL
1454   0D3A D7            push a
1455   0D3B 11            mov a, b
1456   0D3C FD 2E 69 00   mov32 cb, $00000069
1456   0D40 00 00 
1457   0D42 B0            cmp a, b
1458   0D43 FD 71         seq ; ==
1459   0D45 E4            pop a
1460   0D46             ; --- END RELATIONAL
1461   0D46 FD A8         sor a, b ; ||
1462   0D48 E4            pop a
1463   0D49             ; --- END LOGICAL OR
1464   0D49 C0 00 00      cmp b, 0
1465   0D4C C6 6D 0D      je _if16_else
1466   0D4F             _if16_TRUE:
1467   0D4F             ; print_signed_long(*(long *)p); 
1468   0D4F             ; --- START FUNCTION CALL
1469   0D4F FA FF FF      lea d, [bp + -1] ; $p
1470   0D52 2A            mov b, [d]
1471   0D53 38 00 00      mov c, 0
1472   0D56 74            mov d, b
1473   0D57 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1474   0D5A FD 39         mov c, b ; And place it into C
1475   0D5C 2A            mov b, [d] ; Lower Word in B
1476   0D5D 12            mov a, c
1477   0D5E FD AA         swp a
1478   0D60 D7            push a
1479   0D61 FD AB         swp b
1480   0D63 D8            push b
1481   0D64 07 F7 18      call print_signed_long
1482   0D67 51 04 00      add sp, 4
1483   0D6A             ; --- END FUNCTION CALL
1484   0D6A 0A F5 0D      jmp _if16_exit
1485   0D6D             _if16_else:
1486   0D6D             ; if(*format_p == 'u') 
1487   0D6D             _if17_cond:
1488   0D6D FA FD FF      lea d, [bp + -3] ; $format_p
1489   0D70 2A            mov b, [d]
1490   0D71 38 00 00      mov c, 0
1491   0D74 74            mov d, b
1492   0D75 32            mov bl, [d]
1493   0D76 A7 00         mov bh, 0
1494   0D78 38 00 00      mov c, 0
1495   0D7B             ; --- START RELATIONAL
1496   0D7B D7            push a
1497   0D7C 11            mov a, b
1498   0D7D FD 2E 75 00   mov32 cb, $00000075
1498   0D81 00 00 
1499   0D83 B0            cmp a, b
1500   0D84 FD 71         seq ; ==
1501   0D86 E4            pop a
1502   0D87             ; --- END RELATIONAL
1503   0D87 C0 00 00      cmp b, 0
1504   0D8A C6 AB 0D      je _if17_else
1505   0D8D             _if17_TRUE:
1506   0D8D             ; print_unsigned_long(*(unsigned long *)p); 
1507   0D8D             ; --- START FUNCTION CALL
1508   0D8D FA FF FF      lea d, [bp + -1] ; $p
1509   0D90 2A            mov b, [d]
1510   0D91 38 00 00      mov c, 0
1511   0D94 74            mov d, b
1512   0D95 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1513   0D98 FD 39         mov c, b ; And place it into C
1514   0D9A 2A            mov b, [d] ; Lower Word in B
1515   0D9B 12            mov a, c
1516   0D9C FD AA         swp a
1517   0D9E D7            push a
1518   0D9F FD AB         swp b
1519   0DA1 D8            push b
1520   0DA2 07 66 1A      call print_unsigned_long
1521   0DA5 51 04 00      add sp, 4
1522   0DA8             ; --- END FUNCTION CALL
1523   0DA8 0A F5 0D      jmp _if17_exit
1524   0DAB             _if17_else:
1525   0DAB             ; if(*format_p == 'x') 
1526   0DAB             _if18_cond:
1527   0DAB FA FD FF      lea d, [bp + -3] ; $format_p
1528   0DAE 2A            mov b, [d]
1529   0DAF 38 00 00      mov c, 0
1530   0DB2 74            mov d, b
1531   0DB3 32            mov bl, [d]
1532   0DB4 A7 00         mov bh, 0
1533   0DB6 38 00 00      mov c, 0
1534   0DB9             ; --- START RELATIONAL
1535   0DB9 D7            push a
1536   0DBA 11            mov a, b
1537   0DBB FD 2E 78 00   mov32 cb, $00000078
1537   0DBF 00 00 
1538   0DC1 B0            cmp a, b
1539   0DC2 FD 71         seq ; ==
1540   0DC4 E4            pop a
1541   0DC5             ; --- END RELATIONAL
1542   0DC5 C0 00 00      cmp b, 0
1543   0DC8 C6 E9 0D      je _if18_else
1544   0DCB             _if18_TRUE:
1545   0DCB             ; printx32(*(long int *)p); 
1546   0DCB             ; --- START FUNCTION CALL
1547   0DCB FA FF FF      lea d, [bp + -1] ; $p
1548   0DCE 2A            mov b, [d]
1549   0DCF 38 00 00      mov c, 0
1550   0DD2 74            mov d, b
1551   0DD3 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1552   0DD6 FD 39         mov c, b ; And place it into C
1553   0DD8 2A            mov b, [d] ; Lower Word in B
1554   0DD9 12            mov a, c
1555   0DDA FD AA         swp a
1556   0DDC D7            push a
1557   0DDD FD AB         swp b
1558   0DDF D8            push b
1559   0DE0 07 CA 15      call printx32
1560   0DE3 51 04 00      add sp, 4
1561   0DE6             ; --- END FUNCTION CALL
1562   0DE6 0A F5 0D      jmp _if18_exit
1563   0DE9             _if18_else:
1564   0DE9             ; err("Unexpected format in printf."); 
1565   0DE9             ; --- START FUNCTION CALL
1566   0DE9 26 C8 26      mov b, _s9 ; "Unexpected format in printf."
1567   0DEC FD AB         swp b
1568   0DEE D8            push b
1569   0DEF 07 B5 15      call err
1570   0DF2 51 02 00      add sp, 2
1571   0DF5             ; --- END FUNCTION CALL
1572   0DF5             _if18_exit:
1573   0DF5             _if17_exit:
1574   0DF5             _if16_exit:
1575   0DF5             ; p = p + 4; 
1576   0DF5 FA FF FF      lea d, [bp + -1] ; $p
1577   0DF8 DA            push d
1578   0DF9 FA FF FF      lea d, [bp + -1] ; $p
1579   0DFC 2A            mov b, [d]
1580   0DFD 38 00 00      mov c, 0
1581   0E00             ; --- START TERMS
1582   0E00 D7            push a
1583   0E01 11            mov a, b
1584   0E02 FD 2E 04 00   mov32 cb, $00000004
1584   0E06 00 00 
1585   0E08 56            add b, a
1586   0E09 E4            pop a
1587   0E0A             ; --- END TERMS
1588   0E0A E7            pop d
1589   0E0B FD 43         mov [d], b
1590   0E0D             ; break; 
1591   0E0D 0A EA 0E      jmp _switch15_exit ; case break
1592   0E10             _switch15_case2:
1593   0E10             _switch15_case3:
1594   0E10             ; print_signed(*(int*)p); 
1595   0E10             ; --- START FUNCTION CALL
1596   0E10 FA FF FF      lea d, [bp + -1] ; $p
1597   0E13 2A            mov b, [d]
1598   0E14 38 00 00      mov c, 0
1599   0E17 74            mov d, b
1600   0E18 2A            mov b, [d]
1601   0E19 38 00 00      mov c, 0
1602   0E1C FD AB         swp b
1603   0E1E D8            push b
1604   0E1F 07 BE 17      call print_signed
1605   0E22 51 02 00      add sp, 2
1606   0E25             ; --- END FUNCTION CALL
1607   0E25             ; p = p + 2; 
1608   0E25 FA FF FF      lea d, [bp + -1] ; $p
1609   0E28 DA            push d
1610   0E29 FA FF FF      lea d, [bp + -1] ; $p
1611   0E2C 2A            mov b, [d]
1612   0E2D 38 00 00      mov c, 0
1613   0E30             ; --- START TERMS
1614   0E30 D7            push a
1615   0E31 11            mov a, b
1616   0E32 FD 2E 02 00   mov32 cb, $00000002
1616   0E36 00 00 
1617   0E38 56            add b, a
1618   0E39 E4            pop a
1619   0E3A             ; --- END TERMS
1620   0E3A E7            pop d
1621   0E3B FD 43         mov [d], b
1622   0E3D             ; break; 
1623   0E3D 0A EA 0E      jmp _switch15_exit ; case break
1624   0E40             _switch15_case4:
1625   0E40             ; print_unsigned(*(unsigned int*)p); 
1626   0E40             ; --- START FUNCTION CALL
1627   0E40 FA FF FF      lea d, [bp + -1] ; $p
1628   0E43 2A            mov b, [d]
1629   0E44 38 00 00      mov c, 0
1630   0E47 74            mov d, b
1631   0E48 2A            mov b, [d]
1632   0E49 38 00 00      mov c, 0
1633   0E4C FD AB         swp b
1634   0E4E D8            push b
1635   0E4F 07 DA 1C      call print_unsigned
1636   0E52 51 02 00      add sp, 2
1637   0E55             ; --- END FUNCTION CALL
1638   0E55             ; p = p + 2; 
1639   0E55 FA FF FF      lea d, [bp + -1] ; $p
1640   0E58 DA            push d
1641   0E59 FA FF FF      lea d, [bp + -1] ; $p
1642   0E5C 2A            mov b, [d]
1643   0E5D 38 00 00      mov c, 0
1644   0E60             ; --- START TERMS
1645   0E60 D7            push a
1646   0E61 11            mov a, b
1647   0E62 FD 2E 02 00   mov32 cb, $00000002
1647   0E66 00 00 
1648   0E68 56            add b, a
1649   0E69 E4            pop a
1650   0E6A             ; --- END TERMS
1651   0E6A E7            pop d
1652   0E6B FD 43         mov [d], b
1653   0E6D             ; break; 
1654   0E6D 0A EA 0E      jmp _switch15_exit ; case break
1655   0E70             _switch15_case5:
1656   0E70             
1657   0E70             ; --- BEGIN INLINE ASM SEGMENT
1658   0E70 FA FF FF      lea d, [bp + -1] ; $p
1659   0E73 FD 2A         mov d, [d]
1660   0E75 2A            mov b, [d]
1661   0E76 07 53 23      call print_u16x
1662   0E79             ; --- END INLINE ASM SEGMENT
1663   0E79             
1664   0E79             ; p = p + 2; 
1665   0E79 FA FF FF      lea d, [bp + -1] ; $p
1666   0E7C DA            push d
1667   0E7D FA FF FF      lea d, [bp + -1] ; $p
1668   0E80 2A            mov b, [d]
1669   0E81 38 00 00      mov c, 0
1670   0E84             ; --- START TERMS
1671   0E84 D7            push a
1672   0E85 11            mov a, b
1673   0E86 FD 2E 02 00   mov32 cb, $00000002
1673   0E8A 00 00 
1674   0E8C 56            add b, a
1675   0E8D E4            pop a
1676   0E8E             ; --- END TERMS
1677   0E8E E7            pop d
1678   0E8F FD 43         mov [d], b
1679   0E91             ; break; 
1680   0E91 0A EA 0E      jmp _switch15_exit ; case break
1681   0E94             _switch15_case6:
1682   0E94             
1683   0E94             ; --- BEGIN INLINE ASM SEGMENT
1684   0E94 FA FF FF      lea d, [bp + -1] ; $p
1685   0E97 FD 2A         mov d, [d]
1686   0E99 1E            mov al, [d]
1687   0E9A 23            mov ah, al
1688   0E9B 07 B1 21      call _putchar
1689   0E9E             ; --- END INLINE ASM SEGMENT
1690   0E9E             
1691   0E9E             ; p = p + 1; 
1692   0E9E FA FF FF      lea d, [bp + -1] ; $p
1693   0EA1 DA            push d
1694   0EA2 FA FF FF      lea d, [bp + -1] ; $p
1695   0EA5 2A            mov b, [d]
1696   0EA6 38 00 00      mov c, 0
1697   0EA9             ; --- START TERMS
1698   0EA9 D7            push a
1699   0EAA 11            mov a, b
1700   0EAB FD 2E 01 00   mov32 cb, $00000001
1700   0EAF 00 00 
1701   0EB1 56            add b, a
1702   0EB2 E4            pop a
1703   0EB3             ; --- END TERMS
1704   0EB3 E7            pop d
1705   0EB4 FD 43         mov [d], b
1706   0EB6             ; break; 
1707   0EB6 0A EA 0E      jmp _switch15_exit ; case break
1708   0EB9             _switch15_case7:
1709   0EB9             
1710   0EB9             ; --- BEGIN INLINE ASM SEGMENT
1711   0EB9 FA FF FF      lea d, [bp + -1] ; $p
1712   0EBC FD 2A         mov d, [d]
1713   0EBE FD 2A         mov d, [d]
1714   0EC0 07 FB 22      call _puts
1715   0EC3             ; --- END INLINE ASM SEGMENT
1716   0EC3             
1717   0EC3             ; p = p + 2; 
1718   0EC3 FA FF FF      lea d, [bp + -1] ; $p
1719   0EC6 DA            push d
1720   0EC7 FA FF FF      lea d, [bp + -1] ; $p
1721   0ECA 2A            mov b, [d]
1722   0ECB 38 00 00      mov c, 0
1723   0ECE             ; --- START TERMS
1724   0ECE D7            push a
1725   0ECF 11            mov a, b
1726   0ED0 FD 2E 02 00   mov32 cb, $00000002
1726   0ED4 00 00 
1727   0ED6 56            add b, a
1728   0ED7 E4            pop a
1729   0ED8             ; --- END TERMS
1730   0ED8 E7            pop d
1731   0ED9 FD 43         mov [d], b
1732   0EDB             ; break; 
1733   0EDB 0A EA 0E      jmp _switch15_exit ; case break
1734   0EDE             _switch15_default:
1735   0EDE             ; print("Error: Unknown argument type.\n"); 
1736   0EDE             ; --- START FUNCTION CALL
1737   0EDE 26 E5 26      mov b, _s10 ; "Error: Unknown argument type.\n"
1738   0EE1 FD AB         swp b
1739   0EE3 D8            push b
1740   0EE4 07 F0 1F      call print
1741   0EE7 51 02 00      add sp, 2
1742   0EEA             ; --- END FUNCTION CALL
1743   0EEA             _switch15_exit:
1744   0EEA             ; format_p++; 
1745   0EEA FA FD FF      lea d, [bp + -3] ; $format_p
1746   0EED 2A            mov b, [d]
1747   0EEE 38 00 00      mov c, 0
1748   0EF1 FD 77         inc b
1749   0EF3 FA FD FF      lea d, [bp + -3] ; $format_p
1750   0EF6 FD 43         mov [d], b
1751   0EF8 FD 7D         dec b
1752   0EFA 0A 22 0F      jmp _if14_exit
1753   0EFD             _if14_else:
1754   0EFD             ; putchar(*format_p); 
1755   0EFD             ; --- START FUNCTION CALL
1756   0EFD FA FD FF      lea d, [bp + -3] ; $format_p
1757   0F00 2A            mov b, [d]
1758   0F01 38 00 00      mov c, 0
1759   0F04 74            mov d, b
1760   0F05 32            mov bl, [d]
1761   0F06 A7 00         mov bh, 0
1762   0F08 38 00 00      mov c, 0
1763   0F0B DD            push bl
1764   0F0C 07 A2 1F      call putchar
1765   0F0F 51 01 00      add sp, 1
1766   0F12             ; --- END FUNCTION CALL
1767   0F12             ; format_p++; 
1768   0F12 FA FD FF      lea d, [bp + -3] ; $format_p
1769   0F15 2A            mov b, [d]
1770   0F16 38 00 00      mov c, 0
1771   0F19 FD 77         inc b
1772   0F1B FA FD FF      lea d, [bp + -3] ; $format_p
1773   0F1E FD 43         mov [d], b
1774   0F20 FD 7D         dec b
1775   0F22             _if14_exit:
1776   0F22             _if13_exit:
1777   0F22             _for12_update:
1778   0F22 0A 75 0C      jmp _for12_cond
1779   0F25             _for12_exit:
1780   0F25 F9            leave
1781   0F26 09            ret
1782   0F27             
1783   0F27             scanf:
1784   0F27 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1785   0F2A             ; char *p, *format_p; 
1786   0F2A 52 02 00      sub sp, 2
1787   0F2D 52 02 00      sub sp, 2
1788   0F30             ; char c; 
1789   0F30 52 01 00      sub sp, 1
1790   0F33             ; int i; 
1791   0F33 52 02 00      sub sp, 2
1792   0F36             ; char input_string[  512                    ]; 
1793   0F36 52 00 02      sub sp, 512
1794   0F39             ; format_p = format; 
1795   0F39 FA FD FF      lea d, [bp + -3] ; $format_p
1796   0F3C DA            push d
1797   0F3D FA 05 00      lea d, [bp + 5] ; $format
1798   0F40 2A            mov b, [d]
1799   0F41 38 00 00      mov c, 0
1800   0F44 E7            pop d
1801   0F45 FD 43         mov [d], b
1802   0F47             ; p = &format + 2; 
1803   0F47 FA FF FF      lea d, [bp + -1] ; $p
1804   0F4A DA            push d
1805   0F4B FA 05 00      lea d, [bp + 5] ; $format
1806   0F4E 2D            mov b, d
1807   0F4F             ; --- START TERMS
1808   0F4F D7            push a
1809   0F50 11            mov a, b
1810   0F51 FD 2E 02 00   mov32 cb, $00000002
1810   0F55 00 00 
1811   0F57 56            add b, a
1812   0F58 E4            pop a
1813   0F59             ; --- END TERMS
1814   0F59 E7            pop d
1815   0F5A FD 43         mov [d], b
1816   0F5C             ; for(;;){ 
1817   0F5C             _for19_init:
1818   0F5C             _for19_cond:
1819   0F5C             _for19_block:
1820   0F5C             ; if(!*format_p) break; 
1821   0F5C             _if20_cond:
1822   0F5C FA FD FF      lea d, [bp + -3] ; $format_p
1823   0F5F 2A            mov b, [d]
1824   0F60 38 00 00      mov c, 0
1825   0F63 74            mov d, b
1826   0F64 32            mov bl, [d]
1827   0F65 A7 00         mov bh, 0
1828   0F67 38 00 00      mov c, 0
1829   0F6A C0 00 00      cmp b, 0
1830   0F6D FD 71         seq ; !
1831   0F6F C0 00 00      cmp b, 0
1832   0F72 C6 7B 0F      je _if20_else
1833   0F75             _if20_TRUE:
1834   0F75             ; break; 
1835   0F75 0A 03 12      jmp _for19_exit ; for break
1836   0F78 0A 00 12      jmp _if20_exit
1837   0F7B             _if20_else:
1838   0F7B             ; if(*format_p == '%'){ 
1839   0F7B             _if21_cond:
1840   0F7B FA FD FF      lea d, [bp + -3] ; $format_p
1841   0F7E 2A            mov b, [d]
1842   0F7F 38 00 00      mov c, 0
1843   0F82 74            mov d, b
1844   0F83 32            mov bl, [d]
1845   0F84 A7 00         mov bh, 0
1846   0F86 38 00 00      mov c, 0
1847   0F89             ; --- START RELATIONAL
1848   0F89 D7            push a
1849   0F8A 11            mov a, b
1850   0F8B FD 2E 25 00   mov32 cb, $00000025
1850   0F8F 00 00 
1851   0F91 B0            cmp a, b
1852   0F92 FD 71         seq ; ==
1853   0F94 E4            pop a
1854   0F95             ; --- END RELATIONAL
1855   0F95 C0 00 00      cmp b, 0
1856   0F98 C6 DB 11      je _if21_else
1857   0F9B             _if21_TRUE:
1858   0F9B             ; format_p++; 
1859   0F9B FA FD FF      lea d, [bp + -3] ; $format_p
1860   0F9E 2A            mov b, [d]
1861   0F9F 38 00 00      mov c, 0
1862   0FA2 FD 77         inc b
1863   0FA4 FA FD FF      lea d, [bp + -3] ; $format_p
1864   0FA7 FD 43         mov [d], b
1865   0FA9 FD 7D         dec b
1866   0FAB             ; switch(*format_p){ 
1867   0FAB             _switch22_expr:
1868   0FAB FA FD FF      lea d, [bp + -3] ; $format_p
1869   0FAE 2A            mov b, [d]
1870   0FAF 38 00 00      mov c, 0
1871   0FB2 74            mov d, b
1872   0FB3 32            mov bl, [d]
1873   0FB4 A7 00         mov bh, 0
1874   0FB6 38 00 00      mov c, 0
1875   0FB9             _switch22_comparisons:
1876   0FB9 C1 6C         cmp bl, $6c
1877   0FBB C6 E7 0F      je _switch22_case0
1878   0FBE C1 4C         cmp bl, $4c
1879   0FC0 C6 E7 0F      je _switch22_case1
1880   0FC3 C1 64         cmp bl, $64
1881   0FC5 C6 A6 10      je _switch22_case2
1882   0FC8 C1 69         cmp bl, $69
1883   0FCA C6 A6 10      je _switch22_case3
1884   0FCD C1 75         cmp bl, $75
1885   0FCF C6 DF 10      je _switch22_case4
1886   0FD2 C1 78         cmp bl, $78
1887   0FD4 C6 18 11      je _switch22_case5
1888   0FD7 C1 63         cmp bl, $63
1889   0FD9 C6 33 11      je _switch22_case6
1890   0FDC C1 73         cmp bl, $73
1891   0FDE C6 75 11      je _switch22_case7
1892   0FE1 0A BC 11      jmp _switch22_default
1893   0FE4 0A C8 11      jmp _switch22_exit
1894   0FE7             _switch22_case0:
1895   0FE7             _switch22_case1:
1896   0FE7             ; format_p++; 
1897   0FE7 FA FD FF      lea d, [bp + -3] ; $format_p
1898   0FEA 2A            mov b, [d]
1899   0FEB 38 00 00      mov c, 0
1900   0FEE FD 77         inc b
1901   0FF0 FA FD FF      lea d, [bp + -3] ; $format_p
1902   0FF3 FD 43         mov [d], b
1903   0FF5 FD 7D         dec b
1904   0FF7             ; if(*format_p == 'd' || *format_p == 'i'); 
1905   0FF7             _if23_cond:
1906   0FF7 FA FD FF      lea d, [bp + -3] ; $format_p
1907   0FFA 2A            mov b, [d]
1908   0FFB 38 00 00      mov c, 0
1909   0FFE 74            mov d, b
1910   0FFF 32            mov bl, [d]
1911   1000 A7 00         mov bh, 0
1912   1002 38 00 00      mov c, 0
1913   1005             ; --- START RELATIONAL
1914   1005 D7            push a
1915   1006 11            mov a, b
1916   1007 FD 2E 64 00   mov32 cb, $00000064
1916   100B 00 00 
1917   100D B0            cmp a, b
1918   100E FD 71         seq ; ==
1919   1010 E4            pop a
1920   1011             ; --- END RELATIONAL
1921   1011             ; --- START LOGICAL OR
1922   1011 D7            push a
1923   1012 11            mov a, b
1924   1013 FA FD FF      lea d, [bp + -3] ; $format_p
1925   1016 2A            mov b, [d]
1926   1017 38 00 00      mov c, 0
1927   101A 74            mov d, b
1928   101B 32            mov bl, [d]
1929   101C A7 00         mov bh, 0
1930   101E 38 00 00      mov c, 0
1931   1021             ; --- START RELATIONAL
1932   1021 D7            push a
1933   1022 11            mov a, b
1934   1023 FD 2E 69 00   mov32 cb, $00000069
1934   1027 00 00 
1935   1029 B0            cmp a, b
1936   102A FD 71         seq ; ==
1937   102C E4            pop a
1938   102D             ; --- END RELATIONAL
1939   102D FD A8         sor a, b ; ||
1940   102F E4            pop a
1941   1030             ; --- END LOGICAL OR
1942   1030 C0 00 00      cmp b, 0
1943   1033 C6 39 10      je _if23_else
1944   1036             _if23_TRUE:
1945   1036             ; ; 
1946   1036 0A 8B 10      jmp _if23_exit
1947   1039             _if23_else:
1948   1039             ; if(*format_p == 'u'); 
1949   1039             _if24_cond:
1950   1039 FA FD FF      lea d, [bp + -3] ; $format_p
1951   103C 2A            mov b, [d]
1952   103D 38 00 00      mov c, 0
1953   1040 74            mov d, b
1954   1041 32            mov bl, [d]
1955   1042 A7 00         mov bh, 0
1956   1044 38 00 00      mov c, 0
1957   1047             ; --- START RELATIONAL
1958   1047 D7            push a
1959   1048 11            mov a, b
1960   1049 FD 2E 75 00   mov32 cb, $00000075
1960   104D 00 00 
1961   104F B0            cmp a, b
1962   1050 FD 71         seq ; ==
1963   1052 E4            pop a
1964   1053             ; --- END RELATIONAL
1965   1053 C0 00 00      cmp b, 0
1966   1056 C6 5C 10      je _if24_else
1967   1059             _if24_TRUE:
1968   1059             ; ; 
1969   1059 0A 8B 10      jmp _if24_exit
1970   105C             _if24_else:
1971   105C             ; if(*format_p == 'x'); 
1972   105C             _if25_cond:
1973   105C FA FD FF      lea d, [bp + -3] ; $format_p
1974   105F 2A            mov b, [d]
1975   1060 38 00 00      mov c, 0
1976   1063 74            mov d, b
1977   1064 32            mov bl, [d]
1978   1065 A7 00         mov bh, 0
1979   1067 38 00 00      mov c, 0
1980   106A             ; --- START RELATIONAL
1981   106A D7            push a
1982   106B 11            mov a, b
1983   106C FD 2E 78 00   mov32 cb, $00000078
1983   1070 00 00 
1984   1072 B0            cmp a, b
1985   1073 FD 71         seq ; ==
1986   1075 E4            pop a
1987   1076             ; --- END RELATIONAL
1988   1076 C0 00 00      cmp b, 0
1989   1079 C6 7F 10      je _if25_else
1990   107C             _if25_TRUE:
1991   107C             ; ; 
1992   107C 0A 8B 10      jmp _if25_exit
1993   107F             _if25_else:
1994   107F             ; err("Unexpected format in printf."); 
1995   107F             ; --- START FUNCTION CALL
1996   107F 26 C8 26      mov b, _s9 ; "Unexpected format in printf."
1997   1082 FD AB         swp b
1998   1084 D8            push b
1999   1085 07 B5 15      call err
2000   1088 51 02 00      add sp, 2
2001   108B             ; --- END FUNCTION CALL
2002   108B             _if25_exit:
2003   108B             _if24_exit:
2004   108B             _if23_exit:
2005   108B             ; p = p + 4; 
2006   108B FA FF FF      lea d, [bp + -1] ; $p
2007   108E DA            push d
2008   108F FA FF FF      lea d, [bp + -1] ; $p
2009   1092 2A            mov b, [d]
2010   1093 38 00 00      mov c, 0
2011   1096             ; --- START TERMS
2012   1096 D7            push a
2013   1097 11            mov a, b
2014   1098 FD 2E 04 00   mov32 cb, $00000004
2014   109C 00 00 
2015   109E 56            add b, a
2016   109F E4            pop a
2017   10A0             ; --- END TERMS
2018   10A0 E7            pop d
2019   10A1 FD 43         mov [d], b
2020   10A3             ; break; 
2021   10A3 0A C8 11      jmp _switch22_exit ; case break
2022   10A6             _switch22_case2:
2023   10A6             _switch22_case3:
2024   10A6             ; i = scann(); 
2025   10A6 FA FA FF      lea d, [bp + -6] ; $i
2026   10A9 DA            push d
2027   10AA             ; --- START FUNCTION CALL
2028   10AA 07 C8 1F      call scann
2029   10AD E7            pop d
2030   10AE FD 43         mov [d], b
2031   10B0             ; **(int **)p = i; 
2032   10B0 FA FF FF      lea d, [bp + -1] ; $p
2033   10B3 2A            mov b, [d]
2034   10B4 38 00 00      mov c, 0
2035   10B7 74            mov d, b
2036   10B8 2A            mov b, [d]
2037   10B9 D8            push b
2038   10BA FA FA FF      lea d, [bp + -6] ; $i
2039   10BD 2A            mov b, [d]
2040   10BE 38 00 00      mov c, 0
2041   10C1 E7            pop d
2042   10C2 FD 43         mov [d], b
2043   10C4             ; p = p + 2; 
2044   10C4 FA FF FF      lea d, [bp + -1] ; $p
2045   10C7 DA            push d
2046   10C8 FA FF FF      lea d, [bp + -1] ; $p
2047   10CB 2A            mov b, [d]
2048   10CC 38 00 00      mov c, 0
2049   10CF             ; --- START TERMS
2050   10CF D7            push a
2051   10D0 11            mov a, b
2052   10D1 FD 2E 02 00   mov32 cb, $00000002
2052   10D5 00 00 
2053   10D7 56            add b, a
2054   10D8 E4            pop a
2055   10D9             ; --- END TERMS
2056   10D9 E7            pop d
2057   10DA FD 43         mov [d], b
2058   10DC             ; break; 
2059   10DC 0A C8 11      jmp _switch22_exit ; case break
2060   10DF             _switch22_case4:
2061   10DF             ; i = scann(); 
2062   10DF FA FA FF      lea d, [bp + -6] ; $i
2063   10E2 DA            push d
2064   10E3             ; --- START FUNCTION CALL
2065   10E3 07 C8 1F      call scann
2066   10E6 E7            pop d
2067   10E7 FD 43         mov [d], b
2068   10E9             ; **(int **)p = i; 
2069   10E9 FA FF FF      lea d, [bp + -1] ; $p
2070   10EC 2A            mov b, [d]
2071   10ED 38 00 00      mov c, 0
2072   10F0 74            mov d, b
2073   10F1 2A            mov b, [d]
2074   10F2 D8            push b
2075   10F3 FA FA FF      lea d, [bp + -6] ; $i
2076   10F6 2A            mov b, [d]
2077   10F7 38 00 00      mov c, 0
2078   10FA E7            pop d
2079   10FB FD 43         mov [d], b
2080   10FD             ; p = p + 2; 
2081   10FD FA FF FF      lea d, [bp + -1] ; $p
2082   1100 DA            push d
2083   1101 FA FF FF      lea d, [bp + -1] ; $p
2084   1104 2A            mov b, [d]
2085   1105 38 00 00      mov c, 0
2086   1108             ; --- START TERMS
2087   1108 D7            push a
2088   1109 11            mov a, b
2089   110A FD 2E 02 00   mov32 cb, $00000002
2089   110E 00 00 
2090   1110 56            add b, a
2091   1111 E4            pop a
2092   1112             ; --- END TERMS
2093   1112 E7            pop d
2094   1113 FD 43         mov [d], b
2095   1115             ; break; 
2096   1115 0A C8 11      jmp _switch22_exit ; case break
2097   1118             _switch22_case5:
2098   1118             ; p = p + 2; 
2099   1118 FA FF FF      lea d, [bp + -1] ; $p
2100   111B DA            push d
2101   111C FA FF FF      lea d, [bp + -1] ; $p
2102   111F 2A            mov b, [d]
2103   1120 38 00 00      mov c, 0
2104   1123             ; --- START TERMS
2105   1123 D7            push a
2106   1124 11            mov a, b
2107   1125 FD 2E 02 00   mov32 cb, $00000002
2107   1129 00 00 
2108   112B 56            add b, a
2109   112C E4            pop a
2110   112D             ; --- END TERMS
2111   112D E7            pop d
2112   112E FD 43         mov [d], b
2113   1130             ; break; 
2114   1130 0A C8 11      jmp _switch22_exit ; case break
2115   1133             _switch22_case6:
2116   1133             ; c = getchar(); 
2117   1133 FA FC FF      lea d, [bp + -4] ; $c
2118   1136 DA            push d
2119   1137             ; --- START FUNCTION CALL
2120   1137 07 AF 1F      call getchar
2121   113A E7            pop d
2122   113B FD 3E         mov [d], bl
2123   113D             ; **(char **)p = *(char *)c; 
2124   113D FA FF FF      lea d, [bp + -1] ; $p
2125   1140 2A            mov b, [d]
2126   1141 38 00 00      mov c, 0
2127   1144 74            mov d, b
2128   1145 2A            mov b, [d]
2129   1146 D8            push b
2130   1147 FA FC FF      lea d, [bp + -4] ; $c
2131   114A 32            mov bl, [d]
2132   114B A7 00         mov bh, 0
2133   114D 38 00 00      mov c, 0
2134   1150 74            mov d, b
2135   1151 32            mov bl, [d]
2136   1152 A7 00         mov bh, 0
2137   1154 38 00 00      mov c, 0
2138   1157 E7            pop d
2139   1158 FD 43         mov [d], b
2140   115A             ; p = p + 1; 
2141   115A FA FF FF      lea d, [bp + -1] ; $p
2142   115D DA            push d
2143   115E FA FF FF      lea d, [bp + -1] ; $p
2144   1161 2A            mov b, [d]
2145   1162 38 00 00      mov c, 0
2146   1165             ; --- START TERMS
2147   1165 D7            push a
2148   1166 11            mov a, b
2149   1167 FD 2E 01 00   mov32 cb, $00000001
2149   116B 00 00 
2150   116D 56            add b, a
2151   116E E4            pop a
2152   116F             ; --- END TERMS
2153   116F E7            pop d
2154   1170 FD 43         mov [d], b
2155   1172             ; break; 
2156   1172 0A C8 11      jmp _switch22_exit ; case break
2157   1175             _switch22_case7:
2158   1175             ; gets(input_string); 
2159   1175             ; --- START FUNCTION CALL
2160   1175 FA FA FD      lea d, [bp + -518] ; $input_string
2161   1178 2D            mov b, d
2162   1179 38 00 00      mov c, 0
2163   117C FD AB         swp b
2164   117E D8            push b
2165   117F 07 A1 17      call gets
2166   1182 51 02 00      add sp, 2
2167   1185             ; --- END FUNCTION CALL
2168   1185             ; strcpy(*(char **)p, input_string); 
2169   1185             ; --- START FUNCTION CALL
2170   1185 FA FA FD      lea d, [bp + -518] ; $input_string
2171   1188 2D            mov b, d
2172   1189 38 00 00      mov c, 0
2173   118C FD AB         swp b
2174   118E D8            push b
2175   118F FA FF FF      lea d, [bp + -1] ; $p
2176   1192 2A            mov b, [d]
2177   1193 38 00 00      mov c, 0
2178   1196 74            mov d, b
2179   1197 2A            mov b, [d]
2180   1198 FD AB         swp b
2181   119A D8            push b
2182   119B 07 18 07      call strcpy
2183   119E 51 04 00      add sp, 4
2184   11A1             ; --- END FUNCTION CALL
2185   11A1             ; p = p + 2; 
2186   11A1 FA FF FF      lea d, [bp + -1] ; $p
2187   11A4 DA            push d
2188   11A5 FA FF FF      lea d, [bp + -1] ; $p
2189   11A8 2A            mov b, [d]
2190   11A9 38 00 00      mov c, 0
2191   11AC             ; --- START TERMS
2192   11AC D7            push a
2193   11AD 11            mov a, b
2194   11AE FD 2E 02 00   mov32 cb, $00000002
2194   11B2 00 00 
2195   11B4 56            add b, a
2196   11B5 E4            pop a
2197   11B6             ; --- END TERMS
2198   11B6 E7            pop d
2199   11B7 FD 43         mov [d], b
2200   11B9             ; break; 
2201   11B9 0A C8 11      jmp _switch22_exit ; case break
2202   11BC             _switch22_default:
2203   11BC             ; print("Error: Unknown argument type.\n"); 
2204   11BC             ; --- START FUNCTION CALL
2205   11BC 26 E5 26      mov b, _s10 ; "Error: Unknown argument type.\n"
2206   11BF FD AB         swp b
2207   11C1 D8            push b
2208   11C2 07 F0 1F      call print
2209   11C5 51 02 00      add sp, 2
2210   11C8             ; --- END FUNCTION CALL
2211   11C8             _switch22_exit:
2212   11C8             ; format_p++; 
2213   11C8 FA FD FF      lea d, [bp + -3] ; $format_p
2214   11CB 2A            mov b, [d]
2215   11CC 38 00 00      mov c, 0
2216   11CF FD 77         inc b
2217   11D1 FA FD FF      lea d, [bp + -3] ; $format_p
2218   11D4 FD 43         mov [d], b
2219   11D6 FD 7D         dec b
2220   11D8 0A 00 12      jmp _if21_exit
2221   11DB             _if21_else:
2222   11DB             ; putchar(*format_p); 
2223   11DB             ; --- START FUNCTION CALL
2224   11DB FA FD FF      lea d, [bp + -3] ; $format_p
2225   11DE 2A            mov b, [d]
2226   11DF 38 00 00      mov c, 0
2227   11E2 74            mov d, b
2228   11E3 32            mov bl, [d]
2229   11E4 A7 00         mov bh, 0
2230   11E6 38 00 00      mov c, 0
2231   11E9 DD            push bl
2232   11EA 07 A2 1F      call putchar
2233   11ED 51 01 00      add sp, 1
2234   11F0             ; --- END FUNCTION CALL
2235   11F0             ; format_p++; 
2236   11F0 FA FD FF      lea d, [bp + -3] ; $format_p
2237   11F3 2A            mov b, [d]
2238   11F4 38 00 00      mov c, 0
2239   11F7 FD 77         inc b
2240   11F9 FA FD FF      lea d, [bp + -3] ; $format_p
2241   11FC FD 43         mov [d], b
2242   11FE FD 7D         dec b
2243   1200             _if21_exit:
2244   1200             _if20_exit:
2245   1200             _for19_update:
2246   1200 0A 5C 0F      jmp _for19_cond
2247   1203             _for19_exit:
2248   1203 F9            leave
2249   1204 09            ret
2250   1205             
2251   1205             sprintf:
2252   1205 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2253   1208             ; char *p, *format_p; 
2254   1208 52 02 00      sub sp, 2
2255   120B 52 02 00      sub sp, 2
2256   120E             ; char *sp; 
2257   120E 52 02 00      sub sp, 2
2258   1211             ; sp = dest; 
2259   1211 FA FB FF      lea d, [bp + -5] ; $sp
2260   1214 DA            push d
2261   1215 FA 05 00      lea d, [bp + 5] ; $dest
2262   1218 2A            mov b, [d]
2263   1219 38 00 00      mov c, 0
2264   121C E7            pop d
2265   121D FD 43         mov [d], b
2266   121F             ; format_p = format; 
2267   121F FA FD FF      lea d, [bp + -3] ; $format_p
2268   1222 DA            push d
2269   1223 FA 07 00      lea d, [bp + 7] ; $format
2270   1226 2A            mov b, [d]
2271   1227 38 00 00      mov c, 0
2272   122A E7            pop d
2273   122B FD 43         mov [d], b
2274   122D             ; p = &format + 2; 
2275   122D FA FF FF      lea d, [bp + -1] ; $p
2276   1230 DA            push d
2277   1231 FA 07 00      lea d, [bp + 7] ; $format
2278   1234 2D            mov b, d
2279   1235             ; --- START TERMS
2280   1235 D7            push a
2281   1236 11            mov a, b
2282   1237 FD 2E 02 00   mov32 cb, $00000002
2282   123B 00 00 
2283   123D 56            add b, a
2284   123E E4            pop a
2285   123F             ; --- END TERMS
2286   123F E7            pop d
2287   1240 FD 43         mov [d], b
2288   1242             ; for(;;){ 
2289   1242             _for26_init:
2290   1242             _for26_cond:
2291   1242             _for26_block:
2292   1242             ; if(!*format_p) break; 
2293   1242             _if27_cond:
2294   1242 FA FD FF      lea d, [bp + -3] ; $format_p
2295   1245 2A            mov b, [d]
2296   1246 38 00 00      mov c, 0
2297   1249 74            mov d, b
2298   124A 32            mov bl, [d]
2299   124B A7 00         mov bh, 0
2300   124D 38 00 00      mov c, 0
2301   1250 C0 00 00      cmp b, 0
2302   1253 FD 71         seq ; !
2303   1255 C0 00 00      cmp b, 0
2304   1258 C6 61 12      je _if27_else
2305   125B             _if27_TRUE:
2306   125B             ; break; 
2307   125B 0A 8F 15      jmp _for26_exit ; for break
2308   125E 0A 8C 15      jmp _if27_exit
2309   1261             _if27_else:
2310   1261             ; if(*format_p == '%'){ 
2311   1261             _if28_cond:
2312   1261 FA FD FF      lea d, [bp + -3] ; $format_p
2313   1264 2A            mov b, [d]
2314   1265 38 00 00      mov c, 0
2315   1268 74            mov d, b
2316   1269 32            mov bl, [d]
2317   126A A7 00         mov bh, 0
2318   126C 38 00 00      mov c, 0
2319   126F             ; --- START RELATIONAL
2320   126F D7            push a
2321   1270 11            mov a, b
2322   1271 FD 2E 25 00   mov32 cb, $00000025
2322   1275 00 00 
2323   1277 B0            cmp a, b
2324   1278 FD 71         seq ; ==
2325   127A E4            pop a
2326   127B             ; --- END RELATIONAL
2327   127B C0 00 00      cmp b, 0
2328   127E C6 61 15      je _if28_else
2329   1281             _if28_TRUE:
2330   1281             ; format_p++; 
2331   1281 FA FD FF      lea d, [bp + -3] ; $format_p
2332   1284 2A            mov b, [d]
2333   1285 38 00 00      mov c, 0
2334   1288 FD 77         inc b
2335   128A FA FD FF      lea d, [bp + -3] ; $format_p
2336   128D FD 43         mov [d], b
2337   128F FD 7D         dec b
2338   1291             ; switch(*format_p){ 
2339   1291             _switch29_expr:
2340   1291 FA FD FF      lea d, [bp + -3] ; $format_p
2341   1294 2A            mov b, [d]
2342   1295 38 00 00      mov c, 0
2343   1298 74            mov d, b
2344   1299 32            mov bl, [d]
2345   129A A7 00         mov bh, 0
2346   129C 38 00 00      mov c, 0
2347   129F             _switch29_comparisons:
2348   129F C1 6C         cmp bl, $6c
2349   12A1 C6 CD 12      je _switch29_case0
2350   12A4 C1 4C         cmp bl, $4c
2351   12A6 C6 CD 12      je _switch29_case1
2352   12A9 C1 64         cmp bl, $64
2353   12AB C6 DD 13      je _switch29_case2
2354   12AE C1 69         cmp bl, $69
2355   12B0 C6 DD 13      je _switch29_case3
2356   12B3 C1 75         cmp bl, $75
2357   12B5 C6 29 14      je _switch29_case4
2358   12B8 C1 78         cmp bl, $78
2359   12BA C6 75 14      je _switch29_case5
2360   12BD C1 63         cmp bl, $63
2361   12BF C6 99 14      je _switch29_case6
2362   12C2 C1 73         cmp bl, $73
2363   12C4 C6 D6 14      je _switch29_case7
2364   12C7 0A 42 15      jmp _switch29_default
2365   12CA 0A 4E 15      jmp _switch29_exit
2366   12CD             _switch29_case0:
2367   12CD             _switch29_case1:
2368   12CD             ; format_p++; 
2369   12CD FA FD FF      lea d, [bp + -3] ; $format_p
2370   12D0 2A            mov b, [d]
2371   12D1 38 00 00      mov c, 0
2372   12D4 FD 77         inc b
2373   12D6 FA FD FF      lea d, [bp + -3] ; $format_p
2374   12D9 FD 43         mov [d], b
2375   12DB FD 7D         dec b
2376   12DD             ; if(*format_p == 'd' || *format_p == 'i') 
2377   12DD             _if30_cond:
2378   12DD FA FD FF      lea d, [bp + -3] ; $format_p
2379   12E0 2A            mov b, [d]
2380   12E1 38 00 00      mov c, 0
2381   12E4 74            mov d, b
2382   12E5 32            mov bl, [d]
2383   12E6 A7 00         mov bh, 0
2384   12E8 38 00 00      mov c, 0
2385   12EB             ; --- START RELATIONAL
2386   12EB D7            push a
2387   12EC 11            mov a, b
2388   12ED FD 2E 64 00   mov32 cb, $00000064
2388   12F1 00 00 
2389   12F3 B0            cmp a, b
2390   12F4 FD 71         seq ; ==
2391   12F6 E4            pop a
2392   12F7             ; --- END RELATIONAL
2393   12F7             ; --- START LOGICAL OR
2394   12F7 D7            push a
2395   12F8 11            mov a, b
2396   12F9 FA FD FF      lea d, [bp + -3] ; $format_p
2397   12FC 2A            mov b, [d]
2398   12FD 38 00 00      mov c, 0
2399   1300 74            mov d, b
2400   1301 32            mov bl, [d]
2401   1302 A7 00         mov bh, 0
2402   1304 38 00 00      mov c, 0
2403   1307             ; --- START RELATIONAL
2404   1307 D7            push a
2405   1308 11            mov a, b
2406   1309 FD 2E 69 00   mov32 cb, $00000069
2406   130D 00 00 
2407   130F B0            cmp a, b
2408   1310 FD 71         seq ; ==
2409   1312 E4            pop a
2410   1313             ; --- END RELATIONAL
2411   1313 FD A8         sor a, b ; ||
2412   1315 E4            pop a
2413   1316             ; --- END LOGICAL OR
2414   1316 C0 00 00      cmp b, 0
2415   1319 C6 3A 13      je _if30_else
2416   131C             _if30_TRUE:
2417   131C             ; print_signed_long(*(long *)p); 
2418   131C             ; --- START FUNCTION CALL
2419   131C FA FF FF      lea d, [bp + -1] ; $p
2420   131F 2A            mov b, [d]
2421   1320 38 00 00      mov c, 0
2422   1323 74            mov d, b
2423   1324 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2424   1327 FD 39         mov c, b ; And place it into C
2425   1329 2A            mov b, [d] ; Lower Word in B
2426   132A 12            mov a, c
2427   132B FD AA         swp a
2428   132D D7            push a
2429   132E FD AB         swp b
2430   1330 D8            push b
2431   1331 07 F7 18      call print_signed_long
2432   1334 51 04 00      add sp, 4
2433   1337             ; --- END FUNCTION CALL
2434   1337 0A C2 13      jmp _if30_exit
2435   133A             _if30_else:
2436   133A             ; if(*format_p == 'u') 
2437   133A             _if31_cond:
2438   133A FA FD FF      lea d, [bp + -3] ; $format_p
2439   133D 2A            mov b, [d]
2440   133E 38 00 00      mov c, 0
2441   1341 74            mov d, b
2442   1342 32            mov bl, [d]
2443   1343 A7 00         mov bh, 0
2444   1345 38 00 00      mov c, 0
2445   1348             ; --- START RELATIONAL
2446   1348 D7            push a
2447   1349 11            mov a, b
2448   134A FD 2E 75 00   mov32 cb, $00000075
2448   134E 00 00 
2449   1350 B0            cmp a, b
2450   1351 FD 71         seq ; ==
2451   1353 E4            pop a
2452   1354             ; --- END RELATIONAL
2453   1354 C0 00 00      cmp b, 0
2454   1357 C6 78 13      je _if31_else
2455   135A             _if31_TRUE:
2456   135A             ; print_unsigned_long(*(unsigned long *)p); 
2457   135A             ; --- START FUNCTION CALL
2458   135A FA FF FF      lea d, [bp + -1] ; $p
2459   135D 2A            mov b, [d]
2460   135E 38 00 00      mov c, 0
2461   1361 74            mov d, b
2462   1362 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2463   1365 FD 39         mov c, b ; And place it into C
2464   1367 2A            mov b, [d] ; Lower Word in B
2465   1368 12            mov a, c
2466   1369 FD AA         swp a
2467   136B D7            push a
2468   136C FD AB         swp b
2469   136E D8            push b
2470   136F 07 66 1A      call print_unsigned_long
2471   1372 51 04 00      add sp, 4
2472   1375             ; --- END FUNCTION CALL
2473   1375 0A C2 13      jmp _if31_exit
2474   1378             _if31_else:
2475   1378             ; if(*format_p == 'x') 
2476   1378             _if32_cond:
2477   1378 FA FD FF      lea d, [bp + -3] ; $format_p
2478   137B 2A            mov b, [d]
2479   137C 38 00 00      mov c, 0
2480   137F 74            mov d, b
2481   1380 32            mov bl, [d]
2482   1381 A7 00         mov bh, 0
2483   1383 38 00 00      mov c, 0
2484   1386             ; --- START RELATIONAL
2485   1386 D7            push a
2486   1387 11            mov a, b
2487   1388 FD 2E 78 00   mov32 cb, $00000078
2487   138C 00 00 
2488   138E B0            cmp a, b
2489   138F FD 71         seq ; ==
2490   1391 E4            pop a
2491   1392             ; --- END RELATIONAL
2492   1392 C0 00 00      cmp b, 0
2493   1395 C6 B6 13      je _if32_else
2494   1398             _if32_TRUE:
2495   1398             ; printx32(*(long int *)p); 
2496   1398             ; --- START FUNCTION CALL
2497   1398 FA FF FF      lea d, [bp + -1] ; $p
2498   139B 2A            mov b, [d]
2499   139C 38 00 00      mov c, 0
2500   139F 74            mov d, b
2501   13A0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2502   13A3 FD 39         mov c, b ; And place it into C
2503   13A5 2A            mov b, [d] ; Lower Word in B
2504   13A6 12            mov a, c
2505   13A7 FD AA         swp a
2506   13A9 D7            push a
2507   13AA FD AB         swp b
2508   13AC D8            push b
2509   13AD 07 CA 15      call printx32
2510   13B0 51 04 00      add sp, 4
2511   13B3             ; --- END FUNCTION CALL
2512   13B3 0A C2 13      jmp _if32_exit
2513   13B6             _if32_else:
2514   13B6             ; err("Unexpected format in printf."); 
2515   13B6             ; --- START FUNCTION CALL
2516   13B6 26 C8 26      mov b, _s9 ; "Unexpected format in printf."
2517   13B9 FD AB         swp b
2518   13BB D8            push b
2519   13BC 07 B5 15      call err
2520   13BF 51 02 00      add sp, 2
2521   13C2             ; --- END FUNCTION CALL
2522   13C2             _if32_exit:
2523   13C2             _if31_exit:
2524   13C2             _if30_exit:
2525   13C2             ; p = p + 4; 
2526   13C2 FA FF FF      lea d, [bp + -1] ; $p
2527   13C5 DA            push d
2528   13C6 FA FF FF      lea d, [bp + -1] ; $p
2529   13C9 2A            mov b, [d]
2530   13CA 38 00 00      mov c, 0
2531   13CD             ; --- START TERMS
2532   13CD D7            push a
2533   13CE 11            mov a, b
2534   13CF FD 2E 04 00   mov32 cb, $00000004
2534   13D3 00 00 
2535   13D5 56            add b, a
2536   13D6 E4            pop a
2537   13D7             ; --- END TERMS
2538   13D7 E7            pop d
2539   13D8 FD 43         mov [d], b
2540   13DA             ; break; 
2541   13DA 0A 4E 15      jmp _switch29_exit ; case break
2542   13DD             _switch29_case2:
2543   13DD             _switch29_case3:
2544   13DD             ; sp = sp + sprint_signed(sp, *(int*)p); 
2545   13DD FA FB FF      lea d, [bp + -5] ; $sp
2546   13E0 DA            push d
2547   13E1 FA FB FF      lea d, [bp + -5] ; $sp
2548   13E4 2A            mov b, [d]
2549   13E5 38 00 00      mov c, 0
2550   13E8             ; --- START TERMS
2551   13E8 D7            push a
2552   13E9 11            mov a, b
2553   13EA             ; --- START FUNCTION CALL
2554   13EA FA FF FF      lea d, [bp + -1] ; $p
2555   13ED 2A            mov b, [d]
2556   13EE 38 00 00      mov c, 0
2557   13F1 74            mov d, b
2558   13F2 2A            mov b, [d]
2559   13F3 38 00 00      mov c, 0
2560   13F6 FD AB         swp b
2561   13F8 D8            push b
2562   13F9 FA FB FF      lea d, [bp + -5] ; $sp
2563   13FC 2A            mov b, [d]
2564   13FD 38 00 00      mov c, 0
2565   1400 FD AB         swp b
2566   1402 D8            push b
2567   1403 07 DA 1D      call sprint_signed
2568   1406 51 04 00      add sp, 4
2569   1409             ; --- END FUNCTION CALL
2570   1409 56            add b, a
2571   140A E4            pop a
2572   140B             ; --- END TERMS
2573   140B E7            pop d
2574   140C FD 43         mov [d], b
2575   140E             ; p = p + 2; 
2576   140E FA FF FF      lea d, [bp + -1] ; $p
2577   1411 DA            push d
2578   1412 FA FF FF      lea d, [bp + -1] ; $p
2579   1415 2A            mov b, [d]
2580   1416 38 00 00      mov c, 0
2581   1419             ; --- START TERMS
2582   1419 D7            push a
2583   141A 11            mov a, b
2584   141B FD 2E 02 00   mov32 cb, $00000002
2584   141F 00 00 
2585   1421 56            add b, a
2586   1422 E4            pop a
2587   1423             ; --- END TERMS
2588   1423 E7            pop d
2589   1424 FD 43         mov [d], b
2590   1426             ; break; 
2591   1426 0A 4E 15      jmp _switch29_exit ; case break
2592   1429             _switch29_case4:
2593   1429             ; sp = sp + sprint_unsigned(sp, *(unsigned int*)p); 
2594   1429 FA FB FF      lea d, [bp + -5] ; $sp
2595   142C DA            push d
2596   142D FA FB FF      lea d, [bp + -5] ; $sp
2597   1430 2A            mov b, [d]
2598   1431 38 00 00      mov c, 0
2599   1434             ; --- START TERMS
2600   1434 D7            push a
2601   1435 11            mov a, b
2602   1436             ; --- START FUNCTION CALL
2603   1436 FA FF FF      lea d, [bp + -1] ; $p
2604   1439 2A            mov b, [d]
2605   143A 38 00 00      mov c, 0
2606   143D 74            mov d, b
2607   143E 2A            mov b, [d]
2608   143F 38 00 00      mov c, 0
2609   1442 FD AB         swp b
2610   1444 D8            push b
2611   1445 FA FB FF      lea d, [bp + -5] ; $sp
2612   1448 2A            mov b, [d]
2613   1449 38 00 00      mov c, 0
2614   144C FD AB         swp b
2615   144E D8            push b
2616   144F 07 82 1B      call sprint_unsigned
2617   1452 51 04 00      add sp, 4
2618   1455             ; --- END FUNCTION CALL
2619   1455 56            add b, a
2620   1456 E4            pop a
2621   1457             ; --- END TERMS
2622   1457 E7            pop d
2623   1458 FD 43         mov [d], b
2624   145A             ; p = p + 2; 
2625   145A FA FF FF      lea d, [bp + -1] ; $p
2626   145D DA            push d
2627   145E FA FF FF      lea d, [bp + -1] ; $p
2628   1461 2A            mov b, [d]
2629   1462 38 00 00      mov c, 0
2630   1465             ; --- START TERMS
2631   1465 D7            push a
2632   1466 11            mov a, b
2633   1467 FD 2E 02 00   mov32 cb, $00000002
2633   146B 00 00 
2634   146D 56            add b, a
2635   146E E4            pop a
2636   146F             ; --- END TERMS
2637   146F E7            pop d
2638   1470 FD 43         mov [d], b
2639   1472             ; break; 
2640   1472 0A 4E 15      jmp _switch29_exit ; case break
2641   1475             _switch29_case5:
2642   1475             
2643   1475             ; --- BEGIN INLINE ASM SEGMENT
2644   1475 FA FF FF      lea d, [bp + -1] ; $p
2645   1478 FD 2A         mov d, [d]
2646   147A 2A            mov b, [d]
2647   147B 07 53 23      call print_u16x
2648   147E             ; --- END INLINE ASM SEGMENT
2649   147E             
2650   147E             ; p = p + 2; 
2651   147E FA FF FF      lea d, [bp + -1] ; $p
2652   1481 DA            push d
2653   1482 FA FF FF      lea d, [bp + -1] ; $p
2654   1485 2A            mov b, [d]
2655   1486 38 00 00      mov c, 0
2656   1489             ; --- START TERMS
2657   1489 D7            push a
2658   148A 11            mov a, b
2659   148B FD 2E 02 00   mov32 cb, $00000002
2659   148F 00 00 
2660   1491 56            add b, a
2661   1492 E4            pop a
2662   1493             ; --- END TERMS
2663   1493 E7            pop d
2664   1494 FD 43         mov [d], b
2665   1496             ; break; 
2666   1496 0A 4E 15      jmp _switch29_exit ; case break
2667   1499             _switch29_case6:
2668   1499             ; *sp++ = *(char *)p; 
2669   1499 FA FB FF      lea d, [bp + -5] ; $sp
2670   149C 2A            mov b, [d]
2671   149D 38 00 00      mov c, 0
2672   14A0 FD 77         inc b
2673   14A2 FA FB FF      lea d, [bp + -5] ; $sp
2674   14A5 FD 43         mov [d], b
2675   14A7 FD 7D         dec b
2676   14A9 D8            push b
2677   14AA FA FF FF      lea d, [bp + -1] ; $p
2678   14AD 2A            mov b, [d]
2679   14AE 38 00 00      mov c, 0
2680   14B1 74            mov d, b
2681   14B2 32            mov bl, [d]
2682   14B3 A7 00         mov bh, 0
2683   14B5 38 00 00      mov c, 0
2684   14B8 E7            pop d
2685   14B9 FD 3E         mov [d], bl
2686   14BB             ; p = p + 1; 
2687   14BB FA FF FF      lea d, [bp + -1] ; $p
2688   14BE DA            push d
2689   14BF FA FF FF      lea d, [bp + -1] ; $p
2690   14C2 2A            mov b, [d]
2691   14C3 38 00 00      mov c, 0
2692   14C6             ; --- START TERMS
2693   14C6 D7            push a
2694   14C7 11            mov a, b
2695   14C8 FD 2E 01 00   mov32 cb, $00000001
2695   14CC 00 00 
2696   14CE 56            add b, a
2697   14CF E4            pop a
2698   14D0             ; --- END TERMS
2699   14D0 E7            pop d
2700   14D1 FD 43         mov [d], b
2701   14D3             ; break; 
2702   14D3 0A 4E 15      jmp _switch29_exit ; case break
2703   14D6             _switch29_case7:
2704   14D6             ; int len = strlen(*(char **)p); 
2705   14D6 52 02 00      sub sp, 2
2706   14D9             ; --- START LOCAL VAR INITIALIZATION
2707   14D9 FA F9 FF      lea d, [bp + -7] ; $len
2708   14DC DA            push d
2709   14DD             ; --- START FUNCTION CALL
2710   14DD FA FF FF      lea d, [bp + -1] ; $p
2711   14E0 2A            mov b, [d]
2712   14E1 38 00 00      mov c, 0
2713   14E4 74            mov d, b
2714   14E5 2A            mov b, [d]
2715   14E6 FD AB         swp b
2716   14E8 D8            push b
2717   14E9 07 FE 08      call strlen
2718   14EC 51 02 00      add sp, 2
2719   14EF             ; --- END FUNCTION CALL
2720   14EF E7            pop d
2721   14F0 FD 43         mov [d], b
2722   14F2             ; --- END LOCAL VAR INITIALIZATION
2723   14F2             ; strcpy(sp, *(char **)p); 
2724   14F2             ; --- START FUNCTION CALL
2725   14F2 FA FF FF      lea d, [bp + -1] ; $p
2726   14F5 2A            mov b, [d]
2727   14F6 38 00 00      mov c, 0
2728   14F9 74            mov d, b
2729   14FA 2A            mov b, [d]
2730   14FB FD AB         swp b
2731   14FD D8            push b
2732   14FE FA FB FF      lea d, [bp + -5] ; $sp
2733   1501 2A            mov b, [d]
2734   1502 38 00 00      mov c, 0
2735   1505 FD AB         swp b
2736   1507 D8            push b
2737   1508 07 18 07      call strcpy
2738   150B 51 04 00      add sp, 4
2739   150E             ; --- END FUNCTION CALL
2740   150E             ; sp = sp + len; 
2741   150E FA FB FF      lea d, [bp + -5] ; $sp
2742   1511 DA            push d
2743   1512 FA FB FF      lea d, [bp + -5] ; $sp
2744   1515 2A            mov b, [d]
2745   1516 38 00 00      mov c, 0
2746   1519             ; --- START TERMS
2747   1519 D7            push a
2748   151A 11            mov a, b
2749   151B FA F9 FF      lea d, [bp + -7] ; $len
2750   151E 2A            mov b, [d]
2751   151F 38 00 00      mov c, 0
2752   1522 56            add b, a
2753   1523 E4            pop a
2754   1524             ; --- END TERMS
2755   1524 E7            pop d
2756   1525 FD 43         mov [d], b
2757   1527             ; p = p + 2; 
2758   1527 FA FF FF      lea d, [bp + -1] ; $p
2759   152A DA            push d
2760   152B FA FF FF      lea d, [bp + -1] ; $p
2761   152E 2A            mov b, [d]
2762   152F 38 00 00      mov c, 0
2763   1532             ; --- START TERMS
2764   1532 D7            push a
2765   1533 11            mov a, b
2766   1534 FD 2E 02 00   mov32 cb, $00000002
2766   1538 00 00 
2767   153A 56            add b, a
2768   153B E4            pop a
2769   153C             ; --- END TERMS
2770   153C E7            pop d
2771   153D FD 43         mov [d], b
2772   153F             ; break; 
2773   153F 0A 4E 15      jmp _switch29_exit ; case break
2774   1542             _switch29_default:
2775   1542             ; print("Error: Unknown argument type.\n"); 
2776   1542             ; --- START FUNCTION CALL
2777   1542 26 E5 26      mov b, _s10 ; "Error: Unknown argument type.\n"
2778   1545 FD AB         swp b
2779   1547 D8            push b
2780   1548 07 F0 1F      call print
2781   154B 51 02 00      add sp, 2
2782   154E             ; --- END FUNCTION CALL
2783   154E             _switch29_exit:
2784   154E             ; format_p++; 
2785   154E FA FD FF      lea d, [bp + -3] ; $format_p
2786   1551 2A            mov b, [d]
2787   1552 38 00 00      mov c, 0
2788   1555 FD 77         inc b
2789   1557 FA FD FF      lea d, [bp + -3] ; $format_p
2790   155A FD 43         mov [d], b
2791   155C FD 7D         dec b
2792   155E 0A 8C 15      jmp _if28_exit
2793   1561             _if28_else:
2794   1561             ; *sp++ = *format_p++; 
2795   1561 FA FB FF      lea d, [bp + -5] ; $sp
2796   1564 2A            mov b, [d]
2797   1565 38 00 00      mov c, 0
2798   1568 FD 77         inc b
2799   156A FA FB FF      lea d, [bp + -5] ; $sp
2800   156D FD 43         mov [d], b
2801   156F FD 7D         dec b
2802   1571 D8            push b
2803   1572 FA FD FF      lea d, [bp + -3] ; $format_p
2804   1575 2A            mov b, [d]
2805   1576 38 00 00      mov c, 0
2806   1579 FD 77         inc b
2807   157B FA FD FF      lea d, [bp + -3] ; $format_p
2808   157E FD 43         mov [d], b
2809   1580 FD 7D         dec b
2810   1582 74            mov d, b
2811   1583 32            mov bl, [d]
2812   1584 A7 00         mov bh, 0
2813   1586 38 00 00      mov c, 0
2814   1589 E7            pop d
2815   158A FD 3E         mov [d], bl
2816   158C             _if28_exit:
2817   158C             _if27_exit:
2818   158C             _for26_update:
2819   158C 0A 42 12      jmp _for26_cond
2820   158F             _for26_exit:
2821   158F             ; *sp = '\0'; 
2822   158F FA FB FF      lea d, [bp + -5] ; $sp
2823   1592 2A            mov b, [d]
2824   1593 38 00 00      mov c, 0
2825   1596 D8            push b
2826   1597 FD 2E 00 00   mov32 cb, $00000000
2826   159B 00 00 
2827   159D E7            pop d
2828   159E FD 3E         mov [d], bl
2829   15A0             ; return sp - dest; // return total number of chars written 
2830   15A0 FA FB FF      lea d, [bp + -5] ; $sp
2831   15A3 2A            mov b, [d]
2832   15A4 38 00 00      mov c, 0
2833   15A7             ; --- START TERMS
2834   15A7 D7            push a
2835   15A8 11            mov a, b
2836   15A9 FA 05 00      lea d, [bp + 5] ; $dest
2837   15AC 2A            mov b, [d]
2838   15AD 38 00 00      mov c, 0
2839   15B0 60            sub a, b
2840   15B1 27            mov b, a
2841   15B2 E4            pop a
2842   15B3             ; --- END TERMS
2843   15B3 F9            leave
2844   15B4 09            ret
2845   15B5             
2846   15B5             err:
2847   15B5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2848   15B8             ; print(e); 
2849   15B8             ; --- START FUNCTION CALL
2850   15B8 FA 05 00      lea d, [bp + 5] ; $e
2851   15BB 2A            mov b, [d]
2852   15BC 38 00 00      mov c, 0
2853   15BF FD AB         swp b
2854   15C1 D8            push b
2855   15C2 07 F0 1F      call print
2856   15C5 51 02 00      add sp, 2
2857   15C8             ; --- END FUNCTION CALL
2858   15C8 F9            leave
2859   15C9 09            ret
2860   15CA             
2861   15CA             printx32:
2862   15CA F8 00 00      enter 0 ; (push bp; mov bp, sp)
2863   15CD             
2864   15CD             ; --- BEGIN INLINE ASM SEGMENT
2865   15CD FA 05 00      lea d, [bp + 5] ; $hex
2866   15D0 2B 02 00      mov b, [d+2]
2867   15D3 07 53 23      call print_u16x
2868   15D6 2A            mov b, [d]
2869   15D7 07 53 23      call print_u16x
2870   15DA             ; --- END INLINE ASM SEGMENT
2871   15DA             
2872   15DA F9            leave
2873   15DB 09            ret
2874   15DC             
2875   15DC             printx16:
2876   15DC F8 00 00      enter 0 ; (push bp; mov bp, sp)
2877   15DF             
2878   15DF             ; --- BEGIN INLINE ASM SEGMENT
2879   15DF FA 05 00      lea d, [bp + 5] ; $hex
2880   15E2 2A            mov b, [d]
2881   15E3 07 53 23      call print_u16x
2882   15E6             ; --- END INLINE ASM SEGMENT
2883   15E6             
2884   15E6 F9            leave
2885   15E7 09            ret
2886   15E8             
2887   15E8             printx8:
2888   15E8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2889   15EB             
2890   15EB             ; --- BEGIN INLINE ASM SEGMENT
2891   15EB FA 05 00      lea d, [bp + 5] ; $hex
2892   15EE 32            mov bl, [d]
2893   15EF 07 97 23      call print_u8x
2894   15F2             ; --- END INLINE ASM SEGMENT
2895   15F2             
2896   15F2 F9            leave
2897   15F3 09            ret
2898   15F4             
2899   15F4             hex_str_to_int:
2900   15F4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2901   15F7             ; int value = 0; 
2902   15F7 52 02 00      sub sp, 2
2903   15FA             ; --- START LOCAL VAR INITIALIZATION
2904   15FA FA FF FF      lea d, [bp + -1] ; $value
2905   15FD DA            push d
2906   15FE FD 2E 00 00   mov32 cb, $00000000
2906   1602 00 00 
2907   1604 E7            pop d
2908   1605 FD 43         mov [d], b
2909   1607             ; --- END LOCAL VAR INITIALIZATION
2910   1607             ; int i; 
2911   1607 52 02 00      sub sp, 2
2912   160A             ; char hex_char; 
2913   160A 52 01 00      sub sp, 1
2914   160D             ; int len; 
2915   160D 52 02 00      sub sp, 2
2916   1610             ; len = strlen(hex_string); 
2917   1610 FA FA FF      lea d, [bp + -6] ; $len
2918   1613 DA            push d
2919   1614             ; --- START FUNCTION CALL
2920   1614 FA 05 00      lea d, [bp + 5] ; $hex_string
2921   1617 2A            mov b, [d]
2922   1618 38 00 00      mov c, 0
2923   161B FD AB         swp b
2924   161D D8            push b
2925   161E 07 FE 08      call strlen
2926   1621 51 02 00      add sp, 2
2927   1624             ; --- END FUNCTION CALL
2928   1624 E7            pop d
2929   1625 FD 43         mov [d], b
2930   1627             ; for (i = 0; i < len; i++) { 
2931   1627             _for33_init:
2932   1627 FA FD FF      lea d, [bp + -3] ; $i
2933   162A DA            push d
2934   162B FD 2E 00 00   mov32 cb, $00000000
2934   162F 00 00 
2935   1631 E7            pop d
2936   1632 FD 43         mov [d], b
2937   1634             _for33_cond:
2938   1634 FA FD FF      lea d, [bp + -3] ; $i
2939   1637 2A            mov b, [d]
2940   1638 38 00 00      mov c, 0
2941   163B             ; --- START RELATIONAL
2942   163B D7            push a
2943   163C 11            mov a, b
2944   163D FA FA FF      lea d, [bp + -6] ; $len
2945   1640 2A            mov b, [d]
2946   1641 38 00 00      mov c, 0
2947   1644 B0            cmp a, b
2948   1645 FD 73         slt ; < (signed)
2949   1647 E4            pop a
2950   1648             ; --- END RELATIONAL
2951   1648 C0 00 00      cmp b, 0
2952   164B C6 98 17      je _for33_exit
2953   164E             _for33_block:
2954   164E             ; hex_char = hex_string[i]; 
2955   164E FA FC FF      lea d, [bp + -4] ; $hex_char
2956   1651 DA            push d
2957   1652 FA 05 00      lea d, [bp + 5] ; $hex_string
2958   1655 FD 2A         mov d, [d]
2959   1657 D7            push a
2960   1658 DA            push d
2961   1659 FA FD FF      lea d, [bp + -3] ; $i
2962   165C 2A            mov b, [d]
2963   165D 38 00 00      mov c, 0
2964   1660 E7            pop d
2965   1661 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2966   1665 E4            pop a
2967   1666 32            mov bl, [d]
2968   1667 A7 00         mov bh, 0
2969   1669 38 00 00      mov c, 0
2970   166C E7            pop d
2971   166D FD 3E         mov [d], bl
2972   166F             ; if (hex_char >= 'a' && hex_char <= 'f')  
2973   166F             _if34_cond:
2974   166F FA FC FF      lea d, [bp + -4] ; $hex_char
2975   1672 32            mov bl, [d]
2976   1673 A7 00         mov bh, 0
2977   1675 38 00 00      mov c, 0
2978   1678             ; --- START RELATIONAL
2979   1678 D7            push a
2980   1679 11            mov a, b
2981   167A FD 2E 61 00   mov32 cb, $00000061
2981   167E 00 00 
2982   1680 B0            cmp a, b
2983   1681 FD 80         sge ; >=
2984   1683 E4            pop a
2985   1684             ; --- END RELATIONAL
2986   1684             ; --- START LOGICAL AND
2987   1684 D7            push a
2988   1685 11            mov a, b
2989   1686 FA FC FF      lea d, [bp + -4] ; $hex_char
2990   1689 32            mov bl, [d]
2991   168A A7 00         mov bh, 0
2992   168C 38 00 00      mov c, 0
2993   168F             ; --- START RELATIONAL
2994   168F D7            push a
2995   1690 11            mov a, b
2996   1691 FD 2E 66 00   mov32 cb, $00000066
2996   1695 00 00 
2997   1697 B0            cmp a, b
2998   1698 FD 74         sle ; <= (signed)
2999   169A E4            pop a
3000   169B             ; --- END RELATIONAL
3001   169B FD A7         sand a, b
3002   169D E4            pop a
3003   169E             ; --- END LOGICAL AND
3004   169E C0 00 00      cmp b, 0
3005   16A1 C6 E1 16      je _if34_else
3006   16A4             _if34_TRUE:
3007   16A4             ; value = (value * 16) + (hex_char - 'a' + 10); 
3008   16A4 FA FF FF      lea d, [bp + -1] ; $value
3009   16A7 DA            push d
3010   16A8 FA FF FF      lea d, [bp + -1] ; $value
3011   16AB 2A            mov b, [d]
3012   16AC 38 00 00      mov c, 0
3013   16AF             ; --- START FACTORS
3014   16AF D7            push a
3015   16B0 11            mov a, b
3016   16B1 FD 2E 10 00   mov32 cb, $00000010
3016   16B5 00 00 
3017   16B7 AC            mul a, b ; *
3018   16B8 11            mov a, b
3019   16B9 27            mov b, a
3020   16BA E4            pop a
3021   16BB             ; --- END FACTORS
3022   16BB             ; --- START TERMS
3023   16BB D7            push a
3024   16BC 11            mov a, b
3025   16BD FA FC FF      lea d, [bp + -4] ; $hex_char
3026   16C0 32            mov bl, [d]
3027   16C1 A7 00         mov bh, 0
3028   16C3 38 00 00      mov c, 0
3029   16C6             ; --- START TERMS
3030   16C6 D7            push a
3031   16C7 11            mov a, b
3032   16C8 FD 2E 61 00   mov32 cb, $00000061
3032   16CC 00 00 
3033   16CE 60            sub a, b
3034   16CF 27            mov b, a
3035   16D0 11            mov a, b
3036   16D1 FD 2E 0A 00   mov32 cb, $0000000a
3036   16D5 00 00 
3037   16D7 56            add b, a
3038   16D8 E4            pop a
3039   16D9             ; --- END TERMS
3040   16D9 56            add b, a
3041   16DA E4            pop a
3042   16DB             ; --- END TERMS
3043   16DB E7            pop d
3044   16DC FD 43         mov [d], b
3045   16DE 0A 85 17      jmp _if34_exit
3046   16E1             _if34_else:
3047   16E1             ; if (hex_char >= 'A' && hex_char <= 'F')  
3048   16E1             _if35_cond:
3049   16E1 FA FC FF      lea d, [bp + -4] ; $hex_char
3050   16E4 32            mov bl, [d]
3051   16E5 A7 00         mov bh, 0
3052   16E7 38 00 00      mov c, 0
3053   16EA             ; --- START RELATIONAL
3054   16EA D7            push a
3055   16EB 11            mov a, b
3056   16EC FD 2E 41 00   mov32 cb, $00000041
3056   16F0 00 00 
3057   16F2 B0            cmp a, b
3058   16F3 FD 80         sge ; >=
3059   16F5 E4            pop a
3060   16F6             ; --- END RELATIONAL
3061   16F6             ; --- START LOGICAL AND
3062   16F6 D7            push a
3063   16F7 11            mov a, b
3064   16F8 FA FC FF      lea d, [bp + -4] ; $hex_char
3065   16FB 32            mov bl, [d]
3066   16FC A7 00         mov bh, 0
3067   16FE 38 00 00      mov c, 0
3068   1701             ; --- START RELATIONAL
3069   1701 D7            push a
3070   1702 11            mov a, b
3071   1703 FD 2E 46 00   mov32 cb, $00000046
3071   1707 00 00 
3072   1709 B0            cmp a, b
3073   170A FD 74         sle ; <= (signed)
3074   170C E4            pop a
3075   170D             ; --- END RELATIONAL
3076   170D FD A7         sand a, b
3077   170F E4            pop a
3078   1710             ; --- END LOGICAL AND
3079   1710 C0 00 00      cmp b, 0
3080   1713 C6 53 17      je _if35_else
3081   1716             _if35_TRUE:
3082   1716             ; value = (value * 16) + (hex_char - 'A' + 10); 
3083   1716 FA FF FF      lea d, [bp + -1] ; $value
3084   1719 DA            push d
3085   171A FA FF FF      lea d, [bp + -1] ; $value
3086   171D 2A            mov b, [d]
3087   171E 38 00 00      mov c, 0
3088   1721             ; --- START FACTORS
3089   1721 D7            push a
3090   1722 11            mov a, b
3091   1723 FD 2E 10 00   mov32 cb, $00000010
3091   1727 00 00 
3092   1729 AC            mul a, b ; *
3093   172A 11            mov a, b
3094   172B 27            mov b, a
3095   172C E4            pop a
3096   172D             ; --- END FACTORS
3097   172D             ; --- START TERMS
3098   172D D7            push a
3099   172E 11            mov a, b
3100   172F FA FC FF      lea d, [bp + -4] ; $hex_char
3101   1732 32            mov bl, [d]
3102   1733 A7 00         mov bh, 0
3103   1735 38 00 00      mov c, 0
3104   1738             ; --- START TERMS
3105   1738 D7            push a
3106   1739 11            mov a, b
3107   173A FD 2E 41 00   mov32 cb, $00000041
3107   173E 00 00 
3108   1740 60            sub a, b
3109   1741 27            mov b, a
3110   1742 11            mov a, b
3111   1743 FD 2E 0A 00   mov32 cb, $0000000a
3111   1747 00 00 
3112   1749 56            add b, a
3113   174A E4            pop a
3114   174B             ; --- END TERMS
3115   174B 56            add b, a
3116   174C E4            pop a
3117   174D             ; --- END TERMS
3118   174D E7            pop d
3119   174E FD 43         mov [d], b
3120   1750 0A 85 17      jmp _if35_exit
3121   1753             _if35_else:
3122   1753             ; value = (value * 16) + (hex_char - '0'); 
3123   1753 FA FF FF      lea d, [bp + -1] ; $value
3124   1756 DA            push d
3125   1757 FA FF FF      lea d, [bp + -1] ; $value
3126   175A 2A            mov b, [d]
3127   175B 38 00 00      mov c, 0
3128   175E             ; --- START FACTORS
3129   175E D7            push a
3130   175F 11            mov a, b
3131   1760 FD 2E 10 00   mov32 cb, $00000010
3131   1764 00 00 
3132   1766 AC            mul a, b ; *
3133   1767 11            mov a, b
3134   1768 27            mov b, a
3135   1769 E4            pop a
3136   176A             ; --- END FACTORS
3137   176A             ; --- START TERMS
3138   176A D7            push a
3139   176B 11            mov a, b
3140   176C FA FC FF      lea d, [bp + -4] ; $hex_char
3141   176F 32            mov bl, [d]
3142   1770 A7 00         mov bh, 0
3143   1772 38 00 00      mov c, 0
3144   1775             ; --- START TERMS
3145   1775 D7            push a
3146   1776 11            mov a, b
3147   1777 FD 2E 30 00   mov32 cb, $00000030
3147   177B 00 00 
3148   177D 60            sub a, b
3149   177E 27            mov b, a
3150   177F E4            pop a
3151   1780             ; --- END TERMS
3152   1780 56            add b, a
3153   1781 E4            pop a
3154   1782             ; --- END TERMS
3155   1782 E7            pop d
3156   1783 FD 43         mov [d], b
3157   1785             _if35_exit:
3158   1785             _if34_exit:
3159   1785             _for33_update:
3160   1785 FA FD FF      lea d, [bp + -3] ; $i
3161   1788 2A            mov b, [d]
3162   1789 38 00 00      mov c, 0
3163   178C 11            mov a, b
3164   178D FD 77         inc b
3165   178F FA FD FF      lea d, [bp + -3] ; $i
3166   1792 FD 43         mov [d], b
3167   1794 27            mov b, a
3168   1795 0A 34 16      jmp _for33_cond
3169   1798             _for33_exit:
3170   1798             ; return value; 
3171   1798 FA FF FF      lea d, [bp + -1] ; $value
3172   179B 2A            mov b, [d]
3173   179C 38 00 00      mov c, 0
3174   179F F9            leave
3175   17A0 09            ret
3176   17A1             
3177   17A1             gets:
3178   17A1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3179   17A4             
3180   17A4             ; --- BEGIN INLINE ASM SEGMENT
3181   17A4 FA 05 00      lea d, [bp + 5] ; $s
3182   17A7 15            mov a, [d]
3183   17A8 3C            mov d, a
3184   17A9 07 B8 21      call _gets
3185   17AC             ; --- END INLINE ASM SEGMENT
3186   17AC             
3187   17AC             ; return strlen(s); 
3188   17AC             ; --- START FUNCTION CALL
3189   17AC FA 05 00      lea d, [bp + 5] ; $s
3190   17AF 2A            mov b, [d]
3191   17B0 38 00 00      mov c, 0
3192   17B3 FD AB         swp b
3193   17B5 D8            push b
3194   17B6 07 FE 08      call strlen
3195   17B9 51 02 00      add sp, 2
3196   17BC             ; --- END FUNCTION CALL
3197   17BC F9            leave
3198   17BD 09            ret
3199   17BE             
3200   17BE             print_signed:
3201   17BE F8 00 00      enter 0 ; (push bp; mov bp, sp)
3202   17C1             ; char digits[5]; 
3203   17C1 52 05 00      sub sp, 5
3204   17C4             ; int i = 0; 
3205   17C4 52 02 00      sub sp, 2
3206   17C7             ; --- START LOCAL VAR INITIALIZATION
3207   17C7 FA FA FF      lea d, [bp + -6] ; $i
3208   17CA DA            push d
3209   17CB FD 2E 00 00   mov32 cb, $00000000
3209   17CF 00 00 
3210   17D1 E7            pop d
3211   17D2 FD 43         mov [d], b
3212   17D4             ; --- END LOCAL VAR INITIALIZATION
3213   17D4             ; if (num < 0) { 
3214   17D4             _if36_cond:
3215   17D4 FA 05 00      lea d, [bp + 5] ; $num
3216   17D7 2A            mov b, [d]
3217   17D8 38 00 00      mov c, 0
3218   17DB             ; --- START RELATIONAL
3219   17DB D7            push a
3220   17DC 11            mov a, b
3221   17DD FD 2E 00 00   mov32 cb, $00000000
3221   17E1 00 00 
3222   17E3 B0            cmp a, b
3223   17E4 FD 73         slt ; < (signed)
3224   17E6 E4            pop a
3225   17E7             ; --- END RELATIONAL
3226   17E7 C0 00 00      cmp b, 0
3227   17EA C6 0D 18      je _if36_else
3228   17ED             _if36_TRUE:
3229   17ED             ; putchar('-'); 
3230   17ED             ; --- START FUNCTION CALL
3231   17ED FD 2E 2D 00   mov32 cb, $0000002d
3231   17F1 00 00 
3232   17F3 DD            push bl
3233   17F4 07 A2 1F      call putchar
3234   17F7 51 01 00      add sp, 1
3235   17FA             ; --- END FUNCTION CALL
3236   17FA             ; num = -num; 
3237   17FA FA 05 00      lea d, [bp + 5] ; $num
3238   17FD DA            push d
3239   17FE FA 05 00      lea d, [bp + 5] ; $num
3240   1801 2A            mov b, [d]
3241   1802 38 00 00      mov c, 0
3242   1805 FD 97         neg b
3243   1807 E7            pop d
3244   1808 FD 43         mov [d], b
3245   180A 0A 38 18      jmp _if36_exit
3246   180D             _if36_else:
3247   180D             ; if (num == 0) { 
3248   180D             _if37_cond:
3249   180D FA 05 00      lea d, [bp + 5] ; $num
3250   1810 2A            mov b, [d]
3251   1811 38 00 00      mov c, 0
3252   1814             ; --- START RELATIONAL
3253   1814 D7            push a
3254   1815 11            mov a, b
3255   1816 FD 2E 00 00   mov32 cb, $00000000
3255   181A 00 00 
3256   181C B0            cmp a, b
3257   181D FD 71         seq ; ==
3258   181F E4            pop a
3259   1820             ; --- END RELATIONAL
3260   1820 C0 00 00      cmp b, 0
3261   1823 C6 38 18      je _if37_exit
3262   1826             _if37_TRUE:
3263   1826             ; putchar('0'); 
3264   1826             ; --- START FUNCTION CALL
3265   1826 FD 2E 30 00   mov32 cb, $00000030
3265   182A 00 00 
3266   182C DD            push bl
3267   182D 07 A2 1F      call putchar
3268   1830 51 01 00      add sp, 1
3269   1833             ; --- END FUNCTION CALL
3270   1833             ; return; 
3271   1833 F9            leave
3272   1834 09            ret
3273   1835 0A 38 18      jmp _if37_exit
3274   1838             _if37_exit:
3275   1838             _if36_exit:
3276   1838             ; while (num > 0) { 
3277   1838             _while38_cond:
3278   1838 FA 05 00      lea d, [bp + 5] ; $num
3279   183B 2A            mov b, [d]
3280   183C 38 00 00      mov c, 0
3281   183F             ; --- START RELATIONAL
3282   183F D7            push a
3283   1840 11            mov a, b
3284   1841 FD 2E 00 00   mov32 cb, $00000000
3284   1845 00 00 
3285   1847 B0            cmp a, b
3286   1848 FD 7F         sgt ; >
3287   184A E4            pop a
3288   184B             ; --- END RELATIONAL
3289   184B C0 00 00      cmp b, 0
3290   184E C6 AD 18      je _while38_exit
3291   1851             _while38_block:
3292   1851             ; digits[i] = '0' + (num % 10); 
3293   1851 FA FC FF      lea d, [bp + -4] ; $digits
3294   1854 D7            push a
3295   1855 DA            push d
3296   1856 FA FA FF      lea d, [bp + -6] ; $i
3297   1859 2A            mov b, [d]
3298   185A 38 00 00      mov c, 0
3299   185D E7            pop d
3300   185E 5A            add d, b
3301   185F E4            pop a
3302   1860 DA            push d
3303   1861 FD 2E 30 00   mov32 cb, $00000030
3303   1865 00 00 
3304   1867             ; --- START TERMS
3305   1867 D7            push a
3306   1868 11            mov a, b
3307   1869 FA 05 00      lea d, [bp + 5] ; $num
3308   186C 2A            mov b, [d]
3309   186D 38 00 00      mov c, 0
3310   1870             ; --- START FACTORS
3311   1870 D7            push a
3312   1871 11            mov a, b
3313   1872 FD 2E 0A 00   mov32 cb, $0000000a
3313   1876 00 00 
3314   1878 AE            div a, b ; 
3315   1879 11            mov a, b
3316   187A 27            mov b, a
3317   187B E4            pop a
3318   187C             ; --- END FACTORS
3319   187C 56            add b, a
3320   187D E4            pop a
3321   187E             ; --- END TERMS
3322   187E E7            pop d
3323   187F FD 3E         mov [d], bl
3324   1881             ; num = num / 10; 
3325   1881 FA 05 00      lea d, [bp + 5] ; $num
3326   1884 DA            push d
3327   1885 FA 05 00      lea d, [bp + 5] ; $num
3328   1888 2A            mov b, [d]
3329   1889 38 00 00      mov c, 0
3330   188C             ; --- START FACTORS
3331   188C D7            push a
3332   188D 11            mov a, b
3333   188E FD 2E 0A 00   mov32 cb, $0000000a
3333   1892 00 00 
3334   1894 AE            div a, b
3335   1895 27            mov b, a
3336   1896 E4            pop a
3337   1897             ; --- END FACTORS
3338   1897 E7            pop d
3339   1898 FD 43         mov [d], b
3340   189A             ; i++; 
3341   189A FA FA FF      lea d, [bp + -6] ; $i
3342   189D 2A            mov b, [d]
3343   189E 38 00 00      mov c, 0
3344   18A1 11            mov a, b
3345   18A2 FD 77         inc b
3346   18A4 FA FA FF      lea d, [bp + -6] ; $i
3347   18A7 FD 43         mov [d], b
3348   18A9 27            mov b, a
3349   18AA 0A 38 18      jmp _while38_cond
3350   18AD             _while38_exit:
3351   18AD             ; while (i > 0) { 
3352   18AD             _while39_cond:
3353   18AD FA FA FF      lea d, [bp + -6] ; $i
3354   18B0 2A            mov b, [d]
3355   18B1 38 00 00      mov c, 0
3356   18B4             ; --- START RELATIONAL
3357   18B4 D7            push a
3358   18B5 11            mov a, b
3359   18B6 FD 2E 00 00   mov32 cb, $00000000
3359   18BA 00 00 
3360   18BC B0            cmp a, b
3361   18BD FD 7F         sgt ; >
3362   18BF E4            pop a
3363   18C0             ; --- END RELATIONAL
3364   18C0 C0 00 00      cmp b, 0
3365   18C3 C6 F5 18      je _while39_exit
3366   18C6             _while39_block:
3367   18C6             ; i--; 
3368   18C6 FA FA FF      lea d, [bp + -6] ; $i
3369   18C9 2A            mov b, [d]
3370   18CA 38 00 00      mov c, 0
3371   18CD 11            mov a, b
3372   18CE FD 7D         dec b
3373   18D0 FA FA FF      lea d, [bp + -6] ; $i
3374   18D3 FD 43         mov [d], b
3375   18D5 27            mov b, a
3376   18D6             ; putchar(digits[i]); 
3377   18D6             ; --- START FUNCTION CALL
3378   18D6 FA FC FF      lea d, [bp + -4] ; $digits
3379   18D9 D7            push a
3380   18DA DA            push d
3381   18DB FA FA FF      lea d, [bp + -6] ; $i
3382   18DE 2A            mov b, [d]
3383   18DF 38 00 00      mov c, 0
3384   18E2 E7            pop d
3385   18E3 5A            add d, b
3386   18E4 E4            pop a
3387   18E5 32            mov bl, [d]
3388   18E6 A7 00         mov bh, 0
3389   18E8 38 00 00      mov c, 0
3390   18EB DD            push bl
3391   18EC 07 A2 1F      call putchar
3392   18EF 51 01 00      add sp, 1
3393   18F2             ; --- END FUNCTION CALL
3394   18F2 0A AD 18      jmp _while39_cond
3395   18F5             _while39_exit:
3396   18F5 F9            leave
3397   18F6 09            ret
3398   18F7             
3399   18F7             print_signed_long:
3400   18F7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3401   18FA             ; char digits[10]; 
3402   18FA 52 0A 00      sub sp, 10
3403   18FD             ; int i = 0; 
3404   18FD 52 02 00      sub sp, 2
3405   1900             ; --- START LOCAL VAR INITIALIZATION
3406   1900 FA F5 FF      lea d, [bp + -11] ; $i
3407   1903 DA            push d
3408   1904 FD 2E 00 00   mov32 cb, $00000000
3408   1908 00 00 
3409   190A E7            pop d
3410   190B FD 43         mov [d], b
3411   190D             ; --- END LOCAL VAR INITIALIZATION
3412   190D             ; if (num < 0) { 
3413   190D             _if40_cond:
3414   190D FA 05 00      lea d, [bp + 5] ; $num
3415   1910 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3416   1913 FD 39         mov c, b ; And place it into C
3417   1915 2A            mov b, [d] ; Lower Word in B
3418   1916             ; --- START RELATIONAL
3419   1916 D7            push a
3420   1917 FD D8         push g
3421   1919 11            mov a, b
3422   191A FD 7A         mov g, c
3423   191C FD 2E 00 00   mov32 cb, $00000000
3423   1920 00 00 
3424   1922 FD AF         cmp32 ga, cb
3425   1924 FD 73         slt ; <
3426   1926 FD F1         pop g
3427   1928 E4            pop a
3428   1929             ; --- END RELATIONAL
3429   1929 C0 00 00      cmp b, 0
3430   192C C6 60 19      je _if40_else
3431   192F             _if40_TRUE:
3432   192F             ; putchar('-'); 
3433   192F             ; --- START FUNCTION CALL
3434   192F FD 2E 2D 00   mov32 cb, $0000002d
3434   1933 00 00 
3435   1935 DD            push bl
3436   1936 07 A2 1F      call putchar
3437   1939 51 01 00      add sp, 1
3438   193C             ; --- END FUNCTION CALL
3439   193C             ; num = -num; 
3440   193C FA 05 00      lea d, [bp + 5] ; $num
3441   193F DA            push d
3442   1940 FA 05 00      lea d, [bp + 5] ; $num
3443   1943 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3444   1946 FD 39         mov c, b ; And place it into C
3445   1948 2A            mov b, [d] ; Lower Word in B
3446   1949 12            mov a, c
3447   194A 95            not a
3448   194B 97            not b
3449   194C 55 01 00      add b, 1
3450   194F 5B 00 00      adc a, 0
3451   1952 39            mov c, a
3452   1953 E7            pop d
3453   1954 FD 43         mov [d], b
3454   1956 26 00 00      mov b, 0
3455   1959 FD 44 02 00   mov [d + 2], b
3456   195D 0A 94 19      jmp _if40_exit
3457   1960             _if40_else:
3458   1960             ; if (num == 0) { 
3459   1960             _if41_cond:
3460   1960 FA 05 00      lea d, [bp + 5] ; $num
3461   1963 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3462   1966 FD 39         mov c, b ; And place it into C
3463   1968 2A            mov b, [d] ; Lower Word in B
3464   1969             ; --- START RELATIONAL
3465   1969 D7            push a
3466   196A FD D8         push g
3467   196C 11            mov a, b
3468   196D FD 7A         mov g, c
3469   196F FD 2E 00 00   mov32 cb, $00000000
3469   1973 00 00 
3470   1975 FD AF         cmp32 ga, cb
3471   1977 FD 71         seq ; ==
3472   1979 FD F1         pop g
3473   197B E4            pop a
3474   197C             ; --- END RELATIONAL
3475   197C C0 00 00      cmp b, 0
3476   197F C6 94 19      je _if41_exit
3477   1982             _if41_TRUE:
3478   1982             ; putchar('0'); 
3479   1982             ; --- START FUNCTION CALL
3480   1982 FD 2E 30 00   mov32 cb, $00000030
3480   1986 00 00 
3481   1988 DD            push bl
3482   1989 07 A2 1F      call putchar
3483   198C 51 01 00      add sp, 1
3484   198F             ; --- END FUNCTION CALL
3485   198F             ; return; 
3486   198F F9            leave
3487   1990 09            ret
3488   1991 0A 94 19      jmp _if41_exit
3489   1994             _if41_exit:
3490   1994             _if40_exit:
3491   1994             ; while (num > 0) { 
3492   1994             _while42_cond:
3493   1994 FA 05 00      lea d, [bp + 5] ; $num
3494   1997 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3495   199A FD 39         mov c, b ; And place it into C
3496   199C 2A            mov b, [d] ; Lower Word in B
3497   199D             ; --- START RELATIONAL
3498   199D D7            push a
3499   199E FD D8         push g
3500   19A0 11            mov a, b
3501   19A1 FD 7A         mov g, c
3502   19A3 FD 2E 00 00   mov32 cb, $00000000
3502   19A7 00 00 
3503   19A9 FD AF         cmp32 ga, cb
3504   19AB FD 7F         sgt
3505   19AD FD F1         pop g
3506   19AF E4            pop a
3507   19B0             ; --- END RELATIONAL
3508   19B0 C0 00 00      cmp b, 0
3509   19B3 C6 1C 1A      je _while42_exit
3510   19B6             _while42_block:
3511   19B6             ; digits[i] = '0' + (num % 10); 
3512   19B6 FA F7 FF      lea d, [bp + -9] ; $digits
3513   19B9 D7            push a
3514   19BA DA            push d
3515   19BB FA F5 FF      lea d, [bp + -11] ; $i
3516   19BE 2A            mov b, [d]
3517   19BF 38 00 00      mov c, 0
3518   19C2 E7            pop d
3519   19C3 5A            add d, b
3520   19C4 E4            pop a
3521   19C5 DA            push d
3522   19C6 FD 2E 30 00   mov32 cb, $00000030
3522   19CA 00 00 
3523   19CC             ; --- START TERMS
3524   19CC D7            push a
3525   19CD 11            mov a, b
3526   19CE FA 05 00      lea d, [bp + 5] ; $num
3527   19D1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3528   19D4 FD 39         mov c, b ; And place it into C
3529   19D6 2A            mov b, [d] ; Lower Word in B
3530   19D7             ; --- START FACTORS
3531   19D7 D7            push a
3532   19D8 11            mov a, b
3533   19D9 FD 2E 0A 00   mov32 cb, $0000000a
3533   19DD 00 00 
3534   19DF AE            div a, b ; 
3535   19E0 11            mov a, b
3536   19E1 27            mov b, a
3537   19E2 E4            pop a
3538   19E3             ; --- END FACTORS
3539   19E3 FD 15         add32 cb, ga
3540   19E5 E4            pop a
3541   19E6             ; --- END TERMS
3542   19E6 E7            pop d
3543   19E7 FD 3E         mov [d], bl
3544   19E9             ; num = num / 10; 
3545   19E9 FA 05 00      lea d, [bp + 5] ; $num
3546   19EC DA            push d
3547   19ED FA 05 00      lea d, [bp + 5] ; $num
3548   19F0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3549   19F3 FD 39         mov c, b ; And place it into C
3550   19F5 2A            mov b, [d] ; Lower Word in B
3551   19F6             ; --- START FACTORS
3552   19F6 D7            push a
3553   19F7 11            mov a, b
3554   19F8 FD 2E 0A 00   mov32 cb, $0000000a
3554   19FC 00 00 
3555   19FE AE            div a, b
3556   19FF 27            mov b, a
3557   1A00 E4            pop a
3558   1A01             ; --- END FACTORS
3559   1A01 E7            pop d
3560   1A02 FD 43         mov [d], b
3561   1A04 28            mov b, c
3562   1A05 FD 44 02 00   mov [d + 2], b
3563   1A09             ; i++; 
3564   1A09 FA F5 FF      lea d, [bp + -11] ; $i
3565   1A0C 2A            mov b, [d]
3566   1A0D 38 00 00      mov c, 0
3567   1A10 11            mov a, b
3568   1A11 FD 77         inc b
3569   1A13 FA F5 FF      lea d, [bp + -11] ; $i
3570   1A16 FD 43         mov [d], b
3571   1A18 27            mov b, a
3572   1A19 0A 94 19      jmp _while42_cond
3573   1A1C             _while42_exit:
3574   1A1C             ; while (i > 0) { 
3575   1A1C             _while43_cond:
3576   1A1C FA F5 FF      lea d, [bp + -11] ; $i
3577   1A1F 2A            mov b, [d]
3578   1A20 38 00 00      mov c, 0
3579   1A23             ; --- START RELATIONAL
3580   1A23 D7            push a
3581   1A24 11            mov a, b
3582   1A25 FD 2E 00 00   mov32 cb, $00000000
3582   1A29 00 00 
3583   1A2B B0            cmp a, b
3584   1A2C FD 7F         sgt ; >
3585   1A2E E4            pop a
3586   1A2F             ; --- END RELATIONAL
3587   1A2F C0 00 00      cmp b, 0
3588   1A32 C6 64 1A      je _while43_exit
3589   1A35             _while43_block:
3590   1A35             ; i--; 
3591   1A35 FA F5 FF      lea d, [bp + -11] ; $i
3592   1A38 2A            mov b, [d]
3593   1A39 38 00 00      mov c, 0
3594   1A3C 11            mov a, b
3595   1A3D FD 7D         dec b
3596   1A3F FA F5 FF      lea d, [bp + -11] ; $i
3597   1A42 FD 43         mov [d], b
3598   1A44 27            mov b, a
3599   1A45             ; putchar(digits[i]); 
3600   1A45             ; --- START FUNCTION CALL
3601   1A45 FA F7 FF      lea d, [bp + -9] ; $digits
3602   1A48 D7            push a
3603   1A49 DA            push d
3604   1A4A FA F5 FF      lea d, [bp + -11] ; $i
3605   1A4D 2A            mov b, [d]
3606   1A4E 38 00 00      mov c, 0
3607   1A51 E7            pop d
3608   1A52 5A            add d, b
3609   1A53 E4            pop a
3610   1A54 32            mov bl, [d]
3611   1A55 A7 00         mov bh, 0
3612   1A57 38 00 00      mov c, 0
3613   1A5A DD            push bl
3614   1A5B 07 A2 1F      call putchar
3615   1A5E 51 01 00      add sp, 1
3616   1A61             ; --- END FUNCTION CALL
3617   1A61 0A 1C 1A      jmp _while43_cond
3618   1A64             _while43_exit:
3619   1A64 F9            leave
3620   1A65 09            ret
3621   1A66             
3622   1A66             print_unsigned_long:
3623   1A66 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3624   1A69             ; char digits[10]; 
3625   1A69 52 0A 00      sub sp, 10
3626   1A6C             ; int i; 
3627   1A6C 52 02 00      sub sp, 2
3628   1A6F             ; i = 0; 
3629   1A6F FA F5 FF      lea d, [bp + -11] ; $i
3630   1A72 DA            push d
3631   1A73 FD 2E 00 00   mov32 cb, $00000000
3631   1A77 00 00 
3632   1A79 E7            pop d
3633   1A7A FD 43         mov [d], b
3634   1A7C             ; if(num == 0){ 
3635   1A7C             _if44_cond:
3636   1A7C FA 05 00      lea d, [bp + 5] ; $num
3637   1A7F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3638   1A82 FD 39         mov c, b ; And place it into C
3639   1A84 2A            mov b, [d] ; Lower Word in B
3640   1A85             ; --- START RELATIONAL
3641   1A85 D7            push a
3642   1A86 FD D8         push g
3643   1A88 11            mov a, b
3644   1A89 FD 7A         mov g, c
3645   1A8B FD 2E 00 00   mov32 cb, $00000000
3645   1A8F 00 00 
3646   1A91 FD AF         cmp32 ga, cb
3647   1A93 FD 71         seq ; ==
3648   1A95 FD F1         pop g
3649   1A97 E4            pop a
3650   1A98             ; --- END RELATIONAL
3651   1A98 C0 00 00      cmp b, 0
3652   1A9B C6 B0 1A      je _if44_exit
3653   1A9E             _if44_TRUE:
3654   1A9E             ; putchar('0'); 
3655   1A9E             ; --- START FUNCTION CALL
3656   1A9E FD 2E 30 00   mov32 cb, $00000030
3656   1AA2 00 00 
3657   1AA4 DD            push bl
3658   1AA5 07 A2 1F      call putchar
3659   1AA8 51 01 00      add sp, 1
3660   1AAB             ; --- END FUNCTION CALL
3661   1AAB             ; return; 
3662   1AAB F9            leave
3663   1AAC 09            ret
3664   1AAD 0A B0 1A      jmp _if44_exit
3665   1AB0             _if44_exit:
3666   1AB0             ; while (num > 0) { 
3667   1AB0             _while45_cond:
3668   1AB0 FA 05 00      lea d, [bp + 5] ; $num
3669   1AB3 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3670   1AB6 FD 39         mov c, b ; And place it into C
3671   1AB8 2A            mov b, [d] ; Lower Word in B
3672   1AB9             ; --- START RELATIONAL
3673   1AB9 D7            push a
3674   1ABA FD D8         push g
3675   1ABC 11            mov a, b
3676   1ABD FD 7A         mov g, c
3677   1ABF FD 2E 00 00   mov32 cb, $00000000
3677   1AC3 00 00 
3678   1AC5 FD AF         cmp32 ga, cb
3679   1AC7 FD 81         sgu
3680   1AC9 FD F1         pop g
3681   1ACB E4            pop a
3682   1ACC             ; --- END RELATIONAL
3683   1ACC C0 00 00      cmp b, 0
3684   1ACF C6 38 1B      je _while45_exit
3685   1AD2             _while45_block:
3686   1AD2             ; digits[i] = '0' + (num % 10); 
3687   1AD2 FA F7 FF      lea d, [bp + -9] ; $digits
3688   1AD5 D7            push a
3689   1AD6 DA            push d
3690   1AD7 FA F5 FF      lea d, [bp + -11] ; $i
3691   1ADA 2A            mov b, [d]
3692   1ADB 38 00 00      mov c, 0
3693   1ADE E7            pop d
3694   1ADF 5A            add d, b
3695   1AE0 E4            pop a
3696   1AE1 DA            push d
3697   1AE2 FD 2E 30 00   mov32 cb, $00000030
3697   1AE6 00 00 
3698   1AE8             ; --- START TERMS
3699   1AE8 D7            push a
3700   1AE9 11            mov a, b
3701   1AEA FA 05 00      lea d, [bp + 5] ; $num
3702   1AED 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3703   1AF0 FD 39         mov c, b ; And place it into C
3704   1AF2 2A            mov b, [d] ; Lower Word in B
3705   1AF3             ; --- START FACTORS
3706   1AF3 D7            push a
3707   1AF4 11            mov a, b
3708   1AF5 FD 2E 0A 00   mov32 cb, $0000000a
3708   1AF9 00 00 
3709   1AFB AE            div a, b ; 
3710   1AFC 11            mov a, b
3711   1AFD 27            mov b, a
3712   1AFE E4            pop a
3713   1AFF             ; --- END FACTORS
3714   1AFF FD 15         add32 cb, ga
3715   1B01 E4            pop a
3716   1B02             ; --- END TERMS
3717   1B02 E7            pop d
3718   1B03 FD 3E         mov [d], bl
3719   1B05             ; num = num / 10; 
3720   1B05 FA 05 00      lea d, [bp + 5] ; $num
3721   1B08 DA            push d
3722   1B09 FA 05 00      lea d, [bp + 5] ; $num
3723   1B0C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3724   1B0F FD 39         mov c, b ; And place it into C
3725   1B11 2A            mov b, [d] ; Lower Word in B
3726   1B12             ; --- START FACTORS
3727   1B12 D7            push a
3728   1B13 11            mov a, b
3729   1B14 FD 2E 0A 00   mov32 cb, $0000000a
3729   1B18 00 00 
3730   1B1A AE            div a, b
3731   1B1B 27            mov b, a
3732   1B1C E4            pop a
3733   1B1D             ; --- END FACTORS
3734   1B1D E7            pop d
3735   1B1E FD 43         mov [d], b
3736   1B20 28            mov b, c
3737   1B21 FD 44 02 00   mov [d + 2], b
3738   1B25             ; i++; 
3739   1B25 FA F5 FF      lea d, [bp + -11] ; $i
3740   1B28 2A            mov b, [d]
3741   1B29 38 00 00      mov c, 0
3742   1B2C 11            mov a, b
3743   1B2D FD 77         inc b
3744   1B2F FA F5 FF      lea d, [bp + -11] ; $i
3745   1B32 FD 43         mov [d], b
3746   1B34 27            mov b, a
3747   1B35 0A B0 1A      jmp _while45_cond
3748   1B38             _while45_exit:
3749   1B38             ; while (i > 0) { 
3750   1B38             _while46_cond:
3751   1B38 FA F5 FF      lea d, [bp + -11] ; $i
3752   1B3B 2A            mov b, [d]
3753   1B3C 38 00 00      mov c, 0
3754   1B3F             ; --- START RELATIONAL
3755   1B3F D7            push a
3756   1B40 11            mov a, b
3757   1B41 FD 2E 00 00   mov32 cb, $00000000
3757   1B45 00 00 
3758   1B47 B0            cmp a, b
3759   1B48 FD 7F         sgt ; >
3760   1B4A E4            pop a
3761   1B4B             ; --- END RELATIONAL
3762   1B4B C0 00 00      cmp b, 0
3763   1B4E C6 80 1B      je _while46_exit
3764   1B51             _while46_block:
3765   1B51             ; i--; 
3766   1B51 FA F5 FF      lea d, [bp + -11] ; $i
3767   1B54 2A            mov b, [d]
3768   1B55 38 00 00      mov c, 0
3769   1B58 11            mov a, b
3770   1B59 FD 7D         dec b
3771   1B5B FA F5 FF      lea d, [bp + -11] ; $i
3772   1B5E FD 43         mov [d], b
3773   1B60 27            mov b, a
3774   1B61             ; putchar(digits[i]); 
3775   1B61             ; --- START FUNCTION CALL
3776   1B61 FA F7 FF      lea d, [bp + -9] ; $digits
3777   1B64 D7            push a
3778   1B65 DA            push d
3779   1B66 FA F5 FF      lea d, [bp + -11] ; $i
3780   1B69 2A            mov b, [d]
3781   1B6A 38 00 00      mov c, 0
3782   1B6D E7            pop d
3783   1B6E 5A            add d, b
3784   1B6F E4            pop a
3785   1B70 32            mov bl, [d]
3786   1B71 A7 00         mov bh, 0
3787   1B73 38 00 00      mov c, 0
3788   1B76 DD            push bl
3789   1B77 07 A2 1F      call putchar
3790   1B7A 51 01 00      add sp, 1
3791   1B7D             ; --- END FUNCTION CALL
3792   1B7D 0A 38 1B      jmp _while46_cond
3793   1B80             _while46_exit:
3794   1B80 F9            leave
3795   1B81 09            ret
3796   1B82             
3797   1B82             sprint_unsigned:
3798   1B82 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3799   1B85             ; char digits[5]; 
3800   1B85 52 05 00      sub sp, 5
3801   1B88             ; int i; 
3802   1B88 52 02 00      sub sp, 2
3803   1B8B             ; int len = 0; 
3804   1B8B 52 02 00      sub sp, 2
3805   1B8E             ; --- START LOCAL VAR INITIALIZATION
3806   1B8E FA F8 FF      lea d, [bp + -8] ; $len
3807   1B91 DA            push d
3808   1B92 FD 2E 00 00   mov32 cb, $00000000
3808   1B96 00 00 
3809   1B98 E7            pop d
3810   1B99 FD 43         mov [d], b
3811   1B9B             ; --- END LOCAL VAR INITIALIZATION
3812   1B9B             ; i = 0; 
3813   1B9B FA FA FF      lea d, [bp + -6] ; $i
3814   1B9E DA            push d
3815   1B9F FD 2E 00 00   mov32 cb, $00000000
3815   1BA3 00 00 
3816   1BA5 E7            pop d
3817   1BA6 FD 43         mov [d], b
3818   1BA8             ; if(num == 0){ 
3819   1BA8             _if47_cond:
3820   1BA8 FA 07 00      lea d, [bp + 7] ; $num
3821   1BAB 2A            mov b, [d]
3822   1BAC 38 00 00      mov c, 0
3823   1BAF             ; --- START RELATIONAL
3824   1BAF D7            push a
3825   1BB0 11            mov a, b
3826   1BB1 FD 2E 00 00   mov32 cb, $00000000
3826   1BB5 00 00 
3827   1BB7 B0            cmp a, b
3828   1BB8 FD 71         seq ; ==
3829   1BBA E4            pop a
3830   1BBB             ; --- END RELATIONAL
3831   1BBB C0 00 00      cmp b, 0
3832   1BBE C6 E6 1B      je _if47_exit
3833   1BC1             _if47_TRUE:
3834   1BC1             ; *dest++ = '0'; 
3835   1BC1 FA 05 00      lea d, [bp + 5] ; $dest
3836   1BC4 2A            mov b, [d]
3837   1BC5 38 00 00      mov c, 0
3838   1BC8 FD 77         inc b
3839   1BCA FA 05 00      lea d, [bp + 5] ; $dest
3840   1BCD FD 43         mov [d], b
3841   1BCF FD 7D         dec b
3842   1BD1 D8            push b
3843   1BD2 FD 2E 30 00   mov32 cb, $00000030
3843   1BD6 00 00 
3844   1BD8 E7            pop d
3845   1BD9 FD 3E         mov [d], bl
3846   1BDB             ; return 1; 
3847   1BDB FD 2E 01 00   mov32 cb, $00000001
3847   1BDF 00 00 
3848   1BE1 F9            leave
3849   1BE2 09            ret
3850   1BE3 0A E6 1B      jmp _if47_exit
3851   1BE6             _if47_exit:
3852   1BE6             ; while (num > 0) { 
3853   1BE6             _while48_cond:
3854   1BE6 FA 07 00      lea d, [bp + 7] ; $num
3855   1BE9 2A            mov b, [d]
3856   1BEA 38 00 00      mov c, 0
3857   1BED             ; --- START RELATIONAL
3858   1BED D7            push a
3859   1BEE 11            mov a, b
3860   1BEF FD 2E 00 00   mov32 cb, $00000000
3860   1BF3 00 00 
3861   1BF5 B0            cmp a, b
3862   1BF6 FD 81         sgu ; > (unsigned)
3863   1BF8 E4            pop a
3864   1BF9             ; --- END RELATIONAL
3865   1BF9 C0 00 00      cmp b, 0
3866   1BFC C6 5B 1C      je _while48_exit
3867   1BFF             _while48_block:
3868   1BFF             ; digits[i] = '0' + (num % 10); 
3869   1BFF FA FC FF      lea d, [bp + -4] ; $digits
3870   1C02 D7            push a
3871   1C03 DA            push d
3872   1C04 FA FA FF      lea d, [bp + -6] ; $i
3873   1C07 2A            mov b, [d]
3874   1C08 38 00 00      mov c, 0
3875   1C0B E7            pop d
3876   1C0C 5A            add d, b
3877   1C0D E4            pop a
3878   1C0E DA            push d
3879   1C0F FD 2E 30 00   mov32 cb, $00000030
3879   1C13 00 00 
3880   1C15             ; --- START TERMS
3881   1C15 D7            push a
3882   1C16 11            mov a, b
3883   1C17 FA 07 00      lea d, [bp + 7] ; $num
3884   1C1A 2A            mov b, [d]
3885   1C1B 38 00 00      mov c, 0
3886   1C1E             ; --- START FACTORS
3887   1C1E D7            push a
3888   1C1F 11            mov a, b
3889   1C20 FD 2E 0A 00   mov32 cb, $0000000a
3889   1C24 00 00 
3890   1C26 AE            div a, b ; 
3891   1C27 11            mov a, b
3892   1C28 27            mov b, a
3893   1C29 E4            pop a
3894   1C2A             ; --- END FACTORS
3895   1C2A 56            add b, a
3896   1C2B E4            pop a
3897   1C2C             ; --- END TERMS
3898   1C2C E7            pop d
3899   1C2D FD 3E         mov [d], bl
3900   1C2F             ; num = num / 10; 
3901   1C2F FA 07 00      lea d, [bp + 7] ; $num
3902   1C32 DA            push d
3903   1C33 FA 07 00      lea d, [bp + 7] ; $num
3904   1C36 2A            mov b, [d]
3905   1C37 38 00 00      mov c, 0
3906   1C3A             ; --- START FACTORS
3907   1C3A D7            push a
3908   1C3B 11            mov a, b
3909   1C3C FD 2E 0A 00   mov32 cb, $0000000a
3909   1C40 00 00 
3910   1C42 AE            div a, b
3911   1C43 27            mov b, a
3912   1C44 E4            pop a
3913   1C45             ; --- END FACTORS
3914   1C45 E7            pop d
3915   1C46 FD 43         mov [d], b
3916   1C48             ; i++; 
3917   1C48 FA FA FF      lea d, [bp + -6] ; $i
3918   1C4B 2A            mov b, [d]
3919   1C4C 38 00 00      mov c, 0
3920   1C4F 11            mov a, b
3921   1C50 FD 77         inc b
3922   1C52 FA FA FF      lea d, [bp + -6] ; $i
3923   1C55 FD 43         mov [d], b
3924   1C57 27            mov b, a
3925   1C58 0A E6 1B      jmp _while48_cond
3926   1C5B             _while48_exit:
3927   1C5B             ; while (i > 0) { 
3928   1C5B             _while49_cond:
3929   1C5B FA FA FF      lea d, [bp + -6] ; $i
3930   1C5E 2A            mov b, [d]
3931   1C5F 38 00 00      mov c, 0
3932   1C62             ; --- START RELATIONAL
3933   1C62 D7            push a
3934   1C63 11            mov a, b
3935   1C64 FD 2E 00 00   mov32 cb, $00000000
3935   1C68 00 00 
3936   1C6A B0            cmp a, b
3937   1C6B FD 7F         sgt ; >
3938   1C6D E4            pop a
3939   1C6E             ; --- END RELATIONAL
3940   1C6E C0 00 00      cmp b, 0
3941   1C71 C6 C0 1C      je _while49_exit
3942   1C74             _while49_block:
3943   1C74             ; i--; 
3944   1C74 FA FA FF      lea d, [bp + -6] ; $i
3945   1C77 2A            mov b, [d]
3946   1C78 38 00 00      mov c, 0
3947   1C7B 11            mov a, b
3948   1C7C FD 7D         dec b
3949   1C7E FA FA FF      lea d, [bp + -6] ; $i
3950   1C81 FD 43         mov [d], b
3951   1C83 27            mov b, a
3952   1C84             ; *dest++ = digits[i]; 
3953   1C84 FA 05 00      lea d, [bp + 5] ; $dest
3954   1C87 2A            mov b, [d]
3955   1C88 38 00 00      mov c, 0
3956   1C8B FD 77         inc b
3957   1C8D FA 05 00      lea d, [bp + 5] ; $dest
3958   1C90 FD 43         mov [d], b
3959   1C92 FD 7D         dec b
3960   1C94 D8            push b
3961   1C95 FA FC FF      lea d, [bp + -4] ; $digits
3962   1C98 D7            push a
3963   1C99 DA            push d
3964   1C9A FA FA FF      lea d, [bp + -6] ; $i
3965   1C9D 2A            mov b, [d]
3966   1C9E 38 00 00      mov c, 0
3967   1CA1 E7            pop d
3968   1CA2 5A            add d, b
3969   1CA3 E4            pop a
3970   1CA4 32            mov bl, [d]
3971   1CA5 A7 00         mov bh, 0
3972   1CA7 38 00 00      mov c, 0
3973   1CAA E7            pop d
3974   1CAB FD 3E         mov [d], bl
3975   1CAD             ; len++; 
3976   1CAD FA F8 FF      lea d, [bp + -8] ; $len
3977   1CB0 2A            mov b, [d]
3978   1CB1 38 00 00      mov c, 0
3979   1CB4 11            mov a, b
3980   1CB5 FD 77         inc b
3981   1CB7 FA F8 FF      lea d, [bp + -8] ; $len
3982   1CBA FD 43         mov [d], b
3983   1CBC 27            mov b, a
3984   1CBD 0A 5B 1C      jmp _while49_cond
3985   1CC0             _while49_exit:
3986   1CC0             ; *dest = '\0'; 
3987   1CC0 FA 05 00      lea d, [bp + 5] ; $dest
3988   1CC3 2A            mov b, [d]
3989   1CC4 38 00 00      mov c, 0
3990   1CC7 D8            push b
3991   1CC8 FD 2E 00 00   mov32 cb, $00000000
3991   1CCC 00 00 
3992   1CCE E7            pop d
3993   1CCF FD 3E         mov [d], bl
3994   1CD1             ; return len; 
3995   1CD1 FA F8 FF      lea d, [bp + -8] ; $len
3996   1CD4 2A            mov b, [d]
3997   1CD5 38 00 00      mov c, 0
3998   1CD8 F9            leave
3999   1CD9 09            ret
4000   1CDA             
4001   1CDA             print_unsigned:
4002   1CDA F8 00 00      enter 0 ; (push bp; mov bp, sp)
4003   1CDD             ; char digits[5]; 
4004   1CDD 52 05 00      sub sp, 5
4005   1CE0             ; int i; 
4006   1CE0 52 02 00      sub sp, 2
4007   1CE3             ; i = 0; 
4008   1CE3 FA FA FF      lea d, [bp + -6] ; $i
4009   1CE6 DA            push d
4010   1CE7 FD 2E 00 00   mov32 cb, $00000000
4010   1CEB 00 00 
4011   1CED E7            pop d
4012   1CEE FD 43         mov [d], b
4013   1CF0             ; if(num == 0){ 
4014   1CF0             _if50_cond:
4015   1CF0 FA 05 00      lea d, [bp + 5] ; $num
4016   1CF3 2A            mov b, [d]
4017   1CF4 38 00 00      mov c, 0
4018   1CF7             ; --- START RELATIONAL
4019   1CF7 D7            push a
4020   1CF8 11            mov a, b
4021   1CF9 FD 2E 00 00   mov32 cb, $00000000
4021   1CFD 00 00 
4022   1CFF B0            cmp a, b
4023   1D00 FD 71         seq ; ==
4024   1D02 E4            pop a
4025   1D03             ; --- END RELATIONAL
4026   1D03 C0 00 00      cmp b, 0
4027   1D06 C6 1B 1D      je _if50_exit
4028   1D09             _if50_TRUE:
4029   1D09             ; putchar('0'); 
4030   1D09             ; --- START FUNCTION CALL
4031   1D09 FD 2E 30 00   mov32 cb, $00000030
4031   1D0D 00 00 
4032   1D0F DD            push bl
4033   1D10 07 A2 1F      call putchar
4034   1D13 51 01 00      add sp, 1
4035   1D16             ; --- END FUNCTION CALL
4036   1D16             ; return; 
4037   1D16 F9            leave
4038   1D17 09            ret
4039   1D18 0A 1B 1D      jmp _if50_exit
4040   1D1B             _if50_exit:
4041   1D1B             ; while (num > 0) { 
4042   1D1B             _while51_cond:
4043   1D1B FA 05 00      lea d, [bp + 5] ; $num
4044   1D1E 2A            mov b, [d]
4045   1D1F 38 00 00      mov c, 0
4046   1D22             ; --- START RELATIONAL
4047   1D22 D7            push a
4048   1D23 11            mov a, b
4049   1D24 FD 2E 00 00   mov32 cb, $00000000
4049   1D28 00 00 
4050   1D2A B0            cmp a, b
4051   1D2B FD 81         sgu ; > (unsigned)
4052   1D2D E4            pop a
4053   1D2E             ; --- END RELATIONAL
4054   1D2E C0 00 00      cmp b, 0
4055   1D31 C6 90 1D      je _while51_exit
4056   1D34             _while51_block:
4057   1D34             ; digits[i] = '0' + (num % 10); 
4058   1D34 FA FC FF      lea d, [bp + -4] ; $digits
4059   1D37 D7            push a
4060   1D38 DA            push d
4061   1D39 FA FA FF      lea d, [bp + -6] ; $i
4062   1D3C 2A            mov b, [d]
4063   1D3D 38 00 00      mov c, 0
4064   1D40 E7            pop d
4065   1D41 5A            add d, b
4066   1D42 E4            pop a
4067   1D43 DA            push d
4068   1D44 FD 2E 30 00   mov32 cb, $00000030
4068   1D48 00 00 
4069   1D4A             ; --- START TERMS
4070   1D4A D7            push a
4071   1D4B 11            mov a, b
4072   1D4C FA 05 00      lea d, [bp + 5] ; $num
4073   1D4F 2A            mov b, [d]
4074   1D50 38 00 00      mov c, 0
4075   1D53             ; --- START FACTORS
4076   1D53 D7            push a
4077   1D54 11            mov a, b
4078   1D55 FD 2E 0A 00   mov32 cb, $0000000a
4078   1D59 00 00 
4079   1D5B AE            div a, b ; 
4080   1D5C 11            mov a, b
4081   1D5D 27            mov b, a
4082   1D5E E4            pop a
4083   1D5F             ; --- END FACTORS
4084   1D5F 56            add b, a
4085   1D60 E4            pop a
4086   1D61             ; --- END TERMS
4087   1D61 E7            pop d
4088   1D62 FD 3E         mov [d], bl
4089   1D64             ; num = num / 10; 
4090   1D64 FA 05 00      lea d, [bp + 5] ; $num
4091   1D67 DA            push d
4092   1D68 FA 05 00      lea d, [bp + 5] ; $num
4093   1D6B 2A            mov b, [d]
4094   1D6C 38 00 00      mov c, 0
4095   1D6F             ; --- START FACTORS
4096   1D6F D7            push a
4097   1D70 11            mov a, b
4098   1D71 FD 2E 0A 00   mov32 cb, $0000000a
4098   1D75 00 00 
4099   1D77 AE            div a, b
4100   1D78 27            mov b, a
4101   1D79 E4            pop a
4102   1D7A             ; --- END FACTORS
4103   1D7A E7            pop d
4104   1D7B FD 43         mov [d], b
4105   1D7D             ; i++; 
4106   1D7D FA FA FF      lea d, [bp + -6] ; $i
4107   1D80 2A            mov b, [d]
4108   1D81 38 00 00      mov c, 0
4109   1D84 11            mov a, b
4110   1D85 FD 77         inc b
4111   1D87 FA FA FF      lea d, [bp + -6] ; $i
4112   1D8A FD 43         mov [d], b
4113   1D8C 27            mov b, a
4114   1D8D 0A 1B 1D      jmp _while51_cond
4115   1D90             _while51_exit:
4116   1D90             ; while (i > 0) { 
4117   1D90             _while52_cond:
4118   1D90 FA FA FF      lea d, [bp + -6] ; $i
4119   1D93 2A            mov b, [d]
4120   1D94 38 00 00      mov c, 0
4121   1D97             ; --- START RELATIONAL
4122   1D97 D7            push a
4123   1D98 11            mov a, b
4124   1D99 FD 2E 00 00   mov32 cb, $00000000
4124   1D9D 00 00 
4125   1D9F B0            cmp a, b
4126   1DA0 FD 7F         sgt ; >
4127   1DA2 E4            pop a
4128   1DA3             ; --- END RELATIONAL
4129   1DA3 C0 00 00      cmp b, 0
4130   1DA6 C6 D8 1D      je _while52_exit
4131   1DA9             _while52_block:
4132   1DA9             ; i--; 
4133   1DA9 FA FA FF      lea d, [bp + -6] ; $i
4134   1DAC 2A            mov b, [d]
4135   1DAD 38 00 00      mov c, 0
4136   1DB0 11            mov a, b
4137   1DB1 FD 7D         dec b
4138   1DB3 FA FA FF      lea d, [bp + -6] ; $i
4139   1DB6 FD 43         mov [d], b
4140   1DB8 27            mov b, a
4141   1DB9             ; putchar(digits[i]); 
4142   1DB9             ; --- START FUNCTION CALL
4143   1DB9 FA FC FF      lea d, [bp + -4] ; $digits
4144   1DBC D7            push a
4145   1DBD DA            push d
4146   1DBE FA FA FF      lea d, [bp + -6] ; $i
4147   1DC1 2A            mov b, [d]
4148   1DC2 38 00 00      mov c, 0
4149   1DC5 E7            pop d
4150   1DC6 5A            add d, b
4151   1DC7 E4            pop a
4152   1DC8 32            mov bl, [d]
4153   1DC9 A7 00         mov bh, 0
4154   1DCB 38 00 00      mov c, 0
4155   1DCE DD            push bl
4156   1DCF 07 A2 1F      call putchar
4157   1DD2 51 01 00      add sp, 1
4158   1DD5             ; --- END FUNCTION CALL
4159   1DD5 0A 90 1D      jmp _while52_cond
4160   1DD8             _while52_exit:
4161   1DD8 F9            leave
4162   1DD9 09            ret
4163   1DDA             
4164   1DDA             sprint_signed:
4165   1DDA F8 00 00      enter 0 ; (push bp; mov bp, sp)
4166   1DDD             ; char digits[5]; 
4167   1DDD 52 05 00      sub sp, 5
4168   1DE0             ; int i = 0; 
4169   1DE0 52 02 00      sub sp, 2
4170   1DE3             ; --- START LOCAL VAR INITIALIZATION
4171   1DE3 FA FA FF      lea d, [bp + -6] ; $i
4172   1DE6 DA            push d
4173   1DE7 FD 2E 00 00   mov32 cb, $00000000
4173   1DEB 00 00 
4174   1DED E7            pop d
4175   1DEE FD 43         mov [d], b
4176   1DF0             ; --- END LOCAL VAR INITIALIZATION
4177   1DF0             ; int len = 0; 
4178   1DF0 52 02 00      sub sp, 2
4179   1DF3             ; --- START LOCAL VAR INITIALIZATION
4180   1DF3 FA F8 FF      lea d, [bp + -8] ; $len
4181   1DF6 DA            push d
4182   1DF7 FD 2E 00 00   mov32 cb, $00000000
4182   1DFB 00 00 
4183   1DFD E7            pop d
4184   1DFE FD 43         mov [d], b
4185   1E00             ; --- END LOCAL VAR INITIALIZATION
4186   1E00             ; if (num < 0) { 
4187   1E00             _if53_cond:
4188   1E00 FA 07 00      lea d, [bp + 7] ; $num
4189   1E03 2A            mov b, [d]
4190   1E04 38 00 00      mov c, 0
4191   1E07             ; --- START RELATIONAL
4192   1E07 D7            push a
4193   1E08 11            mov a, b
4194   1E09 FD 2E 00 00   mov32 cb, $00000000
4194   1E0D 00 00 
4195   1E0F B0            cmp a, b
4196   1E10 FD 73         slt ; < (signed)
4197   1E12 E4            pop a
4198   1E13             ; --- END RELATIONAL
4199   1E13 C0 00 00      cmp b, 0
4200   1E16 C6 56 1E      je _if53_else
4201   1E19             _if53_TRUE:
4202   1E19             ; *dest++ = '-'; 
4203   1E19 FA 05 00      lea d, [bp + 5] ; $dest
4204   1E1C 2A            mov b, [d]
4205   1E1D 38 00 00      mov c, 0
4206   1E20 FD 77         inc b
4207   1E22 FA 05 00      lea d, [bp + 5] ; $dest
4208   1E25 FD 43         mov [d], b
4209   1E27 FD 7D         dec b
4210   1E29 D8            push b
4211   1E2A FD 2E 2D 00   mov32 cb, $0000002d
4211   1E2E 00 00 
4212   1E30 E7            pop d
4213   1E31 FD 3E         mov [d], bl
4214   1E33             ; num = -num; 
4215   1E33 FA 07 00      lea d, [bp + 7] ; $num
4216   1E36 DA            push d
4217   1E37 FA 07 00      lea d, [bp + 7] ; $num
4218   1E3A 2A            mov b, [d]
4219   1E3B 38 00 00      mov c, 0
4220   1E3E FD 97         neg b
4221   1E40 E7            pop d
4222   1E41 FD 43         mov [d], b
4223   1E43             ; len++; 
4224   1E43 FA F8 FF      lea d, [bp + -8] ; $len
4225   1E46 2A            mov b, [d]
4226   1E47 38 00 00      mov c, 0
4227   1E4A 11            mov a, b
4228   1E4B FD 77         inc b
4229   1E4D FA F8 FF      lea d, [bp + -8] ; $len
4230   1E50 FD 43         mov [d], b
4231   1E52 27            mov b, a
4232   1E53 0A A5 1E      jmp _if53_exit
4233   1E56             _if53_else:
4234   1E56             ; if (num == 0) { 
4235   1E56             _if54_cond:
4236   1E56 FA 07 00      lea d, [bp + 7] ; $num
4237   1E59 2A            mov b, [d]
4238   1E5A 38 00 00      mov c, 0
4239   1E5D             ; --- START RELATIONAL
4240   1E5D D7            push a
4241   1E5E 11            mov a, b
4242   1E5F FD 2E 00 00   mov32 cb, $00000000
4242   1E63 00 00 
4243   1E65 B0            cmp a, b
4244   1E66 FD 71         seq ; ==
4245   1E68 E4            pop a
4246   1E69             ; --- END RELATIONAL
4247   1E69 C0 00 00      cmp b, 0
4248   1E6C C6 A5 1E      je _if54_exit
4249   1E6F             _if54_TRUE:
4250   1E6F             ; *dest++ = '0'; 
4251   1E6F FA 05 00      lea d, [bp + 5] ; $dest
4252   1E72 2A            mov b, [d]
4253   1E73 38 00 00      mov c, 0
4254   1E76 FD 77         inc b
4255   1E78 FA 05 00      lea d, [bp + 5] ; $dest
4256   1E7B FD 43         mov [d], b
4257   1E7D FD 7D         dec b
4258   1E7F D8            push b
4259   1E80 FD 2E 30 00   mov32 cb, $00000030
4259   1E84 00 00 
4260   1E86 E7            pop d
4261   1E87 FD 3E         mov [d], bl
4262   1E89             ; *dest = '\0'; 
4263   1E89 FA 05 00      lea d, [bp + 5] ; $dest
4264   1E8C 2A            mov b, [d]
4265   1E8D 38 00 00      mov c, 0
4266   1E90 D8            push b
4267   1E91 FD 2E 00 00   mov32 cb, $00000000
4267   1E95 00 00 
4268   1E97 E7            pop d
4269   1E98 FD 3E         mov [d], bl
4270   1E9A             ; return 1; 
4271   1E9A FD 2E 01 00   mov32 cb, $00000001
4271   1E9E 00 00 
4272   1EA0 F9            leave
4273   1EA1 09            ret
4274   1EA2 0A A5 1E      jmp _if54_exit
4275   1EA5             _if54_exit:
4276   1EA5             _if53_exit:
4277   1EA5             ; while (num > 0) { 
4278   1EA5             _while55_cond:
4279   1EA5 FA 07 00      lea d, [bp + 7] ; $num
4280   1EA8 2A            mov b, [d]
4281   1EA9 38 00 00      mov c, 0
4282   1EAC             ; --- START RELATIONAL
4283   1EAC D7            push a
4284   1EAD 11            mov a, b
4285   1EAE FD 2E 00 00   mov32 cb, $00000000
4285   1EB2 00 00 
4286   1EB4 B0            cmp a, b
4287   1EB5 FD 7F         sgt ; >
4288   1EB7 E4            pop a
4289   1EB8             ; --- END RELATIONAL
4290   1EB8 C0 00 00      cmp b, 0
4291   1EBB C6 1A 1F      je _while55_exit
4292   1EBE             _while55_block:
4293   1EBE             ; digits[i] = '0' + (num % 10); 
4294   1EBE FA FC FF      lea d, [bp + -4] ; $digits
4295   1EC1 D7            push a
4296   1EC2 DA            push d
4297   1EC3 FA FA FF      lea d, [bp + -6] ; $i
4298   1EC6 2A            mov b, [d]
4299   1EC7 38 00 00      mov c, 0
4300   1ECA E7            pop d
4301   1ECB 5A            add d, b
4302   1ECC E4            pop a
4303   1ECD DA            push d
4304   1ECE FD 2E 30 00   mov32 cb, $00000030
4304   1ED2 00 00 
4305   1ED4             ; --- START TERMS
4306   1ED4 D7            push a
4307   1ED5 11            mov a, b
4308   1ED6 FA 07 00      lea d, [bp + 7] ; $num
4309   1ED9 2A            mov b, [d]
4310   1EDA 38 00 00      mov c, 0
4311   1EDD             ; --- START FACTORS
4312   1EDD D7            push a
4313   1EDE 11            mov a, b
4314   1EDF FD 2E 0A 00   mov32 cb, $0000000a
4314   1EE3 00 00 
4315   1EE5 AE            div a, b ; 
4316   1EE6 11            mov a, b
4317   1EE7 27            mov b, a
4318   1EE8 E4            pop a
4319   1EE9             ; --- END FACTORS
4320   1EE9 56            add b, a
4321   1EEA E4            pop a
4322   1EEB             ; --- END TERMS
4323   1EEB E7            pop d
4324   1EEC FD 3E         mov [d], bl
4325   1EEE             ; num = num / 10; 
4326   1EEE FA 07 00      lea d, [bp + 7] ; $num
4327   1EF1 DA            push d
4328   1EF2 FA 07 00      lea d, [bp + 7] ; $num
4329   1EF5 2A            mov b, [d]
4330   1EF6 38 00 00      mov c, 0
4331   1EF9             ; --- START FACTORS
4332   1EF9 D7            push a
4333   1EFA 11            mov a, b
4334   1EFB FD 2E 0A 00   mov32 cb, $0000000a
4334   1EFF 00 00 
4335   1F01 AE            div a, b
4336   1F02 27            mov b, a
4337   1F03 E4            pop a
4338   1F04             ; --- END FACTORS
4339   1F04 E7            pop d
4340   1F05 FD 43         mov [d], b
4341   1F07             ; i++; 
4342   1F07 FA FA FF      lea d, [bp + -6] ; $i
4343   1F0A 2A            mov b, [d]
4344   1F0B 38 00 00      mov c, 0
4345   1F0E 11            mov a, b
4346   1F0F FD 77         inc b
4347   1F11 FA FA FF      lea d, [bp + -6] ; $i
4348   1F14 FD 43         mov [d], b
4349   1F16 27            mov b, a
4350   1F17 0A A5 1E      jmp _while55_cond
4351   1F1A             _while55_exit:
4352   1F1A             ; while (i > 0) { 
4353   1F1A             _while56_cond:
4354   1F1A FA FA FF      lea d, [bp + -6] ; $i
4355   1F1D 2A            mov b, [d]
4356   1F1E 38 00 00      mov c, 0
4357   1F21             ; --- START RELATIONAL
4358   1F21 D7            push a
4359   1F22 11            mov a, b
4360   1F23 FD 2E 00 00   mov32 cb, $00000000
4360   1F27 00 00 
4361   1F29 B0            cmp a, b
4362   1F2A FD 7F         sgt ; >
4363   1F2C E4            pop a
4364   1F2D             ; --- END RELATIONAL
4365   1F2D C0 00 00      cmp b, 0
4366   1F30 C6 7F 1F      je _while56_exit
4367   1F33             _while56_block:
4368   1F33             ; i--; 
4369   1F33 FA FA FF      lea d, [bp + -6] ; $i
4370   1F36 2A            mov b, [d]
4371   1F37 38 00 00      mov c, 0
4372   1F3A 11            mov a, b
4373   1F3B FD 7D         dec b
4374   1F3D FA FA FF      lea d, [bp + -6] ; $i
4375   1F40 FD 43         mov [d], b
4376   1F42 27            mov b, a
4377   1F43             ; *dest++ = digits[i]; 
4378   1F43 FA 05 00      lea d, [bp + 5] ; $dest
4379   1F46 2A            mov b, [d]
4380   1F47 38 00 00      mov c, 0
4381   1F4A FD 77         inc b
4382   1F4C FA 05 00      lea d, [bp + 5] ; $dest
4383   1F4F FD 43         mov [d], b
4384   1F51 FD 7D         dec b
4385   1F53 D8            push b
4386   1F54 FA FC FF      lea d, [bp + -4] ; $digits
4387   1F57 D7            push a
4388   1F58 DA            push d
4389   1F59 FA FA FF      lea d, [bp + -6] ; $i
4390   1F5C 2A            mov b, [d]
4391   1F5D 38 00 00      mov c, 0
4392   1F60 E7            pop d
4393   1F61 5A            add d, b
4394   1F62 E4            pop a
4395   1F63 32            mov bl, [d]
4396   1F64 A7 00         mov bh, 0
4397   1F66 38 00 00      mov c, 0
4398   1F69 E7            pop d
4399   1F6A FD 3E         mov [d], bl
4400   1F6C             ; len++; 
4401   1F6C FA F8 FF      lea d, [bp + -8] ; $len
4402   1F6F 2A            mov b, [d]
4403   1F70 38 00 00      mov c, 0
4404   1F73 11            mov a, b
4405   1F74 FD 77         inc b
4406   1F76 FA F8 FF      lea d, [bp + -8] ; $len
4407   1F79 FD 43         mov [d], b
4408   1F7B 27            mov b, a
4409   1F7C 0A 1A 1F      jmp _while56_cond
4410   1F7F             _while56_exit:
4411   1F7F             ; *dest = '\0'; 
4412   1F7F FA 05 00      lea d, [bp + 5] ; $dest
4413   1F82 2A            mov b, [d]
4414   1F83 38 00 00      mov c, 0
4415   1F86 D8            push b
4416   1F87 FD 2E 00 00   mov32 cb, $00000000
4416   1F8B 00 00 
4417   1F8D E7            pop d
4418   1F8E FD 3E         mov [d], bl
4419   1F90             ; return len; 
4420   1F90 FA F8 FF      lea d, [bp + -8] ; $len
4421   1F93 2A            mov b, [d]
4422   1F94 38 00 00      mov c, 0
4423   1F97 F9            leave
4424   1F98 09            ret
4425   1F99             
4426   1F99             date:
4427   1F99 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4428   1F9C             
4429   1F9C             ; --- BEGIN INLINE ASM SEGMENT
4430   1F9C 19 00         mov al, 0 
4431   1F9E 05 07         syscall sys_datetime
4432   1FA0             ; --- END INLINE ASM SEGMENT
4433   1FA0             
4434   1FA0 F9            leave
4435   1FA1 09            ret
4436   1FA2             
4437   1FA2             putchar:
4438   1FA2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4439   1FA5             
4440   1FA5             ; --- BEGIN INLINE ASM SEGMENT
4441   1FA5 FA 05 00      lea d, [bp + 5] ; $c
4442   1FA8 1E            mov al, [d]
4443   1FA9 23            mov ah, al
4444   1FAA 07 B1 21      call _putchar
4445   1FAD             ; --- END INLINE ASM SEGMENT
4446   1FAD             
4447   1FAD F9            leave
4448   1FAE 09            ret
4449   1FAF             
4450   1FAF             getchar:
4451   1FAF F8 00 00      enter 0 ; (push bp; mov bp, sp)
4452   1FB2             ; char c; 
4453   1FB2 52 01 00      sub sp, 1
4454   1FB5             
4455   1FB5             ; --- BEGIN INLINE ASM SEGMENT
4456   1FB5 07 AA 21      call getch
4457   1FB8 1A            mov al, ah
4458   1FB9 FA 00 00      lea d, [bp + 0] ; $c
4459   1FBC 3E            mov [d], al
4460   1FBD             ; --- END INLINE ASM SEGMENT
4461   1FBD             
4462   1FBD             ; return c; 
4463   1FBD FA 00 00      lea d, [bp + 0] ; $c
4464   1FC0 32            mov bl, [d]
4465   1FC1 A7 00         mov bh, 0
4466   1FC3 38 00 00      mov c, 0
4467   1FC6 F9            leave
4468   1FC7 09            ret
4469   1FC8             
4470   1FC8             scann:
4471   1FC8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4472   1FCB             ; int m; 
4473   1FCB 52 02 00      sub sp, 2
4474   1FCE             
4475   1FCE             ; --- BEGIN INLINE ASM SEGMENT
4476   1FCE 07 F5 23      call scan_u16d
4477   1FD1 FA FF FF      lea d, [bp + -1] ; $m
4478   1FD4 43            mov [d], a
4479   1FD5             ; --- END INLINE ASM SEGMENT
4480   1FD5             
4481   1FD5             ; return m; 
4482   1FD5 FA FF FF      lea d, [bp + -1] ; $m
4483   1FD8 2A            mov b, [d]
4484   1FD9 38 00 00      mov c, 0
4485   1FDC F9            leave
4486   1FDD 09            ret
4487   1FDE             
4488   1FDE             puts:
4489   1FDE F8 00 00      enter 0 ; (push bp; mov bp, sp)
4490   1FE1             
4491   1FE1             ; --- BEGIN INLINE ASM SEGMENT
4492   1FE1 FA 05 00      lea d, [bp + 5] ; $s
4493   1FE4 15            mov a, [d]
4494   1FE5 3C            mov d, a
4495   1FE6 07 FB 22      call _puts
4496   1FE9 10 00 0A      mov a, $0A00
4497   1FEC 05 03         syscall sys_io
4498   1FEE             ; --- END INLINE ASM SEGMENT
4499   1FEE             
4500   1FEE F9            leave
4501   1FEF 09            ret
4502   1FF0             
4503   1FF0             print:
4504   1FF0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4505   1FF3             
4506   1FF3             ; --- BEGIN INLINE ASM SEGMENT
4507   1FF3 FA 05 00      lea d, [bp + 5] ; $s
4508   1FF6 FD 2A         mov d, [d]
4509   1FF8 07 FB 22      call _puts
4510   1FFB             ; --- END INLINE ASM SEGMENT
4511   1FFB             
4512   1FFB F9            leave
4513   1FFC 09            ret
4514   1FFD             
4515   1FFD             getparam:
4516   1FFD F8 00 00      enter 0 ; (push bp; mov bp, sp)
4517   2000             ; char data; 
4518   2000 52 01 00      sub sp, 1
4519   2003             
4520   2003             ; --- BEGIN INLINE ASM SEGMENT
4521   2003 19 04         mov al, 4
4522   2005 FA 05 00      lea d, [bp + 5] ; $address
4523   2008 FD 2A         mov d, [d]
4524   200A 05 0C         syscall sys_system
4525   200C FA 00 00      lea d, [bp + 0] ; $data
4526   200F FD 3E         mov [d], bl
4527   2011             ; --- END INLINE ASM SEGMENT
4528   2011             
4529   2011             ; return data; 
4530   2011 FA 00 00      lea d, [bp + 0] ; $data
4531   2014 32            mov bl, [d]
4532   2015 A7 00         mov bh, 0
4533   2017 38 00 00      mov c, 0
4534   201A F9            leave
4535   201B 09            ret
4536   201C             
4537   201C             clear:
4538   201C F8 00 00      enter 0 ; (push bp; mov bp, sp)
4539   201F             ; print("\033[2J\033[H"); 
4540   201F             ; --- START FUNCTION CALL
4541   201F 26 04 27      mov b, _s11 ; "\033[2J\033[H"
4542   2022 FD AB         swp b
4543   2024 D8            push b
4544   2025 07 F0 1F      call print
4545   2028 51 02 00      add sp, 2
4546   202B             ; --- END FUNCTION CALL
4547   202B F9            leave
4548   202C 09            ret
4549   202D             
4550   202D             abs:
4551   202D F8 00 00      enter 0 ; (push bp; mov bp, sp)
4552   2030             ; return i < 0 ? -i : i; 
4553   2030             _ternary57_cond:
4554   2030 FA 05 00      lea d, [bp + 5] ; $i
4555   2033 2A            mov b, [d]
4556   2034 38 00 00      mov c, 0
4557   2037             ; --- START RELATIONAL
4558   2037 D7            push a
4559   2038 11            mov a, b
4560   2039 FD 2E 00 00   mov32 cb, $00000000
4560   203D 00 00 
4561   203F B0            cmp a, b
4562   2040 FD 73         slt ; < (signed)
4563   2042 E4            pop a
4564   2043             ; --- END RELATIONAL
4565   2043 C0 00 00      cmp b, 0
4566   2046 C6 55 20      je _ternary57_FALSE
4567   2049             _ternary57_TRUE:
4568   2049 FA 05 00      lea d, [bp + 5] ; $i
4569   204C 2A            mov b, [d]
4570   204D 38 00 00      mov c, 0
4571   2050 FD 97         neg b
4572   2052 0A 5C 20      jmp _ternary57_exit
4573   2055             _ternary57_FALSE:
4574   2055 FA 05 00      lea d, [bp + 5] ; $i
4575   2058 2A            mov b, [d]
4576   2059 38 00 00      mov c, 0
4577   205C             _ternary57_exit:
4578   205C F9            leave
4579   205D 09            ret
4580   205E             
4581   205E             loadfile:
4582   205E F8 00 00      enter 0 ; (push bp; mov bp, sp)
4583   2061             
4584   2061             ; --- BEGIN INLINE ASM SEGMENT
4585   2061 FA 07 00      lea d, [bp + 7] ; $destination
4586   2064 15            mov a, [d]
4587   2065 4F            mov di, a
4588   2066 FA 05 00      lea d, [bp + 5] ; $filename
4589   2069 FD 2A         mov d, [d]
4590   206B 19 14         mov al, 20
4591   206D 05 04         syscall sys_filesystem
4592   206F             ; --- END INLINE ASM SEGMENT
4593   206F             
4594   206F F9            leave
4595   2070 09            ret
4596   2071             
4597   2071             create_file:
4598   2071 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4599   2074 F9            leave
4600   2075 09            ret
4601   2076             
4602   2076             delete_file:
4603   2076 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4604   2079             
4605   2079             ; --- BEGIN INLINE ASM SEGMENT
4606   2079 FA 05 00      lea d, [bp + 5] ; $filename
4607   207C 19 0A         mov al, 10
4608   207E 05 04         syscall sys_filesystem
4609   2080             ; --- END INLINE ASM SEGMENT
4610   2080             
4611   2080 F9            leave
4612   2081 09            ret
4613   2082             
4614   2082             load_hex:
4615   2082 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4616   2085             ; char *temp; 
4617   2085 52 02 00      sub sp, 2
4618   2088             ; temp = alloc(32768); 
4619   2088 FA FF FF      lea d, [bp + -1] ; $temp
4620   208B DA            push d
4621   208C             ; --- START FUNCTION CALL
4622   208C FD 2E 00 80   mov32 cb, $00008000
4622   2090 00 00 
4623   2092 FD AB         swp b
4624   2094 D8            push b
4625   2095 07 5B 0B      call alloc
4626   2098 51 02 00      add sp, 2
4627   209B             ; --- END FUNCTION CALL
4628   209B E7            pop d
4629   209C FD 43         mov [d], b
4630   209E             
4631   209E             ; --- BEGIN INLINE ASM SEGMENT
4632   209E               
4633   209E               
4634   209E               
4635   209E             _load_hex:
4636   209E FA 05 00      lea d, [bp + 5] ; $destination
4637   20A1 FD 2A         mov d, [d]
4638   20A3 FD 50         mov di, d
4639   20A5 FA FF FF      lea d, [bp + -1] ; $temp
4640   20A8 FD 2A         mov d, [d]
4641   20AA 38 00 00      mov c, 0
4642   20AD 48            mov a, sp
4643   20AE 77            inc a
4644   20AF 3C            mov d, a          
4645   20B0 07 B8 21      call _gets        
4646   20B3 4D            mov si, a
4647   20B4             __load_hex_loop:
4648   20B4 F6            lodsb             
4649   20B5 B9 00         cmp al, 0         
4650   20B7 C6 C5 20      jz __load_hex_ret
4651   20BA 36            mov bh, al
4652   20BB F6            lodsb
4653   20BC 2F            mov bl, al
4654   20BD 07 6F 21      call _atoi        
4655   20C0 F7            stosb             
4656   20C1 78            inc c
4657   20C2 0A B4 20      jmp __load_hex_loop
4658   20C5             __load_hex_ret:
4659   20C5             ; --- END INLINE ASM SEGMENT
4660   20C5             
4661   20C5 F9            leave
4662   20C6 09            ret
4663   20C7             
4664   20C7             include_stdio_asm:
4665   20C7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4666   20CA             
4667   20CA             ; --- BEGIN INLINE ASM SEGMENT
4668   20CA             .include "lib/asm/stdio.asm"
0001+  20CA             ;-----------------------------------------------------------------------------
0002+  20CA             ; stdio.s
0003+  20CA             ;-----------------------------------------------------------------------------
0004+  20CA             .include "lib/asm/string.asm"
0001++ 20CA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 20CA             ; string.s
0003++ 20CA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 20CA             
0005++ 20CA             
0006++ 20CA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 20CA             ; _strrev
0008++ 20CA             ; reverse a string
0009++ 20CA             ; D = string address
0010++ 20CA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 20CA             ; 01234
0012++ 20CA             _strrev:
0013++ 20CA 4B          	pusha
0014++ 20CB 07 11 21    	call _strlen	; length in C
0015++ 20CE 12          	mov a, c
0016++ 20CF AF 01 00    	cmp a, 1
0017++ 20D2 D0 EC 20    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 20D5 7D          	dec a
0019++ 20D6 FD 4E       	mov si, d	; beginning of string
0020++ 20D8 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 20DA 59          	add d, a	; end of string
0022++ 20DB 12          	mov a, c
0023++ 20DC FD 9B       	shr a		; divide by 2
0024++ 20DE 39          	mov c, a	; C now counts the steps
0025++ 20DF             _strrev_L0:
0026++ 20DF 32          	mov bl, [d]	; save load right-side char into BL
0027++ 20E0 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 20E1 3E          	mov [d], al	; store left char into right side
0029++ 20E2 1B          	mov al, bl
0030++ 20E3 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 20E4 7E          	dec c
0032++ 20E5 7F          	dec d
0033++ 20E6 C2 00 00    	cmp c, 0
0034++ 20E9 C7 DF 20    	jne _strrev_L0
0035++ 20EC             _strrev_end:
0036++ 20EC 4C          	popa
0037++ 20ED 09          	ret
0038++ 20EE             	
0039++ 20EE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 20EE             ; _strchr
0041++ 20EE             ; search string in D for char in AL
0042++ 20EE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 20EE             _strchr:
0044++ 20EE             _strchr_L0:
0045++ 20EE 32          	mov bl, [d]
0046++ 20EF C1 00       	cmp bl, 0
0047++ 20F1 C6 FC 20    	je _strchr_end
0048++ 20F4 BA          	cmp al, bl
0049++ 20F5 C6 FC 20    	je _strchr_end
0050++ 20F8 79          	inc d
0051++ 20F9 0A EE 20    	jmp _strchr_L0
0052++ 20FC             _strchr_end:
0053++ 20FC 1B          	mov al, bl
0054++ 20FD 09          	ret
0055++ 20FE             
0056++ 20FE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 20FE             ; _strstr
0058++ 20FE             ; find sub-string
0059++ 20FE             ; str1 in SI
0060++ 20FE             ; str2 in DI
0061++ 20FE             ; SI points to end of source string
0062++ 20FE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 20FE             _strstr:
0064++ 20FE DB          	push al
0065++ 20FF DA          	push d
0066++ 2100 E3          	push di
0067++ 2101             _strstr_loop:
0068++ 2101 F3          	cmpsb					; compare a byte of the strings
0069++ 2102 C7 0D 21    	jne _strstr_ret
0070++ 2105 FC 00 00    	lea d, [di + 0]
0071++ 2108 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 210A C7 01 21    	jne _strstr_loop				; equal chars but not at end
0073++ 210D             _strstr_ret:
0074++ 210D F0          	pop di
0075++ 210E E7          	pop d
0076++ 210F E8          	pop al
0077++ 2110 09          	ret
0078++ 2111             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 2111             ; length of null terminated string
0080++ 2111             ; result in C
0081++ 2111             ; pointer in D
0082++ 2111             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 2111             _strlen:
0084++ 2111 DA          	push d
0085++ 2112 38 00 00    	mov c, 0
0086++ 2115             _strlen_L1:
0087++ 2115 BD 00       	cmp byte [d], 0
0088++ 2117 C6 1F 21    	je _strlen_ret
0089++ 211A 79          	inc d
0090++ 211B 78          	inc c
0091++ 211C 0A 15 21    	jmp _strlen_L1
0092++ 211F             _strlen_ret:
0093++ 211F E7          	pop d
0094++ 2120 09          	ret
0095++ 2121             
0096++ 2121             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 2121             ; STRCMP
0098++ 2121             ; compare two strings
0099++ 2121             ; str1 in SI
0100++ 2121             ; str2 in DI
0101++ 2121             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 2121             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 2121             _strcmp:
0104++ 2121 DB          	push al
0105++ 2122 DA          	push d
0106++ 2123 E3          	push di
0107++ 2124 E2          	push si
0108++ 2125             _strcmp_loop:
0109++ 2125 F3          	cmpsb					; compare a byte of the strings
0110++ 2126 C7 31 21    	jne _strcmp_ret
0111++ 2129 FB FF FF    	lea d, [si +- 1]
0112++ 212C BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 212E C7 25 21    	jne _strcmp_loop				; equal chars but not at end
0114++ 2131             _strcmp_ret:
0115++ 2131 EF          	pop si
0116++ 2132 F0          	pop di
0117++ 2133 E7          	pop d
0118++ 2134 E8          	pop al
0119++ 2135 09          	ret
0120++ 2136             
0121++ 2136             
0122++ 2136             ; STRCPY
0123++ 2136             ; copy null terminated string from SI to DI
0124++ 2136             ; source in SI
0125++ 2136             ; destination in DI
0126++ 2136             _strcpy:
0127++ 2136 E2          	push si
0128++ 2137 E3          	push di
0129++ 2138 DB          	push al
0130++ 2139             _strcpy_L1:
0131++ 2139 F6          	lodsb
0132++ 213A F7          	stosb
0133++ 213B B9 00       	cmp al, 0
0134++ 213D C7 39 21    	jne _strcpy_L1
0135++ 2140             _strcpy_end:
0136++ 2140 E8          	pop al
0137++ 2141 F0          	pop di
0138++ 2142 EF          	pop si
0139++ 2143 09          	ret
0140++ 2144             
0141++ 2144             ; STRCAT
0142++ 2144             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 2144             ; source in SI
0144++ 2144             ; destination in DI
0145++ 2144             _strcat:
0146++ 2144 E2          	push si
0147++ 2145 E3          	push di
0148++ 2146 D7          	push a
0149++ 2147 DA          	push d
0150++ 2148 50          	mov a, di
0151++ 2149 3C          	mov d, a
0152++ 214A             _strcat_goto_end_L1:
0153++ 214A BD 00       	cmp byte[d], 0
0154++ 214C C6 53 21    	je _strcat_start
0155++ 214F 79          	inc d
0156++ 2150 0A 4A 21    	jmp _strcat_goto_end_L1
0157++ 2153             _strcat_start:
0158++ 2153 FD 50       	mov di, d
0159++ 2155             _strcat_L1:
0160++ 2155 F6          	lodsb
0161++ 2156 F7          	stosb
0162++ 2157 B9 00       	cmp al, 0
0163++ 2159 C7 55 21    	jne _strcat_L1
0164++ 215C             _strcat_end:
0165++ 215C E7          	pop d
0166++ 215D E4          	pop a
0167++ 215E F0          	pop di
0168++ 215F EF          	pop si
0169++ 2160 09          	ret
0170++ 2161             
0171++ 2161             
0005+  2161             
0006+  2161             ;-----------------------------------------------------------------------------
0007+  2161             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  2161             ; ASCII in BL
0009+  2161             ; result in AL
0010+  2161             ; ascii for F = 0100 0110
0011+  2161             ; ascii for 9 = 0011 1001
0012+  2161             ;-----------------------------------------------------------------------------
0013+  2161             hex_ascii_encode:
0014+  2161 1B            mov al, bl
0015+  2162 93 40         test al, $40        ; test if letter or number
0016+  2164 C7 6A 21      jnz hex_letter
0017+  2167 87 0F         and al, $0F        ; get number
0018+  2169 09            ret
0019+  216A             hex_letter:
0020+  216A 87 0F         and al, $0F        ; get letter
0021+  216C 6A 09         add al, 9
0022+  216E 09            ret
0023+  216F             
0024+  216F             ;-----------------------------------------------------------------------------
0025+  216F             ; ATOI
0026+  216F             ; 2 letter hex string in B
0027+  216F             ; 8bit integer returned in AL
0028+  216F             ;-----------------------------------------------------------------------------
0029+  216F             _atoi:
0030+  216F D8            push b
0031+  2170 07 61 21      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  2173 30            mov bl, bh
0033+  2174 DB            push al          ; save a
0034+  2175 07 61 21      call hex_ascii_encode
0035+  2178 EA            pop bl  
0036+  2179 FD 9E 04      shl al, 4
0037+  217C 8C            or al, bl
0038+  217D E5            pop b
0039+  217E 09            ret  
0040+  217F             
0041+  217F             
0042+  217F             ;-----------------------------------------------------------------------------
0043+  217F             ; ITOA
0044+  217F             ; 8bit value in BL
0045+  217F             ; 2 byte ASCII result in A
0046+  217F             ;-----------------------------------------------------------------------------
0047+  217F             _itoa:
0048+  217F DA            push d
0049+  2180 D8            push b
0050+  2181 A7 00         mov bh, 0
0051+  2183 FD A4 04      shr bl, 4  
0052+  2186 74            mov d, b
0053+  2187 1F 2F 24      mov al, [d + s_hex_digits]
0054+  218A 23            mov ah, al
0055+  218B               
0056+  218B E5            pop b
0057+  218C D8            push b
0058+  218D A7 00         mov bh, 0
0059+  218F FD 87 0F      and bl, $0F
0060+  2192 74            mov d, b
0061+  2193 1F 2F 24      mov al, [d + s_hex_digits]
0062+  2196 E5            pop b
0063+  2197 E7            pop d
0064+  2198 09            ret
0065+  2199             
0066+  2199             ;-----------------------------------------------------------------------------
0067+  2199             ; HEX STRING TO BINARY
0068+  2199             ; di = destination address
0069+  2199             ; si = source
0070+  2199             ;-----------------------------------------------------------------------------
0071+  2199             _hex_to_int:
0072+  2199             _hex_to_int_L1:
0073+  2199 F6            lodsb          ; load from [SI] to AL
0074+  219A B9 00         cmp al, 0        ; check if ASCII 0
0075+  219C C6 A9 21      jz _hex_to_int_ret
0076+  219F 36            mov bh, al
0077+  21A0 F6            lodsb
0078+  21A1 2F            mov bl, al
0079+  21A2 07 6F 21      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  21A5 F7            stosb          ; store AL to [DI]
0081+  21A6 0A 99 21      jmp _hex_to_int_L1
0082+  21A9             _hex_to_int_ret:
0083+  21A9 09            ret    
0084+  21AA             
0085+  21AA             ;-----------------------------------------------------------------------------
0086+  21AA             ; GETCHAR
0087+  21AA             ; char in ah
0088+  21AA             ;-----------------------------------------------------------------------------
0089+  21AA             getch:
0090+  21AA DB            push al
0091+  21AB             getch_retry:
0092+  21AB 19 01         mov al, 1
0093+  21AD 05 03         syscall sys_io      ; receive in AH
0094+  21AF E8            pop al
0095+  21B0 09            ret
0096+  21B1             
0097+  21B1             ;-----------------------------------------------------------------------------
0098+  21B1             ; PUTCHAR
0099+  21B1             ; char in ah
0100+  21B1             ;-----------------------------------------------------------------------------
0101+  21B1             _putchar:
0102+  21B1 D7            push a
0103+  21B2 19 00         mov al, 0
0104+  21B4 05 03         syscall sys_io      ; char in AH
0105+  21B6 E4            pop a
0106+  21B7 09            ret
0107+  21B8             
0108+  21B8             ;-----------------------------------------------------------------------------
0109+  21B8             ;; INPUT A STRING
0110+  21B8             ;; terminates with null
0111+  21B8             ;; pointer in D
0112+  21B8             ;-----------------------------------------------------------------------------
0113+  21B8             _gets:
0114+  21B8 D7            push a
0115+  21B9 DA            push d
0116+  21BA             _gets_loop:
0117+  21BA 19 01         mov al, 1
0118+  21BC 05 03         syscall sys_io      ; receive in AH
0119+  21BE B9 00         cmp al, 0        ; check error code (AL)
0120+  21C0 C6 BA 21      je _gets_loop      ; if no char received, retry
0121+  21C3             
0122+  21C3 76 1B         cmp ah, 27
0123+  21C5 C6 E6 21      je _gets_ansi_esc
0124+  21C8 76 0A         cmp ah, $0A        ; LF
0125+  21CA C6 51 22      je _gets_end
0126+  21CD 76 0D         cmp ah, $0D        ; CR
0127+  21CF C6 51 22      je _gets_end
0128+  21D2 76 5C         cmp ah, $5C        ; '\\'
0129+  21D4 C6 12 22      je _gets_escape
0130+  21D7               
0131+  21D7 76 08         cmp ah, $08      ; check for backspace
0132+  21D9 C6 E2 21      je _gets_backspace
0133+  21DC             
0134+  21DC 1A            mov al, ah
0135+  21DD 3E            mov [d], al
0136+  21DE 79            inc d
0137+  21DF 0A BA 21      jmp _gets_loop
0138+  21E2             _gets_backspace:
0139+  21E2 7F            dec d
0140+  21E3 0A BA 21      jmp _gets_loop
0141+  21E6             _gets_ansi_esc:
0142+  21E6 19 01         mov al, 1
0143+  21E8 05 03         syscall sys_io        ; receive in AH without echo
0144+  21EA B9 00         cmp al, 0          ; check error code (AL)
0145+  21EC C6 E6 21      je _gets_ansi_esc    ; if no char received, retry
0146+  21EF 76 5B         cmp ah, '['
0147+  21F1 C7 BA 21      jne _gets_loop
0148+  21F4             _gets_ansi_esc_2:
0149+  21F4 19 01         mov al, 1
0150+  21F6 05 03         syscall sys_io          ; receive in AH without echo
0151+  21F8 B9 00         cmp al, 0            ; check error code (AL)
0152+  21FA C6 F4 21      je _gets_ansi_esc_2  ; if no char received, retry
0153+  21FD 76 44         cmp ah, 'D'
0154+  21FF C6 0A 22      je _gets_left_arrow
0155+  2202 76 43         cmp ah, 'C'
0156+  2204 C6 0E 22      je _gets_right_arrow
0157+  2207 0A BA 21      jmp _gets_loop
0158+  220A             _gets_left_arrow:
0159+  220A 7F            dec d
0160+  220B 0A BA 21      jmp _gets_loop
0161+  220E             _gets_right_arrow:
0162+  220E 79            inc d
0163+  220F 0A BA 21      jmp _gets_loop
0164+  2212             _gets_escape:
0165+  2212 19 01         mov al, 1
0166+  2214 05 03         syscall sys_io      ; receive in AH
0167+  2216 B9 00         cmp al, 0        ; check error code (AL)
0168+  2218 C6 12 22      je _gets_escape      ; if no char received, retry
0169+  221B 76 6E         cmp ah, 'n'
0170+  221D C6 3C 22      je _gets_LF
0171+  2220 76 72         cmp ah, 'r'
0172+  2222 C6 43 22      je _gets_CR
0173+  2225 76 30         cmp ah, '0'
0174+  2227 C6 4A 22      je _gets_NULL
0175+  222A 76 5C         cmp ah, $5C  ; '\'
0176+  222C C6 35 22      je _gets_slash
0177+  222F 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  2230 3E            mov [d], al
0179+  2231 79            inc d
0180+  2232 0A BA 21      jmp _gets_loop
0181+  2235             _gets_slash:
0182+  2235 19 5C         mov al, $5C
0183+  2237 3E            mov [d], al
0184+  2238 79            inc d
0185+  2239 0A BA 21      jmp _gets_loop
0186+  223C             _gets_LF:
0187+  223C 19 0A         mov al, $0A
0188+  223E 3E            mov [d], al
0189+  223F 79            inc d
0190+  2240 0A BA 21      jmp _gets_loop
0191+  2243             _gets_CR:
0192+  2243 19 0D         mov al, $0D
0193+  2245 3E            mov [d], al
0194+  2246 79            inc d
0195+  2247 0A BA 21      jmp _gets_loop
0196+  224A             _gets_NULL:
0197+  224A 19 00         mov al, $00
0198+  224C 3E            mov [d], al
0199+  224D 79            inc d
0200+  224E 0A BA 21      jmp _gets_loop
0201+  2251             _gets_end:
0202+  2251 19 00         mov al, 0
0203+  2253 3E            mov [d], al        ; terminate string
0204+  2254 E7            pop d
0205+  2255 E4            pop a
0206+  2256 09            ret
0207+  2257             
0208+  2257             ;-----------------------------------------------------------------------------
0209+  2257             ;; INPUT TEXT
0210+  2257             ;; terminated with CTRL+D
0211+  2257             ;; pointer in D
0212+  2257             ;-----------------------------------------------------------------------------
0213+  2257             _gettxt:
0214+  2257 D7            push a
0215+  2258 DA            push d
0216+  2259             _gettxt_loop:
0217+  2259 19 01         mov al, 1
0218+  225B 05 03         syscall sys_io      ; receive in AH
0219+  225D B9 00         cmp al, 0        ; check error code (AL)
0220+  225F C6 59 22      je _gettxt_loop    ; if no char received, retry
0221+  2262 76 04         cmp ah, 4      ; EOT
0222+  2264 C6 A2 22      je _gettxt_end
0223+  2267 76 08         cmp ah, $08      ; check for backspace
0224+  2269 C6 9E 22      je _gettxt_backspace
0225+  226C 76 5C         cmp ah, $5C        ; '\'
0226+  226E C6 77 22      je _gettxt_escape
0227+  2271 1A            mov al, ah
0228+  2272 3E            mov [d], al
0229+  2273 79            inc d
0230+  2274 0A 59 22      jmp _gettxt_loop
0231+  2277             _gettxt_escape:
0232+  2277 19 01         mov al, 1
0233+  2279 05 03         syscall sys_io      ; receive in AH
0234+  227B B9 00         cmp al, 0        ; check error code (AL)
0235+  227D C6 77 22      je _gettxt_escape    ; if no char received, retry
0236+  2280 76 6E         cmp ah, 'n'
0237+  2282 C6 90 22      je _gettxt_LF
0238+  2285 76 72         cmp ah, 'r'
0239+  2287 C6 97 22      je _gettxt_CR
0240+  228A 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  228B 3E            mov [d], al
0242+  228C 79            inc d
0243+  228D 0A 59 22      jmp _gettxt_loop
0244+  2290             _gettxt_LF:
0245+  2290 19 0A         mov al, $0A
0246+  2292 3E            mov [d], al
0247+  2293 79            inc d
0248+  2294 0A 59 22      jmp _gettxt_loop
0249+  2297             _gettxt_CR:
0250+  2297 19 0D         mov al, $0D
0251+  2299 3E            mov [d], al
0252+  229A 79            inc d
0253+  229B 0A 59 22      jmp _gettxt_loop
0254+  229E             _gettxt_backspace:
0255+  229E 7F            dec d
0256+  229F 0A 59 22      jmp _gettxt_loop
0257+  22A2             _gettxt_end:
0258+  22A2 19 00         mov al, 0
0259+  22A4 3E            mov [d], al        ; terminate string
0260+  22A5 E7            pop d
0261+  22A6 E4            pop a
0262+  22A7 09            ret
0263+  22A8             
0264+  22A8             ;-----------------------------------------------------------------------------
0265+  22A8             ; PRINT NEW LINE
0266+  22A8             ;-----------------------------------------------------------------------------
0267+  22A8             printnl:
0268+  22A8 D7            push a
0269+  22A9 10 00 0A      mov a, $0A00
0270+  22AC 05 03         syscall sys_io
0271+  22AE 10 00 0D      mov a, $0D00
0272+  22B1 05 03         syscall sys_io
0273+  22B3 E4            pop a
0274+  22B4 09            ret
0275+  22B5             
0276+  22B5             ;-----------------------------------------------------------------------------
0277+  22B5             ; _strtoint
0278+  22B5             ; 4 digit hex string number in d
0279+  22B5             ; integer returned in A
0280+  22B5             ;-----------------------------------------------------------------------------
0281+  22B5             _strtointx:
0282+  22B5 D8            push b
0283+  22B6 32            mov bl, [d]
0284+  22B7 37            mov bh, bl
0285+  22B8 33 01 00      mov bl, [d + 1]
0286+  22BB 07 6F 21      call _atoi        ; convert to int in AL
0287+  22BE 23            mov ah, al        ; move to AH
0288+  22BF 33 02 00      mov bl, [d + 2]
0289+  22C2 37            mov bh, bl
0290+  22C3 33 03 00      mov bl, [d + 3]
0291+  22C6 07 6F 21      call _atoi        ; convert to int in AL
0292+  22C9 E5            pop b
0293+  22CA 09            ret
0294+  22CB             
0295+  22CB             ;-----------------------------------------------------------------------------
0296+  22CB             ; _strtoint
0297+  22CB             ; 5 digit base10 string number in d
0298+  22CB             ; integer returned in A
0299+  22CB             ;-----------------------------------------------------------------------------
0300+  22CB             _strtoint:
0301+  22CB E2            push si
0302+  22CC D8            push b
0303+  22CD D9            push c
0304+  22CE DA            push d
0305+  22CF 07 11 21      call _strlen      ; get string length in C
0306+  22D2 7E            dec c
0307+  22D3 FD 4E         mov si, d
0308+  22D5 12            mov a, c
0309+  22D6 FD 99         shl a
0310+  22D8 3B 47 24      mov d, table_power
0311+  22DB 59            add d, a
0312+  22DC 38 00 00      mov c, 0
0313+  22DF             _strtoint_L0:
0314+  22DF F6            lodsb      ; load ASCII to al
0315+  22E0 B9 00         cmp al, 0
0316+  22E2 C6 F5 22      je _strtoint_end
0317+  22E5 6F 30         sub al, $30    ; make into integer
0318+  22E7 22 00         mov ah, 0
0319+  22E9 2A            mov b, [d]
0320+  22EA AC            mul a, b      ; result in B since it fits in 16bits
0321+  22EB 11            mov a, b
0322+  22EC 28            mov b, c
0323+  22ED 54            add a, b
0324+  22EE 39            mov c, a
0325+  22EF 63 02 00      sub d, 2
0326+  22F2 0A DF 22      jmp _strtoint_L0
0327+  22F5             _strtoint_end:
0328+  22F5 12            mov a, c
0329+  22F6 E7            pop d
0330+  22F7 E6            pop c
0331+  22F8 E5            pop b
0332+  22F9 EF            pop si
0333+  22FA 09            ret
0334+  22FB             
0335+  22FB             ;-----------------------------------------------------------------------------
0336+  22FB             ; PRINT NULL TERMINATED STRING
0337+  22FB             ; pointer in D
0338+  22FB             ;-----------------------------------------------------------------------------
0339+  22FB             _puts:
0340+  22FB D7            push a
0341+  22FC DA            push d
0342+  22FD             _puts_L1:
0343+  22FD 1E            mov al, [d]
0344+  22FE B9 00         cmp al, 0
0345+  2300 C6 0C 23      jz _puts_END
0346+  2303 23            mov ah, al
0347+  2304 19 00         mov al, 0
0348+  2306 05 03         syscall sys_io
0349+  2308 79            inc d
0350+  2309 0A FD 22      jmp _puts_L1
0351+  230C             _puts_END:
0352+  230C E7            pop d
0353+  230D E4            pop a
0354+  230E 09            ret
0355+  230F             
0356+  230F             ;-----------------------------------------------------------------------------
0357+  230F             ; PRINT N SIZE STRING
0358+  230F             ; pointer in D
0359+  230F             ; size in C
0360+  230F             ;-----------------------------------------------------------------------------
0361+  230F             _putsn:
0362+  230F DB            push al
0363+  2310 DA            push d
0364+  2311 D9            push c
0365+  2312             _putsn_L0:
0366+  2312 1E            mov al, [d]
0367+  2313 23            mov ah, al
0368+  2314 19 00         mov al, 0
0369+  2316 05 03         syscall sys_io
0370+  2318 79            inc d
0371+  2319 7E            dec c  
0372+  231A C2 00 00      cmp c, 0
0373+  231D C7 12 23      jne _putsn_L0
0374+  2320             _putsn_end:
0375+  2320 E6            pop c
0376+  2321 E7            pop d
0377+  2322 E8            pop al
0378+  2323 09            ret
0379+  2324             
0380+  2324             ;-----------------------------------------------------------------------------
0381+  2324             ; print 16bit decimal number
0382+  2324             ; input number in A
0383+  2324             ;-----------------------------------------------------------------------------
0384+  2324             print_u16d:
0385+  2324 D7            push a
0386+  2325 D8            push b
0387+  2326 26 10 27      mov b, 10000
0388+  2329 AE            div a, b      ; get 10000's coeff.
0389+  232A 07 4C 23      call print_number
0390+  232D 11            mov a, b
0391+  232E 26 E8 03      mov b, 1000
0392+  2331 AE            div a, b      ; get 1000's coeff.
0393+  2332 07 4C 23      call print_number
0394+  2335 11            mov a, b
0395+  2336 26 64 00      mov b, 100
0396+  2339 AE            div a, b
0397+  233A 07 4C 23      call print_number
0398+  233D 11            mov a, b
0399+  233E 26 0A 00      mov b, 10
0400+  2341 AE            div a, b
0401+  2342 07 4C 23      call print_number
0402+  2345 1B            mov al, bl      ; 1's coeff in bl
0403+  2346 07 4C 23      call print_number
0404+  2349 E5            pop b
0405+  234A E4            pop a
0406+  234B 09            ret
0407+  234C             
0408+  234C             ;-----------------------------------------------------------------------------
0409+  234C             ; print AL
0410+  234C             ;-----------------------------------------------------------------------------
0411+  234C             print_number:
0412+  234C 6A 30         add al, $30
0413+  234E 23            mov ah, al
0414+  234F 07 B1 21      call _putchar
0415+  2352 09            ret
0416+  2353             
0417+  2353             ;-----------------------------------------------------------------------------
0418+  2353             ; PRINT 16BIT HEX INTEGER
0419+  2353             ; integer value in reg B
0420+  2353             ;-----------------------------------------------------------------------------
0421+  2353             print_u16x:
0422+  2353 D7            push a
0423+  2354 D8            push b
0424+  2355 DD            push bl
0425+  2356 30            mov bl, bh
0426+  2357 07 7F 21      call _itoa        ; convert bh to char in A
0427+  235A 2F            mov bl, al        ; save al
0428+  235B 19 00         mov al, 0
0429+  235D 05 03         syscall sys_io        ; display AH
0430+  235F 24            mov ah, bl        ; retrieve al
0431+  2360 19 00         mov al, 0
0432+  2362 05 03         syscall sys_io        ; display AL
0433+  2364             
0434+  2364 EA            pop bl
0435+  2365 07 7F 21      call _itoa        ; convert bh to char in A
0436+  2368 2F            mov bl, al        ; save al
0437+  2369 19 00         mov al, 0
0438+  236B 05 03         syscall sys_io        ; display AH
0439+  236D 24            mov ah, bl        ; retrieve al
0440+  236E 19 00         mov al, 0
0441+  2370 05 03         syscall sys_io        ; display AL
0442+  2372             
0443+  2372 E5            pop b
0444+  2373 E4            pop a
0445+  2374 09            ret
0446+  2375             
0447+  2375             ;-----------------------------------------------------------------------------
0448+  2375             ; INPUT 16BIT HEX INTEGER
0449+  2375             ; read 16bit integer into A
0450+  2375             ;-----------------------------------------------------------------------------
0451+  2375             scan_u16x:
0452+  2375 F8 10 00      enter 16
0453+  2378 D8            push b
0454+  2379 DA            push d
0455+  237A             
0456+  237A FA F1 FF      lea d, [bp + -15]
0457+  237D 07 B8 21      call _gets        ; get number
0458+  2380             
0459+  2380 32            mov bl, [d]
0460+  2381 37            mov bh, bl
0461+  2382 33 01 00      mov bl, [d + 1]
0462+  2385 07 6F 21      call _atoi        ; convert to int in AL
0463+  2388 23            mov ah, al        ; move to AH
0464+  2389             
0465+  2389 33 02 00      mov bl, [d + 2]
0466+  238C 37            mov bh, bl
0467+  238D 33 03 00      mov bl, [d + 3]
0468+  2390 07 6F 21      call _atoi        ; convert to int in AL
0469+  2393             
0470+  2393 E7            pop d
0471+  2394 E5            pop b
0472+  2395 F9            leave
0473+  2396 09            ret
0474+  2397             
0475+  2397             ;-----------------------------------------------------------------------------
0476+  2397             ; PRINT 8bit HEX INTEGER
0477+  2397             ; integer value in reg bl
0478+  2397             ;-----------------------------------------------------------------------------
0479+  2397             print_u8x:
0480+  2397 D7            push a
0481+  2398 DD            push bl
0482+  2399             
0483+  2399 07 7F 21      call _itoa        ; convert bl to char in A
0484+  239C 2F            mov bl, al        ; save al
0485+  239D 19 00         mov al, 0
0486+  239F 05 03         syscall sys_io        ; display AH
0487+  23A1 24            mov ah, bl        ; retrieve al
0488+  23A2 19 00         mov al, 0
0489+  23A4 05 03         syscall sys_io        ; display AL
0490+  23A6             
0491+  23A6 EA            pop bl
0492+  23A7 E4            pop a
0493+  23A8 09            ret
0494+  23A9             
0495+  23A9             ;-----------------------------------------------------------------------------
0496+  23A9             ; print 8bit decimal unsigned number
0497+  23A9             ; input number in AL
0498+  23A9             ;-----------------------------------------------------------------------------
0499+  23A9             print_u8d:
0500+  23A9 D7            push a
0501+  23AA D8            push b
0502+  23AB             
0503+  23AB 22 00         mov ah, 0
0504+  23AD 26 64 00      mov b, 100
0505+  23B0 AE            div a, b
0506+  23B1 D8            push b      ; save remainder
0507+  23B2 B9 00         cmp al, 0
0508+  23B4 C6 BE 23      je skip100
0509+  23B7 6A 30         add al, $30
0510+  23B9 23            mov ah, al
0511+  23BA 19 00         mov al, 0
0512+  23BC 05 03         syscall sys_io  ; print coeff
0513+  23BE             skip100:
0514+  23BE E4            pop a
0515+  23BF 22 00         mov ah, 0
0516+  23C1 26 0A 00      mov b, 10
0517+  23C4 AE            div a, b
0518+  23C5 D8            push b      ; save remainder
0519+  23C6 B9 00         cmp al, 0
0520+  23C8 C6 D2 23      je skip10
0521+  23CB 6A 30         add al, $30
0522+  23CD 23            mov ah, al
0523+  23CE 19 00         mov al, 0
0524+  23D0 05 03         syscall sys_io  ; print coeff
0525+  23D2             skip10:
0526+  23D2 E4            pop a
0527+  23D3 1B            mov al, bl
0528+  23D4 6A 30         add al, $30
0529+  23D6 23            mov ah, al
0530+  23D7 19 00         mov al, 0
0531+  23D9 05 03         syscall sys_io  ; print coeff
0532+  23DB E5            pop b
0533+  23DC E4            pop a
0534+  23DD 09            ret
0535+  23DE             
0536+  23DE             ;-----------------------------------------------------------------------------
0537+  23DE             ; INPUT 8BIT HEX INTEGER
0538+  23DE             ; read 8bit integer into AL
0539+  23DE             ;-----------------------------------------------------------------------------
0540+  23DE             scan_u8x:
0541+  23DE F8 04 00      enter 4
0542+  23E1 D8            push b
0543+  23E2 DA            push d
0544+  23E3             
0545+  23E3 FA FD FF      lea d, [bp + -3]
0546+  23E6 07 B8 21      call _gets        ; get number
0547+  23E9             
0548+  23E9 32            mov bl, [d]
0549+  23EA 37            mov bh, bl
0550+  23EB 33 01 00      mov bl, [d + 1]
0551+  23EE 07 6F 21      call _atoi        ; convert to int in AL
0552+  23F1             
0553+  23F1 E7            pop d
0554+  23F2 E5            pop b
0555+  23F3 F9            leave
0556+  23F4 09            ret
0557+  23F5             
0558+  23F5             ;-----------------------------------------------------------------------------
0559+  23F5             ; input decimal number
0560+  23F5             ; result in A
0561+  23F5             ; 655'\0'
0562+  23F5             ; low--------high
0563+  23F5             ;-----------------------------------------------------------------------------
0564+  23F5             scan_u16d:
0565+  23F5 F8 08 00      enter 8
0566+  23F8 E2            push si
0567+  23F9 D8            push b
0568+  23FA D9            push c
0569+  23FB DA            push d
0570+  23FC FA F9 FF      lea d, [bp +- 7]
0571+  23FF 07 B8 21      call _gets
0572+  2402 07 11 21      call _strlen      ; get string length in C
0573+  2405 7E            dec c
0574+  2406 FD 4E         mov si, d
0575+  2408 12            mov a, c
0576+  2409 FD 99         shl a
0577+  240B 3B 47 24      mov d, table_power
0578+  240E 59            add d, a
0579+  240F 38 00 00      mov c, 0
0580+  2412             mul_loop:
0581+  2412 F6            lodsb      ; load ASCII to al
0582+  2413 B9 00         cmp al, 0
0583+  2415 C6 28 24      je mul_exit
0584+  2418 6F 30         sub al, $30    ; make into integer
0585+  241A 22 00         mov ah, 0
0586+  241C 2A            mov b, [d]
0587+  241D AC            mul a, b      ; result in B since it fits in 16bits
0588+  241E 11            mov a, b
0589+  241F 28            mov b, c
0590+  2420 54            add a, b
0591+  2421 39            mov c, a
0592+  2422 63 02 00      sub d, 2
0593+  2425 0A 12 24      jmp mul_loop
0594+  2428             mul_exit:
0595+  2428 12            mov a, c
0596+  2429 E7            pop d
0597+  242A E6            pop c
0598+  242B E5            pop b
0599+  242C EF            pop si
0600+  242D F9            leave
0601+  242E 09            ret
0602+  242F             
0603+  242F 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  2433 34 35 36 37 
0603+  2437 38 39 41 42 
0603+  243B 43 44 45 46 
0604+  243F 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  2443 1B 5B 48 00 
0605+  2447             
0606+  2447             table_power:
0607+  2447 01 00         .dw 1
0608+  2449 0A 00         .dw 10
0609+  244B 64 00         .dw 100
0610+  244D E8 03         .dw 1000
0611+  244F 10 27         .dw 100004669   2451             ; --- END INLINE ASM SEGMENT
4670   2451             
4671   2451 F9            leave
4672   2452 09            ret
4673   2453             
4674   2453             gcd:
4675   2453 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4676   2456             ; if (b == 0) { 
4677   2456             _if58_cond:
4678   2456 FA 07 00      lea d, [bp + 7] ; $b
4679   2459 2A            mov b, [d]
4680   245A 38 00 00      mov c, 0
4681   245D             ; --- START RELATIONAL
4682   245D D7            push a
4683   245E 11            mov a, b
4684   245F FD 2E 00 00   mov32 cb, $00000000
4684   2463 00 00 
4685   2465 B0            cmp a, b
4686   2466 FD 71         seq ; ==
4687   2468 E4            pop a
4688   2469             ; --- END RELATIONAL
4689   2469 C0 00 00      cmp b, 0
4690   246C C6 7B 24      je _if58_exit
4691   246F             _if58_TRUE:
4692   246F             ; return a; 
4693   246F FA 05 00      lea d, [bp + 5] ; $a
4694   2472 2A            mov b, [d]
4695   2473 38 00 00      mov c, 0
4696   2476 F9            leave
4697   2477 09            ret
4698   2478 0A 7B 24      jmp _if58_exit
4699   247B             _if58_exit:
4700   247B             ; return gcd(b, a % b); 
4701   247B             ; --- START FUNCTION CALL
4702   247B FA 05 00      lea d, [bp + 5] ; $a
4703   247E 2A            mov b, [d]
4704   247F 38 00 00      mov c, 0
4705   2482             ; --- START FACTORS
4706   2482 D7            push a
4707   2483 11            mov a, b
4708   2484 FA 07 00      lea d, [bp + 7] ; $b
4709   2487 2A            mov b, [d]
4710   2488 38 00 00      mov c, 0
4711   248B AE            div a, b ; 
4712   248C 11            mov a, b
4713   248D 27            mov b, a
4714   248E E4            pop a
4715   248F             ; --- END FACTORS
4716   248F FD AB         swp b
4717   2491 D8            push b
4718   2492 FA 07 00      lea d, [bp + 7] ; $b
4719   2495 2A            mov b, [d]
4720   2496 38 00 00      mov c, 0
4721   2499 FD AB         swp b
4722   249B D8            push b
4723   249C 07 53 24      call gcd
4724   249F 51 04 00      add sp, 4
4725   24A2             ; --- END FUNCTION CALL
4726   24A2 F9            leave
4727   24A3 09            ret
4728   24A4             
4729   24A4             mod_exp:
4730   24A4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4731   24A7             ; int result; 
4732   24A7 52 02 00      sub sp, 2
4733   24AA             ; result = 1; 
4734   24AA FA FF FF      lea d, [bp + -1] ; $result
4735   24AD DA            push d
4736   24AE FD 2E 01 00   mov32 cb, $00000001
4736   24B2 00 00 
4737   24B4 E7            pop d
4738   24B5 FD 43         mov [d], b
4739   24B7             ; while (exp > 0) { 
4740   24B7             _while59_cond:
4741   24B7 FA 07 00      lea d, [bp + 7] ; $exp
4742   24BA 2A            mov b, [d]
4743   24BB 38 00 00      mov c, 0
4744   24BE             ; --- START RELATIONAL
4745   24BE D7            push a
4746   24BF 11            mov a, b
4747   24C0 FD 2E 00 00   mov32 cb, $00000000
4747   24C4 00 00 
4748   24C6 B0            cmp a, b
4749   24C7 FD 7F         sgt ; >
4750   24C9 E4            pop a
4751   24CA             ; --- END RELATIONAL
4752   24CA C0 00 00      cmp b, 0
4753   24CD C6 59 25      je _while59_exit
4754   24D0             _while59_block:
4755   24D0             ; if (exp & 1) { 
4756   24D0             _if60_cond:
4757   24D0 FA 07 00      lea d, [bp + 7] ; $exp
4758   24D3 2A            mov b, [d]
4759   24D4 38 00 00      mov c, 0
4760   24D7 D7            push a
4761   24D8 11            mov a, b
4762   24D9 FD 2E 01 00   mov32 cb, $00000001
4762   24DD 00 00 
4763   24DF FD 92         and b, a ; &
4764   24E1 E4            pop a
4765   24E2 C0 00 00      cmp b, 0
4766   24E5 C6 13 25      je _if60_exit
4767   24E8             _if60_TRUE:
4768   24E8             ; result = (result * base) % mod; 
4769   24E8 FA FF FF      lea d, [bp + -1] ; $result
4770   24EB DA            push d
4771   24EC FA FF FF      lea d, [bp + -1] ; $result
4772   24EF 2A            mov b, [d]
4773   24F0 38 00 00      mov c, 0
4774   24F3             ; --- START FACTORS
4775   24F3 D7            push a
4776   24F4 11            mov a, b
4777   24F5 FA 05 00      lea d, [bp + 5] ; $base
4778   24F8 2A            mov b, [d]
4779   24F9 38 00 00      mov c, 0
4780   24FC AC            mul a, b ; *
4781   24FD 11            mov a, b
4782   24FE 27            mov b, a
4783   24FF E4            pop a
4784   2500             ; --- END FACTORS
4785   2500             ; --- START FACTORS
4786   2500 D7            push a
4787   2501 11            mov a, b
4788   2502 FA 09 00      lea d, [bp + 9] ; $mod
4789   2505 2A            mov b, [d]
4790   2506 38 00 00      mov c, 0
4791   2509 AE            div a, b ; 
4792   250A 11            mov a, b
4793   250B 27            mov b, a
4794   250C E4            pop a
4795   250D             ; --- END FACTORS
4796   250D E7            pop d
4797   250E FD 43         mov [d], b
4798   2510 0A 13 25      jmp _if60_exit
4799   2513             _if60_exit:
4800   2513             ; exp = exp >> 1; 
4801   2513 FA 07 00      lea d, [bp + 7] ; $exp
4802   2516 DA            push d
4803   2517 FA 07 00      lea d, [bp + 7] ; $exp
4804   251A 2A            mov b, [d]
4805   251B 38 00 00      mov c, 0
4806   251E             ; --- START SHIFT
4807   251E D7            push a
4808   251F 11            mov a, b
4809   2520 FD 2E 01 00   mov32 cb, $00000001
4809   2524 00 00 
4810   2526 FD 39         mov c, b
4811   2528 A5            ashr a, cl
4812   2529 27            mov b, a
4813   252A E4            pop a
4814   252B             ; --- END SHIFT
4815   252B E7            pop d
4816   252C FD 43         mov [d], b
4817   252E             ; base = (base * base) % mod; 
4818   252E FA 05 00      lea d, [bp + 5] ; $base
4819   2531 DA            push d
4820   2532 FA 05 00      lea d, [bp + 5] ; $base
4821   2535 2A            mov b, [d]
4822   2536 38 00 00      mov c, 0
4823   2539             ; --- START FACTORS
4824   2539 D7            push a
4825   253A 11            mov a, b
4826   253B FA 05 00      lea d, [bp + 5] ; $base
4827   253E 2A            mov b, [d]
4828   253F 38 00 00      mov c, 0
4829   2542 AC            mul a, b ; *
4830   2543 11            mov a, b
4831   2544 27            mov b, a
4832   2545 E4            pop a
4833   2546             ; --- END FACTORS
4834   2546             ; --- START FACTORS
4835   2546 D7            push a
4836   2547 11            mov a, b
4837   2548 FA 09 00      lea d, [bp + 9] ; $mod
4838   254B 2A            mov b, [d]
4839   254C 38 00 00      mov c, 0
4840   254F AE            div a, b ; 
4841   2550 11            mov a, b
4842   2551 27            mov b, a
4843   2552 E4            pop a
4844   2553             ; --- END FACTORS
4845   2553 E7            pop d
4846   2554 FD 43         mov [d], b
4847   2556 0A B7 24      jmp _while59_cond
4848   2559             _while59_exit:
4849   2559             ; return result; 
4850   2559 FA FF FF      lea d, [bp + -1] ; $result
4851   255C 2A            mov b, [d]
4852   255D 38 00 00      mov c, 0
4853   2560 F9            leave
4854   2561 09            ret
4855   2562             
4856   2562             find_e:
4857   2562 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4858   2565             ; int e; 
4859   2565 52 02 00      sub sp, 2
4860   2568             ; for (e = 2; e < phi; e++) { 
4861   2568             _for61_init:
4862   2568 FA FF FF      lea d, [bp + -1] ; $e
4863   256B DA            push d
4864   256C FD 2E 02 00   mov32 cb, $00000002
4864   2570 00 00 
4865   2572 E7            pop d
4866   2573 FD 43         mov [d], b
4867   2575             _for61_cond:
4868   2575 FA FF FF      lea d, [bp + -1] ; $e
4869   2578 2A            mov b, [d]
4870   2579 38 00 00      mov c, 0
4871   257C             ; --- START RELATIONAL
4872   257C D7            push a
4873   257D 11            mov a, b
4874   257E FA 05 00      lea d, [bp + 5] ; $phi
4875   2581 2A            mov b, [d]
4876   2582 38 00 00      mov c, 0
4877   2585 B0            cmp a, b
4878   2586 FD 73         slt ; < (signed)
4879   2588 E4            pop a
4880   2589             ; --- END RELATIONAL
4881   2589 C0 00 00      cmp b, 0
4882   258C C6 DA 25      je _for61_exit
4883   258F             _for61_block:
4884   258F             ; if (gcd(e, phi) == 1) { 
4885   258F             _if62_cond:
4886   258F             ; --- START FUNCTION CALL
4887   258F FA 05 00      lea d, [bp + 5] ; $phi
4888   2592 2A            mov b, [d]
4889   2593 38 00 00      mov c, 0
4890   2596 FD AB         swp b
4891   2598 D8            push b
4892   2599 FA FF FF      lea d, [bp + -1] ; $e
4893   259C 2A            mov b, [d]
4894   259D 38 00 00      mov c, 0
4895   25A0 FD AB         swp b
4896   25A2 D8            push b
4897   25A3 07 53 24      call gcd
4898   25A6 51 04 00      add sp, 4
4899   25A9             ; --- END FUNCTION CALL
4900   25A9             ; --- START RELATIONAL
4901   25A9 D7            push a
4902   25AA 11            mov a, b
4903   25AB FD 2E 01 00   mov32 cb, $00000001
4903   25AF 00 00 
4904   25B1 B0            cmp a, b
4905   25B2 FD 71         seq ; ==
4906   25B4 E4            pop a
4907   25B5             ; --- END RELATIONAL
4908   25B5 C0 00 00      cmp b, 0
4909   25B8 C6 C7 25      je _if62_exit
4910   25BB             _if62_TRUE:
4911   25BB             ; return e; 
4912   25BB FA FF FF      lea d, [bp + -1] ; $e
4913   25BE 2A            mov b, [d]
4914   25BF 38 00 00      mov c, 0
4915   25C2 F9            leave
4916   25C3 09            ret
4917   25C4 0A C7 25      jmp _if62_exit
4918   25C7             _if62_exit:
4919   25C7             _for61_update:
4920   25C7 FA FF FF      lea d, [bp + -1] ; $e
4921   25CA 2A            mov b, [d]
4922   25CB 38 00 00      mov c, 0
4923   25CE 11            mov a, b
4924   25CF FD 77         inc b
4925   25D1 FA FF FF      lea d, [bp + -1] ; $e
4926   25D4 FD 43         mov [d], b
4927   25D6 27            mov b, a
4928   25D7 0A 75 25      jmp _for61_cond
4929   25DA             _for61_exit:
4930   25DA             ; return 0; 
4931   25DA FD 2E 00 00   mov32 cb, $00000000
4931   25DE 00 00 
4932   25E0 F9            leave
4933   25E1 09            ret
4934   25E2             
4935   25E2             find_d:
4936   25E2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4937   25E5             ; int d; 
4938   25E5 52 02 00      sub sp, 2
4939   25E8             ; for (d = 2; d < phi; d++) { 
4940   25E8             _for63_init:
4941   25E8 FA FF FF      lea d, [bp + -1] ; $d
4942   25EB DA            push d
4943   25EC FD 2E 02 00   mov32 cb, $00000002
4943   25F0 00 00 
4944   25F2 E7            pop d
4945   25F3 FD 43         mov [d], b
4946   25F5             _for63_cond:
4947   25F5 FA FF FF      lea d, [bp + -1] ; $d
4948   25F8 2A            mov b, [d]
4949   25F9 38 00 00      mov c, 0
4950   25FC             ; --- START RELATIONAL
4951   25FC D7            push a
4952   25FD 11            mov a, b
4953   25FE FA 07 00      lea d, [bp + 7] ; $phi
4954   2601 2A            mov b, [d]
4955   2602 38 00 00      mov c, 0
4956   2605 B0            cmp a, b
4957   2606 FD 73         slt ; < (signed)
4958   2608 E4            pop a
4959   2609             ; --- END RELATIONAL
4960   2609 C0 00 00      cmp b, 0
4961   260C C6 61 26      je _for63_exit
4962   260F             _for63_block:
4963   260F             ; if ((d * e) % phi == 1) { 
4964   260F             _if64_cond:
4965   260F FA FF FF      lea d, [bp + -1] ; $d
4966   2612 2A            mov b, [d]
4967   2613 38 00 00      mov c, 0
4968   2616             ; --- START FACTORS
4969   2616 D7            push a
4970   2617 11            mov a, b
4971   2618 FA 05 00      lea d, [bp + 5] ; $e
4972   261B 2A            mov b, [d]
4973   261C 38 00 00      mov c, 0
4974   261F AC            mul a, b ; *
4975   2620 11            mov a, b
4976   2621 27            mov b, a
4977   2622 E4            pop a
4978   2623             ; --- END FACTORS
4979   2623             ; --- START FACTORS
4980   2623 D7            push a
4981   2624 11            mov a, b
4982   2625 FA 07 00      lea d, [bp + 7] ; $phi
4983   2628 2A            mov b, [d]
4984   2629 38 00 00      mov c, 0
4985   262C AE            div a, b ; 
4986   262D 11            mov a, b
4987   262E 27            mov b, a
4988   262F E4            pop a
4989   2630             ; --- END FACTORS
4990   2630             ; --- START RELATIONAL
4991   2630 D7            push a
4992   2631 11            mov a, b
4993   2632 FD 2E 01 00   mov32 cb, $00000001
4993   2636 00 00 
4994   2638 B0            cmp a, b
4995   2639 FD 71         seq ; ==
4996   263B E4            pop a
4997   263C             ; --- END RELATIONAL
4998   263C C0 00 00      cmp b, 0
4999   263F C6 4E 26      je _if64_exit
5000   2642             _if64_TRUE:
5001   2642             ; return d; 
5002   2642 FA FF FF      lea d, [bp + -1] ; $d
5003   2645 2A            mov b, [d]
5004   2646 38 00 00      mov c, 0
5005   2649 F9            leave
5006   264A 09            ret
5007   264B 0A 4E 26      jmp _if64_exit
5008   264E             _if64_exit:
5009   264E             _for63_update:
5010   264E FA FF FF      lea d, [bp + -1] ; $d
5011   2651 2A            mov b, [d]
5012   2652 38 00 00      mov c, 0
5013   2655 11            mov a, b
5014   2656 FD 77         inc b
5015   2658 FA FF FF      lea d, [bp + -1] ; $d
5016   265B FD 43         mov [d], b
5017   265D 27            mov b, a
5018   265E 0A F5 25      jmp _for63_cond
5019   2661             _for63_exit:
5020   2661             ; return 0; 
5021   2661 FD 2E 00 00   mov32 cb, $00000000
5021   2665 00 00 
5022   2667 F9            leave
5023   2668 09            ret
5024   2669             ; --- END TEXT SEGMENT
5025   2669             
5026   2669             ; --- BEGIN DATA SEGMENT
5027   2669 00 00       st_fopen_max_handle: .dw 0
5028   266B 50 75 62 6C _s0: .db "Public Key: ", 0
5028   266F 69 63 20 4B 
5028   2673 65 79 3A 20 
5028   2677 00 
5029   2678 25 64 2C 20 _s1: .db "%d, ", 0
5029   267C 00 
5030   267D 25 64 0A 00 _s2: .db "%d\n", 0
5031   2681 50 72 69 76 _s3: .db "Private Key: ", 0
5031   2685 61 74 65 20 
5031   2689 4B 65 79 3A 
5031   268D 20 00 
5032   268F 45 6E 74 65 _s4: .db "Enter a string: ", 0
5032   2693 72 20 61 20 
5032   2697 73 74 72 69 
5032   269B 6E 67 3A 20 
5032   269F 00 
5033   26A0 45 6E 63 72 _s5: .db "Encrypted text: ", 0
5033   26A4 79 70 74 65 
5033   26A8 64 20 74 65 
5033   26AC 78 74 3A 20 
5033   26B0 00 
5034   26B1 25 64 20 00 _s6: .db "%d ", 0
5035   26B5 0A 00       _s7: .db "\n", 0
5036   26B7 44 65 63 72 _s8: .db "Decrypted text: ", 0
5036   26BB 79 70 74 65 
5036   26BF 64 20 74 65 
5036   26C3 78 74 3A 20 
5036   26C7 00 
5037   26C8 55 6E 65 78 _s9: .db "Unexpected format in printf.", 0
5037   26CC 70 65 63 74 
5037   26D0 65 64 20 66 
5037   26D4 6F 72 6D 61 
5037   26D8 74 20 69 6E 
5037   26DC 20 70 72 69 
5037   26E0 6E 74 66 2E 
5037   26E4 00 
5038   26E5 45 72 72 6F _s10: .db "Error: Unknown argument type.\n", 0
5038   26E9 72 3A 20 55 
5038   26ED 6E 6B 6E 6F 
5038   26F1 77 6E 20 61 
5038   26F5 72 67 75 6D 
5038   26F9 65 6E 74 20 
5038   26FD 74 79 70 65 
5038   2701 2E 0A 00 
5039   2704 1B 5B 32 4A _s11: .db "\033[2J\033[H", 0
5039   2708 1B 5B 48 00 
5040   270C             
5041   270C 0E 27       _heap_top: .dw _heap
5042   270E 00          _heap: .db 0
5043   270F             ; --- END DATA SEGMENT
5044   270F             
5045   270F             .end
tasm: Number of errors = 0
