0001   0000             ; --- FILENAME: programs/rsa
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $p 
0011   0408             ; $q 
0012   0408             ; $n 
0013   0408             ; $phi 
0014   0408             ; $e 
0015   0408             ; $d 
0016   0408             ; $input_str 
0017   0408             ; $encrypted_chars 
0018   0408             ; $encrypted_chars_len 
0019   0408             ; $i 
0020   0408             ; $decrypted_char 
0021   0408             ; $c 
0022   0408 52 3F 01      sub sp, 319
0023   040B             ;; p = 13; 
0024   040B FA FF FF      lea d, [bp + -1] ; $p
0025   040E DA            push d
0026   040F 26 0D 00      mov b, $d
0027   0412 E7            pop d
0028   0413 FD 43         mov [d], b
0029   0415             ;; q = 11; 
0030   0415 FA FD FF      lea d, [bp + -3] ; $q
0031   0418 DA            push d
0032   0419 26 0B 00      mov b, $b
0033   041C E7            pop d
0034   041D FD 43         mov [d], b
0035   041F             ;; n = p * q; 
0036   041F FA FB FF      lea d, [bp + -5] ; $n
0037   0422 DA            push d
0038   0423 FA FF FF      lea d, [bp + -1] ; $p
0039   0426 2A            mov b, [d]
0040   0427             ; START FACTORS
0041   0427 D7            push a
0042   0428 11            mov a, b
0043   0429 FA FD FF      lea d, [bp + -3] ; $q
0044   042C 2A            mov b, [d]
0045   042D AC            mul a, b ; *
0046   042E 11            mov a, b
0047   042F 27            mov b, a
0048   0430 E4            pop a
0049   0431             ; END FACTORS
0050   0431 E7            pop d
0051   0432 FD 43         mov [d], b
0052   0434             ;; phi = (p - 1) * (q - 1); 
0053   0434 FA F9 FF      lea d, [bp + -7] ; $phi
0054   0437 DA            push d
0055   0438 FA FF FF      lea d, [bp + -1] ; $p
0056   043B 2A            mov b, [d]
0057   043C             ; START TERMS
0058   043C D7            push a
0059   043D 11            mov a, b
0060   043E 26 01 00      mov b, $1
0061   0441 60            sub a, b
0062   0442 27            mov b, a
0063   0443 E4            pop a
0064   0444             ; END TERMS
0065   0444             ; START FACTORS
0066   0444 D7            push a
0067   0445 11            mov a, b
0068   0446 FA FD FF      lea d, [bp + -3] ; $q
0069   0449 2A            mov b, [d]
0070   044A             ; START TERMS
0071   044A D7            push a
0072   044B 11            mov a, b
0073   044C 26 01 00      mov b, $1
0074   044F 60            sub a, b
0075   0450 27            mov b, a
0076   0451 E4            pop a
0077   0452             ; END TERMS
0078   0452 AC            mul a, b ; *
0079   0453 11            mov a, b
0080   0454 27            mov b, a
0081   0455 E4            pop a
0082   0456             ; END FACTORS
0083   0456 E7            pop d
0084   0457 FD 43         mov [d], b
0085   0459             ;; e = find_e(phi); 
0086   0459 FA F7 FF      lea d, [bp + -9] ; $e
0087   045C DA            push d
0088   045D FA F9 FF      lea d, [bp + -7] ; $phi
0089   0460 2A            mov b, [d]
0090   0461 FD AB         swp b
0091   0463 D8            push b
0092   0464 07 CE 16      call find_e
0093   0467 51 02 00      add sp, 2
0094   046A E7            pop d
0095   046B FD 43         mov [d], b
0096   046D             ;; d = find_d(e, phi); 
0097   046D FA F5 FF      lea d, [bp + -11] ; $d
0098   0470 DA            push d
0099   0471 FA F9 FF      lea d, [bp + -7] ; $phi
0100   0474 2A            mov b, [d]
0101   0475 FD AB         swp b
0102   0477 D8            push b
0103   0478 FA F7 FF      lea d, [bp + -9] ; $e
0104   047B 2A            mov b, [d]
0105   047C FD AB         swp b
0106   047E D8            push b
0107   047F 07 33 17      call find_d
0108   0482 51 04 00      add sp, 4
0109   0485 E7            pop d
0110   0486 FD 43         mov [d], b
0111   0488             ;; printf("Public Key: ("); 
0112   0488 26 9C 17      mov b, __s0 ; "Public Key: ("
0113   048B FD AB         swp b
0114   048D D8            push b
0115   048E 07 2E 08      call printf
0116   0491 51 02 00      add sp, 2
0117   0494             ;; printf("%d, ", n); 
0118   0494 FA FB FF      lea d, [bp + -5] ; $n
0119   0497 2A            mov b, [d]
0120   0498 FD AB         swp b
0121   049A D8            push b
0122   049B 26 AA 17      mov b, __s1 ; "%d, "
0123   049E FD AB         swp b
0124   04A0 D8            push b
0125   04A1 07 2E 08      call printf
0126   04A4 51 04 00      add sp, 4
0127   04A7             ;; printf("%d\n", e); 
0128   04A7 FA F7 FF      lea d, [bp + -9] ; $e
0129   04AA 2A            mov b, [d]
0130   04AB FD AB         swp b
0131   04AD D8            push b
0132   04AE 26 AF 17      mov b, __s2 ; "%d\n"
0133   04B1 FD AB         swp b
0134   04B3 D8            push b
0135   04B4 07 2E 08      call printf
0136   04B7 51 04 00      add sp, 4
0137   04BA             ;; print("Private Key: ("); 
0138   04BA 26 B3 17      mov b, __s3 ; "Private Key: ("
0139   04BD FD AB         swp b
0140   04BF D8            push b
0141   04C0 07 7A 11      call print
0142   04C3 51 02 00      add sp, 2
0143   04C6             ;; printf("%d, ", n); 
0144   04C6 FA FB FF      lea d, [bp + -5] ; $n
0145   04C9 2A            mov b, [d]
0146   04CA FD AB         swp b
0147   04CC D8            push b
0148   04CD 26 AA 17      mov b, __s1 ; "%d, "
0149   04D0 FD AB         swp b
0150   04D2 D8            push b
0151   04D3 07 2E 08      call printf
0152   04D6 51 04 00      add sp, 4
0153   04D9             ;; printf("%d\n", d); 
0154   04D9 FA F5 FF      lea d, [bp + -11] ; $d
0155   04DC 2A            mov b, [d]
0156   04DD FD AB         swp b
0157   04DF D8            push b
0158   04E0 26 AF 17      mov b, __s2 ; "%d\n"
0159   04E3 FD AB         swp b
0160   04E5 D8            push b
0161   04E6 07 2E 08      call printf
0162   04E9 51 04 00      add sp, 4
0163   04EC             ;; printf("Enter a string: "); 
0164   04EC 26 C2 17      mov b, __s4 ; "Enter a string: "
0165   04EF FD AB         swp b
0166   04F1 D8            push b
0167   04F2 07 2E 08      call printf
0168   04F5 51 02 00      add sp, 2
0169   04F8             ;; gets(input_str); 
0170   04F8 FA 91 FF      lea d, [bp + -111] ; $input_str
0171   04FB 2D            mov b, d
0172   04FC FD AB         swp b
0173   04FE D8            push b
0174   04FF 07 13 0D      call gets
0175   0502 51 02 00      add sp, 2
0176   0505             ;; encrypted_chars_len = 0; 
0177   0505 FA C7 FE      lea d, [bp + -313] ; $encrypted_chars_len
0178   0508 DA            push d
0179   0509 26 00 00      mov b, $0
0180   050C E7            pop d
0181   050D FD 43         mov [d], b
0182   050F             ;; printf("Encrypted text: "); 
0183   050F 26 D3 17      mov b, __s5 ; "Encrypted text: "
0184   0512 FD AB         swp b
0185   0514 D8            push b
0186   0515 07 2E 08      call printf
0187   0518 51 02 00      add sp, 2
0188   051B             ;; for (i = 0; input_str[i] != '\0' && input_str[i] != '\n'; i++) { 
0189   051B             _for1_init:
0190   051B FA C5 FE      lea d, [bp + -315] ; $i
0191   051E DA            push d
0192   051F 26 00 00      mov b, $0
0193   0522 E7            pop d
0194   0523 FD 43         mov [d], b
0195   0525             _for1_cond:
0196   0525 FA 91 FF      lea d, [bp + -111] ; $input_str
0197   0528 D7            push a
0198   0529 DA            push d
0199   052A FA C5 FE      lea d, [bp + -315] ; $i
0200   052D 2A            mov b, [d]
0201   052E E7            pop d
0202   052F 5A            add d, b
0203   0530 E4            pop a
0204   0531 32            mov bl, [d]
0205   0532 A7 00         mov bh, 0
0206   0534             ; START RELATIONAL
0207   0534 D7            push a
0208   0535 11            mov a, b
0209   0536 26 00 00      mov b, $0
0210   0539 B0            cmp a, b
0211   053A FD 72         sneq ; !=
0212   053C E4            pop a
0213   053D             ; END RELATIONAL
0214   053D D7            push a
0215   053E 11            mov a, b
0216   053F FA 91 FF      lea d, [bp + -111] ; $input_str
0217   0542 D7            push a
0218   0543 DA            push d
0219   0544 FA C5 FE      lea d, [bp + -315] ; $i
0220   0547 2A            mov b, [d]
0221   0548 E7            pop d
0222   0549 5A            add d, b
0223   054A E4            pop a
0224   054B 32            mov bl, [d]
0225   054C A7 00         mov bh, 0
0226   054E             ; START RELATIONAL
0227   054E D7            push a
0228   054F 11            mov a, b
0229   0550 26 0A 00      mov b, $a
0230   0553 B0            cmp a, b
0231   0554 FD 72         sneq ; !=
0232   0556 E4            pop a
0233   0557             ; END RELATIONAL
0234   0557 FD A7         sand a, b ; &&
0235   0559 E4            pop a
0236   055A C0 00 00      cmp b, 0
0237   055D C6 D5 05      je _for1_exit
0238   0560             _for1_block:
0239   0560             ;; encrypted_chars[i] = mod_exp(input_str[i], e, n); 
0240   0560 FA C9 FE      lea d, [bp + -311] ; $encrypted_chars
0241   0563 D7            push a
0242   0564 DA            push d
0243   0565 FA C5 FE      lea d, [bp + -315] ; $i
0244   0568 2A            mov b, [d]
0245   0569 E7            pop d
0246   056A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0247   056E E4            pop a
0248   056F DA            push d
0249   0570 FA FB FF      lea d, [bp + -5] ; $n
0250   0573 2A            mov b, [d]
0251   0574 FD AB         swp b
0252   0576 D8            push b
0253   0577 FA F7 FF      lea d, [bp + -9] ; $e
0254   057A 2A            mov b, [d]
0255   057B FD AB         swp b
0256   057D D8            push b
0257   057E FA 91 FF      lea d, [bp + -111] ; $input_str
0258   0581 D7            push a
0259   0582 DA            push d
0260   0583 FA C5 FE      lea d, [bp + -315] ; $i
0261   0586 2A            mov b, [d]
0262   0587 E7            pop d
0263   0588 5A            add d, b
0264   0589 E4            pop a
0265   058A 32            mov bl, [d]
0266   058B A7 00         mov bh, 0
0267   058D FD AB         swp b
0268   058F D8            push b
0269   0590 07 3A 16      call mod_exp
0270   0593 51 06 00      add sp, 6
0271   0596 E7            pop d
0272   0597 FD 43         mov [d], b
0273   0599             ;; printf("%d ", encrypted_chars[i]); 
0274   0599 FA C9 FE      lea d, [bp + -311] ; $encrypted_chars
0275   059C D7            push a
0276   059D DA            push d
0277   059E FA C5 FE      lea d, [bp + -315] ; $i
0278   05A1 2A            mov b, [d]
0279   05A2 E7            pop d
0280   05A3 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0281   05A7 E4            pop a
0282   05A8 2A            mov b, [d]
0283   05A9 FD AB         swp b
0284   05AB D8            push b
0285   05AC 26 E4 17      mov b, __s6 ; "%d "
0286   05AF FD AB         swp b
0287   05B1 D8            push b
0288   05B2 07 2E 08      call printf
0289   05B5 51 04 00      add sp, 4
0290   05B8             ;; encrypted_chars_len++; 
0291   05B8 FA C7 FE      lea d, [bp + -313] ; $encrypted_chars_len
0292   05BB 2A            mov b, [d]
0293   05BC D8            push b
0294   05BD FD 77         inc b
0295   05BF FA C7 FE      lea d, [bp + -313] ; $encrypted_chars_len
0296   05C2 FD 43         mov [d], b
0297   05C4 E5            pop b
0298   05C5             _for1_update:
0299   05C5 FA C5 FE      lea d, [bp + -315] ; $i
0300   05C8 2A            mov b, [d]
0301   05C9 D8            push b
0302   05CA FD 77         inc b
0303   05CC FA C5 FE      lea d, [bp + -315] ; $i
0304   05CF FD 43         mov [d], b
0305   05D1 E5            pop b
0306   05D2 0A 25 05      jmp _for1_cond
0307   05D5             _for1_exit:
0308   05D5             ;; printf("\n"); 
0309   05D5 26 E8 17      mov b, __s7 ; "\n"
0310   05D8 FD AB         swp b
0311   05DA D8            push b
0312   05DB 07 2E 08      call printf
0313   05DE 51 02 00      add sp, 2
0314   05E1             ;; printf("Decrypted text: "); 
0315   05E1 26 EA 17      mov b, __s8 ; "Decrypted text: "
0316   05E4 FD AB         swp b
0317   05E6 D8            push b
0318   05E7 07 2E 08      call printf
0319   05EA 51 02 00      add sp, 2
0320   05ED             ;; for (i = 0; i < encrypted_chars_len; i++) { 
0321   05ED             _for2_init:
0322   05ED FA C5 FE      lea d, [bp + -315] ; $i
0323   05F0 DA            push d
0324   05F1 26 00 00      mov b, $0
0325   05F4 E7            pop d
0326   05F5 FD 43         mov [d], b
0327   05F7             _for2_cond:
0328   05F7 FA C5 FE      lea d, [bp + -315] ; $i
0329   05FA 2A            mov b, [d]
0330   05FB             ; START RELATIONAL
0331   05FB D7            push a
0332   05FC 11            mov a, b
0333   05FD FA C7 FE      lea d, [bp + -313] ; $encrypted_chars_len
0334   0600 2A            mov b, [d]
0335   0601 B0            cmp a, b
0336   0602 FD 73         slt ; < 
0337   0604 E4            pop a
0338   0605             ; END RELATIONAL
0339   0605 C0 00 00      cmp b, 0
0340   0608 C6 61 06      je _for2_exit
0341   060B             _for2_block:
0342   060B             ;; decrypted_char = mod_exp(encrypted_chars[i], d, n); 
0343   060B FA C3 FE      lea d, [bp + -317] ; $decrypted_char
0344   060E DA            push d
0345   060F FA FB FF      lea d, [bp + -5] ; $n
0346   0612 2A            mov b, [d]
0347   0613 FD AB         swp b
0348   0615 D8            push b
0349   0616 FA F5 FF      lea d, [bp + -11] ; $d
0350   0619 2A            mov b, [d]
0351   061A FD AB         swp b
0352   061C D8            push b
0353   061D FA C9 FE      lea d, [bp + -311] ; $encrypted_chars
0354   0620 D7            push a
0355   0621 DA            push d
0356   0622 FA C5 FE      lea d, [bp + -315] ; $i
0357   0625 2A            mov b, [d]
0358   0626 E7            pop d
0359   0627 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0360   062B E4            pop a
0361   062C 2A            mov b, [d]
0362   062D FD AB         swp b
0363   062F D8            push b
0364   0630 07 3A 16      call mod_exp
0365   0633 51 06 00      add sp, 6
0366   0636 E7            pop d
0367   0637 FD 43         mov [d], b
0368   0639             ;; c = decrypted_char; 
0369   0639 FA C2 FE      lea d, [bp + -318] ; $c
0370   063C DA            push d
0371   063D FA C3 FE      lea d, [bp + -317] ; $decrypted_char
0372   0640 2A            mov b, [d]
0373   0641 E7            pop d
0374   0642 FD 3E         mov [d], bl
0375   0644             ;; putchar(c); 
0376   0644 FA C2 FE      lea d, [bp + -318] ; $c
0377   0647 32            mov bl, [d]
0378   0648 A7 00         mov bh, 0
0379   064A DD            push bl
0380   064B 07 32 11      call putchar
0381   064E 51 01 00      add sp, 1
0382   0651             _for2_update:
0383   0651 FA C5 FE      lea d, [bp + -315] ; $i
0384   0654 2A            mov b, [d]
0385   0655 D8            push b
0386   0656 FD 77         inc b
0387   0658 FA C5 FE      lea d, [bp + -315] ; $i
0388   065B FD 43         mov [d], b
0389   065D E5            pop b
0390   065E 0A F7 05      jmp _for2_cond
0391   0661             _for2_exit:
0392   0661             ;; printf("\n"); 
0393   0661 26 E8 17      mov b, __s7 ; "\n"
0394   0664 FD AB         swp b
0395   0666 D8            push b
0396   0667 07 2E 08      call printf
0397   066A 51 02 00      add sp, 2
0398   066D             ;; return 0; 
0399   066D 26 00 00      mov b, $0
0400   0670 F9            leave
0401   0671 05 0B         syscall sys_terminate_proc
0402   0673             
0403   0673             strcpy:
0404   0673 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0405   0676             ; $psrc 
0406   0676             ; $pdest 
0407   0676 52 04 00      sub sp, 4
0408   0679             ;; psrc = src; 
0409   0679 FA FF FF      lea d, [bp + -1] ; $psrc
0410   067C DA            push d
0411   067D FA 07 00      lea d, [bp + 7] ; $src
0412   0680 2A            mov b, [d]
0413   0681 E7            pop d
0414   0682 FD 43         mov [d], b
0415   0684             ;; pdest = dest; 
0416   0684 FA FD FF      lea d, [bp + -3] ; $pdest
0417   0687 DA            push d
0418   0688 FA 05 00      lea d, [bp + 5] ; $dest
0419   068B 2A            mov b, [d]
0420   068C E7            pop d
0421   068D FD 43         mov [d], b
0422   068F             ;; while(*psrc) *pdest++ = *psrc++; 
0423   068F             _while3_cond:
0424   068F FA FF FF      lea d, [bp + -1] ; $psrc
0425   0692 2A            mov b, [d]
0426   0693 74            mov d, b
0427   0694 32            mov bl, [d]
0428   0695 A7 00         mov bh, 0
0429   0697 C0 00 00      cmp b, 0
0430   069A C6 C2 06      je _while3_exit
0431   069D             _while3_block:
0432   069D             ;; *pdest++ = *psrc++; 
0433   069D FA FD FF      lea d, [bp + -3] ; $pdest
0434   06A0 2A            mov b, [d]
0435   06A1 D8            push b
0436   06A2 FD 77         inc b
0437   06A4 FA FD FF      lea d, [bp + -3] ; $pdest
0438   06A7 FD 43         mov [d], b
0439   06A9 E5            pop b
0440   06AA D8            push b
0441   06AB FA FF FF      lea d, [bp + -1] ; $psrc
0442   06AE 2A            mov b, [d]
0443   06AF D8            push b
0444   06B0 FD 77         inc b
0445   06B2 FA FF FF      lea d, [bp + -1] ; $psrc
0446   06B5 FD 43         mov [d], b
0447   06B7 E5            pop b
0448   06B8 74            mov d, b
0449   06B9 32            mov bl, [d]
0450   06BA A7 00         mov bh, 0
0451   06BC E7            pop d
0452   06BD FD 3E         mov [d], bl
0453   06BF 0A 8F 06      jmp _while3_cond
0454   06C2             _while3_exit:
0455   06C2             ;; *pdest = '\0'; 
0456   06C2 FA FD FF      lea d, [bp + -3] ; $pdest
0457   06C5 2A            mov b, [d]
0458   06C6 D8            push b
0459   06C7 26 00 00      mov b, $0
0460   06CA E7            pop d
0461   06CB FD 3E         mov [d], bl
0462   06CD F9            leave
0463   06CE 09            ret
0464   06CF             
0465   06CF             strcmp:
0466   06CF F8 00 00      enter 0 ; (push bp; mov bp, sp)
0467   06D2             ;; while (*s1 && (*s1 == *s2)) { 
0468   06D2             _while4_cond:
0469   06D2 FA 05 00      lea d, [bp + 5] ; $s1
0470   06D5 2A            mov b, [d]
0471   06D6 74            mov d, b
0472   06D7 32            mov bl, [d]
0473   06D8 A7 00         mov bh, 0
0474   06DA D7            push a
0475   06DB 11            mov a, b
0476   06DC FA 05 00      lea d, [bp + 5] ; $s1
0477   06DF 2A            mov b, [d]
0478   06E0 74            mov d, b
0479   06E1 32            mov bl, [d]
0480   06E2 A7 00         mov bh, 0
0481   06E4             ; START RELATIONAL
0482   06E4 D7            push a
0483   06E5 11            mov a, b
0484   06E6 FA 07 00      lea d, [bp + 7] ; $s2
0485   06E9 2A            mov b, [d]
0486   06EA 74            mov d, b
0487   06EB 32            mov bl, [d]
0488   06EC A7 00         mov bh, 0
0489   06EE B0            cmp a, b
0490   06EF FD 71         seq ; ==
0491   06F1 E4            pop a
0492   06F2             ; END RELATIONAL
0493   06F2 FD A7         sand a, b ; &&
0494   06F4 E4            pop a
0495   06F5 C0 00 00      cmp b, 0
0496   06F8 C6 18 07      je _while4_exit
0497   06FB             _while4_block:
0498   06FB             ;; s1++; 
0499   06FB FA 05 00      lea d, [bp + 5] ; $s1
0500   06FE 2A            mov b, [d]
0501   06FF D8            push b
0502   0700 FD 77         inc b
0503   0702 FA 05 00      lea d, [bp + 5] ; $s1
0504   0705 FD 43         mov [d], b
0505   0707 E5            pop b
0506   0708             ;; s2++; 
0507   0708 FA 07 00      lea d, [bp + 7] ; $s2
0508   070B 2A            mov b, [d]
0509   070C D8            push b
0510   070D FD 77         inc b
0511   070F FA 07 00      lea d, [bp + 7] ; $s2
0512   0712 FD 43         mov [d], b
0513   0714 E5            pop b
0514   0715 0A D2 06      jmp _while4_cond
0515   0718             _while4_exit:
0516   0718             ;; return *s1 - *s2; 
0517   0718 FA 05 00      lea d, [bp + 5] ; $s1
0518   071B 2A            mov b, [d]
0519   071C 74            mov d, b
0520   071D 32            mov bl, [d]
0521   071E A7 00         mov bh, 0
0522   0720             ; START TERMS
0523   0720 D7            push a
0524   0721 11            mov a, b
0525   0722 FA 07 00      lea d, [bp + 7] ; $s2
0526   0725 2A            mov b, [d]
0527   0726 74            mov d, b
0528   0727 32            mov bl, [d]
0529   0728 A7 00         mov bh, 0
0530   072A 60            sub a, b
0531   072B 27            mov b, a
0532   072C E4            pop a
0533   072D             ; END TERMS
0534   072D F9            leave
0535   072E 09            ret
0536   072F             
0537   072F             strcat:
0538   072F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0539   0732             ; $dest_len 
0540   0732             ; $i 
0541   0732 52 04 00      sub sp, 4
0542   0735             ;; dest_len = strlen(dest); 
0543   0735 FA FF FF      lea d, [bp + -1] ; $dest_len
0544   0738 DA            push d
0545   0739 FA 05 00      lea d, [bp + 5] ; $dest
0546   073C 2A            mov b, [d]
0547   073D FD AB         swp b
0548   073F D8            push b
0549   0740 07 E5 07      call strlen
0550   0743 51 02 00      add sp, 2
0551   0746 E7            pop d
0552   0747 FD 43         mov [d], b
0553   0749             ;; for (i = 0; src[i] != 0; i=i+1) { 
0554   0749             _for5_init:
0555   0749 FA FD FF      lea d, [bp + -3] ; $i
0556   074C DA            push d
0557   074D 26 00 00      mov b, $0
0558   0750 E7            pop d
0559   0751 FD 43         mov [d], b
0560   0753             _for5_cond:
0561   0753 FA 07 00      lea d, [bp + 7] ; $src
0562   0756 FD 2A         mov d, [d]
0563   0758 D7            push a
0564   0759 DA            push d
0565   075A FA FD FF      lea d, [bp + -3] ; $i
0566   075D 2A            mov b, [d]
0567   075E E7            pop d
0568   075F FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0569   0763 E4            pop a
0570   0764 32            mov bl, [d]
0571   0765 A7 00         mov bh, 0
0572   0767             ; START RELATIONAL
0573   0767 D7            push a
0574   0768 11            mov a, b
0575   0769 26 00 00      mov b, $0
0576   076C B0            cmp a, b
0577   076D FD 72         sneq ; !=
0578   076F E4            pop a
0579   0770             ; END RELATIONAL
0580   0770 C0 00 00      cmp b, 0
0581   0773 C6 BE 07      je _for5_exit
0582   0776             _for5_block:
0583   0776             ;; dest[dest_len + i] = src[i]; 
0584   0776 FA 05 00      lea d, [bp + 5] ; $dest
0585   0779 FD 2A         mov d, [d]
0586   077B D7            push a
0587   077C DA            push d
0588   077D FA FF FF      lea d, [bp + -1] ; $dest_len
0589   0780 2A            mov b, [d]
0590   0781             ; START TERMS
0591   0781 D7            push a
0592   0782 11            mov a, b
0593   0783 FA FD FF      lea d, [bp + -3] ; $i
0594   0786 2A            mov b, [d]
0595   0787 54            add a, b
0596   0788 27            mov b, a
0597   0789 E4            pop a
0598   078A             ; END TERMS
0599   078A E7            pop d
0600   078B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0601   078F E4            pop a
0602   0790 DA            push d
0603   0791 FA 07 00      lea d, [bp + 7] ; $src
0604   0794 FD 2A         mov d, [d]
0605   0796 D7            push a
0606   0797 DA            push d
0607   0798 FA FD FF      lea d, [bp + -3] ; $i
0608   079B 2A            mov b, [d]
0609   079C E7            pop d
0610   079D FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0611   07A1 E4            pop a
0612   07A2 32            mov bl, [d]
0613   07A3 A7 00         mov bh, 0
0614   07A5 E7            pop d
0615   07A6 FD 3E         mov [d], bl
0616   07A8             _for5_update:
0617   07A8 FA FD FF      lea d, [bp + -3] ; $i
0618   07AB DA            push d
0619   07AC FA FD FF      lea d, [bp + -3] ; $i
0620   07AF 2A            mov b, [d]
0621   07B0             ; START TERMS
0622   07B0 D7            push a
0623   07B1 11            mov a, b
0624   07B2 26 01 00      mov b, $1
0625   07B5 54            add a, b
0626   07B6 27            mov b, a
0627   07B7 E4            pop a
0628   07B8             ; END TERMS
0629   07B8 E7            pop d
0630   07B9 FD 43         mov [d], b
0631   07BB 0A 53 07      jmp _for5_cond
0632   07BE             _for5_exit:
0633   07BE             ;; dest[dest_len + i] = 0; 
0634   07BE FA 05 00      lea d, [bp + 5] ; $dest
0635   07C1 FD 2A         mov d, [d]
0636   07C3 D7            push a
0637   07C4 DA            push d
0638   07C5 FA FF FF      lea d, [bp + -1] ; $dest_len
0639   07C8 2A            mov b, [d]
0640   07C9             ; START TERMS
0641   07C9 D7            push a
0642   07CA 11            mov a, b
0643   07CB FA FD FF      lea d, [bp + -3] ; $i
0644   07CE 2A            mov b, [d]
0645   07CF 54            add a, b
0646   07D0 27            mov b, a
0647   07D1 E4            pop a
0648   07D2             ; END TERMS
0649   07D2 E7            pop d
0650   07D3 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0651   07D7 E4            pop a
0652   07D8 DA            push d
0653   07D9 26 00 00      mov b, $0
0654   07DC E7            pop d
0655   07DD FD 3E         mov [d], bl
0656   07DF             ;; return dest; 
0657   07DF FA 05 00      lea d, [bp + 5] ; $dest
0658   07E2 2A            mov b, [d]
0659   07E3 F9            leave
0660   07E4 09            ret
0661   07E5             
0662   07E5             strlen:
0663   07E5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0664   07E8             ; $length 
0665   07E8 52 02 00      sub sp, 2
0666   07EB             ;; length = 0; 
0667   07EB FA FF FF      lea d, [bp + -1] ; $length
0668   07EE DA            push d
0669   07EF 26 00 00      mov b, $0
0670   07F2 E7            pop d
0671   07F3 FD 43         mov [d], b
0672   07F5             ;; while (str[length] != 0) { 
0673   07F5             _while6_cond:
0674   07F5 FA 05 00      lea d, [bp + 5] ; $str
0675   07F8 FD 2A         mov d, [d]
0676   07FA D7            push a
0677   07FB DA            push d
0678   07FC FA FF FF      lea d, [bp + -1] ; $length
0679   07FF 2A            mov b, [d]
0680   0800 E7            pop d
0681   0801 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0682   0805 E4            pop a
0683   0806 32            mov bl, [d]
0684   0807 A7 00         mov bh, 0
0685   0809             ; START RELATIONAL
0686   0809 D7            push a
0687   080A 11            mov a, b
0688   080B 26 00 00      mov b, $0
0689   080E B0            cmp a, b
0690   080F FD 72         sneq ; !=
0691   0811 E4            pop a
0692   0812             ; END RELATIONAL
0693   0812 C0 00 00      cmp b, 0
0694   0815 C6 28 08      je _while6_exit
0695   0818             _while6_block:
0696   0818             ;; length++; 
0697   0818 FA FF FF      lea d, [bp + -1] ; $length
0698   081B 2A            mov b, [d]
0699   081C D8            push b
0700   081D FD 77         inc b
0701   081F FA FF FF      lea d, [bp + -1] ; $length
0702   0822 FD 43         mov [d], b
0703   0824 E5            pop b
0704   0825 0A F5 07      jmp _while6_cond
0705   0828             _while6_exit:
0706   0828             ;; return length; 
0707   0828 FA FF FF      lea d, [bp + -1] ; $length
0708   082B 2A            mov b, [d]
0709   082C F9            leave
0710   082D 09            ret
0711   082E             
0712   082E             printf:
0713   082E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0714   0831             ; $p 
0715   0831             ; $fp 
0716   0831             ; $i 
0717   0831 52 06 00      sub sp, 6
0718   0834             ;; fp = format; 
0719   0834 FA FD FF      lea d, [bp + -3] ; $fp
0720   0837 DA            push d
0721   0838 FA 05 00      lea d, [bp + 5] ; $format
0722   083B 2A            mov b, [d]
0723   083C E7            pop d
0724   083D FD 43         mov [d], b
0725   083F             ;; p = &format + 2; 
0726   083F FA FF FF      lea d, [bp + -1] ; $p
0727   0842 DA            push d
0728   0843 FA 05 00      lea d, [bp + 5] ; $format
0729   0846 2D            mov b, d
0730   0847             ; START TERMS
0731   0847 D7            push a
0732   0848 11            mov a, b
0733   0849 26 02 00      mov b, $2
0734   084C 54            add a, b
0735   084D 27            mov b, a
0736   084E E4            pop a
0737   084F             ; END TERMS
0738   084F E7            pop d
0739   0850 FD 43         mov [d], b
0740   0852             ;; for(;;){ 
0741   0852             _for7_init:
0742   0852             _for7_cond:
0743   0852             _for7_block:
0744   0852             ;; if(!*fp) break; 
0745   0852             _if8_cond:
0746   0852 FA FD FF      lea d, [bp + -3] ; $fp
0747   0855 2A            mov b, [d]
0748   0856 74            mov d, b
0749   0857 32            mov bl, [d]
0750   0858 A7 00         mov bh, 0
0751   085A C0 00 00      cmp b, 0
0752   085D FD 71         seq ; !
0753   085F C0 00 00      cmp b, 0
0754   0862 C6 6B 08      je _if8_else
0755   0865             _if8_true:
0756   0865             ;; break; 
0757   0865 0A 7A 0A      jmp _for7_exit ; for break
0758   0868 0A 77 0A      jmp _if8_exit
0759   086B             _if8_else:
0760   086B             ;; if(*fp == '%'){ 
0761   086B             _if9_cond:
0762   086B FA FD FF      lea d, [bp + -3] ; $fp
0763   086E 2A            mov b, [d]
0764   086F 74            mov d, b
0765   0870 32            mov bl, [d]
0766   0871 A7 00         mov bh, 0
0767   0873             ; START RELATIONAL
0768   0873 D7            push a
0769   0874 11            mov a, b
0770   0875 26 25 00      mov b, $25
0771   0878 B0            cmp a, b
0772   0879 FD 71         seq ; ==
0773   087B E4            pop a
0774   087C             ; END RELATIONAL
0775   087C C0 00 00      cmp b, 0
0776   087F C6 5B 0A      je _if9_else
0777   0882             _if9_true:
0778   0882             ;; fp++; 
0779   0882 FA FD FF      lea d, [bp + -3] ; $fp
0780   0885 2A            mov b, [d]
0781   0886 D8            push b
0782   0887 FD 77         inc b
0783   0889 FA FD FF      lea d, [bp + -3] ; $fp
0784   088C FD 43         mov [d], b
0785   088E E5            pop b
0786   088F             ;; switch(*fp){ 
0787   088F             _switch10_expr:
0788   088F FA FD FF      lea d, [bp + -3] ; $fp
0789   0892 2A            mov b, [d]
0790   0893 74            mov d, b
0791   0894 32            mov bl, [d]
0792   0895 A7 00         mov bh, 0
0793   0897             _switch10_comparisons:
0794   0897 C1 6C         cmp bl, $6c
0795   0899 C6 C5 08      je _switch10_case0
0796   089C C1 4C         cmp bl, $4c
0797   089E C6 C5 08      je _switch10_case1
0798   08A1 C1 64         cmp bl, $64
0799   08A3 C6 96 09      je _switch10_case2
0800   08A6 C1 69         cmp bl, $69
0801   08A8 C6 96 09      je _switch10_case3
0802   08AB C1 75         cmp bl, $75
0803   08AD C6 BB 09      je _switch10_case4
0804   08B0 C1 78         cmp bl, $78
0805   08B2 C6 E0 09      je _switch10_case5
0806   08B5 C1 63         cmp bl, $63
0807   08B7 C6 FF 09      je _switch10_case6
0808   08BA C1 73         cmp bl, $73
0809   08BC C6 1F 0A      je _switch10_case7
0810   08BF 0A 3F 0A      jmp _switch10_default
0811   08C2 0A 4B 0A      jmp _switch10_exit
0812   08C5             _switch10_case0:
0813   08C5             _switch10_case1:
0814   08C5             ;; fp++; 
0815   08C5 FA FD FF      lea d, [bp + -3] ; $fp
0816   08C8 2A            mov b, [d]
0817   08C9 D8            push b
0818   08CA FD 77         inc b
0819   08CC FA FD FF      lea d, [bp + -3] ; $fp
0820   08CF FD 43         mov [d], b
0821   08D1 E5            pop b
0822   08D2             ;; if(*fp == 'd' || *fp == 'i') 
0823   08D2             _if11_cond:
0824   08D2 FA FD FF      lea d, [bp + -3] ; $fp
0825   08D5 2A            mov b, [d]
0826   08D6 74            mov d, b
0827   08D7 32            mov bl, [d]
0828   08D8 A7 00         mov bh, 0
0829   08DA             ; START RELATIONAL
0830   08DA D7            push a
0831   08DB 11            mov a, b
0832   08DC 26 64 00      mov b, $64
0833   08DF B0            cmp a, b
0834   08E0 FD 71         seq ; ==
0835   08E2 E4            pop a
0836   08E3             ; END RELATIONAL
0837   08E3 D7            push a
0838   08E4 11            mov a, b
0839   08E5 FA FD FF      lea d, [bp + -3] ; $fp
0840   08E8 2A            mov b, [d]
0841   08E9 74            mov d, b
0842   08EA 32            mov bl, [d]
0843   08EB A7 00         mov bh, 0
0844   08ED             ; START RELATIONAL
0845   08ED D7            push a
0846   08EE 11            mov a, b
0847   08EF 26 69 00      mov b, $69
0848   08F2 B0            cmp a, b
0849   08F3 FD 71         seq ; ==
0850   08F5 E4            pop a
0851   08F6             ; END RELATIONAL
0852   08F6 FD A8         sor a, b ; ||
0853   08F8 E4            pop a
0854   08F9 C0 00 00      cmp b, 0
0855   08FC C6 13 09      je _if11_else
0856   08FF             _if11_true:
0857   08FF             ;; print_signed_long(*(long *)p); 
0858   08FF FD 79         mov g, b
0859   0901 28            mov b, c
0860   0902 FD AB         swp b
0861   0904 D8            push b
0862   0905 FD 27         mov b, g
0863   0907 FD AB         swp b
0864   0909 D8            push b
0865   090A 07 1E 0E      call print_signed_long
0866   090D 51 04 00      add sp, 4
0867   0910 0A 80 09      jmp _if11_exit
0868   0913             _if11_else:
0869   0913             ;; if(*fp == 'u') 
0870   0913             _if12_cond:
0871   0913 FA FD FF      lea d, [bp + -3] ; $fp
0872   0916 2A            mov b, [d]
0873   0917 74            mov d, b
0874   0918 32            mov bl, [d]
0875   0919 A7 00         mov bh, 0
0876   091B             ; START RELATIONAL
0877   091B D7            push a
0878   091C 11            mov a, b
0879   091D 26 75 00      mov b, $75
0880   0920 B0            cmp a, b
0881   0921 FD 71         seq ; ==
0882   0923 E4            pop a
0883   0924             ; END RELATIONAL
0884   0924 C0 00 00      cmp b, 0
0885   0927 C6 3E 09      je _if12_else
0886   092A             _if12_true:
0887   092A             ;; print_unsigned_long(*(unsigned long *)p); 
0888   092A FD 79         mov g, b
0889   092C 28            mov b, c
0890   092D FD AB         swp b
0891   092F D8            push b
0892   0930 FD 27         mov b, g
0893   0932 FD AB         swp b
0894   0934 D8            push b
0895   0935 07 53 0F      call print_unsigned_long
0896   0938 51 04 00      add sp, 4
0897   093B 0A 80 09      jmp _if12_exit
0898   093E             _if12_else:
0899   093E             ;; if(*fp == 'x') 
0900   093E             _if13_cond:
0901   093E FA FD FF      lea d, [bp + -3] ; $fp
0902   0941 2A            mov b, [d]
0903   0942 74            mov d, b
0904   0943 32            mov bl, [d]
0905   0944 A7 00         mov bh, 0
0906   0946             ; START RELATIONAL
0907   0946 D7            push a
0908   0947 11            mov a, b
0909   0948 26 78 00      mov b, $78
0910   094B B0            cmp a, b
0911   094C FD 71         seq ; ==
0912   094E E4            pop a
0913   094F             ; END RELATIONAL
0914   094F C0 00 00      cmp b, 0
0915   0952 C6 74 09      je _if13_else
0916   0955             _if13_true:
0917   0955             ;; printx32(*(long int *)p); 
0918   0955 FA FF FF      lea d, [bp + -1] ; $p
0919   0958 2A            mov b, [d]
0920   0959 74            mov d, b
0921   095A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0922   095D FD 39         mov c, b ; And place it into C
0923   095F 2A            mov b, [d] ; Lower Word in B
0924   0960 FD 79         mov g, b
0925   0962 28            mov b, c
0926   0963 FD AB         swp b
0927   0965 D8            push b
0928   0966 FD 27         mov b, g
0929   0968 FD AB         swp b
0930   096A D8            push b
0931   096B 07 91 0A      call printx32
0932   096E 51 04 00      add sp, 4
0933   0971 0A 80 09      jmp _if13_exit
0934   0974             _if13_else:
0935   0974             ;; err("Unexpected format in printf."); 
0936   0974 26 FB 17      mov b, __s9 ; "Unexpected format in printf."
0937   0977 FD AB         swp b
0938   0979 D8            push b
0939   097A 07 7C 0A      call err
0940   097D 51 02 00      add sp, 2
0941   0980             _if13_exit:
0942   0980             _if12_exit:
0943   0980             _if11_exit:
0944   0980             ;; p = p + 4; 
0945   0980 FA FF FF      lea d, [bp + -1] ; $p
0946   0983 DA            push d
0947   0984 FA FF FF      lea d, [bp + -1] ; $p
0948   0987 2A            mov b, [d]
0949   0988             ; START TERMS
0950   0988 D7            push a
0951   0989 11            mov a, b
0952   098A 26 04 00      mov b, $4
0953   098D 54            add a, b
0954   098E 27            mov b, a
0955   098F E4            pop a
0956   0990             ; END TERMS
0957   0990 E7            pop d
0958   0991 FD 43         mov [d], b
0959   0993             ;; break; 
0960   0993 0A 4B 0A      jmp _switch10_exit ; case break
0961   0996             _switch10_case2:
0962   0996             _switch10_case3:
0963   0996             ;; print_signed(*(int*)p); 
0964   0996 FA FF FF      lea d, [bp + -1] ; $p
0965   0999 2A            mov b, [d]
0966   099A 74            mov d, b
0967   099B 2A            mov b, [d]
0968   099C FD AB         swp b
0969   099E D8            push b
0970   099F 07 2D 0D      call print_signed
0971   09A2 51 02 00      add sp, 2
0972   09A5             ;; p = p + 2; 
0973   09A5 FA FF FF      lea d, [bp + -1] ; $p
0974   09A8 DA            push d
0975   09A9 FA FF FF      lea d, [bp + -1] ; $p
0976   09AC 2A            mov b, [d]
0977   09AD             ; START TERMS
0978   09AD D7            push a
0979   09AE 11            mov a, b
0980   09AF 26 02 00      mov b, $2
0981   09B2 54            add a, b
0982   09B3 27            mov b, a
0983   09B4 E4            pop a
0984   09B5             ; END TERMS
0985   09B5 E7            pop d
0986   09B6 FD 43         mov [d], b
0987   09B8             ;; break; 
0988   09B8 0A 4B 0A      jmp _switch10_exit ; case break
0989   09BB             _switch10_case4:
0990   09BB             ;; print_unsigned(*(unsigned int*)p); 
0991   09BB FA FF FF      lea d, [bp + -1] ; $p
0992   09BE 2A            mov b, [d]
0993   09BF 74            mov d, b
0994   09C0 2A            mov b, [d]
0995   09C1 FD AB         swp b
0996   09C3 D8            push b
0997   09C4 07 4A 10      call print_unsigned
0998   09C7 51 02 00      add sp, 2
0999   09CA             ;; p = p + 2; 
1000   09CA FA FF FF      lea d, [bp + -1] ; $p
1001   09CD DA            push d
1002   09CE FA FF FF      lea d, [bp + -1] ; $p
1003   09D1 2A            mov b, [d]
1004   09D2             ; START TERMS
1005   09D2 D7            push a
1006   09D3 11            mov a, b
1007   09D4 26 02 00      mov b, $2
1008   09D7 54            add a, b
1009   09D8 27            mov b, a
1010   09D9 E4            pop a
1011   09DA             ; END TERMS
1012   09DA E7            pop d
1013   09DB FD 43         mov [d], b
1014   09DD             ;; break; 
1015   09DD 0A 4B 0A      jmp _switch10_exit ; case break
1016   09E0             _switch10_case5:
1017   09E0             
1018   09E0             ; --- BEGIN INLINE ASM BLOCK
1019   09E0 FA FF FF      lea d, [bp + -1] ; $p
1020   09E3 FD 2A         mov d, [d]
1021   09E5 2A            mov b, [d]
1022   09E6 07 FB 14      call print_u16x
1023   09E9             ; --- END INLINE ASM BLOCK
1024   09E9             
1025   09E9             ;; p = p + 2; 
1026   09E9 FA FF FF      lea d, [bp + -1] ; $p
1027   09EC DA            push d
1028   09ED FA FF FF      lea d, [bp + -1] ; $p
1029   09F0 2A            mov b, [d]
1030   09F1             ; START TERMS
1031   09F1 D7            push a
1032   09F2 11            mov a, b
1033   09F3 26 02 00      mov b, $2
1034   09F6 54            add a, b
1035   09F7 27            mov b, a
1036   09F8 E4            pop a
1037   09F9             ; END TERMS
1038   09F9 E7            pop d
1039   09FA FD 43         mov [d], b
1040   09FC             ;; break; 
1041   09FC 0A 4B 0A      jmp _switch10_exit ; case break
1042   09FF             _switch10_case6:
1043   09FF             
1044   09FF             ; --- BEGIN INLINE ASM BLOCK
1045   09FF FA FF FF      lea d, [bp + -1] ; $p
1046   0A02 FD 2A         mov d, [d]
1047   0A04 1E            mov al, [d]
1048   0A05 23            mov ah, al
1049   0A06 07 59 13      call _putchar
1050   0A09             ; --- END INLINE ASM BLOCK
1051   0A09             
1052   0A09             ;; p = p + 2; 
1053   0A09 FA FF FF      lea d, [bp + -1] ; $p
1054   0A0C DA            push d
1055   0A0D FA FF FF      lea d, [bp + -1] ; $p
1056   0A10 2A            mov b, [d]
1057   0A11             ; START TERMS
1058   0A11 D7            push a
1059   0A12 11            mov a, b
1060   0A13 26 02 00      mov b, $2
1061   0A16 54            add a, b
1062   0A17 27            mov b, a
1063   0A18 E4            pop a
1064   0A19             ; END TERMS
1065   0A19 E7            pop d
1066   0A1A FD 43         mov [d], b
1067   0A1C             ;; break; 
1068   0A1C 0A 4B 0A      jmp _switch10_exit ; case break
1069   0A1F             _switch10_case7:
1070   0A1F             
1071   0A1F             ; --- BEGIN INLINE ASM BLOCK
1072   0A1F FA FF FF      lea d, [bp + -1] ; $p
1073   0A22 FD 2A         mov d, [d]
1074   0A24 FD 2A         mov d, [d]
1075   0A26 07 A3 14      call _puts
1076   0A29             ; --- END INLINE ASM BLOCK
1077   0A29             
1078   0A29             ;; p = p + 2; 
1079   0A29 FA FF FF      lea d, [bp + -1] ; $p
1080   0A2C DA            push d
1081   0A2D FA FF FF      lea d, [bp + -1] ; $p
1082   0A30 2A            mov b, [d]
1083   0A31             ; START TERMS
1084   0A31 D7            push a
1085   0A32 11            mov a, b
1086   0A33 26 02 00      mov b, $2
1087   0A36 54            add a, b
1088   0A37 27            mov b, a
1089   0A38 E4            pop a
1090   0A39             ; END TERMS
1091   0A39 E7            pop d
1092   0A3A FD 43         mov [d], b
1093   0A3C             ;; break; 
1094   0A3C 0A 4B 0A      jmp _switch10_exit ; case break
1095   0A3F             _switch10_default:
1096   0A3F             ;; print("Error: Unknown argument type.\n"); 
1097   0A3F 26 18 18      mov b, __s10 ; "Error: Unknown argument type.\n"
1098   0A42 FD AB         swp b
1099   0A44 D8            push b
1100   0A45 07 7A 11      call print
1101   0A48 51 02 00      add sp, 2
1102   0A4B             _switch10_exit:
1103   0A4B             ;; fp++; 
1104   0A4B FA FD FF      lea d, [bp + -3] ; $fp
1105   0A4E 2A            mov b, [d]
1106   0A4F D8            push b
1107   0A50 FD 77         inc b
1108   0A52 FA FD FF      lea d, [bp + -3] ; $fp
1109   0A55 FD 43         mov [d], b
1110   0A57 E5            pop b
1111   0A58 0A 77 0A      jmp _if9_exit
1112   0A5B             _if9_else:
1113   0A5B             ;; putchar(*fp); 
1114   0A5B FA FD FF      lea d, [bp + -3] ; $fp
1115   0A5E 2A            mov b, [d]
1116   0A5F 74            mov d, b
1117   0A60 32            mov bl, [d]
1118   0A61 A7 00         mov bh, 0
1119   0A63 DD            push bl
1120   0A64 07 32 11      call putchar
1121   0A67 51 01 00      add sp, 1
1122   0A6A             ;; fp++; 
1123   0A6A FA FD FF      lea d, [bp + -3] ; $fp
1124   0A6D 2A            mov b, [d]
1125   0A6E D8            push b
1126   0A6F FD 77         inc b
1127   0A71 FA FD FF      lea d, [bp + -3] ; $fp
1128   0A74 FD 43         mov [d], b
1129   0A76 E5            pop b
1130   0A77             _if9_exit:
1131   0A77             _if8_exit:
1132   0A77             _for7_update:
1133   0A77 0A 52 08      jmp _for7_cond
1134   0A7A             _for7_exit:
1135   0A7A F9            leave
1136   0A7B 09            ret
1137   0A7C             
1138   0A7C             err:
1139   0A7C F8 00 00      enter 0 ; (push bp; mov bp, sp)
1140   0A7F             ;; print(e); 
1141   0A7F FA 05 00      lea d, [bp + 5] ; $e
1142   0A82 2A            mov b, [d]
1143   0A83 FD AB         swp b
1144   0A85 D8            push b
1145   0A86 07 7A 11      call print
1146   0A89 51 02 00      add sp, 2
1147   0A8C             ;; exit(); 
1148   0A8C 07 F4 11      call exit
1149   0A8F F9            leave
1150   0A90 09            ret
1151   0A91             
1152   0A91             printx32:
1153   0A91 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1154   0A94             
1155   0A94             ; --- BEGIN INLINE ASM BLOCK
1156   0A94 FA 05 00      lea d, [bp + 5] ; $hex
1157   0A97 2B 02 00      mov b, [d+2]
1158   0A9A 07 FB 14      call print_u16x
1159   0A9D 2A            mov b, [d]
1160   0A9E 07 FB 14      call print_u16x
1161   0AA1             ; --- END INLINE ASM BLOCK
1162   0AA1             
1163   0AA1 F9            leave
1164   0AA2 09            ret
1165   0AA3             
1166   0AA3             printx16:
1167   0AA3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1168   0AA6             
1169   0AA6             ; --- BEGIN INLINE ASM BLOCK
1170   0AA6 FA 05 00      lea d, [bp + 5] ; $hex
1171   0AA9 2A            mov b, [d]
1172   0AAA 07 FB 14      call print_u16x
1173   0AAD             ; --- END INLINE ASM BLOCK
1174   0AAD             
1175   0AAD F9            leave
1176   0AAE 09            ret
1177   0AAF             
1178   0AAF             printx8:
1179   0AAF F8 00 00      enter 0 ; (push bp; mov bp, sp)
1180   0AB2             
1181   0AB2             ; --- BEGIN INLINE ASM BLOCK
1182   0AB2 FA 05 00      lea d, [bp + 5] ; $hex
1183   0AB5 32            mov bl, [d]
1184   0AB6 07 3F 15      call print_u8x
1185   0AB9             ; --- END INLINE ASM BLOCK
1186   0AB9             
1187   0AB9 F9            leave
1188   0ABA 09            ret
1189   0ABB             
1190   0ABB             hex_to_int:
1191   0ABB F8 00 00      enter 0 ; (push bp; mov bp, sp)
1192   0ABE             ; $value 
1193   0ABE 10 00 00      mov a, $0
1194   0AC1 45 FF FF      mov [bp + -1], a
1195   0AC4             ; $i 
1196   0AC4             ; $hex_char 
1197   0AC4             ; $len 
1198   0AC4 52 07 00      sub sp, 7
1199   0AC7             ;; len = strlen(hex_string); 
1200   0AC7 FA FA FF      lea d, [bp + -6] ; $len
1201   0ACA DA            push d
1202   0ACB FA 05 00      lea d, [bp + 5] ; $hex_string
1203   0ACE 2A            mov b, [d]
1204   0ACF FD AB         swp b
1205   0AD1 D8            push b
1206   0AD2 07 E5 07      call strlen
1207   0AD5 51 02 00      add sp, 2
1208   0AD8 E7            pop d
1209   0AD9 FD 43         mov [d], b
1210   0ADB             ;; for (i = 0; i < len; i++) { 
1211   0ADB             _for14_init:
1212   0ADB FA FD FF      lea d, [bp + -3] ; $i
1213   0ADE DA            push d
1214   0ADF 26 00 00      mov b, $0
1215   0AE2 E7            pop d
1216   0AE3 FD 43         mov [d], b
1217   0AE5             _for14_cond:
1218   0AE5 FA FD FF      lea d, [bp + -3] ; $i
1219   0AE8 2A            mov b, [d]
1220   0AE9             ; START RELATIONAL
1221   0AE9 D7            push a
1222   0AEA 11            mov a, b
1223   0AEB FA FA FF      lea d, [bp + -6] ; $len
1224   0AEE 2A            mov b, [d]
1225   0AEF B0            cmp a, b
1226   0AF0 FD 73         slt ; < 
1227   0AF2 E4            pop a
1228   0AF3             ; END RELATIONAL
1229   0AF3 C0 00 00      cmp b, 0
1230   0AF6 C6 FB 0B      je _for14_exit
1231   0AF9             _for14_block:
1232   0AF9             ;; hex_char = hex_string[i]; 
1233   0AF9 FA FC FF      lea d, [bp + -4] ; $hex_char
1234   0AFC DA            push d
1235   0AFD FA 05 00      lea d, [bp + 5] ; $hex_string
1236   0B00 FD 2A         mov d, [d]
1237   0B02 D7            push a
1238   0B03 DA            push d
1239   0B04 FA FD FF      lea d, [bp + -3] ; $i
1240   0B07 2A            mov b, [d]
1241   0B08 E7            pop d
1242   0B09 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1243   0B0D E4            pop a
1244   0B0E 32            mov bl, [d]
1245   0B0F A7 00         mov bh, 0
1246   0B11 E7            pop d
1247   0B12 FD 3E         mov [d], bl
1248   0B14             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1249   0B14             _if15_cond:
1250   0B14 FA FC FF      lea d, [bp + -4] ; $hex_char
1251   0B17 32            mov bl, [d]
1252   0B18 A7 00         mov bh, 0
1253   0B1A             ; START RELATIONAL
1254   0B1A D7            push a
1255   0B1B 11            mov a, b
1256   0B1C 26 61 00      mov b, $61
1257   0B1F B0            cmp a, b
1258   0B20 FD 80         sge ; >=
1259   0B22 E4            pop a
1260   0B23             ; END RELATIONAL
1261   0B23 D7            push a
1262   0B24 11            mov a, b
1263   0B25 FA FC FF      lea d, [bp + -4] ; $hex_char
1264   0B28 32            mov bl, [d]
1265   0B29 A7 00         mov bh, 0
1266   0B2B             ; START RELATIONAL
1267   0B2B D7            push a
1268   0B2C 11            mov a, b
1269   0B2D 26 66 00      mov b, $66
1270   0B30 B0            cmp a, b
1271   0B31 FD 74         sle ; <=
1272   0B33 E4            pop a
1273   0B34             ; END RELATIONAL
1274   0B34 FD A7         sand a, b ; &&
1275   0B36 E4            pop a
1276   0B37 C0 00 00      cmp b, 0
1277   0B3A C6 6C 0B      je _if15_else
1278   0B3D             _if15_true:
1279   0B3D             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1280   0B3D FA FF FF      lea d, [bp + -1] ; $value
1281   0B40 DA            push d
1282   0B41 FA FF FF      lea d, [bp + -1] ; $value
1283   0B44 2A            mov b, [d]
1284   0B45             ; START FACTORS
1285   0B45 D7            push a
1286   0B46 11            mov a, b
1287   0B47 26 10 00      mov b, $10
1288   0B4A AC            mul a, b ; *
1289   0B4B 11            mov a, b
1290   0B4C 27            mov b, a
1291   0B4D E4            pop a
1292   0B4E             ; END FACTORS
1293   0B4E             ; START TERMS
1294   0B4E D7            push a
1295   0B4F 11            mov a, b
1296   0B50 FA FC FF      lea d, [bp + -4] ; $hex_char
1297   0B53 32            mov bl, [d]
1298   0B54 A7 00         mov bh, 0
1299   0B56             ; START TERMS
1300   0B56 D7            push a
1301   0B57 11            mov a, b
1302   0B58 26 61 00      mov b, $61
1303   0B5B 60            sub a, b
1304   0B5C 11            mov a, b
1305   0B5D 26 0A 00      mov b, $a
1306   0B60 54            add a, b
1307   0B61 27            mov b, a
1308   0B62 E4            pop a
1309   0B63             ; END TERMS
1310   0B63 54            add a, b
1311   0B64 27            mov b, a
1312   0B65 E4            pop a
1313   0B66             ; END TERMS
1314   0B66 E7            pop d
1315   0B67 FD 43         mov [d], b
1316   0B69 0A EB 0B      jmp _if15_exit
1317   0B6C             _if15_else:
1318   0B6C             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1319   0B6C             _if16_cond:
1320   0B6C FA FC FF      lea d, [bp + -4] ; $hex_char
1321   0B6F 32            mov bl, [d]
1322   0B70 A7 00         mov bh, 0
1323   0B72             ; START RELATIONAL
1324   0B72 D7            push a
1325   0B73 11            mov a, b
1326   0B74 26 41 00      mov b, $41
1327   0B77 B0            cmp a, b
1328   0B78 FD 80         sge ; >=
1329   0B7A E4            pop a
1330   0B7B             ; END RELATIONAL
1331   0B7B D7            push a
1332   0B7C 11            mov a, b
1333   0B7D FA FC FF      lea d, [bp + -4] ; $hex_char
1334   0B80 32            mov bl, [d]
1335   0B81 A7 00         mov bh, 0
1336   0B83             ; START RELATIONAL
1337   0B83 D7            push a
1338   0B84 11            mov a, b
1339   0B85 26 46 00      mov b, $46
1340   0B88 B0            cmp a, b
1341   0B89 FD 74         sle ; <=
1342   0B8B E4            pop a
1343   0B8C             ; END RELATIONAL
1344   0B8C FD A7         sand a, b ; &&
1345   0B8E E4            pop a
1346   0B8F C0 00 00      cmp b, 0
1347   0B92 C6 C4 0B      je _if16_else
1348   0B95             _if16_true:
1349   0B95             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1350   0B95 FA FF FF      lea d, [bp + -1] ; $value
1351   0B98 DA            push d
1352   0B99 FA FF FF      lea d, [bp + -1] ; $value
1353   0B9C 2A            mov b, [d]
1354   0B9D             ; START FACTORS
1355   0B9D D7            push a
1356   0B9E 11            mov a, b
1357   0B9F 26 10 00      mov b, $10
1358   0BA2 AC            mul a, b ; *
1359   0BA3 11            mov a, b
1360   0BA4 27            mov b, a
1361   0BA5 E4            pop a
1362   0BA6             ; END FACTORS
1363   0BA6             ; START TERMS
1364   0BA6 D7            push a
1365   0BA7 11            mov a, b
1366   0BA8 FA FC FF      lea d, [bp + -4] ; $hex_char
1367   0BAB 32            mov bl, [d]
1368   0BAC A7 00         mov bh, 0
1369   0BAE             ; START TERMS
1370   0BAE D7            push a
1371   0BAF 11            mov a, b
1372   0BB0 26 41 00      mov b, $41
1373   0BB3 60            sub a, b
1374   0BB4 11            mov a, b
1375   0BB5 26 0A 00      mov b, $a
1376   0BB8 54            add a, b
1377   0BB9 27            mov b, a
1378   0BBA E4            pop a
1379   0BBB             ; END TERMS
1380   0BBB 54            add a, b
1381   0BBC 27            mov b, a
1382   0BBD E4            pop a
1383   0BBE             ; END TERMS
1384   0BBE E7            pop d
1385   0BBF FD 43         mov [d], b
1386   0BC1 0A EB 0B      jmp _if16_exit
1387   0BC4             _if16_else:
1388   0BC4             ;; value = (value * 16) + (hex_char - '0'); 
1389   0BC4 FA FF FF      lea d, [bp + -1] ; $value
1390   0BC7 DA            push d
1391   0BC8 FA FF FF      lea d, [bp + -1] ; $value
1392   0BCB 2A            mov b, [d]
1393   0BCC             ; START FACTORS
1394   0BCC D7            push a
1395   0BCD 11            mov a, b
1396   0BCE 26 10 00      mov b, $10
1397   0BD1 AC            mul a, b ; *
1398   0BD2 11            mov a, b
1399   0BD3 27            mov b, a
1400   0BD4 E4            pop a
1401   0BD5             ; END FACTORS
1402   0BD5             ; START TERMS
1403   0BD5 D7            push a
1404   0BD6 11            mov a, b
1405   0BD7 FA FC FF      lea d, [bp + -4] ; $hex_char
1406   0BDA 32            mov bl, [d]
1407   0BDB A7 00         mov bh, 0
1408   0BDD             ; START TERMS
1409   0BDD D7            push a
1410   0BDE 11            mov a, b
1411   0BDF 26 30 00      mov b, $30
1412   0BE2 60            sub a, b
1413   0BE3 27            mov b, a
1414   0BE4 E4            pop a
1415   0BE5             ; END TERMS
1416   0BE5 54            add a, b
1417   0BE6 27            mov b, a
1418   0BE7 E4            pop a
1419   0BE8             ; END TERMS
1420   0BE8 E7            pop d
1421   0BE9 FD 43         mov [d], b
1422   0BEB             _if16_exit:
1423   0BEB             _if15_exit:
1424   0BEB             _for14_update:
1425   0BEB FA FD FF      lea d, [bp + -3] ; $i
1426   0BEE 2A            mov b, [d]
1427   0BEF D8            push b
1428   0BF0 FD 77         inc b
1429   0BF2 FA FD FF      lea d, [bp + -3] ; $i
1430   0BF5 FD 43         mov [d], b
1431   0BF7 E5            pop b
1432   0BF8 0A E5 0A      jmp _for14_cond
1433   0BFB             _for14_exit:
1434   0BFB             ;; return value; 
1435   0BFB FA FF FF      lea d, [bp + -1] ; $value
1436   0BFE 2A            mov b, [d]
1437   0BFF F9            leave
1438   0C00 09            ret
1439   0C01             
1440   0C01             atoi:
1441   0C01 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1442   0C04             ; $result 
1443   0C04 10 00 00      mov a, $0
1444   0C07 45 FF FF      mov [bp + -1], a
1445   0C0A             ; $sign 
1446   0C0A 10 01 00      mov a, $1
1447   0C0D 45 FD FF      mov [bp + -3], a
1448   0C10 52 04 00      sub sp, 4
1449   0C13             ;; while (*str == ' ') str++; 
1450   0C13             _while17_cond:
1451   0C13 FA 05 00      lea d, [bp + 5] ; $str
1452   0C16 2A            mov b, [d]
1453   0C17 74            mov d, b
1454   0C18 32            mov bl, [d]
1455   0C19 A7 00         mov bh, 0
1456   0C1B             ; START RELATIONAL
1457   0C1B D7            push a
1458   0C1C 11            mov a, b
1459   0C1D 26 20 00      mov b, $20
1460   0C20 B0            cmp a, b
1461   0C21 FD 71         seq ; ==
1462   0C23 E4            pop a
1463   0C24             ; END RELATIONAL
1464   0C24 C0 00 00      cmp b, 0
1465   0C27 C6 3A 0C      je _while17_exit
1466   0C2A             _while17_block:
1467   0C2A             ;; str++; 
1468   0C2A FA 05 00      lea d, [bp + 5] ; $str
1469   0C2D 2A            mov b, [d]
1470   0C2E D8            push b
1471   0C2F FD 77         inc b
1472   0C31 FA 05 00      lea d, [bp + 5] ; $str
1473   0C34 FD 43         mov [d], b
1474   0C36 E5            pop b
1475   0C37 0A 13 0C      jmp _while17_cond
1476   0C3A             _while17_exit:
1477   0C3A             ;; if (*str == '-' || *str == '+') { 
1478   0C3A             _if18_cond:
1479   0C3A FA 05 00      lea d, [bp + 5] ; $str
1480   0C3D 2A            mov b, [d]
1481   0C3E 74            mov d, b
1482   0C3F 32            mov bl, [d]
1483   0C40 A7 00         mov bh, 0
1484   0C42             ; START RELATIONAL
1485   0C42 D7            push a
1486   0C43 11            mov a, b
1487   0C44 26 2D 00      mov b, $2d
1488   0C47 B0            cmp a, b
1489   0C48 FD 71         seq ; ==
1490   0C4A E4            pop a
1491   0C4B             ; END RELATIONAL
1492   0C4B D7            push a
1493   0C4C 11            mov a, b
1494   0C4D FA 05 00      lea d, [bp + 5] ; $str
1495   0C50 2A            mov b, [d]
1496   0C51 74            mov d, b
1497   0C52 32            mov bl, [d]
1498   0C53 A7 00         mov bh, 0
1499   0C55             ; START RELATIONAL
1500   0C55 D7            push a
1501   0C56 11            mov a, b
1502   0C57 26 2B 00      mov b, $2b
1503   0C5A B0            cmp a, b
1504   0C5B FD 71         seq ; ==
1505   0C5D E4            pop a
1506   0C5E             ; END RELATIONAL
1507   0C5E FD A8         sor a, b ; ||
1508   0C60 E4            pop a
1509   0C61 C0 00 00      cmp b, 0
1510   0C64 C6 9D 0C      je _if18_exit
1511   0C67             _if18_true:
1512   0C67             ;; if (*str == '-') sign = -1; 
1513   0C67             _if19_cond:
1514   0C67 FA 05 00      lea d, [bp + 5] ; $str
1515   0C6A 2A            mov b, [d]
1516   0C6B 74            mov d, b
1517   0C6C 32            mov bl, [d]
1518   0C6D A7 00         mov bh, 0
1519   0C6F             ; START RELATIONAL
1520   0C6F D7            push a
1521   0C70 11            mov a, b
1522   0C71 26 2D 00      mov b, $2d
1523   0C74 B0            cmp a, b
1524   0C75 FD 71         seq ; ==
1525   0C77 E4            pop a
1526   0C78             ; END RELATIONAL
1527   0C78 C0 00 00      cmp b, 0
1528   0C7B C6 8D 0C      je _if19_exit
1529   0C7E             _if19_true:
1530   0C7E             ;; sign = -1; 
1531   0C7E FA FD FF      lea d, [bp + -3] ; $sign
1532   0C81 DA            push d
1533   0C82 26 01 00      mov b, $1
1534   0C85 FD 97         neg b
1535   0C87 E7            pop d
1536   0C88 FD 43         mov [d], b
1537   0C8A 0A 8D 0C      jmp _if19_exit
1538   0C8D             _if19_exit:
1539   0C8D             ;; str++; 
1540   0C8D FA 05 00      lea d, [bp + 5] ; $str
1541   0C90 2A            mov b, [d]
1542   0C91 D8            push b
1543   0C92 FD 77         inc b
1544   0C94 FA 05 00      lea d, [bp + 5] ; $str
1545   0C97 FD 43         mov [d], b
1546   0C99 E5            pop b
1547   0C9A 0A 9D 0C      jmp _if18_exit
1548   0C9D             _if18_exit:
1549   0C9D             ;; while (*str >= '0' && *str <= '9') { 
1550   0C9D             _while20_cond:
1551   0C9D FA 05 00      lea d, [bp + 5] ; $str
1552   0CA0 2A            mov b, [d]
1553   0CA1 74            mov d, b
1554   0CA2 32            mov bl, [d]
1555   0CA3 A7 00         mov bh, 0
1556   0CA5             ; START RELATIONAL
1557   0CA5 D7            push a
1558   0CA6 11            mov a, b
1559   0CA7 26 30 00      mov b, $30
1560   0CAA B0            cmp a, b
1561   0CAB FD 82         sgeu ; >= (unsigned)
1562   0CAD E4            pop a
1563   0CAE             ; END RELATIONAL
1564   0CAE D7            push a
1565   0CAF 11            mov a, b
1566   0CB0 FA 05 00      lea d, [bp + 5] ; $str
1567   0CB3 2A            mov b, [d]
1568   0CB4 74            mov d, b
1569   0CB5 32            mov bl, [d]
1570   0CB6 A7 00         mov bh, 0
1571   0CB8             ; START RELATIONAL
1572   0CB8 D7            push a
1573   0CB9 11            mov a, b
1574   0CBA 26 39 00      mov b, $39
1575   0CBD B0            cmp a, b
1576   0CBE FD 76         sleu ; <= (unsigned)
1577   0CC0 E4            pop a
1578   0CC1             ; END RELATIONAL
1579   0CC1 FD A7         sand a, b ; &&
1580   0CC3 E4            pop a
1581   0CC4 C0 00 00      cmp b, 0
1582   0CC7 C6 03 0D      je _while20_exit
1583   0CCA             _while20_block:
1584   0CCA             ;; result = result * 10 + (*str - '0'); 
1585   0CCA FA FF FF      lea d, [bp + -1] ; $result
1586   0CCD DA            push d
1587   0CCE FA FF FF      lea d, [bp + -1] ; $result
1588   0CD1 2A            mov b, [d]
1589   0CD2             ; START FACTORS
1590   0CD2 D7            push a
1591   0CD3 11            mov a, b
1592   0CD4 26 0A 00      mov b, $a
1593   0CD7 AC            mul a, b ; *
1594   0CD8 11            mov a, b
1595   0CD9 27            mov b, a
1596   0CDA E4            pop a
1597   0CDB             ; END FACTORS
1598   0CDB             ; START TERMS
1599   0CDB D7            push a
1600   0CDC 11            mov a, b
1601   0CDD FA 05 00      lea d, [bp + 5] ; $str
1602   0CE0 2A            mov b, [d]
1603   0CE1 74            mov d, b
1604   0CE2 32            mov bl, [d]
1605   0CE3 A7 00         mov bh, 0
1606   0CE5             ; START TERMS
1607   0CE5 D7            push a
1608   0CE6 11            mov a, b
1609   0CE7 26 30 00      mov b, $30
1610   0CEA 60            sub a, b
1611   0CEB 27            mov b, a
1612   0CEC E4            pop a
1613   0CED             ; END TERMS
1614   0CED 54            add a, b
1615   0CEE 27            mov b, a
1616   0CEF E4            pop a
1617   0CF0             ; END TERMS
1618   0CF0 E7            pop d
1619   0CF1 FD 43         mov [d], b
1620   0CF3             ;; str++; 
1621   0CF3 FA 05 00      lea d, [bp + 5] ; $str
1622   0CF6 2A            mov b, [d]
1623   0CF7 D8            push b
1624   0CF8 FD 77         inc b
1625   0CFA FA 05 00      lea d, [bp + 5] ; $str
1626   0CFD FD 43         mov [d], b
1627   0CFF E5            pop b
1628   0D00 0A 9D 0C      jmp _while20_cond
1629   0D03             _while20_exit:
1630   0D03             ;; return sign * result; 
1631   0D03 FA FD FF      lea d, [bp + -3] ; $sign
1632   0D06 2A            mov b, [d]
1633   0D07             ; START FACTORS
1634   0D07 D7            push a
1635   0D08 11            mov a, b
1636   0D09 FA FF FF      lea d, [bp + -1] ; $result
1637   0D0C 2A            mov b, [d]
1638   0D0D AC            mul a, b ; *
1639   0D0E 11            mov a, b
1640   0D0F 27            mov b, a
1641   0D10 E4            pop a
1642   0D11             ; END FACTORS
1643   0D11 F9            leave
1644   0D12 09            ret
1645   0D13             
1646   0D13             gets:
1647   0D13 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1648   0D16             
1649   0D16             ; --- BEGIN INLINE ASM BLOCK
1650   0D16 FA 05 00      lea d, [bp + 5] ; $s
1651   0D19 15            mov a, [d]
1652   0D1A 3C            mov d, a
1653   0D1B 07 60 13      call _gets
1654   0D1E             ; --- END INLINE ASM BLOCK
1655   0D1E             
1656   0D1E             ;; return strlen(s); 
1657   0D1E FA 05 00      lea d, [bp + 5] ; $s
1658   0D21 2A            mov b, [d]
1659   0D22 FD AB         swp b
1660   0D24 D8            push b
1661   0D25 07 E5 07      call strlen
1662   0D28 51 02 00      add sp, 2
1663   0D2B F9            leave
1664   0D2C 09            ret
1665   0D2D             
1666   0D2D             print_signed:
1667   0D2D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1668   0D30             ; $digits 
1669   0D30             ; $i 
1670   0D30 10 00 00      mov a, $0
1671   0D33 45 FA FF      mov [bp + -6], a
1672   0D36 52 07 00      sub sp, 7
1673   0D39             ;; if (num < 0) { 
1674   0D39             _if21_cond:
1675   0D39 FA 05 00      lea d, [bp + 5] ; $num
1676   0D3C 2A            mov b, [d]
1677   0D3D             ; START RELATIONAL
1678   0D3D D7            push a
1679   0D3E 11            mov a, b
1680   0D3F 26 00 00      mov b, $0
1681   0D42 B0            cmp a, b
1682   0D43 FD 73         slt ; < 
1683   0D45 E4            pop a
1684   0D46             ; END RELATIONAL
1685   0D46 C0 00 00      cmp b, 0
1686   0D49 C6 66 0D      je _if21_else
1687   0D4C             _if21_true:
1688   0D4C             ;; putchar('-'); 
1689   0D4C 26 2D 00      mov b, $2d
1690   0D4F DD            push bl
1691   0D50 07 32 11      call putchar
1692   0D53 51 01 00      add sp, 1
1693   0D56             ;; num = -num; 
1694   0D56 FA 05 00      lea d, [bp + 5] ; $num
1695   0D59 DA            push d
1696   0D5A FA 05 00      lea d, [bp + 5] ; $num
1697   0D5D 2A            mov b, [d]
1698   0D5E FD 97         neg b
1699   0D60 E7            pop d
1700   0D61 FD 43         mov [d], b
1701   0D63 0A 88 0D      jmp _if21_exit
1702   0D66             _if21_else:
1703   0D66             ;; if (num == 0) { 
1704   0D66             _if22_cond:
1705   0D66 FA 05 00      lea d, [bp + 5] ; $num
1706   0D69 2A            mov b, [d]
1707   0D6A             ; START RELATIONAL
1708   0D6A D7            push a
1709   0D6B 11            mov a, b
1710   0D6C 26 00 00      mov b, $0
1711   0D6F B0            cmp a, b
1712   0D70 FD 71         seq ; ==
1713   0D72 E4            pop a
1714   0D73             ; END RELATIONAL
1715   0D73 C0 00 00      cmp b, 0
1716   0D76 C6 88 0D      je _if22_exit
1717   0D79             _if22_true:
1718   0D79             ;; putchar('0'); 
1719   0D79 26 30 00      mov b, $30
1720   0D7C DD            push bl
1721   0D7D 07 32 11      call putchar
1722   0D80 51 01 00      add sp, 1
1723   0D83             ;; return; 
1724   0D83 F9            leave
1725   0D84 09            ret
1726   0D85 0A 88 0D      jmp _if22_exit
1727   0D88             _if22_exit:
1728   0D88             _if21_exit:
1729   0D88             ;; while (num > 0) { 
1730   0D88             _while23_cond:
1731   0D88 FA 05 00      lea d, [bp + 5] ; $num
1732   0D8B 2A            mov b, [d]
1733   0D8C             ; START RELATIONAL
1734   0D8C D7            push a
1735   0D8D 11            mov a, b
1736   0D8E 26 00 00      mov b, $0
1737   0D91 B0            cmp a, b
1738   0D92 FD 7F         sgt ; >
1739   0D94 E4            pop a
1740   0D95             ; END RELATIONAL
1741   0D95 C0 00 00      cmp b, 0
1742   0D98 C6 E3 0D      je _while23_exit
1743   0D9B             _while23_block:
1744   0D9B             ;; digits[i] = '0' + (num % 10); 
1745   0D9B FA FC FF      lea d, [bp + -4] ; $digits
1746   0D9E D7            push a
1747   0D9F DA            push d
1748   0DA0 FA FA FF      lea d, [bp + -6] ; $i
1749   0DA3 2A            mov b, [d]
1750   0DA4 E7            pop d
1751   0DA5 5A            add d, b
1752   0DA6 E4            pop a
1753   0DA7 DA            push d
1754   0DA8 26 30 00      mov b, $30
1755   0DAB             ; START TERMS
1756   0DAB D7            push a
1757   0DAC 11            mov a, b
1758   0DAD FA 05 00      lea d, [bp + 5] ; $num
1759   0DB0 2A            mov b, [d]
1760   0DB1             ; START FACTORS
1761   0DB1 D7            push a
1762   0DB2 11            mov a, b
1763   0DB3 26 0A 00      mov b, $a
1764   0DB6 AE            div a, b ; 
1765   0DB7 11            mov a, b
1766   0DB8 27            mov b, a
1767   0DB9 E4            pop a
1768   0DBA             ; END FACTORS
1769   0DBA 54            add a, b
1770   0DBB 27            mov b, a
1771   0DBC E4            pop a
1772   0DBD             ; END TERMS
1773   0DBD E7            pop d
1774   0DBE FD 3E         mov [d], bl
1775   0DC0             ;; num = num / 10; 
1776   0DC0 FA 05 00      lea d, [bp + 5] ; $num
1777   0DC3 DA            push d
1778   0DC4 FA 05 00      lea d, [bp + 5] ; $num
1779   0DC7 2A            mov b, [d]
1780   0DC8             ; START FACTORS
1781   0DC8 D7            push a
1782   0DC9 11            mov a, b
1783   0DCA 26 0A 00      mov b, $a
1784   0DCD AE            div a, b
1785   0DCE 27            mov b, a
1786   0DCF E4            pop a
1787   0DD0             ; END FACTORS
1788   0DD0 E7            pop d
1789   0DD1 FD 43         mov [d], b
1790   0DD3             ;; i++; 
1791   0DD3 FA FA FF      lea d, [bp + -6] ; $i
1792   0DD6 2A            mov b, [d]
1793   0DD7 D8            push b
1794   0DD8 FD 77         inc b
1795   0DDA FA FA FF      lea d, [bp + -6] ; $i
1796   0DDD FD 43         mov [d], b
1797   0DDF E5            pop b
1798   0DE0 0A 88 0D      jmp _while23_cond
1799   0DE3             _while23_exit:
1800   0DE3             ;; while (i > 0) { 
1801   0DE3             _while24_cond:
1802   0DE3 FA FA FF      lea d, [bp + -6] ; $i
1803   0DE6 2A            mov b, [d]
1804   0DE7             ; START RELATIONAL
1805   0DE7 D7            push a
1806   0DE8 11            mov a, b
1807   0DE9 26 00 00      mov b, $0
1808   0DEC B0            cmp a, b
1809   0DED FD 7F         sgt ; >
1810   0DEF E4            pop a
1811   0DF0             ; END RELATIONAL
1812   0DF0 C0 00 00      cmp b, 0
1813   0DF3 C6 1C 0E      je _while24_exit
1814   0DF6             _while24_block:
1815   0DF6             ;; i--; 
1816   0DF6 FA FA FF      lea d, [bp + -6] ; $i
1817   0DF9 2A            mov b, [d]
1818   0DFA D8            push b
1819   0DFB FD 7D         dec b
1820   0DFD FA FA FF      lea d, [bp + -6] ; $i
1821   0E00 FD 43         mov [d], b
1822   0E02 E5            pop b
1823   0E03             ;; putchar(digits[i]); 
1824   0E03 FA FC FF      lea d, [bp + -4] ; $digits
1825   0E06 D7            push a
1826   0E07 DA            push d
1827   0E08 FA FA FF      lea d, [bp + -6] ; $i
1828   0E0B 2A            mov b, [d]
1829   0E0C E7            pop d
1830   0E0D 5A            add d, b
1831   0E0E E4            pop a
1832   0E0F 32            mov bl, [d]
1833   0E10 A7 00         mov bh, 0
1834   0E12 DD            push bl
1835   0E13 07 32 11      call putchar
1836   0E16 51 01 00      add sp, 1
1837   0E19 0A E3 0D      jmp _while24_cond
1838   0E1C             _while24_exit:
1839   0E1C F9            leave
1840   0E1D 09            ret
1841   0E1E             
1842   0E1E             print_signed_long:
1843   0E1E F8 00 00      enter 0 ; (push bp; mov bp, sp)
1844   0E21             ; $digits 
1845   0E21             ; $i 
1846   0E21 10 00 00      mov a, $0
1847   0E24 45 F5 FF      mov [bp + -11], a
1848   0E27 52 0C 00      sub sp, 12
1849   0E2A             ;; if (num < 0) { 
1850   0E2A             _if25_cond:
1851   0E2A FA 05 00      lea d, [bp + 5] ; $num
1852   0E2D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1853   0E30 FD 39         mov c, b ; And place it into C
1854   0E32 2A            mov b, [d] ; Lower Word in B
1855   0E33             ; START RELATIONAL
1856   0E33 D7            push a
1857   0E34 FD D8         push g
1858   0E36 11            mov a, b
1859   0E37 FD 7A         mov g, c
1860   0E39 26 00 00      mov b, $0
1861   0E3C B0            cmp a, b
1862   0E3D FD 73         slt ; < 
1863   0E3F FD F1         pop g
1864   0E41 E4            pop a
1865   0E42             ; END RELATIONAL
1866   0E42 C0 00 00      cmp b, 0
1867   0E45 C6 6C 0E      je _if25_else
1868   0E48             _if25_true:
1869   0E48             ;; putchar('-'); 
1870   0E48 26 2D 00      mov b, $2d
1871   0E4B DD            push bl
1872   0E4C 07 32 11      call putchar
1873   0E4F 51 01 00      add sp, 1
1874   0E52             ;; num = -num; 
1875   0E52 FA 05 00      lea d, [bp + 5] ; $num
1876   0E55 DA            push d
1877   0E56 FA 05 00      lea d, [bp + 5] ; $num
1878   0E59 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1879   0E5C FD 39         mov c, b ; And place it into C
1880   0E5E 2A            mov b, [d] ; Lower Word in B
1881   0E5F FD 97         neg b
1882   0E61 E7            pop d
1883   0E62 FD 43         mov [d], b
1884   0E64 28            mov b, c
1885   0E65 FD 44 02 00   mov [d + 2], b
1886   0E69 0A A3 0E      jmp _if25_exit
1887   0E6C             _if25_else:
1888   0E6C             ;; if (num == 0) { 
1889   0E6C             _if26_cond:
1890   0E6C FA 05 00      lea d, [bp + 5] ; $num
1891   0E6F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1892   0E72 FD 39         mov c, b ; And place it into C
1893   0E74 2A            mov b, [d] ; Lower Word in B
1894   0E75             ; START RELATIONAL
1895   0E75 D7            push a
1896   0E76 FD D8         push g
1897   0E78 11            mov a, b
1898   0E79 FD 7A         mov g, c
1899   0E7B 26 00 00      mov b, $0
1900   0E7E B0            cmp a, b
1901   0E7F FD 71         seq ; ==
1902   0E81 D8            push b
1903   0E82 12            mov a, c
1904   0E83 FD 27         mov b, g
1905   0E85 B0            cmp a, b
1906   0E86 FD 71         seq ; ==
1907   0E88 E4            pop a
1908   0E89 FD A7         sand a, b
1909   0E8B FD F1         pop g
1910   0E8D E4            pop a
1911   0E8E             ; END RELATIONAL
1912   0E8E C0 00 00      cmp b, 0
1913   0E91 C6 A3 0E      je _if26_exit
1914   0E94             _if26_true:
1915   0E94             ;; putchar('0'); 
1916   0E94 26 30 00      mov b, $30
1917   0E97 DD            push bl
1918   0E98 07 32 11      call putchar
1919   0E9B 51 01 00      add sp, 1
1920   0E9E             ;; return; 
1921   0E9E F9            leave
1922   0E9F 09            ret
1923   0EA0 0A A3 0E      jmp _if26_exit
1924   0EA3             _if26_exit:
1925   0EA3             _if25_exit:
1926   0EA3             ;; while (num > 0) { 
1927   0EA3             _while27_cond:
1928   0EA3 FA 05 00      lea d, [bp + 5] ; $num
1929   0EA6 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1930   0EA9 FD 39         mov c, b ; And place it into C
1931   0EAB 2A            mov b, [d] ; Lower Word in B
1932   0EAC             ; START RELATIONAL
1933   0EAC D7            push a
1934   0EAD FD D8         push g
1935   0EAF 11            mov a, b
1936   0EB0 FD 7A         mov g, c
1937   0EB2 26 00 00      mov b, $0
1938   0EB5 B0            cmp a, b
1939   0EB6 FD 7F         sgt ; >
1940   0EB8 FD F1         pop g
1941   0EBA E4            pop a
1942   0EBB             ; END RELATIONAL
1943   0EBB C0 00 00      cmp b, 0
1944   0EBE C6 18 0F      je _while27_exit
1945   0EC1             _while27_block:
1946   0EC1             ;; digits[i] = '0' + (num % 10); 
1947   0EC1 FA F7 FF      lea d, [bp + -9] ; $digits
1948   0EC4 D7            push a
1949   0EC5 DA            push d
1950   0EC6 FA F5 FF      lea d, [bp + -11] ; $i
1951   0EC9 2A            mov b, [d]
1952   0ECA E7            pop d
1953   0ECB 5A            add d, b
1954   0ECC E4            pop a
1955   0ECD DA            push d
1956   0ECE 26 30 00      mov b, $30
1957   0ED1             ; START TERMS
1958   0ED1 D7            push a
1959   0ED2 11            mov a, b
1960   0ED3 FA 05 00      lea d, [bp + 5] ; $num
1961   0ED6 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1962   0ED9 FD 39         mov c, b ; And place it into C
1963   0EDB 2A            mov b, [d] ; Lower Word in B
1964   0EDC             ; START FACTORS
1965   0EDC D7            push a
1966   0EDD 11            mov a, b
1967   0EDE 26 0A 00      mov b, $a
1968   0EE1 AE            div a, b ; 
1969   0EE2 11            mov a, b
1970   0EE3 27            mov b, a
1971   0EE4 E4            pop a
1972   0EE5             ; END FACTORS
1973   0EE5 54            add a, b
1974   0EE6 27            mov b, a
1975   0EE7 E4            pop a
1976   0EE8             ; END TERMS
1977   0EE8 E7            pop d
1978   0EE9 FD 3E         mov [d], bl
1979   0EEB             ;; num = num / 10; 
1980   0EEB FA 05 00      lea d, [bp + 5] ; $num
1981   0EEE DA            push d
1982   0EEF FA 05 00      lea d, [bp + 5] ; $num
1983   0EF2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1984   0EF5 FD 39         mov c, b ; And place it into C
1985   0EF7 2A            mov b, [d] ; Lower Word in B
1986   0EF8             ; START FACTORS
1987   0EF8 D7            push a
1988   0EF9 11            mov a, b
1989   0EFA 26 0A 00      mov b, $a
1990   0EFD AE            div a, b
1991   0EFE 27            mov b, a
1992   0EFF E4            pop a
1993   0F00             ; END FACTORS
1994   0F00 E7            pop d
1995   0F01 FD 43         mov [d], b
1996   0F03 28            mov b, c
1997   0F04 FD 44 02 00   mov [d + 2], b
1998   0F08             ;; i++; 
1999   0F08 FA F5 FF      lea d, [bp + -11] ; $i
2000   0F0B 2A            mov b, [d]
2001   0F0C D8            push b
2002   0F0D FD 77         inc b
2003   0F0F FA F5 FF      lea d, [bp + -11] ; $i
2004   0F12 FD 43         mov [d], b
2005   0F14 E5            pop b
2006   0F15 0A A3 0E      jmp _while27_cond
2007   0F18             _while27_exit:
2008   0F18             ;; while (i > 0) { 
2009   0F18             _while28_cond:
2010   0F18 FA F5 FF      lea d, [bp + -11] ; $i
2011   0F1B 2A            mov b, [d]
2012   0F1C             ; START RELATIONAL
2013   0F1C D7            push a
2014   0F1D 11            mov a, b
2015   0F1E 26 00 00      mov b, $0
2016   0F21 B0            cmp a, b
2017   0F22 FD 7F         sgt ; >
2018   0F24 E4            pop a
2019   0F25             ; END RELATIONAL
2020   0F25 C0 00 00      cmp b, 0
2021   0F28 C6 51 0F      je _while28_exit
2022   0F2B             _while28_block:
2023   0F2B             ;; i--; 
2024   0F2B FA F5 FF      lea d, [bp + -11] ; $i
2025   0F2E 2A            mov b, [d]
2026   0F2F D8            push b
2027   0F30 FD 7D         dec b
2028   0F32 FA F5 FF      lea d, [bp + -11] ; $i
2029   0F35 FD 43         mov [d], b
2030   0F37 E5            pop b
2031   0F38             ;; putchar(digits[i]); 
2032   0F38 FA F7 FF      lea d, [bp + -9] ; $digits
2033   0F3B D7            push a
2034   0F3C DA            push d
2035   0F3D FA F5 FF      lea d, [bp + -11] ; $i
2036   0F40 2A            mov b, [d]
2037   0F41 E7            pop d
2038   0F42 5A            add d, b
2039   0F43 E4            pop a
2040   0F44 32            mov bl, [d]
2041   0F45 A7 00         mov bh, 0
2042   0F47 DD            push bl
2043   0F48 07 32 11      call putchar
2044   0F4B 51 01 00      add sp, 1
2045   0F4E 0A 18 0F      jmp _while28_cond
2046   0F51             _while28_exit:
2047   0F51 F9            leave
2048   0F52 09            ret
2049   0F53             
2050   0F53             print_unsigned_long:
2051   0F53 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2052   0F56             ; $digits 
2053   0F56             ; $i 
2054   0F56 52 0C 00      sub sp, 12
2055   0F59             ;; i = 0; 
2056   0F59 FA F5 FF      lea d, [bp + -11] ; $i
2057   0F5C DA            push d
2058   0F5D 26 00 00      mov b, $0
2059   0F60 E7            pop d
2060   0F61 FD 43         mov [d], b
2061   0F63             ;; if(num == 0){ 
2062   0F63             _if29_cond:
2063   0F63 FA 05 00      lea d, [bp + 5] ; $num
2064   0F66 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2065   0F69 FD 39         mov c, b ; And place it into C
2066   0F6B 2A            mov b, [d] ; Lower Word in B
2067   0F6C             ; START RELATIONAL
2068   0F6C D7            push a
2069   0F6D FD D8         push g
2070   0F6F 11            mov a, b
2071   0F70 FD 7A         mov g, c
2072   0F72 26 00 00      mov b, $0
2073   0F75 B0            cmp a, b
2074   0F76 FD 71         seq ; ==
2075   0F78 D8            push b
2076   0F79 12            mov a, c
2077   0F7A FD 27         mov b, g
2078   0F7C B0            cmp a, b
2079   0F7D FD 71         seq ; ==
2080   0F7F E4            pop a
2081   0F80 FD A7         sand a, b
2082   0F82 FD F1         pop g
2083   0F84 E4            pop a
2084   0F85             ; END RELATIONAL
2085   0F85 C0 00 00      cmp b, 0
2086   0F88 C6 9A 0F      je _if29_exit
2087   0F8B             _if29_true:
2088   0F8B             ;; putchar('0'); 
2089   0F8B 26 30 00      mov b, $30
2090   0F8E DD            push bl
2091   0F8F 07 32 11      call putchar
2092   0F92 51 01 00      add sp, 1
2093   0F95             ;; return; 
2094   0F95 F9            leave
2095   0F96 09            ret
2096   0F97 0A 9A 0F      jmp _if29_exit
2097   0F9A             _if29_exit:
2098   0F9A             ;; while (num > 0) { 
2099   0F9A             _while30_cond:
2100   0F9A FA 05 00      lea d, [bp + 5] ; $num
2101   0F9D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2102   0FA0 FD 39         mov c, b ; And place it into C
2103   0FA2 2A            mov b, [d] ; Lower Word in B
2104   0FA3             ; START RELATIONAL
2105   0FA3 D7            push a
2106   0FA4 FD D8         push g
2107   0FA6 11            mov a, b
2108   0FA7 FD 7A         mov g, c
2109   0FA9 26 00 00      mov b, $0
2110   0FAC B0            cmp a, b
2111   0FAD FD 81         sgu ; > (unsigned)
2112   0FAF FD F1         pop g
2113   0FB1 E4            pop a
2114   0FB2             ; END RELATIONAL
2115   0FB2 C0 00 00      cmp b, 0
2116   0FB5 C6 0F 10      je _while30_exit
2117   0FB8             _while30_block:
2118   0FB8             ;; digits[i] = '0' + (num % 10); 
2119   0FB8 FA F7 FF      lea d, [bp + -9] ; $digits
2120   0FBB D7            push a
2121   0FBC DA            push d
2122   0FBD FA F5 FF      lea d, [bp + -11] ; $i
2123   0FC0 2A            mov b, [d]
2124   0FC1 E7            pop d
2125   0FC2 5A            add d, b
2126   0FC3 E4            pop a
2127   0FC4 DA            push d
2128   0FC5 26 30 00      mov b, $30
2129   0FC8             ; START TERMS
2130   0FC8 D7            push a
2131   0FC9 11            mov a, b
2132   0FCA FA 05 00      lea d, [bp + 5] ; $num
2133   0FCD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2134   0FD0 FD 39         mov c, b ; And place it into C
2135   0FD2 2A            mov b, [d] ; Lower Word in B
2136   0FD3             ; START FACTORS
2137   0FD3 D7            push a
2138   0FD4 11            mov a, b
2139   0FD5 26 0A 00      mov b, $a
2140   0FD8 AE            div a, b ; 
2141   0FD9 11            mov a, b
2142   0FDA 27            mov b, a
2143   0FDB E4            pop a
2144   0FDC             ; END FACTORS
2145   0FDC 54            add a, b
2146   0FDD 27            mov b, a
2147   0FDE E4            pop a
2148   0FDF             ; END TERMS
2149   0FDF E7            pop d
2150   0FE0 FD 3E         mov [d], bl
2151   0FE2             ;; num = num / 10; 
2152   0FE2 FA 05 00      lea d, [bp + 5] ; $num
2153   0FE5 DA            push d
2154   0FE6 FA 05 00      lea d, [bp + 5] ; $num
2155   0FE9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2156   0FEC FD 39         mov c, b ; And place it into C
2157   0FEE 2A            mov b, [d] ; Lower Word in B
2158   0FEF             ; START FACTORS
2159   0FEF D7            push a
2160   0FF0 11            mov a, b
2161   0FF1 26 0A 00      mov b, $a
2162   0FF4 AE            div a, b
2163   0FF5 27            mov b, a
2164   0FF6 E4            pop a
2165   0FF7             ; END FACTORS
2166   0FF7 E7            pop d
2167   0FF8 FD 43         mov [d], b
2168   0FFA 28            mov b, c
2169   0FFB FD 44 02 00   mov [d + 2], b
2170   0FFF             ;; i++; 
2171   0FFF FA F5 FF      lea d, [bp + -11] ; $i
2172   1002 2A            mov b, [d]
2173   1003 D8            push b
2174   1004 FD 77         inc b
2175   1006 FA F5 FF      lea d, [bp + -11] ; $i
2176   1009 FD 43         mov [d], b
2177   100B E5            pop b
2178   100C 0A 9A 0F      jmp _while30_cond
2179   100F             _while30_exit:
2180   100F             ;; while (i > 0) { 
2181   100F             _while31_cond:
2182   100F FA F5 FF      lea d, [bp + -11] ; $i
2183   1012 2A            mov b, [d]
2184   1013             ; START RELATIONAL
2185   1013 D7            push a
2186   1014 11            mov a, b
2187   1015 26 00 00      mov b, $0
2188   1018 B0            cmp a, b
2189   1019 FD 7F         sgt ; >
2190   101B E4            pop a
2191   101C             ; END RELATIONAL
2192   101C C0 00 00      cmp b, 0
2193   101F C6 48 10      je _while31_exit
2194   1022             _while31_block:
2195   1022             ;; i--; 
2196   1022 FA F5 FF      lea d, [bp + -11] ; $i
2197   1025 2A            mov b, [d]
2198   1026 D8            push b
2199   1027 FD 7D         dec b
2200   1029 FA F5 FF      lea d, [bp + -11] ; $i
2201   102C FD 43         mov [d], b
2202   102E E5            pop b
2203   102F             ;; putchar(digits[i]); 
2204   102F FA F7 FF      lea d, [bp + -9] ; $digits
2205   1032 D7            push a
2206   1033 DA            push d
2207   1034 FA F5 FF      lea d, [bp + -11] ; $i
2208   1037 2A            mov b, [d]
2209   1038 E7            pop d
2210   1039 5A            add d, b
2211   103A E4            pop a
2212   103B 32            mov bl, [d]
2213   103C A7 00         mov bh, 0
2214   103E DD            push bl
2215   103F 07 32 11      call putchar
2216   1042 51 01 00      add sp, 1
2217   1045 0A 0F 10      jmp _while31_cond
2218   1048             _while31_exit:
2219   1048 F9            leave
2220   1049 09            ret
2221   104A             
2222   104A             print_unsigned:
2223   104A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2224   104D             ; $digits 
2225   104D             ; $i 
2226   104D 52 07 00      sub sp, 7
2227   1050             ;; i = 0; 
2228   1050 FA FA FF      lea d, [bp + -6] ; $i
2229   1053 DA            push d
2230   1054 26 00 00      mov b, $0
2231   1057 E7            pop d
2232   1058 FD 43         mov [d], b
2233   105A             ;; if(num == 0){ 
2234   105A             _if32_cond:
2235   105A FA 05 00      lea d, [bp + 5] ; $num
2236   105D 2A            mov b, [d]
2237   105E             ; START RELATIONAL
2238   105E D7            push a
2239   105F 11            mov a, b
2240   1060 26 00 00      mov b, $0
2241   1063 B0            cmp a, b
2242   1064 FD 71         seq ; ==
2243   1066 E4            pop a
2244   1067             ; END RELATIONAL
2245   1067 C0 00 00      cmp b, 0
2246   106A C6 7C 10      je _if32_exit
2247   106D             _if32_true:
2248   106D             ;; putchar('0'); 
2249   106D 26 30 00      mov b, $30
2250   1070 DD            push bl
2251   1071 07 32 11      call putchar
2252   1074 51 01 00      add sp, 1
2253   1077             ;; return; 
2254   1077 F9            leave
2255   1078 09            ret
2256   1079 0A 7C 10      jmp _if32_exit
2257   107C             _if32_exit:
2258   107C             ;; while (num > 0) { 
2259   107C             _while33_cond:
2260   107C FA 05 00      lea d, [bp + 5] ; $num
2261   107F 2A            mov b, [d]
2262   1080             ; START RELATIONAL
2263   1080 D7            push a
2264   1081 11            mov a, b
2265   1082 26 00 00      mov b, $0
2266   1085 B0            cmp a, b
2267   1086 FD 81         sgu ; > (unsigned)
2268   1088 E4            pop a
2269   1089             ; END RELATIONAL
2270   1089 C0 00 00      cmp b, 0
2271   108C C6 D7 10      je _while33_exit
2272   108F             _while33_block:
2273   108F             ;; digits[i] = '0' + (num % 10); 
2274   108F FA FC FF      lea d, [bp + -4] ; $digits
2275   1092 D7            push a
2276   1093 DA            push d
2277   1094 FA FA FF      lea d, [bp + -6] ; $i
2278   1097 2A            mov b, [d]
2279   1098 E7            pop d
2280   1099 5A            add d, b
2281   109A E4            pop a
2282   109B DA            push d
2283   109C 26 30 00      mov b, $30
2284   109F             ; START TERMS
2285   109F D7            push a
2286   10A0 11            mov a, b
2287   10A1 FA 05 00      lea d, [bp + 5] ; $num
2288   10A4 2A            mov b, [d]
2289   10A5             ; START FACTORS
2290   10A5 D7            push a
2291   10A6 11            mov a, b
2292   10A7 26 0A 00      mov b, $a
2293   10AA AE            div a, b ; 
2294   10AB 11            mov a, b
2295   10AC 27            mov b, a
2296   10AD E4            pop a
2297   10AE             ; END FACTORS
2298   10AE 54            add a, b
2299   10AF 27            mov b, a
2300   10B0 E4            pop a
2301   10B1             ; END TERMS
2302   10B1 E7            pop d
2303   10B2 FD 3E         mov [d], bl
2304   10B4             ;; num = num / 10; 
2305   10B4 FA 05 00      lea d, [bp + 5] ; $num
2306   10B7 DA            push d
2307   10B8 FA 05 00      lea d, [bp + 5] ; $num
2308   10BB 2A            mov b, [d]
2309   10BC             ; START FACTORS
2310   10BC D7            push a
2311   10BD 11            mov a, b
2312   10BE 26 0A 00      mov b, $a
2313   10C1 AE            div a, b
2314   10C2 27            mov b, a
2315   10C3 E4            pop a
2316   10C4             ; END FACTORS
2317   10C4 E7            pop d
2318   10C5 FD 43         mov [d], b
2319   10C7             ;; i++; 
2320   10C7 FA FA FF      lea d, [bp + -6] ; $i
2321   10CA 2A            mov b, [d]
2322   10CB D8            push b
2323   10CC FD 77         inc b
2324   10CE FA FA FF      lea d, [bp + -6] ; $i
2325   10D1 FD 43         mov [d], b
2326   10D3 E5            pop b
2327   10D4 0A 7C 10      jmp _while33_cond
2328   10D7             _while33_exit:
2329   10D7             ;; while (i > 0) { 
2330   10D7             _while34_cond:
2331   10D7 FA FA FF      lea d, [bp + -6] ; $i
2332   10DA 2A            mov b, [d]
2333   10DB             ; START RELATIONAL
2334   10DB D7            push a
2335   10DC 11            mov a, b
2336   10DD 26 00 00      mov b, $0
2337   10E0 B0            cmp a, b
2338   10E1 FD 7F         sgt ; >
2339   10E3 E4            pop a
2340   10E4             ; END RELATIONAL
2341   10E4 C0 00 00      cmp b, 0
2342   10E7 C6 10 11      je _while34_exit
2343   10EA             _while34_block:
2344   10EA             ;; i--; 
2345   10EA FA FA FF      lea d, [bp + -6] ; $i
2346   10ED 2A            mov b, [d]
2347   10EE D8            push b
2348   10EF FD 7D         dec b
2349   10F1 FA FA FF      lea d, [bp + -6] ; $i
2350   10F4 FD 43         mov [d], b
2351   10F6 E5            pop b
2352   10F7             ;; putchar(digits[i]); 
2353   10F7 FA FC FF      lea d, [bp + -4] ; $digits
2354   10FA D7            push a
2355   10FB DA            push d
2356   10FC FA FA FF      lea d, [bp + -6] ; $i
2357   10FF 2A            mov b, [d]
2358   1100 E7            pop d
2359   1101 5A            add d, b
2360   1102 E4            pop a
2361   1103 32            mov bl, [d]
2362   1104 A7 00         mov bh, 0
2363   1106 DD            push bl
2364   1107 07 32 11      call putchar
2365   110A 51 01 00      add sp, 1
2366   110D 0A D7 10      jmp _while34_cond
2367   1110             _while34_exit:
2368   1110 F9            leave
2369   1111 09            ret
2370   1112             
2371   1112             rand:
2372   1112 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2373   1115             ; $sec 
2374   1115 52 01 00      sub sp, 1
2375   1118             
2376   1118             ; --- BEGIN INLINE ASM BLOCK
2377   1118 19 00         mov al, 0
2378   111A 05 01         syscall sys_rtc					
2379   111C 1A            mov al, ah
2380   111D FA 00 00      lea d, [bp + 0] ; $sec
2381   1120 1E            mov al, [d]
2382   1121             ; --- END INLINE ASM BLOCK
2383   1121             
2384   1121             ;; return sec; 
2385   1121 FA 00 00      lea d, [bp + 0] ; $sec
2386   1124 32            mov bl, [d]
2387   1125 A7 00         mov bh, 0
2388   1127 F9            leave
2389   1128 09            ret
2390   1129             
2391   1129             date:
2392   1129 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2393   112C             
2394   112C             ; --- BEGIN INLINE ASM BLOCK
2395   112C 19 00         mov al, 0 
2396   112E 05 07         syscall sys_datetime
2397   1130             ; --- END INLINE ASM BLOCK
2398   1130             
2399   1130 F9            leave
2400   1131 09            ret
2401   1132             
2402   1132             putchar:
2403   1132 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2404   1135             
2405   1135             ; --- BEGIN INLINE ASM BLOCK
2406   1135 FA 05 00      lea d, [bp + 5] ; $c
2407   1138 1E            mov al, [d]
2408   1139 23            mov ah, al
2409   113A 07 59 13      call _putchar
2410   113D             ; --- END INLINE ASM BLOCK
2411   113D             
2412   113D F9            leave
2413   113E 09            ret
2414   113F             
2415   113F             getchar:
2416   113F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2417   1142             ; $c 
2418   1142 52 01 00      sub sp, 1
2419   1145             
2420   1145             ; --- BEGIN INLINE ASM BLOCK
2421   1145 07 52 13      call getch
2422   1148 1A            mov al, ah
2423   1149 FA 00 00      lea d, [bp + 0] ; $c
2424   114C 3E            mov [d], al
2425   114D             ; --- END INLINE ASM BLOCK
2426   114D             
2427   114D             ;; return c; 
2428   114D FA 00 00      lea d, [bp + 0] ; $c
2429   1150 32            mov bl, [d]
2430   1151 A7 00         mov bh, 0
2431   1153 F9            leave
2432   1154 09            ret
2433   1155             
2434   1155             scann:
2435   1155 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2436   1158             ; $m 
2437   1158 52 02 00      sub sp, 2
2438   115B             
2439   115B             ; --- BEGIN INLINE ASM BLOCK
2440   115B 07 9D 15      call scan_u16d
2441   115E FA FF FF      lea d, [bp + -1] ; $m
2442   1161 43            mov [d], a
2443   1162             ; --- END INLINE ASM BLOCK
2444   1162             
2445   1162             ;; return m; 
2446   1162 FA FF FF      lea d, [bp + -1] ; $m
2447   1165 2A            mov b, [d]
2448   1166 F9            leave
2449   1167 09            ret
2450   1168             
2451   1168             puts:
2452   1168 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2453   116B             
2454   116B             ; --- BEGIN INLINE ASM BLOCK
2455   116B FA 05 00      lea d, [bp + 5] ; $s
2456   116E 15            mov a, [d]
2457   116F 3C            mov d, a
2458   1170 07 A3 14      call _puts
2459   1173 10 00 0A      mov a, $0A00
2460   1176 05 03         syscall sys_io
2461   1178             ; --- END INLINE ASM BLOCK
2462   1178             
2463   1178 F9            leave
2464   1179 09            ret
2465   117A             
2466   117A             print:
2467   117A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2468   117D             
2469   117D             ; --- BEGIN INLINE ASM BLOCK
2470   117D FA 05 00      lea d, [bp + 5] ; $s
2471   1180 FD 2A         mov d, [d]
2472   1182 07 A3 14      call _puts
2473   1185             ; --- END INLINE ASM BLOCK
2474   1185             
2475   1185 F9            leave
2476   1186 09            ret
2477   1187             
2478   1187             loadfile:
2479   1187 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2480   118A             
2481   118A             ; --- BEGIN INLINE ASM BLOCK
2482   118A FA 07 00      lea d, [bp + 7] ; $destination
2483   118D 15            mov a, [d]
2484   118E 4F            mov di, a
2485   118F FA 05 00      lea d, [bp + 5] ; $filename
2486   1192 FD 2A         mov d, [d]
2487   1194 19 14         mov al, 20
2488   1196 05 04         syscall sys_filesystem
2489   1198             ; --- END INLINE ASM BLOCK
2490   1198             
2491   1198 F9            leave
2492   1199 09            ret
2493   119A             
2494   119A             create_file:
2495   119A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2496   119D F9            leave
2497   119E 09            ret
2498   119F             
2499   119F             delete_file:
2500   119F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2501   11A2             
2502   11A2             ; --- BEGIN INLINE ASM BLOCK
2503   11A2 FA 05 00      lea d, [bp + 5] ; $filename
2504   11A5 19 0A         mov al, 10
2505   11A7 05 04         syscall sys_filesystem
2506   11A9             ; --- END INLINE ASM BLOCK
2507   11A9             
2508   11A9 F9            leave
2509   11AA 09            ret
2510   11AB             
2511   11AB             fopen:
2512   11AB F8 00 00      enter 0 ; (push bp; mov bp, sp)
2513   11AE F9            leave
2514   11AF 09            ret
2515   11B0             
2516   11B0             fclose:
2517   11B0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2518   11B3 F9            leave
2519   11B4 09            ret
2520   11B5             
2521   11B5             alloc:
2522   11B5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2523   11B8             ;; heap_top = heap_top + bytes; 
2524   11B8 3B 3F 18      mov d, _heap_top ; $heap_top
2525   11BB DA            push d
2526   11BC 3B 3F 18      mov d, _heap_top ; $heap_top
2527   11BF 2A            mov b, [d]
2528   11C0             ; START TERMS
2529   11C0 D7            push a
2530   11C1 11            mov a, b
2531   11C2 FA 05 00      lea d, [bp + 5] ; $bytes
2532   11C5 2A            mov b, [d]
2533   11C6 54            add a, b
2534   11C7 27            mov b, a
2535   11C8 E4            pop a
2536   11C9             ; END TERMS
2537   11C9 E7            pop d
2538   11CA FD 43         mov [d], b
2539   11CC             ;; return heap_top - bytes; 
2540   11CC 3B 3F 18      mov d, _heap_top ; $heap_top
2541   11CF 2A            mov b, [d]
2542   11D0             ; START TERMS
2543   11D0 D7            push a
2544   11D1 11            mov a, b
2545   11D2 FA 05 00      lea d, [bp + 5] ; $bytes
2546   11D5 2A            mov b, [d]
2547   11D6 60            sub a, b
2548   11D7 27            mov b, a
2549   11D8 E4            pop a
2550   11D9             ; END TERMS
2551   11D9 F9            leave
2552   11DA 09            ret
2553   11DB             
2554   11DB             free:
2555   11DB F8 00 00      enter 0 ; (push bp; mov bp, sp)
2556   11DE             ;; return heap_top = heap_top - bytes; 
2557   11DE 3B 3F 18      mov d, _heap_top ; $heap_top
2558   11E1 DA            push d
2559   11E2 3B 3F 18      mov d, _heap_top ; $heap_top
2560   11E5 2A            mov b, [d]
2561   11E6             ; START TERMS
2562   11E6 D7            push a
2563   11E7 11            mov a, b
2564   11E8 FA 05 00      lea d, [bp + 5] ; $bytes
2565   11EB 2A            mov b, [d]
2566   11EC 60            sub a, b
2567   11ED 27            mov b, a
2568   11EE E4            pop a
2569   11EF             ; END TERMS
2570   11EF E7            pop d
2571   11F0 FD 43         mov [d], b
2572   11F2 F9            leave
2573   11F3 09            ret
2574   11F4             
2575   11F4             exit:
2576   11F4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2577   11F7             
2578   11F7             ; --- BEGIN INLINE ASM BLOCK
2579   11F7 05 0B         syscall sys_terminate_proc
2580   11F9             ; --- END INLINE ASM BLOCK
2581   11F9             
2582   11F9 F9            leave
2583   11FA 09            ret
2584   11FB             
2585   11FB             load_hex:
2586   11FB F8 00 00      enter 0 ; (push bp; mov bp, sp)
2587   11FE             ; $temp 
2588   11FE 52 02 00      sub sp, 2
2589   1201             ;; temp = alloc(32768); 
2590   1201 FA FF FF      lea d, [bp + -1] ; $temp
2591   1204 DA            push d
2592   1205 26 00 80      mov b, $8000
2593   1208 FD AB         swp b
2594   120A D8            push b
2595   120B 07 B5 11      call alloc
2596   120E 51 02 00      add sp, 2
2597   1211 E7            pop d
2598   1212 FD 43         mov [d], b
2599   1214             
2600   1214             ; --- BEGIN INLINE ASM BLOCK
2601   1214               
2602   1214               
2603   1214               
2604   1214               
2605   1214               
2606   1214             _load_hex:
2607   1214 D7            push a
2608   1215 D8            push b
2609   1216 DA            push d
2610   1217 E2            push si
2611   1218 E3            push di
2612   1219 52 00 80      sub sp, $8000      
2613   121C 38 00 00      mov c, 0
2614   121F 48            mov a, sp
2615   1220 77            inc a
2616   1221 3C            mov d, a          
2617   1222 07 60 13      call _gets        
2618   1225 4D            mov si, a
2619   1226             __load_hex_loop:
2620   1226 F6            lodsb             
2621   1227 B9 00         cmp al, 0         
2622   1229 C6 37 12      jz __load_hex_ret
2623   122C 36            mov bh, al
2624   122D F6            lodsb
2625   122E 2F            mov bl, al
2626   122F 07 16 13      call _atoi        
2627   1232 F7            stosb             
2628   1233 78            inc c
2629   1234 0A 26 12      jmp __load_hex_loop
2630   1237             __load_hex_ret:
2631   1237 51 00 80      add sp, $8000
2632   123A F0            pop di
2633   123B EF            pop si
2634   123C E7            pop d
2635   123D E5            pop b
2636   123E E4            pop a
2637   123F             ; --- END INLINE ASM BLOCK
2638   123F             
2639   123F F9            leave
2640   1240 09            ret
2641   1241             
2642   1241             getparam:
2643   1241 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2644   1244             ; $data 
2645   1244 52 01 00      sub sp, 1
2646   1247             
2647   1247             ; --- BEGIN INLINE ASM BLOCK
2648   1247 19 04         mov al, 4
2649   1249 FA 05 00      lea d, [bp + 5] ; $address
2650   124C FD 2A         mov d, [d]
2651   124E 05 0C         syscall sys_system
2652   1250 FA 00 00      lea d, [bp + 0] ; $data
2653   1253 FD 3E         mov [d], bl
2654   1255             ; --- END INLINE ASM BLOCK
2655   1255             
2656   1255             ;; return data; 
2657   1255 FA 00 00      lea d, [bp + 0] ; $data
2658   1258 32            mov bl, [d]
2659   1259 A7 00         mov bh, 0
2660   125B F9            leave
2661   125C 09            ret
2662   125D             
2663   125D             clear:
2664   125D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2665   1260             ;; print("\033[2J\033[H"); 
2666   1260 26 37 18      mov b, __s11 ; "\033[2J\033[H"
2667   1263 FD AB         swp b
2668   1265 D8            push b
2669   1266 07 7A 11      call print
2670   1269 51 02 00      add sp, 2
2671   126C F9            leave
2672   126D 09            ret
2673   126E             
2674   126E             include_stdio_asm:
2675   126E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2676   1271             
2677   1271             ; --- BEGIN INLINE ASM BLOCK
2678   1271             .include "lib/asm/stdio.asm"
0001+  1271             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  1271             ; stdio.s
0003+  1271             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  1271             .include "lib/asm/string.asm"
0001++ 1271             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1271             ; string.s
0003++ 1271             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1271             
0005++ 1271             
0006++ 1271             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1271             ; _strrev
0008++ 1271             ; reverse a string
0009++ 1271             ; D = string address
0010++ 1271             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1271             ; 01234
0012++ 1271             _strrev:
0013++ 1271 4B          	pusha
0014++ 1272 07 B8 12    	call _strlen	; length in C
0015++ 1275 12          	mov a, c
0016++ 1276 AF 01 00    	cmp a, 1
0017++ 1279 D0 93 12    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 127C 7D          	dec a
0019++ 127D FD 4E       	mov si, d	; beginning of string
0020++ 127F FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1281 59          	add d, a	; end of string
0022++ 1282 12          	mov a, c
0023++ 1283 FD 9B       	shr a		; divide by 2
0024++ 1285 39          	mov c, a	; C now counts the steps
0025++ 1286             _strrev_L0:
0026++ 1286 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1287 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1288 3E          	mov [d], al	; store left char into right side
0029++ 1289 1B          	mov al, bl
0030++ 128A F7          	stosb		; store right-side char into left-side; increase DI
0031++ 128B 7E          	dec c
0032++ 128C 7F          	dec d
0033++ 128D C2 00 00    	cmp c, 0
0034++ 1290 C7 86 12    	jne _strrev_L0
0035++ 1293             _strrev_end:
0036++ 1293 4C          	popa
0037++ 1294 09          	ret
0038++ 1295             	
0039++ 1295             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1295             ; _strchr
0041++ 1295             ; search string in D for char in AL
0042++ 1295             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1295             _strchr:
0044++ 1295             _strchr_L0:
0045++ 1295 32          	mov bl, [d]
0046++ 1296 C1 00       	cmp bl, 0
0047++ 1298 C6 A3 12    	je _strchr_end
0048++ 129B BA          	cmp al, bl
0049++ 129C C6 A3 12    	je _strchr_end
0050++ 129F 79          	inc d
0051++ 12A0 0A 95 12    	jmp _strchr_L0
0052++ 12A3             _strchr_end:
0053++ 12A3 1B          	mov al, bl
0054++ 12A4 09          	ret
0055++ 12A5             
0056++ 12A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 12A5             ; _strstr
0058++ 12A5             ; find sub-string
0059++ 12A5             ; str1 in SI
0060++ 12A5             ; str2 in DI
0061++ 12A5             ; SI points to end of source string
0062++ 12A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 12A5             _strstr:
0064++ 12A5 DB          	push al
0065++ 12A6 DA          	push d
0066++ 12A7 E3          	push di
0067++ 12A8             _strstr_loop:
0068++ 12A8 F3          	cmpsb					; compare a byte of the strings
0069++ 12A9 C7 B4 12    	jne _strstr_ret
0070++ 12AC FC 00 00    	lea d, [di + 0]
0071++ 12AF BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 12B1 C7 A8 12    	jne _strstr_loop				; equal chars but not at end
0073++ 12B4             _strstr_ret:
0074++ 12B4 F0          	pop di
0075++ 12B5 E7          	pop d
0076++ 12B6 E8          	pop al
0077++ 12B7 09          	ret
0078++ 12B8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 12B8             ; length of null terminated string
0080++ 12B8             ; result in C
0081++ 12B8             ; pointer in D
0082++ 12B8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 12B8             _strlen:
0084++ 12B8 DA          	push d
0085++ 12B9 38 00 00    	mov c, 0
0086++ 12BC             _strlen_L1:
0087++ 12BC BD 00       	cmp byte [d], 0
0088++ 12BE C6 C6 12    	je _strlen_ret
0089++ 12C1 79          	inc d
0090++ 12C2 78          	inc c
0091++ 12C3 0A BC 12    	jmp _strlen_L1
0092++ 12C6             _strlen_ret:
0093++ 12C6 E7          	pop d
0094++ 12C7 09          	ret
0095++ 12C8             
0096++ 12C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 12C8             ; STRCMP
0098++ 12C8             ; compare two strings
0099++ 12C8             ; str1 in SI
0100++ 12C8             ; str2 in DI
0101++ 12C8             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 12C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 12C8             _strcmp:
0104++ 12C8 DB          	push al
0105++ 12C9 DA          	push d
0106++ 12CA E3          	push di
0107++ 12CB E2          	push si
0108++ 12CC             _strcmp_loop:
0109++ 12CC F3          	cmpsb					; compare a byte of the strings
0110++ 12CD C7 D8 12    	jne _strcmp_ret
0111++ 12D0 FB FF FF    	lea d, [si +- 1]
0112++ 12D3 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 12D5 C7 CC 12    	jne _strcmp_loop				; equal chars but not at end
0114++ 12D8             _strcmp_ret:
0115++ 12D8 EF          	pop si
0116++ 12D9 F0          	pop di
0117++ 12DA E7          	pop d
0118++ 12DB E8          	pop al
0119++ 12DC 09          	ret
0120++ 12DD             
0121++ 12DD             
0122++ 12DD             ; STRCPY
0123++ 12DD             ; copy null terminated string from SI to DI
0124++ 12DD             ; source in SI
0125++ 12DD             ; destination in DI
0126++ 12DD             _strcpy:
0127++ 12DD E2          	push si
0128++ 12DE E3          	push di
0129++ 12DF DB          	push al
0130++ 12E0             _strcpy_L1:
0131++ 12E0 F6          	lodsb
0132++ 12E1 F7          	stosb
0133++ 12E2 B9 00       	cmp al, 0
0134++ 12E4 C7 E0 12    	jne _strcpy_L1
0135++ 12E7             _strcpy_end:
0136++ 12E7 E8          	pop al
0137++ 12E8 F0          	pop di
0138++ 12E9 EF          	pop si
0139++ 12EA 09          	ret
0140++ 12EB             
0141++ 12EB             ; STRCAT
0142++ 12EB             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 12EB             ; source in SI
0144++ 12EB             ; destination in DI
0145++ 12EB             _strcat:
0146++ 12EB E2          	push si
0147++ 12EC E3          	push di
0148++ 12ED D7          	push a
0149++ 12EE DA          	push d
0150++ 12EF 50          	mov a, di
0151++ 12F0 3C          	mov d, a
0152++ 12F1             _strcat_goto_end_L1:
0153++ 12F1 BD 00       	cmp byte[d], 0
0154++ 12F3 C6 FA 12    	je _strcat_start
0155++ 12F6 79          	inc d
0156++ 12F7 0A F1 12    	jmp _strcat_goto_end_L1
0157++ 12FA             _strcat_start:
0158++ 12FA FD 50       	mov di, d
0159++ 12FC             _strcat_L1:
0160++ 12FC F6          	lodsb
0161++ 12FD F7          	stosb
0162++ 12FE B9 00       	cmp al, 0
0163++ 1300 C7 FC 12    	jne _strcat_L1
0164++ 1303             _strcat_end:
0165++ 1303 E7          	pop d
0166++ 1304 E4          	pop a
0167++ 1305 F0          	pop di
0168++ 1306 EF          	pop si
0169++ 1307 09          	ret
0170++ 1308             
0171++ 1308             
0005+  1308             
0006+  1308             
0007+  1308             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  1308             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0009+  1308             ; ASCII in BL
0010+  1308             ; result in AL
0011+  1308             ; ascii for F = 0100 0110
0012+  1308             ; ascii for 9 = 0011 1001
0013+  1308             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  1308             hex_ascii_encode:
0015+  1308 1B            mov al, bl
0016+  1309 93 40         test al, $40        ; test if letter or number
0017+  130B C7 11 13      jnz hex_letter
0018+  130E 87 0F         and al, $0F        ; get number
0019+  1310 09            ret
0020+  1311             hex_letter:
0021+  1311 87 0F         and al, $0F        ; get letter
0022+  1313 6A 09         add al, 9
0023+  1315 09            ret
0024+  1316             
0025+  1316             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  1316             ; ATOI
0027+  1316             ; 2 letter hex string in B
0028+  1316             ; 8bit integer returned in AL
0029+  1316             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  1316             _atoi:
0031+  1316 D8            push b
0032+  1317 07 08 13      call hex_ascii_encode      ; convert BL to 4bit code in AL
0033+  131A 30            mov bl, bh
0034+  131B DB            push al          ; save a
0035+  131C 07 08 13      call hex_ascii_encode
0036+  131F EA            pop bl  
0037+  1320 FD 9E 04      shl al, 4
0038+  1323 8C            or al, bl
0039+  1324 E5            pop b
0040+  1325 09            ret  
0041+  1326             
0042+  1326             
0043+  1326             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  1326             ; scanf
0045+  1326             ; no need for explanations!
0046+  1326             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  1326             scanf:
0048+  1326 09            ret
0049+  1327             
0050+  1327             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  1327             ; ITOA
0052+  1327             ; 8bit value in BL
0053+  1327             ; 2 byte ASCII result in A
0054+  1327             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  1327             _itoa:
0056+  1327 DA            push d
0057+  1328 D8            push b
0058+  1329 A7 00         mov bh, 0
0059+  132B FD A4 04      shr bl, 4  
0060+  132E 74            mov d, b
0061+  132F 1F D7 15      mov al, [d + s_hex_digits]
0062+  1332 23            mov ah, al
0063+  1333               
0064+  1333 E5            pop b
0065+  1334 D8            push b
0066+  1335 A7 00         mov bh, 0
0067+  1337 FD 87 0F      and bl, $0F
0068+  133A 74            mov d, b
0069+  133B 1F D7 15      mov al, [d + s_hex_digits]
0070+  133E E5            pop b
0071+  133F E7            pop d
0072+  1340 09            ret
0073+  1341             
0074+  1341             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  1341             ; HEX STRING TO BINARY
0076+  1341             ; di = destination address
0077+  1341             ; si = source
0078+  1341             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  1341             _hex_to_int:
0080+  1341             _hex_to_int_L1:
0081+  1341 F6            lodsb          ; load from [SI] to AL
0082+  1342 B9 00         cmp al, 0        ; check if ASCII 0
0083+  1344 C6 51 13      jz _hex_to_int_ret
0084+  1347 36            mov bh, al
0085+  1348 F6            lodsb
0086+  1349 2F            mov bl, al
0087+  134A 07 16 13      call _atoi        ; convert ASCII byte in B to int (to AL)
0088+  134D F7            stosb          ; store AL to [DI]
0089+  134E 0A 41 13      jmp _hex_to_int_L1
0090+  1351             _hex_to_int_ret:
0091+  1351 09            ret    
0092+  1352             
0093+  1352             
0094+  1352             
0095+  1352             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  1352             ; GETCHAR
0097+  1352             ; char in ah
0098+  1352             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  1352             getch:
0100+  1352 DB            push al
0101+  1353             getch_retry:
0102+  1353 19 01         mov al, 1
0103+  1355 05 03         syscall sys_io      ; receive in AH
0104+  1357 E8            pop al
0105+  1358 09            ret
0106+  1359             
0107+  1359             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  1359             ; PUTCHAR
0109+  1359             ; char in ah
0110+  1359             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  1359             _putchar:
0112+  1359 D7            push a
0113+  135A 19 00         mov al, 0
0114+  135C 05 03         syscall sys_io      ; char in AH
0115+  135E E4            pop a
0116+  135F 09            ret
0117+  1360             
0118+  1360             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  1360             ;; INPUT A STRING
0120+  1360             ;; terminates with null
0121+  1360             ;; pointer in D
0122+  1360             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  1360             _gets:
0124+  1360 D7            push a
0125+  1361 DA            push d
0126+  1362             _gets_loop:
0127+  1362 19 01         mov al, 1
0128+  1364 05 03         syscall sys_io      ; receive in AH
0129+  1366 B9 00         cmp al, 0        ; check error code (AL)
0130+  1368 C6 62 13      je _gets_loop      ; if no char received, retry
0131+  136B             
0132+  136B 76 1B         cmp ah, 27
0133+  136D C6 8E 13      je _gets_ansi_esc
0134+  1370 76 0A         cmp ah, $0A        ; LF
0135+  1372 C6 F9 13      je _gets_end
0136+  1375 76 0D         cmp ah, $0D        ; CR
0137+  1377 C6 F9 13      je _gets_end
0138+  137A 76 5C         cmp ah, $5C        ; '\\'
0139+  137C C6 BA 13      je _gets_escape
0140+  137F               
0141+  137F 76 08         cmp ah, $08      ; check for backspace
0142+  1381 C6 8A 13      je _gets_backspace
0143+  1384             
0144+  1384 1A            mov al, ah
0145+  1385 3E            mov [d], al
0146+  1386 79            inc d
0147+  1387 0A 62 13      jmp _gets_loop
0148+  138A             _gets_backspace:
0149+  138A 7F            dec d
0150+  138B 0A 62 13      jmp _gets_loop
0151+  138E             _gets_ansi_esc:
0152+  138E 19 01         mov al, 1
0153+  1390 05 03         syscall sys_io        ; receive in AH without echo
0154+  1392 B9 00         cmp al, 0          ; check error code (AL)
0155+  1394 C6 8E 13      je _gets_ansi_esc    ; if no char received, retry
0156+  1397 76 5B         cmp ah, '['
0157+  1399 C7 62 13      jne _gets_loop
0158+  139C             _gets_ansi_esc_2:
0159+  139C 19 01         mov al, 1
0160+  139E 05 03         syscall sys_io          ; receive in AH without echo
0161+  13A0 B9 00         cmp al, 0            ; check error code (AL)
0162+  13A2 C6 9C 13      je _gets_ansi_esc_2  ; if no char received, retry
0163+  13A5 76 44         cmp ah, 'D'
0164+  13A7 C6 B2 13      je _gets_left_arrow
0165+  13AA 76 43         cmp ah, 'C'
0166+  13AC C6 B6 13      je _gets_right_arrow
0167+  13AF 0A 62 13      jmp _gets_loop
0168+  13B2             _gets_left_arrow:
0169+  13B2 7F            dec d
0170+  13B3 0A 62 13      jmp _gets_loop
0171+  13B6             _gets_right_arrow:
0172+  13B6 79            inc d
0173+  13B7 0A 62 13      jmp _gets_loop
0174+  13BA             _gets_escape:
0175+  13BA 19 01         mov al, 1
0176+  13BC 05 03         syscall sys_io      ; receive in AH
0177+  13BE B9 00         cmp al, 0        ; check error code (AL)
0178+  13C0 C6 BA 13      je _gets_escape      ; if no char received, retry
0179+  13C3 76 6E         cmp ah, 'n'
0180+  13C5 C6 E4 13      je _gets_LF
0181+  13C8 76 72         cmp ah, 'r'
0182+  13CA C6 EB 13      je _gets_CR
0183+  13CD 76 30         cmp ah, '0'
0184+  13CF C6 F2 13      je _gets_NULL
0185+  13D2 76 5C         cmp ah, $5C  ; '\'
0186+  13D4 C6 DD 13      je _gets_slash
0187+  13D7 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0188+  13D8 3E            mov [d], al
0189+  13D9 79            inc d
0190+  13DA 0A 62 13      jmp _gets_loop
0191+  13DD             _gets_slash:
0192+  13DD 19 5C         mov al, $5C
0193+  13DF 3E            mov [d], al
0194+  13E0 79            inc d
0195+  13E1 0A 62 13      jmp _gets_loop
0196+  13E4             _gets_LF:
0197+  13E4 19 0A         mov al, $0A
0198+  13E6 3E            mov [d], al
0199+  13E7 79            inc d
0200+  13E8 0A 62 13      jmp _gets_loop
0201+  13EB             _gets_CR:
0202+  13EB 19 0D         mov al, $0D
0203+  13ED 3E            mov [d], al
0204+  13EE 79            inc d
0205+  13EF 0A 62 13      jmp _gets_loop
0206+  13F2             _gets_NULL:
0207+  13F2 19 00         mov al, $00
0208+  13F4 3E            mov [d], al
0209+  13F5 79            inc d
0210+  13F6 0A 62 13      jmp _gets_loop
0211+  13F9             _gets_end:
0212+  13F9 19 00         mov al, 0
0213+  13FB 3E            mov [d], al        ; terminate string
0214+  13FC E7            pop d
0215+  13FD E4            pop a
0216+  13FE 09            ret
0217+  13FF             
0218+  13FF             
0219+  13FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0220+  13FF             ;; INPUT TEXT
0221+  13FF             ;; terminated with CTRL+D
0222+  13FF             ;; pointer in D
0223+  13FF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0224+  13FF             _gettxt:
0225+  13FF D7            push a
0226+  1400 DA            push d
0227+  1401             _gettxt_loop:
0228+  1401 19 01         mov al, 1
0229+  1403 05 03         syscall sys_io      ; receive in AH
0230+  1405 B9 00         cmp al, 0        ; check error code (AL)
0231+  1407 C6 01 14      je _gettxt_loop    ; if no char received, retry
0232+  140A 76 04         cmp ah, 4      ; EOT
0233+  140C C6 4A 14      je _gettxt_end
0234+  140F 76 08         cmp ah, $08      ; check for backspace
0235+  1411 C6 46 14      je _gettxt_backspace
0236+  1414 76 5C         cmp ah, $5C        ; '\'
0237+  1416 C6 1F 14      je _gettxt_escape
0238+  1419 1A            mov al, ah
0239+  141A 3E            mov [d], al
0240+  141B 79            inc d
0241+  141C 0A 01 14      jmp _gettxt_loop
0242+  141F             _gettxt_escape:
0243+  141F 19 01         mov al, 1
0244+  1421 05 03         syscall sys_io      ; receive in AH
0245+  1423 B9 00         cmp al, 0        ; check error code (AL)
0246+  1425 C6 1F 14      je _gettxt_escape    ; if no char received, retry
0247+  1428 76 6E         cmp ah, 'n'
0248+  142A C6 38 14      je _gettxt_LF
0249+  142D 76 72         cmp ah, 'r'
0250+  142F C6 3F 14      je _gettxt_CR
0251+  1432 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0252+  1433 3E            mov [d], al
0253+  1434 79            inc d
0254+  1435 0A 01 14      jmp _gettxt_loop
0255+  1438             _gettxt_LF:
0256+  1438 19 0A         mov al, $0A
0257+  143A 3E            mov [d], al
0258+  143B 79            inc d
0259+  143C 0A 01 14      jmp _gettxt_loop
0260+  143F             _gettxt_CR:
0261+  143F 19 0D         mov al, $0D
0262+  1441 3E            mov [d], al
0263+  1442 79            inc d
0264+  1443 0A 01 14      jmp _gettxt_loop
0265+  1446             _gettxt_backspace:
0266+  1446 7F            dec d
0267+  1447 0A 01 14      jmp _gettxt_loop
0268+  144A             _gettxt_end:
0269+  144A 19 00         mov al, 0
0270+  144C 3E            mov [d], al        ; terminate string
0271+  144D E7            pop d
0272+  144E E4            pop a
0273+  144F 09            ret
0274+  1450             
0275+  1450             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  1450             ; PRINT NEW LINE
0277+  1450             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0278+  1450             printnl:
0279+  1450 D7            push a
0280+  1451 10 00 0A      mov a, $0A00
0281+  1454 05 03         syscall sys_io
0282+  1456 10 00 0D      mov a, $0D00
0283+  1459 05 03         syscall sys_io
0284+  145B E4            pop a
0285+  145C 09            ret
0286+  145D             
0287+  145D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  145D             ; _strtoint
0289+  145D             ; 4 digit hex string number in d
0290+  145D             ; integer returned in A
0291+  145D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0292+  145D             _strtointx:
0293+  145D D8            push b
0294+  145E 32            mov bl, [d]
0295+  145F 37            mov bh, bl
0296+  1460 33 01 00      mov bl, [d + 1]
0297+  1463 07 16 13      call _atoi        ; convert to int in AL
0298+  1466 23            mov ah, al        ; move to AH
0299+  1467 33 02 00      mov bl, [d + 2]
0300+  146A 37            mov bh, bl
0301+  146B 33 03 00      mov bl, [d + 3]
0302+  146E 07 16 13      call _atoi        ; convert to int in AL
0303+  1471 E5            pop b
0304+  1472 09            ret
0305+  1473             
0306+  1473             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0307+  1473             ; _strtoint
0308+  1473             ; 5 digit base10 string number in d
0309+  1473             ; integer returned in A
0310+  1473             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0311+  1473             _strtoint:
0312+  1473 E2            push si
0313+  1474 D8            push b
0314+  1475 D9            push c
0315+  1476 DA            push d
0316+  1477 07 B8 12      call _strlen      ; get string length in C
0317+  147A 7E            dec c
0318+  147B FD 4E         mov si, d
0319+  147D 12            mov a, c
0320+  147E FD 99         shl a
0321+  1480 3B EF 15      mov d, table_power
0322+  1483 59            add d, a
0323+  1484 38 00 00      mov c, 0
0324+  1487             _strtoint_L0:
0325+  1487 F6            lodsb      ; load ASCII to al
0326+  1488 B9 00         cmp al, 0
0327+  148A C6 9D 14      je _strtoint_end
0328+  148D 6F 30         sub al, $30    ; make into integer
0329+  148F 22 00         mov ah, 0
0330+  1491 2A            mov b, [d]
0331+  1492 AC            mul a, b      ; result in B since it fits in 16bits
0332+  1493 11            mov a, b
0333+  1494 28            mov b, c
0334+  1495 54            add a, b
0335+  1496 39            mov c, a
0336+  1497 63 02 00      sub d, 2
0337+  149A 0A 87 14      jmp _strtoint_L0
0338+  149D             _strtoint_end:
0339+  149D 12            mov a, c
0340+  149E E7            pop d
0341+  149F E6            pop c
0342+  14A0 E5            pop b
0343+  14A1 EF            pop si
0344+  14A2 09            ret
0345+  14A3             
0346+  14A3             
0347+  14A3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0348+  14A3             ; PRINT NULL TERMINATED STRING
0349+  14A3             ; pointer in D
0350+  14A3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0351+  14A3             _puts:
0352+  14A3 D7            push a
0353+  14A4 DA            push d
0354+  14A5             _puts_L1:
0355+  14A5 1E            mov al, [d]
0356+  14A6 B9 00         cmp al, 0
0357+  14A8 C6 B4 14      jz _puts_END
0358+  14AB 23            mov ah, al
0359+  14AC 19 00         mov al, 0
0360+  14AE 05 03         syscall sys_io
0361+  14B0 79            inc d
0362+  14B1 0A A5 14      jmp _puts_L1
0363+  14B4             _puts_END:
0364+  14B4 E7            pop d
0365+  14B5 E4            pop a
0366+  14B6 09            ret
0367+  14B7             
0368+  14B7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0369+  14B7             ; PRINT N SIZE STRING
0370+  14B7             ; pointer in D
0371+  14B7             ; size in C
0372+  14B7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0373+  14B7             _putsn:
0374+  14B7 DB            push al
0375+  14B8 DA            push d
0376+  14B9 D9            push c
0377+  14BA             _putsn_L0:
0378+  14BA 1E            mov al, [d]
0379+  14BB 23            mov ah, al
0380+  14BC 19 00         mov al, 0
0381+  14BE 05 03         syscall sys_io
0382+  14C0 79            inc d
0383+  14C1 7E            dec c  
0384+  14C2 C2 00 00      cmp c, 0
0385+  14C5 C7 BA 14      jne _putsn_L0
0386+  14C8             _putsn_end:
0387+  14C8 E6            pop c
0388+  14C9 E7            pop d
0389+  14CA E8            pop al
0390+  14CB 09            ret
0391+  14CC             
0392+  14CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0393+  14CC             ; print 16bit decimal number
0394+  14CC             ; input number in A
0395+  14CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0396+  14CC             print_u16d:
0397+  14CC D7            push a
0398+  14CD D8            push b
0399+  14CE 26 10 27      mov b, 10000
0400+  14D1 AE            div a, b      ; get 10000's coeff.
0401+  14D2 07 F4 14      call print_number
0402+  14D5 11            mov a, b
0403+  14D6 26 E8 03      mov b, 1000
0404+  14D9 AE            div a, b      ; get 1000's coeff.
0405+  14DA 07 F4 14      call print_number
0406+  14DD 11            mov a, b
0407+  14DE 26 64 00      mov b, 100
0408+  14E1 AE            div a, b
0409+  14E2 07 F4 14      call print_number
0410+  14E5 11            mov a, b
0411+  14E6 26 0A 00      mov b, 10
0412+  14E9 AE            div a, b
0413+  14EA 07 F4 14      call print_number
0414+  14ED 1B            mov al, bl      ; 1's coeff in bl
0415+  14EE 07 F4 14      call print_number
0416+  14F1 E5            pop b
0417+  14F2 E4            pop a
0418+  14F3 09            ret
0419+  14F4             
0420+  14F4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0421+  14F4             ; print AL
0422+  14F4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0423+  14F4             print_number:
0424+  14F4 6A 30         add al, $30
0425+  14F6 23            mov ah, al
0426+  14F7 07 59 13      call _putchar
0427+  14FA 09            ret
0428+  14FB             
0429+  14FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0430+  14FB             ; PRINT 16BIT HEX INTEGER
0431+  14FB             ; integer value in reg B
0432+  14FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0433+  14FB             print_u16x:
0434+  14FB D7            push a
0435+  14FC D8            push b
0436+  14FD DD            push bl
0437+  14FE 30            mov bl, bh
0438+  14FF 07 27 13      call _itoa        ; convert bh to char in A
0439+  1502 2F            mov bl, al        ; save al
0440+  1503 19 00         mov al, 0
0441+  1505 05 03         syscall sys_io        ; display AH
0442+  1507 24            mov ah, bl        ; retrieve al
0443+  1508 19 00         mov al, 0
0444+  150A 05 03         syscall sys_io        ; display AL
0445+  150C             
0446+  150C EA            pop bl
0447+  150D 07 27 13      call _itoa        ; convert bh to char in A
0448+  1510 2F            mov bl, al        ; save al
0449+  1511 19 00         mov al, 0
0450+  1513 05 03         syscall sys_io        ; display AH
0451+  1515 24            mov ah, bl        ; retrieve al
0452+  1516 19 00         mov al, 0
0453+  1518 05 03         syscall sys_io        ; display AL
0454+  151A             
0455+  151A E5            pop b
0456+  151B E4            pop a
0457+  151C 09            ret
0458+  151D             
0459+  151D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0460+  151D             ; INPUT 16BIT HEX INTEGER
0461+  151D             ; read 16bit integer into A
0462+  151D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0463+  151D             scan_u16x:
0464+  151D F8 10 00      enter 16
0465+  1520 D8            push b
0466+  1521 DA            push d
0467+  1522             
0468+  1522 FA F1 FF      lea d, [bp + -15]
0469+  1525 07 60 13      call _gets        ; get number
0470+  1528             
0471+  1528 32            mov bl, [d]
0472+  1529 37            mov bh, bl
0473+  152A 33 01 00      mov bl, [d + 1]
0474+  152D 07 16 13      call _atoi        ; convert to int in AL
0475+  1530 23            mov ah, al        ; move to AH
0476+  1531             
0477+  1531 33 02 00      mov bl, [d + 2]
0478+  1534 37            mov bh, bl
0479+  1535 33 03 00      mov bl, [d + 3]
0480+  1538 07 16 13      call _atoi        ; convert to int in AL
0481+  153B             
0482+  153B E7            pop d
0483+  153C E5            pop b
0484+  153D F9            leave
0485+  153E 09            ret
0486+  153F             
0487+  153F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0488+  153F             ; PRINT 8bit HEX INTEGER
0489+  153F             ; integer value in reg bl
0490+  153F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0491+  153F             print_u8x:
0492+  153F D7            push a
0493+  1540 DD            push bl
0494+  1541             
0495+  1541 07 27 13      call _itoa        ; convert bl to char in A
0496+  1544 2F            mov bl, al        ; save al
0497+  1545 19 00         mov al, 0
0498+  1547 05 03         syscall sys_io        ; display AH
0499+  1549 24            mov ah, bl        ; retrieve al
0500+  154A 19 00         mov al, 0
0501+  154C 05 03         syscall sys_io        ; display AL
0502+  154E             
0503+  154E EA            pop bl
0504+  154F E4            pop a
0505+  1550 09            ret
0506+  1551             
0507+  1551             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0508+  1551             ; print 8bit decimal unsigned number
0509+  1551             ; input number in AL
0510+  1551             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0511+  1551             print_u8d:
0512+  1551 D7            push a
0513+  1552 D8            push b
0514+  1553             
0515+  1553 22 00         mov ah, 0
0516+  1555 26 64 00      mov b, 100
0517+  1558 AE            div a, b
0518+  1559 D8            push b      ; save remainder
0519+  155A B9 00         cmp al, 0
0520+  155C C6 66 15      je skip100
0521+  155F 6A 30         add al, $30
0522+  1561 23            mov ah, al
0523+  1562 19 00         mov al, 0
0524+  1564 05 03         syscall sys_io  ; print coeff
0525+  1566             skip100:
0526+  1566 E4            pop a
0527+  1567 22 00         mov ah, 0
0528+  1569 26 0A 00      mov b, 10
0529+  156C AE            div a, b
0530+  156D D8            push b      ; save remainder
0531+  156E B9 00         cmp al, 0
0532+  1570 C6 7A 15      je skip10
0533+  1573 6A 30         add al, $30
0534+  1575 23            mov ah, al
0535+  1576 19 00         mov al, 0
0536+  1578 05 03         syscall sys_io  ; print coeff
0537+  157A             skip10:
0538+  157A E4            pop a
0539+  157B 1B            mov al, bl
0540+  157C 6A 30         add al, $30
0541+  157E 23            mov ah, al
0542+  157F 19 00         mov al, 0
0543+  1581 05 03         syscall sys_io  ; print coeff
0544+  1583 E5            pop b
0545+  1584 E4            pop a
0546+  1585 09            ret
0547+  1586             
0548+  1586             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0549+  1586             ; INPUT 8BIT HEX INTEGER
0550+  1586             ; read 8bit integer into AL
0551+  1586             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0552+  1586             scan_u8x:
0553+  1586 F8 04 00      enter 4
0554+  1589 D8            push b
0555+  158A DA            push d
0556+  158B             
0557+  158B FA FD FF      lea d, [bp + -3]
0558+  158E 07 60 13      call _gets        ; get number
0559+  1591             
0560+  1591 32            mov bl, [d]
0561+  1592 37            mov bh, bl
0562+  1593 33 01 00      mov bl, [d + 1]
0563+  1596 07 16 13      call _atoi        ; convert to int in AL
0564+  1599             
0565+  1599 E7            pop d
0566+  159A E5            pop b
0567+  159B F9            leave
0568+  159C 09            ret
0569+  159D             
0570+  159D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0571+  159D             ; input decimal number
0572+  159D             ; result in A
0573+  159D             ; 655'\0'
0574+  159D             ; low--------high
0575+  159D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0576+  159D             scan_u16d:
0577+  159D F8 08 00      enter 8
0578+  15A0 E2            push si
0579+  15A1 D8            push b
0580+  15A2 D9            push c
0581+  15A3 DA            push d
0582+  15A4 FA F9 FF      lea d, [bp +- 7]
0583+  15A7 07 60 13      call _gets
0584+  15AA 07 B8 12      call _strlen      ; get string length in C
0585+  15AD 7E            dec c
0586+  15AE FD 4E         mov si, d
0587+  15B0 12            mov a, c
0588+  15B1 FD 99         shl a
0589+  15B3 3B EF 15      mov d, table_power
0590+  15B6 59            add d, a
0591+  15B7 38 00 00      mov c, 0
0592+  15BA             mul_loop:
0593+  15BA F6            lodsb      ; load ASCII to al
0594+  15BB B9 00         cmp al, 0
0595+  15BD C6 D0 15      je mul_exit
0596+  15C0 6F 30         sub al, $30    ; make into integer
0597+  15C2 22 00         mov ah, 0
0598+  15C4 2A            mov b, [d]
0599+  15C5 AC            mul a, b      ; result in B since it fits in 16bits
0600+  15C6 11            mov a, b
0601+  15C7 28            mov b, c
0602+  15C8 54            add a, b
0603+  15C9 39            mov c, a
0604+  15CA 63 02 00      sub d, 2
0605+  15CD 0A BA 15      jmp mul_loop
0606+  15D0             mul_exit:
0607+  15D0 12            mov a, c
0608+  15D1 E7            pop d
0609+  15D2 E6            pop c
0610+  15D3 E5            pop b
0611+  15D4 EF            pop si
0612+  15D5 F9            leave
0613+  15D6 09            ret
0614+  15D7             
0615+  15D7             
0616+  15D7 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0616+  15DB 34 35 36 37 
0616+  15DF 38 39 41 42 
0616+  15E3 43 44 45 46 
0617+  15E7 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0617+  15EB 1B 5B 48 00 
0618+  15EF             
0619+  15EF             table_power:
0620+  15EF 01 00         .dw 1
0621+  15F1 0A 00         .dw 10
0622+  15F3 64 00         .dw 100
0623+  15F5 E8 03         .dw 1000
0624+  15F7 10 27         .dw 100002679   15F9             ; --- END INLINE ASM BLOCK
2680   15F9             
2681   15F9 F9            leave
2682   15FA 09            ret
2683   15FB             
2684   15FB             gcd:
2685   15FB F8 00 00      enter 0 ; (push bp; mov bp, sp)
2686   15FE             ;; if (b == 0) { 
2687   15FE             _if35_cond:
2688   15FE FA 07 00      lea d, [bp + 7] ; $b
2689   1601 2A            mov b, [d]
2690   1602             ; START RELATIONAL
2691   1602 D7            push a
2692   1603 11            mov a, b
2693   1604 26 00 00      mov b, $0
2694   1607 B0            cmp a, b
2695   1608 FD 71         seq ; ==
2696   160A E4            pop a
2697   160B             ; END RELATIONAL
2698   160B C0 00 00      cmp b, 0
2699   160E C6 1A 16      je _if35_exit
2700   1611             _if35_true:
2701   1611             ;; return a; 
2702   1611 FA 05 00      lea d, [bp + 5] ; $a
2703   1614 2A            mov b, [d]
2704   1615 F9            leave
2705   1616 09            ret
2706   1617 0A 1A 16      jmp _if35_exit
2707   161A             _if35_exit:
2708   161A             ;; return gcd(b, a % b); 
2709   161A FA 05 00      lea d, [bp + 5] ; $a
2710   161D 2A            mov b, [d]
2711   161E             ; START FACTORS
2712   161E D7            push a
2713   161F 11            mov a, b
2714   1620 FA 07 00      lea d, [bp + 7] ; $b
2715   1623 2A            mov b, [d]
2716   1624 AE            div a, b ; 
2717   1625 11            mov a, b
2718   1626 27            mov b, a
2719   1627 E4            pop a
2720   1628             ; END FACTORS
2721   1628 FD AB         swp b
2722   162A D8            push b
2723   162B FA 07 00      lea d, [bp + 7] ; $b
2724   162E 2A            mov b, [d]
2725   162F FD AB         swp b
2726   1631 D8            push b
2727   1632 07 FB 15      call gcd
2728   1635 51 04 00      add sp, 4
2729   1638 F9            leave
2730   1639 09            ret
2731   163A             
2732   163A             mod_exp:
2733   163A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2734   163D             ; $result 
2735   163D 52 02 00      sub sp, 2
2736   1640             ;; result = 1; 
2737   1640 FA FF FF      lea d, [bp + -1] ; $result
2738   1643 DA            push d
2739   1644 26 01 00      mov b, $1
2740   1647 E7            pop d
2741   1648 FD 43         mov [d], b
2742   164A             ;; while (exp > 0) { 
2743   164A             _while36_cond:
2744   164A FA 07 00      lea d, [bp + 7] ; $exp
2745   164D 2A            mov b, [d]
2746   164E             ; START RELATIONAL
2747   164E D7            push a
2748   164F 11            mov a, b
2749   1650 26 00 00      mov b, $0
2750   1653 B0            cmp a, b
2751   1654 FD 7F         sgt ; >
2752   1656 E4            pop a
2753   1657             ; END RELATIONAL
2754   1657 C0 00 00      cmp b, 0
2755   165A C6 C8 16      je _while36_exit
2756   165D             _while36_block:
2757   165D             ;; if (exp & 1) { 
2758   165D             _if37_cond:
2759   165D FA 07 00      lea d, [bp + 7] ; $exp
2760   1660 2A            mov b, [d]
2761   1661 D7            push a
2762   1662 11            mov a, b
2763   1663 26 01 00      mov b, $1
2764   1666 86            and a, b ; &
2765   1667 27            mov b, a
2766   1668 E4            pop a
2767   1669 C0 00 00      cmp b, 0
2768   166C C6 91 16      je _if37_exit
2769   166F             _if37_true:
2770   166F             ;; result = (result * base) % mod; 
2771   166F FA FF FF      lea d, [bp + -1] ; $result
2772   1672 DA            push d
2773   1673 FA FF FF      lea d, [bp + -1] ; $result
2774   1676 2A            mov b, [d]
2775   1677             ; START FACTORS
2776   1677 D7            push a
2777   1678 11            mov a, b
2778   1679 FA 05 00      lea d, [bp + 5] ; $base
2779   167C 2A            mov b, [d]
2780   167D AC            mul a, b ; *
2781   167E 11            mov a, b
2782   167F 27            mov b, a
2783   1680 E4            pop a
2784   1681             ; END FACTORS
2785   1681             ; START FACTORS
2786   1681 D7            push a
2787   1682 11            mov a, b
2788   1683 FA 09 00      lea d, [bp + 9] ; $mod
2789   1686 2A            mov b, [d]
2790   1687 AE            div a, b ; 
2791   1688 11            mov a, b
2792   1689 27            mov b, a
2793   168A E4            pop a
2794   168B             ; END FACTORS
2795   168B E7            pop d
2796   168C FD 43         mov [d], b
2797   168E 0A 91 16      jmp _if37_exit
2798   1691             _if37_exit:
2799   1691             ;; exp = exp >> 1; 
2800   1691 FA 07 00      lea d, [bp + 7] ; $exp
2801   1694 DA            push d
2802   1695 FA 07 00      lea d, [bp + 7] ; $exp
2803   1698 2A            mov b, [d]
2804   1699             ; START SHIFT
2805   1699 D7            push a
2806   169A 11            mov a, b
2807   169B 26 01 00      mov b, $1
2808   169E FD 39         mov c, b
2809   16A0 A5            ashr a, cl
2810   16A1 27            mov b, a
2811   16A2 E4            pop a
2812   16A3             ; END SHIFT
2813   16A3 E7            pop d
2814   16A4 FD 43         mov [d], b
2815   16A6             ;; base = (base * base) % mod; 
2816   16A6 FA 05 00      lea d, [bp + 5] ; $base
2817   16A9 DA            push d
2818   16AA FA 05 00      lea d, [bp + 5] ; $base
2819   16AD 2A            mov b, [d]
2820   16AE             ; START FACTORS
2821   16AE D7            push a
2822   16AF 11            mov a, b
2823   16B0 FA 05 00      lea d, [bp + 5] ; $base
2824   16B3 2A            mov b, [d]
2825   16B4 AC            mul a, b ; *
2826   16B5 11            mov a, b
2827   16B6 27            mov b, a
2828   16B7 E4            pop a
2829   16B8             ; END FACTORS
2830   16B8             ; START FACTORS
2831   16B8 D7            push a
2832   16B9 11            mov a, b
2833   16BA FA 09 00      lea d, [bp + 9] ; $mod
2834   16BD 2A            mov b, [d]
2835   16BE AE            div a, b ; 
2836   16BF 11            mov a, b
2837   16C0 27            mov b, a
2838   16C1 E4            pop a
2839   16C2             ; END FACTORS
2840   16C2 E7            pop d
2841   16C3 FD 43         mov [d], b
2842   16C5 0A 4A 16      jmp _while36_cond
2843   16C8             _while36_exit:
2844   16C8             ;; return result; 
2845   16C8 FA FF FF      lea d, [bp + -1] ; $result
2846   16CB 2A            mov b, [d]
2847   16CC F9            leave
2848   16CD 09            ret
2849   16CE             
2850   16CE             find_e:
2851   16CE F8 00 00      enter 0 ; (push bp; mov bp, sp)
2852   16D1             ; $e 
2853   16D1 52 02 00      sub sp, 2
2854   16D4             ;; for (e = 2; e < phi; e++) { 
2855   16D4             _for38_init:
2856   16D4 FA FF FF      lea d, [bp + -1] ; $e
2857   16D7 DA            push d
2858   16D8 26 02 00      mov b, $2
2859   16DB E7            pop d
2860   16DC FD 43         mov [d], b
2861   16DE             _for38_cond:
2862   16DE FA FF FF      lea d, [bp + -1] ; $e
2863   16E1 2A            mov b, [d]
2864   16E2             ; START RELATIONAL
2865   16E2 D7            push a
2866   16E3 11            mov a, b
2867   16E4 FA 05 00      lea d, [bp + 5] ; $phi
2868   16E7 2A            mov b, [d]
2869   16E8 B0            cmp a, b
2870   16E9 FD 73         slt ; < 
2871   16EB E4            pop a
2872   16EC             ; END RELATIONAL
2873   16EC C0 00 00      cmp b, 0
2874   16EF C6 2E 17      je _for38_exit
2875   16F2             _for38_block:
2876   16F2             ;; if (gcd(e, phi) == 1) { 
2877   16F2             _if39_cond:
2878   16F2 FA 05 00      lea d, [bp + 5] ; $phi
2879   16F5 2A            mov b, [d]
2880   16F6 FD AB         swp b
2881   16F8 D8            push b
2882   16F9 FA FF FF      lea d, [bp + -1] ; $e
2883   16FC 2A            mov b, [d]
2884   16FD FD AB         swp b
2885   16FF D8            push b
2886   1700 07 FB 15      call gcd
2887   1703 51 04 00      add sp, 4
2888   1706             ; START RELATIONAL
2889   1706 D7            push a
2890   1707 11            mov a, b
2891   1708 26 01 00      mov b, $1
2892   170B B0            cmp a, b
2893   170C FD 71         seq ; ==
2894   170E E4            pop a
2895   170F             ; END RELATIONAL
2896   170F C0 00 00      cmp b, 0
2897   1712 C6 1E 17      je _if39_exit
2898   1715             _if39_true:
2899   1715             ;; return e; 
2900   1715 FA FF FF      lea d, [bp + -1] ; $e
2901   1718 2A            mov b, [d]
2902   1719 F9            leave
2903   171A 09            ret
2904   171B 0A 1E 17      jmp _if39_exit
2905   171E             _if39_exit:
2906   171E             _for38_update:
2907   171E FA FF FF      lea d, [bp + -1] ; $e
2908   1721 2A            mov b, [d]
2909   1722 D8            push b
2910   1723 FD 77         inc b
2911   1725 FA FF FF      lea d, [bp + -1] ; $e
2912   1728 FD 43         mov [d], b
2913   172A E5            pop b
2914   172B 0A DE 16      jmp _for38_cond
2915   172E             _for38_exit:
2916   172E             ;; return 0; 
2917   172E 26 00 00      mov b, $0
2918   1731 F9            leave
2919   1732 09            ret
2920   1733             
2921   1733             find_d:
2922   1733 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2923   1736             ; $d 
2924   1736 52 02 00      sub sp, 2
2925   1739             ;; for (d = 2; d < phi; d++) { 
2926   1739             _for40_init:
2927   1739 FA FF FF      lea d, [bp + -1] ; $d
2928   173C DA            push d
2929   173D 26 02 00      mov b, $2
2930   1740 E7            pop d
2931   1741 FD 43         mov [d], b
2932   1743             _for40_cond:
2933   1743 FA FF FF      lea d, [bp + -1] ; $d
2934   1746 2A            mov b, [d]
2935   1747             ; START RELATIONAL
2936   1747 D7            push a
2937   1748 11            mov a, b
2938   1749 FA 07 00      lea d, [bp + 7] ; $phi
2939   174C 2A            mov b, [d]
2940   174D B0            cmp a, b
2941   174E FD 73         slt ; < 
2942   1750 E4            pop a
2943   1751             ; END RELATIONAL
2944   1751 C0 00 00      cmp b, 0
2945   1754 C6 97 17      je _for40_exit
2946   1757             _for40_block:
2947   1757             ;; if ((d * e) % phi == 1) { 
2948   1757             _if41_cond:
2949   1757 FA FF FF      lea d, [bp + -1] ; $d
2950   175A 2A            mov b, [d]
2951   175B             ; START FACTORS
2952   175B D7            push a
2953   175C 11            mov a, b
2954   175D FA 05 00      lea d, [bp + 5] ; $e
2955   1760 2A            mov b, [d]
2956   1761 AC            mul a, b ; *
2957   1762 11            mov a, b
2958   1763 27            mov b, a
2959   1764 E4            pop a
2960   1765             ; END FACTORS
2961   1765             ; START FACTORS
2962   1765 D7            push a
2963   1766 11            mov a, b
2964   1767 FA 07 00      lea d, [bp + 7] ; $phi
2965   176A 2A            mov b, [d]
2966   176B AE            div a, b ; 
2967   176C 11            mov a, b
2968   176D 27            mov b, a
2969   176E E4            pop a
2970   176F             ; END FACTORS
2971   176F             ; START RELATIONAL
2972   176F D7            push a
2973   1770 11            mov a, b
2974   1771 26 01 00      mov b, $1
2975   1774 B0            cmp a, b
2976   1775 FD 71         seq ; ==
2977   1777 E4            pop a
2978   1778             ; END RELATIONAL
2979   1778 C0 00 00      cmp b, 0
2980   177B C6 87 17      je _if41_exit
2981   177E             _if41_true:
2982   177E             ;; return d; 
2983   177E FA FF FF      lea d, [bp + -1] ; $d
2984   1781 2A            mov b, [d]
2985   1782 F9            leave
2986   1783 09            ret
2987   1784 0A 87 17      jmp _if41_exit
2988   1787             _if41_exit:
2989   1787             _for40_update:
2990   1787 FA FF FF      lea d, [bp + -1] ; $d
2991   178A 2A            mov b, [d]
2992   178B D8            push b
2993   178C FD 77         inc b
2994   178E FA FF FF      lea d, [bp + -1] ; $d
2995   1791 FD 43         mov [d], b
2996   1793 E5            pop b
2997   1794 0A 43 17      jmp _for40_cond
2998   1797             _for40_exit:
2999   1797             ;; return 0; 
3000   1797 26 00 00      mov b, $0
3001   179A F9            leave
3002   179B 09            ret
3003   179C             ; --- END TEXT BLOCK
3004   179C             
3005   179C             ; --- BEGIN DATA BLOCK
3006   179C 50 75 62 6C __s0: .db "Public Key: (", 0
3006   17A0 69 63 20 4B 
3006   17A4 65 79 3A 20 
3006   17A8 28 00 
3007   17AA 25 64 2C 20 __s1: .db "%d, ", 0
3007   17AE 00 
3008   17AF 25 64 0A 00 __s2: .db "%d\n", 0
3009   17B3 50 72 69 76 __s3: .db "Private Key: (", 0
3009   17B7 61 74 65 20 
3009   17BB 4B 65 79 3A 
3009   17BF 20 28 00 
3010   17C2 45 6E 74 65 __s4: .db "Enter a string: ", 0
3010   17C6 72 20 61 20 
3010   17CA 73 74 72 69 
3010   17CE 6E 67 3A 20 
3010   17D2 00 
3011   17D3 45 6E 63 72 __s5: .db "Encrypted text: ", 0
3011   17D7 79 70 74 65 
3011   17DB 64 20 74 65 
3011   17DF 78 74 3A 20 
3011   17E3 00 
3012   17E4 25 64 20 00 __s6: .db "%d ", 0
3013   17E8 0A 00       __s7: .db "\n", 0
3014   17EA 44 65 63 72 __s8: .db "Decrypted text: ", 0
3014   17EE 79 70 74 65 
3014   17F2 64 20 74 65 
3014   17F6 78 74 3A 20 
3014   17FA 00 
3015   17FB 55 6E 65 78 __s9: .db "Unexpected format in printf.", 0
3015   17FF 70 65 63 74 
3015   1803 65 64 20 66 
3015   1807 6F 72 6D 61 
3015   180B 74 20 69 6E 
3015   180F 20 70 72 69 
3015   1813 6E 74 66 2E 
3015   1817 00 
3016   1818 45 72 72 6F __s10: .db "Error: Unknown argument type.\n", 0
3016   181C 72 3A 20 55 
3016   1820 6E 6B 6E 6F 
3016   1824 77 6E 20 61 
3016   1828 72 67 75 6D 
3016   182C 65 6E 74 20 
3016   1830 74 79 70 65 
3016   1834 2E 0A 00 
3017   1837 1B 5B 32 4A __s11: .db "\033[2J\033[H", 0
3017   183B 1B 5B 48 00 
3018   183F             
3019   183F 41 18       _heap_top: .dw _heap
3020   1841 00          _heap: .db 0
3021   1842             ; --- END DATA BLOCK
3022   1842             
3023   1842             .end
tasm: Number of errors = 0
