0001   0000             ; --- FILENAME: programs/rsa.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; int p, q, n, phi, e, d; 
0011   0408 52 02 00      sub sp, 2
0012   040B 52 02 00      sub sp, 2
0013   040E 52 02 00      sub sp, 2
0014   0411 52 02 00      sub sp, 2
0015   0414 52 02 00      sub sp, 2
0016   0417 52 02 00      sub sp, 2
0017   041A             ; p = 13; 
0018   041A FA FF FF      lea d, [bp + -1] ; $p
0019   041D DA            push d
0020   041E 26 0D 00      mov b, $d
0021   0421 E7            pop d
0022   0422 FD 43         mov [d], b
0023   0424             ; q = 11; 
0024   0424 FA FD FF      lea d, [bp + -3] ; $q
0025   0427 DA            push d
0026   0428 26 0B 00      mov b, $b
0027   042B E7            pop d
0028   042C FD 43         mov [d], b
0029   042E             ; n = p * q; 
0030   042E FA FB FF      lea d, [bp + -5] ; $n
0031   0431 DA            push d
0032   0432 FA FF FF      lea d, [bp + -1] ; $p
0033   0435 2A            mov b, [d]
0034   0436             ; --- START FACTORS
0035   0436 D7            push a
0036   0437 11            mov a, b
0037   0438 FA FD FF      lea d, [bp + -3] ; $q
0038   043B 2A            mov b, [d]
0039   043C AC            mul a, b ; *
0040   043D 11            mov a, b
0041   043E 27            mov b, a
0042   043F E4            pop a
0043   0440             ; --- END FACTORS
0044   0440 E7            pop d
0045   0441 FD 43         mov [d], b
0046   0443             ; phi = (p - 1) * (q - 1); 
0047   0443 FA F9 FF      lea d, [bp + -7] ; $phi
0048   0446 DA            push d
0049   0447 FA FF FF      lea d, [bp + -1] ; $p
0050   044A 2A            mov b, [d]
0051   044B             ; --- START TERMS
0052   044B D7            push a
0053   044C 11            mov a, b
0054   044D 26 01 00      mov b, $1
0055   0450 60            sub a, b
0056   0451 27            mov b, a
0057   0452 E4            pop a
0058   0453             ; --- END TERMS
0059   0453             ; --- START FACTORS
0060   0453 D7            push a
0061   0454 11            mov a, b
0062   0455 FA FD FF      lea d, [bp + -3] ; $q
0063   0458 2A            mov b, [d]
0064   0459             ; --- START TERMS
0065   0459 D7            push a
0066   045A 11            mov a, b
0067   045B 26 01 00      mov b, $1
0068   045E 60            sub a, b
0069   045F 27            mov b, a
0070   0460 E4            pop a
0071   0461             ; --- END TERMS
0072   0461 AC            mul a, b ; *
0073   0462 11            mov a, b
0074   0463 27            mov b, a
0075   0464 E4            pop a
0076   0465             ; --- END FACTORS
0077   0465 E7            pop d
0078   0466 FD 43         mov [d], b
0079   0468             ; e = find_e(phi); 
0080   0468 FA F7 FF      lea d, [bp + -9] ; $e
0081   046B DA            push d
0082   046C FA F9 FF      lea d, [bp + -7] ; $phi
0083   046F 2A            mov b, [d]
0084   0470 FD AB         swp b
0085   0472 D8            push b
0086   0473 07 D9 22      call find_e
0087   0476 51 02 00      add sp, 2
0088   0479 E7            pop d
0089   047A FD 43         mov [d], b
0090   047C             ; d = find_d(e, phi); 
0091   047C FA F5 FF      lea d, [bp + -11] ; $d
0092   047F DA            push d
0093   0480 FA F9 FF      lea d, [bp + -7] ; $phi
0094   0483 2A            mov b, [d]
0095   0484 FD AB         swp b
0096   0486 D8            push b
0097   0487 FA F7 FF      lea d, [bp + -9] ; $e
0098   048A 2A            mov b, [d]
0099   048B FD AB         swp b
0100   048D D8            push b
0101   048E 07 3E 23      call find_d
0102   0491 51 04 00      add sp, 4
0103   0494 E7            pop d
0104   0495 FD 43         mov [d], b
0105   0497             ; printf("Public Key: ("); 
0106   0497 26 A9 23      mov b, _s0 ; "Public Key: ("
0107   049A FD AB         swp b
0108   049C D8            push b
0109   049D 07 A5 0A      call printf
0110   04A0 51 02 00      add sp, 2
0111   04A3             ; printf("%d, ", n); 
0112   04A3 FA FB FF      lea d, [bp + -5] ; $n
0113   04A6 2A            mov b, [d]
0114   04A7 FD AB         swp b
0115   04A9 D8            push b
0116   04AA 26 B7 23      mov b, _s1 ; "%d, "
0117   04AD FD AB         swp b
0118   04AF D8            push b
0119   04B0 07 A5 0A      call printf
0120   04B3 51 04 00      add sp, 4
0121   04B6             ; printf("%d\n", e); 
0122   04B6 FA F7 FF      lea d, [bp + -9] ; $e
0123   04B9 2A            mov b, [d]
0124   04BA FD AB         swp b
0125   04BC D8            push b
0126   04BD 26 BC 23      mov b, _s2 ; "%d\n"
0127   04C0 FD AB         swp b
0128   04C2 D8            push b
0129   04C3 07 A5 0A      call printf
0130   04C6 51 04 00      add sp, 4
0131   04C9             ; print("Private Key: ("); 
0132   04C9 26 C0 23      mov b, _s3 ; "Private Key: ("
0133   04CC FD AB         swp b
0134   04CE D8            push b
0135   04CF 07 B5 1D      call print
0136   04D2 51 02 00      add sp, 2
0137   04D5             ; printf("%d, ", n); 
0138   04D5 FA FB FF      lea d, [bp + -5] ; $n
0139   04D8 2A            mov b, [d]
0140   04D9 FD AB         swp b
0141   04DB D8            push b
0142   04DC 26 B7 23      mov b, _s1 ; "%d, "
0143   04DF FD AB         swp b
0144   04E1 D8            push b
0145   04E2 07 A5 0A      call printf
0146   04E5 51 04 00      add sp, 4
0147   04E8             ; printf("%d\n", d); 
0148   04E8 FA F5 FF      lea d, [bp + -11] ; $d
0149   04EB 2A            mov b, [d]
0150   04EC FD AB         swp b
0151   04EE D8            push b
0152   04EF 26 BC 23      mov b, _s2 ; "%d\n"
0153   04F2 FD AB         swp b
0154   04F4 D8            push b
0155   04F5 07 A5 0A      call printf
0156   04F8 51 04 00      add sp, 4
0157   04FB             ; char input_str[100]; 
0158   04FB 52 64 00      sub sp, 100
0159   04FE             ; printf("Enter a string: "); 
0160   04FE 26 CF 23      mov b, _s4 ; "Enter a string: "
0161   0501 FD AB         swp b
0162   0503 D8            push b
0163   0504 07 A5 0A      call printf
0164   0507 51 02 00      add sp, 2
0165   050A             ; gets(input_str); 
0166   050A FA 91 FF      lea d, [bp + -111] ; $input_str
0167   050D 2D            mov b, d
0168   050E FD AB         swp b
0169   0510 D8            push b
0170   0511 07 EB 13      call gets
0171   0514 51 02 00      add sp, 2
0172   0517             ; int encrypted_chars[100]; 
0173   0517 52 C8 00      sub sp, 200
0174   051A             ; int encrypted_chars_len ; 
0175   051A 52 02 00      sub sp, 2
0176   051D             ; encrypted_chars_len = 0; 
0177   051D FA C7 FE      lea d, [bp + -313] ; $encrypted_chars_len
0178   0520 DA            push d
0179   0521 26 00 00      mov b, $0
0180   0524 E7            pop d
0181   0525 FD 43         mov [d], b
0182   0527             ; printf("Encrypted text: "); 
0183   0527 26 E0 23      mov b, _s5 ; "Encrypted text: "
0184   052A FD AB         swp b
0185   052C D8            push b
0186   052D 07 A5 0A      call printf
0187   0530 51 02 00      add sp, 2
0188   0533             ; int i; 
0189   0533 52 02 00      sub sp, 2
0190   0536             ; for (i = 0; input_str[i] != '\0' && input_str[i] != '\n'; i++) { 
0191   0536             _for1_init:
0192   0536 FA C5 FE      lea d, [bp + -315] ; $i
0193   0539 DA            push d
0194   053A 26 00 00      mov b, $0
0195   053D E7            pop d
0196   053E FD 43         mov [d], b
0197   0540             _for1_cond:
0198   0540 FA 91 FF      lea d, [bp + -111] ; $input_str
0199   0543 D7            push a
0200   0544 DA            push d
0201   0545 FA C5 FE      lea d, [bp + -315] ; $i
0202   0548 2A            mov b, [d]
0203   0549 E7            pop d
0204   054A 5A            add d, b
0205   054B E4            pop a
0206   054C 32            mov bl, [d]
0207   054D A7 00         mov bh, 0
0208   054F             ; --- START RELATIONAL
0209   054F D7            push a
0210   0550 11            mov a, b
0211   0551 26 00 00      mov b, $0
0212   0554 B0            cmp a, b
0213   0555 FD 72         sneq ; !=
0214   0557 E4            pop a
0215   0558             ; --- END RELATIONAL
0216   0558             ; --- START LOGICAL AND
0217   0558 D7            push a
0218   0559 11            mov a, b
0219   055A FA 91 FF      lea d, [bp + -111] ; $input_str
0220   055D D7            push a
0221   055E DA            push d
0222   055F FA C5 FE      lea d, [bp + -315] ; $i
0223   0562 2A            mov b, [d]
0224   0563 E7            pop d
0225   0564 5A            add d, b
0226   0565 E4            pop a
0227   0566 32            mov bl, [d]
0228   0567 A7 00         mov bh, 0
0229   0569             ; --- START RELATIONAL
0230   0569 D7            push a
0231   056A 11            mov a, b
0232   056B 26 0A 00      mov b, $a
0233   056E B0            cmp a, b
0234   056F FD 72         sneq ; !=
0235   0571 E4            pop a
0236   0572             ; --- END RELATIONAL
0237   0572 FD A7         sand a, b
0238   0574 E4            pop a
0239   0575             ; --- END LOGICAL AND
0240   0575 C0 00 00      cmp b, 0
0241   0578 C6 F0 05      je _for1_exit
0242   057B             _for1_block:
0243   057B             ; encrypted_chars[i] = mod_exp(input_str[i], e, n); 
0244   057B FA C9 FE      lea d, [bp + -311] ; $encrypted_chars
0245   057E D7            push a
0246   057F DA            push d
0247   0580 FA C5 FE      lea d, [bp + -315] ; $i
0248   0583 2A            mov b, [d]
0249   0584 E7            pop d
0250   0585 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0251   0589 E4            pop a
0252   058A DA            push d
0253   058B FA FB FF      lea d, [bp + -5] ; $n
0254   058E 2A            mov b, [d]
0255   058F FD AB         swp b
0256   0591 D8            push b
0257   0592 FA F7 FF      lea d, [bp + -9] ; $e
0258   0595 2A            mov b, [d]
0259   0596 FD AB         swp b
0260   0598 D8            push b
0261   0599 FA 91 FF      lea d, [bp + -111] ; $input_str
0262   059C D7            push a
0263   059D DA            push d
0264   059E FA C5 FE      lea d, [bp + -315] ; $i
0265   05A1 2A            mov b, [d]
0266   05A2 E7            pop d
0267   05A3 5A            add d, b
0268   05A4 E4            pop a
0269   05A5 32            mov bl, [d]
0270   05A6 A7 00         mov bh, 0
0271   05A8 FD AB         swp b
0272   05AA D8            push b
0273   05AB 07 45 22      call mod_exp
0274   05AE 51 06 00      add sp, 6
0275   05B1 E7            pop d
0276   05B2 FD 43         mov [d], b
0277   05B4             ; printf("%d ", encrypted_chars[i]); 
0278   05B4 FA C9 FE      lea d, [bp + -311] ; $encrypted_chars
0279   05B7 D7            push a
0280   05B8 DA            push d
0281   05B9 FA C5 FE      lea d, [bp + -315] ; $i
0282   05BC 2A            mov b, [d]
0283   05BD E7            pop d
0284   05BE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0285   05C2 E4            pop a
0286   05C3 2A            mov b, [d]
0287   05C4 FD AB         swp b
0288   05C6 D8            push b
0289   05C7 26 F1 23      mov b, _s6 ; "%d "
0290   05CA FD AB         swp b
0291   05CC D8            push b
0292   05CD 07 A5 0A      call printf
0293   05D0 51 04 00      add sp, 4
0294   05D3             ; encrypted_chars_len++; 
0295   05D3 FA C7 FE      lea d, [bp + -313] ; $encrypted_chars_len
0296   05D6 2A            mov b, [d]
0297   05D7 FD 77         inc b
0298   05D9 FA C7 FE      lea d, [bp + -313] ; $encrypted_chars_len
0299   05DC FD 43         mov [d], b
0300   05DE FD 7D         dec b
0301   05E0             _for1_update:
0302   05E0 FA C5 FE      lea d, [bp + -315] ; $i
0303   05E3 2A            mov b, [d]
0304   05E4 FD 77         inc b
0305   05E6 FA C5 FE      lea d, [bp + -315] ; $i
0306   05E9 FD 43         mov [d], b
0307   05EB FD 7D         dec b
0308   05ED 0A 40 05      jmp _for1_cond
0309   05F0             _for1_exit:
0310   05F0             ; printf("\n"); 
0311   05F0 26 F5 23      mov b, _s7 ; "\n"
0312   05F3 FD AB         swp b
0313   05F5 D8            push b
0314   05F6 07 A5 0A      call printf
0315   05F9 51 02 00      add sp, 2
0316   05FC             ; int decrypted_char; 
0317   05FC 52 02 00      sub sp, 2
0318   05FF             ; char c; 
0319   05FF 52 01 00      sub sp, 1
0320   0602             ; printf("Decrypted text: "); 
0321   0602 26 F7 23      mov b, _s8 ; "Decrypted text: "
0322   0605 FD AB         swp b
0323   0607 D8            push b
0324   0608 07 A5 0A      call printf
0325   060B 51 02 00      add sp, 2
0326   060E             ; for (i = 0; i < encrypted_chars_len; i++) { 
0327   060E             _for2_init:
0328   060E FA C5 FE      lea d, [bp + -315] ; $i
0329   0611 DA            push d
0330   0612 26 00 00      mov b, $0
0331   0615 E7            pop d
0332   0616 FD 43         mov [d], b
0333   0618             _for2_cond:
0334   0618 FA C5 FE      lea d, [bp + -315] ; $i
0335   061B 2A            mov b, [d]
0336   061C             ; --- START RELATIONAL
0337   061C D7            push a
0338   061D 11            mov a, b
0339   061E FA C7 FE      lea d, [bp + -313] ; $encrypted_chars_len
0340   0621 2A            mov b, [d]
0341   0622 B0            cmp a, b
0342   0623 FD 73         slt ; < (signed)
0343   0625 E4            pop a
0344   0626             ; --- END RELATIONAL
0345   0626 C0 00 00      cmp b, 0
0346   0629 C6 82 06      je _for2_exit
0347   062C             _for2_block:
0348   062C             ; decrypted_char = mod_exp(encrypted_chars[i], d, n); 
0349   062C FA C3 FE      lea d, [bp + -317] ; $decrypted_char
0350   062F DA            push d
0351   0630 FA FB FF      lea d, [bp + -5] ; $n
0352   0633 2A            mov b, [d]
0353   0634 FD AB         swp b
0354   0636 D8            push b
0355   0637 FA F5 FF      lea d, [bp + -11] ; $d
0356   063A 2A            mov b, [d]
0357   063B FD AB         swp b
0358   063D D8            push b
0359   063E FA C9 FE      lea d, [bp + -311] ; $encrypted_chars
0360   0641 D7            push a
0361   0642 DA            push d
0362   0643 FA C5 FE      lea d, [bp + -315] ; $i
0363   0646 2A            mov b, [d]
0364   0647 E7            pop d
0365   0648 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0366   064C E4            pop a
0367   064D 2A            mov b, [d]
0368   064E FD AB         swp b
0369   0650 D8            push b
0370   0651 07 45 22      call mod_exp
0371   0654 51 06 00      add sp, 6
0372   0657 E7            pop d
0373   0658 FD 43         mov [d], b
0374   065A             ; c = decrypted_char; 
0375   065A FA C2 FE      lea d, [bp + -318] ; $c
0376   065D DA            push d
0377   065E FA C3 FE      lea d, [bp + -317] ; $decrypted_char
0378   0661 2A            mov b, [d]
0379   0662 E7            pop d
0380   0663 FD 3E         mov [d], bl
0381   0665             ; putchar(c); 
0382   0665 FA C2 FE      lea d, [bp + -318] ; $c
0383   0668 32            mov bl, [d]
0384   0669 A7 00         mov bh, 0
0385   066B DD            push bl
0386   066C 07 6D 1D      call putchar
0387   066F 51 01 00      add sp, 1
0388   0672             _for2_update:
0389   0672 FA C5 FE      lea d, [bp + -315] ; $i
0390   0675 2A            mov b, [d]
0391   0676 FD 77         inc b
0392   0678 FA C5 FE      lea d, [bp + -315] ; $i
0393   067B FD 43         mov [d], b
0394   067D FD 7D         dec b
0395   067F 0A 18 06      jmp _for2_cond
0396   0682             _for2_exit:
0397   0682             ; printf("\n"); 
0398   0682 26 F5 23      mov b, _s7 ; "\n"
0399   0685 FD AB         swp b
0400   0687 D8            push b
0401   0688 07 A5 0A      call printf
0402   068B 51 02 00      add sp, 2
0403   068E             ; return 0; 
0404   068E 26 00 00      mov b, $0
0405   0691 F9            leave
0406   0692 05 0B         syscall sys_terminate_proc
0407   0694             
0408   0694             strcpy:
0409   0694 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0410   0697             ; char *psrc; 
0411   0697 52 02 00      sub sp, 2
0412   069A             ; char *pdest; 
0413   069A 52 02 00      sub sp, 2
0414   069D             ; psrc = src; 
0415   069D FA FF FF      lea d, [bp + -1] ; $psrc
0416   06A0 DA            push d
0417   06A1 FA 07 00      lea d, [bp + 7] ; $src
0418   06A4 2A            mov b, [d]
0419   06A5 E7            pop d
0420   06A6 FD 43         mov [d], b
0421   06A8             ; pdest = dest; 
0422   06A8 FA FD FF      lea d, [bp + -3] ; $pdest
0423   06AB DA            push d
0424   06AC FA 05 00      lea d, [bp + 5] ; $dest
0425   06AF 2A            mov b, [d]
0426   06B0 E7            pop d
0427   06B1 FD 43         mov [d], b
0428   06B3             ; while(*psrc) *pdest++ = *psrc++; 
0429   06B3             _while3_cond:
0430   06B3 FA FF FF      lea d, [bp + -1] ; $psrc
0431   06B6 2A            mov b, [d]
0432   06B7 74            mov d, b
0433   06B8 32            mov bl, [d]
0434   06B9 A7 00         mov bh, 0
0435   06BB C0 00 00      cmp b, 0
0436   06BE C6 E6 06      je _while3_exit
0437   06C1             _while3_block:
0438   06C1             ; *pdest++ = *psrc++; 
0439   06C1 FA FD FF      lea d, [bp + -3] ; $pdest
0440   06C4 2A            mov b, [d]
0441   06C5 FD 77         inc b
0442   06C7 FA FD FF      lea d, [bp + -3] ; $pdest
0443   06CA FD 43         mov [d], b
0444   06CC FD 7D         dec b
0445   06CE D8            push b
0446   06CF FA FF FF      lea d, [bp + -1] ; $psrc
0447   06D2 2A            mov b, [d]
0448   06D3 FD 77         inc b
0449   06D5 FA FF FF      lea d, [bp + -1] ; $psrc
0450   06D8 FD 43         mov [d], b
0451   06DA FD 7D         dec b
0452   06DC 74            mov d, b
0453   06DD 32            mov bl, [d]
0454   06DE A7 00         mov bh, 0
0455   06E0 E7            pop d
0456   06E1 FD 3E         mov [d], bl
0457   06E3 0A B3 06      jmp _while3_cond
0458   06E6             _while3_exit:
0459   06E6             ; *pdest = '\0'; 
0460   06E6 FA FD FF      lea d, [bp + -3] ; $pdest
0461   06E9 2A            mov b, [d]
0462   06EA D8            push b
0463   06EB 26 00 00      mov b, $0
0464   06EE E7            pop d
0465   06EF FD 3E         mov [d], bl
0466   06F1 F9            leave
0467   06F2 09            ret
0468   06F3             
0469   06F3             strcmp:
0470   06F3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0471   06F6             ; while (*s1 && (*s1 == *s2)) { 
0472   06F6             _while4_cond:
0473   06F6 FA 05 00      lea d, [bp + 5] ; $s1
0474   06F9 2A            mov b, [d]
0475   06FA 74            mov d, b
0476   06FB 32            mov bl, [d]
0477   06FC A7 00         mov bh, 0
0478   06FE             ; --- START LOGICAL AND
0479   06FE D7            push a
0480   06FF 11            mov a, b
0481   0700 FA 05 00      lea d, [bp + 5] ; $s1
0482   0703 2A            mov b, [d]
0483   0704 74            mov d, b
0484   0705 32            mov bl, [d]
0485   0706 A7 00         mov bh, 0
0486   0708             ; --- START RELATIONAL
0487   0708 D7            push a
0488   0709 11            mov a, b
0489   070A FA 07 00      lea d, [bp + 7] ; $s2
0490   070D 2A            mov b, [d]
0491   070E 74            mov d, b
0492   070F 32            mov bl, [d]
0493   0710 A7 00         mov bh, 0
0494   0712 B0            cmp a, b
0495   0713 FD 71         seq ; ==
0496   0715 E4            pop a
0497   0716             ; --- END RELATIONAL
0498   0716 FD A7         sand a, b
0499   0718 E4            pop a
0500   0719             ; --- END LOGICAL AND
0501   0719 C0 00 00      cmp b, 0
0502   071C C6 3C 07      je _while4_exit
0503   071F             _while4_block:
0504   071F             ; s1++; 
0505   071F FA 05 00      lea d, [bp + 5] ; $s1
0506   0722 2A            mov b, [d]
0507   0723 FD 77         inc b
0508   0725 FA 05 00      lea d, [bp + 5] ; $s1
0509   0728 FD 43         mov [d], b
0510   072A FD 7D         dec b
0511   072C             ; s2++; 
0512   072C FA 07 00      lea d, [bp + 7] ; $s2
0513   072F 2A            mov b, [d]
0514   0730 FD 77         inc b
0515   0732 FA 07 00      lea d, [bp + 7] ; $s2
0516   0735 FD 43         mov [d], b
0517   0737 FD 7D         dec b
0518   0739 0A F6 06      jmp _while4_cond
0519   073C             _while4_exit:
0520   073C             ; return *s1 - *s2; 
0521   073C FA 05 00      lea d, [bp + 5] ; $s1
0522   073F 2A            mov b, [d]
0523   0740 74            mov d, b
0524   0741 32            mov bl, [d]
0525   0742 A7 00         mov bh, 0
0526   0744             ; --- START TERMS
0527   0744 D7            push a
0528   0745 11            mov a, b
0529   0746 FA 07 00      lea d, [bp + 7] ; $s2
0530   0749 2A            mov b, [d]
0531   074A 74            mov d, b
0532   074B 32            mov bl, [d]
0533   074C A7 00         mov bh, 0
0534   074E 60            sub a, b
0535   074F 27            mov b, a
0536   0750 E4            pop a
0537   0751             ; --- END TERMS
0538   0751 F9            leave
0539   0752 09            ret
0540   0753             
0541   0753             strncmp:
0542   0753 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0543   0756 F9            leave
0544   0757 09            ret
0545   0758             
0546   0758             strcat:
0547   0758 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0548   075B             ; int dest_len; 
0549   075B 52 02 00      sub sp, 2
0550   075E             ; int i; 
0551   075E 52 02 00      sub sp, 2
0552   0761             ; dest_len = strlen(dest); 
0553   0761 FA FF FF      lea d, [bp + -1] ; $dest_len
0554   0764 DA            push d
0555   0765 FA 05 00      lea d, [bp + 5] ; $dest
0556   0768 2A            mov b, [d]
0557   0769 FD AB         swp b
0558   076B D8            push b
0559   076C 07 0E 08      call strlen
0560   076F 51 02 00      add sp, 2
0561   0772 E7            pop d
0562   0773 FD 43         mov [d], b
0563   0775             ; for (i = 0; src[i] != 0; i=i+1) { 
0564   0775             _for5_init:
0565   0775 FA FD FF      lea d, [bp + -3] ; $i
0566   0778 DA            push d
0567   0779 26 00 00      mov b, $0
0568   077C E7            pop d
0569   077D FD 43         mov [d], b
0570   077F             _for5_cond:
0571   077F FA 07 00      lea d, [bp + 7] ; $src
0572   0782 FD 2A         mov d, [d]
0573   0784 D7            push a
0574   0785 DA            push d
0575   0786 FA FD FF      lea d, [bp + -3] ; $i
0576   0789 2A            mov b, [d]
0577   078A E7            pop d
0578   078B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0579   078F E4            pop a
0580   0790 32            mov bl, [d]
0581   0791 A7 00         mov bh, 0
0582   0793             ; --- START RELATIONAL
0583   0793 D7            push a
0584   0794 11            mov a, b
0585   0795 26 00 00      mov b, $0
0586   0798 B0            cmp a, b
0587   0799 FD 72         sneq ; !=
0588   079B E4            pop a
0589   079C             ; --- END RELATIONAL
0590   079C C0 00 00      cmp b, 0
0591   079F C6 E8 07      je _for5_exit
0592   07A2             _for5_block:
0593   07A2             ; dest[dest_len + i] = src[i]; 
0594   07A2 FA 05 00      lea d, [bp + 5] ; $dest
0595   07A5 FD 2A         mov d, [d]
0596   07A7 D7            push a
0597   07A8 DA            push d
0598   07A9 FA FF FF      lea d, [bp + -1] ; $dest_len
0599   07AC 2A            mov b, [d]
0600   07AD             ; --- START TERMS
0601   07AD D7            push a
0602   07AE 11            mov a, b
0603   07AF FA FD FF      lea d, [bp + -3] ; $i
0604   07B2 2A            mov b, [d]
0605   07B3 56            add b, a
0606   07B4 E4            pop a
0607   07B5             ; --- END TERMS
0608   07B5 E7            pop d
0609   07B6 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0610   07BA E4            pop a
0611   07BB DA            push d
0612   07BC FA 07 00      lea d, [bp + 7] ; $src
0613   07BF FD 2A         mov d, [d]
0614   07C1 D7            push a
0615   07C2 DA            push d
0616   07C3 FA FD FF      lea d, [bp + -3] ; $i
0617   07C6 2A            mov b, [d]
0618   07C7 E7            pop d
0619   07C8 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0620   07CC E4            pop a
0621   07CD 32            mov bl, [d]
0622   07CE A7 00         mov bh, 0
0623   07D0 E7            pop d
0624   07D1 FD 3E         mov [d], bl
0625   07D3             _for5_update:
0626   07D3 FA FD FF      lea d, [bp + -3] ; $i
0627   07D6 DA            push d
0628   07D7 FA FD FF      lea d, [bp + -3] ; $i
0629   07DA 2A            mov b, [d]
0630   07DB             ; --- START TERMS
0631   07DB D7            push a
0632   07DC 11            mov a, b
0633   07DD 26 01 00      mov b, $1
0634   07E0 56            add b, a
0635   07E1 E4            pop a
0636   07E2             ; --- END TERMS
0637   07E2 E7            pop d
0638   07E3 FD 43         mov [d], b
0639   07E5 0A 7F 07      jmp _for5_cond
0640   07E8             _for5_exit:
0641   07E8             ; dest[dest_len + i] = 0; 
0642   07E8 FA 05 00      lea d, [bp + 5] ; $dest
0643   07EB FD 2A         mov d, [d]
0644   07ED D7            push a
0645   07EE DA            push d
0646   07EF FA FF FF      lea d, [bp + -1] ; $dest_len
0647   07F2 2A            mov b, [d]
0648   07F3             ; --- START TERMS
0649   07F3 D7            push a
0650   07F4 11            mov a, b
0651   07F5 FA FD FF      lea d, [bp + -3] ; $i
0652   07F8 2A            mov b, [d]
0653   07F9 56            add b, a
0654   07FA E4            pop a
0655   07FB             ; --- END TERMS
0656   07FB E7            pop d
0657   07FC FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0658   0800 E4            pop a
0659   0801 DA            push d
0660   0802 26 00 00      mov b, $0
0661   0805 E7            pop d
0662   0806 FD 3E         mov [d], bl
0663   0808             ; return dest; 
0664   0808 FA 05 00      lea d, [bp + 5] ; $dest
0665   080B 2A            mov b, [d]
0666   080C F9            leave
0667   080D 09            ret
0668   080E             
0669   080E             strlen:
0670   080E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0671   0811             ; int length; 
0672   0811 52 02 00      sub sp, 2
0673   0814             ; length = 0; 
0674   0814 FA FF FF      lea d, [bp + -1] ; $length
0675   0817 DA            push d
0676   0818 26 00 00      mov b, $0
0677   081B E7            pop d
0678   081C FD 43         mov [d], b
0679   081E             ; while (str[length] != 0) { 
0680   081E             _while6_cond:
0681   081E FA 05 00      lea d, [bp + 5] ; $str
0682   0821 FD 2A         mov d, [d]
0683   0823 D7            push a
0684   0824 DA            push d
0685   0825 FA FF FF      lea d, [bp + -1] ; $length
0686   0828 2A            mov b, [d]
0687   0829 E7            pop d
0688   082A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0689   082E E4            pop a
0690   082F 32            mov bl, [d]
0691   0830 A7 00         mov bh, 0
0692   0832             ; --- START RELATIONAL
0693   0832 D7            push a
0694   0833 11            mov a, b
0695   0834 26 00 00      mov b, $0
0696   0837 B0            cmp a, b
0697   0838 FD 72         sneq ; !=
0698   083A E4            pop a
0699   083B             ; --- END RELATIONAL
0700   083B C0 00 00      cmp b, 0
0701   083E C6 51 08      je _while6_exit
0702   0841             _while6_block:
0703   0841             ; length++; 
0704   0841 FA FF FF      lea d, [bp + -1] ; $length
0705   0844 2A            mov b, [d]
0706   0845 FD 77         inc b
0707   0847 FA FF FF      lea d, [bp + -1] ; $length
0708   084A FD 43         mov [d], b
0709   084C FD 7D         dec b
0710   084E 0A 1E 08      jmp _while6_cond
0711   0851             _while6_exit:
0712   0851             ; return length; 
0713   0851 FA FF FF      lea d, [bp + -1] ; $length
0714   0854 2A            mov b, [d]
0715   0855 F9            leave
0716   0856 09            ret
0717   0857             
0718   0857             exit:
0719   0857 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0720   085A             
0721   085A             ; --- BEGIN INLINE ASM SEGMENT
0722   085A 05 0B         syscall sys_terminate_proc
0723   085C             ; --- END INLINE ASM SEGMENT
0724   085C             
0725   085C F9            leave
0726   085D 09            ret
0727   085E             
0728   085E             memset:
0729   085E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0730   0861             ; int i; 
0731   0861 52 02 00      sub sp, 2
0732   0864             ; for(i = 0; i < size; i++){ 
0733   0864             _for7_init:
0734   0864 FA FF FF      lea d, [bp + -1] ; $i
0735   0867 DA            push d
0736   0868 26 00 00      mov b, $0
0737   086B E7            pop d
0738   086C FD 43         mov [d], b
0739   086E             _for7_cond:
0740   086E FA FF FF      lea d, [bp + -1] ; $i
0741   0871 2A            mov b, [d]
0742   0872             ; --- START RELATIONAL
0743   0872 D7            push a
0744   0873 11            mov a, b
0745   0874 FA 08 00      lea d, [bp + 8] ; $size
0746   0877 2A            mov b, [d]
0747   0878 B0            cmp a, b
0748   0879 FD 73         slt ; < (signed)
0749   087B E4            pop a
0750   087C             ; --- END RELATIONAL
0751   087C C0 00 00      cmp b, 0
0752   087F C6 A8 08      je _for7_exit
0753   0882             _for7_block:
0754   0882             ; *(s+i) = c; 
0755   0882 FA 05 00      lea d, [bp + 5] ; $s
0756   0885 2A            mov b, [d]
0757   0886             ; --- START TERMS
0758   0886 D7            push a
0759   0887 11            mov a, b
0760   0888 FA FF FF      lea d, [bp + -1] ; $i
0761   088B 2A            mov b, [d]
0762   088C 56            add b, a
0763   088D E4            pop a
0764   088E             ; --- END TERMS
0765   088E D8            push b
0766   088F FA 07 00      lea d, [bp + 7] ; $c
0767   0892 32            mov bl, [d]
0768   0893 A7 00         mov bh, 0
0769   0895 E7            pop d
0770   0896 FD 3E         mov [d], bl
0771   0898             _for7_update:
0772   0898 FA FF FF      lea d, [bp + -1] ; $i
0773   089B 2A            mov b, [d]
0774   089C FD 77         inc b
0775   089E FA FF FF      lea d, [bp + -1] ; $i
0776   08A1 FD 43         mov [d], b
0777   08A3 FD 7D         dec b
0778   08A5 0A 6E 08      jmp _for7_cond
0779   08A8             _for7_exit:
0780   08A8             ; return s; 
0781   08A8 FA 05 00      lea d, [bp + 5] ; $s
0782   08AB 2A            mov b, [d]
0783   08AC F9            leave
0784   08AD 09            ret
0785   08AE             
0786   08AE             atoi:
0787   08AE F8 00 00      enter 0 ; (push bp; mov bp, sp)
0788   08B1             ; int result = 0;  // Initialize result 
0789   08B1 52 02 00      sub sp, 2
0790   08B4             ; --- START LOCAL VAR INITIALIZATION
0791   08B4 FA FF FF      lea d, [bp + -1] ; $result
0792   08B7 DA            push d
0793   08B8 26 00 00      mov b, $0
0794   08BB E7            pop d
0795   08BC FD 43         mov [d], b
0796   08BE             ; --- END LOCAL VAR INITIALIZATION
0797   08BE             ; int sign = 1;    // Initialize sign as positive 
0798   08BE 52 02 00      sub sp, 2
0799   08C1             ; --- START LOCAL VAR INITIALIZATION
0800   08C1 FA FD FF      lea d, [bp + -3] ; $sign
0801   08C4 DA            push d
0802   08C5 26 01 00      mov b, $1
0803   08C8 E7            pop d
0804   08C9 FD 43         mov [d], b
0805   08CB             ; --- END LOCAL VAR INITIALIZATION
0806   08CB             ; while (*str == ' ') str++; 
0807   08CB             _while8_cond:
0808   08CB FA 05 00      lea d, [bp + 5] ; $str
0809   08CE 2A            mov b, [d]
0810   08CF 74            mov d, b
0811   08D0 32            mov bl, [d]
0812   08D1 A7 00         mov bh, 0
0813   08D3             ; --- START RELATIONAL
0814   08D3 D7            push a
0815   08D4 11            mov a, b
0816   08D5 26 20 00      mov b, $20
0817   08D8 B0            cmp a, b
0818   08D9 FD 71         seq ; ==
0819   08DB E4            pop a
0820   08DC             ; --- END RELATIONAL
0821   08DC C0 00 00      cmp b, 0
0822   08DF C6 F2 08      je _while8_exit
0823   08E2             _while8_block:
0824   08E2             ; str++; 
0825   08E2 FA 05 00      lea d, [bp + 5] ; $str
0826   08E5 2A            mov b, [d]
0827   08E6 FD 77         inc b
0828   08E8 FA 05 00      lea d, [bp + 5] ; $str
0829   08EB FD 43         mov [d], b
0830   08ED FD 7D         dec b
0831   08EF 0A CB 08      jmp _while8_cond
0832   08F2             _while8_exit:
0833   08F2             ; if (*str == '-' || *str == '+') { 
0834   08F2             _if9_cond:
0835   08F2 FA 05 00      lea d, [bp + 5] ; $str
0836   08F5 2A            mov b, [d]
0837   08F6 74            mov d, b
0838   08F7 32            mov bl, [d]
0839   08F8 A7 00         mov bh, 0
0840   08FA             ; --- START RELATIONAL
0841   08FA D7            push a
0842   08FB 11            mov a, b
0843   08FC 26 2D 00      mov b, $2d
0844   08FF B0            cmp a, b
0845   0900 FD 71         seq ; ==
0846   0902 E4            pop a
0847   0903             ; --- END RELATIONAL
0848   0903             ; --- START LOGICAL OR
0849   0903 D7            push a
0850   0904 11            mov a, b
0851   0905 FA 05 00      lea d, [bp + 5] ; $str
0852   0908 2A            mov b, [d]
0853   0909 74            mov d, b
0854   090A 32            mov bl, [d]
0855   090B A7 00         mov bh, 0
0856   090D             ; --- START RELATIONAL
0857   090D D7            push a
0858   090E 11            mov a, b
0859   090F 26 2B 00      mov b, $2b
0860   0912 B0            cmp a, b
0861   0913 FD 71         seq ; ==
0862   0915 E4            pop a
0863   0916             ; --- END RELATIONAL
0864   0916 FD A8         sor a, b ; ||
0865   0918 E4            pop a
0866   0919             ; --- END LOGICAL OR
0867   0919 C0 00 00      cmp b, 0
0868   091C C6 55 09      je _if9_exit
0869   091F             _if9_true:
0870   091F             ; if (*str == '-') sign = -1; 
0871   091F             _if10_cond:
0872   091F FA 05 00      lea d, [bp + 5] ; $str
0873   0922 2A            mov b, [d]
0874   0923 74            mov d, b
0875   0924 32            mov bl, [d]
0876   0925 A7 00         mov bh, 0
0877   0927             ; --- START RELATIONAL
0878   0927 D7            push a
0879   0928 11            mov a, b
0880   0929 26 2D 00      mov b, $2d
0881   092C B0            cmp a, b
0882   092D FD 71         seq ; ==
0883   092F E4            pop a
0884   0930             ; --- END RELATIONAL
0885   0930 C0 00 00      cmp b, 0
0886   0933 C6 45 09      je _if10_exit
0887   0936             _if10_true:
0888   0936             ; sign = -1; 
0889   0936 FA FD FF      lea d, [bp + -3] ; $sign
0890   0939 DA            push d
0891   093A 26 01 00      mov b, $1
0892   093D FD 97         neg b
0893   093F E7            pop d
0894   0940 FD 43         mov [d], b
0895   0942 0A 45 09      jmp _if10_exit
0896   0945             _if10_exit:
0897   0945             ; str++; 
0898   0945 FA 05 00      lea d, [bp + 5] ; $str
0899   0948 2A            mov b, [d]
0900   0949 FD 77         inc b
0901   094B FA 05 00      lea d, [bp + 5] ; $str
0902   094E FD 43         mov [d], b
0903   0950 FD 7D         dec b
0904   0952 0A 55 09      jmp _if9_exit
0905   0955             _if9_exit:
0906   0955             ; while (*str >= '0' && *str <= '9') { 
0907   0955             _while11_cond:
0908   0955 FA 05 00      lea d, [bp + 5] ; $str
0909   0958 2A            mov b, [d]
0910   0959 74            mov d, b
0911   095A 32            mov bl, [d]
0912   095B A7 00         mov bh, 0
0913   095D             ; --- START RELATIONAL
0914   095D D7            push a
0915   095E 11            mov a, b
0916   095F 26 30 00      mov b, $30
0917   0962 B0            cmp a, b
0918   0963 FD 82         sgeu ; >= (unsigned)
0919   0965 E4            pop a
0920   0966             ; --- END RELATIONAL
0921   0966             ; --- START LOGICAL AND
0922   0966 D7            push a
0923   0967 11            mov a, b
0924   0968 FA 05 00      lea d, [bp + 5] ; $str
0925   096B 2A            mov b, [d]
0926   096C 74            mov d, b
0927   096D 32            mov bl, [d]
0928   096E A7 00         mov bh, 0
0929   0970             ; --- START RELATIONAL
0930   0970 D7            push a
0931   0971 11            mov a, b
0932   0972 26 39 00      mov b, $39
0933   0975 B0            cmp a, b
0934   0976 FD 76         sleu ; <= (unsigned)
0935   0978 E4            pop a
0936   0979             ; --- END RELATIONAL
0937   0979 FD A7         sand a, b
0938   097B E4            pop a
0939   097C             ; --- END LOGICAL AND
0940   097C C0 00 00      cmp b, 0
0941   097F C6 BA 09      je _while11_exit
0942   0982             _while11_block:
0943   0982             ; result = result * 10 + (*str - '0'); 
0944   0982 FA FF FF      lea d, [bp + -1] ; $result
0945   0985 DA            push d
0946   0986 FA FF FF      lea d, [bp + -1] ; $result
0947   0989 2A            mov b, [d]
0948   098A             ; --- START FACTORS
0949   098A D7            push a
0950   098B 11            mov a, b
0951   098C 26 0A 00      mov b, $a
0952   098F AC            mul a, b ; *
0953   0990 11            mov a, b
0954   0991 27            mov b, a
0955   0992 E4            pop a
0956   0993             ; --- END FACTORS
0957   0993             ; --- START TERMS
0958   0993 D7            push a
0959   0994 11            mov a, b
0960   0995 FA 05 00      lea d, [bp + 5] ; $str
0961   0998 2A            mov b, [d]
0962   0999 74            mov d, b
0963   099A 32            mov bl, [d]
0964   099B A7 00         mov bh, 0
0965   099D             ; --- START TERMS
0966   099D D7            push a
0967   099E 11            mov a, b
0968   099F 26 30 00      mov b, $30
0969   09A2 60            sub a, b
0970   09A3 27            mov b, a
0971   09A4 E4            pop a
0972   09A5             ; --- END TERMS
0973   09A5 56            add b, a
0974   09A6 E4            pop a
0975   09A7             ; --- END TERMS
0976   09A7 E7            pop d
0977   09A8 FD 43         mov [d], b
0978   09AA             ; str++; 
0979   09AA FA 05 00      lea d, [bp + 5] ; $str
0980   09AD 2A            mov b, [d]
0981   09AE FD 77         inc b
0982   09B0 FA 05 00      lea d, [bp + 5] ; $str
0983   09B3 FD 43         mov [d], b
0984   09B5 FD 7D         dec b
0985   09B7 0A 55 09      jmp _while11_cond
0986   09BA             _while11_exit:
0987   09BA             ; return sign * result; 
0988   09BA FA FD FF      lea d, [bp + -3] ; $sign
0989   09BD 2A            mov b, [d]
0990   09BE             ; --- START FACTORS
0991   09BE D7            push a
0992   09BF 11            mov a, b
0993   09C0 FA FF FF      lea d, [bp + -1] ; $result
0994   09C3 2A            mov b, [d]
0995   09C4 AC            mul a, b ; *
0996   09C5 11            mov a, b
0997   09C6 27            mov b, a
0998   09C7 E4            pop a
0999   09C8             ; --- END FACTORS
1000   09C8 F9            leave
1001   09C9 09            ret
1002   09CA             
1003   09CA             rand:
1004   09CA F8 00 00      enter 0 ; (push bp; mov bp, sp)
1005   09CD             ; int  sec; 
1006   09CD 52 02 00      sub sp, 2
1007   09D0             
1008   09D0             ; --- BEGIN INLINE ASM SEGMENT
1009   09D0 19 00         mov al, 0
1010   09D2 05 01         syscall sys_rtc					
1011   09D4 1A            mov al, ah
1012   09D5 FA FF FF      lea d, [bp + -1] ; $sec
1013   09D8 1E            mov al, [d]
1014   09D9 22 00         mov ah, 0
1015   09DB             ; --- END INLINE ASM SEGMENT
1016   09DB             
1017   09DB             ; return sec; 
1018   09DB FA FF FF      lea d, [bp + -1] ; $sec
1019   09DE 2A            mov b, [d]
1020   09DF F9            leave
1021   09E0 09            ret
1022   09E1             
1023   09E1             alloc:
1024   09E1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1025   09E4             ; heap_top = heap_top + bytes; 
1026   09E4 3B 4C 24      mov d, _heap_top ; $heap_top
1027   09E7 DA            push d
1028   09E8 3B 4C 24      mov d, _heap_top ; $heap_top
1029   09EB 2A            mov b, [d]
1030   09EC             ; --- START TERMS
1031   09EC D7            push a
1032   09ED 11            mov a, b
1033   09EE FA 05 00      lea d, [bp + 5] ; $bytes
1034   09F1 2A            mov b, [d]
1035   09F2 56            add b, a
1036   09F3 E4            pop a
1037   09F4             ; --- END TERMS
1038   09F4 E7            pop d
1039   09F5 FD 43         mov [d], b
1040   09F7             ; return heap_top - bytes; 
1041   09F7 3B 4C 24      mov d, _heap_top ; $heap_top
1042   09FA 2A            mov b, [d]
1043   09FB             ; --- START TERMS
1044   09FB D7            push a
1045   09FC 11            mov a, b
1046   09FD FA 05 00      lea d, [bp + 5] ; $bytes
1047   0A00 2A            mov b, [d]
1048   0A01 60            sub a, b
1049   0A02 27            mov b, a
1050   0A03 E4            pop a
1051   0A04             ; --- END TERMS
1052   0A04 F9            leave
1053   0A05 09            ret
1054   0A06             
1055   0A06             free:
1056   0A06 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1057   0A09             ; return heap_top = heap_top - bytes; 
1058   0A09 3B 4C 24      mov d, _heap_top ; $heap_top
1059   0A0C DA            push d
1060   0A0D 3B 4C 24      mov d, _heap_top ; $heap_top
1061   0A10 2A            mov b, [d]
1062   0A11             ; --- START TERMS
1063   0A11 D7            push a
1064   0A12 11            mov a, b
1065   0A13 FA 05 00      lea d, [bp + 5] ; $bytes
1066   0A16 2A            mov b, [d]
1067   0A17 60            sub a, b
1068   0A18 27            mov b, a
1069   0A19 E4            pop a
1070   0A1A             ; --- END TERMS
1071   0A1A E7            pop d
1072   0A1B FD 43         mov [d], b
1073   0A1D F9            leave
1074   0A1E 09            ret
1075   0A1F             
1076   0A1F             fopen:
1077   0A1F F8 00 00      enter 0 ; (push bp; mov bp, sp)
1078   0A22             ; FILE *fp; 
1079   0A22 52 02 00      sub sp, 2
1080   0A25             ; static int max_handle = 0; 
1081   0A25 52 02 00      sub sp, 2
1082   0A28             ; fp = alloc(sizeof(FILE)); 
1083   0A28 FA FF FF      lea d, [bp + -1] ; $fp
1084   0A2B DA            push d
1085   0A2C 26 04 01      mov b, 260
1086   0A2F FD AB         swp b
1087   0A31 D8            push b
1088   0A32 07 E1 09      call alloc
1089   0A35 51 02 00      add sp, 2
1090   0A38 E7            pop d
1091   0A39 FD 43         mov [d], b
1092   0A3B             ; strcpy(fp->filename, filename); 
1093   0A3B FA 05 00      lea d, [bp + 5] ; $filename
1094   0A3E 2A            mov b, [d]
1095   0A3F FD AB         swp b
1096   0A41 D8            push b
1097   0A42 FA FF FF      lea d, [bp + -1] ; $fp
1098   0A45 FD 2A         mov d, [d]
1099   0A47 58 02 00      add d, 2
1100   0A4A 2D            mov b, d
1101   0A4B FD AB         swp b
1102   0A4D D8            push b
1103   0A4E 07 94 06      call strcpy
1104   0A51 51 04 00      add sp, 4
1105   0A54             ; fp->handle = max_handle; 
1106   0A54 FA FF FF      lea d, [bp + -1] ; $fp
1107   0A57 FD 2A         mov d, [d]
1108   0A59 58 00 00      add d, 0
1109   0A5C DA            push d
1110   0A5D 3B A7 23      mov d, st_fopen_max_handle ; static max_handle
1111   0A60 2A            mov b, [d]
1112   0A61 E7            pop d
1113   0A62 FD 43         mov [d], b
1114   0A64             ; fp->mode = mode; 
1115   0A64 FA FF FF      lea d, [bp + -1] ; $fp
1116   0A67 FD 2A         mov d, [d]
1117   0A69 58 02 01      add d, 258
1118   0A6C DA            push d
1119   0A6D FA 07 00      lea d, [bp + 7] ; $mode
1120   0A70 32            mov bl, [d]
1121   0A71 A7 00         mov bh, 0
1122   0A73 E7            pop d
1123   0A74 FD 3E         mov [d], bl
1124   0A76             ; fp->loc = 0; 
1125   0A76 FA FF FF      lea d, [bp + -1] ; $fp
1126   0A79 FD 2A         mov d, [d]
1127   0A7B 58 03 01      add d, 259
1128   0A7E DA            push d
1129   0A7F 26 00 00      mov b, $0
1130   0A82 E7            pop d
1131   0A83 FD 3E         mov [d], bl
1132   0A85             ; max_handle++; 
1133   0A85 3B A7 23      mov d, st_fopen_max_handle ; static max_handle
1134   0A88 2A            mov b, [d]
1135   0A89 FD 77         inc b
1136   0A8B 3B A7 23      mov d, st_fopen_max_handle ; static max_handle
1137   0A8E FD 43         mov [d], b
1138   0A90 FD 7D         dec b
1139   0A92 F9            leave
1140   0A93 09            ret
1141   0A94             
1142   0A94             fclose:
1143   0A94 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1144   0A97             ; free(sizeof(FILE)); 
1145   0A97 26 04 01      mov b, 260
1146   0A9A FD AB         swp b
1147   0A9C D8            push b
1148   0A9D 07 06 0A      call free
1149   0AA0 51 02 00      add sp, 2
1150   0AA3 F9            leave
1151   0AA4 09            ret
1152   0AA5             
1153   0AA5             printf:
1154   0AA5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1155   0AA8             ; char *p, *format_p; 
1156   0AA8 52 02 00      sub sp, 2
1157   0AAB 52 02 00      sub sp, 2
1158   0AAE             ; format_p = format; 
1159   0AAE FA FD FF      lea d, [bp + -3] ; $format_p
1160   0AB1 DA            push d
1161   0AB2 FA 05 00      lea d, [bp + 5] ; $format
1162   0AB5 2A            mov b, [d]
1163   0AB6 E7            pop d
1164   0AB7 FD 43         mov [d], b
1165   0AB9             ; p = &format + 2; 
1166   0AB9 FA FF FF      lea d, [bp + -1] ; $p
1167   0ABC DA            push d
1168   0ABD FA 05 00      lea d, [bp + 5] ; $format
1169   0AC0 2D            mov b, d
1170   0AC1             ; --- START TERMS
1171   0AC1 D7            push a
1172   0AC2 11            mov a, b
1173   0AC3 26 02 00      mov b, $2
1174   0AC6 56            add b, a
1175   0AC7 E4            pop a
1176   0AC8             ; --- END TERMS
1177   0AC8 E7            pop d
1178   0AC9 FD 43         mov [d], b
1179   0ACB             ; for(;;){ 
1180   0ACB             _for12_init:
1181   0ACB             _for12_cond:
1182   0ACB             _for12_block:
1183   0ACB             ; if(!*format_p) break; 
1184   0ACB             _if13_cond:
1185   0ACB FA FD FF      lea d, [bp + -3] ; $format_p
1186   0ACE 2A            mov b, [d]
1187   0ACF 74            mov d, b
1188   0AD0 32            mov bl, [d]
1189   0AD1 A7 00         mov bh, 0
1190   0AD3 C0 00 00      cmp b, 0
1191   0AD6 FD 71         seq ; !
1192   0AD8 C0 00 00      cmp b, 0
1193   0ADB C6 E4 0A      je _if13_else
1194   0ADE             _if13_true:
1195   0ADE             ; break; 
1196   0ADE 0A 0B 0D      jmp _for12_exit ; for break
1197   0AE1 0A 08 0D      jmp _if13_exit
1198   0AE4             _if13_else:
1199   0AE4             ; if(*format_p == '%'){ 
1200   0AE4             _if14_cond:
1201   0AE4 FA FD FF      lea d, [bp + -3] ; $format_p
1202   0AE7 2A            mov b, [d]
1203   0AE8 74            mov d, b
1204   0AE9 32            mov bl, [d]
1205   0AEA A7 00         mov bh, 0
1206   0AEC             ; --- START RELATIONAL
1207   0AEC D7            push a
1208   0AED 11            mov a, b
1209   0AEE 26 25 00      mov b, $25
1210   0AF1 B0            cmp a, b
1211   0AF2 FD 71         seq ; ==
1212   0AF4 E4            pop a
1213   0AF5             ; --- END RELATIONAL
1214   0AF5 C0 00 00      cmp b, 0
1215   0AF8 C6 EC 0C      je _if14_else
1216   0AFB             _if14_true:
1217   0AFB             ; format_p++; 
1218   0AFB FA FD FF      lea d, [bp + -3] ; $format_p
1219   0AFE 2A            mov b, [d]
1220   0AFF FD 77         inc b
1221   0B01 FA FD FF      lea d, [bp + -3] ; $format_p
1222   0B04 FD 43         mov [d], b
1223   0B06 FD 7D         dec b
1224   0B08             ; switch(*format_p){ 
1225   0B08             _switch15_expr:
1226   0B08 FA FD FF      lea d, [bp + -3] ; $format_p
1227   0B0B 2A            mov b, [d]
1228   0B0C 74            mov d, b
1229   0B0D 32            mov bl, [d]
1230   0B0E A7 00         mov bh, 0
1231   0B10             _switch15_comparisons:
1232   0B10 C1 6C         cmp bl, $6c
1233   0B12 C6 3E 0B      je _switch15_case0
1234   0B15 C1 4C         cmp bl, $4c
1235   0B17 C6 3E 0B      je _switch15_case1
1236   0B1A C1 64         cmp bl, $64
1237   0B1C C6 2C 0C      je _switch15_case2
1238   0B1F C1 69         cmp bl, $69
1239   0B21 C6 2C 0C      je _switch15_case3
1240   0B24 C1 75         cmp bl, $75
1241   0B26 C6 50 0C      je _switch15_case4
1242   0B29 C1 78         cmp bl, $78
1243   0B2B C6 74 0C      je _switch15_case5
1244   0B2E C1 63         cmp bl, $63
1245   0B30 C6 92 0C      je _switch15_case6
1246   0B33 C1 73         cmp bl, $73
1247   0B35 C6 B1 0C      je _switch15_case7
1248   0B38 0A D0 0C      jmp _switch15_default
1249   0B3B 0A DC 0C      jmp _switch15_exit
1250   0B3E             _switch15_case0:
1251   0B3E             _switch15_case1:
1252   0B3E             ; format_p++; 
1253   0B3E FA FD FF      lea d, [bp + -3] ; $format_p
1254   0B41 2A            mov b, [d]
1255   0B42 FD 77         inc b
1256   0B44 FA FD FF      lea d, [bp + -3] ; $format_p
1257   0B47 FD 43         mov [d], b
1258   0B49 FD 7D         dec b
1259   0B4B             ; if(*format_p == 'd' || *format_p == 'i') 
1260   0B4B             _if16_cond:
1261   0B4B FA FD FF      lea d, [bp + -3] ; $format_p
1262   0B4E 2A            mov b, [d]
1263   0B4F 74            mov d, b
1264   0B50 32            mov bl, [d]
1265   0B51 A7 00         mov bh, 0
1266   0B53             ; --- START RELATIONAL
1267   0B53 D7            push a
1268   0B54 11            mov a, b
1269   0B55 26 64 00      mov b, $64
1270   0B58 B0            cmp a, b
1271   0B59 FD 71         seq ; ==
1272   0B5B E4            pop a
1273   0B5C             ; --- END RELATIONAL
1274   0B5C             ; --- START LOGICAL OR
1275   0B5C D7            push a
1276   0B5D 11            mov a, b
1277   0B5E FA FD FF      lea d, [bp + -3] ; $format_p
1278   0B61 2A            mov b, [d]
1279   0B62 74            mov d, b
1280   0B63 32            mov bl, [d]
1281   0B64 A7 00         mov bh, 0
1282   0B66             ; --- START RELATIONAL
1283   0B66 D7            push a
1284   0B67 11            mov a, b
1285   0B68 26 69 00      mov b, $69
1286   0B6B B0            cmp a, b
1287   0B6C FD 71         seq ; ==
1288   0B6E E4            pop a
1289   0B6F             ; --- END RELATIONAL
1290   0B6F FD A8         sor a, b ; ||
1291   0B71 E4            pop a
1292   0B72             ; --- END LOGICAL OR
1293   0B72 C0 00 00      cmp b, 0
1294   0B75 C6 9A 0B      je _if16_else
1295   0B78             _if16_true:
1296   0B78             ; print_signed_long(*(long *)p); 
1297   0B78 FA FF FF      lea d, [bp + -1] ; $p
1298   0B7B 2A            mov b, [d]
1299   0B7C AB            snex b
1300   0B7D FD 39         mov c, b
1301   0B7F 74            mov d, b
1302   0B80 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1303   0B83 FD 39         mov c, b ; And place it into C
1304   0B85 2A            mov b, [d] ; Lower Word in B
1305   0B86 FD 79         mov g, b
1306   0B88 28            mov b, c
1307   0B89 FD AB         swp b
1308   0B8B D8            push b
1309   0B8C FD 27         mov b, g
1310   0B8E FD AB         swp b
1311   0B90 D8            push b
1312   0B91 07 FC 14      call print_signed_long
1313   0B94 51 04 00      add sp, 4
1314   0B97 0A 17 0C      jmp _if16_exit
1315   0B9A             _if16_else:
1316   0B9A             ; if(*format_p == 'u') 
1317   0B9A             _if17_cond:
1318   0B9A FA FD FF      lea d, [bp + -3] ; $format_p
1319   0B9D 2A            mov b, [d]
1320   0B9E 74            mov d, b
1321   0B9F 32            mov bl, [d]
1322   0BA0 A7 00         mov bh, 0
1323   0BA2             ; --- START RELATIONAL
1324   0BA2 D7            push a
1325   0BA3 11            mov a, b
1326   0BA4 26 75 00      mov b, $75
1327   0BA7 B0            cmp a, b
1328   0BA8 FD 71         seq ; ==
1329   0BAA E4            pop a
1330   0BAB             ; --- END RELATIONAL
1331   0BAB C0 00 00      cmp b, 0
1332   0BAE C6 D5 0B      je _if17_else
1333   0BB1             _if17_true:
1334   0BB1             ; print_unsigned_long(*(unsigned long *)p); 
1335   0BB1 FA FF FF      lea d, [bp + -1] ; $p
1336   0BB4 2A            mov b, [d]
1337   0BB5 A7 00         mov bh, 0
1338   0BB7 38 00 00      mov c, 0
1339   0BBA 74            mov d, b
1340   0BBB 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1341   0BBE FD 39         mov c, b ; And place it into C
1342   0BC0 2A            mov b, [d] ; Lower Word in B
1343   0BC1 FD 79         mov g, b
1344   0BC3 28            mov b, c
1345   0BC4 FD AB         swp b
1346   0BC6 D8            push b
1347   0BC7 FD 27         mov b, g
1348   0BC9 FD AB         swp b
1349   0BCB D8            push b
1350   0BCC 07 3C 18      call print_unsigned_long
1351   0BCF 51 04 00      add sp, 4
1352   0BD2 0A 17 0C      jmp _if17_exit
1353   0BD5             _if17_else:
1354   0BD5             ; if(*format_p == 'x') 
1355   0BD5             _if18_cond:
1356   0BD5 FA FD FF      lea d, [bp + -3] ; $format_p
1357   0BD8 2A            mov b, [d]
1358   0BD9 74            mov d, b
1359   0BDA 32            mov bl, [d]
1360   0BDB A7 00         mov bh, 0
1361   0BDD             ; --- START RELATIONAL
1362   0BDD D7            push a
1363   0BDE 11            mov a, b
1364   0BDF 26 78 00      mov b, $78
1365   0BE2 B0            cmp a, b
1366   0BE3 FD 71         seq ; ==
1367   0BE5 E4            pop a
1368   0BE6             ; --- END RELATIONAL
1369   0BE6 C0 00 00      cmp b, 0
1370   0BE9 C6 0B 0C      je _if18_else
1371   0BEC             _if18_true:
1372   0BEC             ; printx32(*(long int *)p); 
1373   0BEC FA FF FF      lea d, [bp + -1] ; $p
1374   0BEF 2A            mov b, [d]
1375   0BF0 74            mov d, b
1376   0BF1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1377   0BF4 FD 39         mov c, b ; And place it into C
1378   0BF6 2A            mov b, [d] ; Lower Word in B
1379   0BF7 FD 79         mov g, b
1380   0BF9 28            mov b, c
1381   0BFA FD AB         swp b
1382   0BFC D8            push b
1383   0BFD FD 27         mov b, g
1384   0BFF FD AB         swp b
1385   0C01 D8            push b
1386   0C02 07 71 12      call printx32
1387   0C05 51 04 00      add sp, 4
1388   0C08 0A 17 0C      jmp _if18_exit
1389   0C0B             _if18_else:
1390   0C0B             ; err("Unexpected format in printf."); 
1391   0C0B 26 08 24      mov b, _s9 ; "Unexpected format in printf."
1392   0C0E FD AB         swp b
1393   0C10 D8            push b
1394   0C11 07 5F 12      call err
1395   0C14 51 02 00      add sp, 2
1396   0C17             _if18_exit:
1397   0C17             _if17_exit:
1398   0C17             _if16_exit:
1399   0C17             ; p = p + 4; 
1400   0C17 FA FF FF      lea d, [bp + -1] ; $p
1401   0C1A DA            push d
1402   0C1B FA FF FF      lea d, [bp + -1] ; $p
1403   0C1E 2A            mov b, [d]
1404   0C1F             ; --- START TERMS
1405   0C1F D7            push a
1406   0C20 11            mov a, b
1407   0C21 26 04 00      mov b, $4
1408   0C24 56            add b, a
1409   0C25 E4            pop a
1410   0C26             ; --- END TERMS
1411   0C26 E7            pop d
1412   0C27 FD 43         mov [d], b
1413   0C29             ; break; 
1414   0C29 0A DC 0C      jmp _switch15_exit ; case break
1415   0C2C             _switch15_case2:
1416   0C2C             _switch15_case3:
1417   0C2C             ; print_signed(*(int*)p); 
1418   0C2C FA FF FF      lea d, [bp + -1] ; $p
1419   0C2F 2A            mov b, [d]
1420   0C30 74            mov d, b
1421   0C31 2A            mov b, [d]
1422   0C32 FD AB         swp b
1423   0C34 D8            push b
1424   0C35 07 05 14      call print_signed
1425   0C38 51 02 00      add sp, 2
1426   0C3B             ; p = p + 2; 
1427   0C3B FA FF FF      lea d, [bp + -1] ; $p
1428   0C3E DA            push d
1429   0C3F FA FF FF      lea d, [bp + -1] ; $p
1430   0C42 2A            mov b, [d]
1431   0C43             ; --- START TERMS
1432   0C43 D7            push a
1433   0C44 11            mov a, b
1434   0C45 26 02 00      mov b, $2
1435   0C48 56            add b, a
1436   0C49 E4            pop a
1437   0C4A             ; --- END TERMS
1438   0C4A E7            pop d
1439   0C4B FD 43         mov [d], b
1440   0C4D             ; break; 
1441   0C4D 0A DC 0C      jmp _switch15_exit ; case break
1442   0C50             _switch15_case4:
1443   0C50             ; print_unsigned(*(unsigned int*)p); 
1444   0C50 FA FF FF      lea d, [bp + -1] ; $p
1445   0C53 2A            mov b, [d]
1446   0C54 74            mov d, b
1447   0C55 2A            mov b, [d]
1448   0C56 FD AB         swp b
1449   0C58 D8            push b
1450   0C59 07 41 1B      call print_unsigned
1451   0C5C 51 02 00      add sp, 2
1452   0C5F             ; p = p + 2; 
1453   0C5F FA FF FF      lea d, [bp + -1] ; $p
1454   0C62 DA            push d
1455   0C63 FA FF FF      lea d, [bp + -1] ; $p
1456   0C66 2A            mov b, [d]
1457   0C67             ; --- START TERMS
1458   0C67 D7            push a
1459   0C68 11            mov a, b
1460   0C69 26 02 00      mov b, $2
1461   0C6C 56            add b, a
1462   0C6D E4            pop a
1463   0C6E             ; --- END TERMS
1464   0C6E E7            pop d
1465   0C6F FD 43         mov [d], b
1466   0C71             ; break; 
1467   0C71 0A DC 0C      jmp _switch15_exit ; case break
1468   0C74             _switch15_case5:
1469   0C74             
1470   0C74             ; --- BEGIN INLINE ASM SEGMENT
1471   0C74 FA FF FF      lea d, [bp + -1] ; $p
1472   0C77 FD 2A         mov d, [d]
1473   0C79 2A            mov b, [d]
1474   0C7A 07 06 21      call print_u16x
1475   0C7D             ; --- END INLINE ASM SEGMENT
1476   0C7D             
1477   0C7D             ; p = p + 2; 
1478   0C7D FA FF FF      lea d, [bp + -1] ; $p
1479   0C80 DA            push d
1480   0C81 FA FF FF      lea d, [bp + -1] ; $p
1481   0C84 2A            mov b, [d]
1482   0C85             ; --- START TERMS
1483   0C85 D7            push a
1484   0C86 11            mov a, b
1485   0C87 26 02 00      mov b, $2
1486   0C8A 56            add b, a
1487   0C8B E4            pop a
1488   0C8C             ; --- END TERMS
1489   0C8C E7            pop d
1490   0C8D FD 43         mov [d], b
1491   0C8F             ; break; 
1492   0C8F 0A DC 0C      jmp _switch15_exit ; case break
1493   0C92             _switch15_case6:
1494   0C92             
1495   0C92             ; --- BEGIN INLINE ASM SEGMENT
1496   0C92 FA FF FF      lea d, [bp + -1] ; $p
1497   0C95 FD 2A         mov d, [d]
1498   0C97 1E            mov al, [d]
1499   0C98 23            mov ah, al
1500   0C99 07 64 1F      call _putchar
1501   0C9C             ; --- END INLINE ASM SEGMENT
1502   0C9C             
1503   0C9C             ; p = p + 1; 
1504   0C9C FA FF FF      lea d, [bp + -1] ; $p
1505   0C9F DA            push d
1506   0CA0 FA FF FF      lea d, [bp + -1] ; $p
1507   0CA3 2A            mov b, [d]
1508   0CA4             ; --- START TERMS
1509   0CA4 D7            push a
1510   0CA5 11            mov a, b
1511   0CA6 26 01 00      mov b, $1
1512   0CA9 56            add b, a
1513   0CAA E4            pop a
1514   0CAB             ; --- END TERMS
1515   0CAB E7            pop d
1516   0CAC FD 43         mov [d], b
1517   0CAE             ; break; 
1518   0CAE 0A DC 0C      jmp _switch15_exit ; case break
1519   0CB1             _switch15_case7:
1520   0CB1             
1521   0CB1             ; --- BEGIN INLINE ASM SEGMENT
1522   0CB1 FA FF FF      lea d, [bp + -1] ; $p
1523   0CB4 FD 2A         mov d, [d]
1524   0CB6 FD 2A         mov d, [d]
1525   0CB8 07 AE 20      call _puts
1526   0CBB             ; --- END INLINE ASM SEGMENT
1527   0CBB             
1528   0CBB             ; p = p + 2; 
1529   0CBB FA FF FF      lea d, [bp + -1] ; $p
1530   0CBE DA            push d
1531   0CBF FA FF FF      lea d, [bp + -1] ; $p
1532   0CC2 2A            mov b, [d]
1533   0CC3             ; --- START TERMS
1534   0CC3 D7            push a
1535   0CC4 11            mov a, b
1536   0CC5 26 02 00      mov b, $2
1537   0CC8 56            add b, a
1538   0CC9 E4            pop a
1539   0CCA             ; --- END TERMS
1540   0CCA E7            pop d
1541   0CCB FD 43         mov [d], b
1542   0CCD             ; break; 
1543   0CCD 0A DC 0C      jmp _switch15_exit ; case break
1544   0CD0             _switch15_default:
1545   0CD0             ; print("Error: Unknown argument type.\n"); 
1546   0CD0 26 25 24      mov b, _s10 ; "Error: Unknown argument type.\n"
1547   0CD3 FD AB         swp b
1548   0CD5 D8            push b
1549   0CD6 07 B5 1D      call print
1550   0CD9 51 02 00      add sp, 2
1551   0CDC             _switch15_exit:
1552   0CDC             ; format_p++; 
1553   0CDC FA FD FF      lea d, [bp + -3] ; $format_p
1554   0CDF 2A            mov b, [d]
1555   0CE0 FD 77         inc b
1556   0CE2 FA FD FF      lea d, [bp + -3] ; $format_p
1557   0CE5 FD 43         mov [d], b
1558   0CE7 FD 7D         dec b
1559   0CE9 0A 08 0D      jmp _if14_exit
1560   0CEC             _if14_else:
1561   0CEC             ; putchar(*format_p); 
1562   0CEC FA FD FF      lea d, [bp + -3] ; $format_p
1563   0CEF 2A            mov b, [d]
1564   0CF0 74            mov d, b
1565   0CF1 32            mov bl, [d]
1566   0CF2 A7 00         mov bh, 0
1567   0CF4 DD            push bl
1568   0CF5 07 6D 1D      call putchar
1569   0CF8 51 01 00      add sp, 1
1570   0CFB             ; format_p++; 
1571   0CFB FA FD FF      lea d, [bp + -3] ; $format_p
1572   0CFE 2A            mov b, [d]
1573   0CFF FD 77         inc b
1574   0D01 FA FD FF      lea d, [bp + -3] ; $format_p
1575   0D04 FD 43         mov [d], b
1576   0D06 FD 7D         dec b
1577   0D08             _if14_exit:
1578   0D08             _if13_exit:
1579   0D08             _for12_update:
1580   0D08 0A CB 0A      jmp _for12_cond
1581   0D0B             _for12_exit:
1582   0D0B F9            leave
1583   0D0C 09            ret
1584   0D0D             
1585   0D0D             scanf:
1586   0D0D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1587   0D10             ; char *p, *format_p; 
1588   0D10 52 02 00      sub sp, 2
1589   0D13 52 02 00      sub sp, 2
1590   0D16             ; char c; 
1591   0D16 52 01 00      sub sp, 1
1592   0D19             ; int i; 
1593   0D19 52 02 00      sub sp, 2
1594   0D1C             ; char input_string[  512                    ]; 
1595   0D1C 52 00 02      sub sp, 512
1596   0D1F             ; format_p = format; 
1597   0D1F FA FD FF      lea d, [bp + -3] ; $format_p
1598   0D22 DA            push d
1599   0D23 FA 05 00      lea d, [bp + 5] ; $format
1600   0D26 2A            mov b, [d]
1601   0D27 E7            pop d
1602   0D28 FD 43         mov [d], b
1603   0D2A             ; p = &format + 2; 
1604   0D2A FA FF FF      lea d, [bp + -1] ; $p
1605   0D2D DA            push d
1606   0D2E FA 05 00      lea d, [bp + 5] ; $format
1607   0D31 2D            mov b, d
1608   0D32             ; --- START TERMS
1609   0D32 D7            push a
1610   0D33 11            mov a, b
1611   0D34 26 02 00      mov b, $2
1612   0D37 56            add b, a
1613   0D38 E4            pop a
1614   0D39             ; --- END TERMS
1615   0D39 E7            pop d
1616   0D3A FD 43         mov [d], b
1617   0D3C             ; for(;;){ 
1618   0D3C             _for19_init:
1619   0D3C             _for19_cond:
1620   0D3C             _for19_block:
1621   0D3C             ; if(!*format_p) break; 
1622   0D3C             _if20_cond:
1623   0D3C FA FD FF      lea d, [bp + -3] ; $format_p
1624   0D3F 2A            mov b, [d]
1625   0D40 74            mov d, b
1626   0D41 32            mov bl, [d]
1627   0D42 A7 00         mov bh, 0
1628   0D44 C0 00 00      cmp b, 0
1629   0D47 FD 71         seq ; !
1630   0D49 C0 00 00      cmp b, 0
1631   0D4C C6 55 0D      je _if20_else
1632   0D4F             _if20_true:
1633   0D4F             ; break; 
1634   0D4F 0A 56 0F      jmp _for19_exit ; for break
1635   0D52 0A 53 0F      jmp _if20_exit
1636   0D55             _if20_else:
1637   0D55             ; if(*format_p == '%'){ 
1638   0D55             _if21_cond:
1639   0D55 FA FD FF      lea d, [bp + -3] ; $format_p
1640   0D58 2A            mov b, [d]
1641   0D59 74            mov d, b
1642   0D5A 32            mov bl, [d]
1643   0D5B A7 00         mov bh, 0
1644   0D5D             ; --- START RELATIONAL
1645   0D5D D7            push a
1646   0D5E 11            mov a, b
1647   0D5F 26 25 00      mov b, $25
1648   0D62 B0            cmp a, b
1649   0D63 FD 71         seq ; ==
1650   0D65 E4            pop a
1651   0D66             ; --- END RELATIONAL
1652   0D66 C0 00 00      cmp b, 0
1653   0D69 C6 37 0F      je _if21_else
1654   0D6C             _if21_true:
1655   0D6C             ; format_p++; 
1656   0D6C FA FD FF      lea d, [bp + -3] ; $format_p
1657   0D6F 2A            mov b, [d]
1658   0D70 FD 77         inc b
1659   0D72 FA FD FF      lea d, [bp + -3] ; $format_p
1660   0D75 FD 43         mov [d], b
1661   0D77 FD 7D         dec b
1662   0D79             ; switch(*format_p){ 
1663   0D79             _switch22_expr:
1664   0D79 FA FD FF      lea d, [bp + -3] ; $format_p
1665   0D7C 2A            mov b, [d]
1666   0D7D 74            mov d, b
1667   0D7E 32            mov bl, [d]
1668   0D7F A7 00         mov bh, 0
1669   0D81             _switch22_comparisons:
1670   0D81 C1 6C         cmp bl, $6c
1671   0D83 C6 AF 0D      je _switch22_case0
1672   0D86 C1 4C         cmp bl, $4c
1673   0D88 C6 AF 0D      je _switch22_case1
1674   0D8B C1 64         cmp bl, $64
1675   0D8D C6 41 0E      je _switch22_case2
1676   0D90 C1 69         cmp bl, $69
1677   0D92 C6 41 0E      je _switch22_case3
1678   0D95 C1 75         cmp bl, $75
1679   0D97 C6 6E 0E      je _switch22_case4
1680   0D9A C1 78         cmp bl, $78
1681   0D9C C6 9B 0E      je _switch22_case5
1682   0D9F C1 63         cmp bl, $63
1683   0DA1 C6 B0 0E      je _switch22_case6
1684   0DA4 C1 73         cmp bl, $73
1685   0DA6 C6 E3 0E      je _switch22_case7
1686   0DA9 0A 1B 0F      jmp _switch22_default
1687   0DAC 0A 27 0F      jmp _switch22_exit
1688   0DAF             _switch22_case0:
1689   0DAF             _switch22_case1:
1690   0DAF             ; format_p++; 
1691   0DAF FA FD FF      lea d, [bp + -3] ; $format_p
1692   0DB2 2A            mov b, [d]
1693   0DB3 FD 77         inc b
1694   0DB5 FA FD FF      lea d, [bp + -3] ; $format_p
1695   0DB8 FD 43         mov [d], b
1696   0DBA FD 7D         dec b
1697   0DBC             ; if(*format_p == 'd' || *format_p == 'i'); 
1698   0DBC             _if23_cond:
1699   0DBC FA FD FF      lea d, [bp + -3] ; $format_p
1700   0DBF 2A            mov b, [d]
1701   0DC0 74            mov d, b
1702   0DC1 32            mov bl, [d]
1703   0DC2 A7 00         mov bh, 0
1704   0DC4             ; --- START RELATIONAL
1705   0DC4 D7            push a
1706   0DC5 11            mov a, b
1707   0DC6 26 64 00      mov b, $64
1708   0DC9 B0            cmp a, b
1709   0DCA FD 71         seq ; ==
1710   0DCC E4            pop a
1711   0DCD             ; --- END RELATIONAL
1712   0DCD             ; --- START LOGICAL OR
1713   0DCD D7            push a
1714   0DCE 11            mov a, b
1715   0DCF FA FD FF      lea d, [bp + -3] ; $format_p
1716   0DD2 2A            mov b, [d]
1717   0DD3 74            mov d, b
1718   0DD4 32            mov bl, [d]
1719   0DD5 A7 00         mov bh, 0
1720   0DD7             ; --- START RELATIONAL
1721   0DD7 D7            push a
1722   0DD8 11            mov a, b
1723   0DD9 26 69 00      mov b, $69
1724   0DDC B0            cmp a, b
1725   0DDD FD 71         seq ; ==
1726   0DDF E4            pop a
1727   0DE0             ; --- END RELATIONAL
1728   0DE0 FD A8         sor a, b ; ||
1729   0DE2 E4            pop a
1730   0DE3             ; --- END LOGICAL OR
1731   0DE3 C0 00 00      cmp b, 0
1732   0DE6 C6 EC 0D      je _if23_else
1733   0DE9             _if23_true:
1734   0DE9             ; ; 
1735   0DE9 0A 2C 0E      jmp _if23_exit
1736   0DEC             _if23_else:
1737   0DEC             ; if(*format_p == 'u'); 
1738   0DEC             _if24_cond:
1739   0DEC FA FD FF      lea d, [bp + -3] ; $format_p
1740   0DEF 2A            mov b, [d]
1741   0DF0 74            mov d, b
1742   0DF1 32            mov bl, [d]
1743   0DF2 A7 00         mov bh, 0
1744   0DF4             ; --- START RELATIONAL
1745   0DF4 D7            push a
1746   0DF5 11            mov a, b
1747   0DF6 26 75 00      mov b, $75
1748   0DF9 B0            cmp a, b
1749   0DFA FD 71         seq ; ==
1750   0DFC E4            pop a
1751   0DFD             ; --- END RELATIONAL
1752   0DFD C0 00 00      cmp b, 0
1753   0E00 C6 06 0E      je _if24_else
1754   0E03             _if24_true:
1755   0E03             ; ; 
1756   0E03 0A 2C 0E      jmp _if24_exit
1757   0E06             _if24_else:
1758   0E06             ; if(*format_p == 'x'); 
1759   0E06             _if25_cond:
1760   0E06 FA FD FF      lea d, [bp + -3] ; $format_p
1761   0E09 2A            mov b, [d]
1762   0E0A 74            mov d, b
1763   0E0B 32            mov bl, [d]
1764   0E0C A7 00         mov bh, 0
1765   0E0E             ; --- START RELATIONAL
1766   0E0E D7            push a
1767   0E0F 11            mov a, b
1768   0E10 26 78 00      mov b, $78
1769   0E13 B0            cmp a, b
1770   0E14 FD 71         seq ; ==
1771   0E16 E4            pop a
1772   0E17             ; --- END RELATIONAL
1773   0E17 C0 00 00      cmp b, 0
1774   0E1A C6 20 0E      je _if25_else
1775   0E1D             _if25_true:
1776   0E1D             ; ; 
1777   0E1D 0A 2C 0E      jmp _if25_exit
1778   0E20             _if25_else:
1779   0E20             ; err("Unexpected format in printf."); 
1780   0E20 26 08 24      mov b, _s9 ; "Unexpected format in printf."
1781   0E23 FD AB         swp b
1782   0E25 D8            push b
1783   0E26 07 5F 12      call err
1784   0E29 51 02 00      add sp, 2
1785   0E2C             _if25_exit:
1786   0E2C             _if24_exit:
1787   0E2C             _if23_exit:
1788   0E2C             ; p = p + 4; 
1789   0E2C FA FF FF      lea d, [bp + -1] ; $p
1790   0E2F DA            push d
1791   0E30 FA FF FF      lea d, [bp + -1] ; $p
1792   0E33 2A            mov b, [d]
1793   0E34             ; --- START TERMS
1794   0E34 D7            push a
1795   0E35 11            mov a, b
1796   0E36 26 04 00      mov b, $4
1797   0E39 56            add b, a
1798   0E3A E4            pop a
1799   0E3B             ; --- END TERMS
1800   0E3B E7            pop d
1801   0E3C FD 43         mov [d], b
1802   0E3E             ; break; 
1803   0E3E 0A 27 0F      jmp _switch22_exit ; case break
1804   0E41             _switch22_case2:
1805   0E41             _switch22_case3:
1806   0E41             ; i = scann(); 
1807   0E41 FA FA FF      lea d, [bp + -6] ; $i
1808   0E44 DA            push d
1809   0E45 07 90 1D      call scann
1810   0E48 E7            pop d
1811   0E49 FD 43         mov [d], b
1812   0E4B             ; **(int **)p = i; 
1813   0E4B FA FF FF      lea d, [bp + -1] ; $p
1814   0E4E 2A            mov b, [d]
1815   0E4F 74            mov d, b
1816   0E50 2A            mov b, [d]
1817   0E51 D8            push b
1818   0E52 FA FA FF      lea d, [bp + -6] ; $i
1819   0E55 2A            mov b, [d]
1820   0E56 E7            pop d
1821   0E57 FD 43         mov [d], b
1822   0E59             ; p = p + 2; 
1823   0E59 FA FF FF      lea d, [bp + -1] ; $p
1824   0E5C DA            push d
1825   0E5D FA FF FF      lea d, [bp + -1] ; $p
1826   0E60 2A            mov b, [d]
1827   0E61             ; --- START TERMS
1828   0E61 D7            push a
1829   0E62 11            mov a, b
1830   0E63 26 02 00      mov b, $2
1831   0E66 56            add b, a
1832   0E67 E4            pop a
1833   0E68             ; --- END TERMS
1834   0E68 E7            pop d
1835   0E69 FD 43         mov [d], b
1836   0E6B             ; break; 
1837   0E6B 0A 27 0F      jmp _switch22_exit ; case break
1838   0E6E             _switch22_case4:
1839   0E6E             ; i = scann(); 
1840   0E6E FA FA FF      lea d, [bp + -6] ; $i
1841   0E71 DA            push d
1842   0E72 07 90 1D      call scann
1843   0E75 E7            pop d
1844   0E76 FD 43         mov [d], b
1845   0E78             ; **(int **)p = i; 
1846   0E78 FA FF FF      lea d, [bp + -1] ; $p
1847   0E7B 2A            mov b, [d]
1848   0E7C 74            mov d, b
1849   0E7D 2A            mov b, [d]
1850   0E7E D8            push b
1851   0E7F FA FA FF      lea d, [bp + -6] ; $i
1852   0E82 2A            mov b, [d]
1853   0E83 E7            pop d
1854   0E84 FD 43         mov [d], b
1855   0E86             ; p = p + 2; 
1856   0E86 FA FF FF      lea d, [bp + -1] ; $p
1857   0E89 DA            push d
1858   0E8A FA FF FF      lea d, [bp + -1] ; $p
1859   0E8D 2A            mov b, [d]
1860   0E8E             ; --- START TERMS
1861   0E8E D7            push a
1862   0E8F 11            mov a, b
1863   0E90 26 02 00      mov b, $2
1864   0E93 56            add b, a
1865   0E94 E4            pop a
1866   0E95             ; --- END TERMS
1867   0E95 E7            pop d
1868   0E96 FD 43         mov [d], b
1869   0E98             ; break; 
1870   0E98 0A 27 0F      jmp _switch22_exit ; case break
1871   0E9B             _switch22_case5:
1872   0E9B             ; p = p + 2; 
1873   0E9B FA FF FF      lea d, [bp + -1] ; $p
1874   0E9E DA            push d
1875   0E9F FA FF FF      lea d, [bp + -1] ; $p
1876   0EA2 2A            mov b, [d]
1877   0EA3             ; --- START TERMS
1878   0EA3 D7            push a
1879   0EA4 11            mov a, b
1880   0EA5 26 02 00      mov b, $2
1881   0EA8 56            add b, a
1882   0EA9 E4            pop a
1883   0EAA             ; --- END TERMS
1884   0EAA E7            pop d
1885   0EAB FD 43         mov [d], b
1886   0EAD             ; break; 
1887   0EAD 0A 27 0F      jmp _switch22_exit ; case break
1888   0EB0             _switch22_case6:
1889   0EB0             ; c = getchar(); 
1890   0EB0 FA FC FF      lea d, [bp + -4] ; $c
1891   0EB3 DA            push d
1892   0EB4 07 7A 1D      call getchar
1893   0EB7 E7            pop d
1894   0EB8 FD 3E         mov [d], bl
1895   0EBA             ; **(char **)p = *(char *)c; 
1896   0EBA FA FF FF      lea d, [bp + -1] ; $p
1897   0EBD 2A            mov b, [d]
1898   0EBE 74            mov d, b
1899   0EBF 2A            mov b, [d]
1900   0EC0 D8            push b
1901   0EC1 FA FC FF      lea d, [bp + -4] ; $c
1902   0EC4 32            mov bl, [d]
1903   0EC5 A7 00         mov bh, 0
1904   0EC7 74            mov d, b
1905   0EC8 32            mov bl, [d]
1906   0EC9 A7 00         mov bh, 0
1907   0ECB E7            pop d
1908   0ECC FD 43         mov [d], b
1909   0ECE             ; p = p + 1; 
1910   0ECE FA FF FF      lea d, [bp + -1] ; $p
1911   0ED1 DA            push d
1912   0ED2 FA FF FF      lea d, [bp + -1] ; $p
1913   0ED5 2A            mov b, [d]
1914   0ED6             ; --- START TERMS
1915   0ED6 D7            push a
1916   0ED7 11            mov a, b
1917   0ED8 26 01 00      mov b, $1
1918   0EDB 56            add b, a
1919   0EDC E4            pop a
1920   0EDD             ; --- END TERMS
1921   0EDD E7            pop d
1922   0EDE FD 43         mov [d], b
1923   0EE0             ; break; 
1924   0EE0 0A 27 0F      jmp _switch22_exit ; case break
1925   0EE3             _switch22_case7:
1926   0EE3             ; gets(input_string); 
1927   0EE3 FA FA FD      lea d, [bp + -518] ; $input_string
1928   0EE6 2D            mov b, d
1929   0EE7 FD AB         swp b
1930   0EE9 D8            push b
1931   0EEA 07 EB 13      call gets
1932   0EED 51 02 00      add sp, 2
1933   0EF0             ; strcpy(*(char **)p, input_string); 
1934   0EF0 FA FA FD      lea d, [bp + -518] ; $input_string
1935   0EF3 2D            mov b, d
1936   0EF4 FD AB         swp b
1937   0EF6 D8            push b
1938   0EF7 FA FF FF      lea d, [bp + -1] ; $p
1939   0EFA 2A            mov b, [d]
1940   0EFB 74            mov d, b
1941   0EFC 2A            mov b, [d]
1942   0EFD FD AB         swp b
1943   0EFF D8            push b
1944   0F00 07 94 06      call strcpy
1945   0F03 51 04 00      add sp, 4
1946   0F06             ; p = p + 2; 
1947   0F06 FA FF FF      lea d, [bp + -1] ; $p
1948   0F09 DA            push d
1949   0F0A FA FF FF      lea d, [bp + -1] ; $p
1950   0F0D 2A            mov b, [d]
1951   0F0E             ; --- START TERMS
1952   0F0E D7            push a
1953   0F0F 11            mov a, b
1954   0F10 26 02 00      mov b, $2
1955   0F13 56            add b, a
1956   0F14 E4            pop a
1957   0F15             ; --- END TERMS
1958   0F15 E7            pop d
1959   0F16 FD 43         mov [d], b
1960   0F18             ; break; 
1961   0F18 0A 27 0F      jmp _switch22_exit ; case break
1962   0F1B             _switch22_default:
1963   0F1B             ; print("Error: Unknown argument type.\n"); 
1964   0F1B 26 25 24      mov b, _s10 ; "Error: Unknown argument type.\n"
1965   0F1E FD AB         swp b
1966   0F20 D8            push b
1967   0F21 07 B5 1D      call print
1968   0F24 51 02 00      add sp, 2
1969   0F27             _switch22_exit:
1970   0F27             ; format_p++; 
1971   0F27 FA FD FF      lea d, [bp + -3] ; $format_p
1972   0F2A 2A            mov b, [d]
1973   0F2B FD 77         inc b
1974   0F2D FA FD FF      lea d, [bp + -3] ; $format_p
1975   0F30 FD 43         mov [d], b
1976   0F32 FD 7D         dec b
1977   0F34 0A 53 0F      jmp _if21_exit
1978   0F37             _if21_else:
1979   0F37             ; putchar(*format_p); 
1980   0F37 FA FD FF      lea d, [bp + -3] ; $format_p
1981   0F3A 2A            mov b, [d]
1982   0F3B 74            mov d, b
1983   0F3C 32            mov bl, [d]
1984   0F3D A7 00         mov bh, 0
1985   0F3F DD            push bl
1986   0F40 07 6D 1D      call putchar
1987   0F43 51 01 00      add sp, 1
1988   0F46             ; format_p++; 
1989   0F46 FA FD FF      lea d, [bp + -3] ; $format_p
1990   0F49 2A            mov b, [d]
1991   0F4A FD 77         inc b
1992   0F4C FA FD FF      lea d, [bp + -3] ; $format_p
1993   0F4F FD 43         mov [d], b
1994   0F51 FD 7D         dec b
1995   0F53             _if21_exit:
1996   0F53             _if20_exit:
1997   0F53             _for19_update:
1998   0F53 0A 3C 0D      jmp _for19_cond
1999   0F56             _for19_exit:
2000   0F56 F9            leave
2001   0F57 09            ret
2002   0F58             
2003   0F58             sprintf:
2004   0F58 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2005   0F5B             ; char *p, *format_p; 
2006   0F5B 52 02 00      sub sp, 2
2007   0F5E 52 02 00      sub sp, 2
2008   0F61             ; char *sp; 
2009   0F61 52 02 00      sub sp, 2
2010   0F64             ; sp = dest; 
2011   0F64 FA FB FF      lea d, [bp + -5] ; $sp
2012   0F67 DA            push d
2013   0F68 FA 05 00      lea d, [bp + 5] ; $dest
2014   0F6B 2A            mov b, [d]
2015   0F6C E7            pop d
2016   0F6D FD 43         mov [d], b
2017   0F6F             ; format_p = format; 
2018   0F6F FA FD FF      lea d, [bp + -3] ; $format_p
2019   0F72 DA            push d
2020   0F73 FA 07 00      lea d, [bp + 7] ; $format
2021   0F76 2A            mov b, [d]
2022   0F77 E7            pop d
2023   0F78 FD 43         mov [d], b
2024   0F7A             ; p = &format + 2; 
2025   0F7A FA FF FF      lea d, [bp + -1] ; $p
2026   0F7D DA            push d
2027   0F7E FA 07 00      lea d, [bp + 7] ; $format
2028   0F81 2D            mov b, d
2029   0F82             ; --- START TERMS
2030   0F82 D7            push a
2031   0F83 11            mov a, b
2032   0F84 26 02 00      mov b, $2
2033   0F87 56            add b, a
2034   0F88 E4            pop a
2035   0F89             ; --- END TERMS
2036   0F89 E7            pop d
2037   0F8A FD 43         mov [d], b
2038   0F8C             ; for(;;){ 
2039   0F8C             _for26_init:
2040   0F8C             _for26_cond:
2041   0F8C             _for26_block:
2042   0F8C             ; if(!*format_p) break; 
2043   0F8C             _if27_cond:
2044   0F8C FA FD FF      lea d, [bp + -3] ; $format_p
2045   0F8F 2A            mov b, [d]
2046   0F90 74            mov d, b
2047   0F91 32            mov bl, [d]
2048   0F92 A7 00         mov bh, 0
2049   0F94 C0 00 00      cmp b, 0
2050   0F97 FD 71         seq ; !
2051   0F99 C0 00 00      cmp b, 0
2052   0F9C C6 A5 0F      je _if27_else
2053   0F9F             _if27_true:
2054   0F9F             ; break; 
2055   0F9F 0A 45 12      jmp _for26_exit ; for break
2056   0FA2 0A 42 12      jmp _if27_exit
2057   0FA5             _if27_else:
2058   0FA5             ; if(*format_p == '%'){ 
2059   0FA5             _if28_cond:
2060   0FA5 FA FD FF      lea d, [bp + -3] ; $format_p
2061   0FA8 2A            mov b, [d]
2062   0FA9 74            mov d, b
2063   0FAA 32            mov bl, [d]
2064   0FAB A7 00         mov bh, 0
2065   0FAD             ; --- START RELATIONAL
2066   0FAD D7            push a
2067   0FAE 11            mov a, b
2068   0FAF 26 25 00      mov b, $25
2069   0FB2 B0            cmp a, b
2070   0FB3 FD 71         seq ; ==
2071   0FB5 E4            pop a
2072   0FB6             ; --- END RELATIONAL
2073   0FB6 C0 00 00      cmp b, 0
2074   0FB9 C6 20 12      je _if28_else
2075   0FBC             _if28_true:
2076   0FBC             ; format_p++; 
2077   0FBC FA FD FF      lea d, [bp + -3] ; $format_p
2078   0FBF 2A            mov b, [d]
2079   0FC0 FD 77         inc b
2080   0FC2 FA FD FF      lea d, [bp + -3] ; $format_p
2081   0FC5 FD 43         mov [d], b
2082   0FC7 FD 7D         dec b
2083   0FC9             ; switch(*format_p){ 
2084   0FC9             _switch29_expr:
2085   0FC9 FA FD FF      lea d, [bp + -3] ; $format_p
2086   0FCC 2A            mov b, [d]
2087   0FCD 74            mov d, b
2088   0FCE 32            mov bl, [d]
2089   0FCF A7 00         mov bh, 0
2090   0FD1             _switch29_comparisons:
2091   0FD1 C1 6C         cmp bl, $6c
2092   0FD3 C6 FF 0F      je _switch29_case0
2093   0FD6 C1 4C         cmp bl, $4c
2094   0FD8 C6 FF 0F      je _switch29_case1
2095   0FDB C1 64         cmp bl, $64
2096   0FDD C6 ED 10      je _switch29_case2
2097   0FE0 C1 69         cmp bl, $69
2098   0FE2 C6 ED 10      je _switch29_case3
2099   0FE5 C1 75         cmp bl, $75
2100   0FE7 C6 27 11      je _switch29_case4
2101   0FEA C1 78         cmp bl, $78
2102   0FEC C6 61 11      je _switch29_case5
2103   0FEF C1 63         cmp bl, $63
2104   0FF1 C6 7F 11      je _switch29_case6
2105   0FF4 C1 73         cmp bl, $73
2106   0FF6 C6 AD 11      je _switch29_case7
2107   0FF9 0A 04 12      jmp _switch29_default
2108   0FFC 0A 10 12      jmp _switch29_exit
2109   0FFF             _switch29_case0:
2110   0FFF             _switch29_case1:
2111   0FFF             ; format_p++; 
2112   0FFF FA FD FF      lea d, [bp + -3] ; $format_p
2113   1002 2A            mov b, [d]
2114   1003 FD 77         inc b
2115   1005 FA FD FF      lea d, [bp + -3] ; $format_p
2116   1008 FD 43         mov [d], b
2117   100A FD 7D         dec b
2118   100C             ; if(*format_p == 'd' || *format_p == 'i') 
2119   100C             _if30_cond:
2120   100C FA FD FF      lea d, [bp + -3] ; $format_p
2121   100F 2A            mov b, [d]
2122   1010 74            mov d, b
2123   1011 32            mov bl, [d]
2124   1012 A7 00         mov bh, 0
2125   1014             ; --- START RELATIONAL
2126   1014 D7            push a
2127   1015 11            mov a, b
2128   1016 26 64 00      mov b, $64
2129   1019 B0            cmp a, b
2130   101A FD 71         seq ; ==
2131   101C E4            pop a
2132   101D             ; --- END RELATIONAL
2133   101D             ; --- START LOGICAL OR
2134   101D D7            push a
2135   101E 11            mov a, b
2136   101F FA FD FF      lea d, [bp + -3] ; $format_p
2137   1022 2A            mov b, [d]
2138   1023 74            mov d, b
2139   1024 32            mov bl, [d]
2140   1025 A7 00         mov bh, 0
2141   1027             ; --- START RELATIONAL
2142   1027 D7            push a
2143   1028 11            mov a, b
2144   1029 26 69 00      mov b, $69
2145   102C B0            cmp a, b
2146   102D FD 71         seq ; ==
2147   102F E4            pop a
2148   1030             ; --- END RELATIONAL
2149   1030 FD A8         sor a, b ; ||
2150   1032 E4            pop a
2151   1033             ; --- END LOGICAL OR
2152   1033 C0 00 00      cmp b, 0
2153   1036 C6 5B 10      je _if30_else
2154   1039             _if30_true:
2155   1039             ; print_signed_long(*(long *)p); 
2156   1039 FA FF FF      lea d, [bp + -1] ; $p
2157   103C 2A            mov b, [d]
2158   103D AB            snex b
2159   103E FD 39         mov c, b
2160   1040 74            mov d, b
2161   1041 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2162   1044 FD 39         mov c, b ; And place it into C
2163   1046 2A            mov b, [d] ; Lower Word in B
2164   1047 FD 79         mov g, b
2165   1049 28            mov b, c
2166   104A FD AB         swp b
2167   104C D8            push b
2168   104D FD 27         mov b, g
2169   104F FD AB         swp b
2170   1051 D8            push b
2171   1052 07 FC 14      call print_signed_long
2172   1055 51 04 00      add sp, 4
2173   1058 0A D8 10      jmp _if30_exit
2174   105B             _if30_else:
2175   105B             ; if(*format_p == 'u') 
2176   105B             _if31_cond:
2177   105B FA FD FF      lea d, [bp + -3] ; $format_p
2178   105E 2A            mov b, [d]
2179   105F 74            mov d, b
2180   1060 32            mov bl, [d]
2181   1061 A7 00         mov bh, 0
2182   1063             ; --- START RELATIONAL
2183   1063 D7            push a
2184   1064 11            mov a, b
2185   1065 26 75 00      mov b, $75
2186   1068 B0            cmp a, b
2187   1069 FD 71         seq ; ==
2188   106B E4            pop a
2189   106C             ; --- END RELATIONAL
2190   106C C0 00 00      cmp b, 0
2191   106F C6 96 10      je _if31_else
2192   1072             _if31_true:
2193   1072             ; print_unsigned_long(*(unsigned long *)p); 
2194   1072 FA FF FF      lea d, [bp + -1] ; $p
2195   1075 2A            mov b, [d]
2196   1076 A7 00         mov bh, 0
2197   1078 38 00 00      mov c, 0
2198   107B 74            mov d, b
2199   107C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2200   107F FD 39         mov c, b ; And place it into C
2201   1081 2A            mov b, [d] ; Lower Word in B
2202   1082 FD 79         mov g, b
2203   1084 28            mov b, c
2204   1085 FD AB         swp b
2205   1087 D8            push b
2206   1088 FD 27         mov b, g
2207   108A FD AB         swp b
2208   108C D8            push b
2209   108D 07 3C 18      call print_unsigned_long
2210   1090 51 04 00      add sp, 4
2211   1093 0A D8 10      jmp _if31_exit
2212   1096             _if31_else:
2213   1096             ; if(*format_p == 'x') 
2214   1096             _if32_cond:
2215   1096 FA FD FF      lea d, [bp + -3] ; $format_p
2216   1099 2A            mov b, [d]
2217   109A 74            mov d, b
2218   109B 32            mov bl, [d]
2219   109C A7 00         mov bh, 0
2220   109E             ; --- START RELATIONAL
2221   109E D7            push a
2222   109F 11            mov a, b
2223   10A0 26 78 00      mov b, $78
2224   10A3 B0            cmp a, b
2225   10A4 FD 71         seq ; ==
2226   10A6 E4            pop a
2227   10A7             ; --- END RELATIONAL
2228   10A7 C0 00 00      cmp b, 0
2229   10AA C6 CC 10      je _if32_else
2230   10AD             _if32_true:
2231   10AD             ; printx32(*(long int *)p); 
2232   10AD FA FF FF      lea d, [bp + -1] ; $p
2233   10B0 2A            mov b, [d]
2234   10B1 74            mov d, b
2235   10B2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2236   10B5 FD 39         mov c, b ; And place it into C
2237   10B7 2A            mov b, [d] ; Lower Word in B
2238   10B8 FD 79         mov g, b
2239   10BA 28            mov b, c
2240   10BB FD AB         swp b
2241   10BD D8            push b
2242   10BE FD 27         mov b, g
2243   10C0 FD AB         swp b
2244   10C2 D8            push b
2245   10C3 07 71 12      call printx32
2246   10C6 51 04 00      add sp, 4
2247   10C9 0A D8 10      jmp _if32_exit
2248   10CC             _if32_else:
2249   10CC             ; err("Unexpected format in printf."); 
2250   10CC 26 08 24      mov b, _s9 ; "Unexpected format in printf."
2251   10CF FD AB         swp b
2252   10D1 D8            push b
2253   10D2 07 5F 12      call err
2254   10D5 51 02 00      add sp, 2
2255   10D8             _if32_exit:
2256   10D8             _if31_exit:
2257   10D8             _if30_exit:
2258   10D8             ; p = p + 4; 
2259   10D8 FA FF FF      lea d, [bp + -1] ; $p
2260   10DB DA            push d
2261   10DC FA FF FF      lea d, [bp + -1] ; $p
2262   10DF 2A            mov b, [d]
2263   10E0             ; --- START TERMS
2264   10E0 D7            push a
2265   10E1 11            mov a, b
2266   10E2 26 04 00      mov b, $4
2267   10E5 56            add b, a
2268   10E6 E4            pop a
2269   10E7             ; --- END TERMS
2270   10E7 E7            pop d
2271   10E8 FD 43         mov [d], b
2272   10EA             ; break; 
2273   10EA 0A 10 12      jmp _switch29_exit ; case break
2274   10ED             _switch29_case2:
2275   10ED             _switch29_case3:
2276   10ED             ; sp = sp + sprint_signed(sp, *(int*)p); 
2277   10ED FA FB FF      lea d, [bp + -5] ; $sp
2278   10F0 DA            push d
2279   10F1 FA FB FF      lea d, [bp + -5] ; $sp
2280   10F4 2A            mov b, [d]
2281   10F5             ; --- START TERMS
2282   10F5 D7            push a
2283   10F6 11            mov a, b
2284   10F7 FA FF FF      lea d, [bp + -1] ; $p
2285   10FA 2A            mov b, [d]
2286   10FB 74            mov d, b
2287   10FC 2A            mov b, [d]
2288   10FD FD AB         swp b
2289   10FF D8            push b
2290   1100 FA FB FF      lea d, [bp + -5] ; $sp
2291   1103 2A            mov b, [d]
2292   1104 FD AB         swp b
2293   1106 D8            push b
2294   1107 07 0B 1C      call sprint_signed
2295   110A 51 04 00      add sp, 4
2296   110D 56            add b, a
2297   110E E4            pop a
2298   110F             ; --- END TERMS
2299   110F E7            pop d
2300   1110 FD 43         mov [d], b
2301   1112             ; p = p + 2; 
2302   1112 FA FF FF      lea d, [bp + -1] ; $p
2303   1115 DA            push d
2304   1116 FA FF FF      lea d, [bp + -1] ; $p
2305   1119 2A            mov b, [d]
2306   111A             ; --- START TERMS
2307   111A D7            push a
2308   111B 11            mov a, b
2309   111C 26 02 00      mov b, $2
2310   111F 56            add b, a
2311   1120 E4            pop a
2312   1121             ; --- END TERMS
2313   1121 E7            pop d
2314   1122 FD 43         mov [d], b
2315   1124             ; break; 
2316   1124 0A 10 12      jmp _switch29_exit ; case break
2317   1127             _switch29_case4:
2318   1127             ; sp = sp + sprint_unsigned(sp, *(unsigned int*)p); 
2319   1127 FA FB FF      lea d, [bp + -5] ; $sp
2320   112A DA            push d
2321   112B FA FB FF      lea d, [bp + -5] ; $sp
2322   112E 2A            mov b, [d]
2323   112F             ; --- START TERMS
2324   112F D7            push a
2325   1130 11            mov a, b
2326   1131 FA FF FF      lea d, [bp + -1] ; $p
2327   1134 2A            mov b, [d]
2328   1135 74            mov d, b
2329   1136 2A            mov b, [d]
2330   1137 FD AB         swp b
2331   1139 D8            push b
2332   113A FA FB FF      lea d, [bp + -5] ; $sp
2333   113D 2A            mov b, [d]
2334   113E FD AB         swp b
2335   1140 D8            push b
2336   1141 07 37 1A      call sprint_unsigned
2337   1144 51 04 00      add sp, 4
2338   1147 56            add b, a
2339   1148 E4            pop a
2340   1149             ; --- END TERMS
2341   1149 E7            pop d
2342   114A FD 43         mov [d], b
2343   114C             ; p = p + 2; 
2344   114C FA FF FF      lea d, [bp + -1] ; $p
2345   114F DA            push d
2346   1150 FA FF FF      lea d, [bp + -1] ; $p
2347   1153 2A            mov b, [d]
2348   1154             ; --- START TERMS
2349   1154 D7            push a
2350   1155 11            mov a, b
2351   1156 26 02 00      mov b, $2
2352   1159 56            add b, a
2353   115A E4            pop a
2354   115B             ; --- END TERMS
2355   115B E7            pop d
2356   115C FD 43         mov [d], b
2357   115E             ; break; 
2358   115E 0A 10 12      jmp _switch29_exit ; case break
2359   1161             _switch29_case5:
2360   1161             
2361   1161             ; --- BEGIN INLINE ASM SEGMENT
2362   1161 FA FF FF      lea d, [bp + -1] ; $p
2363   1164 FD 2A         mov d, [d]
2364   1166 2A            mov b, [d]
2365   1167 07 06 21      call print_u16x
2366   116A             ; --- END INLINE ASM SEGMENT
2367   116A             
2368   116A             ; p = p + 2; 
2369   116A FA FF FF      lea d, [bp + -1] ; $p
2370   116D DA            push d
2371   116E FA FF FF      lea d, [bp + -1] ; $p
2372   1171 2A            mov b, [d]
2373   1172             ; --- START TERMS
2374   1172 D7            push a
2375   1173 11            mov a, b
2376   1174 26 02 00      mov b, $2
2377   1177 56            add b, a
2378   1178 E4            pop a
2379   1179             ; --- END TERMS
2380   1179 E7            pop d
2381   117A FD 43         mov [d], b
2382   117C             ; break; 
2383   117C 0A 10 12      jmp _switch29_exit ; case break
2384   117F             _switch29_case6:
2385   117F             ; *sp++ = *(char *)p; 
2386   117F FA FB FF      lea d, [bp + -5] ; $sp
2387   1182 2A            mov b, [d]
2388   1183 FD 77         inc b
2389   1185 FA FB FF      lea d, [bp + -5] ; $sp
2390   1188 FD 43         mov [d], b
2391   118A FD 7D         dec b
2392   118C D8            push b
2393   118D FA FF FF      lea d, [bp + -1] ; $p
2394   1190 2A            mov b, [d]
2395   1191 74            mov d, b
2396   1192 32            mov bl, [d]
2397   1193 A7 00         mov bh, 0
2398   1195 E7            pop d
2399   1196 FD 3E         mov [d], bl
2400   1198             ; p = p + 1; 
2401   1198 FA FF FF      lea d, [bp + -1] ; $p
2402   119B DA            push d
2403   119C FA FF FF      lea d, [bp + -1] ; $p
2404   119F 2A            mov b, [d]
2405   11A0             ; --- START TERMS
2406   11A0 D7            push a
2407   11A1 11            mov a, b
2408   11A2 26 01 00      mov b, $1
2409   11A5 56            add b, a
2410   11A6 E4            pop a
2411   11A7             ; --- END TERMS
2412   11A7 E7            pop d
2413   11A8 FD 43         mov [d], b
2414   11AA             ; break; 
2415   11AA 0A 10 12      jmp _switch29_exit ; case break
2416   11AD             _switch29_case7:
2417   11AD             ; int len = strlen(*(char **)p); 
2418   11AD 52 02 00      sub sp, 2
2419   11B0             ; --- START LOCAL VAR INITIALIZATION
2420   11B0 FA F9 FF      lea d, [bp + -7] ; $len
2421   11B3 DA            push d
2422   11B4 FA FF FF      lea d, [bp + -1] ; $p
2423   11B7 2A            mov b, [d]
2424   11B8 74            mov d, b
2425   11B9 2A            mov b, [d]
2426   11BA FD AB         swp b
2427   11BC D8            push b
2428   11BD 07 0E 08      call strlen
2429   11C0 51 02 00      add sp, 2
2430   11C3 E7            pop d
2431   11C4 FD 43         mov [d], b
2432   11C6             ; --- END LOCAL VAR INITIALIZATION
2433   11C6             ; strcpy(sp, *(char **)p); 
2434   11C6 FA FF FF      lea d, [bp + -1] ; $p
2435   11C9 2A            mov b, [d]
2436   11CA 74            mov d, b
2437   11CB 2A            mov b, [d]
2438   11CC FD AB         swp b
2439   11CE D8            push b
2440   11CF FA FB FF      lea d, [bp + -5] ; $sp
2441   11D2 2A            mov b, [d]
2442   11D3 FD AB         swp b
2443   11D5 D8            push b
2444   11D6 07 94 06      call strcpy
2445   11D9 51 04 00      add sp, 4
2446   11DC             ; sp = sp + len; 
2447   11DC FA FB FF      lea d, [bp + -5] ; $sp
2448   11DF DA            push d
2449   11E0 FA FB FF      lea d, [bp + -5] ; $sp
2450   11E3 2A            mov b, [d]
2451   11E4             ; --- START TERMS
2452   11E4 D7            push a
2453   11E5 11            mov a, b
2454   11E6 FA F9 FF      lea d, [bp + -7] ; $len
2455   11E9 2A            mov b, [d]
2456   11EA 56            add b, a
2457   11EB E4            pop a
2458   11EC             ; --- END TERMS
2459   11EC E7            pop d
2460   11ED FD 43         mov [d], b
2461   11EF             ; p = p + 2; 
2462   11EF FA FF FF      lea d, [bp + -1] ; $p
2463   11F2 DA            push d
2464   11F3 FA FF FF      lea d, [bp + -1] ; $p
2465   11F6 2A            mov b, [d]
2466   11F7             ; --- START TERMS
2467   11F7 D7            push a
2468   11F8 11            mov a, b
2469   11F9 26 02 00      mov b, $2
2470   11FC 56            add b, a
2471   11FD E4            pop a
2472   11FE             ; --- END TERMS
2473   11FE E7            pop d
2474   11FF FD 43         mov [d], b
2475   1201             ; break; 
2476   1201 0A 10 12      jmp _switch29_exit ; case break
2477   1204             _switch29_default:
2478   1204             ; print("Error: Unknown argument type.\n"); 
2479   1204 26 25 24      mov b, _s10 ; "Error: Unknown argument type.\n"
2480   1207 FD AB         swp b
2481   1209 D8            push b
2482   120A 07 B5 1D      call print
2483   120D 51 02 00      add sp, 2
2484   1210             _switch29_exit:
2485   1210             ; format_p++; 
2486   1210 FA FD FF      lea d, [bp + -3] ; $format_p
2487   1213 2A            mov b, [d]
2488   1214 FD 77         inc b
2489   1216 FA FD FF      lea d, [bp + -3] ; $format_p
2490   1219 FD 43         mov [d], b
2491   121B FD 7D         dec b
2492   121D 0A 42 12      jmp _if28_exit
2493   1220             _if28_else:
2494   1220             ; *sp++ = *format_p++; 
2495   1220 FA FB FF      lea d, [bp + -5] ; $sp
2496   1223 2A            mov b, [d]
2497   1224 FD 77         inc b
2498   1226 FA FB FF      lea d, [bp + -5] ; $sp
2499   1229 FD 43         mov [d], b
2500   122B FD 7D         dec b
2501   122D D8            push b
2502   122E FA FD FF      lea d, [bp + -3] ; $format_p
2503   1231 2A            mov b, [d]
2504   1232 FD 77         inc b
2505   1234 FA FD FF      lea d, [bp + -3] ; $format_p
2506   1237 FD 43         mov [d], b
2507   1239 FD 7D         dec b
2508   123B 74            mov d, b
2509   123C 32            mov bl, [d]
2510   123D A7 00         mov bh, 0
2511   123F E7            pop d
2512   1240 FD 3E         mov [d], bl
2513   1242             _if28_exit:
2514   1242             _if27_exit:
2515   1242             _for26_update:
2516   1242 0A 8C 0F      jmp _for26_cond
2517   1245             _for26_exit:
2518   1245             ; *sp = '\0'; 
2519   1245 FA FB FF      lea d, [bp + -5] ; $sp
2520   1248 2A            mov b, [d]
2521   1249 D8            push b
2522   124A 26 00 00      mov b, $0
2523   124D E7            pop d
2524   124E FD 3E         mov [d], bl
2525   1250             ; return sp - dest; // return total number of chars written 
2526   1250 FA FB FF      lea d, [bp + -5] ; $sp
2527   1253 2A            mov b, [d]
2528   1254             ; --- START TERMS
2529   1254 D7            push a
2530   1255 11            mov a, b
2531   1256 FA 05 00      lea d, [bp + 5] ; $dest
2532   1259 2A            mov b, [d]
2533   125A 60            sub a, b
2534   125B 27            mov b, a
2535   125C E4            pop a
2536   125D             ; --- END TERMS
2537   125D F9            leave
2538   125E 09            ret
2539   125F             
2540   125F             err:
2541   125F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2542   1262             ; print(e); 
2543   1262 FA 05 00      lea d, [bp + 5] ; $e
2544   1265 2A            mov b, [d]
2545   1266 FD AB         swp b
2546   1268 D8            push b
2547   1269 07 B5 1D      call print
2548   126C 51 02 00      add sp, 2
2549   126F F9            leave
2550   1270 09            ret
2551   1271             
2552   1271             printx32:
2553   1271 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2554   1274             
2555   1274             ; --- BEGIN INLINE ASM SEGMENT
2556   1274 FA 05 00      lea d, [bp + 5] ; $hex
2557   1277 2B 02 00      mov b, [d+2]
2558   127A 07 06 21      call print_u16x
2559   127D 2A            mov b, [d]
2560   127E 07 06 21      call print_u16x
2561   1281             ; --- END INLINE ASM SEGMENT
2562   1281             
2563   1281 F9            leave
2564   1282 09            ret
2565   1283             
2566   1283             printx16:
2567   1283 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2568   1286             
2569   1286             ; --- BEGIN INLINE ASM SEGMENT
2570   1286 FA 05 00      lea d, [bp + 5] ; $hex
2571   1289 2A            mov b, [d]
2572   128A 07 06 21      call print_u16x
2573   128D             ; --- END INLINE ASM SEGMENT
2574   128D             
2575   128D F9            leave
2576   128E 09            ret
2577   128F             
2578   128F             printx8:
2579   128F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2580   1292             
2581   1292             ; --- BEGIN INLINE ASM SEGMENT
2582   1292 FA 05 00      lea d, [bp + 5] ; $hex
2583   1295 32            mov bl, [d]
2584   1296 07 4A 21      call print_u8x
2585   1299             ; --- END INLINE ASM SEGMENT
2586   1299             
2587   1299 F9            leave
2588   129A 09            ret
2589   129B             
2590   129B             hex_str_to_int:
2591   129B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2592   129E             ; int value = 0; 
2593   129E 52 02 00      sub sp, 2
2594   12A1             ; --- START LOCAL VAR INITIALIZATION
2595   12A1 FA FF FF      lea d, [bp + -1] ; $value
2596   12A4 DA            push d
2597   12A5 26 00 00      mov b, $0
2598   12A8 E7            pop d
2599   12A9 FD 43         mov [d], b
2600   12AB             ; --- END LOCAL VAR INITIALIZATION
2601   12AB             ; int i; 
2602   12AB 52 02 00      sub sp, 2
2603   12AE             ; char hex_char; 
2604   12AE 52 01 00      sub sp, 1
2605   12B1             ; int len; 
2606   12B1 52 02 00      sub sp, 2
2607   12B4             ; len = strlen(hex_string); 
2608   12B4 FA FA FF      lea d, [bp + -6] ; $len
2609   12B7 DA            push d
2610   12B8 FA 05 00      lea d, [bp + 5] ; $hex_string
2611   12BB 2A            mov b, [d]
2612   12BC FD AB         swp b
2613   12BE D8            push b
2614   12BF 07 0E 08      call strlen
2615   12C2 51 02 00      add sp, 2
2616   12C5 E7            pop d
2617   12C6 FD 43         mov [d], b
2618   12C8             ; for (i = 0; i < len; i++) { 
2619   12C8             _for33_init:
2620   12C8 FA FD FF      lea d, [bp + -3] ; $i
2621   12CB DA            push d
2622   12CC 26 00 00      mov b, $0
2623   12CF E7            pop d
2624   12D0 FD 43         mov [d], b
2625   12D2             _for33_cond:
2626   12D2 FA FD FF      lea d, [bp + -3] ; $i
2627   12D5 2A            mov b, [d]
2628   12D6             ; --- START RELATIONAL
2629   12D6 D7            push a
2630   12D7 11            mov a, b
2631   12D8 FA FA FF      lea d, [bp + -6] ; $len
2632   12DB 2A            mov b, [d]
2633   12DC B0            cmp a, b
2634   12DD FD 73         slt ; < (signed)
2635   12DF E4            pop a
2636   12E0             ; --- END RELATIONAL
2637   12E0 C0 00 00      cmp b, 0
2638   12E3 C6 E5 13      je _for33_exit
2639   12E6             _for33_block:
2640   12E6             ; hex_char = hex_string[i]; 
2641   12E6 FA FC FF      lea d, [bp + -4] ; $hex_char
2642   12E9 DA            push d
2643   12EA FA 05 00      lea d, [bp + 5] ; $hex_string
2644   12ED FD 2A         mov d, [d]
2645   12EF D7            push a
2646   12F0 DA            push d
2647   12F1 FA FD FF      lea d, [bp + -3] ; $i
2648   12F4 2A            mov b, [d]
2649   12F5 E7            pop d
2650   12F6 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2651   12FA E4            pop a
2652   12FB 32            mov bl, [d]
2653   12FC A7 00         mov bh, 0
2654   12FE E7            pop d
2655   12FF FD 3E         mov [d], bl
2656   1301             ; if (hex_char >= 'a' && hex_char <= 'f')  
2657   1301             _if34_cond:
2658   1301 FA FC FF      lea d, [bp + -4] ; $hex_char
2659   1304 32            mov bl, [d]
2660   1305 A7 00         mov bh, 0
2661   1307             ; --- START RELATIONAL
2662   1307 D7            push a
2663   1308 11            mov a, b
2664   1309 26 61 00      mov b, $61
2665   130C B0            cmp a, b
2666   130D FD 80         sge ; >=
2667   130F E4            pop a
2668   1310             ; --- END RELATIONAL
2669   1310             ; --- START LOGICAL AND
2670   1310 D7            push a
2671   1311 11            mov a, b
2672   1312 FA FC FF      lea d, [bp + -4] ; $hex_char
2673   1315 32            mov bl, [d]
2674   1316 A7 00         mov bh, 0
2675   1318             ; --- START RELATIONAL
2676   1318 D7            push a
2677   1319 11            mov a, b
2678   131A 26 66 00      mov b, $66
2679   131D B0            cmp a, b
2680   131E FD 74         sle ; <= (signed)
2681   1320 E4            pop a
2682   1321             ; --- END RELATIONAL
2683   1321 FD A7         sand a, b
2684   1323 E4            pop a
2685   1324             ; --- END LOGICAL AND
2686   1324 C0 00 00      cmp b, 0
2687   1327 C6 58 13      je _if34_else
2688   132A             _if34_true:
2689   132A             ; value = (value * 16) + (hex_char - 'a' + 10); 
2690   132A FA FF FF      lea d, [bp + -1] ; $value
2691   132D DA            push d
2692   132E FA FF FF      lea d, [bp + -1] ; $value
2693   1331 2A            mov b, [d]
2694   1332             ; --- START FACTORS
2695   1332 D7            push a
2696   1333 11            mov a, b
2697   1334 26 10 00      mov b, $10
2698   1337 AC            mul a, b ; *
2699   1338 11            mov a, b
2700   1339 27            mov b, a
2701   133A E4            pop a
2702   133B             ; --- END FACTORS
2703   133B             ; --- START TERMS
2704   133B D7            push a
2705   133C 11            mov a, b
2706   133D FA FC FF      lea d, [bp + -4] ; $hex_char
2707   1340 32            mov bl, [d]
2708   1341 A7 00         mov bh, 0
2709   1343             ; --- START TERMS
2710   1343 D7            push a
2711   1344 11            mov a, b
2712   1345 26 61 00      mov b, $61
2713   1348 60            sub a, b
2714   1349 27            mov b, a
2715   134A 11            mov a, b
2716   134B 26 0A 00      mov b, $a
2717   134E 56            add b, a
2718   134F E4            pop a
2719   1350             ; --- END TERMS
2720   1350 56            add b, a
2721   1351 E4            pop a
2722   1352             ; --- END TERMS
2723   1352 E7            pop d
2724   1353 FD 43         mov [d], b
2725   1355 0A D5 13      jmp _if34_exit
2726   1358             _if34_else:
2727   1358             ; if (hex_char >= 'A' && hex_char <= 'F')  
2728   1358             _if35_cond:
2729   1358 FA FC FF      lea d, [bp + -4] ; $hex_char
2730   135B 32            mov bl, [d]
2731   135C A7 00         mov bh, 0
2732   135E             ; --- START RELATIONAL
2733   135E D7            push a
2734   135F 11            mov a, b
2735   1360 26 41 00      mov b, $41
2736   1363 B0            cmp a, b
2737   1364 FD 80         sge ; >=
2738   1366 E4            pop a
2739   1367             ; --- END RELATIONAL
2740   1367             ; --- START LOGICAL AND
2741   1367 D7            push a
2742   1368 11            mov a, b
2743   1369 FA FC FF      lea d, [bp + -4] ; $hex_char
2744   136C 32            mov bl, [d]
2745   136D A7 00         mov bh, 0
2746   136F             ; --- START RELATIONAL
2747   136F D7            push a
2748   1370 11            mov a, b
2749   1371 26 46 00      mov b, $46
2750   1374 B0            cmp a, b
2751   1375 FD 74         sle ; <= (signed)
2752   1377 E4            pop a
2753   1378             ; --- END RELATIONAL
2754   1378 FD A7         sand a, b
2755   137A E4            pop a
2756   137B             ; --- END LOGICAL AND
2757   137B C0 00 00      cmp b, 0
2758   137E C6 AF 13      je _if35_else
2759   1381             _if35_true:
2760   1381             ; value = (value * 16) + (hex_char - 'A' + 10); 
2761   1381 FA FF FF      lea d, [bp + -1] ; $value
2762   1384 DA            push d
2763   1385 FA FF FF      lea d, [bp + -1] ; $value
2764   1388 2A            mov b, [d]
2765   1389             ; --- START FACTORS
2766   1389 D7            push a
2767   138A 11            mov a, b
2768   138B 26 10 00      mov b, $10
2769   138E AC            mul a, b ; *
2770   138F 11            mov a, b
2771   1390 27            mov b, a
2772   1391 E4            pop a
2773   1392             ; --- END FACTORS
2774   1392             ; --- START TERMS
2775   1392 D7            push a
2776   1393 11            mov a, b
2777   1394 FA FC FF      lea d, [bp + -4] ; $hex_char
2778   1397 32            mov bl, [d]
2779   1398 A7 00         mov bh, 0
2780   139A             ; --- START TERMS
2781   139A D7            push a
2782   139B 11            mov a, b
2783   139C 26 41 00      mov b, $41
2784   139F 60            sub a, b
2785   13A0 27            mov b, a
2786   13A1 11            mov a, b
2787   13A2 26 0A 00      mov b, $a
2788   13A5 56            add b, a
2789   13A6 E4            pop a
2790   13A7             ; --- END TERMS
2791   13A7 56            add b, a
2792   13A8 E4            pop a
2793   13A9             ; --- END TERMS
2794   13A9 E7            pop d
2795   13AA FD 43         mov [d], b
2796   13AC 0A D5 13      jmp _if35_exit
2797   13AF             _if35_else:
2798   13AF             ; value = (value * 16) + (hex_char - '0'); 
2799   13AF FA FF FF      lea d, [bp + -1] ; $value
2800   13B2 DA            push d
2801   13B3 FA FF FF      lea d, [bp + -1] ; $value
2802   13B6 2A            mov b, [d]
2803   13B7             ; --- START FACTORS
2804   13B7 D7            push a
2805   13B8 11            mov a, b
2806   13B9 26 10 00      mov b, $10
2807   13BC AC            mul a, b ; *
2808   13BD 11            mov a, b
2809   13BE 27            mov b, a
2810   13BF E4            pop a
2811   13C0             ; --- END FACTORS
2812   13C0             ; --- START TERMS
2813   13C0 D7            push a
2814   13C1 11            mov a, b
2815   13C2 FA FC FF      lea d, [bp + -4] ; $hex_char
2816   13C5 32            mov bl, [d]
2817   13C6 A7 00         mov bh, 0
2818   13C8             ; --- START TERMS
2819   13C8 D7            push a
2820   13C9 11            mov a, b
2821   13CA 26 30 00      mov b, $30
2822   13CD 60            sub a, b
2823   13CE 27            mov b, a
2824   13CF E4            pop a
2825   13D0             ; --- END TERMS
2826   13D0 56            add b, a
2827   13D1 E4            pop a
2828   13D2             ; --- END TERMS
2829   13D2 E7            pop d
2830   13D3 FD 43         mov [d], b
2831   13D5             _if35_exit:
2832   13D5             _if34_exit:
2833   13D5             _for33_update:
2834   13D5 FA FD FF      lea d, [bp + -3] ; $i
2835   13D8 2A            mov b, [d]
2836   13D9 FD 77         inc b
2837   13DB FA FD FF      lea d, [bp + -3] ; $i
2838   13DE FD 43         mov [d], b
2839   13E0 FD 7D         dec b
2840   13E2 0A D2 12      jmp _for33_cond
2841   13E5             _for33_exit:
2842   13E5             ; return value; 
2843   13E5 FA FF FF      lea d, [bp + -1] ; $value
2844   13E8 2A            mov b, [d]
2845   13E9 F9            leave
2846   13EA 09            ret
2847   13EB             
2848   13EB             gets:
2849   13EB F8 00 00      enter 0 ; (push bp; mov bp, sp)
2850   13EE             
2851   13EE             ; --- BEGIN INLINE ASM SEGMENT
2852   13EE FA 05 00      lea d, [bp + 5] ; $s
2853   13F1 15            mov a, [d]
2854   13F2 3C            mov d, a
2855   13F3 07 6B 1F      call _gets
2856   13F6             ; --- END INLINE ASM SEGMENT
2857   13F6             
2858   13F6             ; return strlen(s); 
2859   13F6 FA 05 00      lea d, [bp + 5] ; $s
2860   13F9 2A            mov b, [d]
2861   13FA FD AB         swp b
2862   13FC D8            push b
2863   13FD 07 0E 08      call strlen
2864   1400 51 02 00      add sp, 2
2865   1403 F9            leave
2866   1404 09            ret
2867   1405             
2868   1405             print_signed:
2869   1405 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2870   1408             ; char digits[5]; 
2871   1408 52 05 00      sub sp, 5
2872   140B             ; int i = 0; 
2873   140B 52 02 00      sub sp, 2
2874   140E             ; --- START LOCAL VAR INITIALIZATION
2875   140E FA FA FF      lea d, [bp + -6] ; $i
2876   1411 DA            push d
2877   1412 26 00 00      mov b, $0
2878   1415 E7            pop d
2879   1416 FD 43         mov [d], b
2880   1418             ; --- END LOCAL VAR INITIALIZATION
2881   1418             ; if (num < 0) { 
2882   1418             _if36_cond:
2883   1418 FA 05 00      lea d, [bp + 5] ; $num
2884   141B 2A            mov b, [d]
2885   141C             ; --- START RELATIONAL
2886   141C D7            push a
2887   141D 11            mov a, b
2888   141E 26 00 00      mov b, $0
2889   1421 B0            cmp a, b
2890   1422 FD 73         slt ; < (signed)
2891   1424 E4            pop a
2892   1425             ; --- END RELATIONAL
2893   1425 C0 00 00      cmp b, 0
2894   1428 C6 45 14      je _if36_else
2895   142B             _if36_true:
2896   142B             ; putchar('-'); 
2897   142B 26 2D 00      mov b, $2d
2898   142E DD            push bl
2899   142F 07 6D 1D      call putchar
2900   1432 51 01 00      add sp, 1
2901   1435             ; num = -num; 
2902   1435 FA 05 00      lea d, [bp + 5] ; $num
2903   1438 DA            push d
2904   1439 FA 05 00      lea d, [bp + 5] ; $num
2905   143C 2A            mov b, [d]
2906   143D FD 97         neg b
2907   143F E7            pop d
2908   1440 FD 43         mov [d], b
2909   1442 0A 67 14      jmp _if36_exit
2910   1445             _if36_else:
2911   1445             ; if (num == 0) { 
2912   1445             _if37_cond:
2913   1445 FA 05 00      lea d, [bp + 5] ; $num
2914   1448 2A            mov b, [d]
2915   1449             ; --- START RELATIONAL
2916   1449 D7            push a
2917   144A 11            mov a, b
2918   144B 26 00 00      mov b, $0
2919   144E B0            cmp a, b
2920   144F FD 71         seq ; ==
2921   1451 E4            pop a
2922   1452             ; --- END RELATIONAL
2923   1452 C0 00 00      cmp b, 0
2924   1455 C6 67 14      je _if37_exit
2925   1458             _if37_true:
2926   1458             ; putchar('0'); 
2927   1458 26 30 00      mov b, $30
2928   145B DD            push bl
2929   145C 07 6D 1D      call putchar
2930   145F 51 01 00      add sp, 1
2931   1462             ; return; 
2932   1462 F9            leave
2933   1463 09            ret
2934   1464 0A 67 14      jmp _if37_exit
2935   1467             _if37_exit:
2936   1467             _if36_exit:
2937   1467             ; while (num > 0) { 
2938   1467             _while38_cond:
2939   1467 FA 05 00      lea d, [bp + 5] ; $num
2940   146A 2A            mov b, [d]
2941   146B             ; --- START RELATIONAL
2942   146B D7            push a
2943   146C 11            mov a, b
2944   146D 26 00 00      mov b, $0
2945   1470 B0            cmp a, b
2946   1471 FD 7F         sgt ; >
2947   1473 E4            pop a
2948   1474             ; --- END RELATIONAL
2949   1474 C0 00 00      cmp b, 0
2950   1477 C6 C1 14      je _while38_exit
2951   147A             _while38_block:
2952   147A             ; digits[i] = '0' + (num % 10); 
2953   147A FA FC FF      lea d, [bp + -4] ; $digits
2954   147D D7            push a
2955   147E DA            push d
2956   147F FA FA FF      lea d, [bp + -6] ; $i
2957   1482 2A            mov b, [d]
2958   1483 E7            pop d
2959   1484 5A            add d, b
2960   1485 E4            pop a
2961   1486 DA            push d
2962   1487 26 30 00      mov b, $30
2963   148A             ; --- START TERMS
2964   148A D7            push a
2965   148B 11            mov a, b
2966   148C FA 05 00      lea d, [bp + 5] ; $num
2967   148F 2A            mov b, [d]
2968   1490             ; --- START FACTORS
2969   1490 D7            push a
2970   1491 11            mov a, b
2971   1492 26 0A 00      mov b, $a
2972   1495 AE            div a, b ; 
2973   1496 11            mov a, b
2974   1497 27            mov b, a
2975   1498 E4            pop a
2976   1499             ; --- END FACTORS
2977   1499 56            add b, a
2978   149A E4            pop a
2979   149B             ; --- END TERMS
2980   149B E7            pop d
2981   149C FD 3E         mov [d], bl
2982   149E             ; num = num / 10; 
2983   149E FA 05 00      lea d, [bp + 5] ; $num
2984   14A1 DA            push d
2985   14A2 FA 05 00      lea d, [bp + 5] ; $num
2986   14A5 2A            mov b, [d]
2987   14A6             ; --- START FACTORS
2988   14A6 D7            push a
2989   14A7 11            mov a, b
2990   14A8 26 0A 00      mov b, $a
2991   14AB AE            div a, b
2992   14AC 27            mov b, a
2993   14AD E4            pop a
2994   14AE             ; --- END FACTORS
2995   14AE E7            pop d
2996   14AF FD 43         mov [d], b
2997   14B1             ; i++; 
2998   14B1 FA FA FF      lea d, [bp + -6] ; $i
2999   14B4 2A            mov b, [d]
3000   14B5 FD 77         inc b
3001   14B7 FA FA FF      lea d, [bp + -6] ; $i
3002   14BA FD 43         mov [d], b
3003   14BC FD 7D         dec b
3004   14BE 0A 67 14      jmp _while38_cond
3005   14C1             _while38_exit:
3006   14C1             ; while (i > 0) { 
3007   14C1             _while39_cond:
3008   14C1 FA FA FF      lea d, [bp + -6] ; $i
3009   14C4 2A            mov b, [d]
3010   14C5             ; --- START RELATIONAL
3011   14C5 D7            push a
3012   14C6 11            mov a, b
3013   14C7 26 00 00      mov b, $0
3014   14CA B0            cmp a, b
3015   14CB FD 7F         sgt ; >
3016   14CD E4            pop a
3017   14CE             ; --- END RELATIONAL
3018   14CE C0 00 00      cmp b, 0
3019   14D1 C6 FA 14      je _while39_exit
3020   14D4             _while39_block:
3021   14D4             ; i--; 
3022   14D4 FA FA FF      lea d, [bp + -6] ; $i
3023   14D7 2A            mov b, [d]
3024   14D8 FD 7D         dec b
3025   14DA FA FA FF      lea d, [bp + -6] ; $i
3026   14DD FD 43         mov [d], b
3027   14DF FD 77         inc b
3028   14E1             ; putchar(digits[i]); 
3029   14E1 FA FC FF      lea d, [bp + -4] ; $digits
3030   14E4 D7            push a
3031   14E5 DA            push d
3032   14E6 FA FA FF      lea d, [bp + -6] ; $i
3033   14E9 2A            mov b, [d]
3034   14EA E7            pop d
3035   14EB 5A            add d, b
3036   14EC E4            pop a
3037   14ED 32            mov bl, [d]
3038   14EE A7 00         mov bh, 0
3039   14F0 DD            push bl
3040   14F1 07 6D 1D      call putchar
3041   14F4 51 01 00      add sp, 1
3042   14F7 0A C1 14      jmp _while39_cond
3043   14FA             _while39_exit:
3044   14FA F9            leave
3045   14FB 09            ret
3046   14FC             
3047   14FC             print_signed_long:
3048   14FC F8 00 00      enter 0 ; (push bp; mov bp, sp)
3049   14FF             ; char digits[10]; 
3050   14FF 52 0A 00      sub sp, 10
3051   1502             ; int i = 0; 
3052   1502 52 02 00      sub sp, 2
3053   1505             ; --- START LOCAL VAR INITIALIZATION
3054   1505 FA F5 FF      lea d, [bp + -11] ; $i
3055   1508 DA            push d
3056   1509 26 00 00      mov b, $0
3057   150C E7            pop d
3058   150D FD 43         mov [d], b
3059   150F             ; --- END LOCAL VAR INITIALIZATION
3060   150F             ; if (num < 0) { 
3061   150F             _if40_cond:
3062   150F FA 05 00      lea d, [bp + 5] ; $num
3063   1512 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3064   1515 FD 39         mov c, b ; And place it into C
3065   1517 2A            mov b, [d] ; Lower Word in B
3066   1518             ; --- START RELATIONAL
3067   1518 D7            push a
3068   1519 FD D8         push g
3069   151B 11            mov a, b
3070   151C FD 7A         mov g, c
3071   151E 26 00 00      mov b, $0
3072   1521 38 00 00      mov c, 0
3073   1524 FD AF 00 00   cmp32 ga, cb
3073   1528 00 00 00 00 
3073   152C 00 00 00 00 
3073   1530 00 00 00 00 
3073   1534 00 00 00 00 
3073   1538 00 00 00 00 
3073   153C 00 00 00 00 
3073   1540 00 00 00 00 
3073   1544 00 00 00 00 
3073   1548 00 00 00 00 
3073   154C 00 00 00 00 
3073   1550 00 00 00 00 
3073   1554 00 00 00 00 
3073   1558 00 00 00 00 
3073   155C 00 00 00 00 
3073   1560 00 00 00 00 
3073   1564 00 00 00 00 
3073   1568 00 00 00 00 
3073   156C 00 00 00 00 
3073   1570 00 00 00 00 
3073   1574 00 00 00 00 
3073   1578 00 00 00 00 
3073   157C 00 00 00 00 
3073   1580 00 00 00 00 
3073   1584 00 00 00 00 
3073   1588 00 00 00 00 
3073   158C 00 00 00 00 
3073   1590 00 00 00 00 
3073   1594 00 00 00 00 
3073   1598 00 00 00 00 
3073   159C 00 00 00 00 
3073   15A0 00 00 00 00 
3073   15A4 00 00 00 00 
3073   15A8 00 00 00 00 
3073   15AC 00 00 00 00 
3073   15B0 00 00 00 00 
3073   15B4 00 00 00 00 
3073   15B8 00 00 00 00 
3073   15BC 00 00 00 00 
3073   15C0 00 00 00 00 
3073   15C4 00 00 00 00 
3073   15C8 00 00 00 00 
3073   15CC 00 00 00 00 
3073   15D0 00 00 00 00 
3073   15D4 00 00 00 00 
3073   15D8 00 00 00 00 
3073   15DC 00 00 00 00 
3073   15E0 00 00 00 00 
3073   15E4 00 00 00 00 
3073   15E8 00 00 00 00 
3073   15EC 00 00 00 00 
3073   15F0 00 00 00 00 
3073   15F4 00 00 00 00 
3073   15F8 00 00 00 00 
3073   15FC 00 00 00 00 
3073   1600 00 00 00 00 
3073   1604 00 00 00 00 
3073   1608 00 00 00 00 
3073   160C 00 00 00 00 
3073   1610 00 00 00 00 
3073   1614 00 00 00 00 
3073   1618 00 00 00 00 
3073   161C 00 00 00 00 
3073   1620 00 00 00 00 
3073   1624 00 
3074   1625 FD 73         slt ; <
3075   1627 FD F1         pop g
3076   1629 E4            pop a
3077   162A             ; --- END RELATIONAL
3078   162A C0 00 00      cmp b, 0
3079   162D C6 54 16      je _if40_else
3080   1630             _if40_true:
3081   1630             ; putchar('-'); 
3082   1630 26 2D 00      mov b, $2d
3083   1633 DD            push bl
3084   1634 07 6D 1D      call putchar
3085   1637 51 01 00      add sp, 1
3086   163A             ; num = -num; 
3087   163A FA 05 00      lea d, [bp + 5] ; $num
3088   163D DA            push d
3089   163E FA 05 00      lea d, [bp + 5] ; $num
3090   1641 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3091   1644 FD 39         mov c, b ; And place it into C
3092   1646 2A            mov b, [d] ; Lower Word in B
3093   1647 FD 97         neg b
3094   1649 E7            pop d
3095   164A FD 43         mov [d], b
3096   164C 28            mov b, c
3097   164D FD 44 02 00   mov [d + 2], b
3098   1651 0A 84 17      jmp _if40_exit
3099   1654             _if40_else:
3100   1654             ; if (num == 0) { 
3101   1654             _if41_cond:
3102   1654 FA 05 00      lea d, [bp + 5] ; $num
3103   1657 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3104   165A FD 39         mov c, b ; And place it into C
3105   165C 2A            mov b, [d] ; Lower Word in B
3106   165D             ; --- START RELATIONAL
3107   165D D7            push a
3108   165E FD D8         push g
3109   1660 11            mov a, b
3110   1661 FD 7A         mov g, c
3111   1663 26 00 00      mov b, $0
3112   1666 38 00 00      mov c, 0
3113   1669 FD AF 00 00   cmp32 ga, cb
3113   166D 00 00 00 00 
3113   1671 00 00 00 00 
3113   1675 00 00 00 00 
3113   1679 00 00 00 00 
3113   167D 00 00 00 00 
3113   1681 00 00 00 00 
3113   1685 00 00 00 00 
3113   1689 00 00 00 00 
3113   168D 00 00 00 00 
3113   1691 00 00 00 00 
3113   1695 00 00 00 00 
3113   1699 00 00 00 00 
3113   169D 00 00 00 00 
3113   16A1 00 00 00 00 
3113   16A5 00 00 00 00 
3113   16A9 00 00 00 00 
3113   16AD 00 00 00 00 
3113   16B1 00 00 00 00 
3113   16B5 00 00 00 00 
3113   16B9 00 00 00 00 
3113   16BD 00 00 00 00 
3113   16C1 00 00 00 00 
3113   16C5 00 00 00 00 
3113   16C9 00 00 00 00 
3113   16CD 00 00 00 00 
3113   16D1 00 00 00 00 
3113   16D5 00 00 00 00 
3113   16D9 00 00 00 00 
3113   16DD 00 00 00 00 
3113   16E1 00 00 00 00 
3113   16E5 00 00 00 00 
3113   16E9 00 00 00 00 
3113   16ED 00 00 00 00 
3113   16F1 00 00 00 00 
3113   16F5 00 00 00 00 
3113   16F9 00 00 00 00 
3113   16FD 00 00 00 00 
3113   1701 00 00 00 00 
3113   1705 00 00 00 00 
3113   1709 00 00 00 00 
3113   170D 00 00 00 00 
3113   1711 00 00 00 00 
3113   1715 00 00 00 00 
3113   1719 00 00 00 00 
3113   171D 00 00 00 00 
3113   1721 00 00 00 00 
3113   1725 00 00 00 00 
3113   1729 00 00 00 00 
3113   172D 00 00 00 00 
3113   1731 00 00 00 00 
3113   1735 00 00 00 00 
3113   1739 00 00 00 00 
3113   173D 00 00 00 00 
3113   1741 00 00 00 00 
3113   1745 00 00 00 00 
3113   1749 00 00 00 00 
3113   174D 00 00 00 00 
3113   1751 00 00 00 00 
3113   1755 00 00 00 00 
3113   1759 00 00 00 00 
3113   175D 00 00 00 00 
3113   1761 00 00 00 00 
3113   1765 00 00 00 00 
3113   1769 00 
3114   176A FD 71         seq ; ==
3115   176C FD F1         pop g
3116   176E E4            pop a
3117   176F             ; --- END RELATIONAL
3118   176F C0 00 00      cmp b, 0
3119   1772 C6 84 17      je _if41_exit
3120   1775             _if41_true:
3121   1775             ; putchar('0'); 
3122   1775 26 30 00      mov b, $30
3123   1778 DD            push bl
3124   1779 07 6D 1D      call putchar
3125   177C 51 01 00      add sp, 1
3126   177F             ; return; 
3127   177F F9            leave
3128   1780 09            ret
3129   1781 0A 84 17      jmp _if41_exit
3130   1784             _if41_exit:
3131   1784             _if40_exit:
3132   1784             ; while (num > 0) { 
3133   1784             _while42_cond:
3134   1784 FA 05 00      lea d, [bp + 5] ; $num
3135   1787 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3136   178A FD 39         mov c, b ; And place it into C
3137   178C 2A            mov b, [d] ; Lower Word in B
3138   178D             ; --- START RELATIONAL
3139   178D D7            push a
3140   178E FD D8         push g
3141   1790 11            mov a, b
3142   1791 FD 7A         mov g, c
3143   1793 26 00 00      mov b, $0
3144   1796 38 00 00      mov c, 0
3145   1799 FD 7F         sgt
3146   179B FD F1         pop g
3147   179D E4            pop a
3148   179E             ; --- END RELATIONAL
3149   179E C0 00 00      cmp b, 0
3150   17A1 C6 01 18      je _while42_exit
3151   17A4             _while42_block:
3152   17A4             ; digits[i] = '0' + (num % 10); 
3153   17A4 FA F7 FF      lea d, [bp + -9] ; $digits
3154   17A7 D7            push a
3155   17A8 DA            push d
3156   17A9 FA F5 FF      lea d, [bp + -11] ; $i
3157   17AC 2A            mov b, [d]
3158   17AD E7            pop d
3159   17AE 5A            add d, b
3160   17AF E4            pop a
3161   17B0 DA            push d
3162   17B1 26 30 00      mov b, $30
3163   17B4             ; --- START TERMS
3164   17B4 D7            push a
3165   17B5 11            mov a, b
3166   17B6 FA 05 00      lea d, [bp + 5] ; $num
3167   17B9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3168   17BC FD 39         mov c, b ; And place it into C
3169   17BE 2A            mov b, [d] ; Lower Word in B
3170   17BF             ; --- START FACTORS
3171   17BF D7            push a
3172   17C0 11            mov a, b
3173   17C1 26 0A 00      mov b, $a
3174   17C4 AE            div a, b ; 
3175   17C5 11            mov a, b
3176   17C6 27            mov b, a
3177   17C7 E4            pop a
3178   17C8             ; --- END FACTORS
3179   17C8 54            add a, b
3180   17C9 D7            push a
3181   17CA FD 12         mov a, g
3182   17CC 28            mov b, c
3183   17CD 5C            adc a, b
3184   17CE 39            mov c, a
3185   17CF E5            pop b
3186   17D0 E4            pop a
3187   17D1             ; --- END TERMS
3188   17D1 E7            pop d
3189   17D2 FD 3E         mov [d], bl
3190   17D4             ; num = num / 10; 
3191   17D4 FA 05 00      lea d, [bp + 5] ; $num
3192   17D7 DA            push d
3193   17D8 FA 05 00      lea d, [bp + 5] ; $num
3194   17DB 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3195   17DE FD 39         mov c, b ; And place it into C
3196   17E0 2A            mov b, [d] ; Lower Word in B
3197   17E1             ; --- START FACTORS
3198   17E1 D7            push a
3199   17E2 11            mov a, b
3200   17E3 26 0A 00      mov b, $a
3201   17E6 AE            div a, b
3202   17E7 27            mov b, a
3203   17E8 E4            pop a
3204   17E9             ; --- END FACTORS
3205   17E9 E7            pop d
3206   17EA FD 43         mov [d], b
3207   17EC 28            mov b, c
3208   17ED FD 44 02 00   mov [d + 2], b
3209   17F1             ; i++; 
3210   17F1 FA F5 FF      lea d, [bp + -11] ; $i
3211   17F4 2A            mov b, [d]
3212   17F5 FD 77         inc b
3213   17F7 FA F5 FF      lea d, [bp + -11] ; $i
3214   17FA FD 43         mov [d], b
3215   17FC FD 7D         dec b
3216   17FE 0A 84 17      jmp _while42_cond
3217   1801             _while42_exit:
3218   1801             ; while (i > 0) { 
3219   1801             _while43_cond:
3220   1801 FA F5 FF      lea d, [bp + -11] ; $i
3221   1804 2A            mov b, [d]
3222   1805             ; --- START RELATIONAL
3223   1805 D7            push a
3224   1806 11            mov a, b
3225   1807 26 00 00      mov b, $0
3226   180A B0            cmp a, b
3227   180B FD 7F         sgt ; >
3228   180D E4            pop a
3229   180E             ; --- END RELATIONAL
3230   180E C0 00 00      cmp b, 0
3231   1811 C6 3A 18      je _while43_exit
3232   1814             _while43_block:
3233   1814             ; i--; 
3234   1814 FA F5 FF      lea d, [bp + -11] ; $i
3235   1817 2A            mov b, [d]
3236   1818 FD 7D         dec b
3237   181A FA F5 FF      lea d, [bp + -11] ; $i
3238   181D FD 43         mov [d], b
3239   181F FD 77         inc b
3240   1821             ; putchar(digits[i]); 
3241   1821 FA F7 FF      lea d, [bp + -9] ; $digits
3242   1824 D7            push a
3243   1825 DA            push d
3244   1826 FA F5 FF      lea d, [bp + -11] ; $i
3245   1829 2A            mov b, [d]
3246   182A E7            pop d
3247   182B 5A            add d, b
3248   182C E4            pop a
3249   182D 32            mov bl, [d]
3250   182E A7 00         mov bh, 0
3251   1830 DD            push bl
3252   1831 07 6D 1D      call putchar
3253   1834 51 01 00      add sp, 1
3254   1837 0A 01 18      jmp _while43_cond
3255   183A             _while43_exit:
3256   183A F9            leave
3257   183B 09            ret
3258   183C             
3259   183C             print_unsigned_long:
3260   183C F8 00 00      enter 0 ; (push bp; mov bp, sp)
3261   183F             ; char digits[10]; 
3262   183F 52 0A 00      sub sp, 10
3263   1842             ; int i; 
3264   1842 52 02 00      sub sp, 2
3265   1845             ; i = 0; 
3266   1845 FA F5 FF      lea d, [bp + -11] ; $i
3267   1848 DA            push d
3268   1849 26 00 00      mov b, $0
3269   184C E7            pop d
3270   184D FD 43         mov [d], b
3271   184F             ; if(num == 0){ 
3272   184F             _if44_cond:
3273   184F FA 05 00      lea d, [bp + 5] ; $num
3274   1852 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3275   1855 FD 39         mov c, b ; And place it into C
3276   1857 2A            mov b, [d] ; Lower Word in B
3277   1858             ; --- START RELATIONAL
3278   1858 D7            push a
3279   1859 FD D8         push g
3280   185B 11            mov a, b
3281   185C FD 7A         mov g, c
3282   185E 26 00 00      mov b, $0
3283   1861 38 00 00      mov c, 0
3284   1864 FD AF 00 00   cmp32 ga, cb
3284   1868 00 00 00 00 
3284   186C 00 00 00 00 
3284   1870 00 00 00 00 
3284   1874 00 00 00 00 
3284   1878 00 00 00 00 
3284   187C 00 00 00 00 
3284   1880 00 00 00 00 
3284   1884 00 00 00 00 
3284   1888 00 00 00 00 
3284   188C 00 00 00 00 
3284   1890 00 00 00 00 
3284   1894 00 00 00 00 
3284   1898 00 00 00 00 
3284   189C 00 00 00 00 
3284   18A0 00 00 00 00 
3284   18A4 00 00 00 00 
3284   18A8 00 00 00 00 
3284   18AC 00 00 00 00 
3284   18B0 00 00 00 00 
3284   18B4 00 00 00 00 
3284   18B8 00 00 00 00 
3284   18BC 00 00 00 00 
3284   18C0 00 00 00 00 
3284   18C4 00 00 00 00 
3284   18C8 00 00 00 00 
3284   18CC 00 00 00 00 
3284   18D0 00 00 00 00 
3284   18D4 00 00 00 00 
3284   18D8 00 00 00 00 
3284   18DC 00 00 00 00 
3284   18E0 00 00 00 00 
3284   18E4 00 00 00 00 
3284   18E8 00 00 00 00 
3284   18EC 00 00 00 00 
3284   18F0 00 00 00 00 
3284   18F4 00 00 00 00 
3284   18F8 00 00 00 00 
3284   18FC 00 00 00 00 
3284   1900 00 00 00 00 
3284   1904 00 00 00 00 
3284   1908 00 00 00 00 
3284   190C 00 00 00 00 
3284   1910 00 00 00 00 
3284   1914 00 00 00 00 
3284   1918 00 00 00 00 
3284   191C 00 00 00 00 
3284   1920 00 00 00 00 
3284   1924 00 00 00 00 
3284   1928 00 00 00 00 
3284   192C 00 00 00 00 
3284   1930 00 00 00 00 
3284   1934 00 00 00 00 
3284   1938 00 00 00 00 
3284   193C 00 00 00 00 
3284   1940 00 00 00 00 
3284   1944 00 00 00 00 
3284   1948 00 00 00 00 
3284   194C 00 00 00 00 
3284   1950 00 00 00 00 
3284   1954 00 00 00 00 
3284   1958 00 00 00 00 
3284   195C 00 00 00 00 
3284   1960 00 00 00 00 
3284   1964 00 
3285   1965 FD 71         seq ; ==
3286   1967 FD F1         pop g
3287   1969 E4            pop a
3288   196A             ; --- END RELATIONAL
3289   196A C0 00 00      cmp b, 0
3290   196D C6 7F 19      je _if44_exit
3291   1970             _if44_true:
3292   1970             ; putchar('0'); 
3293   1970 26 30 00      mov b, $30
3294   1973 DD            push bl
3295   1974 07 6D 1D      call putchar
3296   1977 51 01 00      add sp, 1
3297   197A             ; return; 
3298   197A F9            leave
3299   197B 09            ret
3300   197C 0A 7F 19      jmp _if44_exit
3301   197F             _if44_exit:
3302   197F             ; while (num > 0) { 
3303   197F             _while45_cond:
3304   197F FA 05 00      lea d, [bp + 5] ; $num
3305   1982 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3306   1985 FD 39         mov c, b ; And place it into C
3307   1987 2A            mov b, [d] ; Lower Word in B
3308   1988             ; --- START RELATIONAL
3309   1988 D7            push a
3310   1989 FD D8         push g
3311   198B 11            mov a, b
3312   198C FD 7A         mov g, c
3313   198E 26 00 00      mov b, $0
3314   1991 38 00 00      mov c, 0
3315   1994 FD 81         sgu
3316   1996 FD F1         pop g
3317   1998 E4            pop a
3318   1999             ; --- END RELATIONAL
3319   1999 C0 00 00      cmp b, 0
3320   199C C6 FC 19      je _while45_exit
3321   199F             _while45_block:
3322   199F             ; digits[i] = '0' + (num % 10); 
3323   199F FA F7 FF      lea d, [bp + -9] ; $digits
3324   19A2 D7            push a
3325   19A3 DA            push d
3326   19A4 FA F5 FF      lea d, [bp + -11] ; $i
3327   19A7 2A            mov b, [d]
3328   19A8 E7            pop d
3329   19A9 5A            add d, b
3330   19AA E4            pop a
3331   19AB DA            push d
3332   19AC 26 30 00      mov b, $30
3333   19AF             ; --- START TERMS
3334   19AF D7            push a
3335   19B0 11            mov a, b
3336   19B1 FA 05 00      lea d, [bp + 5] ; $num
3337   19B4 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3338   19B7 FD 39         mov c, b ; And place it into C
3339   19B9 2A            mov b, [d] ; Lower Word in B
3340   19BA             ; --- START FACTORS
3341   19BA D7            push a
3342   19BB 11            mov a, b
3343   19BC 26 0A 00      mov b, $a
3344   19BF AE            div a, b ; 
3345   19C0 11            mov a, b
3346   19C1 27            mov b, a
3347   19C2 E4            pop a
3348   19C3             ; --- END FACTORS
3349   19C3 54            add a, b
3350   19C4 D7            push a
3351   19C5 FD 12         mov a, g
3352   19C7 28            mov b, c
3353   19C8 5C            adc a, b
3354   19C9 39            mov c, a
3355   19CA E5            pop b
3356   19CB E4            pop a
3357   19CC             ; --- END TERMS
3358   19CC E7            pop d
3359   19CD FD 3E         mov [d], bl
3360   19CF             ; num = num / 10; 
3361   19CF FA 05 00      lea d, [bp + 5] ; $num
3362   19D2 DA            push d
3363   19D3 FA 05 00      lea d, [bp + 5] ; $num
3364   19D6 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3365   19D9 FD 39         mov c, b ; And place it into C
3366   19DB 2A            mov b, [d] ; Lower Word in B
3367   19DC             ; --- START FACTORS
3368   19DC D7            push a
3369   19DD 11            mov a, b
3370   19DE 26 0A 00      mov b, $a
3371   19E1 AE            div a, b
3372   19E2 27            mov b, a
3373   19E3 E4            pop a
3374   19E4             ; --- END FACTORS
3375   19E4 E7            pop d
3376   19E5 FD 43         mov [d], b
3377   19E7 28            mov b, c
3378   19E8 FD 44 02 00   mov [d + 2], b
3379   19EC             ; i++; 
3380   19EC FA F5 FF      lea d, [bp + -11] ; $i
3381   19EF 2A            mov b, [d]
3382   19F0 FD 77         inc b
3383   19F2 FA F5 FF      lea d, [bp + -11] ; $i
3384   19F5 FD 43         mov [d], b
3385   19F7 FD 7D         dec b
3386   19F9 0A 7F 19      jmp _while45_cond
3387   19FC             _while45_exit:
3388   19FC             ; while (i > 0) { 
3389   19FC             _while46_cond:
3390   19FC FA F5 FF      lea d, [bp + -11] ; $i
3391   19FF 2A            mov b, [d]
3392   1A00             ; --- START RELATIONAL
3393   1A00 D7            push a
3394   1A01 11            mov a, b
3395   1A02 26 00 00      mov b, $0
3396   1A05 B0            cmp a, b
3397   1A06 FD 7F         sgt ; >
3398   1A08 E4            pop a
3399   1A09             ; --- END RELATIONAL
3400   1A09 C0 00 00      cmp b, 0
3401   1A0C C6 35 1A      je _while46_exit
3402   1A0F             _while46_block:
3403   1A0F             ; i--; 
3404   1A0F FA F5 FF      lea d, [bp + -11] ; $i
3405   1A12 2A            mov b, [d]
3406   1A13 FD 7D         dec b
3407   1A15 FA F5 FF      lea d, [bp + -11] ; $i
3408   1A18 FD 43         mov [d], b
3409   1A1A FD 77         inc b
3410   1A1C             ; putchar(digits[i]); 
3411   1A1C FA F7 FF      lea d, [bp + -9] ; $digits
3412   1A1F D7            push a
3413   1A20 DA            push d
3414   1A21 FA F5 FF      lea d, [bp + -11] ; $i
3415   1A24 2A            mov b, [d]
3416   1A25 E7            pop d
3417   1A26 5A            add d, b
3418   1A27 E4            pop a
3419   1A28 32            mov bl, [d]
3420   1A29 A7 00         mov bh, 0
3421   1A2B DD            push bl
3422   1A2C 07 6D 1D      call putchar
3423   1A2F 51 01 00      add sp, 1
3424   1A32 0A FC 19      jmp _while46_cond
3425   1A35             _while46_exit:
3426   1A35 F9            leave
3427   1A36 09            ret
3428   1A37             
3429   1A37             sprint_unsigned:
3430   1A37 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3431   1A3A             ; char digits[5]; 
3432   1A3A 52 05 00      sub sp, 5
3433   1A3D             ; int i; 
3434   1A3D 52 02 00      sub sp, 2
3435   1A40             ; int len = 0; 
3436   1A40 52 02 00      sub sp, 2
3437   1A43             ; --- START LOCAL VAR INITIALIZATION
3438   1A43 FA F8 FF      lea d, [bp + -8] ; $len
3439   1A46 DA            push d
3440   1A47 26 00 00      mov b, $0
3441   1A4A E7            pop d
3442   1A4B FD 43         mov [d], b
3443   1A4D             ; --- END LOCAL VAR INITIALIZATION
3444   1A4D             ; i = 0; 
3445   1A4D FA FA FF      lea d, [bp + -6] ; $i
3446   1A50 DA            push d
3447   1A51 26 00 00      mov b, $0
3448   1A54 E7            pop d
3449   1A55 FD 43         mov [d], b
3450   1A57             ; if(num == 0){ 
3451   1A57             _if47_cond:
3452   1A57 FA 07 00      lea d, [bp + 7] ; $num
3453   1A5A 2A            mov b, [d]
3454   1A5B             ; --- START RELATIONAL
3455   1A5B D7            push a
3456   1A5C 11            mov a, b
3457   1A5D 26 00 00      mov b, $0
3458   1A60 B0            cmp a, b
3459   1A61 FD 71         seq ; ==
3460   1A63 E4            pop a
3461   1A64             ; --- END RELATIONAL
3462   1A64 C0 00 00      cmp b, 0
3463   1A67 C6 86 1A      je _if47_exit
3464   1A6A             _if47_true:
3465   1A6A             ; *dest++ = '0'; 
3466   1A6A FA 05 00      lea d, [bp + 5] ; $dest
3467   1A6D 2A            mov b, [d]
3468   1A6E FD 77         inc b
3469   1A70 FA 05 00      lea d, [bp + 5] ; $dest
3470   1A73 FD 43         mov [d], b
3471   1A75 FD 7D         dec b
3472   1A77 D8            push b
3473   1A78 26 30 00      mov b, $30
3474   1A7B E7            pop d
3475   1A7C FD 3E         mov [d], bl
3476   1A7E             ; return 1; 
3477   1A7E 26 01 00      mov b, $1
3478   1A81 F9            leave
3479   1A82 09            ret
3480   1A83 0A 86 1A      jmp _if47_exit
3481   1A86             _if47_exit:
3482   1A86             ; while (num > 0) { 
3483   1A86             _while48_cond:
3484   1A86 FA 07 00      lea d, [bp + 7] ; $num
3485   1A89 2A            mov b, [d]
3486   1A8A             ; --- START RELATIONAL
3487   1A8A D7            push a
3488   1A8B 11            mov a, b
3489   1A8C 26 00 00      mov b, $0
3490   1A8F B0            cmp a, b
3491   1A90 FD 81         sgu ; > (unsigned)
3492   1A92 E4            pop a
3493   1A93             ; --- END RELATIONAL
3494   1A93 C0 00 00      cmp b, 0
3495   1A96 C6 E0 1A      je _while48_exit
3496   1A99             _while48_block:
3497   1A99             ; digits[i] = '0' + (num % 10); 
3498   1A99 FA FC FF      lea d, [bp + -4] ; $digits
3499   1A9C D7            push a
3500   1A9D DA            push d
3501   1A9E FA FA FF      lea d, [bp + -6] ; $i
3502   1AA1 2A            mov b, [d]
3503   1AA2 E7            pop d
3504   1AA3 5A            add d, b
3505   1AA4 E4            pop a
3506   1AA5 DA            push d
3507   1AA6 26 30 00      mov b, $30
3508   1AA9             ; --- START TERMS
3509   1AA9 D7            push a
3510   1AAA 11            mov a, b
3511   1AAB FA 07 00      lea d, [bp + 7] ; $num
3512   1AAE 2A            mov b, [d]
3513   1AAF             ; --- START FACTORS
3514   1AAF D7            push a
3515   1AB0 11            mov a, b
3516   1AB1 26 0A 00      mov b, $a
3517   1AB4 AE            div a, b ; 
3518   1AB5 11            mov a, b
3519   1AB6 27            mov b, a
3520   1AB7 E4            pop a
3521   1AB8             ; --- END FACTORS
3522   1AB8 56            add b, a
3523   1AB9 E4            pop a
3524   1ABA             ; --- END TERMS
3525   1ABA E7            pop d
3526   1ABB FD 3E         mov [d], bl
3527   1ABD             ; num = num / 10; 
3528   1ABD FA 07 00      lea d, [bp + 7] ; $num
3529   1AC0 DA            push d
3530   1AC1 FA 07 00      lea d, [bp + 7] ; $num
3531   1AC4 2A            mov b, [d]
3532   1AC5             ; --- START FACTORS
3533   1AC5 D7            push a
3534   1AC6 11            mov a, b
3535   1AC7 26 0A 00      mov b, $a
3536   1ACA AE            div a, b
3537   1ACB 27            mov b, a
3538   1ACC E4            pop a
3539   1ACD             ; --- END FACTORS
3540   1ACD E7            pop d
3541   1ACE FD 43         mov [d], b
3542   1AD0             ; i++; 
3543   1AD0 FA FA FF      lea d, [bp + -6] ; $i
3544   1AD3 2A            mov b, [d]
3545   1AD4 FD 77         inc b
3546   1AD6 FA FA FF      lea d, [bp + -6] ; $i
3547   1AD9 FD 43         mov [d], b
3548   1ADB FD 7D         dec b
3549   1ADD 0A 86 1A      jmp _while48_cond
3550   1AE0             _while48_exit:
3551   1AE0             ; while (i > 0) { 
3552   1AE0             _while49_cond:
3553   1AE0 FA FA FF      lea d, [bp + -6] ; $i
3554   1AE3 2A            mov b, [d]
3555   1AE4             ; --- START RELATIONAL
3556   1AE4 D7            push a
3557   1AE5 11            mov a, b
3558   1AE6 26 00 00      mov b, $0
3559   1AE9 B0            cmp a, b
3560   1AEA FD 7F         sgt ; >
3561   1AEC E4            pop a
3562   1AED             ; --- END RELATIONAL
3563   1AED C0 00 00      cmp b, 0
3564   1AF0 C6 30 1B      je _while49_exit
3565   1AF3             _while49_block:
3566   1AF3             ; i--; 
3567   1AF3 FA FA FF      lea d, [bp + -6] ; $i
3568   1AF6 2A            mov b, [d]
3569   1AF7 FD 7D         dec b
3570   1AF9 FA FA FF      lea d, [bp + -6] ; $i
3571   1AFC FD 43         mov [d], b
3572   1AFE FD 77         inc b
3573   1B00             ; *dest++ = digits[i]; 
3574   1B00 FA 05 00      lea d, [bp + 5] ; $dest
3575   1B03 2A            mov b, [d]
3576   1B04 FD 77         inc b
3577   1B06 FA 05 00      lea d, [bp + 5] ; $dest
3578   1B09 FD 43         mov [d], b
3579   1B0B FD 7D         dec b
3580   1B0D D8            push b
3581   1B0E FA FC FF      lea d, [bp + -4] ; $digits
3582   1B11 D7            push a
3583   1B12 DA            push d
3584   1B13 FA FA FF      lea d, [bp + -6] ; $i
3585   1B16 2A            mov b, [d]
3586   1B17 E7            pop d
3587   1B18 5A            add d, b
3588   1B19 E4            pop a
3589   1B1A 32            mov bl, [d]
3590   1B1B A7 00         mov bh, 0
3591   1B1D E7            pop d
3592   1B1E FD 3E         mov [d], bl
3593   1B20             ; len++; 
3594   1B20 FA F8 FF      lea d, [bp + -8] ; $len
3595   1B23 2A            mov b, [d]
3596   1B24 FD 77         inc b
3597   1B26 FA F8 FF      lea d, [bp + -8] ; $len
3598   1B29 FD 43         mov [d], b
3599   1B2B FD 7D         dec b
3600   1B2D 0A E0 1A      jmp _while49_cond
3601   1B30             _while49_exit:
3602   1B30             ; *dest = '\0'; 
3603   1B30 FA 05 00      lea d, [bp + 5] ; $dest
3604   1B33 2A            mov b, [d]
3605   1B34 D8            push b
3606   1B35 26 00 00      mov b, $0
3607   1B38 E7            pop d
3608   1B39 FD 3E         mov [d], bl
3609   1B3B             ; return len; 
3610   1B3B FA F8 FF      lea d, [bp + -8] ; $len
3611   1B3E 2A            mov b, [d]
3612   1B3F F9            leave
3613   1B40 09            ret
3614   1B41             
3615   1B41             print_unsigned:
3616   1B41 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3617   1B44             ; char digits[5]; 
3618   1B44 52 05 00      sub sp, 5
3619   1B47             ; int i; 
3620   1B47 52 02 00      sub sp, 2
3621   1B4A             ; i = 0; 
3622   1B4A FA FA FF      lea d, [bp + -6] ; $i
3623   1B4D DA            push d
3624   1B4E 26 00 00      mov b, $0
3625   1B51 E7            pop d
3626   1B52 FD 43         mov [d], b
3627   1B54             ; if(num == 0){ 
3628   1B54             _if50_cond:
3629   1B54 FA 05 00      lea d, [bp + 5] ; $num
3630   1B57 2A            mov b, [d]
3631   1B58             ; --- START RELATIONAL
3632   1B58 D7            push a
3633   1B59 11            mov a, b
3634   1B5A 26 00 00      mov b, $0
3635   1B5D B0            cmp a, b
3636   1B5E FD 71         seq ; ==
3637   1B60 E4            pop a
3638   1B61             ; --- END RELATIONAL
3639   1B61 C0 00 00      cmp b, 0
3640   1B64 C6 76 1B      je _if50_exit
3641   1B67             _if50_true:
3642   1B67             ; putchar('0'); 
3643   1B67 26 30 00      mov b, $30
3644   1B6A DD            push bl
3645   1B6B 07 6D 1D      call putchar
3646   1B6E 51 01 00      add sp, 1
3647   1B71             ; return; 
3648   1B71 F9            leave
3649   1B72 09            ret
3650   1B73 0A 76 1B      jmp _if50_exit
3651   1B76             _if50_exit:
3652   1B76             ; while (num > 0) { 
3653   1B76             _while51_cond:
3654   1B76 FA 05 00      lea d, [bp + 5] ; $num
3655   1B79 2A            mov b, [d]
3656   1B7A             ; --- START RELATIONAL
3657   1B7A D7            push a
3658   1B7B 11            mov a, b
3659   1B7C 26 00 00      mov b, $0
3660   1B7F B0            cmp a, b
3661   1B80 FD 81         sgu ; > (unsigned)
3662   1B82 E4            pop a
3663   1B83             ; --- END RELATIONAL
3664   1B83 C0 00 00      cmp b, 0
3665   1B86 C6 D0 1B      je _while51_exit
3666   1B89             _while51_block:
3667   1B89             ; digits[i] = '0' + (num % 10); 
3668   1B89 FA FC FF      lea d, [bp + -4] ; $digits
3669   1B8C D7            push a
3670   1B8D DA            push d
3671   1B8E FA FA FF      lea d, [bp + -6] ; $i
3672   1B91 2A            mov b, [d]
3673   1B92 E7            pop d
3674   1B93 5A            add d, b
3675   1B94 E4            pop a
3676   1B95 DA            push d
3677   1B96 26 30 00      mov b, $30
3678   1B99             ; --- START TERMS
3679   1B99 D7            push a
3680   1B9A 11            mov a, b
3681   1B9B FA 05 00      lea d, [bp + 5] ; $num
3682   1B9E 2A            mov b, [d]
3683   1B9F             ; --- START FACTORS
3684   1B9F D7            push a
3685   1BA0 11            mov a, b
3686   1BA1 26 0A 00      mov b, $a
3687   1BA4 AE            div a, b ; 
3688   1BA5 11            mov a, b
3689   1BA6 27            mov b, a
3690   1BA7 E4            pop a
3691   1BA8             ; --- END FACTORS
3692   1BA8 56            add b, a
3693   1BA9 E4            pop a
3694   1BAA             ; --- END TERMS
3695   1BAA E7            pop d
3696   1BAB FD 3E         mov [d], bl
3697   1BAD             ; num = num / 10; 
3698   1BAD FA 05 00      lea d, [bp + 5] ; $num
3699   1BB0 DA            push d
3700   1BB1 FA 05 00      lea d, [bp + 5] ; $num
3701   1BB4 2A            mov b, [d]
3702   1BB5             ; --- START FACTORS
3703   1BB5 D7            push a
3704   1BB6 11            mov a, b
3705   1BB7 26 0A 00      mov b, $a
3706   1BBA AE            div a, b
3707   1BBB 27            mov b, a
3708   1BBC E4            pop a
3709   1BBD             ; --- END FACTORS
3710   1BBD E7            pop d
3711   1BBE FD 43         mov [d], b
3712   1BC0             ; i++; 
3713   1BC0 FA FA FF      lea d, [bp + -6] ; $i
3714   1BC3 2A            mov b, [d]
3715   1BC4 FD 77         inc b
3716   1BC6 FA FA FF      lea d, [bp + -6] ; $i
3717   1BC9 FD 43         mov [d], b
3718   1BCB FD 7D         dec b
3719   1BCD 0A 76 1B      jmp _while51_cond
3720   1BD0             _while51_exit:
3721   1BD0             ; while (i > 0) { 
3722   1BD0             _while52_cond:
3723   1BD0 FA FA FF      lea d, [bp + -6] ; $i
3724   1BD3 2A            mov b, [d]
3725   1BD4             ; --- START RELATIONAL
3726   1BD4 D7            push a
3727   1BD5 11            mov a, b
3728   1BD6 26 00 00      mov b, $0
3729   1BD9 B0            cmp a, b
3730   1BDA FD 7F         sgt ; >
3731   1BDC E4            pop a
3732   1BDD             ; --- END RELATIONAL
3733   1BDD C0 00 00      cmp b, 0
3734   1BE0 C6 09 1C      je _while52_exit
3735   1BE3             _while52_block:
3736   1BE3             ; i--; 
3737   1BE3 FA FA FF      lea d, [bp + -6] ; $i
3738   1BE6 2A            mov b, [d]
3739   1BE7 FD 7D         dec b
3740   1BE9 FA FA FF      lea d, [bp + -6] ; $i
3741   1BEC FD 43         mov [d], b
3742   1BEE FD 77         inc b
3743   1BF0             ; putchar(digits[i]); 
3744   1BF0 FA FC FF      lea d, [bp + -4] ; $digits
3745   1BF3 D7            push a
3746   1BF4 DA            push d
3747   1BF5 FA FA FF      lea d, [bp + -6] ; $i
3748   1BF8 2A            mov b, [d]
3749   1BF9 E7            pop d
3750   1BFA 5A            add d, b
3751   1BFB E4            pop a
3752   1BFC 32            mov bl, [d]
3753   1BFD A7 00         mov bh, 0
3754   1BFF DD            push bl
3755   1C00 07 6D 1D      call putchar
3756   1C03 51 01 00      add sp, 1
3757   1C06 0A D0 1B      jmp _while52_cond
3758   1C09             _while52_exit:
3759   1C09 F9            leave
3760   1C0A 09            ret
3761   1C0B             
3762   1C0B             sprint_signed:
3763   1C0B F8 00 00      enter 0 ; (push bp; mov bp, sp)
3764   1C0E             ; char digits[5]; 
3765   1C0E 52 05 00      sub sp, 5
3766   1C11             ; int i = 0; 
3767   1C11 52 02 00      sub sp, 2
3768   1C14             ; --- START LOCAL VAR INITIALIZATION
3769   1C14 FA FA FF      lea d, [bp + -6] ; $i
3770   1C17 DA            push d
3771   1C18 26 00 00      mov b, $0
3772   1C1B E7            pop d
3773   1C1C FD 43         mov [d], b
3774   1C1E             ; --- END LOCAL VAR INITIALIZATION
3775   1C1E             ; int len = 0; 
3776   1C1E 52 02 00      sub sp, 2
3777   1C21             ; --- START LOCAL VAR INITIALIZATION
3778   1C21 FA F8 FF      lea d, [bp + -8] ; $len
3779   1C24 DA            push d
3780   1C25 26 00 00      mov b, $0
3781   1C28 E7            pop d
3782   1C29 FD 43         mov [d], b
3783   1C2B             ; --- END LOCAL VAR INITIALIZATION
3784   1C2B             ; if (num < 0) { 
3785   1C2B             _if53_cond:
3786   1C2B FA 07 00      lea d, [bp + 7] ; $num
3787   1C2E 2A            mov b, [d]
3788   1C2F             ; --- START RELATIONAL
3789   1C2F D7            push a
3790   1C30 11            mov a, b
3791   1C31 26 00 00      mov b, $0
3792   1C34 B0            cmp a, b
3793   1C35 FD 73         slt ; < (signed)
3794   1C37 E4            pop a
3795   1C38             ; --- END RELATIONAL
3796   1C38 C0 00 00      cmp b, 0
3797   1C3B C6 6F 1C      je _if53_else
3798   1C3E             _if53_true:
3799   1C3E             ; *dest++ = '-'; 
3800   1C3E FA 05 00      lea d, [bp + 5] ; $dest
3801   1C41 2A            mov b, [d]
3802   1C42 FD 77         inc b
3803   1C44 FA 05 00      lea d, [bp + 5] ; $dest
3804   1C47 FD 43         mov [d], b
3805   1C49 FD 7D         dec b
3806   1C4B D8            push b
3807   1C4C 26 2D 00      mov b, $2d
3808   1C4F E7            pop d
3809   1C50 FD 3E         mov [d], bl
3810   1C52             ; num = -num; 
3811   1C52 FA 07 00      lea d, [bp + 7] ; $num
3812   1C55 DA            push d
3813   1C56 FA 07 00      lea d, [bp + 7] ; $num
3814   1C59 2A            mov b, [d]
3815   1C5A FD 97         neg b
3816   1C5C E7            pop d
3817   1C5D FD 43         mov [d], b
3818   1C5F             ; len++; 
3819   1C5F FA F8 FF      lea d, [bp + -8] ; $len
3820   1C62 2A            mov b, [d]
3821   1C63 FD 77         inc b
3822   1C65 FA F8 FF      lea d, [bp + -8] ; $len
3823   1C68 FD 43         mov [d], b
3824   1C6A FD 7D         dec b
3825   1C6C 0A A9 1C      jmp _if53_exit
3826   1C6F             _if53_else:
3827   1C6F             ; if (num == 0) { 
3828   1C6F             _if54_cond:
3829   1C6F FA 07 00      lea d, [bp + 7] ; $num
3830   1C72 2A            mov b, [d]
3831   1C73             ; --- START RELATIONAL
3832   1C73 D7            push a
3833   1C74 11            mov a, b
3834   1C75 26 00 00      mov b, $0
3835   1C78 B0            cmp a, b
3836   1C79 FD 71         seq ; ==
3837   1C7B E4            pop a
3838   1C7C             ; --- END RELATIONAL
3839   1C7C C0 00 00      cmp b, 0
3840   1C7F C6 A9 1C      je _if54_exit
3841   1C82             _if54_true:
3842   1C82             ; *dest++ = '0'; 
3843   1C82 FA 05 00      lea d, [bp + 5] ; $dest
3844   1C85 2A            mov b, [d]
3845   1C86 FD 77         inc b
3846   1C88 FA 05 00      lea d, [bp + 5] ; $dest
3847   1C8B FD 43         mov [d], b
3848   1C8D FD 7D         dec b
3849   1C8F D8            push b
3850   1C90 26 30 00      mov b, $30
3851   1C93 E7            pop d
3852   1C94 FD 3E         mov [d], bl
3853   1C96             ; *dest = '\0'; 
3854   1C96 FA 05 00      lea d, [bp + 5] ; $dest
3855   1C99 2A            mov b, [d]
3856   1C9A D8            push b
3857   1C9B 26 00 00      mov b, $0
3858   1C9E E7            pop d
3859   1C9F FD 3E         mov [d], bl
3860   1CA1             ; return 1; 
3861   1CA1 26 01 00      mov b, $1
3862   1CA4 F9            leave
3863   1CA5 09            ret
3864   1CA6 0A A9 1C      jmp _if54_exit
3865   1CA9             _if54_exit:
3866   1CA9             _if53_exit:
3867   1CA9             ; while (num > 0) { 
3868   1CA9             _while55_cond:
3869   1CA9 FA 07 00      lea d, [bp + 7] ; $num
3870   1CAC 2A            mov b, [d]
3871   1CAD             ; --- START RELATIONAL
3872   1CAD D7            push a
3873   1CAE 11            mov a, b
3874   1CAF 26 00 00      mov b, $0
3875   1CB2 B0            cmp a, b
3876   1CB3 FD 7F         sgt ; >
3877   1CB5 E4            pop a
3878   1CB6             ; --- END RELATIONAL
3879   1CB6 C0 00 00      cmp b, 0
3880   1CB9 C6 03 1D      je _while55_exit
3881   1CBC             _while55_block:
3882   1CBC             ; digits[i] = '0' + (num % 10); 
3883   1CBC FA FC FF      lea d, [bp + -4] ; $digits
3884   1CBF D7            push a
3885   1CC0 DA            push d
3886   1CC1 FA FA FF      lea d, [bp + -6] ; $i
3887   1CC4 2A            mov b, [d]
3888   1CC5 E7            pop d
3889   1CC6 5A            add d, b
3890   1CC7 E4            pop a
3891   1CC8 DA            push d
3892   1CC9 26 30 00      mov b, $30
3893   1CCC             ; --- START TERMS
3894   1CCC D7            push a
3895   1CCD 11            mov a, b
3896   1CCE FA 07 00      lea d, [bp + 7] ; $num
3897   1CD1 2A            mov b, [d]
3898   1CD2             ; --- START FACTORS
3899   1CD2 D7            push a
3900   1CD3 11            mov a, b
3901   1CD4 26 0A 00      mov b, $a
3902   1CD7 AE            div a, b ; 
3903   1CD8 11            mov a, b
3904   1CD9 27            mov b, a
3905   1CDA E4            pop a
3906   1CDB             ; --- END FACTORS
3907   1CDB 56            add b, a
3908   1CDC E4            pop a
3909   1CDD             ; --- END TERMS
3910   1CDD E7            pop d
3911   1CDE FD 3E         mov [d], bl
3912   1CE0             ; num = num / 10; 
3913   1CE0 FA 07 00      lea d, [bp + 7] ; $num
3914   1CE3 DA            push d
3915   1CE4 FA 07 00      lea d, [bp + 7] ; $num
3916   1CE7 2A            mov b, [d]
3917   1CE8             ; --- START FACTORS
3918   1CE8 D7            push a
3919   1CE9 11            mov a, b
3920   1CEA 26 0A 00      mov b, $a
3921   1CED AE            div a, b
3922   1CEE 27            mov b, a
3923   1CEF E4            pop a
3924   1CF0             ; --- END FACTORS
3925   1CF0 E7            pop d
3926   1CF1 FD 43         mov [d], b
3927   1CF3             ; i++; 
3928   1CF3 FA FA FF      lea d, [bp + -6] ; $i
3929   1CF6 2A            mov b, [d]
3930   1CF7 FD 77         inc b
3931   1CF9 FA FA FF      lea d, [bp + -6] ; $i
3932   1CFC FD 43         mov [d], b
3933   1CFE FD 7D         dec b
3934   1D00 0A A9 1C      jmp _while55_cond
3935   1D03             _while55_exit:
3936   1D03             ; while (i > 0) { 
3937   1D03             _while56_cond:
3938   1D03 FA FA FF      lea d, [bp + -6] ; $i
3939   1D06 2A            mov b, [d]
3940   1D07             ; --- START RELATIONAL
3941   1D07 D7            push a
3942   1D08 11            mov a, b
3943   1D09 26 00 00      mov b, $0
3944   1D0C B0            cmp a, b
3945   1D0D FD 7F         sgt ; >
3946   1D0F E4            pop a
3947   1D10             ; --- END RELATIONAL
3948   1D10 C0 00 00      cmp b, 0
3949   1D13 C6 53 1D      je _while56_exit
3950   1D16             _while56_block:
3951   1D16             ; i--; 
3952   1D16 FA FA FF      lea d, [bp + -6] ; $i
3953   1D19 2A            mov b, [d]
3954   1D1A FD 7D         dec b
3955   1D1C FA FA FF      lea d, [bp + -6] ; $i
3956   1D1F FD 43         mov [d], b
3957   1D21 FD 77         inc b
3958   1D23             ; *dest++ = digits[i]; 
3959   1D23 FA 05 00      lea d, [bp + 5] ; $dest
3960   1D26 2A            mov b, [d]
3961   1D27 FD 77         inc b
3962   1D29 FA 05 00      lea d, [bp + 5] ; $dest
3963   1D2C FD 43         mov [d], b
3964   1D2E FD 7D         dec b
3965   1D30 D8            push b
3966   1D31 FA FC FF      lea d, [bp + -4] ; $digits
3967   1D34 D7            push a
3968   1D35 DA            push d
3969   1D36 FA FA FF      lea d, [bp + -6] ; $i
3970   1D39 2A            mov b, [d]
3971   1D3A E7            pop d
3972   1D3B 5A            add d, b
3973   1D3C E4            pop a
3974   1D3D 32            mov bl, [d]
3975   1D3E A7 00         mov bh, 0
3976   1D40 E7            pop d
3977   1D41 FD 3E         mov [d], bl
3978   1D43             ; len++; 
3979   1D43 FA F8 FF      lea d, [bp + -8] ; $len
3980   1D46 2A            mov b, [d]
3981   1D47 FD 77         inc b
3982   1D49 FA F8 FF      lea d, [bp + -8] ; $len
3983   1D4C FD 43         mov [d], b
3984   1D4E FD 7D         dec b
3985   1D50 0A 03 1D      jmp _while56_cond
3986   1D53             _while56_exit:
3987   1D53             ; *dest = '\0'; 
3988   1D53 FA 05 00      lea d, [bp + 5] ; $dest
3989   1D56 2A            mov b, [d]
3990   1D57 D8            push b
3991   1D58 26 00 00      mov b, $0
3992   1D5B E7            pop d
3993   1D5C FD 3E         mov [d], bl
3994   1D5E             ; return len; 
3995   1D5E FA F8 FF      lea d, [bp + -8] ; $len
3996   1D61 2A            mov b, [d]
3997   1D62 F9            leave
3998   1D63 09            ret
3999   1D64             
4000   1D64             date:
4001   1D64 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4002   1D67             
4003   1D67             ; --- BEGIN INLINE ASM SEGMENT
4004   1D67 19 00         mov al, 0 
4005   1D69 05 07         syscall sys_datetime
4006   1D6B             ; --- END INLINE ASM SEGMENT
4007   1D6B             
4008   1D6B F9            leave
4009   1D6C 09            ret
4010   1D6D             
4011   1D6D             putchar:
4012   1D6D F8 00 00      enter 0 ; (push bp; mov bp, sp)
4013   1D70             
4014   1D70             ; --- BEGIN INLINE ASM SEGMENT
4015   1D70 FA 05 00      lea d, [bp + 5] ; $c
4016   1D73 1E            mov al, [d]
4017   1D74 23            mov ah, al
4018   1D75 07 64 1F      call _putchar
4019   1D78             ; --- END INLINE ASM SEGMENT
4020   1D78             
4021   1D78 F9            leave
4022   1D79 09            ret
4023   1D7A             
4024   1D7A             getchar:
4025   1D7A F8 00 00      enter 0 ; (push bp; mov bp, sp)
4026   1D7D             ; char c; 
4027   1D7D 52 01 00      sub sp, 1
4028   1D80             
4029   1D80             ; --- BEGIN INLINE ASM SEGMENT
4030   1D80 07 5D 1F      call getch
4031   1D83 1A            mov al, ah
4032   1D84 FA 00 00      lea d, [bp + 0] ; $c
4033   1D87 3E            mov [d], al
4034   1D88             ; --- END INLINE ASM SEGMENT
4035   1D88             
4036   1D88             ; return c; 
4037   1D88 FA 00 00      lea d, [bp + 0] ; $c
4038   1D8B 32            mov bl, [d]
4039   1D8C A7 00         mov bh, 0
4040   1D8E F9            leave
4041   1D8F 09            ret
4042   1D90             
4043   1D90             scann:
4044   1D90 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4045   1D93             ; int m; 
4046   1D93 52 02 00      sub sp, 2
4047   1D96             
4048   1D96             ; --- BEGIN INLINE ASM SEGMENT
4049   1D96 07 A8 21      call scan_u16d
4050   1D99 FA FF FF      lea d, [bp + -1] ; $m
4051   1D9C 43            mov [d], a
4052   1D9D             ; --- END INLINE ASM SEGMENT
4053   1D9D             
4054   1D9D             ; return m; 
4055   1D9D FA FF FF      lea d, [bp + -1] ; $m
4056   1DA0 2A            mov b, [d]
4057   1DA1 F9            leave
4058   1DA2 09            ret
4059   1DA3             
4060   1DA3             puts:
4061   1DA3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4062   1DA6             
4063   1DA6             ; --- BEGIN INLINE ASM SEGMENT
4064   1DA6 FA 05 00      lea d, [bp + 5] ; $s
4065   1DA9 15            mov a, [d]
4066   1DAA 3C            mov d, a
4067   1DAB 07 AE 20      call _puts
4068   1DAE 10 00 0A      mov a, $0A00
4069   1DB1 05 03         syscall sys_io
4070   1DB3             ; --- END INLINE ASM SEGMENT
4071   1DB3             
4072   1DB3 F9            leave
4073   1DB4 09            ret
4074   1DB5             
4075   1DB5             print:
4076   1DB5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4077   1DB8             
4078   1DB8             ; --- BEGIN INLINE ASM SEGMENT
4079   1DB8 FA 05 00      lea d, [bp + 5] ; $s
4080   1DBB FD 2A         mov d, [d]
4081   1DBD 07 AE 20      call _puts
4082   1DC0             ; --- END INLINE ASM SEGMENT
4083   1DC0             
4084   1DC0 F9            leave
4085   1DC1 09            ret
4086   1DC2             
4087   1DC2             getparam:
4088   1DC2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4089   1DC5             ; char data; 
4090   1DC5 52 01 00      sub sp, 1
4091   1DC8             
4092   1DC8             ; --- BEGIN INLINE ASM SEGMENT
4093   1DC8 19 04         mov al, 4
4094   1DCA FA 05 00      lea d, [bp + 5] ; $address
4095   1DCD FD 2A         mov d, [d]
4096   1DCF 05 0C         syscall sys_system
4097   1DD1 FA 00 00      lea d, [bp + 0] ; $data
4098   1DD4 FD 3E         mov [d], bl
4099   1DD6             ; --- END INLINE ASM SEGMENT
4100   1DD6             
4101   1DD6             ; return data; 
4102   1DD6 FA 00 00      lea d, [bp + 0] ; $data
4103   1DD9 32            mov bl, [d]
4104   1DDA A7 00         mov bh, 0
4105   1DDC F9            leave
4106   1DDD 09            ret
4107   1DDE             
4108   1DDE             clear:
4109   1DDE F8 00 00      enter 0 ; (push bp; mov bp, sp)
4110   1DE1             ; print("\033[2J\033[H"); 
4111   1DE1 26 44 24      mov b, _s11 ; "\033[2J\033[H"
4112   1DE4 FD AB         swp b
4113   1DE6 D8            push b
4114   1DE7 07 B5 1D      call print
4115   1DEA 51 02 00      add sp, 2
4116   1DED F9            leave
4117   1DEE 09            ret
4118   1DEF             
4119   1DEF             abs:
4120   1DEF F8 00 00      enter 0 ; (push bp; mov bp, sp)
4121   1DF2             ; return i < 0 ? -i : i; 
4122   1DF2             _ternary57_cond:
4123   1DF2 FA 05 00      lea d, [bp + 5] ; $i
4124   1DF5 2A            mov b, [d]
4125   1DF6             ; --- START RELATIONAL
4126   1DF6 D7            push a
4127   1DF7 11            mov a, b
4128   1DF8 26 00 00      mov b, $0
4129   1DFB B0            cmp a, b
4130   1DFC FD 73         slt ; < (signed)
4131   1DFE E4            pop a
4132   1DFF             ; --- END RELATIONAL
4133   1DFF C0 00 00      cmp b, 0
4134   1E02 C6 0E 1E      je _ternary57_false
4135   1E05             _ternary57_true:
4136   1E05 FA 05 00      lea d, [bp + 5] ; $i
4137   1E08 2A            mov b, [d]
4138   1E09 FD 97         neg b
4139   1E0B 0A 12 1E      jmp _ternary57_exit
4140   1E0E             _ternary57_false:
4141   1E0E FA 05 00      lea d, [bp + 5] ; $i
4142   1E11 2A            mov b, [d]
4143   1E12             _ternary57_exit:
4144   1E12 F9            leave
4145   1E13 09            ret
4146   1E14             
4147   1E14             loadfile:
4148   1E14 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4149   1E17             
4150   1E17             ; --- BEGIN INLINE ASM SEGMENT
4151   1E17 FA 07 00      lea d, [bp + 7] ; $destination
4152   1E1A 15            mov a, [d]
4153   1E1B 4F            mov di, a
4154   1E1C FA 05 00      lea d, [bp + 5] ; $filename
4155   1E1F FD 2A         mov d, [d]
4156   1E21 19 14         mov al, 20
4157   1E23 05 04         syscall sys_filesystem
4158   1E25             ; --- END INLINE ASM SEGMENT
4159   1E25             
4160   1E25 F9            leave
4161   1E26 09            ret
4162   1E27             
4163   1E27             create_file:
4164   1E27 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4165   1E2A F9            leave
4166   1E2B 09            ret
4167   1E2C             
4168   1E2C             delete_file:
4169   1E2C F8 00 00      enter 0 ; (push bp; mov bp, sp)
4170   1E2F             
4171   1E2F             ; --- BEGIN INLINE ASM SEGMENT
4172   1E2F FA 05 00      lea d, [bp + 5] ; $filename
4173   1E32 19 0A         mov al, 10
4174   1E34 05 04         syscall sys_filesystem
4175   1E36             ; --- END INLINE ASM SEGMENT
4176   1E36             
4177   1E36 F9            leave
4178   1E37 09            ret
4179   1E38             
4180   1E38             load_hex:
4181   1E38 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4182   1E3B             ; char *temp; 
4183   1E3B 52 02 00      sub sp, 2
4184   1E3E             ; temp = alloc(32768); 
4185   1E3E FA FF FF      lea d, [bp + -1] ; $temp
4186   1E41 DA            push d
4187   1E42 26 00 80      mov b, $8000
4188   1E45 FD AB         swp b
4189   1E47 D8            push b
4190   1E48 07 E1 09      call alloc
4191   1E4B 51 02 00      add sp, 2
4192   1E4E E7            pop d
4193   1E4F FD 43         mov [d], b
4194   1E51             
4195   1E51             ; --- BEGIN INLINE ASM SEGMENT
4196   1E51               
4197   1E51               
4198   1E51               
4199   1E51             _load_hex:
4200   1E51 FA 05 00      lea d, [bp + 5] ; $destination
4201   1E54 FD 2A         mov d, [d]
4202   1E56 FD 50         mov di, d
4203   1E58 FA FF FF      lea d, [bp + -1] ; $temp
4204   1E5B FD 2A         mov d, [d]
4205   1E5D 38 00 00      mov c, 0
4206   1E60 48            mov a, sp
4207   1E61 77            inc a
4208   1E62 3C            mov d, a          
4209   1E63 07 6B 1F      call _gets        
4210   1E66 4D            mov si, a
4211   1E67             __load_hex_loop:
4212   1E67 F6            lodsb             
4213   1E68 B9 00         cmp al, 0         
4214   1E6A C6 78 1E      jz __load_hex_ret
4215   1E6D 36            mov bh, al
4216   1E6E F6            lodsb
4217   1E6F 2F            mov bl, al
4218   1E70 07 22 1F      call _atoi        
4219   1E73 F7            stosb             
4220   1E74 78            inc c
4221   1E75 0A 67 1E      jmp __load_hex_loop
4222   1E78             __load_hex_ret:
4223   1E78             ; --- END INLINE ASM SEGMENT
4224   1E78             
4225   1E78 F9            leave
4226   1E79 09            ret
4227   1E7A             
4228   1E7A             include_stdio_asm:
4229   1E7A F8 00 00      enter 0 ; (push bp; mov bp, sp)
4230   1E7D             
4231   1E7D             ; --- BEGIN INLINE ASM SEGMENT
4232   1E7D             .include "lib/asm/stdio.asm"
0001+  1E7D             ;-----------------------------------------------------------------------------
0002+  1E7D             ; stdio.s
0003+  1E7D             ;-----------------------------------------------------------------------------
0004+  1E7D             .include "lib/asm/string.asm"
0001++ 1E7D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1E7D             ; string.s
0003++ 1E7D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1E7D             
0005++ 1E7D             
0006++ 1E7D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1E7D             ; _strrev
0008++ 1E7D             ; reverse a string
0009++ 1E7D             ; D = string address
0010++ 1E7D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1E7D             ; 01234
0012++ 1E7D             _strrev:
0013++ 1E7D 4B          	pusha
0014++ 1E7E 07 C4 1E    	call _strlen	; length in C
0015++ 1E81 12          	mov a, c
0016++ 1E82 AF 01 00    	cmp a, 1
0017++ 1E85 D0 9F 1E    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1E88 7D          	dec a
0019++ 1E89 FD 4E       	mov si, d	; beginning of string
0020++ 1E8B FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1E8D 59          	add d, a	; end of string
0022++ 1E8E 12          	mov a, c
0023++ 1E8F FD 9B       	shr a		; divide by 2
0024++ 1E91 39          	mov c, a	; C now counts the steps
0025++ 1E92             _strrev_L0:
0026++ 1E92 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1E93 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1E94 3E          	mov [d], al	; store left char into right side
0029++ 1E95 1B          	mov al, bl
0030++ 1E96 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1E97 7E          	dec c
0032++ 1E98 7F          	dec d
0033++ 1E99 C2 00 00    	cmp c, 0
0034++ 1E9C C7 92 1E    	jne _strrev_L0
0035++ 1E9F             _strrev_end:
0036++ 1E9F 4C          	popa
0037++ 1EA0 09          	ret
0038++ 1EA1             	
0039++ 1EA1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1EA1             ; _strchr
0041++ 1EA1             ; search string in D for char in AL
0042++ 1EA1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1EA1             _strchr:
0044++ 1EA1             _strchr_L0:
0045++ 1EA1 32          	mov bl, [d]
0046++ 1EA2 C1 00       	cmp bl, 0
0047++ 1EA4 C6 AF 1E    	je _strchr_end
0048++ 1EA7 BA          	cmp al, bl
0049++ 1EA8 C6 AF 1E    	je _strchr_end
0050++ 1EAB 79          	inc d
0051++ 1EAC 0A A1 1E    	jmp _strchr_L0
0052++ 1EAF             _strchr_end:
0053++ 1EAF 1B          	mov al, bl
0054++ 1EB0 09          	ret
0055++ 1EB1             
0056++ 1EB1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1EB1             ; _strstr
0058++ 1EB1             ; find sub-string
0059++ 1EB1             ; str1 in SI
0060++ 1EB1             ; str2 in DI
0061++ 1EB1             ; SI points to end of source string
0062++ 1EB1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1EB1             _strstr:
0064++ 1EB1 DB          	push al
0065++ 1EB2 DA          	push d
0066++ 1EB3 E3          	push di
0067++ 1EB4             _strstr_loop:
0068++ 1EB4 F3          	cmpsb					; compare a byte of the strings
0069++ 1EB5 C7 C0 1E    	jne _strstr_ret
0070++ 1EB8 FC 00 00    	lea d, [di + 0]
0071++ 1EBB BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1EBD C7 B4 1E    	jne _strstr_loop				; equal chars but not at end
0073++ 1EC0             _strstr_ret:
0074++ 1EC0 F0          	pop di
0075++ 1EC1 E7          	pop d
0076++ 1EC2 E8          	pop al
0077++ 1EC3 09          	ret
0078++ 1EC4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1EC4             ; length of null terminated string
0080++ 1EC4             ; result in C
0081++ 1EC4             ; pointer in D
0082++ 1EC4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1EC4             _strlen:
0084++ 1EC4 DA          	push d
0085++ 1EC5 38 00 00    	mov c, 0
0086++ 1EC8             _strlen_L1:
0087++ 1EC8 BD 00       	cmp byte [d], 0
0088++ 1ECA C6 D2 1E    	je _strlen_ret
0089++ 1ECD 79          	inc d
0090++ 1ECE 78          	inc c
0091++ 1ECF 0A C8 1E    	jmp _strlen_L1
0092++ 1ED2             _strlen_ret:
0093++ 1ED2 E7          	pop d
0094++ 1ED3 09          	ret
0095++ 1ED4             
0096++ 1ED4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1ED4             ; STRCMP
0098++ 1ED4             ; compare two strings
0099++ 1ED4             ; str1 in SI
0100++ 1ED4             ; str2 in DI
0101++ 1ED4             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1ED4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1ED4             _strcmp:
0104++ 1ED4 DB          	push al
0105++ 1ED5 DA          	push d
0106++ 1ED6 E3          	push di
0107++ 1ED7 E2          	push si
0108++ 1ED8             _strcmp_loop:
0109++ 1ED8 F3          	cmpsb					; compare a byte of the strings
0110++ 1ED9 C7 E4 1E    	jne _strcmp_ret
0111++ 1EDC FB FF FF    	lea d, [si +- 1]
0112++ 1EDF BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1EE1 C7 D8 1E    	jne _strcmp_loop				; equal chars but not at end
0114++ 1EE4             _strcmp_ret:
0115++ 1EE4 EF          	pop si
0116++ 1EE5 F0          	pop di
0117++ 1EE6 E7          	pop d
0118++ 1EE7 E8          	pop al
0119++ 1EE8 09          	ret
0120++ 1EE9             
0121++ 1EE9             
0122++ 1EE9             ; STRCPY
0123++ 1EE9             ; copy null terminated string from SI to DI
0124++ 1EE9             ; source in SI
0125++ 1EE9             ; destination in DI
0126++ 1EE9             _strcpy:
0127++ 1EE9 E2          	push si
0128++ 1EEA E3          	push di
0129++ 1EEB DB          	push al
0130++ 1EEC             _strcpy_L1:
0131++ 1EEC F6          	lodsb
0132++ 1EED F7          	stosb
0133++ 1EEE B9 00       	cmp al, 0
0134++ 1EF0 C7 EC 1E    	jne _strcpy_L1
0135++ 1EF3             _strcpy_end:
0136++ 1EF3 E8          	pop al
0137++ 1EF4 F0          	pop di
0138++ 1EF5 EF          	pop si
0139++ 1EF6 09          	ret
0140++ 1EF7             
0141++ 1EF7             ; STRCAT
0142++ 1EF7             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1EF7             ; source in SI
0144++ 1EF7             ; destination in DI
0145++ 1EF7             _strcat:
0146++ 1EF7 E2          	push si
0147++ 1EF8 E3          	push di
0148++ 1EF9 D7          	push a
0149++ 1EFA DA          	push d
0150++ 1EFB 50          	mov a, di
0151++ 1EFC 3C          	mov d, a
0152++ 1EFD             _strcat_goto_end_L1:
0153++ 1EFD BD 00       	cmp byte[d], 0
0154++ 1EFF C6 06 1F    	je _strcat_start
0155++ 1F02 79          	inc d
0156++ 1F03 0A FD 1E    	jmp _strcat_goto_end_L1
0157++ 1F06             _strcat_start:
0158++ 1F06 FD 50       	mov di, d
0159++ 1F08             _strcat_L1:
0160++ 1F08 F6          	lodsb
0161++ 1F09 F7          	stosb
0162++ 1F0A B9 00       	cmp al, 0
0163++ 1F0C C7 08 1F    	jne _strcat_L1
0164++ 1F0F             _strcat_end:
0165++ 1F0F E7          	pop d
0166++ 1F10 E4          	pop a
0167++ 1F11 F0          	pop di
0168++ 1F12 EF          	pop si
0169++ 1F13 09          	ret
0170++ 1F14             
0171++ 1F14             
0005+  1F14             
0006+  1F14             ;-----------------------------------------------------------------------------
0007+  1F14             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  1F14             ; ASCII in BL
0009+  1F14             ; result in AL
0010+  1F14             ; ascii for F = 0100 0110
0011+  1F14             ; ascii for 9 = 0011 1001
0012+  1F14             ;-----------------------------------------------------------------------------
0013+  1F14             hex_ascii_encode:
0014+  1F14 1B            mov al, bl
0015+  1F15 93 40         test al, $40        ; test if letter or number
0016+  1F17 C7 1D 1F      jnz hex_letter
0017+  1F1A 87 0F         and al, $0F        ; get number
0018+  1F1C 09            ret
0019+  1F1D             hex_letter:
0020+  1F1D 87 0F         and al, $0F        ; get letter
0021+  1F1F 6A 09         add al, 9
0022+  1F21 09            ret
0023+  1F22             
0024+  1F22             ;-----------------------------------------------------------------------------
0025+  1F22             ; ATOI
0026+  1F22             ; 2 letter hex string in B
0027+  1F22             ; 8bit integer returned in AL
0028+  1F22             ;-----------------------------------------------------------------------------
0029+  1F22             _atoi:
0030+  1F22 D8            push b
0031+  1F23 07 14 1F      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  1F26 30            mov bl, bh
0033+  1F27 DB            push al          ; save a
0034+  1F28 07 14 1F      call hex_ascii_encode
0035+  1F2B EA            pop bl  
0036+  1F2C FD 9E 04      shl al, 4
0037+  1F2F 8C            or al, bl
0038+  1F30 E5            pop b
0039+  1F31 09            ret  
0040+  1F32             
0041+  1F32             
0042+  1F32             ;-----------------------------------------------------------------------------
0043+  1F32             ; ITOA
0044+  1F32             ; 8bit value in BL
0045+  1F32             ; 2 byte ASCII result in A
0046+  1F32             ;-----------------------------------------------------------------------------
0047+  1F32             _itoa:
0048+  1F32 DA            push d
0049+  1F33 D8            push b
0050+  1F34 A7 00         mov bh, 0
0051+  1F36 FD A4 04      shr bl, 4  
0052+  1F39 74            mov d, b
0053+  1F3A 1F E2 21      mov al, [d + s_hex_digits]
0054+  1F3D 23            mov ah, al
0055+  1F3E               
0056+  1F3E E5            pop b
0057+  1F3F D8            push b
0058+  1F40 A7 00         mov bh, 0
0059+  1F42 FD 87 0F      and bl, $0F
0060+  1F45 74            mov d, b
0061+  1F46 1F E2 21      mov al, [d + s_hex_digits]
0062+  1F49 E5            pop b
0063+  1F4A E7            pop d
0064+  1F4B 09            ret
0065+  1F4C             
0066+  1F4C             ;-----------------------------------------------------------------------------
0067+  1F4C             ; HEX STRING TO BINARY
0068+  1F4C             ; di = destination address
0069+  1F4C             ; si = source
0070+  1F4C             ;-----------------------------------------------------------------------------
0071+  1F4C             _hex_to_int:
0072+  1F4C             _hex_to_int_L1:
0073+  1F4C F6            lodsb          ; load from [SI] to AL
0074+  1F4D B9 00         cmp al, 0        ; check if ASCII 0
0075+  1F4F C6 5C 1F      jz _hex_to_int_ret
0076+  1F52 36            mov bh, al
0077+  1F53 F6            lodsb
0078+  1F54 2F            mov bl, al
0079+  1F55 07 22 1F      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  1F58 F7            stosb          ; store AL to [DI]
0081+  1F59 0A 4C 1F      jmp _hex_to_int_L1
0082+  1F5C             _hex_to_int_ret:
0083+  1F5C 09            ret    
0084+  1F5D             
0085+  1F5D             ;-----------------------------------------------------------------------------
0086+  1F5D             ; GETCHAR
0087+  1F5D             ; char in ah
0088+  1F5D             ;-----------------------------------------------------------------------------
0089+  1F5D             getch:
0090+  1F5D DB            push al
0091+  1F5E             getch_retry:
0092+  1F5E 19 01         mov al, 1
0093+  1F60 05 03         syscall sys_io      ; receive in AH
0094+  1F62 E8            pop al
0095+  1F63 09            ret
0096+  1F64             
0097+  1F64             ;-----------------------------------------------------------------------------
0098+  1F64             ; PUTCHAR
0099+  1F64             ; char in ah
0100+  1F64             ;-----------------------------------------------------------------------------
0101+  1F64             _putchar:
0102+  1F64 D7            push a
0103+  1F65 19 00         mov al, 0
0104+  1F67 05 03         syscall sys_io      ; char in AH
0105+  1F69 E4            pop a
0106+  1F6A 09            ret
0107+  1F6B             
0108+  1F6B             ;-----------------------------------------------------------------------------
0109+  1F6B             ;; INPUT A STRING
0110+  1F6B             ;; terminates with null
0111+  1F6B             ;; pointer in D
0112+  1F6B             ;-----------------------------------------------------------------------------
0113+  1F6B             _gets:
0114+  1F6B D7            push a
0115+  1F6C DA            push d
0116+  1F6D             _gets_loop:
0117+  1F6D 19 01         mov al, 1
0118+  1F6F 05 03         syscall sys_io      ; receive in AH
0119+  1F71 B9 00         cmp al, 0        ; check error code (AL)
0120+  1F73 C6 6D 1F      je _gets_loop      ; if no char received, retry
0121+  1F76             
0122+  1F76 76 1B         cmp ah, 27
0123+  1F78 C6 99 1F      je _gets_ansi_esc
0124+  1F7B 76 0A         cmp ah, $0A        ; LF
0125+  1F7D C6 04 20      je _gets_end
0126+  1F80 76 0D         cmp ah, $0D        ; CR
0127+  1F82 C6 04 20      je _gets_end
0128+  1F85 76 5C         cmp ah, $5C        ; '\\'
0129+  1F87 C6 C5 1F      je _gets_escape
0130+  1F8A               
0131+  1F8A 76 08         cmp ah, $08      ; check for backspace
0132+  1F8C C6 95 1F      je _gets_backspace
0133+  1F8F             
0134+  1F8F 1A            mov al, ah
0135+  1F90 3E            mov [d], al
0136+  1F91 79            inc d
0137+  1F92 0A 6D 1F      jmp _gets_loop
0138+  1F95             _gets_backspace:
0139+  1F95 7F            dec d
0140+  1F96 0A 6D 1F      jmp _gets_loop
0141+  1F99             _gets_ansi_esc:
0142+  1F99 19 01         mov al, 1
0143+  1F9B 05 03         syscall sys_io        ; receive in AH without echo
0144+  1F9D B9 00         cmp al, 0          ; check error code (AL)
0145+  1F9F C6 99 1F      je _gets_ansi_esc    ; if no char received, retry
0146+  1FA2 76 5B         cmp ah, '['
0147+  1FA4 C7 6D 1F      jne _gets_loop
0148+  1FA7             _gets_ansi_esc_2:
0149+  1FA7 19 01         mov al, 1
0150+  1FA9 05 03         syscall sys_io          ; receive in AH without echo
0151+  1FAB B9 00         cmp al, 0            ; check error code (AL)
0152+  1FAD C6 A7 1F      je _gets_ansi_esc_2  ; if no char received, retry
0153+  1FB0 76 44         cmp ah, 'D'
0154+  1FB2 C6 BD 1F      je _gets_left_arrow
0155+  1FB5 76 43         cmp ah, 'C'
0156+  1FB7 C6 C1 1F      je _gets_right_arrow
0157+  1FBA 0A 6D 1F      jmp _gets_loop
0158+  1FBD             _gets_left_arrow:
0159+  1FBD 7F            dec d
0160+  1FBE 0A 6D 1F      jmp _gets_loop
0161+  1FC1             _gets_right_arrow:
0162+  1FC1 79            inc d
0163+  1FC2 0A 6D 1F      jmp _gets_loop
0164+  1FC5             _gets_escape:
0165+  1FC5 19 01         mov al, 1
0166+  1FC7 05 03         syscall sys_io      ; receive in AH
0167+  1FC9 B9 00         cmp al, 0        ; check error code (AL)
0168+  1FCB C6 C5 1F      je _gets_escape      ; if no char received, retry
0169+  1FCE 76 6E         cmp ah, 'n'
0170+  1FD0 C6 EF 1F      je _gets_LF
0171+  1FD3 76 72         cmp ah, 'r'
0172+  1FD5 C6 F6 1F      je _gets_CR
0173+  1FD8 76 30         cmp ah, '0'
0174+  1FDA C6 FD 1F      je _gets_NULL
0175+  1FDD 76 5C         cmp ah, $5C  ; '\'
0176+  1FDF C6 E8 1F      je _gets_slash
0177+  1FE2 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  1FE3 3E            mov [d], al
0179+  1FE4 79            inc d
0180+  1FE5 0A 6D 1F      jmp _gets_loop
0181+  1FE8             _gets_slash:
0182+  1FE8 19 5C         mov al, $5C
0183+  1FEA 3E            mov [d], al
0184+  1FEB 79            inc d
0185+  1FEC 0A 6D 1F      jmp _gets_loop
0186+  1FEF             _gets_LF:
0187+  1FEF 19 0A         mov al, $0A
0188+  1FF1 3E            mov [d], al
0189+  1FF2 79            inc d
0190+  1FF3 0A 6D 1F      jmp _gets_loop
0191+  1FF6             _gets_CR:
0192+  1FF6 19 0D         mov al, $0D
0193+  1FF8 3E            mov [d], al
0194+  1FF9 79            inc d
0195+  1FFA 0A 6D 1F      jmp _gets_loop
0196+  1FFD             _gets_NULL:
0197+  1FFD 19 00         mov al, $00
0198+  1FFF 3E            mov [d], al
0199+  2000 79            inc d
0200+  2001 0A 6D 1F      jmp _gets_loop
0201+  2004             _gets_end:
0202+  2004 19 00         mov al, 0
0203+  2006 3E            mov [d], al        ; terminate string
0204+  2007 E7            pop d
0205+  2008 E4            pop a
0206+  2009 09            ret
0207+  200A             
0208+  200A             ;-----------------------------------------------------------------------------
0209+  200A             ;; INPUT TEXT
0210+  200A             ;; terminated with CTRL+D
0211+  200A             ;; pointer in D
0212+  200A             ;-----------------------------------------------------------------------------
0213+  200A             _gettxt:
0214+  200A D7            push a
0215+  200B DA            push d
0216+  200C             _gettxt_loop:
0217+  200C 19 01         mov al, 1
0218+  200E 05 03         syscall sys_io      ; receive in AH
0219+  2010 B9 00         cmp al, 0        ; check error code (AL)
0220+  2012 C6 0C 20      je _gettxt_loop    ; if no char received, retry
0221+  2015 76 04         cmp ah, 4      ; EOT
0222+  2017 C6 55 20      je _gettxt_end
0223+  201A 76 08         cmp ah, $08      ; check for backspace
0224+  201C C6 51 20      je _gettxt_backspace
0225+  201F 76 5C         cmp ah, $5C        ; '\'
0226+  2021 C6 2A 20      je _gettxt_escape
0227+  2024 1A            mov al, ah
0228+  2025 3E            mov [d], al
0229+  2026 79            inc d
0230+  2027 0A 0C 20      jmp _gettxt_loop
0231+  202A             _gettxt_escape:
0232+  202A 19 01         mov al, 1
0233+  202C 05 03         syscall sys_io      ; receive in AH
0234+  202E B9 00         cmp al, 0        ; check error code (AL)
0235+  2030 C6 2A 20      je _gettxt_escape    ; if no char received, retry
0236+  2033 76 6E         cmp ah, 'n'
0237+  2035 C6 43 20      je _gettxt_LF
0238+  2038 76 72         cmp ah, 'r'
0239+  203A C6 4A 20      je _gettxt_CR
0240+  203D 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  203E 3E            mov [d], al
0242+  203F 79            inc d
0243+  2040 0A 0C 20      jmp _gettxt_loop
0244+  2043             _gettxt_LF:
0245+  2043 19 0A         mov al, $0A
0246+  2045 3E            mov [d], al
0247+  2046 79            inc d
0248+  2047 0A 0C 20      jmp _gettxt_loop
0249+  204A             _gettxt_CR:
0250+  204A 19 0D         mov al, $0D
0251+  204C 3E            mov [d], al
0252+  204D 79            inc d
0253+  204E 0A 0C 20      jmp _gettxt_loop
0254+  2051             _gettxt_backspace:
0255+  2051 7F            dec d
0256+  2052 0A 0C 20      jmp _gettxt_loop
0257+  2055             _gettxt_end:
0258+  2055 19 00         mov al, 0
0259+  2057 3E            mov [d], al        ; terminate string
0260+  2058 E7            pop d
0261+  2059 E4            pop a
0262+  205A 09            ret
0263+  205B             
0264+  205B             ;-----------------------------------------------------------------------------
0265+  205B             ; PRINT NEW LINE
0266+  205B             ;-----------------------------------------------------------------------------
0267+  205B             printnl:
0268+  205B D7            push a
0269+  205C 10 00 0A      mov a, $0A00
0270+  205F 05 03         syscall sys_io
0271+  2061 10 00 0D      mov a, $0D00
0272+  2064 05 03         syscall sys_io
0273+  2066 E4            pop a
0274+  2067 09            ret
0275+  2068             
0276+  2068             ;-----------------------------------------------------------------------------
0277+  2068             ; _strtoint
0278+  2068             ; 4 digit hex string number in d
0279+  2068             ; integer returned in A
0280+  2068             ;-----------------------------------------------------------------------------
0281+  2068             _strtointx:
0282+  2068 D8            push b
0283+  2069 32            mov bl, [d]
0284+  206A 37            mov bh, bl
0285+  206B 33 01 00      mov bl, [d + 1]
0286+  206E 07 22 1F      call _atoi        ; convert to int in AL
0287+  2071 23            mov ah, al        ; move to AH
0288+  2072 33 02 00      mov bl, [d + 2]
0289+  2075 37            mov bh, bl
0290+  2076 33 03 00      mov bl, [d + 3]
0291+  2079 07 22 1F      call _atoi        ; convert to int in AL
0292+  207C E5            pop b
0293+  207D 09            ret
0294+  207E             
0295+  207E             ;-----------------------------------------------------------------------------
0296+  207E             ; _strtoint
0297+  207E             ; 5 digit base10 string number in d
0298+  207E             ; integer returned in A
0299+  207E             ;-----------------------------------------------------------------------------
0300+  207E             _strtoint:
0301+  207E E2            push si
0302+  207F D8            push b
0303+  2080 D9            push c
0304+  2081 DA            push d
0305+  2082 07 C4 1E      call _strlen      ; get string length in C
0306+  2085 7E            dec c
0307+  2086 FD 4E         mov si, d
0308+  2088 12            mov a, c
0309+  2089 FD 99         shl a
0310+  208B 3B FA 21      mov d, table_power
0311+  208E 59            add d, a
0312+  208F 38 00 00      mov c, 0
0313+  2092             _strtoint_L0:
0314+  2092 F6            lodsb      ; load ASCII to al
0315+  2093 B9 00         cmp al, 0
0316+  2095 C6 A8 20      je _strtoint_end
0317+  2098 6F 30         sub al, $30    ; make into integer
0318+  209A 22 00         mov ah, 0
0319+  209C 2A            mov b, [d]
0320+  209D AC            mul a, b      ; result in B since it fits in 16bits
0321+  209E 11            mov a, b
0322+  209F 28            mov b, c
0323+  20A0 54            add a, b
0324+  20A1 39            mov c, a
0325+  20A2 63 02 00      sub d, 2
0326+  20A5 0A 92 20      jmp _strtoint_L0
0327+  20A8             _strtoint_end:
0328+  20A8 12            mov a, c
0329+  20A9 E7            pop d
0330+  20AA E6            pop c
0331+  20AB E5            pop b
0332+  20AC EF            pop si
0333+  20AD 09            ret
0334+  20AE             
0335+  20AE             ;-----------------------------------------------------------------------------
0336+  20AE             ; PRINT NULL TERMINATED STRING
0337+  20AE             ; pointer in D
0338+  20AE             ;-----------------------------------------------------------------------------
0339+  20AE             _puts:
0340+  20AE D7            push a
0341+  20AF DA            push d
0342+  20B0             _puts_L1:
0343+  20B0 1E            mov al, [d]
0344+  20B1 B9 00         cmp al, 0
0345+  20B3 C6 BF 20      jz _puts_END
0346+  20B6 23            mov ah, al
0347+  20B7 19 00         mov al, 0
0348+  20B9 05 03         syscall sys_io
0349+  20BB 79            inc d
0350+  20BC 0A B0 20      jmp _puts_L1
0351+  20BF             _puts_END:
0352+  20BF E7            pop d
0353+  20C0 E4            pop a
0354+  20C1 09            ret
0355+  20C2             
0356+  20C2             ;-----------------------------------------------------------------------------
0357+  20C2             ; PRINT N SIZE STRING
0358+  20C2             ; pointer in D
0359+  20C2             ; size in C
0360+  20C2             ;-----------------------------------------------------------------------------
0361+  20C2             _putsn:
0362+  20C2 DB            push al
0363+  20C3 DA            push d
0364+  20C4 D9            push c
0365+  20C5             _putsn_L0:
0366+  20C5 1E            mov al, [d]
0367+  20C6 23            mov ah, al
0368+  20C7 19 00         mov al, 0
0369+  20C9 05 03         syscall sys_io
0370+  20CB 79            inc d
0371+  20CC 7E            dec c  
0372+  20CD C2 00 00      cmp c, 0
0373+  20D0 C7 C5 20      jne _putsn_L0
0374+  20D3             _putsn_end:
0375+  20D3 E6            pop c
0376+  20D4 E7            pop d
0377+  20D5 E8            pop al
0378+  20D6 09            ret
0379+  20D7             
0380+  20D7             ;-----------------------------------------------------------------------------
0381+  20D7             ; print 16bit decimal number
0382+  20D7             ; input number in A
0383+  20D7             ;-----------------------------------------------------------------------------
0384+  20D7             print_u16d:
0385+  20D7 D7            push a
0386+  20D8 D8            push b
0387+  20D9 26 10 27      mov b, 10000
0388+  20DC AE            div a, b      ; get 10000's coeff.
0389+  20DD 07 FF 20      call print_number
0390+  20E0 11            mov a, b
0391+  20E1 26 E8 03      mov b, 1000
0392+  20E4 AE            div a, b      ; get 1000's coeff.
0393+  20E5 07 FF 20      call print_number
0394+  20E8 11            mov a, b
0395+  20E9 26 64 00      mov b, 100
0396+  20EC AE            div a, b
0397+  20ED 07 FF 20      call print_number
0398+  20F0 11            mov a, b
0399+  20F1 26 0A 00      mov b, 10
0400+  20F4 AE            div a, b
0401+  20F5 07 FF 20      call print_number
0402+  20F8 1B            mov al, bl      ; 1's coeff in bl
0403+  20F9 07 FF 20      call print_number
0404+  20FC E5            pop b
0405+  20FD E4            pop a
0406+  20FE 09            ret
0407+  20FF             
0408+  20FF             ;-----------------------------------------------------------------------------
0409+  20FF             ; print AL
0410+  20FF             ;-----------------------------------------------------------------------------
0411+  20FF             print_number:
0412+  20FF 6A 30         add al, $30
0413+  2101 23            mov ah, al
0414+  2102 07 64 1F      call _putchar
0415+  2105 09            ret
0416+  2106             
0417+  2106             ;-----------------------------------------------------------------------------
0418+  2106             ; PRINT 16BIT HEX INTEGER
0419+  2106             ; integer value in reg B
0420+  2106             ;-----------------------------------------------------------------------------
0421+  2106             print_u16x:
0422+  2106 D7            push a
0423+  2107 D8            push b
0424+  2108 DD            push bl
0425+  2109 30            mov bl, bh
0426+  210A 07 32 1F      call _itoa        ; convert bh to char in A
0427+  210D 2F            mov bl, al        ; save al
0428+  210E 19 00         mov al, 0
0429+  2110 05 03         syscall sys_io        ; display AH
0430+  2112 24            mov ah, bl        ; retrieve al
0431+  2113 19 00         mov al, 0
0432+  2115 05 03         syscall sys_io        ; display AL
0433+  2117             
0434+  2117 EA            pop bl
0435+  2118 07 32 1F      call _itoa        ; convert bh to char in A
0436+  211B 2F            mov bl, al        ; save al
0437+  211C 19 00         mov al, 0
0438+  211E 05 03         syscall sys_io        ; display AH
0439+  2120 24            mov ah, bl        ; retrieve al
0440+  2121 19 00         mov al, 0
0441+  2123 05 03         syscall sys_io        ; display AL
0442+  2125             
0443+  2125 E5            pop b
0444+  2126 E4            pop a
0445+  2127 09            ret
0446+  2128             
0447+  2128             ;-----------------------------------------------------------------------------
0448+  2128             ; INPUT 16BIT HEX INTEGER
0449+  2128             ; read 16bit integer into A
0450+  2128             ;-----------------------------------------------------------------------------
0451+  2128             scan_u16x:
0452+  2128 F8 10 00      enter 16
0453+  212B D8            push b
0454+  212C DA            push d
0455+  212D             
0456+  212D FA F1 FF      lea d, [bp + -15]
0457+  2130 07 6B 1F      call _gets        ; get number
0458+  2133             
0459+  2133 32            mov bl, [d]
0460+  2134 37            mov bh, bl
0461+  2135 33 01 00      mov bl, [d + 1]
0462+  2138 07 22 1F      call _atoi        ; convert to int in AL
0463+  213B 23            mov ah, al        ; move to AH
0464+  213C             
0465+  213C 33 02 00      mov bl, [d + 2]
0466+  213F 37            mov bh, bl
0467+  2140 33 03 00      mov bl, [d + 3]
0468+  2143 07 22 1F      call _atoi        ; convert to int in AL
0469+  2146             
0470+  2146 E7            pop d
0471+  2147 E5            pop b
0472+  2148 F9            leave
0473+  2149 09            ret
0474+  214A             
0475+  214A             ;-----------------------------------------------------------------------------
0476+  214A             ; PRINT 8bit HEX INTEGER
0477+  214A             ; integer value in reg bl
0478+  214A             ;-----------------------------------------------------------------------------
0479+  214A             print_u8x:
0480+  214A D7            push a
0481+  214B DD            push bl
0482+  214C             
0483+  214C 07 32 1F      call _itoa        ; convert bl to char in A
0484+  214F 2F            mov bl, al        ; save al
0485+  2150 19 00         mov al, 0
0486+  2152 05 03         syscall sys_io        ; display AH
0487+  2154 24            mov ah, bl        ; retrieve al
0488+  2155 19 00         mov al, 0
0489+  2157 05 03         syscall sys_io        ; display AL
0490+  2159             
0491+  2159 EA            pop bl
0492+  215A E4            pop a
0493+  215B 09            ret
0494+  215C             
0495+  215C             ;-----------------------------------------------------------------------------
0496+  215C             ; print 8bit decimal unsigned number
0497+  215C             ; input number in AL
0498+  215C             ;-----------------------------------------------------------------------------
0499+  215C             print_u8d:
0500+  215C D7            push a
0501+  215D D8            push b
0502+  215E             
0503+  215E 22 00         mov ah, 0
0504+  2160 26 64 00      mov b, 100
0505+  2163 AE            div a, b
0506+  2164 D8            push b      ; save remainder
0507+  2165 B9 00         cmp al, 0
0508+  2167 C6 71 21      je skip100
0509+  216A 6A 30         add al, $30
0510+  216C 23            mov ah, al
0511+  216D 19 00         mov al, 0
0512+  216F 05 03         syscall sys_io  ; print coeff
0513+  2171             skip100:
0514+  2171 E4            pop a
0515+  2172 22 00         mov ah, 0
0516+  2174 26 0A 00      mov b, 10
0517+  2177 AE            div a, b
0518+  2178 D8            push b      ; save remainder
0519+  2179 B9 00         cmp al, 0
0520+  217B C6 85 21      je skip10
0521+  217E 6A 30         add al, $30
0522+  2180 23            mov ah, al
0523+  2181 19 00         mov al, 0
0524+  2183 05 03         syscall sys_io  ; print coeff
0525+  2185             skip10:
0526+  2185 E4            pop a
0527+  2186 1B            mov al, bl
0528+  2187 6A 30         add al, $30
0529+  2189 23            mov ah, al
0530+  218A 19 00         mov al, 0
0531+  218C 05 03         syscall sys_io  ; print coeff
0532+  218E E5            pop b
0533+  218F E4            pop a
0534+  2190 09            ret
0535+  2191             
0536+  2191             ;-----------------------------------------------------------------------------
0537+  2191             ; INPUT 8BIT HEX INTEGER
0538+  2191             ; read 8bit integer into AL
0539+  2191             ;-----------------------------------------------------------------------------
0540+  2191             scan_u8x:
0541+  2191 F8 04 00      enter 4
0542+  2194 D8            push b
0543+  2195 DA            push d
0544+  2196             
0545+  2196 FA FD FF      lea d, [bp + -3]
0546+  2199 07 6B 1F      call _gets        ; get number
0547+  219C             
0548+  219C 32            mov bl, [d]
0549+  219D 37            mov bh, bl
0550+  219E 33 01 00      mov bl, [d + 1]
0551+  21A1 07 22 1F      call _atoi        ; convert to int in AL
0552+  21A4             
0553+  21A4 E7            pop d
0554+  21A5 E5            pop b
0555+  21A6 F9            leave
0556+  21A7 09            ret
0557+  21A8             
0558+  21A8             ;-----------------------------------------------------------------------------
0559+  21A8             ; input decimal number
0560+  21A8             ; result in A
0561+  21A8             ; 655'\0'
0562+  21A8             ; low--------high
0563+  21A8             ;-----------------------------------------------------------------------------
0564+  21A8             scan_u16d:
0565+  21A8 F8 08 00      enter 8
0566+  21AB E2            push si
0567+  21AC D8            push b
0568+  21AD D9            push c
0569+  21AE DA            push d
0570+  21AF FA F9 FF      lea d, [bp +- 7]
0571+  21B2 07 6B 1F      call _gets
0572+  21B5 07 C4 1E      call _strlen      ; get string length in C
0573+  21B8 7E            dec c
0574+  21B9 FD 4E         mov si, d
0575+  21BB 12            mov a, c
0576+  21BC FD 99         shl a
0577+  21BE 3B FA 21      mov d, table_power
0578+  21C1 59            add d, a
0579+  21C2 38 00 00      mov c, 0
0580+  21C5             mul_loop:
0581+  21C5 F6            lodsb      ; load ASCII to al
0582+  21C6 B9 00         cmp al, 0
0583+  21C8 C6 DB 21      je mul_exit
0584+  21CB 6F 30         sub al, $30    ; make into integer
0585+  21CD 22 00         mov ah, 0
0586+  21CF 2A            mov b, [d]
0587+  21D0 AC            mul a, b      ; result in B since it fits in 16bits
0588+  21D1 11            mov a, b
0589+  21D2 28            mov b, c
0590+  21D3 54            add a, b
0591+  21D4 39            mov c, a
0592+  21D5 63 02 00      sub d, 2
0593+  21D8 0A C5 21      jmp mul_loop
0594+  21DB             mul_exit:
0595+  21DB 12            mov a, c
0596+  21DC E7            pop d
0597+  21DD E6            pop c
0598+  21DE E5            pop b
0599+  21DF EF            pop si
0600+  21E0 F9            leave
0601+  21E1 09            ret
0602+  21E2             
0603+  21E2 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  21E6 34 35 36 37 
0603+  21EA 38 39 41 42 
0603+  21EE 43 44 45 46 
0604+  21F2 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  21F6 1B 5B 48 00 
0605+  21FA             
0606+  21FA             table_power:
0607+  21FA 01 00         .dw 1
0608+  21FC 0A 00         .dw 10
0609+  21FE 64 00         .dw 100
0610+  2200 E8 03         .dw 1000
0611+  2202 10 27         .dw 100004233   2204             ; --- END INLINE ASM SEGMENT
4234   2204             
4235   2204 F9            leave
4236   2205 09            ret
4237   2206             
4238   2206             gcd:
4239   2206 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4240   2209             ; if (b == 0) { 
4241   2209             _if58_cond:
4242   2209 FA 07 00      lea d, [bp + 7] ; $b
4243   220C 2A            mov b, [d]
4244   220D             ; --- START RELATIONAL
4245   220D D7            push a
4246   220E 11            mov a, b
4247   220F 26 00 00      mov b, $0
4248   2212 B0            cmp a, b
4249   2213 FD 71         seq ; ==
4250   2215 E4            pop a
4251   2216             ; --- END RELATIONAL
4252   2216 C0 00 00      cmp b, 0
4253   2219 C6 25 22      je _if58_exit
4254   221C             _if58_true:
4255   221C             ; return a; 
4256   221C FA 05 00      lea d, [bp + 5] ; $a
4257   221F 2A            mov b, [d]
4258   2220 F9            leave
4259   2221 09            ret
4260   2222 0A 25 22      jmp _if58_exit
4261   2225             _if58_exit:
4262   2225             ; return gcd(b, a % b); 
4263   2225 FA 05 00      lea d, [bp + 5] ; $a
4264   2228 2A            mov b, [d]
4265   2229             ; --- START FACTORS
4266   2229 D7            push a
4267   222A 11            mov a, b
4268   222B FA 07 00      lea d, [bp + 7] ; $b
4269   222E 2A            mov b, [d]
4270   222F AE            div a, b ; 
4271   2230 11            mov a, b
4272   2231 27            mov b, a
4273   2232 E4            pop a
4274   2233             ; --- END FACTORS
4275   2233 FD AB         swp b
4276   2235 D8            push b
4277   2236 FA 07 00      lea d, [bp + 7] ; $b
4278   2239 2A            mov b, [d]
4279   223A FD AB         swp b
4280   223C D8            push b
4281   223D 07 06 22      call gcd
4282   2240 51 04 00      add sp, 4
4283   2243 F9            leave
4284   2244 09            ret
4285   2245             
4286   2245             mod_exp:
4287   2245 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4288   2248             ; int result; 
4289   2248 52 02 00      sub sp, 2
4290   224B             ; result = 1; 
4291   224B FA FF FF      lea d, [bp + -1] ; $result
4292   224E DA            push d
4293   224F 26 01 00      mov b, $1
4294   2252 E7            pop d
4295   2253 FD 43         mov [d], b
4296   2255             ; while (exp > 0) { 
4297   2255             _while59_cond:
4298   2255 FA 07 00      lea d, [bp + 7] ; $exp
4299   2258 2A            mov b, [d]
4300   2259             ; --- START RELATIONAL
4301   2259 D7            push a
4302   225A 11            mov a, b
4303   225B 26 00 00      mov b, $0
4304   225E B0            cmp a, b
4305   225F FD 7F         sgt ; >
4306   2261 E4            pop a
4307   2262             ; --- END RELATIONAL
4308   2262 C0 00 00      cmp b, 0
4309   2265 C6 D3 22      je _while59_exit
4310   2268             _while59_block:
4311   2268             ; if (exp & 1) { 
4312   2268             _if60_cond:
4313   2268 FA 07 00      lea d, [bp + 7] ; $exp
4314   226B 2A            mov b, [d]
4315   226C D7            push a
4316   226D 11            mov a, b
4317   226E 26 01 00      mov b, $1
4318   2271 FD 92         and b, a ; &
4319   2273 E4            pop a
4320   2274 C0 00 00      cmp b, 0
4321   2277 C6 9C 22      je _if60_exit
4322   227A             _if60_true:
4323   227A             ; result = (result * base) % mod; 
4324   227A FA FF FF      lea d, [bp + -1] ; $result
4325   227D DA            push d
4326   227E FA FF FF      lea d, [bp + -1] ; $result
4327   2281 2A            mov b, [d]
4328   2282             ; --- START FACTORS
4329   2282 D7            push a
4330   2283 11            mov a, b
4331   2284 FA 05 00      lea d, [bp + 5] ; $base
4332   2287 2A            mov b, [d]
4333   2288 AC            mul a, b ; *
4334   2289 11            mov a, b
4335   228A 27            mov b, a
4336   228B E4            pop a
4337   228C             ; --- END FACTORS
4338   228C             ; --- START FACTORS
4339   228C D7            push a
4340   228D 11            mov a, b
4341   228E FA 09 00      lea d, [bp + 9] ; $mod
4342   2291 2A            mov b, [d]
4343   2292 AE            div a, b ; 
4344   2293 11            mov a, b
4345   2294 27            mov b, a
4346   2295 E4            pop a
4347   2296             ; --- END FACTORS
4348   2296 E7            pop d
4349   2297 FD 43         mov [d], b
4350   2299 0A 9C 22      jmp _if60_exit
4351   229C             _if60_exit:
4352   229C             ; exp = exp >> 1; 
4353   229C FA 07 00      lea d, [bp + 7] ; $exp
4354   229F DA            push d
4355   22A0 FA 07 00      lea d, [bp + 7] ; $exp
4356   22A3 2A            mov b, [d]
4357   22A4             ; --- START SHIFT
4358   22A4 D7            push a
4359   22A5 11            mov a, b
4360   22A6 26 01 00      mov b, $1
4361   22A9 FD 39         mov c, b
4362   22AB A5            ashr a, cl
4363   22AC 27            mov b, a
4364   22AD E4            pop a
4365   22AE             ; --- END SHIFT
4366   22AE E7            pop d
4367   22AF FD 43         mov [d], b
4368   22B1             ; base = (base * base) % mod; 
4369   22B1 FA 05 00      lea d, [bp + 5] ; $base
4370   22B4 DA            push d
4371   22B5 FA 05 00      lea d, [bp + 5] ; $base
4372   22B8 2A            mov b, [d]
4373   22B9             ; --- START FACTORS
4374   22B9 D7            push a
4375   22BA 11            mov a, b
4376   22BB FA 05 00      lea d, [bp + 5] ; $base
4377   22BE 2A            mov b, [d]
4378   22BF AC            mul a, b ; *
4379   22C0 11            mov a, b
4380   22C1 27            mov b, a
4381   22C2 E4            pop a
4382   22C3             ; --- END FACTORS
4383   22C3             ; --- START FACTORS
4384   22C3 D7            push a
4385   22C4 11            mov a, b
4386   22C5 FA 09 00      lea d, [bp + 9] ; $mod
4387   22C8 2A            mov b, [d]
4388   22C9 AE            div a, b ; 
4389   22CA 11            mov a, b
4390   22CB 27            mov b, a
4391   22CC E4            pop a
4392   22CD             ; --- END FACTORS
4393   22CD E7            pop d
4394   22CE FD 43         mov [d], b
4395   22D0 0A 55 22      jmp _while59_cond
4396   22D3             _while59_exit:
4397   22D3             ; return result; 
4398   22D3 FA FF FF      lea d, [bp + -1] ; $result
4399   22D6 2A            mov b, [d]
4400   22D7 F9            leave
4401   22D8 09            ret
4402   22D9             
4403   22D9             find_e:
4404   22D9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4405   22DC             ; int e; 
4406   22DC 52 02 00      sub sp, 2
4407   22DF             ; for (e = 2; e < phi; e++) { 
4408   22DF             _for61_init:
4409   22DF FA FF FF      lea d, [bp + -1] ; $e
4410   22E2 DA            push d
4411   22E3 26 02 00      mov b, $2
4412   22E6 E7            pop d
4413   22E7 FD 43         mov [d], b
4414   22E9             _for61_cond:
4415   22E9 FA FF FF      lea d, [bp + -1] ; $e
4416   22EC 2A            mov b, [d]
4417   22ED             ; --- START RELATIONAL
4418   22ED D7            push a
4419   22EE 11            mov a, b
4420   22EF FA 05 00      lea d, [bp + 5] ; $phi
4421   22F2 2A            mov b, [d]
4422   22F3 B0            cmp a, b
4423   22F4 FD 73         slt ; < (signed)
4424   22F6 E4            pop a
4425   22F7             ; --- END RELATIONAL
4426   22F7 C0 00 00      cmp b, 0
4427   22FA C6 39 23      je _for61_exit
4428   22FD             _for61_block:
4429   22FD             ; if (gcd(e, phi) == 1) { 
4430   22FD             _if62_cond:
4431   22FD FA 05 00      lea d, [bp + 5] ; $phi
4432   2300 2A            mov b, [d]
4433   2301 FD AB         swp b
4434   2303 D8            push b
4435   2304 FA FF FF      lea d, [bp + -1] ; $e
4436   2307 2A            mov b, [d]
4437   2308 FD AB         swp b
4438   230A D8            push b
4439   230B 07 06 22      call gcd
4440   230E 51 04 00      add sp, 4
4441   2311             ; --- START RELATIONAL
4442   2311 D7            push a
4443   2312 11            mov a, b
4444   2313 26 01 00      mov b, $1
4445   2316 B0            cmp a, b
4446   2317 FD 71         seq ; ==
4447   2319 E4            pop a
4448   231A             ; --- END RELATIONAL
4449   231A C0 00 00      cmp b, 0
4450   231D C6 29 23      je _if62_exit
4451   2320             _if62_true:
4452   2320             ; return e; 
4453   2320 FA FF FF      lea d, [bp + -1] ; $e
4454   2323 2A            mov b, [d]
4455   2324 F9            leave
4456   2325 09            ret
4457   2326 0A 29 23      jmp _if62_exit
4458   2329             _if62_exit:
4459   2329             _for61_update:
4460   2329 FA FF FF      lea d, [bp + -1] ; $e
4461   232C 2A            mov b, [d]
4462   232D FD 77         inc b
4463   232F FA FF FF      lea d, [bp + -1] ; $e
4464   2332 FD 43         mov [d], b
4465   2334 FD 7D         dec b
4466   2336 0A E9 22      jmp _for61_cond
4467   2339             _for61_exit:
4468   2339             ; return 0; 
4469   2339 26 00 00      mov b, $0
4470   233C F9            leave
4471   233D 09            ret
4472   233E             
4473   233E             find_d:
4474   233E F8 00 00      enter 0 ; (push bp; mov bp, sp)
4475   2341             ; int d; 
4476   2341 52 02 00      sub sp, 2
4477   2344             ; for (d = 2; d < phi; d++) { 
4478   2344             _for63_init:
4479   2344 FA FF FF      lea d, [bp + -1] ; $d
4480   2347 DA            push d
4481   2348 26 02 00      mov b, $2
4482   234B E7            pop d
4483   234C FD 43         mov [d], b
4484   234E             _for63_cond:
4485   234E FA FF FF      lea d, [bp + -1] ; $d
4486   2351 2A            mov b, [d]
4487   2352             ; --- START RELATIONAL
4488   2352 D7            push a
4489   2353 11            mov a, b
4490   2354 FA 07 00      lea d, [bp + 7] ; $phi
4491   2357 2A            mov b, [d]
4492   2358 B0            cmp a, b
4493   2359 FD 73         slt ; < (signed)
4494   235B E4            pop a
4495   235C             ; --- END RELATIONAL
4496   235C C0 00 00      cmp b, 0
4497   235F C6 A2 23      je _for63_exit
4498   2362             _for63_block:
4499   2362             ; if ((d * e) % phi == 1) { 
4500   2362             _if64_cond:
4501   2362 FA FF FF      lea d, [bp + -1] ; $d
4502   2365 2A            mov b, [d]
4503   2366             ; --- START FACTORS
4504   2366 D7            push a
4505   2367 11            mov a, b
4506   2368 FA 05 00      lea d, [bp + 5] ; $e
4507   236B 2A            mov b, [d]
4508   236C AC            mul a, b ; *
4509   236D 11            mov a, b
4510   236E 27            mov b, a
4511   236F E4            pop a
4512   2370             ; --- END FACTORS
4513   2370             ; --- START FACTORS
4514   2370 D7            push a
4515   2371 11            mov a, b
4516   2372 FA 07 00      lea d, [bp + 7] ; $phi
4517   2375 2A            mov b, [d]
4518   2376 AE            div a, b ; 
4519   2377 11            mov a, b
4520   2378 27            mov b, a
4521   2379 E4            pop a
4522   237A             ; --- END FACTORS
4523   237A             ; --- START RELATIONAL
4524   237A D7            push a
4525   237B 11            mov a, b
4526   237C 26 01 00      mov b, $1
4527   237F B0            cmp a, b
4528   2380 FD 71         seq ; ==
4529   2382 E4            pop a
4530   2383             ; --- END RELATIONAL
4531   2383 C0 00 00      cmp b, 0
4532   2386 C6 92 23      je _if64_exit
4533   2389             _if64_true:
4534   2389             ; return d; 
4535   2389 FA FF FF      lea d, [bp + -1] ; $d
4536   238C 2A            mov b, [d]
4537   238D F9            leave
4538   238E 09            ret
4539   238F 0A 92 23      jmp _if64_exit
4540   2392             _if64_exit:
4541   2392             _for63_update:
4542   2392 FA FF FF      lea d, [bp + -1] ; $d
4543   2395 2A            mov b, [d]
4544   2396 FD 77         inc b
4545   2398 FA FF FF      lea d, [bp + -1] ; $d
4546   239B FD 43         mov [d], b
4547   239D FD 7D         dec b
4548   239F 0A 4E 23      jmp _for63_cond
4549   23A2             _for63_exit:
4550   23A2             ; return 0; 
4551   23A2 26 00 00      mov b, $0
4552   23A5 F9            leave
4553   23A6 09            ret
4554   23A7             ; --- END TEXT SEGMENT
4555   23A7             
4556   23A7             ; --- BEGIN DATA SEGMENT
4557   23A7 00 00       st_fopen_max_handle: .dw 0
4558   23A9 50 75 62 6C _s0: .db "Public Key: (", 0
4558   23AD 69 63 20 4B 
4558   23B1 65 79 3A 20 
4558   23B5 28 00 
4559   23B7 25 64 2C 20 _s1: .db "%d, ", 0
4559   23BB 00 
4560   23BC 25 64 0A 00 _s2: .db "%d\n", 0
4561   23C0 50 72 69 76 _s3: .db "Private Key: (", 0
4561   23C4 61 74 65 20 
4561   23C8 4B 65 79 3A 
4561   23CC 20 28 00 
4562   23CF 45 6E 74 65 _s4: .db "Enter a string: ", 0
4562   23D3 72 20 61 20 
4562   23D7 73 74 72 69 
4562   23DB 6E 67 3A 20 
4562   23DF 00 
4563   23E0 45 6E 63 72 _s5: .db "Encrypted text: ", 0
4563   23E4 79 70 74 65 
4563   23E8 64 20 74 65 
4563   23EC 78 74 3A 20 
4563   23F0 00 
4564   23F1 25 64 20 00 _s6: .db "%d ", 0
4565   23F5 0A 00       _s7: .db "\n", 0
4566   23F7 44 65 63 72 _s8: .db "Decrypted text: ", 0
4566   23FB 79 70 74 65 
4566   23FF 64 20 74 65 
4566   2403 78 74 3A 20 
4566   2407 00 
4567   2408 55 6E 65 78 _s9: .db "Unexpected format in printf.", 0
4567   240C 70 65 63 74 
4567   2410 65 64 20 66 
4567   2414 6F 72 6D 61 
4567   2418 74 20 69 6E 
4567   241C 20 70 72 69 
4567   2420 6E 74 66 2E 
4567   2424 00 
4568   2425 45 72 72 6F _s10: .db "Error: Unknown argument type.\n", 0
4568   2429 72 3A 20 55 
4568   242D 6E 6B 6E 6F 
4568   2431 77 6E 20 61 
4568   2435 72 67 75 6D 
4568   2439 65 6E 74 20 
4568   243D 74 79 70 65 
4568   2441 2E 0A 00 
4569   2444 1B 5B 32 4A _s11: .db "\033[2J\033[H", 0
4569   2448 1B 5B 48 00 
4570   244C             
4571   244C 4E 24       _heap_top: .dw _heap
4572   244E 00          _heap: .db 0
4573   244F             ; --- END DATA SEGMENT
4574   244F             
4575   244F             .end
tasm: Number of errors = 0
