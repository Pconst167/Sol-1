0001   0000             ; --- FILENAME: programs/rsa
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ;; int p, q, n, phi, e, d; 
0011   0408 52 02 00      sub sp, 2 ; p
0012   040B 52 02 00      sub sp, 2 ; q
0013   040E 52 02 00      sub sp, 2 ; n
0014   0411 52 02 00      sub sp, 2 ; phi
0015   0414 52 02 00      sub sp, 2 ; e
0016   0417 52 02 00      sub sp, 2 ; d
0017   041A             ;; p = 13; 
0018   041A FA FF FF      lea d, [bp + -1] ; $p
0019   041D DA            push d
0020   041E 26 0D 00      mov b, $d
0021   0421 E7            pop d
0022   0422 FD 43         mov [d], b
0023   0424             ;; q = 11; 
0024   0424 FA FD FF      lea d, [bp + -3] ; $q
0025   0427 DA            push d
0026   0428 26 0B 00      mov b, $b
0027   042B E7            pop d
0028   042C FD 43         mov [d], b
0029   042E             ;; n = p * q; 
0030   042E FA FB FF      lea d, [bp + -5] ; $n
0031   0431 DA            push d
0032   0432 FA FF FF      lea d, [bp + -1] ; $p
0033   0435 2A            mov b, [d]
0034   0436             ; START FACTORS
0035   0436 D7            push a
0036   0437 11            mov a, b
0037   0438 FA FD FF      lea d, [bp + -3] ; $q
0038   043B 2A            mov b, [d]
0039   043C AC            mul a, b ; *
0040   043D 11            mov a, b
0041   043E 27            mov b, a
0042   043F E4            pop a
0043   0440             ; END FACTORS
0044   0440 E7            pop d
0045   0441 FD 43         mov [d], b
0046   0443             ;; phi = (p - 1) * (q - 1); 
0047   0443 FA F9 FF      lea d, [bp + -7] ; $phi
0048   0446 DA            push d
0049   0447 FA FF FF      lea d, [bp + -1] ; $p
0050   044A 2A            mov b, [d]
0051   044B             ; START TERMS
0052   044B D7            push a
0053   044C 11            mov a, b
0054   044D 26 01 00      mov b, $1
0055   0450 60            sub a, b
0056   0451 27            mov b, a
0057   0452 E4            pop a
0058   0453             ; END TERMS
0059   0453             ; START FACTORS
0060   0453 D7            push a
0061   0454 11            mov a, b
0062   0455 FA FD FF      lea d, [bp + -3] ; $q
0063   0458 2A            mov b, [d]
0064   0459             ; START TERMS
0065   0459 D7            push a
0066   045A 11            mov a, b
0067   045B 26 01 00      mov b, $1
0068   045E 60            sub a, b
0069   045F 27            mov b, a
0070   0460 E4            pop a
0071   0461             ; END TERMS
0072   0461 AC            mul a, b ; *
0073   0462 11            mov a, b
0074   0463 27            mov b, a
0075   0464 E4            pop a
0076   0465             ; END FACTORS
0077   0465 E7            pop d
0078   0466 FD 43         mov [d], b
0079   0468             ;; e = find_e(phi); 
0080   0468 FA F7 FF      lea d, [bp + -9] ; $e
0081   046B DA            push d
0082   046C FA F9 FF      lea d, [bp + -7] ; $phi
0083   046F 2A            mov b, [d]
0084   0470 FD AB         swp b
0085   0472 D8            push b
0086   0473 07 9A 1C      call find_e
0087   0476 51 02 00      add sp, 2
0088   0479 E7            pop d
0089   047A FD 43         mov [d], b
0090   047C             ;; d = find_d(e, phi); 
0091   047C FA F5 FF      lea d, [bp + -11] ; $d
0092   047F DA            push d
0093   0480 FA F9 FF      lea d, [bp + -7] ; $phi
0094   0483 2A            mov b, [d]
0095   0484 FD AB         swp b
0096   0486 D8            push b
0097   0487 FA F7 FF      lea d, [bp + -9] ; $e
0098   048A 2A            mov b, [d]
0099   048B FD AB         swp b
0100   048D D8            push b
0101   048E 07 FF 1C      call find_d
0102   0491 51 04 00      add sp, 4
0103   0494 E7            pop d
0104   0495 FD 43         mov [d], b
0105   0497             ;; printf("Public Key: ("); 
0106   0497 26 68 1D      mov b, _s0 ; "Public Key: ("
0107   049A FD AB         swp b
0108   049C D8            push b
0109   049D 07 3A 0A      call printf
0110   04A0 51 02 00      add sp, 2
0111   04A3             ;; printf("%d, ", n); 
0112   04A3 FA FB FF      lea d, [bp + -5] ; $n
0113   04A6 2A            mov b, [d]
0114   04A7 FD AB         swp b
0115   04A9 D8            push b
0116   04AA 26 76 1D      mov b, _s1 ; "%d, "
0117   04AD FD AB         swp b
0118   04AF D8            push b
0119   04B0 07 3A 0A      call printf
0120   04B3 51 04 00      add sp, 4
0121   04B6             ;; printf("%d\n", e); 
0122   04B6 FA F7 FF      lea d, [bp + -9] ; $e
0123   04B9 2A            mov b, [d]
0124   04BA FD AB         swp b
0125   04BC D8            push b
0126   04BD 26 7B 1D      mov b, _s2 ; "%d\n"
0127   04C0 FD AB         swp b
0128   04C2 D8            push b
0129   04C3 07 3A 0A      call printf
0130   04C6 51 04 00      add sp, 4
0131   04C9             ;; print("Private Key: ("); 
0132   04C9 26 7F 1D      mov b, _s3 ; "Private Key: ("
0133   04CC FD AB         swp b
0134   04CE D8            push b
0135   04CF 07 DC 17      call print
0136   04D2 51 02 00      add sp, 2
0137   04D5             ;; printf("%d, ", n); 
0138   04D5 FA FB FF      lea d, [bp + -5] ; $n
0139   04D8 2A            mov b, [d]
0140   04D9 FD AB         swp b
0141   04DB D8            push b
0142   04DC 26 76 1D      mov b, _s1 ; "%d, "
0143   04DF FD AB         swp b
0144   04E1 D8            push b
0145   04E2 07 3A 0A      call printf
0146   04E5 51 04 00      add sp, 4
0147   04E8             ;; printf("%d\n", d); 
0148   04E8 FA F5 FF      lea d, [bp + -11] ; $d
0149   04EB 2A            mov b, [d]
0150   04EC FD AB         swp b
0151   04EE D8            push b
0152   04EF 26 7B 1D      mov b, _s2 ; "%d\n"
0153   04F2 FD AB         swp b
0154   04F4 D8            push b
0155   04F5 07 3A 0A      call printf
0156   04F8 51 04 00      add sp, 4
0157   04FB             ;; char input_str[100]; 
0158   04FB 52 64 00      sub sp, 100 ; input_str
0159   04FE             ;; printf("Enter a string: "); 
0160   04FE 26 8E 1D      mov b, _s4 ; "Enter a string: "
0161   0501 FD AB         swp b
0162   0503 D8            push b
0163   0504 07 3A 0A      call printf
0164   0507 51 02 00      add sp, 2
0165   050A             ;; gets(input_str); 
0166   050A FA 91 FF      lea d, [bp + -111] ; $input_str
0167   050D 2D            mov b, d
0168   050E FD AB         swp b
0169   0510 D8            push b
0170   0511 07 75 10      call gets
0171   0514 51 02 00      add sp, 2
0172   0517             ;; int encrypted_chars[100]; 
0173   0517 52 C8 00      sub sp, 200 ; encrypted_chars
0174   051A             ;; int encrypted_chars_len ; 
0175   051A 52 02 00      sub sp, 2 ; encrypted_chars_len
0176   051D             ;; encrypted_chars_len = 0; 
0177   051D FA C7 FE      lea d, [bp + -313] ; $encrypted_chars_len
0178   0520 DA            push d
0179   0521 26 00 00      mov b, $0
0180   0524 E7            pop d
0181   0525 FD 43         mov [d], b
0182   0527             ;; printf("Encrypted text: "); 
0183   0527 26 9F 1D      mov b, _s5 ; "Encrypted text: "
0184   052A FD AB         swp b
0185   052C D8            push b
0186   052D 07 3A 0A      call printf
0187   0530 51 02 00      add sp, 2
0188   0533             ;; int i; 
0189   0533 52 02 00      sub sp, 2 ; i
0190   0536             ;; for (i = 0; input_str[i] != '\0' && input_str[i] != '\n'; i++) { 
0191   0536             _for1_init:
0192   0536 FA C5 FE      lea d, [bp + -315] ; $i
0193   0539 DA            push d
0194   053A 26 00 00      mov b, $0
0195   053D E7            pop d
0196   053E FD 43         mov [d], b
0197   0540             _for1_cond:
0198   0540 FA 91 FF      lea d, [bp + -111] ; $input_str
0199   0543 D7            push a
0200   0544 DA            push d
0201   0545 FA C5 FE      lea d, [bp + -315] ; $i
0202   0548 2A            mov b, [d]
0203   0549 E7            pop d
0204   054A 5A            add d, b
0205   054B E4            pop a
0206   054C 32            mov bl, [d]
0207   054D A7 00         mov bh, 0
0208   054F             ; START RELATIONAL
0209   054F D7            push a
0210   0550 11            mov a, b
0211   0551 26 00 00      mov b, $0
0212   0554 B0            cmp a, b
0213   0555 FD 72         sneq ; !=
0214   0557 E4            pop a
0215   0558             ; END RELATIONAL
0216   0558             ; START LOGICAL AND
0217   0558 D7            push a
0218   0559 11            mov a, b
0219   055A FA 91 FF      lea d, [bp + -111] ; $input_str
0220   055D D7            push a
0221   055E DA            push d
0222   055F FA C5 FE      lea d, [bp + -315] ; $i
0223   0562 2A            mov b, [d]
0224   0563 E7            pop d
0225   0564 5A            add d, b
0226   0565 E4            pop a
0227   0566 32            mov bl, [d]
0228   0567 A7 00         mov bh, 0
0229   0569             ; START RELATIONAL
0230   0569 D7            push a
0231   056A 11            mov a, b
0232   056B 26 0A 00      mov b, $a
0233   056E B0            cmp a, b
0234   056F FD 72         sneq ; !=
0235   0571 E4            pop a
0236   0572             ; END RELATIONAL
0237   0572 FD A7         sand a, b
0238   0574 E4            pop a
0239   0575             ; END LOGICAL AND
0240   0575 C0 00 00      cmp b, 0
0241   0578 C6 F0 05      je _for1_exit
0242   057B             _for1_block:
0243   057B             ;; encrypted_chars[i] = mod_exp(input_str[i], e, n); 
0244   057B FA C9 FE      lea d, [bp + -311] ; $encrypted_chars
0245   057E D7            push a
0246   057F DA            push d
0247   0580 FA C5 FE      lea d, [bp + -315] ; $i
0248   0583 2A            mov b, [d]
0249   0584 E7            pop d
0250   0585 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0251   0589 E4            pop a
0252   058A DA            push d
0253   058B FA FB FF      lea d, [bp + -5] ; $n
0254   058E 2A            mov b, [d]
0255   058F FD AB         swp b
0256   0591 D8            push b
0257   0592 FA F7 FF      lea d, [bp + -9] ; $e
0258   0595 2A            mov b, [d]
0259   0596 FD AB         swp b
0260   0598 D8            push b
0261   0599 FA 91 FF      lea d, [bp + -111] ; $input_str
0262   059C D7            push a
0263   059D DA            push d
0264   059E FA C5 FE      lea d, [bp + -315] ; $i
0265   05A1 2A            mov b, [d]
0266   05A2 E7            pop d
0267   05A3 5A            add d, b
0268   05A4 E4            pop a
0269   05A5 32            mov bl, [d]
0270   05A6 A7 00         mov bh, 0
0271   05A8 FD AB         swp b
0272   05AA D8            push b
0273   05AB 07 06 1C      call mod_exp
0274   05AE 51 06 00      add sp, 6
0275   05B1 E7            pop d
0276   05B2 FD 43         mov [d], b
0277   05B4             ;; printf("%d ", encrypted_chars[i]); 
0278   05B4 FA C9 FE      lea d, [bp + -311] ; $encrypted_chars
0279   05B7 D7            push a
0280   05B8 DA            push d
0281   05B9 FA C5 FE      lea d, [bp + -315] ; $i
0282   05BC 2A            mov b, [d]
0283   05BD E7            pop d
0284   05BE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0285   05C2 E4            pop a
0286   05C3 2A            mov b, [d]
0287   05C4 FD AB         swp b
0288   05C6 D8            push b
0289   05C7 26 B0 1D      mov b, _s6 ; "%d "
0290   05CA FD AB         swp b
0291   05CC D8            push b
0292   05CD 07 3A 0A      call printf
0293   05D0 51 04 00      add sp, 4
0294   05D3             ;; encrypted_chars_len++; 
0295   05D3 FA C7 FE      lea d, [bp + -313] ; $encrypted_chars_len
0296   05D6 2A            mov b, [d]
0297   05D7 FD 77         inc b
0298   05D9 FA C7 FE      lea d, [bp + -313] ; $encrypted_chars_len
0299   05DC FD 43         mov [d], b
0300   05DE FD 7D         dec b
0301   05E0             _for1_update:
0302   05E0 FA C5 FE      lea d, [bp + -315] ; $i
0303   05E3 2A            mov b, [d]
0304   05E4 FD 77         inc b
0305   05E6 FA C5 FE      lea d, [bp + -315] ; $i
0306   05E9 FD 43         mov [d], b
0307   05EB FD 7D         dec b
0308   05ED 0A 40 05      jmp _for1_cond
0309   05F0             _for1_exit:
0310   05F0             ;; printf("\n"); 
0311   05F0 26 B4 1D      mov b, _s7 ; "\n"
0312   05F3 FD AB         swp b
0313   05F5 D8            push b
0314   05F6 07 3A 0A      call printf
0315   05F9 51 02 00      add sp, 2
0316   05FC             ;; int decrypted_char; 
0317   05FC 52 02 00      sub sp, 2 ; decrypted_char
0318   05FF             ;; char c; 
0319   05FF 52 01 00      sub sp, 1 ; c
0320   0602             ;; printf("Decrypted text: "); 
0321   0602 26 B6 1D      mov b, _s8 ; "Decrypted text: "
0322   0605 FD AB         swp b
0323   0607 D8            push b
0324   0608 07 3A 0A      call printf
0325   060B 51 02 00      add sp, 2
0326   060E             ;; for (i = 0; i < encrypted_chars_len; i++) { 
0327   060E             _for2_init:
0328   060E FA C5 FE      lea d, [bp + -315] ; $i
0329   0611 DA            push d
0330   0612 26 00 00      mov b, $0
0331   0615 E7            pop d
0332   0616 FD 43         mov [d], b
0333   0618             _for2_cond:
0334   0618 FA C5 FE      lea d, [bp + -315] ; $i
0335   061B 2A            mov b, [d]
0336   061C             ; START RELATIONAL
0337   061C D7            push a
0338   061D 11            mov a, b
0339   061E FA C7 FE      lea d, [bp + -313] ; $encrypted_chars_len
0340   0621 2A            mov b, [d]
0341   0622 B0            cmp a, b
0342   0623 FD 73         slt ; < (signed)
0343   0625 E4            pop a
0344   0626             ; END RELATIONAL
0345   0626 C0 00 00      cmp b, 0
0346   0629 C6 82 06      je _for2_exit
0347   062C             _for2_block:
0348   062C             ;; decrypted_char = mod_exp(encrypted_chars[i], d, n); 
0349   062C FA C3 FE      lea d, [bp + -317] ; $decrypted_char
0350   062F DA            push d
0351   0630 FA FB FF      lea d, [bp + -5] ; $n
0352   0633 2A            mov b, [d]
0353   0634 FD AB         swp b
0354   0636 D8            push b
0355   0637 FA F5 FF      lea d, [bp + -11] ; $d
0356   063A 2A            mov b, [d]
0357   063B FD AB         swp b
0358   063D D8            push b
0359   063E FA C9 FE      lea d, [bp + -311] ; $encrypted_chars
0360   0641 D7            push a
0361   0642 DA            push d
0362   0643 FA C5 FE      lea d, [bp + -315] ; $i
0363   0646 2A            mov b, [d]
0364   0647 E7            pop d
0365   0648 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0366   064C E4            pop a
0367   064D 2A            mov b, [d]
0368   064E FD AB         swp b
0369   0650 D8            push b
0370   0651 07 06 1C      call mod_exp
0371   0654 51 06 00      add sp, 6
0372   0657 E7            pop d
0373   0658 FD 43         mov [d], b
0374   065A             ;; c = decrypted_char; 
0375   065A FA C2 FE      lea d, [bp + -318] ; $c
0376   065D DA            push d
0377   065E FA C3 FE      lea d, [bp + -317] ; $decrypted_char
0378   0661 2A            mov b, [d]
0379   0662 E7            pop d
0380   0663 FD 3E         mov [d], bl
0381   0665             ;; putchar(c); 
0382   0665 FA C2 FE      lea d, [bp + -318] ; $c
0383   0668 32            mov bl, [d]
0384   0669 A7 00         mov bh, 0
0385   066B DD            push bl
0386   066C 07 94 17      call putchar
0387   066F 51 01 00      add sp, 1
0388   0672             _for2_update:
0389   0672 FA C5 FE      lea d, [bp + -315] ; $i
0390   0675 2A            mov b, [d]
0391   0676 FD 77         inc b
0392   0678 FA C5 FE      lea d, [bp + -315] ; $i
0393   067B FD 43         mov [d], b
0394   067D FD 7D         dec b
0395   067F 0A 18 06      jmp _for2_cond
0396   0682             _for2_exit:
0397   0682             ;; printf("\n"); 
0398   0682 26 B4 1D      mov b, _s7 ; "\n"
0399   0685 FD AB         swp b
0400   0687 D8            push b
0401   0688 07 3A 0A      call printf
0402   068B 51 02 00      add sp, 2
0403   068E             ;; return 0; 
0404   068E 26 00 00      mov b, $0
0405   0691 F9            leave
0406   0692 05 0B         syscall sys_terminate_proc
0407   0694             
0408   0694             strcpy:
0409   0694 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0410   0697             ;; char *psrc; 
0411   0697 52 02 00      sub sp, 2 ; psrc
0412   069A             ;; char *pdest; 
0413   069A 52 02 00      sub sp, 2 ; pdest
0414   069D             ;; psrc = src; 
0415   069D FA FF FF      lea d, [bp + -1] ; $psrc
0416   06A0 DA            push d
0417   06A1 FA 07 00      lea d, [bp + 7] ; $src
0418   06A4 2A            mov b, [d]
0419   06A5 E7            pop d
0420   06A6 FD 43         mov [d], b
0421   06A8             ;; pdest = dest; 
0422   06A8 FA FD FF      lea d, [bp + -3] ; $pdest
0423   06AB DA            push d
0424   06AC FA 05 00      lea d, [bp + 5] ; $dest
0425   06AF 2A            mov b, [d]
0426   06B0 E7            pop d
0427   06B1 FD 43         mov [d], b
0428   06B3             ;; while(*psrc) *pdest++ = *psrc++; 
0429   06B3             _while3_cond:
0430   06B3 FA FF FF      lea d, [bp + -1] ; $psrc
0431   06B6 2A            mov b, [d]
0432   06B7 74            mov d, b
0433   06B8 32            mov bl, [d]
0434   06B9 A7 00         mov bh, 0
0435   06BB C0 00 00      cmp b, 0
0436   06BE C6 E6 06      je _while3_exit
0437   06C1             _while3_block:
0438   06C1             ;; *pdest++ = *psrc++; 
0439   06C1 FA FD FF      lea d, [bp + -3] ; $pdest
0440   06C4 2A            mov b, [d]
0441   06C5 FD 77         inc b
0442   06C7 FA FD FF      lea d, [bp + -3] ; $pdest
0443   06CA FD 43         mov [d], b
0444   06CC FD 7D         dec b
0445   06CE D8            push b
0446   06CF FA FF FF      lea d, [bp + -1] ; $psrc
0447   06D2 2A            mov b, [d]
0448   06D3 FD 77         inc b
0449   06D5 FA FF FF      lea d, [bp + -1] ; $psrc
0450   06D8 FD 43         mov [d], b
0451   06DA FD 7D         dec b
0452   06DC 74            mov d, b
0453   06DD 32            mov bl, [d]
0454   06DE A7 00         mov bh, 0
0455   06E0 E7            pop d
0456   06E1 FD 3E         mov [d], bl
0457   06E3 0A B3 06      jmp _while3_cond
0458   06E6             _while3_exit:
0459   06E6             ;; *pdest = '\0'; 
0460   06E6 FA FD FF      lea d, [bp + -3] ; $pdest
0461   06E9 2A            mov b, [d]
0462   06EA D8            push b
0463   06EB 26 00 00      mov b, $0
0464   06EE E7            pop d
0465   06EF FD 3E         mov [d], bl
0466   06F1 F9            leave
0467   06F2 09            ret
0468   06F3             
0469   06F3             strcmp:
0470   06F3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0471   06F6             ;; while (*s1 && (*s1 == *s2)) { 
0472   06F6             _while4_cond:
0473   06F6 FA 05 00      lea d, [bp + 5] ; $s1
0474   06F9 2A            mov b, [d]
0475   06FA 74            mov d, b
0476   06FB 32            mov bl, [d]
0477   06FC A7 00         mov bh, 0
0478   06FE             ; START LOGICAL AND
0479   06FE D7            push a
0480   06FF 11            mov a, b
0481   0700 FA 05 00      lea d, [bp + 5] ; $s1
0482   0703 2A            mov b, [d]
0483   0704 74            mov d, b
0484   0705 32            mov bl, [d]
0485   0706 A7 00         mov bh, 0
0486   0708             ; START RELATIONAL
0487   0708 D7            push a
0488   0709 11            mov a, b
0489   070A FA 07 00      lea d, [bp + 7] ; $s2
0490   070D 2A            mov b, [d]
0491   070E 74            mov d, b
0492   070F 32            mov bl, [d]
0493   0710 A7 00         mov bh, 0
0494   0712 B0            cmp a, b
0495   0713 FD 71         seq ; ==
0496   0715 E4            pop a
0497   0716             ; END RELATIONAL
0498   0716 FD A7         sand a, b
0499   0718 E4            pop a
0500   0719             ; END LOGICAL AND
0501   0719 C0 00 00      cmp b, 0
0502   071C C6 3C 07      je _while4_exit
0503   071F             _while4_block:
0504   071F             ;; s1++; 
0505   071F FA 05 00      lea d, [bp + 5] ; $s1
0506   0722 2A            mov b, [d]
0507   0723 FD 77         inc b
0508   0725 FA 05 00      lea d, [bp + 5] ; $s1
0509   0728 FD 43         mov [d], b
0510   072A FD 7D         dec b
0511   072C             ;; s2++; 
0512   072C FA 07 00      lea d, [bp + 7] ; $s2
0513   072F 2A            mov b, [d]
0514   0730 FD 77         inc b
0515   0732 FA 07 00      lea d, [bp + 7] ; $s2
0516   0735 FD 43         mov [d], b
0517   0737 FD 7D         dec b
0518   0739 0A F6 06      jmp _while4_cond
0519   073C             _while4_exit:
0520   073C             ;; return *s1 - *s2; 
0521   073C FA 05 00      lea d, [bp + 5] ; $s1
0522   073F 2A            mov b, [d]
0523   0740 74            mov d, b
0524   0741 32            mov bl, [d]
0525   0742 A7 00         mov bh, 0
0526   0744             ; START TERMS
0527   0744 D7            push a
0528   0745 11            mov a, b
0529   0746 FA 07 00      lea d, [bp + 7] ; $s2
0530   0749 2A            mov b, [d]
0531   074A 74            mov d, b
0532   074B 32            mov bl, [d]
0533   074C A7 00         mov bh, 0
0534   074E 60            sub a, b
0535   074F 27            mov b, a
0536   0750 E4            pop a
0537   0751             ; END TERMS
0538   0751 F9            leave
0539   0752 09            ret
0540   0753             
0541   0753             strncmp:
0542   0753 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0543   0756 F9            leave
0544   0757 09            ret
0545   0758             
0546   0758             strcat:
0547   0758 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0548   075B             ;; int dest_len; 
0549   075B 52 02 00      sub sp, 2 ; dest_len
0550   075E             ;; int i; 
0551   075E 52 02 00      sub sp, 2 ; i
0552   0761             ;; dest_len = strlen(dest); 
0553   0761 FA FF FF      lea d, [bp + -1] ; $dest_len
0554   0764 DA            push d
0555   0765 FA 05 00      lea d, [bp + 5] ; $dest
0556   0768 2A            mov b, [d]
0557   0769 FD AB         swp b
0558   076B D8            push b
0559   076C 07 0E 08      call strlen
0560   076F 51 02 00      add sp, 2
0561   0772 E7            pop d
0562   0773 FD 43         mov [d], b
0563   0775             ;; for (i = 0; src[i] != 0; i=i+1) { 
0564   0775             _for5_init:
0565   0775 FA FD FF      lea d, [bp + -3] ; $i
0566   0778 DA            push d
0567   0779 26 00 00      mov b, $0
0568   077C E7            pop d
0569   077D FD 43         mov [d], b
0570   077F             _for5_cond:
0571   077F FA 07 00      lea d, [bp + 7] ; $src
0572   0782 FD 2A         mov d, [d]
0573   0784 D7            push a
0574   0785 DA            push d
0575   0786 FA FD FF      lea d, [bp + -3] ; $i
0576   0789 2A            mov b, [d]
0577   078A E7            pop d
0578   078B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0579   078F E4            pop a
0580   0790 32            mov bl, [d]
0581   0791 A7 00         mov bh, 0
0582   0793             ; START RELATIONAL
0583   0793 D7            push a
0584   0794 11            mov a, b
0585   0795 26 00 00      mov b, $0
0586   0798 B0            cmp a, b
0587   0799 FD 72         sneq ; !=
0588   079B E4            pop a
0589   079C             ; END RELATIONAL
0590   079C C0 00 00      cmp b, 0
0591   079F C6 E8 07      je _for5_exit
0592   07A2             _for5_block:
0593   07A2             ;; dest[dest_len + i] = src[i]; 
0594   07A2 FA 05 00      lea d, [bp + 5] ; $dest
0595   07A5 FD 2A         mov d, [d]
0596   07A7 D7            push a
0597   07A8 DA            push d
0598   07A9 FA FF FF      lea d, [bp + -1] ; $dest_len
0599   07AC 2A            mov b, [d]
0600   07AD             ; START TERMS
0601   07AD D7            push a
0602   07AE 11            mov a, b
0603   07AF FA FD FF      lea d, [bp + -3] ; $i
0604   07B2 2A            mov b, [d]
0605   07B3 56            add b, a
0606   07B4 E4            pop a
0607   07B5             ; END TERMS
0608   07B5 E7            pop d
0609   07B6 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0610   07BA E4            pop a
0611   07BB DA            push d
0612   07BC FA 07 00      lea d, [bp + 7] ; $src
0613   07BF FD 2A         mov d, [d]
0614   07C1 D7            push a
0615   07C2 DA            push d
0616   07C3 FA FD FF      lea d, [bp + -3] ; $i
0617   07C6 2A            mov b, [d]
0618   07C7 E7            pop d
0619   07C8 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0620   07CC E4            pop a
0621   07CD 32            mov bl, [d]
0622   07CE A7 00         mov bh, 0
0623   07D0 E7            pop d
0624   07D1 FD 3E         mov [d], bl
0625   07D3             _for5_update:
0626   07D3 FA FD FF      lea d, [bp + -3] ; $i
0627   07D6 DA            push d
0628   07D7 FA FD FF      lea d, [bp + -3] ; $i
0629   07DA 2A            mov b, [d]
0630   07DB             ; START TERMS
0631   07DB D7            push a
0632   07DC 11            mov a, b
0633   07DD 26 01 00      mov b, $1
0634   07E0 56            add b, a
0635   07E1 E4            pop a
0636   07E2             ; END TERMS
0637   07E2 E7            pop d
0638   07E3 FD 43         mov [d], b
0639   07E5 0A 7F 07      jmp _for5_cond
0640   07E8             _for5_exit:
0641   07E8             ;; dest[dest_len + i] = 0; 
0642   07E8 FA 05 00      lea d, [bp + 5] ; $dest
0643   07EB FD 2A         mov d, [d]
0644   07ED D7            push a
0645   07EE DA            push d
0646   07EF FA FF FF      lea d, [bp + -1] ; $dest_len
0647   07F2 2A            mov b, [d]
0648   07F3             ; START TERMS
0649   07F3 D7            push a
0650   07F4 11            mov a, b
0651   07F5 FA FD FF      lea d, [bp + -3] ; $i
0652   07F8 2A            mov b, [d]
0653   07F9 56            add b, a
0654   07FA E4            pop a
0655   07FB             ; END TERMS
0656   07FB E7            pop d
0657   07FC FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0658   0800 E4            pop a
0659   0801 DA            push d
0660   0802 26 00 00      mov b, $0
0661   0805 E7            pop d
0662   0806 FD 3E         mov [d], bl
0663   0808             ;; return dest; 
0664   0808 FA 05 00      lea d, [bp + 5] ; $dest
0665   080B 2A            mov b, [d]
0666   080C F9            leave
0667   080D 09            ret
0668   080E             
0669   080E             strlen:
0670   080E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0671   0811             ;; int length; 
0672   0811 52 02 00      sub sp, 2 ; length
0673   0814             ;; length = 0; 
0674   0814 FA FF FF      lea d, [bp + -1] ; $length
0675   0817 DA            push d
0676   0818 26 00 00      mov b, $0
0677   081B E7            pop d
0678   081C FD 43         mov [d], b
0679   081E             ;; while (str[length] != 0) { 
0680   081E             _while6_cond:
0681   081E FA 05 00      lea d, [bp + 5] ; $str
0682   0821 FD 2A         mov d, [d]
0683   0823 D7            push a
0684   0824 DA            push d
0685   0825 FA FF FF      lea d, [bp + -1] ; $length
0686   0828 2A            mov b, [d]
0687   0829 E7            pop d
0688   082A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0689   082E E4            pop a
0690   082F 32            mov bl, [d]
0691   0830 A7 00         mov bh, 0
0692   0832             ; START RELATIONAL
0693   0832 D7            push a
0694   0833 11            mov a, b
0695   0834 26 00 00      mov b, $0
0696   0837 B0            cmp a, b
0697   0838 FD 72         sneq ; !=
0698   083A E4            pop a
0699   083B             ; END RELATIONAL
0700   083B C0 00 00      cmp b, 0
0701   083E C6 51 08      je _while6_exit
0702   0841             _while6_block:
0703   0841             ;; length++; 
0704   0841 FA FF FF      lea d, [bp + -1] ; $length
0705   0844 2A            mov b, [d]
0706   0845 FD 77         inc b
0707   0847 FA FF FF      lea d, [bp + -1] ; $length
0708   084A FD 43         mov [d], b
0709   084C FD 7D         dec b
0710   084E 0A 1E 08      jmp _while6_cond
0711   0851             _while6_exit:
0712   0851             ;; return length; 
0713   0851 FA FF FF      lea d, [bp + -1] ; $length
0714   0854 2A            mov b, [d]
0715   0855 F9            leave
0716   0856 09            ret
0717   0857             
0718   0857             exit:
0719   0857 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0720   085A             
0721   085A             ; --- BEGIN INLINE ASM BLOCK
0722   085A 05 0B         syscall sys_terminate_proc
0723   085C             ; --- END INLINE ASM BLOCK
0724   085C             
0725   085C F9            leave
0726   085D 09            ret
0727   085E             
0728   085E             memset:
0729   085E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0730   0861             ;; int i; 
0731   0861 52 02 00      sub sp, 2 ; i
0732   0864             ;; for(i = 0; i < size; i++){ 
0733   0864             _for7_init:
0734   0864 FA FF FF      lea d, [bp + -1] ; $i
0735   0867 DA            push d
0736   0868 26 00 00      mov b, $0
0737   086B E7            pop d
0738   086C FD 43         mov [d], b
0739   086E             _for7_cond:
0740   086E FA FF FF      lea d, [bp + -1] ; $i
0741   0871 2A            mov b, [d]
0742   0872             ; START RELATIONAL
0743   0872 D7            push a
0744   0873 11            mov a, b
0745   0874 FA 08 00      lea d, [bp + 8] ; $size
0746   0877 2A            mov b, [d]
0747   0878 B0            cmp a, b
0748   0879 FD 73         slt ; < (signed)
0749   087B E4            pop a
0750   087C             ; END RELATIONAL
0751   087C C0 00 00      cmp b, 0
0752   087F C6 A8 08      je _for7_exit
0753   0882             _for7_block:
0754   0882             ;; *(s+i) = c; 
0755   0882 FA 05 00      lea d, [bp + 5] ; $s
0756   0885 2A            mov b, [d]
0757   0886             ; START TERMS
0758   0886 D7            push a
0759   0887 11            mov a, b
0760   0888 FA FF FF      lea d, [bp + -1] ; $i
0761   088B 2A            mov b, [d]
0762   088C 56            add b, a
0763   088D E4            pop a
0764   088E             ; END TERMS
0765   088E D8            push b
0766   088F FA 07 00      lea d, [bp + 7] ; $c
0767   0892 32            mov bl, [d]
0768   0893 A7 00         mov bh, 0
0769   0895 E7            pop d
0770   0896 FD 3E         mov [d], bl
0771   0898             _for7_update:
0772   0898 FA FF FF      lea d, [bp + -1] ; $i
0773   089B 2A            mov b, [d]
0774   089C FD 77         inc b
0775   089E FA FF FF      lea d, [bp + -1] ; $i
0776   08A1 FD 43         mov [d], b
0777   08A3 FD 7D         dec b
0778   08A5 0A 6E 08      jmp _for7_cond
0779   08A8             _for7_exit:
0780   08A8             ;; return s; 
0781   08A8 FA 05 00      lea d, [bp + 5] ; $s
0782   08AB 2A            mov b, [d]
0783   08AC F9            leave
0784   08AD 09            ret
0785   08AE             
0786   08AE             atoi:
0787   08AE F8 00 00      enter 0 ; (push bp; mov bp, sp)
0788   08B1             ;; int result = 0;  // Initialize result 
0789   08B1 52 02 00      sub sp, 2 ; result
0790   08B4             ; --- START LOCAL VAR INITIALIZATION
0791   08B4 FA FF FF      lea d, [bp + -1] ; $result
0792   08B7 DA            push d
0793   08B8 26 00 00      mov b, $0
0794   08BB E7            pop d
0795   08BC FD 43         mov [d], b
0796   08BE             ; --- END LOCAL VAR INITIALIZATION
0797   08BE             ;; int sign = 1;    // Initialize sign as positive 
0798   08BE 52 02 00      sub sp, 2 ; sign
0799   08C1             ; --- START LOCAL VAR INITIALIZATION
0800   08C1 FA FD FF      lea d, [bp + -3] ; $sign
0801   08C4 DA            push d
0802   08C5 26 01 00      mov b, $1
0803   08C8 E7            pop d
0804   08C9 FD 43         mov [d], b
0805   08CB             ; --- END LOCAL VAR INITIALIZATION
0806   08CB             ;; while (*str == ' ') str++; 
0807   08CB             _while8_cond:
0808   08CB FA 05 00      lea d, [bp + 5] ; $str
0809   08CE 2A            mov b, [d]
0810   08CF 74            mov d, b
0811   08D0 32            mov bl, [d]
0812   08D1 A7 00         mov bh, 0
0813   08D3             ; START RELATIONAL
0814   08D3 D7            push a
0815   08D4 11            mov a, b
0816   08D5 26 20 00      mov b, $20
0817   08D8 B0            cmp a, b
0818   08D9 FD 71         seq ; ==
0819   08DB E4            pop a
0820   08DC             ; END RELATIONAL
0821   08DC C0 00 00      cmp b, 0
0822   08DF C6 F2 08      je _while8_exit
0823   08E2             _while8_block:
0824   08E2             ;; str++; 
0825   08E2 FA 05 00      lea d, [bp + 5] ; $str
0826   08E5 2A            mov b, [d]
0827   08E6 FD 77         inc b
0828   08E8 FA 05 00      lea d, [bp + 5] ; $str
0829   08EB FD 43         mov [d], b
0830   08ED FD 7D         dec b
0831   08EF 0A CB 08      jmp _while8_cond
0832   08F2             _while8_exit:
0833   08F2             ;; if (*str == '-' || *str == '+') { 
0834   08F2             _if9_cond:
0835   08F2 FA 05 00      lea d, [bp + 5] ; $str
0836   08F5 2A            mov b, [d]
0837   08F6 74            mov d, b
0838   08F7 32            mov bl, [d]
0839   08F8 A7 00         mov bh, 0
0840   08FA             ; START RELATIONAL
0841   08FA D7            push a
0842   08FB 11            mov a, b
0843   08FC 26 2D 00      mov b, $2d
0844   08FF B0            cmp a, b
0845   0900 FD 71         seq ; ==
0846   0902 E4            pop a
0847   0903             ; END RELATIONAL
0848   0903             ; START LOGICAL OR
0849   0903 D7            push a
0850   0904 11            mov a, b
0851   0905 FA 05 00      lea d, [bp + 5] ; $str
0852   0908 2A            mov b, [d]
0853   0909 74            mov d, b
0854   090A 32            mov bl, [d]
0855   090B A7 00         mov bh, 0
0856   090D             ; START RELATIONAL
0857   090D D7            push a
0858   090E 11            mov a, b
0859   090F 26 2B 00      mov b, $2b
0860   0912 B0            cmp a, b
0861   0913 FD 71         seq ; ==
0862   0915 E4            pop a
0863   0916             ; END RELATIONAL
0864   0916 FD A8         sor a, b ; ||
0865   0918 E4            pop a
0866   0919             ; END LOGICAL OR
0867   0919 C0 00 00      cmp b, 0
0868   091C C6 55 09      je _if9_exit
0869   091F             _if9_true:
0870   091F             ;; if (*str == '-') sign = -1; 
0871   091F             _if10_cond:
0872   091F FA 05 00      lea d, [bp + 5] ; $str
0873   0922 2A            mov b, [d]
0874   0923 74            mov d, b
0875   0924 32            mov bl, [d]
0876   0925 A7 00         mov bh, 0
0877   0927             ; START RELATIONAL
0878   0927 D7            push a
0879   0928 11            mov a, b
0880   0929 26 2D 00      mov b, $2d
0881   092C B0            cmp a, b
0882   092D FD 71         seq ; ==
0883   092F E4            pop a
0884   0930             ; END RELATIONAL
0885   0930 C0 00 00      cmp b, 0
0886   0933 C6 45 09      je _if10_exit
0887   0936             _if10_true:
0888   0936             ;; sign = -1; 
0889   0936 FA FD FF      lea d, [bp + -3] ; $sign
0890   0939 DA            push d
0891   093A 26 01 00      mov b, $1
0892   093D FD 97         neg b
0893   093F E7            pop d
0894   0940 FD 43         mov [d], b
0895   0942 0A 45 09      jmp _if10_exit
0896   0945             _if10_exit:
0897   0945             ;; str++; 
0898   0945 FA 05 00      lea d, [bp + 5] ; $str
0899   0948 2A            mov b, [d]
0900   0949 FD 77         inc b
0901   094B FA 05 00      lea d, [bp + 5] ; $str
0902   094E FD 43         mov [d], b
0903   0950 FD 7D         dec b
0904   0952 0A 55 09      jmp _if9_exit
0905   0955             _if9_exit:
0906   0955             ;; while (*str >= '0' && *str <= '9') { 
0907   0955             _while11_cond:
0908   0955 FA 05 00      lea d, [bp + 5] ; $str
0909   0958 2A            mov b, [d]
0910   0959 74            mov d, b
0911   095A 32            mov bl, [d]
0912   095B A7 00         mov bh, 0
0913   095D             ; START RELATIONAL
0914   095D D7            push a
0915   095E 11            mov a, b
0916   095F 26 30 00      mov b, $30
0917   0962 B0            cmp a, b
0918   0963 FD 82         sgeu ; >= (unsigned)
0919   0965 E4            pop a
0920   0966             ; END RELATIONAL
0921   0966             ; START LOGICAL AND
0922   0966 D7            push a
0923   0967 11            mov a, b
0924   0968 FA 05 00      lea d, [bp + 5] ; $str
0925   096B 2A            mov b, [d]
0926   096C 74            mov d, b
0927   096D 32            mov bl, [d]
0928   096E A7 00         mov bh, 0
0929   0970             ; START RELATIONAL
0930   0970 D7            push a
0931   0971 11            mov a, b
0932   0972 26 39 00      mov b, $39
0933   0975 B0            cmp a, b
0934   0976 FD 76         sleu ; <= (unsigned)
0935   0978 E4            pop a
0936   0979             ; END RELATIONAL
0937   0979 FD A7         sand a, b
0938   097B E4            pop a
0939   097C             ; END LOGICAL AND
0940   097C C0 00 00      cmp b, 0
0941   097F C6 BA 09      je _while11_exit
0942   0982             _while11_block:
0943   0982             ;; result = result * 10 + (*str - '0'); 
0944   0982 FA FF FF      lea d, [bp + -1] ; $result
0945   0985 DA            push d
0946   0986 FA FF FF      lea d, [bp + -1] ; $result
0947   0989 2A            mov b, [d]
0948   098A             ; START FACTORS
0949   098A D7            push a
0950   098B 11            mov a, b
0951   098C 26 0A 00      mov b, $a
0952   098F AC            mul a, b ; *
0953   0990 11            mov a, b
0954   0991 27            mov b, a
0955   0992 E4            pop a
0956   0993             ; END FACTORS
0957   0993             ; START TERMS
0958   0993 D7            push a
0959   0994 11            mov a, b
0960   0995 FA 05 00      lea d, [bp + 5] ; $str
0961   0998 2A            mov b, [d]
0962   0999 74            mov d, b
0963   099A 32            mov bl, [d]
0964   099B A7 00         mov bh, 0
0965   099D             ; START TERMS
0966   099D D7            push a
0967   099E 11            mov a, b
0968   099F 26 30 00      mov b, $30
0969   09A2 60            sub a, b
0970   09A3 27            mov b, a
0971   09A4 E4            pop a
0972   09A5             ; END TERMS
0973   09A5 56            add b, a
0974   09A6 E4            pop a
0975   09A7             ; END TERMS
0976   09A7 E7            pop d
0977   09A8 FD 43         mov [d], b
0978   09AA             ;; str++; 
0979   09AA FA 05 00      lea d, [bp + 5] ; $str
0980   09AD 2A            mov b, [d]
0981   09AE FD 77         inc b
0982   09B0 FA 05 00      lea d, [bp + 5] ; $str
0983   09B3 FD 43         mov [d], b
0984   09B5 FD 7D         dec b
0985   09B7 0A 55 09      jmp _while11_cond
0986   09BA             _while11_exit:
0987   09BA             ;; return sign * result; 
0988   09BA FA FD FF      lea d, [bp + -3] ; $sign
0989   09BD 2A            mov b, [d]
0990   09BE             ; START FACTORS
0991   09BE D7            push a
0992   09BF 11            mov a, b
0993   09C0 FA FF FF      lea d, [bp + -1] ; $result
0994   09C3 2A            mov b, [d]
0995   09C4 AC            mul a, b ; *
0996   09C5 11            mov a, b
0997   09C6 27            mov b, a
0998   09C7 E4            pop a
0999   09C8             ; END FACTORS
1000   09C8 F9            leave
1001   09C9 09            ret
1002   09CA             
1003   09CA             rand:
1004   09CA F8 00 00      enter 0 ; (push bp; mov bp, sp)
1005   09CD             ;; int  sec; 
1006   09CD 52 02 00      sub sp, 2 ; sec
1007   09D0             
1008   09D0             ; --- BEGIN INLINE ASM BLOCK
1009   09D0 19 00         mov al, 0
1010   09D2 05 01         syscall sys_rtc					
1011   09D4 1A            mov al, ah
1012   09D5 FA FF FF      lea d, [bp + -1] ; $sec
1013   09D8 1E            mov al, [d]
1014   09D9 22 00         mov ah, 0
1015   09DB             ; --- END INLINE ASM BLOCK
1016   09DB             
1017   09DB             ;; return sec; 
1018   09DB FA FF FF      lea d, [bp + -1] ; $sec
1019   09DE 2A            mov b, [d]
1020   09DF F9            leave
1021   09E0 09            ret
1022   09E1             
1023   09E1             alloc:
1024   09E1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1025   09E4             ;; heap_top = heap_top + bytes; 
1026   09E4 3B 0B 1E      mov d, _heap_top ; $heap_top
1027   09E7 DA            push d
1028   09E8 3B 0B 1E      mov d, _heap_top ; $heap_top
1029   09EB 2A            mov b, [d]
1030   09EC             ; START TERMS
1031   09EC D7            push a
1032   09ED 11            mov a, b
1033   09EE FA 05 00      lea d, [bp + 5] ; $bytes
1034   09F1 2A            mov b, [d]
1035   09F2 56            add b, a
1036   09F3 E4            pop a
1037   09F4             ; END TERMS
1038   09F4 E7            pop d
1039   09F5 FD 43         mov [d], b
1040   09F7             ;; return heap_top - bytes; 
1041   09F7 3B 0B 1E      mov d, _heap_top ; $heap_top
1042   09FA 2A            mov b, [d]
1043   09FB             ; START TERMS
1044   09FB D7            push a
1045   09FC 11            mov a, b
1046   09FD FA 05 00      lea d, [bp + 5] ; $bytes
1047   0A00 2A            mov b, [d]
1048   0A01 60            sub a, b
1049   0A02 27            mov b, a
1050   0A03 E4            pop a
1051   0A04             ; END TERMS
1052   0A04 F9            leave
1053   0A05 09            ret
1054   0A06             
1055   0A06             free:
1056   0A06 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1057   0A09             ;; return heap_top = heap_top - bytes; 
1058   0A09 3B 0B 1E      mov d, _heap_top ; $heap_top
1059   0A0C DA            push d
1060   0A0D 3B 0B 1E      mov d, _heap_top ; $heap_top
1061   0A10 2A            mov b, [d]
1062   0A11             ; START TERMS
1063   0A11 D7            push a
1064   0A12 11            mov a, b
1065   0A13 FA 05 00      lea d, [bp + 5] ; $bytes
1066   0A16 2A            mov b, [d]
1067   0A17 60            sub a, b
1068   0A18 27            mov b, a
1069   0A19 E4            pop a
1070   0A1A             ; END TERMS
1071   0A1A E7            pop d
1072   0A1B FD 43         mov [d], b
1073   0A1D F9            leave
1074   0A1E 09            ret
1075   0A1F             
1076   0A1F             fopen:
1077   0A1F F8 00 00      enter 0 ; (push bp; mov bp, sp)
1078   0A22             ;; FILE *fp; 
1079   0A22 52 02 00      sub sp, 2 ; fp
1080   0A25             ;; fp = alloc(sizeof(int)); 
1081   0A25 FA FF FF      lea d, [bp + -1] ; $fp
1082   0A28 DA            push d
1083   0A29 26 02 00      mov b, 2
1084   0A2C FD AB         swp b
1085   0A2E D8            push b
1086   0A2F 07 E1 09      call alloc
1087   0A32 51 02 00      add sp, 2
1088   0A35 E7            pop d
1089   0A36 FD 43         mov [d], b
1090   0A38 F9            leave
1091   0A39 09            ret
1092   0A3A             
1093   0A3A             printf:
1094   0A3A F8 00 00      enter 0 ; (push bp; mov bp, sp)
1095   0A3D             ;; char *p, *format_p; 
1096   0A3D 52 02 00      sub sp, 2 ; p
1097   0A40 52 02 00      sub sp, 2 ; format_p
1098   0A43             ;; format_p = format; 
1099   0A43 FA FD FF      lea d, [bp + -3] ; $format_p
1100   0A46 DA            push d
1101   0A47 FA 05 00      lea d, [bp + 5] ; $format
1102   0A4A 2A            mov b, [d]
1103   0A4B E7            pop d
1104   0A4C FD 43         mov [d], b
1105   0A4E             ;; p = &format + 2; 
1106   0A4E FA FF FF      lea d, [bp + -1] ; $p
1107   0A51 DA            push d
1108   0A52 FA 05 00      lea d, [bp + 5] ; $format
1109   0A55 2D            mov b, d
1110   0A56             ; START TERMS
1111   0A56 D7            push a
1112   0A57 11            mov a, b
1113   0A58 26 02 00      mov b, $2
1114   0A5B 56            add b, a
1115   0A5C E4            pop a
1116   0A5D             ; END TERMS
1117   0A5D E7            pop d
1118   0A5E FD 43         mov [d], b
1119   0A60             ;; for(;;){ 
1120   0A60             _for12_init:
1121   0A60             _for12_cond:
1122   0A60             _for12_block:
1123   0A60             ;; if(!*format_p) break; 
1124   0A60             _if13_cond:
1125   0A60 FA FD FF      lea d, [bp + -3] ; $format_p
1126   0A63 2A            mov b, [d]
1127   0A64 74            mov d, b
1128   0A65 32            mov bl, [d]
1129   0A66 A7 00         mov bh, 0
1130   0A68 C0 00 00      cmp b, 0
1131   0A6B FD 71         seq ; !
1132   0A6D C0 00 00      cmp b, 0
1133   0A70 C6 79 0A      je _if13_else
1134   0A73             _if13_true:
1135   0A73             ;; break; 
1136   0A73 0A A0 0C      jmp _for12_exit ; for break
1137   0A76 0A 9D 0C      jmp _if13_exit
1138   0A79             _if13_else:
1139   0A79             ;; if(*format_p == '%'){ 
1140   0A79             _if14_cond:
1141   0A79 FA FD FF      lea d, [bp + -3] ; $format_p
1142   0A7C 2A            mov b, [d]
1143   0A7D 74            mov d, b
1144   0A7E 32            mov bl, [d]
1145   0A7F A7 00         mov bh, 0
1146   0A81             ; START RELATIONAL
1147   0A81 D7            push a
1148   0A82 11            mov a, b
1149   0A83 26 25 00      mov b, $25
1150   0A86 B0            cmp a, b
1151   0A87 FD 71         seq ; ==
1152   0A89 E4            pop a
1153   0A8A             ; END RELATIONAL
1154   0A8A C0 00 00      cmp b, 0
1155   0A8D C6 81 0C      je _if14_else
1156   0A90             _if14_true:
1157   0A90             ;; format_p++; 
1158   0A90 FA FD FF      lea d, [bp + -3] ; $format_p
1159   0A93 2A            mov b, [d]
1160   0A94 FD 77         inc b
1161   0A96 FA FD FF      lea d, [bp + -3] ; $format_p
1162   0A99 FD 43         mov [d], b
1163   0A9B FD 7D         dec b
1164   0A9D             ;; switch(*format_p){ 
1165   0A9D             _switch15_expr:
1166   0A9D FA FD FF      lea d, [bp + -3] ; $format_p
1167   0AA0 2A            mov b, [d]
1168   0AA1 74            mov d, b
1169   0AA2 32            mov bl, [d]
1170   0AA3 A7 00         mov bh, 0
1171   0AA5             _switch15_comparisons:
1172   0AA5 C1 6C         cmp bl, $6c
1173   0AA7 C6 D3 0A      je _switch15_case0
1174   0AAA C1 4C         cmp bl, $4c
1175   0AAC C6 D3 0A      je _switch15_case1
1176   0AAF C1 64         cmp bl, $64
1177   0AB1 C6 C1 0B      je _switch15_case2
1178   0AB4 C1 69         cmp bl, $69
1179   0AB6 C6 C1 0B      je _switch15_case3
1180   0AB9 C1 75         cmp bl, $75
1181   0ABB C6 E5 0B      je _switch15_case4
1182   0ABE C1 78         cmp bl, $78
1183   0AC0 C6 09 0C      je _switch15_case5
1184   0AC3 C1 63         cmp bl, $63
1185   0AC5 C6 27 0C      je _switch15_case6
1186   0AC8 C1 73         cmp bl, $73
1187   0ACA C6 46 0C      je _switch15_case7
1188   0ACD 0A 65 0C      jmp _switch15_default
1189   0AD0 0A 71 0C      jmp _switch15_exit
1190   0AD3             _switch15_case0:
1191   0AD3             _switch15_case1:
1192   0AD3             ;; format_p++; 
1193   0AD3 FA FD FF      lea d, [bp + -3] ; $format_p
1194   0AD6 2A            mov b, [d]
1195   0AD7 FD 77         inc b
1196   0AD9 FA FD FF      lea d, [bp + -3] ; $format_p
1197   0ADC FD 43         mov [d], b
1198   0ADE FD 7D         dec b
1199   0AE0             ;; if(*format_p == 'd' || *format_p == 'i') 
1200   0AE0             _if16_cond:
1201   0AE0 FA FD FF      lea d, [bp + -3] ; $format_p
1202   0AE3 2A            mov b, [d]
1203   0AE4 74            mov d, b
1204   0AE5 32            mov bl, [d]
1205   0AE6 A7 00         mov bh, 0
1206   0AE8             ; START RELATIONAL
1207   0AE8 D7            push a
1208   0AE9 11            mov a, b
1209   0AEA 26 64 00      mov b, $64
1210   0AED B0            cmp a, b
1211   0AEE FD 71         seq ; ==
1212   0AF0 E4            pop a
1213   0AF1             ; END RELATIONAL
1214   0AF1             ; START LOGICAL OR
1215   0AF1 D7            push a
1216   0AF2 11            mov a, b
1217   0AF3 FA FD FF      lea d, [bp + -3] ; $format_p
1218   0AF6 2A            mov b, [d]
1219   0AF7 74            mov d, b
1220   0AF8 32            mov bl, [d]
1221   0AF9 A7 00         mov bh, 0
1222   0AFB             ; START RELATIONAL
1223   0AFB D7            push a
1224   0AFC 11            mov a, b
1225   0AFD 26 69 00      mov b, $69
1226   0B00 B0            cmp a, b
1227   0B01 FD 71         seq ; ==
1228   0B03 E4            pop a
1229   0B04             ; END RELATIONAL
1230   0B04 FD A8         sor a, b ; ||
1231   0B06 E4            pop a
1232   0B07             ; END LOGICAL OR
1233   0B07 C0 00 00      cmp b, 0
1234   0B0A C6 2F 0B      je _if16_else
1235   0B0D             _if16_true:
1236   0B0D             ;; print_signed_long(*(long *)p); 
1237   0B0D FA FF FF      lea d, [bp + -1] ; $p
1238   0B10 2A            mov b, [d]
1239   0B11 AB            snex b
1240   0B12 FD 39         mov c, b
1241   0B14 74            mov d, b
1242   0B15 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1243   0B18 FD 39         mov c, b ; And place it into C
1244   0B1A 2A            mov b, [d] ; Lower Word in B
1245   0B1B FD 79         mov g, b
1246   0B1D 28            mov b, c
1247   0B1E FD AB         swp b
1248   0B20 D8            push b
1249   0B21 FD 27         mov b, g
1250   0B23 FD AB         swp b
1251   0B25 D8            push b
1252   0B26 07 86 11      call print_signed_long
1253   0B29 51 04 00      add sp, 4
1254   0B2C 0A AC 0B      jmp _if16_exit
1255   0B2F             _if16_else:
1256   0B2F             ;; if(*format_p == 'u') 
1257   0B2F             _if17_cond:
1258   0B2F FA FD FF      lea d, [bp + -3] ; $format_p
1259   0B32 2A            mov b, [d]
1260   0B33 74            mov d, b
1261   0B34 32            mov bl, [d]
1262   0B35 A7 00         mov bh, 0
1263   0B37             ; START RELATIONAL
1264   0B37 D7            push a
1265   0B38 11            mov a, b
1266   0B39 26 75 00      mov b, $75
1267   0B3C B0            cmp a, b
1268   0B3D FD 71         seq ; ==
1269   0B3F E4            pop a
1270   0B40             ; END RELATIONAL
1271   0B40 C0 00 00      cmp b, 0
1272   0B43 C6 6A 0B      je _if17_else
1273   0B46             _if17_true:
1274   0B46             ;; print_unsigned_long(*(unsigned long *)p); 
1275   0B46 FA FF FF      lea d, [bp + -1] ; $p
1276   0B49 2A            mov b, [d]
1277   0B4A A7 00         mov bh, 0
1278   0B4C 38 00 00      mov c, 0
1279   0B4F 74            mov d, b
1280   0B50 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1281   0B53 FD 39         mov c, b ; And place it into C
1282   0B55 2A            mov b, [d] ; Lower Word in B
1283   0B56 FD 79         mov g, b
1284   0B58 28            mov b, c
1285   0B59 FD AB         swp b
1286   0B5B D8            push b
1287   0B5C FD 27         mov b, g
1288   0B5E FD AB         swp b
1289   0B60 D8            push b
1290   0B61 07 C6 14      call print_unsigned_long
1291   0B64 51 04 00      add sp, 4
1292   0B67 0A AC 0B      jmp _if17_exit
1293   0B6A             _if17_else:
1294   0B6A             ;; if(*format_p == 'x') 
1295   0B6A             _if18_cond:
1296   0B6A FA FD FF      lea d, [bp + -3] ; $format_p
1297   0B6D 2A            mov b, [d]
1298   0B6E 74            mov d, b
1299   0B6F 32            mov bl, [d]
1300   0B70 A7 00         mov bh, 0
1301   0B72             ; START RELATIONAL
1302   0B72 D7            push a
1303   0B73 11            mov a, b
1304   0B74 26 78 00      mov b, $78
1305   0B77 B0            cmp a, b
1306   0B78 FD 71         seq ; ==
1307   0B7A E4            pop a
1308   0B7B             ; END RELATIONAL
1309   0B7B C0 00 00      cmp b, 0
1310   0B7E C6 A0 0B      je _if18_else
1311   0B81             _if18_true:
1312   0B81             ;; printx32(*(long int *)p); 
1313   0B81 FA FF FF      lea d, [bp + -1] ; $p
1314   0B84 2A            mov b, [d]
1315   0B85 74            mov d, b
1316   0B86 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1317   0B89 FD 39         mov c, b ; And place it into C
1318   0B8B 2A            mov b, [d] ; Lower Word in B
1319   0B8C FD 79         mov g, b
1320   0B8E 28            mov b, c
1321   0B8F FD AB         swp b
1322   0B91 D8            push b
1323   0B92 FD 27         mov b, g
1324   0B94 FD AB         swp b
1325   0B96 D8            push b
1326   0B97 07 FB 0E      call printx32
1327   0B9A 51 04 00      add sp, 4
1328   0B9D 0A AC 0B      jmp _if18_exit
1329   0BA0             _if18_else:
1330   0BA0             ;; err("Unexpected format in printf."); 
1331   0BA0 26 C7 1D      mov b, _s9 ; "Unexpected format in printf."
1332   0BA3 FD AB         swp b
1333   0BA5 D8            push b
1334   0BA6 07 E9 0E      call err
1335   0BA9 51 02 00      add sp, 2
1336   0BAC             _if18_exit:
1337   0BAC             _if17_exit:
1338   0BAC             _if16_exit:
1339   0BAC             ;; p = p + 4; 
1340   0BAC FA FF FF      lea d, [bp + -1] ; $p
1341   0BAF DA            push d
1342   0BB0 FA FF FF      lea d, [bp + -1] ; $p
1343   0BB3 2A            mov b, [d]
1344   0BB4             ; START TERMS
1345   0BB4 D7            push a
1346   0BB5 11            mov a, b
1347   0BB6 26 04 00      mov b, $4
1348   0BB9 56            add b, a
1349   0BBA E4            pop a
1350   0BBB             ; END TERMS
1351   0BBB E7            pop d
1352   0BBC FD 43         mov [d], b
1353   0BBE             ;; break; 
1354   0BBE 0A 71 0C      jmp _switch15_exit ; case break
1355   0BC1             _switch15_case2:
1356   0BC1             _switch15_case3:
1357   0BC1             ;; print_signed(*(int*)p); 
1358   0BC1 FA FF FF      lea d, [bp + -1] ; $p
1359   0BC4 2A            mov b, [d]
1360   0BC5 74            mov d, b
1361   0BC6 2A            mov b, [d]
1362   0BC7 FD AB         swp b
1363   0BC9 D8            push b
1364   0BCA 07 8F 10      call print_signed
1365   0BCD 51 02 00      add sp, 2
1366   0BD0             ;; p = p + 2; 
1367   0BD0 FA FF FF      lea d, [bp + -1] ; $p
1368   0BD3 DA            push d
1369   0BD4 FA FF FF      lea d, [bp + -1] ; $p
1370   0BD7 2A            mov b, [d]
1371   0BD8             ; START TERMS
1372   0BD8 D7            push a
1373   0BD9 11            mov a, b
1374   0BDA 26 02 00      mov b, $2
1375   0BDD 56            add b, a
1376   0BDE E4            pop a
1377   0BDF             ; END TERMS
1378   0BDF E7            pop d
1379   0BE0 FD 43         mov [d], b
1380   0BE2             ;; break; 
1381   0BE2 0A 71 0C      jmp _switch15_exit ; case break
1382   0BE5             _switch15_case4:
1383   0BE5             ;; print_unsigned(*(unsigned int*)p); 
1384   0BE5 FA FF FF      lea d, [bp + -1] ; $p
1385   0BE8 2A            mov b, [d]
1386   0BE9 74            mov d, b
1387   0BEA 2A            mov b, [d]
1388   0BEB FD AB         swp b
1389   0BED D8            push b
1390   0BEE 07 C1 16      call print_unsigned
1391   0BF1 51 02 00      add sp, 2
1392   0BF4             ;; p = p + 2; 
1393   0BF4 FA FF FF      lea d, [bp + -1] ; $p
1394   0BF7 DA            push d
1395   0BF8 FA FF FF      lea d, [bp + -1] ; $p
1396   0BFB 2A            mov b, [d]
1397   0BFC             ; START TERMS
1398   0BFC D7            push a
1399   0BFD 11            mov a, b
1400   0BFE 26 02 00      mov b, $2
1401   0C01 56            add b, a
1402   0C02 E4            pop a
1403   0C03             ; END TERMS
1404   0C03 E7            pop d
1405   0C04 FD 43         mov [d], b
1406   0C06             ;; break; 
1407   0C06 0A 71 0C      jmp _switch15_exit ; case break
1408   0C09             _switch15_case5:
1409   0C09             
1410   0C09             ; --- BEGIN INLINE ASM BLOCK
1411   0C09 FA FF FF      lea d, [bp + -1] ; $p
1412   0C0C FD 2A         mov d, [d]
1413   0C0E 2A            mov b, [d]
1414   0C0F 07 C7 1A      call print_u16x
1415   0C12             ; --- END INLINE ASM BLOCK
1416   0C12             
1417   0C12             ;; p = p + 2; 
1418   0C12 FA FF FF      lea d, [bp + -1] ; $p
1419   0C15 DA            push d
1420   0C16 FA FF FF      lea d, [bp + -1] ; $p
1421   0C19 2A            mov b, [d]
1422   0C1A             ; START TERMS
1423   0C1A D7            push a
1424   0C1B 11            mov a, b
1425   0C1C 26 02 00      mov b, $2
1426   0C1F 56            add b, a
1427   0C20 E4            pop a
1428   0C21             ; END TERMS
1429   0C21 E7            pop d
1430   0C22 FD 43         mov [d], b
1431   0C24             ;; break; 
1432   0C24 0A 71 0C      jmp _switch15_exit ; case break
1433   0C27             _switch15_case6:
1434   0C27             
1435   0C27             ; --- BEGIN INLINE ASM BLOCK
1436   0C27 FA FF FF      lea d, [bp + -1] ; $p
1437   0C2A FD 2A         mov d, [d]
1438   0C2C 1E            mov al, [d]
1439   0C2D 23            mov ah, al
1440   0C2E 07 25 19      call _putchar
1441   0C31             ; --- END INLINE ASM BLOCK
1442   0C31             
1443   0C31             ;; p = p + 2; 
1444   0C31 FA FF FF      lea d, [bp + -1] ; $p
1445   0C34 DA            push d
1446   0C35 FA FF FF      lea d, [bp + -1] ; $p
1447   0C38 2A            mov b, [d]
1448   0C39             ; START TERMS
1449   0C39 D7            push a
1450   0C3A 11            mov a, b
1451   0C3B 26 02 00      mov b, $2
1452   0C3E 56            add b, a
1453   0C3F E4            pop a
1454   0C40             ; END TERMS
1455   0C40 E7            pop d
1456   0C41 FD 43         mov [d], b
1457   0C43             ;; break; 
1458   0C43 0A 71 0C      jmp _switch15_exit ; case break
1459   0C46             _switch15_case7:
1460   0C46             
1461   0C46             ; --- BEGIN INLINE ASM BLOCK
1462   0C46 FA FF FF      lea d, [bp + -1] ; $p
1463   0C49 FD 2A         mov d, [d]
1464   0C4B FD 2A         mov d, [d]
1465   0C4D 07 6F 1A      call _puts
1466   0C50             ; --- END INLINE ASM BLOCK
1467   0C50             
1468   0C50             ;; p = p + 2; 
1469   0C50 FA FF FF      lea d, [bp + -1] ; $p
1470   0C53 DA            push d
1471   0C54 FA FF FF      lea d, [bp + -1] ; $p
1472   0C57 2A            mov b, [d]
1473   0C58             ; START TERMS
1474   0C58 D7            push a
1475   0C59 11            mov a, b
1476   0C5A 26 02 00      mov b, $2
1477   0C5D 56            add b, a
1478   0C5E E4            pop a
1479   0C5F             ; END TERMS
1480   0C5F E7            pop d
1481   0C60 FD 43         mov [d], b
1482   0C62             ;; break; 
1483   0C62 0A 71 0C      jmp _switch15_exit ; case break
1484   0C65             _switch15_default:
1485   0C65             ;; print("Error: Unknown argument type.\n"); 
1486   0C65 26 E4 1D      mov b, _s10 ; "Error: Unknown argument type.\n"
1487   0C68 FD AB         swp b
1488   0C6A D8            push b
1489   0C6B 07 DC 17      call print
1490   0C6E 51 02 00      add sp, 2
1491   0C71             _switch15_exit:
1492   0C71             ;; format_p++; 
1493   0C71 FA FD FF      lea d, [bp + -3] ; $format_p
1494   0C74 2A            mov b, [d]
1495   0C75 FD 77         inc b
1496   0C77 FA FD FF      lea d, [bp + -3] ; $format_p
1497   0C7A FD 43         mov [d], b
1498   0C7C FD 7D         dec b
1499   0C7E 0A 9D 0C      jmp _if14_exit
1500   0C81             _if14_else:
1501   0C81             ;; putchar(*format_p); 
1502   0C81 FA FD FF      lea d, [bp + -3] ; $format_p
1503   0C84 2A            mov b, [d]
1504   0C85 74            mov d, b
1505   0C86 32            mov bl, [d]
1506   0C87 A7 00         mov bh, 0
1507   0C89 DD            push bl
1508   0C8A 07 94 17      call putchar
1509   0C8D 51 01 00      add sp, 1
1510   0C90             ;; format_p++; 
1511   0C90 FA FD FF      lea d, [bp + -3] ; $format_p
1512   0C93 2A            mov b, [d]
1513   0C94 FD 77         inc b
1514   0C96 FA FD FF      lea d, [bp + -3] ; $format_p
1515   0C99 FD 43         mov [d], b
1516   0C9B FD 7D         dec b
1517   0C9D             _if14_exit:
1518   0C9D             _if13_exit:
1519   0C9D             _for12_update:
1520   0C9D 0A 60 0A      jmp _for12_cond
1521   0CA0             _for12_exit:
1522   0CA0 F9            leave
1523   0CA1 09            ret
1524   0CA2             
1525   0CA2             scanf:
1526   0CA2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1527   0CA5             ;; char *p, *format_p; 
1528   0CA5 52 02 00      sub sp, 2 ; p
1529   0CA8 52 02 00      sub sp, 2 ; format_p
1530   0CAB             ;; char c; 
1531   0CAB 52 01 00      sub sp, 1 ; c
1532   0CAE             ;; int i; 
1533   0CAE 52 02 00      sub sp, 2 ; i
1534   0CB1             ;; char input_string[  512                    ]; 
1535   0CB1 52 00 02      sub sp, 512 ; input_string
1536   0CB4             ;; format_p = format; 
1537   0CB4 FA FD FF      lea d, [bp + -3] ; $format_p
1538   0CB7 DA            push d
1539   0CB8 FA 05 00      lea d, [bp + 5] ; $format
1540   0CBB 2A            mov b, [d]
1541   0CBC E7            pop d
1542   0CBD FD 43         mov [d], b
1543   0CBF             ;; p = &format + 2; 
1544   0CBF FA FF FF      lea d, [bp + -1] ; $p
1545   0CC2 DA            push d
1546   0CC3 FA 05 00      lea d, [bp + 5] ; $format
1547   0CC6 2D            mov b, d
1548   0CC7             ; START TERMS
1549   0CC7 D7            push a
1550   0CC8 11            mov a, b
1551   0CC9 26 02 00      mov b, $2
1552   0CCC 56            add b, a
1553   0CCD E4            pop a
1554   0CCE             ; END TERMS
1555   0CCE E7            pop d
1556   0CCF FD 43         mov [d], b
1557   0CD1             ;; for(;;){ 
1558   0CD1             _for19_init:
1559   0CD1             _for19_cond:
1560   0CD1             _for19_block:
1561   0CD1             ;; if(!*format_p) break; 
1562   0CD1             _if20_cond:
1563   0CD1 FA FD FF      lea d, [bp + -3] ; $format_p
1564   0CD4 2A            mov b, [d]
1565   0CD5 74            mov d, b
1566   0CD6 32            mov bl, [d]
1567   0CD7 A7 00         mov bh, 0
1568   0CD9 C0 00 00      cmp b, 0
1569   0CDC FD 71         seq ; !
1570   0CDE C0 00 00      cmp b, 0
1571   0CE1 C6 EA 0C      je _if20_else
1572   0CE4             _if20_true:
1573   0CE4             ;; break; 
1574   0CE4 0A E7 0E      jmp _for19_exit ; for break
1575   0CE7 0A E4 0E      jmp _if20_exit
1576   0CEA             _if20_else:
1577   0CEA             ;; if(*format_p == '%'){ 
1578   0CEA             _if21_cond:
1579   0CEA FA FD FF      lea d, [bp + -3] ; $format_p
1580   0CED 2A            mov b, [d]
1581   0CEE 74            mov d, b
1582   0CEF 32            mov bl, [d]
1583   0CF0 A7 00         mov bh, 0
1584   0CF2             ; START RELATIONAL
1585   0CF2 D7            push a
1586   0CF3 11            mov a, b
1587   0CF4 26 25 00      mov b, $25
1588   0CF7 B0            cmp a, b
1589   0CF8 FD 71         seq ; ==
1590   0CFA E4            pop a
1591   0CFB             ; END RELATIONAL
1592   0CFB C0 00 00      cmp b, 0
1593   0CFE C6 C8 0E      je _if21_else
1594   0D01             _if21_true:
1595   0D01             ;; format_p++; 
1596   0D01 FA FD FF      lea d, [bp + -3] ; $format_p
1597   0D04 2A            mov b, [d]
1598   0D05 FD 77         inc b
1599   0D07 FA FD FF      lea d, [bp + -3] ; $format_p
1600   0D0A FD 43         mov [d], b
1601   0D0C FD 7D         dec b
1602   0D0E             ;; switch(*format_p){ 
1603   0D0E             _switch22_expr:
1604   0D0E FA FD FF      lea d, [bp + -3] ; $format_p
1605   0D11 2A            mov b, [d]
1606   0D12 74            mov d, b
1607   0D13 32            mov bl, [d]
1608   0D14 A7 00         mov bh, 0
1609   0D16             _switch22_comparisons:
1610   0D16 C1 6C         cmp bl, $6c
1611   0D18 C6 44 0D      je _switch22_case0
1612   0D1B C1 4C         cmp bl, $4c
1613   0D1D C6 44 0D      je _switch22_case1
1614   0D20 C1 64         cmp bl, $64
1615   0D22 C6 D6 0D      je _switch22_case2
1616   0D25 C1 69         cmp bl, $69
1617   0D27 C6 D6 0D      je _switch22_case3
1618   0D2A C1 75         cmp bl, $75
1619   0D2C C6 03 0E      je _switch22_case4
1620   0D2F C1 78         cmp bl, $78
1621   0D31 C6 30 0E      je _switch22_case5
1622   0D34 C1 63         cmp bl, $63
1623   0D36 C6 45 0E      je _switch22_case6
1624   0D39 C1 73         cmp bl, $73
1625   0D3B C6 74 0E      je _switch22_case7
1626   0D3E 0A AC 0E      jmp _switch22_default
1627   0D41 0A B8 0E      jmp _switch22_exit
1628   0D44             _switch22_case0:
1629   0D44             _switch22_case1:
1630   0D44             ;; format_p++; 
1631   0D44 FA FD FF      lea d, [bp + -3] ; $format_p
1632   0D47 2A            mov b, [d]
1633   0D48 FD 77         inc b
1634   0D4A FA FD FF      lea d, [bp + -3] ; $format_p
1635   0D4D FD 43         mov [d], b
1636   0D4F FD 7D         dec b
1637   0D51             ;; if(*format_p == 'd' || *format_p == 'i'); 
1638   0D51             _if23_cond:
1639   0D51 FA FD FF      lea d, [bp + -3] ; $format_p
1640   0D54 2A            mov b, [d]
1641   0D55 74            mov d, b
1642   0D56 32            mov bl, [d]
1643   0D57 A7 00         mov bh, 0
1644   0D59             ; START RELATIONAL
1645   0D59 D7            push a
1646   0D5A 11            mov a, b
1647   0D5B 26 64 00      mov b, $64
1648   0D5E B0            cmp a, b
1649   0D5F FD 71         seq ; ==
1650   0D61 E4            pop a
1651   0D62             ; END RELATIONAL
1652   0D62             ; START LOGICAL OR
1653   0D62 D7            push a
1654   0D63 11            mov a, b
1655   0D64 FA FD FF      lea d, [bp + -3] ; $format_p
1656   0D67 2A            mov b, [d]
1657   0D68 74            mov d, b
1658   0D69 32            mov bl, [d]
1659   0D6A A7 00         mov bh, 0
1660   0D6C             ; START RELATIONAL
1661   0D6C D7            push a
1662   0D6D 11            mov a, b
1663   0D6E 26 69 00      mov b, $69
1664   0D71 B0            cmp a, b
1665   0D72 FD 71         seq ; ==
1666   0D74 E4            pop a
1667   0D75             ; END RELATIONAL
1668   0D75 FD A8         sor a, b ; ||
1669   0D77 E4            pop a
1670   0D78             ; END LOGICAL OR
1671   0D78 C0 00 00      cmp b, 0
1672   0D7B C6 81 0D      je _if23_else
1673   0D7E             _if23_true:
1674   0D7E             ;; ; 
1675   0D7E 0A C1 0D      jmp _if23_exit
1676   0D81             _if23_else:
1677   0D81             ;; if(*format_p == 'u'); 
1678   0D81             _if24_cond:
1679   0D81 FA FD FF      lea d, [bp + -3] ; $format_p
1680   0D84 2A            mov b, [d]
1681   0D85 74            mov d, b
1682   0D86 32            mov bl, [d]
1683   0D87 A7 00         mov bh, 0
1684   0D89             ; START RELATIONAL
1685   0D89 D7            push a
1686   0D8A 11            mov a, b
1687   0D8B 26 75 00      mov b, $75
1688   0D8E B0            cmp a, b
1689   0D8F FD 71         seq ; ==
1690   0D91 E4            pop a
1691   0D92             ; END RELATIONAL
1692   0D92 C0 00 00      cmp b, 0
1693   0D95 C6 9B 0D      je _if24_else
1694   0D98             _if24_true:
1695   0D98             ;; ; 
1696   0D98 0A C1 0D      jmp _if24_exit
1697   0D9B             _if24_else:
1698   0D9B             ;; if(*format_p == 'x'); 
1699   0D9B             _if25_cond:
1700   0D9B FA FD FF      lea d, [bp + -3] ; $format_p
1701   0D9E 2A            mov b, [d]
1702   0D9F 74            mov d, b
1703   0DA0 32            mov bl, [d]
1704   0DA1 A7 00         mov bh, 0
1705   0DA3             ; START RELATIONAL
1706   0DA3 D7            push a
1707   0DA4 11            mov a, b
1708   0DA5 26 78 00      mov b, $78
1709   0DA8 B0            cmp a, b
1710   0DA9 FD 71         seq ; ==
1711   0DAB E4            pop a
1712   0DAC             ; END RELATIONAL
1713   0DAC C0 00 00      cmp b, 0
1714   0DAF C6 B5 0D      je _if25_else
1715   0DB2             _if25_true:
1716   0DB2             ;; ; 
1717   0DB2 0A C1 0D      jmp _if25_exit
1718   0DB5             _if25_else:
1719   0DB5             ;; err("Unexpected format in printf."); 
1720   0DB5 26 C7 1D      mov b, _s9 ; "Unexpected format in printf."
1721   0DB8 FD AB         swp b
1722   0DBA D8            push b
1723   0DBB 07 E9 0E      call err
1724   0DBE 51 02 00      add sp, 2
1725   0DC1             _if25_exit:
1726   0DC1             _if24_exit:
1727   0DC1             _if23_exit:
1728   0DC1             ;; p = p + 4; 
1729   0DC1 FA FF FF      lea d, [bp + -1] ; $p
1730   0DC4 DA            push d
1731   0DC5 FA FF FF      lea d, [bp + -1] ; $p
1732   0DC8 2A            mov b, [d]
1733   0DC9             ; START TERMS
1734   0DC9 D7            push a
1735   0DCA 11            mov a, b
1736   0DCB 26 04 00      mov b, $4
1737   0DCE 56            add b, a
1738   0DCF E4            pop a
1739   0DD0             ; END TERMS
1740   0DD0 E7            pop d
1741   0DD1 FD 43         mov [d], b
1742   0DD3             ;; break; 
1743   0DD3 0A B8 0E      jmp _switch22_exit ; case break
1744   0DD6             _switch22_case2:
1745   0DD6             _switch22_case3:
1746   0DD6             ;; i = scann(); 
1747   0DD6 FA FA FF      lea d, [bp + -6] ; $i
1748   0DD9 DA            push d
1749   0DDA 07 B7 17      call scann
1750   0DDD E7            pop d
1751   0DDE FD 43         mov [d], b
1752   0DE0             ;; **(int **)p = i; 
1753   0DE0 FA FF FF      lea d, [bp + -1] ; $p
1754   0DE3 2A            mov b, [d]
1755   0DE4 74            mov d, b
1756   0DE5 2A            mov b, [d]
1757   0DE6 D8            push b
1758   0DE7 FA FA FF      lea d, [bp + -6] ; $i
1759   0DEA 2A            mov b, [d]
1760   0DEB E7            pop d
1761   0DEC FD 43         mov [d], b
1762   0DEE             ;; p = p + 2; 
1763   0DEE FA FF FF      lea d, [bp + -1] ; $p
1764   0DF1 DA            push d
1765   0DF2 FA FF FF      lea d, [bp + -1] ; $p
1766   0DF5 2A            mov b, [d]
1767   0DF6             ; START TERMS
1768   0DF6 D7            push a
1769   0DF7 11            mov a, b
1770   0DF8 26 02 00      mov b, $2
1771   0DFB 56            add b, a
1772   0DFC E4            pop a
1773   0DFD             ; END TERMS
1774   0DFD E7            pop d
1775   0DFE FD 43         mov [d], b
1776   0E00             ;; break; 
1777   0E00 0A B8 0E      jmp _switch22_exit ; case break
1778   0E03             _switch22_case4:
1779   0E03             ;; i = scann(); 
1780   0E03 FA FA FF      lea d, [bp + -6] ; $i
1781   0E06 DA            push d
1782   0E07 07 B7 17      call scann
1783   0E0A E7            pop d
1784   0E0B FD 43         mov [d], b
1785   0E0D             ;; **(int **)p = i; 
1786   0E0D FA FF FF      lea d, [bp + -1] ; $p
1787   0E10 2A            mov b, [d]
1788   0E11 74            mov d, b
1789   0E12 2A            mov b, [d]
1790   0E13 D8            push b
1791   0E14 FA FA FF      lea d, [bp + -6] ; $i
1792   0E17 2A            mov b, [d]
1793   0E18 E7            pop d
1794   0E19 FD 43         mov [d], b
1795   0E1B             ;; p = p + 2; 
1796   0E1B FA FF FF      lea d, [bp + -1] ; $p
1797   0E1E DA            push d
1798   0E1F FA FF FF      lea d, [bp + -1] ; $p
1799   0E22 2A            mov b, [d]
1800   0E23             ; START TERMS
1801   0E23 D7            push a
1802   0E24 11            mov a, b
1803   0E25 26 02 00      mov b, $2
1804   0E28 56            add b, a
1805   0E29 E4            pop a
1806   0E2A             ; END TERMS
1807   0E2A E7            pop d
1808   0E2B FD 43         mov [d], b
1809   0E2D             ;; break; 
1810   0E2D 0A B8 0E      jmp _switch22_exit ; case break
1811   0E30             _switch22_case5:
1812   0E30             ;; p = p + 2; 
1813   0E30 FA FF FF      lea d, [bp + -1] ; $p
1814   0E33 DA            push d
1815   0E34 FA FF FF      lea d, [bp + -1] ; $p
1816   0E37 2A            mov b, [d]
1817   0E38             ; START TERMS
1818   0E38 D7            push a
1819   0E39 11            mov a, b
1820   0E3A 26 02 00      mov b, $2
1821   0E3D 56            add b, a
1822   0E3E E4            pop a
1823   0E3F             ; END TERMS
1824   0E3F E7            pop d
1825   0E40 FD 43         mov [d], b
1826   0E42             ;; break; 
1827   0E42 0A B8 0E      jmp _switch22_exit ; case break
1828   0E45             _switch22_case6:
1829   0E45             ;; c = getchar(); 
1830   0E45 FA FC FF      lea d, [bp + -4] ; $c
1831   0E48 DA            push d
1832   0E49 07 A1 17      call getchar
1833   0E4C E7            pop d
1834   0E4D FD 3E         mov [d], bl
1835   0E4F             ;; **(char **)p = c; 
1836   0E4F FA FF FF      lea d, [bp + -1] ; $p
1837   0E52 2A            mov b, [d]
1838   0E53 74            mov d, b
1839   0E54 2A            mov b, [d]
1840   0E55 D8            push b
1841   0E56 FA FC FF      lea d, [bp + -4] ; $c
1842   0E59 32            mov bl, [d]
1843   0E5A A7 00         mov bh, 0
1844   0E5C E7            pop d
1845   0E5D FD 43         mov [d], b
1846   0E5F             ;; p = p + 2; 
1847   0E5F FA FF FF      lea d, [bp + -1] ; $p
1848   0E62 DA            push d
1849   0E63 FA FF FF      lea d, [bp + -1] ; $p
1850   0E66 2A            mov b, [d]
1851   0E67             ; START TERMS
1852   0E67 D7            push a
1853   0E68 11            mov a, b
1854   0E69 26 02 00      mov b, $2
1855   0E6C 56            add b, a
1856   0E6D E4            pop a
1857   0E6E             ; END TERMS
1858   0E6E E7            pop d
1859   0E6F FD 43         mov [d], b
1860   0E71             ;; break; 
1861   0E71 0A B8 0E      jmp _switch22_exit ; case break
1862   0E74             _switch22_case7:
1863   0E74             ;; gets(input_string); 
1864   0E74 FA FA FD      lea d, [bp + -518] ; $input_string
1865   0E77 2D            mov b, d
1866   0E78 FD AB         swp b
1867   0E7A D8            push b
1868   0E7B 07 75 10      call gets
1869   0E7E 51 02 00      add sp, 2
1870   0E81             ;; strcpy(*(char **)p, input_string); 
1871   0E81 FA FA FD      lea d, [bp + -518] ; $input_string
1872   0E84 2D            mov b, d
1873   0E85 FD AB         swp b
1874   0E87 D8            push b
1875   0E88 FA FF FF      lea d, [bp + -1] ; $p
1876   0E8B 2A            mov b, [d]
1877   0E8C 74            mov d, b
1878   0E8D 2A            mov b, [d]
1879   0E8E FD AB         swp b
1880   0E90 D8            push b
1881   0E91 07 94 06      call strcpy
1882   0E94 51 04 00      add sp, 4
1883   0E97             ;; p = p + 2; 
1884   0E97 FA FF FF      lea d, [bp + -1] ; $p
1885   0E9A DA            push d
1886   0E9B FA FF FF      lea d, [bp + -1] ; $p
1887   0E9E 2A            mov b, [d]
1888   0E9F             ; START TERMS
1889   0E9F D7            push a
1890   0EA0 11            mov a, b
1891   0EA1 26 02 00      mov b, $2
1892   0EA4 56            add b, a
1893   0EA5 E4            pop a
1894   0EA6             ; END TERMS
1895   0EA6 E7            pop d
1896   0EA7 FD 43         mov [d], b
1897   0EA9             ;; break; 
1898   0EA9 0A B8 0E      jmp _switch22_exit ; case break
1899   0EAC             _switch22_default:
1900   0EAC             ;; print("Error: Unknown argument type.\n"); 
1901   0EAC 26 E4 1D      mov b, _s10 ; "Error: Unknown argument type.\n"
1902   0EAF FD AB         swp b
1903   0EB1 D8            push b
1904   0EB2 07 DC 17      call print
1905   0EB5 51 02 00      add sp, 2
1906   0EB8             _switch22_exit:
1907   0EB8             ;; format_p++; 
1908   0EB8 FA FD FF      lea d, [bp + -3] ; $format_p
1909   0EBB 2A            mov b, [d]
1910   0EBC FD 77         inc b
1911   0EBE FA FD FF      lea d, [bp + -3] ; $format_p
1912   0EC1 FD 43         mov [d], b
1913   0EC3 FD 7D         dec b
1914   0EC5 0A E4 0E      jmp _if21_exit
1915   0EC8             _if21_else:
1916   0EC8             ;; putchar(*format_p); 
1917   0EC8 FA FD FF      lea d, [bp + -3] ; $format_p
1918   0ECB 2A            mov b, [d]
1919   0ECC 74            mov d, b
1920   0ECD 32            mov bl, [d]
1921   0ECE A7 00         mov bh, 0
1922   0ED0 DD            push bl
1923   0ED1 07 94 17      call putchar
1924   0ED4 51 01 00      add sp, 1
1925   0ED7             ;; format_p++; 
1926   0ED7 FA FD FF      lea d, [bp + -3] ; $format_p
1927   0EDA 2A            mov b, [d]
1928   0EDB FD 77         inc b
1929   0EDD FA FD FF      lea d, [bp + -3] ; $format_p
1930   0EE0 FD 43         mov [d], b
1931   0EE2 FD 7D         dec b
1932   0EE4             _if21_exit:
1933   0EE4             _if20_exit:
1934   0EE4             _for19_update:
1935   0EE4 0A D1 0C      jmp _for19_cond
1936   0EE7             _for19_exit:
1937   0EE7 F9            leave
1938   0EE8 09            ret
1939   0EE9             
1940   0EE9             err:
1941   0EE9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1942   0EEC             ;; print(e); 
1943   0EEC FA 05 00      lea d, [bp + 5] ; $e
1944   0EEF 2A            mov b, [d]
1945   0EF0 FD AB         swp b
1946   0EF2 D8            push b
1947   0EF3 07 DC 17      call print
1948   0EF6 51 02 00      add sp, 2
1949   0EF9 F9            leave
1950   0EFA 09            ret
1951   0EFB             
1952   0EFB             printx32:
1953   0EFB F8 00 00      enter 0 ; (push bp; mov bp, sp)
1954   0EFE             
1955   0EFE             ; --- BEGIN INLINE ASM BLOCK
1956   0EFE FA 05 00      lea d, [bp + 5] ; $hex
1957   0F01 2B 02 00      mov b, [d+2]
1958   0F04 07 C7 1A      call print_u16x
1959   0F07 2A            mov b, [d]
1960   0F08 07 C7 1A      call print_u16x
1961   0F0B             ; --- END INLINE ASM BLOCK
1962   0F0B             
1963   0F0B F9            leave
1964   0F0C 09            ret
1965   0F0D             
1966   0F0D             printx16:
1967   0F0D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1968   0F10             
1969   0F10             ; --- BEGIN INLINE ASM BLOCK
1970   0F10 FA 05 00      lea d, [bp + 5] ; $hex
1971   0F13 2A            mov b, [d]
1972   0F14 07 C7 1A      call print_u16x
1973   0F17             ; --- END INLINE ASM BLOCK
1974   0F17             
1975   0F17 F9            leave
1976   0F18 09            ret
1977   0F19             
1978   0F19             printx8:
1979   0F19 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1980   0F1C             
1981   0F1C             ; --- BEGIN INLINE ASM BLOCK
1982   0F1C FA 05 00      lea d, [bp + 5] ; $hex
1983   0F1F 32            mov bl, [d]
1984   0F20 07 0B 1B      call print_u8x
1985   0F23             ; --- END INLINE ASM BLOCK
1986   0F23             
1987   0F23 F9            leave
1988   0F24 09            ret
1989   0F25             
1990   0F25             hex_str_to_int:
1991   0F25 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1992   0F28             ;; int value = 0; 
1993   0F28 52 02 00      sub sp, 2 ; value
1994   0F2B             ; --- START LOCAL VAR INITIALIZATION
1995   0F2B FA FF FF      lea d, [bp + -1] ; $value
1996   0F2E DA            push d
1997   0F2F 26 00 00      mov b, $0
1998   0F32 E7            pop d
1999   0F33 FD 43         mov [d], b
2000   0F35             ; --- END LOCAL VAR INITIALIZATION
2001   0F35             ;; int i; 
2002   0F35 52 02 00      sub sp, 2 ; i
2003   0F38             ;; char hex_char; 
2004   0F38 52 01 00      sub sp, 1 ; hex_char
2005   0F3B             ;; int len; 
2006   0F3B 52 02 00      sub sp, 2 ; len
2007   0F3E             ;; len = strlen(hex_string); 
2008   0F3E FA FA FF      lea d, [bp + -6] ; $len
2009   0F41 DA            push d
2010   0F42 FA 05 00      lea d, [bp + 5] ; $hex_string
2011   0F45 2A            mov b, [d]
2012   0F46 FD AB         swp b
2013   0F48 D8            push b
2014   0F49 07 0E 08      call strlen
2015   0F4C 51 02 00      add sp, 2
2016   0F4F E7            pop d
2017   0F50 FD 43         mov [d], b
2018   0F52             ;; for (i = 0; i < len; i++) { 
2019   0F52             _for26_init:
2020   0F52 FA FD FF      lea d, [bp + -3] ; $i
2021   0F55 DA            push d
2022   0F56 26 00 00      mov b, $0
2023   0F59 E7            pop d
2024   0F5A FD 43         mov [d], b
2025   0F5C             _for26_cond:
2026   0F5C FA FD FF      lea d, [bp + -3] ; $i
2027   0F5F 2A            mov b, [d]
2028   0F60             ; START RELATIONAL
2029   0F60 D7            push a
2030   0F61 11            mov a, b
2031   0F62 FA FA FF      lea d, [bp + -6] ; $len
2032   0F65 2A            mov b, [d]
2033   0F66 B0            cmp a, b
2034   0F67 FD 73         slt ; < (signed)
2035   0F69 E4            pop a
2036   0F6A             ; END RELATIONAL
2037   0F6A C0 00 00      cmp b, 0
2038   0F6D C6 6F 10      je _for26_exit
2039   0F70             _for26_block:
2040   0F70             ;; hex_char = hex_string[i]; 
2041   0F70 FA FC FF      lea d, [bp + -4] ; $hex_char
2042   0F73 DA            push d
2043   0F74 FA 05 00      lea d, [bp + 5] ; $hex_string
2044   0F77 FD 2A         mov d, [d]
2045   0F79 D7            push a
2046   0F7A DA            push d
2047   0F7B FA FD FF      lea d, [bp + -3] ; $i
2048   0F7E 2A            mov b, [d]
2049   0F7F E7            pop d
2050   0F80 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2051   0F84 E4            pop a
2052   0F85 32            mov bl, [d]
2053   0F86 A7 00         mov bh, 0
2054   0F88 E7            pop d
2055   0F89 FD 3E         mov [d], bl
2056   0F8B             ;; if (hex_char >= 'a' && hex_char <= 'f')  
2057   0F8B             _if27_cond:
2058   0F8B FA FC FF      lea d, [bp + -4] ; $hex_char
2059   0F8E 32            mov bl, [d]
2060   0F8F A7 00         mov bh, 0
2061   0F91             ; START RELATIONAL
2062   0F91 D7            push a
2063   0F92 11            mov a, b
2064   0F93 26 61 00      mov b, $61
2065   0F96 B0            cmp a, b
2066   0F97 FD 80         sge ; >=
2067   0F99 E4            pop a
2068   0F9A             ; END RELATIONAL
2069   0F9A             ; START LOGICAL AND
2070   0F9A D7            push a
2071   0F9B 11            mov a, b
2072   0F9C FA FC FF      lea d, [bp + -4] ; $hex_char
2073   0F9F 32            mov bl, [d]
2074   0FA0 A7 00         mov bh, 0
2075   0FA2             ; START RELATIONAL
2076   0FA2 D7            push a
2077   0FA3 11            mov a, b
2078   0FA4 26 66 00      mov b, $66
2079   0FA7 B0            cmp a, b
2080   0FA8 FD 74         sle ; <= (signed)
2081   0FAA E4            pop a
2082   0FAB             ; END RELATIONAL
2083   0FAB FD A7         sand a, b
2084   0FAD E4            pop a
2085   0FAE             ; END LOGICAL AND
2086   0FAE C0 00 00      cmp b, 0
2087   0FB1 C6 E2 0F      je _if27_else
2088   0FB4             _if27_true:
2089   0FB4             ;; value = (value * 16) + (hex_char - 'a' + 10); 
2090   0FB4 FA FF FF      lea d, [bp + -1] ; $value
2091   0FB7 DA            push d
2092   0FB8 FA FF FF      lea d, [bp + -1] ; $value
2093   0FBB 2A            mov b, [d]
2094   0FBC             ; START FACTORS
2095   0FBC D7            push a
2096   0FBD 11            mov a, b
2097   0FBE 26 10 00      mov b, $10
2098   0FC1 AC            mul a, b ; *
2099   0FC2 11            mov a, b
2100   0FC3 27            mov b, a
2101   0FC4 E4            pop a
2102   0FC5             ; END FACTORS
2103   0FC5             ; START TERMS
2104   0FC5 D7            push a
2105   0FC6 11            mov a, b
2106   0FC7 FA FC FF      lea d, [bp + -4] ; $hex_char
2107   0FCA 32            mov bl, [d]
2108   0FCB A7 00         mov bh, 0
2109   0FCD             ; START TERMS
2110   0FCD D7            push a
2111   0FCE 11            mov a, b
2112   0FCF 26 61 00      mov b, $61
2113   0FD2 60            sub a, b
2114   0FD3 27            mov b, a
2115   0FD4 11            mov a, b
2116   0FD5 26 0A 00      mov b, $a
2117   0FD8 56            add b, a
2118   0FD9 E4            pop a
2119   0FDA             ; END TERMS
2120   0FDA 56            add b, a
2121   0FDB E4            pop a
2122   0FDC             ; END TERMS
2123   0FDC E7            pop d
2124   0FDD FD 43         mov [d], b
2125   0FDF 0A 5F 10      jmp _if27_exit
2126   0FE2             _if27_else:
2127   0FE2             ;; if (hex_char >= 'A' && hex_char <= 'F')  
2128   0FE2             _if28_cond:
2129   0FE2 FA FC FF      lea d, [bp + -4] ; $hex_char
2130   0FE5 32            mov bl, [d]
2131   0FE6 A7 00         mov bh, 0
2132   0FE8             ; START RELATIONAL
2133   0FE8 D7            push a
2134   0FE9 11            mov a, b
2135   0FEA 26 41 00      mov b, $41
2136   0FED B0            cmp a, b
2137   0FEE FD 80         sge ; >=
2138   0FF0 E4            pop a
2139   0FF1             ; END RELATIONAL
2140   0FF1             ; START LOGICAL AND
2141   0FF1 D7            push a
2142   0FF2 11            mov a, b
2143   0FF3 FA FC FF      lea d, [bp + -4] ; $hex_char
2144   0FF6 32            mov bl, [d]
2145   0FF7 A7 00         mov bh, 0
2146   0FF9             ; START RELATIONAL
2147   0FF9 D7            push a
2148   0FFA 11            mov a, b
2149   0FFB 26 46 00      mov b, $46
2150   0FFE B0            cmp a, b
2151   0FFF FD 74         sle ; <= (signed)
2152   1001 E4            pop a
2153   1002             ; END RELATIONAL
2154   1002 FD A7         sand a, b
2155   1004 E4            pop a
2156   1005             ; END LOGICAL AND
2157   1005 C0 00 00      cmp b, 0
2158   1008 C6 39 10      je _if28_else
2159   100B             _if28_true:
2160   100B             ;; value = (value * 16) + (hex_char - 'A' + 10); 
2161   100B FA FF FF      lea d, [bp + -1] ; $value
2162   100E DA            push d
2163   100F FA FF FF      lea d, [bp + -1] ; $value
2164   1012 2A            mov b, [d]
2165   1013             ; START FACTORS
2166   1013 D7            push a
2167   1014 11            mov a, b
2168   1015 26 10 00      mov b, $10
2169   1018 AC            mul a, b ; *
2170   1019 11            mov a, b
2171   101A 27            mov b, a
2172   101B E4            pop a
2173   101C             ; END FACTORS
2174   101C             ; START TERMS
2175   101C D7            push a
2176   101D 11            mov a, b
2177   101E FA FC FF      lea d, [bp + -4] ; $hex_char
2178   1021 32            mov bl, [d]
2179   1022 A7 00         mov bh, 0
2180   1024             ; START TERMS
2181   1024 D7            push a
2182   1025 11            mov a, b
2183   1026 26 41 00      mov b, $41
2184   1029 60            sub a, b
2185   102A 27            mov b, a
2186   102B 11            mov a, b
2187   102C 26 0A 00      mov b, $a
2188   102F 56            add b, a
2189   1030 E4            pop a
2190   1031             ; END TERMS
2191   1031 56            add b, a
2192   1032 E4            pop a
2193   1033             ; END TERMS
2194   1033 E7            pop d
2195   1034 FD 43         mov [d], b
2196   1036 0A 5F 10      jmp _if28_exit
2197   1039             _if28_else:
2198   1039             ;; value = (value * 16) + (hex_char - '0'); 
2199   1039 FA FF FF      lea d, [bp + -1] ; $value
2200   103C DA            push d
2201   103D FA FF FF      lea d, [bp + -1] ; $value
2202   1040 2A            mov b, [d]
2203   1041             ; START FACTORS
2204   1041 D7            push a
2205   1042 11            mov a, b
2206   1043 26 10 00      mov b, $10
2207   1046 AC            mul a, b ; *
2208   1047 11            mov a, b
2209   1048 27            mov b, a
2210   1049 E4            pop a
2211   104A             ; END FACTORS
2212   104A             ; START TERMS
2213   104A D7            push a
2214   104B 11            mov a, b
2215   104C FA FC FF      lea d, [bp + -4] ; $hex_char
2216   104F 32            mov bl, [d]
2217   1050 A7 00         mov bh, 0
2218   1052             ; START TERMS
2219   1052 D7            push a
2220   1053 11            mov a, b
2221   1054 26 30 00      mov b, $30
2222   1057 60            sub a, b
2223   1058 27            mov b, a
2224   1059 E4            pop a
2225   105A             ; END TERMS
2226   105A 56            add b, a
2227   105B E4            pop a
2228   105C             ; END TERMS
2229   105C E7            pop d
2230   105D FD 43         mov [d], b
2231   105F             _if28_exit:
2232   105F             _if27_exit:
2233   105F             _for26_update:
2234   105F FA FD FF      lea d, [bp + -3] ; $i
2235   1062 2A            mov b, [d]
2236   1063 FD 77         inc b
2237   1065 FA FD FF      lea d, [bp + -3] ; $i
2238   1068 FD 43         mov [d], b
2239   106A FD 7D         dec b
2240   106C 0A 5C 0F      jmp _for26_cond
2241   106F             _for26_exit:
2242   106F             ;; return value; 
2243   106F FA FF FF      lea d, [bp + -1] ; $value
2244   1072 2A            mov b, [d]
2245   1073 F9            leave
2246   1074 09            ret
2247   1075             
2248   1075             gets:
2249   1075 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2250   1078             
2251   1078             ; --- BEGIN INLINE ASM BLOCK
2252   1078 FA 05 00      lea d, [bp + 5] ; $s
2253   107B 15            mov a, [d]
2254   107C 3C            mov d, a
2255   107D 07 2C 19      call _gets
2256   1080             ; --- END INLINE ASM BLOCK
2257   1080             
2258   1080             ;; return strlen(s); 
2259   1080 FA 05 00      lea d, [bp + 5] ; $s
2260   1083 2A            mov b, [d]
2261   1084 FD AB         swp b
2262   1086 D8            push b
2263   1087 07 0E 08      call strlen
2264   108A 51 02 00      add sp, 2
2265   108D F9            leave
2266   108E 09            ret
2267   108F             
2268   108F             print_signed:
2269   108F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2270   1092             ;; char digits[5]; 
2271   1092 52 05 00      sub sp, 5 ; digits
2272   1095             ;; int i = 0; 
2273   1095 52 02 00      sub sp, 2 ; i
2274   1098             ; --- START LOCAL VAR INITIALIZATION
2275   1098 FA FA FF      lea d, [bp + -6] ; $i
2276   109B DA            push d
2277   109C 26 00 00      mov b, $0
2278   109F E7            pop d
2279   10A0 FD 43         mov [d], b
2280   10A2             ; --- END LOCAL VAR INITIALIZATION
2281   10A2             ;; if (num < 0) { 
2282   10A2             _if29_cond:
2283   10A2 FA 05 00      lea d, [bp + 5] ; $num
2284   10A5 2A            mov b, [d]
2285   10A6             ; START RELATIONAL
2286   10A6 D7            push a
2287   10A7 11            mov a, b
2288   10A8 26 00 00      mov b, $0
2289   10AB B0            cmp a, b
2290   10AC FD 73         slt ; < (signed)
2291   10AE E4            pop a
2292   10AF             ; END RELATIONAL
2293   10AF C0 00 00      cmp b, 0
2294   10B2 C6 CF 10      je _if29_else
2295   10B5             _if29_true:
2296   10B5             ;; putchar('-'); 
2297   10B5 26 2D 00      mov b, $2d
2298   10B8 DD            push bl
2299   10B9 07 94 17      call putchar
2300   10BC 51 01 00      add sp, 1
2301   10BF             ;; num = -num; 
2302   10BF FA 05 00      lea d, [bp + 5] ; $num
2303   10C2 DA            push d
2304   10C3 FA 05 00      lea d, [bp + 5] ; $num
2305   10C6 2A            mov b, [d]
2306   10C7 FD 97         neg b
2307   10C9 E7            pop d
2308   10CA FD 43         mov [d], b
2309   10CC 0A F1 10      jmp _if29_exit
2310   10CF             _if29_else:
2311   10CF             ;; if (num == 0) { 
2312   10CF             _if30_cond:
2313   10CF FA 05 00      lea d, [bp + 5] ; $num
2314   10D2 2A            mov b, [d]
2315   10D3             ; START RELATIONAL
2316   10D3 D7            push a
2317   10D4 11            mov a, b
2318   10D5 26 00 00      mov b, $0
2319   10D8 B0            cmp a, b
2320   10D9 FD 71         seq ; ==
2321   10DB E4            pop a
2322   10DC             ; END RELATIONAL
2323   10DC C0 00 00      cmp b, 0
2324   10DF C6 F1 10      je _if30_exit
2325   10E2             _if30_true:
2326   10E2             ;; putchar('0'); 
2327   10E2 26 30 00      mov b, $30
2328   10E5 DD            push bl
2329   10E6 07 94 17      call putchar
2330   10E9 51 01 00      add sp, 1
2331   10EC             ;; return; 
2332   10EC F9            leave
2333   10ED 09            ret
2334   10EE 0A F1 10      jmp _if30_exit
2335   10F1             _if30_exit:
2336   10F1             _if29_exit:
2337   10F1             ;; while (num > 0) { 
2338   10F1             _while31_cond:
2339   10F1 FA 05 00      lea d, [bp + 5] ; $num
2340   10F4 2A            mov b, [d]
2341   10F5             ; START RELATIONAL
2342   10F5 D7            push a
2343   10F6 11            mov a, b
2344   10F7 26 00 00      mov b, $0
2345   10FA B0            cmp a, b
2346   10FB FD 7F         sgt ; >
2347   10FD E4            pop a
2348   10FE             ; END RELATIONAL
2349   10FE C0 00 00      cmp b, 0
2350   1101 C6 4B 11      je _while31_exit
2351   1104             _while31_block:
2352   1104             ;; digits[i] = '0' + (num % 10); 
2353   1104 FA FC FF      lea d, [bp + -4] ; $digits
2354   1107 D7            push a
2355   1108 DA            push d
2356   1109 FA FA FF      lea d, [bp + -6] ; $i
2357   110C 2A            mov b, [d]
2358   110D E7            pop d
2359   110E 5A            add d, b
2360   110F E4            pop a
2361   1110 DA            push d
2362   1111 26 30 00      mov b, $30
2363   1114             ; START TERMS
2364   1114 D7            push a
2365   1115 11            mov a, b
2366   1116 FA 05 00      lea d, [bp + 5] ; $num
2367   1119 2A            mov b, [d]
2368   111A             ; START FACTORS
2369   111A D7            push a
2370   111B 11            mov a, b
2371   111C 26 0A 00      mov b, $a
2372   111F AE            div a, b ; 
2373   1120 11            mov a, b
2374   1121 27            mov b, a
2375   1122 E4            pop a
2376   1123             ; END FACTORS
2377   1123 56            add b, a
2378   1124 E4            pop a
2379   1125             ; END TERMS
2380   1125 E7            pop d
2381   1126 FD 3E         mov [d], bl
2382   1128             ;; num = num / 10; 
2383   1128 FA 05 00      lea d, [bp + 5] ; $num
2384   112B DA            push d
2385   112C FA 05 00      lea d, [bp + 5] ; $num
2386   112F 2A            mov b, [d]
2387   1130             ; START FACTORS
2388   1130 D7            push a
2389   1131 11            mov a, b
2390   1132 26 0A 00      mov b, $a
2391   1135 AE            div a, b
2392   1136 27            mov b, a
2393   1137 E4            pop a
2394   1138             ; END FACTORS
2395   1138 E7            pop d
2396   1139 FD 43         mov [d], b
2397   113B             ;; i++; 
2398   113B FA FA FF      lea d, [bp + -6] ; $i
2399   113E 2A            mov b, [d]
2400   113F FD 77         inc b
2401   1141 FA FA FF      lea d, [bp + -6] ; $i
2402   1144 FD 43         mov [d], b
2403   1146 FD 7D         dec b
2404   1148 0A F1 10      jmp _while31_cond
2405   114B             _while31_exit:
2406   114B             ;; while (i > 0) { 
2407   114B             _while32_cond:
2408   114B FA FA FF      lea d, [bp + -6] ; $i
2409   114E 2A            mov b, [d]
2410   114F             ; START RELATIONAL
2411   114F D7            push a
2412   1150 11            mov a, b
2413   1151 26 00 00      mov b, $0
2414   1154 B0            cmp a, b
2415   1155 FD 7F         sgt ; >
2416   1157 E4            pop a
2417   1158             ; END RELATIONAL
2418   1158 C0 00 00      cmp b, 0
2419   115B C6 84 11      je _while32_exit
2420   115E             _while32_block:
2421   115E             ;; i--; 
2422   115E FA FA FF      lea d, [bp + -6] ; $i
2423   1161 2A            mov b, [d]
2424   1162 FD 7D         dec b
2425   1164 FA FA FF      lea d, [bp + -6] ; $i
2426   1167 FD 43         mov [d], b
2427   1169 FD 77         inc b
2428   116B             ;; putchar(digits[i]); 
2429   116B FA FC FF      lea d, [bp + -4] ; $digits
2430   116E D7            push a
2431   116F DA            push d
2432   1170 FA FA FF      lea d, [bp + -6] ; $i
2433   1173 2A            mov b, [d]
2434   1174 E7            pop d
2435   1175 5A            add d, b
2436   1176 E4            pop a
2437   1177 32            mov bl, [d]
2438   1178 A7 00         mov bh, 0
2439   117A DD            push bl
2440   117B 07 94 17      call putchar
2441   117E 51 01 00      add sp, 1
2442   1181 0A 4B 11      jmp _while32_cond
2443   1184             _while32_exit:
2444   1184 F9            leave
2445   1185 09            ret
2446   1186             
2447   1186             print_signed_long:
2448   1186 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2449   1189             ;; char digits[10]; 
2450   1189 52 0A 00      sub sp, 10 ; digits
2451   118C             ;; int i = 0; 
2452   118C 52 02 00      sub sp, 2 ; i
2453   118F             ; --- START LOCAL VAR INITIALIZATION
2454   118F FA F5 FF      lea d, [bp + -11] ; $i
2455   1192 DA            push d
2456   1193 26 00 00      mov b, $0
2457   1196 E7            pop d
2458   1197 FD 43         mov [d], b
2459   1199             ; --- END LOCAL VAR INITIALIZATION
2460   1199             ;; if (num < 0) { 
2461   1199             _if33_cond:
2462   1199 FA 05 00      lea d, [bp + 5] ; $num
2463   119C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2464   119F FD 39         mov c, b ; And place it into C
2465   11A1 2A            mov b, [d] ; Lower Word in B
2466   11A2             ; START RELATIONAL
2467   11A2 D7            push a
2468   11A3 FD D8         push g
2469   11A5 11            mov a, b
2470   11A6 FD 7A         mov g, c
2471   11A8 26 00 00      mov b, $0
2472   11AB 38 00 00      mov c, 0
2473   11AE FD AF 00 00   cmp32 ga, cb
2473   11B2 00 00 00 00 
2473   11B6 00 00 00 00 
2473   11BA 00 00 00 00 
2473   11BE 00 00 00 00 
2473   11C2 00 00 00 00 
2473   11C6 00 00 00 00 
2473   11CA 00 00 00 00 
2473   11CE 00 00 00 00 
2473   11D2 00 00 00 00 
2473   11D6 00 00 00 00 
2473   11DA 00 00 00 00 
2473   11DE 00 00 00 00 
2473   11E2 00 00 00 00 
2473   11E6 00 00 00 00 
2473   11EA 00 00 00 00 
2473   11EE 00 00 00 00 
2473   11F2 00 00 00 00 
2473   11F6 00 00 00 00 
2473   11FA 00 00 00 00 
2473   11FE 00 00 00 00 
2473   1202 00 00 00 00 
2473   1206 00 00 00 00 
2473   120A 00 00 00 00 
2473   120E 00 00 00 00 
2473   1212 00 00 00 00 
2473   1216 00 00 00 00 
2473   121A 00 00 00 00 
2473   121E 00 00 00 00 
2473   1222 00 00 00 00 
2473   1226 00 00 00 00 
2473   122A 00 00 00 00 
2473   122E 00 00 00 00 
2473   1232 00 00 00 00 
2473   1236 00 00 00 00 
2473   123A 00 00 00 00 
2473   123E 00 00 00 00 
2473   1242 00 00 00 00 
2473   1246 00 00 00 00 
2473   124A 00 00 00 00 
2473   124E 00 00 00 00 
2473   1252 00 00 00 00 
2473   1256 00 00 00 00 
2473   125A 00 00 00 00 
2473   125E 00 00 00 00 
2473   1262 00 00 00 00 
2473   1266 00 00 00 00 
2473   126A 00 00 00 00 
2473   126E 00 00 00 00 
2473   1272 00 00 00 00 
2473   1276 00 00 00 00 
2473   127A 00 00 00 00 
2473   127E 00 00 00 00 
2473   1282 00 00 00 00 
2473   1286 00 00 00 00 
2473   128A 00 00 00 00 
2473   128E 00 00 00 00 
2473   1292 00 00 00 00 
2473   1296 00 00 00 00 
2473   129A 00 00 00 00 
2473   129E 00 00 00 00 
2473   12A2 00 00 00 00 
2473   12A6 00 00 00 00 
2473   12AA 00 00 00 00 
2473   12AE 00 
2474   12AF FD 73         slt ; <
2475   12B1 FD F1         pop g
2476   12B3 E4            pop a
2477   12B4             ; END RELATIONAL
2478   12B4 C0 00 00      cmp b, 0
2479   12B7 C6 DE 12      je _if33_else
2480   12BA             _if33_true:
2481   12BA             ;; putchar('-'); 
2482   12BA 26 2D 00      mov b, $2d
2483   12BD DD            push bl
2484   12BE 07 94 17      call putchar
2485   12C1 51 01 00      add sp, 1
2486   12C4             ;; num = -num; 
2487   12C4 FA 05 00      lea d, [bp + 5] ; $num
2488   12C7 DA            push d
2489   12C8 FA 05 00      lea d, [bp + 5] ; $num
2490   12CB 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2491   12CE FD 39         mov c, b ; And place it into C
2492   12D0 2A            mov b, [d] ; Lower Word in B
2493   12D1 FD 97         neg b
2494   12D3 E7            pop d
2495   12D4 FD 43         mov [d], b
2496   12D6 28            mov b, c
2497   12D7 FD 44 02 00   mov [d + 2], b
2498   12DB 0A 0E 14      jmp _if33_exit
2499   12DE             _if33_else:
2500   12DE             ;; if (num == 0) { 
2501   12DE             _if34_cond:
2502   12DE FA 05 00      lea d, [bp + 5] ; $num
2503   12E1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2504   12E4 FD 39         mov c, b ; And place it into C
2505   12E6 2A            mov b, [d] ; Lower Word in B
2506   12E7             ; START RELATIONAL
2507   12E7 D7            push a
2508   12E8 FD D8         push g
2509   12EA 11            mov a, b
2510   12EB FD 7A         mov g, c
2511   12ED 26 00 00      mov b, $0
2512   12F0 38 00 00      mov c, 0
2513   12F3 FD AF 00 00   cmp32 ga, cb
2513   12F7 00 00 00 00 
2513   12FB 00 00 00 00 
2513   12FF 00 00 00 00 
2513   1303 00 00 00 00 
2513   1307 00 00 00 00 
2513   130B 00 00 00 00 
2513   130F 00 00 00 00 
2513   1313 00 00 00 00 
2513   1317 00 00 00 00 
2513   131B 00 00 00 00 
2513   131F 00 00 00 00 
2513   1323 00 00 00 00 
2513   1327 00 00 00 00 
2513   132B 00 00 00 00 
2513   132F 00 00 00 00 
2513   1333 00 00 00 00 
2513   1337 00 00 00 00 
2513   133B 00 00 00 00 
2513   133F 00 00 00 00 
2513   1343 00 00 00 00 
2513   1347 00 00 00 00 
2513   134B 00 00 00 00 
2513   134F 00 00 00 00 
2513   1353 00 00 00 00 
2513   1357 00 00 00 00 
2513   135B 00 00 00 00 
2513   135F 00 00 00 00 
2513   1363 00 00 00 00 
2513   1367 00 00 00 00 
2513   136B 00 00 00 00 
2513   136F 00 00 00 00 
2513   1373 00 00 00 00 
2513   1377 00 00 00 00 
2513   137B 00 00 00 00 
2513   137F 00 00 00 00 
2513   1383 00 00 00 00 
2513   1387 00 00 00 00 
2513   138B 00 00 00 00 
2513   138F 00 00 00 00 
2513   1393 00 00 00 00 
2513   1397 00 00 00 00 
2513   139B 00 00 00 00 
2513   139F 00 00 00 00 
2513   13A3 00 00 00 00 
2513   13A7 00 00 00 00 
2513   13AB 00 00 00 00 
2513   13AF 00 00 00 00 
2513   13B3 00 00 00 00 
2513   13B7 00 00 00 00 
2513   13BB 00 00 00 00 
2513   13BF 00 00 00 00 
2513   13C3 00 00 00 00 
2513   13C7 00 00 00 00 
2513   13CB 00 00 00 00 
2513   13CF 00 00 00 00 
2513   13D3 00 00 00 00 
2513   13D7 00 00 00 00 
2513   13DB 00 00 00 00 
2513   13DF 00 00 00 00 
2513   13E3 00 00 00 00 
2513   13E7 00 00 00 00 
2513   13EB 00 00 00 00 
2513   13EF 00 00 00 00 
2513   13F3 00 
2514   13F4 FD 71         seq ; ==
2515   13F6 FD F1         pop g
2516   13F8 E4            pop a
2517   13F9             ; END RELATIONAL
2518   13F9 C0 00 00      cmp b, 0
2519   13FC C6 0E 14      je _if34_exit
2520   13FF             _if34_true:
2521   13FF             ;; putchar('0'); 
2522   13FF 26 30 00      mov b, $30
2523   1402 DD            push bl
2524   1403 07 94 17      call putchar
2525   1406 51 01 00      add sp, 1
2526   1409             ;; return; 
2527   1409 F9            leave
2528   140A 09            ret
2529   140B 0A 0E 14      jmp _if34_exit
2530   140E             _if34_exit:
2531   140E             _if33_exit:
2532   140E             ;; while (num > 0) { 
2533   140E             _while35_cond:
2534   140E FA 05 00      lea d, [bp + 5] ; $num
2535   1411 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2536   1414 FD 39         mov c, b ; And place it into C
2537   1416 2A            mov b, [d] ; Lower Word in B
2538   1417             ; START RELATIONAL
2539   1417 D7            push a
2540   1418 FD D8         push g
2541   141A 11            mov a, b
2542   141B FD 7A         mov g, c
2543   141D 26 00 00      mov b, $0
2544   1420 38 00 00      mov c, 0
2545   1423 FD 7F         sgt
2546   1425 FD F1         pop g
2547   1427 E4            pop a
2548   1428             ; END RELATIONAL
2549   1428 C0 00 00      cmp b, 0
2550   142B C6 8B 14      je _while35_exit
2551   142E             _while35_block:
2552   142E             ;; digits[i] = '0' + (num % 10); 
2553   142E FA F7 FF      lea d, [bp + -9] ; $digits
2554   1431 D7            push a
2555   1432 DA            push d
2556   1433 FA F5 FF      lea d, [bp + -11] ; $i
2557   1436 2A            mov b, [d]
2558   1437 E7            pop d
2559   1438 5A            add d, b
2560   1439 E4            pop a
2561   143A DA            push d
2562   143B 26 30 00      mov b, $30
2563   143E             ; START TERMS
2564   143E D7            push a
2565   143F 11            mov a, b
2566   1440 FA 05 00      lea d, [bp + 5] ; $num
2567   1443 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2568   1446 FD 39         mov c, b ; And place it into C
2569   1448 2A            mov b, [d] ; Lower Word in B
2570   1449             ; START FACTORS
2571   1449 D7            push a
2572   144A 11            mov a, b
2573   144B 26 0A 00      mov b, $a
2574   144E AE            div a, b ; 
2575   144F 11            mov a, b
2576   1450 27            mov b, a
2577   1451 E4            pop a
2578   1452             ; END FACTORS
2579   1452 54            add a, b
2580   1453 D7            push a
2581   1454 FD 12         mov a, g
2582   1456 28            mov b, c
2583   1457 5C            adc a, b
2584   1458 39            mov c, a
2585   1459 E5            pop b
2586   145A E4            pop a
2587   145B             ; END TERMS
2588   145B E7            pop d
2589   145C FD 3E         mov [d], bl
2590   145E             ;; num = num / 10; 
2591   145E FA 05 00      lea d, [bp + 5] ; $num
2592   1461 DA            push d
2593   1462 FA 05 00      lea d, [bp + 5] ; $num
2594   1465 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2595   1468 FD 39         mov c, b ; And place it into C
2596   146A 2A            mov b, [d] ; Lower Word in B
2597   146B             ; START FACTORS
2598   146B D7            push a
2599   146C 11            mov a, b
2600   146D 26 0A 00      mov b, $a
2601   1470 AE            div a, b
2602   1471 27            mov b, a
2603   1472 E4            pop a
2604   1473             ; END FACTORS
2605   1473 E7            pop d
2606   1474 FD 43         mov [d], b
2607   1476 28            mov b, c
2608   1477 FD 44 02 00   mov [d + 2], b
2609   147B             ;; i++; 
2610   147B FA F5 FF      lea d, [bp + -11] ; $i
2611   147E 2A            mov b, [d]
2612   147F FD 77         inc b
2613   1481 FA F5 FF      lea d, [bp + -11] ; $i
2614   1484 FD 43         mov [d], b
2615   1486 FD 7D         dec b
2616   1488 0A 0E 14      jmp _while35_cond
2617   148B             _while35_exit:
2618   148B             ;; while (i > 0) { 
2619   148B             _while36_cond:
2620   148B FA F5 FF      lea d, [bp + -11] ; $i
2621   148E 2A            mov b, [d]
2622   148F             ; START RELATIONAL
2623   148F D7            push a
2624   1490 11            mov a, b
2625   1491 26 00 00      mov b, $0
2626   1494 B0            cmp a, b
2627   1495 FD 7F         sgt ; >
2628   1497 E4            pop a
2629   1498             ; END RELATIONAL
2630   1498 C0 00 00      cmp b, 0
2631   149B C6 C4 14      je _while36_exit
2632   149E             _while36_block:
2633   149E             ;; i--; 
2634   149E FA F5 FF      lea d, [bp + -11] ; $i
2635   14A1 2A            mov b, [d]
2636   14A2 FD 7D         dec b
2637   14A4 FA F5 FF      lea d, [bp + -11] ; $i
2638   14A7 FD 43         mov [d], b
2639   14A9 FD 77         inc b
2640   14AB             ;; putchar(digits[i]); 
2641   14AB FA F7 FF      lea d, [bp + -9] ; $digits
2642   14AE D7            push a
2643   14AF DA            push d
2644   14B0 FA F5 FF      lea d, [bp + -11] ; $i
2645   14B3 2A            mov b, [d]
2646   14B4 E7            pop d
2647   14B5 5A            add d, b
2648   14B6 E4            pop a
2649   14B7 32            mov bl, [d]
2650   14B8 A7 00         mov bh, 0
2651   14BA DD            push bl
2652   14BB 07 94 17      call putchar
2653   14BE 51 01 00      add sp, 1
2654   14C1 0A 8B 14      jmp _while36_cond
2655   14C4             _while36_exit:
2656   14C4 F9            leave
2657   14C5 09            ret
2658   14C6             
2659   14C6             print_unsigned_long:
2660   14C6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2661   14C9             ;; char digits[10]; 
2662   14C9 52 0A 00      sub sp, 10 ; digits
2663   14CC             ;; int i; 
2664   14CC 52 02 00      sub sp, 2 ; i
2665   14CF             ;; i = 0; 
2666   14CF FA F5 FF      lea d, [bp + -11] ; $i
2667   14D2 DA            push d
2668   14D3 26 00 00      mov b, $0
2669   14D6 E7            pop d
2670   14D7 FD 43         mov [d], b
2671   14D9             ;; if(num == 0){ 
2672   14D9             _if37_cond:
2673   14D9 FA 05 00      lea d, [bp + 5] ; $num
2674   14DC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2675   14DF FD 39         mov c, b ; And place it into C
2676   14E1 2A            mov b, [d] ; Lower Word in B
2677   14E2             ; START RELATIONAL
2678   14E2 D7            push a
2679   14E3 FD D8         push g
2680   14E5 11            mov a, b
2681   14E6 FD 7A         mov g, c
2682   14E8 26 00 00      mov b, $0
2683   14EB 38 00 00      mov c, 0
2684   14EE FD AF 00 00   cmp32 ga, cb
2684   14F2 00 00 00 00 
2684   14F6 00 00 00 00 
2684   14FA 00 00 00 00 
2684   14FE 00 00 00 00 
2684   1502 00 00 00 00 
2684   1506 00 00 00 00 
2684   150A 00 00 00 00 
2684   150E 00 00 00 00 
2684   1512 00 00 00 00 
2684   1516 00 00 00 00 
2684   151A 00 00 00 00 
2684   151E 00 00 00 00 
2684   1522 00 00 00 00 
2684   1526 00 00 00 00 
2684   152A 00 00 00 00 
2684   152E 00 00 00 00 
2684   1532 00 00 00 00 
2684   1536 00 00 00 00 
2684   153A 00 00 00 00 
2684   153E 00 00 00 00 
2684   1542 00 00 00 00 
2684   1546 00 00 00 00 
2684   154A 00 00 00 00 
2684   154E 00 00 00 00 
2684   1552 00 00 00 00 
2684   1556 00 00 00 00 
2684   155A 00 00 00 00 
2684   155E 00 00 00 00 
2684   1562 00 00 00 00 
2684   1566 00 00 00 00 
2684   156A 00 00 00 00 
2684   156E 00 00 00 00 
2684   1572 00 00 00 00 
2684   1576 00 00 00 00 
2684   157A 00 00 00 00 
2684   157E 00 00 00 00 
2684   1582 00 00 00 00 
2684   1586 00 00 00 00 
2684   158A 00 00 00 00 
2684   158E 00 00 00 00 
2684   1592 00 00 00 00 
2684   1596 00 00 00 00 
2684   159A 00 00 00 00 
2684   159E 00 00 00 00 
2684   15A2 00 00 00 00 
2684   15A6 00 00 00 00 
2684   15AA 00 00 00 00 
2684   15AE 00 00 00 00 
2684   15B2 00 00 00 00 
2684   15B6 00 00 00 00 
2684   15BA 00 00 00 00 
2684   15BE 00 00 00 00 
2684   15C2 00 00 00 00 
2684   15C6 00 00 00 00 
2684   15CA 00 00 00 00 
2684   15CE 00 00 00 00 
2684   15D2 00 00 00 00 
2684   15D6 00 00 00 00 
2684   15DA 00 00 00 00 
2684   15DE 00 00 00 00 
2684   15E2 00 00 00 00 
2684   15E6 00 00 00 00 
2684   15EA 00 00 00 00 
2684   15EE 00 
2685   15EF FD 71         seq ; ==
2686   15F1 FD F1         pop g
2687   15F3 E4            pop a
2688   15F4             ; END RELATIONAL
2689   15F4 C0 00 00      cmp b, 0
2690   15F7 C6 09 16      je _if37_exit
2691   15FA             _if37_true:
2692   15FA             ;; putchar('0'); 
2693   15FA 26 30 00      mov b, $30
2694   15FD DD            push bl
2695   15FE 07 94 17      call putchar
2696   1601 51 01 00      add sp, 1
2697   1604             ;; return; 
2698   1604 F9            leave
2699   1605 09            ret
2700   1606 0A 09 16      jmp _if37_exit
2701   1609             _if37_exit:
2702   1609             ;; while (num > 0) { 
2703   1609             _while38_cond:
2704   1609 FA 05 00      lea d, [bp + 5] ; $num
2705   160C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2706   160F FD 39         mov c, b ; And place it into C
2707   1611 2A            mov b, [d] ; Lower Word in B
2708   1612             ; START RELATIONAL
2709   1612 D7            push a
2710   1613 FD D8         push g
2711   1615 11            mov a, b
2712   1616 FD 7A         mov g, c
2713   1618 26 00 00      mov b, $0
2714   161B 38 00 00      mov c, 0
2715   161E FD 81         sgu
2716   1620 FD F1         pop g
2717   1622 E4            pop a
2718   1623             ; END RELATIONAL
2719   1623 C0 00 00      cmp b, 0
2720   1626 C6 86 16      je _while38_exit
2721   1629             _while38_block:
2722   1629             ;; digits[i] = '0' + (num % 10); 
2723   1629 FA F7 FF      lea d, [bp + -9] ; $digits
2724   162C D7            push a
2725   162D DA            push d
2726   162E FA F5 FF      lea d, [bp + -11] ; $i
2727   1631 2A            mov b, [d]
2728   1632 E7            pop d
2729   1633 5A            add d, b
2730   1634 E4            pop a
2731   1635 DA            push d
2732   1636 26 30 00      mov b, $30
2733   1639             ; START TERMS
2734   1639 D7            push a
2735   163A 11            mov a, b
2736   163B FA 05 00      lea d, [bp + 5] ; $num
2737   163E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2738   1641 FD 39         mov c, b ; And place it into C
2739   1643 2A            mov b, [d] ; Lower Word in B
2740   1644             ; START FACTORS
2741   1644 D7            push a
2742   1645 11            mov a, b
2743   1646 26 0A 00      mov b, $a
2744   1649 AE            div a, b ; 
2745   164A 11            mov a, b
2746   164B 27            mov b, a
2747   164C E4            pop a
2748   164D             ; END FACTORS
2749   164D 54            add a, b
2750   164E D7            push a
2751   164F FD 12         mov a, g
2752   1651 28            mov b, c
2753   1652 5C            adc a, b
2754   1653 39            mov c, a
2755   1654 E5            pop b
2756   1655 E4            pop a
2757   1656             ; END TERMS
2758   1656 E7            pop d
2759   1657 FD 3E         mov [d], bl
2760   1659             ;; num = num / 10; 
2761   1659 FA 05 00      lea d, [bp + 5] ; $num
2762   165C DA            push d
2763   165D FA 05 00      lea d, [bp + 5] ; $num
2764   1660 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2765   1663 FD 39         mov c, b ; And place it into C
2766   1665 2A            mov b, [d] ; Lower Word in B
2767   1666             ; START FACTORS
2768   1666 D7            push a
2769   1667 11            mov a, b
2770   1668 26 0A 00      mov b, $a
2771   166B AE            div a, b
2772   166C 27            mov b, a
2773   166D E4            pop a
2774   166E             ; END FACTORS
2775   166E E7            pop d
2776   166F FD 43         mov [d], b
2777   1671 28            mov b, c
2778   1672 FD 44 02 00   mov [d + 2], b
2779   1676             ;; i++; 
2780   1676 FA F5 FF      lea d, [bp + -11] ; $i
2781   1679 2A            mov b, [d]
2782   167A FD 77         inc b
2783   167C FA F5 FF      lea d, [bp + -11] ; $i
2784   167F FD 43         mov [d], b
2785   1681 FD 7D         dec b
2786   1683 0A 09 16      jmp _while38_cond
2787   1686             _while38_exit:
2788   1686             ;; while (i > 0) { 
2789   1686             _while39_cond:
2790   1686 FA F5 FF      lea d, [bp + -11] ; $i
2791   1689 2A            mov b, [d]
2792   168A             ; START RELATIONAL
2793   168A D7            push a
2794   168B 11            mov a, b
2795   168C 26 00 00      mov b, $0
2796   168F B0            cmp a, b
2797   1690 FD 7F         sgt ; >
2798   1692 E4            pop a
2799   1693             ; END RELATIONAL
2800   1693 C0 00 00      cmp b, 0
2801   1696 C6 BF 16      je _while39_exit
2802   1699             _while39_block:
2803   1699             ;; i--; 
2804   1699 FA F5 FF      lea d, [bp + -11] ; $i
2805   169C 2A            mov b, [d]
2806   169D FD 7D         dec b
2807   169F FA F5 FF      lea d, [bp + -11] ; $i
2808   16A2 FD 43         mov [d], b
2809   16A4 FD 77         inc b
2810   16A6             ;; putchar(digits[i]); 
2811   16A6 FA F7 FF      lea d, [bp + -9] ; $digits
2812   16A9 D7            push a
2813   16AA DA            push d
2814   16AB FA F5 FF      lea d, [bp + -11] ; $i
2815   16AE 2A            mov b, [d]
2816   16AF E7            pop d
2817   16B0 5A            add d, b
2818   16B1 E4            pop a
2819   16B2 32            mov bl, [d]
2820   16B3 A7 00         mov bh, 0
2821   16B5 DD            push bl
2822   16B6 07 94 17      call putchar
2823   16B9 51 01 00      add sp, 1
2824   16BC 0A 86 16      jmp _while39_cond
2825   16BF             _while39_exit:
2826   16BF F9            leave
2827   16C0 09            ret
2828   16C1             
2829   16C1             print_unsigned:
2830   16C1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2831   16C4             ;; char digits[5]; 
2832   16C4 52 05 00      sub sp, 5 ; digits
2833   16C7             ;; int i; 
2834   16C7 52 02 00      sub sp, 2 ; i
2835   16CA             ;; i = 0; 
2836   16CA FA FA FF      lea d, [bp + -6] ; $i
2837   16CD DA            push d
2838   16CE 26 00 00      mov b, $0
2839   16D1 E7            pop d
2840   16D2 FD 43         mov [d], b
2841   16D4             ;; if(num == 0){ 
2842   16D4             _if40_cond:
2843   16D4 FA 05 00      lea d, [bp + 5] ; $num
2844   16D7 2A            mov b, [d]
2845   16D8             ; START RELATIONAL
2846   16D8 D7            push a
2847   16D9 11            mov a, b
2848   16DA 26 00 00      mov b, $0
2849   16DD B0            cmp a, b
2850   16DE FD 71         seq ; ==
2851   16E0 E4            pop a
2852   16E1             ; END RELATIONAL
2853   16E1 C0 00 00      cmp b, 0
2854   16E4 C6 F6 16      je _if40_exit
2855   16E7             _if40_true:
2856   16E7             ;; putchar('0'); 
2857   16E7 26 30 00      mov b, $30
2858   16EA DD            push bl
2859   16EB 07 94 17      call putchar
2860   16EE 51 01 00      add sp, 1
2861   16F1             ;; return; 
2862   16F1 F9            leave
2863   16F2 09            ret
2864   16F3 0A F6 16      jmp _if40_exit
2865   16F6             _if40_exit:
2866   16F6             ;; while (num > 0) { 
2867   16F6             _while41_cond:
2868   16F6 FA 05 00      lea d, [bp + 5] ; $num
2869   16F9 2A            mov b, [d]
2870   16FA             ; START RELATIONAL
2871   16FA D7            push a
2872   16FB 11            mov a, b
2873   16FC 26 00 00      mov b, $0
2874   16FF B0            cmp a, b
2875   1700 FD 81         sgu ; > (unsigned)
2876   1702 E4            pop a
2877   1703             ; END RELATIONAL
2878   1703 C0 00 00      cmp b, 0
2879   1706 C6 50 17      je _while41_exit
2880   1709             _while41_block:
2881   1709             ;; digits[i] = '0' + (num % 10); 
2882   1709 FA FC FF      lea d, [bp + -4] ; $digits
2883   170C D7            push a
2884   170D DA            push d
2885   170E FA FA FF      lea d, [bp + -6] ; $i
2886   1711 2A            mov b, [d]
2887   1712 E7            pop d
2888   1713 5A            add d, b
2889   1714 E4            pop a
2890   1715 DA            push d
2891   1716 26 30 00      mov b, $30
2892   1719             ; START TERMS
2893   1719 D7            push a
2894   171A 11            mov a, b
2895   171B FA 05 00      lea d, [bp + 5] ; $num
2896   171E 2A            mov b, [d]
2897   171F             ; START FACTORS
2898   171F D7            push a
2899   1720 11            mov a, b
2900   1721 26 0A 00      mov b, $a
2901   1724 AE            div a, b ; 
2902   1725 11            mov a, b
2903   1726 27            mov b, a
2904   1727 E4            pop a
2905   1728             ; END FACTORS
2906   1728 56            add b, a
2907   1729 E4            pop a
2908   172A             ; END TERMS
2909   172A E7            pop d
2910   172B FD 3E         mov [d], bl
2911   172D             ;; num = num / 10; 
2912   172D FA 05 00      lea d, [bp + 5] ; $num
2913   1730 DA            push d
2914   1731 FA 05 00      lea d, [bp + 5] ; $num
2915   1734 2A            mov b, [d]
2916   1735             ; START FACTORS
2917   1735 D7            push a
2918   1736 11            mov a, b
2919   1737 26 0A 00      mov b, $a
2920   173A AE            div a, b
2921   173B 27            mov b, a
2922   173C E4            pop a
2923   173D             ; END FACTORS
2924   173D E7            pop d
2925   173E FD 43         mov [d], b
2926   1740             ;; i++; 
2927   1740 FA FA FF      lea d, [bp + -6] ; $i
2928   1743 2A            mov b, [d]
2929   1744 FD 77         inc b
2930   1746 FA FA FF      lea d, [bp + -6] ; $i
2931   1749 FD 43         mov [d], b
2932   174B FD 7D         dec b
2933   174D 0A F6 16      jmp _while41_cond
2934   1750             _while41_exit:
2935   1750             ;; while (i > 0) { 
2936   1750             _while42_cond:
2937   1750 FA FA FF      lea d, [bp + -6] ; $i
2938   1753 2A            mov b, [d]
2939   1754             ; START RELATIONAL
2940   1754 D7            push a
2941   1755 11            mov a, b
2942   1756 26 00 00      mov b, $0
2943   1759 B0            cmp a, b
2944   175A FD 7F         sgt ; >
2945   175C E4            pop a
2946   175D             ; END RELATIONAL
2947   175D C0 00 00      cmp b, 0
2948   1760 C6 89 17      je _while42_exit
2949   1763             _while42_block:
2950   1763             ;; i--; 
2951   1763 FA FA FF      lea d, [bp + -6] ; $i
2952   1766 2A            mov b, [d]
2953   1767 FD 7D         dec b
2954   1769 FA FA FF      lea d, [bp + -6] ; $i
2955   176C FD 43         mov [d], b
2956   176E FD 77         inc b
2957   1770             ;; putchar(digits[i]); 
2958   1770 FA FC FF      lea d, [bp + -4] ; $digits
2959   1773 D7            push a
2960   1774 DA            push d
2961   1775 FA FA FF      lea d, [bp + -6] ; $i
2962   1778 2A            mov b, [d]
2963   1779 E7            pop d
2964   177A 5A            add d, b
2965   177B E4            pop a
2966   177C 32            mov bl, [d]
2967   177D A7 00         mov bh, 0
2968   177F DD            push bl
2969   1780 07 94 17      call putchar
2970   1783 51 01 00      add sp, 1
2971   1786 0A 50 17      jmp _while42_cond
2972   1789             _while42_exit:
2973   1789 F9            leave
2974   178A 09            ret
2975   178B             
2976   178B             date:
2977   178B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2978   178E             
2979   178E             ; --- BEGIN INLINE ASM BLOCK
2980   178E 19 00         mov al, 0 
2981   1790 05 07         syscall sys_datetime
2982   1792             ; --- END INLINE ASM BLOCK
2983   1792             
2984   1792 F9            leave
2985   1793 09            ret
2986   1794             
2987   1794             putchar:
2988   1794 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2989   1797             
2990   1797             ; --- BEGIN INLINE ASM BLOCK
2991   1797 FA 05 00      lea d, [bp + 5] ; $c
2992   179A 1E            mov al, [d]
2993   179B 23            mov ah, al
2994   179C 07 25 19      call _putchar
2995   179F             ; --- END INLINE ASM BLOCK
2996   179F             
2997   179F F9            leave
2998   17A0 09            ret
2999   17A1             
3000   17A1             getchar:
3001   17A1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3002   17A4             ;; char c; 
3003   17A4 52 01 00      sub sp, 1 ; c
3004   17A7             
3005   17A7             ; --- BEGIN INLINE ASM BLOCK
3006   17A7 07 1E 19      call getch
3007   17AA 1A            mov al, ah
3008   17AB FA 00 00      lea d, [bp + 0] ; $c
3009   17AE 3E            mov [d], al
3010   17AF             ; --- END INLINE ASM BLOCK
3011   17AF             
3012   17AF             ;; return c; 
3013   17AF FA 00 00      lea d, [bp + 0] ; $c
3014   17B2 32            mov bl, [d]
3015   17B3 A7 00         mov bh, 0
3016   17B5 F9            leave
3017   17B6 09            ret
3018   17B7             
3019   17B7             scann:
3020   17B7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3021   17BA             ;; int m; 
3022   17BA 52 02 00      sub sp, 2 ; m
3023   17BD             
3024   17BD             ; --- BEGIN INLINE ASM BLOCK
3025   17BD 07 69 1B      call scan_u16d
3026   17C0 FA FF FF      lea d, [bp + -1] ; $m
3027   17C3 43            mov [d], a
3028   17C4             ; --- END INLINE ASM BLOCK
3029   17C4             
3030   17C4             ;; return m; 
3031   17C4 FA FF FF      lea d, [bp + -1] ; $m
3032   17C7 2A            mov b, [d]
3033   17C8 F9            leave
3034   17C9 09            ret
3035   17CA             
3036   17CA             puts:
3037   17CA F8 00 00      enter 0 ; (push bp; mov bp, sp)
3038   17CD             
3039   17CD             ; --- BEGIN INLINE ASM BLOCK
3040   17CD FA 05 00      lea d, [bp + 5] ; $s
3041   17D0 15            mov a, [d]
3042   17D1 3C            mov d, a
3043   17D2 07 6F 1A      call _puts
3044   17D5 10 00 0A      mov a, $0A00
3045   17D8 05 03         syscall sys_io
3046   17DA             ; --- END INLINE ASM BLOCK
3047   17DA             
3048   17DA F9            leave
3049   17DB 09            ret
3050   17DC             
3051   17DC             print:
3052   17DC F8 00 00      enter 0 ; (push bp; mov bp, sp)
3053   17DF             
3054   17DF             ; --- BEGIN INLINE ASM BLOCK
3055   17DF FA 05 00      lea d, [bp + 5] ; $s
3056   17E2 FD 2A         mov d, [d]
3057   17E4 07 6F 1A      call _puts
3058   17E7             ; --- END INLINE ASM BLOCK
3059   17E7             
3060   17E7 F9            leave
3061   17E8 09            ret
3062   17E9             
3063   17E9             getparam:
3064   17E9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3065   17EC             ;; char data; 
3066   17EC 52 01 00      sub sp, 1 ; data
3067   17EF             
3068   17EF             ; --- BEGIN INLINE ASM BLOCK
3069   17EF 19 04         mov al, 4
3070   17F1 FA 05 00      lea d, [bp + 5] ; $address
3071   17F4 FD 2A         mov d, [d]
3072   17F6 05 0C         syscall sys_system
3073   17F8 FA 00 00      lea d, [bp + 0] ; $data
3074   17FB FD 3E         mov [d], bl
3075   17FD             ; --- END INLINE ASM BLOCK
3076   17FD             
3077   17FD             ;; return data; 
3078   17FD FA 00 00      lea d, [bp + 0] ; $data
3079   1800 32            mov bl, [d]
3080   1801 A7 00         mov bh, 0
3081   1803 F9            leave
3082   1804 09            ret
3083   1805             
3084   1805             clear:
3085   1805 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3086   1808             ;; print("\033[2J\033[H"); 
3087   1808 26 03 1E      mov b, _s11 ; "\033[2J\033[H"
3088   180B FD AB         swp b
3089   180D D8            push b
3090   180E 07 DC 17      call print
3091   1811 51 02 00      add sp, 2
3092   1814 F9            leave
3093   1815 09            ret
3094   1816             
3095   1816             abs:
3096   1816 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3097   1819             ;; return i < 0 ? -i : i; 
3098   1819             _ternary43_cond:
3099   1819 FA 05 00      lea d, [bp + 5] ; $i
3100   181C 2A            mov b, [d]
3101   181D             ; START RELATIONAL
3102   181D D7            push a
3103   181E 11            mov a, b
3104   181F 26 00 00      mov b, $0
3105   1822 B0            cmp a, b
3106   1823 FD 73         slt ; < (signed)
3107   1825 E4            pop a
3108   1826             ; END RELATIONAL
3109   1826 C0 00 00      cmp b, 0
3110   1829 C6 35 18      je _ternary43_false
3111   182C             _ternary43_true:
3112   182C FA 05 00      lea d, [bp + 5] ; $i
3113   182F 2A            mov b, [d]
3114   1830 FD 97         neg b
3115   1832 0A 39 18      jmp _ternary43_exit
3116   1835             _ternary43_false:
3117   1835 FA 05 00      lea d, [bp + 5] ; $i
3118   1838 2A            mov b, [d]
3119   1839             _ternary43_exit:
3120   1839 F9            leave
3121   183A 09            ret
3122   183B             
3123   183B             include_stdio_asm:
3124   183B F8 00 00      enter 0 ; (push bp; mov bp, sp)
3125   183E             
3126   183E             ; --- BEGIN INLINE ASM BLOCK
3127   183E             .include "lib/asm/stdio.asm"
0001+  183E             ;-----------------------------------------------------------------------------
0002+  183E             ; stdio.s
0003+  183E             ;-----------------------------------------------------------------------------
0004+  183E             .include "lib/asm/string.asm"
0001++ 183E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 183E             ; string.s
0003++ 183E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 183E             
0005++ 183E             
0006++ 183E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 183E             ; _strrev
0008++ 183E             ; reverse a string
0009++ 183E             ; D = string address
0010++ 183E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 183E             ; 01234
0012++ 183E             _strrev:
0013++ 183E 4B          	pusha
0014++ 183F 07 85 18    	call _strlen	; length in C
0015++ 1842 12          	mov a, c
0016++ 1843 AF 01 00    	cmp a, 1
0017++ 1846 D0 60 18    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1849 7D          	dec a
0019++ 184A FD 4E       	mov si, d	; beginning of string
0020++ 184C FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 184E 59          	add d, a	; end of string
0022++ 184F 12          	mov a, c
0023++ 1850 FD 9B       	shr a		; divide by 2
0024++ 1852 39          	mov c, a	; C now counts the steps
0025++ 1853             _strrev_L0:
0026++ 1853 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1854 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1855 3E          	mov [d], al	; store left char into right side
0029++ 1856 1B          	mov al, bl
0030++ 1857 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1858 7E          	dec c
0032++ 1859 7F          	dec d
0033++ 185A C2 00 00    	cmp c, 0
0034++ 185D C7 53 18    	jne _strrev_L0
0035++ 1860             _strrev_end:
0036++ 1860 4C          	popa
0037++ 1861 09          	ret
0038++ 1862             	
0039++ 1862             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1862             ; _strchr
0041++ 1862             ; search string in D for char in AL
0042++ 1862             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1862             _strchr:
0044++ 1862             _strchr_L0:
0045++ 1862 32          	mov bl, [d]
0046++ 1863 C1 00       	cmp bl, 0
0047++ 1865 C6 70 18    	je _strchr_end
0048++ 1868 BA          	cmp al, bl
0049++ 1869 C6 70 18    	je _strchr_end
0050++ 186C 79          	inc d
0051++ 186D 0A 62 18    	jmp _strchr_L0
0052++ 1870             _strchr_end:
0053++ 1870 1B          	mov al, bl
0054++ 1871 09          	ret
0055++ 1872             
0056++ 1872             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1872             ; _strstr
0058++ 1872             ; find sub-string
0059++ 1872             ; str1 in SI
0060++ 1872             ; str2 in DI
0061++ 1872             ; SI points to end of source string
0062++ 1872             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1872             _strstr:
0064++ 1872 DB          	push al
0065++ 1873 DA          	push d
0066++ 1874 E3          	push di
0067++ 1875             _strstr_loop:
0068++ 1875 F3          	cmpsb					; compare a byte of the strings
0069++ 1876 C7 81 18    	jne _strstr_ret
0070++ 1879 FC 00 00    	lea d, [di + 0]
0071++ 187C BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 187E C7 75 18    	jne _strstr_loop				; equal chars but not at end
0073++ 1881             _strstr_ret:
0074++ 1881 F0          	pop di
0075++ 1882 E7          	pop d
0076++ 1883 E8          	pop al
0077++ 1884 09          	ret
0078++ 1885             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1885             ; length of null terminated string
0080++ 1885             ; result in C
0081++ 1885             ; pointer in D
0082++ 1885             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1885             _strlen:
0084++ 1885 DA          	push d
0085++ 1886 38 00 00    	mov c, 0
0086++ 1889             _strlen_L1:
0087++ 1889 BD 00       	cmp byte [d], 0
0088++ 188B C6 93 18    	je _strlen_ret
0089++ 188E 79          	inc d
0090++ 188F 78          	inc c
0091++ 1890 0A 89 18    	jmp _strlen_L1
0092++ 1893             _strlen_ret:
0093++ 1893 E7          	pop d
0094++ 1894 09          	ret
0095++ 1895             
0096++ 1895             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1895             ; STRCMP
0098++ 1895             ; compare two strings
0099++ 1895             ; str1 in SI
0100++ 1895             ; str2 in DI
0101++ 1895             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1895             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1895             _strcmp:
0104++ 1895 DB          	push al
0105++ 1896 DA          	push d
0106++ 1897 E3          	push di
0107++ 1898 E2          	push si
0108++ 1899             _strcmp_loop:
0109++ 1899 F3          	cmpsb					; compare a byte of the strings
0110++ 189A C7 A5 18    	jne _strcmp_ret
0111++ 189D FB FF FF    	lea d, [si +- 1]
0112++ 18A0 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 18A2 C7 99 18    	jne _strcmp_loop				; equal chars but not at end
0114++ 18A5             _strcmp_ret:
0115++ 18A5 EF          	pop si
0116++ 18A6 F0          	pop di
0117++ 18A7 E7          	pop d
0118++ 18A8 E8          	pop al
0119++ 18A9 09          	ret
0120++ 18AA             
0121++ 18AA             
0122++ 18AA             ; STRCPY
0123++ 18AA             ; copy null terminated string from SI to DI
0124++ 18AA             ; source in SI
0125++ 18AA             ; destination in DI
0126++ 18AA             _strcpy:
0127++ 18AA E2          	push si
0128++ 18AB E3          	push di
0129++ 18AC DB          	push al
0130++ 18AD             _strcpy_L1:
0131++ 18AD F6          	lodsb
0132++ 18AE F7          	stosb
0133++ 18AF B9 00       	cmp al, 0
0134++ 18B1 C7 AD 18    	jne _strcpy_L1
0135++ 18B4             _strcpy_end:
0136++ 18B4 E8          	pop al
0137++ 18B5 F0          	pop di
0138++ 18B6 EF          	pop si
0139++ 18B7 09          	ret
0140++ 18B8             
0141++ 18B8             ; STRCAT
0142++ 18B8             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 18B8             ; source in SI
0144++ 18B8             ; destination in DI
0145++ 18B8             _strcat:
0146++ 18B8 E2          	push si
0147++ 18B9 E3          	push di
0148++ 18BA D7          	push a
0149++ 18BB DA          	push d
0150++ 18BC 50          	mov a, di
0151++ 18BD 3C          	mov d, a
0152++ 18BE             _strcat_goto_end_L1:
0153++ 18BE BD 00       	cmp byte[d], 0
0154++ 18C0 C6 C7 18    	je _strcat_start
0155++ 18C3 79          	inc d
0156++ 18C4 0A BE 18    	jmp _strcat_goto_end_L1
0157++ 18C7             _strcat_start:
0158++ 18C7 FD 50       	mov di, d
0159++ 18C9             _strcat_L1:
0160++ 18C9 F6          	lodsb
0161++ 18CA F7          	stosb
0162++ 18CB B9 00       	cmp al, 0
0163++ 18CD C7 C9 18    	jne _strcat_L1
0164++ 18D0             _strcat_end:
0165++ 18D0 E7          	pop d
0166++ 18D1 E4          	pop a
0167++ 18D2 F0          	pop di
0168++ 18D3 EF          	pop si
0169++ 18D4 09          	ret
0170++ 18D5             
0171++ 18D5             
0005+  18D5             
0006+  18D5             ;-----------------------------------------------------------------------------
0007+  18D5             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  18D5             ; ASCII in BL
0009+  18D5             ; result in AL
0010+  18D5             ; ascii for F = 0100 0110
0011+  18D5             ; ascii for 9 = 0011 1001
0012+  18D5             ;-----------------------------------------------------------------------------
0013+  18D5             hex_ascii_encode:
0014+  18D5 1B            mov al, bl
0015+  18D6 93 40         test al, $40        ; test if letter or number
0016+  18D8 C7 DE 18      jnz hex_letter
0017+  18DB 87 0F         and al, $0F        ; get number
0018+  18DD 09            ret
0019+  18DE             hex_letter:
0020+  18DE 87 0F         and al, $0F        ; get letter
0021+  18E0 6A 09         add al, 9
0022+  18E2 09            ret
0023+  18E3             
0024+  18E3             ;-----------------------------------------------------------------------------
0025+  18E3             ; ATOI
0026+  18E3             ; 2 letter hex string in B
0027+  18E3             ; 8bit integer returned in AL
0028+  18E3             ;-----------------------------------------------------------------------------
0029+  18E3             _atoi:
0030+  18E3 D8            push b
0031+  18E4 07 D5 18      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  18E7 30            mov bl, bh
0033+  18E8 DB            push al          ; save a
0034+  18E9 07 D5 18      call hex_ascii_encode
0035+  18EC EA            pop bl  
0036+  18ED FD 9E 04      shl al, 4
0037+  18F0 8C            or al, bl
0038+  18F1 E5            pop b
0039+  18F2 09            ret  
0040+  18F3             
0041+  18F3             
0042+  18F3             ;-----------------------------------------------------------------------------
0043+  18F3             ; ITOA
0044+  18F3             ; 8bit value in BL
0045+  18F3             ; 2 byte ASCII result in A
0046+  18F3             ;-----------------------------------------------------------------------------
0047+  18F3             _itoa:
0048+  18F3 DA            push d
0049+  18F4 D8            push b
0050+  18F5 A7 00         mov bh, 0
0051+  18F7 FD A4 04      shr bl, 4  
0052+  18FA 74            mov d, b
0053+  18FB 1F A3 1B      mov al, [d + s_hex_digits]
0054+  18FE 23            mov ah, al
0055+  18FF               
0056+  18FF E5            pop b
0057+  1900 D8            push b
0058+  1901 A7 00         mov bh, 0
0059+  1903 FD 87 0F      and bl, $0F
0060+  1906 74            mov d, b
0061+  1907 1F A3 1B      mov al, [d + s_hex_digits]
0062+  190A E5            pop b
0063+  190B E7            pop d
0064+  190C 09            ret
0065+  190D             
0066+  190D             ;-----------------------------------------------------------------------------
0067+  190D             ; HEX STRING TO BINARY
0068+  190D             ; di = destination address
0069+  190D             ; si = source
0070+  190D             ;-----------------------------------------------------------------------------
0071+  190D             _hex_to_int:
0072+  190D             _hex_to_int_L1:
0073+  190D F6            lodsb          ; load from [SI] to AL
0074+  190E B9 00         cmp al, 0        ; check if ASCII 0
0075+  1910 C6 1D 19      jz _hex_to_int_ret
0076+  1913 36            mov bh, al
0077+  1914 F6            lodsb
0078+  1915 2F            mov bl, al
0079+  1916 07 E3 18      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  1919 F7            stosb          ; store AL to [DI]
0081+  191A 0A 0D 19      jmp _hex_to_int_L1
0082+  191D             _hex_to_int_ret:
0083+  191D 09            ret    
0084+  191E             
0085+  191E             ;-----------------------------------------------------------------------------
0086+  191E             ; GETCHAR
0087+  191E             ; char in ah
0088+  191E             ;-----------------------------------------------------------------------------
0089+  191E             getch:
0090+  191E DB            push al
0091+  191F             getch_retry:
0092+  191F 19 01         mov al, 1
0093+  1921 05 03         syscall sys_io      ; receive in AH
0094+  1923 E8            pop al
0095+  1924 09            ret
0096+  1925             
0097+  1925             ;-----------------------------------------------------------------------------
0098+  1925             ; PUTCHAR
0099+  1925             ; char in ah
0100+  1925             ;-----------------------------------------------------------------------------
0101+  1925             _putchar:
0102+  1925 D7            push a
0103+  1926 19 00         mov al, 0
0104+  1928 05 03         syscall sys_io      ; char in AH
0105+  192A E4            pop a
0106+  192B 09            ret
0107+  192C             
0108+  192C             ;-----------------------------------------------------------------------------
0109+  192C             ;; INPUT A STRING
0110+  192C             ;; terminates with null
0111+  192C             ;; pointer in D
0112+  192C             ;-----------------------------------------------------------------------------
0113+  192C             _gets:
0114+  192C D7            push a
0115+  192D DA            push d
0116+  192E             _gets_loop:
0117+  192E 19 01         mov al, 1
0118+  1930 05 03         syscall sys_io      ; receive in AH
0119+  1932 B9 00         cmp al, 0        ; check error code (AL)
0120+  1934 C6 2E 19      je _gets_loop      ; if no char received, retry
0121+  1937             
0122+  1937 76 1B         cmp ah, 27
0123+  1939 C6 5A 19      je _gets_ansi_esc
0124+  193C 76 0A         cmp ah, $0A        ; LF
0125+  193E C6 C5 19      je _gets_end
0126+  1941 76 0D         cmp ah, $0D        ; CR
0127+  1943 C6 C5 19      je _gets_end
0128+  1946 76 5C         cmp ah, $5C        ; '\\'
0129+  1948 C6 86 19      je _gets_escape
0130+  194B               
0131+  194B 76 08         cmp ah, $08      ; check for backspace
0132+  194D C6 56 19      je _gets_backspace
0133+  1950             
0134+  1950 1A            mov al, ah
0135+  1951 3E            mov [d], al
0136+  1952 79            inc d
0137+  1953 0A 2E 19      jmp _gets_loop
0138+  1956             _gets_backspace:
0139+  1956 7F            dec d
0140+  1957 0A 2E 19      jmp _gets_loop
0141+  195A             _gets_ansi_esc:
0142+  195A 19 01         mov al, 1
0143+  195C 05 03         syscall sys_io        ; receive in AH without echo
0144+  195E B9 00         cmp al, 0          ; check error code (AL)
0145+  1960 C6 5A 19      je _gets_ansi_esc    ; if no char received, retry
0146+  1963 76 5B         cmp ah, '['
0147+  1965 C7 2E 19      jne _gets_loop
0148+  1968             _gets_ansi_esc_2:
0149+  1968 19 01         mov al, 1
0150+  196A 05 03         syscall sys_io          ; receive in AH without echo
0151+  196C B9 00         cmp al, 0            ; check error code (AL)
0152+  196E C6 68 19      je _gets_ansi_esc_2  ; if no char received, retry
0153+  1971 76 44         cmp ah, 'D'
0154+  1973 C6 7E 19      je _gets_left_arrow
0155+  1976 76 43         cmp ah, 'C'
0156+  1978 C6 82 19      je _gets_right_arrow
0157+  197B 0A 2E 19      jmp _gets_loop
0158+  197E             _gets_left_arrow:
0159+  197E 7F            dec d
0160+  197F 0A 2E 19      jmp _gets_loop
0161+  1982             _gets_right_arrow:
0162+  1982 79            inc d
0163+  1983 0A 2E 19      jmp _gets_loop
0164+  1986             _gets_escape:
0165+  1986 19 01         mov al, 1
0166+  1988 05 03         syscall sys_io      ; receive in AH
0167+  198A B9 00         cmp al, 0        ; check error code (AL)
0168+  198C C6 86 19      je _gets_escape      ; if no char received, retry
0169+  198F 76 6E         cmp ah, 'n'
0170+  1991 C6 B0 19      je _gets_LF
0171+  1994 76 72         cmp ah, 'r'
0172+  1996 C6 B7 19      je _gets_CR
0173+  1999 76 30         cmp ah, '0'
0174+  199B C6 BE 19      je _gets_NULL
0175+  199E 76 5C         cmp ah, $5C  ; '\'
0176+  19A0 C6 A9 19      je _gets_slash
0177+  19A3 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  19A4 3E            mov [d], al
0179+  19A5 79            inc d
0180+  19A6 0A 2E 19      jmp _gets_loop
0181+  19A9             _gets_slash:
0182+  19A9 19 5C         mov al, $5C
0183+  19AB 3E            mov [d], al
0184+  19AC 79            inc d
0185+  19AD 0A 2E 19      jmp _gets_loop
0186+  19B0             _gets_LF:
0187+  19B0 19 0A         mov al, $0A
0188+  19B2 3E            mov [d], al
0189+  19B3 79            inc d
0190+  19B4 0A 2E 19      jmp _gets_loop
0191+  19B7             _gets_CR:
0192+  19B7 19 0D         mov al, $0D
0193+  19B9 3E            mov [d], al
0194+  19BA 79            inc d
0195+  19BB 0A 2E 19      jmp _gets_loop
0196+  19BE             _gets_NULL:
0197+  19BE 19 00         mov al, $00
0198+  19C0 3E            mov [d], al
0199+  19C1 79            inc d
0200+  19C2 0A 2E 19      jmp _gets_loop
0201+  19C5             _gets_end:
0202+  19C5 19 00         mov al, 0
0203+  19C7 3E            mov [d], al        ; terminate string
0204+  19C8 E7            pop d
0205+  19C9 E4            pop a
0206+  19CA 09            ret
0207+  19CB             
0208+  19CB             ;-----------------------------------------------------------------------------
0209+  19CB             ;; INPUT TEXT
0210+  19CB             ;; terminated with CTRL+D
0211+  19CB             ;; pointer in D
0212+  19CB             ;-----------------------------------------------------------------------------
0213+  19CB             _gettxt:
0214+  19CB D7            push a
0215+  19CC DA            push d
0216+  19CD             _gettxt_loop:
0217+  19CD 19 01         mov al, 1
0218+  19CF 05 03         syscall sys_io      ; receive in AH
0219+  19D1 B9 00         cmp al, 0        ; check error code (AL)
0220+  19D3 C6 CD 19      je _gettxt_loop    ; if no char received, retry
0221+  19D6 76 04         cmp ah, 4      ; EOT
0222+  19D8 C6 16 1A      je _gettxt_end
0223+  19DB 76 08         cmp ah, $08      ; check for backspace
0224+  19DD C6 12 1A      je _gettxt_backspace
0225+  19E0 76 5C         cmp ah, $5C        ; '\'
0226+  19E2 C6 EB 19      je _gettxt_escape
0227+  19E5 1A            mov al, ah
0228+  19E6 3E            mov [d], al
0229+  19E7 79            inc d
0230+  19E8 0A CD 19      jmp _gettxt_loop
0231+  19EB             _gettxt_escape:
0232+  19EB 19 01         mov al, 1
0233+  19ED 05 03         syscall sys_io      ; receive in AH
0234+  19EF B9 00         cmp al, 0        ; check error code (AL)
0235+  19F1 C6 EB 19      je _gettxt_escape    ; if no char received, retry
0236+  19F4 76 6E         cmp ah, 'n'
0237+  19F6 C6 04 1A      je _gettxt_LF
0238+  19F9 76 72         cmp ah, 'r'
0239+  19FB C6 0B 1A      je _gettxt_CR
0240+  19FE 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  19FF 3E            mov [d], al
0242+  1A00 79            inc d
0243+  1A01 0A CD 19      jmp _gettxt_loop
0244+  1A04             _gettxt_LF:
0245+  1A04 19 0A         mov al, $0A
0246+  1A06 3E            mov [d], al
0247+  1A07 79            inc d
0248+  1A08 0A CD 19      jmp _gettxt_loop
0249+  1A0B             _gettxt_CR:
0250+  1A0B 19 0D         mov al, $0D
0251+  1A0D 3E            mov [d], al
0252+  1A0E 79            inc d
0253+  1A0F 0A CD 19      jmp _gettxt_loop
0254+  1A12             _gettxt_backspace:
0255+  1A12 7F            dec d
0256+  1A13 0A CD 19      jmp _gettxt_loop
0257+  1A16             _gettxt_end:
0258+  1A16 19 00         mov al, 0
0259+  1A18 3E            mov [d], al        ; terminate string
0260+  1A19 E7            pop d
0261+  1A1A E4            pop a
0262+  1A1B 09            ret
0263+  1A1C             
0264+  1A1C             ;-----------------------------------------------------------------------------
0265+  1A1C             ; PRINT NEW LINE
0266+  1A1C             ;-----------------------------------------------------------------------------
0267+  1A1C             printnl:
0268+  1A1C D7            push a
0269+  1A1D 10 00 0A      mov a, $0A00
0270+  1A20 05 03         syscall sys_io
0271+  1A22 10 00 0D      mov a, $0D00
0272+  1A25 05 03         syscall sys_io
0273+  1A27 E4            pop a
0274+  1A28 09            ret
0275+  1A29             
0276+  1A29             ;-----------------------------------------------------------------------------
0277+  1A29             ; _strtoint
0278+  1A29             ; 4 digit hex string number in d
0279+  1A29             ; integer returned in A
0280+  1A29             ;-----------------------------------------------------------------------------
0281+  1A29             _strtointx:
0282+  1A29 D8            push b
0283+  1A2A 32            mov bl, [d]
0284+  1A2B 37            mov bh, bl
0285+  1A2C 33 01 00      mov bl, [d + 1]
0286+  1A2F 07 E3 18      call _atoi        ; convert to int in AL
0287+  1A32 23            mov ah, al        ; move to AH
0288+  1A33 33 02 00      mov bl, [d + 2]
0289+  1A36 37            mov bh, bl
0290+  1A37 33 03 00      mov bl, [d + 3]
0291+  1A3A 07 E3 18      call _atoi        ; convert to int in AL
0292+  1A3D E5            pop b
0293+  1A3E 09            ret
0294+  1A3F             
0295+  1A3F             ;-----------------------------------------------------------------------------
0296+  1A3F             ; _strtoint
0297+  1A3F             ; 5 digit base10 string number in d
0298+  1A3F             ; integer returned in A
0299+  1A3F             ;-----------------------------------------------------------------------------
0300+  1A3F             _strtoint:
0301+  1A3F E2            push si
0302+  1A40 D8            push b
0303+  1A41 D9            push c
0304+  1A42 DA            push d
0305+  1A43 07 85 18      call _strlen      ; get string length in C
0306+  1A46 7E            dec c
0307+  1A47 FD 4E         mov si, d
0308+  1A49 12            mov a, c
0309+  1A4A FD 99         shl a
0310+  1A4C 3B BB 1B      mov d, table_power
0311+  1A4F 59            add d, a
0312+  1A50 38 00 00      mov c, 0
0313+  1A53             _strtoint_L0:
0314+  1A53 F6            lodsb      ; load ASCII to al
0315+  1A54 B9 00         cmp al, 0
0316+  1A56 C6 69 1A      je _strtoint_end
0317+  1A59 6F 30         sub al, $30    ; make into integer
0318+  1A5B 22 00         mov ah, 0
0319+  1A5D 2A            mov b, [d]
0320+  1A5E AC            mul a, b      ; result in B since it fits in 16bits
0321+  1A5F 11            mov a, b
0322+  1A60 28            mov b, c
0323+  1A61 54            add a, b
0324+  1A62 39            mov c, a
0325+  1A63 63 02 00      sub d, 2
0326+  1A66 0A 53 1A      jmp _strtoint_L0
0327+  1A69             _strtoint_end:
0328+  1A69 12            mov a, c
0329+  1A6A E7            pop d
0330+  1A6B E6            pop c
0331+  1A6C E5            pop b
0332+  1A6D EF            pop si
0333+  1A6E 09            ret
0334+  1A6F             
0335+  1A6F             ;-----------------------------------------------------------------------------
0336+  1A6F             ; PRINT NULL TERMINATED STRING
0337+  1A6F             ; pointer in D
0338+  1A6F             ;-----------------------------------------------------------------------------
0339+  1A6F             _puts:
0340+  1A6F D7            push a
0341+  1A70 DA            push d
0342+  1A71             _puts_L1:
0343+  1A71 1E            mov al, [d]
0344+  1A72 B9 00         cmp al, 0
0345+  1A74 C6 80 1A      jz _puts_END
0346+  1A77 23            mov ah, al
0347+  1A78 19 00         mov al, 0
0348+  1A7A 05 03         syscall sys_io
0349+  1A7C 79            inc d
0350+  1A7D 0A 71 1A      jmp _puts_L1
0351+  1A80             _puts_END:
0352+  1A80 E7            pop d
0353+  1A81 E4            pop a
0354+  1A82 09            ret
0355+  1A83             
0356+  1A83             ;-----------------------------------------------------------------------------
0357+  1A83             ; PRINT N SIZE STRING
0358+  1A83             ; pointer in D
0359+  1A83             ; size in C
0360+  1A83             ;-----------------------------------------------------------------------------
0361+  1A83             _putsn:
0362+  1A83 DB            push al
0363+  1A84 DA            push d
0364+  1A85 D9            push c
0365+  1A86             _putsn_L0:
0366+  1A86 1E            mov al, [d]
0367+  1A87 23            mov ah, al
0368+  1A88 19 00         mov al, 0
0369+  1A8A 05 03         syscall sys_io
0370+  1A8C 79            inc d
0371+  1A8D 7E            dec c  
0372+  1A8E C2 00 00      cmp c, 0
0373+  1A91 C7 86 1A      jne _putsn_L0
0374+  1A94             _putsn_end:
0375+  1A94 E6            pop c
0376+  1A95 E7            pop d
0377+  1A96 E8            pop al
0378+  1A97 09            ret
0379+  1A98             
0380+  1A98             ;-----------------------------------------------------------------------------
0381+  1A98             ; print 16bit decimal number
0382+  1A98             ; input number in A
0383+  1A98             ;-----------------------------------------------------------------------------
0384+  1A98             print_u16d:
0385+  1A98 D7            push a
0386+  1A99 D8            push b
0387+  1A9A 26 10 27      mov b, 10000
0388+  1A9D AE            div a, b      ; get 10000's coeff.
0389+  1A9E 07 C0 1A      call print_number
0390+  1AA1 11            mov a, b
0391+  1AA2 26 E8 03      mov b, 1000
0392+  1AA5 AE            div a, b      ; get 1000's coeff.
0393+  1AA6 07 C0 1A      call print_number
0394+  1AA9 11            mov a, b
0395+  1AAA 26 64 00      mov b, 100
0396+  1AAD AE            div a, b
0397+  1AAE 07 C0 1A      call print_number
0398+  1AB1 11            mov a, b
0399+  1AB2 26 0A 00      mov b, 10
0400+  1AB5 AE            div a, b
0401+  1AB6 07 C0 1A      call print_number
0402+  1AB9 1B            mov al, bl      ; 1's coeff in bl
0403+  1ABA 07 C0 1A      call print_number
0404+  1ABD E5            pop b
0405+  1ABE E4            pop a
0406+  1ABF 09            ret
0407+  1AC0             
0408+  1AC0             ;-----------------------------------------------------------------------------
0409+  1AC0             ; print AL
0410+  1AC0             ;-----------------------------------------------------------------------------
0411+  1AC0             print_number:
0412+  1AC0 6A 30         add al, $30
0413+  1AC2 23            mov ah, al
0414+  1AC3 07 25 19      call _putchar
0415+  1AC6 09            ret
0416+  1AC7             
0417+  1AC7             ;-----------------------------------------------------------------------------
0418+  1AC7             ; PRINT 16BIT HEX INTEGER
0419+  1AC7             ; integer value in reg B
0420+  1AC7             ;-----------------------------------------------------------------------------
0421+  1AC7             print_u16x:
0422+  1AC7 D7            push a
0423+  1AC8 D8            push b
0424+  1AC9 DD            push bl
0425+  1ACA 30            mov bl, bh
0426+  1ACB 07 F3 18      call _itoa        ; convert bh to char in A
0427+  1ACE 2F            mov bl, al        ; save al
0428+  1ACF 19 00         mov al, 0
0429+  1AD1 05 03         syscall sys_io        ; display AH
0430+  1AD3 24            mov ah, bl        ; retrieve al
0431+  1AD4 19 00         mov al, 0
0432+  1AD6 05 03         syscall sys_io        ; display AL
0433+  1AD8             
0434+  1AD8 EA            pop bl
0435+  1AD9 07 F3 18      call _itoa        ; convert bh to char in A
0436+  1ADC 2F            mov bl, al        ; save al
0437+  1ADD 19 00         mov al, 0
0438+  1ADF 05 03         syscall sys_io        ; display AH
0439+  1AE1 24            mov ah, bl        ; retrieve al
0440+  1AE2 19 00         mov al, 0
0441+  1AE4 05 03         syscall sys_io        ; display AL
0442+  1AE6             
0443+  1AE6 E5            pop b
0444+  1AE7 E4            pop a
0445+  1AE8 09            ret
0446+  1AE9             
0447+  1AE9             ;-----------------------------------------------------------------------------
0448+  1AE9             ; INPUT 16BIT HEX INTEGER
0449+  1AE9             ; read 16bit integer into A
0450+  1AE9             ;-----------------------------------------------------------------------------
0451+  1AE9             scan_u16x:
0452+  1AE9 F8 10 00      enter 16
0453+  1AEC D8            push b
0454+  1AED DA            push d
0455+  1AEE             
0456+  1AEE FA F1 FF      lea d, [bp + -15]
0457+  1AF1 07 2C 19      call _gets        ; get number
0458+  1AF4             
0459+  1AF4 32            mov bl, [d]
0460+  1AF5 37            mov bh, bl
0461+  1AF6 33 01 00      mov bl, [d + 1]
0462+  1AF9 07 E3 18      call _atoi        ; convert to int in AL
0463+  1AFC 23            mov ah, al        ; move to AH
0464+  1AFD             
0465+  1AFD 33 02 00      mov bl, [d + 2]
0466+  1B00 37            mov bh, bl
0467+  1B01 33 03 00      mov bl, [d + 3]
0468+  1B04 07 E3 18      call _atoi        ; convert to int in AL
0469+  1B07             
0470+  1B07 E7            pop d
0471+  1B08 E5            pop b
0472+  1B09 F9            leave
0473+  1B0A 09            ret
0474+  1B0B             
0475+  1B0B             ;-----------------------------------------------------------------------------
0476+  1B0B             ; PRINT 8bit HEX INTEGER
0477+  1B0B             ; integer value in reg bl
0478+  1B0B             ;-----------------------------------------------------------------------------
0479+  1B0B             print_u8x:
0480+  1B0B D7            push a
0481+  1B0C DD            push bl
0482+  1B0D             
0483+  1B0D 07 F3 18      call _itoa        ; convert bl to char in A
0484+  1B10 2F            mov bl, al        ; save al
0485+  1B11 19 00         mov al, 0
0486+  1B13 05 03         syscall sys_io        ; display AH
0487+  1B15 24            mov ah, bl        ; retrieve al
0488+  1B16 19 00         mov al, 0
0489+  1B18 05 03         syscall sys_io        ; display AL
0490+  1B1A             
0491+  1B1A EA            pop bl
0492+  1B1B E4            pop a
0493+  1B1C 09            ret
0494+  1B1D             
0495+  1B1D             ;-----------------------------------------------------------------------------
0496+  1B1D             ; print 8bit decimal unsigned number
0497+  1B1D             ; input number in AL
0498+  1B1D             ;-----------------------------------------------------------------------------
0499+  1B1D             print_u8d:
0500+  1B1D D7            push a
0501+  1B1E D8            push b
0502+  1B1F             
0503+  1B1F 22 00         mov ah, 0
0504+  1B21 26 64 00      mov b, 100
0505+  1B24 AE            div a, b
0506+  1B25 D8            push b      ; save remainder
0507+  1B26 B9 00         cmp al, 0
0508+  1B28 C6 32 1B      je skip100
0509+  1B2B 6A 30         add al, $30
0510+  1B2D 23            mov ah, al
0511+  1B2E 19 00         mov al, 0
0512+  1B30 05 03         syscall sys_io  ; print coeff
0513+  1B32             skip100:
0514+  1B32 E4            pop a
0515+  1B33 22 00         mov ah, 0
0516+  1B35 26 0A 00      mov b, 10
0517+  1B38 AE            div a, b
0518+  1B39 D8            push b      ; save remainder
0519+  1B3A B9 00         cmp al, 0
0520+  1B3C C6 46 1B      je skip10
0521+  1B3F 6A 30         add al, $30
0522+  1B41 23            mov ah, al
0523+  1B42 19 00         mov al, 0
0524+  1B44 05 03         syscall sys_io  ; print coeff
0525+  1B46             skip10:
0526+  1B46 E4            pop a
0527+  1B47 1B            mov al, bl
0528+  1B48 6A 30         add al, $30
0529+  1B4A 23            mov ah, al
0530+  1B4B 19 00         mov al, 0
0531+  1B4D 05 03         syscall sys_io  ; print coeff
0532+  1B4F E5            pop b
0533+  1B50 E4            pop a
0534+  1B51 09            ret
0535+  1B52             
0536+  1B52             ;-----------------------------------------------------------------------------
0537+  1B52             ; INPUT 8BIT HEX INTEGER
0538+  1B52             ; read 8bit integer into AL
0539+  1B52             ;-----------------------------------------------------------------------------
0540+  1B52             scan_u8x:
0541+  1B52 F8 04 00      enter 4
0542+  1B55 D8            push b
0543+  1B56 DA            push d
0544+  1B57             
0545+  1B57 FA FD FF      lea d, [bp + -3]
0546+  1B5A 07 2C 19      call _gets        ; get number
0547+  1B5D             
0548+  1B5D 32            mov bl, [d]
0549+  1B5E 37            mov bh, bl
0550+  1B5F 33 01 00      mov bl, [d + 1]
0551+  1B62 07 E3 18      call _atoi        ; convert to int in AL
0552+  1B65             
0553+  1B65 E7            pop d
0554+  1B66 E5            pop b
0555+  1B67 F9            leave
0556+  1B68 09            ret
0557+  1B69             
0558+  1B69             ;-----------------------------------------------------------------------------
0559+  1B69             ; input decimal number
0560+  1B69             ; result in A
0561+  1B69             ; 655'\0'
0562+  1B69             ; low--------high
0563+  1B69             ;-----------------------------------------------------------------------------
0564+  1B69             scan_u16d:
0565+  1B69 F8 08 00      enter 8
0566+  1B6C E2            push si
0567+  1B6D D8            push b
0568+  1B6E D9            push c
0569+  1B6F DA            push d
0570+  1B70 FA F9 FF      lea d, [bp +- 7]
0571+  1B73 07 2C 19      call _gets
0572+  1B76 07 85 18      call _strlen      ; get string length in C
0573+  1B79 7E            dec c
0574+  1B7A FD 4E         mov si, d
0575+  1B7C 12            mov a, c
0576+  1B7D FD 99         shl a
0577+  1B7F 3B BB 1B      mov d, table_power
0578+  1B82 59            add d, a
0579+  1B83 38 00 00      mov c, 0
0580+  1B86             mul_loop:
0581+  1B86 F6            lodsb      ; load ASCII to al
0582+  1B87 B9 00         cmp al, 0
0583+  1B89 C6 9C 1B      je mul_exit
0584+  1B8C 6F 30         sub al, $30    ; make into integer
0585+  1B8E 22 00         mov ah, 0
0586+  1B90 2A            mov b, [d]
0587+  1B91 AC            mul a, b      ; result in B since it fits in 16bits
0588+  1B92 11            mov a, b
0589+  1B93 28            mov b, c
0590+  1B94 54            add a, b
0591+  1B95 39            mov c, a
0592+  1B96 63 02 00      sub d, 2
0593+  1B99 0A 86 1B      jmp mul_loop
0594+  1B9C             mul_exit:
0595+  1B9C 12            mov a, c
0596+  1B9D E7            pop d
0597+  1B9E E6            pop c
0598+  1B9F E5            pop b
0599+  1BA0 EF            pop si
0600+  1BA1 F9            leave
0601+  1BA2 09            ret
0602+  1BA3             
0603+  1BA3 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  1BA7 34 35 36 37 
0603+  1BAB 38 39 41 42 
0603+  1BAF 43 44 45 46 
0604+  1BB3 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  1BB7 1B 5B 48 00 
0605+  1BBB             
0606+  1BBB             table_power:
0607+  1BBB 01 00         .dw 1
0608+  1BBD 0A 00         .dw 10
0609+  1BBF 64 00         .dw 100
0610+  1BC1 E8 03         .dw 1000
0611+  1BC3 10 27         .dw 100003128   1BC5             ; --- END INLINE ASM BLOCK
3129   1BC5             
3130   1BC5 F9            leave
3131   1BC6 09            ret
3132   1BC7             
3133   1BC7             gcd:
3134   1BC7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3135   1BCA             ;; if (b == 0) { 
3136   1BCA             _if44_cond:
3137   1BCA FA 07 00      lea d, [bp + 7] ; $b
3138   1BCD 2A            mov b, [d]
3139   1BCE             ; START RELATIONAL
3140   1BCE D7            push a
3141   1BCF 11            mov a, b
3142   1BD0 26 00 00      mov b, $0
3143   1BD3 B0            cmp a, b
3144   1BD4 FD 71         seq ; ==
3145   1BD6 E4            pop a
3146   1BD7             ; END RELATIONAL
3147   1BD7 C0 00 00      cmp b, 0
3148   1BDA C6 E6 1B      je _if44_exit
3149   1BDD             _if44_true:
3150   1BDD             ;; return a; 
3151   1BDD FA 05 00      lea d, [bp + 5] ; $a
3152   1BE0 2A            mov b, [d]
3153   1BE1 F9            leave
3154   1BE2 09            ret
3155   1BE3 0A E6 1B      jmp _if44_exit
3156   1BE6             _if44_exit:
3157   1BE6             ;; return gcd(b, a % b); 
3158   1BE6 FA 05 00      lea d, [bp + 5] ; $a
3159   1BE9 2A            mov b, [d]
3160   1BEA             ; START FACTORS
3161   1BEA D7            push a
3162   1BEB 11            mov a, b
3163   1BEC FA 07 00      lea d, [bp + 7] ; $b
3164   1BEF 2A            mov b, [d]
3165   1BF0 AE            div a, b ; 
3166   1BF1 11            mov a, b
3167   1BF2 27            mov b, a
3168   1BF3 E4            pop a
3169   1BF4             ; END FACTORS
3170   1BF4 FD AB         swp b
3171   1BF6 D8            push b
3172   1BF7 FA 07 00      lea d, [bp + 7] ; $b
3173   1BFA 2A            mov b, [d]
3174   1BFB FD AB         swp b
3175   1BFD D8            push b
3176   1BFE 07 C7 1B      call gcd
3177   1C01 51 04 00      add sp, 4
3178   1C04 F9            leave
3179   1C05 09            ret
3180   1C06             
3181   1C06             mod_exp:
3182   1C06 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3183   1C09             ;; int result; 
3184   1C09 52 02 00      sub sp, 2 ; result
3185   1C0C             ;; result = 1; 
3186   1C0C FA FF FF      lea d, [bp + -1] ; $result
3187   1C0F DA            push d
3188   1C10 26 01 00      mov b, $1
3189   1C13 E7            pop d
3190   1C14 FD 43         mov [d], b
3191   1C16             ;; while (exp > 0) { 
3192   1C16             _while45_cond:
3193   1C16 FA 07 00      lea d, [bp + 7] ; $exp
3194   1C19 2A            mov b, [d]
3195   1C1A             ; START RELATIONAL
3196   1C1A D7            push a
3197   1C1B 11            mov a, b
3198   1C1C 26 00 00      mov b, $0
3199   1C1F B0            cmp a, b
3200   1C20 FD 7F         sgt ; >
3201   1C22 E4            pop a
3202   1C23             ; END RELATIONAL
3203   1C23 C0 00 00      cmp b, 0
3204   1C26 C6 94 1C      je _while45_exit
3205   1C29             _while45_block:
3206   1C29             ;; if (exp & 1) { 
3207   1C29             _if46_cond:
3208   1C29 FA 07 00      lea d, [bp + 7] ; $exp
3209   1C2C 2A            mov b, [d]
3210   1C2D D7            push a
3211   1C2E 11            mov a, b
3212   1C2F 26 01 00      mov b, $1
3213   1C32 FD 92         and b, a ; &
3214   1C34 E4            pop a
3215   1C35 C0 00 00      cmp b, 0
3216   1C38 C6 5D 1C      je _if46_exit
3217   1C3B             _if46_true:
3218   1C3B             ;; result = (result * base) % mod; 
3219   1C3B FA FF FF      lea d, [bp + -1] ; $result
3220   1C3E DA            push d
3221   1C3F FA FF FF      lea d, [bp + -1] ; $result
3222   1C42 2A            mov b, [d]
3223   1C43             ; START FACTORS
3224   1C43 D7            push a
3225   1C44 11            mov a, b
3226   1C45 FA 05 00      lea d, [bp + 5] ; $base
3227   1C48 2A            mov b, [d]
3228   1C49 AC            mul a, b ; *
3229   1C4A 11            mov a, b
3230   1C4B 27            mov b, a
3231   1C4C E4            pop a
3232   1C4D             ; END FACTORS
3233   1C4D             ; START FACTORS
3234   1C4D D7            push a
3235   1C4E 11            mov a, b
3236   1C4F FA 09 00      lea d, [bp + 9] ; $mod
3237   1C52 2A            mov b, [d]
3238   1C53 AE            div a, b ; 
3239   1C54 11            mov a, b
3240   1C55 27            mov b, a
3241   1C56 E4            pop a
3242   1C57             ; END FACTORS
3243   1C57 E7            pop d
3244   1C58 FD 43         mov [d], b
3245   1C5A 0A 5D 1C      jmp _if46_exit
3246   1C5D             _if46_exit:
3247   1C5D             ;; exp = exp >> 1; 
3248   1C5D FA 07 00      lea d, [bp + 7] ; $exp
3249   1C60 DA            push d
3250   1C61 FA 07 00      lea d, [bp + 7] ; $exp
3251   1C64 2A            mov b, [d]
3252   1C65             ; START SHIFT
3253   1C65 D7            push a
3254   1C66 11            mov a, b
3255   1C67 26 01 00      mov b, $1
3256   1C6A FD 39         mov c, b
3257   1C6C A5            ashr a, cl
3258   1C6D 27            mov b, a
3259   1C6E E4            pop a
3260   1C6F             ; END SHIFT
3261   1C6F E7            pop d
3262   1C70 FD 43         mov [d], b
3263   1C72             ;; base = (base * base) % mod; 
3264   1C72 FA 05 00      lea d, [bp + 5] ; $base
3265   1C75 DA            push d
3266   1C76 FA 05 00      lea d, [bp + 5] ; $base
3267   1C79 2A            mov b, [d]
3268   1C7A             ; START FACTORS
3269   1C7A D7            push a
3270   1C7B 11            mov a, b
3271   1C7C FA 05 00      lea d, [bp + 5] ; $base
3272   1C7F 2A            mov b, [d]
3273   1C80 AC            mul a, b ; *
3274   1C81 11            mov a, b
3275   1C82 27            mov b, a
3276   1C83 E4            pop a
3277   1C84             ; END FACTORS
3278   1C84             ; START FACTORS
3279   1C84 D7            push a
3280   1C85 11            mov a, b
3281   1C86 FA 09 00      lea d, [bp + 9] ; $mod
3282   1C89 2A            mov b, [d]
3283   1C8A AE            div a, b ; 
3284   1C8B 11            mov a, b
3285   1C8C 27            mov b, a
3286   1C8D E4            pop a
3287   1C8E             ; END FACTORS
3288   1C8E E7            pop d
3289   1C8F FD 43         mov [d], b
3290   1C91 0A 16 1C      jmp _while45_cond
3291   1C94             _while45_exit:
3292   1C94             ;; return result; 
3293   1C94 FA FF FF      lea d, [bp + -1] ; $result
3294   1C97 2A            mov b, [d]
3295   1C98 F9            leave
3296   1C99 09            ret
3297   1C9A             
3298   1C9A             find_e:
3299   1C9A F8 00 00      enter 0 ; (push bp; mov bp, sp)
3300   1C9D             ;; int e; 
3301   1C9D 52 02 00      sub sp, 2 ; e
3302   1CA0             ;; for (e = 2; e < phi; e++) { 
3303   1CA0             _for47_init:
3304   1CA0 FA FF FF      lea d, [bp + -1] ; $e
3305   1CA3 DA            push d
3306   1CA4 26 02 00      mov b, $2
3307   1CA7 E7            pop d
3308   1CA8 FD 43         mov [d], b
3309   1CAA             _for47_cond:
3310   1CAA FA FF FF      lea d, [bp + -1] ; $e
3311   1CAD 2A            mov b, [d]
3312   1CAE             ; START RELATIONAL
3313   1CAE D7            push a
3314   1CAF 11            mov a, b
3315   1CB0 FA 05 00      lea d, [bp + 5] ; $phi
3316   1CB3 2A            mov b, [d]
3317   1CB4 B0            cmp a, b
3318   1CB5 FD 73         slt ; < (signed)
3319   1CB7 E4            pop a
3320   1CB8             ; END RELATIONAL
3321   1CB8 C0 00 00      cmp b, 0
3322   1CBB C6 FA 1C      je _for47_exit
3323   1CBE             _for47_block:
3324   1CBE             ;; if (gcd(e, phi) == 1) { 
3325   1CBE             _if48_cond:
3326   1CBE FA 05 00      lea d, [bp + 5] ; $phi
3327   1CC1 2A            mov b, [d]
3328   1CC2 FD AB         swp b
3329   1CC4 D8            push b
3330   1CC5 FA FF FF      lea d, [bp + -1] ; $e
3331   1CC8 2A            mov b, [d]
3332   1CC9 FD AB         swp b
3333   1CCB D8            push b
3334   1CCC 07 C7 1B      call gcd
3335   1CCF 51 04 00      add sp, 4
3336   1CD2             ; START RELATIONAL
3337   1CD2 D7            push a
3338   1CD3 11            mov a, b
3339   1CD4 26 01 00      mov b, $1
3340   1CD7 B0            cmp a, b
3341   1CD8 FD 71         seq ; ==
3342   1CDA E4            pop a
3343   1CDB             ; END RELATIONAL
3344   1CDB C0 00 00      cmp b, 0
3345   1CDE C6 EA 1C      je _if48_exit
3346   1CE1             _if48_true:
3347   1CE1             ;; return e; 
3348   1CE1 FA FF FF      lea d, [bp + -1] ; $e
3349   1CE4 2A            mov b, [d]
3350   1CE5 F9            leave
3351   1CE6 09            ret
3352   1CE7 0A EA 1C      jmp _if48_exit
3353   1CEA             _if48_exit:
3354   1CEA             _for47_update:
3355   1CEA FA FF FF      lea d, [bp + -1] ; $e
3356   1CED 2A            mov b, [d]
3357   1CEE FD 77         inc b
3358   1CF0 FA FF FF      lea d, [bp + -1] ; $e
3359   1CF3 FD 43         mov [d], b
3360   1CF5 FD 7D         dec b
3361   1CF7 0A AA 1C      jmp _for47_cond
3362   1CFA             _for47_exit:
3363   1CFA             ;; return 0; 
3364   1CFA 26 00 00      mov b, $0
3365   1CFD F9            leave
3366   1CFE 09            ret
3367   1CFF             
3368   1CFF             find_d:
3369   1CFF F8 00 00      enter 0 ; (push bp; mov bp, sp)
3370   1D02             ;; int d; 
3371   1D02 52 02 00      sub sp, 2 ; d
3372   1D05             ;; for (d = 2; d < phi; d++) { 
3373   1D05             _for49_init:
3374   1D05 FA FF FF      lea d, [bp + -1] ; $d
3375   1D08 DA            push d
3376   1D09 26 02 00      mov b, $2
3377   1D0C E7            pop d
3378   1D0D FD 43         mov [d], b
3379   1D0F             _for49_cond:
3380   1D0F FA FF FF      lea d, [bp + -1] ; $d
3381   1D12 2A            mov b, [d]
3382   1D13             ; START RELATIONAL
3383   1D13 D7            push a
3384   1D14 11            mov a, b
3385   1D15 FA 07 00      lea d, [bp + 7] ; $phi
3386   1D18 2A            mov b, [d]
3387   1D19 B0            cmp a, b
3388   1D1A FD 73         slt ; < (signed)
3389   1D1C E4            pop a
3390   1D1D             ; END RELATIONAL
3391   1D1D C0 00 00      cmp b, 0
3392   1D20 C6 63 1D      je _for49_exit
3393   1D23             _for49_block:
3394   1D23             ;; if ((d * e) % phi == 1) { 
3395   1D23             _if50_cond:
3396   1D23 FA FF FF      lea d, [bp + -1] ; $d
3397   1D26 2A            mov b, [d]
3398   1D27             ; START FACTORS
3399   1D27 D7            push a
3400   1D28 11            mov a, b
3401   1D29 FA 05 00      lea d, [bp + 5] ; $e
3402   1D2C 2A            mov b, [d]
3403   1D2D AC            mul a, b ; *
3404   1D2E 11            mov a, b
3405   1D2F 27            mov b, a
3406   1D30 E4            pop a
3407   1D31             ; END FACTORS
3408   1D31             ; START FACTORS
3409   1D31 D7            push a
3410   1D32 11            mov a, b
3411   1D33 FA 07 00      lea d, [bp + 7] ; $phi
3412   1D36 2A            mov b, [d]
3413   1D37 AE            div a, b ; 
3414   1D38 11            mov a, b
3415   1D39 27            mov b, a
3416   1D3A E4            pop a
3417   1D3B             ; END FACTORS
3418   1D3B             ; START RELATIONAL
3419   1D3B D7            push a
3420   1D3C 11            mov a, b
3421   1D3D 26 01 00      mov b, $1
3422   1D40 B0            cmp a, b
3423   1D41 FD 71         seq ; ==
3424   1D43 E4            pop a
3425   1D44             ; END RELATIONAL
3426   1D44 C0 00 00      cmp b, 0
3427   1D47 C6 53 1D      je _if50_exit
3428   1D4A             _if50_true:
3429   1D4A             ;; return d; 
3430   1D4A FA FF FF      lea d, [bp + -1] ; $d
3431   1D4D 2A            mov b, [d]
3432   1D4E F9            leave
3433   1D4F 09            ret
3434   1D50 0A 53 1D      jmp _if50_exit
3435   1D53             _if50_exit:
3436   1D53             _for49_update:
3437   1D53 FA FF FF      lea d, [bp + -1] ; $d
3438   1D56 2A            mov b, [d]
3439   1D57 FD 77         inc b
3440   1D59 FA FF FF      lea d, [bp + -1] ; $d
3441   1D5C FD 43         mov [d], b
3442   1D5E FD 7D         dec b
3443   1D60 0A 0F 1D      jmp _for49_cond
3444   1D63             _for49_exit:
3445   1D63             ;; return 0; 
3446   1D63 26 00 00      mov b, $0
3447   1D66 F9            leave
3448   1D67 09            ret
3449   1D68             ; --- END TEXT BLOCK
3450   1D68             
3451   1D68             ; --- BEGIN DATA BLOCK
3452   1D68 50 75 62 6C _s0: .db "Public Key: (", 0
3452   1D6C 69 63 20 4B 
3452   1D70 65 79 3A 20 
3452   1D74 28 00 
3453   1D76 25 64 2C 20 _s1: .db "%d, ", 0
3453   1D7A 00 
3454   1D7B 25 64 0A 00 _s2: .db "%d\n", 0
3455   1D7F 50 72 69 76 _s3: .db "Private Key: (", 0
3455   1D83 61 74 65 20 
3455   1D87 4B 65 79 3A 
3455   1D8B 20 28 00 
3456   1D8E 45 6E 74 65 _s4: .db "Enter a string: ", 0
3456   1D92 72 20 61 20 
3456   1D96 73 74 72 69 
3456   1D9A 6E 67 3A 20 
3456   1D9E 00 
3457   1D9F 45 6E 63 72 _s5: .db "Encrypted text: ", 0
3457   1DA3 79 70 74 65 
3457   1DA7 64 20 74 65 
3457   1DAB 78 74 3A 20 
3457   1DAF 00 
3458   1DB0 25 64 20 00 _s6: .db "%d ", 0
3459   1DB4 0A 00       _s7: .db "\n", 0
3460   1DB6 44 65 63 72 _s8: .db "Decrypted text: ", 0
3460   1DBA 79 70 74 65 
3460   1DBE 64 20 74 65 
3460   1DC2 78 74 3A 20 
3460   1DC6 00 
3461   1DC7 55 6E 65 78 _s9: .db "Unexpected format in printf.", 0
3461   1DCB 70 65 63 74 
3461   1DCF 65 64 20 66 
3461   1DD3 6F 72 6D 61 
3461   1DD7 74 20 69 6E 
3461   1DDB 20 70 72 69 
3461   1DDF 6E 74 66 2E 
3461   1DE3 00 
3462   1DE4 45 72 72 6F _s10: .db "Error: Unknown argument type.\n", 0
3462   1DE8 72 3A 20 55 
3462   1DEC 6E 6B 6E 6F 
3462   1DF0 77 6E 20 61 
3462   1DF4 72 67 75 6D 
3462   1DF8 65 6E 74 20 
3462   1DFC 74 79 70 65 
3462   1E00 2E 0A 00 
3463   1E03 1B 5B 32 4A _s11: .db "\033[2J\033[H", 0
3463   1E07 1B 5B 48 00 
3464   1E0B             
3465   1E0B 0D 1E       _heap_top: .dw _heap
3466   1E0D 00          _heap: .db 0
3467   1E0E             ; --- END DATA BLOCK
3468   1E0E             
3469   1E0E             .end
tasm: Number of errors = 0
