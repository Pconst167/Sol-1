0001   0000             ; --- FILENAME: programs/qs
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ;; printf("Enter a string(256 max): "); 
0011   0408 26 99 1C      mov b, _s0 ; "Enter a string(256 max): "
0012   040B FD AB         swp b
0013   040D D8            push b
0014   040E 07 17 08      call printf
0015   0411 51 02 00      add sp, 2
0016   0414             ;; gets(mystring); 
0017   0414 3B 99 1B      mov d, _mystring_data ; $mystring
0018   0417 2D            mov b, d
0019   0418 FD AB         swp b
0020   041A D8            push b
0021   041B 07 52 0E      call gets
0022   041E 51 02 00      add sp, 2
0023   0421             ;; quick(mystring, strlen(mystring)); 
0024   0421 3B 99 1B      mov d, _mystring_data ; $mystring
0025   0424 2D            mov b, d
0026   0425 FD AB         swp b
0027   0427 D8            push b
0028   0428 07 EB 05      call strlen
0029   042B 51 02 00      add sp, 2
0030   042E FD AB         swp b
0031   0430 D8            push b
0032   0431 3B 99 1B      mov d, _mystring_data ; $mystring
0033   0434 2D            mov b, d
0034   0435 FD AB         swp b
0035   0437 D8            push b
0036   0438 07 A4 19      call quick
0037   043B 51 04 00      add sp, 4
0038   043E             ;; printf("\n"); 
0039   043E 26 B3 1C      mov b, _s1 ; "\n"
0040   0441 FD AB         swp b
0041   0443 D8            push b
0042   0444 07 17 08      call printf
0043   0447 51 02 00      add sp, 2
0044   044A             ;; printf("Sorted string: "); 
0045   044A 26 B5 1C      mov b, _s2 ; "Sorted string: "
0046   044D FD AB         swp b
0047   044F D8            push b
0048   0450 07 17 08      call printf
0049   0453 51 02 00      add sp, 2
0050   0456             ;; printf(mystring); 
0051   0456 3B 99 1B      mov d, _mystring_data ; $mystring
0052   0459 2D            mov b, d
0053   045A FD AB         swp b
0054   045C D8            push b
0055   045D 07 17 08      call printf
0056   0460 51 02 00      add sp, 2
0057   0463             ;; printf("\n"); 
0058   0463 26 B3 1C      mov b, _s1 ; "\n"
0059   0466 FD AB         swp b
0060   0468 D8            push b
0061   0469 07 17 08      call printf
0062   046C 51 02 00      add sp, 2
0063   046F 05 0B         syscall sys_terminate_proc
0064   0471             
0065   0471             strcpy:
0066   0471 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0067   0474             ;; char *psrc; 
0068   0474 52 02 00      sub sp, 2 ; psrc
0069   0477             ;; char *pdest; 
0070   0477 52 02 00      sub sp, 2 ; pdest
0071   047A             ;; psrc = src; 
0072   047A FA FF FF      lea d, [bp + -1] ; $psrc
0073   047D DA            push d
0074   047E FA 07 00      lea d, [bp + 7] ; $src
0075   0481 2A            mov b, [d]
0076   0482 E7            pop d
0077   0483 FD 43         mov [d], b
0078   0485             ;; pdest = dest; 
0079   0485 FA FD FF      lea d, [bp + -3] ; $pdest
0080   0488 DA            push d
0081   0489 FA 05 00      lea d, [bp + 5] ; $dest
0082   048C 2A            mov b, [d]
0083   048D E7            pop d
0084   048E FD 43         mov [d], b
0085   0490             ;; while(*psrc) *pdest++ = *psrc++; 
0086   0490             _while1_cond:
0087   0490 FA FF FF      lea d, [bp + -1] ; $psrc
0088   0493 2A            mov b, [d]
0089   0494 74            mov d, b
0090   0495 32            mov bl, [d]
0091   0496 A7 00         mov bh, 0
0092   0498 C0 00 00      cmp b, 0
0093   049B C6 C3 04      je _while1_exit
0094   049E             _while1_block:
0095   049E             ;; *pdest++ = *psrc++; 
0096   049E FA FD FF      lea d, [bp + -3] ; $pdest
0097   04A1 2A            mov b, [d]
0098   04A2 FD 77         inc b
0099   04A4 FA FD FF      lea d, [bp + -3] ; $pdest
0100   04A7 FD 43         mov [d], b
0101   04A9 FD 7D         dec b
0102   04AB D8            push b
0103   04AC FA FF FF      lea d, [bp + -1] ; $psrc
0104   04AF 2A            mov b, [d]
0105   04B0 FD 77         inc b
0106   04B2 FA FF FF      lea d, [bp + -1] ; $psrc
0107   04B5 FD 43         mov [d], b
0108   04B7 FD 7D         dec b
0109   04B9 74            mov d, b
0110   04BA 32            mov bl, [d]
0111   04BB A7 00         mov bh, 0
0112   04BD E7            pop d
0113   04BE FD 3E         mov [d], bl
0114   04C0 0A 90 04      jmp _while1_cond
0115   04C3             _while1_exit:
0116   04C3             ;; *pdest = '\0'; 
0117   04C3 FA FD FF      lea d, [bp + -3] ; $pdest
0118   04C6 2A            mov b, [d]
0119   04C7 D8            push b
0120   04C8 26 00 00      mov b, $0
0121   04CB E7            pop d
0122   04CC FD 3E         mov [d], bl
0123   04CE F9            leave
0124   04CF 09            ret
0125   04D0             
0126   04D0             strcmp:
0127   04D0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0128   04D3             ;; while (*s1 && (*s1 == *s2)) { 
0129   04D3             _while2_cond:
0130   04D3 FA 05 00      lea d, [bp + 5] ; $s1
0131   04D6 2A            mov b, [d]
0132   04D7 74            mov d, b
0133   04D8 32            mov bl, [d]
0134   04D9 A7 00         mov bh, 0
0135   04DB             ; START LOGICAL AND
0136   04DB D7            push a
0137   04DC 11            mov a, b
0138   04DD FA 05 00      lea d, [bp + 5] ; $s1
0139   04E0 2A            mov b, [d]
0140   04E1 74            mov d, b
0141   04E2 32            mov bl, [d]
0142   04E3 A7 00         mov bh, 0
0143   04E5             ; START RELATIONAL
0144   04E5 D7            push a
0145   04E6 11            mov a, b
0146   04E7 FA 07 00      lea d, [bp + 7] ; $s2
0147   04EA 2A            mov b, [d]
0148   04EB 74            mov d, b
0149   04EC 32            mov bl, [d]
0150   04ED A7 00         mov bh, 0
0151   04EF B0            cmp a, b
0152   04F0 FD 71         seq ; ==
0153   04F2 E4            pop a
0154   04F3             ; END RELATIONAL
0155   04F3 FD A7         sand a, b
0156   04F5 E4            pop a
0157   04F6             ; END LOGICAL AND
0158   04F6 C0 00 00      cmp b, 0
0159   04F9 C6 19 05      je _while2_exit
0160   04FC             _while2_block:
0161   04FC             ;; s1++; 
0162   04FC FA 05 00      lea d, [bp + 5] ; $s1
0163   04FF 2A            mov b, [d]
0164   0500 FD 77         inc b
0165   0502 FA 05 00      lea d, [bp + 5] ; $s1
0166   0505 FD 43         mov [d], b
0167   0507 FD 7D         dec b
0168   0509             ;; s2++; 
0169   0509 FA 07 00      lea d, [bp + 7] ; $s2
0170   050C 2A            mov b, [d]
0171   050D FD 77         inc b
0172   050F FA 07 00      lea d, [bp + 7] ; $s2
0173   0512 FD 43         mov [d], b
0174   0514 FD 7D         dec b
0175   0516 0A D3 04      jmp _while2_cond
0176   0519             _while2_exit:
0177   0519             ;; return *s1 - *s2; 
0178   0519 FA 05 00      lea d, [bp + 5] ; $s1
0179   051C 2A            mov b, [d]
0180   051D 74            mov d, b
0181   051E 32            mov bl, [d]
0182   051F A7 00         mov bh, 0
0183   0521             ; START TERMS
0184   0521 D7            push a
0185   0522 11            mov a, b
0186   0523 FA 07 00      lea d, [bp + 7] ; $s2
0187   0526 2A            mov b, [d]
0188   0527 74            mov d, b
0189   0528 32            mov bl, [d]
0190   0529 A7 00         mov bh, 0
0191   052B 60            sub a, b
0192   052C 27            mov b, a
0193   052D E4            pop a
0194   052E             ; END TERMS
0195   052E F9            leave
0196   052F 09            ret
0197   0530             
0198   0530             strncmp:
0199   0530 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0200   0533 F9            leave
0201   0534 09            ret
0202   0535             
0203   0535             strcat:
0204   0535 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0205   0538             ;; int dest_len; 
0206   0538 52 02 00      sub sp, 2 ; dest_len
0207   053B             ;; int i; 
0208   053B 52 02 00      sub sp, 2 ; i
0209   053E             ;; dest_len = strlen(dest); 
0210   053E FA FF FF      lea d, [bp + -1] ; $dest_len
0211   0541 DA            push d
0212   0542 FA 05 00      lea d, [bp + 5] ; $dest
0213   0545 2A            mov b, [d]
0214   0546 FD AB         swp b
0215   0548 D8            push b
0216   0549 07 EB 05      call strlen
0217   054C 51 02 00      add sp, 2
0218   054F E7            pop d
0219   0550 FD 43         mov [d], b
0220   0552             ;; for (i = 0; src[i] != 0; i=i+1) { 
0221   0552             _for3_init:
0222   0552 FA FD FF      lea d, [bp + -3] ; $i
0223   0555 DA            push d
0224   0556 26 00 00      mov b, $0
0225   0559 E7            pop d
0226   055A FD 43         mov [d], b
0227   055C             _for3_cond:
0228   055C FA 07 00      lea d, [bp + 7] ; $src
0229   055F FD 2A         mov d, [d]
0230   0561 D7            push a
0231   0562 DA            push d
0232   0563 FA FD FF      lea d, [bp + -3] ; $i
0233   0566 2A            mov b, [d]
0234   0567 E7            pop d
0235   0568 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0236   056C E4            pop a
0237   056D 32            mov bl, [d]
0238   056E A7 00         mov bh, 0
0239   0570             ; START RELATIONAL
0240   0570 D7            push a
0241   0571 11            mov a, b
0242   0572 26 00 00      mov b, $0
0243   0575 B0            cmp a, b
0244   0576 FD 72         sneq ; !=
0245   0578 E4            pop a
0246   0579             ; END RELATIONAL
0247   0579 C0 00 00      cmp b, 0
0248   057C C6 C5 05      je _for3_exit
0249   057F             _for3_block:
0250   057F             ;; dest[dest_len + i] = src[i]; 
0251   057F FA 05 00      lea d, [bp + 5] ; $dest
0252   0582 FD 2A         mov d, [d]
0253   0584 D7            push a
0254   0585 DA            push d
0255   0586 FA FF FF      lea d, [bp + -1] ; $dest_len
0256   0589 2A            mov b, [d]
0257   058A             ; START TERMS
0258   058A D7            push a
0259   058B 11            mov a, b
0260   058C FA FD FF      lea d, [bp + -3] ; $i
0261   058F 2A            mov b, [d]
0262   0590 56            add b, a
0263   0591 E4            pop a
0264   0592             ; END TERMS
0265   0592 E7            pop d
0266   0593 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0267   0597 E4            pop a
0268   0598 DA            push d
0269   0599 FA 07 00      lea d, [bp + 7] ; $src
0270   059C FD 2A         mov d, [d]
0271   059E D7            push a
0272   059F DA            push d
0273   05A0 FA FD FF      lea d, [bp + -3] ; $i
0274   05A3 2A            mov b, [d]
0275   05A4 E7            pop d
0276   05A5 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0277   05A9 E4            pop a
0278   05AA 32            mov bl, [d]
0279   05AB A7 00         mov bh, 0
0280   05AD E7            pop d
0281   05AE FD 3E         mov [d], bl
0282   05B0             _for3_update:
0283   05B0 FA FD FF      lea d, [bp + -3] ; $i
0284   05B3 DA            push d
0285   05B4 FA FD FF      lea d, [bp + -3] ; $i
0286   05B7 2A            mov b, [d]
0287   05B8             ; START TERMS
0288   05B8 D7            push a
0289   05B9 11            mov a, b
0290   05BA 26 01 00      mov b, $1
0291   05BD 56            add b, a
0292   05BE E4            pop a
0293   05BF             ; END TERMS
0294   05BF E7            pop d
0295   05C0 FD 43         mov [d], b
0296   05C2 0A 5C 05      jmp _for3_cond
0297   05C5             _for3_exit:
0298   05C5             ;; dest[dest_len + i] = 0; 
0299   05C5 FA 05 00      lea d, [bp + 5] ; $dest
0300   05C8 FD 2A         mov d, [d]
0301   05CA D7            push a
0302   05CB DA            push d
0303   05CC FA FF FF      lea d, [bp + -1] ; $dest_len
0304   05CF 2A            mov b, [d]
0305   05D0             ; START TERMS
0306   05D0 D7            push a
0307   05D1 11            mov a, b
0308   05D2 FA FD FF      lea d, [bp + -3] ; $i
0309   05D5 2A            mov b, [d]
0310   05D6 56            add b, a
0311   05D7 E4            pop a
0312   05D8             ; END TERMS
0313   05D8 E7            pop d
0314   05D9 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0315   05DD E4            pop a
0316   05DE DA            push d
0317   05DF 26 00 00      mov b, $0
0318   05E2 E7            pop d
0319   05E3 FD 3E         mov [d], bl
0320   05E5             ;; return dest; 
0321   05E5 FA 05 00      lea d, [bp + 5] ; $dest
0322   05E8 2A            mov b, [d]
0323   05E9 F9            leave
0324   05EA 09            ret
0325   05EB             
0326   05EB             strlen:
0327   05EB F8 00 00      enter 0 ; (push bp; mov bp, sp)
0328   05EE             ;; int length; 
0329   05EE 52 02 00      sub sp, 2 ; length
0330   05F1             ;; length = 0; 
0331   05F1 FA FF FF      lea d, [bp + -1] ; $length
0332   05F4 DA            push d
0333   05F5 26 00 00      mov b, $0
0334   05F8 E7            pop d
0335   05F9 FD 43         mov [d], b
0336   05FB             ;; while (str[length] != 0) { 
0337   05FB             _while4_cond:
0338   05FB FA 05 00      lea d, [bp + 5] ; $str
0339   05FE FD 2A         mov d, [d]
0340   0600 D7            push a
0341   0601 DA            push d
0342   0602 FA FF FF      lea d, [bp + -1] ; $length
0343   0605 2A            mov b, [d]
0344   0606 E7            pop d
0345   0607 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0346   060B E4            pop a
0347   060C 32            mov bl, [d]
0348   060D A7 00         mov bh, 0
0349   060F             ; START RELATIONAL
0350   060F D7            push a
0351   0610 11            mov a, b
0352   0611 26 00 00      mov b, $0
0353   0614 B0            cmp a, b
0354   0615 FD 72         sneq ; !=
0355   0617 E4            pop a
0356   0618             ; END RELATIONAL
0357   0618 C0 00 00      cmp b, 0
0358   061B C6 2E 06      je _while4_exit
0359   061E             _while4_block:
0360   061E             ;; length++; 
0361   061E FA FF FF      lea d, [bp + -1] ; $length
0362   0621 2A            mov b, [d]
0363   0622 FD 77         inc b
0364   0624 FA FF FF      lea d, [bp + -1] ; $length
0365   0627 FD 43         mov [d], b
0366   0629 FD 7D         dec b
0367   062B 0A FB 05      jmp _while4_cond
0368   062E             _while4_exit:
0369   062E             ;; return length; 
0370   062E FA FF FF      lea d, [bp + -1] ; $length
0371   0631 2A            mov b, [d]
0372   0632 F9            leave
0373   0633 09            ret
0374   0634             
0375   0634             exit:
0376   0634 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0377   0637             
0378   0637             ; --- BEGIN INLINE ASM BLOCK
0379   0637 05 0B         syscall sys_terminate_proc
0380   0639             ; --- END INLINE ASM BLOCK
0381   0639             
0382   0639 F9            leave
0383   063A 09            ret
0384   063B             
0385   063B             memset:
0386   063B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0387   063E             ;; int i; 
0388   063E 52 02 00      sub sp, 2 ; i
0389   0641             ;; for(i = 0; i < size; i++){ 
0390   0641             _for5_init:
0391   0641 FA FF FF      lea d, [bp + -1] ; $i
0392   0644 DA            push d
0393   0645 26 00 00      mov b, $0
0394   0648 E7            pop d
0395   0649 FD 43         mov [d], b
0396   064B             _for5_cond:
0397   064B FA FF FF      lea d, [bp + -1] ; $i
0398   064E 2A            mov b, [d]
0399   064F             ; START RELATIONAL
0400   064F D7            push a
0401   0650 11            mov a, b
0402   0651 FA 08 00      lea d, [bp + 8] ; $size
0403   0654 2A            mov b, [d]
0404   0655 B0            cmp a, b
0405   0656 FD 73         slt ; < (signed)
0406   0658 E4            pop a
0407   0659             ; END RELATIONAL
0408   0659 C0 00 00      cmp b, 0
0409   065C C6 85 06      je _for5_exit
0410   065F             _for5_block:
0411   065F             ;; *(s+i) = c; 
0412   065F FA 05 00      lea d, [bp + 5] ; $s
0413   0662 2A            mov b, [d]
0414   0663             ; START TERMS
0415   0663 D7            push a
0416   0664 11            mov a, b
0417   0665 FA FF FF      lea d, [bp + -1] ; $i
0418   0668 2A            mov b, [d]
0419   0669 56            add b, a
0420   066A E4            pop a
0421   066B             ; END TERMS
0422   066B D8            push b
0423   066C FA 07 00      lea d, [bp + 7] ; $c
0424   066F 32            mov bl, [d]
0425   0670 A7 00         mov bh, 0
0426   0672 E7            pop d
0427   0673 FD 3E         mov [d], bl
0428   0675             _for5_update:
0429   0675 FA FF FF      lea d, [bp + -1] ; $i
0430   0678 2A            mov b, [d]
0431   0679 FD 77         inc b
0432   067B FA FF FF      lea d, [bp + -1] ; $i
0433   067E FD 43         mov [d], b
0434   0680 FD 7D         dec b
0435   0682 0A 4B 06      jmp _for5_cond
0436   0685             _for5_exit:
0437   0685             ;; return s; 
0438   0685 FA 05 00      lea d, [bp + 5] ; $s
0439   0688 2A            mov b, [d]
0440   0689 F9            leave
0441   068A 09            ret
0442   068B             
0443   068B             atoi:
0444   068B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0445   068E             ;; int result = 0;  // Initialize result 
0446   068E 52 02 00      sub sp, 2 ; result
0447   0691             ; --- START LOCAL VAR INITIALIZATION
0448   0691 FA FF FF      lea d, [bp + -1] ; $result
0449   0694 DA            push d
0450   0695 26 00 00      mov b, $0
0451   0698 E7            pop d
0452   0699 FD 43         mov [d], b
0453   069B             ; --- END LOCAL VAR INITIALIZATION
0454   069B             ;; int sign = 1;    // Initialize sign as positive 
0455   069B 52 02 00      sub sp, 2 ; sign
0456   069E             ; --- START LOCAL VAR INITIALIZATION
0457   069E FA FD FF      lea d, [bp + -3] ; $sign
0458   06A1 DA            push d
0459   06A2 26 01 00      mov b, $1
0460   06A5 E7            pop d
0461   06A6 FD 43         mov [d], b
0462   06A8             ; --- END LOCAL VAR INITIALIZATION
0463   06A8             ;; while (*str == ' ') str++; 
0464   06A8             _while6_cond:
0465   06A8 FA 05 00      lea d, [bp + 5] ; $str
0466   06AB 2A            mov b, [d]
0467   06AC 74            mov d, b
0468   06AD 32            mov bl, [d]
0469   06AE A7 00         mov bh, 0
0470   06B0             ; START RELATIONAL
0471   06B0 D7            push a
0472   06B1 11            mov a, b
0473   06B2 26 20 00      mov b, $20
0474   06B5 B0            cmp a, b
0475   06B6 FD 71         seq ; ==
0476   06B8 E4            pop a
0477   06B9             ; END RELATIONAL
0478   06B9 C0 00 00      cmp b, 0
0479   06BC C6 CF 06      je _while6_exit
0480   06BF             _while6_block:
0481   06BF             ;; str++; 
0482   06BF FA 05 00      lea d, [bp + 5] ; $str
0483   06C2 2A            mov b, [d]
0484   06C3 FD 77         inc b
0485   06C5 FA 05 00      lea d, [bp + 5] ; $str
0486   06C8 FD 43         mov [d], b
0487   06CA FD 7D         dec b
0488   06CC 0A A8 06      jmp _while6_cond
0489   06CF             _while6_exit:
0490   06CF             ;; if (*str == '-' || *str == '+') { 
0491   06CF             _if7_cond:
0492   06CF FA 05 00      lea d, [bp + 5] ; $str
0493   06D2 2A            mov b, [d]
0494   06D3 74            mov d, b
0495   06D4 32            mov bl, [d]
0496   06D5 A7 00         mov bh, 0
0497   06D7             ; START RELATIONAL
0498   06D7 D7            push a
0499   06D8 11            mov a, b
0500   06D9 26 2D 00      mov b, $2d
0501   06DC B0            cmp a, b
0502   06DD FD 71         seq ; ==
0503   06DF E4            pop a
0504   06E0             ; END RELATIONAL
0505   06E0             ; START LOGICAL OR
0506   06E0 D7            push a
0507   06E1 11            mov a, b
0508   06E2 FA 05 00      lea d, [bp + 5] ; $str
0509   06E5 2A            mov b, [d]
0510   06E6 74            mov d, b
0511   06E7 32            mov bl, [d]
0512   06E8 A7 00         mov bh, 0
0513   06EA             ; START RELATIONAL
0514   06EA D7            push a
0515   06EB 11            mov a, b
0516   06EC 26 2B 00      mov b, $2b
0517   06EF B0            cmp a, b
0518   06F0 FD 71         seq ; ==
0519   06F2 E4            pop a
0520   06F3             ; END RELATIONAL
0521   06F3 FD A8         sor a, b ; ||
0522   06F5 E4            pop a
0523   06F6             ; END LOGICAL OR
0524   06F6 C0 00 00      cmp b, 0
0525   06F9 C6 32 07      je _if7_exit
0526   06FC             _if7_true:
0527   06FC             ;; if (*str == '-') sign = -1; 
0528   06FC             _if8_cond:
0529   06FC FA 05 00      lea d, [bp + 5] ; $str
0530   06FF 2A            mov b, [d]
0531   0700 74            mov d, b
0532   0701 32            mov bl, [d]
0533   0702 A7 00         mov bh, 0
0534   0704             ; START RELATIONAL
0535   0704 D7            push a
0536   0705 11            mov a, b
0537   0706 26 2D 00      mov b, $2d
0538   0709 B0            cmp a, b
0539   070A FD 71         seq ; ==
0540   070C E4            pop a
0541   070D             ; END RELATIONAL
0542   070D C0 00 00      cmp b, 0
0543   0710 C6 22 07      je _if8_exit
0544   0713             _if8_true:
0545   0713             ;; sign = -1; 
0546   0713 FA FD FF      lea d, [bp + -3] ; $sign
0547   0716 DA            push d
0548   0717 26 01 00      mov b, $1
0549   071A FD 97         neg b
0550   071C E7            pop d
0551   071D FD 43         mov [d], b
0552   071F 0A 22 07      jmp _if8_exit
0553   0722             _if8_exit:
0554   0722             ;; str++; 
0555   0722 FA 05 00      lea d, [bp + 5] ; $str
0556   0725 2A            mov b, [d]
0557   0726 FD 77         inc b
0558   0728 FA 05 00      lea d, [bp + 5] ; $str
0559   072B FD 43         mov [d], b
0560   072D FD 7D         dec b
0561   072F 0A 32 07      jmp _if7_exit
0562   0732             _if7_exit:
0563   0732             ;; while (*str >= '0' && *str <= '9') { 
0564   0732             _while9_cond:
0565   0732 FA 05 00      lea d, [bp + 5] ; $str
0566   0735 2A            mov b, [d]
0567   0736 74            mov d, b
0568   0737 32            mov bl, [d]
0569   0738 A7 00         mov bh, 0
0570   073A             ; START RELATIONAL
0571   073A D7            push a
0572   073B 11            mov a, b
0573   073C 26 30 00      mov b, $30
0574   073F B0            cmp a, b
0575   0740 FD 82         sgeu ; >= (unsigned)
0576   0742 E4            pop a
0577   0743             ; END RELATIONAL
0578   0743             ; START LOGICAL AND
0579   0743 D7            push a
0580   0744 11            mov a, b
0581   0745 FA 05 00      lea d, [bp + 5] ; $str
0582   0748 2A            mov b, [d]
0583   0749 74            mov d, b
0584   074A 32            mov bl, [d]
0585   074B A7 00         mov bh, 0
0586   074D             ; START RELATIONAL
0587   074D D7            push a
0588   074E 11            mov a, b
0589   074F 26 39 00      mov b, $39
0590   0752 B0            cmp a, b
0591   0753 FD 76         sleu ; <= (unsigned)
0592   0755 E4            pop a
0593   0756             ; END RELATIONAL
0594   0756 FD A7         sand a, b
0595   0758 E4            pop a
0596   0759             ; END LOGICAL AND
0597   0759 C0 00 00      cmp b, 0
0598   075C C6 97 07      je _while9_exit
0599   075F             _while9_block:
0600   075F             ;; result = result * 10 + (*str - '0'); 
0601   075F FA FF FF      lea d, [bp + -1] ; $result
0602   0762 DA            push d
0603   0763 FA FF FF      lea d, [bp + -1] ; $result
0604   0766 2A            mov b, [d]
0605   0767             ; START FACTORS
0606   0767 D7            push a
0607   0768 11            mov a, b
0608   0769 26 0A 00      mov b, $a
0609   076C AC            mul a, b ; *
0610   076D 11            mov a, b
0611   076E 27            mov b, a
0612   076F E4            pop a
0613   0770             ; END FACTORS
0614   0770             ; START TERMS
0615   0770 D7            push a
0616   0771 11            mov a, b
0617   0772 FA 05 00      lea d, [bp + 5] ; $str
0618   0775 2A            mov b, [d]
0619   0776 74            mov d, b
0620   0777 32            mov bl, [d]
0621   0778 A7 00         mov bh, 0
0622   077A             ; START TERMS
0623   077A D7            push a
0624   077B 11            mov a, b
0625   077C 26 30 00      mov b, $30
0626   077F 60            sub a, b
0627   0780 27            mov b, a
0628   0781 E4            pop a
0629   0782             ; END TERMS
0630   0782 56            add b, a
0631   0783 E4            pop a
0632   0784             ; END TERMS
0633   0784 E7            pop d
0634   0785 FD 43         mov [d], b
0635   0787             ;; str++; 
0636   0787 FA 05 00      lea d, [bp + 5] ; $str
0637   078A 2A            mov b, [d]
0638   078B FD 77         inc b
0639   078D FA 05 00      lea d, [bp + 5] ; $str
0640   0790 FD 43         mov [d], b
0641   0792 FD 7D         dec b
0642   0794 0A 32 07      jmp _while9_cond
0643   0797             _while9_exit:
0644   0797             ;; return sign * result; 
0645   0797 FA FD FF      lea d, [bp + -3] ; $sign
0646   079A 2A            mov b, [d]
0647   079B             ; START FACTORS
0648   079B D7            push a
0649   079C 11            mov a, b
0650   079D FA FF FF      lea d, [bp + -1] ; $result
0651   07A0 2A            mov b, [d]
0652   07A1 AC            mul a, b ; *
0653   07A2 11            mov a, b
0654   07A3 27            mov b, a
0655   07A4 E4            pop a
0656   07A5             ; END FACTORS
0657   07A5 F9            leave
0658   07A6 09            ret
0659   07A7             
0660   07A7             rand:
0661   07A7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0662   07AA             ;; int  sec; 
0663   07AA 52 02 00      sub sp, 2 ; sec
0664   07AD             
0665   07AD             ; --- BEGIN INLINE ASM BLOCK
0666   07AD 19 00         mov al, 0
0667   07AF 05 01         syscall sys_rtc					
0668   07B1 1A            mov al, ah
0669   07B2 FA FF FF      lea d, [bp + -1] ; $sec
0670   07B5 1E            mov al, [d]
0671   07B6 22 00         mov ah, 0
0672   07B8             ; --- END INLINE ASM BLOCK
0673   07B8             
0674   07B8             ;; return sec; 
0675   07B8 FA FF FF      lea d, [bp + -1] ; $sec
0676   07BB 2A            mov b, [d]
0677   07BC F9            leave
0678   07BD 09            ret
0679   07BE             
0680   07BE             alloc:
0681   07BE F8 00 00      enter 0 ; (push bp; mov bp, sp)
0682   07C1             ;; heap_top = heap_top + bytes; 
0683   07C1 3B 09 1D      mov d, _heap_top ; $heap_top
0684   07C4 DA            push d
0685   07C5 3B 09 1D      mov d, _heap_top ; $heap_top
0686   07C8 2A            mov b, [d]
0687   07C9             ; START TERMS
0688   07C9 D7            push a
0689   07CA 11            mov a, b
0690   07CB FA 05 00      lea d, [bp + 5] ; $bytes
0691   07CE 2A            mov b, [d]
0692   07CF 56            add b, a
0693   07D0 E4            pop a
0694   07D1             ; END TERMS
0695   07D1 E7            pop d
0696   07D2 FD 43         mov [d], b
0697   07D4             ;; return heap_top - bytes; 
0698   07D4 3B 09 1D      mov d, _heap_top ; $heap_top
0699   07D7 2A            mov b, [d]
0700   07D8             ; START TERMS
0701   07D8 D7            push a
0702   07D9 11            mov a, b
0703   07DA FA 05 00      lea d, [bp + 5] ; $bytes
0704   07DD 2A            mov b, [d]
0705   07DE 60            sub a, b
0706   07DF 27            mov b, a
0707   07E0 E4            pop a
0708   07E1             ; END TERMS
0709   07E1 F9            leave
0710   07E2 09            ret
0711   07E3             
0712   07E3             free:
0713   07E3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0714   07E6             ;; return heap_top = heap_top - bytes; 
0715   07E6 3B 09 1D      mov d, _heap_top ; $heap_top
0716   07E9 DA            push d
0717   07EA 3B 09 1D      mov d, _heap_top ; $heap_top
0718   07ED 2A            mov b, [d]
0719   07EE             ; START TERMS
0720   07EE D7            push a
0721   07EF 11            mov a, b
0722   07F0 FA 05 00      lea d, [bp + 5] ; $bytes
0723   07F3 2A            mov b, [d]
0724   07F4 60            sub a, b
0725   07F5 27            mov b, a
0726   07F6 E4            pop a
0727   07F7             ; END TERMS
0728   07F7 E7            pop d
0729   07F8 FD 43         mov [d], b
0730   07FA F9            leave
0731   07FB 09            ret
0732   07FC             
0733   07FC             fopen:
0734   07FC F8 00 00      enter 0 ; (push bp; mov bp, sp)
0735   07FF             ;; FILE *fp; 
0736   07FF 52 02 00      sub sp, 2 ; fp
0737   0802             ;; fp = alloc(sizeof(int)); 
0738   0802 FA FF FF      lea d, [bp + -1] ; $fp
0739   0805 DA            push d
0740   0806 26 02 00      mov b, 2
0741   0809 FD AB         swp b
0742   080B D8            push b
0743   080C 07 BE 07      call alloc
0744   080F 51 02 00      add sp, 2
0745   0812 E7            pop d
0746   0813 FD 43         mov [d], b
0747   0815 F9            leave
0748   0816 09            ret
0749   0817             
0750   0817             printf:
0751   0817 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0752   081A             ;; char *p, *format_p; 
0753   081A 52 02 00      sub sp, 2 ; p
0754   081D 52 02 00      sub sp, 2 ; format_p
0755   0820             ;; format_p = format; 
0756   0820 FA FD FF      lea d, [bp + -3] ; $format_p
0757   0823 DA            push d
0758   0824 FA 05 00      lea d, [bp + 5] ; $format
0759   0827 2A            mov b, [d]
0760   0828 E7            pop d
0761   0829 FD 43         mov [d], b
0762   082B             ;; p = &format + 2; 
0763   082B FA FF FF      lea d, [bp + -1] ; $p
0764   082E DA            push d
0765   082F FA 05 00      lea d, [bp + 5] ; $format
0766   0832 2D            mov b, d
0767   0833             ; START TERMS
0768   0833 D7            push a
0769   0834 11            mov a, b
0770   0835 26 02 00      mov b, $2
0771   0838 56            add b, a
0772   0839 E4            pop a
0773   083A             ; END TERMS
0774   083A E7            pop d
0775   083B FD 43         mov [d], b
0776   083D             ;; for(;;){ 
0777   083D             _for10_init:
0778   083D             _for10_cond:
0779   083D             _for10_block:
0780   083D             ;; if(!*format_p) break; 
0781   083D             _if11_cond:
0782   083D FA FD FF      lea d, [bp + -3] ; $format_p
0783   0840 2A            mov b, [d]
0784   0841 74            mov d, b
0785   0842 32            mov bl, [d]
0786   0843 A7 00         mov bh, 0
0787   0845 C0 00 00      cmp b, 0
0788   0848 FD 71         seq ; !
0789   084A C0 00 00      cmp b, 0
0790   084D C6 56 08      je _if11_else
0791   0850             _if11_true:
0792   0850             ;; break; 
0793   0850 0A 7D 0A      jmp _for10_exit ; for break
0794   0853 0A 7A 0A      jmp _if11_exit
0795   0856             _if11_else:
0796   0856             ;; if(*format_p == '%'){ 
0797   0856             _if12_cond:
0798   0856 FA FD FF      lea d, [bp + -3] ; $format_p
0799   0859 2A            mov b, [d]
0800   085A 74            mov d, b
0801   085B 32            mov bl, [d]
0802   085C A7 00         mov bh, 0
0803   085E             ; START RELATIONAL
0804   085E D7            push a
0805   085F 11            mov a, b
0806   0860 26 25 00      mov b, $25
0807   0863 B0            cmp a, b
0808   0864 FD 71         seq ; ==
0809   0866 E4            pop a
0810   0867             ; END RELATIONAL
0811   0867 C0 00 00      cmp b, 0
0812   086A C6 5E 0A      je _if12_else
0813   086D             _if12_true:
0814   086D             ;; format_p++; 
0815   086D FA FD FF      lea d, [bp + -3] ; $format_p
0816   0870 2A            mov b, [d]
0817   0871 FD 77         inc b
0818   0873 FA FD FF      lea d, [bp + -3] ; $format_p
0819   0876 FD 43         mov [d], b
0820   0878 FD 7D         dec b
0821   087A             ;; switch(*format_p){ 
0822   087A             _switch13_expr:
0823   087A FA FD FF      lea d, [bp + -3] ; $format_p
0824   087D 2A            mov b, [d]
0825   087E 74            mov d, b
0826   087F 32            mov bl, [d]
0827   0880 A7 00         mov bh, 0
0828   0882             _switch13_comparisons:
0829   0882 C1 6C         cmp bl, $6c
0830   0884 C6 B0 08      je _switch13_case0
0831   0887 C1 4C         cmp bl, $4c
0832   0889 C6 B0 08      je _switch13_case1
0833   088C C1 64         cmp bl, $64
0834   088E C6 9E 09      je _switch13_case2
0835   0891 C1 69         cmp bl, $69
0836   0893 C6 9E 09      je _switch13_case3
0837   0896 C1 75         cmp bl, $75
0838   0898 C6 C2 09      je _switch13_case4
0839   089B C1 78         cmp bl, $78
0840   089D C6 E6 09      je _switch13_case5
0841   08A0 C1 63         cmp bl, $63
0842   08A2 C6 04 0A      je _switch13_case6
0843   08A5 C1 73         cmp bl, $73
0844   08A7 C6 23 0A      je _switch13_case7
0845   08AA 0A 42 0A      jmp _switch13_default
0846   08AD 0A 4E 0A      jmp _switch13_exit
0847   08B0             _switch13_case0:
0848   08B0             _switch13_case1:
0849   08B0             ;; format_p++; 
0850   08B0 FA FD FF      lea d, [bp + -3] ; $format_p
0851   08B3 2A            mov b, [d]
0852   08B4 FD 77         inc b
0853   08B6 FA FD FF      lea d, [bp + -3] ; $format_p
0854   08B9 FD 43         mov [d], b
0855   08BB FD 7D         dec b
0856   08BD             ;; if(*format_p == 'd' || *format_p == 'i') 
0857   08BD             _if14_cond:
0858   08BD FA FD FF      lea d, [bp + -3] ; $format_p
0859   08C0 2A            mov b, [d]
0860   08C1 74            mov d, b
0861   08C2 32            mov bl, [d]
0862   08C3 A7 00         mov bh, 0
0863   08C5             ; START RELATIONAL
0864   08C5 D7            push a
0865   08C6 11            mov a, b
0866   08C7 26 64 00      mov b, $64
0867   08CA B0            cmp a, b
0868   08CB FD 71         seq ; ==
0869   08CD E4            pop a
0870   08CE             ; END RELATIONAL
0871   08CE             ; START LOGICAL OR
0872   08CE D7            push a
0873   08CF 11            mov a, b
0874   08D0 FA FD FF      lea d, [bp + -3] ; $format_p
0875   08D3 2A            mov b, [d]
0876   08D4 74            mov d, b
0877   08D5 32            mov bl, [d]
0878   08D6 A7 00         mov bh, 0
0879   08D8             ; START RELATIONAL
0880   08D8 D7            push a
0881   08D9 11            mov a, b
0882   08DA 26 69 00      mov b, $69
0883   08DD B0            cmp a, b
0884   08DE FD 71         seq ; ==
0885   08E0 E4            pop a
0886   08E1             ; END RELATIONAL
0887   08E1 FD A8         sor a, b ; ||
0888   08E3 E4            pop a
0889   08E4             ; END LOGICAL OR
0890   08E4 C0 00 00      cmp b, 0
0891   08E7 C6 0C 09      je _if14_else
0892   08EA             _if14_true:
0893   08EA             ;; print_signed_long(*(long *)p); 
0894   08EA FA FF FF      lea d, [bp + -1] ; $p
0895   08ED 2A            mov b, [d]
0896   08EE AB            snex b
0897   08EF FD 39         mov c, b
0898   08F1 74            mov d, b
0899   08F2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0900   08F5 FD 39         mov c, b ; And place it into C
0901   08F7 2A            mov b, [d] ; Lower Word in B
0902   08F8 FD 79         mov g, b
0903   08FA 28            mov b, c
0904   08FB FD AB         swp b
0905   08FD D8            push b
0906   08FE FD 27         mov b, g
0907   0900 FD AB         swp b
0908   0902 D8            push b
0909   0903 07 63 0F      call print_signed_long
0910   0906 51 04 00      add sp, 4
0911   0909 0A 89 09      jmp _if14_exit
0912   090C             _if14_else:
0913   090C             ;; if(*format_p == 'u') 
0914   090C             _if15_cond:
0915   090C FA FD FF      lea d, [bp + -3] ; $format_p
0916   090F 2A            mov b, [d]
0917   0910 74            mov d, b
0918   0911 32            mov bl, [d]
0919   0912 A7 00         mov bh, 0
0920   0914             ; START RELATIONAL
0921   0914 D7            push a
0922   0915 11            mov a, b
0923   0916 26 75 00      mov b, $75
0924   0919 B0            cmp a, b
0925   091A FD 71         seq ; ==
0926   091C E4            pop a
0927   091D             ; END RELATIONAL
0928   091D C0 00 00      cmp b, 0
0929   0920 C6 47 09      je _if15_else
0930   0923             _if15_true:
0931   0923             ;; print_unsigned_long(*(unsigned long *)p); 
0932   0923 FA FF FF      lea d, [bp + -1] ; $p
0933   0926 2A            mov b, [d]
0934   0927 A7 00         mov bh, 0
0935   0929 38 00 00      mov c, 0
0936   092C 74            mov d, b
0937   092D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0938   0930 FD 39         mov c, b ; And place it into C
0939   0932 2A            mov b, [d] ; Lower Word in B
0940   0933 FD 79         mov g, b
0941   0935 28            mov b, c
0942   0936 FD AB         swp b
0943   0938 D8            push b
0944   0939 FD 27         mov b, g
0945   093B FD AB         swp b
0946   093D D8            push b
0947   093E 07 A3 12      call print_unsigned_long
0948   0941 51 04 00      add sp, 4
0949   0944 0A 89 09      jmp _if15_exit
0950   0947             _if15_else:
0951   0947             ;; if(*format_p == 'x') 
0952   0947             _if16_cond:
0953   0947 FA FD FF      lea d, [bp + -3] ; $format_p
0954   094A 2A            mov b, [d]
0955   094B 74            mov d, b
0956   094C 32            mov bl, [d]
0957   094D A7 00         mov bh, 0
0958   094F             ; START RELATIONAL
0959   094F D7            push a
0960   0950 11            mov a, b
0961   0951 26 78 00      mov b, $78
0962   0954 B0            cmp a, b
0963   0955 FD 71         seq ; ==
0964   0957 E4            pop a
0965   0958             ; END RELATIONAL
0966   0958 C0 00 00      cmp b, 0
0967   095B C6 7D 09      je _if16_else
0968   095E             _if16_true:
0969   095E             ;; printx32(*(long int *)p); 
0970   095E FA FF FF      lea d, [bp + -1] ; $p
0971   0961 2A            mov b, [d]
0972   0962 74            mov d, b
0973   0963 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0974   0966 FD 39         mov c, b ; And place it into C
0975   0968 2A            mov b, [d] ; Lower Word in B
0976   0969 FD 79         mov g, b
0977   096B 28            mov b, c
0978   096C FD AB         swp b
0979   096E D8            push b
0980   096F FD 27         mov b, g
0981   0971 FD AB         swp b
0982   0973 D8            push b
0983   0974 07 D8 0C      call printx32
0984   0977 51 04 00      add sp, 4
0985   097A 0A 89 09      jmp _if16_exit
0986   097D             _if16_else:
0987   097D             ;; err("Unexpected format in printf."); 
0988   097D 26 C5 1C      mov b, _s3 ; "Unexpected format in printf."
0989   0980 FD AB         swp b
0990   0982 D8            push b
0991   0983 07 C6 0C      call err
0992   0986 51 02 00      add sp, 2
0993   0989             _if16_exit:
0994   0989             _if15_exit:
0995   0989             _if14_exit:
0996   0989             ;; p = p + 4; 
0997   0989 FA FF FF      lea d, [bp + -1] ; $p
0998   098C DA            push d
0999   098D FA FF FF      lea d, [bp + -1] ; $p
1000   0990 2A            mov b, [d]
1001   0991             ; START TERMS
1002   0991 D7            push a
1003   0992 11            mov a, b
1004   0993 26 04 00      mov b, $4
1005   0996 56            add b, a
1006   0997 E4            pop a
1007   0998             ; END TERMS
1008   0998 E7            pop d
1009   0999 FD 43         mov [d], b
1010   099B             ;; break; 
1011   099B 0A 4E 0A      jmp _switch13_exit ; case break
1012   099E             _switch13_case2:
1013   099E             _switch13_case3:
1014   099E             ;; print_signed(*(int*)p); 
1015   099E FA FF FF      lea d, [bp + -1] ; $p
1016   09A1 2A            mov b, [d]
1017   09A2 74            mov d, b
1018   09A3 2A            mov b, [d]
1019   09A4 FD AB         swp b
1020   09A6 D8            push b
1021   09A7 07 6C 0E      call print_signed
1022   09AA 51 02 00      add sp, 2
1023   09AD             ;; p = p + 2; 
1024   09AD FA FF FF      lea d, [bp + -1] ; $p
1025   09B0 DA            push d
1026   09B1 FA FF FF      lea d, [bp + -1] ; $p
1027   09B4 2A            mov b, [d]
1028   09B5             ; START TERMS
1029   09B5 D7            push a
1030   09B6 11            mov a, b
1031   09B7 26 02 00      mov b, $2
1032   09BA 56            add b, a
1033   09BB E4            pop a
1034   09BC             ; END TERMS
1035   09BC E7            pop d
1036   09BD FD 43         mov [d], b
1037   09BF             ;; break; 
1038   09BF 0A 4E 0A      jmp _switch13_exit ; case break
1039   09C2             _switch13_case4:
1040   09C2             ;; print_unsigned(*(unsigned int*)p); 
1041   09C2 FA FF FF      lea d, [bp + -1] ; $p
1042   09C5 2A            mov b, [d]
1043   09C6 74            mov d, b
1044   09C7 2A            mov b, [d]
1045   09C8 FD AB         swp b
1046   09CA D8            push b
1047   09CB 07 9E 14      call print_unsigned
1048   09CE 51 02 00      add sp, 2
1049   09D1             ;; p = p + 2; 
1050   09D1 FA FF FF      lea d, [bp + -1] ; $p
1051   09D4 DA            push d
1052   09D5 FA FF FF      lea d, [bp + -1] ; $p
1053   09D8 2A            mov b, [d]
1054   09D9             ; START TERMS
1055   09D9 D7            push a
1056   09DA 11            mov a, b
1057   09DB 26 02 00      mov b, $2
1058   09DE 56            add b, a
1059   09DF E4            pop a
1060   09E0             ; END TERMS
1061   09E0 E7            pop d
1062   09E1 FD 43         mov [d], b
1063   09E3             ;; break; 
1064   09E3 0A 4E 0A      jmp _switch13_exit ; case break
1065   09E6             _switch13_case5:
1066   09E6             
1067   09E6             ; --- BEGIN INLINE ASM BLOCK
1068   09E6 FA FF FF      lea d, [bp + -1] ; $p
1069   09E9 FD 2A         mov d, [d]
1070   09EB 2A            mov b, [d]
1071   09EC 07 A4 18      call print_u16x
1072   09EF             ; --- END INLINE ASM BLOCK
1073   09EF             
1074   09EF             ;; p = p + 2; 
1075   09EF FA FF FF      lea d, [bp + -1] ; $p
1076   09F2 DA            push d
1077   09F3 FA FF FF      lea d, [bp + -1] ; $p
1078   09F6 2A            mov b, [d]
1079   09F7             ; START TERMS
1080   09F7 D7            push a
1081   09F8 11            mov a, b
1082   09F9 26 02 00      mov b, $2
1083   09FC 56            add b, a
1084   09FD E4            pop a
1085   09FE             ; END TERMS
1086   09FE E7            pop d
1087   09FF FD 43         mov [d], b
1088   0A01             ;; break; 
1089   0A01 0A 4E 0A      jmp _switch13_exit ; case break
1090   0A04             _switch13_case6:
1091   0A04             
1092   0A04             ; --- BEGIN INLINE ASM BLOCK
1093   0A04 FA FF FF      lea d, [bp + -1] ; $p
1094   0A07 FD 2A         mov d, [d]
1095   0A09 1E            mov al, [d]
1096   0A0A 23            mov ah, al
1097   0A0B 07 02 17      call _putchar
1098   0A0E             ; --- END INLINE ASM BLOCK
1099   0A0E             
1100   0A0E             ;; p = p + 2; 
1101   0A0E FA FF FF      lea d, [bp + -1] ; $p
1102   0A11 DA            push d
1103   0A12 FA FF FF      lea d, [bp + -1] ; $p
1104   0A15 2A            mov b, [d]
1105   0A16             ; START TERMS
1106   0A16 D7            push a
1107   0A17 11            mov a, b
1108   0A18 26 02 00      mov b, $2
1109   0A1B 56            add b, a
1110   0A1C E4            pop a
1111   0A1D             ; END TERMS
1112   0A1D E7            pop d
1113   0A1E FD 43         mov [d], b
1114   0A20             ;; break; 
1115   0A20 0A 4E 0A      jmp _switch13_exit ; case break
1116   0A23             _switch13_case7:
1117   0A23             
1118   0A23             ; --- BEGIN INLINE ASM BLOCK
1119   0A23 FA FF FF      lea d, [bp + -1] ; $p
1120   0A26 FD 2A         mov d, [d]
1121   0A28 FD 2A         mov d, [d]
1122   0A2A 07 4C 18      call _puts
1123   0A2D             ; --- END INLINE ASM BLOCK
1124   0A2D             
1125   0A2D             ;; p = p + 2; 
1126   0A2D FA FF FF      lea d, [bp + -1] ; $p
1127   0A30 DA            push d
1128   0A31 FA FF FF      lea d, [bp + -1] ; $p
1129   0A34 2A            mov b, [d]
1130   0A35             ; START TERMS
1131   0A35 D7            push a
1132   0A36 11            mov a, b
1133   0A37 26 02 00      mov b, $2
1134   0A3A 56            add b, a
1135   0A3B E4            pop a
1136   0A3C             ; END TERMS
1137   0A3C E7            pop d
1138   0A3D FD 43         mov [d], b
1139   0A3F             ;; break; 
1140   0A3F 0A 4E 0A      jmp _switch13_exit ; case break
1141   0A42             _switch13_default:
1142   0A42             ;; print("Error: Unknown argument type.\n"); 
1143   0A42 26 E2 1C      mov b, _s4 ; "Error: Unknown argument type.\n"
1144   0A45 FD AB         swp b
1145   0A47 D8            push b
1146   0A48 07 B9 15      call print
1147   0A4B 51 02 00      add sp, 2
1148   0A4E             _switch13_exit:
1149   0A4E             ;; format_p++; 
1150   0A4E FA FD FF      lea d, [bp + -3] ; $format_p
1151   0A51 2A            mov b, [d]
1152   0A52 FD 77         inc b
1153   0A54 FA FD FF      lea d, [bp + -3] ; $format_p
1154   0A57 FD 43         mov [d], b
1155   0A59 FD 7D         dec b
1156   0A5B 0A 7A 0A      jmp _if12_exit
1157   0A5E             _if12_else:
1158   0A5E             ;; putchar(*format_p); 
1159   0A5E FA FD FF      lea d, [bp + -3] ; $format_p
1160   0A61 2A            mov b, [d]
1161   0A62 74            mov d, b
1162   0A63 32            mov bl, [d]
1163   0A64 A7 00         mov bh, 0
1164   0A66 DD            push bl
1165   0A67 07 71 15      call putchar
1166   0A6A 51 01 00      add sp, 1
1167   0A6D             ;; format_p++; 
1168   0A6D FA FD FF      lea d, [bp + -3] ; $format_p
1169   0A70 2A            mov b, [d]
1170   0A71 FD 77         inc b
1171   0A73 FA FD FF      lea d, [bp + -3] ; $format_p
1172   0A76 FD 43         mov [d], b
1173   0A78 FD 7D         dec b
1174   0A7A             _if12_exit:
1175   0A7A             _if11_exit:
1176   0A7A             _for10_update:
1177   0A7A 0A 3D 08      jmp _for10_cond
1178   0A7D             _for10_exit:
1179   0A7D F9            leave
1180   0A7E 09            ret
1181   0A7F             
1182   0A7F             scanf:
1183   0A7F F8 00 00      enter 0 ; (push bp; mov bp, sp)
1184   0A82             ;; char *p, *format_p; 
1185   0A82 52 02 00      sub sp, 2 ; p
1186   0A85 52 02 00      sub sp, 2 ; format_p
1187   0A88             ;; char c; 
1188   0A88 52 01 00      sub sp, 1 ; c
1189   0A8B             ;; int i; 
1190   0A8B 52 02 00      sub sp, 2 ; i
1191   0A8E             ;; char input_string[  512                    ]; 
1192   0A8E 52 00 02      sub sp, 512 ; input_string
1193   0A91             ;; format_p = format; 
1194   0A91 FA FD FF      lea d, [bp + -3] ; $format_p
1195   0A94 DA            push d
1196   0A95 FA 05 00      lea d, [bp + 5] ; $format
1197   0A98 2A            mov b, [d]
1198   0A99 E7            pop d
1199   0A9A FD 43         mov [d], b
1200   0A9C             ;; p = &format + 2; 
1201   0A9C FA FF FF      lea d, [bp + -1] ; $p
1202   0A9F DA            push d
1203   0AA0 FA 05 00      lea d, [bp + 5] ; $format
1204   0AA3 2D            mov b, d
1205   0AA4             ; START TERMS
1206   0AA4 D7            push a
1207   0AA5 11            mov a, b
1208   0AA6 26 02 00      mov b, $2
1209   0AA9 56            add b, a
1210   0AAA E4            pop a
1211   0AAB             ; END TERMS
1212   0AAB E7            pop d
1213   0AAC FD 43         mov [d], b
1214   0AAE             ;; for(;;){ 
1215   0AAE             _for17_init:
1216   0AAE             _for17_cond:
1217   0AAE             _for17_block:
1218   0AAE             ;; if(!*format_p) break; 
1219   0AAE             _if18_cond:
1220   0AAE FA FD FF      lea d, [bp + -3] ; $format_p
1221   0AB1 2A            mov b, [d]
1222   0AB2 74            mov d, b
1223   0AB3 32            mov bl, [d]
1224   0AB4 A7 00         mov bh, 0
1225   0AB6 C0 00 00      cmp b, 0
1226   0AB9 FD 71         seq ; !
1227   0ABB C0 00 00      cmp b, 0
1228   0ABE C6 C7 0A      je _if18_else
1229   0AC1             _if18_true:
1230   0AC1             ;; break; 
1231   0AC1 0A C4 0C      jmp _for17_exit ; for break
1232   0AC4 0A C1 0C      jmp _if18_exit
1233   0AC7             _if18_else:
1234   0AC7             ;; if(*format_p == '%'){ 
1235   0AC7             _if19_cond:
1236   0AC7 FA FD FF      lea d, [bp + -3] ; $format_p
1237   0ACA 2A            mov b, [d]
1238   0ACB 74            mov d, b
1239   0ACC 32            mov bl, [d]
1240   0ACD A7 00         mov bh, 0
1241   0ACF             ; START RELATIONAL
1242   0ACF D7            push a
1243   0AD0 11            mov a, b
1244   0AD1 26 25 00      mov b, $25
1245   0AD4 B0            cmp a, b
1246   0AD5 FD 71         seq ; ==
1247   0AD7 E4            pop a
1248   0AD8             ; END RELATIONAL
1249   0AD8 C0 00 00      cmp b, 0
1250   0ADB C6 A5 0C      je _if19_else
1251   0ADE             _if19_true:
1252   0ADE             ;; format_p++; 
1253   0ADE FA FD FF      lea d, [bp + -3] ; $format_p
1254   0AE1 2A            mov b, [d]
1255   0AE2 FD 77         inc b
1256   0AE4 FA FD FF      lea d, [bp + -3] ; $format_p
1257   0AE7 FD 43         mov [d], b
1258   0AE9 FD 7D         dec b
1259   0AEB             ;; switch(*format_p){ 
1260   0AEB             _switch20_expr:
1261   0AEB FA FD FF      lea d, [bp + -3] ; $format_p
1262   0AEE 2A            mov b, [d]
1263   0AEF 74            mov d, b
1264   0AF0 32            mov bl, [d]
1265   0AF1 A7 00         mov bh, 0
1266   0AF3             _switch20_comparisons:
1267   0AF3 C1 6C         cmp bl, $6c
1268   0AF5 C6 21 0B      je _switch20_case0
1269   0AF8 C1 4C         cmp bl, $4c
1270   0AFA C6 21 0B      je _switch20_case1
1271   0AFD C1 64         cmp bl, $64
1272   0AFF C6 B3 0B      je _switch20_case2
1273   0B02 C1 69         cmp bl, $69
1274   0B04 C6 B3 0B      je _switch20_case3
1275   0B07 C1 75         cmp bl, $75
1276   0B09 C6 E0 0B      je _switch20_case4
1277   0B0C C1 78         cmp bl, $78
1278   0B0E C6 0D 0C      je _switch20_case5
1279   0B11 C1 63         cmp bl, $63
1280   0B13 C6 22 0C      je _switch20_case6
1281   0B16 C1 73         cmp bl, $73
1282   0B18 C6 51 0C      je _switch20_case7
1283   0B1B 0A 89 0C      jmp _switch20_default
1284   0B1E 0A 95 0C      jmp _switch20_exit
1285   0B21             _switch20_case0:
1286   0B21             _switch20_case1:
1287   0B21             ;; format_p++; 
1288   0B21 FA FD FF      lea d, [bp + -3] ; $format_p
1289   0B24 2A            mov b, [d]
1290   0B25 FD 77         inc b
1291   0B27 FA FD FF      lea d, [bp + -3] ; $format_p
1292   0B2A FD 43         mov [d], b
1293   0B2C FD 7D         dec b
1294   0B2E             ;; if(*format_p == 'd' || *format_p == 'i'); 
1295   0B2E             _if21_cond:
1296   0B2E FA FD FF      lea d, [bp + -3] ; $format_p
1297   0B31 2A            mov b, [d]
1298   0B32 74            mov d, b
1299   0B33 32            mov bl, [d]
1300   0B34 A7 00         mov bh, 0
1301   0B36             ; START RELATIONAL
1302   0B36 D7            push a
1303   0B37 11            mov a, b
1304   0B38 26 64 00      mov b, $64
1305   0B3B B0            cmp a, b
1306   0B3C FD 71         seq ; ==
1307   0B3E E4            pop a
1308   0B3F             ; END RELATIONAL
1309   0B3F             ; START LOGICAL OR
1310   0B3F D7            push a
1311   0B40 11            mov a, b
1312   0B41 FA FD FF      lea d, [bp + -3] ; $format_p
1313   0B44 2A            mov b, [d]
1314   0B45 74            mov d, b
1315   0B46 32            mov bl, [d]
1316   0B47 A7 00         mov bh, 0
1317   0B49             ; START RELATIONAL
1318   0B49 D7            push a
1319   0B4A 11            mov a, b
1320   0B4B 26 69 00      mov b, $69
1321   0B4E B0            cmp a, b
1322   0B4F FD 71         seq ; ==
1323   0B51 E4            pop a
1324   0B52             ; END RELATIONAL
1325   0B52 FD A8         sor a, b ; ||
1326   0B54 E4            pop a
1327   0B55             ; END LOGICAL OR
1328   0B55 C0 00 00      cmp b, 0
1329   0B58 C6 5E 0B      je _if21_else
1330   0B5B             _if21_true:
1331   0B5B             ;; ; 
1332   0B5B 0A 9E 0B      jmp _if21_exit
1333   0B5E             _if21_else:
1334   0B5E             ;; if(*format_p == 'u'); 
1335   0B5E             _if22_cond:
1336   0B5E FA FD FF      lea d, [bp + -3] ; $format_p
1337   0B61 2A            mov b, [d]
1338   0B62 74            mov d, b
1339   0B63 32            mov bl, [d]
1340   0B64 A7 00         mov bh, 0
1341   0B66             ; START RELATIONAL
1342   0B66 D7            push a
1343   0B67 11            mov a, b
1344   0B68 26 75 00      mov b, $75
1345   0B6B B0            cmp a, b
1346   0B6C FD 71         seq ; ==
1347   0B6E E4            pop a
1348   0B6F             ; END RELATIONAL
1349   0B6F C0 00 00      cmp b, 0
1350   0B72 C6 78 0B      je _if22_else
1351   0B75             _if22_true:
1352   0B75             ;; ; 
1353   0B75 0A 9E 0B      jmp _if22_exit
1354   0B78             _if22_else:
1355   0B78             ;; if(*format_p == 'x'); 
1356   0B78             _if23_cond:
1357   0B78 FA FD FF      lea d, [bp + -3] ; $format_p
1358   0B7B 2A            mov b, [d]
1359   0B7C 74            mov d, b
1360   0B7D 32            mov bl, [d]
1361   0B7E A7 00         mov bh, 0
1362   0B80             ; START RELATIONAL
1363   0B80 D7            push a
1364   0B81 11            mov a, b
1365   0B82 26 78 00      mov b, $78
1366   0B85 B0            cmp a, b
1367   0B86 FD 71         seq ; ==
1368   0B88 E4            pop a
1369   0B89             ; END RELATIONAL
1370   0B89 C0 00 00      cmp b, 0
1371   0B8C C6 92 0B      je _if23_else
1372   0B8F             _if23_true:
1373   0B8F             ;; ; 
1374   0B8F 0A 9E 0B      jmp _if23_exit
1375   0B92             _if23_else:
1376   0B92             ;; err("Unexpected format in printf."); 
1377   0B92 26 C5 1C      mov b, _s3 ; "Unexpected format in printf."
1378   0B95 FD AB         swp b
1379   0B97 D8            push b
1380   0B98 07 C6 0C      call err
1381   0B9B 51 02 00      add sp, 2
1382   0B9E             _if23_exit:
1383   0B9E             _if22_exit:
1384   0B9E             _if21_exit:
1385   0B9E             ;; p = p + 4; 
1386   0B9E FA FF FF      lea d, [bp + -1] ; $p
1387   0BA1 DA            push d
1388   0BA2 FA FF FF      lea d, [bp + -1] ; $p
1389   0BA5 2A            mov b, [d]
1390   0BA6             ; START TERMS
1391   0BA6 D7            push a
1392   0BA7 11            mov a, b
1393   0BA8 26 04 00      mov b, $4
1394   0BAB 56            add b, a
1395   0BAC E4            pop a
1396   0BAD             ; END TERMS
1397   0BAD E7            pop d
1398   0BAE FD 43         mov [d], b
1399   0BB0             ;; break; 
1400   0BB0 0A 95 0C      jmp _switch20_exit ; case break
1401   0BB3             _switch20_case2:
1402   0BB3             _switch20_case3:
1403   0BB3             ;; i = scann(); 
1404   0BB3 FA FA FF      lea d, [bp + -6] ; $i
1405   0BB6 DA            push d
1406   0BB7 07 94 15      call scann
1407   0BBA E7            pop d
1408   0BBB FD 43         mov [d], b
1409   0BBD             ;; **(int **)p = i; 
1410   0BBD FA FF FF      lea d, [bp + -1] ; $p
1411   0BC0 2A            mov b, [d]
1412   0BC1 74            mov d, b
1413   0BC2 2A            mov b, [d]
1414   0BC3 D8            push b
1415   0BC4 FA FA FF      lea d, [bp + -6] ; $i
1416   0BC7 2A            mov b, [d]
1417   0BC8 E7            pop d
1418   0BC9 FD 43         mov [d], b
1419   0BCB             ;; p = p + 2; 
1420   0BCB FA FF FF      lea d, [bp + -1] ; $p
1421   0BCE DA            push d
1422   0BCF FA FF FF      lea d, [bp + -1] ; $p
1423   0BD2 2A            mov b, [d]
1424   0BD3             ; START TERMS
1425   0BD3 D7            push a
1426   0BD4 11            mov a, b
1427   0BD5 26 02 00      mov b, $2
1428   0BD8 56            add b, a
1429   0BD9 E4            pop a
1430   0BDA             ; END TERMS
1431   0BDA E7            pop d
1432   0BDB FD 43         mov [d], b
1433   0BDD             ;; break; 
1434   0BDD 0A 95 0C      jmp _switch20_exit ; case break
1435   0BE0             _switch20_case4:
1436   0BE0             ;; i = scann(); 
1437   0BE0 FA FA FF      lea d, [bp + -6] ; $i
1438   0BE3 DA            push d
1439   0BE4 07 94 15      call scann
1440   0BE7 E7            pop d
1441   0BE8 FD 43         mov [d], b
1442   0BEA             ;; **(int **)p = i; 
1443   0BEA FA FF FF      lea d, [bp + -1] ; $p
1444   0BED 2A            mov b, [d]
1445   0BEE 74            mov d, b
1446   0BEF 2A            mov b, [d]
1447   0BF0 D8            push b
1448   0BF1 FA FA FF      lea d, [bp + -6] ; $i
1449   0BF4 2A            mov b, [d]
1450   0BF5 E7            pop d
1451   0BF6 FD 43         mov [d], b
1452   0BF8             ;; p = p + 2; 
1453   0BF8 FA FF FF      lea d, [bp + -1] ; $p
1454   0BFB DA            push d
1455   0BFC FA FF FF      lea d, [bp + -1] ; $p
1456   0BFF 2A            mov b, [d]
1457   0C00             ; START TERMS
1458   0C00 D7            push a
1459   0C01 11            mov a, b
1460   0C02 26 02 00      mov b, $2
1461   0C05 56            add b, a
1462   0C06 E4            pop a
1463   0C07             ; END TERMS
1464   0C07 E7            pop d
1465   0C08 FD 43         mov [d], b
1466   0C0A             ;; break; 
1467   0C0A 0A 95 0C      jmp _switch20_exit ; case break
1468   0C0D             _switch20_case5:
1469   0C0D             ;; p = p + 2; 
1470   0C0D FA FF FF      lea d, [bp + -1] ; $p
1471   0C10 DA            push d
1472   0C11 FA FF FF      lea d, [bp + -1] ; $p
1473   0C14 2A            mov b, [d]
1474   0C15             ; START TERMS
1475   0C15 D7            push a
1476   0C16 11            mov a, b
1477   0C17 26 02 00      mov b, $2
1478   0C1A 56            add b, a
1479   0C1B E4            pop a
1480   0C1C             ; END TERMS
1481   0C1C E7            pop d
1482   0C1D FD 43         mov [d], b
1483   0C1F             ;; break; 
1484   0C1F 0A 95 0C      jmp _switch20_exit ; case break
1485   0C22             _switch20_case6:
1486   0C22             ;; c = getchar(); 
1487   0C22 FA FC FF      lea d, [bp + -4] ; $c
1488   0C25 DA            push d
1489   0C26 07 7E 15      call getchar
1490   0C29 E7            pop d
1491   0C2A FD 3E         mov [d], bl
1492   0C2C             ;; **(char **)p = c; 
1493   0C2C FA FF FF      lea d, [bp + -1] ; $p
1494   0C2F 2A            mov b, [d]
1495   0C30 74            mov d, b
1496   0C31 2A            mov b, [d]
1497   0C32 D8            push b
1498   0C33 FA FC FF      lea d, [bp + -4] ; $c
1499   0C36 32            mov bl, [d]
1500   0C37 A7 00         mov bh, 0
1501   0C39 E7            pop d
1502   0C3A FD 43         mov [d], b
1503   0C3C             ;; p = p + 2; 
1504   0C3C FA FF FF      lea d, [bp + -1] ; $p
1505   0C3F DA            push d
1506   0C40 FA FF FF      lea d, [bp + -1] ; $p
1507   0C43 2A            mov b, [d]
1508   0C44             ; START TERMS
1509   0C44 D7            push a
1510   0C45 11            mov a, b
1511   0C46 26 02 00      mov b, $2
1512   0C49 56            add b, a
1513   0C4A E4            pop a
1514   0C4B             ; END TERMS
1515   0C4B E7            pop d
1516   0C4C FD 43         mov [d], b
1517   0C4E             ;; break; 
1518   0C4E 0A 95 0C      jmp _switch20_exit ; case break
1519   0C51             _switch20_case7:
1520   0C51             ;; gets(input_string); 
1521   0C51 FA FA FD      lea d, [bp + -518] ; $input_string
1522   0C54 2D            mov b, d
1523   0C55 FD AB         swp b
1524   0C57 D8            push b
1525   0C58 07 52 0E      call gets
1526   0C5B 51 02 00      add sp, 2
1527   0C5E             ;; strcpy(*(char **)p, input_string); 
1528   0C5E FA FA FD      lea d, [bp + -518] ; $input_string
1529   0C61 2D            mov b, d
1530   0C62 FD AB         swp b
1531   0C64 D8            push b
1532   0C65 FA FF FF      lea d, [bp + -1] ; $p
1533   0C68 2A            mov b, [d]
1534   0C69 74            mov d, b
1535   0C6A 2A            mov b, [d]
1536   0C6B FD AB         swp b
1537   0C6D D8            push b
1538   0C6E 07 71 04      call strcpy
1539   0C71 51 04 00      add sp, 4
1540   0C74             ;; p = p + 2; 
1541   0C74 FA FF FF      lea d, [bp + -1] ; $p
1542   0C77 DA            push d
1543   0C78 FA FF FF      lea d, [bp + -1] ; $p
1544   0C7B 2A            mov b, [d]
1545   0C7C             ; START TERMS
1546   0C7C D7            push a
1547   0C7D 11            mov a, b
1548   0C7E 26 02 00      mov b, $2
1549   0C81 56            add b, a
1550   0C82 E4            pop a
1551   0C83             ; END TERMS
1552   0C83 E7            pop d
1553   0C84 FD 43         mov [d], b
1554   0C86             ;; break; 
1555   0C86 0A 95 0C      jmp _switch20_exit ; case break
1556   0C89             _switch20_default:
1557   0C89             ;; print("Error: Unknown argument type.\n"); 
1558   0C89 26 E2 1C      mov b, _s4 ; "Error: Unknown argument type.\n"
1559   0C8C FD AB         swp b
1560   0C8E D8            push b
1561   0C8F 07 B9 15      call print
1562   0C92 51 02 00      add sp, 2
1563   0C95             _switch20_exit:
1564   0C95             ;; format_p++; 
1565   0C95 FA FD FF      lea d, [bp + -3] ; $format_p
1566   0C98 2A            mov b, [d]
1567   0C99 FD 77         inc b
1568   0C9B FA FD FF      lea d, [bp + -3] ; $format_p
1569   0C9E FD 43         mov [d], b
1570   0CA0 FD 7D         dec b
1571   0CA2 0A C1 0C      jmp _if19_exit
1572   0CA5             _if19_else:
1573   0CA5             ;; putchar(*format_p); 
1574   0CA5 FA FD FF      lea d, [bp + -3] ; $format_p
1575   0CA8 2A            mov b, [d]
1576   0CA9 74            mov d, b
1577   0CAA 32            mov bl, [d]
1578   0CAB A7 00         mov bh, 0
1579   0CAD DD            push bl
1580   0CAE 07 71 15      call putchar
1581   0CB1 51 01 00      add sp, 1
1582   0CB4             ;; format_p++; 
1583   0CB4 FA FD FF      lea d, [bp + -3] ; $format_p
1584   0CB7 2A            mov b, [d]
1585   0CB8 FD 77         inc b
1586   0CBA FA FD FF      lea d, [bp + -3] ; $format_p
1587   0CBD FD 43         mov [d], b
1588   0CBF FD 7D         dec b
1589   0CC1             _if19_exit:
1590   0CC1             _if18_exit:
1591   0CC1             _for17_update:
1592   0CC1 0A AE 0A      jmp _for17_cond
1593   0CC4             _for17_exit:
1594   0CC4 F9            leave
1595   0CC5 09            ret
1596   0CC6             
1597   0CC6             err:
1598   0CC6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1599   0CC9             ;; print(e); 
1600   0CC9 FA 05 00      lea d, [bp + 5] ; $e
1601   0CCC 2A            mov b, [d]
1602   0CCD FD AB         swp b
1603   0CCF D8            push b
1604   0CD0 07 B9 15      call print
1605   0CD3 51 02 00      add sp, 2
1606   0CD6 F9            leave
1607   0CD7 09            ret
1608   0CD8             
1609   0CD8             printx32:
1610   0CD8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1611   0CDB             
1612   0CDB             ; --- BEGIN INLINE ASM BLOCK
1613   0CDB FA 05 00      lea d, [bp + 5] ; $hex
1614   0CDE 2B 02 00      mov b, [d+2]
1615   0CE1 07 A4 18      call print_u16x
1616   0CE4 2A            mov b, [d]
1617   0CE5 07 A4 18      call print_u16x
1618   0CE8             ; --- END INLINE ASM BLOCK
1619   0CE8             
1620   0CE8 F9            leave
1621   0CE9 09            ret
1622   0CEA             
1623   0CEA             printx16:
1624   0CEA F8 00 00      enter 0 ; (push bp; mov bp, sp)
1625   0CED             
1626   0CED             ; --- BEGIN INLINE ASM BLOCK
1627   0CED FA 05 00      lea d, [bp + 5] ; $hex
1628   0CF0 2A            mov b, [d]
1629   0CF1 07 A4 18      call print_u16x
1630   0CF4             ; --- END INLINE ASM BLOCK
1631   0CF4             
1632   0CF4 F9            leave
1633   0CF5 09            ret
1634   0CF6             
1635   0CF6             printx8:
1636   0CF6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1637   0CF9             
1638   0CF9             ; --- BEGIN INLINE ASM BLOCK
1639   0CF9 FA 05 00      lea d, [bp + 5] ; $hex
1640   0CFC 32            mov bl, [d]
1641   0CFD 07 E8 18      call print_u8x
1642   0D00             ; --- END INLINE ASM BLOCK
1643   0D00             
1644   0D00 F9            leave
1645   0D01 09            ret
1646   0D02             
1647   0D02             hex_str_to_int:
1648   0D02 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1649   0D05             ;; int value = 0; 
1650   0D05 52 02 00      sub sp, 2 ; value
1651   0D08             ; --- START LOCAL VAR INITIALIZATION
1652   0D08 FA FF FF      lea d, [bp + -1] ; $value
1653   0D0B DA            push d
1654   0D0C 26 00 00      mov b, $0
1655   0D0F E7            pop d
1656   0D10 FD 43         mov [d], b
1657   0D12             ; --- END LOCAL VAR INITIALIZATION
1658   0D12             ;; int i; 
1659   0D12 52 02 00      sub sp, 2 ; i
1660   0D15             ;; char hex_char; 
1661   0D15 52 01 00      sub sp, 1 ; hex_char
1662   0D18             ;; int len; 
1663   0D18 52 02 00      sub sp, 2 ; len
1664   0D1B             ;; len = strlen(hex_string); 
1665   0D1B FA FA FF      lea d, [bp + -6] ; $len
1666   0D1E DA            push d
1667   0D1F FA 05 00      lea d, [bp + 5] ; $hex_string
1668   0D22 2A            mov b, [d]
1669   0D23 FD AB         swp b
1670   0D25 D8            push b
1671   0D26 07 EB 05      call strlen
1672   0D29 51 02 00      add sp, 2
1673   0D2C E7            pop d
1674   0D2D FD 43         mov [d], b
1675   0D2F             ;; for (i = 0; i < len; i++) { 
1676   0D2F             _for24_init:
1677   0D2F FA FD FF      lea d, [bp + -3] ; $i
1678   0D32 DA            push d
1679   0D33 26 00 00      mov b, $0
1680   0D36 E7            pop d
1681   0D37 FD 43         mov [d], b
1682   0D39             _for24_cond:
1683   0D39 FA FD FF      lea d, [bp + -3] ; $i
1684   0D3C 2A            mov b, [d]
1685   0D3D             ; START RELATIONAL
1686   0D3D D7            push a
1687   0D3E 11            mov a, b
1688   0D3F FA FA FF      lea d, [bp + -6] ; $len
1689   0D42 2A            mov b, [d]
1690   0D43 B0            cmp a, b
1691   0D44 FD 73         slt ; < (signed)
1692   0D46 E4            pop a
1693   0D47             ; END RELATIONAL
1694   0D47 C0 00 00      cmp b, 0
1695   0D4A C6 4C 0E      je _for24_exit
1696   0D4D             _for24_block:
1697   0D4D             ;; hex_char = hex_string[i]; 
1698   0D4D FA FC FF      lea d, [bp + -4] ; $hex_char
1699   0D50 DA            push d
1700   0D51 FA 05 00      lea d, [bp + 5] ; $hex_string
1701   0D54 FD 2A         mov d, [d]
1702   0D56 D7            push a
1703   0D57 DA            push d
1704   0D58 FA FD FF      lea d, [bp + -3] ; $i
1705   0D5B 2A            mov b, [d]
1706   0D5C E7            pop d
1707   0D5D FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1708   0D61 E4            pop a
1709   0D62 32            mov bl, [d]
1710   0D63 A7 00         mov bh, 0
1711   0D65 E7            pop d
1712   0D66 FD 3E         mov [d], bl
1713   0D68             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1714   0D68             _if25_cond:
1715   0D68 FA FC FF      lea d, [bp + -4] ; $hex_char
1716   0D6B 32            mov bl, [d]
1717   0D6C A7 00         mov bh, 0
1718   0D6E             ; START RELATIONAL
1719   0D6E D7            push a
1720   0D6F 11            mov a, b
1721   0D70 26 61 00      mov b, $61
1722   0D73 B0            cmp a, b
1723   0D74 FD 80         sge ; >=
1724   0D76 E4            pop a
1725   0D77             ; END RELATIONAL
1726   0D77             ; START LOGICAL AND
1727   0D77 D7            push a
1728   0D78 11            mov a, b
1729   0D79 FA FC FF      lea d, [bp + -4] ; $hex_char
1730   0D7C 32            mov bl, [d]
1731   0D7D A7 00         mov bh, 0
1732   0D7F             ; START RELATIONAL
1733   0D7F D7            push a
1734   0D80 11            mov a, b
1735   0D81 26 66 00      mov b, $66
1736   0D84 B0            cmp a, b
1737   0D85 FD 74         sle ; <= (signed)
1738   0D87 E4            pop a
1739   0D88             ; END RELATIONAL
1740   0D88 FD A7         sand a, b
1741   0D8A E4            pop a
1742   0D8B             ; END LOGICAL AND
1743   0D8B C0 00 00      cmp b, 0
1744   0D8E C6 BF 0D      je _if25_else
1745   0D91             _if25_true:
1746   0D91             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1747   0D91 FA FF FF      lea d, [bp + -1] ; $value
1748   0D94 DA            push d
1749   0D95 FA FF FF      lea d, [bp + -1] ; $value
1750   0D98 2A            mov b, [d]
1751   0D99             ; START FACTORS
1752   0D99 D7            push a
1753   0D9A 11            mov a, b
1754   0D9B 26 10 00      mov b, $10
1755   0D9E AC            mul a, b ; *
1756   0D9F 11            mov a, b
1757   0DA0 27            mov b, a
1758   0DA1 E4            pop a
1759   0DA2             ; END FACTORS
1760   0DA2             ; START TERMS
1761   0DA2 D7            push a
1762   0DA3 11            mov a, b
1763   0DA4 FA FC FF      lea d, [bp + -4] ; $hex_char
1764   0DA7 32            mov bl, [d]
1765   0DA8 A7 00         mov bh, 0
1766   0DAA             ; START TERMS
1767   0DAA D7            push a
1768   0DAB 11            mov a, b
1769   0DAC 26 61 00      mov b, $61
1770   0DAF 60            sub a, b
1771   0DB0 27            mov b, a
1772   0DB1 11            mov a, b
1773   0DB2 26 0A 00      mov b, $a
1774   0DB5 56            add b, a
1775   0DB6 E4            pop a
1776   0DB7             ; END TERMS
1777   0DB7 56            add b, a
1778   0DB8 E4            pop a
1779   0DB9             ; END TERMS
1780   0DB9 E7            pop d
1781   0DBA FD 43         mov [d], b
1782   0DBC 0A 3C 0E      jmp _if25_exit
1783   0DBF             _if25_else:
1784   0DBF             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1785   0DBF             _if26_cond:
1786   0DBF FA FC FF      lea d, [bp + -4] ; $hex_char
1787   0DC2 32            mov bl, [d]
1788   0DC3 A7 00         mov bh, 0
1789   0DC5             ; START RELATIONAL
1790   0DC5 D7            push a
1791   0DC6 11            mov a, b
1792   0DC7 26 41 00      mov b, $41
1793   0DCA B0            cmp a, b
1794   0DCB FD 80         sge ; >=
1795   0DCD E4            pop a
1796   0DCE             ; END RELATIONAL
1797   0DCE             ; START LOGICAL AND
1798   0DCE D7            push a
1799   0DCF 11            mov a, b
1800   0DD0 FA FC FF      lea d, [bp + -4] ; $hex_char
1801   0DD3 32            mov bl, [d]
1802   0DD4 A7 00         mov bh, 0
1803   0DD6             ; START RELATIONAL
1804   0DD6 D7            push a
1805   0DD7 11            mov a, b
1806   0DD8 26 46 00      mov b, $46
1807   0DDB B0            cmp a, b
1808   0DDC FD 74         sle ; <= (signed)
1809   0DDE E4            pop a
1810   0DDF             ; END RELATIONAL
1811   0DDF FD A7         sand a, b
1812   0DE1 E4            pop a
1813   0DE2             ; END LOGICAL AND
1814   0DE2 C0 00 00      cmp b, 0
1815   0DE5 C6 16 0E      je _if26_else
1816   0DE8             _if26_true:
1817   0DE8             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1818   0DE8 FA FF FF      lea d, [bp + -1] ; $value
1819   0DEB DA            push d
1820   0DEC FA FF FF      lea d, [bp + -1] ; $value
1821   0DEF 2A            mov b, [d]
1822   0DF0             ; START FACTORS
1823   0DF0 D7            push a
1824   0DF1 11            mov a, b
1825   0DF2 26 10 00      mov b, $10
1826   0DF5 AC            mul a, b ; *
1827   0DF6 11            mov a, b
1828   0DF7 27            mov b, a
1829   0DF8 E4            pop a
1830   0DF9             ; END FACTORS
1831   0DF9             ; START TERMS
1832   0DF9 D7            push a
1833   0DFA 11            mov a, b
1834   0DFB FA FC FF      lea d, [bp + -4] ; $hex_char
1835   0DFE 32            mov bl, [d]
1836   0DFF A7 00         mov bh, 0
1837   0E01             ; START TERMS
1838   0E01 D7            push a
1839   0E02 11            mov a, b
1840   0E03 26 41 00      mov b, $41
1841   0E06 60            sub a, b
1842   0E07 27            mov b, a
1843   0E08 11            mov a, b
1844   0E09 26 0A 00      mov b, $a
1845   0E0C 56            add b, a
1846   0E0D E4            pop a
1847   0E0E             ; END TERMS
1848   0E0E 56            add b, a
1849   0E0F E4            pop a
1850   0E10             ; END TERMS
1851   0E10 E7            pop d
1852   0E11 FD 43         mov [d], b
1853   0E13 0A 3C 0E      jmp _if26_exit
1854   0E16             _if26_else:
1855   0E16             ;; value = (value * 16) + (hex_char - '0'); 
1856   0E16 FA FF FF      lea d, [bp + -1] ; $value
1857   0E19 DA            push d
1858   0E1A FA FF FF      lea d, [bp + -1] ; $value
1859   0E1D 2A            mov b, [d]
1860   0E1E             ; START FACTORS
1861   0E1E D7            push a
1862   0E1F 11            mov a, b
1863   0E20 26 10 00      mov b, $10
1864   0E23 AC            mul a, b ; *
1865   0E24 11            mov a, b
1866   0E25 27            mov b, a
1867   0E26 E4            pop a
1868   0E27             ; END FACTORS
1869   0E27             ; START TERMS
1870   0E27 D7            push a
1871   0E28 11            mov a, b
1872   0E29 FA FC FF      lea d, [bp + -4] ; $hex_char
1873   0E2C 32            mov bl, [d]
1874   0E2D A7 00         mov bh, 0
1875   0E2F             ; START TERMS
1876   0E2F D7            push a
1877   0E30 11            mov a, b
1878   0E31 26 30 00      mov b, $30
1879   0E34 60            sub a, b
1880   0E35 27            mov b, a
1881   0E36 E4            pop a
1882   0E37             ; END TERMS
1883   0E37 56            add b, a
1884   0E38 E4            pop a
1885   0E39             ; END TERMS
1886   0E39 E7            pop d
1887   0E3A FD 43         mov [d], b
1888   0E3C             _if26_exit:
1889   0E3C             _if25_exit:
1890   0E3C             _for24_update:
1891   0E3C FA FD FF      lea d, [bp + -3] ; $i
1892   0E3F 2A            mov b, [d]
1893   0E40 FD 77         inc b
1894   0E42 FA FD FF      lea d, [bp + -3] ; $i
1895   0E45 FD 43         mov [d], b
1896   0E47 FD 7D         dec b
1897   0E49 0A 39 0D      jmp _for24_cond
1898   0E4C             _for24_exit:
1899   0E4C             ;; return value; 
1900   0E4C FA FF FF      lea d, [bp + -1] ; $value
1901   0E4F 2A            mov b, [d]
1902   0E50 F9            leave
1903   0E51 09            ret
1904   0E52             
1905   0E52             gets:
1906   0E52 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1907   0E55             
1908   0E55             ; --- BEGIN INLINE ASM BLOCK
1909   0E55 FA 05 00      lea d, [bp + 5] ; $s
1910   0E58 15            mov a, [d]
1911   0E59 3C            mov d, a
1912   0E5A 07 09 17      call _gets
1913   0E5D             ; --- END INLINE ASM BLOCK
1914   0E5D             
1915   0E5D             ;; return strlen(s); 
1916   0E5D FA 05 00      lea d, [bp + 5] ; $s
1917   0E60 2A            mov b, [d]
1918   0E61 FD AB         swp b
1919   0E63 D8            push b
1920   0E64 07 EB 05      call strlen
1921   0E67 51 02 00      add sp, 2
1922   0E6A F9            leave
1923   0E6B 09            ret
1924   0E6C             
1925   0E6C             print_signed:
1926   0E6C F8 00 00      enter 0 ; (push bp; mov bp, sp)
1927   0E6F             ;; char digits[5]; 
1928   0E6F 52 05 00      sub sp, 5 ; digits
1929   0E72             ;; int i = 0; 
1930   0E72 52 02 00      sub sp, 2 ; i
1931   0E75             ; --- START LOCAL VAR INITIALIZATION
1932   0E75 FA FA FF      lea d, [bp + -6] ; $i
1933   0E78 DA            push d
1934   0E79 26 00 00      mov b, $0
1935   0E7C E7            pop d
1936   0E7D FD 43         mov [d], b
1937   0E7F             ; --- END LOCAL VAR INITIALIZATION
1938   0E7F             ;; if (num < 0) { 
1939   0E7F             _if27_cond:
1940   0E7F FA 05 00      lea d, [bp + 5] ; $num
1941   0E82 2A            mov b, [d]
1942   0E83             ; START RELATIONAL
1943   0E83 D7            push a
1944   0E84 11            mov a, b
1945   0E85 26 00 00      mov b, $0
1946   0E88 B0            cmp a, b
1947   0E89 FD 73         slt ; < (signed)
1948   0E8B E4            pop a
1949   0E8C             ; END RELATIONAL
1950   0E8C C0 00 00      cmp b, 0
1951   0E8F C6 AC 0E      je _if27_else
1952   0E92             _if27_true:
1953   0E92             ;; putchar('-'); 
1954   0E92 26 2D 00      mov b, $2d
1955   0E95 DD            push bl
1956   0E96 07 71 15      call putchar
1957   0E99 51 01 00      add sp, 1
1958   0E9C             ;; num = -num; 
1959   0E9C FA 05 00      lea d, [bp + 5] ; $num
1960   0E9F DA            push d
1961   0EA0 FA 05 00      lea d, [bp + 5] ; $num
1962   0EA3 2A            mov b, [d]
1963   0EA4 FD 97         neg b
1964   0EA6 E7            pop d
1965   0EA7 FD 43         mov [d], b
1966   0EA9 0A CE 0E      jmp _if27_exit
1967   0EAC             _if27_else:
1968   0EAC             ;; if (num == 0) { 
1969   0EAC             _if28_cond:
1970   0EAC FA 05 00      lea d, [bp + 5] ; $num
1971   0EAF 2A            mov b, [d]
1972   0EB0             ; START RELATIONAL
1973   0EB0 D7            push a
1974   0EB1 11            mov a, b
1975   0EB2 26 00 00      mov b, $0
1976   0EB5 B0            cmp a, b
1977   0EB6 FD 71         seq ; ==
1978   0EB8 E4            pop a
1979   0EB9             ; END RELATIONAL
1980   0EB9 C0 00 00      cmp b, 0
1981   0EBC C6 CE 0E      je _if28_exit
1982   0EBF             _if28_true:
1983   0EBF             ;; putchar('0'); 
1984   0EBF 26 30 00      mov b, $30
1985   0EC2 DD            push bl
1986   0EC3 07 71 15      call putchar
1987   0EC6 51 01 00      add sp, 1
1988   0EC9             ;; return; 
1989   0EC9 F9            leave
1990   0ECA 09            ret
1991   0ECB 0A CE 0E      jmp _if28_exit
1992   0ECE             _if28_exit:
1993   0ECE             _if27_exit:
1994   0ECE             ;; while (num > 0) { 
1995   0ECE             _while29_cond:
1996   0ECE FA 05 00      lea d, [bp + 5] ; $num
1997   0ED1 2A            mov b, [d]
1998   0ED2             ; START RELATIONAL
1999   0ED2 D7            push a
2000   0ED3 11            mov a, b
2001   0ED4 26 00 00      mov b, $0
2002   0ED7 B0            cmp a, b
2003   0ED8 FD 7F         sgt ; >
2004   0EDA E4            pop a
2005   0EDB             ; END RELATIONAL
2006   0EDB C0 00 00      cmp b, 0
2007   0EDE C6 28 0F      je _while29_exit
2008   0EE1             _while29_block:
2009   0EE1             ;; digits[i] = '0' + (num % 10); 
2010   0EE1 FA FC FF      lea d, [bp + -4] ; $digits
2011   0EE4 D7            push a
2012   0EE5 DA            push d
2013   0EE6 FA FA FF      lea d, [bp + -6] ; $i
2014   0EE9 2A            mov b, [d]
2015   0EEA E7            pop d
2016   0EEB 5A            add d, b
2017   0EEC E4            pop a
2018   0EED DA            push d
2019   0EEE 26 30 00      mov b, $30
2020   0EF1             ; START TERMS
2021   0EF1 D7            push a
2022   0EF2 11            mov a, b
2023   0EF3 FA 05 00      lea d, [bp + 5] ; $num
2024   0EF6 2A            mov b, [d]
2025   0EF7             ; START FACTORS
2026   0EF7 D7            push a
2027   0EF8 11            mov a, b
2028   0EF9 26 0A 00      mov b, $a
2029   0EFC AE            div a, b ; 
2030   0EFD 11            mov a, b
2031   0EFE 27            mov b, a
2032   0EFF E4            pop a
2033   0F00             ; END FACTORS
2034   0F00 56            add b, a
2035   0F01 E4            pop a
2036   0F02             ; END TERMS
2037   0F02 E7            pop d
2038   0F03 FD 3E         mov [d], bl
2039   0F05             ;; num = num / 10; 
2040   0F05 FA 05 00      lea d, [bp + 5] ; $num
2041   0F08 DA            push d
2042   0F09 FA 05 00      lea d, [bp + 5] ; $num
2043   0F0C 2A            mov b, [d]
2044   0F0D             ; START FACTORS
2045   0F0D D7            push a
2046   0F0E 11            mov a, b
2047   0F0F 26 0A 00      mov b, $a
2048   0F12 AE            div a, b
2049   0F13 27            mov b, a
2050   0F14 E4            pop a
2051   0F15             ; END FACTORS
2052   0F15 E7            pop d
2053   0F16 FD 43         mov [d], b
2054   0F18             ;; i++; 
2055   0F18 FA FA FF      lea d, [bp + -6] ; $i
2056   0F1B 2A            mov b, [d]
2057   0F1C FD 77         inc b
2058   0F1E FA FA FF      lea d, [bp + -6] ; $i
2059   0F21 FD 43         mov [d], b
2060   0F23 FD 7D         dec b
2061   0F25 0A CE 0E      jmp _while29_cond
2062   0F28             _while29_exit:
2063   0F28             ;; while (i > 0) { 
2064   0F28             _while30_cond:
2065   0F28 FA FA FF      lea d, [bp + -6] ; $i
2066   0F2B 2A            mov b, [d]
2067   0F2C             ; START RELATIONAL
2068   0F2C D7            push a
2069   0F2D 11            mov a, b
2070   0F2E 26 00 00      mov b, $0
2071   0F31 B0            cmp a, b
2072   0F32 FD 7F         sgt ; >
2073   0F34 E4            pop a
2074   0F35             ; END RELATIONAL
2075   0F35 C0 00 00      cmp b, 0
2076   0F38 C6 61 0F      je _while30_exit
2077   0F3B             _while30_block:
2078   0F3B             ;; i--; 
2079   0F3B FA FA FF      lea d, [bp + -6] ; $i
2080   0F3E 2A            mov b, [d]
2081   0F3F FD 7D         dec b
2082   0F41 FA FA FF      lea d, [bp + -6] ; $i
2083   0F44 FD 43         mov [d], b
2084   0F46 FD 77         inc b
2085   0F48             ;; putchar(digits[i]); 
2086   0F48 FA FC FF      lea d, [bp + -4] ; $digits
2087   0F4B D7            push a
2088   0F4C DA            push d
2089   0F4D FA FA FF      lea d, [bp + -6] ; $i
2090   0F50 2A            mov b, [d]
2091   0F51 E7            pop d
2092   0F52 5A            add d, b
2093   0F53 E4            pop a
2094   0F54 32            mov bl, [d]
2095   0F55 A7 00         mov bh, 0
2096   0F57 DD            push bl
2097   0F58 07 71 15      call putchar
2098   0F5B 51 01 00      add sp, 1
2099   0F5E 0A 28 0F      jmp _while30_cond
2100   0F61             _while30_exit:
2101   0F61 F9            leave
2102   0F62 09            ret
2103   0F63             
2104   0F63             print_signed_long:
2105   0F63 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2106   0F66             ;; char digits[10]; 
2107   0F66 52 0A 00      sub sp, 10 ; digits
2108   0F69             ;; int i = 0; 
2109   0F69 52 02 00      sub sp, 2 ; i
2110   0F6C             ; --- START LOCAL VAR INITIALIZATION
2111   0F6C FA F5 FF      lea d, [bp + -11] ; $i
2112   0F6F DA            push d
2113   0F70 26 00 00      mov b, $0
2114   0F73 E7            pop d
2115   0F74 FD 43         mov [d], b
2116   0F76             ; --- END LOCAL VAR INITIALIZATION
2117   0F76             ;; if (num < 0) { 
2118   0F76             _if31_cond:
2119   0F76 FA 05 00      lea d, [bp + 5] ; $num
2120   0F79 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2121   0F7C FD 39         mov c, b ; And place it into C
2122   0F7E 2A            mov b, [d] ; Lower Word in B
2123   0F7F             ; START RELATIONAL
2124   0F7F D7            push a
2125   0F80 FD D8         push g
2126   0F82 11            mov a, b
2127   0F83 FD 7A         mov g, c
2128   0F85 26 00 00      mov b, $0
2129   0F88 38 00 00      mov c, 0
2130   0F8B FD AF 00 00   cmp32 ga, cb
2130   0F8F 00 00 00 00 
2130   0F93 00 00 00 00 
2130   0F97 00 00 00 00 
2130   0F9B 00 00 00 00 
2130   0F9F 00 00 00 00 
2130   0FA3 00 00 00 00 
2130   0FA7 00 00 00 00 
2130   0FAB 00 00 00 00 
2130   0FAF 00 00 00 00 
2130   0FB3 00 00 00 00 
2130   0FB7 00 00 00 00 
2130   0FBB 00 00 00 00 
2130   0FBF 00 00 00 00 
2130   0FC3 00 00 00 00 
2130   0FC7 00 00 00 00 
2130   0FCB 00 00 00 00 
2130   0FCF 00 00 00 00 
2130   0FD3 00 00 00 00 
2130   0FD7 00 00 00 00 
2130   0FDB 00 00 00 00 
2130   0FDF 00 00 00 00 
2130   0FE3 00 00 00 00 
2130   0FE7 00 00 00 00 
2130   0FEB 00 00 00 00 
2130   0FEF 00 00 00 00 
2130   0FF3 00 00 00 00 
2130   0FF7 00 00 00 00 
2130   0FFB 00 00 00 00 
2130   0FFF 00 00 00 00 
2130   1003 00 00 00 00 
2130   1007 00 00 00 00 
2130   100B 00 00 00 00 
2130   100F 00 00 00 00 
2130   1013 00 00 00 00 
2130   1017 00 00 00 00 
2130   101B 00 00 00 00 
2130   101F 00 00 00 00 
2130   1023 00 00 00 00 
2130   1027 00 00 00 00 
2130   102B 00 00 00 00 
2130   102F 00 00 00 00 
2130   1033 00 00 00 00 
2130   1037 00 00 00 00 
2130   103B 00 00 00 00 
2130   103F 00 00 00 00 
2130   1043 00 00 00 00 
2130   1047 00 00 00 00 
2130   104B 00 00 00 00 
2130   104F 00 00 00 00 
2130   1053 00 00 00 00 
2130   1057 00 00 00 00 
2130   105B 00 00 00 00 
2130   105F 00 00 00 00 
2130   1063 00 00 00 00 
2130   1067 00 00 00 00 
2130   106B 00 00 00 00 
2130   106F 00 00 00 00 
2130   1073 00 00 00 00 
2130   1077 00 00 00 00 
2130   107B 00 00 00 00 
2130   107F 00 00 00 00 
2130   1083 00 00 00 00 
2130   1087 00 00 00 00 
2130   108B 00 
2131   108C FD 73         slt ; <
2132   108E FD F1         pop g
2133   1090 E4            pop a
2134   1091             ; END RELATIONAL
2135   1091 C0 00 00      cmp b, 0
2136   1094 C6 BB 10      je _if31_else
2137   1097             _if31_true:
2138   1097             ;; putchar('-'); 
2139   1097 26 2D 00      mov b, $2d
2140   109A DD            push bl
2141   109B 07 71 15      call putchar
2142   109E 51 01 00      add sp, 1
2143   10A1             ;; num = -num; 
2144   10A1 FA 05 00      lea d, [bp + 5] ; $num
2145   10A4 DA            push d
2146   10A5 FA 05 00      lea d, [bp + 5] ; $num
2147   10A8 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2148   10AB FD 39         mov c, b ; And place it into C
2149   10AD 2A            mov b, [d] ; Lower Word in B
2150   10AE FD 97         neg b
2151   10B0 E7            pop d
2152   10B1 FD 43         mov [d], b
2153   10B3 28            mov b, c
2154   10B4 FD 44 02 00   mov [d + 2], b
2155   10B8 0A EB 11      jmp _if31_exit
2156   10BB             _if31_else:
2157   10BB             ;; if (num == 0) { 
2158   10BB             _if32_cond:
2159   10BB FA 05 00      lea d, [bp + 5] ; $num
2160   10BE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2161   10C1 FD 39         mov c, b ; And place it into C
2162   10C3 2A            mov b, [d] ; Lower Word in B
2163   10C4             ; START RELATIONAL
2164   10C4 D7            push a
2165   10C5 FD D8         push g
2166   10C7 11            mov a, b
2167   10C8 FD 7A         mov g, c
2168   10CA 26 00 00      mov b, $0
2169   10CD 38 00 00      mov c, 0
2170   10D0 FD AF 00 00   cmp32 ga, cb
2170   10D4 00 00 00 00 
2170   10D8 00 00 00 00 
2170   10DC 00 00 00 00 
2170   10E0 00 00 00 00 
2170   10E4 00 00 00 00 
2170   10E8 00 00 00 00 
2170   10EC 00 00 00 00 
2170   10F0 00 00 00 00 
2170   10F4 00 00 00 00 
2170   10F8 00 00 00 00 
2170   10FC 00 00 00 00 
2170   1100 00 00 00 00 
2170   1104 00 00 00 00 
2170   1108 00 00 00 00 
2170   110C 00 00 00 00 
2170   1110 00 00 00 00 
2170   1114 00 00 00 00 
2170   1118 00 00 00 00 
2170   111C 00 00 00 00 
2170   1120 00 00 00 00 
2170   1124 00 00 00 00 
2170   1128 00 00 00 00 
2170   112C 00 00 00 00 
2170   1130 00 00 00 00 
2170   1134 00 00 00 00 
2170   1138 00 00 00 00 
2170   113C 00 00 00 00 
2170   1140 00 00 00 00 
2170   1144 00 00 00 00 
2170   1148 00 00 00 00 
2170   114C 00 00 00 00 
2170   1150 00 00 00 00 
2170   1154 00 00 00 00 
2170   1158 00 00 00 00 
2170   115C 00 00 00 00 
2170   1160 00 00 00 00 
2170   1164 00 00 00 00 
2170   1168 00 00 00 00 
2170   116C 00 00 00 00 
2170   1170 00 00 00 00 
2170   1174 00 00 00 00 
2170   1178 00 00 00 00 
2170   117C 00 00 00 00 
2170   1180 00 00 00 00 
2170   1184 00 00 00 00 
2170   1188 00 00 00 00 
2170   118C 00 00 00 00 
2170   1190 00 00 00 00 
2170   1194 00 00 00 00 
2170   1198 00 00 00 00 
2170   119C 00 00 00 00 
2170   11A0 00 00 00 00 
2170   11A4 00 00 00 00 
2170   11A8 00 00 00 00 
2170   11AC 00 00 00 00 
2170   11B0 00 00 00 00 
2170   11B4 00 00 00 00 
2170   11B8 00 00 00 00 
2170   11BC 00 00 00 00 
2170   11C0 00 00 00 00 
2170   11C4 00 00 00 00 
2170   11C8 00 00 00 00 
2170   11CC 00 00 00 00 
2170   11D0 00 
2171   11D1 FD 71         seq ; ==
2172   11D3 FD F1         pop g
2173   11D5 E4            pop a
2174   11D6             ; END RELATIONAL
2175   11D6 C0 00 00      cmp b, 0
2176   11D9 C6 EB 11      je _if32_exit
2177   11DC             _if32_true:
2178   11DC             ;; putchar('0'); 
2179   11DC 26 30 00      mov b, $30
2180   11DF DD            push bl
2181   11E0 07 71 15      call putchar
2182   11E3 51 01 00      add sp, 1
2183   11E6             ;; return; 
2184   11E6 F9            leave
2185   11E7 09            ret
2186   11E8 0A EB 11      jmp _if32_exit
2187   11EB             _if32_exit:
2188   11EB             _if31_exit:
2189   11EB             ;; while (num > 0) { 
2190   11EB             _while33_cond:
2191   11EB FA 05 00      lea d, [bp + 5] ; $num
2192   11EE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2193   11F1 FD 39         mov c, b ; And place it into C
2194   11F3 2A            mov b, [d] ; Lower Word in B
2195   11F4             ; START RELATIONAL
2196   11F4 D7            push a
2197   11F5 FD D8         push g
2198   11F7 11            mov a, b
2199   11F8 FD 7A         mov g, c
2200   11FA 26 00 00      mov b, $0
2201   11FD 38 00 00      mov c, 0
2202   1200 FD 7F         sgt
2203   1202 FD F1         pop g
2204   1204 E4            pop a
2205   1205             ; END RELATIONAL
2206   1205 C0 00 00      cmp b, 0
2207   1208 C6 68 12      je _while33_exit
2208   120B             _while33_block:
2209   120B             ;; digits[i] = '0' + (num % 10); 
2210   120B FA F7 FF      lea d, [bp + -9] ; $digits
2211   120E D7            push a
2212   120F DA            push d
2213   1210 FA F5 FF      lea d, [bp + -11] ; $i
2214   1213 2A            mov b, [d]
2215   1214 E7            pop d
2216   1215 5A            add d, b
2217   1216 E4            pop a
2218   1217 DA            push d
2219   1218 26 30 00      mov b, $30
2220   121B             ; START TERMS
2221   121B D7            push a
2222   121C 11            mov a, b
2223   121D FA 05 00      lea d, [bp + 5] ; $num
2224   1220 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2225   1223 FD 39         mov c, b ; And place it into C
2226   1225 2A            mov b, [d] ; Lower Word in B
2227   1226             ; START FACTORS
2228   1226 D7            push a
2229   1227 11            mov a, b
2230   1228 26 0A 00      mov b, $a
2231   122B AE            div a, b ; 
2232   122C 11            mov a, b
2233   122D 27            mov b, a
2234   122E E4            pop a
2235   122F             ; END FACTORS
2236   122F 54            add a, b
2237   1230 D7            push a
2238   1231 FD 12         mov a, g
2239   1233 28            mov b, c
2240   1234 5C            adc a, b
2241   1235 39            mov c, a
2242   1236 E5            pop b
2243   1237 E4            pop a
2244   1238             ; END TERMS
2245   1238 E7            pop d
2246   1239 FD 3E         mov [d], bl
2247   123B             ;; num = num / 10; 
2248   123B FA 05 00      lea d, [bp + 5] ; $num
2249   123E DA            push d
2250   123F FA 05 00      lea d, [bp + 5] ; $num
2251   1242 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2252   1245 FD 39         mov c, b ; And place it into C
2253   1247 2A            mov b, [d] ; Lower Word in B
2254   1248             ; START FACTORS
2255   1248 D7            push a
2256   1249 11            mov a, b
2257   124A 26 0A 00      mov b, $a
2258   124D AE            div a, b
2259   124E 27            mov b, a
2260   124F E4            pop a
2261   1250             ; END FACTORS
2262   1250 E7            pop d
2263   1251 FD 43         mov [d], b
2264   1253 28            mov b, c
2265   1254 FD 44 02 00   mov [d + 2], b
2266   1258             ;; i++; 
2267   1258 FA F5 FF      lea d, [bp + -11] ; $i
2268   125B 2A            mov b, [d]
2269   125C FD 77         inc b
2270   125E FA F5 FF      lea d, [bp + -11] ; $i
2271   1261 FD 43         mov [d], b
2272   1263 FD 7D         dec b
2273   1265 0A EB 11      jmp _while33_cond
2274   1268             _while33_exit:
2275   1268             ;; while (i > 0) { 
2276   1268             _while34_cond:
2277   1268 FA F5 FF      lea d, [bp + -11] ; $i
2278   126B 2A            mov b, [d]
2279   126C             ; START RELATIONAL
2280   126C D7            push a
2281   126D 11            mov a, b
2282   126E 26 00 00      mov b, $0
2283   1271 B0            cmp a, b
2284   1272 FD 7F         sgt ; >
2285   1274 E4            pop a
2286   1275             ; END RELATIONAL
2287   1275 C0 00 00      cmp b, 0
2288   1278 C6 A1 12      je _while34_exit
2289   127B             _while34_block:
2290   127B             ;; i--; 
2291   127B FA F5 FF      lea d, [bp + -11] ; $i
2292   127E 2A            mov b, [d]
2293   127F FD 7D         dec b
2294   1281 FA F5 FF      lea d, [bp + -11] ; $i
2295   1284 FD 43         mov [d], b
2296   1286 FD 77         inc b
2297   1288             ;; putchar(digits[i]); 
2298   1288 FA F7 FF      lea d, [bp + -9] ; $digits
2299   128B D7            push a
2300   128C DA            push d
2301   128D FA F5 FF      lea d, [bp + -11] ; $i
2302   1290 2A            mov b, [d]
2303   1291 E7            pop d
2304   1292 5A            add d, b
2305   1293 E4            pop a
2306   1294 32            mov bl, [d]
2307   1295 A7 00         mov bh, 0
2308   1297 DD            push bl
2309   1298 07 71 15      call putchar
2310   129B 51 01 00      add sp, 1
2311   129E 0A 68 12      jmp _while34_cond
2312   12A1             _while34_exit:
2313   12A1 F9            leave
2314   12A2 09            ret
2315   12A3             
2316   12A3             print_unsigned_long:
2317   12A3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2318   12A6             ;; char digits[10]; 
2319   12A6 52 0A 00      sub sp, 10 ; digits
2320   12A9             ;; int i; 
2321   12A9 52 02 00      sub sp, 2 ; i
2322   12AC             ;; i = 0; 
2323   12AC FA F5 FF      lea d, [bp + -11] ; $i
2324   12AF DA            push d
2325   12B0 26 00 00      mov b, $0
2326   12B3 E7            pop d
2327   12B4 FD 43         mov [d], b
2328   12B6             ;; if(num == 0){ 
2329   12B6             _if35_cond:
2330   12B6 FA 05 00      lea d, [bp + 5] ; $num
2331   12B9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2332   12BC FD 39         mov c, b ; And place it into C
2333   12BE 2A            mov b, [d] ; Lower Word in B
2334   12BF             ; START RELATIONAL
2335   12BF D7            push a
2336   12C0 FD D8         push g
2337   12C2 11            mov a, b
2338   12C3 FD 7A         mov g, c
2339   12C5 26 00 00      mov b, $0
2340   12C8 38 00 00      mov c, 0
2341   12CB FD AF 00 00   cmp32 ga, cb
2341   12CF 00 00 00 00 
2341   12D3 00 00 00 00 
2341   12D7 00 00 00 00 
2341   12DB 00 00 00 00 
2341   12DF 00 00 00 00 
2341   12E3 00 00 00 00 
2341   12E7 00 00 00 00 
2341   12EB 00 00 00 00 
2341   12EF 00 00 00 00 
2341   12F3 00 00 00 00 
2341   12F7 00 00 00 00 
2341   12FB 00 00 00 00 
2341   12FF 00 00 00 00 
2341   1303 00 00 00 00 
2341   1307 00 00 00 00 
2341   130B 00 00 00 00 
2341   130F 00 00 00 00 
2341   1313 00 00 00 00 
2341   1317 00 00 00 00 
2341   131B 00 00 00 00 
2341   131F 00 00 00 00 
2341   1323 00 00 00 00 
2341   1327 00 00 00 00 
2341   132B 00 00 00 00 
2341   132F 00 00 00 00 
2341   1333 00 00 00 00 
2341   1337 00 00 00 00 
2341   133B 00 00 00 00 
2341   133F 00 00 00 00 
2341   1343 00 00 00 00 
2341   1347 00 00 00 00 
2341   134B 00 00 00 00 
2341   134F 00 00 00 00 
2341   1353 00 00 00 00 
2341   1357 00 00 00 00 
2341   135B 00 00 00 00 
2341   135F 00 00 00 00 
2341   1363 00 00 00 00 
2341   1367 00 00 00 00 
2341   136B 00 00 00 00 
2341   136F 00 00 00 00 
2341   1373 00 00 00 00 
2341   1377 00 00 00 00 
2341   137B 00 00 00 00 
2341   137F 00 00 00 00 
2341   1383 00 00 00 00 
2341   1387 00 00 00 00 
2341   138B 00 00 00 00 
2341   138F 00 00 00 00 
2341   1393 00 00 00 00 
2341   1397 00 00 00 00 
2341   139B 00 00 00 00 
2341   139F 00 00 00 00 
2341   13A3 00 00 00 00 
2341   13A7 00 00 00 00 
2341   13AB 00 00 00 00 
2341   13AF 00 00 00 00 
2341   13B3 00 00 00 00 
2341   13B7 00 00 00 00 
2341   13BB 00 00 00 00 
2341   13BF 00 00 00 00 
2341   13C3 00 00 00 00 
2341   13C7 00 00 00 00 
2341   13CB 00 
2342   13CC FD 71         seq ; ==
2343   13CE FD F1         pop g
2344   13D0 E4            pop a
2345   13D1             ; END RELATIONAL
2346   13D1 C0 00 00      cmp b, 0
2347   13D4 C6 E6 13      je _if35_exit
2348   13D7             _if35_true:
2349   13D7             ;; putchar('0'); 
2350   13D7 26 30 00      mov b, $30
2351   13DA DD            push bl
2352   13DB 07 71 15      call putchar
2353   13DE 51 01 00      add sp, 1
2354   13E1             ;; return; 
2355   13E1 F9            leave
2356   13E2 09            ret
2357   13E3 0A E6 13      jmp _if35_exit
2358   13E6             _if35_exit:
2359   13E6             ;; while (num > 0) { 
2360   13E6             _while36_cond:
2361   13E6 FA 05 00      lea d, [bp + 5] ; $num
2362   13E9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2363   13EC FD 39         mov c, b ; And place it into C
2364   13EE 2A            mov b, [d] ; Lower Word in B
2365   13EF             ; START RELATIONAL
2366   13EF D7            push a
2367   13F0 FD D8         push g
2368   13F2 11            mov a, b
2369   13F3 FD 7A         mov g, c
2370   13F5 26 00 00      mov b, $0
2371   13F8 38 00 00      mov c, 0
2372   13FB FD 81         sgu
2373   13FD FD F1         pop g
2374   13FF E4            pop a
2375   1400             ; END RELATIONAL
2376   1400 C0 00 00      cmp b, 0
2377   1403 C6 63 14      je _while36_exit
2378   1406             _while36_block:
2379   1406             ;; digits[i] = '0' + (num % 10); 
2380   1406 FA F7 FF      lea d, [bp + -9] ; $digits
2381   1409 D7            push a
2382   140A DA            push d
2383   140B FA F5 FF      lea d, [bp + -11] ; $i
2384   140E 2A            mov b, [d]
2385   140F E7            pop d
2386   1410 5A            add d, b
2387   1411 E4            pop a
2388   1412 DA            push d
2389   1413 26 30 00      mov b, $30
2390   1416             ; START TERMS
2391   1416 D7            push a
2392   1417 11            mov a, b
2393   1418 FA 05 00      lea d, [bp + 5] ; $num
2394   141B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2395   141E FD 39         mov c, b ; And place it into C
2396   1420 2A            mov b, [d] ; Lower Word in B
2397   1421             ; START FACTORS
2398   1421 D7            push a
2399   1422 11            mov a, b
2400   1423 26 0A 00      mov b, $a
2401   1426 AE            div a, b ; 
2402   1427 11            mov a, b
2403   1428 27            mov b, a
2404   1429 E4            pop a
2405   142A             ; END FACTORS
2406   142A 54            add a, b
2407   142B D7            push a
2408   142C FD 12         mov a, g
2409   142E 28            mov b, c
2410   142F 5C            adc a, b
2411   1430 39            mov c, a
2412   1431 E5            pop b
2413   1432 E4            pop a
2414   1433             ; END TERMS
2415   1433 E7            pop d
2416   1434 FD 3E         mov [d], bl
2417   1436             ;; num = num / 10; 
2418   1436 FA 05 00      lea d, [bp + 5] ; $num
2419   1439 DA            push d
2420   143A FA 05 00      lea d, [bp + 5] ; $num
2421   143D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2422   1440 FD 39         mov c, b ; And place it into C
2423   1442 2A            mov b, [d] ; Lower Word in B
2424   1443             ; START FACTORS
2425   1443 D7            push a
2426   1444 11            mov a, b
2427   1445 26 0A 00      mov b, $a
2428   1448 AE            div a, b
2429   1449 27            mov b, a
2430   144A E4            pop a
2431   144B             ; END FACTORS
2432   144B E7            pop d
2433   144C FD 43         mov [d], b
2434   144E 28            mov b, c
2435   144F FD 44 02 00   mov [d + 2], b
2436   1453             ;; i++; 
2437   1453 FA F5 FF      lea d, [bp + -11] ; $i
2438   1456 2A            mov b, [d]
2439   1457 FD 77         inc b
2440   1459 FA F5 FF      lea d, [bp + -11] ; $i
2441   145C FD 43         mov [d], b
2442   145E FD 7D         dec b
2443   1460 0A E6 13      jmp _while36_cond
2444   1463             _while36_exit:
2445   1463             ;; while (i > 0) { 
2446   1463             _while37_cond:
2447   1463 FA F5 FF      lea d, [bp + -11] ; $i
2448   1466 2A            mov b, [d]
2449   1467             ; START RELATIONAL
2450   1467 D7            push a
2451   1468 11            mov a, b
2452   1469 26 00 00      mov b, $0
2453   146C B0            cmp a, b
2454   146D FD 7F         sgt ; >
2455   146F E4            pop a
2456   1470             ; END RELATIONAL
2457   1470 C0 00 00      cmp b, 0
2458   1473 C6 9C 14      je _while37_exit
2459   1476             _while37_block:
2460   1476             ;; i--; 
2461   1476 FA F5 FF      lea d, [bp + -11] ; $i
2462   1479 2A            mov b, [d]
2463   147A FD 7D         dec b
2464   147C FA F5 FF      lea d, [bp + -11] ; $i
2465   147F FD 43         mov [d], b
2466   1481 FD 77         inc b
2467   1483             ;; putchar(digits[i]); 
2468   1483 FA F7 FF      lea d, [bp + -9] ; $digits
2469   1486 D7            push a
2470   1487 DA            push d
2471   1488 FA F5 FF      lea d, [bp + -11] ; $i
2472   148B 2A            mov b, [d]
2473   148C E7            pop d
2474   148D 5A            add d, b
2475   148E E4            pop a
2476   148F 32            mov bl, [d]
2477   1490 A7 00         mov bh, 0
2478   1492 DD            push bl
2479   1493 07 71 15      call putchar
2480   1496 51 01 00      add sp, 1
2481   1499 0A 63 14      jmp _while37_cond
2482   149C             _while37_exit:
2483   149C F9            leave
2484   149D 09            ret
2485   149E             
2486   149E             print_unsigned:
2487   149E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2488   14A1             ;; char digits[5]; 
2489   14A1 52 05 00      sub sp, 5 ; digits
2490   14A4             ;; int i; 
2491   14A4 52 02 00      sub sp, 2 ; i
2492   14A7             ;; i = 0; 
2493   14A7 FA FA FF      lea d, [bp + -6] ; $i
2494   14AA DA            push d
2495   14AB 26 00 00      mov b, $0
2496   14AE E7            pop d
2497   14AF FD 43         mov [d], b
2498   14B1             ;; if(num == 0){ 
2499   14B1             _if38_cond:
2500   14B1 FA 05 00      lea d, [bp + 5] ; $num
2501   14B4 2A            mov b, [d]
2502   14B5             ; START RELATIONAL
2503   14B5 D7            push a
2504   14B6 11            mov a, b
2505   14B7 26 00 00      mov b, $0
2506   14BA B0            cmp a, b
2507   14BB FD 71         seq ; ==
2508   14BD E4            pop a
2509   14BE             ; END RELATIONAL
2510   14BE C0 00 00      cmp b, 0
2511   14C1 C6 D3 14      je _if38_exit
2512   14C4             _if38_true:
2513   14C4             ;; putchar('0'); 
2514   14C4 26 30 00      mov b, $30
2515   14C7 DD            push bl
2516   14C8 07 71 15      call putchar
2517   14CB 51 01 00      add sp, 1
2518   14CE             ;; return; 
2519   14CE F9            leave
2520   14CF 09            ret
2521   14D0 0A D3 14      jmp _if38_exit
2522   14D3             _if38_exit:
2523   14D3             ;; while (num > 0) { 
2524   14D3             _while39_cond:
2525   14D3 FA 05 00      lea d, [bp + 5] ; $num
2526   14D6 2A            mov b, [d]
2527   14D7             ; START RELATIONAL
2528   14D7 D7            push a
2529   14D8 11            mov a, b
2530   14D9 26 00 00      mov b, $0
2531   14DC B0            cmp a, b
2532   14DD FD 81         sgu ; > (unsigned)
2533   14DF E4            pop a
2534   14E0             ; END RELATIONAL
2535   14E0 C0 00 00      cmp b, 0
2536   14E3 C6 2D 15      je _while39_exit
2537   14E6             _while39_block:
2538   14E6             ;; digits[i] = '0' + (num % 10); 
2539   14E6 FA FC FF      lea d, [bp + -4] ; $digits
2540   14E9 D7            push a
2541   14EA DA            push d
2542   14EB FA FA FF      lea d, [bp + -6] ; $i
2543   14EE 2A            mov b, [d]
2544   14EF E7            pop d
2545   14F0 5A            add d, b
2546   14F1 E4            pop a
2547   14F2 DA            push d
2548   14F3 26 30 00      mov b, $30
2549   14F6             ; START TERMS
2550   14F6 D7            push a
2551   14F7 11            mov a, b
2552   14F8 FA 05 00      lea d, [bp + 5] ; $num
2553   14FB 2A            mov b, [d]
2554   14FC             ; START FACTORS
2555   14FC D7            push a
2556   14FD 11            mov a, b
2557   14FE 26 0A 00      mov b, $a
2558   1501 AE            div a, b ; 
2559   1502 11            mov a, b
2560   1503 27            mov b, a
2561   1504 E4            pop a
2562   1505             ; END FACTORS
2563   1505 56            add b, a
2564   1506 E4            pop a
2565   1507             ; END TERMS
2566   1507 E7            pop d
2567   1508 FD 3E         mov [d], bl
2568   150A             ;; num = num / 10; 
2569   150A FA 05 00      lea d, [bp + 5] ; $num
2570   150D DA            push d
2571   150E FA 05 00      lea d, [bp + 5] ; $num
2572   1511 2A            mov b, [d]
2573   1512             ; START FACTORS
2574   1512 D7            push a
2575   1513 11            mov a, b
2576   1514 26 0A 00      mov b, $a
2577   1517 AE            div a, b
2578   1518 27            mov b, a
2579   1519 E4            pop a
2580   151A             ; END FACTORS
2581   151A E7            pop d
2582   151B FD 43         mov [d], b
2583   151D             ;; i++; 
2584   151D FA FA FF      lea d, [bp + -6] ; $i
2585   1520 2A            mov b, [d]
2586   1521 FD 77         inc b
2587   1523 FA FA FF      lea d, [bp + -6] ; $i
2588   1526 FD 43         mov [d], b
2589   1528 FD 7D         dec b
2590   152A 0A D3 14      jmp _while39_cond
2591   152D             _while39_exit:
2592   152D             ;; while (i > 0) { 
2593   152D             _while40_cond:
2594   152D FA FA FF      lea d, [bp + -6] ; $i
2595   1530 2A            mov b, [d]
2596   1531             ; START RELATIONAL
2597   1531 D7            push a
2598   1532 11            mov a, b
2599   1533 26 00 00      mov b, $0
2600   1536 B0            cmp a, b
2601   1537 FD 7F         sgt ; >
2602   1539 E4            pop a
2603   153A             ; END RELATIONAL
2604   153A C0 00 00      cmp b, 0
2605   153D C6 66 15      je _while40_exit
2606   1540             _while40_block:
2607   1540             ;; i--; 
2608   1540 FA FA FF      lea d, [bp + -6] ; $i
2609   1543 2A            mov b, [d]
2610   1544 FD 7D         dec b
2611   1546 FA FA FF      lea d, [bp + -6] ; $i
2612   1549 FD 43         mov [d], b
2613   154B FD 77         inc b
2614   154D             ;; putchar(digits[i]); 
2615   154D FA FC FF      lea d, [bp + -4] ; $digits
2616   1550 D7            push a
2617   1551 DA            push d
2618   1552 FA FA FF      lea d, [bp + -6] ; $i
2619   1555 2A            mov b, [d]
2620   1556 E7            pop d
2621   1557 5A            add d, b
2622   1558 E4            pop a
2623   1559 32            mov bl, [d]
2624   155A A7 00         mov bh, 0
2625   155C DD            push bl
2626   155D 07 71 15      call putchar
2627   1560 51 01 00      add sp, 1
2628   1563 0A 2D 15      jmp _while40_cond
2629   1566             _while40_exit:
2630   1566 F9            leave
2631   1567 09            ret
2632   1568             
2633   1568             date:
2634   1568 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2635   156B             
2636   156B             ; --- BEGIN INLINE ASM BLOCK
2637   156B 19 00         mov al, 0 
2638   156D 05 07         syscall sys_datetime
2639   156F             ; --- END INLINE ASM BLOCK
2640   156F             
2641   156F F9            leave
2642   1570 09            ret
2643   1571             
2644   1571             putchar:
2645   1571 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2646   1574             
2647   1574             ; --- BEGIN INLINE ASM BLOCK
2648   1574 FA 05 00      lea d, [bp + 5] ; $c
2649   1577 1E            mov al, [d]
2650   1578 23            mov ah, al
2651   1579 07 02 17      call _putchar
2652   157C             ; --- END INLINE ASM BLOCK
2653   157C             
2654   157C F9            leave
2655   157D 09            ret
2656   157E             
2657   157E             getchar:
2658   157E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2659   1581             ;; char c; 
2660   1581 52 01 00      sub sp, 1 ; c
2661   1584             
2662   1584             ; --- BEGIN INLINE ASM BLOCK
2663   1584 07 FB 16      call getch
2664   1587 1A            mov al, ah
2665   1588 FA 00 00      lea d, [bp + 0] ; $c
2666   158B 3E            mov [d], al
2667   158C             ; --- END INLINE ASM BLOCK
2668   158C             
2669   158C             ;; return c; 
2670   158C FA 00 00      lea d, [bp + 0] ; $c
2671   158F 32            mov bl, [d]
2672   1590 A7 00         mov bh, 0
2673   1592 F9            leave
2674   1593 09            ret
2675   1594             
2676   1594             scann:
2677   1594 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2678   1597             ;; int m; 
2679   1597 52 02 00      sub sp, 2 ; m
2680   159A             
2681   159A             ; --- BEGIN INLINE ASM BLOCK
2682   159A 07 46 19      call scan_u16d
2683   159D FA FF FF      lea d, [bp + -1] ; $m
2684   15A0 43            mov [d], a
2685   15A1             ; --- END INLINE ASM BLOCK
2686   15A1             
2687   15A1             ;; return m; 
2688   15A1 FA FF FF      lea d, [bp + -1] ; $m
2689   15A4 2A            mov b, [d]
2690   15A5 F9            leave
2691   15A6 09            ret
2692   15A7             
2693   15A7             puts:
2694   15A7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2695   15AA             
2696   15AA             ; --- BEGIN INLINE ASM BLOCK
2697   15AA FA 05 00      lea d, [bp + 5] ; $s
2698   15AD 15            mov a, [d]
2699   15AE 3C            mov d, a
2700   15AF 07 4C 18      call _puts
2701   15B2 10 00 0A      mov a, $0A00
2702   15B5 05 03         syscall sys_io
2703   15B7             ; --- END INLINE ASM BLOCK
2704   15B7             
2705   15B7 F9            leave
2706   15B8 09            ret
2707   15B9             
2708   15B9             print:
2709   15B9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2710   15BC             
2711   15BC             ; --- BEGIN INLINE ASM BLOCK
2712   15BC FA 05 00      lea d, [bp + 5] ; $s
2713   15BF FD 2A         mov d, [d]
2714   15C1 07 4C 18      call _puts
2715   15C4             ; --- END INLINE ASM BLOCK
2716   15C4             
2717   15C4 F9            leave
2718   15C5 09            ret
2719   15C6             
2720   15C6             getparam:
2721   15C6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2722   15C9             ;; char data; 
2723   15C9 52 01 00      sub sp, 1 ; data
2724   15CC             
2725   15CC             ; --- BEGIN INLINE ASM BLOCK
2726   15CC 19 04         mov al, 4
2727   15CE FA 05 00      lea d, [bp + 5] ; $address
2728   15D1 FD 2A         mov d, [d]
2729   15D3 05 0C         syscall sys_system
2730   15D5 FA 00 00      lea d, [bp + 0] ; $data
2731   15D8 FD 3E         mov [d], bl
2732   15DA             ; --- END INLINE ASM BLOCK
2733   15DA             
2734   15DA             ;; return data; 
2735   15DA FA 00 00      lea d, [bp + 0] ; $data
2736   15DD 32            mov bl, [d]
2737   15DE A7 00         mov bh, 0
2738   15E0 F9            leave
2739   15E1 09            ret
2740   15E2             
2741   15E2             clear:
2742   15E2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2743   15E5             ;; print("\033[2J\033[H"); 
2744   15E5 26 01 1D      mov b, _s5 ; "\033[2J\033[H"
2745   15E8 FD AB         swp b
2746   15EA D8            push b
2747   15EB 07 B9 15      call print
2748   15EE 51 02 00      add sp, 2
2749   15F1 F9            leave
2750   15F2 09            ret
2751   15F3             
2752   15F3             abs:
2753   15F3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2754   15F6             ;; return i < 0 ? -i : i; 
2755   15F6             _ternary41_cond:
2756   15F6 FA 05 00      lea d, [bp + 5] ; $i
2757   15F9 2A            mov b, [d]
2758   15FA             ; START RELATIONAL
2759   15FA D7            push a
2760   15FB 11            mov a, b
2761   15FC 26 00 00      mov b, $0
2762   15FF B0            cmp a, b
2763   1600 FD 73         slt ; < (signed)
2764   1602 E4            pop a
2765   1603             ; END RELATIONAL
2766   1603 C0 00 00      cmp b, 0
2767   1606 C6 12 16      je _ternary41_false
2768   1609             _ternary41_true:
2769   1609 FA 05 00      lea d, [bp + 5] ; $i
2770   160C 2A            mov b, [d]
2771   160D FD 97         neg b
2772   160F 0A 16 16      jmp _ternary41_exit
2773   1612             _ternary41_false:
2774   1612 FA 05 00      lea d, [bp + 5] ; $i
2775   1615 2A            mov b, [d]
2776   1616             _ternary41_exit:
2777   1616 F9            leave
2778   1617 09            ret
2779   1618             
2780   1618             include_stdio_asm:
2781   1618 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2782   161B             
2783   161B             ; --- BEGIN INLINE ASM BLOCK
2784   161B             .include "lib/asm/stdio.asm"
0001+  161B             ;-----------------------------------------------------------------------------
0002+  161B             ; stdio.s
0003+  161B             ;-----------------------------------------------------------------------------
0004+  161B             .include "lib/asm/string.asm"
0001++ 161B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 161B             ; string.s
0003++ 161B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 161B             
0005++ 161B             
0006++ 161B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 161B             ; _strrev
0008++ 161B             ; reverse a string
0009++ 161B             ; D = string address
0010++ 161B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 161B             ; 01234
0012++ 161B             _strrev:
0013++ 161B 4B          	pusha
0014++ 161C 07 62 16    	call _strlen	; length in C
0015++ 161F 12          	mov a, c
0016++ 1620 AF 01 00    	cmp a, 1
0017++ 1623 D0 3D 16    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1626 7D          	dec a
0019++ 1627 FD 4E       	mov si, d	; beginning of string
0020++ 1629 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 162B 59          	add d, a	; end of string
0022++ 162C 12          	mov a, c
0023++ 162D FD 9B       	shr a		; divide by 2
0024++ 162F 39          	mov c, a	; C now counts the steps
0025++ 1630             _strrev_L0:
0026++ 1630 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1631 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1632 3E          	mov [d], al	; store left char into right side
0029++ 1633 1B          	mov al, bl
0030++ 1634 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1635 7E          	dec c
0032++ 1636 7F          	dec d
0033++ 1637 C2 00 00    	cmp c, 0
0034++ 163A C7 30 16    	jne _strrev_L0
0035++ 163D             _strrev_end:
0036++ 163D 4C          	popa
0037++ 163E 09          	ret
0038++ 163F             	
0039++ 163F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 163F             ; _strchr
0041++ 163F             ; search string in D for char in AL
0042++ 163F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 163F             _strchr:
0044++ 163F             _strchr_L0:
0045++ 163F 32          	mov bl, [d]
0046++ 1640 C1 00       	cmp bl, 0
0047++ 1642 C6 4D 16    	je _strchr_end
0048++ 1645 BA          	cmp al, bl
0049++ 1646 C6 4D 16    	je _strchr_end
0050++ 1649 79          	inc d
0051++ 164A 0A 3F 16    	jmp _strchr_L0
0052++ 164D             _strchr_end:
0053++ 164D 1B          	mov al, bl
0054++ 164E 09          	ret
0055++ 164F             
0056++ 164F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 164F             ; _strstr
0058++ 164F             ; find sub-string
0059++ 164F             ; str1 in SI
0060++ 164F             ; str2 in DI
0061++ 164F             ; SI points to end of source string
0062++ 164F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 164F             _strstr:
0064++ 164F DB          	push al
0065++ 1650 DA          	push d
0066++ 1651 E3          	push di
0067++ 1652             _strstr_loop:
0068++ 1652 F3          	cmpsb					; compare a byte of the strings
0069++ 1653 C7 5E 16    	jne _strstr_ret
0070++ 1656 FC 00 00    	lea d, [di + 0]
0071++ 1659 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 165B C7 52 16    	jne _strstr_loop				; equal chars but not at end
0073++ 165E             _strstr_ret:
0074++ 165E F0          	pop di
0075++ 165F E7          	pop d
0076++ 1660 E8          	pop al
0077++ 1661 09          	ret
0078++ 1662             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1662             ; length of null terminated string
0080++ 1662             ; result in C
0081++ 1662             ; pointer in D
0082++ 1662             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1662             _strlen:
0084++ 1662 DA          	push d
0085++ 1663 38 00 00    	mov c, 0
0086++ 1666             _strlen_L1:
0087++ 1666 BD 00       	cmp byte [d], 0
0088++ 1668 C6 70 16    	je _strlen_ret
0089++ 166B 79          	inc d
0090++ 166C 78          	inc c
0091++ 166D 0A 66 16    	jmp _strlen_L1
0092++ 1670             _strlen_ret:
0093++ 1670 E7          	pop d
0094++ 1671 09          	ret
0095++ 1672             
0096++ 1672             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1672             ; STRCMP
0098++ 1672             ; compare two strings
0099++ 1672             ; str1 in SI
0100++ 1672             ; str2 in DI
0101++ 1672             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1672             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1672             _strcmp:
0104++ 1672 DB          	push al
0105++ 1673 DA          	push d
0106++ 1674 E3          	push di
0107++ 1675 E2          	push si
0108++ 1676             _strcmp_loop:
0109++ 1676 F3          	cmpsb					; compare a byte of the strings
0110++ 1677 C7 82 16    	jne _strcmp_ret
0111++ 167A FB FF FF    	lea d, [si +- 1]
0112++ 167D BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 167F C7 76 16    	jne _strcmp_loop				; equal chars but not at end
0114++ 1682             _strcmp_ret:
0115++ 1682 EF          	pop si
0116++ 1683 F0          	pop di
0117++ 1684 E7          	pop d
0118++ 1685 E8          	pop al
0119++ 1686 09          	ret
0120++ 1687             
0121++ 1687             
0122++ 1687             ; STRCPY
0123++ 1687             ; copy null terminated string from SI to DI
0124++ 1687             ; source in SI
0125++ 1687             ; destination in DI
0126++ 1687             _strcpy:
0127++ 1687 E2          	push si
0128++ 1688 E3          	push di
0129++ 1689 DB          	push al
0130++ 168A             _strcpy_L1:
0131++ 168A F6          	lodsb
0132++ 168B F7          	stosb
0133++ 168C B9 00       	cmp al, 0
0134++ 168E C7 8A 16    	jne _strcpy_L1
0135++ 1691             _strcpy_end:
0136++ 1691 E8          	pop al
0137++ 1692 F0          	pop di
0138++ 1693 EF          	pop si
0139++ 1694 09          	ret
0140++ 1695             
0141++ 1695             ; STRCAT
0142++ 1695             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1695             ; source in SI
0144++ 1695             ; destination in DI
0145++ 1695             _strcat:
0146++ 1695 E2          	push si
0147++ 1696 E3          	push di
0148++ 1697 D7          	push a
0149++ 1698 DA          	push d
0150++ 1699 50          	mov a, di
0151++ 169A 3C          	mov d, a
0152++ 169B             _strcat_goto_end_L1:
0153++ 169B BD 00       	cmp byte[d], 0
0154++ 169D C6 A4 16    	je _strcat_start
0155++ 16A0 79          	inc d
0156++ 16A1 0A 9B 16    	jmp _strcat_goto_end_L1
0157++ 16A4             _strcat_start:
0158++ 16A4 FD 50       	mov di, d
0159++ 16A6             _strcat_L1:
0160++ 16A6 F6          	lodsb
0161++ 16A7 F7          	stosb
0162++ 16A8 B9 00       	cmp al, 0
0163++ 16AA C7 A6 16    	jne _strcat_L1
0164++ 16AD             _strcat_end:
0165++ 16AD E7          	pop d
0166++ 16AE E4          	pop a
0167++ 16AF F0          	pop di
0168++ 16B0 EF          	pop si
0169++ 16B1 09          	ret
0170++ 16B2             
0171++ 16B2             
0005+  16B2             
0006+  16B2             ;-----------------------------------------------------------------------------
0007+  16B2             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  16B2             ; ASCII in BL
0009+  16B2             ; result in AL
0010+  16B2             ; ascii for F = 0100 0110
0011+  16B2             ; ascii for 9 = 0011 1001
0012+  16B2             ;-----------------------------------------------------------------------------
0013+  16B2             hex_ascii_encode:
0014+  16B2 1B            mov al, bl
0015+  16B3 93 40         test al, $40        ; test if letter or number
0016+  16B5 C7 BB 16      jnz hex_letter
0017+  16B8 87 0F         and al, $0F        ; get number
0018+  16BA 09            ret
0019+  16BB             hex_letter:
0020+  16BB 87 0F         and al, $0F        ; get letter
0021+  16BD 6A 09         add al, 9
0022+  16BF 09            ret
0023+  16C0             
0024+  16C0             ;-----------------------------------------------------------------------------
0025+  16C0             ; ATOI
0026+  16C0             ; 2 letter hex string in B
0027+  16C0             ; 8bit integer returned in AL
0028+  16C0             ;-----------------------------------------------------------------------------
0029+  16C0             _atoi:
0030+  16C0 D8            push b
0031+  16C1 07 B2 16      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  16C4 30            mov bl, bh
0033+  16C5 DB            push al          ; save a
0034+  16C6 07 B2 16      call hex_ascii_encode
0035+  16C9 EA            pop bl  
0036+  16CA FD 9E 04      shl al, 4
0037+  16CD 8C            or al, bl
0038+  16CE E5            pop b
0039+  16CF 09            ret  
0040+  16D0             
0041+  16D0             
0042+  16D0             ;-----------------------------------------------------------------------------
0043+  16D0             ; ITOA
0044+  16D0             ; 8bit value in BL
0045+  16D0             ; 2 byte ASCII result in A
0046+  16D0             ;-----------------------------------------------------------------------------
0047+  16D0             _itoa:
0048+  16D0 DA            push d
0049+  16D1 D8            push b
0050+  16D2 A7 00         mov bh, 0
0051+  16D4 FD A4 04      shr bl, 4  
0052+  16D7 74            mov d, b
0053+  16D8 1F 80 19      mov al, [d + s_hex_digits]
0054+  16DB 23            mov ah, al
0055+  16DC               
0056+  16DC E5            pop b
0057+  16DD D8            push b
0058+  16DE A7 00         mov bh, 0
0059+  16E0 FD 87 0F      and bl, $0F
0060+  16E3 74            mov d, b
0061+  16E4 1F 80 19      mov al, [d + s_hex_digits]
0062+  16E7 E5            pop b
0063+  16E8 E7            pop d
0064+  16E9 09            ret
0065+  16EA             
0066+  16EA             ;-----------------------------------------------------------------------------
0067+  16EA             ; HEX STRING TO BINARY
0068+  16EA             ; di = destination address
0069+  16EA             ; si = source
0070+  16EA             ;-----------------------------------------------------------------------------
0071+  16EA             _hex_to_int:
0072+  16EA             _hex_to_int_L1:
0073+  16EA F6            lodsb          ; load from [SI] to AL
0074+  16EB B9 00         cmp al, 0        ; check if ASCII 0
0075+  16ED C6 FA 16      jz _hex_to_int_ret
0076+  16F0 36            mov bh, al
0077+  16F1 F6            lodsb
0078+  16F2 2F            mov bl, al
0079+  16F3 07 C0 16      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  16F6 F7            stosb          ; store AL to [DI]
0081+  16F7 0A EA 16      jmp _hex_to_int_L1
0082+  16FA             _hex_to_int_ret:
0083+  16FA 09            ret    
0084+  16FB             
0085+  16FB             ;-----------------------------------------------------------------------------
0086+  16FB             ; GETCHAR
0087+  16FB             ; char in ah
0088+  16FB             ;-----------------------------------------------------------------------------
0089+  16FB             getch:
0090+  16FB DB            push al
0091+  16FC             getch_retry:
0092+  16FC 19 01         mov al, 1
0093+  16FE 05 03         syscall sys_io      ; receive in AH
0094+  1700 E8            pop al
0095+  1701 09            ret
0096+  1702             
0097+  1702             ;-----------------------------------------------------------------------------
0098+  1702             ; PUTCHAR
0099+  1702             ; char in ah
0100+  1702             ;-----------------------------------------------------------------------------
0101+  1702             _putchar:
0102+  1702 D7            push a
0103+  1703 19 00         mov al, 0
0104+  1705 05 03         syscall sys_io      ; char in AH
0105+  1707 E4            pop a
0106+  1708 09            ret
0107+  1709             
0108+  1709             ;-----------------------------------------------------------------------------
0109+  1709             ;; INPUT A STRING
0110+  1709             ;; terminates with null
0111+  1709             ;; pointer in D
0112+  1709             ;-----------------------------------------------------------------------------
0113+  1709             _gets:
0114+  1709 D7            push a
0115+  170A DA            push d
0116+  170B             _gets_loop:
0117+  170B 19 01         mov al, 1
0118+  170D 05 03         syscall sys_io      ; receive in AH
0119+  170F B9 00         cmp al, 0        ; check error code (AL)
0120+  1711 C6 0B 17      je _gets_loop      ; if no char received, retry
0121+  1714             
0122+  1714 76 1B         cmp ah, 27
0123+  1716 C6 37 17      je _gets_ansi_esc
0124+  1719 76 0A         cmp ah, $0A        ; LF
0125+  171B C6 A2 17      je _gets_end
0126+  171E 76 0D         cmp ah, $0D        ; CR
0127+  1720 C6 A2 17      je _gets_end
0128+  1723 76 5C         cmp ah, $5C        ; '\\'
0129+  1725 C6 63 17      je _gets_escape
0130+  1728               
0131+  1728 76 08         cmp ah, $08      ; check for backspace
0132+  172A C6 33 17      je _gets_backspace
0133+  172D             
0134+  172D 1A            mov al, ah
0135+  172E 3E            mov [d], al
0136+  172F 79            inc d
0137+  1730 0A 0B 17      jmp _gets_loop
0138+  1733             _gets_backspace:
0139+  1733 7F            dec d
0140+  1734 0A 0B 17      jmp _gets_loop
0141+  1737             _gets_ansi_esc:
0142+  1737 19 01         mov al, 1
0143+  1739 05 03         syscall sys_io        ; receive in AH without echo
0144+  173B B9 00         cmp al, 0          ; check error code (AL)
0145+  173D C6 37 17      je _gets_ansi_esc    ; if no char received, retry
0146+  1740 76 5B         cmp ah, '['
0147+  1742 C7 0B 17      jne _gets_loop
0148+  1745             _gets_ansi_esc_2:
0149+  1745 19 01         mov al, 1
0150+  1747 05 03         syscall sys_io          ; receive in AH without echo
0151+  1749 B9 00         cmp al, 0            ; check error code (AL)
0152+  174B C6 45 17      je _gets_ansi_esc_2  ; if no char received, retry
0153+  174E 76 44         cmp ah, 'D'
0154+  1750 C6 5B 17      je _gets_left_arrow
0155+  1753 76 43         cmp ah, 'C'
0156+  1755 C6 5F 17      je _gets_right_arrow
0157+  1758 0A 0B 17      jmp _gets_loop
0158+  175B             _gets_left_arrow:
0159+  175B 7F            dec d
0160+  175C 0A 0B 17      jmp _gets_loop
0161+  175F             _gets_right_arrow:
0162+  175F 79            inc d
0163+  1760 0A 0B 17      jmp _gets_loop
0164+  1763             _gets_escape:
0165+  1763 19 01         mov al, 1
0166+  1765 05 03         syscall sys_io      ; receive in AH
0167+  1767 B9 00         cmp al, 0        ; check error code (AL)
0168+  1769 C6 63 17      je _gets_escape      ; if no char received, retry
0169+  176C 76 6E         cmp ah, 'n'
0170+  176E C6 8D 17      je _gets_LF
0171+  1771 76 72         cmp ah, 'r'
0172+  1773 C6 94 17      je _gets_CR
0173+  1776 76 30         cmp ah, '0'
0174+  1778 C6 9B 17      je _gets_NULL
0175+  177B 76 5C         cmp ah, $5C  ; '\'
0176+  177D C6 86 17      je _gets_slash
0177+  1780 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  1781 3E            mov [d], al
0179+  1782 79            inc d
0180+  1783 0A 0B 17      jmp _gets_loop
0181+  1786             _gets_slash:
0182+  1786 19 5C         mov al, $5C
0183+  1788 3E            mov [d], al
0184+  1789 79            inc d
0185+  178A 0A 0B 17      jmp _gets_loop
0186+  178D             _gets_LF:
0187+  178D 19 0A         mov al, $0A
0188+  178F 3E            mov [d], al
0189+  1790 79            inc d
0190+  1791 0A 0B 17      jmp _gets_loop
0191+  1794             _gets_CR:
0192+  1794 19 0D         mov al, $0D
0193+  1796 3E            mov [d], al
0194+  1797 79            inc d
0195+  1798 0A 0B 17      jmp _gets_loop
0196+  179B             _gets_NULL:
0197+  179B 19 00         mov al, $00
0198+  179D 3E            mov [d], al
0199+  179E 79            inc d
0200+  179F 0A 0B 17      jmp _gets_loop
0201+  17A2             _gets_end:
0202+  17A2 19 00         mov al, 0
0203+  17A4 3E            mov [d], al        ; terminate string
0204+  17A5 E7            pop d
0205+  17A6 E4            pop a
0206+  17A7 09            ret
0207+  17A8             
0208+  17A8             ;-----------------------------------------------------------------------------
0209+  17A8             ;; INPUT TEXT
0210+  17A8             ;; terminated with CTRL+D
0211+  17A8             ;; pointer in D
0212+  17A8             ;-----------------------------------------------------------------------------
0213+  17A8             _gettxt:
0214+  17A8 D7            push a
0215+  17A9 DA            push d
0216+  17AA             _gettxt_loop:
0217+  17AA 19 01         mov al, 1
0218+  17AC 05 03         syscall sys_io      ; receive in AH
0219+  17AE B9 00         cmp al, 0        ; check error code (AL)
0220+  17B0 C6 AA 17      je _gettxt_loop    ; if no char received, retry
0221+  17B3 76 04         cmp ah, 4      ; EOT
0222+  17B5 C6 F3 17      je _gettxt_end
0223+  17B8 76 08         cmp ah, $08      ; check for backspace
0224+  17BA C6 EF 17      je _gettxt_backspace
0225+  17BD 76 5C         cmp ah, $5C        ; '\'
0226+  17BF C6 C8 17      je _gettxt_escape
0227+  17C2 1A            mov al, ah
0228+  17C3 3E            mov [d], al
0229+  17C4 79            inc d
0230+  17C5 0A AA 17      jmp _gettxt_loop
0231+  17C8             _gettxt_escape:
0232+  17C8 19 01         mov al, 1
0233+  17CA 05 03         syscall sys_io      ; receive in AH
0234+  17CC B9 00         cmp al, 0        ; check error code (AL)
0235+  17CE C6 C8 17      je _gettxt_escape    ; if no char received, retry
0236+  17D1 76 6E         cmp ah, 'n'
0237+  17D3 C6 E1 17      je _gettxt_LF
0238+  17D6 76 72         cmp ah, 'r'
0239+  17D8 C6 E8 17      je _gettxt_CR
0240+  17DB 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  17DC 3E            mov [d], al
0242+  17DD 79            inc d
0243+  17DE 0A AA 17      jmp _gettxt_loop
0244+  17E1             _gettxt_LF:
0245+  17E1 19 0A         mov al, $0A
0246+  17E3 3E            mov [d], al
0247+  17E4 79            inc d
0248+  17E5 0A AA 17      jmp _gettxt_loop
0249+  17E8             _gettxt_CR:
0250+  17E8 19 0D         mov al, $0D
0251+  17EA 3E            mov [d], al
0252+  17EB 79            inc d
0253+  17EC 0A AA 17      jmp _gettxt_loop
0254+  17EF             _gettxt_backspace:
0255+  17EF 7F            dec d
0256+  17F0 0A AA 17      jmp _gettxt_loop
0257+  17F3             _gettxt_end:
0258+  17F3 19 00         mov al, 0
0259+  17F5 3E            mov [d], al        ; terminate string
0260+  17F6 E7            pop d
0261+  17F7 E4            pop a
0262+  17F8 09            ret
0263+  17F9             
0264+  17F9             ;-----------------------------------------------------------------------------
0265+  17F9             ; PRINT NEW LINE
0266+  17F9             ;-----------------------------------------------------------------------------
0267+  17F9             printnl:
0268+  17F9 D7            push a
0269+  17FA 10 00 0A      mov a, $0A00
0270+  17FD 05 03         syscall sys_io
0271+  17FF 10 00 0D      mov a, $0D00
0272+  1802 05 03         syscall sys_io
0273+  1804 E4            pop a
0274+  1805 09            ret
0275+  1806             
0276+  1806             ;-----------------------------------------------------------------------------
0277+  1806             ; _strtoint
0278+  1806             ; 4 digit hex string number in d
0279+  1806             ; integer returned in A
0280+  1806             ;-----------------------------------------------------------------------------
0281+  1806             _strtointx:
0282+  1806 D8            push b
0283+  1807 32            mov bl, [d]
0284+  1808 37            mov bh, bl
0285+  1809 33 01 00      mov bl, [d + 1]
0286+  180C 07 C0 16      call _atoi        ; convert to int in AL
0287+  180F 23            mov ah, al        ; move to AH
0288+  1810 33 02 00      mov bl, [d + 2]
0289+  1813 37            mov bh, bl
0290+  1814 33 03 00      mov bl, [d + 3]
0291+  1817 07 C0 16      call _atoi        ; convert to int in AL
0292+  181A E5            pop b
0293+  181B 09            ret
0294+  181C             
0295+  181C             ;-----------------------------------------------------------------------------
0296+  181C             ; _strtoint
0297+  181C             ; 5 digit base10 string number in d
0298+  181C             ; integer returned in A
0299+  181C             ;-----------------------------------------------------------------------------
0300+  181C             _strtoint:
0301+  181C E2            push si
0302+  181D D8            push b
0303+  181E D9            push c
0304+  181F DA            push d
0305+  1820 07 62 16      call _strlen      ; get string length in C
0306+  1823 7E            dec c
0307+  1824 FD 4E         mov si, d
0308+  1826 12            mov a, c
0309+  1827 FD 99         shl a
0310+  1829 3B 98 19      mov d, table_power
0311+  182C 59            add d, a
0312+  182D 38 00 00      mov c, 0
0313+  1830             _strtoint_L0:
0314+  1830 F6            lodsb      ; load ASCII to al
0315+  1831 B9 00         cmp al, 0
0316+  1833 C6 46 18      je _strtoint_end
0317+  1836 6F 30         sub al, $30    ; make into integer
0318+  1838 22 00         mov ah, 0
0319+  183A 2A            mov b, [d]
0320+  183B AC            mul a, b      ; result in B since it fits in 16bits
0321+  183C 11            mov a, b
0322+  183D 28            mov b, c
0323+  183E 54            add a, b
0324+  183F 39            mov c, a
0325+  1840 63 02 00      sub d, 2
0326+  1843 0A 30 18      jmp _strtoint_L0
0327+  1846             _strtoint_end:
0328+  1846 12            mov a, c
0329+  1847 E7            pop d
0330+  1848 E6            pop c
0331+  1849 E5            pop b
0332+  184A EF            pop si
0333+  184B 09            ret
0334+  184C             
0335+  184C             ;-----------------------------------------------------------------------------
0336+  184C             ; PRINT NULL TERMINATED STRING
0337+  184C             ; pointer in D
0338+  184C             ;-----------------------------------------------------------------------------
0339+  184C             _puts:
0340+  184C D7            push a
0341+  184D DA            push d
0342+  184E             _puts_L1:
0343+  184E 1E            mov al, [d]
0344+  184F B9 00         cmp al, 0
0345+  1851 C6 5D 18      jz _puts_END
0346+  1854 23            mov ah, al
0347+  1855 19 00         mov al, 0
0348+  1857 05 03         syscall sys_io
0349+  1859 79            inc d
0350+  185A 0A 4E 18      jmp _puts_L1
0351+  185D             _puts_END:
0352+  185D E7            pop d
0353+  185E E4            pop a
0354+  185F 09            ret
0355+  1860             
0356+  1860             ;-----------------------------------------------------------------------------
0357+  1860             ; PRINT N SIZE STRING
0358+  1860             ; pointer in D
0359+  1860             ; size in C
0360+  1860             ;-----------------------------------------------------------------------------
0361+  1860             _putsn:
0362+  1860 DB            push al
0363+  1861 DA            push d
0364+  1862 D9            push c
0365+  1863             _putsn_L0:
0366+  1863 1E            mov al, [d]
0367+  1864 23            mov ah, al
0368+  1865 19 00         mov al, 0
0369+  1867 05 03         syscall sys_io
0370+  1869 79            inc d
0371+  186A 7E            dec c  
0372+  186B C2 00 00      cmp c, 0
0373+  186E C7 63 18      jne _putsn_L0
0374+  1871             _putsn_end:
0375+  1871 E6            pop c
0376+  1872 E7            pop d
0377+  1873 E8            pop al
0378+  1874 09            ret
0379+  1875             
0380+  1875             ;-----------------------------------------------------------------------------
0381+  1875             ; print 16bit decimal number
0382+  1875             ; input number in A
0383+  1875             ;-----------------------------------------------------------------------------
0384+  1875             print_u16d:
0385+  1875 D7            push a
0386+  1876 D8            push b
0387+  1877 26 10 27      mov b, 10000
0388+  187A AE            div a, b      ; get 10000's coeff.
0389+  187B 07 9D 18      call print_number
0390+  187E 11            mov a, b
0391+  187F 26 E8 03      mov b, 1000
0392+  1882 AE            div a, b      ; get 1000's coeff.
0393+  1883 07 9D 18      call print_number
0394+  1886 11            mov a, b
0395+  1887 26 64 00      mov b, 100
0396+  188A AE            div a, b
0397+  188B 07 9D 18      call print_number
0398+  188E 11            mov a, b
0399+  188F 26 0A 00      mov b, 10
0400+  1892 AE            div a, b
0401+  1893 07 9D 18      call print_number
0402+  1896 1B            mov al, bl      ; 1's coeff in bl
0403+  1897 07 9D 18      call print_number
0404+  189A E5            pop b
0405+  189B E4            pop a
0406+  189C 09            ret
0407+  189D             
0408+  189D             ;-----------------------------------------------------------------------------
0409+  189D             ; print AL
0410+  189D             ;-----------------------------------------------------------------------------
0411+  189D             print_number:
0412+  189D 6A 30         add al, $30
0413+  189F 23            mov ah, al
0414+  18A0 07 02 17      call _putchar
0415+  18A3 09            ret
0416+  18A4             
0417+  18A4             ;-----------------------------------------------------------------------------
0418+  18A4             ; PRINT 16BIT HEX INTEGER
0419+  18A4             ; integer value in reg B
0420+  18A4             ;-----------------------------------------------------------------------------
0421+  18A4             print_u16x:
0422+  18A4 D7            push a
0423+  18A5 D8            push b
0424+  18A6 DD            push bl
0425+  18A7 30            mov bl, bh
0426+  18A8 07 D0 16      call _itoa        ; convert bh to char in A
0427+  18AB 2F            mov bl, al        ; save al
0428+  18AC 19 00         mov al, 0
0429+  18AE 05 03         syscall sys_io        ; display AH
0430+  18B0 24            mov ah, bl        ; retrieve al
0431+  18B1 19 00         mov al, 0
0432+  18B3 05 03         syscall sys_io        ; display AL
0433+  18B5             
0434+  18B5 EA            pop bl
0435+  18B6 07 D0 16      call _itoa        ; convert bh to char in A
0436+  18B9 2F            mov bl, al        ; save al
0437+  18BA 19 00         mov al, 0
0438+  18BC 05 03         syscall sys_io        ; display AH
0439+  18BE 24            mov ah, bl        ; retrieve al
0440+  18BF 19 00         mov al, 0
0441+  18C1 05 03         syscall sys_io        ; display AL
0442+  18C3             
0443+  18C3 E5            pop b
0444+  18C4 E4            pop a
0445+  18C5 09            ret
0446+  18C6             
0447+  18C6             ;-----------------------------------------------------------------------------
0448+  18C6             ; INPUT 16BIT HEX INTEGER
0449+  18C6             ; read 16bit integer into A
0450+  18C6             ;-----------------------------------------------------------------------------
0451+  18C6             scan_u16x:
0452+  18C6 F8 10 00      enter 16
0453+  18C9 D8            push b
0454+  18CA DA            push d
0455+  18CB             
0456+  18CB FA F1 FF      lea d, [bp + -15]
0457+  18CE 07 09 17      call _gets        ; get number
0458+  18D1             
0459+  18D1 32            mov bl, [d]
0460+  18D2 37            mov bh, bl
0461+  18D3 33 01 00      mov bl, [d + 1]
0462+  18D6 07 C0 16      call _atoi        ; convert to int in AL
0463+  18D9 23            mov ah, al        ; move to AH
0464+  18DA             
0465+  18DA 33 02 00      mov bl, [d + 2]
0466+  18DD 37            mov bh, bl
0467+  18DE 33 03 00      mov bl, [d + 3]
0468+  18E1 07 C0 16      call _atoi        ; convert to int in AL
0469+  18E4             
0470+  18E4 E7            pop d
0471+  18E5 E5            pop b
0472+  18E6 F9            leave
0473+  18E7 09            ret
0474+  18E8             
0475+  18E8             ;-----------------------------------------------------------------------------
0476+  18E8             ; PRINT 8bit HEX INTEGER
0477+  18E8             ; integer value in reg bl
0478+  18E8             ;-----------------------------------------------------------------------------
0479+  18E8             print_u8x:
0480+  18E8 D7            push a
0481+  18E9 DD            push bl
0482+  18EA             
0483+  18EA 07 D0 16      call _itoa        ; convert bl to char in A
0484+  18ED 2F            mov bl, al        ; save al
0485+  18EE 19 00         mov al, 0
0486+  18F0 05 03         syscall sys_io        ; display AH
0487+  18F2 24            mov ah, bl        ; retrieve al
0488+  18F3 19 00         mov al, 0
0489+  18F5 05 03         syscall sys_io        ; display AL
0490+  18F7             
0491+  18F7 EA            pop bl
0492+  18F8 E4            pop a
0493+  18F9 09            ret
0494+  18FA             
0495+  18FA             ;-----------------------------------------------------------------------------
0496+  18FA             ; print 8bit decimal unsigned number
0497+  18FA             ; input number in AL
0498+  18FA             ;-----------------------------------------------------------------------------
0499+  18FA             print_u8d:
0500+  18FA D7            push a
0501+  18FB D8            push b
0502+  18FC             
0503+  18FC 22 00         mov ah, 0
0504+  18FE 26 64 00      mov b, 100
0505+  1901 AE            div a, b
0506+  1902 D8            push b      ; save remainder
0507+  1903 B9 00         cmp al, 0
0508+  1905 C6 0F 19      je skip100
0509+  1908 6A 30         add al, $30
0510+  190A 23            mov ah, al
0511+  190B 19 00         mov al, 0
0512+  190D 05 03         syscall sys_io  ; print coeff
0513+  190F             skip100:
0514+  190F E4            pop a
0515+  1910 22 00         mov ah, 0
0516+  1912 26 0A 00      mov b, 10
0517+  1915 AE            div a, b
0518+  1916 D8            push b      ; save remainder
0519+  1917 B9 00         cmp al, 0
0520+  1919 C6 23 19      je skip10
0521+  191C 6A 30         add al, $30
0522+  191E 23            mov ah, al
0523+  191F 19 00         mov al, 0
0524+  1921 05 03         syscall sys_io  ; print coeff
0525+  1923             skip10:
0526+  1923 E4            pop a
0527+  1924 1B            mov al, bl
0528+  1925 6A 30         add al, $30
0529+  1927 23            mov ah, al
0530+  1928 19 00         mov al, 0
0531+  192A 05 03         syscall sys_io  ; print coeff
0532+  192C E5            pop b
0533+  192D E4            pop a
0534+  192E 09            ret
0535+  192F             
0536+  192F             ;-----------------------------------------------------------------------------
0537+  192F             ; INPUT 8BIT HEX INTEGER
0538+  192F             ; read 8bit integer into AL
0539+  192F             ;-----------------------------------------------------------------------------
0540+  192F             scan_u8x:
0541+  192F F8 04 00      enter 4
0542+  1932 D8            push b
0543+  1933 DA            push d
0544+  1934             
0545+  1934 FA FD FF      lea d, [bp + -3]
0546+  1937 07 09 17      call _gets        ; get number
0547+  193A             
0548+  193A 32            mov bl, [d]
0549+  193B 37            mov bh, bl
0550+  193C 33 01 00      mov bl, [d + 1]
0551+  193F 07 C0 16      call _atoi        ; convert to int in AL
0552+  1942             
0553+  1942 E7            pop d
0554+  1943 E5            pop b
0555+  1944 F9            leave
0556+  1945 09            ret
0557+  1946             
0558+  1946             ;-----------------------------------------------------------------------------
0559+  1946             ; input decimal number
0560+  1946             ; result in A
0561+  1946             ; 655'\0'
0562+  1946             ; low--------high
0563+  1946             ;-----------------------------------------------------------------------------
0564+  1946             scan_u16d:
0565+  1946 F8 08 00      enter 8
0566+  1949 E2            push si
0567+  194A D8            push b
0568+  194B D9            push c
0569+  194C DA            push d
0570+  194D FA F9 FF      lea d, [bp +- 7]
0571+  1950 07 09 17      call _gets
0572+  1953 07 62 16      call _strlen      ; get string length in C
0573+  1956 7E            dec c
0574+  1957 FD 4E         mov si, d
0575+  1959 12            mov a, c
0576+  195A FD 99         shl a
0577+  195C 3B 98 19      mov d, table_power
0578+  195F 59            add d, a
0579+  1960 38 00 00      mov c, 0
0580+  1963             mul_loop:
0581+  1963 F6            lodsb      ; load ASCII to al
0582+  1964 B9 00         cmp al, 0
0583+  1966 C6 79 19      je mul_exit
0584+  1969 6F 30         sub al, $30    ; make into integer
0585+  196B 22 00         mov ah, 0
0586+  196D 2A            mov b, [d]
0587+  196E AC            mul a, b      ; result in B since it fits in 16bits
0588+  196F 11            mov a, b
0589+  1970 28            mov b, c
0590+  1971 54            add a, b
0591+  1972 39            mov c, a
0592+  1973 63 02 00      sub d, 2
0593+  1976 0A 63 19      jmp mul_loop
0594+  1979             mul_exit:
0595+  1979 12            mov a, c
0596+  197A E7            pop d
0597+  197B E6            pop c
0598+  197C E5            pop b
0599+  197D EF            pop si
0600+  197E F9            leave
0601+  197F 09            ret
0602+  1980             
0603+  1980 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  1984 34 35 36 37 
0603+  1988 38 39 41 42 
0603+  198C 43 44 45 46 
0604+  1990 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  1994 1B 5B 48 00 
0605+  1998             
0606+  1998             table_power:
0607+  1998 01 00         .dw 1
0608+  199A 0A 00         .dw 10
0609+  199C 64 00         .dw 100
0610+  199E E8 03         .dw 1000
0611+  19A0 10 27         .dw 100002785   19A2             ; --- END INLINE ASM BLOCK
2786   19A2             
2787   19A2 F9            leave
2788   19A3 09            ret
2789   19A4             
2790   19A4             quick:
2791   19A4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2792   19A7             ;; qs(items, 0, count - 1); 
2793   19A7 FA 07 00      lea d, [bp + 7] ; $count
2794   19AA 2A            mov b, [d]
2795   19AB             ; START TERMS
2796   19AB D7            push a
2797   19AC 11            mov a, b
2798   19AD 26 01 00      mov b, $1
2799   19B0 60            sub a, b
2800   19B1 27            mov b, a
2801   19B2 E4            pop a
2802   19B3             ; END TERMS
2803   19B3 FD AB         swp b
2804   19B5 D8            push b
2805   19B6 26 00 00      mov b, $0
2806   19B9 FD AB         swp b
2807   19BB D8            push b
2808   19BC FA 05 00      lea d, [bp + 5] ; $items
2809   19BF 2A            mov b, [d]
2810   19C0 FD AB         swp b
2811   19C2 D8            push b
2812   19C3 07 CB 19      call qs
2813   19C6 51 06 00      add sp, 6
2814   19C9 F9            leave
2815   19CA 09            ret
2816   19CB             
2817   19CB             qs:
2818   19CB F8 00 00      enter 0 ; (push bp; mov bp, sp)
2819   19CE             ;; int i, j; 
2820   19CE 52 02 00      sub sp, 2 ; i
2821   19D1 52 02 00      sub sp, 2 ; j
2822   19D4             ;; char x, y; 
2823   19D4 52 01 00      sub sp, 1 ; x
2824   19D7 52 01 00      sub sp, 1 ; y
2825   19DA             ;; i = left; j = right; 
2826   19DA FA FF FF      lea d, [bp + -1] ; $i
2827   19DD DA            push d
2828   19DE FA 07 00      lea d, [bp + 7] ; $left
2829   19E1 2A            mov b, [d]
2830   19E2 E7            pop d
2831   19E3 FD 43         mov [d], b
2832   19E5             ;; j = right; 
2833   19E5 FA FD FF      lea d, [bp + -3] ; $j
2834   19E8 DA            push d
2835   19E9 FA 09 00      lea d, [bp + 9] ; $right
2836   19EC 2A            mov b, [d]
2837   19ED E7            pop d
2838   19EE FD 43         mov [d], b
2839   19F0             ;; x = *(items + ( (left + right) / 2) ); 
2840   19F0 FA FC FF      lea d, [bp + -4] ; $x
2841   19F3 DA            push d
2842   19F4 FA 05 00      lea d, [bp + 5] ; $items
2843   19F7 2A            mov b, [d]
2844   19F8             ; START TERMS
2845   19F8 D7            push a
2846   19F9 11            mov a, b
2847   19FA FA 07 00      lea d, [bp + 7] ; $left
2848   19FD 2A            mov b, [d]
2849   19FE             ; START TERMS
2850   19FE D7            push a
2851   19FF 11            mov a, b
2852   1A00 FA 09 00      lea d, [bp + 9] ; $right
2853   1A03 2A            mov b, [d]
2854   1A04 56            add b, a
2855   1A05 E4            pop a
2856   1A06             ; END TERMS
2857   1A06             ; START FACTORS
2858   1A06 D7            push a
2859   1A07 11            mov a, b
2860   1A08 26 02 00      mov b, $2
2861   1A0B AE            div a, b
2862   1A0C 27            mov b, a
2863   1A0D E4            pop a
2864   1A0E             ; END FACTORS
2865   1A0E 56            add b, a
2866   1A0F E4            pop a
2867   1A10             ; END TERMS
2868   1A10 74            mov d, b
2869   1A11 32            mov bl, [d]
2870   1A12 A7 00         mov bh, 0
2871   1A14 E7            pop d
2872   1A15 FD 3E         mov [d], bl
2873   1A17             ;; do{ 
2874   1A17             _do42_block:
2875   1A17             ;; while ( ( *(items + i) < x ) && ( i < right ) ) i++; 
2876   1A17             _while43_cond:
2877   1A17 FA 05 00      lea d, [bp + 5] ; $items
2878   1A1A 2A            mov b, [d]
2879   1A1B             ; START TERMS
2880   1A1B D7            push a
2881   1A1C 11            mov a, b
2882   1A1D FA FF FF      lea d, [bp + -1] ; $i
2883   1A20 2A            mov b, [d]
2884   1A21 56            add b, a
2885   1A22 E4            pop a
2886   1A23             ; END TERMS
2887   1A23 74            mov d, b
2888   1A24 32            mov bl, [d]
2889   1A25 A7 00         mov bh, 0
2890   1A27             ; START RELATIONAL
2891   1A27 D7            push a
2892   1A28 11            mov a, b
2893   1A29 FA FC FF      lea d, [bp + -4] ; $x
2894   1A2C 32            mov bl, [d]
2895   1A2D A7 00         mov bh, 0
2896   1A2F B0            cmp a, b
2897   1A30 FD 75         slu ; < (unsigned)
2898   1A32 E4            pop a
2899   1A33             ; END RELATIONAL
2900   1A33             ; START LOGICAL AND
2901   1A33 D7            push a
2902   1A34 11            mov a, b
2903   1A35 FA FF FF      lea d, [bp + -1] ; $i
2904   1A38 2A            mov b, [d]
2905   1A39             ; START RELATIONAL
2906   1A39 D7            push a
2907   1A3A 11            mov a, b
2908   1A3B FA 09 00      lea d, [bp + 9] ; $right
2909   1A3E 2A            mov b, [d]
2910   1A3F B0            cmp a, b
2911   1A40 FD 73         slt ; < (signed)
2912   1A42 E4            pop a
2913   1A43             ; END RELATIONAL
2914   1A43 FD A7         sand a, b
2915   1A45 E4            pop a
2916   1A46             ; END LOGICAL AND
2917   1A46 C0 00 00      cmp b, 0
2918   1A49 C6 5C 1A      je _while43_exit
2919   1A4C             _while43_block:
2920   1A4C             ;; i++; 
2921   1A4C FA FF FF      lea d, [bp + -1] ; $i
2922   1A4F 2A            mov b, [d]
2923   1A50 FD 77         inc b
2924   1A52 FA FF FF      lea d, [bp + -1] ; $i
2925   1A55 FD 43         mov [d], b
2926   1A57 FD 7D         dec b
2927   1A59 0A 17 1A      jmp _while43_cond
2928   1A5C             _while43_exit:
2929   1A5C             ;; while((x < *(items+j)) && (j > left)) j--; 
2930   1A5C             _while44_cond:
2931   1A5C FA FC FF      lea d, [bp + -4] ; $x
2932   1A5F 32            mov bl, [d]
2933   1A60 A7 00         mov bh, 0
2934   1A62             ; START RELATIONAL
2935   1A62 D7            push a
2936   1A63 11            mov a, b
2937   1A64 FA 05 00      lea d, [bp + 5] ; $items
2938   1A67 2A            mov b, [d]
2939   1A68             ; START TERMS
2940   1A68 D7            push a
2941   1A69 11            mov a, b
2942   1A6A FA FD FF      lea d, [bp + -3] ; $j
2943   1A6D 2A            mov b, [d]
2944   1A6E 56            add b, a
2945   1A6F E4            pop a
2946   1A70             ; END TERMS
2947   1A70 74            mov d, b
2948   1A71 32            mov bl, [d]
2949   1A72 A7 00         mov bh, 0
2950   1A74 B0            cmp a, b
2951   1A75 FD 73         slt ; < (signed)
2952   1A77 E4            pop a
2953   1A78             ; END RELATIONAL
2954   1A78             ; START LOGICAL AND
2955   1A78 D7            push a
2956   1A79 11            mov a, b
2957   1A7A FA FD FF      lea d, [bp + -3] ; $j
2958   1A7D 2A            mov b, [d]
2959   1A7E             ; START RELATIONAL
2960   1A7E D7            push a
2961   1A7F 11            mov a, b
2962   1A80 FA 07 00      lea d, [bp + 7] ; $left
2963   1A83 2A            mov b, [d]
2964   1A84 B0            cmp a, b
2965   1A85 FD 7F         sgt ; >
2966   1A87 E4            pop a
2967   1A88             ; END RELATIONAL
2968   1A88 FD A7         sand a, b
2969   1A8A E4            pop a
2970   1A8B             ; END LOGICAL AND
2971   1A8B C0 00 00      cmp b, 0
2972   1A8E C6 A1 1A      je _while44_exit
2973   1A91             _while44_block:
2974   1A91             ;; j--; 
2975   1A91 FA FD FF      lea d, [bp + -3] ; $j
2976   1A94 2A            mov b, [d]
2977   1A95 FD 7D         dec b
2978   1A97 FA FD FF      lea d, [bp + -3] ; $j
2979   1A9A FD 43         mov [d], b
2980   1A9C FD 77         inc b
2981   1A9E 0A 5C 1A      jmp _while44_cond
2982   1AA1             _while44_exit:
2983   1AA1             ;; if(i <= j){ 
2984   1AA1             _if45_cond:
2985   1AA1 FA FF FF      lea d, [bp + -1] ; $i
2986   1AA4 2A            mov b, [d]
2987   1AA5             ; START RELATIONAL
2988   1AA5 D7            push a
2989   1AA6 11            mov a, b
2990   1AA7 FA FD FF      lea d, [bp + -3] ; $j
2991   1AAA 2A            mov b, [d]
2992   1AAB B0            cmp a, b
2993   1AAC FD 74         sle ; <= (signed)
2994   1AAE E4            pop a
2995   1AAF             ; END RELATIONAL
2996   1AAF C0 00 00      cmp b, 0
2997   1AB2 C6 1F 1B      je _if45_exit
2998   1AB5             _if45_true:
2999   1AB5             ;; y = *(items+i); 
3000   1AB5 FA FB FF      lea d, [bp + -5] ; $y
3001   1AB8 DA            push d
3002   1AB9 FA 05 00      lea d, [bp + 5] ; $items
3003   1ABC 2A            mov b, [d]
3004   1ABD             ; START TERMS
3005   1ABD D7            push a
3006   1ABE 11            mov a, b
3007   1ABF FA FF FF      lea d, [bp + -1] ; $i
3008   1AC2 2A            mov b, [d]
3009   1AC3 56            add b, a
3010   1AC4 E4            pop a
3011   1AC5             ; END TERMS
3012   1AC5 74            mov d, b
3013   1AC6 32            mov bl, [d]
3014   1AC7 A7 00         mov bh, 0
3015   1AC9 E7            pop d
3016   1ACA FD 3E         mov [d], bl
3017   1ACC             ;; *(items+i) = *(items+j); 
3018   1ACC FA 05 00      lea d, [bp + 5] ; $items
3019   1ACF 2A            mov b, [d]
3020   1AD0             ; START TERMS
3021   1AD0 D7            push a
3022   1AD1 11            mov a, b
3023   1AD2 FA FF FF      lea d, [bp + -1] ; $i
3024   1AD5 2A            mov b, [d]
3025   1AD6 56            add b, a
3026   1AD7 E4            pop a
3027   1AD8             ; END TERMS
3028   1AD8 D8            push b
3029   1AD9 FA 05 00      lea d, [bp + 5] ; $items
3030   1ADC 2A            mov b, [d]
3031   1ADD             ; START TERMS
3032   1ADD D7            push a
3033   1ADE 11            mov a, b
3034   1ADF FA FD FF      lea d, [bp + -3] ; $j
3035   1AE2 2A            mov b, [d]
3036   1AE3 56            add b, a
3037   1AE4 E4            pop a
3038   1AE5             ; END TERMS
3039   1AE5 74            mov d, b
3040   1AE6 32            mov bl, [d]
3041   1AE7 A7 00         mov bh, 0
3042   1AE9 E7            pop d
3043   1AEA FD 3E         mov [d], bl
3044   1AEC             ;; *(items+j) = y; 
3045   1AEC FA 05 00      lea d, [bp + 5] ; $items
3046   1AEF 2A            mov b, [d]
3047   1AF0             ; START TERMS
3048   1AF0 D7            push a
3049   1AF1 11            mov a, b
3050   1AF2 FA FD FF      lea d, [bp + -3] ; $j
3051   1AF5 2A            mov b, [d]
3052   1AF6 56            add b, a
3053   1AF7 E4            pop a
3054   1AF8             ; END TERMS
3055   1AF8 D8            push b
3056   1AF9 FA FB FF      lea d, [bp + -5] ; $y
3057   1AFC 32            mov bl, [d]
3058   1AFD A7 00         mov bh, 0
3059   1AFF E7            pop d
3060   1B00 FD 3E         mov [d], bl
3061   1B02             ;; i++; j--; 
3062   1B02 FA FF FF      lea d, [bp + -1] ; $i
3063   1B05 2A            mov b, [d]
3064   1B06 FD 77         inc b
3065   1B08 FA FF FF      lea d, [bp + -1] ; $i
3066   1B0B FD 43         mov [d], b
3067   1B0D FD 7D         dec b
3068   1B0F             ;; j--; 
3069   1B0F FA FD FF      lea d, [bp + -3] ; $j
3070   1B12 2A            mov b, [d]
3071   1B13 FD 7D         dec b
3072   1B15 FA FD FF      lea d, [bp + -3] ; $j
3073   1B18 FD 43         mov [d], b
3074   1B1A FD 77         inc b
3075   1B1C 0A 1F 1B      jmp _if45_exit
3076   1B1F             _if45_exit:
3077   1B1F             ;; } while(i <= j); 
3078   1B1F             _do42_cond:
3079   1B1F FA FF FF      lea d, [bp + -1] ; $i
3080   1B22 2A            mov b, [d]
3081   1B23             ; START RELATIONAL
3082   1B23 D7            push a
3083   1B24 11            mov a, b
3084   1B25 FA FD FF      lea d, [bp + -3] ; $j
3085   1B28 2A            mov b, [d]
3086   1B29 B0            cmp a, b
3087   1B2A FD 74         sle ; <= (signed)
3088   1B2C E4            pop a
3089   1B2D             ; END RELATIONAL
3090   1B2D C0 01 00      cmp b, 1
3091   1B30 C6 17 1A      je _do42_block
3092   1B33             _do42_exit:
3093   1B33             ;; if(left < j) qs(items, left, j); 
3094   1B33             _if46_cond:
3095   1B33 FA 07 00      lea d, [bp + 7] ; $left
3096   1B36 2A            mov b, [d]
3097   1B37             ; START RELATIONAL
3098   1B37 D7            push a
3099   1B38 11            mov a, b
3100   1B39 FA FD FF      lea d, [bp + -3] ; $j
3101   1B3C 2A            mov b, [d]
3102   1B3D B0            cmp a, b
3103   1B3E FD 73         slt ; < (signed)
3104   1B40 E4            pop a
3105   1B41             ; END RELATIONAL
3106   1B41 C0 00 00      cmp b, 0
3107   1B44 C6 65 1B      je _if46_exit
3108   1B47             _if46_true:
3109   1B47             ;; qs(items, left, j); 
3110   1B47 FA FD FF      lea d, [bp + -3] ; $j
3111   1B4A 2A            mov b, [d]
3112   1B4B FD AB         swp b
3113   1B4D D8            push b
3114   1B4E FA 07 00      lea d, [bp + 7] ; $left
3115   1B51 2A            mov b, [d]
3116   1B52 FD AB         swp b
3117   1B54 D8            push b
3118   1B55 FA 05 00      lea d, [bp + 5] ; $items
3119   1B58 2A            mov b, [d]
3120   1B59 FD AB         swp b
3121   1B5B D8            push b
3122   1B5C 07 CB 19      call qs
3123   1B5F 51 06 00      add sp, 6
3124   1B62 0A 65 1B      jmp _if46_exit
3125   1B65             _if46_exit:
3126   1B65             ;; if(i < right) qs(items, i, right); 
3127   1B65             _if47_cond:
3128   1B65 FA FF FF      lea d, [bp + -1] ; $i
3129   1B68 2A            mov b, [d]
3130   1B69             ; START RELATIONAL
3131   1B69 D7            push a
3132   1B6A 11            mov a, b
3133   1B6B FA 09 00      lea d, [bp + 9] ; $right
3134   1B6E 2A            mov b, [d]
3135   1B6F B0            cmp a, b
3136   1B70 FD 73         slt ; < (signed)
3137   1B72 E4            pop a
3138   1B73             ; END RELATIONAL
3139   1B73 C0 00 00      cmp b, 0
3140   1B76 C6 97 1B      je _if47_exit
3141   1B79             _if47_true:
3142   1B79             ;; qs(items, i, right); 
3143   1B79 FA 09 00      lea d, [bp + 9] ; $right
3144   1B7C 2A            mov b, [d]
3145   1B7D FD AB         swp b
3146   1B7F D8            push b
3147   1B80 FA FF FF      lea d, [bp + -1] ; $i
3148   1B83 2A            mov b, [d]
3149   1B84 FD AB         swp b
3150   1B86 D8            push b
3151   1B87 FA 05 00      lea d, [bp + 5] ; $items
3152   1B8A 2A            mov b, [d]
3153   1B8B FD AB         swp b
3154   1B8D D8            push b
3155   1B8E 07 CB 19      call qs
3156   1B91 51 06 00      add sp, 6
3157   1B94 0A 97 1B      jmp _if47_exit
3158   1B97             _if47_exit:
3159   1B97 F9            leave
3160   1B98 09            ret
3161   1B99             ; --- END TEXT BLOCK
3162   1B99             
3163   1B99             ; --- BEGIN DATA BLOCK
3164   1B99 00 00 00 00 _mystring_data: .fill 256, 0
3164   1B9D 00 00 00 00 
3164   1BA1 00 00 00 00 
3164   1BA5 00 00 00 00 
3164   1BA9 00 00 00 00 
3164   1BAD 00 00 00 00 
3164   1BB1 00 00 00 00 
3164   1BB5 00 00 00 00 
3164   1BB9 00 00 00 00 
3164   1BBD 00 00 00 00 
3164   1BC1 00 00 00 00 
3164   1BC5 00 00 00 00 
3164   1BC9 00 00 00 00 
3164   1BCD 00 00 00 00 
3164   1BD1 00 00 00 00 
3164   1BD5 00 00 00 00 
3164   1BD9 00 00 00 00 
3164   1BDD 00 00 00 00 
3164   1BE1 00 00 00 00 
3164   1BE5 00 00 00 00 
3164   1BE9 00 00 00 00 
3164   1BED 00 00 00 00 
3164   1BF1 00 00 00 00 
3164   1BF5 00 00 00 00 
3164   1BF9 00 00 00 00 
3164   1BFD 00 00 00 00 
3164   1C01 00 00 00 00 
3164   1C05 00 00 00 00 
3164   1C09 00 00 00 00 
3164   1C0D 00 00 00 00 
3164   1C11 00 00 00 00 
3164   1C15 00 00 00 00 
3164   1C19 00 00 00 00 
3164   1C1D 00 00 00 00 
3164   1C21 00 00 00 00 
3164   1C25 00 00 00 00 
3164   1C29 00 00 00 00 
3164   1C2D 00 00 00 00 
3164   1C31 00 00 00 00 
3164   1C35 00 00 00 00 
3164   1C39 00 00 00 00 
3164   1C3D 00 00 00 00 
3164   1C41 00 00 00 00 
3164   1C45 00 00 00 00 
3164   1C49 00 00 00 00 
3164   1C4D 00 00 00 00 
3164   1C51 00 00 00 00 
3164   1C55 00 00 00 00 
3164   1C59 00 00 00 00 
3164   1C5D 00 00 00 00 
3164   1C61 00 00 00 00 
3164   1C65 00 00 00 00 
3164   1C69 00 00 00 00 
3164   1C6D 00 00 00 00 
3164   1C71 00 00 00 00 
3164   1C75 00 00 00 00 
3164   1C79 00 00 00 00 
3164   1C7D 00 00 00 00 
3164   1C81 00 00 00 00 
3164   1C85 00 00 00 00 
3164   1C89 00 00 00 00 
3164   1C8D 00 00 00 00 
3164   1C91 00 00 00 00 
3164   1C95 00 00 00 00 
3165   1C99 45 6E 74 65 _s0: .db "Enter a string(256 max): ", 0
3165   1C9D 72 20 61 20 
3165   1CA1 73 74 72 69 
3165   1CA5 6E 67 28 32 
3165   1CA9 35 36 20 6D 
3165   1CAD 61 78 29 3A 
3165   1CB1 20 00 
3166   1CB3 0A 00       _s1: .db "\n", 0
3167   1CB5 53 6F 72 74 _s2: .db "Sorted string: ", 0
3167   1CB9 65 64 20 73 
3167   1CBD 74 72 69 6E 
3167   1CC1 67 3A 20 00 
3168   1CC5 55 6E 65 78 _s3: .db "Unexpected format in printf.", 0
3168   1CC9 70 65 63 74 
3168   1CCD 65 64 20 66 
3168   1CD1 6F 72 6D 61 
3168   1CD5 74 20 69 6E 
3168   1CD9 20 70 72 69 
3168   1CDD 6E 74 66 2E 
3168   1CE1 00 
3169   1CE2 45 72 72 6F _s4: .db "Error: Unknown argument type.\n", 0
3169   1CE6 72 3A 20 55 
3169   1CEA 6E 6B 6E 6F 
3169   1CEE 77 6E 20 61 
3169   1CF2 72 67 75 6D 
3169   1CF6 65 6E 74 20 
3169   1CFA 74 79 70 65 
3169   1CFE 2E 0A 00 
3170   1D01 1B 5B 32 4A _s5: .db "\033[2J\033[H", 0
3170   1D05 1B 5B 48 00 
3171   1D09             
3172   1D09 0B 1D       _heap_top: .dw _heap
3173   1D0B 00          _heap: .db 0
3174   1D0C             ; --- END DATA BLOCK
3175   1D0C             
3176   1D0C             .end
tasm: Number of errors = 0
