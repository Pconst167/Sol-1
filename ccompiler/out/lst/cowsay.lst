0001   0000             ; --- FILENAME: games/cowsay
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             strcpy:
0008   0400 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0009   0403             ; $psrc 
0010   0403             ; $pdest 
0011   0403 52 04 00      sub sp, 4
0012   0406             ;; psrc = src; 
0013   0406 FA FF FF      lea d, [bp + -1] ; $psrc
0014   0409 DA            push d
0015   040A FA 07 00      lea d, [bp + 7] ; $src
0016   040D 2A            mov b, [d]
0017   040E E7            pop d
0018   040F FD 43         mov [d], b
0019   0411             ;; pdest = dest; 
0020   0411 FA FD FF      lea d, [bp + -3] ; $pdest
0021   0414 DA            push d
0022   0415 FA 05 00      lea d, [bp + 5] ; $dest
0023   0418 2A            mov b, [d]
0024   0419 E7            pop d
0025   041A FD 43         mov [d], b
0026   041C             ;; while(*psrc) *pdest++ = *psrc++; 
0027   041C             _while1_cond:
0028   041C FA FF FF      lea d, [bp + -1] ; $psrc
0029   041F 2A            mov b, [d]
0030   0420 74            mov d, b
0031   0421 32            mov bl, [d]
0032   0422 A7 00         mov bh, 0
0033   0424 C0 00 00      cmp b, 0
0034   0427 C6 4F 04      je _while1_exit
0035   042A             _while1_block:
0036   042A             ;; *pdest++ = *psrc++; 
0037   042A FA FD FF      lea d, [bp + -3] ; $pdest
0038   042D 2A            mov b, [d]
0039   042E D8            push b
0040   042F FD 77         inc b
0041   0431 FA FD FF      lea d, [bp + -3] ; $pdest
0042   0434 FD 43         mov [d], b
0043   0436 E5            pop b
0044   0437 D8            push b
0045   0438 FA FF FF      lea d, [bp + -1] ; $psrc
0046   043B 2A            mov b, [d]
0047   043C D8            push b
0048   043D FD 77         inc b
0049   043F FA FF FF      lea d, [bp + -1] ; $psrc
0050   0442 FD 43         mov [d], b
0051   0444 E5            pop b
0052   0445 74            mov d, b
0053   0446 32            mov bl, [d]
0054   0447 A7 00         mov bh, 0
0055   0449 E7            pop d
0056   044A FD 3E         mov [d], bl
0057   044C 0A 1C 04      jmp _while1_cond
0058   044F             _while1_exit:
0059   044F             ;; *pdest = '\0'; 
0060   044F FA FD FF      lea d, [bp + -3] ; $pdest
0061   0452 2A            mov b, [d]
0062   0453 D8            push b
0063   0454 26 00 00      mov b, $0
0064   0457 E7            pop d
0065   0458 FD 3E         mov [d], bl
0066   045A F9            leave
0067   045B 09            ret
0068   045C             
0069   045C             strcmp:
0070   045C F8 00 00      enter 0 ; (push bp; mov bp, sp)
0071   045F             ;; while (*s1 && (*s1 == *s2)) { 
0072   045F             _while2_cond:
0073   045F FA 05 00      lea d, [bp + 5] ; $s1
0074   0462 2A            mov b, [d]
0075   0463 74            mov d, b
0076   0464 32            mov bl, [d]
0077   0465 A7 00         mov bh, 0
0078   0467 D7            push a
0079   0468 11            mov a, b
0080   0469 FA 05 00      lea d, [bp + 5] ; $s1
0081   046C 2A            mov b, [d]
0082   046D 74            mov d, b
0083   046E 32            mov bl, [d]
0084   046F A7 00         mov bh, 0
0085   0471             ; START RELATIONAL
0086   0471 D7            push a
0087   0472 11            mov a, b
0088   0473 FA 07 00      lea d, [bp + 7] ; $s2
0089   0476 2A            mov b, [d]
0090   0477 74            mov d, b
0091   0478 32            mov bl, [d]
0092   0479 A7 00         mov bh, 0
0093   047B B0            cmp a, b
0094   047C FD 71         seq ; ==
0095   047E E4            pop a
0096   047F             ; END RELATIONAL
0097   047F FD A7         sand a, b ; &&
0098   0481 E4            pop a
0099   0482 C0 00 00      cmp b, 0
0100   0485 C6 A5 04      je _while2_exit
0101   0488             _while2_block:
0102   0488             ;; s1++; 
0103   0488 FA 05 00      lea d, [bp + 5] ; $s1
0104   048B 2A            mov b, [d]
0105   048C D8            push b
0106   048D FD 77         inc b
0107   048F FA 05 00      lea d, [bp + 5] ; $s1
0108   0492 FD 43         mov [d], b
0109   0494 E5            pop b
0110   0495             ;; s2++; 
0111   0495 FA 07 00      lea d, [bp + 7] ; $s2
0112   0498 2A            mov b, [d]
0113   0499 D8            push b
0114   049A FD 77         inc b
0115   049C FA 07 00      lea d, [bp + 7] ; $s2
0116   049F FD 43         mov [d], b
0117   04A1 E5            pop b
0118   04A2 0A 5F 04      jmp _while2_cond
0119   04A5             _while2_exit:
0120   04A5             ;; return *s1 - *s2; 
0121   04A5 FA 05 00      lea d, [bp + 5] ; $s1
0122   04A8 2A            mov b, [d]
0123   04A9 74            mov d, b
0124   04AA 32            mov bl, [d]
0125   04AB A7 00         mov bh, 0
0126   04AD             ; START TERMS
0127   04AD D7            push a
0128   04AE 11            mov a, b
0129   04AF FA 07 00      lea d, [bp + 7] ; $s2
0130   04B2 2A            mov b, [d]
0131   04B3 74            mov d, b
0132   04B4 32            mov bl, [d]
0133   04B5 A7 00         mov bh, 0
0134   04B7 60            sub a, b
0135   04B8 27            mov b, a
0136   04B9 E4            pop a
0137   04BA             ; END TERMS
0138   04BA F9            leave
0139   04BB 09            ret
0140   04BC             
0141   04BC             strcat:
0142   04BC F8 00 00      enter 0 ; (push bp; mov bp, sp)
0143   04BF             ; $dest_len 
0144   04BF             ; $i 
0145   04BF 52 04 00      sub sp, 4
0146   04C2             ;; dest_len = strlen(dest); 
0147   04C2 FA FF FF      lea d, [bp + -1] ; $dest_len
0148   04C5 DA            push d
0149   04C6 FA 05 00      lea d, [bp + 5] ; $dest
0150   04C9 2A            mov b, [d]
0151   04CA FD AB         swp b
0152   04CC D8            push b
0153   04CD 07 6F 05      call strlen
0154   04D0 51 02 00      add sp, 2
0155   04D3 E7            pop d
0156   04D4 FD 43         mov [d], b
0157   04D6             ;; for (i = 0; src[i] != 0; i=i+1) { 
0158   04D6             _for3_init:
0159   04D6 FA FD FF      lea d, [bp + -3] ; $i
0160   04D9 DA            push d
0161   04DA 26 00 00      mov b, $0
0162   04DD E7            pop d
0163   04DE FD 43         mov [d], b
0164   04E0             _for3_cond:
0165   04E0 FA 07 00      lea d, [bp + 7] ; $src
0166   04E3 FD 2A         mov d, [d]
0167   04E5 D7            push a
0168   04E6 DA            push d
0169   04E7 FA FD FF      lea d, [bp + -3] ; $i
0170   04EA 2A            mov b, [d]
0171   04EB E7            pop d
0172   04EC FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0173   04F0 E4            pop a
0174   04F1 32            mov bl, [d]
0175   04F2 A7 00         mov bh, 0
0176   04F4             ; START RELATIONAL
0177   04F4 D7            push a
0178   04F5 11            mov a, b
0179   04F6 26 00 00      mov b, $0
0180   04F9 B0            cmp a, b
0181   04FA FD 72         sneq ; !=
0182   04FC E4            pop a
0183   04FD             ; END RELATIONAL
0184   04FD C0 00 00      cmp b, 0
0185   0500 C6 49 05      je _for3_exit
0186   0503             _for3_block:
0187   0503             ;; dest[dest_len + i] = src[i]; 
0188   0503 FA 05 00      lea d, [bp + 5] ; $dest
0189   0506 FD 2A         mov d, [d]
0190   0508 D7            push a
0191   0509 DA            push d
0192   050A FA FF FF      lea d, [bp + -1] ; $dest_len
0193   050D 2A            mov b, [d]
0194   050E             ; START TERMS
0195   050E D7            push a
0196   050F 11            mov a, b
0197   0510 FA FD FF      lea d, [bp + -3] ; $i
0198   0513 2A            mov b, [d]
0199   0514 56            add b, a
0200   0515 E4            pop a
0201   0516             ; END TERMS
0202   0516 E7            pop d
0203   0517 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0204   051B E4            pop a
0205   051C DA            push d
0206   051D FA 07 00      lea d, [bp + 7] ; $src
0207   0520 FD 2A         mov d, [d]
0208   0522 D7            push a
0209   0523 DA            push d
0210   0524 FA FD FF      lea d, [bp + -3] ; $i
0211   0527 2A            mov b, [d]
0212   0528 E7            pop d
0213   0529 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0214   052D E4            pop a
0215   052E 32            mov bl, [d]
0216   052F A7 00         mov bh, 0
0217   0531 E7            pop d
0218   0532 FD 3E         mov [d], bl
0219   0534             _for3_update:
0220   0534 FA FD FF      lea d, [bp + -3] ; $i
0221   0537 DA            push d
0222   0538 FA FD FF      lea d, [bp + -3] ; $i
0223   053B 2A            mov b, [d]
0224   053C             ; START TERMS
0225   053C D7            push a
0226   053D 11            mov a, b
0227   053E 26 01 00      mov b, $1
0228   0541 56            add b, a
0229   0542 E4            pop a
0230   0543             ; END TERMS
0231   0543 E7            pop d
0232   0544 FD 43         mov [d], b
0233   0546 0A E0 04      jmp _for3_cond
0234   0549             _for3_exit:
0235   0549             ;; dest[dest_len + i] = 0; 
0236   0549 FA 05 00      lea d, [bp + 5] ; $dest
0237   054C FD 2A         mov d, [d]
0238   054E D7            push a
0239   054F DA            push d
0240   0550 FA FF FF      lea d, [bp + -1] ; $dest_len
0241   0553 2A            mov b, [d]
0242   0554             ; START TERMS
0243   0554 D7            push a
0244   0555 11            mov a, b
0245   0556 FA FD FF      lea d, [bp + -3] ; $i
0246   0559 2A            mov b, [d]
0247   055A 56            add b, a
0248   055B E4            pop a
0249   055C             ; END TERMS
0250   055C E7            pop d
0251   055D FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0252   0561 E4            pop a
0253   0562 DA            push d
0254   0563 26 00 00      mov b, $0
0255   0566 E7            pop d
0256   0567 FD 3E         mov [d], bl
0257   0569             ;; return dest; 
0258   0569 FA 05 00      lea d, [bp + 5] ; $dest
0259   056C 2A            mov b, [d]
0260   056D F9            leave
0261   056E 09            ret
0262   056F             
0263   056F             strlen:
0264   056F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0265   0572             ; $length 
0266   0572 52 02 00      sub sp, 2
0267   0575             ;; length = 0; 
0268   0575 FA FF FF      lea d, [bp + -1] ; $length
0269   0578 DA            push d
0270   0579 26 00 00      mov b, $0
0271   057C E7            pop d
0272   057D FD 43         mov [d], b
0273   057F             ;; while (str[length] != 0) { 
0274   057F             _while4_cond:
0275   057F FA 05 00      lea d, [bp + 5] ; $str
0276   0582 FD 2A         mov d, [d]
0277   0584 D7            push a
0278   0585 DA            push d
0279   0586 FA FF FF      lea d, [bp + -1] ; $length
0280   0589 2A            mov b, [d]
0281   058A E7            pop d
0282   058B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0283   058F E4            pop a
0284   0590 32            mov bl, [d]
0285   0591 A7 00         mov bh, 0
0286   0593             ; START RELATIONAL
0287   0593 D7            push a
0288   0594 11            mov a, b
0289   0595 26 00 00      mov b, $0
0290   0598 B0            cmp a, b
0291   0599 FD 72         sneq ; !=
0292   059B E4            pop a
0293   059C             ; END RELATIONAL
0294   059C C0 00 00      cmp b, 0
0295   059F C6 B2 05      je _while4_exit
0296   05A2             _while4_block:
0297   05A2             ;; length++; 
0298   05A2 FA FF FF      lea d, [bp + -1] ; $length
0299   05A5 2A            mov b, [d]
0300   05A6 D8            push b
0301   05A7 FD 77         inc b
0302   05A9 FA FF FF      lea d, [bp + -1] ; $length
0303   05AC FD 43         mov [d], b
0304   05AE E5            pop b
0305   05AF 0A 7F 05      jmp _while4_cond
0306   05B2             _while4_exit:
0307   05B2             ;; return length; 
0308   05B2 FA FF FF      lea d, [bp + -1] ; $length
0309   05B5 2A            mov b, [d]
0310   05B6 F9            leave
0311   05B7 09            ret
0312   05B8             
0313   05B8             exit:
0314   05B8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0315   05BB             
0316   05BB             ; --- BEGIN INLINE ASM BLOCK
0317   05BB 05 0B         syscall sys_terminate_proc
0318   05BD             ; --- END INLINE ASM BLOCK
0319   05BD             
0320   05BD F9            leave
0321   05BE 09            ret
0322   05BF             
0323   05BF             atoi:
0324   05BF F8 00 00      enter 0 ; (push bp; mov bp, sp)
0325   05C2             ; $result 
0326   05C2 10 00 00      mov a, $0
0327   05C5 45 FF FF      mov [bp + -1], a
0328   05C8             ; $sign 
0329   05C8 10 01 00      mov a, $1
0330   05CB 45 FD FF      mov [bp + -3], a
0331   05CE 52 04 00      sub sp, 4
0332   05D1             ;; while (*str == ' ') str++; 
0333   05D1             _while5_cond:
0334   05D1 FA 05 00      lea d, [bp + 5] ; $str
0335   05D4 2A            mov b, [d]
0336   05D5 74            mov d, b
0337   05D6 32            mov bl, [d]
0338   05D7 A7 00         mov bh, 0
0339   05D9             ; START RELATIONAL
0340   05D9 D7            push a
0341   05DA 11            mov a, b
0342   05DB 26 20 00      mov b, $20
0343   05DE B0            cmp a, b
0344   05DF FD 71         seq ; ==
0345   05E1 E4            pop a
0346   05E2             ; END RELATIONAL
0347   05E2 C0 00 00      cmp b, 0
0348   05E5 C6 F8 05      je _while5_exit
0349   05E8             _while5_block:
0350   05E8             ;; str++; 
0351   05E8 FA 05 00      lea d, [bp + 5] ; $str
0352   05EB 2A            mov b, [d]
0353   05EC D8            push b
0354   05ED FD 77         inc b
0355   05EF FA 05 00      lea d, [bp + 5] ; $str
0356   05F2 FD 43         mov [d], b
0357   05F4 E5            pop b
0358   05F5 0A D1 05      jmp _while5_cond
0359   05F8             _while5_exit:
0360   05F8             ;; if (*str == '-' || *str == '+') { 
0361   05F8             _if6_cond:
0362   05F8 FA 05 00      lea d, [bp + 5] ; $str
0363   05FB 2A            mov b, [d]
0364   05FC 74            mov d, b
0365   05FD 32            mov bl, [d]
0366   05FE A7 00         mov bh, 0
0367   0600             ; START RELATIONAL
0368   0600 D7            push a
0369   0601 11            mov a, b
0370   0602 26 2D 00      mov b, $2d
0371   0605 B0            cmp a, b
0372   0606 FD 71         seq ; ==
0373   0608 E4            pop a
0374   0609             ; END RELATIONAL
0375   0609 D7            push a
0376   060A 11            mov a, b
0377   060B FA 05 00      lea d, [bp + 5] ; $str
0378   060E 2A            mov b, [d]
0379   060F 74            mov d, b
0380   0610 32            mov bl, [d]
0381   0611 A7 00         mov bh, 0
0382   0613             ; START RELATIONAL
0383   0613 D7            push a
0384   0614 11            mov a, b
0385   0615 26 2B 00      mov b, $2b
0386   0618 B0            cmp a, b
0387   0619 FD 71         seq ; ==
0388   061B E4            pop a
0389   061C             ; END RELATIONAL
0390   061C FD A8         sor a, b ; ||
0391   061E E4            pop a
0392   061F C0 00 00      cmp b, 0
0393   0622 C6 59 06      je _if6_exit
0394   0625             _if6_true:
0395   0625             ;; if (*str == '-') sign = -1; 
0396   0625             _if7_cond:
0397   0625 FA 05 00      lea d, [bp + 5] ; $str
0398   0628 2A            mov b, [d]
0399   0629 74            mov d, b
0400   062A 32            mov bl, [d]
0401   062B A7 00         mov bh, 0
0402   062D             ; START RELATIONAL
0403   062D D7            push a
0404   062E 11            mov a, b
0405   062F 26 2D 00      mov b, $2d
0406   0632 B0            cmp a, b
0407   0633 FD 71         seq ; ==
0408   0635 E4            pop a
0409   0636             ; END RELATIONAL
0410   0636 C0 00 00      cmp b, 0
0411   0639 C6 49 06      je _if7_exit
0412   063C             _if7_true:
0413   063C             ;; sign = -1; 
0414   063C FA FD FF      lea d, [bp + -3] ; $sign
0415   063F DA            push d
0416   0640 26 FF FF      mov b, $ffff
0417   0643 E7            pop d
0418   0644 FD 43         mov [d], b
0419   0646 0A 49 06      jmp _if7_exit
0420   0649             _if7_exit:
0421   0649             ;; str++; 
0422   0649 FA 05 00      lea d, [bp + 5] ; $str
0423   064C 2A            mov b, [d]
0424   064D D8            push b
0425   064E FD 77         inc b
0426   0650 FA 05 00      lea d, [bp + 5] ; $str
0427   0653 FD 43         mov [d], b
0428   0655 E5            pop b
0429   0656 0A 59 06      jmp _if6_exit
0430   0659             _if6_exit:
0431   0659             ;; while (*str >= '0' && *str <= '9') { 
0432   0659             _while8_cond:
0433   0659 FA 05 00      lea d, [bp + 5] ; $str
0434   065C 2A            mov b, [d]
0435   065D 74            mov d, b
0436   065E 32            mov bl, [d]
0437   065F A7 00         mov bh, 0
0438   0661             ; START RELATIONAL
0439   0661 D7            push a
0440   0662 11            mov a, b
0441   0663 26 30 00      mov b, $30
0442   0666 B0            cmp a, b
0443   0667 FD 82         sgeu ; >= (unsigned)
0444   0669 E4            pop a
0445   066A             ; END RELATIONAL
0446   066A D7            push a
0447   066B 11            mov a, b
0448   066C FA 05 00      lea d, [bp + 5] ; $str
0449   066F 2A            mov b, [d]
0450   0670 74            mov d, b
0451   0671 32            mov bl, [d]
0452   0672 A7 00         mov bh, 0
0453   0674             ; START RELATIONAL
0454   0674 D7            push a
0455   0675 11            mov a, b
0456   0676 26 39 00      mov b, $39
0457   0679 B0            cmp a, b
0458   067A FD 76         sleu ; <= (unsigned)
0459   067C E4            pop a
0460   067D             ; END RELATIONAL
0461   067D FD A7         sand a, b ; &&
0462   067F E4            pop a
0463   0680 C0 00 00      cmp b, 0
0464   0683 C6 BE 06      je _while8_exit
0465   0686             _while8_block:
0466   0686             ;; result = result * 10 + (*str - '0'); 
0467   0686 FA FF FF      lea d, [bp + -1] ; $result
0468   0689 DA            push d
0469   068A FA FF FF      lea d, [bp + -1] ; $result
0470   068D 2A            mov b, [d]
0471   068E             ; START FACTORS
0472   068E D7            push a
0473   068F 11            mov a, b
0474   0690 26 0A 00      mov b, $a
0475   0693 AC            mul a, b ; *
0476   0694 11            mov a, b
0477   0695 27            mov b, a
0478   0696 E4            pop a
0479   0697             ; END FACTORS
0480   0697             ; START TERMS
0481   0697 D7            push a
0482   0698 11            mov a, b
0483   0699 FA 05 00      lea d, [bp + 5] ; $str
0484   069C 2A            mov b, [d]
0485   069D 74            mov d, b
0486   069E 32            mov bl, [d]
0487   069F A7 00         mov bh, 0
0488   06A1             ; START TERMS
0489   06A1 D7            push a
0490   06A2 11            mov a, b
0491   06A3 26 30 00      mov b, $30
0492   06A6 60            sub a, b
0493   06A7 27            mov b, a
0494   06A8 E4            pop a
0495   06A9             ; END TERMS
0496   06A9 56            add b, a
0497   06AA E4            pop a
0498   06AB             ; END TERMS
0499   06AB E7            pop d
0500   06AC FD 43         mov [d], b
0501   06AE             ;; str++; 
0502   06AE FA 05 00      lea d, [bp + 5] ; $str
0503   06B1 2A            mov b, [d]
0504   06B2 D8            push b
0505   06B3 FD 77         inc b
0506   06B5 FA 05 00      lea d, [bp + 5] ; $str
0507   06B8 FD 43         mov [d], b
0508   06BA E5            pop b
0509   06BB 0A 59 06      jmp _while8_cond
0510   06BE             _while8_exit:
0511   06BE             ;; return sign * result; 
0512   06BE FA FD FF      lea d, [bp + -3] ; $sign
0513   06C1 2A            mov b, [d]
0514   06C2             ; START FACTORS
0515   06C2 D7            push a
0516   06C3 11            mov a, b
0517   06C4 FA FF FF      lea d, [bp + -1] ; $result
0518   06C7 2A            mov b, [d]
0519   06C8 AC            mul a, b ; *
0520   06C9 11            mov a, b
0521   06CA 27            mov b, a
0522   06CB E4            pop a
0523   06CC             ; END FACTORS
0524   06CC F9            leave
0525   06CD 09            ret
0526   06CE             
0527   06CE             rand:
0528   06CE F8 00 00      enter 0 ; (push bp; mov bp, sp)
0529   06D1             ; $sec 
0530   06D1 52 02 00      sub sp, 2
0531   06D4             
0532   06D4             ; --- BEGIN INLINE ASM BLOCK
0533   06D4 19 00         mov al, 0
0534   06D6 05 01         syscall sys_rtc					
0535   06D8 1A            mov al, ah
0536   06D9 FA FF FF      lea d, [bp + -1] ; $sec
0537   06DC 1E            mov al, [d]
0538   06DD 22 00         mov ah, 0
0539   06DF             ; --- END INLINE ASM BLOCK
0540   06DF             
0541   06DF             ;; return sec; 
0542   06DF FA FF FF      lea d, [bp + -1] ; $sec
0543   06E2 2A            mov b, [d]
0544   06E3 F9            leave
0545   06E4 09            ret
0546   06E5             
0547   06E5             srand:
0548   06E5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0549   06E8 F9            leave
0550   06E9 09            ret
0551   06EA             
0552   06EA             malloc:
0553   06EA F8 00 00      enter 0 ; (push bp; mov bp, sp)
0554   06ED F9            leave
0555   06EE 09            ret
0556   06EF             
0557   06EF             calloc:
0558   06EF F8 00 00      enter 0 ; (push bp; mov bp, sp)
0559   06F2 F9            leave
0560   06F3 09            ret
0561   06F4             
0562   06F4             realloc:
0563   06F4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0564   06F7 F9            leave
0565   06F8 09            ret
0566   06F9             
0567   06F9             alloc:
0568   06F9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0569   06FC             ;; heap_top = heap_top + bytes; 
0570   06FC 3B FD 1E      mov d, _heap_top ; $heap_top
0571   06FF DA            push d
0572   0700 3B FD 1E      mov d, _heap_top ; $heap_top
0573   0703 2A            mov b, [d]
0574   0704             ; START TERMS
0575   0704 D7            push a
0576   0705 11            mov a, b
0577   0706 FA 05 00      lea d, [bp + 5] ; $bytes
0578   0709 2A            mov b, [d]
0579   070A 56            add b, a
0580   070B E4            pop a
0581   070C             ; END TERMS
0582   070C E7            pop d
0583   070D FD 43         mov [d], b
0584   070F             ;; return heap_top - bytes; 
0585   070F 3B FD 1E      mov d, _heap_top ; $heap_top
0586   0712 2A            mov b, [d]
0587   0713             ; START TERMS
0588   0713 D7            push a
0589   0714 11            mov a, b
0590   0715 FA 05 00      lea d, [bp + 5] ; $bytes
0591   0718 2A            mov b, [d]
0592   0719 60            sub a, b
0593   071A 27            mov b, a
0594   071B E4            pop a
0595   071C             ; END TERMS
0596   071C F9            leave
0597   071D 09            ret
0598   071E             
0599   071E             free:
0600   071E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0601   0721             ;; return heap_top = heap_top - bytes; 
0602   0721 3B FD 1E      mov d, _heap_top ; $heap_top
0603   0724 DA            push d
0604   0725 3B FD 1E      mov d, _heap_top ; $heap_top
0605   0728 2A            mov b, [d]
0606   0729             ; START TERMS
0607   0729 D7            push a
0608   072A 11            mov a, b
0609   072B FA 05 00      lea d, [bp + 5] ; $bytes
0610   072E 2A            mov b, [d]
0611   072F 60            sub a, b
0612   0730 27            mov b, a
0613   0731 E4            pop a
0614   0732             ; END TERMS
0615   0732 E7            pop d
0616   0733 FD 43         mov [d], b
0617   0735 F9            leave
0618   0736 09            ret
0619   0737             
0620   0737             base64_encode:
0621   0737 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0622   073A             ; $i 
0623   073A 10 00 00      mov a, $0
0624   073D 45 FF FF      mov [bp + -1], a
0625   0740             ; $j 
0626   0740 10 00 00      mov a, $0
0627   0743 45 FD FF      mov [bp + -3], a
0628   0746             ; $k 
0629   0746             ; $input_len 
0630   0746             ; $input_buffer 
0631   0746             ; $output_buffer 
0632   0746 52 0F 00      sub sp, 15
0633   0749             ;; input_len = strlen(input); 
0634   0749 FA F9 FF      lea d, [bp + -7] ; $input_len
0635   074C DA            push d
0636   074D FA 05 00      lea d, [bp + 5] ; $input
0637   0750 2A            mov b, [d]
0638   0751 FD AB         swp b
0639   0753 D8            push b
0640   0754 07 6F 05      call strlen
0641   0757 51 02 00      add sp, 2
0642   075A E7            pop d
0643   075B FD 43         mov [d], b
0644   075D             ;; while (input_len--) { 
0645   075D             _while9_cond:
0646   075D FA F9 FF      lea d, [bp + -7] ; $input_len
0647   0760 2A            mov b, [d]
0648   0761 D8            push b
0649   0762 FD 7D         dec b
0650   0764 FA F9 FF      lea d, [bp + -7] ; $input_len
0651   0767 FD 43         mov [d], b
0652   0769 E5            pop b
0653   076A C0 00 00      cmp b, 0
0654   076D C6 21 09      je _while9_exit
0655   0770             _while9_block:
0656   0770             ;; input_buffer[i++] = *(input++); 
0657   0770 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0658   0773 D7            push a
0659   0774 DA            push d
0660   0775 FA FF FF      lea d, [bp + -1] ; $i
0661   0778 2A            mov b, [d]
0662   0779 D8            push b
0663   077A FD 77         inc b
0664   077C FA FF FF      lea d, [bp + -1] ; $i
0665   077F FD 43         mov [d], b
0666   0781 E5            pop b
0667   0782 E7            pop d
0668   0783 5A            add d, b
0669   0784 E4            pop a
0670   0785 DA            push d
0671   0786 FA 05 00      lea d, [bp + 5] ; $input
0672   0789 2A            mov b, [d]
0673   078A D8            push b
0674   078B FD 77         inc b
0675   078D FA 05 00      lea d, [bp + 5] ; $input
0676   0790 FD 43         mov [d], b
0677   0792 E5            pop b
0678   0793 74            mov d, b
0679   0794 32            mov bl, [d]
0680   0795 A7 00         mov bh, 0
0681   0797 E7            pop d
0682   0798 FD 3E         mov [d], bl
0683   079A             ;; if (i == 3) { 
0684   079A             _if10_cond:
0685   079A FA FF FF      lea d, [bp + -1] ; $i
0686   079D 2A            mov b, [d]
0687   079E             ; START RELATIONAL
0688   079E D7            push a
0689   079F 11            mov a, b
0690   07A0 26 03 00      mov b, $3
0691   07A3 B0            cmp a, b
0692   07A4 FD 71         seq ; ==
0693   07A6 E4            pop a
0694   07A7             ; END RELATIONAL
0695   07A7 C0 00 00      cmp b, 0
0696   07AA C6 1E 09      je _if10_exit
0697   07AD             _if10_true:
0698   07AD             ;; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
0699   07AD FA F2 FF      lea d, [bp + -14] ; $output_buffer
0700   07B0 D7            push a
0701   07B1 DA            push d
0702   07B2 26 00 00      mov b, $0
0703   07B5 E7            pop d
0704   07B6 5A            add d, b
0705   07B7 E4            pop a
0706   07B8 DA            push d
0707   07B9 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0708   07BC D7            push a
0709   07BD DA            push d
0710   07BE 26 00 00      mov b, $0
0711   07C1 E7            pop d
0712   07C2 5A            add d, b
0713   07C3 E4            pop a
0714   07C4 32            mov bl, [d]
0715   07C5 A7 00         mov bh, 0
0716   07C7 D7            push a
0717   07C8 11            mov a, b
0718   07C9 26 FC 00      mov b, $fc
0719   07CC 86            and a, b ; &
0720   07CD 27            mov b, a
0721   07CE E4            pop a
0722   07CF             ; START SHIFT
0723   07CF D7            push a
0724   07D0 11            mov a, b
0725   07D1 26 02 00      mov b, $2
0726   07D4 FD 39         mov c, b
0727   07D6 A5            ashr a, cl
0728   07D7 27            mov b, a
0729   07D8 E4            pop a
0730   07D9             ; END SHIFT
0731   07D9 E7            pop d
0732   07DA FD 3E         mov [d], bl
0733   07DC             ;; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
0734   07DC FA F2 FF      lea d, [bp + -14] ; $output_buffer
0735   07DF D7            push a
0736   07E0 DA            push d
0737   07E1 26 01 00      mov b, $1
0738   07E4 E7            pop d
0739   07E5 5A            add d, b
0740   07E6 E4            pop a
0741   07E7 DA            push d
0742   07E8 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0743   07EB D7            push a
0744   07EC DA            push d
0745   07ED 26 00 00      mov b, $0
0746   07F0 E7            pop d
0747   07F1 5A            add d, b
0748   07F2 E4            pop a
0749   07F3 32            mov bl, [d]
0750   07F4 A7 00         mov bh, 0
0751   07F6 D7            push a
0752   07F7 11            mov a, b
0753   07F8 26 03 00      mov b, $3
0754   07FB 86            and a, b ; &
0755   07FC 27            mov b, a
0756   07FD E4            pop a
0757   07FE             ; START SHIFT
0758   07FE D7            push a
0759   07FF 11            mov a, b
0760   0800 26 04 00      mov b, $4
0761   0803 FD 39         mov c, b
0762   0805 9D            shl a, cl
0763   0806 27            mov b, a
0764   0807 E4            pop a
0765   0808             ; END SHIFT
0766   0808             ; START TERMS
0767   0808 D7            push a
0768   0809 11            mov a, b
0769   080A FA F6 FF      lea d, [bp + -10] ; $input_buffer
0770   080D D7            push a
0771   080E DA            push d
0772   080F 26 01 00      mov b, $1
0773   0812 E7            pop d
0774   0813 5A            add d, b
0775   0814 E4            pop a
0776   0815 32            mov bl, [d]
0777   0816 A7 00         mov bh, 0
0778   0818 D7            push a
0779   0819 11            mov a, b
0780   081A 26 F0 00      mov b, $f0
0781   081D 86            and a, b ; &
0782   081E 27            mov b, a
0783   081F E4            pop a
0784   0820             ; START SHIFT
0785   0820 D7            push a
0786   0821 11            mov a, b
0787   0822 26 04 00      mov b, $4
0788   0825 FD 39         mov c, b
0789   0827 A5            ashr a, cl
0790   0828 27            mov b, a
0791   0829 E4            pop a
0792   082A             ; END SHIFT
0793   082A 56            add b, a
0794   082B E4            pop a
0795   082C             ; END TERMS
0796   082C E7            pop d
0797   082D FD 3E         mov [d], bl
0798   082F             ;; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
0799   082F FA F2 FF      lea d, [bp + -14] ; $output_buffer
0800   0832 D7            push a
0801   0833 DA            push d
0802   0834 26 02 00      mov b, $2
0803   0837 E7            pop d
0804   0838 5A            add d, b
0805   0839 E4            pop a
0806   083A DA            push d
0807   083B FA F6 FF      lea d, [bp + -10] ; $input_buffer
0808   083E D7            push a
0809   083F DA            push d
0810   0840 26 01 00      mov b, $1
0811   0843 E7            pop d
0812   0844 5A            add d, b
0813   0845 E4            pop a
0814   0846 32            mov bl, [d]
0815   0847 A7 00         mov bh, 0
0816   0849 D7            push a
0817   084A 11            mov a, b
0818   084B 26 0F 00      mov b, $f
0819   084E 86            and a, b ; &
0820   084F 27            mov b, a
0821   0850 E4            pop a
0822   0851             ; START SHIFT
0823   0851 D7            push a
0824   0852 11            mov a, b
0825   0853 26 02 00      mov b, $2
0826   0856 FD 39         mov c, b
0827   0858 9D            shl a, cl
0828   0859 27            mov b, a
0829   085A E4            pop a
0830   085B             ; END SHIFT
0831   085B             ; START TERMS
0832   085B D7            push a
0833   085C 11            mov a, b
0834   085D FA F6 FF      lea d, [bp + -10] ; $input_buffer
0835   0860 D7            push a
0836   0861 DA            push d
0837   0862 26 02 00      mov b, $2
0838   0865 E7            pop d
0839   0866 5A            add d, b
0840   0867 E4            pop a
0841   0868 32            mov bl, [d]
0842   0869 A7 00         mov bh, 0
0843   086B D7            push a
0844   086C 11            mov a, b
0845   086D 26 C0 00      mov b, $c0
0846   0870 86            and a, b ; &
0847   0871 27            mov b, a
0848   0872 E4            pop a
0849   0873             ; START SHIFT
0850   0873 D7            push a
0851   0874 11            mov a, b
0852   0875 26 06 00      mov b, $6
0853   0878 FD 39         mov c, b
0854   087A A5            ashr a, cl
0855   087B 27            mov b, a
0856   087C E4            pop a
0857   087D             ; END SHIFT
0858   087D 56            add b, a
0859   087E E4            pop a
0860   087F             ; END TERMS
0861   087F E7            pop d
0862   0880 FD 3E         mov [d], bl
0863   0882             ;; output_buffer[3] = input_buffer[2] & 0x3F; 
0864   0882 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0865   0885 D7            push a
0866   0886 DA            push d
0867   0887 26 03 00      mov b, $3
0868   088A E7            pop d
0869   088B 5A            add d, b
0870   088C E4            pop a
0871   088D DA            push d
0872   088E FA F6 FF      lea d, [bp + -10] ; $input_buffer
0873   0891 D7            push a
0874   0892 DA            push d
0875   0893 26 02 00      mov b, $2
0876   0896 E7            pop d
0877   0897 5A            add d, b
0878   0898 E4            pop a
0879   0899 32            mov bl, [d]
0880   089A A7 00         mov bh, 0
0881   089C D7            push a
0882   089D 11            mov a, b
0883   089E 26 3F 00      mov b, $3f
0884   08A1 86            and a, b ; &
0885   08A2 27            mov b, a
0886   08A3 E4            pop a
0887   08A4 E7            pop d
0888   08A5 FD 3E         mov [d], bl
0889   08A7             ;; for (i = 0; i < 4; i++) { 
0890   08A7             _for11_init:
0891   08A7 FA FF FF      lea d, [bp + -1] ; $i
0892   08AA DA            push d
0893   08AB 26 00 00      mov b, $0
0894   08AE E7            pop d
0895   08AF FD 43         mov [d], b
0896   08B1             _for11_cond:
0897   08B1 FA FF FF      lea d, [bp + -1] ; $i
0898   08B4 2A            mov b, [d]
0899   08B5             ; START RELATIONAL
0900   08B5 D7            push a
0901   08B6 11            mov a, b
0902   08B7 26 04 00      mov b, $4
0903   08BA B0            cmp a, b
0904   08BB FD 73         slt ; <= (signed)
0905   08BD E4            pop a
0906   08BE             ; END RELATIONAL
0907   08BE C0 00 00      cmp b, 0
0908   08C1 C6 11 09      je _for11_exit
0909   08C4             _for11_block:
0910   08C4             ;; output[j++] = base64_table[output_buffer[i]]; 
0911   08C4 FA 07 00      lea d, [bp + 7] ; $output
0912   08C7 FD 2A         mov d, [d]
0913   08C9 D7            push a
0914   08CA DA            push d
0915   08CB FA FD FF      lea d, [bp + -3] ; $j
0916   08CE 2A            mov b, [d]
0917   08CF D8            push b
0918   08D0 FD 77         inc b
0919   08D2 FA FD FF      lea d, [bp + -3] ; $j
0920   08D5 FD 43         mov [d], b
0921   08D7 E5            pop b
0922   08D8 E7            pop d
0923   08D9 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0924   08DD E4            pop a
0925   08DE DA            push d
0926   08DF 3B 5D 1D      mov d, _base64_table ; $base64_table
0927   08E2 FD 2A         mov d, [d]
0928   08E4 D7            push a
0929   08E5 DA            push d
0930   08E6 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0931   08E9 D7            push a
0932   08EA DA            push d
0933   08EB FA FF FF      lea d, [bp + -1] ; $i
0934   08EE 2A            mov b, [d]
0935   08EF E7            pop d
0936   08F0 5A            add d, b
0937   08F1 E4            pop a
0938   08F2 32            mov bl, [d]
0939   08F3 A7 00         mov bh, 0
0940   08F5 E7            pop d
0941   08F6 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0942   08FA E4            pop a
0943   08FB 32            mov bl, [d]
0944   08FC A7 00         mov bh, 0
0945   08FE E7            pop d
0946   08FF FD 3E         mov [d], bl
0947   0901             _for11_update:
0948   0901 FA FF FF      lea d, [bp + -1] ; $i
0949   0904 2A            mov b, [d]
0950   0905 D8            push b
0951   0906 FD 77         inc b
0952   0908 FA FF FF      lea d, [bp + -1] ; $i
0953   090B FD 43         mov [d], b
0954   090D E5            pop b
0955   090E 0A B1 08      jmp _for11_cond
0956   0911             _for11_exit:
0957   0911             ;; i = 0; 
0958   0911 FA FF FF      lea d, [bp + -1] ; $i
0959   0914 DA            push d
0960   0915 26 00 00      mov b, $0
0961   0918 E7            pop d
0962   0919 FD 43         mov [d], b
0963   091B 0A 1E 09      jmp _if10_exit
0964   091E             _if10_exit:
0965   091E 0A 5D 07      jmp _while9_cond
0966   0921             _while9_exit:
0967   0921             ;; if (i) { 
0968   0921             _if12_cond:
0969   0921 FA FF FF      lea d, [bp + -1] ; $i
0970   0924 2A            mov b, [d]
0971   0925 C0 00 00      cmp b, 0
0972   0928 C6 F6 0A      je _if12_exit
0973   092B             _if12_true:
0974   092B             ;; for (k = i; k < 3; k++) { 
0975   092B             _for13_init:
0976   092B FA FB FF      lea d, [bp + -5] ; $k
0977   092E DA            push d
0978   092F FA FF FF      lea d, [bp + -1] ; $i
0979   0932 2A            mov b, [d]
0980   0933 E7            pop d
0981   0934 FD 43         mov [d], b
0982   0936             _for13_cond:
0983   0936 FA FB FF      lea d, [bp + -5] ; $k
0984   0939 2A            mov b, [d]
0985   093A             ; START RELATIONAL
0986   093A D7            push a
0987   093B 11            mov a, b
0988   093C 26 03 00      mov b, $3
0989   093F B0            cmp a, b
0990   0940 FD 73         slt ; <= (signed)
0991   0942 E4            pop a
0992   0943             ; END RELATIONAL
0993   0943 C0 00 00      cmp b, 0
0994   0946 C6 6C 09      je _for13_exit
0995   0949             _for13_block:
0996   0949             ;; input_buffer[k] = '\0'; 
0997   0949 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0998   094C D7            push a
0999   094D DA            push d
1000   094E FA FB FF      lea d, [bp + -5] ; $k
1001   0951 2A            mov b, [d]
1002   0952 E7            pop d
1003   0953 5A            add d, b
1004   0954 E4            pop a
1005   0955 DA            push d
1006   0956 26 00 00      mov b, $0
1007   0959 E7            pop d
1008   095A FD 3E         mov [d], bl
1009   095C             _for13_update:
1010   095C FA FB FF      lea d, [bp + -5] ; $k
1011   095F 2A            mov b, [d]
1012   0960 D8            push b
1013   0961 FD 77         inc b
1014   0963 FA FB FF      lea d, [bp + -5] ; $k
1015   0966 FD 43         mov [d], b
1016   0968 E5            pop b
1017   0969 0A 36 09      jmp _for13_cond
1018   096C             _for13_exit:
1019   096C             ;; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
1020   096C FA F2 FF      lea d, [bp + -14] ; $output_buffer
1021   096F D7            push a
1022   0970 DA            push d
1023   0971 26 00 00      mov b, $0
1024   0974 E7            pop d
1025   0975 5A            add d, b
1026   0976 E4            pop a
1027   0977 DA            push d
1028   0978 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1029   097B D7            push a
1030   097C DA            push d
1031   097D 26 00 00      mov b, $0
1032   0980 E7            pop d
1033   0981 5A            add d, b
1034   0982 E4            pop a
1035   0983 32            mov bl, [d]
1036   0984 A7 00         mov bh, 0
1037   0986 D7            push a
1038   0987 11            mov a, b
1039   0988 26 FC 00      mov b, $fc
1040   098B 86            and a, b ; &
1041   098C 27            mov b, a
1042   098D E4            pop a
1043   098E             ; START SHIFT
1044   098E D7            push a
1045   098F 11            mov a, b
1046   0990 26 02 00      mov b, $2
1047   0993 FD 39         mov c, b
1048   0995 A5            ashr a, cl
1049   0996 27            mov b, a
1050   0997 E4            pop a
1051   0998             ; END SHIFT
1052   0998 E7            pop d
1053   0999 FD 3E         mov [d], bl
1054   099B             ;; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
1055   099B FA F2 FF      lea d, [bp + -14] ; $output_buffer
1056   099E D7            push a
1057   099F DA            push d
1058   09A0 26 01 00      mov b, $1
1059   09A3 E7            pop d
1060   09A4 5A            add d, b
1061   09A5 E4            pop a
1062   09A6 DA            push d
1063   09A7 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1064   09AA D7            push a
1065   09AB DA            push d
1066   09AC 26 00 00      mov b, $0
1067   09AF E7            pop d
1068   09B0 5A            add d, b
1069   09B1 E4            pop a
1070   09B2 32            mov bl, [d]
1071   09B3 A7 00         mov bh, 0
1072   09B5 D7            push a
1073   09B6 11            mov a, b
1074   09B7 26 03 00      mov b, $3
1075   09BA 86            and a, b ; &
1076   09BB 27            mov b, a
1077   09BC E4            pop a
1078   09BD             ; START SHIFT
1079   09BD D7            push a
1080   09BE 11            mov a, b
1081   09BF 26 04 00      mov b, $4
1082   09C2 FD 39         mov c, b
1083   09C4 9D            shl a, cl
1084   09C5 27            mov b, a
1085   09C6 E4            pop a
1086   09C7             ; END SHIFT
1087   09C7             ; START TERMS
1088   09C7 D7            push a
1089   09C8 11            mov a, b
1090   09C9 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1091   09CC D7            push a
1092   09CD DA            push d
1093   09CE 26 01 00      mov b, $1
1094   09D1 E7            pop d
1095   09D2 5A            add d, b
1096   09D3 E4            pop a
1097   09D4 32            mov bl, [d]
1098   09D5 A7 00         mov bh, 0
1099   09D7 D7            push a
1100   09D8 11            mov a, b
1101   09D9 26 F0 00      mov b, $f0
1102   09DC 86            and a, b ; &
1103   09DD 27            mov b, a
1104   09DE E4            pop a
1105   09DF             ; START SHIFT
1106   09DF D7            push a
1107   09E0 11            mov a, b
1108   09E1 26 04 00      mov b, $4
1109   09E4 FD 39         mov c, b
1110   09E6 A5            ashr a, cl
1111   09E7 27            mov b, a
1112   09E8 E4            pop a
1113   09E9             ; END SHIFT
1114   09E9 56            add b, a
1115   09EA E4            pop a
1116   09EB             ; END TERMS
1117   09EB E7            pop d
1118   09EC FD 3E         mov [d], bl
1119   09EE             ;; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
1120   09EE FA F2 FF      lea d, [bp + -14] ; $output_buffer
1121   09F1 D7            push a
1122   09F2 DA            push d
1123   09F3 26 02 00      mov b, $2
1124   09F6 E7            pop d
1125   09F7 5A            add d, b
1126   09F8 E4            pop a
1127   09F9 DA            push d
1128   09FA FA F6 FF      lea d, [bp + -10] ; $input_buffer
1129   09FD D7            push a
1130   09FE DA            push d
1131   09FF 26 01 00      mov b, $1
1132   0A02 E7            pop d
1133   0A03 5A            add d, b
1134   0A04 E4            pop a
1135   0A05 32            mov bl, [d]
1136   0A06 A7 00         mov bh, 0
1137   0A08 D7            push a
1138   0A09 11            mov a, b
1139   0A0A 26 0F 00      mov b, $f
1140   0A0D 86            and a, b ; &
1141   0A0E 27            mov b, a
1142   0A0F E4            pop a
1143   0A10             ; START SHIFT
1144   0A10 D7            push a
1145   0A11 11            mov a, b
1146   0A12 26 02 00      mov b, $2
1147   0A15 FD 39         mov c, b
1148   0A17 9D            shl a, cl
1149   0A18 27            mov b, a
1150   0A19 E4            pop a
1151   0A1A             ; END SHIFT
1152   0A1A             ; START TERMS
1153   0A1A D7            push a
1154   0A1B 11            mov a, b
1155   0A1C FA F6 FF      lea d, [bp + -10] ; $input_buffer
1156   0A1F D7            push a
1157   0A20 DA            push d
1158   0A21 26 02 00      mov b, $2
1159   0A24 E7            pop d
1160   0A25 5A            add d, b
1161   0A26 E4            pop a
1162   0A27 32            mov bl, [d]
1163   0A28 A7 00         mov bh, 0
1164   0A2A D7            push a
1165   0A2B 11            mov a, b
1166   0A2C 26 C0 00      mov b, $c0
1167   0A2F 86            and a, b ; &
1168   0A30 27            mov b, a
1169   0A31 E4            pop a
1170   0A32             ; START SHIFT
1171   0A32 D7            push a
1172   0A33 11            mov a, b
1173   0A34 26 06 00      mov b, $6
1174   0A37 FD 39         mov c, b
1175   0A39 A5            ashr a, cl
1176   0A3A 27            mov b, a
1177   0A3B E4            pop a
1178   0A3C             ; END SHIFT
1179   0A3C 56            add b, a
1180   0A3D E4            pop a
1181   0A3E             ; END TERMS
1182   0A3E E7            pop d
1183   0A3F FD 3E         mov [d], bl
1184   0A41             ;; for (k = 0; k < i + 1; k++) { 
1185   0A41             _for14_init:
1186   0A41 FA FB FF      lea d, [bp + -5] ; $k
1187   0A44 DA            push d
1188   0A45 26 00 00      mov b, $0
1189   0A48 E7            pop d
1190   0A49 FD 43         mov [d], b
1191   0A4B             _for14_cond:
1192   0A4B FA FB FF      lea d, [bp + -5] ; $k
1193   0A4E 2A            mov b, [d]
1194   0A4F             ; START RELATIONAL
1195   0A4F D7            push a
1196   0A50 11            mov a, b
1197   0A51 FA FF FF      lea d, [bp + -1] ; $i
1198   0A54 2A            mov b, [d]
1199   0A55             ; START TERMS
1200   0A55 D7            push a
1201   0A56 11            mov a, b
1202   0A57 26 01 00      mov b, $1
1203   0A5A 56            add b, a
1204   0A5B E4            pop a
1205   0A5C             ; END TERMS
1206   0A5C B0            cmp a, b
1207   0A5D FD 73         slt ; <= (signed)
1208   0A5F E4            pop a
1209   0A60             ; END RELATIONAL
1210   0A60 C0 00 00      cmp b, 0
1211   0A63 C6 B3 0A      je _for14_exit
1212   0A66             _for14_block:
1213   0A66             ;; output[j++] = base64_table[output_buffer[k]]; 
1214   0A66 FA 07 00      lea d, [bp + 7] ; $output
1215   0A69 FD 2A         mov d, [d]
1216   0A6B D7            push a
1217   0A6C DA            push d
1218   0A6D FA FD FF      lea d, [bp + -3] ; $j
1219   0A70 2A            mov b, [d]
1220   0A71 D8            push b
1221   0A72 FD 77         inc b
1222   0A74 FA FD FF      lea d, [bp + -3] ; $j
1223   0A77 FD 43         mov [d], b
1224   0A79 E5            pop b
1225   0A7A E7            pop d
1226   0A7B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1227   0A7F E4            pop a
1228   0A80 DA            push d
1229   0A81 3B 5D 1D      mov d, _base64_table ; $base64_table
1230   0A84 FD 2A         mov d, [d]
1231   0A86 D7            push a
1232   0A87 DA            push d
1233   0A88 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1234   0A8B D7            push a
1235   0A8C DA            push d
1236   0A8D FA FB FF      lea d, [bp + -5] ; $k
1237   0A90 2A            mov b, [d]
1238   0A91 E7            pop d
1239   0A92 5A            add d, b
1240   0A93 E4            pop a
1241   0A94 32            mov bl, [d]
1242   0A95 A7 00         mov bh, 0
1243   0A97 E7            pop d
1244   0A98 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1245   0A9C E4            pop a
1246   0A9D 32            mov bl, [d]
1247   0A9E A7 00         mov bh, 0
1248   0AA0 E7            pop d
1249   0AA1 FD 3E         mov [d], bl
1250   0AA3             _for14_update:
1251   0AA3 FA FB FF      lea d, [bp + -5] ; $k
1252   0AA6 2A            mov b, [d]
1253   0AA7 D8            push b
1254   0AA8 FD 77         inc b
1255   0AAA FA FB FF      lea d, [bp + -5] ; $k
1256   0AAD FD 43         mov [d], b
1257   0AAF E5            pop b
1258   0AB0 0A 4B 0A      jmp _for14_cond
1259   0AB3             _for14_exit:
1260   0AB3             ;; while (i++ < 3) { 
1261   0AB3             _while15_cond:
1262   0AB3 FA FF FF      lea d, [bp + -1] ; $i
1263   0AB6 2A            mov b, [d]
1264   0AB7 D8            push b
1265   0AB8 FD 77         inc b
1266   0ABA FA FF FF      lea d, [bp + -1] ; $i
1267   0ABD FD 43         mov [d], b
1268   0ABF E5            pop b
1269   0AC0             ; START RELATIONAL
1270   0AC0 D7            push a
1271   0AC1 11            mov a, b
1272   0AC2 26 03 00      mov b, $3
1273   0AC5 B0            cmp a, b
1274   0AC6 FD 73         slt ; <= (signed)
1275   0AC8 E4            pop a
1276   0AC9             ; END RELATIONAL
1277   0AC9 C0 00 00      cmp b, 0
1278   0ACC C6 F3 0A      je _while15_exit
1279   0ACF             _while15_block:
1280   0ACF             ;; output[j++] = '='; 
1281   0ACF FA 07 00      lea d, [bp + 7] ; $output
1282   0AD2 FD 2A         mov d, [d]
1283   0AD4 D7            push a
1284   0AD5 DA            push d
1285   0AD6 FA FD FF      lea d, [bp + -3] ; $j
1286   0AD9 2A            mov b, [d]
1287   0ADA D8            push b
1288   0ADB FD 77         inc b
1289   0ADD FA FD FF      lea d, [bp + -3] ; $j
1290   0AE0 FD 43         mov [d], b
1291   0AE2 E5            pop b
1292   0AE3 E7            pop d
1293   0AE4 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1294   0AE8 E4            pop a
1295   0AE9 DA            push d
1296   0AEA 26 3D 00      mov b, $3d
1297   0AED E7            pop d
1298   0AEE FD 3E         mov [d], bl
1299   0AF0 0A B3 0A      jmp _while15_cond
1300   0AF3             _while15_exit:
1301   0AF3 0A F6 0A      jmp _if12_exit
1302   0AF6             _if12_exit:
1303   0AF6             ;; output[j] = '\0'; 
1304   0AF6 FA 07 00      lea d, [bp + 7] ; $output
1305   0AF9 FD 2A         mov d, [d]
1306   0AFB D7            push a
1307   0AFC DA            push d
1308   0AFD FA FD FF      lea d, [bp + -3] ; $j
1309   0B00 2A            mov b, [d]
1310   0B01 E7            pop d
1311   0B02 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1312   0B06 E4            pop a
1313   0B07 DA            push d
1314   0B08 26 00 00      mov b, $0
1315   0B0B E7            pop d
1316   0B0C FD 3E         mov [d], bl
1317   0B0E F9            leave
1318   0B0F 09            ret
1319   0B10             
1320   0B10             base64_char_value:
1321   0B10 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1322   0B13             ;; if (c >= 'A' && c <= 'Z') return c - 'A'; 
1323   0B13             _if16_cond:
1324   0B13 FA 05 00      lea d, [bp + 5] ; $c
1325   0B16 32            mov bl, [d]
1326   0B17 A7 00         mov bh, 0
1327   0B19             ; START RELATIONAL
1328   0B19 D7            push a
1329   0B1A 11            mov a, b
1330   0B1B 26 41 00      mov b, $41
1331   0B1E B0            cmp a, b
1332   0B1F FD 80         sge ; >=
1333   0B21 E4            pop a
1334   0B22             ; END RELATIONAL
1335   0B22 D7            push a
1336   0B23 11            mov a, b
1337   0B24 FA 05 00      lea d, [bp + 5] ; $c
1338   0B27 32            mov bl, [d]
1339   0B28 A7 00         mov bh, 0
1340   0B2A             ; START RELATIONAL
1341   0B2A D7            push a
1342   0B2B 11            mov a, b
1343   0B2C 26 5A 00      mov b, $5a
1344   0B2F B0            cmp a, b
1345   0B30 FD 74         sle ; <=
1346   0B32 E4            pop a
1347   0B33             ; END RELATIONAL
1348   0B33 FD A7         sand a, b ; &&
1349   0B35 E4            pop a
1350   0B36 C0 00 00      cmp b, 0
1351   0B39 C6 4F 0B      je _if16_exit
1352   0B3C             _if16_true:
1353   0B3C             ;; return c - 'A'; 
1354   0B3C FA 05 00      lea d, [bp + 5] ; $c
1355   0B3F 32            mov bl, [d]
1356   0B40 A7 00         mov bh, 0
1357   0B42             ; START TERMS
1358   0B42 D7            push a
1359   0B43 11            mov a, b
1360   0B44 26 41 00      mov b, $41
1361   0B47 60            sub a, b
1362   0B48 27            mov b, a
1363   0B49 E4            pop a
1364   0B4A             ; END TERMS
1365   0B4A F9            leave
1366   0B4B 09            ret
1367   0B4C 0A 4F 0B      jmp _if16_exit
1368   0B4F             _if16_exit:
1369   0B4F             ;; if (c >= 'a' && c <= 'z') return c - 'a' + 26; 
1370   0B4F             _if17_cond:
1371   0B4F FA 05 00      lea d, [bp + 5] ; $c
1372   0B52 32            mov bl, [d]
1373   0B53 A7 00         mov bh, 0
1374   0B55             ; START RELATIONAL
1375   0B55 D7            push a
1376   0B56 11            mov a, b
1377   0B57 26 61 00      mov b, $61
1378   0B5A B0            cmp a, b
1379   0B5B FD 80         sge ; >=
1380   0B5D E4            pop a
1381   0B5E             ; END RELATIONAL
1382   0B5E D7            push a
1383   0B5F 11            mov a, b
1384   0B60 FA 05 00      lea d, [bp + 5] ; $c
1385   0B63 32            mov bl, [d]
1386   0B64 A7 00         mov bh, 0
1387   0B66             ; START RELATIONAL
1388   0B66 D7            push a
1389   0B67 11            mov a, b
1390   0B68 26 7A 00      mov b, $7a
1391   0B6B B0            cmp a, b
1392   0B6C FD 74         sle ; <=
1393   0B6E E4            pop a
1394   0B6F             ; END RELATIONAL
1395   0B6F FD A7         sand a, b ; &&
1396   0B71 E4            pop a
1397   0B72 C0 00 00      cmp b, 0
1398   0B75 C6 90 0B      je _if17_exit
1399   0B78             _if17_true:
1400   0B78             ;; return c - 'a' + 26; 
1401   0B78 FA 05 00      lea d, [bp + 5] ; $c
1402   0B7B 32            mov bl, [d]
1403   0B7C A7 00         mov bh, 0
1404   0B7E             ; START TERMS
1405   0B7E D7            push a
1406   0B7F 11            mov a, b
1407   0B80 26 61 00      mov b, $61
1408   0B83 60            sub a, b
1409   0B84 27            mov b, a
1410   0B85 11            mov a, b
1411   0B86 26 1A 00      mov b, $1a
1412   0B89 56            add b, a
1413   0B8A E4            pop a
1414   0B8B             ; END TERMS
1415   0B8B F9            leave
1416   0B8C 09            ret
1417   0B8D 0A 90 0B      jmp _if17_exit
1418   0B90             _if17_exit:
1419   0B90             ;; if (c >= '0' && c <= '9') return c - '0' + 52; 
1420   0B90             _if18_cond:
1421   0B90 FA 05 00      lea d, [bp + 5] ; $c
1422   0B93 32            mov bl, [d]
1423   0B94 A7 00         mov bh, 0
1424   0B96             ; START RELATIONAL
1425   0B96 D7            push a
1426   0B97 11            mov a, b
1427   0B98 26 30 00      mov b, $30
1428   0B9B B0            cmp a, b
1429   0B9C FD 80         sge ; >=
1430   0B9E E4            pop a
1431   0B9F             ; END RELATIONAL
1432   0B9F D7            push a
1433   0BA0 11            mov a, b
1434   0BA1 FA 05 00      lea d, [bp + 5] ; $c
1435   0BA4 32            mov bl, [d]
1436   0BA5 A7 00         mov bh, 0
1437   0BA7             ; START RELATIONAL
1438   0BA7 D7            push a
1439   0BA8 11            mov a, b
1440   0BA9 26 39 00      mov b, $39
1441   0BAC B0            cmp a, b
1442   0BAD FD 74         sle ; <=
1443   0BAF E4            pop a
1444   0BB0             ; END RELATIONAL
1445   0BB0 FD A7         sand a, b ; &&
1446   0BB2 E4            pop a
1447   0BB3 C0 00 00      cmp b, 0
1448   0BB6 C6 D1 0B      je _if18_exit
1449   0BB9             _if18_true:
1450   0BB9             ;; return c - '0' + 52; 
1451   0BB9 FA 05 00      lea d, [bp + 5] ; $c
1452   0BBC 32            mov bl, [d]
1453   0BBD A7 00         mov bh, 0
1454   0BBF             ; START TERMS
1455   0BBF D7            push a
1456   0BC0 11            mov a, b
1457   0BC1 26 30 00      mov b, $30
1458   0BC4 60            sub a, b
1459   0BC5 27            mov b, a
1460   0BC6 11            mov a, b
1461   0BC7 26 34 00      mov b, $34
1462   0BCA 56            add b, a
1463   0BCB E4            pop a
1464   0BCC             ; END TERMS
1465   0BCC F9            leave
1466   0BCD 09            ret
1467   0BCE 0A D1 0B      jmp _if18_exit
1468   0BD1             _if18_exit:
1469   0BD1             ;; if (c == '+') return 62; 
1470   0BD1             _if19_cond:
1471   0BD1 FA 05 00      lea d, [bp + 5] ; $c
1472   0BD4 32            mov bl, [d]
1473   0BD5 A7 00         mov bh, 0
1474   0BD7             ; START RELATIONAL
1475   0BD7 D7            push a
1476   0BD8 11            mov a, b
1477   0BD9 26 2B 00      mov b, $2b
1478   0BDC B0            cmp a, b
1479   0BDD FD 71         seq ; ==
1480   0BDF E4            pop a
1481   0BE0             ; END RELATIONAL
1482   0BE0 C0 00 00      cmp b, 0
1483   0BE3 C6 EE 0B      je _if19_exit
1484   0BE6             _if19_true:
1485   0BE6             ;; return 62; 
1486   0BE6 26 3E 00      mov b, $3e
1487   0BE9 F9            leave
1488   0BEA 09            ret
1489   0BEB 0A EE 0B      jmp _if19_exit
1490   0BEE             _if19_exit:
1491   0BEE             ;; if (c == '/') return 63; 
1492   0BEE             _if20_cond:
1493   0BEE FA 05 00      lea d, [bp + 5] ; $c
1494   0BF1 32            mov bl, [d]
1495   0BF2 A7 00         mov bh, 0
1496   0BF4             ; START RELATIONAL
1497   0BF4 D7            push a
1498   0BF5 11            mov a, b
1499   0BF6 26 2F 00      mov b, $2f
1500   0BF9 B0            cmp a, b
1501   0BFA FD 71         seq ; ==
1502   0BFC E4            pop a
1503   0BFD             ; END RELATIONAL
1504   0BFD C0 00 00      cmp b, 0
1505   0C00 C6 0B 0C      je _if20_exit
1506   0C03             _if20_true:
1507   0C03             ;; return 63; 
1508   0C03 26 3F 00      mov b, $3f
1509   0C06 F9            leave
1510   0C07 09            ret
1511   0C08 0A 0B 0C      jmp _if20_exit
1512   0C0B             _if20_exit:
1513   0C0B             ;; return -1; 
1514   0C0B 26 FF FF      mov b, $ffff
1515   0C0E F9            leave
1516   0C0F 09            ret
1517   0C10             
1518   0C10             base64_decode:
1519   0C10 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1520   0C13             ; $i 
1521   0C13 10 00 00      mov a, $0
1522   0C16 45 FF FF      mov [bp + -1], a
1523   0C19             ; $j 
1524   0C19 10 00 00      mov a, $0
1525   0C1C 45 FD FF      mov [bp + -3], a
1526   0C1F             ; $k 
1527   0C1F 10 00 00      mov a, $0
1528   0C22 45 FB FF      mov [bp + -5], a
1529   0C25             ; $input_len 
1530   0C25             ; $input_buffer 
1531   0C25             ; $output_buffer 
1532   0C25 52 0F 00      sub sp, 15
1533   0C28             ;; input_len = strlen(input); 
1534   0C28 FA F9 FF      lea d, [bp + -7] ; $input_len
1535   0C2B DA            push d
1536   0C2C FA 05 00      lea d, [bp + 5] ; $input
1537   0C2F 2A            mov b, [d]
1538   0C30 FD AB         swp b
1539   0C32 D8            push b
1540   0C33 07 6F 05      call strlen
1541   0C36 51 02 00      add sp, 2
1542   0C39 E7            pop d
1543   0C3A FD 43         mov [d], b
1544   0C3C             ;; while (input_len-- && (input[k] != '=') && base64_char_value(input[k]) != -1) { 
1545   0C3C             _while21_cond:
1546   0C3C FA F9 FF      lea d, [bp + -7] ; $input_len
1547   0C3F 2A            mov b, [d]
1548   0C40 D8            push b
1549   0C41 FD 7D         dec b
1550   0C43 FA F9 FF      lea d, [bp + -7] ; $input_len
1551   0C46 FD 43         mov [d], b
1552   0C48 E5            pop b
1553   0C49 D7            push a
1554   0C4A 11            mov a, b
1555   0C4B FA 05 00      lea d, [bp + 5] ; $input
1556   0C4E FD 2A         mov d, [d]
1557   0C50 D7            push a
1558   0C51 DA            push d
1559   0C52 FA FB FF      lea d, [bp + -5] ; $k
1560   0C55 2A            mov b, [d]
1561   0C56 E7            pop d
1562   0C57 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1563   0C5B E4            pop a
1564   0C5C 32            mov bl, [d]
1565   0C5D A7 00         mov bh, 0
1566   0C5F             ; START RELATIONAL
1567   0C5F D7            push a
1568   0C60 11            mov a, b
1569   0C61 26 3D 00      mov b, $3d
1570   0C64 B0            cmp a, b
1571   0C65 FD 72         sneq ; !=
1572   0C67 E4            pop a
1573   0C68             ; END RELATIONAL
1574   0C68 FD A7         sand a, b ; &&
1575   0C6A 11            mov a, b
1576   0C6B FA 05 00      lea d, [bp + 5] ; $input
1577   0C6E FD 2A         mov d, [d]
1578   0C70 D7            push a
1579   0C71 DA            push d
1580   0C72 FA FB FF      lea d, [bp + -5] ; $k
1581   0C75 2A            mov b, [d]
1582   0C76 E7            pop d
1583   0C77 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1584   0C7B E4            pop a
1585   0C7C 32            mov bl, [d]
1586   0C7D A7 00         mov bh, 0
1587   0C7F DD            push bl
1588   0C80 07 10 0B      call base64_char_value
1589   0C83 51 01 00      add sp, 1
1590   0C86             ; START RELATIONAL
1591   0C86 D7            push a
1592   0C87 11            mov a, b
1593   0C88 26 FF FF      mov b, $ffff
1594   0C8B B0            cmp a, b
1595   0C8C FD 72         sneq ; !=
1596   0C8E E4            pop a
1597   0C8F             ; END RELATIONAL
1598   0C8F FD A7         sand a, b ; &&
1599   0C91 E4            pop a
1600   0C92 C0 00 00      cmp b, 0
1601   0C95 C6 7D 0E      je _while21_exit
1602   0C98             _while21_block:
1603   0C98             ;; input_buffer[i++] = input[k++]; 
1604   0C98 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1605   0C9B D7            push a
1606   0C9C DA            push d
1607   0C9D FA FF FF      lea d, [bp + -1] ; $i
1608   0CA0 2A            mov b, [d]
1609   0CA1 D8            push b
1610   0CA2 FD 77         inc b
1611   0CA4 FA FF FF      lea d, [bp + -1] ; $i
1612   0CA7 FD 43         mov [d], b
1613   0CA9 E5            pop b
1614   0CAA E7            pop d
1615   0CAB 5A            add d, b
1616   0CAC E4            pop a
1617   0CAD DA            push d
1618   0CAE FA 05 00      lea d, [bp + 5] ; $input
1619   0CB1 FD 2A         mov d, [d]
1620   0CB3 D7            push a
1621   0CB4 DA            push d
1622   0CB5 FA FB FF      lea d, [bp + -5] ; $k
1623   0CB8 2A            mov b, [d]
1624   0CB9 D8            push b
1625   0CBA FD 77         inc b
1626   0CBC FA FB FF      lea d, [bp + -5] ; $k
1627   0CBF FD 43         mov [d], b
1628   0CC1 E5            pop b
1629   0CC2 E7            pop d
1630   0CC3 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1631   0CC7 E4            pop a
1632   0CC8 32            mov bl, [d]
1633   0CC9 A7 00         mov bh, 0
1634   0CCB E7            pop d
1635   0CCC FD 3E         mov [d], bl
1636   0CCE             ;; if (i == 4) { 
1637   0CCE             _if22_cond:
1638   0CCE FA FF FF      lea d, [bp + -1] ; $i
1639   0CD1 2A            mov b, [d]
1640   0CD2             ; START RELATIONAL
1641   0CD2 D7            push a
1642   0CD3 11            mov a, b
1643   0CD4 26 04 00      mov b, $4
1644   0CD7 B0            cmp a, b
1645   0CD8 FD 71         seq ; ==
1646   0CDA E4            pop a
1647   0CDB             ; END RELATIONAL
1648   0CDB C0 00 00      cmp b, 0
1649   0CDE C6 7A 0E      je _if22_exit
1650   0CE1             _if22_true:
1651   0CE1             ;; for (i = 0; i < 4; i++) { 
1652   0CE1             _for23_init:
1653   0CE1 FA FF FF      lea d, [bp + -1] ; $i
1654   0CE4 DA            push d
1655   0CE5 26 00 00      mov b, $0
1656   0CE8 E7            pop d
1657   0CE9 FD 43         mov [d], b
1658   0CEB             _for23_cond:
1659   0CEB FA FF FF      lea d, [bp + -1] ; $i
1660   0CEE 2A            mov b, [d]
1661   0CEF             ; START RELATIONAL
1662   0CEF D7            push a
1663   0CF0 11            mov a, b
1664   0CF1 26 04 00      mov b, $4
1665   0CF4 B0            cmp a, b
1666   0CF5 FD 73         slt ; <= (signed)
1667   0CF7 E4            pop a
1668   0CF8             ; END RELATIONAL
1669   0CF8 C0 00 00      cmp b, 0
1670   0CFB C6 34 0D      je _for23_exit
1671   0CFE             _for23_block:
1672   0CFE             ;; input_buffer[i] = base64_char_value(input_buffer[i]); 
1673   0CFE FA F5 FF      lea d, [bp + -11] ; $input_buffer
1674   0D01 D7            push a
1675   0D02 DA            push d
1676   0D03 FA FF FF      lea d, [bp + -1] ; $i
1677   0D06 2A            mov b, [d]
1678   0D07 E7            pop d
1679   0D08 5A            add d, b
1680   0D09 E4            pop a
1681   0D0A DA            push d
1682   0D0B FA F5 FF      lea d, [bp + -11] ; $input_buffer
1683   0D0E D7            push a
1684   0D0F DA            push d
1685   0D10 FA FF FF      lea d, [bp + -1] ; $i
1686   0D13 2A            mov b, [d]
1687   0D14 E7            pop d
1688   0D15 5A            add d, b
1689   0D16 E4            pop a
1690   0D17 32            mov bl, [d]
1691   0D18 A7 00         mov bh, 0
1692   0D1A DD            push bl
1693   0D1B 07 10 0B      call base64_char_value
1694   0D1E 51 01 00      add sp, 1
1695   0D21 E7            pop d
1696   0D22 FD 3E         mov [d], bl
1697   0D24             _for23_update:
1698   0D24 FA FF FF      lea d, [bp + -1] ; $i
1699   0D27 2A            mov b, [d]
1700   0D28 D8            push b
1701   0D29 FD 77         inc b
1702   0D2B FA FF FF      lea d, [bp + -1] ; $i
1703   0D2E FD 43         mov [d], b
1704   0D30 E5            pop b
1705   0D31 0A EB 0C      jmp _for23_cond
1706   0D34             _for23_exit:
1707   0D34             ;; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
1708   0D34 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1709   0D37 D7            push a
1710   0D38 DA            push d
1711   0D39 26 00 00      mov b, $0
1712   0D3C E7            pop d
1713   0D3D 5A            add d, b
1714   0D3E E4            pop a
1715   0D3F DA            push d
1716   0D40 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1717   0D43 D7            push a
1718   0D44 DA            push d
1719   0D45 26 00 00      mov b, $0
1720   0D48 E7            pop d
1721   0D49 5A            add d, b
1722   0D4A E4            pop a
1723   0D4B 32            mov bl, [d]
1724   0D4C A7 00         mov bh, 0
1725   0D4E             ; START SHIFT
1726   0D4E D7            push a
1727   0D4F 11            mov a, b
1728   0D50 26 02 00      mov b, $2
1729   0D53 FD 39         mov c, b
1730   0D55 9D            shl a, cl
1731   0D56 27            mov b, a
1732   0D57 E4            pop a
1733   0D58             ; END SHIFT
1734   0D58             ; START TERMS
1735   0D58 D7            push a
1736   0D59 11            mov a, b
1737   0D5A FA F5 FF      lea d, [bp + -11] ; $input_buffer
1738   0D5D D7            push a
1739   0D5E DA            push d
1740   0D5F 26 01 00      mov b, $1
1741   0D62 E7            pop d
1742   0D63 5A            add d, b
1743   0D64 E4            pop a
1744   0D65 32            mov bl, [d]
1745   0D66 A7 00         mov bh, 0
1746   0D68 D7            push a
1747   0D69 11            mov a, b
1748   0D6A 26 30 00      mov b, $30
1749   0D6D 86            and a, b ; &
1750   0D6E 27            mov b, a
1751   0D6F E4            pop a
1752   0D70             ; START SHIFT
1753   0D70 D7            push a
1754   0D71 11            mov a, b
1755   0D72 26 04 00      mov b, $4
1756   0D75 FD 39         mov c, b
1757   0D77 A5            ashr a, cl
1758   0D78 27            mov b, a
1759   0D79 E4            pop a
1760   0D7A             ; END SHIFT
1761   0D7A 56            add b, a
1762   0D7B E4            pop a
1763   0D7C             ; END TERMS
1764   0D7C E7            pop d
1765   0D7D FD 3E         mov [d], bl
1766   0D7F             ;; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
1767   0D7F FA F2 FF      lea d, [bp + -14] ; $output_buffer
1768   0D82 D7            push a
1769   0D83 DA            push d
1770   0D84 26 01 00      mov b, $1
1771   0D87 E7            pop d
1772   0D88 5A            add d, b
1773   0D89 E4            pop a
1774   0D8A DA            push d
1775   0D8B FA F5 FF      lea d, [bp + -11] ; $input_buffer
1776   0D8E D7            push a
1777   0D8F DA            push d
1778   0D90 26 01 00      mov b, $1
1779   0D93 E7            pop d
1780   0D94 5A            add d, b
1781   0D95 E4            pop a
1782   0D96 32            mov bl, [d]
1783   0D97 A7 00         mov bh, 0
1784   0D99 D7            push a
1785   0D9A 11            mov a, b
1786   0D9B 26 0F 00      mov b, $f
1787   0D9E 86            and a, b ; &
1788   0D9F 27            mov b, a
1789   0DA0 E4            pop a
1790   0DA1             ; START SHIFT
1791   0DA1 D7            push a
1792   0DA2 11            mov a, b
1793   0DA3 26 04 00      mov b, $4
1794   0DA6 FD 39         mov c, b
1795   0DA8 9D            shl a, cl
1796   0DA9 27            mov b, a
1797   0DAA E4            pop a
1798   0DAB             ; END SHIFT
1799   0DAB             ; START TERMS
1800   0DAB D7            push a
1801   0DAC 11            mov a, b
1802   0DAD FA F5 FF      lea d, [bp + -11] ; $input_buffer
1803   0DB0 D7            push a
1804   0DB1 DA            push d
1805   0DB2 26 02 00      mov b, $2
1806   0DB5 E7            pop d
1807   0DB6 5A            add d, b
1808   0DB7 E4            pop a
1809   0DB8 32            mov bl, [d]
1810   0DB9 A7 00         mov bh, 0
1811   0DBB D7            push a
1812   0DBC 11            mov a, b
1813   0DBD 26 3C 00      mov b, $3c
1814   0DC0 86            and a, b ; &
1815   0DC1 27            mov b, a
1816   0DC2 E4            pop a
1817   0DC3             ; START SHIFT
1818   0DC3 D7            push a
1819   0DC4 11            mov a, b
1820   0DC5 26 02 00      mov b, $2
1821   0DC8 FD 39         mov c, b
1822   0DCA A5            ashr a, cl
1823   0DCB 27            mov b, a
1824   0DCC E4            pop a
1825   0DCD             ; END SHIFT
1826   0DCD 56            add b, a
1827   0DCE E4            pop a
1828   0DCF             ; END TERMS
1829   0DCF E7            pop d
1830   0DD0 FD 3E         mov [d], bl
1831   0DD2             ;; output_buffer[2] = ((input_buffer[2] & 0x03) << 6) + input_buffer[3]; 
1832   0DD2 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1833   0DD5 D7            push a
1834   0DD6 DA            push d
1835   0DD7 26 02 00      mov b, $2
1836   0DDA E7            pop d
1837   0DDB 5A            add d, b
1838   0DDC E4            pop a
1839   0DDD DA            push d
1840   0DDE FA F5 FF      lea d, [bp + -11] ; $input_buffer
1841   0DE1 D7            push a
1842   0DE2 DA            push d
1843   0DE3 26 02 00      mov b, $2
1844   0DE6 E7            pop d
1845   0DE7 5A            add d, b
1846   0DE8 E4            pop a
1847   0DE9 32            mov bl, [d]
1848   0DEA A7 00         mov bh, 0
1849   0DEC D7            push a
1850   0DED 11            mov a, b
1851   0DEE 26 03 00      mov b, $3
1852   0DF1 86            and a, b ; &
1853   0DF2 27            mov b, a
1854   0DF3 E4            pop a
1855   0DF4             ; START SHIFT
1856   0DF4 D7            push a
1857   0DF5 11            mov a, b
1858   0DF6 26 06 00      mov b, $6
1859   0DF9 FD 39         mov c, b
1860   0DFB 9D            shl a, cl
1861   0DFC 27            mov b, a
1862   0DFD E4            pop a
1863   0DFE             ; END SHIFT
1864   0DFE             ; START TERMS
1865   0DFE D7            push a
1866   0DFF 11            mov a, b
1867   0E00 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1868   0E03 D7            push a
1869   0E04 DA            push d
1870   0E05 26 03 00      mov b, $3
1871   0E08 E7            pop d
1872   0E09 5A            add d, b
1873   0E0A E4            pop a
1874   0E0B 32            mov bl, [d]
1875   0E0C A7 00         mov bh, 0
1876   0E0E 56            add b, a
1877   0E0F E4            pop a
1878   0E10             ; END TERMS
1879   0E10 E7            pop d
1880   0E11 FD 3E         mov [d], bl
1881   0E13             ;; for (i = 0; i < 3; i++) { 
1882   0E13             _for24_init:
1883   0E13 FA FF FF      lea d, [bp + -1] ; $i
1884   0E16 DA            push d
1885   0E17 26 00 00      mov b, $0
1886   0E1A E7            pop d
1887   0E1B FD 43         mov [d], b
1888   0E1D             _for24_cond:
1889   0E1D FA FF FF      lea d, [bp + -1] ; $i
1890   0E20 2A            mov b, [d]
1891   0E21             ; START RELATIONAL
1892   0E21 D7            push a
1893   0E22 11            mov a, b
1894   0E23 26 03 00      mov b, $3
1895   0E26 B0            cmp a, b
1896   0E27 FD 73         slt ; <= (signed)
1897   0E29 E4            pop a
1898   0E2A             ; END RELATIONAL
1899   0E2A C0 00 00      cmp b, 0
1900   0E2D C6 6D 0E      je _for24_exit
1901   0E30             _for24_block:
1902   0E30             ;; output[j++] = output_buffer[i]; 
1903   0E30 FA 07 00      lea d, [bp + 7] ; $output
1904   0E33 FD 2A         mov d, [d]
1905   0E35 D7            push a
1906   0E36 DA            push d
1907   0E37 FA FD FF      lea d, [bp + -3] ; $j
1908   0E3A 2A            mov b, [d]
1909   0E3B D8            push b
1910   0E3C FD 77         inc b
1911   0E3E FA FD FF      lea d, [bp + -3] ; $j
1912   0E41 FD 43         mov [d], b
1913   0E43 E5            pop b
1914   0E44 E7            pop d
1915   0E45 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1916   0E49 E4            pop a
1917   0E4A DA            push d
1918   0E4B FA F2 FF      lea d, [bp + -14] ; $output_buffer
1919   0E4E D7            push a
1920   0E4F DA            push d
1921   0E50 FA FF FF      lea d, [bp + -1] ; $i
1922   0E53 2A            mov b, [d]
1923   0E54 E7            pop d
1924   0E55 5A            add d, b
1925   0E56 E4            pop a
1926   0E57 32            mov bl, [d]
1927   0E58 A7 00         mov bh, 0
1928   0E5A E7            pop d
1929   0E5B FD 3E         mov [d], bl
1930   0E5D             _for24_update:
1931   0E5D FA FF FF      lea d, [bp + -1] ; $i
1932   0E60 2A            mov b, [d]
1933   0E61 D8            push b
1934   0E62 FD 77         inc b
1935   0E64 FA FF FF      lea d, [bp + -1] ; $i
1936   0E67 FD 43         mov [d], b
1937   0E69 E5            pop b
1938   0E6A 0A 1D 0E      jmp _for24_cond
1939   0E6D             _for24_exit:
1940   0E6D             ;; i = 0; 
1941   0E6D FA FF FF      lea d, [bp + -1] ; $i
1942   0E70 DA            push d
1943   0E71 26 00 00      mov b, $0
1944   0E74 E7            pop d
1945   0E75 FD 43         mov [d], b
1946   0E77 0A 7A 0E      jmp _if22_exit
1947   0E7A             _if22_exit:
1948   0E7A 0A 3C 0C      jmp _while21_cond
1949   0E7D             _while21_exit:
1950   0E7D             ;; if (i) { 
1951   0E7D             _if25_cond:
1952   0E7D FA FF FF      lea d, [bp + -1] ; $i
1953   0E80 2A            mov b, [d]
1954   0E81 C0 00 00      cmp b, 0
1955   0E84 C6 1F 10      je _if25_exit
1956   0E87             _if25_true:
1957   0E87             ;; for (k = i; k < 4; k++) { 
1958   0E87             _for26_init:
1959   0E87 FA FB FF      lea d, [bp + -5] ; $k
1960   0E8A DA            push d
1961   0E8B FA FF FF      lea d, [bp + -1] ; $i
1962   0E8E 2A            mov b, [d]
1963   0E8F E7            pop d
1964   0E90 FD 43         mov [d], b
1965   0E92             _for26_cond:
1966   0E92 FA FB FF      lea d, [bp + -5] ; $k
1967   0E95 2A            mov b, [d]
1968   0E96             ; START RELATIONAL
1969   0E96 D7            push a
1970   0E97 11            mov a, b
1971   0E98 26 04 00      mov b, $4
1972   0E9B B0            cmp a, b
1973   0E9C FD 73         slt ; <= (signed)
1974   0E9E E4            pop a
1975   0E9F             ; END RELATIONAL
1976   0E9F C0 00 00      cmp b, 0
1977   0EA2 C6 C8 0E      je _for26_exit
1978   0EA5             _for26_block:
1979   0EA5             ;; input_buffer[k] = 0; 
1980   0EA5 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1981   0EA8 D7            push a
1982   0EA9 DA            push d
1983   0EAA FA FB FF      lea d, [bp + -5] ; $k
1984   0EAD 2A            mov b, [d]
1985   0EAE E7            pop d
1986   0EAF 5A            add d, b
1987   0EB0 E4            pop a
1988   0EB1 DA            push d
1989   0EB2 26 00 00      mov b, $0
1990   0EB5 E7            pop d
1991   0EB6 FD 3E         mov [d], bl
1992   0EB8             _for26_update:
1993   0EB8 FA FB FF      lea d, [bp + -5] ; $k
1994   0EBB 2A            mov b, [d]
1995   0EBC D8            push b
1996   0EBD FD 77         inc b
1997   0EBF FA FB FF      lea d, [bp + -5] ; $k
1998   0EC2 FD 43         mov [d], b
1999   0EC4 E5            pop b
2000   0EC5 0A 92 0E      jmp _for26_cond
2001   0EC8             _for26_exit:
2002   0EC8             ;; for (k = 0; k < 4; k++) { 
2003   0EC8             _for27_init:
2004   0EC8 FA FB FF      lea d, [bp + -5] ; $k
2005   0ECB DA            push d
2006   0ECC 26 00 00      mov b, $0
2007   0ECF E7            pop d
2008   0ED0 FD 43         mov [d], b
2009   0ED2             _for27_cond:
2010   0ED2 FA FB FF      lea d, [bp + -5] ; $k
2011   0ED5 2A            mov b, [d]
2012   0ED6             ; START RELATIONAL
2013   0ED6 D7            push a
2014   0ED7 11            mov a, b
2015   0ED8 26 04 00      mov b, $4
2016   0EDB B0            cmp a, b
2017   0EDC FD 73         slt ; <= (signed)
2018   0EDE E4            pop a
2019   0EDF             ; END RELATIONAL
2020   0EDF C0 00 00      cmp b, 0
2021   0EE2 C6 1B 0F      je _for27_exit
2022   0EE5             _for27_block:
2023   0EE5             ;; input_buffer[k] = base64_char_value(input_buffer[k]); 
2024   0EE5 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2025   0EE8 D7            push a
2026   0EE9 DA            push d
2027   0EEA FA FB FF      lea d, [bp + -5] ; $k
2028   0EED 2A            mov b, [d]
2029   0EEE E7            pop d
2030   0EEF 5A            add d, b
2031   0EF0 E4            pop a
2032   0EF1 DA            push d
2033   0EF2 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2034   0EF5 D7            push a
2035   0EF6 DA            push d
2036   0EF7 FA FB FF      lea d, [bp + -5] ; $k
2037   0EFA 2A            mov b, [d]
2038   0EFB E7            pop d
2039   0EFC 5A            add d, b
2040   0EFD E4            pop a
2041   0EFE 32            mov bl, [d]
2042   0EFF A7 00         mov bh, 0
2043   0F01 DD            push bl
2044   0F02 07 10 0B      call base64_char_value
2045   0F05 51 01 00      add sp, 1
2046   0F08 E7            pop d
2047   0F09 FD 3E         mov [d], bl
2048   0F0B             _for27_update:
2049   0F0B FA FB FF      lea d, [bp + -5] ; $k
2050   0F0E 2A            mov b, [d]
2051   0F0F D8            push b
2052   0F10 FD 77         inc b
2053   0F12 FA FB FF      lea d, [bp + -5] ; $k
2054   0F15 FD 43         mov [d], b
2055   0F17 E5            pop b
2056   0F18 0A D2 0E      jmp _for27_cond
2057   0F1B             _for27_exit:
2058   0F1B             ;; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
2059   0F1B FA F2 FF      lea d, [bp + -14] ; $output_buffer
2060   0F1E D7            push a
2061   0F1F DA            push d
2062   0F20 26 00 00      mov b, $0
2063   0F23 E7            pop d
2064   0F24 5A            add d, b
2065   0F25 E4            pop a
2066   0F26 DA            push d
2067   0F27 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2068   0F2A D7            push a
2069   0F2B DA            push d
2070   0F2C 26 00 00      mov b, $0
2071   0F2F E7            pop d
2072   0F30 5A            add d, b
2073   0F31 E4            pop a
2074   0F32 32            mov bl, [d]
2075   0F33 A7 00         mov bh, 0
2076   0F35             ; START SHIFT
2077   0F35 D7            push a
2078   0F36 11            mov a, b
2079   0F37 26 02 00      mov b, $2
2080   0F3A FD 39         mov c, b
2081   0F3C 9D            shl a, cl
2082   0F3D 27            mov b, a
2083   0F3E E4            pop a
2084   0F3F             ; END SHIFT
2085   0F3F             ; START TERMS
2086   0F3F D7            push a
2087   0F40 11            mov a, b
2088   0F41 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2089   0F44 D7            push a
2090   0F45 DA            push d
2091   0F46 26 01 00      mov b, $1
2092   0F49 E7            pop d
2093   0F4A 5A            add d, b
2094   0F4B E4            pop a
2095   0F4C 32            mov bl, [d]
2096   0F4D A7 00         mov bh, 0
2097   0F4F D7            push a
2098   0F50 11            mov a, b
2099   0F51 26 30 00      mov b, $30
2100   0F54 86            and a, b ; &
2101   0F55 27            mov b, a
2102   0F56 E4            pop a
2103   0F57             ; START SHIFT
2104   0F57 D7            push a
2105   0F58 11            mov a, b
2106   0F59 26 04 00      mov b, $4
2107   0F5C FD 39         mov c, b
2108   0F5E A5            ashr a, cl
2109   0F5F 27            mov b, a
2110   0F60 E4            pop a
2111   0F61             ; END SHIFT
2112   0F61 56            add b, a
2113   0F62 E4            pop a
2114   0F63             ; END TERMS
2115   0F63 E7            pop d
2116   0F64 FD 3E         mov [d], bl
2117   0F66             ;; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
2118   0F66 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2119   0F69 D7            push a
2120   0F6A DA            push d
2121   0F6B 26 01 00      mov b, $1
2122   0F6E E7            pop d
2123   0F6F 5A            add d, b
2124   0F70 E4            pop a
2125   0F71 DA            push d
2126   0F72 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2127   0F75 D7            push a
2128   0F76 DA            push d
2129   0F77 26 01 00      mov b, $1
2130   0F7A E7            pop d
2131   0F7B 5A            add d, b
2132   0F7C E4            pop a
2133   0F7D 32            mov bl, [d]
2134   0F7E A7 00         mov bh, 0
2135   0F80 D7            push a
2136   0F81 11            mov a, b
2137   0F82 26 0F 00      mov b, $f
2138   0F85 86            and a, b ; &
2139   0F86 27            mov b, a
2140   0F87 E4            pop a
2141   0F88             ; START SHIFT
2142   0F88 D7            push a
2143   0F89 11            mov a, b
2144   0F8A 26 04 00      mov b, $4
2145   0F8D FD 39         mov c, b
2146   0F8F 9D            shl a, cl
2147   0F90 27            mov b, a
2148   0F91 E4            pop a
2149   0F92             ; END SHIFT
2150   0F92             ; START TERMS
2151   0F92 D7            push a
2152   0F93 11            mov a, b
2153   0F94 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2154   0F97 D7            push a
2155   0F98 DA            push d
2156   0F99 26 02 00      mov b, $2
2157   0F9C E7            pop d
2158   0F9D 5A            add d, b
2159   0F9E E4            pop a
2160   0F9F 32            mov bl, [d]
2161   0FA0 A7 00         mov bh, 0
2162   0FA2 D7            push a
2163   0FA3 11            mov a, b
2164   0FA4 26 3C 00      mov b, $3c
2165   0FA7 86            and a, b ; &
2166   0FA8 27            mov b, a
2167   0FA9 E4            pop a
2168   0FAA             ; START SHIFT
2169   0FAA D7            push a
2170   0FAB 11            mov a, b
2171   0FAC 26 02 00      mov b, $2
2172   0FAF FD 39         mov c, b
2173   0FB1 A5            ashr a, cl
2174   0FB2 27            mov b, a
2175   0FB3 E4            pop a
2176   0FB4             ; END SHIFT
2177   0FB4 56            add b, a
2178   0FB5 E4            pop a
2179   0FB6             ; END TERMS
2180   0FB6 E7            pop d
2181   0FB7 FD 3E         mov [d], bl
2182   0FB9             ;; for (k = 0; k < i - 1; k++) { 
2183   0FB9             _for28_init:
2184   0FB9 FA FB FF      lea d, [bp + -5] ; $k
2185   0FBC DA            push d
2186   0FBD 26 00 00      mov b, $0
2187   0FC0 E7            pop d
2188   0FC1 FD 43         mov [d], b
2189   0FC3             _for28_cond:
2190   0FC3 FA FB FF      lea d, [bp + -5] ; $k
2191   0FC6 2A            mov b, [d]
2192   0FC7             ; START RELATIONAL
2193   0FC7 D7            push a
2194   0FC8 11            mov a, b
2195   0FC9 FA FF FF      lea d, [bp + -1] ; $i
2196   0FCC 2A            mov b, [d]
2197   0FCD             ; START TERMS
2198   0FCD D7            push a
2199   0FCE 11            mov a, b
2200   0FCF 26 01 00      mov b, $1
2201   0FD2 60            sub a, b
2202   0FD3 27            mov b, a
2203   0FD4 E4            pop a
2204   0FD5             ; END TERMS
2205   0FD5 B0            cmp a, b
2206   0FD6 FD 73         slt ; <= (signed)
2207   0FD8 E4            pop a
2208   0FD9             ; END RELATIONAL
2209   0FD9 C0 00 00      cmp b, 0
2210   0FDC C6 1C 10      je _for28_exit
2211   0FDF             _for28_block:
2212   0FDF             ;; output[j++] = output_buffer[k]; 
2213   0FDF FA 07 00      lea d, [bp + 7] ; $output
2214   0FE2 FD 2A         mov d, [d]
2215   0FE4 D7            push a
2216   0FE5 DA            push d
2217   0FE6 FA FD FF      lea d, [bp + -3] ; $j
2218   0FE9 2A            mov b, [d]
2219   0FEA D8            push b
2220   0FEB FD 77         inc b
2221   0FED FA FD FF      lea d, [bp + -3] ; $j
2222   0FF0 FD 43         mov [d], b
2223   0FF2 E5            pop b
2224   0FF3 E7            pop d
2225   0FF4 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2226   0FF8 E4            pop a
2227   0FF9 DA            push d
2228   0FFA FA F2 FF      lea d, [bp + -14] ; $output_buffer
2229   0FFD D7            push a
2230   0FFE DA            push d
2231   0FFF FA FB FF      lea d, [bp + -5] ; $k
2232   1002 2A            mov b, [d]
2233   1003 E7            pop d
2234   1004 5A            add d, b
2235   1005 E4            pop a
2236   1006 32            mov bl, [d]
2237   1007 A7 00         mov bh, 0
2238   1009 E7            pop d
2239   100A FD 3E         mov [d], bl
2240   100C             _for28_update:
2241   100C FA FB FF      lea d, [bp + -5] ; $k
2242   100F 2A            mov b, [d]
2243   1010 D8            push b
2244   1011 FD 77         inc b
2245   1013 FA FB FF      lea d, [bp + -5] ; $k
2246   1016 FD 43         mov [d], b
2247   1018 E5            pop b
2248   1019 0A C3 0F      jmp _for28_cond
2249   101C             _for28_exit:
2250   101C 0A 1F 10      jmp _if25_exit
2251   101F             _if25_exit:
2252   101F             ;; output[j] = '\0'; 
2253   101F FA 07 00      lea d, [bp + 7] ; $output
2254   1022 FD 2A         mov d, [d]
2255   1024 D7            push a
2256   1025 DA            push d
2257   1026 FA FD FF      lea d, [bp + -3] ; $j
2258   1029 2A            mov b, [d]
2259   102A E7            pop d
2260   102B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2261   102F E4            pop a
2262   1030 DA            push d
2263   1031 26 00 00      mov b, $0
2264   1034 E7            pop d
2265   1035 FD 3E         mov [d], bl
2266   1037 F9            leave
2267   1038 09            ret
2268   1039             
2269   1039             va_start:
2270   1039 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2271   103C             ;; argp->current_arg = first_fixed_param + sizeof(first_fixed_param); 
2272   103C FA 05 00      lea d, [bp + 5] ; $argp
2273   103F FD 2A         mov d, [d]
2274   1041 58 00 00      add d, 0
2275   1044 DA            push d
2276   1045 FA 07 00      lea d, [bp + 7] ; $first_fixed_param
2277   1048 2A            mov b, [d]
2278   1049             ; START TERMS
2279   1049 D7            push a
2280   104A 11            mov a, b
2281   104B 26 02 00      mov b, 2
2282   104E 56            add b, a
2283   104F E4            pop a
2284   1050             ; END TERMS
2285   1050 E7            pop d
2286   1051 FD 43         mov [d], b
2287   1053 F9            leave
2288   1054 09            ret
2289   1055             
2290   1055             va_arg:
2291   1055 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2292   1058             ; $p 
2293   1058 52 02 00      sub sp, 2
2294   105B             ;; p = argp->current_arg; 
2295   105B FA FF FF      lea d, [bp + -1] ; $p
2296   105E DA            push d
2297   105F FA 05 00      lea d, [bp + 5] ; $argp
2298   1062 FD 2A         mov d, [d]
2299   1064 58 00 00      add d, 0
2300   1067 2A            mov b, [d]
2301   1068 E7            pop d
2302   1069 FD 43         mov [d], b
2303   106B             ;; argp->current_arg = argp->current_arg + size; 
2304   106B FA 05 00      lea d, [bp + 5] ; $argp
2305   106E FD 2A         mov d, [d]
2306   1070 58 00 00      add d, 0
2307   1073 DA            push d
2308   1074 FA 05 00      lea d, [bp + 5] ; $argp
2309   1077 FD 2A         mov d, [d]
2310   1079 58 00 00      add d, 0
2311   107C 2A            mov b, [d]
2312   107D             ; START TERMS
2313   107D D7            push a
2314   107E 11            mov a, b
2315   107F FA 07 00      lea d, [bp + 7] ; $size
2316   1082 2A            mov b, [d]
2317   1083 56            add b, a
2318   1084 E4            pop a
2319   1085             ; END TERMS
2320   1085 E7            pop d
2321   1086 FD 43         mov [d], b
2322   1088             ;; return p; 
2323   1088 FA FF FF      lea d, [bp + -1] ; $p
2324   108B 2A            mov b, [d]
2325   108C F9            leave
2326   108D 09            ret
2327   108E             
2328   108E             va_end:
2329   108E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2330   1091             ;; argp->current_arg =   0   ; 
2331   1091 FA 05 00      lea d, [bp + 5] ; $argp
2332   1094 FD 2A         mov d, [d]
2333   1096 58 00 00      add d, 0
2334   1099 DA            push d
2335   109A 26 00 00      mov b, $0
2336   109D E7            pop d
2337   109E FD 43         mov [d], b
2338   10A0 F9            leave
2339   10A1 09            ret
2340   10A2             
2341   10A2             printf:
2342   10A2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2343   10A5             ; $p 
2344   10A5             ; $fp 
2345   10A5             ; $i 
2346   10A5 52 06 00      sub sp, 6
2347   10A8             ;; fp = format; 
2348   10A8 FA FD FF      lea d, [bp + -3] ; $fp
2349   10AB DA            push d
2350   10AC FA 05 00      lea d, [bp + 5] ; $format
2351   10AF 2A            mov b, [d]
2352   10B0 E7            pop d
2353   10B1 FD 43         mov [d], b
2354   10B3             ;; p = &format + 2; 
2355   10B3 FA FF FF      lea d, [bp + -1] ; $p
2356   10B6 DA            push d
2357   10B7 FA 05 00      lea d, [bp + 5] ; $format
2358   10BA 2D            mov b, d
2359   10BB             ; START TERMS
2360   10BB D7            push a
2361   10BC 11            mov a, b
2362   10BD 26 02 00      mov b, $2
2363   10C0 56            add b, a
2364   10C1 E4            pop a
2365   10C2             ; END TERMS
2366   10C2 E7            pop d
2367   10C3 FD 43         mov [d], b
2368   10C5             ;; for(;;){ 
2369   10C5             _for29_init:
2370   10C5             _for29_cond:
2371   10C5             _for29_block:
2372   10C5             ;; if(!*fp) break; 
2373   10C5             _if30_cond:
2374   10C5 FA FD FF      lea d, [bp + -3] ; $fp
2375   10C8 2A            mov b, [d]
2376   10C9 74            mov d, b
2377   10CA 32            mov bl, [d]
2378   10CB A7 00         mov bh, 0
2379   10CD C0 00 00      cmp b, 0
2380   10D0 FD 71         seq ; !
2381   10D2 C0 00 00      cmp b, 0
2382   10D5 C6 DE 10      je _if30_else
2383   10D8             _if30_true:
2384   10D8             ;; break; 
2385   10D8 0A E7 12      jmp _for29_exit ; for break
2386   10DB 0A E4 12      jmp _if30_exit
2387   10DE             _if30_else:
2388   10DE             ;; if(*fp == '%'){ 
2389   10DE             _if31_cond:
2390   10DE FA FD FF      lea d, [bp + -3] ; $fp
2391   10E1 2A            mov b, [d]
2392   10E2 74            mov d, b
2393   10E3 32            mov bl, [d]
2394   10E4 A7 00         mov bh, 0
2395   10E6             ; START RELATIONAL
2396   10E6 D7            push a
2397   10E7 11            mov a, b
2398   10E8 26 25 00      mov b, $25
2399   10EB B0            cmp a, b
2400   10EC FD 71         seq ; ==
2401   10EE E4            pop a
2402   10EF             ; END RELATIONAL
2403   10EF C0 00 00      cmp b, 0
2404   10F2 C6 C8 12      je _if31_else
2405   10F5             _if31_true:
2406   10F5             ;; fp++; 
2407   10F5 FA FD FF      lea d, [bp + -3] ; $fp
2408   10F8 2A            mov b, [d]
2409   10F9 D8            push b
2410   10FA FD 77         inc b
2411   10FC FA FD FF      lea d, [bp + -3] ; $fp
2412   10FF FD 43         mov [d], b
2413   1101 E5            pop b
2414   1102             ;; switch(*fp){ 
2415   1102             _switch32_expr:
2416   1102 FA FD FF      lea d, [bp + -3] ; $fp
2417   1105 2A            mov b, [d]
2418   1106 74            mov d, b
2419   1107 32            mov bl, [d]
2420   1108 A7 00         mov bh, 0
2421   110A             _switch32_comparisons:
2422   110A C1 6C         cmp bl, $6c
2423   110C C6 38 11      je _switch32_case0
2424   110F C1 4C         cmp bl, $4c
2425   1111 C6 38 11      je _switch32_case1
2426   1114 C1 64         cmp bl, $64
2427   1116 C6 08 12      je _switch32_case2
2428   1119 C1 69         cmp bl, $69
2429   111B C6 08 12      je _switch32_case3
2430   111E C1 75         cmp bl, $75
2431   1120 C6 2C 12      je _switch32_case4
2432   1123 C1 78         cmp bl, $78
2433   1125 C6 50 12      je _switch32_case5
2434   1128 C1 63         cmp bl, $63
2435   112A C6 6E 12      je _switch32_case6
2436   112D C1 73         cmp bl, $73
2437   112F C6 8D 12      je _switch32_case7
2438   1132 0A AC 12      jmp _switch32_default
2439   1135 0A B8 12      jmp _switch32_exit
2440   1138             _switch32_case0:
2441   1138             _switch32_case1:
2442   1138             ;; fp++; 
2443   1138 FA FD FF      lea d, [bp + -3] ; $fp
2444   113B 2A            mov b, [d]
2445   113C D8            push b
2446   113D FD 77         inc b
2447   113F FA FD FF      lea d, [bp + -3] ; $fp
2448   1142 FD 43         mov [d], b
2449   1144 E5            pop b
2450   1145             ;; if(*fp == 'd' || *fp == 'i') 
2451   1145             _if33_cond:
2452   1145 FA FD FF      lea d, [bp + -3] ; $fp
2453   1148 2A            mov b, [d]
2454   1149 74            mov d, b
2455   114A 32            mov bl, [d]
2456   114B A7 00         mov bh, 0
2457   114D             ; START RELATIONAL
2458   114D D7            push a
2459   114E 11            mov a, b
2460   114F 26 64 00      mov b, $64
2461   1152 B0            cmp a, b
2462   1153 FD 71         seq ; ==
2463   1155 E4            pop a
2464   1156             ; END RELATIONAL
2465   1156 D7            push a
2466   1157 11            mov a, b
2467   1158 FA FD FF      lea d, [bp + -3] ; $fp
2468   115B 2A            mov b, [d]
2469   115C 74            mov d, b
2470   115D 32            mov bl, [d]
2471   115E A7 00         mov bh, 0
2472   1160             ; START RELATIONAL
2473   1160 D7            push a
2474   1161 11            mov a, b
2475   1162 26 69 00      mov b, $69
2476   1165 B0            cmp a, b
2477   1166 FD 71         seq ; ==
2478   1168 E4            pop a
2479   1169             ; END RELATIONAL
2480   1169 FD A8         sor a, b ; ||
2481   116B E4            pop a
2482   116C C0 00 00      cmp b, 0
2483   116F C6 86 11      je _if33_else
2484   1172             _if33_true:
2485   1172             ;; print_signed_long(*(long *)p); 
2486   1172 FD 79         mov g, b
2487   1174 28            mov b, c
2488   1175 FD AB         swp b
2489   1177 D8            push b
2490   1178 FD 27         mov b, g
2491   117A FD AB         swp b
2492   117C D8            push b
2493   117D 07 75 15      call print_signed_long
2494   1180 51 04 00      add sp, 4
2495   1183 0A F3 11      jmp _if33_exit
2496   1186             _if33_else:
2497   1186             ;; if(*fp == 'u') 
2498   1186             _if34_cond:
2499   1186 FA FD FF      lea d, [bp + -3] ; $fp
2500   1189 2A            mov b, [d]
2501   118A 74            mov d, b
2502   118B 32            mov bl, [d]
2503   118C A7 00         mov bh, 0
2504   118E             ; START RELATIONAL
2505   118E D7            push a
2506   118F 11            mov a, b
2507   1190 26 75 00      mov b, $75
2508   1193 B0            cmp a, b
2509   1194 FD 71         seq ; ==
2510   1196 E4            pop a
2511   1197             ; END RELATIONAL
2512   1197 C0 00 00      cmp b, 0
2513   119A C6 B1 11      je _if34_else
2514   119D             _if34_true:
2515   119D             ;; print_unsigned_long(*(unsigned long *)p); 
2516   119D FD 79         mov g, b
2517   119F 28            mov b, c
2518   11A0 FD AB         swp b
2519   11A2 D8            push b
2520   11A3 FD 27         mov b, g
2521   11A5 FD AB         swp b
2522   11A7 D8            push b
2523   11A8 07 C7 16      call print_unsigned_long
2524   11AB 51 04 00      add sp, 4
2525   11AE 0A F3 11      jmp _if34_exit
2526   11B1             _if34_else:
2527   11B1             ;; if(*fp == 'x') 
2528   11B1             _if35_cond:
2529   11B1 FA FD FF      lea d, [bp + -3] ; $fp
2530   11B4 2A            mov b, [d]
2531   11B5 74            mov d, b
2532   11B6 32            mov bl, [d]
2533   11B7 A7 00         mov bh, 0
2534   11B9             ; START RELATIONAL
2535   11B9 D7            push a
2536   11BA 11            mov a, b
2537   11BB 26 78 00      mov b, $78
2538   11BE B0            cmp a, b
2539   11BF FD 71         seq ; ==
2540   11C1 E4            pop a
2541   11C2             ; END RELATIONAL
2542   11C2 C0 00 00      cmp b, 0
2543   11C5 C6 E7 11      je _if35_else
2544   11C8             _if35_true:
2545   11C8             ;; printx32(*(long int *)p); 
2546   11C8 FA FF FF      lea d, [bp + -1] ; $p
2547   11CB 2A            mov b, [d]
2548   11CC 74            mov d, b
2549   11CD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2550   11D0 FD 39         mov c, b ; And place it into C
2551   11D2 2A            mov b, [d] ; Lower Word in B
2552   11D3 FD 79         mov g, b
2553   11D5 28            mov b, c
2554   11D6 FD AB         swp b
2555   11D8 D8            push b
2556   11D9 FD 27         mov b, g
2557   11DB FD AB         swp b
2558   11DD D8            push b
2559   11DE 07 FE 12      call printx32
2560   11E1 51 04 00      add sp, 4
2561   11E4 0A F3 11      jmp _if35_exit
2562   11E7             _if35_else:
2563   11E7             ;; err("Unexpected format in printf."); 
2564   11E7 26 B9 1E      mov b, __s17 ; "Unexpected format in printf."
2565   11EA FD AB         swp b
2566   11EC D8            push b
2567   11ED 07 E9 12      call err
2568   11F0 51 02 00      add sp, 2
2569   11F3             _if35_exit:
2570   11F3             _if34_exit:
2571   11F3             _if33_exit:
2572   11F3             ;; p = p + 4; 
2573   11F3 FA FF FF      lea d, [bp + -1] ; $p
2574   11F6 DA            push d
2575   11F7 FA FF FF      lea d, [bp + -1] ; $p
2576   11FA 2A            mov b, [d]
2577   11FB             ; START TERMS
2578   11FB D7            push a
2579   11FC 11            mov a, b
2580   11FD 26 04 00      mov b, $4
2581   1200 56            add b, a
2582   1201 E4            pop a
2583   1202             ; END TERMS
2584   1202 E7            pop d
2585   1203 FD 43         mov [d], b
2586   1205             ;; break; 
2587   1205 0A B8 12      jmp _switch32_exit ; case break
2588   1208             _switch32_case2:
2589   1208             _switch32_case3:
2590   1208             ;; print_signed(*(int*)p); 
2591   1208 FA FF FF      lea d, [bp + -1] ; $p
2592   120B 2A            mov b, [d]
2593   120C 74            mov d, b
2594   120D 2A            mov b, [d]
2595   120E FD AB         swp b
2596   1210 D8            push b
2597   1211 07 85 14      call print_signed
2598   1214 51 02 00      add sp, 2
2599   1217             ;; p = p + 2; 
2600   1217 FA FF FF      lea d, [bp + -1] ; $p
2601   121A DA            push d
2602   121B FA FF FF      lea d, [bp + -1] ; $p
2603   121E 2A            mov b, [d]
2604   121F             ; START TERMS
2605   121F D7            push a
2606   1220 11            mov a, b
2607   1221 26 02 00      mov b, $2
2608   1224 56            add b, a
2609   1225 E4            pop a
2610   1226             ; END TERMS
2611   1226 E7            pop d
2612   1227 FD 43         mov [d], b
2613   1229             ;; break; 
2614   1229 0A B8 12      jmp _switch32_exit ; case break
2615   122C             _switch32_case4:
2616   122C             ;; print_unsigned(*(unsigned int*)p); 
2617   122C FA FF FF      lea d, [bp + -1] ; $p
2618   122F 2A            mov b, [d]
2619   1230 74            mov d, b
2620   1231 2A            mov b, [d]
2621   1232 FD AB         swp b
2622   1234 D8            push b
2623   1235 07 C4 17      call print_unsigned
2624   1238 51 02 00      add sp, 2
2625   123B             ;; p = p + 2; 
2626   123B FA FF FF      lea d, [bp + -1] ; $p
2627   123E DA            push d
2628   123F FA FF FF      lea d, [bp + -1] ; $p
2629   1242 2A            mov b, [d]
2630   1243             ; START TERMS
2631   1243 D7            push a
2632   1244 11            mov a, b
2633   1245 26 02 00      mov b, $2
2634   1248 56            add b, a
2635   1249 E4            pop a
2636   124A             ; END TERMS
2637   124A E7            pop d
2638   124B FD 43         mov [d], b
2639   124D             ;; break; 
2640   124D 0A B8 12      jmp _switch32_exit ; case break
2641   1250             _switch32_case5:
2642   1250             
2643   1250             ; --- BEGIN INLINE ASM BLOCK
2644   1250 FA FF FF      lea d, [bp + -1] ; $p
2645   1253 FD 2A         mov d, [d]
2646   1255 2A            mov b, [d]
2647   1256 07 17 1C      call print_u16x
2648   1259             ; --- END INLINE ASM BLOCK
2649   1259             
2650   1259             ;; p = p + 2; 
2651   1259 FA FF FF      lea d, [bp + -1] ; $p
2652   125C DA            push d
2653   125D FA FF FF      lea d, [bp + -1] ; $p
2654   1260 2A            mov b, [d]
2655   1261             ; START TERMS
2656   1261 D7            push a
2657   1262 11            mov a, b
2658   1263 26 02 00      mov b, $2
2659   1266 56            add b, a
2660   1267 E4            pop a
2661   1268             ; END TERMS
2662   1268 E7            pop d
2663   1269 FD 43         mov [d], b
2664   126B             ;; break; 
2665   126B 0A B8 12      jmp _switch32_exit ; case break
2666   126E             _switch32_case6:
2667   126E             
2668   126E             ; --- BEGIN INLINE ASM BLOCK
2669   126E FA FF FF      lea d, [bp + -1] ; $p
2670   1271 FD 2A         mov d, [d]
2671   1273 1E            mov al, [d]
2672   1274 23            mov ah, al
2673   1275 07 75 1A      call _putchar
2674   1278             ; --- END INLINE ASM BLOCK
2675   1278             
2676   1278             ;; p = p + 2; 
2677   1278 FA FF FF      lea d, [bp + -1] ; $p
2678   127B DA            push d
2679   127C FA FF FF      lea d, [bp + -1] ; $p
2680   127F 2A            mov b, [d]
2681   1280             ; START TERMS
2682   1280 D7            push a
2683   1281 11            mov a, b
2684   1282 26 02 00      mov b, $2
2685   1285 56            add b, a
2686   1286 E4            pop a
2687   1287             ; END TERMS
2688   1287 E7            pop d
2689   1288 FD 43         mov [d], b
2690   128A             ;; break; 
2691   128A 0A B8 12      jmp _switch32_exit ; case break
2692   128D             _switch32_case7:
2693   128D             
2694   128D             ; --- BEGIN INLINE ASM BLOCK
2695   128D FA FF FF      lea d, [bp + -1] ; $p
2696   1290 FD 2A         mov d, [d]
2697   1292 FD 2A         mov d, [d]
2698   1294 07 BF 1B      call _puts
2699   1297             ; --- END INLINE ASM BLOCK
2700   1297             
2701   1297             ;; p = p + 2; 
2702   1297 FA FF FF      lea d, [bp + -1] ; $p
2703   129A DA            push d
2704   129B FA FF FF      lea d, [bp + -1] ; $p
2705   129E 2A            mov b, [d]
2706   129F             ; START TERMS
2707   129F D7            push a
2708   12A0 11            mov a, b
2709   12A1 26 02 00      mov b, $2
2710   12A4 56            add b, a
2711   12A5 E4            pop a
2712   12A6             ; END TERMS
2713   12A6 E7            pop d
2714   12A7 FD 43         mov [d], b
2715   12A9             ;; break; 
2716   12A9 0A B8 12      jmp _switch32_exit ; case break
2717   12AC             _switch32_default:
2718   12AC             ;; print("Error: Unknown argument type.\n"); 
2719   12AC 26 D6 1E      mov b, __s18 ; "Error: Unknown argument type.\n"
2720   12AF FD AB         swp b
2721   12B1 D8            push b
2722   12B2 07 DC 18      call print
2723   12B5 51 02 00      add sp, 2
2724   12B8             _switch32_exit:
2725   12B8             ;; fp++; 
2726   12B8 FA FD FF      lea d, [bp + -3] ; $fp
2727   12BB 2A            mov b, [d]
2728   12BC D8            push b
2729   12BD FD 77         inc b
2730   12BF FA FD FF      lea d, [bp + -3] ; $fp
2731   12C2 FD 43         mov [d], b
2732   12C4 E5            pop b
2733   12C5 0A E4 12      jmp _if31_exit
2734   12C8             _if31_else:
2735   12C8             ;; putchar(*fp); 
2736   12C8 FA FD FF      lea d, [bp + -3] ; $fp
2737   12CB 2A            mov b, [d]
2738   12CC 74            mov d, b
2739   12CD 32            mov bl, [d]
2740   12CE A7 00         mov bh, 0
2741   12D0 DD            push bl
2742   12D1 07 94 18      call putchar
2743   12D4 51 01 00      add sp, 1
2744   12D7             ;; fp++; 
2745   12D7 FA FD FF      lea d, [bp + -3] ; $fp
2746   12DA 2A            mov b, [d]
2747   12DB D8            push b
2748   12DC FD 77         inc b
2749   12DE FA FD FF      lea d, [bp + -3] ; $fp
2750   12E1 FD 43         mov [d], b
2751   12E3 E5            pop b
2752   12E4             _if31_exit:
2753   12E4             _if30_exit:
2754   12E4             _for29_update:
2755   12E4 0A C5 10      jmp _for29_cond
2756   12E7             _for29_exit:
2757   12E7 F9            leave
2758   12E8 09            ret
2759   12E9             
2760   12E9             err:
2761   12E9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2762   12EC             ;; print(e); 
2763   12EC FA 05 00      lea d, [bp + 5] ; $e
2764   12EF 2A            mov b, [d]
2765   12F0 FD AB         swp b
2766   12F2 D8            push b
2767   12F3 07 DC 18      call print
2768   12F6 51 02 00      add sp, 2
2769   12F9             ;; exit(); 
2770   12F9 07 B8 05      call exit
2771   12FC F9            leave
2772   12FD 09            ret
2773   12FE             
2774   12FE             printx32:
2775   12FE F8 00 00      enter 0 ; (push bp; mov bp, sp)
2776   1301             
2777   1301             ; --- BEGIN INLINE ASM BLOCK
2778   1301 FA 05 00      lea d, [bp + 5] ; $hex
2779   1304 2B 02 00      mov b, [d+2]
2780   1307 07 17 1C      call print_u16x
2781   130A 2A            mov b, [d]
2782   130B 07 17 1C      call print_u16x
2783   130E             ; --- END INLINE ASM BLOCK
2784   130E             
2785   130E F9            leave
2786   130F 09            ret
2787   1310             
2788   1310             printx16:
2789   1310 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2790   1313             
2791   1313             ; --- BEGIN INLINE ASM BLOCK
2792   1313 FA 05 00      lea d, [bp + 5] ; $hex
2793   1316 2A            mov b, [d]
2794   1317 07 17 1C      call print_u16x
2795   131A             ; --- END INLINE ASM BLOCK
2796   131A             
2797   131A F9            leave
2798   131B 09            ret
2799   131C             
2800   131C             printx8:
2801   131C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2802   131F             
2803   131F             ; --- BEGIN INLINE ASM BLOCK
2804   131F FA 05 00      lea d, [bp + 5] ; $hex
2805   1322 32            mov bl, [d]
2806   1323 07 5B 1C      call print_u8x
2807   1326             ; --- END INLINE ASM BLOCK
2808   1326             
2809   1326 F9            leave
2810   1327 09            ret
2811   1328             
2812   1328             hex_to_int:
2813   1328 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2814   132B             ; $value 
2815   132B 10 00 00      mov a, $0
2816   132E 45 FF FF      mov [bp + -1], a
2817   1331             ; $i 
2818   1331             ; $hex_char 
2819   1331             ; $len 
2820   1331 52 07 00      sub sp, 7
2821   1334             ;; len = strlen(hex_string); 
2822   1334 FA FA FF      lea d, [bp + -6] ; $len
2823   1337 DA            push d
2824   1338 FA 05 00      lea d, [bp + 5] ; $hex_string
2825   133B 2A            mov b, [d]
2826   133C FD AB         swp b
2827   133E D8            push b
2828   133F 07 6F 05      call strlen
2829   1342 51 02 00      add sp, 2
2830   1345 E7            pop d
2831   1346 FD 43         mov [d], b
2832   1348             ;; for (i = 0; i < len; i++) { 
2833   1348             _for36_init:
2834   1348 FA FD FF      lea d, [bp + -3] ; $i
2835   134B DA            push d
2836   134C 26 00 00      mov b, $0
2837   134F E7            pop d
2838   1350 FD 43         mov [d], b
2839   1352             _for36_cond:
2840   1352 FA FD FF      lea d, [bp + -3] ; $i
2841   1355 2A            mov b, [d]
2842   1356             ; START RELATIONAL
2843   1356 D7            push a
2844   1357 11            mov a, b
2845   1358 FA FA FF      lea d, [bp + -6] ; $len
2846   135B 2A            mov b, [d]
2847   135C B0            cmp a, b
2848   135D FD 73         slt ; <= (signed)
2849   135F E4            pop a
2850   1360             ; END RELATIONAL
2851   1360 C0 00 00      cmp b, 0
2852   1363 C6 65 14      je _for36_exit
2853   1366             _for36_block:
2854   1366             ;; hex_char = hex_string[i]; 
2855   1366 FA FC FF      lea d, [bp + -4] ; $hex_char
2856   1369 DA            push d
2857   136A FA 05 00      lea d, [bp + 5] ; $hex_string
2858   136D FD 2A         mov d, [d]
2859   136F D7            push a
2860   1370 DA            push d
2861   1371 FA FD FF      lea d, [bp + -3] ; $i
2862   1374 2A            mov b, [d]
2863   1375 E7            pop d
2864   1376 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2865   137A E4            pop a
2866   137B 32            mov bl, [d]
2867   137C A7 00         mov bh, 0
2868   137E E7            pop d
2869   137F FD 3E         mov [d], bl
2870   1381             ;; if (hex_char >= 'a' && hex_char <= 'f')  
2871   1381             _if37_cond:
2872   1381 FA FC FF      lea d, [bp + -4] ; $hex_char
2873   1384 32            mov bl, [d]
2874   1385 A7 00         mov bh, 0
2875   1387             ; START RELATIONAL
2876   1387 D7            push a
2877   1388 11            mov a, b
2878   1389 26 61 00      mov b, $61
2879   138C B0            cmp a, b
2880   138D FD 80         sge ; >=
2881   138F E4            pop a
2882   1390             ; END RELATIONAL
2883   1390 D7            push a
2884   1391 11            mov a, b
2885   1392 FA FC FF      lea d, [bp + -4] ; $hex_char
2886   1395 32            mov bl, [d]
2887   1396 A7 00         mov bh, 0
2888   1398             ; START RELATIONAL
2889   1398 D7            push a
2890   1399 11            mov a, b
2891   139A 26 66 00      mov b, $66
2892   139D B0            cmp a, b
2893   139E FD 74         sle ; <=
2894   13A0 E4            pop a
2895   13A1             ; END RELATIONAL
2896   13A1 FD A7         sand a, b ; &&
2897   13A3 E4            pop a
2898   13A4 C0 00 00      cmp b, 0
2899   13A7 C6 D8 13      je _if37_else
2900   13AA             _if37_true:
2901   13AA             ;; value = (value * 16) + (hex_char - 'a' + 10); 
2902   13AA FA FF FF      lea d, [bp + -1] ; $value
2903   13AD DA            push d
2904   13AE FA FF FF      lea d, [bp + -1] ; $value
2905   13B1 2A            mov b, [d]
2906   13B2             ; START FACTORS
2907   13B2 D7            push a
2908   13B3 11            mov a, b
2909   13B4 26 10 00      mov b, $10
2910   13B7 AC            mul a, b ; *
2911   13B8 11            mov a, b
2912   13B9 27            mov b, a
2913   13BA E4            pop a
2914   13BB             ; END FACTORS
2915   13BB             ; START TERMS
2916   13BB D7            push a
2917   13BC 11            mov a, b
2918   13BD FA FC FF      lea d, [bp + -4] ; $hex_char
2919   13C0 32            mov bl, [d]
2920   13C1 A7 00         mov bh, 0
2921   13C3             ; START TERMS
2922   13C3 D7            push a
2923   13C4 11            mov a, b
2924   13C5 26 61 00      mov b, $61
2925   13C8 60            sub a, b
2926   13C9 27            mov b, a
2927   13CA 11            mov a, b
2928   13CB 26 0A 00      mov b, $a
2929   13CE 56            add b, a
2930   13CF E4            pop a
2931   13D0             ; END TERMS
2932   13D0 56            add b, a
2933   13D1 E4            pop a
2934   13D2             ; END TERMS
2935   13D2 E7            pop d
2936   13D3 FD 43         mov [d], b
2937   13D5 0A 55 14      jmp _if37_exit
2938   13D8             _if37_else:
2939   13D8             ;; if (hex_char >= 'A' && hex_char <= 'F')  
2940   13D8             _if38_cond:
2941   13D8 FA FC FF      lea d, [bp + -4] ; $hex_char
2942   13DB 32            mov bl, [d]
2943   13DC A7 00         mov bh, 0
2944   13DE             ; START RELATIONAL
2945   13DE D7            push a
2946   13DF 11            mov a, b
2947   13E0 26 41 00      mov b, $41
2948   13E3 B0            cmp a, b
2949   13E4 FD 80         sge ; >=
2950   13E6 E4            pop a
2951   13E7             ; END RELATIONAL
2952   13E7 D7            push a
2953   13E8 11            mov a, b
2954   13E9 FA FC FF      lea d, [bp + -4] ; $hex_char
2955   13EC 32            mov bl, [d]
2956   13ED A7 00         mov bh, 0
2957   13EF             ; START RELATIONAL
2958   13EF D7            push a
2959   13F0 11            mov a, b
2960   13F1 26 46 00      mov b, $46
2961   13F4 B0            cmp a, b
2962   13F5 FD 74         sle ; <=
2963   13F7 E4            pop a
2964   13F8             ; END RELATIONAL
2965   13F8 FD A7         sand a, b ; &&
2966   13FA E4            pop a
2967   13FB C0 00 00      cmp b, 0
2968   13FE C6 2F 14      je _if38_else
2969   1401             _if38_true:
2970   1401             ;; value = (value * 16) + (hex_char - 'A' + 10); 
2971   1401 FA FF FF      lea d, [bp + -1] ; $value
2972   1404 DA            push d
2973   1405 FA FF FF      lea d, [bp + -1] ; $value
2974   1408 2A            mov b, [d]
2975   1409             ; START FACTORS
2976   1409 D7            push a
2977   140A 11            mov a, b
2978   140B 26 10 00      mov b, $10
2979   140E AC            mul a, b ; *
2980   140F 11            mov a, b
2981   1410 27            mov b, a
2982   1411 E4            pop a
2983   1412             ; END FACTORS
2984   1412             ; START TERMS
2985   1412 D7            push a
2986   1413 11            mov a, b
2987   1414 FA FC FF      lea d, [bp + -4] ; $hex_char
2988   1417 32            mov bl, [d]
2989   1418 A7 00         mov bh, 0
2990   141A             ; START TERMS
2991   141A D7            push a
2992   141B 11            mov a, b
2993   141C 26 41 00      mov b, $41
2994   141F 60            sub a, b
2995   1420 27            mov b, a
2996   1421 11            mov a, b
2997   1422 26 0A 00      mov b, $a
2998   1425 56            add b, a
2999   1426 E4            pop a
3000   1427             ; END TERMS
3001   1427 56            add b, a
3002   1428 E4            pop a
3003   1429             ; END TERMS
3004   1429 E7            pop d
3005   142A FD 43         mov [d], b
3006   142C 0A 55 14      jmp _if38_exit
3007   142F             _if38_else:
3008   142F             ;; value = (value * 16) + (hex_char - '0'); 
3009   142F FA FF FF      lea d, [bp + -1] ; $value
3010   1432 DA            push d
3011   1433 FA FF FF      lea d, [bp + -1] ; $value
3012   1436 2A            mov b, [d]
3013   1437             ; START FACTORS
3014   1437 D7            push a
3015   1438 11            mov a, b
3016   1439 26 10 00      mov b, $10
3017   143C AC            mul a, b ; *
3018   143D 11            mov a, b
3019   143E 27            mov b, a
3020   143F E4            pop a
3021   1440             ; END FACTORS
3022   1440             ; START TERMS
3023   1440 D7            push a
3024   1441 11            mov a, b
3025   1442 FA FC FF      lea d, [bp + -4] ; $hex_char
3026   1445 32            mov bl, [d]
3027   1446 A7 00         mov bh, 0
3028   1448             ; START TERMS
3029   1448 D7            push a
3030   1449 11            mov a, b
3031   144A 26 30 00      mov b, $30
3032   144D 60            sub a, b
3033   144E 27            mov b, a
3034   144F E4            pop a
3035   1450             ; END TERMS
3036   1450 56            add b, a
3037   1451 E4            pop a
3038   1452             ; END TERMS
3039   1452 E7            pop d
3040   1453 FD 43         mov [d], b
3041   1455             _if38_exit:
3042   1455             _if37_exit:
3043   1455             _for36_update:
3044   1455 FA FD FF      lea d, [bp + -3] ; $i
3045   1458 2A            mov b, [d]
3046   1459 D8            push b
3047   145A FD 77         inc b
3048   145C FA FD FF      lea d, [bp + -3] ; $i
3049   145F FD 43         mov [d], b
3050   1461 E5            pop b
3051   1462 0A 52 13      jmp _for36_cond
3052   1465             _for36_exit:
3053   1465             ;; return value; 
3054   1465 FA FF FF      lea d, [bp + -1] ; $value
3055   1468 2A            mov b, [d]
3056   1469 F9            leave
3057   146A 09            ret
3058   146B             
3059   146B             gets:
3060   146B F8 00 00      enter 0 ; (push bp; mov bp, sp)
3061   146E             
3062   146E             ; --- BEGIN INLINE ASM BLOCK
3063   146E FA 05 00      lea d, [bp + 5] ; $s
3064   1471 15            mov a, [d]
3065   1472 3C            mov d, a
3066   1473 07 7C 1A      call _gets
3067   1476             ; --- END INLINE ASM BLOCK
3068   1476             
3069   1476             ;; return strlen(s); 
3070   1476 FA 05 00      lea d, [bp + 5] ; $s
3071   1479 2A            mov b, [d]
3072   147A FD AB         swp b
3073   147C D8            push b
3074   147D 07 6F 05      call strlen
3075   1480 51 02 00      add sp, 2
3076   1483 F9            leave
3077   1484 09            ret
3078   1485             
3079   1485             print_signed:
3080   1485 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3081   1488             ; $digits 
3082   1488             ; $i 
3083   1488 10 00 00      mov a, $0
3084   148B 45 FA FF      mov [bp + -6], a
3085   148E 52 07 00      sub sp, 7
3086   1491             ;; if (num < 0) { 
3087   1491             _if39_cond:
3088   1491 FA 05 00      lea d, [bp + 5] ; $num
3089   1494 2A            mov b, [d]
3090   1495             ; START RELATIONAL
3091   1495 D7            push a
3092   1496 11            mov a, b
3093   1497 26 00 00      mov b, $0
3094   149A B0            cmp a, b
3095   149B FD 73         slt ; <= (signed)
3096   149D E4            pop a
3097   149E             ; END RELATIONAL
3098   149E C0 00 00      cmp b, 0
3099   14A1 C6 BE 14      je _if39_else
3100   14A4             _if39_true:
3101   14A4             ;; putchar('-'); 
3102   14A4 26 2D 00      mov b, $2d
3103   14A7 DD            push bl
3104   14A8 07 94 18      call putchar
3105   14AB 51 01 00      add sp, 1
3106   14AE             ;; num = -num; 
3107   14AE FA 05 00      lea d, [bp + 5] ; $num
3108   14B1 DA            push d
3109   14B2 FA 05 00      lea d, [bp + 5] ; $num
3110   14B5 2A            mov b, [d]
3111   14B6 FD 97         neg b
3112   14B8 E7            pop d
3113   14B9 FD 43         mov [d], b
3114   14BB 0A E0 14      jmp _if39_exit
3115   14BE             _if39_else:
3116   14BE             ;; if (num == 0) { 
3117   14BE             _if40_cond:
3118   14BE FA 05 00      lea d, [bp + 5] ; $num
3119   14C1 2A            mov b, [d]
3120   14C2             ; START RELATIONAL
3121   14C2 D7            push a
3122   14C3 11            mov a, b
3123   14C4 26 00 00      mov b, $0
3124   14C7 B0            cmp a, b
3125   14C8 FD 71         seq ; ==
3126   14CA E4            pop a
3127   14CB             ; END RELATIONAL
3128   14CB C0 00 00      cmp b, 0
3129   14CE C6 E0 14      je _if40_exit
3130   14D1             _if40_true:
3131   14D1             ;; putchar('0'); 
3132   14D1 26 30 00      mov b, $30
3133   14D4 DD            push bl
3134   14D5 07 94 18      call putchar
3135   14D8 51 01 00      add sp, 1
3136   14DB             ;; return; 
3137   14DB F9            leave
3138   14DC 09            ret
3139   14DD 0A E0 14      jmp _if40_exit
3140   14E0             _if40_exit:
3141   14E0             _if39_exit:
3142   14E0             ;; while (num > 0) { 
3143   14E0             _while41_cond:
3144   14E0 FA 05 00      lea d, [bp + 5] ; $num
3145   14E3 2A            mov b, [d]
3146   14E4             ; START RELATIONAL
3147   14E4 D7            push a
3148   14E5 11            mov a, b
3149   14E6 26 00 00      mov b, $0
3150   14E9 B0            cmp a, b
3151   14EA FD 7F         sgt ; >
3152   14EC E4            pop a
3153   14ED             ; END RELATIONAL
3154   14ED C0 00 00      cmp b, 0
3155   14F0 C6 3A 15      je _while41_exit
3156   14F3             _while41_block:
3157   14F3             ;; digits[i] = '0' + (num % 10); 
3158   14F3 FA FC FF      lea d, [bp + -4] ; $digits
3159   14F6 D7            push a
3160   14F7 DA            push d
3161   14F8 FA FA FF      lea d, [bp + -6] ; $i
3162   14FB 2A            mov b, [d]
3163   14FC E7            pop d
3164   14FD 5A            add d, b
3165   14FE E4            pop a
3166   14FF DA            push d
3167   1500 26 30 00      mov b, $30
3168   1503             ; START TERMS
3169   1503 D7            push a
3170   1504 11            mov a, b
3171   1505 FA 05 00      lea d, [bp + 5] ; $num
3172   1508 2A            mov b, [d]
3173   1509             ; START FACTORS
3174   1509 D7            push a
3175   150A 11            mov a, b
3176   150B 26 0A 00      mov b, $a
3177   150E AE            div a, b ; 
3178   150F 11            mov a, b
3179   1510 27            mov b, a
3180   1511 E4            pop a
3181   1512             ; END FACTORS
3182   1512 56            add b, a
3183   1513 E4            pop a
3184   1514             ; END TERMS
3185   1514 E7            pop d
3186   1515 FD 3E         mov [d], bl
3187   1517             ;; num = num / 10; 
3188   1517 FA 05 00      lea d, [bp + 5] ; $num
3189   151A DA            push d
3190   151B FA 05 00      lea d, [bp + 5] ; $num
3191   151E 2A            mov b, [d]
3192   151F             ; START FACTORS
3193   151F D7            push a
3194   1520 11            mov a, b
3195   1521 26 0A 00      mov b, $a
3196   1524 AE            div a, b
3197   1525 27            mov b, a
3198   1526 E4            pop a
3199   1527             ; END FACTORS
3200   1527 E7            pop d
3201   1528 FD 43         mov [d], b
3202   152A             ;; i++; 
3203   152A FA FA FF      lea d, [bp + -6] ; $i
3204   152D 2A            mov b, [d]
3205   152E D8            push b
3206   152F FD 77         inc b
3207   1531 FA FA FF      lea d, [bp + -6] ; $i
3208   1534 FD 43         mov [d], b
3209   1536 E5            pop b
3210   1537 0A E0 14      jmp _while41_cond
3211   153A             _while41_exit:
3212   153A             ;; while (i > 0) { 
3213   153A             _while42_cond:
3214   153A FA FA FF      lea d, [bp + -6] ; $i
3215   153D 2A            mov b, [d]
3216   153E             ; START RELATIONAL
3217   153E D7            push a
3218   153F 11            mov a, b
3219   1540 26 00 00      mov b, $0
3220   1543 B0            cmp a, b
3221   1544 FD 7F         sgt ; >
3222   1546 E4            pop a
3223   1547             ; END RELATIONAL
3224   1547 C0 00 00      cmp b, 0
3225   154A C6 73 15      je _while42_exit
3226   154D             _while42_block:
3227   154D             ;; i--; 
3228   154D FA FA FF      lea d, [bp + -6] ; $i
3229   1550 2A            mov b, [d]
3230   1551 D8            push b
3231   1552 FD 7D         dec b
3232   1554 FA FA FF      lea d, [bp + -6] ; $i
3233   1557 FD 43         mov [d], b
3234   1559 E5            pop b
3235   155A             ;; putchar(digits[i]); 
3236   155A FA FC FF      lea d, [bp + -4] ; $digits
3237   155D D7            push a
3238   155E DA            push d
3239   155F FA FA FF      lea d, [bp + -6] ; $i
3240   1562 2A            mov b, [d]
3241   1563 E7            pop d
3242   1564 5A            add d, b
3243   1565 E4            pop a
3244   1566 32            mov bl, [d]
3245   1567 A7 00         mov bh, 0
3246   1569 DD            push bl
3247   156A 07 94 18      call putchar
3248   156D 51 01 00      add sp, 1
3249   1570 0A 3A 15      jmp _while42_cond
3250   1573             _while42_exit:
3251   1573 F9            leave
3252   1574 09            ret
3253   1575             
3254   1575             print_signed_long:
3255   1575 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3256   1578             ; $digits 
3257   1578             ; $i 
3258   1578 10 00 00      mov a, $0
3259   157B 45 F5 FF      mov [bp + -11], a
3260   157E 52 0C 00      sub sp, 12
3261   1581             ;; if (num < 0) { 
3262   1581             _if43_cond:
3263   1581 FA 05 00      lea d, [bp + 5] ; $num
3264   1584 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3265   1587 FD 39         mov c, b ; And place it into C
3266   1589 2A            mov b, [d] ; Lower Word in B
3267   158A             ; START RELATIONAL
3268   158A D7            push a
3269   158B FD D8         push g
3270   158D 11            mov a, b
3271   158E FD 7A         mov g, c
3272   1590 26 00 00      mov b, $0
3273   1593 4D            mov si, a
3274   1594 11            mov a, b
3275   1595 4F            mov di, a
3276   1596 FD 12         mov a, g
3277   1598 28            mov b, c
3278   1599 B0            cmp a, b
3279   159A FD 75         slu ; <
3280   159C D8            push b
3281   159D 28            mov b, c
3282   159E FD 71         seq ; ==
3283   15A0 D8            push b
3284   15A1 50            mov a, di
3285   15A2 27            mov b, a
3286   15A3 4E            mov a, si
3287   15A4 B0            cmp a, b
3288   15A5 FD 75         slu ; <
3289   15A7 E4            pop a
3290   15A8 FD 92         and b, a
3291   15AA E4            pop a
3292   15AB FD 70         or b, a
3293   15AD               
3294   15AD FD F1         pop g
3295   15AF E4            pop a
3296   15B0             ; END RELATIONAL
3297   15B0 C0 00 00      cmp b, 0
3298   15B3 C6 DA 15      je _if43_else
3299   15B6             _if43_true:
3300   15B6             ;; putchar('-'); 
3301   15B6 26 2D 00      mov b, $2d
3302   15B9 DD            push bl
3303   15BA 07 94 18      call putchar
3304   15BD 51 01 00      add sp, 1
3305   15C0             ;; num = -num; 
3306   15C0 FA 05 00      lea d, [bp + 5] ; $num
3307   15C3 DA            push d
3308   15C4 FA 05 00      lea d, [bp + 5] ; $num
3309   15C7 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3310   15CA FD 39         mov c, b ; And place it into C
3311   15CC 2A            mov b, [d] ; Lower Word in B
3312   15CD FD 97         neg b
3313   15CF E7            pop d
3314   15D0 FD 43         mov [d], b
3315   15D2 28            mov b, c
3316   15D3 FD 44 02 00   mov [d + 2], b
3317   15D7 0A 11 16      jmp _if43_exit
3318   15DA             _if43_else:
3319   15DA             ;; if (num == 0) { 
3320   15DA             _if44_cond:
3321   15DA FA 05 00      lea d, [bp + 5] ; $num
3322   15DD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3323   15E0 FD 39         mov c, b ; And place it into C
3324   15E2 2A            mov b, [d] ; Lower Word in B
3325   15E3             ; START RELATIONAL
3326   15E3 D7            push a
3327   15E4 FD D8         push g
3328   15E6 11            mov a, b
3329   15E7 FD 7A         mov g, c
3330   15E9 26 00 00      mov b, $0
3331   15EC B0            cmp a, b
3332   15ED FD 71         seq ; ==
3333   15EF D8            push b
3334   15F0 12            mov a, c
3335   15F1 FD 27         mov b, g
3336   15F3 B0            cmp a, b
3337   15F4 FD 71         seq ; ==
3338   15F6 E4            pop a
3339   15F7 FD A7         sand a, b
3340   15F9 FD F1         pop g
3341   15FB E4            pop a
3342   15FC             ; END RELATIONAL
3343   15FC C0 00 00      cmp b, 0
3344   15FF C6 11 16      je _if44_exit
3345   1602             _if44_true:
3346   1602             ;; putchar('0'); 
3347   1602 26 30 00      mov b, $30
3348   1605 DD            push bl
3349   1606 07 94 18      call putchar
3350   1609 51 01 00      add sp, 1
3351   160C             ;; return; 
3352   160C F9            leave
3353   160D 09            ret
3354   160E 0A 11 16      jmp _if44_exit
3355   1611             _if44_exit:
3356   1611             _if43_exit:
3357   1611             ;; while (num > 0) { 
3358   1611             _while45_cond:
3359   1611 FA 05 00      lea d, [bp + 5] ; $num
3360   1614 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3361   1617 FD 39         mov c, b ; And place it into C
3362   1619 2A            mov b, [d] ; Lower Word in B
3363   161A             ; START RELATIONAL
3364   161A D7            push a
3365   161B FD D8         push g
3366   161D 11            mov a, b
3367   161E FD 7A         mov g, c
3368   1620 26 00 00      mov b, $0
3369   1623 B0            cmp a, b
3370   1624 FD 7F         sgt ; >
3371   1626 FD F1         pop g
3372   1628 E4            pop a
3373   1629             ; END RELATIONAL
3374   1629 C0 00 00      cmp b, 0
3375   162C C6 8C 16      je _while45_exit
3376   162F             _while45_block:
3377   162F             ;; digits[i] = '0' + (num % 10); 
3378   162F FA F7 FF      lea d, [bp + -9] ; $digits
3379   1632 D7            push a
3380   1633 DA            push d
3381   1634 FA F5 FF      lea d, [bp + -11] ; $i
3382   1637 2A            mov b, [d]
3383   1638 E7            pop d
3384   1639 5A            add d, b
3385   163A E4            pop a
3386   163B DA            push d
3387   163C 26 30 00      mov b, $30
3388   163F             ; START TERMS
3389   163F D7            push a
3390   1640 11            mov a, b
3391   1641 FA 05 00      lea d, [bp + 5] ; $num
3392   1644 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3393   1647 FD 39         mov c, b ; And place it into C
3394   1649 2A            mov b, [d] ; Lower Word in B
3395   164A             ; START FACTORS
3396   164A D7            push a
3397   164B 11            mov a, b
3398   164C 26 0A 00      mov b, $a
3399   164F AE            div a, b ; 
3400   1650 11            mov a, b
3401   1651 27            mov b, a
3402   1652 E4            pop a
3403   1653             ; END FACTORS
3404   1653 54            add a, b
3405   1654 D7            push a
3406   1655 FD 12         mov a, g
3407   1657 28            mov b, c
3408   1658 5C            adc a, b
3409   1659 39            mov c, a
3410   165A E5            pop b
3411   165B E4            pop a
3412   165C             ; END TERMS
3413   165C E7            pop d
3414   165D FD 3E         mov [d], bl
3415   165F             ;; num = num / 10; 
3416   165F FA 05 00      lea d, [bp + 5] ; $num
3417   1662 DA            push d
3418   1663 FA 05 00      lea d, [bp + 5] ; $num
3419   1666 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3420   1669 FD 39         mov c, b ; And place it into C
3421   166B 2A            mov b, [d] ; Lower Word in B
3422   166C             ; START FACTORS
3423   166C D7            push a
3424   166D 11            mov a, b
3425   166E 26 0A 00      mov b, $a
3426   1671 AE            div a, b
3427   1672 27            mov b, a
3428   1673 E4            pop a
3429   1674             ; END FACTORS
3430   1674 E7            pop d
3431   1675 FD 43         mov [d], b
3432   1677 28            mov b, c
3433   1678 FD 44 02 00   mov [d + 2], b
3434   167C             ;; i++; 
3435   167C FA F5 FF      lea d, [bp + -11] ; $i
3436   167F 2A            mov b, [d]
3437   1680 D8            push b
3438   1681 FD 77         inc b
3439   1683 FA F5 FF      lea d, [bp + -11] ; $i
3440   1686 FD 43         mov [d], b
3441   1688 E5            pop b
3442   1689 0A 11 16      jmp _while45_cond
3443   168C             _while45_exit:
3444   168C             ;; while (i > 0) { 
3445   168C             _while46_cond:
3446   168C FA F5 FF      lea d, [bp + -11] ; $i
3447   168F 2A            mov b, [d]
3448   1690             ; START RELATIONAL
3449   1690 D7            push a
3450   1691 11            mov a, b
3451   1692 26 00 00      mov b, $0
3452   1695 B0            cmp a, b
3453   1696 FD 7F         sgt ; >
3454   1698 E4            pop a
3455   1699             ; END RELATIONAL
3456   1699 C0 00 00      cmp b, 0
3457   169C C6 C5 16      je _while46_exit
3458   169F             _while46_block:
3459   169F             ;; i--; 
3460   169F FA F5 FF      lea d, [bp + -11] ; $i
3461   16A2 2A            mov b, [d]
3462   16A3 D8            push b
3463   16A4 FD 7D         dec b
3464   16A6 FA F5 FF      lea d, [bp + -11] ; $i
3465   16A9 FD 43         mov [d], b
3466   16AB E5            pop b
3467   16AC             ;; putchar(digits[i]); 
3468   16AC FA F7 FF      lea d, [bp + -9] ; $digits
3469   16AF D7            push a
3470   16B0 DA            push d
3471   16B1 FA F5 FF      lea d, [bp + -11] ; $i
3472   16B4 2A            mov b, [d]
3473   16B5 E7            pop d
3474   16B6 5A            add d, b
3475   16B7 E4            pop a
3476   16B8 32            mov bl, [d]
3477   16B9 A7 00         mov bh, 0
3478   16BB DD            push bl
3479   16BC 07 94 18      call putchar
3480   16BF 51 01 00      add sp, 1
3481   16C2 0A 8C 16      jmp _while46_cond
3482   16C5             _while46_exit:
3483   16C5 F9            leave
3484   16C6 09            ret
3485   16C7             
3486   16C7             print_unsigned_long:
3487   16C7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3488   16CA             ; $digits 
3489   16CA             ; $i 
3490   16CA 52 0C 00      sub sp, 12
3491   16CD             ;; i = 0; 
3492   16CD FA F5 FF      lea d, [bp + -11] ; $i
3493   16D0 DA            push d
3494   16D1 26 00 00      mov b, $0
3495   16D4 E7            pop d
3496   16D5 FD 43         mov [d], b
3497   16D7             ;; if(num == 0){ 
3498   16D7             _if47_cond:
3499   16D7 FA 05 00      lea d, [bp + 5] ; $num
3500   16DA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3501   16DD FD 39         mov c, b ; And place it into C
3502   16DF 2A            mov b, [d] ; Lower Word in B
3503   16E0             ; START RELATIONAL
3504   16E0 D7            push a
3505   16E1 FD D8         push g
3506   16E3 11            mov a, b
3507   16E4 FD 7A         mov g, c
3508   16E6 26 00 00      mov b, $0
3509   16E9 B0            cmp a, b
3510   16EA FD 71         seq ; ==
3511   16EC D8            push b
3512   16ED 12            mov a, c
3513   16EE FD 27         mov b, g
3514   16F0 B0            cmp a, b
3515   16F1 FD 71         seq ; ==
3516   16F3 E4            pop a
3517   16F4 FD A7         sand a, b
3518   16F6 FD F1         pop g
3519   16F8 E4            pop a
3520   16F9             ; END RELATIONAL
3521   16F9 C0 00 00      cmp b, 0
3522   16FC C6 0E 17      je _if47_exit
3523   16FF             _if47_true:
3524   16FF             ;; putchar('0'); 
3525   16FF 26 30 00      mov b, $30
3526   1702 DD            push bl
3527   1703 07 94 18      call putchar
3528   1706 51 01 00      add sp, 1
3529   1709             ;; return; 
3530   1709 F9            leave
3531   170A 09            ret
3532   170B 0A 0E 17      jmp _if47_exit
3533   170E             _if47_exit:
3534   170E             ;; while (num > 0) { 
3535   170E             _while48_cond:
3536   170E FA 05 00      lea d, [bp + 5] ; $num
3537   1711 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3538   1714 FD 39         mov c, b ; And place it into C
3539   1716 2A            mov b, [d] ; Lower Word in B
3540   1717             ; START RELATIONAL
3541   1717 D7            push a
3542   1718 FD D8         push g
3543   171A 11            mov a, b
3544   171B FD 7A         mov g, c
3545   171D 26 00 00      mov b, $0
3546   1720 B0            cmp a, b
3547   1721 FD 81         sgu ; > (unsigned)
3548   1723 FD F1         pop g
3549   1725 E4            pop a
3550   1726             ; END RELATIONAL
3551   1726 C0 00 00      cmp b, 0
3552   1729 C6 89 17      je _while48_exit
3553   172C             _while48_block:
3554   172C             ;; digits[i] = '0' + (num % 10); 
3555   172C FA F7 FF      lea d, [bp + -9] ; $digits
3556   172F D7            push a
3557   1730 DA            push d
3558   1731 FA F5 FF      lea d, [bp + -11] ; $i
3559   1734 2A            mov b, [d]
3560   1735 E7            pop d
3561   1736 5A            add d, b
3562   1737 E4            pop a
3563   1738 DA            push d
3564   1739 26 30 00      mov b, $30
3565   173C             ; START TERMS
3566   173C D7            push a
3567   173D 11            mov a, b
3568   173E FA 05 00      lea d, [bp + 5] ; $num
3569   1741 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3570   1744 FD 39         mov c, b ; And place it into C
3571   1746 2A            mov b, [d] ; Lower Word in B
3572   1747             ; START FACTORS
3573   1747 D7            push a
3574   1748 11            mov a, b
3575   1749 26 0A 00      mov b, $a
3576   174C AE            div a, b ; 
3577   174D 11            mov a, b
3578   174E 27            mov b, a
3579   174F E4            pop a
3580   1750             ; END FACTORS
3581   1750 54            add a, b
3582   1751 D7            push a
3583   1752 FD 12         mov a, g
3584   1754 28            mov b, c
3585   1755 5C            adc a, b
3586   1756 39            mov c, a
3587   1757 E5            pop b
3588   1758 E4            pop a
3589   1759             ; END TERMS
3590   1759 E7            pop d
3591   175A FD 3E         mov [d], bl
3592   175C             ;; num = num / 10; 
3593   175C FA 05 00      lea d, [bp + 5] ; $num
3594   175F DA            push d
3595   1760 FA 05 00      lea d, [bp + 5] ; $num
3596   1763 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3597   1766 FD 39         mov c, b ; And place it into C
3598   1768 2A            mov b, [d] ; Lower Word in B
3599   1769             ; START FACTORS
3600   1769 D7            push a
3601   176A 11            mov a, b
3602   176B 26 0A 00      mov b, $a
3603   176E AE            div a, b
3604   176F 27            mov b, a
3605   1770 E4            pop a
3606   1771             ; END FACTORS
3607   1771 E7            pop d
3608   1772 FD 43         mov [d], b
3609   1774 28            mov b, c
3610   1775 FD 44 02 00   mov [d + 2], b
3611   1779             ;; i++; 
3612   1779 FA F5 FF      lea d, [bp + -11] ; $i
3613   177C 2A            mov b, [d]
3614   177D D8            push b
3615   177E FD 77         inc b
3616   1780 FA F5 FF      lea d, [bp + -11] ; $i
3617   1783 FD 43         mov [d], b
3618   1785 E5            pop b
3619   1786 0A 0E 17      jmp _while48_cond
3620   1789             _while48_exit:
3621   1789             ;; while (i > 0) { 
3622   1789             _while49_cond:
3623   1789 FA F5 FF      lea d, [bp + -11] ; $i
3624   178C 2A            mov b, [d]
3625   178D             ; START RELATIONAL
3626   178D D7            push a
3627   178E 11            mov a, b
3628   178F 26 00 00      mov b, $0
3629   1792 B0            cmp a, b
3630   1793 FD 7F         sgt ; >
3631   1795 E4            pop a
3632   1796             ; END RELATIONAL
3633   1796 C0 00 00      cmp b, 0
3634   1799 C6 C2 17      je _while49_exit
3635   179C             _while49_block:
3636   179C             ;; i--; 
3637   179C FA F5 FF      lea d, [bp + -11] ; $i
3638   179F 2A            mov b, [d]
3639   17A0 D8            push b
3640   17A1 FD 7D         dec b
3641   17A3 FA F5 FF      lea d, [bp + -11] ; $i
3642   17A6 FD 43         mov [d], b
3643   17A8 E5            pop b
3644   17A9             ;; putchar(digits[i]); 
3645   17A9 FA F7 FF      lea d, [bp + -9] ; $digits
3646   17AC D7            push a
3647   17AD DA            push d
3648   17AE FA F5 FF      lea d, [bp + -11] ; $i
3649   17B1 2A            mov b, [d]
3650   17B2 E7            pop d
3651   17B3 5A            add d, b
3652   17B4 E4            pop a
3653   17B5 32            mov bl, [d]
3654   17B6 A7 00         mov bh, 0
3655   17B8 DD            push bl
3656   17B9 07 94 18      call putchar
3657   17BC 51 01 00      add sp, 1
3658   17BF 0A 89 17      jmp _while49_cond
3659   17C2             _while49_exit:
3660   17C2 F9            leave
3661   17C3 09            ret
3662   17C4             
3663   17C4             print_unsigned:
3664   17C4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3665   17C7             ; $digits 
3666   17C7             ; $i 
3667   17C7 52 07 00      sub sp, 7
3668   17CA             ;; i = 0; 
3669   17CA FA FA FF      lea d, [bp + -6] ; $i
3670   17CD DA            push d
3671   17CE 26 00 00      mov b, $0
3672   17D1 E7            pop d
3673   17D2 FD 43         mov [d], b
3674   17D4             ;; if(num == 0){ 
3675   17D4             _if50_cond:
3676   17D4 FA 05 00      lea d, [bp + 5] ; $num
3677   17D7 2A            mov b, [d]
3678   17D8             ; START RELATIONAL
3679   17D8 D7            push a
3680   17D9 11            mov a, b
3681   17DA 26 00 00      mov b, $0
3682   17DD B0            cmp a, b
3683   17DE FD 71         seq ; ==
3684   17E0 E4            pop a
3685   17E1             ; END RELATIONAL
3686   17E1 C0 00 00      cmp b, 0
3687   17E4 C6 F6 17      je _if50_exit
3688   17E7             _if50_true:
3689   17E7             ;; putchar('0'); 
3690   17E7 26 30 00      mov b, $30
3691   17EA DD            push bl
3692   17EB 07 94 18      call putchar
3693   17EE 51 01 00      add sp, 1
3694   17F1             ;; return; 
3695   17F1 F9            leave
3696   17F2 09            ret
3697   17F3 0A F6 17      jmp _if50_exit
3698   17F6             _if50_exit:
3699   17F6             ;; while (num > 0) { 
3700   17F6             _while51_cond:
3701   17F6 FA 05 00      lea d, [bp + 5] ; $num
3702   17F9 2A            mov b, [d]
3703   17FA             ; START RELATIONAL
3704   17FA D7            push a
3705   17FB 11            mov a, b
3706   17FC 26 00 00      mov b, $0
3707   17FF B0            cmp a, b
3708   1800 FD 81         sgu ; > (unsigned)
3709   1802 E4            pop a
3710   1803             ; END RELATIONAL
3711   1803 C0 00 00      cmp b, 0
3712   1806 C6 50 18      je _while51_exit
3713   1809             _while51_block:
3714   1809             ;; digits[i] = '0' + (num % 10); 
3715   1809 FA FC FF      lea d, [bp + -4] ; $digits
3716   180C D7            push a
3717   180D DA            push d
3718   180E FA FA FF      lea d, [bp + -6] ; $i
3719   1811 2A            mov b, [d]
3720   1812 E7            pop d
3721   1813 5A            add d, b
3722   1814 E4            pop a
3723   1815 DA            push d
3724   1816 26 30 00      mov b, $30
3725   1819             ; START TERMS
3726   1819 D7            push a
3727   181A 11            mov a, b
3728   181B FA 05 00      lea d, [bp + 5] ; $num
3729   181E 2A            mov b, [d]
3730   181F             ; START FACTORS
3731   181F D7            push a
3732   1820 11            mov a, b
3733   1821 26 0A 00      mov b, $a
3734   1824 AE            div a, b ; 
3735   1825 11            mov a, b
3736   1826 27            mov b, a
3737   1827 E4            pop a
3738   1828             ; END FACTORS
3739   1828 56            add b, a
3740   1829 E4            pop a
3741   182A             ; END TERMS
3742   182A E7            pop d
3743   182B FD 3E         mov [d], bl
3744   182D             ;; num = num / 10; 
3745   182D FA 05 00      lea d, [bp + 5] ; $num
3746   1830 DA            push d
3747   1831 FA 05 00      lea d, [bp + 5] ; $num
3748   1834 2A            mov b, [d]
3749   1835             ; START FACTORS
3750   1835 D7            push a
3751   1836 11            mov a, b
3752   1837 26 0A 00      mov b, $a
3753   183A AE            div a, b
3754   183B 27            mov b, a
3755   183C E4            pop a
3756   183D             ; END FACTORS
3757   183D E7            pop d
3758   183E FD 43         mov [d], b
3759   1840             ;; i++; 
3760   1840 FA FA FF      lea d, [bp + -6] ; $i
3761   1843 2A            mov b, [d]
3762   1844 D8            push b
3763   1845 FD 77         inc b
3764   1847 FA FA FF      lea d, [bp + -6] ; $i
3765   184A FD 43         mov [d], b
3766   184C E5            pop b
3767   184D 0A F6 17      jmp _while51_cond
3768   1850             _while51_exit:
3769   1850             ;; while (i > 0) { 
3770   1850             _while52_cond:
3771   1850 FA FA FF      lea d, [bp + -6] ; $i
3772   1853 2A            mov b, [d]
3773   1854             ; START RELATIONAL
3774   1854 D7            push a
3775   1855 11            mov a, b
3776   1856 26 00 00      mov b, $0
3777   1859 B0            cmp a, b
3778   185A FD 7F         sgt ; >
3779   185C E4            pop a
3780   185D             ; END RELATIONAL
3781   185D C0 00 00      cmp b, 0
3782   1860 C6 89 18      je _while52_exit
3783   1863             _while52_block:
3784   1863             ;; i--; 
3785   1863 FA FA FF      lea d, [bp + -6] ; $i
3786   1866 2A            mov b, [d]
3787   1867 D8            push b
3788   1868 FD 7D         dec b
3789   186A FA FA FF      lea d, [bp + -6] ; $i
3790   186D FD 43         mov [d], b
3791   186F E5            pop b
3792   1870             ;; putchar(digits[i]); 
3793   1870 FA FC FF      lea d, [bp + -4] ; $digits
3794   1873 D7            push a
3795   1874 DA            push d
3796   1875 FA FA FF      lea d, [bp + -6] ; $i
3797   1878 2A            mov b, [d]
3798   1879 E7            pop d
3799   187A 5A            add d, b
3800   187B E4            pop a
3801   187C 32            mov bl, [d]
3802   187D A7 00         mov bh, 0
3803   187F DD            push bl
3804   1880 07 94 18      call putchar
3805   1883 51 01 00      add sp, 1
3806   1886 0A 50 18      jmp _while52_cond
3807   1889             _while52_exit:
3808   1889 F9            leave
3809   188A 09            ret
3810   188B             
3811   188B             date:
3812   188B F8 00 00      enter 0 ; (push bp; mov bp, sp)
3813   188E             
3814   188E             ; --- BEGIN INLINE ASM BLOCK
3815   188E 19 00         mov al, 0 
3816   1890 05 07         syscall sys_datetime
3817   1892             ; --- END INLINE ASM BLOCK
3818   1892             
3819   1892 F9            leave
3820   1893 09            ret
3821   1894             
3822   1894             putchar:
3823   1894 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3824   1897             
3825   1897             ; --- BEGIN INLINE ASM BLOCK
3826   1897 FA 05 00      lea d, [bp + 5] ; $c
3827   189A 1E            mov al, [d]
3828   189B 23            mov ah, al
3829   189C 07 75 1A      call _putchar
3830   189F             ; --- END INLINE ASM BLOCK
3831   189F             
3832   189F F9            leave
3833   18A0 09            ret
3834   18A1             
3835   18A1             getchar:
3836   18A1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3837   18A4             ; $c 
3838   18A4 52 01 00      sub sp, 1
3839   18A7             
3840   18A7             ; --- BEGIN INLINE ASM BLOCK
3841   18A7 07 6E 1A      call getch
3842   18AA 1A            mov al, ah
3843   18AB FA 00 00      lea d, [bp + 0] ; $c
3844   18AE 3E            mov [d], al
3845   18AF             ; --- END INLINE ASM BLOCK
3846   18AF             
3847   18AF             ;; return c; 
3848   18AF FA 00 00      lea d, [bp + 0] ; $c
3849   18B2 32            mov bl, [d]
3850   18B3 A7 00         mov bh, 0
3851   18B5 F9            leave
3852   18B6 09            ret
3853   18B7             
3854   18B7             scann:
3855   18B7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3856   18BA             ; $m 
3857   18BA 52 02 00      sub sp, 2
3858   18BD             
3859   18BD             ; --- BEGIN INLINE ASM BLOCK
3860   18BD 07 B9 1C      call scan_u16d
3861   18C0 FA FF FF      lea d, [bp + -1] ; $m
3862   18C3 43            mov [d], a
3863   18C4             ; --- END INLINE ASM BLOCK
3864   18C4             
3865   18C4             ;; return m; 
3866   18C4 FA FF FF      lea d, [bp + -1] ; $m
3867   18C7 2A            mov b, [d]
3868   18C8 F9            leave
3869   18C9 09            ret
3870   18CA             
3871   18CA             puts:
3872   18CA F8 00 00      enter 0 ; (push bp; mov bp, sp)
3873   18CD             
3874   18CD             ; --- BEGIN INLINE ASM BLOCK
3875   18CD FA 05 00      lea d, [bp + 5] ; $s
3876   18D0 15            mov a, [d]
3877   18D1 3C            mov d, a
3878   18D2 07 BF 1B      call _puts
3879   18D5 10 00 0A      mov a, $0A00
3880   18D8 05 03         syscall sys_io
3881   18DA             ; --- END INLINE ASM BLOCK
3882   18DA             
3883   18DA F9            leave
3884   18DB 09            ret
3885   18DC             
3886   18DC             print:
3887   18DC F8 00 00      enter 0 ; (push bp; mov bp, sp)
3888   18DF             
3889   18DF             ; --- BEGIN INLINE ASM BLOCK
3890   18DF FA 05 00      lea d, [bp + 5] ; $s
3891   18E2 FD 2A         mov d, [d]
3892   18E4 07 BF 1B      call _puts
3893   18E7             ; --- END INLINE ASM BLOCK
3894   18E7             
3895   18E7 F9            leave
3896   18E8 09            ret
3897   18E9             
3898   18E9             loadfile:
3899   18E9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3900   18EC             
3901   18EC             ; --- BEGIN INLINE ASM BLOCK
3902   18EC FA 07 00      lea d, [bp + 7] ; $destination
3903   18EF 15            mov a, [d]
3904   18F0 4F            mov di, a
3905   18F1 FA 05 00      lea d, [bp + 5] ; $filename
3906   18F4 FD 2A         mov d, [d]
3907   18F6 19 14         mov al, 20
3908   18F8 05 04         syscall sys_filesystem
3909   18FA             ; --- END INLINE ASM BLOCK
3910   18FA             
3911   18FA F9            leave
3912   18FB 09            ret
3913   18FC             
3914   18FC             create_file:
3915   18FC F8 00 00      enter 0 ; (push bp; mov bp, sp)
3916   18FF F9            leave
3917   1900 09            ret
3918   1901             
3919   1901             delete_file:
3920   1901 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3921   1904             
3922   1904             ; --- BEGIN INLINE ASM BLOCK
3923   1904 FA 05 00      lea d, [bp + 5] ; $filename
3924   1907 19 0A         mov al, 10
3925   1909 05 04         syscall sys_filesystem
3926   190B             ; --- END INLINE ASM BLOCK
3927   190B             
3928   190B F9            leave
3929   190C 09            ret
3930   190D             
3931   190D             fopen:
3932   190D F8 00 00      enter 0 ; (push bp; mov bp, sp)
3933   1910 F9            leave
3934   1911 09            ret
3935   1912             
3936   1912             fclose:
3937   1912 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3938   1915 F9            leave
3939   1916 09            ret
3940   1917             
3941   1917             load_hex:
3942   1917 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3943   191A             ; $temp 
3944   191A 52 02 00      sub sp, 2
3945   191D             ;; temp = alloc(32768); 
3946   191D FA FF FF      lea d, [bp + -1] ; $temp
3947   1920 DA            push d
3948   1921 26 00 80      mov b, $8000
3949   1924 FD AB         swp b
3950   1926 D8            push b
3951   1927 07 F9 06      call alloc
3952   192A 51 02 00      add sp, 2
3953   192D E7            pop d
3954   192E FD 43         mov [d], b
3955   1930             
3956   1930             ; --- BEGIN INLINE ASM BLOCK
3957   1930               
3958   1930               
3959   1930               
3960   1930               
3961   1930               
3962   1930             _load_hex:
3963   1930 D7            push a
3964   1931 D8            push b
3965   1932 DA            push d
3966   1933 E2            push si
3967   1934 E3            push di
3968   1935 52 00 80      sub sp, $8000      
3969   1938 38 00 00      mov c, 0
3970   193B 48            mov a, sp
3971   193C 77            inc a
3972   193D 3C            mov d, a          
3973   193E 07 7C 1A      call _gets        
3974   1941 4D            mov si, a
3975   1942             __load_hex_loop:
3976   1942 F6            lodsb             
3977   1943 B9 00         cmp al, 0         
3978   1945 C6 53 19      jz __load_hex_ret
3979   1948 36            mov bh, al
3980   1949 F6            lodsb
3981   194A 2F            mov bl, al
3982   194B 07 32 1A      call _atoi        
3983   194E F7            stosb             
3984   194F 78            inc c
3985   1950 0A 42 19      jmp __load_hex_loop
3986   1953             __load_hex_ret:
3987   1953 51 00 80      add sp, $8000
3988   1956 F0            pop di
3989   1957 EF            pop si
3990   1958 E7            pop d
3991   1959 E5            pop b
3992   195A E4            pop a
3993   195B             ; --- END INLINE ASM BLOCK
3994   195B             
3995   195B F9            leave
3996   195C 09            ret
3997   195D             
3998   195D             getparam:
3999   195D F8 00 00      enter 0 ; (push bp; mov bp, sp)
4000   1960             ; $data 
4001   1960 52 01 00      sub sp, 1
4002   1963             
4003   1963             ; --- BEGIN INLINE ASM BLOCK
4004   1963 19 04         mov al, 4
4005   1965 FA 05 00      lea d, [bp + 5] ; $address
4006   1968 FD 2A         mov d, [d]
4007   196A 05 0C         syscall sys_system
4008   196C FA 00 00      lea d, [bp + 0] ; $data
4009   196F FD 3E         mov [d], bl
4010   1971             ; --- END INLINE ASM BLOCK
4011   1971             
4012   1971             ;; return data; 
4013   1971 FA 00 00      lea d, [bp + 0] ; $data
4014   1974 32            mov bl, [d]
4015   1975 A7 00         mov bh, 0
4016   1977 F9            leave
4017   1978 09            ret
4018   1979             
4019   1979             clear:
4020   1979 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4021   197C             ;; print("\033[2J\033[H"); 
4022   197C 26 F5 1E      mov b, __s19 ; "\033[2J\033[H"
4023   197F FD AB         swp b
4024   1981 D8            push b
4025   1982 07 DC 18      call print
4026   1985 51 02 00      add sp, 2
4027   1988 F9            leave
4028   1989 09            ret
4029   198A             
4030   198A             include_stdio_asm:
4031   198A F8 00 00      enter 0 ; (push bp; mov bp, sp)
4032   198D             
4033   198D             ; --- BEGIN INLINE ASM BLOCK
4034   198D             .include "lib/asm/stdio.asm"
0001+  198D             ;-----------------------------------------------------------------------------
0002+  198D             ; stdio.s
0003+  198D             ;-----------------------------------------------------------------------------
0004+  198D             .include "lib/asm/string.asm"
0001++ 198D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 198D             ; string.s
0003++ 198D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 198D             
0005++ 198D             
0006++ 198D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 198D             ; _strrev
0008++ 198D             ; reverse a string
0009++ 198D             ; D = string address
0010++ 198D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 198D             ; 01234
0012++ 198D             _strrev:
0013++ 198D 4B          	pusha
0014++ 198E 07 D4 19    	call _strlen	; length in C
0015++ 1991 12          	mov a, c
0016++ 1992 AF 01 00    	cmp a, 1
0017++ 1995 D0 AF 19    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1998 7D          	dec a
0019++ 1999 FD 4E       	mov si, d	; beginning of string
0020++ 199B FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 199D 59          	add d, a	; end of string
0022++ 199E 12          	mov a, c
0023++ 199F FD 9B       	shr a		; divide by 2
0024++ 19A1 39          	mov c, a	; C now counts the steps
0025++ 19A2             _strrev_L0:
0026++ 19A2 32          	mov bl, [d]	; save load right-side char into BL
0027++ 19A3 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 19A4 3E          	mov [d], al	; store left char into right side
0029++ 19A5 1B          	mov al, bl
0030++ 19A6 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 19A7 7E          	dec c
0032++ 19A8 7F          	dec d
0033++ 19A9 C2 00 00    	cmp c, 0
0034++ 19AC C7 A2 19    	jne _strrev_L0
0035++ 19AF             _strrev_end:
0036++ 19AF 4C          	popa
0037++ 19B0 09          	ret
0038++ 19B1             	
0039++ 19B1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 19B1             ; _strchr
0041++ 19B1             ; search string in D for char in AL
0042++ 19B1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 19B1             _strchr:
0044++ 19B1             _strchr_L0:
0045++ 19B1 32          	mov bl, [d]
0046++ 19B2 C1 00       	cmp bl, 0
0047++ 19B4 C6 BF 19    	je _strchr_end
0048++ 19B7 BA          	cmp al, bl
0049++ 19B8 C6 BF 19    	je _strchr_end
0050++ 19BB 79          	inc d
0051++ 19BC 0A B1 19    	jmp _strchr_L0
0052++ 19BF             _strchr_end:
0053++ 19BF 1B          	mov al, bl
0054++ 19C0 09          	ret
0055++ 19C1             
0056++ 19C1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 19C1             ; _strstr
0058++ 19C1             ; find sub-string
0059++ 19C1             ; str1 in SI
0060++ 19C1             ; str2 in DI
0061++ 19C1             ; SI points to end of source string
0062++ 19C1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 19C1             _strstr:
0064++ 19C1 DB          	push al
0065++ 19C2 DA          	push d
0066++ 19C3 E3          	push di
0067++ 19C4             _strstr_loop:
0068++ 19C4 F3          	cmpsb					; compare a byte of the strings
0069++ 19C5 C7 D0 19    	jne _strstr_ret
0070++ 19C8 FC 00 00    	lea d, [di + 0]
0071++ 19CB BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 19CD C7 C4 19    	jne _strstr_loop				; equal chars but not at end
0073++ 19D0             _strstr_ret:
0074++ 19D0 F0          	pop di
0075++ 19D1 E7          	pop d
0076++ 19D2 E8          	pop al
0077++ 19D3 09          	ret
0078++ 19D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 19D4             ; length of null terminated string
0080++ 19D4             ; result in C
0081++ 19D4             ; pointer in D
0082++ 19D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 19D4             _strlen:
0084++ 19D4 DA          	push d
0085++ 19D5 38 00 00    	mov c, 0
0086++ 19D8             _strlen_L1:
0087++ 19D8 BD 00       	cmp byte [d], 0
0088++ 19DA C6 E2 19    	je _strlen_ret
0089++ 19DD 79          	inc d
0090++ 19DE 78          	inc c
0091++ 19DF 0A D8 19    	jmp _strlen_L1
0092++ 19E2             _strlen_ret:
0093++ 19E2 E7          	pop d
0094++ 19E3 09          	ret
0095++ 19E4             
0096++ 19E4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 19E4             ; STRCMP
0098++ 19E4             ; compare two strings
0099++ 19E4             ; str1 in SI
0100++ 19E4             ; str2 in DI
0101++ 19E4             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 19E4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 19E4             _strcmp:
0104++ 19E4 DB          	push al
0105++ 19E5 DA          	push d
0106++ 19E6 E3          	push di
0107++ 19E7 E2          	push si
0108++ 19E8             _strcmp_loop:
0109++ 19E8 F3          	cmpsb					; compare a byte of the strings
0110++ 19E9 C7 F4 19    	jne _strcmp_ret
0111++ 19EC FB FF FF    	lea d, [si +- 1]
0112++ 19EF BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 19F1 C7 E8 19    	jne _strcmp_loop				; equal chars but not at end
0114++ 19F4             _strcmp_ret:
0115++ 19F4 EF          	pop si
0116++ 19F5 F0          	pop di
0117++ 19F6 E7          	pop d
0118++ 19F7 E8          	pop al
0119++ 19F8 09          	ret
0120++ 19F9             
0121++ 19F9             
0122++ 19F9             ; STRCPY
0123++ 19F9             ; copy null terminated string from SI to DI
0124++ 19F9             ; source in SI
0125++ 19F9             ; destination in DI
0126++ 19F9             _strcpy:
0127++ 19F9 E2          	push si
0128++ 19FA E3          	push di
0129++ 19FB DB          	push al
0130++ 19FC             _strcpy_L1:
0131++ 19FC F6          	lodsb
0132++ 19FD F7          	stosb
0133++ 19FE B9 00       	cmp al, 0
0134++ 1A00 C7 FC 19    	jne _strcpy_L1
0135++ 1A03             _strcpy_end:
0136++ 1A03 E8          	pop al
0137++ 1A04 F0          	pop di
0138++ 1A05 EF          	pop si
0139++ 1A06 09          	ret
0140++ 1A07             
0141++ 1A07             ; STRCAT
0142++ 1A07             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1A07             ; source in SI
0144++ 1A07             ; destination in DI
0145++ 1A07             _strcat:
0146++ 1A07 E2          	push si
0147++ 1A08 E3          	push di
0148++ 1A09 D7          	push a
0149++ 1A0A DA          	push d
0150++ 1A0B 50          	mov a, di
0151++ 1A0C 3C          	mov d, a
0152++ 1A0D             _strcat_goto_end_L1:
0153++ 1A0D BD 00       	cmp byte[d], 0
0154++ 1A0F C6 16 1A    	je _strcat_start
0155++ 1A12 79          	inc d
0156++ 1A13 0A 0D 1A    	jmp _strcat_goto_end_L1
0157++ 1A16             _strcat_start:
0158++ 1A16 FD 50       	mov di, d
0159++ 1A18             _strcat_L1:
0160++ 1A18 F6          	lodsb
0161++ 1A19 F7          	stosb
0162++ 1A1A B9 00       	cmp al, 0
0163++ 1A1C C7 18 1A    	jne _strcat_L1
0164++ 1A1F             _strcat_end:
0165++ 1A1F E7          	pop d
0166++ 1A20 E4          	pop a
0167++ 1A21 F0          	pop di
0168++ 1A22 EF          	pop si
0169++ 1A23 09          	ret
0170++ 1A24             
0171++ 1A24             
0005+  1A24             
0006+  1A24             ;-----------------------------------------------------------------------------
0007+  1A24             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  1A24             ; ASCII in BL
0009+  1A24             ; result in AL
0010+  1A24             ; ascii for F = 0100 0110
0011+  1A24             ; ascii for 9 = 0011 1001
0012+  1A24             ;-----------------------------------------------------------------------------
0013+  1A24             hex_ascii_encode:
0014+  1A24 1B            mov al, bl
0015+  1A25 93 40         test al, $40        ; test if letter or number
0016+  1A27 C7 2D 1A      jnz hex_letter
0017+  1A2A 87 0F         and al, $0F        ; get number
0018+  1A2C 09            ret
0019+  1A2D             hex_letter:
0020+  1A2D 87 0F         and al, $0F        ; get letter
0021+  1A2F 6A 09         add al, 9
0022+  1A31 09            ret
0023+  1A32             
0024+  1A32             ;-----------------------------------------------------------------------------
0025+  1A32             ; ATOI
0026+  1A32             ; 2 letter hex string in B
0027+  1A32             ; 8bit integer returned in AL
0028+  1A32             ;-----------------------------------------------------------------------------
0029+  1A32             _atoi:
0030+  1A32 D8            push b
0031+  1A33 07 24 1A      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  1A36 30            mov bl, bh
0033+  1A37 DB            push al          ; save a
0034+  1A38 07 24 1A      call hex_ascii_encode
0035+  1A3B EA            pop bl  
0036+  1A3C FD 9E 04      shl al, 4
0037+  1A3F 8C            or al, bl
0038+  1A40 E5            pop b
0039+  1A41 09            ret  
0040+  1A42             
0041+  1A42             ;-----------------------------------------------------------------------------
0042+  1A42             ; scanf
0043+  1A42             ; no need for explanations!
0044+  1A42             ;-----------------------------------------------------------------------------
0045+  1A42             scanf:
0046+  1A42 09            ret
0047+  1A43             
0048+  1A43             ;-----------------------------------------------------------------------------
0049+  1A43             ; ITOA
0050+  1A43             ; 8bit value in BL
0051+  1A43             ; 2 byte ASCII result in A
0052+  1A43             ;-----------------------------------------------------------------------------
0053+  1A43             _itoa:
0054+  1A43 DA            push d
0055+  1A44 D8            push b
0056+  1A45 A7 00         mov bh, 0
0057+  1A47 FD A4 04      shr bl, 4  
0058+  1A4A 74            mov d, b
0059+  1A4B 1F F3 1C      mov al, [d + s_hex_digits]
0060+  1A4E 23            mov ah, al
0061+  1A4F               
0062+  1A4F E5            pop b
0063+  1A50 D8            push b
0064+  1A51 A7 00         mov bh, 0
0065+  1A53 FD 87 0F      and bl, $0F
0066+  1A56 74            mov d, b
0067+  1A57 1F F3 1C      mov al, [d + s_hex_digits]
0068+  1A5A E5            pop b
0069+  1A5B E7            pop d
0070+  1A5C 09            ret
0071+  1A5D             
0072+  1A5D             ;-----------------------------------------------------------------------------
0073+  1A5D             ; HEX STRING TO BINARY
0074+  1A5D             ; di = destination address
0075+  1A5D             ; si = source
0076+  1A5D             ;-----------------------------------------------------------------------------
0077+  1A5D             _hex_to_int:
0078+  1A5D             _hex_to_int_L1:
0079+  1A5D F6            lodsb          ; load from [SI] to AL
0080+  1A5E B9 00         cmp al, 0        ; check if ASCII 0
0081+  1A60 C6 6D 1A      jz _hex_to_int_ret
0082+  1A63 36            mov bh, al
0083+  1A64 F6            lodsb
0084+  1A65 2F            mov bl, al
0085+  1A66 07 32 1A      call _atoi        ; convert ASCII byte in B to int (to AL)
0086+  1A69 F7            stosb          ; store AL to [DI]
0087+  1A6A 0A 5D 1A      jmp _hex_to_int_L1
0088+  1A6D             _hex_to_int_ret:
0089+  1A6D 09            ret    
0090+  1A6E             
0091+  1A6E             ;-----------------------------------------------------------------------------
0092+  1A6E             ; GETCHAR
0093+  1A6E             ; char in ah
0094+  1A6E             ;-----------------------------------------------------------------------------
0095+  1A6E             getch:
0096+  1A6E DB            push al
0097+  1A6F             getch_retry:
0098+  1A6F 19 01         mov al, 1
0099+  1A71 05 03         syscall sys_io      ; receive in AH
0100+  1A73 E8            pop al
0101+  1A74 09            ret
0102+  1A75             
0103+  1A75             ;-----------------------------------------------------------------------------
0104+  1A75             ; PUTCHAR
0105+  1A75             ; char in ah
0106+  1A75             ;-----------------------------------------------------------------------------
0107+  1A75             _putchar:
0108+  1A75 D7            push a
0109+  1A76 19 00         mov al, 0
0110+  1A78 05 03         syscall sys_io      ; char in AH
0111+  1A7A E4            pop a
0112+  1A7B 09            ret
0113+  1A7C             
0114+  1A7C             ;-----------------------------------------------------------------------------
0115+  1A7C             ;; INPUT A STRING
0116+  1A7C             ;; terminates with null
0117+  1A7C             ;; pointer in D
0118+  1A7C             ;-----------------------------------------------------------------------------
0119+  1A7C             _gets:
0120+  1A7C D7            push a
0121+  1A7D DA            push d
0122+  1A7E             _gets_loop:
0123+  1A7E 19 01         mov al, 1
0124+  1A80 05 03         syscall sys_io      ; receive in AH
0125+  1A82 B9 00         cmp al, 0        ; check error code (AL)
0126+  1A84 C6 7E 1A      je _gets_loop      ; if no char received, retry
0127+  1A87             
0128+  1A87 76 1B         cmp ah, 27
0129+  1A89 C6 AA 1A      je _gets_ansi_esc
0130+  1A8C 76 0A         cmp ah, $0A        ; LF
0131+  1A8E C6 15 1B      je _gets_end
0132+  1A91 76 0D         cmp ah, $0D        ; CR
0133+  1A93 C6 15 1B      je _gets_end
0134+  1A96 76 5C         cmp ah, $5C        ; '\\'
0135+  1A98 C6 D6 1A      je _gets_escape
0136+  1A9B               
0137+  1A9B 76 08         cmp ah, $08      ; check for backspace
0138+  1A9D C6 A6 1A      je _gets_backspace
0139+  1AA0             
0140+  1AA0 1A            mov al, ah
0141+  1AA1 3E            mov [d], al
0142+  1AA2 79            inc d
0143+  1AA3 0A 7E 1A      jmp _gets_loop
0144+  1AA6             _gets_backspace:
0145+  1AA6 7F            dec d
0146+  1AA7 0A 7E 1A      jmp _gets_loop
0147+  1AAA             _gets_ansi_esc:
0148+  1AAA 19 01         mov al, 1
0149+  1AAC 05 03         syscall sys_io        ; receive in AH without echo
0150+  1AAE B9 00         cmp al, 0          ; check error code (AL)
0151+  1AB0 C6 AA 1A      je _gets_ansi_esc    ; if no char received, retry
0152+  1AB3 76 5B         cmp ah, '['
0153+  1AB5 C7 7E 1A      jne _gets_loop
0154+  1AB8             _gets_ansi_esc_2:
0155+  1AB8 19 01         mov al, 1
0156+  1ABA 05 03         syscall sys_io          ; receive in AH without echo
0157+  1ABC B9 00         cmp al, 0            ; check error code (AL)
0158+  1ABE C6 B8 1A      je _gets_ansi_esc_2  ; if no char received, retry
0159+  1AC1 76 44         cmp ah, 'D'
0160+  1AC3 C6 CE 1A      je _gets_left_arrow
0161+  1AC6 76 43         cmp ah, 'C'
0162+  1AC8 C6 D2 1A      je _gets_right_arrow
0163+  1ACB 0A 7E 1A      jmp _gets_loop
0164+  1ACE             _gets_left_arrow:
0165+  1ACE 7F            dec d
0166+  1ACF 0A 7E 1A      jmp _gets_loop
0167+  1AD2             _gets_right_arrow:
0168+  1AD2 79            inc d
0169+  1AD3 0A 7E 1A      jmp _gets_loop
0170+  1AD6             _gets_escape:
0171+  1AD6 19 01         mov al, 1
0172+  1AD8 05 03         syscall sys_io      ; receive in AH
0173+  1ADA B9 00         cmp al, 0        ; check error code (AL)
0174+  1ADC C6 D6 1A      je _gets_escape      ; if no char received, retry
0175+  1ADF 76 6E         cmp ah, 'n'
0176+  1AE1 C6 00 1B      je _gets_LF
0177+  1AE4 76 72         cmp ah, 'r'
0178+  1AE6 C6 07 1B      je _gets_CR
0179+  1AE9 76 30         cmp ah, '0'
0180+  1AEB C6 0E 1B      je _gets_NULL
0181+  1AEE 76 5C         cmp ah, $5C  ; '\'
0182+  1AF0 C6 F9 1A      je _gets_slash
0183+  1AF3 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0184+  1AF4 3E            mov [d], al
0185+  1AF5 79            inc d
0186+  1AF6 0A 7E 1A      jmp _gets_loop
0187+  1AF9             _gets_slash:
0188+  1AF9 19 5C         mov al, $5C
0189+  1AFB 3E            mov [d], al
0190+  1AFC 79            inc d
0191+  1AFD 0A 7E 1A      jmp _gets_loop
0192+  1B00             _gets_LF:
0193+  1B00 19 0A         mov al, $0A
0194+  1B02 3E            mov [d], al
0195+  1B03 79            inc d
0196+  1B04 0A 7E 1A      jmp _gets_loop
0197+  1B07             _gets_CR:
0198+  1B07 19 0D         mov al, $0D
0199+  1B09 3E            mov [d], al
0200+  1B0A 79            inc d
0201+  1B0B 0A 7E 1A      jmp _gets_loop
0202+  1B0E             _gets_NULL:
0203+  1B0E 19 00         mov al, $00
0204+  1B10 3E            mov [d], al
0205+  1B11 79            inc d
0206+  1B12 0A 7E 1A      jmp _gets_loop
0207+  1B15             _gets_end:
0208+  1B15 19 00         mov al, 0
0209+  1B17 3E            mov [d], al        ; terminate string
0210+  1B18 E7            pop d
0211+  1B19 E4            pop a
0212+  1B1A 09            ret
0213+  1B1B             
0214+  1B1B             ;-----------------------------------------------------------------------------
0215+  1B1B             ;; INPUT TEXT
0216+  1B1B             ;; terminated with CTRL+D
0217+  1B1B             ;; pointer in D
0218+  1B1B             ;-----------------------------------------------------------------------------
0219+  1B1B             _gettxt:
0220+  1B1B D7            push a
0221+  1B1C DA            push d
0222+  1B1D             _gettxt_loop:
0223+  1B1D 19 01         mov al, 1
0224+  1B1F 05 03         syscall sys_io      ; receive in AH
0225+  1B21 B9 00         cmp al, 0        ; check error code (AL)
0226+  1B23 C6 1D 1B      je _gettxt_loop    ; if no char received, retry
0227+  1B26 76 04         cmp ah, 4      ; EOT
0228+  1B28 C6 66 1B      je _gettxt_end
0229+  1B2B 76 08         cmp ah, $08      ; check for backspace
0230+  1B2D C6 62 1B      je _gettxt_backspace
0231+  1B30 76 5C         cmp ah, $5C        ; '\'
0232+  1B32 C6 3B 1B      je _gettxt_escape
0233+  1B35 1A            mov al, ah
0234+  1B36 3E            mov [d], al
0235+  1B37 79            inc d
0236+  1B38 0A 1D 1B      jmp _gettxt_loop
0237+  1B3B             _gettxt_escape:
0238+  1B3B 19 01         mov al, 1
0239+  1B3D 05 03         syscall sys_io      ; receive in AH
0240+  1B3F B9 00         cmp al, 0        ; check error code (AL)
0241+  1B41 C6 3B 1B      je _gettxt_escape    ; if no char received, retry
0242+  1B44 76 6E         cmp ah, 'n'
0243+  1B46 C6 54 1B      je _gettxt_LF
0244+  1B49 76 72         cmp ah, 'r'
0245+  1B4B C6 5B 1B      je _gettxt_CR
0246+  1B4E 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0247+  1B4F 3E            mov [d], al
0248+  1B50 79            inc d
0249+  1B51 0A 1D 1B      jmp _gettxt_loop
0250+  1B54             _gettxt_LF:
0251+  1B54 19 0A         mov al, $0A
0252+  1B56 3E            mov [d], al
0253+  1B57 79            inc d
0254+  1B58 0A 1D 1B      jmp _gettxt_loop
0255+  1B5B             _gettxt_CR:
0256+  1B5B 19 0D         mov al, $0D
0257+  1B5D 3E            mov [d], al
0258+  1B5E 79            inc d
0259+  1B5F 0A 1D 1B      jmp _gettxt_loop
0260+  1B62             _gettxt_backspace:
0261+  1B62 7F            dec d
0262+  1B63 0A 1D 1B      jmp _gettxt_loop
0263+  1B66             _gettxt_end:
0264+  1B66 19 00         mov al, 0
0265+  1B68 3E            mov [d], al        ; terminate string
0266+  1B69 E7            pop d
0267+  1B6A E4            pop a
0268+  1B6B 09            ret
0269+  1B6C             
0270+  1B6C             ;-----------------------------------------------------------------------------
0271+  1B6C             ; PRINT NEW LINE
0272+  1B6C             ;-----------------------------------------------------------------------------
0273+  1B6C             printnl:
0274+  1B6C D7            push a
0275+  1B6D 10 00 0A      mov a, $0A00
0276+  1B70 05 03         syscall sys_io
0277+  1B72 10 00 0D      mov a, $0D00
0278+  1B75 05 03         syscall sys_io
0279+  1B77 E4            pop a
0280+  1B78 09            ret
0281+  1B79             
0282+  1B79             ;-----------------------------------------------------------------------------
0283+  1B79             ; _strtoint
0284+  1B79             ; 4 digit hex string number in d
0285+  1B79             ; integer returned in A
0286+  1B79             ;-----------------------------------------------------------------------------
0287+  1B79             _strtointx:
0288+  1B79 D8            push b
0289+  1B7A 32            mov bl, [d]
0290+  1B7B 37            mov bh, bl
0291+  1B7C 33 01 00      mov bl, [d + 1]
0292+  1B7F 07 32 1A      call _atoi        ; convert to int in AL
0293+  1B82 23            mov ah, al        ; move to AH
0294+  1B83 33 02 00      mov bl, [d + 2]
0295+  1B86 37            mov bh, bl
0296+  1B87 33 03 00      mov bl, [d + 3]
0297+  1B8A 07 32 1A      call _atoi        ; convert to int in AL
0298+  1B8D E5            pop b
0299+  1B8E 09            ret
0300+  1B8F             
0301+  1B8F             ;-----------------------------------------------------------------------------
0302+  1B8F             ; _strtoint
0303+  1B8F             ; 5 digit base10 string number in d
0304+  1B8F             ; integer returned in A
0305+  1B8F             ;-----------------------------------------------------------------------------
0306+  1B8F             _strtoint:
0307+  1B8F E2            push si
0308+  1B90 D8            push b
0309+  1B91 D9            push c
0310+  1B92 DA            push d
0311+  1B93 07 D4 19      call _strlen      ; get string length in C
0312+  1B96 7E            dec c
0313+  1B97 FD 4E         mov si, d
0314+  1B99 12            mov a, c
0315+  1B9A FD 99         shl a
0316+  1B9C 3B 0B 1D      mov d, table_power
0317+  1B9F 59            add d, a
0318+  1BA0 38 00 00      mov c, 0
0319+  1BA3             _strtoint_L0:
0320+  1BA3 F6            lodsb      ; load ASCII to al
0321+  1BA4 B9 00         cmp al, 0
0322+  1BA6 C6 B9 1B      je _strtoint_end
0323+  1BA9 6F 30         sub al, $30    ; make into integer
0324+  1BAB 22 00         mov ah, 0
0325+  1BAD 2A            mov b, [d]
0326+  1BAE AC            mul a, b      ; result in B since it fits in 16bits
0327+  1BAF 11            mov a, b
0328+  1BB0 28            mov b, c
0329+  1BB1 54            add a, b
0330+  1BB2 39            mov c, a
0331+  1BB3 63 02 00      sub d, 2
0332+  1BB6 0A A3 1B      jmp _strtoint_L0
0333+  1BB9             _strtoint_end:
0334+  1BB9 12            mov a, c
0335+  1BBA E7            pop d
0336+  1BBB E6            pop c
0337+  1BBC E5            pop b
0338+  1BBD EF            pop si
0339+  1BBE 09            ret
0340+  1BBF             
0341+  1BBF             ;-----------------------------------------------------------------------------
0342+  1BBF             ; PRINT NULL TERMINATED STRING
0343+  1BBF             ; pointer in D
0344+  1BBF             ;-----------------------------------------------------------------------------
0345+  1BBF             _puts:
0346+  1BBF D7            push a
0347+  1BC0 DA            push d
0348+  1BC1             _puts_L1:
0349+  1BC1 1E            mov al, [d]
0350+  1BC2 B9 00         cmp al, 0
0351+  1BC4 C6 D0 1B      jz _puts_END
0352+  1BC7 23            mov ah, al
0353+  1BC8 19 00         mov al, 0
0354+  1BCA 05 03         syscall sys_io
0355+  1BCC 79            inc d
0356+  1BCD 0A C1 1B      jmp _puts_L1
0357+  1BD0             _puts_END:
0358+  1BD0 E7            pop d
0359+  1BD1 E4            pop a
0360+  1BD2 09            ret
0361+  1BD3             
0362+  1BD3             ;-----------------------------------------------------------------------------
0363+  1BD3             ; PRINT N SIZE STRING
0364+  1BD3             ; pointer in D
0365+  1BD3             ; size in C
0366+  1BD3             ;-----------------------------------------------------------------------------
0367+  1BD3             _putsn:
0368+  1BD3 DB            push al
0369+  1BD4 DA            push d
0370+  1BD5 D9            push c
0371+  1BD6             _putsn_L0:
0372+  1BD6 1E            mov al, [d]
0373+  1BD7 23            mov ah, al
0374+  1BD8 19 00         mov al, 0
0375+  1BDA 05 03         syscall sys_io
0376+  1BDC 79            inc d
0377+  1BDD 7E            dec c  
0378+  1BDE C2 00 00      cmp c, 0
0379+  1BE1 C7 D6 1B      jne _putsn_L0
0380+  1BE4             _putsn_end:
0381+  1BE4 E6            pop c
0382+  1BE5 E7            pop d
0383+  1BE6 E8            pop al
0384+  1BE7 09            ret
0385+  1BE8             
0386+  1BE8             ;-----------------------------------------------------------------------------
0387+  1BE8             ; print 16bit decimal number
0388+  1BE8             ; input number in A
0389+  1BE8             ;-----------------------------------------------------------------------------
0390+  1BE8             print_u16d:
0391+  1BE8 D7            push a
0392+  1BE9 D8            push b
0393+  1BEA 26 10 27      mov b, 10000
0394+  1BED AE            div a, b      ; get 10000's coeff.
0395+  1BEE 07 10 1C      call print_number
0396+  1BF1 11            mov a, b
0397+  1BF2 26 E8 03      mov b, 1000
0398+  1BF5 AE            div a, b      ; get 1000's coeff.
0399+  1BF6 07 10 1C      call print_number
0400+  1BF9 11            mov a, b
0401+  1BFA 26 64 00      mov b, 100
0402+  1BFD AE            div a, b
0403+  1BFE 07 10 1C      call print_number
0404+  1C01 11            mov a, b
0405+  1C02 26 0A 00      mov b, 10
0406+  1C05 AE            div a, b
0407+  1C06 07 10 1C      call print_number
0408+  1C09 1B            mov al, bl      ; 1's coeff in bl
0409+  1C0A 07 10 1C      call print_number
0410+  1C0D E5            pop b
0411+  1C0E E4            pop a
0412+  1C0F 09            ret
0413+  1C10             
0414+  1C10             ;-----------------------------------------------------------------------------
0415+  1C10             ; print AL
0416+  1C10             ;-----------------------------------------------------------------------------
0417+  1C10             print_number:
0418+  1C10 6A 30         add al, $30
0419+  1C12 23            mov ah, al
0420+  1C13 07 75 1A      call _putchar
0421+  1C16 09            ret
0422+  1C17             
0423+  1C17             ;-----------------------------------------------------------------------------
0424+  1C17             ; PRINT 16BIT HEX INTEGER
0425+  1C17             ; integer value in reg B
0426+  1C17             ;-----------------------------------------------------------------------------
0427+  1C17             print_u16x:
0428+  1C17 D7            push a
0429+  1C18 D8            push b
0430+  1C19 DD            push bl
0431+  1C1A 30            mov bl, bh
0432+  1C1B 07 43 1A      call _itoa        ; convert bh to char in A
0433+  1C1E 2F            mov bl, al        ; save al
0434+  1C1F 19 00         mov al, 0
0435+  1C21 05 03         syscall sys_io        ; display AH
0436+  1C23 24            mov ah, bl        ; retrieve al
0437+  1C24 19 00         mov al, 0
0438+  1C26 05 03         syscall sys_io        ; display AL
0439+  1C28             
0440+  1C28 EA            pop bl
0441+  1C29 07 43 1A      call _itoa        ; convert bh to char in A
0442+  1C2C 2F            mov bl, al        ; save al
0443+  1C2D 19 00         mov al, 0
0444+  1C2F 05 03         syscall sys_io        ; display AH
0445+  1C31 24            mov ah, bl        ; retrieve al
0446+  1C32 19 00         mov al, 0
0447+  1C34 05 03         syscall sys_io        ; display AL
0448+  1C36             
0449+  1C36 E5            pop b
0450+  1C37 E4            pop a
0451+  1C38 09            ret
0452+  1C39             
0453+  1C39             ;-----------------------------------------------------------------------------
0454+  1C39             ; INPUT 16BIT HEX INTEGER
0455+  1C39             ; read 16bit integer into A
0456+  1C39             ;-----------------------------------------------------------------------------
0457+  1C39             scan_u16x:
0458+  1C39 F8 10 00      enter 16
0459+  1C3C D8            push b
0460+  1C3D DA            push d
0461+  1C3E             
0462+  1C3E FA F1 FF      lea d, [bp + -15]
0463+  1C41 07 7C 1A      call _gets        ; get number
0464+  1C44             
0465+  1C44 32            mov bl, [d]
0466+  1C45 37            mov bh, bl
0467+  1C46 33 01 00      mov bl, [d + 1]
0468+  1C49 07 32 1A      call _atoi        ; convert to int in AL
0469+  1C4C 23            mov ah, al        ; move to AH
0470+  1C4D             
0471+  1C4D 33 02 00      mov bl, [d + 2]
0472+  1C50 37            mov bh, bl
0473+  1C51 33 03 00      mov bl, [d + 3]
0474+  1C54 07 32 1A      call _atoi        ; convert to int in AL
0475+  1C57             
0476+  1C57 E7            pop d
0477+  1C58 E5            pop b
0478+  1C59 F9            leave
0479+  1C5A 09            ret
0480+  1C5B             
0481+  1C5B             ;-----------------------------------------------------------------------------
0482+  1C5B             ; PRINT 8bit HEX INTEGER
0483+  1C5B             ; integer value in reg bl
0484+  1C5B             ;-----------------------------------------------------------------------------
0485+  1C5B             print_u8x:
0486+  1C5B D7            push a
0487+  1C5C DD            push bl
0488+  1C5D             
0489+  1C5D 07 43 1A      call _itoa        ; convert bl to char in A
0490+  1C60 2F            mov bl, al        ; save al
0491+  1C61 19 00         mov al, 0
0492+  1C63 05 03         syscall sys_io        ; display AH
0493+  1C65 24            mov ah, bl        ; retrieve al
0494+  1C66 19 00         mov al, 0
0495+  1C68 05 03         syscall sys_io        ; display AL
0496+  1C6A             
0497+  1C6A EA            pop bl
0498+  1C6B E4            pop a
0499+  1C6C 09            ret
0500+  1C6D             
0501+  1C6D             ;-----------------------------------------------------------------------------
0502+  1C6D             ; print 8bit decimal unsigned number
0503+  1C6D             ; input number in AL
0504+  1C6D             ;-----------------------------------------------------------------------------
0505+  1C6D             print_u8d:
0506+  1C6D D7            push a
0507+  1C6E D8            push b
0508+  1C6F             
0509+  1C6F 22 00         mov ah, 0
0510+  1C71 26 64 00      mov b, 100
0511+  1C74 AE            div a, b
0512+  1C75 D8            push b      ; save remainder
0513+  1C76 B9 00         cmp al, 0
0514+  1C78 C6 82 1C      je skip100
0515+  1C7B 6A 30         add al, $30
0516+  1C7D 23            mov ah, al
0517+  1C7E 19 00         mov al, 0
0518+  1C80 05 03         syscall sys_io  ; print coeff
0519+  1C82             skip100:
0520+  1C82 E4            pop a
0521+  1C83 22 00         mov ah, 0
0522+  1C85 26 0A 00      mov b, 10
0523+  1C88 AE            div a, b
0524+  1C89 D8            push b      ; save remainder
0525+  1C8A B9 00         cmp al, 0
0526+  1C8C C6 96 1C      je skip10
0527+  1C8F 6A 30         add al, $30
0528+  1C91 23            mov ah, al
0529+  1C92 19 00         mov al, 0
0530+  1C94 05 03         syscall sys_io  ; print coeff
0531+  1C96             skip10:
0532+  1C96 E4            pop a
0533+  1C97 1B            mov al, bl
0534+  1C98 6A 30         add al, $30
0535+  1C9A 23            mov ah, al
0536+  1C9B 19 00         mov al, 0
0537+  1C9D 05 03         syscall sys_io  ; print coeff
0538+  1C9F E5            pop b
0539+  1CA0 E4            pop a
0540+  1CA1 09            ret
0541+  1CA2             
0542+  1CA2             ;-----------------------------------------------------------------------------
0543+  1CA2             ; INPUT 8BIT HEX INTEGER
0544+  1CA2             ; read 8bit integer into AL
0545+  1CA2             ;-----------------------------------------------------------------------------
0546+  1CA2             scan_u8x:
0547+  1CA2 F8 04 00      enter 4
0548+  1CA5 D8            push b
0549+  1CA6 DA            push d
0550+  1CA7             
0551+  1CA7 FA FD FF      lea d, [bp + -3]
0552+  1CAA 07 7C 1A      call _gets        ; get number
0553+  1CAD             
0554+  1CAD 32            mov bl, [d]
0555+  1CAE 37            mov bh, bl
0556+  1CAF 33 01 00      mov bl, [d + 1]
0557+  1CB2 07 32 1A      call _atoi        ; convert to int in AL
0558+  1CB5             
0559+  1CB5 E7            pop d
0560+  1CB6 E5            pop b
0561+  1CB7 F9            leave
0562+  1CB8 09            ret
0563+  1CB9             
0564+  1CB9             ;-----------------------------------------------------------------------------
0565+  1CB9             ; input decimal number
0566+  1CB9             ; result in A
0567+  1CB9             ; 655'\0'
0568+  1CB9             ; low--------high
0569+  1CB9             ;-----------------------------------------------------------------------------
0570+  1CB9             scan_u16d:
0571+  1CB9 F8 08 00      enter 8
0572+  1CBC E2            push si
0573+  1CBD D8            push b
0574+  1CBE D9            push c
0575+  1CBF DA            push d
0576+  1CC0 FA F9 FF      lea d, [bp +- 7]
0577+  1CC3 07 7C 1A      call _gets
0578+  1CC6 07 D4 19      call _strlen      ; get string length in C
0579+  1CC9 7E            dec c
0580+  1CCA FD 4E         mov si, d
0581+  1CCC 12            mov a, c
0582+  1CCD FD 99         shl a
0583+  1CCF 3B 0B 1D      mov d, table_power
0584+  1CD2 59            add d, a
0585+  1CD3 38 00 00      mov c, 0
0586+  1CD6             mul_loop:
0587+  1CD6 F6            lodsb      ; load ASCII to al
0588+  1CD7 B9 00         cmp al, 0
0589+  1CD9 C6 EC 1C      je mul_exit
0590+  1CDC 6F 30         sub al, $30    ; make into integer
0591+  1CDE 22 00         mov ah, 0
0592+  1CE0 2A            mov b, [d]
0593+  1CE1 AC            mul a, b      ; result in B since it fits in 16bits
0594+  1CE2 11            mov a, b
0595+  1CE3 28            mov b, c
0596+  1CE4 54            add a, b
0597+  1CE5 39            mov c, a
0598+  1CE6 63 02 00      sub d, 2
0599+  1CE9 0A D6 1C      jmp mul_loop
0600+  1CEC             mul_exit:
0601+  1CEC 12            mov a, c
0602+  1CED E7            pop d
0603+  1CEE E6            pop c
0604+  1CEF E5            pop b
0605+  1CF0 EF            pop si
0606+  1CF1 F9            leave
0607+  1CF2 09            ret
0608+  1CF3             
0609+  1CF3 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0609+  1CF7 34 35 36 37 
0609+  1CFB 38 39 41 42 
0609+  1CFF 43 44 45 46 
0610+  1D03 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0610+  1D07 1B 5B 48 00 
0611+  1D0B             
0612+  1D0B             table_power:
0613+  1D0B 01 00         .dw 1
0614+  1D0D 0A 00         .dw 10
0615+  1D0F 64 00         .dw 100
0616+  1D11 E8 03         .dw 1000
0617+  1D13 10 27         .dw 100004035   1D15             ; --- END INLINE ASM BLOCK
4036   1D15             
4037   1D15 F9            leave
4038   1D16 09            ret
4039   1D17             
4040   1D17             args_shift:
4041   1D17 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4042   1D1A F9            leave
4043   1D1B 09            ret
4044   1D1C             ; --- END TEXT BLOCK
4045   1D1C             
4046   1D1C             ; --- BEGIN DATA BLOCK
4047   1D1C 41 42 43 44 _base64_table_data: .db "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 0
4047   1D20 45 46 47 48 
4047   1D24 49 4A 4B 4C 
4047   1D28 4D 4E 4F 50 
4047   1D2C 51 52 53 54 
4047   1D30 55 56 57 58 
4047   1D34 59 5A 61 62 
4047   1D38 63 64 65 66 
4047   1D3C 67 68 69 6A 
4047   1D40 6B 6C 6D 6E 
4047   1D44 6F 70 71 72 
4047   1D48 73 74 75 76 
4047   1D4C 77 78 79 7A 
4047   1D50 30 31 32 33 
4047   1D54 34 35 36 37 
4047   1D58 38 39 2B 2F 
4047   1D5C 00 
4048   1D5D 1C 1D       _base64_table: .dw _base64_table_data
4049   1D5F             _designs_data: 
4050   1D5F 00 00       .dw 
4051   1D61 87 1E 8A 1E .dw __s0, __s1, $20,__s2, __s3, $20,__s4, __s5, $20,__s6, __s7, $20,__s8, __s9, $55,__s10, __s11, $20,__s12, __s13, $20,__s14, __s15, $20,0,__s16, 0,
4051   1D65 20 00 8D 1E 
4051   1D69 90 1E 20 00 
4051   1D6D 93 1E 96 1E 
4051   1D71 20 00 99 1E 
4051   1D75 9C 1E 20 00 
4051   1D79 9F 1E A2 1E 
4051   1D7D 55 00 A5 1E 
4051   1D81 A8 1E 20 00 
4051   1D85 AB 1E AE 1E 
4051   1D89 20 00 B1 1E 
4051   1D8D B4 1E 20 00 
4051   1D91 00 00 B7 1E 
4051   1D95 00 00 
4052   1D97 00 00 00 00 .fill 228, 0
4052   1D9B 00 00 00 00 
4052   1D9F 00 00 00 00 
4052   1DA3 00 00 00 00 
4052   1DA7 00 00 00 00 
4052   1DAB 00 00 00 00 
4052   1DAF 00 00 00 00 
4052   1DB3 00 00 00 00 
4052   1DB7 00 00 00 00 
4052   1DBB 00 00 00 00 
4052   1DBF 00 00 00 00 
4052   1DC3 00 00 00 00 
4052   1DC7 00 00 00 00 
4052   1DCB 00 00 00 00 
4052   1DCF 00 00 00 00 
4052   1DD3 00 00 00 00 
4052   1DD7 00 00 00 00 
4052   1DDB 00 00 00 00 
4052   1DDF 00 00 00 00 
4052   1DE3 00 00 00 00 
4052   1DE7 00 00 00 00 
4052   1DEB 00 00 00 00 
4052   1DEF 00 00 00 00 
4052   1DF3 00 00 00 00 
4052   1DF7 00 00 00 00 
4052   1DFB 00 00 00 00 
4052   1DFF 00 00 00 00 
4052   1E03 00 00 00 00 
4052   1E07 00 00 00 00 
4052   1E0B 00 00 00 00 
4052   1E0F 00 00 00 00 
4052   1E13 00 00 00 00 
4052   1E17 00 00 00 00 
4052   1E1B 00 00 00 00 
4052   1E1F 00 00 00 00 
4052   1E23 00 00 00 00 
4052   1E27 00 00 00 00 
4052   1E2B 00 00 00 00 
4052   1E2F 00 00 00 00 
4052   1E33 00 00 00 00 
4052   1E37 00 00 00 00 
4052   1E3B 00 00 00 00 
4052   1E3F 00 00 00 00 
4052   1E43 00 00 00 00 
4052   1E47 00 00 00 00 
4052   1E4B 00 00 00 00 
4052   1E4F 00 00 00 00 
4052   1E53 00 00 00 00 
4052   1E57 00 00 00 00 
4052   1E5B 00 00 00 00 
4052   1E5F 00 00 00 00 
4052   1E63 00 00 00 00 
4052   1E67 00 00 00 00 
4052   1E6B 00 00 00 00 
4052   1E6F 00 00 00 00 
4052   1E73 00 00 00 00 
4052   1E77 00 00 00 00 
4053   1E7B 00 00 00 00 _defdesign_data: .fill 12, 0
4053   1E7F 00 00 00 00 
4053   1E83 00 00 00 00 
4054   1E87 2D 62 00    __s0: .db "-b", 0
4055   1E8A 3D 3D 00    __s1: .db "==", 0
4056   1E8D 2D 64 00    __s2: .db "-d", 0
4057   1E90 58 58 00    __s3: .db "XX", 0
4058   1E93 2D 67 00    __s4: .db "-g", 0
4059   1E96 24 24 00    __s5: .db "$$", 0
4060   1E99 2D 70 00    __s6: .db "-p", 0
4061   1E9C 40 40 00    __s7: .db "@@", 0
4062   1E9F 2D 73 00    __s8: .db "-s", 0
4063   1EA2 2A 2A 00    __s9: .db "**", 0
4064   1EA5 2D 74 00    __s10: .db "-t", 0
4065   1EA8 2D 2D 00    __s11: .db "--", 0
4066   1EAB 2D 77 00    __s12: .db "-w", 0
4067   1EAE 4F 4F 00    __s13: .db "OO", 0
4068   1EB1 2D 79 00    __s14: .db "-y", 0
4069   1EB4 2E 2E 00    __s15: .db "..", 0
4070   1EB7 60 00       __s16: .db "\0\0", 0
4071   1EB9 55 6E 65 78 __s17: .db "Unexpected format in printf.", 0
4071   1EBD 70 65 63 74 
4071   1EC1 65 64 20 66 
4071   1EC5 6F 72 6D 61 
4071   1EC9 74 20 69 6E 
4071   1ECD 20 70 72 69 
4071   1ED1 6E 74 66 2E 
4071   1ED5 00 
4072   1ED6 45 72 72 6F __s18: .db "Error: Unknown argument type.\n", 0
4072   1EDA 72 3A 20 55 
4072   1EDE 6E 6B 6E 6F 
4072   1EE2 77 6E 20 61 
4072   1EE6 72 67 75 6D 
4072   1EEA 65 6E 74 20 
4072   1EEE 74 79 70 65 
4072   1EF2 2E 0A 00 
4073   1EF5 1B 5B 32 4A __s19: .db "\033[2J\033[H", 0
4073   1EF9 1B 5B 48 00 
4074   1EFD             
4075   1EFD FF 1E       _heap_top: .dw _heap
4076   1EFF 00          _heap: .db 0
4077   1F00             ; --- END DATA BLOCK
4078   1F00             
4079   1F00             .end
tasm: Number of errors = 0
