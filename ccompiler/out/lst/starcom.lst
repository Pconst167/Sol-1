0001   0000             ; --- FILENAME: ../solarium/usr/bin/starcom
0002   0000             .include "lib/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $i 
0011   0408 52 02 00      sub sp, 2
0012   040B             ;; print("\nStarcom 1.0\n"); 
0013   040B 26 F1 27      mov b, __s0 ; "\nStarcom 1.0\n"
0014   040E FD AB         swp b
0015   0410 D8            push b
0016   0411 07 17 10      call print
0017   0414 51 02 00      add sp, 2
0018   0417             ;; get(); // get filename 
0019   0417 07 0A 16      call get
0020   041A             ;; if(toktype == END){ 
0021   041A             _if1_cond:
0022   041A 29 2B 25      mov b, [_toktype] ; $toktype           
0023   041D             ; START RELATIONAL
0024   041D D7            push a
0025   041E 11            mov a, b
0026   041F 26 06 00      mov b, 6; END
0027   0422 B0            cmp a, b
0028   0423 FD 71         seq ; ==
0029   0425 E4            pop a
0030   0426             ; END RELATIONAL
0031   0426 C0 00 00      cmp b, 0
0032   0429 C6 3E 04      je _if1_exit
0033   042C             _if1_true:
0034   042C             ;; print("\nusage: starcom <filename> <size>\n"); 
0035   042C 26 FF 27      mov b, __s1 ; "\nusage: starcom <filename> <size>\n"
0036   042F FD AB         swp b
0037   0431 D8            push b
0038   0432 07 17 10      call print
0039   0435 51 02 00      add sp, 2
0040   0438             ;; exit(); 
0041   0438 07 85 10      call exit
0042   043B 0A 3E 04      jmp _if1_exit
0043   043E             _if1_exit:
0044   043E             ;; strcpy(data, token); 
0045   043E 26 71 27      mov b, _data_data ; $data           
0046   0441 FD AB         swp b
0047   0443 D8            push b
0048   0444 26 2F 25      mov b, _token_data ; $token           
0049   0447 FD AB         swp b
0050   0449 D8            push b
0051   044A 07 32 08      call strcpy
0052   044D 51 04 00      add sp, 4
0053   0450             ;; get(); // get size 
0054   0450 07 0A 16      call get
0055   0453             ;; if(toktype == END){ 
0056   0453             _if2_cond:
0057   0453 29 2B 25      mov b, [_toktype] ; $toktype           
0058   0456             ; START RELATIONAL
0059   0456 D7            push a
0060   0457 11            mov a, b
0061   0458 26 06 00      mov b, 6; END
0062   045B B0            cmp a, b
0063   045C FD 71         seq ; ==
0064   045E E4            pop a
0065   045F             ; END RELATIONAL
0066   045F C0 00 00      cmp b, 0
0067   0462 C6 77 04      je _if2_exit
0068   0465             _if2_true:
0069   0465             ;; print("\nusage: starcom <filename> <size>\n"); 
0070   0465 26 FF 27      mov b, __s1 ; "\nusage: starcom <filename> <size>\n"
0071   0468 FD AB         swp b
0072   046A D8            push b
0073   046B 07 17 10      call print
0074   046E 51 02 00      add sp, 2
0075   0471             ;; exit(); 
0076   0471 07 85 10      call exit
0077   0474 0A 77 04      jmp _if2_exit
0078   0477             _if2_exit:
0079   0477             ;; size = atoi(token); 
0080   0477 3B 6F 27      mov d, _size ; $size
0081   047A DA            push d
0082   047B 26 2F 25      mov b, _token_data ; $token           
0083   047E FD AB         swp b
0084   0480 D8            push b
0085   0481 07 FA 0C      call atoi
0086   0484 51 02 00      add sp, 2
0087   0487 E7            pop d
0088   0488 FD 43         mov [d], b
0089   048A             ;; print("\nOK. Start transfer now.\n"); 
0090   048A 26 22 28      mov b, __s2 ; "\nOK. Start transfer now.\n"
0091   048D FD AB         swp b
0092   048F D8            push b
0093   0490 07 17 10      call print
0094   0493 51 02 00      add sp, 2
0095   0496             
0096   0496             ; --- BEGIN INLINE ASM BLOCK
0097   0496 29 6F 27      mov b, [_size] 
0098   0499 3B 71 27      mov d, _data_data
0099   049C 07 EC 04      call _load_binary
0100   049F             ; --- END INLINE ASM BLOCK
0101   049F             
0102   049F             ;; for(i=0; i< size;i++){ 
0103   049F             _for3_init:
0104   049F FA FF FF      lea d, [bp + -1] ; $i         
0105   04A2 26 00 00      mov b, $0        
0106   04A5 FD 43         mov [d], b
0107   04A7             _for3_cond:
0108   04A7 2C FF FF      mov b, [bp + -1] ; $i             
0109   04AA             ; START RELATIONAL
0110   04AA D7            push a
0111   04AB 11            mov a, b
0112   04AC 29 6F 27      mov b, [_size] ; $size           
0113   04AF B0            cmp a, b
0114   04B0 FD 73         slt ; < 
0115   04B2 E4            pop a
0116   04B3             ; END RELATIONAL
0117   04B3 C0 00 00      cmp b, 0
0118   04B6 C6 E9 04      je _for3_exit
0119   04B9             _for3_block:
0120   04B9             ;; printx8(data[i]); print(" "); 
0121   04B9 3B 71 27      mov d, _data_data ; $data
0122   04BC D7            push a         
0123   04BD 2C FF FF      mov b, [bp + -1] ; $i                     
0124   04C0 5A            add d, b
0125   04C1 E4            pop a
0126   04C2 32            mov bl, [d]
0127   04C3 A7 00         mov bh, 0
0128   04C5 DD            push bl
0129   04C6 07 C2 0B      call printx8
0130   04C9 51 01 00      add sp, 1
0131   04CC             ;; print(" "); 
0132   04CC 26 3C 28      mov b, __s3 ; " "
0133   04CF FD AB         swp b
0134   04D1 D8            push b
0135   04D2 07 17 10      call print
0136   04D5 51 02 00      add sp, 2
0137   04D8             _for3_update:
0138   04D8 2C FF FF      mov b, [bp + -1] ; $i             
0139   04DB FD 79         mov g, b
0140   04DD FD 77         inc b
0141   04DF FA FF FF      lea d, [bp + -1] ; $i
0142   04E2 FD 43         mov [d], b
0143   04E4 FD 27         mov b, g
0144   04E6 0A A7 04      jmp _for3_cond
0145   04E9             _for3_exit:
0146   04E9             ;; return; 
0147   04E9 F9            leave
0148   04EA 05 0B         syscall sys_terminate_proc
0149   04EC             
0150   04EC             ; --- BEGIN INLINE ASM BLOCK
0151   04EC               
0152   04EC               
0153   04EC               
0154   04EC               
0155   04EC               
0156   04EC             _load_binary:
0157   04EC D7            push a
0158   04ED DA            push d
0159   04EE D9            push c
0160   04EF             _load_binary_loop:
0161   04EF D8            push b
out/starcom.asm line 0162: Label not found: (_getchar)
out/starcom.asm line 0162: Unused data in MS byte of argument. (2)
0162   04F0 07 00 00      call _getchar
0163   04F3 E5            pop b
0164   04F4 1A            mov al, ah
0165   04F5 3E            mov [d], al
0166   04F6 79            inc d
0167   04F7 FD 7D         dec b
0168   04F9 C0 00 00      cmp b, 0
0169   04FC C7 EF 04      jne _load_binary_loop
0170   04FF             _load_binary_end:
0171   04FF E6            pop c
0172   0500 E7            pop d
0173   0501 E4            pop a
0174   0502 09            ret
0175   0503             ; --- END INLINE ASM BLOCK
0176   0503             
0177   0503 05 0B         syscall sys_terminate_proc
0178   0505             
0179   0505             include_ctype_lib:
0180   0505 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0181   0508             
0182   0508             ; --- BEGIN INLINE ASM BLOCK
0183   0508             .include "lib/ctype.asm"
0001+  0508             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0508             ; ctype.s
0003+  0508             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0508             
0005+  0508             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  0508             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  0508             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  0508             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  0508             ;; characters are supported.
0010+  0508             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  0508             ;; _isalnum 
0012+  0508             ;; _isalpha 
0013+  0508             ;; islower 
0014+  0508             ;; isupper 
0015+  0508             ;; _isdigit 
0016+  0508             ;; isxdigit
0017+  0508             ;; iscntrl 
0018+  0508             ;; isgraph 
0019+  0508             ;; _isspace 
0020+  0508             ;; isblank 
0021+  0508             ;; isprint 
0022+  0508             ;; ispunct 
0023+  0508             ;; tolower 
0024+  0508             ;; toupper
0025+  0508             
0026+  0508             
0027+  0508             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  0508             ;; IS ALPHANUMERIC
0029+  0508             ;; sets ZF according with result
0030+  0508             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  0508             _isalnum:
0032+  0508 07 25 05    	call _isalpha
0033+  050B C6 11 05    	je _isalnum_exit
0034+  050E 07 12 05    	call _isdigit
0035+  0511             _isalnum_exit:
0036+  0511 09          	ret	
0037+  0512             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  0512             ;; IS DIGIT
0039+  0512             ;; sets ZF according with result
0040+  0512             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  0512             _isdigit:
0042+  0512 DB          	push al
0043+  0513 B9 30       	cmp al, '0'
0044+  0515 C8 21 05    	jlu _isdigit_false
0045+  0518 B9 39       	cmp al, '9'
0046+  051A D1 21 05    	jgu _isdigit_false
0047+  051D 87 00       	and al, 0	; set ZF
0048+  051F E8          	pop al
0049+  0520 09          	ret
0050+  0521             _isdigit_false:
0051+  0521 8B 01       	or al, 1	; clear ZF
0052+  0523 E8          	pop al
0053+  0524 09          	ret	
0054+  0525             	
0055+  0525             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  0525             ;; IS ALPHA
0057+  0525             ;; sets ZF according with result
0058+  0525             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  0525             _isalpha:
0060+  0525 DB          	push al
0061+  0526 B9 5F       	cmp al, '_'
0062+  0528 C6 48 05    	je _isalpha_true
0063+  052B B9 2E       	cmp al, '.'
0064+  052D C6 48 05    	je _isalpha_true
0065+  0530 B9 41       	cmp al, 'A'
0066+  0532 C8 44 05    	jlu _isalpha_false
0067+  0535 B9 7A       	cmp al, 'z'
0068+  0537 D1 44 05    	jgu _isalpha_false
0069+  053A B9 5A       	cmp al, 'Z'
0070+  053C D0 48 05    	jleu _isalpha_true
0071+  053F B9 61       	cmp al, 'a'
0072+  0541 C9 48 05    	jgeu _isalpha_true
0073+  0544             _isalpha_false:
0074+  0544 8B 01       	or al, 1	; clear ZF
0075+  0546 E8          	pop al
0076+  0547 09          	ret
0077+  0548             _isalpha_true:
0078+  0548 87 00       	and al, 0	; set ZF
0079+  054A E8          	pop al
0080+  054B 09          	ret
0081+  054C             
0082+  054C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  054C             ;; IS PATH-ALPHA
0084+  054C             ;; sets ZF according with result
0085+  054C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  054C             ispath:
0087+  054C DB          	push al
0088+  054D 07 12 05    	call _isdigit
0089+  0550 C6 7A 05    	je ispath_true
0090+  0553 B9 5F       	cmp al, '_'
0091+  0555 C6 7A 05    	je ispath_true
0092+  0558 B9 2F       	cmp al, '/'
0093+  055A C6 7A 05    	je ispath_true
0094+  055D B9 2E       	cmp al, '.'
0095+  055F C6 7A 05    	je ispath_true
0096+  0562 B9 41       	cmp al, 'A'
0097+  0564 C8 76 05    	jlu ispath_false
0098+  0567 B9 7A       	cmp al, 'z'
0099+  0569 D1 76 05    	jgu ispath_false
0100+  056C B9 5A       	cmp al, 'Z'
0101+  056E D0 7A 05    	jleu ispath_true
0102+  0571 B9 61       	cmp al, 'a'
0103+  0573 C9 7A 05    	jgeu ispath_true
0104+  0576             ispath_false:
0105+  0576 8B 01       	or al, 1	; clear ZF
0106+  0578 E8          	pop al
0107+  0579 09          	ret
0108+  057A             ispath_true:
0109+  057A 87 00       	and al, 0	; set ZF
0110+  057C E8          	pop al
0111+  057D 09          	ret
0112+  057E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  057E             ;; IS SPACE
0114+  057E             ;; sets ZF according with result
0115+  057E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  057E             _isspace:
0117+  057E B9 20       	cmp al, $20		; ' '
0118+  0580 C6 94 05    	je _isspace_exit
0119+  0583 B9 09       	cmp al, $09		; '\t'
0120+  0585 C6 94 05    	je _isspace_exit
0121+  0588 B9 0A       	cmp al, $0A		; '\n'
0122+  058A C6 94 05    	je _isspace_exit
0123+  058D B9 0D       	cmp al, $0D		; '\r'
0124+  058F C6 94 05    	je _isspace_exit
0125+  0592 B9 0B       	cmp al, $0B		; '\v'
0126+  0594             _isspace_exit:
0127+  0594 09          	ret	
0128+  0595             
0129+  0595             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  0595             ; TO LOWER
0131+  0595             ; input in AL
0132+  0595             ; output in AL
0133+  0595             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  0595             _to_lower:
0135+  0595 B9 5A       	cmp al, 'Z'
0136+  0597 D1 9C 05    	jgu _to_lower_ret
0137+  059A 6A 20       	add al, $20				; convert to lower case
0138+  059C             _to_lower_ret:
0139+  059C 09          	ret
0140+  059D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  059D             ; TO UPPER
0142+  059D             ; input in AL
0143+  059D             ; output in AL
0144+  059D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  059D             _to_upper:
0146+  059D B9 61       	cmp al, 'a'
0147+  059F C8 A4 05    	jlu _to_upper_ret
0148+  05A2 6F 20       	sub al, $20			; convert to upper case
0149+  05A4             _to_upper_ret:
0150+  05A4 09          	ret
0151+  05A5             
0184   05A5             ; --- END INLINE ASM BLOCK
0185   05A5             
0186   05A5 F9            leave
0187   05A6 09            ret
0188   05A7             
0189   05A7             is_space:
0190   05A7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0191   05AA             ;; return c == ' ' || c == '\t' || c == '\n' || c == '\r'; 
0192   05AA 34 05 00      mov bl, [bp + 5] ; $c
0193   05AD A7 00         mov bh, 0             
0194   05AF             ; START RELATIONAL
0195   05AF D7            push a
0196   05B0 11            mov a, b
0197   05B1 26 20 00      mov b, $20
0198   05B4 B0            cmp a, b
0199   05B5 FD 71         seq ; ==
0200   05B7 E4            pop a
0201   05B8             ; END RELATIONAL
0202   05B8 D7            push a
0203   05B9 11            mov a, b
0204   05BA 34 05 00      mov bl, [bp + 5] ; $c
0205   05BD A7 00         mov bh, 0             
0206   05BF             ; START RELATIONAL
0207   05BF D7            push a
0208   05C0 11            mov a, b
0209   05C1 26 09 00      mov b, $9
0210   05C4 B0            cmp a, b
0211   05C5 FD 71         seq ; ==
0212   05C7 E4            pop a
0213   05C8             ; END RELATIONAL
0214   05C8 FD A8         sor a, b ; ||
0215   05CA 11            mov a, b
0216   05CB 34 05 00      mov bl, [bp + 5] ; $c
0217   05CE A7 00         mov bh, 0             
0218   05D0             ; START RELATIONAL
0219   05D0 D7            push a
0220   05D1 11            mov a, b
0221   05D2 26 0A 00      mov b, $a
0222   05D5 B0            cmp a, b
0223   05D6 FD 71         seq ; ==
0224   05D8 E4            pop a
0225   05D9             ; END RELATIONAL
0226   05D9 FD A8         sor a, b ; ||
0227   05DB 11            mov a, b
0228   05DC 34 05 00      mov bl, [bp + 5] ; $c
0229   05DF A7 00         mov bh, 0             
0230   05E1             ; START RELATIONAL
0231   05E1 D7            push a
0232   05E2 11            mov a, b
0233   05E3 26 0D 00      mov b, $d
0234   05E6 B0            cmp a, b
0235   05E7 FD 71         seq ; ==
0236   05E9 E4            pop a
0237   05EA             ; END RELATIONAL
0238   05EA FD A8         sor a, b ; ||
0239   05EC E4            pop a
0240   05ED F9            leave
0241   05EE 09            ret
0242   05EF             
0243   05EF             is_digit:
0244   05EF F8 00 00      enter 0 ; (push bp; mov bp, sp)
0245   05F2             ;; return c >= '0' && c <= '9'; 
0246   05F2 34 05 00      mov bl, [bp + 5] ; $c
0247   05F5 A7 00         mov bh, 0             
0248   05F7             ; START RELATIONAL
0249   05F7 D7            push a
0250   05F8 11            mov a, b
0251   05F9 26 30 00      mov b, $30
0252   05FC B0            cmp a, b
0253   05FD FD 80         sge ; >=
0254   05FF E4            pop a
0255   0600             ; END RELATIONAL
0256   0600 D7            push a
0257   0601 11            mov a, b
0258   0602 34 05 00      mov bl, [bp + 5] ; $c
0259   0605 A7 00         mov bh, 0             
0260   0607             ; START RELATIONAL
0261   0607 D7            push a
0262   0608 11            mov a, b
0263   0609 26 39 00      mov b, $39
0264   060C B0            cmp a, b
0265   060D FD 74         sle ; <=
0266   060F E4            pop a
0267   0610             ; END RELATIONAL
0268   0610 FD A7         sand a, b ; &&
0269   0612 E4            pop a
0270   0613 F9            leave
0271   0614 09            ret
0272   0615             
0273   0615             is_alpha:
0274   0615 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0275   0618             ;; return(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '_'); 
0276   0618 34 05 00      mov bl, [bp + 5] ; $c
0277   061B A7 00         mov bh, 0             
0278   061D             ; START RELATIONAL
0279   061D D7            push a
0280   061E 11            mov a, b
0281   061F 26 61 00      mov b, $61
0282   0622 B0            cmp a, b
0283   0623 FD 80         sge ; >=
0284   0625 E4            pop a
0285   0626             ; END RELATIONAL
0286   0626 D7            push a
0287   0627 11            mov a, b
0288   0628 34 05 00      mov bl, [bp + 5] ; $c
0289   062B A7 00         mov bh, 0             
0290   062D             ; START RELATIONAL
0291   062D D7            push a
0292   062E 11            mov a, b
0293   062F 26 7A 00      mov b, $7a
0294   0632 B0            cmp a, b
0295   0633 FD 74         sle ; <=
0296   0635 E4            pop a
0297   0636             ; END RELATIONAL
0298   0636 FD A7         sand a, b ; &&
0299   0638 E4            pop a
0300   0639 D7            push a
0301   063A 11            mov a, b
0302   063B 34 05 00      mov bl, [bp + 5] ; $c
0303   063E A7 00         mov bh, 0             
0304   0640             ; START RELATIONAL
0305   0640 D7            push a
0306   0641 11            mov a, b
0307   0642 26 41 00      mov b, $41
0308   0645 B0            cmp a, b
0309   0646 FD 80         sge ; >=
0310   0648 E4            pop a
0311   0649             ; END RELATIONAL
0312   0649 D7            push a
0313   064A 11            mov a, b
0314   064B 34 05 00      mov bl, [bp + 5] ; $c
0315   064E A7 00         mov bh, 0             
0316   0650             ; START RELATIONAL
0317   0650 D7            push a
0318   0651 11            mov a, b
0319   0652 26 5A 00      mov b, $5a
0320   0655 B0            cmp a, b
0321   0656 FD 74         sle ; <=
0322   0658 E4            pop a
0323   0659             ; END RELATIONAL
0324   0659 FD A7         sand a, b ; &&
0325   065B E4            pop a
0326   065C FD A8         sor a, b ; ||
0327   065E 11            mov a, b
0328   065F 34 05 00      mov bl, [bp + 5] ; $c
0329   0662 A7 00         mov bh, 0             
0330   0664             ; START RELATIONAL
0331   0664 D7            push a
0332   0665 11            mov a, b
0333   0666 26 5F 00      mov b, $5f
0334   0669 B0            cmp a, b
0335   066A FD 71         seq ; ==
0336   066C E4            pop a
0337   066D             ; END RELATIONAL
0338   066D FD A8         sor a, b ; ||
0339   066F E4            pop a
0340   0670 F9            leave
0341   0671 09            ret
0342   0672             
0343   0672             is_delimiter:
0344   0672 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0345   0675             ;; if( 
0346   0675             _if4_cond:
0347   0675 34 05 00      mov bl, [bp + 5] ; $c
0348   0678 A7 00         mov bh, 0             
0349   067A             ; START RELATIONAL
0350   067A D7            push a
0351   067B 11            mov a, b
0352   067C 26 40 00      mov b, $40
0353   067F B0            cmp a, b
0354   0680 FD 71         seq ; ==
0355   0682 E4            pop a
0356   0683             ; END RELATIONAL
0357   0683 D7            push a
0358   0684 11            mov a, b
0359   0685 34 05 00      mov bl, [bp + 5] ; $c
0360   0688 A7 00         mov bh, 0             
0361   068A             ; START RELATIONAL
0362   068A D7            push a
0363   068B 11            mov a, b
0364   068C 26 23 00      mov b, $23
0365   068F B0            cmp a, b
0366   0690 FD 71         seq ; ==
0367   0692 E4            pop a
0368   0693             ; END RELATIONAL
0369   0693 FD A8         sor a, b ; ||
0370   0695 11            mov a, b
0371   0696 34 05 00      mov bl, [bp + 5] ; $c
0372   0699 A7 00         mov bh, 0             
0373   069B             ; START RELATIONAL
0374   069B D7            push a
0375   069C 11            mov a, b
0376   069D 26 24 00      mov b, $24
0377   06A0 B0            cmp a, b
0378   06A1 FD 71         seq ; ==
0379   06A3 E4            pop a
0380   06A4             ; END RELATIONAL
0381   06A4 FD A8         sor a, b ; ||
0382   06A6 11            mov a, b
0383   06A7 34 05 00      mov bl, [bp + 5] ; $c
0384   06AA A7 00         mov bh, 0             
0385   06AC             ; START RELATIONAL
0386   06AC D7            push a
0387   06AD 11            mov a, b
0388   06AE 26 2B 00      mov b, $2b
0389   06B1 B0            cmp a, b
0390   06B2 FD 71         seq ; ==
0391   06B4 E4            pop a
0392   06B5             ; END RELATIONAL
0393   06B5 FD A8         sor a, b ; ||
0394   06B7 11            mov a, b
0395   06B8 34 05 00      mov bl, [bp + 5] ; $c
0396   06BB A7 00         mov bh, 0             
0397   06BD             ; START RELATIONAL
0398   06BD D7            push a
0399   06BE 11            mov a, b
0400   06BF 26 2D 00      mov b, $2d
0401   06C2 B0            cmp a, b
0402   06C3 FD 71         seq ; ==
0403   06C5 E4            pop a
0404   06C6             ; END RELATIONAL
0405   06C6 FD A8         sor a, b ; ||
0406   06C8 11            mov a, b
0407   06C9 34 05 00      mov bl, [bp + 5] ; $c
0408   06CC A7 00         mov bh, 0             
0409   06CE             ; START RELATIONAL
0410   06CE D7            push a
0411   06CF 11            mov a, b
0412   06D0 26 2A 00      mov b, $2a
0413   06D3 B0            cmp a, b
0414   06D4 FD 71         seq ; ==
0415   06D6 E4            pop a
0416   06D7             ; END RELATIONAL
0417   06D7 FD A8         sor a, b ; ||
0418   06D9 11            mov a, b
0419   06DA 34 05 00      mov bl, [bp + 5] ; $c
0420   06DD A7 00         mov bh, 0             
0421   06DF             ; START RELATIONAL
0422   06DF D7            push a
0423   06E0 11            mov a, b
0424   06E1 26 2F 00      mov b, $2f
0425   06E4 B0            cmp a, b
0426   06E5 FD 71         seq ; ==
0427   06E7 E4            pop a
0428   06E8             ; END RELATIONAL
0429   06E8 FD A8         sor a, b ; ||
0430   06EA 11            mov a, b
0431   06EB 34 05 00      mov bl, [bp + 5] ; $c
0432   06EE A7 00         mov bh, 0             
0433   06F0             ; START RELATIONAL
0434   06F0 D7            push a
0435   06F1 11            mov a, b
0436   06F2 26 25 00      mov b, $25
0437   06F5 B0            cmp a, b
0438   06F6 FD 71         seq ; ==
0439   06F8 E4            pop a
0440   06F9             ; END RELATIONAL
0441   06F9 FD A8         sor a, b ; ||
0442   06FB 11            mov a, b
0443   06FC 34 05 00      mov bl, [bp + 5] ; $c
0444   06FF A7 00         mov bh, 0             
0445   0701             ; START RELATIONAL
0446   0701 D7            push a
0447   0702 11            mov a, b
0448   0703 26 5B 00      mov b, $5b
0449   0706 B0            cmp a, b
0450   0707 FD 71         seq ; ==
0451   0709 E4            pop a
0452   070A             ; END RELATIONAL
0453   070A FD A8         sor a, b ; ||
0454   070C 11            mov a, b
0455   070D 34 05 00      mov bl, [bp + 5] ; $c
0456   0710 A7 00         mov bh, 0             
0457   0712             ; START RELATIONAL
0458   0712 D7            push a
0459   0713 11            mov a, b
0460   0714 26 5D 00      mov b, $5d
0461   0717 B0            cmp a, b
0462   0718 FD 71         seq ; ==
0463   071A E4            pop a
0464   071B             ; END RELATIONAL
0465   071B FD A8         sor a, b ; ||
0466   071D 11            mov a, b
0467   071E 34 05 00      mov bl, [bp + 5] ; $c
0468   0721 A7 00         mov bh, 0             
0469   0723             ; START RELATIONAL
0470   0723 D7            push a
0471   0724 11            mov a, b
0472   0725 26 28 00      mov b, $28
0473   0728 B0            cmp a, b
0474   0729 FD 71         seq ; ==
0475   072B E4            pop a
0476   072C             ; END RELATIONAL
0477   072C FD A8         sor a, b ; ||
0478   072E 11            mov a, b
0479   072F 34 05 00      mov bl, [bp + 5] ; $c
0480   0732 A7 00         mov bh, 0             
0481   0734             ; START RELATIONAL
0482   0734 D7            push a
0483   0735 11            mov a, b
0484   0736 26 29 00      mov b, $29
0485   0739 B0            cmp a, b
0486   073A FD 71         seq ; ==
0487   073C E4            pop a
0488   073D             ; END RELATIONAL
0489   073D FD A8         sor a, b ; ||
0490   073F 11            mov a, b
0491   0740 34 05 00      mov bl, [bp + 5] ; $c
0492   0743 A7 00         mov bh, 0             
0493   0745             ; START RELATIONAL
0494   0745 D7            push a
0495   0746 11            mov a, b
0496   0747 26 7B 00      mov b, $7b
0497   074A B0            cmp a, b
0498   074B FD 71         seq ; ==
0499   074D E4            pop a
0500   074E             ; END RELATIONAL
0501   074E FD A8         sor a, b ; ||
0502   0750 11            mov a, b
0503   0751 34 05 00      mov bl, [bp + 5] ; $c
0504   0754 A7 00         mov bh, 0             
0505   0756             ; START RELATIONAL
0506   0756 D7            push a
0507   0757 11            mov a, b
0508   0758 26 7D 00      mov b, $7d
0509   075B B0            cmp a, b
0510   075C FD 71         seq ; ==
0511   075E E4            pop a
0512   075F             ; END RELATIONAL
0513   075F FD A8         sor a, b ; ||
0514   0761 11            mov a, b
0515   0762 34 05 00      mov bl, [bp + 5] ; $c
0516   0765 A7 00         mov bh, 0             
0517   0767             ; START RELATIONAL
0518   0767 D7            push a
0519   0768 11            mov a, b
0520   0769 26 3A 00      mov b, $3a
0521   076C B0            cmp a, b
0522   076D FD 71         seq ; ==
0523   076F E4            pop a
0524   0770             ; END RELATIONAL
0525   0770 FD A8         sor a, b ; ||
0526   0772 11            mov a, b
0527   0773 34 05 00      mov bl, [bp + 5] ; $c
0528   0776 A7 00         mov bh, 0             
0529   0778             ; START RELATIONAL
0530   0778 D7            push a
0531   0779 11            mov a, b
0532   077A 26 3B 00      mov b, $3b
0533   077D B0            cmp a, b
0534   077E FD 71         seq ; ==
0535   0780 E4            pop a
0536   0781             ; END RELATIONAL
0537   0781 FD A8         sor a, b ; ||
0538   0783 11            mov a, b
0539   0784 34 05 00      mov bl, [bp + 5] ; $c
0540   0787 A7 00         mov bh, 0             
0541   0789             ; START RELATIONAL
0542   0789 D7            push a
0543   078A 11            mov a, b
0544   078B 26 3C 00      mov b, $3c
0545   078E B0            cmp a, b
0546   078F FD 71         seq ; ==
0547   0791 E4            pop a
0548   0792             ; END RELATIONAL
0549   0792 FD A8         sor a, b ; ||
0550   0794 11            mov a, b
0551   0795 34 05 00      mov bl, [bp + 5] ; $c
0552   0798 A7 00         mov bh, 0             
0553   079A             ; START RELATIONAL
0554   079A D7            push a
0555   079B 11            mov a, b
0556   079C 26 3E 00      mov b, $3e
0557   079F B0            cmp a, b
0558   07A0 FD 71         seq ; ==
0559   07A2 E4            pop a
0560   07A3             ; END RELATIONAL
0561   07A3 FD A8         sor a, b ; ||
0562   07A5 11            mov a, b
0563   07A6 34 05 00      mov bl, [bp + 5] ; $c
0564   07A9 A7 00         mov bh, 0             
0565   07AB             ; START RELATIONAL
0566   07AB D7            push a
0567   07AC 11            mov a, b
0568   07AD 26 3D 00      mov b, $3d
0569   07B0 B0            cmp a, b
0570   07B1 FD 71         seq ; ==
0571   07B3 E4            pop a
0572   07B4             ; END RELATIONAL
0573   07B4 FD A8         sor a, b ; ||
0574   07B6 11            mov a, b
0575   07B7 34 05 00      mov bl, [bp + 5] ; $c
0576   07BA A7 00         mov bh, 0             
0577   07BC             ; START RELATIONAL
0578   07BC D7            push a
0579   07BD 11            mov a, b
0580   07BE 26 21 00      mov b, $21
0581   07C1 B0            cmp a, b
0582   07C2 FD 71         seq ; ==
0583   07C4 E4            pop a
0584   07C5             ; END RELATIONAL
0585   07C5 FD A8         sor a, b ; ||
0586   07C7 11            mov a, b
0587   07C8 34 05 00      mov bl, [bp + 5] ; $c
0588   07CB A7 00         mov bh, 0             
0589   07CD             ; START RELATIONAL
0590   07CD D7            push a
0591   07CE 11            mov a, b
0592   07CF 26 5E 00      mov b, $5e
0593   07D2 B0            cmp a, b
0594   07D3 FD 71         seq ; ==
0595   07D5 E4            pop a
0596   07D6             ; END RELATIONAL
0597   07D6 FD A8         sor a, b ; ||
0598   07D8 11            mov a, b
0599   07D9 34 05 00      mov bl, [bp + 5] ; $c
0600   07DC A7 00         mov bh, 0             
0601   07DE             ; START RELATIONAL
0602   07DE D7            push a
0603   07DF 11            mov a, b
0604   07E0 26 26 00      mov b, $26
0605   07E3 B0            cmp a, b
0606   07E4 FD 71         seq ; ==
0607   07E6 E4            pop a
0608   07E7             ; END RELATIONAL
0609   07E7 FD A8         sor a, b ; ||
0610   07E9 11            mov a, b
0611   07EA 34 05 00      mov bl, [bp + 5] ; $c
0612   07ED A7 00         mov bh, 0             
0613   07EF             ; START RELATIONAL
0614   07EF D7            push a
0615   07F0 11            mov a, b
0616   07F1 26 7C 00      mov b, $7c
0617   07F4 B0            cmp a, b
0618   07F5 FD 71         seq ; ==
0619   07F7 E4            pop a
0620   07F8             ; END RELATIONAL
0621   07F8 FD A8         sor a, b ; ||
0622   07FA 11            mov a, b
0623   07FB 34 05 00      mov bl, [bp + 5] ; $c
0624   07FE A7 00         mov bh, 0             
0625   0800             ; START RELATIONAL
0626   0800 D7            push a
0627   0801 11            mov a, b
0628   0802 26 7E 00      mov b, $7e
0629   0805 B0            cmp a, b
0630   0806 FD 71         seq ; ==
0631   0808 E4            pop a
0632   0809             ; END RELATIONAL
0633   0809 FD A8         sor a, b ; ||
0634   080B 11            mov a, b
0635   080C 34 05 00      mov bl, [bp + 5] ; $c
0636   080F A7 00         mov bh, 0             
0637   0811             ; START RELATIONAL
0638   0811 D7            push a
0639   0812 11            mov a, b
0640   0813 26 2E 00      mov b, $2e
0641   0816 B0            cmp a, b
0642   0817 FD 71         seq ; ==
0643   0819 E4            pop a
0644   081A             ; END RELATIONAL
0645   081A FD A8         sor a, b ; ||
0646   081C E4            pop a
0647   081D C0 00 00      cmp b, 0
0648   0820 C6 2B 08      je _if4_else
0649   0823             _if4_true:
0650   0823             ;; return 1; 
0651   0823 26 01 00      mov b, $1
0652   0826 F9            leave
0653   0827 09            ret
0654   0828 0A 30 08      jmp _if4_exit
0655   082B             _if4_else:
0656   082B             ;; return 0; 
0657   082B 26 00 00      mov b, $0
0658   082E F9            leave
0659   082F 09            ret
0660   0830             _if4_exit:
0661   0830 F9            leave
0662   0831 09            ret
0663   0832             
0664   0832             strcpy:
0665   0832 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0666   0835             ; $psrc 
0667   0835             ; $pdest 
0668   0835 52 04 00      sub sp, 4
0669   0838             ;; psrc = src; 
0670   0838 FA FF FF      lea d, [bp + -1] ; $psrc         
0671   083B 2C 05 00      mov b, [bp + 5] ; $src                     
0672   083E FD 43         mov [d], b
0673   0840             ;; pdest = dest; 
0674   0840 FA FD FF      lea d, [bp + -3] ; $pdest         
0675   0843 2C 07 00      mov b, [bp + 7] ; $dest                     
0676   0846 FD 43         mov [d], b
0677   0848             ;; while(*psrc) *pdest++ = *psrc++; 
0678   0848             _while5_cond:
0679   0848 2C FF FF      mov b, [bp + -1] ; $psrc             
0680   084B 74            mov d, b
0681   084C 32            mov bl, [d]
0682   084D A7 00         mov bh, 0
0683   084F C0 00 00      cmp b, 0
0684   0852 C6 7C 08      je _while5_exit
0685   0855             _while5_block:
0686   0855             ;; *pdest++ = *psrc++; 
0687   0855 2C FD FF      mov b, [bp + -3] ; $pdest             
0688   0858 FD 79         mov g, b
0689   085A FD 77         inc b
0690   085C FA FD FF      lea d, [bp + -3] ; $pdest
0691   085F FD 43         mov [d], b
0692   0861 FD 27         mov b, g
0693   0863 D8            push b
0694   0864 2C FF FF      mov b, [bp + -1] ; $psrc             
0695   0867 FD 79         mov g, b
0696   0869 FD 77         inc b
0697   086B FA FF FF      lea d, [bp + -1] ; $psrc
0698   086E FD 43         mov [d], b
0699   0870 FD 27         mov b, g
0700   0872 74            mov d, b
0701   0873 32            mov bl, [d]
0702   0874 A7 00         mov bh, 0
0703   0876 E7            pop d
0704   0877 FD 3E         mov [d], bl
0705   0879 0A 48 08      jmp _while5_cond
0706   087C             _while5_exit:
0707   087C             ;; *pdest = '\0'; 
0708   087C 2C FD FF      mov b, [bp + -3] ; $pdest             
0709   087F D8            push b
0710   0880 26 00 00      mov b, $0
0711   0883 E7            pop d
0712   0884 FD 3E         mov [d], bl
0713   0886 F9            leave
0714   0887 09            ret
0715   0888             
0716   0888             strcmp:
0717   0888 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0718   088B             ;; while (*s1 && (*s1 == *s2)) { 
0719   088B             _while6_cond:
0720   088B 2C 07 00      mov b, [bp + 7] ; $s1             
0721   088E 74            mov d, b
0722   088F 32            mov bl, [d]
0723   0890 A7 00         mov bh, 0
0724   0892 D7            push a
0725   0893 11            mov a, b
0726   0894 2C 07 00      mov b, [bp + 7] ; $s1             
0727   0897 74            mov d, b
0728   0898 32            mov bl, [d]
0729   0899 A7 00         mov bh, 0
0730   089B             ; START RELATIONAL
0731   089B D7            push a
0732   089C 11            mov a, b
0733   089D 2C 05 00      mov b, [bp + 5] ; $s2             
0734   08A0 74            mov d, b
0735   08A1 32            mov bl, [d]
0736   08A2 A7 00         mov bh, 0
0737   08A4 B0            cmp a, b
0738   08A5 FD 71         seq ; ==
0739   08A7 E4            pop a
0740   08A8             ; END RELATIONAL
0741   08A8 FD A7         sand a, b ; &&
0742   08AA E4            pop a
0743   08AB C0 00 00      cmp b, 0
0744   08AE C6 D0 08      je _while6_exit
0745   08B1             _while6_block:
0746   08B1             ;; s1++; 
0747   08B1 2C 07 00      mov b, [bp + 7] ; $s1             
0748   08B4 FD 79         mov g, b
0749   08B6 FD 77         inc b
0750   08B8 FA 07 00      lea d, [bp + 7] ; $s1
0751   08BB FD 43         mov [d], b
0752   08BD FD 27         mov b, g
0753   08BF             ;; s2++; 
0754   08BF 2C 05 00      mov b, [bp + 5] ; $s2             
0755   08C2 FD 79         mov g, b
0756   08C4 FD 77         inc b
0757   08C6 FA 05 00      lea d, [bp + 5] ; $s2
0758   08C9 FD 43         mov [d], b
0759   08CB FD 27         mov b, g
0760   08CD 0A 8B 08      jmp _while6_cond
0761   08D0             _while6_exit:
0762   08D0             ;; return *s1 - *s2; 
0763   08D0 2C 07 00      mov b, [bp + 7] ; $s1             
0764   08D3 74            mov d, b
0765   08D4 32            mov bl, [d]
0766   08D5 A7 00         mov bh, 0
0767   08D7             ; START TERMS
0768   08D7 D7            push a
0769   08D8 11            mov a, b
0770   08D9 2C 05 00      mov b, [bp + 5] ; $s2             
0771   08DC 74            mov d, b
0772   08DD 32            mov bl, [d]
0773   08DE A7 00         mov bh, 0
0774   08E0 60            sub a, b
0775   08E1 27            mov b, a
0776   08E2 E4            pop a
0777   08E3             ; END TERMS
0778   08E3 F9            leave
0779   08E4 09            ret
0780   08E5             
0781   08E5             strcat:
0782   08E5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0783   08E8             ; $dest_len 
0784   08E8             ; $i 
0785   08E8 52 04 00      sub sp, 4
0786   08EB             ;; dest_len = strlen(dest); 
0787   08EB FA FF FF      lea d, [bp + -1] ; $dest_len
0788   08EE DA            push d
0789   08EF 2C 07 00      mov b, [bp + 7] ; $dest             
0790   08F2 FD AB         swp b
0791   08F4 D8            push b
0792   08F5 07 84 09      call strlen
0793   08F8 51 02 00      add sp, 2
0794   08FB E7            pop d
0795   08FC FD 43         mov [d], b
0796   08FE             ;; for (i = 0; src[i] != 0; i=i+1) { 
0797   08FE             _for7_init:
0798   08FE FA FD FF      lea d, [bp + -3] ; $i         
0799   0901 26 00 00      mov b, $0        
0800   0904 FD 43         mov [d], b
0801   0906             _for7_cond:
0802   0906 FA 05 00      lea d, [bp + 5] ; $src
0803   0909 FD 2A         mov d, [d]
0804   090B D7            push a         
0805   090C 2C FD FF      mov b, [bp + -3] ; $i                     
0806   090F FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0807   0913 E4            pop a
0808   0914 32            mov bl, [d]
0809   0915 A7 00         mov bh, 0
0810   0917             ; START RELATIONAL
0811   0917 D7            push a
0812   0918 11            mov a, b
0813   0919 26 00 00      mov b, $0
0814   091C B0            cmp a, b
0815   091D FD 72         sneq ; !=
0816   091F E4            pop a
0817   0920             ; END RELATIONAL
0818   0920 C0 00 00      cmp b, 0
0819   0923 C6 64 09      je _for7_exit
0820   0926             _for7_block:
0821   0926             ;; dest[dest_len + i] = src[i]; 
0822   0926 FA 07 00      lea d, [bp + 7] ; $dest
0823   0929 FD 2A         mov d, [d]
0824   092B D7            push a         
0825   092C 2C FF FF      mov b, [bp + -1] ; $dest_len             
0826   092F             ; START TERMS
0827   092F D7            push a
0828   0930 11            mov a, b
0829   0931 2C FD FF      mov b, [bp + -3] ; $i             
0830   0934 54            add a, b
0831   0935 27            mov b, a
0832   0936 E4            pop a
0833   0937             ; END TERMS        
0834   0937 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0835   093B E4            pop a
0836   093C DA            push d
0837   093D FA 05 00      lea d, [bp + 5] ; $src
0838   0940 FD 2A         mov d, [d]
0839   0942 D7            push a         
0840   0943 2C FD FF      mov b, [bp + -3] ; $i                     
0841   0946 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0842   094A E4            pop a
0843   094B 32            mov bl, [d]
0844   094C A7 00         mov bh, 0
0845   094E E7            pop d
0846   094F FD 3E         mov [d], bl
0847   0951             _for7_update:
0848   0951 FA FD FF      lea d, [bp + -3] ; $i         
0849   0954 2C FD FF      mov b, [bp + -3] ; $i             
0850   0957             ; START TERMS
0851   0957 D7            push a
0852   0958 11            mov a, b
0853   0959 26 01 00      mov b, $1
0854   095C 54            add a, b
0855   095D 27            mov b, a
0856   095E E4            pop a
0857   095F             ; END TERMS        
0858   095F FD 43         mov [d], b
0859   0961 0A 06 09      jmp _for7_cond
0860   0964             _for7_exit:
0861   0964             ;; dest[dest_len + i] = 0; 
0862   0964 FA 07 00      lea d, [bp + 7] ; $dest
0863   0967 FD 2A         mov d, [d]
0864   0969 D7            push a         
0865   096A 2C FF FF      mov b, [bp + -1] ; $dest_len             
0866   096D             ; START TERMS
0867   096D D7            push a
0868   096E 11            mov a, b
0869   096F 2C FD FF      mov b, [bp + -3] ; $i             
0870   0972 54            add a, b
0871   0973 27            mov b, a
0872   0974 E4            pop a
0873   0975             ; END TERMS        
0874   0975 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0875   0979 E4            pop a         
0876   097A 26 00 00      mov b, $0        
0877   097D FD 3E         mov [d], bl
0878   097F             ;; return dest; 
0879   097F 2C 07 00      mov b, [bp + 7] ; $dest             
0880   0982 F9            leave
0881   0983 09            ret
0882   0984             
0883   0984             strlen:
0884   0984 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0885   0987             ; $length 
0886   0987 52 02 00      sub sp, 2
0887   098A             ;; length = 0; 
0888   098A FA FF FF      lea d, [bp + -1] ; $length         
0889   098D 26 00 00      mov b, $0        
0890   0990 FD 43         mov [d], b
0891   0992             ;; while (str[length] != 0) { 
0892   0992             _while8_cond:
0893   0992 FA 05 00      lea d, [bp + 5] ; $str
0894   0995 FD 2A         mov d, [d]
0895   0997 D7            push a         
0896   0998 2C FF FF      mov b, [bp + -1] ; $length                     
0897   099B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0898   099F E4            pop a
0899   09A0 32            mov bl, [d]
0900   09A1 A7 00         mov bh, 0
0901   09A3             ; START RELATIONAL
0902   09A3 D7            push a
0903   09A4 11            mov a, b
0904   09A5 26 00 00      mov b, $0
0905   09A8 B0            cmp a, b
0906   09A9 FD 72         sneq ; !=
0907   09AB E4            pop a
0908   09AC             ; END RELATIONAL
0909   09AC C0 00 00      cmp b, 0
0910   09AF C6 C3 09      je _while8_exit
0911   09B2             _while8_block:
0912   09B2             ;; length++; 
0913   09B2 2C FF FF      mov b, [bp + -1] ; $length             
0914   09B5 FD 79         mov g, b
0915   09B7 FD 77         inc b
0916   09B9 FA FF FF      lea d, [bp + -1] ; $length
0917   09BC FD 43         mov [d], b
0918   09BE FD 27         mov b, g
0919   09C0 0A 92 09      jmp _while8_cond
0920   09C3             _while8_exit:
0921   09C3             ;; return length; 
0922   09C3 2C FF FF      mov b, [bp + -1] ; $length             
0923   09C6 F9            leave
0924   09C7 09            ret
0925   09C8             
0926   09C8             va_arg:
0927   09C8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0928   09CB             ; $val 
0929   09CB 52 02 00      sub sp, 2
0930   09CE             ;; if(size == 1){ 
0931   09CE             _if9_cond:
0932   09CE 2C 05 00      mov b, [bp + 5] ; $size             
0933   09D1             ; START RELATIONAL
0934   09D1 D7            push a
0935   09D2 11            mov a, b
0936   09D3 26 01 00      mov b, $1
0937   09D6 B0            cmp a, b
0938   09D7 FD 71         seq ; ==
0939   09D9 E4            pop a
0940   09DA             ; END RELATIONAL
0941   09DA C0 00 00      cmp b, 0
0942   09DD C6 F9 09      je _if9_else
0943   09E0             _if9_true:
0944   09E0             ;; val = *(char*)arg->p; 
0945   09E0 FA FF FF      lea d, [bp + -1] ; $val
0946   09E3 DA            push d
0947   09E4 FA 07 00      lea d, [bp + 7] ; $arg
0948   09E7 FD 2A         mov d, [d]
0949   09E9 58 00 00      add d, 0
0950   09EC FD 14         clb
0951   09EE 2A            mov b, [d]
0952   09EF 74            mov d, b
0953   09F0 32            mov bl, [d]
0954   09F1 A7 00         mov bh, 0
0955   09F3 E7            pop d
0956   09F4 FD 43         mov [d], b
0957   09F6 0A 2E 0A      jmp _if9_exit
0958   09F9             _if9_else:
0959   09F9             ;; if(size == 2){ 
0960   09F9             _if10_cond:
0961   09F9 2C 05 00      mov b, [bp + 5] ; $size             
0962   09FC             ; START RELATIONAL
0963   09FC D7            push a
0964   09FD 11            mov a, b
0965   09FE 26 02 00      mov b, $2
0966   0A01 B0            cmp a, b
0967   0A02 FD 71         seq ; ==
0968   0A04 E4            pop a
0969   0A05             ; END RELATIONAL
0970   0A05 C0 00 00      cmp b, 0
0971   0A08 C6 22 0A      je _if10_else
0972   0A0B             _if10_true:
0973   0A0B             ;; val = *(int*)arg->p; 
0974   0A0B FA FF FF      lea d, [bp + -1] ; $val
0975   0A0E DA            push d
0976   0A0F FA 07 00      lea d, [bp + 7] ; $arg
0977   0A12 FD 2A         mov d, [d]
0978   0A14 58 00 00      add d, 0
0979   0A17 FD 14         clb
0980   0A19 2A            mov b, [d]
0981   0A1A 74            mov d, b
0982   0A1B 2A            mov b, [d]
0983   0A1C E7            pop d
0984   0A1D FD 43         mov [d], b
0985   0A1F 0A 2E 0A      jmp _if10_exit
0986   0A22             _if10_else:
0987   0A22             ;; print("Unknown type size in va_arg() call. Size needs to be either 1 or 2."); 
0988   0A22 26 3E 28      mov b, __s4 ; "Unknown type size in va_arg() call. Size needs to be either 1 or 2."
0989   0A25 FD AB         swp b
0990   0A27 D8            push b
0991   0A28 07 17 10      call print
0992   0A2B 51 02 00      add sp, 2
0993   0A2E             _if10_exit:
0994   0A2E             _if9_exit:
0995   0A2E             ;; arg->p = arg->p + size; 
0996   0A2E FA 07 00      lea d, [bp + 7] ; $arg
0997   0A31 FD 2A         mov d, [d]
0998   0A33 58 00 00      add d, 0
0999   0A36 FD 14         clb
1000   0A38 DA            push d
1001   0A39 FA 07 00      lea d, [bp + 7] ; $arg
1002   0A3C FD 2A         mov d, [d]
1003   0A3E 58 00 00      add d, 0
1004   0A41 FD 14         clb
1005   0A43 2A            mov b, [d]
1006   0A44             ; START TERMS
1007   0A44 D7            push a
1008   0A45 11            mov a, b
1009   0A46 2C 05 00      mov b, [bp + 5] ; $size             
1010   0A49 54            add a, b
1011   0A4A 27            mov b, a
1012   0A4B E4            pop a
1013   0A4C             ; END TERMS
1014   0A4C E7            pop d
1015   0A4D FD 43         mov [d], b
1016   0A4F             ;; return val; 
1017   0A4F 2C FF FF      mov b, [bp + -1] ; $val             
1018   0A52 F9            leave
1019   0A53 09            ret
1020   0A54             
1021   0A54             printf:
1022   0A54 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1023   0A57             ; $p 
1024   0A57             ; $fp 
1025   0A57             ; $i 
1026   0A57 52 06 00      sub sp, 6
1027   0A5A             ;; fp = format; 
1028   0A5A FA FD FF      lea d, [bp + -3] ; $fp         
1029   0A5D 2C 05 00      mov b, [bp + 5] ; $format                     
1030   0A60 FD 43         mov [d], b
1031   0A62             ;; p = &format; 
1032   0A62 FA FF FF      lea d, [bp + -1] ; $p
1033   0A65 DA            push d
1034   0A66 FA 05 00      lea d, [bp + 5] ; $format
1035   0A69 2D            mov b, d
1036   0A6A E7            pop d
1037   0A6B FD 43         mov [d], b
1038   0A6D             ;; for(;;){ 
1039   0A6D             _for11_init:
1040   0A6D             _for11_cond:
1041   0A6D             _for11_block:
1042   0A6D             ;; if(!*fp) break; 
1043   0A6D             _if12_cond:
1044   0A6D 2C FD FF      mov b, [bp + -3] ; $fp             
1045   0A70 74            mov d, b
1046   0A71 32            mov bl, [d]
1047   0A72 A7 00         mov bh, 0
1048   0A74 C0 00 00      cmp b, 0
1049   0A77 FD 71         seq ; !
1050   0A79 C0 00 00      cmp b, 0
1051   0A7C C6 85 0A      je _if12_exit
1052   0A7F             _if12_true:
1053   0A7F             ;; break; 
1054   0A7F 0A B5 0B      jmp _for11_exit ; for break
1055   0A82 0A 85 0A      jmp _if12_exit
1056   0A85             _if12_exit:
1057   0A85             ;; if(*fp == '%'){ 
1058   0A85             _if13_cond:
1059   0A85 2C FD FF      mov b, [bp + -3] ; $fp             
1060   0A88 74            mov d, b
1061   0A89 32            mov bl, [d]
1062   0A8A A7 00         mov bh, 0
1063   0A8C             ; START RELATIONAL
1064   0A8C D7            push a
1065   0A8D 11            mov a, b
1066   0A8E 26 25 00      mov b, $25
1067   0A91 B0            cmp a, b
1068   0A92 FD 71         seq ; ==
1069   0A94 E4            pop a
1070   0A95             ; END RELATIONAL
1071   0A95 C0 00 00      cmp b, 0
1072   0A98 C6 96 0B      je _if13_else
1073   0A9B             _if13_true:
1074   0A9B             ;; fp++; 
1075   0A9B 2C FD FF      mov b, [bp + -3] ; $fp             
1076   0A9E FD 79         mov g, b
1077   0AA0 FD 77         inc b
1078   0AA2 FA FD FF      lea d, [bp + -3] ; $fp
1079   0AA5 FD 43         mov [d], b
1080   0AA7 FD 27         mov b, g
1081   0AA9             ;; switch(*fp){ 
1082   0AA9             _switch14_expr:
1083   0AA9 2C FD FF      mov b, [bp + -3] ; $fp             
1084   0AAC 74            mov d, b
1085   0AAD 32            mov bl, [d]
1086   0AAE A7 00         mov bh, 0
1087   0AB0             _switch14_comparisons:
1088   0AB0 C1 64         cmp bl, $64
1089   0AB2 C6 D4 0A      je _switch14_case0
1090   0AB5 C1 69         cmp bl, $69
1091   0AB7 C6 D4 0A      je _switch14_case1
1092   0ABA C1 75         cmp bl, $75
1093   0ABC C6 F5 0A      je _switch14_case2
1094   0ABF C1 78         cmp bl, $78
1095   0AC1 C6 16 0B      je _switch14_case3
1096   0AC4 C1 63         cmp bl, $63
1097   0AC6 C6 37 0B      je _switch14_case4
1098   0AC9 C1 73         cmp bl, $73
1099   0ACB C6 58 0B      je _switch14_case5
1100   0ACE 0A 79 0B      jmp _switch14_default
1101   0AD1 0A 85 0B      jmp _switch14_exit
1102   0AD4             _switch14_case0:
1103   0AD4             _switch14_case1:
1104   0AD4             ;; p = p - 2; 
1105   0AD4 FA FF FF      lea d, [bp + -1] ; $p         
1106   0AD7 2C FF FF      mov b, [bp + -1] ; $p             
1107   0ADA             ; START TERMS
1108   0ADA D7            push a
1109   0ADB 11            mov a, b
1110   0ADC 26 02 00      mov b, $2
1111   0ADF 60            sub a, b
1112   0AE0 27            mov b, a
1113   0AE1 E4            pop a
1114   0AE2             ; END TERMS        
1115   0AE2 FD 43         mov [d], b
1116   0AE4             ;; prints(*(int*)p); 
1117   0AE4 2C FF FF      mov b, [bp + -1] ; $p             
1118   0AE7 74            mov d, b
1119   0AE8 2A            mov b, [d]
1120   0AE9 FD AB         swp b
1121   0AEB D8            push b
1122   0AEC 07 1B 0E      call prints
1123   0AEF 51 02 00      add sp, 2
1124   0AF2             ;; break; 
1125   0AF2 0A 85 0B      jmp _switch14_exit ; case break
1126   0AF5             _switch14_case2:
1127   0AF5             ;; p = p - 2; 
1128   0AF5 FA FF FF      lea d, [bp + -1] ; $p         
1129   0AF8 2C FF FF      mov b, [bp + -1] ; $p             
1130   0AFB             ; START TERMS
1131   0AFB D7            push a
1132   0AFC 11            mov a, b
1133   0AFD 26 02 00      mov b, $2
1134   0B00 60            sub a, b
1135   0B01 27            mov b, a
1136   0B02 E4            pop a
1137   0B03             ; END TERMS        
1138   0B03 FD 43         mov [d], b
1139   0B05             ;; printu(*(unsigned int*)p); 
1140   0B05 2C FF FF      mov b, [bp + -1] ; $p             
1141   0B08 74            mov d, b
1142   0B09 2A            mov b, [d]
1143   0B0A FD AB         swp b
1144   0B0C D8            push b
1145   0B0D 07 FB 0E      call printu
1146   0B10 51 02 00      add sp, 2
1147   0B13             ;; break; 
1148   0B13 0A 85 0B      jmp _switch14_exit ; case break
1149   0B16             _switch14_case3:
1150   0B16             ;; p = p - 2; 
1151   0B16 FA FF FF      lea d, [bp + -1] ; $p         
1152   0B19 2C FF FF      mov b, [bp + -1] ; $p             
1153   0B1C             ; START TERMS
1154   0B1C D7            push a
1155   0B1D 11            mov a, b
1156   0B1E 26 02 00      mov b, $2
1157   0B21 60            sub a, b
1158   0B22 27            mov b, a
1159   0B23 E4            pop a
1160   0B24             ; END TERMS        
1161   0B24 FD 43         mov [d], b
1162   0B26             ;; printx16(*(unsigned int*)p); 
1163   0B26 2C FF FF      mov b, [bp + -1] ; $p             
1164   0B29 74            mov d, b
1165   0B2A 2A            mov b, [d]
1166   0B2B FD AB         swp b
1167   0B2D D8            push b
1168   0B2E 07 B7 0B      call printx16
1169   0B31 51 02 00      add sp, 2
1170   0B34             ;; break; 
1171   0B34 0A 85 0B      jmp _switch14_exit ; case break
1172   0B37             _switch14_case4:
1173   0B37             ;; p = p - 2; 
1174   0B37 FA FF FF      lea d, [bp + -1] ; $p         
1175   0B3A 2C FF FF      mov b, [bp + -1] ; $p             
1176   0B3D             ; START TERMS
1177   0B3D D7            push a
1178   0B3E 11            mov a, b
1179   0B3F 26 02 00      mov b, $2
1180   0B42 60            sub a, b
1181   0B43 27            mov b, a
1182   0B44 E4            pop a
1183   0B45             ; END TERMS        
1184   0B45 FD 43         mov [d], b
1185   0B47             ;; putchar(*(char*)p); 
1186   0B47 2C FF FF      mov b, [bp + -1] ; $p             
1187   0B4A 74            mov d, b
1188   0B4B 32            mov bl, [d]
1189   0B4C A7 00         mov bh, 0
1190   0B4E DD            push bl
1191   0B4F 07 D2 0F      call putchar
1192   0B52 51 01 00      add sp, 1
1193   0B55             ;; break; 
1194   0B55 0A 85 0B      jmp _switch14_exit ; case break
1195   0B58             _switch14_case5:
1196   0B58             ;; p = p - 2; 
1197   0B58 FA FF FF      lea d, [bp + -1] ; $p         
1198   0B5B 2C FF FF      mov b, [bp + -1] ; $p             
1199   0B5E             ; START TERMS
1200   0B5E D7            push a
1201   0B5F 11            mov a, b
1202   0B60 26 02 00      mov b, $2
1203   0B63 60            sub a, b
1204   0B64 27            mov b, a
1205   0B65 E4            pop a
1206   0B66             ; END TERMS        
1207   0B66 FD 43         mov [d], b
1208   0B68             ;; print(*(char**)p); 
1209   0B68 2C FF FF      mov b, [bp + -1] ; $p             
1210   0B6B 74            mov d, b
1211   0B6C 2A            mov b, [d]
1212   0B6D FD AB         swp b
1213   0B6F D8            push b
1214   0B70 07 17 10      call print
1215   0B73 51 02 00      add sp, 2
1216   0B76             ;; break; 
1217   0B76 0A 85 0B      jmp _switch14_exit ; case break
1218   0B79             _switch14_default:
1219   0B79             ;; print("Error: Unknown argument type.\n"); 
1220   0B79 26 82 28      mov b, __s5 ; "Error: Unknown argument type.\n"
1221   0B7C FD AB         swp b
1222   0B7E D8            push b
1223   0B7F 07 17 10      call print
1224   0B82 51 02 00      add sp, 2
1225   0B85             _switch14_exit:
1226   0B85             ;; fp++; 
1227   0B85 2C FD FF      mov b, [bp + -3] ; $fp             
1228   0B88 FD 79         mov g, b
1229   0B8A FD 77         inc b
1230   0B8C FA FD FF      lea d, [bp + -3] ; $fp
1231   0B8F FD 43         mov [d], b
1232   0B91 FD 27         mov b, g
1233   0B93 0A B2 0B      jmp _if13_exit
1234   0B96             _if13_else:
1235   0B96             ;; putchar(*fp); 
1236   0B96 2C FD FF      mov b, [bp + -3] ; $fp             
1237   0B99 74            mov d, b
1238   0B9A 32            mov bl, [d]
1239   0B9B A7 00         mov bh, 0
1240   0B9D DD            push bl
1241   0B9E 07 D2 0F      call putchar
1242   0BA1 51 01 00      add sp, 1
1243   0BA4             ;; fp++; 
1244   0BA4 2C FD FF      mov b, [bp + -3] ; $fp             
1245   0BA7 FD 79         mov g, b
1246   0BA9 FD 77         inc b
1247   0BAB FA FD FF      lea d, [bp + -3] ; $fp
1248   0BAE FD 43         mov [d], b
1249   0BB0 FD 27         mov b, g
1250   0BB2             _if13_exit:
1251   0BB2             _for11_update:
1252   0BB2 0A 6D 0A      jmp _for11_cond
1253   0BB5             _for11_exit:
1254   0BB5 F9            leave
1255   0BB6 09            ret
1256   0BB7             
1257   0BB7             printx16:
1258   0BB7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1259   0BBA             
1260   0BBA             ; --- BEGIN INLINE ASM BLOCK
1261   0BBA 2C 05 00      mov b, [bp + 5] ; $hex             
1262   0BBD 07 5F 13      call print_u16x
1263   0BC0             ; --- END INLINE ASM BLOCK
1264   0BC0             
1265   0BC0 F9            leave
1266   0BC1 09            ret
1267   0BC2             
1268   0BC2             printx8:
1269   0BC2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1270   0BC5             
1271   0BC5             ; --- BEGIN INLINE ASM BLOCK
1272   0BC5 FA 05 00      lea d, [bp + 5] ; $hex
1273   0BC8 32            mov bl, [d]
1274   0BC9 07 A3 13      call print_u8x
1275   0BCC             ; --- END INLINE ASM BLOCK
1276   0BCC             
1277   0BCC F9            leave
1278   0BCD 09            ret
1279   0BCE             
1280   0BCE             hex_to_int:
1281   0BCE F8 00 00      enter 0 ; (push bp; mov bp, sp)
1282   0BD1             ; $value 
1283   0BD1 10 00 00      mov a, $0
1284   0BD4 45 FF FF      mov [bp + -1], a
1285   0BD7             ; $i 
1286   0BD7             ; $hex_char 
1287   0BD7             ; $len 
1288   0BD7 52 07 00      sub sp, 7
1289   0BDA             ;; len = strlen(hex_string); 
1290   0BDA FA FA FF      lea d, [bp + -6] ; $len
1291   0BDD DA            push d
1292   0BDE 2C 05 00      mov b, [bp + 5] ; $hex_string             
1293   0BE1 FD AB         swp b
1294   0BE3 D8            push b
1295   0BE4 07 84 09      call strlen
1296   0BE7 51 02 00      add sp, 2
1297   0BEA E7            pop d
1298   0BEB FD 43         mov [d], b
1299   0BED             ;; for (i = 0; i < len; i++) { 
1300   0BED             _for15_init:
1301   0BED FA FD FF      lea d, [bp + -3] ; $i         
1302   0BF0 26 00 00      mov b, $0        
1303   0BF3 FD 43         mov [d], b
1304   0BF5             _for15_cond:
1305   0BF5 2C FD FF      mov b, [bp + -3] ; $i             
1306   0BF8             ; START RELATIONAL
1307   0BF8 D7            push a
1308   0BF9 11            mov a, b
1309   0BFA 2C FA FF      mov b, [bp + -6] ; $len             
1310   0BFD B0            cmp a, b
1311   0BFE FD 73         slt ; < 
1312   0C00 E4            pop a
1313   0C01             ; END RELATIONAL
1314   0C01 C0 00 00      cmp b, 0
1315   0C04 C6 F5 0C      je _for15_exit
1316   0C07             _for15_block:
1317   0C07             ;; hex_char = hex_string[i]; 
1318   0C07 FA FC FF      lea d, [bp + -4] ; $hex_char
1319   0C0A DA            push d
1320   0C0B FA 05 00      lea d, [bp + 5] ; $hex_string
1321   0C0E FD 2A         mov d, [d]
1322   0C10 D7            push a         
1323   0C11 2C FD FF      mov b, [bp + -3] ; $i                     
1324   0C14 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1325   0C18 E4            pop a
1326   0C19 32            mov bl, [d]
1327   0C1A A7 00         mov bh, 0
1328   0C1C E7            pop d
1329   0C1D FD 3E         mov [d], bl
1330   0C1F             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1331   0C1F             _if16_cond:
1332   0C1F 34 FC FF      mov bl, [bp + -4] ; $hex_char
1333   0C22 A7 00         mov bh, 0             
1334   0C24             ; START RELATIONAL
1335   0C24 D7            push a
1336   0C25 11            mov a, b
1337   0C26 26 61 00      mov b, $61
1338   0C29 B0            cmp a, b
1339   0C2A FD 80         sge ; >=
1340   0C2C E4            pop a
1341   0C2D             ; END RELATIONAL
1342   0C2D D7            push a
1343   0C2E 11            mov a, b
1344   0C2F 34 FC FF      mov bl, [bp + -4] ; $hex_char
1345   0C32 A7 00         mov bh, 0             
1346   0C34             ; START RELATIONAL
1347   0C34 D7            push a
1348   0C35 11            mov a, b
1349   0C36 26 66 00      mov b, $66
1350   0C39 B0            cmp a, b
1351   0C3A FD 74         sle ; <=
1352   0C3C E4            pop a
1353   0C3D             ; END RELATIONAL
1354   0C3D FD A7         sand a, b ; &&
1355   0C3F E4            pop a
1356   0C40 C0 00 00      cmp b, 0
1357   0C43 C6 70 0C      je _if16_else
1358   0C46             _if16_true:
1359   0C46             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1360   0C46 FA FF FF      lea d, [bp + -1] ; $value         
1361   0C49 2C FF FF      mov b, [bp + -1] ; $value             
1362   0C4C             ; START FACTORS
1363   0C4C D7            push a
1364   0C4D 11            mov a, b
1365   0C4E 26 10 00      mov b, $10
1366   0C51 AC            mul a, b ; *
1367   0C52 11            mov a, b
1368   0C53 27            mov b, a
1369   0C54 E4            pop a
1370   0C55             ; END FACTORS
1371   0C55             ; START TERMS
1372   0C55 D7            push a
1373   0C56 11            mov a, b
1374   0C57 34 FC FF      mov bl, [bp + -4] ; $hex_char
1375   0C5A A7 00         mov bh, 0             
1376   0C5C             ; START TERMS
1377   0C5C D7            push a
1378   0C5D 11            mov a, b
1379   0C5E 26 61 00      mov b, $61
1380   0C61 60            sub a, b
1381   0C62 26 0A 00      mov b, $a
1382   0C65 54            add a, b
1383   0C66 27            mov b, a
1384   0C67 E4            pop a
1385   0C68             ; END TERMS
1386   0C68 54            add a, b
1387   0C69 27            mov b, a
1388   0C6A E4            pop a
1389   0C6B             ; END TERMS        
1390   0C6B FD 43         mov [d], b
1391   0C6D 0A E4 0C      jmp _if16_exit
1392   0C70             _if16_else:
1393   0C70             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1394   0C70             _if17_cond:
1395   0C70 34 FC FF      mov bl, [bp + -4] ; $hex_char
1396   0C73 A7 00         mov bh, 0             
1397   0C75             ; START RELATIONAL
1398   0C75 D7            push a
1399   0C76 11            mov a, b
1400   0C77 26 41 00      mov b, $41
1401   0C7A B0            cmp a, b
1402   0C7B FD 80         sge ; >=
1403   0C7D E4            pop a
1404   0C7E             ; END RELATIONAL
1405   0C7E D7            push a
1406   0C7F 11            mov a, b
1407   0C80 34 FC FF      mov bl, [bp + -4] ; $hex_char
1408   0C83 A7 00         mov bh, 0             
1409   0C85             ; START RELATIONAL
1410   0C85 D7            push a
1411   0C86 11            mov a, b
1412   0C87 26 46 00      mov b, $46
1413   0C8A B0            cmp a, b
1414   0C8B FD 74         sle ; <=
1415   0C8D E4            pop a
1416   0C8E             ; END RELATIONAL
1417   0C8E FD A7         sand a, b ; &&
1418   0C90 E4            pop a
1419   0C91 C0 00 00      cmp b, 0
1420   0C94 C6 C1 0C      je _if17_else
1421   0C97             _if17_true:
1422   0C97             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1423   0C97 FA FF FF      lea d, [bp + -1] ; $value         
1424   0C9A 2C FF FF      mov b, [bp + -1] ; $value             
1425   0C9D             ; START FACTORS
1426   0C9D D7            push a
1427   0C9E 11            mov a, b
1428   0C9F 26 10 00      mov b, $10
1429   0CA2 AC            mul a, b ; *
1430   0CA3 11            mov a, b
1431   0CA4 27            mov b, a
1432   0CA5 E4            pop a
1433   0CA6             ; END FACTORS
1434   0CA6             ; START TERMS
1435   0CA6 D7            push a
1436   0CA7 11            mov a, b
1437   0CA8 34 FC FF      mov bl, [bp + -4] ; $hex_char
1438   0CAB A7 00         mov bh, 0             
1439   0CAD             ; START TERMS
1440   0CAD D7            push a
1441   0CAE 11            mov a, b
1442   0CAF 26 41 00      mov b, $41
1443   0CB2 60            sub a, b
1444   0CB3 26 0A 00      mov b, $a
1445   0CB6 54            add a, b
1446   0CB7 27            mov b, a
1447   0CB8 E4            pop a
1448   0CB9             ; END TERMS
1449   0CB9 54            add a, b
1450   0CBA 27            mov b, a
1451   0CBB E4            pop a
1452   0CBC             ; END TERMS        
1453   0CBC FD 43         mov [d], b
1454   0CBE 0A E4 0C      jmp _if17_exit
1455   0CC1             _if17_else:
1456   0CC1             ;; value = (value * 16) + (hex_char - '0'); 
1457   0CC1 FA FF FF      lea d, [bp + -1] ; $value         
1458   0CC4 2C FF FF      mov b, [bp + -1] ; $value             
1459   0CC7             ; START FACTORS
1460   0CC7 D7            push a
1461   0CC8 11            mov a, b
1462   0CC9 26 10 00      mov b, $10
1463   0CCC AC            mul a, b ; *
1464   0CCD 11            mov a, b
1465   0CCE 27            mov b, a
1466   0CCF E4            pop a
1467   0CD0             ; END FACTORS
1468   0CD0             ; START TERMS
1469   0CD0 D7            push a
1470   0CD1 11            mov a, b
1471   0CD2 34 FC FF      mov bl, [bp + -4] ; $hex_char
1472   0CD5 A7 00         mov bh, 0             
1473   0CD7             ; START TERMS
1474   0CD7 D7            push a
1475   0CD8 11            mov a, b
1476   0CD9 26 30 00      mov b, $30
1477   0CDC 60            sub a, b
1478   0CDD 27            mov b, a
1479   0CDE E4            pop a
1480   0CDF             ; END TERMS
1481   0CDF 54            add a, b
1482   0CE0 27            mov b, a
1483   0CE1 E4            pop a
1484   0CE2             ; END TERMS        
1485   0CE2 FD 43         mov [d], b
1486   0CE4             _if17_exit:
1487   0CE4             _if16_exit:
1488   0CE4             _for15_update:
1489   0CE4 2C FD FF      mov b, [bp + -3] ; $i             
1490   0CE7 FD 79         mov g, b
1491   0CE9 FD 77         inc b
1492   0CEB FA FD FF      lea d, [bp + -3] ; $i
1493   0CEE FD 43         mov [d], b
1494   0CF0 FD 27         mov b, g
1495   0CF2 0A F5 0B      jmp _for15_cond
1496   0CF5             _for15_exit:
1497   0CF5             ;; return value; 
1498   0CF5 2C FF FF      mov b, [bp + -1] ; $value             
1499   0CF8 F9            leave
1500   0CF9 09            ret
1501   0CFA             
1502   0CFA             atoi:
1503   0CFA F8 00 00      enter 0 ; (push bp; mov bp, sp)
1504   0CFD             ; $result 
1505   0CFD 10 00 00      mov a, $0
1506   0D00 45 FF FF      mov [bp + -1], a
1507   0D03             ; $sign 
1508   0D03 10 01 00      mov a, $1
1509   0D06 45 FD FF      mov [bp + -3], a
1510   0D09 52 04 00      sub sp, 4
1511   0D0C             ;; while (*str == ' ') str++; 
1512   0D0C             _while18_cond:
1513   0D0C 2C 05 00      mov b, [bp + 5] ; $str             
1514   0D0F 74            mov d, b
1515   0D10 32            mov bl, [d]
1516   0D11 A7 00         mov bh, 0
1517   0D13             ; START RELATIONAL
1518   0D13 D7            push a
1519   0D14 11            mov a, b
1520   0D15 26 20 00      mov b, $20
1521   0D18 B0            cmp a, b
1522   0D19 FD 71         seq ; ==
1523   0D1B E4            pop a
1524   0D1C             ; END RELATIONAL
1525   0D1C C0 00 00      cmp b, 0
1526   0D1F C6 33 0D      je _while18_exit
1527   0D22             _while18_block:
1528   0D22             ;; str++; 
1529   0D22 2C 05 00      mov b, [bp + 5] ; $str             
1530   0D25 FD 79         mov g, b
1531   0D27 FD 77         inc b
1532   0D29 FA 05 00      lea d, [bp + 5] ; $str
1533   0D2C FD 43         mov [d], b
1534   0D2E FD 27         mov b, g
1535   0D30 0A 0C 0D      jmp _while18_cond
1536   0D33             _while18_exit:
1537   0D33             ;; if (*str == '-' || *str == '+') { 
1538   0D33             _if19_cond:
1539   0D33 2C 05 00      mov b, [bp + 5] ; $str             
1540   0D36 74            mov d, b
1541   0D37 32            mov bl, [d]
1542   0D38 A7 00         mov bh, 0
1543   0D3A             ; START RELATIONAL
1544   0D3A D7            push a
1545   0D3B 11            mov a, b
1546   0D3C 26 2D 00      mov b, $2d
1547   0D3F B0            cmp a, b
1548   0D40 FD 71         seq ; ==
1549   0D42 E4            pop a
1550   0D43             ; END RELATIONAL
1551   0D43 D7            push a
1552   0D44 11            mov a, b
1553   0D45 2C 05 00      mov b, [bp + 5] ; $str             
1554   0D48 74            mov d, b
1555   0D49 32            mov bl, [d]
1556   0D4A A7 00         mov bh, 0
1557   0D4C             ; START RELATIONAL
1558   0D4C D7            push a
1559   0D4D 11            mov a, b
1560   0D4E 26 2B 00      mov b, $2b
1561   0D51 B0            cmp a, b
1562   0D52 FD 71         seq ; ==
1563   0D54 E4            pop a
1564   0D55             ; END RELATIONAL
1565   0D55 FD A8         sor a, b ; ||
1566   0D57 E4            pop a
1567   0D58 C0 00 00      cmp b, 0
1568   0D5B C6 92 0D      je _if19_exit
1569   0D5E             _if19_true:
1570   0D5E             ;; if (*str == '-') sign = -1; 
1571   0D5E             _if20_cond:
1572   0D5E 2C 05 00      mov b, [bp + 5] ; $str             
1573   0D61 74            mov d, b
1574   0D62 32            mov bl, [d]
1575   0D63 A7 00         mov bh, 0
1576   0D65             ; START RELATIONAL
1577   0D65 D7            push a
1578   0D66 11            mov a, b
1579   0D67 26 2D 00      mov b, $2d
1580   0D6A B0            cmp a, b
1581   0D6B FD 71         seq ; ==
1582   0D6D E4            pop a
1583   0D6E             ; END RELATIONAL
1584   0D6E C0 00 00      cmp b, 0
1585   0D71 C6 81 0D      je _if20_exit
1586   0D74             _if20_true:
1587   0D74             ;; sign = -1; 
1588   0D74 FA FD FF      lea d, [bp + -3] ; $sign         
1589   0D77 26 01 00      mov b, $1
1590   0D7A FD 97         neg b        
1591   0D7C FD 43         mov [d], b
1592   0D7E 0A 81 0D      jmp _if20_exit
1593   0D81             _if20_exit:
1594   0D81             ;; str++; 
1595   0D81 2C 05 00      mov b, [bp + 5] ; $str             
1596   0D84 FD 79         mov g, b
1597   0D86 FD 77         inc b
1598   0D88 FA 05 00      lea d, [bp + 5] ; $str
1599   0D8B FD 43         mov [d], b
1600   0D8D FD 27         mov b, g
1601   0D8F 0A 92 0D      jmp _if19_exit
1602   0D92             _if19_exit:
1603   0D92             ;; while (*str >= '0' && *str <= '9') { 
1604   0D92             _while21_cond:
1605   0D92 2C 05 00      mov b, [bp + 5] ; $str             
1606   0D95 74            mov d, b
1607   0D96 32            mov bl, [d]
1608   0D97 A7 00         mov bh, 0
1609   0D99             ; START RELATIONAL
1610   0D99 D7            push a
1611   0D9A 11            mov a, b
1612   0D9B 26 30 00      mov b, $30
1613   0D9E B0            cmp a, b
1614   0D9F FD 80         sge ; >=
1615   0DA1 E4            pop a
1616   0DA2             ; END RELATIONAL
1617   0DA2 D7            push a
1618   0DA3 11            mov a, b
1619   0DA4 2C 05 00      mov b, [bp + 5] ; $str             
1620   0DA7 74            mov d, b
1621   0DA8 32            mov bl, [d]
1622   0DA9 A7 00         mov bh, 0
1623   0DAB             ; START RELATIONAL
1624   0DAB D7            push a
1625   0DAC 11            mov a, b
1626   0DAD 26 39 00      mov b, $39
1627   0DB0 B0            cmp a, b
1628   0DB1 FD 74         sle ; <=
1629   0DB3 E4            pop a
1630   0DB4             ; END RELATIONAL
1631   0DB4 FD A7         sand a, b ; &&
1632   0DB6 E4            pop a
1633   0DB7 C0 00 00      cmp b, 0
1634   0DBA C6 F5 0D      je _while21_exit
1635   0DBD             _while21_block:
1636   0DBD             ;; result = result * 10 + (*str - '0'); 
1637   0DBD FA FF FF      lea d, [bp + -1] ; $result
1638   0DC0 DA            push d
1639   0DC1 2C FF FF      mov b, [bp + -1] ; $result             
1640   0DC4             ; START FACTORS
1641   0DC4 D7            push a
1642   0DC5 11            mov a, b
1643   0DC6 26 0A 00      mov b, $a
1644   0DC9 AC            mul a, b ; *
1645   0DCA 11            mov a, b
1646   0DCB 27            mov b, a
1647   0DCC E4            pop a
1648   0DCD             ; END FACTORS
1649   0DCD             ; START TERMS
1650   0DCD D7            push a
1651   0DCE 11            mov a, b
1652   0DCF 2C 05 00      mov b, [bp + 5] ; $str             
1653   0DD2 74            mov d, b
1654   0DD3 32            mov bl, [d]
1655   0DD4 A7 00         mov bh, 0
1656   0DD6             ; START TERMS
1657   0DD6 D7            push a
1658   0DD7 11            mov a, b
1659   0DD8 26 30 00      mov b, $30
1660   0DDB 60            sub a, b
1661   0DDC 27            mov b, a
1662   0DDD E4            pop a
1663   0DDE             ; END TERMS
1664   0DDE 54            add a, b
1665   0DDF 27            mov b, a
1666   0DE0 E4            pop a
1667   0DE1             ; END TERMS
1668   0DE1 E7            pop d
1669   0DE2 FD 43         mov [d], b
1670   0DE4             ;; str++; 
1671   0DE4 2C 05 00      mov b, [bp + 5] ; $str             
1672   0DE7 FD 79         mov g, b
1673   0DE9 FD 77         inc b
1674   0DEB FA 05 00      lea d, [bp + 5] ; $str
1675   0DEE FD 43         mov [d], b
1676   0DF0 FD 27         mov b, g
1677   0DF2 0A 92 0D      jmp _while21_cond
1678   0DF5             _while21_exit:
1679   0DF5             ;; return sign * result; 
1680   0DF5 2C FD FF      mov b, [bp + -3] ; $sign             
1681   0DF8             ; START FACTORS
1682   0DF8 D7            push a
1683   0DF9 11            mov a, b
1684   0DFA 2C FF FF      mov b, [bp + -1] ; $result             
1685   0DFD AC            mul a, b ; *
1686   0DFE 11            mov a, b
1687   0DFF 27            mov b, a
1688   0E00 E4            pop a
1689   0E01             ; END FACTORS
1690   0E01 F9            leave
1691   0E02 09            ret
1692   0E03             
1693   0E03             gets:
1694   0E03 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1695   0E06             
1696   0E06             ; --- BEGIN INLINE ASM BLOCK
1697   0E06 17 05 00      mov a, [bp + 5] ; $s             
1698   0E09 3C            mov d, a
1699   0E0A 07 C4 11      call _gets
1700   0E0D             ; --- END INLINE ASM BLOCK
1701   0E0D             
1702   0E0D             ;; return strlen(s); 
1703   0E0D 2C 05 00      mov b, [bp + 5] ; $s             
1704   0E10 FD AB         swp b
1705   0E12 D8            push b
1706   0E13 07 84 09      call strlen
1707   0E16 51 02 00      add sp, 2
1708   0E19 F9            leave
1709   0E1A 09            ret
1710   0E1B             
1711   0E1B             prints:
1712   0E1B F8 00 00      enter 0 ; (push bp; mov bp, sp)
1713   0E1E             ; $digits 
1714   0E1E             ; $i 
1715   0E1E 10 00 00      mov a, $0
1716   0E21 45 FA FF      mov [bp + -6], a
1717   0E24 52 07 00      sub sp, 7
1718   0E27             ;; if (num < 0) { 
1719   0E27             _if22_cond:
1720   0E27 2C 05 00      mov b, [bp + 5] ; $num             
1721   0E2A             ; START RELATIONAL
1722   0E2A D7            push a
1723   0E2B 11            mov a, b
1724   0E2C 26 00 00      mov b, $0
1725   0E2F B0            cmp a, b
1726   0E30 FD 73         slt ; < 
1727   0E32 E4            pop a
1728   0E33             ; END RELATIONAL
1729   0E33 C0 00 00      cmp b, 0
1730   0E36 C6 50 0E      je _if22_else
1731   0E39             _if22_true:
1732   0E39             ;; putchar('-'); 
1733   0E39 26 2D 00      mov b, $2d
1734   0E3C DD            push bl
1735   0E3D 07 D2 0F      call putchar
1736   0E40 51 01 00      add sp, 1
1737   0E43             ;; num = -num; 
1738   0E43 FA 05 00      lea d, [bp + 5] ; $num         
1739   0E46 2C 05 00      mov b, [bp + 5] ; $num             
1740   0E49 FD 97         neg b        
1741   0E4B FD 43         mov [d], b
1742   0E4D 0A 71 0E      jmp _if22_exit
1743   0E50             _if22_else:
1744   0E50             ;; if (num == 0) { 
1745   0E50             _if23_cond:
1746   0E50 2C 05 00      mov b, [bp + 5] ; $num             
1747   0E53             ; START RELATIONAL
1748   0E53 D7            push a
1749   0E54 11            mov a, b
1750   0E55 26 00 00      mov b, $0
1751   0E58 B0            cmp a, b
1752   0E59 FD 71         seq ; ==
1753   0E5B E4            pop a
1754   0E5C             ; END RELATIONAL
1755   0E5C C0 00 00      cmp b, 0
1756   0E5F C6 71 0E      je _if23_exit
1757   0E62             _if23_true:
1758   0E62             ;; putchar('0'); 
1759   0E62 26 30 00      mov b, $30
1760   0E65 DD            push bl
1761   0E66 07 D2 0F      call putchar
1762   0E69 51 01 00      add sp, 1
1763   0E6C             ;; return; 
1764   0E6C F9            leave
1765   0E6D 09            ret
1766   0E6E 0A 71 0E      jmp _if23_exit
1767   0E71             _if23_exit:
1768   0E71             _if22_exit:
1769   0E71             ;; while (num > 0) { 
1770   0E71             _while24_cond:
1771   0E71 2C 05 00      mov b, [bp + 5] ; $num             
1772   0E74             ; START RELATIONAL
1773   0E74 D7            push a
1774   0E75 11            mov a, b
1775   0E76 26 00 00      mov b, $0
1776   0E79 B0            cmp a, b
1777   0E7A FD 7F         sgt ; >
1778   0E7C E4            pop a
1779   0E7D             ; END RELATIONAL
1780   0E7D C0 00 00      cmp b, 0
1781   0E80 C6 C3 0E      je _while24_exit
1782   0E83             _while24_block:
1783   0E83             ;; digits[i] = '0' + (num % 10); 
1784   0E83 FA FC FF      lea d, [bp + -4] ; $digits
1785   0E86 D7            push a         
1786   0E87 2C FA FF      mov b, [bp + -6] ; $i                     
1787   0E8A 5A            add d, b
1788   0E8B E4            pop a         
1789   0E8C 26 30 00      mov b, $30
1790   0E8F             ; START TERMS
1791   0E8F D7            push a
1792   0E90 11            mov a, b
1793   0E91 2C 05 00      mov b, [bp + 5] ; $num             
1794   0E94             ; START FACTORS
1795   0E94 D7            push a
1796   0E95 11            mov a, b
1797   0E96 26 0A 00      mov b, $a
1798   0E99 AE            div a, b ; 
1799   0E9A 11            mov a, b
1800   0E9B 27            mov b, a
1801   0E9C E4            pop a
1802   0E9D             ; END FACTORS
1803   0E9D 54            add a, b
1804   0E9E 27            mov b, a
1805   0E9F E4            pop a
1806   0EA0             ; END TERMS        
1807   0EA0 FD 3E         mov [d], bl
1808   0EA2             ;; num = num / 10; 
1809   0EA2 FA 05 00      lea d, [bp + 5] ; $num         
1810   0EA5 2C 05 00      mov b, [bp + 5] ; $num             
1811   0EA8             ; START FACTORS
1812   0EA8 D7            push a
1813   0EA9 11            mov a, b
1814   0EAA 26 0A 00      mov b, $a
1815   0EAD AE            div a, b
1816   0EAE 27            mov b, a
1817   0EAF E4            pop a
1818   0EB0             ; END FACTORS        
1819   0EB0 FD 43         mov [d], b
1820   0EB2             ;; i++; 
1821   0EB2 2C FA FF      mov b, [bp + -6] ; $i             
1822   0EB5 FD 79         mov g, b
1823   0EB7 FD 77         inc b
1824   0EB9 FA FA FF      lea d, [bp + -6] ; $i
1825   0EBC FD 43         mov [d], b
1826   0EBE FD 27         mov b, g
1827   0EC0 0A 71 0E      jmp _while24_cond
1828   0EC3             _while24_exit:
1829   0EC3             ;; while (i > 0) { 
1830   0EC3             _while25_cond:
1831   0EC3 2C FA FF      mov b, [bp + -6] ; $i             
1832   0EC6             ; START RELATIONAL
1833   0EC6 D7            push a
1834   0EC7 11            mov a, b
1835   0EC8 26 00 00      mov b, $0
1836   0ECB B0            cmp a, b
1837   0ECC FD 7F         sgt ; >
1838   0ECE E4            pop a
1839   0ECF             ; END RELATIONAL
1840   0ECF C0 00 00      cmp b, 0
1841   0ED2 C6 F9 0E      je _while25_exit
1842   0ED5             _while25_block:
1843   0ED5             ;; i--; 
1844   0ED5 2C FA FF      mov b, [bp + -6] ; $i             
1845   0ED8 FD 79         mov g, b
1846   0EDA FD 7D         dec b
1847   0EDC FA FA FF      lea d, [bp + -6] ; $i
1848   0EDF FD 43         mov [d], b
1849   0EE1 FD 27         mov b, g
1850   0EE3             ;; putchar(digits[i]); 
1851   0EE3 FA FC FF      lea d, [bp + -4] ; $digits
1852   0EE6 D7            push a         
1853   0EE7 2C FA FF      mov b, [bp + -6] ; $i                     
1854   0EEA 5A            add d, b
1855   0EEB E4            pop a
1856   0EEC 32            mov bl, [d]
1857   0EED A7 00         mov bh, 0
1858   0EEF DD            push bl
1859   0EF0 07 D2 0F      call putchar
1860   0EF3 51 01 00      add sp, 1
1861   0EF6 0A C3 0E      jmp _while25_cond
1862   0EF9             _while25_exit:
1863   0EF9 F9            leave
1864   0EFA 09            ret
1865   0EFB             
1866   0EFB             printu:
1867   0EFB F8 00 00      enter 0 ; (push bp; mov bp, sp)
1868   0EFE             ; $digits 
1869   0EFE             ; $i 
1870   0EFE 52 07 00      sub sp, 7
1871   0F01             ;; i = 0; 
1872   0F01 FA FA FF      lea d, [bp + -6] ; $i         
1873   0F04 26 00 00      mov b, $0        
1874   0F07 FD 43         mov [d], b
1875   0F09             ;; if(num == 0){ 
1876   0F09             _if26_cond:
1877   0F09 2C 05 00      mov b, [bp + 5] ; $num             
1878   0F0C             ; START RELATIONAL
1879   0F0C D7            push a
1880   0F0D 11            mov a, b
1881   0F0E 26 00 00      mov b, $0
1882   0F11 B0            cmp a, b
1883   0F12 FD 71         seq ; ==
1884   0F14 E4            pop a
1885   0F15             ; END RELATIONAL
1886   0F15 C0 00 00      cmp b, 0
1887   0F18 C6 2A 0F      je _if26_exit
1888   0F1B             _if26_true:
1889   0F1B             ;; putchar('0'); 
1890   0F1B 26 30 00      mov b, $30
1891   0F1E DD            push bl
1892   0F1F 07 D2 0F      call putchar
1893   0F22 51 01 00      add sp, 1
1894   0F25             ;; return; 
1895   0F25 F9            leave
1896   0F26 09            ret
1897   0F27 0A 2A 0F      jmp _if26_exit
1898   0F2A             _if26_exit:
1899   0F2A             ;; while (num > 0) { 
1900   0F2A             _while27_cond:
1901   0F2A 2C 05 00      mov b, [bp + 5] ; $num             
1902   0F2D             ; START RELATIONAL
1903   0F2D D7            push a
1904   0F2E 11            mov a, b
1905   0F2F 26 00 00      mov b, $0
1906   0F32 B0            cmp a, b
1907   0F33 FD 81         sgu ; > (unsigned)
1908   0F35 E4            pop a
1909   0F36             ; END RELATIONAL
1910   0F36 C0 00 00      cmp b, 0
1911   0F39 C6 7C 0F      je _while27_exit
1912   0F3C             _while27_block:
1913   0F3C             ;; digits[i] = '0' + (num % 10); 
1914   0F3C FA FC FF      lea d, [bp + -4] ; $digits
1915   0F3F D7            push a         
1916   0F40 2C FA FF      mov b, [bp + -6] ; $i                     
1917   0F43 5A            add d, b
1918   0F44 E4            pop a         
1919   0F45 26 30 00      mov b, $30
1920   0F48             ; START TERMS
1921   0F48 D7            push a
1922   0F49 11            mov a, b
1923   0F4A 2C 05 00      mov b, [bp + 5] ; $num             
1924   0F4D             ; START FACTORS
1925   0F4D D7            push a
1926   0F4E 11            mov a, b
1927   0F4F 26 0A 00      mov b, $a
1928   0F52 AE            div a, b ; 
1929   0F53 11            mov a, b
1930   0F54 27            mov b, a
1931   0F55 E4            pop a
1932   0F56             ; END FACTORS
1933   0F56 54            add a, b
1934   0F57 27            mov b, a
1935   0F58 E4            pop a
1936   0F59             ; END TERMS        
1937   0F59 FD 3E         mov [d], bl
1938   0F5B             ;; num = num / 10; 
1939   0F5B FA 05 00      lea d, [bp + 5] ; $num         
1940   0F5E 2C 05 00      mov b, [bp + 5] ; $num             
1941   0F61             ; START FACTORS
1942   0F61 D7            push a
1943   0F62 11            mov a, b
1944   0F63 26 0A 00      mov b, $a
1945   0F66 AE            div a, b
1946   0F67 27            mov b, a
1947   0F68 E4            pop a
1948   0F69             ; END FACTORS        
1949   0F69 FD 43         mov [d], b
1950   0F6B             ;; i++; 
1951   0F6B 2C FA FF      mov b, [bp + -6] ; $i             
1952   0F6E FD 79         mov g, b
1953   0F70 FD 77         inc b
1954   0F72 FA FA FF      lea d, [bp + -6] ; $i
1955   0F75 FD 43         mov [d], b
1956   0F77 FD 27         mov b, g
1957   0F79 0A 2A 0F      jmp _while27_cond
1958   0F7C             _while27_exit:
1959   0F7C             ;; while (i > 0) { 
1960   0F7C             _while28_cond:
1961   0F7C 2C FA FF      mov b, [bp + -6] ; $i             
1962   0F7F             ; START RELATIONAL
1963   0F7F D7            push a
1964   0F80 11            mov a, b
1965   0F81 26 00 00      mov b, $0
1966   0F84 B0            cmp a, b
1967   0F85 FD 7F         sgt ; >
1968   0F87 E4            pop a
1969   0F88             ; END RELATIONAL
1970   0F88 C0 00 00      cmp b, 0
1971   0F8B C6 B2 0F      je _while28_exit
1972   0F8E             _while28_block:
1973   0F8E             ;; i--; 
1974   0F8E 2C FA FF      mov b, [bp + -6] ; $i             
1975   0F91 FD 79         mov g, b
1976   0F93 FD 7D         dec b
1977   0F95 FA FA FF      lea d, [bp + -6] ; $i
1978   0F98 FD 43         mov [d], b
1979   0F9A FD 27         mov b, g
1980   0F9C             ;; putchar(digits[i]); 
1981   0F9C FA FC FF      lea d, [bp + -4] ; $digits
1982   0F9F D7            push a         
1983   0FA0 2C FA FF      mov b, [bp + -6] ; $i                     
1984   0FA3 5A            add d, b
1985   0FA4 E4            pop a
1986   0FA5 32            mov bl, [d]
1987   0FA6 A7 00         mov bh, 0
1988   0FA8 DD            push bl
1989   0FA9 07 D2 0F      call putchar
1990   0FAC 51 01 00      add sp, 1
1991   0FAF 0A 7C 0F      jmp _while28_cond
1992   0FB2             _while28_exit:
1993   0FB2 F9            leave
1994   0FB3 09            ret
1995   0FB4             
1996   0FB4             rand:
1997   0FB4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1998   0FB7             ; $sec 
1999   0FB7 52 01 00      sub sp, 1
2000   0FBA             
2001   0FBA             ; --- BEGIN INLINE ASM BLOCK
2002   0FBA 19 00         mov al, 0
2003   0FBC 05 01         syscall sys_rtc					
2004   0FBE 1A            mov al, ah
2005   0FBF 20 00 00      mov al, [bp + 0] ; $sec
2006   0FC2                         
2007   0FC2             ; --- END INLINE ASM BLOCK
2008   0FC2             
2009   0FC2             ;; return sec; 
2010   0FC2 34 00 00      mov bl, [bp + 0] ; $sec
2011   0FC5 A7 00         mov bh, 0             
2012   0FC7 F9            leave
2013   0FC8 09            ret
2014   0FC9             
2015   0FC9             date:
2016   0FC9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2017   0FCC             
2018   0FCC             ; --- BEGIN INLINE ASM BLOCK
2019   0FCC 19 00         mov al, 0 
2020   0FCE 05 07         syscall sys_datetime
2021   0FD0             ; --- END INLINE ASM BLOCK
2022   0FD0             
2023   0FD0 F9            leave
2024   0FD1 09            ret
2025   0FD2             
2026   0FD2             putchar:
2027   0FD2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2028   0FD5             
2029   0FD5             ; --- BEGIN INLINE ASM BLOCK
2030   0FD5 20 05 00      mov al, [bp + 5] ; $c
2031   0FD8                         
2032   0FD8 23            mov ah, al
2033   0FD9 07 BD 11      call _putchar
2034   0FDC             ; --- END INLINE ASM BLOCK
2035   0FDC             
2036   0FDC F9            leave
2037   0FDD 09            ret
2038   0FDE             
2039   0FDE             getchar:
2040   0FDE F8 00 00      enter 0 ; (push bp; mov bp, sp)
2041   0FE1             ; $c 
2042   0FE1 52 01 00      sub sp, 1
2043   0FE4             
2044   0FE4             ; --- BEGIN INLINE ASM BLOCK
2045   0FE4 07 B6 11      call getch
2046   0FE7 1A            mov al, ah
2047   0FE8 FA 00 00      lea d, [bp + 0] ; $c
2048   0FEB 3E            mov [d], al
2049   0FEC             ; --- END INLINE ASM BLOCK
2050   0FEC             
2051   0FEC             ;; return c; 
2052   0FEC 34 00 00      mov bl, [bp + 0] ; $c
2053   0FEF A7 00         mov bh, 0             
2054   0FF1 F9            leave
2055   0FF2 09            ret
2056   0FF3             
2057   0FF3             scann:
2058   0FF3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2059   0FF6             ; $m 
2060   0FF6 52 02 00      sub sp, 2
2061   0FF9             
2062   0FF9             ; --- BEGIN INLINE ASM BLOCK
2063   0FF9 07 01 14      call scan_u16d
2064   0FFC FA FF FF      lea d, [bp + -1] ; $m
2065   0FFF 43            mov [d], a
2066   1000             ; --- END INLINE ASM BLOCK
2067   1000             
2068   1000             ;; return m; 
2069   1000 2C FF FF      mov b, [bp + -1] ; $m             
2070   1003 F9            leave
2071   1004 09            ret
2072   1005             
2073   1005             puts:
2074   1005 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2075   1008             
2076   1008             ; --- BEGIN INLINE ASM BLOCK
2077   1008 17 05 00      mov a, [bp + 5] ; $s             
2078   100B 3C            mov d, a
2079   100C 07 07 13      call _puts
2080   100F 22 0A         mov ah, $0A
2081   1011 19 00         mov al, 0
2082   1013 05 03         syscall sys_io
2083   1015             ; --- END INLINE ASM BLOCK
2084   1015             
2085   1015 F9            leave
2086   1016 09            ret
2087   1017             
2088   1017             print:
2089   1017 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2090   101A             
2091   101A             ; --- BEGIN INLINE ASM BLOCK
2092   101A 17 05 00      mov a, [bp + 5] ; $s             
2093   101D 3C            mov d, a
2094   101E 07 07 13      call _puts
2095   1021             ; --- END INLINE ASM BLOCK
2096   1021             
2097   1021 F9            leave
2098   1022 09            ret
2099   1023             
2100   1023             loadfile:
2101   1023 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2102   1026             
2103   1026             ; --- BEGIN INLINE ASM BLOCK
2104   1026 17 05 00      mov a, [bp + 5] ; $destination             
2105   1029 4F            mov di, a
2106   102A FA 07 00      lea d, [bp + 7] ; $filename
2107   102D FD 2A         mov d, [d]
2108   102F 19 14         mov al, 20
2109   1031 05 04         syscall sys_filesystem
2110   1033             ; --- END INLINE ASM BLOCK
2111   1033             
2112   1033 F9            leave
2113   1034 09            ret
2114   1035             
2115   1035             create_file:
2116   1035 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2117   1038 F9            leave
2118   1039 09            ret
2119   103A             
2120   103A             delete_file:
2121   103A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2122   103D             
2123   103D             ; --- BEGIN INLINE ASM BLOCK
2124   103D FA 05 00      lea d, [bp + 5] ; $filename
2125   1040 19 0A         mov al, 10
2126   1042 05 04         syscall sys_filesystem
2127   1044             ; --- END INLINE ASM BLOCK
2128   1044             
2129   1044 F9            leave
2130   1045 09            ret
2131   1046             
2132   1046             fopen:
2133   1046 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2134   1049 F9            leave
2135   104A 09            ret
2136   104B             
2137   104B             fclose:
2138   104B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2139   104E F9            leave
2140   104F 09            ret
2141   1050             
2142   1050             alloc:
2143   1050 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2144   1053             ;; heap_top = heap_top + bytes; 
2145   1053 3B C3 28      mov d, _heap_top ; $heap_top         
2146   1056 29 C3 28      mov b, [_heap_top] ; $heap_top           
2147   1059             ; START TERMS
2148   1059 D7            push a
2149   105A 11            mov a, b
2150   105B 2C 05 00      mov b, [bp + 5] ; $bytes             
2151   105E 54            add a, b
2152   105F 27            mov b, a
2153   1060 E4            pop a
2154   1061             ; END TERMS        
2155   1061 FD 43         mov [d], b
2156   1063             ;; return heap_top - bytes; 
2157   1063 29 C3 28      mov b, [_heap_top] ; $heap_top           
2158   1066             ; START TERMS
2159   1066 D7            push a
2160   1067 11            mov a, b
2161   1068 2C 05 00      mov b, [bp + 5] ; $bytes             
2162   106B 60            sub a, b
2163   106C 27            mov b, a
2164   106D E4            pop a
2165   106E             ; END TERMS
2166   106E F9            leave
2167   106F 09            ret
2168   1070             
2169   1070             free:
2170   1070 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2171   1073             ;; return heap_top = heap_top - bytes; 
2172   1073 3B C3 28      mov d, _heap_top ; $heap_top         
2173   1076 29 C3 28      mov b, [_heap_top] ; $heap_top           
2174   1079             ; START TERMS
2175   1079 D7            push a
2176   107A 11            mov a, b
2177   107B 2C 05 00      mov b, [bp + 5] ; $bytes             
2178   107E 60            sub a, b
2179   107F 27            mov b, a
2180   1080 E4            pop a
2181   1081             ; END TERMS        
2182   1081 FD 43         mov [d], b
2183   1083 F9            leave
2184   1084 09            ret
2185   1085             
2186   1085             exit:
2187   1085 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2188   1088             
2189   1088             ; --- BEGIN INLINE ASM BLOCK
2190   1088 05 0B         syscall sys_terminate_proc
2191   108A             ; --- END INLINE ASM BLOCK
2192   108A             
2193   108A F9            leave
2194   108B 09            ret
2195   108C             
2196   108C             load_hex:
2197   108C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2198   108F             ; $temp 
2199   108F 52 02 00      sub sp, 2
2200   1092             ;; temp = alloc(32768); 
2201   1092 FA FF FF      lea d, [bp + -1] ; $temp
2202   1095 DA            push d
2203   1096 26 00 80      mov b, $8000
2204   1099 FD AB         swp b
2205   109B D8            push b
2206   109C 07 50 10      call alloc
2207   109F 51 02 00      add sp, 2
2208   10A2 E7            pop d
2209   10A3 FD 43         mov [d], b
2210   10A5             
2211   10A5             ; --- BEGIN INLINE ASM BLOCK
2212   10A5               
2213   10A5               
2214   10A5               
2215   10A5               
2216   10A5               
2217   10A5             _load_hex:
2218   10A5 D7            push a
2219   10A6 D8            push b
2220   10A7 DA            push d
2221   10A8 E2            push si
2222   10A9 E3            push di
2223   10AA 52 00 80      sub sp, $8000      
2224   10AD 38 00 00      mov c, 0
2225   10B0 48            mov a, sp
2226   10B1 77            inc a
2227   10B2 3C            mov d, a          
2228   10B3 07 C4 11      call _gets        
2229   10B6 4D            mov si, a
2230   10B7             __load_hex_loop:
2231   10B7 F6            lodsb             
2232   10B8 B9 00         cmp al, 0         
2233   10BA C6 C8 10      jz __load_hex_ret
2234   10BD 36            mov bh, al
2235   10BE F6            lodsb
2236   10BF 2F            mov bl, al
2237   10C0 07 7A 11      call _atoi        
2238   10C3 F7            stosb             
2239   10C4 78            inc c
2240   10C5 0A B7 10      jmp __load_hex_loop
2241   10C8             __load_hex_ret:
2242   10C8 51 00 80      add sp, $8000
2243   10CB F0            pop di
2244   10CC EF            pop si
2245   10CD E7            pop d
2246   10CE E5            pop b
2247   10CF E4            pop a
2248   10D0             ; --- END INLINE ASM BLOCK
2249   10D0             
2250   10D0 F9            leave
2251   10D1 09            ret
2252   10D2             
2253   10D2             include_stdio_asm:
2254   10D2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2255   10D5             
2256   10D5             ; --- BEGIN INLINE ASM BLOCK
2257   10D5             .include "lib/stdio.asm"
0001+  10D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  10D5             ; stdio.s
0003+  10D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  10D5             .include "lib/string.asm"
0001++ 10D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 10D5             ; string.s
0003++ 10D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 10D5             
0005++ 10D5             
0006++ 10D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 10D5             ; _strrev
0008++ 10D5             ; reverse a string
0009++ 10D5             ; D = string address
0010++ 10D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 10D5             ; 01234
0012++ 10D5             _strrev:
0013++ 10D5 4B          	pusha
0014++ 10D6 07 1C 11    	call _strlen	; length in C
0015++ 10D9 12          	mov a, c
0016++ 10DA AF 01 00    	cmp a, 1
0017++ 10DD D0 F7 10    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 10E0 7D          	dec a
0019++ 10E1 FD 4E       	mov si, d	; beginning of string
0020++ 10E3 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 10E5 59          	add d, a	; end of string
0022++ 10E6 12          	mov a, c
0023++ 10E7 FD 9B       	shr a		; divide by 2
0024++ 10E9 39          	mov c, a	; C now counts the steps
0025++ 10EA             _strrev_L0:
0026++ 10EA 32          	mov bl, [d]	; save load right-side char into BL
0027++ 10EB F6          	lodsb		; load left-side char into AL; increase SI
0028++ 10EC 3E          	mov [d], al	; store left char into right side
0029++ 10ED 1B          	mov al, bl
0030++ 10EE F7          	stosb		; store right-side char into left-side; increase DI
0031++ 10EF 7E          	dec c
0032++ 10F0 7F          	dec d
0033++ 10F1 C2 00 00    	cmp c, 0
0034++ 10F4 C7 EA 10    	jne _strrev_L0
0035++ 10F7             _strrev_end:
0036++ 10F7 4C          	popa
0037++ 10F8 09          	ret
0038++ 10F9             	
0039++ 10F9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 10F9             ; _strchr
0041++ 10F9             ; search string in D for char in AL
0042++ 10F9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 10F9             _strchr:
0044++ 10F9             _strchr_L0:
0045++ 10F9 32          	mov bl, [d]
0046++ 10FA C1 00       	cmp bl, 0
0047++ 10FC C6 07 11    	je _strchr_end
0048++ 10FF BA          	cmp al, bl
0049++ 1100 C6 07 11    	je _strchr_end
0050++ 1103 79          	inc d
0051++ 1104 0A F9 10    	jmp _strchr_L0
0052++ 1107             _strchr_end:
0053++ 1107 1B          	mov al, bl
0054++ 1108 09          	ret
0055++ 1109             
0056++ 1109             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1109             ; _strstr
0058++ 1109             ; find sub-string
0059++ 1109             ; str1 in SI
0060++ 1109             ; str2 in DI
0061++ 1109             ; SI points to end of source string
0062++ 1109             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1109             _strstr:
0064++ 1109 DB          	push al
0065++ 110A DA          	push d
0066++ 110B E3          	push di
0067++ 110C             _strstr_loop:
0068++ 110C F3          	cmpsb					; compare a byte of the strings
0069++ 110D C7 18 11    	jne _strstr_ret
0070++ 1110 FC 00 00    	lea d, [di + 0]
0071++ 1113 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1115 C7 0C 11    	jne _strstr_loop				; equal chars but not at end
0073++ 1118             _strstr_ret:
0074++ 1118 F0          	pop di
0075++ 1119 E7          	pop d
0076++ 111A E8          	pop al
0077++ 111B 09          	ret
0078++ 111C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 111C             ; length of null terminated string
0080++ 111C             ; result in C
0081++ 111C             ; pointer in D
0082++ 111C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 111C             _strlen:
0084++ 111C DA          	push d
0085++ 111D 38 00 00    	mov c, 0
0086++ 1120             _strlen_L1:
0087++ 1120 BD 00       	cmp byte [d], 0
0088++ 1122 C6 2A 11    	je _strlen_ret
0089++ 1125 79          	inc d
0090++ 1126 78          	inc c
0091++ 1127 0A 20 11    	jmp _strlen_L1
0092++ 112A             _strlen_ret:
0093++ 112A E7          	pop d
0094++ 112B 09          	ret
0095++ 112C             
0096++ 112C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 112C             ; STRCMP
0098++ 112C             ; compare two strings
0099++ 112C             ; str1 in SI
0100++ 112C             ; str2 in DI
0101++ 112C             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 112C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 112C             _strcmp:
0104++ 112C DB          	push al
0105++ 112D DA          	push d
0106++ 112E E3          	push di
0107++ 112F E2          	push si
0108++ 1130             _strcmp_loop:
0109++ 1130 F3          	cmpsb					; compare a byte of the strings
0110++ 1131 C7 3C 11    	jne _strcmp_ret
0111++ 1134 FB FF FF    	lea d, [si +- 1]
0112++ 1137 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1139 C7 30 11    	jne _strcmp_loop				; equal chars but not at end
0114++ 113C             _strcmp_ret:
0115++ 113C EF          	pop si
0116++ 113D F0          	pop di
0117++ 113E E7          	pop d
0118++ 113F E8          	pop al
0119++ 1140 09          	ret
0120++ 1141             
0121++ 1141             
0122++ 1141             ; STRCPY
0123++ 1141             ; copy null terminated string from SI to DI
0124++ 1141             ; source in SI
0125++ 1141             ; destination in DI
0126++ 1141             _strcpy:
0127++ 1141 E2          	push si
0128++ 1142 E3          	push di
0129++ 1143 DB          	push al
0130++ 1144             _strcpy_L1:
0131++ 1144 F6          	lodsb
0132++ 1145 F7          	stosb
0133++ 1146 B9 00       	cmp al, 0
0134++ 1148 C7 44 11    	jne _strcpy_L1
0135++ 114B             _strcpy_end:
0136++ 114B E8          	pop al
0137++ 114C F0          	pop di
0138++ 114D EF          	pop si
0139++ 114E 09          	ret
0140++ 114F             
0141++ 114F             ; STRCAT
0142++ 114F             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 114F             ; source in SI
0144++ 114F             ; destination in DI
0145++ 114F             _strcat:
0146++ 114F E2          	push si
0147++ 1150 E3          	push di
0148++ 1151 D7          	push a
0149++ 1152 DA          	push d
0150++ 1153 50          	mov a, di
0151++ 1154 3C          	mov d, a
0152++ 1155             _strcat_goto_end_L1:
0153++ 1155 BD 00       	cmp byte[d], 0
0154++ 1157 C6 5E 11    	je _strcat_start
0155++ 115A 79          	inc d
0156++ 115B 0A 55 11    	jmp _strcat_goto_end_L1
0157++ 115E             _strcat_start:
0158++ 115E FD 50       	mov di, d
0159++ 1160             _strcat_L1:
0160++ 1160 F6          	lodsb
0161++ 1161 F7          	stosb
0162++ 1162 B9 00       	cmp al, 0
0163++ 1164 C7 60 11    	jne _strcat_L1
0164++ 1167             _strcat_end:
0165++ 1167 E7          	pop d
0166++ 1168 E4          	pop a
0167++ 1169 F0          	pop di
0168++ 116A EF          	pop si
0169++ 116B 09          	ret
0170++ 116C             
0171++ 116C             
0005+  116C             
0006+  116C             
0007+  116C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  116C             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0009+  116C             ; ASCII in BL
0010+  116C             ; result in AL
0011+  116C             ; ascii for F = 0100 0110
0012+  116C             ; ascii for 9 = 0011 1001
0013+  116C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  116C             hex_ascii_encode:
0015+  116C 1B            mov al, bl
0016+  116D 93 40         test al, $40        ; test if letter or number
0017+  116F C7 75 11      jnz hex_letter
0018+  1172 87 0F         and al, $0F        ; get number
0019+  1174 09            ret
0020+  1175             hex_letter:
0021+  1175 87 0F         and al, $0F        ; get letter
0022+  1177 6A 09         add al, 9
0023+  1179 09            ret
0024+  117A             
0025+  117A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  117A             ; ATOI
0027+  117A             ; 2 letter hex string in B
0028+  117A             ; 8bit integer returned in AL
0029+  117A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  117A             _atoi:
0031+  117A D8            push b
0032+  117B 07 6C 11      call hex_ascii_encode      ; convert BL to 4bit code in AL
0033+  117E 30            mov bl, bh
0034+  117F DB            push al          ; save a
0035+  1180 07 6C 11      call hex_ascii_encode
0036+  1183 EA            pop bl  
0037+  1184 FD 9E 04      shl al, 4
0038+  1187 8C            or al, bl
0039+  1188 E5            pop b
0040+  1189 09            ret  
0041+  118A             
0042+  118A             
0043+  118A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  118A             ; scanf
0045+  118A             ; no need for explanations!
0046+  118A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  118A             scanf:
0048+  118A 09            ret
0049+  118B             
0050+  118B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  118B             ; ITOA
0052+  118B             ; 8bit value in BL
0053+  118B             ; 2 byte ASCII result in A
0054+  118B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  118B             _itoa:
0056+  118B DA            push d
0057+  118C D8            push b
0058+  118D A7 00         mov bh, 0
0059+  118F FD A4 04      shr bl, 4  
0060+  1192 74            mov d, b
0061+  1193 1F 3B 14      mov al, [d + s_hex_digits]
0062+  1196 23            mov ah, al
0063+  1197               
0064+  1197 E5            pop b
0065+  1198 D8            push b
0066+  1199 A7 00         mov bh, 0
0067+  119B FD 87 0F      and bl, $0F
0068+  119E 74            mov d, b
0069+  119F 1F 3B 14      mov al, [d + s_hex_digits]
0070+  11A2 E5            pop b
0071+  11A3 E7            pop d
0072+  11A4 09            ret
0073+  11A5             
0074+  11A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  11A5             ; HEX STRING TO BINARY
0076+  11A5             ; di = destination address
0077+  11A5             ; si = source
0078+  11A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  11A5             _hex_to_int:
0080+  11A5             _hex_to_int_L1:
0081+  11A5 F6            lodsb          ; load from [SI] to AL
0082+  11A6 B9 00         cmp al, 0        ; check if ASCII 0
0083+  11A8 C6 B5 11      jz _hex_to_int_ret
0084+  11AB 36            mov bh, al
0085+  11AC F6            lodsb
0086+  11AD 2F            mov bl, al
0087+  11AE 07 7A 11      call _atoi        ; convert ASCII byte in B to int (to AL)
0088+  11B1 F7            stosb          ; store AL to [DI]
0089+  11B2 0A A5 11      jmp _hex_to_int_L1
0090+  11B5             _hex_to_int_ret:
0091+  11B5 09            ret    
0092+  11B6             
0093+  11B6             
0094+  11B6             
0095+  11B6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  11B6             ; GETCHAR
0097+  11B6             ; char in ah
0098+  11B6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  11B6             getch:
0100+  11B6 DB            push al
0101+  11B7             getch_retry:
0102+  11B7 19 01         mov al, 1
0103+  11B9 05 03         syscall sys_io      ; receive in AH
0104+  11BB E8            pop al
0105+  11BC 09            ret
0106+  11BD             
0107+  11BD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  11BD             ; PUTCHAR
0109+  11BD             ; char in ah
0110+  11BD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  11BD             _putchar:
0112+  11BD D7            push a
0113+  11BE 19 00         mov al, 0
0114+  11C0 05 03         syscall sys_io      ; char in AH
0115+  11C2 E4            pop a
0116+  11C3 09            ret
0117+  11C4             
0118+  11C4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  11C4             ;; INPUT A STRING
0120+  11C4             ;; terminates with null
0121+  11C4             ;; pointer in D
0122+  11C4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  11C4             _gets:
0124+  11C4 D7            push a
0125+  11C5 DA            push d
0126+  11C6             _gets_loop:
0127+  11C6 19 01         mov al, 1
0128+  11C8 05 03         syscall sys_io      ; receive in AH
0129+  11CA B9 00         cmp al, 0        ; check error code (AL)
0130+  11CC C6 C6 11      je _gets_loop      ; if no char received, retry
0131+  11CF             
0132+  11CF 76 1B         cmp ah, 27
0133+  11D1 C6 F2 11      je _gets_ansi_esc
0134+  11D4 76 0A         cmp ah, $0A        ; LF
0135+  11D6 C6 5D 12      je _gets_end
0136+  11D9 76 0D         cmp ah, $0D        ; CR
0137+  11DB C6 5D 12      je _gets_end
0138+  11DE 76 5C         cmp ah, $5C        ; '\\'
0139+  11E0 C6 1E 12      je _gets_escape
0140+  11E3               
0141+  11E3 76 08         cmp ah, $08      ; check for backspace
0142+  11E5 C6 EE 11      je _gets_backspace
0143+  11E8             
0144+  11E8 1A            mov al, ah
0145+  11E9 3E            mov [d], al
0146+  11EA 79            inc d
0147+  11EB 0A C6 11      jmp _gets_loop
0148+  11EE             _gets_backspace:
0149+  11EE 7F            dec d
0150+  11EF 0A C6 11      jmp _gets_loop
0151+  11F2             _gets_ansi_esc:
0152+  11F2 19 01         mov al, 1
0153+  11F4 05 03         syscall sys_io        ; receive in AH without echo
0154+  11F6 B9 00         cmp al, 0          ; check error code (AL)
0155+  11F8 C6 F2 11      je _gets_ansi_esc    ; if no char received, retry
0156+  11FB 76 5B         cmp ah, '['
0157+  11FD C7 C6 11      jne _gets_loop
0158+  1200             _gets_ansi_esc_2:
0159+  1200 19 01         mov al, 1
0160+  1202 05 03         syscall sys_io          ; receive in AH without echo
0161+  1204 B9 00         cmp al, 0            ; check error code (AL)
0162+  1206 C6 00 12      je _gets_ansi_esc_2  ; if no char received, retry
0163+  1209 76 44         cmp ah, 'D'
0164+  120B C6 16 12      je _gets_left_arrow
0165+  120E 76 43         cmp ah, 'C'
0166+  1210 C6 1A 12      je _gets_right_arrow
0167+  1213 0A C6 11      jmp _gets_loop
0168+  1216             _gets_left_arrow:
0169+  1216 7F            dec d
0170+  1217 0A C6 11      jmp _gets_loop
0171+  121A             _gets_right_arrow:
0172+  121A 79            inc d
0173+  121B 0A C6 11      jmp _gets_loop
0174+  121E             _gets_escape:
0175+  121E 19 01         mov al, 1
0176+  1220 05 03         syscall sys_io      ; receive in AH
0177+  1222 B9 00         cmp al, 0        ; check error code (AL)
0178+  1224 C6 1E 12      je _gets_escape      ; if no char received, retry
0179+  1227 76 6E         cmp ah, 'n'
0180+  1229 C6 48 12      je _gets_LF
0181+  122C 76 72         cmp ah, 'r'
0182+  122E C6 4F 12      je _gets_CR
0183+  1231 76 30         cmp ah, '0'
0184+  1233 C6 56 12      je _gets_NULL
0185+  1236 76 5C         cmp ah, $5C  ; '\'
0186+  1238 C6 41 12      je _gets_slash
0187+  123B 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0188+  123C 3E            mov [d], al
0189+  123D 79            inc d
0190+  123E 0A C6 11      jmp _gets_loop
0191+  1241             _gets_slash:
0192+  1241 19 5C         mov al, $5C
0193+  1243 3E            mov [d], al
0194+  1244 79            inc d
0195+  1245 0A C6 11      jmp _gets_loop
0196+  1248             _gets_LF:
0197+  1248 19 0A         mov al, $0A
0198+  124A 3E            mov [d], al
0199+  124B 79            inc d
0200+  124C 0A C6 11      jmp _gets_loop
0201+  124F             _gets_CR:
0202+  124F 19 0D         mov al, $0D
0203+  1251 3E            mov [d], al
0204+  1252 79            inc d
0205+  1253 0A C6 11      jmp _gets_loop
0206+  1256             _gets_NULL:
0207+  1256 19 00         mov al, $00
0208+  1258 3E            mov [d], al
0209+  1259 79            inc d
0210+  125A 0A C6 11      jmp _gets_loop
0211+  125D             _gets_end:
0212+  125D 19 00         mov al, 0
0213+  125F 3E            mov [d], al        ; terminate string
0214+  1260 E7            pop d
0215+  1261 E4            pop a
0216+  1262 09            ret
0217+  1263             
0218+  1263             
0219+  1263             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0220+  1263             ;; INPUT TEXT
0221+  1263             ;; terminated with CTRL+D
0222+  1263             ;; pointer in D
0223+  1263             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0224+  1263             _gettxt:
0225+  1263 D7            push a
0226+  1264 DA            push d
0227+  1265             _gettxt_loop:
0228+  1265 19 01         mov al, 1
0229+  1267 05 03         syscall sys_io      ; receive in AH
0230+  1269 B9 00         cmp al, 0        ; check error code (AL)
0231+  126B C6 65 12      je _gettxt_loop    ; if no char received, retry
0232+  126E 76 04         cmp ah, 4      ; EOT
0233+  1270 C6 AE 12      je _gettxt_end
0234+  1273 76 08         cmp ah, $08      ; check for backspace
0235+  1275 C6 AA 12      je _gettxt_backspace
0236+  1278 76 5C         cmp ah, $5C        ; '\'
0237+  127A C6 83 12      je _gettxt_escape
0238+  127D 1A            mov al, ah
0239+  127E 3E            mov [d], al
0240+  127F 79            inc d
0241+  1280 0A 65 12      jmp _gettxt_loop
0242+  1283             _gettxt_escape:
0243+  1283 19 01         mov al, 1
0244+  1285 05 03         syscall sys_io      ; receive in AH
0245+  1287 B9 00         cmp al, 0        ; check error code (AL)
0246+  1289 C6 83 12      je _gettxt_escape    ; if no char received, retry
0247+  128C 76 6E         cmp ah, 'n'
0248+  128E C6 9C 12      je _gettxt_LF
0249+  1291 76 72         cmp ah, 'r'
0250+  1293 C6 A3 12      je _gettxt_CR
0251+  1296 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0252+  1297 3E            mov [d], al
0253+  1298 79            inc d
0254+  1299 0A 65 12      jmp _gettxt_loop
0255+  129C             _gettxt_LF:
0256+  129C 19 0A         mov al, $0A
0257+  129E 3E            mov [d], al
0258+  129F 79            inc d
0259+  12A0 0A 65 12      jmp _gettxt_loop
0260+  12A3             _gettxt_CR:
0261+  12A3 19 0D         mov al, $0D
0262+  12A5 3E            mov [d], al
0263+  12A6 79            inc d
0264+  12A7 0A 65 12      jmp _gettxt_loop
0265+  12AA             _gettxt_backspace:
0266+  12AA 7F            dec d
0267+  12AB 0A 65 12      jmp _gettxt_loop
0268+  12AE             _gettxt_end:
0269+  12AE 19 00         mov al, 0
0270+  12B0 3E            mov [d], al        ; terminate string
0271+  12B1 E7            pop d
0272+  12B2 E4            pop a
0273+  12B3 09            ret
0274+  12B4             
0275+  12B4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  12B4             ; PRINT NEW LINE
0277+  12B4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0278+  12B4             printnl:
0279+  12B4 D7            push a
0280+  12B5 10 00 0A      mov a, $0A00
0281+  12B8 05 03         syscall sys_io
0282+  12BA 10 00 0D      mov a, $0D00
0283+  12BD 05 03         syscall sys_io
0284+  12BF E4            pop a
0285+  12C0 09            ret
0286+  12C1             
0287+  12C1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  12C1             ; _strtoint
0289+  12C1             ; 4 digit hex string number in d
0290+  12C1             ; integer returned in A
0291+  12C1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0292+  12C1             _strtointx:
0293+  12C1 D8            push b
0294+  12C2 32            mov bl, [d]
0295+  12C3 37            mov bh, bl
0296+  12C4 33 01 00      mov bl, [d + 1]
0297+  12C7 07 7A 11      call _atoi        ; convert to int in AL
0298+  12CA 23            mov ah, al        ; move to AH
0299+  12CB 33 02 00      mov bl, [d + 2]
0300+  12CE 37            mov bh, bl
0301+  12CF 33 03 00      mov bl, [d + 3]
0302+  12D2 07 7A 11      call _atoi        ; convert to int in AL
0303+  12D5 E5            pop b
0304+  12D6 09            ret
0305+  12D7             
0306+  12D7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0307+  12D7             ; _strtoint
0308+  12D7             ; 5 digit base10 string number in d
0309+  12D7             ; integer returned in A
0310+  12D7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0311+  12D7             _strtoint:
0312+  12D7 E2            push si
0313+  12D8 D8            push b
0314+  12D9 D9            push c
0315+  12DA DA            push d
0316+  12DB 07 1C 11      call _strlen      ; get string length in C
0317+  12DE 7E            dec c
0318+  12DF FD 4E         mov si, d
0319+  12E1 12            mov a, c
0320+  12E2 FD 99         shl a
0321+  12E4 3B 53 14      mov d, table_power
0322+  12E7 59            add d, a
0323+  12E8 38 00 00      mov c, 0
0324+  12EB             _strtoint_L0:
0325+  12EB F6            lodsb      ; load ASCII to al
0326+  12EC B9 00         cmp al, 0
0327+  12EE C6 01 13      je _strtoint_end
0328+  12F1 6F 30         sub al, $30    ; make into integer
0329+  12F3 22 00         mov ah, 0
0330+  12F5 2A            mov b, [d]
0331+  12F6 AC            mul a, b      ; result in B since it fits in 16bits
0332+  12F7 11            mov a, b
0333+  12F8 28            mov b, c
0334+  12F9 54            add a, b
0335+  12FA 39            mov c, a
0336+  12FB 63 02 00      sub d, 2
0337+  12FE 0A EB 12      jmp _strtoint_L0
0338+  1301             _strtoint_end:
0339+  1301 12            mov a, c
0340+  1302 E7            pop d
0341+  1303 E6            pop c
0342+  1304 E5            pop b
0343+  1305 EF            pop si
0344+  1306 09            ret
0345+  1307             
0346+  1307             
0347+  1307             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0348+  1307             ; PRINT NULL TERMINATED STRING
0349+  1307             ; pointer in D
0350+  1307             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0351+  1307             _puts:
0352+  1307 D7            push a
0353+  1308 DA            push d
0354+  1309             _puts_L1:
0355+  1309 1E            mov al, [d]
0356+  130A B9 00         cmp al, 0
0357+  130C C6 18 13      jz _puts_END
0358+  130F 23            mov ah, al
0359+  1310 19 00         mov al, 0
0360+  1312 05 03         syscall sys_io
0361+  1314 79            inc d
0362+  1315 0A 09 13      jmp _puts_L1
0363+  1318             _puts_END:
0364+  1318 E7            pop d
0365+  1319 E4            pop a
0366+  131A 09            ret
0367+  131B             
0368+  131B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0369+  131B             ; PRINT N SIZE STRING
0370+  131B             ; pointer in D
0371+  131B             ; size in C
0372+  131B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0373+  131B             _putsn:
0374+  131B DB            push al
0375+  131C DA            push d
0376+  131D D9            push c
0377+  131E             _putsn_L0:
0378+  131E 1E            mov al, [d]
0379+  131F 23            mov ah, al
0380+  1320 19 00         mov al, 0
0381+  1322 05 03         syscall sys_io
0382+  1324 79            inc d
0383+  1325 7E            dec c  
0384+  1326 C2 00 00      cmp c, 0
0385+  1329 C7 1E 13      jne _putsn_L0
0386+  132C             _putsn_end:
0387+  132C E6            pop c
0388+  132D E7            pop d
0389+  132E E8            pop al
0390+  132F 09            ret
0391+  1330             
0392+  1330             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0393+  1330             ; print 16bit decimal number
0394+  1330             ; input number in A
0395+  1330             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0396+  1330             print_u16d:
0397+  1330 D7            push a
0398+  1331 D8            push b
0399+  1332 26 10 27      mov b, 10000
0400+  1335 AE            div a, b      ; get 10000's coeff.
0401+  1336 07 58 13      call print_number
0402+  1339 11            mov a, b
0403+  133A 26 E8 03      mov b, 1000
0404+  133D AE            div a, b      ; get 1000's coeff.
0405+  133E 07 58 13      call print_number
0406+  1341 11            mov a, b
0407+  1342 26 64 00      mov b, 100
0408+  1345 AE            div a, b
0409+  1346 07 58 13      call print_number
0410+  1349 11            mov a, b
0411+  134A 26 0A 00      mov b, 10
0412+  134D AE            div a, b
0413+  134E 07 58 13      call print_number
0414+  1351 1B            mov al, bl      ; 1's coeff in bl
0415+  1352 07 58 13      call print_number
0416+  1355 E5            pop b
0417+  1356 E4            pop a
0418+  1357 09            ret
0419+  1358             
0420+  1358             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0421+  1358             ; print AL
0422+  1358             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0423+  1358             print_number:
0424+  1358 6A 30         add al, $30
0425+  135A 23            mov ah, al
0426+  135B 07 BD 11      call _putchar
0427+  135E 09            ret
0428+  135F             
0429+  135F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0430+  135F             ; PRINT 16BIT HEX INTEGER
0431+  135F             ; integer value in reg B
0432+  135F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0433+  135F             print_u16x:
0434+  135F D7            push a
0435+  1360 D8            push b
0436+  1361 DD            push bl
0437+  1362 30            mov bl, bh
0438+  1363 07 8B 11      call _itoa        ; convert bh to char in A
0439+  1366 2F            mov bl, al        ; save al
0440+  1367 19 00         mov al, 0
0441+  1369 05 03         syscall sys_io        ; display AH
0442+  136B 24            mov ah, bl        ; retrieve al
0443+  136C 19 00         mov al, 0
0444+  136E 05 03         syscall sys_io        ; display AL
0445+  1370             
0446+  1370 EA            pop bl
0447+  1371 07 8B 11      call _itoa        ; convert bh to char in A
0448+  1374 2F            mov bl, al        ; save al
0449+  1375 19 00         mov al, 0
0450+  1377 05 03         syscall sys_io        ; display AH
0451+  1379 24            mov ah, bl        ; retrieve al
0452+  137A 19 00         mov al, 0
0453+  137C 05 03         syscall sys_io        ; display AL
0454+  137E             
0455+  137E E5            pop b
0456+  137F E4            pop a
0457+  1380 09            ret
0458+  1381             
0459+  1381             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0460+  1381             ; INPUT 16BIT HEX INTEGER
0461+  1381             ; read 16bit integer into A
0462+  1381             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0463+  1381             scan_u16x:
0464+  1381 F8 10 00      enter 16
0465+  1384 D8            push b
0466+  1385 DA            push d
0467+  1386             
0468+  1386 FA F1 FF      lea d, [bp + -15]
0469+  1389 07 C4 11      call _gets        ; get number
0470+  138C             
0471+  138C 32            mov bl, [d]
0472+  138D 37            mov bh, bl
0473+  138E 33 01 00      mov bl, [d + 1]
0474+  1391 07 7A 11      call _atoi        ; convert to int in AL
0475+  1394 23            mov ah, al        ; move to AH
0476+  1395             
0477+  1395 33 02 00      mov bl, [d + 2]
0478+  1398 37            mov bh, bl
0479+  1399 33 03 00      mov bl, [d + 3]
0480+  139C 07 7A 11      call _atoi        ; convert to int in AL
0481+  139F             
0482+  139F E7            pop d
0483+  13A0 E5            pop b
0484+  13A1 F9            leave
0485+  13A2 09            ret
0486+  13A3             
0487+  13A3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0488+  13A3             ; PRINT 8bit HEX INTEGER
0489+  13A3             ; integer value in reg bl
0490+  13A3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0491+  13A3             print_u8x:
0492+  13A3 D7            push a
0493+  13A4 DD            push bl
0494+  13A5             
0495+  13A5 07 8B 11      call _itoa        ; convert bl to char in A
0496+  13A8 2F            mov bl, al        ; save al
0497+  13A9 19 00         mov al, 0
0498+  13AB 05 03         syscall sys_io        ; display AH
0499+  13AD 24            mov ah, bl        ; retrieve al
0500+  13AE 19 00         mov al, 0
0501+  13B0 05 03         syscall sys_io        ; display AL
0502+  13B2             
0503+  13B2 EA            pop bl
0504+  13B3 E4            pop a
0505+  13B4 09            ret
0506+  13B5             
0507+  13B5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0508+  13B5             ; print 8bit decimal unsigned number
0509+  13B5             ; input number in AL
0510+  13B5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0511+  13B5             print_u8d:
0512+  13B5 D7            push a
0513+  13B6 D8            push b
0514+  13B7             
0515+  13B7 22 00         mov ah, 0
0516+  13B9 26 64 00      mov b, 100
0517+  13BC AE            div a, b
0518+  13BD D8            push b      ; save remainder
0519+  13BE B9 00         cmp al, 0
0520+  13C0 C6 CA 13      je skip100
0521+  13C3 6A 30         add al, $30
0522+  13C5 23            mov ah, al
0523+  13C6 19 00         mov al, 0
0524+  13C8 05 03         syscall sys_io  ; print coeff
0525+  13CA             skip100:
0526+  13CA E4            pop a
0527+  13CB 22 00         mov ah, 0
0528+  13CD 26 0A 00      mov b, 10
0529+  13D0 AE            div a, b
0530+  13D1 D8            push b      ; save remainder
0531+  13D2 B9 00         cmp al, 0
0532+  13D4 C6 DE 13      je skip10
0533+  13D7 6A 30         add al, $30
0534+  13D9 23            mov ah, al
0535+  13DA 19 00         mov al, 0
0536+  13DC 05 03         syscall sys_io  ; print coeff
0537+  13DE             skip10:
0538+  13DE E4            pop a
0539+  13DF 1B            mov al, bl
0540+  13E0 6A 30         add al, $30
0541+  13E2 23            mov ah, al
0542+  13E3 19 00         mov al, 0
0543+  13E5 05 03         syscall sys_io  ; print coeff
0544+  13E7 E5            pop b
0545+  13E8 E4            pop a
0546+  13E9 09            ret
0547+  13EA             
0548+  13EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0549+  13EA             ; INPUT 8BIT HEX INTEGER
0550+  13EA             ; read 8bit integer into AL
0551+  13EA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0552+  13EA             scan_u8x:
0553+  13EA F8 04 00      enter 4
0554+  13ED D8            push b
0555+  13EE DA            push d
0556+  13EF             
0557+  13EF FA FD FF      lea d, [bp + -3]
0558+  13F2 07 C4 11      call _gets        ; get number
0559+  13F5             
0560+  13F5 32            mov bl, [d]
0561+  13F6 37            mov bh, bl
0562+  13F7 33 01 00      mov bl, [d + 1]
0563+  13FA 07 7A 11      call _atoi        ; convert to int in AL
0564+  13FD             
0565+  13FD E7            pop d
0566+  13FE E5            pop b
0567+  13FF F9            leave
0568+  1400 09            ret
0569+  1401             
0570+  1401             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0571+  1401             ; input decimal number
0572+  1401             ; result in A
0573+  1401             ; 655'\0'
0574+  1401             ; low--------high
0575+  1401             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0576+  1401             scan_u16d:
0577+  1401 F8 08 00      enter 8
0578+  1404 E2            push si
0579+  1405 D8            push b
0580+  1406 D9            push c
0581+  1407 DA            push d
0582+  1408 FA F9 FF      lea d, [bp +- 7]
0583+  140B 07 C4 11      call _gets
0584+  140E 07 1C 11      call _strlen      ; get string length in C
0585+  1411 7E            dec c
0586+  1412 FD 4E         mov si, d
0587+  1414 12            mov a, c
0588+  1415 FD 99         shl a
0589+  1417 3B 53 14      mov d, table_power
0590+  141A 59            add d, a
0591+  141B 38 00 00      mov c, 0
0592+  141E             mul_loop:
0593+  141E F6            lodsb      ; load ASCII to al
0594+  141F B9 00         cmp al, 0
0595+  1421 C6 34 14      je mul_exit
0596+  1424 6F 30         sub al, $30    ; make into integer
0597+  1426 22 00         mov ah, 0
0598+  1428 2A            mov b, [d]
0599+  1429 AC            mul a, b      ; result in B since it fits in 16bits
0600+  142A 11            mov a, b
0601+  142B 28            mov b, c
0602+  142C 54            add a, b
0603+  142D 39            mov c, a
0604+  142E 63 02 00      sub d, 2
0605+  1431 0A 1E 14      jmp mul_loop
0606+  1434             mul_exit:
0607+  1434 12            mov a, c
0608+  1435 E7            pop d
0609+  1436 E6            pop c
0610+  1437 E5            pop b
0611+  1438 EF            pop si
0612+  1439 F9            leave
0613+  143A 09            ret
0614+  143B             
0615+  143B             
0616+  143B 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0616+  143F 34 35 36 37 
0616+  1443 38 39 41 42 
0616+  1447 43 44 45 46 
0617+  144B 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0617+  144F 1B 5B 48 00 
0618+  1453             
0619+  1453             table_power:
0620+  1453 01 00         .dw 1
0621+  1455 0A 00         .dw 10
0622+  1457 64 00         .dw 100
0623+  1459 E8 03         .dw 1000
0624+  145B 10 27         .dw 100002258   145D             ; --- END INLINE ASM BLOCK
2259   145D             
2260   145D F9            leave
2261   145E 09            ret
2262   145F             
2263   145F             back:
2264   145F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2265   1462             ; $t 
2266   1462 52 02 00      sub sp, 2
2267   1465             ;; t = token; 
2268   1465 FA FF FF      lea d, [bp + -1] ; $t         
2269   1468 26 2F 25      mov b, _token_data ; $token                   
2270   146B FD 43         mov [d], b
2271   146D             ;; while(*t++) prog--; 
2272   146D             _while29_cond:
2273   146D 2C FF FF      mov b, [bp + -1] ; $t             
2274   1470 FD 79         mov g, b
2275   1472 FD 77         inc b
2276   1474 FA FF FF      lea d, [bp + -1] ; $t
2277   1477 FD 43         mov [d], b
2278   1479 FD 27         mov b, g
2279   147B 74            mov d, b
2280   147C 32            mov bl, [d]
2281   147D A7 00         mov bh, 0
2282   147F C0 00 00      cmp b, 0
2283   1482 C6 96 14      je _while29_exit
2284   1485             _while29_block:
2285   1485             ;; prog--; 
2286   1485 29 2D 25      mov b, [_prog] ; $prog           
2287   1488 FD 79         mov g, b
2288   148A FD 7D         dec b
2289   148C 3B 2D 25      mov d, _prog ; $prog
2290   148F FD 43         mov [d], b
2291   1491 FD 27         mov b, g
2292   1493 0A 6D 14      jmp _while29_cond
2293   1496             _while29_exit:
2294   1496             ;; tok = TOK_UNDEF; 
2295   1496 3B 29 25      mov d, _tok ; $tok         
2296   1499 26 00 00      mov b, 0; TOK_UNDEF        
2297   149C FD 43         mov [d], b
2298   149E             ;; toktype = TYPE_UNDEF; 
2299   149E 3B 2B 25      mov d, _toktype ; $toktype         
2300   14A1 26 00 00      mov b, 0; TYPE_UNDEF        
2301   14A4 FD 43         mov [d], b
2302   14A6             ;; token[0] = '\0'; 
2303   14A6 3B 2F 25      mov d, _token_data ; $token
2304   14A9 D7            push a         
2305   14AA 26 00 00      mov b, $0        
2306   14AD 5A            add d, b
2307   14AE E4            pop a         
2308   14AF 26 00 00      mov b, $0        
2309   14B2 FD 3E         mov [d], bl
2310   14B4 F9            leave
2311   14B5 09            ret
2312   14B6             
2313   14B6             get_path:
2314   14B6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2315   14B9             ; $t 
2316   14B9 52 02 00      sub sp, 2
2317   14BC             ;; *token = '\0'; 
2318   14BC 26 2F 25      mov b, _token_data ; $token           
2319   14BF D8            push b
2320   14C0 26 00 00      mov b, $0
2321   14C3 E7            pop d
2322   14C4 FD 3E         mov [d], bl
2323   14C6             ;; t = token; 
2324   14C6 FA FF FF      lea d, [bp + -1] ; $t         
2325   14C9 26 2F 25      mov b, _token_data ; $token                   
2326   14CC FD 43         mov [d], b
2327   14CE             ;; while(is_space(*prog)) prog++; 
2328   14CE             _while30_cond:
2329   14CE 29 2D 25      mov b, [_prog] ; $prog           
2330   14D1 74            mov d, b
2331   14D2 32            mov bl, [d]
2332   14D3 A7 00         mov bh, 0
2333   14D5 DD            push bl
2334   14D6 07 A7 05      call is_space
2335   14D9 51 01 00      add sp, 1
2336   14DC C0 00 00      cmp b, 0
2337   14DF C6 F3 14      je _while30_exit
2338   14E2             _while30_block:
2339   14E2             ;; prog++; 
2340   14E2 29 2D 25      mov b, [_prog] ; $prog           
2341   14E5 FD 79         mov g, b
2342   14E7 FD 77         inc b
2343   14E9 3B 2D 25      mov d, _prog ; $prog
2344   14EC FD 43         mov [d], b
2345   14EE FD 27         mov b, g
2346   14F0 0A CE 14      jmp _while30_cond
2347   14F3             _while30_exit:
2348   14F3             ;; if(*prog == '\0'){ 
2349   14F3             _if31_cond:
2350   14F3 29 2D 25      mov b, [_prog] ; $prog           
2351   14F6 74            mov d, b
2352   14F7 32            mov bl, [d]
2353   14F8 A7 00         mov bh, 0
2354   14FA             ; START RELATIONAL
2355   14FA D7            push a
2356   14FB 11            mov a, b
2357   14FC 26 00 00      mov b, $0
2358   14FF B0            cmp a, b
2359   1500 FD 71         seq ; ==
2360   1502 E4            pop a
2361   1503             ; END RELATIONAL
2362   1503 C0 00 00      cmp b, 0
2363   1506 C6 0E 15      je _if31_exit
2364   1509             _if31_true:
2365   1509             ;; return; 
2366   1509 F9            leave
2367   150A 09            ret
2368   150B 0A 0E 15      jmp _if31_exit
2369   150E             _if31_exit:
2370   150E             ;; while( 
2371   150E             _while32_cond:
2372   150E 29 2D 25      mov b, [_prog] ; $prog           
2373   1511 74            mov d, b
2374   1512 32            mov bl, [d]
2375   1513 A7 00         mov bh, 0
2376   1515             ; START RELATIONAL
2377   1515 D7            push a
2378   1516 11            mov a, b
2379   1517 26 61 00      mov b, $61
2380   151A B0            cmp a, b
2381   151B FD 80         sge ; >=
2382   151D E4            pop a
2383   151E             ; END RELATIONAL
2384   151E D7            push a
2385   151F 11            mov a, b
2386   1520 29 2D 25      mov b, [_prog] ; $prog           
2387   1523 74            mov d, b
2388   1524 32            mov bl, [d]
2389   1525 A7 00         mov bh, 0
2390   1527             ; START RELATIONAL
2391   1527 D7            push a
2392   1528 11            mov a, b
2393   1529 26 7A 00      mov b, $7a
2394   152C B0            cmp a, b
2395   152D FD 74         sle ; <=
2396   152F E4            pop a
2397   1530             ; END RELATIONAL
2398   1530 FD A7         sand a, b ; &&
2399   1532 E4            pop a
2400   1533 D7            push a
2401   1534 11            mov a, b
2402   1535 29 2D 25      mov b, [_prog] ; $prog           
2403   1538 74            mov d, b
2404   1539 32            mov bl, [d]
2405   153A A7 00         mov bh, 0
2406   153C             ; START RELATIONAL
2407   153C D7            push a
2408   153D 11            mov a, b
2409   153E 26 41 00      mov b, $41
2410   1541 B0            cmp a, b
2411   1542 FD 80         sge ; >=
2412   1544 E4            pop a
2413   1545             ; END RELATIONAL
2414   1545 D7            push a
2415   1546 11            mov a, b
2416   1547 29 2D 25      mov b, [_prog] ; $prog           
2417   154A 74            mov d, b
2418   154B 32            mov bl, [d]
2419   154C A7 00         mov bh, 0
2420   154E             ; START RELATIONAL
2421   154E D7            push a
2422   154F 11            mov a, b
2423   1550 26 5A 00      mov b, $5a
2424   1553 B0            cmp a, b
2425   1554 FD 74         sle ; <=
2426   1556 E4            pop a
2427   1557             ; END RELATIONAL
2428   1557 FD A7         sand a, b ; &&
2429   1559 E4            pop a
2430   155A FD A8         sor a, b ; ||
2431   155C 11            mov a, b
2432   155D 29 2D 25      mov b, [_prog] ; $prog           
2433   1560 74            mov d, b
2434   1561 32            mov bl, [d]
2435   1562 A7 00         mov bh, 0
2436   1564             ; START RELATIONAL
2437   1564 D7            push a
2438   1565 11            mov a, b
2439   1566 26 30 00      mov b, $30
2440   1569 B0            cmp a, b
2441   156A FD 80         sge ; >=
2442   156C E4            pop a
2443   156D             ; END RELATIONAL
2444   156D D7            push a
2445   156E 11            mov a, b
2446   156F 29 2D 25      mov b, [_prog] ; $prog           
2447   1572 74            mov d, b
2448   1573 32            mov bl, [d]
2449   1574 A7 00         mov bh, 0
2450   1576             ; START RELATIONAL
2451   1576 D7            push a
2452   1577 11            mov a, b
2453   1578 26 39 00      mov b, $39
2454   157B B0            cmp a, b
2455   157C FD 74         sle ; <=
2456   157E E4            pop a
2457   157F             ; END RELATIONAL
2458   157F FD A7         sand a, b ; &&
2459   1581 E4            pop a
2460   1582 FD A8         sor a, b ; ||
2461   1584 11            mov a, b
2462   1585 29 2D 25      mov b, [_prog] ; $prog           
2463   1588 74            mov d, b
2464   1589 32            mov bl, [d]
2465   158A A7 00         mov bh, 0
2466   158C             ; START RELATIONAL
2467   158C D7            push a
2468   158D 11            mov a, b
2469   158E 26 2F 00      mov b, $2f
2470   1591 B0            cmp a, b
2471   1592 FD 71         seq ; ==
2472   1594 E4            pop a
2473   1595             ; END RELATIONAL
2474   1595 FD A8         sor a, b ; ||
2475   1597 11            mov a, b
2476   1598 29 2D 25      mov b, [_prog] ; $prog           
2477   159B 74            mov d, b
2478   159C 32            mov bl, [d]
2479   159D A7 00         mov bh, 0
2480   159F             ; START RELATIONAL
2481   159F D7            push a
2482   15A0 11            mov a, b
2483   15A1 26 5F 00      mov b, $5f
2484   15A4 B0            cmp a, b
2485   15A5 FD 71         seq ; ==
2486   15A7 E4            pop a
2487   15A8             ; END RELATIONAL
2488   15A8 FD A8         sor a, b ; ||
2489   15AA 11            mov a, b
2490   15AB 29 2D 25      mov b, [_prog] ; $prog           
2491   15AE 74            mov d, b
2492   15AF 32            mov bl, [d]
2493   15B0 A7 00         mov bh, 0
2494   15B2             ; START RELATIONAL
2495   15B2 D7            push a
2496   15B3 11            mov a, b
2497   15B4 26 2D 00      mov b, $2d
2498   15B7 B0            cmp a, b
2499   15B8 FD 71         seq ; ==
2500   15BA E4            pop a
2501   15BB             ; END RELATIONAL
2502   15BB FD A8         sor a, b ; ||
2503   15BD 11            mov a, b
2504   15BE 29 2D 25      mov b, [_prog] ; $prog           
2505   15C1 74            mov d, b
2506   15C2 32            mov bl, [d]
2507   15C3 A7 00         mov bh, 0
2508   15C5             ; START RELATIONAL
2509   15C5 D7            push a
2510   15C6 11            mov a, b
2511   15C7 26 2E 00      mov b, $2e
2512   15CA B0            cmp a, b
2513   15CB FD 71         seq ; ==
2514   15CD E4            pop a
2515   15CE             ; END RELATIONAL
2516   15CE FD A8         sor a, b ; ||
2517   15D0 E4            pop a
2518   15D1 C0 00 00      cmp b, 0
2519   15D4 C6 FE 15      je _while32_exit
2520   15D7             _while32_block:
2521   15D7             ;; *t++ = *prog++; 
2522   15D7 2C FF FF      mov b, [bp + -1] ; $t             
2523   15DA FD 79         mov g, b
2524   15DC FD 77         inc b
2525   15DE FA FF FF      lea d, [bp + -1] ; $t
2526   15E1 FD 43         mov [d], b
2527   15E3 FD 27         mov b, g
2528   15E5 D8            push b
2529   15E6 29 2D 25      mov b, [_prog] ; $prog           
2530   15E9 FD 79         mov g, b
2531   15EB FD 77         inc b
2532   15ED 3B 2D 25      mov d, _prog ; $prog
2533   15F0 FD 43         mov [d], b
2534   15F2 FD 27         mov b, g
2535   15F4 74            mov d, b
2536   15F5 32            mov bl, [d]
2537   15F6 A7 00         mov bh, 0
2538   15F8 E7            pop d
2539   15F9 FD 3E         mov [d], bl
2540   15FB 0A 0E 15      jmp _while32_cond
2541   15FE             _while32_exit:
2542   15FE             ;; *t = '\0'; 
2543   15FE 2C FF FF      mov b, [bp + -1] ; $t             
2544   1601 D8            push b
2545   1602 26 00 00      mov b, $0
2546   1605 E7            pop d
2547   1606 FD 3E         mov [d], bl
2548   1608 F9            leave
2549   1609 09            ret
2550   160A             
2551   160A             get:
2552   160A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2553   160D             ; $t 
2554   160D 52 02 00      sub sp, 2
2555   1610             ;; *token = '\0'; 
2556   1610 26 2F 25      mov b, _token_data ; $token           
2557   1613 D8            push b
2558   1614 26 00 00      mov b, $0
2559   1617 E7            pop d
2560   1618 FD 3E         mov [d], bl
2561   161A             ;; tok = 0; 
2562   161A 3B 29 25      mov d, _tok ; $tok         
2563   161D 26 00 00      mov b, $0        
2564   1620 FD 43         mov [d], b
2565   1622             ;; toktype = 0; 
2566   1622 3B 2B 25      mov d, _toktype ; $toktype         
2567   1625 26 00 00      mov b, $0        
2568   1628 FD 43         mov [d], b
2569   162A             ;; t = token; 
2570   162A FA FF FF      lea d, [bp + -1] ; $t         
2571   162D 26 2F 25      mov b, _token_data ; $token                   
2572   1630 FD 43         mov [d], b
2573   1632             ;; while(is_space(*prog)) prog++; 
2574   1632             _while33_cond:
2575   1632 29 2D 25      mov b, [_prog] ; $prog           
2576   1635 74            mov d, b
2577   1636 32            mov bl, [d]
2578   1637 A7 00         mov bh, 0
2579   1639 DD            push bl
2580   163A 07 A7 05      call is_space
2581   163D 51 01 00      add sp, 1
2582   1640 C0 00 00      cmp b, 0
2583   1643 C6 57 16      je _while33_exit
2584   1646             _while33_block:
2585   1646             ;; prog++; 
2586   1646 29 2D 25      mov b, [_prog] ; $prog           
2587   1649 FD 79         mov g, b
2588   164B FD 77         inc b
2589   164D 3B 2D 25      mov d, _prog ; $prog
2590   1650 FD 43         mov [d], b
2591   1652 FD 27         mov b, g
2592   1654 0A 32 16      jmp _while33_cond
2593   1657             _while33_exit:
2594   1657             ;; if(*prog == '\0'){ 
2595   1657             _if34_cond:
2596   1657 29 2D 25      mov b, [_prog] ; $prog           
2597   165A 74            mov d, b
2598   165B 32            mov bl, [d]
2599   165C A7 00         mov bh, 0
2600   165E             ; START RELATIONAL
2601   165E D7            push a
2602   165F 11            mov a, b
2603   1660 26 00 00      mov b, $0
2604   1663 B0            cmp a, b
2605   1664 FD 71         seq ; ==
2606   1666 E4            pop a
2607   1667             ; END RELATIONAL
2608   1667 C0 00 00      cmp b, 0
2609   166A C6 7A 16      je _if34_exit
2610   166D             _if34_true:
2611   166D             ;; toktype = END; 
2612   166D 3B 2B 25      mov d, _toktype ; $toktype         
2613   1670 26 06 00      mov b, 6; END        
2614   1673 FD 43         mov [d], b
2615   1675             ;; return; 
2616   1675 F9            leave
2617   1676 09            ret
2618   1677 0A 7A 16      jmp _if34_exit
2619   167A             _if34_exit:
2620   167A             ;; if(is_digit(*prog)){ 
2621   167A             _if35_cond:
2622   167A 29 2D 25      mov b, [_prog] ; $prog           
2623   167D 74            mov d, b
2624   167E 32            mov bl, [d]
2625   167F A7 00         mov bh, 0
2626   1681 DD            push bl
2627   1682 07 EF 05      call is_digit
2628   1685 51 01 00      add sp, 1
2629   1688 C0 00 00      cmp b, 0
2630   168B C6 E0 16      je _if35_else
2631   168E             _if35_true:
2632   168E             ;; while(is_digit(*prog)){ 
2633   168E             _while36_cond:
2634   168E 29 2D 25      mov b, [_prog] ; $prog           
2635   1691 74            mov d, b
2636   1692 32            mov bl, [d]
2637   1693 A7 00         mov bh, 0
2638   1695 DD            push bl
2639   1696 07 EF 05      call is_digit
2640   1699 51 01 00      add sp, 1
2641   169C C0 00 00      cmp b, 0
2642   169F C6 C9 16      je _while36_exit
2643   16A2             _while36_block:
2644   16A2             ;; *t++ = *prog++; 
2645   16A2 2C FF FF      mov b, [bp + -1] ; $t             
2646   16A5 FD 79         mov g, b
2647   16A7 FD 77         inc b
2648   16A9 FA FF FF      lea d, [bp + -1] ; $t
2649   16AC FD 43         mov [d], b
2650   16AE FD 27         mov b, g
2651   16B0 D8            push b
2652   16B1 29 2D 25      mov b, [_prog] ; $prog           
2653   16B4 FD 79         mov g, b
2654   16B6 FD 77         inc b
2655   16B8 3B 2D 25      mov d, _prog ; $prog
2656   16BB FD 43         mov [d], b
2657   16BD FD 27         mov b, g
2658   16BF 74            mov d, b
2659   16C0 32            mov bl, [d]
2660   16C1 A7 00         mov bh, 0
2661   16C3 E7            pop d
2662   16C4 FD 3E         mov [d], bl
2663   16C6 0A 8E 16      jmp _while36_cond
2664   16C9             _while36_exit:
2665   16C9             ;; *t = '\0'; 
2666   16C9 2C FF FF      mov b, [bp + -1] ; $t             
2667   16CC D8            push b
2668   16CD 26 00 00      mov b, $0
2669   16D0 E7            pop d
2670   16D1 FD 3E         mov [d], bl
2671   16D3             ;; toktype = INTEGER_CONST; 
2672   16D3 3B 2B 25      mov d, _toktype ; $toktype         
2673   16D6 26 04 00      mov b, 4; INTEGER_CONST        
2674   16D9 FD 43         mov [d], b
2675   16DB             ;; return; // return to avoid *t = '\0' line at the end of function 
2676   16DB F9            leave
2677   16DC 09            ret
2678   16DD 0A BD 22      jmp _if35_exit
2679   16E0             _if35_else:
2680   16E0             ;; if(is_alpha(*prog)){ 
2681   16E0             _if37_cond:
2682   16E0 29 2D 25      mov b, [_prog] ; $prog           
2683   16E3 74            mov d, b
2684   16E4 32            mov bl, [d]
2685   16E5 A7 00         mov bh, 0
2686   16E7 DD            push bl
2687   16E8 07 15 06      call is_alpha
2688   16EB 51 01 00      add sp, 1
2689   16EE C0 00 00      cmp b, 0
2690   16F1 C6 57 17      je _if37_else
2691   16F4             _if37_true:
2692   16F4             ;; while(is_alpha(*prog) || is_digit(*prog)){ 
2693   16F4             _while38_cond:
2694   16F4 29 2D 25      mov b, [_prog] ; $prog           
2695   16F7 74            mov d, b
2696   16F8 32            mov bl, [d]
2697   16F9 A7 00         mov bh, 0
2698   16FB DD            push bl
2699   16FC 07 15 06      call is_alpha
2700   16FF 51 01 00      add sp, 1
2701   1702 D7            push a
2702   1703 11            mov a, b
2703   1704 29 2D 25      mov b, [_prog] ; $prog           
2704   1707 74            mov d, b
2705   1708 32            mov bl, [d]
2706   1709 A7 00         mov bh, 0
2707   170B DD            push bl
2708   170C 07 EF 05      call is_digit
2709   170F 51 01 00      add sp, 1
2710   1712 FD A8         sor a, b ; ||
2711   1714 E4            pop a
2712   1715 C0 00 00      cmp b, 0
2713   1718 C6 42 17      je _while38_exit
2714   171B             _while38_block:
2715   171B             ;; *t++ = *prog++; 
2716   171B 2C FF FF      mov b, [bp + -1] ; $t             
2717   171E FD 79         mov g, b
2718   1720 FD 77         inc b
2719   1722 FA FF FF      lea d, [bp + -1] ; $t
2720   1725 FD 43         mov [d], b
2721   1727 FD 27         mov b, g
2722   1729 D8            push b
2723   172A 29 2D 25      mov b, [_prog] ; $prog           
2724   172D FD 79         mov g, b
2725   172F FD 77         inc b
2726   1731 3B 2D 25      mov d, _prog ; $prog
2727   1734 FD 43         mov [d], b
2728   1736 FD 27         mov b, g
2729   1738 74            mov d, b
2730   1739 32            mov bl, [d]
2731   173A A7 00         mov bh, 0
2732   173C E7            pop d
2733   173D FD 3E         mov [d], bl
2734   173F 0A F4 16      jmp _while38_cond
2735   1742             _while38_exit:
2736   1742             ;; *t = '\0'; 
2737   1742 2C FF FF      mov b, [bp + -1] ; $t             
2738   1745 D8            push b
2739   1746 26 00 00      mov b, $0
2740   1749 E7            pop d
2741   174A FD 3E         mov [d], bl
2742   174C             ;; toktype = IDENTIFIER; 
2743   174C 3B 2B 25      mov d, _toktype ; $toktype         
2744   174F 26 05 00      mov b, 5; IDENTIFIER        
2745   1752 FD 43         mov [d], b
2746   1754 0A BD 22      jmp _if37_exit
2747   1757             _if37_else:
2748   1757             ;; if(*prog == '\"'){ 
2749   1757             _if39_cond:
2750   1757 29 2D 25      mov b, [_prog] ; $prog           
2751   175A 74            mov d, b
2752   175B 32            mov bl, [d]
2753   175C A7 00         mov bh, 0
2754   175E             ; START RELATIONAL
2755   175E D7            push a
2756   175F 11            mov a, b
2757   1760 26 22 00      mov b, $22
2758   1763 B0            cmp a, b
2759   1764 FD 71         seq ; ==
2760   1766 E4            pop a
2761   1767             ; END RELATIONAL
2762   1767 C0 00 00      cmp b, 0
2763   176A C6 39 18      je _if39_else
2764   176D             _if39_true:
2765   176D             ;; *t++ = '\"'; 
2766   176D 2C FF FF      mov b, [bp + -1] ; $t             
2767   1770 FD 79         mov g, b
2768   1772 FD 77         inc b
2769   1774 FA FF FF      lea d, [bp + -1] ; $t
2770   1777 FD 43         mov [d], b
2771   1779 FD 27         mov b, g
2772   177B D8            push b
2773   177C 26 22 00      mov b, $22
2774   177F E7            pop d
2775   1780 FD 3E         mov [d], bl
2776   1782             ;; prog++; 
2777   1782 29 2D 25      mov b, [_prog] ; $prog           
2778   1785 FD 79         mov g, b
2779   1787 FD 77         inc b
2780   1789 3B 2D 25      mov d, _prog ; $prog
2781   178C FD 43         mov [d], b
2782   178E FD 27         mov b, g
2783   1790             ;; while(*prog != '\"' && *prog){ 
2784   1790             _while40_cond:
2785   1790 29 2D 25      mov b, [_prog] ; $prog           
2786   1793 74            mov d, b
2787   1794 32            mov bl, [d]
2788   1795 A7 00         mov bh, 0
2789   1797             ; START RELATIONAL
2790   1797 D7            push a
2791   1798 11            mov a, b
2792   1799 26 22 00      mov b, $22
2793   179C B0            cmp a, b
2794   179D FD 72         sneq ; !=
2795   179F E4            pop a
2796   17A0             ; END RELATIONAL
2797   17A0 D7            push a
2798   17A1 11            mov a, b
2799   17A2 29 2D 25      mov b, [_prog] ; $prog           
2800   17A5 74            mov d, b
2801   17A6 32            mov bl, [d]
2802   17A7 A7 00         mov bh, 0
2803   17A9 FD A7         sand a, b ; &&
2804   17AB E4            pop a
2805   17AC C0 00 00      cmp b, 0
2806   17AF C6 D9 17      je _while40_exit
2807   17B2             _while40_block:
2808   17B2             ;; *t++ = *prog++; 
2809   17B2 2C FF FF      mov b, [bp + -1] ; $t             
2810   17B5 FD 79         mov g, b
2811   17B7 FD 77         inc b
2812   17B9 FA FF FF      lea d, [bp + -1] ; $t
2813   17BC FD 43         mov [d], b
2814   17BE FD 27         mov b, g
2815   17C0 D8            push b
2816   17C1 29 2D 25      mov b, [_prog] ; $prog           
2817   17C4 FD 79         mov g, b
2818   17C6 FD 77         inc b
2819   17C8 3B 2D 25      mov d, _prog ; $prog
2820   17CB FD 43         mov [d], b
2821   17CD FD 27         mov b, g
2822   17CF 74            mov d, b
2823   17D0 32            mov bl, [d]
2824   17D1 A7 00         mov bh, 0
2825   17D3 E7            pop d
2826   17D4 FD 3E         mov [d], bl
2827   17D6 0A 90 17      jmp _while40_cond
2828   17D9             _while40_exit:
2829   17D9             ;; if(*prog != '\"') error("Double quotes expected"); 
2830   17D9             _if41_cond:
2831   17D9 29 2D 25      mov b, [_prog] ; $prog           
2832   17DC 74            mov d, b
2833   17DD 32            mov bl, [d]
2834   17DE A7 00         mov bh, 0
2835   17E0             ; START RELATIONAL
2836   17E0 D7            push a
2837   17E1 11            mov a, b
2838   17E2 26 22 00      mov b, $22
2839   17E5 B0            cmp a, b
2840   17E6 FD 72         sneq ; !=
2841   17E8 E4            pop a
2842   17E9             ; END RELATIONAL
2843   17E9 C0 00 00      cmp b, 0
2844   17EC C6 FE 17      je _if41_exit
2845   17EF             _if41_true:
2846   17EF             ;; error("Double quotes expected"); 
2847   17EF 26 A1 28      mov b, __s6 ; "Double quotes expected"
2848   17F2 FD AB         swp b
2849   17F4 D8            push b
2850   17F5 07 00 25      call error
2851   17F8 51 02 00      add sp, 2
2852   17FB 0A FE 17      jmp _if41_exit
2853   17FE             _if41_exit:
2854   17FE             ;; *t++ = '\"'; 
2855   17FE 2C FF FF      mov b, [bp + -1] ; $t             
2856   1801 FD 79         mov g, b
2857   1803 FD 77         inc b
2858   1805 FA FF FF      lea d, [bp + -1] ; $t
2859   1808 FD 43         mov [d], b
2860   180A FD 27         mov b, g
2861   180C D8            push b
2862   180D 26 22 00      mov b, $22
2863   1810 E7            pop d
2864   1811 FD 3E         mov [d], bl
2865   1813             ;; prog++; 
2866   1813 29 2D 25      mov b, [_prog] ; $prog           
2867   1816 FD 79         mov g, b
2868   1818 FD 77         inc b
2869   181A 3B 2D 25      mov d, _prog ; $prog
2870   181D FD 43         mov [d], b
2871   181F FD 27         mov b, g
2872   1821             ;; toktype = STRING_CONST; 
2873   1821 3B 2B 25      mov d, _toktype ; $toktype         
2874   1824 26 03 00      mov b, 3; STRING_CONST        
2875   1827 FD 43         mov [d], b
2876   1829             ;; *t = '\0'; 
2877   1829 2C FF FF      mov b, [bp + -1] ; $t             
2878   182C D8            push b
2879   182D 26 00 00      mov b, $0
2880   1830 E7            pop d
2881   1831 FD 3E         mov [d], bl
2882   1833             ;; convert_constant(); // converts this string token qith quotation marks to a non quotation marks string, and also converts escape sequences to their real bytes 
2883   1833 07 C9 22      call convert_constant
2884   1836 0A BD 22      jmp _if39_exit
2885   1839             _if39_else:
2886   1839             ;; if(*prog == '#'){ 
2887   1839             _if42_cond:
2888   1839 29 2D 25      mov b, [_prog] ; $prog           
2889   183C 74            mov d, b
2890   183D 32            mov bl, [d]
2891   183E A7 00         mov bh, 0
2892   1840             ; START RELATIONAL
2893   1840 D7            push a
2894   1841 11            mov a, b
2895   1842 26 23 00      mov b, $23
2896   1845 B0            cmp a, b
2897   1846 FD 71         seq ; ==
2898   1848 E4            pop a
2899   1849             ; END RELATIONAL
2900   1849 C0 00 00      cmp b, 0
2901   184C C6 86 18      je _if42_else
2902   184F             _if42_true:
2903   184F             ;; *t++ = *prog++; 
2904   184F 2C FF FF      mov b, [bp + -1] ; $t             
2905   1852 FD 79         mov g, b
2906   1854 FD 77         inc b
2907   1856 FA FF FF      lea d, [bp + -1] ; $t
2908   1859 FD 43         mov [d], b
2909   185B FD 27         mov b, g
2910   185D D8            push b
2911   185E 29 2D 25      mov b, [_prog] ; $prog           
2912   1861 FD 79         mov g, b
2913   1863 FD 77         inc b
2914   1865 3B 2D 25      mov d, _prog ; $prog
2915   1868 FD 43         mov [d], b
2916   186A FD 27         mov b, g
2917   186C 74            mov d, b
2918   186D 32            mov bl, [d]
2919   186E A7 00         mov bh, 0
2920   1870 E7            pop d
2921   1871 FD 3E         mov [d], bl
2922   1873             ;; tok = HASH; 
2923   1873 3B 29 25      mov d, _tok ; $tok         
2924   1876 26 15 00      mov b, 21; HASH        
2925   1879 FD 43         mov [d], b
2926   187B             ;; toktype = DELIMITER;   
2927   187B 3B 2B 25      mov d, _toktype ; $toktype         
2928   187E 26 01 00      mov b, 1; DELIMITER        
2929   1881 FD 43         mov [d], b
2930   1883 0A BD 22      jmp _if42_exit
2931   1886             _if42_else:
2932   1886             ;; if(*prog == '{'){ 
2933   1886             _if43_cond:
2934   1886 29 2D 25      mov b, [_prog] ; $prog           
2935   1889 74            mov d, b
2936   188A 32            mov bl, [d]
2937   188B A7 00         mov bh, 0
2938   188D             ; START RELATIONAL
2939   188D D7            push a
2940   188E 11            mov a, b
2941   188F 26 7B 00      mov b, $7b
2942   1892 B0            cmp a, b
2943   1893 FD 71         seq ; ==
2944   1895 E4            pop a
2945   1896             ; END RELATIONAL
2946   1896 C0 00 00      cmp b, 0
2947   1899 C6 D3 18      je _if43_else
2948   189C             _if43_true:
2949   189C             ;; *t++ = *prog++; 
2950   189C 2C FF FF      mov b, [bp + -1] ; $t             
2951   189F FD 79         mov g, b
2952   18A1 FD 77         inc b
2953   18A3 FA FF FF      lea d, [bp + -1] ; $t
2954   18A6 FD 43         mov [d], b
2955   18A8 FD 27         mov b, g
2956   18AA D8            push b
2957   18AB 29 2D 25      mov b, [_prog] ; $prog           
2958   18AE FD 79         mov g, b
2959   18B0 FD 77         inc b
2960   18B2 3B 2D 25      mov d, _prog ; $prog
2961   18B5 FD 43         mov [d], b
2962   18B7 FD 27         mov b, g
2963   18B9 74            mov d, b
2964   18BA 32            mov bl, [d]
2965   18BB A7 00         mov bh, 0
2966   18BD E7            pop d
2967   18BE FD 3E         mov [d], bl
2968   18C0             ;; tok = OPENING_BRACE; 
2969   18C0 3B 29 25      mov d, _tok ; $tok         
2970   18C3 26 1E 00      mov b, 30; OPENING_BRACE        
2971   18C6 FD 43         mov [d], b
2972   18C8             ;; toktype = DELIMITER;   
2973   18C8 3B 2B 25      mov d, _toktype ; $toktype         
2974   18CB 26 01 00      mov b, 1; DELIMITER        
2975   18CE FD 43         mov [d], b
2976   18D0 0A BD 22      jmp _if43_exit
2977   18D3             _if43_else:
2978   18D3             ;; if(*prog == '}'){ 
2979   18D3             _if44_cond:
2980   18D3 29 2D 25      mov b, [_prog] ; $prog           
2981   18D6 74            mov d, b
2982   18D7 32            mov bl, [d]
2983   18D8 A7 00         mov bh, 0
2984   18DA             ; START RELATIONAL
2985   18DA D7            push a
2986   18DB 11            mov a, b
2987   18DC 26 7D 00      mov b, $7d
2988   18DF B0            cmp a, b
2989   18E0 FD 71         seq ; ==
2990   18E2 E4            pop a
2991   18E3             ; END RELATIONAL
2992   18E3 C0 00 00      cmp b, 0
2993   18E6 C6 20 19      je _if44_else
2994   18E9             _if44_true:
2995   18E9             ;; *t++ = *prog++; 
2996   18E9 2C FF FF      mov b, [bp + -1] ; $t             
2997   18EC FD 79         mov g, b
2998   18EE FD 77         inc b
2999   18F0 FA FF FF      lea d, [bp + -1] ; $t
3000   18F3 FD 43         mov [d], b
3001   18F5 FD 27         mov b, g
3002   18F7 D8            push b
3003   18F8 29 2D 25      mov b, [_prog] ; $prog           
3004   18FB FD 79         mov g, b
3005   18FD FD 77         inc b
3006   18FF 3B 2D 25      mov d, _prog ; $prog
3007   1902 FD 43         mov [d], b
3008   1904 FD 27         mov b, g
3009   1906 74            mov d, b
3010   1907 32            mov bl, [d]
3011   1908 A7 00         mov bh, 0
3012   190A E7            pop d
3013   190B FD 3E         mov [d], bl
3014   190D             ;; tok = CLOSING_BRACE; 
3015   190D 3B 29 25      mov d, _tok ; $tok         
3016   1910 26 1F 00      mov b, 31; CLOSING_BRACE        
3017   1913 FD 43         mov [d], b
3018   1915             ;; toktype = DELIMITER;   
3019   1915 3B 2B 25      mov d, _toktype ; $toktype         
3020   1918 26 01 00      mov b, 1; DELIMITER        
3021   191B FD 43         mov [d], b
3022   191D 0A BD 22      jmp _if44_exit
3023   1920             _if44_else:
3024   1920             ;; if(*prog == '['){ 
3025   1920             _if45_cond:
3026   1920 29 2D 25      mov b, [_prog] ; $prog           
3027   1923 74            mov d, b
3028   1924 32            mov bl, [d]
3029   1925 A7 00         mov bh, 0
3030   1927             ; START RELATIONAL
3031   1927 D7            push a
3032   1928 11            mov a, b
3033   1929 26 5B 00      mov b, $5b
3034   192C B0            cmp a, b
3035   192D FD 71         seq ; ==
3036   192F E4            pop a
3037   1930             ; END RELATIONAL
3038   1930 C0 00 00      cmp b, 0
3039   1933 C6 6D 19      je _if45_else
3040   1936             _if45_true:
3041   1936             ;; *t++ = *prog++; 
3042   1936 2C FF FF      mov b, [bp + -1] ; $t             
3043   1939 FD 79         mov g, b
3044   193B FD 77         inc b
3045   193D FA FF FF      lea d, [bp + -1] ; $t
3046   1940 FD 43         mov [d], b
3047   1942 FD 27         mov b, g
3048   1944 D8            push b
3049   1945 29 2D 25      mov b, [_prog] ; $prog           
3050   1948 FD 79         mov g, b
3051   194A FD 77         inc b
3052   194C 3B 2D 25      mov d, _prog ; $prog
3053   194F FD 43         mov [d], b
3054   1951 FD 27         mov b, g
3055   1953 74            mov d, b
3056   1954 32            mov bl, [d]
3057   1955 A7 00         mov bh, 0
3058   1957 E7            pop d
3059   1958 FD 3E         mov [d], bl
3060   195A             ;; tok = OPENING_BRACKET; 
3061   195A 3B 29 25      mov d, _tok ; $tok         
3062   195D 26 20 00      mov b, 32; OPENING_BRACKET        
3063   1960 FD 43         mov [d], b
3064   1962             ;; toktype = DELIMITER;   
3065   1962 3B 2B 25      mov d, _toktype ; $toktype         
3066   1965 26 01 00      mov b, 1; DELIMITER        
3067   1968 FD 43         mov [d], b
3068   196A 0A BD 22      jmp _if45_exit
3069   196D             _if45_else:
3070   196D             ;; if(*prog == ']'){ 
3071   196D             _if46_cond:
3072   196D 29 2D 25      mov b, [_prog] ; $prog           
3073   1970 74            mov d, b
3074   1971 32            mov bl, [d]
3075   1972 A7 00         mov bh, 0
3076   1974             ; START RELATIONAL
3077   1974 D7            push a
3078   1975 11            mov a, b
3079   1976 26 5D 00      mov b, $5d
3080   1979 B0            cmp a, b
3081   197A FD 71         seq ; ==
3082   197C E4            pop a
3083   197D             ; END RELATIONAL
3084   197D C0 00 00      cmp b, 0
3085   1980 C6 BA 19      je _if46_else
3086   1983             _if46_true:
3087   1983             ;; *t++ = *prog++; 
3088   1983 2C FF FF      mov b, [bp + -1] ; $t             
3089   1986 FD 79         mov g, b
3090   1988 FD 77         inc b
3091   198A FA FF FF      lea d, [bp + -1] ; $t
3092   198D FD 43         mov [d], b
3093   198F FD 27         mov b, g
3094   1991 D8            push b
3095   1992 29 2D 25      mov b, [_prog] ; $prog           
3096   1995 FD 79         mov g, b
3097   1997 FD 77         inc b
3098   1999 3B 2D 25      mov d, _prog ; $prog
3099   199C FD 43         mov [d], b
3100   199E FD 27         mov b, g
3101   19A0 74            mov d, b
3102   19A1 32            mov bl, [d]
3103   19A2 A7 00         mov bh, 0
3104   19A4 E7            pop d
3105   19A5 FD 3E         mov [d], bl
3106   19A7             ;; tok = CLOSING_BRACKET; 
3107   19A7 3B 29 25      mov d, _tok ; $tok         
3108   19AA 26 21 00      mov b, 33; CLOSING_BRACKET        
3109   19AD FD 43         mov [d], b
3110   19AF             ;; toktype = DELIMITER;   
3111   19AF 3B 2B 25      mov d, _toktype ; $toktype         
3112   19B2 26 01 00      mov b, 1; DELIMITER        
3113   19B5 FD 43         mov [d], b
3114   19B7 0A BD 22      jmp _if46_exit
3115   19BA             _if46_else:
3116   19BA             ;; if(*prog == '='){ 
3117   19BA             _if47_cond:
3118   19BA 29 2D 25      mov b, [_prog] ; $prog           
3119   19BD 74            mov d, b
3120   19BE 32            mov bl, [d]
3121   19BF A7 00         mov bh, 0
3122   19C1             ; START RELATIONAL
3123   19C1 D7            push a
3124   19C2 11            mov a, b
3125   19C3 26 3D 00      mov b, $3d
3126   19C6 B0            cmp a, b
3127   19C7 FD 71         seq ; ==
3128   19C9 E4            pop a
3129   19CA             ; END RELATIONAL
3130   19CA C0 00 00      cmp b, 0
3131   19CD C6 4C 1A      je _if47_else
3132   19D0             _if47_true:
3133   19D0             ;; *t++ = *prog++; 
3134   19D0 2C FF FF      mov b, [bp + -1] ; $t             
3135   19D3 FD 79         mov g, b
3136   19D5 FD 77         inc b
3137   19D7 FA FF FF      lea d, [bp + -1] ; $t
3138   19DA FD 43         mov [d], b
3139   19DC FD 27         mov b, g
3140   19DE D8            push b
3141   19DF 29 2D 25      mov b, [_prog] ; $prog           
3142   19E2 FD 79         mov g, b
3143   19E4 FD 77         inc b
3144   19E6 3B 2D 25      mov d, _prog ; $prog
3145   19E9 FD 43         mov [d], b
3146   19EB FD 27         mov b, g
3147   19ED 74            mov d, b
3148   19EE 32            mov bl, [d]
3149   19EF A7 00         mov bh, 0
3150   19F1 E7            pop d
3151   19F2 FD 3E         mov [d], bl
3152   19F4             ;; if (*prog == '='){ 
3153   19F4             _if48_cond:
3154   19F4 29 2D 25      mov b, [_prog] ; $prog           
3155   19F7 74            mov d, b
3156   19F8 32            mov bl, [d]
3157   19F9 A7 00         mov bh, 0
3158   19FB             ; START RELATIONAL
3159   19FB D7            push a
3160   19FC 11            mov a, b
3161   19FD 26 3D 00      mov b, $3d
3162   1A00 B0            cmp a, b
3163   1A01 FD 71         seq ; ==
3164   1A03 E4            pop a
3165   1A04             ; END RELATIONAL
3166   1A04 C0 00 00      cmp b, 0
3167   1A07 C6 39 1A      je _if48_else
3168   1A0A             _if48_true:
3169   1A0A             ;; *t++ = *prog++; 
3170   1A0A 2C FF FF      mov b, [bp + -1] ; $t             
3171   1A0D FD 79         mov g, b
3172   1A0F FD 77         inc b
3173   1A11 FA FF FF      lea d, [bp + -1] ; $t
3174   1A14 FD 43         mov [d], b
3175   1A16 FD 27         mov b, g
3176   1A18 D8            push b
3177   1A19 29 2D 25      mov b, [_prog] ; $prog           
3178   1A1C FD 79         mov g, b
3179   1A1E FD 77         inc b
3180   1A20 3B 2D 25      mov d, _prog ; $prog
3181   1A23 FD 43         mov [d], b
3182   1A25 FD 27         mov b, g
3183   1A27 74            mov d, b
3184   1A28 32            mov bl, [d]
3185   1A29 A7 00         mov bh, 0
3186   1A2B E7            pop d
3187   1A2C FD 3E         mov [d], bl
3188   1A2E             ;; tok = EQUAL; 
3189   1A2E 3B 29 25      mov d, _tok ; $tok         
3190   1A31 26 08 00      mov b, 8; EQUAL        
3191   1A34 FD 43         mov [d], b
3192   1A36 0A 41 1A      jmp _if48_exit
3193   1A39             _if48_else:
3194   1A39             ;; tok = ASSIGNMENT; 
3195   1A39 3B 29 25      mov d, _tok ; $tok         
3196   1A3C 26 11 00      mov b, 17; ASSIGNMENT        
3197   1A3F FD 43         mov [d], b
3198   1A41             _if48_exit:
3199   1A41             ;; toktype = DELIMITER;   
3200   1A41 3B 2B 25      mov d, _toktype ; $toktype         
3201   1A44 26 01 00      mov b, 1; DELIMITER        
3202   1A47 FD 43         mov [d], b
3203   1A49 0A BD 22      jmp _if47_exit
3204   1A4C             _if47_else:
3205   1A4C             ;; if(*prog == '&'){ 
3206   1A4C             _if49_cond:
3207   1A4C 29 2D 25      mov b, [_prog] ; $prog           
3208   1A4F 74            mov d, b
3209   1A50 32            mov bl, [d]
3210   1A51 A7 00         mov bh, 0
3211   1A53             ; START RELATIONAL
3212   1A53 D7            push a
3213   1A54 11            mov a, b
3214   1A55 26 26 00      mov b, $26
3215   1A58 B0            cmp a, b
3216   1A59 FD 71         seq ; ==
3217   1A5B E4            pop a
3218   1A5C             ; END RELATIONAL
3219   1A5C C0 00 00      cmp b, 0
3220   1A5F C6 DE 1A      je _if49_else
3221   1A62             _if49_true:
3222   1A62             ;; *t++ = *prog++; 
3223   1A62 2C FF FF      mov b, [bp + -1] ; $t             
3224   1A65 FD 79         mov g, b
3225   1A67 FD 77         inc b
3226   1A69 FA FF FF      lea d, [bp + -1] ; $t
3227   1A6C FD 43         mov [d], b
3228   1A6E FD 27         mov b, g
3229   1A70 D8            push b
3230   1A71 29 2D 25      mov b, [_prog] ; $prog           
3231   1A74 FD 79         mov g, b
3232   1A76 FD 77         inc b
3233   1A78 3B 2D 25      mov d, _prog ; $prog
3234   1A7B FD 43         mov [d], b
3235   1A7D FD 27         mov b, g
3236   1A7F 74            mov d, b
3237   1A80 32            mov bl, [d]
3238   1A81 A7 00         mov bh, 0
3239   1A83 E7            pop d
3240   1A84 FD 3E         mov [d], bl
3241   1A86             ;; if(*prog == '&'){ 
3242   1A86             _if50_cond:
3243   1A86 29 2D 25      mov b, [_prog] ; $prog           
3244   1A89 74            mov d, b
3245   1A8A 32            mov bl, [d]
3246   1A8B A7 00         mov bh, 0
3247   1A8D             ; START RELATIONAL
3248   1A8D D7            push a
3249   1A8E 11            mov a, b
3250   1A8F 26 26 00      mov b, $26
3251   1A92 B0            cmp a, b
3252   1A93 FD 71         seq ; ==
3253   1A95 E4            pop a
3254   1A96             ; END RELATIONAL
3255   1A96 C0 00 00      cmp b, 0
3256   1A99 C6 CB 1A      je _if50_else
3257   1A9C             _if50_true:
3258   1A9C             ;; *t++ = *prog++; 
3259   1A9C 2C FF FF      mov b, [bp + -1] ; $t             
3260   1A9F FD 79         mov g, b
3261   1AA1 FD 77         inc b
3262   1AA3 FA FF FF      lea d, [bp + -1] ; $t
3263   1AA6 FD 43         mov [d], b
3264   1AA8 FD 27         mov b, g
3265   1AAA D8            push b
3266   1AAB 29 2D 25      mov b, [_prog] ; $prog           
3267   1AAE FD 79         mov g, b
3268   1AB0 FD 77         inc b
3269   1AB2 3B 2D 25      mov d, _prog ; $prog
3270   1AB5 FD 43         mov [d], b
3271   1AB7 FD 27         mov b, g
3272   1AB9 74            mov d, b
3273   1ABA 32            mov bl, [d]
3274   1ABB A7 00         mov bh, 0
3275   1ABD E7            pop d
3276   1ABE FD 3E         mov [d], bl
3277   1AC0             ;; tok = LOGICAL_AND; 
3278   1AC0 3B 29 25      mov d, _tok ; $tok         
3279   1AC3 26 0E 00      mov b, 14; LOGICAL_AND        
3280   1AC6 FD 43         mov [d], b
3281   1AC8 0A D3 1A      jmp _if50_exit
3282   1ACB             _if50_else:
3283   1ACB             ;; tok = AMPERSAND; 
3284   1ACB 3B 29 25      mov d, _tok ; $tok         
3285   1ACE 26 16 00      mov b, 22; AMPERSAND        
3286   1AD1 FD 43         mov [d], b
3287   1AD3             _if50_exit:
3288   1AD3             ;; toktype = DELIMITER;   
3289   1AD3 3B 2B 25      mov d, _toktype ; $toktype         
3290   1AD6 26 01 00      mov b, 1; DELIMITER        
3291   1AD9 FD 43         mov [d], b
3292   1ADB 0A BD 22      jmp _if49_exit
3293   1ADE             _if49_else:
3294   1ADE             ;; if(*prog == '|'){ 
3295   1ADE             _if51_cond:
3296   1ADE 29 2D 25      mov b, [_prog] ; $prog           
3297   1AE1 74            mov d, b
3298   1AE2 32            mov bl, [d]
3299   1AE3 A7 00         mov bh, 0
3300   1AE5             ; START RELATIONAL
3301   1AE5 D7            push a
3302   1AE6 11            mov a, b
3303   1AE7 26 7C 00      mov b, $7c
3304   1AEA B0            cmp a, b
3305   1AEB FD 71         seq ; ==
3306   1AED E4            pop a
3307   1AEE             ; END RELATIONAL
3308   1AEE C0 00 00      cmp b, 0
3309   1AF1 C6 70 1B      je _if51_else
3310   1AF4             _if51_true:
3311   1AF4             ;; *t++ = *prog++; 
3312   1AF4 2C FF FF      mov b, [bp + -1] ; $t             
3313   1AF7 FD 79         mov g, b
3314   1AF9 FD 77         inc b
3315   1AFB FA FF FF      lea d, [bp + -1] ; $t
3316   1AFE FD 43         mov [d], b
3317   1B00 FD 27         mov b, g
3318   1B02 D8            push b
3319   1B03 29 2D 25      mov b, [_prog] ; $prog           
3320   1B06 FD 79         mov g, b
3321   1B08 FD 77         inc b
3322   1B0A 3B 2D 25      mov d, _prog ; $prog
3323   1B0D FD 43         mov [d], b
3324   1B0F FD 27         mov b, g
3325   1B11 74            mov d, b
3326   1B12 32            mov bl, [d]
3327   1B13 A7 00         mov bh, 0
3328   1B15 E7            pop d
3329   1B16 FD 3E         mov [d], bl
3330   1B18             ;; if (*prog == '|'){ 
3331   1B18             _if52_cond:
3332   1B18 29 2D 25      mov b, [_prog] ; $prog           
3333   1B1B 74            mov d, b
3334   1B1C 32            mov bl, [d]
3335   1B1D A7 00         mov bh, 0
3336   1B1F             ; START RELATIONAL
3337   1B1F D7            push a
3338   1B20 11            mov a, b
3339   1B21 26 7C 00      mov b, $7c
3340   1B24 B0            cmp a, b
3341   1B25 FD 71         seq ; ==
3342   1B27 E4            pop a
3343   1B28             ; END RELATIONAL
3344   1B28 C0 00 00      cmp b, 0
3345   1B2B C6 5D 1B      je _if52_else
3346   1B2E             _if52_true:
3347   1B2E             ;; *t++ = *prog++; 
3348   1B2E 2C FF FF      mov b, [bp + -1] ; $t             
3349   1B31 FD 79         mov g, b
3350   1B33 FD 77         inc b
3351   1B35 FA FF FF      lea d, [bp + -1] ; $t
3352   1B38 FD 43         mov [d], b
3353   1B3A FD 27         mov b, g
3354   1B3C D8            push b
3355   1B3D 29 2D 25      mov b, [_prog] ; $prog           
3356   1B40 FD 79         mov g, b
3357   1B42 FD 77         inc b
3358   1B44 3B 2D 25      mov d, _prog ; $prog
3359   1B47 FD 43         mov [d], b
3360   1B49 FD 27         mov b, g
3361   1B4B 74            mov d, b
3362   1B4C 32            mov bl, [d]
3363   1B4D A7 00         mov bh, 0
3364   1B4F E7            pop d
3365   1B50 FD 3E         mov [d], bl
3366   1B52             ;; tok = LOGICAL_OR; 
3367   1B52 3B 29 25      mov d, _tok ; $tok         
3368   1B55 26 0F 00      mov b, 15; LOGICAL_OR        
3369   1B58 FD 43         mov [d], b
3370   1B5A 0A 65 1B      jmp _if52_exit
3371   1B5D             _if52_else:
3372   1B5D             ;; tok = BITWISE_OR; 
3373   1B5D 3B 29 25      mov d, _tok ; $tok         
3374   1B60 26 18 00      mov b, 24; BITWISE_OR        
3375   1B63 FD 43         mov [d], b
3376   1B65             _if52_exit:
3377   1B65             ;; toktype = DELIMITER;   
3378   1B65 3B 2B 25      mov d, _toktype ; $toktype         
3379   1B68 26 01 00      mov b, 1; DELIMITER        
3380   1B6B FD 43         mov [d], b
3381   1B6D 0A BD 22      jmp _if51_exit
3382   1B70             _if51_else:
3383   1B70             ;; if(*prog == '~'){ 
3384   1B70             _if53_cond:
3385   1B70 29 2D 25      mov b, [_prog] ; $prog           
3386   1B73 74            mov d, b
3387   1B74 32            mov bl, [d]
3388   1B75 A7 00         mov bh, 0
3389   1B77             ; START RELATIONAL
3390   1B77 D7            push a
3391   1B78 11            mov a, b
3392   1B79 26 7E 00      mov b, $7e
3393   1B7C B0            cmp a, b
3394   1B7D FD 71         seq ; ==
3395   1B7F E4            pop a
3396   1B80             ; END RELATIONAL
3397   1B80 C0 00 00      cmp b, 0
3398   1B83 C6 BD 1B      je _if53_else
3399   1B86             _if53_true:
3400   1B86             ;; *t++ = *prog++; 
3401   1B86 2C FF FF      mov b, [bp + -1] ; $t             
3402   1B89 FD 79         mov g, b
3403   1B8B FD 77         inc b
3404   1B8D FA FF FF      lea d, [bp + -1] ; $t
3405   1B90 FD 43         mov [d], b
3406   1B92 FD 27         mov b, g
3407   1B94 D8            push b
3408   1B95 29 2D 25      mov b, [_prog] ; $prog           
3409   1B98 FD 79         mov g, b
3410   1B9A FD 77         inc b
3411   1B9C 3B 2D 25      mov d, _prog ; $prog
3412   1B9F FD 43         mov [d], b
3413   1BA1 FD 27         mov b, g
3414   1BA3 74            mov d, b
3415   1BA4 32            mov bl, [d]
3416   1BA5 A7 00         mov bh, 0
3417   1BA7 E7            pop d
3418   1BA8 FD 3E         mov [d], bl
3419   1BAA             ;; tok = BITWISE_NOT; 
3420   1BAA 3B 29 25      mov d, _tok ; $tok         
3421   1BAD 26 19 00      mov b, 25; BITWISE_NOT        
3422   1BB0 FD 43         mov [d], b
3423   1BB2             ;; toktype = DELIMITER;   
3424   1BB2 3B 2B 25      mov d, _toktype ; $toktype         
3425   1BB5 26 01 00      mov b, 1; DELIMITER        
3426   1BB8 FD 43         mov [d], b
3427   1BBA 0A BD 22      jmp _if53_exit
3428   1BBD             _if53_else:
3429   1BBD             ;; if(*prog == '<'){ 
3430   1BBD             _if54_cond:
3431   1BBD 29 2D 25      mov b, [_prog] ; $prog           
3432   1BC0 74            mov d, b
3433   1BC1 32            mov bl, [d]
3434   1BC2 A7 00         mov bh, 0
3435   1BC4             ; START RELATIONAL
3436   1BC4 D7            push a
3437   1BC5 11            mov a, b
3438   1BC6 26 3C 00      mov b, $3c
3439   1BC9 B0            cmp a, b
3440   1BCA FD 71         seq ; ==
3441   1BCC E4            pop a
3442   1BCD             ; END RELATIONAL
3443   1BCD C0 00 00      cmp b, 0
3444   1BD0 C6 94 1C      je _if54_else
3445   1BD3             _if54_true:
3446   1BD3             ;; *t++ = *prog++; 
3447   1BD3 2C FF FF      mov b, [bp + -1] ; $t             
3448   1BD6 FD 79         mov g, b
3449   1BD8 FD 77         inc b
3450   1BDA FA FF FF      lea d, [bp + -1] ; $t
3451   1BDD FD 43         mov [d], b
3452   1BDF FD 27         mov b, g
3453   1BE1 D8            push b
3454   1BE2 29 2D 25      mov b, [_prog] ; $prog           
3455   1BE5 FD 79         mov g, b
3456   1BE7 FD 77         inc b
3457   1BE9 3B 2D 25      mov d, _prog ; $prog
3458   1BEC FD 43         mov [d], b
3459   1BEE FD 27         mov b, g
3460   1BF0 74            mov d, b
3461   1BF1 32            mov bl, [d]
3462   1BF2 A7 00         mov bh, 0
3463   1BF4 E7            pop d
3464   1BF5 FD 3E         mov [d], bl
3465   1BF7             ;; if (*prog == '='){ 
3466   1BF7             _if55_cond:
3467   1BF7 29 2D 25      mov b, [_prog] ; $prog           
3468   1BFA 74            mov d, b
3469   1BFB 32            mov bl, [d]
3470   1BFC A7 00         mov bh, 0
3471   1BFE             ; START RELATIONAL
3472   1BFE D7            push a
3473   1BFF 11            mov a, b
3474   1C00 26 3D 00      mov b, $3d
3475   1C03 B0            cmp a, b
3476   1C04 FD 71         seq ; ==
3477   1C06 E4            pop a
3478   1C07             ; END RELATIONAL
3479   1C07 C0 00 00      cmp b, 0
3480   1C0A C6 3C 1C      je _if55_else
3481   1C0D             _if55_true:
3482   1C0D             ;; *t++ = *prog++; 
3483   1C0D 2C FF FF      mov b, [bp + -1] ; $t             
3484   1C10 FD 79         mov g, b
3485   1C12 FD 77         inc b
3486   1C14 FA FF FF      lea d, [bp + -1] ; $t
3487   1C17 FD 43         mov [d], b
3488   1C19 FD 27         mov b, g
3489   1C1B D8            push b
3490   1C1C 29 2D 25      mov b, [_prog] ; $prog           
3491   1C1F FD 79         mov g, b
3492   1C21 FD 77         inc b
3493   1C23 3B 2D 25      mov d, _prog ; $prog
3494   1C26 FD 43         mov [d], b
3495   1C28 FD 27         mov b, g
3496   1C2A 74            mov d, b
3497   1C2B 32            mov bl, [d]
3498   1C2C A7 00         mov bh, 0
3499   1C2E E7            pop d
3500   1C2F FD 3E         mov [d], bl
3501   1C31             ;; tok = LESS_THAN_OR_EQUAL; 
3502   1C31 3B 29 25      mov d, _tok ; $tok         
3503   1C34 26 0B 00      mov b, 11; LESS_THAN_OR_EQUAL        
3504   1C37 FD 43         mov [d], b
3505   1C39 0A 89 1C      jmp _if55_exit
3506   1C3C             _if55_else:
3507   1C3C             ;; if (*prog == '<'){ 
3508   1C3C             _if56_cond:
3509   1C3C 29 2D 25      mov b, [_prog] ; $prog           
3510   1C3F 74            mov d, b
3511   1C40 32            mov bl, [d]
3512   1C41 A7 00         mov bh, 0
3513   1C43             ; START RELATIONAL
3514   1C43 D7            push a
3515   1C44 11            mov a, b
3516   1C45 26 3C 00      mov b, $3c
3517   1C48 B0            cmp a, b
3518   1C49 FD 71         seq ; ==
3519   1C4B E4            pop a
3520   1C4C             ; END RELATIONAL
3521   1C4C C0 00 00      cmp b, 0
3522   1C4F C6 81 1C      je _if56_else
3523   1C52             _if56_true:
3524   1C52             ;; *t++ = *prog++; 
3525   1C52 2C FF FF      mov b, [bp + -1] ; $t             
3526   1C55 FD 79         mov g, b
3527   1C57 FD 77         inc b
3528   1C59 FA FF FF      lea d, [bp + -1] ; $t
3529   1C5C FD 43         mov [d], b
3530   1C5E FD 27         mov b, g
3531   1C60 D8            push b
3532   1C61 29 2D 25      mov b, [_prog] ; $prog           
3533   1C64 FD 79         mov g, b
3534   1C66 FD 77         inc b
3535   1C68 3B 2D 25      mov d, _prog ; $prog
3536   1C6B FD 43         mov [d], b
3537   1C6D FD 27         mov b, g
3538   1C6F 74            mov d, b
3539   1C70 32            mov bl, [d]
3540   1C71 A7 00         mov bh, 0
3541   1C73 E7            pop d
3542   1C74 FD 3E         mov [d], bl
3543   1C76             ;; tok = BITWISE_SHL; 
3544   1C76 3B 29 25      mov d, _tok ; $tok         
3545   1C79 26 1A 00      mov b, 26; BITWISE_SHL        
3546   1C7C FD 43         mov [d], b
3547   1C7E 0A 89 1C      jmp _if56_exit
3548   1C81             _if56_else:
3549   1C81             ;; tok = LESS_THAN; 
3550   1C81 3B 29 25      mov d, _tok ; $tok         
3551   1C84 26 0A 00      mov b, 10; LESS_THAN        
3552   1C87 FD 43         mov [d], b
3553   1C89             _if56_exit:
3554   1C89             _if55_exit:
3555   1C89             ;; toktype = DELIMITER;   
3556   1C89 3B 2B 25      mov d, _toktype ; $toktype         
3557   1C8C 26 01 00      mov b, 1; DELIMITER        
3558   1C8F FD 43         mov [d], b
3559   1C91 0A BD 22      jmp _if54_exit
3560   1C94             _if54_else:
3561   1C94             ;; if(*prog == '>'){ 
3562   1C94             _if57_cond:
3563   1C94 29 2D 25      mov b, [_prog] ; $prog           
3564   1C97 74            mov d, b
3565   1C98 32            mov bl, [d]
3566   1C99 A7 00         mov bh, 0
3567   1C9B             ; START RELATIONAL
3568   1C9B D7            push a
3569   1C9C 11            mov a, b
3570   1C9D 26 3E 00      mov b, $3e
3571   1CA0 B0            cmp a, b
3572   1CA1 FD 71         seq ; ==
3573   1CA3 E4            pop a
3574   1CA4             ; END RELATIONAL
3575   1CA4 C0 00 00      cmp b, 0
3576   1CA7 C6 6B 1D      je _if57_else
3577   1CAA             _if57_true:
3578   1CAA             ;; *t++ = *prog++; 
3579   1CAA 2C FF FF      mov b, [bp + -1] ; $t             
3580   1CAD FD 79         mov g, b
3581   1CAF FD 77         inc b
3582   1CB1 FA FF FF      lea d, [bp + -1] ; $t
3583   1CB4 FD 43         mov [d], b
3584   1CB6 FD 27         mov b, g
3585   1CB8 D8            push b
3586   1CB9 29 2D 25      mov b, [_prog] ; $prog           
3587   1CBC FD 79         mov g, b
3588   1CBE FD 77         inc b
3589   1CC0 3B 2D 25      mov d, _prog ; $prog
3590   1CC3 FD 43         mov [d], b
3591   1CC5 FD 27         mov b, g
3592   1CC7 74            mov d, b
3593   1CC8 32            mov bl, [d]
3594   1CC9 A7 00         mov bh, 0
3595   1CCB E7            pop d
3596   1CCC FD 3E         mov [d], bl
3597   1CCE             ;; if (*prog == '='){ 
3598   1CCE             _if58_cond:
3599   1CCE 29 2D 25      mov b, [_prog] ; $prog           
3600   1CD1 74            mov d, b
3601   1CD2 32            mov bl, [d]
3602   1CD3 A7 00         mov bh, 0
3603   1CD5             ; START RELATIONAL
3604   1CD5 D7            push a
3605   1CD6 11            mov a, b
3606   1CD7 26 3D 00      mov b, $3d
3607   1CDA B0            cmp a, b
3608   1CDB FD 71         seq ; ==
3609   1CDD E4            pop a
3610   1CDE             ; END RELATIONAL
3611   1CDE C0 00 00      cmp b, 0
3612   1CE1 C6 13 1D      je _if58_else
3613   1CE4             _if58_true:
3614   1CE4             ;; *t++ = *prog++; 
3615   1CE4 2C FF FF      mov b, [bp + -1] ; $t             
3616   1CE7 FD 79         mov g, b
3617   1CE9 FD 77         inc b
3618   1CEB FA FF FF      lea d, [bp + -1] ; $t
3619   1CEE FD 43         mov [d], b
3620   1CF0 FD 27         mov b, g
3621   1CF2 D8            push b
3622   1CF3 29 2D 25      mov b, [_prog] ; $prog           
3623   1CF6 FD 79         mov g, b
3624   1CF8 FD 77         inc b
3625   1CFA 3B 2D 25      mov d, _prog ; $prog
3626   1CFD FD 43         mov [d], b
3627   1CFF FD 27         mov b, g
3628   1D01 74            mov d, b
3629   1D02 32            mov bl, [d]
3630   1D03 A7 00         mov bh, 0
3631   1D05 E7            pop d
3632   1D06 FD 3E         mov [d], bl
3633   1D08             ;; tok = GREATER_THAN_OR_EQUAL; 
3634   1D08 3B 29 25      mov d, _tok ; $tok         
3635   1D0B 26 0D 00      mov b, 13; GREATER_THAN_OR_EQUAL        
3636   1D0E FD 43         mov [d], b
3637   1D10 0A 60 1D      jmp _if58_exit
3638   1D13             _if58_else:
3639   1D13             ;; if (*prog == '>'){ 
3640   1D13             _if59_cond:
3641   1D13 29 2D 25      mov b, [_prog] ; $prog           
3642   1D16 74            mov d, b
3643   1D17 32            mov bl, [d]
3644   1D18 A7 00         mov bh, 0
3645   1D1A             ; START RELATIONAL
3646   1D1A D7            push a
3647   1D1B 11            mov a, b
3648   1D1C 26 3E 00      mov b, $3e
3649   1D1F B0            cmp a, b
3650   1D20 FD 71         seq ; ==
3651   1D22 E4            pop a
3652   1D23             ; END RELATIONAL
3653   1D23 C0 00 00      cmp b, 0
3654   1D26 C6 58 1D      je _if59_else
3655   1D29             _if59_true:
3656   1D29             ;; *t++ = *prog++; 
3657   1D29 2C FF FF      mov b, [bp + -1] ; $t             
3658   1D2C FD 79         mov g, b
3659   1D2E FD 77         inc b
3660   1D30 FA FF FF      lea d, [bp + -1] ; $t
3661   1D33 FD 43         mov [d], b
3662   1D35 FD 27         mov b, g
3663   1D37 D8            push b
3664   1D38 29 2D 25      mov b, [_prog] ; $prog           
3665   1D3B FD 79         mov g, b
3666   1D3D FD 77         inc b
3667   1D3F 3B 2D 25      mov d, _prog ; $prog
3668   1D42 FD 43         mov [d], b
3669   1D44 FD 27         mov b, g
3670   1D46 74            mov d, b
3671   1D47 32            mov bl, [d]
3672   1D48 A7 00         mov bh, 0
3673   1D4A E7            pop d
3674   1D4B FD 3E         mov [d], bl
3675   1D4D             ;; tok = BITWISE_SHR; 
3676   1D4D 3B 29 25      mov d, _tok ; $tok         
3677   1D50 26 1B 00      mov b, 27; BITWISE_SHR        
3678   1D53 FD 43         mov [d], b
3679   1D55 0A 60 1D      jmp _if59_exit
3680   1D58             _if59_else:
3681   1D58             ;; tok = GREATER_THAN; 
3682   1D58 3B 29 25      mov d, _tok ; $tok         
3683   1D5B 26 0C 00      mov b, 12; GREATER_THAN        
3684   1D5E FD 43         mov [d], b
3685   1D60             _if59_exit:
3686   1D60             _if58_exit:
3687   1D60             ;; toktype = DELIMITER;   
3688   1D60 3B 2B 25      mov d, _toktype ; $toktype         
3689   1D63 26 01 00      mov b, 1; DELIMITER        
3690   1D66 FD 43         mov [d], b
3691   1D68 0A BD 22      jmp _if57_exit
3692   1D6B             _if57_else:
3693   1D6B             ;; if(*prog == '!'){ 
3694   1D6B             _if60_cond:
3695   1D6B 29 2D 25      mov b, [_prog] ; $prog           
3696   1D6E 74            mov d, b
3697   1D6F 32            mov bl, [d]
3698   1D70 A7 00         mov bh, 0
3699   1D72             ; START RELATIONAL
3700   1D72 D7            push a
3701   1D73 11            mov a, b
3702   1D74 26 21 00      mov b, $21
3703   1D77 B0            cmp a, b
3704   1D78 FD 71         seq ; ==
3705   1D7A E4            pop a
3706   1D7B             ; END RELATIONAL
3707   1D7B C0 00 00      cmp b, 0
3708   1D7E C6 FD 1D      je _if60_else
3709   1D81             _if60_true:
3710   1D81             ;; *t++ = *prog++; 
3711   1D81 2C FF FF      mov b, [bp + -1] ; $t             
3712   1D84 FD 79         mov g, b
3713   1D86 FD 77         inc b
3714   1D88 FA FF FF      lea d, [bp + -1] ; $t
3715   1D8B FD 43         mov [d], b
3716   1D8D FD 27         mov b, g
3717   1D8F D8            push b
3718   1D90 29 2D 25      mov b, [_prog] ; $prog           
3719   1D93 FD 79         mov g, b
3720   1D95 FD 77         inc b
3721   1D97 3B 2D 25      mov d, _prog ; $prog
3722   1D9A FD 43         mov [d], b
3723   1D9C FD 27         mov b, g
3724   1D9E 74            mov d, b
3725   1D9F 32            mov bl, [d]
3726   1DA0 A7 00         mov bh, 0
3727   1DA2 E7            pop d
3728   1DA3 FD 3E         mov [d], bl
3729   1DA5             ;; if(*prog == '='){ 
3730   1DA5             _if61_cond:
3731   1DA5 29 2D 25      mov b, [_prog] ; $prog           
3732   1DA8 74            mov d, b
3733   1DA9 32            mov bl, [d]
3734   1DAA A7 00         mov bh, 0
3735   1DAC             ; START RELATIONAL
3736   1DAC D7            push a
3737   1DAD 11            mov a, b
3738   1DAE 26 3D 00      mov b, $3d
3739   1DB1 B0            cmp a, b
3740   1DB2 FD 71         seq ; ==
3741   1DB4 E4            pop a
3742   1DB5             ; END RELATIONAL
3743   1DB5 C0 00 00      cmp b, 0
3744   1DB8 C6 EA 1D      je _if61_else
3745   1DBB             _if61_true:
3746   1DBB             ;; *t++ = *prog++; 
3747   1DBB 2C FF FF      mov b, [bp + -1] ; $t             
3748   1DBE FD 79         mov g, b
3749   1DC0 FD 77         inc b
3750   1DC2 FA FF FF      lea d, [bp + -1] ; $t
3751   1DC5 FD 43         mov [d], b
3752   1DC7 FD 27         mov b, g
3753   1DC9 D8            push b
3754   1DCA 29 2D 25      mov b, [_prog] ; $prog           
3755   1DCD FD 79         mov g, b
3756   1DCF FD 77         inc b
3757   1DD1 3B 2D 25      mov d, _prog ; $prog
3758   1DD4 FD 43         mov [d], b
3759   1DD6 FD 27         mov b, g
3760   1DD8 74            mov d, b
3761   1DD9 32            mov bl, [d]
3762   1DDA A7 00         mov bh, 0
3763   1DDC E7            pop d
3764   1DDD FD 3E         mov [d], bl
3765   1DDF             ;; tok = NOT_EQUAL; 
3766   1DDF 3B 29 25      mov d, _tok ; $tok         
3767   1DE2 26 09 00      mov b, 9; NOT_EQUAL        
3768   1DE5 FD 43         mov [d], b
3769   1DE7 0A F2 1D      jmp _if61_exit
3770   1DEA             _if61_else:
3771   1DEA             ;; tok = LOGICAL_NOT; 
3772   1DEA 3B 29 25      mov d, _tok ; $tok         
3773   1DED 26 10 00      mov b, 16; LOGICAL_NOT        
3774   1DF0 FD 43         mov [d], b
3775   1DF2             _if61_exit:
3776   1DF2             ;; toktype = DELIMITER;   
3777   1DF2 3B 2B 25      mov d, _toktype ; $toktype         
3778   1DF5 26 01 00      mov b, 1; DELIMITER        
3779   1DF8 FD 43         mov [d], b
3780   1DFA 0A BD 22      jmp _if60_exit
3781   1DFD             _if60_else:
3782   1DFD             ;; if(*prog == '+'){ 
3783   1DFD             _if62_cond:
3784   1DFD 29 2D 25      mov b, [_prog] ; $prog           
3785   1E00 74            mov d, b
3786   1E01 32            mov bl, [d]
3787   1E02 A7 00         mov bh, 0
3788   1E04             ; START RELATIONAL
3789   1E04 D7            push a
3790   1E05 11            mov a, b
3791   1E06 26 2B 00      mov b, $2b
3792   1E09 B0            cmp a, b
3793   1E0A FD 71         seq ; ==
3794   1E0C E4            pop a
3795   1E0D             ; END RELATIONAL
3796   1E0D C0 00 00      cmp b, 0
3797   1E10 C6 8F 1E      je _if62_else
3798   1E13             _if62_true:
3799   1E13             ;; *t++ = *prog++; 
3800   1E13 2C FF FF      mov b, [bp + -1] ; $t             
3801   1E16 FD 79         mov g, b
3802   1E18 FD 77         inc b
3803   1E1A FA FF FF      lea d, [bp + -1] ; $t
3804   1E1D FD 43         mov [d], b
3805   1E1F FD 27         mov b, g
3806   1E21 D8            push b
3807   1E22 29 2D 25      mov b, [_prog] ; $prog           
3808   1E25 FD 79         mov g, b
3809   1E27 FD 77         inc b
3810   1E29 3B 2D 25      mov d, _prog ; $prog
3811   1E2C FD 43         mov [d], b
3812   1E2E FD 27         mov b, g
3813   1E30 74            mov d, b
3814   1E31 32            mov bl, [d]
3815   1E32 A7 00         mov bh, 0
3816   1E34 E7            pop d
3817   1E35 FD 3E         mov [d], bl
3818   1E37             ;; if(*prog == '+'){ 
3819   1E37             _if63_cond:
3820   1E37 29 2D 25      mov b, [_prog] ; $prog           
3821   1E3A 74            mov d, b
3822   1E3B 32            mov bl, [d]
3823   1E3C A7 00         mov bh, 0
3824   1E3E             ; START RELATIONAL
3825   1E3E D7            push a
3826   1E3F 11            mov a, b
3827   1E40 26 2B 00      mov b, $2b
3828   1E43 B0            cmp a, b
3829   1E44 FD 71         seq ; ==
3830   1E46 E4            pop a
3831   1E47             ; END RELATIONAL
3832   1E47 C0 00 00      cmp b, 0
3833   1E4A C6 7C 1E      je _if63_else
3834   1E4D             _if63_true:
3835   1E4D             ;; *t++ = *prog++; 
3836   1E4D 2C FF FF      mov b, [bp + -1] ; $t             
3837   1E50 FD 79         mov g, b
3838   1E52 FD 77         inc b
3839   1E54 FA FF FF      lea d, [bp + -1] ; $t
3840   1E57 FD 43         mov [d], b
3841   1E59 FD 27         mov b, g
3842   1E5B D8            push b
3843   1E5C 29 2D 25      mov b, [_prog] ; $prog           
3844   1E5F FD 79         mov g, b
3845   1E61 FD 77         inc b
3846   1E63 3B 2D 25      mov d, _prog ; $prog
3847   1E66 FD 43         mov [d], b
3848   1E68 FD 27         mov b, g
3849   1E6A 74            mov d, b
3850   1E6B 32            mov bl, [d]
3851   1E6C A7 00         mov bh, 0
3852   1E6E E7            pop d
3853   1E6F FD 3E         mov [d], bl
3854   1E71             ;; tok = INCREMENT; 
3855   1E71 3B 29 25      mov d, _tok ; $tok         
3856   1E74 26 05 00      mov b, 5; INCREMENT        
3857   1E77 FD 43         mov [d], b
3858   1E79 0A 84 1E      jmp _if63_exit
3859   1E7C             _if63_else:
3860   1E7C             ;; tok = PLUS; 
3861   1E7C 3B 29 25      mov d, _tok ; $tok         
3862   1E7F 26 01 00      mov b, 1; PLUS        
3863   1E82 FD 43         mov [d], b
3864   1E84             _if63_exit:
3865   1E84             ;; toktype = DELIMITER;   
3866   1E84 3B 2B 25      mov d, _toktype ; $toktype         
3867   1E87 26 01 00      mov b, 1; DELIMITER        
3868   1E8A FD 43         mov [d], b
3869   1E8C 0A BD 22      jmp _if62_exit
3870   1E8F             _if62_else:
3871   1E8F             ;; if(*prog == '-'){ 
3872   1E8F             _if64_cond:
3873   1E8F 29 2D 25      mov b, [_prog] ; $prog           
3874   1E92 74            mov d, b
3875   1E93 32            mov bl, [d]
3876   1E94 A7 00         mov bh, 0
3877   1E96             ; START RELATIONAL
3878   1E96 D7            push a
3879   1E97 11            mov a, b
3880   1E98 26 2D 00      mov b, $2d
3881   1E9B B0            cmp a, b
3882   1E9C FD 71         seq ; ==
3883   1E9E E4            pop a
3884   1E9F             ; END RELATIONAL
3885   1E9F C0 00 00      cmp b, 0
3886   1EA2 C6 21 1F      je _if64_else
3887   1EA5             _if64_true:
3888   1EA5             ;; *t++ = *prog++; 
3889   1EA5 2C FF FF      mov b, [bp + -1] ; $t             
3890   1EA8 FD 79         mov g, b
3891   1EAA FD 77         inc b
3892   1EAC FA FF FF      lea d, [bp + -1] ; $t
3893   1EAF FD 43         mov [d], b
3894   1EB1 FD 27         mov b, g
3895   1EB3 D8            push b
3896   1EB4 29 2D 25      mov b, [_prog] ; $prog           
3897   1EB7 FD 79         mov g, b
3898   1EB9 FD 77         inc b
3899   1EBB 3B 2D 25      mov d, _prog ; $prog
3900   1EBE FD 43         mov [d], b
3901   1EC0 FD 27         mov b, g
3902   1EC2 74            mov d, b
3903   1EC3 32            mov bl, [d]
3904   1EC4 A7 00         mov bh, 0
3905   1EC6 E7            pop d
3906   1EC7 FD 3E         mov [d], bl
3907   1EC9             ;; if(*prog == '-'){ 
3908   1EC9             _if65_cond:
3909   1EC9 29 2D 25      mov b, [_prog] ; $prog           
3910   1ECC 74            mov d, b
3911   1ECD 32            mov bl, [d]
3912   1ECE A7 00         mov bh, 0
3913   1ED0             ; START RELATIONAL
3914   1ED0 D7            push a
3915   1ED1 11            mov a, b
3916   1ED2 26 2D 00      mov b, $2d
3917   1ED5 B0            cmp a, b
3918   1ED6 FD 71         seq ; ==
3919   1ED8 E4            pop a
3920   1ED9             ; END RELATIONAL
3921   1ED9 C0 00 00      cmp b, 0
3922   1EDC C6 0E 1F      je _if65_else
3923   1EDF             _if65_true:
3924   1EDF             ;; *t++ = *prog++; 
3925   1EDF 2C FF FF      mov b, [bp + -1] ; $t             
3926   1EE2 FD 79         mov g, b
3927   1EE4 FD 77         inc b
3928   1EE6 FA FF FF      lea d, [bp + -1] ; $t
3929   1EE9 FD 43         mov [d], b
3930   1EEB FD 27         mov b, g
3931   1EED D8            push b
3932   1EEE 29 2D 25      mov b, [_prog] ; $prog           
3933   1EF1 FD 79         mov g, b
3934   1EF3 FD 77         inc b
3935   1EF5 3B 2D 25      mov d, _prog ; $prog
3936   1EF8 FD 43         mov [d], b
3937   1EFA FD 27         mov b, g
3938   1EFC 74            mov d, b
3939   1EFD 32            mov bl, [d]
3940   1EFE A7 00         mov bh, 0
3941   1F00 E7            pop d
3942   1F01 FD 3E         mov [d], bl
3943   1F03             ;; tok = DECREMENT; 
3944   1F03 3B 29 25      mov d, _tok ; $tok         
3945   1F06 26 06 00      mov b, 6; DECREMENT        
3946   1F09 FD 43         mov [d], b
3947   1F0B 0A 16 1F      jmp _if65_exit
3948   1F0E             _if65_else:
3949   1F0E             ;; tok = MINUS; 
3950   1F0E 3B 29 25      mov d, _tok ; $tok         
3951   1F11 26 02 00      mov b, 2; MINUS        
3952   1F14 FD 43         mov [d], b
3953   1F16             _if65_exit:
3954   1F16             ;; toktype = DELIMITER;   
3955   1F16 3B 2B 25      mov d, _toktype ; $toktype         
3956   1F19 26 01 00      mov b, 1; DELIMITER        
3957   1F1C FD 43         mov [d], b
3958   1F1E 0A BD 22      jmp _if64_exit
3959   1F21             _if64_else:
3960   1F21             ;; if(*prog == '$'){ 
3961   1F21             _if66_cond:
3962   1F21 29 2D 25      mov b, [_prog] ; $prog           
3963   1F24 74            mov d, b
3964   1F25 32            mov bl, [d]
3965   1F26 A7 00         mov bh, 0
3966   1F28             ; START RELATIONAL
3967   1F28 D7            push a
3968   1F29 11            mov a, b
3969   1F2A 26 24 00      mov b, $24
3970   1F2D B0            cmp a, b
3971   1F2E FD 71         seq ; ==
3972   1F30 E4            pop a
3973   1F31             ; END RELATIONAL
3974   1F31 C0 00 00      cmp b, 0
3975   1F34 C6 6E 1F      je _if66_else
3976   1F37             _if66_true:
3977   1F37             ;; *t++ = *prog++; 
3978   1F37 2C FF FF      mov b, [bp + -1] ; $t             
3979   1F3A FD 79         mov g, b
3980   1F3C FD 77         inc b
3981   1F3E FA FF FF      lea d, [bp + -1] ; $t
3982   1F41 FD 43         mov [d], b
3983   1F43 FD 27         mov b, g
3984   1F45 D8            push b
3985   1F46 29 2D 25      mov b, [_prog] ; $prog           
3986   1F49 FD 79         mov g, b
3987   1F4B FD 77         inc b
3988   1F4D 3B 2D 25      mov d, _prog ; $prog
3989   1F50 FD 43         mov [d], b
3990   1F52 FD 27         mov b, g
3991   1F54 74            mov d, b
3992   1F55 32            mov bl, [d]
3993   1F56 A7 00         mov bh, 0
3994   1F58 E7            pop d
3995   1F59 FD 3E         mov [d], bl
3996   1F5B             ;; tok = DOLLAR; 
3997   1F5B 3B 29 25      mov d, _tok ; $tok         
3998   1F5E 26 12 00      mov b, 18; DOLLAR        
3999   1F61 FD 43         mov [d], b
4000   1F63             ;; toktype = DELIMITER;   
4001   1F63 3B 2B 25      mov d, _toktype ; $toktype         
4002   1F66 26 01 00      mov b, 1; DELIMITER        
4003   1F69 FD 43         mov [d], b
4004   1F6B 0A BD 22      jmp _if66_exit
4005   1F6E             _if66_else:
4006   1F6E             ;; if(*prog == '^'){ 
4007   1F6E             _if67_cond:
4008   1F6E 29 2D 25      mov b, [_prog] ; $prog           
4009   1F71 74            mov d, b
4010   1F72 32            mov bl, [d]
4011   1F73 A7 00         mov bh, 0
4012   1F75             ; START RELATIONAL
4013   1F75 D7            push a
4014   1F76 11            mov a, b
4015   1F77 26 5E 00      mov b, $5e
4016   1F7A B0            cmp a, b
4017   1F7B FD 71         seq ; ==
4018   1F7D E4            pop a
4019   1F7E             ; END RELATIONAL
4020   1F7E C0 00 00      cmp b, 0
4021   1F81 C6 BB 1F      je _if67_else
4022   1F84             _if67_true:
4023   1F84             ;; *t++ = *prog++; 
4024   1F84 2C FF FF      mov b, [bp + -1] ; $t             
4025   1F87 FD 79         mov g, b
4026   1F89 FD 77         inc b
4027   1F8B FA FF FF      lea d, [bp + -1] ; $t
4028   1F8E FD 43         mov [d], b
4029   1F90 FD 27         mov b, g
4030   1F92 D8            push b
4031   1F93 29 2D 25      mov b, [_prog] ; $prog           
4032   1F96 FD 79         mov g, b
4033   1F98 FD 77         inc b
4034   1F9A 3B 2D 25      mov d, _prog ; $prog
4035   1F9D FD 43         mov [d], b
4036   1F9F FD 27         mov b, g
4037   1FA1 74            mov d, b
4038   1FA2 32            mov bl, [d]
4039   1FA3 A7 00         mov bh, 0
4040   1FA5 E7            pop d
4041   1FA6 FD 3E         mov [d], bl
4042   1FA8             ;; tok = BITWISE_XOR; 
4043   1FA8 3B 29 25      mov d, _tok ; $tok         
4044   1FAB 26 17 00      mov b, 23; BITWISE_XOR        
4045   1FAE FD 43         mov [d], b
4046   1FB0             ;; toktype = DELIMITER;   
4047   1FB0 3B 2B 25      mov d, _toktype ; $toktype         
4048   1FB3 26 01 00      mov b, 1; DELIMITER        
4049   1FB6 FD 43         mov [d], b
4050   1FB8 0A BD 22      jmp _if67_exit
4051   1FBB             _if67_else:
4052   1FBB             ;; if(*prog == '@'){ 
4053   1FBB             _if68_cond:
4054   1FBB 29 2D 25      mov b, [_prog] ; $prog           
4055   1FBE 74            mov d, b
4056   1FBF 32            mov bl, [d]
4057   1FC0 A7 00         mov bh, 0
4058   1FC2             ; START RELATIONAL
4059   1FC2 D7            push a
4060   1FC3 11            mov a, b
4061   1FC4 26 40 00      mov b, $40
4062   1FC7 B0            cmp a, b
4063   1FC8 FD 71         seq ; ==
4064   1FCA E4            pop a
4065   1FCB             ; END RELATIONAL
4066   1FCB C0 00 00      cmp b, 0
4067   1FCE C6 08 20      je _if68_else
4068   1FD1             _if68_true:
4069   1FD1             ;; *t++ = *prog++; 
4070   1FD1 2C FF FF      mov b, [bp + -1] ; $t             
4071   1FD4 FD 79         mov g, b
4072   1FD6 FD 77         inc b
4073   1FD8 FA FF FF      lea d, [bp + -1] ; $t
4074   1FDB FD 43         mov [d], b
4075   1FDD FD 27         mov b, g
4076   1FDF D8            push b
4077   1FE0 29 2D 25      mov b, [_prog] ; $prog           
4078   1FE3 FD 79         mov g, b
4079   1FE5 FD 77         inc b
4080   1FE7 3B 2D 25      mov d, _prog ; $prog
4081   1FEA FD 43         mov [d], b
4082   1FEC FD 27         mov b, g
4083   1FEE 74            mov d, b
4084   1FEF 32            mov bl, [d]
4085   1FF0 A7 00         mov bh, 0
4086   1FF2 E7            pop d
4087   1FF3 FD 3E         mov [d], bl
4088   1FF5             ;; tok = AT; 
4089   1FF5 3B 29 25      mov d, _tok ; $tok         
4090   1FF8 26 14 00      mov b, 20; AT        
4091   1FFB FD 43         mov [d], b
4092   1FFD             ;; toktype = DELIMITER;   
4093   1FFD 3B 2B 25      mov d, _toktype ; $toktype         
4094   2000 26 01 00      mov b, 1; DELIMITER        
4095   2003 FD 43         mov [d], b
4096   2005 0A BD 22      jmp _if68_exit
4097   2008             _if68_else:
4098   2008             ;; if(*prog == '*'){ 
4099   2008             _if69_cond:
4100   2008 29 2D 25      mov b, [_prog] ; $prog           
4101   200B 74            mov d, b
4102   200C 32            mov bl, [d]
4103   200D A7 00         mov bh, 0
4104   200F             ; START RELATIONAL
4105   200F D7            push a
4106   2010 11            mov a, b
4107   2011 26 2A 00      mov b, $2a
4108   2014 B0            cmp a, b
4109   2015 FD 71         seq ; ==
4110   2017 E4            pop a
4111   2018             ; END RELATIONAL
4112   2018 C0 00 00      cmp b, 0
4113   201B C6 55 20      je _if69_else
4114   201E             _if69_true:
4115   201E             ;; *t++ = *prog++; 
4116   201E 2C FF FF      mov b, [bp + -1] ; $t             
4117   2021 FD 79         mov g, b
4118   2023 FD 77         inc b
4119   2025 FA FF FF      lea d, [bp + -1] ; $t
4120   2028 FD 43         mov [d], b
4121   202A FD 27         mov b, g
4122   202C D8            push b
4123   202D 29 2D 25      mov b, [_prog] ; $prog           
4124   2030 FD 79         mov g, b
4125   2032 FD 77         inc b
4126   2034 3B 2D 25      mov d, _prog ; $prog
4127   2037 FD 43         mov [d], b
4128   2039 FD 27         mov b, g
4129   203B 74            mov d, b
4130   203C 32            mov bl, [d]
4131   203D A7 00         mov bh, 0
4132   203F E7            pop d
4133   2040 FD 3E         mov [d], bl
4134   2042             ;; tok = STAR; 
4135   2042 3B 29 25      mov d, _tok ; $tok         
4136   2045 26 03 00      mov b, 3; STAR        
4137   2048 FD 43         mov [d], b
4138   204A             ;; toktype = DELIMITER;   
4139   204A 3B 2B 25      mov d, _toktype ; $toktype         
4140   204D 26 01 00      mov b, 1; DELIMITER        
4141   2050 FD 43         mov [d], b
4142   2052 0A BD 22      jmp _if69_exit
4143   2055             _if69_else:
4144   2055             ;; if(*prog == '/'){ 
4145   2055             _if70_cond:
4146   2055 29 2D 25      mov b, [_prog] ; $prog           
4147   2058 74            mov d, b
4148   2059 32            mov bl, [d]
4149   205A A7 00         mov bh, 0
4150   205C             ; START RELATIONAL
4151   205C D7            push a
4152   205D 11            mov a, b
4153   205E 26 2F 00      mov b, $2f
4154   2061 B0            cmp a, b
4155   2062 FD 71         seq ; ==
4156   2064 E4            pop a
4157   2065             ; END RELATIONAL
4158   2065 C0 00 00      cmp b, 0
4159   2068 C6 A2 20      je _if70_else
4160   206B             _if70_true:
4161   206B             ;; *t++ = *prog++; 
4162   206B 2C FF FF      mov b, [bp + -1] ; $t             
4163   206E FD 79         mov g, b
4164   2070 FD 77         inc b
4165   2072 FA FF FF      lea d, [bp + -1] ; $t
4166   2075 FD 43         mov [d], b
4167   2077 FD 27         mov b, g
4168   2079 D8            push b
4169   207A 29 2D 25      mov b, [_prog] ; $prog           
4170   207D FD 79         mov g, b
4171   207F FD 77         inc b
4172   2081 3B 2D 25      mov d, _prog ; $prog
4173   2084 FD 43         mov [d], b
4174   2086 FD 27         mov b, g
4175   2088 74            mov d, b
4176   2089 32            mov bl, [d]
4177   208A A7 00         mov bh, 0
4178   208C E7            pop d
4179   208D FD 3E         mov [d], bl
4180   208F             ;; tok = FSLASH; 
4181   208F 3B 29 25      mov d, _tok ; $tok         
4182   2092 26 04 00      mov b, 4; FSLASH        
4183   2095 FD 43         mov [d], b
4184   2097             ;; toktype = DELIMITER;   
4185   2097 3B 2B 25      mov d, _toktype ; $toktype         
4186   209A 26 01 00      mov b, 1; DELIMITER        
4187   209D FD 43         mov [d], b
4188   209F 0A BD 22      jmp _if70_exit
4189   20A2             _if70_else:
4190   20A2             ;; if(*prog == '%'){ 
4191   20A2             _if71_cond:
4192   20A2 29 2D 25      mov b, [_prog] ; $prog           
4193   20A5 74            mov d, b
4194   20A6 32            mov bl, [d]
4195   20A7 A7 00         mov bh, 0
4196   20A9             ; START RELATIONAL
4197   20A9 D7            push a
4198   20AA 11            mov a, b
4199   20AB 26 25 00      mov b, $25
4200   20AE B0            cmp a, b
4201   20AF FD 71         seq ; ==
4202   20B1 E4            pop a
4203   20B2             ; END RELATIONAL
4204   20B2 C0 00 00      cmp b, 0
4205   20B5 C6 EF 20      je _if71_else
4206   20B8             _if71_true:
4207   20B8             ;; *t++ = *prog++; 
4208   20B8 2C FF FF      mov b, [bp + -1] ; $t             
4209   20BB FD 79         mov g, b
4210   20BD FD 77         inc b
4211   20BF FA FF FF      lea d, [bp + -1] ; $t
4212   20C2 FD 43         mov [d], b
4213   20C4 FD 27         mov b, g
4214   20C6 D8            push b
4215   20C7 29 2D 25      mov b, [_prog] ; $prog           
4216   20CA FD 79         mov g, b
4217   20CC FD 77         inc b
4218   20CE 3B 2D 25      mov d, _prog ; $prog
4219   20D1 FD 43         mov [d], b
4220   20D3 FD 27         mov b, g
4221   20D5 74            mov d, b
4222   20D6 32            mov bl, [d]
4223   20D7 A7 00         mov bh, 0
4224   20D9 E7            pop d
4225   20DA FD 3E         mov [d], bl
4226   20DC             ;; tok = MOD; 
4227   20DC 3B 29 25      mov d, _tok ; $tok         
4228   20DF 26 07 00      mov b, 7; MOD        
4229   20E2 FD 43         mov [d], b
4230   20E4             ;; toktype = DELIMITER;   
4231   20E4 3B 2B 25      mov d, _toktype ; $toktype         
4232   20E7 26 01 00      mov b, 1; DELIMITER        
4233   20EA FD 43         mov [d], b
4234   20EC 0A BD 22      jmp _if71_exit
4235   20EF             _if71_else:
4236   20EF             ;; if(*prog == '('){ 
4237   20EF             _if72_cond:
4238   20EF 29 2D 25      mov b, [_prog] ; $prog           
4239   20F2 74            mov d, b
4240   20F3 32            mov bl, [d]
4241   20F4 A7 00         mov bh, 0
4242   20F6             ; START RELATIONAL
4243   20F6 D7            push a
4244   20F7 11            mov a, b
4245   20F8 26 28 00      mov b, $28
4246   20FB B0            cmp a, b
4247   20FC FD 71         seq ; ==
4248   20FE E4            pop a
4249   20FF             ; END RELATIONAL
4250   20FF C0 00 00      cmp b, 0
4251   2102 C6 3C 21      je _if72_else
4252   2105             _if72_true:
4253   2105             ;; *t++ = *prog++; 
4254   2105 2C FF FF      mov b, [bp + -1] ; $t             
4255   2108 FD 79         mov g, b
4256   210A FD 77         inc b
4257   210C FA FF FF      lea d, [bp + -1] ; $t
4258   210F FD 43         mov [d], b
4259   2111 FD 27         mov b, g
4260   2113 D8            push b
4261   2114 29 2D 25      mov b, [_prog] ; $prog           
4262   2117 FD 79         mov g, b
4263   2119 FD 77         inc b
4264   211B 3B 2D 25      mov d, _prog ; $prog
4265   211E FD 43         mov [d], b
4266   2120 FD 27         mov b, g
4267   2122 74            mov d, b
4268   2123 32            mov bl, [d]
4269   2124 A7 00         mov bh, 0
4270   2126 E7            pop d
4271   2127 FD 3E         mov [d], bl
4272   2129             ;; tok = OPENING_PAREN; 
4273   2129 3B 29 25      mov d, _tok ; $tok         
4274   212C 26 1C 00      mov b, 28; OPENING_PAREN        
4275   212F FD 43         mov [d], b
4276   2131             ;; toktype = DELIMITER;   
4277   2131 3B 2B 25      mov d, _toktype ; $toktype         
4278   2134 26 01 00      mov b, 1; DELIMITER        
4279   2137 FD 43         mov [d], b
4280   2139 0A BD 22      jmp _if72_exit
4281   213C             _if72_else:
4282   213C             ;; if(*prog == ')'){ 
4283   213C             _if73_cond:
4284   213C 29 2D 25      mov b, [_prog] ; $prog           
4285   213F 74            mov d, b
4286   2140 32            mov bl, [d]
4287   2141 A7 00         mov bh, 0
4288   2143             ; START RELATIONAL
4289   2143 D7            push a
4290   2144 11            mov a, b
4291   2145 26 29 00      mov b, $29
4292   2148 B0            cmp a, b
4293   2149 FD 71         seq ; ==
4294   214B E4            pop a
4295   214C             ; END RELATIONAL
4296   214C C0 00 00      cmp b, 0
4297   214F C6 89 21      je _if73_else
4298   2152             _if73_true:
4299   2152             ;; *t++ = *prog++; 
4300   2152 2C FF FF      mov b, [bp + -1] ; $t             
4301   2155 FD 79         mov g, b
4302   2157 FD 77         inc b
4303   2159 FA FF FF      lea d, [bp + -1] ; $t
4304   215C FD 43         mov [d], b
4305   215E FD 27         mov b, g
4306   2160 D8            push b
4307   2161 29 2D 25      mov b, [_prog] ; $prog           
4308   2164 FD 79         mov g, b
4309   2166 FD 77         inc b
4310   2168 3B 2D 25      mov d, _prog ; $prog
4311   216B FD 43         mov [d], b
4312   216D FD 27         mov b, g
4313   216F 74            mov d, b
4314   2170 32            mov bl, [d]
4315   2171 A7 00         mov bh, 0
4316   2173 E7            pop d
4317   2174 FD 3E         mov [d], bl
4318   2176             ;; tok = CLOSING_PAREN; 
4319   2176 3B 29 25      mov d, _tok ; $tok         
4320   2179 26 1D 00      mov b, 29; CLOSING_PAREN        
4321   217C FD 43         mov [d], b
4322   217E             ;; toktype = DELIMITER;   
4323   217E 3B 2B 25      mov d, _toktype ; $toktype         
4324   2181 26 01 00      mov b, 1; DELIMITER        
4325   2184 FD 43         mov [d], b
4326   2186 0A BD 22      jmp _if73_exit
4327   2189             _if73_else:
4328   2189             ;; if(*prog == ';'){ 
4329   2189             _if74_cond:
4330   2189 29 2D 25      mov b, [_prog] ; $prog           
4331   218C 74            mov d, b
4332   218D 32            mov bl, [d]
4333   218E A7 00         mov bh, 0
4334   2190             ; START RELATIONAL
4335   2190 D7            push a
4336   2191 11            mov a, b
4337   2192 26 3B 00      mov b, $3b
4338   2195 B0            cmp a, b
4339   2196 FD 71         seq ; ==
4340   2198 E4            pop a
4341   2199             ; END RELATIONAL
4342   2199 C0 00 00      cmp b, 0
4343   219C C6 D6 21      je _if74_else
4344   219F             _if74_true:
4345   219F             ;; *t++ = *prog++; 
4346   219F 2C FF FF      mov b, [bp + -1] ; $t             
4347   21A2 FD 79         mov g, b
4348   21A4 FD 77         inc b
4349   21A6 FA FF FF      lea d, [bp + -1] ; $t
4350   21A9 FD 43         mov [d], b
4351   21AB FD 27         mov b, g
4352   21AD D8            push b
4353   21AE 29 2D 25      mov b, [_prog] ; $prog           
4354   21B1 FD 79         mov g, b
4355   21B3 FD 77         inc b
4356   21B5 3B 2D 25      mov d, _prog ; $prog
4357   21B8 FD 43         mov [d], b
4358   21BA FD 27         mov b, g
4359   21BC 74            mov d, b
4360   21BD 32            mov bl, [d]
4361   21BE A7 00         mov bh, 0
4362   21C0 E7            pop d
4363   21C1 FD 3E         mov [d], bl
4364   21C3             ;; tok = SEMICOLON; 
4365   21C3 3B 29 25      mov d, _tok ; $tok         
4366   21C6 26 23 00      mov b, 35; SEMICOLON        
4367   21C9 FD 43         mov [d], b
4368   21CB             ;; toktype = DELIMITER;   
4369   21CB 3B 2B 25      mov d, _toktype ; $toktype         
4370   21CE 26 01 00      mov b, 1; DELIMITER        
4371   21D1 FD 43         mov [d], b
4372   21D3 0A BD 22      jmp _if74_exit
4373   21D6             _if74_else:
4374   21D6             ;; if(*prog == ':'){ 
4375   21D6             _if75_cond:
4376   21D6 29 2D 25      mov b, [_prog] ; $prog           
4377   21D9 74            mov d, b
4378   21DA 32            mov bl, [d]
4379   21DB A7 00         mov bh, 0
4380   21DD             ; START RELATIONAL
4381   21DD D7            push a
4382   21DE 11            mov a, b
4383   21DF 26 3A 00      mov b, $3a
4384   21E2 B0            cmp a, b
4385   21E3 FD 71         seq ; ==
4386   21E5 E4            pop a
4387   21E6             ; END RELATIONAL
4388   21E6 C0 00 00      cmp b, 0
4389   21E9 C6 23 22      je _if75_else
4390   21EC             _if75_true:
4391   21EC             ;; *t++ = *prog++; 
4392   21EC 2C FF FF      mov b, [bp + -1] ; $t             
4393   21EF FD 79         mov g, b
4394   21F1 FD 77         inc b
4395   21F3 FA FF FF      lea d, [bp + -1] ; $t
4396   21F6 FD 43         mov [d], b
4397   21F8 FD 27         mov b, g
4398   21FA D8            push b
4399   21FB 29 2D 25      mov b, [_prog] ; $prog           
4400   21FE FD 79         mov g, b
4401   2200 FD 77         inc b
4402   2202 3B 2D 25      mov d, _prog ; $prog
4403   2205 FD 43         mov [d], b
4404   2207 FD 27         mov b, g
4405   2209 74            mov d, b
4406   220A 32            mov bl, [d]
4407   220B A7 00         mov bh, 0
4408   220D E7            pop d
4409   220E FD 3E         mov [d], bl
4410   2210             ;; tok = COLON; 
4411   2210 3B 29 25      mov d, _tok ; $tok         
4412   2213 26 22 00      mov b, 34; COLON        
4413   2216 FD 43         mov [d], b
4414   2218             ;; toktype = DELIMITER;   
4415   2218 3B 2B 25      mov d, _toktype ; $toktype         
4416   221B 26 01 00      mov b, 1; DELIMITER        
4417   221E FD 43         mov [d], b
4418   2220 0A BD 22      jmp _if75_exit
4419   2223             _if75_else:
4420   2223             ;; if(*prog == ','){ 
4421   2223             _if76_cond:
4422   2223 29 2D 25      mov b, [_prog] ; $prog           
4423   2226 74            mov d, b
4424   2227 32            mov bl, [d]
4425   2228 A7 00         mov bh, 0
4426   222A             ; START RELATIONAL
4427   222A D7            push a
4428   222B 11            mov a, b
4429   222C 26 2C 00      mov b, $2c
4430   222F B0            cmp a, b
4431   2230 FD 71         seq ; ==
4432   2232 E4            pop a
4433   2233             ; END RELATIONAL
4434   2233 C0 00 00      cmp b, 0
4435   2236 C6 70 22      je _if76_else
4436   2239             _if76_true:
4437   2239             ;; *t++ = *prog++; 
4438   2239 2C FF FF      mov b, [bp + -1] ; $t             
4439   223C FD 79         mov g, b
4440   223E FD 77         inc b
4441   2240 FA FF FF      lea d, [bp + -1] ; $t
4442   2243 FD 43         mov [d], b
4443   2245 FD 27         mov b, g
4444   2247 D8            push b
4445   2248 29 2D 25      mov b, [_prog] ; $prog           
4446   224B FD 79         mov g, b
4447   224D FD 77         inc b
4448   224F 3B 2D 25      mov d, _prog ; $prog
4449   2252 FD 43         mov [d], b
4450   2254 FD 27         mov b, g
4451   2256 74            mov d, b
4452   2257 32            mov bl, [d]
4453   2258 A7 00         mov bh, 0
4454   225A E7            pop d
4455   225B FD 3E         mov [d], bl
4456   225D             ;; tok = COMMA; 
4457   225D 3B 29 25      mov d, _tok ; $tok         
4458   2260 26 24 00      mov b, 36; COMMA        
4459   2263 FD 43         mov [d], b
4460   2265             ;; toktype = DELIMITER;   
4461   2265 3B 2B 25      mov d, _toktype ; $toktype         
4462   2268 26 01 00      mov b, 1; DELIMITER        
4463   226B FD 43         mov [d], b
4464   226D 0A BD 22      jmp _if76_exit
4465   2270             _if76_else:
4466   2270             ;; if(*prog == '.'){ 
4467   2270             _if77_cond:
4468   2270 29 2D 25      mov b, [_prog] ; $prog           
4469   2273 74            mov d, b
4470   2274 32            mov bl, [d]
4471   2275 A7 00         mov bh, 0
4472   2277             ; START RELATIONAL
4473   2277 D7            push a
4474   2278 11            mov a, b
4475   2279 26 2E 00      mov b, $2e
4476   227C B0            cmp a, b
4477   227D FD 71         seq ; ==
4478   227F E4            pop a
4479   2280             ; END RELATIONAL
4480   2280 C0 00 00      cmp b, 0
4481   2283 C6 BD 22      je _if77_exit
4482   2286             _if77_true:
4483   2286             ;; *t++ = *prog++; 
4484   2286 2C FF FF      mov b, [bp + -1] ; $t             
4485   2289 FD 79         mov g, b
4486   228B FD 77         inc b
4487   228D FA FF FF      lea d, [bp + -1] ; $t
4488   2290 FD 43         mov [d], b
4489   2292 FD 27         mov b, g
4490   2294 D8            push b
4491   2295 29 2D 25      mov b, [_prog] ; $prog           
4492   2298 FD 79         mov g, b
4493   229A FD 77         inc b
4494   229C 3B 2D 25      mov d, _prog ; $prog
4495   229F FD 43         mov [d], b
4496   22A1 FD 27         mov b, g
4497   22A3 74            mov d, b
4498   22A4 32            mov bl, [d]
4499   22A5 A7 00         mov bh, 0
4500   22A7 E7            pop d
4501   22A8 FD 3E         mov [d], bl
4502   22AA             ;; tok = DOT; 
4503   22AA 3B 29 25      mov d, _tok ; $tok         
4504   22AD 26 25 00      mov b, 37; DOT        
4505   22B0 FD 43         mov [d], b
4506   22B2             ;; toktype = DELIMITER;   
4507   22B2 3B 2B 25      mov d, _toktype ; $toktype         
4508   22B5 26 01 00      mov b, 1; DELIMITER        
4509   22B8 FD 43         mov [d], b
4510   22BA 0A BD 22      jmp _if77_exit
4511   22BD             _if77_exit:
4512   22BD             _if76_exit:
4513   22BD             _if75_exit:
4514   22BD             _if74_exit:
4515   22BD             _if73_exit:
4516   22BD             _if72_exit:
4517   22BD             _if71_exit:
4518   22BD             _if70_exit:
4519   22BD             _if69_exit:
4520   22BD             _if68_exit:
4521   22BD             _if67_exit:
4522   22BD             _if66_exit:
4523   22BD             _if64_exit:
4524   22BD             _if62_exit:
4525   22BD             _if60_exit:
4526   22BD             _if57_exit:
4527   22BD             _if54_exit:
4528   22BD             _if53_exit:
4529   22BD             _if51_exit:
4530   22BD             _if49_exit:
4531   22BD             _if47_exit:
4532   22BD             _if46_exit:
4533   22BD             _if45_exit:
4534   22BD             _if44_exit:
4535   22BD             _if43_exit:
4536   22BD             _if42_exit:
4537   22BD             _if39_exit:
4538   22BD             _if37_exit:
4539   22BD             _if35_exit:
4540   22BD             ;; *t = '\0'; 
4541   22BD 2C FF FF      mov b, [bp + -1] ; $t             
4542   22C0 D8            push b
4543   22C1 26 00 00      mov b, $0
4544   22C4 E7            pop d
4545   22C5 FD 3E         mov [d], bl
4546   22C7 F9            leave
4547   22C8 09            ret
4548   22C9             
4549   22C9             convert_constant:
4550   22C9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4551   22CC             ; $s 
4552   22CC             ; $t 
4553   22CC 52 04 00      sub sp, 4
4554   22CF             ;; t = token; 
4555   22CF FA FD FF      lea d, [bp + -3] ; $t         
4556   22D2 26 2F 25      mov b, _token_data ; $token                   
4557   22D5 FD 43         mov [d], b
4558   22D7             ;; s = string_const; 
4559   22D7 FA FF FF      lea d, [bp + -1] ; $s         
4560   22DA 26 2F 26      mov b, _string_const_data ; $string_const                   
4561   22DD FD 43         mov [d], b
4562   22DF             ;; if(toktype == CHAR_CONST){ 
4563   22DF             _if78_cond:
4564   22DF 29 2B 25      mov b, [_toktype] ; $toktype           
4565   22E2             ; START RELATIONAL
4566   22E2 D7            push a
4567   22E3 11            mov a, b
4568   22E4 26 02 00      mov b, 2; CHAR_CONST
4569   22E7 B0            cmp a, b
4570   22E8 FD 71         seq ; ==
4571   22EA E4            pop a
4572   22EB             ; END RELATIONAL
4573   22EB C0 00 00      cmp b, 0
4574   22EE C6 88 24      je _if78_else
4575   22F1             _if78_true:
4576   22F1             ;; t++; 
4577   22F1 2C FD FF      mov b, [bp + -3] ; $t             
4578   22F4 FD 79         mov g, b
4579   22F6 FD 77         inc b
4580   22F8 FA FD FF      lea d, [bp + -3] ; $t
4581   22FB FD 43         mov [d], b
4582   22FD FD 27         mov b, g
4583   22FF             ;; if(*t == '\\'){ 
4584   22FF             _if79_cond:
4585   22FF 2C FD FF      mov b, [bp + -3] ; $t             
4586   2302 74            mov d, b
4587   2303 32            mov bl, [d]
4588   2304 A7 00         mov bh, 0
4589   2306             ; START RELATIONAL
4590   2306 D7            push a
4591   2307 11            mov a, b
4592   2308 26 5C 00      mov b, $5c
4593   230B B0            cmp a, b
4594   230C FD 71         seq ; ==
4595   230E E4            pop a
4596   230F             ; END RELATIONAL
4597   230F C0 00 00      cmp b, 0
4598   2312 C6 6C 24      je _if79_else
4599   2315             _if79_true:
4600   2315             ;; t++; 
4601   2315 2C FD FF      mov b, [bp + -3] ; $t             
4602   2318 FD 79         mov g, b
4603   231A FD 77         inc b
4604   231C FA FD FF      lea d, [bp + -3] ; $t
4605   231F FD 43         mov [d], b
4606   2321 FD 27         mov b, g
4607   2323             ;; switch(*t){ 
4608   2323             _switch80_expr:
4609   2323 2C FD FF      mov b, [bp + -3] ; $t             
4610   2326 74            mov d, b
4611   2327 32            mov bl, [d]
4612   2328 A7 00         mov bh, 0
4613   232A             _switch80_comparisons:
4614   232A C1 30         cmp bl, $30
4615   232C C6 64 23      je _switch80_case0
4616   232F C1 61         cmp bl, $61
4617   2331 C6 7C 23      je _switch80_case1
4618   2334 C1 62         cmp bl, $62
4619   2336 C6 94 23      je _switch80_case2
4620   2339 C1 66         cmp bl, $66
4621   233B C6 AC 23      je _switch80_case3
4622   233E C1 6E         cmp bl, $6e
4623   2340 C6 C4 23      je _switch80_case4
4624   2343 C1 72         cmp bl, $72
4625   2345 C6 DC 23      je _switch80_case5
4626   2348 C1 74         cmp bl, $74
4627   234A C6 F4 23      je _switch80_case6
4628   234D C1 76         cmp bl, $76
4629   234F C6 0C 24      je _switch80_case7
4630   2352 C1 5C         cmp bl, $5c
4631   2354 C6 24 24      je _switch80_case8
4632   2357 C1 27         cmp bl, $27
4633   2359 C6 3C 24      je _switch80_case9
4634   235C C1 22         cmp bl, $22
4635   235E C6 54 24      je _switch80_case10
4636   2361 0A 69 24      jmp _switch80_exit
4637   2364             _switch80_case0:
4638   2364             ;; *s++ = '\0'; 
4639   2364 2C FF FF      mov b, [bp + -1] ; $s             
4640   2367 FD 79         mov g, b
4641   2369 FD 77         inc b
4642   236B FA FF FF      lea d, [bp + -1] ; $s
4643   236E FD 43         mov [d], b
4644   2370 FD 27         mov b, g
4645   2372 D8            push b
4646   2373 26 00 00      mov b, $0
4647   2376 E7            pop d
4648   2377 FD 3E         mov [d], bl
4649   2379             ;; break; 
4650   2379 0A 69 24      jmp _switch80_exit ; case break
4651   237C             _switch80_case1:
4652   237C             ;; *s++ = '\a'; 
4653   237C 2C FF FF      mov b, [bp + -1] ; $s             
4654   237F FD 79         mov g, b
4655   2381 FD 77         inc b
4656   2383 FA FF FF      lea d, [bp + -1] ; $s
4657   2386 FD 43         mov [d], b
4658   2388 FD 27         mov b, g
4659   238A D8            push b
4660   238B 26 07 00      mov b, $7
4661   238E E7            pop d
4662   238F FD 3E         mov [d], bl
4663   2391             ;; break; 
4664   2391 0A 69 24      jmp _switch80_exit ; case break
4665   2394             _switch80_case2:
4666   2394             ;; *s++ = '\b'; 
4667   2394 2C FF FF      mov b, [bp + -1] ; $s             
4668   2397 FD 79         mov g, b
4669   2399 FD 77         inc b
4670   239B FA FF FF      lea d, [bp + -1] ; $s
4671   239E FD 43         mov [d], b
4672   23A0 FD 27         mov b, g
4673   23A2 D8            push b
4674   23A3 26 08 00      mov b, $8
4675   23A6 E7            pop d
4676   23A7 FD 3E         mov [d], bl
4677   23A9             ;; break;   
4678   23A9 0A 69 24      jmp _switch80_exit ; case break
4679   23AC             _switch80_case3:
4680   23AC             ;; *s++ = '\f'; 
4681   23AC 2C FF FF      mov b, [bp + -1] ; $s             
4682   23AF FD 79         mov g, b
4683   23B1 FD 77         inc b
4684   23B3 FA FF FF      lea d, [bp + -1] ; $s
4685   23B6 FD 43         mov [d], b
4686   23B8 FD 27         mov b, g
4687   23BA D8            push b
4688   23BB 26 0C 00      mov b, $c
4689   23BE E7            pop d
4690   23BF FD 3E         mov [d], bl
4691   23C1             ;; break; 
4692   23C1 0A 69 24      jmp _switch80_exit ; case break
4693   23C4             _switch80_case4:
4694   23C4             ;; *s++ = '\n'; 
4695   23C4 2C FF FF      mov b, [bp + -1] ; $s             
4696   23C7 FD 79         mov g, b
4697   23C9 FD 77         inc b
4698   23CB FA FF FF      lea d, [bp + -1] ; $s
4699   23CE FD 43         mov [d], b
4700   23D0 FD 27         mov b, g
4701   23D2 D8            push b
4702   23D3 26 0A 00      mov b, $a
4703   23D6 E7            pop d
4704   23D7 FD 3E         mov [d], bl
4705   23D9             ;; break; 
4706   23D9 0A 69 24      jmp _switch80_exit ; case break
4707   23DC             _switch80_case5:
4708   23DC             ;; *s++ = '\r'; 
4709   23DC 2C FF FF      mov b, [bp + -1] ; $s             
4710   23DF FD 79         mov g, b
4711   23E1 FD 77         inc b
4712   23E3 FA FF FF      lea d, [bp + -1] ; $s
4713   23E6 FD 43         mov [d], b
4714   23E8 FD 27         mov b, g
4715   23EA D8            push b
4716   23EB 26 0D 00      mov b, $d
4717   23EE E7            pop d
4718   23EF FD 3E         mov [d], bl
4719   23F1             ;; break; 
4720   23F1 0A 69 24      jmp _switch80_exit ; case break
4721   23F4             _switch80_case6:
4722   23F4             ;; *s++ = '\t'; 
4723   23F4 2C FF FF      mov b, [bp + -1] ; $s             
4724   23F7 FD 79         mov g, b
4725   23F9 FD 77         inc b
4726   23FB FA FF FF      lea d, [bp + -1] ; $s
4727   23FE FD 43         mov [d], b
4728   2400 FD 27         mov b, g
4729   2402 D8            push b
4730   2403 26 09 00      mov b, $9
4731   2406 E7            pop d
4732   2407 FD 3E         mov [d], bl
4733   2409             ;; break; 
4734   2409 0A 69 24      jmp _switch80_exit ; case break
4735   240C             _switch80_case7:
4736   240C             ;; *s++ = '\v'; 
4737   240C 2C FF FF      mov b, [bp + -1] ; $s             
4738   240F FD 79         mov g, b
4739   2411 FD 77         inc b
4740   2413 FA FF FF      lea d, [bp + -1] ; $s
4741   2416 FD 43         mov [d], b
4742   2418 FD 27         mov b, g
4743   241A D8            push b
4744   241B 26 0B 00      mov b, $b
4745   241E E7            pop d
4746   241F FD 3E         mov [d], bl
4747   2421             ;; break; 
4748   2421 0A 69 24      jmp _switch80_exit ; case break
4749   2424             _switch80_case8:
4750   2424             ;; *s++ = '\\'; 
4751   2424 2C FF FF      mov b, [bp + -1] ; $s             
4752   2427 FD 79         mov g, b
4753   2429 FD 77         inc b
4754   242B FA FF FF      lea d, [bp + -1] ; $s
4755   242E FD 43         mov [d], b
4756   2430 FD 27         mov b, g
4757   2432 D8            push b
4758   2433 26 5C 00      mov b, $5c
4759   2436 E7            pop d
4760   2437 FD 3E         mov [d], bl
4761   2439             ;; break; 
4762   2439 0A 69 24      jmp _switch80_exit ; case break
4763   243C             _switch80_case9:
4764   243C             ;; *s++ = '\''; 
4765   243C 2C FF FF      mov b, [bp + -1] ; $s             
4766   243F FD 79         mov g, b
4767   2441 FD 77         inc b
4768   2443 FA FF FF      lea d, [bp + -1] ; $s
4769   2446 FD 43         mov [d], b
4770   2448 FD 27         mov b, g
4771   244A D8            push b
4772   244B 26 27 00      mov b, $27
4773   244E E7            pop d
4774   244F FD 3E         mov [d], bl
4775   2451             ;; break; 
4776   2451 0A 69 24      jmp _switch80_exit ; case break
4777   2454             _switch80_case10:
4778   2454             ;; *s++ = '\"'; 
4779   2454 2C FF FF      mov b, [bp + -1] ; $s             
4780   2457 FD 79         mov g, b
4781   2459 FD 77         inc b
4782   245B FA FF FF      lea d, [bp + -1] ; $s
4783   245E FD 43         mov [d], b
4784   2460 FD 27         mov b, g
4785   2462 D8            push b
4786   2463 26 22 00      mov b, $22
4787   2466 E7            pop d
4788   2467 FD 3E         mov [d], bl
4789   2469             _switch80_exit:
4790   2469 0A 85 24      jmp _if79_exit
4791   246C             _if79_else:
4792   246C             ;; *s++ = *t; 
4793   246C 2C FF FF      mov b, [bp + -1] ; $s             
4794   246F FD 79         mov g, b
4795   2471 FD 77         inc b
4796   2473 FA FF FF      lea d, [bp + -1] ; $s
4797   2476 FD 43         mov [d], b
4798   2478 FD 27         mov b, g
4799   247A D8            push b
4800   247B 2C FD FF      mov b, [bp + -3] ; $t             
4801   247E 74            mov d, b
4802   247F 32            mov bl, [d]
4803   2480 A7 00         mov bh, 0
4804   2482 E7            pop d
4805   2483 FD 3E         mov [d], bl
4806   2485             _if79_exit:
4807   2485 0A F4 24      jmp _if78_exit
4808   2488             _if78_else:
4809   2488             ;; if(toktype == STRING_CONST){ 
4810   2488             _if81_cond:
4811   2488 29 2B 25      mov b, [_toktype] ; $toktype           
4812   248B             ; START RELATIONAL
4813   248B D7            push a
4814   248C 11            mov a, b
4815   248D 26 03 00      mov b, 3; STRING_CONST
4816   2490 B0            cmp a, b
4817   2491 FD 71         seq ; ==
4818   2493 E4            pop a
4819   2494             ; END RELATIONAL
4820   2494 C0 00 00      cmp b, 0
4821   2497 C6 F4 24      je _if81_exit
4822   249A             _if81_true:
4823   249A             ;; t++; 
4824   249A 2C FD FF      mov b, [bp + -3] ; $t             
4825   249D FD 79         mov g, b
4826   249F FD 77         inc b
4827   24A1 FA FD FF      lea d, [bp + -3] ; $t
4828   24A4 FD 43         mov [d], b
4829   24A6 FD 27         mov b, g
4830   24A8             ;; while(*t != '\"' && *t){ 
4831   24A8             _while82_cond:
4832   24A8 2C FD FF      mov b, [bp + -3] ; $t             
4833   24AB 74            mov d, b
4834   24AC 32            mov bl, [d]
4835   24AD A7 00         mov bh, 0
4836   24AF             ; START RELATIONAL
4837   24AF D7            push a
4838   24B0 11            mov a, b
4839   24B1 26 22 00      mov b, $22
4840   24B4 B0            cmp a, b
4841   24B5 FD 72         sneq ; !=
4842   24B7 E4            pop a
4843   24B8             ; END RELATIONAL
4844   24B8 D7            push a
4845   24B9 11            mov a, b
4846   24BA 2C FD FF      mov b, [bp + -3] ; $t             
4847   24BD 74            mov d, b
4848   24BE 32            mov bl, [d]
4849   24BF A7 00         mov bh, 0
4850   24C1 FD A7         sand a, b ; &&
4851   24C3 E4            pop a
4852   24C4 C0 00 00      cmp b, 0
4853   24C7 C6 F1 24      je _while82_exit
4854   24CA             _while82_block:
4855   24CA             ;; *s++ = *t++; 
4856   24CA 2C FF FF      mov b, [bp + -1] ; $s             
4857   24CD FD 79         mov g, b
4858   24CF FD 77         inc b
4859   24D1 FA FF FF      lea d, [bp + -1] ; $s
4860   24D4 FD 43         mov [d], b
4861   24D6 FD 27         mov b, g
4862   24D8 D8            push b
4863   24D9 2C FD FF      mov b, [bp + -3] ; $t             
4864   24DC FD 79         mov g, b
4865   24DE FD 77         inc b
4866   24E0 FA FD FF      lea d, [bp + -3] ; $t
4867   24E3 FD 43         mov [d], b
4868   24E5 FD 27         mov b, g
4869   24E7 74            mov d, b
4870   24E8 32            mov bl, [d]
4871   24E9 A7 00         mov bh, 0
4872   24EB E7            pop d
4873   24EC FD 3E         mov [d], bl
4874   24EE 0A A8 24      jmp _while82_cond
4875   24F1             _while82_exit:
4876   24F1 0A F4 24      jmp _if81_exit
4877   24F4             _if81_exit:
4878   24F4             _if78_exit:
4879   24F4             ;; *s = '\0'; 
4880   24F4 2C FF FF      mov b, [bp + -1] ; $s             
4881   24F7 D8            push b
4882   24F8 26 00 00      mov b, $0
4883   24FB E7            pop d
4884   24FC FD 3E         mov [d], bl
4885   24FE F9            leave
4886   24FF 09            ret
4887   2500             
4888   2500             error:
4889   2500 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4890   2503             ;; printf("\nError: "); 
4891   2503 26 B8 28      mov b, __s7 ; "\nError: "
4892   2506 FD AB         swp b
4893   2508 D8            push b
4894   2509 07 54 0A      call printf
4895   250C 51 02 00      add sp, 2
4896   250F             ;; printf(msg); 
4897   250F 2C 05 00      mov b, [bp + 5] ; $msg             
4898   2512 FD AB         swp b
4899   2514 D8            push b
4900   2515 07 54 0A      call printf
4901   2518 51 02 00      add sp, 2
4902   251B             ;; printf("\n"); 
4903   251B 26 C1 28      mov b, __s8 ; "\n"
4904   251E FD AB         swp b
4905   2520 D8            push b
4906   2521 07 54 0A      call printf
4907   2524 51 02 00      add sp, 2
4908   2527 F9            leave
4909   2528 09            ret
4910   2529             ; --- END TEXT BLOCK
4911   2529             
4912   2529             ; --- BEGIN DATA BLOCK
4913   2529 00 00       _tok: .fill 2, 0
4914   252B 00 00       _toktype: .fill 2, 0
4915   252D 00 00       _prog: .fill 2, 0
4916   252F 00 00 00 00 _token_data: .fill 256, 0
4916   2533 00 00 00 00 
4916   2537 00 00 00 00 
4916   253B 00 00 00 00 
4916   253F 00 00 00 00 
4916   2543 00 00 00 00 
4916   2547 00 00 00 00 
4916   254B 00 00 00 00 
4916   254F 00 00 00 00 
4916   2553 00 00 00 00 
4916   2557 00 00 00 00 
4916   255B 00 00 00 00 
4916   255F 00 00 00 00 
4916   2563 00 00 00 00 
4916   2567 00 00 00 00 
4916   256B 00 00 00 00 
4916   256F 00 00 00 00 
4916   2573 00 00 00 00 
4916   2577 00 00 00 00 
4916   257B 00 00 00 00 
4916   257F 00 00 00 00 
4916   2583 00 00 00 00 
4916   2587 00 00 00 00 
4916   258B 00 00 00 00 
4916   258F 00 00 00 00 
4916   2593 00 00 00 00 
4916   2597 00 00 00 00 
4916   259B 00 00 00 00 
4916   259F 00 00 00 00 
4916   25A3 00 00 00 00 
4916   25A7 00 00 00 00 
4916   25AB 00 00 00 00 
4916   25AF 00 00 00 00 
4916   25B3 00 00 00 00 
4916   25B7 00 00 00 00 
4916   25BB 00 00 00 00 
4916   25BF 00 00 00 00 
4916   25C3 00 00 00 00 
4916   25C7 00 00 00 00 
4916   25CB 00 00 00 00 
4916   25CF 00 00 00 00 
4916   25D3 00 00 00 00 
4916   25D7 00 00 00 00 
4916   25DB 00 00 00 00 
4916   25DF 00 00 00 00 
4916   25E3 00 00 00 00 
4916   25E7 00 00 00 00 
4916   25EB 00 00 00 00 
4916   25EF 00 00 00 00 
4916   25F3 00 00 00 00 
4916   25F7 00 00 00 00 
4916   25FB 00 00 00 00 
4916   25FF 00 00 00 00 
4916   2603 00 00 00 00 
4916   2607 00 00 00 00 
4916   260B 00 00 00 00 
4916   260F 00 00 00 00 
4916   2613 00 00 00 00 
4916   2617 00 00 00 00 
4916   261B 00 00 00 00 
4916   261F 00 00 00 00 
4916   2623 00 00 00 00 
4916   2627 00 00 00 00 
4916   262B 00 00 00 00 
4917   262F 00 00 00 00 _string_const_data: .fill 256, 0
4917   2633 00 00 00 00 
4917   2637 00 00 00 00 
4917   263B 00 00 00 00 
4917   263F 00 00 00 00 
4917   2643 00 00 00 00 
4917   2647 00 00 00 00 
4917   264B 00 00 00 00 
4917   264F 00 00 00 00 
4917   2653 00 00 00 00 
4917   2657 00 00 00 00 
4917   265B 00 00 00 00 
4917   265F 00 00 00 00 
4917   2663 00 00 00 00 
4917   2667 00 00 00 00 
4917   266B 00 00 00 00 
4917   266F 00 00 00 00 
4917   2673 00 00 00 00 
4917   2677 00 00 00 00 
4917   267B 00 00 00 00 
4917   267F 00 00 00 00 
4917   2683 00 00 00 00 
4917   2687 00 00 00 00 
4917   268B 00 00 00 00 
4917   268F 00 00 00 00 
4917   2693 00 00 00 00 
4917   2697 00 00 00 00 
4917   269B 00 00 00 00 
4917   269F 00 00 00 00 
4917   26A3 00 00 00 00 
4917   26A7 00 00 00 00 
4917   26AB 00 00 00 00 
4917   26AF 00 00 00 00 
4917   26B3 00 00 00 00 
4917   26B7 00 00 00 00 
4917   26BB 00 00 00 00 
4917   26BF 00 00 00 00 
4917   26C3 00 00 00 00 
4917   26C7 00 00 00 00 
4917   26CB 00 00 00 00 
4917   26CF 00 00 00 00 
4917   26D3 00 00 00 00 
4917   26D7 00 00 00 00 
4917   26DB 00 00 00 00 
4917   26DF 00 00 00 00 
4917   26E3 00 00 00 00 
4917   26E7 00 00 00 00 
4917   26EB 00 00 00 00 
4917   26EF 00 00 00 00 
4917   26F3 00 00 00 00 
4917   26F7 00 00 00 00 
4917   26FB 00 00 00 00 
4917   26FF 00 00 00 00 
4917   2703 00 00 00 00 
4917   2707 00 00 00 00 
4917   270B 00 00 00 00 
4917   270F 00 00 00 00 
4917   2713 00 00 00 00 
4917   2717 00 00 00 00 
4917   271B 00 00 00 00 
4917   271F 00 00 00 00 
4917   2723 00 00 00 00 
4917   2727 00 00 00 00 
4917   272B 00 00 00 00 
4918   272F 00 00 00 00 _filename_data: .fill 64, 0
4918   2733 00 00 00 00 
4918   2737 00 00 00 00 
4918   273B 00 00 00 00 
4918   273F 00 00 00 00 
4918   2743 00 00 00 00 
4918   2747 00 00 00 00 
4918   274B 00 00 00 00 
4918   274F 00 00 00 00 
4918   2753 00 00 00 00 
4918   2757 00 00 00 00 
4918   275B 00 00 00 00 
4918   275F 00 00 00 00 
4918   2763 00 00 00 00 
4918   2767 00 00 00 00 
4918   276B 00 00 00 00 
4919   276F 00 00       _size: .fill 2, 0
4920   2771 00 00 00 00 _data_data: .fill 128, 0
4920   2775 00 00 00 00 
4920   2779 00 00 00 00 
4920   277D 00 00 00 00 
4920   2781 00 00 00 00 
4920   2785 00 00 00 00 
4920   2789 00 00 00 00 
4920   278D 00 00 00 00 
4920   2791 00 00 00 00 
4920   2795 00 00 00 00 
4920   2799 00 00 00 00 
4920   279D 00 00 00 00 
4920   27A1 00 00 00 00 
4920   27A5 00 00 00 00 
4920   27A9 00 00 00 00 
4920   27AD 00 00 00 00 
4920   27B1 00 00 00 00 
4920   27B5 00 00 00 00 
4920   27B9 00 00 00 00 
4920   27BD 00 00 00 00 
4920   27C1 00 00 00 00 
4920   27C5 00 00 00 00 
4920   27C9 00 00 00 00 
4920   27CD 00 00 00 00 
4920   27D1 00 00 00 00 
4920   27D5 00 00 00 00 
4920   27D9 00 00 00 00 
4920   27DD 00 00 00 00 
4920   27E1 00 00 00 00 
4920   27E5 00 00 00 00 
4920   27E9 00 00 00 00 
4920   27ED 00 00 00 00 
4921   27F1 0A 53 74 61 __s0: .db "\nStarcom 1.0\n", 0
4921   27F5 72 63 6F 6D 
4921   27F9 20 31 2E 30 
4921   27FD 0A 00 
4922   27FF 0A 75 73 61 __s1: .db "\nusage: starcom <filename> <size>\n", 0
4922   2803 67 65 3A 20 
4922   2807 73 74 61 72 
4922   280B 63 6F 6D 20 
4922   280F 3C 66 69 6C 
4922   2813 65 6E 61 6D 
4922   2817 65 3E 20 3C 
4922   281B 73 69 7A 65 
4922   281F 3E 0A 00 
4923   2822 0A 4F 4B 2E __s2: .db "\nOK. Start transfer now.\n", 0
4923   2826 20 53 74 61 
4923   282A 72 74 20 74 
4923   282E 72 61 6E 73 
4923   2832 66 65 72 20 
4923   2836 6E 6F 77 2E 
4923   283A 0A 00 
4924   283C 20 00       __s3: .db " ", 0
4925   283E 55 6E 6B 6E __s4: .db "Unknown type size in va_arg() call. Size needs to be either 1 or 2.", 0
4925   2842 6F 77 6E 20 
4925   2846 74 79 70 65 
4925   284A 20 73 69 7A 
4925   284E 65 20 69 6E 
4925   2852 20 76 61 5F 
4925   2856 61 72 67 28 
4925   285A 29 20 63 61 
4925   285E 6C 6C 2E 20 
4925   2862 53 69 7A 65 
4925   2866 20 6E 65 65 
4925   286A 64 73 20 74 
4925   286E 6F 20 62 65 
4925   2872 20 65 69 74 
4925   2876 68 65 72 20 
4925   287A 31 20 6F 72 
4925   287E 20 32 2E 00 
4926   2882 45 72 72 6F __s5: .db "Error: Unknown argument type.\n", 0
4926   2886 72 3A 20 55 
4926   288A 6E 6B 6E 6F 
4926   288E 77 6E 20 61 
4926   2892 72 67 75 6D 
4926   2896 65 6E 74 20 
4926   289A 74 79 70 65 
4926   289E 2E 0A 00 
4927   28A1 44 6F 75 62 __s6: .db "Double quotes expected", 0
4927   28A5 6C 65 20 71 
4927   28A9 75 6F 74 65 
4927   28AD 73 20 65 78 
4927   28B1 70 65 63 74 
4927   28B5 65 64 00 
4928   28B8 0A 45 72 72 __s7: .db "\nError: ", 0
4928   28BC 6F 72 3A 20 
4928   28C0 00 
4929   28C1 0A 00       __s8: .db "\n", 0
4930   28C3             
4931   28C3 C5 28       _heap_top: .dw _heap
4932   28C5 00          _heap: .db 0
4933   28C6             ; --- END DATA BLOCK
4934   28C6             
4935   28C6             .end
tasm: Number of errors = 2
