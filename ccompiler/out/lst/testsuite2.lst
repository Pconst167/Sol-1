0001   0000             ; --- FILENAME: ctestsuite/testsuite2.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; int pass[10]; 
0011   0408 52 14 00      sub sp, 20
0012   040B             ; int i; 
0013   040B 52 02 00      sub sp, 2
0014   040E             ; int nbr_tests = 10; 
0015   040E 52 02 00      sub sp, 2
0016   0411             ; --- START LOCAL VAR INITIALIZATION
0017   0411 FA E9 FF      lea d, [bp + -23] ; $nbr_tests
0018   0414 DA            push d
0019   0415                            
0020   0415 FD 2E 0A 00   mov32 cb, $0000000a
0020   0419 00 00 
0021   041B E7            pop d
0022   041C FD 43         mov [d], b
0023   041E             ; --- END LOCAL VAR INITIALIZATION
0024   041E             ; for(i = 0; i < nbr_tests; i++){ 
0025   041E             _for1_init:
0026   041E FA EB FF      lea d, [bp + -21] ; $i
0027   0421 DA            push d
0028   0422                            
0029   0422 FD 2E 00 00   mov32 cb, $00000000
0029   0426 00 00 
0030   0428 E7            pop d
0031   0429 FD 43         mov [d], b
0032   042B             _for1_cond:
0033   042B                            
0034   042B FA EB FF      lea d, [bp + -21] ; $i
0035   042E 2A            mov b, [d]
0036   042F 38 00 00      mov c, 0
0037   0432             ; --- START RELATIONAL
0038   0432 D7            push a
0039   0433 11            mov a, b
0040   0434 FA E9 FF      lea d, [bp + -23] ; $nbr_tests
0041   0437 2A            mov b, [d]
0042   0438 38 00 00      mov c, 0
0043   043B B0            cmp a, b
0044   043C FD 73         slt ; < (signed)
0045   043E E4            pop a
0046   043F             ; --- END RELATIONAL
0047   043F C0 00 00      cmp b, 0
0048   0442 C6 74 04      je _for1_exit
0049   0445             _for1_block:
0050   0445             ; pass[i] = -1; 
0051   0445 FA ED FF      lea d, [bp + -19] ; $pass
0052   0448 D7            push a
0053   0449 DA            push d
0054   044A                            
0055   044A FA EB FF      lea d, [bp + -21] ; $i
0056   044D 2A            mov b, [d]
0057   044E 38 00 00      mov c, 0
0058   0451 E7            pop d
0059   0452 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0060   0456 E4            pop a
0061   0457 DA            push d
0062   0458                            
0063   0458 FD 2E FF FF   mov32 cb, $ffffffff
0063   045C FF FF 
0064   045E E7            pop d
0065   045F FD 43         mov [d], b
0066   0461             _for1_update:
0067   0461                            
0068   0461 FA EB FF      lea d, [bp + -21] ; $i
0069   0464 2A            mov b, [d]
0070   0465 38 00 00      mov c, 0
0071   0468 11            mov a, b
0072   0469 FD 77         inc b
0073   046B FA EB FF      lea d, [bp + -21] ; $i
0074   046E FD 43         mov [d], b
0075   0470 27            mov b, a
0076   0471 0A 2B 04      jmp _for1_cond
0077   0474             _for1_exit:
0078   0474             ; pass[0] = test0(); 
0079   0474 FA ED FF      lea d, [bp + -19] ; $pass
0080   0477 D7            push a
0081   0478 DA            push d
0082   0479                            
0083   0479 FD 2E 00 00   mov32 cb, $00000000
0083   047D 00 00 
0084   047F E7            pop d
0085   0480 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0086   0484 E4            pop a
0087   0485 DA            push d
0088   0486                            
0089   0486             ; --- START FUNCTION CALL
0090   0486 07 59 05      call test0
0091   0489 E7            pop d
0092   048A FD 43         mov [d], b
0093   048C             ; pass[1] = test1(); 
0094   048C FA ED FF      lea d, [bp + -19] ; $pass
0095   048F D7            push a
0096   0490 DA            push d
0097   0491                            
0098   0491 FD 2E 01 00   mov32 cb, $00000001
0098   0495 00 00 
0099   0497 E7            pop d
0100   0498 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0101   049C E4            pop a
0102   049D DA            push d
0103   049E                            
0104   049E             ; --- START FUNCTION CALL
0105   049E 07 55 09      call test1
0106   04A1 E7            pop d
0107   04A2 FD 43         mov [d], b
0108   04A4             ; pass[2] = test2(); 
0109   04A4 FA ED FF      lea d, [bp + -19] ; $pass
0110   04A7 D7            push a
0111   04A8 DA            push d
0112   04A9                            
0113   04A9 FD 2E 02 00   mov32 cb, $00000002
0113   04AD 00 00 
0114   04AF E7            pop d
0115   04B0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0116   04B4 E4            pop a
0117   04B5 DA            push d
0118   04B6                            
0119   04B6             ; --- START FUNCTION CALL
0120   04B6 07 06 0B      call test2
0121   04B9 E7            pop d
0122   04BA FD 43         mov [d], b
0123   04BC             ; pass[3] = test3(st1); 
0124   04BC FA ED FF      lea d, [bp + -19] ; $pass
0125   04BF D7            push a
0126   04C0 DA            push d
0127   04C1                            
0128   04C1 FD 2E 03 00   mov32 cb, $00000003
0128   04C5 00 00 
0129   04C7 E7            pop d
0130   04C8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0131   04CC E4            pop a
0132   04CD DA            push d
0133   04CE                            
0134   04CE             ; --- START FUNCTION CALL
0135   04CE                            
0136   04CE 3B DC 18      mov d, _st1_data ; $st1
0137   04D1 2D            mov b, d
0138   04D2 38 00 00      mov c, 0
0139   04D5 52 0D 00      sub sp, 13
0140   04D8 FD 28         mov si, b
0141   04DA FD FA 01 00   lea d, [sp + 1]
0142   04DE FD 50         mov di, d
0143   04E0 38 0D 00      mov c, 13
0144   04E3 FD F5         rep movsb
0145   04E5 07 96 0D      call test3
0146   04E8 51 0D 00      add sp, 13
0147   04EB             ; --- END FUNCTION CALL
0148   04EB E7            pop d
0149   04EC FD 43         mov [d], b
0150   04EE             ; for(i = 0; i < nbr_tests; i++){ 
0151   04EE             _for2_init:
0152   04EE FA EB FF      lea d, [bp + -21] ; $i
0153   04F1 DA            push d
0154   04F2                            
0155   04F2 FD 2E 00 00   mov32 cb, $00000000
0155   04F6 00 00 
0156   04F8 E7            pop d
0157   04F9 FD 43         mov [d], b
0158   04FB             _for2_cond:
0159   04FB                            
0160   04FB FA EB FF      lea d, [bp + -21] ; $i
0161   04FE 2A            mov b, [d]
0162   04FF 38 00 00      mov c, 0
0163   0502             ; --- START RELATIONAL
0164   0502 D7            push a
0165   0503 11            mov a, b
0166   0504 FA E9 FF      lea d, [bp + -23] ; $nbr_tests
0167   0507 2A            mov b, [d]
0168   0508 38 00 00      mov c, 0
0169   050B B0            cmp a, b
0170   050C FD 73         slt ; < (signed)
0171   050E E4            pop a
0172   050F             ; --- END RELATIONAL
0173   050F C0 00 00      cmp b, 0
0174   0512 C6 57 05      je _for2_exit
0175   0515             _for2_block:
0176   0515             ; printf("Test %d, Result: %d\n", i, pass[i]); 
0177   0515                            
0178   0515             ; --- START FUNCTION CALL
0179   0515                            
0180   0515 FA ED FF      lea d, [bp + -19] ; $pass
0181   0518 D7            push a
0182   0519 DA            push d
0183   051A                            
0184   051A FA EB FF      lea d, [bp + -21] ; $i
0185   051D 2A            mov b, [d]
0186   051E 38 00 00      mov c, 0
0187   0521 E7            pop d
0188   0522 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0189   0526 E4            pop a
0190   0527 2A            mov b, [d]
0191   0528 38 00 00      mov c, 0
0192   052B FD AB         swp b
0193   052D D8            push b
0194   052E                            
0195   052E FA EB FF      lea d, [bp + -21] ; $i
0196   0531 2A            mov b, [d]
0197   0532 38 00 00      mov c, 0
0198   0535 FD AB         swp b
0199   0537 D8            push b
0200   0538                            
0201   0538 26 E9 18      mov b, _s0 ; "Test %d, Result: %d\n"
0202   053B FD AB         swp b
0203   053D D8            push b
0204   053E 07 CF 0F      call printf
0205   0541 51 06 00      add sp, 6
0206   0544             ; --- END FUNCTION CALL
0207   0544             _for2_update:
0208   0544                            
0209   0544 FA EB FF      lea d, [bp + -21] ; $i
0210   0547 2A            mov b, [d]
0211   0548 38 00 00      mov c, 0
0212   054B 11            mov a, b
0213   054C FD 77         inc b
0214   054E FA EB FF      lea d, [bp + -21] ; $i
0215   0551 FD 43         mov [d], b
0216   0553 27            mov b, a
0217   0554 0A FB 04      jmp _for2_cond
0218   0557             _for2_exit:
0219   0557 05 0B         syscall sys_terminate_proc
0220   0559             
0221   0559             test0:
0222   0559 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0223   055C             ; int result; 
0224   055C 52 02 00      sub sp, 2
0225   055F             ; int pass = 1; 
0226   055F 52 02 00      sub sp, 2
0227   0562             ; --- START LOCAL VAR INITIALIZATION
0228   0562 FA FD FF      lea d, [bp + -3] ; $pass
0229   0565 DA            push d
0230   0566                            
0231   0566 FD 2E 01 00   mov32 cb, $00000001
0231   056A 00 00 
0232   056C E7            pop d
0233   056D FD 43         mov [d], b
0234   056F             ; --- END LOCAL VAR INITIALIZATION
0235   056F             ; char c; 
0236   056F 52 01 00      sub sp, 1
0237   0572             ; int i; 
0238   0572 52 02 00      sub sp, 2
0239   0575             ; char ca[5]; 
0240   0575 52 05 00      sub sp, 5
0241   0578             ; int ia[5]; 
0242   0578 52 0A 00      sub sp, 10
0243   057B             ; c = 'A'; 
0244   057B FA FC FF      lea d, [bp + -4] ; $c
0245   057E DA            push d
0246   057F                            
0247   057F FD 2E 41 00   mov32 cb, $00000041
0247   0583 00 00 
0248   0585 E7            pop d
0249   0586 FD 3E         mov [d], bl
0250   0588             ; i = 55; 
0251   0588 FA FA FF      lea d, [bp + -6] ; $i
0252   058B DA            push d
0253   058C                            
0254   058C FD 2E 37 00   mov32 cb, $00000037
0254   0590 00 00 
0255   0592 E7            pop d
0256   0593 FD 43         mov [d], b
0257   0595             ; ca[0] = 'A'; 
0258   0595 FA F5 FF      lea d, [bp + -11] ; $ca
0259   0598 D7            push a
0260   0599 DA            push d
0261   059A                            
0262   059A FD 2E 00 00   mov32 cb, $00000000
0262   059E 00 00 
0263   05A0 E7            pop d
0264   05A1 5A            add d, b
0265   05A2 E4            pop a
0266   05A3 DA            push d
0267   05A4                            
0268   05A4 FD 2E 41 00   mov32 cb, $00000041
0268   05A8 00 00 
0269   05AA E7            pop d
0270   05AB FD 3E         mov [d], bl
0271   05AD             ; ca[1] = 'B'; 
0272   05AD FA F5 FF      lea d, [bp + -11] ; $ca
0273   05B0 D7            push a
0274   05B1 DA            push d
0275   05B2                            
0276   05B2 FD 2E 01 00   mov32 cb, $00000001
0276   05B6 00 00 
0277   05B8 E7            pop d
0278   05B9 5A            add d, b
0279   05BA E4            pop a
0280   05BB DA            push d
0281   05BC                            
0282   05BC FD 2E 42 00   mov32 cb, $00000042
0282   05C0 00 00 
0283   05C2 E7            pop d
0284   05C3 FD 3E         mov [d], bl
0285   05C5             ; ca[2] = 'C'; 
0286   05C5 FA F5 FF      lea d, [bp + -11] ; $ca
0287   05C8 D7            push a
0288   05C9 DA            push d
0289   05CA                            
0290   05CA FD 2E 02 00   mov32 cb, $00000002
0290   05CE 00 00 
0291   05D0 E7            pop d
0292   05D1 5A            add d, b
0293   05D2 E4            pop a
0294   05D3 DA            push d
0295   05D4                            
0296   05D4 FD 2E 43 00   mov32 cb, $00000043
0296   05D8 00 00 
0297   05DA E7            pop d
0298   05DB FD 3E         mov [d], bl
0299   05DD             ; ca[3] = 'D'; 
0300   05DD FA F5 FF      lea d, [bp + -11] ; $ca
0301   05E0 D7            push a
0302   05E1 DA            push d
0303   05E2                            
0304   05E2 FD 2E 03 00   mov32 cb, $00000003
0304   05E6 00 00 
0305   05E8 E7            pop d
0306   05E9 5A            add d, b
0307   05EA E4            pop a
0308   05EB DA            push d
0309   05EC                            
0310   05EC FD 2E 44 00   mov32 cb, $00000044
0310   05F0 00 00 
0311   05F2 E7            pop d
0312   05F3 FD 3E         mov [d], bl
0313   05F5             ; ca[4] = 'E'; 
0314   05F5 FA F5 FF      lea d, [bp + -11] ; $ca
0315   05F8 D7            push a
0316   05F9 DA            push d
0317   05FA                            
0318   05FA FD 2E 04 00   mov32 cb, $00000004
0318   05FE 00 00 
0319   0600 E7            pop d
0320   0601 5A            add d, b
0321   0602 E4            pop a
0322   0603 DA            push d
0323   0604                            
0324   0604 FD 2E 45 00   mov32 cb, $00000045
0324   0608 00 00 
0325   060A E7            pop d
0326   060B FD 3E         mov [d], bl
0327   060D             ; ia[0] = 0; 
0328   060D FA EB FF      lea d, [bp + -21] ; $ia
0329   0610 D7            push a
0330   0611 DA            push d
0331   0612                            
0332   0612 FD 2E 00 00   mov32 cb, $00000000
0332   0616 00 00 
0333   0618 E7            pop d
0334   0619 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0335   061D E4            pop a
0336   061E DA            push d
0337   061F                            
0338   061F FD 2E 00 00   mov32 cb, $00000000
0338   0623 00 00 
0339   0625 E7            pop d
0340   0626 FD 43         mov [d], b
0341   0628             ; ia[1] = 1; 
0342   0628 FA EB FF      lea d, [bp + -21] ; $ia
0343   062B D7            push a
0344   062C DA            push d
0345   062D                            
0346   062D FD 2E 01 00   mov32 cb, $00000001
0346   0631 00 00 
0347   0633 E7            pop d
0348   0634 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0349   0638 E4            pop a
0350   0639 DA            push d
0351   063A                            
0352   063A FD 2E 01 00   mov32 cb, $00000001
0352   063E 00 00 
0353   0640 E7            pop d
0354   0641 FD 43         mov [d], b
0355   0643             ; ia[2] = 2; 
0356   0643 FA EB FF      lea d, [bp + -21] ; $ia
0357   0646 D7            push a
0358   0647 DA            push d
0359   0648                            
0360   0648 FD 2E 02 00   mov32 cb, $00000002
0360   064C 00 00 
0361   064E E7            pop d
0362   064F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0363   0653 E4            pop a
0364   0654 DA            push d
0365   0655                            
0366   0655 FD 2E 02 00   mov32 cb, $00000002
0366   0659 00 00 
0367   065B E7            pop d
0368   065C FD 43         mov [d], b
0369   065E             ; ia[3] = 3; 
0370   065E FA EB FF      lea d, [bp + -21] ; $ia
0371   0661 D7            push a
0372   0662 DA            push d
0373   0663                            
0374   0663 FD 2E 03 00   mov32 cb, $00000003
0374   0667 00 00 
0375   0669 E7            pop d
0376   066A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0377   066E E4            pop a
0378   066F DA            push d
0379   0670                            
0380   0670 FD 2E 03 00   mov32 cb, $00000003
0380   0674 00 00 
0381   0676 E7            pop d
0382   0677 FD 43         mov [d], b
0383   0679             ; ia[4] = 4; 
0384   0679 FA EB FF      lea d, [bp + -21] ; $ia
0385   067C D7            push a
0386   067D DA            push d
0387   067E                            
0388   067E FD 2E 04 00   mov32 cb, $00000004
0388   0682 00 00 
0389   0684 E7            pop d
0390   0685 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0391   0689 E4            pop a
0392   068A DA            push d
0393   068B                            
0394   068B FD 2E 04 00   mov32 cb, $00000004
0394   068F 00 00 
0395   0691 E7            pop d
0396   0692 FD 43         mov [d], b
0397   0694             ; pass = pass && test0_subTest0(c, i, ca, ia); 
0398   0694 FA FD FF      lea d, [bp + -3] ; $pass
0399   0697 DA            push d
0400   0698                            
0401   0698 FA FD FF      lea d, [bp + -3] ; $pass
0402   069B 2A            mov b, [d]
0403   069C 38 00 00      mov c, 0
0404   069F             ; --- START LOGICAL AND
0405   069F D7            push a
0406   06A0 11            mov a, b
0407   06A1             ; --- START FUNCTION CALL
0408   06A1                            
0409   06A1 FA EB FF      lea d, [bp + -21] ; $ia
0410   06A4 2D            mov b, d
0411   06A5 38 00 00      mov c, 0
0412   06A8 FD AB         swp b
0413   06AA D8            push b
0414   06AB                            
0415   06AB FA F5 FF      lea d, [bp + -11] ; $ca
0416   06AE 2D            mov b, d
0417   06AF 38 00 00      mov c, 0
0418   06B2 FD AB         swp b
0419   06B4 D8            push b
0420   06B5                            
0421   06B5 FA FA FF      lea d, [bp + -6] ; $i
0422   06B8 2A            mov b, [d]
0423   06B9 38 00 00      mov c, 0
0424   06BC FD AB         swp b
0425   06BE D8            push b
0426   06BF                            
0427   06BF FA FC FF      lea d, [bp + -4] ; $c
0428   06C2 32            mov bl, [d]
0429   06C3 A7 00         mov bh, 0
0430   06C5 38 00 00      mov c, 0
0431   06C8 DD            push bl
0432   06C9 07 DE 06      call test0_subTest0
0433   06CC 51 07 00      add sp, 7
0434   06CF             ; --- END FUNCTION CALL
0435   06CF FD A7         sand a, b
0436   06D1 E4            pop a
0437   06D2             ; --- END LOGICAL AND
0438   06D2 E7            pop d
0439   06D3 FD 43         mov [d], b
0440   06D5             ; return pass; 
0441   06D5                            
0442   06D5 FA FD FF      lea d, [bp + -3] ; $pass
0443   06D8 2A            mov b, [d]
0444   06D9 38 00 00      mov c, 0
0445   06DC F9            leave
0446   06DD 09            ret
0447   06DE             
0448   06DE             test0_subTest0:
0449   06DE F8 00 00      enter 0 ; (push bp; mov bp, sp)
0450   06E1             ; int pass = 1; 
0451   06E1 52 02 00      sub sp, 2
0452   06E4             ; --- START LOCAL VAR INITIALIZATION
0453   06E4 FA FF FF      lea d, [bp + -1] ; $pass
0454   06E7 DA            push d
0455   06E8                            
0456   06E8 FD 2E 01 00   mov32 cb, $00000001
0456   06EC 00 00 
0457   06EE E7            pop d
0458   06EF FD 43         mov [d], b
0459   06F1             ; --- END LOCAL VAR INITIALIZATION
0460   06F1             ; pass = pass && c == 'A'; 
0461   06F1 FA FF FF      lea d, [bp + -1] ; $pass
0462   06F4 DA            push d
0463   06F5                            
0464   06F5 FA FF FF      lea d, [bp + -1] ; $pass
0465   06F8 2A            mov b, [d]
0466   06F9 38 00 00      mov c, 0
0467   06FC             ; --- START LOGICAL AND
0468   06FC D7            push a
0469   06FD 11            mov a, b
0470   06FE FA 05 00      lea d, [bp + 5] ; $c
0471   0701 32            mov bl, [d]
0472   0702 A7 00         mov bh, 0
0473   0704 38 00 00      mov c, 0
0474   0707             ; --- START RELATIONAL
0475   0707 D7            push a
0476   0708 11            mov a, b
0477   0709 FD 2E 41 00   mov32 cb, $00000041
0477   070D 00 00 
0478   070F B0            cmp a, b
0479   0710 FD 71         seq ; ==
0480   0712 E4            pop a
0481   0713             ; --- END RELATIONAL
0482   0713 FD A7         sand a, b
0483   0715 E4            pop a
0484   0716             ; --- END LOGICAL AND
0485   0716 E7            pop d
0486   0717 FD 43         mov [d], b
0487   0719             ; pass = pass && i == 55; 
0488   0719 FA FF FF      lea d, [bp + -1] ; $pass
0489   071C DA            push d
0490   071D                            
0491   071D FA FF FF      lea d, [bp + -1] ; $pass
0492   0720 2A            mov b, [d]
0493   0721 38 00 00      mov c, 0
0494   0724             ; --- START LOGICAL AND
0495   0724 D7            push a
0496   0725 11            mov a, b
0497   0726 FA 06 00      lea d, [bp + 6] ; $i
0498   0729 2A            mov b, [d]
0499   072A 38 00 00      mov c, 0
0500   072D             ; --- START RELATIONAL
0501   072D D7            push a
0502   072E 11            mov a, b
0503   072F FD 2E 37 00   mov32 cb, $00000037
0503   0733 00 00 
0504   0735 B0            cmp a, b
0505   0736 FD 71         seq ; ==
0506   0738 E4            pop a
0507   0739             ; --- END RELATIONAL
0508   0739 FD A7         sand a, b
0509   073B E4            pop a
0510   073C             ; --- END LOGICAL AND
0511   073C E7            pop d
0512   073D FD 43         mov [d], b
0513   073F             ; pass = pass && ca[0] == 'A'; 
0514   073F FA FF FF      lea d, [bp + -1] ; $pass
0515   0742 DA            push d
0516   0743                            
0517   0743 FA FF FF      lea d, [bp + -1] ; $pass
0518   0746 2A            mov b, [d]
0519   0747 38 00 00      mov c, 0
0520   074A             ; --- START LOGICAL AND
0521   074A D7            push a
0522   074B 11            mov a, b
0523   074C 2C 08 00      mov b, [bp + 8] ; $ca
0524   074F 74            mov d, b
0525   0750 D7            push a
0526   0751 DA            push d
0527   0752                            
0528   0752 FD 2E 00 00   mov32 cb, $00000000
0528   0756 00 00 
0529   0758 E7            pop d
0530   0759 5A            add d, b
0531   075A E4            pop a
0532   075B 32            mov bl, [d]
0533   075C A7 00         mov bh, 0
0534   075E 38 00 00      mov c, 0
0535   0761             ; --- START RELATIONAL
0536   0761 D7            push a
0537   0762 11            mov a, b
0538   0763 FD 2E 41 00   mov32 cb, $00000041
0538   0767 00 00 
0539   0769 B0            cmp a, b
0540   076A FD 71         seq ; ==
0541   076C E4            pop a
0542   076D             ; --- END RELATIONAL
0543   076D FD A7         sand a, b
0544   076F E4            pop a
0545   0770             ; --- END LOGICAL AND
0546   0770 E7            pop d
0547   0771 FD 43         mov [d], b
0548   0773             ; pass = pass && ca[1] == 'B'; 
0549   0773 FA FF FF      lea d, [bp + -1] ; $pass
0550   0776 DA            push d
0551   0777                            
0552   0777 FA FF FF      lea d, [bp + -1] ; $pass
0553   077A 2A            mov b, [d]
0554   077B 38 00 00      mov c, 0
0555   077E             ; --- START LOGICAL AND
0556   077E D7            push a
0557   077F 11            mov a, b
0558   0780 2C 08 00      mov b, [bp + 8] ; $ca
0559   0783 74            mov d, b
0560   0784 D7            push a
0561   0785 DA            push d
0562   0786                            
0563   0786 FD 2E 01 00   mov32 cb, $00000001
0563   078A 00 00 
0564   078C E7            pop d
0565   078D 5A            add d, b
0566   078E E4            pop a
0567   078F 32            mov bl, [d]
0568   0790 A7 00         mov bh, 0
0569   0792 38 00 00      mov c, 0
0570   0795             ; --- START RELATIONAL
0571   0795 D7            push a
0572   0796 11            mov a, b
0573   0797 FD 2E 42 00   mov32 cb, $00000042
0573   079B 00 00 
0574   079D B0            cmp a, b
0575   079E FD 71         seq ; ==
0576   07A0 E4            pop a
0577   07A1             ; --- END RELATIONAL
0578   07A1 FD A7         sand a, b
0579   07A3 E4            pop a
0580   07A4             ; --- END LOGICAL AND
0581   07A4 E7            pop d
0582   07A5 FD 43         mov [d], b
0583   07A7             ; pass = pass && ca[2] == 'C'; 
0584   07A7 FA FF FF      lea d, [bp + -1] ; $pass
0585   07AA DA            push d
0586   07AB                            
0587   07AB FA FF FF      lea d, [bp + -1] ; $pass
0588   07AE 2A            mov b, [d]
0589   07AF 38 00 00      mov c, 0
0590   07B2             ; --- START LOGICAL AND
0591   07B2 D7            push a
0592   07B3 11            mov a, b
0593   07B4 2C 08 00      mov b, [bp + 8] ; $ca
0594   07B7 74            mov d, b
0595   07B8 D7            push a
0596   07B9 DA            push d
0597   07BA                            
0598   07BA FD 2E 02 00   mov32 cb, $00000002
0598   07BE 00 00 
0599   07C0 E7            pop d
0600   07C1 5A            add d, b
0601   07C2 E4            pop a
0602   07C3 32            mov bl, [d]
0603   07C4 A7 00         mov bh, 0
0604   07C6 38 00 00      mov c, 0
0605   07C9             ; --- START RELATIONAL
0606   07C9 D7            push a
0607   07CA 11            mov a, b
0608   07CB FD 2E 43 00   mov32 cb, $00000043
0608   07CF 00 00 
0609   07D1 B0            cmp a, b
0610   07D2 FD 71         seq ; ==
0611   07D4 E4            pop a
0612   07D5             ; --- END RELATIONAL
0613   07D5 FD A7         sand a, b
0614   07D7 E4            pop a
0615   07D8             ; --- END LOGICAL AND
0616   07D8 E7            pop d
0617   07D9 FD 43         mov [d], b
0618   07DB             ; pass = pass && ca[3] == 'D'; 
0619   07DB FA FF FF      lea d, [bp + -1] ; $pass
0620   07DE DA            push d
0621   07DF                            
0622   07DF FA FF FF      lea d, [bp + -1] ; $pass
0623   07E2 2A            mov b, [d]
0624   07E3 38 00 00      mov c, 0
0625   07E6             ; --- START LOGICAL AND
0626   07E6 D7            push a
0627   07E7 11            mov a, b
0628   07E8 2C 08 00      mov b, [bp + 8] ; $ca
0629   07EB 74            mov d, b
0630   07EC D7            push a
0631   07ED DA            push d
0632   07EE                            
0633   07EE FD 2E 03 00   mov32 cb, $00000003
0633   07F2 00 00 
0634   07F4 E7            pop d
0635   07F5 5A            add d, b
0636   07F6 E4            pop a
0637   07F7 32            mov bl, [d]
0638   07F8 A7 00         mov bh, 0
0639   07FA 38 00 00      mov c, 0
0640   07FD             ; --- START RELATIONAL
0641   07FD D7            push a
0642   07FE 11            mov a, b
0643   07FF FD 2E 44 00   mov32 cb, $00000044
0643   0803 00 00 
0644   0805 B0            cmp a, b
0645   0806 FD 71         seq ; ==
0646   0808 E4            pop a
0647   0809             ; --- END RELATIONAL
0648   0809 FD A7         sand a, b
0649   080B E4            pop a
0650   080C             ; --- END LOGICAL AND
0651   080C E7            pop d
0652   080D FD 43         mov [d], b
0653   080F             ; pass = pass && ca[4] == 'E'; 
0654   080F FA FF FF      lea d, [bp + -1] ; $pass
0655   0812 DA            push d
0656   0813                            
0657   0813 FA FF FF      lea d, [bp + -1] ; $pass
0658   0816 2A            mov b, [d]
0659   0817 38 00 00      mov c, 0
0660   081A             ; --- START LOGICAL AND
0661   081A D7            push a
0662   081B 11            mov a, b
0663   081C 2C 08 00      mov b, [bp + 8] ; $ca
0664   081F 74            mov d, b
0665   0820 D7            push a
0666   0821 DA            push d
0667   0822                            
0668   0822 FD 2E 04 00   mov32 cb, $00000004
0668   0826 00 00 
0669   0828 E7            pop d
0670   0829 5A            add d, b
0671   082A E4            pop a
0672   082B 32            mov bl, [d]
0673   082C A7 00         mov bh, 0
0674   082E 38 00 00      mov c, 0
0675   0831             ; --- START RELATIONAL
0676   0831 D7            push a
0677   0832 11            mov a, b
0678   0833 FD 2E 45 00   mov32 cb, $00000045
0678   0837 00 00 
0679   0839 B0            cmp a, b
0680   083A FD 71         seq ; ==
0681   083C E4            pop a
0682   083D             ; --- END RELATIONAL
0683   083D FD A7         sand a, b
0684   083F E4            pop a
0685   0840             ; --- END LOGICAL AND
0686   0840 E7            pop d
0687   0841 FD 43         mov [d], b
0688   0843             ; pass = pass && ia[0] == 0; 
0689   0843 FA FF FF      lea d, [bp + -1] ; $pass
0690   0846 DA            push d
0691   0847                            
0692   0847 FA FF FF      lea d, [bp + -1] ; $pass
0693   084A 2A            mov b, [d]
0694   084B 38 00 00      mov c, 0
0695   084E             ; --- START LOGICAL AND
0696   084E D7            push a
0697   084F 11            mov a, b
0698   0850 2C 0A 00      mov b, [bp + 10] ; $ia
0699   0853 74            mov d, b
0700   0854 D7            push a
0701   0855 DA            push d
0702   0856                            
0703   0856 FD 2E 00 00   mov32 cb, $00000000
0703   085A 00 00 
0704   085C E7            pop d
0705   085D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0706   0861 E4            pop a
0707   0862 2A            mov b, [d]
0708   0863 38 00 00      mov c, 0
0709   0866             ; --- START RELATIONAL
0710   0866 D7            push a
0711   0867 11            mov a, b
0712   0868 FD 2E 00 00   mov32 cb, $00000000
0712   086C 00 00 
0713   086E B0            cmp a, b
0714   086F FD 71         seq ; ==
0715   0871 E4            pop a
0716   0872             ; --- END RELATIONAL
0717   0872 FD A7         sand a, b
0718   0874 E4            pop a
0719   0875             ; --- END LOGICAL AND
0720   0875 E7            pop d
0721   0876 FD 43         mov [d], b
0722   0878             ; pass = pass && ia[1] == 1; 
0723   0878 FA FF FF      lea d, [bp + -1] ; $pass
0724   087B DA            push d
0725   087C                            
0726   087C FA FF FF      lea d, [bp + -1] ; $pass
0727   087F 2A            mov b, [d]
0728   0880 38 00 00      mov c, 0
0729   0883             ; --- START LOGICAL AND
0730   0883 D7            push a
0731   0884 11            mov a, b
0732   0885 2C 0A 00      mov b, [bp + 10] ; $ia
0733   0888 74            mov d, b
0734   0889 D7            push a
0735   088A DA            push d
0736   088B                            
0737   088B FD 2E 01 00   mov32 cb, $00000001
0737   088F 00 00 
0738   0891 E7            pop d
0739   0892 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0740   0896 E4            pop a
0741   0897 2A            mov b, [d]
0742   0898 38 00 00      mov c, 0
0743   089B             ; --- START RELATIONAL
0744   089B D7            push a
0745   089C 11            mov a, b
0746   089D FD 2E 01 00   mov32 cb, $00000001
0746   08A1 00 00 
0747   08A3 B0            cmp a, b
0748   08A4 FD 71         seq ; ==
0749   08A6 E4            pop a
0750   08A7             ; --- END RELATIONAL
0751   08A7 FD A7         sand a, b
0752   08A9 E4            pop a
0753   08AA             ; --- END LOGICAL AND
0754   08AA E7            pop d
0755   08AB FD 43         mov [d], b
0756   08AD             ; pass = pass && ia[2] == 2; 
0757   08AD FA FF FF      lea d, [bp + -1] ; $pass
0758   08B0 DA            push d
0759   08B1                            
0760   08B1 FA FF FF      lea d, [bp + -1] ; $pass
0761   08B4 2A            mov b, [d]
0762   08B5 38 00 00      mov c, 0
0763   08B8             ; --- START LOGICAL AND
0764   08B8 D7            push a
0765   08B9 11            mov a, b
0766   08BA 2C 0A 00      mov b, [bp + 10] ; $ia
0767   08BD 74            mov d, b
0768   08BE D7            push a
0769   08BF DA            push d
0770   08C0                            
0771   08C0 FD 2E 02 00   mov32 cb, $00000002
0771   08C4 00 00 
0772   08C6 E7            pop d
0773   08C7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0774   08CB E4            pop a
0775   08CC 2A            mov b, [d]
0776   08CD 38 00 00      mov c, 0
0777   08D0             ; --- START RELATIONAL
0778   08D0 D7            push a
0779   08D1 11            mov a, b
0780   08D2 FD 2E 02 00   mov32 cb, $00000002
0780   08D6 00 00 
0781   08D8 B0            cmp a, b
0782   08D9 FD 71         seq ; ==
0783   08DB E4            pop a
0784   08DC             ; --- END RELATIONAL
0785   08DC FD A7         sand a, b
0786   08DE E4            pop a
0787   08DF             ; --- END LOGICAL AND
0788   08DF E7            pop d
0789   08E0 FD 43         mov [d], b
0790   08E2             ; pass = pass && ia[3] == 3; 
0791   08E2 FA FF FF      lea d, [bp + -1] ; $pass
0792   08E5 DA            push d
0793   08E6                            
0794   08E6 FA FF FF      lea d, [bp + -1] ; $pass
0795   08E9 2A            mov b, [d]
0796   08EA 38 00 00      mov c, 0
0797   08ED             ; --- START LOGICAL AND
0798   08ED D7            push a
0799   08EE 11            mov a, b
0800   08EF 2C 0A 00      mov b, [bp + 10] ; $ia
0801   08F2 74            mov d, b
0802   08F3 D7            push a
0803   08F4 DA            push d
0804   08F5                            
0805   08F5 FD 2E 03 00   mov32 cb, $00000003
0805   08F9 00 00 
0806   08FB E7            pop d
0807   08FC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0808   0900 E4            pop a
0809   0901 2A            mov b, [d]
0810   0902 38 00 00      mov c, 0
0811   0905             ; --- START RELATIONAL
0812   0905 D7            push a
0813   0906 11            mov a, b
0814   0907 FD 2E 03 00   mov32 cb, $00000003
0814   090B 00 00 
0815   090D B0            cmp a, b
0816   090E FD 71         seq ; ==
0817   0910 E4            pop a
0818   0911             ; --- END RELATIONAL
0819   0911 FD A7         sand a, b
0820   0913 E4            pop a
0821   0914             ; --- END LOGICAL AND
0822   0914 E7            pop d
0823   0915 FD 43         mov [d], b
0824   0917             ; pass = pass && ia[4] == 4; 
0825   0917 FA FF FF      lea d, [bp + -1] ; $pass
0826   091A DA            push d
0827   091B                            
0828   091B FA FF FF      lea d, [bp + -1] ; $pass
0829   091E 2A            mov b, [d]
0830   091F 38 00 00      mov c, 0
0831   0922             ; --- START LOGICAL AND
0832   0922 D7            push a
0833   0923 11            mov a, b
0834   0924 2C 0A 00      mov b, [bp + 10] ; $ia
0835   0927 74            mov d, b
0836   0928 D7            push a
0837   0929 DA            push d
0838   092A                            
0839   092A FD 2E 04 00   mov32 cb, $00000004
0839   092E 00 00 
0840   0930 E7            pop d
0841   0931 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0842   0935 E4            pop a
0843   0936 2A            mov b, [d]
0844   0937 38 00 00      mov c, 0
0845   093A             ; --- START RELATIONAL
0846   093A D7            push a
0847   093B 11            mov a, b
0848   093C FD 2E 04 00   mov32 cb, $00000004
0848   0940 00 00 
0849   0942 B0            cmp a, b
0850   0943 FD 71         seq ; ==
0851   0945 E4            pop a
0852   0946             ; --- END RELATIONAL
0853   0946 FD A7         sand a, b
0854   0948 E4            pop a
0855   0949             ; --- END LOGICAL AND
0856   0949 E7            pop d
0857   094A FD 43         mov [d], b
0858   094C             ; return pass; 
0859   094C                            
0860   094C FA FF FF      lea d, [bp + -1] ; $pass
0861   094F 2A            mov b, [d]
0862   0950 38 00 00      mov c, 0
0863   0953 F9            leave
0864   0954 09            ret
0865   0955             
0866   0955             test1:
0867   0955 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0868   0958             ; int pass = 1; 
0869   0958 52 02 00      sub sp, 2
0870   095B             ; --- START LOCAL VAR INITIALIZATION
0871   095B FA FF FF      lea d, [bp + -1] ; $pass
0872   095E DA            push d
0873   095F                            
0874   095F FD 2E 01 00   mov32 cb, $00000001
0874   0963 00 00 
0875   0965 E7            pop d
0876   0966 FD 43         mov [d], b
0877   0968             ; --- END LOCAL VAR INITIALIZATION
0878   0968             ; char ca[5]; 
0879   0968 52 05 00      sub sp, 5
0880   096B             ; char *p; 
0881   096B 52 02 00      sub sp, 2
0882   096E             ; p = ca; 
0883   096E FA F8 FF      lea d, [bp + -8] ; $p
0884   0971 DA            push d
0885   0972                            
0886   0972 FA FA FF      lea d, [bp + -6] ; $ca
0887   0975 2D            mov b, d
0888   0976 38 00 00      mov c, 0
0889   0979 E7            pop d
0890   097A FD 43         mov [d], b
0891   097C             ; ca[0] = 'A'; 
0892   097C FA FA FF      lea d, [bp + -6] ; $ca
0893   097F D7            push a
0894   0980 DA            push d
0895   0981                            
0896   0981 FD 2E 00 00   mov32 cb, $00000000
0896   0985 00 00 
0897   0987 E7            pop d
0898   0988 5A            add d, b
0899   0989 E4            pop a
0900   098A DA            push d
0901   098B                            
0902   098B FD 2E 41 00   mov32 cb, $00000041
0902   098F 00 00 
0903   0991 E7            pop d
0904   0992 FD 3E         mov [d], bl
0905   0994             ; ca[1] = 'B'; 
0906   0994 FA FA FF      lea d, [bp + -6] ; $ca
0907   0997 D7            push a
0908   0998 DA            push d
0909   0999                            
0910   0999 FD 2E 01 00   mov32 cb, $00000001
0910   099D 00 00 
0911   099F E7            pop d
0912   09A0 5A            add d, b
0913   09A1 E4            pop a
0914   09A2 DA            push d
0915   09A3                            
0916   09A3 FD 2E 42 00   mov32 cb, $00000042
0916   09A7 00 00 
0917   09A9 E7            pop d
0918   09AA FD 3E         mov [d], bl
0919   09AC             ; ca[2] = 'C'; 
0920   09AC FA FA FF      lea d, [bp + -6] ; $ca
0921   09AF D7            push a
0922   09B0 DA            push d
0923   09B1                            
0924   09B1 FD 2E 02 00   mov32 cb, $00000002
0924   09B5 00 00 
0925   09B7 E7            pop d
0926   09B8 5A            add d, b
0927   09B9 E4            pop a
0928   09BA DA            push d
0929   09BB                            
0930   09BB FD 2E 43 00   mov32 cb, $00000043
0930   09BF 00 00 
0931   09C1 E7            pop d
0932   09C2 FD 3E         mov [d], bl
0933   09C4             ; ca[3] = 'D'; 
0934   09C4 FA FA FF      lea d, [bp + -6] ; $ca
0935   09C7 D7            push a
0936   09C8 DA            push d
0937   09C9                            
0938   09C9 FD 2E 03 00   mov32 cb, $00000003
0938   09CD 00 00 
0939   09CF E7            pop d
0940   09D0 5A            add d, b
0941   09D1 E4            pop a
0942   09D2 DA            push d
0943   09D3                            
0944   09D3 FD 2E 44 00   mov32 cb, $00000044
0944   09D7 00 00 
0945   09D9 E7            pop d
0946   09DA FD 3E         mov [d], bl
0947   09DC             ; ca[4] = 'E'; 
0948   09DC FA FA FF      lea d, [bp + -6] ; $ca
0949   09DF D7            push a
0950   09E0 DA            push d
0951   09E1                            
0952   09E1 FD 2E 04 00   mov32 cb, $00000004
0952   09E5 00 00 
0953   09E7 E7            pop d
0954   09E8 5A            add d, b
0955   09E9 E4            pop a
0956   09EA DA            push d
0957   09EB                            
0958   09EB FD 2E 45 00   mov32 cb, $00000045
0958   09EF 00 00 
0959   09F1 E7            pop d
0960   09F2 FD 3E         mov [d], bl
0961   09F4             ; pass = pass && *p == 'A'; 
0962   09F4 FA FF FF      lea d, [bp + -1] ; $pass
0963   09F7 DA            push d
0964   09F8                            
0965   09F8 FA FF FF      lea d, [bp + -1] ; $pass
0966   09FB 2A            mov b, [d]
0967   09FC 38 00 00      mov c, 0
0968   09FF             ; --- START LOGICAL AND
0969   09FF D7            push a
0970   0A00 11            mov a, b
0971   0A01 FA F8 FF      lea d, [bp + -8] ; $p
0972   0A04 2A            mov b, [d]
0973   0A05 38 00 00      mov c, 0
0974   0A08 74            mov d, b
0975   0A09 32            mov bl, [d]
0976   0A0A A7 00         mov bh, 0
0977   0A0C 38 00 00      mov c, 0
0978   0A0F             ; --- START RELATIONAL
0979   0A0F D7            push a
0980   0A10 11            mov a, b
0981   0A11 FD 2E 41 00   mov32 cb, $00000041
0981   0A15 00 00 
0982   0A17 B0            cmp a, b
0983   0A18 FD 71         seq ; ==
0984   0A1A E4            pop a
0985   0A1B             ; --- END RELATIONAL
0986   0A1B FD A7         sand a, b
0987   0A1D E4            pop a
0988   0A1E             ; --- END LOGICAL AND
0989   0A1E E7            pop d
0990   0A1F FD 43         mov [d], b
0991   0A21             ; pass = pass && *(p + 1) == 'B'; 
0992   0A21 FA FF FF      lea d, [bp + -1] ; $pass
0993   0A24 DA            push d
0994   0A25                            
0995   0A25 FA FF FF      lea d, [bp + -1] ; $pass
0996   0A28 2A            mov b, [d]
0997   0A29 38 00 00      mov c, 0
0998   0A2C             ; --- START LOGICAL AND
0999   0A2C D7            push a
1000   0A2D 11            mov a, b
1001   0A2E                            
1002   0A2E FA F8 FF      lea d, [bp + -8] ; $p
1003   0A31 2A            mov b, [d]
1004   0A32 38 00 00      mov c, 0
1005   0A35             ; --- START TERMS
1006   0A35 D7            push a
1007   0A36 11            mov a, b
1008   0A37 FD 2E 01 00   mov32 cb, $00000001
1008   0A3B 00 00 
1009   0A3D 56            add b, a
1010   0A3E E4            pop a
1011   0A3F             ; --- END TERMS
1012   0A3F 74            mov d, b
1013   0A40 32            mov bl, [d]
1014   0A41 A7 00         mov bh, 0
1015   0A43 38 00 00      mov c, 0
1016   0A46             ; --- START RELATIONAL
1017   0A46 D7            push a
1018   0A47 11            mov a, b
1019   0A48 FD 2E 42 00   mov32 cb, $00000042
1019   0A4C 00 00 
1020   0A4E B0            cmp a, b
1021   0A4F FD 71         seq ; ==
1022   0A51 E4            pop a
1023   0A52             ; --- END RELATIONAL
1024   0A52 FD A7         sand a, b
1025   0A54 E4            pop a
1026   0A55             ; --- END LOGICAL AND
1027   0A55 E7            pop d
1028   0A56 FD 43         mov [d], b
1029   0A58             ; pass = pass && *(p + 2) == 'C'; 
1030   0A58 FA FF FF      lea d, [bp + -1] ; $pass
1031   0A5B DA            push d
1032   0A5C                            
1033   0A5C FA FF FF      lea d, [bp + -1] ; $pass
1034   0A5F 2A            mov b, [d]
1035   0A60 38 00 00      mov c, 0
1036   0A63             ; --- START LOGICAL AND
1037   0A63 D7            push a
1038   0A64 11            mov a, b
1039   0A65                            
1040   0A65 FA F8 FF      lea d, [bp + -8] ; $p
1041   0A68 2A            mov b, [d]
1042   0A69 38 00 00      mov c, 0
1043   0A6C             ; --- START TERMS
1044   0A6C D7            push a
1045   0A6D 11            mov a, b
1046   0A6E FD 2E 02 00   mov32 cb, $00000002
1046   0A72 00 00 
1047   0A74 56            add b, a
1048   0A75 E4            pop a
1049   0A76             ; --- END TERMS
1050   0A76 74            mov d, b
1051   0A77 32            mov bl, [d]
1052   0A78 A7 00         mov bh, 0
1053   0A7A 38 00 00      mov c, 0
1054   0A7D             ; --- START RELATIONAL
1055   0A7D D7            push a
1056   0A7E 11            mov a, b
1057   0A7F FD 2E 43 00   mov32 cb, $00000043
1057   0A83 00 00 
1058   0A85 B0            cmp a, b
1059   0A86 FD 71         seq ; ==
1060   0A88 E4            pop a
1061   0A89             ; --- END RELATIONAL
1062   0A89 FD A7         sand a, b
1063   0A8B E4            pop a
1064   0A8C             ; --- END LOGICAL AND
1065   0A8C E7            pop d
1066   0A8D FD 43         mov [d], b
1067   0A8F             ; pass = pass && *(p + 3) == 'D'; 
1068   0A8F FA FF FF      lea d, [bp + -1] ; $pass
1069   0A92 DA            push d
1070   0A93                            
1071   0A93 FA FF FF      lea d, [bp + -1] ; $pass
1072   0A96 2A            mov b, [d]
1073   0A97 38 00 00      mov c, 0
1074   0A9A             ; --- START LOGICAL AND
1075   0A9A D7            push a
1076   0A9B 11            mov a, b
1077   0A9C                            
1078   0A9C FA F8 FF      lea d, [bp + -8] ; $p
1079   0A9F 2A            mov b, [d]
1080   0AA0 38 00 00      mov c, 0
1081   0AA3             ; --- START TERMS
1082   0AA3 D7            push a
1083   0AA4 11            mov a, b
1084   0AA5 FD 2E 03 00   mov32 cb, $00000003
1084   0AA9 00 00 
1085   0AAB 56            add b, a
1086   0AAC E4            pop a
1087   0AAD             ; --- END TERMS
1088   0AAD 74            mov d, b
1089   0AAE 32            mov bl, [d]
1090   0AAF A7 00         mov bh, 0
1091   0AB1 38 00 00      mov c, 0
1092   0AB4             ; --- START RELATIONAL
1093   0AB4 D7            push a
1094   0AB5 11            mov a, b
1095   0AB6 FD 2E 44 00   mov32 cb, $00000044
1095   0ABA 00 00 
1096   0ABC B0            cmp a, b
1097   0ABD FD 71         seq ; ==
1098   0ABF E4            pop a
1099   0AC0             ; --- END RELATIONAL
1100   0AC0 FD A7         sand a, b
1101   0AC2 E4            pop a
1102   0AC3             ; --- END LOGICAL AND
1103   0AC3 E7            pop d
1104   0AC4 FD 43         mov [d], b
1105   0AC6             ; pass = pass && *(p + 4) == 'E'; 
1106   0AC6 FA FF FF      lea d, [bp + -1] ; $pass
1107   0AC9 DA            push d
1108   0ACA                            
1109   0ACA FA FF FF      lea d, [bp + -1] ; $pass
1110   0ACD 2A            mov b, [d]
1111   0ACE 38 00 00      mov c, 0
1112   0AD1             ; --- START LOGICAL AND
1113   0AD1 D7            push a
1114   0AD2 11            mov a, b
1115   0AD3                            
1116   0AD3 FA F8 FF      lea d, [bp + -8] ; $p
1117   0AD6 2A            mov b, [d]
1118   0AD7 38 00 00      mov c, 0
1119   0ADA             ; --- START TERMS
1120   0ADA D7            push a
1121   0ADB 11            mov a, b
1122   0ADC FD 2E 04 00   mov32 cb, $00000004
1122   0AE0 00 00 
1123   0AE2 56            add b, a
1124   0AE3 E4            pop a
1125   0AE4             ; --- END TERMS
1126   0AE4 74            mov d, b
1127   0AE5 32            mov bl, [d]
1128   0AE6 A7 00         mov bh, 0
1129   0AE8 38 00 00      mov c, 0
1130   0AEB             ; --- START RELATIONAL
1131   0AEB D7            push a
1132   0AEC 11            mov a, b
1133   0AED FD 2E 45 00   mov32 cb, $00000045
1133   0AF1 00 00 
1134   0AF3 B0            cmp a, b
1135   0AF4 FD 71         seq ; ==
1136   0AF6 E4            pop a
1137   0AF7             ; --- END RELATIONAL
1138   0AF7 FD A7         sand a, b
1139   0AF9 E4            pop a
1140   0AFA             ; --- END LOGICAL AND
1141   0AFA E7            pop d
1142   0AFB FD 43         mov [d], b
1143   0AFD             ; return pass; 
1144   0AFD                            
1145   0AFD FA FF FF      lea d, [bp + -1] ; $pass
1146   0B00 2A            mov b, [d]
1147   0B01 38 00 00      mov c, 0
1148   0B04 F9            leave
1149   0B05 09            ret
1150   0B06             
1151   0B06             test2:
1152   0B06 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1153   0B09             ; int pass = 1; 
1154   0B09 52 02 00      sub sp, 2
1155   0B0C             ; --- START LOCAL VAR INITIALIZATION
1156   0B0C FA FF FF      lea d, [bp + -1] ; $pass
1157   0B0F DA            push d
1158   0B10                            
1159   0B10 FD 2E 01 00   mov32 cb, $00000001
1159   0B14 00 00 
1160   0B16 E7            pop d
1161   0B17 FD 43         mov [d], b
1162   0B19             ; --- END LOCAL VAR INITIALIZATION
1163   0B19             ; char ca[5]; 
1164   0B19 52 05 00      sub sp, 5
1165   0B1C             ; int indices[5]; 
1166   0B1C 52 0A 00      sub sp, 10
1167   0B1F             ; char *p; 
1168   0B1F 52 02 00      sub sp, 2
1169   0B22             ; p = ca; 
1170   0B22 FA EE FF      lea d, [bp + -18] ; $p
1171   0B25 DA            push d
1172   0B26                            
1173   0B26 FA FA FF      lea d, [bp + -6] ; $ca
1174   0B29 2D            mov b, d
1175   0B2A 38 00 00      mov c, 0
1176   0B2D E7            pop d
1177   0B2E FD 43         mov [d], b
1178   0B30             ; ca[0] = 'A'; 
1179   0B30 FA FA FF      lea d, [bp + -6] ; $ca
1180   0B33 D7            push a
1181   0B34 DA            push d
1182   0B35                            
1183   0B35 FD 2E 00 00   mov32 cb, $00000000
1183   0B39 00 00 
1184   0B3B E7            pop d
1185   0B3C 5A            add d, b
1186   0B3D E4            pop a
1187   0B3E DA            push d
1188   0B3F                            
1189   0B3F FD 2E 41 00   mov32 cb, $00000041
1189   0B43 00 00 
1190   0B45 E7            pop d
1191   0B46 FD 3E         mov [d], bl
1192   0B48             ; ca[1] = 'B'; 
1193   0B48 FA FA FF      lea d, [bp + -6] ; $ca
1194   0B4B D7            push a
1195   0B4C DA            push d
1196   0B4D                            
1197   0B4D FD 2E 01 00   mov32 cb, $00000001
1197   0B51 00 00 
1198   0B53 E7            pop d
1199   0B54 5A            add d, b
1200   0B55 E4            pop a
1201   0B56 DA            push d
1202   0B57                            
1203   0B57 FD 2E 42 00   mov32 cb, $00000042
1203   0B5B 00 00 
1204   0B5D E7            pop d
1205   0B5E FD 3E         mov [d], bl
1206   0B60             ; ca[2] = 'C'; 
1207   0B60 FA FA FF      lea d, [bp + -6] ; $ca
1208   0B63 D7            push a
1209   0B64 DA            push d
1210   0B65                            
1211   0B65 FD 2E 02 00   mov32 cb, $00000002
1211   0B69 00 00 
1212   0B6B E7            pop d
1213   0B6C 5A            add d, b
1214   0B6D E4            pop a
1215   0B6E DA            push d
1216   0B6F                            
1217   0B6F FD 2E 43 00   mov32 cb, $00000043
1217   0B73 00 00 
1218   0B75 E7            pop d
1219   0B76 FD 3E         mov [d], bl
1220   0B78             ; ca[3] = 'D'; 
1221   0B78 FA FA FF      lea d, [bp + -6] ; $ca
1222   0B7B D7            push a
1223   0B7C DA            push d
1224   0B7D                            
1225   0B7D FD 2E 03 00   mov32 cb, $00000003
1225   0B81 00 00 
1226   0B83 E7            pop d
1227   0B84 5A            add d, b
1228   0B85 E4            pop a
1229   0B86 DA            push d
1230   0B87                            
1231   0B87 FD 2E 44 00   mov32 cb, $00000044
1231   0B8B 00 00 
1232   0B8D E7            pop d
1233   0B8E FD 3E         mov [d], bl
1234   0B90             ; ca[4] = 'E'; 
1235   0B90 FA FA FF      lea d, [bp + -6] ; $ca
1236   0B93 D7            push a
1237   0B94 DA            push d
1238   0B95                            
1239   0B95 FD 2E 04 00   mov32 cb, $00000004
1239   0B99 00 00 
1240   0B9B E7            pop d
1241   0B9C 5A            add d, b
1242   0B9D E4            pop a
1243   0B9E DA            push d
1244   0B9F                            
1245   0B9F FD 2E 45 00   mov32 cb, $00000045
1245   0BA3 00 00 
1246   0BA5 E7            pop d
1247   0BA6 FD 3E         mov [d], bl
1248   0BA8             ; indices[0] = 0; 
1249   0BA8 FA F0 FF      lea d, [bp + -16] ; $indices
1250   0BAB D7            push a
1251   0BAC DA            push d
1252   0BAD                            
1253   0BAD FD 2E 00 00   mov32 cb, $00000000
1253   0BB1 00 00 
1254   0BB3 E7            pop d
1255   0BB4 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1256   0BB8 E4            pop a
1257   0BB9 DA            push d
1258   0BBA                            
1259   0BBA FD 2E 00 00   mov32 cb, $00000000
1259   0BBE 00 00 
1260   0BC0 E7            pop d
1261   0BC1 FD 43         mov [d], b
1262   0BC3             ; indices[1] = 1; 
1263   0BC3 FA F0 FF      lea d, [bp + -16] ; $indices
1264   0BC6 D7            push a
1265   0BC7 DA            push d
1266   0BC8                            
1267   0BC8 FD 2E 01 00   mov32 cb, $00000001
1267   0BCC 00 00 
1268   0BCE E7            pop d
1269   0BCF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1270   0BD3 E4            pop a
1271   0BD4 DA            push d
1272   0BD5                            
1273   0BD5 FD 2E 01 00   mov32 cb, $00000001
1273   0BD9 00 00 
1274   0BDB E7            pop d
1275   0BDC FD 43         mov [d], b
1276   0BDE             ; indices[2] = 2; 
1277   0BDE FA F0 FF      lea d, [bp + -16] ; $indices
1278   0BE1 D7            push a
1279   0BE2 DA            push d
1280   0BE3                            
1281   0BE3 FD 2E 02 00   mov32 cb, $00000002
1281   0BE7 00 00 
1282   0BE9 E7            pop d
1283   0BEA FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1284   0BEE E4            pop a
1285   0BEF DA            push d
1286   0BF0                            
1287   0BF0 FD 2E 02 00   mov32 cb, $00000002
1287   0BF4 00 00 
1288   0BF6 E7            pop d
1289   0BF7 FD 43         mov [d], b
1290   0BF9             ; indices[3] = 3; 
1291   0BF9 FA F0 FF      lea d, [bp + -16] ; $indices
1292   0BFC D7            push a
1293   0BFD DA            push d
1294   0BFE                            
1295   0BFE FD 2E 03 00   mov32 cb, $00000003
1295   0C02 00 00 
1296   0C04 E7            pop d
1297   0C05 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1298   0C09 E4            pop a
1299   0C0A DA            push d
1300   0C0B                            
1301   0C0B FD 2E 03 00   mov32 cb, $00000003
1301   0C0F 00 00 
1302   0C11 E7            pop d
1303   0C12 FD 43         mov [d], b
1304   0C14             ; indices[4] = 4; 
1305   0C14 FA F0 FF      lea d, [bp + -16] ; $indices
1306   0C17 D7            push a
1307   0C18 DA            push d
1308   0C19                            
1309   0C19 FD 2E 04 00   mov32 cb, $00000004
1309   0C1D 00 00 
1310   0C1F E7            pop d
1311   0C20 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1312   0C24 E4            pop a
1313   0C25 DA            push d
1314   0C26                            
1315   0C26 FD 2E 04 00   mov32 cb, $00000004
1315   0C2A 00 00 
1316   0C2C E7            pop d
1317   0C2D FD 43         mov [d], b
1318   0C2F             ; pass = pass && *(p + indices[0]) == 'A'; 
1319   0C2F FA FF FF      lea d, [bp + -1] ; $pass
1320   0C32 DA            push d
1321   0C33                            
1322   0C33 FA FF FF      lea d, [bp + -1] ; $pass
1323   0C36 2A            mov b, [d]
1324   0C37 38 00 00      mov c, 0
1325   0C3A             ; --- START LOGICAL AND
1326   0C3A D7            push a
1327   0C3B 11            mov a, b
1328   0C3C                            
1329   0C3C FA EE FF      lea d, [bp + -18] ; $p
1330   0C3F 2A            mov b, [d]
1331   0C40 38 00 00      mov c, 0
1332   0C43             ; --- START TERMS
1333   0C43 D7            push a
1334   0C44 11            mov a, b
1335   0C45 FA F0 FF      lea d, [bp + -16] ; $indices
1336   0C48 D7            push a
1337   0C49 DA            push d
1338   0C4A                            
1339   0C4A FD 2E 00 00   mov32 cb, $00000000
1339   0C4E 00 00 
1340   0C50 E7            pop d
1341   0C51 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1342   0C55 E4            pop a
1343   0C56 2A            mov b, [d]
1344   0C57 38 00 00      mov c, 0
1345   0C5A 56            add b, a
1346   0C5B E4            pop a
1347   0C5C             ; --- END TERMS
1348   0C5C 74            mov d, b
1349   0C5D 32            mov bl, [d]
1350   0C5E A7 00         mov bh, 0
1351   0C60 38 00 00      mov c, 0
1352   0C63             ; --- START RELATIONAL
1353   0C63 D7            push a
1354   0C64 11            mov a, b
1355   0C65 FD 2E 41 00   mov32 cb, $00000041
1355   0C69 00 00 
1356   0C6B B0            cmp a, b
1357   0C6C FD 71         seq ; ==
1358   0C6E E4            pop a
1359   0C6F             ; --- END RELATIONAL
1360   0C6F FD A7         sand a, b
1361   0C71 E4            pop a
1362   0C72             ; --- END LOGICAL AND
1363   0C72 E7            pop d
1364   0C73 FD 43         mov [d], b
1365   0C75             ; pass = pass && *(p + indices[1]) == 'B'; 
1366   0C75 FA FF FF      lea d, [bp + -1] ; $pass
1367   0C78 DA            push d
1368   0C79                            
1369   0C79 FA FF FF      lea d, [bp + -1] ; $pass
1370   0C7C 2A            mov b, [d]
1371   0C7D 38 00 00      mov c, 0
1372   0C80             ; --- START LOGICAL AND
1373   0C80 D7            push a
1374   0C81 11            mov a, b
1375   0C82                            
1376   0C82 FA EE FF      lea d, [bp + -18] ; $p
1377   0C85 2A            mov b, [d]
1378   0C86 38 00 00      mov c, 0
1379   0C89             ; --- START TERMS
1380   0C89 D7            push a
1381   0C8A 11            mov a, b
1382   0C8B FA F0 FF      lea d, [bp + -16] ; $indices
1383   0C8E D7            push a
1384   0C8F DA            push d
1385   0C90                            
1386   0C90 FD 2E 01 00   mov32 cb, $00000001
1386   0C94 00 00 
1387   0C96 E7            pop d
1388   0C97 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1389   0C9B E4            pop a
1390   0C9C 2A            mov b, [d]
1391   0C9D 38 00 00      mov c, 0
1392   0CA0 56            add b, a
1393   0CA1 E4            pop a
1394   0CA2             ; --- END TERMS
1395   0CA2 74            mov d, b
1396   0CA3 32            mov bl, [d]
1397   0CA4 A7 00         mov bh, 0
1398   0CA6 38 00 00      mov c, 0
1399   0CA9             ; --- START RELATIONAL
1400   0CA9 D7            push a
1401   0CAA 11            mov a, b
1402   0CAB FD 2E 42 00   mov32 cb, $00000042
1402   0CAF 00 00 
1403   0CB1 B0            cmp a, b
1404   0CB2 FD 71         seq ; ==
1405   0CB4 E4            pop a
1406   0CB5             ; --- END RELATIONAL
1407   0CB5 FD A7         sand a, b
1408   0CB7 E4            pop a
1409   0CB8             ; --- END LOGICAL AND
1410   0CB8 E7            pop d
1411   0CB9 FD 43         mov [d], b
1412   0CBB             ; pass = pass && *(p + indices[2]) == 'C'; 
1413   0CBB FA FF FF      lea d, [bp + -1] ; $pass
1414   0CBE DA            push d
1415   0CBF                            
1416   0CBF FA FF FF      lea d, [bp + -1] ; $pass
1417   0CC2 2A            mov b, [d]
1418   0CC3 38 00 00      mov c, 0
1419   0CC6             ; --- START LOGICAL AND
1420   0CC6 D7            push a
1421   0CC7 11            mov a, b
1422   0CC8                            
1423   0CC8 FA EE FF      lea d, [bp + -18] ; $p
1424   0CCB 2A            mov b, [d]
1425   0CCC 38 00 00      mov c, 0
1426   0CCF             ; --- START TERMS
1427   0CCF D7            push a
1428   0CD0 11            mov a, b
1429   0CD1 FA F0 FF      lea d, [bp + -16] ; $indices
1430   0CD4 D7            push a
1431   0CD5 DA            push d
1432   0CD6                            
1433   0CD6 FD 2E 02 00   mov32 cb, $00000002
1433   0CDA 00 00 
1434   0CDC E7            pop d
1435   0CDD FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1436   0CE1 E4            pop a
1437   0CE2 2A            mov b, [d]
1438   0CE3 38 00 00      mov c, 0
1439   0CE6 56            add b, a
1440   0CE7 E4            pop a
1441   0CE8             ; --- END TERMS
1442   0CE8 74            mov d, b
1443   0CE9 32            mov bl, [d]
1444   0CEA A7 00         mov bh, 0
1445   0CEC 38 00 00      mov c, 0
1446   0CEF             ; --- START RELATIONAL
1447   0CEF D7            push a
1448   0CF0 11            mov a, b
1449   0CF1 FD 2E 43 00   mov32 cb, $00000043
1449   0CF5 00 00 
1450   0CF7 B0            cmp a, b
1451   0CF8 FD 71         seq ; ==
1452   0CFA E4            pop a
1453   0CFB             ; --- END RELATIONAL
1454   0CFB FD A7         sand a, b
1455   0CFD E4            pop a
1456   0CFE             ; --- END LOGICAL AND
1457   0CFE E7            pop d
1458   0CFF FD 43         mov [d], b
1459   0D01             ; pass = pass && *(p + indices[3]) == 'D'; 
1460   0D01 FA FF FF      lea d, [bp + -1] ; $pass
1461   0D04 DA            push d
1462   0D05                            
1463   0D05 FA FF FF      lea d, [bp + -1] ; $pass
1464   0D08 2A            mov b, [d]
1465   0D09 38 00 00      mov c, 0
1466   0D0C             ; --- START LOGICAL AND
1467   0D0C D7            push a
1468   0D0D 11            mov a, b
1469   0D0E                            
1470   0D0E FA EE FF      lea d, [bp + -18] ; $p
1471   0D11 2A            mov b, [d]
1472   0D12 38 00 00      mov c, 0
1473   0D15             ; --- START TERMS
1474   0D15 D7            push a
1475   0D16 11            mov a, b
1476   0D17 FA F0 FF      lea d, [bp + -16] ; $indices
1477   0D1A D7            push a
1478   0D1B DA            push d
1479   0D1C                            
1480   0D1C FD 2E 03 00   mov32 cb, $00000003
1480   0D20 00 00 
1481   0D22 E7            pop d
1482   0D23 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1483   0D27 E4            pop a
1484   0D28 2A            mov b, [d]
1485   0D29 38 00 00      mov c, 0
1486   0D2C 56            add b, a
1487   0D2D E4            pop a
1488   0D2E             ; --- END TERMS
1489   0D2E 74            mov d, b
1490   0D2F 32            mov bl, [d]
1491   0D30 A7 00         mov bh, 0
1492   0D32 38 00 00      mov c, 0
1493   0D35             ; --- START RELATIONAL
1494   0D35 D7            push a
1495   0D36 11            mov a, b
1496   0D37 FD 2E 44 00   mov32 cb, $00000044
1496   0D3B 00 00 
1497   0D3D B0            cmp a, b
1498   0D3E FD 71         seq ; ==
1499   0D40 E4            pop a
1500   0D41             ; --- END RELATIONAL
1501   0D41 FD A7         sand a, b
1502   0D43 E4            pop a
1503   0D44             ; --- END LOGICAL AND
1504   0D44 E7            pop d
1505   0D45 FD 43         mov [d], b
1506   0D47             ; pass = pass && *(p + indices[4]) == 'E'; 
1507   0D47 FA FF FF      lea d, [bp + -1] ; $pass
1508   0D4A DA            push d
1509   0D4B                            
1510   0D4B FA FF FF      lea d, [bp + -1] ; $pass
1511   0D4E 2A            mov b, [d]
1512   0D4F 38 00 00      mov c, 0
1513   0D52             ; --- START LOGICAL AND
1514   0D52 D7            push a
1515   0D53 11            mov a, b
1516   0D54                            
1517   0D54 FA EE FF      lea d, [bp + -18] ; $p
1518   0D57 2A            mov b, [d]
1519   0D58 38 00 00      mov c, 0
1520   0D5B             ; --- START TERMS
1521   0D5B D7            push a
1522   0D5C 11            mov a, b
1523   0D5D FA F0 FF      lea d, [bp + -16] ; $indices
1524   0D60 D7            push a
1525   0D61 DA            push d
1526   0D62                            
1527   0D62 FD 2E 04 00   mov32 cb, $00000004
1527   0D66 00 00 
1528   0D68 E7            pop d
1529   0D69 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1530   0D6D E4            pop a
1531   0D6E 2A            mov b, [d]
1532   0D6F 38 00 00      mov c, 0
1533   0D72 56            add b, a
1534   0D73 E4            pop a
1535   0D74             ; --- END TERMS
1536   0D74 74            mov d, b
1537   0D75 32            mov bl, [d]
1538   0D76 A7 00         mov bh, 0
1539   0D78 38 00 00      mov c, 0
1540   0D7B             ; --- START RELATIONAL
1541   0D7B D7            push a
1542   0D7C 11            mov a, b
1543   0D7D FD 2E 45 00   mov32 cb, $00000045
1543   0D81 00 00 
1544   0D83 B0            cmp a, b
1545   0D84 FD 71         seq ; ==
1546   0D86 E4            pop a
1547   0D87             ; --- END RELATIONAL
1548   0D87 FD A7         sand a, b
1549   0D89 E4            pop a
1550   0D8A             ; --- END LOGICAL AND
1551   0D8A E7            pop d
1552   0D8B FD 43         mov [d], b
1553   0D8D             ; return pass; 
1554   0D8D                            
1555   0D8D FA FF FF      lea d, [bp + -1] ; $pass
1556   0D90 2A            mov b, [d]
1557   0D91 38 00 00      mov c, 0
1558   0D94 F9            leave
1559   0D95 09            ret
1560   0D96             
1561   0D96             test3:
1562   0D96 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1563   0D99             ; int pass = 1; 
1564   0D99 52 02 00      sub sp, 2
1565   0D9C             ; --- START LOCAL VAR INITIALIZATION
1566   0D9C FA FF FF      lea d, [bp + -1] ; $pass
1567   0D9F DA            push d
1568   0DA0                            
1569   0DA0 FD 2E 01 00   mov32 cb, $00000001
1569   0DA4 00 00 
1570   0DA6 E7            pop d
1571   0DA7 FD 43         mov [d], b
1572   0DA9             ; --- END LOCAL VAR INITIALIZATION
1573   0DA9             ; st.c = 'A'; 
1574   0DA9 FA 05 00      lea d, [bp + 5] ; $st
1575   0DAC 58 00 00      add d, 0
1576   0DAF DA            push d
1577   0DB0                            
1578   0DB0 FD 2E 41 00   mov32 cb, $00000041
1578   0DB4 00 00 
1579   0DB6 E7            pop d
1580   0DB7 FD 3E         mov [d], bl
1581   0DB9             ; st.i = 277; 
1582   0DB9 FA 05 00      lea d, [bp + 5] ; $st
1583   0DBC 58 01 00      add d, 1
1584   0DBF DA            push d
1585   0DC0                            
1586   0DC0 FD 2E 15 01   mov32 cb, $00000115
1586   0DC4 00 00 
1587   0DC6 E7            pop d
1588   0DC7 FD 43         mov [d], b
1589   0DC9             ; st.m[0] = 0; 
1590   0DC9 FA 05 00      lea d, [bp + 5] ; $st
1591   0DCC 58 03 00      add d, 3
1592   0DCF D7            push a
1593   0DD0 DA            push d
1594   0DD1                            
1595   0DD1 FD 2E 00 00   mov32 cb, $00000000
1595   0DD5 00 00 
1596   0DD7 E7            pop d
1597   0DD8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1598   0DDC E4            pop a
1599   0DDD DA            push d
1600   0DDE                            
1601   0DDE FD 2E 00 00   mov32 cb, $00000000
1601   0DE2 00 00 
1602   0DE4 E7            pop d
1603   0DE5 FD 43         mov [d], b
1604   0DE7             ; st.m[1] = 1; 
1605   0DE7 FA 05 00      lea d, [bp + 5] ; $st
1606   0DEA 58 03 00      add d, 3
1607   0DED D7            push a
1608   0DEE DA            push d
1609   0DEF                            
1610   0DEF FD 2E 01 00   mov32 cb, $00000001
1610   0DF3 00 00 
1611   0DF5 E7            pop d
1612   0DF6 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1613   0DFA E4            pop a
1614   0DFB DA            push d
1615   0DFC                            
1616   0DFC FD 2E 01 00   mov32 cb, $00000001
1616   0E00 00 00 
1617   0E02 E7            pop d
1618   0E03 FD 43         mov [d], b
1619   0E05             ; st.m[2] = 2; 
1620   0E05 FA 05 00      lea d, [bp + 5] ; $st
1621   0E08 58 03 00      add d, 3
1622   0E0B D7            push a
1623   0E0C DA            push d
1624   0E0D                            
1625   0E0D FD 2E 02 00   mov32 cb, $00000002
1625   0E11 00 00 
1626   0E13 E7            pop d
1627   0E14 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1628   0E18 E4            pop a
1629   0E19 DA            push d
1630   0E1A                            
1631   0E1A FD 2E 02 00   mov32 cb, $00000002
1631   0E1E 00 00 
1632   0E20 E7            pop d
1633   0E21 FD 43         mov [d], b
1634   0E23             ; st.m[3] = 3; 
1635   0E23 FA 05 00      lea d, [bp + 5] ; $st
1636   0E26 58 03 00      add d, 3
1637   0E29 D7            push a
1638   0E2A DA            push d
1639   0E2B                            
1640   0E2B FD 2E 03 00   mov32 cb, $00000003
1640   0E2F 00 00 
1641   0E31 E7            pop d
1642   0E32 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1643   0E36 E4            pop a
1644   0E37 DA            push d
1645   0E38                            
1646   0E38 FD 2E 03 00   mov32 cb, $00000003
1646   0E3C 00 00 
1647   0E3E E7            pop d
1648   0E3F FD 43         mov [d], b
1649   0E41             ; st.m[4] = 4; 
1650   0E41 FA 05 00      lea d, [bp + 5] ; $st
1651   0E44 58 03 00      add d, 3
1652   0E47 D7            push a
1653   0E48 DA            push d
1654   0E49                            
1655   0E49 FD 2E 04 00   mov32 cb, $00000004
1655   0E4D 00 00 
1656   0E4F E7            pop d
1657   0E50 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1658   0E54 E4            pop a
1659   0E55 DA            push d
1660   0E56                            
1661   0E56 FD 2E 04 00   mov32 cb, $00000004
1661   0E5A 00 00 
1662   0E5C E7            pop d
1663   0E5D FD 43         mov [d], b
1664   0E5F             ; pass = pass && st.c == 'A'; 
1665   0E5F FA FF FF      lea d, [bp + -1] ; $pass
1666   0E62 DA            push d
1667   0E63                            
1668   0E63 FA FF FF      lea d, [bp + -1] ; $pass
1669   0E66 2A            mov b, [d]
1670   0E67 38 00 00      mov c, 0
1671   0E6A             ; --- START LOGICAL AND
1672   0E6A D7            push a
1673   0E6B 11            mov a, b
1674   0E6C FA 05 00      lea d, [bp + 5] ; $st
1675   0E6F 58 00 00      add d, 0
1676   0E72 32            mov bl, [d]
1677   0E73 A7 00         mov bh, 0
1678   0E75 38 00 00      mov c, 0
1679   0E78             ; --- START RELATIONAL
1680   0E78 D7            push a
1681   0E79 11            mov a, b
1682   0E7A FD 2E 41 00   mov32 cb, $00000041
1682   0E7E 00 00 
1683   0E80 B0            cmp a, b
1684   0E81 FD 71         seq ; ==
1685   0E83 E4            pop a
1686   0E84             ; --- END RELATIONAL
1687   0E84 FD A7         sand a, b
1688   0E86 E4            pop a
1689   0E87             ; --- END LOGICAL AND
1690   0E87 E7            pop d
1691   0E88 FD 43         mov [d], b
1692   0E8A             ; pass = pass && st.i == 277; 
1693   0E8A FA FF FF      lea d, [bp + -1] ; $pass
1694   0E8D DA            push d
1695   0E8E                            
1696   0E8E FA FF FF      lea d, [bp + -1] ; $pass
1697   0E91 2A            mov b, [d]
1698   0E92 38 00 00      mov c, 0
1699   0E95             ; --- START LOGICAL AND
1700   0E95 D7            push a
1701   0E96 11            mov a, b
1702   0E97 FA 05 00      lea d, [bp + 5] ; $st
1703   0E9A 58 01 00      add d, 1
1704   0E9D 2A            mov b, [d]
1705   0E9E 38 00 00      mov c, 0
1706   0EA1             ; --- START RELATIONAL
1707   0EA1 D7            push a
1708   0EA2 11            mov a, b
1709   0EA3 FD 2E 15 01   mov32 cb, $00000115
1709   0EA7 00 00 
1710   0EA9 B0            cmp a, b
1711   0EAA FD 71         seq ; ==
1712   0EAC E4            pop a
1713   0EAD             ; --- END RELATIONAL
1714   0EAD FD A7         sand a, b
1715   0EAF E4            pop a
1716   0EB0             ; --- END LOGICAL AND
1717   0EB0 E7            pop d
1718   0EB1 FD 43         mov [d], b
1719   0EB3             ; pass = pass && st.m[0] == 0; 
1720   0EB3 FA FF FF      lea d, [bp + -1] ; $pass
1721   0EB6 DA            push d
1722   0EB7                            
1723   0EB7 FA FF FF      lea d, [bp + -1] ; $pass
1724   0EBA 2A            mov b, [d]
1725   0EBB 38 00 00      mov c, 0
1726   0EBE             ; --- START LOGICAL AND
1727   0EBE D7            push a
1728   0EBF 11            mov a, b
1729   0EC0 FA 05 00      lea d, [bp + 5] ; $st
1730   0EC3 58 03 00      add d, 3
1731   0EC6 D7            push a
1732   0EC7 DA            push d
1733   0EC8                            
1734   0EC8 FD 2E 00 00   mov32 cb, $00000000
1734   0ECC 00 00 
1735   0ECE E7            pop d
1736   0ECF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1737   0ED3 E4            pop a
1738   0ED4 2A            mov b, [d]
1739   0ED5 38 00 00      mov c, 0
1740   0ED8             ; --- START RELATIONAL
1741   0ED8 D7            push a
1742   0ED9 11            mov a, b
1743   0EDA FD 2E 00 00   mov32 cb, $00000000
1743   0EDE 00 00 
1744   0EE0 B0            cmp a, b
1745   0EE1 FD 71         seq ; ==
1746   0EE3 E4            pop a
1747   0EE4             ; --- END RELATIONAL
1748   0EE4 FD A7         sand a, b
1749   0EE6 E4            pop a
1750   0EE7             ; --- END LOGICAL AND
1751   0EE7 E7            pop d
1752   0EE8 FD 43         mov [d], b
1753   0EEA             ; pass = pass && st.m[1] == 1; 
1754   0EEA FA FF FF      lea d, [bp + -1] ; $pass
1755   0EED DA            push d
1756   0EEE                            
1757   0EEE FA FF FF      lea d, [bp + -1] ; $pass
1758   0EF1 2A            mov b, [d]
1759   0EF2 38 00 00      mov c, 0
1760   0EF5             ; --- START LOGICAL AND
1761   0EF5 D7            push a
1762   0EF6 11            mov a, b
1763   0EF7 FA 05 00      lea d, [bp + 5] ; $st
1764   0EFA 58 03 00      add d, 3
1765   0EFD D7            push a
1766   0EFE DA            push d
1767   0EFF                            
1768   0EFF FD 2E 01 00   mov32 cb, $00000001
1768   0F03 00 00 
1769   0F05 E7            pop d
1770   0F06 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1771   0F0A E4            pop a
1772   0F0B 2A            mov b, [d]
1773   0F0C 38 00 00      mov c, 0
1774   0F0F             ; --- START RELATIONAL
1775   0F0F D7            push a
1776   0F10 11            mov a, b
1777   0F11 FD 2E 01 00   mov32 cb, $00000001
1777   0F15 00 00 
1778   0F17 B0            cmp a, b
1779   0F18 FD 71         seq ; ==
1780   0F1A E4            pop a
1781   0F1B             ; --- END RELATIONAL
1782   0F1B FD A7         sand a, b
1783   0F1D E4            pop a
1784   0F1E             ; --- END LOGICAL AND
1785   0F1E E7            pop d
1786   0F1F FD 43         mov [d], b
1787   0F21             ; pass = pass && st.m[2] == 2; 
1788   0F21 FA FF FF      lea d, [bp + -1] ; $pass
1789   0F24 DA            push d
1790   0F25                            
1791   0F25 FA FF FF      lea d, [bp + -1] ; $pass
1792   0F28 2A            mov b, [d]
1793   0F29 38 00 00      mov c, 0
1794   0F2C             ; --- START LOGICAL AND
1795   0F2C D7            push a
1796   0F2D 11            mov a, b
1797   0F2E FA 05 00      lea d, [bp + 5] ; $st
1798   0F31 58 03 00      add d, 3
1799   0F34 D7            push a
1800   0F35 DA            push d
1801   0F36                            
1802   0F36 FD 2E 02 00   mov32 cb, $00000002
1802   0F3A 00 00 
1803   0F3C E7            pop d
1804   0F3D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1805   0F41 E4            pop a
1806   0F42 2A            mov b, [d]
1807   0F43 38 00 00      mov c, 0
1808   0F46             ; --- START RELATIONAL
1809   0F46 D7            push a
1810   0F47 11            mov a, b
1811   0F48 FD 2E 02 00   mov32 cb, $00000002
1811   0F4C 00 00 
1812   0F4E B0            cmp a, b
1813   0F4F FD 71         seq ; ==
1814   0F51 E4            pop a
1815   0F52             ; --- END RELATIONAL
1816   0F52 FD A7         sand a, b
1817   0F54 E4            pop a
1818   0F55             ; --- END LOGICAL AND
1819   0F55 E7            pop d
1820   0F56 FD 43         mov [d], b
1821   0F58             ; pass = pass && st.m[3] == 3; 
1822   0F58 FA FF FF      lea d, [bp + -1] ; $pass
1823   0F5B DA            push d
1824   0F5C                            
1825   0F5C FA FF FF      lea d, [bp + -1] ; $pass
1826   0F5F 2A            mov b, [d]
1827   0F60 38 00 00      mov c, 0
1828   0F63             ; --- START LOGICAL AND
1829   0F63 D7            push a
1830   0F64 11            mov a, b
1831   0F65 FA 05 00      lea d, [bp + 5] ; $st
1832   0F68 58 03 00      add d, 3
1833   0F6B D7            push a
1834   0F6C DA            push d
1835   0F6D                            
1836   0F6D FD 2E 03 00   mov32 cb, $00000003
1836   0F71 00 00 
1837   0F73 E7            pop d
1838   0F74 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1839   0F78 E4            pop a
1840   0F79 2A            mov b, [d]
1841   0F7A 38 00 00      mov c, 0
1842   0F7D             ; --- START RELATIONAL
1843   0F7D D7            push a
1844   0F7E 11            mov a, b
1845   0F7F FD 2E 03 00   mov32 cb, $00000003
1845   0F83 00 00 
1846   0F85 B0            cmp a, b
1847   0F86 FD 71         seq ; ==
1848   0F88 E4            pop a
1849   0F89             ; --- END RELATIONAL
1850   0F89 FD A7         sand a, b
1851   0F8B E4            pop a
1852   0F8C             ; --- END LOGICAL AND
1853   0F8C E7            pop d
1854   0F8D FD 43         mov [d], b
1855   0F8F             ; pass = pass && st.m[4] == 4; 
1856   0F8F FA FF FF      lea d, [bp + -1] ; $pass
1857   0F92 DA            push d
1858   0F93                            
1859   0F93 FA FF FF      lea d, [bp + -1] ; $pass
1860   0F96 2A            mov b, [d]
1861   0F97 38 00 00      mov c, 0
1862   0F9A             ; --- START LOGICAL AND
1863   0F9A D7            push a
1864   0F9B 11            mov a, b
1865   0F9C FA 05 00      lea d, [bp + 5] ; $st
1866   0F9F 58 03 00      add d, 3
1867   0FA2 D7            push a
1868   0FA3 DA            push d
1869   0FA4                            
1870   0FA4 FD 2E 04 00   mov32 cb, $00000004
1870   0FA8 00 00 
1871   0FAA E7            pop d
1872   0FAB FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1873   0FAF E4            pop a
1874   0FB0 2A            mov b, [d]
1875   0FB1 38 00 00      mov c, 0
1876   0FB4             ; --- START RELATIONAL
1877   0FB4 D7            push a
1878   0FB5 11            mov a, b
1879   0FB6 FD 2E 04 00   mov32 cb, $00000004
1879   0FBA 00 00 
1880   0FBC B0            cmp a, b
1881   0FBD FD 71         seq ; ==
1882   0FBF E4            pop a
1883   0FC0             ; --- END RELATIONAL
1884   0FC0 FD A7         sand a, b
1885   0FC2 E4            pop a
1886   0FC3             ; --- END LOGICAL AND
1887   0FC3 E7            pop d
1888   0FC4 FD 43         mov [d], b
1889   0FC6             ; return pass; 
1890   0FC6                            
1891   0FC6 FA FF FF      lea d, [bp + -1] ; $pass
1892   0FC9 2A            mov b, [d]
1893   0FCA 38 00 00      mov c, 0
1894   0FCD F9            leave
1895   0FCE 09            ret
1896   0FCF             
1897   0FCF             printf:
1898   0FCF F8 00 00      enter 0 ; (push bp; mov bp, sp)
1899   0FD2             ; char *p, *format_p; 
1900   0FD2 52 02 00      sub sp, 2
1901   0FD5 52 02 00      sub sp, 2
1902   0FD8             ; format_p = format; 
1903   0FD8 FA FD FF      lea d, [bp + -3] ; $format_p
1904   0FDB DA            push d
1905   0FDC                            
1906   0FDC FA 05 00      lea d, [bp + 5] ; $format
1907   0FDF 2A            mov b, [d]
1908   0FE0 38 00 00      mov c, 0
1909   0FE3 E7            pop d
1910   0FE4 FD 43         mov [d], b
1911   0FE6             ; p = &format + 2; 
1912   0FE6 FA FF FF      lea d, [bp + -1] ; $p
1913   0FE9 DA            push d
1914   0FEA                            
1915   0FEA FA 05 00      lea d, [bp + 5] ; $format
1916   0FED 2D            mov b, d
1917   0FEE             ; --- START TERMS
1918   0FEE D7            push a
1919   0FEF 11            mov a, b
1920   0FF0 FD 2E 02 00   mov32 cb, $00000002
1920   0FF4 00 00 
1921   0FF6 56            add b, a
1922   0FF7 E4            pop a
1923   0FF8             ; --- END TERMS
1924   0FF8 E7            pop d
1925   0FF9 FD 43         mov [d], b
1926   0FFB             ; for(;;){ 
1927   0FFB             _for3_init:
1928   0FFB             _for3_cond:
1929   0FFB             _for3_block:
1930   0FFB             ; if(!*format_p) break; 
1931   0FFB             _if4_cond:
1932   0FFB                            
1933   0FFB FA FD FF      lea d, [bp + -3] ; $format_p
1934   0FFE 2A            mov b, [d]
1935   0FFF 38 00 00      mov c, 0
1936   1002 74            mov d, b
1937   1003 32            mov bl, [d]
1938   1004 A7 00         mov bh, 0
1939   1006 38 00 00      mov c, 0
1940   1009 C0 00 00      cmp b, 0
1941   100C FD 71         seq ; !
1942   100E C0 00 00      cmp b, 0
1943   1011 C6 1A 10      je _if4_else
1944   1014             _if4_TRUE:
1945   1014             ; break; 
1946   1014 0A CA 12      jmp _for3_exit ; for break
1947   1017 0A C7 12      jmp _if4_exit
1948   101A             _if4_else:
1949   101A             ; if(*format_p == '%'){ 
1950   101A             _if5_cond:
1951   101A                            
1952   101A FA FD FF      lea d, [bp + -3] ; $format_p
1953   101D 2A            mov b, [d]
1954   101E 38 00 00      mov c, 0
1955   1021 74            mov d, b
1956   1022 32            mov bl, [d]
1957   1023 A7 00         mov bh, 0
1958   1025 38 00 00      mov c, 0
1959   1028             ; --- START RELATIONAL
1960   1028 D7            push a
1961   1029 11            mov a, b
1962   102A FD 2E 25 00   mov32 cb, $00000025
1962   102E 00 00 
1963   1030 B0            cmp a, b
1964   1031 FD 71         seq ; ==
1965   1033 E4            pop a
1966   1034             ; --- END RELATIONAL
1967   1034 C0 00 00      cmp b, 0
1968   1037 C6 A2 12      je _if5_else
1969   103A             _if5_TRUE:
1970   103A             ; format_p++; 
1971   103A                            
1972   103A FA FD FF      lea d, [bp + -3] ; $format_p
1973   103D 2A            mov b, [d]
1974   103E 38 00 00      mov c, 0
1975   1041 FD 77         inc b
1976   1043 FA FD FF      lea d, [bp + -3] ; $format_p
1977   1046 FD 43         mov [d], b
1978   1048 FD 7D         dec b
1979   104A             ; switch(*format_p){ 
1980   104A             _switch6_expr:
1981   104A                            
1982   104A FA FD FF      lea d, [bp + -3] ; $format_p
1983   104D 2A            mov b, [d]
1984   104E 38 00 00      mov c, 0
1985   1051 74            mov d, b
1986   1052 32            mov bl, [d]
1987   1053 A7 00         mov bh, 0
1988   1055 38 00 00      mov c, 0
1989   1058             _switch6_comparisons:
1990   1058 C1 6C         cmp bl, $6c
1991   105A C6 86 10      je _switch6_case0
1992   105D C1 4C         cmp bl, $4c
1993   105F C6 86 10      je _switch6_case1
1994   1062 C1 64         cmp bl, $64
1995   1064 C6 96 11      je _switch6_case2
1996   1067 C1 69         cmp bl, $69
1997   1069 C6 96 11      je _switch6_case3
1998   106C C1 75         cmp bl, $75
1999   106E C6 C6 11      je _switch6_case4
2000   1071 C1 78         cmp bl, $78
2001   1073 C6 F6 11      je _switch6_case5
2002   1076 C1 63         cmp bl, $63
2003   1078 C6 26 12      je _switch6_case6
2004   107B C1 73         cmp bl, $73
2005   107D C6 56 12      je _switch6_case7
2006   1080 0A 83 12      jmp _switch6_default
2007   1083 0A 8F 12      jmp _switch6_exit
2008   1086             _switch6_case0:
2009   1086             _switch6_case1:
2010   1086             ; format_p++; 
2011   1086                            
2012   1086 FA FD FF      lea d, [bp + -3] ; $format_p
2013   1089 2A            mov b, [d]
2014   108A 38 00 00      mov c, 0
2015   108D FD 77         inc b
2016   108F FA FD FF      lea d, [bp + -3] ; $format_p
2017   1092 FD 43         mov [d], b
2018   1094 FD 7D         dec b
2019   1096             ; if(*format_p == 'd' || *format_p == 'i') 
2020   1096             _if7_cond:
2021   1096                            
2022   1096 FA FD FF      lea d, [bp + -3] ; $format_p
2023   1099 2A            mov b, [d]
2024   109A 38 00 00      mov c, 0
2025   109D 74            mov d, b
2026   109E 32            mov bl, [d]
2027   109F A7 00         mov bh, 0
2028   10A1 38 00 00      mov c, 0
2029   10A4             ; --- START RELATIONAL
2030   10A4 D7            push a
2031   10A5 11            mov a, b
2032   10A6 FD 2E 64 00   mov32 cb, $00000064
2032   10AA 00 00 
2033   10AC B0            cmp a, b
2034   10AD FD 71         seq ; ==
2035   10AF E4            pop a
2036   10B0             ; --- END RELATIONAL
2037   10B0             ; --- START LOGICAL OR
2038   10B0 D7            push a
2039   10B1 11            mov a, b
2040   10B2 FA FD FF      lea d, [bp + -3] ; $format_p
2041   10B5 2A            mov b, [d]
2042   10B6 38 00 00      mov c, 0
2043   10B9 74            mov d, b
2044   10BA 32            mov bl, [d]
2045   10BB A7 00         mov bh, 0
2046   10BD 38 00 00      mov c, 0
2047   10C0             ; --- START RELATIONAL
2048   10C0 D7            push a
2049   10C1 11            mov a, b
2050   10C2 FD 2E 69 00   mov32 cb, $00000069
2050   10C6 00 00 
2051   10C8 B0            cmp a, b
2052   10C9 FD 71         seq ; ==
2053   10CB E4            pop a
2054   10CC             ; --- END RELATIONAL
2055   10CC FD A8         sor a, b ; ||
2056   10CE E4            pop a
2057   10CF             ; --- END LOGICAL OR
2058   10CF C0 00 00      cmp b, 0
2059   10D2 C6 F3 10      je _if7_else
2060   10D5             _if7_TRUE:
2061   10D5             ; print_signed_long(*(long *)p); 
2062   10D5                            
2063   10D5             ; --- START FUNCTION CALL
2064   10D5                            
2065   10D5 FA FF FF      lea d, [bp + -1] ; $p
2066   10D8 2A            mov b, [d]
2067   10D9 38 00 00      mov c, 0
2068   10DC 74            mov d, b
2069   10DD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2070   10E0 FD 39         mov c, b ; And place it into C
2071   10E2 2A            mov b, [d] ; Lower Word in B
2072   10E3 12            mov a, c
2073   10E4 FD AA         swp a
2074   10E6 D7            push a
2075   10E7 FD AB         swp b
2076   10E9 D8            push b
2077   10EA 07 CC 12      call print_signed_long
2078   10ED 51 04 00      add sp, 4
2079   10F0             ; --- END FUNCTION CALL
2080   10F0 0A 7B 11      jmp _if7_exit
2081   10F3             _if7_else:
2082   10F3             ; if(*format_p == 'u') 
2083   10F3             _if8_cond:
2084   10F3                            
2085   10F3 FA FD FF      lea d, [bp + -3] ; $format_p
2086   10F6 2A            mov b, [d]
2087   10F7 38 00 00      mov c, 0
2088   10FA 74            mov d, b
2089   10FB 32            mov bl, [d]
2090   10FC A7 00         mov bh, 0
2091   10FE 38 00 00      mov c, 0
2092   1101             ; --- START RELATIONAL
2093   1101 D7            push a
2094   1102 11            mov a, b
2095   1103 FD 2E 75 00   mov32 cb, $00000075
2095   1107 00 00 
2096   1109 B0            cmp a, b
2097   110A FD 71         seq ; ==
2098   110C E4            pop a
2099   110D             ; --- END RELATIONAL
2100   110D C0 00 00      cmp b, 0
2101   1110 C6 31 11      je _if8_else
2102   1113             _if8_TRUE:
2103   1113             ; print_unsigned_long(*(unsigned long *)p); 
2104   1113                            
2105   1113             ; --- START FUNCTION CALL
2106   1113                            
2107   1113 FA FF FF      lea d, [bp + -1] ; $p
2108   1116 2A            mov b, [d]
2109   1117 38 00 00      mov c, 0
2110   111A 74            mov d, b
2111   111B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2112   111E FD 39         mov c, b ; And place it into C
2113   1120 2A            mov b, [d] ; Lower Word in B
2114   1121 12            mov a, c
2115   1122 FD AA         swp a
2116   1124 D7            push a
2117   1125 FD AB         swp b
2118   1127 D8            push b
2119   1128 07 5F 14      call print_unsigned_long
2120   112B 51 04 00      add sp, 4
2121   112E             ; --- END FUNCTION CALL
2122   112E 0A 7B 11      jmp _if8_exit
2123   1131             _if8_else:
2124   1131             ; if(*format_p == 'x') 
2125   1131             _if9_cond:
2126   1131                             
2127   1131 FA FD FF      lea d, [bp + -3] ; $format_p
2128   1134 2A            mov b, [d]
2129   1135 38 00 00      mov c, 0
2130   1138 74            mov d, b
2131   1139 32            mov bl, [d]
2132   113A A7 00         mov bh, 0
2133   113C 38 00 00      mov c, 0
2134   113F             ; --- START RELATIONAL
2135   113F D7            push a
2136   1140 11            mov a, b
2137   1141 FD 2E 78 00   mov32 cb, $00000078
2137   1145 00 00 
2138   1147 B0            cmp a, b
2139   1148 FD 71         seq ; ==
2140   114A E4            pop a
2141   114B             ; --- END RELATIONAL
2142   114B C0 00 00      cmp b, 0
2143   114E C6 6F 11      je _if9_else
2144   1151             _if9_TRUE:
2145   1151             ; printx32(*(long int *)p); 
2146   1151                             
2147   1151             ; --- START FUNCTION CALL
2148   1151                             
2149   1151 FA FF FF      lea d, [bp + -1] ; $p
2150   1154 2A            mov b, [d]
2151   1155 38 00 00      mov c, 0
2152   1158 74            mov d, b
2153   1159 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2154   115C FD 39         mov c, b ; And place it into C
2155   115E 2A            mov b, [d] ; Lower Word in B
2156   115F 12            mov a, c
2157   1160 FD AA         swp a
2158   1162 D7            push a
2159   1163 FD AB         swp b
2160   1165 D8            push b
2161   1166 07 93 15      call printx32
2162   1169 51 04 00      add sp, 4
2163   116C             ; --- END FUNCTION CALL
2164   116C 0A 7B 11      jmp _if9_exit
2165   116F             _if9_else:
2166   116F             ; err("Unexpected format in printf."); 
2167   116F                             
2168   116F             ; --- START FUNCTION CALL
2169   116F                             
2170   116F 26 FE 18      mov b, _s1 ; "Unexpected format in printf."
2171   1172 FD AB         swp b
2172   1174 D8            push b
2173   1175 07 F3 15      call err
2174   1178 51 02 00      add sp, 2
2175   117B             ; --- END FUNCTION CALL
2176   117B             _if9_exit:
2177   117B             _if8_exit:
2178   117B             _if7_exit:
2179   117B             ; p = p + 4; 
2180   117B FA FF FF      lea d, [bp + -1] ; $p
2181   117E DA            push d
2182   117F                             
2183   117F FA FF FF      lea d, [bp + -1] ; $p
2184   1182 2A            mov b, [d]
2185   1183 38 00 00      mov c, 0
2186   1186             ; --- START TERMS
2187   1186 D7            push a
2188   1187 11            mov a, b
2189   1188 FD 2E 04 00   mov32 cb, $00000004
2189   118C 00 00 
2190   118E 56            add b, a
2191   118F E4            pop a
2192   1190             ; --- END TERMS
2193   1190 E7            pop d
2194   1191 FD 43         mov [d], b
2195   1193             ; break; 
2196   1193 0A 8F 12      jmp _switch6_exit ; case break
2197   1196             _switch6_case2:
2198   1196             _switch6_case3:
2199   1196             ; print_signed(*(int*)p); 
2200   1196                             
2201   1196             ; --- START FUNCTION CALL
2202   1196                             
2203   1196 FA FF FF      lea d, [bp + -1] ; $p
2204   1199 2A            mov b, [d]
2205   119A 38 00 00      mov c, 0
2206   119D 74            mov d, b
2207   119E 2A            mov b, [d]
2208   119F 38 00 00      mov c, 0
2209   11A2 FD AB         swp b
2210   11A4 D8            push b
2211   11A5 07 21 16      call print_signed
2212   11A8 51 02 00      add sp, 2
2213   11AB             ; --- END FUNCTION CALL
2214   11AB             ; p = p + 2; 
2215   11AB FA FF FF      lea d, [bp + -1] ; $p
2216   11AE DA            push d
2217   11AF                             
2218   11AF FA FF FF      lea d, [bp + -1] ; $p
2219   11B2 2A            mov b, [d]
2220   11B3 38 00 00      mov c, 0
2221   11B6             ; --- START TERMS
2222   11B6 D7            push a
2223   11B7 11            mov a, b
2224   11B8 FD 2E 02 00   mov32 cb, $00000002
2224   11BC 00 00 
2225   11BE 56            add b, a
2226   11BF E4            pop a
2227   11C0             ; --- END TERMS
2228   11C0 E7            pop d
2229   11C1 FD 43         mov [d], b
2230   11C3             ; break; 
2231   11C3 0A 8F 12      jmp _switch6_exit ; case break
2232   11C6             _switch6_case4:
2233   11C6             ; print_unsigned(*(unsigned int*)p); 
2234   11C6                             
2235   11C6             ; --- START FUNCTION CALL
2236   11C6                             
2237   11C6 FA FF FF      lea d, [bp + -1] ; $p
2238   11C9 2A            mov b, [d]
2239   11CA 38 00 00      mov c, 0
2240   11CD 74            mov d, b
2241   11CE 2A            mov b, [d]
2242   11CF 38 00 00      mov c, 0
2243   11D2 FD AB         swp b
2244   11D4 D8            push b
2245   11D5 07 72 17      call print_unsigned
2246   11D8 51 02 00      add sp, 2
2247   11DB             ; --- END FUNCTION CALL
2248   11DB             ; p = p + 2; 
2249   11DB FA FF FF      lea d, [bp + -1] ; $p
2250   11DE DA            push d
2251   11DF                             
2252   11DF FA FF FF      lea d, [bp + -1] ; $p
2253   11E2 2A            mov b, [d]
2254   11E3 38 00 00      mov c, 0
2255   11E6             ; --- START TERMS
2256   11E6 D7            push a
2257   11E7 11            mov a, b
2258   11E8 FD 2E 02 00   mov32 cb, $00000002
2258   11EC 00 00 
2259   11EE 56            add b, a
2260   11EF E4            pop a
2261   11F0             ; --- END TERMS
2262   11F0 E7            pop d
2263   11F1 FD 43         mov [d], b
2264   11F3             ; break; 
2265   11F3 0A 8F 12      jmp _switch6_exit ; case break
2266   11F6             _switch6_case5:
2267   11F6             ; printx16(*(int*)p); 
2268   11F6                             
2269   11F6             ; --- START FUNCTION CALL
2270   11F6                             
2271   11F6 FA FF FF      lea d, [bp + -1] ; $p
2272   11F9 2A            mov b, [d]
2273   11FA 38 00 00      mov c, 0
2274   11FD 74            mov d, b
2275   11FE 2A            mov b, [d]
2276   11FF 38 00 00      mov c, 0
2277   1202 FD AB         swp b
2278   1204 D8            push b
2279   1205 07 8A 18      call printx16
2280   1208 51 02 00      add sp, 2
2281   120B             ; --- END FUNCTION CALL
2282   120B             ; p = p + 2; 
2283   120B FA FF FF      lea d, [bp + -1] ; $p
2284   120E DA            push d
2285   120F                             
2286   120F FA FF FF      lea d, [bp + -1] ; $p
2287   1212 2A            mov b, [d]
2288   1213 38 00 00      mov c, 0
2289   1216             ; --- START TERMS
2290   1216 D7            push a
2291   1217 11            mov a, b
2292   1218 FD 2E 02 00   mov32 cb, $00000002
2292   121C 00 00 
2293   121E 56            add b, a
2294   121F E4            pop a
2295   1220             ; --- END TERMS
2296   1220 E7            pop d
2297   1221 FD 43         mov [d], b
2298   1223             ; break; 
2299   1223 0A 8F 12      jmp _switch6_exit ; case break
2300   1226             _switch6_case6:
2301   1226             ; putchar(*(char*)p); 
2302   1226                             
2303   1226             ; --- START FUNCTION CALL
2304   1226                             
2305   1226 FA FF FF      lea d, [bp + -1] ; $p
2306   1229 2A            mov b, [d]
2307   122A 38 00 00      mov c, 0
2308   122D 74            mov d, b
2309   122E 32            mov bl, [d]
2310   122F A7 00         mov bh, 0
2311   1231 38 00 00      mov c, 0
2312   1234 DD            push bl
2313   1235 07 51 14      call putchar
2314   1238 51 01 00      add sp, 1
2315   123B             ; --- END FUNCTION CALL
2316   123B             ; p = p + 1; 
2317   123B FA FF FF      lea d, [bp + -1] ; $p
2318   123E DA            push d
2319   123F                             
2320   123F FA FF FF      lea d, [bp + -1] ; $p
2321   1242 2A            mov b, [d]
2322   1243 38 00 00      mov c, 0
2323   1246             ; --- START TERMS
2324   1246 D7            push a
2325   1247 11            mov a, b
2326   1248 FD 2E 01 00   mov32 cb, $00000001
2326   124C 00 00 
2327   124E 56            add b, a
2328   124F E4            pop a
2329   1250             ; --- END TERMS
2330   1250 E7            pop d
2331   1251 FD 43         mov [d], b
2332   1253             ; break; 
2333   1253 0A 8F 12      jmp _switch6_exit ; case break
2334   1256             _switch6_case7:
2335   1256             ; print(*(char**)p); 
2336   1256                             
2337   1256             ; --- START FUNCTION CALL
2338   1256                             
2339   1256 FA FF FF      lea d, [bp + -1] ; $p
2340   1259 2A            mov b, [d]
2341   125A 38 00 00      mov c, 0
2342   125D 74            mov d, b
2343   125E 2A            mov b, [d]
2344   125F FD AB         swp b
2345   1261 D8            push b
2346   1262 07 08 16      call print
2347   1265 51 02 00      add sp, 2
2348   1268             ; --- END FUNCTION CALL
2349   1268             ; p = p + 2; 
2350   1268 FA FF FF      lea d, [bp + -1] ; $p
2351   126B DA            push d
2352   126C                             
2353   126C FA FF FF      lea d, [bp + -1] ; $p
2354   126F 2A            mov b, [d]
2355   1270 38 00 00      mov c, 0
2356   1273             ; --- START TERMS
2357   1273 D7            push a
2358   1274 11            mov a, b
2359   1275 FD 2E 02 00   mov32 cb, $00000002
2359   1279 00 00 
2360   127B 56            add b, a
2361   127C E4            pop a
2362   127D             ; --- END TERMS
2363   127D E7            pop d
2364   127E FD 43         mov [d], b
2365   1280             ; break; 
2366   1280 0A 8F 12      jmp _switch6_exit ; case break
2367   1283             _switch6_default:
2368   1283             ; print("Error: Unknown argument type.\n"); 
2369   1283                             
2370   1283             ; --- START FUNCTION CALL
2371   1283                             
2372   1283 26 1B 19      mov b, _s2 ; "Error: Unknown argument type.\n"
2373   1286 FD AB         swp b
2374   1288 D8            push b
2375   1289 07 08 16      call print
2376   128C 51 02 00      add sp, 2
2377   128F             ; --- END FUNCTION CALL
2378   128F             _switch6_exit:
2379   128F             ; format_p++; 
2380   128F                             
2381   128F FA FD FF      lea d, [bp + -3] ; $format_p
2382   1292 2A            mov b, [d]
2383   1293 38 00 00      mov c, 0
2384   1296 FD 77         inc b
2385   1298 FA FD FF      lea d, [bp + -3] ; $format_p
2386   129B FD 43         mov [d], b
2387   129D FD 7D         dec b
2388   129F 0A C7 12      jmp _if5_exit
2389   12A2             _if5_else:
2390   12A2             ; putchar(*format_p); 
2391   12A2                             
2392   12A2             ; --- START FUNCTION CALL
2393   12A2                             
2394   12A2 FA FD FF      lea d, [bp + -3] ; $format_p
2395   12A5 2A            mov b, [d]
2396   12A6 38 00 00      mov c, 0
2397   12A9 74            mov d, b
2398   12AA 32            mov bl, [d]
2399   12AB A7 00         mov bh, 0
2400   12AD 38 00 00      mov c, 0
2401   12B0 DD            push bl
2402   12B1 07 51 14      call putchar
2403   12B4 51 01 00      add sp, 1
2404   12B7             ; --- END FUNCTION CALL
2405   12B7             ; format_p++; 
2406   12B7                             
2407   12B7 FA FD FF      lea d, [bp + -3] ; $format_p
2408   12BA 2A            mov b, [d]
2409   12BB 38 00 00      mov c, 0
2410   12BE FD 77         inc b
2411   12C0 FA FD FF      lea d, [bp + -3] ; $format_p
2412   12C3 FD 43         mov [d], b
2413   12C5 FD 7D         dec b
2414   12C7             _if5_exit:
2415   12C7             _if4_exit:
2416   12C7             _for3_update:
2417   12C7 0A FB 0F      jmp _for3_cond
2418   12CA             _for3_exit:
2419   12CA F9            leave
2420   12CB 09            ret
2421   12CC             
2422   12CC             print_signed_long:
2423   12CC F8 00 00      enter 0 ; (push bp; mov bp, sp)
2424   12CF             ; char digits[10]; 
2425   12CF 52 0A 00      sub sp, 10
2426   12D2             ; int i = 0; 
2427   12D2 52 02 00      sub sp, 2
2428   12D5             ; --- START LOCAL VAR INITIALIZATION
2429   12D5 FA F5 FF      lea d, [bp + -11] ; $i
2430   12D8 DA            push d
2431   12D9                             
2432   12D9 FD 2E 00 00   mov32 cb, $00000000
2432   12DD 00 00 
2433   12DF E7            pop d
2434   12E0 FD 43         mov [d], b
2435   12E2             ; --- END LOCAL VAR INITIALIZATION
2436   12E2             ; if (num < 0) { 
2437   12E2             _if10_cond:
2438   12E2                             
2439   12E2 FA 05 00      lea d, [bp + 5] ; $num
2440   12E5 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2441   12E8 FD 39         mov c, b ; And place it into C
2442   12EA 2A            mov b, [d] ; Lower Word in B
2443   12EB             ; --- START RELATIONAL
2444   12EB D7            push a
2445   12EC FD D8         push g
2446   12EE 11            mov a, b
2447   12EF FD 7A         mov g, c
2448   12F1 FD 2E 00 00   mov32 cb, $00000000
2448   12F5 00 00 
2449   12F7 FD AF         cmp32 ga, cb
2450   12F9 FD 73         slt ; <
2451   12FB FD F1         pop g
2452   12FD E4            pop a
2453   12FE             ; --- END RELATIONAL
2454   12FE C0 00 00      cmp b, 0
2455   1301 C6 33 13      je _if10_else
2456   1304             _if10_TRUE:
2457   1304             ; putchar('-'); 
2458   1304                             
2459   1304             ; --- START FUNCTION CALL
2460   1304                             
2461   1304 FD 2E 2D 00   mov32 cb, $0000002d
2461   1308 00 00 
2462   130A DD            push bl
2463   130B 07 51 14      call putchar
2464   130E 51 01 00      add sp, 1
2465   1311             ; --- END FUNCTION CALL
2466   1311             ; num = -num; 
2467   1311 FA 05 00      lea d, [bp + 5] ; $num
2468   1314 DA            push d
2469   1315                             
2470   1315 FA 05 00      lea d, [bp + 5] ; $num
2471   1318 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2472   131B FD 39         mov c, b ; And place it into C
2473   131D 2A            mov b, [d] ; Lower Word in B
2474   131E 12            mov a, c
2475   131F 95            not a
2476   1320 97            not b
2477   1321 55 01 00      add b, 1
2478   1324 5B 00 00      adc a, 0
2479   1327 39            mov c, a
2480   1328 E7            pop d
2481   1329 FD 43         mov [d], b
2482   132B 28            mov b, c
2483   132C FD 44 02 00   mov [d + 2], b
2484   1330 0A 67 13      jmp _if10_exit
2485   1333             _if10_else:
2486   1333             ; if (num == 0) { 
2487   1333             _if11_cond:
2488   1333                             
2489   1333 FA 05 00      lea d, [bp + 5] ; $num
2490   1336 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2491   1339 FD 39         mov c, b ; And place it into C
2492   133B 2A            mov b, [d] ; Lower Word in B
2493   133C             ; --- START RELATIONAL
2494   133C D7            push a
2495   133D FD D8         push g
2496   133F 11            mov a, b
2497   1340 FD 7A         mov g, c
2498   1342 FD 2E 00 00   mov32 cb, $00000000
2498   1346 00 00 
2499   1348 FD AF         cmp32 ga, cb
2500   134A FD 71         seq ; ==
2501   134C FD F1         pop g
2502   134E E4            pop a
2503   134F             ; --- END RELATIONAL
2504   134F C0 00 00      cmp b, 0
2505   1352 C6 67 13      je _if11_exit
2506   1355             _if11_TRUE:
2507   1355             ; putchar('0'); 
2508   1355                             
2509   1355             ; --- START FUNCTION CALL
2510   1355                             
2511   1355 FD 2E 30 00   mov32 cb, $00000030
2511   1359 00 00 
2512   135B DD            push bl
2513   135C 07 51 14      call putchar
2514   135F 51 01 00      add sp, 1
2515   1362             ; --- END FUNCTION CALL
2516   1362             ; return; 
2517   1362 F9            leave
2518   1363 09            ret
2519   1364 0A 67 13      jmp _if11_exit
2520   1367             _if11_exit:
2521   1367             _if10_exit:
2522   1367             ; while (num > 0) { 
2523   1367             _while12_cond:
2524   1367                             
2525   1367 FA 05 00      lea d, [bp + 5] ; $num
2526   136A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2527   136D FD 39         mov c, b ; And place it into C
2528   136F 2A            mov b, [d] ; Lower Word in B
2529   1370             ; --- START RELATIONAL
2530   1370 D7            push a
2531   1371 FD D8         push g
2532   1373 11            mov a, b
2533   1374 FD 7A         mov g, c
2534   1376 FD 2E 00 00   mov32 cb, $00000000
2534   137A 00 00 
2535   137C FD AF         cmp32 ga, cb
2536   137E FD 7F         sgt
2537   1380 FD F1         pop g
2538   1382 E4            pop a
2539   1383             ; --- END RELATIONAL
2540   1383 C0 00 00      cmp b, 0
2541   1386 C6 07 14      je _while12_exit
2542   1389             _while12_block:
2543   1389             ; digits[i] = '0' + (num % 10); 
2544   1389 FA F7 FF      lea d, [bp + -9] ; $digits
2545   138C D7            push a
2546   138D DA            push d
2547   138E                             
2548   138E FA F5 FF      lea d, [bp + -11] ; $i
2549   1391 2A            mov b, [d]
2550   1392 38 00 00      mov c, 0
2551   1395 E7            pop d
2552   1396 5A            add d, b
2553   1397 E4            pop a
2554   1398 DA            push d
2555   1399                             
2556   1399 FD 2E 30 00   mov32 cb, $00000030
2556   139D 00 00 
2557   139F             ; --- START TERMS
2558   139F D7            push a
2559   13A0 11            mov a, b
2560   13A1                             
2561   13A1 FA 05 00      lea d, [bp + 5] ; $num
2562   13A4 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2563   13A7 FD 39         mov c, b ; And place it into C
2564   13A9 2A            mov b, [d] ; Lower Word in B
2565   13AA             ; --- START FACTORS
2566   13AA D7            push a
2567   13AB FD D8         push g
2568   13AD 11            mov a, b
2569   13AE FD 7A         mov g, c
2570   13B0 FD 2E 0A 00   mov32 cb, $0000000a
2570   13B4 00 00 
2571   13B6 FD D8         push g ; save 'g' as the div instruction uses it
2572   13B8 AE            div a, b ; %, a: quotient, b: remainder
2573   13B9 11            mov a, b
2574   13BA FD F1         pop g
2575   13BC FD 38         mov c, g
2576   13BE 27            mov b, a
2577   13BF FD F1         pop g
2578   13C1 E4            pop a
2579   13C2             ; --- END FACTORS
2580   13C2 FD 15         add32 cb, ga
2581   13C4 E4            pop a
2582   13C5             ; --- END TERMS
2583   13C5 E7            pop d
2584   13C6 FD 3E         mov [d], bl
2585   13C8             ; num = num / 10; 
2586   13C8 FA 05 00      lea d, [bp + 5] ; $num
2587   13CB DA            push d
2588   13CC                             
2589   13CC FA 05 00      lea d, [bp + 5] ; $num
2590   13CF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2591   13D2 FD 39         mov c, b ; And place it into C
2592   13D4 2A            mov b, [d] ; Lower Word in B
2593   13D5             ; --- START FACTORS
2594   13D5 D7            push a
2595   13D6 FD D8         push g
2596   13D8 11            mov a, b
2597   13D9 FD 7A         mov g, c
2598   13DB FD 2E 0A 00   mov32 cb, $0000000a
2598   13DF 00 00 
2599   13E1 FD D8         push g ; save 'g' as the div instruction uses it
2600   13E3 AE            div a, b ; /, a: quotient, b: remainder
2601   13E4 FD F1         pop g
2602   13E6 FD 38         mov c, g
2603   13E8 27            mov b, a
2604   13E9 FD F1         pop g
2605   13EB E4            pop a
2606   13EC             ; --- END FACTORS
2607   13EC E7            pop d
2608   13ED FD 43         mov [d], b
2609   13EF 28            mov b, c
2610   13F0 FD 44 02 00   mov [d + 2], b
2611   13F4             ; i++; 
2612   13F4                             
2613   13F4 FA F5 FF      lea d, [bp + -11] ; $i
2614   13F7 2A            mov b, [d]
2615   13F8 38 00 00      mov c, 0
2616   13FB 11            mov a, b
2617   13FC FD 77         inc b
2618   13FE FA F5 FF      lea d, [bp + -11] ; $i
2619   1401 FD 43         mov [d], b
2620   1403 27            mov b, a
2621   1404 0A 67 13      jmp _while12_cond
2622   1407             _while12_exit:
2623   1407             ; while (i > 0) { 
2624   1407             _while15_cond:
2625   1407                             
2626   1407 FA F5 FF      lea d, [bp + -11] ; $i
2627   140A 2A            mov b, [d]
2628   140B 38 00 00      mov c, 0
2629   140E             ; --- START RELATIONAL
2630   140E D7            push a
2631   140F 11            mov a, b
2632   1410 FD 2E 00 00   mov32 cb, $00000000
2632   1414 00 00 
2633   1416 B0            cmp a, b
2634   1417 FD 7F         sgt ; >
2635   1419 E4            pop a
2636   141A             ; --- END RELATIONAL
2637   141A C0 00 00      cmp b, 0
2638   141D C6 4F 14      je _while15_exit
2639   1420             _while15_block:
2640   1420             ; i--; 
2641   1420                             
2642   1420 FA F5 FF      lea d, [bp + -11] ; $i
2643   1423 2A            mov b, [d]
2644   1424 38 00 00      mov c, 0
2645   1427 11            mov a, b
2646   1428 FD 7D         dec b
2647   142A FA F5 FF      lea d, [bp + -11] ; $i
2648   142D FD 43         mov [d], b
2649   142F 27            mov b, a
2650   1430             ; putchar(digits[i]); 
2651   1430                             
2652   1430             ; --- START FUNCTION CALL
2653   1430                             
2654   1430 FA F7 FF      lea d, [bp + -9] ; $digits
2655   1433 D7            push a
2656   1434 DA            push d
2657   1435                             
2658   1435 FA F5 FF      lea d, [bp + -11] ; $i
2659   1438 2A            mov b, [d]
2660   1439 38 00 00      mov c, 0
2661   143C E7            pop d
2662   143D 5A            add d, b
2663   143E E4            pop a
2664   143F 32            mov bl, [d]
2665   1440 A7 00         mov bh, 0
2666   1442 38 00 00      mov c, 0
2667   1445 DD            push bl
2668   1446 07 51 14      call putchar
2669   1449 51 01 00      add sp, 1
2670   144C             ; --- END FUNCTION CALL
2671   144C 0A 07 14      jmp _while15_cond
2672   144F             _while15_exit:
2673   144F F9            leave
2674   1450 09            ret
2675   1451             
2676   1451             putchar:
2677   1451 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2678   1454             ; --- BEGIN INLINE ASM SEGMENT
2679   1454 FA 05 00      lea d, [bp + 5] ; $c
2680   1457 1E            mov al, [d]
2681   1458 23            mov ah, al
2682   1459 19 00         mov al, 0
2683   145B 05 03         syscall sys_io      ; char in AH
2684   145D             ; --- END INLINE ASM SEGMENT
2685   145D F9            leave
2686   145E 09            ret
2687   145F             
2688   145F             print_unsigned_long:
2689   145F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2690   1462             ; char digits[10]; 
2691   1462 52 0A 00      sub sp, 10
2692   1465             ; int i; 
2693   1465 52 02 00      sub sp, 2
2694   1468             ; i = 0; 
2695   1468 FA F5 FF      lea d, [bp + -11] ; $i
2696   146B DA            push d
2697   146C                             
2698   146C FD 2E 00 00   mov32 cb, $00000000
2698   1470 00 00 
2699   1472 E7            pop d
2700   1473 FD 43         mov [d], b
2701   1475             ; if(num == 0){ 
2702   1475             _if16_cond:
2703   1475                             
2704   1475 FA 05 00      lea d, [bp + 5] ; $num
2705   1478 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2706   147B FD 39         mov c, b ; And place it into C
2707   147D 2A            mov b, [d] ; Lower Word in B
2708   147E             ; --- START RELATIONAL
2709   147E D7            push a
2710   147F FD D8         push g
2711   1481 11            mov a, b
2712   1482 FD 7A         mov g, c
2713   1484 FD 2E 00 00   mov32 cb, $00000000
2713   1488 00 00 
2714   148A FD AF         cmp32 ga, cb
2715   148C FD 71         seq ; ==
2716   148E FD F1         pop g
2717   1490 E4            pop a
2718   1491             ; --- END RELATIONAL
2719   1491 C0 00 00      cmp b, 0
2720   1494 C6 A9 14      je _if16_exit
2721   1497             _if16_TRUE:
2722   1497             ; putchar('0'); 
2723   1497                             
2724   1497             ; --- START FUNCTION CALL
2725   1497                             
2726   1497 FD 2E 30 00   mov32 cb, $00000030
2726   149B 00 00 
2727   149D DD            push bl
2728   149E 07 51 14      call putchar
2729   14A1 51 01 00      add sp, 1
2730   14A4             ; --- END FUNCTION CALL
2731   14A4             ; return; 
2732   14A4 F9            leave
2733   14A5 09            ret
2734   14A6 0A A9 14      jmp _if16_exit
2735   14A9             _if16_exit:
2736   14A9             ; while (num > 0) { 
2737   14A9             _while17_cond:
2738   14A9                             
2739   14A9 FA 05 00      lea d, [bp + 5] ; $num
2740   14AC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2741   14AF FD 39         mov c, b ; And place it into C
2742   14B1 2A            mov b, [d] ; Lower Word in B
2743   14B2             ; --- START RELATIONAL
2744   14B2 D7            push a
2745   14B3 FD D8         push g
2746   14B5 11            mov a, b
2747   14B6 FD 7A         mov g, c
2748   14B8 FD 2E 00 00   mov32 cb, $00000000
2748   14BC 00 00 
2749   14BE FD AF         cmp32 ga, cb
2750   14C0 FD 81         sgu
2751   14C2 FD F1         pop g
2752   14C4 E4            pop a
2753   14C5             ; --- END RELATIONAL
2754   14C5 C0 00 00      cmp b, 0
2755   14C8 C6 49 15      je _while17_exit
2756   14CB             _while17_block:
2757   14CB             ; digits[i] = '0' + (num % 10); 
2758   14CB FA F7 FF      lea d, [bp + -9] ; $digits
2759   14CE D7            push a
2760   14CF DA            push d
2761   14D0                             
2762   14D0 FA F5 FF      lea d, [bp + -11] ; $i
2763   14D3 2A            mov b, [d]
2764   14D4 38 00 00      mov c, 0
2765   14D7 E7            pop d
2766   14D8 5A            add d, b
2767   14D9 E4            pop a
2768   14DA DA            push d
2769   14DB                             
2770   14DB FD 2E 30 00   mov32 cb, $00000030
2770   14DF 00 00 
2771   14E1             ; --- START TERMS
2772   14E1 D7            push a
2773   14E2 11            mov a, b
2774   14E3                             
2775   14E3 FA 05 00      lea d, [bp + 5] ; $num
2776   14E6 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2777   14E9 FD 39         mov c, b ; And place it into C
2778   14EB 2A            mov b, [d] ; Lower Word in B
2779   14EC             ; --- START FACTORS
2780   14EC D7            push a
2781   14ED FD D8         push g
2782   14EF 11            mov a, b
2783   14F0 FD 7A         mov g, c
2784   14F2 FD 2E 0A 00   mov32 cb, $0000000a
2784   14F6 00 00 
2785   14F8 FD D8         push g ; save 'g' as the div instruction uses it
2786   14FA AE            div a, b ; %, a: quotient, b: remainder
2787   14FB 11            mov a, b
2788   14FC FD F1         pop g
2789   14FE FD 38         mov c, g
2790   1500 27            mov b, a
2791   1501 FD F1         pop g
2792   1503 E4            pop a
2793   1504             ; --- END FACTORS
2794   1504 FD 15         add32 cb, ga
2795   1506 E4            pop a
2796   1507             ; --- END TERMS
2797   1507 E7            pop d
2798   1508 FD 3E         mov [d], bl
2799   150A             ; num = num / 10; 
2800   150A FA 05 00      lea d, [bp + 5] ; $num
2801   150D DA            push d
2802   150E                             
2803   150E FA 05 00      lea d, [bp + 5] ; $num
2804   1511 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2805   1514 FD 39         mov c, b ; And place it into C
2806   1516 2A            mov b, [d] ; Lower Word in B
2807   1517             ; --- START FACTORS
2808   1517 D7            push a
2809   1518 FD D8         push g
2810   151A 11            mov a, b
2811   151B FD 7A         mov g, c
2812   151D FD 2E 0A 00   mov32 cb, $0000000a
2812   1521 00 00 
2813   1523 FD D8         push g ; save 'g' as the div instruction uses it
2814   1525 AE            div a, b ; /, a: quotient, b: remainder
2815   1526 FD F1         pop g
2816   1528 FD 38         mov c, g
2817   152A 27            mov b, a
2818   152B FD F1         pop g
2819   152D E4            pop a
2820   152E             ; --- END FACTORS
2821   152E E7            pop d
2822   152F FD 43         mov [d], b
2823   1531 28            mov b, c
2824   1532 FD 44 02 00   mov [d + 2], b
2825   1536             ; i++; 
2826   1536                             
2827   1536 FA F5 FF      lea d, [bp + -11] ; $i
2828   1539 2A            mov b, [d]
2829   153A 38 00 00      mov c, 0
2830   153D 11            mov a, b
2831   153E FD 77         inc b
2832   1540 FA F5 FF      lea d, [bp + -11] ; $i
2833   1543 FD 43         mov [d], b
2834   1545 27            mov b, a
2835   1546 0A A9 14      jmp _while17_cond
2836   1549             _while17_exit:
2837   1549             ; while (i > 0) { 
2838   1549             _while20_cond:
2839   1549                             
2840   1549 FA F5 FF      lea d, [bp + -11] ; $i
2841   154C 2A            mov b, [d]
2842   154D 38 00 00      mov c, 0
2843   1550             ; --- START RELATIONAL
2844   1550 D7            push a
2845   1551 11            mov a, b
2846   1552 FD 2E 00 00   mov32 cb, $00000000
2846   1556 00 00 
2847   1558 B0            cmp a, b
2848   1559 FD 7F         sgt ; >
2849   155B E4            pop a
2850   155C             ; --- END RELATIONAL
2851   155C C0 00 00      cmp b, 0
2852   155F C6 91 15      je _while20_exit
2853   1562             _while20_block:
2854   1562             ; i--; 
2855   1562                             
2856   1562 FA F5 FF      lea d, [bp + -11] ; $i
2857   1565 2A            mov b, [d]
2858   1566 38 00 00      mov c, 0
2859   1569 11            mov a, b
2860   156A FD 7D         dec b
2861   156C FA F5 FF      lea d, [bp + -11] ; $i
2862   156F FD 43         mov [d], b
2863   1571 27            mov b, a
2864   1572             ; putchar(digits[i]); 
2865   1572                             
2866   1572             ; --- START FUNCTION CALL
2867   1572                             
2868   1572 FA F7 FF      lea d, [bp + -9] ; $digits
2869   1575 D7            push a
2870   1576 DA            push d
2871   1577                             
2872   1577 FA F5 FF      lea d, [bp + -11] ; $i
2873   157A 2A            mov b, [d]
2874   157B 38 00 00      mov c, 0
2875   157E E7            pop d
2876   157F 5A            add d, b
2877   1580 E4            pop a
2878   1581 32            mov bl, [d]
2879   1582 A7 00         mov bh, 0
2880   1584 38 00 00      mov c, 0
2881   1587 DD            push bl
2882   1588 07 51 14      call putchar
2883   158B 51 01 00      add sp, 1
2884   158E             ; --- END FUNCTION CALL
2885   158E 0A 49 15      jmp _while20_cond
2886   1591             _while20_exit:
2887   1591 F9            leave
2888   1592 09            ret
2889   1593             
2890   1593             printx32:
2891   1593 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2892   1596             ; --- BEGIN INLINE ASM SEGMENT
2893   1596 FA 05 00      lea d, [bp + 5] ; $hex
2894   1599 2B 02 00      mov b, [d+2]
2895   159C 07 A5 15      call print_u16x_printx32
2896   159F 2A            mov b, [d]
2897   15A0 07 A5 15      call print_u16x_printx32
2898   15A3             ; --- END INLINE ASM SEGMENT
2899   15A3             ; return; 
2900   15A3 F9            leave
2901   15A4 09            ret
2902   15A5             ; --- BEGIN INLINE ASM SEGMENT
2903   15A5             print_u16x_printx32:
2904   15A5 D7            push a
2905   15A6 D8            push b
2906   15A7 DD            push bl
2907   15A8 30            mov bl, bh
2908   15A9 07 C7 15      call _itoa_printx32        ; convert bh to char in A
2909   15AC 2F            mov bl, al        ; save al
2910   15AD 19 00         mov al, 0
2911   15AF 05 03         syscall sys_io        ; display AH
2912   15B1 24            mov ah, bl        ; retrieve al
2913   15B2 19 00         mov al, 0
2914   15B4 05 03         syscall sys_io        ; display AL
2915   15B6 EA            pop bl
2916   15B7 07 C7 15      call _itoa_printx32        ; convert bh to char in A
2917   15BA 2F            mov bl, al        ; save al
2918   15BB 19 00         mov al, 0
2919   15BD 05 03         syscall sys_io        ; display AH
2920   15BF 24            mov ah, bl        ; retrieve al
2921   15C0 19 00         mov al, 0
2922   15C2 05 03         syscall sys_io        ; display AL
2923   15C4 E5            pop b
2924   15C5 E4            pop a
2925   15C6 09            ret
2926   15C7             _itoa_printx32:
2927   15C7 DA            push d
2928   15C8 D8            push b
2929   15C9 A7 00         mov bh, 0
2930   15CB FD A4 04      shr bl, 4  
2931   15CE 74            mov d, b
2932   15CF 1F E1 15      mov al, [d + s_hex_digits_printx32]
2933   15D2 23            mov ah, al
2934   15D3 E5            pop b
2935   15D4 D8            push b
2936   15D5 A7 00         mov bh, 0
2937   15D7 FD 87 0F      and bl, $0F
2938   15DA 74            mov d, b
2939   15DB 1F E1 15      mov al, [d + s_hex_digits_printx32]
2940   15DE E5            pop b
2941   15DF E7            pop d
2942   15E0 09            ret
2943   15E1 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
2943   15E5 34 35 36 37 
2943   15E9 38 39 41 42 
2943   15ED 43 44 45 46 
2944   15F1             ; --- END INLINE ASM SEGMENT
2945   15F1 F9            leave
2946   15F2 09            ret
2947   15F3             
2948   15F3             err:
2949   15F3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2950   15F6             ; print(e); 
2951   15F6                             
2952   15F6             ; --- START FUNCTION CALL
2953   15F6                             
2954   15F6 FA 05 00      lea d, [bp + 5] ; $e
2955   15F9 2A            mov b, [d]
2956   15FA 38 00 00      mov c, 0
2957   15FD FD AB         swp b
2958   15FF D8            push b
2959   1600 07 08 16      call print
2960   1603 51 02 00      add sp, 2
2961   1606             ; --- END FUNCTION CALL
2962   1606 F9            leave
2963   1607 09            ret
2964   1608             
2965   1608             print:
2966   1608 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2967   160B             ; --- BEGIN INLINE ASM SEGMENT
2968   160B FA 05 00      lea d, [bp + 5] ; $s
2969   160E FD 2A         mov d, [d]
2970   1610             _puts_L1_print:
2971   1610 1E            mov al, [d]
2972   1611 B9 00         cmp al, 0
2973   1613 C6 1F 16      jz _puts_END_print
2974   1616 23            mov ah, al
2975   1617 19 00         mov al, 0
2976   1619 05 03         syscall sys_io
2977   161B 79            inc d
2978   161C 0A 10 16      jmp _puts_L1_print
2979   161F             _puts_END_print:
2980   161F             ; --- END INLINE ASM SEGMENT
2981   161F F9            leave
2982   1620 09            ret
2983   1621             
2984   1621             print_signed:
2985   1621 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2986   1624             ; char digits[5]; 
2987   1624 52 05 00      sub sp, 5
2988   1627             ; int i = 0; 
2989   1627 52 02 00      sub sp, 2
2990   162A             ; --- START LOCAL VAR INITIALIZATION
2991   162A FA FA FF      lea d, [bp + -6] ; $i
2992   162D DA            push d
2993   162E                             
2994   162E FD 2E 00 00   mov32 cb, $00000000
2994   1632 00 00 
2995   1634 E7            pop d
2996   1635 FD 43         mov [d], b
2997   1637             ; --- END LOCAL VAR INITIALIZATION
2998   1637             ; if (num < 0) { 
2999   1637             _if21_cond:
3000   1637                             
3001   1637 FA 05 00      lea d, [bp + 5] ; $num
3002   163A 2A            mov b, [d]
3003   163B 38 00 00      mov c, 0
3004   163E             ; --- START RELATIONAL
3005   163E D7            push a
3006   163F 11            mov a, b
3007   1640 FD 2E 00 00   mov32 cb, $00000000
3007   1644 00 00 
3008   1646 B0            cmp a, b
3009   1647 FD 73         slt ; < (signed)
3010   1649 E4            pop a
3011   164A             ; --- END RELATIONAL
3012   164A C0 00 00      cmp b, 0
3013   164D C6 70 16      je _if21_else
3014   1650             _if21_TRUE:
3015   1650             ; putchar('-'); 
3016   1650                             
3017   1650             ; --- START FUNCTION CALL
3018   1650                             
3019   1650 FD 2E 2D 00   mov32 cb, $0000002d
3019   1654 00 00 
3020   1656 DD            push bl
3021   1657 07 51 14      call putchar
3022   165A 51 01 00      add sp, 1
3023   165D             ; --- END FUNCTION CALL
3024   165D             ; num = -num; 
3025   165D FA 05 00      lea d, [bp + 5] ; $num
3026   1660 DA            push d
3027   1661                             
3028   1661 FA 05 00      lea d, [bp + 5] ; $num
3029   1664 2A            mov b, [d]
3030   1665 38 00 00      mov c, 0
3031   1668 FD 97         neg b
3032   166A E7            pop d
3033   166B FD 43         mov [d], b
3034   166D 0A 9B 16      jmp _if21_exit
3035   1670             _if21_else:
3036   1670             ; if (num == 0) { 
3037   1670             _if22_cond:
3038   1670                             
3039   1670 FA 05 00      lea d, [bp + 5] ; $num
3040   1673 2A            mov b, [d]
3041   1674 38 00 00      mov c, 0
3042   1677             ; --- START RELATIONAL
3043   1677 D7            push a
3044   1678 11            mov a, b
3045   1679 FD 2E 00 00   mov32 cb, $00000000
3045   167D 00 00 
3046   167F B0            cmp a, b
3047   1680 FD 71         seq ; ==
3048   1682 E4            pop a
3049   1683             ; --- END RELATIONAL
3050   1683 C0 00 00      cmp b, 0
3051   1686 C6 9B 16      je _if22_exit
3052   1689             _if22_TRUE:
3053   1689             ; putchar('0'); 
3054   1689                             
3055   1689             ; --- START FUNCTION CALL
3056   1689                             
3057   1689 FD 2E 30 00   mov32 cb, $00000030
3057   168D 00 00 
3058   168F DD            push bl
3059   1690 07 51 14      call putchar
3060   1693 51 01 00      add sp, 1
3061   1696             ; --- END FUNCTION CALL
3062   1696             ; return; 
3063   1696 F9            leave
3064   1697 09            ret
3065   1698 0A 9B 16      jmp _if22_exit
3066   169B             _if22_exit:
3067   169B             _if21_exit:
3068   169B             ; while (num > 0) { 
3069   169B             _while23_cond:
3070   169B                             
3071   169B FA 05 00      lea d, [bp + 5] ; $num
3072   169E 2A            mov b, [d]
3073   169F 38 00 00      mov c, 0
3074   16A2             ; --- START RELATIONAL
3075   16A2 D7            push a
3076   16A3 11            mov a, b
3077   16A4 FD 2E 00 00   mov32 cb, $00000000
3077   16A8 00 00 
3078   16AA B0            cmp a, b
3079   16AB FD 7F         sgt ; >
3080   16AD E4            pop a
3081   16AE             ; --- END RELATIONAL
3082   16AE C0 00 00      cmp b, 0
3083   16B1 C6 28 17      je _while23_exit
3084   16B4             _while23_block:
3085   16B4             ; digits[i] = '0' + (num % 10); 
3086   16B4 FA FC FF      lea d, [bp + -4] ; $digits
3087   16B7 D7            push a
3088   16B8 DA            push d
3089   16B9                             
3090   16B9 FA FA FF      lea d, [bp + -6] ; $i
3091   16BC 2A            mov b, [d]
3092   16BD 38 00 00      mov c, 0
3093   16C0 E7            pop d
3094   16C1 5A            add d, b
3095   16C2 E4            pop a
3096   16C3 DA            push d
3097   16C4                             
3098   16C4 FD 2E 30 00   mov32 cb, $00000030
3098   16C8 00 00 
3099   16CA             ; --- START TERMS
3100   16CA D7            push a
3101   16CB 11            mov a, b
3102   16CC                             
3103   16CC FA 05 00      lea d, [bp + 5] ; $num
3104   16CF 2A            mov b, [d]
3105   16D0 38 00 00      mov c, 0
3106   16D3             ; --- START FACTORS
3107   16D3 D7            push a
3108   16D4 FD D8         push g
3109   16D6 11            mov a, b
3110   16D7 FD 7A         mov g, c
3111   16D9 FD 2E 0A 00   mov32 cb, $0000000a
3111   16DD 00 00 
3112   16DF FD D8         push g ; save 'g' as the div instruction uses it
3113   16E1 AE            div a, b ; %, a: quotient, b: remainder
3114   16E2 11            mov a, b
3115   16E3 FD F1         pop g
3116   16E5 FD 38         mov c, g
3117   16E7 27            mov b, a
3118   16E8 FD F1         pop g
3119   16EA E4            pop a
3120   16EB             ; --- END FACTORS
3121   16EB 56            add b, a
3122   16EC E4            pop a
3123   16ED             ; --- END TERMS
3124   16ED E7            pop d
3125   16EE FD 3E         mov [d], bl
3126   16F0             ; num = num / 10; 
3127   16F0 FA 05 00      lea d, [bp + 5] ; $num
3128   16F3 DA            push d
3129   16F4                             
3130   16F4 FA 05 00      lea d, [bp + 5] ; $num
3131   16F7 2A            mov b, [d]
3132   16F8 38 00 00      mov c, 0
3133   16FB             ; --- START FACTORS
3134   16FB D7            push a
3135   16FC FD D8         push g
3136   16FE 11            mov a, b
3137   16FF FD 7A         mov g, c
3138   1701 FD 2E 0A 00   mov32 cb, $0000000a
3138   1705 00 00 
3139   1707 FD D8         push g ; save 'g' as the div instruction uses it
3140   1709 AE            div a, b ; /, a: quotient, b: remainder
3141   170A FD F1         pop g
3142   170C FD 38         mov c, g
3143   170E 27            mov b, a
3144   170F FD F1         pop g
3145   1711 E4            pop a
3146   1712             ; --- END FACTORS
3147   1712 E7            pop d
3148   1713 FD 43         mov [d], b
3149   1715             ; i++; 
3150   1715                             
3151   1715 FA FA FF      lea d, [bp + -6] ; $i
3152   1718 2A            mov b, [d]
3153   1719 38 00 00      mov c, 0
3154   171C 11            mov a, b
3155   171D FD 77         inc b
3156   171F FA FA FF      lea d, [bp + -6] ; $i
3157   1722 FD 43         mov [d], b
3158   1724 27            mov b, a
3159   1725 0A 9B 16      jmp _while23_cond
3160   1728             _while23_exit:
3161   1728             ; while (i > 0) { 
3162   1728             _while26_cond:
3163   1728                             
3164   1728 FA FA FF      lea d, [bp + -6] ; $i
3165   172B 2A            mov b, [d]
3166   172C 38 00 00      mov c, 0
3167   172F             ; --- START RELATIONAL
3168   172F D7            push a
3169   1730 11            mov a, b
3170   1731 FD 2E 00 00   mov32 cb, $00000000
3170   1735 00 00 
3171   1737 B0            cmp a, b
3172   1738 FD 7F         sgt ; >
3173   173A E4            pop a
3174   173B             ; --- END RELATIONAL
3175   173B C0 00 00      cmp b, 0
3176   173E C6 70 17      je _while26_exit
3177   1741             _while26_block:
3178   1741             ; i--; 
3179   1741                             
3180   1741 FA FA FF      lea d, [bp + -6] ; $i
3181   1744 2A            mov b, [d]
3182   1745 38 00 00      mov c, 0
3183   1748 11            mov a, b
3184   1749 FD 7D         dec b
3185   174B FA FA FF      lea d, [bp + -6] ; $i
3186   174E FD 43         mov [d], b
3187   1750 27            mov b, a
3188   1751             ; putchar(digits[i]); 
3189   1751                             
3190   1751             ; --- START FUNCTION CALL
3191   1751                             
3192   1751 FA FC FF      lea d, [bp + -4] ; $digits
3193   1754 D7            push a
3194   1755 DA            push d
3195   1756                             
3196   1756 FA FA FF      lea d, [bp + -6] ; $i
3197   1759 2A            mov b, [d]
3198   175A 38 00 00      mov c, 0
3199   175D E7            pop d
3200   175E 5A            add d, b
3201   175F E4            pop a
3202   1760 32            mov bl, [d]
3203   1761 A7 00         mov bh, 0
3204   1763 38 00 00      mov c, 0
3205   1766 DD            push bl
3206   1767 07 51 14      call putchar
3207   176A 51 01 00      add sp, 1
3208   176D             ; --- END FUNCTION CALL
3209   176D 0A 28 17      jmp _while26_cond
3210   1770             _while26_exit:
3211   1770 F9            leave
3212   1771 09            ret
3213   1772             
3214   1772             print_unsigned:
3215   1772 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3216   1775             ; char digits[5]; 
3217   1775 52 05 00      sub sp, 5
3218   1778             ; int i; 
3219   1778 52 02 00      sub sp, 2
3220   177B             ; i = 0; 
3221   177B FA FA FF      lea d, [bp + -6] ; $i
3222   177E DA            push d
3223   177F                             
3224   177F FD 2E 00 00   mov32 cb, $00000000
3224   1783 00 00 
3225   1785 E7            pop d
3226   1786 FD 43         mov [d], b
3227   1788             ; if(num == 0){ 
3228   1788             _if27_cond:
3229   1788                             
3230   1788 FA 05 00      lea d, [bp + 5] ; $num
3231   178B 2A            mov b, [d]
3232   178C 38 00 00      mov c, 0
3233   178F             ; --- START RELATIONAL
3234   178F D7            push a
3235   1790 11            mov a, b
3236   1791 FD 2E 00 00   mov32 cb, $00000000
3236   1795 00 00 
3237   1797 B0            cmp a, b
3238   1798 FD 71         seq ; ==
3239   179A E4            pop a
3240   179B             ; --- END RELATIONAL
3241   179B C0 00 00      cmp b, 0
3242   179E C6 B3 17      je _if27_exit
3243   17A1             _if27_TRUE:
3244   17A1             ; putchar('0'); 
3245   17A1                             
3246   17A1             ; --- START FUNCTION CALL
3247   17A1                             
3248   17A1 FD 2E 30 00   mov32 cb, $00000030
3248   17A5 00 00 
3249   17A7 DD            push bl
3250   17A8 07 51 14      call putchar
3251   17AB 51 01 00      add sp, 1
3252   17AE             ; --- END FUNCTION CALL
3253   17AE             ; return; 
3254   17AE F9            leave
3255   17AF 09            ret
3256   17B0 0A B3 17      jmp _if27_exit
3257   17B3             _if27_exit:
3258   17B3             ; while (num > 0) { 
3259   17B3             _while28_cond:
3260   17B3                             
3261   17B3 FA 05 00      lea d, [bp + 5] ; $num
3262   17B6 2A            mov b, [d]
3263   17B7 38 00 00      mov c, 0
3264   17BA             ; --- START RELATIONAL
3265   17BA D7            push a
3266   17BB 11            mov a, b
3267   17BC FD 2E 00 00   mov32 cb, $00000000
3267   17C0 00 00 
3268   17C2 B0            cmp a, b
3269   17C3 FD 81         sgu ; > (unsigned)
3270   17C5 E4            pop a
3271   17C6             ; --- END RELATIONAL
3272   17C6 C0 00 00      cmp b, 0
3273   17C9 C6 40 18      je _while28_exit
3274   17CC             _while28_block:
3275   17CC             ; digits[i] = '0' + (num % 10); 
3276   17CC FA FC FF      lea d, [bp + -4] ; $digits
3277   17CF D7            push a
3278   17D0 DA            push d
3279   17D1                             
3280   17D1 FA FA FF      lea d, [bp + -6] ; $i
3281   17D4 2A            mov b, [d]
3282   17D5 38 00 00      mov c, 0
3283   17D8 E7            pop d
3284   17D9 5A            add d, b
3285   17DA E4            pop a
3286   17DB DA            push d
3287   17DC                             
3288   17DC FD 2E 30 00   mov32 cb, $00000030
3288   17E0 00 00 
3289   17E2             ; --- START TERMS
3290   17E2 D7            push a
3291   17E3 11            mov a, b
3292   17E4                             
3293   17E4 FA 05 00      lea d, [bp + 5] ; $num
3294   17E7 2A            mov b, [d]
3295   17E8 38 00 00      mov c, 0
3296   17EB             ; --- START FACTORS
3297   17EB D7            push a
3298   17EC FD D8         push g
3299   17EE 11            mov a, b
3300   17EF FD 7A         mov g, c
3301   17F1 FD 2E 0A 00   mov32 cb, $0000000a
3301   17F5 00 00 
3302   17F7 FD D8         push g ; save 'g' as the div instruction uses it
3303   17F9 AE            div a, b ; %, a: quotient, b: remainder
3304   17FA 11            mov a, b
3305   17FB FD F1         pop g
3306   17FD FD 38         mov c, g
3307   17FF 27            mov b, a
3308   1800 FD F1         pop g
3309   1802 E4            pop a
3310   1803             ; --- END FACTORS
3311   1803 56            add b, a
3312   1804 E4            pop a
3313   1805             ; --- END TERMS
3314   1805 E7            pop d
3315   1806 FD 3E         mov [d], bl
3316   1808             ; num = num / 10; 
3317   1808 FA 05 00      lea d, [bp + 5] ; $num
3318   180B DA            push d
3319   180C                             
3320   180C FA 05 00      lea d, [bp + 5] ; $num
3321   180F 2A            mov b, [d]
3322   1810 38 00 00      mov c, 0
3323   1813             ; --- START FACTORS
3324   1813 D7            push a
3325   1814 FD D8         push g
3326   1816 11            mov a, b
3327   1817 FD 7A         mov g, c
3328   1819 FD 2E 0A 00   mov32 cb, $0000000a
3328   181D 00 00 
3329   181F FD D8         push g ; save 'g' as the div instruction uses it
3330   1821 AE            div a, b ; /, a: quotient, b: remainder
3331   1822 FD F1         pop g
3332   1824 FD 38         mov c, g
3333   1826 27            mov b, a
3334   1827 FD F1         pop g
3335   1829 E4            pop a
3336   182A             ; --- END FACTORS
3337   182A E7            pop d
3338   182B FD 43         mov [d], b
3339   182D             ; i++; 
3340   182D                             
3341   182D FA FA FF      lea d, [bp + -6] ; $i
3342   1830 2A            mov b, [d]
3343   1831 38 00 00      mov c, 0
3344   1834 11            mov a, b
3345   1835 FD 77         inc b
3346   1837 FA FA FF      lea d, [bp + -6] ; $i
3347   183A FD 43         mov [d], b
3348   183C 27            mov b, a
3349   183D 0A B3 17      jmp _while28_cond
3350   1840             _while28_exit:
3351   1840             ; while (i > 0) { 
3352   1840             _while31_cond:
3353   1840                             
3354   1840 FA FA FF      lea d, [bp + -6] ; $i
3355   1843 2A            mov b, [d]
3356   1844 38 00 00      mov c, 0
3357   1847             ; --- START RELATIONAL
3358   1847 D7            push a
3359   1848 11            mov a, b
3360   1849 FD 2E 00 00   mov32 cb, $00000000
3360   184D 00 00 
3361   184F B0            cmp a, b
3362   1850 FD 7F         sgt ; >
3363   1852 E4            pop a
3364   1853             ; --- END RELATIONAL
3365   1853 C0 00 00      cmp b, 0
3366   1856 C6 88 18      je _while31_exit
3367   1859             _while31_block:
3368   1859             ; i--; 
3369   1859                             
3370   1859 FA FA FF      lea d, [bp + -6] ; $i
3371   185C 2A            mov b, [d]
3372   185D 38 00 00      mov c, 0
3373   1860 11            mov a, b
3374   1861 FD 7D         dec b
3375   1863 FA FA FF      lea d, [bp + -6] ; $i
3376   1866 FD 43         mov [d], b
3377   1868 27            mov b, a
3378   1869             ; putchar(digits[i]); 
3379   1869                             
3380   1869             ; --- START FUNCTION CALL
3381   1869                             
3382   1869 FA FC FF      lea d, [bp + -4] ; $digits
3383   186C D7            push a
3384   186D DA            push d
3385   186E                             
3386   186E FA FA FF      lea d, [bp + -6] ; $i
3387   1871 2A            mov b, [d]
3388   1872 38 00 00      mov c, 0
3389   1875 E7            pop d
3390   1876 5A            add d, b
3391   1877 E4            pop a
3392   1878 32            mov bl, [d]
3393   1879 A7 00         mov bh, 0
3394   187B 38 00 00      mov c, 0
3395   187E DD            push bl
3396   187F 07 51 14      call putchar
3397   1882 51 01 00      add sp, 1
3398   1885             ; --- END FUNCTION CALL
3399   1885 0A 40 18      jmp _while31_cond
3400   1888             _while31_exit:
3401   1888 F9            leave
3402   1889 09            ret
3403   188A             
3404   188A             printx16:
3405   188A F8 00 00      enter 0 ; (push bp; mov bp, sp)
3406   188D             ; --- BEGIN INLINE ASM SEGMENT
3407   188D FA 05 00      lea d, [bp + 5] ; $hex
3408   1890 2A            mov b, [d]
3409   1891             print_u16x_printx16:
3410   1891 DD            push bl
3411   1892 30            mov bl, bh
3412   1893 07 B0 18      call _itoa_printx16        ; convert bh to char in A
3413   1896 2F            mov bl, al        ; save al
3414   1897 19 00         mov al, 0
3415   1899 05 03         syscall sys_io        ; display AH
3416   189B 24            mov ah, bl        ; retrieve al
3417   189C 19 00         mov al, 0
3418   189E 05 03         syscall sys_io        ; display AL
3419   18A0 EA            pop bl
3420   18A1 07 B0 18      call _itoa_printx16        ; convert bh to char in A
3421   18A4 2F            mov bl, al        ; save al
3422   18A5 19 00         mov al, 0
3423   18A7 05 03         syscall sys_io        ; display AH
3424   18A9 24            mov ah, bl        ; retrieve al
3425   18AA 19 00         mov al, 0
3426   18AC 05 03         syscall sys_io        ; display AL
3427   18AE             ; --- END INLINE ASM SEGMENT
3428   18AE             ; return; 
3429   18AE F9            leave
3430   18AF 09            ret
3431   18B0             ; --- BEGIN INLINE ASM SEGMENT
3432   18B0             _itoa_printx16:
3433   18B0 DA            push d
3434   18B1 D8            push b
3435   18B2 A7 00         mov bh, 0
3436   18B4 FD A4 04      shr bl, 4  
3437   18B7 74            mov d, b
3438   18B8 1F CA 18      mov al, [d + s_hex_digits_printx16]
3439   18BB 23            mov ah, al
3440   18BC E5            pop b
3441   18BD D8            push b
3442   18BE A7 00         mov bh, 0
3443   18C0 FD 87 0F      and bl, $0F
3444   18C3 74            mov d, b
3445   18C4 1F CA 18      mov al, [d + s_hex_digits_printx16]
3446   18C7 E5            pop b
3447   18C8 E7            pop d
3448   18C9 09            ret
3449   18CA 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
3449   18CE 34 35 36 37 
3449   18D2 38 39 41 42 
3449   18D6 43 44 45 46 
3450   18DA             ; --- END INLINE ASM SEGMENT
3451   18DA F9            leave
3452   18DB 09            ret
3453   18DC             ; --- END TEXT SEGMENT
3454   18DC             
3455   18DC             ; --- BEGIN DATA SEGMENT
3456   18DC 00 00 00 00 _st1_data: .fill 13, 0
3456   18E0 00 00 00 00 
3456   18E4 00 00 00 00 
3456   18E8 00 
3457   18E9 54 65 73 74 _s0: .db "Test %d, Result: %d\n", 0
3457   18ED 20 25 64 2C 
3457   18F1 20 52 65 73 
3457   18F5 75 6C 74 3A 
3457   18F9 20 25 64 0A 
3457   18FD 00 
3458   18FE 55 6E 65 78 _s1: .db "Unexpected format in printf.", 0
3458   1902 70 65 63 74 
3458   1906 65 64 20 66 
3458   190A 6F 72 6D 61 
3458   190E 74 20 69 6E 
3458   1912 20 70 72 69 
3458   1916 6E 74 66 2E 
3458   191A 00 
3459   191B 45 72 72 6F _s2: .db "Error: Unknown argument type.\n", 0
3459   191F 72 3A 20 55 
3459   1923 6E 6B 6E 6F 
3459   1927 77 6E 20 61 
3459   192B 72 67 75 6D 
3459   192F 65 6E 74 20 
3459   1933 74 79 70 65 
3459   1937 2E 0A 00 
3460   193A             
3461   193A 3C 19       _heap_top: .dw _heap
3462   193C 00          _heap: .db 0
3463   193D             ; --- END DATA SEGMENT
3464   193D             
3465   193D             .end
tasm: Number of errors = 0
