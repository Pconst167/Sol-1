0001   0000             ; --- FILENAME: ctestsuite/testsuite2
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $pass 
0011   0408             ; $i 
0012   0408             ; $nbr_tests 
0013   0408 10 0A 00      mov a, $a
0014   040B 45 E9 FF      mov [bp + -23], a
0015   040E 52 18 00      sub sp, 24
0016   0411             ;; for(i = 0; i < nbr_tests; i++){ 
0017   0411             _for1_init:
0018   0411 FA EB FF      lea d, [bp + -21] ; $i
0019   0414 DA            push d
0020   0415 26 00 00      mov b, $0
0021   0418 E7            pop d
0022   0419 FD 43         mov [d], b
0023   041B             _for1_cond:
0024   041B FA EB FF      lea d, [bp + -21] ; $i
0025   041E 2A            mov b, [d]
0026   041F             ; START RELATIONAL
0027   041F D7            push a
0028   0420 11            mov a, b
0029   0421 FA E9 FF      lea d, [bp + -23] ; $nbr_tests
0030   0424 2A            mov b, [d]
0031   0425 B0            cmp a, b
0032   0426 FD 73         slt ; <= (signed)
0033   0428 E4            pop a
0034   0429             ; END RELATIONAL
0035   0429 C0 00 00      cmp b, 0
0036   042C C6 55 04      je _for1_exit
0037   042F             _for1_block:
0038   042F             ;; pass[i] = -1; 
0039   042F FA ED FF      lea d, [bp + -19] ; $pass
0040   0432 D7            push a
0041   0433 DA            push d
0042   0434 FA EB FF      lea d, [bp + -21] ; $i
0043   0437 2A            mov b, [d]
0044   0438 E7            pop d
0045   0439 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0046   043D E4            pop a
0047   043E DA            push d
0048   043F 26 FF FF      mov b, $ffff
0049   0442 E7            pop d
0050   0443 FD 43         mov [d], b
0051   0445             _for1_update:
0052   0445 FA EB FF      lea d, [bp + -21] ; $i
0053   0448 2A            mov b, [d]
0054   0449 D8            push b
0055   044A FD 77         inc b
0056   044C FA EB FF      lea d, [bp + -21] ; $i
0057   044F FD 43         mov [d], b
0058   0451 E5            pop b
0059   0452 0A 1B 04      jmp _for1_cond
0060   0455             _for1_exit:
0061   0455             ;; pass[0] = test0(); 
0062   0455 FA ED FF      lea d, [bp + -19] ; $pass
0063   0458 D7            push a
0064   0459 DA            push d
0065   045A 26 00 00      mov b, $0
0066   045D E7            pop d
0067   045E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0068   0462 E4            pop a
0069   0463 DA            push d
0070   0464 07 22 15      call test0
0071   0467 E7            pop d
0072   0468 FD 43         mov [d], b
0073   046A             ;; pass[1] = test1(); 
0074   046A FA ED FF      lea d, [bp + -19] ; $pass
0075   046D D7            push a
0076   046E DA            push d
0077   046F 26 01 00      mov b, $1
0078   0472 E7            pop d
0079   0473 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0080   0477 E4            pop a
0081   0478 DA            push d
0082   0479 07 1D 18      call test1
0083   047C E7            pop d
0084   047D FD 43         mov [d], b
0085   047F             ;; pass[2] = test2(); 
0086   047F FA ED FF      lea d, [bp + -19] ; $pass
0087   0482 D7            push a
0088   0483 DA            push d
0089   0484 26 02 00      mov b, $2
0090   0487 E7            pop d
0091   0488 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0092   048C E4            pop a
0093   048D DA            push d
0094   048E 07 55 19      call test2
0095   0491 E7            pop d
0096   0492 FD 43         mov [d], b
0097   0494             ;; pass[3] = test3(st1); 
0098   0494 FA ED FF      lea d, [bp + -19] ; $pass
0099   0497 D7            push a
0100   0498 DA            push d
0101   0499 26 03 00      mov b, $3
0102   049C E7            pop d
0103   049D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0104   04A1 E4            pop a
0105   04A2 DA            push d
0106   04A3 3B F6 1C      mov d, _st1_data ; $st1
0107   04A6 2D            mov b, d
0108   04A7 52 0D 00      sub sp, 13
0109   04AA FD 28         mov si, b
0110   04AC FD FA 01 00   lea d, [sp + 1]
0111   04B0 FD 50         mov di, d
0112   04B2 38 0D 00      mov c, 13
0113   04B5 FD F5         rep movsb
0114   04B7 07 39 1B      call test3
0115   04BA E7            pop d
0116   04BB FD 43         mov [d], b
0117   04BD             ;; for(i = 0; i < nbr_tests; i++){ 
0118   04BD             _for2_init:
0119   04BD FA EB FF      lea d, [bp + -21] ; $i
0120   04C0 DA            push d
0121   04C1 26 00 00      mov b, $0
0122   04C4 E7            pop d
0123   04C5 FD 43         mov [d], b
0124   04C7             _for2_cond:
0125   04C7 FA EB FF      lea d, [bp + -21] ; $i
0126   04CA 2A            mov b, [d]
0127   04CB             ; START RELATIONAL
0128   04CB D7            push a
0129   04CC 11            mov a, b
0130   04CD FA E9 FF      lea d, [bp + -23] ; $nbr_tests
0131   04D0 2A            mov b, [d]
0132   04D1 B0            cmp a, b
0133   04D2 FD 73         slt ; <= (signed)
0134   04D4 E4            pop a
0135   04D5             ; END RELATIONAL
0136   04D5 C0 00 00      cmp b, 0
0137   04D8 C6 0E 05      je _for2_exit
0138   04DB             _for2_block:
0139   04DB             ;; printf("Test %d, Result: %d\n", i, pass[i]); 
0140   04DB FA ED FF      lea d, [bp + -19] ; $pass
0141   04DE D7            push a
0142   04DF DA            push d
0143   04E0 FA EB FF      lea d, [bp + -21] ; $i
0144   04E3 2A            mov b, [d]
0145   04E4 E7            pop d
0146   04E5 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0147   04E9 E4            pop a
0148   04EA 2A            mov b, [d]
0149   04EB FD AB         swp b
0150   04ED D8            push b
0151   04EE FA EB FF      lea d, [bp + -21] ; $i
0152   04F1 2A            mov b, [d]
0153   04F2 FD AB         swp b
0154   04F4 D8            push b
0155   04F5 26 03 1D      mov b, __s0 ; "Test %d, Result: %d\n"
0156   04F8 FD AB         swp b
0157   04FA D8            push b
0158   04FB 07 B0 08      call printf
0159   04FE             _for2_update:
0160   04FE FA EB FF      lea d, [bp + -21] ; $i
0161   0501 2A            mov b, [d]
0162   0502 D8            push b
0163   0503 FD 77         inc b
0164   0505 FA EB FF      lea d, [bp + -21] ; $i
0165   0508 FD 43         mov [d], b
0166   050A E5            pop b
0167   050B 0A C7 04      jmp _for2_cond
0168   050E             _for2_exit:
0169   050E 05 0B         syscall sys_terminate_proc
0170   0510             
0171   0510             strcpy:
0172   0510 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0173   0513             ; $psrc 
0174   0513             ; $pdest 
0175   0513 52 04 00      sub sp, 4
0176   0516             ;; psrc = src; 
0177   0516 FA FF FF      lea d, [bp + -1] ; $psrc
0178   0519 DA            push d
0179   051A FA 07 00      lea d, [bp + 7] ; $src
0180   051D 2A            mov b, [d]
0181   051E E7            pop d
0182   051F FD 43         mov [d], b
0183   0521             ;; pdest = dest; 
0184   0521 FA FD FF      lea d, [bp + -3] ; $pdest
0185   0524 DA            push d
0186   0525 FA 05 00      lea d, [bp + 5] ; $dest
0187   0528 2A            mov b, [d]
0188   0529 E7            pop d
0189   052A FD 43         mov [d], b
0190   052C             ;; while(*psrc) *pdest++ = *psrc++; 
0191   052C             _while3_cond:
0192   052C FA FF FF      lea d, [bp + -1] ; $psrc
0193   052F 2A            mov b, [d]
0194   0530 74            mov d, b
0195   0531 32            mov bl, [d]
0196   0532 A7 00         mov bh, 0
0197   0534 C0 00 00      cmp b, 0
0198   0537 C6 5F 05      je _while3_exit
0199   053A             _while3_block:
0200   053A             ;; *pdest++ = *psrc++; 
0201   053A FA FD FF      lea d, [bp + -3] ; $pdest
0202   053D 2A            mov b, [d]
0203   053E D8            push b
0204   053F FD 77         inc b
0205   0541 FA FD FF      lea d, [bp + -3] ; $pdest
0206   0544 FD 43         mov [d], b
0207   0546 E5            pop b
0208   0547 D8            push b
0209   0548 FA FF FF      lea d, [bp + -1] ; $psrc
0210   054B 2A            mov b, [d]
0211   054C D8            push b
0212   054D FD 77         inc b
0213   054F FA FF FF      lea d, [bp + -1] ; $psrc
0214   0552 FD 43         mov [d], b
0215   0554 E5            pop b
0216   0555 74            mov d, b
0217   0556 32            mov bl, [d]
0218   0557 A7 00         mov bh, 0
0219   0559 E7            pop d
0220   055A FD 3E         mov [d], bl
0221   055C 0A 2C 05      jmp _while3_cond
0222   055F             _while3_exit:
0223   055F             ;; *pdest = '\0'; 
0224   055F FA FD FF      lea d, [bp + -3] ; $pdest
0225   0562 2A            mov b, [d]
0226   0563 D8            push b
0227   0564 26 00 00      mov b, $0
0228   0567 E7            pop d
0229   0568 FD 3E         mov [d], bl
0230   056A F9            leave
0231   056B 09            ret
0232   056C             
0233   056C             strcmp:
0234   056C F8 00 00      enter 0 ; (push bp; mov bp, sp)
0235   056F             ;; while (*s1 && (*s1 == *s2)) { 
0236   056F             _while4_cond:
0237   056F FA 05 00      lea d, [bp + 5] ; $s1
0238   0572 2A            mov b, [d]
0239   0573 74            mov d, b
0240   0574 32            mov bl, [d]
0241   0575 A7 00         mov bh, 0
0242   0577 D7            push a
0243   0578 11            mov a, b
0244   0579 FA 05 00      lea d, [bp + 5] ; $s1
0245   057C 2A            mov b, [d]
0246   057D 74            mov d, b
0247   057E 32            mov bl, [d]
0248   057F A7 00         mov bh, 0
0249   0581             ; START RELATIONAL
0250   0581 D7            push a
0251   0582 11            mov a, b
0252   0583 FA 07 00      lea d, [bp + 7] ; $s2
0253   0586 2A            mov b, [d]
0254   0587 74            mov d, b
0255   0588 32            mov bl, [d]
0256   0589 A7 00         mov bh, 0
0257   058B B0            cmp a, b
0258   058C FD 71         seq ; ==
0259   058E E4            pop a
0260   058F             ; END RELATIONAL
0261   058F FD A7         sand a, b ; &&
0262   0591 E4            pop a
0263   0592 C0 00 00      cmp b, 0
0264   0595 C6 B5 05      je _while4_exit
0265   0598             _while4_block:
0266   0598             ;; s1++; 
0267   0598 FA 05 00      lea d, [bp + 5] ; $s1
0268   059B 2A            mov b, [d]
0269   059C D8            push b
0270   059D FD 77         inc b
0271   059F FA 05 00      lea d, [bp + 5] ; $s1
0272   05A2 FD 43         mov [d], b
0273   05A4 E5            pop b
0274   05A5             ;; s2++; 
0275   05A5 FA 07 00      lea d, [bp + 7] ; $s2
0276   05A8 2A            mov b, [d]
0277   05A9 D8            push b
0278   05AA FD 77         inc b
0279   05AC FA 07 00      lea d, [bp + 7] ; $s2
0280   05AF FD 43         mov [d], b
0281   05B1 E5            pop b
0282   05B2 0A 6F 05      jmp _while4_cond
0283   05B5             _while4_exit:
0284   05B5             ;; return *s1 - *s2; 
0285   05B5 FA 05 00      lea d, [bp + 5] ; $s1
0286   05B8 2A            mov b, [d]
0287   05B9 74            mov d, b
0288   05BA 32            mov bl, [d]
0289   05BB A7 00         mov bh, 0
0290   05BD             ; START TERMS
0291   05BD D7            push a
0292   05BE 11            mov a, b
0293   05BF FA 07 00      lea d, [bp + 7] ; $s2
0294   05C2 2A            mov b, [d]
0295   05C3 74            mov d, b
0296   05C4 32            mov bl, [d]
0297   05C5 A7 00         mov bh, 0
0298   05C7 60            sub a, b
0299   05C8 27            mov b, a
0300   05C9 E4            pop a
0301   05CA             ; END TERMS
0302   05CA F9            leave
0303   05CB 09            ret
0304   05CC             
0305   05CC             strcat:
0306   05CC F8 00 00      enter 0 ; (push bp; mov bp, sp)
0307   05CF             ; $dest_len 
0308   05CF             ; $i 
0309   05CF 52 04 00      sub sp, 4
0310   05D2             ;; dest_len = strlen(dest); 
0311   05D2 FA FF FF      lea d, [bp + -1] ; $dest_len
0312   05D5 DA            push d
0313   05D6 FA 05 00      lea d, [bp + 5] ; $dest
0314   05D9 2A            mov b, [d]
0315   05DA FD AB         swp b
0316   05DC D8            push b
0317   05DD 07 7F 06      call strlen
0318   05E0 51 02 00      add sp, 2
0319   05E3 E7            pop d
0320   05E4 FD 43         mov [d], b
0321   05E6             ;; for (i = 0; src[i] != 0; i=i+1) { 
0322   05E6             _for5_init:
0323   05E6 FA FD FF      lea d, [bp + -3] ; $i
0324   05E9 DA            push d
0325   05EA 26 00 00      mov b, $0
0326   05ED E7            pop d
0327   05EE FD 43         mov [d], b
0328   05F0             _for5_cond:
0329   05F0 FA 07 00      lea d, [bp + 7] ; $src
0330   05F3 FD 2A         mov d, [d]
0331   05F5 D7            push a
0332   05F6 DA            push d
0333   05F7 FA FD FF      lea d, [bp + -3] ; $i
0334   05FA 2A            mov b, [d]
0335   05FB E7            pop d
0336   05FC FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0337   0600 E4            pop a
0338   0601 32            mov bl, [d]
0339   0602 A7 00         mov bh, 0
0340   0604             ; START RELATIONAL
0341   0604 D7            push a
0342   0605 11            mov a, b
0343   0606 26 00 00      mov b, $0
0344   0609 B0            cmp a, b
0345   060A FD 72         sneq ; !=
0346   060C E4            pop a
0347   060D             ; END RELATIONAL
0348   060D C0 00 00      cmp b, 0
0349   0610 C6 59 06      je _for5_exit
0350   0613             _for5_block:
0351   0613             ;; dest[dest_len + i] = src[i]; 
0352   0613 FA 05 00      lea d, [bp + 5] ; $dest
0353   0616 FD 2A         mov d, [d]
0354   0618 D7            push a
0355   0619 DA            push d
0356   061A FA FF FF      lea d, [bp + -1] ; $dest_len
0357   061D 2A            mov b, [d]
0358   061E             ; START TERMS
0359   061E D7            push a
0360   061F 11            mov a, b
0361   0620 FA FD FF      lea d, [bp + -3] ; $i
0362   0623 2A            mov b, [d]
0363   0624 56            add b, a
0364   0625 E4            pop a
0365   0626             ; END TERMS
0366   0626 E7            pop d
0367   0627 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0368   062B E4            pop a
0369   062C DA            push d
0370   062D FA 07 00      lea d, [bp + 7] ; $src
0371   0630 FD 2A         mov d, [d]
0372   0632 D7            push a
0373   0633 DA            push d
0374   0634 FA FD FF      lea d, [bp + -3] ; $i
0375   0637 2A            mov b, [d]
0376   0638 E7            pop d
0377   0639 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0378   063D E4            pop a
0379   063E 32            mov bl, [d]
0380   063F A7 00         mov bh, 0
0381   0641 E7            pop d
0382   0642 FD 3E         mov [d], bl
0383   0644             _for5_update:
0384   0644 FA FD FF      lea d, [bp + -3] ; $i
0385   0647 DA            push d
0386   0648 FA FD FF      lea d, [bp + -3] ; $i
0387   064B 2A            mov b, [d]
0388   064C             ; START TERMS
0389   064C D7            push a
0390   064D 11            mov a, b
0391   064E 26 01 00      mov b, $1
0392   0651 56            add b, a
0393   0652 E4            pop a
0394   0653             ; END TERMS
0395   0653 E7            pop d
0396   0654 FD 43         mov [d], b
0397   0656 0A F0 05      jmp _for5_cond
0398   0659             _for5_exit:
0399   0659             ;; dest[dest_len + i] = 0; 
0400   0659 FA 05 00      lea d, [bp + 5] ; $dest
0401   065C FD 2A         mov d, [d]
0402   065E D7            push a
0403   065F DA            push d
0404   0660 FA FF FF      lea d, [bp + -1] ; $dest_len
0405   0663 2A            mov b, [d]
0406   0664             ; START TERMS
0407   0664 D7            push a
0408   0665 11            mov a, b
0409   0666 FA FD FF      lea d, [bp + -3] ; $i
0410   0669 2A            mov b, [d]
0411   066A 56            add b, a
0412   066B E4            pop a
0413   066C             ; END TERMS
0414   066C E7            pop d
0415   066D FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0416   0671 E4            pop a
0417   0672 DA            push d
0418   0673 26 00 00      mov b, $0
0419   0676 E7            pop d
0420   0677 FD 3E         mov [d], bl
0421   0679             ;; return dest; 
0422   0679 FA 05 00      lea d, [bp + 5] ; $dest
0423   067C 2A            mov b, [d]
0424   067D F9            leave
0425   067E 09            ret
0426   067F             
0427   067F             strlen:
0428   067F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0429   0682             ; $length 
0430   0682 52 02 00      sub sp, 2
0431   0685             ;; length = 0; 
0432   0685 FA FF FF      lea d, [bp + -1] ; $length
0433   0688 DA            push d
0434   0689 26 00 00      mov b, $0
0435   068C E7            pop d
0436   068D FD 43         mov [d], b
0437   068F             ;; while (str[length] != 0) { 
0438   068F             _while6_cond:
0439   068F FA 05 00      lea d, [bp + 5] ; $str
0440   0692 FD 2A         mov d, [d]
0441   0694 D7            push a
0442   0695 DA            push d
0443   0696 FA FF FF      lea d, [bp + -1] ; $length
0444   0699 2A            mov b, [d]
0445   069A E7            pop d
0446   069B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0447   069F E4            pop a
0448   06A0 32            mov bl, [d]
0449   06A1 A7 00         mov bh, 0
0450   06A3             ; START RELATIONAL
0451   06A3 D7            push a
0452   06A4 11            mov a, b
0453   06A5 26 00 00      mov b, $0
0454   06A8 B0            cmp a, b
0455   06A9 FD 72         sneq ; !=
0456   06AB E4            pop a
0457   06AC             ; END RELATIONAL
0458   06AC C0 00 00      cmp b, 0
0459   06AF C6 C2 06      je _while6_exit
0460   06B2             _while6_block:
0461   06B2             ;; length++; 
0462   06B2 FA FF FF      lea d, [bp + -1] ; $length
0463   06B5 2A            mov b, [d]
0464   06B6 D8            push b
0465   06B7 FD 77         inc b
0466   06B9 FA FF FF      lea d, [bp + -1] ; $length
0467   06BC FD 43         mov [d], b
0468   06BE E5            pop b
0469   06BF 0A 8F 06      jmp _while6_cond
0470   06C2             _while6_exit:
0471   06C2             ;; return length; 
0472   06C2 FA FF FF      lea d, [bp + -1] ; $length
0473   06C5 2A            mov b, [d]
0474   06C6 F9            leave
0475   06C7 09            ret
0476   06C8             
0477   06C8             exit:
0478   06C8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0479   06CB             
0480   06CB             ; --- BEGIN INLINE ASM BLOCK
0481   06CB 05 0B         syscall sys_terminate_proc
0482   06CD             ; --- END INLINE ASM BLOCK
0483   06CD             
0484   06CD F9            leave
0485   06CE 09            ret
0486   06CF             
0487   06CF             atoi:
0488   06CF F8 00 00      enter 0 ; (push bp; mov bp, sp)
0489   06D2             ; $result 
0490   06D2 10 00 00      mov a, $0
0491   06D5 45 FF FF      mov [bp + -1], a
0492   06D8             ; $sign 
0493   06D8 10 01 00      mov a, $1
0494   06DB 45 FD FF      mov [bp + -3], a
0495   06DE 52 04 00      sub sp, 4
0496   06E1             ;; while (*str == ' ') str++; 
0497   06E1             _while7_cond:
0498   06E1 FA 05 00      lea d, [bp + 5] ; $str
0499   06E4 2A            mov b, [d]
0500   06E5 74            mov d, b
0501   06E6 32            mov bl, [d]
0502   06E7 A7 00         mov bh, 0
0503   06E9             ; START RELATIONAL
0504   06E9 D7            push a
0505   06EA 11            mov a, b
0506   06EB 26 20 00      mov b, $20
0507   06EE B0            cmp a, b
0508   06EF FD 71         seq ; ==
0509   06F1 E4            pop a
0510   06F2             ; END RELATIONAL
0511   06F2 C0 00 00      cmp b, 0
0512   06F5 C6 08 07      je _while7_exit
0513   06F8             _while7_block:
0514   06F8             ;; str++; 
0515   06F8 FA 05 00      lea d, [bp + 5] ; $str
0516   06FB 2A            mov b, [d]
0517   06FC D8            push b
0518   06FD FD 77         inc b
0519   06FF FA 05 00      lea d, [bp + 5] ; $str
0520   0702 FD 43         mov [d], b
0521   0704 E5            pop b
0522   0705 0A E1 06      jmp _while7_cond
0523   0708             _while7_exit:
0524   0708             ;; if (*str == '-' || *str == '+') { 
0525   0708             _if8_cond:
0526   0708 FA 05 00      lea d, [bp + 5] ; $str
0527   070B 2A            mov b, [d]
0528   070C 74            mov d, b
0529   070D 32            mov bl, [d]
0530   070E A7 00         mov bh, 0
0531   0710             ; START RELATIONAL
0532   0710 D7            push a
0533   0711 11            mov a, b
0534   0712 26 2D 00      mov b, $2d
0535   0715 B0            cmp a, b
0536   0716 FD 71         seq ; ==
0537   0718 E4            pop a
0538   0719             ; END RELATIONAL
0539   0719 D7            push a
0540   071A 11            mov a, b
0541   071B FA 05 00      lea d, [bp + 5] ; $str
0542   071E 2A            mov b, [d]
0543   071F 74            mov d, b
0544   0720 32            mov bl, [d]
0545   0721 A7 00         mov bh, 0
0546   0723             ; START RELATIONAL
0547   0723 D7            push a
0548   0724 11            mov a, b
0549   0725 26 2B 00      mov b, $2b
0550   0728 B0            cmp a, b
0551   0729 FD 71         seq ; ==
0552   072B E4            pop a
0553   072C             ; END RELATIONAL
0554   072C FD A8         sor a, b ; ||
0555   072E E4            pop a
0556   072F C0 00 00      cmp b, 0
0557   0732 C6 69 07      je _if8_exit
0558   0735             _if8_true:
0559   0735             ;; if (*str == '-') sign = -1; 
0560   0735             _if9_cond:
0561   0735 FA 05 00      lea d, [bp + 5] ; $str
0562   0738 2A            mov b, [d]
0563   0739 74            mov d, b
0564   073A 32            mov bl, [d]
0565   073B A7 00         mov bh, 0
0566   073D             ; START RELATIONAL
0567   073D D7            push a
0568   073E 11            mov a, b
0569   073F 26 2D 00      mov b, $2d
0570   0742 B0            cmp a, b
0571   0743 FD 71         seq ; ==
0572   0745 E4            pop a
0573   0746             ; END RELATIONAL
0574   0746 C0 00 00      cmp b, 0
0575   0749 C6 59 07      je _if9_exit
0576   074C             _if9_true:
0577   074C             ;; sign = -1; 
0578   074C FA FD FF      lea d, [bp + -3] ; $sign
0579   074F DA            push d
0580   0750 26 FF FF      mov b, $ffff
0581   0753 E7            pop d
0582   0754 FD 43         mov [d], b
0583   0756 0A 59 07      jmp _if9_exit
0584   0759             _if9_exit:
0585   0759             ;; str++; 
0586   0759 FA 05 00      lea d, [bp + 5] ; $str
0587   075C 2A            mov b, [d]
0588   075D D8            push b
0589   075E FD 77         inc b
0590   0760 FA 05 00      lea d, [bp + 5] ; $str
0591   0763 FD 43         mov [d], b
0592   0765 E5            pop b
0593   0766 0A 69 07      jmp _if8_exit
0594   0769             _if8_exit:
0595   0769             ;; while (*str >= '0' && *str <= '9') { 
0596   0769             _while10_cond:
0597   0769 FA 05 00      lea d, [bp + 5] ; $str
0598   076C 2A            mov b, [d]
0599   076D 74            mov d, b
0600   076E 32            mov bl, [d]
0601   076F A7 00         mov bh, 0
0602   0771             ; START RELATIONAL
0603   0771 D7            push a
0604   0772 11            mov a, b
0605   0773 26 30 00      mov b, $30
0606   0776 B0            cmp a, b
0607   0777 FD 82         sgeu ; >= (unsigned)
0608   0779 E4            pop a
0609   077A             ; END RELATIONAL
0610   077A D7            push a
0611   077B 11            mov a, b
0612   077C FA 05 00      lea d, [bp + 5] ; $str
0613   077F 2A            mov b, [d]
0614   0780 74            mov d, b
0615   0781 32            mov bl, [d]
0616   0782 A7 00         mov bh, 0
0617   0784             ; START RELATIONAL
0618   0784 D7            push a
0619   0785 11            mov a, b
0620   0786 26 39 00      mov b, $39
0621   0789 B0            cmp a, b
0622   078A FD 76         sleu ; <= (unsigned)
0623   078C E4            pop a
0624   078D             ; END RELATIONAL
0625   078D FD A7         sand a, b ; &&
0626   078F E4            pop a
0627   0790 C0 00 00      cmp b, 0
0628   0793 C6 CE 07      je _while10_exit
0629   0796             _while10_block:
0630   0796             ;; result = result * 10 + (*str - '0'); 
0631   0796 FA FF FF      lea d, [bp + -1] ; $result
0632   0799 DA            push d
0633   079A FA FF FF      lea d, [bp + -1] ; $result
0634   079D 2A            mov b, [d]
0635   079E             ; START FACTORS
0636   079E D7            push a
0637   079F 11            mov a, b
0638   07A0 26 0A 00      mov b, $a
0639   07A3 AC            mul a, b ; *
0640   07A4 11            mov a, b
0641   07A5 27            mov b, a
0642   07A6 E4            pop a
0643   07A7             ; END FACTORS
0644   07A7             ; START TERMS
0645   07A7 D7            push a
0646   07A8 11            mov a, b
0647   07A9 FA 05 00      lea d, [bp + 5] ; $str
0648   07AC 2A            mov b, [d]
0649   07AD 74            mov d, b
0650   07AE 32            mov bl, [d]
0651   07AF A7 00         mov bh, 0
0652   07B1             ; START TERMS
0653   07B1 D7            push a
0654   07B2 11            mov a, b
0655   07B3 26 30 00      mov b, $30
0656   07B6 60            sub a, b
0657   07B7 27            mov b, a
0658   07B8 E4            pop a
0659   07B9             ; END TERMS
0660   07B9 56            add b, a
0661   07BA E4            pop a
0662   07BB             ; END TERMS
0663   07BB E7            pop d
0664   07BC FD 43         mov [d], b
0665   07BE             ;; str++; 
0666   07BE FA 05 00      lea d, [bp + 5] ; $str
0667   07C1 2A            mov b, [d]
0668   07C2 D8            push b
0669   07C3 FD 77         inc b
0670   07C5 FA 05 00      lea d, [bp + 5] ; $str
0671   07C8 FD 43         mov [d], b
0672   07CA E5            pop b
0673   07CB 0A 69 07      jmp _while10_cond
0674   07CE             _while10_exit:
0675   07CE             ;; return sign * result; 
0676   07CE FA FD FF      lea d, [bp + -3] ; $sign
0677   07D1 2A            mov b, [d]
0678   07D2             ; START FACTORS
0679   07D2 D7            push a
0680   07D3 11            mov a, b
0681   07D4 FA FF FF      lea d, [bp + -1] ; $result
0682   07D7 2A            mov b, [d]
0683   07D8 AC            mul a, b ; *
0684   07D9 11            mov a, b
0685   07DA 27            mov b, a
0686   07DB E4            pop a
0687   07DC             ; END FACTORS
0688   07DC F9            leave
0689   07DD 09            ret
0690   07DE             
0691   07DE             rand:
0692   07DE F8 00 00      enter 0 ; (push bp; mov bp, sp)
0693   07E1             ; $sec 
0694   07E1 52 02 00      sub sp, 2
0695   07E4             
0696   07E4             ; --- BEGIN INLINE ASM BLOCK
0697   07E4 19 00         mov al, 0
0698   07E6 05 01         syscall sys_rtc					
0699   07E8 1A            mov al, ah
0700   07E9 FA FF FF      lea d, [bp + -1] ; $sec
0701   07EC 1E            mov al, [d]
0702   07ED 22 00         mov ah, 0
0703   07EF             ; --- END INLINE ASM BLOCK
0704   07EF             
0705   07EF             ;; return sec; 
0706   07EF FA FF FF      lea d, [bp + -1] ; $sec
0707   07F2 2A            mov b, [d]
0708   07F3 F9            leave
0709   07F4 09            ret
0710   07F5             
0711   07F5             srand:
0712   07F5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0713   07F8 F9            leave
0714   07F9 09            ret
0715   07FA             
0716   07FA             malloc:
0717   07FA F8 00 00      enter 0 ; (push bp; mov bp, sp)
0718   07FD F9            leave
0719   07FE 09            ret
0720   07FF             
0721   07FF             calloc:
0722   07FF F8 00 00      enter 0 ; (push bp; mov bp, sp)
0723   0802 F9            leave
0724   0803 09            ret
0725   0804             
0726   0804             realloc:
0727   0804 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0728   0807 F9            leave
0729   0808 09            ret
0730   0809             
0731   0809             alloc:
0732   0809 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0733   080C             ;; heap_top = heap_top + bytes; 
0734   080C 3B 5C 1D      mov d, _heap_top ; $heap_top
0735   080F DA            push d
0736   0810 3B 5C 1D      mov d, _heap_top ; $heap_top
0737   0813 2A            mov b, [d]
0738   0814             ; START TERMS
0739   0814 D7            push a
0740   0815 11            mov a, b
0741   0816 FA 05 00      lea d, [bp + 5] ; $bytes
0742   0819 2A            mov b, [d]
0743   081A 56            add b, a
0744   081B E4            pop a
0745   081C             ; END TERMS
0746   081C E7            pop d
0747   081D FD 43         mov [d], b
0748   081F             ;; return heap_top - bytes; 
0749   081F 3B 5C 1D      mov d, _heap_top ; $heap_top
0750   0822 2A            mov b, [d]
0751   0823             ; START TERMS
0752   0823 D7            push a
0753   0824 11            mov a, b
0754   0825 FA 05 00      lea d, [bp + 5] ; $bytes
0755   0828 2A            mov b, [d]
0756   0829 60            sub a, b
0757   082A 27            mov b, a
0758   082B E4            pop a
0759   082C             ; END TERMS
0760   082C F9            leave
0761   082D 09            ret
0762   082E             
0763   082E             free:
0764   082E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0765   0831             ;; return heap_top = heap_top - bytes; 
0766   0831 3B 5C 1D      mov d, _heap_top ; $heap_top
0767   0834 DA            push d
0768   0835 3B 5C 1D      mov d, _heap_top ; $heap_top
0769   0838 2A            mov b, [d]
0770   0839             ; START TERMS
0771   0839 D7            push a
0772   083A 11            mov a, b
0773   083B FA 05 00      lea d, [bp + 5] ; $bytes
0774   083E 2A            mov b, [d]
0775   083F 60            sub a, b
0776   0840 27            mov b, a
0777   0841 E4            pop a
0778   0842             ; END TERMS
0779   0842 E7            pop d
0780   0843 FD 43         mov [d], b
0781   0845 F9            leave
0782   0846 09            ret
0783   0847             
0784   0847             va_start:
0785   0847 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0786   084A             ;; argp->current_arg = first_fixed_param + sizeof(first_fixed_param); 
0787   084A FA 05 00      lea d, [bp + 5] ; $argp
0788   084D FD 2A         mov d, [d]
0789   084F 58 00 00      add d, 0
0790   0852 DA            push d
0791   0853 FA 07 00      lea d, [bp + 7] ; $first_fixed_param
0792   0856 2A            mov b, [d]
0793   0857             ; START TERMS
0794   0857 D7            push a
0795   0858 11            mov a, b
0796   0859 26 02 00      mov b, 2
0797   085C 56            add b, a
0798   085D E4            pop a
0799   085E             ; END TERMS
0800   085E E7            pop d
0801   085F FD 43         mov [d], b
0802   0861 F9            leave
0803   0862 09            ret
0804   0863             
0805   0863             va_arg:
0806   0863 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0807   0866             ; $p 
0808   0866 52 02 00      sub sp, 2
0809   0869             ;; p = argp->current_arg; 
0810   0869 FA FF FF      lea d, [bp + -1] ; $p
0811   086C DA            push d
0812   086D FA 05 00      lea d, [bp + 5] ; $argp
0813   0870 FD 2A         mov d, [d]
0814   0872 58 00 00      add d, 0
0815   0875 2A            mov b, [d]
0816   0876 E7            pop d
0817   0877 FD 43         mov [d], b
0818   0879             ;; argp->current_arg = argp->current_arg + size; 
0819   0879 FA 05 00      lea d, [bp + 5] ; $argp
0820   087C FD 2A         mov d, [d]
0821   087E 58 00 00      add d, 0
0822   0881 DA            push d
0823   0882 FA 05 00      lea d, [bp + 5] ; $argp
0824   0885 FD 2A         mov d, [d]
0825   0887 58 00 00      add d, 0
0826   088A 2A            mov b, [d]
0827   088B             ; START TERMS
0828   088B D7            push a
0829   088C 11            mov a, b
0830   088D FA 07 00      lea d, [bp + 7] ; $size
0831   0890 2A            mov b, [d]
0832   0891 56            add b, a
0833   0892 E4            pop a
0834   0893             ; END TERMS
0835   0893 E7            pop d
0836   0894 FD 43         mov [d], b
0837   0896             ;; return p; 
0838   0896 FA FF FF      lea d, [bp + -1] ; $p
0839   0899 2A            mov b, [d]
0840   089A F9            leave
0841   089B 09            ret
0842   089C             
0843   089C             va_end:
0844   089C F8 00 00      enter 0 ; (push bp; mov bp, sp)
0845   089F             ;; argp->current_arg =   0   ; 
0846   089F FA 05 00      lea d, [bp + 5] ; $argp
0847   08A2 FD 2A         mov d, [d]
0848   08A4 58 00 00      add d, 0
0849   08A7 DA            push d
0850   08A8 26 00 00      mov b, $0
0851   08AB E7            pop d
0852   08AC FD 43         mov [d], b
0853   08AE F9            leave
0854   08AF 09            ret
0855   08B0             
0856   08B0             printf:
0857   08B0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0858   08B3             ; $p 
0859   08B3             ; $fp 
0860   08B3             ; $i 
0861   08B3 52 06 00      sub sp, 6
0862   08B6             ;; fp = format; 
0863   08B6 FA FD FF      lea d, [bp + -3] ; $fp
0864   08B9 DA            push d
0865   08BA FA 05 00      lea d, [bp + 5] ; $format
0866   08BD 2A            mov b, [d]
0867   08BE E7            pop d
0868   08BF FD 43         mov [d], b
0869   08C1             ;; p = &format + 2; 
0870   08C1 FA FF FF      lea d, [bp + -1] ; $p
0871   08C4 DA            push d
0872   08C5 FA 05 00      lea d, [bp + 5] ; $format
0873   08C8 2D            mov b, d
0874   08C9             ; START TERMS
0875   08C9 D7            push a
0876   08CA 11            mov a, b
0877   08CB 26 02 00      mov b, $2
0878   08CE 56            add b, a
0879   08CF E4            pop a
0880   08D0             ; END TERMS
0881   08D0 E7            pop d
0882   08D1 FD 43         mov [d], b
0883   08D3             ;; for(;;){ 
0884   08D3             _for11_init:
0885   08D3             _for11_cond:
0886   08D3             _for11_block:
0887   08D3             ;; if(!*fp) break; 
0888   08D3             _if12_cond:
0889   08D3 FA FD FF      lea d, [bp + -3] ; $fp
0890   08D6 2A            mov b, [d]
0891   08D7 74            mov d, b
0892   08D8 32            mov bl, [d]
0893   08D9 A7 00         mov bh, 0
0894   08DB C0 00 00      cmp b, 0
0895   08DE FD 71         seq ; !
0896   08E0 C0 00 00      cmp b, 0
0897   08E3 C6 EC 08      je _if12_else
0898   08E6             _if12_true:
0899   08E6             ;; break; 
0900   08E6 0A F2 0A      jmp _for11_exit ; for break
0901   08E9 0A EF 0A      jmp _if12_exit
0902   08EC             _if12_else:
0903   08EC             ;; if(*fp == '%'){ 
0904   08EC             _if13_cond:
0905   08EC FA FD FF      lea d, [bp + -3] ; $fp
0906   08EF 2A            mov b, [d]
0907   08F0 74            mov d, b
0908   08F1 32            mov bl, [d]
0909   08F2 A7 00         mov bh, 0
0910   08F4             ; START RELATIONAL
0911   08F4 D7            push a
0912   08F5 11            mov a, b
0913   08F6 26 25 00      mov b, $25
0914   08F9 B0            cmp a, b
0915   08FA FD 71         seq ; ==
0916   08FC E4            pop a
0917   08FD             ; END RELATIONAL
0918   08FD C0 00 00      cmp b, 0
0919   0900 C6 D3 0A      je _if13_else
0920   0903             _if13_true:
0921   0903             ;; fp++; 
0922   0903 FA FD FF      lea d, [bp + -3] ; $fp
0923   0906 2A            mov b, [d]
0924   0907 D8            push b
0925   0908 FD 77         inc b
0926   090A FA FD FF      lea d, [bp + -3] ; $fp
0927   090D FD 43         mov [d], b
0928   090F E5            pop b
0929   0910             ;; switch(*fp){ 
0930   0910             _switch14_expr:
0931   0910 FA FD FF      lea d, [bp + -3] ; $fp
0932   0913 2A            mov b, [d]
0933   0914 74            mov d, b
0934   0915 32            mov bl, [d]
0935   0916 A7 00         mov bh, 0
0936   0918             _switch14_comparisons:
0937   0918 C1 6C         cmp bl, $6c
0938   091A C6 46 09      je _switch14_case0
0939   091D C1 4C         cmp bl, $4c
0940   091F C6 46 09      je _switch14_case1
0941   0922 C1 64         cmp bl, $64
0942   0924 C6 13 0A      je _switch14_case2
0943   0927 C1 69         cmp bl, $69
0944   0929 C6 13 0A      je _switch14_case3
0945   092C C1 75         cmp bl, $75
0946   092E C6 37 0A      je _switch14_case4
0947   0931 C1 78         cmp bl, $78
0948   0933 C6 5B 0A      je _switch14_case5
0949   0936 C1 63         cmp bl, $63
0950   0938 C6 79 0A      je _switch14_case6
0951   093B C1 73         cmp bl, $73
0952   093D C6 98 0A      je _switch14_case7
0953   0940 0A B7 0A      jmp _switch14_default
0954   0943 0A C3 0A      jmp _switch14_exit
0955   0946             _switch14_case0:
0956   0946             _switch14_case1:
0957   0946             ;; fp++; 
0958   0946 FA FD FF      lea d, [bp + -3] ; $fp
0959   0949 2A            mov b, [d]
0960   094A D8            push b
0961   094B FD 77         inc b
0962   094D FA FD FF      lea d, [bp + -3] ; $fp
0963   0950 FD 43         mov [d], b
0964   0952 E5            pop b
0965   0953             ;; if(*fp == 'd' || *fp == 'i') 
0966   0953             _if15_cond:
0967   0953 FA FD FF      lea d, [bp + -3] ; $fp
0968   0956 2A            mov b, [d]
0969   0957 74            mov d, b
0970   0958 32            mov bl, [d]
0971   0959 A7 00         mov bh, 0
0972   095B             ; START RELATIONAL
0973   095B D7            push a
0974   095C 11            mov a, b
0975   095D 26 64 00      mov b, $64
0976   0960 B0            cmp a, b
0977   0961 FD 71         seq ; ==
0978   0963 E4            pop a
0979   0964             ; END RELATIONAL
0980   0964 D7            push a
0981   0965 11            mov a, b
0982   0966 FA FD FF      lea d, [bp + -3] ; $fp
0983   0969 2A            mov b, [d]
0984   096A 74            mov d, b
0985   096B 32            mov bl, [d]
0986   096C A7 00         mov bh, 0
0987   096E             ; START RELATIONAL
0988   096E D7            push a
0989   096F 11            mov a, b
0990   0970 26 69 00      mov b, $69
0991   0973 B0            cmp a, b
0992   0974 FD 71         seq ; ==
0993   0976 E4            pop a
0994   0977             ; END RELATIONAL
0995   0977 FD A8         sor a, b ; ||
0996   0979 E4            pop a
0997   097A C0 00 00      cmp b, 0
0998   097D C6 94 09      je _if15_else
0999   0980             _if15_true:
1000   0980             ;; print_signed_long(*(long *)p); 
1001   0980 FD 79         mov g, b
1002   0982 28            mov b, c
1003   0983 FD AB         swp b
1004   0985 D8            push b
1005   0986 FD 27         mov b, g
1006   0988 FD AB         swp b
1007   098A D8            push b
1008   098B 07 80 0D      call print_signed_long
1009   098E 51 04 00      add sp, 4
1010   0991 0A FE 09      jmp _if15_exit
1011   0994             _if15_else:
1012   0994             ;; if(*fp == 'u') 
1013   0994             _if16_cond:
1014   0994 FA FD FF      lea d, [bp + -3] ; $fp
1015   0997 2A            mov b, [d]
1016   0998 74            mov d, b
1017   0999 32            mov bl, [d]
1018   099A A7 00         mov bh, 0
1019   099C             ; START RELATIONAL
1020   099C D7            push a
1021   099D 11            mov a, b
1022   099E 26 75 00      mov b, $75
1023   09A1 B0            cmp a, b
1024   09A2 FD 71         seq ; ==
1025   09A4 E4            pop a
1026   09A5             ; END RELATIONAL
1027   09A5 C0 00 00      cmp b, 0
1028   09A8 C6 BF 09      je _if16_else
1029   09AB             _if16_true:
1030   09AB             ;; print_unsigned_long(*(unsigned long *)p); 
1031   09AB FD 79         mov g, b
1032   09AD 28            mov b, c
1033   09AE FD AB         swp b
1034   09B0 D8            push b
1035   09B1 FD 27         mov b, g
1036   09B3 FD AB         swp b
1037   09B5 D8            push b
1038   09B6 07 D2 0E      call print_unsigned_long
1039   09B9 51 04 00      add sp, 4
1040   09BC 0A FE 09      jmp _if16_exit
1041   09BF             _if16_else:
1042   09BF             ;; if(*fp == 'x') 
1043   09BF             _if17_cond:
1044   09BF FA FD FF      lea d, [bp + -3] ; $fp
1045   09C2 2A            mov b, [d]
1046   09C3 74            mov d, b
1047   09C4 32            mov bl, [d]
1048   09C5 A7 00         mov bh, 0
1049   09C7             ; START RELATIONAL
1050   09C7 D7            push a
1051   09C8 11            mov a, b
1052   09C9 26 78 00      mov b, $78
1053   09CC B0            cmp a, b
1054   09CD FD 71         seq ; ==
1055   09CF E4            pop a
1056   09D0             ; END RELATIONAL
1057   09D0 C0 00 00      cmp b, 0
1058   09D3 C6 F5 09      je _if17_else
1059   09D6             _if17_true:
1060   09D6             ;; printx32(*(long int *)p); 
1061   09D6 FA FF FF      lea d, [bp + -1] ; $p
1062   09D9 2A            mov b, [d]
1063   09DA 74            mov d, b
1064   09DB 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1065   09DE FD 39         mov c, b ; And place it into C
1066   09E0 2A            mov b, [d] ; Lower Word in B
1067   09E1 FD 79         mov g, b
1068   09E3 28            mov b, c
1069   09E4 FD AB         swp b
1070   09E6 D8            push b
1071   09E7 FD 27         mov b, g
1072   09E9 FD AB         swp b
1073   09EB D8            push b
1074   09EC 07 09 0B      call printx32
1075   09EF 51 04 00      add sp, 4
1076   09F2 0A FE 09      jmp _if17_exit
1077   09F5             _if17_else:
1078   09F5             ;; err("Unexpected format in printf."); 
1079   09F5 26 18 1D      mov b, __s1 ; "Unexpected format in printf."
1080   09F8 FD AB         swp b
1081   09FA D8            push b
1082   09FB 07 F4 0A      call err
1083   09FE             _if17_exit:
1084   09FE             _if16_exit:
1085   09FE             _if15_exit:
1086   09FE             ;; p = p + 4; 
1087   09FE FA FF FF      lea d, [bp + -1] ; $p
1088   0A01 DA            push d
1089   0A02 FA FF FF      lea d, [bp + -1] ; $p
1090   0A05 2A            mov b, [d]
1091   0A06             ; START TERMS
1092   0A06 D7            push a
1093   0A07 11            mov a, b
1094   0A08 26 04 00      mov b, $4
1095   0A0B 56            add b, a
1096   0A0C E4            pop a
1097   0A0D             ; END TERMS
1098   0A0D E7            pop d
1099   0A0E FD 43         mov [d], b
1100   0A10             ;; break; 
1101   0A10 0A C3 0A      jmp _switch14_exit ; case break
1102   0A13             _switch14_case2:
1103   0A13             _switch14_case3:
1104   0A13             ;; print_signed(*(int*)p); 
1105   0A13 FA FF FF      lea d, [bp + -1] ; $p
1106   0A16 2A            mov b, [d]
1107   0A17 74            mov d, b
1108   0A18 2A            mov b, [d]
1109   0A19 FD AB         swp b
1110   0A1B D8            push b
1111   0A1C 07 90 0C      call print_signed
1112   0A1F 51 02 00      add sp, 2
1113   0A22             ;; p = p + 2; 
1114   0A22 FA FF FF      lea d, [bp + -1] ; $p
1115   0A25 DA            push d
1116   0A26 FA FF FF      lea d, [bp + -1] ; $p
1117   0A29 2A            mov b, [d]
1118   0A2A             ; START TERMS
1119   0A2A D7            push a
1120   0A2B 11            mov a, b
1121   0A2C 26 02 00      mov b, $2
1122   0A2F 56            add b, a
1123   0A30 E4            pop a
1124   0A31             ; END TERMS
1125   0A31 E7            pop d
1126   0A32 FD 43         mov [d], b
1127   0A34             ;; break; 
1128   0A34 0A C3 0A      jmp _switch14_exit ; case break
1129   0A37             _switch14_case4:
1130   0A37             ;; print_unsigned(*(unsigned int*)p); 
1131   0A37 FA FF FF      lea d, [bp + -1] ; $p
1132   0A3A 2A            mov b, [d]
1133   0A3B 74            mov d, b
1134   0A3C 2A            mov b, [d]
1135   0A3D FD AB         swp b
1136   0A3F D8            push b
1137   0A40 07 CF 0F      call print_unsigned
1138   0A43 51 02 00      add sp, 2
1139   0A46             ;; p = p + 2; 
1140   0A46 FA FF FF      lea d, [bp + -1] ; $p
1141   0A49 DA            push d
1142   0A4A FA FF FF      lea d, [bp + -1] ; $p
1143   0A4D 2A            mov b, [d]
1144   0A4E             ; START TERMS
1145   0A4E D7            push a
1146   0A4F 11            mov a, b
1147   0A50 26 02 00      mov b, $2
1148   0A53 56            add b, a
1149   0A54 E4            pop a
1150   0A55             ; END TERMS
1151   0A55 E7            pop d
1152   0A56 FD 43         mov [d], b
1153   0A58             ;; break; 
1154   0A58 0A C3 0A      jmp _switch14_exit ; case break
1155   0A5B             _switch14_case5:
1156   0A5B             
1157   0A5B             ; --- BEGIN INLINE ASM BLOCK
1158   0A5B FA FF FF      lea d, [bp + -1] ; $p
1159   0A5E FD 2A         mov d, [d]
1160   0A60 2A            mov b, [d]
1161   0A61 07 22 14      call print_u16x
1162   0A64             ; --- END INLINE ASM BLOCK
1163   0A64             
1164   0A64             ;; p = p + 2; 
1165   0A64 FA FF FF      lea d, [bp + -1] ; $p
1166   0A67 DA            push d
1167   0A68 FA FF FF      lea d, [bp + -1] ; $p
1168   0A6B 2A            mov b, [d]
1169   0A6C             ; START TERMS
1170   0A6C D7            push a
1171   0A6D 11            mov a, b
1172   0A6E 26 02 00      mov b, $2
1173   0A71 56            add b, a
1174   0A72 E4            pop a
1175   0A73             ; END TERMS
1176   0A73 E7            pop d
1177   0A74 FD 43         mov [d], b
1178   0A76             ;; break; 
1179   0A76 0A C3 0A      jmp _switch14_exit ; case break
1180   0A79             _switch14_case6:
1181   0A79             
1182   0A79             ; --- BEGIN INLINE ASM BLOCK
1183   0A79 FA FF FF      lea d, [bp + -1] ; $p
1184   0A7C FD 2A         mov d, [d]
1185   0A7E 1E            mov al, [d]
1186   0A7F 23            mov ah, al
1187   0A80 07 80 12      call _putchar
1188   0A83             ; --- END INLINE ASM BLOCK
1189   0A83             
1190   0A83             ;; p = p + 2; 
1191   0A83 FA FF FF      lea d, [bp + -1] ; $p
1192   0A86 DA            push d
1193   0A87 FA FF FF      lea d, [bp + -1] ; $p
1194   0A8A 2A            mov b, [d]
1195   0A8B             ; START TERMS
1196   0A8B D7            push a
1197   0A8C 11            mov a, b
1198   0A8D 26 02 00      mov b, $2
1199   0A90 56            add b, a
1200   0A91 E4            pop a
1201   0A92             ; END TERMS
1202   0A92 E7            pop d
1203   0A93 FD 43         mov [d], b
1204   0A95             ;; break; 
1205   0A95 0A C3 0A      jmp _switch14_exit ; case break
1206   0A98             _switch14_case7:
1207   0A98             
1208   0A98             ; --- BEGIN INLINE ASM BLOCK
1209   0A98 FA FF FF      lea d, [bp + -1] ; $p
1210   0A9B FD 2A         mov d, [d]
1211   0A9D FD 2A         mov d, [d]
1212   0A9F 07 CA 13      call _puts
1213   0AA2             ; --- END INLINE ASM BLOCK
1214   0AA2             
1215   0AA2             ;; p = p + 2; 
1216   0AA2 FA FF FF      lea d, [bp + -1] ; $p
1217   0AA5 DA            push d
1218   0AA6 FA FF FF      lea d, [bp + -1] ; $p
1219   0AA9 2A            mov b, [d]
1220   0AAA             ; START TERMS
1221   0AAA D7            push a
1222   0AAB 11            mov a, b
1223   0AAC 26 02 00      mov b, $2
1224   0AAF 56            add b, a
1225   0AB0 E4            pop a
1226   0AB1             ; END TERMS
1227   0AB1 E7            pop d
1228   0AB2 FD 43         mov [d], b
1229   0AB4             ;; break; 
1230   0AB4 0A C3 0A      jmp _switch14_exit ; case break
1231   0AB7             _switch14_default:
1232   0AB7             ;; print("Error: Unknown argument type.\n"); 
1233   0AB7 26 35 1D      mov b, __s2 ; "Error: Unknown argument type.\n"
1234   0ABA FD AB         swp b
1235   0ABC D8            push b
1236   0ABD 07 E7 10      call print
1237   0AC0 51 02 00      add sp, 2
1238   0AC3             _switch14_exit:
1239   0AC3             ;; fp++; 
1240   0AC3 FA FD FF      lea d, [bp + -3] ; $fp
1241   0AC6 2A            mov b, [d]
1242   0AC7 D8            push b
1243   0AC8 FD 77         inc b
1244   0ACA FA FD FF      lea d, [bp + -3] ; $fp
1245   0ACD FD 43         mov [d], b
1246   0ACF E5            pop b
1247   0AD0 0A EF 0A      jmp _if13_exit
1248   0AD3             _if13_else:
1249   0AD3             ;; putchar(*fp); 
1250   0AD3 FA FD FF      lea d, [bp + -3] ; $fp
1251   0AD6 2A            mov b, [d]
1252   0AD7 74            mov d, b
1253   0AD8 32            mov bl, [d]
1254   0AD9 A7 00         mov bh, 0
1255   0ADB DD            push bl
1256   0ADC 07 9F 10      call putchar
1257   0ADF 51 01 00      add sp, 1
1258   0AE2             ;; fp++; 
1259   0AE2 FA FD FF      lea d, [bp + -3] ; $fp
1260   0AE5 2A            mov b, [d]
1261   0AE6 D8            push b
1262   0AE7 FD 77         inc b
1263   0AE9 FA FD FF      lea d, [bp + -3] ; $fp
1264   0AEC FD 43         mov [d], b
1265   0AEE E5            pop b
1266   0AEF             _if13_exit:
1267   0AEF             _if12_exit:
1268   0AEF             _for11_update:
1269   0AEF 0A D3 08      jmp _for11_cond
1270   0AF2             _for11_exit:
1271   0AF2 F9            leave
1272   0AF3 09            ret
1273   0AF4             
1274   0AF4             err:
1275   0AF4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1276   0AF7             ;; print(e); 
1277   0AF7 FA 05 00      lea d, [bp + 5] ; $e
1278   0AFA 2A            mov b, [d]
1279   0AFB FD AB         swp b
1280   0AFD D8            push b
1281   0AFE 07 E7 10      call print
1282   0B01 51 02 00      add sp, 2
1283   0B04             ;; exit(); 
1284   0B04 07 C8 06      call exit
1285   0B07 F9            leave
1286   0B08 09            ret
1287   0B09             
1288   0B09             printx32:
1289   0B09 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1290   0B0C             
1291   0B0C             ; --- BEGIN INLINE ASM BLOCK
1292   0B0C FA 05 00      lea d, [bp + 5] ; $hex
1293   0B0F 2B 02 00      mov b, [d+2]
1294   0B12 07 22 14      call print_u16x
1295   0B15 2A            mov b, [d]
1296   0B16 07 22 14      call print_u16x
1297   0B19             ; --- END INLINE ASM BLOCK
1298   0B19             
1299   0B19 F9            leave
1300   0B1A 09            ret
1301   0B1B             
1302   0B1B             printx16:
1303   0B1B F8 00 00      enter 0 ; (push bp; mov bp, sp)
1304   0B1E             
1305   0B1E             ; --- BEGIN INLINE ASM BLOCK
1306   0B1E FA 05 00      lea d, [bp + 5] ; $hex
1307   0B21 2A            mov b, [d]
1308   0B22 07 22 14      call print_u16x
1309   0B25             ; --- END INLINE ASM BLOCK
1310   0B25             
1311   0B25 F9            leave
1312   0B26 09            ret
1313   0B27             
1314   0B27             printx8:
1315   0B27 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1316   0B2A             
1317   0B2A             ; --- BEGIN INLINE ASM BLOCK
1318   0B2A FA 05 00      lea d, [bp + 5] ; $hex
1319   0B2D 32            mov bl, [d]
1320   0B2E 07 66 14      call print_u8x
1321   0B31             ; --- END INLINE ASM BLOCK
1322   0B31             
1323   0B31 F9            leave
1324   0B32 09            ret
1325   0B33             
1326   0B33             hex_to_int:
1327   0B33 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1328   0B36             ; $value 
1329   0B36 10 00 00      mov a, $0
1330   0B39 45 FF FF      mov [bp + -1], a
1331   0B3C             ; $i 
1332   0B3C             ; $hex_char 
1333   0B3C             ; $len 
1334   0B3C 52 07 00      sub sp, 7
1335   0B3F             ;; len = strlen(hex_string); 
1336   0B3F FA FA FF      lea d, [bp + -6] ; $len
1337   0B42 DA            push d
1338   0B43 FA 05 00      lea d, [bp + 5] ; $hex_string
1339   0B46 2A            mov b, [d]
1340   0B47 FD AB         swp b
1341   0B49 D8            push b
1342   0B4A 07 7F 06      call strlen
1343   0B4D 51 02 00      add sp, 2
1344   0B50 E7            pop d
1345   0B51 FD 43         mov [d], b
1346   0B53             ;; for (i = 0; i < len; i++) { 
1347   0B53             _for18_init:
1348   0B53 FA FD FF      lea d, [bp + -3] ; $i
1349   0B56 DA            push d
1350   0B57 26 00 00      mov b, $0
1351   0B5A E7            pop d
1352   0B5B FD 43         mov [d], b
1353   0B5D             _for18_cond:
1354   0B5D FA FD FF      lea d, [bp + -3] ; $i
1355   0B60 2A            mov b, [d]
1356   0B61             ; START RELATIONAL
1357   0B61 D7            push a
1358   0B62 11            mov a, b
1359   0B63 FA FA FF      lea d, [bp + -6] ; $len
1360   0B66 2A            mov b, [d]
1361   0B67 B0            cmp a, b
1362   0B68 FD 73         slt ; <= (signed)
1363   0B6A E4            pop a
1364   0B6B             ; END RELATIONAL
1365   0B6B C0 00 00      cmp b, 0
1366   0B6E C6 70 0C      je _for18_exit
1367   0B71             _for18_block:
1368   0B71             ;; hex_char = hex_string[i]; 
1369   0B71 FA FC FF      lea d, [bp + -4] ; $hex_char
1370   0B74 DA            push d
1371   0B75 FA 05 00      lea d, [bp + 5] ; $hex_string
1372   0B78 FD 2A         mov d, [d]
1373   0B7A D7            push a
1374   0B7B DA            push d
1375   0B7C FA FD FF      lea d, [bp + -3] ; $i
1376   0B7F 2A            mov b, [d]
1377   0B80 E7            pop d
1378   0B81 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1379   0B85 E4            pop a
1380   0B86 32            mov bl, [d]
1381   0B87 A7 00         mov bh, 0
1382   0B89 E7            pop d
1383   0B8A FD 3E         mov [d], bl
1384   0B8C             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1385   0B8C             _if19_cond:
1386   0B8C FA FC FF      lea d, [bp + -4] ; $hex_char
1387   0B8F 32            mov bl, [d]
1388   0B90 A7 00         mov bh, 0
1389   0B92             ; START RELATIONAL
1390   0B92 D7            push a
1391   0B93 11            mov a, b
1392   0B94 26 61 00      mov b, $61
1393   0B97 B0            cmp a, b
1394   0B98 FD 80         sge ; >=
1395   0B9A E4            pop a
1396   0B9B             ; END RELATIONAL
1397   0B9B D7            push a
1398   0B9C 11            mov a, b
1399   0B9D FA FC FF      lea d, [bp + -4] ; $hex_char
1400   0BA0 32            mov bl, [d]
1401   0BA1 A7 00         mov bh, 0
1402   0BA3             ; START RELATIONAL
1403   0BA3 D7            push a
1404   0BA4 11            mov a, b
1405   0BA5 26 66 00      mov b, $66
1406   0BA8 B0            cmp a, b
1407   0BA9 FD 74         sle ; <=
1408   0BAB E4            pop a
1409   0BAC             ; END RELATIONAL
1410   0BAC FD A7         sand a, b ; &&
1411   0BAE E4            pop a
1412   0BAF C0 00 00      cmp b, 0
1413   0BB2 C6 E3 0B      je _if19_else
1414   0BB5             _if19_true:
1415   0BB5             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1416   0BB5 FA FF FF      lea d, [bp + -1] ; $value
1417   0BB8 DA            push d
1418   0BB9 FA FF FF      lea d, [bp + -1] ; $value
1419   0BBC 2A            mov b, [d]
1420   0BBD             ; START FACTORS
1421   0BBD D7            push a
1422   0BBE 11            mov a, b
1423   0BBF 26 10 00      mov b, $10
1424   0BC2 AC            mul a, b ; *
1425   0BC3 11            mov a, b
1426   0BC4 27            mov b, a
1427   0BC5 E4            pop a
1428   0BC6             ; END FACTORS
1429   0BC6             ; START TERMS
1430   0BC6 D7            push a
1431   0BC7 11            mov a, b
1432   0BC8 FA FC FF      lea d, [bp + -4] ; $hex_char
1433   0BCB 32            mov bl, [d]
1434   0BCC A7 00         mov bh, 0
1435   0BCE             ; START TERMS
1436   0BCE D7            push a
1437   0BCF 11            mov a, b
1438   0BD0 26 61 00      mov b, $61
1439   0BD3 60            sub a, b
1440   0BD4 27            mov b, a
1441   0BD5 11            mov a, b
1442   0BD6 26 0A 00      mov b, $a
1443   0BD9 56            add b, a
1444   0BDA E4            pop a
1445   0BDB             ; END TERMS
1446   0BDB 56            add b, a
1447   0BDC E4            pop a
1448   0BDD             ; END TERMS
1449   0BDD E7            pop d
1450   0BDE FD 43         mov [d], b
1451   0BE0 0A 60 0C      jmp _if19_exit
1452   0BE3             _if19_else:
1453   0BE3             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1454   0BE3             _if20_cond:
1455   0BE3 FA FC FF      lea d, [bp + -4] ; $hex_char
1456   0BE6 32            mov bl, [d]
1457   0BE7 A7 00         mov bh, 0
1458   0BE9             ; START RELATIONAL
1459   0BE9 D7            push a
1460   0BEA 11            mov a, b
1461   0BEB 26 41 00      mov b, $41
1462   0BEE B0            cmp a, b
1463   0BEF FD 80         sge ; >=
1464   0BF1 E4            pop a
1465   0BF2             ; END RELATIONAL
1466   0BF2 D7            push a
1467   0BF3 11            mov a, b
1468   0BF4 FA FC FF      lea d, [bp + -4] ; $hex_char
1469   0BF7 32            mov bl, [d]
1470   0BF8 A7 00         mov bh, 0
1471   0BFA             ; START RELATIONAL
1472   0BFA D7            push a
1473   0BFB 11            mov a, b
1474   0BFC 26 46 00      mov b, $46
1475   0BFF B0            cmp a, b
1476   0C00 FD 74         sle ; <=
1477   0C02 E4            pop a
1478   0C03             ; END RELATIONAL
1479   0C03 FD A7         sand a, b ; &&
1480   0C05 E4            pop a
1481   0C06 C0 00 00      cmp b, 0
1482   0C09 C6 3A 0C      je _if20_else
1483   0C0C             _if20_true:
1484   0C0C             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1485   0C0C FA FF FF      lea d, [bp + -1] ; $value
1486   0C0F DA            push d
1487   0C10 FA FF FF      lea d, [bp + -1] ; $value
1488   0C13 2A            mov b, [d]
1489   0C14             ; START FACTORS
1490   0C14 D7            push a
1491   0C15 11            mov a, b
1492   0C16 26 10 00      mov b, $10
1493   0C19 AC            mul a, b ; *
1494   0C1A 11            mov a, b
1495   0C1B 27            mov b, a
1496   0C1C E4            pop a
1497   0C1D             ; END FACTORS
1498   0C1D             ; START TERMS
1499   0C1D D7            push a
1500   0C1E 11            mov a, b
1501   0C1F FA FC FF      lea d, [bp + -4] ; $hex_char
1502   0C22 32            mov bl, [d]
1503   0C23 A7 00         mov bh, 0
1504   0C25             ; START TERMS
1505   0C25 D7            push a
1506   0C26 11            mov a, b
1507   0C27 26 41 00      mov b, $41
1508   0C2A 60            sub a, b
1509   0C2B 27            mov b, a
1510   0C2C 11            mov a, b
1511   0C2D 26 0A 00      mov b, $a
1512   0C30 56            add b, a
1513   0C31 E4            pop a
1514   0C32             ; END TERMS
1515   0C32 56            add b, a
1516   0C33 E4            pop a
1517   0C34             ; END TERMS
1518   0C34 E7            pop d
1519   0C35 FD 43         mov [d], b
1520   0C37 0A 60 0C      jmp _if20_exit
1521   0C3A             _if20_else:
1522   0C3A             ;; value = (value * 16) + (hex_char - '0'); 
1523   0C3A FA FF FF      lea d, [bp + -1] ; $value
1524   0C3D DA            push d
1525   0C3E FA FF FF      lea d, [bp + -1] ; $value
1526   0C41 2A            mov b, [d]
1527   0C42             ; START FACTORS
1528   0C42 D7            push a
1529   0C43 11            mov a, b
1530   0C44 26 10 00      mov b, $10
1531   0C47 AC            mul a, b ; *
1532   0C48 11            mov a, b
1533   0C49 27            mov b, a
1534   0C4A E4            pop a
1535   0C4B             ; END FACTORS
1536   0C4B             ; START TERMS
1537   0C4B D7            push a
1538   0C4C 11            mov a, b
1539   0C4D FA FC FF      lea d, [bp + -4] ; $hex_char
1540   0C50 32            mov bl, [d]
1541   0C51 A7 00         mov bh, 0
1542   0C53             ; START TERMS
1543   0C53 D7            push a
1544   0C54 11            mov a, b
1545   0C55 26 30 00      mov b, $30
1546   0C58 60            sub a, b
1547   0C59 27            mov b, a
1548   0C5A E4            pop a
1549   0C5B             ; END TERMS
1550   0C5B 56            add b, a
1551   0C5C E4            pop a
1552   0C5D             ; END TERMS
1553   0C5D E7            pop d
1554   0C5E FD 43         mov [d], b
1555   0C60             _if20_exit:
1556   0C60             _if19_exit:
1557   0C60             _for18_update:
1558   0C60 FA FD FF      lea d, [bp + -3] ; $i
1559   0C63 2A            mov b, [d]
1560   0C64 D8            push b
1561   0C65 FD 77         inc b
1562   0C67 FA FD FF      lea d, [bp + -3] ; $i
1563   0C6A FD 43         mov [d], b
1564   0C6C E5            pop b
1565   0C6D 0A 5D 0B      jmp _for18_cond
1566   0C70             _for18_exit:
1567   0C70             ;; return value; 
1568   0C70 FA FF FF      lea d, [bp + -1] ; $value
1569   0C73 2A            mov b, [d]
1570   0C74 F9            leave
1571   0C75 09            ret
1572   0C76             
1573   0C76             gets:
1574   0C76 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1575   0C79             
1576   0C79             ; --- BEGIN INLINE ASM BLOCK
1577   0C79 FA 05 00      lea d, [bp + 5] ; $s
1578   0C7C 15            mov a, [d]
1579   0C7D 3C            mov d, a
1580   0C7E 07 87 12      call _gets
1581   0C81             ; --- END INLINE ASM BLOCK
1582   0C81             
1583   0C81             ;; return strlen(s); 
1584   0C81 FA 05 00      lea d, [bp + 5] ; $s
1585   0C84 2A            mov b, [d]
1586   0C85 FD AB         swp b
1587   0C87 D8            push b
1588   0C88 07 7F 06      call strlen
1589   0C8B 51 02 00      add sp, 2
1590   0C8E F9            leave
1591   0C8F 09            ret
1592   0C90             
1593   0C90             print_signed:
1594   0C90 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1595   0C93             ; $digits 
1596   0C93             ; $i 
1597   0C93 10 00 00      mov a, $0
1598   0C96 45 FA FF      mov [bp + -6], a
1599   0C99 52 07 00      sub sp, 7
1600   0C9C             ;; if (num < 0) { 
1601   0C9C             _if21_cond:
1602   0C9C FA 05 00      lea d, [bp + 5] ; $num
1603   0C9F 2A            mov b, [d]
1604   0CA0             ; START RELATIONAL
1605   0CA0 D7            push a
1606   0CA1 11            mov a, b
1607   0CA2 26 00 00      mov b, $0
1608   0CA5 B0            cmp a, b
1609   0CA6 FD 73         slt ; <= (signed)
1610   0CA8 E4            pop a
1611   0CA9             ; END RELATIONAL
1612   0CA9 C0 00 00      cmp b, 0
1613   0CAC C6 C9 0C      je _if21_else
1614   0CAF             _if21_true:
1615   0CAF             ;; putchar('-'); 
1616   0CAF 26 2D 00      mov b, $2d
1617   0CB2 DD            push bl
1618   0CB3 07 9F 10      call putchar
1619   0CB6 51 01 00      add sp, 1
1620   0CB9             ;; num = -num; 
1621   0CB9 FA 05 00      lea d, [bp + 5] ; $num
1622   0CBC DA            push d
1623   0CBD FA 05 00      lea d, [bp + 5] ; $num
1624   0CC0 2A            mov b, [d]
1625   0CC1 FD 97         neg b
1626   0CC3 E7            pop d
1627   0CC4 FD 43         mov [d], b
1628   0CC6 0A EB 0C      jmp _if21_exit
1629   0CC9             _if21_else:
1630   0CC9             ;; if (num == 0) { 
1631   0CC9             _if22_cond:
1632   0CC9 FA 05 00      lea d, [bp + 5] ; $num
1633   0CCC 2A            mov b, [d]
1634   0CCD             ; START RELATIONAL
1635   0CCD D7            push a
1636   0CCE 11            mov a, b
1637   0CCF 26 00 00      mov b, $0
1638   0CD2 B0            cmp a, b
1639   0CD3 FD 71         seq ; ==
1640   0CD5 E4            pop a
1641   0CD6             ; END RELATIONAL
1642   0CD6 C0 00 00      cmp b, 0
1643   0CD9 C6 EB 0C      je _if22_exit
1644   0CDC             _if22_true:
1645   0CDC             ;; putchar('0'); 
1646   0CDC 26 30 00      mov b, $30
1647   0CDF DD            push bl
1648   0CE0 07 9F 10      call putchar
1649   0CE3 51 01 00      add sp, 1
1650   0CE6             ;; return; 
1651   0CE6 F9            leave
1652   0CE7 09            ret
1653   0CE8 0A EB 0C      jmp _if22_exit
1654   0CEB             _if22_exit:
1655   0CEB             _if21_exit:
1656   0CEB             ;; while (num > 0) { 
1657   0CEB             _while23_cond:
1658   0CEB FA 05 00      lea d, [bp + 5] ; $num
1659   0CEE 2A            mov b, [d]
1660   0CEF             ; START RELATIONAL
1661   0CEF D7            push a
1662   0CF0 11            mov a, b
1663   0CF1 26 00 00      mov b, $0
1664   0CF4 B0            cmp a, b
1665   0CF5 FD 7F         sgt ; >
1666   0CF7 E4            pop a
1667   0CF8             ; END RELATIONAL
1668   0CF8 C0 00 00      cmp b, 0
1669   0CFB C6 45 0D      je _while23_exit
1670   0CFE             _while23_block:
1671   0CFE             ;; digits[i] = '0' + (num % 10); 
1672   0CFE FA FC FF      lea d, [bp + -4] ; $digits
1673   0D01 D7            push a
1674   0D02 DA            push d
1675   0D03 FA FA FF      lea d, [bp + -6] ; $i
1676   0D06 2A            mov b, [d]
1677   0D07 E7            pop d
1678   0D08 5A            add d, b
1679   0D09 E4            pop a
1680   0D0A DA            push d
1681   0D0B 26 30 00      mov b, $30
1682   0D0E             ; START TERMS
1683   0D0E D7            push a
1684   0D0F 11            mov a, b
1685   0D10 FA 05 00      lea d, [bp + 5] ; $num
1686   0D13 2A            mov b, [d]
1687   0D14             ; START FACTORS
1688   0D14 D7            push a
1689   0D15 11            mov a, b
1690   0D16 26 0A 00      mov b, $a
1691   0D19 AE            div a, b ; 
1692   0D1A 11            mov a, b
1693   0D1B 27            mov b, a
1694   0D1C E4            pop a
1695   0D1D             ; END FACTORS
1696   0D1D 56            add b, a
1697   0D1E E4            pop a
1698   0D1F             ; END TERMS
1699   0D1F E7            pop d
1700   0D20 FD 3E         mov [d], bl
1701   0D22             ;; num = num / 10; 
1702   0D22 FA 05 00      lea d, [bp + 5] ; $num
1703   0D25 DA            push d
1704   0D26 FA 05 00      lea d, [bp + 5] ; $num
1705   0D29 2A            mov b, [d]
1706   0D2A             ; START FACTORS
1707   0D2A D7            push a
1708   0D2B 11            mov a, b
1709   0D2C 26 0A 00      mov b, $a
1710   0D2F AE            div a, b
1711   0D30 27            mov b, a
1712   0D31 E4            pop a
1713   0D32             ; END FACTORS
1714   0D32 E7            pop d
1715   0D33 FD 43         mov [d], b
1716   0D35             ;; i++; 
1717   0D35 FA FA FF      lea d, [bp + -6] ; $i
1718   0D38 2A            mov b, [d]
1719   0D39 D8            push b
1720   0D3A FD 77         inc b
1721   0D3C FA FA FF      lea d, [bp + -6] ; $i
1722   0D3F FD 43         mov [d], b
1723   0D41 E5            pop b
1724   0D42 0A EB 0C      jmp _while23_cond
1725   0D45             _while23_exit:
1726   0D45             ;; while (i > 0) { 
1727   0D45             _while24_cond:
1728   0D45 FA FA FF      lea d, [bp + -6] ; $i
1729   0D48 2A            mov b, [d]
1730   0D49             ; START RELATIONAL
1731   0D49 D7            push a
1732   0D4A 11            mov a, b
1733   0D4B 26 00 00      mov b, $0
1734   0D4E B0            cmp a, b
1735   0D4F FD 7F         sgt ; >
1736   0D51 E4            pop a
1737   0D52             ; END RELATIONAL
1738   0D52 C0 00 00      cmp b, 0
1739   0D55 C6 7E 0D      je _while24_exit
1740   0D58             _while24_block:
1741   0D58             ;; i--; 
1742   0D58 FA FA FF      lea d, [bp + -6] ; $i
1743   0D5B 2A            mov b, [d]
1744   0D5C D8            push b
1745   0D5D FD 7D         dec b
1746   0D5F FA FA FF      lea d, [bp + -6] ; $i
1747   0D62 FD 43         mov [d], b
1748   0D64 E5            pop b
1749   0D65             ;; putchar(digits[i]); 
1750   0D65 FA FC FF      lea d, [bp + -4] ; $digits
1751   0D68 D7            push a
1752   0D69 DA            push d
1753   0D6A FA FA FF      lea d, [bp + -6] ; $i
1754   0D6D 2A            mov b, [d]
1755   0D6E E7            pop d
1756   0D6F 5A            add d, b
1757   0D70 E4            pop a
1758   0D71 32            mov bl, [d]
1759   0D72 A7 00         mov bh, 0
1760   0D74 DD            push bl
1761   0D75 07 9F 10      call putchar
1762   0D78 51 01 00      add sp, 1
1763   0D7B 0A 45 0D      jmp _while24_cond
1764   0D7E             _while24_exit:
1765   0D7E F9            leave
1766   0D7F 09            ret
1767   0D80             
1768   0D80             print_signed_long:
1769   0D80 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1770   0D83             ; $digits 
1771   0D83             ; $i 
1772   0D83 10 00 00      mov a, $0
1773   0D86 45 F5 FF      mov [bp + -11], a
1774   0D89 52 0C 00      sub sp, 12
1775   0D8C             ;; if (num < 0) { 
1776   0D8C             _if25_cond:
1777   0D8C FA 05 00      lea d, [bp + 5] ; $num
1778   0D8F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1779   0D92 FD 39         mov c, b ; And place it into C
1780   0D94 2A            mov b, [d] ; Lower Word in B
1781   0D95             ; START RELATIONAL
1782   0D95 D7            push a
1783   0D96 FD D8         push g
1784   0D98 11            mov a, b
1785   0D99 FD 7A         mov g, c
1786   0D9B 26 00 00      mov b, $0
1787   0D9E 4D            mov si, a
1788   0D9F 11            mov a, b
1789   0DA0 4F            mov di, a
1790   0DA1 FD 12         mov a, g
1791   0DA3 28            mov b, c
1792   0DA4 B0            cmp a, b
1793   0DA5 FD 75         slu ; <
1794   0DA7 D8            push b
1795   0DA8 28            mov b, c
1796   0DA9 FD 71         seq ; ==
1797   0DAB D8            push b
1798   0DAC 50            mov a, di
1799   0DAD 27            mov b, a
1800   0DAE 4E            mov a, si
1801   0DAF B0            cmp a, b
1802   0DB0 FD 75         slu ; <
1803   0DB2 E4            pop a
1804   0DB3 FD 92         and b, a
1805   0DB5 E4            pop a
1806   0DB6 FD 70         or b, a
1807   0DB8               
1808   0DB8 FD F1         pop g
1809   0DBA E4            pop a
1810   0DBB             ; END RELATIONAL
1811   0DBB C0 00 00      cmp b, 0
1812   0DBE C6 E5 0D      je _if25_else
1813   0DC1             _if25_true:
1814   0DC1             ;; putchar('-'); 
1815   0DC1 26 2D 00      mov b, $2d
1816   0DC4 DD            push bl
1817   0DC5 07 9F 10      call putchar
1818   0DC8 51 01 00      add sp, 1
1819   0DCB             ;; num = -num; 
1820   0DCB FA 05 00      lea d, [bp + 5] ; $num
1821   0DCE DA            push d
1822   0DCF FA 05 00      lea d, [bp + 5] ; $num
1823   0DD2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1824   0DD5 FD 39         mov c, b ; And place it into C
1825   0DD7 2A            mov b, [d] ; Lower Word in B
1826   0DD8 FD 97         neg b
1827   0DDA E7            pop d
1828   0DDB FD 43         mov [d], b
1829   0DDD 28            mov b, c
1830   0DDE FD 44 02 00   mov [d + 2], b
1831   0DE2 0A 1C 0E      jmp _if25_exit
1832   0DE5             _if25_else:
1833   0DE5             ;; if (num == 0) { 
1834   0DE5             _if26_cond:
1835   0DE5 FA 05 00      lea d, [bp + 5] ; $num
1836   0DE8 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1837   0DEB FD 39         mov c, b ; And place it into C
1838   0DED 2A            mov b, [d] ; Lower Word in B
1839   0DEE             ; START RELATIONAL
1840   0DEE D7            push a
1841   0DEF FD D8         push g
1842   0DF1 11            mov a, b
1843   0DF2 FD 7A         mov g, c
1844   0DF4 26 00 00      mov b, $0
1845   0DF7 B0            cmp a, b
1846   0DF8 FD 71         seq ; ==
1847   0DFA D8            push b
1848   0DFB 12            mov a, c
1849   0DFC FD 27         mov b, g
1850   0DFE B0            cmp a, b
1851   0DFF FD 71         seq ; ==
1852   0E01 E4            pop a
1853   0E02 FD A7         sand a, b
1854   0E04 FD F1         pop g
1855   0E06 E4            pop a
1856   0E07             ; END RELATIONAL
1857   0E07 C0 00 00      cmp b, 0
1858   0E0A C6 1C 0E      je _if26_exit
1859   0E0D             _if26_true:
1860   0E0D             ;; putchar('0'); 
1861   0E0D 26 30 00      mov b, $30
1862   0E10 DD            push bl
1863   0E11 07 9F 10      call putchar
1864   0E14 51 01 00      add sp, 1
1865   0E17             ;; return; 
1866   0E17 F9            leave
1867   0E18 09            ret
1868   0E19 0A 1C 0E      jmp _if26_exit
1869   0E1C             _if26_exit:
1870   0E1C             _if25_exit:
1871   0E1C             ;; while (num > 0) { 
1872   0E1C             _while27_cond:
1873   0E1C FA 05 00      lea d, [bp + 5] ; $num
1874   0E1F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1875   0E22 FD 39         mov c, b ; And place it into C
1876   0E24 2A            mov b, [d] ; Lower Word in B
1877   0E25             ; START RELATIONAL
1878   0E25 D7            push a
1879   0E26 FD D8         push g
1880   0E28 11            mov a, b
1881   0E29 FD 7A         mov g, c
1882   0E2B 26 00 00      mov b, $0
1883   0E2E B0            cmp a, b
1884   0E2F FD 7F         sgt ; >
1885   0E31 FD F1         pop g
1886   0E33 E4            pop a
1887   0E34             ; END RELATIONAL
1888   0E34 C0 00 00      cmp b, 0
1889   0E37 C6 97 0E      je _while27_exit
1890   0E3A             _while27_block:
1891   0E3A             ;; digits[i] = '0' + (num % 10); 
1892   0E3A FA F7 FF      lea d, [bp + -9] ; $digits
1893   0E3D D7            push a
1894   0E3E DA            push d
1895   0E3F FA F5 FF      lea d, [bp + -11] ; $i
1896   0E42 2A            mov b, [d]
1897   0E43 E7            pop d
1898   0E44 5A            add d, b
1899   0E45 E4            pop a
1900   0E46 DA            push d
1901   0E47 26 30 00      mov b, $30
1902   0E4A             ; START TERMS
1903   0E4A D7            push a
1904   0E4B 11            mov a, b
1905   0E4C FA 05 00      lea d, [bp + 5] ; $num
1906   0E4F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1907   0E52 FD 39         mov c, b ; And place it into C
1908   0E54 2A            mov b, [d] ; Lower Word in B
1909   0E55             ; START FACTORS
1910   0E55 D7            push a
1911   0E56 11            mov a, b
1912   0E57 26 0A 00      mov b, $a
1913   0E5A AE            div a, b ; 
1914   0E5B 11            mov a, b
1915   0E5C 27            mov b, a
1916   0E5D E4            pop a
1917   0E5E             ; END FACTORS
1918   0E5E 54            add a, b
1919   0E5F D7            push a
1920   0E60 FD 12         mov a, g
1921   0E62 28            mov b, c
1922   0E63 5C            adc a, b
1923   0E64 39            mov c, a
1924   0E65 E5            pop b
1925   0E66 E4            pop a
1926   0E67             ; END TERMS
1927   0E67 E7            pop d
1928   0E68 FD 3E         mov [d], bl
1929   0E6A             ;; num = num / 10; 
1930   0E6A FA 05 00      lea d, [bp + 5] ; $num
1931   0E6D DA            push d
1932   0E6E FA 05 00      lea d, [bp + 5] ; $num
1933   0E71 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1934   0E74 FD 39         mov c, b ; And place it into C
1935   0E76 2A            mov b, [d] ; Lower Word in B
1936   0E77             ; START FACTORS
1937   0E77 D7            push a
1938   0E78 11            mov a, b
1939   0E79 26 0A 00      mov b, $a
1940   0E7C AE            div a, b
1941   0E7D 27            mov b, a
1942   0E7E E4            pop a
1943   0E7F             ; END FACTORS
1944   0E7F E7            pop d
1945   0E80 FD 43         mov [d], b
1946   0E82 28            mov b, c
1947   0E83 FD 44 02 00   mov [d + 2], b
1948   0E87             ;; i++; 
1949   0E87 FA F5 FF      lea d, [bp + -11] ; $i
1950   0E8A 2A            mov b, [d]
1951   0E8B D8            push b
1952   0E8C FD 77         inc b
1953   0E8E FA F5 FF      lea d, [bp + -11] ; $i
1954   0E91 FD 43         mov [d], b
1955   0E93 E5            pop b
1956   0E94 0A 1C 0E      jmp _while27_cond
1957   0E97             _while27_exit:
1958   0E97             ;; while (i > 0) { 
1959   0E97             _while28_cond:
1960   0E97 FA F5 FF      lea d, [bp + -11] ; $i
1961   0E9A 2A            mov b, [d]
1962   0E9B             ; START RELATIONAL
1963   0E9B D7            push a
1964   0E9C 11            mov a, b
1965   0E9D 26 00 00      mov b, $0
1966   0EA0 B0            cmp a, b
1967   0EA1 FD 7F         sgt ; >
1968   0EA3 E4            pop a
1969   0EA4             ; END RELATIONAL
1970   0EA4 C0 00 00      cmp b, 0
1971   0EA7 C6 D0 0E      je _while28_exit
1972   0EAA             _while28_block:
1973   0EAA             ;; i--; 
1974   0EAA FA F5 FF      lea d, [bp + -11] ; $i
1975   0EAD 2A            mov b, [d]
1976   0EAE D8            push b
1977   0EAF FD 7D         dec b
1978   0EB1 FA F5 FF      lea d, [bp + -11] ; $i
1979   0EB4 FD 43         mov [d], b
1980   0EB6 E5            pop b
1981   0EB7             ;; putchar(digits[i]); 
1982   0EB7 FA F7 FF      lea d, [bp + -9] ; $digits
1983   0EBA D7            push a
1984   0EBB DA            push d
1985   0EBC FA F5 FF      lea d, [bp + -11] ; $i
1986   0EBF 2A            mov b, [d]
1987   0EC0 E7            pop d
1988   0EC1 5A            add d, b
1989   0EC2 E4            pop a
1990   0EC3 32            mov bl, [d]
1991   0EC4 A7 00         mov bh, 0
1992   0EC6 DD            push bl
1993   0EC7 07 9F 10      call putchar
1994   0ECA 51 01 00      add sp, 1
1995   0ECD 0A 97 0E      jmp _while28_cond
1996   0ED0             _while28_exit:
1997   0ED0 F9            leave
1998   0ED1 09            ret
1999   0ED2             
2000   0ED2             print_unsigned_long:
2001   0ED2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2002   0ED5             ; $digits 
2003   0ED5             ; $i 
2004   0ED5 52 0C 00      sub sp, 12
2005   0ED8             ;; i = 0; 
2006   0ED8 FA F5 FF      lea d, [bp + -11] ; $i
2007   0EDB DA            push d
2008   0EDC 26 00 00      mov b, $0
2009   0EDF E7            pop d
2010   0EE0 FD 43         mov [d], b
2011   0EE2             ;; if(num == 0){ 
2012   0EE2             _if29_cond:
2013   0EE2 FA 05 00      lea d, [bp + 5] ; $num
2014   0EE5 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2015   0EE8 FD 39         mov c, b ; And place it into C
2016   0EEA 2A            mov b, [d] ; Lower Word in B
2017   0EEB             ; START RELATIONAL
2018   0EEB D7            push a
2019   0EEC FD D8         push g
2020   0EEE 11            mov a, b
2021   0EEF FD 7A         mov g, c
2022   0EF1 26 00 00      mov b, $0
2023   0EF4 B0            cmp a, b
2024   0EF5 FD 71         seq ; ==
2025   0EF7 D8            push b
2026   0EF8 12            mov a, c
2027   0EF9 FD 27         mov b, g
2028   0EFB B0            cmp a, b
2029   0EFC FD 71         seq ; ==
2030   0EFE E4            pop a
2031   0EFF FD A7         sand a, b
2032   0F01 FD F1         pop g
2033   0F03 E4            pop a
2034   0F04             ; END RELATIONAL
2035   0F04 C0 00 00      cmp b, 0
2036   0F07 C6 19 0F      je _if29_exit
2037   0F0A             _if29_true:
2038   0F0A             ;; putchar('0'); 
2039   0F0A 26 30 00      mov b, $30
2040   0F0D DD            push bl
2041   0F0E 07 9F 10      call putchar
2042   0F11 51 01 00      add sp, 1
2043   0F14             ;; return; 
2044   0F14 F9            leave
2045   0F15 09            ret
2046   0F16 0A 19 0F      jmp _if29_exit
2047   0F19             _if29_exit:
2048   0F19             ;; while (num > 0) { 
2049   0F19             _while30_cond:
2050   0F19 FA 05 00      lea d, [bp + 5] ; $num
2051   0F1C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2052   0F1F FD 39         mov c, b ; And place it into C
2053   0F21 2A            mov b, [d] ; Lower Word in B
2054   0F22             ; START RELATIONAL
2055   0F22 D7            push a
2056   0F23 FD D8         push g
2057   0F25 11            mov a, b
2058   0F26 FD 7A         mov g, c
2059   0F28 26 00 00      mov b, $0
2060   0F2B B0            cmp a, b
2061   0F2C FD 81         sgu ; > (unsigned)
2062   0F2E FD F1         pop g
2063   0F30 E4            pop a
2064   0F31             ; END RELATIONAL
2065   0F31 C0 00 00      cmp b, 0
2066   0F34 C6 94 0F      je _while30_exit
2067   0F37             _while30_block:
2068   0F37             ;; digits[i] = '0' + (num % 10); 
2069   0F37 FA F7 FF      lea d, [bp + -9] ; $digits
2070   0F3A D7            push a
2071   0F3B DA            push d
2072   0F3C FA F5 FF      lea d, [bp + -11] ; $i
2073   0F3F 2A            mov b, [d]
2074   0F40 E7            pop d
2075   0F41 5A            add d, b
2076   0F42 E4            pop a
2077   0F43 DA            push d
2078   0F44 26 30 00      mov b, $30
2079   0F47             ; START TERMS
2080   0F47 D7            push a
2081   0F48 11            mov a, b
2082   0F49 FA 05 00      lea d, [bp + 5] ; $num
2083   0F4C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2084   0F4F FD 39         mov c, b ; And place it into C
2085   0F51 2A            mov b, [d] ; Lower Word in B
2086   0F52             ; START FACTORS
2087   0F52 D7            push a
2088   0F53 11            mov a, b
2089   0F54 26 0A 00      mov b, $a
2090   0F57 AE            div a, b ; 
2091   0F58 11            mov a, b
2092   0F59 27            mov b, a
2093   0F5A E4            pop a
2094   0F5B             ; END FACTORS
2095   0F5B 54            add a, b
2096   0F5C D7            push a
2097   0F5D FD 12         mov a, g
2098   0F5F 28            mov b, c
2099   0F60 5C            adc a, b
2100   0F61 39            mov c, a
2101   0F62 E5            pop b
2102   0F63 E4            pop a
2103   0F64             ; END TERMS
2104   0F64 E7            pop d
2105   0F65 FD 3E         mov [d], bl
2106   0F67             ;; num = num / 10; 
2107   0F67 FA 05 00      lea d, [bp + 5] ; $num
2108   0F6A DA            push d
2109   0F6B FA 05 00      lea d, [bp + 5] ; $num
2110   0F6E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2111   0F71 FD 39         mov c, b ; And place it into C
2112   0F73 2A            mov b, [d] ; Lower Word in B
2113   0F74             ; START FACTORS
2114   0F74 D7            push a
2115   0F75 11            mov a, b
2116   0F76 26 0A 00      mov b, $a
2117   0F79 AE            div a, b
2118   0F7A 27            mov b, a
2119   0F7B E4            pop a
2120   0F7C             ; END FACTORS
2121   0F7C E7            pop d
2122   0F7D FD 43         mov [d], b
2123   0F7F 28            mov b, c
2124   0F80 FD 44 02 00   mov [d + 2], b
2125   0F84             ;; i++; 
2126   0F84 FA F5 FF      lea d, [bp + -11] ; $i
2127   0F87 2A            mov b, [d]
2128   0F88 D8            push b
2129   0F89 FD 77         inc b
2130   0F8B FA F5 FF      lea d, [bp + -11] ; $i
2131   0F8E FD 43         mov [d], b
2132   0F90 E5            pop b
2133   0F91 0A 19 0F      jmp _while30_cond
2134   0F94             _while30_exit:
2135   0F94             ;; while (i > 0) { 
2136   0F94             _while31_cond:
2137   0F94 FA F5 FF      lea d, [bp + -11] ; $i
2138   0F97 2A            mov b, [d]
2139   0F98             ; START RELATIONAL
2140   0F98 D7            push a
2141   0F99 11            mov a, b
2142   0F9A 26 00 00      mov b, $0
2143   0F9D B0            cmp a, b
2144   0F9E FD 7F         sgt ; >
2145   0FA0 E4            pop a
2146   0FA1             ; END RELATIONAL
2147   0FA1 C0 00 00      cmp b, 0
2148   0FA4 C6 CD 0F      je _while31_exit
2149   0FA7             _while31_block:
2150   0FA7             ;; i--; 
2151   0FA7 FA F5 FF      lea d, [bp + -11] ; $i
2152   0FAA 2A            mov b, [d]
2153   0FAB D8            push b
2154   0FAC FD 7D         dec b
2155   0FAE FA F5 FF      lea d, [bp + -11] ; $i
2156   0FB1 FD 43         mov [d], b
2157   0FB3 E5            pop b
2158   0FB4             ;; putchar(digits[i]); 
2159   0FB4 FA F7 FF      lea d, [bp + -9] ; $digits
2160   0FB7 D7            push a
2161   0FB8 DA            push d
2162   0FB9 FA F5 FF      lea d, [bp + -11] ; $i
2163   0FBC 2A            mov b, [d]
2164   0FBD E7            pop d
2165   0FBE 5A            add d, b
2166   0FBF E4            pop a
2167   0FC0 32            mov bl, [d]
2168   0FC1 A7 00         mov bh, 0
2169   0FC3 DD            push bl
2170   0FC4 07 9F 10      call putchar
2171   0FC7 51 01 00      add sp, 1
2172   0FCA 0A 94 0F      jmp _while31_cond
2173   0FCD             _while31_exit:
2174   0FCD F9            leave
2175   0FCE 09            ret
2176   0FCF             
2177   0FCF             print_unsigned:
2178   0FCF F8 00 00      enter 0 ; (push bp; mov bp, sp)
2179   0FD2             ; $digits 
2180   0FD2             ; $i 
2181   0FD2 52 07 00      sub sp, 7
2182   0FD5             ;; i = 0; 
2183   0FD5 FA FA FF      lea d, [bp + -6] ; $i
2184   0FD8 DA            push d
2185   0FD9 26 00 00      mov b, $0
2186   0FDC E7            pop d
2187   0FDD FD 43         mov [d], b
2188   0FDF             ;; if(num == 0){ 
2189   0FDF             _if32_cond:
2190   0FDF FA 05 00      lea d, [bp + 5] ; $num
2191   0FE2 2A            mov b, [d]
2192   0FE3             ; START RELATIONAL
2193   0FE3 D7            push a
2194   0FE4 11            mov a, b
2195   0FE5 26 00 00      mov b, $0
2196   0FE8 B0            cmp a, b
2197   0FE9 FD 71         seq ; ==
2198   0FEB E4            pop a
2199   0FEC             ; END RELATIONAL
2200   0FEC C0 00 00      cmp b, 0
2201   0FEF C6 01 10      je _if32_exit
2202   0FF2             _if32_true:
2203   0FF2             ;; putchar('0'); 
2204   0FF2 26 30 00      mov b, $30
2205   0FF5 DD            push bl
2206   0FF6 07 9F 10      call putchar
2207   0FF9 51 01 00      add sp, 1
2208   0FFC             ;; return; 
2209   0FFC F9            leave
2210   0FFD 09            ret
2211   0FFE 0A 01 10      jmp _if32_exit
2212   1001             _if32_exit:
2213   1001             ;; while (num > 0) { 
2214   1001             _while33_cond:
2215   1001 FA 05 00      lea d, [bp + 5] ; $num
2216   1004 2A            mov b, [d]
2217   1005             ; START RELATIONAL
2218   1005 D7            push a
2219   1006 11            mov a, b
2220   1007 26 00 00      mov b, $0
2221   100A B0            cmp a, b
2222   100B FD 81         sgu ; > (unsigned)
2223   100D E4            pop a
2224   100E             ; END RELATIONAL
2225   100E C0 00 00      cmp b, 0
2226   1011 C6 5B 10      je _while33_exit
2227   1014             _while33_block:
2228   1014             ;; digits[i] = '0' + (num % 10); 
2229   1014 FA FC FF      lea d, [bp + -4] ; $digits
2230   1017 D7            push a
2231   1018 DA            push d
2232   1019 FA FA FF      lea d, [bp + -6] ; $i
2233   101C 2A            mov b, [d]
2234   101D E7            pop d
2235   101E 5A            add d, b
2236   101F E4            pop a
2237   1020 DA            push d
2238   1021 26 30 00      mov b, $30
2239   1024             ; START TERMS
2240   1024 D7            push a
2241   1025 11            mov a, b
2242   1026 FA 05 00      lea d, [bp + 5] ; $num
2243   1029 2A            mov b, [d]
2244   102A             ; START FACTORS
2245   102A D7            push a
2246   102B 11            mov a, b
2247   102C 26 0A 00      mov b, $a
2248   102F AE            div a, b ; 
2249   1030 11            mov a, b
2250   1031 27            mov b, a
2251   1032 E4            pop a
2252   1033             ; END FACTORS
2253   1033 56            add b, a
2254   1034 E4            pop a
2255   1035             ; END TERMS
2256   1035 E7            pop d
2257   1036 FD 3E         mov [d], bl
2258   1038             ;; num = num / 10; 
2259   1038 FA 05 00      lea d, [bp + 5] ; $num
2260   103B DA            push d
2261   103C FA 05 00      lea d, [bp + 5] ; $num
2262   103F 2A            mov b, [d]
2263   1040             ; START FACTORS
2264   1040 D7            push a
2265   1041 11            mov a, b
2266   1042 26 0A 00      mov b, $a
2267   1045 AE            div a, b
2268   1046 27            mov b, a
2269   1047 E4            pop a
2270   1048             ; END FACTORS
2271   1048 E7            pop d
2272   1049 FD 43         mov [d], b
2273   104B             ;; i++; 
2274   104B FA FA FF      lea d, [bp + -6] ; $i
2275   104E 2A            mov b, [d]
2276   104F D8            push b
2277   1050 FD 77         inc b
2278   1052 FA FA FF      lea d, [bp + -6] ; $i
2279   1055 FD 43         mov [d], b
2280   1057 E5            pop b
2281   1058 0A 01 10      jmp _while33_cond
2282   105B             _while33_exit:
2283   105B             ;; while (i > 0) { 
2284   105B             _while34_cond:
2285   105B FA FA FF      lea d, [bp + -6] ; $i
2286   105E 2A            mov b, [d]
2287   105F             ; START RELATIONAL
2288   105F D7            push a
2289   1060 11            mov a, b
2290   1061 26 00 00      mov b, $0
2291   1064 B0            cmp a, b
2292   1065 FD 7F         sgt ; >
2293   1067 E4            pop a
2294   1068             ; END RELATIONAL
2295   1068 C0 00 00      cmp b, 0
2296   106B C6 94 10      je _while34_exit
2297   106E             _while34_block:
2298   106E             ;; i--; 
2299   106E FA FA FF      lea d, [bp + -6] ; $i
2300   1071 2A            mov b, [d]
2301   1072 D8            push b
2302   1073 FD 7D         dec b
2303   1075 FA FA FF      lea d, [bp + -6] ; $i
2304   1078 FD 43         mov [d], b
2305   107A E5            pop b
2306   107B             ;; putchar(digits[i]); 
2307   107B FA FC FF      lea d, [bp + -4] ; $digits
2308   107E D7            push a
2309   107F DA            push d
2310   1080 FA FA FF      lea d, [bp + -6] ; $i
2311   1083 2A            mov b, [d]
2312   1084 E7            pop d
2313   1085 5A            add d, b
2314   1086 E4            pop a
2315   1087 32            mov bl, [d]
2316   1088 A7 00         mov bh, 0
2317   108A DD            push bl
2318   108B 07 9F 10      call putchar
2319   108E 51 01 00      add sp, 1
2320   1091 0A 5B 10      jmp _while34_cond
2321   1094             _while34_exit:
2322   1094 F9            leave
2323   1095 09            ret
2324   1096             
2325   1096             date:
2326   1096 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2327   1099             
2328   1099             ; --- BEGIN INLINE ASM BLOCK
2329   1099 19 00         mov al, 0 
2330   109B 05 07         syscall sys_datetime
2331   109D             ; --- END INLINE ASM BLOCK
2332   109D             
2333   109D F9            leave
2334   109E 09            ret
2335   109F             
2336   109F             putchar:
2337   109F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2338   10A2             
2339   10A2             ; --- BEGIN INLINE ASM BLOCK
2340   10A2 FA 05 00      lea d, [bp + 5] ; $c
2341   10A5 1E            mov al, [d]
2342   10A6 23            mov ah, al
2343   10A7 07 80 12      call _putchar
2344   10AA             ; --- END INLINE ASM BLOCK
2345   10AA             
2346   10AA F9            leave
2347   10AB 09            ret
2348   10AC             
2349   10AC             getchar:
2350   10AC F8 00 00      enter 0 ; (push bp; mov bp, sp)
2351   10AF             ; $c 
2352   10AF 52 01 00      sub sp, 1
2353   10B2             
2354   10B2             ; --- BEGIN INLINE ASM BLOCK
2355   10B2 07 79 12      call getch
2356   10B5 1A            mov al, ah
2357   10B6 FA 00 00      lea d, [bp + 0] ; $c
2358   10B9 3E            mov [d], al
2359   10BA             ; --- END INLINE ASM BLOCK
2360   10BA             
2361   10BA             ;; return c; 
2362   10BA FA 00 00      lea d, [bp + 0] ; $c
2363   10BD 32            mov bl, [d]
2364   10BE A7 00         mov bh, 0
2365   10C0 F9            leave
2366   10C1 09            ret
2367   10C2             
2368   10C2             scann:
2369   10C2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2370   10C5             ; $m 
2371   10C5 52 02 00      sub sp, 2
2372   10C8             
2373   10C8             ; --- BEGIN INLINE ASM BLOCK
2374   10C8 07 C4 14      call scan_u16d
2375   10CB FA FF FF      lea d, [bp + -1] ; $m
2376   10CE 43            mov [d], a
2377   10CF             ; --- END INLINE ASM BLOCK
2378   10CF             
2379   10CF             ;; return m; 
2380   10CF FA FF FF      lea d, [bp + -1] ; $m
2381   10D2 2A            mov b, [d]
2382   10D3 F9            leave
2383   10D4 09            ret
2384   10D5             
2385   10D5             puts:
2386   10D5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2387   10D8             
2388   10D8             ; --- BEGIN INLINE ASM BLOCK
2389   10D8 FA 05 00      lea d, [bp + 5] ; $s
2390   10DB 15            mov a, [d]
2391   10DC 3C            mov d, a
2392   10DD 07 CA 13      call _puts
2393   10E0 10 00 0A      mov a, $0A00
2394   10E3 05 03         syscall sys_io
2395   10E5             ; --- END INLINE ASM BLOCK
2396   10E5             
2397   10E5 F9            leave
2398   10E6 09            ret
2399   10E7             
2400   10E7             print:
2401   10E7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2402   10EA             
2403   10EA             ; --- BEGIN INLINE ASM BLOCK
2404   10EA FA 05 00      lea d, [bp + 5] ; $s
2405   10ED FD 2A         mov d, [d]
2406   10EF 07 CA 13      call _puts
2407   10F2             ; --- END INLINE ASM BLOCK
2408   10F2             
2409   10F2 F9            leave
2410   10F3 09            ret
2411   10F4             
2412   10F4             loadfile:
2413   10F4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2414   10F7             
2415   10F7             ; --- BEGIN INLINE ASM BLOCK
2416   10F7 FA 07 00      lea d, [bp + 7] ; $destination
2417   10FA 15            mov a, [d]
2418   10FB 4F            mov di, a
2419   10FC FA 05 00      lea d, [bp + 5] ; $filename
2420   10FF FD 2A         mov d, [d]
2421   1101 19 14         mov al, 20
2422   1103 05 04         syscall sys_filesystem
2423   1105             ; --- END INLINE ASM BLOCK
2424   1105             
2425   1105 F9            leave
2426   1106 09            ret
2427   1107             
2428   1107             create_file:
2429   1107 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2430   110A F9            leave
2431   110B 09            ret
2432   110C             
2433   110C             delete_file:
2434   110C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2435   110F             
2436   110F             ; --- BEGIN INLINE ASM BLOCK
2437   110F FA 05 00      lea d, [bp + 5] ; $filename
2438   1112 19 0A         mov al, 10
2439   1114 05 04         syscall sys_filesystem
2440   1116             ; --- END INLINE ASM BLOCK
2441   1116             
2442   1116 F9            leave
2443   1117 09            ret
2444   1118             
2445   1118             fopen:
2446   1118 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2447   111B F9            leave
2448   111C 09            ret
2449   111D             
2450   111D             fclose:
2451   111D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2452   1120 F9            leave
2453   1121 09            ret
2454   1122             
2455   1122             load_hex:
2456   1122 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2457   1125             ; $temp 
2458   1125 52 02 00      sub sp, 2
2459   1128             ;; temp = alloc(32768); 
2460   1128 FA FF FF      lea d, [bp + -1] ; $temp
2461   112B DA            push d
2462   112C 26 00 80      mov b, $8000
2463   112F FD AB         swp b
2464   1131 D8            push b
2465   1132 07 09 08      call alloc
2466   1135 51 02 00      add sp, 2
2467   1138 E7            pop d
2468   1139 FD 43         mov [d], b
2469   113B             
2470   113B             ; --- BEGIN INLINE ASM BLOCK
2471   113B               
2472   113B               
2473   113B               
2474   113B               
2475   113B               
2476   113B             _load_hex:
2477   113B D7            push a
2478   113C D8            push b
2479   113D DA            push d
2480   113E E2            push si
2481   113F E3            push di
2482   1140 52 00 80      sub sp, $8000      
2483   1143 38 00 00      mov c, 0
2484   1146 48            mov a, sp
2485   1147 77            inc a
2486   1148 3C            mov d, a          
2487   1149 07 87 12      call _gets        
2488   114C 4D            mov si, a
2489   114D             __load_hex_loop:
2490   114D F6            lodsb             
2491   114E B9 00         cmp al, 0         
2492   1150 C6 5E 11      jz __load_hex_ret
2493   1153 36            mov bh, al
2494   1154 F6            lodsb
2495   1155 2F            mov bl, al
2496   1156 07 3D 12      call _atoi        
2497   1159 F7            stosb             
2498   115A 78            inc c
2499   115B 0A 4D 11      jmp __load_hex_loop
2500   115E             __load_hex_ret:
2501   115E 51 00 80      add sp, $8000
2502   1161 F0            pop di
2503   1162 EF            pop si
2504   1163 E7            pop d
2505   1164 E5            pop b
2506   1165 E4            pop a
2507   1166             ; --- END INLINE ASM BLOCK
2508   1166             
2509   1166 F9            leave
2510   1167 09            ret
2511   1168             
2512   1168             getparam:
2513   1168 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2514   116B             ; $data 
2515   116B 52 01 00      sub sp, 1
2516   116E             
2517   116E             ; --- BEGIN INLINE ASM BLOCK
2518   116E 19 04         mov al, 4
2519   1170 FA 05 00      lea d, [bp + 5] ; $address
2520   1173 FD 2A         mov d, [d]
2521   1175 05 0C         syscall sys_system
2522   1177 FA 00 00      lea d, [bp + 0] ; $data
2523   117A FD 3E         mov [d], bl
2524   117C             ; --- END INLINE ASM BLOCK
2525   117C             
2526   117C             ;; return data; 
2527   117C FA 00 00      lea d, [bp + 0] ; $data
2528   117F 32            mov bl, [d]
2529   1180 A7 00         mov bh, 0
2530   1182 F9            leave
2531   1183 09            ret
2532   1184             
2533   1184             clear:
2534   1184 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2535   1187             ;; print("\033[2J\033[H"); 
2536   1187 26 54 1D      mov b, __s3 ; "\033[2J\033[H"
2537   118A FD AB         swp b
2538   118C D8            push b
2539   118D 07 E7 10      call print
2540   1190 51 02 00      add sp, 2
2541   1193 F9            leave
2542   1194 09            ret
2543   1195             
2544   1195             include_stdio_asm:
2545   1195 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2546   1198             
2547   1198             ; --- BEGIN INLINE ASM BLOCK
2548   1198             .include "lib/asm/stdio.asm"
0001+  1198             ;-----------------------------------------------------------------------------
0002+  1198             ; stdio.s
0003+  1198             ;-----------------------------------------------------------------------------
0004+  1198             .include "lib/asm/string.asm"
0001++ 1198             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1198             ; string.s
0003++ 1198             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1198             
0005++ 1198             
0006++ 1198             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1198             ; _strrev
0008++ 1198             ; reverse a string
0009++ 1198             ; D = string address
0010++ 1198             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1198             ; 01234
0012++ 1198             _strrev:
0013++ 1198 4B          	pusha
0014++ 1199 07 DF 11    	call _strlen	; length in C
0015++ 119C 12          	mov a, c
0016++ 119D AF 01 00    	cmp a, 1
0017++ 11A0 D0 BA 11    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 11A3 7D          	dec a
0019++ 11A4 FD 4E       	mov si, d	; beginning of string
0020++ 11A6 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 11A8 59          	add d, a	; end of string
0022++ 11A9 12          	mov a, c
0023++ 11AA FD 9B       	shr a		; divide by 2
0024++ 11AC 39          	mov c, a	; C now counts the steps
0025++ 11AD             _strrev_L0:
0026++ 11AD 32          	mov bl, [d]	; save load right-side char into BL
0027++ 11AE F6          	lodsb		; load left-side char into AL; increase SI
0028++ 11AF 3E          	mov [d], al	; store left char into right side
0029++ 11B0 1B          	mov al, bl
0030++ 11B1 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 11B2 7E          	dec c
0032++ 11B3 7F          	dec d
0033++ 11B4 C2 00 00    	cmp c, 0
0034++ 11B7 C7 AD 11    	jne _strrev_L0
0035++ 11BA             _strrev_end:
0036++ 11BA 4C          	popa
0037++ 11BB 09          	ret
0038++ 11BC             	
0039++ 11BC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 11BC             ; _strchr
0041++ 11BC             ; search string in D for char in AL
0042++ 11BC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 11BC             _strchr:
0044++ 11BC             _strchr_L0:
0045++ 11BC 32          	mov bl, [d]
0046++ 11BD C1 00       	cmp bl, 0
0047++ 11BF C6 CA 11    	je _strchr_end
0048++ 11C2 BA          	cmp al, bl
0049++ 11C3 C6 CA 11    	je _strchr_end
0050++ 11C6 79          	inc d
0051++ 11C7 0A BC 11    	jmp _strchr_L0
0052++ 11CA             _strchr_end:
0053++ 11CA 1B          	mov al, bl
0054++ 11CB 09          	ret
0055++ 11CC             
0056++ 11CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 11CC             ; _strstr
0058++ 11CC             ; find sub-string
0059++ 11CC             ; str1 in SI
0060++ 11CC             ; str2 in DI
0061++ 11CC             ; SI points to end of source string
0062++ 11CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 11CC             _strstr:
0064++ 11CC DB          	push al
0065++ 11CD DA          	push d
0066++ 11CE E3          	push di
0067++ 11CF             _strstr_loop:
0068++ 11CF F3          	cmpsb					; compare a byte of the strings
0069++ 11D0 C7 DB 11    	jne _strstr_ret
0070++ 11D3 FC 00 00    	lea d, [di + 0]
0071++ 11D6 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 11D8 C7 CF 11    	jne _strstr_loop				; equal chars but not at end
0073++ 11DB             _strstr_ret:
0074++ 11DB F0          	pop di
0075++ 11DC E7          	pop d
0076++ 11DD E8          	pop al
0077++ 11DE 09          	ret
0078++ 11DF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 11DF             ; length of null terminated string
0080++ 11DF             ; result in C
0081++ 11DF             ; pointer in D
0082++ 11DF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 11DF             _strlen:
0084++ 11DF DA          	push d
0085++ 11E0 38 00 00    	mov c, 0
0086++ 11E3             _strlen_L1:
0087++ 11E3 BD 00       	cmp byte [d], 0
0088++ 11E5 C6 ED 11    	je _strlen_ret
0089++ 11E8 79          	inc d
0090++ 11E9 78          	inc c
0091++ 11EA 0A E3 11    	jmp _strlen_L1
0092++ 11ED             _strlen_ret:
0093++ 11ED E7          	pop d
0094++ 11EE 09          	ret
0095++ 11EF             
0096++ 11EF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 11EF             ; STRCMP
0098++ 11EF             ; compare two strings
0099++ 11EF             ; str1 in SI
0100++ 11EF             ; str2 in DI
0101++ 11EF             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 11EF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 11EF             _strcmp:
0104++ 11EF DB          	push al
0105++ 11F0 DA          	push d
0106++ 11F1 E3          	push di
0107++ 11F2 E2          	push si
0108++ 11F3             _strcmp_loop:
0109++ 11F3 F3          	cmpsb					; compare a byte of the strings
0110++ 11F4 C7 FF 11    	jne _strcmp_ret
0111++ 11F7 FB FF FF    	lea d, [si +- 1]
0112++ 11FA BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 11FC C7 F3 11    	jne _strcmp_loop				; equal chars but not at end
0114++ 11FF             _strcmp_ret:
0115++ 11FF EF          	pop si
0116++ 1200 F0          	pop di
0117++ 1201 E7          	pop d
0118++ 1202 E8          	pop al
0119++ 1203 09          	ret
0120++ 1204             
0121++ 1204             
0122++ 1204             ; STRCPY
0123++ 1204             ; copy null terminated string from SI to DI
0124++ 1204             ; source in SI
0125++ 1204             ; destination in DI
0126++ 1204             _strcpy:
0127++ 1204 E2          	push si
0128++ 1205 E3          	push di
0129++ 1206 DB          	push al
0130++ 1207             _strcpy_L1:
0131++ 1207 F6          	lodsb
0132++ 1208 F7          	stosb
0133++ 1209 B9 00       	cmp al, 0
0134++ 120B C7 07 12    	jne _strcpy_L1
0135++ 120E             _strcpy_end:
0136++ 120E E8          	pop al
0137++ 120F F0          	pop di
0138++ 1210 EF          	pop si
0139++ 1211 09          	ret
0140++ 1212             
0141++ 1212             ; STRCAT
0142++ 1212             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1212             ; source in SI
0144++ 1212             ; destination in DI
0145++ 1212             _strcat:
0146++ 1212 E2          	push si
0147++ 1213 E3          	push di
0148++ 1214 D7          	push a
0149++ 1215 DA          	push d
0150++ 1216 50          	mov a, di
0151++ 1217 3C          	mov d, a
0152++ 1218             _strcat_goto_end_L1:
0153++ 1218 BD 00       	cmp byte[d], 0
0154++ 121A C6 21 12    	je _strcat_start
0155++ 121D 79          	inc d
0156++ 121E 0A 18 12    	jmp _strcat_goto_end_L1
0157++ 1221             _strcat_start:
0158++ 1221 FD 50       	mov di, d
0159++ 1223             _strcat_L1:
0160++ 1223 F6          	lodsb
0161++ 1224 F7          	stosb
0162++ 1225 B9 00       	cmp al, 0
0163++ 1227 C7 23 12    	jne _strcat_L1
0164++ 122A             _strcat_end:
0165++ 122A E7          	pop d
0166++ 122B E4          	pop a
0167++ 122C F0          	pop di
0168++ 122D EF          	pop si
0169++ 122E 09          	ret
0170++ 122F             
0171++ 122F             
0005+  122F             
0006+  122F             ;-----------------------------------------------------------------------------
0007+  122F             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  122F             ; ASCII in BL
0009+  122F             ; result in AL
0010+  122F             ; ascii for F = 0100 0110
0011+  122F             ; ascii for 9 = 0011 1001
0012+  122F             ;-----------------------------------------------------------------------------
0013+  122F             hex_ascii_encode:
0014+  122F 1B            mov al, bl
0015+  1230 93 40         test al, $40        ; test if letter or number
0016+  1232 C7 38 12      jnz hex_letter
0017+  1235 87 0F         and al, $0F        ; get number
0018+  1237 09            ret
0019+  1238             hex_letter:
0020+  1238 87 0F         and al, $0F        ; get letter
0021+  123A 6A 09         add al, 9
0022+  123C 09            ret
0023+  123D             
0024+  123D             ;-----------------------------------------------------------------------------
0025+  123D             ; ATOI
0026+  123D             ; 2 letter hex string in B
0027+  123D             ; 8bit integer returned in AL
0028+  123D             ;-----------------------------------------------------------------------------
0029+  123D             _atoi:
0030+  123D D8            push b
0031+  123E 07 2F 12      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  1241 30            mov bl, bh
0033+  1242 DB            push al          ; save a
0034+  1243 07 2F 12      call hex_ascii_encode
0035+  1246 EA            pop bl  
0036+  1247 FD 9E 04      shl al, 4
0037+  124A 8C            or al, bl
0038+  124B E5            pop b
0039+  124C 09            ret  
0040+  124D             
0041+  124D             ;-----------------------------------------------------------------------------
0042+  124D             ; scanf
0043+  124D             ; no need for explanations!
0044+  124D             ;-----------------------------------------------------------------------------
0045+  124D             scanf:
0046+  124D 09            ret
0047+  124E             
0048+  124E             ;-----------------------------------------------------------------------------
0049+  124E             ; ITOA
0050+  124E             ; 8bit value in BL
0051+  124E             ; 2 byte ASCII result in A
0052+  124E             ;-----------------------------------------------------------------------------
0053+  124E             _itoa:
0054+  124E DA            push d
0055+  124F D8            push b
0056+  1250 A7 00         mov bh, 0
0057+  1252 FD A4 04      shr bl, 4  
0058+  1255 74            mov d, b
0059+  1256 1F FE 14      mov al, [d + s_hex_digits]
0060+  1259 23            mov ah, al
0061+  125A               
0062+  125A E5            pop b
0063+  125B D8            push b
0064+  125C A7 00         mov bh, 0
0065+  125E FD 87 0F      and bl, $0F
0066+  1261 74            mov d, b
0067+  1262 1F FE 14      mov al, [d + s_hex_digits]
0068+  1265 E5            pop b
0069+  1266 E7            pop d
0070+  1267 09            ret
0071+  1268             
0072+  1268             ;-----------------------------------------------------------------------------
0073+  1268             ; HEX STRING TO BINARY
0074+  1268             ; di = destination address
0075+  1268             ; si = source
0076+  1268             ;-----------------------------------------------------------------------------
0077+  1268             _hex_to_int:
0078+  1268             _hex_to_int_L1:
0079+  1268 F6            lodsb          ; load from [SI] to AL
0080+  1269 B9 00         cmp al, 0        ; check if ASCII 0
0081+  126B C6 78 12      jz _hex_to_int_ret
0082+  126E 36            mov bh, al
0083+  126F F6            lodsb
0084+  1270 2F            mov bl, al
0085+  1271 07 3D 12      call _atoi        ; convert ASCII byte in B to int (to AL)
0086+  1274 F7            stosb          ; store AL to [DI]
0087+  1275 0A 68 12      jmp _hex_to_int_L1
0088+  1278             _hex_to_int_ret:
0089+  1278 09            ret    
0090+  1279             
0091+  1279             ;-----------------------------------------------------------------------------
0092+  1279             ; GETCHAR
0093+  1279             ; char in ah
0094+  1279             ;-----------------------------------------------------------------------------
0095+  1279             getch:
0096+  1279 DB            push al
0097+  127A             getch_retry:
0098+  127A 19 01         mov al, 1
0099+  127C 05 03         syscall sys_io      ; receive in AH
0100+  127E E8            pop al
0101+  127F 09            ret
0102+  1280             
0103+  1280             ;-----------------------------------------------------------------------------
0104+  1280             ; PUTCHAR
0105+  1280             ; char in ah
0106+  1280             ;-----------------------------------------------------------------------------
0107+  1280             _putchar:
0108+  1280 D7            push a
0109+  1281 19 00         mov al, 0
0110+  1283 05 03         syscall sys_io      ; char in AH
0111+  1285 E4            pop a
0112+  1286 09            ret
0113+  1287             
0114+  1287             ;-----------------------------------------------------------------------------
0115+  1287             ;; INPUT A STRING
0116+  1287             ;; terminates with null
0117+  1287             ;; pointer in D
0118+  1287             ;-----------------------------------------------------------------------------
0119+  1287             _gets:
0120+  1287 D7            push a
0121+  1288 DA            push d
0122+  1289             _gets_loop:
0123+  1289 19 01         mov al, 1
0124+  128B 05 03         syscall sys_io      ; receive in AH
0125+  128D B9 00         cmp al, 0        ; check error code (AL)
0126+  128F C6 89 12      je _gets_loop      ; if no char received, retry
0127+  1292             
0128+  1292 76 1B         cmp ah, 27
0129+  1294 C6 B5 12      je _gets_ansi_esc
0130+  1297 76 0A         cmp ah, $0A        ; LF
0131+  1299 C6 20 13      je _gets_end
0132+  129C 76 0D         cmp ah, $0D        ; CR
0133+  129E C6 20 13      je _gets_end
0134+  12A1 76 5C         cmp ah, $5C        ; '\\'
0135+  12A3 C6 E1 12      je _gets_escape
0136+  12A6               
0137+  12A6 76 08         cmp ah, $08      ; check for backspace
0138+  12A8 C6 B1 12      je _gets_backspace
0139+  12AB             
0140+  12AB 1A            mov al, ah
0141+  12AC 3E            mov [d], al
0142+  12AD 79            inc d
0143+  12AE 0A 89 12      jmp _gets_loop
0144+  12B1             _gets_backspace:
0145+  12B1 7F            dec d
0146+  12B2 0A 89 12      jmp _gets_loop
0147+  12B5             _gets_ansi_esc:
0148+  12B5 19 01         mov al, 1
0149+  12B7 05 03         syscall sys_io        ; receive in AH without echo
0150+  12B9 B9 00         cmp al, 0          ; check error code (AL)
0151+  12BB C6 B5 12      je _gets_ansi_esc    ; if no char received, retry
0152+  12BE 76 5B         cmp ah, '['
0153+  12C0 C7 89 12      jne _gets_loop
0154+  12C3             _gets_ansi_esc_2:
0155+  12C3 19 01         mov al, 1
0156+  12C5 05 03         syscall sys_io          ; receive in AH without echo
0157+  12C7 B9 00         cmp al, 0            ; check error code (AL)
0158+  12C9 C6 C3 12      je _gets_ansi_esc_2  ; if no char received, retry
0159+  12CC 76 44         cmp ah, 'D'
0160+  12CE C6 D9 12      je _gets_left_arrow
0161+  12D1 76 43         cmp ah, 'C'
0162+  12D3 C6 DD 12      je _gets_right_arrow
0163+  12D6 0A 89 12      jmp _gets_loop
0164+  12D9             _gets_left_arrow:
0165+  12D9 7F            dec d
0166+  12DA 0A 89 12      jmp _gets_loop
0167+  12DD             _gets_right_arrow:
0168+  12DD 79            inc d
0169+  12DE 0A 89 12      jmp _gets_loop
0170+  12E1             _gets_escape:
0171+  12E1 19 01         mov al, 1
0172+  12E3 05 03         syscall sys_io      ; receive in AH
0173+  12E5 B9 00         cmp al, 0        ; check error code (AL)
0174+  12E7 C6 E1 12      je _gets_escape      ; if no char received, retry
0175+  12EA 76 6E         cmp ah, 'n'
0176+  12EC C6 0B 13      je _gets_LF
0177+  12EF 76 72         cmp ah, 'r'
0178+  12F1 C6 12 13      je _gets_CR
0179+  12F4 76 30         cmp ah, '0'
0180+  12F6 C6 19 13      je _gets_NULL
0181+  12F9 76 5C         cmp ah, $5C  ; '\'
0182+  12FB C6 04 13      je _gets_slash
0183+  12FE 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0184+  12FF 3E            mov [d], al
0185+  1300 79            inc d
0186+  1301 0A 89 12      jmp _gets_loop
0187+  1304             _gets_slash:
0188+  1304 19 5C         mov al, $5C
0189+  1306 3E            mov [d], al
0190+  1307 79            inc d
0191+  1308 0A 89 12      jmp _gets_loop
0192+  130B             _gets_LF:
0193+  130B 19 0A         mov al, $0A
0194+  130D 3E            mov [d], al
0195+  130E 79            inc d
0196+  130F 0A 89 12      jmp _gets_loop
0197+  1312             _gets_CR:
0198+  1312 19 0D         mov al, $0D
0199+  1314 3E            mov [d], al
0200+  1315 79            inc d
0201+  1316 0A 89 12      jmp _gets_loop
0202+  1319             _gets_NULL:
0203+  1319 19 00         mov al, $00
0204+  131B 3E            mov [d], al
0205+  131C 79            inc d
0206+  131D 0A 89 12      jmp _gets_loop
0207+  1320             _gets_end:
0208+  1320 19 00         mov al, 0
0209+  1322 3E            mov [d], al        ; terminate string
0210+  1323 E7            pop d
0211+  1324 E4            pop a
0212+  1325 09            ret
0213+  1326             
0214+  1326             ;-----------------------------------------------------------------------------
0215+  1326             ;; INPUT TEXT
0216+  1326             ;; terminated with CTRL+D
0217+  1326             ;; pointer in D
0218+  1326             ;-----------------------------------------------------------------------------
0219+  1326             _gettxt:
0220+  1326 D7            push a
0221+  1327 DA            push d
0222+  1328             _gettxt_loop:
0223+  1328 19 01         mov al, 1
0224+  132A 05 03         syscall sys_io      ; receive in AH
0225+  132C B9 00         cmp al, 0        ; check error code (AL)
0226+  132E C6 28 13      je _gettxt_loop    ; if no char received, retry
0227+  1331 76 04         cmp ah, 4      ; EOT
0228+  1333 C6 71 13      je _gettxt_end
0229+  1336 76 08         cmp ah, $08      ; check for backspace
0230+  1338 C6 6D 13      je _gettxt_backspace
0231+  133B 76 5C         cmp ah, $5C        ; '\'
0232+  133D C6 46 13      je _gettxt_escape
0233+  1340 1A            mov al, ah
0234+  1341 3E            mov [d], al
0235+  1342 79            inc d
0236+  1343 0A 28 13      jmp _gettxt_loop
0237+  1346             _gettxt_escape:
0238+  1346 19 01         mov al, 1
0239+  1348 05 03         syscall sys_io      ; receive in AH
0240+  134A B9 00         cmp al, 0        ; check error code (AL)
0241+  134C C6 46 13      je _gettxt_escape    ; if no char received, retry
0242+  134F 76 6E         cmp ah, 'n'
0243+  1351 C6 5F 13      je _gettxt_LF
0244+  1354 76 72         cmp ah, 'r'
0245+  1356 C6 66 13      je _gettxt_CR
0246+  1359 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0247+  135A 3E            mov [d], al
0248+  135B 79            inc d
0249+  135C 0A 28 13      jmp _gettxt_loop
0250+  135F             _gettxt_LF:
0251+  135F 19 0A         mov al, $0A
0252+  1361 3E            mov [d], al
0253+  1362 79            inc d
0254+  1363 0A 28 13      jmp _gettxt_loop
0255+  1366             _gettxt_CR:
0256+  1366 19 0D         mov al, $0D
0257+  1368 3E            mov [d], al
0258+  1369 79            inc d
0259+  136A 0A 28 13      jmp _gettxt_loop
0260+  136D             _gettxt_backspace:
0261+  136D 7F            dec d
0262+  136E 0A 28 13      jmp _gettxt_loop
0263+  1371             _gettxt_end:
0264+  1371 19 00         mov al, 0
0265+  1373 3E            mov [d], al        ; terminate string
0266+  1374 E7            pop d
0267+  1375 E4            pop a
0268+  1376 09            ret
0269+  1377             
0270+  1377             ;-----------------------------------------------------------------------------
0271+  1377             ; PRINT NEW LINE
0272+  1377             ;-----------------------------------------------------------------------------
0273+  1377             printnl:
0274+  1377 D7            push a
0275+  1378 10 00 0A      mov a, $0A00
0276+  137B 05 03         syscall sys_io
0277+  137D 10 00 0D      mov a, $0D00
0278+  1380 05 03         syscall sys_io
0279+  1382 E4            pop a
0280+  1383 09            ret
0281+  1384             
0282+  1384             ;-----------------------------------------------------------------------------
0283+  1384             ; _strtoint
0284+  1384             ; 4 digit hex string number in d
0285+  1384             ; integer returned in A
0286+  1384             ;-----------------------------------------------------------------------------
0287+  1384             _strtointx:
0288+  1384 D8            push b
0289+  1385 32            mov bl, [d]
0290+  1386 37            mov bh, bl
0291+  1387 33 01 00      mov bl, [d + 1]
0292+  138A 07 3D 12      call _atoi        ; convert to int in AL
0293+  138D 23            mov ah, al        ; move to AH
0294+  138E 33 02 00      mov bl, [d + 2]
0295+  1391 37            mov bh, bl
0296+  1392 33 03 00      mov bl, [d + 3]
0297+  1395 07 3D 12      call _atoi        ; convert to int in AL
0298+  1398 E5            pop b
0299+  1399 09            ret
0300+  139A             
0301+  139A             ;-----------------------------------------------------------------------------
0302+  139A             ; _strtoint
0303+  139A             ; 5 digit base10 string number in d
0304+  139A             ; integer returned in A
0305+  139A             ;-----------------------------------------------------------------------------
0306+  139A             _strtoint:
0307+  139A E2            push si
0308+  139B D8            push b
0309+  139C D9            push c
0310+  139D DA            push d
0311+  139E 07 DF 11      call _strlen      ; get string length in C
0312+  13A1 7E            dec c
0313+  13A2 FD 4E         mov si, d
0314+  13A4 12            mov a, c
0315+  13A5 FD 99         shl a
0316+  13A7 3B 16 15      mov d, table_power
0317+  13AA 59            add d, a
0318+  13AB 38 00 00      mov c, 0
0319+  13AE             _strtoint_L0:
0320+  13AE F6            lodsb      ; load ASCII to al
0321+  13AF B9 00         cmp al, 0
0322+  13B1 C6 C4 13      je _strtoint_end
0323+  13B4 6F 30         sub al, $30    ; make into integer
0324+  13B6 22 00         mov ah, 0
0325+  13B8 2A            mov b, [d]
0326+  13B9 AC            mul a, b      ; result in B since it fits in 16bits
0327+  13BA 11            mov a, b
0328+  13BB 28            mov b, c
0329+  13BC 54            add a, b
0330+  13BD 39            mov c, a
0331+  13BE 63 02 00      sub d, 2
0332+  13C1 0A AE 13      jmp _strtoint_L0
0333+  13C4             _strtoint_end:
0334+  13C4 12            mov a, c
0335+  13C5 E7            pop d
0336+  13C6 E6            pop c
0337+  13C7 E5            pop b
0338+  13C8 EF            pop si
0339+  13C9 09            ret
0340+  13CA             
0341+  13CA             ;-----------------------------------------------------------------------------
0342+  13CA             ; PRINT NULL TERMINATED STRING
0343+  13CA             ; pointer in D
0344+  13CA             ;-----------------------------------------------------------------------------
0345+  13CA             _puts:
0346+  13CA D7            push a
0347+  13CB DA            push d
0348+  13CC             _puts_L1:
0349+  13CC 1E            mov al, [d]
0350+  13CD B9 00         cmp al, 0
0351+  13CF C6 DB 13      jz _puts_END
0352+  13D2 23            mov ah, al
0353+  13D3 19 00         mov al, 0
0354+  13D5 05 03         syscall sys_io
0355+  13D7 79            inc d
0356+  13D8 0A CC 13      jmp _puts_L1
0357+  13DB             _puts_END:
0358+  13DB E7            pop d
0359+  13DC E4            pop a
0360+  13DD 09            ret
0361+  13DE             
0362+  13DE             ;-----------------------------------------------------------------------------
0363+  13DE             ; PRINT N SIZE STRING
0364+  13DE             ; pointer in D
0365+  13DE             ; size in C
0366+  13DE             ;-----------------------------------------------------------------------------
0367+  13DE             _putsn:
0368+  13DE DB            push al
0369+  13DF DA            push d
0370+  13E0 D9            push c
0371+  13E1             _putsn_L0:
0372+  13E1 1E            mov al, [d]
0373+  13E2 23            mov ah, al
0374+  13E3 19 00         mov al, 0
0375+  13E5 05 03         syscall sys_io
0376+  13E7 79            inc d
0377+  13E8 7E            dec c  
0378+  13E9 C2 00 00      cmp c, 0
0379+  13EC C7 E1 13      jne _putsn_L0
0380+  13EF             _putsn_end:
0381+  13EF E6            pop c
0382+  13F0 E7            pop d
0383+  13F1 E8            pop al
0384+  13F2 09            ret
0385+  13F3             
0386+  13F3             ;-----------------------------------------------------------------------------
0387+  13F3             ; print 16bit decimal number
0388+  13F3             ; input number in A
0389+  13F3             ;-----------------------------------------------------------------------------
0390+  13F3             print_u16d:
0391+  13F3 D7            push a
0392+  13F4 D8            push b
0393+  13F5 26 10 27      mov b, 10000
0394+  13F8 AE            div a, b      ; get 10000's coeff.
0395+  13F9 07 1B 14      call print_number
0396+  13FC 11            mov a, b
0397+  13FD 26 E8 03      mov b, 1000
0398+  1400 AE            div a, b      ; get 1000's coeff.
0399+  1401 07 1B 14      call print_number
0400+  1404 11            mov a, b
0401+  1405 26 64 00      mov b, 100
0402+  1408 AE            div a, b
0403+  1409 07 1B 14      call print_number
0404+  140C 11            mov a, b
0405+  140D 26 0A 00      mov b, 10
0406+  1410 AE            div a, b
0407+  1411 07 1B 14      call print_number
0408+  1414 1B            mov al, bl      ; 1's coeff in bl
0409+  1415 07 1B 14      call print_number
0410+  1418 E5            pop b
0411+  1419 E4            pop a
0412+  141A 09            ret
0413+  141B             
0414+  141B             ;-----------------------------------------------------------------------------
0415+  141B             ; print AL
0416+  141B             ;-----------------------------------------------------------------------------
0417+  141B             print_number:
0418+  141B 6A 30         add al, $30
0419+  141D 23            mov ah, al
0420+  141E 07 80 12      call _putchar
0421+  1421 09            ret
0422+  1422             
0423+  1422             ;-----------------------------------------------------------------------------
0424+  1422             ; PRINT 16BIT HEX INTEGER
0425+  1422             ; integer value in reg B
0426+  1422             ;-----------------------------------------------------------------------------
0427+  1422             print_u16x:
0428+  1422 D7            push a
0429+  1423 D8            push b
0430+  1424 DD            push bl
0431+  1425 30            mov bl, bh
0432+  1426 07 4E 12      call _itoa        ; convert bh to char in A
0433+  1429 2F            mov bl, al        ; save al
0434+  142A 19 00         mov al, 0
0435+  142C 05 03         syscall sys_io        ; display AH
0436+  142E 24            mov ah, bl        ; retrieve al
0437+  142F 19 00         mov al, 0
0438+  1431 05 03         syscall sys_io        ; display AL
0439+  1433             
0440+  1433 EA            pop bl
0441+  1434 07 4E 12      call _itoa        ; convert bh to char in A
0442+  1437 2F            mov bl, al        ; save al
0443+  1438 19 00         mov al, 0
0444+  143A 05 03         syscall sys_io        ; display AH
0445+  143C 24            mov ah, bl        ; retrieve al
0446+  143D 19 00         mov al, 0
0447+  143F 05 03         syscall sys_io        ; display AL
0448+  1441             
0449+  1441 E5            pop b
0450+  1442 E4            pop a
0451+  1443 09            ret
0452+  1444             
0453+  1444             ;-----------------------------------------------------------------------------
0454+  1444             ; INPUT 16BIT HEX INTEGER
0455+  1444             ; read 16bit integer into A
0456+  1444             ;-----------------------------------------------------------------------------
0457+  1444             scan_u16x:
0458+  1444 F8 10 00      enter 16
0459+  1447 D8            push b
0460+  1448 DA            push d
0461+  1449             
0462+  1449 FA F1 FF      lea d, [bp + -15]
0463+  144C 07 87 12      call _gets        ; get number
0464+  144F             
0465+  144F 32            mov bl, [d]
0466+  1450 37            mov bh, bl
0467+  1451 33 01 00      mov bl, [d + 1]
0468+  1454 07 3D 12      call _atoi        ; convert to int in AL
0469+  1457 23            mov ah, al        ; move to AH
0470+  1458             
0471+  1458 33 02 00      mov bl, [d + 2]
0472+  145B 37            mov bh, bl
0473+  145C 33 03 00      mov bl, [d + 3]
0474+  145F 07 3D 12      call _atoi        ; convert to int in AL
0475+  1462             
0476+  1462 E7            pop d
0477+  1463 E5            pop b
0478+  1464 F9            leave
0479+  1465 09            ret
0480+  1466             
0481+  1466             ;-----------------------------------------------------------------------------
0482+  1466             ; PRINT 8bit HEX INTEGER
0483+  1466             ; integer value in reg bl
0484+  1466             ;-----------------------------------------------------------------------------
0485+  1466             print_u8x:
0486+  1466 D7            push a
0487+  1467 DD            push bl
0488+  1468             
0489+  1468 07 4E 12      call _itoa        ; convert bl to char in A
0490+  146B 2F            mov bl, al        ; save al
0491+  146C 19 00         mov al, 0
0492+  146E 05 03         syscall sys_io        ; display AH
0493+  1470 24            mov ah, bl        ; retrieve al
0494+  1471 19 00         mov al, 0
0495+  1473 05 03         syscall sys_io        ; display AL
0496+  1475             
0497+  1475 EA            pop bl
0498+  1476 E4            pop a
0499+  1477 09            ret
0500+  1478             
0501+  1478             ;-----------------------------------------------------------------------------
0502+  1478             ; print 8bit decimal unsigned number
0503+  1478             ; input number in AL
0504+  1478             ;-----------------------------------------------------------------------------
0505+  1478             print_u8d:
0506+  1478 D7            push a
0507+  1479 D8            push b
0508+  147A             
0509+  147A 22 00         mov ah, 0
0510+  147C 26 64 00      mov b, 100
0511+  147F AE            div a, b
0512+  1480 D8            push b      ; save remainder
0513+  1481 B9 00         cmp al, 0
0514+  1483 C6 8D 14      je skip100
0515+  1486 6A 30         add al, $30
0516+  1488 23            mov ah, al
0517+  1489 19 00         mov al, 0
0518+  148B 05 03         syscall sys_io  ; print coeff
0519+  148D             skip100:
0520+  148D E4            pop a
0521+  148E 22 00         mov ah, 0
0522+  1490 26 0A 00      mov b, 10
0523+  1493 AE            div a, b
0524+  1494 D8            push b      ; save remainder
0525+  1495 B9 00         cmp al, 0
0526+  1497 C6 A1 14      je skip10
0527+  149A 6A 30         add al, $30
0528+  149C 23            mov ah, al
0529+  149D 19 00         mov al, 0
0530+  149F 05 03         syscall sys_io  ; print coeff
0531+  14A1             skip10:
0532+  14A1 E4            pop a
0533+  14A2 1B            mov al, bl
0534+  14A3 6A 30         add al, $30
0535+  14A5 23            mov ah, al
0536+  14A6 19 00         mov al, 0
0537+  14A8 05 03         syscall sys_io  ; print coeff
0538+  14AA E5            pop b
0539+  14AB E4            pop a
0540+  14AC 09            ret
0541+  14AD             
0542+  14AD             ;-----------------------------------------------------------------------------
0543+  14AD             ; INPUT 8BIT HEX INTEGER
0544+  14AD             ; read 8bit integer into AL
0545+  14AD             ;-----------------------------------------------------------------------------
0546+  14AD             scan_u8x:
0547+  14AD F8 04 00      enter 4
0548+  14B0 D8            push b
0549+  14B1 DA            push d
0550+  14B2             
0551+  14B2 FA FD FF      lea d, [bp + -3]
0552+  14B5 07 87 12      call _gets        ; get number
0553+  14B8             
0554+  14B8 32            mov bl, [d]
0555+  14B9 37            mov bh, bl
0556+  14BA 33 01 00      mov bl, [d + 1]
0557+  14BD 07 3D 12      call _atoi        ; convert to int in AL
0558+  14C0             
0559+  14C0 E7            pop d
0560+  14C1 E5            pop b
0561+  14C2 F9            leave
0562+  14C3 09            ret
0563+  14C4             
0564+  14C4             ;-----------------------------------------------------------------------------
0565+  14C4             ; input decimal number
0566+  14C4             ; result in A
0567+  14C4             ; 655'\0'
0568+  14C4             ; low--------high
0569+  14C4             ;-----------------------------------------------------------------------------
0570+  14C4             scan_u16d:
0571+  14C4 F8 08 00      enter 8
0572+  14C7 E2            push si
0573+  14C8 D8            push b
0574+  14C9 D9            push c
0575+  14CA DA            push d
0576+  14CB FA F9 FF      lea d, [bp +- 7]
0577+  14CE 07 87 12      call _gets
0578+  14D1 07 DF 11      call _strlen      ; get string length in C
0579+  14D4 7E            dec c
0580+  14D5 FD 4E         mov si, d
0581+  14D7 12            mov a, c
0582+  14D8 FD 99         shl a
0583+  14DA 3B 16 15      mov d, table_power
0584+  14DD 59            add d, a
0585+  14DE 38 00 00      mov c, 0
0586+  14E1             mul_loop:
0587+  14E1 F6            lodsb      ; load ASCII to al
0588+  14E2 B9 00         cmp al, 0
0589+  14E4 C6 F7 14      je mul_exit
0590+  14E7 6F 30         sub al, $30    ; make into integer
0591+  14E9 22 00         mov ah, 0
0592+  14EB 2A            mov b, [d]
0593+  14EC AC            mul a, b      ; result in B since it fits in 16bits
0594+  14ED 11            mov a, b
0595+  14EE 28            mov b, c
0596+  14EF 54            add a, b
0597+  14F0 39            mov c, a
0598+  14F1 63 02 00      sub d, 2
0599+  14F4 0A E1 14      jmp mul_loop
0600+  14F7             mul_exit:
0601+  14F7 12            mov a, c
0602+  14F8 E7            pop d
0603+  14F9 E6            pop c
0604+  14FA E5            pop b
0605+  14FB EF            pop si
0606+  14FC F9            leave
0607+  14FD 09            ret
0608+  14FE             
0609+  14FE 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0609+  1502 34 35 36 37 
0609+  1506 38 39 41 42 
0609+  150A 43 44 45 46 
0610+  150E 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0610+  1512 1B 5B 48 00 
0611+  1516             
0612+  1516             table_power:
0613+  1516 01 00         .dw 1
0614+  1518 0A 00         .dw 10
0615+  151A 64 00         .dw 100
0616+  151C E8 03         .dw 1000
0617+  151E 10 27         .dw 100002549   1520             ; --- END INLINE ASM BLOCK
2550   1520             
2551   1520 F9            leave
2552   1521 09            ret
2553   1522             
2554   1522             test0:
2555   1522 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2556   1525             ; $result 
2557   1525             ; $pass 
2558   1525 10 01 00      mov a, $1
2559   1528 45 FD FF      mov [bp + -3], a
2560   152B             ; $c 
2561   152B             ; $i 
2562   152B             ; $ca 
2563   152B             ; $ia 
2564   152B 52 16 00      sub sp, 22
2565   152E             ;; c = 'A'; 
2566   152E FA FC FF      lea d, [bp + -4] ; $c
2567   1531 DA            push d
2568   1532 26 41 00      mov b, $41
2569   1535 E7            pop d
2570   1536 FD 3E         mov [d], bl
2571   1538             ;; i = 55; 
2572   1538 FA FA FF      lea d, [bp + -6] ; $i
2573   153B DA            push d
2574   153C 26 37 00      mov b, $37
2575   153F E7            pop d
2576   1540 FD 43         mov [d], b
2577   1542             ;; ca[0] = 'A'; 
2578   1542 FA F5 FF      lea d, [bp + -11] ; $ca
2579   1545 D7            push a
2580   1546 DA            push d
2581   1547 26 00 00      mov b, $0
2582   154A E7            pop d
2583   154B 5A            add d, b
2584   154C E4            pop a
2585   154D DA            push d
2586   154E 26 41 00      mov b, $41
2587   1551 E7            pop d
2588   1552 FD 3E         mov [d], bl
2589   1554             ;; ca[1] = 'B'; 
2590   1554 FA F5 FF      lea d, [bp + -11] ; $ca
2591   1557 D7            push a
2592   1558 DA            push d
2593   1559 26 01 00      mov b, $1
2594   155C E7            pop d
2595   155D 5A            add d, b
2596   155E E4            pop a
2597   155F DA            push d
2598   1560 26 42 00      mov b, $42
2599   1563 E7            pop d
2600   1564 FD 3E         mov [d], bl
2601   1566             ;; ca[2] = 'C'; 
2602   1566 FA F5 FF      lea d, [bp + -11] ; $ca
2603   1569 D7            push a
2604   156A DA            push d
2605   156B 26 02 00      mov b, $2
2606   156E E7            pop d
2607   156F 5A            add d, b
2608   1570 E4            pop a
2609   1571 DA            push d
2610   1572 26 43 00      mov b, $43
2611   1575 E7            pop d
2612   1576 FD 3E         mov [d], bl
2613   1578             ;; ca[3] = 'D'; 
2614   1578 FA F5 FF      lea d, [bp + -11] ; $ca
2615   157B D7            push a
2616   157C DA            push d
2617   157D 26 03 00      mov b, $3
2618   1580 E7            pop d
2619   1581 5A            add d, b
2620   1582 E4            pop a
2621   1583 DA            push d
2622   1584 26 44 00      mov b, $44
2623   1587 E7            pop d
2624   1588 FD 3E         mov [d], bl
2625   158A             ;; ca[4] = 'E'; 
2626   158A FA F5 FF      lea d, [bp + -11] ; $ca
2627   158D D7            push a
2628   158E DA            push d
2629   158F 26 04 00      mov b, $4
2630   1592 E7            pop d
2631   1593 5A            add d, b
2632   1594 E4            pop a
2633   1595 DA            push d
2634   1596 26 45 00      mov b, $45
2635   1599 E7            pop d
2636   159A FD 3E         mov [d], bl
2637   159C             ;; ia[0] = 0; 
2638   159C FA EB FF      lea d, [bp + -21] ; $ia
2639   159F D7            push a
2640   15A0 DA            push d
2641   15A1 26 00 00      mov b, $0
2642   15A4 E7            pop d
2643   15A5 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2644   15A9 E4            pop a
2645   15AA DA            push d
2646   15AB 26 00 00      mov b, $0
2647   15AE E7            pop d
2648   15AF FD 43         mov [d], b
2649   15B1             ;; ia[1] = 1; 
2650   15B1 FA EB FF      lea d, [bp + -21] ; $ia
2651   15B4 D7            push a
2652   15B5 DA            push d
2653   15B6 26 01 00      mov b, $1
2654   15B9 E7            pop d
2655   15BA FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2656   15BE E4            pop a
2657   15BF DA            push d
2658   15C0 26 01 00      mov b, $1
2659   15C3 E7            pop d
2660   15C4 FD 43         mov [d], b
2661   15C6             ;; ia[2] = 2; 
2662   15C6 FA EB FF      lea d, [bp + -21] ; $ia
2663   15C9 D7            push a
2664   15CA DA            push d
2665   15CB 26 02 00      mov b, $2
2666   15CE E7            pop d
2667   15CF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2668   15D3 E4            pop a
2669   15D4 DA            push d
2670   15D5 26 02 00      mov b, $2
2671   15D8 E7            pop d
2672   15D9 FD 43         mov [d], b
2673   15DB             ;; ia[3] = 3; 
2674   15DB FA EB FF      lea d, [bp + -21] ; $ia
2675   15DE D7            push a
2676   15DF DA            push d
2677   15E0 26 03 00      mov b, $3
2678   15E3 E7            pop d
2679   15E4 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2680   15E8 E4            pop a
2681   15E9 DA            push d
2682   15EA 26 03 00      mov b, $3
2683   15ED E7            pop d
2684   15EE FD 43         mov [d], b
2685   15F0             ;; ia[4] = 4; 
2686   15F0 FA EB FF      lea d, [bp + -21] ; $ia
2687   15F3 D7            push a
2688   15F4 DA            push d
2689   15F5 26 04 00      mov b, $4
2690   15F8 E7            pop d
2691   15F9 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2692   15FD E4            pop a
2693   15FE DA            push d
2694   15FF 26 04 00      mov b, $4
2695   1602 E7            pop d
2696   1603 FD 43         mov [d], b
2697   1605             ;; pass = pass && test0_subTest0(c, i, ca, ia); 
2698   1605 FA FD FF      lea d, [bp + -3] ; $pass
2699   1608 DA            push d
2700   1609 FA FD FF      lea d, [bp + -3] ; $pass
2701   160C 2A            mov b, [d]
2702   160D D7            push a
2703   160E 11            mov a, b
2704   160F FA EB FF      lea d, [bp + -21] ; $ia
2705   1612 2D            mov b, d
2706   1613 FD AB         swp b
2707   1615 D8            push b
2708   1616 FA F5 FF      lea d, [bp + -11] ; $ca
2709   1619 2D            mov b, d
2710   161A FD AB         swp b
2711   161C D8            push b
2712   161D FA FA FF      lea d, [bp + -6] ; $i
2713   1620 2A            mov b, [d]
2714   1621 FD AB         swp b
2715   1623 D8            push b
2716   1624 FA FC FF      lea d, [bp + -4] ; $c
2717   1627 32            mov bl, [d]
2718   1628 A7 00         mov bh, 0
2719   162A DD            push bl
2720   162B 07 3A 16      call test0_subTest0
2721   162E FD A7         sand a, b ; &&
2722   1630 E4            pop a
2723   1631 E7            pop d
2724   1632 FD 43         mov [d], b
2725   1634             ;; return pass; 
2726   1634 FA FD FF      lea d, [bp + -3] ; $pass
2727   1637 2A            mov b, [d]
2728   1638 F9            leave
2729   1639 09            ret
2730   163A             
2731   163A             test0_subTest0:
2732   163A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2733   163D             ; $pass 
2734   163D 10 01 00      mov a, $1
2735   1640 45 FF FF      mov [bp + -1], a
2736   1643 52 02 00      sub sp, 2
2737   1646             ;; pass = pass && c == 'A'; 
2738   1646 FA FF FF      lea d, [bp + -1] ; $pass
2739   1649 DA            push d
2740   164A FA FF FF      lea d, [bp + -1] ; $pass
2741   164D 2A            mov b, [d]
2742   164E D7            push a
2743   164F 11            mov a, b
2744   1650 FA 05 00      lea d, [bp + 5] ; $c
2745   1653 32            mov bl, [d]
2746   1654 A7 00         mov bh, 0
2747   1656             ; START RELATIONAL
2748   1656 D7            push a
2749   1657 11            mov a, b
2750   1658 26 41 00      mov b, $41
2751   165B B0            cmp a, b
2752   165C FD 71         seq ; ==
2753   165E E4            pop a
2754   165F             ; END RELATIONAL
2755   165F FD A7         sand a, b ; &&
2756   1661 E4            pop a
2757   1662 E7            pop d
2758   1663 FD 43         mov [d], b
2759   1665             ;; pass = pass && i == 55; 
2760   1665 FA FF FF      lea d, [bp + -1] ; $pass
2761   1668 DA            push d
2762   1669 FA FF FF      lea d, [bp + -1] ; $pass
2763   166C 2A            mov b, [d]
2764   166D D7            push a
2765   166E 11            mov a, b
2766   166F FA 06 00      lea d, [bp + 6] ; $i
2767   1672 2A            mov b, [d]
2768   1673             ; START RELATIONAL
2769   1673 D7            push a
2770   1674 11            mov a, b
2771   1675 26 37 00      mov b, $37
2772   1678 B0            cmp a, b
2773   1679 FD 71         seq ; ==
2774   167B E4            pop a
2775   167C             ; END RELATIONAL
2776   167C FD A7         sand a, b ; &&
2777   167E E4            pop a
2778   167F E7            pop d
2779   1680 FD 43         mov [d], b
2780   1682             ;; pass = pass && ca[0] == 'A'; 
2781   1682 FA FF FF      lea d, [bp + -1] ; $pass
2782   1685 DA            push d
2783   1686 FA FF FF      lea d, [bp + -1] ; $pass
2784   1689 2A            mov b, [d]
2785   168A D7            push a
2786   168B 11            mov a, b
2787   168C 2C 08 00      mov b, [bp + 8] ; $ca
2788   168F 74            mov d, b
2789   1690 D7            push a
2790   1691 DA            push d
2791   1692 26 00 00      mov b, $0
2792   1695 E7            pop d
2793   1696 5A            add d, b
2794   1697 E4            pop a
2795   1698 32            mov bl, [d]
2796   1699 A7 00         mov bh, 0
2797   169B             ; START RELATIONAL
2798   169B D7            push a
2799   169C 11            mov a, b
2800   169D 26 41 00      mov b, $41
2801   16A0 B0            cmp a, b
2802   16A1 FD 71         seq ; ==
2803   16A3 E4            pop a
2804   16A4             ; END RELATIONAL
2805   16A4 FD A7         sand a, b ; &&
2806   16A6 E4            pop a
2807   16A7 E7            pop d
2808   16A8 FD 43         mov [d], b
2809   16AA             ;; pass = pass && ca[1] == 'B'; 
2810   16AA FA FF FF      lea d, [bp + -1] ; $pass
2811   16AD DA            push d
2812   16AE FA FF FF      lea d, [bp + -1] ; $pass
2813   16B1 2A            mov b, [d]
2814   16B2 D7            push a
2815   16B3 11            mov a, b
2816   16B4 2C 08 00      mov b, [bp + 8] ; $ca
2817   16B7 74            mov d, b
2818   16B8 D7            push a
2819   16B9 DA            push d
2820   16BA 26 01 00      mov b, $1
2821   16BD E7            pop d
2822   16BE 5A            add d, b
2823   16BF E4            pop a
2824   16C0 32            mov bl, [d]
2825   16C1 A7 00         mov bh, 0
2826   16C3             ; START RELATIONAL
2827   16C3 D7            push a
2828   16C4 11            mov a, b
2829   16C5 26 42 00      mov b, $42
2830   16C8 B0            cmp a, b
2831   16C9 FD 71         seq ; ==
2832   16CB E4            pop a
2833   16CC             ; END RELATIONAL
2834   16CC FD A7         sand a, b ; &&
2835   16CE E4            pop a
2836   16CF E7            pop d
2837   16D0 FD 43         mov [d], b
2838   16D2             ;; pass = pass && ca[2] == 'C'; 
2839   16D2 FA FF FF      lea d, [bp + -1] ; $pass
2840   16D5 DA            push d
2841   16D6 FA FF FF      lea d, [bp + -1] ; $pass
2842   16D9 2A            mov b, [d]
2843   16DA D7            push a
2844   16DB 11            mov a, b
2845   16DC 2C 08 00      mov b, [bp + 8] ; $ca
2846   16DF 74            mov d, b
2847   16E0 D7            push a
2848   16E1 DA            push d
2849   16E2 26 02 00      mov b, $2
2850   16E5 E7            pop d
2851   16E6 5A            add d, b
2852   16E7 E4            pop a
2853   16E8 32            mov bl, [d]
2854   16E9 A7 00         mov bh, 0
2855   16EB             ; START RELATIONAL
2856   16EB D7            push a
2857   16EC 11            mov a, b
2858   16ED 26 43 00      mov b, $43
2859   16F0 B0            cmp a, b
2860   16F1 FD 71         seq ; ==
2861   16F3 E4            pop a
2862   16F4             ; END RELATIONAL
2863   16F4 FD A7         sand a, b ; &&
2864   16F6 E4            pop a
2865   16F7 E7            pop d
2866   16F8 FD 43         mov [d], b
2867   16FA             ;; pass = pass && ca[3] == 'D'; 
2868   16FA FA FF FF      lea d, [bp + -1] ; $pass
2869   16FD DA            push d
2870   16FE FA FF FF      lea d, [bp + -1] ; $pass
2871   1701 2A            mov b, [d]
2872   1702 D7            push a
2873   1703 11            mov a, b
2874   1704 2C 08 00      mov b, [bp + 8] ; $ca
2875   1707 74            mov d, b
2876   1708 D7            push a
2877   1709 DA            push d
2878   170A 26 03 00      mov b, $3
2879   170D E7            pop d
2880   170E 5A            add d, b
2881   170F E4            pop a
2882   1710 32            mov bl, [d]
2883   1711 A7 00         mov bh, 0
2884   1713             ; START RELATIONAL
2885   1713 D7            push a
2886   1714 11            mov a, b
2887   1715 26 44 00      mov b, $44
2888   1718 B0            cmp a, b
2889   1719 FD 71         seq ; ==
2890   171B E4            pop a
2891   171C             ; END RELATIONAL
2892   171C FD A7         sand a, b ; &&
2893   171E E4            pop a
2894   171F E7            pop d
2895   1720 FD 43         mov [d], b
2896   1722             ;; pass = pass && ca[4] == 'E'; 
2897   1722 FA FF FF      lea d, [bp + -1] ; $pass
2898   1725 DA            push d
2899   1726 FA FF FF      lea d, [bp + -1] ; $pass
2900   1729 2A            mov b, [d]
2901   172A D7            push a
2902   172B 11            mov a, b
2903   172C 2C 08 00      mov b, [bp + 8] ; $ca
2904   172F 74            mov d, b
2905   1730 D7            push a
2906   1731 DA            push d
2907   1732 26 04 00      mov b, $4
2908   1735 E7            pop d
2909   1736 5A            add d, b
2910   1737 E4            pop a
2911   1738 32            mov bl, [d]
2912   1739 A7 00         mov bh, 0
2913   173B             ; START RELATIONAL
2914   173B D7            push a
2915   173C 11            mov a, b
2916   173D 26 45 00      mov b, $45
2917   1740 B0            cmp a, b
2918   1741 FD 71         seq ; ==
2919   1743 E4            pop a
2920   1744             ; END RELATIONAL
2921   1744 FD A7         sand a, b ; &&
2922   1746 E4            pop a
2923   1747 E7            pop d
2924   1748 FD 43         mov [d], b
2925   174A             ;; pass = pass && ia[0] == 0; 
2926   174A FA FF FF      lea d, [bp + -1] ; $pass
2927   174D DA            push d
2928   174E FA FF FF      lea d, [bp + -1] ; $pass
2929   1751 2A            mov b, [d]
2930   1752 D7            push a
2931   1753 11            mov a, b
2932   1754 2C 0A 00      mov b, [bp + 10] ; $ia
2933   1757 74            mov d, b
2934   1758 D7            push a
2935   1759 DA            push d
2936   175A 26 00 00      mov b, $0
2937   175D E7            pop d
2938   175E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2939   1762 E4            pop a
2940   1763 2A            mov b, [d]
2941   1764             ; START RELATIONAL
2942   1764 D7            push a
2943   1765 11            mov a, b
2944   1766 26 00 00      mov b, $0
2945   1769 B0            cmp a, b
2946   176A FD 71         seq ; ==
2947   176C E4            pop a
2948   176D             ; END RELATIONAL
2949   176D FD A7         sand a, b ; &&
2950   176F E4            pop a
2951   1770 E7            pop d
2952   1771 FD 43         mov [d], b
2953   1773             ;; pass = pass && ia[1] == 1; 
2954   1773 FA FF FF      lea d, [bp + -1] ; $pass
2955   1776 DA            push d
2956   1777 FA FF FF      lea d, [bp + -1] ; $pass
2957   177A 2A            mov b, [d]
2958   177B D7            push a
2959   177C 11            mov a, b
2960   177D 2C 0A 00      mov b, [bp + 10] ; $ia
2961   1780 74            mov d, b
2962   1781 D7            push a
2963   1782 DA            push d
2964   1783 26 01 00      mov b, $1
2965   1786 E7            pop d
2966   1787 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2967   178B E4            pop a
2968   178C 2A            mov b, [d]
2969   178D             ; START RELATIONAL
2970   178D D7            push a
2971   178E 11            mov a, b
2972   178F 26 01 00      mov b, $1
2973   1792 B0            cmp a, b
2974   1793 FD 71         seq ; ==
2975   1795 E4            pop a
2976   1796             ; END RELATIONAL
2977   1796 FD A7         sand a, b ; &&
2978   1798 E4            pop a
2979   1799 E7            pop d
2980   179A FD 43         mov [d], b
2981   179C             ;; pass = pass && ia[2] == 2; 
2982   179C FA FF FF      lea d, [bp + -1] ; $pass
2983   179F DA            push d
2984   17A0 FA FF FF      lea d, [bp + -1] ; $pass
2985   17A3 2A            mov b, [d]
2986   17A4 D7            push a
2987   17A5 11            mov a, b
2988   17A6 2C 0A 00      mov b, [bp + 10] ; $ia
2989   17A9 74            mov d, b
2990   17AA D7            push a
2991   17AB DA            push d
2992   17AC 26 02 00      mov b, $2
2993   17AF E7            pop d
2994   17B0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2995   17B4 E4            pop a
2996   17B5 2A            mov b, [d]
2997   17B6             ; START RELATIONAL
2998   17B6 D7            push a
2999   17B7 11            mov a, b
3000   17B8 26 02 00      mov b, $2
3001   17BB B0            cmp a, b
3002   17BC FD 71         seq ; ==
3003   17BE E4            pop a
3004   17BF             ; END RELATIONAL
3005   17BF FD A7         sand a, b ; &&
3006   17C1 E4            pop a
3007   17C2 E7            pop d
3008   17C3 FD 43         mov [d], b
3009   17C5             ;; pass = pass && ia[3] == 3; 
3010   17C5 FA FF FF      lea d, [bp + -1] ; $pass
3011   17C8 DA            push d
3012   17C9 FA FF FF      lea d, [bp + -1] ; $pass
3013   17CC 2A            mov b, [d]
3014   17CD D7            push a
3015   17CE 11            mov a, b
3016   17CF 2C 0A 00      mov b, [bp + 10] ; $ia
3017   17D2 74            mov d, b
3018   17D3 D7            push a
3019   17D4 DA            push d
3020   17D5 26 03 00      mov b, $3
3021   17D8 E7            pop d
3022   17D9 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3023   17DD E4            pop a
3024   17DE 2A            mov b, [d]
3025   17DF             ; START RELATIONAL
3026   17DF D7            push a
3027   17E0 11            mov a, b
3028   17E1 26 03 00      mov b, $3
3029   17E4 B0            cmp a, b
3030   17E5 FD 71         seq ; ==
3031   17E7 E4            pop a
3032   17E8             ; END RELATIONAL
3033   17E8 FD A7         sand a, b ; &&
3034   17EA E4            pop a
3035   17EB E7            pop d
3036   17EC FD 43         mov [d], b
3037   17EE             ;; pass = pass && ia[4] == 4; 
3038   17EE FA FF FF      lea d, [bp + -1] ; $pass
3039   17F1 DA            push d
3040   17F2 FA FF FF      lea d, [bp + -1] ; $pass
3041   17F5 2A            mov b, [d]
3042   17F6 D7            push a
3043   17F7 11            mov a, b
3044   17F8 2C 0A 00      mov b, [bp + 10] ; $ia
3045   17FB 74            mov d, b
3046   17FC D7            push a
3047   17FD DA            push d
3048   17FE 26 04 00      mov b, $4
3049   1801 E7            pop d
3050   1802 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3051   1806 E4            pop a
3052   1807 2A            mov b, [d]
3053   1808             ; START RELATIONAL
3054   1808 D7            push a
3055   1809 11            mov a, b
3056   180A 26 04 00      mov b, $4
3057   180D B0            cmp a, b
3058   180E FD 71         seq ; ==
3059   1810 E4            pop a
3060   1811             ; END RELATIONAL
3061   1811 FD A7         sand a, b ; &&
3062   1813 E4            pop a
3063   1814 E7            pop d
3064   1815 FD 43         mov [d], b
3065   1817             ;; return pass; 
3066   1817 FA FF FF      lea d, [bp + -1] ; $pass
3067   181A 2A            mov b, [d]
3068   181B F9            leave
3069   181C 09            ret
3070   181D             
3071   181D             test1:
3072   181D F8 00 00      enter 0 ; (push bp; mov bp, sp)
3073   1820             ; $pass 
3074   1820 10 01 00      mov a, $1
3075   1823 45 FF FF      mov [bp + -1], a
3076   1826             ; $ca 
3077   1826             ; $p 
3078   1826 52 09 00      sub sp, 9
3079   1829             ;; p = ca; 
3080   1829 FA F8 FF      lea d, [bp + -8] ; $p
3081   182C DA            push d
3082   182D FA FA FF      lea d, [bp + -6] ; $ca
3083   1830 2D            mov b, d
3084   1831 E7            pop d
3085   1832 FD 43         mov [d], b
3086   1834             ;; ca[0] = 'A'; 
3087   1834 FA FA FF      lea d, [bp + -6] ; $ca
3088   1837 D7            push a
3089   1838 DA            push d
3090   1839 26 00 00      mov b, $0
3091   183C E7            pop d
3092   183D 5A            add d, b
3093   183E E4            pop a
3094   183F DA            push d
3095   1840 26 41 00      mov b, $41
3096   1843 E7            pop d
3097   1844 FD 3E         mov [d], bl
3098   1846             ;; ca[1] = 'B'; 
3099   1846 FA FA FF      lea d, [bp + -6] ; $ca
3100   1849 D7            push a
3101   184A DA            push d
3102   184B 26 01 00      mov b, $1
3103   184E E7            pop d
3104   184F 5A            add d, b
3105   1850 E4            pop a
3106   1851 DA            push d
3107   1852 26 42 00      mov b, $42
3108   1855 E7            pop d
3109   1856 FD 3E         mov [d], bl
3110   1858             ;; ca[2] = 'C'; 
3111   1858 FA FA FF      lea d, [bp + -6] ; $ca
3112   185B D7            push a
3113   185C DA            push d
3114   185D 26 02 00      mov b, $2
3115   1860 E7            pop d
3116   1861 5A            add d, b
3117   1862 E4            pop a
3118   1863 DA            push d
3119   1864 26 43 00      mov b, $43
3120   1867 E7            pop d
3121   1868 FD 3E         mov [d], bl
3122   186A             ;; ca[3] = 'D'; 
3123   186A FA FA FF      lea d, [bp + -6] ; $ca
3124   186D D7            push a
3125   186E DA            push d
3126   186F 26 03 00      mov b, $3
3127   1872 E7            pop d
3128   1873 5A            add d, b
3129   1874 E4            pop a
3130   1875 DA            push d
3131   1876 26 44 00      mov b, $44
3132   1879 E7            pop d
3133   187A FD 3E         mov [d], bl
3134   187C             ;; ca[4] = 'E'; 
3135   187C FA FA FF      lea d, [bp + -6] ; $ca
3136   187F D7            push a
3137   1880 DA            push d
3138   1881 26 04 00      mov b, $4
3139   1884 E7            pop d
3140   1885 5A            add d, b
3141   1886 E4            pop a
3142   1887 DA            push d
3143   1888 26 45 00      mov b, $45
3144   188B E7            pop d
3145   188C FD 3E         mov [d], bl
3146   188E             ;; pass = pass && *p == 'A'; 
3147   188E FA FF FF      lea d, [bp + -1] ; $pass
3148   1891 DA            push d
3149   1892 FA FF FF      lea d, [bp + -1] ; $pass
3150   1895 2A            mov b, [d]
3151   1896 D7            push a
3152   1897 11            mov a, b
3153   1898 FA F8 FF      lea d, [bp + -8] ; $p
3154   189B 2A            mov b, [d]
3155   189C 74            mov d, b
3156   189D 32            mov bl, [d]
3157   189E A7 00         mov bh, 0
3158   18A0             ; START RELATIONAL
3159   18A0 D7            push a
3160   18A1 11            mov a, b
3161   18A2 26 41 00      mov b, $41
3162   18A5 B0            cmp a, b
3163   18A6 FD 71         seq ; ==
3164   18A8 E4            pop a
3165   18A9             ; END RELATIONAL
3166   18A9 FD A7         sand a, b ; &&
3167   18AB E4            pop a
3168   18AC E7            pop d
3169   18AD FD 43         mov [d], b
3170   18AF             ;; pass = pass && *(p + 1) == 'B'; 
3171   18AF FA FF FF      lea d, [bp + -1] ; $pass
3172   18B2 DA            push d
3173   18B3 FA FF FF      lea d, [bp + -1] ; $pass
3174   18B6 2A            mov b, [d]
3175   18B7 D7            push a
3176   18B8 11            mov a, b
3177   18B9 FA F8 FF      lea d, [bp + -8] ; $p
3178   18BC 2A            mov b, [d]
3179   18BD             ; START TERMS
3180   18BD D7            push a
3181   18BE 11            mov a, b
3182   18BF 26 01 00      mov b, $1
3183   18C2 56            add b, a
3184   18C3 E4            pop a
3185   18C4             ; END TERMS
3186   18C4 74            mov d, b
3187   18C5 32            mov bl, [d]
3188   18C6 A7 00         mov bh, 0
3189   18C8             ; START RELATIONAL
3190   18C8 D7            push a
3191   18C9 11            mov a, b
3192   18CA 26 42 00      mov b, $42
3193   18CD B0            cmp a, b
3194   18CE FD 71         seq ; ==
3195   18D0 E4            pop a
3196   18D1             ; END RELATIONAL
3197   18D1 FD A7         sand a, b ; &&
3198   18D3 E4            pop a
3199   18D4 E7            pop d
3200   18D5 FD 43         mov [d], b
3201   18D7             ;; pass = pass && *(p + 2) == 'C'; 
3202   18D7 FA FF FF      lea d, [bp + -1] ; $pass
3203   18DA DA            push d
3204   18DB FA FF FF      lea d, [bp + -1] ; $pass
3205   18DE 2A            mov b, [d]
3206   18DF D7            push a
3207   18E0 11            mov a, b
3208   18E1 FA F8 FF      lea d, [bp + -8] ; $p
3209   18E4 2A            mov b, [d]
3210   18E5             ; START TERMS
3211   18E5 D7            push a
3212   18E6 11            mov a, b
3213   18E7 26 02 00      mov b, $2
3214   18EA 56            add b, a
3215   18EB E4            pop a
3216   18EC             ; END TERMS
3217   18EC 74            mov d, b
3218   18ED 32            mov bl, [d]
3219   18EE A7 00         mov bh, 0
3220   18F0             ; START RELATIONAL
3221   18F0 D7            push a
3222   18F1 11            mov a, b
3223   18F2 26 43 00      mov b, $43
3224   18F5 B0            cmp a, b
3225   18F6 FD 71         seq ; ==
3226   18F8 E4            pop a
3227   18F9             ; END RELATIONAL
3228   18F9 FD A7         sand a, b ; &&
3229   18FB E4            pop a
3230   18FC E7            pop d
3231   18FD FD 43         mov [d], b
3232   18FF             ;; pass = pass && *(p + 3) == 'D'; 
3233   18FF FA FF FF      lea d, [bp + -1] ; $pass
3234   1902 DA            push d
3235   1903 FA FF FF      lea d, [bp + -1] ; $pass
3236   1906 2A            mov b, [d]
3237   1907 D7            push a
3238   1908 11            mov a, b
3239   1909 FA F8 FF      lea d, [bp + -8] ; $p
3240   190C 2A            mov b, [d]
3241   190D             ; START TERMS
3242   190D D7            push a
3243   190E 11            mov a, b
3244   190F 26 03 00      mov b, $3
3245   1912 56            add b, a
3246   1913 E4            pop a
3247   1914             ; END TERMS
3248   1914 74            mov d, b
3249   1915 32            mov bl, [d]
3250   1916 A7 00         mov bh, 0
3251   1918             ; START RELATIONAL
3252   1918 D7            push a
3253   1919 11            mov a, b
3254   191A 26 44 00      mov b, $44
3255   191D B0            cmp a, b
3256   191E FD 71         seq ; ==
3257   1920 E4            pop a
3258   1921             ; END RELATIONAL
3259   1921 FD A7         sand a, b ; &&
3260   1923 E4            pop a
3261   1924 E7            pop d
3262   1925 FD 43         mov [d], b
3263   1927             ;; pass = pass && *(p + 4) == 'E'; 
3264   1927 FA FF FF      lea d, [bp + -1] ; $pass
3265   192A DA            push d
3266   192B FA FF FF      lea d, [bp + -1] ; $pass
3267   192E 2A            mov b, [d]
3268   192F D7            push a
3269   1930 11            mov a, b
3270   1931 FA F8 FF      lea d, [bp + -8] ; $p
3271   1934 2A            mov b, [d]
3272   1935             ; START TERMS
3273   1935 D7            push a
3274   1936 11            mov a, b
3275   1937 26 04 00      mov b, $4
3276   193A 56            add b, a
3277   193B E4            pop a
3278   193C             ; END TERMS
3279   193C 74            mov d, b
3280   193D 32            mov bl, [d]
3281   193E A7 00         mov bh, 0
3282   1940             ; START RELATIONAL
3283   1940 D7            push a
3284   1941 11            mov a, b
3285   1942 26 45 00      mov b, $45
3286   1945 B0            cmp a, b
3287   1946 FD 71         seq ; ==
3288   1948 E4            pop a
3289   1949             ; END RELATIONAL
3290   1949 FD A7         sand a, b ; &&
3291   194B E4            pop a
3292   194C E7            pop d
3293   194D FD 43         mov [d], b
3294   194F             ;; return pass; 
3295   194F FA FF FF      lea d, [bp + -1] ; $pass
3296   1952 2A            mov b, [d]
3297   1953 F9            leave
3298   1954 09            ret
3299   1955             
3300   1955             test2:
3301   1955 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3302   1958             ; $pass 
3303   1958 10 01 00      mov a, $1
3304   195B 45 FF FF      mov [bp + -1], a
3305   195E             ; $ca 
3306   195E             ; $indices 
3307   195E             ; $p 
3308   195E 52 13 00      sub sp, 19
3309   1961             ;; p = ca; 
3310   1961 FA EE FF      lea d, [bp + -18] ; $p
3311   1964 DA            push d
3312   1965 FA FA FF      lea d, [bp + -6] ; $ca
3313   1968 2D            mov b, d
3314   1969 E7            pop d
3315   196A FD 43         mov [d], b
3316   196C             ;; ca[0] = 'A'; 
3317   196C FA FA FF      lea d, [bp + -6] ; $ca
3318   196F D7            push a
3319   1970 DA            push d
3320   1971 26 00 00      mov b, $0
3321   1974 E7            pop d
3322   1975 5A            add d, b
3323   1976 E4            pop a
3324   1977 DA            push d
3325   1978 26 41 00      mov b, $41
3326   197B E7            pop d
3327   197C FD 3E         mov [d], bl
3328   197E             ;; ca[1] = 'B'; 
3329   197E FA FA FF      lea d, [bp + -6] ; $ca
3330   1981 D7            push a
3331   1982 DA            push d
3332   1983 26 01 00      mov b, $1
3333   1986 E7            pop d
3334   1987 5A            add d, b
3335   1988 E4            pop a
3336   1989 DA            push d
3337   198A 26 42 00      mov b, $42
3338   198D E7            pop d
3339   198E FD 3E         mov [d], bl
3340   1990             ;; ca[2] = 'C'; 
3341   1990 FA FA FF      lea d, [bp + -6] ; $ca
3342   1993 D7            push a
3343   1994 DA            push d
3344   1995 26 02 00      mov b, $2
3345   1998 E7            pop d
3346   1999 5A            add d, b
3347   199A E4            pop a
3348   199B DA            push d
3349   199C 26 43 00      mov b, $43
3350   199F E7            pop d
3351   19A0 FD 3E         mov [d], bl
3352   19A2             ;; ca[3] = 'D'; 
3353   19A2 FA FA FF      lea d, [bp + -6] ; $ca
3354   19A5 D7            push a
3355   19A6 DA            push d
3356   19A7 26 03 00      mov b, $3
3357   19AA E7            pop d
3358   19AB 5A            add d, b
3359   19AC E4            pop a
3360   19AD DA            push d
3361   19AE 26 44 00      mov b, $44
3362   19B1 E7            pop d
3363   19B2 FD 3E         mov [d], bl
3364   19B4             ;; ca[4] = 'E'; 
3365   19B4 FA FA FF      lea d, [bp + -6] ; $ca
3366   19B7 D7            push a
3367   19B8 DA            push d
3368   19B9 26 04 00      mov b, $4
3369   19BC E7            pop d
3370   19BD 5A            add d, b
3371   19BE E4            pop a
3372   19BF DA            push d
3373   19C0 26 45 00      mov b, $45
3374   19C3 E7            pop d
3375   19C4 FD 3E         mov [d], bl
3376   19C6             ;; indices[0] = 0; 
3377   19C6 FA F0 FF      lea d, [bp + -16] ; $indices
3378   19C9 D7            push a
3379   19CA DA            push d
3380   19CB 26 00 00      mov b, $0
3381   19CE E7            pop d
3382   19CF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3383   19D3 E4            pop a
3384   19D4 DA            push d
3385   19D5 26 00 00      mov b, $0
3386   19D8 E7            pop d
3387   19D9 FD 43         mov [d], b
3388   19DB             ;; indices[1] = 1; 
3389   19DB FA F0 FF      lea d, [bp + -16] ; $indices
3390   19DE D7            push a
3391   19DF DA            push d
3392   19E0 26 01 00      mov b, $1
3393   19E3 E7            pop d
3394   19E4 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3395   19E8 E4            pop a
3396   19E9 DA            push d
3397   19EA 26 01 00      mov b, $1
3398   19ED E7            pop d
3399   19EE FD 43         mov [d], b
3400   19F0             ;; indices[2] = 2; 
3401   19F0 FA F0 FF      lea d, [bp + -16] ; $indices
3402   19F3 D7            push a
3403   19F4 DA            push d
3404   19F5 26 02 00      mov b, $2
3405   19F8 E7            pop d
3406   19F9 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3407   19FD E4            pop a
3408   19FE DA            push d
3409   19FF 26 02 00      mov b, $2
3410   1A02 E7            pop d
3411   1A03 FD 43         mov [d], b
3412   1A05             ;; indices[3] = 3; 
3413   1A05 FA F0 FF      lea d, [bp + -16] ; $indices
3414   1A08 D7            push a
3415   1A09 DA            push d
3416   1A0A 26 03 00      mov b, $3
3417   1A0D E7            pop d
3418   1A0E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3419   1A12 E4            pop a
3420   1A13 DA            push d
3421   1A14 26 03 00      mov b, $3
3422   1A17 E7            pop d
3423   1A18 FD 43         mov [d], b
3424   1A1A             ;; indices[4] = 4; 
3425   1A1A FA F0 FF      lea d, [bp + -16] ; $indices
3426   1A1D D7            push a
3427   1A1E DA            push d
3428   1A1F 26 04 00      mov b, $4
3429   1A22 E7            pop d
3430   1A23 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3431   1A27 E4            pop a
3432   1A28 DA            push d
3433   1A29 26 04 00      mov b, $4
3434   1A2C E7            pop d
3435   1A2D FD 43         mov [d], b
3436   1A2F             ;; pass = pass && *(p + indices[0]) == 'A'; 
3437   1A2F FA FF FF      lea d, [bp + -1] ; $pass
3438   1A32 DA            push d
3439   1A33 FA FF FF      lea d, [bp + -1] ; $pass
3440   1A36 2A            mov b, [d]
3441   1A37 D7            push a
3442   1A38 11            mov a, b
3443   1A39 FA EE FF      lea d, [bp + -18] ; $p
3444   1A3C 2A            mov b, [d]
3445   1A3D             ; START TERMS
3446   1A3D D7            push a
3447   1A3E 11            mov a, b
3448   1A3F FA F0 FF      lea d, [bp + -16] ; $indices
3449   1A42 D7            push a
3450   1A43 DA            push d
3451   1A44 26 00 00      mov b, $0
3452   1A47 E7            pop d
3453   1A48 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3454   1A4C E4            pop a
3455   1A4D 2A            mov b, [d]
3456   1A4E 56            add b, a
3457   1A4F E4            pop a
3458   1A50             ; END TERMS
3459   1A50 74            mov d, b
3460   1A51 32            mov bl, [d]
3461   1A52 A7 00         mov bh, 0
3462   1A54             ; START RELATIONAL
3463   1A54 D7            push a
3464   1A55 11            mov a, b
3465   1A56 26 41 00      mov b, $41
3466   1A59 B0            cmp a, b
3467   1A5A FD 71         seq ; ==
3468   1A5C E4            pop a
3469   1A5D             ; END RELATIONAL
3470   1A5D FD A7         sand a, b ; &&
3471   1A5F E4            pop a
3472   1A60 E7            pop d
3473   1A61 FD 43         mov [d], b
3474   1A63             ;; pass = pass && *(p + indices[1]) == 'B'; 
3475   1A63 FA FF FF      lea d, [bp + -1] ; $pass
3476   1A66 DA            push d
3477   1A67 FA FF FF      lea d, [bp + -1] ; $pass
3478   1A6A 2A            mov b, [d]
3479   1A6B D7            push a
3480   1A6C 11            mov a, b
3481   1A6D FA EE FF      lea d, [bp + -18] ; $p
3482   1A70 2A            mov b, [d]
3483   1A71             ; START TERMS
3484   1A71 D7            push a
3485   1A72 11            mov a, b
3486   1A73 FA F0 FF      lea d, [bp + -16] ; $indices
3487   1A76 D7            push a
3488   1A77 DA            push d
3489   1A78 26 01 00      mov b, $1
3490   1A7B E7            pop d
3491   1A7C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3492   1A80 E4            pop a
3493   1A81 2A            mov b, [d]
3494   1A82 56            add b, a
3495   1A83 E4            pop a
3496   1A84             ; END TERMS
3497   1A84 74            mov d, b
3498   1A85 32            mov bl, [d]
3499   1A86 A7 00         mov bh, 0
3500   1A88             ; START RELATIONAL
3501   1A88 D7            push a
3502   1A89 11            mov a, b
3503   1A8A 26 42 00      mov b, $42
3504   1A8D B0            cmp a, b
3505   1A8E FD 71         seq ; ==
3506   1A90 E4            pop a
3507   1A91             ; END RELATIONAL
3508   1A91 FD A7         sand a, b ; &&
3509   1A93 E4            pop a
3510   1A94 E7            pop d
3511   1A95 FD 43         mov [d], b
3512   1A97             ;; pass = pass && *(p + indices[2]) == 'C'; 
3513   1A97 FA FF FF      lea d, [bp + -1] ; $pass
3514   1A9A DA            push d
3515   1A9B FA FF FF      lea d, [bp + -1] ; $pass
3516   1A9E 2A            mov b, [d]
3517   1A9F D7            push a
3518   1AA0 11            mov a, b
3519   1AA1 FA EE FF      lea d, [bp + -18] ; $p
3520   1AA4 2A            mov b, [d]
3521   1AA5             ; START TERMS
3522   1AA5 D7            push a
3523   1AA6 11            mov a, b
3524   1AA7 FA F0 FF      lea d, [bp + -16] ; $indices
3525   1AAA D7            push a
3526   1AAB DA            push d
3527   1AAC 26 02 00      mov b, $2
3528   1AAF E7            pop d
3529   1AB0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3530   1AB4 E4            pop a
3531   1AB5 2A            mov b, [d]
3532   1AB6 56            add b, a
3533   1AB7 E4            pop a
3534   1AB8             ; END TERMS
3535   1AB8 74            mov d, b
3536   1AB9 32            mov bl, [d]
3537   1ABA A7 00         mov bh, 0
3538   1ABC             ; START RELATIONAL
3539   1ABC D7            push a
3540   1ABD 11            mov a, b
3541   1ABE 26 43 00      mov b, $43
3542   1AC1 B0            cmp a, b
3543   1AC2 FD 71         seq ; ==
3544   1AC4 E4            pop a
3545   1AC5             ; END RELATIONAL
3546   1AC5 FD A7         sand a, b ; &&
3547   1AC7 E4            pop a
3548   1AC8 E7            pop d
3549   1AC9 FD 43         mov [d], b
3550   1ACB             ;; pass = pass && *(p + indices[3]) == 'D'; 
3551   1ACB FA FF FF      lea d, [bp + -1] ; $pass
3552   1ACE DA            push d
3553   1ACF FA FF FF      lea d, [bp + -1] ; $pass
3554   1AD2 2A            mov b, [d]
3555   1AD3 D7            push a
3556   1AD4 11            mov a, b
3557   1AD5 FA EE FF      lea d, [bp + -18] ; $p
3558   1AD8 2A            mov b, [d]
3559   1AD9             ; START TERMS
3560   1AD9 D7            push a
3561   1ADA 11            mov a, b
3562   1ADB FA F0 FF      lea d, [bp + -16] ; $indices
3563   1ADE D7            push a
3564   1ADF DA            push d
3565   1AE0 26 03 00      mov b, $3
3566   1AE3 E7            pop d
3567   1AE4 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3568   1AE8 E4            pop a
3569   1AE9 2A            mov b, [d]
3570   1AEA 56            add b, a
3571   1AEB E4            pop a
3572   1AEC             ; END TERMS
3573   1AEC 74            mov d, b
3574   1AED 32            mov bl, [d]
3575   1AEE A7 00         mov bh, 0
3576   1AF0             ; START RELATIONAL
3577   1AF0 D7            push a
3578   1AF1 11            mov a, b
3579   1AF2 26 44 00      mov b, $44
3580   1AF5 B0            cmp a, b
3581   1AF6 FD 71         seq ; ==
3582   1AF8 E4            pop a
3583   1AF9             ; END RELATIONAL
3584   1AF9 FD A7         sand a, b ; &&
3585   1AFB E4            pop a
3586   1AFC E7            pop d
3587   1AFD FD 43         mov [d], b
3588   1AFF             ;; pass = pass && *(p + indices[4]) == 'E'; 
3589   1AFF FA FF FF      lea d, [bp + -1] ; $pass
3590   1B02 DA            push d
3591   1B03 FA FF FF      lea d, [bp + -1] ; $pass
3592   1B06 2A            mov b, [d]
3593   1B07 D7            push a
3594   1B08 11            mov a, b
3595   1B09 FA EE FF      lea d, [bp + -18] ; $p
3596   1B0C 2A            mov b, [d]
3597   1B0D             ; START TERMS
3598   1B0D D7            push a
3599   1B0E 11            mov a, b
3600   1B0F FA F0 FF      lea d, [bp + -16] ; $indices
3601   1B12 D7            push a
3602   1B13 DA            push d
3603   1B14 26 04 00      mov b, $4
3604   1B17 E7            pop d
3605   1B18 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3606   1B1C E4            pop a
3607   1B1D 2A            mov b, [d]
3608   1B1E 56            add b, a
3609   1B1F E4            pop a
3610   1B20             ; END TERMS
3611   1B20 74            mov d, b
3612   1B21 32            mov bl, [d]
3613   1B22 A7 00         mov bh, 0
3614   1B24             ; START RELATIONAL
3615   1B24 D7            push a
3616   1B25 11            mov a, b
3617   1B26 26 45 00      mov b, $45
3618   1B29 B0            cmp a, b
3619   1B2A FD 71         seq ; ==
3620   1B2C E4            pop a
3621   1B2D             ; END RELATIONAL
3622   1B2D FD A7         sand a, b ; &&
3623   1B2F E4            pop a
3624   1B30 E7            pop d
3625   1B31 FD 43         mov [d], b
3626   1B33             ;; return pass; 
3627   1B33 FA FF FF      lea d, [bp + -1] ; $pass
3628   1B36 2A            mov b, [d]
3629   1B37 F9            leave
3630   1B38 09            ret
3631   1B39             
3632   1B39             test3:
3633   1B39 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3634   1B3C             ; $pass 
3635   1B3C 10 01 00      mov a, $1
3636   1B3F 45 FF FF      mov [bp + -1], a
3637   1B42 52 02 00      sub sp, 2
3638   1B45             ;; st.c = 'A'; 
3639   1B45 FA 05 00      lea d, [bp + 5] ; $st
3640   1B48 58 00 00      add d, 0
3641   1B4B DA            push d
3642   1B4C 26 41 00      mov b, $41
3643   1B4F E7            pop d
3644   1B50 FD 3E         mov [d], bl
3645   1B52             ;; st.i = 277; 
3646   1B52 FA 05 00      lea d, [bp + 5] ; $st
3647   1B55 58 01 00      add d, 1
3648   1B58 DA            push d
3649   1B59 26 15 01      mov b, $115
3650   1B5C E7            pop d
3651   1B5D FD 43         mov [d], b
3652   1B5F             ;; st.m[0] = 0; 
3653   1B5F FA 05 00      lea d, [bp + 5] ; $st
3654   1B62 58 03 00      add d, 3
3655   1B65 D7            push a
3656   1B66 DA            push d
3657   1B67 26 00 00      mov b, $0
3658   1B6A E7            pop d
3659   1B6B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3660   1B6F E4            pop a
3661   1B70 DA            push d
3662   1B71 26 00 00      mov b, $0
3663   1B74 E7            pop d
3664   1B75 FD 43         mov [d], b
3665   1B77             ;; st.m[1] = 1; 
3666   1B77 FA 05 00      lea d, [bp + 5] ; $st
3667   1B7A 58 03 00      add d, 3
3668   1B7D D7            push a
3669   1B7E DA            push d
3670   1B7F 26 01 00      mov b, $1
3671   1B82 E7            pop d
3672   1B83 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3673   1B87 E4            pop a
3674   1B88 DA            push d
3675   1B89 26 01 00      mov b, $1
3676   1B8C E7            pop d
3677   1B8D FD 43         mov [d], b
3678   1B8F             ;; st.m[2] = 2; 
3679   1B8F FA 05 00      lea d, [bp + 5] ; $st
3680   1B92 58 03 00      add d, 3
3681   1B95 D7            push a
3682   1B96 DA            push d
3683   1B97 26 02 00      mov b, $2
3684   1B9A E7            pop d
3685   1B9B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3686   1B9F E4            pop a
3687   1BA0 DA            push d
3688   1BA1 26 02 00      mov b, $2
3689   1BA4 E7            pop d
3690   1BA5 FD 43         mov [d], b
3691   1BA7             ;; st.m[3] = 3; 
3692   1BA7 FA 05 00      lea d, [bp + 5] ; $st
3693   1BAA 58 03 00      add d, 3
3694   1BAD D7            push a
3695   1BAE DA            push d
3696   1BAF 26 03 00      mov b, $3
3697   1BB2 E7            pop d
3698   1BB3 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3699   1BB7 E4            pop a
3700   1BB8 DA            push d
3701   1BB9 26 03 00      mov b, $3
3702   1BBC E7            pop d
3703   1BBD FD 43         mov [d], b
3704   1BBF             ;; st.m[4] = 4; 
3705   1BBF FA 05 00      lea d, [bp + 5] ; $st
3706   1BC2 58 03 00      add d, 3
3707   1BC5 D7            push a
3708   1BC6 DA            push d
3709   1BC7 26 04 00      mov b, $4
3710   1BCA E7            pop d
3711   1BCB FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3712   1BCF E4            pop a
3713   1BD0 DA            push d
3714   1BD1 26 04 00      mov b, $4
3715   1BD4 E7            pop d
3716   1BD5 FD 43         mov [d], b
3717   1BD7             ;; pass = pass && st.c == 'A'; 
3718   1BD7 FA FF FF      lea d, [bp + -1] ; $pass
3719   1BDA DA            push d
3720   1BDB FA FF FF      lea d, [bp + -1] ; $pass
3721   1BDE 2A            mov b, [d]
3722   1BDF D7            push a
3723   1BE0 11            mov a, b
3724   1BE1 FA 05 00      lea d, [bp + 5] ; $st
3725   1BE4 58 00 00      add d, 0
3726   1BE7 32            mov bl, [d]
3727   1BE8 A7 00         mov bh, 0
3728   1BEA             ; START RELATIONAL
3729   1BEA D7            push a
3730   1BEB 11            mov a, b
3731   1BEC 26 41 00      mov b, $41
3732   1BEF B0            cmp a, b
3733   1BF0 FD 71         seq ; ==
3734   1BF2 E4            pop a
3735   1BF3             ; END RELATIONAL
3736   1BF3 FD A7         sand a, b ; &&
3737   1BF5 E4            pop a
3738   1BF6 E7            pop d
3739   1BF7 FD 43         mov [d], b
3740   1BF9             ;; pass = pass && st.i == 277; 
3741   1BF9 FA FF FF      lea d, [bp + -1] ; $pass
3742   1BFC DA            push d
3743   1BFD FA FF FF      lea d, [bp + -1] ; $pass
3744   1C00 2A            mov b, [d]
3745   1C01 D7            push a
3746   1C02 11            mov a, b
3747   1C03 FA 05 00      lea d, [bp + 5] ; $st
3748   1C06 58 01 00      add d, 1
3749   1C09 2A            mov b, [d]
3750   1C0A             ; START RELATIONAL
3751   1C0A D7            push a
3752   1C0B 11            mov a, b
3753   1C0C 26 15 01      mov b, $115
3754   1C0F B0            cmp a, b
3755   1C10 FD 71         seq ; ==
3756   1C12 E4            pop a
3757   1C13             ; END RELATIONAL
3758   1C13 FD A7         sand a, b ; &&
3759   1C15 E4            pop a
3760   1C16 E7            pop d
3761   1C17 FD 43         mov [d], b
3762   1C19             ;; pass = pass && st.m[0] == 0; 
3763   1C19 FA FF FF      lea d, [bp + -1] ; $pass
3764   1C1C DA            push d
3765   1C1D FA FF FF      lea d, [bp + -1] ; $pass
3766   1C20 2A            mov b, [d]
3767   1C21 D7            push a
3768   1C22 11            mov a, b
3769   1C23 FA 05 00      lea d, [bp + 5] ; $st
3770   1C26 58 03 00      add d, 3
3771   1C29 D7            push a
3772   1C2A DA            push d
3773   1C2B 26 00 00      mov b, $0
3774   1C2E E7            pop d
3775   1C2F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3776   1C33 E4            pop a
3777   1C34 2A            mov b, [d]
3778   1C35             ; START RELATIONAL
3779   1C35 D7            push a
3780   1C36 11            mov a, b
3781   1C37 26 00 00      mov b, $0
3782   1C3A B0            cmp a, b
3783   1C3B FD 71         seq ; ==
3784   1C3D E4            pop a
3785   1C3E             ; END RELATIONAL
3786   1C3E FD A7         sand a, b ; &&
3787   1C40 E4            pop a
3788   1C41 E7            pop d
3789   1C42 FD 43         mov [d], b
3790   1C44             ;; pass = pass && st.m[1] == 1; 
3791   1C44 FA FF FF      lea d, [bp + -1] ; $pass
3792   1C47 DA            push d
3793   1C48 FA FF FF      lea d, [bp + -1] ; $pass
3794   1C4B 2A            mov b, [d]
3795   1C4C D7            push a
3796   1C4D 11            mov a, b
3797   1C4E FA 05 00      lea d, [bp + 5] ; $st
3798   1C51 58 03 00      add d, 3
3799   1C54 D7            push a
3800   1C55 DA            push d
3801   1C56 26 01 00      mov b, $1
3802   1C59 E7            pop d
3803   1C5A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3804   1C5E E4            pop a
3805   1C5F 2A            mov b, [d]
3806   1C60             ; START RELATIONAL
3807   1C60 D7            push a
3808   1C61 11            mov a, b
3809   1C62 26 01 00      mov b, $1
3810   1C65 B0            cmp a, b
3811   1C66 FD 71         seq ; ==
3812   1C68 E4            pop a
3813   1C69             ; END RELATIONAL
3814   1C69 FD A7         sand a, b ; &&
3815   1C6B E4            pop a
3816   1C6C E7            pop d
3817   1C6D FD 43         mov [d], b
3818   1C6F             ;; pass = pass && st.m[2] == 2; 
3819   1C6F FA FF FF      lea d, [bp + -1] ; $pass
3820   1C72 DA            push d
3821   1C73 FA FF FF      lea d, [bp + -1] ; $pass
3822   1C76 2A            mov b, [d]
3823   1C77 D7            push a
3824   1C78 11            mov a, b
3825   1C79 FA 05 00      lea d, [bp + 5] ; $st
3826   1C7C 58 03 00      add d, 3
3827   1C7F D7            push a
3828   1C80 DA            push d
3829   1C81 26 02 00      mov b, $2
3830   1C84 E7            pop d
3831   1C85 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3832   1C89 E4            pop a
3833   1C8A 2A            mov b, [d]
3834   1C8B             ; START RELATIONAL
3835   1C8B D7            push a
3836   1C8C 11            mov a, b
3837   1C8D 26 02 00      mov b, $2
3838   1C90 B0            cmp a, b
3839   1C91 FD 71         seq ; ==
3840   1C93 E4            pop a
3841   1C94             ; END RELATIONAL
3842   1C94 FD A7         sand a, b ; &&
3843   1C96 E4            pop a
3844   1C97 E7            pop d
3845   1C98 FD 43         mov [d], b
3846   1C9A             ;; pass = pass && st.m[3] == 3; 
3847   1C9A FA FF FF      lea d, [bp + -1] ; $pass
3848   1C9D DA            push d
3849   1C9E FA FF FF      lea d, [bp + -1] ; $pass
3850   1CA1 2A            mov b, [d]
3851   1CA2 D7            push a
3852   1CA3 11            mov a, b
3853   1CA4 FA 05 00      lea d, [bp + 5] ; $st
3854   1CA7 58 03 00      add d, 3
3855   1CAA D7            push a
3856   1CAB DA            push d
3857   1CAC 26 03 00      mov b, $3
3858   1CAF E7            pop d
3859   1CB0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3860   1CB4 E4            pop a
3861   1CB5 2A            mov b, [d]
3862   1CB6             ; START RELATIONAL
3863   1CB6 D7            push a
3864   1CB7 11            mov a, b
3865   1CB8 26 03 00      mov b, $3
3866   1CBB B0            cmp a, b
3867   1CBC FD 71         seq ; ==
3868   1CBE E4            pop a
3869   1CBF             ; END RELATIONAL
3870   1CBF FD A7         sand a, b ; &&
3871   1CC1 E4            pop a
3872   1CC2 E7            pop d
3873   1CC3 FD 43         mov [d], b
3874   1CC5             ;; pass = pass && st.m[4] == 4; 
3875   1CC5 FA FF FF      lea d, [bp + -1] ; $pass
3876   1CC8 DA            push d
3877   1CC9 FA FF FF      lea d, [bp + -1] ; $pass
3878   1CCC 2A            mov b, [d]
3879   1CCD D7            push a
3880   1CCE 11            mov a, b
3881   1CCF FA 05 00      lea d, [bp + 5] ; $st
3882   1CD2 58 03 00      add d, 3
3883   1CD5 D7            push a
3884   1CD6 DA            push d
3885   1CD7 26 04 00      mov b, $4
3886   1CDA E7            pop d
3887   1CDB FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3888   1CDF E4            pop a
3889   1CE0 2A            mov b, [d]
3890   1CE1             ; START RELATIONAL
3891   1CE1 D7            push a
3892   1CE2 11            mov a, b
3893   1CE3 26 04 00      mov b, $4
3894   1CE6 B0            cmp a, b
3895   1CE7 FD 71         seq ; ==
3896   1CE9 E4            pop a
3897   1CEA             ; END RELATIONAL
3898   1CEA FD A7         sand a, b ; &&
3899   1CEC E4            pop a
3900   1CED E7            pop d
3901   1CEE FD 43         mov [d], b
3902   1CF0             ;; return pass; 
3903   1CF0 FA FF FF      lea d, [bp + -1] ; $pass
3904   1CF3 2A            mov b, [d]
3905   1CF4 F9            leave
3906   1CF5 09            ret
3907   1CF6             ; --- END TEXT BLOCK
3908   1CF6             
3909   1CF6             ; --- BEGIN DATA BLOCK
3910   1CF6 00 00 00 00 _st1_data: .fill 13, 0
3910   1CFA 00 00 00 00 
3910   1CFE 00 00 00 00 
3910   1D02 00 
3911   1D03 54 65 73 74 __s0: .db "Test %d, Result: %d\n", 0
3911   1D07 20 25 64 2C 
3911   1D0B 20 52 65 73 
3911   1D0F 75 6C 74 3A 
3911   1D13 20 25 64 0A 
3911   1D17 00 
3912   1D18 55 6E 65 78 __s1: .db "Unexpected format in printf.", 0
3912   1D1C 70 65 63 74 
3912   1D20 65 64 20 66 
3912   1D24 6F 72 6D 61 
3912   1D28 74 20 69 6E 
3912   1D2C 20 70 72 69 
3912   1D30 6E 74 66 2E 
3912   1D34 00 
3913   1D35 45 72 72 6F __s2: .db "Error: Unknown argument type.\n", 0
3913   1D39 72 3A 20 55 
3913   1D3D 6E 6B 6E 6F 
3913   1D41 77 6E 20 61 
3913   1D45 72 67 75 6D 
3913   1D49 65 6E 74 20 
3913   1D4D 74 79 70 65 
3913   1D51 2E 0A 00 
3914   1D54 1B 5B 32 4A __s3: .db "\033[2J\033[H", 0
3914   1D58 1B 5B 48 00 
3915   1D5C             
3916   1D5C 5E 1D       _heap_top: .dw _heap
3917   1D5E 00          _heap: .db 0
3918   1D5F             ; --- END DATA BLOCK
3919   1D5F             
3920   1D5F             .end
tasm: Number of errors = 0
