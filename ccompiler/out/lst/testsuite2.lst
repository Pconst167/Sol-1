0001   0000             ; --- FILENAME: ctestsuite/testsuite2
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $pass 
0011   0408             ; $i 
0012   0408             ; $nbr_tests 
0013   0408 10 0A 00      mov a, $a
0014   040B 45 E9 FF      mov [bp + -23], a
0015   040E 52 18 00      sub sp, 24
0016   0411             ;; for(i = 0; i < nbr_tests; i++){ 
0017   0411             _for1_init:
0018   0411 FA EB FF      lea d, [bp + -21] ; $i
0019   0414 DA            push d
0020   0415 26 00 00      mov b, $0
0021   0418 E7            pop d
0022   0419 FD 43         mov [d], b
0023   041B             _for1_cond:
0024   041B FA EB FF      lea d, [bp + -21] ; $i
0025   041E 2A            mov b, [d]
0026   041F             ; START RELATIONAL
0027   041F D7            push a
0028   0420 11            mov a, b
0029   0421 FA E9 FF      lea d, [bp + -23] ; $nbr_tests
0030   0424 2A            mov b, [d]
0031   0425 B0            cmp a, b
0032   0426 FD 75         slu ; <= (unsigned)
0033   0428 E4            pop a
0034   0429             ; END RELATIONAL
0035   0429 C0 00 00      cmp b, 0
0036   042C C6 55 04      je _for1_exit
0037   042F             _for1_block:
0038   042F             ;; pass[i] = -1; 
0039   042F FA ED FF      lea d, [bp + -19] ; $pass
0040   0432 D7            push a
0041   0433 DA            push d
0042   0434 FA EB FF      lea d, [bp + -21] ; $i
0043   0437 2A            mov b, [d]
0044   0438 E7            pop d
0045   0439 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0046   043D E4            pop a
0047   043E DA            push d
0048   043F 26 FF FF      mov b, $ffff
0049   0442 E7            pop d
0050   0443 FD 43         mov [d], b
0051   0445             _for1_update:
0052   0445 FA EB FF      lea d, [bp + -21] ; $i
0053   0448 2A            mov b, [d]
0054   0449 D8            push b
0055   044A FD 77         inc b
0056   044C FA EB FF      lea d, [bp + -21] ; $i
0057   044F FD 43         mov [d], b
0058   0451 E5            pop b
0059   0452 0A 1B 04      jmp _for1_cond
0060   0455             _for1_exit:
0061   0455             ;; for(i = 0; i < nbr_tests; i++){ 
0062   0455             _for2_init:
0063   0455 FA EB FF      lea d, [bp + -21] ; $i
0064   0458 DA            push d
0065   0459 26 00 00      mov b, $0
0066   045C E7            pop d
0067   045D FD 43         mov [d], b
0068   045F             _for2_cond:
0069   045F FA EB FF      lea d, [bp + -21] ; $i
0070   0462 2A            mov b, [d]
0071   0463             ; START RELATIONAL
0072   0463 D7            push a
0073   0464 11            mov a, b
0074   0465 FA E9 FF      lea d, [bp + -23] ; $nbr_tests
0075   0468 2A            mov b, [d]
0076   0469 B0            cmp a, b
0077   046A FD 75         slu ; <= (unsigned)
0078   046C E4            pop a
0079   046D             ; END RELATIONAL
0080   046D C0 00 00      cmp b, 0
0081   0470 C6 A6 04      je _for2_exit
0082   0473             _for2_block:
0083   0473             ;; printf("Test %d, Result: %d\n", i, pass[i]); 
0084   0473 FA ED FF      lea d, [bp + -19] ; $pass
0085   0476 D7            push a
0086   0477 DA            push d
0087   0478 FA EB FF      lea d, [bp + -21] ; $i
0088   047B 2A            mov b, [d]
0089   047C E7            pop d
0090   047D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0091   0481 E4            pop a
0092   0482 2A            mov b, [d]
0093   0483 FD AB         swp b
0094   0485 D8            push b
0095   0486 FA EB FF      lea d, [bp + -21] ; $i
0096   0489 2A            mov b, [d]
0097   048A FD AB         swp b
0098   048C D8            push b
0099   048D 26 54 1D      mov b, __s0 ; "Test %d, Result: %d\n"
0100   0490 FD AB         swp b
0101   0492 D8            push b
0102   0493 07 01 09      call printf
0103   0496             _for2_update:
0104   0496 FA EB FF      lea d, [bp + -21] ; $i
0105   0499 2A            mov b, [d]
0106   049A D8            push b
0107   049B FD 77         inc b
0108   049D FA EB FF      lea d, [bp + -21] ; $i
0109   04A0 FD 43         mov [d], b
0110   04A2 E5            pop b
0111   04A3 0A 5F 04      jmp _for2_cond
0112   04A6             _for2_exit:
0113   04A6             ;; pass[0] = test0(); 
0114   04A6 FA ED FF      lea d, [bp + -19] ; $pass
0115   04A9 D7            push a
0116   04AA DA            push d
0117   04AB 26 00 00      mov b, $0
0118   04AE E7            pop d
0119   04AF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0120   04B3 E4            pop a
0121   04B4 DA            push d
0122   04B5 07 73 15      call test0
0123   04B8 E7            pop d
0124   04B9 FD 43         mov [d], b
0125   04BB             ;; pass[1] = test1(); 
0126   04BB FA ED FF      lea d, [bp + -19] ; $pass
0127   04BE D7            push a
0128   04BF DA            push d
0129   04C0 26 01 00      mov b, $1
0130   04C3 E7            pop d
0131   04C4 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0132   04C8 E4            pop a
0133   04C9 DA            push d
0134   04CA 07 6E 18      call test1
0135   04CD E7            pop d
0136   04CE FD 43         mov [d], b
0137   04D0             ;; pass[2] = test2(); 
0138   04D0 FA ED FF      lea d, [bp + -19] ; $pass
0139   04D3 D7            push a
0140   04D4 DA            push d
0141   04D5 26 02 00      mov b, $2
0142   04D8 E7            pop d
0143   04D9 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0144   04DD E4            pop a
0145   04DE DA            push d
0146   04DF 07 A6 19      call test2
0147   04E2 E7            pop d
0148   04E3 FD 43         mov [d], b
0149   04E5             ;; pass[3] = test3(st1); 
0150   04E5 FA ED FF      lea d, [bp + -19] ; $pass
0151   04E8 D7            push a
0152   04E9 DA            push d
0153   04EA 26 03 00      mov b, $3
0154   04ED E7            pop d
0155   04EE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0156   04F2 E4            pop a
0157   04F3 DA            push d
0158   04F4 3B 47 1D      mov d, _st1_data ; $st1
0159   04F7 2D            mov b, d
0160   04F8 52 0D 00      sub sp, 13
0161   04FB FD 28         mov si, b
0162   04FD FD FA 01 00   lea d, [sp + 1]
0163   0501 FD 50         mov di, d
0164   0503 38 0D 00      mov c, 13
0165   0506 FD F5         rep movsb
0166   0508 07 8A 1B      call test3
0167   050B E7            pop d
0168   050C FD 43         mov [d], b
0169   050E             ;; for(i = 0; i < nbr_tests; i++){ 
0170   050E             _for3_init:
0171   050E FA EB FF      lea d, [bp + -21] ; $i
0172   0511 DA            push d
0173   0512 26 00 00      mov b, $0
0174   0515 E7            pop d
0175   0516 FD 43         mov [d], b
0176   0518             _for3_cond:
0177   0518 FA EB FF      lea d, [bp + -21] ; $i
0178   051B 2A            mov b, [d]
0179   051C             ; START RELATIONAL
0180   051C D7            push a
0181   051D 11            mov a, b
0182   051E FA E9 FF      lea d, [bp + -23] ; $nbr_tests
0183   0521 2A            mov b, [d]
0184   0522 B0            cmp a, b
0185   0523 FD 75         slu ; <= (unsigned)
0186   0525 E4            pop a
0187   0526             ; END RELATIONAL
0188   0526 C0 00 00      cmp b, 0
0189   0529 C6 5F 05      je _for3_exit
0190   052C             _for3_block:
0191   052C             ;; printf("Test %d, Result: %d\n", i, pass[i]); 
0192   052C FA ED FF      lea d, [bp + -19] ; $pass
0193   052F D7            push a
0194   0530 DA            push d
0195   0531 FA EB FF      lea d, [bp + -21] ; $i
0196   0534 2A            mov b, [d]
0197   0535 E7            pop d
0198   0536 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0199   053A E4            pop a
0200   053B 2A            mov b, [d]
0201   053C FD AB         swp b
0202   053E D8            push b
0203   053F FA EB FF      lea d, [bp + -21] ; $i
0204   0542 2A            mov b, [d]
0205   0543 FD AB         swp b
0206   0545 D8            push b
0207   0546 26 54 1D      mov b, __s0 ; "Test %d, Result: %d\n"
0208   0549 FD AB         swp b
0209   054B D8            push b
0210   054C 07 01 09      call printf
0211   054F             _for3_update:
0212   054F FA EB FF      lea d, [bp + -21] ; $i
0213   0552 2A            mov b, [d]
0214   0553 D8            push b
0215   0554 FD 77         inc b
0216   0556 FA EB FF      lea d, [bp + -21] ; $i
0217   0559 FD 43         mov [d], b
0218   055B E5            pop b
0219   055C 0A 18 05      jmp _for3_cond
0220   055F             _for3_exit:
0221   055F 05 0B         syscall sys_terminate_proc
0222   0561             
0223   0561             strcpy:
0224   0561 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0225   0564             ; $psrc 
0226   0564             ; $pdest 
0227   0564 52 04 00      sub sp, 4
0228   0567             ;; psrc = src; 
0229   0567 FA FF FF      lea d, [bp + -1] ; $psrc
0230   056A DA            push d
0231   056B FA 07 00      lea d, [bp + 7] ; $src
0232   056E 2A            mov b, [d]
0233   056F E7            pop d
0234   0570 FD 43         mov [d], b
0235   0572             ;; pdest = dest; 
0236   0572 FA FD FF      lea d, [bp + -3] ; $pdest
0237   0575 DA            push d
0238   0576 FA 05 00      lea d, [bp + 5] ; $dest
0239   0579 2A            mov b, [d]
0240   057A E7            pop d
0241   057B FD 43         mov [d], b
0242   057D             ;; while(*psrc) *pdest++ = *psrc++; 
0243   057D             _while4_cond:
0244   057D FA FF FF      lea d, [bp + -1] ; $psrc
0245   0580 2A            mov b, [d]
0246   0581 74            mov d, b
0247   0582 32            mov bl, [d]
0248   0583 A7 00         mov bh, 0
0249   0585 C0 00 00      cmp b, 0
0250   0588 C6 B0 05      je _while4_exit
0251   058B             _while4_block:
0252   058B             ;; *pdest++ = *psrc++; 
0253   058B FA FD FF      lea d, [bp + -3] ; $pdest
0254   058E 2A            mov b, [d]
0255   058F D8            push b
0256   0590 FD 77         inc b
0257   0592 FA FD FF      lea d, [bp + -3] ; $pdest
0258   0595 FD 43         mov [d], b
0259   0597 E5            pop b
0260   0598 D8            push b
0261   0599 FA FF FF      lea d, [bp + -1] ; $psrc
0262   059C 2A            mov b, [d]
0263   059D D8            push b
0264   059E FD 77         inc b
0265   05A0 FA FF FF      lea d, [bp + -1] ; $psrc
0266   05A3 FD 43         mov [d], b
0267   05A5 E5            pop b
0268   05A6 74            mov d, b
0269   05A7 32            mov bl, [d]
0270   05A8 A7 00         mov bh, 0
0271   05AA E7            pop d
0272   05AB FD 3E         mov [d], bl
0273   05AD 0A 7D 05      jmp _while4_cond
0274   05B0             _while4_exit:
0275   05B0             ;; *pdest = '\0'; 
0276   05B0 FA FD FF      lea d, [bp + -3] ; $pdest
0277   05B3 2A            mov b, [d]
0278   05B4 D8            push b
0279   05B5 26 00 00      mov b, $0
0280   05B8 E7            pop d
0281   05B9 FD 3E         mov [d], bl
0282   05BB F9            leave
0283   05BC 09            ret
0284   05BD             
0285   05BD             strcmp:
0286   05BD F8 00 00      enter 0 ; (push bp; mov bp, sp)
0287   05C0             ;; while (*s1 && (*s1 == *s2)) { 
0288   05C0             _while5_cond:
0289   05C0 FA 05 00      lea d, [bp + 5] ; $s1
0290   05C3 2A            mov b, [d]
0291   05C4 74            mov d, b
0292   05C5 32            mov bl, [d]
0293   05C6 A7 00         mov bh, 0
0294   05C8 D7            push a
0295   05C9 11            mov a, b
0296   05CA FA 05 00      lea d, [bp + 5] ; $s1
0297   05CD 2A            mov b, [d]
0298   05CE 74            mov d, b
0299   05CF 32            mov bl, [d]
0300   05D0 A7 00         mov bh, 0
0301   05D2             ; START RELATIONAL
0302   05D2 D7            push a
0303   05D3 11            mov a, b
0304   05D4 FA 07 00      lea d, [bp + 7] ; $s2
0305   05D7 2A            mov b, [d]
0306   05D8 74            mov d, b
0307   05D9 32            mov bl, [d]
0308   05DA A7 00         mov bh, 0
0309   05DC B0            cmp a, b
0310   05DD FD 71         seq ; ==
0311   05DF E4            pop a
0312   05E0             ; END RELATIONAL
0313   05E0 FD A7         sand a, b ; &&
0314   05E2 E4            pop a
0315   05E3 C0 00 00      cmp b, 0
0316   05E6 C6 06 06      je _while5_exit
0317   05E9             _while5_block:
0318   05E9             ;; s1++; 
0319   05E9 FA 05 00      lea d, [bp + 5] ; $s1
0320   05EC 2A            mov b, [d]
0321   05ED D8            push b
0322   05EE FD 77         inc b
0323   05F0 FA 05 00      lea d, [bp + 5] ; $s1
0324   05F3 FD 43         mov [d], b
0325   05F5 E5            pop b
0326   05F6             ;; s2++; 
0327   05F6 FA 07 00      lea d, [bp + 7] ; $s2
0328   05F9 2A            mov b, [d]
0329   05FA D8            push b
0330   05FB FD 77         inc b
0331   05FD FA 07 00      lea d, [bp + 7] ; $s2
0332   0600 FD 43         mov [d], b
0333   0602 E5            pop b
0334   0603 0A C0 05      jmp _while5_cond
0335   0606             _while5_exit:
0336   0606             ;; return *s1 - *s2; 
0337   0606 FA 05 00      lea d, [bp + 5] ; $s1
0338   0609 2A            mov b, [d]
0339   060A 74            mov d, b
0340   060B 32            mov bl, [d]
0341   060C A7 00         mov bh, 0
0342   060E             ; START TERMS
0343   060E D7            push a
0344   060F 11            mov a, b
0345   0610 FA 07 00      lea d, [bp + 7] ; $s2
0346   0613 2A            mov b, [d]
0347   0614 74            mov d, b
0348   0615 32            mov bl, [d]
0349   0616 A7 00         mov bh, 0
0350   0618 60            sub a, b
0351   0619 27            mov b, a
0352   061A E4            pop a
0353   061B             ; END TERMS
0354   061B F9            leave
0355   061C 09            ret
0356   061D             
0357   061D             strcat:
0358   061D F8 00 00      enter 0 ; (push bp; mov bp, sp)
0359   0620             ; $dest_len 
0360   0620             ; $i 
0361   0620 52 04 00      sub sp, 4
0362   0623             ;; dest_len = strlen(dest); 
0363   0623 FA FF FF      lea d, [bp + -1] ; $dest_len
0364   0626 DA            push d
0365   0627 FA 05 00      lea d, [bp + 5] ; $dest
0366   062A 2A            mov b, [d]
0367   062B FD AB         swp b
0368   062D D8            push b
0369   062E 07 D0 06      call strlen
0370   0631 51 02 00      add sp, 2
0371   0634 E7            pop d
0372   0635 FD 43         mov [d], b
0373   0637             ;; for (i = 0; src[i] != 0; i=i+1) { 
0374   0637             _for6_init:
0375   0637 FA FD FF      lea d, [bp + -3] ; $i
0376   063A DA            push d
0377   063B 26 00 00      mov b, $0
0378   063E E7            pop d
0379   063F FD 43         mov [d], b
0380   0641             _for6_cond:
0381   0641 FA 07 00      lea d, [bp + 7] ; $src
0382   0644 FD 2A         mov d, [d]
0383   0646 D7            push a
0384   0647 DA            push d
0385   0648 FA FD FF      lea d, [bp + -3] ; $i
0386   064B 2A            mov b, [d]
0387   064C E7            pop d
0388   064D FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0389   0651 E4            pop a
0390   0652 32            mov bl, [d]
0391   0653 A7 00         mov bh, 0
0392   0655             ; START RELATIONAL
0393   0655 D7            push a
0394   0656 11            mov a, b
0395   0657 26 00 00      mov b, $0
0396   065A B0            cmp a, b
0397   065B FD 72         sneq ; !=
0398   065D E4            pop a
0399   065E             ; END RELATIONAL
0400   065E C0 00 00      cmp b, 0
0401   0661 C6 AA 06      je _for6_exit
0402   0664             _for6_block:
0403   0664             ;; dest[dest_len + i] = src[i]; 
0404   0664 FA 05 00      lea d, [bp + 5] ; $dest
0405   0667 FD 2A         mov d, [d]
0406   0669 D7            push a
0407   066A DA            push d
0408   066B FA FF FF      lea d, [bp + -1] ; $dest_len
0409   066E 2A            mov b, [d]
0410   066F             ; START TERMS
0411   066F D7            push a
0412   0670 11            mov a, b
0413   0671 FA FD FF      lea d, [bp + -3] ; $i
0414   0674 2A            mov b, [d]
0415   0675 56            add b, a
0416   0676 E4            pop a
0417   0677             ; END TERMS
0418   0677 E7            pop d
0419   0678 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0420   067C E4            pop a
0421   067D DA            push d
0422   067E FA 07 00      lea d, [bp + 7] ; $src
0423   0681 FD 2A         mov d, [d]
0424   0683 D7            push a
0425   0684 DA            push d
0426   0685 FA FD FF      lea d, [bp + -3] ; $i
0427   0688 2A            mov b, [d]
0428   0689 E7            pop d
0429   068A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0430   068E E4            pop a
0431   068F 32            mov bl, [d]
0432   0690 A7 00         mov bh, 0
0433   0692 E7            pop d
0434   0693 FD 3E         mov [d], bl
0435   0695             _for6_update:
0436   0695 FA FD FF      lea d, [bp + -3] ; $i
0437   0698 DA            push d
0438   0699 FA FD FF      lea d, [bp + -3] ; $i
0439   069C 2A            mov b, [d]
0440   069D             ; START TERMS
0441   069D D7            push a
0442   069E 11            mov a, b
0443   069F 26 01 00      mov b, $1
0444   06A2 56            add b, a
0445   06A3 E4            pop a
0446   06A4             ; END TERMS
0447   06A4 E7            pop d
0448   06A5 FD 43         mov [d], b
0449   06A7 0A 41 06      jmp _for6_cond
0450   06AA             _for6_exit:
0451   06AA             ;; dest[dest_len + i] = 0; 
0452   06AA FA 05 00      lea d, [bp + 5] ; $dest
0453   06AD FD 2A         mov d, [d]
0454   06AF D7            push a
0455   06B0 DA            push d
0456   06B1 FA FF FF      lea d, [bp + -1] ; $dest_len
0457   06B4 2A            mov b, [d]
0458   06B5             ; START TERMS
0459   06B5 D7            push a
0460   06B6 11            mov a, b
0461   06B7 FA FD FF      lea d, [bp + -3] ; $i
0462   06BA 2A            mov b, [d]
0463   06BB 56            add b, a
0464   06BC E4            pop a
0465   06BD             ; END TERMS
0466   06BD E7            pop d
0467   06BE FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0468   06C2 E4            pop a
0469   06C3 DA            push d
0470   06C4 26 00 00      mov b, $0
0471   06C7 E7            pop d
0472   06C8 FD 3E         mov [d], bl
0473   06CA             ;; return dest; 
0474   06CA FA 05 00      lea d, [bp + 5] ; $dest
0475   06CD 2A            mov b, [d]
0476   06CE F9            leave
0477   06CF 09            ret
0478   06D0             
0479   06D0             strlen:
0480   06D0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0481   06D3             ; $length 
0482   06D3 52 02 00      sub sp, 2
0483   06D6             ;; length = 0; 
0484   06D6 FA FF FF      lea d, [bp + -1] ; $length
0485   06D9 DA            push d
0486   06DA 26 00 00      mov b, $0
0487   06DD E7            pop d
0488   06DE FD 43         mov [d], b
0489   06E0             ;; while (str[length] != 0) { 
0490   06E0             _while7_cond:
0491   06E0 FA 05 00      lea d, [bp + 5] ; $str
0492   06E3 FD 2A         mov d, [d]
0493   06E5 D7            push a
0494   06E6 DA            push d
0495   06E7 FA FF FF      lea d, [bp + -1] ; $length
0496   06EA 2A            mov b, [d]
0497   06EB E7            pop d
0498   06EC FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0499   06F0 E4            pop a
0500   06F1 32            mov bl, [d]
0501   06F2 A7 00         mov bh, 0
0502   06F4             ; START RELATIONAL
0503   06F4 D7            push a
0504   06F5 11            mov a, b
0505   06F6 26 00 00      mov b, $0
0506   06F9 B0            cmp a, b
0507   06FA FD 72         sneq ; !=
0508   06FC E4            pop a
0509   06FD             ; END RELATIONAL
0510   06FD C0 00 00      cmp b, 0
0511   0700 C6 13 07      je _while7_exit
0512   0703             _while7_block:
0513   0703             ;; length++; 
0514   0703 FA FF FF      lea d, [bp + -1] ; $length
0515   0706 2A            mov b, [d]
0516   0707 D8            push b
0517   0708 FD 77         inc b
0518   070A FA FF FF      lea d, [bp + -1] ; $length
0519   070D FD 43         mov [d], b
0520   070F E5            pop b
0521   0710 0A E0 06      jmp _while7_cond
0522   0713             _while7_exit:
0523   0713             ;; return length; 
0524   0713 FA FF FF      lea d, [bp + -1] ; $length
0525   0716 2A            mov b, [d]
0526   0717 F9            leave
0527   0718 09            ret
0528   0719             
0529   0719             exit:
0530   0719 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0531   071C             
0532   071C             ; --- BEGIN INLINE ASM BLOCK
0533   071C 05 0B         syscall sys_terminate_proc
0534   071E             ; --- END INLINE ASM BLOCK
0535   071E             
0536   071E F9            leave
0537   071F 09            ret
0538   0720             
0539   0720             atoi:
0540   0720 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0541   0723             ; $result 
0542   0723 10 00 00      mov a, $0
0543   0726 45 FF FF      mov [bp + -1], a
0544   0729             ; $sign 
0545   0729 10 01 00      mov a, $1
0546   072C 45 FD FF      mov [bp + -3], a
0547   072F 52 04 00      sub sp, 4
0548   0732             ;; while (*str == ' ') str++; 
0549   0732             _while8_cond:
0550   0732 FA 05 00      lea d, [bp + 5] ; $str
0551   0735 2A            mov b, [d]
0552   0736 74            mov d, b
0553   0737 32            mov bl, [d]
0554   0738 A7 00         mov bh, 0
0555   073A             ; START RELATIONAL
0556   073A D7            push a
0557   073B 11            mov a, b
0558   073C 26 20 00      mov b, $20
0559   073F B0            cmp a, b
0560   0740 FD 71         seq ; ==
0561   0742 E4            pop a
0562   0743             ; END RELATIONAL
0563   0743 C0 00 00      cmp b, 0
0564   0746 C6 59 07      je _while8_exit
0565   0749             _while8_block:
0566   0749             ;; str++; 
0567   0749 FA 05 00      lea d, [bp + 5] ; $str
0568   074C 2A            mov b, [d]
0569   074D D8            push b
0570   074E FD 77         inc b
0571   0750 FA 05 00      lea d, [bp + 5] ; $str
0572   0753 FD 43         mov [d], b
0573   0755 E5            pop b
0574   0756 0A 32 07      jmp _while8_cond
0575   0759             _while8_exit:
0576   0759             ;; if (*str == '-' || *str == '+') { 
0577   0759             _if9_cond:
0578   0759 FA 05 00      lea d, [bp + 5] ; $str
0579   075C 2A            mov b, [d]
0580   075D 74            mov d, b
0581   075E 32            mov bl, [d]
0582   075F A7 00         mov bh, 0
0583   0761             ; START RELATIONAL
0584   0761 D7            push a
0585   0762 11            mov a, b
0586   0763 26 2D 00      mov b, $2d
0587   0766 B0            cmp a, b
0588   0767 FD 71         seq ; ==
0589   0769 E4            pop a
0590   076A             ; END RELATIONAL
0591   076A D7            push a
0592   076B 11            mov a, b
0593   076C FA 05 00      lea d, [bp + 5] ; $str
0594   076F 2A            mov b, [d]
0595   0770 74            mov d, b
0596   0771 32            mov bl, [d]
0597   0772 A7 00         mov bh, 0
0598   0774             ; START RELATIONAL
0599   0774 D7            push a
0600   0775 11            mov a, b
0601   0776 26 2B 00      mov b, $2b
0602   0779 B0            cmp a, b
0603   077A FD 71         seq ; ==
0604   077C E4            pop a
0605   077D             ; END RELATIONAL
0606   077D FD A8         sor a, b ; ||
0607   077F E4            pop a
0608   0780 C0 00 00      cmp b, 0
0609   0783 C6 BA 07      je _if9_exit
0610   0786             _if9_true:
0611   0786             ;; if (*str == '-') sign = -1; 
0612   0786             _if10_cond:
0613   0786 FA 05 00      lea d, [bp + 5] ; $str
0614   0789 2A            mov b, [d]
0615   078A 74            mov d, b
0616   078B 32            mov bl, [d]
0617   078C A7 00         mov bh, 0
0618   078E             ; START RELATIONAL
0619   078E D7            push a
0620   078F 11            mov a, b
0621   0790 26 2D 00      mov b, $2d
0622   0793 B0            cmp a, b
0623   0794 FD 71         seq ; ==
0624   0796 E4            pop a
0625   0797             ; END RELATIONAL
0626   0797 C0 00 00      cmp b, 0
0627   079A C6 AA 07      je _if10_exit
0628   079D             _if10_true:
0629   079D             ;; sign = -1; 
0630   079D FA FD FF      lea d, [bp + -3] ; $sign
0631   07A0 DA            push d
0632   07A1 26 FF FF      mov b, $ffff
0633   07A4 E7            pop d
0634   07A5 FD 43         mov [d], b
0635   07A7 0A AA 07      jmp _if10_exit
0636   07AA             _if10_exit:
0637   07AA             ;; str++; 
0638   07AA FA 05 00      lea d, [bp + 5] ; $str
0639   07AD 2A            mov b, [d]
0640   07AE D8            push b
0641   07AF FD 77         inc b
0642   07B1 FA 05 00      lea d, [bp + 5] ; $str
0643   07B4 FD 43         mov [d], b
0644   07B6 E5            pop b
0645   07B7 0A BA 07      jmp _if9_exit
0646   07BA             _if9_exit:
0647   07BA             ;; while (*str >= '0' && *str <= '9') { 
0648   07BA             _while11_cond:
0649   07BA FA 05 00      lea d, [bp + 5] ; $str
0650   07BD 2A            mov b, [d]
0651   07BE 74            mov d, b
0652   07BF 32            mov bl, [d]
0653   07C0 A7 00         mov bh, 0
0654   07C2             ; START RELATIONAL
0655   07C2 D7            push a
0656   07C3 11            mov a, b
0657   07C4 26 30 00      mov b, $30
0658   07C7 B0            cmp a, b
0659   07C8 FD 82         sgeu ; >= (unsigned)
0660   07CA E4            pop a
0661   07CB             ; END RELATIONAL
0662   07CB D7            push a
0663   07CC 11            mov a, b
0664   07CD FA 05 00      lea d, [bp + 5] ; $str
0665   07D0 2A            mov b, [d]
0666   07D1 74            mov d, b
0667   07D2 32            mov bl, [d]
0668   07D3 A7 00         mov bh, 0
0669   07D5             ; START RELATIONAL
0670   07D5 D7            push a
0671   07D6 11            mov a, b
0672   07D7 26 39 00      mov b, $39
0673   07DA B0            cmp a, b
0674   07DB FD 76         sleu ; <= (unsigned)
0675   07DD E4            pop a
0676   07DE             ; END RELATIONAL
0677   07DE FD A7         sand a, b ; &&
0678   07E0 E4            pop a
0679   07E1 C0 00 00      cmp b, 0
0680   07E4 C6 1F 08      je _while11_exit
0681   07E7             _while11_block:
0682   07E7             ;; result = result * 10 + (*str - '0'); 
0683   07E7 FA FF FF      lea d, [bp + -1] ; $result
0684   07EA DA            push d
0685   07EB FA FF FF      lea d, [bp + -1] ; $result
0686   07EE 2A            mov b, [d]
0687   07EF             ; START FACTORS
0688   07EF D7            push a
0689   07F0 11            mov a, b
0690   07F1 26 0A 00      mov b, $a
0691   07F4 AC            mul a, b ; *
0692   07F5 11            mov a, b
0693   07F6 27            mov b, a
0694   07F7 E4            pop a
0695   07F8             ; END FACTORS
0696   07F8             ; START TERMS
0697   07F8 D7            push a
0698   07F9 11            mov a, b
0699   07FA FA 05 00      lea d, [bp + 5] ; $str
0700   07FD 2A            mov b, [d]
0701   07FE 74            mov d, b
0702   07FF 32            mov bl, [d]
0703   0800 A7 00         mov bh, 0
0704   0802             ; START TERMS
0705   0802 D7            push a
0706   0803 11            mov a, b
0707   0804 26 30 00      mov b, $30
0708   0807 60            sub a, b
0709   0808 27            mov b, a
0710   0809 E4            pop a
0711   080A             ; END TERMS
0712   080A 56            add b, a
0713   080B E4            pop a
0714   080C             ; END TERMS
0715   080C E7            pop d
0716   080D FD 43         mov [d], b
0717   080F             ;; str++; 
0718   080F FA 05 00      lea d, [bp + 5] ; $str
0719   0812 2A            mov b, [d]
0720   0813 D8            push b
0721   0814 FD 77         inc b
0722   0816 FA 05 00      lea d, [bp + 5] ; $str
0723   0819 FD 43         mov [d], b
0724   081B E5            pop b
0725   081C 0A BA 07      jmp _while11_cond
0726   081F             _while11_exit:
0727   081F             ;; return sign * result; 
0728   081F FA FD FF      lea d, [bp + -3] ; $sign
0729   0822 2A            mov b, [d]
0730   0823             ; START FACTORS
0731   0823 D7            push a
0732   0824 11            mov a, b
0733   0825 FA FF FF      lea d, [bp + -1] ; $result
0734   0828 2A            mov b, [d]
0735   0829 AC            mul a, b ; *
0736   082A 11            mov a, b
0737   082B 27            mov b, a
0738   082C E4            pop a
0739   082D             ; END FACTORS
0740   082D F9            leave
0741   082E 09            ret
0742   082F             
0743   082F             rand:
0744   082F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0745   0832             ; $sec 
0746   0832 52 02 00      sub sp, 2
0747   0835             
0748   0835             ; --- BEGIN INLINE ASM BLOCK
0749   0835 19 00         mov al, 0
0750   0837 05 01         syscall sys_rtc					
0751   0839 1A            mov al, ah
0752   083A FA FF FF      lea d, [bp + -1] ; $sec
0753   083D 1E            mov al, [d]
0754   083E 22 00         mov ah, 0
0755   0840             ; --- END INLINE ASM BLOCK
0756   0840             
0757   0840             ;; return sec; 
0758   0840 FA FF FF      lea d, [bp + -1] ; $sec
0759   0843 2A            mov b, [d]
0760   0844 F9            leave
0761   0845 09            ret
0762   0846             
0763   0846             srand:
0764   0846 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0765   0849 F9            leave
0766   084A 09            ret
0767   084B             
0768   084B             malloc:
0769   084B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0770   084E F9            leave
0771   084F 09            ret
0772   0850             
0773   0850             calloc:
0774   0850 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0775   0853 F9            leave
0776   0854 09            ret
0777   0855             
0778   0855             realloc:
0779   0855 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0780   0858 F9            leave
0781   0859 09            ret
0782   085A             
0783   085A             alloc:
0784   085A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0785   085D             ;; heap_top = heap_top + bytes; 
0786   085D 3B AD 1D      mov d, _heap_top ; $heap_top
0787   0860 DA            push d
0788   0861 3B AD 1D      mov d, _heap_top ; $heap_top
0789   0864 2A            mov b, [d]
0790   0865             ; START TERMS
0791   0865 D7            push a
0792   0866 11            mov a, b
0793   0867 FA 05 00      lea d, [bp + 5] ; $bytes
0794   086A 2A            mov b, [d]
0795   086B 56            add b, a
0796   086C E4            pop a
0797   086D             ; END TERMS
0798   086D E7            pop d
0799   086E FD 43         mov [d], b
0800   0870             ;; return heap_top - bytes; 
0801   0870 3B AD 1D      mov d, _heap_top ; $heap_top
0802   0873 2A            mov b, [d]
0803   0874             ; START TERMS
0804   0874 D7            push a
0805   0875 11            mov a, b
0806   0876 FA 05 00      lea d, [bp + 5] ; $bytes
0807   0879 2A            mov b, [d]
0808   087A 60            sub a, b
0809   087B 27            mov b, a
0810   087C E4            pop a
0811   087D             ; END TERMS
0812   087D F9            leave
0813   087E 09            ret
0814   087F             
0815   087F             free:
0816   087F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0817   0882             ;; return heap_top = heap_top - bytes; 
0818   0882 3B AD 1D      mov d, _heap_top ; $heap_top
0819   0885 DA            push d
0820   0886 3B AD 1D      mov d, _heap_top ; $heap_top
0821   0889 2A            mov b, [d]
0822   088A             ; START TERMS
0823   088A D7            push a
0824   088B 11            mov a, b
0825   088C FA 05 00      lea d, [bp + 5] ; $bytes
0826   088F 2A            mov b, [d]
0827   0890 60            sub a, b
0828   0891 27            mov b, a
0829   0892 E4            pop a
0830   0893             ; END TERMS
0831   0893 E7            pop d
0832   0894 FD 43         mov [d], b
0833   0896 F9            leave
0834   0897 09            ret
0835   0898             
0836   0898             va_start:
0837   0898 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0838   089B             ;; argp->current_arg = first_fixed_param + sizeof(first_fixed_param); 
0839   089B FA 05 00      lea d, [bp + 5] ; $argp
0840   089E FD 2A         mov d, [d]
0841   08A0 58 00 00      add d, 0
0842   08A3 DA            push d
0843   08A4 FA 07 00      lea d, [bp + 7] ; $first_fixed_param
0844   08A7 2A            mov b, [d]
0845   08A8             ; START TERMS
0846   08A8 D7            push a
0847   08A9 11            mov a, b
0848   08AA 26 02 00      mov b, 2
0849   08AD 56            add b, a
0850   08AE E4            pop a
0851   08AF             ; END TERMS
0852   08AF E7            pop d
0853   08B0 FD 43         mov [d], b
0854   08B2 F9            leave
0855   08B3 09            ret
0856   08B4             
0857   08B4             va_arg:
0858   08B4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0859   08B7             ; $p 
0860   08B7 52 02 00      sub sp, 2
0861   08BA             ;; p = argp->current_arg; 
0862   08BA FA FF FF      lea d, [bp + -1] ; $p
0863   08BD DA            push d
0864   08BE FA 05 00      lea d, [bp + 5] ; $argp
0865   08C1 FD 2A         mov d, [d]
0866   08C3 58 00 00      add d, 0
0867   08C6 2A            mov b, [d]
0868   08C7 E7            pop d
0869   08C8 FD 43         mov [d], b
0870   08CA             ;; argp->current_arg = argp->current_arg + size; 
0871   08CA FA 05 00      lea d, [bp + 5] ; $argp
0872   08CD FD 2A         mov d, [d]
0873   08CF 58 00 00      add d, 0
0874   08D2 DA            push d
0875   08D3 FA 05 00      lea d, [bp + 5] ; $argp
0876   08D6 FD 2A         mov d, [d]
0877   08D8 58 00 00      add d, 0
0878   08DB 2A            mov b, [d]
0879   08DC             ; START TERMS
0880   08DC D7            push a
0881   08DD 11            mov a, b
0882   08DE FA 07 00      lea d, [bp + 7] ; $size
0883   08E1 2A            mov b, [d]
0884   08E2 56            add b, a
0885   08E3 E4            pop a
0886   08E4             ; END TERMS
0887   08E4 E7            pop d
0888   08E5 FD 43         mov [d], b
0889   08E7             ;; return p; 
0890   08E7 FA FF FF      lea d, [bp + -1] ; $p
0891   08EA 2A            mov b, [d]
0892   08EB F9            leave
0893   08EC 09            ret
0894   08ED             
0895   08ED             va_end:
0896   08ED F8 00 00      enter 0 ; (push bp; mov bp, sp)
0897   08F0             ;; argp->current_arg =   0   ; 
0898   08F0 FA 05 00      lea d, [bp + 5] ; $argp
0899   08F3 FD 2A         mov d, [d]
0900   08F5 58 00 00      add d, 0
0901   08F8 DA            push d
0902   08F9 26 00 00      mov b, $0
0903   08FC E7            pop d
0904   08FD FD 43         mov [d], b
0905   08FF F9            leave
0906   0900 09            ret
0907   0901             
0908   0901             printf:
0909   0901 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0910   0904             ; $p 
0911   0904             ; $fp 
0912   0904             ; $i 
0913   0904 52 06 00      sub sp, 6
0914   0907             ;; fp = format; 
0915   0907 FA FD FF      lea d, [bp + -3] ; $fp
0916   090A DA            push d
0917   090B FA 05 00      lea d, [bp + 5] ; $format
0918   090E 2A            mov b, [d]
0919   090F E7            pop d
0920   0910 FD 43         mov [d], b
0921   0912             ;; p = &format + 2; 
0922   0912 FA FF FF      lea d, [bp + -1] ; $p
0923   0915 DA            push d
0924   0916 FA 05 00      lea d, [bp + 5] ; $format
0925   0919 2D            mov b, d
0926   091A             ; START TERMS
0927   091A D7            push a
0928   091B 11            mov a, b
0929   091C 26 02 00      mov b, $2
0930   091F 56            add b, a
0931   0920 E4            pop a
0932   0921             ; END TERMS
0933   0921 E7            pop d
0934   0922 FD 43         mov [d], b
0935   0924             ;; for(;;){ 
0936   0924             _for12_init:
0937   0924             _for12_cond:
0938   0924             _for12_block:
0939   0924             ;; if(!*fp) break; 
0940   0924             _if13_cond:
0941   0924 FA FD FF      lea d, [bp + -3] ; $fp
0942   0927 2A            mov b, [d]
0943   0928 74            mov d, b
0944   0929 32            mov bl, [d]
0945   092A A7 00         mov bh, 0
0946   092C C0 00 00      cmp b, 0
0947   092F FD 71         seq ; !
0948   0931 C0 00 00      cmp b, 0
0949   0934 C6 3D 09      je _if13_else
0950   0937             _if13_true:
0951   0937             ;; break; 
0952   0937 0A 43 0B      jmp _for12_exit ; for break
0953   093A 0A 40 0B      jmp _if13_exit
0954   093D             _if13_else:
0955   093D             ;; if(*fp == '%'){ 
0956   093D             _if14_cond:
0957   093D FA FD FF      lea d, [bp + -3] ; $fp
0958   0940 2A            mov b, [d]
0959   0941 74            mov d, b
0960   0942 32            mov bl, [d]
0961   0943 A7 00         mov bh, 0
0962   0945             ; START RELATIONAL
0963   0945 D7            push a
0964   0946 11            mov a, b
0965   0947 26 25 00      mov b, $25
0966   094A B0            cmp a, b
0967   094B FD 71         seq ; ==
0968   094D E4            pop a
0969   094E             ; END RELATIONAL
0970   094E C0 00 00      cmp b, 0
0971   0951 C6 24 0B      je _if14_else
0972   0954             _if14_true:
0973   0954             ;; fp++; 
0974   0954 FA FD FF      lea d, [bp + -3] ; $fp
0975   0957 2A            mov b, [d]
0976   0958 D8            push b
0977   0959 FD 77         inc b
0978   095B FA FD FF      lea d, [bp + -3] ; $fp
0979   095E FD 43         mov [d], b
0980   0960 E5            pop b
0981   0961             ;; switch(*fp){ 
0982   0961             _switch15_expr:
0983   0961 FA FD FF      lea d, [bp + -3] ; $fp
0984   0964 2A            mov b, [d]
0985   0965 74            mov d, b
0986   0966 32            mov bl, [d]
0987   0967 A7 00         mov bh, 0
0988   0969             _switch15_comparisons:
0989   0969 C1 6C         cmp bl, $6c
0990   096B C6 97 09      je _switch15_case0
0991   096E C1 4C         cmp bl, $4c
0992   0970 C6 97 09      je _switch15_case1
0993   0973 C1 64         cmp bl, $64
0994   0975 C6 64 0A      je _switch15_case2
0995   0978 C1 69         cmp bl, $69
0996   097A C6 64 0A      je _switch15_case3
0997   097D C1 75         cmp bl, $75
0998   097F C6 88 0A      je _switch15_case4
0999   0982 C1 78         cmp bl, $78
1000   0984 C6 AC 0A      je _switch15_case5
1001   0987 C1 63         cmp bl, $63
1002   0989 C6 CA 0A      je _switch15_case6
1003   098C C1 73         cmp bl, $73
1004   098E C6 E9 0A      je _switch15_case7
1005   0991 0A 08 0B      jmp _switch15_default
1006   0994 0A 14 0B      jmp _switch15_exit
1007   0997             _switch15_case0:
1008   0997             _switch15_case1:
1009   0997             ;; fp++; 
1010   0997 FA FD FF      lea d, [bp + -3] ; $fp
1011   099A 2A            mov b, [d]
1012   099B D8            push b
1013   099C FD 77         inc b
1014   099E FA FD FF      lea d, [bp + -3] ; $fp
1015   09A1 FD 43         mov [d], b
1016   09A3 E5            pop b
1017   09A4             ;; if(*fp == 'd' || *fp == 'i') 
1018   09A4             _if16_cond:
1019   09A4 FA FD FF      lea d, [bp + -3] ; $fp
1020   09A7 2A            mov b, [d]
1021   09A8 74            mov d, b
1022   09A9 32            mov bl, [d]
1023   09AA A7 00         mov bh, 0
1024   09AC             ; START RELATIONAL
1025   09AC D7            push a
1026   09AD 11            mov a, b
1027   09AE 26 64 00      mov b, $64
1028   09B1 B0            cmp a, b
1029   09B2 FD 71         seq ; ==
1030   09B4 E4            pop a
1031   09B5             ; END RELATIONAL
1032   09B5 D7            push a
1033   09B6 11            mov a, b
1034   09B7 FA FD FF      lea d, [bp + -3] ; $fp
1035   09BA 2A            mov b, [d]
1036   09BB 74            mov d, b
1037   09BC 32            mov bl, [d]
1038   09BD A7 00         mov bh, 0
1039   09BF             ; START RELATIONAL
1040   09BF D7            push a
1041   09C0 11            mov a, b
1042   09C1 26 69 00      mov b, $69
1043   09C4 B0            cmp a, b
1044   09C5 FD 71         seq ; ==
1045   09C7 E4            pop a
1046   09C8             ; END RELATIONAL
1047   09C8 FD A8         sor a, b ; ||
1048   09CA E4            pop a
1049   09CB C0 00 00      cmp b, 0
1050   09CE C6 E5 09      je _if16_else
1051   09D1             _if16_true:
1052   09D1             ;; print_signed_long(*(long *)p); 
1053   09D1 FD 79         mov g, b
1054   09D3 28            mov b, c
1055   09D4 FD AB         swp b
1056   09D6 D8            push b
1057   09D7 FD 27         mov b, g
1058   09D9 FD AB         swp b
1059   09DB D8            push b
1060   09DC 07 D1 0D      call print_signed_long
1061   09DF 51 04 00      add sp, 4
1062   09E2 0A 4F 0A      jmp _if16_exit
1063   09E5             _if16_else:
1064   09E5             ;; if(*fp == 'u') 
1065   09E5             _if17_cond:
1066   09E5 FA FD FF      lea d, [bp + -3] ; $fp
1067   09E8 2A            mov b, [d]
1068   09E9 74            mov d, b
1069   09EA 32            mov bl, [d]
1070   09EB A7 00         mov bh, 0
1071   09ED             ; START RELATIONAL
1072   09ED D7            push a
1073   09EE 11            mov a, b
1074   09EF 26 75 00      mov b, $75
1075   09F2 B0            cmp a, b
1076   09F3 FD 71         seq ; ==
1077   09F5 E4            pop a
1078   09F6             ; END RELATIONAL
1079   09F6 C0 00 00      cmp b, 0
1080   09F9 C6 10 0A      je _if17_else
1081   09FC             _if17_true:
1082   09FC             ;; print_unsigned_long(*(unsigned long *)p); 
1083   09FC FD 79         mov g, b
1084   09FE 28            mov b, c
1085   09FF FD AB         swp b
1086   0A01 D8            push b
1087   0A02 FD 27         mov b, g
1088   0A04 FD AB         swp b
1089   0A06 D8            push b
1090   0A07 07 23 0F      call print_unsigned_long
1091   0A0A 51 04 00      add sp, 4
1092   0A0D 0A 4F 0A      jmp _if17_exit
1093   0A10             _if17_else:
1094   0A10             ;; if(*fp == 'x') 
1095   0A10             _if18_cond:
1096   0A10 FA FD FF      lea d, [bp + -3] ; $fp
1097   0A13 2A            mov b, [d]
1098   0A14 74            mov d, b
1099   0A15 32            mov bl, [d]
1100   0A16 A7 00         mov bh, 0
1101   0A18             ; START RELATIONAL
1102   0A18 D7            push a
1103   0A19 11            mov a, b
1104   0A1A 26 78 00      mov b, $78
1105   0A1D B0            cmp a, b
1106   0A1E FD 71         seq ; ==
1107   0A20 E4            pop a
1108   0A21             ; END RELATIONAL
1109   0A21 C0 00 00      cmp b, 0
1110   0A24 C6 46 0A      je _if18_else
1111   0A27             _if18_true:
1112   0A27             ;; printx32(*(long int *)p); 
1113   0A27 FA FF FF      lea d, [bp + -1] ; $p
1114   0A2A 2A            mov b, [d]
1115   0A2B 74            mov d, b
1116   0A2C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1117   0A2F FD 39         mov c, b ; And place it into C
1118   0A31 2A            mov b, [d] ; Lower Word in B
1119   0A32 FD 79         mov g, b
1120   0A34 28            mov b, c
1121   0A35 FD AB         swp b
1122   0A37 D8            push b
1123   0A38 FD 27         mov b, g
1124   0A3A FD AB         swp b
1125   0A3C D8            push b
1126   0A3D 07 5A 0B      call printx32
1127   0A40 51 04 00      add sp, 4
1128   0A43 0A 4F 0A      jmp _if18_exit
1129   0A46             _if18_else:
1130   0A46             ;; err("Unexpected format in printf."); 
1131   0A46 26 69 1D      mov b, __s1 ; "Unexpected format in printf."
1132   0A49 FD AB         swp b
1133   0A4B D8            push b
1134   0A4C 07 45 0B      call err
1135   0A4F             _if18_exit:
1136   0A4F             _if17_exit:
1137   0A4F             _if16_exit:
1138   0A4F             ;; p = p + 4; 
1139   0A4F FA FF FF      lea d, [bp + -1] ; $p
1140   0A52 DA            push d
1141   0A53 FA FF FF      lea d, [bp + -1] ; $p
1142   0A56 2A            mov b, [d]
1143   0A57             ; START TERMS
1144   0A57 D7            push a
1145   0A58 11            mov a, b
1146   0A59 26 04 00      mov b, $4
1147   0A5C 56            add b, a
1148   0A5D E4            pop a
1149   0A5E             ; END TERMS
1150   0A5E E7            pop d
1151   0A5F FD 43         mov [d], b
1152   0A61             ;; break; 
1153   0A61 0A 14 0B      jmp _switch15_exit ; case break
1154   0A64             _switch15_case2:
1155   0A64             _switch15_case3:
1156   0A64             ;; print_signed(*(int*)p); 
1157   0A64 FA FF FF      lea d, [bp + -1] ; $p
1158   0A67 2A            mov b, [d]
1159   0A68 74            mov d, b
1160   0A69 2A            mov b, [d]
1161   0A6A FD AB         swp b
1162   0A6C D8            push b
1163   0A6D 07 E1 0C      call print_signed
1164   0A70 51 02 00      add sp, 2
1165   0A73             ;; p = p + 2; 
1166   0A73 FA FF FF      lea d, [bp + -1] ; $p
1167   0A76 DA            push d
1168   0A77 FA FF FF      lea d, [bp + -1] ; $p
1169   0A7A 2A            mov b, [d]
1170   0A7B             ; START TERMS
1171   0A7B D7            push a
1172   0A7C 11            mov a, b
1173   0A7D 26 02 00      mov b, $2
1174   0A80 56            add b, a
1175   0A81 E4            pop a
1176   0A82             ; END TERMS
1177   0A82 E7            pop d
1178   0A83 FD 43         mov [d], b
1179   0A85             ;; break; 
1180   0A85 0A 14 0B      jmp _switch15_exit ; case break
1181   0A88             _switch15_case4:
1182   0A88             ;; print_unsigned(*(unsigned int*)p); 
1183   0A88 FA FF FF      lea d, [bp + -1] ; $p
1184   0A8B 2A            mov b, [d]
1185   0A8C 74            mov d, b
1186   0A8D 2A            mov b, [d]
1187   0A8E FD AB         swp b
1188   0A90 D8            push b
1189   0A91 07 20 10      call print_unsigned
1190   0A94 51 02 00      add sp, 2
1191   0A97             ;; p = p + 2; 
1192   0A97 FA FF FF      lea d, [bp + -1] ; $p
1193   0A9A DA            push d
1194   0A9B FA FF FF      lea d, [bp + -1] ; $p
1195   0A9E 2A            mov b, [d]
1196   0A9F             ; START TERMS
1197   0A9F D7            push a
1198   0AA0 11            mov a, b
1199   0AA1 26 02 00      mov b, $2
1200   0AA4 56            add b, a
1201   0AA5 E4            pop a
1202   0AA6             ; END TERMS
1203   0AA6 E7            pop d
1204   0AA7 FD 43         mov [d], b
1205   0AA9             ;; break; 
1206   0AA9 0A 14 0B      jmp _switch15_exit ; case break
1207   0AAC             _switch15_case5:
1208   0AAC             
1209   0AAC             ; --- BEGIN INLINE ASM BLOCK
1210   0AAC FA FF FF      lea d, [bp + -1] ; $p
1211   0AAF FD 2A         mov d, [d]
1212   0AB1 2A            mov b, [d]
1213   0AB2 07 73 14      call print_u16x
1214   0AB5             ; --- END INLINE ASM BLOCK
1215   0AB5             
1216   0AB5             ;; p = p + 2; 
1217   0AB5 FA FF FF      lea d, [bp + -1] ; $p
1218   0AB8 DA            push d
1219   0AB9 FA FF FF      lea d, [bp + -1] ; $p
1220   0ABC 2A            mov b, [d]
1221   0ABD             ; START TERMS
1222   0ABD D7            push a
1223   0ABE 11            mov a, b
1224   0ABF 26 02 00      mov b, $2
1225   0AC2 56            add b, a
1226   0AC3 E4            pop a
1227   0AC4             ; END TERMS
1228   0AC4 E7            pop d
1229   0AC5 FD 43         mov [d], b
1230   0AC7             ;; break; 
1231   0AC7 0A 14 0B      jmp _switch15_exit ; case break
1232   0ACA             _switch15_case6:
1233   0ACA             
1234   0ACA             ; --- BEGIN INLINE ASM BLOCK
1235   0ACA FA FF FF      lea d, [bp + -1] ; $p
1236   0ACD FD 2A         mov d, [d]
1237   0ACF 1E            mov al, [d]
1238   0AD0 23            mov ah, al
1239   0AD1 07 D1 12      call _putchar
1240   0AD4             ; --- END INLINE ASM BLOCK
1241   0AD4             
1242   0AD4             ;; p = p + 2; 
1243   0AD4 FA FF FF      lea d, [bp + -1] ; $p
1244   0AD7 DA            push d
1245   0AD8 FA FF FF      lea d, [bp + -1] ; $p
1246   0ADB 2A            mov b, [d]
1247   0ADC             ; START TERMS
1248   0ADC D7            push a
1249   0ADD 11            mov a, b
1250   0ADE 26 02 00      mov b, $2
1251   0AE1 56            add b, a
1252   0AE2 E4            pop a
1253   0AE3             ; END TERMS
1254   0AE3 E7            pop d
1255   0AE4 FD 43         mov [d], b
1256   0AE6             ;; break; 
1257   0AE6 0A 14 0B      jmp _switch15_exit ; case break
1258   0AE9             _switch15_case7:
1259   0AE9             
1260   0AE9             ; --- BEGIN INLINE ASM BLOCK
1261   0AE9 FA FF FF      lea d, [bp + -1] ; $p
1262   0AEC FD 2A         mov d, [d]
1263   0AEE FD 2A         mov d, [d]
1264   0AF0 07 1B 14      call _puts
1265   0AF3             ; --- END INLINE ASM BLOCK
1266   0AF3             
1267   0AF3             ;; p = p + 2; 
1268   0AF3 FA FF FF      lea d, [bp + -1] ; $p
1269   0AF6 DA            push d
1270   0AF7 FA FF FF      lea d, [bp + -1] ; $p
1271   0AFA 2A            mov b, [d]
1272   0AFB             ; START TERMS
1273   0AFB D7            push a
1274   0AFC 11            mov a, b
1275   0AFD 26 02 00      mov b, $2
1276   0B00 56            add b, a
1277   0B01 E4            pop a
1278   0B02             ; END TERMS
1279   0B02 E7            pop d
1280   0B03 FD 43         mov [d], b
1281   0B05             ;; break; 
1282   0B05 0A 14 0B      jmp _switch15_exit ; case break
1283   0B08             _switch15_default:
1284   0B08             ;; print("Error: Unknown argument type.\n"); 
1285   0B08 26 86 1D      mov b, __s2 ; "Error: Unknown argument type.\n"
1286   0B0B FD AB         swp b
1287   0B0D D8            push b
1288   0B0E 07 38 11      call print
1289   0B11 51 02 00      add sp, 2
1290   0B14             _switch15_exit:
1291   0B14             ;; fp++; 
1292   0B14 FA FD FF      lea d, [bp + -3] ; $fp
1293   0B17 2A            mov b, [d]
1294   0B18 D8            push b
1295   0B19 FD 77         inc b
1296   0B1B FA FD FF      lea d, [bp + -3] ; $fp
1297   0B1E FD 43         mov [d], b
1298   0B20 E5            pop b
1299   0B21 0A 40 0B      jmp _if14_exit
1300   0B24             _if14_else:
1301   0B24             ;; putchar(*fp); 
1302   0B24 FA FD FF      lea d, [bp + -3] ; $fp
1303   0B27 2A            mov b, [d]
1304   0B28 74            mov d, b
1305   0B29 32            mov bl, [d]
1306   0B2A A7 00         mov bh, 0
1307   0B2C DD            push bl
1308   0B2D 07 F0 10      call putchar
1309   0B30 51 01 00      add sp, 1
1310   0B33             ;; fp++; 
1311   0B33 FA FD FF      lea d, [bp + -3] ; $fp
1312   0B36 2A            mov b, [d]
1313   0B37 D8            push b
1314   0B38 FD 77         inc b
1315   0B3A FA FD FF      lea d, [bp + -3] ; $fp
1316   0B3D FD 43         mov [d], b
1317   0B3F E5            pop b
1318   0B40             _if14_exit:
1319   0B40             _if13_exit:
1320   0B40             _for12_update:
1321   0B40 0A 24 09      jmp _for12_cond
1322   0B43             _for12_exit:
1323   0B43 F9            leave
1324   0B44 09            ret
1325   0B45             
1326   0B45             err:
1327   0B45 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1328   0B48             ;; print(e); 
1329   0B48 FA 05 00      lea d, [bp + 5] ; $e
1330   0B4B 2A            mov b, [d]
1331   0B4C FD AB         swp b
1332   0B4E D8            push b
1333   0B4F 07 38 11      call print
1334   0B52 51 02 00      add sp, 2
1335   0B55             ;; exit(); 
1336   0B55 07 19 07      call exit
1337   0B58 F9            leave
1338   0B59 09            ret
1339   0B5A             
1340   0B5A             printx32:
1341   0B5A F8 00 00      enter 0 ; (push bp; mov bp, sp)
1342   0B5D             
1343   0B5D             ; --- BEGIN INLINE ASM BLOCK
1344   0B5D FA 05 00      lea d, [bp + 5] ; $hex
1345   0B60 2B 02 00      mov b, [d+2]
1346   0B63 07 73 14      call print_u16x
1347   0B66 2A            mov b, [d]
1348   0B67 07 73 14      call print_u16x
1349   0B6A             ; --- END INLINE ASM BLOCK
1350   0B6A             
1351   0B6A F9            leave
1352   0B6B 09            ret
1353   0B6C             
1354   0B6C             printx16:
1355   0B6C F8 00 00      enter 0 ; (push bp; mov bp, sp)
1356   0B6F             
1357   0B6F             ; --- BEGIN INLINE ASM BLOCK
1358   0B6F FA 05 00      lea d, [bp + 5] ; $hex
1359   0B72 2A            mov b, [d]
1360   0B73 07 73 14      call print_u16x
1361   0B76             ; --- END INLINE ASM BLOCK
1362   0B76             
1363   0B76 F9            leave
1364   0B77 09            ret
1365   0B78             
1366   0B78             printx8:
1367   0B78 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1368   0B7B             
1369   0B7B             ; --- BEGIN INLINE ASM BLOCK
1370   0B7B FA 05 00      lea d, [bp + 5] ; $hex
1371   0B7E 32            mov bl, [d]
1372   0B7F 07 B7 14      call print_u8x
1373   0B82             ; --- END INLINE ASM BLOCK
1374   0B82             
1375   0B82 F9            leave
1376   0B83 09            ret
1377   0B84             
1378   0B84             hex_to_int:
1379   0B84 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1380   0B87             ; $value 
1381   0B87 10 00 00      mov a, $0
1382   0B8A 45 FF FF      mov [bp + -1], a
1383   0B8D             ; $i 
1384   0B8D             ; $hex_char 
1385   0B8D             ; $len 
1386   0B8D 52 07 00      sub sp, 7
1387   0B90             ;; len = strlen(hex_string); 
1388   0B90 FA FA FF      lea d, [bp + -6] ; $len
1389   0B93 DA            push d
1390   0B94 FA 05 00      lea d, [bp + 5] ; $hex_string
1391   0B97 2A            mov b, [d]
1392   0B98 FD AB         swp b
1393   0B9A D8            push b
1394   0B9B 07 D0 06      call strlen
1395   0B9E 51 02 00      add sp, 2
1396   0BA1 E7            pop d
1397   0BA2 FD 43         mov [d], b
1398   0BA4             ;; for (i = 0; i < len; i++) { 
1399   0BA4             _for19_init:
1400   0BA4 FA FD FF      lea d, [bp + -3] ; $i
1401   0BA7 DA            push d
1402   0BA8 26 00 00      mov b, $0
1403   0BAB E7            pop d
1404   0BAC FD 43         mov [d], b
1405   0BAE             _for19_cond:
1406   0BAE FA FD FF      lea d, [bp + -3] ; $i
1407   0BB1 2A            mov b, [d]
1408   0BB2             ; START RELATIONAL
1409   0BB2 D7            push a
1410   0BB3 11            mov a, b
1411   0BB4 FA FA FF      lea d, [bp + -6] ; $len
1412   0BB7 2A            mov b, [d]
1413   0BB8 B0            cmp a, b
1414   0BB9 FD 75         slu ; <= (unsigned)
1415   0BBB E4            pop a
1416   0BBC             ; END RELATIONAL
1417   0BBC C0 00 00      cmp b, 0
1418   0BBF C6 C1 0C      je _for19_exit
1419   0BC2             _for19_block:
1420   0BC2             ;; hex_char = hex_string[i]; 
1421   0BC2 FA FC FF      lea d, [bp + -4] ; $hex_char
1422   0BC5 DA            push d
1423   0BC6 FA 05 00      lea d, [bp + 5] ; $hex_string
1424   0BC9 FD 2A         mov d, [d]
1425   0BCB D7            push a
1426   0BCC DA            push d
1427   0BCD FA FD FF      lea d, [bp + -3] ; $i
1428   0BD0 2A            mov b, [d]
1429   0BD1 E7            pop d
1430   0BD2 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1431   0BD6 E4            pop a
1432   0BD7 32            mov bl, [d]
1433   0BD8 A7 00         mov bh, 0
1434   0BDA E7            pop d
1435   0BDB FD 3E         mov [d], bl
1436   0BDD             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1437   0BDD             _if20_cond:
1438   0BDD FA FC FF      lea d, [bp + -4] ; $hex_char
1439   0BE0 32            mov bl, [d]
1440   0BE1 A7 00         mov bh, 0
1441   0BE3             ; START RELATIONAL
1442   0BE3 D7            push a
1443   0BE4 11            mov a, b
1444   0BE5 26 61 00      mov b, $61
1445   0BE8 B0            cmp a, b
1446   0BE9 FD 80         sge ; >=
1447   0BEB E4            pop a
1448   0BEC             ; END RELATIONAL
1449   0BEC D7            push a
1450   0BED 11            mov a, b
1451   0BEE FA FC FF      lea d, [bp + -4] ; $hex_char
1452   0BF1 32            mov bl, [d]
1453   0BF2 A7 00         mov bh, 0
1454   0BF4             ; START RELATIONAL
1455   0BF4 D7            push a
1456   0BF5 11            mov a, b
1457   0BF6 26 66 00      mov b, $66
1458   0BF9 B0            cmp a, b
1459   0BFA FD 74         sle ; <=
1460   0BFC E4            pop a
1461   0BFD             ; END RELATIONAL
1462   0BFD FD A7         sand a, b ; &&
1463   0BFF E4            pop a
1464   0C00 C0 00 00      cmp b, 0
1465   0C03 C6 34 0C      je _if20_else
1466   0C06             _if20_true:
1467   0C06             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1468   0C06 FA FF FF      lea d, [bp + -1] ; $value
1469   0C09 DA            push d
1470   0C0A FA FF FF      lea d, [bp + -1] ; $value
1471   0C0D 2A            mov b, [d]
1472   0C0E             ; START FACTORS
1473   0C0E D7            push a
1474   0C0F 11            mov a, b
1475   0C10 26 10 00      mov b, $10
1476   0C13 AC            mul a, b ; *
1477   0C14 11            mov a, b
1478   0C15 27            mov b, a
1479   0C16 E4            pop a
1480   0C17             ; END FACTORS
1481   0C17             ; START TERMS
1482   0C17 D7            push a
1483   0C18 11            mov a, b
1484   0C19 FA FC FF      lea d, [bp + -4] ; $hex_char
1485   0C1C 32            mov bl, [d]
1486   0C1D A7 00         mov bh, 0
1487   0C1F             ; START TERMS
1488   0C1F D7            push a
1489   0C20 11            mov a, b
1490   0C21 26 61 00      mov b, $61
1491   0C24 60            sub a, b
1492   0C25 27            mov b, a
1493   0C26 11            mov a, b
1494   0C27 26 0A 00      mov b, $a
1495   0C2A 56            add b, a
1496   0C2B E4            pop a
1497   0C2C             ; END TERMS
1498   0C2C 56            add b, a
1499   0C2D E4            pop a
1500   0C2E             ; END TERMS
1501   0C2E E7            pop d
1502   0C2F FD 43         mov [d], b
1503   0C31 0A B1 0C      jmp _if20_exit
1504   0C34             _if20_else:
1505   0C34             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1506   0C34             _if21_cond:
1507   0C34 FA FC FF      lea d, [bp + -4] ; $hex_char
1508   0C37 32            mov bl, [d]
1509   0C38 A7 00         mov bh, 0
1510   0C3A             ; START RELATIONAL
1511   0C3A D7            push a
1512   0C3B 11            mov a, b
1513   0C3C 26 41 00      mov b, $41
1514   0C3F B0            cmp a, b
1515   0C40 FD 80         sge ; >=
1516   0C42 E4            pop a
1517   0C43             ; END RELATIONAL
1518   0C43 D7            push a
1519   0C44 11            mov a, b
1520   0C45 FA FC FF      lea d, [bp + -4] ; $hex_char
1521   0C48 32            mov bl, [d]
1522   0C49 A7 00         mov bh, 0
1523   0C4B             ; START RELATIONAL
1524   0C4B D7            push a
1525   0C4C 11            mov a, b
1526   0C4D 26 46 00      mov b, $46
1527   0C50 B0            cmp a, b
1528   0C51 FD 74         sle ; <=
1529   0C53 E4            pop a
1530   0C54             ; END RELATIONAL
1531   0C54 FD A7         sand a, b ; &&
1532   0C56 E4            pop a
1533   0C57 C0 00 00      cmp b, 0
1534   0C5A C6 8B 0C      je _if21_else
1535   0C5D             _if21_true:
1536   0C5D             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1537   0C5D FA FF FF      lea d, [bp + -1] ; $value
1538   0C60 DA            push d
1539   0C61 FA FF FF      lea d, [bp + -1] ; $value
1540   0C64 2A            mov b, [d]
1541   0C65             ; START FACTORS
1542   0C65 D7            push a
1543   0C66 11            mov a, b
1544   0C67 26 10 00      mov b, $10
1545   0C6A AC            mul a, b ; *
1546   0C6B 11            mov a, b
1547   0C6C 27            mov b, a
1548   0C6D E4            pop a
1549   0C6E             ; END FACTORS
1550   0C6E             ; START TERMS
1551   0C6E D7            push a
1552   0C6F 11            mov a, b
1553   0C70 FA FC FF      lea d, [bp + -4] ; $hex_char
1554   0C73 32            mov bl, [d]
1555   0C74 A7 00         mov bh, 0
1556   0C76             ; START TERMS
1557   0C76 D7            push a
1558   0C77 11            mov a, b
1559   0C78 26 41 00      mov b, $41
1560   0C7B 60            sub a, b
1561   0C7C 27            mov b, a
1562   0C7D 11            mov a, b
1563   0C7E 26 0A 00      mov b, $a
1564   0C81 56            add b, a
1565   0C82 E4            pop a
1566   0C83             ; END TERMS
1567   0C83 56            add b, a
1568   0C84 E4            pop a
1569   0C85             ; END TERMS
1570   0C85 E7            pop d
1571   0C86 FD 43         mov [d], b
1572   0C88 0A B1 0C      jmp _if21_exit
1573   0C8B             _if21_else:
1574   0C8B             ;; value = (value * 16) + (hex_char - '0'); 
1575   0C8B FA FF FF      lea d, [bp + -1] ; $value
1576   0C8E DA            push d
1577   0C8F FA FF FF      lea d, [bp + -1] ; $value
1578   0C92 2A            mov b, [d]
1579   0C93             ; START FACTORS
1580   0C93 D7            push a
1581   0C94 11            mov a, b
1582   0C95 26 10 00      mov b, $10
1583   0C98 AC            mul a, b ; *
1584   0C99 11            mov a, b
1585   0C9A 27            mov b, a
1586   0C9B E4            pop a
1587   0C9C             ; END FACTORS
1588   0C9C             ; START TERMS
1589   0C9C D7            push a
1590   0C9D 11            mov a, b
1591   0C9E FA FC FF      lea d, [bp + -4] ; $hex_char
1592   0CA1 32            mov bl, [d]
1593   0CA2 A7 00         mov bh, 0
1594   0CA4             ; START TERMS
1595   0CA4 D7            push a
1596   0CA5 11            mov a, b
1597   0CA6 26 30 00      mov b, $30
1598   0CA9 60            sub a, b
1599   0CAA 27            mov b, a
1600   0CAB E4            pop a
1601   0CAC             ; END TERMS
1602   0CAC 56            add b, a
1603   0CAD E4            pop a
1604   0CAE             ; END TERMS
1605   0CAE E7            pop d
1606   0CAF FD 43         mov [d], b
1607   0CB1             _if21_exit:
1608   0CB1             _if20_exit:
1609   0CB1             _for19_update:
1610   0CB1 FA FD FF      lea d, [bp + -3] ; $i
1611   0CB4 2A            mov b, [d]
1612   0CB5 D8            push b
1613   0CB6 FD 77         inc b
1614   0CB8 FA FD FF      lea d, [bp + -3] ; $i
1615   0CBB FD 43         mov [d], b
1616   0CBD E5            pop b
1617   0CBE 0A AE 0B      jmp _for19_cond
1618   0CC1             _for19_exit:
1619   0CC1             ;; return value; 
1620   0CC1 FA FF FF      lea d, [bp + -1] ; $value
1621   0CC4 2A            mov b, [d]
1622   0CC5 F9            leave
1623   0CC6 09            ret
1624   0CC7             
1625   0CC7             gets:
1626   0CC7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1627   0CCA             
1628   0CCA             ; --- BEGIN INLINE ASM BLOCK
1629   0CCA FA 05 00      lea d, [bp + 5] ; $s
1630   0CCD 15            mov a, [d]
1631   0CCE 3C            mov d, a
1632   0CCF 07 D8 12      call _gets
1633   0CD2             ; --- END INLINE ASM BLOCK
1634   0CD2             
1635   0CD2             ;; return strlen(s); 
1636   0CD2 FA 05 00      lea d, [bp + 5] ; $s
1637   0CD5 2A            mov b, [d]
1638   0CD6 FD AB         swp b
1639   0CD8 D8            push b
1640   0CD9 07 D0 06      call strlen
1641   0CDC 51 02 00      add sp, 2
1642   0CDF F9            leave
1643   0CE0 09            ret
1644   0CE1             
1645   0CE1             print_signed:
1646   0CE1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1647   0CE4             ; $digits 
1648   0CE4             ; $i 
1649   0CE4 10 00 00      mov a, $0
1650   0CE7 45 FA FF      mov [bp + -6], a
1651   0CEA 52 07 00      sub sp, 7
1652   0CED             ;; if (num < 0) { 
1653   0CED             _if22_cond:
1654   0CED FA 05 00      lea d, [bp + 5] ; $num
1655   0CF0 2A            mov b, [d]
1656   0CF1             ; START RELATIONAL
1657   0CF1 D7            push a
1658   0CF2 11            mov a, b
1659   0CF3 26 00 00      mov b, $0
1660   0CF6 B0            cmp a, b
1661   0CF7 FD 75         slu ; <= (unsigned)
1662   0CF9 E4            pop a
1663   0CFA             ; END RELATIONAL
1664   0CFA C0 00 00      cmp b, 0
1665   0CFD C6 1A 0D      je _if22_else
1666   0D00             _if22_true:
1667   0D00             ;; putchar('-'); 
1668   0D00 26 2D 00      mov b, $2d
1669   0D03 DD            push bl
1670   0D04 07 F0 10      call putchar
1671   0D07 51 01 00      add sp, 1
1672   0D0A             ;; num = -num; 
1673   0D0A FA 05 00      lea d, [bp + 5] ; $num
1674   0D0D DA            push d
1675   0D0E FA 05 00      lea d, [bp + 5] ; $num
1676   0D11 2A            mov b, [d]
1677   0D12 FD 97         neg b
1678   0D14 E7            pop d
1679   0D15 FD 43         mov [d], b
1680   0D17 0A 3C 0D      jmp _if22_exit
1681   0D1A             _if22_else:
1682   0D1A             ;; if (num == 0) { 
1683   0D1A             _if23_cond:
1684   0D1A FA 05 00      lea d, [bp + 5] ; $num
1685   0D1D 2A            mov b, [d]
1686   0D1E             ; START RELATIONAL
1687   0D1E D7            push a
1688   0D1F 11            mov a, b
1689   0D20 26 00 00      mov b, $0
1690   0D23 B0            cmp a, b
1691   0D24 FD 71         seq ; ==
1692   0D26 E4            pop a
1693   0D27             ; END RELATIONAL
1694   0D27 C0 00 00      cmp b, 0
1695   0D2A C6 3C 0D      je _if23_exit
1696   0D2D             _if23_true:
1697   0D2D             ;; putchar('0'); 
1698   0D2D 26 30 00      mov b, $30
1699   0D30 DD            push bl
1700   0D31 07 F0 10      call putchar
1701   0D34 51 01 00      add sp, 1
1702   0D37             ;; return; 
1703   0D37 F9            leave
1704   0D38 09            ret
1705   0D39 0A 3C 0D      jmp _if23_exit
1706   0D3C             _if23_exit:
1707   0D3C             _if22_exit:
1708   0D3C             ;; while (num > 0) { 
1709   0D3C             _while24_cond:
1710   0D3C FA 05 00      lea d, [bp + 5] ; $num
1711   0D3F 2A            mov b, [d]
1712   0D40             ; START RELATIONAL
1713   0D40 D7            push a
1714   0D41 11            mov a, b
1715   0D42 26 00 00      mov b, $0
1716   0D45 B0            cmp a, b
1717   0D46 FD 7F         sgt ; >
1718   0D48 E4            pop a
1719   0D49             ; END RELATIONAL
1720   0D49 C0 00 00      cmp b, 0
1721   0D4C C6 96 0D      je _while24_exit
1722   0D4F             _while24_block:
1723   0D4F             ;; digits[i] = '0' + (num % 10); 
1724   0D4F FA FC FF      lea d, [bp + -4] ; $digits
1725   0D52 D7            push a
1726   0D53 DA            push d
1727   0D54 FA FA FF      lea d, [bp + -6] ; $i
1728   0D57 2A            mov b, [d]
1729   0D58 E7            pop d
1730   0D59 5A            add d, b
1731   0D5A E4            pop a
1732   0D5B DA            push d
1733   0D5C 26 30 00      mov b, $30
1734   0D5F             ; START TERMS
1735   0D5F D7            push a
1736   0D60 11            mov a, b
1737   0D61 FA 05 00      lea d, [bp + 5] ; $num
1738   0D64 2A            mov b, [d]
1739   0D65             ; START FACTORS
1740   0D65 D7            push a
1741   0D66 11            mov a, b
1742   0D67 26 0A 00      mov b, $a
1743   0D6A AE            div a, b ; 
1744   0D6B 11            mov a, b
1745   0D6C 27            mov b, a
1746   0D6D E4            pop a
1747   0D6E             ; END FACTORS
1748   0D6E 56            add b, a
1749   0D6F E4            pop a
1750   0D70             ; END TERMS
1751   0D70 E7            pop d
1752   0D71 FD 3E         mov [d], bl
1753   0D73             ;; num = num / 10; 
1754   0D73 FA 05 00      lea d, [bp + 5] ; $num
1755   0D76 DA            push d
1756   0D77 FA 05 00      lea d, [bp + 5] ; $num
1757   0D7A 2A            mov b, [d]
1758   0D7B             ; START FACTORS
1759   0D7B D7            push a
1760   0D7C 11            mov a, b
1761   0D7D 26 0A 00      mov b, $a
1762   0D80 AE            div a, b
1763   0D81 27            mov b, a
1764   0D82 E4            pop a
1765   0D83             ; END FACTORS
1766   0D83 E7            pop d
1767   0D84 FD 43         mov [d], b
1768   0D86             ;; i++; 
1769   0D86 FA FA FF      lea d, [bp + -6] ; $i
1770   0D89 2A            mov b, [d]
1771   0D8A D8            push b
1772   0D8B FD 77         inc b
1773   0D8D FA FA FF      lea d, [bp + -6] ; $i
1774   0D90 FD 43         mov [d], b
1775   0D92 E5            pop b
1776   0D93 0A 3C 0D      jmp _while24_cond
1777   0D96             _while24_exit:
1778   0D96             ;; while (i > 0) { 
1779   0D96             _while25_cond:
1780   0D96 FA FA FF      lea d, [bp + -6] ; $i
1781   0D99 2A            mov b, [d]
1782   0D9A             ; START RELATIONAL
1783   0D9A D7            push a
1784   0D9B 11            mov a, b
1785   0D9C 26 00 00      mov b, $0
1786   0D9F B0            cmp a, b
1787   0DA0 FD 7F         sgt ; >
1788   0DA2 E4            pop a
1789   0DA3             ; END RELATIONAL
1790   0DA3 C0 00 00      cmp b, 0
1791   0DA6 C6 CF 0D      je _while25_exit
1792   0DA9             _while25_block:
1793   0DA9             ;; i--; 
1794   0DA9 FA FA FF      lea d, [bp + -6] ; $i
1795   0DAC 2A            mov b, [d]
1796   0DAD D8            push b
1797   0DAE FD 7D         dec b
1798   0DB0 FA FA FF      lea d, [bp + -6] ; $i
1799   0DB3 FD 43         mov [d], b
1800   0DB5 E5            pop b
1801   0DB6             ;; putchar(digits[i]); 
1802   0DB6 FA FC FF      lea d, [bp + -4] ; $digits
1803   0DB9 D7            push a
1804   0DBA DA            push d
1805   0DBB FA FA FF      lea d, [bp + -6] ; $i
1806   0DBE 2A            mov b, [d]
1807   0DBF E7            pop d
1808   0DC0 5A            add d, b
1809   0DC1 E4            pop a
1810   0DC2 32            mov bl, [d]
1811   0DC3 A7 00         mov bh, 0
1812   0DC5 DD            push bl
1813   0DC6 07 F0 10      call putchar
1814   0DC9 51 01 00      add sp, 1
1815   0DCC 0A 96 0D      jmp _while25_cond
1816   0DCF             _while25_exit:
1817   0DCF F9            leave
1818   0DD0 09            ret
1819   0DD1             
1820   0DD1             print_signed_long:
1821   0DD1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1822   0DD4             ; $digits 
1823   0DD4             ; $i 
1824   0DD4 10 00 00      mov a, $0
1825   0DD7 45 F5 FF      mov [bp + -11], a
1826   0DDA 52 0C 00      sub sp, 12
1827   0DDD             ;; if (num < 0) { 
1828   0DDD             _if26_cond:
1829   0DDD FA 05 00      lea d, [bp + 5] ; $num
1830   0DE0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1831   0DE3 FD 39         mov c, b ; And place it into C
1832   0DE5 2A            mov b, [d] ; Lower Word in B
1833   0DE6             ; START RELATIONAL
1834   0DE6 D7            push a
1835   0DE7 FD D8         push g
1836   0DE9 11            mov a, b
1837   0DEA FD 7A         mov g, c
1838   0DEC 26 00 00      mov b, $0
1839   0DEF 4D            mov si, a
1840   0DF0 11            mov a, b
1841   0DF1 4F            mov di, a
1842   0DF2 FD 12         mov a, g
1843   0DF4 28            mov b, c
1844   0DF5 B0            cmp a, b
1845   0DF6 FD 75         slu ; <
1846   0DF8 D8            push b
1847   0DF9 28            mov b, c
1848   0DFA FD 71         seq ; ==
1849   0DFC D8            push b
1850   0DFD 50            mov a, di
1851   0DFE 27            mov b, a
1852   0DFF 4E            mov a, si
1853   0E00 B0            cmp a, b
1854   0E01 FD 75         slu ; <
1855   0E03 E4            pop a
1856   0E04 FD 92         and b, a
1857   0E06 E4            pop a
1858   0E07 FD 70         or b, a
1859   0E09               
1860   0E09 FD F1         pop g
1861   0E0B E4            pop a
1862   0E0C             ; END RELATIONAL
1863   0E0C C0 00 00      cmp b, 0
1864   0E0F C6 36 0E      je _if26_else
1865   0E12             _if26_true:
1866   0E12             ;; putchar('-'); 
1867   0E12 26 2D 00      mov b, $2d
1868   0E15 DD            push bl
1869   0E16 07 F0 10      call putchar
1870   0E19 51 01 00      add sp, 1
1871   0E1C             ;; num = -num; 
1872   0E1C FA 05 00      lea d, [bp + 5] ; $num
1873   0E1F DA            push d
1874   0E20 FA 05 00      lea d, [bp + 5] ; $num
1875   0E23 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1876   0E26 FD 39         mov c, b ; And place it into C
1877   0E28 2A            mov b, [d] ; Lower Word in B
1878   0E29 FD 97         neg b
1879   0E2B E7            pop d
1880   0E2C FD 43         mov [d], b
1881   0E2E 28            mov b, c
1882   0E2F FD 44 02 00   mov [d + 2], b
1883   0E33 0A 6D 0E      jmp _if26_exit
1884   0E36             _if26_else:
1885   0E36             ;; if (num == 0) { 
1886   0E36             _if27_cond:
1887   0E36 FA 05 00      lea d, [bp + 5] ; $num
1888   0E39 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1889   0E3C FD 39         mov c, b ; And place it into C
1890   0E3E 2A            mov b, [d] ; Lower Word in B
1891   0E3F             ; START RELATIONAL
1892   0E3F D7            push a
1893   0E40 FD D8         push g
1894   0E42 11            mov a, b
1895   0E43 FD 7A         mov g, c
1896   0E45 26 00 00      mov b, $0
1897   0E48 B0            cmp a, b
1898   0E49 FD 71         seq ; ==
1899   0E4B D8            push b
1900   0E4C 12            mov a, c
1901   0E4D FD 27         mov b, g
1902   0E4F B0            cmp a, b
1903   0E50 FD 71         seq ; ==
1904   0E52 E4            pop a
1905   0E53 FD A7         sand a, b
1906   0E55 FD F1         pop g
1907   0E57 E4            pop a
1908   0E58             ; END RELATIONAL
1909   0E58 C0 00 00      cmp b, 0
1910   0E5B C6 6D 0E      je _if27_exit
1911   0E5E             _if27_true:
1912   0E5E             ;; putchar('0'); 
1913   0E5E 26 30 00      mov b, $30
1914   0E61 DD            push bl
1915   0E62 07 F0 10      call putchar
1916   0E65 51 01 00      add sp, 1
1917   0E68             ;; return; 
1918   0E68 F9            leave
1919   0E69 09            ret
1920   0E6A 0A 6D 0E      jmp _if27_exit
1921   0E6D             _if27_exit:
1922   0E6D             _if26_exit:
1923   0E6D             ;; while (num > 0) { 
1924   0E6D             _while28_cond:
1925   0E6D FA 05 00      lea d, [bp + 5] ; $num
1926   0E70 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1927   0E73 FD 39         mov c, b ; And place it into C
1928   0E75 2A            mov b, [d] ; Lower Word in B
1929   0E76             ; START RELATIONAL
1930   0E76 D7            push a
1931   0E77 FD D8         push g
1932   0E79 11            mov a, b
1933   0E7A FD 7A         mov g, c
1934   0E7C 26 00 00      mov b, $0
1935   0E7F B0            cmp a, b
1936   0E80 FD 7F         sgt ; >
1937   0E82 FD F1         pop g
1938   0E84 E4            pop a
1939   0E85             ; END RELATIONAL
1940   0E85 C0 00 00      cmp b, 0
1941   0E88 C6 E8 0E      je _while28_exit
1942   0E8B             _while28_block:
1943   0E8B             ;; digits[i] = '0' + (num % 10); 
1944   0E8B FA F7 FF      lea d, [bp + -9] ; $digits
1945   0E8E D7            push a
1946   0E8F DA            push d
1947   0E90 FA F5 FF      lea d, [bp + -11] ; $i
1948   0E93 2A            mov b, [d]
1949   0E94 E7            pop d
1950   0E95 5A            add d, b
1951   0E96 E4            pop a
1952   0E97 DA            push d
1953   0E98 26 30 00      mov b, $30
1954   0E9B             ; START TERMS
1955   0E9B D7            push a
1956   0E9C 11            mov a, b
1957   0E9D FA 05 00      lea d, [bp + 5] ; $num
1958   0EA0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1959   0EA3 FD 39         mov c, b ; And place it into C
1960   0EA5 2A            mov b, [d] ; Lower Word in B
1961   0EA6             ; START FACTORS
1962   0EA6 D7            push a
1963   0EA7 11            mov a, b
1964   0EA8 26 0A 00      mov b, $a
1965   0EAB AE            div a, b ; 
1966   0EAC 11            mov a, b
1967   0EAD 27            mov b, a
1968   0EAE E4            pop a
1969   0EAF             ; END FACTORS
1970   0EAF 54            add a, b
1971   0EB0 D7            push a
1972   0EB1 FD 12         mov a, g
1973   0EB3 28            mov b, c
1974   0EB4 5C            adc a, b
1975   0EB5 39            mov c, a
1976   0EB6 E5            pop b
1977   0EB7 E4            pop a
1978   0EB8             ; END TERMS
1979   0EB8 E7            pop d
1980   0EB9 FD 3E         mov [d], bl
1981   0EBB             ;; num = num / 10; 
1982   0EBB FA 05 00      lea d, [bp + 5] ; $num
1983   0EBE DA            push d
1984   0EBF FA 05 00      lea d, [bp + 5] ; $num
1985   0EC2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1986   0EC5 FD 39         mov c, b ; And place it into C
1987   0EC7 2A            mov b, [d] ; Lower Word in B
1988   0EC8             ; START FACTORS
1989   0EC8 D7            push a
1990   0EC9 11            mov a, b
1991   0ECA 26 0A 00      mov b, $a
1992   0ECD AE            div a, b
1993   0ECE 27            mov b, a
1994   0ECF E4            pop a
1995   0ED0             ; END FACTORS
1996   0ED0 E7            pop d
1997   0ED1 FD 43         mov [d], b
1998   0ED3 28            mov b, c
1999   0ED4 FD 44 02 00   mov [d + 2], b
2000   0ED8             ;; i++; 
2001   0ED8 FA F5 FF      lea d, [bp + -11] ; $i
2002   0EDB 2A            mov b, [d]
2003   0EDC D8            push b
2004   0EDD FD 77         inc b
2005   0EDF FA F5 FF      lea d, [bp + -11] ; $i
2006   0EE2 FD 43         mov [d], b
2007   0EE4 E5            pop b
2008   0EE5 0A 6D 0E      jmp _while28_cond
2009   0EE8             _while28_exit:
2010   0EE8             ;; while (i > 0) { 
2011   0EE8             _while29_cond:
2012   0EE8 FA F5 FF      lea d, [bp + -11] ; $i
2013   0EEB 2A            mov b, [d]
2014   0EEC             ; START RELATIONAL
2015   0EEC D7            push a
2016   0EED 11            mov a, b
2017   0EEE 26 00 00      mov b, $0
2018   0EF1 B0            cmp a, b
2019   0EF2 FD 7F         sgt ; >
2020   0EF4 E4            pop a
2021   0EF5             ; END RELATIONAL
2022   0EF5 C0 00 00      cmp b, 0
2023   0EF8 C6 21 0F      je _while29_exit
2024   0EFB             _while29_block:
2025   0EFB             ;; i--; 
2026   0EFB FA F5 FF      lea d, [bp + -11] ; $i
2027   0EFE 2A            mov b, [d]
2028   0EFF D8            push b
2029   0F00 FD 7D         dec b
2030   0F02 FA F5 FF      lea d, [bp + -11] ; $i
2031   0F05 FD 43         mov [d], b
2032   0F07 E5            pop b
2033   0F08             ;; putchar(digits[i]); 
2034   0F08 FA F7 FF      lea d, [bp + -9] ; $digits
2035   0F0B D7            push a
2036   0F0C DA            push d
2037   0F0D FA F5 FF      lea d, [bp + -11] ; $i
2038   0F10 2A            mov b, [d]
2039   0F11 E7            pop d
2040   0F12 5A            add d, b
2041   0F13 E4            pop a
2042   0F14 32            mov bl, [d]
2043   0F15 A7 00         mov bh, 0
2044   0F17 DD            push bl
2045   0F18 07 F0 10      call putchar
2046   0F1B 51 01 00      add sp, 1
2047   0F1E 0A E8 0E      jmp _while29_cond
2048   0F21             _while29_exit:
2049   0F21 F9            leave
2050   0F22 09            ret
2051   0F23             
2052   0F23             print_unsigned_long:
2053   0F23 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2054   0F26             ; $digits 
2055   0F26             ; $i 
2056   0F26 52 0C 00      sub sp, 12
2057   0F29             ;; i = 0; 
2058   0F29 FA F5 FF      lea d, [bp + -11] ; $i
2059   0F2C DA            push d
2060   0F2D 26 00 00      mov b, $0
2061   0F30 E7            pop d
2062   0F31 FD 43         mov [d], b
2063   0F33             ;; if(num == 0){ 
2064   0F33             _if30_cond:
2065   0F33 FA 05 00      lea d, [bp + 5] ; $num
2066   0F36 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2067   0F39 FD 39         mov c, b ; And place it into C
2068   0F3B 2A            mov b, [d] ; Lower Word in B
2069   0F3C             ; START RELATIONAL
2070   0F3C D7            push a
2071   0F3D FD D8         push g
2072   0F3F 11            mov a, b
2073   0F40 FD 7A         mov g, c
2074   0F42 26 00 00      mov b, $0
2075   0F45 B0            cmp a, b
2076   0F46 FD 71         seq ; ==
2077   0F48 D8            push b
2078   0F49 12            mov a, c
2079   0F4A FD 27         mov b, g
2080   0F4C B0            cmp a, b
2081   0F4D FD 71         seq ; ==
2082   0F4F E4            pop a
2083   0F50 FD A7         sand a, b
2084   0F52 FD F1         pop g
2085   0F54 E4            pop a
2086   0F55             ; END RELATIONAL
2087   0F55 C0 00 00      cmp b, 0
2088   0F58 C6 6A 0F      je _if30_exit
2089   0F5B             _if30_true:
2090   0F5B             ;; putchar('0'); 
2091   0F5B 26 30 00      mov b, $30
2092   0F5E DD            push bl
2093   0F5F 07 F0 10      call putchar
2094   0F62 51 01 00      add sp, 1
2095   0F65             ;; return; 
2096   0F65 F9            leave
2097   0F66 09            ret
2098   0F67 0A 6A 0F      jmp _if30_exit
2099   0F6A             _if30_exit:
2100   0F6A             ;; while (num > 0) { 
2101   0F6A             _while31_cond:
2102   0F6A FA 05 00      lea d, [bp + 5] ; $num
2103   0F6D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2104   0F70 FD 39         mov c, b ; And place it into C
2105   0F72 2A            mov b, [d] ; Lower Word in B
2106   0F73             ; START RELATIONAL
2107   0F73 D7            push a
2108   0F74 FD D8         push g
2109   0F76 11            mov a, b
2110   0F77 FD 7A         mov g, c
2111   0F79 26 00 00      mov b, $0
2112   0F7C B0            cmp a, b
2113   0F7D FD 81         sgu ; > (unsigned)
2114   0F7F FD F1         pop g
2115   0F81 E4            pop a
2116   0F82             ; END RELATIONAL
2117   0F82 C0 00 00      cmp b, 0
2118   0F85 C6 E5 0F      je _while31_exit
2119   0F88             _while31_block:
2120   0F88             ;; digits[i] = '0' + (num % 10); 
2121   0F88 FA F7 FF      lea d, [bp + -9] ; $digits
2122   0F8B D7            push a
2123   0F8C DA            push d
2124   0F8D FA F5 FF      lea d, [bp + -11] ; $i
2125   0F90 2A            mov b, [d]
2126   0F91 E7            pop d
2127   0F92 5A            add d, b
2128   0F93 E4            pop a
2129   0F94 DA            push d
2130   0F95 26 30 00      mov b, $30
2131   0F98             ; START TERMS
2132   0F98 D7            push a
2133   0F99 11            mov a, b
2134   0F9A FA 05 00      lea d, [bp + 5] ; $num
2135   0F9D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2136   0FA0 FD 39         mov c, b ; And place it into C
2137   0FA2 2A            mov b, [d] ; Lower Word in B
2138   0FA3             ; START FACTORS
2139   0FA3 D7            push a
2140   0FA4 11            mov a, b
2141   0FA5 26 0A 00      mov b, $a
2142   0FA8 AE            div a, b ; 
2143   0FA9 11            mov a, b
2144   0FAA 27            mov b, a
2145   0FAB E4            pop a
2146   0FAC             ; END FACTORS
2147   0FAC 54            add a, b
2148   0FAD D7            push a
2149   0FAE FD 12         mov a, g
2150   0FB0 28            mov b, c
2151   0FB1 5C            adc a, b
2152   0FB2 39            mov c, a
2153   0FB3 E5            pop b
2154   0FB4 E4            pop a
2155   0FB5             ; END TERMS
2156   0FB5 E7            pop d
2157   0FB6 FD 3E         mov [d], bl
2158   0FB8             ;; num = num / 10; 
2159   0FB8 FA 05 00      lea d, [bp + 5] ; $num
2160   0FBB DA            push d
2161   0FBC FA 05 00      lea d, [bp + 5] ; $num
2162   0FBF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2163   0FC2 FD 39         mov c, b ; And place it into C
2164   0FC4 2A            mov b, [d] ; Lower Word in B
2165   0FC5             ; START FACTORS
2166   0FC5 D7            push a
2167   0FC6 11            mov a, b
2168   0FC7 26 0A 00      mov b, $a
2169   0FCA AE            div a, b
2170   0FCB 27            mov b, a
2171   0FCC E4            pop a
2172   0FCD             ; END FACTORS
2173   0FCD E7            pop d
2174   0FCE FD 43         mov [d], b
2175   0FD0 28            mov b, c
2176   0FD1 FD 44 02 00   mov [d + 2], b
2177   0FD5             ;; i++; 
2178   0FD5 FA F5 FF      lea d, [bp + -11] ; $i
2179   0FD8 2A            mov b, [d]
2180   0FD9 D8            push b
2181   0FDA FD 77         inc b
2182   0FDC FA F5 FF      lea d, [bp + -11] ; $i
2183   0FDF FD 43         mov [d], b
2184   0FE1 E5            pop b
2185   0FE2 0A 6A 0F      jmp _while31_cond
2186   0FE5             _while31_exit:
2187   0FE5             ;; while (i > 0) { 
2188   0FE5             _while32_cond:
2189   0FE5 FA F5 FF      lea d, [bp + -11] ; $i
2190   0FE8 2A            mov b, [d]
2191   0FE9             ; START RELATIONAL
2192   0FE9 D7            push a
2193   0FEA 11            mov a, b
2194   0FEB 26 00 00      mov b, $0
2195   0FEE B0            cmp a, b
2196   0FEF FD 7F         sgt ; >
2197   0FF1 E4            pop a
2198   0FF2             ; END RELATIONAL
2199   0FF2 C0 00 00      cmp b, 0
2200   0FF5 C6 1E 10      je _while32_exit
2201   0FF8             _while32_block:
2202   0FF8             ;; i--; 
2203   0FF8 FA F5 FF      lea d, [bp + -11] ; $i
2204   0FFB 2A            mov b, [d]
2205   0FFC D8            push b
2206   0FFD FD 7D         dec b
2207   0FFF FA F5 FF      lea d, [bp + -11] ; $i
2208   1002 FD 43         mov [d], b
2209   1004 E5            pop b
2210   1005             ;; putchar(digits[i]); 
2211   1005 FA F7 FF      lea d, [bp + -9] ; $digits
2212   1008 D7            push a
2213   1009 DA            push d
2214   100A FA F5 FF      lea d, [bp + -11] ; $i
2215   100D 2A            mov b, [d]
2216   100E E7            pop d
2217   100F 5A            add d, b
2218   1010 E4            pop a
2219   1011 32            mov bl, [d]
2220   1012 A7 00         mov bh, 0
2221   1014 DD            push bl
2222   1015 07 F0 10      call putchar
2223   1018 51 01 00      add sp, 1
2224   101B 0A E5 0F      jmp _while32_cond
2225   101E             _while32_exit:
2226   101E F9            leave
2227   101F 09            ret
2228   1020             
2229   1020             print_unsigned:
2230   1020 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2231   1023             ; $digits 
2232   1023             ; $i 
2233   1023 52 07 00      sub sp, 7
2234   1026             ;; i = 0; 
2235   1026 FA FA FF      lea d, [bp + -6] ; $i
2236   1029 DA            push d
2237   102A 26 00 00      mov b, $0
2238   102D E7            pop d
2239   102E FD 43         mov [d], b
2240   1030             ;; if(num == 0){ 
2241   1030             _if33_cond:
2242   1030 FA 05 00      lea d, [bp + 5] ; $num
2243   1033 2A            mov b, [d]
2244   1034             ; START RELATIONAL
2245   1034 D7            push a
2246   1035 11            mov a, b
2247   1036 26 00 00      mov b, $0
2248   1039 B0            cmp a, b
2249   103A FD 71         seq ; ==
2250   103C E4            pop a
2251   103D             ; END RELATIONAL
2252   103D C0 00 00      cmp b, 0
2253   1040 C6 52 10      je _if33_exit
2254   1043             _if33_true:
2255   1043             ;; putchar('0'); 
2256   1043 26 30 00      mov b, $30
2257   1046 DD            push bl
2258   1047 07 F0 10      call putchar
2259   104A 51 01 00      add sp, 1
2260   104D             ;; return; 
2261   104D F9            leave
2262   104E 09            ret
2263   104F 0A 52 10      jmp _if33_exit
2264   1052             _if33_exit:
2265   1052             ;; while (num > 0) { 
2266   1052             _while34_cond:
2267   1052 FA 05 00      lea d, [bp + 5] ; $num
2268   1055 2A            mov b, [d]
2269   1056             ; START RELATIONAL
2270   1056 D7            push a
2271   1057 11            mov a, b
2272   1058 26 00 00      mov b, $0
2273   105B B0            cmp a, b
2274   105C FD 81         sgu ; > (unsigned)
2275   105E E4            pop a
2276   105F             ; END RELATIONAL
2277   105F C0 00 00      cmp b, 0
2278   1062 C6 AC 10      je _while34_exit
2279   1065             _while34_block:
2280   1065             ;; digits[i] = '0' + (num % 10); 
2281   1065 FA FC FF      lea d, [bp + -4] ; $digits
2282   1068 D7            push a
2283   1069 DA            push d
2284   106A FA FA FF      lea d, [bp + -6] ; $i
2285   106D 2A            mov b, [d]
2286   106E E7            pop d
2287   106F 5A            add d, b
2288   1070 E4            pop a
2289   1071 DA            push d
2290   1072 26 30 00      mov b, $30
2291   1075             ; START TERMS
2292   1075 D7            push a
2293   1076 11            mov a, b
2294   1077 FA 05 00      lea d, [bp + 5] ; $num
2295   107A 2A            mov b, [d]
2296   107B             ; START FACTORS
2297   107B D7            push a
2298   107C 11            mov a, b
2299   107D 26 0A 00      mov b, $a
2300   1080 AE            div a, b ; 
2301   1081 11            mov a, b
2302   1082 27            mov b, a
2303   1083 E4            pop a
2304   1084             ; END FACTORS
2305   1084 56            add b, a
2306   1085 E4            pop a
2307   1086             ; END TERMS
2308   1086 E7            pop d
2309   1087 FD 3E         mov [d], bl
2310   1089             ;; num = num / 10; 
2311   1089 FA 05 00      lea d, [bp + 5] ; $num
2312   108C DA            push d
2313   108D FA 05 00      lea d, [bp + 5] ; $num
2314   1090 2A            mov b, [d]
2315   1091             ; START FACTORS
2316   1091 D7            push a
2317   1092 11            mov a, b
2318   1093 26 0A 00      mov b, $a
2319   1096 AE            div a, b
2320   1097 27            mov b, a
2321   1098 E4            pop a
2322   1099             ; END FACTORS
2323   1099 E7            pop d
2324   109A FD 43         mov [d], b
2325   109C             ;; i++; 
2326   109C FA FA FF      lea d, [bp + -6] ; $i
2327   109F 2A            mov b, [d]
2328   10A0 D8            push b
2329   10A1 FD 77         inc b
2330   10A3 FA FA FF      lea d, [bp + -6] ; $i
2331   10A6 FD 43         mov [d], b
2332   10A8 E5            pop b
2333   10A9 0A 52 10      jmp _while34_cond
2334   10AC             _while34_exit:
2335   10AC             ;; while (i > 0) { 
2336   10AC             _while35_cond:
2337   10AC FA FA FF      lea d, [bp + -6] ; $i
2338   10AF 2A            mov b, [d]
2339   10B0             ; START RELATIONAL
2340   10B0 D7            push a
2341   10B1 11            mov a, b
2342   10B2 26 00 00      mov b, $0
2343   10B5 B0            cmp a, b
2344   10B6 FD 7F         sgt ; >
2345   10B8 E4            pop a
2346   10B9             ; END RELATIONAL
2347   10B9 C0 00 00      cmp b, 0
2348   10BC C6 E5 10      je _while35_exit
2349   10BF             _while35_block:
2350   10BF             ;; i--; 
2351   10BF FA FA FF      lea d, [bp + -6] ; $i
2352   10C2 2A            mov b, [d]
2353   10C3 D8            push b
2354   10C4 FD 7D         dec b
2355   10C6 FA FA FF      lea d, [bp + -6] ; $i
2356   10C9 FD 43         mov [d], b
2357   10CB E5            pop b
2358   10CC             ;; putchar(digits[i]); 
2359   10CC FA FC FF      lea d, [bp + -4] ; $digits
2360   10CF D7            push a
2361   10D0 DA            push d
2362   10D1 FA FA FF      lea d, [bp + -6] ; $i
2363   10D4 2A            mov b, [d]
2364   10D5 E7            pop d
2365   10D6 5A            add d, b
2366   10D7 E4            pop a
2367   10D8 32            mov bl, [d]
2368   10D9 A7 00         mov bh, 0
2369   10DB DD            push bl
2370   10DC 07 F0 10      call putchar
2371   10DF 51 01 00      add sp, 1
2372   10E2 0A AC 10      jmp _while35_cond
2373   10E5             _while35_exit:
2374   10E5 F9            leave
2375   10E6 09            ret
2376   10E7             
2377   10E7             date:
2378   10E7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2379   10EA             
2380   10EA             ; --- BEGIN INLINE ASM BLOCK
2381   10EA 19 00         mov al, 0 
2382   10EC 05 07         syscall sys_datetime
2383   10EE             ; --- END INLINE ASM BLOCK
2384   10EE             
2385   10EE F9            leave
2386   10EF 09            ret
2387   10F0             
2388   10F0             putchar:
2389   10F0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2390   10F3             
2391   10F3             ; --- BEGIN INLINE ASM BLOCK
2392   10F3 FA 05 00      lea d, [bp + 5] ; $c
2393   10F6 1E            mov al, [d]
2394   10F7 23            mov ah, al
2395   10F8 07 D1 12      call _putchar
2396   10FB             ; --- END INLINE ASM BLOCK
2397   10FB             
2398   10FB F9            leave
2399   10FC 09            ret
2400   10FD             
2401   10FD             getchar:
2402   10FD F8 00 00      enter 0 ; (push bp; mov bp, sp)
2403   1100             ; $c 
2404   1100 52 01 00      sub sp, 1
2405   1103             
2406   1103             ; --- BEGIN INLINE ASM BLOCK
2407   1103 07 CA 12      call getch
2408   1106 1A            mov al, ah
2409   1107 FA 00 00      lea d, [bp + 0] ; $c
2410   110A 3E            mov [d], al
2411   110B             ; --- END INLINE ASM BLOCK
2412   110B             
2413   110B             ;; return c; 
2414   110B FA 00 00      lea d, [bp + 0] ; $c
2415   110E 32            mov bl, [d]
2416   110F A7 00         mov bh, 0
2417   1111 F9            leave
2418   1112 09            ret
2419   1113             
2420   1113             scann:
2421   1113 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2422   1116             ; $m 
2423   1116 52 02 00      sub sp, 2
2424   1119             
2425   1119             ; --- BEGIN INLINE ASM BLOCK
2426   1119 07 15 15      call scan_u16d
2427   111C FA FF FF      lea d, [bp + -1] ; $m
2428   111F 43            mov [d], a
2429   1120             ; --- END INLINE ASM BLOCK
2430   1120             
2431   1120             ;; return m; 
2432   1120 FA FF FF      lea d, [bp + -1] ; $m
2433   1123 2A            mov b, [d]
2434   1124 F9            leave
2435   1125 09            ret
2436   1126             
2437   1126             puts:
2438   1126 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2439   1129             
2440   1129             ; --- BEGIN INLINE ASM BLOCK
2441   1129 FA 05 00      lea d, [bp + 5] ; $s
2442   112C 15            mov a, [d]
2443   112D 3C            mov d, a
2444   112E 07 1B 14      call _puts
2445   1131 10 00 0A      mov a, $0A00
2446   1134 05 03         syscall sys_io
2447   1136             ; --- END INLINE ASM BLOCK
2448   1136             
2449   1136 F9            leave
2450   1137 09            ret
2451   1138             
2452   1138             print:
2453   1138 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2454   113B             
2455   113B             ; --- BEGIN INLINE ASM BLOCK
2456   113B FA 05 00      lea d, [bp + 5] ; $s
2457   113E FD 2A         mov d, [d]
2458   1140 07 1B 14      call _puts
2459   1143             ; --- END INLINE ASM BLOCK
2460   1143             
2461   1143 F9            leave
2462   1144 09            ret
2463   1145             
2464   1145             loadfile:
2465   1145 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2466   1148             
2467   1148             ; --- BEGIN INLINE ASM BLOCK
2468   1148 FA 07 00      lea d, [bp + 7] ; $destination
2469   114B 15            mov a, [d]
2470   114C 4F            mov di, a
2471   114D FA 05 00      lea d, [bp + 5] ; $filename
2472   1150 FD 2A         mov d, [d]
2473   1152 19 14         mov al, 20
2474   1154 05 04         syscall sys_filesystem
2475   1156             ; --- END INLINE ASM BLOCK
2476   1156             
2477   1156 F9            leave
2478   1157 09            ret
2479   1158             
2480   1158             create_file:
2481   1158 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2482   115B F9            leave
2483   115C 09            ret
2484   115D             
2485   115D             delete_file:
2486   115D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2487   1160             
2488   1160             ; --- BEGIN INLINE ASM BLOCK
2489   1160 FA 05 00      lea d, [bp + 5] ; $filename
2490   1163 19 0A         mov al, 10
2491   1165 05 04         syscall sys_filesystem
2492   1167             ; --- END INLINE ASM BLOCK
2493   1167             
2494   1167 F9            leave
2495   1168 09            ret
2496   1169             
2497   1169             fopen:
2498   1169 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2499   116C F9            leave
2500   116D 09            ret
2501   116E             
2502   116E             fclose:
2503   116E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2504   1171 F9            leave
2505   1172 09            ret
2506   1173             
2507   1173             load_hex:
2508   1173 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2509   1176             ; $temp 
2510   1176 52 02 00      sub sp, 2
2511   1179             ;; temp = alloc(32768); 
2512   1179 FA FF FF      lea d, [bp + -1] ; $temp
2513   117C DA            push d
2514   117D 26 00 80      mov b, $8000
2515   1180 FD AB         swp b
2516   1182 D8            push b
2517   1183 07 5A 08      call alloc
2518   1186 51 02 00      add sp, 2
2519   1189 E7            pop d
2520   118A FD 43         mov [d], b
2521   118C             
2522   118C             ; --- BEGIN INLINE ASM BLOCK
2523   118C               
2524   118C               
2525   118C               
2526   118C               
2527   118C               
2528   118C             _load_hex:
2529   118C D7            push a
2530   118D D8            push b
2531   118E DA            push d
2532   118F E2            push si
2533   1190 E3            push di
2534   1191 52 00 80      sub sp, $8000      
2535   1194 38 00 00      mov c, 0
2536   1197 48            mov a, sp
2537   1198 77            inc a
2538   1199 3C            mov d, a          
2539   119A 07 D8 12      call _gets        
2540   119D 4D            mov si, a
2541   119E             __load_hex_loop:
2542   119E F6            lodsb             
2543   119F B9 00         cmp al, 0         
2544   11A1 C6 AF 11      jz __load_hex_ret
2545   11A4 36            mov bh, al
2546   11A5 F6            lodsb
2547   11A6 2F            mov bl, al
2548   11A7 07 8E 12      call _atoi        
2549   11AA F7            stosb             
2550   11AB 78            inc c
2551   11AC 0A 9E 11      jmp __load_hex_loop
2552   11AF             __load_hex_ret:
2553   11AF 51 00 80      add sp, $8000
2554   11B2 F0            pop di
2555   11B3 EF            pop si
2556   11B4 E7            pop d
2557   11B5 E5            pop b
2558   11B6 E4            pop a
2559   11B7             ; --- END INLINE ASM BLOCK
2560   11B7             
2561   11B7 F9            leave
2562   11B8 09            ret
2563   11B9             
2564   11B9             getparam:
2565   11B9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2566   11BC             ; $data 
2567   11BC 52 01 00      sub sp, 1
2568   11BF             
2569   11BF             ; --- BEGIN INLINE ASM BLOCK
2570   11BF 19 04         mov al, 4
2571   11C1 FA 05 00      lea d, [bp + 5] ; $address
2572   11C4 FD 2A         mov d, [d]
2573   11C6 05 0C         syscall sys_system
2574   11C8 FA 00 00      lea d, [bp + 0] ; $data
2575   11CB FD 3E         mov [d], bl
2576   11CD             ; --- END INLINE ASM BLOCK
2577   11CD             
2578   11CD             ;; return data; 
2579   11CD FA 00 00      lea d, [bp + 0] ; $data
2580   11D0 32            mov bl, [d]
2581   11D1 A7 00         mov bh, 0
2582   11D3 F9            leave
2583   11D4 09            ret
2584   11D5             
2585   11D5             clear:
2586   11D5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2587   11D8             ;; print("\033[2J\033[H"); 
2588   11D8 26 A5 1D      mov b, __s3 ; "\033[2J\033[H"
2589   11DB FD AB         swp b
2590   11DD D8            push b
2591   11DE 07 38 11      call print
2592   11E1 51 02 00      add sp, 2
2593   11E4 F9            leave
2594   11E5 09            ret
2595   11E6             
2596   11E6             include_stdio_asm:
2597   11E6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2598   11E9             
2599   11E9             ; --- BEGIN INLINE ASM BLOCK
2600   11E9             .include "lib/asm/stdio.asm"
0001+  11E9             ;-----------------------------------------------------------------------------
0002+  11E9             ; stdio.s
0003+  11E9             ;-----------------------------------------------------------------------------
0004+  11E9             .include "lib/asm/string.asm"
0001++ 11E9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 11E9             ; string.s
0003++ 11E9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 11E9             
0005++ 11E9             
0006++ 11E9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 11E9             ; _strrev
0008++ 11E9             ; reverse a string
0009++ 11E9             ; D = string address
0010++ 11E9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 11E9             ; 01234
0012++ 11E9             _strrev:
0013++ 11E9 4B          	pusha
0014++ 11EA 07 30 12    	call _strlen	; length in C
0015++ 11ED 12          	mov a, c
0016++ 11EE AF 01 00    	cmp a, 1
0017++ 11F1 D0 0B 12    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 11F4 7D          	dec a
0019++ 11F5 FD 4E       	mov si, d	; beginning of string
0020++ 11F7 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 11F9 59          	add d, a	; end of string
0022++ 11FA 12          	mov a, c
0023++ 11FB FD 9B       	shr a		; divide by 2
0024++ 11FD 39          	mov c, a	; C now counts the steps
0025++ 11FE             _strrev_L0:
0026++ 11FE 32          	mov bl, [d]	; save load right-side char into BL
0027++ 11FF F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1200 3E          	mov [d], al	; store left char into right side
0029++ 1201 1B          	mov al, bl
0030++ 1202 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1203 7E          	dec c
0032++ 1204 7F          	dec d
0033++ 1205 C2 00 00    	cmp c, 0
0034++ 1208 C7 FE 11    	jne _strrev_L0
0035++ 120B             _strrev_end:
0036++ 120B 4C          	popa
0037++ 120C 09          	ret
0038++ 120D             	
0039++ 120D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 120D             ; _strchr
0041++ 120D             ; search string in D for char in AL
0042++ 120D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 120D             _strchr:
0044++ 120D             _strchr_L0:
0045++ 120D 32          	mov bl, [d]
0046++ 120E C1 00       	cmp bl, 0
0047++ 1210 C6 1B 12    	je _strchr_end
0048++ 1213 BA          	cmp al, bl
0049++ 1214 C6 1B 12    	je _strchr_end
0050++ 1217 79          	inc d
0051++ 1218 0A 0D 12    	jmp _strchr_L0
0052++ 121B             _strchr_end:
0053++ 121B 1B          	mov al, bl
0054++ 121C 09          	ret
0055++ 121D             
0056++ 121D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 121D             ; _strstr
0058++ 121D             ; find sub-string
0059++ 121D             ; str1 in SI
0060++ 121D             ; str2 in DI
0061++ 121D             ; SI points to end of source string
0062++ 121D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 121D             _strstr:
0064++ 121D DB          	push al
0065++ 121E DA          	push d
0066++ 121F E3          	push di
0067++ 1220             _strstr_loop:
0068++ 1220 F3          	cmpsb					; compare a byte of the strings
0069++ 1221 C7 2C 12    	jne _strstr_ret
0070++ 1224 FC 00 00    	lea d, [di + 0]
0071++ 1227 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1229 C7 20 12    	jne _strstr_loop				; equal chars but not at end
0073++ 122C             _strstr_ret:
0074++ 122C F0          	pop di
0075++ 122D E7          	pop d
0076++ 122E E8          	pop al
0077++ 122F 09          	ret
0078++ 1230             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1230             ; length of null terminated string
0080++ 1230             ; result in C
0081++ 1230             ; pointer in D
0082++ 1230             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1230             _strlen:
0084++ 1230 DA          	push d
0085++ 1231 38 00 00    	mov c, 0
0086++ 1234             _strlen_L1:
0087++ 1234 BD 00       	cmp byte [d], 0
0088++ 1236 C6 3E 12    	je _strlen_ret
0089++ 1239 79          	inc d
0090++ 123A 78          	inc c
0091++ 123B 0A 34 12    	jmp _strlen_L1
0092++ 123E             _strlen_ret:
0093++ 123E E7          	pop d
0094++ 123F 09          	ret
0095++ 1240             
0096++ 1240             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1240             ; STRCMP
0098++ 1240             ; compare two strings
0099++ 1240             ; str1 in SI
0100++ 1240             ; str2 in DI
0101++ 1240             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1240             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1240             _strcmp:
0104++ 1240 DB          	push al
0105++ 1241 DA          	push d
0106++ 1242 E3          	push di
0107++ 1243 E2          	push si
0108++ 1244             _strcmp_loop:
0109++ 1244 F3          	cmpsb					; compare a byte of the strings
0110++ 1245 C7 50 12    	jne _strcmp_ret
0111++ 1248 FB FF FF    	lea d, [si +- 1]
0112++ 124B BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 124D C7 44 12    	jne _strcmp_loop				; equal chars but not at end
0114++ 1250             _strcmp_ret:
0115++ 1250 EF          	pop si
0116++ 1251 F0          	pop di
0117++ 1252 E7          	pop d
0118++ 1253 E8          	pop al
0119++ 1254 09          	ret
0120++ 1255             
0121++ 1255             
0122++ 1255             ; STRCPY
0123++ 1255             ; copy null terminated string from SI to DI
0124++ 1255             ; source in SI
0125++ 1255             ; destination in DI
0126++ 1255             _strcpy:
0127++ 1255 E2          	push si
0128++ 1256 E3          	push di
0129++ 1257 DB          	push al
0130++ 1258             _strcpy_L1:
0131++ 1258 F6          	lodsb
0132++ 1259 F7          	stosb
0133++ 125A B9 00       	cmp al, 0
0134++ 125C C7 58 12    	jne _strcpy_L1
0135++ 125F             _strcpy_end:
0136++ 125F E8          	pop al
0137++ 1260 F0          	pop di
0138++ 1261 EF          	pop si
0139++ 1262 09          	ret
0140++ 1263             
0141++ 1263             ; STRCAT
0142++ 1263             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1263             ; source in SI
0144++ 1263             ; destination in DI
0145++ 1263             _strcat:
0146++ 1263 E2          	push si
0147++ 1264 E3          	push di
0148++ 1265 D7          	push a
0149++ 1266 DA          	push d
0150++ 1267 50          	mov a, di
0151++ 1268 3C          	mov d, a
0152++ 1269             _strcat_goto_end_L1:
0153++ 1269 BD 00       	cmp byte[d], 0
0154++ 126B C6 72 12    	je _strcat_start
0155++ 126E 79          	inc d
0156++ 126F 0A 69 12    	jmp _strcat_goto_end_L1
0157++ 1272             _strcat_start:
0158++ 1272 FD 50       	mov di, d
0159++ 1274             _strcat_L1:
0160++ 1274 F6          	lodsb
0161++ 1275 F7          	stosb
0162++ 1276 B9 00       	cmp al, 0
0163++ 1278 C7 74 12    	jne _strcat_L1
0164++ 127B             _strcat_end:
0165++ 127B E7          	pop d
0166++ 127C E4          	pop a
0167++ 127D F0          	pop di
0168++ 127E EF          	pop si
0169++ 127F 09          	ret
0170++ 1280             
0171++ 1280             
0005+  1280             
0006+  1280             ;-----------------------------------------------------------------------------
0007+  1280             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  1280             ; ASCII in BL
0009+  1280             ; result in AL
0010+  1280             ; ascii for F = 0100 0110
0011+  1280             ; ascii for 9 = 0011 1001
0012+  1280             ;-----------------------------------------------------------------------------
0013+  1280             hex_ascii_encode:
0014+  1280 1B            mov al, bl
0015+  1281 93 40         test al, $40        ; test if letter or number
0016+  1283 C7 89 12      jnz hex_letter
0017+  1286 87 0F         and al, $0F        ; get number
0018+  1288 09            ret
0019+  1289             hex_letter:
0020+  1289 87 0F         and al, $0F        ; get letter
0021+  128B 6A 09         add al, 9
0022+  128D 09            ret
0023+  128E             
0024+  128E             ;-----------------------------------------------------------------------------
0025+  128E             ; ATOI
0026+  128E             ; 2 letter hex string in B
0027+  128E             ; 8bit integer returned in AL
0028+  128E             ;-----------------------------------------------------------------------------
0029+  128E             _atoi:
0030+  128E D8            push b
0031+  128F 07 80 12      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  1292 30            mov bl, bh
0033+  1293 DB            push al          ; save a
0034+  1294 07 80 12      call hex_ascii_encode
0035+  1297 EA            pop bl  
0036+  1298 FD 9E 04      shl al, 4
0037+  129B 8C            or al, bl
0038+  129C E5            pop b
0039+  129D 09            ret  
0040+  129E             
0041+  129E             ;-----------------------------------------------------------------------------
0042+  129E             ; scanf
0043+  129E             ; no need for explanations!
0044+  129E             ;-----------------------------------------------------------------------------
0045+  129E             scanf:
0046+  129E 09            ret
0047+  129F             
0048+  129F             ;-----------------------------------------------------------------------------
0049+  129F             ; ITOA
0050+  129F             ; 8bit value in BL
0051+  129F             ; 2 byte ASCII result in A
0052+  129F             ;-----------------------------------------------------------------------------
0053+  129F             _itoa:
0054+  129F DA            push d
0055+  12A0 D8            push b
0056+  12A1 A7 00         mov bh, 0
0057+  12A3 FD A4 04      shr bl, 4  
0058+  12A6 74            mov d, b
0059+  12A7 1F 4F 15      mov al, [d + s_hex_digits]
0060+  12AA 23            mov ah, al
0061+  12AB               
0062+  12AB E5            pop b
0063+  12AC D8            push b
0064+  12AD A7 00         mov bh, 0
0065+  12AF FD 87 0F      and bl, $0F
0066+  12B2 74            mov d, b
0067+  12B3 1F 4F 15      mov al, [d + s_hex_digits]
0068+  12B6 E5            pop b
0069+  12B7 E7            pop d
0070+  12B8 09            ret
0071+  12B9             
0072+  12B9             ;-----------------------------------------------------------------------------
0073+  12B9             ; HEX STRING TO BINARY
0074+  12B9             ; di = destination address
0075+  12B9             ; si = source
0076+  12B9             ;-----------------------------------------------------------------------------
0077+  12B9             _hex_to_int:
0078+  12B9             _hex_to_int_L1:
0079+  12B9 F6            lodsb          ; load from [SI] to AL
0080+  12BA B9 00         cmp al, 0        ; check if ASCII 0
0081+  12BC C6 C9 12      jz _hex_to_int_ret
0082+  12BF 36            mov bh, al
0083+  12C0 F6            lodsb
0084+  12C1 2F            mov bl, al
0085+  12C2 07 8E 12      call _atoi        ; convert ASCII byte in B to int (to AL)
0086+  12C5 F7            stosb          ; store AL to [DI]
0087+  12C6 0A B9 12      jmp _hex_to_int_L1
0088+  12C9             _hex_to_int_ret:
0089+  12C9 09            ret    
0090+  12CA             
0091+  12CA             ;-----------------------------------------------------------------------------
0092+  12CA             ; GETCHAR
0093+  12CA             ; char in ah
0094+  12CA             ;-----------------------------------------------------------------------------
0095+  12CA             getch:
0096+  12CA DB            push al
0097+  12CB             getch_retry:
0098+  12CB 19 01         mov al, 1
0099+  12CD 05 03         syscall sys_io      ; receive in AH
0100+  12CF E8            pop al
0101+  12D0 09            ret
0102+  12D1             
0103+  12D1             ;-----------------------------------------------------------------------------
0104+  12D1             ; PUTCHAR
0105+  12D1             ; char in ah
0106+  12D1             ;-----------------------------------------------------------------------------
0107+  12D1             _putchar:
0108+  12D1 D7            push a
0109+  12D2 19 00         mov al, 0
0110+  12D4 05 03         syscall sys_io      ; char in AH
0111+  12D6 E4            pop a
0112+  12D7 09            ret
0113+  12D8             
0114+  12D8             ;-----------------------------------------------------------------------------
0115+  12D8             ;; INPUT A STRING
0116+  12D8             ;; terminates with null
0117+  12D8             ;; pointer in D
0118+  12D8             ;-----------------------------------------------------------------------------
0119+  12D8             _gets:
0120+  12D8 D7            push a
0121+  12D9 DA            push d
0122+  12DA             _gets_loop:
0123+  12DA 19 01         mov al, 1
0124+  12DC 05 03         syscall sys_io      ; receive in AH
0125+  12DE B9 00         cmp al, 0        ; check error code (AL)
0126+  12E0 C6 DA 12      je _gets_loop      ; if no char received, retry
0127+  12E3             
0128+  12E3 76 1B         cmp ah, 27
0129+  12E5 C6 06 13      je _gets_ansi_esc
0130+  12E8 76 0A         cmp ah, $0A        ; LF
0131+  12EA C6 71 13      je _gets_end
0132+  12ED 76 0D         cmp ah, $0D        ; CR
0133+  12EF C6 71 13      je _gets_end
0134+  12F2 76 5C         cmp ah, $5C        ; '\\'
0135+  12F4 C6 32 13      je _gets_escape
0136+  12F7               
0137+  12F7 76 08         cmp ah, $08      ; check for backspace
0138+  12F9 C6 02 13      je _gets_backspace
0139+  12FC             
0140+  12FC 1A            mov al, ah
0141+  12FD 3E            mov [d], al
0142+  12FE 79            inc d
0143+  12FF 0A DA 12      jmp _gets_loop
0144+  1302             _gets_backspace:
0145+  1302 7F            dec d
0146+  1303 0A DA 12      jmp _gets_loop
0147+  1306             _gets_ansi_esc:
0148+  1306 19 01         mov al, 1
0149+  1308 05 03         syscall sys_io        ; receive in AH without echo
0150+  130A B9 00         cmp al, 0          ; check error code (AL)
0151+  130C C6 06 13      je _gets_ansi_esc    ; if no char received, retry
0152+  130F 76 5B         cmp ah, '['
0153+  1311 C7 DA 12      jne _gets_loop
0154+  1314             _gets_ansi_esc_2:
0155+  1314 19 01         mov al, 1
0156+  1316 05 03         syscall sys_io          ; receive in AH without echo
0157+  1318 B9 00         cmp al, 0            ; check error code (AL)
0158+  131A C6 14 13      je _gets_ansi_esc_2  ; if no char received, retry
0159+  131D 76 44         cmp ah, 'D'
0160+  131F C6 2A 13      je _gets_left_arrow
0161+  1322 76 43         cmp ah, 'C'
0162+  1324 C6 2E 13      je _gets_right_arrow
0163+  1327 0A DA 12      jmp _gets_loop
0164+  132A             _gets_left_arrow:
0165+  132A 7F            dec d
0166+  132B 0A DA 12      jmp _gets_loop
0167+  132E             _gets_right_arrow:
0168+  132E 79            inc d
0169+  132F 0A DA 12      jmp _gets_loop
0170+  1332             _gets_escape:
0171+  1332 19 01         mov al, 1
0172+  1334 05 03         syscall sys_io      ; receive in AH
0173+  1336 B9 00         cmp al, 0        ; check error code (AL)
0174+  1338 C6 32 13      je _gets_escape      ; if no char received, retry
0175+  133B 76 6E         cmp ah, 'n'
0176+  133D C6 5C 13      je _gets_LF
0177+  1340 76 72         cmp ah, 'r'
0178+  1342 C6 63 13      je _gets_CR
0179+  1345 76 30         cmp ah, '0'
0180+  1347 C6 6A 13      je _gets_NULL
0181+  134A 76 5C         cmp ah, $5C  ; '\'
0182+  134C C6 55 13      je _gets_slash
0183+  134F 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0184+  1350 3E            mov [d], al
0185+  1351 79            inc d
0186+  1352 0A DA 12      jmp _gets_loop
0187+  1355             _gets_slash:
0188+  1355 19 5C         mov al, $5C
0189+  1357 3E            mov [d], al
0190+  1358 79            inc d
0191+  1359 0A DA 12      jmp _gets_loop
0192+  135C             _gets_LF:
0193+  135C 19 0A         mov al, $0A
0194+  135E 3E            mov [d], al
0195+  135F 79            inc d
0196+  1360 0A DA 12      jmp _gets_loop
0197+  1363             _gets_CR:
0198+  1363 19 0D         mov al, $0D
0199+  1365 3E            mov [d], al
0200+  1366 79            inc d
0201+  1367 0A DA 12      jmp _gets_loop
0202+  136A             _gets_NULL:
0203+  136A 19 00         mov al, $00
0204+  136C 3E            mov [d], al
0205+  136D 79            inc d
0206+  136E 0A DA 12      jmp _gets_loop
0207+  1371             _gets_end:
0208+  1371 19 00         mov al, 0
0209+  1373 3E            mov [d], al        ; terminate string
0210+  1374 E7            pop d
0211+  1375 E4            pop a
0212+  1376 09            ret
0213+  1377             
0214+  1377             ;-----------------------------------------------------------------------------
0215+  1377             ;; INPUT TEXT
0216+  1377             ;; terminated with CTRL+D
0217+  1377             ;; pointer in D
0218+  1377             ;-----------------------------------------------------------------------------
0219+  1377             _gettxt:
0220+  1377 D7            push a
0221+  1378 DA            push d
0222+  1379             _gettxt_loop:
0223+  1379 19 01         mov al, 1
0224+  137B 05 03         syscall sys_io      ; receive in AH
0225+  137D B9 00         cmp al, 0        ; check error code (AL)
0226+  137F C6 79 13      je _gettxt_loop    ; if no char received, retry
0227+  1382 76 04         cmp ah, 4      ; EOT
0228+  1384 C6 C2 13      je _gettxt_end
0229+  1387 76 08         cmp ah, $08      ; check for backspace
0230+  1389 C6 BE 13      je _gettxt_backspace
0231+  138C 76 5C         cmp ah, $5C        ; '\'
0232+  138E C6 97 13      je _gettxt_escape
0233+  1391 1A            mov al, ah
0234+  1392 3E            mov [d], al
0235+  1393 79            inc d
0236+  1394 0A 79 13      jmp _gettxt_loop
0237+  1397             _gettxt_escape:
0238+  1397 19 01         mov al, 1
0239+  1399 05 03         syscall sys_io      ; receive in AH
0240+  139B B9 00         cmp al, 0        ; check error code (AL)
0241+  139D C6 97 13      je _gettxt_escape    ; if no char received, retry
0242+  13A0 76 6E         cmp ah, 'n'
0243+  13A2 C6 B0 13      je _gettxt_LF
0244+  13A5 76 72         cmp ah, 'r'
0245+  13A7 C6 B7 13      je _gettxt_CR
0246+  13AA 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0247+  13AB 3E            mov [d], al
0248+  13AC 79            inc d
0249+  13AD 0A 79 13      jmp _gettxt_loop
0250+  13B0             _gettxt_LF:
0251+  13B0 19 0A         mov al, $0A
0252+  13B2 3E            mov [d], al
0253+  13B3 79            inc d
0254+  13B4 0A 79 13      jmp _gettxt_loop
0255+  13B7             _gettxt_CR:
0256+  13B7 19 0D         mov al, $0D
0257+  13B9 3E            mov [d], al
0258+  13BA 79            inc d
0259+  13BB 0A 79 13      jmp _gettxt_loop
0260+  13BE             _gettxt_backspace:
0261+  13BE 7F            dec d
0262+  13BF 0A 79 13      jmp _gettxt_loop
0263+  13C2             _gettxt_end:
0264+  13C2 19 00         mov al, 0
0265+  13C4 3E            mov [d], al        ; terminate string
0266+  13C5 E7            pop d
0267+  13C6 E4            pop a
0268+  13C7 09            ret
0269+  13C8             
0270+  13C8             ;-----------------------------------------------------------------------------
0271+  13C8             ; PRINT NEW LINE
0272+  13C8             ;-----------------------------------------------------------------------------
0273+  13C8             printnl:
0274+  13C8 D7            push a
0275+  13C9 10 00 0A      mov a, $0A00
0276+  13CC 05 03         syscall sys_io
0277+  13CE 10 00 0D      mov a, $0D00
0278+  13D1 05 03         syscall sys_io
0279+  13D3 E4            pop a
0280+  13D4 09            ret
0281+  13D5             
0282+  13D5             ;-----------------------------------------------------------------------------
0283+  13D5             ; _strtoint
0284+  13D5             ; 4 digit hex string number in d
0285+  13D5             ; integer returned in A
0286+  13D5             ;-----------------------------------------------------------------------------
0287+  13D5             _strtointx:
0288+  13D5 D8            push b
0289+  13D6 32            mov bl, [d]
0290+  13D7 37            mov bh, bl
0291+  13D8 33 01 00      mov bl, [d + 1]
0292+  13DB 07 8E 12      call _atoi        ; convert to int in AL
0293+  13DE 23            mov ah, al        ; move to AH
0294+  13DF 33 02 00      mov bl, [d + 2]
0295+  13E2 37            mov bh, bl
0296+  13E3 33 03 00      mov bl, [d + 3]
0297+  13E6 07 8E 12      call _atoi        ; convert to int in AL
0298+  13E9 E5            pop b
0299+  13EA 09            ret
0300+  13EB             
0301+  13EB             ;-----------------------------------------------------------------------------
0302+  13EB             ; _strtoint
0303+  13EB             ; 5 digit base10 string number in d
0304+  13EB             ; integer returned in A
0305+  13EB             ;-----------------------------------------------------------------------------
0306+  13EB             _strtoint:
0307+  13EB E2            push si
0308+  13EC D8            push b
0309+  13ED D9            push c
0310+  13EE DA            push d
0311+  13EF 07 30 12      call _strlen      ; get string length in C
0312+  13F2 7E            dec c
0313+  13F3 FD 4E         mov si, d
0314+  13F5 12            mov a, c
0315+  13F6 FD 99         shl a
0316+  13F8 3B 67 15      mov d, table_power
0317+  13FB 59            add d, a
0318+  13FC 38 00 00      mov c, 0
0319+  13FF             _strtoint_L0:
0320+  13FF F6            lodsb      ; load ASCII to al
0321+  1400 B9 00         cmp al, 0
0322+  1402 C6 15 14      je _strtoint_end
0323+  1405 6F 30         sub al, $30    ; make into integer
0324+  1407 22 00         mov ah, 0
0325+  1409 2A            mov b, [d]
0326+  140A AC            mul a, b      ; result in B since it fits in 16bits
0327+  140B 11            mov a, b
0328+  140C 28            mov b, c
0329+  140D 54            add a, b
0330+  140E 39            mov c, a
0331+  140F 63 02 00      sub d, 2
0332+  1412 0A FF 13      jmp _strtoint_L0
0333+  1415             _strtoint_end:
0334+  1415 12            mov a, c
0335+  1416 E7            pop d
0336+  1417 E6            pop c
0337+  1418 E5            pop b
0338+  1419 EF            pop si
0339+  141A 09            ret
0340+  141B             
0341+  141B             ;-----------------------------------------------------------------------------
0342+  141B             ; PRINT NULL TERMINATED STRING
0343+  141B             ; pointer in D
0344+  141B             ;-----------------------------------------------------------------------------
0345+  141B             _puts:
0346+  141B D7            push a
0347+  141C DA            push d
0348+  141D             _puts_L1:
0349+  141D 1E            mov al, [d]
0350+  141E B9 00         cmp al, 0
0351+  1420 C6 2C 14      jz _puts_END
0352+  1423 23            mov ah, al
0353+  1424 19 00         mov al, 0
0354+  1426 05 03         syscall sys_io
0355+  1428 79            inc d
0356+  1429 0A 1D 14      jmp _puts_L1
0357+  142C             _puts_END:
0358+  142C E7            pop d
0359+  142D E4            pop a
0360+  142E 09            ret
0361+  142F             
0362+  142F             ;-----------------------------------------------------------------------------
0363+  142F             ; PRINT N SIZE STRING
0364+  142F             ; pointer in D
0365+  142F             ; size in C
0366+  142F             ;-----------------------------------------------------------------------------
0367+  142F             _putsn:
0368+  142F DB            push al
0369+  1430 DA            push d
0370+  1431 D9            push c
0371+  1432             _putsn_L0:
0372+  1432 1E            mov al, [d]
0373+  1433 23            mov ah, al
0374+  1434 19 00         mov al, 0
0375+  1436 05 03         syscall sys_io
0376+  1438 79            inc d
0377+  1439 7E            dec c  
0378+  143A C2 00 00      cmp c, 0
0379+  143D C7 32 14      jne _putsn_L0
0380+  1440             _putsn_end:
0381+  1440 E6            pop c
0382+  1441 E7            pop d
0383+  1442 E8            pop al
0384+  1443 09            ret
0385+  1444             
0386+  1444             ;-----------------------------------------------------------------------------
0387+  1444             ; print 16bit decimal number
0388+  1444             ; input number in A
0389+  1444             ;-----------------------------------------------------------------------------
0390+  1444             print_u16d:
0391+  1444 D7            push a
0392+  1445 D8            push b
0393+  1446 26 10 27      mov b, 10000
0394+  1449 AE            div a, b      ; get 10000's coeff.
0395+  144A 07 6C 14      call print_number
0396+  144D 11            mov a, b
0397+  144E 26 E8 03      mov b, 1000
0398+  1451 AE            div a, b      ; get 1000's coeff.
0399+  1452 07 6C 14      call print_number
0400+  1455 11            mov a, b
0401+  1456 26 64 00      mov b, 100
0402+  1459 AE            div a, b
0403+  145A 07 6C 14      call print_number
0404+  145D 11            mov a, b
0405+  145E 26 0A 00      mov b, 10
0406+  1461 AE            div a, b
0407+  1462 07 6C 14      call print_number
0408+  1465 1B            mov al, bl      ; 1's coeff in bl
0409+  1466 07 6C 14      call print_number
0410+  1469 E5            pop b
0411+  146A E4            pop a
0412+  146B 09            ret
0413+  146C             
0414+  146C             ;-----------------------------------------------------------------------------
0415+  146C             ; print AL
0416+  146C             ;-----------------------------------------------------------------------------
0417+  146C             print_number:
0418+  146C 6A 30         add al, $30
0419+  146E 23            mov ah, al
0420+  146F 07 D1 12      call _putchar
0421+  1472 09            ret
0422+  1473             
0423+  1473             ;-----------------------------------------------------------------------------
0424+  1473             ; PRINT 16BIT HEX INTEGER
0425+  1473             ; integer value in reg B
0426+  1473             ;-----------------------------------------------------------------------------
0427+  1473             print_u16x:
0428+  1473 D7            push a
0429+  1474 D8            push b
0430+  1475 DD            push bl
0431+  1476 30            mov bl, bh
0432+  1477 07 9F 12      call _itoa        ; convert bh to char in A
0433+  147A 2F            mov bl, al        ; save al
0434+  147B 19 00         mov al, 0
0435+  147D 05 03         syscall sys_io        ; display AH
0436+  147F 24            mov ah, bl        ; retrieve al
0437+  1480 19 00         mov al, 0
0438+  1482 05 03         syscall sys_io        ; display AL
0439+  1484             
0440+  1484 EA            pop bl
0441+  1485 07 9F 12      call _itoa        ; convert bh to char in A
0442+  1488 2F            mov bl, al        ; save al
0443+  1489 19 00         mov al, 0
0444+  148B 05 03         syscall sys_io        ; display AH
0445+  148D 24            mov ah, bl        ; retrieve al
0446+  148E 19 00         mov al, 0
0447+  1490 05 03         syscall sys_io        ; display AL
0448+  1492             
0449+  1492 E5            pop b
0450+  1493 E4            pop a
0451+  1494 09            ret
0452+  1495             
0453+  1495             ;-----------------------------------------------------------------------------
0454+  1495             ; INPUT 16BIT HEX INTEGER
0455+  1495             ; read 16bit integer into A
0456+  1495             ;-----------------------------------------------------------------------------
0457+  1495             scan_u16x:
0458+  1495 F8 10 00      enter 16
0459+  1498 D8            push b
0460+  1499 DA            push d
0461+  149A             
0462+  149A FA F1 FF      lea d, [bp + -15]
0463+  149D 07 D8 12      call _gets        ; get number
0464+  14A0             
0465+  14A0 32            mov bl, [d]
0466+  14A1 37            mov bh, bl
0467+  14A2 33 01 00      mov bl, [d + 1]
0468+  14A5 07 8E 12      call _atoi        ; convert to int in AL
0469+  14A8 23            mov ah, al        ; move to AH
0470+  14A9             
0471+  14A9 33 02 00      mov bl, [d + 2]
0472+  14AC 37            mov bh, bl
0473+  14AD 33 03 00      mov bl, [d + 3]
0474+  14B0 07 8E 12      call _atoi        ; convert to int in AL
0475+  14B3             
0476+  14B3 E7            pop d
0477+  14B4 E5            pop b
0478+  14B5 F9            leave
0479+  14B6 09            ret
0480+  14B7             
0481+  14B7             ;-----------------------------------------------------------------------------
0482+  14B7             ; PRINT 8bit HEX INTEGER
0483+  14B7             ; integer value in reg bl
0484+  14B7             ;-----------------------------------------------------------------------------
0485+  14B7             print_u8x:
0486+  14B7 D7            push a
0487+  14B8 DD            push bl
0488+  14B9             
0489+  14B9 07 9F 12      call _itoa        ; convert bl to char in A
0490+  14BC 2F            mov bl, al        ; save al
0491+  14BD 19 00         mov al, 0
0492+  14BF 05 03         syscall sys_io        ; display AH
0493+  14C1 24            mov ah, bl        ; retrieve al
0494+  14C2 19 00         mov al, 0
0495+  14C4 05 03         syscall sys_io        ; display AL
0496+  14C6             
0497+  14C6 EA            pop bl
0498+  14C7 E4            pop a
0499+  14C8 09            ret
0500+  14C9             
0501+  14C9             ;-----------------------------------------------------------------------------
0502+  14C9             ; print 8bit decimal unsigned number
0503+  14C9             ; input number in AL
0504+  14C9             ;-----------------------------------------------------------------------------
0505+  14C9             print_u8d:
0506+  14C9 D7            push a
0507+  14CA D8            push b
0508+  14CB             
0509+  14CB 22 00         mov ah, 0
0510+  14CD 26 64 00      mov b, 100
0511+  14D0 AE            div a, b
0512+  14D1 D8            push b      ; save remainder
0513+  14D2 B9 00         cmp al, 0
0514+  14D4 C6 DE 14      je skip100
0515+  14D7 6A 30         add al, $30
0516+  14D9 23            mov ah, al
0517+  14DA 19 00         mov al, 0
0518+  14DC 05 03         syscall sys_io  ; print coeff
0519+  14DE             skip100:
0520+  14DE E4            pop a
0521+  14DF 22 00         mov ah, 0
0522+  14E1 26 0A 00      mov b, 10
0523+  14E4 AE            div a, b
0524+  14E5 D8            push b      ; save remainder
0525+  14E6 B9 00         cmp al, 0
0526+  14E8 C6 F2 14      je skip10
0527+  14EB 6A 30         add al, $30
0528+  14ED 23            mov ah, al
0529+  14EE 19 00         mov al, 0
0530+  14F0 05 03         syscall sys_io  ; print coeff
0531+  14F2             skip10:
0532+  14F2 E4            pop a
0533+  14F3 1B            mov al, bl
0534+  14F4 6A 30         add al, $30
0535+  14F6 23            mov ah, al
0536+  14F7 19 00         mov al, 0
0537+  14F9 05 03         syscall sys_io  ; print coeff
0538+  14FB E5            pop b
0539+  14FC E4            pop a
0540+  14FD 09            ret
0541+  14FE             
0542+  14FE             ;-----------------------------------------------------------------------------
0543+  14FE             ; INPUT 8BIT HEX INTEGER
0544+  14FE             ; read 8bit integer into AL
0545+  14FE             ;-----------------------------------------------------------------------------
0546+  14FE             scan_u8x:
0547+  14FE F8 04 00      enter 4
0548+  1501 D8            push b
0549+  1502 DA            push d
0550+  1503             
0551+  1503 FA FD FF      lea d, [bp + -3]
0552+  1506 07 D8 12      call _gets        ; get number
0553+  1509             
0554+  1509 32            mov bl, [d]
0555+  150A 37            mov bh, bl
0556+  150B 33 01 00      mov bl, [d + 1]
0557+  150E 07 8E 12      call _atoi        ; convert to int in AL
0558+  1511             
0559+  1511 E7            pop d
0560+  1512 E5            pop b
0561+  1513 F9            leave
0562+  1514 09            ret
0563+  1515             
0564+  1515             ;-----------------------------------------------------------------------------
0565+  1515             ; input decimal number
0566+  1515             ; result in A
0567+  1515             ; 655'\0'
0568+  1515             ; low--------high
0569+  1515             ;-----------------------------------------------------------------------------
0570+  1515             scan_u16d:
0571+  1515 F8 08 00      enter 8
0572+  1518 E2            push si
0573+  1519 D8            push b
0574+  151A D9            push c
0575+  151B DA            push d
0576+  151C FA F9 FF      lea d, [bp +- 7]
0577+  151F 07 D8 12      call _gets
0578+  1522 07 30 12      call _strlen      ; get string length in C
0579+  1525 7E            dec c
0580+  1526 FD 4E         mov si, d
0581+  1528 12            mov a, c
0582+  1529 FD 99         shl a
0583+  152B 3B 67 15      mov d, table_power
0584+  152E 59            add d, a
0585+  152F 38 00 00      mov c, 0
0586+  1532             mul_loop:
0587+  1532 F6            lodsb      ; load ASCII to al
0588+  1533 B9 00         cmp al, 0
0589+  1535 C6 48 15      je mul_exit
0590+  1538 6F 30         sub al, $30    ; make into integer
0591+  153A 22 00         mov ah, 0
0592+  153C 2A            mov b, [d]
0593+  153D AC            mul a, b      ; result in B since it fits in 16bits
0594+  153E 11            mov a, b
0595+  153F 28            mov b, c
0596+  1540 54            add a, b
0597+  1541 39            mov c, a
0598+  1542 63 02 00      sub d, 2
0599+  1545 0A 32 15      jmp mul_loop
0600+  1548             mul_exit:
0601+  1548 12            mov a, c
0602+  1549 E7            pop d
0603+  154A E6            pop c
0604+  154B E5            pop b
0605+  154C EF            pop si
0606+  154D F9            leave
0607+  154E 09            ret
0608+  154F             
0609+  154F 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0609+  1553 34 35 36 37 
0609+  1557 38 39 41 42 
0609+  155B 43 44 45 46 
0610+  155F 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0610+  1563 1B 5B 48 00 
0611+  1567             
0612+  1567             table_power:
0613+  1567 01 00         .dw 1
0614+  1569 0A 00         .dw 10
0615+  156B 64 00         .dw 100
0616+  156D E8 03         .dw 1000
0617+  156F 10 27         .dw 100002601   1571             ; --- END INLINE ASM BLOCK
2602   1571             
2603   1571 F9            leave
2604   1572 09            ret
2605   1573             
2606   1573             test0:
2607   1573 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2608   1576             ; $result 
2609   1576             ; $pass 
2610   1576 10 01 00      mov a, $1
2611   1579 45 FD FF      mov [bp + -3], a
2612   157C             ; $c 
2613   157C             ; $i 
2614   157C             ; $ca 
2615   157C             ; $ia 
2616   157C 52 16 00      sub sp, 22
2617   157F             ;; c = 'A'; 
2618   157F FA FC FF      lea d, [bp + -4] ; $c
2619   1582 DA            push d
2620   1583 26 41 00      mov b, $41
2621   1586 E7            pop d
2622   1587 FD 3E         mov [d], bl
2623   1589             ;; i = 55; 
2624   1589 FA FA FF      lea d, [bp + -6] ; $i
2625   158C DA            push d
2626   158D 26 37 00      mov b, $37
2627   1590 E7            pop d
2628   1591 FD 43         mov [d], b
2629   1593             ;; ca[0] = 'A'; 
2630   1593 FA F5 FF      lea d, [bp + -11] ; $ca
2631   1596 D7            push a
2632   1597 DA            push d
2633   1598 26 00 00      mov b, $0
2634   159B E7            pop d
2635   159C 5A            add d, b
2636   159D E4            pop a
2637   159E DA            push d
2638   159F 26 41 00      mov b, $41
2639   15A2 E7            pop d
2640   15A3 FD 3E         mov [d], bl
2641   15A5             ;; ca[1] = 'B'; 
2642   15A5 FA F5 FF      lea d, [bp + -11] ; $ca
2643   15A8 D7            push a
2644   15A9 DA            push d
2645   15AA 26 01 00      mov b, $1
2646   15AD E7            pop d
2647   15AE 5A            add d, b
2648   15AF E4            pop a
2649   15B0 DA            push d
2650   15B1 26 42 00      mov b, $42
2651   15B4 E7            pop d
2652   15B5 FD 3E         mov [d], bl
2653   15B7             ;; ca[2] = 'C'; 
2654   15B7 FA F5 FF      lea d, [bp + -11] ; $ca
2655   15BA D7            push a
2656   15BB DA            push d
2657   15BC 26 02 00      mov b, $2
2658   15BF E7            pop d
2659   15C0 5A            add d, b
2660   15C1 E4            pop a
2661   15C2 DA            push d
2662   15C3 26 43 00      mov b, $43
2663   15C6 E7            pop d
2664   15C7 FD 3E         mov [d], bl
2665   15C9             ;; ca[3] = 'D'; 
2666   15C9 FA F5 FF      lea d, [bp + -11] ; $ca
2667   15CC D7            push a
2668   15CD DA            push d
2669   15CE 26 03 00      mov b, $3
2670   15D1 E7            pop d
2671   15D2 5A            add d, b
2672   15D3 E4            pop a
2673   15D4 DA            push d
2674   15D5 26 44 00      mov b, $44
2675   15D8 E7            pop d
2676   15D9 FD 3E         mov [d], bl
2677   15DB             ;; ca[4] = 'E'; 
2678   15DB FA F5 FF      lea d, [bp + -11] ; $ca
2679   15DE D7            push a
2680   15DF DA            push d
2681   15E0 26 04 00      mov b, $4
2682   15E3 E7            pop d
2683   15E4 5A            add d, b
2684   15E5 E4            pop a
2685   15E6 DA            push d
2686   15E7 26 45 00      mov b, $45
2687   15EA E7            pop d
2688   15EB FD 3E         mov [d], bl
2689   15ED             ;; ia[0] = 0; 
2690   15ED FA EB FF      lea d, [bp + -21] ; $ia
2691   15F0 D7            push a
2692   15F1 DA            push d
2693   15F2 26 00 00      mov b, $0
2694   15F5 E7            pop d
2695   15F6 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2696   15FA E4            pop a
2697   15FB DA            push d
2698   15FC 26 00 00      mov b, $0
2699   15FF E7            pop d
2700   1600 FD 43         mov [d], b
2701   1602             ;; ia[1] = 1; 
2702   1602 FA EB FF      lea d, [bp + -21] ; $ia
2703   1605 D7            push a
2704   1606 DA            push d
2705   1607 26 01 00      mov b, $1
2706   160A E7            pop d
2707   160B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2708   160F E4            pop a
2709   1610 DA            push d
2710   1611 26 01 00      mov b, $1
2711   1614 E7            pop d
2712   1615 FD 43         mov [d], b
2713   1617             ;; ia[2] = 2; 
2714   1617 FA EB FF      lea d, [bp + -21] ; $ia
2715   161A D7            push a
2716   161B DA            push d
2717   161C 26 02 00      mov b, $2
2718   161F E7            pop d
2719   1620 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2720   1624 E4            pop a
2721   1625 DA            push d
2722   1626 26 02 00      mov b, $2
2723   1629 E7            pop d
2724   162A FD 43         mov [d], b
2725   162C             ;; ia[3] = 3; 
2726   162C FA EB FF      lea d, [bp + -21] ; $ia
2727   162F D7            push a
2728   1630 DA            push d
2729   1631 26 03 00      mov b, $3
2730   1634 E7            pop d
2731   1635 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2732   1639 E4            pop a
2733   163A DA            push d
2734   163B 26 03 00      mov b, $3
2735   163E E7            pop d
2736   163F FD 43         mov [d], b
2737   1641             ;; ia[4] = 4; 
2738   1641 FA EB FF      lea d, [bp + -21] ; $ia
2739   1644 D7            push a
2740   1645 DA            push d
2741   1646 26 04 00      mov b, $4
2742   1649 E7            pop d
2743   164A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2744   164E E4            pop a
2745   164F DA            push d
2746   1650 26 04 00      mov b, $4
2747   1653 E7            pop d
2748   1654 FD 43         mov [d], b
2749   1656             ;; pass = pass && test0_subTest0(c, i, ca, ia); 
2750   1656 FA FD FF      lea d, [bp + -3] ; $pass
2751   1659 DA            push d
2752   165A FA FD FF      lea d, [bp + -3] ; $pass
2753   165D 2A            mov b, [d]
2754   165E D7            push a
2755   165F 11            mov a, b
2756   1660 FA EB FF      lea d, [bp + -21] ; $ia
2757   1663 2D            mov b, d
2758   1664 FD AB         swp b
2759   1666 D8            push b
2760   1667 FA F5 FF      lea d, [bp + -11] ; $ca
2761   166A 2D            mov b, d
2762   166B FD AB         swp b
2763   166D D8            push b
2764   166E FA FA FF      lea d, [bp + -6] ; $i
2765   1671 2A            mov b, [d]
2766   1672 FD AB         swp b
2767   1674 D8            push b
2768   1675 FA FC FF      lea d, [bp + -4] ; $c
2769   1678 32            mov bl, [d]
2770   1679 A7 00         mov bh, 0
2771   167B DD            push bl
2772   167C 07 8B 16      call test0_subTest0
2773   167F FD A7         sand a, b ; &&
2774   1681 E4            pop a
2775   1682 E7            pop d
2776   1683 FD 43         mov [d], b
2777   1685             ;; return pass; 
2778   1685 FA FD FF      lea d, [bp + -3] ; $pass
2779   1688 2A            mov b, [d]
2780   1689 F9            leave
2781   168A 09            ret
2782   168B             
2783   168B             test0_subTest0:
2784   168B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2785   168E             ; $pass 
2786   168E 10 01 00      mov a, $1
2787   1691 45 FF FF      mov [bp + -1], a
2788   1694 52 02 00      sub sp, 2
2789   1697             ;; pass = pass && c == 'A'; 
2790   1697 FA FF FF      lea d, [bp + -1] ; $pass
2791   169A DA            push d
2792   169B FA FF FF      lea d, [bp + -1] ; $pass
2793   169E 2A            mov b, [d]
2794   169F D7            push a
2795   16A0 11            mov a, b
2796   16A1 FA 05 00      lea d, [bp + 5] ; $c
2797   16A4 32            mov bl, [d]
2798   16A5 A7 00         mov bh, 0
2799   16A7             ; START RELATIONAL
2800   16A7 D7            push a
2801   16A8 11            mov a, b
2802   16A9 26 41 00      mov b, $41
2803   16AC B0            cmp a, b
2804   16AD FD 71         seq ; ==
2805   16AF E4            pop a
2806   16B0             ; END RELATIONAL
2807   16B0 FD A7         sand a, b ; &&
2808   16B2 E4            pop a
2809   16B3 E7            pop d
2810   16B4 FD 43         mov [d], b
2811   16B6             ;; pass = pass && i == 55; 
2812   16B6 FA FF FF      lea d, [bp + -1] ; $pass
2813   16B9 DA            push d
2814   16BA FA FF FF      lea d, [bp + -1] ; $pass
2815   16BD 2A            mov b, [d]
2816   16BE D7            push a
2817   16BF 11            mov a, b
2818   16C0 FA 06 00      lea d, [bp + 6] ; $i
2819   16C3 2A            mov b, [d]
2820   16C4             ; START RELATIONAL
2821   16C4 D7            push a
2822   16C5 11            mov a, b
2823   16C6 26 37 00      mov b, $37
2824   16C9 B0            cmp a, b
2825   16CA FD 71         seq ; ==
2826   16CC E4            pop a
2827   16CD             ; END RELATIONAL
2828   16CD FD A7         sand a, b ; &&
2829   16CF E4            pop a
2830   16D0 E7            pop d
2831   16D1 FD 43         mov [d], b
2832   16D3             ;; pass = pass && ca[0] == 'A'; 
2833   16D3 FA FF FF      lea d, [bp + -1] ; $pass
2834   16D6 DA            push d
2835   16D7 FA FF FF      lea d, [bp + -1] ; $pass
2836   16DA 2A            mov b, [d]
2837   16DB D7            push a
2838   16DC 11            mov a, b
2839   16DD 2C 08 00      mov b, [bp + 8] ; $ca
2840   16E0 74            mov d, b
2841   16E1 D7            push a
2842   16E2 DA            push d
2843   16E3 26 00 00      mov b, $0
2844   16E6 E7            pop d
2845   16E7 5A            add d, b
2846   16E8 E4            pop a
2847   16E9 32            mov bl, [d]
2848   16EA A7 00         mov bh, 0
2849   16EC             ; START RELATIONAL
2850   16EC D7            push a
2851   16ED 11            mov a, b
2852   16EE 26 41 00      mov b, $41
2853   16F1 B0            cmp a, b
2854   16F2 FD 71         seq ; ==
2855   16F4 E4            pop a
2856   16F5             ; END RELATIONAL
2857   16F5 FD A7         sand a, b ; &&
2858   16F7 E4            pop a
2859   16F8 E7            pop d
2860   16F9 FD 43         mov [d], b
2861   16FB             ;; pass = pass && ca[1] == 'B'; 
2862   16FB FA FF FF      lea d, [bp + -1] ; $pass
2863   16FE DA            push d
2864   16FF FA FF FF      lea d, [bp + -1] ; $pass
2865   1702 2A            mov b, [d]
2866   1703 D7            push a
2867   1704 11            mov a, b
2868   1705 2C 08 00      mov b, [bp + 8] ; $ca
2869   1708 74            mov d, b
2870   1709 D7            push a
2871   170A DA            push d
2872   170B 26 01 00      mov b, $1
2873   170E E7            pop d
2874   170F 5A            add d, b
2875   1710 E4            pop a
2876   1711 32            mov bl, [d]
2877   1712 A7 00         mov bh, 0
2878   1714             ; START RELATIONAL
2879   1714 D7            push a
2880   1715 11            mov a, b
2881   1716 26 42 00      mov b, $42
2882   1719 B0            cmp a, b
2883   171A FD 71         seq ; ==
2884   171C E4            pop a
2885   171D             ; END RELATIONAL
2886   171D FD A7         sand a, b ; &&
2887   171F E4            pop a
2888   1720 E7            pop d
2889   1721 FD 43         mov [d], b
2890   1723             ;; pass = pass && ca[2] == 'C'; 
2891   1723 FA FF FF      lea d, [bp + -1] ; $pass
2892   1726 DA            push d
2893   1727 FA FF FF      lea d, [bp + -1] ; $pass
2894   172A 2A            mov b, [d]
2895   172B D7            push a
2896   172C 11            mov a, b
2897   172D 2C 08 00      mov b, [bp + 8] ; $ca
2898   1730 74            mov d, b
2899   1731 D7            push a
2900   1732 DA            push d
2901   1733 26 02 00      mov b, $2
2902   1736 E7            pop d
2903   1737 5A            add d, b
2904   1738 E4            pop a
2905   1739 32            mov bl, [d]
2906   173A A7 00         mov bh, 0
2907   173C             ; START RELATIONAL
2908   173C D7            push a
2909   173D 11            mov a, b
2910   173E 26 43 00      mov b, $43
2911   1741 B0            cmp a, b
2912   1742 FD 71         seq ; ==
2913   1744 E4            pop a
2914   1745             ; END RELATIONAL
2915   1745 FD A7         sand a, b ; &&
2916   1747 E4            pop a
2917   1748 E7            pop d
2918   1749 FD 43         mov [d], b
2919   174B             ;; pass = pass && ca[3] == 'D'; 
2920   174B FA FF FF      lea d, [bp + -1] ; $pass
2921   174E DA            push d
2922   174F FA FF FF      lea d, [bp + -1] ; $pass
2923   1752 2A            mov b, [d]
2924   1753 D7            push a
2925   1754 11            mov a, b
2926   1755 2C 08 00      mov b, [bp + 8] ; $ca
2927   1758 74            mov d, b
2928   1759 D7            push a
2929   175A DA            push d
2930   175B 26 03 00      mov b, $3
2931   175E E7            pop d
2932   175F 5A            add d, b
2933   1760 E4            pop a
2934   1761 32            mov bl, [d]
2935   1762 A7 00         mov bh, 0
2936   1764             ; START RELATIONAL
2937   1764 D7            push a
2938   1765 11            mov a, b
2939   1766 26 44 00      mov b, $44
2940   1769 B0            cmp a, b
2941   176A FD 71         seq ; ==
2942   176C E4            pop a
2943   176D             ; END RELATIONAL
2944   176D FD A7         sand a, b ; &&
2945   176F E4            pop a
2946   1770 E7            pop d
2947   1771 FD 43         mov [d], b
2948   1773             ;; pass = pass && ca[4] == 'E'; 
2949   1773 FA FF FF      lea d, [bp + -1] ; $pass
2950   1776 DA            push d
2951   1777 FA FF FF      lea d, [bp + -1] ; $pass
2952   177A 2A            mov b, [d]
2953   177B D7            push a
2954   177C 11            mov a, b
2955   177D 2C 08 00      mov b, [bp + 8] ; $ca
2956   1780 74            mov d, b
2957   1781 D7            push a
2958   1782 DA            push d
2959   1783 26 04 00      mov b, $4
2960   1786 E7            pop d
2961   1787 5A            add d, b
2962   1788 E4            pop a
2963   1789 32            mov bl, [d]
2964   178A A7 00         mov bh, 0
2965   178C             ; START RELATIONAL
2966   178C D7            push a
2967   178D 11            mov a, b
2968   178E 26 45 00      mov b, $45
2969   1791 B0            cmp a, b
2970   1792 FD 71         seq ; ==
2971   1794 E4            pop a
2972   1795             ; END RELATIONAL
2973   1795 FD A7         sand a, b ; &&
2974   1797 E4            pop a
2975   1798 E7            pop d
2976   1799 FD 43         mov [d], b
2977   179B             ;; pass = pass && ia[0] == 0; 
2978   179B FA FF FF      lea d, [bp + -1] ; $pass
2979   179E DA            push d
2980   179F FA FF FF      lea d, [bp + -1] ; $pass
2981   17A2 2A            mov b, [d]
2982   17A3 D7            push a
2983   17A4 11            mov a, b
2984   17A5 2C 0A 00      mov b, [bp + 10] ; $ia
2985   17A8 74            mov d, b
2986   17A9 D7            push a
2987   17AA DA            push d
2988   17AB 26 00 00      mov b, $0
2989   17AE E7            pop d
2990   17AF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2991   17B3 E4            pop a
2992   17B4 2A            mov b, [d]
2993   17B5             ; START RELATIONAL
2994   17B5 D7            push a
2995   17B6 11            mov a, b
2996   17B7 26 00 00      mov b, $0
2997   17BA B0            cmp a, b
2998   17BB FD 71         seq ; ==
2999   17BD E4            pop a
3000   17BE             ; END RELATIONAL
3001   17BE FD A7         sand a, b ; &&
3002   17C0 E4            pop a
3003   17C1 E7            pop d
3004   17C2 FD 43         mov [d], b
3005   17C4             ;; pass = pass && ia[1] == 1; 
3006   17C4 FA FF FF      lea d, [bp + -1] ; $pass
3007   17C7 DA            push d
3008   17C8 FA FF FF      lea d, [bp + -1] ; $pass
3009   17CB 2A            mov b, [d]
3010   17CC D7            push a
3011   17CD 11            mov a, b
3012   17CE 2C 0A 00      mov b, [bp + 10] ; $ia
3013   17D1 74            mov d, b
3014   17D2 D7            push a
3015   17D3 DA            push d
3016   17D4 26 01 00      mov b, $1
3017   17D7 E7            pop d
3018   17D8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3019   17DC E4            pop a
3020   17DD 2A            mov b, [d]
3021   17DE             ; START RELATIONAL
3022   17DE D7            push a
3023   17DF 11            mov a, b
3024   17E0 26 01 00      mov b, $1
3025   17E3 B0            cmp a, b
3026   17E4 FD 71         seq ; ==
3027   17E6 E4            pop a
3028   17E7             ; END RELATIONAL
3029   17E7 FD A7         sand a, b ; &&
3030   17E9 E4            pop a
3031   17EA E7            pop d
3032   17EB FD 43         mov [d], b
3033   17ED             ;; pass = pass && ia[2] == 2; 
3034   17ED FA FF FF      lea d, [bp + -1] ; $pass
3035   17F0 DA            push d
3036   17F1 FA FF FF      lea d, [bp + -1] ; $pass
3037   17F4 2A            mov b, [d]
3038   17F5 D7            push a
3039   17F6 11            mov a, b
3040   17F7 2C 0A 00      mov b, [bp + 10] ; $ia
3041   17FA 74            mov d, b
3042   17FB D7            push a
3043   17FC DA            push d
3044   17FD 26 02 00      mov b, $2
3045   1800 E7            pop d
3046   1801 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3047   1805 E4            pop a
3048   1806 2A            mov b, [d]
3049   1807             ; START RELATIONAL
3050   1807 D7            push a
3051   1808 11            mov a, b
3052   1809 26 02 00      mov b, $2
3053   180C B0            cmp a, b
3054   180D FD 71         seq ; ==
3055   180F E4            pop a
3056   1810             ; END RELATIONAL
3057   1810 FD A7         sand a, b ; &&
3058   1812 E4            pop a
3059   1813 E7            pop d
3060   1814 FD 43         mov [d], b
3061   1816             ;; pass = pass && ia[3] == 3; 
3062   1816 FA FF FF      lea d, [bp + -1] ; $pass
3063   1819 DA            push d
3064   181A FA FF FF      lea d, [bp + -1] ; $pass
3065   181D 2A            mov b, [d]
3066   181E D7            push a
3067   181F 11            mov a, b
3068   1820 2C 0A 00      mov b, [bp + 10] ; $ia
3069   1823 74            mov d, b
3070   1824 D7            push a
3071   1825 DA            push d
3072   1826 26 03 00      mov b, $3
3073   1829 E7            pop d
3074   182A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3075   182E E4            pop a
3076   182F 2A            mov b, [d]
3077   1830             ; START RELATIONAL
3078   1830 D7            push a
3079   1831 11            mov a, b
3080   1832 26 03 00      mov b, $3
3081   1835 B0            cmp a, b
3082   1836 FD 71         seq ; ==
3083   1838 E4            pop a
3084   1839             ; END RELATIONAL
3085   1839 FD A7         sand a, b ; &&
3086   183B E4            pop a
3087   183C E7            pop d
3088   183D FD 43         mov [d], b
3089   183F             ;; pass = pass && ia[4] == 4; 
3090   183F FA FF FF      lea d, [bp + -1] ; $pass
3091   1842 DA            push d
3092   1843 FA FF FF      lea d, [bp + -1] ; $pass
3093   1846 2A            mov b, [d]
3094   1847 D7            push a
3095   1848 11            mov a, b
3096   1849 2C 0A 00      mov b, [bp + 10] ; $ia
3097   184C 74            mov d, b
3098   184D D7            push a
3099   184E DA            push d
3100   184F 26 04 00      mov b, $4
3101   1852 E7            pop d
3102   1853 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3103   1857 E4            pop a
3104   1858 2A            mov b, [d]
3105   1859             ; START RELATIONAL
3106   1859 D7            push a
3107   185A 11            mov a, b
3108   185B 26 04 00      mov b, $4
3109   185E B0            cmp a, b
3110   185F FD 71         seq ; ==
3111   1861 E4            pop a
3112   1862             ; END RELATIONAL
3113   1862 FD A7         sand a, b ; &&
3114   1864 E4            pop a
3115   1865 E7            pop d
3116   1866 FD 43         mov [d], b
3117   1868             ;; return pass; 
3118   1868 FA FF FF      lea d, [bp + -1] ; $pass
3119   186B 2A            mov b, [d]
3120   186C F9            leave
3121   186D 09            ret
3122   186E             
3123   186E             test1:
3124   186E F8 00 00      enter 0 ; (push bp; mov bp, sp)
3125   1871             ; $pass 
3126   1871 10 01 00      mov a, $1
3127   1874 45 FF FF      mov [bp + -1], a
3128   1877             ; $ca 
3129   1877             ; $p 
3130   1877 52 09 00      sub sp, 9
3131   187A             ;; p = ca; 
3132   187A FA F8 FF      lea d, [bp + -8] ; $p
3133   187D DA            push d
3134   187E FA FA FF      lea d, [bp + -6] ; $ca
3135   1881 2D            mov b, d
3136   1882 E7            pop d
3137   1883 FD 43         mov [d], b
3138   1885             ;; ca[0] = 'A'; 
3139   1885 FA FA FF      lea d, [bp + -6] ; $ca
3140   1888 D7            push a
3141   1889 DA            push d
3142   188A 26 00 00      mov b, $0
3143   188D E7            pop d
3144   188E 5A            add d, b
3145   188F E4            pop a
3146   1890 DA            push d
3147   1891 26 41 00      mov b, $41
3148   1894 E7            pop d
3149   1895 FD 3E         mov [d], bl
3150   1897             ;; ca[1] = 'B'; 
3151   1897 FA FA FF      lea d, [bp + -6] ; $ca
3152   189A D7            push a
3153   189B DA            push d
3154   189C 26 01 00      mov b, $1
3155   189F E7            pop d
3156   18A0 5A            add d, b
3157   18A1 E4            pop a
3158   18A2 DA            push d
3159   18A3 26 42 00      mov b, $42
3160   18A6 E7            pop d
3161   18A7 FD 3E         mov [d], bl
3162   18A9             ;; ca[2] = 'C'; 
3163   18A9 FA FA FF      lea d, [bp + -6] ; $ca
3164   18AC D7            push a
3165   18AD DA            push d
3166   18AE 26 02 00      mov b, $2
3167   18B1 E7            pop d
3168   18B2 5A            add d, b
3169   18B3 E4            pop a
3170   18B4 DA            push d
3171   18B5 26 43 00      mov b, $43
3172   18B8 E7            pop d
3173   18B9 FD 3E         mov [d], bl
3174   18BB             ;; ca[3] = 'D'; 
3175   18BB FA FA FF      lea d, [bp + -6] ; $ca
3176   18BE D7            push a
3177   18BF DA            push d
3178   18C0 26 03 00      mov b, $3
3179   18C3 E7            pop d
3180   18C4 5A            add d, b
3181   18C5 E4            pop a
3182   18C6 DA            push d
3183   18C7 26 44 00      mov b, $44
3184   18CA E7            pop d
3185   18CB FD 3E         mov [d], bl
3186   18CD             ;; ca[4] = 'E'; 
3187   18CD FA FA FF      lea d, [bp + -6] ; $ca
3188   18D0 D7            push a
3189   18D1 DA            push d
3190   18D2 26 04 00      mov b, $4
3191   18D5 E7            pop d
3192   18D6 5A            add d, b
3193   18D7 E4            pop a
3194   18D8 DA            push d
3195   18D9 26 45 00      mov b, $45
3196   18DC E7            pop d
3197   18DD FD 3E         mov [d], bl
3198   18DF             ;; pass = pass && *p == 'A'; 
3199   18DF FA FF FF      lea d, [bp + -1] ; $pass
3200   18E2 DA            push d
3201   18E3 FA FF FF      lea d, [bp + -1] ; $pass
3202   18E6 2A            mov b, [d]
3203   18E7 D7            push a
3204   18E8 11            mov a, b
3205   18E9 FA F8 FF      lea d, [bp + -8] ; $p
3206   18EC 2A            mov b, [d]
3207   18ED 74            mov d, b
3208   18EE 32            mov bl, [d]
3209   18EF A7 00         mov bh, 0
3210   18F1             ; START RELATIONAL
3211   18F1 D7            push a
3212   18F2 11            mov a, b
3213   18F3 26 41 00      mov b, $41
3214   18F6 B0            cmp a, b
3215   18F7 FD 71         seq ; ==
3216   18F9 E4            pop a
3217   18FA             ; END RELATIONAL
3218   18FA FD A7         sand a, b ; &&
3219   18FC E4            pop a
3220   18FD E7            pop d
3221   18FE FD 43         mov [d], b
3222   1900             ;; pass = pass && *(p + 1) == 'B'; 
3223   1900 FA FF FF      lea d, [bp + -1] ; $pass
3224   1903 DA            push d
3225   1904 FA FF FF      lea d, [bp + -1] ; $pass
3226   1907 2A            mov b, [d]
3227   1908 D7            push a
3228   1909 11            mov a, b
3229   190A FA F8 FF      lea d, [bp + -8] ; $p
3230   190D 2A            mov b, [d]
3231   190E             ; START TERMS
3232   190E D7            push a
3233   190F 11            mov a, b
3234   1910 26 01 00      mov b, $1
3235   1913 56            add b, a
3236   1914 E4            pop a
3237   1915             ; END TERMS
3238   1915 74            mov d, b
3239   1916 32            mov bl, [d]
3240   1917 A7 00         mov bh, 0
3241   1919             ; START RELATIONAL
3242   1919 D7            push a
3243   191A 11            mov a, b
3244   191B 26 42 00      mov b, $42
3245   191E B0            cmp a, b
3246   191F FD 71         seq ; ==
3247   1921 E4            pop a
3248   1922             ; END RELATIONAL
3249   1922 FD A7         sand a, b ; &&
3250   1924 E4            pop a
3251   1925 E7            pop d
3252   1926 FD 43         mov [d], b
3253   1928             ;; pass = pass && *(p + 2) == 'C'; 
3254   1928 FA FF FF      lea d, [bp + -1] ; $pass
3255   192B DA            push d
3256   192C FA FF FF      lea d, [bp + -1] ; $pass
3257   192F 2A            mov b, [d]
3258   1930 D7            push a
3259   1931 11            mov a, b
3260   1932 FA F8 FF      lea d, [bp + -8] ; $p
3261   1935 2A            mov b, [d]
3262   1936             ; START TERMS
3263   1936 D7            push a
3264   1937 11            mov a, b
3265   1938 26 02 00      mov b, $2
3266   193B 56            add b, a
3267   193C E4            pop a
3268   193D             ; END TERMS
3269   193D 74            mov d, b
3270   193E 32            mov bl, [d]
3271   193F A7 00         mov bh, 0
3272   1941             ; START RELATIONAL
3273   1941 D7            push a
3274   1942 11            mov a, b
3275   1943 26 43 00      mov b, $43
3276   1946 B0            cmp a, b
3277   1947 FD 71         seq ; ==
3278   1949 E4            pop a
3279   194A             ; END RELATIONAL
3280   194A FD A7         sand a, b ; &&
3281   194C E4            pop a
3282   194D E7            pop d
3283   194E FD 43         mov [d], b
3284   1950             ;; pass = pass && *(p + 3) == 'D'; 
3285   1950 FA FF FF      lea d, [bp + -1] ; $pass
3286   1953 DA            push d
3287   1954 FA FF FF      lea d, [bp + -1] ; $pass
3288   1957 2A            mov b, [d]
3289   1958 D7            push a
3290   1959 11            mov a, b
3291   195A FA F8 FF      lea d, [bp + -8] ; $p
3292   195D 2A            mov b, [d]
3293   195E             ; START TERMS
3294   195E D7            push a
3295   195F 11            mov a, b
3296   1960 26 03 00      mov b, $3
3297   1963 56            add b, a
3298   1964 E4            pop a
3299   1965             ; END TERMS
3300   1965 74            mov d, b
3301   1966 32            mov bl, [d]
3302   1967 A7 00         mov bh, 0
3303   1969             ; START RELATIONAL
3304   1969 D7            push a
3305   196A 11            mov a, b
3306   196B 26 44 00      mov b, $44
3307   196E B0            cmp a, b
3308   196F FD 71         seq ; ==
3309   1971 E4            pop a
3310   1972             ; END RELATIONAL
3311   1972 FD A7         sand a, b ; &&
3312   1974 E4            pop a
3313   1975 E7            pop d
3314   1976 FD 43         mov [d], b
3315   1978             ;; pass = pass && *(p + 4) == 'E'; 
3316   1978 FA FF FF      lea d, [bp + -1] ; $pass
3317   197B DA            push d
3318   197C FA FF FF      lea d, [bp + -1] ; $pass
3319   197F 2A            mov b, [d]
3320   1980 D7            push a
3321   1981 11            mov a, b
3322   1982 FA F8 FF      lea d, [bp + -8] ; $p
3323   1985 2A            mov b, [d]
3324   1986             ; START TERMS
3325   1986 D7            push a
3326   1987 11            mov a, b
3327   1988 26 04 00      mov b, $4
3328   198B 56            add b, a
3329   198C E4            pop a
3330   198D             ; END TERMS
3331   198D 74            mov d, b
3332   198E 32            mov bl, [d]
3333   198F A7 00         mov bh, 0
3334   1991             ; START RELATIONAL
3335   1991 D7            push a
3336   1992 11            mov a, b
3337   1993 26 45 00      mov b, $45
3338   1996 B0            cmp a, b
3339   1997 FD 71         seq ; ==
3340   1999 E4            pop a
3341   199A             ; END RELATIONAL
3342   199A FD A7         sand a, b ; &&
3343   199C E4            pop a
3344   199D E7            pop d
3345   199E FD 43         mov [d], b
3346   19A0             ;; return pass; 
3347   19A0 FA FF FF      lea d, [bp + -1] ; $pass
3348   19A3 2A            mov b, [d]
3349   19A4 F9            leave
3350   19A5 09            ret
3351   19A6             
3352   19A6             test2:
3353   19A6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3354   19A9             ; $pass 
3355   19A9 10 01 00      mov a, $1
3356   19AC 45 FF FF      mov [bp + -1], a
3357   19AF             ; $ca 
3358   19AF             ; $indices 
3359   19AF             ; $p 
3360   19AF 52 13 00      sub sp, 19
3361   19B2             ;; p = ca; 
3362   19B2 FA EE FF      lea d, [bp + -18] ; $p
3363   19B5 DA            push d
3364   19B6 FA FA FF      lea d, [bp + -6] ; $ca
3365   19B9 2D            mov b, d
3366   19BA E7            pop d
3367   19BB FD 43         mov [d], b
3368   19BD             ;; ca[0] = 'A'; 
3369   19BD FA FA FF      lea d, [bp + -6] ; $ca
3370   19C0 D7            push a
3371   19C1 DA            push d
3372   19C2 26 00 00      mov b, $0
3373   19C5 E7            pop d
3374   19C6 5A            add d, b
3375   19C7 E4            pop a
3376   19C8 DA            push d
3377   19C9 26 41 00      mov b, $41
3378   19CC E7            pop d
3379   19CD FD 3E         mov [d], bl
3380   19CF             ;; ca[1] = 'B'; 
3381   19CF FA FA FF      lea d, [bp + -6] ; $ca
3382   19D2 D7            push a
3383   19D3 DA            push d
3384   19D4 26 01 00      mov b, $1
3385   19D7 E7            pop d
3386   19D8 5A            add d, b
3387   19D9 E4            pop a
3388   19DA DA            push d
3389   19DB 26 42 00      mov b, $42
3390   19DE E7            pop d
3391   19DF FD 3E         mov [d], bl
3392   19E1             ;; ca[2] = 'C'; 
3393   19E1 FA FA FF      lea d, [bp + -6] ; $ca
3394   19E4 D7            push a
3395   19E5 DA            push d
3396   19E6 26 02 00      mov b, $2
3397   19E9 E7            pop d
3398   19EA 5A            add d, b
3399   19EB E4            pop a
3400   19EC DA            push d
3401   19ED 26 43 00      mov b, $43
3402   19F0 E7            pop d
3403   19F1 FD 3E         mov [d], bl
3404   19F3             ;; ca[3] = 'D'; 
3405   19F3 FA FA FF      lea d, [bp + -6] ; $ca
3406   19F6 D7            push a
3407   19F7 DA            push d
3408   19F8 26 03 00      mov b, $3
3409   19FB E7            pop d
3410   19FC 5A            add d, b
3411   19FD E4            pop a
3412   19FE DA            push d
3413   19FF 26 44 00      mov b, $44
3414   1A02 E7            pop d
3415   1A03 FD 3E         mov [d], bl
3416   1A05             ;; ca[4] = 'E'; 
3417   1A05 FA FA FF      lea d, [bp + -6] ; $ca
3418   1A08 D7            push a
3419   1A09 DA            push d
3420   1A0A 26 04 00      mov b, $4
3421   1A0D E7            pop d
3422   1A0E 5A            add d, b
3423   1A0F E4            pop a
3424   1A10 DA            push d
3425   1A11 26 45 00      mov b, $45
3426   1A14 E7            pop d
3427   1A15 FD 3E         mov [d], bl
3428   1A17             ;; indices[0] = 0; 
3429   1A17 FA F0 FF      lea d, [bp + -16] ; $indices
3430   1A1A D7            push a
3431   1A1B DA            push d
3432   1A1C 26 00 00      mov b, $0
3433   1A1F E7            pop d
3434   1A20 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3435   1A24 E4            pop a
3436   1A25 DA            push d
3437   1A26 26 00 00      mov b, $0
3438   1A29 E7            pop d
3439   1A2A FD 43         mov [d], b
3440   1A2C             ;; indices[1] = 1; 
3441   1A2C FA F0 FF      lea d, [bp + -16] ; $indices
3442   1A2F D7            push a
3443   1A30 DA            push d
3444   1A31 26 01 00      mov b, $1
3445   1A34 E7            pop d
3446   1A35 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3447   1A39 E4            pop a
3448   1A3A DA            push d
3449   1A3B 26 01 00      mov b, $1
3450   1A3E E7            pop d
3451   1A3F FD 43         mov [d], b
3452   1A41             ;; indices[2] = 2; 
3453   1A41 FA F0 FF      lea d, [bp + -16] ; $indices
3454   1A44 D7            push a
3455   1A45 DA            push d
3456   1A46 26 02 00      mov b, $2
3457   1A49 E7            pop d
3458   1A4A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3459   1A4E E4            pop a
3460   1A4F DA            push d
3461   1A50 26 02 00      mov b, $2
3462   1A53 E7            pop d
3463   1A54 FD 43         mov [d], b
3464   1A56             ;; indices[3] = 3; 
3465   1A56 FA F0 FF      lea d, [bp + -16] ; $indices
3466   1A59 D7            push a
3467   1A5A DA            push d
3468   1A5B 26 03 00      mov b, $3
3469   1A5E E7            pop d
3470   1A5F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3471   1A63 E4            pop a
3472   1A64 DA            push d
3473   1A65 26 03 00      mov b, $3
3474   1A68 E7            pop d
3475   1A69 FD 43         mov [d], b
3476   1A6B             ;; indices[4] = 4; 
3477   1A6B FA F0 FF      lea d, [bp + -16] ; $indices
3478   1A6E D7            push a
3479   1A6F DA            push d
3480   1A70 26 04 00      mov b, $4
3481   1A73 E7            pop d
3482   1A74 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3483   1A78 E4            pop a
3484   1A79 DA            push d
3485   1A7A 26 04 00      mov b, $4
3486   1A7D E7            pop d
3487   1A7E FD 43         mov [d], b
3488   1A80             ;; pass = pass && *(p + indices[0]) == 'A'; 
3489   1A80 FA FF FF      lea d, [bp + -1] ; $pass
3490   1A83 DA            push d
3491   1A84 FA FF FF      lea d, [bp + -1] ; $pass
3492   1A87 2A            mov b, [d]
3493   1A88 D7            push a
3494   1A89 11            mov a, b
3495   1A8A FA EE FF      lea d, [bp + -18] ; $p
3496   1A8D 2A            mov b, [d]
3497   1A8E             ; START TERMS
3498   1A8E D7            push a
3499   1A8F 11            mov a, b
3500   1A90 FA F0 FF      lea d, [bp + -16] ; $indices
3501   1A93 D7            push a
3502   1A94 DA            push d
3503   1A95 26 00 00      mov b, $0
3504   1A98 E7            pop d
3505   1A99 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3506   1A9D E4            pop a
3507   1A9E 2A            mov b, [d]
3508   1A9F 56            add b, a
3509   1AA0 E4            pop a
3510   1AA1             ; END TERMS
3511   1AA1 74            mov d, b
3512   1AA2 32            mov bl, [d]
3513   1AA3 A7 00         mov bh, 0
3514   1AA5             ; START RELATIONAL
3515   1AA5 D7            push a
3516   1AA6 11            mov a, b
3517   1AA7 26 41 00      mov b, $41
3518   1AAA B0            cmp a, b
3519   1AAB FD 71         seq ; ==
3520   1AAD E4            pop a
3521   1AAE             ; END RELATIONAL
3522   1AAE FD A7         sand a, b ; &&
3523   1AB0 E4            pop a
3524   1AB1 E7            pop d
3525   1AB2 FD 43         mov [d], b
3526   1AB4             ;; pass = pass && *(p + indices[1]) == 'B'; 
3527   1AB4 FA FF FF      lea d, [bp + -1] ; $pass
3528   1AB7 DA            push d
3529   1AB8 FA FF FF      lea d, [bp + -1] ; $pass
3530   1ABB 2A            mov b, [d]
3531   1ABC D7            push a
3532   1ABD 11            mov a, b
3533   1ABE FA EE FF      lea d, [bp + -18] ; $p
3534   1AC1 2A            mov b, [d]
3535   1AC2             ; START TERMS
3536   1AC2 D7            push a
3537   1AC3 11            mov a, b
3538   1AC4 FA F0 FF      lea d, [bp + -16] ; $indices
3539   1AC7 D7            push a
3540   1AC8 DA            push d
3541   1AC9 26 01 00      mov b, $1
3542   1ACC E7            pop d
3543   1ACD FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3544   1AD1 E4            pop a
3545   1AD2 2A            mov b, [d]
3546   1AD3 56            add b, a
3547   1AD4 E4            pop a
3548   1AD5             ; END TERMS
3549   1AD5 74            mov d, b
3550   1AD6 32            mov bl, [d]
3551   1AD7 A7 00         mov bh, 0
3552   1AD9             ; START RELATIONAL
3553   1AD9 D7            push a
3554   1ADA 11            mov a, b
3555   1ADB 26 42 00      mov b, $42
3556   1ADE B0            cmp a, b
3557   1ADF FD 71         seq ; ==
3558   1AE1 E4            pop a
3559   1AE2             ; END RELATIONAL
3560   1AE2 FD A7         sand a, b ; &&
3561   1AE4 E4            pop a
3562   1AE5 E7            pop d
3563   1AE6 FD 43         mov [d], b
3564   1AE8             ;; pass = pass && *(p + indices[2]) == 'C'; 
3565   1AE8 FA FF FF      lea d, [bp + -1] ; $pass
3566   1AEB DA            push d
3567   1AEC FA FF FF      lea d, [bp + -1] ; $pass
3568   1AEF 2A            mov b, [d]
3569   1AF0 D7            push a
3570   1AF1 11            mov a, b
3571   1AF2 FA EE FF      lea d, [bp + -18] ; $p
3572   1AF5 2A            mov b, [d]
3573   1AF6             ; START TERMS
3574   1AF6 D7            push a
3575   1AF7 11            mov a, b
3576   1AF8 FA F0 FF      lea d, [bp + -16] ; $indices
3577   1AFB D7            push a
3578   1AFC DA            push d
3579   1AFD 26 02 00      mov b, $2
3580   1B00 E7            pop d
3581   1B01 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3582   1B05 E4            pop a
3583   1B06 2A            mov b, [d]
3584   1B07 56            add b, a
3585   1B08 E4            pop a
3586   1B09             ; END TERMS
3587   1B09 74            mov d, b
3588   1B0A 32            mov bl, [d]
3589   1B0B A7 00         mov bh, 0
3590   1B0D             ; START RELATIONAL
3591   1B0D D7            push a
3592   1B0E 11            mov a, b
3593   1B0F 26 43 00      mov b, $43
3594   1B12 B0            cmp a, b
3595   1B13 FD 71         seq ; ==
3596   1B15 E4            pop a
3597   1B16             ; END RELATIONAL
3598   1B16 FD A7         sand a, b ; &&
3599   1B18 E4            pop a
3600   1B19 E7            pop d
3601   1B1A FD 43         mov [d], b
3602   1B1C             ;; pass = pass && *(p + indices[3]) == 'D'; 
3603   1B1C FA FF FF      lea d, [bp + -1] ; $pass
3604   1B1F DA            push d
3605   1B20 FA FF FF      lea d, [bp + -1] ; $pass
3606   1B23 2A            mov b, [d]
3607   1B24 D7            push a
3608   1B25 11            mov a, b
3609   1B26 FA EE FF      lea d, [bp + -18] ; $p
3610   1B29 2A            mov b, [d]
3611   1B2A             ; START TERMS
3612   1B2A D7            push a
3613   1B2B 11            mov a, b
3614   1B2C FA F0 FF      lea d, [bp + -16] ; $indices
3615   1B2F D7            push a
3616   1B30 DA            push d
3617   1B31 26 03 00      mov b, $3
3618   1B34 E7            pop d
3619   1B35 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3620   1B39 E4            pop a
3621   1B3A 2A            mov b, [d]
3622   1B3B 56            add b, a
3623   1B3C E4            pop a
3624   1B3D             ; END TERMS
3625   1B3D 74            mov d, b
3626   1B3E 32            mov bl, [d]
3627   1B3F A7 00         mov bh, 0
3628   1B41             ; START RELATIONAL
3629   1B41 D7            push a
3630   1B42 11            mov a, b
3631   1B43 26 44 00      mov b, $44
3632   1B46 B0            cmp a, b
3633   1B47 FD 71         seq ; ==
3634   1B49 E4            pop a
3635   1B4A             ; END RELATIONAL
3636   1B4A FD A7         sand a, b ; &&
3637   1B4C E4            pop a
3638   1B4D E7            pop d
3639   1B4E FD 43         mov [d], b
3640   1B50             ;; pass = pass && *(p + indices[4]) == 'E'; 
3641   1B50 FA FF FF      lea d, [bp + -1] ; $pass
3642   1B53 DA            push d
3643   1B54 FA FF FF      lea d, [bp + -1] ; $pass
3644   1B57 2A            mov b, [d]
3645   1B58 D7            push a
3646   1B59 11            mov a, b
3647   1B5A FA EE FF      lea d, [bp + -18] ; $p
3648   1B5D 2A            mov b, [d]
3649   1B5E             ; START TERMS
3650   1B5E D7            push a
3651   1B5F 11            mov a, b
3652   1B60 FA F0 FF      lea d, [bp + -16] ; $indices
3653   1B63 D7            push a
3654   1B64 DA            push d
3655   1B65 26 04 00      mov b, $4
3656   1B68 E7            pop d
3657   1B69 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3658   1B6D E4            pop a
3659   1B6E 2A            mov b, [d]
3660   1B6F 56            add b, a
3661   1B70 E4            pop a
3662   1B71             ; END TERMS
3663   1B71 74            mov d, b
3664   1B72 32            mov bl, [d]
3665   1B73 A7 00         mov bh, 0
3666   1B75             ; START RELATIONAL
3667   1B75 D7            push a
3668   1B76 11            mov a, b
3669   1B77 26 45 00      mov b, $45
3670   1B7A B0            cmp a, b
3671   1B7B FD 71         seq ; ==
3672   1B7D E4            pop a
3673   1B7E             ; END RELATIONAL
3674   1B7E FD A7         sand a, b ; &&
3675   1B80 E4            pop a
3676   1B81 E7            pop d
3677   1B82 FD 43         mov [d], b
3678   1B84             ;; return pass; 
3679   1B84 FA FF FF      lea d, [bp + -1] ; $pass
3680   1B87 2A            mov b, [d]
3681   1B88 F9            leave
3682   1B89 09            ret
3683   1B8A             
3684   1B8A             test3:
3685   1B8A F8 00 00      enter 0 ; (push bp; mov bp, sp)
3686   1B8D             ; $pass 
3687   1B8D 10 01 00      mov a, $1
3688   1B90 45 FF FF      mov [bp + -1], a
3689   1B93 52 02 00      sub sp, 2
3690   1B96             ;; st.c = 'A'; 
3691   1B96 FA 05 00      lea d, [bp + 5] ; $st
3692   1B99 58 00 00      add d, 0
3693   1B9C DA            push d
3694   1B9D 26 41 00      mov b, $41
3695   1BA0 E7            pop d
3696   1BA1 FD 3E         mov [d], bl
3697   1BA3             ;; st.i = 277; 
3698   1BA3 FA 05 00      lea d, [bp + 5] ; $st
3699   1BA6 58 01 00      add d, 1
3700   1BA9 DA            push d
3701   1BAA 26 15 01      mov b, $115
3702   1BAD E7            pop d
3703   1BAE FD 43         mov [d], b
3704   1BB0             ;; st.m[0] = 0; 
3705   1BB0 FA 05 00      lea d, [bp + 5] ; $st
3706   1BB3 58 03 00      add d, 3
3707   1BB6 D7            push a
3708   1BB7 DA            push d
3709   1BB8 26 00 00      mov b, $0
3710   1BBB E7            pop d
3711   1BBC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3712   1BC0 E4            pop a
3713   1BC1 DA            push d
3714   1BC2 26 00 00      mov b, $0
3715   1BC5 E7            pop d
3716   1BC6 FD 43         mov [d], b
3717   1BC8             ;; st.m[1] = 1; 
3718   1BC8 FA 05 00      lea d, [bp + 5] ; $st
3719   1BCB 58 03 00      add d, 3
3720   1BCE D7            push a
3721   1BCF DA            push d
3722   1BD0 26 01 00      mov b, $1
3723   1BD3 E7            pop d
3724   1BD4 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3725   1BD8 E4            pop a
3726   1BD9 DA            push d
3727   1BDA 26 01 00      mov b, $1
3728   1BDD E7            pop d
3729   1BDE FD 43         mov [d], b
3730   1BE0             ;; st.m[2] = 2; 
3731   1BE0 FA 05 00      lea d, [bp + 5] ; $st
3732   1BE3 58 03 00      add d, 3
3733   1BE6 D7            push a
3734   1BE7 DA            push d
3735   1BE8 26 02 00      mov b, $2
3736   1BEB E7            pop d
3737   1BEC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3738   1BF0 E4            pop a
3739   1BF1 DA            push d
3740   1BF2 26 02 00      mov b, $2
3741   1BF5 E7            pop d
3742   1BF6 FD 43         mov [d], b
3743   1BF8             ;; st.m[3] = 3; 
3744   1BF8 FA 05 00      lea d, [bp + 5] ; $st
3745   1BFB 58 03 00      add d, 3
3746   1BFE D7            push a
3747   1BFF DA            push d
3748   1C00 26 03 00      mov b, $3
3749   1C03 E7            pop d
3750   1C04 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3751   1C08 E4            pop a
3752   1C09 DA            push d
3753   1C0A 26 03 00      mov b, $3
3754   1C0D E7            pop d
3755   1C0E FD 43         mov [d], b
3756   1C10             ;; st.m[4] = 4; 
3757   1C10 FA 05 00      lea d, [bp + 5] ; $st
3758   1C13 58 03 00      add d, 3
3759   1C16 D7            push a
3760   1C17 DA            push d
3761   1C18 26 04 00      mov b, $4
3762   1C1B E7            pop d
3763   1C1C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3764   1C20 E4            pop a
3765   1C21 DA            push d
3766   1C22 26 04 00      mov b, $4
3767   1C25 E7            pop d
3768   1C26 FD 43         mov [d], b
3769   1C28             ;; pass = pass && st.c == 'A'; 
3770   1C28 FA FF FF      lea d, [bp + -1] ; $pass
3771   1C2B DA            push d
3772   1C2C FA FF FF      lea d, [bp + -1] ; $pass
3773   1C2F 2A            mov b, [d]
3774   1C30 D7            push a
3775   1C31 11            mov a, b
3776   1C32 FA 05 00      lea d, [bp + 5] ; $st
3777   1C35 58 00 00      add d, 0
3778   1C38 32            mov bl, [d]
3779   1C39 A7 00         mov bh, 0
3780   1C3B             ; START RELATIONAL
3781   1C3B D7            push a
3782   1C3C 11            mov a, b
3783   1C3D 26 41 00      mov b, $41
3784   1C40 B0            cmp a, b
3785   1C41 FD 71         seq ; ==
3786   1C43 E4            pop a
3787   1C44             ; END RELATIONAL
3788   1C44 FD A7         sand a, b ; &&
3789   1C46 E4            pop a
3790   1C47 E7            pop d
3791   1C48 FD 43         mov [d], b
3792   1C4A             ;; pass = pass && st.i == 277; 
3793   1C4A FA FF FF      lea d, [bp + -1] ; $pass
3794   1C4D DA            push d
3795   1C4E FA FF FF      lea d, [bp + -1] ; $pass
3796   1C51 2A            mov b, [d]
3797   1C52 D7            push a
3798   1C53 11            mov a, b
3799   1C54 FA 05 00      lea d, [bp + 5] ; $st
3800   1C57 58 01 00      add d, 1
3801   1C5A 2A            mov b, [d]
3802   1C5B             ; START RELATIONAL
3803   1C5B D7            push a
3804   1C5C 11            mov a, b
3805   1C5D 26 15 01      mov b, $115
3806   1C60 B0            cmp a, b
3807   1C61 FD 71         seq ; ==
3808   1C63 E4            pop a
3809   1C64             ; END RELATIONAL
3810   1C64 FD A7         sand a, b ; &&
3811   1C66 E4            pop a
3812   1C67 E7            pop d
3813   1C68 FD 43         mov [d], b
3814   1C6A             ;; pass = pass && st.m[0] == 0; 
3815   1C6A FA FF FF      lea d, [bp + -1] ; $pass
3816   1C6D DA            push d
3817   1C6E FA FF FF      lea d, [bp + -1] ; $pass
3818   1C71 2A            mov b, [d]
3819   1C72 D7            push a
3820   1C73 11            mov a, b
3821   1C74 FA 05 00      lea d, [bp + 5] ; $st
3822   1C77 58 03 00      add d, 3
3823   1C7A D7            push a
3824   1C7B DA            push d
3825   1C7C 26 00 00      mov b, $0
3826   1C7F E7            pop d
3827   1C80 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3828   1C84 E4            pop a
3829   1C85 2A            mov b, [d]
3830   1C86             ; START RELATIONAL
3831   1C86 D7            push a
3832   1C87 11            mov a, b
3833   1C88 26 00 00      mov b, $0
3834   1C8B B0            cmp a, b
3835   1C8C FD 71         seq ; ==
3836   1C8E E4            pop a
3837   1C8F             ; END RELATIONAL
3838   1C8F FD A7         sand a, b ; &&
3839   1C91 E4            pop a
3840   1C92 E7            pop d
3841   1C93 FD 43         mov [d], b
3842   1C95             ;; pass = pass && st.m[1] == 1; 
3843   1C95 FA FF FF      lea d, [bp + -1] ; $pass
3844   1C98 DA            push d
3845   1C99 FA FF FF      lea d, [bp + -1] ; $pass
3846   1C9C 2A            mov b, [d]
3847   1C9D D7            push a
3848   1C9E 11            mov a, b
3849   1C9F FA 05 00      lea d, [bp + 5] ; $st
3850   1CA2 58 03 00      add d, 3
3851   1CA5 D7            push a
3852   1CA6 DA            push d
3853   1CA7 26 01 00      mov b, $1
3854   1CAA E7            pop d
3855   1CAB FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3856   1CAF E4            pop a
3857   1CB0 2A            mov b, [d]
3858   1CB1             ; START RELATIONAL
3859   1CB1 D7            push a
3860   1CB2 11            mov a, b
3861   1CB3 26 01 00      mov b, $1
3862   1CB6 B0            cmp a, b
3863   1CB7 FD 71         seq ; ==
3864   1CB9 E4            pop a
3865   1CBA             ; END RELATIONAL
3866   1CBA FD A7         sand a, b ; &&
3867   1CBC E4            pop a
3868   1CBD E7            pop d
3869   1CBE FD 43         mov [d], b
3870   1CC0             ;; pass = pass && st.m[2] == 2; 
3871   1CC0 FA FF FF      lea d, [bp + -1] ; $pass
3872   1CC3 DA            push d
3873   1CC4 FA FF FF      lea d, [bp + -1] ; $pass
3874   1CC7 2A            mov b, [d]
3875   1CC8 D7            push a
3876   1CC9 11            mov a, b
3877   1CCA FA 05 00      lea d, [bp + 5] ; $st
3878   1CCD 58 03 00      add d, 3
3879   1CD0 D7            push a
3880   1CD1 DA            push d
3881   1CD2 26 02 00      mov b, $2
3882   1CD5 E7            pop d
3883   1CD6 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3884   1CDA E4            pop a
3885   1CDB 2A            mov b, [d]
3886   1CDC             ; START RELATIONAL
3887   1CDC D7            push a
3888   1CDD 11            mov a, b
3889   1CDE 26 02 00      mov b, $2
3890   1CE1 B0            cmp a, b
3891   1CE2 FD 71         seq ; ==
3892   1CE4 E4            pop a
3893   1CE5             ; END RELATIONAL
3894   1CE5 FD A7         sand a, b ; &&
3895   1CE7 E4            pop a
3896   1CE8 E7            pop d
3897   1CE9 FD 43         mov [d], b
3898   1CEB             ;; pass = pass && st.m[3] == 3; 
3899   1CEB FA FF FF      lea d, [bp + -1] ; $pass
3900   1CEE DA            push d
3901   1CEF FA FF FF      lea d, [bp + -1] ; $pass
3902   1CF2 2A            mov b, [d]
3903   1CF3 D7            push a
3904   1CF4 11            mov a, b
3905   1CF5 FA 05 00      lea d, [bp + 5] ; $st
3906   1CF8 58 03 00      add d, 3
3907   1CFB D7            push a
3908   1CFC DA            push d
3909   1CFD 26 03 00      mov b, $3
3910   1D00 E7            pop d
3911   1D01 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3912   1D05 E4            pop a
3913   1D06 2A            mov b, [d]
3914   1D07             ; START RELATIONAL
3915   1D07 D7            push a
3916   1D08 11            mov a, b
3917   1D09 26 03 00      mov b, $3
3918   1D0C B0            cmp a, b
3919   1D0D FD 71         seq ; ==
3920   1D0F E4            pop a
3921   1D10             ; END RELATIONAL
3922   1D10 FD A7         sand a, b ; &&
3923   1D12 E4            pop a
3924   1D13 E7            pop d
3925   1D14 FD 43         mov [d], b
3926   1D16             ;; pass = pass && st.m[4] == 4; 
3927   1D16 FA FF FF      lea d, [bp + -1] ; $pass
3928   1D19 DA            push d
3929   1D1A FA FF FF      lea d, [bp + -1] ; $pass
3930   1D1D 2A            mov b, [d]
3931   1D1E D7            push a
3932   1D1F 11            mov a, b
3933   1D20 FA 05 00      lea d, [bp + 5] ; $st
3934   1D23 58 03 00      add d, 3
3935   1D26 D7            push a
3936   1D27 DA            push d
3937   1D28 26 04 00      mov b, $4
3938   1D2B E7            pop d
3939   1D2C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3940   1D30 E4            pop a
3941   1D31 2A            mov b, [d]
3942   1D32             ; START RELATIONAL
3943   1D32 D7            push a
3944   1D33 11            mov a, b
3945   1D34 26 04 00      mov b, $4
3946   1D37 B0            cmp a, b
3947   1D38 FD 71         seq ; ==
3948   1D3A E4            pop a
3949   1D3B             ; END RELATIONAL
3950   1D3B FD A7         sand a, b ; &&
3951   1D3D E4            pop a
3952   1D3E E7            pop d
3953   1D3F FD 43         mov [d], b
3954   1D41             ;; return pass; 
3955   1D41 FA FF FF      lea d, [bp + -1] ; $pass
3956   1D44 2A            mov b, [d]
3957   1D45 F9            leave
3958   1D46 09            ret
3959   1D47             ; --- END TEXT BLOCK
3960   1D47             
3961   1D47             ; --- BEGIN DATA BLOCK
3962   1D47 00 00 00 00 _st1_data: .fill 13, 0
3962   1D4B 00 00 00 00 
3962   1D4F 00 00 00 00 
3962   1D53 00 
3963   1D54 54 65 73 74 __s0: .db "Test %d, Result: %d\n", 0
3963   1D58 20 25 64 2C 
3963   1D5C 20 52 65 73 
3963   1D60 75 6C 74 3A 
3963   1D64 20 25 64 0A 
3963   1D68 00 
3964   1D69 55 6E 65 78 __s1: .db "Unexpected format in printf.", 0
3964   1D6D 70 65 63 74 
3964   1D71 65 64 20 66 
3964   1D75 6F 72 6D 61 
3964   1D79 74 20 69 6E 
3964   1D7D 20 70 72 69 
3964   1D81 6E 74 66 2E 
3964   1D85 00 
3965   1D86 45 72 72 6F __s2: .db "Error: Unknown argument type.\n", 0
3965   1D8A 72 3A 20 55 
3965   1D8E 6E 6B 6E 6F 
3965   1D92 77 6E 20 61 
3965   1D96 72 67 75 6D 
3965   1D9A 65 6E 74 20 
3965   1D9E 74 79 70 65 
3965   1DA2 2E 0A 00 
3966   1DA5 1B 5B 32 4A __s3: .db "\033[2J\033[H", 0
3966   1DA9 1B 5B 48 00 
3967   1DAD             
3968   1DAD AF 1D       _heap_top: .dw _heap
3969   1DAF 00          _heap: .db 0
3970   1DB0             ; --- END DATA BLOCK
3971   1DB0             
3972   1DB0             .end
tasm: Number of errors = 0
