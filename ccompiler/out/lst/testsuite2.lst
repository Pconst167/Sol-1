0001   0000             ; --- FILENAME: ctestsuite/testsuite2
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $pass 
0011   0408             ; $i 
0012   0408             ; $nbr_tests 
0013   0408 10 0A 00      mov a, $a
0014   040B 45 E9 FF      mov [bp + -23], a
0015   040E 52 18 00      sub sp, 24
0016   0411             ;; for(i = 0; i < nbr_tests; i++){ 
0017   0411             _for1_init:
0018   0411 FA EB FF      lea d, [bp + -21] ; $i
0019   0414 DA            push d
0020   0415 26 00 00      mov b, $0
0021   0418 E7            pop d
0022   0419 FD 43         mov [d], b
0023   041B             _for1_cond:
0024   041B FA EB FF      lea d, [bp + -21] ; $i
0025   041E 2A            mov b, [d]
0026   041F             ; START RELATIONAL
0027   041F D7            push a
0028   0420 11            mov a, b
0029   0421 FA E9 FF      lea d, [bp + -23] ; $nbr_tests
0030   0424 2A            mov b, [d]
0031   0425 B0            cmp a, b
0032   0426 FD 73         slt ; <= (signed)
0033   0428 E4            pop a
0034   0429             ; END RELATIONAL
0035   0429 C0 00 00      cmp b, 0
0036   042C C6 55 04      je _for1_exit
0037   042F             _for1_block:
0038   042F             ;; pass[i] = -1; 
0039   042F FA ED FF      lea d, [bp + -19] ; $pass
0040   0432 D7            push a
0041   0433 DA            push d
0042   0434 FA EB FF      lea d, [bp + -21] ; $i
0043   0437 2A            mov b, [d]
0044   0438 E7            pop d
0045   0439 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0046   043D E4            pop a
0047   043E DA            push d
0048   043F 26 FF FF      mov b, $ffff
0049   0442 E7            pop d
0050   0443 FD 43         mov [d], b
0051   0445             _for1_update:
0052   0445 FA EB FF      lea d, [bp + -21] ; $i
0053   0448 2A            mov b, [d]
0054   0449 D8            push b
0055   044A FD 77         inc b
0056   044C FA EB FF      lea d, [bp + -21] ; $i
0057   044F FD 43         mov [d], b
0058   0451 E5            pop b
0059   0452 0A 1B 04      jmp _for1_cond
0060   0455             _for1_exit:
0061   0455             ;; pass[0] = test0(); 
0062   0455 FA ED FF      lea d, [bp + -19] ; $pass
0063   0458 D7            push a
0064   0459 DA            push d
0065   045A 26 00 00      mov b, $0
0066   045D E7            pop d
0067   045E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0068   0462 E4            pop a
0069   0463 DA            push d
0070   0464 07 67 20      call test0
0071   0467 E7            pop d
0072   0468 FD 43         mov [d], b
0073   046A             ;; pass[1] = test1(); 
0074   046A FA ED FF      lea d, [bp + -19] ; $pass
0075   046D D7            push a
0076   046E DA            push d
0077   046F 26 01 00      mov b, $1
0078   0472 E7            pop d
0079   0473 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0080   0477 E4            pop a
0081   0478 DA            push d
0082   0479 07 65 23      call test1
0083   047C E7            pop d
0084   047D FD 43         mov [d], b
0085   047F             ;; pass[2] = test2(); 
0086   047F FA ED FF      lea d, [bp + -19] ; $pass
0087   0482 D7            push a
0088   0483 DA            push d
0089   0484 26 02 00      mov b, $2
0090   0487 E7            pop d
0091   0488 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0092   048C E4            pop a
0093   048D DA            push d
0094   048E 07 9D 24      call test2
0095   0491 E7            pop d
0096   0492 FD 43         mov [d], b
0097   0494             ;; pass[3] = test3(st1); 
0098   0494 FA ED FF      lea d, [bp + -19] ; $pass
0099   0497 D7            push a
0100   0498 DA            push d
0101   0499 26 03 00      mov b, $3
0102   049C E7            pop d
0103   049D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0104   04A1 E4            pop a
0105   04A2 DA            push d
0106   04A3 3B 81 28      mov d, _st1_data ; $st1
0107   04A6 2D            mov b, d
0108   04A7 52 0D 00      sub sp, 13
0109   04AA FD 28         mov si, b
0110   04AC FD FA 01 00   lea d, [sp + 1]
0111   04B0 FD 50         mov di, d
0112   04B2 38 0D 00      mov c, 13
0113   04B5 FD F5         rep movsb
0114   04B7 07 81 26      call test3
0115   04BA 51 0D 00      add sp, 13
0116   04BD E7            pop d
0117   04BE FD 43         mov [d], b
0118   04C0             ;; for(i = 0; i < nbr_tests; i++){ 
0119   04C0             _for2_init:
0120   04C0 FA EB FF      lea d, [bp + -21] ; $i
0121   04C3 DA            push d
0122   04C4 26 00 00      mov b, $0
0123   04C7 E7            pop d
0124   04C8 FD 43         mov [d], b
0125   04CA             _for2_cond:
0126   04CA FA EB FF      lea d, [bp + -21] ; $i
0127   04CD 2A            mov b, [d]
0128   04CE             ; START RELATIONAL
0129   04CE D7            push a
0130   04CF 11            mov a, b
0131   04D0 FA E9 FF      lea d, [bp + -23] ; $nbr_tests
0132   04D3 2A            mov b, [d]
0133   04D4 B0            cmp a, b
0134   04D5 FD 73         slt ; <= (signed)
0135   04D7 E4            pop a
0136   04D8             ; END RELATIONAL
0137   04D8 C0 00 00      cmp b, 0
0138   04DB C6 14 05      je _for2_exit
0139   04DE             _for2_block:
0140   04DE             ;; printf("Test %d, Result: %d\n", i, pass[i]); 
0141   04DE FA ED FF      lea d, [bp + -19] ; $pass
0142   04E1 D7            push a
0143   04E2 DA            push d
0144   04E3 FA EB FF      lea d, [bp + -21] ; $i
0145   04E6 2A            mov b, [d]
0146   04E7 E7            pop d
0147   04E8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0148   04EC E4            pop a
0149   04ED 2A            mov b, [d]
0150   04EE FD AB         swp b
0151   04F0 D8            push b
0152   04F1 FA EB FF      lea d, [bp + -21] ; $i
0153   04F4 2A            mov b, [d]
0154   04F5 FD AB         swp b
0155   04F7 D8            push b
0156   04F8 26 8E 28      mov b, __s0 ; "Test %d, Result: %d\n"
0157   04FB FD AB         swp b
0158   04FD D8            push b
0159   04FE 07 F3 13      call printf
0160   0501 51 06 00      add sp, 6
0161   0504             _for2_update:
0162   0504 FA EB FF      lea d, [bp + -21] ; $i
0163   0507 2A            mov b, [d]
0164   0508 D8            push b
0165   0509 FD 77         inc b
0166   050B FA EB FF      lea d, [bp + -21] ; $i
0167   050E FD 43         mov [d], b
0168   0510 E5            pop b
0169   0511 0A CA 04      jmp _for2_cond
0170   0514             _for2_exit:
0171   0514 05 0B         syscall sys_terminate_proc
0172   0516             
0173   0516             strcpy:
0174   0516 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0175   0519             ; $psrc 
0176   0519             ; $pdest 
0177   0519 52 04 00      sub sp, 4
0178   051C             ;; psrc = src; 
0179   051C FA FF FF      lea d, [bp + -1] ; $psrc
0180   051F DA            push d
0181   0520 FA 07 00      lea d, [bp + 7] ; $src
0182   0523 2A            mov b, [d]
0183   0524 E7            pop d
0184   0525 FD 43         mov [d], b
0185   0527             ;; pdest = dest; 
0186   0527 FA FD FF      lea d, [bp + -3] ; $pdest
0187   052A DA            push d
0188   052B FA 05 00      lea d, [bp + 5] ; $dest
0189   052E 2A            mov b, [d]
0190   052F E7            pop d
0191   0530 FD 43         mov [d], b
0192   0532             ;; while(*psrc) *pdest++ = *psrc++; 
0193   0532             _while3_cond:
0194   0532 FA FF FF      lea d, [bp + -1] ; $psrc
0195   0535 2A            mov b, [d]
0196   0536 74            mov d, b
0197   0537 32            mov bl, [d]
0198   0538 A7 00         mov bh, 0
0199   053A C0 00 00      cmp b, 0
0200   053D C6 65 05      je _while3_exit
0201   0540             _while3_block:
0202   0540             ;; *pdest++ = *psrc++; 
0203   0540 FA FD FF      lea d, [bp + -3] ; $pdest
0204   0543 2A            mov b, [d]
0205   0544 D8            push b
0206   0545 FD 77         inc b
0207   0547 FA FD FF      lea d, [bp + -3] ; $pdest
0208   054A FD 43         mov [d], b
0209   054C E5            pop b
0210   054D D8            push b
0211   054E FA FF FF      lea d, [bp + -1] ; $psrc
0212   0551 2A            mov b, [d]
0213   0552 D8            push b
0214   0553 FD 77         inc b
0215   0555 FA FF FF      lea d, [bp + -1] ; $psrc
0216   0558 FD 43         mov [d], b
0217   055A E5            pop b
0218   055B 74            mov d, b
0219   055C 32            mov bl, [d]
0220   055D A7 00         mov bh, 0
0221   055F E7            pop d
0222   0560 FD 3E         mov [d], bl
0223   0562 0A 32 05      jmp _while3_cond
0224   0565             _while3_exit:
0225   0565             ;; *pdest = '\0'; 
0226   0565 FA FD FF      lea d, [bp + -3] ; $pdest
0227   0568 2A            mov b, [d]
0228   0569 D8            push b
0229   056A 26 00 00      mov b, $0
0230   056D E7            pop d
0231   056E FD 3E         mov [d], bl
0232   0570 F9            leave
0233   0571 09            ret
0234   0572             
0235   0572             strcmp:
0236   0572 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0237   0575             ;; while (*s1 && (*s1 == *s2)) { 
0238   0575             _while4_cond:
0239   0575 FA 05 00      lea d, [bp + 5] ; $s1
0240   0578 2A            mov b, [d]
0241   0579 74            mov d, b
0242   057A 32            mov bl, [d]
0243   057B A7 00         mov bh, 0
0244   057D D7            push a
0245   057E 11            mov a, b
0246   057F FA 05 00      lea d, [bp + 5] ; $s1
0247   0582 2A            mov b, [d]
0248   0583 74            mov d, b
0249   0584 32            mov bl, [d]
0250   0585 A7 00         mov bh, 0
0251   0587             ; START RELATIONAL
0252   0587 D7            push a
0253   0588 11            mov a, b
0254   0589 FA 07 00      lea d, [bp + 7] ; $s2
0255   058C 2A            mov b, [d]
0256   058D 74            mov d, b
0257   058E 32            mov bl, [d]
0258   058F A7 00         mov bh, 0
0259   0591 B0            cmp a, b
0260   0592 FD 71         seq ; ==
0261   0594 E4            pop a
0262   0595             ; END RELATIONAL
0263   0595 FD A7         sand a, b ; &&
0264   0597 E4            pop a
0265   0598 C0 00 00      cmp b, 0
0266   059B C6 BB 05      je _while4_exit
0267   059E             _while4_block:
0268   059E             ;; s1++; 
0269   059E FA 05 00      lea d, [bp + 5] ; $s1
0270   05A1 2A            mov b, [d]
0271   05A2 D8            push b
0272   05A3 FD 77         inc b
0273   05A5 FA 05 00      lea d, [bp + 5] ; $s1
0274   05A8 FD 43         mov [d], b
0275   05AA E5            pop b
0276   05AB             ;; s2++; 
0277   05AB FA 07 00      lea d, [bp + 7] ; $s2
0278   05AE 2A            mov b, [d]
0279   05AF D8            push b
0280   05B0 FD 77         inc b
0281   05B2 FA 07 00      lea d, [bp + 7] ; $s2
0282   05B5 FD 43         mov [d], b
0283   05B7 E5            pop b
0284   05B8 0A 75 05      jmp _while4_cond
0285   05BB             _while4_exit:
0286   05BB             ;; return *s1 - *s2; 
0287   05BB FA 05 00      lea d, [bp + 5] ; $s1
0288   05BE 2A            mov b, [d]
0289   05BF 74            mov d, b
0290   05C0 32            mov bl, [d]
0291   05C1 A7 00         mov bh, 0
0292   05C3             ; START TERMS
0293   05C3 D7            push a
0294   05C4 11            mov a, b
0295   05C5 FA 07 00      lea d, [bp + 7] ; $s2
0296   05C8 2A            mov b, [d]
0297   05C9 74            mov d, b
0298   05CA 32            mov bl, [d]
0299   05CB A7 00         mov bh, 0
0300   05CD 60            sub a, b
0301   05CE 27            mov b, a
0302   05CF E4            pop a
0303   05D0             ; END TERMS
0304   05D0 F9            leave
0305   05D1 09            ret
0306   05D2             
0307   05D2             strcat:
0308   05D2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0309   05D5             ; $dest_len 
0310   05D5             ; $i 
0311   05D5 52 04 00      sub sp, 4
0312   05D8             ;; dest_len = strlen(dest); 
0313   05D8 FA FF FF      lea d, [bp + -1] ; $dest_len
0314   05DB DA            push d
0315   05DC FA 05 00      lea d, [bp + 5] ; $dest
0316   05DF 2A            mov b, [d]
0317   05E0 FD AB         swp b
0318   05E2 D8            push b
0319   05E3 07 85 06      call strlen
0320   05E6 51 02 00      add sp, 2
0321   05E9 E7            pop d
0322   05EA FD 43         mov [d], b
0323   05EC             ;; for (i = 0; src[i] != 0; i=i+1) { 
0324   05EC             _for5_init:
0325   05EC FA FD FF      lea d, [bp + -3] ; $i
0326   05EF DA            push d
0327   05F0 26 00 00      mov b, $0
0328   05F3 E7            pop d
0329   05F4 FD 43         mov [d], b
0330   05F6             _for5_cond:
0331   05F6 FA 07 00      lea d, [bp + 7] ; $src
0332   05F9 FD 2A         mov d, [d]
0333   05FB D7            push a
0334   05FC DA            push d
0335   05FD FA FD FF      lea d, [bp + -3] ; $i
0336   0600 2A            mov b, [d]
0337   0601 E7            pop d
0338   0602 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0339   0606 E4            pop a
0340   0607 32            mov bl, [d]
0341   0608 A7 00         mov bh, 0
0342   060A             ; START RELATIONAL
0343   060A D7            push a
0344   060B 11            mov a, b
0345   060C 26 00 00      mov b, $0
0346   060F B0            cmp a, b
0347   0610 FD 72         sneq ; !=
0348   0612 E4            pop a
0349   0613             ; END RELATIONAL
0350   0613 C0 00 00      cmp b, 0
0351   0616 C6 5F 06      je _for5_exit
0352   0619             _for5_block:
0353   0619             ;; dest[dest_len + i] = src[i]; 
0354   0619 FA 05 00      lea d, [bp + 5] ; $dest
0355   061C FD 2A         mov d, [d]
0356   061E D7            push a
0357   061F DA            push d
0358   0620 FA FF FF      lea d, [bp + -1] ; $dest_len
0359   0623 2A            mov b, [d]
0360   0624             ; START TERMS
0361   0624 D7            push a
0362   0625 11            mov a, b
0363   0626 FA FD FF      lea d, [bp + -3] ; $i
0364   0629 2A            mov b, [d]
0365   062A 56            add b, a
0366   062B E4            pop a
0367   062C             ; END TERMS
0368   062C E7            pop d
0369   062D FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0370   0631 E4            pop a
0371   0632 DA            push d
0372   0633 FA 07 00      lea d, [bp + 7] ; $src
0373   0636 FD 2A         mov d, [d]
0374   0638 D7            push a
0375   0639 DA            push d
0376   063A FA FD FF      lea d, [bp + -3] ; $i
0377   063D 2A            mov b, [d]
0378   063E E7            pop d
0379   063F FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0380   0643 E4            pop a
0381   0644 32            mov bl, [d]
0382   0645 A7 00         mov bh, 0
0383   0647 E7            pop d
0384   0648 FD 3E         mov [d], bl
0385   064A             _for5_update:
0386   064A FA FD FF      lea d, [bp + -3] ; $i
0387   064D DA            push d
0388   064E FA FD FF      lea d, [bp + -3] ; $i
0389   0651 2A            mov b, [d]
0390   0652             ; START TERMS
0391   0652 D7            push a
0392   0653 11            mov a, b
0393   0654 26 01 00      mov b, $1
0394   0657 56            add b, a
0395   0658 E4            pop a
0396   0659             ; END TERMS
0397   0659 E7            pop d
0398   065A FD 43         mov [d], b
0399   065C 0A F6 05      jmp _for5_cond
0400   065F             _for5_exit:
0401   065F             ;; dest[dest_len + i] = 0; 
0402   065F FA 05 00      lea d, [bp + 5] ; $dest
0403   0662 FD 2A         mov d, [d]
0404   0664 D7            push a
0405   0665 DA            push d
0406   0666 FA FF FF      lea d, [bp + -1] ; $dest_len
0407   0669 2A            mov b, [d]
0408   066A             ; START TERMS
0409   066A D7            push a
0410   066B 11            mov a, b
0411   066C FA FD FF      lea d, [bp + -3] ; $i
0412   066F 2A            mov b, [d]
0413   0670 56            add b, a
0414   0671 E4            pop a
0415   0672             ; END TERMS
0416   0672 E7            pop d
0417   0673 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0418   0677 E4            pop a
0419   0678 DA            push d
0420   0679 26 00 00      mov b, $0
0421   067C E7            pop d
0422   067D FD 3E         mov [d], bl
0423   067F             ;; return dest; 
0424   067F FA 05 00      lea d, [bp + 5] ; $dest
0425   0682 2A            mov b, [d]
0426   0683 F9            leave
0427   0684 09            ret
0428   0685             
0429   0685             strlen:
0430   0685 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0431   0688             ; $length 
0432   0688 52 02 00      sub sp, 2
0433   068B             ;; length = 0; 
0434   068B FA FF FF      lea d, [bp + -1] ; $length
0435   068E DA            push d
0436   068F 26 00 00      mov b, $0
0437   0692 E7            pop d
0438   0693 FD 43         mov [d], b
0439   0695             ;; while (str[length] != 0) { 
0440   0695             _while6_cond:
0441   0695 FA 05 00      lea d, [bp + 5] ; $str
0442   0698 FD 2A         mov d, [d]
0443   069A D7            push a
0444   069B DA            push d
0445   069C FA FF FF      lea d, [bp + -1] ; $length
0446   069F 2A            mov b, [d]
0447   06A0 E7            pop d
0448   06A1 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0449   06A5 E4            pop a
0450   06A6 32            mov bl, [d]
0451   06A7 A7 00         mov bh, 0
0452   06A9             ; START RELATIONAL
0453   06A9 D7            push a
0454   06AA 11            mov a, b
0455   06AB 26 00 00      mov b, $0
0456   06AE B0            cmp a, b
0457   06AF FD 72         sneq ; !=
0458   06B1 E4            pop a
0459   06B2             ; END RELATIONAL
0460   06B2 C0 00 00      cmp b, 0
0461   06B5 C6 C8 06      je _while6_exit
0462   06B8             _while6_block:
0463   06B8             ;; length++; 
0464   06B8 FA FF FF      lea d, [bp + -1] ; $length
0465   06BB 2A            mov b, [d]
0466   06BC D8            push b
0467   06BD FD 77         inc b
0468   06BF FA FF FF      lea d, [bp + -1] ; $length
0469   06C2 FD 43         mov [d], b
0470   06C4 E5            pop b
0471   06C5 0A 95 06      jmp _while6_cond
0472   06C8             _while6_exit:
0473   06C8             ;; return length; 
0474   06C8 FA FF FF      lea d, [bp + -1] ; $length
0475   06CB 2A            mov b, [d]
0476   06CC F9            leave
0477   06CD 09            ret
0478   06CE             
0479   06CE             exit:
0480   06CE F8 00 00      enter 0 ; (push bp; mov bp, sp)
0481   06D1             
0482   06D1             ; --- BEGIN INLINE ASM BLOCK
0483   06D1 05 0B         syscall sys_terminate_proc
0484   06D3             ; --- END INLINE ASM BLOCK
0485   06D3             
0486   06D3 F9            leave
0487   06D4 09            ret
0488   06D5             
0489   06D5             atoi:
0490   06D5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0491   06D8             ; $result 
0492   06D8 10 00 00      mov a, $0
0493   06DB 45 FF FF      mov [bp + -1], a
0494   06DE             ; $sign 
0495   06DE 10 01 00      mov a, $1
0496   06E1 45 FD FF      mov [bp + -3], a
0497   06E4 52 04 00      sub sp, 4
0498   06E7             ;; while (*str == ' ') str++; 
0499   06E7             _while7_cond:
0500   06E7 FA 05 00      lea d, [bp + 5] ; $str
0501   06EA 2A            mov b, [d]
0502   06EB 74            mov d, b
0503   06EC 32            mov bl, [d]
0504   06ED A7 00         mov bh, 0
0505   06EF             ; START RELATIONAL
0506   06EF D7            push a
0507   06F0 11            mov a, b
0508   06F1 26 20 00      mov b, $20
0509   06F4 B0            cmp a, b
0510   06F5 FD 71         seq ; ==
0511   06F7 E4            pop a
0512   06F8             ; END RELATIONAL
0513   06F8 C0 00 00      cmp b, 0
0514   06FB C6 0E 07      je _while7_exit
0515   06FE             _while7_block:
0516   06FE             ;; str++; 
0517   06FE FA 05 00      lea d, [bp + 5] ; $str
0518   0701 2A            mov b, [d]
0519   0702 D8            push b
0520   0703 FD 77         inc b
0521   0705 FA 05 00      lea d, [bp + 5] ; $str
0522   0708 FD 43         mov [d], b
0523   070A E5            pop b
0524   070B 0A E7 06      jmp _while7_cond
0525   070E             _while7_exit:
0526   070E             ;; if (*str == '-' || *str == '+') { 
0527   070E             _if8_cond:
0528   070E FA 05 00      lea d, [bp + 5] ; $str
0529   0711 2A            mov b, [d]
0530   0712 74            mov d, b
0531   0713 32            mov bl, [d]
0532   0714 A7 00         mov bh, 0
0533   0716             ; START RELATIONAL
0534   0716 D7            push a
0535   0717 11            mov a, b
0536   0718 26 2D 00      mov b, $2d
0537   071B B0            cmp a, b
0538   071C FD 71         seq ; ==
0539   071E E4            pop a
0540   071F             ; END RELATIONAL
0541   071F D7            push a
0542   0720 11            mov a, b
0543   0721 FA 05 00      lea d, [bp + 5] ; $str
0544   0724 2A            mov b, [d]
0545   0725 74            mov d, b
0546   0726 32            mov bl, [d]
0547   0727 A7 00         mov bh, 0
0548   0729             ; START RELATIONAL
0549   0729 D7            push a
0550   072A 11            mov a, b
0551   072B 26 2B 00      mov b, $2b
0552   072E B0            cmp a, b
0553   072F FD 71         seq ; ==
0554   0731 E4            pop a
0555   0732             ; END RELATIONAL
0556   0732 FD A8         sor a, b ; ||
0557   0734 E4            pop a
0558   0735 C0 00 00      cmp b, 0
0559   0738 C6 6F 07      je _if8_exit
0560   073B             _if8_true:
0561   073B             ;; if (*str == '-') sign = -1; 
0562   073B             _if9_cond:
0563   073B FA 05 00      lea d, [bp + 5] ; $str
0564   073E 2A            mov b, [d]
0565   073F 74            mov d, b
0566   0740 32            mov bl, [d]
0567   0741 A7 00         mov bh, 0
0568   0743             ; START RELATIONAL
0569   0743 D7            push a
0570   0744 11            mov a, b
0571   0745 26 2D 00      mov b, $2d
0572   0748 B0            cmp a, b
0573   0749 FD 71         seq ; ==
0574   074B E4            pop a
0575   074C             ; END RELATIONAL
0576   074C C0 00 00      cmp b, 0
0577   074F C6 5F 07      je _if9_exit
0578   0752             _if9_true:
0579   0752             ;; sign = -1; 
0580   0752 FA FD FF      lea d, [bp + -3] ; $sign
0581   0755 DA            push d
0582   0756 26 FF FF      mov b, $ffff
0583   0759 E7            pop d
0584   075A FD 43         mov [d], b
0585   075C 0A 5F 07      jmp _if9_exit
0586   075F             _if9_exit:
0587   075F             ;; str++; 
0588   075F FA 05 00      lea d, [bp + 5] ; $str
0589   0762 2A            mov b, [d]
0590   0763 D8            push b
0591   0764 FD 77         inc b
0592   0766 FA 05 00      lea d, [bp + 5] ; $str
0593   0769 FD 43         mov [d], b
0594   076B E5            pop b
0595   076C 0A 6F 07      jmp _if8_exit
0596   076F             _if8_exit:
0597   076F             ;; while (*str >= '0' && *str <= '9') { 
0598   076F             _while10_cond:
0599   076F FA 05 00      lea d, [bp + 5] ; $str
0600   0772 2A            mov b, [d]
0601   0773 74            mov d, b
0602   0774 32            mov bl, [d]
0603   0775 A7 00         mov bh, 0
0604   0777             ; START RELATIONAL
0605   0777 D7            push a
0606   0778 11            mov a, b
0607   0779 26 30 00      mov b, $30
0608   077C B0            cmp a, b
0609   077D FD 82         sgeu ; >= (unsigned)
0610   077F E4            pop a
0611   0780             ; END RELATIONAL
0612   0780 D7            push a
0613   0781 11            mov a, b
0614   0782 FA 05 00      lea d, [bp + 5] ; $str
0615   0785 2A            mov b, [d]
0616   0786 74            mov d, b
0617   0787 32            mov bl, [d]
0618   0788 A7 00         mov bh, 0
0619   078A             ; START RELATIONAL
0620   078A D7            push a
0621   078B 11            mov a, b
0622   078C 26 39 00      mov b, $39
0623   078F B0            cmp a, b
0624   0790 FD 76         sleu ; <= (unsigned)
0625   0792 E4            pop a
0626   0793             ; END RELATIONAL
0627   0793 FD A7         sand a, b ; &&
0628   0795 E4            pop a
0629   0796 C0 00 00      cmp b, 0
0630   0799 C6 D4 07      je _while10_exit
0631   079C             _while10_block:
0632   079C             ;; result = result * 10 + (*str - '0'); 
0633   079C FA FF FF      lea d, [bp + -1] ; $result
0634   079F DA            push d
0635   07A0 FA FF FF      lea d, [bp + -1] ; $result
0636   07A3 2A            mov b, [d]
0637   07A4             ; START FACTORS
0638   07A4 D7            push a
0639   07A5 11            mov a, b
0640   07A6 26 0A 00      mov b, $a
0641   07A9 AC            mul a, b ; *
0642   07AA 11            mov a, b
0643   07AB 27            mov b, a
0644   07AC E4            pop a
0645   07AD             ; END FACTORS
0646   07AD             ; START TERMS
0647   07AD D7            push a
0648   07AE 11            mov a, b
0649   07AF FA 05 00      lea d, [bp + 5] ; $str
0650   07B2 2A            mov b, [d]
0651   07B3 74            mov d, b
0652   07B4 32            mov bl, [d]
0653   07B5 A7 00         mov bh, 0
0654   07B7             ; START TERMS
0655   07B7 D7            push a
0656   07B8 11            mov a, b
0657   07B9 26 30 00      mov b, $30
0658   07BC 60            sub a, b
0659   07BD 27            mov b, a
0660   07BE E4            pop a
0661   07BF             ; END TERMS
0662   07BF 56            add b, a
0663   07C0 E4            pop a
0664   07C1             ; END TERMS
0665   07C1 E7            pop d
0666   07C2 FD 43         mov [d], b
0667   07C4             ;; str++; 
0668   07C4 FA 05 00      lea d, [bp + 5] ; $str
0669   07C7 2A            mov b, [d]
0670   07C8 D8            push b
0671   07C9 FD 77         inc b
0672   07CB FA 05 00      lea d, [bp + 5] ; $str
0673   07CE FD 43         mov [d], b
0674   07D0 E5            pop b
0675   07D1 0A 6F 07      jmp _while10_cond
0676   07D4             _while10_exit:
0677   07D4             ;; return sign * result; 
0678   07D4 FA FD FF      lea d, [bp + -3] ; $sign
0679   07D7 2A            mov b, [d]
0680   07D8             ; START FACTORS
0681   07D8 D7            push a
0682   07D9 11            mov a, b
0683   07DA FA FF FF      lea d, [bp + -1] ; $result
0684   07DD 2A            mov b, [d]
0685   07DE AC            mul a, b ; *
0686   07DF 11            mov a, b
0687   07E0 27            mov b, a
0688   07E1 E4            pop a
0689   07E2             ; END FACTORS
0690   07E2 F9            leave
0691   07E3 09            ret
0692   07E4             
0693   07E4             rand:
0694   07E4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0695   07E7             ; $sec 
0696   07E7 52 02 00      sub sp, 2
0697   07EA             
0698   07EA             ; --- BEGIN INLINE ASM BLOCK
0699   07EA 19 00         mov al, 0
0700   07EC 05 01         syscall sys_rtc					
0701   07EE 1A            mov al, ah
0702   07EF FA FF FF      lea d, [bp + -1] ; $sec
0703   07F2 1E            mov al, [d]
0704   07F3 22 00         mov ah, 0
0705   07F5             ; --- END INLINE ASM BLOCK
0706   07F5             
0707   07F5             ;; return sec; 
0708   07F5 FA FF FF      lea d, [bp + -1] ; $sec
0709   07F8 2A            mov b, [d]
0710   07F9 F9            leave
0711   07FA 09            ret
0712   07FB             
0713   07FB             srand:
0714   07FB F8 00 00      enter 0 ; (push bp; mov bp, sp)
0715   07FE F9            leave
0716   07FF 09            ret
0717   0800             
0718   0800             malloc:
0719   0800 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0720   0803 F9            leave
0721   0804 09            ret
0722   0805             
0723   0805             calloc:
0724   0805 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0725   0808 F9            leave
0726   0809 09            ret
0727   080A             
0728   080A             realloc:
0729   080A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0730   080D F9            leave
0731   080E 09            ret
0732   080F             
0733   080F             alloc:
0734   080F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0735   0812             ;; heap_top = heap_top + bytes; 
0736   0812 3B E7 28      mov d, _heap_top ; $heap_top
0737   0815 DA            push d
0738   0816 3B E7 28      mov d, _heap_top ; $heap_top
0739   0819 2A            mov b, [d]
0740   081A             ; START TERMS
0741   081A D7            push a
0742   081B 11            mov a, b
0743   081C FA 05 00      lea d, [bp + 5] ; $bytes
0744   081F 2A            mov b, [d]
0745   0820 56            add b, a
0746   0821 E4            pop a
0747   0822             ; END TERMS
0748   0822 E7            pop d
0749   0823 FD 43         mov [d], b
0750   0825             ;; return heap_top - bytes; 
0751   0825 3B E7 28      mov d, _heap_top ; $heap_top
0752   0828 2A            mov b, [d]
0753   0829             ; START TERMS
0754   0829 D7            push a
0755   082A 11            mov a, b
0756   082B FA 05 00      lea d, [bp + 5] ; $bytes
0757   082E 2A            mov b, [d]
0758   082F 60            sub a, b
0759   0830 27            mov b, a
0760   0831 E4            pop a
0761   0832             ; END TERMS
0762   0832 F9            leave
0763   0833 09            ret
0764   0834             
0765   0834             free:
0766   0834 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0767   0837             ;; return heap_top = heap_top - bytes; 
0768   0837 3B E7 28      mov d, _heap_top ; $heap_top
0769   083A DA            push d
0770   083B 3B E7 28      mov d, _heap_top ; $heap_top
0771   083E 2A            mov b, [d]
0772   083F             ; START TERMS
0773   083F D7            push a
0774   0840 11            mov a, b
0775   0841 FA 05 00      lea d, [bp + 5] ; $bytes
0776   0844 2A            mov b, [d]
0777   0845 60            sub a, b
0778   0846 27            mov b, a
0779   0847 E4            pop a
0780   0848             ; END TERMS
0781   0848 E7            pop d
0782   0849 FD 43         mov [d], b
0783   084B F9            leave
0784   084C 09            ret
0785   084D             
0786   084D             base64_encode:
0787   084D F8 00 00      enter 0 ; (push bp; mov bp, sp)
0788   0850             ; $i 
0789   0850 10 00 00      mov a, $0
0790   0853 45 FF FF      mov [bp + -1], a
0791   0856             ; $j 
0792   0856 10 00 00      mov a, $0
0793   0859 45 FD FF      mov [bp + -3], a
0794   085C             ; $k 
0795   085C             ; $input_len 
0796   085C             ; $input_buffer 
0797   085C             ; $output_buffer 
0798   085C 52 0F 00      sub sp, 15
0799   085F             ;; input_len = strlen(input); 
0800   085F FA F9 FF      lea d, [bp + -7] ; $input_len
0801   0862 DA            push d
0802   0863 FA 05 00      lea d, [bp + 5] ; $input
0803   0866 2A            mov b, [d]
0804   0867 FD AB         swp b
0805   0869 D8            push b
0806   086A 07 85 06      call strlen
0807   086D 51 02 00      add sp, 2
0808   0870 E7            pop d
0809   0871 FD 43         mov [d], b
0810   0873             ;; while (input_len--) { 
0811   0873             _while11_cond:
0812   0873 FA F9 FF      lea d, [bp + -7] ; $input_len
0813   0876 2A            mov b, [d]
0814   0877 D8            push b
0815   0878 FD 7D         dec b
0816   087A FA F9 FF      lea d, [bp + -7] ; $input_len
0817   087D FD 43         mov [d], b
0818   087F E5            pop b
0819   0880 C0 00 00      cmp b, 0
0820   0883 C6 37 0A      je _while11_exit
0821   0886             _while11_block:
0822   0886             ;; input_buffer[i++] = *(input++); 
0823   0886 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0824   0889 D7            push a
0825   088A DA            push d
0826   088B FA FF FF      lea d, [bp + -1] ; $i
0827   088E 2A            mov b, [d]
0828   088F D8            push b
0829   0890 FD 77         inc b
0830   0892 FA FF FF      lea d, [bp + -1] ; $i
0831   0895 FD 43         mov [d], b
0832   0897 E5            pop b
0833   0898 E7            pop d
0834   0899 5A            add d, b
0835   089A E4            pop a
0836   089B DA            push d
0837   089C FA 05 00      lea d, [bp + 5] ; $input
0838   089F 2A            mov b, [d]
0839   08A0 D8            push b
0840   08A1 FD 77         inc b
0841   08A3 FA 05 00      lea d, [bp + 5] ; $input
0842   08A6 FD 43         mov [d], b
0843   08A8 E5            pop b
0844   08A9 74            mov d, b
0845   08AA 32            mov bl, [d]
0846   08AB A7 00         mov bh, 0
0847   08AD E7            pop d
0848   08AE FD 3E         mov [d], bl
0849   08B0             ;; if (i == 3) { 
0850   08B0             _if12_cond:
0851   08B0 FA FF FF      lea d, [bp + -1] ; $i
0852   08B3 2A            mov b, [d]
0853   08B4             ; START RELATIONAL
0854   08B4 D7            push a
0855   08B5 11            mov a, b
0856   08B6 26 03 00      mov b, $3
0857   08B9 B0            cmp a, b
0858   08BA FD 71         seq ; ==
0859   08BC E4            pop a
0860   08BD             ; END RELATIONAL
0861   08BD C0 00 00      cmp b, 0
0862   08C0 C6 34 0A      je _if12_exit
0863   08C3             _if12_true:
0864   08C3             ;; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
0865   08C3 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0866   08C6 D7            push a
0867   08C7 DA            push d
0868   08C8 26 00 00      mov b, $0
0869   08CB E7            pop d
0870   08CC 5A            add d, b
0871   08CD E4            pop a
0872   08CE DA            push d
0873   08CF FA F6 FF      lea d, [bp + -10] ; $input_buffer
0874   08D2 D7            push a
0875   08D3 DA            push d
0876   08D4 26 00 00      mov b, $0
0877   08D7 E7            pop d
0878   08D8 5A            add d, b
0879   08D9 E4            pop a
0880   08DA 32            mov bl, [d]
0881   08DB A7 00         mov bh, 0
0882   08DD D7            push a
0883   08DE 11            mov a, b
0884   08DF 26 FC 00      mov b, $fc
0885   08E2 86            and a, b ; &
0886   08E3 27            mov b, a
0887   08E4 E4            pop a
0888   08E5             ; START SHIFT
0889   08E5 D7            push a
0890   08E6 11            mov a, b
0891   08E7 26 02 00      mov b, $2
0892   08EA FD 39         mov c, b
0893   08EC A5            ashr a, cl
0894   08ED 27            mov b, a
0895   08EE E4            pop a
0896   08EF             ; END SHIFT
0897   08EF E7            pop d
0898   08F0 FD 3E         mov [d], bl
0899   08F2             ;; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
0900   08F2 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0901   08F5 D7            push a
0902   08F6 DA            push d
0903   08F7 26 01 00      mov b, $1
0904   08FA E7            pop d
0905   08FB 5A            add d, b
0906   08FC E4            pop a
0907   08FD DA            push d
0908   08FE FA F6 FF      lea d, [bp + -10] ; $input_buffer
0909   0901 D7            push a
0910   0902 DA            push d
0911   0903 26 00 00      mov b, $0
0912   0906 E7            pop d
0913   0907 5A            add d, b
0914   0908 E4            pop a
0915   0909 32            mov bl, [d]
0916   090A A7 00         mov bh, 0
0917   090C D7            push a
0918   090D 11            mov a, b
0919   090E 26 03 00      mov b, $3
0920   0911 86            and a, b ; &
0921   0912 27            mov b, a
0922   0913 E4            pop a
0923   0914             ; START SHIFT
0924   0914 D7            push a
0925   0915 11            mov a, b
0926   0916 26 04 00      mov b, $4
0927   0919 FD 39         mov c, b
0928   091B 9D            shl a, cl
0929   091C 27            mov b, a
0930   091D E4            pop a
0931   091E             ; END SHIFT
0932   091E             ; START TERMS
0933   091E D7            push a
0934   091F 11            mov a, b
0935   0920 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0936   0923 D7            push a
0937   0924 DA            push d
0938   0925 26 01 00      mov b, $1
0939   0928 E7            pop d
0940   0929 5A            add d, b
0941   092A E4            pop a
0942   092B 32            mov bl, [d]
0943   092C A7 00         mov bh, 0
0944   092E D7            push a
0945   092F 11            mov a, b
0946   0930 26 F0 00      mov b, $f0
0947   0933 86            and a, b ; &
0948   0934 27            mov b, a
0949   0935 E4            pop a
0950   0936             ; START SHIFT
0951   0936 D7            push a
0952   0937 11            mov a, b
0953   0938 26 04 00      mov b, $4
0954   093B FD 39         mov c, b
0955   093D A5            ashr a, cl
0956   093E 27            mov b, a
0957   093F E4            pop a
0958   0940             ; END SHIFT
0959   0940 56            add b, a
0960   0941 E4            pop a
0961   0942             ; END TERMS
0962   0942 E7            pop d
0963   0943 FD 3E         mov [d], bl
0964   0945             ;; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
0965   0945 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0966   0948 D7            push a
0967   0949 DA            push d
0968   094A 26 02 00      mov b, $2
0969   094D E7            pop d
0970   094E 5A            add d, b
0971   094F E4            pop a
0972   0950 DA            push d
0973   0951 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0974   0954 D7            push a
0975   0955 DA            push d
0976   0956 26 01 00      mov b, $1
0977   0959 E7            pop d
0978   095A 5A            add d, b
0979   095B E4            pop a
0980   095C 32            mov bl, [d]
0981   095D A7 00         mov bh, 0
0982   095F D7            push a
0983   0960 11            mov a, b
0984   0961 26 0F 00      mov b, $f
0985   0964 86            and a, b ; &
0986   0965 27            mov b, a
0987   0966 E4            pop a
0988   0967             ; START SHIFT
0989   0967 D7            push a
0990   0968 11            mov a, b
0991   0969 26 02 00      mov b, $2
0992   096C FD 39         mov c, b
0993   096E 9D            shl a, cl
0994   096F 27            mov b, a
0995   0970 E4            pop a
0996   0971             ; END SHIFT
0997   0971             ; START TERMS
0998   0971 D7            push a
0999   0972 11            mov a, b
1000   0973 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1001   0976 D7            push a
1002   0977 DA            push d
1003   0978 26 02 00      mov b, $2
1004   097B E7            pop d
1005   097C 5A            add d, b
1006   097D E4            pop a
1007   097E 32            mov bl, [d]
1008   097F A7 00         mov bh, 0
1009   0981 D7            push a
1010   0982 11            mov a, b
1011   0983 26 C0 00      mov b, $c0
1012   0986 86            and a, b ; &
1013   0987 27            mov b, a
1014   0988 E4            pop a
1015   0989             ; START SHIFT
1016   0989 D7            push a
1017   098A 11            mov a, b
1018   098B 26 06 00      mov b, $6
1019   098E FD 39         mov c, b
1020   0990 A5            ashr a, cl
1021   0991 27            mov b, a
1022   0992 E4            pop a
1023   0993             ; END SHIFT
1024   0993 56            add b, a
1025   0994 E4            pop a
1026   0995             ; END TERMS
1027   0995 E7            pop d
1028   0996 FD 3E         mov [d], bl
1029   0998             ;; output_buffer[3] = input_buffer[2] & 0x3F; 
1030   0998 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1031   099B D7            push a
1032   099C DA            push d
1033   099D 26 03 00      mov b, $3
1034   09A0 E7            pop d
1035   09A1 5A            add d, b
1036   09A2 E4            pop a
1037   09A3 DA            push d
1038   09A4 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1039   09A7 D7            push a
1040   09A8 DA            push d
1041   09A9 26 02 00      mov b, $2
1042   09AC E7            pop d
1043   09AD 5A            add d, b
1044   09AE E4            pop a
1045   09AF 32            mov bl, [d]
1046   09B0 A7 00         mov bh, 0
1047   09B2 D7            push a
1048   09B3 11            mov a, b
1049   09B4 26 3F 00      mov b, $3f
1050   09B7 86            and a, b ; &
1051   09B8 27            mov b, a
1052   09B9 E4            pop a
1053   09BA E7            pop d
1054   09BB FD 3E         mov [d], bl
1055   09BD             ;; for (i = 0; i < 4; i++) { 
1056   09BD             _for13_init:
1057   09BD FA FF FF      lea d, [bp + -1] ; $i
1058   09C0 DA            push d
1059   09C1 26 00 00      mov b, $0
1060   09C4 E7            pop d
1061   09C5 FD 43         mov [d], b
1062   09C7             _for13_cond:
1063   09C7 FA FF FF      lea d, [bp + -1] ; $i
1064   09CA 2A            mov b, [d]
1065   09CB             ; START RELATIONAL
1066   09CB D7            push a
1067   09CC 11            mov a, b
1068   09CD 26 04 00      mov b, $4
1069   09D0 B0            cmp a, b
1070   09D1 FD 73         slt ; <= (signed)
1071   09D3 E4            pop a
1072   09D4             ; END RELATIONAL
1073   09D4 C0 00 00      cmp b, 0
1074   09D7 C6 27 0A      je _for13_exit
1075   09DA             _for13_block:
1076   09DA             ;; output[j++] = base64_table[output_buffer[i]]; 
1077   09DA FA 07 00      lea d, [bp + 7] ; $output
1078   09DD FD 2A         mov d, [d]
1079   09DF D7            push a
1080   09E0 DA            push d
1081   09E1 FA FD FF      lea d, [bp + -3] ; $j
1082   09E4 2A            mov b, [d]
1083   09E5 D8            push b
1084   09E6 FD 77         inc b
1085   09E8 FA FD FF      lea d, [bp + -3] ; $j
1086   09EB FD 43         mov [d], b
1087   09ED E5            pop b
1088   09EE E7            pop d
1089   09EF FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1090   09F3 E4            pop a
1091   09F4 DA            push d
1092   09F5 3B 7F 28      mov d, _base64_table ; $base64_table
1093   09F8 FD 2A         mov d, [d]
1094   09FA D7            push a
1095   09FB DA            push d
1096   09FC FA F2 FF      lea d, [bp + -14] ; $output_buffer
1097   09FF D7            push a
1098   0A00 DA            push d
1099   0A01 FA FF FF      lea d, [bp + -1] ; $i
1100   0A04 2A            mov b, [d]
1101   0A05 E7            pop d
1102   0A06 5A            add d, b
1103   0A07 E4            pop a
1104   0A08 32            mov bl, [d]
1105   0A09 A7 00         mov bh, 0
1106   0A0B E7            pop d
1107   0A0C FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1108   0A10 E4            pop a
1109   0A11 32            mov bl, [d]
1110   0A12 A7 00         mov bh, 0
1111   0A14 E7            pop d
1112   0A15 FD 3E         mov [d], bl
1113   0A17             _for13_update:
1114   0A17 FA FF FF      lea d, [bp + -1] ; $i
1115   0A1A 2A            mov b, [d]
1116   0A1B D8            push b
1117   0A1C FD 77         inc b
1118   0A1E FA FF FF      lea d, [bp + -1] ; $i
1119   0A21 FD 43         mov [d], b
1120   0A23 E5            pop b
1121   0A24 0A C7 09      jmp _for13_cond
1122   0A27             _for13_exit:
1123   0A27             ;; i = 0; 
1124   0A27 FA FF FF      lea d, [bp + -1] ; $i
1125   0A2A DA            push d
1126   0A2B 26 00 00      mov b, $0
1127   0A2E E7            pop d
1128   0A2F FD 43         mov [d], b
1129   0A31 0A 34 0A      jmp _if12_exit
1130   0A34             _if12_exit:
1131   0A34 0A 73 08      jmp _while11_cond
1132   0A37             _while11_exit:
1133   0A37             ;; if (i) { 
1134   0A37             _if14_cond:
1135   0A37 FA FF FF      lea d, [bp + -1] ; $i
1136   0A3A 2A            mov b, [d]
1137   0A3B C0 00 00      cmp b, 0
1138   0A3E C6 0C 0C      je _if14_exit
1139   0A41             _if14_true:
1140   0A41             ;; for (k = i; k < 3; k++) { 
1141   0A41             _for15_init:
1142   0A41 FA FB FF      lea d, [bp + -5] ; $k
1143   0A44 DA            push d
1144   0A45 FA FF FF      lea d, [bp + -1] ; $i
1145   0A48 2A            mov b, [d]
1146   0A49 E7            pop d
1147   0A4A FD 43         mov [d], b
1148   0A4C             _for15_cond:
1149   0A4C FA FB FF      lea d, [bp + -5] ; $k
1150   0A4F 2A            mov b, [d]
1151   0A50             ; START RELATIONAL
1152   0A50 D7            push a
1153   0A51 11            mov a, b
1154   0A52 26 03 00      mov b, $3
1155   0A55 B0            cmp a, b
1156   0A56 FD 73         slt ; <= (signed)
1157   0A58 E4            pop a
1158   0A59             ; END RELATIONAL
1159   0A59 C0 00 00      cmp b, 0
1160   0A5C C6 82 0A      je _for15_exit
1161   0A5F             _for15_block:
1162   0A5F             ;; input_buffer[k] = '\0'; 
1163   0A5F FA F6 FF      lea d, [bp + -10] ; $input_buffer
1164   0A62 D7            push a
1165   0A63 DA            push d
1166   0A64 FA FB FF      lea d, [bp + -5] ; $k
1167   0A67 2A            mov b, [d]
1168   0A68 E7            pop d
1169   0A69 5A            add d, b
1170   0A6A E4            pop a
1171   0A6B DA            push d
1172   0A6C 26 00 00      mov b, $0
1173   0A6F E7            pop d
1174   0A70 FD 3E         mov [d], bl
1175   0A72             _for15_update:
1176   0A72 FA FB FF      lea d, [bp + -5] ; $k
1177   0A75 2A            mov b, [d]
1178   0A76 D8            push b
1179   0A77 FD 77         inc b
1180   0A79 FA FB FF      lea d, [bp + -5] ; $k
1181   0A7C FD 43         mov [d], b
1182   0A7E E5            pop b
1183   0A7F 0A 4C 0A      jmp _for15_cond
1184   0A82             _for15_exit:
1185   0A82             ;; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
1186   0A82 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1187   0A85 D7            push a
1188   0A86 DA            push d
1189   0A87 26 00 00      mov b, $0
1190   0A8A E7            pop d
1191   0A8B 5A            add d, b
1192   0A8C E4            pop a
1193   0A8D DA            push d
1194   0A8E FA F6 FF      lea d, [bp + -10] ; $input_buffer
1195   0A91 D7            push a
1196   0A92 DA            push d
1197   0A93 26 00 00      mov b, $0
1198   0A96 E7            pop d
1199   0A97 5A            add d, b
1200   0A98 E4            pop a
1201   0A99 32            mov bl, [d]
1202   0A9A A7 00         mov bh, 0
1203   0A9C D7            push a
1204   0A9D 11            mov a, b
1205   0A9E 26 FC 00      mov b, $fc
1206   0AA1 86            and a, b ; &
1207   0AA2 27            mov b, a
1208   0AA3 E4            pop a
1209   0AA4             ; START SHIFT
1210   0AA4 D7            push a
1211   0AA5 11            mov a, b
1212   0AA6 26 02 00      mov b, $2
1213   0AA9 FD 39         mov c, b
1214   0AAB A5            ashr a, cl
1215   0AAC 27            mov b, a
1216   0AAD E4            pop a
1217   0AAE             ; END SHIFT
1218   0AAE E7            pop d
1219   0AAF FD 3E         mov [d], bl
1220   0AB1             ;; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
1221   0AB1 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1222   0AB4 D7            push a
1223   0AB5 DA            push d
1224   0AB6 26 01 00      mov b, $1
1225   0AB9 E7            pop d
1226   0ABA 5A            add d, b
1227   0ABB E4            pop a
1228   0ABC DA            push d
1229   0ABD FA F6 FF      lea d, [bp + -10] ; $input_buffer
1230   0AC0 D7            push a
1231   0AC1 DA            push d
1232   0AC2 26 00 00      mov b, $0
1233   0AC5 E7            pop d
1234   0AC6 5A            add d, b
1235   0AC7 E4            pop a
1236   0AC8 32            mov bl, [d]
1237   0AC9 A7 00         mov bh, 0
1238   0ACB D7            push a
1239   0ACC 11            mov a, b
1240   0ACD 26 03 00      mov b, $3
1241   0AD0 86            and a, b ; &
1242   0AD1 27            mov b, a
1243   0AD2 E4            pop a
1244   0AD3             ; START SHIFT
1245   0AD3 D7            push a
1246   0AD4 11            mov a, b
1247   0AD5 26 04 00      mov b, $4
1248   0AD8 FD 39         mov c, b
1249   0ADA 9D            shl a, cl
1250   0ADB 27            mov b, a
1251   0ADC E4            pop a
1252   0ADD             ; END SHIFT
1253   0ADD             ; START TERMS
1254   0ADD D7            push a
1255   0ADE 11            mov a, b
1256   0ADF FA F6 FF      lea d, [bp + -10] ; $input_buffer
1257   0AE2 D7            push a
1258   0AE3 DA            push d
1259   0AE4 26 01 00      mov b, $1
1260   0AE7 E7            pop d
1261   0AE8 5A            add d, b
1262   0AE9 E4            pop a
1263   0AEA 32            mov bl, [d]
1264   0AEB A7 00         mov bh, 0
1265   0AED D7            push a
1266   0AEE 11            mov a, b
1267   0AEF 26 F0 00      mov b, $f0
1268   0AF2 86            and a, b ; &
1269   0AF3 27            mov b, a
1270   0AF4 E4            pop a
1271   0AF5             ; START SHIFT
1272   0AF5 D7            push a
1273   0AF6 11            mov a, b
1274   0AF7 26 04 00      mov b, $4
1275   0AFA FD 39         mov c, b
1276   0AFC A5            ashr a, cl
1277   0AFD 27            mov b, a
1278   0AFE E4            pop a
1279   0AFF             ; END SHIFT
1280   0AFF 56            add b, a
1281   0B00 E4            pop a
1282   0B01             ; END TERMS
1283   0B01 E7            pop d
1284   0B02 FD 3E         mov [d], bl
1285   0B04             ;; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
1286   0B04 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1287   0B07 D7            push a
1288   0B08 DA            push d
1289   0B09 26 02 00      mov b, $2
1290   0B0C E7            pop d
1291   0B0D 5A            add d, b
1292   0B0E E4            pop a
1293   0B0F DA            push d
1294   0B10 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1295   0B13 D7            push a
1296   0B14 DA            push d
1297   0B15 26 01 00      mov b, $1
1298   0B18 E7            pop d
1299   0B19 5A            add d, b
1300   0B1A E4            pop a
1301   0B1B 32            mov bl, [d]
1302   0B1C A7 00         mov bh, 0
1303   0B1E D7            push a
1304   0B1F 11            mov a, b
1305   0B20 26 0F 00      mov b, $f
1306   0B23 86            and a, b ; &
1307   0B24 27            mov b, a
1308   0B25 E4            pop a
1309   0B26             ; START SHIFT
1310   0B26 D7            push a
1311   0B27 11            mov a, b
1312   0B28 26 02 00      mov b, $2
1313   0B2B FD 39         mov c, b
1314   0B2D 9D            shl a, cl
1315   0B2E 27            mov b, a
1316   0B2F E4            pop a
1317   0B30             ; END SHIFT
1318   0B30             ; START TERMS
1319   0B30 D7            push a
1320   0B31 11            mov a, b
1321   0B32 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1322   0B35 D7            push a
1323   0B36 DA            push d
1324   0B37 26 02 00      mov b, $2
1325   0B3A E7            pop d
1326   0B3B 5A            add d, b
1327   0B3C E4            pop a
1328   0B3D 32            mov bl, [d]
1329   0B3E A7 00         mov bh, 0
1330   0B40 D7            push a
1331   0B41 11            mov a, b
1332   0B42 26 C0 00      mov b, $c0
1333   0B45 86            and a, b ; &
1334   0B46 27            mov b, a
1335   0B47 E4            pop a
1336   0B48             ; START SHIFT
1337   0B48 D7            push a
1338   0B49 11            mov a, b
1339   0B4A 26 06 00      mov b, $6
1340   0B4D FD 39         mov c, b
1341   0B4F A5            ashr a, cl
1342   0B50 27            mov b, a
1343   0B51 E4            pop a
1344   0B52             ; END SHIFT
1345   0B52 56            add b, a
1346   0B53 E4            pop a
1347   0B54             ; END TERMS
1348   0B54 E7            pop d
1349   0B55 FD 3E         mov [d], bl
1350   0B57             ;; for (k = 0; k < i + 1; k++) { 
1351   0B57             _for16_init:
1352   0B57 FA FB FF      lea d, [bp + -5] ; $k
1353   0B5A DA            push d
1354   0B5B 26 00 00      mov b, $0
1355   0B5E E7            pop d
1356   0B5F FD 43         mov [d], b
1357   0B61             _for16_cond:
1358   0B61 FA FB FF      lea d, [bp + -5] ; $k
1359   0B64 2A            mov b, [d]
1360   0B65             ; START RELATIONAL
1361   0B65 D7            push a
1362   0B66 11            mov a, b
1363   0B67 FA FF FF      lea d, [bp + -1] ; $i
1364   0B6A 2A            mov b, [d]
1365   0B6B             ; START TERMS
1366   0B6B D7            push a
1367   0B6C 11            mov a, b
1368   0B6D 26 01 00      mov b, $1
1369   0B70 56            add b, a
1370   0B71 E4            pop a
1371   0B72             ; END TERMS
1372   0B72 B0            cmp a, b
1373   0B73 FD 73         slt ; <= (signed)
1374   0B75 E4            pop a
1375   0B76             ; END RELATIONAL
1376   0B76 C0 00 00      cmp b, 0
1377   0B79 C6 C9 0B      je _for16_exit
1378   0B7C             _for16_block:
1379   0B7C             ;; output[j++] = base64_table[output_buffer[k]]; 
1380   0B7C FA 07 00      lea d, [bp + 7] ; $output
1381   0B7F FD 2A         mov d, [d]
1382   0B81 D7            push a
1383   0B82 DA            push d
1384   0B83 FA FD FF      lea d, [bp + -3] ; $j
1385   0B86 2A            mov b, [d]
1386   0B87 D8            push b
1387   0B88 FD 77         inc b
1388   0B8A FA FD FF      lea d, [bp + -3] ; $j
1389   0B8D FD 43         mov [d], b
1390   0B8F E5            pop b
1391   0B90 E7            pop d
1392   0B91 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1393   0B95 E4            pop a
1394   0B96 DA            push d
1395   0B97 3B 7F 28      mov d, _base64_table ; $base64_table
1396   0B9A FD 2A         mov d, [d]
1397   0B9C D7            push a
1398   0B9D DA            push d
1399   0B9E FA F2 FF      lea d, [bp + -14] ; $output_buffer
1400   0BA1 D7            push a
1401   0BA2 DA            push d
1402   0BA3 FA FB FF      lea d, [bp + -5] ; $k
1403   0BA6 2A            mov b, [d]
1404   0BA7 E7            pop d
1405   0BA8 5A            add d, b
1406   0BA9 E4            pop a
1407   0BAA 32            mov bl, [d]
1408   0BAB A7 00         mov bh, 0
1409   0BAD E7            pop d
1410   0BAE FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1411   0BB2 E4            pop a
1412   0BB3 32            mov bl, [d]
1413   0BB4 A7 00         mov bh, 0
1414   0BB6 E7            pop d
1415   0BB7 FD 3E         mov [d], bl
1416   0BB9             _for16_update:
1417   0BB9 FA FB FF      lea d, [bp + -5] ; $k
1418   0BBC 2A            mov b, [d]
1419   0BBD D8            push b
1420   0BBE FD 77         inc b
1421   0BC0 FA FB FF      lea d, [bp + -5] ; $k
1422   0BC3 FD 43         mov [d], b
1423   0BC5 E5            pop b
1424   0BC6 0A 61 0B      jmp _for16_cond
1425   0BC9             _for16_exit:
1426   0BC9             ;; while (i++ < 3) { 
1427   0BC9             _while17_cond:
1428   0BC9 FA FF FF      lea d, [bp + -1] ; $i
1429   0BCC 2A            mov b, [d]
1430   0BCD D8            push b
1431   0BCE FD 77         inc b
1432   0BD0 FA FF FF      lea d, [bp + -1] ; $i
1433   0BD3 FD 43         mov [d], b
1434   0BD5 E5            pop b
1435   0BD6             ; START RELATIONAL
1436   0BD6 D7            push a
1437   0BD7 11            mov a, b
1438   0BD8 26 03 00      mov b, $3
1439   0BDB B0            cmp a, b
1440   0BDC FD 73         slt ; <= (signed)
1441   0BDE E4            pop a
1442   0BDF             ; END RELATIONAL
1443   0BDF C0 00 00      cmp b, 0
1444   0BE2 C6 09 0C      je _while17_exit
1445   0BE5             _while17_block:
1446   0BE5             ;; output[j++] = '='; 
1447   0BE5 FA 07 00      lea d, [bp + 7] ; $output
1448   0BE8 FD 2A         mov d, [d]
1449   0BEA D7            push a
1450   0BEB DA            push d
1451   0BEC FA FD FF      lea d, [bp + -3] ; $j
1452   0BEF 2A            mov b, [d]
1453   0BF0 D8            push b
1454   0BF1 FD 77         inc b
1455   0BF3 FA FD FF      lea d, [bp + -3] ; $j
1456   0BF6 FD 43         mov [d], b
1457   0BF8 E5            pop b
1458   0BF9 E7            pop d
1459   0BFA FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1460   0BFE E4            pop a
1461   0BFF DA            push d
1462   0C00 26 3D 00      mov b, $3d
1463   0C03 E7            pop d
1464   0C04 FD 3E         mov [d], bl
1465   0C06 0A C9 0B      jmp _while17_cond
1466   0C09             _while17_exit:
1467   0C09 0A 0C 0C      jmp _if14_exit
1468   0C0C             _if14_exit:
1469   0C0C             ;; output[j] = '\0'; 
1470   0C0C FA 07 00      lea d, [bp + 7] ; $output
1471   0C0F FD 2A         mov d, [d]
1472   0C11 D7            push a
1473   0C12 DA            push d
1474   0C13 FA FD FF      lea d, [bp + -3] ; $j
1475   0C16 2A            mov b, [d]
1476   0C17 E7            pop d
1477   0C18 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1478   0C1C E4            pop a
1479   0C1D DA            push d
1480   0C1E 26 00 00      mov b, $0
1481   0C21 E7            pop d
1482   0C22 FD 3E         mov [d], bl
1483   0C24 F9            leave
1484   0C25 09            ret
1485   0C26             
1486   0C26             base64_char_value:
1487   0C26 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1488   0C29             ;; if (c >= 'A' && c <= 'Z') return c - 'A'; 
1489   0C29             _if18_cond:
1490   0C29 FA 05 00      lea d, [bp + 5] ; $c
1491   0C2C 32            mov bl, [d]
1492   0C2D A7 00         mov bh, 0
1493   0C2F             ; START RELATIONAL
1494   0C2F D7            push a
1495   0C30 11            mov a, b
1496   0C31 26 41 00      mov b, $41
1497   0C34 B0            cmp a, b
1498   0C35 FD 80         sge ; >=
1499   0C37 E4            pop a
1500   0C38             ; END RELATIONAL
1501   0C38 D7            push a
1502   0C39 11            mov a, b
1503   0C3A FA 05 00      lea d, [bp + 5] ; $c
1504   0C3D 32            mov bl, [d]
1505   0C3E A7 00         mov bh, 0
1506   0C40             ; START RELATIONAL
1507   0C40 D7            push a
1508   0C41 11            mov a, b
1509   0C42 26 5A 00      mov b, $5a
1510   0C45 B0            cmp a, b
1511   0C46 FD 74         sle ; <=
1512   0C48 E4            pop a
1513   0C49             ; END RELATIONAL
1514   0C49 FD A7         sand a, b ; &&
1515   0C4B E4            pop a
1516   0C4C C0 00 00      cmp b, 0
1517   0C4F C6 65 0C      je _if18_exit
1518   0C52             _if18_true:
1519   0C52             ;; return c - 'A'; 
1520   0C52 FA 05 00      lea d, [bp + 5] ; $c
1521   0C55 32            mov bl, [d]
1522   0C56 A7 00         mov bh, 0
1523   0C58             ; START TERMS
1524   0C58 D7            push a
1525   0C59 11            mov a, b
1526   0C5A 26 41 00      mov b, $41
1527   0C5D 60            sub a, b
1528   0C5E 27            mov b, a
1529   0C5F E4            pop a
1530   0C60             ; END TERMS
1531   0C60 F9            leave
1532   0C61 09            ret
1533   0C62 0A 65 0C      jmp _if18_exit
1534   0C65             _if18_exit:
1535   0C65             ;; if (c >= 'a' && c <= 'z') return c - 'a' + 26; 
1536   0C65             _if19_cond:
1537   0C65 FA 05 00      lea d, [bp + 5] ; $c
1538   0C68 32            mov bl, [d]
1539   0C69 A7 00         mov bh, 0
1540   0C6B             ; START RELATIONAL
1541   0C6B D7            push a
1542   0C6C 11            mov a, b
1543   0C6D 26 61 00      mov b, $61
1544   0C70 B0            cmp a, b
1545   0C71 FD 80         sge ; >=
1546   0C73 E4            pop a
1547   0C74             ; END RELATIONAL
1548   0C74 D7            push a
1549   0C75 11            mov a, b
1550   0C76 FA 05 00      lea d, [bp + 5] ; $c
1551   0C79 32            mov bl, [d]
1552   0C7A A7 00         mov bh, 0
1553   0C7C             ; START RELATIONAL
1554   0C7C D7            push a
1555   0C7D 11            mov a, b
1556   0C7E 26 7A 00      mov b, $7a
1557   0C81 B0            cmp a, b
1558   0C82 FD 74         sle ; <=
1559   0C84 E4            pop a
1560   0C85             ; END RELATIONAL
1561   0C85 FD A7         sand a, b ; &&
1562   0C87 E4            pop a
1563   0C88 C0 00 00      cmp b, 0
1564   0C8B C6 A6 0C      je _if19_exit
1565   0C8E             _if19_true:
1566   0C8E             ;; return c - 'a' + 26; 
1567   0C8E FA 05 00      lea d, [bp + 5] ; $c
1568   0C91 32            mov bl, [d]
1569   0C92 A7 00         mov bh, 0
1570   0C94             ; START TERMS
1571   0C94 D7            push a
1572   0C95 11            mov a, b
1573   0C96 26 61 00      mov b, $61
1574   0C99 60            sub a, b
1575   0C9A 27            mov b, a
1576   0C9B 11            mov a, b
1577   0C9C 26 1A 00      mov b, $1a
1578   0C9F 56            add b, a
1579   0CA0 E4            pop a
1580   0CA1             ; END TERMS
1581   0CA1 F9            leave
1582   0CA2 09            ret
1583   0CA3 0A A6 0C      jmp _if19_exit
1584   0CA6             _if19_exit:
1585   0CA6             ;; if (c >= '0' && c <= '9') return c - '0' + 52; 
1586   0CA6             _if20_cond:
1587   0CA6 FA 05 00      lea d, [bp + 5] ; $c
1588   0CA9 32            mov bl, [d]
1589   0CAA A7 00         mov bh, 0
1590   0CAC             ; START RELATIONAL
1591   0CAC D7            push a
1592   0CAD 11            mov a, b
1593   0CAE 26 30 00      mov b, $30
1594   0CB1 B0            cmp a, b
1595   0CB2 FD 80         sge ; >=
1596   0CB4 E4            pop a
1597   0CB5             ; END RELATIONAL
1598   0CB5 D7            push a
1599   0CB6 11            mov a, b
1600   0CB7 FA 05 00      lea d, [bp + 5] ; $c
1601   0CBA 32            mov bl, [d]
1602   0CBB A7 00         mov bh, 0
1603   0CBD             ; START RELATIONAL
1604   0CBD D7            push a
1605   0CBE 11            mov a, b
1606   0CBF 26 39 00      mov b, $39
1607   0CC2 B0            cmp a, b
1608   0CC3 FD 74         sle ; <=
1609   0CC5 E4            pop a
1610   0CC6             ; END RELATIONAL
1611   0CC6 FD A7         sand a, b ; &&
1612   0CC8 E4            pop a
1613   0CC9 C0 00 00      cmp b, 0
1614   0CCC C6 E7 0C      je _if20_exit
1615   0CCF             _if20_true:
1616   0CCF             ;; return c - '0' + 52; 
1617   0CCF FA 05 00      lea d, [bp + 5] ; $c
1618   0CD2 32            mov bl, [d]
1619   0CD3 A7 00         mov bh, 0
1620   0CD5             ; START TERMS
1621   0CD5 D7            push a
1622   0CD6 11            mov a, b
1623   0CD7 26 30 00      mov b, $30
1624   0CDA 60            sub a, b
1625   0CDB 27            mov b, a
1626   0CDC 11            mov a, b
1627   0CDD 26 34 00      mov b, $34
1628   0CE0 56            add b, a
1629   0CE1 E4            pop a
1630   0CE2             ; END TERMS
1631   0CE2 F9            leave
1632   0CE3 09            ret
1633   0CE4 0A E7 0C      jmp _if20_exit
1634   0CE7             _if20_exit:
1635   0CE7             ;; if (c == '+') return 62; 
1636   0CE7             _if21_cond:
1637   0CE7 FA 05 00      lea d, [bp + 5] ; $c
1638   0CEA 32            mov bl, [d]
1639   0CEB A7 00         mov bh, 0
1640   0CED             ; START RELATIONAL
1641   0CED D7            push a
1642   0CEE 11            mov a, b
1643   0CEF 26 2B 00      mov b, $2b
1644   0CF2 B0            cmp a, b
1645   0CF3 FD 71         seq ; ==
1646   0CF5 E4            pop a
1647   0CF6             ; END RELATIONAL
1648   0CF6 C0 00 00      cmp b, 0
1649   0CF9 C6 04 0D      je _if21_exit
1650   0CFC             _if21_true:
1651   0CFC             ;; return 62; 
1652   0CFC 26 3E 00      mov b, $3e
1653   0CFF F9            leave
1654   0D00 09            ret
1655   0D01 0A 04 0D      jmp _if21_exit
1656   0D04             _if21_exit:
1657   0D04             ;; if (c == '/') return 63; 
1658   0D04             _if22_cond:
1659   0D04 FA 05 00      lea d, [bp + 5] ; $c
1660   0D07 32            mov bl, [d]
1661   0D08 A7 00         mov bh, 0
1662   0D0A             ; START RELATIONAL
1663   0D0A D7            push a
1664   0D0B 11            mov a, b
1665   0D0C 26 2F 00      mov b, $2f
1666   0D0F B0            cmp a, b
1667   0D10 FD 71         seq ; ==
1668   0D12 E4            pop a
1669   0D13             ; END RELATIONAL
1670   0D13 C0 00 00      cmp b, 0
1671   0D16 C6 21 0D      je _if22_exit
1672   0D19             _if22_true:
1673   0D19             ;; return 63; 
1674   0D19 26 3F 00      mov b, $3f
1675   0D1C F9            leave
1676   0D1D 09            ret
1677   0D1E 0A 21 0D      jmp _if22_exit
1678   0D21             _if22_exit:
1679   0D21             ;; return -1; 
1680   0D21 26 FF FF      mov b, $ffff
1681   0D24 F9            leave
1682   0D25 09            ret
1683   0D26             
1684   0D26             base64_decode:
1685   0D26 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1686   0D29             ; $i 
1687   0D29 10 00 00      mov a, $0
1688   0D2C 45 FF FF      mov [bp + -1], a
1689   0D2F             ; $j 
1690   0D2F 10 00 00      mov a, $0
1691   0D32 45 FD FF      mov [bp + -3], a
1692   0D35             ; $k 
1693   0D35 10 00 00      mov a, $0
1694   0D38 45 FB FF      mov [bp + -5], a
1695   0D3B             ; $input_len 
1696   0D3B             ; $input_buffer 
1697   0D3B             ; $output_buffer 
1698   0D3B 52 0F 00      sub sp, 15
1699   0D3E             ;; input_len = strlen(input); 
1700   0D3E FA F9 FF      lea d, [bp + -7] ; $input_len
1701   0D41 DA            push d
1702   0D42 FA 05 00      lea d, [bp + 5] ; $input
1703   0D45 2A            mov b, [d]
1704   0D46 FD AB         swp b
1705   0D48 D8            push b
1706   0D49 07 85 06      call strlen
1707   0D4C 51 02 00      add sp, 2
1708   0D4F E7            pop d
1709   0D50 FD 43         mov [d], b
1710   0D52             ;; while (input_len-- && (input[k] != '=') && base64_char_value(input[k]) != -1) { 
1711   0D52             _while23_cond:
1712   0D52 FA F9 FF      lea d, [bp + -7] ; $input_len
1713   0D55 2A            mov b, [d]
1714   0D56 D8            push b
1715   0D57 FD 7D         dec b
1716   0D59 FA F9 FF      lea d, [bp + -7] ; $input_len
1717   0D5C FD 43         mov [d], b
1718   0D5E E5            pop b
1719   0D5F D7            push a
1720   0D60 11            mov a, b
1721   0D61 FA 05 00      lea d, [bp + 5] ; $input
1722   0D64 FD 2A         mov d, [d]
1723   0D66 D7            push a
1724   0D67 DA            push d
1725   0D68 FA FB FF      lea d, [bp + -5] ; $k
1726   0D6B 2A            mov b, [d]
1727   0D6C E7            pop d
1728   0D6D FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1729   0D71 E4            pop a
1730   0D72 32            mov bl, [d]
1731   0D73 A7 00         mov bh, 0
1732   0D75             ; START RELATIONAL
1733   0D75 D7            push a
1734   0D76 11            mov a, b
1735   0D77 26 3D 00      mov b, $3d
1736   0D7A B0            cmp a, b
1737   0D7B FD 72         sneq ; !=
1738   0D7D E4            pop a
1739   0D7E             ; END RELATIONAL
1740   0D7E FD A7         sand a, b ; &&
1741   0D80 11            mov a, b
1742   0D81 FA 05 00      lea d, [bp + 5] ; $input
1743   0D84 FD 2A         mov d, [d]
1744   0D86 D7            push a
1745   0D87 DA            push d
1746   0D88 FA FB FF      lea d, [bp + -5] ; $k
1747   0D8B 2A            mov b, [d]
1748   0D8C E7            pop d
1749   0D8D FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1750   0D91 E4            pop a
1751   0D92 32            mov bl, [d]
1752   0D93 A7 00         mov bh, 0
1753   0D95 DD            push bl
1754   0D96 07 26 0C      call base64_char_value
1755   0D99 51 01 00      add sp, 1
1756   0D9C             ; START RELATIONAL
1757   0D9C D7            push a
1758   0D9D 11            mov a, b
1759   0D9E 26 FF FF      mov b, $ffff
1760   0DA1 B0            cmp a, b
1761   0DA2 FD 72         sneq ; !=
1762   0DA4 E4            pop a
1763   0DA5             ; END RELATIONAL
1764   0DA5 FD A7         sand a, b ; &&
1765   0DA7 E4            pop a
1766   0DA8 C0 00 00      cmp b, 0
1767   0DAB C6 93 0F      je _while23_exit
1768   0DAE             _while23_block:
1769   0DAE             ;; input_buffer[i++] = input[k++]; 
1770   0DAE FA F5 FF      lea d, [bp + -11] ; $input_buffer
1771   0DB1 D7            push a
1772   0DB2 DA            push d
1773   0DB3 FA FF FF      lea d, [bp + -1] ; $i
1774   0DB6 2A            mov b, [d]
1775   0DB7 D8            push b
1776   0DB8 FD 77         inc b
1777   0DBA FA FF FF      lea d, [bp + -1] ; $i
1778   0DBD FD 43         mov [d], b
1779   0DBF E5            pop b
1780   0DC0 E7            pop d
1781   0DC1 5A            add d, b
1782   0DC2 E4            pop a
1783   0DC3 DA            push d
1784   0DC4 FA 05 00      lea d, [bp + 5] ; $input
1785   0DC7 FD 2A         mov d, [d]
1786   0DC9 D7            push a
1787   0DCA DA            push d
1788   0DCB FA FB FF      lea d, [bp + -5] ; $k
1789   0DCE 2A            mov b, [d]
1790   0DCF D8            push b
1791   0DD0 FD 77         inc b
1792   0DD2 FA FB FF      lea d, [bp + -5] ; $k
1793   0DD5 FD 43         mov [d], b
1794   0DD7 E5            pop b
1795   0DD8 E7            pop d
1796   0DD9 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1797   0DDD E4            pop a
1798   0DDE 32            mov bl, [d]
1799   0DDF A7 00         mov bh, 0
1800   0DE1 E7            pop d
1801   0DE2 FD 3E         mov [d], bl
1802   0DE4             ;; if (i == 4) { 
1803   0DE4             _if24_cond:
1804   0DE4 FA FF FF      lea d, [bp + -1] ; $i
1805   0DE7 2A            mov b, [d]
1806   0DE8             ; START RELATIONAL
1807   0DE8 D7            push a
1808   0DE9 11            mov a, b
1809   0DEA 26 04 00      mov b, $4
1810   0DED B0            cmp a, b
1811   0DEE FD 71         seq ; ==
1812   0DF0 E4            pop a
1813   0DF1             ; END RELATIONAL
1814   0DF1 C0 00 00      cmp b, 0
1815   0DF4 C6 90 0F      je _if24_exit
1816   0DF7             _if24_true:
1817   0DF7             ;; for (i = 0; i < 4; i++) { 
1818   0DF7             _for25_init:
1819   0DF7 FA FF FF      lea d, [bp + -1] ; $i
1820   0DFA DA            push d
1821   0DFB 26 00 00      mov b, $0
1822   0DFE E7            pop d
1823   0DFF FD 43         mov [d], b
1824   0E01             _for25_cond:
1825   0E01 FA FF FF      lea d, [bp + -1] ; $i
1826   0E04 2A            mov b, [d]
1827   0E05             ; START RELATIONAL
1828   0E05 D7            push a
1829   0E06 11            mov a, b
1830   0E07 26 04 00      mov b, $4
1831   0E0A B0            cmp a, b
1832   0E0B FD 73         slt ; <= (signed)
1833   0E0D E4            pop a
1834   0E0E             ; END RELATIONAL
1835   0E0E C0 00 00      cmp b, 0
1836   0E11 C6 4A 0E      je _for25_exit
1837   0E14             _for25_block:
1838   0E14             ;; input_buffer[i] = base64_char_value(input_buffer[i]); 
1839   0E14 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1840   0E17 D7            push a
1841   0E18 DA            push d
1842   0E19 FA FF FF      lea d, [bp + -1] ; $i
1843   0E1C 2A            mov b, [d]
1844   0E1D E7            pop d
1845   0E1E 5A            add d, b
1846   0E1F E4            pop a
1847   0E20 DA            push d
1848   0E21 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1849   0E24 D7            push a
1850   0E25 DA            push d
1851   0E26 FA FF FF      lea d, [bp + -1] ; $i
1852   0E29 2A            mov b, [d]
1853   0E2A E7            pop d
1854   0E2B 5A            add d, b
1855   0E2C E4            pop a
1856   0E2D 32            mov bl, [d]
1857   0E2E A7 00         mov bh, 0
1858   0E30 DD            push bl
1859   0E31 07 26 0C      call base64_char_value
1860   0E34 51 01 00      add sp, 1
1861   0E37 E7            pop d
1862   0E38 FD 3E         mov [d], bl
1863   0E3A             _for25_update:
1864   0E3A FA FF FF      lea d, [bp + -1] ; $i
1865   0E3D 2A            mov b, [d]
1866   0E3E D8            push b
1867   0E3F FD 77         inc b
1868   0E41 FA FF FF      lea d, [bp + -1] ; $i
1869   0E44 FD 43         mov [d], b
1870   0E46 E5            pop b
1871   0E47 0A 01 0E      jmp _for25_cond
1872   0E4A             _for25_exit:
1873   0E4A             ;; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
1874   0E4A FA F2 FF      lea d, [bp + -14] ; $output_buffer
1875   0E4D D7            push a
1876   0E4E DA            push d
1877   0E4F 26 00 00      mov b, $0
1878   0E52 E7            pop d
1879   0E53 5A            add d, b
1880   0E54 E4            pop a
1881   0E55 DA            push d
1882   0E56 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1883   0E59 D7            push a
1884   0E5A DA            push d
1885   0E5B 26 00 00      mov b, $0
1886   0E5E E7            pop d
1887   0E5F 5A            add d, b
1888   0E60 E4            pop a
1889   0E61 32            mov bl, [d]
1890   0E62 A7 00         mov bh, 0
1891   0E64             ; START SHIFT
1892   0E64 D7            push a
1893   0E65 11            mov a, b
1894   0E66 26 02 00      mov b, $2
1895   0E69 FD 39         mov c, b
1896   0E6B 9D            shl a, cl
1897   0E6C 27            mov b, a
1898   0E6D E4            pop a
1899   0E6E             ; END SHIFT
1900   0E6E             ; START TERMS
1901   0E6E D7            push a
1902   0E6F 11            mov a, b
1903   0E70 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1904   0E73 D7            push a
1905   0E74 DA            push d
1906   0E75 26 01 00      mov b, $1
1907   0E78 E7            pop d
1908   0E79 5A            add d, b
1909   0E7A E4            pop a
1910   0E7B 32            mov bl, [d]
1911   0E7C A7 00         mov bh, 0
1912   0E7E D7            push a
1913   0E7F 11            mov a, b
1914   0E80 26 30 00      mov b, $30
1915   0E83 86            and a, b ; &
1916   0E84 27            mov b, a
1917   0E85 E4            pop a
1918   0E86             ; START SHIFT
1919   0E86 D7            push a
1920   0E87 11            mov a, b
1921   0E88 26 04 00      mov b, $4
1922   0E8B FD 39         mov c, b
1923   0E8D A5            ashr a, cl
1924   0E8E 27            mov b, a
1925   0E8F E4            pop a
1926   0E90             ; END SHIFT
1927   0E90 56            add b, a
1928   0E91 E4            pop a
1929   0E92             ; END TERMS
1930   0E92 E7            pop d
1931   0E93 FD 3E         mov [d], bl
1932   0E95             ;; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
1933   0E95 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1934   0E98 D7            push a
1935   0E99 DA            push d
1936   0E9A 26 01 00      mov b, $1
1937   0E9D E7            pop d
1938   0E9E 5A            add d, b
1939   0E9F E4            pop a
1940   0EA0 DA            push d
1941   0EA1 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1942   0EA4 D7            push a
1943   0EA5 DA            push d
1944   0EA6 26 01 00      mov b, $1
1945   0EA9 E7            pop d
1946   0EAA 5A            add d, b
1947   0EAB E4            pop a
1948   0EAC 32            mov bl, [d]
1949   0EAD A7 00         mov bh, 0
1950   0EAF D7            push a
1951   0EB0 11            mov a, b
1952   0EB1 26 0F 00      mov b, $f
1953   0EB4 86            and a, b ; &
1954   0EB5 27            mov b, a
1955   0EB6 E4            pop a
1956   0EB7             ; START SHIFT
1957   0EB7 D7            push a
1958   0EB8 11            mov a, b
1959   0EB9 26 04 00      mov b, $4
1960   0EBC FD 39         mov c, b
1961   0EBE 9D            shl a, cl
1962   0EBF 27            mov b, a
1963   0EC0 E4            pop a
1964   0EC1             ; END SHIFT
1965   0EC1             ; START TERMS
1966   0EC1 D7            push a
1967   0EC2 11            mov a, b
1968   0EC3 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1969   0EC6 D7            push a
1970   0EC7 DA            push d
1971   0EC8 26 02 00      mov b, $2
1972   0ECB E7            pop d
1973   0ECC 5A            add d, b
1974   0ECD E4            pop a
1975   0ECE 32            mov bl, [d]
1976   0ECF A7 00         mov bh, 0
1977   0ED1 D7            push a
1978   0ED2 11            mov a, b
1979   0ED3 26 3C 00      mov b, $3c
1980   0ED6 86            and a, b ; &
1981   0ED7 27            mov b, a
1982   0ED8 E4            pop a
1983   0ED9             ; START SHIFT
1984   0ED9 D7            push a
1985   0EDA 11            mov a, b
1986   0EDB 26 02 00      mov b, $2
1987   0EDE FD 39         mov c, b
1988   0EE0 A5            ashr a, cl
1989   0EE1 27            mov b, a
1990   0EE2 E4            pop a
1991   0EE3             ; END SHIFT
1992   0EE3 56            add b, a
1993   0EE4 E4            pop a
1994   0EE5             ; END TERMS
1995   0EE5 E7            pop d
1996   0EE6 FD 3E         mov [d], bl
1997   0EE8             ;; output_buffer[2] = ((input_buffer[2] & 0x03) << 6) + input_buffer[3]; 
1998   0EE8 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1999   0EEB D7            push a
2000   0EEC DA            push d
2001   0EED 26 02 00      mov b, $2
2002   0EF0 E7            pop d
2003   0EF1 5A            add d, b
2004   0EF2 E4            pop a
2005   0EF3 DA            push d
2006   0EF4 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2007   0EF7 D7            push a
2008   0EF8 DA            push d
2009   0EF9 26 02 00      mov b, $2
2010   0EFC E7            pop d
2011   0EFD 5A            add d, b
2012   0EFE E4            pop a
2013   0EFF 32            mov bl, [d]
2014   0F00 A7 00         mov bh, 0
2015   0F02 D7            push a
2016   0F03 11            mov a, b
2017   0F04 26 03 00      mov b, $3
2018   0F07 86            and a, b ; &
2019   0F08 27            mov b, a
2020   0F09 E4            pop a
2021   0F0A             ; START SHIFT
2022   0F0A D7            push a
2023   0F0B 11            mov a, b
2024   0F0C 26 06 00      mov b, $6
2025   0F0F FD 39         mov c, b
2026   0F11 9D            shl a, cl
2027   0F12 27            mov b, a
2028   0F13 E4            pop a
2029   0F14             ; END SHIFT
2030   0F14             ; START TERMS
2031   0F14 D7            push a
2032   0F15 11            mov a, b
2033   0F16 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2034   0F19 D7            push a
2035   0F1A DA            push d
2036   0F1B 26 03 00      mov b, $3
2037   0F1E E7            pop d
2038   0F1F 5A            add d, b
2039   0F20 E4            pop a
2040   0F21 32            mov bl, [d]
2041   0F22 A7 00         mov bh, 0
2042   0F24 56            add b, a
2043   0F25 E4            pop a
2044   0F26             ; END TERMS
2045   0F26 E7            pop d
2046   0F27 FD 3E         mov [d], bl
2047   0F29             ;; for (i = 0; i < 3; i++) { 
2048   0F29             _for26_init:
2049   0F29 FA FF FF      lea d, [bp + -1] ; $i
2050   0F2C DA            push d
2051   0F2D 26 00 00      mov b, $0
2052   0F30 E7            pop d
2053   0F31 FD 43         mov [d], b
2054   0F33             _for26_cond:
2055   0F33 FA FF FF      lea d, [bp + -1] ; $i
2056   0F36 2A            mov b, [d]
2057   0F37             ; START RELATIONAL
2058   0F37 D7            push a
2059   0F38 11            mov a, b
2060   0F39 26 03 00      mov b, $3
2061   0F3C B0            cmp a, b
2062   0F3D FD 73         slt ; <= (signed)
2063   0F3F E4            pop a
2064   0F40             ; END RELATIONAL
2065   0F40 C0 00 00      cmp b, 0
2066   0F43 C6 83 0F      je _for26_exit
2067   0F46             _for26_block:
2068   0F46             ;; output[j++] = output_buffer[i]; 
2069   0F46 FA 07 00      lea d, [bp + 7] ; $output
2070   0F49 FD 2A         mov d, [d]
2071   0F4B D7            push a
2072   0F4C DA            push d
2073   0F4D FA FD FF      lea d, [bp + -3] ; $j
2074   0F50 2A            mov b, [d]
2075   0F51 D8            push b
2076   0F52 FD 77         inc b
2077   0F54 FA FD FF      lea d, [bp + -3] ; $j
2078   0F57 FD 43         mov [d], b
2079   0F59 E5            pop b
2080   0F5A E7            pop d
2081   0F5B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2082   0F5F E4            pop a
2083   0F60 DA            push d
2084   0F61 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2085   0F64 D7            push a
2086   0F65 DA            push d
2087   0F66 FA FF FF      lea d, [bp + -1] ; $i
2088   0F69 2A            mov b, [d]
2089   0F6A E7            pop d
2090   0F6B 5A            add d, b
2091   0F6C E4            pop a
2092   0F6D 32            mov bl, [d]
2093   0F6E A7 00         mov bh, 0
2094   0F70 E7            pop d
2095   0F71 FD 3E         mov [d], bl
2096   0F73             _for26_update:
2097   0F73 FA FF FF      lea d, [bp + -1] ; $i
2098   0F76 2A            mov b, [d]
2099   0F77 D8            push b
2100   0F78 FD 77         inc b
2101   0F7A FA FF FF      lea d, [bp + -1] ; $i
2102   0F7D FD 43         mov [d], b
2103   0F7F E5            pop b
2104   0F80 0A 33 0F      jmp _for26_cond
2105   0F83             _for26_exit:
2106   0F83             ;; i = 0; 
2107   0F83 FA FF FF      lea d, [bp + -1] ; $i
2108   0F86 DA            push d
2109   0F87 26 00 00      mov b, $0
2110   0F8A E7            pop d
2111   0F8B FD 43         mov [d], b
2112   0F8D 0A 90 0F      jmp _if24_exit
2113   0F90             _if24_exit:
2114   0F90 0A 52 0D      jmp _while23_cond
2115   0F93             _while23_exit:
2116   0F93             ;; if (i) { 
2117   0F93             _if27_cond:
2118   0F93 FA FF FF      lea d, [bp + -1] ; $i
2119   0F96 2A            mov b, [d]
2120   0F97 C0 00 00      cmp b, 0
2121   0F9A C6 35 11      je _if27_exit
2122   0F9D             _if27_true:
2123   0F9D             ;; for (k = i; k < 4; k++) { 
2124   0F9D             _for28_init:
2125   0F9D FA FB FF      lea d, [bp + -5] ; $k
2126   0FA0 DA            push d
2127   0FA1 FA FF FF      lea d, [bp + -1] ; $i
2128   0FA4 2A            mov b, [d]
2129   0FA5 E7            pop d
2130   0FA6 FD 43         mov [d], b
2131   0FA8             _for28_cond:
2132   0FA8 FA FB FF      lea d, [bp + -5] ; $k
2133   0FAB 2A            mov b, [d]
2134   0FAC             ; START RELATIONAL
2135   0FAC D7            push a
2136   0FAD 11            mov a, b
2137   0FAE 26 04 00      mov b, $4
2138   0FB1 B0            cmp a, b
2139   0FB2 FD 73         slt ; <= (signed)
2140   0FB4 E4            pop a
2141   0FB5             ; END RELATIONAL
2142   0FB5 C0 00 00      cmp b, 0
2143   0FB8 C6 DE 0F      je _for28_exit
2144   0FBB             _for28_block:
2145   0FBB             ;; input_buffer[k] = 0; 
2146   0FBB FA F5 FF      lea d, [bp + -11] ; $input_buffer
2147   0FBE D7            push a
2148   0FBF DA            push d
2149   0FC0 FA FB FF      lea d, [bp + -5] ; $k
2150   0FC3 2A            mov b, [d]
2151   0FC4 E7            pop d
2152   0FC5 5A            add d, b
2153   0FC6 E4            pop a
2154   0FC7 DA            push d
2155   0FC8 26 00 00      mov b, $0
2156   0FCB E7            pop d
2157   0FCC FD 3E         mov [d], bl
2158   0FCE             _for28_update:
2159   0FCE FA FB FF      lea d, [bp + -5] ; $k
2160   0FD1 2A            mov b, [d]
2161   0FD2 D8            push b
2162   0FD3 FD 77         inc b
2163   0FD5 FA FB FF      lea d, [bp + -5] ; $k
2164   0FD8 FD 43         mov [d], b
2165   0FDA E5            pop b
2166   0FDB 0A A8 0F      jmp _for28_cond
2167   0FDE             _for28_exit:
2168   0FDE             ;; for (k = 0; k < 4; k++) { 
2169   0FDE             _for29_init:
2170   0FDE FA FB FF      lea d, [bp + -5] ; $k
2171   0FE1 DA            push d
2172   0FE2 26 00 00      mov b, $0
2173   0FE5 E7            pop d
2174   0FE6 FD 43         mov [d], b
2175   0FE8             _for29_cond:
2176   0FE8 FA FB FF      lea d, [bp + -5] ; $k
2177   0FEB 2A            mov b, [d]
2178   0FEC             ; START RELATIONAL
2179   0FEC D7            push a
2180   0FED 11            mov a, b
2181   0FEE 26 04 00      mov b, $4
2182   0FF1 B0            cmp a, b
2183   0FF2 FD 73         slt ; <= (signed)
2184   0FF4 E4            pop a
2185   0FF5             ; END RELATIONAL
2186   0FF5 C0 00 00      cmp b, 0
2187   0FF8 C6 31 10      je _for29_exit
2188   0FFB             _for29_block:
2189   0FFB             ;; input_buffer[k] = base64_char_value(input_buffer[k]); 
2190   0FFB FA F5 FF      lea d, [bp + -11] ; $input_buffer
2191   0FFE D7            push a
2192   0FFF DA            push d
2193   1000 FA FB FF      lea d, [bp + -5] ; $k
2194   1003 2A            mov b, [d]
2195   1004 E7            pop d
2196   1005 5A            add d, b
2197   1006 E4            pop a
2198   1007 DA            push d
2199   1008 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2200   100B D7            push a
2201   100C DA            push d
2202   100D FA FB FF      lea d, [bp + -5] ; $k
2203   1010 2A            mov b, [d]
2204   1011 E7            pop d
2205   1012 5A            add d, b
2206   1013 E4            pop a
2207   1014 32            mov bl, [d]
2208   1015 A7 00         mov bh, 0
2209   1017 DD            push bl
2210   1018 07 26 0C      call base64_char_value
2211   101B 51 01 00      add sp, 1
2212   101E E7            pop d
2213   101F FD 3E         mov [d], bl
2214   1021             _for29_update:
2215   1021 FA FB FF      lea d, [bp + -5] ; $k
2216   1024 2A            mov b, [d]
2217   1025 D8            push b
2218   1026 FD 77         inc b
2219   1028 FA FB FF      lea d, [bp + -5] ; $k
2220   102B FD 43         mov [d], b
2221   102D E5            pop b
2222   102E 0A E8 0F      jmp _for29_cond
2223   1031             _for29_exit:
2224   1031             ;; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
2225   1031 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2226   1034 D7            push a
2227   1035 DA            push d
2228   1036 26 00 00      mov b, $0
2229   1039 E7            pop d
2230   103A 5A            add d, b
2231   103B E4            pop a
2232   103C DA            push d
2233   103D FA F5 FF      lea d, [bp + -11] ; $input_buffer
2234   1040 D7            push a
2235   1041 DA            push d
2236   1042 26 00 00      mov b, $0
2237   1045 E7            pop d
2238   1046 5A            add d, b
2239   1047 E4            pop a
2240   1048 32            mov bl, [d]
2241   1049 A7 00         mov bh, 0
2242   104B             ; START SHIFT
2243   104B D7            push a
2244   104C 11            mov a, b
2245   104D 26 02 00      mov b, $2
2246   1050 FD 39         mov c, b
2247   1052 9D            shl a, cl
2248   1053 27            mov b, a
2249   1054 E4            pop a
2250   1055             ; END SHIFT
2251   1055             ; START TERMS
2252   1055 D7            push a
2253   1056 11            mov a, b
2254   1057 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2255   105A D7            push a
2256   105B DA            push d
2257   105C 26 01 00      mov b, $1
2258   105F E7            pop d
2259   1060 5A            add d, b
2260   1061 E4            pop a
2261   1062 32            mov bl, [d]
2262   1063 A7 00         mov bh, 0
2263   1065 D7            push a
2264   1066 11            mov a, b
2265   1067 26 30 00      mov b, $30
2266   106A 86            and a, b ; &
2267   106B 27            mov b, a
2268   106C E4            pop a
2269   106D             ; START SHIFT
2270   106D D7            push a
2271   106E 11            mov a, b
2272   106F 26 04 00      mov b, $4
2273   1072 FD 39         mov c, b
2274   1074 A5            ashr a, cl
2275   1075 27            mov b, a
2276   1076 E4            pop a
2277   1077             ; END SHIFT
2278   1077 56            add b, a
2279   1078 E4            pop a
2280   1079             ; END TERMS
2281   1079 E7            pop d
2282   107A FD 3E         mov [d], bl
2283   107C             ;; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
2284   107C FA F2 FF      lea d, [bp + -14] ; $output_buffer
2285   107F D7            push a
2286   1080 DA            push d
2287   1081 26 01 00      mov b, $1
2288   1084 E7            pop d
2289   1085 5A            add d, b
2290   1086 E4            pop a
2291   1087 DA            push d
2292   1088 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2293   108B D7            push a
2294   108C DA            push d
2295   108D 26 01 00      mov b, $1
2296   1090 E7            pop d
2297   1091 5A            add d, b
2298   1092 E4            pop a
2299   1093 32            mov bl, [d]
2300   1094 A7 00         mov bh, 0
2301   1096 D7            push a
2302   1097 11            mov a, b
2303   1098 26 0F 00      mov b, $f
2304   109B 86            and a, b ; &
2305   109C 27            mov b, a
2306   109D E4            pop a
2307   109E             ; START SHIFT
2308   109E D7            push a
2309   109F 11            mov a, b
2310   10A0 26 04 00      mov b, $4
2311   10A3 FD 39         mov c, b
2312   10A5 9D            shl a, cl
2313   10A6 27            mov b, a
2314   10A7 E4            pop a
2315   10A8             ; END SHIFT
2316   10A8             ; START TERMS
2317   10A8 D7            push a
2318   10A9 11            mov a, b
2319   10AA FA F5 FF      lea d, [bp + -11] ; $input_buffer
2320   10AD D7            push a
2321   10AE DA            push d
2322   10AF 26 02 00      mov b, $2
2323   10B2 E7            pop d
2324   10B3 5A            add d, b
2325   10B4 E4            pop a
2326   10B5 32            mov bl, [d]
2327   10B6 A7 00         mov bh, 0
2328   10B8 D7            push a
2329   10B9 11            mov a, b
2330   10BA 26 3C 00      mov b, $3c
2331   10BD 86            and a, b ; &
2332   10BE 27            mov b, a
2333   10BF E4            pop a
2334   10C0             ; START SHIFT
2335   10C0 D7            push a
2336   10C1 11            mov a, b
2337   10C2 26 02 00      mov b, $2
2338   10C5 FD 39         mov c, b
2339   10C7 A5            ashr a, cl
2340   10C8 27            mov b, a
2341   10C9 E4            pop a
2342   10CA             ; END SHIFT
2343   10CA 56            add b, a
2344   10CB E4            pop a
2345   10CC             ; END TERMS
2346   10CC E7            pop d
2347   10CD FD 3E         mov [d], bl
2348   10CF             ;; for (k = 0; k < i - 1; k++) { 
2349   10CF             _for30_init:
2350   10CF FA FB FF      lea d, [bp + -5] ; $k
2351   10D2 DA            push d
2352   10D3 26 00 00      mov b, $0
2353   10D6 E7            pop d
2354   10D7 FD 43         mov [d], b
2355   10D9             _for30_cond:
2356   10D9 FA FB FF      lea d, [bp + -5] ; $k
2357   10DC 2A            mov b, [d]
2358   10DD             ; START RELATIONAL
2359   10DD D7            push a
2360   10DE 11            mov a, b
2361   10DF FA FF FF      lea d, [bp + -1] ; $i
2362   10E2 2A            mov b, [d]
2363   10E3             ; START TERMS
2364   10E3 D7            push a
2365   10E4 11            mov a, b
2366   10E5 26 01 00      mov b, $1
2367   10E8 60            sub a, b
2368   10E9 27            mov b, a
2369   10EA E4            pop a
2370   10EB             ; END TERMS
2371   10EB B0            cmp a, b
2372   10EC FD 73         slt ; <= (signed)
2373   10EE E4            pop a
2374   10EF             ; END RELATIONAL
2375   10EF C0 00 00      cmp b, 0
2376   10F2 C6 32 11      je _for30_exit
2377   10F5             _for30_block:
2378   10F5             ;; output[j++] = output_buffer[k]; 
2379   10F5 FA 07 00      lea d, [bp + 7] ; $output
2380   10F8 FD 2A         mov d, [d]
2381   10FA D7            push a
2382   10FB DA            push d
2383   10FC FA FD FF      lea d, [bp + -3] ; $j
2384   10FF 2A            mov b, [d]
2385   1100 D8            push b
2386   1101 FD 77         inc b
2387   1103 FA FD FF      lea d, [bp + -3] ; $j
2388   1106 FD 43         mov [d], b
2389   1108 E5            pop b
2390   1109 E7            pop d
2391   110A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2392   110E E4            pop a
2393   110F DA            push d
2394   1110 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2395   1113 D7            push a
2396   1114 DA            push d
2397   1115 FA FB FF      lea d, [bp + -5] ; $k
2398   1118 2A            mov b, [d]
2399   1119 E7            pop d
2400   111A 5A            add d, b
2401   111B E4            pop a
2402   111C 32            mov bl, [d]
2403   111D A7 00         mov bh, 0
2404   111F E7            pop d
2405   1120 FD 3E         mov [d], bl
2406   1122             _for30_update:
2407   1122 FA FB FF      lea d, [bp + -5] ; $k
2408   1125 2A            mov b, [d]
2409   1126 D8            push b
2410   1127 FD 77         inc b
2411   1129 FA FB FF      lea d, [bp + -5] ; $k
2412   112C FD 43         mov [d], b
2413   112E E5            pop b
2414   112F 0A D9 10      jmp _for30_cond
2415   1132             _for30_exit:
2416   1132 0A 35 11      jmp _if27_exit
2417   1135             _if27_exit:
2418   1135             ;; output[j] = '\0'; 
2419   1135 FA 07 00      lea d, [bp + 7] ; $output
2420   1138 FD 2A         mov d, [d]
2421   113A D7            push a
2422   113B DA            push d
2423   113C FA FD FF      lea d, [bp + -3] ; $j
2424   113F 2A            mov b, [d]
2425   1140 E7            pop d
2426   1141 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2427   1145 E4            pop a
2428   1146 DA            push d
2429   1147 26 00 00      mov b, $0
2430   114A E7            pop d
2431   114B FD 3E         mov [d], bl
2432   114D F9            leave
2433   114E 09            ret
2434   114F             
2435   114F             va_start:
2436   114F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2437   1152             ;; argp->current_arg = first_fixed_param + sizeof(first_fixed_param); 
2438   1152 FA 05 00      lea d, [bp + 5] ; $argp
2439   1155 FD 2A         mov d, [d]
2440   1157 58 00 00      add d, 0
2441   115A DA            push d
2442   115B FA 07 00      lea d, [bp + 7] ; $first_fixed_param
2443   115E 2A            mov b, [d]
2444   115F             ; START TERMS
2445   115F D7            push a
2446   1160 11            mov a, b
2447   1161 26 02 00      mov b, 2
2448   1164 56            add b, a
2449   1165 E4            pop a
2450   1166             ; END TERMS
2451   1166 E7            pop d
2452   1167 FD 43         mov [d], b
2453   1169 F9            leave
2454   116A 09            ret
2455   116B             
2456   116B             va_arg:
2457   116B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2458   116E             ; $p 
2459   116E 52 02 00      sub sp, 2
2460   1171             ;; p = argp->current_arg; 
2461   1171 FA FF FF      lea d, [bp + -1] ; $p
2462   1174 DA            push d
2463   1175 FA 05 00      lea d, [bp + 5] ; $argp
2464   1178 FD 2A         mov d, [d]
2465   117A 58 00 00      add d, 0
2466   117D 2A            mov b, [d]
2467   117E E7            pop d
2468   117F FD 43         mov [d], b
2469   1181             ;; argp->current_arg = argp->current_arg + size; 
2470   1181 FA 05 00      lea d, [bp + 5] ; $argp
2471   1184 FD 2A         mov d, [d]
2472   1186 58 00 00      add d, 0
2473   1189 DA            push d
2474   118A FA 05 00      lea d, [bp + 5] ; $argp
2475   118D FD 2A         mov d, [d]
2476   118F 58 00 00      add d, 0
2477   1192 2A            mov b, [d]
2478   1193             ; START TERMS
2479   1193 D7            push a
2480   1194 11            mov a, b
2481   1195 FA 07 00      lea d, [bp + 7] ; $size
2482   1198 2A            mov b, [d]
2483   1199 56            add b, a
2484   119A E4            pop a
2485   119B             ; END TERMS
2486   119B E7            pop d
2487   119C FD 43         mov [d], b
2488   119E             ;; return p; 
2489   119E FA FF FF      lea d, [bp + -1] ; $p
2490   11A1 2A            mov b, [d]
2491   11A2 F9            leave
2492   11A3 09            ret
2493   11A4             
2494   11A4             va_end:
2495   11A4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2496   11A7             ;; argp->current_arg =   0   ; 
2497   11A7 FA 05 00      lea d, [bp + 5] ; $argp
2498   11AA FD 2A         mov d, [d]
2499   11AC 58 00 00      add d, 0
2500   11AF DA            push d
2501   11B0 26 00 00      mov b, $0
2502   11B3 E7            pop d
2503   11B4 FD 43         mov [d], b
2504   11B6 F9            leave
2505   11B7 09            ret
2506   11B8             
2507   11B8             scanf:
2508   11B8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2509   11BB             ; $p 
2510   11BB             ; $format_p 
2511   11BB             ; $c 
2512   11BB             ; $i 
2513   11BB             ; $input_string 
2514   11BB 52 07 02      sub sp, 519
2515   11BE             ;; format_p = format; 
2516   11BE FA FD FF      lea d, [bp + -3] ; $format_p
2517   11C1 DA            push d
2518   11C2 FA 05 00      lea d, [bp + 5] ; $format
2519   11C5 2A            mov b, [d]
2520   11C6 E7            pop d
2521   11C7 FD 43         mov [d], b
2522   11C9             ;; p = &format + 2; 
2523   11C9 FA FF FF      lea d, [bp + -1] ; $p
2524   11CC DA            push d
2525   11CD FA 05 00      lea d, [bp + 5] ; $format
2526   11D0 2D            mov b, d
2527   11D1             ; START TERMS
2528   11D1 D7            push a
2529   11D2 11            mov a, b
2530   11D3 26 02 00      mov b, $2
2531   11D6 56            add b, a
2532   11D7 E4            pop a
2533   11D8             ; END TERMS
2534   11D8 E7            pop d
2535   11D9 FD 43         mov [d], b
2536   11DB             ;; for(;;){ 
2537   11DB             _for31_init:
2538   11DB             _for31_cond:
2539   11DB             _for31_block:
2540   11DB             ;; if(!*format_p) break; 
2541   11DB             _if32_cond:
2542   11DB FA FD FF      lea d, [bp + -3] ; $format_p
2543   11DE 2A            mov b, [d]
2544   11DF 74            mov d, b
2545   11E0 32            mov bl, [d]
2546   11E1 A7 00         mov bh, 0
2547   11E3 C0 00 00      cmp b, 0
2548   11E6 FD 71         seq ; !
2549   11E8 C0 00 00      cmp b, 0
2550   11EB C6 F4 11      je _if32_else
2551   11EE             _if32_true:
2552   11EE             ;; break; 
2553   11EE 0A F1 13      jmp _for31_exit ; for break
2554   11F1 0A EE 13      jmp _if32_exit
2555   11F4             _if32_else:
2556   11F4             ;; if(*format_p == '%'){ 
2557   11F4             _if33_cond:
2558   11F4 FA FD FF      lea d, [bp + -3] ; $format_p
2559   11F7 2A            mov b, [d]
2560   11F8 74            mov d, b
2561   11F9 32            mov bl, [d]
2562   11FA A7 00         mov bh, 0
2563   11FC             ; START RELATIONAL
2564   11FC D7            push a
2565   11FD 11            mov a, b
2566   11FE 26 25 00      mov b, $25
2567   1201 B0            cmp a, b
2568   1202 FD 71         seq ; ==
2569   1204 E4            pop a
2570   1205             ; END RELATIONAL
2571   1205 C0 00 00      cmp b, 0
2572   1208 C6 D2 13      je _if33_else
2573   120B             _if33_true:
2574   120B             ;; format_p++; 
2575   120B FA FD FF      lea d, [bp + -3] ; $format_p
2576   120E 2A            mov b, [d]
2577   120F D8            push b
2578   1210 FD 77         inc b
2579   1212 FA FD FF      lea d, [bp + -3] ; $format_p
2580   1215 FD 43         mov [d], b
2581   1217 E5            pop b
2582   1218             ;; switch(*format_p){ 
2583   1218             _switch34_expr:
2584   1218 FA FD FF      lea d, [bp + -3] ; $format_p
2585   121B 2A            mov b, [d]
2586   121C 74            mov d, b
2587   121D 32            mov bl, [d]
2588   121E A7 00         mov bh, 0
2589   1220             _switch34_comparisons:
2590   1220 C1 6C         cmp bl, $6c
2591   1222 C6 4E 12      je _switch34_case0
2592   1225 C1 4C         cmp bl, $4c
2593   1227 C6 4E 12      je _switch34_case1
2594   122A C1 64         cmp bl, $64
2595   122C C6 E0 12      je _switch34_case2
2596   122F C1 69         cmp bl, $69
2597   1231 C6 E0 12      je _switch34_case3
2598   1234 C1 75         cmp bl, $75
2599   1236 C6 0D 13      je _switch34_case4
2600   1239 C1 78         cmp bl, $78
2601   123B C6 3A 13      je _switch34_case5
2602   123E C1 63         cmp bl, $63
2603   1240 C6 4F 13      je _switch34_case6
2604   1243 C1 73         cmp bl, $73
2605   1245 C6 7E 13      je _switch34_case7
2606   1248 0A B6 13      jmp _switch34_default
2607   124B 0A C2 13      jmp _switch34_exit
2608   124E             _switch34_case0:
2609   124E             _switch34_case1:
2610   124E             ;; format_p++; 
2611   124E FA FD FF      lea d, [bp + -3] ; $format_p
2612   1251 2A            mov b, [d]
2613   1252 D8            push b
2614   1253 FD 77         inc b
2615   1255 FA FD FF      lea d, [bp + -3] ; $format_p
2616   1258 FD 43         mov [d], b
2617   125A E5            pop b
2618   125B             ;; if(*format_p == 'd' || *format_p == 'i'); 
2619   125B             _if35_cond:
2620   125B FA FD FF      lea d, [bp + -3] ; $format_p
2621   125E 2A            mov b, [d]
2622   125F 74            mov d, b
2623   1260 32            mov bl, [d]
2624   1261 A7 00         mov bh, 0
2625   1263             ; START RELATIONAL
2626   1263 D7            push a
2627   1264 11            mov a, b
2628   1265 26 64 00      mov b, $64
2629   1268 B0            cmp a, b
2630   1269 FD 71         seq ; ==
2631   126B E4            pop a
2632   126C             ; END RELATIONAL
2633   126C D7            push a
2634   126D 11            mov a, b
2635   126E FA FD FF      lea d, [bp + -3] ; $format_p
2636   1271 2A            mov b, [d]
2637   1272 74            mov d, b
2638   1273 32            mov bl, [d]
2639   1274 A7 00         mov bh, 0
2640   1276             ; START RELATIONAL
2641   1276 D7            push a
2642   1277 11            mov a, b
2643   1278 26 69 00      mov b, $69
2644   127B B0            cmp a, b
2645   127C FD 71         seq ; ==
2646   127E E4            pop a
2647   127F             ; END RELATIONAL
2648   127F FD A8         sor a, b ; ||
2649   1281 E4            pop a
2650   1282 C0 00 00      cmp b, 0
2651   1285 C6 8B 12      je _if35_else
2652   1288             _if35_true:
2653   1288             ;; ; 
2654   1288 0A CB 12      jmp _if35_exit
2655   128B             _if35_else:
2656   128B             ;; if(*format_p == 'u'); 
2657   128B             _if36_cond:
2658   128B FA FD FF      lea d, [bp + -3] ; $format_p
2659   128E 2A            mov b, [d]
2660   128F 74            mov d, b
2661   1290 32            mov bl, [d]
2662   1291 A7 00         mov bh, 0
2663   1293             ; START RELATIONAL
2664   1293 D7            push a
2665   1294 11            mov a, b
2666   1295 26 75 00      mov b, $75
2667   1298 B0            cmp a, b
2668   1299 FD 71         seq ; ==
2669   129B E4            pop a
2670   129C             ; END RELATIONAL
2671   129C C0 00 00      cmp b, 0
2672   129F C6 A5 12      je _if36_else
2673   12A2             _if36_true:
2674   12A2             ;; ; 
2675   12A2 0A CB 12      jmp _if36_exit
2676   12A5             _if36_else:
2677   12A5             ;; if(*format_p == 'x'); 
2678   12A5             _if37_cond:
2679   12A5 FA FD FF      lea d, [bp + -3] ; $format_p
2680   12A8 2A            mov b, [d]
2681   12A9 74            mov d, b
2682   12AA 32            mov bl, [d]
2683   12AB A7 00         mov bh, 0
2684   12AD             ; START RELATIONAL
2685   12AD D7            push a
2686   12AE 11            mov a, b
2687   12AF 26 78 00      mov b, $78
2688   12B2 B0            cmp a, b
2689   12B3 FD 71         seq ; ==
2690   12B5 E4            pop a
2691   12B6             ; END RELATIONAL
2692   12B6 C0 00 00      cmp b, 0
2693   12B9 C6 BF 12      je _if37_else
2694   12BC             _if37_true:
2695   12BC             ;; ; 
2696   12BC 0A CB 12      jmp _if37_exit
2697   12BF             _if37_else:
2698   12BF             ;; err("Unexpected format in printf."); 
2699   12BF 26 A3 28      mov b, __s1 ; "Unexpected format in printf."
2700   12C2 FD AB         swp b
2701   12C4 D8            push b
2702   12C5 07 3A 16      call err
2703   12C8 51 02 00      add sp, 2
2704   12CB             _if37_exit:
2705   12CB             _if36_exit:
2706   12CB             _if35_exit:
2707   12CB             ;; p = p + 4; 
2708   12CB FA FF FF      lea d, [bp + -1] ; $p
2709   12CE DA            push d
2710   12CF FA FF FF      lea d, [bp + -1] ; $p
2711   12D2 2A            mov b, [d]
2712   12D3             ; START TERMS
2713   12D3 D7            push a
2714   12D4 11            mov a, b
2715   12D5 26 04 00      mov b, $4
2716   12D8 56            add b, a
2717   12D9 E4            pop a
2718   12DA             ; END TERMS
2719   12DA E7            pop d
2720   12DB FD 43         mov [d], b
2721   12DD             ;; break; 
2722   12DD 0A C2 13      jmp _switch34_exit ; case break
2723   12E0             _switch34_case2:
2724   12E0             _switch34_case3:
2725   12E0             ;; i = scann(); 
2726   12E0 FA FA FF      lea d, [bp + -6] ; $i
2727   12E3 DA            push d
2728   12E4 07 08 1C      call scann
2729   12E7 E7            pop d
2730   12E8 FD 43         mov [d], b
2731   12EA             ;; **(int **)p = i; 
2732   12EA FA FF FF      lea d, [bp + -1] ; $p
2733   12ED 2A            mov b, [d]
2734   12EE 74            mov d, b
2735   12EF 2A            mov b, [d]
2736   12F0 D8            push b
2737   12F1 FA FA FF      lea d, [bp + -6] ; $i
2738   12F4 2A            mov b, [d]
2739   12F5 E7            pop d
2740   12F6 FD 43         mov [d], b
2741   12F8             ;; p = p + 2; 
2742   12F8 FA FF FF      lea d, [bp + -1] ; $p
2743   12FB DA            push d
2744   12FC FA FF FF      lea d, [bp + -1] ; $p
2745   12FF 2A            mov b, [d]
2746   1300             ; START TERMS
2747   1300 D7            push a
2748   1301 11            mov a, b
2749   1302 26 02 00      mov b, $2
2750   1305 56            add b, a
2751   1306 E4            pop a
2752   1307             ; END TERMS
2753   1307 E7            pop d
2754   1308 FD 43         mov [d], b
2755   130A             ;; break; 
2756   130A 0A C2 13      jmp _switch34_exit ; case break
2757   130D             _switch34_case4:
2758   130D             ;; i = scann(); 
2759   130D FA FA FF      lea d, [bp + -6] ; $i
2760   1310 DA            push d
2761   1311 07 08 1C      call scann
2762   1314 E7            pop d
2763   1315 FD 43         mov [d], b
2764   1317             ;; **(int **)p = i; 
2765   1317 FA FF FF      lea d, [bp + -1] ; $p
2766   131A 2A            mov b, [d]
2767   131B 74            mov d, b
2768   131C 2A            mov b, [d]
2769   131D D8            push b
2770   131E FA FA FF      lea d, [bp + -6] ; $i
2771   1321 2A            mov b, [d]
2772   1322 E7            pop d
2773   1323 FD 43         mov [d], b
2774   1325             ;; p = p + 2; 
2775   1325 FA FF FF      lea d, [bp + -1] ; $p
2776   1328 DA            push d
2777   1329 FA FF FF      lea d, [bp + -1] ; $p
2778   132C 2A            mov b, [d]
2779   132D             ; START TERMS
2780   132D D7            push a
2781   132E 11            mov a, b
2782   132F 26 02 00      mov b, $2
2783   1332 56            add b, a
2784   1333 E4            pop a
2785   1334             ; END TERMS
2786   1334 E7            pop d
2787   1335 FD 43         mov [d], b
2788   1337             ;; break; 
2789   1337 0A C2 13      jmp _switch34_exit ; case break
2790   133A             _switch34_case5:
2791   133A             ;; p = p + 2; 
2792   133A FA FF FF      lea d, [bp + -1] ; $p
2793   133D DA            push d
2794   133E FA FF FF      lea d, [bp + -1] ; $p
2795   1341 2A            mov b, [d]
2796   1342             ; START TERMS
2797   1342 D7            push a
2798   1343 11            mov a, b
2799   1344 26 02 00      mov b, $2
2800   1347 56            add b, a
2801   1348 E4            pop a
2802   1349             ; END TERMS
2803   1349 E7            pop d
2804   134A FD 43         mov [d], b
2805   134C             ;; break; 
2806   134C 0A C2 13      jmp _switch34_exit ; case break
2807   134F             _switch34_case6:
2808   134F             ;; c = getchar(); 
2809   134F FA FC FF      lea d, [bp + -4] ; $c
2810   1352 DA            push d
2811   1353 07 F2 1B      call getchar
2812   1356 E7            pop d
2813   1357 FD 3E         mov [d], bl
2814   1359             ;; **(char **)p = c; 
2815   1359 FA FF FF      lea d, [bp + -1] ; $p
2816   135C 2A            mov b, [d]
2817   135D 74            mov d, b
2818   135E 2A            mov b, [d]
2819   135F D8            push b
2820   1360 FA FC FF      lea d, [bp + -4] ; $c
2821   1363 32            mov bl, [d]
2822   1364 A7 00         mov bh, 0
2823   1366 E7            pop d
2824   1367 FD 43         mov [d], b
2825   1369             ;; p = p + 2; 
2826   1369 FA FF FF      lea d, [bp + -1] ; $p
2827   136C DA            push d
2828   136D FA FF FF      lea d, [bp + -1] ; $p
2829   1370 2A            mov b, [d]
2830   1371             ; START TERMS
2831   1371 D7            push a
2832   1372 11            mov a, b
2833   1373 26 02 00      mov b, $2
2834   1376 56            add b, a
2835   1377 E4            pop a
2836   1378             ; END TERMS
2837   1378 E7            pop d
2838   1379 FD 43         mov [d], b
2839   137B             ;; break; 
2840   137B 0A C2 13      jmp _switch34_exit ; case break
2841   137E             _switch34_case7:
2842   137E             ;; gets(input_string); 
2843   137E FA FA FD      lea d, [bp + -518] ; $input_string
2844   1381 2D            mov b, d
2845   1382 FD AB         swp b
2846   1384 D8            push b
2847   1385 07 BC 17      call gets
2848   1388 51 02 00      add sp, 2
2849   138B             ;; strcpy(*(char **)p, input_string); 
2850   138B FA FA FD      lea d, [bp + -518] ; $input_string
2851   138E 2D            mov b, d
2852   138F FD AB         swp b
2853   1391 D8            push b
2854   1392 FA FF FF      lea d, [bp + -1] ; $p
2855   1395 2A            mov b, [d]
2856   1396 74            mov d, b
2857   1397 2A            mov b, [d]
2858   1398 FD AB         swp b
2859   139A D8            push b
2860   139B 07 16 05      call strcpy
2861   139E 51 04 00      add sp, 4
2862   13A1             ;; p = p + 2; 
2863   13A1 FA FF FF      lea d, [bp + -1] ; $p
2864   13A4 DA            push d
2865   13A5 FA FF FF      lea d, [bp + -1] ; $p
2866   13A8 2A            mov b, [d]
2867   13A9             ; START TERMS
2868   13A9 D7            push a
2869   13AA 11            mov a, b
2870   13AB 26 02 00      mov b, $2
2871   13AE 56            add b, a
2872   13AF E4            pop a
2873   13B0             ; END TERMS
2874   13B0 E7            pop d
2875   13B1 FD 43         mov [d], b
2876   13B3             ;; break; 
2877   13B3 0A C2 13      jmp _switch34_exit ; case break
2878   13B6             _switch34_default:
2879   13B6             ;; print("Error: Unknown argument type.\n"); 
2880   13B6 26 C0 28      mov b, __s2 ; "Error: Unknown argument type.\n"
2881   13B9 FD AB         swp b
2882   13BB D8            push b
2883   13BC 07 2D 1C      call print
2884   13BF 51 02 00      add sp, 2
2885   13C2             _switch34_exit:
2886   13C2             ;; format_p++; 
2887   13C2 FA FD FF      lea d, [bp + -3] ; $format_p
2888   13C5 2A            mov b, [d]
2889   13C6 D8            push b
2890   13C7 FD 77         inc b
2891   13C9 FA FD FF      lea d, [bp + -3] ; $format_p
2892   13CC FD 43         mov [d], b
2893   13CE E5            pop b
2894   13CF 0A EE 13      jmp _if33_exit
2895   13D2             _if33_else:
2896   13D2             ;; putchar(*format_p); 
2897   13D2 FA FD FF      lea d, [bp + -3] ; $format_p
2898   13D5 2A            mov b, [d]
2899   13D6 74            mov d, b
2900   13D7 32            mov bl, [d]
2901   13D8 A7 00         mov bh, 0
2902   13DA DD            push bl
2903   13DB 07 E5 1B      call putchar
2904   13DE 51 01 00      add sp, 1
2905   13E1             ;; format_p++; 
2906   13E1 FA FD FF      lea d, [bp + -3] ; $format_p
2907   13E4 2A            mov b, [d]
2908   13E5 D8            push b
2909   13E6 FD 77         inc b
2910   13E8 FA FD FF      lea d, [bp + -3] ; $format_p
2911   13EB FD 43         mov [d], b
2912   13ED E5            pop b
2913   13EE             _if33_exit:
2914   13EE             _if32_exit:
2915   13EE             _for31_update:
2916   13EE 0A DB 11      jmp _for31_cond
2917   13F1             _for31_exit:
2918   13F1 F9            leave
2919   13F2 09            ret
2920   13F3             
2921   13F3             printf:
2922   13F3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2923   13F6             ; $p 
2924   13F6             ; $format_p 
2925   13F6 52 04 00      sub sp, 4
2926   13F9             ;; format_p = format; 
2927   13F9 FA FD FF      lea d, [bp + -3] ; $format_p
2928   13FC DA            push d
2929   13FD FA 05 00      lea d, [bp + 5] ; $format
2930   1400 2A            mov b, [d]
2931   1401 E7            pop d
2932   1402 FD 43         mov [d], b
2933   1404             ;; p = &format + 2; 
2934   1404 FA FF FF      lea d, [bp + -1] ; $p
2935   1407 DA            push d
2936   1408 FA 05 00      lea d, [bp + 5] ; $format
2937   140B 2D            mov b, d
2938   140C             ; START TERMS
2939   140C D7            push a
2940   140D 11            mov a, b
2941   140E 26 02 00      mov b, $2
2942   1411 56            add b, a
2943   1412 E4            pop a
2944   1413             ; END TERMS
2945   1413 E7            pop d
2946   1414 FD 43         mov [d], b
2947   1416             ;; for(;;){ 
2948   1416             _for38_init:
2949   1416             _for38_cond:
2950   1416             _for38_block:
2951   1416             ;; if(!*format_p) break; 
2952   1416             _if39_cond:
2953   1416 FA FD FF      lea d, [bp + -3] ; $format_p
2954   1419 2A            mov b, [d]
2955   141A 74            mov d, b
2956   141B 32            mov bl, [d]
2957   141C A7 00         mov bh, 0
2958   141E C0 00 00      cmp b, 0
2959   1421 FD 71         seq ; !
2960   1423 C0 00 00      cmp b, 0
2961   1426 C6 2F 14      je _if39_else
2962   1429             _if39_true:
2963   1429             ;; break; 
2964   1429 0A 38 16      jmp _for38_exit ; for break
2965   142C 0A 35 16      jmp _if39_exit
2966   142F             _if39_else:
2967   142F             ;; if(*format_p == '%'){ 
2968   142F             _if40_cond:
2969   142F FA FD FF      lea d, [bp + -3] ; $format_p
2970   1432 2A            mov b, [d]
2971   1433 74            mov d, b
2972   1434 32            mov bl, [d]
2973   1435 A7 00         mov bh, 0
2974   1437             ; START RELATIONAL
2975   1437 D7            push a
2976   1438 11            mov a, b
2977   1439 26 25 00      mov b, $25
2978   143C B0            cmp a, b
2979   143D FD 71         seq ; ==
2980   143F E4            pop a
2981   1440             ; END RELATIONAL
2982   1440 C0 00 00      cmp b, 0
2983   1443 C6 19 16      je _if40_else
2984   1446             _if40_true:
2985   1446             ;; format_p++; 
2986   1446 FA FD FF      lea d, [bp + -3] ; $format_p
2987   1449 2A            mov b, [d]
2988   144A D8            push b
2989   144B FD 77         inc b
2990   144D FA FD FF      lea d, [bp + -3] ; $format_p
2991   1450 FD 43         mov [d], b
2992   1452 E5            pop b
2993   1453             ;; switch(*format_p){ 
2994   1453             _switch41_expr:
2995   1453 FA FD FF      lea d, [bp + -3] ; $format_p
2996   1456 2A            mov b, [d]
2997   1457 74            mov d, b
2998   1458 32            mov bl, [d]
2999   1459 A7 00         mov bh, 0
3000   145B             _switch41_comparisons:
3001   145B C1 6C         cmp bl, $6c
3002   145D C6 89 14      je _switch41_case0
3003   1460 C1 4C         cmp bl, $4c
3004   1462 C6 89 14      je _switch41_case1
3005   1465 C1 64         cmp bl, $64
3006   1467 C6 59 15      je _switch41_case2
3007   146A C1 69         cmp bl, $69
3008   146C C6 59 15      je _switch41_case3
3009   146F C1 75         cmp bl, $75
3010   1471 C6 7D 15      je _switch41_case4
3011   1474 C1 78         cmp bl, $78
3012   1476 C6 A1 15      je _switch41_case5
3013   1479 C1 63         cmp bl, $63
3014   147B C6 BF 15      je _switch41_case6
3015   147E C1 73         cmp bl, $73
3016   1480 C6 DE 15      je _switch41_case7
3017   1483 0A FD 15      jmp _switch41_default
3018   1486 0A 09 16      jmp _switch41_exit
3019   1489             _switch41_case0:
3020   1489             _switch41_case1:
3021   1489             ;; format_p++; 
3022   1489 FA FD FF      lea d, [bp + -3] ; $format_p
3023   148C 2A            mov b, [d]
3024   148D D8            push b
3025   148E FD 77         inc b
3026   1490 FA FD FF      lea d, [bp + -3] ; $format_p
3027   1493 FD 43         mov [d], b
3028   1495 E5            pop b
3029   1496             ;; if(*format_p == 'd' || *format_p == 'i') 
3030   1496             _if42_cond:
3031   1496 FA FD FF      lea d, [bp + -3] ; $format_p
3032   1499 2A            mov b, [d]
3033   149A 74            mov d, b
3034   149B 32            mov bl, [d]
3035   149C A7 00         mov bh, 0
3036   149E             ; START RELATIONAL
3037   149E D7            push a
3038   149F 11            mov a, b
3039   14A0 26 64 00      mov b, $64
3040   14A3 B0            cmp a, b
3041   14A4 FD 71         seq ; ==
3042   14A6 E4            pop a
3043   14A7             ; END RELATIONAL
3044   14A7 D7            push a
3045   14A8 11            mov a, b
3046   14A9 FA FD FF      lea d, [bp + -3] ; $format_p
3047   14AC 2A            mov b, [d]
3048   14AD 74            mov d, b
3049   14AE 32            mov bl, [d]
3050   14AF A7 00         mov bh, 0
3051   14B1             ; START RELATIONAL
3052   14B1 D7            push a
3053   14B2 11            mov a, b
3054   14B3 26 69 00      mov b, $69
3055   14B6 B0            cmp a, b
3056   14B7 FD 71         seq ; ==
3057   14B9 E4            pop a
3058   14BA             ; END RELATIONAL
3059   14BA FD A8         sor a, b ; ||
3060   14BC E4            pop a
3061   14BD C0 00 00      cmp b, 0
3062   14C0 C6 D7 14      je _if42_else
3063   14C3             _if42_true:
3064   14C3             ;; print_signed_long(*(long *)p); 
3065   14C3 FD 79         mov g, b
3066   14C5 28            mov b, c
3067   14C6 FD AB         swp b
3068   14C8 D8            push b
3069   14C9 FD 27         mov b, g
3070   14CB FD AB         swp b
3071   14CD D8            push b
3072   14CE 07 C6 18      call print_signed_long
3073   14D1 51 04 00      add sp, 4
3074   14D4 0A 44 15      jmp _if42_exit
3075   14D7             _if42_else:
3076   14D7             ;; if(*format_p == 'u') 
3077   14D7             _if43_cond:
3078   14D7 FA FD FF      lea d, [bp + -3] ; $format_p
3079   14DA 2A            mov b, [d]
3080   14DB 74            mov d, b
3081   14DC 32            mov bl, [d]
3082   14DD A7 00         mov bh, 0
3083   14DF             ; START RELATIONAL
3084   14DF D7            push a
3085   14E0 11            mov a, b
3086   14E1 26 75 00      mov b, $75
3087   14E4 B0            cmp a, b
3088   14E5 FD 71         seq ; ==
3089   14E7 E4            pop a
3090   14E8             ; END RELATIONAL
3091   14E8 C0 00 00      cmp b, 0
3092   14EB C6 02 15      je _if43_else
3093   14EE             _if43_true:
3094   14EE             ;; print_unsigned_long(*(unsigned long *)p); 
3095   14EE FD 79         mov g, b
3096   14F0 28            mov b, c
3097   14F1 FD AB         swp b
3098   14F3 D8            push b
3099   14F4 FD 27         mov b, g
3100   14F6 FD AB         swp b
3101   14F8 D8            push b
3102   14F9 07 18 1A      call print_unsigned_long
3103   14FC 51 04 00      add sp, 4
3104   14FF 0A 44 15      jmp _if43_exit
3105   1502             _if43_else:
3106   1502             ;; if(*format_p == 'x') 
3107   1502             _if44_cond:
3108   1502 FA FD FF      lea d, [bp + -3] ; $format_p
3109   1505 2A            mov b, [d]
3110   1506 74            mov d, b
3111   1507 32            mov bl, [d]
3112   1508 A7 00         mov bh, 0
3113   150A             ; START RELATIONAL
3114   150A D7            push a
3115   150B 11            mov a, b
3116   150C 26 78 00      mov b, $78
3117   150F B0            cmp a, b
3118   1510 FD 71         seq ; ==
3119   1512 E4            pop a
3120   1513             ; END RELATIONAL
3121   1513 C0 00 00      cmp b, 0
3122   1516 C6 38 15      je _if44_else
3123   1519             _if44_true:
3124   1519             ;; printx32(*(long int *)p); 
3125   1519 FA FF FF      lea d, [bp + -1] ; $p
3126   151C 2A            mov b, [d]
3127   151D 74            mov d, b
3128   151E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3129   1521 FD 39         mov c, b ; And place it into C
3130   1523 2A            mov b, [d] ; Lower Word in B
3131   1524 FD 79         mov g, b
3132   1526 28            mov b, c
3133   1527 FD AB         swp b
3134   1529 D8            push b
3135   152A FD 27         mov b, g
3136   152C FD AB         swp b
3137   152E D8            push b
3138   152F 07 4F 16      call printx32
3139   1532 51 04 00      add sp, 4
3140   1535 0A 44 15      jmp _if44_exit
3141   1538             _if44_else:
3142   1538             ;; err("Unexpected format in printf."); 
3143   1538 26 A3 28      mov b, __s1 ; "Unexpected format in printf."
3144   153B FD AB         swp b
3145   153D D8            push b
3146   153E 07 3A 16      call err
3147   1541 51 02 00      add sp, 2
3148   1544             _if44_exit:
3149   1544             _if43_exit:
3150   1544             _if42_exit:
3151   1544             ;; p = p + 4; 
3152   1544 FA FF FF      lea d, [bp + -1] ; $p
3153   1547 DA            push d
3154   1548 FA FF FF      lea d, [bp + -1] ; $p
3155   154B 2A            mov b, [d]
3156   154C             ; START TERMS
3157   154C D7            push a
3158   154D 11            mov a, b
3159   154E 26 04 00      mov b, $4
3160   1551 56            add b, a
3161   1552 E4            pop a
3162   1553             ; END TERMS
3163   1553 E7            pop d
3164   1554 FD 43         mov [d], b
3165   1556             ;; break; 
3166   1556 0A 09 16      jmp _switch41_exit ; case break
3167   1559             _switch41_case2:
3168   1559             _switch41_case3:
3169   1559             ;; print_signed(*(int*)p); 
3170   1559 FA FF FF      lea d, [bp + -1] ; $p
3171   155C 2A            mov b, [d]
3172   155D 74            mov d, b
3173   155E 2A            mov b, [d]
3174   155F FD AB         swp b
3175   1561 D8            push b
3176   1562 07 D6 17      call print_signed
3177   1565 51 02 00      add sp, 2
3178   1568             ;; p = p + 2; 
3179   1568 FA FF FF      lea d, [bp + -1] ; $p
3180   156B DA            push d
3181   156C FA FF FF      lea d, [bp + -1] ; $p
3182   156F 2A            mov b, [d]
3183   1570             ; START TERMS
3184   1570 D7            push a
3185   1571 11            mov a, b
3186   1572 26 02 00      mov b, $2
3187   1575 56            add b, a
3188   1576 E4            pop a
3189   1577             ; END TERMS
3190   1577 E7            pop d
3191   1578 FD 43         mov [d], b
3192   157A             ;; break; 
3193   157A 0A 09 16      jmp _switch41_exit ; case break
3194   157D             _switch41_case4:
3195   157D             ;; print_unsigned(*(unsigned int*)p); 
3196   157D FA FF FF      lea d, [bp + -1] ; $p
3197   1580 2A            mov b, [d]
3198   1581 74            mov d, b
3199   1582 2A            mov b, [d]
3200   1583 FD AB         swp b
3201   1585 D8            push b
3202   1586 07 15 1B      call print_unsigned
3203   1589 51 02 00      add sp, 2
3204   158C             ;; p = p + 2; 
3205   158C FA FF FF      lea d, [bp + -1] ; $p
3206   158F DA            push d
3207   1590 FA FF FF      lea d, [bp + -1] ; $p
3208   1593 2A            mov b, [d]
3209   1594             ; START TERMS
3210   1594 D7            push a
3211   1595 11            mov a, b
3212   1596 26 02 00      mov b, $2
3213   1599 56            add b, a
3214   159A E4            pop a
3215   159B             ; END TERMS
3216   159B E7            pop d
3217   159C FD 43         mov [d], b
3218   159E             ;; break; 
3219   159E 0A 09 16      jmp _switch41_exit ; case break
3220   15A1             _switch41_case5:
3221   15A1             
3222   15A1             ; --- BEGIN INLINE ASM BLOCK
3223   15A1 FA FF FF      lea d, [bp + -1] ; $p
3224   15A4 FD 2A         mov d, [d]
3225   15A6 2A            mov b, [d]
3226   15A7 07 67 1F      call print_u16x
3227   15AA             ; --- END INLINE ASM BLOCK
3228   15AA             
3229   15AA             ;; p = p + 2; 
3230   15AA FA FF FF      lea d, [bp + -1] ; $p
3231   15AD DA            push d
3232   15AE FA FF FF      lea d, [bp + -1] ; $p
3233   15B1 2A            mov b, [d]
3234   15B2             ; START TERMS
3235   15B2 D7            push a
3236   15B3 11            mov a, b
3237   15B4 26 02 00      mov b, $2
3238   15B7 56            add b, a
3239   15B8 E4            pop a
3240   15B9             ; END TERMS
3241   15B9 E7            pop d
3242   15BA FD 43         mov [d], b
3243   15BC             ;; break; 
3244   15BC 0A 09 16      jmp _switch41_exit ; case break
3245   15BF             _switch41_case6:
3246   15BF             
3247   15BF             ; --- BEGIN INLINE ASM BLOCK
3248   15BF FA FF FF      lea d, [bp + -1] ; $p
3249   15C2 FD 2A         mov d, [d]
3250   15C4 1E            mov al, [d]
3251   15C5 23            mov ah, al
3252   15C6 07 C5 1D      call _putchar
3253   15C9             ; --- END INLINE ASM BLOCK
3254   15C9             
3255   15C9             ;; p = p + 2; 
3256   15C9 FA FF FF      lea d, [bp + -1] ; $p
3257   15CC DA            push d
3258   15CD FA FF FF      lea d, [bp + -1] ; $p
3259   15D0 2A            mov b, [d]
3260   15D1             ; START TERMS
3261   15D1 D7            push a
3262   15D2 11            mov a, b
3263   15D3 26 02 00      mov b, $2
3264   15D6 56            add b, a
3265   15D7 E4            pop a
3266   15D8             ; END TERMS
3267   15D8 E7            pop d
3268   15D9 FD 43         mov [d], b
3269   15DB             ;; break; 
3270   15DB 0A 09 16      jmp _switch41_exit ; case break
3271   15DE             _switch41_case7:
3272   15DE             
3273   15DE             ; --- BEGIN INLINE ASM BLOCK
3274   15DE FA FF FF      lea d, [bp + -1] ; $p
3275   15E1 FD 2A         mov d, [d]
3276   15E3 FD 2A         mov d, [d]
3277   15E5 07 0F 1F      call _puts
3278   15E8             ; --- END INLINE ASM BLOCK
3279   15E8             
3280   15E8             ;; p = p + 2; 
3281   15E8 FA FF FF      lea d, [bp + -1] ; $p
3282   15EB DA            push d
3283   15EC FA FF FF      lea d, [bp + -1] ; $p
3284   15EF 2A            mov b, [d]
3285   15F0             ; START TERMS
3286   15F0 D7            push a
3287   15F1 11            mov a, b
3288   15F2 26 02 00      mov b, $2
3289   15F5 56            add b, a
3290   15F6 E4            pop a
3291   15F7             ; END TERMS
3292   15F7 E7            pop d
3293   15F8 FD 43         mov [d], b
3294   15FA             ;; break; 
3295   15FA 0A 09 16      jmp _switch41_exit ; case break
3296   15FD             _switch41_default:
3297   15FD             ;; print("Error: Unknown argument type.\n"); 
3298   15FD 26 C0 28      mov b, __s2 ; "Error: Unknown argument type.\n"
3299   1600 FD AB         swp b
3300   1602 D8            push b
3301   1603 07 2D 1C      call print
3302   1606 51 02 00      add sp, 2
3303   1609             _switch41_exit:
3304   1609             ;; format_p++; 
3305   1609 FA FD FF      lea d, [bp + -3] ; $format_p
3306   160C 2A            mov b, [d]
3307   160D D8            push b
3308   160E FD 77         inc b
3309   1610 FA FD FF      lea d, [bp + -3] ; $format_p
3310   1613 FD 43         mov [d], b
3311   1615 E5            pop b
3312   1616 0A 35 16      jmp _if40_exit
3313   1619             _if40_else:
3314   1619             ;; putchar(*format_p); 
3315   1619 FA FD FF      lea d, [bp + -3] ; $format_p
3316   161C 2A            mov b, [d]
3317   161D 74            mov d, b
3318   161E 32            mov bl, [d]
3319   161F A7 00         mov bh, 0
3320   1621 DD            push bl
3321   1622 07 E5 1B      call putchar
3322   1625 51 01 00      add sp, 1
3323   1628             ;; format_p++; 
3324   1628 FA FD FF      lea d, [bp + -3] ; $format_p
3325   162B 2A            mov b, [d]
3326   162C D8            push b
3327   162D FD 77         inc b
3328   162F FA FD FF      lea d, [bp + -3] ; $format_p
3329   1632 FD 43         mov [d], b
3330   1634 E5            pop b
3331   1635             _if40_exit:
3332   1635             _if39_exit:
3333   1635             _for38_update:
3334   1635 0A 16 14      jmp _for38_cond
3335   1638             _for38_exit:
3336   1638 F9            leave
3337   1639 09            ret
3338   163A             
3339   163A             err:
3340   163A F8 00 00      enter 0 ; (push bp; mov bp, sp)
3341   163D             ;; print(e); 
3342   163D FA 05 00      lea d, [bp + 5] ; $e
3343   1640 2A            mov b, [d]
3344   1641 FD AB         swp b
3345   1643 D8            push b
3346   1644 07 2D 1C      call print
3347   1647 51 02 00      add sp, 2
3348   164A             ;; exit(); 
3349   164A 07 CE 06      call exit
3350   164D F9            leave
3351   164E 09            ret
3352   164F             
3353   164F             printx32:
3354   164F F8 00 00      enter 0 ; (push bp; mov bp, sp)
3355   1652             
3356   1652             ; --- BEGIN INLINE ASM BLOCK
3357   1652 FA 05 00      lea d, [bp + 5] ; $hex
3358   1655 2B 02 00      mov b, [d+2]
3359   1658 07 67 1F      call print_u16x
3360   165B 2A            mov b, [d]
3361   165C 07 67 1F      call print_u16x
3362   165F             ; --- END INLINE ASM BLOCK
3363   165F             
3364   165F F9            leave
3365   1660 09            ret
3366   1661             
3367   1661             printx16:
3368   1661 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3369   1664             
3370   1664             ; --- BEGIN INLINE ASM BLOCK
3371   1664 FA 05 00      lea d, [bp + 5] ; $hex
3372   1667 2A            mov b, [d]
3373   1668 07 67 1F      call print_u16x
3374   166B             ; --- END INLINE ASM BLOCK
3375   166B             
3376   166B F9            leave
3377   166C 09            ret
3378   166D             
3379   166D             printx8:
3380   166D F8 00 00      enter 0 ; (push bp; mov bp, sp)
3381   1670             
3382   1670             ; --- BEGIN INLINE ASM BLOCK
3383   1670 FA 05 00      lea d, [bp + 5] ; $hex
3384   1673 32            mov bl, [d]
3385   1674 07 AB 1F      call print_u8x
3386   1677             ; --- END INLINE ASM BLOCK
3387   1677             
3388   1677 F9            leave
3389   1678 09            ret
3390   1679             
3391   1679             hex_to_int:
3392   1679 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3393   167C             ; $value 
3394   167C 10 00 00      mov a, $0
3395   167F 45 FF FF      mov [bp + -1], a
3396   1682             ; $i 
3397   1682             ; $hex_char 
3398   1682             ; $len 
3399   1682 52 07 00      sub sp, 7
3400   1685             ;; len = strlen(hex_string); 
3401   1685 FA FA FF      lea d, [bp + -6] ; $len
3402   1688 DA            push d
3403   1689 FA 05 00      lea d, [bp + 5] ; $hex_string
3404   168C 2A            mov b, [d]
3405   168D FD AB         swp b
3406   168F D8            push b
3407   1690 07 85 06      call strlen
3408   1693 51 02 00      add sp, 2
3409   1696 E7            pop d
3410   1697 FD 43         mov [d], b
3411   1699             ;; for (i = 0; i < len; i++) { 
3412   1699             _for45_init:
3413   1699 FA FD FF      lea d, [bp + -3] ; $i
3414   169C DA            push d
3415   169D 26 00 00      mov b, $0
3416   16A0 E7            pop d
3417   16A1 FD 43         mov [d], b
3418   16A3             _for45_cond:
3419   16A3 FA FD FF      lea d, [bp + -3] ; $i
3420   16A6 2A            mov b, [d]
3421   16A7             ; START RELATIONAL
3422   16A7 D7            push a
3423   16A8 11            mov a, b
3424   16A9 FA FA FF      lea d, [bp + -6] ; $len
3425   16AC 2A            mov b, [d]
3426   16AD B0            cmp a, b
3427   16AE FD 73         slt ; <= (signed)
3428   16B0 E4            pop a
3429   16B1             ; END RELATIONAL
3430   16B1 C0 00 00      cmp b, 0
3431   16B4 C6 B6 17      je _for45_exit
3432   16B7             _for45_block:
3433   16B7             ;; hex_char = hex_string[i]; 
3434   16B7 FA FC FF      lea d, [bp + -4] ; $hex_char
3435   16BA DA            push d
3436   16BB FA 05 00      lea d, [bp + 5] ; $hex_string
3437   16BE FD 2A         mov d, [d]
3438   16C0 D7            push a
3439   16C1 DA            push d
3440   16C2 FA FD FF      lea d, [bp + -3] ; $i
3441   16C5 2A            mov b, [d]
3442   16C6 E7            pop d
3443   16C7 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3444   16CB E4            pop a
3445   16CC 32            mov bl, [d]
3446   16CD A7 00         mov bh, 0
3447   16CF E7            pop d
3448   16D0 FD 3E         mov [d], bl
3449   16D2             ;; if (hex_char >= 'a' && hex_char <= 'f')  
3450   16D2             _if46_cond:
3451   16D2 FA FC FF      lea d, [bp + -4] ; $hex_char
3452   16D5 32            mov bl, [d]
3453   16D6 A7 00         mov bh, 0
3454   16D8             ; START RELATIONAL
3455   16D8 D7            push a
3456   16D9 11            mov a, b
3457   16DA 26 61 00      mov b, $61
3458   16DD B0            cmp a, b
3459   16DE FD 80         sge ; >=
3460   16E0 E4            pop a
3461   16E1             ; END RELATIONAL
3462   16E1 D7            push a
3463   16E2 11            mov a, b
3464   16E3 FA FC FF      lea d, [bp + -4] ; $hex_char
3465   16E6 32            mov bl, [d]
3466   16E7 A7 00         mov bh, 0
3467   16E9             ; START RELATIONAL
3468   16E9 D7            push a
3469   16EA 11            mov a, b
3470   16EB 26 66 00      mov b, $66
3471   16EE B0            cmp a, b
3472   16EF FD 74         sle ; <=
3473   16F1 E4            pop a
3474   16F2             ; END RELATIONAL
3475   16F2 FD A7         sand a, b ; &&
3476   16F4 E4            pop a
3477   16F5 C0 00 00      cmp b, 0
3478   16F8 C6 29 17      je _if46_else
3479   16FB             _if46_true:
3480   16FB             ;; value = (value * 16) + (hex_char - 'a' + 10); 
3481   16FB FA FF FF      lea d, [bp + -1] ; $value
3482   16FE DA            push d
3483   16FF FA FF FF      lea d, [bp + -1] ; $value
3484   1702 2A            mov b, [d]
3485   1703             ; START FACTORS
3486   1703 D7            push a
3487   1704 11            mov a, b
3488   1705 26 10 00      mov b, $10
3489   1708 AC            mul a, b ; *
3490   1709 11            mov a, b
3491   170A 27            mov b, a
3492   170B E4            pop a
3493   170C             ; END FACTORS
3494   170C             ; START TERMS
3495   170C D7            push a
3496   170D 11            mov a, b
3497   170E FA FC FF      lea d, [bp + -4] ; $hex_char
3498   1711 32            mov bl, [d]
3499   1712 A7 00         mov bh, 0
3500   1714             ; START TERMS
3501   1714 D7            push a
3502   1715 11            mov a, b
3503   1716 26 61 00      mov b, $61
3504   1719 60            sub a, b
3505   171A 27            mov b, a
3506   171B 11            mov a, b
3507   171C 26 0A 00      mov b, $a
3508   171F 56            add b, a
3509   1720 E4            pop a
3510   1721             ; END TERMS
3511   1721 56            add b, a
3512   1722 E4            pop a
3513   1723             ; END TERMS
3514   1723 E7            pop d
3515   1724 FD 43         mov [d], b
3516   1726 0A A6 17      jmp _if46_exit
3517   1729             _if46_else:
3518   1729             ;; if (hex_char >= 'A' && hex_char <= 'F')  
3519   1729             _if47_cond:
3520   1729 FA FC FF      lea d, [bp + -4] ; $hex_char
3521   172C 32            mov bl, [d]
3522   172D A7 00         mov bh, 0
3523   172F             ; START RELATIONAL
3524   172F D7            push a
3525   1730 11            mov a, b
3526   1731 26 41 00      mov b, $41
3527   1734 B0            cmp a, b
3528   1735 FD 80         sge ; >=
3529   1737 E4            pop a
3530   1738             ; END RELATIONAL
3531   1738 D7            push a
3532   1739 11            mov a, b
3533   173A FA FC FF      lea d, [bp + -4] ; $hex_char
3534   173D 32            mov bl, [d]
3535   173E A7 00         mov bh, 0
3536   1740             ; START RELATIONAL
3537   1740 D7            push a
3538   1741 11            mov a, b
3539   1742 26 46 00      mov b, $46
3540   1745 B0            cmp a, b
3541   1746 FD 74         sle ; <=
3542   1748 E4            pop a
3543   1749             ; END RELATIONAL
3544   1749 FD A7         sand a, b ; &&
3545   174B E4            pop a
3546   174C C0 00 00      cmp b, 0
3547   174F C6 80 17      je _if47_else
3548   1752             _if47_true:
3549   1752             ;; value = (value * 16) + (hex_char - 'A' + 10); 
3550   1752 FA FF FF      lea d, [bp + -1] ; $value
3551   1755 DA            push d
3552   1756 FA FF FF      lea d, [bp + -1] ; $value
3553   1759 2A            mov b, [d]
3554   175A             ; START FACTORS
3555   175A D7            push a
3556   175B 11            mov a, b
3557   175C 26 10 00      mov b, $10
3558   175F AC            mul a, b ; *
3559   1760 11            mov a, b
3560   1761 27            mov b, a
3561   1762 E4            pop a
3562   1763             ; END FACTORS
3563   1763             ; START TERMS
3564   1763 D7            push a
3565   1764 11            mov a, b
3566   1765 FA FC FF      lea d, [bp + -4] ; $hex_char
3567   1768 32            mov bl, [d]
3568   1769 A7 00         mov bh, 0
3569   176B             ; START TERMS
3570   176B D7            push a
3571   176C 11            mov a, b
3572   176D 26 41 00      mov b, $41
3573   1770 60            sub a, b
3574   1771 27            mov b, a
3575   1772 11            mov a, b
3576   1773 26 0A 00      mov b, $a
3577   1776 56            add b, a
3578   1777 E4            pop a
3579   1778             ; END TERMS
3580   1778 56            add b, a
3581   1779 E4            pop a
3582   177A             ; END TERMS
3583   177A E7            pop d
3584   177B FD 43         mov [d], b
3585   177D 0A A6 17      jmp _if47_exit
3586   1780             _if47_else:
3587   1780             ;; value = (value * 16) + (hex_char - '0'); 
3588   1780 FA FF FF      lea d, [bp + -1] ; $value
3589   1783 DA            push d
3590   1784 FA FF FF      lea d, [bp + -1] ; $value
3591   1787 2A            mov b, [d]
3592   1788             ; START FACTORS
3593   1788 D7            push a
3594   1789 11            mov a, b
3595   178A 26 10 00      mov b, $10
3596   178D AC            mul a, b ; *
3597   178E 11            mov a, b
3598   178F 27            mov b, a
3599   1790 E4            pop a
3600   1791             ; END FACTORS
3601   1791             ; START TERMS
3602   1791 D7            push a
3603   1792 11            mov a, b
3604   1793 FA FC FF      lea d, [bp + -4] ; $hex_char
3605   1796 32            mov bl, [d]
3606   1797 A7 00         mov bh, 0
3607   1799             ; START TERMS
3608   1799 D7            push a
3609   179A 11            mov a, b
3610   179B 26 30 00      mov b, $30
3611   179E 60            sub a, b
3612   179F 27            mov b, a
3613   17A0 E4            pop a
3614   17A1             ; END TERMS
3615   17A1 56            add b, a
3616   17A2 E4            pop a
3617   17A3             ; END TERMS
3618   17A3 E7            pop d
3619   17A4 FD 43         mov [d], b
3620   17A6             _if47_exit:
3621   17A6             _if46_exit:
3622   17A6             _for45_update:
3623   17A6 FA FD FF      lea d, [bp + -3] ; $i
3624   17A9 2A            mov b, [d]
3625   17AA D8            push b
3626   17AB FD 77         inc b
3627   17AD FA FD FF      lea d, [bp + -3] ; $i
3628   17B0 FD 43         mov [d], b
3629   17B2 E5            pop b
3630   17B3 0A A3 16      jmp _for45_cond
3631   17B6             _for45_exit:
3632   17B6             ;; return value; 
3633   17B6 FA FF FF      lea d, [bp + -1] ; $value
3634   17B9 2A            mov b, [d]
3635   17BA F9            leave
3636   17BB 09            ret
3637   17BC             
3638   17BC             gets:
3639   17BC F8 00 00      enter 0 ; (push bp; mov bp, sp)
3640   17BF             
3641   17BF             ; --- BEGIN INLINE ASM BLOCK
3642   17BF FA 05 00      lea d, [bp + 5] ; $s
3643   17C2 15            mov a, [d]
3644   17C3 3C            mov d, a
3645   17C4 07 CC 1D      call _gets
3646   17C7             ; --- END INLINE ASM BLOCK
3647   17C7             
3648   17C7             ;; return strlen(s); 
3649   17C7 FA 05 00      lea d, [bp + 5] ; $s
3650   17CA 2A            mov b, [d]
3651   17CB FD AB         swp b
3652   17CD D8            push b
3653   17CE 07 85 06      call strlen
3654   17D1 51 02 00      add sp, 2
3655   17D4 F9            leave
3656   17D5 09            ret
3657   17D6             
3658   17D6             print_signed:
3659   17D6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3660   17D9             ; $digits 
3661   17D9             ; $i 
3662   17D9 10 00 00      mov a, $0
3663   17DC 45 FA FF      mov [bp + -6], a
3664   17DF 52 07 00      sub sp, 7
3665   17E2             ;; if (num < 0) { 
3666   17E2             _if48_cond:
3667   17E2 FA 05 00      lea d, [bp + 5] ; $num
3668   17E5 2A            mov b, [d]
3669   17E6             ; START RELATIONAL
3670   17E6 D7            push a
3671   17E7 11            mov a, b
3672   17E8 26 00 00      mov b, $0
3673   17EB B0            cmp a, b
3674   17EC FD 73         slt ; <= (signed)
3675   17EE E4            pop a
3676   17EF             ; END RELATIONAL
3677   17EF C0 00 00      cmp b, 0
3678   17F2 C6 0F 18      je _if48_else
3679   17F5             _if48_true:
3680   17F5             ;; putchar('-'); 
3681   17F5 26 2D 00      mov b, $2d
3682   17F8 DD            push bl
3683   17F9 07 E5 1B      call putchar
3684   17FC 51 01 00      add sp, 1
3685   17FF             ;; num = -num; 
3686   17FF FA 05 00      lea d, [bp + 5] ; $num
3687   1802 DA            push d
3688   1803 FA 05 00      lea d, [bp + 5] ; $num
3689   1806 2A            mov b, [d]
3690   1807 FD 97         neg b
3691   1809 E7            pop d
3692   180A FD 43         mov [d], b
3693   180C 0A 31 18      jmp _if48_exit
3694   180F             _if48_else:
3695   180F             ;; if (num == 0) { 
3696   180F             _if49_cond:
3697   180F FA 05 00      lea d, [bp + 5] ; $num
3698   1812 2A            mov b, [d]
3699   1813             ; START RELATIONAL
3700   1813 D7            push a
3701   1814 11            mov a, b
3702   1815 26 00 00      mov b, $0
3703   1818 B0            cmp a, b
3704   1819 FD 71         seq ; ==
3705   181B E4            pop a
3706   181C             ; END RELATIONAL
3707   181C C0 00 00      cmp b, 0
3708   181F C6 31 18      je _if49_exit
3709   1822             _if49_true:
3710   1822             ;; putchar('0'); 
3711   1822 26 30 00      mov b, $30
3712   1825 DD            push bl
3713   1826 07 E5 1B      call putchar
3714   1829 51 01 00      add sp, 1
3715   182C             ;; return; 
3716   182C F9            leave
3717   182D 09            ret
3718   182E 0A 31 18      jmp _if49_exit
3719   1831             _if49_exit:
3720   1831             _if48_exit:
3721   1831             ;; while (num > 0) { 
3722   1831             _while50_cond:
3723   1831 FA 05 00      lea d, [bp + 5] ; $num
3724   1834 2A            mov b, [d]
3725   1835             ; START RELATIONAL
3726   1835 D7            push a
3727   1836 11            mov a, b
3728   1837 26 00 00      mov b, $0
3729   183A B0            cmp a, b
3730   183B FD 7F         sgt ; >
3731   183D E4            pop a
3732   183E             ; END RELATIONAL
3733   183E C0 00 00      cmp b, 0
3734   1841 C6 8B 18      je _while50_exit
3735   1844             _while50_block:
3736   1844             ;; digits[i] = '0' + (num % 10); 
3737   1844 FA FC FF      lea d, [bp + -4] ; $digits
3738   1847 D7            push a
3739   1848 DA            push d
3740   1849 FA FA FF      lea d, [bp + -6] ; $i
3741   184C 2A            mov b, [d]
3742   184D E7            pop d
3743   184E 5A            add d, b
3744   184F E4            pop a
3745   1850 DA            push d
3746   1851 26 30 00      mov b, $30
3747   1854             ; START TERMS
3748   1854 D7            push a
3749   1855 11            mov a, b
3750   1856 FA 05 00      lea d, [bp + 5] ; $num
3751   1859 2A            mov b, [d]
3752   185A             ; START FACTORS
3753   185A D7            push a
3754   185B 11            mov a, b
3755   185C 26 0A 00      mov b, $a
3756   185F AE            div a, b ; 
3757   1860 11            mov a, b
3758   1861 27            mov b, a
3759   1862 E4            pop a
3760   1863             ; END FACTORS
3761   1863 56            add b, a
3762   1864 E4            pop a
3763   1865             ; END TERMS
3764   1865 E7            pop d
3765   1866 FD 3E         mov [d], bl
3766   1868             ;; num = num / 10; 
3767   1868 FA 05 00      lea d, [bp + 5] ; $num
3768   186B DA            push d
3769   186C FA 05 00      lea d, [bp + 5] ; $num
3770   186F 2A            mov b, [d]
3771   1870             ; START FACTORS
3772   1870 D7            push a
3773   1871 11            mov a, b
3774   1872 26 0A 00      mov b, $a
3775   1875 AE            div a, b
3776   1876 27            mov b, a
3777   1877 E4            pop a
3778   1878             ; END FACTORS
3779   1878 E7            pop d
3780   1879 FD 43         mov [d], b
3781   187B             ;; i++; 
3782   187B FA FA FF      lea d, [bp + -6] ; $i
3783   187E 2A            mov b, [d]
3784   187F D8            push b
3785   1880 FD 77         inc b
3786   1882 FA FA FF      lea d, [bp + -6] ; $i
3787   1885 FD 43         mov [d], b
3788   1887 E5            pop b
3789   1888 0A 31 18      jmp _while50_cond
3790   188B             _while50_exit:
3791   188B             ;; while (i > 0) { 
3792   188B             _while51_cond:
3793   188B FA FA FF      lea d, [bp + -6] ; $i
3794   188E 2A            mov b, [d]
3795   188F             ; START RELATIONAL
3796   188F D7            push a
3797   1890 11            mov a, b
3798   1891 26 00 00      mov b, $0
3799   1894 B0            cmp a, b
3800   1895 FD 7F         sgt ; >
3801   1897 E4            pop a
3802   1898             ; END RELATIONAL
3803   1898 C0 00 00      cmp b, 0
3804   189B C6 C4 18      je _while51_exit
3805   189E             _while51_block:
3806   189E             ;; i--; 
3807   189E FA FA FF      lea d, [bp + -6] ; $i
3808   18A1 2A            mov b, [d]
3809   18A2 D8            push b
3810   18A3 FD 7D         dec b
3811   18A5 FA FA FF      lea d, [bp + -6] ; $i
3812   18A8 FD 43         mov [d], b
3813   18AA E5            pop b
3814   18AB             ;; putchar(digits[i]); 
3815   18AB FA FC FF      lea d, [bp + -4] ; $digits
3816   18AE D7            push a
3817   18AF DA            push d
3818   18B0 FA FA FF      lea d, [bp + -6] ; $i
3819   18B3 2A            mov b, [d]
3820   18B4 E7            pop d
3821   18B5 5A            add d, b
3822   18B6 E4            pop a
3823   18B7 32            mov bl, [d]
3824   18B8 A7 00         mov bh, 0
3825   18BA DD            push bl
3826   18BB 07 E5 1B      call putchar
3827   18BE 51 01 00      add sp, 1
3828   18C1 0A 8B 18      jmp _while51_cond
3829   18C4             _while51_exit:
3830   18C4 F9            leave
3831   18C5 09            ret
3832   18C6             
3833   18C6             print_signed_long:
3834   18C6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3835   18C9             ; $digits 
3836   18C9             ; $i 
3837   18C9 10 00 00      mov a, $0
3838   18CC 45 F5 FF      mov [bp + -11], a
3839   18CF 52 0C 00      sub sp, 12
3840   18D2             ;; if (num < 0) { 
3841   18D2             _if52_cond:
3842   18D2 FA 05 00      lea d, [bp + 5] ; $num
3843   18D5 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3844   18D8 FD 39         mov c, b ; And place it into C
3845   18DA 2A            mov b, [d] ; Lower Word in B
3846   18DB             ; START RELATIONAL
3847   18DB D7            push a
3848   18DC FD D8         push g
3849   18DE 11            mov a, b
3850   18DF FD 7A         mov g, c
3851   18E1 26 00 00      mov b, $0
3852   18E4 4D            mov si, a
3853   18E5 11            mov a, b
3854   18E6 4F            mov di, a
3855   18E7 FD 12         mov a, g
3856   18E9 28            mov b, c
3857   18EA B0            cmp a, b
3858   18EB FD 75         slu ; <
3859   18ED D8            push b
3860   18EE 28            mov b, c
3861   18EF FD 71         seq ; ==
3862   18F1 D8            push b
3863   18F2 50            mov a, di
3864   18F3 27            mov b, a
3865   18F4 4E            mov a, si
3866   18F5 B0            cmp a, b
3867   18F6 FD 75         slu ; <
3868   18F8 E4            pop a
3869   18F9 FD 92         and b, a
3870   18FB E4            pop a
3871   18FC FD 70         or b, a
3872   18FE               
3873   18FE FD F1         pop g
3874   1900 E4            pop a
3875   1901             ; END RELATIONAL
3876   1901 C0 00 00      cmp b, 0
3877   1904 C6 2B 19      je _if52_else
3878   1907             _if52_true:
3879   1907             ;; putchar('-'); 
3880   1907 26 2D 00      mov b, $2d
3881   190A DD            push bl
3882   190B 07 E5 1B      call putchar
3883   190E 51 01 00      add sp, 1
3884   1911             ;; num = -num; 
3885   1911 FA 05 00      lea d, [bp + 5] ; $num
3886   1914 DA            push d
3887   1915 FA 05 00      lea d, [bp + 5] ; $num
3888   1918 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3889   191B FD 39         mov c, b ; And place it into C
3890   191D 2A            mov b, [d] ; Lower Word in B
3891   191E FD 97         neg b
3892   1920 E7            pop d
3893   1921 FD 43         mov [d], b
3894   1923 28            mov b, c
3895   1924 FD 44 02 00   mov [d + 2], b
3896   1928 0A 62 19      jmp _if52_exit
3897   192B             _if52_else:
3898   192B             ;; if (num == 0) { 
3899   192B             _if53_cond:
3900   192B FA 05 00      lea d, [bp + 5] ; $num
3901   192E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3902   1931 FD 39         mov c, b ; And place it into C
3903   1933 2A            mov b, [d] ; Lower Word in B
3904   1934             ; START RELATIONAL
3905   1934 D7            push a
3906   1935 FD D8         push g
3907   1937 11            mov a, b
3908   1938 FD 7A         mov g, c
3909   193A 26 00 00      mov b, $0
3910   193D B0            cmp a, b
3911   193E FD 71         seq ; ==
3912   1940 D8            push b
3913   1941 12            mov a, c
3914   1942 FD 27         mov b, g
3915   1944 B0            cmp a, b
3916   1945 FD 71         seq ; ==
3917   1947 E4            pop a
3918   1948 FD A7         sand a, b
3919   194A FD F1         pop g
3920   194C E4            pop a
3921   194D             ; END RELATIONAL
3922   194D C0 00 00      cmp b, 0
3923   1950 C6 62 19      je _if53_exit
3924   1953             _if53_true:
3925   1953             ;; putchar('0'); 
3926   1953 26 30 00      mov b, $30
3927   1956 DD            push bl
3928   1957 07 E5 1B      call putchar
3929   195A 51 01 00      add sp, 1
3930   195D             ;; return; 
3931   195D F9            leave
3932   195E 09            ret
3933   195F 0A 62 19      jmp _if53_exit
3934   1962             _if53_exit:
3935   1962             _if52_exit:
3936   1962             ;; while (num > 0) { 
3937   1962             _while54_cond:
3938   1962 FA 05 00      lea d, [bp + 5] ; $num
3939   1965 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3940   1968 FD 39         mov c, b ; And place it into C
3941   196A 2A            mov b, [d] ; Lower Word in B
3942   196B             ; START RELATIONAL
3943   196B D7            push a
3944   196C FD D8         push g
3945   196E 11            mov a, b
3946   196F FD 7A         mov g, c
3947   1971 26 00 00      mov b, $0
3948   1974 B0            cmp a, b
3949   1975 FD 7F         sgt ; >
3950   1977 FD F1         pop g
3951   1979 E4            pop a
3952   197A             ; END RELATIONAL
3953   197A C0 00 00      cmp b, 0
3954   197D C6 DD 19      je _while54_exit
3955   1980             _while54_block:
3956   1980             ;; digits[i] = '0' + (num % 10); 
3957   1980 FA F7 FF      lea d, [bp + -9] ; $digits
3958   1983 D7            push a
3959   1984 DA            push d
3960   1985 FA F5 FF      lea d, [bp + -11] ; $i
3961   1988 2A            mov b, [d]
3962   1989 E7            pop d
3963   198A 5A            add d, b
3964   198B E4            pop a
3965   198C DA            push d
3966   198D 26 30 00      mov b, $30
3967   1990             ; START TERMS
3968   1990 D7            push a
3969   1991 11            mov a, b
3970   1992 FA 05 00      lea d, [bp + 5] ; $num
3971   1995 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3972   1998 FD 39         mov c, b ; And place it into C
3973   199A 2A            mov b, [d] ; Lower Word in B
3974   199B             ; START FACTORS
3975   199B D7            push a
3976   199C 11            mov a, b
3977   199D 26 0A 00      mov b, $a
3978   19A0 AE            div a, b ; 
3979   19A1 11            mov a, b
3980   19A2 27            mov b, a
3981   19A3 E4            pop a
3982   19A4             ; END FACTORS
3983   19A4 54            add a, b
3984   19A5 D7            push a
3985   19A6 FD 12         mov a, g
3986   19A8 28            mov b, c
3987   19A9 5C            adc a, b
3988   19AA 39            mov c, a
3989   19AB E5            pop b
3990   19AC E4            pop a
3991   19AD             ; END TERMS
3992   19AD E7            pop d
3993   19AE FD 3E         mov [d], bl
3994   19B0             ;; num = num / 10; 
3995   19B0 FA 05 00      lea d, [bp + 5] ; $num
3996   19B3 DA            push d
3997   19B4 FA 05 00      lea d, [bp + 5] ; $num
3998   19B7 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3999   19BA FD 39         mov c, b ; And place it into C
4000   19BC 2A            mov b, [d] ; Lower Word in B
4001   19BD             ; START FACTORS
4002   19BD D7            push a
4003   19BE 11            mov a, b
4004   19BF 26 0A 00      mov b, $a
4005   19C2 AE            div a, b
4006   19C3 27            mov b, a
4007   19C4 E4            pop a
4008   19C5             ; END FACTORS
4009   19C5 E7            pop d
4010   19C6 FD 43         mov [d], b
4011   19C8 28            mov b, c
4012   19C9 FD 44 02 00   mov [d + 2], b
4013   19CD             ;; i++; 
4014   19CD FA F5 FF      lea d, [bp + -11] ; $i
4015   19D0 2A            mov b, [d]
4016   19D1 D8            push b
4017   19D2 FD 77         inc b
4018   19D4 FA F5 FF      lea d, [bp + -11] ; $i
4019   19D7 FD 43         mov [d], b
4020   19D9 E5            pop b
4021   19DA 0A 62 19      jmp _while54_cond
4022   19DD             _while54_exit:
4023   19DD             ;; while (i > 0) { 
4024   19DD             _while55_cond:
4025   19DD FA F5 FF      lea d, [bp + -11] ; $i
4026   19E0 2A            mov b, [d]
4027   19E1             ; START RELATIONAL
4028   19E1 D7            push a
4029   19E2 11            mov a, b
4030   19E3 26 00 00      mov b, $0
4031   19E6 B0            cmp a, b
4032   19E7 FD 7F         sgt ; >
4033   19E9 E4            pop a
4034   19EA             ; END RELATIONAL
4035   19EA C0 00 00      cmp b, 0
4036   19ED C6 16 1A      je _while55_exit
4037   19F0             _while55_block:
4038   19F0             ;; i--; 
4039   19F0 FA F5 FF      lea d, [bp + -11] ; $i
4040   19F3 2A            mov b, [d]
4041   19F4 D8            push b
4042   19F5 FD 7D         dec b
4043   19F7 FA F5 FF      lea d, [bp + -11] ; $i
4044   19FA FD 43         mov [d], b
4045   19FC E5            pop b
4046   19FD             ;; putchar(digits[i]); 
4047   19FD FA F7 FF      lea d, [bp + -9] ; $digits
4048   1A00 D7            push a
4049   1A01 DA            push d
4050   1A02 FA F5 FF      lea d, [bp + -11] ; $i
4051   1A05 2A            mov b, [d]
4052   1A06 E7            pop d
4053   1A07 5A            add d, b
4054   1A08 E4            pop a
4055   1A09 32            mov bl, [d]
4056   1A0A A7 00         mov bh, 0
4057   1A0C DD            push bl
4058   1A0D 07 E5 1B      call putchar
4059   1A10 51 01 00      add sp, 1
4060   1A13 0A DD 19      jmp _while55_cond
4061   1A16             _while55_exit:
4062   1A16 F9            leave
4063   1A17 09            ret
4064   1A18             
4065   1A18             print_unsigned_long:
4066   1A18 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4067   1A1B             ; $digits 
4068   1A1B             ; $i 
4069   1A1B 52 0C 00      sub sp, 12
4070   1A1E             ;; i = 0; 
4071   1A1E FA F5 FF      lea d, [bp + -11] ; $i
4072   1A21 DA            push d
4073   1A22 26 00 00      mov b, $0
4074   1A25 E7            pop d
4075   1A26 FD 43         mov [d], b
4076   1A28             ;; if(num == 0){ 
4077   1A28             _if56_cond:
4078   1A28 FA 05 00      lea d, [bp + 5] ; $num
4079   1A2B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4080   1A2E FD 39         mov c, b ; And place it into C
4081   1A30 2A            mov b, [d] ; Lower Word in B
4082   1A31             ; START RELATIONAL
4083   1A31 D7            push a
4084   1A32 FD D8         push g
4085   1A34 11            mov a, b
4086   1A35 FD 7A         mov g, c
4087   1A37 26 00 00      mov b, $0
4088   1A3A B0            cmp a, b
4089   1A3B FD 71         seq ; ==
4090   1A3D D8            push b
4091   1A3E 12            mov a, c
4092   1A3F FD 27         mov b, g
4093   1A41 B0            cmp a, b
4094   1A42 FD 71         seq ; ==
4095   1A44 E4            pop a
4096   1A45 FD A7         sand a, b
4097   1A47 FD F1         pop g
4098   1A49 E4            pop a
4099   1A4A             ; END RELATIONAL
4100   1A4A C0 00 00      cmp b, 0
4101   1A4D C6 5F 1A      je _if56_exit
4102   1A50             _if56_true:
4103   1A50             ;; putchar('0'); 
4104   1A50 26 30 00      mov b, $30
4105   1A53 DD            push bl
4106   1A54 07 E5 1B      call putchar
4107   1A57 51 01 00      add sp, 1
4108   1A5A             ;; return; 
4109   1A5A F9            leave
4110   1A5B 09            ret
4111   1A5C 0A 5F 1A      jmp _if56_exit
4112   1A5F             _if56_exit:
4113   1A5F             ;; while (num > 0) { 
4114   1A5F             _while57_cond:
4115   1A5F FA 05 00      lea d, [bp + 5] ; $num
4116   1A62 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4117   1A65 FD 39         mov c, b ; And place it into C
4118   1A67 2A            mov b, [d] ; Lower Word in B
4119   1A68             ; START RELATIONAL
4120   1A68 D7            push a
4121   1A69 FD D8         push g
4122   1A6B 11            mov a, b
4123   1A6C FD 7A         mov g, c
4124   1A6E 26 00 00      mov b, $0
4125   1A71 B0            cmp a, b
4126   1A72 FD 81         sgu ; > (unsigned)
4127   1A74 FD F1         pop g
4128   1A76 E4            pop a
4129   1A77             ; END RELATIONAL
4130   1A77 C0 00 00      cmp b, 0
4131   1A7A C6 DA 1A      je _while57_exit
4132   1A7D             _while57_block:
4133   1A7D             ;; digits[i] = '0' + (num % 10); 
4134   1A7D FA F7 FF      lea d, [bp + -9] ; $digits
4135   1A80 D7            push a
4136   1A81 DA            push d
4137   1A82 FA F5 FF      lea d, [bp + -11] ; $i
4138   1A85 2A            mov b, [d]
4139   1A86 E7            pop d
4140   1A87 5A            add d, b
4141   1A88 E4            pop a
4142   1A89 DA            push d
4143   1A8A 26 30 00      mov b, $30
4144   1A8D             ; START TERMS
4145   1A8D D7            push a
4146   1A8E 11            mov a, b
4147   1A8F FA 05 00      lea d, [bp + 5] ; $num
4148   1A92 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4149   1A95 FD 39         mov c, b ; And place it into C
4150   1A97 2A            mov b, [d] ; Lower Word in B
4151   1A98             ; START FACTORS
4152   1A98 D7            push a
4153   1A99 11            mov a, b
4154   1A9A 26 0A 00      mov b, $a
4155   1A9D AE            div a, b ; 
4156   1A9E 11            mov a, b
4157   1A9F 27            mov b, a
4158   1AA0 E4            pop a
4159   1AA1             ; END FACTORS
4160   1AA1 54            add a, b
4161   1AA2 D7            push a
4162   1AA3 FD 12         mov a, g
4163   1AA5 28            mov b, c
4164   1AA6 5C            adc a, b
4165   1AA7 39            mov c, a
4166   1AA8 E5            pop b
4167   1AA9 E4            pop a
4168   1AAA             ; END TERMS
4169   1AAA E7            pop d
4170   1AAB FD 3E         mov [d], bl
4171   1AAD             ;; num = num / 10; 
4172   1AAD FA 05 00      lea d, [bp + 5] ; $num
4173   1AB0 DA            push d
4174   1AB1 FA 05 00      lea d, [bp + 5] ; $num
4175   1AB4 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
4176   1AB7 FD 39         mov c, b ; And place it into C
4177   1AB9 2A            mov b, [d] ; Lower Word in B
4178   1ABA             ; START FACTORS
4179   1ABA D7            push a
4180   1ABB 11            mov a, b
4181   1ABC 26 0A 00      mov b, $a
4182   1ABF AE            div a, b
4183   1AC0 27            mov b, a
4184   1AC1 E4            pop a
4185   1AC2             ; END FACTORS
4186   1AC2 E7            pop d
4187   1AC3 FD 43         mov [d], b
4188   1AC5 28            mov b, c
4189   1AC6 FD 44 02 00   mov [d + 2], b
4190   1ACA             ;; i++; 
4191   1ACA FA F5 FF      lea d, [bp + -11] ; $i
4192   1ACD 2A            mov b, [d]
4193   1ACE D8            push b
4194   1ACF FD 77         inc b
4195   1AD1 FA F5 FF      lea d, [bp + -11] ; $i
4196   1AD4 FD 43         mov [d], b
4197   1AD6 E5            pop b
4198   1AD7 0A 5F 1A      jmp _while57_cond
4199   1ADA             _while57_exit:
4200   1ADA             ;; while (i > 0) { 
4201   1ADA             _while58_cond:
4202   1ADA FA F5 FF      lea d, [bp + -11] ; $i
4203   1ADD 2A            mov b, [d]
4204   1ADE             ; START RELATIONAL
4205   1ADE D7            push a
4206   1ADF 11            mov a, b
4207   1AE0 26 00 00      mov b, $0
4208   1AE3 B0            cmp a, b
4209   1AE4 FD 7F         sgt ; >
4210   1AE6 E4            pop a
4211   1AE7             ; END RELATIONAL
4212   1AE7 C0 00 00      cmp b, 0
4213   1AEA C6 13 1B      je _while58_exit
4214   1AED             _while58_block:
4215   1AED             ;; i--; 
4216   1AED FA F5 FF      lea d, [bp + -11] ; $i
4217   1AF0 2A            mov b, [d]
4218   1AF1 D8            push b
4219   1AF2 FD 7D         dec b
4220   1AF4 FA F5 FF      lea d, [bp + -11] ; $i
4221   1AF7 FD 43         mov [d], b
4222   1AF9 E5            pop b
4223   1AFA             ;; putchar(digits[i]); 
4224   1AFA FA F7 FF      lea d, [bp + -9] ; $digits
4225   1AFD D7            push a
4226   1AFE DA            push d
4227   1AFF FA F5 FF      lea d, [bp + -11] ; $i
4228   1B02 2A            mov b, [d]
4229   1B03 E7            pop d
4230   1B04 5A            add d, b
4231   1B05 E4            pop a
4232   1B06 32            mov bl, [d]
4233   1B07 A7 00         mov bh, 0
4234   1B09 DD            push bl
4235   1B0A 07 E5 1B      call putchar
4236   1B0D 51 01 00      add sp, 1
4237   1B10 0A DA 1A      jmp _while58_cond
4238   1B13             _while58_exit:
4239   1B13 F9            leave
4240   1B14 09            ret
4241   1B15             
4242   1B15             print_unsigned:
4243   1B15 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4244   1B18             ; $digits 
4245   1B18             ; $i 
4246   1B18 52 07 00      sub sp, 7
4247   1B1B             ;; i = 0; 
4248   1B1B FA FA FF      lea d, [bp + -6] ; $i
4249   1B1E DA            push d
4250   1B1F 26 00 00      mov b, $0
4251   1B22 E7            pop d
4252   1B23 FD 43         mov [d], b
4253   1B25             ;; if(num == 0){ 
4254   1B25             _if59_cond:
4255   1B25 FA 05 00      lea d, [bp + 5] ; $num
4256   1B28 2A            mov b, [d]
4257   1B29             ; START RELATIONAL
4258   1B29 D7            push a
4259   1B2A 11            mov a, b
4260   1B2B 26 00 00      mov b, $0
4261   1B2E B0            cmp a, b
4262   1B2F FD 71         seq ; ==
4263   1B31 E4            pop a
4264   1B32             ; END RELATIONAL
4265   1B32 C0 00 00      cmp b, 0
4266   1B35 C6 47 1B      je _if59_exit
4267   1B38             _if59_true:
4268   1B38             ;; putchar('0'); 
4269   1B38 26 30 00      mov b, $30
4270   1B3B DD            push bl
4271   1B3C 07 E5 1B      call putchar
4272   1B3F 51 01 00      add sp, 1
4273   1B42             ;; return; 
4274   1B42 F9            leave
4275   1B43 09            ret
4276   1B44 0A 47 1B      jmp _if59_exit
4277   1B47             _if59_exit:
4278   1B47             ;; while (num > 0) { 
4279   1B47             _while60_cond:
4280   1B47 FA 05 00      lea d, [bp + 5] ; $num
4281   1B4A 2A            mov b, [d]
4282   1B4B             ; START RELATIONAL
4283   1B4B D7            push a
4284   1B4C 11            mov a, b
4285   1B4D 26 00 00      mov b, $0
4286   1B50 B0            cmp a, b
4287   1B51 FD 81         sgu ; > (unsigned)
4288   1B53 E4            pop a
4289   1B54             ; END RELATIONAL
4290   1B54 C0 00 00      cmp b, 0
4291   1B57 C6 A1 1B      je _while60_exit
4292   1B5A             _while60_block:
4293   1B5A             ;; digits[i] = '0' + (num % 10); 
4294   1B5A FA FC FF      lea d, [bp + -4] ; $digits
4295   1B5D D7            push a
4296   1B5E DA            push d
4297   1B5F FA FA FF      lea d, [bp + -6] ; $i
4298   1B62 2A            mov b, [d]
4299   1B63 E7            pop d
4300   1B64 5A            add d, b
4301   1B65 E4            pop a
4302   1B66 DA            push d
4303   1B67 26 30 00      mov b, $30
4304   1B6A             ; START TERMS
4305   1B6A D7            push a
4306   1B6B 11            mov a, b
4307   1B6C FA 05 00      lea d, [bp + 5] ; $num
4308   1B6F 2A            mov b, [d]
4309   1B70             ; START FACTORS
4310   1B70 D7            push a
4311   1B71 11            mov a, b
4312   1B72 26 0A 00      mov b, $a
4313   1B75 AE            div a, b ; 
4314   1B76 11            mov a, b
4315   1B77 27            mov b, a
4316   1B78 E4            pop a
4317   1B79             ; END FACTORS
4318   1B79 56            add b, a
4319   1B7A E4            pop a
4320   1B7B             ; END TERMS
4321   1B7B E7            pop d
4322   1B7C FD 3E         mov [d], bl
4323   1B7E             ;; num = num / 10; 
4324   1B7E FA 05 00      lea d, [bp + 5] ; $num
4325   1B81 DA            push d
4326   1B82 FA 05 00      lea d, [bp + 5] ; $num
4327   1B85 2A            mov b, [d]
4328   1B86             ; START FACTORS
4329   1B86 D7            push a
4330   1B87 11            mov a, b
4331   1B88 26 0A 00      mov b, $a
4332   1B8B AE            div a, b
4333   1B8C 27            mov b, a
4334   1B8D E4            pop a
4335   1B8E             ; END FACTORS
4336   1B8E E7            pop d
4337   1B8F FD 43         mov [d], b
4338   1B91             ;; i++; 
4339   1B91 FA FA FF      lea d, [bp + -6] ; $i
4340   1B94 2A            mov b, [d]
4341   1B95 D8            push b
4342   1B96 FD 77         inc b
4343   1B98 FA FA FF      lea d, [bp + -6] ; $i
4344   1B9B FD 43         mov [d], b
4345   1B9D E5            pop b
4346   1B9E 0A 47 1B      jmp _while60_cond
4347   1BA1             _while60_exit:
4348   1BA1             ;; while (i > 0) { 
4349   1BA1             _while61_cond:
4350   1BA1 FA FA FF      lea d, [bp + -6] ; $i
4351   1BA4 2A            mov b, [d]
4352   1BA5             ; START RELATIONAL
4353   1BA5 D7            push a
4354   1BA6 11            mov a, b
4355   1BA7 26 00 00      mov b, $0
4356   1BAA B0            cmp a, b
4357   1BAB FD 7F         sgt ; >
4358   1BAD E4            pop a
4359   1BAE             ; END RELATIONAL
4360   1BAE C0 00 00      cmp b, 0
4361   1BB1 C6 DA 1B      je _while61_exit
4362   1BB4             _while61_block:
4363   1BB4             ;; i--; 
4364   1BB4 FA FA FF      lea d, [bp + -6] ; $i
4365   1BB7 2A            mov b, [d]
4366   1BB8 D8            push b
4367   1BB9 FD 7D         dec b
4368   1BBB FA FA FF      lea d, [bp + -6] ; $i
4369   1BBE FD 43         mov [d], b
4370   1BC0 E5            pop b
4371   1BC1             ;; putchar(digits[i]); 
4372   1BC1 FA FC FF      lea d, [bp + -4] ; $digits
4373   1BC4 D7            push a
4374   1BC5 DA            push d
4375   1BC6 FA FA FF      lea d, [bp + -6] ; $i
4376   1BC9 2A            mov b, [d]
4377   1BCA E7            pop d
4378   1BCB 5A            add d, b
4379   1BCC E4            pop a
4380   1BCD 32            mov bl, [d]
4381   1BCE A7 00         mov bh, 0
4382   1BD0 DD            push bl
4383   1BD1 07 E5 1B      call putchar
4384   1BD4 51 01 00      add sp, 1
4385   1BD7 0A A1 1B      jmp _while61_cond
4386   1BDA             _while61_exit:
4387   1BDA F9            leave
4388   1BDB 09            ret
4389   1BDC             
4390   1BDC             date:
4391   1BDC F8 00 00      enter 0 ; (push bp; mov bp, sp)
4392   1BDF             
4393   1BDF             ; --- BEGIN INLINE ASM BLOCK
4394   1BDF 19 00         mov al, 0 
4395   1BE1 05 07         syscall sys_datetime
4396   1BE3             ; --- END INLINE ASM BLOCK
4397   1BE3             
4398   1BE3 F9            leave
4399   1BE4 09            ret
4400   1BE5             
4401   1BE5             putchar:
4402   1BE5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4403   1BE8             
4404   1BE8             ; --- BEGIN INLINE ASM BLOCK
4405   1BE8 FA 05 00      lea d, [bp + 5] ; $c
4406   1BEB 1E            mov al, [d]
4407   1BEC 23            mov ah, al
4408   1BED 07 C5 1D      call _putchar
4409   1BF0             ; --- END INLINE ASM BLOCK
4410   1BF0             
4411   1BF0 F9            leave
4412   1BF1 09            ret
4413   1BF2             
4414   1BF2             getchar:
4415   1BF2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4416   1BF5             ; $c 
4417   1BF5 52 01 00      sub sp, 1
4418   1BF8             
4419   1BF8             ; --- BEGIN INLINE ASM BLOCK
4420   1BF8 07 BE 1D      call getch
4421   1BFB 1A            mov al, ah
4422   1BFC FA 00 00      lea d, [bp + 0] ; $c
4423   1BFF 3E            mov [d], al
4424   1C00             ; --- END INLINE ASM BLOCK
4425   1C00             
4426   1C00             ;; return c; 
4427   1C00 FA 00 00      lea d, [bp + 0] ; $c
4428   1C03 32            mov bl, [d]
4429   1C04 A7 00         mov bh, 0
4430   1C06 F9            leave
4431   1C07 09            ret
4432   1C08             
4433   1C08             scann:
4434   1C08 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4435   1C0B             ; $m 
4436   1C0B 52 02 00      sub sp, 2
4437   1C0E             
4438   1C0E             ; --- BEGIN INLINE ASM BLOCK
4439   1C0E 07 09 20      call scan_u16d
4440   1C11 FA FF FF      lea d, [bp + -1] ; $m
4441   1C14 43            mov [d], a
4442   1C15             ; --- END INLINE ASM BLOCK
4443   1C15             
4444   1C15             ;; return m; 
4445   1C15 FA FF FF      lea d, [bp + -1] ; $m
4446   1C18 2A            mov b, [d]
4447   1C19 F9            leave
4448   1C1A 09            ret
4449   1C1B             
4450   1C1B             puts:
4451   1C1B F8 00 00      enter 0 ; (push bp; mov bp, sp)
4452   1C1E             
4453   1C1E             ; --- BEGIN INLINE ASM BLOCK
4454   1C1E FA 05 00      lea d, [bp + 5] ; $s
4455   1C21 15            mov a, [d]
4456   1C22 3C            mov d, a
4457   1C23 07 0F 1F      call _puts
4458   1C26 10 00 0A      mov a, $0A00
4459   1C29 05 03         syscall sys_io
4460   1C2B             ; --- END INLINE ASM BLOCK
4461   1C2B             
4462   1C2B F9            leave
4463   1C2C 09            ret
4464   1C2D             
4465   1C2D             print:
4466   1C2D F8 00 00      enter 0 ; (push bp; mov bp, sp)
4467   1C30             
4468   1C30             ; --- BEGIN INLINE ASM BLOCK
4469   1C30 FA 05 00      lea d, [bp + 5] ; $s
4470   1C33 FD 2A         mov d, [d]
4471   1C35 07 0F 1F      call _puts
4472   1C38             ; --- END INLINE ASM BLOCK
4473   1C38             
4474   1C38 F9            leave
4475   1C39 09            ret
4476   1C3A             
4477   1C3A             loadfile:
4478   1C3A F8 00 00      enter 0 ; (push bp; mov bp, sp)
4479   1C3D             
4480   1C3D             ; --- BEGIN INLINE ASM BLOCK
4481   1C3D FA 07 00      lea d, [bp + 7] ; $destination
4482   1C40 15            mov a, [d]
4483   1C41 4F            mov di, a
4484   1C42 FA 05 00      lea d, [bp + 5] ; $filename
4485   1C45 FD 2A         mov d, [d]
4486   1C47 19 14         mov al, 20
4487   1C49 05 04         syscall sys_filesystem
4488   1C4B             ; --- END INLINE ASM BLOCK
4489   1C4B             
4490   1C4B F9            leave
4491   1C4C 09            ret
4492   1C4D             
4493   1C4D             create_file:
4494   1C4D F8 00 00      enter 0 ; (push bp; mov bp, sp)
4495   1C50 F9            leave
4496   1C51 09            ret
4497   1C52             
4498   1C52             delete_file:
4499   1C52 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4500   1C55             
4501   1C55             ; --- BEGIN INLINE ASM BLOCK
4502   1C55 FA 05 00      lea d, [bp + 5] ; $filename
4503   1C58 19 0A         mov al, 10
4504   1C5A 05 04         syscall sys_filesystem
4505   1C5C             ; --- END INLINE ASM BLOCK
4506   1C5C             
4507   1C5C F9            leave
4508   1C5D 09            ret
4509   1C5E             
4510   1C5E             fopen:
4511   1C5E F8 00 00      enter 0 ; (push bp; mov bp, sp)
4512   1C61 F9            leave
4513   1C62 09            ret
4514   1C63             
4515   1C63             fclose:
4516   1C63 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4517   1C66 F9            leave
4518   1C67 09            ret
4519   1C68             
4520   1C68             load_hex:
4521   1C68 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4522   1C6B             ; $temp 
4523   1C6B 52 02 00      sub sp, 2
4524   1C6E             ;; temp = alloc(32768); 
4525   1C6E FA FF FF      lea d, [bp + -1] ; $temp
4526   1C71 DA            push d
4527   1C72 26 00 80      mov b, $8000
4528   1C75 FD AB         swp b
4529   1C77 D8            push b
4530   1C78 07 0F 08      call alloc
4531   1C7B 51 02 00      add sp, 2
4532   1C7E E7            pop d
4533   1C7F FD 43         mov [d], b
4534   1C81             
4535   1C81             ; --- BEGIN INLINE ASM BLOCK
4536   1C81               
4537   1C81               
4538   1C81               
4539   1C81               
4540   1C81               
4541   1C81             _load_hex:
4542   1C81 D7            push a
4543   1C82 D8            push b
4544   1C83 DA            push d
4545   1C84 E2            push si
4546   1C85 E3            push di
4547   1C86 52 00 80      sub sp, $8000      
4548   1C89 38 00 00      mov c, 0
4549   1C8C 48            mov a, sp
4550   1C8D 77            inc a
4551   1C8E 3C            mov d, a          
4552   1C8F 07 CC 1D      call _gets        
4553   1C92 4D            mov si, a
4554   1C93             __load_hex_loop:
4555   1C93 F6            lodsb             
4556   1C94 B9 00         cmp al, 0         
4557   1C96 C6 A4 1C      jz __load_hex_ret
4558   1C99 36            mov bh, al
4559   1C9A F6            lodsb
4560   1C9B 2F            mov bl, al
4561   1C9C 07 83 1D      call _atoi        
4562   1C9F F7            stosb             
4563   1CA0 78            inc c
4564   1CA1 0A 93 1C      jmp __load_hex_loop
4565   1CA4             __load_hex_ret:
4566   1CA4 51 00 80      add sp, $8000
4567   1CA7 F0            pop di
4568   1CA8 EF            pop si
4569   1CA9 E7            pop d
4570   1CAA E5            pop b
4571   1CAB E4            pop a
4572   1CAC             ; --- END INLINE ASM BLOCK
4573   1CAC             
4574   1CAC F9            leave
4575   1CAD 09            ret
4576   1CAE             
4577   1CAE             getparam:
4578   1CAE F8 00 00      enter 0 ; (push bp; mov bp, sp)
4579   1CB1             ; $data 
4580   1CB1 52 01 00      sub sp, 1
4581   1CB4             
4582   1CB4             ; --- BEGIN INLINE ASM BLOCK
4583   1CB4 19 04         mov al, 4
4584   1CB6 FA 05 00      lea d, [bp + 5] ; $address
4585   1CB9 FD 2A         mov d, [d]
4586   1CBB 05 0C         syscall sys_system
4587   1CBD FA 00 00      lea d, [bp + 0] ; $data
4588   1CC0 FD 3E         mov [d], bl
4589   1CC2             ; --- END INLINE ASM BLOCK
4590   1CC2             
4591   1CC2             ;; return data; 
4592   1CC2 FA 00 00      lea d, [bp + 0] ; $data
4593   1CC5 32            mov bl, [d]
4594   1CC6 A7 00         mov bh, 0
4595   1CC8 F9            leave
4596   1CC9 09            ret
4597   1CCA             
4598   1CCA             clear:
4599   1CCA F8 00 00      enter 0 ; (push bp; mov bp, sp)
4600   1CCD             ;; print("\033[2J\033[H"); 
4601   1CCD 26 DF 28      mov b, __s3 ; "\033[2J\033[H"
4602   1CD0 FD AB         swp b
4603   1CD2 D8            push b
4604   1CD3 07 2D 1C      call print
4605   1CD6 51 02 00      add sp, 2
4606   1CD9 F9            leave
4607   1CDA 09            ret
4608   1CDB             
4609   1CDB             include_stdio_asm:
4610   1CDB F8 00 00      enter 0 ; (push bp; mov bp, sp)
4611   1CDE             
4612   1CDE             ; --- BEGIN INLINE ASM BLOCK
4613   1CDE             .include "lib/asm/stdio.asm"
0001+  1CDE             ;-----------------------------------------------------------------------------
0002+  1CDE             ; stdio.s
0003+  1CDE             ;-----------------------------------------------------------------------------
0004+  1CDE             .include "lib/asm/string.asm"
0001++ 1CDE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1CDE             ; string.s
0003++ 1CDE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1CDE             
0005++ 1CDE             
0006++ 1CDE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1CDE             ; _strrev
0008++ 1CDE             ; reverse a string
0009++ 1CDE             ; D = string address
0010++ 1CDE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1CDE             ; 01234
0012++ 1CDE             _strrev:
0013++ 1CDE 4B          	pusha
0014++ 1CDF 07 25 1D    	call _strlen	; length in C
0015++ 1CE2 12          	mov a, c
0016++ 1CE3 AF 01 00    	cmp a, 1
0017++ 1CE6 D0 00 1D    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1CE9 7D          	dec a
0019++ 1CEA FD 4E       	mov si, d	; beginning of string
0020++ 1CEC FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1CEE 59          	add d, a	; end of string
0022++ 1CEF 12          	mov a, c
0023++ 1CF0 FD 9B       	shr a		; divide by 2
0024++ 1CF2 39          	mov c, a	; C now counts the steps
0025++ 1CF3             _strrev_L0:
0026++ 1CF3 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1CF4 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1CF5 3E          	mov [d], al	; store left char into right side
0029++ 1CF6 1B          	mov al, bl
0030++ 1CF7 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1CF8 7E          	dec c
0032++ 1CF9 7F          	dec d
0033++ 1CFA C2 00 00    	cmp c, 0
0034++ 1CFD C7 F3 1C    	jne _strrev_L0
0035++ 1D00             _strrev_end:
0036++ 1D00 4C          	popa
0037++ 1D01 09          	ret
0038++ 1D02             	
0039++ 1D02             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1D02             ; _strchr
0041++ 1D02             ; search string in D for char in AL
0042++ 1D02             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1D02             _strchr:
0044++ 1D02             _strchr_L0:
0045++ 1D02 32          	mov bl, [d]
0046++ 1D03 C1 00       	cmp bl, 0
0047++ 1D05 C6 10 1D    	je _strchr_end
0048++ 1D08 BA          	cmp al, bl
0049++ 1D09 C6 10 1D    	je _strchr_end
0050++ 1D0C 79          	inc d
0051++ 1D0D 0A 02 1D    	jmp _strchr_L0
0052++ 1D10             _strchr_end:
0053++ 1D10 1B          	mov al, bl
0054++ 1D11 09          	ret
0055++ 1D12             
0056++ 1D12             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1D12             ; _strstr
0058++ 1D12             ; find sub-string
0059++ 1D12             ; str1 in SI
0060++ 1D12             ; str2 in DI
0061++ 1D12             ; SI points to end of source string
0062++ 1D12             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1D12             _strstr:
0064++ 1D12 DB          	push al
0065++ 1D13 DA          	push d
0066++ 1D14 E3          	push di
0067++ 1D15             _strstr_loop:
0068++ 1D15 F3          	cmpsb					; compare a byte of the strings
0069++ 1D16 C7 21 1D    	jne _strstr_ret
0070++ 1D19 FC 00 00    	lea d, [di + 0]
0071++ 1D1C BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1D1E C7 15 1D    	jne _strstr_loop				; equal chars but not at end
0073++ 1D21             _strstr_ret:
0074++ 1D21 F0          	pop di
0075++ 1D22 E7          	pop d
0076++ 1D23 E8          	pop al
0077++ 1D24 09          	ret
0078++ 1D25             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1D25             ; length of null terminated string
0080++ 1D25             ; result in C
0081++ 1D25             ; pointer in D
0082++ 1D25             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1D25             _strlen:
0084++ 1D25 DA          	push d
0085++ 1D26 38 00 00    	mov c, 0
0086++ 1D29             _strlen_L1:
0087++ 1D29 BD 00       	cmp byte [d], 0
0088++ 1D2B C6 33 1D    	je _strlen_ret
0089++ 1D2E 79          	inc d
0090++ 1D2F 78          	inc c
0091++ 1D30 0A 29 1D    	jmp _strlen_L1
0092++ 1D33             _strlen_ret:
0093++ 1D33 E7          	pop d
0094++ 1D34 09          	ret
0095++ 1D35             
0096++ 1D35             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1D35             ; STRCMP
0098++ 1D35             ; compare two strings
0099++ 1D35             ; str1 in SI
0100++ 1D35             ; str2 in DI
0101++ 1D35             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1D35             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1D35             _strcmp:
0104++ 1D35 DB          	push al
0105++ 1D36 DA          	push d
0106++ 1D37 E3          	push di
0107++ 1D38 E2          	push si
0108++ 1D39             _strcmp_loop:
0109++ 1D39 F3          	cmpsb					; compare a byte of the strings
0110++ 1D3A C7 45 1D    	jne _strcmp_ret
0111++ 1D3D FB FF FF    	lea d, [si +- 1]
0112++ 1D40 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1D42 C7 39 1D    	jne _strcmp_loop				; equal chars but not at end
0114++ 1D45             _strcmp_ret:
0115++ 1D45 EF          	pop si
0116++ 1D46 F0          	pop di
0117++ 1D47 E7          	pop d
0118++ 1D48 E8          	pop al
0119++ 1D49 09          	ret
0120++ 1D4A             
0121++ 1D4A             
0122++ 1D4A             ; STRCPY
0123++ 1D4A             ; copy null terminated string from SI to DI
0124++ 1D4A             ; source in SI
0125++ 1D4A             ; destination in DI
0126++ 1D4A             _strcpy:
0127++ 1D4A E2          	push si
0128++ 1D4B E3          	push di
0129++ 1D4C DB          	push al
0130++ 1D4D             _strcpy_L1:
0131++ 1D4D F6          	lodsb
0132++ 1D4E F7          	stosb
0133++ 1D4F B9 00       	cmp al, 0
0134++ 1D51 C7 4D 1D    	jne _strcpy_L1
0135++ 1D54             _strcpy_end:
0136++ 1D54 E8          	pop al
0137++ 1D55 F0          	pop di
0138++ 1D56 EF          	pop si
0139++ 1D57 09          	ret
0140++ 1D58             
0141++ 1D58             ; STRCAT
0142++ 1D58             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1D58             ; source in SI
0144++ 1D58             ; destination in DI
0145++ 1D58             _strcat:
0146++ 1D58 E2          	push si
0147++ 1D59 E3          	push di
0148++ 1D5A D7          	push a
0149++ 1D5B DA          	push d
0150++ 1D5C 50          	mov a, di
0151++ 1D5D 3C          	mov d, a
0152++ 1D5E             _strcat_goto_end_L1:
0153++ 1D5E BD 00       	cmp byte[d], 0
0154++ 1D60 C6 67 1D    	je _strcat_start
0155++ 1D63 79          	inc d
0156++ 1D64 0A 5E 1D    	jmp _strcat_goto_end_L1
0157++ 1D67             _strcat_start:
0158++ 1D67 FD 50       	mov di, d
0159++ 1D69             _strcat_L1:
0160++ 1D69 F6          	lodsb
0161++ 1D6A F7          	stosb
0162++ 1D6B B9 00       	cmp al, 0
0163++ 1D6D C7 69 1D    	jne _strcat_L1
0164++ 1D70             _strcat_end:
0165++ 1D70 E7          	pop d
0166++ 1D71 E4          	pop a
0167++ 1D72 F0          	pop di
0168++ 1D73 EF          	pop si
0169++ 1D74 09          	ret
0170++ 1D75             
0171++ 1D75             
0005+  1D75             
0006+  1D75             ;-----------------------------------------------------------------------------
0007+  1D75             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  1D75             ; ASCII in BL
0009+  1D75             ; result in AL
0010+  1D75             ; ascii for F = 0100 0110
0011+  1D75             ; ascii for 9 = 0011 1001
0012+  1D75             ;-----------------------------------------------------------------------------
0013+  1D75             hex_ascii_encode:
0014+  1D75 1B            mov al, bl
0015+  1D76 93 40         test al, $40        ; test if letter or number
0016+  1D78 C7 7E 1D      jnz hex_letter
0017+  1D7B 87 0F         and al, $0F        ; get number
0018+  1D7D 09            ret
0019+  1D7E             hex_letter:
0020+  1D7E 87 0F         and al, $0F        ; get letter
0021+  1D80 6A 09         add al, 9
0022+  1D82 09            ret
0023+  1D83             
0024+  1D83             ;-----------------------------------------------------------------------------
0025+  1D83             ; ATOI
0026+  1D83             ; 2 letter hex string in B
0027+  1D83             ; 8bit integer returned in AL
0028+  1D83             ;-----------------------------------------------------------------------------
0029+  1D83             _atoi:
0030+  1D83 D8            push b
0031+  1D84 07 75 1D      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  1D87 30            mov bl, bh
0033+  1D88 DB            push al          ; save a
0034+  1D89 07 75 1D      call hex_ascii_encode
0035+  1D8C EA            pop bl  
0036+  1D8D FD 9E 04      shl al, 4
0037+  1D90 8C            or al, bl
0038+  1D91 E5            pop b
0039+  1D92 09            ret  
0040+  1D93             
0041+  1D93             
0042+  1D93             ;-----------------------------------------------------------------------------
0043+  1D93             ; ITOA
0044+  1D93             ; 8bit value in BL
0045+  1D93             ; 2 byte ASCII result in A
0046+  1D93             ;-----------------------------------------------------------------------------
0047+  1D93             _itoa:
0048+  1D93 DA            push d
0049+  1D94 D8            push b
0050+  1D95 A7 00         mov bh, 0
0051+  1D97 FD A4 04      shr bl, 4  
0052+  1D9A 74            mov d, b
0053+  1D9B 1F 43 20      mov al, [d + s_hex_digits]
0054+  1D9E 23            mov ah, al
0055+  1D9F               
0056+  1D9F E5            pop b
0057+  1DA0 D8            push b
0058+  1DA1 A7 00         mov bh, 0
0059+  1DA3 FD 87 0F      and bl, $0F
0060+  1DA6 74            mov d, b
0061+  1DA7 1F 43 20      mov al, [d + s_hex_digits]
0062+  1DAA E5            pop b
0063+  1DAB E7            pop d
0064+  1DAC 09            ret
0065+  1DAD             
0066+  1DAD             ;-----------------------------------------------------------------------------
0067+  1DAD             ; HEX STRING TO BINARY
0068+  1DAD             ; di = destination address
0069+  1DAD             ; si = source
0070+  1DAD             ;-----------------------------------------------------------------------------
0071+  1DAD             _hex_to_int:
0072+  1DAD             _hex_to_int_L1:
0073+  1DAD F6            lodsb          ; load from [SI] to AL
0074+  1DAE B9 00         cmp al, 0        ; check if ASCII 0
0075+  1DB0 C6 BD 1D      jz _hex_to_int_ret
0076+  1DB3 36            mov bh, al
0077+  1DB4 F6            lodsb
0078+  1DB5 2F            mov bl, al
0079+  1DB6 07 83 1D      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  1DB9 F7            stosb          ; store AL to [DI]
0081+  1DBA 0A AD 1D      jmp _hex_to_int_L1
0082+  1DBD             _hex_to_int_ret:
0083+  1DBD 09            ret    
0084+  1DBE             
0085+  1DBE             ;-----------------------------------------------------------------------------
0086+  1DBE             ; GETCHAR
0087+  1DBE             ; char in ah
0088+  1DBE             ;-----------------------------------------------------------------------------
0089+  1DBE             getch:
0090+  1DBE DB            push al
0091+  1DBF             getch_retry:
0092+  1DBF 19 01         mov al, 1
0093+  1DC1 05 03         syscall sys_io      ; receive in AH
0094+  1DC3 E8            pop al
0095+  1DC4 09            ret
0096+  1DC5             
0097+  1DC5             ;-----------------------------------------------------------------------------
0098+  1DC5             ; PUTCHAR
0099+  1DC5             ; char in ah
0100+  1DC5             ;-----------------------------------------------------------------------------
0101+  1DC5             _putchar:
0102+  1DC5 D7            push a
0103+  1DC6 19 00         mov al, 0
0104+  1DC8 05 03         syscall sys_io      ; char in AH
0105+  1DCA E4            pop a
0106+  1DCB 09            ret
0107+  1DCC             
0108+  1DCC             ;-----------------------------------------------------------------------------
0109+  1DCC             ;; INPUT A STRING
0110+  1DCC             ;; terminates with null
0111+  1DCC             ;; pointer in D
0112+  1DCC             ;-----------------------------------------------------------------------------
0113+  1DCC             _gets:
0114+  1DCC D7            push a
0115+  1DCD DA            push d
0116+  1DCE             _gets_loop:
0117+  1DCE 19 01         mov al, 1
0118+  1DD0 05 03         syscall sys_io      ; receive in AH
0119+  1DD2 B9 00         cmp al, 0        ; check error code (AL)
0120+  1DD4 C6 CE 1D      je _gets_loop      ; if no char received, retry
0121+  1DD7             
0122+  1DD7 76 1B         cmp ah, 27
0123+  1DD9 C6 FA 1D      je _gets_ansi_esc
0124+  1DDC 76 0A         cmp ah, $0A        ; LF
0125+  1DDE C6 65 1E      je _gets_end
0126+  1DE1 76 0D         cmp ah, $0D        ; CR
0127+  1DE3 C6 65 1E      je _gets_end
0128+  1DE6 76 5C         cmp ah, $5C        ; '\\'
0129+  1DE8 C6 26 1E      je _gets_escape
0130+  1DEB               
0131+  1DEB 76 08         cmp ah, $08      ; check for backspace
0132+  1DED C6 F6 1D      je _gets_backspace
0133+  1DF0             
0134+  1DF0 1A            mov al, ah
0135+  1DF1 3E            mov [d], al
0136+  1DF2 79            inc d
0137+  1DF3 0A CE 1D      jmp _gets_loop
0138+  1DF6             _gets_backspace:
0139+  1DF6 7F            dec d
0140+  1DF7 0A CE 1D      jmp _gets_loop
0141+  1DFA             _gets_ansi_esc:
0142+  1DFA 19 01         mov al, 1
0143+  1DFC 05 03         syscall sys_io        ; receive in AH without echo
0144+  1DFE B9 00         cmp al, 0          ; check error code (AL)
0145+  1E00 C6 FA 1D      je _gets_ansi_esc    ; if no char received, retry
0146+  1E03 76 5B         cmp ah, '['
0147+  1E05 C7 CE 1D      jne _gets_loop
0148+  1E08             _gets_ansi_esc_2:
0149+  1E08 19 01         mov al, 1
0150+  1E0A 05 03         syscall sys_io          ; receive in AH without echo
0151+  1E0C B9 00         cmp al, 0            ; check error code (AL)
0152+  1E0E C6 08 1E      je _gets_ansi_esc_2  ; if no char received, retry
0153+  1E11 76 44         cmp ah, 'D'
0154+  1E13 C6 1E 1E      je _gets_left_arrow
0155+  1E16 76 43         cmp ah, 'C'
0156+  1E18 C6 22 1E      je _gets_right_arrow
0157+  1E1B 0A CE 1D      jmp _gets_loop
0158+  1E1E             _gets_left_arrow:
0159+  1E1E 7F            dec d
0160+  1E1F 0A CE 1D      jmp _gets_loop
0161+  1E22             _gets_right_arrow:
0162+  1E22 79            inc d
0163+  1E23 0A CE 1D      jmp _gets_loop
0164+  1E26             _gets_escape:
0165+  1E26 19 01         mov al, 1
0166+  1E28 05 03         syscall sys_io      ; receive in AH
0167+  1E2A B9 00         cmp al, 0        ; check error code (AL)
0168+  1E2C C6 26 1E      je _gets_escape      ; if no char received, retry
0169+  1E2F 76 6E         cmp ah, 'n'
0170+  1E31 C6 50 1E      je _gets_LF
0171+  1E34 76 72         cmp ah, 'r'
0172+  1E36 C6 57 1E      je _gets_CR
0173+  1E39 76 30         cmp ah, '0'
0174+  1E3B C6 5E 1E      je _gets_NULL
0175+  1E3E 76 5C         cmp ah, $5C  ; '\'
0176+  1E40 C6 49 1E      je _gets_slash
0177+  1E43 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  1E44 3E            mov [d], al
0179+  1E45 79            inc d
0180+  1E46 0A CE 1D      jmp _gets_loop
0181+  1E49             _gets_slash:
0182+  1E49 19 5C         mov al, $5C
0183+  1E4B 3E            mov [d], al
0184+  1E4C 79            inc d
0185+  1E4D 0A CE 1D      jmp _gets_loop
0186+  1E50             _gets_LF:
0187+  1E50 19 0A         mov al, $0A
0188+  1E52 3E            mov [d], al
0189+  1E53 79            inc d
0190+  1E54 0A CE 1D      jmp _gets_loop
0191+  1E57             _gets_CR:
0192+  1E57 19 0D         mov al, $0D
0193+  1E59 3E            mov [d], al
0194+  1E5A 79            inc d
0195+  1E5B 0A CE 1D      jmp _gets_loop
0196+  1E5E             _gets_NULL:
0197+  1E5E 19 00         mov al, $00
0198+  1E60 3E            mov [d], al
0199+  1E61 79            inc d
0200+  1E62 0A CE 1D      jmp _gets_loop
0201+  1E65             _gets_end:
0202+  1E65 19 00         mov al, 0
0203+  1E67 3E            mov [d], al        ; terminate string
0204+  1E68 E7            pop d
0205+  1E69 E4            pop a
0206+  1E6A 09            ret
0207+  1E6B             
0208+  1E6B             ;-----------------------------------------------------------------------------
0209+  1E6B             ;; INPUT TEXT
0210+  1E6B             ;; terminated with CTRL+D
0211+  1E6B             ;; pointer in D
0212+  1E6B             ;-----------------------------------------------------------------------------
0213+  1E6B             _gettxt:
0214+  1E6B D7            push a
0215+  1E6C DA            push d
0216+  1E6D             _gettxt_loop:
0217+  1E6D 19 01         mov al, 1
0218+  1E6F 05 03         syscall sys_io      ; receive in AH
0219+  1E71 B9 00         cmp al, 0        ; check error code (AL)
0220+  1E73 C6 6D 1E      je _gettxt_loop    ; if no char received, retry
0221+  1E76 76 04         cmp ah, 4      ; EOT
0222+  1E78 C6 B6 1E      je _gettxt_end
0223+  1E7B 76 08         cmp ah, $08      ; check for backspace
0224+  1E7D C6 B2 1E      je _gettxt_backspace
0225+  1E80 76 5C         cmp ah, $5C        ; '\'
0226+  1E82 C6 8B 1E      je _gettxt_escape
0227+  1E85 1A            mov al, ah
0228+  1E86 3E            mov [d], al
0229+  1E87 79            inc d
0230+  1E88 0A 6D 1E      jmp _gettxt_loop
0231+  1E8B             _gettxt_escape:
0232+  1E8B 19 01         mov al, 1
0233+  1E8D 05 03         syscall sys_io      ; receive in AH
0234+  1E8F B9 00         cmp al, 0        ; check error code (AL)
0235+  1E91 C6 8B 1E      je _gettxt_escape    ; if no char received, retry
0236+  1E94 76 6E         cmp ah, 'n'
0237+  1E96 C6 A4 1E      je _gettxt_LF
0238+  1E99 76 72         cmp ah, 'r'
0239+  1E9B C6 AB 1E      je _gettxt_CR
0240+  1E9E 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  1E9F 3E            mov [d], al
0242+  1EA0 79            inc d
0243+  1EA1 0A 6D 1E      jmp _gettxt_loop
0244+  1EA4             _gettxt_LF:
0245+  1EA4 19 0A         mov al, $0A
0246+  1EA6 3E            mov [d], al
0247+  1EA7 79            inc d
0248+  1EA8 0A 6D 1E      jmp _gettxt_loop
0249+  1EAB             _gettxt_CR:
0250+  1EAB 19 0D         mov al, $0D
0251+  1EAD 3E            mov [d], al
0252+  1EAE 79            inc d
0253+  1EAF 0A 6D 1E      jmp _gettxt_loop
0254+  1EB2             _gettxt_backspace:
0255+  1EB2 7F            dec d
0256+  1EB3 0A 6D 1E      jmp _gettxt_loop
0257+  1EB6             _gettxt_end:
0258+  1EB6 19 00         mov al, 0
0259+  1EB8 3E            mov [d], al        ; terminate string
0260+  1EB9 E7            pop d
0261+  1EBA E4            pop a
0262+  1EBB 09            ret
0263+  1EBC             
0264+  1EBC             ;-----------------------------------------------------------------------------
0265+  1EBC             ; PRINT NEW LINE
0266+  1EBC             ;-----------------------------------------------------------------------------
0267+  1EBC             printnl:
0268+  1EBC D7            push a
0269+  1EBD 10 00 0A      mov a, $0A00
0270+  1EC0 05 03         syscall sys_io
0271+  1EC2 10 00 0D      mov a, $0D00
0272+  1EC5 05 03         syscall sys_io
0273+  1EC7 E4            pop a
0274+  1EC8 09            ret
0275+  1EC9             
0276+  1EC9             ;-----------------------------------------------------------------------------
0277+  1EC9             ; _strtoint
0278+  1EC9             ; 4 digit hex string number in d
0279+  1EC9             ; integer returned in A
0280+  1EC9             ;-----------------------------------------------------------------------------
0281+  1EC9             _strtointx:
0282+  1EC9 D8            push b
0283+  1ECA 32            mov bl, [d]
0284+  1ECB 37            mov bh, bl
0285+  1ECC 33 01 00      mov bl, [d + 1]
0286+  1ECF 07 83 1D      call _atoi        ; convert to int in AL
0287+  1ED2 23            mov ah, al        ; move to AH
0288+  1ED3 33 02 00      mov bl, [d + 2]
0289+  1ED6 37            mov bh, bl
0290+  1ED7 33 03 00      mov bl, [d + 3]
0291+  1EDA 07 83 1D      call _atoi        ; convert to int in AL
0292+  1EDD E5            pop b
0293+  1EDE 09            ret
0294+  1EDF             
0295+  1EDF             ;-----------------------------------------------------------------------------
0296+  1EDF             ; _strtoint
0297+  1EDF             ; 5 digit base10 string number in d
0298+  1EDF             ; integer returned in A
0299+  1EDF             ;-----------------------------------------------------------------------------
0300+  1EDF             _strtoint:
0301+  1EDF E2            push si
0302+  1EE0 D8            push b
0303+  1EE1 D9            push c
0304+  1EE2 DA            push d
0305+  1EE3 07 25 1D      call _strlen      ; get string length in C
0306+  1EE6 7E            dec c
0307+  1EE7 FD 4E         mov si, d
0308+  1EE9 12            mov a, c
0309+  1EEA FD 99         shl a
0310+  1EEC 3B 5B 20      mov d, table_power
0311+  1EEF 59            add d, a
0312+  1EF0 38 00 00      mov c, 0
0313+  1EF3             _strtoint_L0:
0314+  1EF3 F6            lodsb      ; load ASCII to al
0315+  1EF4 B9 00         cmp al, 0
0316+  1EF6 C6 09 1F      je _strtoint_end
0317+  1EF9 6F 30         sub al, $30    ; make into integer
0318+  1EFB 22 00         mov ah, 0
0319+  1EFD 2A            mov b, [d]
0320+  1EFE AC            mul a, b      ; result in B since it fits in 16bits
0321+  1EFF 11            mov a, b
0322+  1F00 28            mov b, c
0323+  1F01 54            add a, b
0324+  1F02 39            mov c, a
0325+  1F03 63 02 00      sub d, 2
0326+  1F06 0A F3 1E      jmp _strtoint_L0
0327+  1F09             _strtoint_end:
0328+  1F09 12            mov a, c
0329+  1F0A E7            pop d
0330+  1F0B E6            pop c
0331+  1F0C E5            pop b
0332+  1F0D EF            pop si
0333+  1F0E 09            ret
0334+  1F0F             
0335+  1F0F             ;-----------------------------------------------------------------------------
0336+  1F0F             ; PRINT NULL TERMINATED STRING
0337+  1F0F             ; pointer in D
0338+  1F0F             ;-----------------------------------------------------------------------------
0339+  1F0F             _puts:
0340+  1F0F D7            push a
0341+  1F10 DA            push d
0342+  1F11             _puts_L1:
0343+  1F11 1E            mov al, [d]
0344+  1F12 B9 00         cmp al, 0
0345+  1F14 C6 20 1F      jz _puts_END
0346+  1F17 23            mov ah, al
0347+  1F18 19 00         mov al, 0
0348+  1F1A 05 03         syscall sys_io
0349+  1F1C 79            inc d
0350+  1F1D 0A 11 1F      jmp _puts_L1
0351+  1F20             _puts_END:
0352+  1F20 E7            pop d
0353+  1F21 E4            pop a
0354+  1F22 09            ret
0355+  1F23             
0356+  1F23             ;-----------------------------------------------------------------------------
0357+  1F23             ; PRINT N SIZE STRING
0358+  1F23             ; pointer in D
0359+  1F23             ; size in C
0360+  1F23             ;-----------------------------------------------------------------------------
0361+  1F23             _putsn:
0362+  1F23 DB            push al
0363+  1F24 DA            push d
0364+  1F25 D9            push c
0365+  1F26             _putsn_L0:
0366+  1F26 1E            mov al, [d]
0367+  1F27 23            mov ah, al
0368+  1F28 19 00         mov al, 0
0369+  1F2A 05 03         syscall sys_io
0370+  1F2C 79            inc d
0371+  1F2D 7E            dec c  
0372+  1F2E C2 00 00      cmp c, 0
0373+  1F31 C7 26 1F      jne _putsn_L0
0374+  1F34             _putsn_end:
0375+  1F34 E6            pop c
0376+  1F35 E7            pop d
0377+  1F36 E8            pop al
0378+  1F37 09            ret
0379+  1F38             
0380+  1F38             ;-----------------------------------------------------------------------------
0381+  1F38             ; print 16bit decimal number
0382+  1F38             ; input number in A
0383+  1F38             ;-----------------------------------------------------------------------------
0384+  1F38             print_u16d:
0385+  1F38 D7            push a
0386+  1F39 D8            push b
0387+  1F3A 26 10 27      mov b, 10000
0388+  1F3D AE            div a, b      ; get 10000's coeff.
0389+  1F3E 07 60 1F      call print_number
0390+  1F41 11            mov a, b
0391+  1F42 26 E8 03      mov b, 1000
0392+  1F45 AE            div a, b      ; get 1000's coeff.
0393+  1F46 07 60 1F      call print_number
0394+  1F49 11            mov a, b
0395+  1F4A 26 64 00      mov b, 100
0396+  1F4D AE            div a, b
0397+  1F4E 07 60 1F      call print_number
0398+  1F51 11            mov a, b
0399+  1F52 26 0A 00      mov b, 10
0400+  1F55 AE            div a, b
0401+  1F56 07 60 1F      call print_number
0402+  1F59 1B            mov al, bl      ; 1's coeff in bl
0403+  1F5A 07 60 1F      call print_number
0404+  1F5D E5            pop b
0405+  1F5E E4            pop a
0406+  1F5F 09            ret
0407+  1F60             
0408+  1F60             ;-----------------------------------------------------------------------------
0409+  1F60             ; print AL
0410+  1F60             ;-----------------------------------------------------------------------------
0411+  1F60             print_number:
0412+  1F60 6A 30         add al, $30
0413+  1F62 23            mov ah, al
0414+  1F63 07 C5 1D      call _putchar
0415+  1F66 09            ret
0416+  1F67             
0417+  1F67             ;-----------------------------------------------------------------------------
0418+  1F67             ; PRINT 16BIT HEX INTEGER
0419+  1F67             ; integer value in reg B
0420+  1F67             ;-----------------------------------------------------------------------------
0421+  1F67             print_u16x:
0422+  1F67 D7            push a
0423+  1F68 D8            push b
0424+  1F69 DD            push bl
0425+  1F6A 30            mov bl, bh
0426+  1F6B 07 93 1D      call _itoa        ; convert bh to char in A
0427+  1F6E 2F            mov bl, al        ; save al
0428+  1F6F 19 00         mov al, 0
0429+  1F71 05 03         syscall sys_io        ; display AH
0430+  1F73 24            mov ah, bl        ; retrieve al
0431+  1F74 19 00         mov al, 0
0432+  1F76 05 03         syscall sys_io        ; display AL
0433+  1F78             
0434+  1F78 EA            pop bl
0435+  1F79 07 93 1D      call _itoa        ; convert bh to char in A
0436+  1F7C 2F            mov bl, al        ; save al
0437+  1F7D 19 00         mov al, 0
0438+  1F7F 05 03         syscall sys_io        ; display AH
0439+  1F81 24            mov ah, bl        ; retrieve al
0440+  1F82 19 00         mov al, 0
0441+  1F84 05 03         syscall sys_io        ; display AL
0442+  1F86             
0443+  1F86 E5            pop b
0444+  1F87 E4            pop a
0445+  1F88 09            ret
0446+  1F89             
0447+  1F89             ;-----------------------------------------------------------------------------
0448+  1F89             ; INPUT 16BIT HEX INTEGER
0449+  1F89             ; read 16bit integer into A
0450+  1F89             ;-----------------------------------------------------------------------------
0451+  1F89             scan_u16x:
0452+  1F89 F8 10 00      enter 16
0453+  1F8C D8            push b
0454+  1F8D DA            push d
0455+  1F8E             
0456+  1F8E FA F1 FF      lea d, [bp + -15]
0457+  1F91 07 CC 1D      call _gets        ; get number
0458+  1F94             
0459+  1F94 32            mov bl, [d]
0460+  1F95 37            mov bh, bl
0461+  1F96 33 01 00      mov bl, [d + 1]
0462+  1F99 07 83 1D      call _atoi        ; convert to int in AL
0463+  1F9C 23            mov ah, al        ; move to AH
0464+  1F9D             
0465+  1F9D 33 02 00      mov bl, [d + 2]
0466+  1FA0 37            mov bh, bl
0467+  1FA1 33 03 00      mov bl, [d + 3]
0468+  1FA4 07 83 1D      call _atoi        ; convert to int in AL
0469+  1FA7             
0470+  1FA7 E7            pop d
0471+  1FA8 E5            pop b
0472+  1FA9 F9            leave
0473+  1FAA 09            ret
0474+  1FAB             
0475+  1FAB             ;-----------------------------------------------------------------------------
0476+  1FAB             ; PRINT 8bit HEX INTEGER
0477+  1FAB             ; integer value in reg bl
0478+  1FAB             ;-----------------------------------------------------------------------------
0479+  1FAB             print_u8x:
0480+  1FAB D7            push a
0481+  1FAC DD            push bl
0482+  1FAD             
0483+  1FAD 07 93 1D      call _itoa        ; convert bl to char in A
0484+  1FB0 2F            mov bl, al        ; save al
0485+  1FB1 19 00         mov al, 0
0486+  1FB3 05 03         syscall sys_io        ; display AH
0487+  1FB5 24            mov ah, bl        ; retrieve al
0488+  1FB6 19 00         mov al, 0
0489+  1FB8 05 03         syscall sys_io        ; display AL
0490+  1FBA             
0491+  1FBA EA            pop bl
0492+  1FBB E4            pop a
0493+  1FBC 09            ret
0494+  1FBD             
0495+  1FBD             ;-----------------------------------------------------------------------------
0496+  1FBD             ; print 8bit decimal unsigned number
0497+  1FBD             ; input number in AL
0498+  1FBD             ;-----------------------------------------------------------------------------
0499+  1FBD             print_u8d:
0500+  1FBD D7            push a
0501+  1FBE D8            push b
0502+  1FBF             
0503+  1FBF 22 00         mov ah, 0
0504+  1FC1 26 64 00      mov b, 100
0505+  1FC4 AE            div a, b
0506+  1FC5 D8            push b      ; save remainder
0507+  1FC6 B9 00         cmp al, 0
0508+  1FC8 C6 D2 1F      je skip100
0509+  1FCB 6A 30         add al, $30
0510+  1FCD 23            mov ah, al
0511+  1FCE 19 00         mov al, 0
0512+  1FD0 05 03         syscall sys_io  ; print coeff
0513+  1FD2             skip100:
0514+  1FD2 E4            pop a
0515+  1FD3 22 00         mov ah, 0
0516+  1FD5 26 0A 00      mov b, 10
0517+  1FD8 AE            div a, b
0518+  1FD9 D8            push b      ; save remainder
0519+  1FDA B9 00         cmp al, 0
0520+  1FDC C6 E6 1F      je skip10
0521+  1FDF 6A 30         add al, $30
0522+  1FE1 23            mov ah, al
0523+  1FE2 19 00         mov al, 0
0524+  1FE4 05 03         syscall sys_io  ; print coeff
0525+  1FE6             skip10:
0526+  1FE6 E4            pop a
0527+  1FE7 1B            mov al, bl
0528+  1FE8 6A 30         add al, $30
0529+  1FEA 23            mov ah, al
0530+  1FEB 19 00         mov al, 0
0531+  1FED 05 03         syscall sys_io  ; print coeff
0532+  1FEF E5            pop b
0533+  1FF0 E4            pop a
0534+  1FF1 09            ret
0535+  1FF2             
0536+  1FF2             ;-----------------------------------------------------------------------------
0537+  1FF2             ; INPUT 8BIT HEX INTEGER
0538+  1FF2             ; read 8bit integer into AL
0539+  1FF2             ;-----------------------------------------------------------------------------
0540+  1FF2             scan_u8x:
0541+  1FF2 F8 04 00      enter 4
0542+  1FF5 D8            push b
0543+  1FF6 DA            push d
0544+  1FF7             
0545+  1FF7 FA FD FF      lea d, [bp + -3]
0546+  1FFA 07 CC 1D      call _gets        ; get number
0547+  1FFD             
0548+  1FFD 32            mov bl, [d]
0549+  1FFE 37            mov bh, bl
0550+  1FFF 33 01 00      mov bl, [d + 1]
0551+  2002 07 83 1D      call _atoi        ; convert to int in AL
0552+  2005             
0553+  2005 E7            pop d
0554+  2006 E5            pop b
0555+  2007 F9            leave
0556+  2008 09            ret
0557+  2009             
0558+  2009             ;-----------------------------------------------------------------------------
0559+  2009             ; input decimal number
0560+  2009             ; result in A
0561+  2009             ; 655'\0'
0562+  2009             ; low--------high
0563+  2009             ;-----------------------------------------------------------------------------
0564+  2009             scan_u16d:
0565+  2009 F8 08 00      enter 8
0566+  200C E2            push si
0567+  200D D8            push b
0568+  200E D9            push c
0569+  200F DA            push d
0570+  2010 FA F9 FF      lea d, [bp +- 7]
0571+  2013 07 CC 1D      call _gets
0572+  2016 07 25 1D      call _strlen      ; get string length in C
0573+  2019 7E            dec c
0574+  201A FD 4E         mov si, d
0575+  201C 12            mov a, c
0576+  201D FD 99         shl a
0577+  201F 3B 5B 20      mov d, table_power
0578+  2022 59            add d, a
0579+  2023 38 00 00      mov c, 0
0580+  2026             mul_loop:
0581+  2026 F6            lodsb      ; load ASCII to al
0582+  2027 B9 00         cmp al, 0
0583+  2029 C6 3C 20      je mul_exit
0584+  202C 6F 30         sub al, $30    ; make into integer
0585+  202E 22 00         mov ah, 0
0586+  2030 2A            mov b, [d]
0587+  2031 AC            mul a, b      ; result in B since it fits in 16bits
0588+  2032 11            mov a, b
0589+  2033 28            mov b, c
0590+  2034 54            add a, b
0591+  2035 39            mov c, a
0592+  2036 63 02 00      sub d, 2
0593+  2039 0A 26 20      jmp mul_loop
0594+  203C             mul_exit:
0595+  203C 12            mov a, c
0596+  203D E7            pop d
0597+  203E E6            pop c
0598+  203F E5            pop b
0599+  2040 EF            pop si
0600+  2041 F9            leave
0601+  2042 09            ret
0602+  2043             
0603+  2043 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  2047 34 35 36 37 
0603+  204B 38 39 41 42 
0603+  204F 43 44 45 46 
0604+  2053 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  2057 1B 5B 48 00 
0605+  205B             
0606+  205B             table_power:
0607+  205B 01 00         .dw 1
0608+  205D 0A 00         .dw 10
0609+  205F 64 00         .dw 100
0610+  2061 E8 03         .dw 1000
0611+  2063 10 27         .dw 100004614   2065             ; --- END INLINE ASM BLOCK
4615   2065             
4616   2065 F9            leave
4617   2066 09            ret
4618   2067             
4619   2067             test0:
4620   2067 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4621   206A             ; $result 
4622   206A             ; $pass 
4623   206A 10 01 00      mov a, $1
4624   206D 45 FD FF      mov [bp + -3], a
4625   2070             ; $c 
4626   2070             ; $i 
4627   2070             ; $ca 
4628   2070             ; $ia 
4629   2070 52 16 00      sub sp, 22
4630   2073             ;; c = 'A'; 
4631   2073 FA FC FF      lea d, [bp + -4] ; $c
4632   2076 DA            push d
4633   2077 26 41 00      mov b, $41
4634   207A E7            pop d
4635   207B FD 3E         mov [d], bl
4636   207D             ;; i = 55; 
4637   207D FA FA FF      lea d, [bp + -6] ; $i
4638   2080 DA            push d
4639   2081 26 37 00      mov b, $37
4640   2084 E7            pop d
4641   2085 FD 43         mov [d], b
4642   2087             ;; ca[0] = 'A'; 
4643   2087 FA F5 FF      lea d, [bp + -11] ; $ca
4644   208A D7            push a
4645   208B DA            push d
4646   208C 26 00 00      mov b, $0
4647   208F E7            pop d
4648   2090 5A            add d, b
4649   2091 E4            pop a
4650   2092 DA            push d
4651   2093 26 41 00      mov b, $41
4652   2096 E7            pop d
4653   2097 FD 3E         mov [d], bl
4654   2099             ;; ca[1] = 'B'; 
4655   2099 FA F5 FF      lea d, [bp + -11] ; $ca
4656   209C D7            push a
4657   209D DA            push d
4658   209E 26 01 00      mov b, $1
4659   20A1 E7            pop d
4660   20A2 5A            add d, b
4661   20A3 E4            pop a
4662   20A4 DA            push d
4663   20A5 26 42 00      mov b, $42
4664   20A8 E7            pop d
4665   20A9 FD 3E         mov [d], bl
4666   20AB             ;; ca[2] = 'C'; 
4667   20AB FA F5 FF      lea d, [bp + -11] ; $ca
4668   20AE D7            push a
4669   20AF DA            push d
4670   20B0 26 02 00      mov b, $2
4671   20B3 E7            pop d
4672   20B4 5A            add d, b
4673   20B5 E4            pop a
4674   20B6 DA            push d
4675   20B7 26 43 00      mov b, $43
4676   20BA E7            pop d
4677   20BB FD 3E         mov [d], bl
4678   20BD             ;; ca[3] = 'D'; 
4679   20BD FA F5 FF      lea d, [bp + -11] ; $ca
4680   20C0 D7            push a
4681   20C1 DA            push d
4682   20C2 26 03 00      mov b, $3
4683   20C5 E7            pop d
4684   20C6 5A            add d, b
4685   20C7 E4            pop a
4686   20C8 DA            push d
4687   20C9 26 44 00      mov b, $44
4688   20CC E7            pop d
4689   20CD FD 3E         mov [d], bl
4690   20CF             ;; ca[4] = 'E'; 
4691   20CF FA F5 FF      lea d, [bp + -11] ; $ca
4692   20D2 D7            push a
4693   20D3 DA            push d
4694   20D4 26 04 00      mov b, $4
4695   20D7 E7            pop d
4696   20D8 5A            add d, b
4697   20D9 E4            pop a
4698   20DA DA            push d
4699   20DB 26 45 00      mov b, $45
4700   20DE E7            pop d
4701   20DF FD 3E         mov [d], bl
4702   20E1             ;; ia[0] = 0; 
4703   20E1 FA EB FF      lea d, [bp + -21] ; $ia
4704   20E4 D7            push a
4705   20E5 DA            push d
4706   20E6 26 00 00      mov b, $0
4707   20E9 E7            pop d
4708   20EA FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4709   20EE E4            pop a
4710   20EF DA            push d
4711   20F0 26 00 00      mov b, $0
4712   20F3 E7            pop d
4713   20F4 FD 43         mov [d], b
4714   20F6             ;; ia[1] = 1; 
4715   20F6 FA EB FF      lea d, [bp + -21] ; $ia
4716   20F9 D7            push a
4717   20FA DA            push d
4718   20FB 26 01 00      mov b, $1
4719   20FE E7            pop d
4720   20FF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4721   2103 E4            pop a
4722   2104 DA            push d
4723   2105 26 01 00      mov b, $1
4724   2108 E7            pop d
4725   2109 FD 43         mov [d], b
4726   210B             ;; ia[2] = 2; 
4727   210B FA EB FF      lea d, [bp + -21] ; $ia
4728   210E D7            push a
4729   210F DA            push d
4730   2110 26 02 00      mov b, $2
4731   2113 E7            pop d
4732   2114 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4733   2118 E4            pop a
4734   2119 DA            push d
4735   211A 26 02 00      mov b, $2
4736   211D E7            pop d
4737   211E FD 43         mov [d], b
4738   2120             ;; ia[3] = 3; 
4739   2120 FA EB FF      lea d, [bp + -21] ; $ia
4740   2123 D7            push a
4741   2124 DA            push d
4742   2125 26 03 00      mov b, $3
4743   2128 E7            pop d
4744   2129 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4745   212D E4            pop a
4746   212E DA            push d
4747   212F 26 03 00      mov b, $3
4748   2132 E7            pop d
4749   2133 FD 43         mov [d], b
4750   2135             ;; ia[4] = 4; 
4751   2135 FA EB FF      lea d, [bp + -21] ; $ia
4752   2138 D7            push a
4753   2139 DA            push d
4754   213A 26 04 00      mov b, $4
4755   213D E7            pop d
4756   213E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4757   2142 E4            pop a
4758   2143 DA            push d
4759   2144 26 04 00      mov b, $4
4760   2147 E7            pop d
4761   2148 FD 43         mov [d], b
4762   214A             ;; pass = pass && test0_subTest0(c, i, ca, ia); 
4763   214A FA FD FF      lea d, [bp + -3] ; $pass
4764   214D DA            push d
4765   214E FA FD FF      lea d, [bp + -3] ; $pass
4766   2151 2A            mov b, [d]
4767   2152 D7            push a
4768   2153 11            mov a, b
4769   2154 FA EB FF      lea d, [bp + -21] ; $ia
4770   2157 2D            mov b, d
4771   2158 FD AB         swp b
4772   215A D8            push b
4773   215B FA F5 FF      lea d, [bp + -11] ; $ca
4774   215E 2D            mov b, d
4775   215F FD AB         swp b
4776   2161 D8            push b
4777   2162 FA FA FF      lea d, [bp + -6] ; $i
4778   2165 2A            mov b, [d]
4779   2166 FD AB         swp b
4780   2168 D8            push b
4781   2169 FA FC FF      lea d, [bp + -4] ; $c
4782   216C 32            mov bl, [d]
4783   216D A7 00         mov bh, 0
4784   216F DD            push bl
4785   2170 07 82 21      call test0_subTest0
4786   2173 51 07 00      add sp, 7
4787   2176 FD A7         sand a, b ; &&
4788   2178 E4            pop a
4789   2179 E7            pop d
4790   217A FD 43         mov [d], b
4791   217C             ;; return pass; 
4792   217C FA FD FF      lea d, [bp + -3] ; $pass
4793   217F 2A            mov b, [d]
4794   2180 F9            leave
4795   2181 09            ret
4796   2182             
4797   2182             test0_subTest0:
4798   2182 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4799   2185             ; $pass 
4800   2185 10 01 00      mov a, $1
4801   2188 45 FF FF      mov [bp + -1], a
4802   218B 52 02 00      sub sp, 2
4803   218E             ;; pass = pass && c == 'A'; 
4804   218E FA FF FF      lea d, [bp + -1] ; $pass
4805   2191 DA            push d
4806   2192 FA FF FF      lea d, [bp + -1] ; $pass
4807   2195 2A            mov b, [d]
4808   2196 D7            push a
4809   2197 11            mov a, b
4810   2198 FA 05 00      lea d, [bp + 5] ; $c
4811   219B 32            mov bl, [d]
4812   219C A7 00         mov bh, 0
4813   219E             ; START RELATIONAL
4814   219E D7            push a
4815   219F 11            mov a, b
4816   21A0 26 41 00      mov b, $41
4817   21A3 B0            cmp a, b
4818   21A4 FD 71         seq ; ==
4819   21A6 E4            pop a
4820   21A7             ; END RELATIONAL
4821   21A7 FD A7         sand a, b ; &&
4822   21A9 E4            pop a
4823   21AA E7            pop d
4824   21AB FD 43         mov [d], b
4825   21AD             ;; pass = pass && i == 55; 
4826   21AD FA FF FF      lea d, [bp + -1] ; $pass
4827   21B0 DA            push d
4828   21B1 FA FF FF      lea d, [bp + -1] ; $pass
4829   21B4 2A            mov b, [d]
4830   21B5 D7            push a
4831   21B6 11            mov a, b
4832   21B7 FA 06 00      lea d, [bp + 6] ; $i
4833   21BA 2A            mov b, [d]
4834   21BB             ; START RELATIONAL
4835   21BB D7            push a
4836   21BC 11            mov a, b
4837   21BD 26 37 00      mov b, $37
4838   21C0 B0            cmp a, b
4839   21C1 FD 71         seq ; ==
4840   21C3 E4            pop a
4841   21C4             ; END RELATIONAL
4842   21C4 FD A7         sand a, b ; &&
4843   21C6 E4            pop a
4844   21C7 E7            pop d
4845   21C8 FD 43         mov [d], b
4846   21CA             ;; pass = pass && ca[0] == 'A'; 
4847   21CA FA FF FF      lea d, [bp + -1] ; $pass
4848   21CD DA            push d
4849   21CE FA FF FF      lea d, [bp + -1] ; $pass
4850   21D1 2A            mov b, [d]
4851   21D2 D7            push a
4852   21D3 11            mov a, b
4853   21D4 2C 08 00      mov b, [bp + 8] ; $ca
4854   21D7 74            mov d, b
4855   21D8 D7            push a
4856   21D9 DA            push d
4857   21DA 26 00 00      mov b, $0
4858   21DD E7            pop d
4859   21DE 5A            add d, b
4860   21DF E4            pop a
4861   21E0 32            mov bl, [d]
4862   21E1 A7 00         mov bh, 0
4863   21E3             ; START RELATIONAL
4864   21E3 D7            push a
4865   21E4 11            mov a, b
4866   21E5 26 41 00      mov b, $41
4867   21E8 B0            cmp a, b
4868   21E9 FD 71         seq ; ==
4869   21EB E4            pop a
4870   21EC             ; END RELATIONAL
4871   21EC FD A7         sand a, b ; &&
4872   21EE E4            pop a
4873   21EF E7            pop d
4874   21F0 FD 43         mov [d], b
4875   21F2             ;; pass = pass && ca[1] == 'B'; 
4876   21F2 FA FF FF      lea d, [bp + -1] ; $pass
4877   21F5 DA            push d
4878   21F6 FA FF FF      lea d, [bp + -1] ; $pass
4879   21F9 2A            mov b, [d]
4880   21FA D7            push a
4881   21FB 11            mov a, b
4882   21FC 2C 08 00      mov b, [bp + 8] ; $ca
4883   21FF 74            mov d, b
4884   2200 D7            push a
4885   2201 DA            push d
4886   2202 26 01 00      mov b, $1
4887   2205 E7            pop d
4888   2206 5A            add d, b
4889   2207 E4            pop a
4890   2208 32            mov bl, [d]
4891   2209 A7 00         mov bh, 0
4892   220B             ; START RELATIONAL
4893   220B D7            push a
4894   220C 11            mov a, b
4895   220D 26 42 00      mov b, $42
4896   2210 B0            cmp a, b
4897   2211 FD 71         seq ; ==
4898   2213 E4            pop a
4899   2214             ; END RELATIONAL
4900   2214 FD A7         sand a, b ; &&
4901   2216 E4            pop a
4902   2217 E7            pop d
4903   2218 FD 43         mov [d], b
4904   221A             ;; pass = pass && ca[2] == 'C'; 
4905   221A FA FF FF      lea d, [bp + -1] ; $pass
4906   221D DA            push d
4907   221E FA FF FF      lea d, [bp + -1] ; $pass
4908   2221 2A            mov b, [d]
4909   2222 D7            push a
4910   2223 11            mov a, b
4911   2224 2C 08 00      mov b, [bp + 8] ; $ca
4912   2227 74            mov d, b
4913   2228 D7            push a
4914   2229 DA            push d
4915   222A 26 02 00      mov b, $2
4916   222D E7            pop d
4917   222E 5A            add d, b
4918   222F E4            pop a
4919   2230 32            mov bl, [d]
4920   2231 A7 00         mov bh, 0
4921   2233             ; START RELATIONAL
4922   2233 D7            push a
4923   2234 11            mov a, b
4924   2235 26 43 00      mov b, $43
4925   2238 B0            cmp a, b
4926   2239 FD 71         seq ; ==
4927   223B E4            pop a
4928   223C             ; END RELATIONAL
4929   223C FD A7         sand a, b ; &&
4930   223E E4            pop a
4931   223F E7            pop d
4932   2240 FD 43         mov [d], b
4933   2242             ;; pass = pass && ca[3] == 'D'; 
4934   2242 FA FF FF      lea d, [bp + -1] ; $pass
4935   2245 DA            push d
4936   2246 FA FF FF      lea d, [bp + -1] ; $pass
4937   2249 2A            mov b, [d]
4938   224A D7            push a
4939   224B 11            mov a, b
4940   224C 2C 08 00      mov b, [bp + 8] ; $ca
4941   224F 74            mov d, b
4942   2250 D7            push a
4943   2251 DA            push d
4944   2252 26 03 00      mov b, $3
4945   2255 E7            pop d
4946   2256 5A            add d, b
4947   2257 E4            pop a
4948   2258 32            mov bl, [d]
4949   2259 A7 00         mov bh, 0
4950   225B             ; START RELATIONAL
4951   225B D7            push a
4952   225C 11            mov a, b
4953   225D 26 44 00      mov b, $44
4954   2260 B0            cmp a, b
4955   2261 FD 71         seq ; ==
4956   2263 E4            pop a
4957   2264             ; END RELATIONAL
4958   2264 FD A7         sand a, b ; &&
4959   2266 E4            pop a
4960   2267 E7            pop d
4961   2268 FD 43         mov [d], b
4962   226A             ;; pass = pass && ca[4] == 'E'; 
4963   226A FA FF FF      lea d, [bp + -1] ; $pass
4964   226D DA            push d
4965   226E FA FF FF      lea d, [bp + -1] ; $pass
4966   2271 2A            mov b, [d]
4967   2272 D7            push a
4968   2273 11            mov a, b
4969   2274 2C 08 00      mov b, [bp + 8] ; $ca
4970   2277 74            mov d, b
4971   2278 D7            push a
4972   2279 DA            push d
4973   227A 26 04 00      mov b, $4
4974   227D E7            pop d
4975   227E 5A            add d, b
4976   227F E4            pop a
4977   2280 32            mov bl, [d]
4978   2281 A7 00         mov bh, 0
4979   2283             ; START RELATIONAL
4980   2283 D7            push a
4981   2284 11            mov a, b
4982   2285 26 45 00      mov b, $45
4983   2288 B0            cmp a, b
4984   2289 FD 71         seq ; ==
4985   228B E4            pop a
4986   228C             ; END RELATIONAL
4987   228C FD A7         sand a, b ; &&
4988   228E E4            pop a
4989   228F E7            pop d
4990   2290 FD 43         mov [d], b
4991   2292             ;; pass = pass && ia[0] == 0; 
4992   2292 FA FF FF      lea d, [bp + -1] ; $pass
4993   2295 DA            push d
4994   2296 FA FF FF      lea d, [bp + -1] ; $pass
4995   2299 2A            mov b, [d]
4996   229A D7            push a
4997   229B 11            mov a, b
4998   229C 2C 0A 00      mov b, [bp + 10] ; $ia
4999   229F 74            mov d, b
5000   22A0 D7            push a
5001   22A1 DA            push d
5002   22A2 26 00 00      mov b, $0
5003   22A5 E7            pop d
5004   22A6 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5005   22AA E4            pop a
5006   22AB 2A            mov b, [d]
5007   22AC             ; START RELATIONAL
5008   22AC D7            push a
5009   22AD 11            mov a, b
5010   22AE 26 00 00      mov b, $0
5011   22B1 B0            cmp a, b
5012   22B2 FD 71         seq ; ==
5013   22B4 E4            pop a
5014   22B5             ; END RELATIONAL
5015   22B5 FD A7         sand a, b ; &&
5016   22B7 E4            pop a
5017   22B8 E7            pop d
5018   22B9 FD 43         mov [d], b
5019   22BB             ;; pass = pass && ia[1] == 1; 
5020   22BB FA FF FF      lea d, [bp + -1] ; $pass
5021   22BE DA            push d
5022   22BF FA FF FF      lea d, [bp + -1] ; $pass
5023   22C2 2A            mov b, [d]
5024   22C3 D7            push a
5025   22C4 11            mov a, b
5026   22C5 2C 0A 00      mov b, [bp + 10] ; $ia
5027   22C8 74            mov d, b
5028   22C9 D7            push a
5029   22CA DA            push d
5030   22CB 26 01 00      mov b, $1
5031   22CE E7            pop d
5032   22CF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5033   22D3 E4            pop a
5034   22D4 2A            mov b, [d]
5035   22D5             ; START RELATIONAL
5036   22D5 D7            push a
5037   22D6 11            mov a, b
5038   22D7 26 01 00      mov b, $1
5039   22DA B0            cmp a, b
5040   22DB FD 71         seq ; ==
5041   22DD E4            pop a
5042   22DE             ; END RELATIONAL
5043   22DE FD A7         sand a, b ; &&
5044   22E0 E4            pop a
5045   22E1 E7            pop d
5046   22E2 FD 43         mov [d], b
5047   22E4             ;; pass = pass && ia[2] == 2; 
5048   22E4 FA FF FF      lea d, [bp + -1] ; $pass
5049   22E7 DA            push d
5050   22E8 FA FF FF      lea d, [bp + -1] ; $pass
5051   22EB 2A            mov b, [d]
5052   22EC D7            push a
5053   22ED 11            mov a, b
5054   22EE 2C 0A 00      mov b, [bp + 10] ; $ia
5055   22F1 74            mov d, b
5056   22F2 D7            push a
5057   22F3 DA            push d
5058   22F4 26 02 00      mov b, $2
5059   22F7 E7            pop d
5060   22F8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5061   22FC E4            pop a
5062   22FD 2A            mov b, [d]
5063   22FE             ; START RELATIONAL
5064   22FE D7            push a
5065   22FF 11            mov a, b
5066   2300 26 02 00      mov b, $2
5067   2303 B0            cmp a, b
5068   2304 FD 71         seq ; ==
5069   2306 E4            pop a
5070   2307             ; END RELATIONAL
5071   2307 FD A7         sand a, b ; &&
5072   2309 E4            pop a
5073   230A E7            pop d
5074   230B FD 43         mov [d], b
5075   230D             ;; pass = pass && ia[3] == 3; 
5076   230D FA FF FF      lea d, [bp + -1] ; $pass
5077   2310 DA            push d
5078   2311 FA FF FF      lea d, [bp + -1] ; $pass
5079   2314 2A            mov b, [d]
5080   2315 D7            push a
5081   2316 11            mov a, b
5082   2317 2C 0A 00      mov b, [bp + 10] ; $ia
5083   231A 74            mov d, b
5084   231B D7            push a
5085   231C DA            push d
5086   231D 26 03 00      mov b, $3
5087   2320 E7            pop d
5088   2321 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5089   2325 E4            pop a
5090   2326 2A            mov b, [d]
5091   2327             ; START RELATIONAL
5092   2327 D7            push a
5093   2328 11            mov a, b
5094   2329 26 03 00      mov b, $3
5095   232C B0            cmp a, b
5096   232D FD 71         seq ; ==
5097   232F E4            pop a
5098   2330             ; END RELATIONAL
5099   2330 FD A7         sand a, b ; &&
5100   2332 E4            pop a
5101   2333 E7            pop d
5102   2334 FD 43         mov [d], b
5103   2336             ;; pass = pass && ia[4] == 4; 
5104   2336 FA FF FF      lea d, [bp + -1] ; $pass
5105   2339 DA            push d
5106   233A FA FF FF      lea d, [bp + -1] ; $pass
5107   233D 2A            mov b, [d]
5108   233E D7            push a
5109   233F 11            mov a, b
5110   2340 2C 0A 00      mov b, [bp + 10] ; $ia
5111   2343 74            mov d, b
5112   2344 D7            push a
5113   2345 DA            push d
5114   2346 26 04 00      mov b, $4
5115   2349 E7            pop d
5116   234A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5117   234E E4            pop a
5118   234F 2A            mov b, [d]
5119   2350             ; START RELATIONAL
5120   2350 D7            push a
5121   2351 11            mov a, b
5122   2352 26 04 00      mov b, $4
5123   2355 B0            cmp a, b
5124   2356 FD 71         seq ; ==
5125   2358 E4            pop a
5126   2359             ; END RELATIONAL
5127   2359 FD A7         sand a, b ; &&
5128   235B E4            pop a
5129   235C E7            pop d
5130   235D FD 43         mov [d], b
5131   235F             ;; return pass; 
5132   235F FA FF FF      lea d, [bp + -1] ; $pass
5133   2362 2A            mov b, [d]
5134   2363 F9            leave
5135   2364 09            ret
5136   2365             
5137   2365             test1:
5138   2365 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5139   2368             ; $pass 
5140   2368 10 01 00      mov a, $1
5141   236B 45 FF FF      mov [bp + -1], a
5142   236E             ; $ca 
5143   236E             ; $p 
5144   236E 52 09 00      sub sp, 9
5145   2371             ;; p = ca; 
5146   2371 FA F8 FF      lea d, [bp + -8] ; $p
5147   2374 DA            push d
5148   2375 FA FA FF      lea d, [bp + -6] ; $ca
5149   2378 2D            mov b, d
5150   2379 E7            pop d
5151   237A FD 43         mov [d], b
5152   237C             ;; ca[0] = 'A'; 
5153   237C FA FA FF      lea d, [bp + -6] ; $ca
5154   237F D7            push a
5155   2380 DA            push d
5156   2381 26 00 00      mov b, $0
5157   2384 E7            pop d
5158   2385 5A            add d, b
5159   2386 E4            pop a
5160   2387 DA            push d
5161   2388 26 41 00      mov b, $41
5162   238B E7            pop d
5163   238C FD 3E         mov [d], bl
5164   238E             ;; ca[1] = 'B'; 
5165   238E FA FA FF      lea d, [bp + -6] ; $ca
5166   2391 D7            push a
5167   2392 DA            push d
5168   2393 26 01 00      mov b, $1
5169   2396 E7            pop d
5170   2397 5A            add d, b
5171   2398 E4            pop a
5172   2399 DA            push d
5173   239A 26 42 00      mov b, $42
5174   239D E7            pop d
5175   239E FD 3E         mov [d], bl
5176   23A0             ;; ca[2] = 'C'; 
5177   23A0 FA FA FF      lea d, [bp + -6] ; $ca
5178   23A3 D7            push a
5179   23A4 DA            push d
5180   23A5 26 02 00      mov b, $2
5181   23A8 E7            pop d
5182   23A9 5A            add d, b
5183   23AA E4            pop a
5184   23AB DA            push d
5185   23AC 26 43 00      mov b, $43
5186   23AF E7            pop d
5187   23B0 FD 3E         mov [d], bl
5188   23B2             ;; ca[3] = 'D'; 
5189   23B2 FA FA FF      lea d, [bp + -6] ; $ca
5190   23B5 D7            push a
5191   23B6 DA            push d
5192   23B7 26 03 00      mov b, $3
5193   23BA E7            pop d
5194   23BB 5A            add d, b
5195   23BC E4            pop a
5196   23BD DA            push d
5197   23BE 26 44 00      mov b, $44
5198   23C1 E7            pop d
5199   23C2 FD 3E         mov [d], bl
5200   23C4             ;; ca[4] = 'E'; 
5201   23C4 FA FA FF      lea d, [bp + -6] ; $ca
5202   23C7 D7            push a
5203   23C8 DA            push d
5204   23C9 26 04 00      mov b, $4
5205   23CC E7            pop d
5206   23CD 5A            add d, b
5207   23CE E4            pop a
5208   23CF DA            push d
5209   23D0 26 45 00      mov b, $45
5210   23D3 E7            pop d
5211   23D4 FD 3E         mov [d], bl
5212   23D6             ;; pass = pass && *p == 'A'; 
5213   23D6 FA FF FF      lea d, [bp + -1] ; $pass
5214   23D9 DA            push d
5215   23DA FA FF FF      lea d, [bp + -1] ; $pass
5216   23DD 2A            mov b, [d]
5217   23DE D7            push a
5218   23DF 11            mov a, b
5219   23E0 FA F8 FF      lea d, [bp + -8] ; $p
5220   23E3 2A            mov b, [d]
5221   23E4 74            mov d, b
5222   23E5 32            mov bl, [d]
5223   23E6 A7 00         mov bh, 0
5224   23E8             ; START RELATIONAL
5225   23E8 D7            push a
5226   23E9 11            mov a, b
5227   23EA 26 41 00      mov b, $41
5228   23ED B0            cmp a, b
5229   23EE FD 71         seq ; ==
5230   23F0 E4            pop a
5231   23F1             ; END RELATIONAL
5232   23F1 FD A7         sand a, b ; &&
5233   23F3 E4            pop a
5234   23F4 E7            pop d
5235   23F5 FD 43         mov [d], b
5236   23F7             ;; pass = pass && *(p + 1) == 'B'; 
5237   23F7 FA FF FF      lea d, [bp + -1] ; $pass
5238   23FA DA            push d
5239   23FB FA FF FF      lea d, [bp + -1] ; $pass
5240   23FE 2A            mov b, [d]
5241   23FF D7            push a
5242   2400 11            mov a, b
5243   2401 FA F8 FF      lea d, [bp + -8] ; $p
5244   2404 2A            mov b, [d]
5245   2405             ; START TERMS
5246   2405 D7            push a
5247   2406 11            mov a, b
5248   2407 26 01 00      mov b, $1
5249   240A 56            add b, a
5250   240B E4            pop a
5251   240C             ; END TERMS
5252   240C 74            mov d, b
5253   240D 32            mov bl, [d]
5254   240E A7 00         mov bh, 0
5255   2410             ; START RELATIONAL
5256   2410 D7            push a
5257   2411 11            mov a, b
5258   2412 26 42 00      mov b, $42
5259   2415 B0            cmp a, b
5260   2416 FD 71         seq ; ==
5261   2418 E4            pop a
5262   2419             ; END RELATIONAL
5263   2419 FD A7         sand a, b ; &&
5264   241B E4            pop a
5265   241C E7            pop d
5266   241D FD 43         mov [d], b
5267   241F             ;; pass = pass && *(p + 2) == 'C'; 
5268   241F FA FF FF      lea d, [bp + -1] ; $pass
5269   2422 DA            push d
5270   2423 FA FF FF      lea d, [bp + -1] ; $pass
5271   2426 2A            mov b, [d]
5272   2427 D7            push a
5273   2428 11            mov a, b
5274   2429 FA F8 FF      lea d, [bp + -8] ; $p
5275   242C 2A            mov b, [d]
5276   242D             ; START TERMS
5277   242D D7            push a
5278   242E 11            mov a, b
5279   242F 26 02 00      mov b, $2
5280   2432 56            add b, a
5281   2433 E4            pop a
5282   2434             ; END TERMS
5283   2434 74            mov d, b
5284   2435 32            mov bl, [d]
5285   2436 A7 00         mov bh, 0
5286   2438             ; START RELATIONAL
5287   2438 D7            push a
5288   2439 11            mov a, b
5289   243A 26 43 00      mov b, $43
5290   243D B0            cmp a, b
5291   243E FD 71         seq ; ==
5292   2440 E4            pop a
5293   2441             ; END RELATIONAL
5294   2441 FD A7         sand a, b ; &&
5295   2443 E4            pop a
5296   2444 E7            pop d
5297   2445 FD 43         mov [d], b
5298   2447             ;; pass = pass && *(p + 3) == 'D'; 
5299   2447 FA FF FF      lea d, [bp + -1] ; $pass
5300   244A DA            push d
5301   244B FA FF FF      lea d, [bp + -1] ; $pass
5302   244E 2A            mov b, [d]
5303   244F D7            push a
5304   2450 11            mov a, b
5305   2451 FA F8 FF      lea d, [bp + -8] ; $p
5306   2454 2A            mov b, [d]
5307   2455             ; START TERMS
5308   2455 D7            push a
5309   2456 11            mov a, b
5310   2457 26 03 00      mov b, $3
5311   245A 56            add b, a
5312   245B E4            pop a
5313   245C             ; END TERMS
5314   245C 74            mov d, b
5315   245D 32            mov bl, [d]
5316   245E A7 00         mov bh, 0
5317   2460             ; START RELATIONAL
5318   2460 D7            push a
5319   2461 11            mov a, b
5320   2462 26 44 00      mov b, $44
5321   2465 B0            cmp a, b
5322   2466 FD 71         seq ; ==
5323   2468 E4            pop a
5324   2469             ; END RELATIONAL
5325   2469 FD A7         sand a, b ; &&
5326   246B E4            pop a
5327   246C E7            pop d
5328   246D FD 43         mov [d], b
5329   246F             ;; pass = pass && *(p + 4) == 'E'; 
5330   246F FA FF FF      lea d, [bp + -1] ; $pass
5331   2472 DA            push d
5332   2473 FA FF FF      lea d, [bp + -1] ; $pass
5333   2476 2A            mov b, [d]
5334   2477 D7            push a
5335   2478 11            mov a, b
5336   2479 FA F8 FF      lea d, [bp + -8] ; $p
5337   247C 2A            mov b, [d]
5338   247D             ; START TERMS
5339   247D D7            push a
5340   247E 11            mov a, b
5341   247F 26 04 00      mov b, $4
5342   2482 56            add b, a
5343   2483 E4            pop a
5344   2484             ; END TERMS
5345   2484 74            mov d, b
5346   2485 32            mov bl, [d]
5347   2486 A7 00         mov bh, 0
5348   2488             ; START RELATIONAL
5349   2488 D7            push a
5350   2489 11            mov a, b
5351   248A 26 45 00      mov b, $45
5352   248D B0            cmp a, b
5353   248E FD 71         seq ; ==
5354   2490 E4            pop a
5355   2491             ; END RELATIONAL
5356   2491 FD A7         sand a, b ; &&
5357   2493 E4            pop a
5358   2494 E7            pop d
5359   2495 FD 43         mov [d], b
5360   2497             ;; return pass; 
5361   2497 FA FF FF      lea d, [bp + -1] ; $pass
5362   249A 2A            mov b, [d]
5363   249B F9            leave
5364   249C 09            ret
5365   249D             
5366   249D             test2:
5367   249D F8 00 00      enter 0 ; (push bp; mov bp, sp)
5368   24A0             ; $pass 
5369   24A0 10 01 00      mov a, $1
5370   24A3 45 FF FF      mov [bp + -1], a
5371   24A6             ; $ca 
5372   24A6             ; $indices 
5373   24A6             ; $p 
5374   24A6 52 13 00      sub sp, 19
5375   24A9             ;; p = ca; 
5376   24A9 FA EE FF      lea d, [bp + -18] ; $p
5377   24AC DA            push d
5378   24AD FA FA FF      lea d, [bp + -6] ; $ca
5379   24B0 2D            mov b, d
5380   24B1 E7            pop d
5381   24B2 FD 43         mov [d], b
5382   24B4             ;; ca[0] = 'A'; 
5383   24B4 FA FA FF      lea d, [bp + -6] ; $ca
5384   24B7 D7            push a
5385   24B8 DA            push d
5386   24B9 26 00 00      mov b, $0
5387   24BC E7            pop d
5388   24BD 5A            add d, b
5389   24BE E4            pop a
5390   24BF DA            push d
5391   24C0 26 41 00      mov b, $41
5392   24C3 E7            pop d
5393   24C4 FD 3E         mov [d], bl
5394   24C6             ;; ca[1] = 'B'; 
5395   24C6 FA FA FF      lea d, [bp + -6] ; $ca
5396   24C9 D7            push a
5397   24CA DA            push d
5398   24CB 26 01 00      mov b, $1
5399   24CE E7            pop d
5400   24CF 5A            add d, b
5401   24D0 E4            pop a
5402   24D1 DA            push d
5403   24D2 26 42 00      mov b, $42
5404   24D5 E7            pop d
5405   24D6 FD 3E         mov [d], bl
5406   24D8             ;; ca[2] = 'C'; 
5407   24D8 FA FA FF      lea d, [bp + -6] ; $ca
5408   24DB D7            push a
5409   24DC DA            push d
5410   24DD 26 02 00      mov b, $2
5411   24E0 E7            pop d
5412   24E1 5A            add d, b
5413   24E2 E4            pop a
5414   24E3 DA            push d
5415   24E4 26 43 00      mov b, $43
5416   24E7 E7            pop d
5417   24E8 FD 3E         mov [d], bl
5418   24EA             ;; ca[3] = 'D'; 
5419   24EA FA FA FF      lea d, [bp + -6] ; $ca
5420   24ED D7            push a
5421   24EE DA            push d
5422   24EF 26 03 00      mov b, $3
5423   24F2 E7            pop d
5424   24F3 5A            add d, b
5425   24F4 E4            pop a
5426   24F5 DA            push d
5427   24F6 26 44 00      mov b, $44
5428   24F9 E7            pop d
5429   24FA FD 3E         mov [d], bl
5430   24FC             ;; ca[4] = 'E'; 
5431   24FC FA FA FF      lea d, [bp + -6] ; $ca
5432   24FF D7            push a
5433   2500 DA            push d
5434   2501 26 04 00      mov b, $4
5435   2504 E7            pop d
5436   2505 5A            add d, b
5437   2506 E4            pop a
5438   2507 DA            push d
5439   2508 26 45 00      mov b, $45
5440   250B E7            pop d
5441   250C FD 3E         mov [d], bl
5442   250E             ;; indices[0] = 0; 
5443   250E FA F0 FF      lea d, [bp + -16] ; $indices
5444   2511 D7            push a
5445   2512 DA            push d
5446   2513 26 00 00      mov b, $0
5447   2516 E7            pop d
5448   2517 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5449   251B E4            pop a
5450   251C DA            push d
5451   251D 26 00 00      mov b, $0
5452   2520 E7            pop d
5453   2521 FD 43         mov [d], b
5454   2523             ;; indices[1] = 1; 
5455   2523 FA F0 FF      lea d, [bp + -16] ; $indices
5456   2526 D7            push a
5457   2527 DA            push d
5458   2528 26 01 00      mov b, $1
5459   252B E7            pop d
5460   252C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5461   2530 E4            pop a
5462   2531 DA            push d
5463   2532 26 01 00      mov b, $1
5464   2535 E7            pop d
5465   2536 FD 43         mov [d], b
5466   2538             ;; indices[2] = 2; 
5467   2538 FA F0 FF      lea d, [bp + -16] ; $indices
5468   253B D7            push a
5469   253C DA            push d
5470   253D 26 02 00      mov b, $2
5471   2540 E7            pop d
5472   2541 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5473   2545 E4            pop a
5474   2546 DA            push d
5475   2547 26 02 00      mov b, $2
5476   254A E7            pop d
5477   254B FD 43         mov [d], b
5478   254D             ;; indices[3] = 3; 
5479   254D FA F0 FF      lea d, [bp + -16] ; $indices
5480   2550 D7            push a
5481   2551 DA            push d
5482   2552 26 03 00      mov b, $3
5483   2555 E7            pop d
5484   2556 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5485   255A E4            pop a
5486   255B DA            push d
5487   255C 26 03 00      mov b, $3
5488   255F E7            pop d
5489   2560 FD 43         mov [d], b
5490   2562             ;; indices[4] = 4; 
5491   2562 FA F0 FF      lea d, [bp + -16] ; $indices
5492   2565 D7            push a
5493   2566 DA            push d
5494   2567 26 04 00      mov b, $4
5495   256A E7            pop d
5496   256B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5497   256F E4            pop a
5498   2570 DA            push d
5499   2571 26 04 00      mov b, $4
5500   2574 E7            pop d
5501   2575 FD 43         mov [d], b
5502   2577             ;; pass = pass && *(p + indices[0]) == 'A'; 
5503   2577 FA FF FF      lea d, [bp + -1] ; $pass
5504   257A DA            push d
5505   257B FA FF FF      lea d, [bp + -1] ; $pass
5506   257E 2A            mov b, [d]
5507   257F D7            push a
5508   2580 11            mov a, b
5509   2581 FA EE FF      lea d, [bp + -18] ; $p
5510   2584 2A            mov b, [d]
5511   2585             ; START TERMS
5512   2585 D7            push a
5513   2586 11            mov a, b
5514   2587 FA F0 FF      lea d, [bp + -16] ; $indices
5515   258A D7            push a
5516   258B DA            push d
5517   258C 26 00 00      mov b, $0
5518   258F E7            pop d
5519   2590 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5520   2594 E4            pop a
5521   2595 2A            mov b, [d]
5522   2596 56            add b, a
5523   2597 E4            pop a
5524   2598             ; END TERMS
5525   2598 74            mov d, b
5526   2599 32            mov bl, [d]
5527   259A A7 00         mov bh, 0
5528   259C             ; START RELATIONAL
5529   259C D7            push a
5530   259D 11            mov a, b
5531   259E 26 41 00      mov b, $41
5532   25A1 B0            cmp a, b
5533   25A2 FD 71         seq ; ==
5534   25A4 E4            pop a
5535   25A5             ; END RELATIONAL
5536   25A5 FD A7         sand a, b ; &&
5537   25A7 E4            pop a
5538   25A8 E7            pop d
5539   25A9 FD 43         mov [d], b
5540   25AB             ;; pass = pass && *(p + indices[1]) == 'B'; 
5541   25AB FA FF FF      lea d, [bp + -1] ; $pass
5542   25AE DA            push d
5543   25AF FA FF FF      lea d, [bp + -1] ; $pass
5544   25B2 2A            mov b, [d]
5545   25B3 D7            push a
5546   25B4 11            mov a, b
5547   25B5 FA EE FF      lea d, [bp + -18] ; $p
5548   25B8 2A            mov b, [d]
5549   25B9             ; START TERMS
5550   25B9 D7            push a
5551   25BA 11            mov a, b
5552   25BB FA F0 FF      lea d, [bp + -16] ; $indices
5553   25BE D7            push a
5554   25BF DA            push d
5555   25C0 26 01 00      mov b, $1
5556   25C3 E7            pop d
5557   25C4 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5558   25C8 E4            pop a
5559   25C9 2A            mov b, [d]
5560   25CA 56            add b, a
5561   25CB E4            pop a
5562   25CC             ; END TERMS
5563   25CC 74            mov d, b
5564   25CD 32            mov bl, [d]
5565   25CE A7 00         mov bh, 0
5566   25D0             ; START RELATIONAL
5567   25D0 D7            push a
5568   25D1 11            mov a, b
5569   25D2 26 42 00      mov b, $42
5570   25D5 B0            cmp a, b
5571   25D6 FD 71         seq ; ==
5572   25D8 E4            pop a
5573   25D9             ; END RELATIONAL
5574   25D9 FD A7         sand a, b ; &&
5575   25DB E4            pop a
5576   25DC E7            pop d
5577   25DD FD 43         mov [d], b
5578   25DF             ;; pass = pass && *(p + indices[2]) == 'C'; 
5579   25DF FA FF FF      lea d, [bp + -1] ; $pass
5580   25E2 DA            push d
5581   25E3 FA FF FF      lea d, [bp + -1] ; $pass
5582   25E6 2A            mov b, [d]
5583   25E7 D7            push a
5584   25E8 11            mov a, b
5585   25E9 FA EE FF      lea d, [bp + -18] ; $p
5586   25EC 2A            mov b, [d]
5587   25ED             ; START TERMS
5588   25ED D7            push a
5589   25EE 11            mov a, b
5590   25EF FA F0 FF      lea d, [bp + -16] ; $indices
5591   25F2 D7            push a
5592   25F3 DA            push d
5593   25F4 26 02 00      mov b, $2
5594   25F7 E7            pop d
5595   25F8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5596   25FC E4            pop a
5597   25FD 2A            mov b, [d]
5598   25FE 56            add b, a
5599   25FF E4            pop a
5600   2600             ; END TERMS
5601   2600 74            mov d, b
5602   2601 32            mov bl, [d]
5603   2602 A7 00         mov bh, 0
5604   2604             ; START RELATIONAL
5605   2604 D7            push a
5606   2605 11            mov a, b
5607   2606 26 43 00      mov b, $43
5608   2609 B0            cmp a, b
5609   260A FD 71         seq ; ==
5610   260C E4            pop a
5611   260D             ; END RELATIONAL
5612   260D FD A7         sand a, b ; &&
5613   260F E4            pop a
5614   2610 E7            pop d
5615   2611 FD 43         mov [d], b
5616   2613             ;; pass = pass && *(p + indices[3]) == 'D'; 
5617   2613 FA FF FF      lea d, [bp + -1] ; $pass
5618   2616 DA            push d
5619   2617 FA FF FF      lea d, [bp + -1] ; $pass
5620   261A 2A            mov b, [d]
5621   261B D7            push a
5622   261C 11            mov a, b
5623   261D FA EE FF      lea d, [bp + -18] ; $p
5624   2620 2A            mov b, [d]
5625   2621             ; START TERMS
5626   2621 D7            push a
5627   2622 11            mov a, b
5628   2623 FA F0 FF      lea d, [bp + -16] ; $indices
5629   2626 D7            push a
5630   2627 DA            push d
5631   2628 26 03 00      mov b, $3
5632   262B E7            pop d
5633   262C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5634   2630 E4            pop a
5635   2631 2A            mov b, [d]
5636   2632 56            add b, a
5637   2633 E4            pop a
5638   2634             ; END TERMS
5639   2634 74            mov d, b
5640   2635 32            mov bl, [d]
5641   2636 A7 00         mov bh, 0
5642   2638             ; START RELATIONAL
5643   2638 D7            push a
5644   2639 11            mov a, b
5645   263A 26 44 00      mov b, $44
5646   263D B0            cmp a, b
5647   263E FD 71         seq ; ==
5648   2640 E4            pop a
5649   2641             ; END RELATIONAL
5650   2641 FD A7         sand a, b ; &&
5651   2643 E4            pop a
5652   2644 E7            pop d
5653   2645 FD 43         mov [d], b
5654   2647             ;; pass = pass && *(p + indices[4]) == 'E'; 
5655   2647 FA FF FF      lea d, [bp + -1] ; $pass
5656   264A DA            push d
5657   264B FA FF FF      lea d, [bp + -1] ; $pass
5658   264E 2A            mov b, [d]
5659   264F D7            push a
5660   2650 11            mov a, b
5661   2651 FA EE FF      lea d, [bp + -18] ; $p
5662   2654 2A            mov b, [d]
5663   2655             ; START TERMS
5664   2655 D7            push a
5665   2656 11            mov a, b
5666   2657 FA F0 FF      lea d, [bp + -16] ; $indices
5667   265A D7            push a
5668   265B DA            push d
5669   265C 26 04 00      mov b, $4
5670   265F E7            pop d
5671   2660 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5672   2664 E4            pop a
5673   2665 2A            mov b, [d]
5674   2666 56            add b, a
5675   2667 E4            pop a
5676   2668             ; END TERMS
5677   2668 74            mov d, b
5678   2669 32            mov bl, [d]
5679   266A A7 00         mov bh, 0
5680   266C             ; START RELATIONAL
5681   266C D7            push a
5682   266D 11            mov a, b
5683   266E 26 45 00      mov b, $45
5684   2671 B0            cmp a, b
5685   2672 FD 71         seq ; ==
5686   2674 E4            pop a
5687   2675             ; END RELATIONAL
5688   2675 FD A7         sand a, b ; &&
5689   2677 E4            pop a
5690   2678 E7            pop d
5691   2679 FD 43         mov [d], b
5692   267B             ;; return pass; 
5693   267B FA FF FF      lea d, [bp + -1] ; $pass
5694   267E 2A            mov b, [d]
5695   267F F9            leave
5696   2680 09            ret
5697   2681             
5698   2681             test3:
5699   2681 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5700   2684             ; $pass 
5701   2684 10 01 00      mov a, $1
5702   2687 45 FF FF      mov [bp + -1], a
5703   268A 52 02 00      sub sp, 2
5704   268D             ;; st.c = 'A'; 
5705   268D FA 05 00      lea d, [bp + 5] ; $st
5706   2690 58 00 00      add d, 0
5707   2693 DA            push d
5708   2694 26 41 00      mov b, $41
5709   2697 E7            pop d
5710   2698 FD 3E         mov [d], bl
5711   269A             ;; st.i = 277; 
5712   269A FA 05 00      lea d, [bp + 5] ; $st
5713   269D 58 01 00      add d, 1
5714   26A0 DA            push d
5715   26A1 26 15 01      mov b, $115
5716   26A4 E7            pop d
5717   26A5 FD 43         mov [d], b
5718   26A7             ;; st.m[0] = 0; 
5719   26A7 FA 05 00      lea d, [bp + 5] ; $st
5720   26AA 58 03 00      add d, 3
5721   26AD D7            push a
5722   26AE DA            push d
5723   26AF 26 00 00      mov b, $0
5724   26B2 E7            pop d
5725   26B3 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5726   26B7 E4            pop a
5727   26B8 DA            push d
5728   26B9 26 00 00      mov b, $0
5729   26BC E7            pop d
5730   26BD FD 43         mov [d], b
5731   26BF             ;; st.m[1] = 1; 
5732   26BF FA 05 00      lea d, [bp + 5] ; $st
5733   26C2 58 03 00      add d, 3
5734   26C5 D7            push a
5735   26C6 DA            push d
5736   26C7 26 01 00      mov b, $1
5737   26CA E7            pop d
5738   26CB FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5739   26CF E4            pop a
5740   26D0 DA            push d
5741   26D1 26 01 00      mov b, $1
5742   26D4 E7            pop d
5743   26D5 FD 43         mov [d], b
5744   26D7             ;; st.m[2] = 2; 
5745   26D7 FA 05 00      lea d, [bp + 5] ; $st
5746   26DA 58 03 00      add d, 3
5747   26DD D7            push a
5748   26DE DA            push d
5749   26DF 26 02 00      mov b, $2
5750   26E2 E7            pop d
5751   26E3 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5752   26E7 E4            pop a
5753   26E8 DA            push d
5754   26E9 26 02 00      mov b, $2
5755   26EC E7            pop d
5756   26ED FD 43         mov [d], b
5757   26EF             ;; st.m[3] = 3; 
5758   26EF FA 05 00      lea d, [bp + 5] ; $st
5759   26F2 58 03 00      add d, 3
5760   26F5 D7            push a
5761   26F6 DA            push d
5762   26F7 26 03 00      mov b, $3
5763   26FA E7            pop d
5764   26FB FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5765   26FF E4            pop a
5766   2700 DA            push d
5767   2701 26 03 00      mov b, $3
5768   2704 E7            pop d
5769   2705 FD 43         mov [d], b
5770   2707             ;; st.m[4] = 4; 
5771   2707 FA 05 00      lea d, [bp + 5] ; $st
5772   270A 58 03 00      add d, 3
5773   270D D7            push a
5774   270E DA            push d
5775   270F 26 04 00      mov b, $4
5776   2712 E7            pop d
5777   2713 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5778   2717 E4            pop a
5779   2718 DA            push d
5780   2719 26 04 00      mov b, $4
5781   271C E7            pop d
5782   271D FD 43         mov [d], b
5783   271F             ;; pass = pass && st.c == 'A'; 
5784   271F FA FF FF      lea d, [bp + -1] ; $pass
5785   2722 DA            push d
5786   2723 FA FF FF      lea d, [bp + -1] ; $pass
5787   2726 2A            mov b, [d]
5788   2727 D7            push a
5789   2728 11            mov a, b
5790   2729 FA 05 00      lea d, [bp + 5] ; $st
5791   272C 58 00 00      add d, 0
5792   272F 32            mov bl, [d]
5793   2730 A7 00         mov bh, 0
5794   2732             ; START RELATIONAL
5795   2732 D7            push a
5796   2733 11            mov a, b
5797   2734 26 41 00      mov b, $41
5798   2737 B0            cmp a, b
5799   2738 FD 71         seq ; ==
5800   273A E4            pop a
5801   273B             ; END RELATIONAL
5802   273B FD A7         sand a, b ; &&
5803   273D E4            pop a
5804   273E E7            pop d
5805   273F FD 43         mov [d], b
5806   2741             ;; pass = pass && st.i == 277; 
5807   2741 FA FF FF      lea d, [bp + -1] ; $pass
5808   2744 DA            push d
5809   2745 FA FF FF      lea d, [bp + -1] ; $pass
5810   2748 2A            mov b, [d]
5811   2749 D7            push a
5812   274A 11            mov a, b
5813   274B FA 05 00      lea d, [bp + 5] ; $st
5814   274E 58 01 00      add d, 1
5815   2751 2A            mov b, [d]
5816   2752             ; START RELATIONAL
5817   2752 D7            push a
5818   2753 11            mov a, b
5819   2754 26 15 01      mov b, $115
5820   2757 B0            cmp a, b
5821   2758 FD 71         seq ; ==
5822   275A E4            pop a
5823   275B             ; END RELATIONAL
5824   275B FD A7         sand a, b ; &&
5825   275D E4            pop a
5826   275E E7            pop d
5827   275F FD 43         mov [d], b
5828   2761             ;; pass = pass && st.m[0] == 0; 
5829   2761 FA FF FF      lea d, [bp + -1] ; $pass
5830   2764 DA            push d
5831   2765 FA FF FF      lea d, [bp + -1] ; $pass
5832   2768 2A            mov b, [d]
5833   2769 D7            push a
5834   276A 11            mov a, b
5835   276B FA 05 00      lea d, [bp + 5] ; $st
5836   276E 58 03 00      add d, 3
5837   2771 D7            push a
5838   2772 DA            push d
5839   2773 26 00 00      mov b, $0
5840   2776 E7            pop d
5841   2777 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5842   277B E4            pop a
5843   277C 2A            mov b, [d]
5844   277D             ; START RELATIONAL
5845   277D D7            push a
5846   277E 11            mov a, b
5847   277F 26 00 00      mov b, $0
5848   2782 B0            cmp a, b
5849   2783 FD 71         seq ; ==
5850   2785 E4            pop a
5851   2786             ; END RELATIONAL
5852   2786 FD A7         sand a, b ; &&
5853   2788 E4            pop a
5854   2789 E7            pop d
5855   278A FD 43         mov [d], b
5856   278C             ;; pass = pass && st.m[1] == 1; 
5857   278C FA FF FF      lea d, [bp + -1] ; $pass
5858   278F DA            push d
5859   2790 FA FF FF      lea d, [bp + -1] ; $pass
5860   2793 2A            mov b, [d]
5861   2794 D7            push a
5862   2795 11            mov a, b
5863   2796 FA 05 00      lea d, [bp + 5] ; $st
5864   2799 58 03 00      add d, 3
5865   279C D7            push a
5866   279D DA            push d
5867   279E 26 01 00      mov b, $1
5868   27A1 E7            pop d
5869   27A2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5870   27A6 E4            pop a
5871   27A7 2A            mov b, [d]
5872   27A8             ; START RELATIONAL
5873   27A8 D7            push a
5874   27A9 11            mov a, b
5875   27AA 26 01 00      mov b, $1
5876   27AD B0            cmp a, b
5877   27AE FD 71         seq ; ==
5878   27B0 E4            pop a
5879   27B1             ; END RELATIONAL
5880   27B1 FD A7         sand a, b ; &&
5881   27B3 E4            pop a
5882   27B4 E7            pop d
5883   27B5 FD 43         mov [d], b
5884   27B7             ;; pass = pass && st.m[2] == 2; 
5885   27B7 FA FF FF      lea d, [bp + -1] ; $pass
5886   27BA DA            push d
5887   27BB FA FF FF      lea d, [bp + -1] ; $pass
5888   27BE 2A            mov b, [d]
5889   27BF D7            push a
5890   27C0 11            mov a, b
5891   27C1 FA 05 00      lea d, [bp + 5] ; $st
5892   27C4 58 03 00      add d, 3
5893   27C7 D7            push a
5894   27C8 DA            push d
5895   27C9 26 02 00      mov b, $2
5896   27CC E7            pop d
5897   27CD FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5898   27D1 E4            pop a
5899   27D2 2A            mov b, [d]
5900   27D3             ; START RELATIONAL
5901   27D3 D7            push a
5902   27D4 11            mov a, b
5903   27D5 26 02 00      mov b, $2
5904   27D8 B0            cmp a, b
5905   27D9 FD 71         seq ; ==
5906   27DB E4            pop a
5907   27DC             ; END RELATIONAL
5908   27DC FD A7         sand a, b ; &&
5909   27DE E4            pop a
5910   27DF E7            pop d
5911   27E0 FD 43         mov [d], b
5912   27E2             ;; pass = pass && st.m[3] == 3; 
5913   27E2 FA FF FF      lea d, [bp + -1] ; $pass
5914   27E5 DA            push d
5915   27E6 FA FF FF      lea d, [bp + -1] ; $pass
5916   27E9 2A            mov b, [d]
5917   27EA D7            push a
5918   27EB 11            mov a, b
5919   27EC FA 05 00      lea d, [bp + 5] ; $st
5920   27EF 58 03 00      add d, 3
5921   27F2 D7            push a
5922   27F3 DA            push d
5923   27F4 26 03 00      mov b, $3
5924   27F7 E7            pop d
5925   27F8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5926   27FC E4            pop a
5927   27FD 2A            mov b, [d]
5928   27FE             ; START RELATIONAL
5929   27FE D7            push a
5930   27FF 11            mov a, b
5931   2800 26 03 00      mov b, $3
5932   2803 B0            cmp a, b
5933   2804 FD 71         seq ; ==
5934   2806 E4            pop a
5935   2807             ; END RELATIONAL
5936   2807 FD A7         sand a, b ; &&
5937   2809 E4            pop a
5938   280A E7            pop d
5939   280B FD 43         mov [d], b
5940   280D             ;; pass = pass && st.m[4] == 4; 
5941   280D FA FF FF      lea d, [bp + -1] ; $pass
5942   2810 DA            push d
5943   2811 FA FF FF      lea d, [bp + -1] ; $pass
5944   2814 2A            mov b, [d]
5945   2815 D7            push a
5946   2816 11            mov a, b
5947   2817 FA 05 00      lea d, [bp + 5] ; $st
5948   281A 58 03 00      add d, 3
5949   281D D7            push a
5950   281E DA            push d
5951   281F 26 04 00      mov b, $4
5952   2822 E7            pop d
5953   2823 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5954   2827 E4            pop a
5955   2828 2A            mov b, [d]
5956   2829             ; START RELATIONAL
5957   2829 D7            push a
5958   282A 11            mov a, b
5959   282B 26 04 00      mov b, $4
5960   282E B0            cmp a, b
5961   282F FD 71         seq ; ==
5962   2831 E4            pop a
5963   2832             ; END RELATIONAL
5964   2832 FD A7         sand a, b ; &&
5965   2834 E4            pop a
5966   2835 E7            pop d
5967   2836 FD 43         mov [d], b
5968   2838             ;; return pass; 
5969   2838 FA FF FF      lea d, [bp + -1] ; $pass
5970   283B 2A            mov b, [d]
5971   283C F9            leave
5972   283D 09            ret
5973   283E             ; --- END TEXT BLOCK
5974   283E             
5975   283E             ; --- BEGIN DATA BLOCK
5976   283E 41 42 43 44 _base64_table_data: .db "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 0
5976   2842 45 46 47 48 
5976   2846 49 4A 4B 4C 
5976   284A 4D 4E 4F 50 
5976   284E 51 52 53 54 
5976   2852 55 56 57 58 
5976   2856 59 5A 61 62 
5976   285A 63 64 65 66 
5976   285E 67 68 69 6A 
5976   2862 6B 6C 6D 6E 
5976   2866 6F 70 71 72 
5976   286A 73 74 75 76 
5976   286E 77 78 79 7A 
5976   2872 30 31 32 33 
5976   2876 34 35 36 37 
5976   287A 38 39 2B 2F 
5976   287E 00 
5977   287F 3E 28       _base64_table: .dw _base64_table_data
5978   2881 00 00 00 00 _st1_data: .fill 13, 0
5978   2885 00 00 00 00 
5978   2889 00 00 00 00 
5978   288D 00 
5979   288E 54 65 73 74 __s0: .db "Test %d, Result: %d\n", 0
5979   2892 20 25 64 2C 
5979   2896 20 52 65 73 
5979   289A 75 6C 74 3A 
5979   289E 20 25 64 0A 
5979   28A2 00 
5980   28A3 55 6E 65 78 __s1: .db "Unexpected format in printf.", 0
5980   28A7 70 65 63 74 
5980   28AB 65 64 20 66 
5980   28AF 6F 72 6D 61 
5980   28B3 74 20 69 6E 
5980   28B7 20 70 72 69 
5980   28BB 6E 74 66 2E 
5980   28BF 00 
5981   28C0 45 72 72 6F __s2: .db "Error: Unknown argument type.\n", 0
5981   28C4 72 3A 20 55 
5981   28C8 6E 6B 6E 6F 
5981   28CC 77 6E 20 61 
5981   28D0 72 67 75 6D 
5981   28D4 65 6E 74 20 
5981   28D8 74 79 70 65 
5981   28DC 2E 0A 00 
5982   28DF 1B 5B 32 4A __s3: .db "\033[2J\033[H", 0
5982   28E3 1B 5B 48 00 
5983   28E7             
5984   28E7 E9 28       _heap_top: .dw _heap
5985   28E9 00          _heap: .db 0
5986   28EA             ; --- END DATA BLOCK
5987   28EA             
5988   28EA             .end
tasm: Number of errors = 0
