0001   0000             ; --- FILENAME: ctestsuite/testsuite2
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $pass 
0011   0408             ; $i 
0012   0408             ; $nbr_tests 
0013   0408 10 0A 00      mov a, $a
0014   040B 45 E9 FF      mov [bp + -23], a
0015   040E 52 18 00      sub sp, 24
0016   0411             ;; for(i = 0; i < nbr_tests; i++){ 
0017   0411             _for1_init:
0018   0411 FA EB FF      lea d, [bp + -21] ; $i
0019   0414 DA            push d
0020   0415 26 00 00      mov b, $0
0021   0418 E7            pop d
0022   0419 FD 43         mov [d], b
0023   041B             _for1_cond:
0024   041B FA EB FF      lea d, [bp + -21] ; $i
0025   041E 2A            mov b, [d]
0026   041F             ; START RELATIONAL
0027   041F D7            push a
0028   0420 11            mov a, b
0029   0421 FA E9 FF      lea d, [bp + -23] ; $nbr_tests
0030   0424 2A            mov b, [d]
0031   0425 B0            cmp a, b
0032   0426 FD 73         slt ; <= (signed)
0033   0428 E4            pop a
0034   0429             ; END RELATIONAL
0035   0429 C0 00 00      cmp b, 0
0036   042C C6 55 04      je _for1_exit
0037   042F             _for1_block:
0038   042F             ;; pass[i] = -1; 
0039   042F FA ED FF      lea d, [bp + -19] ; $pass
0040   0432 D7            push a
0041   0433 DA            push d
0042   0434 FA EB FF      lea d, [bp + -21] ; $i
0043   0437 2A            mov b, [d]
0044   0438 E7            pop d
0045   0439 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0046   043D E4            pop a
0047   043E DA            push d
0048   043F 26 FF FF      mov b, $ffff
0049   0442 E7            pop d
0050   0443 FD 43         mov [d], b
0051   0445             _for1_update:
0052   0445 FA EB FF      lea d, [bp + -21] ; $i
0053   0448 2A            mov b, [d]
0054   0449 D8            push b
0055   044A FD 77         inc b
0056   044C FA EB FF      lea d, [bp + -21] ; $i
0057   044F FD 43         mov [d], b
0058   0451 E5            pop b
0059   0452 0A 1B 04      jmp _for1_cond
0060   0455             _for1_exit:
0061   0455             ;; pass[0] = test0(); 
0062   0455 FA ED FF      lea d, [bp + -19] ; $pass
0063   0458 D7            push a
0064   0459 DA            push d
0065   045A 26 00 00      mov b, $0
0066   045D E7            pop d
0067   045E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0068   0462 E4            pop a
0069   0463 DA            push d
0070   0464 07 2D 1E      call test0
0071   0467 E7            pop d
0072   0468 FD 43         mov [d], b
0073   046A             ;; pass[1] = test1(); 
0074   046A FA ED FF      lea d, [bp + -19] ; $pass
0075   046D D7            push a
0076   046E DA            push d
0077   046F 26 01 00      mov b, $1
0078   0472 E7            pop d
0079   0473 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0080   0477 E4            pop a
0081   0478 DA            push d
0082   0479 07 2B 21      call test1
0083   047C E7            pop d
0084   047D FD 43         mov [d], b
0085   047F             ;; pass[2] = test2(); 
0086   047F FA ED FF      lea d, [bp + -19] ; $pass
0087   0482 D7            push a
0088   0483 DA            push d
0089   0484 26 02 00      mov b, $2
0090   0487 E7            pop d
0091   0488 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0092   048C E4            pop a
0093   048D DA            push d
0094   048E 07 63 22      call test2
0095   0491 E7            pop d
0096   0492 FD 43         mov [d], b
0097   0494             ;; pass[3] = test3(st1); 
0098   0494 FA ED FF      lea d, [bp + -19] ; $pass
0099   0497 D7            push a
0100   0498 DA            push d
0101   0499 26 03 00      mov b, $3
0102   049C E7            pop d
0103   049D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0104   04A1 E4            pop a
0105   04A2 DA            push d
0106   04A3 3B 47 26      mov d, _st1_data ; $st1
0107   04A6 2D            mov b, d
0108   04A7 52 0D 00      sub sp, 13
0109   04AA FD 28         mov si, b
0110   04AC FD FA 01 00   lea d, [sp + 1]
0111   04B0 FD 50         mov di, d
0112   04B2 38 0D 00      mov c, 13
0113   04B5 FD F5         rep movsb
0114   04B7 07 47 24      call test3
0115   04BA 51 0D 00      add sp, 13
0116   04BD E7            pop d
0117   04BE FD 43         mov [d], b
0118   04C0             ;; for(i = 0; i < nbr_tests; i++){ 
0119   04C0             _for2_init:
0120   04C0 FA EB FF      lea d, [bp + -21] ; $i
0121   04C3 DA            push d
0122   04C4 26 00 00      mov b, $0
0123   04C7 E7            pop d
0124   04C8 FD 43         mov [d], b
0125   04CA             _for2_cond:
0126   04CA FA EB FF      lea d, [bp + -21] ; $i
0127   04CD 2A            mov b, [d]
0128   04CE             ; START RELATIONAL
0129   04CE D7            push a
0130   04CF 11            mov a, b
0131   04D0 FA E9 FF      lea d, [bp + -23] ; $nbr_tests
0132   04D3 2A            mov b, [d]
0133   04D4 B0            cmp a, b
0134   04D5 FD 73         slt ; <= (signed)
0135   04D7 E4            pop a
0136   04D8             ; END RELATIONAL
0137   04D8 C0 00 00      cmp b, 0
0138   04DB C6 14 05      je _for2_exit
0139   04DE             _for2_block:
0140   04DE             ;; printf("Test %d, Result: %d\n", i, pass[i]); 
0141   04DE FA ED FF      lea d, [bp + -19] ; $pass
0142   04E1 D7            push a
0143   04E2 DA            push d
0144   04E3 FA EB FF      lea d, [bp + -21] ; $i
0145   04E6 2A            mov b, [d]
0146   04E7 E7            pop d
0147   04E8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0148   04EC E4            pop a
0149   04ED 2A            mov b, [d]
0150   04EE FD AB         swp b
0151   04F0 D8            push b
0152   04F1 FA EB FF      lea d, [bp + -21] ; $i
0153   04F4 2A            mov b, [d]
0154   04F5 FD AB         swp b
0155   04F7 D8            push b
0156   04F8 26 54 26      mov b, __s0 ; "Test %d, Result: %d\n"
0157   04FB FD AB         swp b
0158   04FD D8            push b
0159   04FE 07 B8 11      call printf
0160   0501 51 06 00      add sp, 6
0161   0504             _for2_update:
0162   0504 FA EB FF      lea d, [bp + -21] ; $i
0163   0507 2A            mov b, [d]
0164   0508 D8            push b
0165   0509 FD 77         inc b
0166   050B FA EB FF      lea d, [bp + -21] ; $i
0167   050E FD 43         mov [d], b
0168   0510 E5            pop b
0169   0511 0A CA 04      jmp _for2_cond
0170   0514             _for2_exit:
0171   0514 05 0B         syscall sys_terminate_proc
0172   0516             
0173   0516             strcpy:
0174   0516 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0175   0519             ; $psrc 
0176   0519             ; $pdest 
0177   0519 52 04 00      sub sp, 4
0178   051C             ;; psrc = src; 
0179   051C FA FF FF      lea d, [bp + -1] ; $psrc
0180   051F DA            push d
0181   0520 FA 07 00      lea d, [bp + 7] ; $src
0182   0523 2A            mov b, [d]
0183   0524 E7            pop d
0184   0525 FD 43         mov [d], b
0185   0527             ;; pdest = dest; 
0186   0527 FA FD FF      lea d, [bp + -3] ; $pdest
0187   052A DA            push d
0188   052B FA 05 00      lea d, [bp + 5] ; $dest
0189   052E 2A            mov b, [d]
0190   052F E7            pop d
0191   0530 FD 43         mov [d], b
0192   0532             ;; while(*psrc) *pdest++ = *psrc++; 
0193   0532             _while3_cond:
0194   0532 FA FF FF      lea d, [bp + -1] ; $psrc
0195   0535 2A            mov b, [d]
0196   0536 74            mov d, b
0197   0537 32            mov bl, [d]
0198   0538 A7 00         mov bh, 0
0199   053A C0 00 00      cmp b, 0
0200   053D C6 65 05      je _while3_exit
0201   0540             _while3_block:
0202   0540             ;; *pdest++ = *psrc++; 
0203   0540 FA FD FF      lea d, [bp + -3] ; $pdest
0204   0543 2A            mov b, [d]
0205   0544 D8            push b
0206   0545 FD 77         inc b
0207   0547 FA FD FF      lea d, [bp + -3] ; $pdest
0208   054A FD 43         mov [d], b
0209   054C E5            pop b
0210   054D D8            push b
0211   054E FA FF FF      lea d, [bp + -1] ; $psrc
0212   0551 2A            mov b, [d]
0213   0552 D8            push b
0214   0553 FD 77         inc b
0215   0555 FA FF FF      lea d, [bp + -1] ; $psrc
0216   0558 FD 43         mov [d], b
0217   055A E5            pop b
0218   055B 74            mov d, b
0219   055C 32            mov bl, [d]
0220   055D A7 00         mov bh, 0
0221   055F E7            pop d
0222   0560 FD 3E         mov [d], bl
0223   0562 0A 32 05      jmp _while3_cond
0224   0565             _while3_exit:
0225   0565             ;; *pdest = '\0'; 
0226   0565 FA FD FF      lea d, [bp + -3] ; $pdest
0227   0568 2A            mov b, [d]
0228   0569 D8            push b
0229   056A 26 00 00      mov b, $0
0230   056D E7            pop d
0231   056E FD 3E         mov [d], bl
0232   0570 F9            leave
0233   0571 09            ret
0234   0572             
0235   0572             strcmp:
0236   0572 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0237   0575             ;; while (*s1 && (*s1 == *s2)) { 
0238   0575             _while4_cond:
0239   0575 FA 05 00      lea d, [bp + 5] ; $s1
0240   0578 2A            mov b, [d]
0241   0579 74            mov d, b
0242   057A 32            mov bl, [d]
0243   057B A7 00         mov bh, 0
0244   057D D7            push a
0245   057E 11            mov a, b
0246   057F FA 05 00      lea d, [bp + 5] ; $s1
0247   0582 2A            mov b, [d]
0248   0583 74            mov d, b
0249   0584 32            mov bl, [d]
0250   0585 A7 00         mov bh, 0
0251   0587             ; START RELATIONAL
0252   0587 D7            push a
0253   0588 11            mov a, b
0254   0589 FA 07 00      lea d, [bp + 7] ; $s2
0255   058C 2A            mov b, [d]
0256   058D 74            mov d, b
0257   058E 32            mov bl, [d]
0258   058F A7 00         mov bh, 0
0259   0591 B0            cmp a, b
0260   0592 FD 71         seq ; ==
0261   0594 E4            pop a
0262   0595             ; END RELATIONAL
0263   0595 FD A7         sand a, b ; &&
0264   0597 E4            pop a
0265   0598 C0 00 00      cmp b, 0
0266   059B C6 BB 05      je _while4_exit
0267   059E             _while4_block:
0268   059E             ;; s1++; 
0269   059E FA 05 00      lea d, [bp + 5] ; $s1
0270   05A1 2A            mov b, [d]
0271   05A2 D8            push b
0272   05A3 FD 77         inc b
0273   05A5 FA 05 00      lea d, [bp + 5] ; $s1
0274   05A8 FD 43         mov [d], b
0275   05AA E5            pop b
0276   05AB             ;; s2++; 
0277   05AB FA 07 00      lea d, [bp + 7] ; $s2
0278   05AE 2A            mov b, [d]
0279   05AF D8            push b
0280   05B0 FD 77         inc b
0281   05B2 FA 07 00      lea d, [bp + 7] ; $s2
0282   05B5 FD 43         mov [d], b
0283   05B7 E5            pop b
0284   05B8 0A 75 05      jmp _while4_cond
0285   05BB             _while4_exit:
0286   05BB             ;; return *s1 - *s2; 
0287   05BB FA 05 00      lea d, [bp + 5] ; $s1
0288   05BE 2A            mov b, [d]
0289   05BF 74            mov d, b
0290   05C0 32            mov bl, [d]
0291   05C1 A7 00         mov bh, 0
0292   05C3             ; START TERMS
0293   05C3 D7            push a
0294   05C4 11            mov a, b
0295   05C5 FA 07 00      lea d, [bp + 7] ; $s2
0296   05C8 2A            mov b, [d]
0297   05C9 74            mov d, b
0298   05CA 32            mov bl, [d]
0299   05CB A7 00         mov bh, 0
0300   05CD 60            sub a, b
0301   05CE 27            mov b, a
0302   05CF E4            pop a
0303   05D0             ; END TERMS
0304   05D0 F9            leave
0305   05D1 09            ret
0306   05D2             
0307   05D2             strcat:
0308   05D2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0309   05D5             ; $dest_len 
0310   05D5             ; $i 
0311   05D5 52 04 00      sub sp, 4
0312   05D8             ;; dest_len = strlen(dest); 
0313   05D8 FA FF FF      lea d, [bp + -1] ; $dest_len
0314   05DB DA            push d
0315   05DC FA 05 00      lea d, [bp + 5] ; $dest
0316   05DF 2A            mov b, [d]
0317   05E0 FD AB         swp b
0318   05E2 D8            push b
0319   05E3 07 85 06      call strlen
0320   05E6 51 02 00      add sp, 2
0321   05E9 E7            pop d
0322   05EA FD 43         mov [d], b
0323   05EC             ;; for (i = 0; src[i] != 0; i=i+1) { 
0324   05EC             _for5_init:
0325   05EC FA FD FF      lea d, [bp + -3] ; $i
0326   05EF DA            push d
0327   05F0 26 00 00      mov b, $0
0328   05F3 E7            pop d
0329   05F4 FD 43         mov [d], b
0330   05F6             _for5_cond:
0331   05F6 FA 07 00      lea d, [bp + 7] ; $src
0332   05F9 FD 2A         mov d, [d]
0333   05FB D7            push a
0334   05FC DA            push d
0335   05FD FA FD FF      lea d, [bp + -3] ; $i
0336   0600 2A            mov b, [d]
0337   0601 E7            pop d
0338   0602 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0339   0606 E4            pop a
0340   0607 32            mov bl, [d]
0341   0608 A7 00         mov bh, 0
0342   060A             ; START RELATIONAL
0343   060A D7            push a
0344   060B 11            mov a, b
0345   060C 26 00 00      mov b, $0
0346   060F B0            cmp a, b
0347   0610 FD 72         sneq ; !=
0348   0612 E4            pop a
0349   0613             ; END RELATIONAL
0350   0613 C0 00 00      cmp b, 0
0351   0616 C6 5F 06      je _for5_exit
0352   0619             _for5_block:
0353   0619             ;; dest[dest_len + i] = src[i]; 
0354   0619 FA 05 00      lea d, [bp + 5] ; $dest
0355   061C FD 2A         mov d, [d]
0356   061E D7            push a
0357   061F DA            push d
0358   0620 FA FF FF      lea d, [bp + -1] ; $dest_len
0359   0623 2A            mov b, [d]
0360   0624             ; START TERMS
0361   0624 D7            push a
0362   0625 11            mov a, b
0363   0626 FA FD FF      lea d, [bp + -3] ; $i
0364   0629 2A            mov b, [d]
0365   062A 56            add b, a
0366   062B E4            pop a
0367   062C             ; END TERMS
0368   062C E7            pop d
0369   062D FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0370   0631 E4            pop a
0371   0632 DA            push d
0372   0633 FA 07 00      lea d, [bp + 7] ; $src
0373   0636 FD 2A         mov d, [d]
0374   0638 D7            push a
0375   0639 DA            push d
0376   063A FA FD FF      lea d, [bp + -3] ; $i
0377   063D 2A            mov b, [d]
0378   063E E7            pop d
0379   063F FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0380   0643 E4            pop a
0381   0644 32            mov bl, [d]
0382   0645 A7 00         mov bh, 0
0383   0647 E7            pop d
0384   0648 FD 3E         mov [d], bl
0385   064A             _for5_update:
0386   064A FA FD FF      lea d, [bp + -3] ; $i
0387   064D DA            push d
0388   064E FA FD FF      lea d, [bp + -3] ; $i
0389   0651 2A            mov b, [d]
0390   0652             ; START TERMS
0391   0652 D7            push a
0392   0653 11            mov a, b
0393   0654 26 01 00      mov b, $1
0394   0657 56            add b, a
0395   0658 E4            pop a
0396   0659             ; END TERMS
0397   0659 E7            pop d
0398   065A FD 43         mov [d], b
0399   065C 0A F6 05      jmp _for5_cond
0400   065F             _for5_exit:
0401   065F             ;; dest[dest_len + i] = 0; 
0402   065F FA 05 00      lea d, [bp + 5] ; $dest
0403   0662 FD 2A         mov d, [d]
0404   0664 D7            push a
0405   0665 DA            push d
0406   0666 FA FF FF      lea d, [bp + -1] ; $dest_len
0407   0669 2A            mov b, [d]
0408   066A             ; START TERMS
0409   066A D7            push a
0410   066B 11            mov a, b
0411   066C FA FD FF      lea d, [bp + -3] ; $i
0412   066F 2A            mov b, [d]
0413   0670 56            add b, a
0414   0671 E4            pop a
0415   0672             ; END TERMS
0416   0672 E7            pop d
0417   0673 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0418   0677 E4            pop a
0419   0678 DA            push d
0420   0679 26 00 00      mov b, $0
0421   067C E7            pop d
0422   067D FD 3E         mov [d], bl
0423   067F             ;; return dest; 
0424   067F FA 05 00      lea d, [bp + 5] ; $dest
0425   0682 2A            mov b, [d]
0426   0683 F9            leave
0427   0684 09            ret
0428   0685             
0429   0685             strlen:
0430   0685 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0431   0688             ; $length 
0432   0688 52 02 00      sub sp, 2
0433   068B             ;; length = 0; 
0434   068B FA FF FF      lea d, [bp + -1] ; $length
0435   068E DA            push d
0436   068F 26 00 00      mov b, $0
0437   0692 E7            pop d
0438   0693 FD 43         mov [d], b
0439   0695             ;; while (str[length] != 0) { 
0440   0695             _while6_cond:
0441   0695 FA 05 00      lea d, [bp + 5] ; $str
0442   0698 FD 2A         mov d, [d]
0443   069A D7            push a
0444   069B DA            push d
0445   069C FA FF FF      lea d, [bp + -1] ; $length
0446   069F 2A            mov b, [d]
0447   06A0 E7            pop d
0448   06A1 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0449   06A5 E4            pop a
0450   06A6 32            mov bl, [d]
0451   06A7 A7 00         mov bh, 0
0452   06A9             ; START RELATIONAL
0453   06A9 D7            push a
0454   06AA 11            mov a, b
0455   06AB 26 00 00      mov b, $0
0456   06AE B0            cmp a, b
0457   06AF FD 72         sneq ; !=
0458   06B1 E4            pop a
0459   06B2             ; END RELATIONAL
0460   06B2 C0 00 00      cmp b, 0
0461   06B5 C6 C8 06      je _while6_exit
0462   06B8             _while6_block:
0463   06B8             ;; length++; 
0464   06B8 FA FF FF      lea d, [bp + -1] ; $length
0465   06BB 2A            mov b, [d]
0466   06BC D8            push b
0467   06BD FD 77         inc b
0468   06BF FA FF FF      lea d, [bp + -1] ; $length
0469   06C2 FD 43         mov [d], b
0470   06C4 E5            pop b
0471   06C5 0A 95 06      jmp _while6_cond
0472   06C8             _while6_exit:
0473   06C8             ;; return length; 
0474   06C8 FA FF FF      lea d, [bp + -1] ; $length
0475   06CB 2A            mov b, [d]
0476   06CC F9            leave
0477   06CD 09            ret
0478   06CE             
0479   06CE             exit:
0480   06CE F8 00 00      enter 0 ; (push bp; mov bp, sp)
0481   06D1             
0482   06D1             ; --- BEGIN INLINE ASM BLOCK
0483   06D1 05 0B         syscall sys_terminate_proc
0484   06D3             ; --- END INLINE ASM BLOCK
0485   06D3             
0486   06D3 F9            leave
0487   06D4 09            ret
0488   06D5             
0489   06D5             atoi:
0490   06D5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0491   06D8             ; $result 
0492   06D8 10 00 00      mov a, $0
0493   06DB 45 FF FF      mov [bp + -1], a
0494   06DE             ; $sign 
0495   06DE 10 01 00      mov a, $1
0496   06E1 45 FD FF      mov [bp + -3], a
0497   06E4 52 04 00      sub sp, 4
0498   06E7             ;; while (*str == ' ') str++; 
0499   06E7             _while7_cond:
0500   06E7 FA 05 00      lea d, [bp + 5] ; $str
0501   06EA 2A            mov b, [d]
0502   06EB 74            mov d, b
0503   06EC 32            mov bl, [d]
0504   06ED A7 00         mov bh, 0
0505   06EF             ; START RELATIONAL
0506   06EF D7            push a
0507   06F0 11            mov a, b
0508   06F1 26 20 00      mov b, $20
0509   06F4 B0            cmp a, b
0510   06F5 FD 71         seq ; ==
0511   06F7 E4            pop a
0512   06F8             ; END RELATIONAL
0513   06F8 C0 00 00      cmp b, 0
0514   06FB C6 0E 07      je _while7_exit
0515   06FE             _while7_block:
0516   06FE             ;; str++; 
0517   06FE FA 05 00      lea d, [bp + 5] ; $str
0518   0701 2A            mov b, [d]
0519   0702 D8            push b
0520   0703 FD 77         inc b
0521   0705 FA 05 00      lea d, [bp + 5] ; $str
0522   0708 FD 43         mov [d], b
0523   070A E5            pop b
0524   070B 0A E7 06      jmp _while7_cond
0525   070E             _while7_exit:
0526   070E             ;; if (*str == '-' || *str == '+') { 
0527   070E             _if8_cond:
0528   070E FA 05 00      lea d, [bp + 5] ; $str
0529   0711 2A            mov b, [d]
0530   0712 74            mov d, b
0531   0713 32            mov bl, [d]
0532   0714 A7 00         mov bh, 0
0533   0716             ; START RELATIONAL
0534   0716 D7            push a
0535   0717 11            mov a, b
0536   0718 26 2D 00      mov b, $2d
0537   071B B0            cmp a, b
0538   071C FD 71         seq ; ==
0539   071E E4            pop a
0540   071F             ; END RELATIONAL
0541   071F D7            push a
0542   0720 11            mov a, b
0543   0721 FA 05 00      lea d, [bp + 5] ; $str
0544   0724 2A            mov b, [d]
0545   0725 74            mov d, b
0546   0726 32            mov bl, [d]
0547   0727 A7 00         mov bh, 0
0548   0729             ; START RELATIONAL
0549   0729 D7            push a
0550   072A 11            mov a, b
0551   072B 26 2B 00      mov b, $2b
0552   072E B0            cmp a, b
0553   072F FD 71         seq ; ==
0554   0731 E4            pop a
0555   0732             ; END RELATIONAL
0556   0732 FD A8         sor a, b ; ||
0557   0734 E4            pop a
0558   0735 C0 00 00      cmp b, 0
0559   0738 C6 6F 07      je _if8_exit
0560   073B             _if8_true:
0561   073B             ;; if (*str == '-') sign = -1; 
0562   073B             _if9_cond:
0563   073B FA 05 00      lea d, [bp + 5] ; $str
0564   073E 2A            mov b, [d]
0565   073F 74            mov d, b
0566   0740 32            mov bl, [d]
0567   0741 A7 00         mov bh, 0
0568   0743             ; START RELATIONAL
0569   0743 D7            push a
0570   0744 11            mov a, b
0571   0745 26 2D 00      mov b, $2d
0572   0748 B0            cmp a, b
0573   0749 FD 71         seq ; ==
0574   074B E4            pop a
0575   074C             ; END RELATIONAL
0576   074C C0 00 00      cmp b, 0
0577   074F C6 5F 07      je _if9_exit
0578   0752             _if9_true:
0579   0752             ;; sign = -1; 
0580   0752 FA FD FF      lea d, [bp + -3] ; $sign
0581   0755 DA            push d
0582   0756 26 FF FF      mov b, $ffff
0583   0759 E7            pop d
0584   075A FD 43         mov [d], b
0585   075C 0A 5F 07      jmp _if9_exit
0586   075F             _if9_exit:
0587   075F             ;; str++; 
0588   075F FA 05 00      lea d, [bp + 5] ; $str
0589   0762 2A            mov b, [d]
0590   0763 D8            push b
0591   0764 FD 77         inc b
0592   0766 FA 05 00      lea d, [bp + 5] ; $str
0593   0769 FD 43         mov [d], b
0594   076B E5            pop b
0595   076C 0A 6F 07      jmp _if8_exit
0596   076F             _if8_exit:
0597   076F             ;; while (*str >= '0' && *str <= '9') { 
0598   076F             _while10_cond:
0599   076F FA 05 00      lea d, [bp + 5] ; $str
0600   0772 2A            mov b, [d]
0601   0773 74            mov d, b
0602   0774 32            mov bl, [d]
0603   0775 A7 00         mov bh, 0
0604   0777             ; START RELATIONAL
0605   0777 D7            push a
0606   0778 11            mov a, b
0607   0779 26 30 00      mov b, $30
0608   077C B0            cmp a, b
0609   077D FD 82         sgeu ; >= (unsigned)
0610   077F E4            pop a
0611   0780             ; END RELATIONAL
0612   0780 D7            push a
0613   0781 11            mov a, b
0614   0782 FA 05 00      lea d, [bp + 5] ; $str
0615   0785 2A            mov b, [d]
0616   0786 74            mov d, b
0617   0787 32            mov bl, [d]
0618   0788 A7 00         mov bh, 0
0619   078A             ; START RELATIONAL
0620   078A D7            push a
0621   078B 11            mov a, b
0622   078C 26 39 00      mov b, $39
0623   078F B0            cmp a, b
0624   0790 FD 76         sleu ; <= (unsigned)
0625   0792 E4            pop a
0626   0793             ; END RELATIONAL
0627   0793 FD A7         sand a, b ; &&
0628   0795 E4            pop a
0629   0796 C0 00 00      cmp b, 0
0630   0799 C6 D4 07      je _while10_exit
0631   079C             _while10_block:
0632   079C             ;; result = result * 10 + (*str - '0'); 
0633   079C FA FF FF      lea d, [bp + -1] ; $result
0634   079F DA            push d
0635   07A0 FA FF FF      lea d, [bp + -1] ; $result
0636   07A3 2A            mov b, [d]
0637   07A4             ; START FACTORS
0638   07A4 D7            push a
0639   07A5 11            mov a, b
0640   07A6 26 0A 00      mov b, $a
0641   07A9 AC            mul a, b ; *
0642   07AA 11            mov a, b
0643   07AB 27            mov b, a
0644   07AC E4            pop a
0645   07AD             ; END FACTORS
0646   07AD             ; START TERMS
0647   07AD D7            push a
0648   07AE 11            mov a, b
0649   07AF FA 05 00      lea d, [bp + 5] ; $str
0650   07B2 2A            mov b, [d]
0651   07B3 74            mov d, b
0652   07B4 32            mov bl, [d]
0653   07B5 A7 00         mov bh, 0
0654   07B7             ; START TERMS
0655   07B7 D7            push a
0656   07B8 11            mov a, b
0657   07B9 26 30 00      mov b, $30
0658   07BC 60            sub a, b
0659   07BD 27            mov b, a
0660   07BE E4            pop a
0661   07BF             ; END TERMS
0662   07BF 56            add b, a
0663   07C0 E4            pop a
0664   07C1             ; END TERMS
0665   07C1 E7            pop d
0666   07C2 FD 43         mov [d], b
0667   07C4             ;; str++; 
0668   07C4 FA 05 00      lea d, [bp + 5] ; $str
0669   07C7 2A            mov b, [d]
0670   07C8 D8            push b
0671   07C9 FD 77         inc b
0672   07CB FA 05 00      lea d, [bp + 5] ; $str
0673   07CE FD 43         mov [d], b
0674   07D0 E5            pop b
0675   07D1 0A 6F 07      jmp _while10_cond
0676   07D4             _while10_exit:
0677   07D4             ;; return sign * result; 
0678   07D4 FA FD FF      lea d, [bp + -3] ; $sign
0679   07D7 2A            mov b, [d]
0680   07D8             ; START FACTORS
0681   07D8 D7            push a
0682   07D9 11            mov a, b
0683   07DA FA FF FF      lea d, [bp + -1] ; $result
0684   07DD 2A            mov b, [d]
0685   07DE AC            mul a, b ; *
0686   07DF 11            mov a, b
0687   07E0 27            mov b, a
0688   07E1 E4            pop a
0689   07E2             ; END FACTORS
0690   07E2 F9            leave
0691   07E3 09            ret
0692   07E4             
0693   07E4             rand:
0694   07E4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0695   07E7             ; $sec 
0696   07E7 52 02 00      sub sp, 2
0697   07EA             
0698   07EA             ; --- BEGIN INLINE ASM BLOCK
0699   07EA 19 00         mov al, 0
0700   07EC 05 01         syscall sys_rtc					
0701   07EE 1A            mov al, ah
0702   07EF FA FF FF      lea d, [bp + -1] ; $sec
0703   07F2 1E            mov al, [d]
0704   07F3 22 00         mov ah, 0
0705   07F5             ; --- END INLINE ASM BLOCK
0706   07F5             
0707   07F5             ;; return sec; 
0708   07F5 FA FF FF      lea d, [bp + -1] ; $sec
0709   07F8 2A            mov b, [d]
0710   07F9 F9            leave
0711   07FA 09            ret
0712   07FB             
0713   07FB             srand:
0714   07FB F8 00 00      enter 0 ; (push bp; mov bp, sp)
0715   07FE F9            leave
0716   07FF 09            ret
0717   0800             
0718   0800             malloc:
0719   0800 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0720   0803 F9            leave
0721   0804 09            ret
0722   0805             
0723   0805             calloc:
0724   0805 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0725   0808 F9            leave
0726   0809 09            ret
0727   080A             
0728   080A             realloc:
0729   080A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0730   080D F9            leave
0731   080E 09            ret
0732   080F             
0733   080F             alloc:
0734   080F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0735   0812             ;; heap_top = heap_top + bytes; 
0736   0812 3B AD 26      mov d, _heap_top ; $heap_top
0737   0815 DA            push d
0738   0816 3B AD 26      mov d, _heap_top ; $heap_top
0739   0819 2A            mov b, [d]
0740   081A             ; START TERMS
0741   081A D7            push a
0742   081B 11            mov a, b
0743   081C FA 05 00      lea d, [bp + 5] ; $bytes
0744   081F 2A            mov b, [d]
0745   0820 56            add b, a
0746   0821 E4            pop a
0747   0822             ; END TERMS
0748   0822 E7            pop d
0749   0823 FD 43         mov [d], b
0750   0825             ;; return heap_top - bytes; 
0751   0825 3B AD 26      mov d, _heap_top ; $heap_top
0752   0828 2A            mov b, [d]
0753   0829             ; START TERMS
0754   0829 D7            push a
0755   082A 11            mov a, b
0756   082B FA 05 00      lea d, [bp + 5] ; $bytes
0757   082E 2A            mov b, [d]
0758   082F 60            sub a, b
0759   0830 27            mov b, a
0760   0831 E4            pop a
0761   0832             ; END TERMS
0762   0832 F9            leave
0763   0833 09            ret
0764   0834             
0765   0834             free:
0766   0834 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0767   0837             ;; return heap_top = heap_top - bytes; 
0768   0837 3B AD 26      mov d, _heap_top ; $heap_top
0769   083A DA            push d
0770   083B 3B AD 26      mov d, _heap_top ; $heap_top
0771   083E 2A            mov b, [d]
0772   083F             ; START TERMS
0773   083F D7            push a
0774   0840 11            mov a, b
0775   0841 FA 05 00      lea d, [bp + 5] ; $bytes
0776   0844 2A            mov b, [d]
0777   0845 60            sub a, b
0778   0846 27            mov b, a
0779   0847 E4            pop a
0780   0848             ; END TERMS
0781   0848 E7            pop d
0782   0849 FD 43         mov [d], b
0783   084B F9            leave
0784   084C 09            ret
0785   084D             
0786   084D             base64_encode:
0787   084D F8 00 00      enter 0 ; (push bp; mov bp, sp)
0788   0850             ; $i 
0789   0850 10 00 00      mov a, $0
0790   0853 45 FF FF      mov [bp + -1], a
0791   0856             ; $j 
0792   0856 10 00 00      mov a, $0
0793   0859 45 FD FF      mov [bp + -3], a
0794   085C             ; $k 
0795   085C             ; $input_len 
0796   085C             ; $input_buffer 
0797   085C             ; $output_buffer 
0798   085C 52 0F 00      sub sp, 15
0799   085F             ;; input_len = strlen(input); 
0800   085F FA F9 FF      lea d, [bp + -7] ; $input_len
0801   0862 DA            push d
0802   0863 FA 05 00      lea d, [bp + 5] ; $input
0803   0866 2A            mov b, [d]
0804   0867 FD AB         swp b
0805   0869 D8            push b
0806   086A 07 85 06      call strlen
0807   086D 51 02 00      add sp, 2
0808   0870 E7            pop d
0809   0871 FD 43         mov [d], b
0810   0873             ;; while (input_len--) { 
0811   0873             _while11_cond:
0812   0873 FA F9 FF      lea d, [bp + -7] ; $input_len
0813   0876 2A            mov b, [d]
0814   0877 D8            push b
0815   0878 FD 7D         dec b
0816   087A FA F9 FF      lea d, [bp + -7] ; $input_len
0817   087D FD 43         mov [d], b
0818   087F E5            pop b
0819   0880 C0 00 00      cmp b, 0
0820   0883 C6 37 0A      je _while11_exit
0821   0886             _while11_block:
0822   0886             ;; input_buffer[i++] = *(input++); 
0823   0886 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0824   0889 D7            push a
0825   088A DA            push d
0826   088B FA FF FF      lea d, [bp + -1] ; $i
0827   088E 2A            mov b, [d]
0828   088F D8            push b
0829   0890 FD 77         inc b
0830   0892 FA FF FF      lea d, [bp + -1] ; $i
0831   0895 FD 43         mov [d], b
0832   0897 E5            pop b
0833   0898 E7            pop d
0834   0899 5A            add d, b
0835   089A E4            pop a
0836   089B DA            push d
0837   089C FA 05 00      lea d, [bp + 5] ; $input
0838   089F 2A            mov b, [d]
0839   08A0 D8            push b
0840   08A1 FD 77         inc b
0841   08A3 FA 05 00      lea d, [bp + 5] ; $input
0842   08A6 FD 43         mov [d], b
0843   08A8 E5            pop b
0844   08A9 74            mov d, b
0845   08AA 32            mov bl, [d]
0846   08AB A7 00         mov bh, 0
0847   08AD E7            pop d
0848   08AE FD 3E         mov [d], bl
0849   08B0             ;; if (i == 3) { 
0850   08B0             _if12_cond:
0851   08B0 FA FF FF      lea d, [bp + -1] ; $i
0852   08B3 2A            mov b, [d]
0853   08B4             ; START RELATIONAL
0854   08B4 D7            push a
0855   08B5 11            mov a, b
0856   08B6 26 03 00      mov b, $3
0857   08B9 B0            cmp a, b
0858   08BA FD 71         seq ; ==
0859   08BC E4            pop a
0860   08BD             ; END RELATIONAL
0861   08BD C0 00 00      cmp b, 0
0862   08C0 C6 34 0A      je _if12_exit
0863   08C3             _if12_true:
0864   08C3             ;; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
0865   08C3 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0866   08C6 D7            push a
0867   08C7 DA            push d
0868   08C8 26 00 00      mov b, $0
0869   08CB E7            pop d
0870   08CC 5A            add d, b
0871   08CD E4            pop a
0872   08CE DA            push d
0873   08CF FA F6 FF      lea d, [bp + -10] ; $input_buffer
0874   08D2 D7            push a
0875   08D3 DA            push d
0876   08D4 26 00 00      mov b, $0
0877   08D7 E7            pop d
0878   08D8 5A            add d, b
0879   08D9 E4            pop a
0880   08DA 32            mov bl, [d]
0881   08DB A7 00         mov bh, 0
0882   08DD D7            push a
0883   08DE 11            mov a, b
0884   08DF 26 FC 00      mov b, $fc
0885   08E2 86            and a, b ; &
0886   08E3 27            mov b, a
0887   08E4 E4            pop a
0888   08E5             ; START SHIFT
0889   08E5 D7            push a
0890   08E6 11            mov a, b
0891   08E7 26 02 00      mov b, $2
0892   08EA FD 39         mov c, b
0893   08EC A5            ashr a, cl
0894   08ED 27            mov b, a
0895   08EE E4            pop a
0896   08EF             ; END SHIFT
0897   08EF E7            pop d
0898   08F0 FD 3E         mov [d], bl
0899   08F2             ;; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
0900   08F2 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0901   08F5 D7            push a
0902   08F6 DA            push d
0903   08F7 26 01 00      mov b, $1
0904   08FA E7            pop d
0905   08FB 5A            add d, b
0906   08FC E4            pop a
0907   08FD DA            push d
0908   08FE FA F6 FF      lea d, [bp + -10] ; $input_buffer
0909   0901 D7            push a
0910   0902 DA            push d
0911   0903 26 00 00      mov b, $0
0912   0906 E7            pop d
0913   0907 5A            add d, b
0914   0908 E4            pop a
0915   0909 32            mov bl, [d]
0916   090A A7 00         mov bh, 0
0917   090C D7            push a
0918   090D 11            mov a, b
0919   090E 26 03 00      mov b, $3
0920   0911 86            and a, b ; &
0921   0912 27            mov b, a
0922   0913 E4            pop a
0923   0914             ; START SHIFT
0924   0914 D7            push a
0925   0915 11            mov a, b
0926   0916 26 04 00      mov b, $4
0927   0919 FD 39         mov c, b
0928   091B 9D            shl a, cl
0929   091C 27            mov b, a
0930   091D E4            pop a
0931   091E             ; END SHIFT
0932   091E             ; START TERMS
0933   091E D7            push a
0934   091F 11            mov a, b
0935   0920 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0936   0923 D7            push a
0937   0924 DA            push d
0938   0925 26 01 00      mov b, $1
0939   0928 E7            pop d
0940   0929 5A            add d, b
0941   092A E4            pop a
0942   092B 32            mov bl, [d]
0943   092C A7 00         mov bh, 0
0944   092E D7            push a
0945   092F 11            mov a, b
0946   0930 26 F0 00      mov b, $f0
0947   0933 86            and a, b ; &
0948   0934 27            mov b, a
0949   0935 E4            pop a
0950   0936             ; START SHIFT
0951   0936 D7            push a
0952   0937 11            mov a, b
0953   0938 26 04 00      mov b, $4
0954   093B FD 39         mov c, b
0955   093D A5            ashr a, cl
0956   093E 27            mov b, a
0957   093F E4            pop a
0958   0940             ; END SHIFT
0959   0940 56            add b, a
0960   0941 E4            pop a
0961   0942             ; END TERMS
0962   0942 E7            pop d
0963   0943 FD 3E         mov [d], bl
0964   0945             ;; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
0965   0945 FA F2 FF      lea d, [bp + -14] ; $output_buffer
0966   0948 D7            push a
0967   0949 DA            push d
0968   094A 26 02 00      mov b, $2
0969   094D E7            pop d
0970   094E 5A            add d, b
0971   094F E4            pop a
0972   0950 DA            push d
0973   0951 FA F6 FF      lea d, [bp + -10] ; $input_buffer
0974   0954 D7            push a
0975   0955 DA            push d
0976   0956 26 01 00      mov b, $1
0977   0959 E7            pop d
0978   095A 5A            add d, b
0979   095B E4            pop a
0980   095C 32            mov bl, [d]
0981   095D A7 00         mov bh, 0
0982   095F D7            push a
0983   0960 11            mov a, b
0984   0961 26 0F 00      mov b, $f
0985   0964 86            and a, b ; &
0986   0965 27            mov b, a
0987   0966 E4            pop a
0988   0967             ; START SHIFT
0989   0967 D7            push a
0990   0968 11            mov a, b
0991   0969 26 02 00      mov b, $2
0992   096C FD 39         mov c, b
0993   096E 9D            shl a, cl
0994   096F 27            mov b, a
0995   0970 E4            pop a
0996   0971             ; END SHIFT
0997   0971             ; START TERMS
0998   0971 D7            push a
0999   0972 11            mov a, b
1000   0973 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1001   0976 D7            push a
1002   0977 DA            push d
1003   0978 26 02 00      mov b, $2
1004   097B E7            pop d
1005   097C 5A            add d, b
1006   097D E4            pop a
1007   097E 32            mov bl, [d]
1008   097F A7 00         mov bh, 0
1009   0981 D7            push a
1010   0982 11            mov a, b
1011   0983 26 C0 00      mov b, $c0
1012   0986 86            and a, b ; &
1013   0987 27            mov b, a
1014   0988 E4            pop a
1015   0989             ; START SHIFT
1016   0989 D7            push a
1017   098A 11            mov a, b
1018   098B 26 06 00      mov b, $6
1019   098E FD 39         mov c, b
1020   0990 A5            ashr a, cl
1021   0991 27            mov b, a
1022   0992 E4            pop a
1023   0993             ; END SHIFT
1024   0993 56            add b, a
1025   0994 E4            pop a
1026   0995             ; END TERMS
1027   0995 E7            pop d
1028   0996 FD 3E         mov [d], bl
1029   0998             ;; output_buffer[3] = input_buffer[2] & 0x3F; 
1030   0998 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1031   099B D7            push a
1032   099C DA            push d
1033   099D 26 03 00      mov b, $3
1034   09A0 E7            pop d
1035   09A1 5A            add d, b
1036   09A2 E4            pop a
1037   09A3 DA            push d
1038   09A4 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1039   09A7 D7            push a
1040   09A8 DA            push d
1041   09A9 26 02 00      mov b, $2
1042   09AC E7            pop d
1043   09AD 5A            add d, b
1044   09AE E4            pop a
1045   09AF 32            mov bl, [d]
1046   09B0 A7 00         mov bh, 0
1047   09B2 D7            push a
1048   09B3 11            mov a, b
1049   09B4 26 3F 00      mov b, $3f
1050   09B7 86            and a, b ; &
1051   09B8 27            mov b, a
1052   09B9 E4            pop a
1053   09BA E7            pop d
1054   09BB FD 3E         mov [d], bl
1055   09BD             ;; for (i = 0; i < 4; i++) { 
1056   09BD             _for13_init:
1057   09BD FA FF FF      lea d, [bp + -1] ; $i
1058   09C0 DA            push d
1059   09C1 26 00 00      mov b, $0
1060   09C4 E7            pop d
1061   09C5 FD 43         mov [d], b
1062   09C7             _for13_cond:
1063   09C7 FA FF FF      lea d, [bp + -1] ; $i
1064   09CA 2A            mov b, [d]
1065   09CB             ; START RELATIONAL
1066   09CB D7            push a
1067   09CC 11            mov a, b
1068   09CD 26 04 00      mov b, $4
1069   09D0 B0            cmp a, b
1070   09D1 FD 73         slt ; <= (signed)
1071   09D3 E4            pop a
1072   09D4             ; END RELATIONAL
1073   09D4 C0 00 00      cmp b, 0
1074   09D7 C6 27 0A      je _for13_exit
1075   09DA             _for13_block:
1076   09DA             ;; output[j++] = base64_table[output_buffer[i]]; 
1077   09DA FA 07 00      lea d, [bp + 7] ; $output
1078   09DD FD 2A         mov d, [d]
1079   09DF D7            push a
1080   09E0 DA            push d
1081   09E1 FA FD FF      lea d, [bp + -3] ; $j
1082   09E4 2A            mov b, [d]
1083   09E5 D8            push b
1084   09E6 FD 77         inc b
1085   09E8 FA FD FF      lea d, [bp + -3] ; $j
1086   09EB FD 43         mov [d], b
1087   09ED E5            pop b
1088   09EE E7            pop d
1089   09EF FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1090   09F3 E4            pop a
1091   09F4 DA            push d
1092   09F5 3B 45 26      mov d, _base64_table ; $base64_table
1093   09F8 FD 2A         mov d, [d]
1094   09FA D7            push a
1095   09FB DA            push d
1096   09FC FA F2 FF      lea d, [bp + -14] ; $output_buffer
1097   09FF D7            push a
1098   0A00 DA            push d
1099   0A01 FA FF FF      lea d, [bp + -1] ; $i
1100   0A04 2A            mov b, [d]
1101   0A05 E7            pop d
1102   0A06 5A            add d, b
1103   0A07 E4            pop a
1104   0A08 32            mov bl, [d]
1105   0A09 A7 00         mov bh, 0
1106   0A0B E7            pop d
1107   0A0C FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1108   0A10 E4            pop a
1109   0A11 32            mov bl, [d]
1110   0A12 A7 00         mov bh, 0
1111   0A14 E7            pop d
1112   0A15 FD 3E         mov [d], bl
1113   0A17             _for13_update:
1114   0A17 FA FF FF      lea d, [bp + -1] ; $i
1115   0A1A 2A            mov b, [d]
1116   0A1B D8            push b
1117   0A1C FD 77         inc b
1118   0A1E FA FF FF      lea d, [bp + -1] ; $i
1119   0A21 FD 43         mov [d], b
1120   0A23 E5            pop b
1121   0A24 0A C7 09      jmp _for13_cond
1122   0A27             _for13_exit:
1123   0A27             ;; i = 0; 
1124   0A27 FA FF FF      lea d, [bp + -1] ; $i
1125   0A2A DA            push d
1126   0A2B 26 00 00      mov b, $0
1127   0A2E E7            pop d
1128   0A2F FD 43         mov [d], b
1129   0A31 0A 34 0A      jmp _if12_exit
1130   0A34             _if12_exit:
1131   0A34 0A 73 08      jmp _while11_cond
1132   0A37             _while11_exit:
1133   0A37             ;; if (i) { 
1134   0A37             _if14_cond:
1135   0A37 FA FF FF      lea d, [bp + -1] ; $i
1136   0A3A 2A            mov b, [d]
1137   0A3B C0 00 00      cmp b, 0
1138   0A3E C6 0C 0C      je _if14_exit
1139   0A41             _if14_true:
1140   0A41             ;; for (k = i; k < 3; k++) { 
1141   0A41             _for15_init:
1142   0A41 FA FB FF      lea d, [bp + -5] ; $k
1143   0A44 DA            push d
1144   0A45 FA FF FF      lea d, [bp + -1] ; $i
1145   0A48 2A            mov b, [d]
1146   0A49 E7            pop d
1147   0A4A FD 43         mov [d], b
1148   0A4C             _for15_cond:
1149   0A4C FA FB FF      lea d, [bp + -5] ; $k
1150   0A4F 2A            mov b, [d]
1151   0A50             ; START RELATIONAL
1152   0A50 D7            push a
1153   0A51 11            mov a, b
1154   0A52 26 03 00      mov b, $3
1155   0A55 B0            cmp a, b
1156   0A56 FD 73         slt ; <= (signed)
1157   0A58 E4            pop a
1158   0A59             ; END RELATIONAL
1159   0A59 C0 00 00      cmp b, 0
1160   0A5C C6 82 0A      je _for15_exit
1161   0A5F             _for15_block:
1162   0A5F             ;; input_buffer[k] = '\0'; 
1163   0A5F FA F6 FF      lea d, [bp + -10] ; $input_buffer
1164   0A62 D7            push a
1165   0A63 DA            push d
1166   0A64 FA FB FF      lea d, [bp + -5] ; $k
1167   0A67 2A            mov b, [d]
1168   0A68 E7            pop d
1169   0A69 5A            add d, b
1170   0A6A E4            pop a
1171   0A6B DA            push d
1172   0A6C 26 00 00      mov b, $0
1173   0A6F E7            pop d
1174   0A70 FD 3E         mov [d], bl
1175   0A72             _for15_update:
1176   0A72 FA FB FF      lea d, [bp + -5] ; $k
1177   0A75 2A            mov b, [d]
1178   0A76 D8            push b
1179   0A77 FD 77         inc b
1180   0A79 FA FB FF      lea d, [bp + -5] ; $k
1181   0A7C FD 43         mov [d], b
1182   0A7E E5            pop b
1183   0A7F 0A 4C 0A      jmp _for15_cond
1184   0A82             _for15_exit:
1185   0A82             ;; output_buffer[0] = (input_buffer[0] & 0xFC) >> 2; 
1186   0A82 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1187   0A85 D7            push a
1188   0A86 DA            push d
1189   0A87 26 00 00      mov b, $0
1190   0A8A E7            pop d
1191   0A8B 5A            add d, b
1192   0A8C E4            pop a
1193   0A8D DA            push d
1194   0A8E FA F6 FF      lea d, [bp + -10] ; $input_buffer
1195   0A91 D7            push a
1196   0A92 DA            push d
1197   0A93 26 00 00      mov b, $0
1198   0A96 E7            pop d
1199   0A97 5A            add d, b
1200   0A98 E4            pop a
1201   0A99 32            mov bl, [d]
1202   0A9A A7 00         mov bh, 0
1203   0A9C D7            push a
1204   0A9D 11            mov a, b
1205   0A9E 26 FC 00      mov b, $fc
1206   0AA1 86            and a, b ; &
1207   0AA2 27            mov b, a
1208   0AA3 E4            pop a
1209   0AA4             ; START SHIFT
1210   0AA4 D7            push a
1211   0AA5 11            mov a, b
1212   0AA6 26 02 00      mov b, $2
1213   0AA9 FD 39         mov c, b
1214   0AAB A5            ashr a, cl
1215   0AAC 27            mov b, a
1216   0AAD E4            pop a
1217   0AAE             ; END SHIFT
1218   0AAE E7            pop d
1219   0AAF FD 3E         mov [d], bl
1220   0AB1             ;; output_buffer[1] = ((input_buffer[0] & 0x03) << 4) + ((input_buffer[1] & 0xF0) >> 4); 
1221   0AB1 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1222   0AB4 D7            push a
1223   0AB5 DA            push d
1224   0AB6 26 01 00      mov b, $1
1225   0AB9 E7            pop d
1226   0ABA 5A            add d, b
1227   0ABB E4            pop a
1228   0ABC DA            push d
1229   0ABD FA F6 FF      lea d, [bp + -10] ; $input_buffer
1230   0AC0 D7            push a
1231   0AC1 DA            push d
1232   0AC2 26 00 00      mov b, $0
1233   0AC5 E7            pop d
1234   0AC6 5A            add d, b
1235   0AC7 E4            pop a
1236   0AC8 32            mov bl, [d]
1237   0AC9 A7 00         mov bh, 0
1238   0ACB D7            push a
1239   0ACC 11            mov a, b
1240   0ACD 26 03 00      mov b, $3
1241   0AD0 86            and a, b ; &
1242   0AD1 27            mov b, a
1243   0AD2 E4            pop a
1244   0AD3             ; START SHIFT
1245   0AD3 D7            push a
1246   0AD4 11            mov a, b
1247   0AD5 26 04 00      mov b, $4
1248   0AD8 FD 39         mov c, b
1249   0ADA 9D            shl a, cl
1250   0ADB 27            mov b, a
1251   0ADC E4            pop a
1252   0ADD             ; END SHIFT
1253   0ADD             ; START TERMS
1254   0ADD D7            push a
1255   0ADE 11            mov a, b
1256   0ADF FA F6 FF      lea d, [bp + -10] ; $input_buffer
1257   0AE2 D7            push a
1258   0AE3 DA            push d
1259   0AE4 26 01 00      mov b, $1
1260   0AE7 E7            pop d
1261   0AE8 5A            add d, b
1262   0AE9 E4            pop a
1263   0AEA 32            mov bl, [d]
1264   0AEB A7 00         mov bh, 0
1265   0AED D7            push a
1266   0AEE 11            mov a, b
1267   0AEF 26 F0 00      mov b, $f0
1268   0AF2 86            and a, b ; &
1269   0AF3 27            mov b, a
1270   0AF4 E4            pop a
1271   0AF5             ; START SHIFT
1272   0AF5 D7            push a
1273   0AF6 11            mov a, b
1274   0AF7 26 04 00      mov b, $4
1275   0AFA FD 39         mov c, b
1276   0AFC A5            ashr a, cl
1277   0AFD 27            mov b, a
1278   0AFE E4            pop a
1279   0AFF             ; END SHIFT
1280   0AFF 56            add b, a
1281   0B00 E4            pop a
1282   0B01             ; END TERMS
1283   0B01 E7            pop d
1284   0B02 FD 3E         mov [d], bl
1285   0B04             ;; output_buffer[2] = ((input_buffer[1] & 0x0F) << 2) + ((input_buffer[2] & 0xC0) >> 6); 
1286   0B04 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1287   0B07 D7            push a
1288   0B08 DA            push d
1289   0B09 26 02 00      mov b, $2
1290   0B0C E7            pop d
1291   0B0D 5A            add d, b
1292   0B0E E4            pop a
1293   0B0F DA            push d
1294   0B10 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1295   0B13 D7            push a
1296   0B14 DA            push d
1297   0B15 26 01 00      mov b, $1
1298   0B18 E7            pop d
1299   0B19 5A            add d, b
1300   0B1A E4            pop a
1301   0B1B 32            mov bl, [d]
1302   0B1C A7 00         mov bh, 0
1303   0B1E D7            push a
1304   0B1F 11            mov a, b
1305   0B20 26 0F 00      mov b, $f
1306   0B23 86            and a, b ; &
1307   0B24 27            mov b, a
1308   0B25 E4            pop a
1309   0B26             ; START SHIFT
1310   0B26 D7            push a
1311   0B27 11            mov a, b
1312   0B28 26 02 00      mov b, $2
1313   0B2B FD 39         mov c, b
1314   0B2D 9D            shl a, cl
1315   0B2E 27            mov b, a
1316   0B2F E4            pop a
1317   0B30             ; END SHIFT
1318   0B30             ; START TERMS
1319   0B30 D7            push a
1320   0B31 11            mov a, b
1321   0B32 FA F6 FF      lea d, [bp + -10] ; $input_buffer
1322   0B35 D7            push a
1323   0B36 DA            push d
1324   0B37 26 02 00      mov b, $2
1325   0B3A E7            pop d
1326   0B3B 5A            add d, b
1327   0B3C E4            pop a
1328   0B3D 32            mov bl, [d]
1329   0B3E A7 00         mov bh, 0
1330   0B40 D7            push a
1331   0B41 11            mov a, b
1332   0B42 26 C0 00      mov b, $c0
1333   0B45 86            and a, b ; &
1334   0B46 27            mov b, a
1335   0B47 E4            pop a
1336   0B48             ; START SHIFT
1337   0B48 D7            push a
1338   0B49 11            mov a, b
1339   0B4A 26 06 00      mov b, $6
1340   0B4D FD 39         mov c, b
1341   0B4F A5            ashr a, cl
1342   0B50 27            mov b, a
1343   0B51 E4            pop a
1344   0B52             ; END SHIFT
1345   0B52 56            add b, a
1346   0B53 E4            pop a
1347   0B54             ; END TERMS
1348   0B54 E7            pop d
1349   0B55 FD 3E         mov [d], bl
1350   0B57             ;; for (k = 0; k < i + 1; k++) { 
1351   0B57             _for16_init:
1352   0B57 FA FB FF      lea d, [bp + -5] ; $k
1353   0B5A DA            push d
1354   0B5B 26 00 00      mov b, $0
1355   0B5E E7            pop d
1356   0B5F FD 43         mov [d], b
1357   0B61             _for16_cond:
1358   0B61 FA FB FF      lea d, [bp + -5] ; $k
1359   0B64 2A            mov b, [d]
1360   0B65             ; START RELATIONAL
1361   0B65 D7            push a
1362   0B66 11            mov a, b
1363   0B67 FA FF FF      lea d, [bp + -1] ; $i
1364   0B6A 2A            mov b, [d]
1365   0B6B             ; START TERMS
1366   0B6B D7            push a
1367   0B6C 11            mov a, b
1368   0B6D 26 01 00      mov b, $1
1369   0B70 56            add b, a
1370   0B71 E4            pop a
1371   0B72             ; END TERMS
1372   0B72 B0            cmp a, b
1373   0B73 FD 73         slt ; <= (signed)
1374   0B75 E4            pop a
1375   0B76             ; END RELATIONAL
1376   0B76 C0 00 00      cmp b, 0
1377   0B79 C6 C9 0B      je _for16_exit
1378   0B7C             _for16_block:
1379   0B7C             ;; output[j++] = base64_table[output_buffer[k]]; 
1380   0B7C FA 07 00      lea d, [bp + 7] ; $output
1381   0B7F FD 2A         mov d, [d]
1382   0B81 D7            push a
1383   0B82 DA            push d
1384   0B83 FA FD FF      lea d, [bp + -3] ; $j
1385   0B86 2A            mov b, [d]
1386   0B87 D8            push b
1387   0B88 FD 77         inc b
1388   0B8A FA FD FF      lea d, [bp + -3] ; $j
1389   0B8D FD 43         mov [d], b
1390   0B8F E5            pop b
1391   0B90 E7            pop d
1392   0B91 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1393   0B95 E4            pop a
1394   0B96 DA            push d
1395   0B97 3B 45 26      mov d, _base64_table ; $base64_table
1396   0B9A FD 2A         mov d, [d]
1397   0B9C D7            push a
1398   0B9D DA            push d
1399   0B9E FA F2 FF      lea d, [bp + -14] ; $output_buffer
1400   0BA1 D7            push a
1401   0BA2 DA            push d
1402   0BA3 FA FB FF      lea d, [bp + -5] ; $k
1403   0BA6 2A            mov b, [d]
1404   0BA7 E7            pop d
1405   0BA8 5A            add d, b
1406   0BA9 E4            pop a
1407   0BAA 32            mov bl, [d]
1408   0BAB A7 00         mov bh, 0
1409   0BAD E7            pop d
1410   0BAE FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1411   0BB2 E4            pop a
1412   0BB3 32            mov bl, [d]
1413   0BB4 A7 00         mov bh, 0
1414   0BB6 E7            pop d
1415   0BB7 FD 3E         mov [d], bl
1416   0BB9             _for16_update:
1417   0BB9 FA FB FF      lea d, [bp + -5] ; $k
1418   0BBC 2A            mov b, [d]
1419   0BBD D8            push b
1420   0BBE FD 77         inc b
1421   0BC0 FA FB FF      lea d, [bp + -5] ; $k
1422   0BC3 FD 43         mov [d], b
1423   0BC5 E5            pop b
1424   0BC6 0A 61 0B      jmp _for16_cond
1425   0BC9             _for16_exit:
1426   0BC9             ;; while (i++ < 3) { 
1427   0BC9             _while17_cond:
1428   0BC9 FA FF FF      lea d, [bp + -1] ; $i
1429   0BCC 2A            mov b, [d]
1430   0BCD D8            push b
1431   0BCE FD 77         inc b
1432   0BD0 FA FF FF      lea d, [bp + -1] ; $i
1433   0BD3 FD 43         mov [d], b
1434   0BD5 E5            pop b
1435   0BD6             ; START RELATIONAL
1436   0BD6 D7            push a
1437   0BD7 11            mov a, b
1438   0BD8 26 03 00      mov b, $3
1439   0BDB B0            cmp a, b
1440   0BDC FD 73         slt ; <= (signed)
1441   0BDE E4            pop a
1442   0BDF             ; END RELATIONAL
1443   0BDF C0 00 00      cmp b, 0
1444   0BE2 C6 09 0C      je _while17_exit
1445   0BE5             _while17_block:
1446   0BE5             ;; output[j++] = '='; 
1447   0BE5 FA 07 00      lea d, [bp + 7] ; $output
1448   0BE8 FD 2A         mov d, [d]
1449   0BEA D7            push a
1450   0BEB DA            push d
1451   0BEC FA FD FF      lea d, [bp + -3] ; $j
1452   0BEF 2A            mov b, [d]
1453   0BF0 D8            push b
1454   0BF1 FD 77         inc b
1455   0BF3 FA FD FF      lea d, [bp + -3] ; $j
1456   0BF6 FD 43         mov [d], b
1457   0BF8 E5            pop b
1458   0BF9 E7            pop d
1459   0BFA FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1460   0BFE E4            pop a
1461   0BFF DA            push d
1462   0C00 26 3D 00      mov b, $3d
1463   0C03 E7            pop d
1464   0C04 FD 3E         mov [d], bl
1465   0C06 0A C9 0B      jmp _while17_cond
1466   0C09             _while17_exit:
1467   0C09 0A 0C 0C      jmp _if14_exit
1468   0C0C             _if14_exit:
1469   0C0C             ;; output[j] = '\0'; 
1470   0C0C FA 07 00      lea d, [bp + 7] ; $output
1471   0C0F FD 2A         mov d, [d]
1472   0C11 D7            push a
1473   0C12 DA            push d
1474   0C13 FA FD FF      lea d, [bp + -3] ; $j
1475   0C16 2A            mov b, [d]
1476   0C17 E7            pop d
1477   0C18 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1478   0C1C E4            pop a
1479   0C1D DA            push d
1480   0C1E 26 00 00      mov b, $0
1481   0C21 E7            pop d
1482   0C22 FD 3E         mov [d], bl
1483   0C24 F9            leave
1484   0C25 09            ret
1485   0C26             
1486   0C26             base64_char_value:
1487   0C26 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1488   0C29             ;; if (c >= 'A' && c <= 'Z') return c - 'A'; 
1489   0C29             _if18_cond:
1490   0C29 FA 05 00      lea d, [bp + 5] ; $c
1491   0C2C 32            mov bl, [d]
1492   0C2D A7 00         mov bh, 0
1493   0C2F             ; START RELATIONAL
1494   0C2F D7            push a
1495   0C30 11            mov a, b
1496   0C31 26 41 00      mov b, $41
1497   0C34 B0            cmp a, b
1498   0C35 FD 80         sge ; >=
1499   0C37 E4            pop a
1500   0C38             ; END RELATIONAL
1501   0C38 D7            push a
1502   0C39 11            mov a, b
1503   0C3A FA 05 00      lea d, [bp + 5] ; $c
1504   0C3D 32            mov bl, [d]
1505   0C3E A7 00         mov bh, 0
1506   0C40             ; START RELATIONAL
1507   0C40 D7            push a
1508   0C41 11            mov a, b
1509   0C42 26 5A 00      mov b, $5a
1510   0C45 B0            cmp a, b
1511   0C46 FD 74         sle ; <=
1512   0C48 E4            pop a
1513   0C49             ; END RELATIONAL
1514   0C49 FD A7         sand a, b ; &&
1515   0C4B E4            pop a
1516   0C4C C0 00 00      cmp b, 0
1517   0C4F C6 65 0C      je _if18_exit
1518   0C52             _if18_true:
1519   0C52             ;; return c - 'A'; 
1520   0C52 FA 05 00      lea d, [bp + 5] ; $c
1521   0C55 32            mov bl, [d]
1522   0C56 A7 00         mov bh, 0
1523   0C58             ; START TERMS
1524   0C58 D7            push a
1525   0C59 11            mov a, b
1526   0C5A 26 41 00      mov b, $41
1527   0C5D 60            sub a, b
1528   0C5E 27            mov b, a
1529   0C5F E4            pop a
1530   0C60             ; END TERMS
1531   0C60 F9            leave
1532   0C61 09            ret
1533   0C62 0A 65 0C      jmp _if18_exit
1534   0C65             _if18_exit:
1535   0C65             ;; if (c >= 'a' && c <= 'z') return c - 'a' + 26; 
1536   0C65             _if19_cond:
1537   0C65 FA 05 00      lea d, [bp + 5] ; $c
1538   0C68 32            mov bl, [d]
1539   0C69 A7 00         mov bh, 0
1540   0C6B             ; START RELATIONAL
1541   0C6B D7            push a
1542   0C6C 11            mov a, b
1543   0C6D 26 61 00      mov b, $61
1544   0C70 B0            cmp a, b
1545   0C71 FD 80         sge ; >=
1546   0C73 E4            pop a
1547   0C74             ; END RELATIONAL
1548   0C74 D7            push a
1549   0C75 11            mov a, b
1550   0C76 FA 05 00      lea d, [bp + 5] ; $c
1551   0C79 32            mov bl, [d]
1552   0C7A A7 00         mov bh, 0
1553   0C7C             ; START RELATIONAL
1554   0C7C D7            push a
1555   0C7D 11            mov a, b
1556   0C7E 26 7A 00      mov b, $7a
1557   0C81 B0            cmp a, b
1558   0C82 FD 74         sle ; <=
1559   0C84 E4            pop a
1560   0C85             ; END RELATIONAL
1561   0C85 FD A7         sand a, b ; &&
1562   0C87 E4            pop a
1563   0C88 C0 00 00      cmp b, 0
1564   0C8B C6 A6 0C      je _if19_exit
1565   0C8E             _if19_true:
1566   0C8E             ;; return c - 'a' + 26; 
1567   0C8E FA 05 00      lea d, [bp + 5] ; $c
1568   0C91 32            mov bl, [d]
1569   0C92 A7 00         mov bh, 0
1570   0C94             ; START TERMS
1571   0C94 D7            push a
1572   0C95 11            mov a, b
1573   0C96 26 61 00      mov b, $61
1574   0C99 60            sub a, b
1575   0C9A 27            mov b, a
1576   0C9B 11            mov a, b
1577   0C9C 26 1A 00      mov b, $1a
1578   0C9F 56            add b, a
1579   0CA0 E4            pop a
1580   0CA1             ; END TERMS
1581   0CA1 F9            leave
1582   0CA2 09            ret
1583   0CA3 0A A6 0C      jmp _if19_exit
1584   0CA6             _if19_exit:
1585   0CA6             ;; if (c >= '0' && c <= '9') return c - '0' + 52; 
1586   0CA6             _if20_cond:
1587   0CA6 FA 05 00      lea d, [bp + 5] ; $c
1588   0CA9 32            mov bl, [d]
1589   0CAA A7 00         mov bh, 0
1590   0CAC             ; START RELATIONAL
1591   0CAC D7            push a
1592   0CAD 11            mov a, b
1593   0CAE 26 30 00      mov b, $30
1594   0CB1 B0            cmp a, b
1595   0CB2 FD 80         sge ; >=
1596   0CB4 E4            pop a
1597   0CB5             ; END RELATIONAL
1598   0CB5 D7            push a
1599   0CB6 11            mov a, b
1600   0CB7 FA 05 00      lea d, [bp + 5] ; $c
1601   0CBA 32            mov bl, [d]
1602   0CBB A7 00         mov bh, 0
1603   0CBD             ; START RELATIONAL
1604   0CBD D7            push a
1605   0CBE 11            mov a, b
1606   0CBF 26 39 00      mov b, $39
1607   0CC2 B0            cmp a, b
1608   0CC3 FD 74         sle ; <=
1609   0CC5 E4            pop a
1610   0CC6             ; END RELATIONAL
1611   0CC6 FD A7         sand a, b ; &&
1612   0CC8 E4            pop a
1613   0CC9 C0 00 00      cmp b, 0
1614   0CCC C6 E7 0C      je _if20_exit
1615   0CCF             _if20_true:
1616   0CCF             ;; return c - '0' + 52; 
1617   0CCF FA 05 00      lea d, [bp + 5] ; $c
1618   0CD2 32            mov bl, [d]
1619   0CD3 A7 00         mov bh, 0
1620   0CD5             ; START TERMS
1621   0CD5 D7            push a
1622   0CD6 11            mov a, b
1623   0CD7 26 30 00      mov b, $30
1624   0CDA 60            sub a, b
1625   0CDB 27            mov b, a
1626   0CDC 11            mov a, b
1627   0CDD 26 34 00      mov b, $34
1628   0CE0 56            add b, a
1629   0CE1 E4            pop a
1630   0CE2             ; END TERMS
1631   0CE2 F9            leave
1632   0CE3 09            ret
1633   0CE4 0A E7 0C      jmp _if20_exit
1634   0CE7             _if20_exit:
1635   0CE7             ;; if (c == '+') return 62; 
1636   0CE7             _if21_cond:
1637   0CE7 FA 05 00      lea d, [bp + 5] ; $c
1638   0CEA 32            mov bl, [d]
1639   0CEB A7 00         mov bh, 0
1640   0CED             ; START RELATIONAL
1641   0CED D7            push a
1642   0CEE 11            mov a, b
1643   0CEF 26 2B 00      mov b, $2b
1644   0CF2 B0            cmp a, b
1645   0CF3 FD 71         seq ; ==
1646   0CF5 E4            pop a
1647   0CF6             ; END RELATIONAL
1648   0CF6 C0 00 00      cmp b, 0
1649   0CF9 C6 04 0D      je _if21_exit
1650   0CFC             _if21_true:
1651   0CFC             ;; return 62; 
1652   0CFC 26 3E 00      mov b, $3e
1653   0CFF F9            leave
1654   0D00 09            ret
1655   0D01 0A 04 0D      jmp _if21_exit
1656   0D04             _if21_exit:
1657   0D04             ;; if (c == '/') return 63; 
1658   0D04             _if22_cond:
1659   0D04 FA 05 00      lea d, [bp + 5] ; $c
1660   0D07 32            mov bl, [d]
1661   0D08 A7 00         mov bh, 0
1662   0D0A             ; START RELATIONAL
1663   0D0A D7            push a
1664   0D0B 11            mov a, b
1665   0D0C 26 2F 00      mov b, $2f
1666   0D0F B0            cmp a, b
1667   0D10 FD 71         seq ; ==
1668   0D12 E4            pop a
1669   0D13             ; END RELATIONAL
1670   0D13 C0 00 00      cmp b, 0
1671   0D16 C6 21 0D      je _if22_exit
1672   0D19             _if22_true:
1673   0D19             ;; return 63; 
1674   0D19 26 3F 00      mov b, $3f
1675   0D1C F9            leave
1676   0D1D 09            ret
1677   0D1E 0A 21 0D      jmp _if22_exit
1678   0D21             _if22_exit:
1679   0D21             ;; return -1; 
1680   0D21 26 FF FF      mov b, $ffff
1681   0D24 F9            leave
1682   0D25 09            ret
1683   0D26             
1684   0D26             base64_decode:
1685   0D26 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1686   0D29             ; $i 
1687   0D29 10 00 00      mov a, $0
1688   0D2C 45 FF FF      mov [bp + -1], a
1689   0D2F             ; $j 
1690   0D2F 10 00 00      mov a, $0
1691   0D32 45 FD FF      mov [bp + -3], a
1692   0D35             ; $k 
1693   0D35 10 00 00      mov a, $0
1694   0D38 45 FB FF      mov [bp + -5], a
1695   0D3B             ; $input_len 
1696   0D3B             ; $input_buffer 
1697   0D3B             ; $output_buffer 
1698   0D3B 52 0F 00      sub sp, 15
1699   0D3E             ;; input_len = strlen(input); 
1700   0D3E FA F9 FF      lea d, [bp + -7] ; $input_len
1701   0D41 DA            push d
1702   0D42 FA 05 00      lea d, [bp + 5] ; $input
1703   0D45 2A            mov b, [d]
1704   0D46 FD AB         swp b
1705   0D48 D8            push b
1706   0D49 07 85 06      call strlen
1707   0D4C 51 02 00      add sp, 2
1708   0D4F E7            pop d
1709   0D50 FD 43         mov [d], b
1710   0D52             ;; while (input_len-- && (input[k] != '=') && base64_char_value(input[k]) != -1) { 
1711   0D52             _while23_cond:
1712   0D52 FA F9 FF      lea d, [bp + -7] ; $input_len
1713   0D55 2A            mov b, [d]
1714   0D56 D8            push b
1715   0D57 FD 7D         dec b
1716   0D59 FA F9 FF      lea d, [bp + -7] ; $input_len
1717   0D5C FD 43         mov [d], b
1718   0D5E E5            pop b
1719   0D5F D7            push a
1720   0D60 11            mov a, b
1721   0D61 FA 05 00      lea d, [bp + 5] ; $input
1722   0D64 FD 2A         mov d, [d]
1723   0D66 D7            push a
1724   0D67 DA            push d
1725   0D68 FA FB FF      lea d, [bp + -5] ; $k
1726   0D6B 2A            mov b, [d]
1727   0D6C E7            pop d
1728   0D6D FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1729   0D71 E4            pop a
1730   0D72 32            mov bl, [d]
1731   0D73 A7 00         mov bh, 0
1732   0D75             ; START RELATIONAL
1733   0D75 D7            push a
1734   0D76 11            mov a, b
1735   0D77 26 3D 00      mov b, $3d
1736   0D7A B0            cmp a, b
1737   0D7B FD 72         sneq ; !=
1738   0D7D E4            pop a
1739   0D7E             ; END RELATIONAL
1740   0D7E FD A7         sand a, b ; &&
1741   0D80 11            mov a, b
1742   0D81 FA 05 00      lea d, [bp + 5] ; $input
1743   0D84 FD 2A         mov d, [d]
1744   0D86 D7            push a
1745   0D87 DA            push d
1746   0D88 FA FB FF      lea d, [bp + -5] ; $k
1747   0D8B 2A            mov b, [d]
1748   0D8C E7            pop d
1749   0D8D FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1750   0D91 E4            pop a
1751   0D92 32            mov bl, [d]
1752   0D93 A7 00         mov bh, 0
1753   0D95 DD            push bl
1754   0D96 07 26 0C      call base64_char_value
1755   0D99 51 01 00      add sp, 1
1756   0D9C             ; START RELATIONAL
1757   0D9C D7            push a
1758   0D9D 11            mov a, b
1759   0D9E 26 FF FF      mov b, $ffff
1760   0DA1 B0            cmp a, b
1761   0DA2 FD 72         sneq ; !=
1762   0DA4 E4            pop a
1763   0DA5             ; END RELATIONAL
1764   0DA5 FD A7         sand a, b ; &&
1765   0DA7 E4            pop a
1766   0DA8 C0 00 00      cmp b, 0
1767   0DAB C6 93 0F      je _while23_exit
1768   0DAE             _while23_block:
1769   0DAE             ;; input_buffer[i++] = input[k++]; 
1770   0DAE FA F5 FF      lea d, [bp + -11] ; $input_buffer
1771   0DB1 D7            push a
1772   0DB2 DA            push d
1773   0DB3 FA FF FF      lea d, [bp + -1] ; $i
1774   0DB6 2A            mov b, [d]
1775   0DB7 D8            push b
1776   0DB8 FD 77         inc b
1777   0DBA FA FF FF      lea d, [bp + -1] ; $i
1778   0DBD FD 43         mov [d], b
1779   0DBF E5            pop b
1780   0DC0 E7            pop d
1781   0DC1 5A            add d, b
1782   0DC2 E4            pop a
1783   0DC3 DA            push d
1784   0DC4 FA 05 00      lea d, [bp + 5] ; $input
1785   0DC7 FD 2A         mov d, [d]
1786   0DC9 D7            push a
1787   0DCA DA            push d
1788   0DCB FA FB FF      lea d, [bp + -5] ; $k
1789   0DCE 2A            mov b, [d]
1790   0DCF D8            push b
1791   0DD0 FD 77         inc b
1792   0DD2 FA FB FF      lea d, [bp + -5] ; $k
1793   0DD5 FD 43         mov [d], b
1794   0DD7 E5            pop b
1795   0DD8 E7            pop d
1796   0DD9 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1797   0DDD E4            pop a
1798   0DDE 32            mov bl, [d]
1799   0DDF A7 00         mov bh, 0
1800   0DE1 E7            pop d
1801   0DE2 FD 3E         mov [d], bl
1802   0DE4             ;; if (i == 4) { 
1803   0DE4             _if24_cond:
1804   0DE4 FA FF FF      lea d, [bp + -1] ; $i
1805   0DE7 2A            mov b, [d]
1806   0DE8             ; START RELATIONAL
1807   0DE8 D7            push a
1808   0DE9 11            mov a, b
1809   0DEA 26 04 00      mov b, $4
1810   0DED B0            cmp a, b
1811   0DEE FD 71         seq ; ==
1812   0DF0 E4            pop a
1813   0DF1             ; END RELATIONAL
1814   0DF1 C0 00 00      cmp b, 0
1815   0DF4 C6 90 0F      je _if24_exit
1816   0DF7             _if24_true:
1817   0DF7             ;; for (i = 0; i < 4; i++) { 
1818   0DF7             _for25_init:
1819   0DF7 FA FF FF      lea d, [bp + -1] ; $i
1820   0DFA DA            push d
1821   0DFB 26 00 00      mov b, $0
1822   0DFE E7            pop d
1823   0DFF FD 43         mov [d], b
1824   0E01             _for25_cond:
1825   0E01 FA FF FF      lea d, [bp + -1] ; $i
1826   0E04 2A            mov b, [d]
1827   0E05             ; START RELATIONAL
1828   0E05 D7            push a
1829   0E06 11            mov a, b
1830   0E07 26 04 00      mov b, $4
1831   0E0A B0            cmp a, b
1832   0E0B FD 73         slt ; <= (signed)
1833   0E0D E4            pop a
1834   0E0E             ; END RELATIONAL
1835   0E0E C0 00 00      cmp b, 0
1836   0E11 C6 4A 0E      je _for25_exit
1837   0E14             _for25_block:
1838   0E14             ;; input_buffer[i] = base64_char_value(input_buffer[i]); 
1839   0E14 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1840   0E17 D7            push a
1841   0E18 DA            push d
1842   0E19 FA FF FF      lea d, [bp + -1] ; $i
1843   0E1C 2A            mov b, [d]
1844   0E1D E7            pop d
1845   0E1E 5A            add d, b
1846   0E1F E4            pop a
1847   0E20 DA            push d
1848   0E21 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1849   0E24 D7            push a
1850   0E25 DA            push d
1851   0E26 FA FF FF      lea d, [bp + -1] ; $i
1852   0E29 2A            mov b, [d]
1853   0E2A E7            pop d
1854   0E2B 5A            add d, b
1855   0E2C E4            pop a
1856   0E2D 32            mov bl, [d]
1857   0E2E A7 00         mov bh, 0
1858   0E30 DD            push bl
1859   0E31 07 26 0C      call base64_char_value
1860   0E34 51 01 00      add sp, 1
1861   0E37 E7            pop d
1862   0E38 FD 3E         mov [d], bl
1863   0E3A             _for25_update:
1864   0E3A FA FF FF      lea d, [bp + -1] ; $i
1865   0E3D 2A            mov b, [d]
1866   0E3E D8            push b
1867   0E3F FD 77         inc b
1868   0E41 FA FF FF      lea d, [bp + -1] ; $i
1869   0E44 FD 43         mov [d], b
1870   0E46 E5            pop b
1871   0E47 0A 01 0E      jmp _for25_cond
1872   0E4A             _for25_exit:
1873   0E4A             ;; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
1874   0E4A FA F2 FF      lea d, [bp + -14] ; $output_buffer
1875   0E4D D7            push a
1876   0E4E DA            push d
1877   0E4F 26 00 00      mov b, $0
1878   0E52 E7            pop d
1879   0E53 5A            add d, b
1880   0E54 E4            pop a
1881   0E55 DA            push d
1882   0E56 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1883   0E59 D7            push a
1884   0E5A DA            push d
1885   0E5B 26 00 00      mov b, $0
1886   0E5E E7            pop d
1887   0E5F 5A            add d, b
1888   0E60 E4            pop a
1889   0E61 32            mov bl, [d]
1890   0E62 A7 00         mov bh, 0
1891   0E64             ; START SHIFT
1892   0E64 D7            push a
1893   0E65 11            mov a, b
1894   0E66 26 02 00      mov b, $2
1895   0E69 FD 39         mov c, b
1896   0E6B 9D            shl a, cl
1897   0E6C 27            mov b, a
1898   0E6D E4            pop a
1899   0E6E             ; END SHIFT
1900   0E6E             ; START TERMS
1901   0E6E D7            push a
1902   0E6F 11            mov a, b
1903   0E70 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1904   0E73 D7            push a
1905   0E74 DA            push d
1906   0E75 26 01 00      mov b, $1
1907   0E78 E7            pop d
1908   0E79 5A            add d, b
1909   0E7A E4            pop a
1910   0E7B 32            mov bl, [d]
1911   0E7C A7 00         mov bh, 0
1912   0E7E D7            push a
1913   0E7F 11            mov a, b
1914   0E80 26 30 00      mov b, $30
1915   0E83 86            and a, b ; &
1916   0E84 27            mov b, a
1917   0E85 E4            pop a
1918   0E86             ; START SHIFT
1919   0E86 D7            push a
1920   0E87 11            mov a, b
1921   0E88 26 04 00      mov b, $4
1922   0E8B FD 39         mov c, b
1923   0E8D A5            ashr a, cl
1924   0E8E 27            mov b, a
1925   0E8F E4            pop a
1926   0E90             ; END SHIFT
1927   0E90 56            add b, a
1928   0E91 E4            pop a
1929   0E92             ; END TERMS
1930   0E92 E7            pop d
1931   0E93 FD 3E         mov [d], bl
1932   0E95             ;; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
1933   0E95 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1934   0E98 D7            push a
1935   0E99 DA            push d
1936   0E9A 26 01 00      mov b, $1
1937   0E9D E7            pop d
1938   0E9E 5A            add d, b
1939   0E9F E4            pop a
1940   0EA0 DA            push d
1941   0EA1 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1942   0EA4 D7            push a
1943   0EA5 DA            push d
1944   0EA6 26 01 00      mov b, $1
1945   0EA9 E7            pop d
1946   0EAA 5A            add d, b
1947   0EAB E4            pop a
1948   0EAC 32            mov bl, [d]
1949   0EAD A7 00         mov bh, 0
1950   0EAF D7            push a
1951   0EB0 11            mov a, b
1952   0EB1 26 0F 00      mov b, $f
1953   0EB4 86            and a, b ; &
1954   0EB5 27            mov b, a
1955   0EB6 E4            pop a
1956   0EB7             ; START SHIFT
1957   0EB7 D7            push a
1958   0EB8 11            mov a, b
1959   0EB9 26 04 00      mov b, $4
1960   0EBC FD 39         mov c, b
1961   0EBE 9D            shl a, cl
1962   0EBF 27            mov b, a
1963   0EC0 E4            pop a
1964   0EC1             ; END SHIFT
1965   0EC1             ; START TERMS
1966   0EC1 D7            push a
1967   0EC2 11            mov a, b
1968   0EC3 FA F5 FF      lea d, [bp + -11] ; $input_buffer
1969   0EC6 D7            push a
1970   0EC7 DA            push d
1971   0EC8 26 02 00      mov b, $2
1972   0ECB E7            pop d
1973   0ECC 5A            add d, b
1974   0ECD E4            pop a
1975   0ECE 32            mov bl, [d]
1976   0ECF A7 00         mov bh, 0
1977   0ED1 D7            push a
1978   0ED2 11            mov a, b
1979   0ED3 26 3C 00      mov b, $3c
1980   0ED6 86            and a, b ; &
1981   0ED7 27            mov b, a
1982   0ED8 E4            pop a
1983   0ED9             ; START SHIFT
1984   0ED9 D7            push a
1985   0EDA 11            mov a, b
1986   0EDB 26 02 00      mov b, $2
1987   0EDE FD 39         mov c, b
1988   0EE0 A5            ashr a, cl
1989   0EE1 27            mov b, a
1990   0EE2 E4            pop a
1991   0EE3             ; END SHIFT
1992   0EE3 56            add b, a
1993   0EE4 E4            pop a
1994   0EE5             ; END TERMS
1995   0EE5 E7            pop d
1996   0EE6 FD 3E         mov [d], bl
1997   0EE8             ;; output_buffer[2] = ((input_buffer[2] & 0x03) << 6) + input_buffer[3]; 
1998   0EE8 FA F2 FF      lea d, [bp + -14] ; $output_buffer
1999   0EEB D7            push a
2000   0EEC DA            push d
2001   0EED 26 02 00      mov b, $2
2002   0EF0 E7            pop d
2003   0EF1 5A            add d, b
2004   0EF2 E4            pop a
2005   0EF3 DA            push d
2006   0EF4 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2007   0EF7 D7            push a
2008   0EF8 DA            push d
2009   0EF9 26 02 00      mov b, $2
2010   0EFC E7            pop d
2011   0EFD 5A            add d, b
2012   0EFE E4            pop a
2013   0EFF 32            mov bl, [d]
2014   0F00 A7 00         mov bh, 0
2015   0F02 D7            push a
2016   0F03 11            mov a, b
2017   0F04 26 03 00      mov b, $3
2018   0F07 86            and a, b ; &
2019   0F08 27            mov b, a
2020   0F09 E4            pop a
2021   0F0A             ; START SHIFT
2022   0F0A D7            push a
2023   0F0B 11            mov a, b
2024   0F0C 26 06 00      mov b, $6
2025   0F0F FD 39         mov c, b
2026   0F11 9D            shl a, cl
2027   0F12 27            mov b, a
2028   0F13 E4            pop a
2029   0F14             ; END SHIFT
2030   0F14             ; START TERMS
2031   0F14 D7            push a
2032   0F15 11            mov a, b
2033   0F16 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2034   0F19 D7            push a
2035   0F1A DA            push d
2036   0F1B 26 03 00      mov b, $3
2037   0F1E E7            pop d
2038   0F1F 5A            add d, b
2039   0F20 E4            pop a
2040   0F21 32            mov bl, [d]
2041   0F22 A7 00         mov bh, 0
2042   0F24 56            add b, a
2043   0F25 E4            pop a
2044   0F26             ; END TERMS
2045   0F26 E7            pop d
2046   0F27 FD 3E         mov [d], bl
2047   0F29             ;; for (i = 0; i < 3; i++) { 
2048   0F29             _for26_init:
2049   0F29 FA FF FF      lea d, [bp + -1] ; $i
2050   0F2C DA            push d
2051   0F2D 26 00 00      mov b, $0
2052   0F30 E7            pop d
2053   0F31 FD 43         mov [d], b
2054   0F33             _for26_cond:
2055   0F33 FA FF FF      lea d, [bp + -1] ; $i
2056   0F36 2A            mov b, [d]
2057   0F37             ; START RELATIONAL
2058   0F37 D7            push a
2059   0F38 11            mov a, b
2060   0F39 26 03 00      mov b, $3
2061   0F3C B0            cmp a, b
2062   0F3D FD 73         slt ; <= (signed)
2063   0F3F E4            pop a
2064   0F40             ; END RELATIONAL
2065   0F40 C0 00 00      cmp b, 0
2066   0F43 C6 83 0F      je _for26_exit
2067   0F46             _for26_block:
2068   0F46             ;; output[j++] = output_buffer[i]; 
2069   0F46 FA 07 00      lea d, [bp + 7] ; $output
2070   0F49 FD 2A         mov d, [d]
2071   0F4B D7            push a
2072   0F4C DA            push d
2073   0F4D FA FD FF      lea d, [bp + -3] ; $j
2074   0F50 2A            mov b, [d]
2075   0F51 D8            push b
2076   0F52 FD 77         inc b
2077   0F54 FA FD FF      lea d, [bp + -3] ; $j
2078   0F57 FD 43         mov [d], b
2079   0F59 E5            pop b
2080   0F5A E7            pop d
2081   0F5B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2082   0F5F E4            pop a
2083   0F60 DA            push d
2084   0F61 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2085   0F64 D7            push a
2086   0F65 DA            push d
2087   0F66 FA FF FF      lea d, [bp + -1] ; $i
2088   0F69 2A            mov b, [d]
2089   0F6A E7            pop d
2090   0F6B 5A            add d, b
2091   0F6C E4            pop a
2092   0F6D 32            mov bl, [d]
2093   0F6E A7 00         mov bh, 0
2094   0F70 E7            pop d
2095   0F71 FD 3E         mov [d], bl
2096   0F73             _for26_update:
2097   0F73 FA FF FF      lea d, [bp + -1] ; $i
2098   0F76 2A            mov b, [d]
2099   0F77 D8            push b
2100   0F78 FD 77         inc b
2101   0F7A FA FF FF      lea d, [bp + -1] ; $i
2102   0F7D FD 43         mov [d], b
2103   0F7F E5            pop b
2104   0F80 0A 33 0F      jmp _for26_cond
2105   0F83             _for26_exit:
2106   0F83             ;; i = 0; 
2107   0F83 FA FF FF      lea d, [bp + -1] ; $i
2108   0F86 DA            push d
2109   0F87 26 00 00      mov b, $0
2110   0F8A E7            pop d
2111   0F8B FD 43         mov [d], b
2112   0F8D 0A 90 0F      jmp _if24_exit
2113   0F90             _if24_exit:
2114   0F90 0A 52 0D      jmp _while23_cond
2115   0F93             _while23_exit:
2116   0F93             ;; if (i) { 
2117   0F93             _if27_cond:
2118   0F93 FA FF FF      lea d, [bp + -1] ; $i
2119   0F96 2A            mov b, [d]
2120   0F97 C0 00 00      cmp b, 0
2121   0F9A C6 35 11      je _if27_exit
2122   0F9D             _if27_true:
2123   0F9D             ;; for (k = i; k < 4; k++) { 
2124   0F9D             _for28_init:
2125   0F9D FA FB FF      lea d, [bp + -5] ; $k
2126   0FA0 DA            push d
2127   0FA1 FA FF FF      lea d, [bp + -1] ; $i
2128   0FA4 2A            mov b, [d]
2129   0FA5 E7            pop d
2130   0FA6 FD 43         mov [d], b
2131   0FA8             _for28_cond:
2132   0FA8 FA FB FF      lea d, [bp + -5] ; $k
2133   0FAB 2A            mov b, [d]
2134   0FAC             ; START RELATIONAL
2135   0FAC D7            push a
2136   0FAD 11            mov a, b
2137   0FAE 26 04 00      mov b, $4
2138   0FB1 B0            cmp a, b
2139   0FB2 FD 73         slt ; <= (signed)
2140   0FB4 E4            pop a
2141   0FB5             ; END RELATIONAL
2142   0FB5 C0 00 00      cmp b, 0
2143   0FB8 C6 DE 0F      je _for28_exit
2144   0FBB             _for28_block:
2145   0FBB             ;; input_buffer[k] = 0; 
2146   0FBB FA F5 FF      lea d, [bp + -11] ; $input_buffer
2147   0FBE D7            push a
2148   0FBF DA            push d
2149   0FC0 FA FB FF      lea d, [bp + -5] ; $k
2150   0FC3 2A            mov b, [d]
2151   0FC4 E7            pop d
2152   0FC5 5A            add d, b
2153   0FC6 E4            pop a
2154   0FC7 DA            push d
2155   0FC8 26 00 00      mov b, $0
2156   0FCB E7            pop d
2157   0FCC FD 3E         mov [d], bl
2158   0FCE             _for28_update:
2159   0FCE FA FB FF      lea d, [bp + -5] ; $k
2160   0FD1 2A            mov b, [d]
2161   0FD2 D8            push b
2162   0FD3 FD 77         inc b
2163   0FD5 FA FB FF      lea d, [bp + -5] ; $k
2164   0FD8 FD 43         mov [d], b
2165   0FDA E5            pop b
2166   0FDB 0A A8 0F      jmp _for28_cond
2167   0FDE             _for28_exit:
2168   0FDE             ;; for (k = 0; k < 4; k++) { 
2169   0FDE             _for29_init:
2170   0FDE FA FB FF      lea d, [bp + -5] ; $k
2171   0FE1 DA            push d
2172   0FE2 26 00 00      mov b, $0
2173   0FE5 E7            pop d
2174   0FE6 FD 43         mov [d], b
2175   0FE8             _for29_cond:
2176   0FE8 FA FB FF      lea d, [bp + -5] ; $k
2177   0FEB 2A            mov b, [d]
2178   0FEC             ; START RELATIONAL
2179   0FEC D7            push a
2180   0FED 11            mov a, b
2181   0FEE 26 04 00      mov b, $4
2182   0FF1 B0            cmp a, b
2183   0FF2 FD 73         slt ; <= (signed)
2184   0FF4 E4            pop a
2185   0FF5             ; END RELATIONAL
2186   0FF5 C0 00 00      cmp b, 0
2187   0FF8 C6 31 10      je _for29_exit
2188   0FFB             _for29_block:
2189   0FFB             ;; input_buffer[k] = base64_char_value(input_buffer[k]); 
2190   0FFB FA F5 FF      lea d, [bp + -11] ; $input_buffer
2191   0FFE D7            push a
2192   0FFF DA            push d
2193   1000 FA FB FF      lea d, [bp + -5] ; $k
2194   1003 2A            mov b, [d]
2195   1004 E7            pop d
2196   1005 5A            add d, b
2197   1006 E4            pop a
2198   1007 DA            push d
2199   1008 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2200   100B D7            push a
2201   100C DA            push d
2202   100D FA FB FF      lea d, [bp + -5] ; $k
2203   1010 2A            mov b, [d]
2204   1011 E7            pop d
2205   1012 5A            add d, b
2206   1013 E4            pop a
2207   1014 32            mov bl, [d]
2208   1015 A7 00         mov bh, 0
2209   1017 DD            push bl
2210   1018 07 26 0C      call base64_char_value
2211   101B 51 01 00      add sp, 1
2212   101E E7            pop d
2213   101F FD 3E         mov [d], bl
2214   1021             _for29_update:
2215   1021 FA FB FF      lea d, [bp + -5] ; $k
2216   1024 2A            mov b, [d]
2217   1025 D8            push b
2218   1026 FD 77         inc b
2219   1028 FA FB FF      lea d, [bp + -5] ; $k
2220   102B FD 43         mov [d], b
2221   102D E5            pop b
2222   102E 0A E8 0F      jmp _for29_cond
2223   1031             _for29_exit:
2224   1031             ;; output_buffer[0] = (input_buffer[0] << 2) + ((input_buffer[1] & 0x30) >> 4); 
2225   1031 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2226   1034 D7            push a
2227   1035 DA            push d
2228   1036 26 00 00      mov b, $0
2229   1039 E7            pop d
2230   103A 5A            add d, b
2231   103B E4            pop a
2232   103C DA            push d
2233   103D FA F5 FF      lea d, [bp + -11] ; $input_buffer
2234   1040 D7            push a
2235   1041 DA            push d
2236   1042 26 00 00      mov b, $0
2237   1045 E7            pop d
2238   1046 5A            add d, b
2239   1047 E4            pop a
2240   1048 32            mov bl, [d]
2241   1049 A7 00         mov bh, 0
2242   104B             ; START SHIFT
2243   104B D7            push a
2244   104C 11            mov a, b
2245   104D 26 02 00      mov b, $2
2246   1050 FD 39         mov c, b
2247   1052 9D            shl a, cl
2248   1053 27            mov b, a
2249   1054 E4            pop a
2250   1055             ; END SHIFT
2251   1055             ; START TERMS
2252   1055 D7            push a
2253   1056 11            mov a, b
2254   1057 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2255   105A D7            push a
2256   105B DA            push d
2257   105C 26 01 00      mov b, $1
2258   105F E7            pop d
2259   1060 5A            add d, b
2260   1061 E4            pop a
2261   1062 32            mov bl, [d]
2262   1063 A7 00         mov bh, 0
2263   1065 D7            push a
2264   1066 11            mov a, b
2265   1067 26 30 00      mov b, $30
2266   106A 86            and a, b ; &
2267   106B 27            mov b, a
2268   106C E4            pop a
2269   106D             ; START SHIFT
2270   106D D7            push a
2271   106E 11            mov a, b
2272   106F 26 04 00      mov b, $4
2273   1072 FD 39         mov c, b
2274   1074 A5            ashr a, cl
2275   1075 27            mov b, a
2276   1076 E4            pop a
2277   1077             ; END SHIFT
2278   1077 56            add b, a
2279   1078 E4            pop a
2280   1079             ; END TERMS
2281   1079 E7            pop d
2282   107A FD 3E         mov [d], bl
2283   107C             ;; output_buffer[1] = ((input_buffer[1] & 0x0F) << 4) + ((input_buffer[2] & 0x3C) >> 2); 
2284   107C FA F2 FF      lea d, [bp + -14] ; $output_buffer
2285   107F D7            push a
2286   1080 DA            push d
2287   1081 26 01 00      mov b, $1
2288   1084 E7            pop d
2289   1085 5A            add d, b
2290   1086 E4            pop a
2291   1087 DA            push d
2292   1088 FA F5 FF      lea d, [bp + -11] ; $input_buffer
2293   108B D7            push a
2294   108C DA            push d
2295   108D 26 01 00      mov b, $1
2296   1090 E7            pop d
2297   1091 5A            add d, b
2298   1092 E4            pop a
2299   1093 32            mov bl, [d]
2300   1094 A7 00         mov bh, 0
2301   1096 D7            push a
2302   1097 11            mov a, b
2303   1098 26 0F 00      mov b, $f
2304   109B 86            and a, b ; &
2305   109C 27            mov b, a
2306   109D E4            pop a
2307   109E             ; START SHIFT
2308   109E D7            push a
2309   109F 11            mov a, b
2310   10A0 26 04 00      mov b, $4
2311   10A3 FD 39         mov c, b
2312   10A5 9D            shl a, cl
2313   10A6 27            mov b, a
2314   10A7 E4            pop a
2315   10A8             ; END SHIFT
2316   10A8             ; START TERMS
2317   10A8 D7            push a
2318   10A9 11            mov a, b
2319   10AA FA F5 FF      lea d, [bp + -11] ; $input_buffer
2320   10AD D7            push a
2321   10AE DA            push d
2322   10AF 26 02 00      mov b, $2
2323   10B2 E7            pop d
2324   10B3 5A            add d, b
2325   10B4 E4            pop a
2326   10B5 32            mov bl, [d]
2327   10B6 A7 00         mov bh, 0
2328   10B8 D7            push a
2329   10B9 11            mov a, b
2330   10BA 26 3C 00      mov b, $3c
2331   10BD 86            and a, b ; &
2332   10BE 27            mov b, a
2333   10BF E4            pop a
2334   10C0             ; START SHIFT
2335   10C0 D7            push a
2336   10C1 11            mov a, b
2337   10C2 26 02 00      mov b, $2
2338   10C5 FD 39         mov c, b
2339   10C7 A5            ashr a, cl
2340   10C8 27            mov b, a
2341   10C9 E4            pop a
2342   10CA             ; END SHIFT
2343   10CA 56            add b, a
2344   10CB E4            pop a
2345   10CC             ; END TERMS
2346   10CC E7            pop d
2347   10CD FD 3E         mov [d], bl
2348   10CF             ;; for (k = 0; k < i - 1; k++) { 
2349   10CF             _for30_init:
2350   10CF FA FB FF      lea d, [bp + -5] ; $k
2351   10D2 DA            push d
2352   10D3 26 00 00      mov b, $0
2353   10D6 E7            pop d
2354   10D7 FD 43         mov [d], b
2355   10D9             _for30_cond:
2356   10D9 FA FB FF      lea d, [bp + -5] ; $k
2357   10DC 2A            mov b, [d]
2358   10DD             ; START RELATIONAL
2359   10DD D7            push a
2360   10DE 11            mov a, b
2361   10DF FA FF FF      lea d, [bp + -1] ; $i
2362   10E2 2A            mov b, [d]
2363   10E3             ; START TERMS
2364   10E3 D7            push a
2365   10E4 11            mov a, b
2366   10E5 26 01 00      mov b, $1
2367   10E8 60            sub a, b
2368   10E9 27            mov b, a
2369   10EA E4            pop a
2370   10EB             ; END TERMS
2371   10EB B0            cmp a, b
2372   10EC FD 73         slt ; <= (signed)
2373   10EE E4            pop a
2374   10EF             ; END RELATIONAL
2375   10EF C0 00 00      cmp b, 0
2376   10F2 C6 32 11      je _for30_exit
2377   10F5             _for30_block:
2378   10F5             ;; output[j++] = output_buffer[k]; 
2379   10F5 FA 07 00      lea d, [bp + 7] ; $output
2380   10F8 FD 2A         mov d, [d]
2381   10FA D7            push a
2382   10FB DA            push d
2383   10FC FA FD FF      lea d, [bp + -3] ; $j
2384   10FF 2A            mov b, [d]
2385   1100 D8            push b
2386   1101 FD 77         inc b
2387   1103 FA FD FF      lea d, [bp + -3] ; $j
2388   1106 FD 43         mov [d], b
2389   1108 E5            pop b
2390   1109 E7            pop d
2391   110A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2392   110E E4            pop a
2393   110F DA            push d
2394   1110 FA F2 FF      lea d, [bp + -14] ; $output_buffer
2395   1113 D7            push a
2396   1114 DA            push d
2397   1115 FA FB FF      lea d, [bp + -5] ; $k
2398   1118 2A            mov b, [d]
2399   1119 E7            pop d
2400   111A 5A            add d, b
2401   111B E4            pop a
2402   111C 32            mov bl, [d]
2403   111D A7 00         mov bh, 0
2404   111F E7            pop d
2405   1120 FD 3E         mov [d], bl
2406   1122             _for30_update:
2407   1122 FA FB FF      lea d, [bp + -5] ; $k
2408   1125 2A            mov b, [d]
2409   1126 D8            push b
2410   1127 FD 77         inc b
2411   1129 FA FB FF      lea d, [bp + -5] ; $k
2412   112C FD 43         mov [d], b
2413   112E E5            pop b
2414   112F 0A D9 10      jmp _for30_cond
2415   1132             _for30_exit:
2416   1132 0A 35 11      jmp _if27_exit
2417   1135             _if27_exit:
2418   1135             ;; output[j] = '\0'; 
2419   1135 FA 07 00      lea d, [bp + 7] ; $output
2420   1138 FD 2A         mov d, [d]
2421   113A D7            push a
2422   113B DA            push d
2423   113C FA FD FF      lea d, [bp + -3] ; $j
2424   113F 2A            mov b, [d]
2425   1140 E7            pop d
2426   1141 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2427   1145 E4            pop a
2428   1146 DA            push d
2429   1147 26 00 00      mov b, $0
2430   114A E7            pop d
2431   114B FD 3E         mov [d], bl
2432   114D F9            leave
2433   114E 09            ret
2434   114F             
2435   114F             va_start:
2436   114F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2437   1152             ;; argp->current_arg = first_fixed_param + sizeof(first_fixed_param); 
2438   1152 FA 05 00      lea d, [bp + 5] ; $argp
2439   1155 FD 2A         mov d, [d]
2440   1157 58 00 00      add d, 0
2441   115A DA            push d
2442   115B FA 07 00      lea d, [bp + 7] ; $first_fixed_param
2443   115E 2A            mov b, [d]
2444   115F             ; START TERMS
2445   115F D7            push a
2446   1160 11            mov a, b
2447   1161 26 02 00      mov b, 2
2448   1164 56            add b, a
2449   1165 E4            pop a
2450   1166             ; END TERMS
2451   1166 E7            pop d
2452   1167 FD 43         mov [d], b
2453   1169 F9            leave
2454   116A 09            ret
2455   116B             
2456   116B             va_arg:
2457   116B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2458   116E             ; $p 
2459   116E 52 02 00      sub sp, 2
2460   1171             ;; p = argp->current_arg; 
2461   1171 FA FF FF      lea d, [bp + -1] ; $p
2462   1174 DA            push d
2463   1175 FA 05 00      lea d, [bp + 5] ; $argp
2464   1178 FD 2A         mov d, [d]
2465   117A 58 00 00      add d, 0
2466   117D 2A            mov b, [d]
2467   117E E7            pop d
2468   117F FD 43         mov [d], b
2469   1181             ;; argp->current_arg = argp->current_arg + size; 
2470   1181 FA 05 00      lea d, [bp + 5] ; $argp
2471   1184 FD 2A         mov d, [d]
2472   1186 58 00 00      add d, 0
2473   1189 DA            push d
2474   118A FA 05 00      lea d, [bp + 5] ; $argp
2475   118D FD 2A         mov d, [d]
2476   118F 58 00 00      add d, 0
2477   1192 2A            mov b, [d]
2478   1193             ; START TERMS
2479   1193 D7            push a
2480   1194 11            mov a, b
2481   1195 FA 07 00      lea d, [bp + 7] ; $size
2482   1198 2A            mov b, [d]
2483   1199 56            add b, a
2484   119A E4            pop a
2485   119B             ; END TERMS
2486   119B E7            pop d
2487   119C FD 43         mov [d], b
2488   119E             ;; return p; 
2489   119E FA FF FF      lea d, [bp + -1] ; $p
2490   11A1 2A            mov b, [d]
2491   11A2 F9            leave
2492   11A3 09            ret
2493   11A4             
2494   11A4             va_end:
2495   11A4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2496   11A7             ;; argp->current_arg =   0   ; 
2497   11A7 FA 05 00      lea d, [bp + 5] ; $argp
2498   11AA FD 2A         mov d, [d]
2499   11AC 58 00 00      add d, 0
2500   11AF DA            push d
2501   11B0 26 00 00      mov b, $0
2502   11B3 E7            pop d
2503   11B4 FD 43         mov [d], b
2504   11B6 F9            leave
2505   11B7 09            ret
2506   11B8             
2507   11B8             printf:
2508   11B8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2509   11BB             ; $p 
2510   11BB             ; $fp 
2511   11BB             ; $i 
2512   11BB 52 06 00      sub sp, 6
2513   11BE             ;; fp = format; 
2514   11BE FA FD FF      lea d, [bp + -3] ; $fp
2515   11C1 DA            push d
2516   11C2 FA 05 00      lea d, [bp + 5] ; $format
2517   11C5 2A            mov b, [d]
2518   11C6 E7            pop d
2519   11C7 FD 43         mov [d], b
2520   11C9             ;; p = &format + 2; 
2521   11C9 FA FF FF      lea d, [bp + -1] ; $p
2522   11CC DA            push d
2523   11CD FA 05 00      lea d, [bp + 5] ; $format
2524   11D0 2D            mov b, d
2525   11D1             ; START TERMS
2526   11D1 D7            push a
2527   11D2 11            mov a, b
2528   11D3 26 02 00      mov b, $2
2529   11D6 56            add b, a
2530   11D7 E4            pop a
2531   11D8             ; END TERMS
2532   11D8 E7            pop d
2533   11D9 FD 43         mov [d], b
2534   11DB             ;; for(;;){ 
2535   11DB             _for31_init:
2536   11DB             _for31_cond:
2537   11DB             _for31_block:
2538   11DB             ;; if(!*fp) break; 
2539   11DB             _if32_cond:
2540   11DB FA FD FF      lea d, [bp + -3] ; $fp
2541   11DE 2A            mov b, [d]
2542   11DF 74            mov d, b
2543   11E0 32            mov bl, [d]
2544   11E1 A7 00         mov bh, 0
2545   11E3 C0 00 00      cmp b, 0
2546   11E6 FD 71         seq ; !
2547   11E8 C0 00 00      cmp b, 0
2548   11EB C6 F4 11      je _if32_else
2549   11EE             _if32_true:
2550   11EE             ;; break; 
2551   11EE 0A FD 13      jmp _for31_exit ; for break
2552   11F1 0A FA 13      jmp _if32_exit
2553   11F4             _if32_else:
2554   11F4             ;; if(*fp == '%'){ 
2555   11F4             _if33_cond:
2556   11F4 FA FD FF      lea d, [bp + -3] ; $fp
2557   11F7 2A            mov b, [d]
2558   11F8 74            mov d, b
2559   11F9 32            mov bl, [d]
2560   11FA A7 00         mov bh, 0
2561   11FC             ; START RELATIONAL
2562   11FC D7            push a
2563   11FD 11            mov a, b
2564   11FE 26 25 00      mov b, $25
2565   1201 B0            cmp a, b
2566   1202 FD 71         seq ; ==
2567   1204 E4            pop a
2568   1205             ; END RELATIONAL
2569   1205 C0 00 00      cmp b, 0
2570   1208 C6 DE 13      je _if33_else
2571   120B             _if33_true:
2572   120B             ;; fp++; 
2573   120B FA FD FF      lea d, [bp + -3] ; $fp
2574   120E 2A            mov b, [d]
2575   120F D8            push b
2576   1210 FD 77         inc b
2577   1212 FA FD FF      lea d, [bp + -3] ; $fp
2578   1215 FD 43         mov [d], b
2579   1217 E5            pop b
2580   1218             ;; switch(*fp){ 
2581   1218             _switch34_expr:
2582   1218 FA FD FF      lea d, [bp + -3] ; $fp
2583   121B 2A            mov b, [d]
2584   121C 74            mov d, b
2585   121D 32            mov bl, [d]
2586   121E A7 00         mov bh, 0
2587   1220             _switch34_comparisons:
2588   1220 C1 6C         cmp bl, $6c
2589   1222 C6 4E 12      je _switch34_case0
2590   1225 C1 4C         cmp bl, $4c
2591   1227 C6 4E 12      je _switch34_case1
2592   122A C1 64         cmp bl, $64
2593   122C C6 1E 13      je _switch34_case2
2594   122F C1 69         cmp bl, $69
2595   1231 C6 1E 13      je _switch34_case3
2596   1234 C1 75         cmp bl, $75
2597   1236 C6 42 13      je _switch34_case4
2598   1239 C1 78         cmp bl, $78
2599   123B C6 66 13      je _switch34_case5
2600   123E C1 63         cmp bl, $63
2601   1240 C6 84 13      je _switch34_case6
2602   1243 C1 73         cmp bl, $73
2603   1245 C6 A3 13      je _switch34_case7
2604   1248 0A C2 13      jmp _switch34_default
2605   124B 0A CE 13      jmp _switch34_exit
2606   124E             _switch34_case0:
2607   124E             _switch34_case1:
2608   124E             ;; fp++; 
2609   124E FA FD FF      lea d, [bp + -3] ; $fp
2610   1251 2A            mov b, [d]
2611   1252 D8            push b
2612   1253 FD 77         inc b
2613   1255 FA FD FF      lea d, [bp + -3] ; $fp
2614   1258 FD 43         mov [d], b
2615   125A E5            pop b
2616   125B             ;; if(*fp == 'd' || *fp == 'i') 
2617   125B             _if35_cond:
2618   125B FA FD FF      lea d, [bp + -3] ; $fp
2619   125E 2A            mov b, [d]
2620   125F 74            mov d, b
2621   1260 32            mov bl, [d]
2622   1261 A7 00         mov bh, 0
2623   1263             ; START RELATIONAL
2624   1263 D7            push a
2625   1264 11            mov a, b
2626   1265 26 64 00      mov b, $64
2627   1268 B0            cmp a, b
2628   1269 FD 71         seq ; ==
2629   126B E4            pop a
2630   126C             ; END RELATIONAL
2631   126C D7            push a
2632   126D 11            mov a, b
2633   126E FA FD FF      lea d, [bp + -3] ; $fp
2634   1271 2A            mov b, [d]
2635   1272 74            mov d, b
2636   1273 32            mov bl, [d]
2637   1274 A7 00         mov bh, 0
2638   1276             ; START RELATIONAL
2639   1276 D7            push a
2640   1277 11            mov a, b
2641   1278 26 69 00      mov b, $69
2642   127B B0            cmp a, b
2643   127C FD 71         seq ; ==
2644   127E E4            pop a
2645   127F             ; END RELATIONAL
2646   127F FD A8         sor a, b ; ||
2647   1281 E4            pop a
2648   1282 C0 00 00      cmp b, 0
2649   1285 C6 9C 12      je _if35_else
2650   1288             _if35_true:
2651   1288             ;; print_signed_long(*(long *)p); 
2652   1288 FD 79         mov g, b
2653   128A 28            mov b, c
2654   128B FD AB         swp b
2655   128D D8            push b
2656   128E FD 27         mov b, g
2657   1290 FD AB         swp b
2658   1292 D8            push b
2659   1293 07 8B 16      call print_signed_long
2660   1296 51 04 00      add sp, 4
2661   1299 0A 09 13      jmp _if35_exit
2662   129C             _if35_else:
2663   129C             ;; if(*fp == 'u') 
2664   129C             _if36_cond:
2665   129C FA FD FF      lea d, [bp + -3] ; $fp
2666   129F 2A            mov b, [d]
2667   12A0 74            mov d, b
2668   12A1 32            mov bl, [d]
2669   12A2 A7 00         mov bh, 0
2670   12A4             ; START RELATIONAL
2671   12A4 D7            push a
2672   12A5 11            mov a, b
2673   12A6 26 75 00      mov b, $75
2674   12A9 B0            cmp a, b
2675   12AA FD 71         seq ; ==
2676   12AC E4            pop a
2677   12AD             ; END RELATIONAL
2678   12AD C0 00 00      cmp b, 0
2679   12B0 C6 C7 12      je _if36_else
2680   12B3             _if36_true:
2681   12B3             ;; print_unsigned_long(*(unsigned long *)p); 
2682   12B3 FD 79         mov g, b
2683   12B5 28            mov b, c
2684   12B6 FD AB         swp b
2685   12B8 D8            push b
2686   12B9 FD 27         mov b, g
2687   12BB FD AB         swp b
2688   12BD D8            push b
2689   12BE 07 DD 17      call print_unsigned_long
2690   12C1 51 04 00      add sp, 4
2691   12C4 0A 09 13      jmp _if36_exit
2692   12C7             _if36_else:
2693   12C7             ;; if(*fp == 'x') 
2694   12C7             _if37_cond:
2695   12C7 FA FD FF      lea d, [bp + -3] ; $fp
2696   12CA 2A            mov b, [d]
2697   12CB 74            mov d, b
2698   12CC 32            mov bl, [d]
2699   12CD A7 00         mov bh, 0
2700   12CF             ; START RELATIONAL
2701   12CF D7            push a
2702   12D0 11            mov a, b
2703   12D1 26 78 00      mov b, $78
2704   12D4 B0            cmp a, b
2705   12D5 FD 71         seq ; ==
2706   12D7 E4            pop a
2707   12D8             ; END RELATIONAL
2708   12D8 C0 00 00      cmp b, 0
2709   12DB C6 FD 12      je _if37_else
2710   12DE             _if37_true:
2711   12DE             ;; printx32(*(long int *)p); 
2712   12DE FA FF FF      lea d, [bp + -1] ; $p
2713   12E1 2A            mov b, [d]
2714   12E2 74            mov d, b
2715   12E3 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2716   12E6 FD 39         mov c, b ; And place it into C
2717   12E8 2A            mov b, [d] ; Lower Word in B
2718   12E9 FD 79         mov g, b
2719   12EB 28            mov b, c
2720   12EC FD AB         swp b
2721   12EE D8            push b
2722   12EF FD 27         mov b, g
2723   12F1 FD AB         swp b
2724   12F3 D8            push b
2725   12F4 07 14 14      call printx32
2726   12F7 51 04 00      add sp, 4
2727   12FA 0A 09 13      jmp _if37_exit
2728   12FD             _if37_else:
2729   12FD             ;; err("Unexpected format in printf."); 
2730   12FD 26 69 26      mov b, __s1 ; "Unexpected format in printf."
2731   1300 FD AB         swp b
2732   1302 D8            push b
2733   1303 07 FF 13      call err
2734   1306 51 02 00      add sp, 2
2735   1309             _if37_exit:
2736   1309             _if36_exit:
2737   1309             _if35_exit:
2738   1309             ;; p = p + 4; 
2739   1309 FA FF FF      lea d, [bp + -1] ; $p
2740   130C DA            push d
2741   130D FA FF FF      lea d, [bp + -1] ; $p
2742   1310 2A            mov b, [d]
2743   1311             ; START TERMS
2744   1311 D7            push a
2745   1312 11            mov a, b
2746   1313 26 04 00      mov b, $4
2747   1316 56            add b, a
2748   1317 E4            pop a
2749   1318             ; END TERMS
2750   1318 E7            pop d
2751   1319 FD 43         mov [d], b
2752   131B             ;; break; 
2753   131B 0A CE 13      jmp _switch34_exit ; case break
2754   131E             _switch34_case2:
2755   131E             _switch34_case3:
2756   131E             ;; print_signed(*(int*)p); 
2757   131E FA FF FF      lea d, [bp + -1] ; $p
2758   1321 2A            mov b, [d]
2759   1322 74            mov d, b
2760   1323 2A            mov b, [d]
2761   1324 FD AB         swp b
2762   1326 D8            push b
2763   1327 07 9B 15      call print_signed
2764   132A 51 02 00      add sp, 2
2765   132D             ;; p = p + 2; 
2766   132D FA FF FF      lea d, [bp + -1] ; $p
2767   1330 DA            push d
2768   1331 FA FF FF      lea d, [bp + -1] ; $p
2769   1334 2A            mov b, [d]
2770   1335             ; START TERMS
2771   1335 D7            push a
2772   1336 11            mov a, b
2773   1337 26 02 00      mov b, $2
2774   133A 56            add b, a
2775   133B E4            pop a
2776   133C             ; END TERMS
2777   133C E7            pop d
2778   133D FD 43         mov [d], b
2779   133F             ;; break; 
2780   133F 0A CE 13      jmp _switch34_exit ; case break
2781   1342             _switch34_case4:
2782   1342             ;; print_unsigned(*(unsigned int*)p); 
2783   1342 FA FF FF      lea d, [bp + -1] ; $p
2784   1345 2A            mov b, [d]
2785   1346 74            mov d, b
2786   1347 2A            mov b, [d]
2787   1348 FD AB         swp b
2788   134A D8            push b
2789   134B 07 DA 18      call print_unsigned
2790   134E 51 02 00      add sp, 2
2791   1351             ;; p = p + 2; 
2792   1351 FA FF FF      lea d, [bp + -1] ; $p
2793   1354 DA            push d
2794   1355 FA FF FF      lea d, [bp + -1] ; $p
2795   1358 2A            mov b, [d]
2796   1359             ; START TERMS
2797   1359 D7            push a
2798   135A 11            mov a, b
2799   135B 26 02 00      mov b, $2
2800   135E 56            add b, a
2801   135F E4            pop a
2802   1360             ; END TERMS
2803   1360 E7            pop d
2804   1361 FD 43         mov [d], b
2805   1363             ;; break; 
2806   1363 0A CE 13      jmp _switch34_exit ; case break
2807   1366             _switch34_case5:
2808   1366             
2809   1366             ; --- BEGIN INLINE ASM BLOCK
2810   1366 FA FF FF      lea d, [bp + -1] ; $p
2811   1369 FD 2A         mov d, [d]
2812   136B 2A            mov b, [d]
2813   136C 07 2D 1D      call print_u16x
2814   136F             ; --- END INLINE ASM BLOCK
2815   136F             
2816   136F             ;; p = p + 2; 
2817   136F FA FF FF      lea d, [bp + -1] ; $p
2818   1372 DA            push d
2819   1373 FA FF FF      lea d, [bp + -1] ; $p
2820   1376 2A            mov b, [d]
2821   1377             ; START TERMS
2822   1377 D7            push a
2823   1378 11            mov a, b
2824   1379 26 02 00      mov b, $2
2825   137C 56            add b, a
2826   137D E4            pop a
2827   137E             ; END TERMS
2828   137E E7            pop d
2829   137F FD 43         mov [d], b
2830   1381             ;; break; 
2831   1381 0A CE 13      jmp _switch34_exit ; case break
2832   1384             _switch34_case6:
2833   1384             
2834   1384             ; --- BEGIN INLINE ASM BLOCK
2835   1384 FA FF FF      lea d, [bp + -1] ; $p
2836   1387 FD 2A         mov d, [d]
2837   1389 1E            mov al, [d]
2838   138A 23            mov ah, al
2839   138B 07 8B 1B      call _putchar
2840   138E             ; --- END INLINE ASM BLOCK
2841   138E             
2842   138E             ;; p = p + 2; 
2843   138E FA FF FF      lea d, [bp + -1] ; $p
2844   1391 DA            push d
2845   1392 FA FF FF      lea d, [bp + -1] ; $p
2846   1395 2A            mov b, [d]
2847   1396             ; START TERMS
2848   1396 D7            push a
2849   1397 11            mov a, b
2850   1398 26 02 00      mov b, $2
2851   139B 56            add b, a
2852   139C E4            pop a
2853   139D             ; END TERMS
2854   139D E7            pop d
2855   139E FD 43         mov [d], b
2856   13A0             ;; break; 
2857   13A0 0A CE 13      jmp _switch34_exit ; case break
2858   13A3             _switch34_case7:
2859   13A3             
2860   13A3             ; --- BEGIN INLINE ASM BLOCK
2861   13A3 FA FF FF      lea d, [bp + -1] ; $p
2862   13A6 FD 2A         mov d, [d]
2863   13A8 FD 2A         mov d, [d]
2864   13AA 07 D5 1C      call _puts
2865   13AD             ; --- END INLINE ASM BLOCK
2866   13AD             
2867   13AD             ;; p = p + 2; 
2868   13AD FA FF FF      lea d, [bp + -1] ; $p
2869   13B0 DA            push d
2870   13B1 FA FF FF      lea d, [bp + -1] ; $p
2871   13B4 2A            mov b, [d]
2872   13B5             ; START TERMS
2873   13B5 D7            push a
2874   13B6 11            mov a, b
2875   13B7 26 02 00      mov b, $2
2876   13BA 56            add b, a
2877   13BB E4            pop a
2878   13BC             ; END TERMS
2879   13BC E7            pop d
2880   13BD FD 43         mov [d], b
2881   13BF             ;; break; 
2882   13BF 0A CE 13      jmp _switch34_exit ; case break
2883   13C2             _switch34_default:
2884   13C2             ;; print("Error: Unknown argument type.\n"); 
2885   13C2 26 86 26      mov b, __s2 ; "Error: Unknown argument type.\n"
2886   13C5 FD AB         swp b
2887   13C7 D8            push b
2888   13C8 07 F2 19      call print
2889   13CB 51 02 00      add sp, 2
2890   13CE             _switch34_exit:
2891   13CE             ;; fp++; 
2892   13CE FA FD FF      lea d, [bp + -3] ; $fp
2893   13D1 2A            mov b, [d]
2894   13D2 D8            push b
2895   13D3 FD 77         inc b
2896   13D5 FA FD FF      lea d, [bp + -3] ; $fp
2897   13D8 FD 43         mov [d], b
2898   13DA E5            pop b
2899   13DB 0A FA 13      jmp _if33_exit
2900   13DE             _if33_else:
2901   13DE             ;; putchar(*fp); 
2902   13DE FA FD FF      lea d, [bp + -3] ; $fp
2903   13E1 2A            mov b, [d]
2904   13E2 74            mov d, b
2905   13E3 32            mov bl, [d]
2906   13E4 A7 00         mov bh, 0
2907   13E6 DD            push bl
2908   13E7 07 AA 19      call putchar
2909   13EA 51 01 00      add sp, 1
2910   13ED             ;; fp++; 
2911   13ED FA FD FF      lea d, [bp + -3] ; $fp
2912   13F0 2A            mov b, [d]
2913   13F1 D8            push b
2914   13F2 FD 77         inc b
2915   13F4 FA FD FF      lea d, [bp + -3] ; $fp
2916   13F7 FD 43         mov [d], b
2917   13F9 E5            pop b
2918   13FA             _if33_exit:
2919   13FA             _if32_exit:
2920   13FA             _for31_update:
2921   13FA 0A DB 11      jmp _for31_cond
2922   13FD             _for31_exit:
2923   13FD F9            leave
2924   13FE 09            ret
2925   13FF             
2926   13FF             err:
2927   13FF F8 00 00      enter 0 ; (push bp; mov bp, sp)
2928   1402             ;; print(e); 
2929   1402 FA 05 00      lea d, [bp + 5] ; $e
2930   1405 2A            mov b, [d]
2931   1406 FD AB         swp b
2932   1408 D8            push b
2933   1409 07 F2 19      call print
2934   140C 51 02 00      add sp, 2
2935   140F             ;; exit(); 
2936   140F 07 CE 06      call exit
2937   1412 F9            leave
2938   1413 09            ret
2939   1414             
2940   1414             printx32:
2941   1414 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2942   1417             
2943   1417             ; --- BEGIN INLINE ASM BLOCK
2944   1417 FA 05 00      lea d, [bp + 5] ; $hex
2945   141A 2B 02 00      mov b, [d+2]
2946   141D 07 2D 1D      call print_u16x
2947   1420 2A            mov b, [d]
2948   1421 07 2D 1D      call print_u16x
2949   1424             ; --- END INLINE ASM BLOCK
2950   1424             
2951   1424 F9            leave
2952   1425 09            ret
2953   1426             
2954   1426             printx16:
2955   1426 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2956   1429             
2957   1429             ; --- BEGIN INLINE ASM BLOCK
2958   1429 FA 05 00      lea d, [bp + 5] ; $hex
2959   142C 2A            mov b, [d]
2960   142D 07 2D 1D      call print_u16x
2961   1430             ; --- END INLINE ASM BLOCK
2962   1430             
2963   1430 F9            leave
2964   1431 09            ret
2965   1432             
2966   1432             printx8:
2967   1432 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2968   1435             
2969   1435             ; --- BEGIN INLINE ASM BLOCK
2970   1435 FA 05 00      lea d, [bp + 5] ; $hex
2971   1438 32            mov bl, [d]
2972   1439 07 71 1D      call print_u8x
2973   143C             ; --- END INLINE ASM BLOCK
2974   143C             
2975   143C F9            leave
2976   143D 09            ret
2977   143E             
2978   143E             hex_to_int:
2979   143E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2980   1441             ; $value 
2981   1441 10 00 00      mov a, $0
2982   1444 45 FF FF      mov [bp + -1], a
2983   1447             ; $i 
2984   1447             ; $hex_char 
2985   1447             ; $len 
2986   1447 52 07 00      sub sp, 7
2987   144A             ;; len = strlen(hex_string); 
2988   144A FA FA FF      lea d, [bp + -6] ; $len
2989   144D DA            push d
2990   144E FA 05 00      lea d, [bp + 5] ; $hex_string
2991   1451 2A            mov b, [d]
2992   1452 FD AB         swp b
2993   1454 D8            push b
2994   1455 07 85 06      call strlen
2995   1458 51 02 00      add sp, 2
2996   145B E7            pop d
2997   145C FD 43         mov [d], b
2998   145E             ;; for (i = 0; i < len; i++) { 
2999   145E             _for38_init:
3000   145E FA FD FF      lea d, [bp + -3] ; $i
3001   1461 DA            push d
3002   1462 26 00 00      mov b, $0
3003   1465 E7            pop d
3004   1466 FD 43         mov [d], b
3005   1468             _for38_cond:
3006   1468 FA FD FF      lea d, [bp + -3] ; $i
3007   146B 2A            mov b, [d]
3008   146C             ; START RELATIONAL
3009   146C D7            push a
3010   146D 11            mov a, b
3011   146E FA FA FF      lea d, [bp + -6] ; $len
3012   1471 2A            mov b, [d]
3013   1472 B0            cmp a, b
3014   1473 FD 73         slt ; <= (signed)
3015   1475 E4            pop a
3016   1476             ; END RELATIONAL
3017   1476 C0 00 00      cmp b, 0
3018   1479 C6 7B 15      je _for38_exit
3019   147C             _for38_block:
3020   147C             ;; hex_char = hex_string[i]; 
3021   147C FA FC FF      lea d, [bp + -4] ; $hex_char
3022   147F DA            push d
3023   1480 FA 05 00      lea d, [bp + 5] ; $hex_string
3024   1483 FD 2A         mov d, [d]
3025   1485 D7            push a
3026   1486 DA            push d
3027   1487 FA FD FF      lea d, [bp + -3] ; $i
3028   148A 2A            mov b, [d]
3029   148B E7            pop d
3030   148C FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
3031   1490 E4            pop a
3032   1491 32            mov bl, [d]
3033   1492 A7 00         mov bh, 0
3034   1494 E7            pop d
3035   1495 FD 3E         mov [d], bl
3036   1497             ;; if (hex_char >= 'a' && hex_char <= 'f')  
3037   1497             _if39_cond:
3038   1497 FA FC FF      lea d, [bp + -4] ; $hex_char
3039   149A 32            mov bl, [d]
3040   149B A7 00         mov bh, 0
3041   149D             ; START RELATIONAL
3042   149D D7            push a
3043   149E 11            mov a, b
3044   149F 26 61 00      mov b, $61
3045   14A2 B0            cmp a, b
3046   14A3 FD 80         sge ; >=
3047   14A5 E4            pop a
3048   14A6             ; END RELATIONAL
3049   14A6 D7            push a
3050   14A7 11            mov a, b
3051   14A8 FA FC FF      lea d, [bp + -4] ; $hex_char
3052   14AB 32            mov bl, [d]
3053   14AC A7 00         mov bh, 0
3054   14AE             ; START RELATIONAL
3055   14AE D7            push a
3056   14AF 11            mov a, b
3057   14B0 26 66 00      mov b, $66
3058   14B3 B0            cmp a, b
3059   14B4 FD 74         sle ; <=
3060   14B6 E4            pop a
3061   14B7             ; END RELATIONAL
3062   14B7 FD A7         sand a, b ; &&
3063   14B9 E4            pop a
3064   14BA C0 00 00      cmp b, 0
3065   14BD C6 EE 14      je _if39_else
3066   14C0             _if39_true:
3067   14C0             ;; value = (value * 16) + (hex_char - 'a' + 10); 
3068   14C0 FA FF FF      lea d, [bp + -1] ; $value
3069   14C3 DA            push d
3070   14C4 FA FF FF      lea d, [bp + -1] ; $value
3071   14C7 2A            mov b, [d]
3072   14C8             ; START FACTORS
3073   14C8 D7            push a
3074   14C9 11            mov a, b
3075   14CA 26 10 00      mov b, $10
3076   14CD AC            mul a, b ; *
3077   14CE 11            mov a, b
3078   14CF 27            mov b, a
3079   14D0 E4            pop a
3080   14D1             ; END FACTORS
3081   14D1             ; START TERMS
3082   14D1 D7            push a
3083   14D2 11            mov a, b
3084   14D3 FA FC FF      lea d, [bp + -4] ; $hex_char
3085   14D6 32            mov bl, [d]
3086   14D7 A7 00         mov bh, 0
3087   14D9             ; START TERMS
3088   14D9 D7            push a
3089   14DA 11            mov a, b
3090   14DB 26 61 00      mov b, $61
3091   14DE 60            sub a, b
3092   14DF 27            mov b, a
3093   14E0 11            mov a, b
3094   14E1 26 0A 00      mov b, $a
3095   14E4 56            add b, a
3096   14E5 E4            pop a
3097   14E6             ; END TERMS
3098   14E6 56            add b, a
3099   14E7 E4            pop a
3100   14E8             ; END TERMS
3101   14E8 E7            pop d
3102   14E9 FD 43         mov [d], b
3103   14EB 0A 6B 15      jmp _if39_exit
3104   14EE             _if39_else:
3105   14EE             ;; if (hex_char >= 'A' && hex_char <= 'F')  
3106   14EE             _if40_cond:
3107   14EE FA FC FF      lea d, [bp + -4] ; $hex_char
3108   14F1 32            mov bl, [d]
3109   14F2 A7 00         mov bh, 0
3110   14F4             ; START RELATIONAL
3111   14F4 D7            push a
3112   14F5 11            mov a, b
3113   14F6 26 41 00      mov b, $41
3114   14F9 B0            cmp a, b
3115   14FA FD 80         sge ; >=
3116   14FC E4            pop a
3117   14FD             ; END RELATIONAL
3118   14FD D7            push a
3119   14FE 11            mov a, b
3120   14FF FA FC FF      lea d, [bp + -4] ; $hex_char
3121   1502 32            mov bl, [d]
3122   1503 A7 00         mov bh, 0
3123   1505             ; START RELATIONAL
3124   1505 D7            push a
3125   1506 11            mov a, b
3126   1507 26 46 00      mov b, $46
3127   150A B0            cmp a, b
3128   150B FD 74         sle ; <=
3129   150D E4            pop a
3130   150E             ; END RELATIONAL
3131   150E FD A7         sand a, b ; &&
3132   1510 E4            pop a
3133   1511 C0 00 00      cmp b, 0
3134   1514 C6 45 15      je _if40_else
3135   1517             _if40_true:
3136   1517             ;; value = (value * 16) + (hex_char - 'A' + 10); 
3137   1517 FA FF FF      lea d, [bp + -1] ; $value
3138   151A DA            push d
3139   151B FA FF FF      lea d, [bp + -1] ; $value
3140   151E 2A            mov b, [d]
3141   151F             ; START FACTORS
3142   151F D7            push a
3143   1520 11            mov a, b
3144   1521 26 10 00      mov b, $10
3145   1524 AC            mul a, b ; *
3146   1525 11            mov a, b
3147   1526 27            mov b, a
3148   1527 E4            pop a
3149   1528             ; END FACTORS
3150   1528             ; START TERMS
3151   1528 D7            push a
3152   1529 11            mov a, b
3153   152A FA FC FF      lea d, [bp + -4] ; $hex_char
3154   152D 32            mov bl, [d]
3155   152E A7 00         mov bh, 0
3156   1530             ; START TERMS
3157   1530 D7            push a
3158   1531 11            mov a, b
3159   1532 26 41 00      mov b, $41
3160   1535 60            sub a, b
3161   1536 27            mov b, a
3162   1537 11            mov a, b
3163   1538 26 0A 00      mov b, $a
3164   153B 56            add b, a
3165   153C E4            pop a
3166   153D             ; END TERMS
3167   153D 56            add b, a
3168   153E E4            pop a
3169   153F             ; END TERMS
3170   153F E7            pop d
3171   1540 FD 43         mov [d], b
3172   1542 0A 6B 15      jmp _if40_exit
3173   1545             _if40_else:
3174   1545             ;; value = (value * 16) + (hex_char - '0'); 
3175   1545 FA FF FF      lea d, [bp + -1] ; $value
3176   1548 DA            push d
3177   1549 FA FF FF      lea d, [bp + -1] ; $value
3178   154C 2A            mov b, [d]
3179   154D             ; START FACTORS
3180   154D D7            push a
3181   154E 11            mov a, b
3182   154F 26 10 00      mov b, $10
3183   1552 AC            mul a, b ; *
3184   1553 11            mov a, b
3185   1554 27            mov b, a
3186   1555 E4            pop a
3187   1556             ; END FACTORS
3188   1556             ; START TERMS
3189   1556 D7            push a
3190   1557 11            mov a, b
3191   1558 FA FC FF      lea d, [bp + -4] ; $hex_char
3192   155B 32            mov bl, [d]
3193   155C A7 00         mov bh, 0
3194   155E             ; START TERMS
3195   155E D7            push a
3196   155F 11            mov a, b
3197   1560 26 30 00      mov b, $30
3198   1563 60            sub a, b
3199   1564 27            mov b, a
3200   1565 E4            pop a
3201   1566             ; END TERMS
3202   1566 56            add b, a
3203   1567 E4            pop a
3204   1568             ; END TERMS
3205   1568 E7            pop d
3206   1569 FD 43         mov [d], b
3207   156B             _if40_exit:
3208   156B             _if39_exit:
3209   156B             _for38_update:
3210   156B FA FD FF      lea d, [bp + -3] ; $i
3211   156E 2A            mov b, [d]
3212   156F D8            push b
3213   1570 FD 77         inc b
3214   1572 FA FD FF      lea d, [bp + -3] ; $i
3215   1575 FD 43         mov [d], b
3216   1577 E5            pop b
3217   1578 0A 68 14      jmp _for38_cond
3218   157B             _for38_exit:
3219   157B             ;; return value; 
3220   157B FA FF FF      lea d, [bp + -1] ; $value
3221   157E 2A            mov b, [d]
3222   157F F9            leave
3223   1580 09            ret
3224   1581             
3225   1581             gets:
3226   1581 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3227   1584             
3228   1584             ; --- BEGIN INLINE ASM BLOCK
3229   1584 FA 05 00      lea d, [bp + 5] ; $s
3230   1587 15            mov a, [d]
3231   1588 3C            mov d, a
3232   1589 07 92 1B      call _gets
3233   158C             ; --- END INLINE ASM BLOCK
3234   158C             
3235   158C             ;; return strlen(s); 
3236   158C FA 05 00      lea d, [bp + 5] ; $s
3237   158F 2A            mov b, [d]
3238   1590 FD AB         swp b
3239   1592 D8            push b
3240   1593 07 85 06      call strlen
3241   1596 51 02 00      add sp, 2
3242   1599 F9            leave
3243   159A 09            ret
3244   159B             
3245   159B             print_signed:
3246   159B F8 00 00      enter 0 ; (push bp; mov bp, sp)
3247   159E             ; $digits 
3248   159E             ; $i 
3249   159E 10 00 00      mov a, $0
3250   15A1 45 FA FF      mov [bp + -6], a
3251   15A4 52 07 00      sub sp, 7
3252   15A7             ;; if (num < 0) { 
3253   15A7             _if41_cond:
3254   15A7 FA 05 00      lea d, [bp + 5] ; $num
3255   15AA 2A            mov b, [d]
3256   15AB             ; START RELATIONAL
3257   15AB D7            push a
3258   15AC 11            mov a, b
3259   15AD 26 00 00      mov b, $0
3260   15B0 B0            cmp a, b
3261   15B1 FD 73         slt ; <= (signed)
3262   15B3 E4            pop a
3263   15B4             ; END RELATIONAL
3264   15B4 C0 00 00      cmp b, 0
3265   15B7 C6 D4 15      je _if41_else
3266   15BA             _if41_true:
3267   15BA             ;; putchar('-'); 
3268   15BA 26 2D 00      mov b, $2d
3269   15BD DD            push bl
3270   15BE 07 AA 19      call putchar
3271   15C1 51 01 00      add sp, 1
3272   15C4             ;; num = -num; 
3273   15C4 FA 05 00      lea d, [bp + 5] ; $num
3274   15C7 DA            push d
3275   15C8 FA 05 00      lea d, [bp + 5] ; $num
3276   15CB 2A            mov b, [d]
3277   15CC FD 97         neg b
3278   15CE E7            pop d
3279   15CF FD 43         mov [d], b
3280   15D1 0A F6 15      jmp _if41_exit
3281   15D4             _if41_else:
3282   15D4             ;; if (num == 0) { 
3283   15D4             _if42_cond:
3284   15D4 FA 05 00      lea d, [bp + 5] ; $num
3285   15D7 2A            mov b, [d]
3286   15D8             ; START RELATIONAL
3287   15D8 D7            push a
3288   15D9 11            mov a, b
3289   15DA 26 00 00      mov b, $0
3290   15DD B0            cmp a, b
3291   15DE FD 71         seq ; ==
3292   15E0 E4            pop a
3293   15E1             ; END RELATIONAL
3294   15E1 C0 00 00      cmp b, 0
3295   15E4 C6 F6 15      je _if42_exit
3296   15E7             _if42_true:
3297   15E7             ;; putchar('0'); 
3298   15E7 26 30 00      mov b, $30
3299   15EA DD            push bl
3300   15EB 07 AA 19      call putchar
3301   15EE 51 01 00      add sp, 1
3302   15F1             ;; return; 
3303   15F1 F9            leave
3304   15F2 09            ret
3305   15F3 0A F6 15      jmp _if42_exit
3306   15F6             _if42_exit:
3307   15F6             _if41_exit:
3308   15F6             ;; while (num > 0) { 
3309   15F6             _while43_cond:
3310   15F6 FA 05 00      lea d, [bp + 5] ; $num
3311   15F9 2A            mov b, [d]
3312   15FA             ; START RELATIONAL
3313   15FA D7            push a
3314   15FB 11            mov a, b
3315   15FC 26 00 00      mov b, $0
3316   15FF B0            cmp a, b
3317   1600 FD 7F         sgt ; >
3318   1602 E4            pop a
3319   1603             ; END RELATIONAL
3320   1603 C0 00 00      cmp b, 0
3321   1606 C6 50 16      je _while43_exit
3322   1609             _while43_block:
3323   1609             ;; digits[i] = '0' + (num % 10); 
3324   1609 FA FC FF      lea d, [bp + -4] ; $digits
3325   160C D7            push a
3326   160D DA            push d
3327   160E FA FA FF      lea d, [bp + -6] ; $i
3328   1611 2A            mov b, [d]
3329   1612 E7            pop d
3330   1613 5A            add d, b
3331   1614 E4            pop a
3332   1615 DA            push d
3333   1616 26 30 00      mov b, $30
3334   1619             ; START TERMS
3335   1619 D7            push a
3336   161A 11            mov a, b
3337   161B FA 05 00      lea d, [bp + 5] ; $num
3338   161E 2A            mov b, [d]
3339   161F             ; START FACTORS
3340   161F D7            push a
3341   1620 11            mov a, b
3342   1621 26 0A 00      mov b, $a
3343   1624 AE            div a, b ; 
3344   1625 11            mov a, b
3345   1626 27            mov b, a
3346   1627 E4            pop a
3347   1628             ; END FACTORS
3348   1628 56            add b, a
3349   1629 E4            pop a
3350   162A             ; END TERMS
3351   162A E7            pop d
3352   162B FD 3E         mov [d], bl
3353   162D             ;; num = num / 10; 
3354   162D FA 05 00      lea d, [bp + 5] ; $num
3355   1630 DA            push d
3356   1631 FA 05 00      lea d, [bp + 5] ; $num
3357   1634 2A            mov b, [d]
3358   1635             ; START FACTORS
3359   1635 D7            push a
3360   1636 11            mov a, b
3361   1637 26 0A 00      mov b, $a
3362   163A AE            div a, b
3363   163B 27            mov b, a
3364   163C E4            pop a
3365   163D             ; END FACTORS
3366   163D E7            pop d
3367   163E FD 43         mov [d], b
3368   1640             ;; i++; 
3369   1640 FA FA FF      lea d, [bp + -6] ; $i
3370   1643 2A            mov b, [d]
3371   1644 D8            push b
3372   1645 FD 77         inc b
3373   1647 FA FA FF      lea d, [bp + -6] ; $i
3374   164A FD 43         mov [d], b
3375   164C E5            pop b
3376   164D 0A F6 15      jmp _while43_cond
3377   1650             _while43_exit:
3378   1650             ;; while (i > 0) { 
3379   1650             _while44_cond:
3380   1650 FA FA FF      lea d, [bp + -6] ; $i
3381   1653 2A            mov b, [d]
3382   1654             ; START RELATIONAL
3383   1654 D7            push a
3384   1655 11            mov a, b
3385   1656 26 00 00      mov b, $0
3386   1659 B0            cmp a, b
3387   165A FD 7F         sgt ; >
3388   165C E4            pop a
3389   165D             ; END RELATIONAL
3390   165D C0 00 00      cmp b, 0
3391   1660 C6 89 16      je _while44_exit
3392   1663             _while44_block:
3393   1663             ;; i--; 
3394   1663 FA FA FF      lea d, [bp + -6] ; $i
3395   1666 2A            mov b, [d]
3396   1667 D8            push b
3397   1668 FD 7D         dec b
3398   166A FA FA FF      lea d, [bp + -6] ; $i
3399   166D FD 43         mov [d], b
3400   166F E5            pop b
3401   1670             ;; putchar(digits[i]); 
3402   1670 FA FC FF      lea d, [bp + -4] ; $digits
3403   1673 D7            push a
3404   1674 DA            push d
3405   1675 FA FA FF      lea d, [bp + -6] ; $i
3406   1678 2A            mov b, [d]
3407   1679 E7            pop d
3408   167A 5A            add d, b
3409   167B E4            pop a
3410   167C 32            mov bl, [d]
3411   167D A7 00         mov bh, 0
3412   167F DD            push bl
3413   1680 07 AA 19      call putchar
3414   1683 51 01 00      add sp, 1
3415   1686 0A 50 16      jmp _while44_cond
3416   1689             _while44_exit:
3417   1689 F9            leave
3418   168A 09            ret
3419   168B             
3420   168B             print_signed_long:
3421   168B F8 00 00      enter 0 ; (push bp; mov bp, sp)
3422   168E             ; $digits 
3423   168E             ; $i 
3424   168E 10 00 00      mov a, $0
3425   1691 45 F5 FF      mov [bp + -11], a
3426   1694 52 0C 00      sub sp, 12
3427   1697             ;; if (num < 0) { 
3428   1697             _if45_cond:
3429   1697 FA 05 00      lea d, [bp + 5] ; $num
3430   169A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3431   169D FD 39         mov c, b ; And place it into C
3432   169F 2A            mov b, [d] ; Lower Word in B
3433   16A0             ; START RELATIONAL
3434   16A0 D7            push a
3435   16A1 FD D8         push g
3436   16A3 11            mov a, b
3437   16A4 FD 7A         mov g, c
3438   16A6 26 00 00      mov b, $0
3439   16A9 4D            mov si, a
3440   16AA 11            mov a, b
3441   16AB 4F            mov di, a
3442   16AC FD 12         mov a, g
3443   16AE 28            mov b, c
3444   16AF B0            cmp a, b
3445   16B0 FD 75         slu ; <
3446   16B2 D8            push b
3447   16B3 28            mov b, c
3448   16B4 FD 71         seq ; ==
3449   16B6 D8            push b
3450   16B7 50            mov a, di
3451   16B8 27            mov b, a
3452   16B9 4E            mov a, si
3453   16BA B0            cmp a, b
3454   16BB FD 75         slu ; <
3455   16BD E4            pop a
3456   16BE FD 92         and b, a
3457   16C0 E4            pop a
3458   16C1 FD 70         or b, a
3459   16C3               
3460   16C3 FD F1         pop g
3461   16C5 E4            pop a
3462   16C6             ; END RELATIONAL
3463   16C6 C0 00 00      cmp b, 0
3464   16C9 C6 F0 16      je _if45_else
3465   16CC             _if45_true:
3466   16CC             ;; putchar('-'); 
3467   16CC 26 2D 00      mov b, $2d
3468   16CF DD            push bl
3469   16D0 07 AA 19      call putchar
3470   16D3 51 01 00      add sp, 1
3471   16D6             ;; num = -num; 
3472   16D6 FA 05 00      lea d, [bp + 5] ; $num
3473   16D9 DA            push d
3474   16DA FA 05 00      lea d, [bp + 5] ; $num
3475   16DD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3476   16E0 FD 39         mov c, b ; And place it into C
3477   16E2 2A            mov b, [d] ; Lower Word in B
3478   16E3 FD 97         neg b
3479   16E5 E7            pop d
3480   16E6 FD 43         mov [d], b
3481   16E8 28            mov b, c
3482   16E9 FD 44 02 00   mov [d + 2], b
3483   16ED 0A 27 17      jmp _if45_exit
3484   16F0             _if45_else:
3485   16F0             ;; if (num == 0) { 
3486   16F0             _if46_cond:
3487   16F0 FA 05 00      lea d, [bp + 5] ; $num
3488   16F3 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3489   16F6 FD 39         mov c, b ; And place it into C
3490   16F8 2A            mov b, [d] ; Lower Word in B
3491   16F9             ; START RELATIONAL
3492   16F9 D7            push a
3493   16FA FD D8         push g
3494   16FC 11            mov a, b
3495   16FD FD 7A         mov g, c
3496   16FF 26 00 00      mov b, $0
3497   1702 B0            cmp a, b
3498   1703 FD 71         seq ; ==
3499   1705 D8            push b
3500   1706 12            mov a, c
3501   1707 FD 27         mov b, g
3502   1709 B0            cmp a, b
3503   170A FD 71         seq ; ==
3504   170C E4            pop a
3505   170D FD A7         sand a, b
3506   170F FD F1         pop g
3507   1711 E4            pop a
3508   1712             ; END RELATIONAL
3509   1712 C0 00 00      cmp b, 0
3510   1715 C6 27 17      je _if46_exit
3511   1718             _if46_true:
3512   1718             ;; putchar('0'); 
3513   1718 26 30 00      mov b, $30
3514   171B DD            push bl
3515   171C 07 AA 19      call putchar
3516   171F 51 01 00      add sp, 1
3517   1722             ;; return; 
3518   1722 F9            leave
3519   1723 09            ret
3520   1724 0A 27 17      jmp _if46_exit
3521   1727             _if46_exit:
3522   1727             _if45_exit:
3523   1727             ;; while (num > 0) { 
3524   1727             _while47_cond:
3525   1727 FA 05 00      lea d, [bp + 5] ; $num
3526   172A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3527   172D FD 39         mov c, b ; And place it into C
3528   172F 2A            mov b, [d] ; Lower Word in B
3529   1730             ; START RELATIONAL
3530   1730 D7            push a
3531   1731 FD D8         push g
3532   1733 11            mov a, b
3533   1734 FD 7A         mov g, c
3534   1736 26 00 00      mov b, $0
3535   1739 B0            cmp a, b
3536   173A FD 7F         sgt ; >
3537   173C FD F1         pop g
3538   173E E4            pop a
3539   173F             ; END RELATIONAL
3540   173F C0 00 00      cmp b, 0
3541   1742 C6 A2 17      je _while47_exit
3542   1745             _while47_block:
3543   1745             ;; digits[i] = '0' + (num % 10); 
3544   1745 FA F7 FF      lea d, [bp + -9] ; $digits
3545   1748 D7            push a
3546   1749 DA            push d
3547   174A FA F5 FF      lea d, [bp + -11] ; $i
3548   174D 2A            mov b, [d]
3549   174E E7            pop d
3550   174F 5A            add d, b
3551   1750 E4            pop a
3552   1751 DA            push d
3553   1752 26 30 00      mov b, $30
3554   1755             ; START TERMS
3555   1755 D7            push a
3556   1756 11            mov a, b
3557   1757 FA 05 00      lea d, [bp + 5] ; $num
3558   175A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3559   175D FD 39         mov c, b ; And place it into C
3560   175F 2A            mov b, [d] ; Lower Word in B
3561   1760             ; START FACTORS
3562   1760 D7            push a
3563   1761 11            mov a, b
3564   1762 26 0A 00      mov b, $a
3565   1765 AE            div a, b ; 
3566   1766 11            mov a, b
3567   1767 27            mov b, a
3568   1768 E4            pop a
3569   1769             ; END FACTORS
3570   1769 54            add a, b
3571   176A D7            push a
3572   176B FD 12         mov a, g
3573   176D 28            mov b, c
3574   176E 5C            adc a, b
3575   176F 39            mov c, a
3576   1770 E5            pop b
3577   1771 E4            pop a
3578   1772             ; END TERMS
3579   1772 E7            pop d
3580   1773 FD 3E         mov [d], bl
3581   1775             ;; num = num / 10; 
3582   1775 FA 05 00      lea d, [bp + 5] ; $num
3583   1778 DA            push d
3584   1779 FA 05 00      lea d, [bp + 5] ; $num
3585   177C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3586   177F FD 39         mov c, b ; And place it into C
3587   1781 2A            mov b, [d] ; Lower Word in B
3588   1782             ; START FACTORS
3589   1782 D7            push a
3590   1783 11            mov a, b
3591   1784 26 0A 00      mov b, $a
3592   1787 AE            div a, b
3593   1788 27            mov b, a
3594   1789 E4            pop a
3595   178A             ; END FACTORS
3596   178A E7            pop d
3597   178B FD 43         mov [d], b
3598   178D 28            mov b, c
3599   178E FD 44 02 00   mov [d + 2], b
3600   1792             ;; i++; 
3601   1792 FA F5 FF      lea d, [bp + -11] ; $i
3602   1795 2A            mov b, [d]
3603   1796 D8            push b
3604   1797 FD 77         inc b
3605   1799 FA F5 FF      lea d, [bp + -11] ; $i
3606   179C FD 43         mov [d], b
3607   179E E5            pop b
3608   179F 0A 27 17      jmp _while47_cond
3609   17A2             _while47_exit:
3610   17A2             ;; while (i > 0) { 
3611   17A2             _while48_cond:
3612   17A2 FA F5 FF      lea d, [bp + -11] ; $i
3613   17A5 2A            mov b, [d]
3614   17A6             ; START RELATIONAL
3615   17A6 D7            push a
3616   17A7 11            mov a, b
3617   17A8 26 00 00      mov b, $0
3618   17AB B0            cmp a, b
3619   17AC FD 7F         sgt ; >
3620   17AE E4            pop a
3621   17AF             ; END RELATIONAL
3622   17AF C0 00 00      cmp b, 0
3623   17B2 C6 DB 17      je _while48_exit
3624   17B5             _while48_block:
3625   17B5             ;; i--; 
3626   17B5 FA F5 FF      lea d, [bp + -11] ; $i
3627   17B8 2A            mov b, [d]
3628   17B9 D8            push b
3629   17BA FD 7D         dec b
3630   17BC FA F5 FF      lea d, [bp + -11] ; $i
3631   17BF FD 43         mov [d], b
3632   17C1 E5            pop b
3633   17C2             ;; putchar(digits[i]); 
3634   17C2 FA F7 FF      lea d, [bp + -9] ; $digits
3635   17C5 D7            push a
3636   17C6 DA            push d
3637   17C7 FA F5 FF      lea d, [bp + -11] ; $i
3638   17CA 2A            mov b, [d]
3639   17CB E7            pop d
3640   17CC 5A            add d, b
3641   17CD E4            pop a
3642   17CE 32            mov bl, [d]
3643   17CF A7 00         mov bh, 0
3644   17D1 DD            push bl
3645   17D2 07 AA 19      call putchar
3646   17D5 51 01 00      add sp, 1
3647   17D8 0A A2 17      jmp _while48_cond
3648   17DB             _while48_exit:
3649   17DB F9            leave
3650   17DC 09            ret
3651   17DD             
3652   17DD             print_unsigned_long:
3653   17DD F8 00 00      enter 0 ; (push bp; mov bp, sp)
3654   17E0             ; $digits 
3655   17E0             ; $i 
3656   17E0 52 0C 00      sub sp, 12
3657   17E3             ;; i = 0; 
3658   17E3 FA F5 FF      lea d, [bp + -11] ; $i
3659   17E6 DA            push d
3660   17E7 26 00 00      mov b, $0
3661   17EA E7            pop d
3662   17EB FD 43         mov [d], b
3663   17ED             ;; if(num == 0){ 
3664   17ED             _if49_cond:
3665   17ED FA 05 00      lea d, [bp + 5] ; $num
3666   17F0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3667   17F3 FD 39         mov c, b ; And place it into C
3668   17F5 2A            mov b, [d] ; Lower Word in B
3669   17F6             ; START RELATIONAL
3670   17F6 D7            push a
3671   17F7 FD D8         push g
3672   17F9 11            mov a, b
3673   17FA FD 7A         mov g, c
3674   17FC 26 00 00      mov b, $0
3675   17FF B0            cmp a, b
3676   1800 FD 71         seq ; ==
3677   1802 D8            push b
3678   1803 12            mov a, c
3679   1804 FD 27         mov b, g
3680   1806 B0            cmp a, b
3681   1807 FD 71         seq ; ==
3682   1809 E4            pop a
3683   180A FD A7         sand a, b
3684   180C FD F1         pop g
3685   180E E4            pop a
3686   180F             ; END RELATIONAL
3687   180F C0 00 00      cmp b, 0
3688   1812 C6 24 18      je _if49_exit
3689   1815             _if49_true:
3690   1815             ;; putchar('0'); 
3691   1815 26 30 00      mov b, $30
3692   1818 DD            push bl
3693   1819 07 AA 19      call putchar
3694   181C 51 01 00      add sp, 1
3695   181F             ;; return; 
3696   181F F9            leave
3697   1820 09            ret
3698   1821 0A 24 18      jmp _if49_exit
3699   1824             _if49_exit:
3700   1824             ;; while (num > 0) { 
3701   1824             _while50_cond:
3702   1824 FA 05 00      lea d, [bp + 5] ; $num
3703   1827 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3704   182A FD 39         mov c, b ; And place it into C
3705   182C 2A            mov b, [d] ; Lower Word in B
3706   182D             ; START RELATIONAL
3707   182D D7            push a
3708   182E FD D8         push g
3709   1830 11            mov a, b
3710   1831 FD 7A         mov g, c
3711   1833 26 00 00      mov b, $0
3712   1836 B0            cmp a, b
3713   1837 FD 81         sgu ; > (unsigned)
3714   1839 FD F1         pop g
3715   183B E4            pop a
3716   183C             ; END RELATIONAL
3717   183C C0 00 00      cmp b, 0
3718   183F C6 9F 18      je _while50_exit
3719   1842             _while50_block:
3720   1842             ;; digits[i] = '0' + (num % 10); 
3721   1842 FA F7 FF      lea d, [bp + -9] ; $digits
3722   1845 D7            push a
3723   1846 DA            push d
3724   1847 FA F5 FF      lea d, [bp + -11] ; $i
3725   184A 2A            mov b, [d]
3726   184B E7            pop d
3727   184C 5A            add d, b
3728   184D E4            pop a
3729   184E DA            push d
3730   184F 26 30 00      mov b, $30
3731   1852             ; START TERMS
3732   1852 D7            push a
3733   1853 11            mov a, b
3734   1854 FA 05 00      lea d, [bp + 5] ; $num
3735   1857 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3736   185A FD 39         mov c, b ; And place it into C
3737   185C 2A            mov b, [d] ; Lower Word in B
3738   185D             ; START FACTORS
3739   185D D7            push a
3740   185E 11            mov a, b
3741   185F 26 0A 00      mov b, $a
3742   1862 AE            div a, b ; 
3743   1863 11            mov a, b
3744   1864 27            mov b, a
3745   1865 E4            pop a
3746   1866             ; END FACTORS
3747   1866 54            add a, b
3748   1867 D7            push a
3749   1868 FD 12         mov a, g
3750   186A 28            mov b, c
3751   186B 5C            adc a, b
3752   186C 39            mov c, a
3753   186D E5            pop b
3754   186E E4            pop a
3755   186F             ; END TERMS
3756   186F E7            pop d
3757   1870 FD 3E         mov [d], bl
3758   1872             ;; num = num / 10; 
3759   1872 FA 05 00      lea d, [bp + 5] ; $num
3760   1875 DA            push d
3761   1876 FA 05 00      lea d, [bp + 5] ; $num
3762   1879 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
3763   187C FD 39         mov c, b ; And place it into C
3764   187E 2A            mov b, [d] ; Lower Word in B
3765   187F             ; START FACTORS
3766   187F D7            push a
3767   1880 11            mov a, b
3768   1881 26 0A 00      mov b, $a
3769   1884 AE            div a, b
3770   1885 27            mov b, a
3771   1886 E4            pop a
3772   1887             ; END FACTORS
3773   1887 E7            pop d
3774   1888 FD 43         mov [d], b
3775   188A 28            mov b, c
3776   188B FD 44 02 00   mov [d + 2], b
3777   188F             ;; i++; 
3778   188F FA F5 FF      lea d, [bp + -11] ; $i
3779   1892 2A            mov b, [d]
3780   1893 D8            push b
3781   1894 FD 77         inc b
3782   1896 FA F5 FF      lea d, [bp + -11] ; $i
3783   1899 FD 43         mov [d], b
3784   189B E5            pop b
3785   189C 0A 24 18      jmp _while50_cond
3786   189F             _while50_exit:
3787   189F             ;; while (i > 0) { 
3788   189F             _while51_cond:
3789   189F FA F5 FF      lea d, [bp + -11] ; $i
3790   18A2 2A            mov b, [d]
3791   18A3             ; START RELATIONAL
3792   18A3 D7            push a
3793   18A4 11            mov a, b
3794   18A5 26 00 00      mov b, $0
3795   18A8 B0            cmp a, b
3796   18A9 FD 7F         sgt ; >
3797   18AB E4            pop a
3798   18AC             ; END RELATIONAL
3799   18AC C0 00 00      cmp b, 0
3800   18AF C6 D8 18      je _while51_exit
3801   18B2             _while51_block:
3802   18B2             ;; i--; 
3803   18B2 FA F5 FF      lea d, [bp + -11] ; $i
3804   18B5 2A            mov b, [d]
3805   18B6 D8            push b
3806   18B7 FD 7D         dec b
3807   18B9 FA F5 FF      lea d, [bp + -11] ; $i
3808   18BC FD 43         mov [d], b
3809   18BE E5            pop b
3810   18BF             ;; putchar(digits[i]); 
3811   18BF FA F7 FF      lea d, [bp + -9] ; $digits
3812   18C2 D7            push a
3813   18C3 DA            push d
3814   18C4 FA F5 FF      lea d, [bp + -11] ; $i
3815   18C7 2A            mov b, [d]
3816   18C8 E7            pop d
3817   18C9 5A            add d, b
3818   18CA E4            pop a
3819   18CB 32            mov bl, [d]
3820   18CC A7 00         mov bh, 0
3821   18CE DD            push bl
3822   18CF 07 AA 19      call putchar
3823   18D2 51 01 00      add sp, 1
3824   18D5 0A 9F 18      jmp _while51_cond
3825   18D8             _while51_exit:
3826   18D8 F9            leave
3827   18D9 09            ret
3828   18DA             
3829   18DA             print_unsigned:
3830   18DA F8 00 00      enter 0 ; (push bp; mov bp, sp)
3831   18DD             ; $digits 
3832   18DD             ; $i 
3833   18DD 52 07 00      sub sp, 7
3834   18E0             ;; i = 0; 
3835   18E0 FA FA FF      lea d, [bp + -6] ; $i
3836   18E3 DA            push d
3837   18E4 26 00 00      mov b, $0
3838   18E7 E7            pop d
3839   18E8 FD 43         mov [d], b
3840   18EA             ;; if(num == 0){ 
3841   18EA             _if52_cond:
3842   18EA FA 05 00      lea d, [bp + 5] ; $num
3843   18ED 2A            mov b, [d]
3844   18EE             ; START RELATIONAL
3845   18EE D7            push a
3846   18EF 11            mov a, b
3847   18F0 26 00 00      mov b, $0
3848   18F3 B0            cmp a, b
3849   18F4 FD 71         seq ; ==
3850   18F6 E4            pop a
3851   18F7             ; END RELATIONAL
3852   18F7 C0 00 00      cmp b, 0
3853   18FA C6 0C 19      je _if52_exit
3854   18FD             _if52_true:
3855   18FD             ;; putchar('0'); 
3856   18FD 26 30 00      mov b, $30
3857   1900 DD            push bl
3858   1901 07 AA 19      call putchar
3859   1904 51 01 00      add sp, 1
3860   1907             ;; return; 
3861   1907 F9            leave
3862   1908 09            ret
3863   1909 0A 0C 19      jmp _if52_exit
3864   190C             _if52_exit:
3865   190C             ;; while (num > 0) { 
3866   190C             _while53_cond:
3867   190C FA 05 00      lea d, [bp + 5] ; $num
3868   190F 2A            mov b, [d]
3869   1910             ; START RELATIONAL
3870   1910 D7            push a
3871   1911 11            mov a, b
3872   1912 26 00 00      mov b, $0
3873   1915 B0            cmp a, b
3874   1916 FD 81         sgu ; > (unsigned)
3875   1918 E4            pop a
3876   1919             ; END RELATIONAL
3877   1919 C0 00 00      cmp b, 0
3878   191C C6 66 19      je _while53_exit
3879   191F             _while53_block:
3880   191F             ;; digits[i] = '0' + (num % 10); 
3881   191F FA FC FF      lea d, [bp + -4] ; $digits
3882   1922 D7            push a
3883   1923 DA            push d
3884   1924 FA FA FF      lea d, [bp + -6] ; $i
3885   1927 2A            mov b, [d]
3886   1928 E7            pop d
3887   1929 5A            add d, b
3888   192A E4            pop a
3889   192B DA            push d
3890   192C 26 30 00      mov b, $30
3891   192F             ; START TERMS
3892   192F D7            push a
3893   1930 11            mov a, b
3894   1931 FA 05 00      lea d, [bp + 5] ; $num
3895   1934 2A            mov b, [d]
3896   1935             ; START FACTORS
3897   1935 D7            push a
3898   1936 11            mov a, b
3899   1937 26 0A 00      mov b, $a
3900   193A AE            div a, b ; 
3901   193B 11            mov a, b
3902   193C 27            mov b, a
3903   193D E4            pop a
3904   193E             ; END FACTORS
3905   193E 56            add b, a
3906   193F E4            pop a
3907   1940             ; END TERMS
3908   1940 E7            pop d
3909   1941 FD 3E         mov [d], bl
3910   1943             ;; num = num / 10; 
3911   1943 FA 05 00      lea d, [bp + 5] ; $num
3912   1946 DA            push d
3913   1947 FA 05 00      lea d, [bp + 5] ; $num
3914   194A 2A            mov b, [d]
3915   194B             ; START FACTORS
3916   194B D7            push a
3917   194C 11            mov a, b
3918   194D 26 0A 00      mov b, $a
3919   1950 AE            div a, b
3920   1951 27            mov b, a
3921   1952 E4            pop a
3922   1953             ; END FACTORS
3923   1953 E7            pop d
3924   1954 FD 43         mov [d], b
3925   1956             ;; i++; 
3926   1956 FA FA FF      lea d, [bp + -6] ; $i
3927   1959 2A            mov b, [d]
3928   195A D8            push b
3929   195B FD 77         inc b
3930   195D FA FA FF      lea d, [bp + -6] ; $i
3931   1960 FD 43         mov [d], b
3932   1962 E5            pop b
3933   1963 0A 0C 19      jmp _while53_cond
3934   1966             _while53_exit:
3935   1966             ;; while (i > 0) { 
3936   1966             _while54_cond:
3937   1966 FA FA FF      lea d, [bp + -6] ; $i
3938   1969 2A            mov b, [d]
3939   196A             ; START RELATIONAL
3940   196A D7            push a
3941   196B 11            mov a, b
3942   196C 26 00 00      mov b, $0
3943   196F B0            cmp a, b
3944   1970 FD 7F         sgt ; >
3945   1972 E4            pop a
3946   1973             ; END RELATIONAL
3947   1973 C0 00 00      cmp b, 0
3948   1976 C6 9F 19      je _while54_exit
3949   1979             _while54_block:
3950   1979             ;; i--; 
3951   1979 FA FA FF      lea d, [bp + -6] ; $i
3952   197C 2A            mov b, [d]
3953   197D D8            push b
3954   197E FD 7D         dec b
3955   1980 FA FA FF      lea d, [bp + -6] ; $i
3956   1983 FD 43         mov [d], b
3957   1985 E5            pop b
3958   1986             ;; putchar(digits[i]); 
3959   1986 FA FC FF      lea d, [bp + -4] ; $digits
3960   1989 D7            push a
3961   198A DA            push d
3962   198B FA FA FF      lea d, [bp + -6] ; $i
3963   198E 2A            mov b, [d]
3964   198F E7            pop d
3965   1990 5A            add d, b
3966   1991 E4            pop a
3967   1992 32            mov bl, [d]
3968   1993 A7 00         mov bh, 0
3969   1995 DD            push bl
3970   1996 07 AA 19      call putchar
3971   1999 51 01 00      add sp, 1
3972   199C 0A 66 19      jmp _while54_cond
3973   199F             _while54_exit:
3974   199F F9            leave
3975   19A0 09            ret
3976   19A1             
3977   19A1             date:
3978   19A1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3979   19A4             
3980   19A4             ; --- BEGIN INLINE ASM BLOCK
3981   19A4 19 00         mov al, 0 
3982   19A6 05 07         syscall sys_datetime
3983   19A8             ; --- END INLINE ASM BLOCK
3984   19A8             
3985   19A8 F9            leave
3986   19A9 09            ret
3987   19AA             
3988   19AA             putchar:
3989   19AA F8 00 00      enter 0 ; (push bp; mov bp, sp)
3990   19AD             
3991   19AD             ; --- BEGIN INLINE ASM BLOCK
3992   19AD FA 05 00      lea d, [bp + 5] ; $c
3993   19B0 1E            mov al, [d]
3994   19B1 23            mov ah, al
3995   19B2 07 8B 1B      call _putchar
3996   19B5             ; --- END INLINE ASM BLOCK
3997   19B5             
3998   19B5 F9            leave
3999   19B6 09            ret
4000   19B7             
4001   19B7             getchar:
4002   19B7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4003   19BA             ; $c 
4004   19BA 52 01 00      sub sp, 1
4005   19BD             
4006   19BD             ; --- BEGIN INLINE ASM BLOCK
4007   19BD 07 84 1B      call getch
4008   19C0 1A            mov al, ah
4009   19C1 FA 00 00      lea d, [bp + 0] ; $c
4010   19C4 3E            mov [d], al
4011   19C5             ; --- END INLINE ASM BLOCK
4012   19C5             
4013   19C5             ;; return c; 
4014   19C5 FA 00 00      lea d, [bp + 0] ; $c
4015   19C8 32            mov bl, [d]
4016   19C9 A7 00         mov bh, 0
4017   19CB F9            leave
4018   19CC 09            ret
4019   19CD             
4020   19CD             scann:
4021   19CD F8 00 00      enter 0 ; (push bp; mov bp, sp)
4022   19D0             ; $m 
4023   19D0 52 02 00      sub sp, 2
4024   19D3             
4025   19D3             ; --- BEGIN INLINE ASM BLOCK
4026   19D3 07 CF 1D      call scan_u16d
4027   19D6 FA FF FF      lea d, [bp + -1] ; $m
4028   19D9 43            mov [d], a
4029   19DA             ; --- END INLINE ASM BLOCK
4030   19DA             
4031   19DA             ;; return m; 
4032   19DA FA FF FF      lea d, [bp + -1] ; $m
4033   19DD 2A            mov b, [d]
4034   19DE F9            leave
4035   19DF 09            ret
4036   19E0             
4037   19E0             puts:
4038   19E0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4039   19E3             
4040   19E3             ; --- BEGIN INLINE ASM BLOCK
4041   19E3 FA 05 00      lea d, [bp + 5] ; $s
4042   19E6 15            mov a, [d]
4043   19E7 3C            mov d, a
4044   19E8 07 D5 1C      call _puts
4045   19EB 10 00 0A      mov a, $0A00
4046   19EE 05 03         syscall sys_io
4047   19F0             ; --- END INLINE ASM BLOCK
4048   19F0             
4049   19F0 F9            leave
4050   19F1 09            ret
4051   19F2             
4052   19F2             print:
4053   19F2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4054   19F5             
4055   19F5             ; --- BEGIN INLINE ASM BLOCK
4056   19F5 FA 05 00      lea d, [bp + 5] ; $s
4057   19F8 FD 2A         mov d, [d]
4058   19FA 07 D5 1C      call _puts
4059   19FD             ; --- END INLINE ASM BLOCK
4060   19FD             
4061   19FD F9            leave
4062   19FE 09            ret
4063   19FF             
4064   19FF             loadfile:
4065   19FF F8 00 00      enter 0 ; (push bp; mov bp, sp)
4066   1A02             
4067   1A02             ; --- BEGIN INLINE ASM BLOCK
4068   1A02 FA 07 00      lea d, [bp + 7] ; $destination
4069   1A05 15            mov a, [d]
4070   1A06 4F            mov di, a
4071   1A07 FA 05 00      lea d, [bp + 5] ; $filename
4072   1A0A FD 2A         mov d, [d]
4073   1A0C 19 14         mov al, 20
4074   1A0E 05 04         syscall sys_filesystem
4075   1A10             ; --- END INLINE ASM BLOCK
4076   1A10             
4077   1A10 F9            leave
4078   1A11 09            ret
4079   1A12             
4080   1A12             create_file:
4081   1A12 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4082   1A15 F9            leave
4083   1A16 09            ret
4084   1A17             
4085   1A17             delete_file:
4086   1A17 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4087   1A1A             
4088   1A1A             ; --- BEGIN INLINE ASM BLOCK
4089   1A1A FA 05 00      lea d, [bp + 5] ; $filename
4090   1A1D 19 0A         mov al, 10
4091   1A1F 05 04         syscall sys_filesystem
4092   1A21             ; --- END INLINE ASM BLOCK
4093   1A21             
4094   1A21 F9            leave
4095   1A22 09            ret
4096   1A23             
4097   1A23             fopen:
4098   1A23 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4099   1A26 F9            leave
4100   1A27 09            ret
4101   1A28             
4102   1A28             fclose:
4103   1A28 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4104   1A2B F9            leave
4105   1A2C 09            ret
4106   1A2D             
4107   1A2D             load_hex:
4108   1A2D F8 00 00      enter 0 ; (push bp; mov bp, sp)
4109   1A30             ; $temp 
4110   1A30 52 02 00      sub sp, 2
4111   1A33             ;; temp = alloc(32768); 
4112   1A33 FA FF FF      lea d, [bp + -1] ; $temp
4113   1A36 DA            push d
4114   1A37 26 00 80      mov b, $8000
4115   1A3A FD AB         swp b
4116   1A3C D8            push b
4117   1A3D 07 0F 08      call alloc
4118   1A40 51 02 00      add sp, 2
4119   1A43 E7            pop d
4120   1A44 FD 43         mov [d], b
4121   1A46             
4122   1A46             ; --- BEGIN INLINE ASM BLOCK
4123   1A46               
4124   1A46               
4125   1A46               
4126   1A46               
4127   1A46               
4128   1A46             _load_hex:
4129   1A46 D7            push a
4130   1A47 D8            push b
4131   1A48 DA            push d
4132   1A49 E2            push si
4133   1A4A E3            push di
4134   1A4B 52 00 80      sub sp, $8000      
4135   1A4E 38 00 00      mov c, 0
4136   1A51 48            mov a, sp
4137   1A52 77            inc a
4138   1A53 3C            mov d, a          
4139   1A54 07 92 1B      call _gets        
4140   1A57 4D            mov si, a
4141   1A58             __load_hex_loop:
4142   1A58 F6            lodsb             
4143   1A59 B9 00         cmp al, 0         
4144   1A5B C6 69 1A      jz __load_hex_ret
4145   1A5E 36            mov bh, al
4146   1A5F F6            lodsb
4147   1A60 2F            mov bl, al
4148   1A61 07 48 1B      call _atoi        
4149   1A64 F7            stosb             
4150   1A65 78            inc c
4151   1A66 0A 58 1A      jmp __load_hex_loop
4152   1A69             __load_hex_ret:
4153   1A69 51 00 80      add sp, $8000
4154   1A6C F0            pop di
4155   1A6D EF            pop si
4156   1A6E E7            pop d
4157   1A6F E5            pop b
4158   1A70 E4            pop a
4159   1A71             ; --- END INLINE ASM BLOCK
4160   1A71             
4161   1A71 F9            leave
4162   1A72 09            ret
4163   1A73             
4164   1A73             getparam:
4165   1A73 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4166   1A76             ; $data 
4167   1A76 52 01 00      sub sp, 1
4168   1A79             
4169   1A79             ; --- BEGIN INLINE ASM BLOCK
4170   1A79 19 04         mov al, 4
4171   1A7B FA 05 00      lea d, [bp + 5] ; $address
4172   1A7E FD 2A         mov d, [d]
4173   1A80 05 0C         syscall sys_system
4174   1A82 FA 00 00      lea d, [bp + 0] ; $data
4175   1A85 FD 3E         mov [d], bl
4176   1A87             ; --- END INLINE ASM BLOCK
4177   1A87             
4178   1A87             ;; return data; 
4179   1A87 FA 00 00      lea d, [bp + 0] ; $data
4180   1A8A 32            mov bl, [d]
4181   1A8B A7 00         mov bh, 0
4182   1A8D F9            leave
4183   1A8E 09            ret
4184   1A8F             
4185   1A8F             clear:
4186   1A8F F8 00 00      enter 0 ; (push bp; mov bp, sp)
4187   1A92             ;; print("\033[2J\033[H"); 
4188   1A92 26 A5 26      mov b, __s3 ; "\033[2J\033[H"
4189   1A95 FD AB         swp b
4190   1A97 D8            push b
4191   1A98 07 F2 19      call print
4192   1A9B 51 02 00      add sp, 2
4193   1A9E F9            leave
4194   1A9F 09            ret
4195   1AA0             
4196   1AA0             include_stdio_asm:
4197   1AA0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4198   1AA3             
4199   1AA3             ; --- BEGIN INLINE ASM BLOCK
4200   1AA3             .include "lib/asm/stdio.asm"
0001+  1AA3             ;-----------------------------------------------------------------------------
0002+  1AA3             ; stdio.s
0003+  1AA3             ;-----------------------------------------------------------------------------
0004+  1AA3             .include "lib/asm/string.asm"
0001++ 1AA3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1AA3             ; string.s
0003++ 1AA3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1AA3             
0005++ 1AA3             
0006++ 1AA3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1AA3             ; _strrev
0008++ 1AA3             ; reverse a string
0009++ 1AA3             ; D = string address
0010++ 1AA3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1AA3             ; 01234
0012++ 1AA3             _strrev:
0013++ 1AA3 4B          	pusha
0014++ 1AA4 07 EA 1A    	call _strlen	; length in C
0015++ 1AA7 12          	mov a, c
0016++ 1AA8 AF 01 00    	cmp a, 1
0017++ 1AAB D0 C5 1A    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1AAE 7D          	dec a
0019++ 1AAF FD 4E       	mov si, d	; beginning of string
0020++ 1AB1 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1AB3 59          	add d, a	; end of string
0022++ 1AB4 12          	mov a, c
0023++ 1AB5 FD 9B       	shr a		; divide by 2
0024++ 1AB7 39          	mov c, a	; C now counts the steps
0025++ 1AB8             _strrev_L0:
0026++ 1AB8 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1AB9 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1ABA 3E          	mov [d], al	; store left char into right side
0029++ 1ABB 1B          	mov al, bl
0030++ 1ABC F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1ABD 7E          	dec c
0032++ 1ABE 7F          	dec d
0033++ 1ABF C2 00 00    	cmp c, 0
0034++ 1AC2 C7 B8 1A    	jne _strrev_L0
0035++ 1AC5             _strrev_end:
0036++ 1AC5 4C          	popa
0037++ 1AC6 09          	ret
0038++ 1AC7             	
0039++ 1AC7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1AC7             ; _strchr
0041++ 1AC7             ; search string in D for char in AL
0042++ 1AC7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1AC7             _strchr:
0044++ 1AC7             _strchr_L0:
0045++ 1AC7 32          	mov bl, [d]
0046++ 1AC8 C1 00       	cmp bl, 0
0047++ 1ACA C6 D5 1A    	je _strchr_end
0048++ 1ACD BA          	cmp al, bl
0049++ 1ACE C6 D5 1A    	je _strchr_end
0050++ 1AD1 79          	inc d
0051++ 1AD2 0A C7 1A    	jmp _strchr_L0
0052++ 1AD5             _strchr_end:
0053++ 1AD5 1B          	mov al, bl
0054++ 1AD6 09          	ret
0055++ 1AD7             
0056++ 1AD7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1AD7             ; _strstr
0058++ 1AD7             ; find sub-string
0059++ 1AD7             ; str1 in SI
0060++ 1AD7             ; str2 in DI
0061++ 1AD7             ; SI points to end of source string
0062++ 1AD7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1AD7             _strstr:
0064++ 1AD7 DB          	push al
0065++ 1AD8 DA          	push d
0066++ 1AD9 E3          	push di
0067++ 1ADA             _strstr_loop:
0068++ 1ADA F3          	cmpsb					; compare a byte of the strings
0069++ 1ADB C7 E6 1A    	jne _strstr_ret
0070++ 1ADE FC 00 00    	lea d, [di + 0]
0071++ 1AE1 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1AE3 C7 DA 1A    	jne _strstr_loop				; equal chars but not at end
0073++ 1AE6             _strstr_ret:
0074++ 1AE6 F0          	pop di
0075++ 1AE7 E7          	pop d
0076++ 1AE8 E8          	pop al
0077++ 1AE9 09          	ret
0078++ 1AEA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1AEA             ; length of null terminated string
0080++ 1AEA             ; result in C
0081++ 1AEA             ; pointer in D
0082++ 1AEA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1AEA             _strlen:
0084++ 1AEA DA          	push d
0085++ 1AEB 38 00 00    	mov c, 0
0086++ 1AEE             _strlen_L1:
0087++ 1AEE BD 00       	cmp byte [d], 0
0088++ 1AF0 C6 F8 1A    	je _strlen_ret
0089++ 1AF3 79          	inc d
0090++ 1AF4 78          	inc c
0091++ 1AF5 0A EE 1A    	jmp _strlen_L1
0092++ 1AF8             _strlen_ret:
0093++ 1AF8 E7          	pop d
0094++ 1AF9 09          	ret
0095++ 1AFA             
0096++ 1AFA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1AFA             ; STRCMP
0098++ 1AFA             ; compare two strings
0099++ 1AFA             ; str1 in SI
0100++ 1AFA             ; str2 in DI
0101++ 1AFA             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1AFA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1AFA             _strcmp:
0104++ 1AFA DB          	push al
0105++ 1AFB DA          	push d
0106++ 1AFC E3          	push di
0107++ 1AFD E2          	push si
0108++ 1AFE             _strcmp_loop:
0109++ 1AFE F3          	cmpsb					; compare a byte of the strings
0110++ 1AFF C7 0A 1B    	jne _strcmp_ret
0111++ 1B02 FB FF FF    	lea d, [si +- 1]
0112++ 1B05 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1B07 C7 FE 1A    	jne _strcmp_loop				; equal chars but not at end
0114++ 1B0A             _strcmp_ret:
0115++ 1B0A EF          	pop si
0116++ 1B0B F0          	pop di
0117++ 1B0C E7          	pop d
0118++ 1B0D E8          	pop al
0119++ 1B0E 09          	ret
0120++ 1B0F             
0121++ 1B0F             
0122++ 1B0F             ; STRCPY
0123++ 1B0F             ; copy null terminated string from SI to DI
0124++ 1B0F             ; source in SI
0125++ 1B0F             ; destination in DI
0126++ 1B0F             _strcpy:
0127++ 1B0F E2          	push si
0128++ 1B10 E3          	push di
0129++ 1B11 DB          	push al
0130++ 1B12             _strcpy_L1:
0131++ 1B12 F6          	lodsb
0132++ 1B13 F7          	stosb
0133++ 1B14 B9 00       	cmp al, 0
0134++ 1B16 C7 12 1B    	jne _strcpy_L1
0135++ 1B19             _strcpy_end:
0136++ 1B19 E8          	pop al
0137++ 1B1A F0          	pop di
0138++ 1B1B EF          	pop si
0139++ 1B1C 09          	ret
0140++ 1B1D             
0141++ 1B1D             ; STRCAT
0142++ 1B1D             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1B1D             ; source in SI
0144++ 1B1D             ; destination in DI
0145++ 1B1D             _strcat:
0146++ 1B1D E2          	push si
0147++ 1B1E E3          	push di
0148++ 1B1F D7          	push a
0149++ 1B20 DA          	push d
0150++ 1B21 50          	mov a, di
0151++ 1B22 3C          	mov d, a
0152++ 1B23             _strcat_goto_end_L1:
0153++ 1B23 BD 00       	cmp byte[d], 0
0154++ 1B25 C6 2C 1B    	je _strcat_start
0155++ 1B28 79          	inc d
0156++ 1B29 0A 23 1B    	jmp _strcat_goto_end_L1
0157++ 1B2C             _strcat_start:
0158++ 1B2C FD 50       	mov di, d
0159++ 1B2E             _strcat_L1:
0160++ 1B2E F6          	lodsb
0161++ 1B2F F7          	stosb
0162++ 1B30 B9 00       	cmp al, 0
0163++ 1B32 C7 2E 1B    	jne _strcat_L1
0164++ 1B35             _strcat_end:
0165++ 1B35 E7          	pop d
0166++ 1B36 E4          	pop a
0167++ 1B37 F0          	pop di
0168++ 1B38 EF          	pop si
0169++ 1B39 09          	ret
0170++ 1B3A             
0171++ 1B3A             
0005+  1B3A             
0006+  1B3A             ;-----------------------------------------------------------------------------
0007+  1B3A             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  1B3A             ; ASCII in BL
0009+  1B3A             ; result in AL
0010+  1B3A             ; ascii for F = 0100 0110
0011+  1B3A             ; ascii for 9 = 0011 1001
0012+  1B3A             ;-----------------------------------------------------------------------------
0013+  1B3A             hex_ascii_encode:
0014+  1B3A 1B            mov al, bl
0015+  1B3B 93 40         test al, $40        ; test if letter or number
0016+  1B3D C7 43 1B      jnz hex_letter
0017+  1B40 87 0F         and al, $0F        ; get number
0018+  1B42 09            ret
0019+  1B43             hex_letter:
0020+  1B43 87 0F         and al, $0F        ; get letter
0021+  1B45 6A 09         add al, 9
0022+  1B47 09            ret
0023+  1B48             
0024+  1B48             ;-----------------------------------------------------------------------------
0025+  1B48             ; ATOI
0026+  1B48             ; 2 letter hex string in B
0027+  1B48             ; 8bit integer returned in AL
0028+  1B48             ;-----------------------------------------------------------------------------
0029+  1B48             _atoi:
0030+  1B48 D8            push b
0031+  1B49 07 3A 1B      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  1B4C 30            mov bl, bh
0033+  1B4D DB            push al          ; save a
0034+  1B4E 07 3A 1B      call hex_ascii_encode
0035+  1B51 EA            pop bl  
0036+  1B52 FD 9E 04      shl al, 4
0037+  1B55 8C            or al, bl
0038+  1B56 E5            pop b
0039+  1B57 09            ret  
0040+  1B58             
0041+  1B58             ;-----------------------------------------------------------------------------
0042+  1B58             ; scanf
0043+  1B58             ; no need for explanations!
0044+  1B58             ;-----------------------------------------------------------------------------
0045+  1B58             scanf:
0046+  1B58 09            ret
0047+  1B59             
0048+  1B59             ;-----------------------------------------------------------------------------
0049+  1B59             ; ITOA
0050+  1B59             ; 8bit value in BL
0051+  1B59             ; 2 byte ASCII result in A
0052+  1B59             ;-----------------------------------------------------------------------------
0053+  1B59             _itoa:
0054+  1B59 DA            push d
0055+  1B5A D8            push b
0056+  1B5B A7 00         mov bh, 0
0057+  1B5D FD A4 04      shr bl, 4  
0058+  1B60 74            mov d, b
0059+  1B61 1F 09 1E      mov al, [d + s_hex_digits]
0060+  1B64 23            mov ah, al
0061+  1B65               
0062+  1B65 E5            pop b
0063+  1B66 D8            push b
0064+  1B67 A7 00         mov bh, 0
0065+  1B69 FD 87 0F      and bl, $0F
0066+  1B6C 74            mov d, b
0067+  1B6D 1F 09 1E      mov al, [d + s_hex_digits]
0068+  1B70 E5            pop b
0069+  1B71 E7            pop d
0070+  1B72 09            ret
0071+  1B73             
0072+  1B73             ;-----------------------------------------------------------------------------
0073+  1B73             ; HEX STRING TO BINARY
0074+  1B73             ; di = destination address
0075+  1B73             ; si = source
0076+  1B73             ;-----------------------------------------------------------------------------
0077+  1B73             _hex_to_int:
0078+  1B73             _hex_to_int_L1:
0079+  1B73 F6            lodsb          ; load from [SI] to AL
0080+  1B74 B9 00         cmp al, 0        ; check if ASCII 0
0081+  1B76 C6 83 1B      jz _hex_to_int_ret
0082+  1B79 36            mov bh, al
0083+  1B7A F6            lodsb
0084+  1B7B 2F            mov bl, al
0085+  1B7C 07 48 1B      call _atoi        ; convert ASCII byte in B to int (to AL)
0086+  1B7F F7            stosb          ; store AL to [DI]
0087+  1B80 0A 73 1B      jmp _hex_to_int_L1
0088+  1B83             _hex_to_int_ret:
0089+  1B83 09            ret    
0090+  1B84             
0091+  1B84             ;-----------------------------------------------------------------------------
0092+  1B84             ; GETCHAR
0093+  1B84             ; char in ah
0094+  1B84             ;-----------------------------------------------------------------------------
0095+  1B84             getch:
0096+  1B84 DB            push al
0097+  1B85             getch_retry:
0098+  1B85 19 01         mov al, 1
0099+  1B87 05 03         syscall sys_io      ; receive in AH
0100+  1B89 E8            pop al
0101+  1B8A 09            ret
0102+  1B8B             
0103+  1B8B             ;-----------------------------------------------------------------------------
0104+  1B8B             ; PUTCHAR
0105+  1B8B             ; char in ah
0106+  1B8B             ;-----------------------------------------------------------------------------
0107+  1B8B             _putchar:
0108+  1B8B D7            push a
0109+  1B8C 19 00         mov al, 0
0110+  1B8E 05 03         syscall sys_io      ; char in AH
0111+  1B90 E4            pop a
0112+  1B91 09            ret
0113+  1B92             
0114+  1B92             ;-----------------------------------------------------------------------------
0115+  1B92             ;; INPUT A STRING
0116+  1B92             ;; terminates with null
0117+  1B92             ;; pointer in D
0118+  1B92             ;-----------------------------------------------------------------------------
0119+  1B92             _gets:
0120+  1B92 D7            push a
0121+  1B93 DA            push d
0122+  1B94             _gets_loop:
0123+  1B94 19 01         mov al, 1
0124+  1B96 05 03         syscall sys_io      ; receive in AH
0125+  1B98 B9 00         cmp al, 0        ; check error code (AL)
0126+  1B9A C6 94 1B      je _gets_loop      ; if no char received, retry
0127+  1B9D             
0128+  1B9D 76 1B         cmp ah, 27
0129+  1B9F C6 C0 1B      je _gets_ansi_esc
0130+  1BA2 76 0A         cmp ah, $0A        ; LF
0131+  1BA4 C6 2B 1C      je _gets_end
0132+  1BA7 76 0D         cmp ah, $0D        ; CR
0133+  1BA9 C6 2B 1C      je _gets_end
0134+  1BAC 76 5C         cmp ah, $5C        ; '\\'
0135+  1BAE C6 EC 1B      je _gets_escape
0136+  1BB1               
0137+  1BB1 76 08         cmp ah, $08      ; check for backspace
0138+  1BB3 C6 BC 1B      je _gets_backspace
0139+  1BB6             
0140+  1BB6 1A            mov al, ah
0141+  1BB7 3E            mov [d], al
0142+  1BB8 79            inc d
0143+  1BB9 0A 94 1B      jmp _gets_loop
0144+  1BBC             _gets_backspace:
0145+  1BBC 7F            dec d
0146+  1BBD 0A 94 1B      jmp _gets_loop
0147+  1BC0             _gets_ansi_esc:
0148+  1BC0 19 01         mov al, 1
0149+  1BC2 05 03         syscall sys_io        ; receive in AH without echo
0150+  1BC4 B9 00         cmp al, 0          ; check error code (AL)
0151+  1BC6 C6 C0 1B      je _gets_ansi_esc    ; if no char received, retry
0152+  1BC9 76 5B         cmp ah, '['
0153+  1BCB C7 94 1B      jne _gets_loop
0154+  1BCE             _gets_ansi_esc_2:
0155+  1BCE 19 01         mov al, 1
0156+  1BD0 05 03         syscall sys_io          ; receive in AH without echo
0157+  1BD2 B9 00         cmp al, 0            ; check error code (AL)
0158+  1BD4 C6 CE 1B      je _gets_ansi_esc_2  ; if no char received, retry
0159+  1BD7 76 44         cmp ah, 'D'
0160+  1BD9 C6 E4 1B      je _gets_left_arrow
0161+  1BDC 76 43         cmp ah, 'C'
0162+  1BDE C6 E8 1B      je _gets_right_arrow
0163+  1BE1 0A 94 1B      jmp _gets_loop
0164+  1BE4             _gets_left_arrow:
0165+  1BE4 7F            dec d
0166+  1BE5 0A 94 1B      jmp _gets_loop
0167+  1BE8             _gets_right_arrow:
0168+  1BE8 79            inc d
0169+  1BE9 0A 94 1B      jmp _gets_loop
0170+  1BEC             _gets_escape:
0171+  1BEC 19 01         mov al, 1
0172+  1BEE 05 03         syscall sys_io      ; receive in AH
0173+  1BF0 B9 00         cmp al, 0        ; check error code (AL)
0174+  1BF2 C6 EC 1B      je _gets_escape      ; if no char received, retry
0175+  1BF5 76 6E         cmp ah, 'n'
0176+  1BF7 C6 16 1C      je _gets_LF
0177+  1BFA 76 72         cmp ah, 'r'
0178+  1BFC C6 1D 1C      je _gets_CR
0179+  1BFF 76 30         cmp ah, '0'
0180+  1C01 C6 24 1C      je _gets_NULL
0181+  1C04 76 5C         cmp ah, $5C  ; '\'
0182+  1C06 C6 0F 1C      je _gets_slash
0183+  1C09 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0184+  1C0A 3E            mov [d], al
0185+  1C0B 79            inc d
0186+  1C0C 0A 94 1B      jmp _gets_loop
0187+  1C0F             _gets_slash:
0188+  1C0F 19 5C         mov al, $5C
0189+  1C11 3E            mov [d], al
0190+  1C12 79            inc d
0191+  1C13 0A 94 1B      jmp _gets_loop
0192+  1C16             _gets_LF:
0193+  1C16 19 0A         mov al, $0A
0194+  1C18 3E            mov [d], al
0195+  1C19 79            inc d
0196+  1C1A 0A 94 1B      jmp _gets_loop
0197+  1C1D             _gets_CR:
0198+  1C1D 19 0D         mov al, $0D
0199+  1C1F 3E            mov [d], al
0200+  1C20 79            inc d
0201+  1C21 0A 94 1B      jmp _gets_loop
0202+  1C24             _gets_NULL:
0203+  1C24 19 00         mov al, $00
0204+  1C26 3E            mov [d], al
0205+  1C27 79            inc d
0206+  1C28 0A 94 1B      jmp _gets_loop
0207+  1C2B             _gets_end:
0208+  1C2B 19 00         mov al, 0
0209+  1C2D 3E            mov [d], al        ; terminate string
0210+  1C2E E7            pop d
0211+  1C2F E4            pop a
0212+  1C30 09            ret
0213+  1C31             
0214+  1C31             ;-----------------------------------------------------------------------------
0215+  1C31             ;; INPUT TEXT
0216+  1C31             ;; terminated with CTRL+D
0217+  1C31             ;; pointer in D
0218+  1C31             ;-----------------------------------------------------------------------------
0219+  1C31             _gettxt:
0220+  1C31 D7            push a
0221+  1C32 DA            push d
0222+  1C33             _gettxt_loop:
0223+  1C33 19 01         mov al, 1
0224+  1C35 05 03         syscall sys_io      ; receive in AH
0225+  1C37 B9 00         cmp al, 0        ; check error code (AL)
0226+  1C39 C6 33 1C      je _gettxt_loop    ; if no char received, retry
0227+  1C3C 76 04         cmp ah, 4      ; EOT
0228+  1C3E C6 7C 1C      je _gettxt_end
0229+  1C41 76 08         cmp ah, $08      ; check for backspace
0230+  1C43 C6 78 1C      je _gettxt_backspace
0231+  1C46 76 5C         cmp ah, $5C        ; '\'
0232+  1C48 C6 51 1C      je _gettxt_escape
0233+  1C4B 1A            mov al, ah
0234+  1C4C 3E            mov [d], al
0235+  1C4D 79            inc d
0236+  1C4E 0A 33 1C      jmp _gettxt_loop
0237+  1C51             _gettxt_escape:
0238+  1C51 19 01         mov al, 1
0239+  1C53 05 03         syscall sys_io      ; receive in AH
0240+  1C55 B9 00         cmp al, 0        ; check error code (AL)
0241+  1C57 C6 51 1C      je _gettxt_escape    ; if no char received, retry
0242+  1C5A 76 6E         cmp ah, 'n'
0243+  1C5C C6 6A 1C      je _gettxt_LF
0244+  1C5F 76 72         cmp ah, 'r'
0245+  1C61 C6 71 1C      je _gettxt_CR
0246+  1C64 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0247+  1C65 3E            mov [d], al
0248+  1C66 79            inc d
0249+  1C67 0A 33 1C      jmp _gettxt_loop
0250+  1C6A             _gettxt_LF:
0251+  1C6A 19 0A         mov al, $0A
0252+  1C6C 3E            mov [d], al
0253+  1C6D 79            inc d
0254+  1C6E 0A 33 1C      jmp _gettxt_loop
0255+  1C71             _gettxt_CR:
0256+  1C71 19 0D         mov al, $0D
0257+  1C73 3E            mov [d], al
0258+  1C74 79            inc d
0259+  1C75 0A 33 1C      jmp _gettxt_loop
0260+  1C78             _gettxt_backspace:
0261+  1C78 7F            dec d
0262+  1C79 0A 33 1C      jmp _gettxt_loop
0263+  1C7C             _gettxt_end:
0264+  1C7C 19 00         mov al, 0
0265+  1C7E 3E            mov [d], al        ; terminate string
0266+  1C7F E7            pop d
0267+  1C80 E4            pop a
0268+  1C81 09            ret
0269+  1C82             
0270+  1C82             ;-----------------------------------------------------------------------------
0271+  1C82             ; PRINT NEW LINE
0272+  1C82             ;-----------------------------------------------------------------------------
0273+  1C82             printnl:
0274+  1C82 D7            push a
0275+  1C83 10 00 0A      mov a, $0A00
0276+  1C86 05 03         syscall sys_io
0277+  1C88 10 00 0D      mov a, $0D00
0278+  1C8B 05 03         syscall sys_io
0279+  1C8D E4            pop a
0280+  1C8E 09            ret
0281+  1C8F             
0282+  1C8F             ;-----------------------------------------------------------------------------
0283+  1C8F             ; _strtoint
0284+  1C8F             ; 4 digit hex string number in d
0285+  1C8F             ; integer returned in A
0286+  1C8F             ;-----------------------------------------------------------------------------
0287+  1C8F             _strtointx:
0288+  1C8F D8            push b
0289+  1C90 32            mov bl, [d]
0290+  1C91 37            mov bh, bl
0291+  1C92 33 01 00      mov bl, [d + 1]
0292+  1C95 07 48 1B      call _atoi        ; convert to int in AL
0293+  1C98 23            mov ah, al        ; move to AH
0294+  1C99 33 02 00      mov bl, [d + 2]
0295+  1C9C 37            mov bh, bl
0296+  1C9D 33 03 00      mov bl, [d + 3]
0297+  1CA0 07 48 1B      call _atoi        ; convert to int in AL
0298+  1CA3 E5            pop b
0299+  1CA4 09            ret
0300+  1CA5             
0301+  1CA5             ;-----------------------------------------------------------------------------
0302+  1CA5             ; _strtoint
0303+  1CA5             ; 5 digit base10 string number in d
0304+  1CA5             ; integer returned in A
0305+  1CA5             ;-----------------------------------------------------------------------------
0306+  1CA5             _strtoint:
0307+  1CA5 E2            push si
0308+  1CA6 D8            push b
0309+  1CA7 D9            push c
0310+  1CA8 DA            push d
0311+  1CA9 07 EA 1A      call _strlen      ; get string length in C
0312+  1CAC 7E            dec c
0313+  1CAD FD 4E         mov si, d
0314+  1CAF 12            mov a, c
0315+  1CB0 FD 99         shl a
0316+  1CB2 3B 21 1E      mov d, table_power
0317+  1CB5 59            add d, a
0318+  1CB6 38 00 00      mov c, 0
0319+  1CB9             _strtoint_L0:
0320+  1CB9 F6            lodsb      ; load ASCII to al
0321+  1CBA B9 00         cmp al, 0
0322+  1CBC C6 CF 1C      je _strtoint_end
0323+  1CBF 6F 30         sub al, $30    ; make into integer
0324+  1CC1 22 00         mov ah, 0
0325+  1CC3 2A            mov b, [d]
0326+  1CC4 AC            mul a, b      ; result in B since it fits in 16bits
0327+  1CC5 11            mov a, b
0328+  1CC6 28            mov b, c
0329+  1CC7 54            add a, b
0330+  1CC8 39            mov c, a
0331+  1CC9 63 02 00      sub d, 2
0332+  1CCC 0A B9 1C      jmp _strtoint_L0
0333+  1CCF             _strtoint_end:
0334+  1CCF 12            mov a, c
0335+  1CD0 E7            pop d
0336+  1CD1 E6            pop c
0337+  1CD2 E5            pop b
0338+  1CD3 EF            pop si
0339+  1CD4 09            ret
0340+  1CD5             
0341+  1CD5             ;-----------------------------------------------------------------------------
0342+  1CD5             ; PRINT NULL TERMINATED STRING
0343+  1CD5             ; pointer in D
0344+  1CD5             ;-----------------------------------------------------------------------------
0345+  1CD5             _puts:
0346+  1CD5 D7            push a
0347+  1CD6 DA            push d
0348+  1CD7             _puts_L1:
0349+  1CD7 1E            mov al, [d]
0350+  1CD8 B9 00         cmp al, 0
0351+  1CDA C6 E6 1C      jz _puts_END
0352+  1CDD 23            mov ah, al
0353+  1CDE 19 00         mov al, 0
0354+  1CE0 05 03         syscall sys_io
0355+  1CE2 79            inc d
0356+  1CE3 0A D7 1C      jmp _puts_L1
0357+  1CE6             _puts_END:
0358+  1CE6 E7            pop d
0359+  1CE7 E4            pop a
0360+  1CE8 09            ret
0361+  1CE9             
0362+  1CE9             ;-----------------------------------------------------------------------------
0363+  1CE9             ; PRINT N SIZE STRING
0364+  1CE9             ; pointer in D
0365+  1CE9             ; size in C
0366+  1CE9             ;-----------------------------------------------------------------------------
0367+  1CE9             _putsn:
0368+  1CE9 DB            push al
0369+  1CEA DA            push d
0370+  1CEB D9            push c
0371+  1CEC             _putsn_L0:
0372+  1CEC 1E            mov al, [d]
0373+  1CED 23            mov ah, al
0374+  1CEE 19 00         mov al, 0
0375+  1CF0 05 03         syscall sys_io
0376+  1CF2 79            inc d
0377+  1CF3 7E            dec c  
0378+  1CF4 C2 00 00      cmp c, 0
0379+  1CF7 C7 EC 1C      jne _putsn_L0
0380+  1CFA             _putsn_end:
0381+  1CFA E6            pop c
0382+  1CFB E7            pop d
0383+  1CFC E8            pop al
0384+  1CFD 09            ret
0385+  1CFE             
0386+  1CFE             ;-----------------------------------------------------------------------------
0387+  1CFE             ; print 16bit decimal number
0388+  1CFE             ; input number in A
0389+  1CFE             ;-----------------------------------------------------------------------------
0390+  1CFE             print_u16d:
0391+  1CFE D7            push a
0392+  1CFF D8            push b
0393+  1D00 26 10 27      mov b, 10000
0394+  1D03 AE            div a, b      ; get 10000's coeff.
0395+  1D04 07 26 1D      call print_number
0396+  1D07 11            mov a, b
0397+  1D08 26 E8 03      mov b, 1000
0398+  1D0B AE            div a, b      ; get 1000's coeff.
0399+  1D0C 07 26 1D      call print_number
0400+  1D0F 11            mov a, b
0401+  1D10 26 64 00      mov b, 100
0402+  1D13 AE            div a, b
0403+  1D14 07 26 1D      call print_number
0404+  1D17 11            mov a, b
0405+  1D18 26 0A 00      mov b, 10
0406+  1D1B AE            div a, b
0407+  1D1C 07 26 1D      call print_number
0408+  1D1F 1B            mov al, bl      ; 1's coeff in bl
0409+  1D20 07 26 1D      call print_number
0410+  1D23 E5            pop b
0411+  1D24 E4            pop a
0412+  1D25 09            ret
0413+  1D26             
0414+  1D26             ;-----------------------------------------------------------------------------
0415+  1D26             ; print AL
0416+  1D26             ;-----------------------------------------------------------------------------
0417+  1D26             print_number:
0418+  1D26 6A 30         add al, $30
0419+  1D28 23            mov ah, al
0420+  1D29 07 8B 1B      call _putchar
0421+  1D2C 09            ret
0422+  1D2D             
0423+  1D2D             ;-----------------------------------------------------------------------------
0424+  1D2D             ; PRINT 16BIT HEX INTEGER
0425+  1D2D             ; integer value in reg B
0426+  1D2D             ;-----------------------------------------------------------------------------
0427+  1D2D             print_u16x:
0428+  1D2D D7            push a
0429+  1D2E D8            push b
0430+  1D2F DD            push bl
0431+  1D30 30            mov bl, bh
0432+  1D31 07 59 1B      call _itoa        ; convert bh to char in A
0433+  1D34 2F            mov bl, al        ; save al
0434+  1D35 19 00         mov al, 0
0435+  1D37 05 03         syscall sys_io        ; display AH
0436+  1D39 24            mov ah, bl        ; retrieve al
0437+  1D3A 19 00         mov al, 0
0438+  1D3C 05 03         syscall sys_io        ; display AL
0439+  1D3E             
0440+  1D3E EA            pop bl
0441+  1D3F 07 59 1B      call _itoa        ; convert bh to char in A
0442+  1D42 2F            mov bl, al        ; save al
0443+  1D43 19 00         mov al, 0
0444+  1D45 05 03         syscall sys_io        ; display AH
0445+  1D47 24            mov ah, bl        ; retrieve al
0446+  1D48 19 00         mov al, 0
0447+  1D4A 05 03         syscall sys_io        ; display AL
0448+  1D4C             
0449+  1D4C E5            pop b
0450+  1D4D E4            pop a
0451+  1D4E 09            ret
0452+  1D4F             
0453+  1D4F             ;-----------------------------------------------------------------------------
0454+  1D4F             ; INPUT 16BIT HEX INTEGER
0455+  1D4F             ; read 16bit integer into A
0456+  1D4F             ;-----------------------------------------------------------------------------
0457+  1D4F             scan_u16x:
0458+  1D4F F8 10 00      enter 16
0459+  1D52 D8            push b
0460+  1D53 DA            push d
0461+  1D54             
0462+  1D54 FA F1 FF      lea d, [bp + -15]
0463+  1D57 07 92 1B      call _gets        ; get number
0464+  1D5A             
0465+  1D5A 32            mov bl, [d]
0466+  1D5B 37            mov bh, bl
0467+  1D5C 33 01 00      mov bl, [d + 1]
0468+  1D5F 07 48 1B      call _atoi        ; convert to int in AL
0469+  1D62 23            mov ah, al        ; move to AH
0470+  1D63             
0471+  1D63 33 02 00      mov bl, [d + 2]
0472+  1D66 37            mov bh, bl
0473+  1D67 33 03 00      mov bl, [d + 3]
0474+  1D6A 07 48 1B      call _atoi        ; convert to int in AL
0475+  1D6D             
0476+  1D6D E7            pop d
0477+  1D6E E5            pop b
0478+  1D6F F9            leave
0479+  1D70 09            ret
0480+  1D71             
0481+  1D71             ;-----------------------------------------------------------------------------
0482+  1D71             ; PRINT 8bit HEX INTEGER
0483+  1D71             ; integer value in reg bl
0484+  1D71             ;-----------------------------------------------------------------------------
0485+  1D71             print_u8x:
0486+  1D71 D7            push a
0487+  1D72 DD            push bl
0488+  1D73             
0489+  1D73 07 59 1B      call _itoa        ; convert bl to char in A
0490+  1D76 2F            mov bl, al        ; save al
0491+  1D77 19 00         mov al, 0
0492+  1D79 05 03         syscall sys_io        ; display AH
0493+  1D7B 24            mov ah, bl        ; retrieve al
0494+  1D7C 19 00         mov al, 0
0495+  1D7E 05 03         syscall sys_io        ; display AL
0496+  1D80             
0497+  1D80 EA            pop bl
0498+  1D81 E4            pop a
0499+  1D82 09            ret
0500+  1D83             
0501+  1D83             ;-----------------------------------------------------------------------------
0502+  1D83             ; print 8bit decimal unsigned number
0503+  1D83             ; input number in AL
0504+  1D83             ;-----------------------------------------------------------------------------
0505+  1D83             print_u8d:
0506+  1D83 D7            push a
0507+  1D84 D8            push b
0508+  1D85             
0509+  1D85 22 00         mov ah, 0
0510+  1D87 26 64 00      mov b, 100
0511+  1D8A AE            div a, b
0512+  1D8B D8            push b      ; save remainder
0513+  1D8C B9 00         cmp al, 0
0514+  1D8E C6 98 1D      je skip100
0515+  1D91 6A 30         add al, $30
0516+  1D93 23            mov ah, al
0517+  1D94 19 00         mov al, 0
0518+  1D96 05 03         syscall sys_io  ; print coeff
0519+  1D98             skip100:
0520+  1D98 E4            pop a
0521+  1D99 22 00         mov ah, 0
0522+  1D9B 26 0A 00      mov b, 10
0523+  1D9E AE            div a, b
0524+  1D9F D8            push b      ; save remainder
0525+  1DA0 B9 00         cmp al, 0
0526+  1DA2 C6 AC 1D      je skip10
0527+  1DA5 6A 30         add al, $30
0528+  1DA7 23            mov ah, al
0529+  1DA8 19 00         mov al, 0
0530+  1DAA 05 03         syscall sys_io  ; print coeff
0531+  1DAC             skip10:
0532+  1DAC E4            pop a
0533+  1DAD 1B            mov al, bl
0534+  1DAE 6A 30         add al, $30
0535+  1DB0 23            mov ah, al
0536+  1DB1 19 00         mov al, 0
0537+  1DB3 05 03         syscall sys_io  ; print coeff
0538+  1DB5 E5            pop b
0539+  1DB6 E4            pop a
0540+  1DB7 09            ret
0541+  1DB8             
0542+  1DB8             ;-----------------------------------------------------------------------------
0543+  1DB8             ; INPUT 8BIT HEX INTEGER
0544+  1DB8             ; read 8bit integer into AL
0545+  1DB8             ;-----------------------------------------------------------------------------
0546+  1DB8             scan_u8x:
0547+  1DB8 F8 04 00      enter 4
0548+  1DBB D8            push b
0549+  1DBC DA            push d
0550+  1DBD             
0551+  1DBD FA FD FF      lea d, [bp + -3]
0552+  1DC0 07 92 1B      call _gets        ; get number
0553+  1DC3             
0554+  1DC3 32            mov bl, [d]
0555+  1DC4 37            mov bh, bl
0556+  1DC5 33 01 00      mov bl, [d + 1]
0557+  1DC8 07 48 1B      call _atoi        ; convert to int in AL
0558+  1DCB             
0559+  1DCB E7            pop d
0560+  1DCC E5            pop b
0561+  1DCD F9            leave
0562+  1DCE 09            ret
0563+  1DCF             
0564+  1DCF             ;-----------------------------------------------------------------------------
0565+  1DCF             ; input decimal number
0566+  1DCF             ; result in A
0567+  1DCF             ; 655'\0'
0568+  1DCF             ; low--------high
0569+  1DCF             ;-----------------------------------------------------------------------------
0570+  1DCF             scan_u16d:
0571+  1DCF F8 08 00      enter 8
0572+  1DD2 E2            push si
0573+  1DD3 D8            push b
0574+  1DD4 D9            push c
0575+  1DD5 DA            push d
0576+  1DD6 FA F9 FF      lea d, [bp +- 7]
0577+  1DD9 07 92 1B      call _gets
0578+  1DDC 07 EA 1A      call _strlen      ; get string length in C
0579+  1DDF 7E            dec c
0580+  1DE0 FD 4E         mov si, d
0581+  1DE2 12            mov a, c
0582+  1DE3 FD 99         shl a
0583+  1DE5 3B 21 1E      mov d, table_power
0584+  1DE8 59            add d, a
0585+  1DE9 38 00 00      mov c, 0
0586+  1DEC             mul_loop:
0587+  1DEC F6            lodsb      ; load ASCII to al
0588+  1DED B9 00         cmp al, 0
0589+  1DEF C6 02 1E      je mul_exit
0590+  1DF2 6F 30         sub al, $30    ; make into integer
0591+  1DF4 22 00         mov ah, 0
0592+  1DF6 2A            mov b, [d]
0593+  1DF7 AC            mul a, b      ; result in B since it fits in 16bits
0594+  1DF8 11            mov a, b
0595+  1DF9 28            mov b, c
0596+  1DFA 54            add a, b
0597+  1DFB 39            mov c, a
0598+  1DFC 63 02 00      sub d, 2
0599+  1DFF 0A EC 1D      jmp mul_loop
0600+  1E02             mul_exit:
0601+  1E02 12            mov a, c
0602+  1E03 E7            pop d
0603+  1E04 E6            pop c
0604+  1E05 E5            pop b
0605+  1E06 EF            pop si
0606+  1E07 F9            leave
0607+  1E08 09            ret
0608+  1E09             
0609+  1E09 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0609+  1E0D 34 35 36 37 
0609+  1E11 38 39 41 42 
0609+  1E15 43 44 45 46 
0610+  1E19 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0610+  1E1D 1B 5B 48 00 
0611+  1E21             
0612+  1E21             table_power:
0613+  1E21 01 00         .dw 1
0614+  1E23 0A 00         .dw 10
0615+  1E25 64 00         .dw 100
0616+  1E27 E8 03         .dw 1000
0617+  1E29 10 27         .dw 100004201   1E2B             ; --- END INLINE ASM BLOCK
4202   1E2B             
4203   1E2B F9            leave
4204   1E2C 09            ret
4205   1E2D             
4206   1E2D             test0:
4207   1E2D F8 00 00      enter 0 ; (push bp; mov bp, sp)
4208   1E30             ; $result 
4209   1E30             ; $pass 
4210   1E30 10 01 00      mov a, $1
4211   1E33 45 FD FF      mov [bp + -3], a
4212   1E36             ; $c 
4213   1E36             ; $i 
4214   1E36             ; $ca 
4215   1E36             ; $ia 
4216   1E36 52 16 00      sub sp, 22
4217   1E39             ;; c = 'A'; 
4218   1E39 FA FC FF      lea d, [bp + -4] ; $c
4219   1E3C DA            push d
4220   1E3D 26 41 00      mov b, $41
4221   1E40 E7            pop d
4222   1E41 FD 3E         mov [d], bl
4223   1E43             ;; i = 55; 
4224   1E43 FA FA FF      lea d, [bp + -6] ; $i
4225   1E46 DA            push d
4226   1E47 26 37 00      mov b, $37
4227   1E4A E7            pop d
4228   1E4B FD 43         mov [d], b
4229   1E4D             ;; ca[0] = 'A'; 
4230   1E4D FA F5 FF      lea d, [bp + -11] ; $ca
4231   1E50 D7            push a
4232   1E51 DA            push d
4233   1E52 26 00 00      mov b, $0
4234   1E55 E7            pop d
4235   1E56 5A            add d, b
4236   1E57 E4            pop a
4237   1E58 DA            push d
4238   1E59 26 41 00      mov b, $41
4239   1E5C E7            pop d
4240   1E5D FD 3E         mov [d], bl
4241   1E5F             ;; ca[1] = 'B'; 
4242   1E5F FA F5 FF      lea d, [bp + -11] ; $ca
4243   1E62 D7            push a
4244   1E63 DA            push d
4245   1E64 26 01 00      mov b, $1
4246   1E67 E7            pop d
4247   1E68 5A            add d, b
4248   1E69 E4            pop a
4249   1E6A DA            push d
4250   1E6B 26 42 00      mov b, $42
4251   1E6E E7            pop d
4252   1E6F FD 3E         mov [d], bl
4253   1E71             ;; ca[2] = 'C'; 
4254   1E71 FA F5 FF      lea d, [bp + -11] ; $ca
4255   1E74 D7            push a
4256   1E75 DA            push d
4257   1E76 26 02 00      mov b, $2
4258   1E79 E7            pop d
4259   1E7A 5A            add d, b
4260   1E7B E4            pop a
4261   1E7C DA            push d
4262   1E7D 26 43 00      mov b, $43
4263   1E80 E7            pop d
4264   1E81 FD 3E         mov [d], bl
4265   1E83             ;; ca[3] = 'D'; 
4266   1E83 FA F5 FF      lea d, [bp + -11] ; $ca
4267   1E86 D7            push a
4268   1E87 DA            push d
4269   1E88 26 03 00      mov b, $3
4270   1E8B E7            pop d
4271   1E8C 5A            add d, b
4272   1E8D E4            pop a
4273   1E8E DA            push d
4274   1E8F 26 44 00      mov b, $44
4275   1E92 E7            pop d
4276   1E93 FD 3E         mov [d], bl
4277   1E95             ;; ca[4] = 'E'; 
4278   1E95 FA F5 FF      lea d, [bp + -11] ; $ca
4279   1E98 D7            push a
4280   1E99 DA            push d
4281   1E9A 26 04 00      mov b, $4
4282   1E9D E7            pop d
4283   1E9E 5A            add d, b
4284   1E9F E4            pop a
4285   1EA0 DA            push d
4286   1EA1 26 45 00      mov b, $45
4287   1EA4 E7            pop d
4288   1EA5 FD 3E         mov [d], bl
4289   1EA7             ;; ia[0] = 0; 
4290   1EA7 FA EB FF      lea d, [bp + -21] ; $ia
4291   1EAA D7            push a
4292   1EAB DA            push d
4293   1EAC 26 00 00      mov b, $0
4294   1EAF E7            pop d
4295   1EB0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4296   1EB4 E4            pop a
4297   1EB5 DA            push d
4298   1EB6 26 00 00      mov b, $0
4299   1EB9 E7            pop d
4300   1EBA FD 43         mov [d], b
4301   1EBC             ;; ia[1] = 1; 
4302   1EBC FA EB FF      lea d, [bp + -21] ; $ia
4303   1EBF D7            push a
4304   1EC0 DA            push d
4305   1EC1 26 01 00      mov b, $1
4306   1EC4 E7            pop d
4307   1EC5 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4308   1EC9 E4            pop a
4309   1ECA DA            push d
4310   1ECB 26 01 00      mov b, $1
4311   1ECE E7            pop d
4312   1ECF FD 43         mov [d], b
4313   1ED1             ;; ia[2] = 2; 
4314   1ED1 FA EB FF      lea d, [bp + -21] ; $ia
4315   1ED4 D7            push a
4316   1ED5 DA            push d
4317   1ED6 26 02 00      mov b, $2
4318   1ED9 E7            pop d
4319   1EDA FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4320   1EDE E4            pop a
4321   1EDF DA            push d
4322   1EE0 26 02 00      mov b, $2
4323   1EE3 E7            pop d
4324   1EE4 FD 43         mov [d], b
4325   1EE6             ;; ia[3] = 3; 
4326   1EE6 FA EB FF      lea d, [bp + -21] ; $ia
4327   1EE9 D7            push a
4328   1EEA DA            push d
4329   1EEB 26 03 00      mov b, $3
4330   1EEE E7            pop d
4331   1EEF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4332   1EF3 E4            pop a
4333   1EF4 DA            push d
4334   1EF5 26 03 00      mov b, $3
4335   1EF8 E7            pop d
4336   1EF9 FD 43         mov [d], b
4337   1EFB             ;; ia[4] = 4; 
4338   1EFB FA EB FF      lea d, [bp + -21] ; $ia
4339   1EFE D7            push a
4340   1EFF DA            push d
4341   1F00 26 04 00      mov b, $4
4342   1F03 E7            pop d
4343   1F04 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4344   1F08 E4            pop a
4345   1F09 DA            push d
4346   1F0A 26 04 00      mov b, $4
4347   1F0D E7            pop d
4348   1F0E FD 43         mov [d], b
4349   1F10             ;; pass = pass && test0_subTest0(c, i, ca, ia); 
4350   1F10 FA FD FF      lea d, [bp + -3] ; $pass
4351   1F13 DA            push d
4352   1F14 FA FD FF      lea d, [bp + -3] ; $pass
4353   1F17 2A            mov b, [d]
4354   1F18 D7            push a
4355   1F19 11            mov a, b
4356   1F1A FA EB FF      lea d, [bp + -21] ; $ia
4357   1F1D 2D            mov b, d
4358   1F1E FD AB         swp b
4359   1F20 D8            push b
4360   1F21 FA F5 FF      lea d, [bp + -11] ; $ca
4361   1F24 2D            mov b, d
4362   1F25 FD AB         swp b
4363   1F27 D8            push b
4364   1F28 FA FA FF      lea d, [bp + -6] ; $i
4365   1F2B 2A            mov b, [d]
4366   1F2C FD AB         swp b
4367   1F2E D8            push b
4368   1F2F FA FC FF      lea d, [bp + -4] ; $c
4369   1F32 32            mov bl, [d]
4370   1F33 A7 00         mov bh, 0
4371   1F35 DD            push bl
4372   1F36 07 48 1F      call test0_subTest0
4373   1F39 51 07 00      add sp, 7
4374   1F3C FD A7         sand a, b ; &&
4375   1F3E E4            pop a
4376   1F3F E7            pop d
4377   1F40 FD 43         mov [d], b
4378   1F42             ;; return pass; 
4379   1F42 FA FD FF      lea d, [bp + -3] ; $pass
4380   1F45 2A            mov b, [d]
4381   1F46 F9            leave
4382   1F47 09            ret
4383   1F48             
4384   1F48             test0_subTest0:
4385   1F48 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4386   1F4B             ; $pass 
4387   1F4B 10 01 00      mov a, $1
4388   1F4E 45 FF FF      mov [bp + -1], a
4389   1F51 52 02 00      sub sp, 2
4390   1F54             ;; pass = pass && c == 'A'; 
4391   1F54 FA FF FF      lea d, [bp + -1] ; $pass
4392   1F57 DA            push d
4393   1F58 FA FF FF      lea d, [bp + -1] ; $pass
4394   1F5B 2A            mov b, [d]
4395   1F5C D7            push a
4396   1F5D 11            mov a, b
4397   1F5E FA 05 00      lea d, [bp + 5] ; $c
4398   1F61 32            mov bl, [d]
4399   1F62 A7 00         mov bh, 0
4400   1F64             ; START RELATIONAL
4401   1F64 D7            push a
4402   1F65 11            mov a, b
4403   1F66 26 41 00      mov b, $41
4404   1F69 B0            cmp a, b
4405   1F6A FD 71         seq ; ==
4406   1F6C E4            pop a
4407   1F6D             ; END RELATIONAL
4408   1F6D FD A7         sand a, b ; &&
4409   1F6F E4            pop a
4410   1F70 E7            pop d
4411   1F71 FD 43         mov [d], b
4412   1F73             ;; pass = pass && i == 55; 
4413   1F73 FA FF FF      lea d, [bp + -1] ; $pass
4414   1F76 DA            push d
4415   1F77 FA FF FF      lea d, [bp + -1] ; $pass
4416   1F7A 2A            mov b, [d]
4417   1F7B D7            push a
4418   1F7C 11            mov a, b
4419   1F7D FA 06 00      lea d, [bp + 6] ; $i
4420   1F80 2A            mov b, [d]
4421   1F81             ; START RELATIONAL
4422   1F81 D7            push a
4423   1F82 11            mov a, b
4424   1F83 26 37 00      mov b, $37
4425   1F86 B0            cmp a, b
4426   1F87 FD 71         seq ; ==
4427   1F89 E4            pop a
4428   1F8A             ; END RELATIONAL
4429   1F8A FD A7         sand a, b ; &&
4430   1F8C E4            pop a
4431   1F8D E7            pop d
4432   1F8E FD 43         mov [d], b
4433   1F90             ;; pass = pass && ca[0] == 'A'; 
4434   1F90 FA FF FF      lea d, [bp + -1] ; $pass
4435   1F93 DA            push d
4436   1F94 FA FF FF      lea d, [bp + -1] ; $pass
4437   1F97 2A            mov b, [d]
4438   1F98 D7            push a
4439   1F99 11            mov a, b
4440   1F9A 2C 08 00      mov b, [bp + 8] ; $ca
4441   1F9D 74            mov d, b
4442   1F9E D7            push a
4443   1F9F DA            push d
4444   1FA0 26 00 00      mov b, $0
4445   1FA3 E7            pop d
4446   1FA4 5A            add d, b
4447   1FA5 E4            pop a
4448   1FA6 32            mov bl, [d]
4449   1FA7 A7 00         mov bh, 0
4450   1FA9             ; START RELATIONAL
4451   1FA9 D7            push a
4452   1FAA 11            mov a, b
4453   1FAB 26 41 00      mov b, $41
4454   1FAE B0            cmp a, b
4455   1FAF FD 71         seq ; ==
4456   1FB1 E4            pop a
4457   1FB2             ; END RELATIONAL
4458   1FB2 FD A7         sand a, b ; &&
4459   1FB4 E4            pop a
4460   1FB5 E7            pop d
4461   1FB6 FD 43         mov [d], b
4462   1FB8             ;; pass = pass && ca[1] == 'B'; 
4463   1FB8 FA FF FF      lea d, [bp + -1] ; $pass
4464   1FBB DA            push d
4465   1FBC FA FF FF      lea d, [bp + -1] ; $pass
4466   1FBF 2A            mov b, [d]
4467   1FC0 D7            push a
4468   1FC1 11            mov a, b
4469   1FC2 2C 08 00      mov b, [bp + 8] ; $ca
4470   1FC5 74            mov d, b
4471   1FC6 D7            push a
4472   1FC7 DA            push d
4473   1FC8 26 01 00      mov b, $1
4474   1FCB E7            pop d
4475   1FCC 5A            add d, b
4476   1FCD E4            pop a
4477   1FCE 32            mov bl, [d]
4478   1FCF A7 00         mov bh, 0
4479   1FD1             ; START RELATIONAL
4480   1FD1 D7            push a
4481   1FD2 11            mov a, b
4482   1FD3 26 42 00      mov b, $42
4483   1FD6 B0            cmp a, b
4484   1FD7 FD 71         seq ; ==
4485   1FD9 E4            pop a
4486   1FDA             ; END RELATIONAL
4487   1FDA FD A7         sand a, b ; &&
4488   1FDC E4            pop a
4489   1FDD E7            pop d
4490   1FDE FD 43         mov [d], b
4491   1FE0             ;; pass = pass && ca[2] == 'C'; 
4492   1FE0 FA FF FF      lea d, [bp + -1] ; $pass
4493   1FE3 DA            push d
4494   1FE4 FA FF FF      lea d, [bp + -1] ; $pass
4495   1FE7 2A            mov b, [d]
4496   1FE8 D7            push a
4497   1FE9 11            mov a, b
4498   1FEA 2C 08 00      mov b, [bp + 8] ; $ca
4499   1FED 74            mov d, b
4500   1FEE D7            push a
4501   1FEF DA            push d
4502   1FF0 26 02 00      mov b, $2
4503   1FF3 E7            pop d
4504   1FF4 5A            add d, b
4505   1FF5 E4            pop a
4506   1FF6 32            mov bl, [d]
4507   1FF7 A7 00         mov bh, 0
4508   1FF9             ; START RELATIONAL
4509   1FF9 D7            push a
4510   1FFA 11            mov a, b
4511   1FFB 26 43 00      mov b, $43
4512   1FFE B0            cmp a, b
4513   1FFF FD 71         seq ; ==
4514   2001 E4            pop a
4515   2002             ; END RELATIONAL
4516   2002 FD A7         sand a, b ; &&
4517   2004 E4            pop a
4518   2005 E7            pop d
4519   2006 FD 43         mov [d], b
4520   2008             ;; pass = pass && ca[3] == 'D'; 
4521   2008 FA FF FF      lea d, [bp + -1] ; $pass
4522   200B DA            push d
4523   200C FA FF FF      lea d, [bp + -1] ; $pass
4524   200F 2A            mov b, [d]
4525   2010 D7            push a
4526   2011 11            mov a, b
4527   2012 2C 08 00      mov b, [bp + 8] ; $ca
4528   2015 74            mov d, b
4529   2016 D7            push a
4530   2017 DA            push d
4531   2018 26 03 00      mov b, $3
4532   201B E7            pop d
4533   201C 5A            add d, b
4534   201D E4            pop a
4535   201E 32            mov bl, [d]
4536   201F A7 00         mov bh, 0
4537   2021             ; START RELATIONAL
4538   2021 D7            push a
4539   2022 11            mov a, b
4540   2023 26 44 00      mov b, $44
4541   2026 B0            cmp a, b
4542   2027 FD 71         seq ; ==
4543   2029 E4            pop a
4544   202A             ; END RELATIONAL
4545   202A FD A7         sand a, b ; &&
4546   202C E4            pop a
4547   202D E7            pop d
4548   202E FD 43         mov [d], b
4549   2030             ;; pass = pass && ca[4] == 'E'; 
4550   2030 FA FF FF      lea d, [bp + -1] ; $pass
4551   2033 DA            push d
4552   2034 FA FF FF      lea d, [bp + -1] ; $pass
4553   2037 2A            mov b, [d]
4554   2038 D7            push a
4555   2039 11            mov a, b
4556   203A 2C 08 00      mov b, [bp + 8] ; $ca
4557   203D 74            mov d, b
4558   203E D7            push a
4559   203F DA            push d
4560   2040 26 04 00      mov b, $4
4561   2043 E7            pop d
4562   2044 5A            add d, b
4563   2045 E4            pop a
4564   2046 32            mov bl, [d]
4565   2047 A7 00         mov bh, 0
4566   2049             ; START RELATIONAL
4567   2049 D7            push a
4568   204A 11            mov a, b
4569   204B 26 45 00      mov b, $45
4570   204E B0            cmp a, b
4571   204F FD 71         seq ; ==
4572   2051 E4            pop a
4573   2052             ; END RELATIONAL
4574   2052 FD A7         sand a, b ; &&
4575   2054 E4            pop a
4576   2055 E7            pop d
4577   2056 FD 43         mov [d], b
4578   2058             ;; pass = pass && ia[0] == 0; 
4579   2058 FA FF FF      lea d, [bp + -1] ; $pass
4580   205B DA            push d
4581   205C FA FF FF      lea d, [bp + -1] ; $pass
4582   205F 2A            mov b, [d]
4583   2060 D7            push a
4584   2061 11            mov a, b
4585   2062 2C 0A 00      mov b, [bp + 10] ; $ia
4586   2065 74            mov d, b
4587   2066 D7            push a
4588   2067 DA            push d
4589   2068 26 00 00      mov b, $0
4590   206B E7            pop d
4591   206C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4592   2070 E4            pop a
4593   2071 2A            mov b, [d]
4594   2072             ; START RELATIONAL
4595   2072 D7            push a
4596   2073 11            mov a, b
4597   2074 26 00 00      mov b, $0
4598   2077 B0            cmp a, b
4599   2078 FD 71         seq ; ==
4600   207A E4            pop a
4601   207B             ; END RELATIONAL
4602   207B FD A7         sand a, b ; &&
4603   207D E4            pop a
4604   207E E7            pop d
4605   207F FD 43         mov [d], b
4606   2081             ;; pass = pass && ia[1] == 1; 
4607   2081 FA FF FF      lea d, [bp + -1] ; $pass
4608   2084 DA            push d
4609   2085 FA FF FF      lea d, [bp + -1] ; $pass
4610   2088 2A            mov b, [d]
4611   2089 D7            push a
4612   208A 11            mov a, b
4613   208B 2C 0A 00      mov b, [bp + 10] ; $ia
4614   208E 74            mov d, b
4615   208F D7            push a
4616   2090 DA            push d
4617   2091 26 01 00      mov b, $1
4618   2094 E7            pop d
4619   2095 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4620   2099 E4            pop a
4621   209A 2A            mov b, [d]
4622   209B             ; START RELATIONAL
4623   209B D7            push a
4624   209C 11            mov a, b
4625   209D 26 01 00      mov b, $1
4626   20A0 B0            cmp a, b
4627   20A1 FD 71         seq ; ==
4628   20A3 E4            pop a
4629   20A4             ; END RELATIONAL
4630   20A4 FD A7         sand a, b ; &&
4631   20A6 E4            pop a
4632   20A7 E7            pop d
4633   20A8 FD 43         mov [d], b
4634   20AA             ;; pass = pass && ia[2] == 2; 
4635   20AA FA FF FF      lea d, [bp + -1] ; $pass
4636   20AD DA            push d
4637   20AE FA FF FF      lea d, [bp + -1] ; $pass
4638   20B1 2A            mov b, [d]
4639   20B2 D7            push a
4640   20B3 11            mov a, b
4641   20B4 2C 0A 00      mov b, [bp + 10] ; $ia
4642   20B7 74            mov d, b
4643   20B8 D7            push a
4644   20B9 DA            push d
4645   20BA 26 02 00      mov b, $2
4646   20BD E7            pop d
4647   20BE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4648   20C2 E4            pop a
4649   20C3 2A            mov b, [d]
4650   20C4             ; START RELATIONAL
4651   20C4 D7            push a
4652   20C5 11            mov a, b
4653   20C6 26 02 00      mov b, $2
4654   20C9 B0            cmp a, b
4655   20CA FD 71         seq ; ==
4656   20CC E4            pop a
4657   20CD             ; END RELATIONAL
4658   20CD FD A7         sand a, b ; &&
4659   20CF E4            pop a
4660   20D0 E7            pop d
4661   20D1 FD 43         mov [d], b
4662   20D3             ;; pass = pass && ia[3] == 3; 
4663   20D3 FA FF FF      lea d, [bp + -1] ; $pass
4664   20D6 DA            push d
4665   20D7 FA FF FF      lea d, [bp + -1] ; $pass
4666   20DA 2A            mov b, [d]
4667   20DB D7            push a
4668   20DC 11            mov a, b
4669   20DD 2C 0A 00      mov b, [bp + 10] ; $ia
4670   20E0 74            mov d, b
4671   20E1 D7            push a
4672   20E2 DA            push d
4673   20E3 26 03 00      mov b, $3
4674   20E6 E7            pop d
4675   20E7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4676   20EB E4            pop a
4677   20EC 2A            mov b, [d]
4678   20ED             ; START RELATIONAL
4679   20ED D7            push a
4680   20EE 11            mov a, b
4681   20EF 26 03 00      mov b, $3
4682   20F2 B0            cmp a, b
4683   20F3 FD 71         seq ; ==
4684   20F5 E4            pop a
4685   20F6             ; END RELATIONAL
4686   20F6 FD A7         sand a, b ; &&
4687   20F8 E4            pop a
4688   20F9 E7            pop d
4689   20FA FD 43         mov [d], b
4690   20FC             ;; pass = pass && ia[4] == 4; 
4691   20FC FA FF FF      lea d, [bp + -1] ; $pass
4692   20FF DA            push d
4693   2100 FA FF FF      lea d, [bp + -1] ; $pass
4694   2103 2A            mov b, [d]
4695   2104 D7            push a
4696   2105 11            mov a, b
4697   2106 2C 0A 00      mov b, [bp + 10] ; $ia
4698   2109 74            mov d, b
4699   210A D7            push a
4700   210B DA            push d
4701   210C 26 04 00      mov b, $4
4702   210F E7            pop d
4703   2110 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4704   2114 E4            pop a
4705   2115 2A            mov b, [d]
4706   2116             ; START RELATIONAL
4707   2116 D7            push a
4708   2117 11            mov a, b
4709   2118 26 04 00      mov b, $4
4710   211B B0            cmp a, b
4711   211C FD 71         seq ; ==
4712   211E E4            pop a
4713   211F             ; END RELATIONAL
4714   211F FD A7         sand a, b ; &&
4715   2121 E4            pop a
4716   2122 E7            pop d
4717   2123 FD 43         mov [d], b
4718   2125             ;; return pass; 
4719   2125 FA FF FF      lea d, [bp + -1] ; $pass
4720   2128 2A            mov b, [d]
4721   2129 F9            leave
4722   212A 09            ret
4723   212B             
4724   212B             test1:
4725   212B F8 00 00      enter 0 ; (push bp; mov bp, sp)
4726   212E             ; $pass 
4727   212E 10 01 00      mov a, $1
4728   2131 45 FF FF      mov [bp + -1], a
4729   2134             ; $ca 
4730   2134             ; $p 
4731   2134 52 09 00      sub sp, 9
4732   2137             ;; p = ca; 
4733   2137 FA F8 FF      lea d, [bp + -8] ; $p
4734   213A DA            push d
4735   213B FA FA FF      lea d, [bp + -6] ; $ca
4736   213E 2D            mov b, d
4737   213F E7            pop d
4738   2140 FD 43         mov [d], b
4739   2142             ;; ca[0] = 'A'; 
4740   2142 FA FA FF      lea d, [bp + -6] ; $ca
4741   2145 D7            push a
4742   2146 DA            push d
4743   2147 26 00 00      mov b, $0
4744   214A E7            pop d
4745   214B 5A            add d, b
4746   214C E4            pop a
4747   214D DA            push d
4748   214E 26 41 00      mov b, $41
4749   2151 E7            pop d
4750   2152 FD 3E         mov [d], bl
4751   2154             ;; ca[1] = 'B'; 
4752   2154 FA FA FF      lea d, [bp + -6] ; $ca
4753   2157 D7            push a
4754   2158 DA            push d
4755   2159 26 01 00      mov b, $1
4756   215C E7            pop d
4757   215D 5A            add d, b
4758   215E E4            pop a
4759   215F DA            push d
4760   2160 26 42 00      mov b, $42
4761   2163 E7            pop d
4762   2164 FD 3E         mov [d], bl
4763   2166             ;; ca[2] = 'C'; 
4764   2166 FA FA FF      lea d, [bp + -6] ; $ca
4765   2169 D7            push a
4766   216A DA            push d
4767   216B 26 02 00      mov b, $2
4768   216E E7            pop d
4769   216F 5A            add d, b
4770   2170 E4            pop a
4771   2171 DA            push d
4772   2172 26 43 00      mov b, $43
4773   2175 E7            pop d
4774   2176 FD 3E         mov [d], bl
4775   2178             ;; ca[3] = 'D'; 
4776   2178 FA FA FF      lea d, [bp + -6] ; $ca
4777   217B D7            push a
4778   217C DA            push d
4779   217D 26 03 00      mov b, $3
4780   2180 E7            pop d
4781   2181 5A            add d, b
4782   2182 E4            pop a
4783   2183 DA            push d
4784   2184 26 44 00      mov b, $44
4785   2187 E7            pop d
4786   2188 FD 3E         mov [d], bl
4787   218A             ;; ca[4] = 'E'; 
4788   218A FA FA FF      lea d, [bp + -6] ; $ca
4789   218D D7            push a
4790   218E DA            push d
4791   218F 26 04 00      mov b, $4
4792   2192 E7            pop d
4793   2193 5A            add d, b
4794   2194 E4            pop a
4795   2195 DA            push d
4796   2196 26 45 00      mov b, $45
4797   2199 E7            pop d
4798   219A FD 3E         mov [d], bl
4799   219C             ;; pass = pass && *p == 'A'; 
4800   219C FA FF FF      lea d, [bp + -1] ; $pass
4801   219F DA            push d
4802   21A0 FA FF FF      lea d, [bp + -1] ; $pass
4803   21A3 2A            mov b, [d]
4804   21A4 D7            push a
4805   21A5 11            mov a, b
4806   21A6 FA F8 FF      lea d, [bp + -8] ; $p
4807   21A9 2A            mov b, [d]
4808   21AA 74            mov d, b
4809   21AB 32            mov bl, [d]
4810   21AC A7 00         mov bh, 0
4811   21AE             ; START RELATIONAL
4812   21AE D7            push a
4813   21AF 11            mov a, b
4814   21B0 26 41 00      mov b, $41
4815   21B3 B0            cmp a, b
4816   21B4 FD 71         seq ; ==
4817   21B6 E4            pop a
4818   21B7             ; END RELATIONAL
4819   21B7 FD A7         sand a, b ; &&
4820   21B9 E4            pop a
4821   21BA E7            pop d
4822   21BB FD 43         mov [d], b
4823   21BD             ;; pass = pass && *(p + 1) == 'B'; 
4824   21BD FA FF FF      lea d, [bp + -1] ; $pass
4825   21C0 DA            push d
4826   21C1 FA FF FF      lea d, [bp + -1] ; $pass
4827   21C4 2A            mov b, [d]
4828   21C5 D7            push a
4829   21C6 11            mov a, b
4830   21C7 FA F8 FF      lea d, [bp + -8] ; $p
4831   21CA 2A            mov b, [d]
4832   21CB             ; START TERMS
4833   21CB D7            push a
4834   21CC 11            mov a, b
4835   21CD 26 01 00      mov b, $1
4836   21D0 56            add b, a
4837   21D1 E4            pop a
4838   21D2             ; END TERMS
4839   21D2 74            mov d, b
4840   21D3 32            mov bl, [d]
4841   21D4 A7 00         mov bh, 0
4842   21D6             ; START RELATIONAL
4843   21D6 D7            push a
4844   21D7 11            mov a, b
4845   21D8 26 42 00      mov b, $42
4846   21DB B0            cmp a, b
4847   21DC FD 71         seq ; ==
4848   21DE E4            pop a
4849   21DF             ; END RELATIONAL
4850   21DF FD A7         sand a, b ; &&
4851   21E1 E4            pop a
4852   21E2 E7            pop d
4853   21E3 FD 43         mov [d], b
4854   21E5             ;; pass = pass && *(p + 2) == 'C'; 
4855   21E5 FA FF FF      lea d, [bp + -1] ; $pass
4856   21E8 DA            push d
4857   21E9 FA FF FF      lea d, [bp + -1] ; $pass
4858   21EC 2A            mov b, [d]
4859   21ED D7            push a
4860   21EE 11            mov a, b
4861   21EF FA F8 FF      lea d, [bp + -8] ; $p
4862   21F2 2A            mov b, [d]
4863   21F3             ; START TERMS
4864   21F3 D7            push a
4865   21F4 11            mov a, b
4866   21F5 26 02 00      mov b, $2
4867   21F8 56            add b, a
4868   21F9 E4            pop a
4869   21FA             ; END TERMS
4870   21FA 74            mov d, b
4871   21FB 32            mov bl, [d]
4872   21FC A7 00         mov bh, 0
4873   21FE             ; START RELATIONAL
4874   21FE D7            push a
4875   21FF 11            mov a, b
4876   2200 26 43 00      mov b, $43
4877   2203 B0            cmp a, b
4878   2204 FD 71         seq ; ==
4879   2206 E4            pop a
4880   2207             ; END RELATIONAL
4881   2207 FD A7         sand a, b ; &&
4882   2209 E4            pop a
4883   220A E7            pop d
4884   220B FD 43         mov [d], b
4885   220D             ;; pass = pass && *(p + 3) == 'D'; 
4886   220D FA FF FF      lea d, [bp + -1] ; $pass
4887   2210 DA            push d
4888   2211 FA FF FF      lea d, [bp + -1] ; $pass
4889   2214 2A            mov b, [d]
4890   2215 D7            push a
4891   2216 11            mov a, b
4892   2217 FA F8 FF      lea d, [bp + -8] ; $p
4893   221A 2A            mov b, [d]
4894   221B             ; START TERMS
4895   221B D7            push a
4896   221C 11            mov a, b
4897   221D 26 03 00      mov b, $3
4898   2220 56            add b, a
4899   2221 E4            pop a
4900   2222             ; END TERMS
4901   2222 74            mov d, b
4902   2223 32            mov bl, [d]
4903   2224 A7 00         mov bh, 0
4904   2226             ; START RELATIONAL
4905   2226 D7            push a
4906   2227 11            mov a, b
4907   2228 26 44 00      mov b, $44
4908   222B B0            cmp a, b
4909   222C FD 71         seq ; ==
4910   222E E4            pop a
4911   222F             ; END RELATIONAL
4912   222F FD A7         sand a, b ; &&
4913   2231 E4            pop a
4914   2232 E7            pop d
4915   2233 FD 43         mov [d], b
4916   2235             ;; pass = pass && *(p + 4) == 'E'; 
4917   2235 FA FF FF      lea d, [bp + -1] ; $pass
4918   2238 DA            push d
4919   2239 FA FF FF      lea d, [bp + -1] ; $pass
4920   223C 2A            mov b, [d]
4921   223D D7            push a
4922   223E 11            mov a, b
4923   223F FA F8 FF      lea d, [bp + -8] ; $p
4924   2242 2A            mov b, [d]
4925   2243             ; START TERMS
4926   2243 D7            push a
4927   2244 11            mov a, b
4928   2245 26 04 00      mov b, $4
4929   2248 56            add b, a
4930   2249 E4            pop a
4931   224A             ; END TERMS
4932   224A 74            mov d, b
4933   224B 32            mov bl, [d]
4934   224C A7 00         mov bh, 0
4935   224E             ; START RELATIONAL
4936   224E D7            push a
4937   224F 11            mov a, b
4938   2250 26 45 00      mov b, $45
4939   2253 B0            cmp a, b
4940   2254 FD 71         seq ; ==
4941   2256 E4            pop a
4942   2257             ; END RELATIONAL
4943   2257 FD A7         sand a, b ; &&
4944   2259 E4            pop a
4945   225A E7            pop d
4946   225B FD 43         mov [d], b
4947   225D             ;; return pass; 
4948   225D FA FF FF      lea d, [bp + -1] ; $pass
4949   2260 2A            mov b, [d]
4950   2261 F9            leave
4951   2262 09            ret
4952   2263             
4953   2263             test2:
4954   2263 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4955   2266             ; $pass 
4956   2266 10 01 00      mov a, $1
4957   2269 45 FF FF      mov [bp + -1], a
4958   226C             ; $ca 
4959   226C             ; $indices 
4960   226C             ; $p 
4961   226C 52 13 00      sub sp, 19
4962   226F             ;; p = ca; 
4963   226F FA EE FF      lea d, [bp + -18] ; $p
4964   2272 DA            push d
4965   2273 FA FA FF      lea d, [bp + -6] ; $ca
4966   2276 2D            mov b, d
4967   2277 E7            pop d
4968   2278 FD 43         mov [d], b
4969   227A             ;; ca[0] = 'A'; 
4970   227A FA FA FF      lea d, [bp + -6] ; $ca
4971   227D D7            push a
4972   227E DA            push d
4973   227F 26 00 00      mov b, $0
4974   2282 E7            pop d
4975   2283 5A            add d, b
4976   2284 E4            pop a
4977   2285 DA            push d
4978   2286 26 41 00      mov b, $41
4979   2289 E7            pop d
4980   228A FD 3E         mov [d], bl
4981   228C             ;; ca[1] = 'B'; 
4982   228C FA FA FF      lea d, [bp + -6] ; $ca
4983   228F D7            push a
4984   2290 DA            push d
4985   2291 26 01 00      mov b, $1
4986   2294 E7            pop d
4987   2295 5A            add d, b
4988   2296 E4            pop a
4989   2297 DA            push d
4990   2298 26 42 00      mov b, $42
4991   229B E7            pop d
4992   229C FD 3E         mov [d], bl
4993   229E             ;; ca[2] = 'C'; 
4994   229E FA FA FF      lea d, [bp + -6] ; $ca
4995   22A1 D7            push a
4996   22A2 DA            push d
4997   22A3 26 02 00      mov b, $2
4998   22A6 E7            pop d
4999   22A7 5A            add d, b
5000   22A8 E4            pop a
5001   22A9 DA            push d
5002   22AA 26 43 00      mov b, $43
5003   22AD E7            pop d
5004   22AE FD 3E         mov [d], bl
5005   22B0             ;; ca[3] = 'D'; 
5006   22B0 FA FA FF      lea d, [bp + -6] ; $ca
5007   22B3 D7            push a
5008   22B4 DA            push d
5009   22B5 26 03 00      mov b, $3
5010   22B8 E7            pop d
5011   22B9 5A            add d, b
5012   22BA E4            pop a
5013   22BB DA            push d
5014   22BC 26 44 00      mov b, $44
5015   22BF E7            pop d
5016   22C0 FD 3E         mov [d], bl
5017   22C2             ;; ca[4] = 'E'; 
5018   22C2 FA FA FF      lea d, [bp + -6] ; $ca
5019   22C5 D7            push a
5020   22C6 DA            push d
5021   22C7 26 04 00      mov b, $4
5022   22CA E7            pop d
5023   22CB 5A            add d, b
5024   22CC E4            pop a
5025   22CD DA            push d
5026   22CE 26 45 00      mov b, $45
5027   22D1 E7            pop d
5028   22D2 FD 3E         mov [d], bl
5029   22D4             ;; indices[0] = 0; 
5030   22D4 FA F0 FF      lea d, [bp + -16] ; $indices
5031   22D7 D7            push a
5032   22D8 DA            push d
5033   22D9 26 00 00      mov b, $0
5034   22DC E7            pop d
5035   22DD FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5036   22E1 E4            pop a
5037   22E2 DA            push d
5038   22E3 26 00 00      mov b, $0
5039   22E6 E7            pop d
5040   22E7 FD 43         mov [d], b
5041   22E9             ;; indices[1] = 1; 
5042   22E9 FA F0 FF      lea d, [bp + -16] ; $indices
5043   22EC D7            push a
5044   22ED DA            push d
5045   22EE 26 01 00      mov b, $1
5046   22F1 E7            pop d
5047   22F2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5048   22F6 E4            pop a
5049   22F7 DA            push d
5050   22F8 26 01 00      mov b, $1
5051   22FB E7            pop d
5052   22FC FD 43         mov [d], b
5053   22FE             ;; indices[2] = 2; 
5054   22FE FA F0 FF      lea d, [bp + -16] ; $indices
5055   2301 D7            push a
5056   2302 DA            push d
5057   2303 26 02 00      mov b, $2
5058   2306 E7            pop d
5059   2307 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5060   230B E4            pop a
5061   230C DA            push d
5062   230D 26 02 00      mov b, $2
5063   2310 E7            pop d
5064   2311 FD 43         mov [d], b
5065   2313             ;; indices[3] = 3; 
5066   2313 FA F0 FF      lea d, [bp + -16] ; $indices
5067   2316 D7            push a
5068   2317 DA            push d
5069   2318 26 03 00      mov b, $3
5070   231B E7            pop d
5071   231C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5072   2320 E4            pop a
5073   2321 DA            push d
5074   2322 26 03 00      mov b, $3
5075   2325 E7            pop d
5076   2326 FD 43         mov [d], b
5077   2328             ;; indices[4] = 4; 
5078   2328 FA F0 FF      lea d, [bp + -16] ; $indices
5079   232B D7            push a
5080   232C DA            push d
5081   232D 26 04 00      mov b, $4
5082   2330 E7            pop d
5083   2331 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5084   2335 E4            pop a
5085   2336 DA            push d
5086   2337 26 04 00      mov b, $4
5087   233A E7            pop d
5088   233B FD 43         mov [d], b
5089   233D             ;; pass = pass && *(p + indices[0]) == 'A'; 
5090   233D FA FF FF      lea d, [bp + -1] ; $pass
5091   2340 DA            push d
5092   2341 FA FF FF      lea d, [bp + -1] ; $pass
5093   2344 2A            mov b, [d]
5094   2345 D7            push a
5095   2346 11            mov a, b
5096   2347 FA EE FF      lea d, [bp + -18] ; $p
5097   234A 2A            mov b, [d]
5098   234B             ; START TERMS
5099   234B D7            push a
5100   234C 11            mov a, b
5101   234D FA F0 FF      lea d, [bp + -16] ; $indices
5102   2350 D7            push a
5103   2351 DA            push d
5104   2352 26 00 00      mov b, $0
5105   2355 E7            pop d
5106   2356 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5107   235A E4            pop a
5108   235B 2A            mov b, [d]
5109   235C 56            add b, a
5110   235D E4            pop a
5111   235E             ; END TERMS
5112   235E 74            mov d, b
5113   235F 32            mov bl, [d]
5114   2360 A7 00         mov bh, 0
5115   2362             ; START RELATIONAL
5116   2362 D7            push a
5117   2363 11            mov a, b
5118   2364 26 41 00      mov b, $41
5119   2367 B0            cmp a, b
5120   2368 FD 71         seq ; ==
5121   236A E4            pop a
5122   236B             ; END RELATIONAL
5123   236B FD A7         sand a, b ; &&
5124   236D E4            pop a
5125   236E E7            pop d
5126   236F FD 43         mov [d], b
5127   2371             ;; pass = pass && *(p + indices[1]) == 'B'; 
5128   2371 FA FF FF      lea d, [bp + -1] ; $pass
5129   2374 DA            push d
5130   2375 FA FF FF      lea d, [bp + -1] ; $pass
5131   2378 2A            mov b, [d]
5132   2379 D7            push a
5133   237A 11            mov a, b
5134   237B FA EE FF      lea d, [bp + -18] ; $p
5135   237E 2A            mov b, [d]
5136   237F             ; START TERMS
5137   237F D7            push a
5138   2380 11            mov a, b
5139   2381 FA F0 FF      lea d, [bp + -16] ; $indices
5140   2384 D7            push a
5141   2385 DA            push d
5142   2386 26 01 00      mov b, $1
5143   2389 E7            pop d
5144   238A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5145   238E E4            pop a
5146   238F 2A            mov b, [d]
5147   2390 56            add b, a
5148   2391 E4            pop a
5149   2392             ; END TERMS
5150   2392 74            mov d, b
5151   2393 32            mov bl, [d]
5152   2394 A7 00         mov bh, 0
5153   2396             ; START RELATIONAL
5154   2396 D7            push a
5155   2397 11            mov a, b
5156   2398 26 42 00      mov b, $42
5157   239B B0            cmp a, b
5158   239C FD 71         seq ; ==
5159   239E E4            pop a
5160   239F             ; END RELATIONAL
5161   239F FD A7         sand a, b ; &&
5162   23A1 E4            pop a
5163   23A2 E7            pop d
5164   23A3 FD 43         mov [d], b
5165   23A5             ;; pass = pass && *(p + indices[2]) == 'C'; 
5166   23A5 FA FF FF      lea d, [bp + -1] ; $pass
5167   23A8 DA            push d
5168   23A9 FA FF FF      lea d, [bp + -1] ; $pass
5169   23AC 2A            mov b, [d]
5170   23AD D7            push a
5171   23AE 11            mov a, b
5172   23AF FA EE FF      lea d, [bp + -18] ; $p
5173   23B2 2A            mov b, [d]
5174   23B3             ; START TERMS
5175   23B3 D7            push a
5176   23B4 11            mov a, b
5177   23B5 FA F0 FF      lea d, [bp + -16] ; $indices
5178   23B8 D7            push a
5179   23B9 DA            push d
5180   23BA 26 02 00      mov b, $2
5181   23BD E7            pop d
5182   23BE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5183   23C2 E4            pop a
5184   23C3 2A            mov b, [d]
5185   23C4 56            add b, a
5186   23C5 E4            pop a
5187   23C6             ; END TERMS
5188   23C6 74            mov d, b
5189   23C7 32            mov bl, [d]
5190   23C8 A7 00         mov bh, 0
5191   23CA             ; START RELATIONAL
5192   23CA D7            push a
5193   23CB 11            mov a, b
5194   23CC 26 43 00      mov b, $43
5195   23CF B0            cmp a, b
5196   23D0 FD 71         seq ; ==
5197   23D2 E4            pop a
5198   23D3             ; END RELATIONAL
5199   23D3 FD A7         sand a, b ; &&
5200   23D5 E4            pop a
5201   23D6 E7            pop d
5202   23D7 FD 43         mov [d], b
5203   23D9             ;; pass = pass && *(p + indices[3]) == 'D'; 
5204   23D9 FA FF FF      lea d, [bp + -1] ; $pass
5205   23DC DA            push d
5206   23DD FA FF FF      lea d, [bp + -1] ; $pass
5207   23E0 2A            mov b, [d]
5208   23E1 D7            push a
5209   23E2 11            mov a, b
5210   23E3 FA EE FF      lea d, [bp + -18] ; $p
5211   23E6 2A            mov b, [d]
5212   23E7             ; START TERMS
5213   23E7 D7            push a
5214   23E8 11            mov a, b
5215   23E9 FA F0 FF      lea d, [bp + -16] ; $indices
5216   23EC D7            push a
5217   23ED DA            push d
5218   23EE 26 03 00      mov b, $3
5219   23F1 E7            pop d
5220   23F2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5221   23F6 E4            pop a
5222   23F7 2A            mov b, [d]
5223   23F8 56            add b, a
5224   23F9 E4            pop a
5225   23FA             ; END TERMS
5226   23FA 74            mov d, b
5227   23FB 32            mov bl, [d]
5228   23FC A7 00         mov bh, 0
5229   23FE             ; START RELATIONAL
5230   23FE D7            push a
5231   23FF 11            mov a, b
5232   2400 26 44 00      mov b, $44
5233   2403 B0            cmp a, b
5234   2404 FD 71         seq ; ==
5235   2406 E4            pop a
5236   2407             ; END RELATIONAL
5237   2407 FD A7         sand a, b ; &&
5238   2409 E4            pop a
5239   240A E7            pop d
5240   240B FD 43         mov [d], b
5241   240D             ;; pass = pass && *(p + indices[4]) == 'E'; 
5242   240D FA FF FF      lea d, [bp + -1] ; $pass
5243   2410 DA            push d
5244   2411 FA FF FF      lea d, [bp + -1] ; $pass
5245   2414 2A            mov b, [d]
5246   2415 D7            push a
5247   2416 11            mov a, b
5248   2417 FA EE FF      lea d, [bp + -18] ; $p
5249   241A 2A            mov b, [d]
5250   241B             ; START TERMS
5251   241B D7            push a
5252   241C 11            mov a, b
5253   241D FA F0 FF      lea d, [bp + -16] ; $indices
5254   2420 D7            push a
5255   2421 DA            push d
5256   2422 26 04 00      mov b, $4
5257   2425 E7            pop d
5258   2426 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5259   242A E4            pop a
5260   242B 2A            mov b, [d]
5261   242C 56            add b, a
5262   242D E4            pop a
5263   242E             ; END TERMS
5264   242E 74            mov d, b
5265   242F 32            mov bl, [d]
5266   2430 A7 00         mov bh, 0
5267   2432             ; START RELATIONAL
5268   2432 D7            push a
5269   2433 11            mov a, b
5270   2434 26 45 00      mov b, $45
5271   2437 B0            cmp a, b
5272   2438 FD 71         seq ; ==
5273   243A E4            pop a
5274   243B             ; END RELATIONAL
5275   243B FD A7         sand a, b ; &&
5276   243D E4            pop a
5277   243E E7            pop d
5278   243F FD 43         mov [d], b
5279   2441             ;; return pass; 
5280   2441 FA FF FF      lea d, [bp + -1] ; $pass
5281   2444 2A            mov b, [d]
5282   2445 F9            leave
5283   2446 09            ret
5284   2447             
5285   2447             test3:
5286   2447 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5287   244A             ; $pass 
5288   244A 10 01 00      mov a, $1
5289   244D 45 FF FF      mov [bp + -1], a
5290   2450 52 02 00      sub sp, 2
5291   2453             ;; st.c = 'A'; 
5292   2453 FA 05 00      lea d, [bp + 5] ; $st
5293   2456 58 00 00      add d, 0
5294   2459 DA            push d
5295   245A 26 41 00      mov b, $41
5296   245D E7            pop d
5297   245E FD 3E         mov [d], bl
5298   2460             ;; st.i = 277; 
5299   2460 FA 05 00      lea d, [bp + 5] ; $st
5300   2463 58 01 00      add d, 1
5301   2466 DA            push d
5302   2467 26 15 01      mov b, $115
5303   246A E7            pop d
5304   246B FD 43         mov [d], b
5305   246D             ;; st.m[0] = 0; 
5306   246D FA 05 00      lea d, [bp + 5] ; $st
5307   2470 58 03 00      add d, 3
5308   2473 D7            push a
5309   2474 DA            push d
5310   2475 26 00 00      mov b, $0
5311   2478 E7            pop d
5312   2479 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5313   247D E4            pop a
5314   247E DA            push d
5315   247F 26 00 00      mov b, $0
5316   2482 E7            pop d
5317   2483 FD 43         mov [d], b
5318   2485             ;; st.m[1] = 1; 
5319   2485 FA 05 00      lea d, [bp + 5] ; $st
5320   2488 58 03 00      add d, 3
5321   248B D7            push a
5322   248C DA            push d
5323   248D 26 01 00      mov b, $1
5324   2490 E7            pop d
5325   2491 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5326   2495 E4            pop a
5327   2496 DA            push d
5328   2497 26 01 00      mov b, $1
5329   249A E7            pop d
5330   249B FD 43         mov [d], b
5331   249D             ;; st.m[2] = 2; 
5332   249D FA 05 00      lea d, [bp + 5] ; $st
5333   24A0 58 03 00      add d, 3
5334   24A3 D7            push a
5335   24A4 DA            push d
5336   24A5 26 02 00      mov b, $2
5337   24A8 E7            pop d
5338   24A9 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5339   24AD E4            pop a
5340   24AE DA            push d
5341   24AF 26 02 00      mov b, $2
5342   24B2 E7            pop d
5343   24B3 FD 43         mov [d], b
5344   24B5             ;; st.m[3] = 3; 
5345   24B5 FA 05 00      lea d, [bp + 5] ; $st
5346   24B8 58 03 00      add d, 3
5347   24BB D7            push a
5348   24BC DA            push d
5349   24BD 26 03 00      mov b, $3
5350   24C0 E7            pop d
5351   24C1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5352   24C5 E4            pop a
5353   24C6 DA            push d
5354   24C7 26 03 00      mov b, $3
5355   24CA E7            pop d
5356   24CB FD 43         mov [d], b
5357   24CD             ;; st.m[4] = 4; 
5358   24CD FA 05 00      lea d, [bp + 5] ; $st
5359   24D0 58 03 00      add d, 3
5360   24D3 D7            push a
5361   24D4 DA            push d
5362   24D5 26 04 00      mov b, $4
5363   24D8 E7            pop d
5364   24D9 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5365   24DD E4            pop a
5366   24DE DA            push d
5367   24DF 26 04 00      mov b, $4
5368   24E2 E7            pop d
5369   24E3 FD 43         mov [d], b
5370   24E5             ;; pass = pass && st.c == 'A'; 
5371   24E5 FA FF FF      lea d, [bp + -1] ; $pass
5372   24E8 DA            push d
5373   24E9 FA FF FF      lea d, [bp + -1] ; $pass
5374   24EC 2A            mov b, [d]
5375   24ED D7            push a
5376   24EE 11            mov a, b
5377   24EF FA 05 00      lea d, [bp + 5] ; $st
5378   24F2 58 00 00      add d, 0
5379   24F5 32            mov bl, [d]
5380   24F6 A7 00         mov bh, 0
5381   24F8             ; START RELATIONAL
5382   24F8 D7            push a
5383   24F9 11            mov a, b
5384   24FA 26 41 00      mov b, $41
5385   24FD B0            cmp a, b
5386   24FE FD 71         seq ; ==
5387   2500 E4            pop a
5388   2501             ; END RELATIONAL
5389   2501 FD A7         sand a, b ; &&
5390   2503 E4            pop a
5391   2504 E7            pop d
5392   2505 FD 43         mov [d], b
5393   2507             ;; pass = pass && st.i == 277; 
5394   2507 FA FF FF      lea d, [bp + -1] ; $pass
5395   250A DA            push d
5396   250B FA FF FF      lea d, [bp + -1] ; $pass
5397   250E 2A            mov b, [d]
5398   250F D7            push a
5399   2510 11            mov a, b
5400   2511 FA 05 00      lea d, [bp + 5] ; $st
5401   2514 58 01 00      add d, 1
5402   2517 2A            mov b, [d]
5403   2518             ; START RELATIONAL
5404   2518 D7            push a
5405   2519 11            mov a, b
5406   251A 26 15 01      mov b, $115
5407   251D B0            cmp a, b
5408   251E FD 71         seq ; ==
5409   2520 E4            pop a
5410   2521             ; END RELATIONAL
5411   2521 FD A7         sand a, b ; &&
5412   2523 E4            pop a
5413   2524 E7            pop d
5414   2525 FD 43         mov [d], b
5415   2527             ;; pass = pass && st.m[0] == 0; 
5416   2527 FA FF FF      lea d, [bp + -1] ; $pass
5417   252A DA            push d
5418   252B FA FF FF      lea d, [bp + -1] ; $pass
5419   252E 2A            mov b, [d]
5420   252F D7            push a
5421   2530 11            mov a, b
5422   2531 FA 05 00      lea d, [bp + 5] ; $st
5423   2534 58 03 00      add d, 3
5424   2537 D7            push a
5425   2538 DA            push d
5426   2539 26 00 00      mov b, $0
5427   253C E7            pop d
5428   253D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5429   2541 E4            pop a
5430   2542 2A            mov b, [d]
5431   2543             ; START RELATIONAL
5432   2543 D7            push a
5433   2544 11            mov a, b
5434   2545 26 00 00      mov b, $0
5435   2548 B0            cmp a, b
5436   2549 FD 71         seq ; ==
5437   254B E4            pop a
5438   254C             ; END RELATIONAL
5439   254C FD A7         sand a, b ; &&
5440   254E E4            pop a
5441   254F E7            pop d
5442   2550 FD 43         mov [d], b
5443   2552             ;; pass = pass && st.m[1] == 1; 
5444   2552 FA FF FF      lea d, [bp + -1] ; $pass
5445   2555 DA            push d
5446   2556 FA FF FF      lea d, [bp + -1] ; $pass
5447   2559 2A            mov b, [d]
5448   255A D7            push a
5449   255B 11            mov a, b
5450   255C FA 05 00      lea d, [bp + 5] ; $st
5451   255F 58 03 00      add d, 3
5452   2562 D7            push a
5453   2563 DA            push d
5454   2564 26 01 00      mov b, $1
5455   2567 E7            pop d
5456   2568 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5457   256C E4            pop a
5458   256D 2A            mov b, [d]
5459   256E             ; START RELATIONAL
5460   256E D7            push a
5461   256F 11            mov a, b
5462   2570 26 01 00      mov b, $1
5463   2573 B0            cmp a, b
5464   2574 FD 71         seq ; ==
5465   2576 E4            pop a
5466   2577             ; END RELATIONAL
5467   2577 FD A7         sand a, b ; &&
5468   2579 E4            pop a
5469   257A E7            pop d
5470   257B FD 43         mov [d], b
5471   257D             ;; pass = pass && st.m[2] == 2; 
5472   257D FA FF FF      lea d, [bp + -1] ; $pass
5473   2580 DA            push d
5474   2581 FA FF FF      lea d, [bp + -1] ; $pass
5475   2584 2A            mov b, [d]
5476   2585 D7            push a
5477   2586 11            mov a, b
5478   2587 FA 05 00      lea d, [bp + 5] ; $st
5479   258A 58 03 00      add d, 3
5480   258D D7            push a
5481   258E DA            push d
5482   258F 26 02 00      mov b, $2
5483   2592 E7            pop d
5484   2593 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5485   2597 E4            pop a
5486   2598 2A            mov b, [d]
5487   2599             ; START RELATIONAL
5488   2599 D7            push a
5489   259A 11            mov a, b
5490   259B 26 02 00      mov b, $2
5491   259E B0            cmp a, b
5492   259F FD 71         seq ; ==
5493   25A1 E4            pop a
5494   25A2             ; END RELATIONAL
5495   25A2 FD A7         sand a, b ; &&
5496   25A4 E4            pop a
5497   25A5 E7            pop d
5498   25A6 FD 43         mov [d], b
5499   25A8             ;; pass = pass && st.m[3] == 3; 
5500   25A8 FA FF FF      lea d, [bp + -1] ; $pass
5501   25AB DA            push d
5502   25AC FA FF FF      lea d, [bp + -1] ; $pass
5503   25AF 2A            mov b, [d]
5504   25B0 D7            push a
5505   25B1 11            mov a, b
5506   25B2 FA 05 00      lea d, [bp + 5] ; $st
5507   25B5 58 03 00      add d, 3
5508   25B8 D7            push a
5509   25B9 DA            push d
5510   25BA 26 03 00      mov b, $3
5511   25BD E7            pop d
5512   25BE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5513   25C2 E4            pop a
5514   25C3 2A            mov b, [d]
5515   25C4             ; START RELATIONAL
5516   25C4 D7            push a
5517   25C5 11            mov a, b
5518   25C6 26 03 00      mov b, $3
5519   25C9 B0            cmp a, b
5520   25CA FD 71         seq ; ==
5521   25CC E4            pop a
5522   25CD             ; END RELATIONAL
5523   25CD FD A7         sand a, b ; &&
5524   25CF E4            pop a
5525   25D0 E7            pop d
5526   25D1 FD 43         mov [d], b
5527   25D3             ;; pass = pass && st.m[4] == 4; 
5528   25D3 FA FF FF      lea d, [bp + -1] ; $pass
5529   25D6 DA            push d
5530   25D7 FA FF FF      lea d, [bp + -1] ; $pass
5531   25DA 2A            mov b, [d]
5532   25DB D7            push a
5533   25DC 11            mov a, b
5534   25DD FA 05 00      lea d, [bp + 5] ; $st
5535   25E0 58 03 00      add d, 3
5536   25E3 D7            push a
5537   25E4 DA            push d
5538   25E5 26 04 00      mov b, $4
5539   25E8 E7            pop d
5540   25E9 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5541   25ED E4            pop a
5542   25EE 2A            mov b, [d]
5543   25EF             ; START RELATIONAL
5544   25EF D7            push a
5545   25F0 11            mov a, b
5546   25F1 26 04 00      mov b, $4
5547   25F4 B0            cmp a, b
5548   25F5 FD 71         seq ; ==
5549   25F7 E4            pop a
5550   25F8             ; END RELATIONAL
5551   25F8 FD A7         sand a, b ; &&
5552   25FA E4            pop a
5553   25FB E7            pop d
5554   25FC FD 43         mov [d], b
5555   25FE             ;; return pass; 
5556   25FE FA FF FF      lea d, [bp + -1] ; $pass
5557   2601 2A            mov b, [d]
5558   2602 F9            leave
5559   2603 09            ret
5560   2604             ; --- END TEXT BLOCK
5561   2604             
5562   2604             ; --- BEGIN DATA BLOCK
5563   2604 41 42 43 44 _base64_table_data: .db "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", 0
5563   2608 45 46 47 48 
5563   260C 49 4A 4B 4C 
5563   2610 4D 4E 4F 50 
5563   2614 51 52 53 54 
5563   2618 55 56 57 58 
5563   261C 59 5A 61 62 
5563   2620 63 64 65 66 
5563   2624 67 68 69 6A 
5563   2628 6B 6C 6D 6E 
5563   262C 6F 70 71 72 
5563   2630 73 74 75 76 
5563   2634 77 78 79 7A 
5563   2638 30 31 32 33 
5563   263C 34 35 36 37 
5563   2640 38 39 2B 2F 
5563   2644 00 
5564   2645 04 26       _base64_table: .dw _base64_table_data
5565   2647 00 00 00 00 _st1_data: .fill 13, 0
5565   264B 00 00 00 00 
5565   264F 00 00 00 00 
5565   2653 00 
5566   2654 54 65 73 74 __s0: .db "Test %d, Result: %d\n", 0
5566   2658 20 25 64 2C 
5566   265C 20 52 65 73 
5566   2660 75 6C 74 3A 
5566   2664 20 25 64 0A 
5566   2668 00 
5567   2669 55 6E 65 78 __s1: .db "Unexpected format in printf.", 0
5567   266D 70 65 63 74 
5567   2671 65 64 20 66 
5567   2675 6F 72 6D 61 
5567   2679 74 20 69 6E 
5567   267D 20 70 72 69 
5567   2681 6E 74 66 2E 
5567   2685 00 
5568   2686 45 72 72 6F __s2: .db "Error: Unknown argument type.\n", 0
5568   268A 72 3A 20 55 
5568   268E 6E 6B 6E 6F 
5568   2692 77 6E 20 61 
5568   2696 72 67 75 6D 
5568   269A 65 6E 74 20 
5568   269E 74 79 70 65 
5568   26A2 2E 0A 00 
5569   26A5 1B 5B 32 4A __s3: .db "\033[2J\033[H", 0
5569   26A9 1B 5B 48 00 
5570   26AD             
5571   26AD AF 26       _heap_top: .dw _heap
5572   26AF 00          _heap: .db 0
5573   26B0             ; --- END DATA BLOCK
5574   26B0             
5575   26B0             .end
tasm: Number of errors = 0
