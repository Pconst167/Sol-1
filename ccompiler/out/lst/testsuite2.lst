0001   0000             ; --- FILENAME: ctestsuite/testsuite2
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ;; int pass[10]; 
0011   0408 52 14 00      sub sp, 20 ; pass
0012   040B             ;; int i; 
0013   040B 52 02 00      sub sp, 2 ; i
0014   040E             ;; int nbr_tests = 10; 
0015   040E 52 02 00      sub sp, 2 ; nbr_tests
0016   0411             ; --- START LOCAL VAR INITIALIZATION
0017   0411 FA E9 FF      lea d, [bp + -23] ; $nbr_tests
0018   0414 DA            push d
0019   0415 26 0A 00      mov b, $a
0020   0418 E7            pop d
0021   0419 FD 43         mov [d], b
0022   041B             ; --- END LOCAL VAR INITIALIZATION
0023   041B             ;; for(i = 0; i < nbr_tests; i++){ 
0024   041B             _for1_init:
0025   041B FA EB FF      lea d, [bp + -21] ; $i
0026   041E DA            push d
0027   041F 26 00 00      mov b, $0
0028   0422 E7            pop d
0029   0423 FD 43         mov [d], b
0030   0425             _for1_cond:
0031   0425 FA EB FF      lea d, [bp + -21] ; $i
0032   0428 2A            mov b, [d]
0033   0429             ; START RELATIONAL
0034   0429 D7            push a
0035   042A 11            mov a, b
0036   042B FA E9 FF      lea d, [bp + -23] ; $nbr_tests
0037   042E 2A            mov b, [d]
0038   042F B0            cmp a, b
0039   0430 FD 73         slt ; < (signed)
0040   0432 E4            pop a
0041   0433             ; END RELATIONAL
0042   0433 C0 00 00      cmp b, 0
0043   0436 C6 5F 04      je _for1_exit
0044   0439             _for1_block:
0045   0439             ;; pass[i] = -1; 
0046   0439 FA ED FF      lea d, [bp + -19] ; $pass
0047   043C D7            push a
0048   043D DA            push d
0049   043E FA EB FF      lea d, [bp + -21] ; $i
0050   0441 2A            mov b, [d]
0051   0442 E7            pop d
0052   0443 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0053   0447 E4            pop a
0054   0448 DA            push d
0055   0449 26 FF FF      mov b, $ffff
0056   044C E7            pop d
0057   044D FD 43         mov [d], b
0058   044F             _for1_update:
0059   044F FA EB FF      lea d, [bp + -21] ; $i
0060   0452 2A            mov b, [d]
0061   0453 D8            push b
0062   0454 FD 77         inc b
0063   0456 FA EB FF      lea d, [bp + -21] ; $i
0064   0459 FD 43         mov [d], b
0065   045B E5            pop b
0066   045C 0A 25 04      jmp _for1_cond
0067   045F             _for1_exit:
0068   045F             ;; pass[0] = test0(); 
0069   045F FA ED FF      lea d, [bp + -19] ; $pass
0070   0462 D7            push a
0071   0463 DA            push d
0072   0464 26 00 00      mov b, $0
0073   0467 E7            pop d
0074   0468 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0075   046C E4            pop a
0076   046D DA            push d
0077   046E 07 51 1A      call test0
0078   0471 E7            pop d
0079   0472 FD 43         mov [d], b
0080   0474             ;; pass[1] = test1(); 
0081   0474 FA ED FF      lea d, [bp + -19] ; $pass
0082   0477 D7            push a
0083   0478 DA            push d
0084   0479 26 01 00      mov b, $1
0085   047C E7            pop d
0086   047D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0087   0481 E4            pop a
0088   0482 DA            push d
0089   0483 07 66 1D      call test1
0090   0486 E7            pop d
0091   0487 FD 43         mov [d], b
0092   0489             ;; pass[2] = test2(); 
0093   0489 FA ED FF      lea d, [bp + -19] ; $pass
0094   048C D7            push a
0095   048D DA            push d
0096   048E 26 02 00      mov b, $2
0097   0491 E7            pop d
0098   0492 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0099   0496 E4            pop a
0100   0497 DA            push d
0101   0498 07 A8 1E      call test2
0102   049B E7            pop d
0103   049C FD 43         mov [d], b
0104   049E             ;; pass[3] = test3(st1); 
0105   049E FA ED FF      lea d, [bp + -19] ; $pass
0106   04A1 D7            push a
0107   04A2 DA            push d
0108   04A3 26 03 00      mov b, $3
0109   04A6 E7            pop d
0110   04A7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0111   04AB E4            pop a
0112   04AC DA            push d
0113   04AD 3B 5A 22      mov d, _st1_data ; $st1
0114   04B0 2D            mov b, d
0115   04B1 52 0D 00      sub sp, 13
0116   04B4 FD 28         mov si, b
0117   04B6 FD FA 01 00   lea d, [sp + 1]
0118   04BA FD 50         mov di, d
0119   04BC 38 0D 00      mov c, 13
0120   04BF FD F5         rep movsb
0121   04C1 07 99 20      call test3
0122   04C4 51 0D 00      add sp, 13
0123   04C7 E7            pop d
0124   04C8 FD 43         mov [d], b
0125   04CA             ;; for(i = 0; i < nbr_tests; i++){ 
0126   04CA             _for2_init:
0127   04CA FA EB FF      lea d, [bp + -21] ; $i
0128   04CD DA            push d
0129   04CE 26 00 00      mov b, $0
0130   04D1 E7            pop d
0131   04D2 FD 43         mov [d], b
0132   04D4             _for2_cond:
0133   04D4 FA EB FF      lea d, [bp + -21] ; $i
0134   04D7 2A            mov b, [d]
0135   04D8             ; START RELATIONAL
0136   04D8 D7            push a
0137   04D9 11            mov a, b
0138   04DA FA E9 FF      lea d, [bp + -23] ; $nbr_tests
0139   04DD 2A            mov b, [d]
0140   04DE B0            cmp a, b
0141   04DF FD 73         slt ; < (signed)
0142   04E1 E4            pop a
0143   04E2             ; END RELATIONAL
0144   04E2 C0 00 00      cmp b, 0
0145   04E5 C6 1E 05      je _for2_exit
0146   04E8             _for2_block:
0147   04E8             ;; printf("Test %d, Result: %d\n", i, pass[i]); 
0148   04E8 FA ED FF      lea d, [bp + -19] ; $pass
0149   04EB D7            push a
0150   04EC DA            push d
0151   04ED FA EB FF      lea d, [bp + -21] ; $i
0152   04F0 2A            mov b, [d]
0153   04F1 E7            pop d
0154   04F2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0155   04F6 E4            pop a
0156   04F7 2A            mov b, [d]
0157   04F8 FD AB         swp b
0158   04FA D8            push b
0159   04FB FA EB FF      lea d, [bp + -21] ; $i
0160   04FE 2A            mov b, [d]
0161   04FF FD AB         swp b
0162   0501 D8            push b
0163   0502 26 67 22      mov b, _s0 ; "Test %d, Result: %d\n"
0164   0505 FD AB         swp b
0165   0507 D8            push b
0166   0508 07 C4 08      call printf
0167   050B 51 06 00      add sp, 6
0168   050E             _for2_update:
0169   050E FA EB FF      lea d, [bp + -21] ; $i
0170   0511 2A            mov b, [d]
0171   0512 D8            push b
0172   0513 FD 77         inc b
0173   0515 FA EB FF      lea d, [bp + -21] ; $i
0174   0518 FD 43         mov [d], b
0175   051A E5            pop b
0176   051B 0A D4 04      jmp _for2_cond
0177   051E             _for2_exit:
0178   051E 05 0B         syscall sys_terminate_proc
0179   0520             
0180   0520             strcpy:
0181   0520 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0182   0523             ;; char *psrc; 
0183   0523 52 02 00      sub sp, 2 ; psrc
0184   0526             ;; char *pdest; 
0185   0526 52 02 00      sub sp, 2 ; pdest
0186   0529             ;; psrc = src; 
0187   0529 FA FF FF      lea d, [bp + -1] ; $psrc
0188   052C DA            push d
0189   052D FA 07 00      lea d, [bp + 7] ; $src
0190   0530 2A            mov b, [d]
0191   0531 E7            pop d
0192   0532 FD 43         mov [d], b
0193   0534             ;; pdest = dest; 
0194   0534 FA FD FF      lea d, [bp + -3] ; $pdest
0195   0537 DA            push d
0196   0538 FA 05 00      lea d, [bp + 5] ; $dest
0197   053B 2A            mov b, [d]
0198   053C E7            pop d
0199   053D FD 43         mov [d], b
0200   053F             ;; while(*psrc) *pdest++ = *psrc++; 
0201   053F             _while3_cond:
0202   053F FA FF FF      lea d, [bp + -1] ; $psrc
0203   0542 2A            mov b, [d]
0204   0543 74            mov d, b
0205   0544 32            mov bl, [d]
0206   0545 A7 00         mov bh, 0
0207   0547 C0 00 00      cmp b, 0
0208   054A C6 72 05      je _while3_exit
0209   054D             _while3_block:
0210   054D             ;; *pdest++ = *psrc++; 
0211   054D FA FD FF      lea d, [bp + -3] ; $pdest
0212   0550 2A            mov b, [d]
0213   0551 D8            push b
0214   0552 FD 77         inc b
0215   0554 FA FD FF      lea d, [bp + -3] ; $pdest
0216   0557 FD 43         mov [d], b
0217   0559 E5            pop b
0218   055A D8            push b
0219   055B FA FF FF      lea d, [bp + -1] ; $psrc
0220   055E 2A            mov b, [d]
0221   055F D8            push b
0222   0560 FD 77         inc b
0223   0562 FA FF FF      lea d, [bp + -1] ; $psrc
0224   0565 FD 43         mov [d], b
0225   0567 E5            pop b
0226   0568 74            mov d, b
0227   0569 32            mov bl, [d]
0228   056A A7 00         mov bh, 0
0229   056C E7            pop d
0230   056D FD 3E         mov [d], bl
0231   056F 0A 3F 05      jmp _while3_cond
0232   0572             _while3_exit:
0233   0572             ;; *pdest = '\0'; 
0234   0572 FA FD FF      lea d, [bp + -3] ; $pdest
0235   0575 2A            mov b, [d]
0236   0576 D8            push b
0237   0577 26 00 00      mov b, $0
0238   057A E7            pop d
0239   057B FD 3E         mov [d], bl
0240   057D F9            leave
0241   057E 09            ret
0242   057F             
0243   057F             strcmp:
0244   057F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0245   0582             ;; while (*s1 && (*s1 == *s2)) { 
0246   0582             _while4_cond:
0247   0582 FA 05 00      lea d, [bp + 5] ; $s1
0248   0585 2A            mov b, [d]
0249   0586 74            mov d, b
0250   0587 32            mov bl, [d]
0251   0588 A7 00         mov bh, 0
0252   058A D7            push a
0253   058B 11            mov a, b
0254   058C FA 05 00      lea d, [bp + 5] ; $s1
0255   058F 2A            mov b, [d]
0256   0590 74            mov d, b
0257   0591 32            mov bl, [d]
0258   0592 A7 00         mov bh, 0
0259   0594             ; START RELATIONAL
0260   0594 D7            push a
0261   0595 11            mov a, b
0262   0596 FA 07 00      lea d, [bp + 7] ; $s2
0263   0599 2A            mov b, [d]
0264   059A 74            mov d, b
0265   059B 32            mov bl, [d]
0266   059C A7 00         mov bh, 0
0267   059E B0            cmp a, b
0268   059F FD 71         seq ; ==
0269   05A1 E4            pop a
0270   05A2             ; END RELATIONAL
0271   05A2 FD A7         sand a, b
0272   05A4 E4            pop a
0273   05A5 C0 00 00      cmp b, 0
0274   05A8 C6 C8 05      je _while4_exit
0275   05AB             _while4_block:
0276   05AB             ;; s1++; 
0277   05AB FA 05 00      lea d, [bp + 5] ; $s1
0278   05AE 2A            mov b, [d]
0279   05AF D8            push b
0280   05B0 FD 77         inc b
0281   05B2 FA 05 00      lea d, [bp + 5] ; $s1
0282   05B5 FD 43         mov [d], b
0283   05B7 E5            pop b
0284   05B8             ;; s2++; 
0285   05B8 FA 07 00      lea d, [bp + 7] ; $s2
0286   05BB 2A            mov b, [d]
0287   05BC D8            push b
0288   05BD FD 77         inc b
0289   05BF FA 07 00      lea d, [bp + 7] ; $s2
0290   05C2 FD 43         mov [d], b
0291   05C4 E5            pop b
0292   05C5 0A 82 05      jmp _while4_cond
0293   05C8             _while4_exit:
0294   05C8             ;; return *s1 - *s2; 
0295   05C8 FA 05 00      lea d, [bp + 5] ; $s1
0296   05CB 2A            mov b, [d]
0297   05CC 74            mov d, b
0298   05CD 32            mov bl, [d]
0299   05CE A7 00         mov bh, 0
0300   05D0             ; START TERMS
0301   05D0 D7            push a
0302   05D1 11            mov a, b
0303   05D2 FA 07 00      lea d, [bp + 7] ; $s2
0304   05D5 2A            mov b, [d]
0305   05D6 74            mov d, b
0306   05D7 32            mov bl, [d]
0307   05D8 A7 00         mov bh, 0
0308   05DA 60            sub a, b
0309   05DB 27            mov b, a
0310   05DC E4            pop a
0311   05DD             ; END TERMS
0312   05DD F9            leave
0313   05DE 09            ret
0314   05DF             
0315   05DF             strncmp:
0316   05DF F8 00 00      enter 0 ; (push bp; mov bp, sp)
0317   05E2 F9            leave
0318   05E3 09            ret
0319   05E4             
0320   05E4             strcat:
0321   05E4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0322   05E7             ;; int dest_len; 
0323   05E7 52 02 00      sub sp, 2 ; dest_len
0324   05EA             ;; int i; 
0325   05EA 52 02 00      sub sp, 2 ; i
0326   05ED             ;; dest_len = strlen(dest); 
0327   05ED FA FF FF      lea d, [bp + -1] ; $dest_len
0328   05F0 DA            push d
0329   05F1 FA 05 00      lea d, [bp + 5] ; $dest
0330   05F4 2A            mov b, [d]
0331   05F5 FD AB         swp b
0332   05F7 D8            push b
0333   05F8 07 9A 06      call strlen
0334   05FB 51 02 00      add sp, 2
0335   05FE E7            pop d
0336   05FF FD 43         mov [d], b
0337   0601             ;; for (i = 0; src[i] != 0; i=i+1) { 
0338   0601             _for5_init:
0339   0601 FA FD FF      lea d, [bp + -3] ; $i
0340   0604 DA            push d
0341   0605 26 00 00      mov b, $0
0342   0608 E7            pop d
0343   0609 FD 43         mov [d], b
0344   060B             _for5_cond:
0345   060B FA 07 00      lea d, [bp + 7] ; $src
0346   060E FD 2A         mov d, [d]
0347   0610 D7            push a
0348   0611 DA            push d
0349   0612 FA FD FF      lea d, [bp + -3] ; $i
0350   0615 2A            mov b, [d]
0351   0616 E7            pop d
0352   0617 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0353   061B E4            pop a
0354   061C 32            mov bl, [d]
0355   061D A7 00         mov bh, 0
0356   061F             ; START RELATIONAL
0357   061F D7            push a
0358   0620 11            mov a, b
0359   0621 26 00 00      mov b, $0
0360   0624 B0            cmp a, b
0361   0625 FD 72         sneq ; !=
0362   0627 E4            pop a
0363   0628             ; END RELATIONAL
0364   0628 C0 00 00      cmp b, 0
0365   062B C6 74 06      je _for5_exit
0366   062E             _for5_block:
0367   062E             ;; dest[dest_len + i] = src[i]; 
0368   062E FA 05 00      lea d, [bp + 5] ; $dest
0369   0631 FD 2A         mov d, [d]
0370   0633 D7            push a
0371   0634 DA            push d
0372   0635 FA FF FF      lea d, [bp + -1] ; $dest_len
0373   0638 2A            mov b, [d]
0374   0639             ; START TERMS
0375   0639 D7            push a
0376   063A 11            mov a, b
0377   063B FA FD FF      lea d, [bp + -3] ; $i
0378   063E 2A            mov b, [d]
0379   063F 56            add b, a
0380   0640 E4            pop a
0381   0641             ; END TERMS
0382   0641 E7            pop d
0383   0642 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0384   0646 E4            pop a
0385   0647 DA            push d
0386   0648 FA 07 00      lea d, [bp + 7] ; $src
0387   064B FD 2A         mov d, [d]
0388   064D D7            push a
0389   064E DA            push d
0390   064F FA FD FF      lea d, [bp + -3] ; $i
0391   0652 2A            mov b, [d]
0392   0653 E7            pop d
0393   0654 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0394   0658 E4            pop a
0395   0659 32            mov bl, [d]
0396   065A A7 00         mov bh, 0
0397   065C E7            pop d
0398   065D FD 3E         mov [d], bl
0399   065F             _for5_update:
0400   065F FA FD FF      lea d, [bp + -3] ; $i
0401   0662 DA            push d
0402   0663 FA FD FF      lea d, [bp + -3] ; $i
0403   0666 2A            mov b, [d]
0404   0667             ; START TERMS
0405   0667 D7            push a
0406   0668 11            mov a, b
0407   0669 26 01 00      mov b, $1
0408   066C 56            add b, a
0409   066D E4            pop a
0410   066E             ; END TERMS
0411   066E E7            pop d
0412   066F FD 43         mov [d], b
0413   0671 0A 0B 06      jmp _for5_cond
0414   0674             _for5_exit:
0415   0674             ;; dest[dest_len + i] = 0; 
0416   0674 FA 05 00      lea d, [bp + 5] ; $dest
0417   0677 FD 2A         mov d, [d]
0418   0679 D7            push a
0419   067A DA            push d
0420   067B FA FF FF      lea d, [bp + -1] ; $dest_len
0421   067E 2A            mov b, [d]
0422   067F             ; START TERMS
0423   067F D7            push a
0424   0680 11            mov a, b
0425   0681 FA FD FF      lea d, [bp + -3] ; $i
0426   0684 2A            mov b, [d]
0427   0685 56            add b, a
0428   0686 E4            pop a
0429   0687             ; END TERMS
0430   0687 E7            pop d
0431   0688 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0432   068C E4            pop a
0433   068D DA            push d
0434   068E 26 00 00      mov b, $0
0435   0691 E7            pop d
0436   0692 FD 3E         mov [d], bl
0437   0694             ;; return dest; 
0438   0694 FA 05 00      lea d, [bp + 5] ; $dest
0439   0697 2A            mov b, [d]
0440   0698 F9            leave
0441   0699 09            ret
0442   069A             
0443   069A             strlen:
0444   069A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0445   069D             ;; int length; 
0446   069D 52 02 00      sub sp, 2 ; length
0447   06A0             ;; length = 0; 
0448   06A0 FA FF FF      lea d, [bp + -1] ; $length
0449   06A3 DA            push d
0450   06A4 26 00 00      mov b, $0
0451   06A7 E7            pop d
0452   06A8 FD 43         mov [d], b
0453   06AA             ;; while (str[length] != 0) { 
0454   06AA             _while6_cond:
0455   06AA FA 05 00      lea d, [bp + 5] ; $str
0456   06AD FD 2A         mov d, [d]
0457   06AF D7            push a
0458   06B0 DA            push d
0459   06B1 FA FF FF      lea d, [bp + -1] ; $length
0460   06B4 2A            mov b, [d]
0461   06B5 E7            pop d
0462   06B6 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0463   06BA E4            pop a
0464   06BB 32            mov bl, [d]
0465   06BC A7 00         mov bh, 0
0466   06BE             ; START RELATIONAL
0467   06BE D7            push a
0468   06BF 11            mov a, b
0469   06C0 26 00 00      mov b, $0
0470   06C3 B0            cmp a, b
0471   06C4 FD 72         sneq ; !=
0472   06C6 E4            pop a
0473   06C7             ; END RELATIONAL
0474   06C7 C0 00 00      cmp b, 0
0475   06CA C6 DD 06      je _while6_exit
0476   06CD             _while6_block:
0477   06CD             ;; length++; 
0478   06CD FA FF FF      lea d, [bp + -1] ; $length
0479   06D0 2A            mov b, [d]
0480   06D1 D8            push b
0481   06D2 FD 77         inc b
0482   06D4 FA FF FF      lea d, [bp + -1] ; $length
0483   06D7 FD 43         mov [d], b
0484   06D9 E5            pop b
0485   06DA 0A AA 06      jmp _while6_cond
0486   06DD             _while6_exit:
0487   06DD             ;; return length; 
0488   06DD FA FF FF      lea d, [bp + -1] ; $length
0489   06E0 2A            mov b, [d]
0490   06E1 F9            leave
0491   06E2 09            ret
0492   06E3             
0493   06E3             exit:
0494   06E3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0495   06E6             
0496   06E6             ; --- BEGIN INLINE ASM BLOCK
0497   06E6 05 0B         syscall sys_terminate_proc
0498   06E8             ; --- END INLINE ASM BLOCK
0499   06E8             
0500   06E8 F9            leave
0501   06E9 09            ret
0502   06EA             
0503   06EA             memset:
0504   06EA F8 00 00      enter 0 ; (push bp; mov bp, sp)
0505   06ED             ;; int i; 
0506   06ED 52 02 00      sub sp, 2 ; i
0507   06F0             ;; for(i = 0; i < size; i++){ 
0508   06F0             _for7_init:
0509   06F0 FA FF FF      lea d, [bp + -1] ; $i
0510   06F3 DA            push d
0511   06F4 26 00 00      mov b, $0
0512   06F7 E7            pop d
0513   06F8 FD 43         mov [d], b
0514   06FA             _for7_cond:
0515   06FA FA FF FF      lea d, [bp + -1] ; $i
0516   06FD 2A            mov b, [d]
0517   06FE             ; START RELATIONAL
0518   06FE D7            push a
0519   06FF 11            mov a, b
0520   0700 FA 08 00      lea d, [bp + 8] ; $size
0521   0703 2A            mov b, [d]
0522   0704 B0            cmp a, b
0523   0705 FD 73         slt ; < (signed)
0524   0707 E4            pop a
0525   0708             ; END RELATIONAL
0526   0708 C0 00 00      cmp b, 0
0527   070B C6 34 07      je _for7_exit
0528   070E             _for7_block:
0529   070E             ;; *(s+i) = c; 
0530   070E FA 05 00      lea d, [bp + 5] ; $s
0531   0711 2A            mov b, [d]
0532   0712             ; START TERMS
0533   0712 D7            push a
0534   0713 11            mov a, b
0535   0714 FA FF FF      lea d, [bp + -1] ; $i
0536   0717 2A            mov b, [d]
0537   0718 56            add b, a
0538   0719 E4            pop a
0539   071A             ; END TERMS
0540   071A D8            push b
0541   071B FA 07 00      lea d, [bp + 7] ; $c
0542   071E 32            mov bl, [d]
0543   071F A7 00         mov bh, 0
0544   0721 E7            pop d
0545   0722 FD 3E         mov [d], bl
0546   0724             _for7_update:
0547   0724 FA FF FF      lea d, [bp + -1] ; $i
0548   0727 2A            mov b, [d]
0549   0728 D8            push b
0550   0729 FD 77         inc b
0551   072B FA FF FF      lea d, [bp + -1] ; $i
0552   072E FD 43         mov [d], b
0553   0730 E5            pop b
0554   0731 0A FA 06      jmp _for7_cond
0555   0734             _for7_exit:
0556   0734             ;; return s; 
0557   0734 FA 05 00      lea d, [bp + 5] ; $s
0558   0737 2A            mov b, [d]
0559   0738 F9            leave
0560   0739 09            ret
0561   073A             
0562   073A             atoi:
0563   073A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0564   073D             ;; int result = 0;  // Initialize result 
0565   073D 52 02 00      sub sp, 2 ; result
0566   0740             ; --- START LOCAL VAR INITIALIZATION
0567   0740 FA FF FF      lea d, [bp + -1] ; $result
0568   0743 DA            push d
0569   0744 26 00 00      mov b, $0
0570   0747 E7            pop d
0571   0748 FD 43         mov [d], b
0572   074A             ; --- END LOCAL VAR INITIALIZATION
0573   074A             ;; int sign = 1;    // Initialize sign as positive 
0574   074A 52 02 00      sub sp, 2 ; sign
0575   074D             ; --- START LOCAL VAR INITIALIZATION
0576   074D FA FD FF      lea d, [bp + -3] ; $sign
0577   0750 DA            push d
0578   0751 26 01 00      mov b, $1
0579   0754 E7            pop d
0580   0755 FD 43         mov [d], b
0581   0757             ; --- END LOCAL VAR INITIALIZATION
0582   0757             ;; while (*str == ' ') str++; 
0583   0757             _while8_cond:
0584   0757 FA 05 00      lea d, [bp + 5] ; $str
0585   075A 2A            mov b, [d]
0586   075B 74            mov d, b
0587   075C 32            mov bl, [d]
0588   075D A7 00         mov bh, 0
0589   075F             ; START RELATIONAL
0590   075F D7            push a
0591   0760 11            mov a, b
0592   0761 26 20 00      mov b, $20
0593   0764 B0            cmp a, b
0594   0765 FD 71         seq ; ==
0595   0767 E4            pop a
0596   0768             ; END RELATIONAL
0597   0768 C0 00 00      cmp b, 0
0598   076B C6 7E 07      je _while8_exit
0599   076E             _while8_block:
0600   076E             ;; str++; 
0601   076E FA 05 00      lea d, [bp + 5] ; $str
0602   0771 2A            mov b, [d]
0603   0772 D8            push b
0604   0773 FD 77         inc b
0605   0775 FA 05 00      lea d, [bp + 5] ; $str
0606   0778 FD 43         mov [d], b
0607   077A E5            pop b
0608   077B 0A 57 07      jmp _while8_cond
0609   077E             _while8_exit:
0610   077E             ;; if (*str == '-' || *str == '+') { 
0611   077E             _if9_cond:
0612   077E FA 05 00      lea d, [bp + 5] ; $str
0613   0781 2A            mov b, [d]
0614   0782 74            mov d, b
0615   0783 32            mov bl, [d]
0616   0784 A7 00         mov bh, 0
0617   0786             ; START RELATIONAL
0618   0786 D7            push a
0619   0787 11            mov a, b
0620   0788 26 2D 00      mov b, $2d
0621   078B B0            cmp a, b
0622   078C FD 71         seq ; ==
0623   078E E4            pop a
0624   078F             ; END RELATIONAL
0625   078F D7            push a
0626   0790 11            mov a, b
0627   0791 FA 05 00      lea d, [bp + 5] ; $str
0628   0794 2A            mov b, [d]
0629   0795 74            mov d, b
0630   0796 32            mov bl, [d]
0631   0797 A7 00         mov bh, 0
0632   0799             ; START RELATIONAL
0633   0799 D7            push a
0634   079A 11            mov a, b
0635   079B 26 2B 00      mov b, $2b
0636   079E B0            cmp a, b
0637   079F FD 71         seq ; ==
0638   07A1 E4            pop a
0639   07A2             ; END RELATIONAL
0640   07A2 FD A8         sor a, b ; ||
0641   07A4 E4            pop a
0642   07A5 C0 00 00      cmp b, 0
0643   07A8 C6 DF 07      je _if9_exit
0644   07AB             _if9_true:
0645   07AB             ;; if (*str == '-') sign = -1; 
0646   07AB             _if10_cond:
0647   07AB FA 05 00      lea d, [bp + 5] ; $str
0648   07AE 2A            mov b, [d]
0649   07AF 74            mov d, b
0650   07B0 32            mov bl, [d]
0651   07B1 A7 00         mov bh, 0
0652   07B3             ; START RELATIONAL
0653   07B3 D7            push a
0654   07B4 11            mov a, b
0655   07B5 26 2D 00      mov b, $2d
0656   07B8 B0            cmp a, b
0657   07B9 FD 71         seq ; ==
0658   07BB E4            pop a
0659   07BC             ; END RELATIONAL
0660   07BC C0 00 00      cmp b, 0
0661   07BF C6 CF 07      je _if10_exit
0662   07C2             _if10_true:
0663   07C2             ;; sign = -1; 
0664   07C2 FA FD FF      lea d, [bp + -3] ; $sign
0665   07C5 DA            push d
0666   07C6 26 FF FF      mov b, $ffff
0667   07C9 E7            pop d
0668   07CA FD 43         mov [d], b
0669   07CC 0A CF 07      jmp _if10_exit
0670   07CF             _if10_exit:
0671   07CF             ;; str++; 
0672   07CF FA 05 00      lea d, [bp + 5] ; $str
0673   07D2 2A            mov b, [d]
0674   07D3 D8            push b
0675   07D4 FD 77         inc b
0676   07D6 FA 05 00      lea d, [bp + 5] ; $str
0677   07D9 FD 43         mov [d], b
0678   07DB E5            pop b
0679   07DC 0A DF 07      jmp _if9_exit
0680   07DF             _if9_exit:
0681   07DF             ;; while (*str >= '0' && *str <= '9') { 
0682   07DF             _while11_cond:
0683   07DF FA 05 00      lea d, [bp + 5] ; $str
0684   07E2 2A            mov b, [d]
0685   07E3 74            mov d, b
0686   07E4 32            mov bl, [d]
0687   07E5 A7 00         mov bh, 0
0688   07E7             ; START RELATIONAL
0689   07E7 D7            push a
0690   07E8 11            mov a, b
0691   07E9 26 30 00      mov b, $30
0692   07EC B0            cmp a, b
0693   07ED FD 82         sgeu ; >= (unsigned)
0694   07EF E4            pop a
0695   07F0             ; END RELATIONAL
0696   07F0 D7            push a
0697   07F1 11            mov a, b
0698   07F2 FA 05 00      lea d, [bp + 5] ; $str
0699   07F5 2A            mov b, [d]
0700   07F6 74            mov d, b
0701   07F7 32            mov bl, [d]
0702   07F8 A7 00         mov bh, 0
0703   07FA             ; START RELATIONAL
0704   07FA D7            push a
0705   07FB 11            mov a, b
0706   07FC 26 39 00      mov b, $39
0707   07FF B0            cmp a, b
0708   0800 FD 75         slu ; <= (unsigned)
0709   0802 E4            pop a
0710   0803             ; END RELATIONAL
0711   0803 FD A7         sand a, b
0712   0805 E4            pop a
0713   0806 C0 00 00      cmp b, 0
0714   0809 C6 44 08      je _while11_exit
0715   080C             _while11_block:
0716   080C             ;; result = result * 10 + (*str - '0'); 
0717   080C FA FF FF      lea d, [bp + -1] ; $result
0718   080F DA            push d
0719   0810 FA FF FF      lea d, [bp + -1] ; $result
0720   0813 2A            mov b, [d]
0721   0814             ; START FACTORS
0722   0814 D7            push a
0723   0815 11            mov a, b
0724   0816 26 0A 00      mov b, $a
0725   0819 AC            mul a, b ; *
0726   081A 11            mov a, b
0727   081B 27            mov b, a
0728   081C E4            pop a
0729   081D             ; END FACTORS
0730   081D             ; START TERMS
0731   081D D7            push a
0732   081E 11            mov a, b
0733   081F FA 05 00      lea d, [bp + 5] ; $str
0734   0822 2A            mov b, [d]
0735   0823 74            mov d, b
0736   0824 32            mov bl, [d]
0737   0825 A7 00         mov bh, 0
0738   0827             ; START TERMS
0739   0827 D7            push a
0740   0828 11            mov a, b
0741   0829 26 30 00      mov b, $30
0742   082C 60            sub a, b
0743   082D 27            mov b, a
0744   082E E4            pop a
0745   082F             ; END TERMS
0746   082F 56            add b, a
0747   0830 E4            pop a
0748   0831             ; END TERMS
0749   0831 E7            pop d
0750   0832 FD 43         mov [d], b
0751   0834             ;; str++; 
0752   0834 FA 05 00      lea d, [bp + 5] ; $str
0753   0837 2A            mov b, [d]
0754   0838 D8            push b
0755   0839 FD 77         inc b
0756   083B FA 05 00      lea d, [bp + 5] ; $str
0757   083E FD 43         mov [d], b
0758   0840 E5            pop b
0759   0841 0A DF 07      jmp _while11_cond
0760   0844             _while11_exit:
0761   0844             ;; return sign * result; 
0762   0844 FA FD FF      lea d, [bp + -3] ; $sign
0763   0847 2A            mov b, [d]
0764   0848             ; START FACTORS
0765   0848 D7            push a
0766   0849 11            mov a, b
0767   084A FA FF FF      lea d, [bp + -1] ; $result
0768   084D 2A            mov b, [d]
0769   084E AC            mul a, b ; *
0770   084F 11            mov a, b
0771   0850 27            mov b, a
0772   0851 E4            pop a
0773   0852             ; END FACTORS
0774   0852 F9            leave
0775   0853 09            ret
0776   0854             
0777   0854             rand:
0778   0854 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0779   0857             ;; int  sec; 
0780   0857 52 02 00      sub sp, 2 ; sec
0781   085A             
0782   085A             ; --- BEGIN INLINE ASM BLOCK
0783   085A 19 00         mov al, 0
0784   085C 05 01         syscall sys_rtc					
0785   085E 1A            mov al, ah
0786   085F FA FF FF      lea d, [bp + -1] ; $sec
0787   0862 1E            mov al, [d]
0788   0863 22 00         mov ah, 0
0789   0865             ; --- END INLINE ASM BLOCK
0790   0865             
0791   0865             ;; return sec; 
0792   0865 FA FF FF      lea d, [bp + -1] ; $sec
0793   0868 2A            mov b, [d]
0794   0869 F9            leave
0795   086A 09            ret
0796   086B             
0797   086B             alloc:
0798   086B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0799   086E             ;; heap_top = heap_top + bytes; 
0800   086E 3B C0 22      mov d, _heap_top ; $heap_top
0801   0871 DA            push d
0802   0872 3B C0 22      mov d, _heap_top ; $heap_top
0803   0875 2A            mov b, [d]
0804   0876             ; START TERMS
0805   0876 D7            push a
0806   0877 11            mov a, b
0807   0878 FA 05 00      lea d, [bp + 5] ; $bytes
0808   087B 2A            mov b, [d]
0809   087C 56            add b, a
0810   087D E4            pop a
0811   087E             ; END TERMS
0812   087E E7            pop d
0813   087F FD 43         mov [d], b
0814   0881             ;; return heap_top - bytes; 
0815   0881 3B C0 22      mov d, _heap_top ; $heap_top
0816   0884 2A            mov b, [d]
0817   0885             ; START TERMS
0818   0885 D7            push a
0819   0886 11            mov a, b
0820   0887 FA 05 00      lea d, [bp + 5] ; $bytes
0821   088A 2A            mov b, [d]
0822   088B 60            sub a, b
0823   088C 27            mov b, a
0824   088D E4            pop a
0825   088E             ; END TERMS
0826   088E F9            leave
0827   088F 09            ret
0828   0890             
0829   0890             free:
0830   0890 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0831   0893             ;; return heap_top = heap_top - bytes; 
0832   0893 3B C0 22      mov d, _heap_top ; $heap_top
0833   0896 DA            push d
0834   0897 3B C0 22      mov d, _heap_top ; $heap_top
0835   089A 2A            mov b, [d]
0836   089B             ; START TERMS
0837   089B D7            push a
0838   089C 11            mov a, b
0839   089D FA 05 00      lea d, [bp + 5] ; $bytes
0840   08A0 2A            mov b, [d]
0841   08A1 60            sub a, b
0842   08A2 27            mov b, a
0843   08A3 E4            pop a
0844   08A4             ; END TERMS
0845   08A4 E7            pop d
0846   08A5 FD 43         mov [d], b
0847   08A7 F9            leave
0848   08A8 09            ret
0849   08A9             
0850   08A9             fopen:
0851   08A9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0852   08AC             ;; FILE *fp; 
0853   08AC 52 02 00      sub sp, 2 ; fp
0854   08AF             ;; fp = alloc(sizeof(int)); 
0855   08AF FA FF FF      lea d, [bp + -1] ; $fp
0856   08B2 DA            push d
0857   08B3 26 02 00      mov b, 2
0858   08B6 FD AB         swp b
0859   08B8 D8            push b
0860   08B9 07 6B 08      call alloc
0861   08BC 51 02 00      add sp, 2
0862   08BF E7            pop d
0863   08C0 FD 43         mov [d], b
0864   08C2 F9            leave
0865   08C3 09            ret
0866   08C4             
0867   08C4             printf:
0868   08C4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0869   08C7             ;; char *p, *format_p; 
0870   08C7 52 02 00      sub sp, 2 ; p
0871   08CA 52 02 00      sub sp, 2 ; format_p
0872   08CD             ;; format_p = format; 
0873   08CD FA FD FF      lea d, [bp + -3] ; $format_p
0874   08D0 DA            push d
0875   08D1 FA 05 00      lea d, [bp + 5] ; $format
0876   08D4 2A            mov b, [d]
0877   08D5 E7            pop d
0878   08D6 FD 43         mov [d], b
0879   08D8             ;; p = &format + 2; 
0880   08D8 FA FF FF      lea d, [bp + -1] ; $p
0881   08DB DA            push d
0882   08DC FA 05 00      lea d, [bp + 5] ; $format
0883   08DF 2D            mov b, d
0884   08E0             ; START TERMS
0885   08E0 D7            push a
0886   08E1 11            mov a, b
0887   08E2 26 02 00      mov b, $2
0888   08E5 56            add b, a
0889   08E6 E4            pop a
0890   08E7             ; END TERMS
0891   08E7 E7            pop d
0892   08E8 FD 43         mov [d], b
0893   08EA             ;; for(;;){ 
0894   08EA             _for12_init:
0895   08EA             _for12_cond:
0896   08EA             _for12_block:
0897   08EA             ;; if(!*format_p) break; 
0898   08EA             _if13_cond:
0899   08EA FA FD FF      lea d, [bp + -3] ; $format_p
0900   08ED 2A            mov b, [d]
0901   08EE 74            mov d, b
0902   08EF 32            mov bl, [d]
0903   08F0 A7 00         mov bh, 0
0904   08F2 C0 00 00      cmp b, 0
0905   08F5 FD 71         seq ; !
0906   08F7 C0 00 00      cmp b, 0
0907   08FA C6 03 09      je _if13_else
0908   08FD             _if13_true:
0909   08FD             ;; break; 
0910   08FD 0A 2A 0B      jmp _for12_exit ; for break
0911   0900 0A 27 0B      jmp _if13_exit
0912   0903             _if13_else:
0913   0903             ;; if(*format_p == '%'){ 
0914   0903             _if14_cond:
0915   0903 FA FD FF      lea d, [bp + -3] ; $format_p
0916   0906 2A            mov b, [d]
0917   0907 74            mov d, b
0918   0908 32            mov bl, [d]
0919   0909 A7 00         mov bh, 0
0920   090B             ; START RELATIONAL
0921   090B D7            push a
0922   090C 11            mov a, b
0923   090D 26 25 00      mov b, $25
0924   0910 B0            cmp a, b
0925   0911 FD 71         seq ; ==
0926   0913 E4            pop a
0927   0914             ; END RELATIONAL
0928   0914 C0 00 00      cmp b, 0
0929   0917 C6 0B 0B      je _if14_else
0930   091A             _if14_true:
0931   091A             ;; format_p++; 
0932   091A FA FD FF      lea d, [bp + -3] ; $format_p
0933   091D 2A            mov b, [d]
0934   091E D8            push b
0935   091F FD 77         inc b
0936   0921 FA FD FF      lea d, [bp + -3] ; $format_p
0937   0924 FD 43         mov [d], b
0938   0926 E5            pop b
0939   0927             ;; switch(*format_p){ 
0940   0927             _switch15_expr:
0941   0927 FA FD FF      lea d, [bp + -3] ; $format_p
0942   092A 2A            mov b, [d]
0943   092B 74            mov d, b
0944   092C 32            mov bl, [d]
0945   092D A7 00         mov bh, 0
0946   092F             _switch15_comparisons:
0947   092F C1 6C         cmp bl, $6c
0948   0931 C6 5D 09      je _switch15_case0
0949   0934 C1 4C         cmp bl, $4c
0950   0936 C6 5D 09      je _switch15_case1
0951   0939 C1 64         cmp bl, $64
0952   093B C6 4B 0A      je _switch15_case2
0953   093E C1 69         cmp bl, $69
0954   0940 C6 4B 0A      je _switch15_case3
0955   0943 C1 75         cmp bl, $75
0956   0945 C6 6F 0A      je _switch15_case4
0957   0948 C1 78         cmp bl, $78
0958   094A C6 93 0A      je _switch15_case5
0959   094D C1 63         cmp bl, $63
0960   094F C6 B1 0A      je _switch15_case6
0961   0952 C1 73         cmp bl, $73
0962   0954 C6 D0 0A      je _switch15_case7
0963   0957 0A EF 0A      jmp _switch15_default
0964   095A 0A FB 0A      jmp _switch15_exit
0965   095D             _switch15_case0:
0966   095D             _switch15_case1:
0967   095D             ;; format_p++; 
0968   095D FA FD FF      lea d, [bp + -3] ; $format_p
0969   0960 2A            mov b, [d]
0970   0961 D8            push b
0971   0962 FD 77         inc b
0972   0964 FA FD FF      lea d, [bp + -3] ; $format_p
0973   0967 FD 43         mov [d], b
0974   0969 E5            pop b
0975   096A             ;; if(*format_p == 'd' || *format_p == 'i') 
0976   096A             _if16_cond:
0977   096A FA FD FF      lea d, [bp + -3] ; $format_p
0978   096D 2A            mov b, [d]
0979   096E 74            mov d, b
0980   096F 32            mov bl, [d]
0981   0970 A7 00         mov bh, 0
0982   0972             ; START RELATIONAL
0983   0972 D7            push a
0984   0973 11            mov a, b
0985   0974 26 64 00      mov b, $64
0986   0977 B0            cmp a, b
0987   0978 FD 71         seq ; ==
0988   097A E4            pop a
0989   097B             ; END RELATIONAL
0990   097B D7            push a
0991   097C 11            mov a, b
0992   097D FA FD FF      lea d, [bp + -3] ; $format_p
0993   0980 2A            mov b, [d]
0994   0981 74            mov d, b
0995   0982 32            mov bl, [d]
0996   0983 A7 00         mov bh, 0
0997   0985             ; START RELATIONAL
0998   0985 D7            push a
0999   0986 11            mov a, b
1000   0987 26 69 00      mov b, $69
1001   098A B0            cmp a, b
1002   098B FD 71         seq ; ==
1003   098D E4            pop a
1004   098E             ; END RELATIONAL
1005   098E FD A8         sor a, b ; ||
1006   0990 E4            pop a
1007   0991 C0 00 00      cmp b, 0
1008   0994 C6 B9 09      je _if16_else
1009   0997             _if16_true:
1010   0997             ;; print_signed_long(*(long *)p); 
1011   0997 FA FF FF      lea d, [bp + -1] ; $p
1012   099A 2A            mov b, [d]
1013   099B AB            snex b
1014   099C FD 39         mov c, b
1015   099E 74            mov d, b
1016   099F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1017   09A2 FD 39         mov c, b ; And place it into C
1018   09A4 2A            mov b, [d] ; Lower Word in B
1019   09A5 FD 79         mov g, b
1020   09A7 28            mov b, c
1021   09A8 FD AB         swp b
1022   09AA D8            push b
1023   09AB FD 27         mov b, g
1024   09AD FD AB         swp b
1025   09AF D8            push b
1026   09B0 07 10 10      call print_signed_long
1027   09B3 51 04 00      add sp, 4
1028   09B6 0A 36 0A      jmp _if16_exit
1029   09B9             _if16_else:
1030   09B9             ;; if(*format_p == 'u') 
1031   09B9             _if17_cond:
1032   09B9 FA FD FF      lea d, [bp + -3] ; $format_p
1033   09BC 2A            mov b, [d]
1034   09BD 74            mov d, b
1035   09BE 32            mov bl, [d]
1036   09BF A7 00         mov bh, 0
1037   09C1             ; START RELATIONAL
1038   09C1 D7            push a
1039   09C2 11            mov a, b
1040   09C3 26 75 00      mov b, $75
1041   09C6 B0            cmp a, b
1042   09C7 FD 71         seq ; ==
1043   09C9 E4            pop a
1044   09CA             ; END RELATIONAL
1045   09CA C0 00 00      cmp b, 0
1046   09CD C6 F4 09      je _if17_else
1047   09D0             _if17_true:
1048   09D0             ;; print_unsigned_long(*(unsigned long *)p); 
1049   09D0 FA FF FF      lea d, [bp + -1] ; $p
1050   09D3 2A            mov b, [d]
1051   09D4 A7 00         mov bh, 0
1052   09D6 38 00 00      mov c, 0
1053   09D9 74            mov d, b
1054   09DA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1055   09DD FD 39         mov c, b ; And place it into C
1056   09DF 2A            mov b, [d] ; Lower Word in B
1057   09E0 FD 79         mov g, b
1058   09E2 28            mov b, c
1059   09E3 FD AB         swp b
1060   09E5 D8            push b
1061   09E6 FD 27         mov b, g
1062   09E8 FD AB         swp b
1063   09EA D8            push b
1064   09EB 07 50 13      call print_unsigned_long
1065   09EE 51 04 00      add sp, 4
1066   09F1 0A 36 0A      jmp _if17_exit
1067   09F4             _if17_else:
1068   09F4             ;; if(*format_p == 'x') 
1069   09F4             _if18_cond:
1070   09F4 FA FD FF      lea d, [bp + -3] ; $format_p
1071   09F7 2A            mov b, [d]
1072   09F8 74            mov d, b
1073   09F9 32            mov bl, [d]
1074   09FA A7 00         mov bh, 0
1075   09FC             ; START RELATIONAL
1076   09FC D7            push a
1077   09FD 11            mov a, b
1078   09FE 26 78 00      mov b, $78
1079   0A01 B0            cmp a, b
1080   0A02 FD 71         seq ; ==
1081   0A04 E4            pop a
1082   0A05             ; END RELATIONAL
1083   0A05 C0 00 00      cmp b, 0
1084   0A08 C6 2A 0A      je _if18_else
1085   0A0B             _if18_true:
1086   0A0B             ;; printx32(*(long int *)p); 
1087   0A0B FA FF FF      lea d, [bp + -1] ; $p
1088   0A0E 2A            mov b, [d]
1089   0A0F 74            mov d, b
1090   0A10 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1091   0A13 FD 39         mov c, b ; And place it into C
1092   0A15 2A            mov b, [d] ; Lower Word in B
1093   0A16 FD 79         mov g, b
1094   0A18 28            mov b, c
1095   0A19 FD AB         swp b
1096   0A1B D8            push b
1097   0A1C FD 27         mov b, g
1098   0A1E FD AB         swp b
1099   0A20 D8            push b
1100   0A21 07 85 0D      call printx32
1101   0A24 51 04 00      add sp, 4
1102   0A27 0A 36 0A      jmp _if18_exit
1103   0A2A             _if18_else:
1104   0A2A             ;; err("Unexpected format in printf."); 
1105   0A2A 26 7C 22      mov b, _s1 ; "Unexpected format in printf."
1106   0A2D FD AB         swp b
1107   0A2F D8            push b
1108   0A30 07 73 0D      call err
1109   0A33 51 02 00      add sp, 2
1110   0A36             _if18_exit:
1111   0A36             _if17_exit:
1112   0A36             _if16_exit:
1113   0A36             ;; p = p + 4; 
1114   0A36 FA FF FF      lea d, [bp + -1] ; $p
1115   0A39 DA            push d
1116   0A3A FA FF FF      lea d, [bp + -1] ; $p
1117   0A3D 2A            mov b, [d]
1118   0A3E             ; START TERMS
1119   0A3E D7            push a
1120   0A3F 11            mov a, b
1121   0A40 26 04 00      mov b, $4
1122   0A43 56            add b, a
1123   0A44 E4            pop a
1124   0A45             ; END TERMS
1125   0A45 E7            pop d
1126   0A46 FD 43         mov [d], b
1127   0A48             ;; break; 
1128   0A48 0A FB 0A      jmp _switch15_exit ; case break
1129   0A4B             _switch15_case2:
1130   0A4B             _switch15_case3:
1131   0A4B             ;; print_signed(*(int*)p); 
1132   0A4B FA FF FF      lea d, [bp + -1] ; $p
1133   0A4E 2A            mov b, [d]
1134   0A4F 74            mov d, b
1135   0A50 2A            mov b, [d]
1136   0A51 FD AB         swp b
1137   0A53 D8            push b
1138   0A54 07 19 0F      call print_signed
1139   0A57 51 02 00      add sp, 2
1140   0A5A             ;; p = p + 2; 
1141   0A5A FA FF FF      lea d, [bp + -1] ; $p
1142   0A5D DA            push d
1143   0A5E FA FF FF      lea d, [bp + -1] ; $p
1144   0A61 2A            mov b, [d]
1145   0A62             ; START TERMS
1146   0A62 D7            push a
1147   0A63 11            mov a, b
1148   0A64 26 02 00      mov b, $2
1149   0A67 56            add b, a
1150   0A68 E4            pop a
1151   0A69             ; END TERMS
1152   0A69 E7            pop d
1153   0A6A FD 43         mov [d], b
1154   0A6C             ;; break; 
1155   0A6C 0A FB 0A      jmp _switch15_exit ; case break
1156   0A6F             _switch15_case4:
1157   0A6F             ;; print_unsigned(*(unsigned int*)p); 
1158   0A6F FA FF FF      lea d, [bp + -1] ; $p
1159   0A72 2A            mov b, [d]
1160   0A73 74            mov d, b
1161   0A74 2A            mov b, [d]
1162   0A75 FD AB         swp b
1163   0A77 D8            push b
1164   0A78 07 4B 15      call print_unsigned
1165   0A7B 51 02 00      add sp, 2
1166   0A7E             ;; p = p + 2; 
1167   0A7E FA FF FF      lea d, [bp + -1] ; $p
1168   0A81 DA            push d
1169   0A82 FA FF FF      lea d, [bp + -1] ; $p
1170   0A85 2A            mov b, [d]
1171   0A86             ; START TERMS
1172   0A86 D7            push a
1173   0A87 11            mov a, b
1174   0A88 26 02 00      mov b, $2
1175   0A8B 56            add b, a
1176   0A8C E4            pop a
1177   0A8D             ; END TERMS
1178   0A8D E7            pop d
1179   0A8E FD 43         mov [d], b
1180   0A90             ;; break; 
1181   0A90 0A FB 0A      jmp _switch15_exit ; case break
1182   0A93             _switch15_case5:
1183   0A93             
1184   0A93             ; --- BEGIN INLINE ASM BLOCK
1185   0A93 FA FF FF      lea d, [bp + -1] ; $p
1186   0A96 FD 2A         mov d, [d]
1187   0A98 2A            mov b, [d]
1188   0A99 07 51 19      call print_u16x
1189   0A9C             ; --- END INLINE ASM BLOCK
1190   0A9C             
1191   0A9C             ;; p = p + 2; 
1192   0A9C FA FF FF      lea d, [bp + -1] ; $p
1193   0A9F DA            push d
1194   0AA0 FA FF FF      lea d, [bp + -1] ; $p
1195   0AA3 2A            mov b, [d]
1196   0AA4             ; START TERMS
1197   0AA4 D7            push a
1198   0AA5 11            mov a, b
1199   0AA6 26 02 00      mov b, $2
1200   0AA9 56            add b, a
1201   0AAA E4            pop a
1202   0AAB             ; END TERMS
1203   0AAB E7            pop d
1204   0AAC FD 43         mov [d], b
1205   0AAE             ;; break; 
1206   0AAE 0A FB 0A      jmp _switch15_exit ; case break
1207   0AB1             _switch15_case6:
1208   0AB1             
1209   0AB1             ; --- BEGIN INLINE ASM BLOCK
1210   0AB1 FA FF FF      lea d, [bp + -1] ; $p
1211   0AB4 FD 2A         mov d, [d]
1212   0AB6 1E            mov al, [d]
1213   0AB7 23            mov ah, al
1214   0AB8 07 AF 17      call _putchar
1215   0ABB             ; --- END INLINE ASM BLOCK
1216   0ABB             
1217   0ABB             ;; p = p + 2; 
1218   0ABB FA FF FF      lea d, [bp + -1] ; $p
1219   0ABE DA            push d
1220   0ABF FA FF FF      lea d, [bp + -1] ; $p
1221   0AC2 2A            mov b, [d]
1222   0AC3             ; START TERMS
1223   0AC3 D7            push a
1224   0AC4 11            mov a, b
1225   0AC5 26 02 00      mov b, $2
1226   0AC8 56            add b, a
1227   0AC9 E4            pop a
1228   0ACA             ; END TERMS
1229   0ACA E7            pop d
1230   0ACB FD 43         mov [d], b
1231   0ACD             ;; break; 
1232   0ACD 0A FB 0A      jmp _switch15_exit ; case break
1233   0AD0             _switch15_case7:
1234   0AD0             
1235   0AD0             ; --- BEGIN INLINE ASM BLOCK
1236   0AD0 FA FF FF      lea d, [bp + -1] ; $p
1237   0AD3 FD 2A         mov d, [d]
1238   0AD5 FD 2A         mov d, [d]
1239   0AD7 07 F9 18      call _puts
1240   0ADA             ; --- END INLINE ASM BLOCK
1241   0ADA             
1242   0ADA             ;; p = p + 2; 
1243   0ADA FA FF FF      lea d, [bp + -1] ; $p
1244   0ADD DA            push d
1245   0ADE FA FF FF      lea d, [bp + -1] ; $p
1246   0AE1 2A            mov b, [d]
1247   0AE2             ; START TERMS
1248   0AE2 D7            push a
1249   0AE3 11            mov a, b
1250   0AE4 26 02 00      mov b, $2
1251   0AE7 56            add b, a
1252   0AE8 E4            pop a
1253   0AE9             ; END TERMS
1254   0AE9 E7            pop d
1255   0AEA FD 43         mov [d], b
1256   0AEC             ;; break; 
1257   0AEC 0A FB 0A      jmp _switch15_exit ; case break
1258   0AEF             _switch15_default:
1259   0AEF             ;; print("Error: Unknown argument type.\n"); 
1260   0AEF 26 99 22      mov b, _s2 ; "Error: Unknown argument type.\n"
1261   0AF2 FD AB         swp b
1262   0AF4 D8            push b
1263   0AF5 07 66 16      call print
1264   0AF8 51 02 00      add sp, 2
1265   0AFB             _switch15_exit:
1266   0AFB             ;; format_p++; 
1267   0AFB FA FD FF      lea d, [bp + -3] ; $format_p
1268   0AFE 2A            mov b, [d]
1269   0AFF D8            push b
1270   0B00 FD 77         inc b
1271   0B02 FA FD FF      lea d, [bp + -3] ; $format_p
1272   0B05 FD 43         mov [d], b
1273   0B07 E5            pop b
1274   0B08 0A 27 0B      jmp _if14_exit
1275   0B0B             _if14_else:
1276   0B0B             ;; putchar(*format_p); 
1277   0B0B FA FD FF      lea d, [bp + -3] ; $format_p
1278   0B0E 2A            mov b, [d]
1279   0B0F 74            mov d, b
1280   0B10 32            mov bl, [d]
1281   0B11 A7 00         mov bh, 0
1282   0B13 DD            push bl
1283   0B14 07 1E 16      call putchar
1284   0B17 51 01 00      add sp, 1
1285   0B1A             ;; format_p++; 
1286   0B1A FA FD FF      lea d, [bp + -3] ; $format_p
1287   0B1D 2A            mov b, [d]
1288   0B1E D8            push b
1289   0B1F FD 77         inc b
1290   0B21 FA FD FF      lea d, [bp + -3] ; $format_p
1291   0B24 FD 43         mov [d], b
1292   0B26 E5            pop b
1293   0B27             _if14_exit:
1294   0B27             _if13_exit:
1295   0B27             _for12_update:
1296   0B27 0A EA 08      jmp _for12_cond
1297   0B2A             _for12_exit:
1298   0B2A F9            leave
1299   0B2B 09            ret
1300   0B2C             
1301   0B2C             scanf:
1302   0B2C F8 00 00      enter 0 ; (push bp; mov bp, sp)
1303   0B2F             ;; char *p, *format_p; 
1304   0B2F 52 02 00      sub sp, 2 ; p
1305   0B32 52 02 00      sub sp, 2 ; format_p
1306   0B35             ;; char c; 
1307   0B35 52 01 00      sub sp, 1 ; c
1308   0B38             ;; int i; 
1309   0B38 52 02 00      sub sp, 2 ; i
1310   0B3B             ;; char input_string[  512                    ]; 
1311   0B3B 52 00 02      sub sp, 512 ; input_string
1312   0B3E             ;; format_p = format; 
1313   0B3E FA FD FF      lea d, [bp + -3] ; $format_p
1314   0B41 DA            push d
1315   0B42 FA 05 00      lea d, [bp + 5] ; $format
1316   0B45 2A            mov b, [d]
1317   0B46 E7            pop d
1318   0B47 FD 43         mov [d], b
1319   0B49             ;; p = &format + 2; 
1320   0B49 FA FF FF      lea d, [bp + -1] ; $p
1321   0B4C DA            push d
1322   0B4D FA 05 00      lea d, [bp + 5] ; $format
1323   0B50 2D            mov b, d
1324   0B51             ; START TERMS
1325   0B51 D7            push a
1326   0B52 11            mov a, b
1327   0B53 26 02 00      mov b, $2
1328   0B56 56            add b, a
1329   0B57 E4            pop a
1330   0B58             ; END TERMS
1331   0B58 E7            pop d
1332   0B59 FD 43         mov [d], b
1333   0B5B             ;; for(;;){ 
1334   0B5B             _for19_init:
1335   0B5B             _for19_cond:
1336   0B5B             _for19_block:
1337   0B5B             ;; if(!*format_p) break; 
1338   0B5B             _if20_cond:
1339   0B5B FA FD FF      lea d, [bp + -3] ; $format_p
1340   0B5E 2A            mov b, [d]
1341   0B5F 74            mov d, b
1342   0B60 32            mov bl, [d]
1343   0B61 A7 00         mov bh, 0
1344   0B63 C0 00 00      cmp b, 0
1345   0B66 FD 71         seq ; !
1346   0B68 C0 00 00      cmp b, 0
1347   0B6B C6 74 0B      je _if20_else
1348   0B6E             _if20_true:
1349   0B6E             ;; break; 
1350   0B6E 0A 71 0D      jmp _for19_exit ; for break
1351   0B71 0A 6E 0D      jmp _if20_exit
1352   0B74             _if20_else:
1353   0B74             ;; if(*format_p == '%'){ 
1354   0B74             _if21_cond:
1355   0B74 FA FD FF      lea d, [bp + -3] ; $format_p
1356   0B77 2A            mov b, [d]
1357   0B78 74            mov d, b
1358   0B79 32            mov bl, [d]
1359   0B7A A7 00         mov bh, 0
1360   0B7C             ; START RELATIONAL
1361   0B7C D7            push a
1362   0B7D 11            mov a, b
1363   0B7E 26 25 00      mov b, $25
1364   0B81 B0            cmp a, b
1365   0B82 FD 71         seq ; ==
1366   0B84 E4            pop a
1367   0B85             ; END RELATIONAL
1368   0B85 C0 00 00      cmp b, 0
1369   0B88 C6 52 0D      je _if21_else
1370   0B8B             _if21_true:
1371   0B8B             ;; format_p++; 
1372   0B8B FA FD FF      lea d, [bp + -3] ; $format_p
1373   0B8E 2A            mov b, [d]
1374   0B8F D8            push b
1375   0B90 FD 77         inc b
1376   0B92 FA FD FF      lea d, [bp + -3] ; $format_p
1377   0B95 FD 43         mov [d], b
1378   0B97 E5            pop b
1379   0B98             ;; switch(*format_p){ 
1380   0B98             _switch22_expr:
1381   0B98 FA FD FF      lea d, [bp + -3] ; $format_p
1382   0B9B 2A            mov b, [d]
1383   0B9C 74            mov d, b
1384   0B9D 32            mov bl, [d]
1385   0B9E A7 00         mov bh, 0
1386   0BA0             _switch22_comparisons:
1387   0BA0 C1 6C         cmp bl, $6c
1388   0BA2 C6 CE 0B      je _switch22_case0
1389   0BA5 C1 4C         cmp bl, $4c
1390   0BA7 C6 CE 0B      je _switch22_case1
1391   0BAA C1 64         cmp bl, $64
1392   0BAC C6 60 0C      je _switch22_case2
1393   0BAF C1 69         cmp bl, $69
1394   0BB1 C6 60 0C      je _switch22_case3
1395   0BB4 C1 75         cmp bl, $75
1396   0BB6 C6 8D 0C      je _switch22_case4
1397   0BB9 C1 78         cmp bl, $78
1398   0BBB C6 BA 0C      je _switch22_case5
1399   0BBE C1 63         cmp bl, $63
1400   0BC0 C6 CF 0C      je _switch22_case6
1401   0BC3 C1 73         cmp bl, $73
1402   0BC5 C6 FE 0C      je _switch22_case7
1403   0BC8 0A 36 0D      jmp _switch22_default
1404   0BCB 0A 42 0D      jmp _switch22_exit
1405   0BCE             _switch22_case0:
1406   0BCE             _switch22_case1:
1407   0BCE             ;; format_p++; 
1408   0BCE FA FD FF      lea d, [bp + -3] ; $format_p
1409   0BD1 2A            mov b, [d]
1410   0BD2 D8            push b
1411   0BD3 FD 77         inc b
1412   0BD5 FA FD FF      lea d, [bp + -3] ; $format_p
1413   0BD8 FD 43         mov [d], b
1414   0BDA E5            pop b
1415   0BDB             ;; if(*format_p == 'd' || *format_p == 'i'); 
1416   0BDB             _if23_cond:
1417   0BDB FA FD FF      lea d, [bp + -3] ; $format_p
1418   0BDE 2A            mov b, [d]
1419   0BDF 74            mov d, b
1420   0BE0 32            mov bl, [d]
1421   0BE1 A7 00         mov bh, 0
1422   0BE3             ; START RELATIONAL
1423   0BE3 D7            push a
1424   0BE4 11            mov a, b
1425   0BE5 26 64 00      mov b, $64
1426   0BE8 B0            cmp a, b
1427   0BE9 FD 71         seq ; ==
1428   0BEB E4            pop a
1429   0BEC             ; END RELATIONAL
1430   0BEC D7            push a
1431   0BED 11            mov a, b
1432   0BEE FA FD FF      lea d, [bp + -3] ; $format_p
1433   0BF1 2A            mov b, [d]
1434   0BF2 74            mov d, b
1435   0BF3 32            mov bl, [d]
1436   0BF4 A7 00         mov bh, 0
1437   0BF6             ; START RELATIONAL
1438   0BF6 D7            push a
1439   0BF7 11            mov a, b
1440   0BF8 26 69 00      mov b, $69
1441   0BFB B0            cmp a, b
1442   0BFC FD 71         seq ; ==
1443   0BFE E4            pop a
1444   0BFF             ; END RELATIONAL
1445   0BFF FD A8         sor a, b ; ||
1446   0C01 E4            pop a
1447   0C02 C0 00 00      cmp b, 0
1448   0C05 C6 0B 0C      je _if23_else
1449   0C08             _if23_true:
1450   0C08             ;; ; 
1451   0C08 0A 4B 0C      jmp _if23_exit
1452   0C0B             _if23_else:
1453   0C0B             ;; if(*format_p == 'u'); 
1454   0C0B             _if24_cond:
1455   0C0B FA FD FF      lea d, [bp + -3] ; $format_p
1456   0C0E 2A            mov b, [d]
1457   0C0F 74            mov d, b
1458   0C10 32            mov bl, [d]
1459   0C11 A7 00         mov bh, 0
1460   0C13             ; START RELATIONAL
1461   0C13 D7            push a
1462   0C14 11            mov a, b
1463   0C15 26 75 00      mov b, $75
1464   0C18 B0            cmp a, b
1465   0C19 FD 71         seq ; ==
1466   0C1B E4            pop a
1467   0C1C             ; END RELATIONAL
1468   0C1C C0 00 00      cmp b, 0
1469   0C1F C6 25 0C      je _if24_else
1470   0C22             _if24_true:
1471   0C22             ;; ; 
1472   0C22 0A 4B 0C      jmp _if24_exit
1473   0C25             _if24_else:
1474   0C25             ;; if(*format_p == 'x'); 
1475   0C25             _if25_cond:
1476   0C25 FA FD FF      lea d, [bp + -3] ; $format_p
1477   0C28 2A            mov b, [d]
1478   0C29 74            mov d, b
1479   0C2A 32            mov bl, [d]
1480   0C2B A7 00         mov bh, 0
1481   0C2D             ; START RELATIONAL
1482   0C2D D7            push a
1483   0C2E 11            mov a, b
1484   0C2F 26 78 00      mov b, $78
1485   0C32 B0            cmp a, b
1486   0C33 FD 71         seq ; ==
1487   0C35 E4            pop a
1488   0C36             ; END RELATIONAL
1489   0C36 C0 00 00      cmp b, 0
1490   0C39 C6 3F 0C      je _if25_else
1491   0C3C             _if25_true:
1492   0C3C             ;; ; 
1493   0C3C 0A 4B 0C      jmp _if25_exit
1494   0C3F             _if25_else:
1495   0C3F             ;; err("Unexpected format in printf."); 
1496   0C3F 26 7C 22      mov b, _s1 ; "Unexpected format in printf."
1497   0C42 FD AB         swp b
1498   0C44 D8            push b
1499   0C45 07 73 0D      call err
1500   0C48 51 02 00      add sp, 2
1501   0C4B             _if25_exit:
1502   0C4B             _if24_exit:
1503   0C4B             _if23_exit:
1504   0C4B             ;; p = p + 4; 
1505   0C4B FA FF FF      lea d, [bp + -1] ; $p
1506   0C4E DA            push d
1507   0C4F FA FF FF      lea d, [bp + -1] ; $p
1508   0C52 2A            mov b, [d]
1509   0C53             ; START TERMS
1510   0C53 D7            push a
1511   0C54 11            mov a, b
1512   0C55 26 04 00      mov b, $4
1513   0C58 56            add b, a
1514   0C59 E4            pop a
1515   0C5A             ; END TERMS
1516   0C5A E7            pop d
1517   0C5B FD 43         mov [d], b
1518   0C5D             ;; break; 
1519   0C5D 0A 42 0D      jmp _switch22_exit ; case break
1520   0C60             _switch22_case2:
1521   0C60             _switch22_case3:
1522   0C60             ;; i = scann(); 
1523   0C60 FA FA FF      lea d, [bp + -6] ; $i
1524   0C63 DA            push d
1525   0C64 07 41 16      call scann
1526   0C67 E7            pop d
1527   0C68 FD 43         mov [d], b
1528   0C6A             ;; **(int **)p = i; 
1529   0C6A FA FF FF      lea d, [bp + -1] ; $p
1530   0C6D 2A            mov b, [d]
1531   0C6E 74            mov d, b
1532   0C6F 2A            mov b, [d]
1533   0C70 D8            push b
1534   0C71 FA FA FF      lea d, [bp + -6] ; $i
1535   0C74 2A            mov b, [d]
1536   0C75 E7            pop d
1537   0C76 FD 43         mov [d], b
1538   0C78             ;; p = p + 2; 
1539   0C78 FA FF FF      lea d, [bp + -1] ; $p
1540   0C7B DA            push d
1541   0C7C FA FF FF      lea d, [bp + -1] ; $p
1542   0C7F 2A            mov b, [d]
1543   0C80             ; START TERMS
1544   0C80 D7            push a
1545   0C81 11            mov a, b
1546   0C82 26 02 00      mov b, $2
1547   0C85 56            add b, a
1548   0C86 E4            pop a
1549   0C87             ; END TERMS
1550   0C87 E7            pop d
1551   0C88 FD 43         mov [d], b
1552   0C8A             ;; break; 
1553   0C8A 0A 42 0D      jmp _switch22_exit ; case break
1554   0C8D             _switch22_case4:
1555   0C8D             ;; i = scann(); 
1556   0C8D FA FA FF      lea d, [bp + -6] ; $i
1557   0C90 DA            push d
1558   0C91 07 41 16      call scann
1559   0C94 E7            pop d
1560   0C95 FD 43         mov [d], b
1561   0C97             ;; **(int **)p = i; 
1562   0C97 FA FF FF      lea d, [bp + -1] ; $p
1563   0C9A 2A            mov b, [d]
1564   0C9B 74            mov d, b
1565   0C9C 2A            mov b, [d]
1566   0C9D D8            push b
1567   0C9E FA FA FF      lea d, [bp + -6] ; $i
1568   0CA1 2A            mov b, [d]
1569   0CA2 E7            pop d
1570   0CA3 FD 43         mov [d], b
1571   0CA5             ;; p = p + 2; 
1572   0CA5 FA FF FF      lea d, [bp + -1] ; $p
1573   0CA8 DA            push d
1574   0CA9 FA FF FF      lea d, [bp + -1] ; $p
1575   0CAC 2A            mov b, [d]
1576   0CAD             ; START TERMS
1577   0CAD D7            push a
1578   0CAE 11            mov a, b
1579   0CAF 26 02 00      mov b, $2
1580   0CB2 56            add b, a
1581   0CB3 E4            pop a
1582   0CB4             ; END TERMS
1583   0CB4 E7            pop d
1584   0CB5 FD 43         mov [d], b
1585   0CB7             ;; break; 
1586   0CB7 0A 42 0D      jmp _switch22_exit ; case break
1587   0CBA             _switch22_case5:
1588   0CBA             ;; p = p + 2; 
1589   0CBA FA FF FF      lea d, [bp + -1] ; $p
1590   0CBD DA            push d
1591   0CBE FA FF FF      lea d, [bp + -1] ; $p
1592   0CC1 2A            mov b, [d]
1593   0CC2             ; START TERMS
1594   0CC2 D7            push a
1595   0CC3 11            mov a, b
1596   0CC4 26 02 00      mov b, $2
1597   0CC7 56            add b, a
1598   0CC8 E4            pop a
1599   0CC9             ; END TERMS
1600   0CC9 E7            pop d
1601   0CCA FD 43         mov [d], b
1602   0CCC             ;; break; 
1603   0CCC 0A 42 0D      jmp _switch22_exit ; case break
1604   0CCF             _switch22_case6:
1605   0CCF             ;; c = getchar(); 
1606   0CCF FA FC FF      lea d, [bp + -4] ; $c
1607   0CD2 DA            push d
1608   0CD3 07 2B 16      call getchar
1609   0CD6 E7            pop d
1610   0CD7 FD 3E         mov [d], bl
1611   0CD9             ;; **(char **)p = c; 
1612   0CD9 FA FF FF      lea d, [bp + -1] ; $p
1613   0CDC 2A            mov b, [d]
1614   0CDD 74            mov d, b
1615   0CDE 2A            mov b, [d]
1616   0CDF D8            push b
1617   0CE0 FA FC FF      lea d, [bp + -4] ; $c
1618   0CE3 32            mov bl, [d]
1619   0CE4 A7 00         mov bh, 0
1620   0CE6 E7            pop d
1621   0CE7 FD 43         mov [d], b
1622   0CE9             ;; p = p + 2; 
1623   0CE9 FA FF FF      lea d, [bp + -1] ; $p
1624   0CEC DA            push d
1625   0CED FA FF FF      lea d, [bp + -1] ; $p
1626   0CF0 2A            mov b, [d]
1627   0CF1             ; START TERMS
1628   0CF1 D7            push a
1629   0CF2 11            mov a, b
1630   0CF3 26 02 00      mov b, $2
1631   0CF6 56            add b, a
1632   0CF7 E4            pop a
1633   0CF8             ; END TERMS
1634   0CF8 E7            pop d
1635   0CF9 FD 43         mov [d], b
1636   0CFB             ;; break; 
1637   0CFB 0A 42 0D      jmp _switch22_exit ; case break
1638   0CFE             _switch22_case7:
1639   0CFE             ;; gets(input_string); 
1640   0CFE FA FA FD      lea d, [bp + -518] ; $input_string
1641   0D01 2D            mov b, d
1642   0D02 FD AB         swp b
1643   0D04 D8            push b
1644   0D05 07 FF 0E      call gets
1645   0D08 51 02 00      add sp, 2
1646   0D0B             ;; strcpy(*(char **)p, input_string); 
1647   0D0B FA FA FD      lea d, [bp + -518] ; $input_string
1648   0D0E 2D            mov b, d
1649   0D0F FD AB         swp b
1650   0D11 D8            push b
1651   0D12 FA FF FF      lea d, [bp + -1] ; $p
1652   0D15 2A            mov b, [d]
1653   0D16 74            mov d, b
1654   0D17 2A            mov b, [d]
1655   0D18 FD AB         swp b
1656   0D1A D8            push b
1657   0D1B 07 20 05      call strcpy
1658   0D1E 51 04 00      add sp, 4
1659   0D21             ;; p = p + 2; 
1660   0D21 FA FF FF      lea d, [bp + -1] ; $p
1661   0D24 DA            push d
1662   0D25 FA FF FF      lea d, [bp + -1] ; $p
1663   0D28 2A            mov b, [d]
1664   0D29             ; START TERMS
1665   0D29 D7            push a
1666   0D2A 11            mov a, b
1667   0D2B 26 02 00      mov b, $2
1668   0D2E 56            add b, a
1669   0D2F E4            pop a
1670   0D30             ; END TERMS
1671   0D30 E7            pop d
1672   0D31 FD 43         mov [d], b
1673   0D33             ;; break; 
1674   0D33 0A 42 0D      jmp _switch22_exit ; case break
1675   0D36             _switch22_default:
1676   0D36             ;; print("Error: Unknown argument type.\n"); 
1677   0D36 26 99 22      mov b, _s2 ; "Error: Unknown argument type.\n"
1678   0D39 FD AB         swp b
1679   0D3B D8            push b
1680   0D3C 07 66 16      call print
1681   0D3F 51 02 00      add sp, 2
1682   0D42             _switch22_exit:
1683   0D42             ;; format_p++; 
1684   0D42 FA FD FF      lea d, [bp + -3] ; $format_p
1685   0D45 2A            mov b, [d]
1686   0D46 D8            push b
1687   0D47 FD 77         inc b
1688   0D49 FA FD FF      lea d, [bp + -3] ; $format_p
1689   0D4C FD 43         mov [d], b
1690   0D4E E5            pop b
1691   0D4F 0A 6E 0D      jmp _if21_exit
1692   0D52             _if21_else:
1693   0D52             ;; putchar(*format_p); 
1694   0D52 FA FD FF      lea d, [bp + -3] ; $format_p
1695   0D55 2A            mov b, [d]
1696   0D56 74            mov d, b
1697   0D57 32            mov bl, [d]
1698   0D58 A7 00         mov bh, 0
1699   0D5A DD            push bl
1700   0D5B 07 1E 16      call putchar
1701   0D5E 51 01 00      add sp, 1
1702   0D61             ;; format_p++; 
1703   0D61 FA FD FF      lea d, [bp + -3] ; $format_p
1704   0D64 2A            mov b, [d]
1705   0D65 D8            push b
1706   0D66 FD 77         inc b
1707   0D68 FA FD FF      lea d, [bp + -3] ; $format_p
1708   0D6B FD 43         mov [d], b
1709   0D6D E5            pop b
1710   0D6E             _if21_exit:
1711   0D6E             _if20_exit:
1712   0D6E             _for19_update:
1713   0D6E 0A 5B 0B      jmp _for19_cond
1714   0D71             _for19_exit:
1715   0D71 F9            leave
1716   0D72 09            ret
1717   0D73             
1718   0D73             err:
1719   0D73 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1720   0D76             ;; print(e); 
1721   0D76 FA 05 00      lea d, [bp + 5] ; $e
1722   0D79 2A            mov b, [d]
1723   0D7A FD AB         swp b
1724   0D7C D8            push b
1725   0D7D 07 66 16      call print
1726   0D80 51 02 00      add sp, 2
1727   0D83 F9            leave
1728   0D84 09            ret
1729   0D85             
1730   0D85             printx32:
1731   0D85 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1732   0D88             
1733   0D88             ; --- BEGIN INLINE ASM BLOCK
1734   0D88 FA 05 00      lea d, [bp + 5] ; $hex
1735   0D8B 2B 02 00      mov b, [d+2]
1736   0D8E 07 51 19      call print_u16x
1737   0D91 2A            mov b, [d]
1738   0D92 07 51 19      call print_u16x
1739   0D95             ; --- END INLINE ASM BLOCK
1740   0D95             
1741   0D95 F9            leave
1742   0D96 09            ret
1743   0D97             
1744   0D97             printx16:
1745   0D97 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1746   0D9A             
1747   0D9A             ; --- BEGIN INLINE ASM BLOCK
1748   0D9A FA 05 00      lea d, [bp + 5] ; $hex
1749   0D9D 2A            mov b, [d]
1750   0D9E 07 51 19      call print_u16x
1751   0DA1             ; --- END INLINE ASM BLOCK
1752   0DA1             
1753   0DA1 F9            leave
1754   0DA2 09            ret
1755   0DA3             
1756   0DA3             printx8:
1757   0DA3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1758   0DA6             
1759   0DA6             ; --- BEGIN INLINE ASM BLOCK
1760   0DA6 FA 05 00      lea d, [bp + 5] ; $hex
1761   0DA9 32            mov bl, [d]
1762   0DAA 07 95 19      call print_u8x
1763   0DAD             ; --- END INLINE ASM BLOCK
1764   0DAD             
1765   0DAD F9            leave
1766   0DAE 09            ret
1767   0DAF             
1768   0DAF             hex_str_to_int:
1769   0DAF F8 00 00      enter 0 ; (push bp; mov bp, sp)
1770   0DB2             ;; int value = 0; 
1771   0DB2 52 02 00      sub sp, 2 ; value
1772   0DB5             ; --- START LOCAL VAR INITIALIZATION
1773   0DB5 FA FF FF      lea d, [bp + -1] ; $value
1774   0DB8 DA            push d
1775   0DB9 26 00 00      mov b, $0
1776   0DBC E7            pop d
1777   0DBD FD 43         mov [d], b
1778   0DBF             ; --- END LOCAL VAR INITIALIZATION
1779   0DBF             ;; int i; 
1780   0DBF 52 02 00      sub sp, 2 ; i
1781   0DC2             ;; char hex_char; 
1782   0DC2 52 01 00      sub sp, 1 ; hex_char
1783   0DC5             ;; int len; 
1784   0DC5 52 02 00      sub sp, 2 ; len
1785   0DC8             ;; len = strlen(hex_string); 
1786   0DC8 FA FA FF      lea d, [bp + -6] ; $len
1787   0DCB DA            push d
1788   0DCC FA 05 00      lea d, [bp + 5] ; $hex_string
1789   0DCF 2A            mov b, [d]
1790   0DD0 FD AB         swp b
1791   0DD2 D8            push b
1792   0DD3 07 9A 06      call strlen
1793   0DD6 51 02 00      add sp, 2
1794   0DD9 E7            pop d
1795   0DDA FD 43         mov [d], b
1796   0DDC             ;; for (i = 0; i < len; i++) { 
1797   0DDC             _for26_init:
1798   0DDC FA FD FF      lea d, [bp + -3] ; $i
1799   0DDF DA            push d
1800   0DE0 26 00 00      mov b, $0
1801   0DE3 E7            pop d
1802   0DE4 FD 43         mov [d], b
1803   0DE6             _for26_cond:
1804   0DE6 FA FD FF      lea d, [bp + -3] ; $i
1805   0DE9 2A            mov b, [d]
1806   0DEA             ; START RELATIONAL
1807   0DEA D7            push a
1808   0DEB 11            mov a, b
1809   0DEC FA FA FF      lea d, [bp + -6] ; $len
1810   0DEF 2A            mov b, [d]
1811   0DF0 B0            cmp a, b
1812   0DF1 FD 73         slt ; < (signed)
1813   0DF3 E4            pop a
1814   0DF4             ; END RELATIONAL
1815   0DF4 C0 00 00      cmp b, 0
1816   0DF7 C6 F9 0E      je _for26_exit
1817   0DFA             _for26_block:
1818   0DFA             ;; hex_char = hex_string[i]; 
1819   0DFA FA FC FF      lea d, [bp + -4] ; $hex_char
1820   0DFD DA            push d
1821   0DFE FA 05 00      lea d, [bp + 5] ; $hex_string
1822   0E01 FD 2A         mov d, [d]
1823   0E03 D7            push a
1824   0E04 DA            push d
1825   0E05 FA FD FF      lea d, [bp + -3] ; $i
1826   0E08 2A            mov b, [d]
1827   0E09 E7            pop d
1828   0E0A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1829   0E0E E4            pop a
1830   0E0F 32            mov bl, [d]
1831   0E10 A7 00         mov bh, 0
1832   0E12 E7            pop d
1833   0E13 FD 3E         mov [d], bl
1834   0E15             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1835   0E15             _if27_cond:
1836   0E15 FA FC FF      lea d, [bp + -4] ; $hex_char
1837   0E18 32            mov bl, [d]
1838   0E19 A7 00         mov bh, 0
1839   0E1B             ; START RELATIONAL
1840   0E1B D7            push a
1841   0E1C 11            mov a, b
1842   0E1D 26 61 00      mov b, $61
1843   0E20 B0            cmp a, b
1844   0E21 FD 80         sge ; >=
1845   0E23 E4            pop a
1846   0E24             ; END RELATIONAL
1847   0E24 D7            push a
1848   0E25 11            mov a, b
1849   0E26 FA FC FF      lea d, [bp + -4] ; $hex_char
1850   0E29 32            mov bl, [d]
1851   0E2A A7 00         mov bh, 0
1852   0E2C             ; START RELATIONAL
1853   0E2C D7            push a
1854   0E2D 11            mov a, b
1855   0E2E 26 66 00      mov b, $66
1856   0E31 B0            cmp a, b
1857   0E32 FD 73         slt ; <= (signed)
1858   0E34 E4            pop a
1859   0E35             ; END RELATIONAL
1860   0E35 FD A7         sand a, b
1861   0E37 E4            pop a
1862   0E38 C0 00 00      cmp b, 0
1863   0E3B C6 6C 0E      je _if27_else
1864   0E3E             _if27_true:
1865   0E3E             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1866   0E3E FA FF FF      lea d, [bp + -1] ; $value
1867   0E41 DA            push d
1868   0E42 FA FF FF      lea d, [bp + -1] ; $value
1869   0E45 2A            mov b, [d]
1870   0E46             ; START FACTORS
1871   0E46 D7            push a
1872   0E47 11            mov a, b
1873   0E48 26 10 00      mov b, $10
1874   0E4B AC            mul a, b ; *
1875   0E4C 11            mov a, b
1876   0E4D 27            mov b, a
1877   0E4E E4            pop a
1878   0E4F             ; END FACTORS
1879   0E4F             ; START TERMS
1880   0E4F D7            push a
1881   0E50 11            mov a, b
1882   0E51 FA FC FF      lea d, [bp + -4] ; $hex_char
1883   0E54 32            mov bl, [d]
1884   0E55 A7 00         mov bh, 0
1885   0E57             ; START TERMS
1886   0E57 D7            push a
1887   0E58 11            mov a, b
1888   0E59 26 61 00      mov b, $61
1889   0E5C 60            sub a, b
1890   0E5D 27            mov b, a
1891   0E5E 11            mov a, b
1892   0E5F 26 0A 00      mov b, $a
1893   0E62 56            add b, a
1894   0E63 E4            pop a
1895   0E64             ; END TERMS
1896   0E64 56            add b, a
1897   0E65 E4            pop a
1898   0E66             ; END TERMS
1899   0E66 E7            pop d
1900   0E67 FD 43         mov [d], b
1901   0E69 0A E9 0E      jmp _if27_exit
1902   0E6C             _if27_else:
1903   0E6C             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1904   0E6C             _if28_cond:
1905   0E6C FA FC FF      lea d, [bp + -4] ; $hex_char
1906   0E6F 32            mov bl, [d]
1907   0E70 A7 00         mov bh, 0
1908   0E72             ; START RELATIONAL
1909   0E72 D7            push a
1910   0E73 11            mov a, b
1911   0E74 26 41 00      mov b, $41
1912   0E77 B0            cmp a, b
1913   0E78 FD 80         sge ; >=
1914   0E7A E4            pop a
1915   0E7B             ; END RELATIONAL
1916   0E7B D7            push a
1917   0E7C 11            mov a, b
1918   0E7D FA FC FF      lea d, [bp + -4] ; $hex_char
1919   0E80 32            mov bl, [d]
1920   0E81 A7 00         mov bh, 0
1921   0E83             ; START RELATIONAL
1922   0E83 D7            push a
1923   0E84 11            mov a, b
1924   0E85 26 46 00      mov b, $46
1925   0E88 B0            cmp a, b
1926   0E89 FD 73         slt ; <= (signed)
1927   0E8B E4            pop a
1928   0E8C             ; END RELATIONAL
1929   0E8C FD A7         sand a, b
1930   0E8E E4            pop a
1931   0E8F C0 00 00      cmp b, 0
1932   0E92 C6 C3 0E      je _if28_else
1933   0E95             _if28_true:
1934   0E95             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1935   0E95 FA FF FF      lea d, [bp + -1] ; $value
1936   0E98 DA            push d
1937   0E99 FA FF FF      lea d, [bp + -1] ; $value
1938   0E9C 2A            mov b, [d]
1939   0E9D             ; START FACTORS
1940   0E9D D7            push a
1941   0E9E 11            mov a, b
1942   0E9F 26 10 00      mov b, $10
1943   0EA2 AC            mul a, b ; *
1944   0EA3 11            mov a, b
1945   0EA4 27            mov b, a
1946   0EA5 E4            pop a
1947   0EA6             ; END FACTORS
1948   0EA6             ; START TERMS
1949   0EA6 D7            push a
1950   0EA7 11            mov a, b
1951   0EA8 FA FC FF      lea d, [bp + -4] ; $hex_char
1952   0EAB 32            mov bl, [d]
1953   0EAC A7 00         mov bh, 0
1954   0EAE             ; START TERMS
1955   0EAE D7            push a
1956   0EAF 11            mov a, b
1957   0EB0 26 41 00      mov b, $41
1958   0EB3 60            sub a, b
1959   0EB4 27            mov b, a
1960   0EB5 11            mov a, b
1961   0EB6 26 0A 00      mov b, $a
1962   0EB9 56            add b, a
1963   0EBA E4            pop a
1964   0EBB             ; END TERMS
1965   0EBB 56            add b, a
1966   0EBC E4            pop a
1967   0EBD             ; END TERMS
1968   0EBD E7            pop d
1969   0EBE FD 43         mov [d], b
1970   0EC0 0A E9 0E      jmp _if28_exit
1971   0EC3             _if28_else:
1972   0EC3             ;; value = (value * 16) + (hex_char - '0'); 
1973   0EC3 FA FF FF      lea d, [bp + -1] ; $value
1974   0EC6 DA            push d
1975   0EC7 FA FF FF      lea d, [bp + -1] ; $value
1976   0ECA 2A            mov b, [d]
1977   0ECB             ; START FACTORS
1978   0ECB D7            push a
1979   0ECC 11            mov a, b
1980   0ECD 26 10 00      mov b, $10
1981   0ED0 AC            mul a, b ; *
1982   0ED1 11            mov a, b
1983   0ED2 27            mov b, a
1984   0ED3 E4            pop a
1985   0ED4             ; END FACTORS
1986   0ED4             ; START TERMS
1987   0ED4 D7            push a
1988   0ED5 11            mov a, b
1989   0ED6 FA FC FF      lea d, [bp + -4] ; $hex_char
1990   0ED9 32            mov bl, [d]
1991   0EDA A7 00         mov bh, 0
1992   0EDC             ; START TERMS
1993   0EDC D7            push a
1994   0EDD 11            mov a, b
1995   0EDE 26 30 00      mov b, $30
1996   0EE1 60            sub a, b
1997   0EE2 27            mov b, a
1998   0EE3 E4            pop a
1999   0EE4             ; END TERMS
2000   0EE4 56            add b, a
2001   0EE5 E4            pop a
2002   0EE6             ; END TERMS
2003   0EE6 E7            pop d
2004   0EE7 FD 43         mov [d], b
2005   0EE9             _if28_exit:
2006   0EE9             _if27_exit:
2007   0EE9             _for26_update:
2008   0EE9 FA FD FF      lea d, [bp + -3] ; $i
2009   0EEC 2A            mov b, [d]
2010   0EED D8            push b
2011   0EEE FD 77         inc b
2012   0EF0 FA FD FF      lea d, [bp + -3] ; $i
2013   0EF3 FD 43         mov [d], b
2014   0EF5 E5            pop b
2015   0EF6 0A E6 0D      jmp _for26_cond
2016   0EF9             _for26_exit:
2017   0EF9             ;; return value; 
2018   0EF9 FA FF FF      lea d, [bp + -1] ; $value
2019   0EFC 2A            mov b, [d]
2020   0EFD F9            leave
2021   0EFE 09            ret
2022   0EFF             
2023   0EFF             gets:
2024   0EFF F8 00 00      enter 0 ; (push bp; mov bp, sp)
2025   0F02             
2026   0F02             ; --- BEGIN INLINE ASM BLOCK
2027   0F02 FA 05 00      lea d, [bp + 5] ; $s
2028   0F05 15            mov a, [d]
2029   0F06 3C            mov d, a
2030   0F07 07 B6 17      call _gets
2031   0F0A             ; --- END INLINE ASM BLOCK
2032   0F0A             
2033   0F0A             ;; return strlen(s); 
2034   0F0A FA 05 00      lea d, [bp + 5] ; $s
2035   0F0D 2A            mov b, [d]
2036   0F0E FD AB         swp b
2037   0F10 D8            push b
2038   0F11 07 9A 06      call strlen
2039   0F14 51 02 00      add sp, 2
2040   0F17 F9            leave
2041   0F18 09            ret
2042   0F19             
2043   0F19             print_signed:
2044   0F19 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2045   0F1C             ;; char digits[5]; 
2046   0F1C 52 05 00      sub sp, 5 ; digits
2047   0F1F             ;; int i = 0; 
2048   0F1F 52 02 00      sub sp, 2 ; i
2049   0F22             ; --- START LOCAL VAR INITIALIZATION
2050   0F22 FA FA FF      lea d, [bp + -6] ; $i
2051   0F25 DA            push d
2052   0F26 26 00 00      mov b, $0
2053   0F29 E7            pop d
2054   0F2A FD 43         mov [d], b
2055   0F2C             ; --- END LOCAL VAR INITIALIZATION
2056   0F2C             ;; if (num < 0) { 
2057   0F2C             _if29_cond:
2058   0F2C FA 05 00      lea d, [bp + 5] ; $num
2059   0F2F 2A            mov b, [d]
2060   0F30             ; START RELATIONAL
2061   0F30 D7            push a
2062   0F31 11            mov a, b
2063   0F32 26 00 00      mov b, $0
2064   0F35 B0            cmp a, b
2065   0F36 FD 73         slt ; < (signed)
2066   0F38 E4            pop a
2067   0F39             ; END RELATIONAL
2068   0F39 C0 00 00      cmp b, 0
2069   0F3C C6 59 0F      je _if29_else
2070   0F3F             _if29_true:
2071   0F3F             ;; putchar('-'); 
2072   0F3F 26 2D 00      mov b, $2d
2073   0F42 DD            push bl
2074   0F43 07 1E 16      call putchar
2075   0F46 51 01 00      add sp, 1
2076   0F49             ;; num = -num; 
2077   0F49 FA 05 00      lea d, [bp + 5] ; $num
2078   0F4C DA            push d
2079   0F4D FA 05 00      lea d, [bp + 5] ; $num
2080   0F50 2A            mov b, [d]
2081   0F51 FD 97         neg b
2082   0F53 E7            pop d
2083   0F54 FD 43         mov [d], b
2084   0F56 0A 7B 0F      jmp _if29_exit
2085   0F59             _if29_else:
2086   0F59             ;; if (num == 0) { 
2087   0F59             _if30_cond:
2088   0F59 FA 05 00      lea d, [bp + 5] ; $num
2089   0F5C 2A            mov b, [d]
2090   0F5D             ; START RELATIONAL
2091   0F5D D7            push a
2092   0F5E 11            mov a, b
2093   0F5F 26 00 00      mov b, $0
2094   0F62 B0            cmp a, b
2095   0F63 FD 71         seq ; ==
2096   0F65 E4            pop a
2097   0F66             ; END RELATIONAL
2098   0F66 C0 00 00      cmp b, 0
2099   0F69 C6 7B 0F      je _if30_exit
2100   0F6C             _if30_true:
2101   0F6C             ;; putchar('0'); 
2102   0F6C 26 30 00      mov b, $30
2103   0F6F DD            push bl
2104   0F70 07 1E 16      call putchar
2105   0F73 51 01 00      add sp, 1
2106   0F76             ;; return; 
2107   0F76 F9            leave
2108   0F77 09            ret
2109   0F78 0A 7B 0F      jmp _if30_exit
2110   0F7B             _if30_exit:
2111   0F7B             _if29_exit:
2112   0F7B             ;; while (num > 0) { 
2113   0F7B             _while31_cond:
2114   0F7B FA 05 00      lea d, [bp + 5] ; $num
2115   0F7E 2A            mov b, [d]
2116   0F7F             ; START RELATIONAL
2117   0F7F D7            push a
2118   0F80 11            mov a, b
2119   0F81 26 00 00      mov b, $0
2120   0F84 B0            cmp a, b
2121   0F85 FD 7F         sgt ; >
2122   0F87 E4            pop a
2123   0F88             ; END RELATIONAL
2124   0F88 C0 00 00      cmp b, 0
2125   0F8B C6 D5 0F      je _while31_exit
2126   0F8E             _while31_block:
2127   0F8E             ;; digits[i] = '0' + (num % 10); 
2128   0F8E FA FC FF      lea d, [bp + -4] ; $digits
2129   0F91 D7            push a
2130   0F92 DA            push d
2131   0F93 FA FA FF      lea d, [bp + -6] ; $i
2132   0F96 2A            mov b, [d]
2133   0F97 E7            pop d
2134   0F98 5A            add d, b
2135   0F99 E4            pop a
2136   0F9A DA            push d
2137   0F9B 26 30 00      mov b, $30
2138   0F9E             ; START TERMS
2139   0F9E D7            push a
2140   0F9F 11            mov a, b
2141   0FA0 FA 05 00      lea d, [bp + 5] ; $num
2142   0FA3 2A            mov b, [d]
2143   0FA4             ; START FACTORS
2144   0FA4 D7            push a
2145   0FA5 11            mov a, b
2146   0FA6 26 0A 00      mov b, $a
2147   0FA9 AE            div a, b ; 
2148   0FAA 11            mov a, b
2149   0FAB 27            mov b, a
2150   0FAC E4            pop a
2151   0FAD             ; END FACTORS
2152   0FAD 56            add b, a
2153   0FAE E4            pop a
2154   0FAF             ; END TERMS
2155   0FAF E7            pop d
2156   0FB0 FD 3E         mov [d], bl
2157   0FB2             ;; num = num / 10; 
2158   0FB2 FA 05 00      lea d, [bp + 5] ; $num
2159   0FB5 DA            push d
2160   0FB6 FA 05 00      lea d, [bp + 5] ; $num
2161   0FB9 2A            mov b, [d]
2162   0FBA             ; START FACTORS
2163   0FBA D7            push a
2164   0FBB 11            mov a, b
2165   0FBC 26 0A 00      mov b, $a
2166   0FBF AE            div a, b
2167   0FC0 27            mov b, a
2168   0FC1 E4            pop a
2169   0FC2             ; END FACTORS
2170   0FC2 E7            pop d
2171   0FC3 FD 43         mov [d], b
2172   0FC5             ;; i++; 
2173   0FC5 FA FA FF      lea d, [bp + -6] ; $i
2174   0FC8 2A            mov b, [d]
2175   0FC9 D8            push b
2176   0FCA FD 77         inc b
2177   0FCC FA FA FF      lea d, [bp + -6] ; $i
2178   0FCF FD 43         mov [d], b
2179   0FD1 E5            pop b
2180   0FD2 0A 7B 0F      jmp _while31_cond
2181   0FD5             _while31_exit:
2182   0FD5             ;; while (i > 0) { 
2183   0FD5             _while32_cond:
2184   0FD5 FA FA FF      lea d, [bp + -6] ; $i
2185   0FD8 2A            mov b, [d]
2186   0FD9             ; START RELATIONAL
2187   0FD9 D7            push a
2188   0FDA 11            mov a, b
2189   0FDB 26 00 00      mov b, $0
2190   0FDE B0            cmp a, b
2191   0FDF FD 7F         sgt ; >
2192   0FE1 E4            pop a
2193   0FE2             ; END RELATIONAL
2194   0FE2 C0 00 00      cmp b, 0
2195   0FE5 C6 0E 10      je _while32_exit
2196   0FE8             _while32_block:
2197   0FE8             ;; i--; 
2198   0FE8 FA FA FF      lea d, [bp + -6] ; $i
2199   0FEB 2A            mov b, [d]
2200   0FEC D8            push b
2201   0FED FD 7D         dec b
2202   0FEF FA FA FF      lea d, [bp + -6] ; $i
2203   0FF2 FD 43         mov [d], b
2204   0FF4 E5            pop b
2205   0FF5             ;; putchar(digits[i]); 
2206   0FF5 FA FC FF      lea d, [bp + -4] ; $digits
2207   0FF8 D7            push a
2208   0FF9 DA            push d
2209   0FFA FA FA FF      lea d, [bp + -6] ; $i
2210   0FFD 2A            mov b, [d]
2211   0FFE E7            pop d
2212   0FFF 5A            add d, b
2213   1000 E4            pop a
2214   1001 32            mov bl, [d]
2215   1002 A7 00         mov bh, 0
2216   1004 DD            push bl
2217   1005 07 1E 16      call putchar
2218   1008 51 01 00      add sp, 1
2219   100B 0A D5 0F      jmp _while32_cond
2220   100E             _while32_exit:
2221   100E F9            leave
2222   100F 09            ret
2223   1010             
2224   1010             print_signed_long:
2225   1010 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2226   1013             ;; char digits[10]; 
2227   1013 52 0A 00      sub sp, 10 ; digits
2228   1016             ;; int i = 0; 
2229   1016 52 02 00      sub sp, 2 ; i
2230   1019             ; --- START LOCAL VAR INITIALIZATION
2231   1019 FA F5 FF      lea d, [bp + -11] ; $i
2232   101C DA            push d
2233   101D 26 00 00      mov b, $0
2234   1020 E7            pop d
2235   1021 FD 43         mov [d], b
2236   1023             ; --- END LOCAL VAR INITIALIZATION
2237   1023             ;; if (num < 0) { 
2238   1023             _if33_cond:
2239   1023 FA 05 00      lea d, [bp + 5] ; $num
2240   1026 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2241   1029 FD 39         mov c, b ; And place it into C
2242   102B 2A            mov b, [d] ; Lower Word in B
2243   102C             ; START RELATIONAL
2244   102C D7            push a
2245   102D FD D8         push g
2246   102F 11            mov a, b
2247   1030 FD 7A         mov g, c
2248   1032 26 00 00      mov b, $0
2249   1035 38 00 00      mov c, 0
2250   1038 FD AF 00 00   cmp32 ga, cb
2250   103C 00 00 00 00 
2250   1040 00 00 00 00 
2250   1044 00 00 00 00 
2250   1048 00 00 00 00 
2250   104C 00 00 00 00 
2250   1050 00 00 00 00 
2250   1054 00 00 00 00 
2250   1058 00 00 00 00 
2250   105C 00 00 00 00 
2250   1060 00 00 00 00 
2250   1064 00 00 00 00 
2250   1068 00 00 00 00 
2250   106C 00 00 00 00 
2250   1070 00 00 00 00 
2250   1074 00 00 00 00 
2250   1078 00 00 00 00 
2250   107C 00 00 00 00 
2250   1080 00 00 00 00 
2250   1084 00 00 00 00 
2250   1088 00 00 00 00 
2250   108C 00 00 00 00 
2250   1090 00 00 00 00 
2250   1094 00 00 00 00 
2250   1098 00 00 00 00 
2250   109C 00 00 00 00 
2250   10A0 00 00 00 00 
2250   10A4 00 00 00 00 
2250   10A8 00 00 00 00 
2250   10AC 00 00 00 00 
2250   10B0 00 00 00 00 
2250   10B4 00 00 00 00 
2250   10B8 00 00 00 00 
2250   10BC 00 00 00 00 
2250   10C0 00 00 00 00 
2250   10C4 00 00 00 00 
2250   10C8 00 00 00 00 
2250   10CC 00 00 00 00 
2250   10D0 00 00 00 00 
2250   10D4 00 00 00 00 
2250   10D8 00 00 00 00 
2250   10DC 00 00 00 00 
2250   10E0 00 00 00 00 
2250   10E4 00 00 00 00 
2250   10E8 00 00 00 00 
2250   10EC 00 00 00 00 
2250   10F0 00 00 00 00 
2250   10F4 00 00 00 00 
2250   10F8 00 00 00 00 
2250   10FC 00 00 00 00 
2250   1100 00 00 00 00 
2250   1104 00 00 00 00 
2250   1108 00 00 00 00 
2250   110C 00 00 00 00 
2250   1110 00 00 00 00 
2250   1114 00 00 00 00 
2250   1118 00 00 00 00 
2250   111C 00 00 00 00 
2250   1120 00 00 00 00 
2250   1124 00 00 00 00 
2250   1128 00 00 00 00 
2250   112C 00 00 00 00 
2250   1130 00 00 00 00 
2250   1134 00 00 00 00 
2250   1138 00 
2251   1139 FD 73         slt ; <
2252   113B FD F1         pop g
2253   113D E4            pop a
2254   113E             ; END RELATIONAL
2255   113E C0 00 00      cmp b, 0
2256   1141 C6 68 11      je _if33_else
2257   1144             _if33_true:
2258   1144             ;; putchar('-'); 
2259   1144 26 2D 00      mov b, $2d
2260   1147 DD            push bl
2261   1148 07 1E 16      call putchar
2262   114B 51 01 00      add sp, 1
2263   114E             ;; num = -num; 
2264   114E FA 05 00      lea d, [bp + 5] ; $num
2265   1151 DA            push d
2266   1152 FA 05 00      lea d, [bp + 5] ; $num
2267   1155 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2268   1158 FD 39         mov c, b ; And place it into C
2269   115A 2A            mov b, [d] ; Lower Word in B
2270   115B FD 97         neg b
2271   115D E7            pop d
2272   115E FD 43         mov [d], b
2273   1160 28            mov b, c
2274   1161 FD 44 02 00   mov [d + 2], b
2275   1165 0A 98 12      jmp _if33_exit
2276   1168             _if33_else:
2277   1168             ;; if (num == 0) { 
2278   1168             _if34_cond:
2279   1168 FA 05 00      lea d, [bp + 5] ; $num
2280   116B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2281   116E FD 39         mov c, b ; And place it into C
2282   1170 2A            mov b, [d] ; Lower Word in B
2283   1171             ; START RELATIONAL
2284   1171 D7            push a
2285   1172 FD D8         push g
2286   1174 11            mov a, b
2287   1175 FD 7A         mov g, c
2288   1177 26 00 00      mov b, $0
2289   117A 38 00 00      mov c, 0
2290   117D FD AF 00 00   cmp32 ga, cb
2290   1181 00 00 00 00 
2290   1185 00 00 00 00 
2290   1189 00 00 00 00 
2290   118D 00 00 00 00 
2290   1191 00 00 00 00 
2290   1195 00 00 00 00 
2290   1199 00 00 00 00 
2290   119D 00 00 00 00 
2290   11A1 00 00 00 00 
2290   11A5 00 00 00 00 
2290   11A9 00 00 00 00 
2290   11AD 00 00 00 00 
2290   11B1 00 00 00 00 
2290   11B5 00 00 00 00 
2290   11B9 00 00 00 00 
2290   11BD 00 00 00 00 
2290   11C1 00 00 00 00 
2290   11C5 00 00 00 00 
2290   11C9 00 00 00 00 
2290   11CD 00 00 00 00 
2290   11D1 00 00 00 00 
2290   11D5 00 00 00 00 
2290   11D9 00 00 00 00 
2290   11DD 00 00 00 00 
2290   11E1 00 00 00 00 
2290   11E5 00 00 00 00 
2290   11E9 00 00 00 00 
2290   11ED 00 00 00 00 
2290   11F1 00 00 00 00 
2290   11F5 00 00 00 00 
2290   11F9 00 00 00 00 
2290   11FD 00 00 00 00 
2290   1201 00 00 00 00 
2290   1205 00 00 00 00 
2290   1209 00 00 00 00 
2290   120D 00 00 00 00 
2290   1211 00 00 00 00 
2290   1215 00 00 00 00 
2290   1219 00 00 00 00 
2290   121D 00 00 00 00 
2290   1221 00 00 00 00 
2290   1225 00 00 00 00 
2290   1229 00 00 00 00 
2290   122D 00 00 00 00 
2290   1231 00 00 00 00 
2290   1235 00 00 00 00 
2290   1239 00 00 00 00 
2290   123D 00 00 00 00 
2290   1241 00 00 00 00 
2290   1245 00 00 00 00 
2290   1249 00 00 00 00 
2290   124D 00 00 00 00 
2290   1251 00 00 00 00 
2290   1255 00 00 00 00 
2290   1259 00 00 00 00 
2290   125D 00 00 00 00 
2290   1261 00 00 00 00 
2290   1265 00 00 00 00 
2290   1269 00 00 00 00 
2290   126D 00 00 00 00 
2290   1271 00 00 00 00 
2290   1275 00 00 00 00 
2290   1279 00 00 00 00 
2290   127D 00 
2291   127E FD 71         seq ; ==
2292   1280 FD F1         pop g
2293   1282 E4            pop a
2294   1283             ; END RELATIONAL
2295   1283 C0 00 00      cmp b, 0
2296   1286 C6 98 12      je _if34_exit
2297   1289             _if34_true:
2298   1289             ;; putchar('0'); 
2299   1289 26 30 00      mov b, $30
2300   128C DD            push bl
2301   128D 07 1E 16      call putchar
2302   1290 51 01 00      add sp, 1
2303   1293             ;; return; 
2304   1293 F9            leave
2305   1294 09            ret
2306   1295 0A 98 12      jmp _if34_exit
2307   1298             _if34_exit:
2308   1298             _if33_exit:
2309   1298             ;; while (num > 0) { 
2310   1298             _while35_cond:
2311   1298 FA 05 00      lea d, [bp + 5] ; $num
2312   129B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2313   129E FD 39         mov c, b ; And place it into C
2314   12A0 2A            mov b, [d] ; Lower Word in B
2315   12A1             ; START RELATIONAL
2316   12A1 D7            push a
2317   12A2 FD D8         push g
2318   12A4 11            mov a, b
2319   12A5 FD 7A         mov g, c
2320   12A7 26 00 00      mov b, $0
2321   12AA 38 00 00      mov c, 0
2322   12AD FD 7F         sgt
2323   12AF FD F1         pop g
2324   12B1 E4            pop a
2325   12B2             ; END RELATIONAL
2326   12B2 C0 00 00      cmp b, 0
2327   12B5 C6 15 13      je _while35_exit
2328   12B8             _while35_block:
2329   12B8             ;; digits[i] = '0' + (num % 10); 
2330   12B8 FA F7 FF      lea d, [bp + -9] ; $digits
2331   12BB D7            push a
2332   12BC DA            push d
2333   12BD FA F5 FF      lea d, [bp + -11] ; $i
2334   12C0 2A            mov b, [d]
2335   12C1 E7            pop d
2336   12C2 5A            add d, b
2337   12C3 E4            pop a
2338   12C4 DA            push d
2339   12C5 26 30 00      mov b, $30
2340   12C8             ; START TERMS
2341   12C8 D7            push a
2342   12C9 11            mov a, b
2343   12CA FA 05 00      lea d, [bp + 5] ; $num
2344   12CD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2345   12D0 FD 39         mov c, b ; And place it into C
2346   12D2 2A            mov b, [d] ; Lower Word in B
2347   12D3             ; START FACTORS
2348   12D3 D7            push a
2349   12D4 11            mov a, b
2350   12D5 26 0A 00      mov b, $a
2351   12D8 AE            div a, b ; 
2352   12D9 11            mov a, b
2353   12DA 27            mov b, a
2354   12DB E4            pop a
2355   12DC             ; END FACTORS
2356   12DC 54            add a, b
2357   12DD D7            push a
2358   12DE FD 12         mov a, g
2359   12E0 28            mov b, c
2360   12E1 5C            adc a, b
2361   12E2 39            mov c, a
2362   12E3 E5            pop b
2363   12E4 E4            pop a
2364   12E5             ; END TERMS
2365   12E5 E7            pop d
2366   12E6 FD 3E         mov [d], bl
2367   12E8             ;; num = num / 10; 
2368   12E8 FA 05 00      lea d, [bp + 5] ; $num
2369   12EB DA            push d
2370   12EC FA 05 00      lea d, [bp + 5] ; $num
2371   12EF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2372   12F2 FD 39         mov c, b ; And place it into C
2373   12F4 2A            mov b, [d] ; Lower Word in B
2374   12F5             ; START FACTORS
2375   12F5 D7            push a
2376   12F6 11            mov a, b
2377   12F7 26 0A 00      mov b, $a
2378   12FA AE            div a, b
2379   12FB 27            mov b, a
2380   12FC E4            pop a
2381   12FD             ; END FACTORS
2382   12FD E7            pop d
2383   12FE FD 43         mov [d], b
2384   1300 28            mov b, c
2385   1301 FD 44 02 00   mov [d + 2], b
2386   1305             ;; i++; 
2387   1305 FA F5 FF      lea d, [bp + -11] ; $i
2388   1308 2A            mov b, [d]
2389   1309 D8            push b
2390   130A FD 77         inc b
2391   130C FA F5 FF      lea d, [bp + -11] ; $i
2392   130F FD 43         mov [d], b
2393   1311 E5            pop b
2394   1312 0A 98 12      jmp _while35_cond
2395   1315             _while35_exit:
2396   1315             ;; while (i > 0) { 
2397   1315             _while36_cond:
2398   1315 FA F5 FF      lea d, [bp + -11] ; $i
2399   1318 2A            mov b, [d]
2400   1319             ; START RELATIONAL
2401   1319 D7            push a
2402   131A 11            mov a, b
2403   131B 26 00 00      mov b, $0
2404   131E B0            cmp a, b
2405   131F FD 7F         sgt ; >
2406   1321 E4            pop a
2407   1322             ; END RELATIONAL
2408   1322 C0 00 00      cmp b, 0
2409   1325 C6 4E 13      je _while36_exit
2410   1328             _while36_block:
2411   1328             ;; i--; 
2412   1328 FA F5 FF      lea d, [bp + -11] ; $i
2413   132B 2A            mov b, [d]
2414   132C D8            push b
2415   132D FD 7D         dec b
2416   132F FA F5 FF      lea d, [bp + -11] ; $i
2417   1332 FD 43         mov [d], b
2418   1334 E5            pop b
2419   1335             ;; putchar(digits[i]); 
2420   1335 FA F7 FF      lea d, [bp + -9] ; $digits
2421   1338 D7            push a
2422   1339 DA            push d
2423   133A FA F5 FF      lea d, [bp + -11] ; $i
2424   133D 2A            mov b, [d]
2425   133E E7            pop d
2426   133F 5A            add d, b
2427   1340 E4            pop a
2428   1341 32            mov bl, [d]
2429   1342 A7 00         mov bh, 0
2430   1344 DD            push bl
2431   1345 07 1E 16      call putchar
2432   1348 51 01 00      add sp, 1
2433   134B 0A 15 13      jmp _while36_cond
2434   134E             _while36_exit:
2435   134E F9            leave
2436   134F 09            ret
2437   1350             
2438   1350             print_unsigned_long:
2439   1350 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2440   1353             ;; char digits[10]; 
2441   1353 52 0A 00      sub sp, 10 ; digits
2442   1356             ;; int i; 
2443   1356 52 02 00      sub sp, 2 ; i
2444   1359             ;; i = 0; 
2445   1359 FA F5 FF      lea d, [bp + -11] ; $i
2446   135C DA            push d
2447   135D 26 00 00      mov b, $0
2448   1360 E7            pop d
2449   1361 FD 43         mov [d], b
2450   1363             ;; if(num == 0){ 
2451   1363             _if37_cond:
2452   1363 FA 05 00      lea d, [bp + 5] ; $num
2453   1366 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2454   1369 FD 39         mov c, b ; And place it into C
2455   136B 2A            mov b, [d] ; Lower Word in B
2456   136C             ; START RELATIONAL
2457   136C D7            push a
2458   136D FD D8         push g
2459   136F 11            mov a, b
2460   1370 FD 7A         mov g, c
2461   1372 26 00 00      mov b, $0
2462   1375 38 00 00      mov c, 0
2463   1378 FD AF 00 00   cmp32 ga, cb
2463   137C 00 00 00 00 
2463   1380 00 00 00 00 
2463   1384 00 00 00 00 
2463   1388 00 00 00 00 
2463   138C 00 00 00 00 
2463   1390 00 00 00 00 
2463   1394 00 00 00 00 
2463   1398 00 00 00 00 
2463   139C 00 00 00 00 
2463   13A0 00 00 00 00 
2463   13A4 00 00 00 00 
2463   13A8 00 00 00 00 
2463   13AC 00 00 00 00 
2463   13B0 00 00 00 00 
2463   13B4 00 00 00 00 
2463   13B8 00 00 00 00 
2463   13BC 00 00 00 00 
2463   13C0 00 00 00 00 
2463   13C4 00 00 00 00 
2463   13C8 00 00 00 00 
2463   13CC 00 00 00 00 
2463   13D0 00 00 00 00 
2463   13D4 00 00 00 00 
2463   13D8 00 00 00 00 
2463   13DC 00 00 00 00 
2463   13E0 00 00 00 00 
2463   13E4 00 00 00 00 
2463   13E8 00 00 00 00 
2463   13EC 00 00 00 00 
2463   13F0 00 00 00 00 
2463   13F4 00 00 00 00 
2463   13F8 00 00 00 00 
2463   13FC 00 00 00 00 
2463   1400 00 00 00 00 
2463   1404 00 00 00 00 
2463   1408 00 00 00 00 
2463   140C 00 00 00 00 
2463   1410 00 00 00 00 
2463   1414 00 00 00 00 
2463   1418 00 00 00 00 
2463   141C 00 00 00 00 
2463   1420 00 00 00 00 
2463   1424 00 00 00 00 
2463   1428 00 00 00 00 
2463   142C 00 00 00 00 
2463   1430 00 00 00 00 
2463   1434 00 00 00 00 
2463   1438 00 00 00 00 
2463   143C 00 00 00 00 
2463   1440 00 00 00 00 
2463   1444 00 00 00 00 
2463   1448 00 00 00 00 
2463   144C 00 00 00 00 
2463   1450 00 00 00 00 
2463   1454 00 00 00 00 
2463   1458 00 00 00 00 
2463   145C 00 00 00 00 
2463   1460 00 00 00 00 
2463   1464 00 00 00 00 
2463   1468 00 00 00 00 
2463   146C 00 00 00 00 
2463   1470 00 00 00 00 
2463   1474 00 00 00 00 
2463   1478 00 
2464   1479 FD 71         seq ; ==
2465   147B FD F1         pop g
2466   147D E4            pop a
2467   147E             ; END RELATIONAL
2468   147E C0 00 00      cmp b, 0
2469   1481 C6 93 14      je _if37_exit
2470   1484             _if37_true:
2471   1484             ;; putchar('0'); 
2472   1484 26 30 00      mov b, $30
2473   1487 DD            push bl
2474   1488 07 1E 16      call putchar
2475   148B 51 01 00      add sp, 1
2476   148E             ;; return; 
2477   148E F9            leave
2478   148F 09            ret
2479   1490 0A 93 14      jmp _if37_exit
2480   1493             _if37_exit:
2481   1493             ;; while (num > 0) { 
2482   1493             _while38_cond:
2483   1493 FA 05 00      lea d, [bp + 5] ; $num
2484   1496 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2485   1499 FD 39         mov c, b ; And place it into C
2486   149B 2A            mov b, [d] ; Lower Word in B
2487   149C             ; START RELATIONAL
2488   149C D7            push a
2489   149D FD D8         push g
2490   149F 11            mov a, b
2491   14A0 FD 7A         mov g, c
2492   14A2 26 00 00      mov b, $0
2493   14A5 38 00 00      mov c, 0
2494   14A8 FD 81         sgu
2495   14AA FD F1         pop g
2496   14AC E4            pop a
2497   14AD             ; END RELATIONAL
2498   14AD C0 00 00      cmp b, 0
2499   14B0 C6 10 15      je _while38_exit
2500   14B3             _while38_block:
2501   14B3             ;; digits[i] = '0' + (num % 10); 
2502   14B3 FA F7 FF      lea d, [bp + -9] ; $digits
2503   14B6 D7            push a
2504   14B7 DA            push d
2505   14B8 FA F5 FF      lea d, [bp + -11] ; $i
2506   14BB 2A            mov b, [d]
2507   14BC E7            pop d
2508   14BD 5A            add d, b
2509   14BE E4            pop a
2510   14BF DA            push d
2511   14C0 26 30 00      mov b, $30
2512   14C3             ; START TERMS
2513   14C3 D7            push a
2514   14C4 11            mov a, b
2515   14C5 FA 05 00      lea d, [bp + 5] ; $num
2516   14C8 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2517   14CB FD 39         mov c, b ; And place it into C
2518   14CD 2A            mov b, [d] ; Lower Word in B
2519   14CE             ; START FACTORS
2520   14CE D7            push a
2521   14CF 11            mov a, b
2522   14D0 26 0A 00      mov b, $a
2523   14D3 AE            div a, b ; 
2524   14D4 11            mov a, b
2525   14D5 27            mov b, a
2526   14D6 E4            pop a
2527   14D7             ; END FACTORS
2528   14D7 54            add a, b
2529   14D8 D7            push a
2530   14D9 FD 12         mov a, g
2531   14DB 28            mov b, c
2532   14DC 5C            adc a, b
2533   14DD 39            mov c, a
2534   14DE E5            pop b
2535   14DF E4            pop a
2536   14E0             ; END TERMS
2537   14E0 E7            pop d
2538   14E1 FD 3E         mov [d], bl
2539   14E3             ;; num = num / 10; 
2540   14E3 FA 05 00      lea d, [bp + 5] ; $num
2541   14E6 DA            push d
2542   14E7 FA 05 00      lea d, [bp + 5] ; $num
2543   14EA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2544   14ED FD 39         mov c, b ; And place it into C
2545   14EF 2A            mov b, [d] ; Lower Word in B
2546   14F0             ; START FACTORS
2547   14F0 D7            push a
2548   14F1 11            mov a, b
2549   14F2 26 0A 00      mov b, $a
2550   14F5 AE            div a, b
2551   14F6 27            mov b, a
2552   14F7 E4            pop a
2553   14F8             ; END FACTORS
2554   14F8 E7            pop d
2555   14F9 FD 43         mov [d], b
2556   14FB 28            mov b, c
2557   14FC FD 44 02 00   mov [d + 2], b
2558   1500             ;; i++; 
2559   1500 FA F5 FF      lea d, [bp + -11] ; $i
2560   1503 2A            mov b, [d]
2561   1504 D8            push b
2562   1505 FD 77         inc b
2563   1507 FA F5 FF      lea d, [bp + -11] ; $i
2564   150A FD 43         mov [d], b
2565   150C E5            pop b
2566   150D 0A 93 14      jmp _while38_cond
2567   1510             _while38_exit:
2568   1510             ;; while (i > 0) { 
2569   1510             _while39_cond:
2570   1510 FA F5 FF      lea d, [bp + -11] ; $i
2571   1513 2A            mov b, [d]
2572   1514             ; START RELATIONAL
2573   1514 D7            push a
2574   1515 11            mov a, b
2575   1516 26 00 00      mov b, $0
2576   1519 B0            cmp a, b
2577   151A FD 7F         sgt ; >
2578   151C E4            pop a
2579   151D             ; END RELATIONAL
2580   151D C0 00 00      cmp b, 0
2581   1520 C6 49 15      je _while39_exit
2582   1523             _while39_block:
2583   1523             ;; i--; 
2584   1523 FA F5 FF      lea d, [bp + -11] ; $i
2585   1526 2A            mov b, [d]
2586   1527 D8            push b
2587   1528 FD 7D         dec b
2588   152A FA F5 FF      lea d, [bp + -11] ; $i
2589   152D FD 43         mov [d], b
2590   152F E5            pop b
2591   1530             ;; putchar(digits[i]); 
2592   1530 FA F7 FF      lea d, [bp + -9] ; $digits
2593   1533 D7            push a
2594   1534 DA            push d
2595   1535 FA F5 FF      lea d, [bp + -11] ; $i
2596   1538 2A            mov b, [d]
2597   1539 E7            pop d
2598   153A 5A            add d, b
2599   153B E4            pop a
2600   153C 32            mov bl, [d]
2601   153D A7 00         mov bh, 0
2602   153F DD            push bl
2603   1540 07 1E 16      call putchar
2604   1543 51 01 00      add sp, 1
2605   1546 0A 10 15      jmp _while39_cond
2606   1549             _while39_exit:
2607   1549 F9            leave
2608   154A 09            ret
2609   154B             
2610   154B             print_unsigned:
2611   154B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2612   154E             ;; char digits[5]; 
2613   154E 52 05 00      sub sp, 5 ; digits
2614   1551             ;; int i; 
2615   1551 52 02 00      sub sp, 2 ; i
2616   1554             ;; i = 0; 
2617   1554 FA FA FF      lea d, [bp + -6] ; $i
2618   1557 DA            push d
2619   1558 26 00 00      mov b, $0
2620   155B E7            pop d
2621   155C FD 43         mov [d], b
2622   155E             ;; if(num == 0){ 
2623   155E             _if40_cond:
2624   155E FA 05 00      lea d, [bp + 5] ; $num
2625   1561 2A            mov b, [d]
2626   1562             ; START RELATIONAL
2627   1562 D7            push a
2628   1563 11            mov a, b
2629   1564 26 00 00      mov b, $0
2630   1567 B0            cmp a, b
2631   1568 FD 71         seq ; ==
2632   156A E4            pop a
2633   156B             ; END RELATIONAL
2634   156B C0 00 00      cmp b, 0
2635   156E C6 80 15      je _if40_exit
2636   1571             _if40_true:
2637   1571             ;; putchar('0'); 
2638   1571 26 30 00      mov b, $30
2639   1574 DD            push bl
2640   1575 07 1E 16      call putchar
2641   1578 51 01 00      add sp, 1
2642   157B             ;; return; 
2643   157B F9            leave
2644   157C 09            ret
2645   157D 0A 80 15      jmp _if40_exit
2646   1580             _if40_exit:
2647   1580             ;; while (num > 0) { 
2648   1580             _while41_cond:
2649   1580 FA 05 00      lea d, [bp + 5] ; $num
2650   1583 2A            mov b, [d]
2651   1584             ; START RELATIONAL
2652   1584 D7            push a
2653   1585 11            mov a, b
2654   1586 26 00 00      mov b, $0
2655   1589 B0            cmp a, b
2656   158A FD 81         sgu ; > (unsigned)
2657   158C E4            pop a
2658   158D             ; END RELATIONAL
2659   158D C0 00 00      cmp b, 0
2660   1590 C6 DA 15      je _while41_exit
2661   1593             _while41_block:
2662   1593             ;; digits[i] = '0' + (num % 10); 
2663   1593 FA FC FF      lea d, [bp + -4] ; $digits
2664   1596 D7            push a
2665   1597 DA            push d
2666   1598 FA FA FF      lea d, [bp + -6] ; $i
2667   159B 2A            mov b, [d]
2668   159C E7            pop d
2669   159D 5A            add d, b
2670   159E E4            pop a
2671   159F DA            push d
2672   15A0 26 30 00      mov b, $30
2673   15A3             ; START TERMS
2674   15A3 D7            push a
2675   15A4 11            mov a, b
2676   15A5 FA 05 00      lea d, [bp + 5] ; $num
2677   15A8 2A            mov b, [d]
2678   15A9             ; START FACTORS
2679   15A9 D7            push a
2680   15AA 11            mov a, b
2681   15AB 26 0A 00      mov b, $a
2682   15AE AE            div a, b ; 
2683   15AF 11            mov a, b
2684   15B0 27            mov b, a
2685   15B1 E4            pop a
2686   15B2             ; END FACTORS
2687   15B2 56            add b, a
2688   15B3 E4            pop a
2689   15B4             ; END TERMS
2690   15B4 E7            pop d
2691   15B5 FD 3E         mov [d], bl
2692   15B7             ;; num = num / 10; 
2693   15B7 FA 05 00      lea d, [bp + 5] ; $num
2694   15BA DA            push d
2695   15BB FA 05 00      lea d, [bp + 5] ; $num
2696   15BE 2A            mov b, [d]
2697   15BF             ; START FACTORS
2698   15BF D7            push a
2699   15C0 11            mov a, b
2700   15C1 26 0A 00      mov b, $a
2701   15C4 AE            div a, b
2702   15C5 27            mov b, a
2703   15C6 E4            pop a
2704   15C7             ; END FACTORS
2705   15C7 E7            pop d
2706   15C8 FD 43         mov [d], b
2707   15CA             ;; i++; 
2708   15CA FA FA FF      lea d, [bp + -6] ; $i
2709   15CD 2A            mov b, [d]
2710   15CE D8            push b
2711   15CF FD 77         inc b
2712   15D1 FA FA FF      lea d, [bp + -6] ; $i
2713   15D4 FD 43         mov [d], b
2714   15D6 E5            pop b
2715   15D7 0A 80 15      jmp _while41_cond
2716   15DA             _while41_exit:
2717   15DA             ;; while (i > 0) { 
2718   15DA             _while42_cond:
2719   15DA FA FA FF      lea d, [bp + -6] ; $i
2720   15DD 2A            mov b, [d]
2721   15DE             ; START RELATIONAL
2722   15DE D7            push a
2723   15DF 11            mov a, b
2724   15E0 26 00 00      mov b, $0
2725   15E3 B0            cmp a, b
2726   15E4 FD 7F         sgt ; >
2727   15E6 E4            pop a
2728   15E7             ; END RELATIONAL
2729   15E7 C0 00 00      cmp b, 0
2730   15EA C6 13 16      je _while42_exit
2731   15ED             _while42_block:
2732   15ED             ;; i--; 
2733   15ED FA FA FF      lea d, [bp + -6] ; $i
2734   15F0 2A            mov b, [d]
2735   15F1 D8            push b
2736   15F2 FD 7D         dec b
2737   15F4 FA FA FF      lea d, [bp + -6] ; $i
2738   15F7 FD 43         mov [d], b
2739   15F9 E5            pop b
2740   15FA             ;; putchar(digits[i]); 
2741   15FA FA FC FF      lea d, [bp + -4] ; $digits
2742   15FD D7            push a
2743   15FE DA            push d
2744   15FF FA FA FF      lea d, [bp + -6] ; $i
2745   1602 2A            mov b, [d]
2746   1603 E7            pop d
2747   1604 5A            add d, b
2748   1605 E4            pop a
2749   1606 32            mov bl, [d]
2750   1607 A7 00         mov bh, 0
2751   1609 DD            push bl
2752   160A 07 1E 16      call putchar
2753   160D 51 01 00      add sp, 1
2754   1610 0A DA 15      jmp _while42_cond
2755   1613             _while42_exit:
2756   1613 F9            leave
2757   1614 09            ret
2758   1615             
2759   1615             date:
2760   1615 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2761   1618             
2762   1618             ; --- BEGIN INLINE ASM BLOCK
2763   1618 19 00         mov al, 0 
2764   161A 05 07         syscall sys_datetime
2765   161C             ; --- END INLINE ASM BLOCK
2766   161C             
2767   161C F9            leave
2768   161D 09            ret
2769   161E             
2770   161E             putchar:
2771   161E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2772   1621             
2773   1621             ; --- BEGIN INLINE ASM BLOCK
2774   1621 FA 05 00      lea d, [bp + 5] ; $c
2775   1624 1E            mov al, [d]
2776   1625 23            mov ah, al
2777   1626 07 AF 17      call _putchar
2778   1629             ; --- END INLINE ASM BLOCK
2779   1629             
2780   1629 F9            leave
2781   162A 09            ret
2782   162B             
2783   162B             getchar:
2784   162B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2785   162E             ;; char c; 
2786   162E 52 01 00      sub sp, 1 ; c
2787   1631             
2788   1631             ; --- BEGIN INLINE ASM BLOCK
2789   1631 07 A8 17      call getch
2790   1634 1A            mov al, ah
2791   1635 FA 00 00      lea d, [bp + 0] ; $c
2792   1638 3E            mov [d], al
2793   1639             ; --- END INLINE ASM BLOCK
2794   1639             
2795   1639             ;; return c; 
2796   1639 FA 00 00      lea d, [bp + 0] ; $c
2797   163C 32            mov bl, [d]
2798   163D A7 00         mov bh, 0
2799   163F F9            leave
2800   1640 09            ret
2801   1641             
2802   1641             scann:
2803   1641 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2804   1644             ;; int m; 
2805   1644 52 02 00      sub sp, 2 ; m
2806   1647             
2807   1647             ; --- BEGIN INLINE ASM BLOCK
2808   1647 07 F3 19      call scan_u16d
2809   164A FA FF FF      lea d, [bp + -1] ; $m
2810   164D 43            mov [d], a
2811   164E             ; --- END INLINE ASM BLOCK
2812   164E             
2813   164E             ;; return m; 
2814   164E FA FF FF      lea d, [bp + -1] ; $m
2815   1651 2A            mov b, [d]
2816   1652 F9            leave
2817   1653 09            ret
2818   1654             
2819   1654             puts:
2820   1654 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2821   1657             
2822   1657             ; --- BEGIN INLINE ASM BLOCK
2823   1657 FA 05 00      lea d, [bp + 5] ; $s
2824   165A 15            mov a, [d]
2825   165B 3C            mov d, a
2826   165C 07 F9 18      call _puts
2827   165F 10 00 0A      mov a, $0A00
2828   1662 05 03         syscall sys_io
2829   1664             ; --- END INLINE ASM BLOCK
2830   1664             
2831   1664 F9            leave
2832   1665 09            ret
2833   1666             
2834   1666             print:
2835   1666 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2836   1669             
2837   1669             ; --- BEGIN INLINE ASM BLOCK
2838   1669 FA 05 00      lea d, [bp + 5] ; $s
2839   166C FD 2A         mov d, [d]
2840   166E 07 F9 18      call _puts
2841   1671             ; --- END INLINE ASM BLOCK
2842   1671             
2843   1671 F9            leave
2844   1672 09            ret
2845   1673             
2846   1673             getparam:
2847   1673 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2848   1676             ;; char data; 
2849   1676 52 01 00      sub sp, 1 ; data
2850   1679             
2851   1679             ; --- BEGIN INLINE ASM BLOCK
2852   1679 19 04         mov al, 4
2853   167B FA 05 00      lea d, [bp + 5] ; $address
2854   167E FD 2A         mov d, [d]
2855   1680 05 0C         syscall sys_system
2856   1682 FA 00 00      lea d, [bp + 0] ; $data
2857   1685 FD 3E         mov [d], bl
2858   1687             ; --- END INLINE ASM BLOCK
2859   1687             
2860   1687             ;; return data; 
2861   1687 FA 00 00      lea d, [bp + 0] ; $data
2862   168A 32            mov bl, [d]
2863   168B A7 00         mov bh, 0
2864   168D F9            leave
2865   168E 09            ret
2866   168F             
2867   168F             clear:
2868   168F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2869   1692             ;; print("\033[2J\033[H"); 
2870   1692 26 B8 22      mov b, _s3 ; "\033[2J\033[H"
2871   1695 FD AB         swp b
2872   1697 D8            push b
2873   1698 07 66 16      call print
2874   169B 51 02 00      add sp, 2
2875   169E F9            leave
2876   169F 09            ret
2877   16A0             
2878   16A0             abs:
2879   16A0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2880   16A3             ;; return i < 0 ? -i : i; 
2881   16A3             _ternary43_cond:
2882   16A3 FA 05 00      lea d, [bp + 5] ; $i
2883   16A6 2A            mov b, [d]
2884   16A7             ; START RELATIONAL
2885   16A7 D7            push a
2886   16A8 11            mov a, b
2887   16A9 26 00 00      mov b, $0
2888   16AC B0            cmp a, b
2889   16AD FD 73         slt ; < (signed)
2890   16AF E4            pop a
2891   16B0             ; END RELATIONAL
2892   16B0 C0 00 00      cmp b, 0
2893   16B3 C6 BF 16      je _ternary43_false
2894   16B6             _ternary43_true:
2895   16B6 FA 05 00      lea d, [bp + 5] ; $i
2896   16B9 2A            mov b, [d]
2897   16BA FD 97         neg b
2898   16BC 0A C3 16      jmp _ternary43_exit
2899   16BF             _ternary43_false:
2900   16BF FA 05 00      lea d, [bp + 5] ; $i
2901   16C2 2A            mov b, [d]
2902   16C3             _ternary43_exit:
2903   16C3 F9            leave
2904   16C4 09            ret
2905   16C5             
2906   16C5             include_stdio_asm:
2907   16C5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2908   16C8             
2909   16C8             ; --- BEGIN INLINE ASM BLOCK
2910   16C8             .include "lib/asm/stdio.asm"
0001+  16C8             ;-----------------------------------------------------------------------------
0002+  16C8             ; stdio.s
0003+  16C8             ;-----------------------------------------------------------------------------
0004+  16C8             .include "lib/asm/string.asm"
0001++ 16C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 16C8             ; string.s
0003++ 16C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 16C8             
0005++ 16C8             
0006++ 16C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 16C8             ; _strrev
0008++ 16C8             ; reverse a string
0009++ 16C8             ; D = string address
0010++ 16C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 16C8             ; 01234
0012++ 16C8             _strrev:
0013++ 16C8 4B          	pusha
0014++ 16C9 07 0F 17    	call _strlen	; length in C
0015++ 16CC 12          	mov a, c
0016++ 16CD AF 01 00    	cmp a, 1
0017++ 16D0 D0 EA 16    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 16D3 7D          	dec a
0019++ 16D4 FD 4E       	mov si, d	; beginning of string
0020++ 16D6 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 16D8 59          	add d, a	; end of string
0022++ 16D9 12          	mov a, c
0023++ 16DA FD 9B       	shr a		; divide by 2
0024++ 16DC 39          	mov c, a	; C now counts the steps
0025++ 16DD             _strrev_L0:
0026++ 16DD 32          	mov bl, [d]	; save load right-side char into BL
0027++ 16DE F6          	lodsb		; load left-side char into AL; increase SI
0028++ 16DF 3E          	mov [d], al	; store left char into right side
0029++ 16E0 1B          	mov al, bl
0030++ 16E1 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 16E2 7E          	dec c
0032++ 16E3 7F          	dec d
0033++ 16E4 C2 00 00    	cmp c, 0
0034++ 16E7 C7 DD 16    	jne _strrev_L0
0035++ 16EA             _strrev_end:
0036++ 16EA 4C          	popa
0037++ 16EB 09          	ret
0038++ 16EC             	
0039++ 16EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 16EC             ; _strchr
0041++ 16EC             ; search string in D for char in AL
0042++ 16EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 16EC             _strchr:
0044++ 16EC             _strchr_L0:
0045++ 16EC 32          	mov bl, [d]
0046++ 16ED C1 00       	cmp bl, 0
0047++ 16EF C6 FA 16    	je _strchr_end
0048++ 16F2 BA          	cmp al, bl
0049++ 16F3 C6 FA 16    	je _strchr_end
0050++ 16F6 79          	inc d
0051++ 16F7 0A EC 16    	jmp _strchr_L0
0052++ 16FA             _strchr_end:
0053++ 16FA 1B          	mov al, bl
0054++ 16FB 09          	ret
0055++ 16FC             
0056++ 16FC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 16FC             ; _strstr
0058++ 16FC             ; find sub-string
0059++ 16FC             ; str1 in SI
0060++ 16FC             ; str2 in DI
0061++ 16FC             ; SI points to end of source string
0062++ 16FC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 16FC             _strstr:
0064++ 16FC DB          	push al
0065++ 16FD DA          	push d
0066++ 16FE E3          	push di
0067++ 16FF             _strstr_loop:
0068++ 16FF F3          	cmpsb					; compare a byte of the strings
0069++ 1700 C7 0B 17    	jne _strstr_ret
0070++ 1703 FC 00 00    	lea d, [di + 0]
0071++ 1706 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1708 C7 FF 16    	jne _strstr_loop				; equal chars but not at end
0073++ 170B             _strstr_ret:
0074++ 170B F0          	pop di
0075++ 170C E7          	pop d
0076++ 170D E8          	pop al
0077++ 170E 09          	ret
0078++ 170F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 170F             ; length of null terminated string
0080++ 170F             ; result in C
0081++ 170F             ; pointer in D
0082++ 170F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 170F             _strlen:
0084++ 170F DA          	push d
0085++ 1710 38 00 00    	mov c, 0
0086++ 1713             _strlen_L1:
0087++ 1713 BD 00       	cmp byte [d], 0
0088++ 1715 C6 1D 17    	je _strlen_ret
0089++ 1718 79          	inc d
0090++ 1719 78          	inc c
0091++ 171A 0A 13 17    	jmp _strlen_L1
0092++ 171D             _strlen_ret:
0093++ 171D E7          	pop d
0094++ 171E 09          	ret
0095++ 171F             
0096++ 171F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 171F             ; STRCMP
0098++ 171F             ; compare two strings
0099++ 171F             ; str1 in SI
0100++ 171F             ; str2 in DI
0101++ 171F             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 171F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 171F             _strcmp:
0104++ 171F DB          	push al
0105++ 1720 DA          	push d
0106++ 1721 E3          	push di
0107++ 1722 E2          	push si
0108++ 1723             _strcmp_loop:
0109++ 1723 F3          	cmpsb					; compare a byte of the strings
0110++ 1724 C7 2F 17    	jne _strcmp_ret
0111++ 1727 FB FF FF    	lea d, [si +- 1]
0112++ 172A BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 172C C7 23 17    	jne _strcmp_loop				; equal chars but not at end
0114++ 172F             _strcmp_ret:
0115++ 172F EF          	pop si
0116++ 1730 F0          	pop di
0117++ 1731 E7          	pop d
0118++ 1732 E8          	pop al
0119++ 1733 09          	ret
0120++ 1734             
0121++ 1734             
0122++ 1734             ; STRCPY
0123++ 1734             ; copy null terminated string from SI to DI
0124++ 1734             ; source in SI
0125++ 1734             ; destination in DI
0126++ 1734             _strcpy:
0127++ 1734 E2          	push si
0128++ 1735 E3          	push di
0129++ 1736 DB          	push al
0130++ 1737             _strcpy_L1:
0131++ 1737 F6          	lodsb
0132++ 1738 F7          	stosb
0133++ 1739 B9 00       	cmp al, 0
0134++ 173B C7 37 17    	jne _strcpy_L1
0135++ 173E             _strcpy_end:
0136++ 173E E8          	pop al
0137++ 173F F0          	pop di
0138++ 1740 EF          	pop si
0139++ 1741 09          	ret
0140++ 1742             
0141++ 1742             ; STRCAT
0142++ 1742             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1742             ; source in SI
0144++ 1742             ; destination in DI
0145++ 1742             _strcat:
0146++ 1742 E2          	push si
0147++ 1743 E3          	push di
0148++ 1744 D7          	push a
0149++ 1745 DA          	push d
0150++ 1746 50          	mov a, di
0151++ 1747 3C          	mov d, a
0152++ 1748             _strcat_goto_end_L1:
0153++ 1748 BD 00       	cmp byte[d], 0
0154++ 174A C6 51 17    	je _strcat_start
0155++ 174D 79          	inc d
0156++ 174E 0A 48 17    	jmp _strcat_goto_end_L1
0157++ 1751             _strcat_start:
0158++ 1751 FD 50       	mov di, d
0159++ 1753             _strcat_L1:
0160++ 1753 F6          	lodsb
0161++ 1754 F7          	stosb
0162++ 1755 B9 00       	cmp al, 0
0163++ 1757 C7 53 17    	jne _strcat_L1
0164++ 175A             _strcat_end:
0165++ 175A E7          	pop d
0166++ 175B E4          	pop a
0167++ 175C F0          	pop di
0168++ 175D EF          	pop si
0169++ 175E 09          	ret
0170++ 175F             
0171++ 175F             
0005+  175F             
0006+  175F             ;-----------------------------------------------------------------------------
0007+  175F             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  175F             ; ASCII in BL
0009+  175F             ; result in AL
0010+  175F             ; ascii for F = 0100 0110
0011+  175F             ; ascii for 9 = 0011 1001
0012+  175F             ;-----------------------------------------------------------------------------
0013+  175F             hex_ascii_encode:
0014+  175F 1B            mov al, bl
0015+  1760 93 40         test al, $40        ; test if letter or number
0016+  1762 C7 68 17      jnz hex_letter
0017+  1765 87 0F         and al, $0F        ; get number
0018+  1767 09            ret
0019+  1768             hex_letter:
0020+  1768 87 0F         and al, $0F        ; get letter
0021+  176A 6A 09         add al, 9
0022+  176C 09            ret
0023+  176D             
0024+  176D             ;-----------------------------------------------------------------------------
0025+  176D             ; ATOI
0026+  176D             ; 2 letter hex string in B
0027+  176D             ; 8bit integer returned in AL
0028+  176D             ;-----------------------------------------------------------------------------
0029+  176D             _atoi:
0030+  176D D8            push b
0031+  176E 07 5F 17      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  1771 30            mov bl, bh
0033+  1772 DB            push al          ; save a
0034+  1773 07 5F 17      call hex_ascii_encode
0035+  1776 EA            pop bl  
0036+  1777 FD 9E 04      shl al, 4
0037+  177A 8C            or al, bl
0038+  177B E5            pop b
0039+  177C 09            ret  
0040+  177D             
0041+  177D             
0042+  177D             ;-----------------------------------------------------------------------------
0043+  177D             ; ITOA
0044+  177D             ; 8bit value in BL
0045+  177D             ; 2 byte ASCII result in A
0046+  177D             ;-----------------------------------------------------------------------------
0047+  177D             _itoa:
0048+  177D DA            push d
0049+  177E D8            push b
0050+  177F A7 00         mov bh, 0
0051+  1781 FD A4 04      shr bl, 4  
0052+  1784 74            mov d, b
0053+  1785 1F 2D 1A      mov al, [d + s_hex_digits]
0054+  1788 23            mov ah, al
0055+  1789               
0056+  1789 E5            pop b
0057+  178A D8            push b
0058+  178B A7 00         mov bh, 0
0059+  178D FD 87 0F      and bl, $0F
0060+  1790 74            mov d, b
0061+  1791 1F 2D 1A      mov al, [d + s_hex_digits]
0062+  1794 E5            pop b
0063+  1795 E7            pop d
0064+  1796 09            ret
0065+  1797             
0066+  1797             ;-----------------------------------------------------------------------------
0067+  1797             ; HEX STRING TO BINARY
0068+  1797             ; di = destination address
0069+  1797             ; si = source
0070+  1797             ;-----------------------------------------------------------------------------
0071+  1797             _hex_to_int:
0072+  1797             _hex_to_int_L1:
0073+  1797 F6            lodsb          ; load from [SI] to AL
0074+  1798 B9 00         cmp al, 0        ; check if ASCII 0
0075+  179A C6 A7 17      jz _hex_to_int_ret
0076+  179D 36            mov bh, al
0077+  179E F6            lodsb
0078+  179F 2F            mov bl, al
0079+  17A0 07 6D 17      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  17A3 F7            stosb          ; store AL to [DI]
0081+  17A4 0A 97 17      jmp _hex_to_int_L1
0082+  17A7             _hex_to_int_ret:
0083+  17A7 09            ret    
0084+  17A8             
0085+  17A8             ;-----------------------------------------------------------------------------
0086+  17A8             ; GETCHAR
0087+  17A8             ; char in ah
0088+  17A8             ;-----------------------------------------------------------------------------
0089+  17A8             getch:
0090+  17A8 DB            push al
0091+  17A9             getch_retry:
0092+  17A9 19 01         mov al, 1
0093+  17AB 05 03         syscall sys_io      ; receive in AH
0094+  17AD E8            pop al
0095+  17AE 09            ret
0096+  17AF             
0097+  17AF             ;-----------------------------------------------------------------------------
0098+  17AF             ; PUTCHAR
0099+  17AF             ; char in ah
0100+  17AF             ;-----------------------------------------------------------------------------
0101+  17AF             _putchar:
0102+  17AF D7            push a
0103+  17B0 19 00         mov al, 0
0104+  17B2 05 03         syscall sys_io      ; char in AH
0105+  17B4 E4            pop a
0106+  17B5 09            ret
0107+  17B6             
0108+  17B6             ;-----------------------------------------------------------------------------
0109+  17B6             ;; INPUT A STRING
0110+  17B6             ;; terminates with null
0111+  17B6             ;; pointer in D
0112+  17B6             ;-----------------------------------------------------------------------------
0113+  17B6             _gets:
0114+  17B6 D7            push a
0115+  17B7 DA            push d
0116+  17B8             _gets_loop:
0117+  17B8 19 01         mov al, 1
0118+  17BA 05 03         syscall sys_io      ; receive in AH
0119+  17BC B9 00         cmp al, 0        ; check error code (AL)
0120+  17BE C6 B8 17      je _gets_loop      ; if no char received, retry
0121+  17C1             
0122+  17C1 76 1B         cmp ah, 27
0123+  17C3 C6 E4 17      je _gets_ansi_esc
0124+  17C6 76 0A         cmp ah, $0A        ; LF
0125+  17C8 C6 4F 18      je _gets_end
0126+  17CB 76 0D         cmp ah, $0D        ; CR
0127+  17CD C6 4F 18      je _gets_end
0128+  17D0 76 5C         cmp ah, $5C        ; '\\'
0129+  17D2 C6 10 18      je _gets_escape
0130+  17D5               
0131+  17D5 76 08         cmp ah, $08      ; check for backspace
0132+  17D7 C6 E0 17      je _gets_backspace
0133+  17DA             
0134+  17DA 1A            mov al, ah
0135+  17DB 3E            mov [d], al
0136+  17DC 79            inc d
0137+  17DD 0A B8 17      jmp _gets_loop
0138+  17E0             _gets_backspace:
0139+  17E0 7F            dec d
0140+  17E1 0A B8 17      jmp _gets_loop
0141+  17E4             _gets_ansi_esc:
0142+  17E4 19 01         mov al, 1
0143+  17E6 05 03         syscall sys_io        ; receive in AH without echo
0144+  17E8 B9 00         cmp al, 0          ; check error code (AL)
0145+  17EA C6 E4 17      je _gets_ansi_esc    ; if no char received, retry
0146+  17ED 76 5B         cmp ah, '['
0147+  17EF C7 B8 17      jne _gets_loop
0148+  17F2             _gets_ansi_esc_2:
0149+  17F2 19 01         mov al, 1
0150+  17F4 05 03         syscall sys_io          ; receive in AH without echo
0151+  17F6 B9 00         cmp al, 0            ; check error code (AL)
0152+  17F8 C6 F2 17      je _gets_ansi_esc_2  ; if no char received, retry
0153+  17FB 76 44         cmp ah, 'D'
0154+  17FD C6 08 18      je _gets_left_arrow
0155+  1800 76 43         cmp ah, 'C'
0156+  1802 C6 0C 18      je _gets_right_arrow
0157+  1805 0A B8 17      jmp _gets_loop
0158+  1808             _gets_left_arrow:
0159+  1808 7F            dec d
0160+  1809 0A B8 17      jmp _gets_loop
0161+  180C             _gets_right_arrow:
0162+  180C 79            inc d
0163+  180D 0A B8 17      jmp _gets_loop
0164+  1810             _gets_escape:
0165+  1810 19 01         mov al, 1
0166+  1812 05 03         syscall sys_io      ; receive in AH
0167+  1814 B9 00         cmp al, 0        ; check error code (AL)
0168+  1816 C6 10 18      je _gets_escape      ; if no char received, retry
0169+  1819 76 6E         cmp ah, 'n'
0170+  181B C6 3A 18      je _gets_LF
0171+  181E 76 72         cmp ah, 'r'
0172+  1820 C6 41 18      je _gets_CR
0173+  1823 76 30         cmp ah, '0'
0174+  1825 C6 48 18      je _gets_NULL
0175+  1828 76 5C         cmp ah, $5C  ; '\'
0176+  182A C6 33 18      je _gets_slash
0177+  182D 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  182E 3E            mov [d], al
0179+  182F 79            inc d
0180+  1830 0A B8 17      jmp _gets_loop
0181+  1833             _gets_slash:
0182+  1833 19 5C         mov al, $5C
0183+  1835 3E            mov [d], al
0184+  1836 79            inc d
0185+  1837 0A B8 17      jmp _gets_loop
0186+  183A             _gets_LF:
0187+  183A 19 0A         mov al, $0A
0188+  183C 3E            mov [d], al
0189+  183D 79            inc d
0190+  183E 0A B8 17      jmp _gets_loop
0191+  1841             _gets_CR:
0192+  1841 19 0D         mov al, $0D
0193+  1843 3E            mov [d], al
0194+  1844 79            inc d
0195+  1845 0A B8 17      jmp _gets_loop
0196+  1848             _gets_NULL:
0197+  1848 19 00         mov al, $00
0198+  184A 3E            mov [d], al
0199+  184B 79            inc d
0200+  184C 0A B8 17      jmp _gets_loop
0201+  184F             _gets_end:
0202+  184F 19 00         mov al, 0
0203+  1851 3E            mov [d], al        ; terminate string
0204+  1852 E7            pop d
0205+  1853 E4            pop a
0206+  1854 09            ret
0207+  1855             
0208+  1855             ;-----------------------------------------------------------------------------
0209+  1855             ;; INPUT TEXT
0210+  1855             ;; terminated with CTRL+D
0211+  1855             ;; pointer in D
0212+  1855             ;-----------------------------------------------------------------------------
0213+  1855             _gettxt:
0214+  1855 D7            push a
0215+  1856 DA            push d
0216+  1857             _gettxt_loop:
0217+  1857 19 01         mov al, 1
0218+  1859 05 03         syscall sys_io      ; receive in AH
0219+  185B B9 00         cmp al, 0        ; check error code (AL)
0220+  185D C6 57 18      je _gettxt_loop    ; if no char received, retry
0221+  1860 76 04         cmp ah, 4      ; EOT
0222+  1862 C6 A0 18      je _gettxt_end
0223+  1865 76 08         cmp ah, $08      ; check for backspace
0224+  1867 C6 9C 18      je _gettxt_backspace
0225+  186A 76 5C         cmp ah, $5C        ; '\'
0226+  186C C6 75 18      je _gettxt_escape
0227+  186F 1A            mov al, ah
0228+  1870 3E            mov [d], al
0229+  1871 79            inc d
0230+  1872 0A 57 18      jmp _gettxt_loop
0231+  1875             _gettxt_escape:
0232+  1875 19 01         mov al, 1
0233+  1877 05 03         syscall sys_io      ; receive in AH
0234+  1879 B9 00         cmp al, 0        ; check error code (AL)
0235+  187B C6 75 18      je _gettxt_escape    ; if no char received, retry
0236+  187E 76 6E         cmp ah, 'n'
0237+  1880 C6 8E 18      je _gettxt_LF
0238+  1883 76 72         cmp ah, 'r'
0239+  1885 C6 95 18      je _gettxt_CR
0240+  1888 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  1889 3E            mov [d], al
0242+  188A 79            inc d
0243+  188B 0A 57 18      jmp _gettxt_loop
0244+  188E             _gettxt_LF:
0245+  188E 19 0A         mov al, $0A
0246+  1890 3E            mov [d], al
0247+  1891 79            inc d
0248+  1892 0A 57 18      jmp _gettxt_loop
0249+  1895             _gettxt_CR:
0250+  1895 19 0D         mov al, $0D
0251+  1897 3E            mov [d], al
0252+  1898 79            inc d
0253+  1899 0A 57 18      jmp _gettxt_loop
0254+  189C             _gettxt_backspace:
0255+  189C 7F            dec d
0256+  189D 0A 57 18      jmp _gettxt_loop
0257+  18A0             _gettxt_end:
0258+  18A0 19 00         mov al, 0
0259+  18A2 3E            mov [d], al        ; terminate string
0260+  18A3 E7            pop d
0261+  18A4 E4            pop a
0262+  18A5 09            ret
0263+  18A6             
0264+  18A6             ;-----------------------------------------------------------------------------
0265+  18A6             ; PRINT NEW LINE
0266+  18A6             ;-----------------------------------------------------------------------------
0267+  18A6             printnl:
0268+  18A6 D7            push a
0269+  18A7 10 00 0A      mov a, $0A00
0270+  18AA 05 03         syscall sys_io
0271+  18AC 10 00 0D      mov a, $0D00
0272+  18AF 05 03         syscall sys_io
0273+  18B1 E4            pop a
0274+  18B2 09            ret
0275+  18B3             
0276+  18B3             ;-----------------------------------------------------------------------------
0277+  18B3             ; _strtoint
0278+  18B3             ; 4 digit hex string number in d
0279+  18B3             ; integer returned in A
0280+  18B3             ;-----------------------------------------------------------------------------
0281+  18B3             _strtointx:
0282+  18B3 D8            push b
0283+  18B4 32            mov bl, [d]
0284+  18B5 37            mov bh, bl
0285+  18B6 33 01 00      mov bl, [d + 1]
0286+  18B9 07 6D 17      call _atoi        ; convert to int in AL
0287+  18BC 23            mov ah, al        ; move to AH
0288+  18BD 33 02 00      mov bl, [d + 2]
0289+  18C0 37            mov bh, bl
0290+  18C1 33 03 00      mov bl, [d + 3]
0291+  18C4 07 6D 17      call _atoi        ; convert to int in AL
0292+  18C7 E5            pop b
0293+  18C8 09            ret
0294+  18C9             
0295+  18C9             ;-----------------------------------------------------------------------------
0296+  18C9             ; _strtoint
0297+  18C9             ; 5 digit base10 string number in d
0298+  18C9             ; integer returned in A
0299+  18C9             ;-----------------------------------------------------------------------------
0300+  18C9             _strtoint:
0301+  18C9 E2            push si
0302+  18CA D8            push b
0303+  18CB D9            push c
0304+  18CC DA            push d
0305+  18CD 07 0F 17      call _strlen      ; get string length in C
0306+  18D0 7E            dec c
0307+  18D1 FD 4E         mov si, d
0308+  18D3 12            mov a, c
0309+  18D4 FD 99         shl a
0310+  18D6 3B 45 1A      mov d, table_power
0311+  18D9 59            add d, a
0312+  18DA 38 00 00      mov c, 0
0313+  18DD             _strtoint_L0:
0314+  18DD F6            lodsb      ; load ASCII to al
0315+  18DE B9 00         cmp al, 0
0316+  18E0 C6 F3 18      je _strtoint_end
0317+  18E3 6F 30         sub al, $30    ; make into integer
0318+  18E5 22 00         mov ah, 0
0319+  18E7 2A            mov b, [d]
0320+  18E8 AC            mul a, b      ; result in B since it fits in 16bits
0321+  18E9 11            mov a, b
0322+  18EA 28            mov b, c
0323+  18EB 54            add a, b
0324+  18EC 39            mov c, a
0325+  18ED 63 02 00      sub d, 2
0326+  18F0 0A DD 18      jmp _strtoint_L0
0327+  18F3             _strtoint_end:
0328+  18F3 12            mov a, c
0329+  18F4 E7            pop d
0330+  18F5 E6            pop c
0331+  18F6 E5            pop b
0332+  18F7 EF            pop si
0333+  18F8 09            ret
0334+  18F9             
0335+  18F9             ;-----------------------------------------------------------------------------
0336+  18F9             ; PRINT NULL TERMINATED STRING
0337+  18F9             ; pointer in D
0338+  18F9             ;-----------------------------------------------------------------------------
0339+  18F9             _puts:
0340+  18F9 D7            push a
0341+  18FA DA            push d
0342+  18FB             _puts_L1:
0343+  18FB 1E            mov al, [d]
0344+  18FC B9 00         cmp al, 0
0345+  18FE C6 0A 19      jz _puts_END
0346+  1901 23            mov ah, al
0347+  1902 19 00         mov al, 0
0348+  1904 05 03         syscall sys_io
0349+  1906 79            inc d
0350+  1907 0A FB 18      jmp _puts_L1
0351+  190A             _puts_END:
0352+  190A E7            pop d
0353+  190B E4            pop a
0354+  190C 09            ret
0355+  190D             
0356+  190D             ;-----------------------------------------------------------------------------
0357+  190D             ; PRINT N SIZE STRING
0358+  190D             ; pointer in D
0359+  190D             ; size in C
0360+  190D             ;-----------------------------------------------------------------------------
0361+  190D             _putsn:
0362+  190D DB            push al
0363+  190E DA            push d
0364+  190F D9            push c
0365+  1910             _putsn_L0:
0366+  1910 1E            mov al, [d]
0367+  1911 23            mov ah, al
0368+  1912 19 00         mov al, 0
0369+  1914 05 03         syscall sys_io
0370+  1916 79            inc d
0371+  1917 7E            dec c  
0372+  1918 C2 00 00      cmp c, 0
0373+  191B C7 10 19      jne _putsn_L0
0374+  191E             _putsn_end:
0375+  191E E6            pop c
0376+  191F E7            pop d
0377+  1920 E8            pop al
0378+  1921 09            ret
0379+  1922             
0380+  1922             ;-----------------------------------------------------------------------------
0381+  1922             ; print 16bit decimal number
0382+  1922             ; input number in A
0383+  1922             ;-----------------------------------------------------------------------------
0384+  1922             print_u16d:
0385+  1922 D7            push a
0386+  1923 D8            push b
0387+  1924 26 10 27      mov b, 10000
0388+  1927 AE            div a, b      ; get 10000's coeff.
0389+  1928 07 4A 19      call print_number
0390+  192B 11            mov a, b
0391+  192C 26 E8 03      mov b, 1000
0392+  192F AE            div a, b      ; get 1000's coeff.
0393+  1930 07 4A 19      call print_number
0394+  1933 11            mov a, b
0395+  1934 26 64 00      mov b, 100
0396+  1937 AE            div a, b
0397+  1938 07 4A 19      call print_number
0398+  193B 11            mov a, b
0399+  193C 26 0A 00      mov b, 10
0400+  193F AE            div a, b
0401+  1940 07 4A 19      call print_number
0402+  1943 1B            mov al, bl      ; 1's coeff in bl
0403+  1944 07 4A 19      call print_number
0404+  1947 E5            pop b
0405+  1948 E4            pop a
0406+  1949 09            ret
0407+  194A             
0408+  194A             ;-----------------------------------------------------------------------------
0409+  194A             ; print AL
0410+  194A             ;-----------------------------------------------------------------------------
0411+  194A             print_number:
0412+  194A 6A 30         add al, $30
0413+  194C 23            mov ah, al
0414+  194D 07 AF 17      call _putchar
0415+  1950 09            ret
0416+  1951             
0417+  1951             ;-----------------------------------------------------------------------------
0418+  1951             ; PRINT 16BIT HEX INTEGER
0419+  1951             ; integer value in reg B
0420+  1951             ;-----------------------------------------------------------------------------
0421+  1951             print_u16x:
0422+  1951 D7            push a
0423+  1952 D8            push b
0424+  1953 DD            push bl
0425+  1954 30            mov bl, bh
0426+  1955 07 7D 17      call _itoa        ; convert bh to char in A
0427+  1958 2F            mov bl, al        ; save al
0428+  1959 19 00         mov al, 0
0429+  195B 05 03         syscall sys_io        ; display AH
0430+  195D 24            mov ah, bl        ; retrieve al
0431+  195E 19 00         mov al, 0
0432+  1960 05 03         syscall sys_io        ; display AL
0433+  1962             
0434+  1962 EA            pop bl
0435+  1963 07 7D 17      call _itoa        ; convert bh to char in A
0436+  1966 2F            mov bl, al        ; save al
0437+  1967 19 00         mov al, 0
0438+  1969 05 03         syscall sys_io        ; display AH
0439+  196B 24            mov ah, bl        ; retrieve al
0440+  196C 19 00         mov al, 0
0441+  196E 05 03         syscall sys_io        ; display AL
0442+  1970             
0443+  1970 E5            pop b
0444+  1971 E4            pop a
0445+  1972 09            ret
0446+  1973             
0447+  1973             ;-----------------------------------------------------------------------------
0448+  1973             ; INPUT 16BIT HEX INTEGER
0449+  1973             ; read 16bit integer into A
0450+  1973             ;-----------------------------------------------------------------------------
0451+  1973             scan_u16x:
0452+  1973 F8 10 00      enter 16
0453+  1976 D8            push b
0454+  1977 DA            push d
0455+  1978             
0456+  1978 FA F1 FF      lea d, [bp + -15]
0457+  197B 07 B6 17      call _gets        ; get number
0458+  197E             
0459+  197E 32            mov bl, [d]
0460+  197F 37            mov bh, bl
0461+  1980 33 01 00      mov bl, [d + 1]
0462+  1983 07 6D 17      call _atoi        ; convert to int in AL
0463+  1986 23            mov ah, al        ; move to AH
0464+  1987             
0465+  1987 33 02 00      mov bl, [d + 2]
0466+  198A 37            mov bh, bl
0467+  198B 33 03 00      mov bl, [d + 3]
0468+  198E 07 6D 17      call _atoi        ; convert to int in AL
0469+  1991             
0470+  1991 E7            pop d
0471+  1992 E5            pop b
0472+  1993 F9            leave
0473+  1994 09            ret
0474+  1995             
0475+  1995             ;-----------------------------------------------------------------------------
0476+  1995             ; PRINT 8bit HEX INTEGER
0477+  1995             ; integer value in reg bl
0478+  1995             ;-----------------------------------------------------------------------------
0479+  1995             print_u8x:
0480+  1995 D7            push a
0481+  1996 DD            push bl
0482+  1997             
0483+  1997 07 7D 17      call _itoa        ; convert bl to char in A
0484+  199A 2F            mov bl, al        ; save al
0485+  199B 19 00         mov al, 0
0486+  199D 05 03         syscall sys_io        ; display AH
0487+  199F 24            mov ah, bl        ; retrieve al
0488+  19A0 19 00         mov al, 0
0489+  19A2 05 03         syscall sys_io        ; display AL
0490+  19A4             
0491+  19A4 EA            pop bl
0492+  19A5 E4            pop a
0493+  19A6 09            ret
0494+  19A7             
0495+  19A7             ;-----------------------------------------------------------------------------
0496+  19A7             ; print 8bit decimal unsigned number
0497+  19A7             ; input number in AL
0498+  19A7             ;-----------------------------------------------------------------------------
0499+  19A7             print_u8d:
0500+  19A7 D7            push a
0501+  19A8 D8            push b
0502+  19A9             
0503+  19A9 22 00         mov ah, 0
0504+  19AB 26 64 00      mov b, 100
0505+  19AE AE            div a, b
0506+  19AF D8            push b      ; save remainder
0507+  19B0 B9 00         cmp al, 0
0508+  19B2 C6 BC 19      je skip100
0509+  19B5 6A 30         add al, $30
0510+  19B7 23            mov ah, al
0511+  19B8 19 00         mov al, 0
0512+  19BA 05 03         syscall sys_io  ; print coeff
0513+  19BC             skip100:
0514+  19BC E4            pop a
0515+  19BD 22 00         mov ah, 0
0516+  19BF 26 0A 00      mov b, 10
0517+  19C2 AE            div a, b
0518+  19C3 D8            push b      ; save remainder
0519+  19C4 B9 00         cmp al, 0
0520+  19C6 C6 D0 19      je skip10
0521+  19C9 6A 30         add al, $30
0522+  19CB 23            mov ah, al
0523+  19CC 19 00         mov al, 0
0524+  19CE 05 03         syscall sys_io  ; print coeff
0525+  19D0             skip10:
0526+  19D0 E4            pop a
0527+  19D1 1B            mov al, bl
0528+  19D2 6A 30         add al, $30
0529+  19D4 23            mov ah, al
0530+  19D5 19 00         mov al, 0
0531+  19D7 05 03         syscall sys_io  ; print coeff
0532+  19D9 E5            pop b
0533+  19DA E4            pop a
0534+  19DB 09            ret
0535+  19DC             
0536+  19DC             ;-----------------------------------------------------------------------------
0537+  19DC             ; INPUT 8BIT HEX INTEGER
0538+  19DC             ; read 8bit integer into AL
0539+  19DC             ;-----------------------------------------------------------------------------
0540+  19DC             scan_u8x:
0541+  19DC F8 04 00      enter 4
0542+  19DF D8            push b
0543+  19E0 DA            push d
0544+  19E1             
0545+  19E1 FA FD FF      lea d, [bp + -3]
0546+  19E4 07 B6 17      call _gets        ; get number
0547+  19E7             
0548+  19E7 32            mov bl, [d]
0549+  19E8 37            mov bh, bl
0550+  19E9 33 01 00      mov bl, [d + 1]
0551+  19EC 07 6D 17      call _atoi        ; convert to int in AL
0552+  19EF             
0553+  19EF E7            pop d
0554+  19F0 E5            pop b
0555+  19F1 F9            leave
0556+  19F2 09            ret
0557+  19F3             
0558+  19F3             ;-----------------------------------------------------------------------------
0559+  19F3             ; input decimal number
0560+  19F3             ; result in A
0561+  19F3             ; 655'\0'
0562+  19F3             ; low--------high
0563+  19F3             ;-----------------------------------------------------------------------------
0564+  19F3             scan_u16d:
0565+  19F3 F8 08 00      enter 8
0566+  19F6 E2            push si
0567+  19F7 D8            push b
0568+  19F8 D9            push c
0569+  19F9 DA            push d
0570+  19FA FA F9 FF      lea d, [bp +- 7]
0571+  19FD 07 B6 17      call _gets
0572+  1A00 07 0F 17      call _strlen      ; get string length in C
0573+  1A03 7E            dec c
0574+  1A04 FD 4E         mov si, d
0575+  1A06 12            mov a, c
0576+  1A07 FD 99         shl a
0577+  1A09 3B 45 1A      mov d, table_power
0578+  1A0C 59            add d, a
0579+  1A0D 38 00 00      mov c, 0
0580+  1A10             mul_loop:
0581+  1A10 F6            lodsb      ; load ASCII to al
0582+  1A11 B9 00         cmp al, 0
0583+  1A13 C6 26 1A      je mul_exit
0584+  1A16 6F 30         sub al, $30    ; make into integer
0585+  1A18 22 00         mov ah, 0
0586+  1A1A 2A            mov b, [d]
0587+  1A1B AC            mul a, b      ; result in B since it fits in 16bits
0588+  1A1C 11            mov a, b
0589+  1A1D 28            mov b, c
0590+  1A1E 54            add a, b
0591+  1A1F 39            mov c, a
0592+  1A20 63 02 00      sub d, 2
0593+  1A23 0A 10 1A      jmp mul_loop
0594+  1A26             mul_exit:
0595+  1A26 12            mov a, c
0596+  1A27 E7            pop d
0597+  1A28 E6            pop c
0598+  1A29 E5            pop b
0599+  1A2A EF            pop si
0600+  1A2B F9            leave
0601+  1A2C 09            ret
0602+  1A2D             
0603+  1A2D 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  1A31 34 35 36 37 
0603+  1A35 38 39 41 42 
0603+  1A39 43 44 45 46 
0604+  1A3D 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  1A41 1B 5B 48 00 
0605+  1A45             
0606+  1A45             table_power:
0607+  1A45 01 00         .dw 1
0608+  1A47 0A 00         .dw 10
0609+  1A49 64 00         .dw 100
0610+  1A4B E8 03         .dw 1000
0611+  1A4D 10 27         .dw 100002911   1A4F             ; --- END INLINE ASM BLOCK
2912   1A4F             
2913   1A4F F9            leave
2914   1A50 09            ret
2915   1A51             
2916   1A51             test0:
2917   1A51 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2918   1A54             ;; int result; 
2919   1A54 52 02 00      sub sp, 2 ; result
2920   1A57             ;; int pass = 1; 
2921   1A57 52 02 00      sub sp, 2 ; pass
2922   1A5A             ; --- START LOCAL VAR INITIALIZATION
2923   1A5A FA FD FF      lea d, [bp + -3] ; $pass
2924   1A5D DA            push d
2925   1A5E 26 01 00      mov b, $1
2926   1A61 E7            pop d
2927   1A62 FD 43         mov [d], b
2928   1A64             ; --- END LOCAL VAR INITIALIZATION
2929   1A64             ;; char c; 
2930   1A64 52 01 00      sub sp, 1 ; c
2931   1A67             ;; int i; 
2932   1A67 52 02 00      sub sp, 2 ; i
2933   1A6A             ;; char ca[5]; 
2934   1A6A 52 05 00      sub sp, 5 ; ca
2935   1A6D             ;; int ia[5]; 
2936   1A6D 52 0A 00      sub sp, 10 ; ia
2937   1A70             ;; c = 'A'; 
2938   1A70 FA FC FF      lea d, [bp + -4] ; $c
2939   1A73 DA            push d
2940   1A74 26 41 00      mov b, $41
2941   1A77 E7            pop d
2942   1A78 FD 3E         mov [d], bl
2943   1A7A             ;; i = 55; 
2944   1A7A FA FA FF      lea d, [bp + -6] ; $i
2945   1A7D DA            push d
2946   1A7E 26 37 00      mov b, $37
2947   1A81 E7            pop d
2948   1A82 FD 43         mov [d], b
2949   1A84             ;; ca[0] = 'A'; 
2950   1A84 FA F5 FF      lea d, [bp + -11] ; $ca
2951   1A87 D7            push a
2952   1A88 DA            push d
2953   1A89 26 00 00      mov b, $0
2954   1A8C E7            pop d
2955   1A8D 5A            add d, b
2956   1A8E E4            pop a
2957   1A8F DA            push d
2958   1A90 26 41 00      mov b, $41
2959   1A93 E7            pop d
2960   1A94 FD 3E         mov [d], bl
2961   1A96             ;; ca[1] = 'B'; 
2962   1A96 FA F5 FF      lea d, [bp + -11] ; $ca
2963   1A99 D7            push a
2964   1A9A DA            push d
2965   1A9B 26 01 00      mov b, $1
2966   1A9E E7            pop d
2967   1A9F 5A            add d, b
2968   1AA0 E4            pop a
2969   1AA1 DA            push d
2970   1AA2 26 42 00      mov b, $42
2971   1AA5 E7            pop d
2972   1AA6 FD 3E         mov [d], bl
2973   1AA8             ;; ca[2] = 'C'; 
2974   1AA8 FA F5 FF      lea d, [bp + -11] ; $ca
2975   1AAB D7            push a
2976   1AAC DA            push d
2977   1AAD 26 02 00      mov b, $2
2978   1AB0 E7            pop d
2979   1AB1 5A            add d, b
2980   1AB2 E4            pop a
2981   1AB3 DA            push d
2982   1AB4 26 43 00      mov b, $43
2983   1AB7 E7            pop d
2984   1AB8 FD 3E         mov [d], bl
2985   1ABA             ;; ca[3] = 'D'; 
2986   1ABA FA F5 FF      lea d, [bp + -11] ; $ca
2987   1ABD D7            push a
2988   1ABE DA            push d
2989   1ABF 26 03 00      mov b, $3
2990   1AC2 E7            pop d
2991   1AC3 5A            add d, b
2992   1AC4 E4            pop a
2993   1AC5 DA            push d
2994   1AC6 26 44 00      mov b, $44
2995   1AC9 E7            pop d
2996   1ACA FD 3E         mov [d], bl
2997   1ACC             ;; ca[4] = 'E'; 
2998   1ACC FA F5 FF      lea d, [bp + -11] ; $ca
2999   1ACF D7            push a
3000   1AD0 DA            push d
3001   1AD1 26 04 00      mov b, $4
3002   1AD4 E7            pop d
3003   1AD5 5A            add d, b
3004   1AD6 E4            pop a
3005   1AD7 DA            push d
3006   1AD8 26 45 00      mov b, $45
3007   1ADB E7            pop d
3008   1ADC FD 3E         mov [d], bl
3009   1ADE             ;; ia[0] = 0; 
3010   1ADE FA EB FF      lea d, [bp + -21] ; $ia
3011   1AE1 D7            push a
3012   1AE2 DA            push d
3013   1AE3 26 00 00      mov b, $0
3014   1AE6 E7            pop d
3015   1AE7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3016   1AEB E4            pop a
3017   1AEC DA            push d
3018   1AED 26 00 00      mov b, $0
3019   1AF0 E7            pop d
3020   1AF1 FD 43         mov [d], b
3021   1AF3             ;; ia[1] = 1; 
3022   1AF3 FA EB FF      lea d, [bp + -21] ; $ia
3023   1AF6 D7            push a
3024   1AF7 DA            push d
3025   1AF8 26 01 00      mov b, $1
3026   1AFB E7            pop d
3027   1AFC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3028   1B00 E4            pop a
3029   1B01 DA            push d
3030   1B02 26 01 00      mov b, $1
3031   1B05 E7            pop d
3032   1B06 FD 43         mov [d], b
3033   1B08             ;; ia[2] = 2; 
3034   1B08 FA EB FF      lea d, [bp + -21] ; $ia
3035   1B0B D7            push a
3036   1B0C DA            push d
3037   1B0D 26 02 00      mov b, $2
3038   1B10 E7            pop d
3039   1B11 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3040   1B15 E4            pop a
3041   1B16 DA            push d
3042   1B17 26 02 00      mov b, $2
3043   1B1A E7            pop d
3044   1B1B FD 43         mov [d], b
3045   1B1D             ;; ia[3] = 3; 
3046   1B1D FA EB FF      lea d, [bp + -21] ; $ia
3047   1B20 D7            push a
3048   1B21 DA            push d
3049   1B22 26 03 00      mov b, $3
3050   1B25 E7            pop d
3051   1B26 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3052   1B2A E4            pop a
3053   1B2B DA            push d
3054   1B2C 26 03 00      mov b, $3
3055   1B2F E7            pop d
3056   1B30 FD 43         mov [d], b
3057   1B32             ;; ia[4] = 4; 
3058   1B32 FA EB FF      lea d, [bp + -21] ; $ia
3059   1B35 D7            push a
3060   1B36 DA            push d
3061   1B37 26 04 00      mov b, $4
3062   1B3A E7            pop d
3063   1B3B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3064   1B3F E4            pop a
3065   1B40 DA            push d
3066   1B41 26 04 00      mov b, $4
3067   1B44 E7            pop d
3068   1B45 FD 43         mov [d], b
3069   1B47             ;; pass = pass && test0_subTest0(c, i, ca, ia); 
3070   1B47 FA FD FF      lea d, [bp + -3] ; $pass
3071   1B4A DA            push d
3072   1B4B FA FD FF      lea d, [bp + -3] ; $pass
3073   1B4E 2A            mov b, [d]
3074   1B4F D7            push a
3075   1B50 11            mov a, b
3076   1B51 FA EB FF      lea d, [bp + -21] ; $ia
3077   1B54 2D            mov b, d
3078   1B55 FD AB         swp b
3079   1B57 D8            push b
3080   1B58 FA F5 FF      lea d, [bp + -11] ; $ca
3081   1B5B 2D            mov b, d
3082   1B5C FD AB         swp b
3083   1B5E D8            push b
3084   1B5F FA FA FF      lea d, [bp + -6] ; $i
3085   1B62 2A            mov b, [d]
3086   1B63 FD AB         swp b
3087   1B65 D8            push b
3088   1B66 FA FC FF      lea d, [bp + -4] ; $c
3089   1B69 32            mov bl, [d]
3090   1B6A A7 00         mov bh, 0
3091   1B6C DD            push bl
3092   1B6D 07 7F 1B      call test0_subTest0
3093   1B70 51 07 00      add sp, 7
3094   1B73 FD A7         sand a, b
3095   1B75 E4            pop a
3096   1B76 E7            pop d
3097   1B77 FD 43         mov [d], b
3098   1B79             ;; return pass; 
3099   1B79 FA FD FF      lea d, [bp + -3] ; $pass
3100   1B7C 2A            mov b, [d]
3101   1B7D F9            leave
3102   1B7E 09            ret
3103   1B7F             
3104   1B7F             test0_subTest0:
3105   1B7F F8 00 00      enter 0 ; (push bp; mov bp, sp)
3106   1B82             ;; int pass = 1; 
3107   1B82 52 02 00      sub sp, 2 ; pass
3108   1B85             ; --- START LOCAL VAR INITIALIZATION
3109   1B85 FA FF FF      lea d, [bp + -1] ; $pass
3110   1B88 DA            push d
3111   1B89 26 01 00      mov b, $1
3112   1B8C E7            pop d
3113   1B8D FD 43         mov [d], b
3114   1B8F             ; --- END LOCAL VAR INITIALIZATION
3115   1B8F             ;; pass = pass && c == 'A'; 
3116   1B8F FA FF FF      lea d, [bp + -1] ; $pass
3117   1B92 DA            push d
3118   1B93 FA FF FF      lea d, [bp + -1] ; $pass
3119   1B96 2A            mov b, [d]
3120   1B97 D7            push a
3121   1B98 11            mov a, b
3122   1B99 FA 05 00      lea d, [bp + 5] ; $c
3123   1B9C 32            mov bl, [d]
3124   1B9D A7 00         mov bh, 0
3125   1B9F             ; START RELATIONAL
3126   1B9F D7            push a
3127   1BA0 11            mov a, b
3128   1BA1 26 41 00      mov b, $41
3129   1BA4 B0            cmp a, b
3130   1BA5 FD 71         seq ; ==
3131   1BA7 E4            pop a
3132   1BA8             ; END RELATIONAL
3133   1BA8 FD A7         sand a, b
3134   1BAA E4            pop a
3135   1BAB E7            pop d
3136   1BAC FD 43         mov [d], b
3137   1BAE             ;; pass = pass && i == 55; 
3138   1BAE FA FF FF      lea d, [bp + -1] ; $pass
3139   1BB1 DA            push d
3140   1BB2 FA FF FF      lea d, [bp + -1] ; $pass
3141   1BB5 2A            mov b, [d]
3142   1BB6 D7            push a
3143   1BB7 11            mov a, b
3144   1BB8 FA 06 00      lea d, [bp + 6] ; $i
3145   1BBB 2A            mov b, [d]
3146   1BBC             ; START RELATIONAL
3147   1BBC D7            push a
3148   1BBD 11            mov a, b
3149   1BBE 26 37 00      mov b, $37
3150   1BC1 B0            cmp a, b
3151   1BC2 FD 71         seq ; ==
3152   1BC4 E4            pop a
3153   1BC5             ; END RELATIONAL
3154   1BC5 FD A7         sand a, b
3155   1BC7 E4            pop a
3156   1BC8 E7            pop d
3157   1BC9 FD 43         mov [d], b
3158   1BCB             ;; pass = pass && ca[0] == 'A'; 
3159   1BCB FA FF FF      lea d, [bp + -1] ; $pass
3160   1BCE DA            push d
3161   1BCF FA FF FF      lea d, [bp + -1] ; $pass
3162   1BD2 2A            mov b, [d]
3163   1BD3 D7            push a
3164   1BD4 11            mov a, b
3165   1BD5 2C 08 00      mov b, [bp + 8] ; $ca
3166   1BD8 74            mov d, b
3167   1BD9 D7            push a
3168   1BDA DA            push d
3169   1BDB 26 00 00      mov b, $0
3170   1BDE E7            pop d
3171   1BDF 5A            add d, b
3172   1BE0 E4            pop a
3173   1BE1 32            mov bl, [d]
3174   1BE2 A7 00         mov bh, 0
3175   1BE4             ; START RELATIONAL
3176   1BE4 D7            push a
3177   1BE5 11            mov a, b
3178   1BE6 26 41 00      mov b, $41
3179   1BE9 B0            cmp a, b
3180   1BEA FD 71         seq ; ==
3181   1BEC E4            pop a
3182   1BED             ; END RELATIONAL
3183   1BED FD A7         sand a, b
3184   1BEF E4            pop a
3185   1BF0 E7            pop d
3186   1BF1 FD 43         mov [d], b
3187   1BF3             ;; pass = pass && ca[1] == 'B'; 
3188   1BF3 FA FF FF      lea d, [bp + -1] ; $pass
3189   1BF6 DA            push d
3190   1BF7 FA FF FF      lea d, [bp + -1] ; $pass
3191   1BFA 2A            mov b, [d]
3192   1BFB D7            push a
3193   1BFC 11            mov a, b
3194   1BFD 2C 08 00      mov b, [bp + 8] ; $ca
3195   1C00 74            mov d, b
3196   1C01 D7            push a
3197   1C02 DA            push d
3198   1C03 26 01 00      mov b, $1
3199   1C06 E7            pop d
3200   1C07 5A            add d, b
3201   1C08 E4            pop a
3202   1C09 32            mov bl, [d]
3203   1C0A A7 00         mov bh, 0
3204   1C0C             ; START RELATIONAL
3205   1C0C D7            push a
3206   1C0D 11            mov a, b
3207   1C0E 26 42 00      mov b, $42
3208   1C11 B0            cmp a, b
3209   1C12 FD 71         seq ; ==
3210   1C14 E4            pop a
3211   1C15             ; END RELATIONAL
3212   1C15 FD A7         sand a, b
3213   1C17 E4            pop a
3214   1C18 E7            pop d
3215   1C19 FD 43         mov [d], b
3216   1C1B             ;; pass = pass && ca[2] == 'C'; 
3217   1C1B FA FF FF      lea d, [bp + -1] ; $pass
3218   1C1E DA            push d
3219   1C1F FA FF FF      lea d, [bp + -1] ; $pass
3220   1C22 2A            mov b, [d]
3221   1C23 D7            push a
3222   1C24 11            mov a, b
3223   1C25 2C 08 00      mov b, [bp + 8] ; $ca
3224   1C28 74            mov d, b
3225   1C29 D7            push a
3226   1C2A DA            push d
3227   1C2B 26 02 00      mov b, $2
3228   1C2E E7            pop d
3229   1C2F 5A            add d, b
3230   1C30 E4            pop a
3231   1C31 32            mov bl, [d]
3232   1C32 A7 00         mov bh, 0
3233   1C34             ; START RELATIONAL
3234   1C34 D7            push a
3235   1C35 11            mov a, b
3236   1C36 26 43 00      mov b, $43
3237   1C39 B0            cmp a, b
3238   1C3A FD 71         seq ; ==
3239   1C3C E4            pop a
3240   1C3D             ; END RELATIONAL
3241   1C3D FD A7         sand a, b
3242   1C3F E4            pop a
3243   1C40 E7            pop d
3244   1C41 FD 43         mov [d], b
3245   1C43             ;; pass = pass && ca[3] == 'D'; 
3246   1C43 FA FF FF      lea d, [bp + -1] ; $pass
3247   1C46 DA            push d
3248   1C47 FA FF FF      lea d, [bp + -1] ; $pass
3249   1C4A 2A            mov b, [d]
3250   1C4B D7            push a
3251   1C4C 11            mov a, b
3252   1C4D 2C 08 00      mov b, [bp + 8] ; $ca
3253   1C50 74            mov d, b
3254   1C51 D7            push a
3255   1C52 DA            push d
3256   1C53 26 03 00      mov b, $3
3257   1C56 E7            pop d
3258   1C57 5A            add d, b
3259   1C58 E4            pop a
3260   1C59 32            mov bl, [d]
3261   1C5A A7 00         mov bh, 0
3262   1C5C             ; START RELATIONAL
3263   1C5C D7            push a
3264   1C5D 11            mov a, b
3265   1C5E 26 44 00      mov b, $44
3266   1C61 B0            cmp a, b
3267   1C62 FD 71         seq ; ==
3268   1C64 E4            pop a
3269   1C65             ; END RELATIONAL
3270   1C65 FD A7         sand a, b
3271   1C67 E4            pop a
3272   1C68 E7            pop d
3273   1C69 FD 43         mov [d], b
3274   1C6B             ;; pass = pass && ca[4] == 'E'; 
3275   1C6B FA FF FF      lea d, [bp + -1] ; $pass
3276   1C6E DA            push d
3277   1C6F FA FF FF      lea d, [bp + -1] ; $pass
3278   1C72 2A            mov b, [d]
3279   1C73 D7            push a
3280   1C74 11            mov a, b
3281   1C75 2C 08 00      mov b, [bp + 8] ; $ca
3282   1C78 74            mov d, b
3283   1C79 D7            push a
3284   1C7A DA            push d
3285   1C7B 26 04 00      mov b, $4
3286   1C7E E7            pop d
3287   1C7F 5A            add d, b
3288   1C80 E4            pop a
3289   1C81 32            mov bl, [d]
3290   1C82 A7 00         mov bh, 0
3291   1C84             ; START RELATIONAL
3292   1C84 D7            push a
3293   1C85 11            mov a, b
3294   1C86 26 45 00      mov b, $45
3295   1C89 B0            cmp a, b
3296   1C8A FD 71         seq ; ==
3297   1C8C E4            pop a
3298   1C8D             ; END RELATIONAL
3299   1C8D FD A7         sand a, b
3300   1C8F E4            pop a
3301   1C90 E7            pop d
3302   1C91 FD 43         mov [d], b
3303   1C93             ;; pass = pass && ia[0] == 0; 
3304   1C93 FA FF FF      lea d, [bp + -1] ; $pass
3305   1C96 DA            push d
3306   1C97 FA FF FF      lea d, [bp + -1] ; $pass
3307   1C9A 2A            mov b, [d]
3308   1C9B D7            push a
3309   1C9C 11            mov a, b
3310   1C9D 2C 0A 00      mov b, [bp + 10] ; $ia
3311   1CA0 74            mov d, b
3312   1CA1 D7            push a
3313   1CA2 DA            push d
3314   1CA3 26 00 00      mov b, $0
3315   1CA6 E7            pop d
3316   1CA7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3317   1CAB E4            pop a
3318   1CAC 2A            mov b, [d]
3319   1CAD             ; START RELATIONAL
3320   1CAD D7            push a
3321   1CAE 11            mov a, b
3322   1CAF 26 00 00      mov b, $0
3323   1CB2 B0            cmp a, b
3324   1CB3 FD 71         seq ; ==
3325   1CB5 E4            pop a
3326   1CB6             ; END RELATIONAL
3327   1CB6 FD A7         sand a, b
3328   1CB8 E4            pop a
3329   1CB9 E7            pop d
3330   1CBA FD 43         mov [d], b
3331   1CBC             ;; pass = pass && ia[1] == 1; 
3332   1CBC FA FF FF      lea d, [bp + -1] ; $pass
3333   1CBF DA            push d
3334   1CC0 FA FF FF      lea d, [bp + -1] ; $pass
3335   1CC3 2A            mov b, [d]
3336   1CC4 D7            push a
3337   1CC5 11            mov a, b
3338   1CC6 2C 0A 00      mov b, [bp + 10] ; $ia
3339   1CC9 74            mov d, b
3340   1CCA D7            push a
3341   1CCB DA            push d
3342   1CCC 26 01 00      mov b, $1
3343   1CCF E7            pop d
3344   1CD0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3345   1CD4 E4            pop a
3346   1CD5 2A            mov b, [d]
3347   1CD6             ; START RELATIONAL
3348   1CD6 D7            push a
3349   1CD7 11            mov a, b
3350   1CD8 26 01 00      mov b, $1
3351   1CDB B0            cmp a, b
3352   1CDC FD 71         seq ; ==
3353   1CDE E4            pop a
3354   1CDF             ; END RELATIONAL
3355   1CDF FD A7         sand a, b
3356   1CE1 E4            pop a
3357   1CE2 E7            pop d
3358   1CE3 FD 43         mov [d], b
3359   1CE5             ;; pass = pass && ia[2] == 2; 
3360   1CE5 FA FF FF      lea d, [bp + -1] ; $pass
3361   1CE8 DA            push d
3362   1CE9 FA FF FF      lea d, [bp + -1] ; $pass
3363   1CEC 2A            mov b, [d]
3364   1CED D7            push a
3365   1CEE 11            mov a, b
3366   1CEF 2C 0A 00      mov b, [bp + 10] ; $ia
3367   1CF2 74            mov d, b
3368   1CF3 D7            push a
3369   1CF4 DA            push d
3370   1CF5 26 02 00      mov b, $2
3371   1CF8 E7            pop d
3372   1CF9 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3373   1CFD E4            pop a
3374   1CFE 2A            mov b, [d]
3375   1CFF             ; START RELATIONAL
3376   1CFF D7            push a
3377   1D00 11            mov a, b
3378   1D01 26 02 00      mov b, $2
3379   1D04 B0            cmp a, b
3380   1D05 FD 71         seq ; ==
3381   1D07 E4            pop a
3382   1D08             ; END RELATIONAL
3383   1D08 FD A7         sand a, b
3384   1D0A E4            pop a
3385   1D0B E7            pop d
3386   1D0C FD 43         mov [d], b
3387   1D0E             ;; pass = pass && ia[3] == 3; 
3388   1D0E FA FF FF      lea d, [bp + -1] ; $pass
3389   1D11 DA            push d
3390   1D12 FA FF FF      lea d, [bp + -1] ; $pass
3391   1D15 2A            mov b, [d]
3392   1D16 D7            push a
3393   1D17 11            mov a, b
3394   1D18 2C 0A 00      mov b, [bp + 10] ; $ia
3395   1D1B 74            mov d, b
3396   1D1C D7            push a
3397   1D1D DA            push d
3398   1D1E 26 03 00      mov b, $3
3399   1D21 E7            pop d
3400   1D22 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3401   1D26 E4            pop a
3402   1D27 2A            mov b, [d]
3403   1D28             ; START RELATIONAL
3404   1D28 D7            push a
3405   1D29 11            mov a, b
3406   1D2A 26 03 00      mov b, $3
3407   1D2D B0            cmp a, b
3408   1D2E FD 71         seq ; ==
3409   1D30 E4            pop a
3410   1D31             ; END RELATIONAL
3411   1D31 FD A7         sand a, b
3412   1D33 E4            pop a
3413   1D34 E7            pop d
3414   1D35 FD 43         mov [d], b
3415   1D37             ;; pass = pass && ia[4] == 4; 
3416   1D37 FA FF FF      lea d, [bp + -1] ; $pass
3417   1D3A DA            push d
3418   1D3B FA FF FF      lea d, [bp + -1] ; $pass
3419   1D3E 2A            mov b, [d]
3420   1D3F D7            push a
3421   1D40 11            mov a, b
3422   1D41 2C 0A 00      mov b, [bp + 10] ; $ia
3423   1D44 74            mov d, b
3424   1D45 D7            push a
3425   1D46 DA            push d
3426   1D47 26 04 00      mov b, $4
3427   1D4A E7            pop d
3428   1D4B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3429   1D4F E4            pop a
3430   1D50 2A            mov b, [d]
3431   1D51             ; START RELATIONAL
3432   1D51 D7            push a
3433   1D52 11            mov a, b
3434   1D53 26 04 00      mov b, $4
3435   1D56 B0            cmp a, b
3436   1D57 FD 71         seq ; ==
3437   1D59 E4            pop a
3438   1D5A             ; END RELATIONAL
3439   1D5A FD A7         sand a, b
3440   1D5C E4            pop a
3441   1D5D E7            pop d
3442   1D5E FD 43         mov [d], b
3443   1D60             ;; return pass; 
3444   1D60 FA FF FF      lea d, [bp + -1] ; $pass
3445   1D63 2A            mov b, [d]
3446   1D64 F9            leave
3447   1D65 09            ret
3448   1D66             
3449   1D66             test1:
3450   1D66 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3451   1D69             ;; int pass = 1; 
3452   1D69 52 02 00      sub sp, 2 ; pass
3453   1D6C             ; --- START LOCAL VAR INITIALIZATION
3454   1D6C FA FF FF      lea d, [bp + -1] ; $pass
3455   1D6F DA            push d
3456   1D70 26 01 00      mov b, $1
3457   1D73 E7            pop d
3458   1D74 FD 43         mov [d], b
3459   1D76             ; --- END LOCAL VAR INITIALIZATION
3460   1D76             ;; char ca[5]; 
3461   1D76 52 05 00      sub sp, 5 ; ca
3462   1D79             ;; char *p; 
3463   1D79 52 02 00      sub sp, 2 ; p
3464   1D7C             ;; p = ca; 
3465   1D7C FA F8 FF      lea d, [bp + -8] ; $p
3466   1D7F DA            push d
3467   1D80 FA FA FF      lea d, [bp + -6] ; $ca
3468   1D83 2D            mov b, d
3469   1D84 E7            pop d
3470   1D85 FD 43         mov [d], b
3471   1D87             ;; ca[0] = 'A'; 
3472   1D87 FA FA FF      lea d, [bp + -6] ; $ca
3473   1D8A D7            push a
3474   1D8B DA            push d
3475   1D8C 26 00 00      mov b, $0
3476   1D8F E7            pop d
3477   1D90 5A            add d, b
3478   1D91 E4            pop a
3479   1D92 DA            push d
3480   1D93 26 41 00      mov b, $41
3481   1D96 E7            pop d
3482   1D97 FD 3E         mov [d], bl
3483   1D99             ;; ca[1] = 'B'; 
3484   1D99 FA FA FF      lea d, [bp + -6] ; $ca
3485   1D9C D7            push a
3486   1D9D DA            push d
3487   1D9E 26 01 00      mov b, $1
3488   1DA1 E7            pop d
3489   1DA2 5A            add d, b
3490   1DA3 E4            pop a
3491   1DA4 DA            push d
3492   1DA5 26 42 00      mov b, $42
3493   1DA8 E7            pop d
3494   1DA9 FD 3E         mov [d], bl
3495   1DAB             ;; ca[2] = 'C'; 
3496   1DAB FA FA FF      lea d, [bp + -6] ; $ca
3497   1DAE D7            push a
3498   1DAF DA            push d
3499   1DB0 26 02 00      mov b, $2
3500   1DB3 E7            pop d
3501   1DB4 5A            add d, b
3502   1DB5 E4            pop a
3503   1DB6 DA            push d
3504   1DB7 26 43 00      mov b, $43
3505   1DBA E7            pop d
3506   1DBB FD 3E         mov [d], bl
3507   1DBD             ;; ca[3] = 'D'; 
3508   1DBD FA FA FF      lea d, [bp + -6] ; $ca
3509   1DC0 D7            push a
3510   1DC1 DA            push d
3511   1DC2 26 03 00      mov b, $3
3512   1DC5 E7            pop d
3513   1DC6 5A            add d, b
3514   1DC7 E4            pop a
3515   1DC8 DA            push d
3516   1DC9 26 44 00      mov b, $44
3517   1DCC E7            pop d
3518   1DCD FD 3E         mov [d], bl
3519   1DCF             ;; ca[4] = 'E'; 
3520   1DCF FA FA FF      lea d, [bp + -6] ; $ca
3521   1DD2 D7            push a
3522   1DD3 DA            push d
3523   1DD4 26 04 00      mov b, $4
3524   1DD7 E7            pop d
3525   1DD8 5A            add d, b
3526   1DD9 E4            pop a
3527   1DDA DA            push d
3528   1DDB 26 45 00      mov b, $45
3529   1DDE E7            pop d
3530   1DDF FD 3E         mov [d], bl
3531   1DE1             ;; pass = pass && *p == 'A'; 
3532   1DE1 FA FF FF      lea d, [bp + -1] ; $pass
3533   1DE4 DA            push d
3534   1DE5 FA FF FF      lea d, [bp + -1] ; $pass
3535   1DE8 2A            mov b, [d]
3536   1DE9 D7            push a
3537   1DEA 11            mov a, b
3538   1DEB FA F8 FF      lea d, [bp + -8] ; $p
3539   1DEE 2A            mov b, [d]
3540   1DEF 74            mov d, b
3541   1DF0 32            mov bl, [d]
3542   1DF1 A7 00         mov bh, 0
3543   1DF3             ; START RELATIONAL
3544   1DF3 D7            push a
3545   1DF4 11            mov a, b
3546   1DF5 26 41 00      mov b, $41
3547   1DF8 B0            cmp a, b
3548   1DF9 FD 71         seq ; ==
3549   1DFB E4            pop a
3550   1DFC             ; END RELATIONAL
3551   1DFC FD A7         sand a, b
3552   1DFE E4            pop a
3553   1DFF E7            pop d
3554   1E00 FD 43         mov [d], b
3555   1E02             ;; pass = pass && *(p + 1) == 'B'; 
3556   1E02 FA FF FF      lea d, [bp + -1] ; $pass
3557   1E05 DA            push d
3558   1E06 FA FF FF      lea d, [bp + -1] ; $pass
3559   1E09 2A            mov b, [d]
3560   1E0A D7            push a
3561   1E0B 11            mov a, b
3562   1E0C FA F8 FF      lea d, [bp + -8] ; $p
3563   1E0F 2A            mov b, [d]
3564   1E10             ; START TERMS
3565   1E10 D7            push a
3566   1E11 11            mov a, b
3567   1E12 26 01 00      mov b, $1
3568   1E15 56            add b, a
3569   1E16 E4            pop a
3570   1E17             ; END TERMS
3571   1E17 74            mov d, b
3572   1E18 32            mov bl, [d]
3573   1E19 A7 00         mov bh, 0
3574   1E1B             ; START RELATIONAL
3575   1E1B D7            push a
3576   1E1C 11            mov a, b
3577   1E1D 26 42 00      mov b, $42
3578   1E20 B0            cmp a, b
3579   1E21 FD 71         seq ; ==
3580   1E23 E4            pop a
3581   1E24             ; END RELATIONAL
3582   1E24 FD A7         sand a, b
3583   1E26 E4            pop a
3584   1E27 E7            pop d
3585   1E28 FD 43         mov [d], b
3586   1E2A             ;; pass = pass && *(p + 2) == 'C'; 
3587   1E2A FA FF FF      lea d, [bp + -1] ; $pass
3588   1E2D DA            push d
3589   1E2E FA FF FF      lea d, [bp + -1] ; $pass
3590   1E31 2A            mov b, [d]
3591   1E32 D7            push a
3592   1E33 11            mov a, b
3593   1E34 FA F8 FF      lea d, [bp + -8] ; $p
3594   1E37 2A            mov b, [d]
3595   1E38             ; START TERMS
3596   1E38 D7            push a
3597   1E39 11            mov a, b
3598   1E3A 26 02 00      mov b, $2
3599   1E3D 56            add b, a
3600   1E3E E4            pop a
3601   1E3F             ; END TERMS
3602   1E3F 74            mov d, b
3603   1E40 32            mov bl, [d]
3604   1E41 A7 00         mov bh, 0
3605   1E43             ; START RELATIONAL
3606   1E43 D7            push a
3607   1E44 11            mov a, b
3608   1E45 26 43 00      mov b, $43
3609   1E48 B0            cmp a, b
3610   1E49 FD 71         seq ; ==
3611   1E4B E4            pop a
3612   1E4C             ; END RELATIONAL
3613   1E4C FD A7         sand a, b
3614   1E4E E4            pop a
3615   1E4F E7            pop d
3616   1E50 FD 43         mov [d], b
3617   1E52             ;; pass = pass && *(p + 3) == 'D'; 
3618   1E52 FA FF FF      lea d, [bp + -1] ; $pass
3619   1E55 DA            push d
3620   1E56 FA FF FF      lea d, [bp + -1] ; $pass
3621   1E59 2A            mov b, [d]
3622   1E5A D7            push a
3623   1E5B 11            mov a, b
3624   1E5C FA F8 FF      lea d, [bp + -8] ; $p
3625   1E5F 2A            mov b, [d]
3626   1E60             ; START TERMS
3627   1E60 D7            push a
3628   1E61 11            mov a, b
3629   1E62 26 03 00      mov b, $3
3630   1E65 56            add b, a
3631   1E66 E4            pop a
3632   1E67             ; END TERMS
3633   1E67 74            mov d, b
3634   1E68 32            mov bl, [d]
3635   1E69 A7 00         mov bh, 0
3636   1E6B             ; START RELATIONAL
3637   1E6B D7            push a
3638   1E6C 11            mov a, b
3639   1E6D 26 44 00      mov b, $44
3640   1E70 B0            cmp a, b
3641   1E71 FD 71         seq ; ==
3642   1E73 E4            pop a
3643   1E74             ; END RELATIONAL
3644   1E74 FD A7         sand a, b
3645   1E76 E4            pop a
3646   1E77 E7            pop d
3647   1E78 FD 43         mov [d], b
3648   1E7A             ;; pass = pass && *(p + 4) == 'E'; 
3649   1E7A FA FF FF      lea d, [bp + -1] ; $pass
3650   1E7D DA            push d
3651   1E7E FA FF FF      lea d, [bp + -1] ; $pass
3652   1E81 2A            mov b, [d]
3653   1E82 D7            push a
3654   1E83 11            mov a, b
3655   1E84 FA F8 FF      lea d, [bp + -8] ; $p
3656   1E87 2A            mov b, [d]
3657   1E88             ; START TERMS
3658   1E88 D7            push a
3659   1E89 11            mov a, b
3660   1E8A 26 04 00      mov b, $4
3661   1E8D 56            add b, a
3662   1E8E E4            pop a
3663   1E8F             ; END TERMS
3664   1E8F 74            mov d, b
3665   1E90 32            mov bl, [d]
3666   1E91 A7 00         mov bh, 0
3667   1E93             ; START RELATIONAL
3668   1E93 D7            push a
3669   1E94 11            mov a, b
3670   1E95 26 45 00      mov b, $45
3671   1E98 B0            cmp a, b
3672   1E99 FD 71         seq ; ==
3673   1E9B E4            pop a
3674   1E9C             ; END RELATIONAL
3675   1E9C FD A7         sand a, b
3676   1E9E E4            pop a
3677   1E9F E7            pop d
3678   1EA0 FD 43         mov [d], b
3679   1EA2             ;; return pass; 
3680   1EA2 FA FF FF      lea d, [bp + -1] ; $pass
3681   1EA5 2A            mov b, [d]
3682   1EA6 F9            leave
3683   1EA7 09            ret
3684   1EA8             
3685   1EA8             test2:
3686   1EA8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3687   1EAB             ;; int pass = 1; 
3688   1EAB 52 02 00      sub sp, 2 ; pass
3689   1EAE             ; --- START LOCAL VAR INITIALIZATION
3690   1EAE FA FF FF      lea d, [bp + -1] ; $pass
3691   1EB1 DA            push d
3692   1EB2 26 01 00      mov b, $1
3693   1EB5 E7            pop d
3694   1EB6 FD 43         mov [d], b
3695   1EB8             ; --- END LOCAL VAR INITIALIZATION
3696   1EB8             ;; char ca[5]; 
3697   1EB8 52 05 00      sub sp, 5 ; ca
3698   1EBB             ;; int indices[5]; 
3699   1EBB 52 0A 00      sub sp, 10 ; indices
3700   1EBE             ;; char *p; 
3701   1EBE 52 02 00      sub sp, 2 ; p
3702   1EC1             ;; p = ca; 
3703   1EC1 FA EE FF      lea d, [bp + -18] ; $p
3704   1EC4 DA            push d
3705   1EC5 FA FA FF      lea d, [bp + -6] ; $ca
3706   1EC8 2D            mov b, d
3707   1EC9 E7            pop d
3708   1ECA FD 43         mov [d], b
3709   1ECC             ;; ca[0] = 'A'; 
3710   1ECC FA FA FF      lea d, [bp + -6] ; $ca
3711   1ECF D7            push a
3712   1ED0 DA            push d
3713   1ED1 26 00 00      mov b, $0
3714   1ED4 E7            pop d
3715   1ED5 5A            add d, b
3716   1ED6 E4            pop a
3717   1ED7 DA            push d
3718   1ED8 26 41 00      mov b, $41
3719   1EDB E7            pop d
3720   1EDC FD 3E         mov [d], bl
3721   1EDE             ;; ca[1] = 'B'; 
3722   1EDE FA FA FF      lea d, [bp + -6] ; $ca
3723   1EE1 D7            push a
3724   1EE2 DA            push d
3725   1EE3 26 01 00      mov b, $1
3726   1EE6 E7            pop d
3727   1EE7 5A            add d, b
3728   1EE8 E4            pop a
3729   1EE9 DA            push d
3730   1EEA 26 42 00      mov b, $42
3731   1EED E7            pop d
3732   1EEE FD 3E         mov [d], bl
3733   1EF0             ;; ca[2] = 'C'; 
3734   1EF0 FA FA FF      lea d, [bp + -6] ; $ca
3735   1EF3 D7            push a
3736   1EF4 DA            push d
3737   1EF5 26 02 00      mov b, $2
3738   1EF8 E7            pop d
3739   1EF9 5A            add d, b
3740   1EFA E4            pop a
3741   1EFB DA            push d
3742   1EFC 26 43 00      mov b, $43
3743   1EFF E7            pop d
3744   1F00 FD 3E         mov [d], bl
3745   1F02             ;; ca[3] = 'D'; 
3746   1F02 FA FA FF      lea d, [bp + -6] ; $ca
3747   1F05 D7            push a
3748   1F06 DA            push d
3749   1F07 26 03 00      mov b, $3
3750   1F0A E7            pop d
3751   1F0B 5A            add d, b
3752   1F0C E4            pop a
3753   1F0D DA            push d
3754   1F0E 26 44 00      mov b, $44
3755   1F11 E7            pop d
3756   1F12 FD 3E         mov [d], bl
3757   1F14             ;; ca[4] = 'E'; 
3758   1F14 FA FA FF      lea d, [bp + -6] ; $ca
3759   1F17 D7            push a
3760   1F18 DA            push d
3761   1F19 26 04 00      mov b, $4
3762   1F1C E7            pop d
3763   1F1D 5A            add d, b
3764   1F1E E4            pop a
3765   1F1F DA            push d
3766   1F20 26 45 00      mov b, $45
3767   1F23 E7            pop d
3768   1F24 FD 3E         mov [d], bl
3769   1F26             ;; indices[0] = 0; 
3770   1F26 FA F0 FF      lea d, [bp + -16] ; $indices
3771   1F29 D7            push a
3772   1F2A DA            push d
3773   1F2B 26 00 00      mov b, $0
3774   1F2E E7            pop d
3775   1F2F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3776   1F33 E4            pop a
3777   1F34 DA            push d
3778   1F35 26 00 00      mov b, $0
3779   1F38 E7            pop d
3780   1F39 FD 43         mov [d], b
3781   1F3B             ;; indices[1] = 1; 
3782   1F3B FA F0 FF      lea d, [bp + -16] ; $indices
3783   1F3E D7            push a
3784   1F3F DA            push d
3785   1F40 26 01 00      mov b, $1
3786   1F43 E7            pop d
3787   1F44 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3788   1F48 E4            pop a
3789   1F49 DA            push d
3790   1F4A 26 01 00      mov b, $1
3791   1F4D E7            pop d
3792   1F4E FD 43         mov [d], b
3793   1F50             ;; indices[2] = 2; 
3794   1F50 FA F0 FF      lea d, [bp + -16] ; $indices
3795   1F53 D7            push a
3796   1F54 DA            push d
3797   1F55 26 02 00      mov b, $2
3798   1F58 E7            pop d
3799   1F59 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3800   1F5D E4            pop a
3801   1F5E DA            push d
3802   1F5F 26 02 00      mov b, $2
3803   1F62 E7            pop d
3804   1F63 FD 43         mov [d], b
3805   1F65             ;; indices[3] = 3; 
3806   1F65 FA F0 FF      lea d, [bp + -16] ; $indices
3807   1F68 D7            push a
3808   1F69 DA            push d
3809   1F6A 26 03 00      mov b, $3
3810   1F6D E7            pop d
3811   1F6E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3812   1F72 E4            pop a
3813   1F73 DA            push d
3814   1F74 26 03 00      mov b, $3
3815   1F77 E7            pop d
3816   1F78 FD 43         mov [d], b
3817   1F7A             ;; indices[4] = 4; 
3818   1F7A FA F0 FF      lea d, [bp + -16] ; $indices
3819   1F7D D7            push a
3820   1F7E DA            push d
3821   1F7F 26 04 00      mov b, $4
3822   1F82 E7            pop d
3823   1F83 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3824   1F87 E4            pop a
3825   1F88 DA            push d
3826   1F89 26 04 00      mov b, $4
3827   1F8C E7            pop d
3828   1F8D FD 43         mov [d], b
3829   1F8F             ;; pass = pass && *(p + indices[0]) == 'A'; 
3830   1F8F FA FF FF      lea d, [bp + -1] ; $pass
3831   1F92 DA            push d
3832   1F93 FA FF FF      lea d, [bp + -1] ; $pass
3833   1F96 2A            mov b, [d]
3834   1F97 D7            push a
3835   1F98 11            mov a, b
3836   1F99 FA EE FF      lea d, [bp + -18] ; $p
3837   1F9C 2A            mov b, [d]
3838   1F9D             ; START TERMS
3839   1F9D D7            push a
3840   1F9E 11            mov a, b
3841   1F9F FA F0 FF      lea d, [bp + -16] ; $indices
3842   1FA2 D7            push a
3843   1FA3 DA            push d
3844   1FA4 26 00 00      mov b, $0
3845   1FA7 E7            pop d
3846   1FA8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3847   1FAC E4            pop a
3848   1FAD 2A            mov b, [d]
3849   1FAE 56            add b, a
3850   1FAF E4            pop a
3851   1FB0             ; END TERMS
3852   1FB0 74            mov d, b
3853   1FB1 32            mov bl, [d]
3854   1FB2 A7 00         mov bh, 0
3855   1FB4             ; START RELATIONAL
3856   1FB4 D7            push a
3857   1FB5 11            mov a, b
3858   1FB6 26 41 00      mov b, $41
3859   1FB9 B0            cmp a, b
3860   1FBA FD 71         seq ; ==
3861   1FBC E4            pop a
3862   1FBD             ; END RELATIONAL
3863   1FBD FD A7         sand a, b
3864   1FBF E4            pop a
3865   1FC0 E7            pop d
3866   1FC1 FD 43         mov [d], b
3867   1FC3             ;; pass = pass && *(p + indices[1]) == 'B'; 
3868   1FC3 FA FF FF      lea d, [bp + -1] ; $pass
3869   1FC6 DA            push d
3870   1FC7 FA FF FF      lea d, [bp + -1] ; $pass
3871   1FCA 2A            mov b, [d]
3872   1FCB D7            push a
3873   1FCC 11            mov a, b
3874   1FCD FA EE FF      lea d, [bp + -18] ; $p
3875   1FD0 2A            mov b, [d]
3876   1FD1             ; START TERMS
3877   1FD1 D7            push a
3878   1FD2 11            mov a, b
3879   1FD3 FA F0 FF      lea d, [bp + -16] ; $indices
3880   1FD6 D7            push a
3881   1FD7 DA            push d
3882   1FD8 26 01 00      mov b, $1
3883   1FDB E7            pop d
3884   1FDC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3885   1FE0 E4            pop a
3886   1FE1 2A            mov b, [d]
3887   1FE2 56            add b, a
3888   1FE3 E4            pop a
3889   1FE4             ; END TERMS
3890   1FE4 74            mov d, b
3891   1FE5 32            mov bl, [d]
3892   1FE6 A7 00         mov bh, 0
3893   1FE8             ; START RELATIONAL
3894   1FE8 D7            push a
3895   1FE9 11            mov a, b
3896   1FEA 26 42 00      mov b, $42
3897   1FED B0            cmp a, b
3898   1FEE FD 71         seq ; ==
3899   1FF0 E4            pop a
3900   1FF1             ; END RELATIONAL
3901   1FF1 FD A7         sand a, b
3902   1FF3 E4            pop a
3903   1FF4 E7            pop d
3904   1FF5 FD 43         mov [d], b
3905   1FF7             ;; pass = pass && *(p + indices[2]) == 'C'; 
3906   1FF7 FA FF FF      lea d, [bp + -1] ; $pass
3907   1FFA DA            push d
3908   1FFB FA FF FF      lea d, [bp + -1] ; $pass
3909   1FFE 2A            mov b, [d]
3910   1FFF D7            push a
3911   2000 11            mov a, b
3912   2001 FA EE FF      lea d, [bp + -18] ; $p
3913   2004 2A            mov b, [d]
3914   2005             ; START TERMS
3915   2005 D7            push a
3916   2006 11            mov a, b
3917   2007 FA F0 FF      lea d, [bp + -16] ; $indices
3918   200A D7            push a
3919   200B DA            push d
3920   200C 26 02 00      mov b, $2
3921   200F E7            pop d
3922   2010 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3923   2014 E4            pop a
3924   2015 2A            mov b, [d]
3925   2016 56            add b, a
3926   2017 E4            pop a
3927   2018             ; END TERMS
3928   2018 74            mov d, b
3929   2019 32            mov bl, [d]
3930   201A A7 00         mov bh, 0
3931   201C             ; START RELATIONAL
3932   201C D7            push a
3933   201D 11            mov a, b
3934   201E 26 43 00      mov b, $43
3935   2021 B0            cmp a, b
3936   2022 FD 71         seq ; ==
3937   2024 E4            pop a
3938   2025             ; END RELATIONAL
3939   2025 FD A7         sand a, b
3940   2027 E4            pop a
3941   2028 E7            pop d
3942   2029 FD 43         mov [d], b
3943   202B             ;; pass = pass && *(p + indices[3]) == 'D'; 
3944   202B FA FF FF      lea d, [bp + -1] ; $pass
3945   202E DA            push d
3946   202F FA FF FF      lea d, [bp + -1] ; $pass
3947   2032 2A            mov b, [d]
3948   2033 D7            push a
3949   2034 11            mov a, b
3950   2035 FA EE FF      lea d, [bp + -18] ; $p
3951   2038 2A            mov b, [d]
3952   2039             ; START TERMS
3953   2039 D7            push a
3954   203A 11            mov a, b
3955   203B FA F0 FF      lea d, [bp + -16] ; $indices
3956   203E D7            push a
3957   203F DA            push d
3958   2040 26 03 00      mov b, $3
3959   2043 E7            pop d
3960   2044 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3961   2048 E4            pop a
3962   2049 2A            mov b, [d]
3963   204A 56            add b, a
3964   204B E4            pop a
3965   204C             ; END TERMS
3966   204C 74            mov d, b
3967   204D 32            mov bl, [d]
3968   204E A7 00         mov bh, 0
3969   2050             ; START RELATIONAL
3970   2050 D7            push a
3971   2051 11            mov a, b
3972   2052 26 44 00      mov b, $44
3973   2055 B0            cmp a, b
3974   2056 FD 71         seq ; ==
3975   2058 E4            pop a
3976   2059             ; END RELATIONAL
3977   2059 FD A7         sand a, b
3978   205B E4            pop a
3979   205C E7            pop d
3980   205D FD 43         mov [d], b
3981   205F             ;; pass = pass && *(p + indices[4]) == 'E'; 
3982   205F FA FF FF      lea d, [bp + -1] ; $pass
3983   2062 DA            push d
3984   2063 FA FF FF      lea d, [bp + -1] ; $pass
3985   2066 2A            mov b, [d]
3986   2067 D7            push a
3987   2068 11            mov a, b
3988   2069 FA EE FF      lea d, [bp + -18] ; $p
3989   206C 2A            mov b, [d]
3990   206D             ; START TERMS
3991   206D D7            push a
3992   206E 11            mov a, b
3993   206F FA F0 FF      lea d, [bp + -16] ; $indices
3994   2072 D7            push a
3995   2073 DA            push d
3996   2074 26 04 00      mov b, $4
3997   2077 E7            pop d
3998   2078 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3999   207C E4            pop a
4000   207D 2A            mov b, [d]
4001   207E 56            add b, a
4002   207F E4            pop a
4003   2080             ; END TERMS
4004   2080 74            mov d, b
4005   2081 32            mov bl, [d]
4006   2082 A7 00         mov bh, 0
4007   2084             ; START RELATIONAL
4008   2084 D7            push a
4009   2085 11            mov a, b
4010   2086 26 45 00      mov b, $45
4011   2089 B0            cmp a, b
4012   208A FD 71         seq ; ==
4013   208C E4            pop a
4014   208D             ; END RELATIONAL
4015   208D FD A7         sand a, b
4016   208F E4            pop a
4017   2090 E7            pop d
4018   2091 FD 43         mov [d], b
4019   2093             ;; return pass; 
4020   2093 FA FF FF      lea d, [bp + -1] ; $pass
4021   2096 2A            mov b, [d]
4022   2097 F9            leave
4023   2098 09            ret
4024   2099             
4025   2099             test3:
4026   2099 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4027   209C             ;; int pass = 1; 
4028   209C 52 02 00      sub sp, 2 ; pass
4029   209F             ; --- START LOCAL VAR INITIALIZATION
4030   209F FA FF FF      lea d, [bp + -1] ; $pass
4031   20A2 DA            push d
4032   20A3 26 01 00      mov b, $1
4033   20A6 E7            pop d
4034   20A7 FD 43         mov [d], b
4035   20A9             ; --- END LOCAL VAR INITIALIZATION
4036   20A9             ;; st.c = 'A'; 
4037   20A9 FA 05 00      lea d, [bp + 5] ; $st
4038   20AC 58 00 00      add d, 0
4039   20AF DA            push d
4040   20B0 26 41 00      mov b, $41
4041   20B3 E7            pop d
4042   20B4 FD 3E         mov [d], bl
4043   20B6             ;; st.i = 277; 
4044   20B6 FA 05 00      lea d, [bp + 5] ; $st
4045   20B9 58 01 00      add d, 1
4046   20BC DA            push d
4047   20BD 26 15 01      mov b, $115
4048   20C0 E7            pop d
4049   20C1 FD 43         mov [d], b
4050   20C3             ;; st.m[0] = 0; 
4051   20C3 FA 05 00      lea d, [bp + 5] ; $st
4052   20C6 58 03 00      add d, 3
4053   20C9 D7            push a
4054   20CA DA            push d
4055   20CB 26 00 00      mov b, $0
4056   20CE E7            pop d
4057   20CF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4058   20D3 E4            pop a
4059   20D4 DA            push d
4060   20D5 26 00 00      mov b, $0
4061   20D8 E7            pop d
4062   20D9 FD 43         mov [d], b
4063   20DB             ;; st.m[1] = 1; 
4064   20DB FA 05 00      lea d, [bp + 5] ; $st
4065   20DE 58 03 00      add d, 3
4066   20E1 D7            push a
4067   20E2 DA            push d
4068   20E3 26 01 00      mov b, $1
4069   20E6 E7            pop d
4070   20E7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4071   20EB E4            pop a
4072   20EC DA            push d
4073   20ED 26 01 00      mov b, $1
4074   20F0 E7            pop d
4075   20F1 FD 43         mov [d], b
4076   20F3             ;; st.m[2] = 2; 
4077   20F3 FA 05 00      lea d, [bp + 5] ; $st
4078   20F6 58 03 00      add d, 3
4079   20F9 D7            push a
4080   20FA DA            push d
4081   20FB 26 02 00      mov b, $2
4082   20FE E7            pop d
4083   20FF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4084   2103 E4            pop a
4085   2104 DA            push d
4086   2105 26 02 00      mov b, $2
4087   2108 E7            pop d
4088   2109 FD 43         mov [d], b
4089   210B             ;; st.m[3] = 3; 
4090   210B FA 05 00      lea d, [bp + 5] ; $st
4091   210E 58 03 00      add d, 3
4092   2111 D7            push a
4093   2112 DA            push d
4094   2113 26 03 00      mov b, $3
4095   2116 E7            pop d
4096   2117 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4097   211B E4            pop a
4098   211C DA            push d
4099   211D 26 03 00      mov b, $3
4100   2120 E7            pop d
4101   2121 FD 43         mov [d], b
4102   2123             ;; st.m[4] = 4; 
4103   2123 FA 05 00      lea d, [bp + 5] ; $st
4104   2126 58 03 00      add d, 3
4105   2129 D7            push a
4106   212A DA            push d
4107   212B 26 04 00      mov b, $4
4108   212E E7            pop d
4109   212F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4110   2133 E4            pop a
4111   2134 DA            push d
4112   2135 26 04 00      mov b, $4
4113   2138 E7            pop d
4114   2139 FD 43         mov [d], b
4115   213B             ;; pass = pass && st.c == 'A'; 
4116   213B FA FF FF      lea d, [bp + -1] ; $pass
4117   213E DA            push d
4118   213F FA FF FF      lea d, [bp + -1] ; $pass
4119   2142 2A            mov b, [d]
4120   2143 D7            push a
4121   2144 11            mov a, b
4122   2145 FA 05 00      lea d, [bp + 5] ; $st
4123   2148 58 00 00      add d, 0
4124   214B 32            mov bl, [d]
4125   214C A7 00         mov bh, 0
4126   214E             ; START RELATIONAL
4127   214E D7            push a
4128   214F 11            mov a, b
4129   2150 26 41 00      mov b, $41
4130   2153 B0            cmp a, b
4131   2154 FD 71         seq ; ==
4132   2156 E4            pop a
4133   2157             ; END RELATIONAL
4134   2157 FD A7         sand a, b
4135   2159 E4            pop a
4136   215A E7            pop d
4137   215B FD 43         mov [d], b
4138   215D             ;; pass = pass && st.i == 277; 
4139   215D FA FF FF      lea d, [bp + -1] ; $pass
4140   2160 DA            push d
4141   2161 FA FF FF      lea d, [bp + -1] ; $pass
4142   2164 2A            mov b, [d]
4143   2165 D7            push a
4144   2166 11            mov a, b
4145   2167 FA 05 00      lea d, [bp + 5] ; $st
4146   216A 58 01 00      add d, 1
4147   216D 2A            mov b, [d]
4148   216E             ; START RELATIONAL
4149   216E D7            push a
4150   216F 11            mov a, b
4151   2170 26 15 01      mov b, $115
4152   2173 B0            cmp a, b
4153   2174 FD 71         seq ; ==
4154   2176 E4            pop a
4155   2177             ; END RELATIONAL
4156   2177 FD A7         sand a, b
4157   2179 E4            pop a
4158   217A E7            pop d
4159   217B FD 43         mov [d], b
4160   217D             ;; pass = pass && st.m[0] == 0; 
4161   217D FA FF FF      lea d, [bp + -1] ; $pass
4162   2180 DA            push d
4163   2181 FA FF FF      lea d, [bp + -1] ; $pass
4164   2184 2A            mov b, [d]
4165   2185 D7            push a
4166   2186 11            mov a, b
4167   2187 FA 05 00      lea d, [bp + 5] ; $st
4168   218A 58 03 00      add d, 3
4169   218D D7            push a
4170   218E DA            push d
4171   218F 26 00 00      mov b, $0
4172   2192 E7            pop d
4173   2193 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4174   2197 E4            pop a
4175   2198 2A            mov b, [d]
4176   2199             ; START RELATIONAL
4177   2199 D7            push a
4178   219A 11            mov a, b
4179   219B 26 00 00      mov b, $0
4180   219E B0            cmp a, b
4181   219F FD 71         seq ; ==
4182   21A1 E4            pop a
4183   21A2             ; END RELATIONAL
4184   21A2 FD A7         sand a, b
4185   21A4 E4            pop a
4186   21A5 E7            pop d
4187   21A6 FD 43         mov [d], b
4188   21A8             ;; pass = pass && st.m[1] == 1; 
4189   21A8 FA FF FF      lea d, [bp + -1] ; $pass
4190   21AB DA            push d
4191   21AC FA FF FF      lea d, [bp + -1] ; $pass
4192   21AF 2A            mov b, [d]
4193   21B0 D7            push a
4194   21B1 11            mov a, b
4195   21B2 FA 05 00      lea d, [bp + 5] ; $st
4196   21B5 58 03 00      add d, 3
4197   21B8 D7            push a
4198   21B9 DA            push d
4199   21BA 26 01 00      mov b, $1
4200   21BD E7            pop d
4201   21BE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4202   21C2 E4            pop a
4203   21C3 2A            mov b, [d]
4204   21C4             ; START RELATIONAL
4205   21C4 D7            push a
4206   21C5 11            mov a, b
4207   21C6 26 01 00      mov b, $1
4208   21C9 B0            cmp a, b
4209   21CA FD 71         seq ; ==
4210   21CC E4            pop a
4211   21CD             ; END RELATIONAL
4212   21CD FD A7         sand a, b
4213   21CF E4            pop a
4214   21D0 E7            pop d
4215   21D1 FD 43         mov [d], b
4216   21D3             ;; pass = pass && st.m[2] == 2; 
4217   21D3 FA FF FF      lea d, [bp + -1] ; $pass
4218   21D6 DA            push d
4219   21D7 FA FF FF      lea d, [bp + -1] ; $pass
4220   21DA 2A            mov b, [d]
4221   21DB D7            push a
4222   21DC 11            mov a, b
4223   21DD FA 05 00      lea d, [bp + 5] ; $st
4224   21E0 58 03 00      add d, 3
4225   21E3 D7            push a
4226   21E4 DA            push d
4227   21E5 26 02 00      mov b, $2
4228   21E8 E7            pop d
4229   21E9 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4230   21ED E4            pop a
4231   21EE 2A            mov b, [d]
4232   21EF             ; START RELATIONAL
4233   21EF D7            push a
4234   21F0 11            mov a, b
4235   21F1 26 02 00      mov b, $2
4236   21F4 B0            cmp a, b
4237   21F5 FD 71         seq ; ==
4238   21F7 E4            pop a
4239   21F8             ; END RELATIONAL
4240   21F8 FD A7         sand a, b
4241   21FA E4            pop a
4242   21FB E7            pop d
4243   21FC FD 43         mov [d], b
4244   21FE             ;; pass = pass && st.m[3] == 3; 
4245   21FE FA FF FF      lea d, [bp + -1] ; $pass
4246   2201 DA            push d
4247   2202 FA FF FF      lea d, [bp + -1] ; $pass
4248   2205 2A            mov b, [d]
4249   2206 D7            push a
4250   2207 11            mov a, b
4251   2208 FA 05 00      lea d, [bp + 5] ; $st
4252   220B 58 03 00      add d, 3
4253   220E D7            push a
4254   220F DA            push d
4255   2210 26 03 00      mov b, $3
4256   2213 E7            pop d
4257   2214 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4258   2218 E4            pop a
4259   2219 2A            mov b, [d]
4260   221A             ; START RELATIONAL
4261   221A D7            push a
4262   221B 11            mov a, b
4263   221C 26 03 00      mov b, $3
4264   221F B0            cmp a, b
4265   2220 FD 71         seq ; ==
4266   2222 E4            pop a
4267   2223             ; END RELATIONAL
4268   2223 FD A7         sand a, b
4269   2225 E4            pop a
4270   2226 E7            pop d
4271   2227 FD 43         mov [d], b
4272   2229             ;; pass = pass && st.m[4] == 4; 
4273   2229 FA FF FF      lea d, [bp + -1] ; $pass
4274   222C DA            push d
4275   222D FA FF FF      lea d, [bp + -1] ; $pass
4276   2230 2A            mov b, [d]
4277   2231 D7            push a
4278   2232 11            mov a, b
4279   2233 FA 05 00      lea d, [bp + 5] ; $st
4280   2236 58 03 00      add d, 3
4281   2239 D7            push a
4282   223A DA            push d
4283   223B 26 04 00      mov b, $4
4284   223E E7            pop d
4285   223F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4286   2243 E4            pop a
4287   2244 2A            mov b, [d]
4288   2245             ; START RELATIONAL
4289   2245 D7            push a
4290   2246 11            mov a, b
4291   2247 26 04 00      mov b, $4
4292   224A B0            cmp a, b
4293   224B FD 71         seq ; ==
4294   224D E4            pop a
4295   224E             ; END RELATIONAL
4296   224E FD A7         sand a, b
4297   2250 E4            pop a
4298   2251 E7            pop d
4299   2252 FD 43         mov [d], b
4300   2254             ;; return pass; 
4301   2254 FA FF FF      lea d, [bp + -1] ; $pass
4302   2257 2A            mov b, [d]
4303   2258 F9            leave
4304   2259 09            ret
4305   225A             ; --- END TEXT BLOCK
4306   225A             
4307   225A             ; --- BEGIN DATA BLOCK
4308   225A 00 00 00 00 _st1_data: .fill 13, 0
4308   225E 00 00 00 00 
4308   2262 00 00 00 00 
4308   2266 00 
4309   2267 54 65 73 74 _s0: .db "Test %d, Result: %d\n", 0
4309   226B 20 25 64 2C 
4309   226F 20 52 65 73 
4309   2273 75 6C 74 3A 
4309   2277 20 25 64 0A 
4309   227B 00 
4310   227C 55 6E 65 78 _s1: .db "Unexpected format in printf.", 0
4310   2280 70 65 63 74 
4310   2284 65 64 20 66 
4310   2288 6F 72 6D 61 
4310   228C 74 20 69 6E 
4310   2290 20 70 72 69 
4310   2294 6E 74 66 2E 
4310   2298 00 
4311   2299 45 72 72 6F _s2: .db "Error: Unknown argument type.\n", 0
4311   229D 72 3A 20 55 
4311   22A1 6E 6B 6E 6F 
4311   22A5 77 6E 20 61 
4311   22A9 72 67 75 6D 
4311   22AD 65 6E 74 20 
4311   22B1 74 79 70 65 
4311   22B5 2E 0A 00 
4312   22B8 1B 5B 32 4A _s3: .db "\033[2J\033[H", 0
4312   22BC 1B 5B 48 00 
4313   22C0             
4314   22C0 C2 22       _heap_top: .dw _heap
4315   22C2 00          _heap: .db 0
4316   22C3             ; --- END DATA BLOCK
4317   22C3             
4318   22C3             .end
tasm: Number of errors = 0
