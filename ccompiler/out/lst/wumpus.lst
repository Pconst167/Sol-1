0001   0000             ; --- FILENAME: programs/wumpus
0002   0000             .include "lib/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $arg_p 
0011   0408             ; $arg_line_p 
0012   0408             ; $psrc 
0013   0408             ; $pdest 
0014   0408             ; $arg 
0015   0408             ; $arg_len 
0016   0408             ; $c 
0017   0408 52 4C 00      sub sp, 76
0018   040B             ;; argc = 0; 
0019   040B FA 07 00      lea d, [bp + 7] ; $argc
0020   040E DA            push d
0021   040F 26 00 00      mov b, $0
0022   0412 E7            pop d
0023   0413 FD 43         mov [d], b
0024   0415             ;; arg_line_p = 0; 
0025   0415 FA FD FF      lea d, [bp + -3] ; $arg_line_p
0026   0418 DA            push d
0027   0419 26 00 00      mov b, $0
0028   041C E7            pop d
0029   041D FD 43         mov [d], b
0030   041F             ;; for(;;){ 
0031   041F             _for1_init:
0032   041F             _for1_cond:
0033   041F             _for1_block:
0034   041F             ;; arg_p = arg; 
0035   041F FA FF FF      lea d, [bp + -1] ; $arg_p
0036   0422 DA            push d
0037   0423 FA B9 FF      lea d, [bp + -71] ; $arg
0038   0426 2D            mov b, d
0039   0427 E7            pop d
0040   0428 FD 43         mov [d], b
0041   042A             ;; arg_len = 0; 
0042   042A FA B7 FF      lea d, [bp + -73] ; $arg_len
0043   042D DA            push d
0044   042E 26 00 00      mov b, $0
0045   0431 E7            pop d
0046   0432 FD 43         mov [d], b
0047   0434             ;; while(*arg_line_p == ' ' || *arg_line_p == '\t') arg_line_p++; 
0048   0434             _while2_cond:
0049   0434 FA FD FF      lea d, [bp + -3] ; $arg_line_p
0050   0437 2A            mov b, [d]
0051   0438 74            mov d, b
0052   0439 32            mov bl, [d]
0053   043A A7 00         mov bh, 0
0054   043C             ; START RELATIONAL
0055   043C D7            push a
0056   043D 11            mov a, b
0057   043E 26 20 00      mov b, $20
0058   0441 B0            cmp a, b
0059   0442 FD 71         seq ; ==
0060   0444 E4            pop a
0061   0445             ; END RELATIONAL
0062   0445 D7            push a
0063   0446 11            mov a, b
0064   0447 FA FD FF      lea d, [bp + -3] ; $arg_line_p
0065   044A 2A            mov b, [d]
0066   044B 74            mov d, b
0067   044C 32            mov bl, [d]
0068   044D A7 00         mov bh, 0
0069   044F             ; START RELATIONAL
0070   044F D7            push a
0071   0450 11            mov a, b
0072   0451 26 09 00      mov b, $9
0073   0454 B0            cmp a, b
0074   0455 FD 71         seq ; ==
0075   0457 E4            pop a
0076   0458             ; END RELATIONAL
0077   0458 FD A8         sor a, b ; ||
0078   045A E4            pop a
0079   045B C0 00 00      cmp b, 0
0080   045E C6 73 04      je _while2_exit
0081   0461             _while2_block:
0082   0461             ;; arg_line_p++; 
0083   0461 FA FD FF      lea d, [bp + -3] ; $arg_line_p
0084   0464 2A            mov b, [d]
0085   0465 FD 79         mov g, b
0086   0467 FD 77         inc b
0087   0469 FA FD FF      lea d, [bp + -3] ; $arg_line_p
0088   046C FD 43         mov [d], b
0089   046E FD 27         mov b, g
0090   0470 0A 34 04      jmp _while2_cond
0091   0473             _while2_exit:
0092   0473             ;; if(!*arg_line_p) break; 
0093   0473             _if3_cond:
0094   0473 FA FD FF      lea d, [bp + -3] ; $arg_line_p
0095   0476 2A            mov b, [d]
0096   0477 74            mov d, b
0097   0478 32            mov bl, [d]
0098   0479 A7 00         mov bh, 0
0099   047B C0 00 00      cmp b, 0
0100   047E FD 71         seq ; !
0101   0480 C0 00 00      cmp b, 0
0102   0483 C6 8C 04      je _if3_exit
0103   0486             _if3_true:
0104   0486             ;; break; 
0105   0486 0A D7 05      jmp _for1_exit ; for break
0106   0489 0A 8C 04      jmp _if3_exit
0107   048C             _if3_exit:
0108   048C             ;; while(*arg_line_p != ' ' && *arg_line_p != ';' && *arg_line_p){ 
0109   048C             _while4_cond:
0110   048C FA FD FF      lea d, [bp + -3] ; $arg_line_p
0111   048F 2A            mov b, [d]
0112   0490 74            mov d, b
0113   0491 32            mov bl, [d]
0114   0492 A7 00         mov bh, 0
0115   0494             ; START RELATIONAL
0116   0494 D7            push a
0117   0495 11            mov a, b
0118   0496 26 20 00      mov b, $20
0119   0499 B0            cmp a, b
0120   049A FD 72         sneq ; !=
0121   049C E4            pop a
0122   049D             ; END RELATIONAL
0123   049D D7            push a
0124   049E 11            mov a, b
0125   049F FA FD FF      lea d, [bp + -3] ; $arg_line_p
0126   04A2 2A            mov b, [d]
0127   04A3 74            mov d, b
0128   04A4 32            mov bl, [d]
0129   04A5 A7 00         mov bh, 0
0130   04A7             ; START RELATIONAL
0131   04A7 D7            push a
0132   04A8 11            mov a, b
0133   04A9 26 3B 00      mov b, $3b
0134   04AC B0            cmp a, b
0135   04AD FD 72         sneq ; !=
0136   04AF E4            pop a
0137   04B0             ; END RELATIONAL
0138   04B0 FD A7         sand a, b ; &&
0139   04B2 11            mov a, b
0140   04B3 FA FD FF      lea d, [bp + -3] ; $arg_line_p
0141   04B6 2A            mov b, [d]
0142   04B7 74            mov d, b
0143   04B8 32            mov bl, [d]
0144   04B9 A7 00         mov bh, 0
0145   04BB FD A7         sand a, b ; &&
0146   04BD E4            pop a
0147   04BE C0 00 00      cmp b, 0
0148   04C1 C6 25 05      je _while4_exit
0149   04C4             _while4_block:
0150   04C4             ;; if(*arg_line_p == '\\') arg_line_p++; 
0151   04C4             _if5_cond:
0152   04C4 FA FD FF      lea d, [bp + -3] ; $arg_line_p
0153   04C7 2A            mov b, [d]
0154   04C8 74            mov d, b
0155   04C9 32            mov bl, [d]
0156   04CA A7 00         mov bh, 0
0157   04CC             ; START RELATIONAL
0158   04CC D7            push a
0159   04CD 11            mov a, b
0160   04CE 26 5C 00      mov b, $5c
0161   04D1 B0            cmp a, b
0162   04D2 FD 71         seq ; ==
0163   04D4 E4            pop a
0164   04D5             ; END RELATIONAL
0165   04D5 C0 00 00      cmp b, 0
0166   04D8 C6 ED 04      je _if5_exit
0167   04DB             _if5_true:
0168   04DB             ;; arg_line_p++; 
0169   04DB FA FD FF      lea d, [bp + -3] ; $arg_line_p
0170   04DE 2A            mov b, [d]
0171   04DF FD 79         mov g, b
0172   04E1 FD 77         inc b
0173   04E3 FA FD FF      lea d, [bp + -3] ; $arg_line_p
0174   04E6 FD 43         mov [d], b
0175   04E8 FD 27         mov b, g
0176   04EA 0A ED 04      jmp _if5_exit
0177   04ED             _if5_exit:
0178   04ED             ;; *arg_p++ = *arg_line_p++; 
0179   04ED FA FF FF      lea d, [bp + -1] ; $arg_p
0180   04F0 2A            mov b, [d]
0181   04F1 FD 79         mov g, b
0182   04F3 FD 77         inc b
0183   04F5 FA FF FF      lea d, [bp + -1] ; $arg_p
0184   04F8 FD 43         mov [d], b
0185   04FA FD 27         mov b, g
0186   04FC D8            push b
0187   04FD FA FD FF      lea d, [bp + -3] ; $arg_line_p
0188   0500 2A            mov b, [d]
0189   0501 FD 79         mov g, b
0190   0503 FD 77         inc b
0191   0505 FA FD FF      lea d, [bp + -3] ; $arg_line_p
0192   0508 FD 43         mov [d], b
0193   050A FD 27         mov b, g
0194   050C 74            mov d, b
0195   050D 32            mov bl, [d]
0196   050E A7 00         mov bh, 0
0197   0510 E7            pop d
0198   0511 FD 3E         mov [d], bl
0199   0513             ;; arg_len++; 
0200   0513 FA B7 FF      lea d, [bp + -73] ; $arg_len
0201   0516 2A            mov b, [d]
0202   0517 FD 79         mov g, b
0203   0519 FD 77         inc b
0204   051B FA B7 FF      lea d, [bp + -73] ; $arg_len
0205   051E FD 43         mov [d], b
0206   0520 FD 27         mov b, g
0207   0522 0A 8C 04      jmp _while4_cond
0208   0525             _while4_exit:
0209   0525             ;; *arg_p = '\0'; 
0210   0525 FA FF FF      lea d, [bp + -1] ; $arg_p
0211   0528 2A            mov b, [d]
0212   0529 D8            push b
0213   052A 26 00 00      mov b, $0
0214   052D E7            pop d
0215   052E FD 3E         mov [d], bl
0216   0530             ;; argv[argc] = heap_top; 
0217   0530 2C 05 00      mov b, [bp + 5] ; $argv
0218   0533 74            mov d, b
0219   0534 D7            push a
0220   0535 DA            push d
0221   0536 FA 07 00      lea d, [bp + 7] ; $argc
0222   0539 2A            mov b, [d]
0223   053A E7            pop d
0224   053B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0225   053F E4            pop a
0226   0540 DA            push d
0227   0541 3B 3E 2D      mov d, _heap_top ; $heap_top
0228   0544 2A            mov b, [d]
0229   0545 E7            pop d
0230   0546 FD 43         mov [d], b
0231   0548             ;; heap_top = heap_top + arg_len + 1; 
0232   0548 3B 3E 2D      mov d, _heap_top ; $heap_top
0233   054B DA            push d
0234   054C 3B 3E 2D      mov d, _heap_top ; $heap_top
0235   054F 2A            mov b, [d]
0236   0550             ; START TERMS
0237   0550 D7            push a
0238   0551 11            mov a, b
0239   0552 FA B7 FF      lea d, [bp + -73] ; $arg_len
0240   0555 2A            mov b, [d]
0241   0556 54            add a, b
0242   0557 26 01 00      mov b, $1
0243   055A 54            add a, b
0244   055B 27            mov b, a
0245   055C E4            pop a
0246   055D             ; END TERMS
0247   055D E7            pop d
0248   055E FD 43         mov [d], b
0249   0560             ;; psrc = arg; 
0250   0560 FA FB FF      lea d, [bp + -5] ; $psrc
0251   0563 DA            push d
0252   0564 FA B9 FF      lea d, [bp + -71] ; $arg
0253   0567 2D            mov b, d
0254   0568 E7            pop d
0255   0569 FD 43         mov [d], b
0256   056B             ;; pdest = argv[argc]; 
0257   056B FA F9 FF      lea d, [bp + -7] ; $pdest
0258   056E DA            push d
0259   056F 2C 05 00      mov b, [bp + 5] ; $argv
0260   0572 74            mov d, b
0261   0573 D7            push a
0262   0574 DA            push d
0263   0575 FA 07 00      lea d, [bp + 7] ; $argc
0264   0578 2A            mov b, [d]
0265   0579 E7            pop d
0266   057A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0267   057E E4            pop a
0268   057F 2A            mov b, [d]
0269   0580 E7            pop d
0270   0581 FD 43         mov [d], b
0271   0583             ;; while(*psrc) *pdest++ = *psrc++; 
0272   0583             _while6_cond:
0273   0583 FA FB FF      lea d, [bp + -5] ; $psrc
0274   0586 2A            mov b, [d]
0275   0587 74            mov d, b
0276   0588 32            mov bl, [d]
0277   0589 A7 00         mov bh, 0
0278   058B C0 00 00      cmp b, 0
0279   058E C6 BA 05      je _while6_exit
0280   0591             _while6_block:
0281   0591             ;; *pdest++ = *psrc++; 
0282   0591 FA F9 FF      lea d, [bp + -7] ; $pdest
0283   0594 2A            mov b, [d]
0284   0595 FD 79         mov g, b
0285   0597 FD 77         inc b
0286   0599 FA F9 FF      lea d, [bp + -7] ; $pdest
0287   059C FD 43         mov [d], b
0288   059E FD 27         mov b, g
0289   05A0 D8            push b
0290   05A1 FA FB FF      lea d, [bp + -5] ; $psrc
0291   05A4 2A            mov b, [d]
0292   05A5 FD 79         mov g, b
0293   05A7 FD 77         inc b
0294   05A9 FA FB FF      lea d, [bp + -5] ; $psrc
0295   05AC FD 43         mov [d], b
0296   05AE FD 27         mov b, g
0297   05B0 74            mov d, b
0298   05B1 32            mov bl, [d]
0299   05B2 A7 00         mov bh, 0
0300   05B4 E7            pop d
0301   05B5 FD 3E         mov [d], bl
0302   05B7 0A 83 05      jmp _while6_cond
0303   05BA             _while6_exit:
0304   05BA             ;; *pdest = '\0'; 
0305   05BA FA F9 FF      lea d, [bp + -7] ; $pdest
0306   05BD 2A            mov b, [d]
0307   05BE D8            push b
0308   05BF 26 00 00      mov b, $0
0309   05C2 E7            pop d
0310   05C3 FD 3E         mov [d], bl
0311   05C5             ;; argc++; 
0312   05C5 FA 07 00      lea d, [bp + 7] ; $argc
0313   05C8 2A            mov b, [d]
0314   05C9 FD 79         mov g, b
0315   05CB FD 77         inc b
0316   05CD FA 07 00      lea d, [bp + 7] ; $argc
0317   05D0 FD 43         mov [d], b
0318   05D2 FD 27         mov b, g
0319   05D4             _for1_update:
0320   05D4 0A 1F 04      jmp _for1_cond
0321   05D7             _for1_exit:
0322   05D7             ;; rand(); 
0323   05D7 07 54 0E      call rand
0324   05DA             ;; c = getlet("INSTRUCTIONS (Y-N)"); 
0325   05DA FA B5 FF      lea d, [bp + -75] ; $c
0326   05DD DA            push d
0327   05DE 26 E1 24      mov b, __s0 ; "INSTRUCTIONS (Y-N)"
0328   05E1 FD AB         swp b
0329   05E3 D8            push b
0330   05E4 07 FE 16      call getlet
0331   05E7 51 02 00      add sp, 2
0332   05EA E7            pop d
0333   05EB FD 43         mov [d], b
0334   05ED             ;; if (c == 'Y') { 
0335   05ED             _if7_cond:
0336   05ED FA B5 FF      lea d, [bp + -75] ; $c
0337   05F0 2A            mov b, [d]
0338   05F1             ; START RELATIONAL
0339   05F1 D7            push a
0340   05F2 11            mov a, b
0341   05F3 26 59 00      mov b, $59
0342   05F6 B0            cmp a, b
0343   05F7 FD 71         seq ; ==
0344   05F9 E4            pop a
0345   05FA             ; END RELATIONAL
0346   05FA C0 00 00      cmp b, 0
0347   05FD C6 06 06      je _if7_exit
0348   0600             _if7_true:
0349   0600             ;; print_instructions(); 
0350   0600 07 47 17      call print_instructions
0351   0603 0A 06 06      jmp _if7_exit
0352   0606             _if7_exit:
0353   0606             ;; do {  
0354   0606             _do8_block:
0355   0606             ;; game_setup(); 
0356   0606 07 92 21      call game_setup
0357   0609             ;; game_play(); 
0358   0609 07 A1 22      call game_play
0359   060C             ;; } while (getlet("NEW GAME (Y-N)") != 'N'); 
0360   060C             _do8_cond:
0361   060C 26 F4 24      mov b, __s1 ; "NEW GAME (Y-N)"
0362   060F FD AB         swp b
0363   0611 D8            push b
0364   0612 07 FE 16      call getlet
0365   0615 51 02 00      add sp, 2
0366   0618             ; START RELATIONAL
0367   0618 D7            push a
0368   0619 11            mov a, b
0369   061A 26 4E 00      mov b, $4e
0370   061D B0            cmp a, b
0371   061E FD 72         sneq ; !=
0372   0620 E4            pop a
0373   0621             ; END RELATIONAL
0374   0621 C0 01 00      cmp b, 1
0375   0624 C6 06 06      je _do8_block
0376   0627             _do8_exit:
0377   0627             ;; return 0; 
0378   0627 26 00 00      mov b, $0
0379   062A F9            leave
0380   062B 05 0B         syscall sys_terminate_proc
0381   062D             
0382   062D             strcpy:
0383   062D F8 00 00      enter 0 ; (push bp; mov bp, sp)
0384   0630             ; $psrc 
0385   0630             ; $pdest 
0386   0630 52 04 00      sub sp, 4
0387   0633             ;; psrc = src; 
0388   0633 FA FF FF      lea d, [bp + -1] ; $psrc
0389   0636 DA            push d
0390   0637 FA 05 00      lea d, [bp + 5] ; $src
0391   063A 2A            mov b, [d]
0392   063B E7            pop d
0393   063C FD 43         mov [d], b
0394   063E             ;; pdest = dest; 
0395   063E FA FD FF      lea d, [bp + -3] ; $pdest
0396   0641 DA            push d
0397   0642 FA 07 00      lea d, [bp + 7] ; $dest
0398   0645 2A            mov b, [d]
0399   0646 E7            pop d
0400   0647 FD 43         mov [d], b
0401   0649             ;; while(*psrc) *pdest++ = *psrc++; 
0402   0649             _while9_cond:
0403   0649 FA FF FF      lea d, [bp + -1] ; $psrc
0404   064C 2A            mov b, [d]
0405   064D 74            mov d, b
0406   064E 32            mov bl, [d]
0407   064F A7 00         mov bh, 0
0408   0651 C0 00 00      cmp b, 0
0409   0654 C6 80 06      je _while9_exit
0410   0657             _while9_block:
0411   0657             ;; *pdest++ = *psrc++; 
0412   0657 FA FD FF      lea d, [bp + -3] ; $pdest
0413   065A 2A            mov b, [d]
0414   065B FD 79         mov g, b
0415   065D FD 77         inc b
0416   065F FA FD FF      lea d, [bp + -3] ; $pdest
0417   0662 FD 43         mov [d], b
0418   0664 FD 27         mov b, g
0419   0666 D8            push b
0420   0667 FA FF FF      lea d, [bp + -1] ; $psrc
0421   066A 2A            mov b, [d]
0422   066B FD 79         mov g, b
0423   066D FD 77         inc b
0424   066F FA FF FF      lea d, [bp + -1] ; $psrc
0425   0672 FD 43         mov [d], b
0426   0674 FD 27         mov b, g
0427   0676 74            mov d, b
0428   0677 32            mov bl, [d]
0429   0678 A7 00         mov bh, 0
0430   067A E7            pop d
0431   067B FD 3E         mov [d], bl
0432   067D 0A 49 06      jmp _while9_cond
0433   0680             _while9_exit:
0434   0680             ;; *pdest = '\0'; 
0435   0680 FA FD FF      lea d, [bp + -3] ; $pdest
0436   0683 2A            mov b, [d]
0437   0684 D8            push b
0438   0685 26 00 00      mov b, $0
0439   0688 E7            pop d
0440   0689 FD 3E         mov [d], bl
0441   068B F9            leave
0442   068C 09            ret
0443   068D             
0444   068D             strcmp:
0445   068D F8 00 00      enter 0 ; (push bp; mov bp, sp)
0446   0690             ;; while (*s1 && (*s1 == *s2)) { 
0447   0690             _while10_cond:
0448   0690 FA 07 00      lea d, [bp + 7] ; $s1
0449   0693 2A            mov b, [d]
0450   0694 74            mov d, b
0451   0695 32            mov bl, [d]
0452   0696 A7 00         mov bh, 0
0453   0698 D7            push a
0454   0699 11            mov a, b
0455   069A FA 07 00      lea d, [bp + 7] ; $s1
0456   069D 2A            mov b, [d]
0457   069E 74            mov d, b
0458   069F 32            mov bl, [d]
0459   06A0 A7 00         mov bh, 0
0460   06A2             ; START RELATIONAL
0461   06A2 D7            push a
0462   06A3 11            mov a, b
0463   06A4 FA 05 00      lea d, [bp + 5] ; $s2
0464   06A7 2A            mov b, [d]
0465   06A8 74            mov d, b
0466   06A9 32            mov bl, [d]
0467   06AA A7 00         mov bh, 0
0468   06AC B0            cmp a, b
0469   06AD FD 71         seq ; ==
0470   06AF E4            pop a
0471   06B0             ; END RELATIONAL
0472   06B0 FD A7         sand a, b ; &&
0473   06B2 E4            pop a
0474   06B3 C0 00 00      cmp b, 0
0475   06B6 C6 DA 06      je _while10_exit
0476   06B9             _while10_block:
0477   06B9             ;; s1++; 
0478   06B9 FA 07 00      lea d, [bp + 7] ; $s1
0479   06BC 2A            mov b, [d]
0480   06BD FD 79         mov g, b
0481   06BF FD 77         inc b
0482   06C1 FA 07 00      lea d, [bp + 7] ; $s1
0483   06C4 FD 43         mov [d], b
0484   06C6 FD 27         mov b, g
0485   06C8             ;; s2++; 
0486   06C8 FA 05 00      lea d, [bp + 5] ; $s2
0487   06CB 2A            mov b, [d]
0488   06CC FD 79         mov g, b
0489   06CE FD 77         inc b
0490   06D0 FA 05 00      lea d, [bp + 5] ; $s2
0491   06D3 FD 43         mov [d], b
0492   06D5 FD 27         mov b, g
0493   06D7 0A 90 06      jmp _while10_cond
0494   06DA             _while10_exit:
0495   06DA             ;; return *s1 - *s2; 
0496   06DA FA 07 00      lea d, [bp + 7] ; $s1
0497   06DD 2A            mov b, [d]
0498   06DE 74            mov d, b
0499   06DF 32            mov bl, [d]
0500   06E0 A7 00         mov bh, 0
0501   06E2             ; START TERMS
0502   06E2 D7            push a
0503   06E3 11            mov a, b
0504   06E4 FA 05 00      lea d, [bp + 5] ; $s2
0505   06E7 2A            mov b, [d]
0506   06E8 74            mov d, b
0507   06E9 32            mov bl, [d]
0508   06EA A7 00         mov bh, 0
0509   06EC 60            sub a, b
0510   06ED 27            mov b, a
0511   06EE E4            pop a
0512   06EF             ; END TERMS
0513   06EF F9            leave
0514   06F0 09            ret
0515   06F1             
0516   06F1             strcat:
0517   06F1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0518   06F4             ; $dest_len 
0519   06F4             ; $i 
0520   06F4 52 04 00      sub sp, 4
0521   06F7             ;; dest_len = strlen(dest); 
0522   06F7 FA FF FF      lea d, [bp + -1] ; $dest_len
0523   06FA DA            push d
0524   06FB FA 07 00      lea d, [bp + 7] ; $dest
0525   06FE 2A            mov b, [d]
0526   06FF FD AB         swp b
0527   0701 D8            push b
0528   0702 07 A7 07      call strlen
0529   0705 51 02 00      add sp, 2
0530   0708 E7            pop d
0531   0709 FD 43         mov [d], b
0532   070B             ;; for (i = 0; src[i] != 0; i=i+1) { 
0533   070B             _for11_init:
0534   070B FA FD FF      lea d, [bp + -3] ; $i
0535   070E DA            push d
0536   070F 26 00 00      mov b, $0
0537   0712 E7            pop d
0538   0713 FD 43         mov [d], b
0539   0715             _for11_cond:
0540   0715 FA 05 00      lea d, [bp + 5] ; $src
0541   0718 FD 2A         mov d, [d]
0542   071A D7            push a
0543   071B DA            push d
0544   071C FA FD FF      lea d, [bp + -3] ; $i
0545   071F 2A            mov b, [d]
0546   0720 E7            pop d
0547   0721 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0548   0725 E4            pop a
0549   0726 32            mov bl, [d]
0550   0727 A7 00         mov bh, 0
0551   0729             ; START RELATIONAL
0552   0729 D7            push a
0553   072A 11            mov a, b
0554   072B 26 00 00      mov b, $0
0555   072E B0            cmp a, b
0556   072F FD 72         sneq ; !=
0557   0731 E4            pop a
0558   0732             ; END RELATIONAL
0559   0732 C0 00 00      cmp b, 0
0560   0735 C6 80 07      je _for11_exit
0561   0738             _for11_block:
0562   0738             ;; dest[dest_len + i] = src[i]; 
0563   0738 FA 07 00      lea d, [bp + 7] ; $dest
0564   073B FD 2A         mov d, [d]
0565   073D D7            push a
0566   073E DA            push d
0567   073F FA FF FF      lea d, [bp + -1] ; $dest_len
0568   0742 2A            mov b, [d]
0569   0743             ; START TERMS
0570   0743 D7            push a
0571   0744 11            mov a, b
0572   0745 FA FD FF      lea d, [bp + -3] ; $i
0573   0748 2A            mov b, [d]
0574   0749 54            add a, b
0575   074A 27            mov b, a
0576   074B E4            pop a
0577   074C             ; END TERMS
0578   074C E7            pop d
0579   074D FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0580   0751 E4            pop a
0581   0752 DA            push d
0582   0753 FA 05 00      lea d, [bp + 5] ; $src
0583   0756 FD 2A         mov d, [d]
0584   0758 D7            push a
0585   0759 DA            push d
0586   075A FA FD FF      lea d, [bp + -3] ; $i
0587   075D 2A            mov b, [d]
0588   075E E7            pop d
0589   075F FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0590   0763 E4            pop a
0591   0764 32            mov bl, [d]
0592   0765 A7 00         mov bh, 0
0593   0767 E7            pop d
0594   0768 FD 3E         mov [d], bl
0595   076A             _for11_update:
0596   076A FA FD FF      lea d, [bp + -3] ; $i
0597   076D DA            push d
0598   076E FA FD FF      lea d, [bp + -3] ; $i
0599   0771 2A            mov b, [d]
0600   0772             ; START TERMS
0601   0772 D7            push a
0602   0773 11            mov a, b
0603   0774 26 01 00      mov b, $1
0604   0777 54            add a, b
0605   0778 27            mov b, a
0606   0779 E4            pop a
0607   077A             ; END TERMS
0608   077A E7            pop d
0609   077B FD 43         mov [d], b
0610   077D 0A 15 07      jmp _for11_cond
0611   0780             _for11_exit:
0612   0780             ;; dest[dest_len + i] = 0; 
0613   0780 FA 07 00      lea d, [bp + 7] ; $dest
0614   0783 FD 2A         mov d, [d]
0615   0785 D7            push a
0616   0786 DA            push d
0617   0787 FA FF FF      lea d, [bp + -1] ; $dest_len
0618   078A 2A            mov b, [d]
0619   078B             ; START TERMS
0620   078B D7            push a
0621   078C 11            mov a, b
0622   078D FA FD FF      lea d, [bp + -3] ; $i
0623   0790 2A            mov b, [d]
0624   0791 54            add a, b
0625   0792 27            mov b, a
0626   0793 E4            pop a
0627   0794             ; END TERMS
0628   0794 E7            pop d
0629   0795 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0630   0799 E4            pop a
0631   079A DA            push d
0632   079B 26 00 00      mov b, $0
0633   079E E7            pop d
0634   079F FD 3E         mov [d], bl
0635   07A1             ;; return dest; 
0636   07A1 FA 07 00      lea d, [bp + 7] ; $dest
0637   07A4 2A            mov b, [d]
0638   07A5 F9            leave
0639   07A6 09            ret
0640   07A7             
0641   07A7             strlen:
0642   07A7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0643   07AA             ; $length 
0644   07AA 52 02 00      sub sp, 2
0645   07AD             ;; length = 0; 
0646   07AD FA FF FF      lea d, [bp + -1] ; $length
0647   07B0 DA            push d
0648   07B1 26 00 00      mov b, $0
0649   07B4 E7            pop d
0650   07B5 FD 43         mov [d], b
0651   07B7             ;; while (str[length] != 0) { 
0652   07B7             _while12_cond:
0653   07B7 FA 05 00      lea d, [bp + 5] ; $str
0654   07BA FD 2A         mov d, [d]
0655   07BC D7            push a
0656   07BD DA            push d
0657   07BE FA FF FF      lea d, [bp + -1] ; $length
0658   07C1 2A            mov b, [d]
0659   07C2 E7            pop d
0660   07C3 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0661   07C7 E4            pop a
0662   07C8 32            mov bl, [d]
0663   07C9 A7 00         mov bh, 0
0664   07CB             ; START RELATIONAL
0665   07CB D7            push a
0666   07CC 11            mov a, b
0667   07CD 26 00 00      mov b, $0
0668   07D0 B0            cmp a, b
0669   07D1 FD 72         sneq ; !=
0670   07D3 E4            pop a
0671   07D4             ; END RELATIONAL
0672   07D4 C0 00 00      cmp b, 0
0673   07D7 C6 EC 07      je _while12_exit
0674   07DA             _while12_block:
0675   07DA             ;; length++; 
0676   07DA FA FF FF      lea d, [bp + -1] ; $length
0677   07DD 2A            mov b, [d]
0678   07DE FD 79         mov g, b
0679   07E0 FD 77         inc b
0680   07E2 FA FF FF      lea d, [bp + -1] ; $length
0681   07E5 FD 43         mov [d], b
0682   07E7 FD 27         mov b, g
0683   07E9 0A B7 07      jmp _while12_cond
0684   07EC             _while12_exit:
0685   07EC             ;; return length; 
0686   07EC FA FF FF      lea d, [bp + -1] ; $length
0687   07EF 2A            mov b, [d]
0688   07F0 F9            leave
0689   07F1 09            ret
0690   07F2             
0691   07F2             va_arg:
0692   07F2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0693   07F5             ; $val 
0694   07F5 52 02 00      sub sp, 2
0695   07F8             ;; if(size == 1){ 
0696   07F8             _if13_cond:
0697   07F8 FA 05 00      lea d, [bp + 5] ; $size
0698   07FB 2A            mov b, [d]
0699   07FC             ; START RELATIONAL
0700   07FC D7            push a
0701   07FD 11            mov a, b
0702   07FE 26 01 00      mov b, $1
0703   0801 B0            cmp a, b
0704   0802 FD 71         seq ; ==
0705   0804 E4            pop a
0706   0805             ; END RELATIONAL
0707   0805 C0 00 00      cmp b, 0
0708   0808 C6 24 08      je _if13_else
0709   080B             _if13_true:
0710   080B             ;; val = *(char*)arg->p; 
0711   080B FA FF FF      lea d, [bp + -1] ; $val
0712   080E DA            push d
0713   080F FA 07 00      lea d, [bp + 7] ; $arg
0714   0812 FD 2A         mov d, [d]
0715   0814 58 00 00      add d, 0
0716   0817 FD 14         clb
0717   0819 2A            mov b, [d]
0718   081A 74            mov d, b
0719   081B 32            mov bl, [d]
0720   081C A7 00         mov bh, 0
0721   081E E7            pop d
0722   081F FD 43         mov [d], b
0723   0821 0A 5A 08      jmp _if13_exit
0724   0824             _if13_else:
0725   0824             ;; if(size == 2){ 
0726   0824             _if14_cond:
0727   0824 FA 05 00      lea d, [bp + 5] ; $size
0728   0827 2A            mov b, [d]
0729   0828             ; START RELATIONAL
0730   0828 D7            push a
0731   0829 11            mov a, b
0732   082A 26 02 00      mov b, $2
0733   082D B0            cmp a, b
0734   082E FD 71         seq ; ==
0735   0830 E4            pop a
0736   0831             ; END RELATIONAL
0737   0831 C0 00 00      cmp b, 0
0738   0834 C6 4E 08      je _if14_else
0739   0837             _if14_true:
0740   0837             ;; val = *(int*)arg->p; 
0741   0837 FA FF FF      lea d, [bp + -1] ; $val
0742   083A DA            push d
0743   083B FA 07 00      lea d, [bp + 7] ; $arg
0744   083E FD 2A         mov d, [d]
0745   0840 58 00 00      add d, 0
0746   0843 FD 14         clb
0747   0845 2A            mov b, [d]
0748   0846 74            mov d, b
0749   0847 2A            mov b, [d]
0750   0848 E7            pop d
0751   0849 FD 43         mov [d], b
0752   084B 0A 5A 08      jmp _if14_exit
0753   084E             _if14_else:
0754   084E             ;; print("Unknown type size in va_arg() call. Size needs to be either 1 or 2."); 
0755   084E 26 03 25      mov b, __s2 ; "Unknown type size in va_arg() call. Size needs to be either 1 or 2."
0756   0851 FD AB         swp b
0757   0853 D8            push b
0758   0854 07 BC 0E      call print
0759   0857 51 02 00      add sp, 2
0760   085A             _if14_exit:
0761   085A             _if13_exit:
0762   085A             ;; arg->p = arg->p + size; 
0763   085A FA 07 00      lea d, [bp + 7] ; $arg
0764   085D FD 2A         mov d, [d]
0765   085F 58 00 00      add d, 0
0766   0862 FD 14         clb
0767   0864 DA            push d
0768   0865 FA 07 00      lea d, [bp + 7] ; $arg
0769   0868 FD 2A         mov d, [d]
0770   086A 58 00 00      add d, 0
0771   086D FD 14         clb
0772   086F 2A            mov b, [d]
0773   0870             ; START TERMS
0774   0870 D7            push a
0775   0871 11            mov a, b
0776   0872 FA 05 00      lea d, [bp + 5] ; $size
0777   0875 2A            mov b, [d]
0778   0876 54            add a, b
0779   0877 27            mov b, a
0780   0878 E4            pop a
0781   0879             ; END TERMS
0782   0879 E7            pop d
0783   087A FD 43         mov [d], b
0784   087C             ;; return val; 
0785   087C FA FF FF      lea d, [bp + -1] ; $val
0786   087F 2A            mov b, [d]
0787   0880 F9            leave
0788   0881 09            ret
0789   0882             
0790   0882             printf:
0791   0882 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0792   0885             ; $p 
0793   0885             ; $fp 
0794   0885             ; $i 
0795   0885 52 06 00      sub sp, 6
0796   0888             ;; fp = format; 
0797   0888 FA FD FF      lea d, [bp + -3] ; $fp
0798   088B DA            push d
0799   088C FA 05 00      lea d, [bp + 5] ; $format
0800   088F 2A            mov b, [d]
0801   0890 E7            pop d
0802   0891 FD 43         mov [d], b
0803   0893             ;; p = &format; 
0804   0893 FA FF FF      lea d, [bp + -1] ; $p
0805   0896 DA            push d
0806   0897 FA 05 00      lea d, [bp + 5] ; $format
0807   089A 2D            mov b, d
0808   089B E7            pop d
0809   089C FD 43         mov [d], b
0810   089E             ;; for(;;){ 
0811   089E             _for15_init:
0812   089E             _for15_cond:
0813   089E             _for15_block:
0814   089E             ;; if(!*fp) break; 
0815   089E             _if16_cond:
0816   089E FA FD FF      lea d, [bp + -3] ; $fp
0817   08A1 2A            mov b, [d]
0818   08A2 74            mov d, b
0819   08A3 32            mov bl, [d]
0820   08A4 A7 00         mov bh, 0
0821   08A6 C0 00 00      cmp b, 0
0822   08A9 FD 71         seq ; !
0823   08AB C0 00 00      cmp b, 0
0824   08AE C6 B7 08      je _if16_exit
0825   08B1             _if16_true:
0826   08B1             ;; break; 
0827   08B1 0A 01 0A      jmp _for15_exit ; for break
0828   08B4 0A B7 08      jmp _if16_exit
0829   08B7             _if16_exit:
0830   08B7             ;; if(*fp == '%'){ 
0831   08B7             _if17_cond:
0832   08B7 FA FD FF      lea d, [bp + -3] ; $fp
0833   08BA 2A            mov b, [d]
0834   08BB 74            mov d, b
0835   08BC 32            mov bl, [d]
0836   08BD A7 00         mov bh, 0
0837   08BF             ; START RELATIONAL
0838   08BF D7            push a
0839   08C0 11            mov a, b
0840   08C1 26 25 00      mov b, $25
0841   08C4 B0            cmp a, b
0842   08C5 FD 71         seq ; ==
0843   08C7 E4            pop a
0844   08C8             ; END RELATIONAL
0845   08C8 C0 00 00      cmp b, 0
0846   08CB C6 E0 09      je _if17_else
0847   08CE             _if17_true:
0848   08CE             ;; fp++; 
0849   08CE FA FD FF      lea d, [bp + -3] ; $fp
0850   08D1 2A            mov b, [d]
0851   08D2 FD 79         mov g, b
0852   08D4 FD 77         inc b
0853   08D6 FA FD FF      lea d, [bp + -3] ; $fp
0854   08D9 FD 43         mov [d], b
0855   08DB FD 27         mov b, g
0856   08DD             ;; switch(*fp){ 
0857   08DD             _switch18_expr:
0858   08DD FA FD FF      lea d, [bp + -3] ; $fp
0859   08E0 2A            mov b, [d]
0860   08E1 74            mov d, b
0861   08E2 32            mov bl, [d]
0862   08E3 A7 00         mov bh, 0
0863   08E5             _switch18_comparisons:
0864   08E5 C1 64         cmp bl, $64
0865   08E7 C6 09 09      je _switch18_case0
0866   08EA C1 69         cmp bl, $69
0867   08EC C6 09 09      je _switch18_case1
0868   08EF C1 75         cmp bl, $75
0869   08F1 C6 2E 09      je _switch18_case2
0870   08F4 C1 78         cmp bl, $78
0871   08F6 C6 53 09      je _switch18_case3
0872   08F9 C1 63         cmp bl, $63
0873   08FB C6 78 09      je _switch18_case4
0874   08FE C1 73         cmp bl, $73
0875   0900 C6 9D 09      je _switch18_case5
0876   0903 0A C2 09      jmp _switch18_default
0877   0906 0A CE 09      jmp _switch18_exit
0878   0909             _switch18_case0:
0879   0909             _switch18_case1:
0880   0909             ;; p = p - 2; 
0881   0909 FA FF FF      lea d, [bp + -1] ; $p
0882   090C DA            push d
0883   090D FA FF FF      lea d, [bp + -1] ; $p
0884   0910 2A            mov b, [d]
0885   0911             ; START TERMS
0886   0911 D7            push a
0887   0912 11            mov a, b
0888   0913 26 02 00      mov b, $2
0889   0916 60            sub a, b
0890   0917 27            mov b, a
0891   0918 E4            pop a
0892   0919             ; END TERMS
0893   0919 E7            pop d
0894   091A FD 43         mov [d], b
0895   091C             ;; prints(*(int*)p); 
0896   091C FA FF FF      lea d, [bp + -1] ; $p
0897   091F 2A            mov b, [d]
0898   0920 74            mov d, b
0899   0921 2A            mov b, [d]
0900   0922 FD AB         swp b
0901   0924 D8            push b
0902   0925 07 93 0C      call prints
0903   0928 51 02 00      add sp, 2
0904   092B             ;; break; 
0905   092B 0A CE 09      jmp _switch18_exit ; case break
0906   092E             _switch18_case2:
0907   092E             ;; p = p - 2; 
0908   092E FA FF FF      lea d, [bp + -1] ; $p
0909   0931 DA            push d
0910   0932 FA FF FF      lea d, [bp + -1] ; $p
0911   0935 2A            mov b, [d]
0912   0936             ; START TERMS
0913   0936 D7            push a
0914   0937 11            mov a, b
0915   0938 26 02 00      mov b, $2
0916   093B 60            sub a, b
0917   093C 27            mov b, a
0918   093D E4            pop a
0919   093E             ; END TERMS
0920   093E E7            pop d
0921   093F FD 43         mov [d], b
0922   0941             ;; printu(*(unsigned int*)p); 
0923   0941 FA FF FF      lea d, [bp + -1] ; $p
0924   0944 2A            mov b, [d]
0925   0945 74            mov d, b
0926   0946 2A            mov b, [d]
0927   0947 FD AB         swp b
0928   0949 D8            push b
0929   094A 07 88 0D      call printu
0930   094D 51 02 00      add sp, 2
0931   0950             ;; break; 
0932   0950 0A CE 09      jmp _switch18_exit ; case break
0933   0953             _switch18_case3:
0934   0953             ;; p = p - 2; 
0935   0953 FA FF FF      lea d, [bp + -1] ; $p
0936   0956 DA            push d
0937   0957 FA FF FF      lea d, [bp + -1] ; $p
0938   095A 2A            mov b, [d]
0939   095B             ; START TERMS
0940   095B D7            push a
0941   095C 11            mov a, b
0942   095D 26 02 00      mov b, $2
0943   0960 60            sub a, b
0944   0961 27            mov b, a
0945   0962 E4            pop a
0946   0963             ; END TERMS
0947   0963 E7            pop d
0948   0964 FD 43         mov [d], b
0949   0966             ;; printx16(*(unsigned int*)p); 
0950   0966 FA FF FF      lea d, [bp + -1] ; $p
0951   0969 2A            mov b, [d]
0952   096A 74            mov d, b
0953   096B 2A            mov b, [d]
0954   096C FD AB         swp b
0955   096E D8            push b
0956   096F 07 03 0A      call printx16
0957   0972 51 02 00      add sp, 2
0958   0975             ;; break; 
0959   0975 0A CE 09      jmp _switch18_exit ; case break
0960   0978             _switch18_case4:
0961   0978             ;; p = p - 2; 
0962   0978 FA FF FF      lea d, [bp + -1] ; $p
0963   097B DA            push d
0964   097C FA FF FF      lea d, [bp + -1] ; $p
0965   097F 2A            mov b, [d]
0966   0980             ; START TERMS
0967   0980 D7            push a
0968   0981 11            mov a, b
0969   0982 26 02 00      mov b, $2
0970   0985 60            sub a, b
0971   0986 27            mov b, a
0972   0987 E4            pop a
0973   0988             ; END TERMS
0974   0988 E7            pop d
0975   0989 FD 43         mov [d], b
0976   098B             ;; putchar(*(char*)p); 
0977   098B FA FF FF      lea d, [bp + -1] ; $p
0978   098E 2A            mov b, [d]
0979   098F 74            mov d, b
0980   0990 32            mov bl, [d]
0981   0991 A7 00         mov bh, 0
0982   0993 DD            push bl
0983   0994 07 74 0E      call putchar
0984   0997 51 01 00      add sp, 1
0985   099A             ;; break; 
0986   099A 0A CE 09      jmp _switch18_exit ; case break
0987   099D             _switch18_case5:
0988   099D             ;; p = p - 2; 
0989   099D FA FF FF      lea d, [bp + -1] ; $p
0990   09A0 DA            push d
0991   09A1 FA FF FF      lea d, [bp + -1] ; $p
0992   09A4 2A            mov b, [d]
0993   09A5             ; START TERMS
0994   09A5 D7            push a
0995   09A6 11            mov a, b
0996   09A7 26 02 00      mov b, $2
0997   09AA 60            sub a, b
0998   09AB 27            mov b, a
0999   09AC E4            pop a
1000   09AD             ; END TERMS
1001   09AD E7            pop d
1002   09AE FD 43         mov [d], b
1003   09B0             ;; print(*(char**)p); 
1004   09B0 FA FF FF      lea d, [bp + -1] ; $p
1005   09B3 2A            mov b, [d]
1006   09B4 74            mov d, b
1007   09B5 2A            mov b, [d]
1008   09B6 FD AB         swp b
1009   09B8 D8            push b
1010   09B9 07 BC 0E      call print
1011   09BC 51 02 00      add sp, 2
1012   09BF             ;; break; 
1013   09BF 0A CE 09      jmp _switch18_exit ; case break
1014   09C2             _switch18_default:
1015   09C2             ;; print("Error: Unknown argument type.\n"); 
1016   09C2 26 47 25      mov b, __s3 ; "Error: Unknown argument type.\n"
1017   09C5 FD AB         swp b
1018   09C7 D8            push b
1019   09C8 07 BC 0E      call print
1020   09CB 51 02 00      add sp, 2
1021   09CE             _switch18_exit:
1022   09CE             ;; fp++; 
1023   09CE FA FD FF      lea d, [bp + -3] ; $fp
1024   09D1 2A            mov b, [d]
1025   09D2 FD 79         mov g, b
1026   09D4 FD 77         inc b
1027   09D6 FA FD FF      lea d, [bp + -3] ; $fp
1028   09D9 FD 43         mov [d], b
1029   09DB FD 27         mov b, g
1030   09DD 0A FE 09      jmp _if17_exit
1031   09E0             _if17_else:
1032   09E0             ;; putchar(*fp); 
1033   09E0 FA FD FF      lea d, [bp + -3] ; $fp
1034   09E3 2A            mov b, [d]
1035   09E4 74            mov d, b
1036   09E5 32            mov bl, [d]
1037   09E6 A7 00         mov bh, 0
1038   09E8 DD            push bl
1039   09E9 07 74 0E      call putchar
1040   09EC 51 01 00      add sp, 1
1041   09EF             ;; fp++; 
1042   09EF FA FD FF      lea d, [bp + -3] ; $fp
1043   09F2 2A            mov b, [d]
1044   09F3 FD 79         mov g, b
1045   09F5 FD 77         inc b
1046   09F7 FA FD FF      lea d, [bp + -3] ; $fp
1047   09FA FD 43         mov [d], b
1048   09FC FD 27         mov b, g
1049   09FE             _if17_exit:
1050   09FE             _for15_update:
1051   09FE 0A 9E 08      jmp _for15_cond
1052   0A01             _for15_exit:
1053   0A01 F9            leave
1054   0A02 09            ret
1055   0A03             
1056   0A03             printx16:
1057   0A03 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1058   0A06             
1059   0A06             ; --- BEGIN INLINE ASM BLOCK
1060   0A06 FA 05 00      lea d, [bp + 5] ; $hex
1061   0A09 2A            mov b, [d]
1062   0A0A 07 3D 12      call print_u16x
1063   0A0D             ; --- END INLINE ASM BLOCK
1064   0A0D             
1065   0A0D F9            leave
1066   0A0E 09            ret
1067   0A0F             
1068   0A0F             printx8:
1069   0A0F F8 00 00      enter 0 ; (push bp; mov bp, sp)
1070   0A12             
1071   0A12             ; --- BEGIN INLINE ASM BLOCK
1072   0A12 FA 05 00      lea d, [bp + 5] ; $hex
1073   0A15 32            mov bl, [d]
1074   0A16 07 81 12      call print_u8x
1075   0A19             ; --- END INLINE ASM BLOCK
1076   0A19             
1077   0A19 F9            leave
1078   0A1A 09            ret
1079   0A1B             
1080   0A1B             hex_to_int:
1081   0A1B F8 00 00      enter 0 ; (push bp; mov bp, sp)
1082   0A1E             ; $value 
1083   0A1E 10 00 00      mov a, $0
1084   0A21 45 FF FF      mov [bp + -1], a
1085   0A24             ; $i 
1086   0A24             ; $hex_char 
1087   0A24             ; $len 
1088   0A24 52 07 00      sub sp, 7
1089   0A27             ;; len = strlen(hex_string); 
1090   0A27 FA FA FF      lea d, [bp + -6] ; $len
1091   0A2A DA            push d
1092   0A2B FA 05 00      lea d, [bp + 5] ; $hex_string
1093   0A2E 2A            mov b, [d]
1094   0A2F FD AB         swp b
1095   0A31 D8            push b
1096   0A32 07 A7 07      call strlen
1097   0A35 51 02 00      add sp, 2
1098   0A38 E7            pop d
1099   0A39 FD 43         mov [d], b
1100   0A3B             ;; for (i = 0; i < len; i++) { 
1101   0A3B             _for19_init:
1102   0A3B FA FD FF      lea d, [bp + -3] ; $i
1103   0A3E DA            push d
1104   0A3F 26 00 00      mov b, $0
1105   0A42 E7            pop d
1106   0A43 FD 43         mov [d], b
1107   0A45             _for19_cond:
1108   0A45 FA FD FF      lea d, [bp + -3] ; $i
1109   0A48 2A            mov b, [d]
1110   0A49             ; START RELATIONAL
1111   0A49 D7            push a
1112   0A4A 11            mov a, b
1113   0A4B FA FA FF      lea d, [bp + -6] ; $len
1114   0A4E 2A            mov b, [d]
1115   0A4F B0            cmp a, b
1116   0A50 FD 73         slt ; < 
1117   0A52 E4            pop a
1118   0A53             ; END RELATIONAL
1119   0A53 C0 00 00      cmp b, 0
1120   0A56 C6 5B 0B      je _for19_exit
1121   0A59             _for19_block:
1122   0A59             ;; hex_char = hex_string[i]; 
1123   0A59 FA FC FF      lea d, [bp + -4] ; $hex_char
1124   0A5C DA            push d
1125   0A5D FA 05 00      lea d, [bp + 5] ; $hex_string
1126   0A60 FD 2A         mov d, [d]
1127   0A62 D7            push a
1128   0A63 DA            push d
1129   0A64 FA FD FF      lea d, [bp + -3] ; $i
1130   0A67 2A            mov b, [d]
1131   0A68 E7            pop d
1132   0A69 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1133   0A6D E4            pop a
1134   0A6E 32            mov bl, [d]
1135   0A6F A7 00         mov bh, 0
1136   0A71 E7            pop d
1137   0A72 FD 3E         mov [d], bl
1138   0A74             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1139   0A74             _if20_cond:
1140   0A74 FA FC FF      lea d, [bp + -4] ; $hex_char
1141   0A77 32            mov bl, [d]
1142   0A78 A7 00         mov bh, 0
1143   0A7A             ; START RELATIONAL
1144   0A7A D7            push a
1145   0A7B 11            mov a, b
1146   0A7C 26 61 00      mov b, $61
1147   0A7F B0            cmp a, b
1148   0A80 FD 80         sge ; >=
1149   0A82 E4            pop a
1150   0A83             ; END RELATIONAL
1151   0A83 D7            push a
1152   0A84 11            mov a, b
1153   0A85 FA FC FF      lea d, [bp + -4] ; $hex_char
1154   0A88 32            mov bl, [d]
1155   0A89 A7 00         mov bh, 0
1156   0A8B             ; START RELATIONAL
1157   0A8B D7            push a
1158   0A8C 11            mov a, b
1159   0A8D 26 66 00      mov b, $66
1160   0A90 B0            cmp a, b
1161   0A91 FD 74         sle ; <=
1162   0A93 E4            pop a
1163   0A94             ; END RELATIONAL
1164   0A94 FD A7         sand a, b ; &&
1165   0A96 E4            pop a
1166   0A97 C0 00 00      cmp b, 0
1167   0A9A C6 CB 0A      je _if20_else
1168   0A9D             _if20_true:
1169   0A9D             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1170   0A9D FA FF FF      lea d, [bp + -1] ; $value
1171   0AA0 DA            push d
1172   0AA1 FA FF FF      lea d, [bp + -1] ; $value
1173   0AA4 2A            mov b, [d]
1174   0AA5             ; START FACTORS
1175   0AA5 D7            push a
1176   0AA6 11            mov a, b
1177   0AA7 26 10 00      mov b, $10
1178   0AAA AC            mul a, b ; *
1179   0AAB 11            mov a, b
1180   0AAC 27            mov b, a
1181   0AAD E4            pop a
1182   0AAE             ; END FACTORS
1183   0AAE             ; START TERMS
1184   0AAE D7            push a
1185   0AAF 11            mov a, b
1186   0AB0 FA FC FF      lea d, [bp + -4] ; $hex_char
1187   0AB3 32            mov bl, [d]
1188   0AB4 A7 00         mov bh, 0
1189   0AB6             ; START TERMS
1190   0AB6 D7            push a
1191   0AB7 11            mov a, b
1192   0AB8 26 61 00      mov b, $61
1193   0ABB 60            sub a, b
1194   0ABC 26 0A 00      mov b, $a
1195   0ABF 54            add a, b
1196   0AC0 27            mov b, a
1197   0AC1 E4            pop a
1198   0AC2             ; END TERMS
1199   0AC2 54            add a, b
1200   0AC3 27            mov b, a
1201   0AC4 E4            pop a
1202   0AC5             ; END TERMS
1203   0AC5 E7            pop d
1204   0AC6 FD 43         mov [d], b
1205   0AC8 0A 49 0B      jmp _if20_exit
1206   0ACB             _if20_else:
1207   0ACB             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1208   0ACB             _if21_cond:
1209   0ACB FA FC FF      lea d, [bp + -4] ; $hex_char
1210   0ACE 32            mov bl, [d]
1211   0ACF A7 00         mov bh, 0
1212   0AD1             ; START RELATIONAL
1213   0AD1 D7            push a
1214   0AD2 11            mov a, b
1215   0AD3 26 41 00      mov b, $41
1216   0AD6 B0            cmp a, b
1217   0AD7 FD 80         sge ; >=
1218   0AD9 E4            pop a
1219   0ADA             ; END RELATIONAL
1220   0ADA D7            push a
1221   0ADB 11            mov a, b
1222   0ADC FA FC FF      lea d, [bp + -4] ; $hex_char
1223   0ADF 32            mov bl, [d]
1224   0AE0 A7 00         mov bh, 0
1225   0AE2             ; START RELATIONAL
1226   0AE2 D7            push a
1227   0AE3 11            mov a, b
1228   0AE4 26 46 00      mov b, $46
1229   0AE7 B0            cmp a, b
1230   0AE8 FD 74         sle ; <=
1231   0AEA E4            pop a
1232   0AEB             ; END RELATIONAL
1233   0AEB FD A7         sand a, b ; &&
1234   0AED E4            pop a
1235   0AEE C0 00 00      cmp b, 0
1236   0AF1 C6 22 0B      je _if21_else
1237   0AF4             _if21_true:
1238   0AF4             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1239   0AF4 FA FF FF      lea d, [bp + -1] ; $value
1240   0AF7 DA            push d
1241   0AF8 FA FF FF      lea d, [bp + -1] ; $value
1242   0AFB 2A            mov b, [d]
1243   0AFC             ; START FACTORS
1244   0AFC D7            push a
1245   0AFD 11            mov a, b
1246   0AFE 26 10 00      mov b, $10
1247   0B01 AC            mul a, b ; *
1248   0B02 11            mov a, b
1249   0B03 27            mov b, a
1250   0B04 E4            pop a
1251   0B05             ; END FACTORS
1252   0B05             ; START TERMS
1253   0B05 D7            push a
1254   0B06 11            mov a, b
1255   0B07 FA FC FF      lea d, [bp + -4] ; $hex_char
1256   0B0A 32            mov bl, [d]
1257   0B0B A7 00         mov bh, 0
1258   0B0D             ; START TERMS
1259   0B0D D7            push a
1260   0B0E 11            mov a, b
1261   0B0F 26 41 00      mov b, $41
1262   0B12 60            sub a, b
1263   0B13 26 0A 00      mov b, $a
1264   0B16 54            add a, b
1265   0B17 27            mov b, a
1266   0B18 E4            pop a
1267   0B19             ; END TERMS
1268   0B19 54            add a, b
1269   0B1A 27            mov b, a
1270   0B1B E4            pop a
1271   0B1C             ; END TERMS
1272   0B1C E7            pop d
1273   0B1D FD 43         mov [d], b
1274   0B1F 0A 49 0B      jmp _if21_exit
1275   0B22             _if21_else:
1276   0B22             ;; value = (value * 16) + (hex_char - '0'); 
1277   0B22 FA FF FF      lea d, [bp + -1] ; $value
1278   0B25 DA            push d
1279   0B26 FA FF FF      lea d, [bp + -1] ; $value
1280   0B29 2A            mov b, [d]
1281   0B2A             ; START FACTORS
1282   0B2A D7            push a
1283   0B2B 11            mov a, b
1284   0B2C 26 10 00      mov b, $10
1285   0B2F AC            mul a, b ; *
1286   0B30 11            mov a, b
1287   0B31 27            mov b, a
1288   0B32 E4            pop a
1289   0B33             ; END FACTORS
1290   0B33             ; START TERMS
1291   0B33 D7            push a
1292   0B34 11            mov a, b
1293   0B35 FA FC FF      lea d, [bp + -4] ; $hex_char
1294   0B38 32            mov bl, [d]
1295   0B39 A7 00         mov bh, 0
1296   0B3B             ; START TERMS
1297   0B3B D7            push a
1298   0B3C 11            mov a, b
1299   0B3D 26 30 00      mov b, $30
1300   0B40 60            sub a, b
1301   0B41 27            mov b, a
1302   0B42 E4            pop a
1303   0B43             ; END TERMS
1304   0B43 54            add a, b
1305   0B44 27            mov b, a
1306   0B45 E4            pop a
1307   0B46             ; END TERMS
1308   0B46 E7            pop d
1309   0B47 FD 43         mov [d], b
1310   0B49             _if21_exit:
1311   0B49             _if20_exit:
1312   0B49             _for19_update:
1313   0B49 FA FD FF      lea d, [bp + -3] ; $i
1314   0B4C 2A            mov b, [d]
1315   0B4D FD 79         mov g, b
1316   0B4F FD 77         inc b
1317   0B51 FA FD FF      lea d, [bp + -3] ; $i
1318   0B54 FD 43         mov [d], b
1319   0B56 FD 27         mov b, g
1320   0B58 0A 45 0A      jmp _for19_cond
1321   0B5B             _for19_exit:
1322   0B5B             ;; return value; 
1323   0B5B FA FF FF      lea d, [bp + -1] ; $value
1324   0B5E 2A            mov b, [d]
1325   0B5F F9            leave
1326   0B60 09            ret
1327   0B61             
1328   0B61             atoi:
1329   0B61 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1330   0B64             ; $result 
1331   0B64 10 00 00      mov a, $0
1332   0B67 45 FF FF      mov [bp + -1], a
1333   0B6A             ; $sign 
1334   0B6A 10 01 00      mov a, $1
1335   0B6D 45 FD FF      mov [bp + -3], a
1336   0B70 52 04 00      sub sp, 4
1337   0B73             ;; while (*str == ' ') str++; 
1338   0B73             _while22_cond:
1339   0B73 FA 05 00      lea d, [bp + 5] ; $str
1340   0B76 2A            mov b, [d]
1341   0B77 74            mov d, b
1342   0B78 32            mov bl, [d]
1343   0B79 A7 00         mov bh, 0
1344   0B7B             ; START RELATIONAL
1345   0B7B D7            push a
1346   0B7C 11            mov a, b
1347   0B7D 26 20 00      mov b, $20
1348   0B80 B0            cmp a, b
1349   0B81 FD 71         seq ; ==
1350   0B83 E4            pop a
1351   0B84             ; END RELATIONAL
1352   0B84 C0 00 00      cmp b, 0
1353   0B87 C6 9C 0B      je _while22_exit
1354   0B8A             _while22_block:
1355   0B8A             ;; str++; 
1356   0B8A FA 05 00      lea d, [bp + 5] ; $str
1357   0B8D 2A            mov b, [d]
1358   0B8E FD 79         mov g, b
1359   0B90 FD 77         inc b
1360   0B92 FA 05 00      lea d, [bp + 5] ; $str
1361   0B95 FD 43         mov [d], b
1362   0B97 FD 27         mov b, g
1363   0B99 0A 73 0B      jmp _while22_cond
1364   0B9C             _while22_exit:
1365   0B9C             ;; if (*str == '-' || *str == '+') { 
1366   0B9C             _if23_cond:
1367   0B9C FA 05 00      lea d, [bp + 5] ; $str
1368   0B9F 2A            mov b, [d]
1369   0BA0 74            mov d, b
1370   0BA1 32            mov bl, [d]
1371   0BA2 A7 00         mov bh, 0
1372   0BA4             ; START RELATIONAL
1373   0BA4 D7            push a
1374   0BA5 11            mov a, b
1375   0BA6 26 2D 00      mov b, $2d
1376   0BA9 B0            cmp a, b
1377   0BAA FD 71         seq ; ==
1378   0BAC E4            pop a
1379   0BAD             ; END RELATIONAL
1380   0BAD D7            push a
1381   0BAE 11            mov a, b
1382   0BAF FA 05 00      lea d, [bp + 5] ; $str
1383   0BB2 2A            mov b, [d]
1384   0BB3 74            mov d, b
1385   0BB4 32            mov bl, [d]
1386   0BB5 A7 00         mov bh, 0
1387   0BB7             ; START RELATIONAL
1388   0BB7 D7            push a
1389   0BB8 11            mov a, b
1390   0BB9 26 2B 00      mov b, $2b
1391   0BBC B0            cmp a, b
1392   0BBD FD 71         seq ; ==
1393   0BBF E4            pop a
1394   0BC0             ; END RELATIONAL
1395   0BC0 FD A8         sor a, b ; ||
1396   0BC2 E4            pop a
1397   0BC3 C0 00 00      cmp b, 0
1398   0BC6 C6 01 0C      je _if23_exit
1399   0BC9             _if23_true:
1400   0BC9             ;; if (*str == '-') sign = -1; 
1401   0BC9             _if24_cond:
1402   0BC9 FA 05 00      lea d, [bp + 5] ; $str
1403   0BCC 2A            mov b, [d]
1404   0BCD 74            mov d, b
1405   0BCE 32            mov bl, [d]
1406   0BCF A7 00         mov bh, 0
1407   0BD1             ; START RELATIONAL
1408   0BD1 D7            push a
1409   0BD2 11            mov a, b
1410   0BD3 26 2D 00      mov b, $2d
1411   0BD6 B0            cmp a, b
1412   0BD7 FD 71         seq ; ==
1413   0BD9 E4            pop a
1414   0BDA             ; END RELATIONAL
1415   0BDA C0 00 00      cmp b, 0
1416   0BDD C6 EF 0B      je _if24_exit
1417   0BE0             _if24_true:
1418   0BE0             ;; sign = -1; 
1419   0BE0 FA FD FF      lea d, [bp + -3] ; $sign
1420   0BE3 DA            push d
1421   0BE4 26 01 00      mov b, $1
1422   0BE7 FD 97         neg b
1423   0BE9 E7            pop d
1424   0BEA FD 43         mov [d], b
1425   0BEC 0A EF 0B      jmp _if24_exit
1426   0BEF             _if24_exit:
1427   0BEF             ;; str++; 
1428   0BEF FA 05 00      lea d, [bp + 5] ; $str
1429   0BF2 2A            mov b, [d]
1430   0BF3 FD 79         mov g, b
1431   0BF5 FD 77         inc b
1432   0BF7 FA 05 00      lea d, [bp + 5] ; $str
1433   0BFA FD 43         mov [d], b
1434   0BFC FD 27         mov b, g
1435   0BFE 0A 01 0C      jmp _if23_exit
1436   0C01             _if23_exit:
1437   0C01             ;; while (*str >= '0' && *str <= '9') { 
1438   0C01             _while25_cond:
1439   0C01 FA 05 00      lea d, [bp + 5] ; $str
1440   0C04 2A            mov b, [d]
1441   0C05 74            mov d, b
1442   0C06 32            mov bl, [d]
1443   0C07 A7 00         mov bh, 0
1444   0C09             ; START RELATIONAL
1445   0C09 D7            push a
1446   0C0A 11            mov a, b
1447   0C0B 26 30 00      mov b, $30
1448   0C0E B0            cmp a, b
1449   0C0F FD 80         sge ; >=
1450   0C11 E4            pop a
1451   0C12             ; END RELATIONAL
1452   0C12 D7            push a
1453   0C13 11            mov a, b
1454   0C14 FA 05 00      lea d, [bp + 5] ; $str
1455   0C17 2A            mov b, [d]
1456   0C18 74            mov d, b
1457   0C19 32            mov bl, [d]
1458   0C1A A7 00         mov bh, 0
1459   0C1C             ; START RELATIONAL
1460   0C1C D7            push a
1461   0C1D 11            mov a, b
1462   0C1E 26 39 00      mov b, $39
1463   0C21 B0            cmp a, b
1464   0C22 FD 74         sle ; <=
1465   0C24 E4            pop a
1466   0C25             ; END RELATIONAL
1467   0C25 FD A7         sand a, b ; &&
1468   0C27 E4            pop a
1469   0C28 C0 00 00      cmp b, 0
1470   0C2B C6 69 0C      je _while25_exit
1471   0C2E             _while25_block:
1472   0C2E             ;; result = result * 10 + (*str - '0'); 
1473   0C2E FA FF FF      lea d, [bp + -1] ; $result
1474   0C31 DA            push d
1475   0C32 FA FF FF      lea d, [bp + -1] ; $result
1476   0C35 2A            mov b, [d]
1477   0C36             ; START FACTORS
1478   0C36 D7            push a
1479   0C37 11            mov a, b
1480   0C38 26 0A 00      mov b, $a
1481   0C3B AC            mul a, b ; *
1482   0C3C 11            mov a, b
1483   0C3D 27            mov b, a
1484   0C3E E4            pop a
1485   0C3F             ; END FACTORS
1486   0C3F             ; START TERMS
1487   0C3F D7            push a
1488   0C40 11            mov a, b
1489   0C41 FA 05 00      lea d, [bp + 5] ; $str
1490   0C44 2A            mov b, [d]
1491   0C45 74            mov d, b
1492   0C46 32            mov bl, [d]
1493   0C47 A7 00         mov bh, 0
1494   0C49             ; START TERMS
1495   0C49 D7            push a
1496   0C4A 11            mov a, b
1497   0C4B 26 30 00      mov b, $30
1498   0C4E 60            sub a, b
1499   0C4F 27            mov b, a
1500   0C50 E4            pop a
1501   0C51             ; END TERMS
1502   0C51 54            add a, b
1503   0C52 27            mov b, a
1504   0C53 E4            pop a
1505   0C54             ; END TERMS
1506   0C54 E7            pop d
1507   0C55 FD 43         mov [d], b
1508   0C57             ;; str++; 
1509   0C57 FA 05 00      lea d, [bp + 5] ; $str
1510   0C5A 2A            mov b, [d]
1511   0C5B FD 79         mov g, b
1512   0C5D FD 77         inc b
1513   0C5F FA 05 00      lea d, [bp + 5] ; $str
1514   0C62 FD 43         mov [d], b
1515   0C64 FD 27         mov b, g
1516   0C66 0A 01 0C      jmp _while25_cond
1517   0C69             _while25_exit:
1518   0C69             ;; return sign * result; 
1519   0C69 FA FD FF      lea d, [bp + -3] ; $sign
1520   0C6C 2A            mov b, [d]
1521   0C6D             ; START FACTORS
1522   0C6D D7            push a
1523   0C6E 11            mov a, b
1524   0C6F FA FF FF      lea d, [bp + -1] ; $result
1525   0C72 2A            mov b, [d]
1526   0C73 AC            mul a, b ; *
1527   0C74 11            mov a, b
1528   0C75 27            mov b, a
1529   0C76 E4            pop a
1530   0C77             ; END FACTORS
1531   0C77 F9            leave
1532   0C78 09            ret
1533   0C79             
1534   0C79             gets:
1535   0C79 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1536   0C7C             
1537   0C7C             ; --- BEGIN INLINE ASM BLOCK
1538   0C7C FA 05 00      lea d, [bp + 5] ; $s
1539   0C7F 15            mov a, [d]
1540   0C80 3C            mov d, a
1541   0C81 07 A2 10      call _gets
1542   0C84             ; --- END INLINE ASM BLOCK
1543   0C84             
1544   0C84             ;; return strlen(s); 
1545   0C84 FA 05 00      lea d, [bp + 5] ; $s
1546   0C87 2A            mov b, [d]
1547   0C88 FD AB         swp b
1548   0C8A D8            push b
1549   0C8B 07 A7 07      call strlen
1550   0C8E 51 02 00      add sp, 2
1551   0C91 F9            leave
1552   0C92 09            ret
1553   0C93             
1554   0C93             prints:
1555   0C93 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1556   0C96             ; $digits 
1557   0C96             ; $i 
1558   0C96 10 00 00      mov a, $0
1559   0C99 45 FA FF      mov [bp + -6], a
1560   0C9C 52 07 00      sub sp, 7
1561   0C9F             ;; if (num < 0) { 
1562   0C9F             _if26_cond:
1563   0C9F FA 05 00      lea d, [bp + 5] ; $num
1564   0CA2 2A            mov b, [d]
1565   0CA3             ; START RELATIONAL
1566   0CA3 D7            push a
1567   0CA4 11            mov a, b
1568   0CA5 26 00 00      mov b, $0
1569   0CA8 B0            cmp a, b
1570   0CA9 FD 73         slt ; < 
1571   0CAB E4            pop a
1572   0CAC             ; END RELATIONAL
1573   0CAC C0 00 00      cmp b, 0
1574   0CAF C6 CC 0C      je _if26_else
1575   0CB2             _if26_true:
1576   0CB2             ;; putchar('-'); 
1577   0CB2 26 2D 00      mov b, $2d
1578   0CB5 DD            push bl
1579   0CB6 07 74 0E      call putchar
1580   0CB9 51 01 00      add sp, 1
1581   0CBC             ;; num = -num; 
1582   0CBC FA 05 00      lea d, [bp + 5] ; $num
1583   0CBF DA            push d
1584   0CC0 FA 05 00      lea d, [bp + 5] ; $num
1585   0CC3 2A            mov b, [d]
1586   0CC4 FD 97         neg b
1587   0CC6 E7            pop d
1588   0CC7 FD 43         mov [d], b
1589   0CC9 0A EE 0C      jmp _if26_exit
1590   0CCC             _if26_else:
1591   0CCC             ;; if (num == 0) { 
1592   0CCC             _if27_cond:
1593   0CCC FA 05 00      lea d, [bp + 5] ; $num
1594   0CCF 2A            mov b, [d]
1595   0CD0             ; START RELATIONAL
1596   0CD0 D7            push a
1597   0CD1 11            mov a, b
1598   0CD2 26 00 00      mov b, $0
1599   0CD5 B0            cmp a, b
1600   0CD6 FD 71         seq ; ==
1601   0CD8 E4            pop a
1602   0CD9             ; END RELATIONAL
1603   0CD9 C0 00 00      cmp b, 0
1604   0CDC C6 EE 0C      je _if27_exit
1605   0CDF             _if27_true:
1606   0CDF             ;; putchar('0'); 
1607   0CDF 26 30 00      mov b, $30
1608   0CE2 DD            push bl
1609   0CE3 07 74 0E      call putchar
1610   0CE6 51 01 00      add sp, 1
1611   0CE9             ;; return; 
1612   0CE9 F9            leave
1613   0CEA 09            ret
1614   0CEB 0A EE 0C      jmp _if27_exit
1615   0CEE             _if27_exit:
1616   0CEE             _if26_exit:
1617   0CEE             ;; while (num > 0) { 
1618   0CEE             _while28_cond:
1619   0CEE FA 05 00      lea d, [bp + 5] ; $num
1620   0CF1 2A            mov b, [d]
1621   0CF2             ; START RELATIONAL
1622   0CF2 D7            push a
1623   0CF3 11            mov a, b
1624   0CF4 26 00 00      mov b, $0
1625   0CF7 B0            cmp a, b
1626   0CF8 FD 7F         sgt ; >
1627   0CFA E4            pop a
1628   0CFB             ; END RELATIONAL
1629   0CFB C0 00 00      cmp b, 0
1630   0CFE C6 4B 0D      je _while28_exit
1631   0D01             _while28_block:
1632   0D01             ;; digits[i] = '0' + (num % 10); 
1633   0D01 FA FC FF      lea d, [bp + -4] ; $digits
1634   0D04 D7            push a
1635   0D05 DA            push d
1636   0D06 FA FA FF      lea d, [bp + -6] ; $i
1637   0D09 2A            mov b, [d]
1638   0D0A E7            pop d
1639   0D0B 5A            add d, b
1640   0D0C E4            pop a
1641   0D0D DA            push d
1642   0D0E 26 30 00      mov b, $30
1643   0D11             ; START TERMS
1644   0D11 D7            push a
1645   0D12 11            mov a, b
1646   0D13 FA 05 00      lea d, [bp + 5] ; $num
1647   0D16 2A            mov b, [d]
1648   0D17             ; START FACTORS
1649   0D17 D7            push a
1650   0D18 11            mov a, b
1651   0D19 26 0A 00      mov b, $a
1652   0D1C AE            div a, b ; 
1653   0D1D 11            mov a, b
1654   0D1E 27            mov b, a
1655   0D1F E4            pop a
1656   0D20             ; END FACTORS
1657   0D20 54            add a, b
1658   0D21 27            mov b, a
1659   0D22 E4            pop a
1660   0D23             ; END TERMS
1661   0D23 E7            pop d
1662   0D24 FD 3E         mov [d], bl
1663   0D26             ;; num = num / 10; 
1664   0D26 FA 05 00      lea d, [bp + 5] ; $num
1665   0D29 DA            push d
1666   0D2A FA 05 00      lea d, [bp + 5] ; $num
1667   0D2D 2A            mov b, [d]
1668   0D2E             ; START FACTORS
1669   0D2E D7            push a
1670   0D2F 11            mov a, b
1671   0D30 26 0A 00      mov b, $a
1672   0D33 AE            div a, b
1673   0D34 27            mov b, a
1674   0D35 E4            pop a
1675   0D36             ; END FACTORS
1676   0D36 E7            pop d
1677   0D37 FD 43         mov [d], b
1678   0D39             ;; i++; 
1679   0D39 FA FA FF      lea d, [bp + -6] ; $i
1680   0D3C 2A            mov b, [d]
1681   0D3D FD 79         mov g, b
1682   0D3F FD 77         inc b
1683   0D41 FA FA FF      lea d, [bp + -6] ; $i
1684   0D44 FD 43         mov [d], b
1685   0D46 FD 27         mov b, g
1686   0D48 0A EE 0C      jmp _while28_cond
1687   0D4B             _while28_exit:
1688   0D4B             ;; while (i > 0) { 
1689   0D4B             _while29_cond:
1690   0D4B FA FA FF      lea d, [bp + -6] ; $i
1691   0D4E 2A            mov b, [d]
1692   0D4F             ; START RELATIONAL
1693   0D4F D7            push a
1694   0D50 11            mov a, b
1695   0D51 26 00 00      mov b, $0
1696   0D54 B0            cmp a, b
1697   0D55 FD 7F         sgt ; >
1698   0D57 E4            pop a
1699   0D58             ; END RELATIONAL
1700   0D58 C0 00 00      cmp b, 0
1701   0D5B C6 86 0D      je _while29_exit
1702   0D5E             _while29_block:
1703   0D5E             ;; i--; 
1704   0D5E FA FA FF      lea d, [bp + -6] ; $i
1705   0D61 2A            mov b, [d]
1706   0D62 FD 79         mov g, b
1707   0D64 FD 7D         dec b
1708   0D66 FA FA FF      lea d, [bp + -6] ; $i
1709   0D69 FD 43         mov [d], b
1710   0D6B FD 27         mov b, g
1711   0D6D             ;; putchar(digits[i]); 
1712   0D6D FA FC FF      lea d, [bp + -4] ; $digits
1713   0D70 D7            push a
1714   0D71 DA            push d
1715   0D72 FA FA FF      lea d, [bp + -6] ; $i
1716   0D75 2A            mov b, [d]
1717   0D76 E7            pop d
1718   0D77 5A            add d, b
1719   0D78 E4            pop a
1720   0D79 32            mov bl, [d]
1721   0D7A A7 00         mov bh, 0
1722   0D7C DD            push bl
1723   0D7D 07 74 0E      call putchar
1724   0D80 51 01 00      add sp, 1
1725   0D83 0A 4B 0D      jmp _while29_cond
1726   0D86             _while29_exit:
1727   0D86 F9            leave
1728   0D87 09            ret
1729   0D88             
1730   0D88             printu:
1731   0D88 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1732   0D8B             ; $digits 
1733   0D8B             ; $i 
1734   0D8B 52 07 00      sub sp, 7
1735   0D8E             ;; i = 0; 
1736   0D8E FA FA FF      lea d, [bp + -6] ; $i
1737   0D91 DA            push d
1738   0D92 26 00 00      mov b, $0
1739   0D95 E7            pop d
1740   0D96 FD 43         mov [d], b
1741   0D98             ;; if(num == 0){ 
1742   0D98             _if30_cond:
1743   0D98 FA 05 00      lea d, [bp + 5] ; $num
1744   0D9B 2A            mov b, [d]
1745   0D9C             ; START RELATIONAL
1746   0D9C D7            push a
1747   0D9D 11            mov a, b
1748   0D9E 26 00 00      mov b, $0
1749   0DA1 B0            cmp a, b
1750   0DA2 FD 71         seq ; ==
1751   0DA4 E4            pop a
1752   0DA5             ; END RELATIONAL
1753   0DA5 C0 00 00      cmp b, 0
1754   0DA8 C6 BA 0D      je _if30_exit
1755   0DAB             _if30_true:
1756   0DAB             ;; putchar('0'); 
1757   0DAB 26 30 00      mov b, $30
1758   0DAE DD            push bl
1759   0DAF 07 74 0E      call putchar
1760   0DB2 51 01 00      add sp, 1
1761   0DB5             ;; return; 
1762   0DB5 F9            leave
1763   0DB6 09            ret
1764   0DB7 0A BA 0D      jmp _if30_exit
1765   0DBA             _if30_exit:
1766   0DBA             ;; while (num > 0) { 
1767   0DBA             _while31_cond:
1768   0DBA FA 05 00      lea d, [bp + 5] ; $num
1769   0DBD 2A            mov b, [d]
1770   0DBE             ; START RELATIONAL
1771   0DBE D7            push a
1772   0DBF 11            mov a, b
1773   0DC0 26 00 00      mov b, $0
1774   0DC3 B0            cmp a, b
1775   0DC4 FD 81         sgu ; > (unsigned)
1776   0DC6 E4            pop a
1777   0DC7             ; END RELATIONAL
1778   0DC7 C0 00 00      cmp b, 0
1779   0DCA C6 17 0E      je _while31_exit
1780   0DCD             _while31_block:
1781   0DCD             ;; digits[i] = '0' + (num % 10); 
1782   0DCD FA FC FF      lea d, [bp + -4] ; $digits
1783   0DD0 D7            push a
1784   0DD1 DA            push d
1785   0DD2 FA FA FF      lea d, [bp + -6] ; $i
1786   0DD5 2A            mov b, [d]
1787   0DD6 E7            pop d
1788   0DD7 5A            add d, b
1789   0DD8 E4            pop a
1790   0DD9 DA            push d
1791   0DDA 26 30 00      mov b, $30
1792   0DDD             ; START TERMS
1793   0DDD D7            push a
1794   0DDE 11            mov a, b
1795   0DDF FA 05 00      lea d, [bp + 5] ; $num
1796   0DE2 2A            mov b, [d]
1797   0DE3             ; START FACTORS
1798   0DE3 D7            push a
1799   0DE4 11            mov a, b
1800   0DE5 26 0A 00      mov b, $a
1801   0DE8 AE            div a, b ; 
1802   0DE9 11            mov a, b
1803   0DEA 27            mov b, a
1804   0DEB E4            pop a
1805   0DEC             ; END FACTORS
1806   0DEC 54            add a, b
1807   0DED 27            mov b, a
1808   0DEE E4            pop a
1809   0DEF             ; END TERMS
1810   0DEF E7            pop d
1811   0DF0 FD 3E         mov [d], bl
1812   0DF2             ;; num = num / 10; 
1813   0DF2 FA 05 00      lea d, [bp + 5] ; $num
1814   0DF5 DA            push d
1815   0DF6 FA 05 00      lea d, [bp + 5] ; $num
1816   0DF9 2A            mov b, [d]
1817   0DFA             ; START FACTORS
1818   0DFA D7            push a
1819   0DFB 11            mov a, b
1820   0DFC 26 0A 00      mov b, $a
1821   0DFF AE            div a, b
1822   0E00 27            mov b, a
1823   0E01 E4            pop a
1824   0E02             ; END FACTORS
1825   0E02 E7            pop d
1826   0E03 FD 43         mov [d], b
1827   0E05             ;; i++; 
1828   0E05 FA FA FF      lea d, [bp + -6] ; $i
1829   0E08 2A            mov b, [d]
1830   0E09 FD 79         mov g, b
1831   0E0B FD 77         inc b
1832   0E0D FA FA FF      lea d, [bp + -6] ; $i
1833   0E10 FD 43         mov [d], b
1834   0E12 FD 27         mov b, g
1835   0E14 0A BA 0D      jmp _while31_cond
1836   0E17             _while31_exit:
1837   0E17             ;; while (i > 0) { 
1838   0E17             _while32_cond:
1839   0E17 FA FA FF      lea d, [bp + -6] ; $i
1840   0E1A 2A            mov b, [d]
1841   0E1B             ; START RELATIONAL
1842   0E1B D7            push a
1843   0E1C 11            mov a, b
1844   0E1D 26 00 00      mov b, $0
1845   0E20 B0            cmp a, b
1846   0E21 FD 7F         sgt ; >
1847   0E23 E4            pop a
1848   0E24             ; END RELATIONAL
1849   0E24 C0 00 00      cmp b, 0
1850   0E27 C6 52 0E      je _while32_exit
1851   0E2A             _while32_block:
1852   0E2A             ;; i--; 
1853   0E2A FA FA FF      lea d, [bp + -6] ; $i
1854   0E2D 2A            mov b, [d]
1855   0E2E FD 79         mov g, b
1856   0E30 FD 7D         dec b
1857   0E32 FA FA FF      lea d, [bp + -6] ; $i
1858   0E35 FD 43         mov [d], b
1859   0E37 FD 27         mov b, g
1860   0E39             ;; putchar(digits[i]); 
1861   0E39 FA FC FF      lea d, [bp + -4] ; $digits
1862   0E3C D7            push a
1863   0E3D DA            push d
1864   0E3E FA FA FF      lea d, [bp + -6] ; $i
1865   0E41 2A            mov b, [d]
1866   0E42 E7            pop d
1867   0E43 5A            add d, b
1868   0E44 E4            pop a
1869   0E45 32            mov bl, [d]
1870   0E46 A7 00         mov bh, 0
1871   0E48 DD            push bl
1872   0E49 07 74 0E      call putchar
1873   0E4C 51 01 00      add sp, 1
1874   0E4F 0A 17 0E      jmp _while32_cond
1875   0E52             _while32_exit:
1876   0E52 F9            leave
1877   0E53 09            ret
1878   0E54             
1879   0E54             rand:
1880   0E54 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1881   0E57             ; $sec 
1882   0E57 52 01 00      sub sp, 1
1883   0E5A             
1884   0E5A             ; --- BEGIN INLINE ASM BLOCK
1885   0E5A 19 00         mov al, 0
1886   0E5C 05 01         syscall sys_rtc					
1887   0E5E 1A            mov al, ah
1888   0E5F FA 00 00      lea d, [bp + 0] ; $sec
1889   0E62 1E            mov al, [d]
1890   0E63             ; --- END INLINE ASM BLOCK
1891   0E63             
1892   0E63             ;; return sec; 
1893   0E63 FA 00 00      lea d, [bp + 0] ; $sec
1894   0E66 32            mov bl, [d]
1895   0E67 A7 00         mov bh, 0
1896   0E69 F9            leave
1897   0E6A 09            ret
1898   0E6B             
1899   0E6B             date:
1900   0E6B F8 00 00      enter 0 ; (push bp; mov bp, sp)
1901   0E6E             
1902   0E6E             ; --- BEGIN INLINE ASM BLOCK
1903   0E6E 19 00         mov al, 0 
1904   0E70 05 07         syscall sys_datetime
1905   0E72             ; --- END INLINE ASM BLOCK
1906   0E72             
1907   0E72 F9            leave
1908   0E73 09            ret
1909   0E74             
1910   0E74             putchar:
1911   0E74 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1912   0E77             
1913   0E77             ; --- BEGIN INLINE ASM BLOCK
1914   0E77 FA 05 00      lea d, [bp + 5] ; $c
1915   0E7A 1E            mov al, [d]
1916   0E7B 23            mov ah, al
1917   0E7C 07 9B 10      call _putchar
1918   0E7F             ; --- END INLINE ASM BLOCK
1919   0E7F             
1920   0E7F F9            leave
1921   0E80 09            ret
1922   0E81             
1923   0E81             getchar:
1924   0E81 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1925   0E84             ; $c 
1926   0E84 52 01 00      sub sp, 1
1927   0E87             
1928   0E87             ; --- BEGIN INLINE ASM BLOCK
1929   0E87 07 94 10      call getch
1930   0E8A 1A            mov al, ah
1931   0E8B FA 00 00      lea d, [bp + 0] ; $c
1932   0E8E 3E            mov [d], al
1933   0E8F             ; --- END INLINE ASM BLOCK
1934   0E8F             
1935   0E8F             ;; return c; 
1936   0E8F FA 00 00      lea d, [bp + 0] ; $c
1937   0E92 32            mov bl, [d]
1938   0E93 A7 00         mov bh, 0
1939   0E95 F9            leave
1940   0E96 09            ret
1941   0E97             
1942   0E97             scann:
1943   0E97 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1944   0E9A             ; $m 
1945   0E9A 52 02 00      sub sp, 2
1946   0E9D             
1947   0E9D             ; --- BEGIN INLINE ASM BLOCK
1948   0E9D 07 DF 12      call scan_u16d
1949   0EA0 FA FF FF      lea d, [bp + -1] ; $m
1950   0EA3 43            mov [d], a
1951   0EA4             ; --- END INLINE ASM BLOCK
1952   0EA4             
1953   0EA4             ;; return m; 
1954   0EA4 FA FF FF      lea d, [bp + -1] ; $m
1955   0EA7 2A            mov b, [d]
1956   0EA8 F9            leave
1957   0EA9 09            ret
1958   0EAA             
1959   0EAA             puts:
1960   0EAA F8 00 00      enter 0 ; (push bp; mov bp, sp)
1961   0EAD             
1962   0EAD             ; --- BEGIN INLINE ASM BLOCK
1963   0EAD FA 05 00      lea d, [bp + 5] ; $s
1964   0EB0 15            mov a, [d]
1965   0EB1 3C            mov d, a
1966   0EB2 07 E5 11      call _puts
1967   0EB5 10 00 0A      mov a, $0A00
1968   0EB8 05 03         syscall sys_io
1969   0EBA             ; --- END INLINE ASM BLOCK
1970   0EBA             
1971   0EBA F9            leave
1972   0EBB 09            ret
1973   0EBC             
1974   0EBC             print:
1975   0EBC F8 00 00      enter 0 ; (push bp; mov bp, sp)
1976   0EBF             
1977   0EBF             ; --- BEGIN INLINE ASM BLOCK
1978   0EBF FA 05 00      lea d, [bp + 5] ; $s
1979   0EC2 FD 2A         mov d, [d]
1980   0EC4 07 E5 11      call _puts
1981   0EC7             ; --- END INLINE ASM BLOCK
1982   0EC7             
1983   0EC7 F9            leave
1984   0EC8 09            ret
1985   0EC9             
1986   0EC9             loadfile:
1987   0EC9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1988   0ECC             
1989   0ECC             ; --- BEGIN INLINE ASM BLOCK
1990   0ECC FA 05 00      lea d, [bp + 5] ; $destination
1991   0ECF 15            mov a, [d]
1992   0ED0 4F            mov di, a
1993   0ED1 FA 07 00      lea d, [bp + 7] ; $filename
1994   0ED4 FD 2A         mov d, [d]
1995   0ED6 19 14         mov al, 20
1996   0ED8 05 04         syscall sys_filesystem
1997   0EDA             ; --- END INLINE ASM BLOCK
1998   0EDA             
1999   0EDA F9            leave
2000   0EDB 09            ret
2001   0EDC             
2002   0EDC             create_file:
2003   0EDC F8 00 00      enter 0 ; (push bp; mov bp, sp)
2004   0EDF F9            leave
2005   0EE0 09            ret
2006   0EE1             
2007   0EE1             delete_file:
2008   0EE1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2009   0EE4             
2010   0EE4             ; --- BEGIN INLINE ASM BLOCK
2011   0EE4 FA 05 00      lea d, [bp + 5] ; $filename
2012   0EE7 19 0A         mov al, 10
2013   0EE9 05 04         syscall sys_filesystem
2014   0EEB             ; --- END INLINE ASM BLOCK
2015   0EEB             
2016   0EEB F9            leave
2017   0EEC 09            ret
2018   0EED             
2019   0EED             fopen:
2020   0EED F8 00 00      enter 0 ; (push bp; mov bp, sp)
2021   0EF0 F9            leave
2022   0EF1 09            ret
2023   0EF2             
2024   0EF2             fclose:
2025   0EF2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2026   0EF5 F9            leave
2027   0EF6 09            ret
2028   0EF7             
2029   0EF7             alloc:
2030   0EF7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2031   0EFA             ;; heap_top = heap_top + bytes; 
2032   0EFA 3B 3E 2D      mov d, _heap_top ; $heap_top
2033   0EFD DA            push d
2034   0EFE 3B 3E 2D      mov d, _heap_top ; $heap_top
2035   0F01 2A            mov b, [d]
2036   0F02             ; START TERMS
2037   0F02 D7            push a
2038   0F03 11            mov a, b
2039   0F04 FA 05 00      lea d, [bp + 5] ; $bytes
2040   0F07 2A            mov b, [d]
2041   0F08 54            add a, b
2042   0F09 27            mov b, a
2043   0F0A E4            pop a
2044   0F0B             ; END TERMS
2045   0F0B E7            pop d
2046   0F0C FD 43         mov [d], b
2047   0F0E             ;; return heap_top - bytes; 
2048   0F0E 3B 3E 2D      mov d, _heap_top ; $heap_top
2049   0F11 2A            mov b, [d]
2050   0F12             ; START TERMS
2051   0F12 D7            push a
2052   0F13 11            mov a, b
2053   0F14 FA 05 00      lea d, [bp + 5] ; $bytes
2054   0F17 2A            mov b, [d]
2055   0F18 60            sub a, b
2056   0F19 27            mov b, a
2057   0F1A E4            pop a
2058   0F1B             ; END TERMS
2059   0F1B F9            leave
2060   0F1C 09            ret
2061   0F1D             
2062   0F1D             free:
2063   0F1D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2064   0F20             ;; return heap_top = heap_top - bytes; 
2065   0F20 3B 3E 2D      mov d, _heap_top ; $heap_top
2066   0F23 DA            push d
2067   0F24 3B 3E 2D      mov d, _heap_top ; $heap_top
2068   0F27 2A            mov b, [d]
2069   0F28             ; START TERMS
2070   0F28 D7            push a
2071   0F29 11            mov a, b
2072   0F2A FA 05 00      lea d, [bp + 5] ; $bytes
2073   0F2D 2A            mov b, [d]
2074   0F2E 60            sub a, b
2075   0F2F 27            mov b, a
2076   0F30 E4            pop a
2077   0F31             ; END TERMS
2078   0F31 E7            pop d
2079   0F32 FD 43         mov [d], b
2080   0F34 F9            leave
2081   0F35 09            ret
2082   0F36             
2083   0F36             exit:
2084   0F36 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2085   0F39             
2086   0F39             ; --- BEGIN INLINE ASM BLOCK
2087   0F39 05 0B         syscall sys_terminate_proc
2088   0F3B             ; --- END INLINE ASM BLOCK
2089   0F3B             
2090   0F3B F9            leave
2091   0F3C 09            ret
2092   0F3D             
2093   0F3D             load_hex:
2094   0F3D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2095   0F40             ; $temp 
2096   0F40 52 02 00      sub sp, 2
2097   0F43             ;; temp = alloc(32768); 
2098   0F43 FA FF FF      lea d, [bp + -1] ; $temp
2099   0F46 DA            push d
2100   0F47 26 00 80      mov b, $8000
2101   0F4A FD AB         swp b
2102   0F4C D8            push b
2103   0F4D 07 F7 0E      call alloc
2104   0F50 51 02 00      add sp, 2
2105   0F53 E7            pop d
2106   0F54 FD 43         mov [d], b
2107   0F56             
2108   0F56             ; --- BEGIN INLINE ASM BLOCK
2109   0F56               
2110   0F56               
2111   0F56               
2112   0F56               
2113   0F56               
2114   0F56             _load_hex:
2115   0F56 D7            push a
2116   0F57 D8            push b
2117   0F58 DA            push d
2118   0F59 E2            push si
2119   0F5A E3            push di
2120   0F5B 52 00 80      sub sp, $8000      
2121   0F5E 38 00 00      mov c, 0
2122   0F61 48            mov a, sp
2123   0F62 77            inc a
2124   0F63 3C            mov d, a          
2125   0F64 07 A2 10      call _gets        
2126   0F67 4D            mov si, a
2127   0F68             __load_hex_loop:
2128   0F68 F6            lodsb             
2129   0F69 B9 00         cmp al, 0         
2130   0F6B C6 79 0F      jz __load_hex_ret
2131   0F6E 36            mov bh, al
2132   0F6F F6            lodsb
2133   0F70 2F            mov bl, al
2134   0F71 07 58 10      call _atoi        
2135   0F74 F7            stosb             
2136   0F75 78            inc c
2137   0F76 0A 68 0F      jmp __load_hex_loop
2138   0F79             __load_hex_ret:
2139   0F79 51 00 80      add sp, $8000
2140   0F7C F0            pop di
2141   0F7D EF            pop si
2142   0F7E E7            pop d
2143   0F7F E5            pop b
2144   0F80 E4            pop a
2145   0F81             ; --- END INLINE ASM BLOCK
2146   0F81             
2147   0F81 F9            leave
2148   0F82 09            ret
2149   0F83             
2150   0F83             getparam:
2151   0F83 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2152   0F86             ; $data 
2153   0F86 52 01 00      sub sp, 1
2154   0F89             
2155   0F89             ; --- BEGIN INLINE ASM BLOCK
2156   0F89 19 04         mov al, 4
2157   0F8B FA 05 00      lea d, [bp + 5] ; $address
2158   0F8E FD 2A         mov d, [d]
2159   0F90 05 0C         syscall sys_system
2160   0F92 FA 00 00      lea d, [bp + 0] ; $data
2161   0F95 FD 3E         mov [d], bl
2162   0F97             ; --- END INLINE ASM BLOCK
2163   0F97             
2164   0F97             ;; return data; 
2165   0F97 FA 00 00      lea d, [bp + 0] ; $data
2166   0F9A 32            mov bl, [d]
2167   0F9B A7 00         mov bh, 0
2168   0F9D F9            leave
2169   0F9E 09            ret
2170   0F9F             
2171   0F9F             clear:
2172   0F9F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2173   0FA2             ;; print("\033[2J\033[H"); 
2174   0FA2 26 66 25      mov b, __s4 ; "\033[2J\033[H"
2175   0FA5 FD AB         swp b
2176   0FA7 D8            push b
2177   0FA8 07 BC 0E      call print
2178   0FAB 51 02 00      add sp, 2
2179   0FAE F9            leave
2180   0FAF 09            ret
2181   0FB0             
2182   0FB0             include_stdio_asm:
2183   0FB0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2184   0FB3             
2185   0FB3             ; --- BEGIN INLINE ASM BLOCK
2186   0FB3             .include "lib/stdio.asm"
0001+  0FB3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0FB3             ; stdio.s
0003+  0FB3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0FB3             .include "lib/string.asm"
0001++ 0FB3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0FB3             ; string.s
0003++ 0FB3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0FB3             
0005++ 0FB3             
0006++ 0FB3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0FB3             ; _strrev
0008++ 0FB3             ; reverse a string
0009++ 0FB3             ; D = string address
0010++ 0FB3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0FB3             ; 01234
0012++ 0FB3             _strrev:
0013++ 0FB3 4B          	pusha
0014++ 0FB4 07 FA 0F    	call _strlen	; length in C
0015++ 0FB7 12          	mov a, c
0016++ 0FB8 AF 01 00    	cmp a, 1
0017++ 0FBB D0 D5 0F    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 0FBE 7D          	dec a
0019++ 0FBF FD 4E       	mov si, d	; beginning of string
0020++ 0FC1 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0FC3 59          	add d, a	; end of string
0022++ 0FC4 12          	mov a, c
0023++ 0FC5 FD 9B       	shr a		; divide by 2
0024++ 0FC7 39          	mov c, a	; C now counts the steps
0025++ 0FC8             _strrev_L0:
0026++ 0FC8 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0FC9 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0FCA 3E          	mov [d], al	; store left char into right side
0029++ 0FCB 1B          	mov al, bl
0030++ 0FCC F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0FCD 7E          	dec c
0032++ 0FCE 7F          	dec d
0033++ 0FCF C2 00 00    	cmp c, 0
0034++ 0FD2 C7 C8 0F    	jne _strrev_L0
0035++ 0FD5             _strrev_end:
0036++ 0FD5 4C          	popa
0037++ 0FD6 09          	ret
0038++ 0FD7             	
0039++ 0FD7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0FD7             ; _strchr
0041++ 0FD7             ; search string in D for char in AL
0042++ 0FD7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0FD7             _strchr:
0044++ 0FD7             _strchr_L0:
0045++ 0FD7 32          	mov bl, [d]
0046++ 0FD8 C1 00       	cmp bl, 0
0047++ 0FDA C6 E5 0F    	je _strchr_end
0048++ 0FDD BA          	cmp al, bl
0049++ 0FDE C6 E5 0F    	je _strchr_end
0050++ 0FE1 79          	inc d
0051++ 0FE2 0A D7 0F    	jmp _strchr_L0
0052++ 0FE5             _strchr_end:
0053++ 0FE5 1B          	mov al, bl
0054++ 0FE6 09          	ret
0055++ 0FE7             
0056++ 0FE7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0FE7             ; _strstr
0058++ 0FE7             ; find sub-string
0059++ 0FE7             ; str1 in SI
0060++ 0FE7             ; str2 in DI
0061++ 0FE7             ; SI points to end of source string
0062++ 0FE7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0FE7             _strstr:
0064++ 0FE7 DB          	push al
0065++ 0FE8 DA          	push d
0066++ 0FE9 E3          	push di
0067++ 0FEA             _strstr_loop:
0068++ 0FEA F3          	cmpsb					; compare a byte of the strings
0069++ 0FEB C7 F6 0F    	jne _strstr_ret
0070++ 0FEE FC 00 00    	lea d, [di + 0]
0071++ 0FF1 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0FF3 C7 EA 0F    	jne _strstr_loop				; equal chars but not at end
0073++ 0FF6             _strstr_ret:
0074++ 0FF6 F0          	pop di
0075++ 0FF7 E7          	pop d
0076++ 0FF8 E8          	pop al
0077++ 0FF9 09          	ret
0078++ 0FFA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0FFA             ; length of null terminated string
0080++ 0FFA             ; result in C
0081++ 0FFA             ; pointer in D
0082++ 0FFA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0FFA             _strlen:
0084++ 0FFA DA          	push d
0085++ 0FFB 38 00 00    	mov c, 0
0086++ 0FFE             _strlen_L1:
0087++ 0FFE BD 00       	cmp byte [d], 0
0088++ 1000 C6 08 10    	je _strlen_ret
0089++ 1003 79          	inc d
0090++ 1004 78          	inc c
0091++ 1005 0A FE 0F    	jmp _strlen_L1
0092++ 1008             _strlen_ret:
0093++ 1008 E7          	pop d
0094++ 1009 09          	ret
0095++ 100A             
0096++ 100A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 100A             ; STRCMP
0098++ 100A             ; compare two strings
0099++ 100A             ; str1 in SI
0100++ 100A             ; str2 in DI
0101++ 100A             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 100A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 100A             _strcmp:
0104++ 100A DB          	push al
0105++ 100B DA          	push d
0106++ 100C E3          	push di
0107++ 100D E2          	push si
0108++ 100E             _strcmp_loop:
0109++ 100E F3          	cmpsb					; compare a byte of the strings
0110++ 100F C7 1A 10    	jne _strcmp_ret
0111++ 1012 FB FF FF    	lea d, [si +- 1]
0112++ 1015 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1017 C7 0E 10    	jne _strcmp_loop				; equal chars but not at end
0114++ 101A             _strcmp_ret:
0115++ 101A EF          	pop si
0116++ 101B F0          	pop di
0117++ 101C E7          	pop d
0118++ 101D E8          	pop al
0119++ 101E 09          	ret
0120++ 101F             
0121++ 101F             
0122++ 101F             ; STRCPY
0123++ 101F             ; copy null terminated string from SI to DI
0124++ 101F             ; source in SI
0125++ 101F             ; destination in DI
0126++ 101F             _strcpy:
0127++ 101F E2          	push si
0128++ 1020 E3          	push di
0129++ 1021 DB          	push al
0130++ 1022             _strcpy_L1:
0131++ 1022 F6          	lodsb
0132++ 1023 F7          	stosb
0133++ 1024 B9 00       	cmp al, 0
0134++ 1026 C7 22 10    	jne _strcpy_L1
0135++ 1029             _strcpy_end:
0136++ 1029 E8          	pop al
0137++ 102A F0          	pop di
0138++ 102B EF          	pop si
0139++ 102C 09          	ret
0140++ 102D             
0141++ 102D             ; STRCAT
0142++ 102D             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 102D             ; source in SI
0144++ 102D             ; destination in DI
0145++ 102D             _strcat:
0146++ 102D E2          	push si
0147++ 102E E3          	push di
0148++ 102F D7          	push a
0149++ 1030 DA          	push d
0150++ 1031 50          	mov a, di
0151++ 1032 3C          	mov d, a
0152++ 1033             _strcat_goto_end_L1:
0153++ 1033 BD 00       	cmp byte[d], 0
0154++ 1035 C6 3C 10    	je _strcat_start
0155++ 1038 79          	inc d
0156++ 1039 0A 33 10    	jmp _strcat_goto_end_L1
0157++ 103C             _strcat_start:
0158++ 103C FD 50       	mov di, d
0159++ 103E             _strcat_L1:
0160++ 103E F6          	lodsb
0161++ 103F F7          	stosb
0162++ 1040 B9 00       	cmp al, 0
0163++ 1042 C7 3E 10    	jne _strcat_L1
0164++ 1045             _strcat_end:
0165++ 1045 E7          	pop d
0166++ 1046 E4          	pop a
0167++ 1047 F0          	pop di
0168++ 1048 EF          	pop si
0169++ 1049 09          	ret
0170++ 104A             
0171++ 104A             
0005+  104A             
0006+  104A             
0007+  104A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  104A             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0009+  104A             ; ASCII in BL
0010+  104A             ; result in AL
0011+  104A             ; ascii for F = 0100 0110
0012+  104A             ; ascii for 9 = 0011 1001
0013+  104A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  104A             hex_ascii_encode:
0015+  104A 1B            mov al, bl
0016+  104B 93 40         test al, $40        ; test if letter or number
0017+  104D C7 53 10      jnz hex_letter
0018+  1050 87 0F         and al, $0F        ; get number
0019+  1052 09            ret
0020+  1053             hex_letter:
0021+  1053 87 0F         and al, $0F        ; get letter
0022+  1055 6A 09         add al, 9
0023+  1057 09            ret
0024+  1058             
0025+  1058             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  1058             ; ATOI
0027+  1058             ; 2 letter hex string in B
0028+  1058             ; 8bit integer returned in AL
0029+  1058             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  1058             _atoi:
0031+  1058 D8            push b
0032+  1059 07 4A 10      call hex_ascii_encode      ; convert BL to 4bit code in AL
0033+  105C 30            mov bl, bh
0034+  105D DB            push al          ; save a
0035+  105E 07 4A 10      call hex_ascii_encode
0036+  1061 EA            pop bl  
0037+  1062 FD 9E 04      shl al, 4
0038+  1065 8C            or al, bl
0039+  1066 E5            pop b
0040+  1067 09            ret  
0041+  1068             
0042+  1068             
0043+  1068             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  1068             ; scanf
0045+  1068             ; no need for explanations!
0046+  1068             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  1068             scanf:
0048+  1068 09            ret
0049+  1069             
0050+  1069             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  1069             ; ITOA
0052+  1069             ; 8bit value in BL
0053+  1069             ; 2 byte ASCII result in A
0054+  1069             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  1069             _itoa:
0056+  1069 DA            push d
0057+  106A D8            push b
0058+  106B A7 00         mov bh, 0
0059+  106D FD A4 04      shr bl, 4  
0060+  1070 74            mov d, b
0061+  1071 1F 19 13      mov al, [d + s_hex_digits]
0062+  1074 23            mov ah, al
0063+  1075               
0064+  1075 E5            pop b
0065+  1076 D8            push b
0066+  1077 A7 00         mov bh, 0
0067+  1079 FD 87 0F      and bl, $0F
0068+  107C 74            mov d, b
0069+  107D 1F 19 13      mov al, [d + s_hex_digits]
0070+  1080 E5            pop b
0071+  1081 E7            pop d
0072+  1082 09            ret
0073+  1083             
0074+  1083             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  1083             ; HEX STRING TO BINARY
0076+  1083             ; di = destination address
0077+  1083             ; si = source
0078+  1083             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  1083             _hex_to_int:
0080+  1083             _hex_to_int_L1:
0081+  1083 F6            lodsb          ; load from [SI] to AL
0082+  1084 B9 00         cmp al, 0        ; check if ASCII 0
0083+  1086 C6 93 10      jz _hex_to_int_ret
0084+  1089 36            mov bh, al
0085+  108A F6            lodsb
0086+  108B 2F            mov bl, al
0087+  108C 07 58 10      call _atoi        ; convert ASCII byte in B to int (to AL)
0088+  108F F7            stosb          ; store AL to [DI]
0089+  1090 0A 83 10      jmp _hex_to_int_L1
0090+  1093             _hex_to_int_ret:
0091+  1093 09            ret    
0092+  1094             
0093+  1094             
0094+  1094             
0095+  1094             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  1094             ; GETCHAR
0097+  1094             ; char in ah
0098+  1094             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  1094             getch:
0100+  1094 DB            push al
0101+  1095             getch_retry:
0102+  1095 19 01         mov al, 1
0103+  1097 05 03         syscall sys_io      ; receive in AH
0104+  1099 E8            pop al
0105+  109A 09            ret
0106+  109B             
0107+  109B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  109B             ; PUTCHAR
0109+  109B             ; char in ah
0110+  109B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  109B             _putchar:
0112+  109B D7            push a
0113+  109C 19 00         mov al, 0
0114+  109E 05 03         syscall sys_io      ; char in AH
0115+  10A0 E4            pop a
0116+  10A1 09            ret
0117+  10A2             
0118+  10A2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  10A2             ;; INPUT A STRING
0120+  10A2             ;; terminates with null
0121+  10A2             ;; pointer in D
0122+  10A2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  10A2             _gets:
0124+  10A2 D7            push a
0125+  10A3 DA            push d
0126+  10A4             _gets_loop:
0127+  10A4 19 01         mov al, 1
0128+  10A6 05 03         syscall sys_io      ; receive in AH
0129+  10A8 B9 00         cmp al, 0        ; check error code (AL)
0130+  10AA C6 A4 10      je _gets_loop      ; if no char received, retry
0131+  10AD             
0132+  10AD 76 1B         cmp ah, 27
0133+  10AF C6 D0 10      je _gets_ansi_esc
0134+  10B2 76 0A         cmp ah, $0A        ; LF
0135+  10B4 C6 3B 11      je _gets_end
0136+  10B7 76 0D         cmp ah, $0D        ; CR
0137+  10B9 C6 3B 11      je _gets_end
0138+  10BC 76 5C         cmp ah, $5C        ; '\\'
0139+  10BE C6 FC 10      je _gets_escape
0140+  10C1               
0141+  10C1 76 08         cmp ah, $08      ; check for backspace
0142+  10C3 C6 CC 10      je _gets_backspace
0143+  10C6             
0144+  10C6 1A            mov al, ah
0145+  10C7 3E            mov [d], al
0146+  10C8 79            inc d
0147+  10C9 0A A4 10      jmp _gets_loop
0148+  10CC             _gets_backspace:
0149+  10CC 7F            dec d
0150+  10CD 0A A4 10      jmp _gets_loop
0151+  10D0             _gets_ansi_esc:
0152+  10D0 19 01         mov al, 1
0153+  10D2 05 03         syscall sys_io        ; receive in AH without echo
0154+  10D4 B9 00         cmp al, 0          ; check error code (AL)
0155+  10D6 C6 D0 10      je _gets_ansi_esc    ; if no char received, retry
0156+  10D9 76 5B         cmp ah, '['
0157+  10DB C7 A4 10      jne _gets_loop
0158+  10DE             _gets_ansi_esc_2:
0159+  10DE 19 01         mov al, 1
0160+  10E0 05 03         syscall sys_io          ; receive in AH without echo
0161+  10E2 B9 00         cmp al, 0            ; check error code (AL)
0162+  10E4 C6 DE 10      je _gets_ansi_esc_2  ; if no char received, retry
0163+  10E7 76 44         cmp ah, 'D'
0164+  10E9 C6 F4 10      je _gets_left_arrow
0165+  10EC 76 43         cmp ah, 'C'
0166+  10EE C6 F8 10      je _gets_right_arrow
0167+  10F1 0A A4 10      jmp _gets_loop
0168+  10F4             _gets_left_arrow:
0169+  10F4 7F            dec d
0170+  10F5 0A A4 10      jmp _gets_loop
0171+  10F8             _gets_right_arrow:
0172+  10F8 79            inc d
0173+  10F9 0A A4 10      jmp _gets_loop
0174+  10FC             _gets_escape:
0175+  10FC 19 01         mov al, 1
0176+  10FE 05 03         syscall sys_io      ; receive in AH
0177+  1100 B9 00         cmp al, 0        ; check error code (AL)
0178+  1102 C6 FC 10      je _gets_escape      ; if no char received, retry
0179+  1105 76 6E         cmp ah, 'n'
0180+  1107 C6 26 11      je _gets_LF
0181+  110A 76 72         cmp ah, 'r'
0182+  110C C6 2D 11      je _gets_CR
0183+  110F 76 30         cmp ah, '0'
0184+  1111 C6 34 11      je _gets_NULL
0185+  1114 76 5C         cmp ah, $5C  ; '\'
0186+  1116 C6 1F 11      je _gets_slash
0187+  1119 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0188+  111A 3E            mov [d], al
0189+  111B 79            inc d
0190+  111C 0A A4 10      jmp _gets_loop
0191+  111F             _gets_slash:
0192+  111F 19 5C         mov al, $5C
0193+  1121 3E            mov [d], al
0194+  1122 79            inc d
0195+  1123 0A A4 10      jmp _gets_loop
0196+  1126             _gets_LF:
0197+  1126 19 0A         mov al, $0A
0198+  1128 3E            mov [d], al
0199+  1129 79            inc d
0200+  112A 0A A4 10      jmp _gets_loop
0201+  112D             _gets_CR:
0202+  112D 19 0D         mov al, $0D
0203+  112F 3E            mov [d], al
0204+  1130 79            inc d
0205+  1131 0A A4 10      jmp _gets_loop
0206+  1134             _gets_NULL:
0207+  1134 19 00         mov al, $00
0208+  1136 3E            mov [d], al
0209+  1137 79            inc d
0210+  1138 0A A4 10      jmp _gets_loop
0211+  113B             _gets_end:
0212+  113B 19 00         mov al, 0
0213+  113D 3E            mov [d], al        ; terminate string
0214+  113E E7            pop d
0215+  113F E4            pop a
0216+  1140 09            ret
0217+  1141             
0218+  1141             
0219+  1141             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0220+  1141             ;; INPUT TEXT
0221+  1141             ;; terminated with CTRL+D
0222+  1141             ;; pointer in D
0223+  1141             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0224+  1141             _gettxt:
0225+  1141 D7            push a
0226+  1142 DA            push d
0227+  1143             _gettxt_loop:
0228+  1143 19 01         mov al, 1
0229+  1145 05 03         syscall sys_io      ; receive in AH
0230+  1147 B9 00         cmp al, 0        ; check error code (AL)
0231+  1149 C6 43 11      je _gettxt_loop    ; if no char received, retry
0232+  114C 76 04         cmp ah, 4      ; EOT
0233+  114E C6 8C 11      je _gettxt_end
0234+  1151 76 08         cmp ah, $08      ; check for backspace
0235+  1153 C6 88 11      je _gettxt_backspace
0236+  1156 76 5C         cmp ah, $5C        ; '\'
0237+  1158 C6 61 11      je _gettxt_escape
0238+  115B 1A            mov al, ah
0239+  115C 3E            mov [d], al
0240+  115D 79            inc d
0241+  115E 0A 43 11      jmp _gettxt_loop
0242+  1161             _gettxt_escape:
0243+  1161 19 01         mov al, 1
0244+  1163 05 03         syscall sys_io      ; receive in AH
0245+  1165 B9 00         cmp al, 0        ; check error code (AL)
0246+  1167 C6 61 11      je _gettxt_escape    ; if no char received, retry
0247+  116A 76 6E         cmp ah, 'n'
0248+  116C C6 7A 11      je _gettxt_LF
0249+  116F 76 72         cmp ah, 'r'
0250+  1171 C6 81 11      je _gettxt_CR
0251+  1174 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0252+  1175 3E            mov [d], al
0253+  1176 79            inc d
0254+  1177 0A 43 11      jmp _gettxt_loop
0255+  117A             _gettxt_LF:
0256+  117A 19 0A         mov al, $0A
0257+  117C 3E            mov [d], al
0258+  117D 79            inc d
0259+  117E 0A 43 11      jmp _gettxt_loop
0260+  1181             _gettxt_CR:
0261+  1181 19 0D         mov al, $0D
0262+  1183 3E            mov [d], al
0263+  1184 79            inc d
0264+  1185 0A 43 11      jmp _gettxt_loop
0265+  1188             _gettxt_backspace:
0266+  1188 7F            dec d
0267+  1189 0A 43 11      jmp _gettxt_loop
0268+  118C             _gettxt_end:
0269+  118C 19 00         mov al, 0
0270+  118E 3E            mov [d], al        ; terminate string
0271+  118F E7            pop d
0272+  1190 E4            pop a
0273+  1191 09            ret
0274+  1192             
0275+  1192             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  1192             ; PRINT NEW LINE
0277+  1192             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0278+  1192             printnl:
0279+  1192 D7            push a
0280+  1193 10 00 0A      mov a, $0A00
0281+  1196 05 03         syscall sys_io
0282+  1198 10 00 0D      mov a, $0D00
0283+  119B 05 03         syscall sys_io
0284+  119D E4            pop a
0285+  119E 09            ret
0286+  119F             
0287+  119F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  119F             ; _strtoint
0289+  119F             ; 4 digit hex string number in d
0290+  119F             ; integer returned in A
0291+  119F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0292+  119F             _strtointx:
0293+  119F D8            push b
0294+  11A0 32            mov bl, [d]
0295+  11A1 37            mov bh, bl
0296+  11A2 33 01 00      mov bl, [d + 1]
0297+  11A5 07 58 10      call _atoi        ; convert to int in AL
0298+  11A8 23            mov ah, al        ; move to AH
0299+  11A9 33 02 00      mov bl, [d + 2]
0300+  11AC 37            mov bh, bl
0301+  11AD 33 03 00      mov bl, [d + 3]
0302+  11B0 07 58 10      call _atoi        ; convert to int in AL
0303+  11B3 E5            pop b
0304+  11B4 09            ret
0305+  11B5             
0306+  11B5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0307+  11B5             ; _strtoint
0308+  11B5             ; 5 digit base10 string number in d
0309+  11B5             ; integer returned in A
0310+  11B5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0311+  11B5             _strtoint:
0312+  11B5 E2            push si
0313+  11B6 D8            push b
0314+  11B7 D9            push c
0315+  11B8 DA            push d
0316+  11B9 07 FA 0F      call _strlen      ; get string length in C
0317+  11BC 7E            dec c
0318+  11BD FD 4E         mov si, d
0319+  11BF 12            mov a, c
0320+  11C0 FD 99         shl a
0321+  11C2 3B 31 13      mov d, table_power
0322+  11C5 59            add d, a
0323+  11C6 38 00 00      mov c, 0
0324+  11C9             _strtoint_L0:
0325+  11C9 F6            lodsb      ; load ASCII to al
0326+  11CA B9 00         cmp al, 0
0327+  11CC C6 DF 11      je _strtoint_end
0328+  11CF 6F 30         sub al, $30    ; make into integer
0329+  11D1 22 00         mov ah, 0
0330+  11D3 2A            mov b, [d]
0331+  11D4 AC            mul a, b      ; result in B since it fits in 16bits
0332+  11D5 11            mov a, b
0333+  11D6 28            mov b, c
0334+  11D7 54            add a, b
0335+  11D8 39            mov c, a
0336+  11D9 63 02 00      sub d, 2
0337+  11DC 0A C9 11      jmp _strtoint_L0
0338+  11DF             _strtoint_end:
0339+  11DF 12            mov a, c
0340+  11E0 E7            pop d
0341+  11E1 E6            pop c
0342+  11E2 E5            pop b
0343+  11E3 EF            pop si
0344+  11E4 09            ret
0345+  11E5             
0346+  11E5             
0347+  11E5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0348+  11E5             ; PRINT NULL TERMINATED STRING
0349+  11E5             ; pointer in D
0350+  11E5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0351+  11E5             _puts:
0352+  11E5 D7            push a
0353+  11E6 DA            push d
0354+  11E7             _puts_L1:
0355+  11E7 1E            mov al, [d]
0356+  11E8 B9 00         cmp al, 0
0357+  11EA C6 F6 11      jz _puts_END
0358+  11ED 23            mov ah, al
0359+  11EE 19 00         mov al, 0
0360+  11F0 05 03         syscall sys_io
0361+  11F2 79            inc d
0362+  11F3 0A E7 11      jmp _puts_L1
0363+  11F6             _puts_END:
0364+  11F6 E7            pop d
0365+  11F7 E4            pop a
0366+  11F8 09            ret
0367+  11F9             
0368+  11F9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0369+  11F9             ; PRINT N SIZE STRING
0370+  11F9             ; pointer in D
0371+  11F9             ; size in C
0372+  11F9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0373+  11F9             _putsn:
0374+  11F9 DB            push al
0375+  11FA DA            push d
0376+  11FB D9            push c
0377+  11FC             _putsn_L0:
0378+  11FC 1E            mov al, [d]
0379+  11FD 23            mov ah, al
0380+  11FE 19 00         mov al, 0
0381+  1200 05 03         syscall sys_io
0382+  1202 79            inc d
0383+  1203 7E            dec c  
0384+  1204 C2 00 00      cmp c, 0
0385+  1207 C7 FC 11      jne _putsn_L0
0386+  120A             _putsn_end:
0387+  120A E6            pop c
0388+  120B E7            pop d
0389+  120C E8            pop al
0390+  120D 09            ret
0391+  120E             
0392+  120E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0393+  120E             ; print 16bit decimal number
0394+  120E             ; input number in A
0395+  120E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0396+  120E             print_u16d:
0397+  120E D7            push a
0398+  120F D8            push b
0399+  1210 26 10 27      mov b, 10000
0400+  1213 AE            div a, b      ; get 10000's coeff.
0401+  1214 07 36 12      call print_number
0402+  1217 11            mov a, b
0403+  1218 26 E8 03      mov b, 1000
0404+  121B AE            div a, b      ; get 1000's coeff.
0405+  121C 07 36 12      call print_number
0406+  121F 11            mov a, b
0407+  1220 26 64 00      mov b, 100
0408+  1223 AE            div a, b
0409+  1224 07 36 12      call print_number
0410+  1227 11            mov a, b
0411+  1228 26 0A 00      mov b, 10
0412+  122B AE            div a, b
0413+  122C 07 36 12      call print_number
0414+  122F 1B            mov al, bl      ; 1's coeff in bl
0415+  1230 07 36 12      call print_number
0416+  1233 E5            pop b
0417+  1234 E4            pop a
0418+  1235 09            ret
0419+  1236             
0420+  1236             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0421+  1236             ; print AL
0422+  1236             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0423+  1236             print_number:
0424+  1236 6A 30         add al, $30
0425+  1238 23            mov ah, al
0426+  1239 07 9B 10      call _putchar
0427+  123C 09            ret
0428+  123D             
0429+  123D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0430+  123D             ; PRINT 16BIT HEX INTEGER
0431+  123D             ; integer value in reg B
0432+  123D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0433+  123D             print_u16x:
0434+  123D D7            push a
0435+  123E D8            push b
0436+  123F DD            push bl
0437+  1240 30            mov bl, bh
0438+  1241 07 69 10      call _itoa        ; convert bh to char in A
0439+  1244 2F            mov bl, al        ; save al
0440+  1245 19 00         mov al, 0
0441+  1247 05 03         syscall sys_io        ; display AH
0442+  1249 24            mov ah, bl        ; retrieve al
0443+  124A 19 00         mov al, 0
0444+  124C 05 03         syscall sys_io        ; display AL
0445+  124E             
0446+  124E EA            pop bl
0447+  124F 07 69 10      call _itoa        ; convert bh to char in A
0448+  1252 2F            mov bl, al        ; save al
0449+  1253 19 00         mov al, 0
0450+  1255 05 03         syscall sys_io        ; display AH
0451+  1257 24            mov ah, bl        ; retrieve al
0452+  1258 19 00         mov al, 0
0453+  125A 05 03         syscall sys_io        ; display AL
0454+  125C             
0455+  125C E5            pop b
0456+  125D E4            pop a
0457+  125E 09            ret
0458+  125F             
0459+  125F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0460+  125F             ; INPUT 16BIT HEX INTEGER
0461+  125F             ; read 16bit integer into A
0462+  125F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0463+  125F             scan_u16x:
0464+  125F F8 10 00      enter 16
0465+  1262 D8            push b
0466+  1263 DA            push d
0467+  1264             
0468+  1264 FA F1 FF      lea d, [bp + -15]
0469+  1267 07 A2 10      call _gets        ; get number
0470+  126A             
0471+  126A 32            mov bl, [d]
0472+  126B 37            mov bh, bl
0473+  126C 33 01 00      mov bl, [d + 1]
0474+  126F 07 58 10      call _atoi        ; convert to int in AL
0475+  1272 23            mov ah, al        ; move to AH
0476+  1273             
0477+  1273 33 02 00      mov bl, [d + 2]
0478+  1276 37            mov bh, bl
0479+  1277 33 03 00      mov bl, [d + 3]
0480+  127A 07 58 10      call _atoi        ; convert to int in AL
0481+  127D             
0482+  127D E7            pop d
0483+  127E E5            pop b
0484+  127F F9            leave
0485+  1280 09            ret
0486+  1281             
0487+  1281             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0488+  1281             ; PRINT 8bit HEX INTEGER
0489+  1281             ; integer value in reg bl
0490+  1281             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0491+  1281             print_u8x:
0492+  1281 D7            push a
0493+  1282 DD            push bl
0494+  1283             
0495+  1283 07 69 10      call _itoa        ; convert bl to char in A
0496+  1286 2F            mov bl, al        ; save al
0497+  1287 19 00         mov al, 0
0498+  1289 05 03         syscall sys_io        ; display AH
0499+  128B 24            mov ah, bl        ; retrieve al
0500+  128C 19 00         mov al, 0
0501+  128E 05 03         syscall sys_io        ; display AL
0502+  1290             
0503+  1290 EA            pop bl
0504+  1291 E4            pop a
0505+  1292 09            ret
0506+  1293             
0507+  1293             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0508+  1293             ; print 8bit decimal unsigned number
0509+  1293             ; input number in AL
0510+  1293             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0511+  1293             print_u8d:
0512+  1293 D7            push a
0513+  1294 D8            push b
0514+  1295             
0515+  1295 22 00         mov ah, 0
0516+  1297 26 64 00      mov b, 100
0517+  129A AE            div a, b
0518+  129B D8            push b      ; save remainder
0519+  129C B9 00         cmp al, 0
0520+  129E C6 A8 12      je skip100
0521+  12A1 6A 30         add al, $30
0522+  12A3 23            mov ah, al
0523+  12A4 19 00         mov al, 0
0524+  12A6 05 03         syscall sys_io  ; print coeff
0525+  12A8             skip100:
0526+  12A8 E4            pop a
0527+  12A9 22 00         mov ah, 0
0528+  12AB 26 0A 00      mov b, 10
0529+  12AE AE            div a, b
0530+  12AF D8            push b      ; save remainder
0531+  12B0 B9 00         cmp al, 0
0532+  12B2 C6 BC 12      je skip10
0533+  12B5 6A 30         add al, $30
0534+  12B7 23            mov ah, al
0535+  12B8 19 00         mov al, 0
0536+  12BA 05 03         syscall sys_io  ; print coeff
0537+  12BC             skip10:
0538+  12BC E4            pop a
0539+  12BD 1B            mov al, bl
0540+  12BE 6A 30         add al, $30
0541+  12C0 23            mov ah, al
0542+  12C1 19 00         mov al, 0
0543+  12C3 05 03         syscall sys_io  ; print coeff
0544+  12C5 E5            pop b
0545+  12C6 E4            pop a
0546+  12C7 09            ret
0547+  12C8             
0548+  12C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0549+  12C8             ; INPUT 8BIT HEX INTEGER
0550+  12C8             ; read 8bit integer into AL
0551+  12C8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0552+  12C8             scan_u8x:
0553+  12C8 F8 04 00      enter 4
0554+  12CB D8            push b
0555+  12CC DA            push d
0556+  12CD             
0557+  12CD FA FD FF      lea d, [bp + -3]
0558+  12D0 07 A2 10      call _gets        ; get number
0559+  12D3             
0560+  12D3 32            mov bl, [d]
0561+  12D4 37            mov bh, bl
0562+  12D5 33 01 00      mov bl, [d + 1]
0563+  12D8 07 58 10      call _atoi        ; convert to int in AL
0564+  12DB             
0565+  12DB E7            pop d
0566+  12DC E5            pop b
0567+  12DD F9            leave
0568+  12DE 09            ret
0569+  12DF             
0570+  12DF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0571+  12DF             ; input decimal number
0572+  12DF             ; result in A
0573+  12DF             ; 655'\0'
0574+  12DF             ; low--------high
0575+  12DF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0576+  12DF             scan_u16d:
0577+  12DF F8 08 00      enter 8
0578+  12E2 E2            push si
0579+  12E3 D8            push b
0580+  12E4 D9            push c
0581+  12E5 DA            push d
0582+  12E6 FA F9 FF      lea d, [bp +- 7]
0583+  12E9 07 A2 10      call _gets
0584+  12EC 07 FA 0F      call _strlen      ; get string length in C
0585+  12EF 7E            dec c
0586+  12F0 FD 4E         mov si, d
0587+  12F2 12            mov a, c
0588+  12F3 FD 99         shl a
0589+  12F5 3B 31 13      mov d, table_power
0590+  12F8 59            add d, a
0591+  12F9 38 00 00      mov c, 0
0592+  12FC             mul_loop:
0593+  12FC F6            lodsb      ; load ASCII to al
0594+  12FD B9 00         cmp al, 0
0595+  12FF C6 12 13      je mul_exit
0596+  1302 6F 30         sub al, $30    ; make into integer
0597+  1304 22 00         mov ah, 0
0598+  1306 2A            mov b, [d]
0599+  1307 AC            mul a, b      ; result in B since it fits in 16bits
0600+  1308 11            mov a, b
0601+  1309 28            mov b, c
0602+  130A 54            add a, b
0603+  130B 39            mov c, a
0604+  130C 63 02 00      sub d, 2
0605+  130F 0A FC 12      jmp mul_loop
0606+  1312             mul_exit:
0607+  1312 12            mov a, c
0608+  1313 E7            pop d
0609+  1314 E6            pop c
0610+  1315 E5            pop b
0611+  1316 EF            pop si
0612+  1317 F9            leave
0613+  1318 09            ret
0614+  1319             
0615+  1319             
0616+  1319 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0616+  131D 34 35 36 37 
0616+  1321 38 39 41 42 
0616+  1325 43 44 45 46 
0617+  1329 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0617+  132D 1B 5B 48 00 
0618+  1331             
0619+  1331             table_power:
0620+  1331 01 00         .dw 1
0621+  1333 0A 00         .dw 10
0622+  1335 64 00         .dw 100
0623+  1337 E8 03         .dw 1000
0624+  1339 10 27         .dw 100002187   133B             ; --- END INLINE ASM BLOCK
2188   133B             
2189   133B F9            leave
2190   133C 09            ret
2191   133D             
2192   133D             include_ctype_lib:
2193   133D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2194   1340             
2195   1340             ; --- BEGIN INLINE ASM BLOCK
2196   1340             .include "lib/ctype.asm"
0001+  1340             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  1340             ; ctype.s
0003+  1340             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  1340             
0005+  1340             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  1340             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  1340             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  1340             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  1340             ;; characters are supported.
0010+  1340             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  1340             ;; _isalnum 
0012+  1340             ;; _isalpha 
0013+  1340             ;; islower 
0014+  1340             ;; isupper 
0015+  1340             ;; _isdigit 
0016+  1340             ;; isxdigit
0017+  1340             ;; iscntrl 
0018+  1340             ;; isgraph 
0019+  1340             ;; _isspace 
0020+  1340             ;; isblank 
0021+  1340             ;; isprint 
0022+  1340             ;; ispunct 
0023+  1340             ;; tolower 
0024+  1340             ;; toupper
0025+  1340             
0026+  1340             
0027+  1340             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  1340             ;; IS ALPHANUMERIC
0029+  1340             ;; sets ZF according with result
0030+  1340             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  1340             _isalnum:
0032+  1340 07 5D 13    	call _isalpha
0033+  1343 C6 49 13    	je _isalnum_exit
0034+  1346 07 4A 13    	call _isdigit
0035+  1349             _isalnum_exit:
0036+  1349 09          	ret	
0037+  134A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  134A             ;; IS DIGIT
0039+  134A             ;; sets ZF according with result
0040+  134A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  134A             _isdigit:
0042+  134A DB          	push al
0043+  134B B9 30       	cmp al, '0'
0044+  134D C8 59 13    	jlu _isdigit_false
0045+  1350 B9 39       	cmp al, '9'
0046+  1352 D1 59 13    	jgu _isdigit_false
0047+  1355 87 00       	and al, 0	; set ZF
0048+  1357 E8          	pop al
0049+  1358 09          	ret
0050+  1359             _isdigit_false:
0051+  1359 8B 01       	or al, 1	; clear ZF
0052+  135B E8          	pop al
0053+  135C 09          	ret	
0054+  135D             	
0055+  135D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  135D             ;; IS ALPHA
0057+  135D             ;; sets ZF according with result
0058+  135D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  135D             _isalpha:
0060+  135D DB          	push al
0061+  135E B9 5F       	cmp al, '_'
0062+  1360 C6 80 13    	je _isalpha_true
0063+  1363 B9 2E       	cmp al, '.'
0064+  1365 C6 80 13    	je _isalpha_true
0065+  1368 B9 41       	cmp al, 'A'
0066+  136A C8 7C 13    	jlu _isalpha_false
0067+  136D B9 7A       	cmp al, 'z'
0068+  136F D1 7C 13    	jgu _isalpha_false
0069+  1372 B9 5A       	cmp al, 'Z'
0070+  1374 D0 80 13    	jleu _isalpha_true
0071+  1377 B9 61       	cmp al, 'a'
0072+  1379 C9 80 13    	jgeu _isalpha_true
0073+  137C             _isalpha_false:
0074+  137C 8B 01       	or al, 1	; clear ZF
0075+  137E E8          	pop al
0076+  137F 09          	ret
0077+  1380             _isalpha_true:
0078+  1380 87 00       	and al, 0	; set ZF
0079+  1382 E8          	pop al
0080+  1383 09          	ret
0081+  1384             
0082+  1384             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  1384             ;; IS PATH-ALPHA
0084+  1384             ;; sets ZF according with result
0085+  1384             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  1384             ispath:
0087+  1384 DB          	push al
0088+  1385 07 4A 13    	call _isdigit
0089+  1388 C6 B2 13    	je ispath_true
0090+  138B B9 5F       	cmp al, '_'
0091+  138D C6 B2 13    	je ispath_true
0092+  1390 B9 2F       	cmp al, '/'
0093+  1392 C6 B2 13    	je ispath_true
0094+  1395 B9 2E       	cmp al, '.'
0095+  1397 C6 B2 13    	je ispath_true
0096+  139A B9 41       	cmp al, 'A'
0097+  139C C8 AE 13    	jlu ispath_false
0098+  139F B9 7A       	cmp al, 'z'
0099+  13A1 D1 AE 13    	jgu ispath_false
0100+  13A4 B9 5A       	cmp al, 'Z'
0101+  13A6 D0 B2 13    	jleu ispath_true
0102+  13A9 B9 61       	cmp al, 'a'
0103+  13AB C9 B2 13    	jgeu ispath_true
0104+  13AE             ispath_false:
0105+  13AE 8B 01       	or al, 1	; clear ZF
0106+  13B0 E8          	pop al
0107+  13B1 09          	ret
0108+  13B2             ispath_true:
0109+  13B2 87 00       	and al, 0	; set ZF
0110+  13B4 E8          	pop al
0111+  13B5 09          	ret
0112+  13B6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  13B6             ;; IS SPACE
0114+  13B6             ;; sets ZF according with result
0115+  13B6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  13B6             _isspace:
0117+  13B6 B9 20       	cmp al, $20		; ' '
0118+  13B8 C6 CC 13    	je _isspace_exit
0119+  13BB B9 09       	cmp al, $09		; '\t'
0120+  13BD C6 CC 13    	je _isspace_exit
0121+  13C0 B9 0A       	cmp al, $0A		; '\n'
0122+  13C2 C6 CC 13    	je _isspace_exit
0123+  13C5 B9 0D       	cmp al, $0D		; '\r'
0124+  13C7 C6 CC 13    	je _isspace_exit
0125+  13CA B9 0B       	cmp al, $0B		; '\v'
0126+  13CC             _isspace_exit:
0127+  13CC 09          	ret	
0128+  13CD             
0129+  13CD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  13CD             ; TO LOWER
0131+  13CD             ; input in AL
0132+  13CD             ; output in AL
0133+  13CD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  13CD             _to_lower:
0135+  13CD B9 5A       	cmp al, 'Z'
0136+  13CF D1 D4 13    	jgu _to_lower_ret
0137+  13D2 6A 20       	add al, $20				; convert to lower case
0138+  13D4             _to_lower_ret:
0139+  13D4 09          	ret
0140+  13D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  13D5             ; TO UPPER
0142+  13D5             ; input in AL
0143+  13D5             ; output in AL
0144+  13D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  13D5             _to_upper:
0146+  13D5 B9 61       	cmp al, 'a'
0147+  13D7 C8 DC 13    	jlu _to_upper_ret
0148+  13DA 6F 20       	sub al, $20			; convert to upper case
0149+  13DC             _to_upper_ret:
0150+  13DC 09          	ret
0151+  13DD             
2197   13DD             ; --- END INLINE ASM BLOCK
2198   13DD             
2199   13DD F9            leave
2200   13DE 09            ret
2201   13DF             
2202   13DF             is_space:
2203   13DF F8 00 00      enter 0 ; (push bp; mov bp, sp)
2204   13E2             ;; return c == ' ' || c == '\t' || c == '\n' || c == '\r'; 
2205   13E2 FA 05 00      lea d, [bp + 5] ; $c
2206   13E5 32            mov bl, [d]
2207   13E6 A7 00         mov bh, 0
2208   13E8             ; START RELATIONAL
2209   13E8 D7            push a
2210   13E9 11            mov a, b
2211   13EA 26 20 00      mov b, $20
2212   13ED B0            cmp a, b
2213   13EE FD 71         seq ; ==
2214   13F0 E4            pop a
2215   13F1             ; END RELATIONAL
2216   13F1 D7            push a
2217   13F2 11            mov a, b
2218   13F3 FA 05 00      lea d, [bp + 5] ; $c
2219   13F6 32            mov bl, [d]
2220   13F7 A7 00         mov bh, 0
2221   13F9             ; START RELATIONAL
2222   13F9 D7            push a
2223   13FA 11            mov a, b
2224   13FB 26 09 00      mov b, $9
2225   13FE B0            cmp a, b
2226   13FF FD 71         seq ; ==
2227   1401 E4            pop a
2228   1402             ; END RELATIONAL
2229   1402 FD A8         sor a, b ; ||
2230   1404 11            mov a, b
2231   1405 FA 05 00      lea d, [bp + 5] ; $c
2232   1408 32            mov bl, [d]
2233   1409 A7 00         mov bh, 0
2234   140B             ; START RELATIONAL
2235   140B D7            push a
2236   140C 11            mov a, b
2237   140D 26 0A 00      mov b, $a
2238   1410 B0            cmp a, b
2239   1411 FD 71         seq ; ==
2240   1413 E4            pop a
2241   1414             ; END RELATIONAL
2242   1414 FD A8         sor a, b ; ||
2243   1416 11            mov a, b
2244   1417 FA 05 00      lea d, [bp + 5] ; $c
2245   141A 32            mov bl, [d]
2246   141B A7 00         mov bh, 0
2247   141D             ; START RELATIONAL
2248   141D D7            push a
2249   141E 11            mov a, b
2250   141F 26 0D 00      mov b, $d
2251   1422 B0            cmp a, b
2252   1423 FD 71         seq ; ==
2253   1425 E4            pop a
2254   1426             ; END RELATIONAL
2255   1426 FD A8         sor a, b ; ||
2256   1428 E4            pop a
2257   1429 F9            leave
2258   142A 09            ret
2259   142B             
2260   142B             is_digit:
2261   142B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2262   142E             ;; return c >= '0' && c <= '9'; 
2263   142E FA 05 00      lea d, [bp + 5] ; $c
2264   1431 32            mov bl, [d]
2265   1432 A7 00         mov bh, 0
2266   1434             ; START RELATIONAL
2267   1434 D7            push a
2268   1435 11            mov a, b
2269   1436 26 30 00      mov b, $30
2270   1439 B0            cmp a, b
2271   143A FD 80         sge ; >=
2272   143C E4            pop a
2273   143D             ; END RELATIONAL
2274   143D D7            push a
2275   143E 11            mov a, b
2276   143F FA 05 00      lea d, [bp + 5] ; $c
2277   1442 32            mov bl, [d]
2278   1443 A7 00         mov bh, 0
2279   1445             ; START RELATIONAL
2280   1445 D7            push a
2281   1446 11            mov a, b
2282   1447 26 39 00      mov b, $39
2283   144A B0            cmp a, b
2284   144B FD 74         sle ; <=
2285   144D E4            pop a
2286   144E             ; END RELATIONAL
2287   144E FD A7         sand a, b ; &&
2288   1450 E4            pop a
2289   1451 F9            leave
2290   1452 09            ret
2291   1453             
2292   1453             is_alpha:
2293   1453 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2294   1456             ;; return(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '_'); 
2295   1456 FA 05 00      lea d, [bp + 5] ; $c
2296   1459 32            mov bl, [d]
2297   145A A7 00         mov bh, 0
2298   145C             ; START RELATIONAL
2299   145C D7            push a
2300   145D 11            mov a, b
2301   145E 26 61 00      mov b, $61
2302   1461 B0            cmp a, b
2303   1462 FD 80         sge ; >=
2304   1464 E4            pop a
2305   1465             ; END RELATIONAL
2306   1465 D7            push a
2307   1466 11            mov a, b
2308   1467 FA 05 00      lea d, [bp + 5] ; $c
2309   146A 32            mov bl, [d]
2310   146B A7 00         mov bh, 0
2311   146D             ; START RELATIONAL
2312   146D D7            push a
2313   146E 11            mov a, b
2314   146F 26 7A 00      mov b, $7a
2315   1472 B0            cmp a, b
2316   1473 FD 74         sle ; <=
2317   1475 E4            pop a
2318   1476             ; END RELATIONAL
2319   1476 FD A7         sand a, b ; &&
2320   1478 E4            pop a
2321   1479 D7            push a
2322   147A 11            mov a, b
2323   147B FA 05 00      lea d, [bp + 5] ; $c
2324   147E 32            mov bl, [d]
2325   147F A7 00         mov bh, 0
2326   1481             ; START RELATIONAL
2327   1481 D7            push a
2328   1482 11            mov a, b
2329   1483 26 41 00      mov b, $41
2330   1486 B0            cmp a, b
2331   1487 FD 80         sge ; >=
2332   1489 E4            pop a
2333   148A             ; END RELATIONAL
2334   148A D7            push a
2335   148B 11            mov a, b
2336   148C FA 05 00      lea d, [bp + 5] ; $c
2337   148F 32            mov bl, [d]
2338   1490 A7 00         mov bh, 0
2339   1492             ; START RELATIONAL
2340   1492 D7            push a
2341   1493 11            mov a, b
2342   1494 26 5A 00      mov b, $5a
2343   1497 B0            cmp a, b
2344   1498 FD 74         sle ; <=
2345   149A E4            pop a
2346   149B             ; END RELATIONAL
2347   149B FD A7         sand a, b ; &&
2348   149D E4            pop a
2349   149E FD A8         sor a, b ; ||
2350   14A0 11            mov a, b
2351   14A1 FA 05 00      lea d, [bp + 5] ; $c
2352   14A4 32            mov bl, [d]
2353   14A5 A7 00         mov bh, 0
2354   14A7             ; START RELATIONAL
2355   14A7 D7            push a
2356   14A8 11            mov a, b
2357   14A9 26 5F 00      mov b, $5f
2358   14AC B0            cmp a, b
2359   14AD FD 71         seq ; ==
2360   14AF E4            pop a
2361   14B0             ; END RELATIONAL
2362   14B0 FD A8         sor a, b ; ||
2363   14B2 E4            pop a
2364   14B3 F9            leave
2365   14B4 09            ret
2366   14B5             
2367   14B5             toupper:
2368   14B5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2369   14B8             ;; if (ch >= 'a' && ch <= 'z') { 
2370   14B8             _if33_cond:
2371   14B8 FA 05 00      lea d, [bp + 5] ; $ch
2372   14BB 32            mov bl, [d]
2373   14BC A7 00         mov bh, 0
2374   14BE             ; START RELATIONAL
2375   14BE D7            push a
2376   14BF 11            mov a, b
2377   14C0 26 61 00      mov b, $61
2378   14C3 B0            cmp a, b
2379   14C4 FD 80         sge ; >=
2380   14C6 E4            pop a
2381   14C7             ; END RELATIONAL
2382   14C7 D7            push a
2383   14C8 11            mov a, b
2384   14C9 FA 05 00      lea d, [bp + 5] ; $ch
2385   14CC 32            mov bl, [d]
2386   14CD A7 00         mov bh, 0
2387   14CF             ; START RELATIONAL
2388   14CF D7            push a
2389   14D0 11            mov a, b
2390   14D1 26 7A 00      mov b, $7a
2391   14D4 B0            cmp a, b
2392   14D5 FD 74         sle ; <=
2393   14D7 E4            pop a
2394   14D8             ; END RELATIONAL
2395   14D8 FD A7         sand a, b ; &&
2396   14DA E4            pop a
2397   14DB C0 00 00      cmp b, 0
2398   14DE C6 F8 14      je _if33_else
2399   14E1             _if33_true:
2400   14E1             ;; return ch - 'a' + 'A'; 
2401   14E1 FA 05 00      lea d, [bp + 5] ; $ch
2402   14E4 32            mov bl, [d]
2403   14E5 A7 00         mov bh, 0
2404   14E7             ; START TERMS
2405   14E7 D7            push a
2406   14E8 11            mov a, b
2407   14E9 26 61 00      mov b, $61
2408   14EC 60            sub a, b
2409   14ED 26 41 00      mov b, $41
2410   14F0 54            add a, b
2411   14F1 27            mov b, a
2412   14F2 E4            pop a
2413   14F3             ; END TERMS
2414   14F3 F9            leave
2415   14F4 09            ret
2416   14F5 0A 00 15      jmp _if33_exit
2417   14F8             _if33_else:
2418   14F8             ;; return ch; 
2419   14F8 FA 05 00      lea d, [bp + 5] ; $ch
2420   14FB 32            mov bl, [d]
2421   14FC A7 00         mov bh, 0
2422   14FE F9            leave
2423   14FF 09            ret
2424   1500             _if33_exit:
2425   1500 F9            leave
2426   1501 09            ret
2427   1502             
2428   1502             is_delimiter:
2429   1502 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2430   1505             ;; if( 
2431   1505             _if34_cond:
2432   1505 FA 05 00      lea d, [bp + 5] ; $c
2433   1508 32            mov bl, [d]
2434   1509 A7 00         mov bh, 0
2435   150B             ; START RELATIONAL
2436   150B D7            push a
2437   150C 11            mov a, b
2438   150D 26 40 00      mov b, $40
2439   1510 B0            cmp a, b
2440   1511 FD 71         seq ; ==
2441   1513 E4            pop a
2442   1514             ; END RELATIONAL
2443   1514 D7            push a
2444   1515 11            mov a, b
2445   1516 FA 05 00      lea d, [bp + 5] ; $c
2446   1519 32            mov bl, [d]
2447   151A A7 00         mov bh, 0
2448   151C             ; START RELATIONAL
2449   151C D7            push a
2450   151D 11            mov a, b
2451   151E 26 23 00      mov b, $23
2452   1521 B0            cmp a, b
2453   1522 FD 71         seq ; ==
2454   1524 E4            pop a
2455   1525             ; END RELATIONAL
2456   1525 FD A8         sor a, b ; ||
2457   1527 11            mov a, b
2458   1528 FA 05 00      lea d, [bp + 5] ; $c
2459   152B 32            mov bl, [d]
2460   152C A7 00         mov bh, 0
2461   152E             ; START RELATIONAL
2462   152E D7            push a
2463   152F 11            mov a, b
2464   1530 26 24 00      mov b, $24
2465   1533 B0            cmp a, b
2466   1534 FD 71         seq ; ==
2467   1536 E4            pop a
2468   1537             ; END RELATIONAL
2469   1537 FD A8         sor a, b ; ||
2470   1539 11            mov a, b
2471   153A FA 05 00      lea d, [bp + 5] ; $c
2472   153D 32            mov bl, [d]
2473   153E A7 00         mov bh, 0
2474   1540             ; START RELATIONAL
2475   1540 D7            push a
2476   1541 11            mov a, b
2477   1542 26 2B 00      mov b, $2b
2478   1545 B0            cmp a, b
2479   1546 FD 71         seq ; ==
2480   1548 E4            pop a
2481   1549             ; END RELATIONAL
2482   1549 FD A8         sor a, b ; ||
2483   154B 11            mov a, b
2484   154C FA 05 00      lea d, [bp + 5] ; $c
2485   154F 32            mov bl, [d]
2486   1550 A7 00         mov bh, 0
2487   1552             ; START RELATIONAL
2488   1552 D7            push a
2489   1553 11            mov a, b
2490   1554 26 2D 00      mov b, $2d
2491   1557 B0            cmp a, b
2492   1558 FD 71         seq ; ==
2493   155A E4            pop a
2494   155B             ; END RELATIONAL
2495   155B FD A8         sor a, b ; ||
2496   155D 11            mov a, b
2497   155E FA 05 00      lea d, [bp + 5] ; $c
2498   1561 32            mov bl, [d]
2499   1562 A7 00         mov bh, 0
2500   1564             ; START RELATIONAL
2501   1564 D7            push a
2502   1565 11            mov a, b
2503   1566 26 2A 00      mov b, $2a
2504   1569 B0            cmp a, b
2505   156A FD 71         seq ; ==
2506   156C E4            pop a
2507   156D             ; END RELATIONAL
2508   156D FD A8         sor a, b ; ||
2509   156F 11            mov a, b
2510   1570 FA 05 00      lea d, [bp + 5] ; $c
2511   1573 32            mov bl, [d]
2512   1574 A7 00         mov bh, 0
2513   1576             ; START RELATIONAL
2514   1576 D7            push a
2515   1577 11            mov a, b
2516   1578 26 2F 00      mov b, $2f
2517   157B B0            cmp a, b
2518   157C FD 71         seq ; ==
2519   157E E4            pop a
2520   157F             ; END RELATIONAL
2521   157F FD A8         sor a, b ; ||
2522   1581 11            mov a, b
2523   1582 FA 05 00      lea d, [bp + 5] ; $c
2524   1585 32            mov bl, [d]
2525   1586 A7 00         mov bh, 0
2526   1588             ; START RELATIONAL
2527   1588 D7            push a
2528   1589 11            mov a, b
2529   158A 26 25 00      mov b, $25
2530   158D B0            cmp a, b
2531   158E FD 71         seq ; ==
2532   1590 E4            pop a
2533   1591             ; END RELATIONAL
2534   1591 FD A8         sor a, b ; ||
2535   1593 11            mov a, b
2536   1594 FA 05 00      lea d, [bp + 5] ; $c
2537   1597 32            mov bl, [d]
2538   1598 A7 00         mov bh, 0
2539   159A             ; START RELATIONAL
2540   159A D7            push a
2541   159B 11            mov a, b
2542   159C 26 5B 00      mov b, $5b
2543   159F B0            cmp a, b
2544   15A0 FD 71         seq ; ==
2545   15A2 E4            pop a
2546   15A3             ; END RELATIONAL
2547   15A3 FD A8         sor a, b ; ||
2548   15A5 11            mov a, b
2549   15A6 FA 05 00      lea d, [bp + 5] ; $c
2550   15A9 32            mov bl, [d]
2551   15AA A7 00         mov bh, 0
2552   15AC             ; START RELATIONAL
2553   15AC D7            push a
2554   15AD 11            mov a, b
2555   15AE 26 5D 00      mov b, $5d
2556   15B1 B0            cmp a, b
2557   15B2 FD 71         seq ; ==
2558   15B4 E4            pop a
2559   15B5             ; END RELATIONAL
2560   15B5 FD A8         sor a, b ; ||
2561   15B7 11            mov a, b
2562   15B8 FA 05 00      lea d, [bp + 5] ; $c
2563   15BB 32            mov bl, [d]
2564   15BC A7 00         mov bh, 0
2565   15BE             ; START RELATIONAL
2566   15BE D7            push a
2567   15BF 11            mov a, b
2568   15C0 26 28 00      mov b, $28
2569   15C3 B0            cmp a, b
2570   15C4 FD 71         seq ; ==
2571   15C6 E4            pop a
2572   15C7             ; END RELATIONAL
2573   15C7 FD A8         sor a, b ; ||
2574   15C9 11            mov a, b
2575   15CA FA 05 00      lea d, [bp + 5] ; $c
2576   15CD 32            mov bl, [d]
2577   15CE A7 00         mov bh, 0
2578   15D0             ; START RELATIONAL
2579   15D0 D7            push a
2580   15D1 11            mov a, b
2581   15D2 26 29 00      mov b, $29
2582   15D5 B0            cmp a, b
2583   15D6 FD 71         seq ; ==
2584   15D8 E4            pop a
2585   15D9             ; END RELATIONAL
2586   15D9 FD A8         sor a, b ; ||
2587   15DB 11            mov a, b
2588   15DC FA 05 00      lea d, [bp + 5] ; $c
2589   15DF 32            mov bl, [d]
2590   15E0 A7 00         mov bh, 0
2591   15E2             ; START RELATIONAL
2592   15E2 D7            push a
2593   15E3 11            mov a, b
2594   15E4 26 7B 00      mov b, $7b
2595   15E7 B0            cmp a, b
2596   15E8 FD 71         seq ; ==
2597   15EA E4            pop a
2598   15EB             ; END RELATIONAL
2599   15EB FD A8         sor a, b ; ||
2600   15ED 11            mov a, b
2601   15EE FA 05 00      lea d, [bp + 5] ; $c
2602   15F1 32            mov bl, [d]
2603   15F2 A7 00         mov bh, 0
2604   15F4             ; START RELATIONAL
2605   15F4 D7            push a
2606   15F5 11            mov a, b
2607   15F6 26 7D 00      mov b, $7d
2608   15F9 B0            cmp a, b
2609   15FA FD 71         seq ; ==
2610   15FC E4            pop a
2611   15FD             ; END RELATIONAL
2612   15FD FD A8         sor a, b ; ||
2613   15FF 11            mov a, b
2614   1600 FA 05 00      lea d, [bp + 5] ; $c
2615   1603 32            mov bl, [d]
2616   1604 A7 00         mov bh, 0
2617   1606             ; START RELATIONAL
2618   1606 D7            push a
2619   1607 11            mov a, b
2620   1608 26 3A 00      mov b, $3a
2621   160B B0            cmp a, b
2622   160C FD 71         seq ; ==
2623   160E E4            pop a
2624   160F             ; END RELATIONAL
2625   160F FD A8         sor a, b ; ||
2626   1611 11            mov a, b
2627   1612 FA 05 00      lea d, [bp + 5] ; $c
2628   1615 32            mov bl, [d]
2629   1616 A7 00         mov bh, 0
2630   1618             ; START RELATIONAL
2631   1618 D7            push a
2632   1619 11            mov a, b
2633   161A 26 3B 00      mov b, $3b
2634   161D B0            cmp a, b
2635   161E FD 71         seq ; ==
2636   1620 E4            pop a
2637   1621             ; END RELATIONAL
2638   1621 FD A8         sor a, b ; ||
2639   1623 11            mov a, b
2640   1624 FA 05 00      lea d, [bp + 5] ; $c
2641   1627 32            mov bl, [d]
2642   1628 A7 00         mov bh, 0
2643   162A             ; START RELATIONAL
2644   162A D7            push a
2645   162B 11            mov a, b
2646   162C 26 3C 00      mov b, $3c
2647   162F B0            cmp a, b
2648   1630 FD 71         seq ; ==
2649   1632 E4            pop a
2650   1633             ; END RELATIONAL
2651   1633 FD A8         sor a, b ; ||
2652   1635 11            mov a, b
2653   1636 FA 05 00      lea d, [bp + 5] ; $c
2654   1639 32            mov bl, [d]
2655   163A A7 00         mov bh, 0
2656   163C             ; START RELATIONAL
2657   163C D7            push a
2658   163D 11            mov a, b
2659   163E 26 3E 00      mov b, $3e
2660   1641 B0            cmp a, b
2661   1642 FD 71         seq ; ==
2662   1644 E4            pop a
2663   1645             ; END RELATIONAL
2664   1645 FD A8         sor a, b ; ||
2665   1647 11            mov a, b
2666   1648 FA 05 00      lea d, [bp + 5] ; $c
2667   164B 32            mov bl, [d]
2668   164C A7 00         mov bh, 0
2669   164E             ; START RELATIONAL
2670   164E D7            push a
2671   164F 11            mov a, b
2672   1650 26 3D 00      mov b, $3d
2673   1653 B0            cmp a, b
2674   1654 FD 71         seq ; ==
2675   1656 E4            pop a
2676   1657             ; END RELATIONAL
2677   1657 FD A8         sor a, b ; ||
2678   1659 11            mov a, b
2679   165A FA 05 00      lea d, [bp + 5] ; $c
2680   165D 32            mov bl, [d]
2681   165E A7 00         mov bh, 0
2682   1660             ; START RELATIONAL
2683   1660 D7            push a
2684   1661 11            mov a, b
2685   1662 26 21 00      mov b, $21
2686   1665 B0            cmp a, b
2687   1666 FD 71         seq ; ==
2688   1668 E4            pop a
2689   1669             ; END RELATIONAL
2690   1669 FD A8         sor a, b ; ||
2691   166B 11            mov a, b
2692   166C FA 05 00      lea d, [bp + 5] ; $c
2693   166F 32            mov bl, [d]
2694   1670 A7 00         mov bh, 0
2695   1672             ; START RELATIONAL
2696   1672 D7            push a
2697   1673 11            mov a, b
2698   1674 26 5E 00      mov b, $5e
2699   1677 B0            cmp a, b
2700   1678 FD 71         seq ; ==
2701   167A E4            pop a
2702   167B             ; END RELATIONAL
2703   167B FD A8         sor a, b ; ||
2704   167D 11            mov a, b
2705   167E FA 05 00      lea d, [bp + 5] ; $c
2706   1681 32            mov bl, [d]
2707   1682 A7 00         mov bh, 0
2708   1684             ; START RELATIONAL
2709   1684 D7            push a
2710   1685 11            mov a, b
2711   1686 26 26 00      mov b, $26
2712   1689 B0            cmp a, b
2713   168A FD 71         seq ; ==
2714   168C E4            pop a
2715   168D             ; END RELATIONAL
2716   168D FD A8         sor a, b ; ||
2717   168F 11            mov a, b
2718   1690 FA 05 00      lea d, [bp + 5] ; $c
2719   1693 32            mov bl, [d]
2720   1694 A7 00         mov bh, 0
2721   1696             ; START RELATIONAL
2722   1696 D7            push a
2723   1697 11            mov a, b
2724   1698 26 7C 00      mov b, $7c
2725   169B B0            cmp a, b
2726   169C FD 71         seq ; ==
2727   169E E4            pop a
2728   169F             ; END RELATIONAL
2729   169F FD A8         sor a, b ; ||
2730   16A1 11            mov a, b
2731   16A2 FA 05 00      lea d, [bp + 5] ; $c
2732   16A5 32            mov bl, [d]
2733   16A6 A7 00         mov bh, 0
2734   16A8             ; START RELATIONAL
2735   16A8 D7            push a
2736   16A9 11            mov a, b
2737   16AA 26 7E 00      mov b, $7e
2738   16AD B0            cmp a, b
2739   16AE FD 71         seq ; ==
2740   16B0 E4            pop a
2741   16B1             ; END RELATIONAL
2742   16B1 FD A8         sor a, b ; ||
2743   16B3 11            mov a, b
2744   16B4 FA 05 00      lea d, [bp + 5] ; $c
2745   16B7 32            mov bl, [d]
2746   16B8 A7 00         mov bh, 0
2747   16BA             ; START RELATIONAL
2748   16BA D7            push a
2749   16BB 11            mov a, b
2750   16BC 26 2E 00      mov b, $2e
2751   16BF B0            cmp a, b
2752   16C0 FD 71         seq ; ==
2753   16C2 E4            pop a
2754   16C3             ; END RELATIONAL
2755   16C3 FD A8         sor a, b ; ||
2756   16C5 E4            pop a
2757   16C6 C0 00 00      cmp b, 0
2758   16C9 C6 D4 16      je _if34_else
2759   16CC             _if34_true:
2760   16CC             ;; return 1; 
2761   16CC 26 01 00      mov b, $1
2762   16CF F9            leave
2763   16D0 09            ret
2764   16D1 0A D9 16      jmp _if34_exit
2765   16D4             _if34_else:
2766   16D4             ;; return 0; 
2767   16D4 26 00 00      mov b, $0
2768   16D7 F9            leave
2769   16D8 09            ret
2770   16D9             _if34_exit:
2771   16D9 F9            leave
2772   16DA 09            ret
2773   16DB             
2774   16DB             getnum:
2775   16DB F8 00 00      enter 0 ; (push bp; mov bp, sp)
2776   16DE             ; $n 
2777   16DE 52 02 00      sub sp, 2
2778   16E1             ;; print(prompt); 
2779   16E1 FA 05 00      lea d, [bp + 5] ; $prompt
2780   16E4 2A            mov b, [d]
2781   16E5 FD AB         swp b
2782   16E7 D8            push b
2783   16E8 07 BC 0E      call print
2784   16EB 51 02 00      add sp, 2
2785   16EE             ;; n = scann(); 
2786   16EE FA FF FF      lea d, [bp + -1] ; $n
2787   16F1 DA            push d
2788   16F2 07 97 0E      call scann
2789   16F5 E7            pop d
2790   16F6 FD 43         mov [d], b
2791   16F8             ;; return n; 
2792   16F8 FA FF FF      lea d, [bp + -1] ; $n
2793   16FB 2A            mov b, [d]
2794   16FC F9            leave
2795   16FD 09            ret
2796   16FE             
2797   16FE             getlet:
2798   16FE F8 00 00      enter 0 ; (push bp; mov bp, sp)
2799   1701             ; $c 
2800   1701 19 0A         mov al, $a
2801   1703 40 00 00      mov [bp + 0], al
2802   1706 52 01 00      sub sp, 1
2803   1709             ;; print(prompt); 
2804   1709 FA 05 00      lea d, [bp + 5] ; $prompt
2805   170C 2A            mov b, [d]
2806   170D FD AB         swp b
2807   170F D8            push b
2808   1710 07 BC 0E      call print
2809   1713 51 02 00      add sp, 2
2810   1716             ;; while (c == '\n') { 
2811   1716             _while35_cond:
2812   1716 FA 00 00      lea d, [bp + 0] ; $c
2813   1719 32            mov bl, [d]
2814   171A A7 00         mov bh, 0
2815   171C             ; START RELATIONAL
2816   171C D7            push a
2817   171D 11            mov a, b
2818   171E 26 0A 00      mov b, $a
2819   1721 B0            cmp a, b
2820   1722 FD 71         seq ; ==
2821   1724 E4            pop a
2822   1725             ; END RELATIONAL
2823   1725 C0 00 00      cmp b, 0
2824   1728 C6 38 17      je _while35_exit
2825   172B             _while35_block:
2826   172B             ;; c = getchar(); 
2827   172B FA 00 00      lea d, [bp + 0] ; $c
2828   172E DA            push d
2829   172F 07 81 0E      call getchar
2830   1732 E7            pop d
2831   1733 FD 3E         mov [d], bl
2832   1735 0A 16 17      jmp _while35_cond
2833   1738             _while35_exit:
2834   1738             ;; return toupper(c); 
2835   1738 FA 00 00      lea d, [bp + 0] ; $c
2836   173B 32            mov bl, [d]
2837   173C A7 00         mov bh, 0
2838   173E DD            push bl
2839   173F 07 B5 14      call toupper
2840   1742 51 01 00      add sp, 1
2841   1745 F9            leave
2842   1746 09            ret
2843   1747             
2844   1747             print_instructions:
2845   1747 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2846   174A             ;; print("WELCOME TO 'HUNT THE WUMPUS'\n"); 
2847   174A 26 6E 25      mov b, __s5 ; "WELCOME TO 'HUNT THE WUMPUS'\n"
2848   174D FD AB         swp b
2849   174F D8            push b
2850   1750 07 BC 0E      call print
2851   1753 51 02 00      add sp, 2
2852   1756             ;; print("THE WUMPUS LIVES IN A CAVE OF 20 ROOMS. EACH ROOM\n"); 
2853   1756 26 8C 25      mov b, __s6 ; "THE WUMPUS LIVES IN A CAVE OF 20 ROOMS. EACH ROOM\n"
2854   1759 FD AB         swp b
2855   175B D8            push b
2856   175C 07 BC 0E      call print
2857   175F 51 02 00      add sp, 2
2858   1762             ;; print("HAS 3 TUNNELS LEADING TO OTHER ROOMS. (LOOK AT A\n"); 
2859   1762 26 BF 25      mov b, __s7 ; "HAS 3 TUNNELS LEADING TO OTHER ROOMS. (LOOK AT A\n"
2860   1765 FD AB         swp b
2861   1767 D8            push b
2862   1768 07 BC 0E      call print
2863   176B 51 02 00      add sp, 2
2864   176E             ;; print("DODECAHEDRON TO SEE HOW THIS WORKS-IF YOU DON'T KNOW\n"); 
2865   176E 26 F1 25      mov b, __s8 ; "DODECAHEDRON TO SEE HOW THIS WORKS-IF YOU DON'T KNOW\n"
2866   1771 FD AB         swp b
2867   1773 D8            push b
2868   1774 07 BC 0E      call print
2869   1777 51 02 00      add sp, 2
2870   177A             ;; print("WHAT A DODECAHEDRON IS, ASK SOMEONE)\n"); 
2871   177A 26 26 26      mov b, __s9 ; "WHAT A DODECAHEDRON IS, ASK SOMEONE)\n"
2872   177D FD AB         swp b
2873   177F D8            push b
2874   1780 07 BC 0E      call print
2875   1783 51 02 00      add sp, 2
2876   1786             ;; print("\n"); 
2877   1786 26 4C 26      mov b, __s10 ; "\n"
2878   1789 FD AB         swp b
2879   178B D8            push b
2880   178C 07 BC 0E      call print
2881   178F 51 02 00      add sp, 2
2882   1792             ;; print(" HAZARDS:\n"); 
2883   1792 26 4E 26      mov b, __s11 ; " HAZARDS:\n"
2884   1795 FD AB         swp b
2885   1797 D8            push b
2886   1798 07 BC 0E      call print
2887   179B 51 02 00      add sp, 2
2888   179E             ;; print(" BOTTOMLESS PITS: TWO ROOMS HAVE BOTTOMLESS PITS IN THEM\n"); 
2889   179E 26 59 26      mov b, __s12 ; " BOTTOMLESS PITS: TWO ROOMS HAVE BOTTOMLESS PITS IN THEM\n"
2890   17A1 FD AB         swp b
2891   17A3 D8            push b
2892   17A4 07 BC 0E      call print
2893   17A7 51 02 00      add sp, 2
2894   17AA             ;; print(" IF YOU GO THERE, YOU FALL INTO THE PIT (& LOSE!)\n"); 
2895   17AA 26 93 26      mov b, __s13 ; " IF YOU GO THERE, YOU FALL INTO THE PIT (& LOSE!)\n"
2896   17AD FD AB         swp b
2897   17AF D8            push b
2898   17B0 07 BC 0E      call print
2899   17B3 51 02 00      add sp, 2
2900   17B6             ;; print(" SUPER BATS     : TWO OTHER ROOMS HAVE SUPER BATS. IF YOU\n"); 
2901   17B6 26 C6 26      mov b, __s14 ; " SUPER BATS     : TWO OTHER ROOMS HAVE SUPER BATS. IF YOU\n"
2902   17B9 FD AB         swp b
2903   17BB D8            push b
2904   17BC 07 BC 0E      call print
2905   17BF 51 02 00      add sp, 2
2906   17C2             ;; print(" GO THERE, A BAT GRABS YOU AND TAKES YOU TO SOME OTHER\n"); 
2907   17C2 26 01 27      mov b, __s15 ; " GO THERE, A BAT GRABS YOU AND TAKES YOU TO SOME OTHER\n"
2908   17C5 FD AB         swp b
2909   17C7 D8            push b
2910   17C8 07 BC 0E      call print
2911   17CB 51 02 00      add sp, 2
2912   17CE             ;; print(" ROOM AT RANDOM. (WHICH MAY BE TROUBLESOME)\n"); 
2913   17CE 26 39 27      mov b, __s16 ; " ROOM AT RANDOM. (WHICH MAY BE TROUBLESOME)\n"
2914   17D1 FD AB         swp b
2915   17D3 D8            push b
2916   17D4 07 BC 0E      call print
2917   17D7 51 02 00      add sp, 2
2918   17DA             ;; print(" WUMPUS:\n"); 
2919   17DA 26 66 27      mov b, __s17 ; " WUMPUS:\n"
2920   17DD FD AB         swp b
2921   17DF D8            push b
2922   17E0 07 BC 0E      call print
2923   17E3 51 02 00      add sp, 2
2924   17E6             ;; print(" THE WUMPUS IS NOT BOTHERED BY HAZARDS (HE HAS SUCKER\n"); 
2925   17E6 26 70 27      mov b, __s18 ; " THE WUMPUS IS NOT BOTHERED BY HAZARDS (HE HAS SUCKER\n"
2926   17E9 FD AB         swp b
2927   17EB D8            push b
2928   17EC 07 BC 0E      call print
2929   17EF 51 02 00      add sp, 2
2930   17F2             ;; print(" FEET AND IS TOO BIG FOR A BAT TO LIFT).  USUALLY\n"); 
2931   17F2 26 A7 27      mov b, __s19 ; " FEET AND IS TOO BIG FOR A BAT TO LIFT).  USUALLY\n"
2932   17F5 FD AB         swp b
2933   17F7 D8            push b
2934   17F8 07 BC 0E      call print
2935   17FB 51 02 00      add sp, 2
2936   17FE             ;; print(" HE IS ASLEEP.  TWO THINGS WAKE HIM UP: YOU SHOOTING AN\n"); 
2937   17FE 26 DA 27      mov b, __s20 ; " HE IS ASLEEP.  TWO THINGS WAKE HIM UP: YOU SHOOTING AN\n"
2938   1801 FD AB         swp b
2939   1803 D8            push b
2940   1804 07 BC 0E      call print
2941   1807 51 02 00      add sp, 2
2942   180A             ;; print(" ARROW OR YOU ENTERING HIS ROOM.\n"); 
2943   180A 26 13 28      mov b, __s21 ; " ARROW OR YOU ENTERING HIS ROOM.\n"
2944   180D FD AB         swp b
2945   180F D8            push b
2946   1810 07 BC 0E      call print
2947   1813 51 02 00      add sp, 2
2948   1816             ;; print(" IF THE WUMPUS WAKES HE MOVES (P=.75) ONE ROOM\n"); 
2949   1816 26 35 28      mov b, __s22 ; " IF THE WUMPUS WAKES HE MOVES (P=.75) ONE ROOM\n"
2950   1819 FD AB         swp b
2951   181B D8            push b
2952   181C 07 BC 0E      call print
2953   181F 51 02 00      add sp, 2
2954   1822             ;; print(" OR STAYS STILL (P=.25).  AFTER THAT, IF HE IS WHERE YOU\n"); 
2955   1822 26 65 28      mov b, __s23 ; " OR STAYS STILL (P=.25).  AFTER THAT, IF HE IS WHERE YOU\n"
2956   1825 FD AB         swp b
2957   1827 D8            push b
2958   1828 07 BC 0E      call print
2959   182B 51 02 00      add sp, 2
2960   182E             ;; print(" ARE, HE EATS YOU UP AND YOU LOSE!\n"); 
2961   182E 26 9F 28      mov b, __s24 ; " ARE, HE EATS YOU UP AND YOU LOSE!\n"
2962   1831 FD AB         swp b
2963   1833 D8            push b
2964   1834 07 BC 0E      call print
2965   1837 51 02 00      add sp, 2
2966   183A             ;; print("\n"); 
2967   183A 26 4C 26      mov b, __s10 ; "\n"
2968   183D FD AB         swp b
2969   183F D8            push b
2970   1840 07 BC 0E      call print
2971   1843 51 02 00      add sp, 2
2972   1846             ;; print(" YOU:\n"); 
2973   1846 26 C3 28      mov b, __s25 ; " YOU:\n"
2974   1849 FD AB         swp b
2975   184B D8            push b
2976   184C 07 BC 0E      call print
2977   184F 51 02 00      add sp, 2
2978   1852             ;; print(" EACH TURN YOU MAY MOVE OR SHOOT A CROOKED ARROW\n"); 
2979   1852 26 CA 28      mov b, __s26 ; " EACH TURN YOU MAY MOVE OR SHOOT A CROOKED ARROW\n"
2980   1855 FD AB         swp b
2981   1857 D8            push b
2982   1858 07 BC 0E      call print
2983   185B 51 02 00      add sp, 2
2984   185E             ;; print(" MOVING:  YOU CAN MOVE ONE ROOM (THRU ONE TUNNEL)\n"); 
2985   185E 26 FC 28      mov b, __s27 ; " MOVING:  YOU CAN MOVE ONE ROOM (THRU ONE TUNNEL)\n"
2986   1861 FD AB         swp b
2987   1863 D8            push b
2988   1864 07 BC 0E      call print
2989   1867 51 02 00      add sp, 2
2990   186A             ;; print(" ARROWS:  YOU HAVE 5 ARROWS.  YOU LOSE WHEN YOU RUN OUT\n"); 
2991   186A 26 2F 29      mov b, __s28 ; " ARROWS:  YOU HAVE 5 ARROWS.  YOU LOSE WHEN YOU RUN OUT\n"
2992   186D FD AB         swp b
2993   186F D8            push b
2994   1870 07 BC 0E      call print
2995   1873 51 02 00      add sp, 2
2996   1876             ;; print(" EACH ARROW CAN GO FROM 1 TO 5 ROOMS. YOU AIM BY TELLING\n"); 
2997   1876 26 68 29      mov b, __s29 ; " EACH ARROW CAN GO FROM 1 TO 5 ROOMS. YOU AIM BY TELLING\n"
2998   1879 FD AB         swp b
2999   187B D8            push b
3000   187C 07 BC 0E      call print
3001   187F 51 02 00      add sp, 2
3002   1882             ;; print("   THE COMPUTER THE ROOM#S YOU WANT THE ARROW TO GO TO.\n"); 
3003   1882 26 A2 29      mov b, __s30 ; "   THE COMPUTER THE ROOM#S YOU WANT THE ARROW TO GO TO.\n"
3004   1885 FD AB         swp b
3005   1887 D8            push b
3006   1888 07 BC 0E      call print
3007   188B 51 02 00      add sp, 2
3008   188E             ;; print("   IF THE ARROW CAN'T GO THAT WAY (IF NO TUNNEL) IT MOVES\n"); 
3009   188E 26 DB 29      mov b, __s31 ; "   IF THE ARROW CAN'T GO THAT WAY (IF NO TUNNEL) IT MOVES\n"
3010   1891 FD AB         swp b
3011   1893 D8            push b
3012   1894 07 BC 0E      call print
3013   1897 51 02 00      add sp, 2
3014   189A             ;; print("   AT RANDOM TO THE NEXT ROOM.\n"); 
3015   189A 26 15 2A      mov b, __s32 ; "   AT RANDOM TO THE NEXT ROOM.\n"
3016   189D FD AB         swp b
3017   189F D8            push b
3018   18A0 07 BC 0E      call print
3019   18A3 51 02 00      add sp, 2
3020   18A6             ;; print("     IF THE ARROW HITS THE WUMPUS, YOU WIN.\n"); 
3021   18A6 26 35 2A      mov b, __s33 ; "     IF THE ARROW HITS THE WUMPUS, YOU WIN.\n"
3022   18A9 FD AB         swp b
3023   18AB D8            push b
3024   18AC 07 BC 0E      call print
3025   18AF 51 02 00      add sp, 2
3026   18B2             ;; print("     IF THE ARROW HITS YOU, YOU LOSE.\n"); 
3027   18B2 26 62 2A      mov b, __s34 ; "     IF THE ARROW HITS YOU, YOU LOSE.\n"
3028   18B5 FD AB         swp b
3029   18B7 D8            push b
3030   18B8 07 BC 0E      call print
3031   18BB 51 02 00      add sp, 2
3032   18BE             ;; print(" WARNINGS:\n"); 
3033   18BE 26 89 2A      mov b, __s35 ; " WARNINGS:\n"
3034   18C1 FD AB         swp b
3035   18C3 D8            push b
3036   18C4 07 BC 0E      call print
3037   18C7 51 02 00      add sp, 2
3038   18CA             ;; print(" WHEN YOU ARE ONE ROOM AWAY FROM A WUMPUS OR HAZARD,\n"); 
3039   18CA 26 95 2A      mov b, __s36 ; " WHEN YOU ARE ONE ROOM AWAY FROM A WUMPUS OR HAZARD,\n"
3040   18CD FD AB         swp b
3041   18CF D8            push b
3042   18D0 07 BC 0E      call print
3043   18D3 51 02 00      add sp, 2
3044   18D6             ;; print(" THE COMPUTER SAYS:\n"); 
3045   18D6 26 CB 2A      mov b, __s37 ; " THE COMPUTER SAYS:\n"
3046   18D9 FD AB         swp b
3047   18DB D8            push b
3048   18DC 07 BC 0E      call print
3049   18DF 51 02 00      add sp, 2
3050   18E2             ;; print(" WUMPUS:  'I SMELL A WUMPUS'\n"); 
3051   18E2 26 E0 2A      mov b, __s38 ; " WUMPUS:  'I SMELL A WUMPUS'\n"
3052   18E5 FD AB         swp b
3053   18E7 D8            push b
3054   18E8 07 BC 0E      call print
3055   18EB 51 02 00      add sp, 2
3056   18EE             ;; print(" BAT   :  'BATS NEARBY'\n"); 
3057   18EE 26 FE 2A      mov b, __s39 ; " BAT   :  'BATS NEARBY'\n"
3058   18F1 FD AB         swp b
3059   18F3 D8            push b
3060   18F4 07 BC 0E      call print
3061   18F7 51 02 00      add sp, 2
3062   18FA             ;; print(" PIT   :  'I FEEL A DRAFT'\n"); 
3063   18FA 26 17 2B      mov b, __s40 ; " PIT   :  'I FEEL A DRAFT'\n"
3064   18FD FD AB         swp b
3065   18FF D8            push b
3066   1900 07 BC 0E      call print
3067   1903 51 02 00      add sp, 2
3068   1906             ;; print("\n"); 
3069   1906 26 4C 26      mov b, __s10 ; "\n"
3070   1909 FD AB         swp b
3071   190B D8            push b
3072   190C 07 BC 0E      call print
3073   190F 51 02 00      add sp, 2
3074   1912 F9            leave
3075   1913 09            ret
3076   1914             
3077   1914             show_room:
3078   1914 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3079   1917             ; $room 
3080   1917             ; $k 
3081   1917 52 04 00      sub sp, 4
3082   191A             ;; print("\n"); 
3083   191A 26 4C 26      mov b, __s10 ; "\n"
3084   191D FD AB         swp b
3085   191F D8            push b
3086   1920 07 BC 0E      call print
3087   1923 51 02 00      add sp, 2
3088   1926             ;; for (k = 0; k < 3; k++) { 
3089   1926             _for36_init:
3090   1926 FA FD FF      lea d, [bp + -3] ; $k
3091   1929 DA            push d
3092   192A 26 00 00      mov b, $0
3093   192D E7            pop d
3094   192E FD 43         mov [d], b
3095   1930             _for36_cond:
3096   1930 FA FD FF      lea d, [bp + -3] ; $k
3097   1933 2A            mov b, [d]
3098   1934             ; START RELATIONAL
3099   1934 D7            push a
3100   1935 11            mov a, b
3101   1936 26 03 00      mov b, $3
3102   1939 B0            cmp a, b
3103   193A FD 73         slt ; < 
3104   193C E4            pop a
3105   193D             ; END RELATIONAL
3106   193D C0 00 00      cmp b, 0
3107   1940 C6 47 1A      je _for36_exit
3108   1943             _for36_block:
3109   1943             ;; room = cave[loc[ 0  ]][k]; 
3110   1943 FA FF FF      lea d, [bp + -1] ; $room
3111   1946 DA            push d
3112   1947 3B 5F 24      mov d, _cave_data ; $cave
3113   194A D7            push a
3114   194B DA            push d
3115   194C 3B 51 24      mov d, _loc_data ; $loc
3116   194F D7            push a
3117   1950 DA            push d
3118   1951 26 00 00      mov b, $0
3119   1954 E7            pop d
3120   1955 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3121   1959 E4            pop a
3122   195A 2A            mov b, [d]
3123   195B E7            pop d
3124   195C FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
3125   1960 DA            push d
3126   1961 FA FD FF      lea d, [bp + -3] ; $k
3127   1964 2A            mov b, [d]
3128   1965 E7            pop d
3129   1966 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3130   196A E4            pop a
3131   196B 2A            mov b, [d]
3132   196C E7            pop d
3133   196D FD 43         mov [d], b
3134   196F             ;; if (room == loc[ 1     ]) { 
3135   196F             _if37_cond:
3136   196F FA FF FF      lea d, [bp + -1] ; $room
3137   1972 2A            mov b, [d]
3138   1973             ; START RELATIONAL
3139   1973 D7            push a
3140   1974 11            mov a, b
3141   1975 3B 51 24      mov d, _loc_data ; $loc
3142   1978 D7            push a
3143   1979 DA            push d
3144   197A 26 01 00      mov b, $1
3145   197D E7            pop d
3146   197E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3147   1982 E4            pop a
3148   1983 2A            mov b, [d]
3149   1984 B0            cmp a, b
3150   1985 FD 71         seq ; ==
3151   1987 E4            pop a
3152   1988             ; END RELATIONAL
3153   1988 C0 00 00      cmp b, 0
3154   198B C6 9D 19      je _if37_else
3155   198E             _if37_true:
3156   198E             ;; print("I SMELL A WUMPUS!\n"); 
3157   198E 26 33 2B      mov b, __s41 ; "I SMELL A WUMPUS!\n"
3158   1991 FD AB         swp b
3159   1993 D8            push b
3160   1994 07 BC 0E      call print
3161   1997 51 02 00      add sp, 2
3162   199A 0A 35 1A      jmp _if37_exit
3163   199D             _if37_else:
3164   199D             ;; if (room == loc[ 2   ] || room == loc[ 3   ]) { 
3165   199D             _if38_cond:
3166   199D FA FF FF      lea d, [bp + -1] ; $room
3167   19A0 2A            mov b, [d]
3168   19A1             ; START RELATIONAL
3169   19A1 D7            push a
3170   19A2 11            mov a, b
3171   19A3 3B 51 24      mov d, _loc_data ; $loc
3172   19A6 D7            push a
3173   19A7 DA            push d
3174   19A8 26 02 00      mov b, $2
3175   19AB E7            pop d
3176   19AC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3177   19B0 E4            pop a
3178   19B1 2A            mov b, [d]
3179   19B2 B0            cmp a, b
3180   19B3 FD 71         seq ; ==
3181   19B5 E4            pop a
3182   19B6             ; END RELATIONAL
3183   19B6 D7            push a
3184   19B7 11            mov a, b
3185   19B8 FA FF FF      lea d, [bp + -1] ; $room
3186   19BB 2A            mov b, [d]
3187   19BC             ; START RELATIONAL
3188   19BC D7            push a
3189   19BD 11            mov a, b
3190   19BE 3B 51 24      mov d, _loc_data ; $loc
3191   19C1 D7            push a
3192   19C2 DA            push d
3193   19C3 26 03 00      mov b, $3
3194   19C6 E7            pop d
3195   19C7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3196   19CB E4            pop a
3197   19CC 2A            mov b, [d]
3198   19CD B0            cmp a, b
3199   19CE FD 71         seq ; ==
3200   19D0 E4            pop a
3201   19D1             ; END RELATIONAL
3202   19D1 FD A8         sor a, b ; ||
3203   19D3 E4            pop a
3204   19D4 C0 00 00      cmp b, 0
3205   19D7 C6 E9 19      je _if38_else
3206   19DA             _if38_true:
3207   19DA             ;; print("I FEEL A DRAFT\n"); 
3208   19DA 26 46 2B      mov b, __s42 ; "I FEEL A DRAFT\n"
3209   19DD FD AB         swp b
3210   19DF D8            push b
3211   19E0 07 BC 0E      call print
3212   19E3 51 02 00      add sp, 2
3213   19E6 0A 35 1A      jmp _if38_exit
3214   19E9             _if38_else:
3215   19E9             ;; if (room == loc[ 4    ] || room == loc[ 5    ]) { 
3216   19E9             _if39_cond:
3217   19E9 FA FF FF      lea d, [bp + -1] ; $room
3218   19EC 2A            mov b, [d]
3219   19ED             ; START RELATIONAL
3220   19ED D7            push a
3221   19EE 11            mov a, b
3222   19EF 3B 51 24      mov d, _loc_data ; $loc
3223   19F2 D7            push a
3224   19F3 DA            push d
3225   19F4 26 04 00      mov b, $4
3226   19F7 E7            pop d
3227   19F8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3228   19FC E4            pop a
3229   19FD 2A            mov b, [d]
3230   19FE B0            cmp a, b
3231   19FF FD 71         seq ; ==
3232   1A01 E4            pop a
3233   1A02             ; END RELATIONAL
3234   1A02 D7            push a
3235   1A03 11            mov a, b
3236   1A04 FA FF FF      lea d, [bp + -1] ; $room
3237   1A07 2A            mov b, [d]
3238   1A08             ; START RELATIONAL
3239   1A08 D7            push a
3240   1A09 11            mov a, b
3241   1A0A 3B 51 24      mov d, _loc_data ; $loc
3242   1A0D D7            push a
3243   1A0E DA            push d
3244   1A0F 26 05 00      mov b, $5
3245   1A12 E7            pop d
3246   1A13 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3247   1A17 E4            pop a
3248   1A18 2A            mov b, [d]
3249   1A19 B0            cmp a, b
3250   1A1A FD 71         seq ; ==
3251   1A1C E4            pop a
3252   1A1D             ; END RELATIONAL
3253   1A1D FD A8         sor a, b ; ||
3254   1A1F E4            pop a
3255   1A20 C0 00 00      cmp b, 0
3256   1A23 C6 35 1A      je _if39_exit
3257   1A26             _if39_true:
3258   1A26             ;; print("BATS NEARBY!\n"); 
3259   1A26 26 56 2B      mov b, __s43 ; "BATS NEARBY!\n"
3260   1A29 FD AB         swp b
3261   1A2B D8            push b
3262   1A2C 07 BC 0E      call print
3263   1A2F 51 02 00      add sp, 2
3264   1A32 0A 35 1A      jmp _if39_exit
3265   1A35             _if39_exit:
3266   1A35             _if38_exit:
3267   1A35             _if37_exit:
3268   1A35             _for36_update:
3269   1A35 FA FD FF      lea d, [bp + -3] ; $k
3270   1A38 2A            mov b, [d]
3271   1A39 FD 79         mov g, b
3272   1A3B FD 77         inc b
3273   1A3D FA FD FF      lea d, [bp + -3] ; $k
3274   1A40 FD 43         mov [d], b
3275   1A42 FD 27         mov b, g
3276   1A44 0A 30 19      jmp _for36_cond
3277   1A47             _for36_exit:
3278   1A47             ;; print("YOU ARE IN ROOM "); printu(loc[ 0  ]+1); print("\n"); 
3279   1A47 26 64 2B      mov b, __s44 ; "YOU ARE IN ROOM "
3280   1A4A FD AB         swp b
3281   1A4C D8            push b
3282   1A4D 07 BC 0E      call print
3283   1A50 51 02 00      add sp, 2
3284   1A53             ;; printu(loc[ 0  ]+1); print("\n"); 
3285   1A53 3B 51 24      mov d, _loc_data ; $loc
3286   1A56 D7            push a
3287   1A57 DA            push d
3288   1A58 26 00 00      mov b, $0
3289   1A5B E7            pop d
3290   1A5C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3291   1A60 E4            pop a
3292   1A61 2A            mov b, [d]
3293   1A62             ; START TERMS
3294   1A62 D7            push a
3295   1A63 11            mov a, b
3296   1A64 26 01 00      mov b, $1
3297   1A67 54            add a, b
3298   1A68 27            mov b, a
3299   1A69 E4            pop a
3300   1A6A             ; END TERMS
3301   1A6A FD AB         swp b
3302   1A6C D8            push b
3303   1A6D 07 88 0D      call printu
3304   1A70 51 02 00      add sp, 2
3305   1A73             ;; print("\n"); 
3306   1A73 26 4C 26      mov b, __s10 ; "\n"
3307   1A76 FD AB         swp b
3308   1A78 D8            push b
3309   1A79 07 BC 0E      call print
3310   1A7C 51 02 00      add sp, 2
3311   1A7F             ;; print("TUNNELS LEAD TO ");  
3312   1A7F 26 75 2B      mov b, __s45 ; "TUNNELS LEAD TO "
3313   1A82 FD AB         swp b
3314   1A84 D8            push b
3315   1A85 07 BC 0E      call print
3316   1A88 51 02 00      add sp, 2
3317   1A8B             ;; printu(cave[loc[ 0  ]][0]+1); 
3318   1A8B 3B 5F 24      mov d, _cave_data ; $cave
3319   1A8E D7            push a
3320   1A8F DA            push d
3321   1A90 3B 51 24      mov d, _loc_data ; $loc
3322   1A93 D7            push a
3323   1A94 DA            push d
3324   1A95 26 00 00      mov b, $0
3325   1A98 E7            pop d
3326   1A99 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3327   1A9D E4            pop a
3328   1A9E 2A            mov b, [d]
3329   1A9F E7            pop d
3330   1AA0 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
3331   1AA4 DA            push d
3332   1AA5 26 00 00      mov b, $0
3333   1AA8 E7            pop d
3334   1AA9 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3335   1AAD E4            pop a
3336   1AAE 2A            mov b, [d]
3337   1AAF             ; START TERMS
3338   1AAF D7            push a
3339   1AB0 11            mov a, b
3340   1AB1 26 01 00      mov b, $1
3341   1AB4 54            add a, b
3342   1AB5 27            mov b, a
3343   1AB6 E4            pop a
3344   1AB7             ; END TERMS
3345   1AB7 FD AB         swp b
3346   1AB9 D8            push b
3347   1ABA 07 88 0D      call printu
3348   1ABD 51 02 00      add sp, 2
3349   1AC0             ;; printu(cave[loc[ 0  ]][1]+1);  
3350   1AC0 3B 5F 24      mov d, _cave_data ; $cave
3351   1AC3 D7            push a
3352   1AC4 DA            push d
3353   1AC5 3B 51 24      mov d, _loc_data ; $loc
3354   1AC8 D7            push a
3355   1AC9 DA            push d
3356   1ACA 26 00 00      mov b, $0
3357   1ACD E7            pop d
3358   1ACE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3359   1AD2 E4            pop a
3360   1AD3 2A            mov b, [d]
3361   1AD4 E7            pop d
3362   1AD5 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
3363   1AD9 DA            push d
3364   1ADA 26 01 00      mov b, $1
3365   1ADD E7            pop d
3366   1ADE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3367   1AE2 E4            pop a
3368   1AE3 2A            mov b, [d]
3369   1AE4             ; START TERMS
3370   1AE4 D7            push a
3371   1AE5 11            mov a, b
3372   1AE6 26 01 00      mov b, $1
3373   1AE9 54            add a, b
3374   1AEA 27            mov b, a
3375   1AEB E4            pop a
3376   1AEC             ; END TERMS
3377   1AEC FD AB         swp b
3378   1AEE D8            push b
3379   1AEF 07 88 0D      call printu
3380   1AF2 51 02 00      add sp, 2
3381   1AF5             ;; printu(cave[loc[ 0  ]][2]+1); 
3382   1AF5 3B 5F 24      mov d, _cave_data ; $cave
3383   1AF8 D7            push a
3384   1AF9 DA            push d
3385   1AFA 3B 51 24      mov d, _loc_data ; $loc
3386   1AFD D7            push a
3387   1AFE DA            push d
3388   1AFF 26 00 00      mov b, $0
3389   1B02 E7            pop d
3390   1B03 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3391   1B07 E4            pop a
3392   1B08 2A            mov b, [d]
3393   1B09 E7            pop d
3394   1B0A FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
3395   1B0E DA            push d
3396   1B0F 26 02 00      mov b, $2
3397   1B12 E7            pop d
3398   1B13 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3399   1B17 E4            pop a
3400   1B18 2A            mov b, [d]
3401   1B19             ; START TERMS
3402   1B19 D7            push a
3403   1B1A 11            mov a, b
3404   1B1B 26 01 00      mov b, $1
3405   1B1E 54            add a, b
3406   1B1F 27            mov b, a
3407   1B20 E4            pop a
3408   1B21             ; END TERMS
3409   1B21 FD AB         swp b
3410   1B23 D8            push b
3411   1B24 07 88 0D      call printu
3412   1B27 51 02 00      add sp, 2
3413   1B2A             ;; print("\n\n"); 
3414   1B2A 26 86 2B      mov b, __s46 ; "\n\n"
3415   1B2D FD AB         swp b
3416   1B2F D8            push b
3417   1B30 07 BC 0E      call print
3418   1B33 51 02 00      add sp, 2
3419   1B36 F9            leave
3420   1B37 09            ret
3421   1B38             
3422   1B38             move_or_shoot:
3423   1B38 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3424   1B3B             ; $c 
3425   1B3B 10 FF FF      mov a, $ffffffff
3426   1B3E 45 FF FF      mov [bp + -1], a
3427   1B41 52 02 00      sub sp, 2
3428   1B44             ;; while ((c != 'S') && (c != 'M')) { 
3429   1B44             _while40_cond:
3430   1B44 FA FF FF      lea d, [bp + -1] ; $c
3431   1B47 2A            mov b, [d]
3432   1B48             ; START RELATIONAL
3433   1B48 D7            push a
3434   1B49 11            mov a, b
3435   1B4A 26 53 00      mov b, $53
3436   1B4D B0            cmp a, b
3437   1B4E FD 72         sneq ; !=
3438   1B50 E4            pop a
3439   1B51             ; END RELATIONAL
3440   1B51 D7            push a
3441   1B52 11            mov a, b
3442   1B53 FA FF FF      lea d, [bp + -1] ; $c
3443   1B56 2A            mov b, [d]
3444   1B57             ; START RELATIONAL
3445   1B57 D7            push a
3446   1B58 11            mov a, b
3447   1B59 26 4D 00      mov b, $4d
3448   1B5C B0            cmp a, b
3449   1B5D FD 72         sneq ; !=
3450   1B5F E4            pop a
3451   1B60             ; END RELATIONAL
3452   1B60 FD A7         sand a, b ; &&
3453   1B62 E4            pop a
3454   1B63 C0 00 00      cmp b, 0
3455   1B66 C6 7F 1B      je _while40_exit
3456   1B69             _while40_block:
3457   1B69             ;; c = getlet("SHOOT OR MOVE (S-M)"); 
3458   1B69 FA FF FF      lea d, [bp + -1] ; $c
3459   1B6C DA            push d
3460   1B6D 26 89 2B      mov b, __s47 ; "SHOOT OR MOVE (S-M)"
3461   1B70 FD AB         swp b
3462   1B72 D8            push b
3463   1B73 07 FE 16      call getlet
3464   1B76 51 02 00      add sp, 2
3465   1B79 E7            pop d
3466   1B7A FD 43         mov [d], b
3467   1B7C 0A 44 1B      jmp _while40_cond
3468   1B7F             _while40_exit:
3469   1B7F             ;; return (c == 'S') ? 1 : 0; 
3470   1B7F             _ternary41_cond:
3471   1B7F FA FF FF      lea d, [bp + -1] ; $c
3472   1B82 2A            mov b, [d]
3473   1B83             ; START RELATIONAL
3474   1B83 D7            push a
3475   1B84 11            mov a, b
3476   1B85 26 53 00      mov b, $53
3477   1B88 B0            cmp a, b
3478   1B89 FD 71         seq ; ==
3479   1B8B E4            pop a
3480   1B8C             ; END RELATIONAL
3481   1B8C C0 00 00      cmp b, 0
3482   1B8F C6 98 1B      je _ternary41_false
3483   1B92             _ternary41_true:
3484   1B92 26 01 00      mov b, $1
3485   1B95 0A 9B 1B      jmp _ternary41_exit
3486   1B98             _ternary41_false:
3487   1B98 26 00 00      mov b, $0
3488   1B9B             _ternary41_exit:
3489   1B9B F9            leave
3490   1B9C 09            ret
3491   1B9D             
3492   1B9D             move_wumpus:
3493   1B9D F8 00 00      enter 0 ; (push bp; mov bp, sp)
3494   1BA0             ; $k 
3495   1BA0 52 02 00      sub sp, 2
3496   1BA3             ;; k = rand() % 4; 
3497   1BA3 FA FF FF      lea d, [bp + -1] ; $k
3498   1BA6 DA            push d
3499   1BA7 07 54 0E      call rand
3500   1BAA             ; START FACTORS
3501   1BAA D7            push a
3502   1BAB 11            mov a, b
3503   1BAC 26 04 00      mov b, $4
3504   1BAF AE            div a, b ; 
3505   1BB0 11            mov a, b
3506   1BB1 27            mov b, a
3507   1BB2 E4            pop a
3508   1BB3             ; END FACTORS
3509   1BB3 E7            pop d
3510   1BB4 FD 43         mov [d], b
3511   1BB6             ;; if (k < 3) { 
3512   1BB6             _if42_cond:
3513   1BB6 FA FF FF      lea d, [bp + -1] ; $k
3514   1BB9 2A            mov b, [d]
3515   1BBA             ; START RELATIONAL
3516   1BBA D7            push a
3517   1BBB 11            mov a, b
3518   1BBC 26 03 00      mov b, $3
3519   1BBF B0            cmp a, b
3520   1BC0 FD 73         slt ; < 
3521   1BC2 E4            pop a
3522   1BC3             ; END RELATIONAL
3523   1BC3 C0 00 00      cmp b, 0
3524   1BC6 C6 03 1C      je _if42_exit
3525   1BC9             _if42_true:
3526   1BC9             ;; loc[ 1     ] = cave[loc[ 1     ]][k]; 
3527   1BC9 3B 51 24      mov d, _loc_data ; $loc
3528   1BCC D7            push a
3529   1BCD DA            push d
3530   1BCE 26 01 00      mov b, $1
3531   1BD1 E7            pop d
3532   1BD2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3533   1BD6 E4            pop a
3534   1BD7 DA            push d
3535   1BD8 3B 5F 24      mov d, _cave_data ; $cave
3536   1BDB D7            push a
3537   1BDC DA            push d
3538   1BDD 3B 51 24      mov d, _loc_data ; $loc
3539   1BE0 D7            push a
3540   1BE1 DA            push d
3541   1BE2 26 01 00      mov b, $1
3542   1BE5 E7            pop d
3543   1BE6 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3544   1BEA E4            pop a
3545   1BEB 2A            mov b, [d]
3546   1BEC E7            pop d
3547   1BED FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
3548   1BF1 DA            push d
3549   1BF2 FA FF FF      lea d, [bp + -1] ; $k
3550   1BF5 2A            mov b, [d]
3551   1BF6 E7            pop d
3552   1BF7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3553   1BFB E4            pop a
3554   1BFC 2A            mov b, [d]
3555   1BFD E7            pop d
3556   1BFE FD 43         mov [d], b
3557   1C00 0A 03 1C      jmp _if42_exit
3558   1C03             _if42_exit:
3559   1C03             ;; if (loc[ 1     ] == loc[ 0  ]) { 
3560   1C03             _if43_cond:
3561   1C03 3B 51 24      mov d, _loc_data ; $loc
3562   1C06 D7            push a
3563   1C07 DA            push d
3564   1C08 26 01 00      mov b, $1
3565   1C0B E7            pop d
3566   1C0C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3567   1C10 E4            pop a
3568   1C11 2A            mov b, [d]
3569   1C12             ; START RELATIONAL
3570   1C12 D7            push a
3571   1C13 11            mov a, b
3572   1C14 3B 51 24      mov d, _loc_data ; $loc
3573   1C17 D7            push a
3574   1C18 DA            push d
3575   1C19 26 00 00      mov b, $0
3576   1C1C E7            pop d
3577   1C1D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3578   1C21 E4            pop a
3579   1C22 2A            mov b, [d]
3580   1C23 B0            cmp a, b
3581   1C24 FD 71         seq ; ==
3582   1C26 E4            pop a
3583   1C27             ; END RELATIONAL
3584   1C27 C0 00 00      cmp b, 0
3585   1C2A C6 46 1C      je _if43_exit
3586   1C2D             _if43_true:
3587   1C2D             ;; print("TSK TSK TSK - WUMPUS GOT YOU!\n"); 
3588   1C2D 26 9D 2B      mov b, __s48 ; "TSK TSK TSK - WUMPUS GOT YOU!\n"
3589   1C30 FD AB         swp b
3590   1C32 D8            push b
3591   1C33 07 BC 0E      call print
3592   1C36 51 02 00      add sp, 2
3593   1C39             ;; finished =  2   ; 
3594   1C39 3B 5D 24      mov d, _finished ; $finished
3595   1C3C DA            push d
3596   1C3D 26 02 00      mov b, $2
3597   1C40 E7            pop d
3598   1C41 FD 43         mov [d], b
3599   1C43 0A 46 1C      jmp _if43_exit
3600   1C46             _if43_exit:
3601   1C46 F9            leave
3602   1C47 09            ret
3603   1C48             
3604   1C48             shoot:
3605   1C48 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3606   1C4B             ; $path 
3607   1C4B             ; $scratchloc 
3608   1C4B 10 FF FF      mov a, $ffffffff
3609   1C4E 45 F5 FF      mov [bp + -11], a
3610   1C51             ; $len 
3611   1C51             ; $k 
3612   1C51 52 10 00      sub sp, 16
3613   1C54             ;; finished =  0  ; 
3614   1C54 3B 5D 24      mov d, _finished ; $finished
3615   1C57 DA            push d
3616   1C58 26 00 00      mov b, $0
3617   1C5B E7            pop d
3618   1C5C FD 43         mov [d], b
3619   1C5E             ;; len = -1; 
3620   1C5E FA F3 FF      lea d, [bp + -13] ; $len
3621   1C61 DA            push d
3622   1C62 26 01 00      mov b, $1
3623   1C65 FD 97         neg b
3624   1C67 E7            pop d
3625   1C68 FD 43         mov [d], b
3626   1C6A             ;; while (len < 1 || len > 5) { 
3627   1C6A             _while44_cond:
3628   1C6A FA F3 FF      lea d, [bp + -13] ; $len
3629   1C6D 2A            mov b, [d]
3630   1C6E             ; START RELATIONAL
3631   1C6E D7            push a
3632   1C6F 11            mov a, b
3633   1C70 26 01 00      mov b, $1
3634   1C73 B0            cmp a, b
3635   1C74 FD 73         slt ; < 
3636   1C76 E4            pop a
3637   1C77             ; END RELATIONAL
3638   1C77 D7            push a
3639   1C78 11            mov a, b
3640   1C79 FA F3 FF      lea d, [bp + -13] ; $len
3641   1C7C 2A            mov b, [d]
3642   1C7D             ; START RELATIONAL
3643   1C7D D7            push a
3644   1C7E 11            mov a, b
3645   1C7F 26 05 00      mov b, $5
3646   1C82 B0            cmp a, b
3647   1C83 FD 7F         sgt ; >
3648   1C85 E4            pop a
3649   1C86             ; END RELATIONAL
3650   1C86 FD A8         sor a, b ; ||
3651   1C88 E4            pop a
3652   1C89 C0 00 00      cmp b, 0
3653   1C8C C6 A5 1C      je _while44_exit
3654   1C8F             _while44_block:
3655   1C8F             ;; len = getnum("NO. OF ROOMS (1-5)"); 
3656   1C8F FA F3 FF      lea d, [bp + -13] ; $len
3657   1C92 DA            push d
3658   1C93 26 BC 2B      mov b, __s49 ; "NO. OF ROOMS (1-5)"
3659   1C96 FD AB         swp b
3660   1C98 D8            push b
3661   1C99 07 DB 16      call getnum
3662   1C9C 51 02 00      add sp, 2
3663   1C9F E7            pop d
3664   1CA0 FD 43         mov [d], b
3665   1CA2 0A 6A 1C      jmp _while44_cond
3666   1CA5             _while44_exit:
3667   1CA5             ;; k = 0; 
3668   1CA5 FA F1 FF      lea d, [bp + -15] ; $k
3669   1CA8 DA            push d
3670   1CA9 26 00 00      mov b, $0
3671   1CAC E7            pop d
3672   1CAD FD 43         mov [d], b
3673   1CAF             ;; while (k < len) { 
3674   1CAF             _while45_cond:
3675   1CAF FA F1 FF      lea d, [bp + -15] ; $k
3676   1CB2 2A            mov b, [d]
3677   1CB3             ; START RELATIONAL
3678   1CB3 D7            push a
3679   1CB4 11            mov a, b
3680   1CB5 FA F3 FF      lea d, [bp + -13] ; $len
3681   1CB8 2A            mov b, [d]
3682   1CB9 B0            cmp a, b
3683   1CBA FD 73         slt ; < 
3684   1CBC E4            pop a
3685   1CBD             ; END RELATIONAL
3686   1CBD C0 00 00      cmp b, 0
3687   1CC0 C6 54 1D      je _while45_exit
3688   1CC3             _while45_block:
3689   1CC3             ;; path[k] = getnum("ROOM #") - 1; 
3690   1CC3 FA F7 FF      lea d, [bp + -9] ; $path
3691   1CC6 D7            push a
3692   1CC7 DA            push d
3693   1CC8 FA F1 FF      lea d, [bp + -15] ; $k
3694   1CCB 2A            mov b, [d]
3695   1CCC E7            pop d
3696   1CCD FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3697   1CD1 E4            pop a
3698   1CD2 DA            push d
3699   1CD3 26 CF 2B      mov b, __s50 ; "ROOM #"
3700   1CD6 FD AB         swp b
3701   1CD8 D8            push b
3702   1CD9 07 DB 16      call getnum
3703   1CDC 51 02 00      add sp, 2
3704   1CDF             ; START TERMS
3705   1CDF D7            push a
3706   1CE0 11            mov a, b
3707   1CE1 26 01 00      mov b, $1
3708   1CE4 60            sub a, b
3709   1CE5 27            mov b, a
3710   1CE6 E4            pop a
3711   1CE7             ; END TERMS
3712   1CE7 E7            pop d
3713   1CE8 FD 43         mov [d], b
3714   1CEA             ;; if ((k>1) && (path[k] == path[k-2])) { 
3715   1CEA             _if46_cond:
3716   1CEA FA F1 FF      lea d, [bp + -15] ; $k
3717   1CED 2A            mov b, [d]
3718   1CEE             ; START RELATIONAL
3719   1CEE D7            push a
3720   1CEF 11            mov a, b
3721   1CF0 26 01 00      mov b, $1
3722   1CF3 B0            cmp a, b
3723   1CF4 FD 7F         sgt ; >
3724   1CF6 E4            pop a
3725   1CF7             ; END RELATIONAL
3726   1CF7 D7            push a
3727   1CF8 11            mov a, b
3728   1CF9 FA F7 FF      lea d, [bp + -9] ; $path
3729   1CFC D7            push a
3730   1CFD DA            push d
3731   1CFE FA F1 FF      lea d, [bp + -15] ; $k
3732   1D01 2A            mov b, [d]
3733   1D02 E7            pop d
3734   1D03 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3735   1D07 E4            pop a
3736   1D08 2A            mov b, [d]
3737   1D09             ; START RELATIONAL
3738   1D09 D7            push a
3739   1D0A 11            mov a, b
3740   1D0B FA F7 FF      lea d, [bp + -9] ; $path
3741   1D0E D7            push a
3742   1D0F DA            push d
3743   1D10 FA F1 FF      lea d, [bp + -15] ; $k
3744   1D13 2A            mov b, [d]
3745   1D14             ; START TERMS
3746   1D14 D7            push a
3747   1D15 11            mov a, b
3748   1D16 26 02 00      mov b, $2
3749   1D19 60            sub a, b
3750   1D1A 27            mov b, a
3751   1D1B E4            pop a
3752   1D1C             ; END TERMS
3753   1D1C E7            pop d
3754   1D1D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3755   1D21 E4            pop a
3756   1D22 2A            mov b, [d]
3757   1D23 B0            cmp a, b
3758   1D24 FD 71         seq ; ==
3759   1D26 E4            pop a
3760   1D27             ; END RELATIONAL
3761   1D27 FD A7         sand a, b ; &&
3762   1D29 E4            pop a
3763   1D2A C0 00 00      cmp b, 0
3764   1D2D C6 42 1D      je _if46_exit
3765   1D30             _if46_true:
3766   1D30             ;; print("ARROWS AREN'T THAT CROOKED - TRY ANOTHER ROOM\n"); 
3767   1D30 26 D6 2B      mov b, __s51 ; "ARROWS AREN'T THAT CROOKED - TRY ANOTHER ROOM\n"
3768   1D33 FD AB         swp b
3769   1D35 D8            push b
3770   1D36 07 BC 0E      call print
3771   1D39 51 02 00      add sp, 2
3772   1D3C             ;; continue;  
3773   1D3C 0A AF 1C      jmp _while45_cond ; while continue
3774   1D3F 0A 42 1D      jmp _if46_exit
3775   1D42             _if46_exit:
3776   1D42             ;; k++; 
3777   1D42 FA F1 FF      lea d, [bp + -15] ; $k
3778   1D45 2A            mov b, [d]
3779   1D46 FD 79         mov g, b
3780   1D48 FD 77         inc b
3781   1D4A FA F1 FF      lea d, [bp + -15] ; $k
3782   1D4D FD 43         mov [d], b
3783   1D4F FD 27         mov b, g
3784   1D51 0A AF 1C      jmp _while45_cond
3785   1D54             _while45_exit:
3786   1D54             ;; scratchloc = loc[ 0  ]; 
3787   1D54 FA F5 FF      lea d, [bp + -11] ; $scratchloc
3788   1D57 DA            push d
3789   1D58 3B 51 24      mov d, _loc_data ; $loc
3790   1D5B D7            push a
3791   1D5C DA            push d
3792   1D5D 26 00 00      mov b, $0
3793   1D60 E7            pop d
3794   1D61 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3795   1D65 E4            pop a
3796   1D66 2A            mov b, [d]
3797   1D67 E7            pop d
3798   1D68 FD 43         mov [d], b
3799   1D6A             ;; for (k = 0; k < len; k++) { 
3800   1D6A             _for47_init:
3801   1D6A FA F1 FF      lea d, [bp + -15] ; $k
3802   1D6D DA            push d
3803   1D6E 26 00 00      mov b, $0
3804   1D71 E7            pop d
3805   1D72 FD 43         mov [d], b
3806   1D74             _for47_cond:
3807   1D74 FA F1 FF      lea d, [bp + -15] ; $k
3808   1D77 2A            mov b, [d]
3809   1D78             ; START RELATIONAL
3810   1D78 D7            push a
3811   1D79 11            mov a, b
3812   1D7A FA F3 FF      lea d, [bp + -13] ; $len
3813   1D7D 2A            mov b, [d]
3814   1D7E B0            cmp a, b
3815   1D7F FD 73         slt ; < 
3816   1D81 E4            pop a
3817   1D82             ; END RELATIONAL
3818   1D82 C0 00 00      cmp b, 0
3819   1D85 C6 00 1F      je _for47_exit
3820   1D88             _for47_block:
3821   1D88             ;; if ((cave[scratchloc][0] == path[k]) || 
3822   1D88             _if48_cond:
3823   1D88 3B 5F 24      mov d, _cave_data ; $cave
3824   1D8B D7            push a
3825   1D8C DA            push d
3826   1D8D FA F5 FF      lea d, [bp + -11] ; $scratchloc
3827   1D90 2A            mov b, [d]
3828   1D91 E7            pop d
3829   1D92 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
3830   1D96 DA            push d
3831   1D97 26 00 00      mov b, $0
3832   1D9A E7            pop d
3833   1D9B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3834   1D9F E4            pop a
3835   1DA0 2A            mov b, [d]
3836   1DA1             ; START RELATIONAL
3837   1DA1 D7            push a
3838   1DA2 11            mov a, b
3839   1DA3 FA F7 FF      lea d, [bp + -9] ; $path
3840   1DA6 D7            push a
3841   1DA7 DA            push d
3842   1DA8 FA F1 FF      lea d, [bp + -15] ; $k
3843   1DAB 2A            mov b, [d]
3844   1DAC E7            pop d
3845   1DAD FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3846   1DB1 E4            pop a
3847   1DB2 2A            mov b, [d]
3848   1DB3 B0            cmp a, b
3849   1DB4 FD 71         seq ; ==
3850   1DB6 E4            pop a
3851   1DB7             ; END RELATIONAL
3852   1DB7 D7            push a
3853   1DB8 11            mov a, b
3854   1DB9 3B 5F 24      mov d, _cave_data ; $cave
3855   1DBC D7            push a
3856   1DBD DA            push d
3857   1DBE FA F5 FF      lea d, [bp + -11] ; $scratchloc
3858   1DC1 2A            mov b, [d]
3859   1DC2 E7            pop d
3860   1DC3 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
3861   1DC7 DA            push d
3862   1DC8 26 01 00      mov b, $1
3863   1DCB E7            pop d
3864   1DCC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3865   1DD0 E4            pop a
3866   1DD1 2A            mov b, [d]
3867   1DD2             ; START RELATIONAL
3868   1DD2 D7            push a
3869   1DD3 11            mov a, b
3870   1DD4 FA F7 FF      lea d, [bp + -9] ; $path
3871   1DD7 D7            push a
3872   1DD8 DA            push d
3873   1DD9 FA F1 FF      lea d, [bp + -15] ; $k
3874   1DDC 2A            mov b, [d]
3875   1DDD E7            pop d
3876   1DDE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3877   1DE2 E4            pop a
3878   1DE3 2A            mov b, [d]
3879   1DE4 B0            cmp a, b
3880   1DE5 FD 71         seq ; ==
3881   1DE7 E4            pop a
3882   1DE8             ; END RELATIONAL
3883   1DE8 FD A8         sor a, b ; ||
3884   1DEA 11            mov a, b
3885   1DEB 3B 5F 24      mov d, _cave_data ; $cave
3886   1DEE D7            push a
3887   1DEF DA            push d
3888   1DF0 FA F5 FF      lea d, [bp + -11] ; $scratchloc
3889   1DF3 2A            mov b, [d]
3890   1DF4 E7            pop d
3891   1DF5 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
3892   1DF9 DA            push d
3893   1DFA 26 02 00      mov b, $2
3894   1DFD E7            pop d
3895   1DFE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3896   1E02 E4            pop a
3897   1E03 2A            mov b, [d]
3898   1E04             ; START RELATIONAL
3899   1E04 D7            push a
3900   1E05 11            mov a, b
3901   1E06 FA F7 FF      lea d, [bp + -9] ; $path
3902   1E09 D7            push a
3903   1E0A DA            push d
3904   1E0B FA F1 FF      lea d, [bp + -15] ; $k
3905   1E0E 2A            mov b, [d]
3906   1E0F E7            pop d
3907   1E10 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3908   1E14 E4            pop a
3909   1E15 2A            mov b, [d]
3910   1E16 B0            cmp a, b
3911   1E17 FD 71         seq ; ==
3912   1E19 E4            pop a
3913   1E1A             ; END RELATIONAL
3914   1E1A FD A8         sor a, b ; ||
3915   1E1C E4            pop a
3916   1E1D C0 00 00      cmp b, 0
3917   1E20 C6 3D 1E      je _if48_else
3918   1E23             _if48_true:
3919   1E23             ;; scratchloc = path[k]; 
3920   1E23 FA F5 FF      lea d, [bp + -11] ; $scratchloc
3921   1E26 DA            push d
3922   1E27 FA F7 FF      lea d, [bp + -9] ; $path
3923   1E2A D7            push a
3924   1E2B DA            push d
3925   1E2C FA F1 FF      lea d, [bp + -15] ; $k
3926   1E2F 2A            mov b, [d]
3927   1E30 E7            pop d
3928   1E31 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3929   1E35 E4            pop a
3930   1E36 2A            mov b, [d]
3931   1E37 E7            pop d
3932   1E38 FD 43         mov [d], b
3933   1E3A 0A 66 1E      jmp _if48_exit
3934   1E3D             _if48_else:
3935   1E3D             ;; scratchloc = cave[scratchloc][rand()%3]; 
3936   1E3D FA F5 FF      lea d, [bp + -11] ; $scratchloc
3937   1E40 DA            push d
3938   1E41 3B 5F 24      mov d, _cave_data ; $cave
3939   1E44 D7            push a
3940   1E45 DA            push d
3941   1E46 FA F5 FF      lea d, [bp + -11] ; $scratchloc
3942   1E49 2A            mov b, [d]
3943   1E4A E7            pop d
3944   1E4B FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
3945   1E4F DA            push d
3946   1E50 07 54 0E      call rand
3947   1E53             ; START FACTORS
3948   1E53 D7            push a
3949   1E54 11            mov a, b
3950   1E55 26 03 00      mov b, $3
3951   1E58 AE            div a, b ; 
3952   1E59 11            mov a, b
3953   1E5A 27            mov b, a
3954   1E5B E4            pop a
3955   1E5C             ; END FACTORS
3956   1E5C E7            pop d
3957   1E5D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3958   1E61 E4            pop a
3959   1E62 2A            mov b, [d]
3960   1E63 E7            pop d
3961   1E64 FD 43         mov [d], b
3962   1E66             _if48_exit:
3963   1E66             ;; if (scratchloc == loc[ 1     ]) { 
3964   1E66             _if49_cond:
3965   1E66 FA F5 FF      lea d, [bp + -11] ; $scratchloc
3966   1E69 2A            mov b, [d]
3967   1E6A             ; START RELATIONAL
3968   1E6A D7            push a
3969   1E6B 11            mov a, b
3970   1E6C 3B 51 24      mov d, _loc_data ; $loc
3971   1E6F D7            push a
3972   1E70 DA            push d
3973   1E71 26 01 00      mov b, $1
3974   1E74 E7            pop d
3975   1E75 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3976   1E79 E4            pop a
3977   1E7A 2A            mov b, [d]
3978   1E7B B0            cmp a, b
3979   1E7C FD 71         seq ; ==
3980   1E7E E4            pop a
3981   1E7F             ; END RELATIONAL
3982   1E7F C0 00 00      cmp b, 0
3983   1E82 C6 9E 1E      je _if49_else
3984   1E85             _if49_true:
3985   1E85             ;; print("AHA! YOU GOT THE WUMPUS!\n"); 
3986   1E85 26 04 2C      mov b, __s52 ; "AHA! YOU GOT THE WUMPUS!\n"
3987   1E88 FD AB         swp b
3988   1E8A D8            push b
3989   1E8B 07 BC 0E      call print
3990   1E8E 51 02 00      add sp, 2
3991   1E91             ;; finished =  1  ; 
3992   1E91 3B 5D 24      mov d, _finished ; $finished
3993   1E94 DA            push d
3994   1E95 26 01 00      mov b, $1
3995   1E98 E7            pop d
3996   1E99 FD 43         mov [d], b
3997   1E9B 0A D6 1E      jmp _if49_exit
3998   1E9E             _if49_else:
3999   1E9E             ;; if (scratchloc == loc[ 0  ]) { 
4000   1E9E             _if50_cond:
4001   1E9E FA F5 FF      lea d, [bp + -11] ; $scratchloc
4002   1EA1 2A            mov b, [d]
4003   1EA2             ; START RELATIONAL
4004   1EA2 D7            push a
4005   1EA3 11            mov a, b
4006   1EA4 3B 51 24      mov d, _loc_data ; $loc
4007   1EA7 D7            push a
4008   1EA8 DA            push d
4009   1EA9 26 00 00      mov b, $0
4010   1EAC E7            pop d
4011   1EAD FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4012   1EB1 E4            pop a
4013   1EB2 2A            mov b, [d]
4014   1EB3 B0            cmp a, b
4015   1EB4 FD 71         seq ; ==
4016   1EB6 E4            pop a
4017   1EB7             ; END RELATIONAL
4018   1EB7 C0 00 00      cmp b, 0
4019   1EBA C6 D6 1E      je _if50_exit
4020   1EBD             _if50_true:
4021   1EBD             ;; print("OUCH! ARROW GOT YOU!\n"); 
4022   1EBD 26 1E 2C      mov b, __s53 ; "OUCH! ARROW GOT YOU!\n"
4023   1EC0 FD AB         swp b
4024   1EC2 D8            push b
4025   1EC3 07 BC 0E      call print
4026   1EC6 51 02 00      add sp, 2
4027   1EC9             ;; finished =  2   ; 
4028   1EC9 3B 5D 24      mov d, _finished ; $finished
4029   1ECC DA            push d
4030   1ECD 26 02 00      mov b, $2
4031   1ED0 E7            pop d
4032   1ED1 FD 43         mov [d], b
4033   1ED3 0A D6 1E      jmp _if50_exit
4034   1ED6             _if50_exit:
4035   1ED6             _if49_exit:
4036   1ED6             ;; if (finished !=  0  ) { 
4037   1ED6             _if51_cond:
4038   1ED6 3B 5D 24      mov d, _finished ; $finished
4039   1ED9 2A            mov b, [d]
4040   1EDA             ; START RELATIONAL
4041   1EDA D7            push a
4042   1EDB 11            mov a, b
4043   1EDC 26 00 00      mov b, $0
4044   1EDF B0            cmp a, b
4045   1EE0 FD 72         sneq ; !=
4046   1EE2 E4            pop a
4047   1EE3             ; END RELATIONAL
4048   1EE3 C0 00 00      cmp b, 0
4049   1EE6 C6 EE 1E      je _if51_exit
4050   1EE9             _if51_true:
4051   1EE9             ;; return; 
4052   1EE9 F9            leave
4053   1EEA 09            ret
4054   1EEB 0A EE 1E      jmp _if51_exit
4055   1EEE             _if51_exit:
4056   1EEE             _for47_update:
4057   1EEE FA F1 FF      lea d, [bp + -15] ; $k
4058   1EF1 2A            mov b, [d]
4059   1EF2 FD 79         mov g, b
4060   1EF4 FD 77         inc b
4061   1EF6 FA F1 FF      lea d, [bp + -15] ; $k
4062   1EF9 FD 43         mov [d], b
4063   1EFB FD 27         mov b, g
4064   1EFD 0A 74 1D      jmp _for47_cond
4065   1F00             _for47_exit:
4066   1F00             ;; print("MISSED\n"); 
4067   1F00 26 34 2C      mov b, __s54 ; "MISSED\n"
4068   1F03 FD AB         swp b
4069   1F05 D8            push b
4070   1F06 07 BC 0E      call print
4071   1F09 51 02 00      add sp, 2
4072   1F0C             ;; move_wumpus(); 
4073   1F0C 07 9D 1B      call move_wumpus
4074   1F0F             ;; if (--arrows <= 0) { 
4075   1F0F             _if52_cond:
4076   1F0F 3B 4D 24      mov d, _arrows ; $arrows
4077   1F12 2A            mov b, [d]
4078   1F13 FD 7D         dec b
4079   1F15 3B 4D 24      mov d, _arrows ; $arrows
4080   1F18 FD 43         mov [d], b
4081   1F1A             ; START RELATIONAL
4082   1F1A D7            push a
4083   1F1B 11            mov a, b
4084   1F1C 26 00 00      mov b, $0
4085   1F1F B0            cmp a, b
4086   1F20 FD 74         sle ; <=
4087   1F22 E4            pop a
4088   1F23             ; END RELATIONAL
4089   1F23 C0 00 00      cmp b, 0
4090   1F26 C6 36 1F      je _if52_exit
4091   1F29             _if52_true:
4092   1F29             ;; finished =  2   ; 
4093   1F29 3B 5D 24      mov d, _finished ; $finished
4094   1F2C DA            push d
4095   1F2D 26 02 00      mov b, $2
4096   1F30 E7            pop d
4097   1F31 FD 43         mov [d], b
4098   1F33 0A 36 1F      jmp _if52_exit
4099   1F36             _if52_exit:
4100   1F36 F9            leave
4101   1F37 09            ret
4102   1F38             
4103   1F38             move:
4104   1F38 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4105   1F3B             ; $scratchloc 
4106   1F3B 52 02 00      sub sp, 2
4107   1F3E             ;; scratchloc = -1; 
4108   1F3E FA FF FF      lea d, [bp + -1] ; $scratchloc
4109   1F41 DA            push d
4110   1F42 26 01 00      mov b, $1
4111   1F45 FD 97         neg b
4112   1F47 E7            pop d
4113   1F48 FD 43         mov [d], b
4114   1F4A             ;; while (scratchloc == -1) { 
4115   1F4A             _while53_cond:
4116   1F4A FA FF FF      lea d, [bp + -1] ; $scratchloc
4117   1F4D 2A            mov b, [d]
4118   1F4E             ; START RELATIONAL
4119   1F4E D7            push a
4120   1F4F 11            mov a, b
4121   1F50 26 01 00      mov b, $1
4122   1F53 FD 97         neg b
4123   1F55 B0            cmp a, b
4124   1F56 FD 71         seq ; ==
4125   1F58 E4            pop a
4126   1F59             ; END RELATIONAL
4127   1F59 C0 00 00      cmp b, 0
4128   1F5C C6 82 20      je _while53_exit
4129   1F5F             _while53_block:
4130   1F5F             ;; scratchloc = getnum("WHERE TO")-1; 
4131   1F5F FA FF FF      lea d, [bp + -1] ; $scratchloc
4132   1F62 DA            push d
4133   1F63 26 3C 2C      mov b, __s55 ; "WHERE TO"
4134   1F66 FD AB         swp b
4135   1F68 D8            push b
4136   1F69 07 DB 16      call getnum
4137   1F6C 51 02 00      add sp, 2
4138   1F6F             ; START TERMS
4139   1F6F D7            push a
4140   1F70 11            mov a, b
4141   1F71 26 01 00      mov b, $1
4142   1F74 60            sub a, b
4143   1F75 27            mov b, a
4144   1F76 E4            pop a
4145   1F77             ; END TERMS
4146   1F77 E7            pop d
4147   1F78 FD 43         mov [d], b
4148   1F7A             ;; if (scratchloc < 0 || scratchloc > 19) { 
4149   1F7A             _if54_cond:
4150   1F7A FA FF FF      lea d, [bp + -1] ; $scratchloc
4151   1F7D 2A            mov b, [d]
4152   1F7E             ; START RELATIONAL
4153   1F7E D7            push a
4154   1F7F 11            mov a, b
4155   1F80 26 00 00      mov b, $0
4156   1F83 B0            cmp a, b
4157   1F84 FD 73         slt ; < 
4158   1F86 E4            pop a
4159   1F87             ; END RELATIONAL
4160   1F87 D7            push a
4161   1F88 11            mov a, b
4162   1F89 FA FF FF      lea d, [bp + -1] ; $scratchloc
4163   1F8C 2A            mov b, [d]
4164   1F8D             ; START RELATIONAL
4165   1F8D D7            push a
4166   1F8E 11            mov a, b
4167   1F8F 26 13 00      mov b, $13
4168   1F92 B0            cmp a, b
4169   1F93 FD 7F         sgt ; >
4170   1F95 E4            pop a
4171   1F96             ; END RELATIONAL
4172   1F96 FD A8         sor a, b ; ||
4173   1F98 E4            pop a
4174   1F99 C0 00 00      cmp b, 0
4175   1F9C C6 B1 1F      je _if54_exit
4176   1F9F             _if54_true:
4177   1F9F             ;; scratchloc = -1; 
4178   1F9F FA FF FF      lea d, [bp + -1] ; $scratchloc
4179   1FA2 DA            push d
4180   1FA3 26 01 00      mov b, $1
4181   1FA6 FD 97         neg b
4182   1FA8 E7            pop d
4183   1FA9 FD 43         mov [d], b
4184   1FAB             ;; continue; 
4185   1FAB 0A 4A 1F      jmp _while53_cond ; while continue
4186   1FAE 0A B1 1F      jmp _if54_exit
4187   1FB1             _if54_exit:
4188   1FB1             ;; if ((cave[loc[ 0  ]][0] != scratchloc) & 
4189   1FB1             _if55_cond:
4190   1FB1 3B 5F 24      mov d, _cave_data ; $cave
4191   1FB4 D7            push a
4192   1FB5 DA            push d
4193   1FB6 3B 51 24      mov d, _loc_data ; $loc
4194   1FB9 D7            push a
4195   1FBA DA            push d
4196   1FBB 26 00 00      mov b, $0
4197   1FBE E7            pop d
4198   1FBF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4199   1FC3 E4            pop a
4200   1FC4 2A            mov b, [d]
4201   1FC5 E7            pop d
4202   1FC6 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
4203   1FCA DA            push d
4204   1FCB 26 00 00      mov b, $0
4205   1FCE E7            pop d
4206   1FCF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4207   1FD3 E4            pop a
4208   1FD4 2A            mov b, [d]
4209   1FD5             ; START RELATIONAL
4210   1FD5 D7            push a
4211   1FD6 11            mov a, b
4212   1FD7 FA FF FF      lea d, [bp + -1] ; $scratchloc
4213   1FDA 2A            mov b, [d]
4214   1FDB B0            cmp a, b
4215   1FDC FD 72         sneq ; !=
4216   1FDE E4            pop a
4217   1FDF             ; END RELATIONAL
4218   1FDF D7            push a
4219   1FE0 11            mov a, b
4220   1FE1 3B 5F 24      mov d, _cave_data ; $cave
4221   1FE4 D7            push a
4222   1FE5 DA            push d
4223   1FE6 3B 51 24      mov d, _loc_data ; $loc
4224   1FE9 D7            push a
4225   1FEA DA            push d
4226   1FEB 26 00 00      mov b, $0
4227   1FEE E7            pop d
4228   1FEF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4229   1FF3 E4            pop a
4230   1FF4 2A            mov b, [d]
4231   1FF5 E7            pop d
4232   1FF6 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
4233   1FFA DA            push d
4234   1FFB 26 01 00      mov b, $1
4235   1FFE E7            pop d
4236   1FFF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4237   2003 E4            pop a
4238   2004 2A            mov b, [d]
4239   2005             ; START RELATIONAL
4240   2005 D7            push a
4241   2006 11            mov a, b
4242   2007 FA FF FF      lea d, [bp + -1] ; $scratchloc
4243   200A 2A            mov b, [d]
4244   200B B0            cmp a, b
4245   200C FD 72         sneq ; !=
4246   200E E4            pop a
4247   200F             ; END RELATIONAL
4248   200F 86            and a, b ; &
4249   2010 3B 5F 24      mov d, _cave_data ; $cave
4250   2013 D7            push a
4251   2014 DA            push d
4252   2015 3B 51 24      mov d, _loc_data ; $loc
4253   2018 D7            push a
4254   2019 DA            push d
4255   201A 26 00 00      mov b, $0
4256   201D E7            pop d
4257   201E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4258   2022 E4            pop a
4259   2023 2A            mov b, [d]
4260   2024 E7            pop d
4261   2025 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
4262   2029 DA            push d
4263   202A 26 02 00      mov b, $2
4264   202D E7            pop d
4265   202E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4266   2032 E4            pop a
4267   2033 2A            mov b, [d]
4268   2034             ; START RELATIONAL
4269   2034 D7            push a
4270   2035 11            mov a, b
4271   2036 FA FF FF      lea d, [bp + -1] ; $scratchloc
4272   2039 2A            mov b, [d]
4273   203A B0            cmp a, b
4274   203B FD 72         sneq ; !=
4275   203D E4            pop a
4276   203E             ; END RELATIONAL
4277   203E 86            and a, b ; &
4278   203F 3B 51 24      mov d, _loc_data ; $loc
4279   2042 D7            push a
4280   2043 DA            push d
4281   2044 26 00 00      mov b, $0
4282   2047 E7            pop d
4283   2048 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4284   204C E4            pop a
4285   204D 2A            mov b, [d]
4286   204E             ; START RELATIONAL
4287   204E D7            push a
4288   204F 11            mov a, b
4289   2050 FA FF FF      lea d, [bp + -1] ; $scratchloc
4290   2053 2A            mov b, [d]
4291   2054 B0            cmp a, b
4292   2055 FD 72         sneq ; !=
4293   2057 E4            pop a
4294   2058             ; END RELATIONAL
4295   2058 86            and a, b ; &
4296   2059 27            mov b, a
4297   205A E4            pop a
4298   205B C0 00 00      cmp b, 0
4299   205E C6 7F 20      je _if55_exit
4300   2061             _if55_true:
4301   2061             ;; print("NOT POSSIBLE\n"); 
4302   2061 26 45 2C      mov b, __s56 ; "NOT POSSIBLE\n"
4303   2064 FD AB         swp b
4304   2066 D8            push b
4305   2067 07 BC 0E      call print
4306   206A 51 02 00      add sp, 2
4307   206D             ;; scratchloc = -1; 
4308   206D FA FF FF      lea d, [bp + -1] ; $scratchloc
4309   2070 DA            push d
4310   2071 26 01 00      mov b, $1
4311   2074 FD 97         neg b
4312   2076 E7            pop d
4313   2077 FD 43         mov [d], b
4314   2079             ;; continue; 
4315   2079 0A 4A 1F      jmp _while53_cond ; while continue
4316   207C 0A 7F 20      jmp _if55_exit
4317   207F             _if55_exit:
4318   207F 0A 4A 1F      jmp _while53_cond
4319   2082             _while53_exit:
4320   2082             ;; loc[ 0  ] = scratchloc; 
4321   2082 3B 51 24      mov d, _loc_data ; $loc
4322   2085 D7            push a
4323   2086 DA            push d
4324   2087 26 00 00      mov b, $0
4325   208A E7            pop d
4326   208B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4327   208F E4            pop a
4328   2090 DA            push d
4329   2091 FA FF FF      lea d, [bp + -1] ; $scratchloc
4330   2094 2A            mov b, [d]
4331   2095 E7            pop d
4332   2096 FD 43         mov [d], b
4333   2098             ;; while ((scratchloc == loc[ 4    ]) || (scratchloc == loc[ 5    ])) { 
4334   2098             _while56_cond:
4335   2098 FA FF FF      lea d, [bp + -1] ; $scratchloc
4336   209B 2A            mov b, [d]
4337   209C             ; START RELATIONAL
4338   209C D7            push a
4339   209D 11            mov a, b
4340   209E 3B 51 24      mov d, _loc_data ; $loc
4341   20A1 D7            push a
4342   20A2 DA            push d
4343   20A3 26 04 00      mov b, $4
4344   20A6 E7            pop d
4345   20A7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4346   20AB E4            pop a
4347   20AC 2A            mov b, [d]
4348   20AD B0            cmp a, b
4349   20AE FD 71         seq ; ==
4350   20B0 E4            pop a
4351   20B1             ; END RELATIONAL
4352   20B1 D7            push a
4353   20B2 11            mov a, b
4354   20B3 FA FF FF      lea d, [bp + -1] ; $scratchloc
4355   20B6 2A            mov b, [d]
4356   20B7             ; START RELATIONAL
4357   20B7 D7            push a
4358   20B8 11            mov a, b
4359   20B9 3B 51 24      mov d, _loc_data ; $loc
4360   20BC D7            push a
4361   20BD DA            push d
4362   20BE 26 05 00      mov b, $5
4363   20C1 E7            pop d
4364   20C2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4365   20C6 E4            pop a
4366   20C7 2A            mov b, [d]
4367   20C8 B0            cmp a, b
4368   20C9 FD 71         seq ; ==
4369   20CB E4            pop a
4370   20CC             ; END RELATIONAL
4371   20CC FD A8         sor a, b ; ||
4372   20CE E4            pop a
4373   20CF C0 00 00      cmp b, 0
4374   20D2 C6 09 21      je _while56_exit
4375   20D5             _while56_block:
4376   20D5             ;; print("ZAP--SUPER BAT SNATCH! ELSEWHEREVILLE FOR YOU!\n"); 
4377   20D5 26 53 2C      mov b, __s57 ; "ZAP--SUPER BAT SNATCH! ELSEWHEREVILLE FOR YOU!\n"
4378   20D8 FD AB         swp b
4379   20DA D8            push b
4380   20DB 07 BC 0E      call print
4381   20DE 51 02 00      add sp, 2
4382   20E1             ;; scratchloc = loc[ 0  ] = rand()%20; 
4383   20E1 FA FF FF      lea d, [bp + -1] ; $scratchloc
4384   20E4 DA            push d
4385   20E5 3B 51 24      mov d, _loc_data ; $loc
4386   20E8 D7            push a
4387   20E9 DA            push d
4388   20EA 26 00 00      mov b, $0
4389   20ED E7            pop d
4390   20EE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4391   20F2 E4            pop a
4392   20F3 DA            push d
4393   20F4 07 54 0E      call rand
4394   20F7             ; START FACTORS
4395   20F7 D7            push a
4396   20F8 11            mov a, b
4397   20F9 26 14 00      mov b, $14
4398   20FC AE            div a, b ; 
4399   20FD 11            mov a, b
4400   20FE 27            mov b, a
4401   20FF E4            pop a
4402   2100             ; END FACTORS
4403   2100 E7            pop d
4404   2101 FD 43         mov [d], b
4405   2103 E7            pop d
4406   2104 FD 43         mov [d], b
4407   2106 0A 98 20      jmp _while56_cond
4408   2109             _while56_exit:
4409   2109             ;; if (scratchloc == loc[ 1     ]) { 
4410   2109             _if57_cond:
4411   2109 FA FF FF      lea d, [bp + -1] ; $scratchloc
4412   210C 2A            mov b, [d]
4413   210D             ; START RELATIONAL
4414   210D D7            push a
4415   210E 11            mov a, b
4416   210F 3B 51 24      mov d, _loc_data ; $loc
4417   2112 D7            push a
4418   2113 DA            push d
4419   2114 26 01 00      mov b, $1
4420   2117 E7            pop d
4421   2118 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4422   211C E4            pop a
4423   211D 2A            mov b, [d]
4424   211E B0            cmp a, b
4425   211F FD 71         seq ; ==
4426   2121 E4            pop a
4427   2122             ; END RELATIONAL
4428   2122 C0 00 00      cmp b, 0
4429   2125 C6 3A 21      je _if57_exit
4430   2128             _if57_true:
4431   2128             ;; print("... OOPS! BUMPED A WUMPUS!\n"); 
4432   2128 26 83 2C      mov b, __s58 ; "... OOPS! BUMPED A WUMPUS!\n"
4433   212B FD AB         swp b
4434   212D D8            push b
4435   212E 07 BC 0E      call print
4436   2131 51 02 00      add sp, 2
4437   2134             ;; move_wumpus(); 
4438   2134 07 9D 1B      call move_wumpus
4439   2137 0A 3A 21      jmp _if57_exit
4440   213A             _if57_exit:
4441   213A             ;; if (scratchloc == loc[ 2   ] || scratchloc == loc[ 3   ]) { 
4442   213A             _if58_cond:
4443   213A FA FF FF      lea d, [bp + -1] ; $scratchloc
4444   213D 2A            mov b, [d]
4445   213E             ; START RELATIONAL
4446   213E D7            push a
4447   213F 11            mov a, b
4448   2140 3B 51 24      mov d, _loc_data ; $loc
4449   2143 D7            push a
4450   2144 DA            push d
4451   2145 26 02 00      mov b, $2
4452   2148 E7            pop d
4453   2149 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4454   214D E4            pop a
4455   214E 2A            mov b, [d]
4456   214F B0            cmp a, b
4457   2150 FD 71         seq ; ==
4458   2152 E4            pop a
4459   2153             ; END RELATIONAL
4460   2153 D7            push a
4461   2154 11            mov a, b
4462   2155 FA FF FF      lea d, [bp + -1] ; $scratchloc
4463   2158 2A            mov b, [d]
4464   2159             ; START RELATIONAL
4465   2159 D7            push a
4466   215A 11            mov a, b
4467   215B 3B 51 24      mov d, _loc_data ; $loc
4468   215E D7            push a
4469   215F DA            push d
4470   2160 26 03 00      mov b, $3
4471   2163 E7            pop d
4472   2164 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4473   2168 E4            pop a
4474   2169 2A            mov b, [d]
4475   216A B0            cmp a, b
4476   216B FD 71         seq ; ==
4477   216D E4            pop a
4478   216E             ; END RELATIONAL
4479   216E FD A8         sor a, b ; ||
4480   2170 E4            pop a
4481   2171 C0 00 00      cmp b, 0
4482   2174 C6 90 21      je _if58_exit
4483   2177             _if58_true:
4484   2177             ;; print("YYYYIIIIEEEE . . . FELL IN PIT\n"); 
4485   2177 26 9F 2C      mov b, __s59 ; "YYYYIIIIEEEE . . . FELL IN PIT\n"
4486   217A FD AB         swp b
4487   217C D8            push b
4488   217D 07 BC 0E      call print
4489   2180 51 02 00      add sp, 2
4490   2183             ;; finished =  2   ; 
4491   2183 3B 5D 24      mov d, _finished ; $finished
4492   2186 DA            push d
4493   2187 26 02 00      mov b, $2
4494   218A E7            pop d
4495   218B FD 43         mov [d], b
4496   218D 0A 90 21      jmp _if58_exit
4497   2190             _if58_exit:
4498   2190 F9            leave
4499   2191 09            ret
4500   2192             
4501   2192             game_setup:
4502   2192 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4503   2195             ; $j 
4504   2195             ; $k 
4505   2195 52 04 00      sub sp, 4
4506   2198             ;; for (j = 0; j <  6   ; j++) { 
4507   2198             _for59_init:
4508   2198 FA FF FF      lea d, [bp + -1] ; $j
4509   219B DA            push d
4510   219C 26 00 00      mov b, $0
4511   219F E7            pop d
4512   21A0 FD 43         mov [d], b
4513   21A2             _for59_cond:
4514   21A2 FA FF FF      lea d, [bp + -1] ; $j
4515   21A5 2A            mov b, [d]
4516   21A6             ; START RELATIONAL
4517   21A6 D7            push a
4518   21A7 11            mov a, b
4519   21A8 26 06 00      mov b, $6
4520   21AB B0            cmp a, b
4521   21AC FD 73         slt ; < 
4522   21AE E4            pop a
4523   21AF             ; END RELATIONAL
4524   21AF C0 00 00      cmp b, 0
4525   21B2 C6 9F 22      je _for59_exit
4526   21B5             _for59_block:
4527   21B5             ;; loc[j] = -1; 
4528   21B5 3B 51 24      mov d, _loc_data ; $loc
4529   21B8 D7            push a
4530   21B9 DA            push d
4531   21BA FA FF FF      lea d, [bp + -1] ; $j
4532   21BD 2A            mov b, [d]
4533   21BE E7            pop d
4534   21BF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4535   21C3 E4            pop a
4536   21C4 DA            push d
4537   21C5 26 01 00      mov b, $1
4538   21C8 FD 97         neg b
4539   21CA E7            pop d
4540   21CB FD 43         mov [d], b
4541   21CD             ;; while (loc[j] < 0) { 
4542   21CD             _while60_cond:
4543   21CD 3B 51 24      mov d, _loc_data ; $loc
4544   21D0 D7            push a
4545   21D1 DA            push d
4546   21D2 FA FF FF      lea d, [bp + -1] ; $j
4547   21D5 2A            mov b, [d]
4548   21D6 E7            pop d
4549   21D7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4550   21DB E4            pop a
4551   21DC 2A            mov b, [d]
4552   21DD             ; START RELATIONAL
4553   21DD D7            push a
4554   21DE 11            mov a, b
4555   21DF 26 00 00      mov b, $0
4556   21E2 B0            cmp a, b
4557   21E3 FD 73         slt ; < 
4558   21E5 E4            pop a
4559   21E6             ; END RELATIONAL
4560   21E6 C0 00 00      cmp b, 0
4561   21E9 C6 8D 22      je _while60_exit
4562   21EC             _while60_block:
4563   21EC             ;; loc[j] = rand()%20; 
4564   21EC 3B 51 24      mov d, _loc_data ; $loc
4565   21EF D7            push a
4566   21F0 DA            push d
4567   21F1 FA FF FF      lea d, [bp + -1] ; $j
4568   21F4 2A            mov b, [d]
4569   21F5 E7            pop d
4570   21F6 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4571   21FA E4            pop a
4572   21FB DA            push d
4573   21FC 07 54 0E      call rand
4574   21FF             ; START FACTORS
4575   21FF D7            push a
4576   2200 11            mov a, b
4577   2201 26 14 00      mov b, $14
4578   2204 AE            div a, b ; 
4579   2205 11            mov a, b
4580   2206 27            mov b, a
4581   2207 E4            pop a
4582   2208             ; END FACTORS
4583   2208 E7            pop d
4584   2209 FD 43         mov [d], b
4585   220B             ;; for (k=0; k<j-1; k++) { 
4586   220B             _for61_init:
4587   220B FA FD FF      lea d, [bp + -3] ; $k
4588   220E DA            push d
4589   220F 26 00 00      mov b, $0
4590   2212 E7            pop d
4591   2213 FD 43         mov [d], b
4592   2215             _for61_cond:
4593   2215 FA FD FF      lea d, [bp + -3] ; $k
4594   2218 2A            mov b, [d]
4595   2219             ; START RELATIONAL
4596   2219 D7            push a
4597   221A 11            mov a, b
4598   221B FA FF FF      lea d, [bp + -1] ; $j
4599   221E 2A            mov b, [d]
4600   221F             ; START TERMS
4601   221F D7            push a
4602   2220 11            mov a, b
4603   2221 26 01 00      mov b, $1
4604   2224 60            sub a, b
4605   2225 27            mov b, a
4606   2226 E4            pop a
4607   2227             ; END TERMS
4608   2227 B0            cmp a, b
4609   2228 FD 73         slt ; < 
4610   222A E4            pop a
4611   222B             ; END RELATIONAL
4612   222B C0 00 00      cmp b, 0
4613   222E C6 8A 22      je _for61_exit
4614   2231             _for61_block:
4615   2231             ;; if (loc[j] == loc[k]) { 
4616   2231             _if62_cond:
4617   2231 3B 51 24      mov d, _loc_data ; $loc
4618   2234 D7            push a
4619   2235 DA            push d
4620   2236 FA FF FF      lea d, [bp + -1] ; $j
4621   2239 2A            mov b, [d]
4622   223A E7            pop d
4623   223B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4624   223F E4            pop a
4625   2240 2A            mov b, [d]
4626   2241             ; START RELATIONAL
4627   2241 D7            push a
4628   2242 11            mov a, b
4629   2243 3B 51 24      mov d, _loc_data ; $loc
4630   2246 D7            push a
4631   2247 DA            push d
4632   2248 FA FD FF      lea d, [bp + -3] ; $k
4633   224B 2A            mov b, [d]
4634   224C E7            pop d
4635   224D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4636   2251 E4            pop a
4637   2252 2A            mov b, [d]
4638   2253 B0            cmp a, b
4639   2254 FD 71         seq ; ==
4640   2256 E4            pop a
4641   2257             ; END RELATIONAL
4642   2257 C0 00 00      cmp b, 0
4643   225A C6 78 22      je _if62_exit
4644   225D             _if62_true:
4645   225D             ;; loc[j] = -1; 
4646   225D 3B 51 24      mov d, _loc_data ; $loc
4647   2260 D7            push a
4648   2261 DA            push d
4649   2262 FA FF FF      lea d, [bp + -1] ; $j
4650   2265 2A            mov b, [d]
4651   2266 E7            pop d
4652   2267 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4653   226B E4            pop a
4654   226C DA            push d
4655   226D 26 01 00      mov b, $1
4656   2270 FD 97         neg b
4657   2272 E7            pop d
4658   2273 FD 43         mov [d], b
4659   2275 0A 78 22      jmp _if62_exit
4660   2278             _if62_exit:
4661   2278             _for61_update:
4662   2278 FA FD FF      lea d, [bp + -3] ; $k
4663   227B 2A            mov b, [d]
4664   227C FD 79         mov g, b
4665   227E FD 77         inc b
4666   2280 FA FD FF      lea d, [bp + -3] ; $k
4667   2283 FD 43         mov [d], b
4668   2285 FD 27         mov b, g
4669   2287 0A 15 22      jmp _for61_cond
4670   228A             _for61_exit:
4671   228A 0A CD 21      jmp _while60_cond
4672   228D             _while60_exit:
4673   228D             _for59_update:
4674   228D FA FF FF      lea d, [bp + -1] ; $j
4675   2290 2A            mov b, [d]
4676   2291 FD 79         mov g, b
4677   2293 FD 77         inc b
4678   2295 FA FF FF      lea d, [bp + -1] ; $j
4679   2298 FD 43         mov [d], b
4680   229A FD 27         mov b, g
4681   229C 0A A2 21      jmp _for59_cond
4682   229F             _for59_exit:
4683   229F F9            leave
4684   22A0 09            ret
4685   22A1             
4686   22A1             game_play:
4687   22A1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4688   22A4             ; $c 
4689   22A4 52 02 00      sub sp, 2
4690   22A7             ;; arrows = 5; 
4691   22A7 3B 4D 24      mov d, _arrows ; $arrows
4692   22AA DA            push d
4693   22AB 26 05 00      mov b, $5
4694   22AE E7            pop d
4695   22AF FD 43         mov [d], b
4696   22B1             ;; print("HUNT THE WUMPUS\n"); 
4697   22B1 26 BF 2C      mov b, __s60 ; "HUNT THE WUMPUS\n"
4698   22B4 FD AB         swp b
4699   22B6 D8            push b
4700   22B7 07 BC 0E      call print
4701   22BA 51 02 00      add sp, 2
4702   22BD             ;; if (debug) { 
4703   22BD             _if63_cond:
4704   22BD 3B 4F 24      mov d, _debug ; $debug
4705   22C0 2A            mov b, [d]
4706   22C1 C0 00 00      cmp b, 0
4707   22C4 C6 A6 23      je _if63_exit
4708   22C7             _if63_true:
4709   22C7             ;; print("Wumpus is at "); printu(loc[ 1     ]+1); 
4710   22C7 26 D0 2C      mov b, __s61 ; "Wumpus is at "
4711   22CA FD AB         swp b
4712   22CC D8            push b
4713   22CD 07 BC 0E      call print
4714   22D0 51 02 00      add sp, 2
4715   22D3             ;; printu(loc[ 1     ]+1); 
4716   22D3 3B 51 24      mov d, _loc_data ; $loc
4717   22D6 D7            push a
4718   22D7 DA            push d
4719   22D8 26 01 00      mov b, $1
4720   22DB E7            pop d
4721   22DC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4722   22E0 E4            pop a
4723   22E1 2A            mov b, [d]
4724   22E2             ; START TERMS
4725   22E2 D7            push a
4726   22E3 11            mov a, b
4727   22E4 26 01 00      mov b, $1
4728   22E7 54            add a, b
4729   22E8 27            mov b, a
4730   22E9 E4            pop a
4731   22EA             ; END TERMS
4732   22EA FD AB         swp b
4733   22EC D8            push b
4734   22ED 07 88 0D      call printu
4735   22F0 51 02 00      add sp, 2
4736   22F3             ;; print(", pits at "); printu(loc[ 2   ]+1); 
4737   22F3 26 DE 2C      mov b, __s62 ; ", pits at "
4738   22F6 FD AB         swp b
4739   22F8 D8            push b
4740   22F9 07 BC 0E      call print
4741   22FC 51 02 00      add sp, 2
4742   22FF             ;; printu(loc[ 2   ]+1); 
4743   22FF 3B 51 24      mov d, _loc_data ; $loc
4744   2302 D7            push a
4745   2303 DA            push d
4746   2304 26 02 00      mov b, $2
4747   2307 E7            pop d
4748   2308 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4749   230C E4            pop a
4750   230D 2A            mov b, [d]
4751   230E             ; START TERMS
4752   230E D7            push a
4753   230F 11            mov a, b
4754   2310 26 01 00      mov b, $1
4755   2313 54            add a, b
4756   2314 27            mov b, a
4757   2315 E4            pop a
4758   2316             ; END TERMS
4759   2316 FD AB         swp b
4760   2318 D8            push b
4761   2319 07 88 0D      call printu
4762   231C 51 02 00      add sp, 2
4763   231F             ;; print(" & "); printu(loc[ 3   ]+1); 
4764   231F 26 E9 2C      mov b, __s63 ; " & "
4765   2322 FD AB         swp b
4766   2324 D8            push b
4767   2325 07 BC 0E      call print
4768   2328 51 02 00      add sp, 2
4769   232B             ;; printu(loc[ 3   ]+1); 
4770   232B 3B 51 24      mov d, _loc_data ; $loc
4771   232E D7            push a
4772   232F DA            push d
4773   2330 26 03 00      mov b, $3
4774   2333 E7            pop d
4775   2334 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4776   2338 E4            pop a
4777   2339 2A            mov b, [d]
4778   233A             ; START TERMS
4779   233A D7            push a
4780   233B 11            mov a, b
4781   233C 26 01 00      mov b, $1
4782   233F 54            add a, b
4783   2340 27            mov b, a
4784   2341 E4            pop a
4785   2342             ; END TERMS
4786   2342 FD AB         swp b
4787   2344 D8            push b
4788   2345 07 88 0D      call printu
4789   2348 51 02 00      add sp, 2
4790   234B             ;; print(", bats at "); printu(loc[ 4    ]+1); 
4791   234B 26 ED 2C      mov b, __s64 ; ", bats at "
4792   234E FD AB         swp b
4793   2350 D8            push b
4794   2351 07 BC 0E      call print
4795   2354 51 02 00      add sp, 2
4796   2357             ;; printu(loc[ 4    ]+1); 
4797   2357 3B 51 24      mov d, _loc_data ; $loc
4798   235A D7            push a
4799   235B DA            push d
4800   235C 26 04 00      mov b, $4
4801   235F E7            pop d
4802   2360 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4803   2364 E4            pop a
4804   2365 2A            mov b, [d]
4805   2366             ; START TERMS
4806   2366 D7            push a
4807   2367 11            mov a, b
4808   2368 26 01 00      mov b, $1
4809   236B 54            add a, b
4810   236C 27            mov b, a
4811   236D E4            pop a
4812   236E             ; END TERMS
4813   236E FD AB         swp b
4814   2370 D8            push b
4815   2371 07 88 0D      call printu
4816   2374 51 02 00      add sp, 2
4817   2377             ;; print(" & "); printu(loc[ 5    ]+1); 
4818   2377 26 E9 2C      mov b, __s63 ; " & "
4819   237A FD AB         swp b
4820   237C D8            push b
4821   237D 07 BC 0E      call print
4822   2380 51 02 00      add sp, 2
4823   2383             ;; printu(loc[ 5    ]+1); 
4824   2383 3B 51 24      mov d, _loc_data ; $loc
4825   2386 D7            push a
4826   2387 DA            push d
4827   2388 26 05 00      mov b, $5
4828   238B E7            pop d
4829   238C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4830   2390 E4            pop a
4831   2391 2A            mov b, [d]
4832   2392             ; START TERMS
4833   2392 D7            push a
4834   2393 11            mov a, b
4835   2394 26 01 00      mov b, $1
4836   2397 54            add a, b
4837   2398 27            mov b, a
4838   2399 E4            pop a
4839   239A             ; END TERMS
4840   239A FD AB         swp b
4841   239C D8            push b
4842   239D 07 88 0D      call printu
4843   23A0 51 02 00      add sp, 2
4844   23A3 0A A6 23      jmp _if63_exit
4845   23A6             _if63_exit:
4846   23A6             ;; finished =  0  ; 
4847   23A6 3B 5D 24      mov d, _finished ; $finished
4848   23A9 DA            push d
4849   23AA 26 00 00      mov b, $0
4850   23AD E7            pop d
4851   23AE FD 43         mov [d], b
4852   23B0             ;; while (finished ==  0  ) { 
4853   23B0             _while64_cond:
4854   23B0 3B 5D 24      mov d, _finished ; $finished
4855   23B3 2A            mov b, [d]
4856   23B4             ; START RELATIONAL
4857   23B4 D7            push a
4858   23B5 11            mov a, b
4859   23B6 26 00 00      mov b, $0
4860   23B9 B0            cmp a, b
4861   23BA FD 71         seq ; ==
4862   23BC E4            pop a
4863   23BD             ; END RELATIONAL
4864   23BD C0 00 00      cmp b, 0
4865   23C0 C6 DB 23      je _while64_exit
4866   23C3             _while64_block:
4867   23C3             ;; show_room(); 
4868   23C3 07 14 19      call show_room
4869   23C6             ;; if (move_or_shoot()) { 
4870   23C6             _if65_cond:
4871   23C6 07 38 1B      call move_or_shoot
4872   23C9 C0 00 00      cmp b, 0
4873   23CC C6 D5 23      je _if65_else
4874   23CF             _if65_true:
4875   23CF             ;; shoot(); 
4876   23CF 07 48 1C      call shoot
4877   23D2 0A D8 23      jmp _if65_exit
4878   23D5             _if65_else:
4879   23D5             ;; move(); 
4880   23D5 07 38 1F      call move
4881   23D8             _if65_exit:
4882   23D8 0A B0 23      jmp _while64_cond
4883   23DB             _while64_exit:
4884   23DB             ;; if (finished ==  1  ) { 
4885   23DB             _if66_cond:
4886   23DB 3B 5D 24      mov d, _finished ; $finished
4887   23DE 2A            mov b, [d]
4888   23DF             ; START RELATIONAL
4889   23DF D7            push a
4890   23E0 11            mov a, b
4891   23E1 26 01 00      mov b, $1
4892   23E4 B0            cmp a, b
4893   23E5 FD 71         seq ; ==
4894   23E7 E4            pop a
4895   23E8             ; END RELATIONAL
4896   23E8 C0 00 00      cmp b, 0
4897   23EB C6 FD 23      je _if66_exit
4898   23EE             _if66_true:
4899   23EE             ;; print("HEE HEE HEE - THE WUMPUS'LL GET YOU NEXT TIME!!\n"); 
4900   23EE 26 F8 2C      mov b, __s65 ; "HEE HEE HEE - THE WUMPUS'LL GET YOU NEXT TIME!!\n"
4901   23F1 FD AB         swp b
4902   23F3 D8            push b
4903   23F4 07 BC 0E      call print
4904   23F7 51 02 00      add sp, 2
4905   23FA 0A FD 23      jmp _if66_exit
4906   23FD             _if66_exit:
4907   23FD             ;; if (finished ==  2   ) { 
4908   23FD             _if67_cond:
4909   23FD 3B 5D 24      mov d, _finished ; $finished
4910   2400 2A            mov b, [d]
4911   2401             ; START RELATIONAL
4912   2401 D7            push a
4913   2402 11            mov a, b
4914   2403 26 02 00      mov b, $2
4915   2406 B0            cmp a, b
4916   2407 FD 71         seq ; ==
4917   2409 E4            pop a
4918   240A             ; END RELATIONAL
4919   240A C0 00 00      cmp b, 0
4920   240D C6 1F 24      je _if67_exit
4921   2410             _if67_true:
4922   2410             ;; print("HA HA HA - YOU LOSE!\n"); 
4923   2410 26 28 2D      mov b, __s66 ; "HA HA HA - YOU LOSE!\n"
4924   2413 FD AB         swp b
4925   2415 D8            push b
4926   2416 07 BC 0E      call print
4927   2419 51 02 00      add sp, 2
4928   241C 0A 1F 24      jmp _if67_exit
4929   241F             _if67_exit:
4930   241F             ;; c = getlet("NEW GAME (Y-N)"); 
4931   241F FA FF FF      lea d, [bp + -1] ; $c
4932   2422 DA            push d
4933   2423 26 F4 24      mov b, __s1 ; "NEW GAME (Y-N)"
4934   2426 FD AB         swp b
4935   2428 D8            push b
4936   2429 07 FE 16      call getlet
4937   242C 51 02 00      add sp, 2
4938   242F E7            pop d
4939   2430 FD 43         mov [d], b
4940   2432             ;; if (c == 'N') { 
4941   2432             _if68_cond:
4942   2432 FA FF FF      lea d, [bp + -1] ; $c
4943   2435 2A            mov b, [d]
4944   2436             ; START RELATIONAL
4945   2436 D7            push a
4946   2437 11            mov a, b
4947   2438 26 4E 00      mov b, $4e
4948   243B B0            cmp a, b
4949   243C FD 71         seq ; ==
4950   243E E4            pop a
4951   243F             ; END RELATIONAL
4952   243F C0 00 00      cmp b, 0
4953   2442 C6 4B 24      je _if68_exit
4954   2445             _if68_true:
4955   2445             ;; exit(); 
4956   2445 07 36 0F      call exit
4957   2448 0A 4B 24      jmp _if68_exit
4958   244B             _if68_exit:
4959   244B F9            leave
4960   244C 09            ret
4961   244D             ; --- END TEXT BLOCK
4962   244D             
4963   244D             ; --- BEGIN DATA BLOCK
4964   244D 00 00       _arrows: .fill 2, 0
4965   244F 00 00       _debug: .dw 0
4966   2451 00 00 00 00 _loc_data: .fill 12, 0
4966   2455 00 00 00 00 
4966   2459 00 00 00 00 
4967   245D 00 00       _finished: .fill 2, 0
4968   245F             _cave_data: 
4969   245F 00 00       .dw 
4970   2461 01 00 04 00 .dw 1,4,7,0,2,9,1,3,11,2,4,13,0,3,5,4,6,14,5,7,16,0,6,8,7,9,17,1,8,10,
4970   2465 07 00 00 00 
4970   2469 02 00 09 00 
4970   246D 01 00 03 00 
4970   2471 0B 00 02 00 
4970   2475 04 00 0D 00 
4970   2479 00 00 03 00 
4970   247D 05 00 04 00 
4970   2481 06 00 0E 00 
4970   2485 05 00 07 00 
4970   2489 10 00 00 00 
4970   248D 06 00 08 00 
4970   2491 07 00 09 00 
4970   2495 11 00 01 00 
4970   2499 08 00 0A 00 
4971   249D 00 00       .dw 
4972   249F 00 00       .dw 
4973   24A1 09 00 0B 00 .dw 9,11,18,2,10,12,11,13,19,3,12,14,5,13,15,14,16,19,6,15,17,8,16,18,10,17,19,12,15,18,
4973   24A5 12 00 02 00 
4973   24A9 0A 00 0C 00 
4973   24AD 0B 00 0D 00 
4973   24B1 13 00 03 00 
4973   24B5 0C 00 0E 00 
4973   24B9 05 00 0D 00 
4973   24BD 0F 00 0E 00 
4973   24C1 10 00 13 00 
4973   24C5 06 00 0F 00 
4973   24C9 11 00 08 00 
4973   24CD 10 00 12 00 
4973   24D1 0A 00 11 00 
4973   24D5 13 00 0C 00 
4973   24D9 0F 00 12 00 
4974   24DD 00 00       .dw 
4975   24DF 00 00       .dw 
4976   24E1 49 4E 53 54 __s0: .db "INSTRUCTIONS (Y-N)", 0
4976   24E5 52 55 43 54 
4976   24E9 49 4F 4E 53 
4976   24ED 20 28 59 2D 
4976   24F1 4E 29 00 
4977   24F4 4E 45 57 20 __s1: .db "NEW GAME (Y-N)", 0
4977   24F8 47 41 4D 45 
4977   24FC 20 28 59 2D 
4977   2500 4E 29 00 
4978   2503 55 6E 6B 6E __s2: .db "Unknown type size in va_arg() call. Size needs to be either 1 or 2.", 0
4978   2507 6F 77 6E 20 
4978   250B 74 79 70 65 
4978   250F 20 73 69 7A 
4978   2513 65 20 69 6E 
4978   2517 20 76 61 5F 
4978   251B 61 72 67 28 
4978   251F 29 20 63 61 
4978   2523 6C 6C 2E 20 
4978   2527 53 69 7A 65 
4978   252B 20 6E 65 65 
4978   252F 64 73 20 74 
4978   2533 6F 20 62 65 
4978   2537 20 65 69 74 
4978   253B 68 65 72 20 
4978   253F 31 20 6F 72 
4978   2543 20 32 2E 00 
4979   2547 45 72 72 6F __s3: .db "Error: Unknown argument type.\n", 0
4979   254B 72 3A 20 55 
4979   254F 6E 6B 6E 6F 
4979   2553 77 6E 20 61 
4979   2557 72 67 75 6D 
4979   255B 65 6E 74 20 
4979   255F 74 79 70 65 
4979   2563 2E 0A 00 
4980   2566 1B 5B 32 4A __s4: .db "\033[2J\033[H", 0
4980   256A 1B 5B 48 00 
4981   256E 57 45 4C 43 __s5: .db "WELCOME TO 'HUNT THE WUMPUS'\n", 0
4981   2572 4F 4D 45 20 
4981   2576 54 4F 20 27 
4981   257A 48 55 4E 54 
4981   257E 20 54 48 45 
4981   2582 20 57 55 4D 
4981   2586 50 55 53 27 
4981   258A 0A 00 
4982   258C 54 48 45 20 __s6: .db "THE WUMPUS LIVES IN A CAVE OF 20 ROOMS. EACH ROOM\n", 0
4982   2590 57 55 4D 50 
4982   2594 55 53 20 4C 
4982   2598 49 56 45 53 
4982   259C 20 49 4E 20 
4982   25A0 41 20 43 41 
4982   25A4 56 45 20 4F 
4982   25A8 46 20 32 30 
4982   25AC 20 52 4F 4F 
4982   25B0 4D 53 2E 20 
4982   25B4 45 41 43 48 
4982   25B8 20 52 4F 4F 
4982   25BC 4D 0A 00 
4983   25BF 48 41 53 20 __s7: .db "HAS 3 TUNNELS LEADING TO OTHER ROOMS. (LOOK AT A\n", 0
4983   25C3 33 20 54 55 
4983   25C7 4E 4E 45 4C 
4983   25CB 53 20 4C 45 
4983   25CF 41 44 49 4E 
4983   25D3 47 20 54 4F 
4983   25D7 20 4F 54 48 
4983   25DB 45 52 20 52 
4983   25DF 4F 4F 4D 53 
4983   25E3 2E 20 28 4C 
4983   25E7 4F 4F 4B 20 
4983   25EB 41 54 20 41 
4983   25EF 0A 00 
4984   25F1 44 4F 44 45 __s8: .db "DODECAHEDRON TO SEE HOW THIS WORKS-IF YOU DON'T KNOW\n", 0
4984   25F5 43 41 48 45 
4984   25F9 44 52 4F 4E 
4984   25FD 20 54 4F 20 
4984   2601 53 45 45 20 
4984   2605 48 4F 57 20 
4984   2609 54 48 49 53 
4984   260D 20 57 4F 52 
4984   2611 4B 53 2D 49 
4984   2615 46 20 59 4F 
4984   2619 55 20 44 4F 
4984   261D 4E 27 54 20 
4984   2621 4B 4E 4F 57 
4984   2625 0A 
4985   2626 57 48 41 54 __s9: .db "WHAT A DODECAHEDRON IS, ASK SOMEONE)\n", 0
4985   262A 20 41 20 44 
4985   262E 4F 44 45 43 
4985   2632 41 48 45 44 
4985   2636 52 4F 4E 20 
4985   263A 49 53 2C 20 
4985   263E 41 53 4B 20 
4985   2642 53 4F 4D 45 
4985   2646 4F 4E 45 29 
4985   264A 0A 00 
4986   264C 0A 00       __s10: .db "\n", 0
4987   264E 20 48 41 5A __s11: .db " HAZARDS:\n", 0
4987   2652 41 52 44 53 
4987   2656 3A 0A 00 
4988   2659 20 42 4F 54 __s12: .db " BOTTOMLESS PITS: TWO ROOMS HAVE BOTTOMLESS PITS IN THEM\n", 0
4988   265D 54 4F 4D 4C 
4988   2661 45 53 53 20 
4988   2665 50 49 54 53 
4988   2669 3A 20 54 57 
4988   266D 4F 20 52 4F 
4988   2671 4F 4D 53 20 
4988   2675 48 41 56 45 
4988   2679 20 42 4F 54 
4988   267D 54 4F 4D 4C 
4988   2681 45 53 53 20 
4988   2685 50 49 54 53 
4988   2689 20 49 4E 20 
4988   268D 54 48 45 4D 
4988   2691 0A 00 
4989   2693 20 49 46 20 __s13: .db " IF YOU GO THERE, YOU FALL INTO THE PIT (& LOSE!)\n", 0
4989   2697 59 4F 55 20 
4989   269B 47 4F 20 54 
4989   269F 48 45 52 45 
4989   26A3 2C 20 59 4F 
4989   26A7 55 20 46 41 
4989   26AB 4C 4C 20 49 
4989   26AF 4E 54 4F 20 
4989   26B3 54 48 45 20 
4989   26B7 50 49 54 20 
4989   26BB 28 26 20 4C 
4989   26BF 4F 53 45 21 
4989   26C3 29 0A 00 
4990   26C6 20 53 55 50 __s14: .db " SUPER BATS     : TWO OTHER ROOMS HAVE SUPER BATS. IF YOU\n", 0
4990   26CA 45 52 20 42 
4990   26CE 41 54 53 20 
4990   26D2 20 20 20 20 
4990   26D6 3A 20 54 57 
4990   26DA 4F 20 4F 54 
4990   26DE 48 45 52 20 
4990   26E2 52 4F 4F 4D 
4990   26E6 53 20 48 41 
4990   26EA 56 45 20 53 
4990   26EE 55 50 45 52 
4990   26F2 20 42 41 54 
4990   26F6 53 2E 20 49 
4990   26FA 46 20 59 4F 
4990   26FE 55 0A 00 
4991   2701 20 47 4F 20 __s15: .db " GO THERE, A BAT GRABS YOU AND TAKES YOU TO SOME OTHER\n", 0
4991   2705 54 48 45 52 
4991   2709 45 2C 20 41 
4991   270D 20 42 41 54 
4991   2711 20 47 52 41 
4991   2715 42 53 20 59 
4991   2719 4F 55 20 41 
4991   271D 4E 44 20 54 
4991   2721 41 4B 45 53 
4991   2725 20 59 4F 55 
4991   2729 20 54 4F 20 
4991   272D 53 4F 4D 45 
4991   2731 20 4F 54 48 
4991   2735 45 52 0A 00 
4992   2739 20 52 4F 4F __s16: .db " ROOM AT RANDOM. (WHICH MAY BE TROUBLESOME)\n", 0
4992   273D 4D 20 41 54 
4992   2741 20 52 41 4E 
4992   2745 44 4F 4D 2E 
4992   2749 20 28 57 48 
4992   274D 49 43 48 20 
4992   2751 4D 41 59 20 
4992   2755 42 45 20 54 
4992   2759 52 4F 55 42 
4992   275D 4C 45 53 4F 
4992   2761 4D 45 29 0A 
4992   2765 00 
4993   2766 20 57 55 4D __s17: .db " WUMPUS:\n", 0
4993   276A 50 55 53 3A 
4993   276E 0A 00 
4994   2770 20 54 48 45 __s18: .db " THE WUMPUS IS NOT BOTHERED BY HAZARDS (HE HAS SUCKER\n", 0
4994   2774 20 57 55 4D 
4994   2778 50 55 53 20 
4994   277C 49 53 20 4E 
4994   2780 4F 54 20 42 
4994   2784 4F 54 48 45 
4994   2788 52 45 44 20 
4994   278C 42 59 20 48 
4994   2790 41 5A 41 52 
4994   2794 44 53 20 28 
4994   2798 48 45 20 48 
4994   279C 41 53 20 53 
4994   27A0 55 43 4B 45 
4994   27A4 52 0A 00 
4995   27A7 20 46 45 45 __s19: .db " FEET AND IS TOO BIG FOR A BAT TO LIFT).  USUALLY\n", 0
4995   27AB 54 20 41 4E 
4995   27AF 44 20 49 53 
4995   27B3 20 54 4F 4F 
4995   27B7 20 42 49 47 
4995   27BB 20 46 4F 52 
4995   27BF 20 41 20 42 
4995   27C3 41 54 20 54 
4995   27C7 4F 20 4C 49 
4995   27CB 46 54 29 2E 
4995   27CF 20 20 55 53 
4995   27D3 55 41 4C 4C 
4995   27D7 59 0A 00 
4996   27DA 20 48 45 20 __s20: .db " HE IS ASLEEP.  TWO THINGS WAKE HIM UP: YOU SHOOTING AN\n", 0
4996   27DE 49 53 20 41 
4996   27E2 53 4C 45 45 
4996   27E6 50 2E 20 20 
4996   27EA 54 57 4F 20 
4996   27EE 54 48 49 4E 
4996   27F2 47 53 20 57 
4996   27F6 41 4B 45 20 
4996   27FA 48 49 4D 20 
4996   27FE 55 50 3A 20 
4996   2802 59 4F 55 20 
4996   2806 53 48 4F 4F 
4996   280A 54 49 4E 47 
4996   280E 20 41 4E 0A 
4996   2812 00 
4997   2813 20 41 52 52 __s21: .db " ARROW OR YOU ENTERING HIS ROOM.\n", 0
4997   2817 4F 57 20 4F 
4997   281B 52 20 59 4F 
4997   281F 55 20 45 4E 
4997   2823 54 45 52 49 
4997   2827 4E 47 20 48 
4997   282B 49 53 20 52 
4997   282F 4F 4F 4D 2E 
4997   2833 0A 00 
4998   2835 20 49 46 20 __s22: .db " IF THE WUMPUS WAKES HE MOVES (P=.75) ONE ROOM\n", 0
4998   2839 54 48 45 20 
4998   283D 57 55 4D 50 
4998   2841 55 53 20 57 
4998   2845 41 4B 45 53 
4998   2849 20 48 45 20 
4998   284D 4D 4F 56 45 
4998   2851 53 20 28 50 
4998   2855 3D 2E 37 35 
4998   2859 29 20 4F 4E 
4998   285D 45 20 52 4F 
4998   2861 4F 4D 0A 00 
4999   2865 20 4F 52 20 __s23: .db " OR STAYS STILL (P=.25).  AFTER THAT, IF HE IS WHERE YOU\n", 0
4999   2869 53 54 41 59 
4999   286D 53 20 53 54 
4999   2871 49 4C 4C 20 
4999   2875 28 50 3D 2E 
4999   2879 32 35 29 2E 
4999   287D 20 20 41 46 
4999   2881 54 45 52 20 
4999   2885 54 48 41 54 
4999   2889 2C 20 49 46 
4999   288D 20 48 45 20 
4999   2891 49 53 20 57 
4999   2895 48 45 52 45 
4999   2899 20 59 4F 55 
4999   289D 0A 00 
5000   289F 20 41 52 45 __s24: .db " ARE, HE EATS YOU UP AND YOU LOSE!\n", 0
5000   28A3 2C 20 48 45 
5000   28A7 20 45 41 54 
5000   28AB 53 20 59 4F 
5000   28AF 55 20 55 50 
5000   28B3 20 41 4E 44 
5000   28B7 20 59 4F 55 
5000   28BB 20 4C 4F 53 
5000   28BF 45 21 0A 00 
5001   28C3 20 59 4F 55 __s25: .db " YOU:\n", 0
5001   28C7 3A 0A 00 
5002   28CA 20 45 41 43 __s26: .db " EACH TURN YOU MAY MOVE OR SHOOT A CROOKED ARROW\n", 0
5002   28CE 48 20 54 55 
5002   28D2 52 4E 20 59 
5002   28D6 4F 55 20 4D 
5002   28DA 41 59 20 4D 
5002   28DE 4F 56 45 20 
5002   28E2 4F 52 20 53 
5002   28E6 48 4F 4F 54 
5002   28EA 20 41 20 43 
5002   28EE 52 4F 4F 4B 
5002   28F2 45 44 20 41 
5002   28F6 52 52 4F 57 
5002   28FA 0A 00 
5003   28FC 20 4D 4F 56 __s27: .db " MOVING:  YOU CAN MOVE ONE ROOM (THRU ONE TUNNEL)\n", 0
5003   2900 49 4E 47 3A 
5003   2904 20 20 59 4F 
5003   2908 55 20 43 41 
5003   290C 4E 20 4D 4F 
5003   2910 56 45 20 4F 
5003   2914 4E 45 20 52 
5003   2918 4F 4F 4D 20 
5003   291C 28 54 48 52 
5003   2920 55 20 4F 4E 
5003   2924 45 20 54 55 
5003   2928 4E 4E 45 4C 
5003   292C 29 0A 00 
5004   292F 20 41 52 52 __s28: .db " ARROWS:  YOU HAVE 5 ARROWS.  YOU LOSE WHEN YOU RUN OUT\n", 0
5004   2933 4F 57 53 3A 
5004   2937 20 20 59 4F 
5004   293B 55 20 48 41 
5004   293F 56 45 20 35 
5004   2943 20 41 52 52 
5004   2947 4F 57 53 2E 
5004   294B 20 20 59 4F 
5004   294F 55 20 4C 4F 
5004   2953 53 45 20 57 
5004   2957 48 45 4E 20 
5004   295B 59 4F 55 20 
5004   295F 52 55 4E 20 
5004   2963 4F 55 54 0A 
5004   2967 00 
5005   2968 20 45 41 43 __s29: .db " EACH ARROW CAN GO FROM 1 TO 5 ROOMS. YOU AIM BY TELLING\n", 0
5005   296C 48 20 41 52 
5005   2970 52 4F 57 20 
5005   2974 43 41 4E 20 
5005   2978 47 4F 20 46 
5005   297C 52 4F 4D 20 
5005   2980 31 20 54 4F 
5005   2984 20 35 20 52 
5005   2988 4F 4F 4D 53 
5005   298C 2E 20 59 4F 
5005   2990 55 20 41 49 
5005   2994 4D 20 42 59 
5005   2998 20 54 45 4C 
5005   299C 4C 49 4E 47 
5005   29A0 0A 00 
5006   29A2 20 20 20 54 __s30: .db "   THE COMPUTER THE ROOM#S YOU WANT THE ARROW TO GO TO.\n", 0
5006   29A6 48 45 20 43 
5006   29AA 4F 4D 50 55 
5006   29AE 54 45 52 20 
5006   29B2 54 48 45 20 
5006   29B6 52 4F 4F 4D 
5006   29BA 23 53 20 59 
5006   29BE 4F 55 20 57 
5006   29C2 41 4E 54 20 
5006   29C6 54 48 45 20 
5006   29CA 41 52 52 4F 
5006   29CE 57 20 54 4F 
5006   29D2 20 47 4F 20 
5006   29D6 54 4F 2E 0A 
5006   29DA 00 
5007   29DB 20 20 20 49 __s31: .db "   IF THE ARROW CAN'T GO THAT WAY (IF NO TUNNEL) IT MOVES\n", 0
5007   29DF 46 20 54 48 
5007   29E3 45 20 41 52 
5007   29E7 52 4F 57 20 
5007   29EB 43 41 4E 27 
5007   29EF 54 20 47 4F 
5007   29F3 20 54 48 41 
5007   29F7 54 20 57 41 
5007   29FB 59 20 28 49 
5007   29FF 46 20 4E 4F 
5007   2A03 20 54 55 4E 
5007   2A07 4E 45 4C 29 
5007   2A0B 20 49 54 20 
5007   2A0F 4D 4F 56 45 
5007   2A13 53 0A 
5008   2A15 20 20 20 41 __s32: .db "   AT RANDOM TO THE NEXT ROOM.\n", 0
5008   2A19 54 20 52 41 
5008   2A1D 4E 44 4F 4D 
5008   2A21 20 54 4F 20 
5008   2A25 54 48 45 20 
5008   2A29 4E 45 58 54 
5008   2A2D 20 52 4F 4F 
5008   2A31 4D 2E 0A 00 
5009   2A35 20 20 20 20 __s33: .db "     IF THE ARROW HITS THE WUMPUS, YOU WIN.\n", 0
5009   2A39 20 49 46 20 
5009   2A3D 54 48 45 20 
5009   2A41 41 52 52 4F 
5009   2A45 57 20 48 49 
5009   2A49 54 53 20 54 
5009   2A4D 48 45 20 57 
5009   2A51 55 4D 50 55 
5009   2A55 53 2C 20 59 
5009   2A59 4F 55 20 57 
5009   2A5D 49 4E 2E 0A 
5009   2A61 00 
5010   2A62 20 20 20 20 __s34: .db "     IF THE ARROW HITS YOU, YOU LOSE.\n", 0
5010   2A66 20 49 46 20 
5010   2A6A 54 48 45 20 
5010   2A6E 41 52 52 4F 
5010   2A72 57 20 48 49 
5010   2A76 54 53 20 59 
5010   2A7A 4F 55 2C 20 
5010   2A7E 59 4F 55 20 
5010   2A82 4C 4F 53 45 
5010   2A86 2E 0A 00 
5011   2A89 20 57 41 52 __s35: .db " WARNINGS:\n", 0
5011   2A8D 4E 49 4E 47 
5011   2A91 53 3A 0A 00 
5012   2A95 20 57 48 45 __s36: .db " WHEN YOU ARE ONE ROOM AWAY FROM A WUMPUS OR HAZARD,\n", 0
5012   2A99 4E 20 59 4F 
5012   2A9D 55 20 41 52 
5012   2AA1 45 20 4F 4E 
5012   2AA5 45 20 52 4F 
5012   2AA9 4F 4D 20 41 
5012   2AAD 57 41 59 20 
5012   2AB1 46 52 4F 4D 
5012   2AB5 20 41 20 57 
5012   2AB9 55 4D 50 55 
5012   2ABD 53 20 4F 52 
5012   2AC1 20 48 41 5A 
5012   2AC5 41 52 44 2C 
5012   2AC9 0A 00 
5013   2ACB 20 54 48 45 __s37: .db " THE COMPUTER SAYS:\n", 0
5013   2ACF 20 43 4F 4D 
5013   2AD3 50 55 54 45 
5013   2AD7 52 20 53 41 
5013   2ADB 59 53 3A 0A 
5013   2ADF 00 
5014   2AE0 20 57 55 4D __s38: .db " WUMPUS:  'I SMELL A WUMPUS'\n", 0
5014   2AE4 50 55 53 3A 
5014   2AE8 20 20 27 49 
5014   2AEC 20 53 4D 45 
5014   2AF0 4C 4C 20 41 
5014   2AF4 20 57 55 4D 
5014   2AF8 50 55 53 27 
5014   2AFC 0A 00 
5015   2AFE 20 42 41 54 __s39: .db " BAT   :  'BATS NEARBY'\n", 0
5015   2B02 20 20 20 3A 
5015   2B06 20 20 27 42 
5015   2B0A 41 54 53 20 
5015   2B0E 4E 45 41 52 
5015   2B12 42 59 27 0A 
5015   2B16 00 
5016   2B17 20 50 49 54 __s40: .db " PIT   :  'I FEEL A DRAFT'\n", 0
5016   2B1B 20 20 20 3A 
5016   2B1F 20 20 27 49 
5016   2B23 20 46 45 45 
5016   2B27 4C 20 41 20 
5016   2B2B 44 52 41 46 
5016   2B2F 54 27 0A 00 
5017   2B33 49 20 53 4D __s41: .db "I SMELL A WUMPUS!\n", 0
5017   2B37 45 4C 4C 20 
5017   2B3B 41 20 57 55 
5017   2B3F 4D 50 55 53 
5017   2B43 21 0A 00 
5018   2B46 49 20 46 45 __s42: .db "I FEEL A DRAFT\n", 0
5018   2B4A 45 4C 20 41 
5018   2B4E 20 44 52 41 
5018   2B52 46 54 0A 00 
5019   2B56 42 41 54 53 __s43: .db "BATS NEARBY!\n", 0
5019   2B5A 20 4E 45 41 
5019   2B5E 52 42 59 21 
5019   2B62 0A 00 
5020   2B64 59 4F 55 20 __s44: .db "YOU ARE IN ROOM ", 0
5020   2B68 41 52 45 20 
5020   2B6C 49 4E 20 52 
5020   2B70 4F 4F 4D 20 
5020   2B74 00 
5021   2B75 54 55 4E 4E __s45: .db "TUNNELS LEAD TO ", 0
5021   2B79 45 4C 53 20 
5021   2B7D 4C 45 41 44 
5021   2B81 20 54 4F 20 
5021   2B85 00 
5022   2B86 0A 0A 00    __s46: .db "\n\n", 0
5023   2B89 53 48 4F 4F __s47: .db "SHOOT OR MOVE (S-M)", 0
5023   2B8D 54 20 4F 52 
5023   2B91 20 4D 4F 56 
5023   2B95 45 20 28 53 
5023   2B99 2D 4D 29 00 
5024   2B9D 54 53 4B 20 __s48: .db "TSK TSK TSK - WUMPUS GOT YOU!\n", 0
5024   2BA1 54 53 4B 20 
5024   2BA5 54 53 4B 20 
5024   2BA9 2D 20 57 55 
5024   2BAD 4D 50 55 53 
5024   2BB1 20 47 4F 54 
5024   2BB5 20 59 4F 55 
5024   2BB9 21 0A 00 
5025   2BBC 4E 4F 2E 20 __s49: .db "NO. OF ROOMS (1-5)", 0
5025   2BC0 4F 46 20 52 
5025   2BC4 4F 4F 4D 53 
5025   2BC8 20 28 31 2D 
5025   2BCC 35 29 00 
5026   2BCF 52 4F 4F 4D __s50: .db "ROOM #", 0
5026   2BD3 20 23 00 
5027   2BD6 41 52 52 4F __s51: .db "ARROWS AREN'T THAT CROOKED - TRY ANOTHER ROOM\n", 0
5027   2BDA 57 53 20 41 
5027   2BDE 52 45 4E 27 
5027   2BE2 54 20 54 48 
5027   2BE6 41 54 20 43 
5027   2BEA 52 4F 4F 4B 
5027   2BEE 45 44 20 2D 
5027   2BF2 20 54 52 59 
5027   2BF6 20 41 4E 4F 
5027   2BFA 54 48 45 52 
5027   2BFE 20 52 4F 4F 
5027   2C02 4D 0A 
5028   2C04 41 48 41 21 __s52: .db "AHA! YOU GOT THE WUMPUS!\n", 0
5028   2C08 20 59 4F 55 
5028   2C0C 20 47 4F 54 
5028   2C10 20 54 48 45 
5028   2C14 20 57 55 4D 
5028   2C18 50 55 53 21 
5028   2C1C 0A 00 
5029   2C1E 4F 55 43 48 __s53: .db "OUCH! ARROW GOT YOU!\n", 0
5029   2C22 21 20 41 52 
5029   2C26 52 4F 57 20 
5029   2C2A 47 4F 54 20 
5029   2C2E 59 4F 55 21 
5029   2C32 0A 00 
5030   2C34 4D 49 53 53 __s54: .db "MISSED\n", 0
5030   2C38 45 44 0A 00 
5031   2C3C 57 48 45 52 __s55: .db "WHERE TO", 0
5031   2C40 45 20 54 4F 
5031   2C44 00 
5032   2C45 4E 4F 54 20 __s56: .db "NOT POSSIBLE\n", 0
5032   2C49 50 4F 53 53 
5032   2C4D 49 42 4C 45 
5032   2C51 0A 00 
5033   2C53 5A 41 50 2D __s57: .db "ZAP--SUPER BAT SNATCH! ELSEWHEREVILLE FOR YOU!\n", 0
5033   2C57 2D 53 55 50 
5033   2C5B 45 52 20 42 
5033   2C5F 41 54 20 53 
5033   2C63 4E 41 54 43 
5033   2C67 48 21 20 45 
5033   2C6B 4C 53 45 57 
5033   2C6F 48 45 52 45 
5033   2C73 56 49 4C 4C 
5033   2C77 45 20 46 4F 
5033   2C7B 52 20 59 4F 
5033   2C7F 55 21 0A 00 
5034   2C83 2E 2E 2E 20 __s58: .db "... OOPS! BUMPED A WUMPUS!\n", 0
5034   2C87 4F 4F 50 53 
5034   2C8B 21 20 42 55 
5034   2C8F 4D 50 45 44 
5034   2C93 20 41 20 57 
5034   2C97 55 4D 50 55 
5034   2C9B 53 21 0A 00 
5035   2C9F 59 59 59 59 __s59: .db "YYYYIIIIEEEE . . . FELL IN PIT\n", 0
5035   2CA3 49 49 49 49 
5035   2CA7 45 45 45 45 
5035   2CAB 20 2E 20 2E 
5035   2CAF 20 2E 20 46 
5035   2CB3 45 4C 4C 20 
5035   2CB7 49 4E 20 50 
5035   2CBB 49 54 0A 00 
5036   2CBF 48 55 4E 54 __s60: .db "HUNT THE WUMPUS\n", 0
5036   2CC3 20 54 48 45 
5036   2CC7 20 57 55 4D 
5036   2CCB 50 55 53 0A 
5036   2CCF 00 
5037   2CD0 57 75 6D 70 __s61: .db "Wumpus is at ", 0
5037   2CD4 75 73 20 69 
5037   2CD8 73 20 61 74 
5037   2CDC 20 00 
5038   2CDE 2C 20 70 69 __s62: .db ", pits at ", 0
5038   2CE2 74 73 20 61 
5038   2CE6 74 20 00 
5039   2CE9 20 26 20 00 __s63: .db " & ", 0
5040   2CED 2C 20 62 61 __s64: .db ", bats at ", 0
5040   2CF1 74 73 20 61 
5040   2CF5 74 20 00 
5041   2CF8 48 45 45 20 __s65: .db "HEE HEE HEE - THE WUMPUS'LL GET YOU NEXT TIME!!\n", 0
5041   2CFC 48 45 45 20 
5041   2D00 48 45 45 20 
5041   2D04 2D 20 54 48 
5041   2D08 45 20 57 55 
5041   2D0C 4D 50 55 53 
5041   2D10 27 4C 4C 20 
5041   2D14 47 45 54 20 
5041   2D18 59 4F 55 20 
5041   2D1C 4E 45 58 54 
5041   2D20 20 54 49 4D 
5041   2D24 45 21 21 0A 
5042   2D28 48 41 20 48 __s66: .db "HA HA HA - YOU LOSE!\n", 0
5042   2D2C 41 20 48 41 
5042   2D30 20 2D 20 59 
5042   2D34 4F 55 20 4C 
5042   2D38 4F 53 45 21 
5042   2D3C 0A 00 
5043   2D3E             
5044   2D3E 40 2D       _heap_top: .dw _heap
5045   2D40 00          _heap: .db 0
5046   2D41             ; --- END DATA BLOCK
5047   2D41             
5048   2D41             .end
tasm: Number of errors = 0
