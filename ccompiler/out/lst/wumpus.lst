0001   0000             ; --- FILENAME: programs/wumpus.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; int c; 
0011   0408 52 02 00      sub sp, 2
0012   040B             ; c = getlet("INSTRUCTIONS (Y-N): "); 
0013   040B FA FF FF      lea d, [bp + -1] ; $c
0014   040E DA            push d
0015   040F             ; --- START FUNCTION CALL
0016   040F 26 4C 18      mov b, _s0 ; "INSTRUCTIONS (Y-N): "
0017   0412 FD AB         swp b
0018   0414 D8            push b
0019   0415 07 93 04      call getlet
0020   0418 51 02 00      add sp, 2
0021   041B             ; --- END FUNCTION CALL
0022   041B E7            pop d
0023   041C FD 43         mov [d], b
0024   041E             ; if (c == 'Y') { 
0025   041E             _if1_cond:
0026   041E FA FF FF      lea d, [bp + -1] ; $c
0027   0421 2A            mov b, [d]
0028   0422 38 00 00      mov c, 0
0029   0425             ; --- START RELATIONAL
0030   0425 D7            push a
0031   0426 11            mov a, b
0032   0427 FD 2E 59 00   mov32 cb, $00000059
0032   042B 00 00 
0033   042D B0            cmp a, b
0034   042E FD 71         seq ; ==
0035   0430 E4            pop a
0036   0431             ; --- END RELATIONAL
0037   0431 C0 00 00      cmp b, 0
0038   0434 C6 3D 04      je _if1_exit
0039   0437             _if1_TRUE:
0040   0437             ; print_instructions(); 
0041   0437             ; --- START FUNCTION CALL
0042   0437 07 F0 04      call print_instructions
0043   043A 0A 3D 04      jmp _if1_exit
0044   043D             _if1_exit:
0045   043D             ; do {  
0046   043D             _do2_block:
0047   043D             ; game_setup(); 
0048   043D             ; --- START FUNCTION CALL
0049   043D 07 93 11      call game_setup
0050   0440             ; game_play(); 
0051   0440             ; --- START FUNCTION CALL
0052   0440 07 F8 12      call game_play
0053   0443             ; } while (getlet("NEW GAME (Y-N): ") != 'N'); 
0054   0443             _do2_cond:
0055   0443             ; --- START FUNCTION CALL
0056   0443 26 61 18      mov b, _s1 ; "NEW GAME (Y-N): "
0057   0446 FD AB         swp b
0058   0448 D8            push b
0059   0449 07 93 04      call getlet
0060   044C 51 02 00      add sp, 2
0061   044F             ; --- END FUNCTION CALL
0062   044F             ; --- START RELATIONAL
0063   044F D7            push a
0064   0450 11            mov a, b
0065   0451 FD 2E 4E 00   mov32 cb, $0000004e
0065   0455 00 00 
0066   0457 B0            cmp a, b
0067   0458 FD 72         sneq ; !=
0068   045A E4            pop a
0069   045B             ; --- END RELATIONAL
0070   045B C0 01 00      cmp b, 1
0071   045E C6 3D 04      je _do2_block
0072   0461             _do2_exit:
0073   0461             ; return 0; 
0074   0461 FD 2E 00 00   mov32 cb, $00000000
0074   0465 00 00 
0075   0467 F9            leave
0076   0468 05 0B         syscall sys_terminate_proc
0077   046A             
0078   046A             getnum:
0079   046A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0080   046D             ; int n; 
0081   046D 52 02 00      sub sp, 2
0082   0470             ; print(prompt); 
0083   0470             ; --- START FUNCTION CALL
0084   0470 FA 05 00      lea d, [bp + 5] ; $prompt
0085   0473 2A            mov b, [d]
0086   0474 38 00 00      mov c, 0
0087   0477 FD AB         swp b
0088   0479 D8            push b
0089   047A 07 ED 14      call print
0090   047D 51 02 00      add sp, 2
0091   0480             ; --- END FUNCTION CALL
0092   0480             ; n = scann(); 
0093   0480 FA FF FF      lea d, [bp + -1] ; $n
0094   0483 DA            push d
0095   0484             ; --- START FUNCTION CALL
0096   0484 07 A4 16      call scann
0097   0487 E7            pop d
0098   0488 FD 43         mov [d], b
0099   048A             ; return n; 
0100   048A FA FF FF      lea d, [bp + -1] ; $n
0101   048D 2A            mov b, [d]
0102   048E 38 00 00      mov c, 0
0103   0491 F9            leave
0104   0492 09            ret
0105   0493             
0106   0493             getlet:
0107   0493 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0108   0496             ; char c = '\n'; 
0109   0496 52 01 00      sub sp, 1
0110   0499             ; --- START LOCAL VAR INITIALIZATION
0111   0499 FA 00 00      lea d, [bp + 0] ; $c
0112   049C DA            push d
0113   049D FD 2E 0A 00   mov32 cb, $0000000a
0113   04A1 00 00 
0114   04A3 E7            pop d
0115   04A4 FD 3E         mov [d], bl
0116   04A6             ; --- END LOCAL VAR INITIALIZATION
0117   04A6             ; print(prompt); 
0118   04A6             ; --- START FUNCTION CALL
0119   04A6 FA 05 00      lea d, [bp + 5] ; $prompt
0120   04A9 2A            mov b, [d]
0121   04AA 38 00 00      mov c, 0
0122   04AD FD AB         swp b
0123   04AF D8            push b
0124   04B0 07 ED 14      call print
0125   04B3 51 02 00      add sp, 2
0126   04B6             ; --- END FUNCTION CALL
0127   04B6             ; while (c == '\n') { 
0128   04B6             _while3_cond:
0129   04B6 FA 00 00      lea d, [bp + 0] ; $c
0130   04B9 32            mov bl, [d]
0131   04BA A7 00         mov bh, 0
0132   04BC 38 00 00      mov c, 0
0133   04BF             ; --- START RELATIONAL
0134   04BF D7            push a
0135   04C0 11            mov a, b
0136   04C1 FD 2E 0A 00   mov32 cb, $0000000a
0136   04C5 00 00 
0137   04C7 B0            cmp a, b
0138   04C8 FD 71         seq ; ==
0139   04CA E4            pop a
0140   04CB             ; --- END RELATIONAL
0141   04CB C0 00 00      cmp b, 0
0142   04CE C6 DE 04      je _while3_exit
0143   04D1             _while3_block:
0144   04D1             ; c = getchar(); 
0145   04D1 FA 00 00      lea d, [bp + 0] ; $c
0146   04D4 DA            push d
0147   04D5             ; --- START FUNCTION CALL
0148   04D5 07 06 15      call getchar
0149   04D8 E7            pop d
0150   04D9 FD 3E         mov [d], bl
0151   04DB 0A B6 04      jmp _while3_cond
0152   04DE             _while3_exit:
0153   04DE             ; return toupper(c); 
0154   04DE             ; --- START FUNCTION CALL
0155   04DE FA 00 00      lea d, [bp + 0] ; $c
0156   04E1 32            mov bl, [d]
0157   04E2 A7 00         mov bh, 0
0158   04E4 38 00 00      mov c, 0
0159   04E7 DD            push bl
0160   04E8 07 20 15      call toupper
0161   04EB 51 01 00      add sp, 1
0162   04EE             ; --- END FUNCTION CALL
0163   04EE F9            leave
0164   04EF 09            ret
0165   04F0             
0166   04F0             print_instructions:
0167   04F0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0168   04F3             ; print("Welcome to 'hunt the wumpus'\n"); 
0169   04F3             ; --- START FUNCTION CALL
0170   04F3 26 72 18      mov b, _s2 ; "Welcome to 'hunt the wumpus'\n"
0171   04F6 FD AB         swp b
0172   04F8 D8            push b
0173   04F9 07 ED 14      call print
0174   04FC 51 02 00      add sp, 2
0175   04FF             ; --- END FUNCTION CALL
0176   04FF             ; print("The wumpus lives in a cave of 20 rooms. Each room\n"); 
0177   04FF             ; --- START FUNCTION CALL
0178   04FF 26 90 18      mov b, _s3 ; "The wumpus lives in a cave of 20 rooms. Each room\n"
0179   0502 FD AB         swp b
0180   0504 D8            push b
0181   0505 07 ED 14      call print
0182   0508 51 02 00      add sp, 2
0183   050B             ; --- END FUNCTION CALL
0184   050B             ; print("has 3 tunnels leading to other rooms.\n");  
0185   050B             ; --- START FUNCTION CALL
0186   050B 26 C3 18      mov b, _s4 ; "has 3 tunnels leading to other rooms.\n"
0187   050E FD AB         swp b
0188   0510 D8            push b
0189   0511 07 ED 14      call print
0190   0514 51 02 00      add sp, 2
0191   0517             ; --- END FUNCTION CALL
0192   0517             ; print("Look at a dodecahedron to see how this works.\n"); 
0193   0517             ; --- START FUNCTION CALL
0194   0517 26 EA 18      mov b, _s5 ; "Look at a dodecahedron to see how this works.\n"
0195   051A FD AB         swp b
0196   051C D8            push b
0197   051D 07 ED 14      call print
0198   0520 51 02 00      add sp, 2
0199   0523             ; --- END FUNCTION CALL
0200   0523             ; print("\n"); 
0201   0523             ; --- START FUNCTION CALL
0202   0523 26 19 19      mov b, _s6 ; "\n"
0203   0526 FD AB         swp b
0204   0528 D8            push b
0205   0529 07 ED 14      call print
0206   052C 51 02 00      add sp, 2
0207   052F             ; --- END FUNCTION CALL
0208   052F             ; print(" Hazards:\n"); 
0209   052F             ; --- START FUNCTION CALL
0210   052F 26 1B 19      mov b, _s7 ; " Hazards:\n"
0211   0532 FD AB         swp b
0212   0534 D8            push b
0213   0535 07 ED 14      call print
0214   0538 51 02 00      add sp, 2
0215   053B             ; --- END FUNCTION CALL
0216   053B             ; print(" Bottomless pits: Two rooms have bottomless pits in them\n"); 
0217   053B             ; --- START FUNCTION CALL
0218   053B 26 26 19      mov b, _s8 ; " Bottomless pits: Two rooms have bottomless pits in them\n"
0219   053E FD AB         swp b
0220   0540 D8            push b
0221   0541 07 ED 14      call print
0222   0544 51 02 00      add sp, 2
0223   0547             ; --- END FUNCTION CALL
0224   0547             ; print(" If you go there, you fall into the pit (& lose!)\n"); 
0225   0547             ; --- START FUNCTION CALL
0226   0547 26 60 19      mov b, _s9 ; " If you go there, you fall into the pit (& lose!)\n"
0227   054A FD AB         swp b
0228   054C D8            push b
0229   054D 07 ED 14      call print
0230   0550 51 02 00      add sp, 2
0231   0553             ; --- END FUNCTION CALL
0232   0553             ; print(" SUPER BATS     : TWO OTHER ROOMS HAVE SUPER BATS. IF YOU\n"); 
0233   0553             ; --- START FUNCTION CALL
0234   0553 26 93 19      mov b, _s10 ; " SUPER BATS     : TWO OTHER ROOMS HAVE SUPER BATS. IF YOU\n"
0235   0556 FD AB         swp b
0236   0558 D8            push b
0237   0559 07 ED 14      call print
0238   055C 51 02 00      add sp, 2
0239   055F             ; --- END FUNCTION CALL
0240   055F             ; print(" GO THERE, A BAT GRABS YOU AND TAKES YOU TO SOME OTHER\n"); 
0241   055F             ; --- START FUNCTION CALL
0242   055F 26 CE 19      mov b, _s11 ; " GO THERE, A BAT GRABS YOU AND TAKES YOU TO SOME OTHER\n"
0243   0562 FD AB         swp b
0244   0564 D8            push b
0245   0565 07 ED 14      call print
0246   0568 51 02 00      add sp, 2
0247   056B             ; --- END FUNCTION CALL
0248   056B             ; print(" ROOM AT RANDOM. (WHICH MAY BE TROUBLESOME)\n\n"); 
0249   056B             ; --- START FUNCTION CALL
0250   056B 26 06 1A      mov b, _s12 ; " ROOM AT RANDOM. (WHICH MAY BE TROUBLESOME)\n\n"
0251   056E FD AB         swp b
0252   0570 D8            push b
0253   0571 07 ED 14      call print
0254   0574 51 02 00      add sp, 2
0255   0577             ; --- END FUNCTION CALL
0256   0577             ; print(" WUMPUS:\n"); 
0257   0577             ; --- START FUNCTION CALL
0258   0577 26 34 1A      mov b, _s13 ; " WUMPUS:\n"
0259   057A FD AB         swp b
0260   057C D8            push b
0261   057D 07 ED 14      call print
0262   0580 51 02 00      add sp, 2
0263   0583             ; --- END FUNCTION CALL
0264   0583             ; print(" THE WUMPUS IS NOT BOTHERED BY HAZARDS (HE HAS SUCKER\n"); 
0265   0583             ; --- START FUNCTION CALL
0266   0583 26 3E 1A      mov b, _s14 ; " THE WUMPUS IS NOT BOTHERED BY HAZARDS (HE HAS SUCKER\n"
0267   0586 FD AB         swp b
0268   0588 D8            push b
0269   0589 07 ED 14      call print
0270   058C 51 02 00      add sp, 2
0271   058F             ; --- END FUNCTION CALL
0272   058F             ; print(" FEET AND IS TOO BIG FOR A BAT TO LIFT).  USUALLY\n"); 
0273   058F             ; --- START FUNCTION CALL
0274   058F 26 75 1A      mov b, _s15 ; " FEET AND IS TOO BIG FOR A BAT TO LIFT).  USUALLY\n"
0275   0592 FD AB         swp b
0276   0594 D8            push b
0277   0595 07 ED 14      call print
0278   0598 51 02 00      add sp, 2
0279   059B             ; --- END FUNCTION CALL
0280   059B             ; print(" HE IS ASLEEP.  TWO THINGS WAKE HIM UP: YOU SHOOTING AN\n"); 
0281   059B             ; --- START FUNCTION CALL
0282   059B 26 A8 1A      mov b, _s16 ; " HE IS ASLEEP.  TWO THINGS WAKE HIM UP: YOU SHOOTING AN\n"
0283   059E FD AB         swp b
0284   05A0 D8            push b
0285   05A1 07 ED 14      call print
0286   05A4 51 02 00      add sp, 2
0287   05A7             ; --- END FUNCTION CALL
0288   05A7             ; print(" ARROW OR YOU ENTERING HIS ROOM.\n"); 
0289   05A7             ; --- START FUNCTION CALL
0290   05A7 26 E1 1A      mov b, _s17 ; " ARROW OR YOU ENTERING HIS ROOM.\n"
0291   05AA FD AB         swp b
0292   05AC D8            push b
0293   05AD 07 ED 14      call print
0294   05B0 51 02 00      add sp, 2
0295   05B3             ; --- END FUNCTION CALL
0296   05B3             ; print(" IF THE WUMPUS WAKES HE MOVES (P=.75) ONE ROOM\n"); 
0297   05B3             ; --- START FUNCTION CALL
0298   05B3 26 03 1B      mov b, _s18 ; " IF THE WUMPUS WAKES HE MOVES (P=.75) ONE ROOM\n"
0299   05B6 FD AB         swp b
0300   05B8 D8            push b
0301   05B9 07 ED 14      call print
0302   05BC 51 02 00      add sp, 2
0303   05BF             ; --- END FUNCTION CALL
0304   05BF             ; print(" OR STAYS STILL (P=.25).  AFTER THAT, IF HE IS WHERE YOU\n"); 
0305   05BF             ; --- START FUNCTION CALL
0306   05BF 26 33 1B      mov b, _s19 ; " OR STAYS STILL (P=.25).  AFTER THAT, IF HE IS WHERE YOU\n"
0307   05C2 FD AB         swp b
0308   05C4 D8            push b
0309   05C5 07 ED 14      call print
0310   05C8 51 02 00      add sp, 2
0311   05CB             ; --- END FUNCTION CALL
0312   05CB             ; print(" ARE, HE EATS YOU UP AND YOU LOSE!\n"); 
0313   05CB             ; --- START FUNCTION CALL
0314   05CB 26 6D 1B      mov b, _s20 ; " ARE, HE EATS YOU UP AND YOU LOSE!\n"
0315   05CE FD AB         swp b
0316   05D0 D8            push b
0317   05D1 07 ED 14      call print
0318   05D4 51 02 00      add sp, 2
0319   05D7             ; --- END FUNCTION CALL
0320   05D7             ; print("\n"); 
0321   05D7             ; --- START FUNCTION CALL
0322   05D7 26 19 19      mov b, _s6 ; "\n"
0323   05DA FD AB         swp b
0324   05DC D8            push b
0325   05DD 07 ED 14      call print
0326   05E0 51 02 00      add sp, 2
0327   05E3             ; --- END FUNCTION CALL
0328   05E3             ; print(" YOU:\n"); 
0329   05E3             ; --- START FUNCTION CALL
0330   05E3 26 91 1B      mov b, _s21 ; " YOU:\n"
0331   05E6 FD AB         swp b
0332   05E8 D8            push b
0333   05E9 07 ED 14      call print
0334   05EC 51 02 00      add sp, 2
0335   05EF             ; --- END FUNCTION CALL
0336   05EF             ; print(" EACH TURN YOU MAY MOVE OR SHOOT A CROOKED ARROW\n"); 
0337   05EF             ; --- START FUNCTION CALL
0338   05EF 26 98 1B      mov b, _s22 ; " EACH TURN YOU MAY MOVE OR SHOOT A CROOKED ARROW\n"
0339   05F2 FD AB         swp b
0340   05F4 D8            push b
0341   05F5 07 ED 14      call print
0342   05F8 51 02 00      add sp, 2
0343   05FB             ; --- END FUNCTION CALL
0344   05FB             ; print(" MOVING:  YOU CAN MOVE ONE ROOM (THRU ONE TUNNEL)\n"); 
0345   05FB             ; --- START FUNCTION CALL
0346   05FB 26 CA 1B      mov b, _s23 ; " MOVING:  YOU CAN MOVE ONE ROOM (THRU ONE TUNNEL)\n"
0347   05FE FD AB         swp b
0348   0600 D8            push b
0349   0601 07 ED 14      call print
0350   0604 51 02 00      add sp, 2
0351   0607             ; --- END FUNCTION CALL
0352   0607             ; print(" ARROWS:  YOU HAVE 5 ARROWS.  YOU LOSE WHEN YOU RUN OUT\n"); 
0353   0607             ; --- START FUNCTION CALL
0354   0607 26 FD 1B      mov b, _s24 ; " ARROWS:  YOU HAVE 5 ARROWS.  YOU LOSE WHEN YOU RUN OUT\n"
0355   060A FD AB         swp b
0356   060C D8            push b
0357   060D 07 ED 14      call print
0358   0610 51 02 00      add sp, 2
0359   0613             ; --- END FUNCTION CALL
0360   0613             ; print(" EACH ARROW CAN GO FROM 1 TO 5 ROOMS. YOU AIM BY TELLING\n"); 
0361   0613             ; --- START FUNCTION CALL
0362   0613 26 36 1C      mov b, _s25 ; " EACH ARROW CAN GO FROM 1 TO 5 ROOMS. YOU AIM BY TELLING\n"
0363   0616 FD AB         swp b
0364   0618 D8            push b
0365   0619 07 ED 14      call print
0366   061C 51 02 00      add sp, 2
0367   061F             ; --- END FUNCTION CALL
0368   061F             ; print("   THE COMPUTER THE ROOM#S YOU WANT THE ARROW TO GO TO.\n"); 
0369   061F             ; --- START FUNCTION CALL
0370   061F 26 70 1C      mov b, _s26 ; "   THE COMPUTER THE ROOM#S YOU WANT THE ARROW TO GO TO.\n"
0371   0622 FD AB         swp b
0372   0624 D8            push b
0373   0625 07 ED 14      call print
0374   0628 51 02 00      add sp, 2
0375   062B             ; --- END FUNCTION CALL
0376   062B             ; print("   IF THE ARROW CAN'T GO THAT WAY (IF NO TUNNEL) IT MOVES\n"); 
0377   062B             ; --- START FUNCTION CALL
0378   062B 26 A9 1C      mov b, _s27 ; "   IF THE ARROW CAN'T GO THAT WAY (IF NO TUNNEL) IT MOVES\n"
0379   062E FD AB         swp b
0380   0630 D8            push b
0381   0631 07 ED 14      call print
0382   0634 51 02 00      add sp, 2
0383   0637             ; --- END FUNCTION CALL
0384   0637             ; print("   AT RANDOM TO THE NEXT ROOM.\n"); 
0385   0637             ; --- START FUNCTION CALL
0386   0637 26 E3 1C      mov b, _s28 ; "   AT RANDOM TO THE NEXT ROOM.\n"
0387   063A FD AB         swp b
0388   063C D8            push b
0389   063D 07 ED 14      call print
0390   0640 51 02 00      add sp, 2
0391   0643             ; --- END FUNCTION CALL
0392   0643             ; print("     IF THE ARROW HITS THE WUMPUS, YOU WIN.\n"); 
0393   0643             ; --- START FUNCTION CALL
0394   0643 26 03 1D      mov b, _s29 ; "     IF THE ARROW HITS THE WUMPUS, YOU WIN.\n"
0395   0646 FD AB         swp b
0396   0648 D8            push b
0397   0649 07 ED 14      call print
0398   064C 51 02 00      add sp, 2
0399   064F             ; --- END FUNCTION CALL
0400   064F             ; print("     IF THE ARROW HITS YOU, YOU LOSE.\n"); 
0401   064F             ; --- START FUNCTION CALL
0402   064F 26 30 1D      mov b, _s30 ; "     IF THE ARROW HITS YOU, YOU LOSE.\n"
0403   0652 FD AB         swp b
0404   0654 D8            push b
0405   0655 07 ED 14      call print
0406   0658 51 02 00      add sp, 2
0407   065B             ; --- END FUNCTION CALL
0408   065B             ; print(" WARNINGS:\n"); 
0409   065B             ; --- START FUNCTION CALL
0410   065B 26 57 1D      mov b, _s31 ; " WARNINGS:\n"
0411   065E FD AB         swp b
0412   0660 D8            push b
0413   0661 07 ED 14      call print
0414   0664 51 02 00      add sp, 2
0415   0667             ; --- END FUNCTION CALL
0416   0667             ; print(" WHEN YOU ARE ONE ROOM AWAY FROM A WUMPUS OR HAZARD,\n"); 
0417   0667             ; --- START FUNCTION CALL
0418   0667 26 63 1D      mov b, _s32 ; " WHEN YOU ARE ONE ROOM AWAY FROM A WUMPUS OR HAZARD,\n"
0419   066A FD AB         swp b
0420   066C D8            push b
0421   066D 07 ED 14      call print
0422   0670 51 02 00      add sp, 2
0423   0673             ; --- END FUNCTION CALL
0424   0673             ; print(" THE COMPUTER SAYS:\n"); 
0425   0673             ; --- START FUNCTION CALL
0426   0673 26 99 1D      mov b, _s33 ; " THE COMPUTER SAYS:\n"
0427   0676 FD AB         swp b
0428   0678 D8            push b
0429   0679 07 ED 14      call print
0430   067C 51 02 00      add sp, 2
0431   067F             ; --- END FUNCTION CALL
0432   067F             ; print(" WUMPUS:  'I SMELL A WUMPUS'\n"); 
0433   067F             ; --- START FUNCTION CALL
0434   067F 26 AE 1D      mov b, _s34 ; " WUMPUS:  'I SMELL A WUMPUS'\n"
0435   0682 FD AB         swp b
0436   0684 D8            push b
0437   0685 07 ED 14      call print
0438   0688 51 02 00      add sp, 2
0439   068B             ; --- END FUNCTION CALL
0440   068B             ; print(" BAT   :  'BATS NEARBY'\n"); 
0441   068B             ; --- START FUNCTION CALL
0442   068B 26 CC 1D      mov b, _s35 ; " BAT   :  'BATS NEARBY'\n"
0443   068E FD AB         swp b
0444   0690 D8            push b
0445   0691 07 ED 14      call print
0446   0694 51 02 00      add sp, 2
0447   0697             ; --- END FUNCTION CALL
0448   0697             ; print(" PIT   :  'I FEEL A DRAFT'\n"); 
0449   0697             ; --- START FUNCTION CALL
0450   0697 26 E5 1D      mov b, _s36 ; " PIT   :  'I FEEL A DRAFT'\n"
0451   069A FD AB         swp b
0452   069C D8            push b
0453   069D 07 ED 14      call print
0454   06A0 51 02 00      add sp, 2
0455   06A3             ; --- END FUNCTION CALL
0456   06A3             ; print("\n"); 
0457   06A3             ; --- START FUNCTION CALL
0458   06A3 26 19 19      mov b, _s6 ; "\n"
0459   06A6 FD AB         swp b
0460   06A8 D8            push b
0461   06A9 07 ED 14      call print
0462   06AC 51 02 00      add sp, 2
0463   06AF             ; --- END FUNCTION CALL
0464   06AF F9            leave
0465   06B0 09            ret
0466   06B1             
0467   06B1             show_room:
0468   06B1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0469   06B4             ; int room, k; 
0470   06B4 52 02 00      sub sp, 2
0471   06B7 52 02 00      sub sp, 2
0472   06BA             ; print("\n"); 
0473   06BA             ; --- START FUNCTION CALL
0474   06BA 26 19 19      mov b, _s6 ; "\n"
0475   06BD FD AB         swp b
0476   06BF D8            push b
0477   06C0 07 ED 14      call print
0478   06C3 51 02 00      add sp, 2
0479   06C6             ; --- END FUNCTION CALL
0480   06C6             ; for (k = 0; k < 3; k++) { 
0481   06C6             _for4_init:
0482   06C6 FA FD FF      lea d, [bp + -3] ; $k
0483   06C9 DA            push d
0484   06CA FD 2E 00 00   mov32 cb, $00000000
0484   06CE 00 00 
0485   06D0 E7            pop d
0486   06D1 FD 43         mov [d], b
0487   06D3             _for4_cond:
0488   06D3 FA FD FF      lea d, [bp + -3] ; $k
0489   06D6 2A            mov b, [d]
0490   06D7 38 00 00      mov c, 0
0491   06DA             ; --- START RELATIONAL
0492   06DA D7            push a
0493   06DB 11            mov a, b
0494   06DC FD 2E 03 00   mov32 cb, $00000003
0494   06E0 00 00 
0495   06E2 B0            cmp a, b
0496   06E3 FD 73         slt ; < (signed)
0497   06E5 E4            pop a
0498   06E6             ; --- END RELATIONAL
0499   06E6 C0 00 00      cmp b, 0
0500   06E9 C6 2A 08      je _for4_exit
0501   06EC             _for4_block:
0502   06EC             ; room = cave[loc[	    0   ]][k]; 
0503   06EC FA FF FF      lea d, [bp + -1] ; $room
0504   06EF DA            push d
0505   06F0 3B C8 17      mov d, _cave_data ; $cave
0506   06F3 D7            push a
0507   06F4 DA            push d
0508   06F5 3B BA 17      mov d, _loc_data ; $loc
0509   06F8 D7            push a
0510   06F9 DA            push d
0511   06FA FD 2E 00 00   mov32 cb, $00000000
0511   06FE 00 00 
0512   0700 E7            pop d
0513   0701 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0514   0705 E4            pop a
0515   0706 2A            mov b, [d]
0516   0707 38 00 00      mov c, 0
0517   070A E7            pop d
0518   070B FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0519   070F DA            push d
0520   0710 FA FD FF      lea d, [bp + -3] ; $k
0521   0713 2A            mov b, [d]
0522   0714 38 00 00      mov c, 0
0523   0717 E7            pop d
0524   0718 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0525   071C E4            pop a
0526   071D 2A            mov b, [d]
0527   071E 38 00 00      mov c, 0
0528   0721 E7            pop d
0529   0722 FD 43         mov [d], b
0530   0724             ; if (room == loc[	1      ]) { 
0531   0724             _if5_cond:
0532   0724 FA FF FF      lea d, [bp + -1] ; $room
0533   0727 2A            mov b, [d]
0534   0728 38 00 00      mov c, 0
0535   072B             ; --- START RELATIONAL
0536   072B D7            push a
0537   072C 11            mov a, b
0538   072D 3B BA 17      mov d, _loc_data ; $loc
0539   0730 D7            push a
0540   0731 DA            push d
0541   0732 FD 2E 01 00   mov32 cb, $00000001
0541   0736 00 00 
0542   0738 E7            pop d
0543   0739 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0544   073D E4            pop a
0545   073E 2A            mov b, [d]
0546   073F 38 00 00      mov c, 0
0547   0742 B0            cmp a, b
0548   0743 FD 71         seq ; ==
0549   0745 E4            pop a
0550   0746             ; --- END RELATIONAL
0551   0746 C0 00 00      cmp b, 0
0552   0749 C6 5B 07      je _if5_else
0553   074C             _if5_TRUE:
0554   074C             ; print("I SMELL A WUMPUS!\n"); 
0555   074C             ; --- START FUNCTION CALL
0556   074C 26 01 1E      mov b, _s37 ; "I SMELL A WUMPUS!\n"
0557   074F FD AB         swp b
0558   0751 D8            push b
0559   0752 07 ED 14      call print
0560   0755 51 02 00      add sp, 2
0561   0758             ; --- END FUNCTION CALL
0562   0758 0A 17 08      jmp _if5_exit
0563   075B             _if5_else:
0564   075B             ; if (room == loc[	2    ] || room == loc[	3    ]) { 
0565   075B             _if6_cond:
0566   075B FA FF FF      lea d, [bp + -1] ; $room
0567   075E 2A            mov b, [d]
0568   075F 38 00 00      mov c, 0
0569   0762             ; --- START RELATIONAL
0570   0762 D7            push a
0571   0763 11            mov a, b
0572   0764 3B BA 17      mov d, _loc_data ; $loc
0573   0767 D7            push a
0574   0768 DA            push d
0575   0769 FD 2E 02 00   mov32 cb, $00000002
0575   076D 00 00 
0576   076F E7            pop d
0577   0770 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0578   0774 E4            pop a
0579   0775 2A            mov b, [d]
0580   0776 38 00 00      mov c, 0
0581   0779 B0            cmp a, b
0582   077A FD 71         seq ; ==
0583   077C E4            pop a
0584   077D             ; --- END RELATIONAL
0585   077D             ; --- START LOGICAL OR
0586   077D D7            push a
0587   077E 11            mov a, b
0588   077F FA FF FF      lea d, [bp + -1] ; $room
0589   0782 2A            mov b, [d]
0590   0783 38 00 00      mov c, 0
0591   0786             ; --- START RELATIONAL
0592   0786 D7            push a
0593   0787 11            mov a, b
0594   0788 3B BA 17      mov d, _loc_data ; $loc
0595   078B D7            push a
0596   078C DA            push d
0597   078D FD 2E 03 00   mov32 cb, $00000003
0597   0791 00 00 
0598   0793 E7            pop d
0599   0794 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0600   0798 E4            pop a
0601   0799 2A            mov b, [d]
0602   079A 38 00 00      mov c, 0
0603   079D B0            cmp a, b
0604   079E FD 71         seq ; ==
0605   07A0 E4            pop a
0606   07A1             ; --- END RELATIONAL
0607   07A1 FD A8         sor a, b ; ||
0608   07A3 E4            pop a
0609   07A4             ; --- END LOGICAL OR
0610   07A4 C0 00 00      cmp b, 0
0611   07A7 C6 B9 07      je _if6_else
0612   07AA             _if6_TRUE:
0613   07AA             ; print("I FEEL A DRAFT\n"); 
0614   07AA             ; --- START FUNCTION CALL
0615   07AA 26 14 1E      mov b, _s38 ; "I FEEL A DRAFT\n"
0616   07AD FD AB         swp b
0617   07AF D8            push b
0618   07B0 07 ED 14      call print
0619   07B3 51 02 00      add sp, 2
0620   07B6             ; --- END FUNCTION CALL
0621   07B6 0A 17 08      jmp _if6_exit
0622   07B9             _if6_else:
0623   07B9             ; if (room == loc[	4     ] || room == loc[	5     ]) { 
0624   07B9             _if7_cond:
0625   07B9 FA FF FF      lea d, [bp + -1] ; $room
0626   07BC 2A            mov b, [d]
0627   07BD 38 00 00      mov c, 0
0628   07C0             ; --- START RELATIONAL
0629   07C0 D7            push a
0630   07C1 11            mov a, b
0631   07C2 3B BA 17      mov d, _loc_data ; $loc
0632   07C5 D7            push a
0633   07C6 DA            push d
0634   07C7 FD 2E 04 00   mov32 cb, $00000004
0634   07CB 00 00 
0635   07CD E7            pop d
0636   07CE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0637   07D2 E4            pop a
0638   07D3 2A            mov b, [d]
0639   07D4 38 00 00      mov c, 0
0640   07D7 B0            cmp a, b
0641   07D8 FD 71         seq ; ==
0642   07DA E4            pop a
0643   07DB             ; --- END RELATIONAL
0644   07DB             ; --- START LOGICAL OR
0645   07DB D7            push a
0646   07DC 11            mov a, b
0647   07DD FA FF FF      lea d, [bp + -1] ; $room
0648   07E0 2A            mov b, [d]
0649   07E1 38 00 00      mov c, 0
0650   07E4             ; --- START RELATIONAL
0651   07E4 D7            push a
0652   07E5 11            mov a, b
0653   07E6 3B BA 17      mov d, _loc_data ; $loc
0654   07E9 D7            push a
0655   07EA DA            push d
0656   07EB FD 2E 05 00   mov32 cb, $00000005
0656   07EF 00 00 
0657   07F1 E7            pop d
0658   07F2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0659   07F6 E4            pop a
0660   07F7 2A            mov b, [d]
0661   07F8 38 00 00      mov c, 0
0662   07FB B0            cmp a, b
0663   07FC FD 71         seq ; ==
0664   07FE E4            pop a
0665   07FF             ; --- END RELATIONAL
0666   07FF FD A8         sor a, b ; ||
0667   0801 E4            pop a
0668   0802             ; --- END LOGICAL OR
0669   0802 C0 00 00      cmp b, 0
0670   0805 C6 17 08      je _if7_exit
0671   0808             _if7_TRUE:
0672   0808             ; print("BATS NEARBY!\n"); 
0673   0808             ; --- START FUNCTION CALL
0674   0808 26 24 1E      mov b, _s39 ; "BATS NEARBY!\n"
0675   080B FD AB         swp b
0676   080D D8            push b
0677   080E 07 ED 14      call print
0678   0811 51 02 00      add sp, 2
0679   0814             ; --- END FUNCTION CALL
0680   0814 0A 17 08      jmp _if7_exit
0681   0817             _if7_exit:
0682   0817             _if6_exit:
0683   0817             _if5_exit:
0684   0817             _for4_update:
0685   0817 FA FD FF      lea d, [bp + -3] ; $k
0686   081A 2A            mov b, [d]
0687   081B 38 00 00      mov c, 0
0688   081E 11            mov a, b
0689   081F FD 77         inc b
0690   0821 FA FD FF      lea d, [bp + -3] ; $k
0691   0824 FD 43         mov [d], b
0692   0826 27            mov b, a
0693   0827 0A D3 06      jmp _for4_cond
0694   082A             _for4_exit:
0695   082A             ; print("YOU ARE IN ROOM "); print_unsigned(loc[	    0   ]+1); print("\n"); 
0696   082A             ; --- START FUNCTION CALL
0697   082A 26 32 1E      mov b, _s40 ; "YOU ARE IN ROOM "
0698   082D FD AB         swp b
0699   082F D8            push b
0700   0830 07 ED 14      call print
0701   0833 51 02 00      add sp, 2
0702   0836             ; --- END FUNCTION CALL
0703   0836             ; print_unsigned(loc[	    0   ]+1); print("\n"); 
0704   0836             ; --- START FUNCTION CALL
0705   0836 3B BA 17      mov d, _loc_data ; $loc
0706   0839 D7            push a
0707   083A DA            push d
0708   083B FD 2E 00 00   mov32 cb, $00000000
0708   083F 00 00 
0709   0841 E7            pop d
0710   0842 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0711   0846 E4            pop a
0712   0847 2A            mov b, [d]
0713   0848 38 00 00      mov c, 0
0714   084B             ; --- START TERMS
0715   084B D7            push a
0716   084C 11            mov a, b
0717   084D FD 2E 01 00   mov32 cb, $00000001
0717   0851 00 00 
0718   0853 56            add b, a
0719   0854 E4            pop a
0720   0855             ; --- END TERMS
0721   0855 FD AB         swp b
0722   0857 D8            push b
0723   0858 07 86 15      call print_unsigned
0724   085B 51 02 00      add sp, 2
0725   085E             ; --- END FUNCTION CALL
0726   085E             ; print("\n"); 
0727   085E             ; --- START FUNCTION CALL
0728   085E 26 19 19      mov b, _s6 ; "\n"
0729   0861 FD AB         swp b
0730   0863 D8            push b
0731   0864 07 ED 14      call print
0732   0867 51 02 00      add sp, 2
0733   086A             ; --- END FUNCTION CALL
0734   086A             ; print("TUNNELS LEAD TO ");  
0735   086A             ; --- START FUNCTION CALL
0736   086A 26 43 1E      mov b, _s41 ; "TUNNELS LEAD TO "
0737   086D FD AB         swp b
0738   086F D8            push b
0739   0870 07 ED 14      call print
0740   0873 51 02 00      add sp, 2
0741   0876             ; --- END FUNCTION CALL
0742   0876             ; print_unsigned(cave[loc[	    0   ]][0]+1); print(", "); 
0743   0876             ; --- START FUNCTION CALL
0744   0876 3B C8 17      mov d, _cave_data ; $cave
0745   0879 D7            push a
0746   087A DA            push d
0747   087B 3B BA 17      mov d, _loc_data ; $loc
0748   087E D7            push a
0749   087F DA            push d
0750   0880 FD 2E 00 00   mov32 cb, $00000000
0750   0884 00 00 
0751   0886 E7            pop d
0752   0887 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0753   088B E4            pop a
0754   088C 2A            mov b, [d]
0755   088D 38 00 00      mov c, 0
0756   0890 E7            pop d
0757   0891 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0758   0895 DA            push d
0759   0896 FD 2E 00 00   mov32 cb, $00000000
0759   089A 00 00 
0760   089C E7            pop d
0761   089D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0762   08A1 E4            pop a
0763   08A2 2A            mov b, [d]
0764   08A3 38 00 00      mov c, 0
0765   08A6             ; --- START TERMS
0766   08A6 D7            push a
0767   08A7 11            mov a, b
0768   08A8 FD 2E 01 00   mov32 cb, $00000001
0768   08AC 00 00 
0769   08AE 56            add b, a
0770   08AF E4            pop a
0771   08B0             ; --- END TERMS
0772   08B0 FD AB         swp b
0773   08B2 D8            push b
0774   08B3 07 86 15      call print_unsigned
0775   08B6 51 02 00      add sp, 2
0776   08B9             ; --- END FUNCTION CALL
0777   08B9             ; print(", "); 
0778   08B9             ; --- START FUNCTION CALL
0779   08B9 26 54 1E      mov b, _s42 ; ", "
0780   08BC FD AB         swp b
0781   08BE D8            push b
0782   08BF 07 ED 14      call print
0783   08C2 51 02 00      add sp, 2
0784   08C5             ; --- END FUNCTION CALL
0785   08C5             ; print_unsigned(cave[loc[	    0   ]][1]+1); print(", "); 
0786   08C5             ; --- START FUNCTION CALL
0787   08C5 3B C8 17      mov d, _cave_data ; $cave
0788   08C8 D7            push a
0789   08C9 DA            push d
0790   08CA 3B BA 17      mov d, _loc_data ; $loc
0791   08CD D7            push a
0792   08CE DA            push d
0793   08CF FD 2E 00 00   mov32 cb, $00000000
0793   08D3 00 00 
0794   08D5 E7            pop d
0795   08D6 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0796   08DA E4            pop a
0797   08DB 2A            mov b, [d]
0798   08DC 38 00 00      mov c, 0
0799   08DF E7            pop d
0800   08E0 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0801   08E4 DA            push d
0802   08E5 FD 2E 01 00   mov32 cb, $00000001
0802   08E9 00 00 
0803   08EB E7            pop d
0804   08EC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0805   08F0 E4            pop a
0806   08F1 2A            mov b, [d]
0807   08F2 38 00 00      mov c, 0
0808   08F5             ; --- START TERMS
0809   08F5 D7            push a
0810   08F6 11            mov a, b
0811   08F7 FD 2E 01 00   mov32 cb, $00000001
0811   08FB 00 00 
0812   08FD 56            add b, a
0813   08FE E4            pop a
0814   08FF             ; --- END TERMS
0815   08FF FD AB         swp b
0816   0901 D8            push b
0817   0902 07 86 15      call print_unsigned
0818   0905 51 02 00      add sp, 2
0819   0908             ; --- END FUNCTION CALL
0820   0908             ; print(", "); 
0821   0908             ; --- START FUNCTION CALL
0822   0908 26 54 1E      mov b, _s42 ; ", "
0823   090B FD AB         swp b
0824   090D D8            push b
0825   090E 07 ED 14      call print
0826   0911 51 02 00      add sp, 2
0827   0914             ; --- END FUNCTION CALL
0828   0914             ; print_unsigned(cave[loc[	    0   ]][2]+1); 
0829   0914             ; --- START FUNCTION CALL
0830   0914 3B C8 17      mov d, _cave_data ; $cave
0831   0917 D7            push a
0832   0918 DA            push d
0833   0919 3B BA 17      mov d, _loc_data ; $loc
0834   091C D7            push a
0835   091D DA            push d
0836   091E FD 2E 00 00   mov32 cb, $00000000
0836   0922 00 00 
0837   0924 E7            pop d
0838   0925 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0839   0929 E4            pop a
0840   092A 2A            mov b, [d]
0841   092B 38 00 00      mov c, 0
0842   092E E7            pop d
0843   092F FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0844   0933 DA            push d
0845   0934 FD 2E 02 00   mov32 cb, $00000002
0845   0938 00 00 
0846   093A E7            pop d
0847   093B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0848   093F E4            pop a
0849   0940 2A            mov b, [d]
0850   0941 38 00 00      mov c, 0
0851   0944             ; --- START TERMS
0852   0944 D7            push a
0853   0945 11            mov a, b
0854   0946 FD 2E 01 00   mov32 cb, $00000001
0854   094A 00 00 
0855   094C 56            add b, a
0856   094D E4            pop a
0857   094E             ; --- END TERMS
0858   094E FD AB         swp b
0859   0950 D8            push b
0860   0951 07 86 15      call print_unsigned
0861   0954 51 02 00      add sp, 2
0862   0957             ; --- END FUNCTION CALL
0863   0957             ; print("\n\n"); 
0864   0957             ; --- START FUNCTION CALL
0865   0957 26 57 1E      mov b, _s43 ; "\n\n"
0866   095A FD AB         swp b
0867   095C D8            push b
0868   095D 07 ED 14      call print
0869   0960 51 02 00      add sp, 2
0870   0963             ; --- END FUNCTION CALL
0871   0963 F9            leave
0872   0964 09            ret
0873   0965             
0874   0965             move_or_shoot:
0875   0965 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0876   0968             ; int c = -1; 
0877   0968 52 02 00      sub sp, 2
0878   096B             ; --- START LOCAL VAR INITIALIZATION
0879   096B FA FF FF      lea d, [bp + -1] ; $c
0880   096E DA            push d
0881   096F FD 2E FF FF   mov32 cb, $ffffffff
0881   0973 FF FF 
0882   0975 E7            pop d
0883   0976 FD 43         mov [d], b
0884   0978             ; --- END LOCAL VAR INITIALIZATION
0885   0978             ; while ((c != 'S') && (c != 'M')) { 
0886   0978             _while8_cond:
0887   0978 FA FF FF      lea d, [bp + -1] ; $c
0888   097B 2A            mov b, [d]
0889   097C 38 00 00      mov c, 0
0890   097F             ; --- START RELATIONAL
0891   097F D7            push a
0892   0980 11            mov a, b
0893   0981 FD 2E 53 00   mov32 cb, $00000053
0893   0985 00 00 
0894   0987 B0            cmp a, b
0895   0988 FD 72         sneq ; !=
0896   098A E4            pop a
0897   098B             ; --- END RELATIONAL
0898   098B             ; --- START LOGICAL AND
0899   098B D7            push a
0900   098C 11            mov a, b
0901   098D FA FF FF      lea d, [bp + -1] ; $c
0902   0990 2A            mov b, [d]
0903   0991 38 00 00      mov c, 0
0904   0994             ; --- START RELATIONAL
0905   0994 D7            push a
0906   0995 11            mov a, b
0907   0996 FD 2E 4D 00   mov32 cb, $0000004d
0907   099A 00 00 
0908   099C B0            cmp a, b
0909   099D FD 72         sneq ; !=
0910   099F E4            pop a
0911   09A0             ; --- END RELATIONAL
0912   09A0 FD A7         sand a, b
0913   09A2 E4            pop a
0914   09A3             ; --- END LOGICAL AND
0915   09A3 C0 00 00      cmp b, 0
0916   09A6 C6 BF 09      je _while8_exit
0917   09A9             _while8_block:
0918   09A9             ; c = getlet("SHOOT OR MOVE (S-M): "); 
0919   09A9 FA FF FF      lea d, [bp + -1] ; $c
0920   09AC DA            push d
0921   09AD             ; --- START FUNCTION CALL
0922   09AD 26 5A 1E      mov b, _s44 ; "SHOOT OR MOVE (S-M): "
0923   09B0 FD AB         swp b
0924   09B2 D8            push b
0925   09B3 07 93 04      call getlet
0926   09B6 51 02 00      add sp, 2
0927   09B9             ; --- END FUNCTION CALL
0928   09B9 E7            pop d
0929   09BA FD 43         mov [d], b
0930   09BC 0A 78 09      jmp _while8_cond
0931   09BF             _while8_exit:
0932   09BF             ; return (c == 'S') ? 1 : 0; 
0933   09BF             _ternary9_cond:
0934   09BF FA FF FF      lea d, [bp + -1] ; $c
0935   09C2 2A            mov b, [d]
0936   09C3 38 00 00      mov c, 0
0937   09C6             ; --- START RELATIONAL
0938   09C6 D7            push a
0939   09C7 11            mov a, b
0940   09C8 FD 2E 53 00   mov32 cb, $00000053
0940   09CC 00 00 
0941   09CE B0            cmp a, b
0942   09CF FD 71         seq ; ==
0943   09D1 E4            pop a
0944   09D2             ; --- END RELATIONAL
0945   09D2 C0 00 00      cmp b, 0
0946   09D5 C6 E1 09      je _ternary9_FALSE
0947   09D8             _ternary9_TRUE:
0948   09D8 FD 2E 01 00   mov32 cb, $00000001
0948   09DC 00 00 
0949   09DE 0A E7 09      jmp _ternary9_exit
0950   09E1             _ternary9_FALSE:
0951   09E1 FD 2E 00 00   mov32 cb, $00000000
0951   09E5 00 00 
0952   09E7             _ternary9_exit:
0953   09E7 F9            leave
0954   09E8 09            ret
0955   09E9             
0956   09E9             move_wumpus:
0957   09E9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0958   09EC             ; int k; 
0959   09EC 52 02 00      sub sp, 2
0960   09EF             ; k = rand2() % 4; 
0961   09EF FA FF FF      lea d, [bp + -1] ; $k
0962   09F2 DA            push d
0963   09F3             ; --- START FUNCTION CALL
0964   09F3 07 5E 11      call rand2
0965   09F6             ; --- START FACTORS
0966   09F6 D7            push a
0967   09F7 FD D8         push g
0968   09F9 11            mov a, b
0969   09FA FD 7A         mov g, c
0970   09FC FD 2E 04 00   mov32 cb, $00000004
0970   0A00 00 00 
0971   0A02 AE            div a, b ; 
0972   0A03 11            mov a, b
0973   0A04 FD 38         mov c, g
0974   0A06 27            mov b, a
0975   0A07 FD F1         pop g
0976   0A09 E4            pop a
0977   0A0A             ; --- END FACTORS
0978   0A0A E7            pop d
0979   0A0B FD 43         mov [d], b
0980   0A0D             ; if (k < 3) { 
0981   0A0D             _if12_cond:
0982   0A0D FA FF FF      lea d, [bp + -1] ; $k
0983   0A10 2A            mov b, [d]
0984   0A11 38 00 00      mov c, 0
0985   0A14             ; --- START RELATIONAL
0986   0A14 D7            push a
0987   0A15 11            mov a, b
0988   0A16 FD 2E 03 00   mov32 cb, $00000003
0988   0A1A 00 00 
0989   0A1C B0            cmp a, b
0990   0A1D FD 73         slt ; < (signed)
0991   0A1F E4            pop a
0992   0A20             ; --- END RELATIONAL
0993   0A20 C0 00 00      cmp b, 0
0994   0A23 C6 6F 0A      je _if12_exit
0995   0A26             _if12_TRUE:
0996   0A26             ; loc[	1      ] = cave[loc[	1      ]][k]; 
0997   0A26 3B BA 17      mov d, _loc_data ; $loc
0998   0A29 D7            push a
0999   0A2A DA            push d
1000   0A2B FD 2E 01 00   mov32 cb, $00000001
1000   0A2F 00 00 
1001   0A31 E7            pop d
1002   0A32 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1003   0A36 E4            pop a
1004   0A37 DA            push d
1005   0A38 3B C8 17      mov d, _cave_data ; $cave
1006   0A3B D7            push a
1007   0A3C DA            push d
1008   0A3D 3B BA 17      mov d, _loc_data ; $loc
1009   0A40 D7            push a
1010   0A41 DA            push d
1011   0A42 FD 2E 01 00   mov32 cb, $00000001
1011   0A46 00 00 
1012   0A48 E7            pop d
1013   0A49 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1014   0A4D E4            pop a
1015   0A4E 2A            mov b, [d]
1016   0A4F 38 00 00      mov c, 0
1017   0A52 E7            pop d
1018   0A53 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
1019   0A57 DA            push d
1020   0A58 FA FF FF      lea d, [bp + -1] ; $k
1021   0A5B 2A            mov b, [d]
1022   0A5C 38 00 00      mov c, 0
1023   0A5F E7            pop d
1024   0A60 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1025   0A64 E4            pop a
1026   0A65 2A            mov b, [d]
1027   0A66 38 00 00      mov c, 0
1028   0A69 E7            pop d
1029   0A6A FD 43         mov [d], b
1030   0A6C 0A 6F 0A      jmp _if12_exit
1031   0A6F             _if12_exit:
1032   0A6F             ; if (loc[	1      ] == loc[	    0   ]) { 
1033   0A6F             _if13_cond:
1034   0A6F 3B BA 17      mov d, _loc_data ; $loc
1035   0A72 D7            push a
1036   0A73 DA            push d
1037   0A74 FD 2E 01 00   mov32 cb, $00000001
1037   0A78 00 00 
1038   0A7A E7            pop d
1039   0A7B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1040   0A7F E4            pop a
1041   0A80 2A            mov b, [d]
1042   0A81 38 00 00      mov c, 0
1043   0A84             ; --- START RELATIONAL
1044   0A84 D7            push a
1045   0A85 11            mov a, b
1046   0A86 3B BA 17      mov d, _loc_data ; $loc
1047   0A89 D7            push a
1048   0A8A DA            push d
1049   0A8B FD 2E 00 00   mov32 cb, $00000000
1049   0A8F 00 00 
1050   0A91 E7            pop d
1051   0A92 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1052   0A96 E4            pop a
1053   0A97 2A            mov b, [d]
1054   0A98 38 00 00      mov c, 0
1055   0A9B B0            cmp a, b
1056   0A9C FD 71         seq ; ==
1057   0A9E E4            pop a
1058   0A9F             ; --- END RELATIONAL
1059   0A9F C0 00 00      cmp b, 0
1060   0AA2 C6 C1 0A      je _if13_exit
1061   0AA5             _if13_TRUE:
1062   0AA5             ; print("TSK TSK TSK - WUMPUS GOT YOU!\n"); 
1063   0AA5             ; --- START FUNCTION CALL
1064   0AA5 26 70 1E      mov b, _s45 ; "TSK TSK TSK - WUMPUS GOT YOU!\n"
1065   0AA8 FD AB         swp b
1066   0AAA D8            push b
1067   0AAB 07 ED 14      call print
1068   0AAE 51 02 00      add sp, 2
1069   0AB1             ; --- END FUNCTION CALL
1070   0AB1             ; finished = 	2    ; 
1071   0AB1 3B C6 17      mov d, _finished ; $finished
1072   0AB4 DA            push d
1073   0AB5 FD 2E 02 00   mov32 cb, $00000002
1073   0AB9 00 00 
1074   0ABB E7            pop d
1075   0ABC FD 43         mov [d], b
1076   0ABE 0A C1 0A      jmp _if13_exit
1077   0AC1             _if13_exit:
1078   0AC1 F9            leave
1079   0AC2 09            ret
1080   0AC3             
1081   0AC3             shoot:
1082   0AC3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1083   0AC6             ; int path[5]; 
1084   0AC6 52 0A 00      sub sp, 10
1085   0AC9             ; int scratchloc = -1; 
1086   0AC9 52 02 00      sub sp, 2
1087   0ACC             ; --- START LOCAL VAR INITIALIZATION
1088   0ACC FA F5 FF      lea d, [bp + -11] ; $scratchloc
1089   0ACF DA            push d
1090   0AD0 FD 2E FF FF   mov32 cb, $ffffffff
1090   0AD4 FF FF 
1091   0AD6 E7            pop d
1092   0AD7 FD 43         mov [d], b
1093   0AD9             ; --- END LOCAL VAR INITIALIZATION
1094   0AD9             ; int len, k; 
1095   0AD9 52 02 00      sub sp, 2
1096   0ADC 52 02 00      sub sp, 2
1097   0ADF             ; finished = 	     0   ; 
1098   0ADF 3B C6 17      mov d, _finished ; $finished
1099   0AE2 DA            push d
1100   0AE3 FD 2E 00 00   mov32 cb, $00000000
1100   0AE7 00 00 
1101   0AE9 E7            pop d
1102   0AEA FD 43         mov [d], b
1103   0AEC             ; len = -1; 
1104   0AEC FA F3 FF      lea d, [bp + -13] ; $len
1105   0AEF DA            push d
1106   0AF0 FD 2E FF FF   mov32 cb, $ffffffff
1106   0AF4 FF FF 
1107   0AF6 E7            pop d
1108   0AF7 FD 43         mov [d], b
1109   0AF9             ; while (len < 1 || len > 5) { 
1110   0AF9             _while14_cond:
1111   0AF9 FA F3 FF      lea d, [bp + -13] ; $len
1112   0AFC 2A            mov b, [d]
1113   0AFD 38 00 00      mov c, 0
1114   0B00             ; --- START RELATIONAL
1115   0B00 D7            push a
1116   0B01 11            mov a, b
1117   0B02 FD 2E 01 00   mov32 cb, $00000001
1117   0B06 00 00 
1118   0B08 B0            cmp a, b
1119   0B09 FD 73         slt ; < (signed)
1120   0B0B E4            pop a
1121   0B0C             ; --- END RELATIONAL
1122   0B0C             ; --- START LOGICAL OR
1123   0B0C D7            push a
1124   0B0D 11            mov a, b
1125   0B0E FA F3 FF      lea d, [bp + -13] ; $len
1126   0B11 2A            mov b, [d]
1127   0B12 38 00 00      mov c, 0
1128   0B15             ; --- START RELATIONAL
1129   0B15 D7            push a
1130   0B16 11            mov a, b
1131   0B17 FD 2E 05 00   mov32 cb, $00000005
1131   0B1B 00 00 
1132   0B1D B0            cmp a, b
1133   0B1E FD 7F         sgt ; >
1134   0B20 E4            pop a
1135   0B21             ; --- END RELATIONAL
1136   0B21 FD A8         sor a, b ; ||
1137   0B23 E4            pop a
1138   0B24             ; --- END LOGICAL OR
1139   0B24 C0 00 00      cmp b, 0
1140   0B27 C6 40 0B      je _while14_exit
1141   0B2A             _while14_block:
1142   0B2A             ; len = getnum("\nNUMBER OF ROOMS (1-5): "); 
1143   0B2A FA F3 FF      lea d, [bp + -13] ; $len
1144   0B2D DA            push d
1145   0B2E             ; --- START FUNCTION CALL
1146   0B2E 26 8F 1E      mov b, _s46 ; "\nNUMBER OF ROOMS (1-5): "
1147   0B31 FD AB         swp b
1148   0B33 D8            push b
1149   0B34 07 6A 04      call getnum
1150   0B37 51 02 00      add sp, 2
1151   0B3A             ; --- END FUNCTION CALL
1152   0B3A E7            pop d
1153   0B3B FD 43         mov [d], b
1154   0B3D 0A F9 0A      jmp _while14_cond
1155   0B40             _while14_exit:
1156   0B40             ; k = 0; 
1157   0B40 FA F1 FF      lea d, [bp + -15] ; $k
1158   0B43 DA            push d
1159   0B44 FD 2E 00 00   mov32 cb, $00000000
1159   0B48 00 00 
1160   0B4A E7            pop d
1161   0B4B FD 43         mov [d], b
1162   0B4D             ; while (k < len) { 
1163   0B4D             _while15_cond:
1164   0B4D FA F1 FF      lea d, [bp + -15] ; $k
1165   0B50 2A            mov b, [d]
1166   0B51 38 00 00      mov c, 0
1167   0B54             ; --- START RELATIONAL
1168   0B54 D7            push a
1169   0B55 11            mov a, b
1170   0B56 FA F3 FF      lea d, [bp + -13] ; $len
1171   0B59 2A            mov b, [d]
1172   0B5A 38 00 00      mov c, 0
1173   0B5D B0            cmp a, b
1174   0B5E FD 73         slt ; < (signed)
1175   0B60 E4            pop a
1176   0B61             ; --- END RELATIONAL
1177   0B61 C0 00 00      cmp b, 0
1178   0B64 C6 14 0C      je _while15_exit
1179   0B67             _while15_block:
1180   0B67             ; path[k] = getnum("ROOM #") - 1; 
1181   0B67 FA F7 FF      lea d, [bp + -9] ; $path
1182   0B6A D7            push a
1183   0B6B DA            push d
1184   0B6C FA F1 FF      lea d, [bp + -15] ; $k
1185   0B6F 2A            mov b, [d]
1186   0B70 38 00 00      mov c, 0
1187   0B73 E7            pop d
1188   0B74 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1189   0B78 E4            pop a
1190   0B79 DA            push d
1191   0B7A             ; --- START FUNCTION CALL
1192   0B7A 26 A8 1E      mov b, _s47 ; "ROOM #"
1193   0B7D FD AB         swp b
1194   0B7F D8            push b
1195   0B80 07 6A 04      call getnum
1196   0B83 51 02 00      add sp, 2
1197   0B86             ; --- END FUNCTION CALL
1198   0B86             ; --- START TERMS
1199   0B86 D7            push a
1200   0B87 11            mov a, b
1201   0B88 FD 2E 01 00   mov32 cb, $00000001
1201   0B8C 00 00 
1202   0B8E 60            sub a, b
1203   0B8F 27            mov b, a
1204   0B90 E4            pop a
1205   0B91             ; --- END TERMS
1206   0B91 E7            pop d
1207   0B92 FD 43         mov [d], b
1208   0B94             ; if ((k>1) && (path[k] == path[k - 2])) { 
1209   0B94             _if16_cond:
1210   0B94 FA F1 FF      lea d, [bp + -15] ; $k
1211   0B97 2A            mov b, [d]
1212   0B98 38 00 00      mov c, 0
1213   0B9B             ; --- START RELATIONAL
1214   0B9B D7            push a
1215   0B9C 11            mov a, b
1216   0B9D FD 2E 01 00   mov32 cb, $00000001
1216   0BA1 00 00 
1217   0BA3 B0            cmp a, b
1218   0BA4 FD 7F         sgt ; >
1219   0BA6 E4            pop a
1220   0BA7             ; --- END RELATIONAL
1221   0BA7             ; --- START LOGICAL AND
1222   0BA7 D7            push a
1223   0BA8 11            mov a, b
1224   0BA9 FA F7 FF      lea d, [bp + -9] ; $path
1225   0BAC D7            push a
1226   0BAD DA            push d
1227   0BAE FA F1 FF      lea d, [bp + -15] ; $k
1228   0BB1 2A            mov b, [d]
1229   0BB2 38 00 00      mov c, 0
1230   0BB5 E7            pop d
1231   0BB6 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1232   0BBA E4            pop a
1233   0BBB 2A            mov b, [d]
1234   0BBC 38 00 00      mov c, 0
1235   0BBF             ; --- START RELATIONAL
1236   0BBF D7            push a
1237   0BC0 11            mov a, b
1238   0BC1 FA F7 FF      lea d, [bp + -9] ; $path
1239   0BC4 D7            push a
1240   0BC5 DA            push d
1241   0BC6 FA F1 FF      lea d, [bp + -15] ; $k
1242   0BC9 2A            mov b, [d]
1243   0BCA 38 00 00      mov c, 0
1244   0BCD             ; --- START TERMS
1245   0BCD D7            push a
1246   0BCE 11            mov a, b
1247   0BCF FD 2E 02 00   mov32 cb, $00000002
1247   0BD3 00 00 
1248   0BD5 60            sub a, b
1249   0BD6 27            mov b, a
1250   0BD7 E4            pop a
1251   0BD8             ; --- END TERMS
1252   0BD8 E7            pop d
1253   0BD9 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1254   0BDD E4            pop a
1255   0BDE 2A            mov b, [d]
1256   0BDF 38 00 00      mov c, 0
1257   0BE2 B0            cmp a, b
1258   0BE3 FD 71         seq ; ==
1259   0BE5 E4            pop a
1260   0BE6             ; --- END RELATIONAL
1261   0BE6 FD A7         sand a, b
1262   0BE8 E4            pop a
1263   0BE9             ; --- END LOGICAL AND
1264   0BE9 C0 00 00      cmp b, 0
1265   0BEC C6 01 0C      je _if16_exit
1266   0BEF             _if16_TRUE:
1267   0BEF             ; print("ARROWS AREN'T THAT CROOKED - TRY ANOTHER ROOM\n"); 
1268   0BEF             ; --- START FUNCTION CALL
1269   0BEF 26 AF 1E      mov b, _s48 ; "ARROWS AREN'T THAT CROOKED - TRY ANOTHER ROOM\n"
1270   0BF2 FD AB         swp b
1271   0BF4 D8            push b
1272   0BF5 07 ED 14      call print
1273   0BF8 51 02 00      add sp, 2
1274   0BFB             ; --- END FUNCTION CALL
1275   0BFB             ; continue;  
1276   0BFB 0A 4D 0B      jmp _while15_cond ; while continue
1277   0BFE 0A 01 0C      jmp _if16_exit
1278   0C01             _if16_exit:
1279   0C01             ; k++; 
1280   0C01 FA F1 FF      lea d, [bp + -15] ; $k
1281   0C04 2A            mov b, [d]
1282   0C05 38 00 00      mov c, 0
1283   0C08 11            mov a, b
1284   0C09 FD 77         inc b
1285   0C0B FA F1 FF      lea d, [bp + -15] ; $k
1286   0C0E FD 43         mov [d], b
1287   0C10 27            mov b, a
1288   0C11 0A 4D 0B      jmp _while15_cond
1289   0C14             _while15_exit:
1290   0C14             ; scratchloc = loc[	    0   ]; 
1291   0C14 FA F5 FF      lea d, [bp + -11] ; $scratchloc
1292   0C17 DA            push d
1293   0C18 3B BA 17      mov d, _loc_data ; $loc
1294   0C1B D7            push a
1295   0C1C DA            push d
1296   0C1D FD 2E 00 00   mov32 cb, $00000000
1296   0C21 00 00 
1297   0C23 E7            pop d
1298   0C24 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1299   0C28 E4            pop a
1300   0C29 2A            mov b, [d]
1301   0C2A 38 00 00      mov c, 0
1302   0C2D E7            pop d
1303   0C2E FD 43         mov [d], b
1304   0C30             ; for (k = 0; k < len; k++) { 
1305   0C30             _for17_init:
1306   0C30 FA F1 FF      lea d, [bp + -15] ; $k
1307   0C33 DA            push d
1308   0C34 FD 2E 00 00   mov32 cb, $00000000
1308   0C38 00 00 
1309   0C3A E7            pop d
1310   0C3B FD 43         mov [d], b
1311   0C3D             _for17_cond:
1312   0C3D FA F1 FF      lea d, [bp + -15] ; $k
1313   0C40 2A            mov b, [d]
1314   0C41 38 00 00      mov c, 0
1315   0C44             ; --- START RELATIONAL
1316   0C44 D7            push a
1317   0C45 11            mov a, b
1318   0C46 FA F3 FF      lea d, [bp + -13] ; $len
1319   0C49 2A            mov b, [d]
1320   0C4A 38 00 00      mov c, 0
1321   0C4D B0            cmp a, b
1322   0C4E FD 73         slt ; < (signed)
1323   0C50 E4            pop a
1324   0C51             ; --- END RELATIONAL
1325   0C51 C0 00 00      cmp b, 0
1326   0C54 C6 32 0E      je _for17_exit
1327   0C57             _for17_block:
1328   0C57             ; if ((cave[scratchloc][0] == path[k]) || 
1329   0C57             _if18_cond:
1330   0C57 3B C8 17      mov d, _cave_data ; $cave
1331   0C5A D7            push a
1332   0C5B DA            push d
1333   0C5C FA F5 FF      lea d, [bp + -11] ; $scratchloc
1334   0C5F 2A            mov b, [d]
1335   0C60 38 00 00      mov c, 0
1336   0C63 E7            pop d
1337   0C64 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
1338   0C68 DA            push d
1339   0C69 FD 2E 00 00   mov32 cb, $00000000
1339   0C6D 00 00 
1340   0C6F E7            pop d
1341   0C70 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1342   0C74 E4            pop a
1343   0C75 2A            mov b, [d]
1344   0C76 38 00 00      mov c, 0
1345   0C79             ; --- START RELATIONAL
1346   0C79 D7            push a
1347   0C7A 11            mov a, b
1348   0C7B FA F7 FF      lea d, [bp + -9] ; $path
1349   0C7E D7            push a
1350   0C7F DA            push d
1351   0C80 FA F1 FF      lea d, [bp + -15] ; $k
1352   0C83 2A            mov b, [d]
1353   0C84 38 00 00      mov c, 0
1354   0C87 E7            pop d
1355   0C88 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1356   0C8C E4            pop a
1357   0C8D 2A            mov b, [d]
1358   0C8E 38 00 00      mov c, 0
1359   0C91 B0            cmp a, b
1360   0C92 FD 71         seq ; ==
1361   0C94 E4            pop a
1362   0C95             ; --- END RELATIONAL
1363   0C95             ; --- START LOGICAL OR
1364   0C95 D7            push a
1365   0C96 11            mov a, b
1366   0C97 3B C8 17      mov d, _cave_data ; $cave
1367   0C9A D7            push a
1368   0C9B DA            push d
1369   0C9C FA F5 FF      lea d, [bp + -11] ; $scratchloc
1370   0C9F 2A            mov b, [d]
1371   0CA0 38 00 00      mov c, 0
1372   0CA3 E7            pop d
1373   0CA4 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
1374   0CA8 DA            push d
1375   0CA9 FD 2E 01 00   mov32 cb, $00000001
1375   0CAD 00 00 
1376   0CAF E7            pop d
1377   0CB0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1378   0CB4 E4            pop a
1379   0CB5 2A            mov b, [d]
1380   0CB6 38 00 00      mov c, 0
1381   0CB9             ; --- START RELATIONAL
1382   0CB9 D7            push a
1383   0CBA 11            mov a, b
1384   0CBB FA F7 FF      lea d, [bp + -9] ; $path
1385   0CBE D7            push a
1386   0CBF DA            push d
1387   0CC0 FA F1 FF      lea d, [bp + -15] ; $k
1388   0CC3 2A            mov b, [d]
1389   0CC4 38 00 00      mov c, 0
1390   0CC7 E7            pop d
1391   0CC8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1392   0CCC E4            pop a
1393   0CCD 2A            mov b, [d]
1394   0CCE 38 00 00      mov c, 0
1395   0CD1 B0            cmp a, b
1396   0CD2 FD 71         seq ; ==
1397   0CD4 E4            pop a
1398   0CD5             ; --- END RELATIONAL
1399   0CD5 FD A8         sor a, b ; ||
1400   0CD7 11            mov a, b
1401   0CD8 3B C8 17      mov d, _cave_data ; $cave
1402   0CDB D7            push a
1403   0CDC DA            push d
1404   0CDD FA F5 FF      lea d, [bp + -11] ; $scratchloc
1405   0CE0 2A            mov b, [d]
1406   0CE1 38 00 00      mov c, 0
1407   0CE4 E7            pop d
1408   0CE5 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
1409   0CE9 DA            push d
1410   0CEA FD 2E 02 00   mov32 cb, $00000002
1410   0CEE 00 00 
1411   0CF0 E7            pop d
1412   0CF1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1413   0CF5 E4            pop a
1414   0CF6 2A            mov b, [d]
1415   0CF7 38 00 00      mov c, 0
1416   0CFA             ; --- START RELATIONAL
1417   0CFA D7            push a
1418   0CFB 11            mov a, b
1419   0CFC FA F7 FF      lea d, [bp + -9] ; $path
1420   0CFF D7            push a
1421   0D00 DA            push d
1422   0D01 FA F1 FF      lea d, [bp + -15] ; $k
1423   0D04 2A            mov b, [d]
1424   0D05 38 00 00      mov c, 0
1425   0D08 E7            pop d
1426   0D09 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1427   0D0D E4            pop a
1428   0D0E 2A            mov b, [d]
1429   0D0F 38 00 00      mov c, 0
1430   0D12 B0            cmp a, b
1431   0D13 FD 71         seq ; ==
1432   0D15 E4            pop a
1433   0D16             ; --- END RELATIONAL
1434   0D16 FD A8         sor a, b ; ||
1435   0D18 E4            pop a
1436   0D19             ; --- END LOGICAL OR
1437   0D19 C0 00 00      cmp b, 0
1438   0D1C C6 3F 0D      je _if18_else
1439   0D1F             _if18_TRUE:
1440   0D1F             ; scratchloc = path[k]; 
1441   0D1F FA F5 FF      lea d, [bp + -11] ; $scratchloc
1442   0D22 DA            push d
1443   0D23 FA F7 FF      lea d, [bp + -9] ; $path
1444   0D26 D7            push a
1445   0D27 DA            push d
1446   0D28 FA F1 FF      lea d, [bp + -15] ; $k
1447   0D2B 2A            mov b, [d]
1448   0D2C 38 00 00      mov c, 0
1449   0D2F E7            pop d
1450   0D30 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1451   0D34 E4            pop a
1452   0D35 2A            mov b, [d]
1453   0D36 38 00 00      mov c, 0
1454   0D39 E7            pop d
1455   0D3A FD 43         mov [d], b
1456   0D3C 0A 79 0D      jmp _if18_exit
1457   0D3F             _if18_else:
1458   0D3F             ; scratchloc = cave[scratchloc][rand2()%3]; 
1459   0D3F FA F5 FF      lea d, [bp + -11] ; $scratchloc
1460   0D42 DA            push d
1461   0D43 3B C8 17      mov d, _cave_data ; $cave
1462   0D46 D7            push a
1463   0D47 DA            push d
1464   0D48 FA F5 FF      lea d, [bp + -11] ; $scratchloc
1465   0D4B 2A            mov b, [d]
1466   0D4C 38 00 00      mov c, 0
1467   0D4F E7            pop d
1468   0D50 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
1469   0D54 DA            push d
1470   0D55             ; --- START FUNCTION CALL
1471   0D55 07 5E 11      call rand2
1472   0D58             ; --- START FACTORS
1473   0D58 D7            push a
1474   0D59 FD D8         push g
1475   0D5B 11            mov a, b
1476   0D5C FD 7A         mov g, c
1477   0D5E FD 2E 03 00   mov32 cb, $00000003
1477   0D62 00 00 
1478   0D64 AE            div a, b ; 
1479   0D65 11            mov a, b
1480   0D66 FD 38         mov c, g
1481   0D68 27            mov b, a
1482   0D69 FD F1         pop g
1483   0D6B E4            pop a
1484   0D6C             ; --- END FACTORS
1485   0D6C E7            pop d
1486   0D6D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1487   0D71 E4            pop a
1488   0D72 2A            mov b, [d]
1489   0D73 38 00 00      mov c, 0
1490   0D76 E7            pop d
1491   0D77 FD 43         mov [d], b
1492   0D79             _if18_exit:
1493   0D79             ; if (scratchloc == loc[	1      ]) { 
1494   0D79             _if23_cond:
1495   0D79 FA F5 FF      lea d, [bp + -11] ; $scratchloc
1496   0D7C 2A            mov b, [d]
1497   0D7D 38 00 00      mov c, 0
1498   0D80             ; --- START RELATIONAL
1499   0D80 D7            push a
1500   0D81 11            mov a, b
1501   0D82 3B BA 17      mov d, _loc_data ; $loc
1502   0D85 D7            push a
1503   0D86 DA            push d
1504   0D87 FD 2E 01 00   mov32 cb, $00000001
1504   0D8B 00 00 
1505   0D8D E7            pop d
1506   0D8E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1507   0D92 E4            pop a
1508   0D93 2A            mov b, [d]
1509   0D94 38 00 00      mov c, 0
1510   0D97 B0            cmp a, b
1511   0D98 FD 71         seq ; ==
1512   0D9A E4            pop a
1513   0D9B             ; --- END RELATIONAL
1514   0D9B C0 00 00      cmp b, 0
1515   0D9E C6 BD 0D      je _if23_else
1516   0DA1             _if23_TRUE:
1517   0DA1             ; print("AHA! YOU GOT THE WUMPUS!\n"); 
1518   0DA1             ; --- START FUNCTION CALL
1519   0DA1 26 DD 1E      mov b, _s49 ; "AHA! YOU GOT THE WUMPUS!\n"
1520   0DA4 FD AB         swp b
1521   0DA6 D8            push b
1522   0DA7 07 ED 14      call print
1523   0DAA 51 02 00      add sp, 2
1524   0DAD             ; --- END FUNCTION CALL
1525   0DAD             ; finished = 	     1   ; 
1526   0DAD 3B C6 17      mov d, _finished ; $finished
1527   0DB0 DA            push d
1528   0DB1 FD 2E 01 00   mov32 cb, $00000001
1528   0DB5 00 00 
1529   0DB7 E7            pop d
1530   0DB8 FD 43         mov [d], b
1531   0DBA 0A 01 0E      jmp _if23_exit
1532   0DBD             _if23_else:
1533   0DBD             ; if (scratchloc == loc[	    0   ]) { 
1534   0DBD             _if24_cond:
1535   0DBD FA F5 FF      lea d, [bp + -11] ; $scratchloc
1536   0DC0 2A            mov b, [d]
1537   0DC1 38 00 00      mov c, 0
1538   0DC4             ; --- START RELATIONAL
1539   0DC4 D7            push a
1540   0DC5 11            mov a, b
1541   0DC6 3B BA 17      mov d, _loc_data ; $loc
1542   0DC9 D7            push a
1543   0DCA DA            push d
1544   0DCB FD 2E 00 00   mov32 cb, $00000000
1544   0DCF 00 00 
1545   0DD1 E7            pop d
1546   0DD2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1547   0DD6 E4            pop a
1548   0DD7 2A            mov b, [d]
1549   0DD8 38 00 00      mov c, 0
1550   0DDB B0            cmp a, b
1551   0DDC FD 71         seq ; ==
1552   0DDE E4            pop a
1553   0DDF             ; --- END RELATIONAL
1554   0DDF C0 00 00      cmp b, 0
1555   0DE2 C6 01 0E      je _if24_exit
1556   0DE5             _if24_TRUE:
1557   0DE5             ; print("OUCH! ARROW GOT YOU!\n"); 
1558   0DE5             ; --- START FUNCTION CALL
1559   0DE5 26 F7 1E      mov b, _s50 ; "OUCH! ARROW GOT YOU!\n"
1560   0DE8 FD AB         swp b
1561   0DEA D8            push b
1562   0DEB 07 ED 14      call print
1563   0DEE 51 02 00      add sp, 2
1564   0DF1             ; --- END FUNCTION CALL
1565   0DF1             ; finished = 	2    ; 
1566   0DF1 3B C6 17      mov d, _finished ; $finished
1567   0DF4 DA            push d
1568   0DF5 FD 2E 02 00   mov32 cb, $00000002
1568   0DF9 00 00 
1569   0DFB E7            pop d
1570   0DFC FD 43         mov [d], b
1571   0DFE 0A 01 0E      jmp _if24_exit
1572   0E01             _if24_exit:
1573   0E01             _if23_exit:
1574   0E01             ; if (finished != 	     0   ) { 
1575   0E01             _if25_cond:
1576   0E01 3B C6 17      mov d, _finished ; $finished
1577   0E04 2A            mov b, [d]
1578   0E05 38 00 00      mov c, 0
1579   0E08             ; --- START RELATIONAL
1580   0E08 D7            push a
1581   0E09 11            mov a, b
1582   0E0A FD 2E 00 00   mov32 cb, $00000000
1582   0E0E 00 00 
1583   0E10 B0            cmp a, b
1584   0E11 FD 72         sneq ; !=
1585   0E13 E4            pop a
1586   0E14             ; --- END RELATIONAL
1587   0E14 C0 00 00      cmp b, 0
1588   0E17 C6 1F 0E      je _if25_exit
1589   0E1A             _if25_TRUE:
1590   0E1A             ; return; 
1591   0E1A F9            leave
1592   0E1B 09            ret
1593   0E1C 0A 1F 0E      jmp _if25_exit
1594   0E1F             _if25_exit:
1595   0E1F             _for17_update:
1596   0E1F FA F1 FF      lea d, [bp + -15] ; $k
1597   0E22 2A            mov b, [d]
1598   0E23 38 00 00      mov c, 0
1599   0E26 11            mov a, b
1600   0E27 FD 77         inc b
1601   0E29 FA F1 FF      lea d, [bp + -15] ; $k
1602   0E2C FD 43         mov [d], b
1603   0E2E 27            mov b, a
1604   0E2F 0A 3D 0C      jmp _for17_cond
1605   0E32             _for17_exit:
1606   0E32             ; print("MISSED\n"); 
1607   0E32             ; --- START FUNCTION CALL
1608   0E32 26 0D 1F      mov b, _s51 ; "MISSED\n"
1609   0E35 FD AB         swp b
1610   0E37 D8            push b
1611   0E38 07 ED 14      call print
1612   0E3B 51 02 00      add sp, 2
1613   0E3E             ; --- END FUNCTION CALL
1614   0E3E             ; move_wumpus(); 
1615   0E3E             ; --- START FUNCTION CALL
1616   0E3E 07 E9 09      call move_wumpus
1617   0E41             ; if (--arrows <= 0) { 
1618   0E41             _if26_cond:
1619   0E41 3B B2 17      mov d, _arrows ; $arrows
1620   0E44 2A            mov b, [d]
1621   0E45 FD 7D         dec b
1622   0E47 3B B2 17      mov d, _arrows ; $arrows
1623   0E4A FD 43         mov [d], b
1624   0E4C             ; --- START RELATIONAL
1625   0E4C D7            push a
1626   0E4D 11            mov a, b
1627   0E4E FD 2E 00 00   mov32 cb, $00000000
1627   0E52 00 00 
1628   0E54 B0            cmp a, b
1629   0E55 FD 74         sle ; <= (signed)
1630   0E57 E4            pop a
1631   0E58             ; --- END RELATIONAL
1632   0E58 C0 00 00      cmp b, 0
1633   0E5B C6 6E 0E      je _if26_exit
1634   0E5E             _if26_TRUE:
1635   0E5E             ; finished = 	2    ; 
1636   0E5E 3B C6 17      mov d, _finished ; $finished
1637   0E61 DA            push d
1638   0E62 FD 2E 02 00   mov32 cb, $00000002
1638   0E66 00 00 
1639   0E68 E7            pop d
1640   0E69 FD 43         mov [d], b
1641   0E6B 0A 6E 0E      jmp _if26_exit
1642   0E6E             _if26_exit:
1643   0E6E F9            leave
1644   0E6F 09            ret
1645   0E70             
1646   0E70             move:
1647   0E70 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1648   0E73             ; int scratchloc; 
1649   0E73 52 02 00      sub sp, 2
1650   0E76             ; scratchloc = -1; 
1651   0E76 FA FF FF      lea d, [bp + -1] ; $scratchloc
1652   0E79 DA            push d
1653   0E7A FD 2E FF FF   mov32 cb, $ffffffff
1653   0E7E FF FF 
1654   0E80 E7            pop d
1655   0E81 FD 43         mov [d], b
1656   0E83             ; while (scratchloc == -1) { 
1657   0E83             _while27_cond:
1658   0E83 FA FF FF      lea d, [bp + -1] ; $scratchloc
1659   0E86 2A            mov b, [d]
1660   0E87 38 00 00      mov c, 0
1661   0E8A             ; --- START RELATIONAL
1662   0E8A D7            push a
1663   0E8B 11            mov a, b
1664   0E8C FD 2E FF FF   mov32 cb, $ffffffff
1664   0E90 FF FF 
1665   0E92 B0            cmp a, b
1666   0E93 FD 71         seq ; ==
1667   0E95 E4            pop a
1668   0E96             ; --- END RELATIONAL
1669   0E96 C0 00 00      cmp b, 0
1670   0E99 C6 0A 10      je _while27_exit
1671   0E9C             _while27_block:
1672   0E9C             ; scratchloc = getnum("\nWHERE TO: ")- 1; 
1673   0E9C FA FF FF      lea d, [bp + -1] ; $scratchloc
1674   0E9F DA            push d
1675   0EA0             ; --- START FUNCTION CALL
1676   0EA0 26 15 1F      mov b, _s52 ; "\nWHERE TO: "
1677   0EA3 FD AB         swp b
1678   0EA5 D8            push b
1679   0EA6 07 6A 04      call getnum
1680   0EA9 51 02 00      add sp, 2
1681   0EAC             ; --- END FUNCTION CALL
1682   0EAC             ; --- START TERMS
1683   0EAC D7            push a
1684   0EAD 11            mov a, b
1685   0EAE FD 2E 01 00   mov32 cb, $00000001
1685   0EB2 00 00 
1686   0EB4 60            sub a, b
1687   0EB5 27            mov b, a
1688   0EB6 E4            pop a
1689   0EB7             ; --- END TERMS
1690   0EB7 E7            pop d
1691   0EB8 FD 43         mov [d], b
1692   0EBA             ; if (scratchloc < 0 || scratchloc > 19) { 
1693   0EBA             _if28_cond:
1694   0EBA FA FF FF      lea d, [bp + -1] ; $scratchloc
1695   0EBD 2A            mov b, [d]
1696   0EBE 38 00 00      mov c, 0
1697   0EC1             ; --- START RELATIONAL
1698   0EC1 D7            push a
1699   0EC2 11            mov a, b
1700   0EC3 FD 2E 00 00   mov32 cb, $00000000
1700   0EC7 00 00 
1701   0EC9 B0            cmp a, b
1702   0ECA FD 73         slt ; < (signed)
1703   0ECC E4            pop a
1704   0ECD             ; --- END RELATIONAL
1705   0ECD             ; --- START LOGICAL OR
1706   0ECD D7            push a
1707   0ECE 11            mov a, b
1708   0ECF FA FF FF      lea d, [bp + -1] ; $scratchloc
1709   0ED2 2A            mov b, [d]
1710   0ED3 38 00 00      mov c, 0
1711   0ED6             ; --- START RELATIONAL
1712   0ED6 D7            push a
1713   0ED7 11            mov a, b
1714   0ED8 FD 2E 13 00   mov32 cb, $00000013
1714   0EDC 00 00 
1715   0EDE B0            cmp a, b
1716   0EDF FD 7F         sgt ; >
1717   0EE1 E4            pop a
1718   0EE2             ; --- END RELATIONAL
1719   0EE2 FD A8         sor a, b ; ||
1720   0EE4 E4            pop a
1721   0EE5             ; --- END LOGICAL OR
1722   0EE5 C0 00 00      cmp b, 0
1723   0EE8 C6 FE 0E      je _if28_exit
1724   0EEB             _if28_TRUE:
1725   0EEB             ; scratchloc = -1; 
1726   0EEB FA FF FF      lea d, [bp + -1] ; $scratchloc
1727   0EEE DA            push d
1728   0EEF FD 2E FF FF   mov32 cb, $ffffffff
1728   0EF3 FF FF 
1729   0EF5 E7            pop d
1730   0EF6 FD 43         mov [d], b
1731   0EF8             ; continue; 
1732   0EF8 0A 83 0E      jmp _while27_cond ; while continue
1733   0EFB 0A FE 0E      jmp _if28_exit
1734   0EFE             _if28_exit:
1735   0EFE             ; if ((cave[loc[	    0   ]][0] != scratchloc) & 
1736   0EFE             _if29_cond:
1737   0EFE 3B C8 17      mov d, _cave_data ; $cave
1738   0F01 D7            push a
1739   0F02 DA            push d
1740   0F03 3B BA 17      mov d, _loc_data ; $loc
1741   0F06 D7            push a
1742   0F07 DA            push d
1743   0F08 FD 2E 00 00   mov32 cb, $00000000
1743   0F0C 00 00 
1744   0F0E E7            pop d
1745   0F0F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1746   0F13 E4            pop a
1747   0F14 2A            mov b, [d]
1748   0F15 38 00 00      mov c, 0
1749   0F18 E7            pop d
1750   0F19 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
1751   0F1D DA            push d
1752   0F1E FD 2E 00 00   mov32 cb, $00000000
1752   0F22 00 00 
1753   0F24 E7            pop d
1754   0F25 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1755   0F29 E4            pop a
1756   0F2A 2A            mov b, [d]
1757   0F2B 38 00 00      mov c, 0
1758   0F2E             ; --- START RELATIONAL
1759   0F2E D7            push a
1760   0F2F 11            mov a, b
1761   0F30 FA FF FF      lea d, [bp + -1] ; $scratchloc
1762   0F33 2A            mov b, [d]
1763   0F34 38 00 00      mov c, 0
1764   0F37 B0            cmp a, b
1765   0F38 FD 72         sneq ; !=
1766   0F3A E4            pop a
1767   0F3B             ; --- END RELATIONAL
1768   0F3B D7            push a
1769   0F3C 11            mov a, b
1770   0F3D 3B C8 17      mov d, _cave_data ; $cave
1771   0F40 D7            push a
1772   0F41 DA            push d
1773   0F42 3B BA 17      mov d, _loc_data ; $loc
1774   0F45 D7            push a
1775   0F46 DA            push d
1776   0F47 FD 2E 00 00   mov32 cb, $00000000
1776   0F4B 00 00 
1777   0F4D E7            pop d
1778   0F4E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1779   0F52 E4            pop a
1780   0F53 2A            mov b, [d]
1781   0F54 38 00 00      mov c, 0
1782   0F57 E7            pop d
1783   0F58 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
1784   0F5C DA            push d
1785   0F5D FD 2E 01 00   mov32 cb, $00000001
1785   0F61 00 00 
1786   0F63 E7            pop d
1787   0F64 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1788   0F68 E4            pop a
1789   0F69 2A            mov b, [d]
1790   0F6A 38 00 00      mov c, 0
1791   0F6D             ; --- START RELATIONAL
1792   0F6D D7            push a
1793   0F6E 11            mov a, b
1794   0F6F FA FF FF      lea d, [bp + -1] ; $scratchloc
1795   0F72 2A            mov b, [d]
1796   0F73 38 00 00      mov c, 0
1797   0F76 B0            cmp a, b
1798   0F77 FD 72         sneq ; !=
1799   0F79 E4            pop a
1800   0F7A             ; --- END RELATIONAL
1801   0F7A FD 92         and b, a ; &
1802   0F7C 11            mov a, b
1803   0F7D 3B C8 17      mov d, _cave_data ; $cave
1804   0F80 D7            push a
1805   0F81 DA            push d
1806   0F82 3B BA 17      mov d, _loc_data ; $loc
1807   0F85 D7            push a
1808   0F86 DA            push d
1809   0F87 FD 2E 00 00   mov32 cb, $00000000
1809   0F8B 00 00 
1810   0F8D E7            pop d
1811   0F8E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1812   0F92 E4            pop a
1813   0F93 2A            mov b, [d]
1814   0F94 38 00 00      mov c, 0
1815   0F97 E7            pop d
1816   0F98 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
1817   0F9C DA            push d
1818   0F9D FD 2E 02 00   mov32 cb, $00000002
1818   0FA1 00 00 
1819   0FA3 E7            pop d
1820   0FA4 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1821   0FA8 E4            pop a
1822   0FA9 2A            mov b, [d]
1823   0FAA 38 00 00      mov c, 0
1824   0FAD             ; --- START RELATIONAL
1825   0FAD D7            push a
1826   0FAE 11            mov a, b
1827   0FAF FA FF FF      lea d, [bp + -1] ; $scratchloc
1828   0FB2 2A            mov b, [d]
1829   0FB3 38 00 00      mov c, 0
1830   0FB6 B0            cmp a, b
1831   0FB7 FD 72         sneq ; !=
1832   0FB9 E4            pop a
1833   0FBA             ; --- END RELATIONAL
1834   0FBA FD 92         and b, a ; &
1835   0FBC 11            mov a, b
1836   0FBD 3B BA 17      mov d, _loc_data ; $loc
1837   0FC0 D7            push a
1838   0FC1 DA            push d
1839   0FC2 FD 2E 00 00   mov32 cb, $00000000
1839   0FC6 00 00 
1840   0FC8 E7            pop d
1841   0FC9 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1842   0FCD E4            pop a
1843   0FCE 2A            mov b, [d]
1844   0FCF 38 00 00      mov c, 0
1845   0FD2             ; --- START RELATIONAL
1846   0FD2 D7            push a
1847   0FD3 11            mov a, b
1848   0FD4 FA FF FF      lea d, [bp + -1] ; $scratchloc
1849   0FD7 2A            mov b, [d]
1850   0FD8 38 00 00      mov c, 0
1851   0FDB B0            cmp a, b
1852   0FDC FD 72         sneq ; !=
1853   0FDE E4            pop a
1854   0FDF             ; --- END RELATIONAL
1855   0FDF FD 92         and b, a ; &
1856   0FE1 E4            pop a
1857   0FE2 C0 00 00      cmp b, 0
1858   0FE5 C6 07 10      je _if29_exit
1859   0FE8             _if29_TRUE:
1860   0FE8             ; print("NOT POSSIBLE\n"); 
1861   0FE8             ; --- START FUNCTION CALL
1862   0FE8 26 21 1F      mov b, _s53 ; "NOT POSSIBLE\n"
1863   0FEB FD AB         swp b
1864   0FED D8            push b
1865   0FEE 07 ED 14      call print
1866   0FF1 51 02 00      add sp, 2
1867   0FF4             ; --- END FUNCTION CALL
1868   0FF4             ; scratchloc = -1; 
1869   0FF4 FA FF FF      lea d, [bp + -1] ; $scratchloc
1870   0FF7 DA            push d
1871   0FF8 FD 2E FF FF   mov32 cb, $ffffffff
1871   0FFC FF FF 
1872   0FFE E7            pop d
1873   0FFF FD 43         mov [d], b
1874   1001             ; continue; 
1875   1001 0A 83 0E      jmp _while27_cond ; while continue
1876   1004 0A 07 10      jmp _if29_exit
1877   1007             _if29_exit:
1878   1007 0A 83 0E      jmp _while27_cond
1879   100A             _while27_exit:
1880   100A             ; loc[	    0   ] = scratchloc; 
1881   100A 3B BA 17      mov d, _loc_data ; $loc
1882   100D D7            push a
1883   100E DA            push d
1884   100F FD 2E 00 00   mov32 cb, $00000000
1884   1013 00 00 
1885   1015 E7            pop d
1886   1016 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1887   101A E4            pop a
1888   101B DA            push d
1889   101C FA FF FF      lea d, [bp + -1] ; $scratchloc
1890   101F 2A            mov b, [d]
1891   1020 38 00 00      mov c, 0
1892   1023 E7            pop d
1893   1024 FD 43         mov [d], b
1894   1026             ; while ((scratchloc == loc[	4     ]) || (scratchloc == loc[	5     ])) { 
1895   1026             _while30_cond:
1896   1026 FA FF FF      lea d, [bp + -1] ; $scratchloc
1897   1029 2A            mov b, [d]
1898   102A 38 00 00      mov c, 0
1899   102D             ; --- START RELATIONAL
1900   102D D7            push a
1901   102E 11            mov a, b
1902   102F 3B BA 17      mov d, _loc_data ; $loc
1903   1032 D7            push a
1904   1033 DA            push d
1905   1034 FD 2E 04 00   mov32 cb, $00000004
1905   1038 00 00 
1906   103A E7            pop d
1907   103B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1908   103F E4            pop a
1909   1040 2A            mov b, [d]
1910   1041 38 00 00      mov c, 0
1911   1044 B0            cmp a, b
1912   1045 FD 71         seq ; ==
1913   1047 E4            pop a
1914   1048             ; --- END RELATIONAL
1915   1048             ; --- START LOGICAL OR
1916   1048 D7            push a
1917   1049 11            mov a, b
1918   104A FA FF FF      lea d, [bp + -1] ; $scratchloc
1919   104D 2A            mov b, [d]
1920   104E 38 00 00      mov c, 0
1921   1051             ; --- START RELATIONAL
1922   1051 D7            push a
1923   1052 11            mov a, b
1924   1053 3B BA 17      mov d, _loc_data ; $loc
1925   1056 D7            push a
1926   1057 DA            push d
1927   1058 FD 2E 05 00   mov32 cb, $00000005
1927   105C 00 00 
1928   105E E7            pop d
1929   105F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1930   1063 E4            pop a
1931   1064 2A            mov b, [d]
1932   1065 38 00 00      mov c, 0
1933   1068 B0            cmp a, b
1934   1069 FD 71         seq ; ==
1935   106B E4            pop a
1936   106C             ; --- END RELATIONAL
1937   106C FD A8         sor a, b ; ||
1938   106E E4            pop a
1939   106F             ; --- END LOGICAL OR
1940   106F C0 00 00      cmp b, 0
1941   1072 C6 B7 10      je _while30_exit
1942   1075             _while30_block:
1943   1075             ; print("ZAP--SUPER BAT SNATCH! ELSEWHEREVILLE FOR YOU!\n"); 
1944   1075             ; --- START FUNCTION CALL
1945   1075 26 2F 1F      mov b, _s54 ; "ZAP--SUPER BAT SNATCH! ELSEWHEREVILLE FOR YOU!\n"
1946   1078 FD AB         swp b
1947   107A D8            push b
1948   107B 07 ED 14      call print
1949   107E 51 02 00      add sp, 2
1950   1081             ; --- END FUNCTION CALL
1951   1081             ; scratchloc = loc[	    0   ] = rand2()%20; 
1952   1081 FA FF FF      lea d, [bp + -1] ; $scratchloc
1953   1084 DA            push d
1954   1085 3B BA 17      mov d, _loc_data ; $loc
1955   1088 D7            push a
1956   1089 DA            push d
1957   108A FD 2E 00 00   mov32 cb, $00000000
1957   108E 00 00 
1958   1090 E7            pop d
1959   1091 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1960   1095 E4            pop a
1961   1096 DA            push d
1962   1097             ; --- START FUNCTION CALL
1963   1097 07 5E 11      call rand2
1964   109A             ; --- START FACTORS
1965   109A D7            push a
1966   109B FD D8         push g
1967   109D 11            mov a, b
1968   109E FD 7A         mov g, c
1969   10A0 FD 2E 14 00   mov32 cb, $00000014
1969   10A4 00 00 
1970   10A6 AE            div a, b ; 
1971   10A7 11            mov a, b
1972   10A8 FD 38         mov c, g
1973   10AA 27            mov b, a
1974   10AB FD F1         pop g
1975   10AD E4            pop a
1976   10AE             ; --- END FACTORS
1977   10AE E7            pop d
1978   10AF FD 43         mov [d], b
1979   10B1 E7            pop d
1980   10B2 FD 43         mov [d], b
1981   10B4 0A 26 10      jmp _while30_cond
1982   10B7             _while30_exit:
1983   10B7             ; if (scratchloc == loc[	1      ]) { 
1984   10B7             _if33_cond:
1985   10B7 FA FF FF      lea d, [bp + -1] ; $scratchloc
1986   10BA 2A            mov b, [d]
1987   10BB 38 00 00      mov c, 0
1988   10BE             ; --- START RELATIONAL
1989   10BE D7            push a
1990   10BF 11            mov a, b
1991   10C0 3B BA 17      mov d, _loc_data ; $loc
1992   10C3 D7            push a
1993   10C4 DA            push d
1994   10C5 FD 2E 01 00   mov32 cb, $00000001
1994   10C9 00 00 
1995   10CB E7            pop d
1996   10CC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1997   10D0 E4            pop a
1998   10D1 2A            mov b, [d]
1999   10D2 38 00 00      mov c, 0
2000   10D5 B0            cmp a, b
2001   10D6 FD 71         seq ; ==
2002   10D8 E4            pop a
2003   10D9             ; --- END RELATIONAL
2004   10D9 C0 00 00      cmp b, 0
2005   10DC C6 F1 10      je _if33_exit
2006   10DF             _if33_TRUE:
2007   10DF             ; print("... OOPS! BUMPED A WUMPUS!\n"); 
2008   10DF             ; --- START FUNCTION CALL
2009   10DF 26 5F 1F      mov b, _s55 ; "... OOPS! BUMPED A WUMPUS!\n"
2010   10E2 FD AB         swp b
2011   10E4 D8            push b
2012   10E5 07 ED 14      call print
2013   10E8 51 02 00      add sp, 2
2014   10EB             ; --- END FUNCTION CALL
2015   10EB             ; move_wumpus(); 
2016   10EB             ; --- START FUNCTION CALL
2017   10EB 07 E9 09      call move_wumpus
2018   10EE 0A F1 10      jmp _if33_exit
2019   10F1             _if33_exit:
2020   10F1             ; if (scratchloc == loc[	2    ] || scratchloc == loc[	3    ]) { 
2021   10F1             _if34_cond:
2022   10F1 FA FF FF      lea d, [bp + -1] ; $scratchloc
2023   10F4 2A            mov b, [d]
2024   10F5 38 00 00      mov c, 0
2025   10F8             ; --- START RELATIONAL
2026   10F8 D7            push a
2027   10F9 11            mov a, b
2028   10FA 3B BA 17      mov d, _loc_data ; $loc
2029   10FD D7            push a
2030   10FE DA            push d
2031   10FF FD 2E 02 00   mov32 cb, $00000002
2031   1103 00 00 
2032   1105 E7            pop d
2033   1106 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2034   110A E4            pop a
2035   110B 2A            mov b, [d]
2036   110C 38 00 00      mov c, 0
2037   110F B0            cmp a, b
2038   1110 FD 71         seq ; ==
2039   1112 E4            pop a
2040   1113             ; --- END RELATIONAL
2041   1113             ; --- START LOGICAL OR
2042   1113 D7            push a
2043   1114 11            mov a, b
2044   1115 FA FF FF      lea d, [bp + -1] ; $scratchloc
2045   1118 2A            mov b, [d]
2046   1119 38 00 00      mov c, 0
2047   111C             ; --- START RELATIONAL
2048   111C D7            push a
2049   111D 11            mov a, b
2050   111E 3B BA 17      mov d, _loc_data ; $loc
2051   1121 D7            push a
2052   1122 DA            push d
2053   1123 FD 2E 03 00   mov32 cb, $00000003
2053   1127 00 00 
2054   1129 E7            pop d
2055   112A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2056   112E E4            pop a
2057   112F 2A            mov b, [d]
2058   1130 38 00 00      mov c, 0
2059   1133 B0            cmp a, b
2060   1134 FD 71         seq ; ==
2061   1136 E4            pop a
2062   1137             ; --- END RELATIONAL
2063   1137 FD A8         sor a, b ; ||
2064   1139 E4            pop a
2065   113A             ; --- END LOGICAL OR
2066   113A C0 00 00      cmp b, 0
2067   113D C6 5C 11      je _if34_exit
2068   1140             _if34_TRUE:
2069   1140             ; print("YYYYIIIIEEEE . . . FELL IN PIT\n"); 
2070   1140             ; --- START FUNCTION CALL
2071   1140 26 7B 1F      mov b, _s56 ; "YYYYIIIIEEEE . . . FELL IN PIT\n"
2072   1143 FD AB         swp b
2073   1145 D8            push b
2074   1146 07 ED 14      call print
2075   1149 51 02 00      add sp, 2
2076   114C             ; --- END FUNCTION CALL
2077   114C             ; finished = 	2    ; 
2078   114C 3B C6 17      mov d, _finished ; $finished
2079   114F DA            push d
2080   1150 FD 2E 02 00   mov32 cb, $00000002
2080   1154 00 00 
2081   1156 E7            pop d
2082   1157 FD 43         mov [d], b
2083   1159 0A 5C 11      jmp _if34_exit
2084   115C             _if34_exit:
2085   115C F9            leave
2086   115D 09            ret
2087   115E             
2088   115E             rand2:
2089   115E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2090   1161             ; rand_val=rand_val+rand_inc; 
2091   1161 3B B6 17      mov d, _rand_val ; $rand_val
2092   1164 DA            push d
2093   1165 3B B6 17      mov d, _rand_val ; $rand_val
2094   1168 2A            mov b, [d]
2095   1169 38 00 00      mov c, 0
2096   116C             ; --- START TERMS
2097   116C D7            push a
2098   116D 11            mov a, b
2099   116E 3B B8 17      mov d, _rand_inc ; $rand_inc
2100   1171 2A            mov b, [d]
2101   1172 38 00 00      mov c, 0
2102   1175 56            add b, a
2103   1176 E4            pop a
2104   1177             ; --- END TERMS
2105   1177 E7            pop d
2106   1178 FD 43         mov [d], b
2107   117A             ; rand_inc++; 
2108   117A 3B B8 17      mov d, _rand_inc ; $rand_inc
2109   117D 2A            mov b, [d]
2110   117E 38 00 00      mov c, 0
2111   1181 11            mov a, b
2112   1182 FD 77         inc b
2113   1184 3B B8 17      mov d, _rand_inc ; $rand_inc
2114   1187 FD 43         mov [d], b
2115   1189 27            mov b, a
2116   118A             ; return rand_val; 
2117   118A 3B B6 17      mov d, _rand_val ; $rand_val
2118   118D 2A            mov b, [d]
2119   118E 38 00 00      mov c, 0
2120   1191 F9            leave
2121   1192 09            ret
2122   1193             
2123   1193             game_setup:
2124   1193 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2125   1196             ; int j, k; 
2126   1196 52 02 00      sub sp, 2
2127   1199 52 02 00      sub sp, 2
2128   119C             ; int v; 
2129   119C 52 02 00      sub sp, 2
2130   119F             ; for (j = 0; j < 	6    ; j++) { 
2131   119F             _for35_init:
2132   119F FA FF FF      lea d, [bp + -1] ; $j
2133   11A2 DA            push d
2134   11A3 FD 2E 00 00   mov32 cb, $00000000
2134   11A7 00 00 
2135   11A9 E7            pop d
2136   11AA FD 43         mov [d], b
2137   11AC             _for35_cond:
2138   11AC FA FF FF      lea d, [bp + -1] ; $j
2139   11AF 2A            mov b, [d]
2140   11B0 38 00 00      mov c, 0
2141   11B3             ; --- START RELATIONAL
2142   11B3 D7            push a
2143   11B4 11            mov a, b
2144   11B5 FD 2E 06 00   mov32 cb, $00000006
2144   11B9 00 00 
2145   11BB B0            cmp a, b
2146   11BC FD 73         slt ; < (signed)
2147   11BE E4            pop a
2148   11BF             ; --- END RELATIONAL
2149   11BF C0 00 00      cmp b, 0
2150   11C2 C6 F6 12      je _for35_exit
2151   11C5             _for35_block:
2152   11C5             ; loc[j] = -1; 
2153   11C5 3B BA 17      mov d, _loc_data ; $loc
2154   11C8 D7            push a
2155   11C9 DA            push d
2156   11CA FA FF FF      lea d, [bp + -1] ; $j
2157   11CD 2A            mov b, [d]
2158   11CE 38 00 00      mov c, 0
2159   11D1 E7            pop d
2160   11D2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2161   11D6 E4            pop a
2162   11D7 DA            push d
2163   11D8 FD 2E FF FF   mov32 cb, $ffffffff
2163   11DC FF FF 
2164   11DE E7            pop d
2165   11DF FD 43         mov [d], b
2166   11E1             ; while (loc[j] < 0) { 
2167   11E1             _while36_cond:
2168   11E1 3B BA 17      mov d, _loc_data ; $loc
2169   11E4 D7            push a
2170   11E5 DA            push d
2171   11E6 FA FF FF      lea d, [bp + -1] ; $j
2172   11E9 2A            mov b, [d]
2173   11EA 38 00 00      mov c, 0
2174   11ED E7            pop d
2175   11EE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2176   11F2 E4            pop a
2177   11F3 2A            mov b, [d]
2178   11F4 38 00 00      mov c, 0
2179   11F7             ; --- START RELATIONAL
2180   11F7 D7            push a
2181   11F8 11            mov a, b
2182   11F9 FD 2E 00 00   mov32 cb, $00000000
2182   11FD 00 00 
2183   11FF B0            cmp a, b
2184   1200 FD 73         slt ; < (signed)
2185   1202 E4            pop a
2186   1203             ; --- END RELATIONAL
2187   1203 C0 00 00      cmp b, 0
2188   1206 C6 E3 12      je _while36_exit
2189   1209             _while36_block:
2190   1209             ; v = rand2(); 
2191   1209 FA FB FF      lea d, [bp + -5] ; $v
2192   120C DA            push d
2193   120D             ; --- START FUNCTION CALL
2194   120D 07 5E 11      call rand2
2195   1210 E7            pop d
2196   1211 FD 43         mov [d], b
2197   1213             ; loc[j] = v % 20; 
2198   1213 3B BA 17      mov d, _loc_data ; $loc
2199   1216 D7            push a
2200   1217 DA            push d
2201   1218 FA FF FF      lea d, [bp + -1] ; $j
2202   121B 2A            mov b, [d]
2203   121C 38 00 00      mov c, 0
2204   121F E7            pop d
2205   1220 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2206   1224 E4            pop a
2207   1225 DA            push d
2208   1226 FA FB FF      lea d, [bp + -5] ; $v
2209   1229 2A            mov b, [d]
2210   122A 38 00 00      mov c, 0
2211   122D             ; --- START FACTORS
2212   122D D7            push a
2213   122E FD D8         push g
2214   1230 11            mov a, b
2215   1231 FD 7A         mov g, c
2216   1233 FD 2E 14 00   mov32 cb, $00000014
2216   1237 00 00 
2217   1239 AE            div a, b ; 
2218   123A 11            mov a, b
2219   123B FD 38         mov c, g
2220   123D 27            mov b, a
2221   123E FD F1         pop g
2222   1240 E4            pop a
2223   1241             ; --- END FACTORS
2224   1241 E7            pop d
2225   1242 FD 43         mov [d], b
2226   1244             ; for (k=0; k < j - 1; k++) { 
2227   1244             _for39_init:
2228   1244 FA FD FF      lea d, [bp + -3] ; $k
2229   1247 DA            push d
2230   1248 FD 2E 00 00   mov32 cb, $00000000
2230   124C 00 00 
2231   124E E7            pop d
2232   124F FD 43         mov [d], b
2233   1251             _for39_cond:
2234   1251 FA FD FF      lea d, [bp + -3] ; $k
2235   1254 2A            mov b, [d]
2236   1255 38 00 00      mov c, 0
2237   1258             ; --- START RELATIONAL
2238   1258 D7            push a
2239   1259 11            mov a, b
2240   125A FA FF FF      lea d, [bp + -1] ; $j
2241   125D 2A            mov b, [d]
2242   125E 38 00 00      mov c, 0
2243   1261             ; --- START TERMS
2244   1261 D7            push a
2245   1262 11            mov a, b
2246   1263 FD 2E 01 00   mov32 cb, $00000001
2246   1267 00 00 
2247   1269 60            sub a, b
2248   126A 27            mov b, a
2249   126B E4            pop a
2250   126C             ; --- END TERMS
2251   126C B0            cmp a, b
2252   126D FD 73         slt ; < (signed)
2253   126F E4            pop a
2254   1270             ; --- END RELATIONAL
2255   1270 C0 00 00      cmp b, 0
2256   1273 C6 E0 12      je _for39_exit
2257   1276             _for39_block:
2258   1276             ; if (loc[j] == loc[k]) { 
2259   1276             _if40_cond:
2260   1276 3B BA 17      mov d, _loc_data ; $loc
2261   1279 D7            push a
2262   127A DA            push d
2263   127B FA FF FF      lea d, [bp + -1] ; $j
2264   127E 2A            mov b, [d]
2265   127F 38 00 00      mov c, 0
2266   1282 E7            pop d
2267   1283 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2268   1287 E4            pop a
2269   1288 2A            mov b, [d]
2270   1289 38 00 00      mov c, 0
2271   128C             ; --- START RELATIONAL
2272   128C D7            push a
2273   128D 11            mov a, b
2274   128E 3B BA 17      mov d, _loc_data ; $loc
2275   1291 D7            push a
2276   1292 DA            push d
2277   1293 FA FD FF      lea d, [bp + -3] ; $k
2278   1296 2A            mov b, [d]
2279   1297 38 00 00      mov c, 0
2280   129A E7            pop d
2281   129B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2282   129F E4            pop a
2283   12A0 2A            mov b, [d]
2284   12A1 38 00 00      mov c, 0
2285   12A4 B0            cmp a, b
2286   12A5 FD 71         seq ; ==
2287   12A7 E4            pop a
2288   12A8             ; --- END RELATIONAL
2289   12A8 C0 00 00      cmp b, 0
2290   12AB C6 CD 12      je _if40_exit
2291   12AE             _if40_TRUE:
2292   12AE             ; loc[j] = -1; 
2293   12AE 3B BA 17      mov d, _loc_data ; $loc
2294   12B1 D7            push a
2295   12B2 DA            push d
2296   12B3 FA FF FF      lea d, [bp + -1] ; $j
2297   12B6 2A            mov b, [d]
2298   12B7 38 00 00      mov c, 0
2299   12BA E7            pop d
2300   12BB FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2301   12BF E4            pop a
2302   12C0 DA            push d
2303   12C1 FD 2E FF FF   mov32 cb, $ffffffff
2303   12C5 FF FF 
2304   12C7 E7            pop d
2305   12C8 FD 43         mov [d], b
2306   12CA 0A CD 12      jmp _if40_exit
2307   12CD             _if40_exit:
2308   12CD             _for39_update:
2309   12CD FA FD FF      lea d, [bp + -3] ; $k
2310   12D0 2A            mov b, [d]
2311   12D1 38 00 00      mov c, 0
2312   12D4 11            mov a, b
2313   12D5 FD 77         inc b
2314   12D7 FA FD FF      lea d, [bp + -3] ; $k
2315   12DA FD 43         mov [d], b
2316   12DC 27            mov b, a
2317   12DD 0A 51 12      jmp _for39_cond
2318   12E0             _for39_exit:
2319   12E0 0A E1 11      jmp _while36_cond
2320   12E3             _while36_exit:
2321   12E3             _for35_update:
2322   12E3 FA FF FF      lea d, [bp + -1] ; $j
2323   12E6 2A            mov b, [d]
2324   12E7 38 00 00      mov c, 0
2325   12EA 11            mov a, b
2326   12EB FD 77         inc b
2327   12ED FA FF FF      lea d, [bp + -1] ; $j
2328   12F0 FD 43         mov [d], b
2329   12F2 27            mov b, a
2330   12F3 0A AC 11      jmp _for35_cond
2331   12F6             _for35_exit:
2332   12F6 F9            leave
2333   12F7 09            ret
2334   12F8             
2335   12F8             game_play:
2336   12F8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2337   12FB             ; arrows = 5; 
2338   12FB 3B B2 17      mov d, _arrows ; $arrows
2339   12FE DA            push d
2340   12FF FD 2E 05 00   mov32 cb, $00000005
2340   1303 00 00 
2341   1305 E7            pop d
2342   1306 FD 43         mov [d], b
2343   1308             ; print("HUNT THE WUMPUS\n"); 
2344   1308             ; --- START FUNCTION CALL
2345   1308 26 9B 1F      mov b, _s57 ; "HUNT THE WUMPUS\n"
2346   130B FD AB         swp b
2347   130D D8            push b
2348   130E 07 ED 14      call print
2349   1311 51 02 00      add sp, 2
2350   1314             ; --- END FUNCTION CALL
2351   1314             ; if (debug) { 
2352   1314             _if41_cond:
2353   1314 3B B4 17      mov d, _debug ; $debug
2354   1317 2A            mov b, [d]
2355   1318 38 00 00      mov c, 0
2356   131B C0 00 00      cmp b, 0
2357   131E C6 28 14      je _if41_exit
2358   1321             _if41_TRUE:
2359   1321             ; print("Wumpus is at "); print_unsigned(loc[	1      ]+1); 
2360   1321             ; --- START FUNCTION CALL
2361   1321 26 AC 1F      mov b, _s58 ; "Wumpus is at "
2362   1324 FD AB         swp b
2363   1326 D8            push b
2364   1327 07 ED 14      call print
2365   132A 51 02 00      add sp, 2
2366   132D             ; --- END FUNCTION CALL
2367   132D             ; print_unsigned(loc[	1      ]+1); 
2368   132D             ; --- START FUNCTION CALL
2369   132D 3B BA 17      mov d, _loc_data ; $loc
2370   1330 D7            push a
2371   1331 DA            push d
2372   1332 FD 2E 01 00   mov32 cb, $00000001
2372   1336 00 00 
2373   1338 E7            pop d
2374   1339 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2375   133D E4            pop a
2376   133E 2A            mov b, [d]
2377   133F 38 00 00      mov c, 0
2378   1342             ; --- START TERMS
2379   1342 D7            push a
2380   1343 11            mov a, b
2381   1344 FD 2E 01 00   mov32 cb, $00000001
2381   1348 00 00 
2382   134A 56            add b, a
2383   134B E4            pop a
2384   134C             ; --- END TERMS
2385   134C FD AB         swp b
2386   134E D8            push b
2387   134F 07 86 15      call print_unsigned
2388   1352 51 02 00      add sp, 2
2389   1355             ; --- END FUNCTION CALL
2390   1355             ; print(", pits at "); print_unsigned(loc[	2    ]+1); 
2391   1355             ; --- START FUNCTION CALL
2392   1355 26 BA 1F      mov b, _s59 ; ", pits at "
2393   1358 FD AB         swp b
2394   135A D8            push b
2395   135B 07 ED 14      call print
2396   135E 51 02 00      add sp, 2
2397   1361             ; --- END FUNCTION CALL
2398   1361             ; print_unsigned(loc[	2    ]+1); 
2399   1361             ; --- START FUNCTION CALL
2400   1361 3B BA 17      mov d, _loc_data ; $loc
2401   1364 D7            push a
2402   1365 DA            push d
2403   1366 FD 2E 02 00   mov32 cb, $00000002
2403   136A 00 00 
2404   136C E7            pop d
2405   136D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2406   1371 E4            pop a
2407   1372 2A            mov b, [d]
2408   1373 38 00 00      mov c, 0
2409   1376             ; --- START TERMS
2410   1376 D7            push a
2411   1377 11            mov a, b
2412   1378 FD 2E 01 00   mov32 cb, $00000001
2412   137C 00 00 
2413   137E 56            add b, a
2414   137F E4            pop a
2415   1380             ; --- END TERMS
2416   1380 FD AB         swp b
2417   1382 D8            push b
2418   1383 07 86 15      call print_unsigned
2419   1386 51 02 00      add sp, 2
2420   1389             ; --- END FUNCTION CALL
2421   1389             ; print(" & "); print_unsigned(loc[	3    ]+1); 
2422   1389             ; --- START FUNCTION CALL
2423   1389 26 C5 1F      mov b, _s60 ; " & "
2424   138C FD AB         swp b
2425   138E D8            push b
2426   138F 07 ED 14      call print
2427   1392 51 02 00      add sp, 2
2428   1395             ; --- END FUNCTION CALL
2429   1395             ; print_unsigned(loc[	3    ]+1); 
2430   1395             ; --- START FUNCTION CALL
2431   1395 3B BA 17      mov d, _loc_data ; $loc
2432   1398 D7            push a
2433   1399 DA            push d
2434   139A FD 2E 03 00   mov32 cb, $00000003
2434   139E 00 00 
2435   13A0 E7            pop d
2436   13A1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2437   13A5 E4            pop a
2438   13A6 2A            mov b, [d]
2439   13A7 38 00 00      mov c, 0
2440   13AA             ; --- START TERMS
2441   13AA D7            push a
2442   13AB 11            mov a, b
2443   13AC FD 2E 01 00   mov32 cb, $00000001
2443   13B0 00 00 
2444   13B2 56            add b, a
2445   13B3 E4            pop a
2446   13B4             ; --- END TERMS
2447   13B4 FD AB         swp b
2448   13B6 D8            push b
2449   13B7 07 86 15      call print_unsigned
2450   13BA 51 02 00      add sp, 2
2451   13BD             ; --- END FUNCTION CALL
2452   13BD             ; print(", bats at "); print_unsigned(loc[	4     ]+1); 
2453   13BD             ; --- START FUNCTION CALL
2454   13BD 26 C9 1F      mov b, _s61 ; ", bats at "
2455   13C0 FD AB         swp b
2456   13C2 D8            push b
2457   13C3 07 ED 14      call print
2458   13C6 51 02 00      add sp, 2
2459   13C9             ; --- END FUNCTION CALL
2460   13C9             ; print_unsigned(loc[	4     ]+1); 
2461   13C9             ; --- START FUNCTION CALL
2462   13C9 3B BA 17      mov d, _loc_data ; $loc
2463   13CC D7            push a
2464   13CD DA            push d
2465   13CE FD 2E 04 00   mov32 cb, $00000004
2465   13D2 00 00 
2466   13D4 E7            pop d
2467   13D5 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2468   13D9 E4            pop a
2469   13DA 2A            mov b, [d]
2470   13DB 38 00 00      mov c, 0
2471   13DE             ; --- START TERMS
2472   13DE D7            push a
2473   13DF 11            mov a, b
2474   13E0 FD 2E 01 00   mov32 cb, $00000001
2474   13E4 00 00 
2475   13E6 56            add b, a
2476   13E7 E4            pop a
2477   13E8             ; --- END TERMS
2478   13E8 FD AB         swp b
2479   13EA D8            push b
2480   13EB 07 86 15      call print_unsigned
2481   13EE 51 02 00      add sp, 2
2482   13F1             ; --- END FUNCTION CALL
2483   13F1             ; print(" & "); print_unsigned(loc[	5     ]+1); 
2484   13F1             ; --- START FUNCTION CALL
2485   13F1 26 C5 1F      mov b, _s60 ; " & "
2486   13F4 FD AB         swp b
2487   13F6 D8            push b
2488   13F7 07 ED 14      call print
2489   13FA 51 02 00      add sp, 2
2490   13FD             ; --- END FUNCTION CALL
2491   13FD             ; print_unsigned(loc[	5     ]+1); 
2492   13FD             ; --- START FUNCTION CALL
2493   13FD 3B BA 17      mov d, _loc_data ; $loc
2494   1400 D7            push a
2495   1401 DA            push d
2496   1402 FD 2E 05 00   mov32 cb, $00000005
2496   1406 00 00 
2497   1408 E7            pop d
2498   1409 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2499   140D E4            pop a
2500   140E 2A            mov b, [d]
2501   140F 38 00 00      mov c, 0
2502   1412             ; --- START TERMS
2503   1412 D7            push a
2504   1413 11            mov a, b
2505   1414 FD 2E 01 00   mov32 cb, $00000001
2505   1418 00 00 
2506   141A 56            add b, a
2507   141B E4            pop a
2508   141C             ; --- END TERMS
2509   141C FD AB         swp b
2510   141E D8            push b
2511   141F 07 86 15      call print_unsigned
2512   1422 51 02 00      add sp, 2
2513   1425             ; --- END FUNCTION CALL
2514   1425 0A 28 14      jmp _if41_exit
2515   1428             _if41_exit:
2516   1428             ; finished = 	     0   ; 
2517   1428 3B C6 17      mov d, _finished ; $finished
2518   142B DA            push d
2519   142C FD 2E 00 00   mov32 cb, $00000000
2519   1430 00 00 
2520   1432 E7            pop d
2521   1433 FD 43         mov [d], b
2522   1435             ; while (finished == 	     0   ) { 
2523   1435             _while42_cond:
2524   1435 3B C6 17      mov d, _finished ; $finished
2525   1438 2A            mov b, [d]
2526   1439 38 00 00      mov c, 0
2527   143C             ; --- START RELATIONAL
2528   143C D7            push a
2529   143D 11            mov a, b
2530   143E FD 2E 00 00   mov32 cb, $00000000
2530   1442 00 00 
2531   1444 B0            cmp a, b
2532   1445 FD 71         seq ; ==
2533   1447 E4            pop a
2534   1448             ; --- END RELATIONAL
2535   1448 C0 00 00      cmp b, 0
2536   144B C6 66 14      je _while42_exit
2537   144E             _while42_block:
2538   144E             ; show_room(); 
2539   144E             ; --- START FUNCTION CALL
2540   144E 07 B1 06      call show_room
2541   1451             ; if (move_or_shoot()) { 
2542   1451             _if43_cond:
2543   1451             ; --- START FUNCTION CALL
2544   1451 07 65 09      call move_or_shoot
2545   1454 C0 00 00      cmp b, 0
2546   1457 C6 60 14      je _if43_else
2547   145A             _if43_TRUE:
2548   145A             ; shoot(); 
2549   145A             ; --- START FUNCTION CALL
2550   145A 07 C3 0A      call shoot
2551   145D 0A 63 14      jmp _if43_exit
2552   1460             _if43_else:
2553   1460             ; move(); 
2554   1460             ; --- START FUNCTION CALL
2555   1460 07 70 0E      call move
2556   1463             _if43_exit:
2557   1463 0A 35 14      jmp _while42_cond
2558   1466             _while42_exit:
2559   1466             ; if (finished == 	     1   ) { 
2560   1466             _if44_cond:
2561   1466 3B C6 17      mov d, _finished ; $finished
2562   1469 2A            mov b, [d]
2563   146A 38 00 00      mov c, 0
2564   146D             ; --- START RELATIONAL
2565   146D D7            push a
2566   146E 11            mov a, b
2567   146F FD 2E 01 00   mov32 cb, $00000001
2567   1473 00 00 
2568   1475 B0            cmp a, b
2569   1476 FD 71         seq ; ==
2570   1478 E4            pop a
2571   1479             ; --- END RELATIONAL
2572   1479 C0 00 00      cmp b, 0
2573   147C C6 8E 14      je _if44_exit
2574   147F             _if44_TRUE:
2575   147F             ; print("HEE HEE HEE - THE WUMPUS'LL GET YOU NEXT TIME!!\n"); 
2576   147F             ; --- START FUNCTION CALL
2577   147F 26 D4 1F      mov b, _s62 ; "HEE HEE HEE - THE WUMPUS'LL GET YOU NEXT TIME!!\n"
2578   1482 FD AB         swp b
2579   1484 D8            push b
2580   1485 07 ED 14      call print
2581   1488 51 02 00      add sp, 2
2582   148B             ; --- END FUNCTION CALL
2583   148B 0A 8E 14      jmp _if44_exit
2584   148E             _if44_exit:
2585   148E             ; if (finished == 	2    ) { 
2586   148E             _if45_cond:
2587   148E 3B C6 17      mov d, _finished ; $finished
2588   1491 2A            mov b, [d]
2589   1492 38 00 00      mov c, 0
2590   1495             ; --- START RELATIONAL
2591   1495 D7            push a
2592   1496 11            mov a, b
2593   1497 FD 2E 02 00   mov32 cb, $00000002
2593   149B 00 00 
2594   149D B0            cmp a, b
2595   149E FD 71         seq ; ==
2596   14A0 E4            pop a
2597   14A1             ; --- END RELATIONAL
2598   14A1 C0 00 00      cmp b, 0
2599   14A4 C6 B6 14      je _if45_exit
2600   14A7             _if45_TRUE:
2601   14A7             ; print("HA HA HA - YOU LOSE!\n"); 
2602   14A7             ; --- START FUNCTION CALL
2603   14A7 26 04 20      mov b, _s63 ; "HA HA HA - YOU LOSE!\n"
2604   14AA FD AB         swp b
2605   14AC D8            push b
2606   14AD 07 ED 14      call print
2607   14B0 51 02 00      add sp, 2
2608   14B3             ; --- END FUNCTION CALL
2609   14B3 0A B6 14      jmp _if45_exit
2610   14B6             _if45_exit:
2611   14B6             ; int c; 
2612   14B6 52 02 00      sub sp, 2
2613   14B9             ; c = getlet("NEW GAME (Y-N): "); 
2614   14B9 FA FF FF      lea d, [bp + -1] ; $c
2615   14BC DA            push d
2616   14BD             ; --- START FUNCTION CALL
2617   14BD 26 61 18      mov b, _s1 ; "NEW GAME (Y-N): "
2618   14C0 FD AB         swp b
2619   14C2 D8            push b
2620   14C3 07 93 04      call getlet
2621   14C6 51 02 00      add sp, 2
2622   14C9             ; --- END FUNCTION CALL
2623   14C9 E7            pop d
2624   14CA FD 43         mov [d], b
2625   14CC             ; if (c == 'N') { 
2626   14CC             _if46_cond:
2627   14CC FA FF FF      lea d, [bp + -1] ; $c
2628   14CF 2A            mov b, [d]
2629   14D0 38 00 00      mov c, 0
2630   14D3             ; --- START RELATIONAL
2631   14D3 D7            push a
2632   14D4 11            mov a, b
2633   14D5 FD 2E 4E 00   mov32 cb, $0000004e
2633   14D9 00 00 
2634   14DB B0            cmp a, b
2635   14DC FD 71         seq ; ==
2636   14DE E4            pop a
2637   14DF             ; --- END RELATIONAL
2638   14DF C0 00 00      cmp b, 0
2639   14E2 C6 EB 14      je _if46_exit
2640   14E5             _if46_TRUE:
2641   14E5             ; exit(); 
2642   14E5             ; --- START FUNCTION CALL
2643   14E5 07 AB 17      call exit
2644   14E8 0A EB 14      jmp _if46_exit
2645   14EB             _if46_exit:
2646   14EB F9            leave
2647   14EC 09            ret
2648   14ED             
2649   14ED             print:
2650   14ED F8 00 00      enter 0 ; (push bp; mov bp, sp)
2651   14F0             ; --- BEGIN INLINE ASM SEGMENT
2652   14F0 FA 05 00      lea d, [bp + 5] ; $s
2653   14F3 FD 2A         mov d, [d]
2654   14F5             _puts_L1_print:
2655   14F5 1E            mov al, [d]
2656   14F6 B9 00         cmp al, 0
2657   14F8 C6 04 15      jz _puts_END_print
2658   14FB 23            mov ah, al
2659   14FC 19 00         mov al, 0
2660   14FE 05 03         syscall sys_io
2661   1500 79            inc d
2662   1501 0A F5 14      jmp _puts_L1_print
2663   1504             _puts_END_print:
2664   1504             ; --- END INLINE ASM SEGMENT
2665   1504 F9            leave
2666   1505 09            ret
2667   1506             
2668   1506             getchar:
2669   1506 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2670   1509             ; char c; 
2671   1509 52 01 00      sub sp, 1
2672   150C             ; --- BEGIN INLINE ASM SEGMENT
2673   150C 19 01         mov al, 1
2674   150E 05 03         syscall sys_io      
2675   1510 1A            mov al, ah
2676   1511 FA 00 00      lea d, [bp + 0] ; $c
2677   1514 3E            mov [d], al
2678   1515             ; --- END INLINE ASM SEGMENT
2679   1515             ; return c; 
2680   1515 FA 00 00      lea d, [bp + 0] ; $c
2681   1518 32            mov bl, [d]
2682   1519 A7 00         mov bh, 0
2683   151B 38 00 00      mov c, 0
2684   151E F9            leave
2685   151F 09            ret
2686   1520             
2687   1520             toupper:
2688   1520 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2689   1523             ; if (ch >= 'a' && ch <= 'z')  
2690   1523             _if47_cond:
2691   1523 FA 05 00      lea d, [bp + 5] ; $ch
2692   1526 32            mov bl, [d]
2693   1527 A7 00         mov bh, 0
2694   1529 38 00 00      mov c, 0
2695   152C             ; --- START RELATIONAL
2696   152C D7            push a
2697   152D 11            mov a, b
2698   152E FD 2E 61 00   mov32 cb, $00000061
2698   1532 00 00 
2699   1534 B0            cmp a, b
2700   1535 FD 80         sge ; >=
2701   1537 E4            pop a
2702   1538             ; --- END RELATIONAL
2703   1538             ; --- START LOGICAL AND
2704   1538 D7            push a
2705   1539 11            mov a, b
2706   153A FA 05 00      lea d, [bp + 5] ; $ch
2707   153D 32            mov bl, [d]
2708   153E A7 00         mov bh, 0
2709   1540 38 00 00      mov c, 0
2710   1543             ; --- START RELATIONAL
2711   1543 D7            push a
2712   1544 11            mov a, b
2713   1545 FD 2E 7A 00   mov32 cb, $0000007a
2713   1549 00 00 
2714   154B B0            cmp a, b
2715   154C FD 74         sle ; <= (signed)
2716   154E E4            pop a
2717   154F             ; --- END RELATIONAL
2718   154F FD A7         sand a, b
2719   1551 E4            pop a
2720   1552             ; --- END LOGICAL AND
2721   1552 C0 00 00      cmp b, 0
2722   1555 C6 79 15      je _if47_else
2723   1558             _if47_TRUE:
2724   1558             ; return ch - 'a' + 'A'; 
2725   1558 FA 05 00      lea d, [bp + 5] ; $ch
2726   155B 32            mov bl, [d]
2727   155C A7 00         mov bh, 0
2728   155E 38 00 00      mov c, 0
2729   1561             ; --- START TERMS
2730   1561 D7            push a
2731   1562 11            mov a, b
2732   1563 FD 2E 61 00   mov32 cb, $00000061
2732   1567 00 00 
2733   1569 60            sub a, b
2734   156A 27            mov b, a
2735   156B 11            mov a, b
2736   156C FD 2E 41 00   mov32 cb, $00000041
2736   1570 00 00 
2737   1572 56            add b, a
2738   1573 E4            pop a
2739   1574             ; --- END TERMS
2740   1574 F9            leave
2741   1575 09            ret
2742   1576 0A 84 15      jmp _if47_exit
2743   1579             _if47_else:
2744   1579             ; return ch; 
2745   1579 FA 05 00      lea d, [bp + 5] ; $ch
2746   157C 32            mov bl, [d]
2747   157D A7 00         mov bh, 0
2748   157F 38 00 00      mov c, 0
2749   1582 F9            leave
2750   1583 09            ret
2751   1584             _if47_exit:
2752   1584 F9            leave
2753   1585 09            ret
2754   1586             
2755   1586             print_unsigned:
2756   1586 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2757   1589             ; char digits[5]; 
2758   1589 52 05 00      sub sp, 5
2759   158C             ; int i; 
2760   158C 52 02 00      sub sp, 2
2761   158F             ; i = 0; 
2762   158F FA FA FF      lea d, [bp + -6] ; $i
2763   1592 DA            push d
2764   1593 FD 2E 00 00   mov32 cb, $00000000
2764   1597 00 00 
2765   1599 E7            pop d
2766   159A FD 43         mov [d], b
2767   159C             ; if(num == 0){ 
2768   159C             _if48_cond:
2769   159C FA 05 00      lea d, [bp + 5] ; $num
2770   159F 2A            mov b, [d]
2771   15A0 38 00 00      mov c, 0
2772   15A3             ; --- START RELATIONAL
2773   15A3 D7            push a
2774   15A4 11            mov a, b
2775   15A5 FD 2E 00 00   mov32 cb, $00000000
2775   15A9 00 00 
2776   15AB B0            cmp a, b
2777   15AC FD 71         seq ; ==
2778   15AE E4            pop a
2779   15AF             ; --- END RELATIONAL
2780   15AF C0 00 00      cmp b, 0
2781   15B2 C6 C7 15      je _if48_exit
2782   15B5             _if48_TRUE:
2783   15B5             ; putchar('0'); 
2784   15B5             ; --- START FUNCTION CALL
2785   15B5 FD 2E 30 00   mov32 cb, $00000030
2785   15B9 00 00 
2786   15BB DD            push bl
2787   15BC 07 96 16      call putchar
2788   15BF 51 01 00      add sp, 1
2789   15C2             ; --- END FUNCTION CALL
2790   15C2             ; return; 
2791   15C2 F9            leave
2792   15C3 09            ret
2793   15C4 0A C7 15      jmp _if48_exit
2794   15C7             _if48_exit:
2795   15C7             ; while (num > 0) { 
2796   15C7             _while49_cond:
2797   15C7 FA 05 00      lea d, [bp + 5] ; $num
2798   15CA 2A            mov b, [d]
2799   15CB 38 00 00      mov c, 0
2800   15CE             ; --- START RELATIONAL
2801   15CE D7            push a
2802   15CF 11            mov a, b
2803   15D0 FD 2E 00 00   mov32 cb, $00000000
2803   15D4 00 00 
2804   15D6 B0            cmp a, b
2805   15D7 FD 81         sgu ; > (unsigned)
2806   15D9 E4            pop a
2807   15DA             ; --- END RELATIONAL
2808   15DA C0 00 00      cmp b, 0
2809   15DD C6 4C 16      je _while49_exit
2810   15E0             _while49_block:
2811   15E0             ; digits[i] = '0' + (num % 10); 
2812   15E0 FA FC FF      lea d, [bp + -4] ; $digits
2813   15E3 D7            push a
2814   15E4 DA            push d
2815   15E5 FA FA FF      lea d, [bp + -6] ; $i
2816   15E8 2A            mov b, [d]
2817   15E9 38 00 00      mov c, 0
2818   15EC E7            pop d
2819   15ED 5A            add d, b
2820   15EE E4            pop a
2821   15EF DA            push d
2822   15F0 FD 2E 30 00   mov32 cb, $00000030
2822   15F4 00 00 
2823   15F6             ; --- START TERMS
2824   15F6 D7            push a
2825   15F7 11            mov a, b
2826   15F8 FA 05 00      lea d, [bp + 5] ; $num
2827   15FB 2A            mov b, [d]
2828   15FC 38 00 00      mov c, 0
2829   15FF             ; --- START FACTORS
2830   15FF D7            push a
2831   1600 FD D8         push g
2832   1602 11            mov a, b
2833   1603 FD 7A         mov g, c
2834   1605 FD 2E 0A 00   mov32 cb, $0000000a
2834   1609 00 00 
2835   160B AE            div a, b ; 
2836   160C 11            mov a, b
2837   160D FD 38         mov c, g
2838   160F 27            mov b, a
2839   1610 FD F1         pop g
2840   1612 E4            pop a
2841   1613             ; --- END FACTORS
2842   1613 56            add b, a
2843   1614 E4            pop a
2844   1615             ; --- END TERMS
2845   1615 E7            pop d
2846   1616 FD 3E         mov [d], bl
2847   1618             ; num = num / 10; 
2848   1618 FA 05 00      lea d, [bp + 5] ; $num
2849   161B DA            push d
2850   161C FA 05 00      lea d, [bp + 5] ; $num
2851   161F 2A            mov b, [d]
2852   1620 38 00 00      mov c, 0
2853   1623             ; --- START FACTORS
2854   1623 D7            push a
2855   1624 FD D8         push g
2856   1626 11            mov a, b
2857   1627 FD 7A         mov g, c
2858   1629 FD 2E 0A 00   mov32 cb, $0000000a
2858   162D 00 00 
2859   162F AE            div a, b
2860   1630 FD 38         mov c, g
2861   1632 27            mov b, a
2862   1633 FD F1         pop g
2863   1635 E4            pop a
2864   1636             ; --- END FACTORS
2865   1636 E7            pop d
2866   1637 FD 43         mov [d], b
2867   1639             ; i++; 
2868   1639 FA FA FF      lea d, [bp + -6] ; $i
2869   163C 2A            mov b, [d]
2870   163D 38 00 00      mov c, 0
2871   1640 11            mov a, b
2872   1641 FD 77         inc b
2873   1643 FA FA FF      lea d, [bp + -6] ; $i
2874   1646 FD 43         mov [d], b
2875   1648 27            mov b, a
2876   1649 0A C7 15      jmp _while49_cond
2877   164C             _while49_exit:
2878   164C             ; while (i > 0) { 
2879   164C             _while56_cond:
2880   164C FA FA FF      lea d, [bp + -6] ; $i
2881   164F 2A            mov b, [d]
2882   1650 38 00 00      mov c, 0
2883   1653             ; --- START RELATIONAL
2884   1653 D7            push a
2885   1654 11            mov a, b
2886   1655 FD 2E 00 00   mov32 cb, $00000000
2886   1659 00 00 
2887   165B B0            cmp a, b
2888   165C FD 7F         sgt ; >
2889   165E E4            pop a
2890   165F             ; --- END RELATIONAL
2891   165F C0 00 00      cmp b, 0
2892   1662 C6 94 16      je _while56_exit
2893   1665             _while56_block:
2894   1665             ; i--; 
2895   1665 FA FA FF      lea d, [bp + -6] ; $i
2896   1668 2A            mov b, [d]
2897   1669 38 00 00      mov c, 0
2898   166C 11            mov a, b
2899   166D FD 7D         dec b
2900   166F FA FA FF      lea d, [bp + -6] ; $i
2901   1672 FD 43         mov [d], b
2902   1674 27            mov b, a
2903   1675             ; putchar(digits[i]); 
2904   1675             ; --- START FUNCTION CALL
2905   1675 FA FC FF      lea d, [bp + -4] ; $digits
2906   1678 D7            push a
2907   1679 DA            push d
2908   167A FA FA FF      lea d, [bp + -6] ; $i
2909   167D 2A            mov b, [d]
2910   167E 38 00 00      mov c, 0
2911   1681 E7            pop d
2912   1682 5A            add d, b
2913   1683 E4            pop a
2914   1684 32            mov bl, [d]
2915   1685 A7 00         mov bh, 0
2916   1687 38 00 00      mov c, 0
2917   168A DD            push bl
2918   168B 07 96 16      call putchar
2919   168E 51 01 00      add sp, 1
2920   1691             ; --- END FUNCTION CALL
2921   1691 0A 4C 16      jmp _while56_cond
2922   1694             _while56_exit:
2923   1694 F9            leave
2924   1695 09            ret
2925   1696             
2926   1696             putchar:
2927   1696 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2928   1699             ; --- BEGIN INLINE ASM SEGMENT
2929   1699 FA 05 00      lea d, [bp + 5] ; $c
2930   169C 1E            mov al, [d]
2931   169D 23            mov ah, al
2932   169E 19 00         mov al, 0
2933   16A0 05 03         syscall sys_io      
2934   16A2             ; --- END INLINE ASM SEGMENT
2935   16A2 F9            leave
2936   16A3 09            ret
2937   16A4             
2938   16A4             scann:
2939   16A4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2940   16A7             ; int m; 
2941   16A7 52 02 00      sub sp, 2
2942   16AA             ; --- BEGIN INLINE ASM SEGMENT
2943   16AA F8 08 00      enter 8
2944   16AD E2            push si
2945   16AE D8            push b
2946   16AF D9            push c
2947   16B0 DA            push d
2948   16B1 FA F9 FF      lea d, [bp +- 7]
2949   16B4 07 0A 17      call _gets_scann
2950   16B7 07 F0 16      call _strlen_scann      
2951   16BA 7E            dec c
2952   16BB FD 4E         mov si, d
2953   16BD 12            mov a, c
2954   16BE FD 99         shl a
2955   16C0 3B 00 17      mov d, table_power_scann
2956   16C3 59            add d, a
2957   16C4 38 00 00      mov c, 0
2958   16C7             mul_loop_scann:
2959   16C7 F6            lodsb      
2960   16C8 B9 00         cmp al, 0
2961   16CA C6 DD 16      je mul_exit_scann
2962   16CD 6F 30         sub al, $30    
2963   16CF 22 00         mov ah, 0
2964   16D1 2A            mov b, [d]
2965   16D2 AC            mul a, b      
2966   16D3 11            mov a, b
2967   16D4 28            mov b, c
2968   16D5 54            add a, b
2969   16D6 39            mov c, a
2970   16D7 63 02 00      sub d, 2
2971   16DA 0A C7 16      jmp mul_loop_scann
2972   16DD             mul_exit_scann:
2973   16DD 12            mov a, c
2974   16DE E7            pop d
2975   16DF E6            pop c
2976   16E0 E5            pop b
2977   16E1 EF            pop si
2978   16E2 F9            leave
2979   16E3 FA FF FF      lea d, [bp + -1] ; $m
2980   16E6 43            mov [d], a
2981   16E7             ; --- END INLINE ASM SEGMENT
2982   16E7             ; return m; 
2983   16E7 FA FF FF      lea d, [bp + -1] ; $m
2984   16EA 2A            mov b, [d]
2985   16EB 38 00 00      mov c, 0
2986   16EE F9            leave
2987   16EF 09            ret
2988   16F0             ; --- BEGIN INLINE ASM SEGMENT
2989   16F0             _strlen_scann:
2990   16F0 DA            push d
2991   16F1 38 00 00      mov c, 0
2992   16F4             _strlen_L1_scann:
2993   16F4 BD 00         cmp byte [d], 0
2994   16F6 C6 FE 16      je _strlen_ret_scann
2995   16F9 79            inc d
2996   16FA 78            inc c
2997   16FB 0A F4 16      jmp _strlen_L1_scann
2998   16FE             _strlen_ret_scann:
2999   16FE E7            pop d
3000   16FF 09            ret
3001   1700             table_power_scann:
3002   1700 01 00       .dw 1
3003   1702 0A 00       .dw 10
3004   1704 64 00       .dw 100
3005   1706 E8 03       .dw 1000
3006   1708 10 27       .dw 10000
3007   170A             _gets_scann:
3008   170A D7            push a
3009   170B DA            push d
3010   170C             _gets_loop_scann:
3011   170C 19 01         mov al, 1
3012   170E 05 03         syscall sys_io      
3013   1710 B9 00         cmp al, 0        
3014   1712 C6 0C 17      je _gets_loop_scann      
3015   1715 76 1B         cmp ah, 27
3016   1717 C6 38 17      je _gets_ansi_esc_scann
3017   171A 76 0A         cmp ah, $0A        
3018   171C C6 A3 17      je _gets_end_scann
3019   171F 76 0D         cmp ah, $0D        
3020   1721 C6 A3 17      je _gets_end_scann
3021   1724 76 5C         cmp ah, $5C        
3022   1726 C6 64 17      je _gets_escape_scann
3023   1729 76 08         cmp ah, $08      
3024   172B C6 34 17      je _gets_backspace_scann
3025   172E 1A            mov al, ah
3026   172F 3E            mov [d], al
3027   1730 79            inc d
3028   1731 0A 0C 17      jmp _gets_loop_scann
3029   1734             _gets_backspace_scann:
3030   1734 7F            dec d
3031   1735 0A 0C 17      jmp _gets_loop_scann
3032   1738             _gets_ansi_esc_scann:
3033   1738 19 01         mov al, 1
3034   173A 05 03         syscall sys_io        
3035   173C B9 00         cmp al, 0          
3036   173E C6 38 17      je _gets_ansi_esc_scann    
3037   1741 76 5B         cmp ah, '['
3038   1743 C7 0C 17      jne _gets_loop_scann
3039   1746             _gets_ansi_esc_2_scann:
3040   1746 19 01         mov al, 1
3041   1748 05 03         syscall sys_io          
3042   174A B9 00         cmp al, 0            
3043   174C C6 46 17      je _gets_ansi_esc_2_scann  
3044   174F 76 44         cmp ah, 'D'
3045   1751 C6 5C 17      je _gets_left_arrow_scann
3046   1754 76 43         cmp ah, 'C'
3047   1756 C6 60 17      je _gets_right_arrow_scann
3048   1759 0A 0C 17      jmp _gets_loop_scann
3049   175C             _gets_left_arrow_scann:
3050   175C 7F            dec d
3051   175D 0A 0C 17      jmp _gets_loop_scann
3052   1760             _gets_right_arrow_scann:
3053   1760 79            inc d
3054   1761 0A 0C 17      jmp _gets_loop_scann
3055   1764             _gets_escape_scann:
3056   1764 19 01         mov al, 1
3057   1766 05 03         syscall sys_io      
3058   1768 B9 00         cmp al, 0        
3059   176A C6 64 17      je _gets_escape_scann      
3060   176D 76 6E         cmp ah, 'n'
3061   176F C6 8E 17      je _gets_LF_scann
3062   1772 76 72         cmp ah, 'r'
3063   1774 C6 95 17      je _gets_CR_scann
3064   1777 76 30         cmp ah, '0'
3065   1779 C6 9C 17      je _gets_NULL_scann
3066   177C 76 5C         cmp ah, $5C  
3067   177E C6 87 17      je _gets_slash_scann
3068   1781 1A            mov al, ah        
3069   1782 3E            mov [d], al
3070   1783 79            inc d
3071   1784 0A 0C 17      jmp _gets_loop_scann
3072   1787             _gets_slash_scann:
3073   1787 19 5C         mov al, $5C
3074   1789 3E            mov [d], al
3075   178A 79            inc d
3076   178B 0A 0C 17      jmp _gets_loop_scann
3077   178E             _gets_LF_scann:
3078   178E 19 0A         mov al, $0A
3079   1790 3E            mov [d], al
3080   1791 79            inc d
3081   1792 0A 0C 17      jmp _gets_loop_scann
3082   1795             _gets_CR_scann:
3083   1795 19 0D         mov al, $0D
3084   1797 3E            mov [d], al
3085   1798 79            inc d
3086   1799 0A 0C 17      jmp _gets_loop_scann
3087   179C             _gets_NULL_scann:
3088   179C 19 00         mov al, $00
3089   179E 3E            mov [d], al
3090   179F 79            inc d
3091   17A0 0A 0C 17      jmp _gets_loop_scann
3092   17A3             _gets_end_scann:
3093   17A3 19 00         mov al, 0
3094   17A5 3E            mov [d], al        
3095   17A6 E7            pop d
3096   17A7 E4            pop a
3097   17A8 09            ret
3098   17A9             ; --- END INLINE ASM SEGMENT
3099   17A9 F9            leave
3100   17AA 09            ret
3101   17AB             
3102   17AB             exit:
3103   17AB F8 00 00      enter 0 ; (push bp; mov bp, sp)
3104   17AE             ; --- BEGIN INLINE ASM SEGMENT
3105   17AE 05 0B         syscall sys_terminate_proc
3106   17B0             ; --- END INLINE ASM SEGMENT
3107   17B0 F9            leave
3108   17B1 09            ret
3109   17B2             ; --- END TEXT SEGMENT
3110   17B2             
3111   17B2             ; --- BEGIN DATA SEGMENT
3112   17B2 00 00       _arrows: .fill 2, 0
3113   17B4 00 00       _debug: .dw 0
3114   17B6 1D 00       _rand_val: .dw 29
3115   17B8 01 00       _rand_inc: .dw 1
3116   17BA 00 00 00 00 _loc_data: .fill 12, 0
3116   17BE 00 00 00 00 
3116   17C2 00 00 00 00 
3117   17C6 00 00       _finished: .fill 2, 0
3118   17C8             _cave_data: 
3119   17C8 00 00       .dw 
3120   17CA 00 00       .dw 
3121   17CC 01 00 04 00 .dw $1,$4,$7,$0,$2,$9,$1,$3,$b,$2,$4,$d,$0,$3,$5,$4,$6,$e,$5,$7,$10,$0,$6,$8,$7,$9,$11,$1,$8,$a,
3121   17D0 07 00 00 00 
3121   17D4 02 00 09 00 
3121   17D8 01 00 03 00 
3121   17DC 0B 00 02 00 
3121   17E0 04 00 0D 00 
3121   17E4 00 00 03 00 
3121   17E8 05 00 04 00 
3121   17EC 06 00 0E 00 
3121   17F0 05 00 07 00 
3121   17F4 10 00 00 00 
3121   17F8 06 00 08 00 
3121   17FC 07 00 09 00 
3121   1800 11 00 01 00 
3121   1804 08 00 0A 00 
3122   1808 00 00       .dw 
3123   180A 00 00       .dw 
3124   180C 09 00 0B 00 .dw $9,$b,$12,$2,$a,$c,$b,$d,$13,$3,$c,$e,$5,$d,$f,$e,$10,$13,$6,$f,$11,$8,$10,$12,$a,$11,$13,$c,$f,$12,
3124   1810 12 00 02 00 
3124   1814 0A 00 0C 00 
3124   1818 0B 00 0D 00 
3124   181C 13 00 03 00 
3124   1820 0C 00 0E 00 
3124   1824 05 00 0D 00 
3124   1828 0F 00 0E 00 
3124   182C 10 00 13 00 
3124   1830 06 00 0F 00 
3124   1834 11 00 08 00 
3124   1838 10 00 12 00 
3124   183C 0A 00 11 00 
3124   1840 13 00 0C 00 
3124   1844 0F 00 12 00 
3125   1848 00 00       .dw 
3126   184A 00 00       .dw 
3127   184C 49 4E 53 54 _s0: .db "INSTRUCTIONS (Y-N): ", 0
3127   1850 52 55 43 54 
3127   1854 49 4F 4E 53 
3127   1858 20 28 59 2D 
3127   185C 4E 29 3A 20 
3127   1860 00 
3128   1861 4E 45 57 20 _s1: .db "NEW GAME (Y-N): ", 0
3128   1865 47 41 4D 45 
3128   1869 20 28 59 2D 
3128   186D 4E 29 3A 20 
3128   1871 00 
3129   1872 57 65 6C 63 _s2: .db "Welcome to 'hunt the wumpus'\n", 0
3129   1876 6F 6D 65 20 
3129   187A 74 6F 20 27 
3129   187E 68 75 6E 74 
3129   1882 20 74 68 65 
3129   1886 20 77 75 6D 
3129   188A 70 75 73 27 
3129   188E 0A 00 
3130   1890 54 68 65 20 _s3: .db "The wumpus lives in a cave of 20 rooms. Each room\n", 0
3130   1894 77 75 6D 70 
3130   1898 75 73 20 6C 
3130   189C 69 76 65 73 
3130   18A0 20 69 6E 20 
3130   18A4 61 20 63 61 
3130   18A8 76 65 20 6F 
3130   18AC 66 20 32 30 
3130   18B0 20 72 6F 6F 
3130   18B4 6D 73 2E 20 
3130   18B8 45 61 63 68 
3130   18BC 20 72 6F 6F 
3130   18C0 6D 0A 00 
3131   18C3 68 61 73 20 _s4: .db "has 3 tunnels leading to other rooms.\n", 0
3131   18C7 33 20 74 75 
3131   18CB 6E 6E 65 6C 
3131   18CF 73 20 6C 65 
3131   18D3 61 64 69 6E 
3131   18D7 67 20 74 6F 
3131   18DB 20 6F 74 68 
3131   18DF 65 72 20 72 
3131   18E3 6F 6F 6D 73 
3131   18E7 2E 0A 00 
3132   18EA 4C 6F 6F 6B _s5: .db "Look at a dodecahedron to see how this works.\n", 0
3132   18EE 20 61 74 20 
3132   18F2 61 20 64 6F 
3132   18F6 64 65 63 61 
3132   18FA 68 65 64 72 
3132   18FE 6F 6E 20 74 
3132   1902 6F 20 73 65 
3132   1906 65 20 68 6F 
3132   190A 77 20 74 68 
3132   190E 69 73 20 77 
3132   1912 6F 72 6B 73 
3132   1916 2E 0A 00 
3133   1919 0A 00       _s6: .db "\n", 0
3134   191B 20 48 61 7A _s7: .db " Hazards:\n", 0
3134   191F 61 72 64 73 
3134   1923 3A 0A 00 
3135   1926 20 42 6F 74 _s8: .db " Bottomless pits: Two rooms have bottomless pits in them\n", 0
3135   192A 74 6F 6D 6C 
3135   192E 65 73 73 20 
3135   1932 70 69 74 73 
3135   1936 3A 20 54 77 
3135   193A 6F 20 72 6F 
3135   193E 6F 6D 73 20 
3135   1942 68 61 76 65 
3135   1946 20 62 6F 74 
3135   194A 74 6F 6D 6C 
3135   194E 65 73 73 20 
3135   1952 70 69 74 73 
3135   1956 20 69 6E 20 
3135   195A 74 68 65 6D 
3135   195E 0A 00 
3136   1960 20 49 66 20 _s9: .db " If you go there, you fall into the pit (& lose!)\n", 0
3136   1964 79 6F 75 20 
3136   1968 67 6F 20 74 
3136   196C 68 65 72 65 
3136   1970 2C 20 79 6F 
3136   1974 75 20 66 61 
3136   1978 6C 6C 20 69 
3136   197C 6E 74 6F 20 
3136   1980 74 68 65 20 
3136   1984 70 69 74 20 
3136   1988 28 26 20 6C 
3136   198C 6F 73 65 21 
3136   1990 29 0A 00 
3137   1993 20 53 55 50 _s10: .db " SUPER BATS     : TWO OTHER ROOMS HAVE SUPER BATS. IF YOU\n", 0
3137   1997 45 52 20 42 
3137   199B 41 54 53 20 
3137   199F 20 20 20 20 
3137   19A3 3A 20 54 57 
3137   19A7 4F 20 4F 54 
3137   19AB 48 45 52 20 
3137   19AF 52 4F 4F 4D 
3137   19B3 53 20 48 41 
3137   19B7 56 45 20 53 
3137   19BB 55 50 45 52 
3137   19BF 20 42 41 54 
3137   19C3 53 2E 20 49 
3137   19C7 46 20 59 4F 
3137   19CB 55 0A 00 
3138   19CE 20 47 4F 20 _s11: .db " GO THERE, A BAT GRABS YOU AND TAKES YOU TO SOME OTHER\n", 0
3138   19D2 54 48 45 52 
3138   19D6 45 2C 20 41 
3138   19DA 20 42 41 54 
3138   19DE 20 47 52 41 
3138   19E2 42 53 20 59 
3138   19E6 4F 55 20 41 
3138   19EA 4E 44 20 54 
3138   19EE 41 4B 45 53 
3138   19F2 20 59 4F 55 
3138   19F6 20 54 4F 20 
3138   19FA 53 4F 4D 45 
3138   19FE 20 4F 54 48 
3138   1A02 45 52 0A 00 
3139   1A06 20 52 4F 4F _s12: .db " ROOM AT RANDOM. (WHICH MAY BE TROUBLESOME)\n\n", 0
3139   1A0A 4D 20 41 54 
3139   1A0E 20 52 41 4E 
3139   1A12 44 4F 4D 2E 
3139   1A16 20 28 57 48 
3139   1A1A 49 43 48 20 
3139   1A1E 4D 41 59 20 
3139   1A22 42 45 20 54 
3139   1A26 52 4F 55 42 
3139   1A2A 4C 45 53 4F 
3139   1A2E 4D 45 29 0A 
3139   1A32 0A 00 
3140   1A34 20 57 55 4D _s13: .db " WUMPUS:\n", 0
3140   1A38 50 55 53 3A 
3140   1A3C 0A 00 
3141   1A3E 20 54 48 45 _s14: .db " THE WUMPUS IS NOT BOTHERED BY HAZARDS (HE HAS SUCKER\n", 0
3141   1A42 20 57 55 4D 
3141   1A46 50 55 53 20 
3141   1A4A 49 53 20 4E 
3141   1A4E 4F 54 20 42 
3141   1A52 4F 54 48 45 
3141   1A56 52 45 44 20 
3141   1A5A 42 59 20 48 
3141   1A5E 41 5A 41 52 
3141   1A62 44 53 20 28 
3141   1A66 48 45 20 48 
3141   1A6A 41 53 20 53 
3141   1A6E 55 43 4B 45 
3141   1A72 52 0A 00 
3142   1A75 20 46 45 45 _s15: .db " FEET AND IS TOO BIG FOR A BAT TO LIFT).  USUALLY\n", 0
3142   1A79 54 20 41 4E 
3142   1A7D 44 20 49 53 
3142   1A81 20 54 4F 4F 
3142   1A85 20 42 49 47 
3142   1A89 20 46 4F 52 
3142   1A8D 20 41 20 42 
3142   1A91 41 54 20 54 
3142   1A95 4F 20 4C 49 
3142   1A99 46 54 29 2E 
3142   1A9D 20 20 55 53 
3142   1AA1 55 41 4C 4C 
3142   1AA5 59 0A 00 
3143   1AA8 20 48 45 20 _s16: .db " HE IS ASLEEP.  TWO THINGS WAKE HIM UP: YOU SHOOTING AN\n", 0
3143   1AAC 49 53 20 41 
3143   1AB0 53 4C 45 45 
3143   1AB4 50 2E 20 20 
3143   1AB8 54 57 4F 20 
3143   1ABC 54 48 49 4E 
3143   1AC0 47 53 20 57 
3143   1AC4 41 4B 45 20 
3143   1AC8 48 49 4D 20 
3143   1ACC 55 50 3A 20 
3143   1AD0 59 4F 55 20 
3143   1AD4 53 48 4F 4F 
3143   1AD8 54 49 4E 47 
3143   1ADC 20 41 4E 0A 
3143   1AE0 00 
3144   1AE1 20 41 52 52 _s17: .db " ARROW OR YOU ENTERING HIS ROOM.\n", 0
3144   1AE5 4F 57 20 4F 
3144   1AE9 52 20 59 4F 
3144   1AED 55 20 45 4E 
3144   1AF1 54 45 52 49 
3144   1AF5 4E 47 20 48 
3144   1AF9 49 53 20 52 
3144   1AFD 4F 4F 4D 2E 
3144   1B01 0A 00 
3145   1B03 20 49 46 20 _s18: .db " IF THE WUMPUS WAKES HE MOVES (P=.75) ONE ROOM\n", 0
3145   1B07 54 48 45 20 
3145   1B0B 57 55 4D 50 
3145   1B0F 55 53 20 57 
3145   1B13 41 4B 45 53 
3145   1B17 20 48 45 20 
3145   1B1B 4D 4F 56 45 
3145   1B1F 53 20 28 50 
3145   1B23 3D 2E 37 35 
3145   1B27 29 20 4F 4E 
3145   1B2B 45 20 52 4F 
3145   1B2F 4F 4D 0A 00 
3146   1B33 20 4F 52 20 _s19: .db " OR STAYS STILL (P=.25).  AFTER THAT, IF HE IS WHERE YOU\n", 0
3146   1B37 53 54 41 59 
3146   1B3B 53 20 53 54 
3146   1B3F 49 4C 4C 20 
3146   1B43 28 50 3D 2E 
3146   1B47 32 35 29 2E 
3146   1B4B 20 20 41 46 
3146   1B4F 54 45 52 20 
3146   1B53 54 48 41 54 
3146   1B57 2C 20 49 46 
3146   1B5B 20 48 45 20 
3146   1B5F 49 53 20 57 
3146   1B63 48 45 52 45 
3146   1B67 20 59 4F 55 
3146   1B6B 0A 00 
3147   1B6D 20 41 52 45 _s20: .db " ARE, HE EATS YOU UP AND YOU LOSE!\n", 0
3147   1B71 2C 20 48 45 
3147   1B75 20 45 41 54 
3147   1B79 53 20 59 4F 
3147   1B7D 55 20 55 50 
3147   1B81 20 41 4E 44 
3147   1B85 20 59 4F 55 
3147   1B89 20 4C 4F 53 
3147   1B8D 45 21 0A 00 
3148   1B91 20 59 4F 55 _s21: .db " YOU:\n", 0
3148   1B95 3A 0A 00 
3149   1B98 20 45 41 43 _s22: .db " EACH TURN YOU MAY MOVE OR SHOOT A CROOKED ARROW\n", 0
3149   1B9C 48 20 54 55 
3149   1BA0 52 4E 20 59 
3149   1BA4 4F 55 20 4D 
3149   1BA8 41 59 20 4D 
3149   1BAC 4F 56 45 20 
3149   1BB0 4F 52 20 53 
3149   1BB4 48 4F 4F 54 
3149   1BB8 20 41 20 43 
3149   1BBC 52 4F 4F 4B 
3149   1BC0 45 44 20 41 
3149   1BC4 52 52 4F 57 
3149   1BC8 0A 00 
3150   1BCA 20 4D 4F 56 _s23: .db " MOVING:  YOU CAN MOVE ONE ROOM (THRU ONE TUNNEL)\n", 0
3150   1BCE 49 4E 47 3A 
3150   1BD2 20 20 59 4F 
3150   1BD6 55 20 43 41 
3150   1BDA 4E 20 4D 4F 
3150   1BDE 56 45 20 4F 
3150   1BE2 4E 45 20 52 
3150   1BE6 4F 4F 4D 20 
3150   1BEA 28 54 48 52 
3150   1BEE 55 20 4F 4E 
3150   1BF2 45 20 54 55 
3150   1BF6 4E 4E 45 4C 
3150   1BFA 29 0A 00 
3151   1BFD 20 41 52 52 _s24: .db " ARROWS:  YOU HAVE 5 ARROWS.  YOU LOSE WHEN YOU RUN OUT\n", 0
3151   1C01 4F 57 53 3A 
3151   1C05 20 20 59 4F 
3151   1C09 55 20 48 41 
3151   1C0D 56 45 20 35 
3151   1C11 20 41 52 52 
3151   1C15 4F 57 53 2E 
3151   1C19 20 20 59 4F 
3151   1C1D 55 20 4C 4F 
3151   1C21 53 45 20 57 
3151   1C25 48 45 4E 20 
3151   1C29 59 4F 55 20 
3151   1C2D 52 55 4E 20 
3151   1C31 4F 55 54 0A 
3151   1C35 00 
3152   1C36 20 45 41 43 _s25: .db " EACH ARROW CAN GO FROM 1 TO 5 ROOMS. YOU AIM BY TELLING\n", 0
3152   1C3A 48 20 41 52 
3152   1C3E 52 4F 57 20 
3152   1C42 43 41 4E 20 
3152   1C46 47 4F 20 46 
3152   1C4A 52 4F 4D 20 
3152   1C4E 31 20 54 4F 
3152   1C52 20 35 20 52 
3152   1C56 4F 4F 4D 53 
3152   1C5A 2E 20 59 4F 
3152   1C5E 55 20 41 49 
3152   1C62 4D 20 42 59 
3152   1C66 20 54 45 4C 
3152   1C6A 4C 49 4E 47 
3152   1C6E 0A 00 
3153   1C70 20 20 20 54 _s26: .db "   THE COMPUTER THE ROOM#S YOU WANT THE ARROW TO GO TO.\n", 0
3153   1C74 48 45 20 43 
3153   1C78 4F 4D 50 55 
3153   1C7C 54 45 52 20 
3153   1C80 54 48 45 20 
3153   1C84 52 4F 4F 4D 
3153   1C88 23 53 20 59 
3153   1C8C 4F 55 20 57 
3153   1C90 41 4E 54 20 
3153   1C94 54 48 45 20 
3153   1C98 41 52 52 4F 
3153   1C9C 57 20 54 4F 
3153   1CA0 20 47 4F 20 
3153   1CA4 54 4F 2E 0A 
3153   1CA8 00 
3154   1CA9 20 20 20 49 _s27: .db "   IF THE ARROW CAN'T GO THAT WAY (IF NO TUNNEL) IT MOVES\n", 0
3154   1CAD 46 20 54 48 
3154   1CB1 45 20 41 52 
3154   1CB5 52 4F 57 20 
3154   1CB9 43 41 4E 27 
3154   1CBD 54 20 47 4F 
3154   1CC1 20 54 48 41 
3154   1CC5 54 20 57 41 
3154   1CC9 59 20 28 49 
3154   1CCD 46 20 4E 4F 
3154   1CD1 20 54 55 4E 
3154   1CD5 4E 45 4C 29 
3154   1CD9 20 49 54 20 
3154   1CDD 4D 4F 56 45 
3154   1CE1 53 0A 
3155   1CE3 20 20 20 41 _s28: .db "   AT RANDOM TO THE NEXT ROOM.\n", 0
3155   1CE7 54 20 52 41 
3155   1CEB 4E 44 4F 4D 
3155   1CEF 20 54 4F 20 
3155   1CF3 54 48 45 20 
3155   1CF7 4E 45 58 54 
3155   1CFB 20 52 4F 4F 
3155   1CFF 4D 2E 0A 00 
3156   1D03 20 20 20 20 _s29: .db "     IF THE ARROW HITS THE WUMPUS, YOU WIN.\n", 0
3156   1D07 20 49 46 20 
3156   1D0B 54 48 45 20 
3156   1D0F 41 52 52 4F 
3156   1D13 57 20 48 49 
3156   1D17 54 53 20 54 
3156   1D1B 48 45 20 57 
3156   1D1F 55 4D 50 55 
3156   1D23 53 2C 20 59 
3156   1D27 4F 55 20 57 
3156   1D2B 49 4E 2E 0A 
3156   1D2F 00 
3157   1D30 20 20 20 20 _s30: .db "     IF THE ARROW HITS YOU, YOU LOSE.\n", 0
3157   1D34 20 49 46 20 
3157   1D38 54 48 45 20 
3157   1D3C 41 52 52 4F 
3157   1D40 57 20 48 49 
3157   1D44 54 53 20 59 
3157   1D48 4F 55 2C 20 
3157   1D4C 59 4F 55 20 
3157   1D50 4C 4F 53 45 
3157   1D54 2E 0A 00 
3158   1D57 20 57 41 52 _s31: .db " WARNINGS:\n", 0
3158   1D5B 4E 49 4E 47 
3158   1D5F 53 3A 0A 00 
3159   1D63 20 57 48 45 _s32: .db " WHEN YOU ARE ONE ROOM AWAY FROM A WUMPUS OR HAZARD,\n", 0
3159   1D67 4E 20 59 4F 
3159   1D6B 55 20 41 52 
3159   1D6F 45 20 4F 4E 
3159   1D73 45 20 52 4F 
3159   1D77 4F 4D 20 41 
3159   1D7B 57 41 59 20 
3159   1D7F 46 52 4F 4D 
3159   1D83 20 41 20 57 
3159   1D87 55 4D 50 55 
3159   1D8B 53 20 4F 52 
3159   1D8F 20 48 41 5A 
3159   1D93 41 52 44 2C 
3159   1D97 0A 00 
3160   1D99 20 54 48 45 _s33: .db " THE COMPUTER SAYS:\n", 0
3160   1D9D 20 43 4F 4D 
3160   1DA1 50 55 54 45 
3160   1DA5 52 20 53 41 
3160   1DA9 59 53 3A 0A 
3160   1DAD 00 
3161   1DAE 20 57 55 4D _s34: .db " WUMPUS:  'I SMELL A WUMPUS'\n", 0
3161   1DB2 50 55 53 3A 
3161   1DB6 20 20 27 49 
3161   1DBA 20 53 4D 45 
3161   1DBE 4C 4C 20 41 
3161   1DC2 20 57 55 4D 
3161   1DC6 50 55 53 27 
3161   1DCA 0A 00 
3162   1DCC 20 42 41 54 _s35: .db " BAT   :  'BATS NEARBY'\n", 0
3162   1DD0 20 20 20 3A 
3162   1DD4 20 20 27 42 
3162   1DD8 41 54 53 20 
3162   1DDC 4E 45 41 52 
3162   1DE0 42 59 27 0A 
3162   1DE4 00 
3163   1DE5 20 50 49 54 _s36: .db " PIT   :  'I FEEL A DRAFT'\n", 0
3163   1DE9 20 20 20 3A 
3163   1DED 20 20 27 49 
3163   1DF1 20 46 45 45 
3163   1DF5 4C 20 41 20 
3163   1DF9 44 52 41 46 
3163   1DFD 54 27 0A 00 
3164   1E01 49 20 53 4D _s37: .db "I SMELL A WUMPUS!\n", 0
3164   1E05 45 4C 4C 20 
3164   1E09 41 20 57 55 
3164   1E0D 4D 50 55 53 
3164   1E11 21 0A 00 
3165   1E14 49 20 46 45 _s38: .db "I FEEL A DRAFT\n", 0
3165   1E18 45 4C 20 41 
3165   1E1C 20 44 52 41 
3165   1E20 46 54 0A 00 
3166   1E24 42 41 54 53 _s39: .db "BATS NEARBY!\n", 0
3166   1E28 20 4E 45 41 
3166   1E2C 52 42 59 21 
3166   1E30 0A 00 
3167   1E32 59 4F 55 20 _s40: .db "YOU ARE IN ROOM ", 0
3167   1E36 41 52 45 20 
3167   1E3A 49 4E 20 52 
3167   1E3E 4F 4F 4D 20 
3167   1E42 00 
3168   1E43 54 55 4E 4E _s41: .db "TUNNELS LEAD TO ", 0
3168   1E47 45 4C 53 20 
3168   1E4B 4C 45 41 44 
3168   1E4F 20 54 4F 20 
3168   1E53 00 
3169   1E54 2C 20 00    _s42: .db ", ", 0
3170   1E57 0A 0A 00    _s43: .db "\n\n", 0
3171   1E5A 53 48 4F 4F _s44: .db "SHOOT OR MOVE (S-M): ", 0
3171   1E5E 54 20 4F 52 
3171   1E62 20 4D 4F 56 
3171   1E66 45 20 28 53 
3171   1E6A 2D 4D 29 3A 
3171   1E6E 20 00 
3172   1E70 54 53 4B 20 _s45: .db "TSK TSK TSK - WUMPUS GOT YOU!\n", 0
3172   1E74 54 53 4B 20 
3172   1E78 54 53 4B 20 
3172   1E7C 2D 20 57 55 
3172   1E80 4D 50 55 53 
3172   1E84 20 47 4F 54 
3172   1E88 20 59 4F 55 
3172   1E8C 21 0A 00 
3173   1E8F 0A 4E 55 4D _s46: .db "\nNUMBER OF ROOMS (1-5): ", 0
3173   1E93 42 45 52 20 
3173   1E97 4F 46 20 52 
3173   1E9B 4F 4F 4D 53 
3173   1E9F 20 28 31 2D 
3173   1EA3 35 29 3A 20 
3173   1EA7 00 
3174   1EA8 52 4F 4F 4D _s47: .db "ROOM #", 0
3174   1EAC 20 23 00 
3175   1EAF 41 52 52 4F _s48: .db "ARROWS AREN'T THAT CROOKED - TRY ANOTHER ROOM\n", 0
3175   1EB3 57 53 20 41 
3175   1EB7 52 45 4E 27 
3175   1EBB 54 20 54 48 
3175   1EBF 41 54 20 43 
3175   1EC3 52 4F 4F 4B 
3175   1EC7 45 44 20 2D 
3175   1ECB 20 54 52 59 
3175   1ECF 20 41 4E 4F 
3175   1ED3 54 48 45 52 
3175   1ED7 20 52 4F 4F 
3175   1EDB 4D 0A 
3176   1EDD 41 48 41 21 _s49: .db "AHA! YOU GOT THE WUMPUS!\n", 0
3176   1EE1 20 59 4F 55 
3176   1EE5 20 47 4F 54 
3176   1EE9 20 54 48 45 
3176   1EED 20 57 55 4D 
3176   1EF1 50 55 53 21 
3176   1EF5 0A 00 
3177   1EF7 4F 55 43 48 _s50: .db "OUCH! ARROW GOT YOU!\n", 0
3177   1EFB 21 20 41 52 
3177   1EFF 52 4F 57 20 
3177   1F03 47 4F 54 20 
3177   1F07 59 4F 55 21 
3177   1F0B 0A 00 
3178   1F0D 4D 49 53 53 _s51: .db "MISSED\n", 0
3178   1F11 45 44 0A 00 
3179   1F15 0A 57 48 45 _s52: .db "\nWHERE TO: ", 0
3179   1F19 52 45 20 54 
3179   1F1D 4F 3A 20 00 
3180   1F21 4E 4F 54 20 _s53: .db "NOT POSSIBLE\n", 0
3180   1F25 50 4F 53 53 
3180   1F29 49 42 4C 45 
3180   1F2D 0A 00 
3181   1F2F 5A 41 50 2D _s54: .db "ZAP--SUPER BAT SNATCH! ELSEWHEREVILLE FOR YOU!\n", 0
3181   1F33 2D 53 55 50 
3181   1F37 45 52 20 42 
3181   1F3B 41 54 20 53 
3181   1F3F 4E 41 54 43 
3181   1F43 48 21 20 45 
3181   1F47 4C 53 45 57 
3181   1F4B 48 45 52 45 
3181   1F4F 56 49 4C 4C 
3181   1F53 45 20 46 4F 
3181   1F57 52 20 59 4F 
3181   1F5B 55 21 0A 00 
3182   1F5F 2E 2E 2E 20 _s55: .db "... OOPS! BUMPED A WUMPUS!\n", 0
3182   1F63 4F 4F 50 53 
3182   1F67 21 20 42 55 
3182   1F6B 4D 50 45 44 
3182   1F6F 20 41 20 57 
3182   1F73 55 4D 50 55 
3182   1F77 53 21 0A 00 
3183   1F7B 59 59 59 59 _s56: .db "YYYYIIIIEEEE . . . FELL IN PIT\n", 0
3183   1F7F 49 49 49 49 
3183   1F83 45 45 45 45 
3183   1F87 20 2E 20 2E 
3183   1F8B 20 2E 20 46 
3183   1F8F 45 4C 4C 20 
3183   1F93 49 4E 20 50 
3183   1F97 49 54 0A 00 
3184   1F9B 48 55 4E 54 _s57: .db "HUNT THE WUMPUS\n", 0
3184   1F9F 20 54 48 45 
3184   1FA3 20 57 55 4D 
3184   1FA7 50 55 53 0A 
3184   1FAB 00 
3185   1FAC 57 75 6D 70 _s58: .db "Wumpus is at ", 0
3185   1FB0 75 73 20 69 
3185   1FB4 73 20 61 74 
3185   1FB8 20 00 
3186   1FBA 2C 20 70 69 _s59: .db ", pits at ", 0
3186   1FBE 74 73 20 61 
3186   1FC2 74 20 00 
3187   1FC5 20 26 20 00 _s60: .db " & ", 0
3188   1FC9 2C 20 62 61 _s61: .db ", bats at ", 0
3188   1FCD 74 73 20 61 
3188   1FD1 74 20 00 
3189   1FD4 48 45 45 20 _s62: .db "HEE HEE HEE - THE WUMPUS'LL GET YOU NEXT TIME!!\n", 0
3189   1FD8 48 45 45 20 
3189   1FDC 48 45 45 20 
3189   1FE0 2D 20 54 48 
3189   1FE4 45 20 57 55 
3189   1FE8 4D 50 55 53 
3189   1FEC 27 4C 4C 20 
3189   1FF0 47 45 54 20 
3189   1FF4 59 4F 55 20 
3189   1FF8 4E 45 58 54 
3189   1FFC 20 54 49 4D 
3189   2000 45 21 21 0A 
3190   2004 48 41 20 48 _s63: .db "HA HA HA - YOU LOSE!\n", 0
3190   2008 41 20 48 41 
3190   200C 20 2D 20 59 
3190   2010 4F 55 20 4C 
3190   2014 4F 53 45 21 
3190   2018 0A 00 
3191   201A             
3192   201A 1C 20       _heap_top: .dw _heap
3193   201C 00          _heap: .db 0
3194   201D             ; --- END DATA SEGMENT
3195   201D             
3196   201D             .end
tasm: Number of errors = 0
