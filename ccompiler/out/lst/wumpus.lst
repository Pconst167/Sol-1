0001   0000             ; --- FILENAME: programs/wumpus
0002   0000             .include "lib/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $c 
0011   0408 52 02 00      sub sp, 2
0012   040B             ;; c = getlet("INSTRUCTIONS (Y-N): "); 
0013   040B FA FF FF      lea d, [bp + -1] ; $c
0014   040E DA            push d
0015   040F 26 BB 23      mov b, __s0 ; "INSTRUCTIONS (Y-N): "
0016   0412 FD AB         swp b
0017   0414 D8            push b
0018   0415 07 85 15      call getlet
0019   0418 51 02 00      add sp, 2
0020   041B E7            pop d
0021   041C FD 43         mov [d], b
0022   041E             ;; if (c == 'Y') { 
0023   041E             _if1_cond:
0024   041E FA FF FF      lea d, [bp + -1] ; $c
0025   0421 2A            mov b, [d]
0026   0422             ; START RELATIONAL
0027   0422 D7            push a
0028   0423 11            mov a, b
0029   0424 26 59 00      mov b, $59
0030   0427 B0            cmp a, b
0031   0428 FD 71         seq ; ==
0032   042A E4            pop a
0033   042B             ; END RELATIONAL
0034   042B C0 00 00      cmp b, 0
0035   042E C6 37 04      je _if1_exit
0036   0431             _if1_true:
0037   0431             ;; print_instructions(); 
0038   0431 07 CE 15      call print_instructions
0039   0434 0A 37 04      jmp _if1_exit
0040   0437             _if1_exit:
0041   0437             ;; do {  
0042   0437             _do2_block:
0043   0437             ;; game_setup(); 
0044   0437 07 5D 20      call game_setup
0045   043A             ;; game_play(); 
0046   043A 07 77 21      call game_play
0047   043D             ;; } while (getlet("NEW GAME (Y-N)") != 'N'); 
0048   043D             _do2_cond:
0049   043D 26 D0 23      mov b, __s1 ; "NEW GAME (Y-N)"
0050   0440 FD AB         swp b
0051   0442 D8            push b
0052   0443 07 85 15      call getlet
0053   0446 51 02 00      add sp, 2
0054   0449             ; START RELATIONAL
0055   0449 D7            push a
0056   044A 11            mov a, b
0057   044B 26 4E 00      mov b, $4e
0058   044E B0            cmp a, b
0059   044F FD 72         sneq ; !=
0060   0451 E4            pop a
0061   0452             ; END RELATIONAL
0062   0452 C0 01 00      cmp b, 1
0063   0455 C6 37 04      je _do2_block
0064   0458             _do2_exit:
0065   0458             ;; return 0; 
0066   0458 26 00 00      mov b, $0
0067   045B F9            leave
0068   045C 05 0B         syscall sys_terminate_proc
0069   045E             
0070   045E             strcpy:
0071   045E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0072   0461             ; $psrc 
0073   0461             ; $pdest 
0074   0461 52 04 00      sub sp, 4
0075   0464             ;; psrc = src; 
0076   0464 FA FF FF      lea d, [bp + -1] ; $psrc
0077   0467 DA            push d
0078   0468 FA 05 00      lea d, [bp + 5] ; $src
0079   046B 2A            mov b, [d]
0080   046C E7            pop d
0081   046D FD 43         mov [d], b
0082   046F             ;; pdest = dest; 
0083   046F FA FD FF      lea d, [bp + -3] ; $pdest
0084   0472 DA            push d
0085   0473 FA 07 00      lea d, [bp + 7] ; $dest
0086   0476 2A            mov b, [d]
0087   0477 E7            pop d
0088   0478 FD 43         mov [d], b
0089   047A             ;; while(*psrc) *pdest++ = *psrc++; 
0090   047A             _while3_cond:
0091   047A FA FF FF      lea d, [bp + -1] ; $psrc
0092   047D 2A            mov b, [d]
0093   047E 74            mov d, b
0094   047F 32            mov bl, [d]
0095   0480 A7 00         mov bh, 0
0096   0482 C0 00 00      cmp b, 0
0097   0485 C6 B1 04      je _while3_exit
0098   0488             _while3_block:
0099   0488             ;; *pdest++ = *psrc++; 
0100   0488 FA FD FF      lea d, [bp + -3] ; $pdest
0101   048B 2A            mov b, [d]
0102   048C FD 79         mov g, b
0103   048E FD 77         inc b
0104   0490 FA FD FF      lea d, [bp + -3] ; $pdest
0105   0493 FD 43         mov [d], b
0106   0495 FD 27         mov b, g
0107   0497 D8            push b
0108   0498 FA FF FF      lea d, [bp + -1] ; $psrc
0109   049B 2A            mov b, [d]
0110   049C FD 79         mov g, b
0111   049E FD 77         inc b
0112   04A0 FA FF FF      lea d, [bp + -1] ; $psrc
0113   04A3 FD 43         mov [d], b
0114   04A5 FD 27         mov b, g
0115   04A7 74            mov d, b
0116   04A8 32            mov bl, [d]
0117   04A9 A7 00         mov bh, 0
0118   04AB E7            pop d
0119   04AC FD 3E         mov [d], bl
0120   04AE 0A 7A 04      jmp _while3_cond
0121   04B1             _while3_exit:
0122   04B1             ;; *pdest = '\0'; 
0123   04B1 FA FD FF      lea d, [bp + -3] ; $pdest
0124   04B4 2A            mov b, [d]
0125   04B5 D8            push b
0126   04B6 26 00 00      mov b, $0
0127   04B9 E7            pop d
0128   04BA FD 3E         mov [d], bl
0129   04BC F9            leave
0130   04BD 09            ret
0131   04BE             
0132   04BE             strcmp:
0133   04BE F8 00 00      enter 0 ; (push bp; mov bp, sp)
0134   04C1             ;; while (*s1 && (*s1 == *s2)) { 
0135   04C1             _while4_cond:
0136   04C1 FA 07 00      lea d, [bp + 7] ; $s1
0137   04C4 2A            mov b, [d]
0138   04C5 74            mov d, b
0139   04C6 32            mov bl, [d]
0140   04C7 A7 00         mov bh, 0
0141   04C9 D7            push a
0142   04CA 11            mov a, b
0143   04CB FA 07 00      lea d, [bp + 7] ; $s1
0144   04CE 2A            mov b, [d]
0145   04CF 74            mov d, b
0146   04D0 32            mov bl, [d]
0147   04D1 A7 00         mov bh, 0
0148   04D3             ; START RELATIONAL
0149   04D3 D7            push a
0150   04D4 11            mov a, b
0151   04D5 FA 05 00      lea d, [bp + 5] ; $s2
0152   04D8 2A            mov b, [d]
0153   04D9 74            mov d, b
0154   04DA 32            mov bl, [d]
0155   04DB A7 00         mov bh, 0
0156   04DD B0            cmp a, b
0157   04DE FD 71         seq ; ==
0158   04E0 E4            pop a
0159   04E1             ; END RELATIONAL
0160   04E1 FD A7         sand a, b ; &&
0161   04E3 E4            pop a
0162   04E4 C0 00 00      cmp b, 0
0163   04E7 C6 0B 05      je _while4_exit
0164   04EA             _while4_block:
0165   04EA             ;; s1++; 
0166   04EA FA 07 00      lea d, [bp + 7] ; $s1
0167   04ED 2A            mov b, [d]
0168   04EE FD 79         mov g, b
0169   04F0 FD 77         inc b
0170   04F2 FA 07 00      lea d, [bp + 7] ; $s1
0171   04F5 FD 43         mov [d], b
0172   04F7 FD 27         mov b, g
0173   04F9             ;; s2++; 
0174   04F9 FA 05 00      lea d, [bp + 5] ; $s2
0175   04FC 2A            mov b, [d]
0176   04FD FD 79         mov g, b
0177   04FF FD 77         inc b
0178   0501 FA 05 00      lea d, [bp + 5] ; $s2
0179   0504 FD 43         mov [d], b
0180   0506 FD 27         mov b, g
0181   0508 0A C1 04      jmp _while4_cond
0182   050B             _while4_exit:
0183   050B             ;; return *s1 - *s2; 
0184   050B FA 07 00      lea d, [bp + 7] ; $s1
0185   050E 2A            mov b, [d]
0186   050F 74            mov d, b
0187   0510 32            mov bl, [d]
0188   0511 A7 00         mov bh, 0
0189   0513             ; START TERMS
0190   0513 D7            push a
0191   0514 11            mov a, b
0192   0515 FA 05 00      lea d, [bp + 5] ; $s2
0193   0518 2A            mov b, [d]
0194   0519 74            mov d, b
0195   051A 32            mov bl, [d]
0196   051B A7 00         mov bh, 0
0197   051D 60            sub a, b
0198   051E 27            mov b, a
0199   051F E4            pop a
0200   0520             ; END TERMS
0201   0520 F9            leave
0202   0521 09            ret
0203   0522             
0204   0522             strcat:
0205   0522 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0206   0525             ; $dest_len 
0207   0525             ; $i 
0208   0525 52 04 00      sub sp, 4
0209   0528             ;; dest_len = strlen(dest); 
0210   0528 FA FF FF      lea d, [bp + -1] ; $dest_len
0211   052B DA            push d
0212   052C FA 07 00      lea d, [bp + 7] ; $dest
0213   052F 2A            mov b, [d]
0214   0530 FD AB         swp b
0215   0532 D8            push b
0216   0533 07 D8 05      call strlen
0217   0536 51 02 00      add sp, 2
0218   0539 E7            pop d
0219   053A FD 43         mov [d], b
0220   053C             ;; for (i = 0; src[i] != 0; i=i+1) { 
0221   053C             _for5_init:
0222   053C FA FD FF      lea d, [bp + -3] ; $i
0223   053F DA            push d
0224   0540 26 00 00      mov b, $0
0225   0543 E7            pop d
0226   0544 FD 43         mov [d], b
0227   0546             _for5_cond:
0228   0546 FA 05 00      lea d, [bp + 5] ; $src
0229   0549 FD 2A         mov d, [d]
0230   054B D7            push a
0231   054C DA            push d
0232   054D FA FD FF      lea d, [bp + -3] ; $i
0233   0550 2A            mov b, [d]
0234   0551 E7            pop d
0235   0552 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0236   0556 E4            pop a
0237   0557 32            mov bl, [d]
0238   0558 A7 00         mov bh, 0
0239   055A             ; START RELATIONAL
0240   055A D7            push a
0241   055B 11            mov a, b
0242   055C 26 00 00      mov b, $0
0243   055F B0            cmp a, b
0244   0560 FD 72         sneq ; !=
0245   0562 E4            pop a
0246   0563             ; END RELATIONAL
0247   0563 C0 00 00      cmp b, 0
0248   0566 C6 B1 05      je _for5_exit
0249   0569             _for5_block:
0250   0569             ;; dest[dest_len + i] = src[i]; 
0251   0569 FA 07 00      lea d, [bp + 7] ; $dest
0252   056C FD 2A         mov d, [d]
0253   056E D7            push a
0254   056F DA            push d
0255   0570 FA FF FF      lea d, [bp + -1] ; $dest_len
0256   0573 2A            mov b, [d]
0257   0574             ; START TERMS
0258   0574 D7            push a
0259   0575 11            mov a, b
0260   0576 FA FD FF      lea d, [bp + -3] ; $i
0261   0579 2A            mov b, [d]
0262   057A 54            add a, b
0263   057B 27            mov b, a
0264   057C E4            pop a
0265   057D             ; END TERMS
0266   057D E7            pop d
0267   057E FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0268   0582 E4            pop a
0269   0583 DA            push d
0270   0584 FA 05 00      lea d, [bp + 5] ; $src
0271   0587 FD 2A         mov d, [d]
0272   0589 D7            push a
0273   058A DA            push d
0274   058B FA FD FF      lea d, [bp + -3] ; $i
0275   058E 2A            mov b, [d]
0276   058F E7            pop d
0277   0590 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0278   0594 E4            pop a
0279   0595 32            mov bl, [d]
0280   0596 A7 00         mov bh, 0
0281   0598 E7            pop d
0282   0599 FD 3E         mov [d], bl
0283   059B             _for5_update:
0284   059B FA FD FF      lea d, [bp + -3] ; $i
0285   059E DA            push d
0286   059F FA FD FF      lea d, [bp + -3] ; $i
0287   05A2 2A            mov b, [d]
0288   05A3             ; START TERMS
0289   05A3 D7            push a
0290   05A4 11            mov a, b
0291   05A5 26 01 00      mov b, $1
0292   05A8 54            add a, b
0293   05A9 27            mov b, a
0294   05AA E4            pop a
0295   05AB             ; END TERMS
0296   05AB E7            pop d
0297   05AC FD 43         mov [d], b
0298   05AE 0A 46 05      jmp _for5_cond
0299   05B1             _for5_exit:
0300   05B1             ;; dest[dest_len + i] = 0; 
0301   05B1 FA 07 00      lea d, [bp + 7] ; $dest
0302   05B4 FD 2A         mov d, [d]
0303   05B6 D7            push a
0304   05B7 DA            push d
0305   05B8 FA FF FF      lea d, [bp + -1] ; $dest_len
0306   05BB 2A            mov b, [d]
0307   05BC             ; START TERMS
0308   05BC D7            push a
0309   05BD 11            mov a, b
0310   05BE FA FD FF      lea d, [bp + -3] ; $i
0311   05C1 2A            mov b, [d]
0312   05C2 54            add a, b
0313   05C3 27            mov b, a
0314   05C4 E4            pop a
0315   05C5             ; END TERMS
0316   05C5 E7            pop d
0317   05C6 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0318   05CA E4            pop a
0319   05CB DA            push d
0320   05CC 26 00 00      mov b, $0
0321   05CF E7            pop d
0322   05D0 FD 3E         mov [d], bl
0323   05D2             ;; return dest; 
0324   05D2 FA 07 00      lea d, [bp + 7] ; $dest
0325   05D5 2A            mov b, [d]
0326   05D6 F9            leave
0327   05D7 09            ret
0328   05D8             
0329   05D8             strlen:
0330   05D8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0331   05DB             ; $length 
0332   05DB 52 02 00      sub sp, 2
0333   05DE             ;; length = 0; 
0334   05DE FA FF FF      lea d, [bp + -1] ; $length
0335   05E1 DA            push d
0336   05E2 26 00 00      mov b, $0
0337   05E5 E7            pop d
0338   05E6 FD 43         mov [d], b
0339   05E8             ;; while (str[length] != 0) { 
0340   05E8             _while6_cond:
0341   05E8 FA 05 00      lea d, [bp + 5] ; $str
0342   05EB FD 2A         mov d, [d]
0343   05ED D7            push a
0344   05EE DA            push d
0345   05EF FA FF FF      lea d, [bp + -1] ; $length
0346   05F2 2A            mov b, [d]
0347   05F3 E7            pop d
0348   05F4 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0349   05F8 E4            pop a
0350   05F9 32            mov bl, [d]
0351   05FA A7 00         mov bh, 0
0352   05FC             ; START RELATIONAL
0353   05FC D7            push a
0354   05FD 11            mov a, b
0355   05FE 26 00 00      mov b, $0
0356   0601 B0            cmp a, b
0357   0602 FD 72         sneq ; !=
0358   0604 E4            pop a
0359   0605             ; END RELATIONAL
0360   0605 C0 00 00      cmp b, 0
0361   0608 C6 1D 06      je _while6_exit
0362   060B             _while6_block:
0363   060B             ;; length++; 
0364   060B FA FF FF      lea d, [bp + -1] ; $length
0365   060E 2A            mov b, [d]
0366   060F FD 79         mov g, b
0367   0611 FD 77         inc b
0368   0613 FA FF FF      lea d, [bp + -1] ; $length
0369   0616 FD 43         mov [d], b
0370   0618 FD 27         mov b, g
0371   061A 0A E8 05      jmp _while6_cond
0372   061D             _while6_exit:
0373   061D             ;; return length; 
0374   061D FA FF FF      lea d, [bp + -1] ; $length
0375   0620 2A            mov b, [d]
0376   0621 F9            leave
0377   0622 09            ret
0378   0623             
0379   0623             va_arg:
0380   0623 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0381   0626             ; $val 
0382   0626 52 02 00      sub sp, 2
0383   0629             ;; if(size == 1){ 
0384   0629             _if7_cond:
0385   0629 FA 05 00      lea d, [bp + 5] ; $size
0386   062C 2A            mov b, [d]
0387   062D             ; START RELATIONAL
0388   062D D7            push a
0389   062E 11            mov a, b
0390   062F 26 01 00      mov b, $1
0391   0632 B0            cmp a, b
0392   0633 FD 71         seq ; ==
0393   0635 E4            pop a
0394   0636             ; END RELATIONAL
0395   0636 C0 00 00      cmp b, 0
0396   0639 C6 55 06      je _if7_else
0397   063C             _if7_true:
0398   063C             ;; val = *(char*)arg->p; 
0399   063C FA FF FF      lea d, [bp + -1] ; $val
0400   063F DA            push d
0401   0640 FA 07 00      lea d, [bp + 7] ; $arg
0402   0643 FD 2A         mov d, [d]
0403   0645 58 00 00      add d, 0
0404   0648 FD 14         clb
0405   064A 2A            mov b, [d]
0406   064B 74            mov d, b
0407   064C 32            mov bl, [d]
0408   064D A7 00         mov bh, 0
0409   064F E7            pop d
0410   0650 FD 43         mov [d], b
0411   0652 0A 8B 06      jmp _if7_exit
0412   0655             _if7_else:
0413   0655             ;; if(size == 2){ 
0414   0655             _if8_cond:
0415   0655 FA 05 00      lea d, [bp + 5] ; $size
0416   0658 2A            mov b, [d]
0417   0659             ; START RELATIONAL
0418   0659 D7            push a
0419   065A 11            mov a, b
0420   065B 26 02 00      mov b, $2
0421   065E B0            cmp a, b
0422   065F FD 71         seq ; ==
0423   0661 E4            pop a
0424   0662             ; END RELATIONAL
0425   0662 C0 00 00      cmp b, 0
0426   0665 C6 7F 06      je _if8_else
0427   0668             _if8_true:
0428   0668             ;; val = *(int*)arg->p; 
0429   0668 FA FF FF      lea d, [bp + -1] ; $val
0430   066B DA            push d
0431   066C FA 07 00      lea d, [bp + 7] ; $arg
0432   066F FD 2A         mov d, [d]
0433   0671 58 00 00      add d, 0
0434   0674 FD 14         clb
0435   0676 2A            mov b, [d]
0436   0677 74            mov d, b
0437   0678 2A            mov b, [d]
0438   0679 E7            pop d
0439   067A FD 43         mov [d], b
0440   067C 0A 8B 06      jmp _if8_exit
0441   067F             _if8_else:
0442   067F             ;; print("Unknown type size in va_arg() call. Size needs to be either 1 or 2."); 
0443   067F 26 DF 23      mov b, __s2 ; "Unknown type size in va_arg() call. Size needs to be either 1 or 2."
0444   0682 FD AB         swp b
0445   0684 D8            push b
0446   0685 07 ED 0C      call print
0447   0688 51 02 00      add sp, 2
0448   068B             _if8_exit:
0449   068B             _if7_exit:
0450   068B             ;; arg->p = arg->p + size; 
0451   068B FA 07 00      lea d, [bp + 7] ; $arg
0452   068E FD 2A         mov d, [d]
0453   0690 58 00 00      add d, 0
0454   0693 FD 14         clb
0455   0695 DA            push d
0456   0696 FA 07 00      lea d, [bp + 7] ; $arg
0457   0699 FD 2A         mov d, [d]
0458   069B 58 00 00      add d, 0
0459   069E FD 14         clb
0460   06A0 2A            mov b, [d]
0461   06A1             ; START TERMS
0462   06A1 D7            push a
0463   06A2 11            mov a, b
0464   06A3 FA 05 00      lea d, [bp + 5] ; $size
0465   06A6 2A            mov b, [d]
0466   06A7 54            add a, b
0467   06A8 27            mov b, a
0468   06A9 E4            pop a
0469   06AA             ; END TERMS
0470   06AA E7            pop d
0471   06AB FD 43         mov [d], b
0472   06AD             ;; return val; 
0473   06AD FA FF FF      lea d, [bp + -1] ; $val
0474   06B0 2A            mov b, [d]
0475   06B1 F9            leave
0476   06B2 09            ret
0477   06B3             
0478   06B3             printf:
0479   06B3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0480   06B6             ; $p 
0481   06B6             ; $fp 
0482   06B6             ; $i 
0483   06B6 52 06 00      sub sp, 6
0484   06B9             ;; fp = format; 
0485   06B9 FA FD FF      lea d, [bp + -3] ; $fp
0486   06BC DA            push d
0487   06BD FA 05 00      lea d, [bp + 5] ; $format
0488   06C0 2A            mov b, [d]
0489   06C1 E7            pop d
0490   06C2 FD 43         mov [d], b
0491   06C4             ;; p = &format; 
0492   06C4 FA FF FF      lea d, [bp + -1] ; $p
0493   06C7 DA            push d
0494   06C8 FA 05 00      lea d, [bp + 5] ; $format
0495   06CB 2D            mov b, d
0496   06CC E7            pop d
0497   06CD FD 43         mov [d], b
0498   06CF             ;; for(;;){ 
0499   06CF             _for9_init:
0500   06CF             _for9_cond:
0501   06CF             _for9_block:
0502   06CF             ;; if(!*fp) break; 
0503   06CF             _if10_cond:
0504   06CF FA FD FF      lea d, [bp + -3] ; $fp
0505   06D2 2A            mov b, [d]
0506   06D3 74            mov d, b
0507   06D4 32            mov bl, [d]
0508   06D5 A7 00         mov bh, 0
0509   06D7 C0 00 00      cmp b, 0
0510   06DA FD 71         seq ; !
0511   06DC C0 00 00      cmp b, 0
0512   06DF C6 E8 06      je _if10_exit
0513   06E2             _if10_true:
0514   06E2             ;; break; 
0515   06E2 0A 32 08      jmp _for9_exit ; for break
0516   06E5 0A E8 06      jmp _if10_exit
0517   06E8             _if10_exit:
0518   06E8             ;; if(*fp == '%'){ 
0519   06E8             _if11_cond:
0520   06E8 FA FD FF      lea d, [bp + -3] ; $fp
0521   06EB 2A            mov b, [d]
0522   06EC 74            mov d, b
0523   06ED 32            mov bl, [d]
0524   06EE A7 00         mov bh, 0
0525   06F0             ; START RELATIONAL
0526   06F0 D7            push a
0527   06F1 11            mov a, b
0528   06F2 26 25 00      mov b, $25
0529   06F5 B0            cmp a, b
0530   06F6 FD 71         seq ; ==
0531   06F8 E4            pop a
0532   06F9             ; END RELATIONAL
0533   06F9 C0 00 00      cmp b, 0
0534   06FC C6 11 08      je _if11_else
0535   06FF             _if11_true:
0536   06FF             ;; fp++; 
0537   06FF FA FD FF      lea d, [bp + -3] ; $fp
0538   0702 2A            mov b, [d]
0539   0703 FD 79         mov g, b
0540   0705 FD 77         inc b
0541   0707 FA FD FF      lea d, [bp + -3] ; $fp
0542   070A FD 43         mov [d], b
0543   070C FD 27         mov b, g
0544   070E             ;; switch(*fp){ 
0545   070E             _switch12_expr:
0546   070E FA FD FF      lea d, [bp + -3] ; $fp
0547   0711 2A            mov b, [d]
0548   0712 74            mov d, b
0549   0713 32            mov bl, [d]
0550   0714 A7 00         mov bh, 0
0551   0716             _switch12_comparisons:
0552   0716 C1 64         cmp bl, $64
0553   0718 C6 3A 07      je _switch12_case0
0554   071B C1 69         cmp bl, $69
0555   071D C6 3A 07      je _switch12_case1
0556   0720 C1 75         cmp bl, $75
0557   0722 C6 5F 07      je _switch12_case2
0558   0725 C1 78         cmp bl, $78
0559   0727 C6 84 07      je _switch12_case3
0560   072A C1 63         cmp bl, $63
0561   072C C6 A9 07      je _switch12_case4
0562   072F C1 73         cmp bl, $73
0563   0731 C6 CE 07      je _switch12_case5
0564   0734 0A F3 07      jmp _switch12_default
0565   0737 0A FF 07      jmp _switch12_exit
0566   073A             _switch12_case0:
0567   073A             _switch12_case1:
0568   073A             ;; p = p - 2; 
0569   073A FA FF FF      lea d, [bp + -1] ; $p
0570   073D DA            push d
0571   073E FA FF FF      lea d, [bp + -1] ; $p
0572   0741 2A            mov b, [d]
0573   0742             ; START TERMS
0574   0742 D7            push a
0575   0743 11            mov a, b
0576   0744 26 02 00      mov b, $2
0577   0747 60            sub a, b
0578   0748 27            mov b, a
0579   0749 E4            pop a
0580   074A             ; END TERMS
0581   074A E7            pop d
0582   074B FD 43         mov [d], b
0583   074D             ;; prints(*(int*)p); 
0584   074D FA FF FF      lea d, [bp + -1] ; $p
0585   0750 2A            mov b, [d]
0586   0751 74            mov d, b
0587   0752 2A            mov b, [d]
0588   0753 FD AB         swp b
0589   0755 D8            push b
0590   0756 07 C4 0A      call prints
0591   0759 51 02 00      add sp, 2
0592   075C             ;; break; 
0593   075C 0A FF 07      jmp _switch12_exit ; case break
0594   075F             _switch12_case2:
0595   075F             ;; p = p - 2; 
0596   075F FA FF FF      lea d, [bp + -1] ; $p
0597   0762 DA            push d
0598   0763 FA FF FF      lea d, [bp + -1] ; $p
0599   0766 2A            mov b, [d]
0600   0767             ; START TERMS
0601   0767 D7            push a
0602   0768 11            mov a, b
0603   0769 26 02 00      mov b, $2
0604   076C 60            sub a, b
0605   076D 27            mov b, a
0606   076E E4            pop a
0607   076F             ; END TERMS
0608   076F E7            pop d
0609   0770 FD 43         mov [d], b
0610   0772             ;; printu(*(unsigned int*)p); 
0611   0772 FA FF FF      lea d, [bp + -1] ; $p
0612   0775 2A            mov b, [d]
0613   0776 74            mov d, b
0614   0777 2A            mov b, [d]
0615   0778 FD AB         swp b
0616   077A D8            push b
0617   077B 07 B9 0B      call printu
0618   077E 51 02 00      add sp, 2
0619   0781             ;; break; 
0620   0781 0A FF 07      jmp _switch12_exit ; case break
0621   0784             _switch12_case3:
0622   0784             ;; p = p - 2; 
0623   0784 FA FF FF      lea d, [bp + -1] ; $p
0624   0787 DA            push d
0625   0788 FA FF FF      lea d, [bp + -1] ; $p
0626   078B 2A            mov b, [d]
0627   078C             ; START TERMS
0628   078C D7            push a
0629   078D 11            mov a, b
0630   078E 26 02 00      mov b, $2
0631   0791 60            sub a, b
0632   0792 27            mov b, a
0633   0793 E4            pop a
0634   0794             ; END TERMS
0635   0794 E7            pop d
0636   0795 FD 43         mov [d], b
0637   0797             ;; printx16(*(unsigned int*)p); 
0638   0797 FA FF FF      lea d, [bp + -1] ; $p
0639   079A 2A            mov b, [d]
0640   079B 74            mov d, b
0641   079C 2A            mov b, [d]
0642   079D FD AB         swp b
0643   079F D8            push b
0644   07A0 07 34 08      call printx16
0645   07A3 51 02 00      add sp, 2
0646   07A6             ;; break; 
0647   07A6 0A FF 07      jmp _switch12_exit ; case break
0648   07A9             _switch12_case4:
0649   07A9             ;; p = p - 2; 
0650   07A9 FA FF FF      lea d, [bp + -1] ; $p
0651   07AC DA            push d
0652   07AD FA FF FF      lea d, [bp + -1] ; $p
0653   07B0 2A            mov b, [d]
0654   07B1             ; START TERMS
0655   07B1 D7            push a
0656   07B2 11            mov a, b
0657   07B3 26 02 00      mov b, $2
0658   07B6 60            sub a, b
0659   07B7 27            mov b, a
0660   07B8 E4            pop a
0661   07B9             ; END TERMS
0662   07B9 E7            pop d
0663   07BA FD 43         mov [d], b
0664   07BC             ;; putchar(*(char*)p); 
0665   07BC FA FF FF      lea d, [bp + -1] ; $p
0666   07BF 2A            mov b, [d]
0667   07C0 74            mov d, b
0668   07C1 32            mov bl, [d]
0669   07C2 A7 00         mov bh, 0
0670   07C4 DD            push bl
0671   07C5 07 A5 0C      call putchar
0672   07C8 51 01 00      add sp, 1
0673   07CB             ;; break; 
0674   07CB 0A FF 07      jmp _switch12_exit ; case break
0675   07CE             _switch12_case5:
0676   07CE             ;; p = p - 2; 
0677   07CE FA FF FF      lea d, [bp + -1] ; $p
0678   07D1 DA            push d
0679   07D2 FA FF FF      lea d, [bp + -1] ; $p
0680   07D5 2A            mov b, [d]
0681   07D6             ; START TERMS
0682   07D6 D7            push a
0683   07D7 11            mov a, b
0684   07D8 26 02 00      mov b, $2
0685   07DB 60            sub a, b
0686   07DC 27            mov b, a
0687   07DD E4            pop a
0688   07DE             ; END TERMS
0689   07DE E7            pop d
0690   07DF FD 43         mov [d], b
0691   07E1             ;; print(*(char**)p); 
0692   07E1 FA FF FF      lea d, [bp + -1] ; $p
0693   07E4 2A            mov b, [d]
0694   07E5 74            mov d, b
0695   07E6 2A            mov b, [d]
0696   07E7 FD AB         swp b
0697   07E9 D8            push b
0698   07EA 07 ED 0C      call print
0699   07ED 51 02 00      add sp, 2
0700   07F0             ;; break; 
0701   07F0 0A FF 07      jmp _switch12_exit ; case break
0702   07F3             _switch12_default:
0703   07F3             ;; print("Error: Unknown argument type.\n"); 
0704   07F3 26 23 24      mov b, __s3 ; "Error: Unknown argument type.\n"
0705   07F6 FD AB         swp b
0706   07F8 D8            push b
0707   07F9 07 ED 0C      call print
0708   07FC 51 02 00      add sp, 2
0709   07FF             _switch12_exit:
0710   07FF             ;; fp++; 
0711   07FF FA FD FF      lea d, [bp + -3] ; $fp
0712   0802 2A            mov b, [d]
0713   0803 FD 79         mov g, b
0714   0805 FD 77         inc b
0715   0807 FA FD FF      lea d, [bp + -3] ; $fp
0716   080A FD 43         mov [d], b
0717   080C FD 27         mov b, g
0718   080E 0A 2F 08      jmp _if11_exit
0719   0811             _if11_else:
0720   0811             ;; putchar(*fp); 
0721   0811 FA FD FF      lea d, [bp + -3] ; $fp
0722   0814 2A            mov b, [d]
0723   0815 74            mov d, b
0724   0816 32            mov bl, [d]
0725   0817 A7 00         mov bh, 0
0726   0819 DD            push bl
0727   081A 07 A5 0C      call putchar
0728   081D 51 01 00      add sp, 1
0729   0820             ;; fp++; 
0730   0820 FA FD FF      lea d, [bp + -3] ; $fp
0731   0823 2A            mov b, [d]
0732   0824 FD 79         mov g, b
0733   0826 FD 77         inc b
0734   0828 FA FD FF      lea d, [bp + -3] ; $fp
0735   082B FD 43         mov [d], b
0736   082D FD 27         mov b, g
0737   082F             _if11_exit:
0738   082F             _for9_update:
0739   082F 0A CF 06      jmp _for9_cond
0740   0832             _for9_exit:
0741   0832 F9            leave
0742   0833 09            ret
0743   0834             
0744   0834             printx16:
0745   0834 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0746   0837             
0747   0837             ; --- BEGIN INLINE ASM BLOCK
0748   0837 FA 05 00      lea d, [bp + 5] ; $hex
0749   083A 2A            mov b, [d]
0750   083B 07 C4 10      call print_u16x
0751   083E             ; --- END INLINE ASM BLOCK
0752   083E             
0753   083E F9            leave
0754   083F 09            ret
0755   0840             
0756   0840             printx8:
0757   0840 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0758   0843             
0759   0843             ; --- BEGIN INLINE ASM BLOCK
0760   0843 FA 05 00      lea d, [bp + 5] ; $hex
0761   0846 32            mov bl, [d]
0762   0847 07 08 11      call print_u8x
0763   084A             ; --- END INLINE ASM BLOCK
0764   084A             
0765   084A F9            leave
0766   084B 09            ret
0767   084C             
0768   084C             hex_to_int:
0769   084C F8 00 00      enter 0 ; (push bp; mov bp, sp)
0770   084F             ; $value 
0771   084F 10 00 00      mov a, $0
0772   0852 45 FF FF      mov [bp + -1], a
0773   0855             ; $i 
0774   0855             ; $hex_char 
0775   0855             ; $len 
0776   0855 52 07 00      sub sp, 7
0777   0858             ;; len = strlen(hex_string); 
0778   0858 FA FA FF      lea d, [bp + -6] ; $len
0779   085B DA            push d
0780   085C FA 05 00      lea d, [bp + 5] ; $hex_string
0781   085F 2A            mov b, [d]
0782   0860 FD AB         swp b
0783   0862 D8            push b
0784   0863 07 D8 05      call strlen
0785   0866 51 02 00      add sp, 2
0786   0869 E7            pop d
0787   086A FD 43         mov [d], b
0788   086C             ;; for (i = 0; i < len; i++) { 
0789   086C             _for13_init:
0790   086C FA FD FF      lea d, [bp + -3] ; $i
0791   086F DA            push d
0792   0870 26 00 00      mov b, $0
0793   0873 E7            pop d
0794   0874 FD 43         mov [d], b
0795   0876             _for13_cond:
0796   0876 FA FD FF      lea d, [bp + -3] ; $i
0797   0879 2A            mov b, [d]
0798   087A             ; START RELATIONAL
0799   087A D7            push a
0800   087B 11            mov a, b
0801   087C FA FA FF      lea d, [bp + -6] ; $len
0802   087F 2A            mov b, [d]
0803   0880 B0            cmp a, b
0804   0881 FD 73         slt ; < 
0805   0883 E4            pop a
0806   0884             ; END RELATIONAL
0807   0884 C0 00 00      cmp b, 0
0808   0887 C6 8C 09      je _for13_exit
0809   088A             _for13_block:
0810   088A             ;; hex_char = hex_string[i]; 
0811   088A FA FC FF      lea d, [bp + -4] ; $hex_char
0812   088D DA            push d
0813   088E FA 05 00      lea d, [bp + 5] ; $hex_string
0814   0891 FD 2A         mov d, [d]
0815   0893 D7            push a
0816   0894 DA            push d
0817   0895 FA FD FF      lea d, [bp + -3] ; $i
0818   0898 2A            mov b, [d]
0819   0899 E7            pop d
0820   089A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0821   089E E4            pop a
0822   089F 32            mov bl, [d]
0823   08A0 A7 00         mov bh, 0
0824   08A2 E7            pop d
0825   08A3 FD 3E         mov [d], bl
0826   08A5             ;; if (hex_char >= 'a' && hex_char <= 'f')  
0827   08A5             _if14_cond:
0828   08A5 FA FC FF      lea d, [bp + -4] ; $hex_char
0829   08A8 32            mov bl, [d]
0830   08A9 A7 00         mov bh, 0
0831   08AB             ; START RELATIONAL
0832   08AB D7            push a
0833   08AC 11            mov a, b
0834   08AD 26 61 00      mov b, $61
0835   08B0 B0            cmp a, b
0836   08B1 FD 80         sge ; >=
0837   08B3 E4            pop a
0838   08B4             ; END RELATIONAL
0839   08B4 D7            push a
0840   08B5 11            mov a, b
0841   08B6 FA FC FF      lea d, [bp + -4] ; $hex_char
0842   08B9 32            mov bl, [d]
0843   08BA A7 00         mov bh, 0
0844   08BC             ; START RELATIONAL
0845   08BC D7            push a
0846   08BD 11            mov a, b
0847   08BE 26 66 00      mov b, $66
0848   08C1 B0            cmp a, b
0849   08C2 FD 74         sle ; <=
0850   08C4 E4            pop a
0851   08C5             ; END RELATIONAL
0852   08C5 FD A7         sand a, b ; &&
0853   08C7 E4            pop a
0854   08C8 C0 00 00      cmp b, 0
0855   08CB C6 FC 08      je _if14_else
0856   08CE             _if14_true:
0857   08CE             ;; value = (value * 16) + (hex_char - 'a' + 10); 
0858   08CE FA FF FF      lea d, [bp + -1] ; $value
0859   08D1 DA            push d
0860   08D2 FA FF FF      lea d, [bp + -1] ; $value
0861   08D5 2A            mov b, [d]
0862   08D6             ; START FACTORS
0863   08D6 D7            push a
0864   08D7 11            mov a, b
0865   08D8 26 10 00      mov b, $10
0866   08DB AC            mul a, b ; *
0867   08DC 11            mov a, b
0868   08DD 27            mov b, a
0869   08DE E4            pop a
0870   08DF             ; END FACTORS
0871   08DF             ; START TERMS
0872   08DF D7            push a
0873   08E0 11            mov a, b
0874   08E1 FA FC FF      lea d, [bp + -4] ; $hex_char
0875   08E4 32            mov bl, [d]
0876   08E5 A7 00         mov bh, 0
0877   08E7             ; START TERMS
0878   08E7 D7            push a
0879   08E8 11            mov a, b
0880   08E9 26 61 00      mov b, $61
0881   08EC 60            sub a, b
0882   08ED 26 0A 00      mov b, $a
0883   08F0 54            add a, b
0884   08F1 27            mov b, a
0885   08F2 E4            pop a
0886   08F3             ; END TERMS
0887   08F3 54            add a, b
0888   08F4 27            mov b, a
0889   08F5 E4            pop a
0890   08F6             ; END TERMS
0891   08F6 E7            pop d
0892   08F7 FD 43         mov [d], b
0893   08F9 0A 7A 09      jmp _if14_exit
0894   08FC             _if14_else:
0895   08FC             ;; if (hex_char >= 'A' && hex_char <= 'F')  
0896   08FC             _if15_cond:
0897   08FC FA FC FF      lea d, [bp + -4] ; $hex_char
0898   08FF 32            mov bl, [d]
0899   0900 A7 00         mov bh, 0
0900   0902             ; START RELATIONAL
0901   0902 D7            push a
0902   0903 11            mov a, b
0903   0904 26 41 00      mov b, $41
0904   0907 B0            cmp a, b
0905   0908 FD 80         sge ; >=
0906   090A E4            pop a
0907   090B             ; END RELATIONAL
0908   090B D7            push a
0909   090C 11            mov a, b
0910   090D FA FC FF      lea d, [bp + -4] ; $hex_char
0911   0910 32            mov bl, [d]
0912   0911 A7 00         mov bh, 0
0913   0913             ; START RELATIONAL
0914   0913 D7            push a
0915   0914 11            mov a, b
0916   0915 26 46 00      mov b, $46
0917   0918 B0            cmp a, b
0918   0919 FD 74         sle ; <=
0919   091B E4            pop a
0920   091C             ; END RELATIONAL
0921   091C FD A7         sand a, b ; &&
0922   091E E4            pop a
0923   091F C0 00 00      cmp b, 0
0924   0922 C6 53 09      je _if15_else
0925   0925             _if15_true:
0926   0925             ;; value = (value * 16) + (hex_char - 'A' + 10); 
0927   0925 FA FF FF      lea d, [bp + -1] ; $value
0928   0928 DA            push d
0929   0929 FA FF FF      lea d, [bp + -1] ; $value
0930   092C 2A            mov b, [d]
0931   092D             ; START FACTORS
0932   092D D7            push a
0933   092E 11            mov a, b
0934   092F 26 10 00      mov b, $10
0935   0932 AC            mul a, b ; *
0936   0933 11            mov a, b
0937   0934 27            mov b, a
0938   0935 E4            pop a
0939   0936             ; END FACTORS
0940   0936             ; START TERMS
0941   0936 D7            push a
0942   0937 11            mov a, b
0943   0938 FA FC FF      lea d, [bp + -4] ; $hex_char
0944   093B 32            mov bl, [d]
0945   093C A7 00         mov bh, 0
0946   093E             ; START TERMS
0947   093E D7            push a
0948   093F 11            mov a, b
0949   0940 26 41 00      mov b, $41
0950   0943 60            sub a, b
0951   0944 26 0A 00      mov b, $a
0952   0947 54            add a, b
0953   0948 27            mov b, a
0954   0949 E4            pop a
0955   094A             ; END TERMS
0956   094A 54            add a, b
0957   094B 27            mov b, a
0958   094C E4            pop a
0959   094D             ; END TERMS
0960   094D E7            pop d
0961   094E FD 43         mov [d], b
0962   0950 0A 7A 09      jmp _if15_exit
0963   0953             _if15_else:
0964   0953             ;; value = (value * 16) + (hex_char - '0'); 
0965   0953 FA FF FF      lea d, [bp + -1] ; $value
0966   0956 DA            push d
0967   0957 FA FF FF      lea d, [bp + -1] ; $value
0968   095A 2A            mov b, [d]
0969   095B             ; START FACTORS
0970   095B D7            push a
0971   095C 11            mov a, b
0972   095D 26 10 00      mov b, $10
0973   0960 AC            mul a, b ; *
0974   0961 11            mov a, b
0975   0962 27            mov b, a
0976   0963 E4            pop a
0977   0964             ; END FACTORS
0978   0964             ; START TERMS
0979   0964 D7            push a
0980   0965 11            mov a, b
0981   0966 FA FC FF      lea d, [bp + -4] ; $hex_char
0982   0969 32            mov bl, [d]
0983   096A A7 00         mov bh, 0
0984   096C             ; START TERMS
0985   096C D7            push a
0986   096D 11            mov a, b
0987   096E 26 30 00      mov b, $30
0988   0971 60            sub a, b
0989   0972 27            mov b, a
0990   0973 E4            pop a
0991   0974             ; END TERMS
0992   0974 54            add a, b
0993   0975 27            mov b, a
0994   0976 E4            pop a
0995   0977             ; END TERMS
0996   0977 E7            pop d
0997   0978 FD 43         mov [d], b
0998   097A             _if15_exit:
0999   097A             _if14_exit:
1000   097A             _for13_update:
1001   097A FA FD FF      lea d, [bp + -3] ; $i
1002   097D 2A            mov b, [d]
1003   097E FD 79         mov g, b
1004   0980 FD 77         inc b
1005   0982 FA FD FF      lea d, [bp + -3] ; $i
1006   0985 FD 43         mov [d], b
1007   0987 FD 27         mov b, g
1008   0989 0A 76 08      jmp _for13_cond
1009   098C             _for13_exit:
1010   098C             ;; return value; 
1011   098C FA FF FF      lea d, [bp + -1] ; $value
1012   098F 2A            mov b, [d]
1013   0990 F9            leave
1014   0991 09            ret
1015   0992             
1016   0992             atoi:
1017   0992 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1018   0995             ; $result 
1019   0995 10 00 00      mov a, $0
1020   0998 45 FF FF      mov [bp + -1], a
1021   099B             ; $sign 
1022   099B 10 01 00      mov a, $1
1023   099E 45 FD FF      mov [bp + -3], a
1024   09A1 52 04 00      sub sp, 4
1025   09A4             ;; while (*str == ' ') str++; 
1026   09A4             _while16_cond:
1027   09A4 FA 05 00      lea d, [bp + 5] ; $str
1028   09A7 2A            mov b, [d]
1029   09A8 74            mov d, b
1030   09A9 32            mov bl, [d]
1031   09AA A7 00         mov bh, 0
1032   09AC             ; START RELATIONAL
1033   09AC D7            push a
1034   09AD 11            mov a, b
1035   09AE 26 20 00      mov b, $20
1036   09B1 B0            cmp a, b
1037   09B2 FD 71         seq ; ==
1038   09B4 E4            pop a
1039   09B5             ; END RELATIONAL
1040   09B5 C0 00 00      cmp b, 0
1041   09B8 C6 CD 09      je _while16_exit
1042   09BB             _while16_block:
1043   09BB             ;; str++; 
1044   09BB FA 05 00      lea d, [bp + 5] ; $str
1045   09BE 2A            mov b, [d]
1046   09BF FD 79         mov g, b
1047   09C1 FD 77         inc b
1048   09C3 FA 05 00      lea d, [bp + 5] ; $str
1049   09C6 FD 43         mov [d], b
1050   09C8 FD 27         mov b, g
1051   09CA 0A A4 09      jmp _while16_cond
1052   09CD             _while16_exit:
1053   09CD             ;; if (*str == '-' || *str == '+') { 
1054   09CD             _if17_cond:
1055   09CD FA 05 00      lea d, [bp + 5] ; $str
1056   09D0 2A            mov b, [d]
1057   09D1 74            mov d, b
1058   09D2 32            mov bl, [d]
1059   09D3 A7 00         mov bh, 0
1060   09D5             ; START RELATIONAL
1061   09D5 D7            push a
1062   09D6 11            mov a, b
1063   09D7 26 2D 00      mov b, $2d
1064   09DA B0            cmp a, b
1065   09DB FD 71         seq ; ==
1066   09DD E4            pop a
1067   09DE             ; END RELATIONAL
1068   09DE D7            push a
1069   09DF 11            mov a, b
1070   09E0 FA 05 00      lea d, [bp + 5] ; $str
1071   09E3 2A            mov b, [d]
1072   09E4 74            mov d, b
1073   09E5 32            mov bl, [d]
1074   09E6 A7 00         mov bh, 0
1075   09E8             ; START RELATIONAL
1076   09E8 D7            push a
1077   09E9 11            mov a, b
1078   09EA 26 2B 00      mov b, $2b
1079   09ED B0            cmp a, b
1080   09EE FD 71         seq ; ==
1081   09F0 E4            pop a
1082   09F1             ; END RELATIONAL
1083   09F1 FD A8         sor a, b ; ||
1084   09F3 E4            pop a
1085   09F4 C0 00 00      cmp b, 0
1086   09F7 C6 32 0A      je _if17_exit
1087   09FA             _if17_true:
1088   09FA             ;; if (*str == '-') sign = -1; 
1089   09FA             _if18_cond:
1090   09FA FA 05 00      lea d, [bp + 5] ; $str
1091   09FD 2A            mov b, [d]
1092   09FE 74            mov d, b
1093   09FF 32            mov bl, [d]
1094   0A00 A7 00         mov bh, 0
1095   0A02             ; START RELATIONAL
1096   0A02 D7            push a
1097   0A03 11            mov a, b
1098   0A04 26 2D 00      mov b, $2d
1099   0A07 B0            cmp a, b
1100   0A08 FD 71         seq ; ==
1101   0A0A E4            pop a
1102   0A0B             ; END RELATIONAL
1103   0A0B C0 00 00      cmp b, 0
1104   0A0E C6 20 0A      je _if18_exit
1105   0A11             _if18_true:
1106   0A11             ;; sign = -1; 
1107   0A11 FA FD FF      lea d, [bp + -3] ; $sign
1108   0A14 DA            push d
1109   0A15 26 01 00      mov b, $1
1110   0A18 FD 97         neg b
1111   0A1A E7            pop d
1112   0A1B FD 43         mov [d], b
1113   0A1D 0A 20 0A      jmp _if18_exit
1114   0A20             _if18_exit:
1115   0A20             ;; str++; 
1116   0A20 FA 05 00      lea d, [bp + 5] ; $str
1117   0A23 2A            mov b, [d]
1118   0A24 FD 79         mov g, b
1119   0A26 FD 77         inc b
1120   0A28 FA 05 00      lea d, [bp + 5] ; $str
1121   0A2B FD 43         mov [d], b
1122   0A2D FD 27         mov b, g
1123   0A2F 0A 32 0A      jmp _if17_exit
1124   0A32             _if17_exit:
1125   0A32             ;; while (*str >= '0' && *str <= '9') { 
1126   0A32             _while19_cond:
1127   0A32 FA 05 00      lea d, [bp + 5] ; $str
1128   0A35 2A            mov b, [d]
1129   0A36 74            mov d, b
1130   0A37 32            mov bl, [d]
1131   0A38 A7 00         mov bh, 0
1132   0A3A             ; START RELATIONAL
1133   0A3A D7            push a
1134   0A3B 11            mov a, b
1135   0A3C 26 30 00      mov b, $30
1136   0A3F B0            cmp a, b
1137   0A40 FD 80         sge ; >=
1138   0A42 E4            pop a
1139   0A43             ; END RELATIONAL
1140   0A43 D7            push a
1141   0A44 11            mov a, b
1142   0A45 FA 05 00      lea d, [bp + 5] ; $str
1143   0A48 2A            mov b, [d]
1144   0A49 74            mov d, b
1145   0A4A 32            mov bl, [d]
1146   0A4B A7 00         mov bh, 0
1147   0A4D             ; START RELATIONAL
1148   0A4D D7            push a
1149   0A4E 11            mov a, b
1150   0A4F 26 39 00      mov b, $39
1151   0A52 B0            cmp a, b
1152   0A53 FD 74         sle ; <=
1153   0A55 E4            pop a
1154   0A56             ; END RELATIONAL
1155   0A56 FD A7         sand a, b ; &&
1156   0A58 E4            pop a
1157   0A59 C0 00 00      cmp b, 0
1158   0A5C C6 9A 0A      je _while19_exit
1159   0A5F             _while19_block:
1160   0A5F             ;; result = result * 10 + (*str - '0'); 
1161   0A5F FA FF FF      lea d, [bp + -1] ; $result
1162   0A62 DA            push d
1163   0A63 FA FF FF      lea d, [bp + -1] ; $result
1164   0A66 2A            mov b, [d]
1165   0A67             ; START FACTORS
1166   0A67 D7            push a
1167   0A68 11            mov a, b
1168   0A69 26 0A 00      mov b, $a
1169   0A6C AC            mul a, b ; *
1170   0A6D 11            mov a, b
1171   0A6E 27            mov b, a
1172   0A6F E4            pop a
1173   0A70             ; END FACTORS
1174   0A70             ; START TERMS
1175   0A70 D7            push a
1176   0A71 11            mov a, b
1177   0A72 FA 05 00      lea d, [bp + 5] ; $str
1178   0A75 2A            mov b, [d]
1179   0A76 74            mov d, b
1180   0A77 32            mov bl, [d]
1181   0A78 A7 00         mov bh, 0
1182   0A7A             ; START TERMS
1183   0A7A D7            push a
1184   0A7B 11            mov a, b
1185   0A7C 26 30 00      mov b, $30
1186   0A7F 60            sub a, b
1187   0A80 27            mov b, a
1188   0A81 E4            pop a
1189   0A82             ; END TERMS
1190   0A82 54            add a, b
1191   0A83 27            mov b, a
1192   0A84 E4            pop a
1193   0A85             ; END TERMS
1194   0A85 E7            pop d
1195   0A86 FD 43         mov [d], b
1196   0A88             ;; str++; 
1197   0A88 FA 05 00      lea d, [bp + 5] ; $str
1198   0A8B 2A            mov b, [d]
1199   0A8C FD 79         mov g, b
1200   0A8E FD 77         inc b
1201   0A90 FA 05 00      lea d, [bp + 5] ; $str
1202   0A93 FD 43         mov [d], b
1203   0A95 FD 27         mov b, g
1204   0A97 0A 32 0A      jmp _while19_cond
1205   0A9A             _while19_exit:
1206   0A9A             ;; return sign * result; 
1207   0A9A FA FD FF      lea d, [bp + -3] ; $sign
1208   0A9D 2A            mov b, [d]
1209   0A9E             ; START FACTORS
1210   0A9E D7            push a
1211   0A9F 11            mov a, b
1212   0AA0 FA FF FF      lea d, [bp + -1] ; $result
1213   0AA3 2A            mov b, [d]
1214   0AA4 AC            mul a, b ; *
1215   0AA5 11            mov a, b
1216   0AA6 27            mov b, a
1217   0AA7 E4            pop a
1218   0AA8             ; END FACTORS
1219   0AA8 F9            leave
1220   0AA9 09            ret
1221   0AAA             
1222   0AAA             gets:
1223   0AAA F8 00 00      enter 0 ; (push bp; mov bp, sp)
1224   0AAD             
1225   0AAD             ; --- BEGIN INLINE ASM BLOCK
1226   0AAD FA 05 00      lea d, [bp + 5] ; $s
1227   0AB0 15            mov a, [d]
1228   0AB1 3C            mov d, a
1229   0AB2 07 29 0F      call _gets
1230   0AB5             ; --- END INLINE ASM BLOCK
1231   0AB5             
1232   0AB5             ;; return strlen(s); 
1233   0AB5 FA 05 00      lea d, [bp + 5] ; $s
1234   0AB8 2A            mov b, [d]
1235   0AB9 FD AB         swp b
1236   0ABB D8            push b
1237   0ABC 07 D8 05      call strlen
1238   0ABF 51 02 00      add sp, 2
1239   0AC2 F9            leave
1240   0AC3 09            ret
1241   0AC4             
1242   0AC4             prints:
1243   0AC4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1244   0AC7             ; $digits 
1245   0AC7             ; $i 
1246   0AC7 10 00 00      mov a, $0
1247   0ACA 45 FA FF      mov [bp + -6], a
1248   0ACD 52 07 00      sub sp, 7
1249   0AD0             ;; if (num < 0) { 
1250   0AD0             _if20_cond:
1251   0AD0 FA 05 00      lea d, [bp + 5] ; $num
1252   0AD3 2A            mov b, [d]
1253   0AD4             ; START RELATIONAL
1254   0AD4 D7            push a
1255   0AD5 11            mov a, b
1256   0AD6 26 00 00      mov b, $0
1257   0AD9 B0            cmp a, b
1258   0ADA FD 73         slt ; < 
1259   0ADC E4            pop a
1260   0ADD             ; END RELATIONAL
1261   0ADD C0 00 00      cmp b, 0
1262   0AE0 C6 FD 0A      je _if20_else
1263   0AE3             _if20_true:
1264   0AE3             ;; putchar('-'); 
1265   0AE3 26 2D 00      mov b, $2d
1266   0AE6 DD            push bl
1267   0AE7 07 A5 0C      call putchar
1268   0AEA 51 01 00      add sp, 1
1269   0AED             ;; num = -num; 
1270   0AED FA 05 00      lea d, [bp + 5] ; $num
1271   0AF0 DA            push d
1272   0AF1 FA 05 00      lea d, [bp + 5] ; $num
1273   0AF4 2A            mov b, [d]
1274   0AF5 FD 97         neg b
1275   0AF7 E7            pop d
1276   0AF8 FD 43         mov [d], b
1277   0AFA 0A 1F 0B      jmp _if20_exit
1278   0AFD             _if20_else:
1279   0AFD             ;; if (num == 0) { 
1280   0AFD             _if21_cond:
1281   0AFD FA 05 00      lea d, [bp + 5] ; $num
1282   0B00 2A            mov b, [d]
1283   0B01             ; START RELATIONAL
1284   0B01 D7            push a
1285   0B02 11            mov a, b
1286   0B03 26 00 00      mov b, $0
1287   0B06 B0            cmp a, b
1288   0B07 FD 71         seq ; ==
1289   0B09 E4            pop a
1290   0B0A             ; END RELATIONAL
1291   0B0A C0 00 00      cmp b, 0
1292   0B0D C6 1F 0B      je _if21_exit
1293   0B10             _if21_true:
1294   0B10             ;; putchar('0'); 
1295   0B10 26 30 00      mov b, $30
1296   0B13 DD            push bl
1297   0B14 07 A5 0C      call putchar
1298   0B17 51 01 00      add sp, 1
1299   0B1A             ;; return; 
1300   0B1A F9            leave
1301   0B1B 09            ret
1302   0B1C 0A 1F 0B      jmp _if21_exit
1303   0B1F             _if21_exit:
1304   0B1F             _if20_exit:
1305   0B1F             ;; while (num > 0) { 
1306   0B1F             _while22_cond:
1307   0B1F FA 05 00      lea d, [bp + 5] ; $num
1308   0B22 2A            mov b, [d]
1309   0B23             ; START RELATIONAL
1310   0B23 D7            push a
1311   0B24 11            mov a, b
1312   0B25 26 00 00      mov b, $0
1313   0B28 B0            cmp a, b
1314   0B29 FD 7F         sgt ; >
1315   0B2B E4            pop a
1316   0B2C             ; END RELATIONAL
1317   0B2C C0 00 00      cmp b, 0
1318   0B2F C6 7C 0B      je _while22_exit
1319   0B32             _while22_block:
1320   0B32             ;; digits[i] = '0' + (num % 10); 
1321   0B32 FA FC FF      lea d, [bp + -4] ; $digits
1322   0B35 D7            push a
1323   0B36 DA            push d
1324   0B37 FA FA FF      lea d, [bp + -6] ; $i
1325   0B3A 2A            mov b, [d]
1326   0B3B E7            pop d
1327   0B3C 5A            add d, b
1328   0B3D E4            pop a
1329   0B3E DA            push d
1330   0B3F 26 30 00      mov b, $30
1331   0B42             ; START TERMS
1332   0B42 D7            push a
1333   0B43 11            mov a, b
1334   0B44 FA 05 00      lea d, [bp + 5] ; $num
1335   0B47 2A            mov b, [d]
1336   0B48             ; START FACTORS
1337   0B48 D7            push a
1338   0B49 11            mov a, b
1339   0B4A 26 0A 00      mov b, $a
1340   0B4D AE            div a, b ; 
1341   0B4E 11            mov a, b
1342   0B4F 27            mov b, a
1343   0B50 E4            pop a
1344   0B51             ; END FACTORS
1345   0B51 54            add a, b
1346   0B52 27            mov b, a
1347   0B53 E4            pop a
1348   0B54             ; END TERMS
1349   0B54 E7            pop d
1350   0B55 FD 3E         mov [d], bl
1351   0B57             ;; num = num / 10; 
1352   0B57 FA 05 00      lea d, [bp + 5] ; $num
1353   0B5A DA            push d
1354   0B5B FA 05 00      lea d, [bp + 5] ; $num
1355   0B5E 2A            mov b, [d]
1356   0B5F             ; START FACTORS
1357   0B5F D7            push a
1358   0B60 11            mov a, b
1359   0B61 26 0A 00      mov b, $a
1360   0B64 AE            div a, b
1361   0B65 27            mov b, a
1362   0B66 E4            pop a
1363   0B67             ; END FACTORS
1364   0B67 E7            pop d
1365   0B68 FD 43         mov [d], b
1366   0B6A             ;; i++; 
1367   0B6A FA FA FF      lea d, [bp + -6] ; $i
1368   0B6D 2A            mov b, [d]
1369   0B6E FD 79         mov g, b
1370   0B70 FD 77         inc b
1371   0B72 FA FA FF      lea d, [bp + -6] ; $i
1372   0B75 FD 43         mov [d], b
1373   0B77 FD 27         mov b, g
1374   0B79 0A 1F 0B      jmp _while22_cond
1375   0B7C             _while22_exit:
1376   0B7C             ;; while (i > 0) { 
1377   0B7C             _while23_cond:
1378   0B7C FA FA FF      lea d, [bp + -6] ; $i
1379   0B7F 2A            mov b, [d]
1380   0B80             ; START RELATIONAL
1381   0B80 D7            push a
1382   0B81 11            mov a, b
1383   0B82 26 00 00      mov b, $0
1384   0B85 B0            cmp a, b
1385   0B86 FD 7F         sgt ; >
1386   0B88 E4            pop a
1387   0B89             ; END RELATIONAL
1388   0B89 C0 00 00      cmp b, 0
1389   0B8C C6 B7 0B      je _while23_exit
1390   0B8F             _while23_block:
1391   0B8F             ;; i--; 
1392   0B8F FA FA FF      lea d, [bp + -6] ; $i
1393   0B92 2A            mov b, [d]
1394   0B93 FD 79         mov g, b
1395   0B95 FD 7D         dec b
1396   0B97 FA FA FF      lea d, [bp + -6] ; $i
1397   0B9A FD 43         mov [d], b
1398   0B9C FD 27         mov b, g
1399   0B9E             ;; putchar(digits[i]); 
1400   0B9E FA FC FF      lea d, [bp + -4] ; $digits
1401   0BA1 D7            push a
1402   0BA2 DA            push d
1403   0BA3 FA FA FF      lea d, [bp + -6] ; $i
1404   0BA6 2A            mov b, [d]
1405   0BA7 E7            pop d
1406   0BA8 5A            add d, b
1407   0BA9 E4            pop a
1408   0BAA 32            mov bl, [d]
1409   0BAB A7 00         mov bh, 0
1410   0BAD DD            push bl
1411   0BAE 07 A5 0C      call putchar
1412   0BB1 51 01 00      add sp, 1
1413   0BB4 0A 7C 0B      jmp _while23_cond
1414   0BB7             _while23_exit:
1415   0BB7 F9            leave
1416   0BB8 09            ret
1417   0BB9             
1418   0BB9             printu:
1419   0BB9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1420   0BBC             ; $digits 
1421   0BBC             ; $i 
1422   0BBC 52 07 00      sub sp, 7
1423   0BBF             ;; i = 0; 
1424   0BBF FA FA FF      lea d, [bp + -6] ; $i
1425   0BC2 DA            push d
1426   0BC3 26 00 00      mov b, $0
1427   0BC6 E7            pop d
1428   0BC7 FD 43         mov [d], b
1429   0BC9             ;; if(num == 0){ 
1430   0BC9             _if24_cond:
1431   0BC9 FA 05 00      lea d, [bp + 5] ; $num
1432   0BCC 2A            mov b, [d]
1433   0BCD             ; START RELATIONAL
1434   0BCD D7            push a
1435   0BCE 11            mov a, b
1436   0BCF 26 00 00      mov b, $0
1437   0BD2 B0            cmp a, b
1438   0BD3 FD 71         seq ; ==
1439   0BD5 E4            pop a
1440   0BD6             ; END RELATIONAL
1441   0BD6 C0 00 00      cmp b, 0
1442   0BD9 C6 EB 0B      je _if24_exit
1443   0BDC             _if24_true:
1444   0BDC             ;; putchar('0'); 
1445   0BDC 26 30 00      mov b, $30
1446   0BDF DD            push bl
1447   0BE0 07 A5 0C      call putchar
1448   0BE3 51 01 00      add sp, 1
1449   0BE6             ;; return; 
1450   0BE6 F9            leave
1451   0BE7 09            ret
1452   0BE8 0A EB 0B      jmp _if24_exit
1453   0BEB             _if24_exit:
1454   0BEB             ;; while (num > 0) { 
1455   0BEB             _while25_cond:
1456   0BEB FA 05 00      lea d, [bp + 5] ; $num
1457   0BEE 2A            mov b, [d]
1458   0BEF             ; START RELATIONAL
1459   0BEF D7            push a
1460   0BF0 11            mov a, b
1461   0BF1 26 00 00      mov b, $0
1462   0BF4 B0            cmp a, b
1463   0BF5 FD 81         sgu ; > (unsigned)
1464   0BF7 E4            pop a
1465   0BF8             ; END RELATIONAL
1466   0BF8 C0 00 00      cmp b, 0
1467   0BFB C6 48 0C      je _while25_exit
1468   0BFE             _while25_block:
1469   0BFE             ;; digits[i] = '0' + (num % 10); 
1470   0BFE FA FC FF      lea d, [bp + -4] ; $digits
1471   0C01 D7            push a
1472   0C02 DA            push d
1473   0C03 FA FA FF      lea d, [bp + -6] ; $i
1474   0C06 2A            mov b, [d]
1475   0C07 E7            pop d
1476   0C08 5A            add d, b
1477   0C09 E4            pop a
1478   0C0A DA            push d
1479   0C0B 26 30 00      mov b, $30
1480   0C0E             ; START TERMS
1481   0C0E D7            push a
1482   0C0F 11            mov a, b
1483   0C10 FA 05 00      lea d, [bp + 5] ; $num
1484   0C13 2A            mov b, [d]
1485   0C14             ; START FACTORS
1486   0C14 D7            push a
1487   0C15 11            mov a, b
1488   0C16 26 0A 00      mov b, $a
1489   0C19 AE            div a, b ; 
1490   0C1A 11            mov a, b
1491   0C1B 27            mov b, a
1492   0C1C E4            pop a
1493   0C1D             ; END FACTORS
1494   0C1D 54            add a, b
1495   0C1E 27            mov b, a
1496   0C1F E4            pop a
1497   0C20             ; END TERMS
1498   0C20 E7            pop d
1499   0C21 FD 3E         mov [d], bl
1500   0C23             ;; num = num / 10; 
1501   0C23 FA 05 00      lea d, [bp + 5] ; $num
1502   0C26 DA            push d
1503   0C27 FA 05 00      lea d, [bp + 5] ; $num
1504   0C2A 2A            mov b, [d]
1505   0C2B             ; START FACTORS
1506   0C2B D7            push a
1507   0C2C 11            mov a, b
1508   0C2D 26 0A 00      mov b, $a
1509   0C30 AE            div a, b
1510   0C31 27            mov b, a
1511   0C32 E4            pop a
1512   0C33             ; END FACTORS
1513   0C33 E7            pop d
1514   0C34 FD 43         mov [d], b
1515   0C36             ;; i++; 
1516   0C36 FA FA FF      lea d, [bp + -6] ; $i
1517   0C39 2A            mov b, [d]
1518   0C3A FD 79         mov g, b
1519   0C3C FD 77         inc b
1520   0C3E FA FA FF      lea d, [bp + -6] ; $i
1521   0C41 FD 43         mov [d], b
1522   0C43 FD 27         mov b, g
1523   0C45 0A EB 0B      jmp _while25_cond
1524   0C48             _while25_exit:
1525   0C48             ;; while (i > 0) { 
1526   0C48             _while26_cond:
1527   0C48 FA FA FF      lea d, [bp + -6] ; $i
1528   0C4B 2A            mov b, [d]
1529   0C4C             ; START RELATIONAL
1530   0C4C D7            push a
1531   0C4D 11            mov a, b
1532   0C4E 26 00 00      mov b, $0
1533   0C51 B0            cmp a, b
1534   0C52 FD 7F         sgt ; >
1535   0C54 E4            pop a
1536   0C55             ; END RELATIONAL
1537   0C55 C0 00 00      cmp b, 0
1538   0C58 C6 83 0C      je _while26_exit
1539   0C5B             _while26_block:
1540   0C5B             ;; i--; 
1541   0C5B FA FA FF      lea d, [bp + -6] ; $i
1542   0C5E 2A            mov b, [d]
1543   0C5F FD 79         mov g, b
1544   0C61 FD 7D         dec b
1545   0C63 FA FA FF      lea d, [bp + -6] ; $i
1546   0C66 FD 43         mov [d], b
1547   0C68 FD 27         mov b, g
1548   0C6A             ;; putchar(digits[i]); 
1549   0C6A FA FC FF      lea d, [bp + -4] ; $digits
1550   0C6D D7            push a
1551   0C6E DA            push d
1552   0C6F FA FA FF      lea d, [bp + -6] ; $i
1553   0C72 2A            mov b, [d]
1554   0C73 E7            pop d
1555   0C74 5A            add d, b
1556   0C75 E4            pop a
1557   0C76 32            mov bl, [d]
1558   0C77 A7 00         mov bh, 0
1559   0C79 DD            push bl
1560   0C7A 07 A5 0C      call putchar
1561   0C7D 51 01 00      add sp, 1
1562   0C80 0A 48 0C      jmp _while26_cond
1563   0C83             _while26_exit:
1564   0C83 F9            leave
1565   0C84 09            ret
1566   0C85             
1567   0C85             rand:
1568   0C85 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1569   0C88             ; $sec 
1570   0C88 52 01 00      sub sp, 1
1571   0C8B             
1572   0C8B             ; --- BEGIN INLINE ASM BLOCK
1573   0C8B 19 00         mov al, 0
1574   0C8D 05 01         syscall sys_rtc					
1575   0C8F 1A            mov al, ah
1576   0C90 FA 00 00      lea d, [bp + 0] ; $sec
1577   0C93 1E            mov al, [d]
1578   0C94             ; --- END INLINE ASM BLOCK
1579   0C94             
1580   0C94             ;; return sec; 
1581   0C94 FA 00 00      lea d, [bp + 0] ; $sec
1582   0C97 32            mov bl, [d]
1583   0C98 A7 00         mov bh, 0
1584   0C9A F9            leave
1585   0C9B 09            ret
1586   0C9C             
1587   0C9C             date:
1588   0C9C F8 00 00      enter 0 ; (push bp; mov bp, sp)
1589   0C9F             
1590   0C9F             ; --- BEGIN INLINE ASM BLOCK
1591   0C9F 19 00         mov al, 0 
1592   0CA1 05 07         syscall sys_datetime
1593   0CA3             ; --- END INLINE ASM BLOCK
1594   0CA3             
1595   0CA3 F9            leave
1596   0CA4 09            ret
1597   0CA5             
1598   0CA5             putchar:
1599   0CA5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1600   0CA8             
1601   0CA8             ; --- BEGIN INLINE ASM BLOCK
1602   0CA8 FA 05 00      lea d, [bp + 5] ; $c
1603   0CAB 1E            mov al, [d]
1604   0CAC 23            mov ah, al
1605   0CAD 07 22 0F      call _putchar
1606   0CB0             ; --- END INLINE ASM BLOCK
1607   0CB0             
1608   0CB0 F9            leave
1609   0CB1 09            ret
1610   0CB2             
1611   0CB2             getchar:
1612   0CB2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1613   0CB5             ; $c 
1614   0CB5 52 01 00      sub sp, 1
1615   0CB8             
1616   0CB8             ; --- BEGIN INLINE ASM BLOCK
1617   0CB8 07 1B 0F      call getch
1618   0CBB 1A            mov al, ah
1619   0CBC FA 00 00      lea d, [bp + 0] ; $c
1620   0CBF 3E            mov [d], al
1621   0CC0             ; --- END INLINE ASM BLOCK
1622   0CC0             
1623   0CC0             ;; return c; 
1624   0CC0 FA 00 00      lea d, [bp + 0] ; $c
1625   0CC3 32            mov bl, [d]
1626   0CC4 A7 00         mov bh, 0
1627   0CC6 F9            leave
1628   0CC7 09            ret
1629   0CC8             
1630   0CC8             scann:
1631   0CC8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1632   0CCB             ; $m 
1633   0CCB 52 02 00      sub sp, 2
1634   0CCE             
1635   0CCE             ; --- BEGIN INLINE ASM BLOCK
1636   0CCE 07 66 11      call scan_u16d
1637   0CD1 FA FF FF      lea d, [bp + -1] ; $m
1638   0CD4 43            mov [d], a
1639   0CD5             ; --- END INLINE ASM BLOCK
1640   0CD5             
1641   0CD5             ;; return m; 
1642   0CD5 FA FF FF      lea d, [bp + -1] ; $m
1643   0CD8 2A            mov b, [d]
1644   0CD9 F9            leave
1645   0CDA 09            ret
1646   0CDB             
1647   0CDB             puts:
1648   0CDB F8 00 00      enter 0 ; (push bp; mov bp, sp)
1649   0CDE             
1650   0CDE             ; --- BEGIN INLINE ASM BLOCK
1651   0CDE FA 05 00      lea d, [bp + 5] ; $s
1652   0CE1 15            mov a, [d]
1653   0CE2 3C            mov d, a
1654   0CE3 07 6C 10      call _puts
1655   0CE6 10 00 0A      mov a, $0A00
1656   0CE9 05 03         syscall sys_io
1657   0CEB             ; --- END INLINE ASM BLOCK
1658   0CEB             
1659   0CEB F9            leave
1660   0CEC 09            ret
1661   0CED             
1662   0CED             print:
1663   0CED F8 00 00      enter 0 ; (push bp; mov bp, sp)
1664   0CF0             
1665   0CF0             ; --- BEGIN INLINE ASM BLOCK
1666   0CF0 FA 05 00      lea d, [bp + 5] ; $s
1667   0CF3 FD 2A         mov d, [d]
1668   0CF5 07 6C 10      call _puts
1669   0CF8             ; --- END INLINE ASM BLOCK
1670   0CF8             
1671   0CF8 F9            leave
1672   0CF9 09            ret
1673   0CFA             
1674   0CFA             loadfile:
1675   0CFA F8 00 00      enter 0 ; (push bp; mov bp, sp)
1676   0CFD             
1677   0CFD             ; --- BEGIN INLINE ASM BLOCK
1678   0CFD FA 05 00      lea d, [bp + 5] ; $destination
1679   0D00 15            mov a, [d]
1680   0D01 4F            mov di, a
1681   0D02 FA 07 00      lea d, [bp + 7] ; $filename
1682   0D05 FD 2A         mov d, [d]
1683   0D07 19 14         mov al, 20
1684   0D09 05 04         syscall sys_filesystem
1685   0D0B             ; --- END INLINE ASM BLOCK
1686   0D0B             
1687   0D0B F9            leave
1688   0D0C 09            ret
1689   0D0D             
1690   0D0D             create_file:
1691   0D0D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1692   0D10 F9            leave
1693   0D11 09            ret
1694   0D12             
1695   0D12             delete_file:
1696   0D12 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1697   0D15             
1698   0D15             ; --- BEGIN INLINE ASM BLOCK
1699   0D15 FA 05 00      lea d, [bp + 5] ; $filename
1700   0D18 19 0A         mov al, 10
1701   0D1A 05 04         syscall sys_filesystem
1702   0D1C             ; --- END INLINE ASM BLOCK
1703   0D1C             
1704   0D1C F9            leave
1705   0D1D 09            ret
1706   0D1E             
1707   0D1E             fopen:
1708   0D1E F8 00 00      enter 0 ; (push bp; mov bp, sp)
1709   0D21 F9            leave
1710   0D22 09            ret
1711   0D23             
1712   0D23             fclose:
1713   0D23 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1714   0D26 F9            leave
1715   0D27 09            ret
1716   0D28             
1717   0D28             alloc:
1718   0D28 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1719   0D2B             ;; heap_top = heap_top + bytes; 
1720   0D2B 3B 1D 2C      mov d, _heap_top ; $heap_top
1721   0D2E DA            push d
1722   0D2F 3B 1D 2C      mov d, _heap_top ; $heap_top
1723   0D32 2A            mov b, [d]
1724   0D33             ; START TERMS
1725   0D33 D7            push a
1726   0D34 11            mov a, b
1727   0D35 FA 05 00      lea d, [bp + 5] ; $bytes
1728   0D38 2A            mov b, [d]
1729   0D39 54            add a, b
1730   0D3A 27            mov b, a
1731   0D3B E4            pop a
1732   0D3C             ; END TERMS
1733   0D3C E7            pop d
1734   0D3D FD 43         mov [d], b
1735   0D3F             ;; return heap_top - bytes; 
1736   0D3F 3B 1D 2C      mov d, _heap_top ; $heap_top
1737   0D42 2A            mov b, [d]
1738   0D43             ; START TERMS
1739   0D43 D7            push a
1740   0D44 11            mov a, b
1741   0D45 FA 05 00      lea d, [bp + 5] ; $bytes
1742   0D48 2A            mov b, [d]
1743   0D49 60            sub a, b
1744   0D4A 27            mov b, a
1745   0D4B E4            pop a
1746   0D4C             ; END TERMS
1747   0D4C F9            leave
1748   0D4D 09            ret
1749   0D4E             
1750   0D4E             free:
1751   0D4E F8 00 00      enter 0 ; (push bp; mov bp, sp)
1752   0D51             ;; return heap_top = heap_top - bytes; 
1753   0D51 3B 1D 2C      mov d, _heap_top ; $heap_top
1754   0D54 DA            push d
1755   0D55 3B 1D 2C      mov d, _heap_top ; $heap_top
1756   0D58 2A            mov b, [d]
1757   0D59             ; START TERMS
1758   0D59 D7            push a
1759   0D5A 11            mov a, b
1760   0D5B FA 05 00      lea d, [bp + 5] ; $bytes
1761   0D5E 2A            mov b, [d]
1762   0D5F 60            sub a, b
1763   0D60 27            mov b, a
1764   0D61 E4            pop a
1765   0D62             ; END TERMS
1766   0D62 E7            pop d
1767   0D63 FD 43         mov [d], b
1768   0D65 F9            leave
1769   0D66 09            ret
1770   0D67             
1771   0D67             exit:
1772   0D67 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1773   0D6A             
1774   0D6A             ; --- BEGIN INLINE ASM BLOCK
1775   0D6A 05 0B         syscall sys_terminate_proc
1776   0D6C             ; --- END INLINE ASM BLOCK
1777   0D6C             
1778   0D6C F9            leave
1779   0D6D 09            ret
1780   0D6E             
1781   0D6E             load_hex:
1782   0D6E F8 00 00      enter 0 ; (push bp; mov bp, sp)
1783   0D71             ; $temp 
1784   0D71 52 02 00      sub sp, 2
1785   0D74             ;; temp = alloc(32768); 
1786   0D74 FA FF FF      lea d, [bp + -1] ; $temp
1787   0D77 DA            push d
1788   0D78 26 00 80      mov b, $8000
1789   0D7B FD AB         swp b
1790   0D7D D8            push b
1791   0D7E 07 28 0D      call alloc
1792   0D81 51 02 00      add sp, 2
1793   0D84 E7            pop d
1794   0D85 FD 43         mov [d], b
1795   0D87             
1796   0D87             ; --- BEGIN INLINE ASM BLOCK
1797   0D87               
1798   0D87               
1799   0D87               
1800   0D87               
1801   0D87               
1802   0D87             _load_hex:
1803   0D87 D7            push a
1804   0D88 D8            push b
1805   0D89 DA            push d
1806   0D8A E2            push si
1807   0D8B E3            push di
1808   0D8C 52 00 80      sub sp, $8000      
1809   0D8F 38 00 00      mov c, 0
1810   0D92 48            mov a, sp
1811   0D93 77            inc a
1812   0D94 3C            mov d, a          
1813   0D95 07 29 0F      call _gets        
1814   0D98 4D            mov si, a
1815   0D99             __load_hex_loop:
1816   0D99 F6            lodsb             
1817   0D9A B9 00         cmp al, 0         
1818   0D9C C6 AA 0D      jz __load_hex_ret
1819   0D9F 36            mov bh, al
1820   0DA0 F6            lodsb
1821   0DA1 2F            mov bl, al
1822   0DA2 07 DF 0E      call _atoi        
1823   0DA5 F7            stosb             
1824   0DA6 78            inc c
1825   0DA7 0A 99 0D      jmp __load_hex_loop
1826   0DAA             __load_hex_ret:
1827   0DAA 51 00 80      add sp, $8000
1828   0DAD F0            pop di
1829   0DAE EF            pop si
1830   0DAF E7            pop d
1831   0DB0 E5            pop b
1832   0DB1 E4            pop a
1833   0DB2             ; --- END INLINE ASM BLOCK
1834   0DB2             
1835   0DB2 F9            leave
1836   0DB3 09            ret
1837   0DB4             
1838   0DB4             getparam:
1839   0DB4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1840   0DB7             ; $data 
1841   0DB7 52 01 00      sub sp, 1
1842   0DBA             
1843   0DBA             ; --- BEGIN INLINE ASM BLOCK
1844   0DBA 19 04         mov al, 4
1845   0DBC FA 05 00      lea d, [bp + 5] ; $address
1846   0DBF FD 2A         mov d, [d]
1847   0DC1 05 0C         syscall sys_system
1848   0DC3 FA 00 00      lea d, [bp + 0] ; $data
1849   0DC6 FD 3E         mov [d], bl
1850   0DC8             ; --- END INLINE ASM BLOCK
1851   0DC8             
1852   0DC8             ;; return data; 
1853   0DC8 FA 00 00      lea d, [bp + 0] ; $data
1854   0DCB 32            mov bl, [d]
1855   0DCC A7 00         mov bh, 0
1856   0DCE F9            leave
1857   0DCF 09            ret
1858   0DD0             
1859   0DD0             clear:
1860   0DD0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1861   0DD3             ;; print("\033[2J\033[H"); 
1862   0DD3 26 42 24      mov b, __s4 ; "\033[2J\033[H"
1863   0DD6 FD AB         swp b
1864   0DD8 D8            push b
1865   0DD9 07 ED 0C      call print
1866   0DDC 51 02 00      add sp, 2
1867   0DDF F9            leave
1868   0DE0 09            ret
1869   0DE1             
1870   0DE1             printun:
1871   0DE1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1872   0DE4             ;; print(prompt); 
1873   0DE4 FA 07 00      lea d, [bp + 7] ; $prompt
1874   0DE7 2A            mov b, [d]
1875   0DE8 FD AB         swp b
1876   0DEA D8            push b
1877   0DEB 07 ED 0C      call print
1878   0DEE 51 02 00      add sp, 2
1879   0DF1             ;; printu(n); 
1880   0DF1 FA 05 00      lea d, [bp + 5] ; $n
1881   0DF4 2A            mov b, [d]
1882   0DF5 FD AB         swp b
1883   0DF7 D8            push b
1884   0DF8 07 B9 0B      call printu
1885   0DFB 51 02 00      add sp, 2
1886   0DFE             ;; print("\n"); 
1887   0DFE 26 4A 24      mov b, __s5 ; "\n"
1888   0E01 FD AB         swp b
1889   0E03 D8            push b
1890   0E04 07 ED 0C      call print
1891   0E07 51 02 00      add sp, 2
1892   0E0A F9            leave
1893   0E0B 09            ret
1894   0E0C             
1895   0E0C             printsn:
1896   0E0C F8 00 00      enter 0 ; (push bp; mov bp, sp)
1897   0E0F             ;; print(prompt); 
1898   0E0F FA 07 00      lea d, [bp + 7] ; $prompt
1899   0E12 2A            mov b, [d]
1900   0E13 FD AB         swp b
1901   0E15 D8            push b
1902   0E16 07 ED 0C      call print
1903   0E19 51 02 00      add sp, 2
1904   0E1C             ;; prints(n); 
1905   0E1C FA 05 00      lea d, [bp + 5] ; $n
1906   0E1F 2A            mov b, [d]
1907   0E20 FD AB         swp b
1908   0E22 D8            push b
1909   0E23 07 C4 0A      call prints
1910   0E26 51 02 00      add sp, 2
1911   0E29             ;; print("\n"); 
1912   0E29 26 4A 24      mov b, __s5 ; "\n"
1913   0E2C FD AB         swp b
1914   0E2E D8            push b
1915   0E2F 07 ED 0C      call print
1916   0E32 51 02 00      add sp, 2
1917   0E35 F9            leave
1918   0E36 09            ret
1919   0E37             
1920   0E37             include_stdio_asm:
1921   0E37 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1922   0E3A             
1923   0E3A             ; --- BEGIN INLINE ASM BLOCK
1924   0E3A             .include "lib/stdio.asm"
0001+  0E3A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0E3A             ; stdio.s
0003+  0E3A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0E3A             .include "lib/string.asm"
0001++ 0E3A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0E3A             ; string.s
0003++ 0E3A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0E3A             
0005++ 0E3A             
0006++ 0E3A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0E3A             ; _strrev
0008++ 0E3A             ; reverse a string
0009++ 0E3A             ; D = string address
0010++ 0E3A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0E3A             ; 01234
0012++ 0E3A             _strrev:
0013++ 0E3A 4B          	pusha
0014++ 0E3B 07 81 0E    	call _strlen	; length in C
0015++ 0E3E 12          	mov a, c
0016++ 0E3F AF 01 00    	cmp a, 1
0017++ 0E42 D0 5C 0E    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 0E45 7D          	dec a
0019++ 0E46 FD 4E       	mov si, d	; beginning of string
0020++ 0E48 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0E4A 59          	add d, a	; end of string
0022++ 0E4B 12          	mov a, c
0023++ 0E4C FD 9B       	shr a		; divide by 2
0024++ 0E4E 39          	mov c, a	; C now counts the steps
0025++ 0E4F             _strrev_L0:
0026++ 0E4F 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0E50 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0E51 3E          	mov [d], al	; store left char into right side
0029++ 0E52 1B          	mov al, bl
0030++ 0E53 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0E54 7E          	dec c
0032++ 0E55 7F          	dec d
0033++ 0E56 C2 00 00    	cmp c, 0
0034++ 0E59 C7 4F 0E    	jne _strrev_L0
0035++ 0E5C             _strrev_end:
0036++ 0E5C 4C          	popa
0037++ 0E5D 09          	ret
0038++ 0E5E             	
0039++ 0E5E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0E5E             ; _strchr
0041++ 0E5E             ; search string in D for char in AL
0042++ 0E5E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0E5E             _strchr:
0044++ 0E5E             _strchr_L0:
0045++ 0E5E 32          	mov bl, [d]
0046++ 0E5F C1 00       	cmp bl, 0
0047++ 0E61 C6 6C 0E    	je _strchr_end
0048++ 0E64 BA          	cmp al, bl
0049++ 0E65 C6 6C 0E    	je _strchr_end
0050++ 0E68 79          	inc d
0051++ 0E69 0A 5E 0E    	jmp _strchr_L0
0052++ 0E6C             _strchr_end:
0053++ 0E6C 1B          	mov al, bl
0054++ 0E6D 09          	ret
0055++ 0E6E             
0056++ 0E6E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0E6E             ; _strstr
0058++ 0E6E             ; find sub-string
0059++ 0E6E             ; str1 in SI
0060++ 0E6E             ; str2 in DI
0061++ 0E6E             ; SI points to end of source string
0062++ 0E6E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0E6E             _strstr:
0064++ 0E6E DB          	push al
0065++ 0E6F DA          	push d
0066++ 0E70 E3          	push di
0067++ 0E71             _strstr_loop:
0068++ 0E71 F3          	cmpsb					; compare a byte of the strings
0069++ 0E72 C7 7D 0E    	jne _strstr_ret
0070++ 0E75 FC 00 00    	lea d, [di + 0]
0071++ 0E78 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0E7A C7 71 0E    	jne _strstr_loop				; equal chars but not at end
0073++ 0E7D             _strstr_ret:
0074++ 0E7D F0          	pop di
0075++ 0E7E E7          	pop d
0076++ 0E7F E8          	pop al
0077++ 0E80 09          	ret
0078++ 0E81             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0E81             ; length of null terminated string
0080++ 0E81             ; result in C
0081++ 0E81             ; pointer in D
0082++ 0E81             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0E81             _strlen:
0084++ 0E81 DA          	push d
0085++ 0E82 38 00 00    	mov c, 0
0086++ 0E85             _strlen_L1:
0087++ 0E85 BD 00       	cmp byte [d], 0
0088++ 0E87 C6 8F 0E    	je _strlen_ret
0089++ 0E8A 79          	inc d
0090++ 0E8B 78          	inc c
0091++ 0E8C 0A 85 0E    	jmp _strlen_L1
0092++ 0E8F             _strlen_ret:
0093++ 0E8F E7          	pop d
0094++ 0E90 09          	ret
0095++ 0E91             
0096++ 0E91             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 0E91             ; STRCMP
0098++ 0E91             ; compare two strings
0099++ 0E91             ; str1 in SI
0100++ 0E91             ; str2 in DI
0101++ 0E91             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 0E91             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 0E91             _strcmp:
0104++ 0E91 DB          	push al
0105++ 0E92 DA          	push d
0106++ 0E93 E3          	push di
0107++ 0E94 E2          	push si
0108++ 0E95             _strcmp_loop:
0109++ 0E95 F3          	cmpsb					; compare a byte of the strings
0110++ 0E96 C7 A1 0E    	jne _strcmp_ret
0111++ 0E99 FB FF FF    	lea d, [si +- 1]
0112++ 0E9C BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 0E9E C7 95 0E    	jne _strcmp_loop				; equal chars but not at end
0114++ 0EA1             _strcmp_ret:
0115++ 0EA1 EF          	pop si
0116++ 0EA2 F0          	pop di
0117++ 0EA3 E7          	pop d
0118++ 0EA4 E8          	pop al
0119++ 0EA5 09          	ret
0120++ 0EA6             
0121++ 0EA6             
0122++ 0EA6             ; STRCPY
0123++ 0EA6             ; copy null terminated string from SI to DI
0124++ 0EA6             ; source in SI
0125++ 0EA6             ; destination in DI
0126++ 0EA6             _strcpy:
0127++ 0EA6 E2          	push si
0128++ 0EA7 E3          	push di
0129++ 0EA8 DB          	push al
0130++ 0EA9             _strcpy_L1:
0131++ 0EA9 F6          	lodsb
0132++ 0EAA F7          	stosb
0133++ 0EAB B9 00       	cmp al, 0
0134++ 0EAD C7 A9 0E    	jne _strcpy_L1
0135++ 0EB0             _strcpy_end:
0136++ 0EB0 E8          	pop al
0137++ 0EB1 F0          	pop di
0138++ 0EB2 EF          	pop si
0139++ 0EB3 09          	ret
0140++ 0EB4             
0141++ 0EB4             ; STRCAT
0142++ 0EB4             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 0EB4             ; source in SI
0144++ 0EB4             ; destination in DI
0145++ 0EB4             _strcat:
0146++ 0EB4 E2          	push si
0147++ 0EB5 E3          	push di
0148++ 0EB6 D7          	push a
0149++ 0EB7 DA          	push d
0150++ 0EB8 50          	mov a, di
0151++ 0EB9 3C          	mov d, a
0152++ 0EBA             _strcat_goto_end_L1:
0153++ 0EBA BD 00       	cmp byte[d], 0
0154++ 0EBC C6 C3 0E    	je _strcat_start
0155++ 0EBF 79          	inc d
0156++ 0EC0 0A BA 0E    	jmp _strcat_goto_end_L1
0157++ 0EC3             _strcat_start:
0158++ 0EC3 FD 50       	mov di, d
0159++ 0EC5             _strcat_L1:
0160++ 0EC5 F6          	lodsb
0161++ 0EC6 F7          	stosb
0162++ 0EC7 B9 00       	cmp al, 0
0163++ 0EC9 C7 C5 0E    	jne _strcat_L1
0164++ 0ECC             _strcat_end:
0165++ 0ECC E7          	pop d
0166++ 0ECD E4          	pop a
0167++ 0ECE F0          	pop di
0168++ 0ECF EF          	pop si
0169++ 0ED0 09          	ret
0170++ 0ED1             
0171++ 0ED1             
0005+  0ED1             
0006+  0ED1             
0007+  0ED1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  0ED1             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0009+  0ED1             ; ASCII in BL
0010+  0ED1             ; result in AL
0011+  0ED1             ; ascii for F = 0100 0110
0012+  0ED1             ; ascii for 9 = 0011 1001
0013+  0ED1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  0ED1             hex_ascii_encode:
0015+  0ED1 1B            mov al, bl
0016+  0ED2 93 40         test al, $40        ; test if letter or number
0017+  0ED4 C7 DA 0E      jnz hex_letter
0018+  0ED7 87 0F         and al, $0F        ; get number
0019+  0ED9 09            ret
0020+  0EDA             hex_letter:
0021+  0EDA 87 0F         and al, $0F        ; get letter
0022+  0EDC 6A 09         add al, 9
0023+  0EDE 09            ret
0024+  0EDF             
0025+  0EDF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  0EDF             ; ATOI
0027+  0EDF             ; 2 letter hex string in B
0028+  0EDF             ; 8bit integer returned in AL
0029+  0EDF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  0EDF             _atoi:
0031+  0EDF D8            push b
0032+  0EE0 07 D1 0E      call hex_ascii_encode      ; convert BL to 4bit code in AL
0033+  0EE3 30            mov bl, bh
0034+  0EE4 DB            push al          ; save a
0035+  0EE5 07 D1 0E      call hex_ascii_encode
0036+  0EE8 EA            pop bl  
0037+  0EE9 FD 9E 04      shl al, 4
0038+  0EEC 8C            or al, bl
0039+  0EED E5            pop b
0040+  0EEE 09            ret  
0041+  0EEF             
0042+  0EEF             
0043+  0EEF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  0EEF             ; scanf
0045+  0EEF             ; no need for explanations!
0046+  0EEF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  0EEF             scanf:
0048+  0EEF 09            ret
0049+  0EF0             
0050+  0EF0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  0EF0             ; ITOA
0052+  0EF0             ; 8bit value in BL
0053+  0EF0             ; 2 byte ASCII result in A
0054+  0EF0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  0EF0             _itoa:
0056+  0EF0 DA            push d
0057+  0EF1 D8            push b
0058+  0EF2 A7 00         mov bh, 0
0059+  0EF4 FD A4 04      shr bl, 4  
0060+  0EF7 74            mov d, b
0061+  0EF8 1F A0 11      mov al, [d + s_hex_digits]
0062+  0EFB 23            mov ah, al
0063+  0EFC               
0064+  0EFC E5            pop b
0065+  0EFD D8            push b
0066+  0EFE A7 00         mov bh, 0
0067+  0F00 FD 87 0F      and bl, $0F
0068+  0F03 74            mov d, b
0069+  0F04 1F A0 11      mov al, [d + s_hex_digits]
0070+  0F07 E5            pop b
0071+  0F08 E7            pop d
0072+  0F09 09            ret
0073+  0F0A             
0074+  0F0A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  0F0A             ; HEX STRING TO BINARY
0076+  0F0A             ; di = destination address
0077+  0F0A             ; si = source
0078+  0F0A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  0F0A             _hex_to_int:
0080+  0F0A             _hex_to_int_L1:
0081+  0F0A F6            lodsb          ; load from [SI] to AL
0082+  0F0B B9 00         cmp al, 0        ; check if ASCII 0
0083+  0F0D C6 1A 0F      jz _hex_to_int_ret
0084+  0F10 36            mov bh, al
0085+  0F11 F6            lodsb
0086+  0F12 2F            mov bl, al
0087+  0F13 07 DF 0E      call _atoi        ; convert ASCII byte in B to int (to AL)
0088+  0F16 F7            stosb          ; store AL to [DI]
0089+  0F17 0A 0A 0F      jmp _hex_to_int_L1
0090+  0F1A             _hex_to_int_ret:
0091+  0F1A 09            ret    
0092+  0F1B             
0093+  0F1B             
0094+  0F1B             
0095+  0F1B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  0F1B             ; GETCHAR
0097+  0F1B             ; char in ah
0098+  0F1B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  0F1B             getch:
0100+  0F1B DB            push al
0101+  0F1C             getch_retry:
0102+  0F1C 19 01         mov al, 1
0103+  0F1E 05 03         syscall sys_io      ; receive in AH
0104+  0F20 E8            pop al
0105+  0F21 09            ret
0106+  0F22             
0107+  0F22             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  0F22             ; PUTCHAR
0109+  0F22             ; char in ah
0110+  0F22             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  0F22             _putchar:
0112+  0F22 D7            push a
0113+  0F23 19 00         mov al, 0
0114+  0F25 05 03         syscall sys_io      ; char in AH
0115+  0F27 E4            pop a
0116+  0F28 09            ret
0117+  0F29             
0118+  0F29             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  0F29             ;; INPUT A STRING
0120+  0F29             ;; terminates with null
0121+  0F29             ;; pointer in D
0122+  0F29             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  0F29             _gets:
0124+  0F29 D7            push a
0125+  0F2A DA            push d
0126+  0F2B             _gets_loop:
0127+  0F2B 19 01         mov al, 1
0128+  0F2D 05 03         syscall sys_io      ; receive in AH
0129+  0F2F B9 00         cmp al, 0        ; check error code (AL)
0130+  0F31 C6 2B 0F      je _gets_loop      ; if no char received, retry
0131+  0F34             
0132+  0F34 76 1B         cmp ah, 27
0133+  0F36 C6 57 0F      je _gets_ansi_esc
0134+  0F39 76 0A         cmp ah, $0A        ; LF
0135+  0F3B C6 C2 0F      je _gets_end
0136+  0F3E 76 0D         cmp ah, $0D        ; CR
0137+  0F40 C6 C2 0F      je _gets_end
0138+  0F43 76 5C         cmp ah, $5C        ; '\\'
0139+  0F45 C6 83 0F      je _gets_escape
0140+  0F48               
0141+  0F48 76 08         cmp ah, $08      ; check for backspace
0142+  0F4A C6 53 0F      je _gets_backspace
0143+  0F4D             
0144+  0F4D 1A            mov al, ah
0145+  0F4E 3E            mov [d], al
0146+  0F4F 79            inc d
0147+  0F50 0A 2B 0F      jmp _gets_loop
0148+  0F53             _gets_backspace:
0149+  0F53 7F            dec d
0150+  0F54 0A 2B 0F      jmp _gets_loop
0151+  0F57             _gets_ansi_esc:
0152+  0F57 19 01         mov al, 1
0153+  0F59 05 03         syscall sys_io        ; receive in AH without echo
0154+  0F5B B9 00         cmp al, 0          ; check error code (AL)
0155+  0F5D C6 57 0F      je _gets_ansi_esc    ; if no char received, retry
0156+  0F60 76 5B         cmp ah, '['
0157+  0F62 C7 2B 0F      jne _gets_loop
0158+  0F65             _gets_ansi_esc_2:
0159+  0F65 19 01         mov al, 1
0160+  0F67 05 03         syscall sys_io          ; receive in AH without echo
0161+  0F69 B9 00         cmp al, 0            ; check error code (AL)
0162+  0F6B C6 65 0F      je _gets_ansi_esc_2  ; if no char received, retry
0163+  0F6E 76 44         cmp ah, 'D'
0164+  0F70 C6 7B 0F      je _gets_left_arrow
0165+  0F73 76 43         cmp ah, 'C'
0166+  0F75 C6 7F 0F      je _gets_right_arrow
0167+  0F78 0A 2B 0F      jmp _gets_loop
0168+  0F7B             _gets_left_arrow:
0169+  0F7B 7F            dec d
0170+  0F7C 0A 2B 0F      jmp _gets_loop
0171+  0F7F             _gets_right_arrow:
0172+  0F7F 79            inc d
0173+  0F80 0A 2B 0F      jmp _gets_loop
0174+  0F83             _gets_escape:
0175+  0F83 19 01         mov al, 1
0176+  0F85 05 03         syscall sys_io      ; receive in AH
0177+  0F87 B9 00         cmp al, 0        ; check error code (AL)
0178+  0F89 C6 83 0F      je _gets_escape      ; if no char received, retry
0179+  0F8C 76 6E         cmp ah, 'n'
0180+  0F8E C6 AD 0F      je _gets_LF
0181+  0F91 76 72         cmp ah, 'r'
0182+  0F93 C6 B4 0F      je _gets_CR
0183+  0F96 76 30         cmp ah, '0'
0184+  0F98 C6 BB 0F      je _gets_NULL
0185+  0F9B 76 5C         cmp ah, $5C  ; '\'
0186+  0F9D C6 A6 0F      je _gets_slash
0187+  0FA0 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0188+  0FA1 3E            mov [d], al
0189+  0FA2 79            inc d
0190+  0FA3 0A 2B 0F      jmp _gets_loop
0191+  0FA6             _gets_slash:
0192+  0FA6 19 5C         mov al, $5C
0193+  0FA8 3E            mov [d], al
0194+  0FA9 79            inc d
0195+  0FAA 0A 2B 0F      jmp _gets_loop
0196+  0FAD             _gets_LF:
0197+  0FAD 19 0A         mov al, $0A
0198+  0FAF 3E            mov [d], al
0199+  0FB0 79            inc d
0200+  0FB1 0A 2B 0F      jmp _gets_loop
0201+  0FB4             _gets_CR:
0202+  0FB4 19 0D         mov al, $0D
0203+  0FB6 3E            mov [d], al
0204+  0FB7 79            inc d
0205+  0FB8 0A 2B 0F      jmp _gets_loop
0206+  0FBB             _gets_NULL:
0207+  0FBB 19 00         mov al, $00
0208+  0FBD 3E            mov [d], al
0209+  0FBE 79            inc d
0210+  0FBF 0A 2B 0F      jmp _gets_loop
0211+  0FC2             _gets_end:
0212+  0FC2 19 00         mov al, 0
0213+  0FC4 3E            mov [d], al        ; terminate string
0214+  0FC5 E7            pop d
0215+  0FC6 E4            pop a
0216+  0FC7 09            ret
0217+  0FC8             
0218+  0FC8             
0219+  0FC8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0220+  0FC8             ;; INPUT TEXT
0221+  0FC8             ;; terminated with CTRL+D
0222+  0FC8             ;; pointer in D
0223+  0FC8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0224+  0FC8             _gettxt:
0225+  0FC8 D7            push a
0226+  0FC9 DA            push d
0227+  0FCA             _gettxt_loop:
0228+  0FCA 19 01         mov al, 1
0229+  0FCC 05 03         syscall sys_io      ; receive in AH
0230+  0FCE B9 00         cmp al, 0        ; check error code (AL)
0231+  0FD0 C6 CA 0F      je _gettxt_loop    ; if no char received, retry
0232+  0FD3 76 04         cmp ah, 4      ; EOT
0233+  0FD5 C6 13 10      je _gettxt_end
0234+  0FD8 76 08         cmp ah, $08      ; check for backspace
0235+  0FDA C6 0F 10      je _gettxt_backspace
0236+  0FDD 76 5C         cmp ah, $5C        ; '\'
0237+  0FDF C6 E8 0F      je _gettxt_escape
0238+  0FE2 1A            mov al, ah
0239+  0FE3 3E            mov [d], al
0240+  0FE4 79            inc d
0241+  0FE5 0A CA 0F      jmp _gettxt_loop
0242+  0FE8             _gettxt_escape:
0243+  0FE8 19 01         mov al, 1
0244+  0FEA 05 03         syscall sys_io      ; receive in AH
0245+  0FEC B9 00         cmp al, 0        ; check error code (AL)
0246+  0FEE C6 E8 0F      je _gettxt_escape    ; if no char received, retry
0247+  0FF1 76 6E         cmp ah, 'n'
0248+  0FF3 C6 01 10      je _gettxt_LF
0249+  0FF6 76 72         cmp ah, 'r'
0250+  0FF8 C6 08 10      je _gettxt_CR
0251+  0FFB 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0252+  0FFC 3E            mov [d], al
0253+  0FFD 79            inc d
0254+  0FFE 0A CA 0F      jmp _gettxt_loop
0255+  1001             _gettxt_LF:
0256+  1001 19 0A         mov al, $0A
0257+  1003 3E            mov [d], al
0258+  1004 79            inc d
0259+  1005 0A CA 0F      jmp _gettxt_loop
0260+  1008             _gettxt_CR:
0261+  1008 19 0D         mov al, $0D
0262+  100A 3E            mov [d], al
0263+  100B 79            inc d
0264+  100C 0A CA 0F      jmp _gettxt_loop
0265+  100F             _gettxt_backspace:
0266+  100F 7F            dec d
0267+  1010 0A CA 0F      jmp _gettxt_loop
0268+  1013             _gettxt_end:
0269+  1013 19 00         mov al, 0
0270+  1015 3E            mov [d], al        ; terminate string
0271+  1016 E7            pop d
0272+  1017 E4            pop a
0273+  1018 09            ret
0274+  1019             
0275+  1019             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  1019             ; PRINT NEW LINE
0277+  1019             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0278+  1019             printnl:
0279+  1019 D7            push a
0280+  101A 10 00 0A      mov a, $0A00
0281+  101D 05 03         syscall sys_io
0282+  101F 10 00 0D      mov a, $0D00
0283+  1022 05 03         syscall sys_io
0284+  1024 E4            pop a
0285+  1025 09            ret
0286+  1026             
0287+  1026             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  1026             ; _strtoint
0289+  1026             ; 4 digit hex string number in d
0290+  1026             ; integer returned in A
0291+  1026             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0292+  1026             _strtointx:
0293+  1026 D8            push b
0294+  1027 32            mov bl, [d]
0295+  1028 37            mov bh, bl
0296+  1029 33 01 00      mov bl, [d + 1]
0297+  102C 07 DF 0E      call _atoi        ; convert to int in AL
0298+  102F 23            mov ah, al        ; move to AH
0299+  1030 33 02 00      mov bl, [d + 2]
0300+  1033 37            mov bh, bl
0301+  1034 33 03 00      mov bl, [d + 3]
0302+  1037 07 DF 0E      call _atoi        ; convert to int in AL
0303+  103A E5            pop b
0304+  103B 09            ret
0305+  103C             
0306+  103C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0307+  103C             ; _strtoint
0308+  103C             ; 5 digit base10 string number in d
0309+  103C             ; integer returned in A
0310+  103C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0311+  103C             _strtoint:
0312+  103C E2            push si
0313+  103D D8            push b
0314+  103E D9            push c
0315+  103F DA            push d
0316+  1040 07 81 0E      call _strlen      ; get string length in C
0317+  1043 7E            dec c
0318+  1044 FD 4E         mov si, d
0319+  1046 12            mov a, c
0320+  1047 FD 99         shl a
0321+  1049 3B B8 11      mov d, table_power
0322+  104C 59            add d, a
0323+  104D 38 00 00      mov c, 0
0324+  1050             _strtoint_L0:
0325+  1050 F6            lodsb      ; load ASCII to al
0326+  1051 B9 00         cmp al, 0
0327+  1053 C6 66 10      je _strtoint_end
0328+  1056 6F 30         sub al, $30    ; make into integer
0329+  1058 22 00         mov ah, 0
0330+  105A 2A            mov b, [d]
0331+  105B AC            mul a, b      ; result in B since it fits in 16bits
0332+  105C 11            mov a, b
0333+  105D 28            mov b, c
0334+  105E 54            add a, b
0335+  105F 39            mov c, a
0336+  1060 63 02 00      sub d, 2
0337+  1063 0A 50 10      jmp _strtoint_L0
0338+  1066             _strtoint_end:
0339+  1066 12            mov a, c
0340+  1067 E7            pop d
0341+  1068 E6            pop c
0342+  1069 E5            pop b
0343+  106A EF            pop si
0344+  106B 09            ret
0345+  106C             
0346+  106C             
0347+  106C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0348+  106C             ; PRINT NULL TERMINATED STRING
0349+  106C             ; pointer in D
0350+  106C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0351+  106C             _puts:
0352+  106C D7            push a
0353+  106D DA            push d
0354+  106E             _puts_L1:
0355+  106E 1E            mov al, [d]
0356+  106F B9 00         cmp al, 0
0357+  1071 C6 7D 10      jz _puts_END
0358+  1074 23            mov ah, al
0359+  1075 19 00         mov al, 0
0360+  1077 05 03         syscall sys_io
0361+  1079 79            inc d
0362+  107A 0A 6E 10      jmp _puts_L1
0363+  107D             _puts_END:
0364+  107D E7            pop d
0365+  107E E4            pop a
0366+  107F 09            ret
0367+  1080             
0368+  1080             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0369+  1080             ; PRINT N SIZE STRING
0370+  1080             ; pointer in D
0371+  1080             ; size in C
0372+  1080             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0373+  1080             _putsn:
0374+  1080 DB            push al
0375+  1081 DA            push d
0376+  1082 D9            push c
0377+  1083             _putsn_L0:
0378+  1083 1E            mov al, [d]
0379+  1084 23            mov ah, al
0380+  1085 19 00         mov al, 0
0381+  1087 05 03         syscall sys_io
0382+  1089 79            inc d
0383+  108A 7E            dec c  
0384+  108B C2 00 00      cmp c, 0
0385+  108E C7 83 10      jne _putsn_L0
0386+  1091             _putsn_end:
0387+  1091 E6            pop c
0388+  1092 E7            pop d
0389+  1093 E8            pop al
0390+  1094 09            ret
0391+  1095             
0392+  1095             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0393+  1095             ; print 16bit decimal number
0394+  1095             ; input number in A
0395+  1095             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0396+  1095             print_u16d:
0397+  1095 D7            push a
0398+  1096 D8            push b
0399+  1097 26 10 27      mov b, 10000
0400+  109A AE            div a, b      ; get 10000's coeff.
0401+  109B 07 BD 10      call print_number
0402+  109E 11            mov a, b
0403+  109F 26 E8 03      mov b, 1000
0404+  10A2 AE            div a, b      ; get 1000's coeff.
0405+  10A3 07 BD 10      call print_number
0406+  10A6 11            mov a, b
0407+  10A7 26 64 00      mov b, 100
0408+  10AA AE            div a, b
0409+  10AB 07 BD 10      call print_number
0410+  10AE 11            mov a, b
0411+  10AF 26 0A 00      mov b, 10
0412+  10B2 AE            div a, b
0413+  10B3 07 BD 10      call print_number
0414+  10B6 1B            mov al, bl      ; 1's coeff in bl
0415+  10B7 07 BD 10      call print_number
0416+  10BA E5            pop b
0417+  10BB E4            pop a
0418+  10BC 09            ret
0419+  10BD             
0420+  10BD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0421+  10BD             ; print AL
0422+  10BD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0423+  10BD             print_number:
0424+  10BD 6A 30         add al, $30
0425+  10BF 23            mov ah, al
0426+  10C0 07 22 0F      call _putchar
0427+  10C3 09            ret
0428+  10C4             
0429+  10C4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0430+  10C4             ; PRINT 16BIT HEX INTEGER
0431+  10C4             ; integer value in reg B
0432+  10C4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0433+  10C4             print_u16x:
0434+  10C4 D7            push a
0435+  10C5 D8            push b
0436+  10C6 DD            push bl
0437+  10C7 30            mov bl, bh
0438+  10C8 07 F0 0E      call _itoa        ; convert bh to char in A
0439+  10CB 2F            mov bl, al        ; save al
0440+  10CC 19 00         mov al, 0
0441+  10CE 05 03         syscall sys_io        ; display AH
0442+  10D0 24            mov ah, bl        ; retrieve al
0443+  10D1 19 00         mov al, 0
0444+  10D3 05 03         syscall sys_io        ; display AL
0445+  10D5             
0446+  10D5 EA            pop bl
0447+  10D6 07 F0 0E      call _itoa        ; convert bh to char in A
0448+  10D9 2F            mov bl, al        ; save al
0449+  10DA 19 00         mov al, 0
0450+  10DC 05 03         syscall sys_io        ; display AH
0451+  10DE 24            mov ah, bl        ; retrieve al
0452+  10DF 19 00         mov al, 0
0453+  10E1 05 03         syscall sys_io        ; display AL
0454+  10E3             
0455+  10E3 E5            pop b
0456+  10E4 E4            pop a
0457+  10E5 09            ret
0458+  10E6             
0459+  10E6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0460+  10E6             ; INPUT 16BIT HEX INTEGER
0461+  10E6             ; read 16bit integer into A
0462+  10E6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0463+  10E6             scan_u16x:
0464+  10E6 F8 10 00      enter 16
0465+  10E9 D8            push b
0466+  10EA DA            push d
0467+  10EB             
0468+  10EB FA F1 FF      lea d, [bp + -15]
0469+  10EE 07 29 0F      call _gets        ; get number
0470+  10F1             
0471+  10F1 32            mov bl, [d]
0472+  10F2 37            mov bh, bl
0473+  10F3 33 01 00      mov bl, [d + 1]
0474+  10F6 07 DF 0E      call _atoi        ; convert to int in AL
0475+  10F9 23            mov ah, al        ; move to AH
0476+  10FA             
0477+  10FA 33 02 00      mov bl, [d + 2]
0478+  10FD 37            mov bh, bl
0479+  10FE 33 03 00      mov bl, [d + 3]
0480+  1101 07 DF 0E      call _atoi        ; convert to int in AL
0481+  1104             
0482+  1104 E7            pop d
0483+  1105 E5            pop b
0484+  1106 F9            leave
0485+  1107 09            ret
0486+  1108             
0487+  1108             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0488+  1108             ; PRINT 8bit HEX INTEGER
0489+  1108             ; integer value in reg bl
0490+  1108             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0491+  1108             print_u8x:
0492+  1108 D7            push a
0493+  1109 DD            push bl
0494+  110A             
0495+  110A 07 F0 0E      call _itoa        ; convert bl to char in A
0496+  110D 2F            mov bl, al        ; save al
0497+  110E 19 00         mov al, 0
0498+  1110 05 03         syscall sys_io        ; display AH
0499+  1112 24            mov ah, bl        ; retrieve al
0500+  1113 19 00         mov al, 0
0501+  1115 05 03         syscall sys_io        ; display AL
0502+  1117             
0503+  1117 EA            pop bl
0504+  1118 E4            pop a
0505+  1119 09            ret
0506+  111A             
0507+  111A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0508+  111A             ; print 8bit decimal unsigned number
0509+  111A             ; input number in AL
0510+  111A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0511+  111A             print_u8d:
0512+  111A D7            push a
0513+  111B D8            push b
0514+  111C             
0515+  111C 22 00         mov ah, 0
0516+  111E 26 64 00      mov b, 100
0517+  1121 AE            div a, b
0518+  1122 D8            push b      ; save remainder
0519+  1123 B9 00         cmp al, 0
0520+  1125 C6 2F 11      je skip100
0521+  1128 6A 30         add al, $30
0522+  112A 23            mov ah, al
0523+  112B 19 00         mov al, 0
0524+  112D 05 03         syscall sys_io  ; print coeff
0525+  112F             skip100:
0526+  112F E4            pop a
0527+  1130 22 00         mov ah, 0
0528+  1132 26 0A 00      mov b, 10
0529+  1135 AE            div a, b
0530+  1136 D8            push b      ; save remainder
0531+  1137 B9 00         cmp al, 0
0532+  1139 C6 43 11      je skip10
0533+  113C 6A 30         add al, $30
0534+  113E 23            mov ah, al
0535+  113F 19 00         mov al, 0
0536+  1141 05 03         syscall sys_io  ; print coeff
0537+  1143             skip10:
0538+  1143 E4            pop a
0539+  1144 1B            mov al, bl
0540+  1145 6A 30         add al, $30
0541+  1147 23            mov ah, al
0542+  1148 19 00         mov al, 0
0543+  114A 05 03         syscall sys_io  ; print coeff
0544+  114C E5            pop b
0545+  114D E4            pop a
0546+  114E 09            ret
0547+  114F             
0548+  114F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0549+  114F             ; INPUT 8BIT HEX INTEGER
0550+  114F             ; read 8bit integer into AL
0551+  114F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0552+  114F             scan_u8x:
0553+  114F F8 04 00      enter 4
0554+  1152 D8            push b
0555+  1153 DA            push d
0556+  1154             
0557+  1154 FA FD FF      lea d, [bp + -3]
0558+  1157 07 29 0F      call _gets        ; get number
0559+  115A             
0560+  115A 32            mov bl, [d]
0561+  115B 37            mov bh, bl
0562+  115C 33 01 00      mov bl, [d + 1]
0563+  115F 07 DF 0E      call _atoi        ; convert to int in AL
0564+  1162             
0565+  1162 E7            pop d
0566+  1163 E5            pop b
0567+  1164 F9            leave
0568+  1165 09            ret
0569+  1166             
0570+  1166             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0571+  1166             ; input decimal number
0572+  1166             ; result in A
0573+  1166             ; 655'\0'
0574+  1166             ; low--------high
0575+  1166             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0576+  1166             scan_u16d:
0577+  1166 F8 08 00      enter 8
0578+  1169 E2            push si
0579+  116A D8            push b
0580+  116B D9            push c
0581+  116C DA            push d
0582+  116D FA F9 FF      lea d, [bp +- 7]
0583+  1170 07 29 0F      call _gets
0584+  1173 07 81 0E      call _strlen      ; get string length in C
0585+  1176 7E            dec c
0586+  1177 FD 4E         mov si, d
0587+  1179 12            mov a, c
0588+  117A FD 99         shl a
0589+  117C 3B B8 11      mov d, table_power
0590+  117F 59            add d, a
0591+  1180 38 00 00      mov c, 0
0592+  1183             mul_loop:
0593+  1183 F6            lodsb      ; load ASCII to al
0594+  1184 B9 00         cmp al, 0
0595+  1186 C6 99 11      je mul_exit
0596+  1189 6F 30         sub al, $30    ; make into integer
0597+  118B 22 00         mov ah, 0
0598+  118D 2A            mov b, [d]
0599+  118E AC            mul a, b      ; result in B since it fits in 16bits
0600+  118F 11            mov a, b
0601+  1190 28            mov b, c
0602+  1191 54            add a, b
0603+  1192 39            mov c, a
0604+  1193 63 02 00      sub d, 2
0605+  1196 0A 83 11      jmp mul_loop
0606+  1199             mul_exit:
0607+  1199 12            mov a, c
0608+  119A E7            pop d
0609+  119B E6            pop c
0610+  119C E5            pop b
0611+  119D EF            pop si
0612+  119E F9            leave
0613+  119F 09            ret
0614+  11A0             
0615+  11A0             
0616+  11A0 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0616+  11A4 34 35 36 37 
0616+  11A8 38 39 41 42 
0616+  11AC 43 44 45 46 
0617+  11B0 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0617+  11B4 1B 5B 48 00 
0618+  11B8             
0619+  11B8             table_power:
0620+  11B8 01 00         .dw 1
0621+  11BA 0A 00         .dw 10
0622+  11BC 64 00         .dw 100
0623+  11BE E8 03         .dw 1000
0624+  11C0 10 27         .dw 100001925   11C2             ; --- END INLINE ASM BLOCK
1926   11C2             
1927   11C2 F9            leave
1928   11C3 09            ret
1929   11C4             
1930   11C4             include_ctype_lib:
1931   11C4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1932   11C7             
1933   11C7             ; --- BEGIN INLINE ASM BLOCK
1934   11C7             .include "lib/ctype.asm"
0001+  11C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  11C7             ; ctype.s
0003+  11C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  11C7             
0005+  11C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  11C7             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  11C7             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  11C7             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  11C7             ;; characters are supported.
0010+  11C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  11C7             ;; _isalnum 
0012+  11C7             ;; _isalpha 
0013+  11C7             ;; islower 
0014+  11C7             ;; isupper 
0015+  11C7             ;; _isdigit 
0016+  11C7             ;; isxdigit
0017+  11C7             ;; iscntrl 
0018+  11C7             ;; isgraph 
0019+  11C7             ;; _isspace 
0020+  11C7             ;; isblank 
0021+  11C7             ;; isprint 
0022+  11C7             ;; ispunct 
0023+  11C7             ;; tolower 
0024+  11C7             ;; toupper
0025+  11C7             
0026+  11C7             
0027+  11C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  11C7             ;; IS ALPHANUMERIC
0029+  11C7             ;; sets ZF according with result
0030+  11C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  11C7             _isalnum:
0032+  11C7 07 E4 11    	call _isalpha
0033+  11CA C6 D0 11    	je _isalnum_exit
0034+  11CD 07 D1 11    	call _isdigit
0035+  11D0             _isalnum_exit:
0036+  11D0 09          	ret	
0037+  11D1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  11D1             ;; IS DIGIT
0039+  11D1             ;; sets ZF according with result
0040+  11D1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  11D1             _isdigit:
0042+  11D1 DB          	push al
0043+  11D2 B9 30       	cmp al, '0'
0044+  11D4 C8 E0 11    	jlu _isdigit_false
0045+  11D7 B9 39       	cmp al, '9'
0046+  11D9 D1 E0 11    	jgu _isdigit_false
0047+  11DC 87 00       	and al, 0	; set ZF
0048+  11DE E8          	pop al
0049+  11DF 09          	ret
0050+  11E0             _isdigit_false:
0051+  11E0 8B 01       	or al, 1	; clear ZF
0052+  11E2 E8          	pop al
0053+  11E3 09          	ret	
0054+  11E4             	
0055+  11E4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  11E4             ;; IS ALPHA
0057+  11E4             ;; sets ZF according with result
0058+  11E4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  11E4             _isalpha:
0060+  11E4 DB          	push al
0061+  11E5 B9 5F       	cmp al, '_'
0062+  11E7 C6 07 12    	je _isalpha_true
0063+  11EA B9 2E       	cmp al, '.'
0064+  11EC C6 07 12    	je _isalpha_true
0065+  11EF B9 41       	cmp al, 'A'
0066+  11F1 C8 03 12    	jlu _isalpha_false
0067+  11F4 B9 7A       	cmp al, 'z'
0068+  11F6 D1 03 12    	jgu _isalpha_false
0069+  11F9 B9 5A       	cmp al, 'Z'
0070+  11FB D0 07 12    	jleu _isalpha_true
0071+  11FE B9 61       	cmp al, 'a'
0072+  1200 C9 07 12    	jgeu _isalpha_true
0073+  1203             _isalpha_false:
0074+  1203 8B 01       	or al, 1	; clear ZF
0075+  1205 E8          	pop al
0076+  1206 09          	ret
0077+  1207             _isalpha_true:
0078+  1207 87 00       	and al, 0	; set ZF
0079+  1209 E8          	pop al
0080+  120A 09          	ret
0081+  120B             
0082+  120B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  120B             ;; IS PATH-ALPHA
0084+  120B             ;; sets ZF according with result
0085+  120B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  120B             ispath:
0087+  120B DB          	push al
0088+  120C 07 D1 11    	call _isdigit
0089+  120F C6 39 12    	je ispath_true
0090+  1212 B9 5F       	cmp al, '_'
0091+  1214 C6 39 12    	je ispath_true
0092+  1217 B9 2F       	cmp al, '/'
0093+  1219 C6 39 12    	je ispath_true
0094+  121C B9 2E       	cmp al, '.'
0095+  121E C6 39 12    	je ispath_true
0096+  1221 B9 41       	cmp al, 'A'
0097+  1223 C8 35 12    	jlu ispath_false
0098+  1226 B9 7A       	cmp al, 'z'
0099+  1228 D1 35 12    	jgu ispath_false
0100+  122B B9 5A       	cmp al, 'Z'
0101+  122D D0 39 12    	jleu ispath_true
0102+  1230 B9 61       	cmp al, 'a'
0103+  1232 C9 39 12    	jgeu ispath_true
0104+  1235             ispath_false:
0105+  1235 8B 01       	or al, 1	; clear ZF
0106+  1237 E8          	pop al
0107+  1238 09          	ret
0108+  1239             ispath_true:
0109+  1239 87 00       	and al, 0	; set ZF
0110+  123B E8          	pop al
0111+  123C 09          	ret
0112+  123D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  123D             ;; IS SPACE
0114+  123D             ;; sets ZF according with result
0115+  123D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  123D             _isspace:
0117+  123D B9 20       	cmp al, $20		; ' '
0118+  123F C6 53 12    	je _isspace_exit
0119+  1242 B9 09       	cmp al, $09		; '\t'
0120+  1244 C6 53 12    	je _isspace_exit
0121+  1247 B9 0A       	cmp al, $0A		; '\n'
0122+  1249 C6 53 12    	je _isspace_exit
0123+  124C B9 0D       	cmp al, $0D		; '\r'
0124+  124E C6 53 12    	je _isspace_exit
0125+  1251 B9 0B       	cmp al, $0B		; '\v'
0126+  1253             _isspace_exit:
0127+  1253 09          	ret	
0128+  1254             
0129+  1254             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  1254             ; TO LOWER
0131+  1254             ; input in AL
0132+  1254             ; output in AL
0133+  1254             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  1254             _to_lower:
0135+  1254 B9 5A       	cmp al, 'Z'
0136+  1256 D1 5B 12    	jgu _to_lower_ret
0137+  1259 6A 20       	add al, $20				; convert to lower case
0138+  125B             _to_lower_ret:
0139+  125B 09          	ret
0140+  125C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  125C             ; TO UPPER
0142+  125C             ; input in AL
0143+  125C             ; output in AL
0144+  125C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  125C             _to_upper:
0146+  125C B9 61       	cmp al, 'a'
0147+  125E C8 63 12    	jlu _to_upper_ret
0148+  1261 6F 20       	sub al, $20			; convert to upper case
0149+  1263             _to_upper_ret:
0150+  1263 09          	ret
0151+  1264             
1935   1264             ; --- END INLINE ASM BLOCK
1936   1264             
1937   1264 F9            leave
1938   1265 09            ret
1939   1266             
1940   1266             is_space:
1941   1266 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1942   1269             ;; return c == ' ' || c == '\t' || c == '\n' || c == '\r'; 
1943   1269 FA 05 00      lea d, [bp + 5] ; $c
1944   126C 32            mov bl, [d]
1945   126D A7 00         mov bh, 0
1946   126F             ; START RELATIONAL
1947   126F D7            push a
1948   1270 11            mov a, b
1949   1271 26 20 00      mov b, $20
1950   1274 B0            cmp a, b
1951   1275 FD 71         seq ; ==
1952   1277 E4            pop a
1953   1278             ; END RELATIONAL
1954   1278 D7            push a
1955   1279 11            mov a, b
1956   127A FA 05 00      lea d, [bp + 5] ; $c
1957   127D 32            mov bl, [d]
1958   127E A7 00         mov bh, 0
1959   1280             ; START RELATIONAL
1960   1280 D7            push a
1961   1281 11            mov a, b
1962   1282 26 09 00      mov b, $9
1963   1285 B0            cmp a, b
1964   1286 FD 71         seq ; ==
1965   1288 E4            pop a
1966   1289             ; END RELATIONAL
1967   1289 FD A8         sor a, b ; ||
1968   128B 11            mov a, b
1969   128C FA 05 00      lea d, [bp + 5] ; $c
1970   128F 32            mov bl, [d]
1971   1290 A7 00         mov bh, 0
1972   1292             ; START RELATIONAL
1973   1292 D7            push a
1974   1293 11            mov a, b
1975   1294 26 0A 00      mov b, $a
1976   1297 B0            cmp a, b
1977   1298 FD 71         seq ; ==
1978   129A E4            pop a
1979   129B             ; END RELATIONAL
1980   129B FD A8         sor a, b ; ||
1981   129D 11            mov a, b
1982   129E FA 05 00      lea d, [bp + 5] ; $c
1983   12A1 32            mov bl, [d]
1984   12A2 A7 00         mov bh, 0
1985   12A4             ; START RELATIONAL
1986   12A4 D7            push a
1987   12A5 11            mov a, b
1988   12A6 26 0D 00      mov b, $d
1989   12A9 B0            cmp a, b
1990   12AA FD 71         seq ; ==
1991   12AC E4            pop a
1992   12AD             ; END RELATIONAL
1993   12AD FD A8         sor a, b ; ||
1994   12AF E4            pop a
1995   12B0 F9            leave
1996   12B1 09            ret
1997   12B2             
1998   12B2             is_digit:
1999   12B2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2000   12B5             ;; return c >= '0' && c <= '9'; 
2001   12B5 FA 05 00      lea d, [bp + 5] ; $c
2002   12B8 32            mov bl, [d]
2003   12B9 A7 00         mov bh, 0
2004   12BB             ; START RELATIONAL
2005   12BB D7            push a
2006   12BC 11            mov a, b
2007   12BD 26 30 00      mov b, $30
2008   12C0 B0            cmp a, b
2009   12C1 FD 80         sge ; >=
2010   12C3 E4            pop a
2011   12C4             ; END RELATIONAL
2012   12C4 D7            push a
2013   12C5 11            mov a, b
2014   12C6 FA 05 00      lea d, [bp + 5] ; $c
2015   12C9 32            mov bl, [d]
2016   12CA A7 00         mov bh, 0
2017   12CC             ; START RELATIONAL
2018   12CC D7            push a
2019   12CD 11            mov a, b
2020   12CE 26 39 00      mov b, $39
2021   12D1 B0            cmp a, b
2022   12D2 FD 74         sle ; <=
2023   12D4 E4            pop a
2024   12D5             ; END RELATIONAL
2025   12D5 FD A7         sand a, b ; &&
2026   12D7 E4            pop a
2027   12D8 F9            leave
2028   12D9 09            ret
2029   12DA             
2030   12DA             is_alpha:
2031   12DA F8 00 00      enter 0 ; (push bp; mov bp, sp)
2032   12DD             ;; return(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '_'); 
2033   12DD FA 05 00      lea d, [bp + 5] ; $c
2034   12E0 32            mov bl, [d]
2035   12E1 A7 00         mov bh, 0
2036   12E3             ; START RELATIONAL
2037   12E3 D7            push a
2038   12E4 11            mov a, b
2039   12E5 26 61 00      mov b, $61
2040   12E8 B0            cmp a, b
2041   12E9 FD 80         sge ; >=
2042   12EB E4            pop a
2043   12EC             ; END RELATIONAL
2044   12EC D7            push a
2045   12ED 11            mov a, b
2046   12EE FA 05 00      lea d, [bp + 5] ; $c
2047   12F1 32            mov bl, [d]
2048   12F2 A7 00         mov bh, 0
2049   12F4             ; START RELATIONAL
2050   12F4 D7            push a
2051   12F5 11            mov a, b
2052   12F6 26 7A 00      mov b, $7a
2053   12F9 B0            cmp a, b
2054   12FA FD 74         sle ; <=
2055   12FC E4            pop a
2056   12FD             ; END RELATIONAL
2057   12FD FD A7         sand a, b ; &&
2058   12FF E4            pop a
2059   1300 D7            push a
2060   1301 11            mov a, b
2061   1302 FA 05 00      lea d, [bp + 5] ; $c
2062   1305 32            mov bl, [d]
2063   1306 A7 00         mov bh, 0
2064   1308             ; START RELATIONAL
2065   1308 D7            push a
2066   1309 11            mov a, b
2067   130A 26 41 00      mov b, $41
2068   130D B0            cmp a, b
2069   130E FD 80         sge ; >=
2070   1310 E4            pop a
2071   1311             ; END RELATIONAL
2072   1311 D7            push a
2073   1312 11            mov a, b
2074   1313 FA 05 00      lea d, [bp + 5] ; $c
2075   1316 32            mov bl, [d]
2076   1317 A7 00         mov bh, 0
2077   1319             ; START RELATIONAL
2078   1319 D7            push a
2079   131A 11            mov a, b
2080   131B 26 5A 00      mov b, $5a
2081   131E B0            cmp a, b
2082   131F FD 74         sle ; <=
2083   1321 E4            pop a
2084   1322             ; END RELATIONAL
2085   1322 FD A7         sand a, b ; &&
2086   1324 E4            pop a
2087   1325 FD A8         sor a, b ; ||
2088   1327 11            mov a, b
2089   1328 FA 05 00      lea d, [bp + 5] ; $c
2090   132B 32            mov bl, [d]
2091   132C A7 00         mov bh, 0
2092   132E             ; START RELATIONAL
2093   132E D7            push a
2094   132F 11            mov a, b
2095   1330 26 5F 00      mov b, $5f
2096   1333 B0            cmp a, b
2097   1334 FD 71         seq ; ==
2098   1336 E4            pop a
2099   1337             ; END RELATIONAL
2100   1337 FD A8         sor a, b ; ||
2101   1339 E4            pop a
2102   133A F9            leave
2103   133B 09            ret
2104   133C             
2105   133C             toupper:
2106   133C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2107   133F             ;; if (ch >= 'a' && ch <= 'z') { 
2108   133F             _if27_cond:
2109   133F FA 05 00      lea d, [bp + 5] ; $ch
2110   1342 32            mov bl, [d]
2111   1343 A7 00         mov bh, 0
2112   1345             ; START RELATIONAL
2113   1345 D7            push a
2114   1346 11            mov a, b
2115   1347 26 61 00      mov b, $61
2116   134A B0            cmp a, b
2117   134B FD 80         sge ; >=
2118   134D E4            pop a
2119   134E             ; END RELATIONAL
2120   134E D7            push a
2121   134F 11            mov a, b
2122   1350 FA 05 00      lea d, [bp + 5] ; $ch
2123   1353 32            mov bl, [d]
2124   1354 A7 00         mov bh, 0
2125   1356             ; START RELATIONAL
2126   1356 D7            push a
2127   1357 11            mov a, b
2128   1358 26 7A 00      mov b, $7a
2129   135B B0            cmp a, b
2130   135C FD 74         sle ; <=
2131   135E E4            pop a
2132   135F             ; END RELATIONAL
2133   135F FD A7         sand a, b ; &&
2134   1361 E4            pop a
2135   1362 C0 00 00      cmp b, 0
2136   1365 C6 7F 13      je _if27_else
2137   1368             _if27_true:
2138   1368             ;; return ch - 'a' + 'A'; 
2139   1368 FA 05 00      lea d, [bp + 5] ; $ch
2140   136B 32            mov bl, [d]
2141   136C A7 00         mov bh, 0
2142   136E             ; START TERMS
2143   136E D7            push a
2144   136F 11            mov a, b
2145   1370 26 61 00      mov b, $61
2146   1373 60            sub a, b
2147   1374 26 41 00      mov b, $41
2148   1377 54            add a, b
2149   1378 27            mov b, a
2150   1379 E4            pop a
2151   137A             ; END TERMS
2152   137A F9            leave
2153   137B 09            ret
2154   137C 0A 87 13      jmp _if27_exit
2155   137F             _if27_else:
2156   137F             ;; return ch; 
2157   137F FA 05 00      lea d, [bp + 5] ; $ch
2158   1382 32            mov bl, [d]
2159   1383 A7 00         mov bh, 0
2160   1385 F9            leave
2161   1386 09            ret
2162   1387             _if27_exit:
2163   1387 F9            leave
2164   1388 09            ret
2165   1389             
2166   1389             is_delimiter:
2167   1389 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2168   138C             ;; if( 
2169   138C             _if28_cond:
2170   138C FA 05 00      lea d, [bp + 5] ; $c
2171   138F 32            mov bl, [d]
2172   1390 A7 00         mov bh, 0
2173   1392             ; START RELATIONAL
2174   1392 D7            push a
2175   1393 11            mov a, b
2176   1394 26 40 00      mov b, $40
2177   1397 B0            cmp a, b
2178   1398 FD 71         seq ; ==
2179   139A E4            pop a
2180   139B             ; END RELATIONAL
2181   139B D7            push a
2182   139C 11            mov a, b
2183   139D FA 05 00      lea d, [bp + 5] ; $c
2184   13A0 32            mov bl, [d]
2185   13A1 A7 00         mov bh, 0
2186   13A3             ; START RELATIONAL
2187   13A3 D7            push a
2188   13A4 11            mov a, b
2189   13A5 26 23 00      mov b, $23
2190   13A8 B0            cmp a, b
2191   13A9 FD 71         seq ; ==
2192   13AB E4            pop a
2193   13AC             ; END RELATIONAL
2194   13AC FD A8         sor a, b ; ||
2195   13AE 11            mov a, b
2196   13AF FA 05 00      lea d, [bp + 5] ; $c
2197   13B2 32            mov bl, [d]
2198   13B3 A7 00         mov bh, 0
2199   13B5             ; START RELATIONAL
2200   13B5 D7            push a
2201   13B6 11            mov a, b
2202   13B7 26 24 00      mov b, $24
2203   13BA B0            cmp a, b
2204   13BB FD 71         seq ; ==
2205   13BD E4            pop a
2206   13BE             ; END RELATIONAL
2207   13BE FD A8         sor a, b ; ||
2208   13C0 11            mov a, b
2209   13C1 FA 05 00      lea d, [bp + 5] ; $c
2210   13C4 32            mov bl, [d]
2211   13C5 A7 00         mov bh, 0
2212   13C7             ; START RELATIONAL
2213   13C7 D7            push a
2214   13C8 11            mov a, b
2215   13C9 26 2B 00      mov b, $2b
2216   13CC B0            cmp a, b
2217   13CD FD 71         seq ; ==
2218   13CF E4            pop a
2219   13D0             ; END RELATIONAL
2220   13D0 FD A8         sor a, b ; ||
2221   13D2 11            mov a, b
2222   13D3 FA 05 00      lea d, [bp + 5] ; $c
2223   13D6 32            mov bl, [d]
2224   13D7 A7 00         mov bh, 0
2225   13D9             ; START RELATIONAL
2226   13D9 D7            push a
2227   13DA 11            mov a, b
2228   13DB 26 2D 00      mov b, $2d
2229   13DE B0            cmp a, b
2230   13DF FD 71         seq ; ==
2231   13E1 E4            pop a
2232   13E2             ; END RELATIONAL
2233   13E2 FD A8         sor a, b ; ||
2234   13E4 11            mov a, b
2235   13E5 FA 05 00      lea d, [bp + 5] ; $c
2236   13E8 32            mov bl, [d]
2237   13E9 A7 00         mov bh, 0
2238   13EB             ; START RELATIONAL
2239   13EB D7            push a
2240   13EC 11            mov a, b
2241   13ED 26 2A 00      mov b, $2a
2242   13F0 B0            cmp a, b
2243   13F1 FD 71         seq ; ==
2244   13F3 E4            pop a
2245   13F4             ; END RELATIONAL
2246   13F4 FD A8         sor a, b ; ||
2247   13F6 11            mov a, b
2248   13F7 FA 05 00      lea d, [bp + 5] ; $c
2249   13FA 32            mov bl, [d]
2250   13FB A7 00         mov bh, 0
2251   13FD             ; START RELATIONAL
2252   13FD D7            push a
2253   13FE 11            mov a, b
2254   13FF 26 2F 00      mov b, $2f
2255   1402 B0            cmp a, b
2256   1403 FD 71         seq ; ==
2257   1405 E4            pop a
2258   1406             ; END RELATIONAL
2259   1406 FD A8         sor a, b ; ||
2260   1408 11            mov a, b
2261   1409 FA 05 00      lea d, [bp + 5] ; $c
2262   140C 32            mov bl, [d]
2263   140D A7 00         mov bh, 0
2264   140F             ; START RELATIONAL
2265   140F D7            push a
2266   1410 11            mov a, b
2267   1411 26 25 00      mov b, $25
2268   1414 B0            cmp a, b
2269   1415 FD 71         seq ; ==
2270   1417 E4            pop a
2271   1418             ; END RELATIONAL
2272   1418 FD A8         sor a, b ; ||
2273   141A 11            mov a, b
2274   141B FA 05 00      lea d, [bp + 5] ; $c
2275   141E 32            mov bl, [d]
2276   141F A7 00         mov bh, 0
2277   1421             ; START RELATIONAL
2278   1421 D7            push a
2279   1422 11            mov a, b
2280   1423 26 5B 00      mov b, $5b
2281   1426 B0            cmp a, b
2282   1427 FD 71         seq ; ==
2283   1429 E4            pop a
2284   142A             ; END RELATIONAL
2285   142A FD A8         sor a, b ; ||
2286   142C 11            mov a, b
2287   142D FA 05 00      lea d, [bp + 5] ; $c
2288   1430 32            mov bl, [d]
2289   1431 A7 00         mov bh, 0
2290   1433             ; START RELATIONAL
2291   1433 D7            push a
2292   1434 11            mov a, b
2293   1435 26 5D 00      mov b, $5d
2294   1438 B0            cmp a, b
2295   1439 FD 71         seq ; ==
2296   143B E4            pop a
2297   143C             ; END RELATIONAL
2298   143C FD A8         sor a, b ; ||
2299   143E 11            mov a, b
2300   143F FA 05 00      lea d, [bp + 5] ; $c
2301   1442 32            mov bl, [d]
2302   1443 A7 00         mov bh, 0
2303   1445             ; START RELATIONAL
2304   1445 D7            push a
2305   1446 11            mov a, b
2306   1447 26 28 00      mov b, $28
2307   144A B0            cmp a, b
2308   144B FD 71         seq ; ==
2309   144D E4            pop a
2310   144E             ; END RELATIONAL
2311   144E FD A8         sor a, b ; ||
2312   1450 11            mov a, b
2313   1451 FA 05 00      lea d, [bp + 5] ; $c
2314   1454 32            mov bl, [d]
2315   1455 A7 00         mov bh, 0
2316   1457             ; START RELATIONAL
2317   1457 D7            push a
2318   1458 11            mov a, b
2319   1459 26 29 00      mov b, $29
2320   145C B0            cmp a, b
2321   145D FD 71         seq ; ==
2322   145F E4            pop a
2323   1460             ; END RELATIONAL
2324   1460 FD A8         sor a, b ; ||
2325   1462 11            mov a, b
2326   1463 FA 05 00      lea d, [bp + 5] ; $c
2327   1466 32            mov bl, [d]
2328   1467 A7 00         mov bh, 0
2329   1469             ; START RELATIONAL
2330   1469 D7            push a
2331   146A 11            mov a, b
2332   146B 26 7B 00      mov b, $7b
2333   146E B0            cmp a, b
2334   146F FD 71         seq ; ==
2335   1471 E4            pop a
2336   1472             ; END RELATIONAL
2337   1472 FD A8         sor a, b ; ||
2338   1474 11            mov a, b
2339   1475 FA 05 00      lea d, [bp + 5] ; $c
2340   1478 32            mov bl, [d]
2341   1479 A7 00         mov bh, 0
2342   147B             ; START RELATIONAL
2343   147B D7            push a
2344   147C 11            mov a, b
2345   147D 26 7D 00      mov b, $7d
2346   1480 B0            cmp a, b
2347   1481 FD 71         seq ; ==
2348   1483 E4            pop a
2349   1484             ; END RELATIONAL
2350   1484 FD A8         sor a, b ; ||
2351   1486 11            mov a, b
2352   1487 FA 05 00      lea d, [bp + 5] ; $c
2353   148A 32            mov bl, [d]
2354   148B A7 00         mov bh, 0
2355   148D             ; START RELATIONAL
2356   148D D7            push a
2357   148E 11            mov a, b
2358   148F 26 3A 00      mov b, $3a
2359   1492 B0            cmp a, b
2360   1493 FD 71         seq ; ==
2361   1495 E4            pop a
2362   1496             ; END RELATIONAL
2363   1496 FD A8         sor a, b ; ||
2364   1498 11            mov a, b
2365   1499 FA 05 00      lea d, [bp + 5] ; $c
2366   149C 32            mov bl, [d]
2367   149D A7 00         mov bh, 0
2368   149F             ; START RELATIONAL
2369   149F D7            push a
2370   14A0 11            mov a, b
2371   14A1 26 3B 00      mov b, $3b
2372   14A4 B0            cmp a, b
2373   14A5 FD 71         seq ; ==
2374   14A7 E4            pop a
2375   14A8             ; END RELATIONAL
2376   14A8 FD A8         sor a, b ; ||
2377   14AA 11            mov a, b
2378   14AB FA 05 00      lea d, [bp + 5] ; $c
2379   14AE 32            mov bl, [d]
2380   14AF A7 00         mov bh, 0
2381   14B1             ; START RELATIONAL
2382   14B1 D7            push a
2383   14B2 11            mov a, b
2384   14B3 26 3C 00      mov b, $3c
2385   14B6 B0            cmp a, b
2386   14B7 FD 71         seq ; ==
2387   14B9 E4            pop a
2388   14BA             ; END RELATIONAL
2389   14BA FD A8         sor a, b ; ||
2390   14BC 11            mov a, b
2391   14BD FA 05 00      lea d, [bp + 5] ; $c
2392   14C0 32            mov bl, [d]
2393   14C1 A7 00         mov bh, 0
2394   14C3             ; START RELATIONAL
2395   14C3 D7            push a
2396   14C4 11            mov a, b
2397   14C5 26 3E 00      mov b, $3e
2398   14C8 B0            cmp a, b
2399   14C9 FD 71         seq ; ==
2400   14CB E4            pop a
2401   14CC             ; END RELATIONAL
2402   14CC FD A8         sor a, b ; ||
2403   14CE 11            mov a, b
2404   14CF FA 05 00      lea d, [bp + 5] ; $c
2405   14D2 32            mov bl, [d]
2406   14D3 A7 00         mov bh, 0
2407   14D5             ; START RELATIONAL
2408   14D5 D7            push a
2409   14D6 11            mov a, b
2410   14D7 26 3D 00      mov b, $3d
2411   14DA B0            cmp a, b
2412   14DB FD 71         seq ; ==
2413   14DD E4            pop a
2414   14DE             ; END RELATIONAL
2415   14DE FD A8         sor a, b ; ||
2416   14E0 11            mov a, b
2417   14E1 FA 05 00      lea d, [bp + 5] ; $c
2418   14E4 32            mov bl, [d]
2419   14E5 A7 00         mov bh, 0
2420   14E7             ; START RELATIONAL
2421   14E7 D7            push a
2422   14E8 11            mov a, b
2423   14E9 26 21 00      mov b, $21
2424   14EC B0            cmp a, b
2425   14ED FD 71         seq ; ==
2426   14EF E4            pop a
2427   14F0             ; END RELATIONAL
2428   14F0 FD A8         sor a, b ; ||
2429   14F2 11            mov a, b
2430   14F3 FA 05 00      lea d, [bp + 5] ; $c
2431   14F6 32            mov bl, [d]
2432   14F7 A7 00         mov bh, 0
2433   14F9             ; START RELATIONAL
2434   14F9 D7            push a
2435   14FA 11            mov a, b
2436   14FB 26 5E 00      mov b, $5e
2437   14FE B0            cmp a, b
2438   14FF FD 71         seq ; ==
2439   1501 E4            pop a
2440   1502             ; END RELATIONAL
2441   1502 FD A8         sor a, b ; ||
2442   1504 11            mov a, b
2443   1505 FA 05 00      lea d, [bp + 5] ; $c
2444   1508 32            mov bl, [d]
2445   1509 A7 00         mov bh, 0
2446   150B             ; START RELATIONAL
2447   150B D7            push a
2448   150C 11            mov a, b
2449   150D 26 26 00      mov b, $26
2450   1510 B0            cmp a, b
2451   1511 FD 71         seq ; ==
2452   1513 E4            pop a
2453   1514             ; END RELATIONAL
2454   1514 FD A8         sor a, b ; ||
2455   1516 11            mov a, b
2456   1517 FA 05 00      lea d, [bp + 5] ; $c
2457   151A 32            mov bl, [d]
2458   151B A7 00         mov bh, 0
2459   151D             ; START RELATIONAL
2460   151D D7            push a
2461   151E 11            mov a, b
2462   151F 26 7C 00      mov b, $7c
2463   1522 B0            cmp a, b
2464   1523 FD 71         seq ; ==
2465   1525 E4            pop a
2466   1526             ; END RELATIONAL
2467   1526 FD A8         sor a, b ; ||
2468   1528 11            mov a, b
2469   1529 FA 05 00      lea d, [bp + 5] ; $c
2470   152C 32            mov bl, [d]
2471   152D A7 00         mov bh, 0
2472   152F             ; START RELATIONAL
2473   152F D7            push a
2474   1530 11            mov a, b
2475   1531 26 7E 00      mov b, $7e
2476   1534 B0            cmp a, b
2477   1535 FD 71         seq ; ==
2478   1537 E4            pop a
2479   1538             ; END RELATIONAL
2480   1538 FD A8         sor a, b ; ||
2481   153A 11            mov a, b
2482   153B FA 05 00      lea d, [bp + 5] ; $c
2483   153E 32            mov bl, [d]
2484   153F A7 00         mov bh, 0
2485   1541             ; START RELATIONAL
2486   1541 D7            push a
2487   1542 11            mov a, b
2488   1543 26 2E 00      mov b, $2e
2489   1546 B0            cmp a, b
2490   1547 FD 71         seq ; ==
2491   1549 E4            pop a
2492   154A             ; END RELATIONAL
2493   154A FD A8         sor a, b ; ||
2494   154C E4            pop a
2495   154D C0 00 00      cmp b, 0
2496   1550 C6 5B 15      je _if28_else
2497   1553             _if28_true:
2498   1553             ;; return 1; 
2499   1553 26 01 00      mov b, $1
2500   1556 F9            leave
2501   1557 09            ret
2502   1558 0A 60 15      jmp _if28_exit
2503   155B             _if28_else:
2504   155B             ;; return 0; 
2505   155B 26 00 00      mov b, $0
2506   155E F9            leave
2507   155F 09            ret
2508   1560             _if28_exit:
2509   1560 F9            leave
2510   1561 09            ret
2511   1562             
2512   1562             getnum:
2513   1562 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2514   1565             ; $n 
2515   1565 52 02 00      sub sp, 2
2516   1568             ;; print(prompt); 
2517   1568 FA 05 00      lea d, [bp + 5] ; $prompt
2518   156B 2A            mov b, [d]
2519   156C FD AB         swp b
2520   156E D8            push b
2521   156F 07 ED 0C      call print
2522   1572 51 02 00      add sp, 2
2523   1575             ;; n = scann(); 
2524   1575 FA FF FF      lea d, [bp + -1] ; $n
2525   1578 DA            push d
2526   1579 07 C8 0C      call scann
2527   157C E7            pop d
2528   157D FD 43         mov [d], b
2529   157F             ;; return n; 
2530   157F FA FF FF      lea d, [bp + -1] ; $n
2531   1582 2A            mov b, [d]
2532   1583 F9            leave
2533   1584 09            ret
2534   1585             
2535   1585             getlet:
2536   1585 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2537   1588             ; $c 
2538   1588 19 0A         mov al, $a
2539   158A 40 00 00      mov [bp + 0], al
2540   158D 52 01 00      sub sp, 1
2541   1590             ;; print(prompt); 
2542   1590 FA 05 00      lea d, [bp + 5] ; $prompt
2543   1593 2A            mov b, [d]
2544   1594 FD AB         swp b
2545   1596 D8            push b
2546   1597 07 ED 0C      call print
2547   159A 51 02 00      add sp, 2
2548   159D             ;; while (c == '\n') { 
2549   159D             _while29_cond:
2550   159D FA 00 00      lea d, [bp + 0] ; $c
2551   15A0 32            mov bl, [d]
2552   15A1 A7 00         mov bh, 0
2553   15A3             ; START RELATIONAL
2554   15A3 D7            push a
2555   15A4 11            mov a, b
2556   15A5 26 0A 00      mov b, $a
2557   15A8 B0            cmp a, b
2558   15A9 FD 71         seq ; ==
2559   15AB E4            pop a
2560   15AC             ; END RELATIONAL
2561   15AC C0 00 00      cmp b, 0
2562   15AF C6 BF 15      je _while29_exit
2563   15B2             _while29_block:
2564   15B2             ;; c = getchar(); 
2565   15B2 FA 00 00      lea d, [bp + 0] ; $c
2566   15B5 DA            push d
2567   15B6 07 B2 0C      call getchar
2568   15B9 E7            pop d
2569   15BA FD 3E         mov [d], bl
2570   15BC 0A 9D 15      jmp _while29_cond
2571   15BF             _while29_exit:
2572   15BF             ;; return toupper(c); 
2573   15BF FA 00 00      lea d, [bp + 0] ; $c
2574   15C2 32            mov bl, [d]
2575   15C3 A7 00         mov bh, 0
2576   15C5 DD            push bl
2577   15C6 07 3C 13      call toupper
2578   15C9 51 01 00      add sp, 1
2579   15CC F9            leave
2580   15CD 09            ret
2581   15CE             
2582   15CE             print_instructions:
2583   15CE F8 00 00      enter 0 ; (push bp; mov bp, sp)
2584   15D1             ;; print("WELCOME TO 'HUNT THE WUMPUS'\n"); 
2585   15D1 26 4C 24      mov b, __s6 ; "WELCOME TO 'HUNT THE WUMPUS'\n"
2586   15D4 FD AB         swp b
2587   15D6 D8            push b
2588   15D7 07 ED 0C      call print
2589   15DA 51 02 00      add sp, 2
2590   15DD             ;; print("THE WUMPUS LIVES IN A CAVE OF 20 ROOMS. EACH ROOM\n"); 
2591   15DD 26 6A 24      mov b, __s7 ; "THE WUMPUS LIVES IN A CAVE OF 20 ROOMS. EACH ROOM\n"
2592   15E0 FD AB         swp b
2593   15E2 D8            push b
2594   15E3 07 ED 0C      call print
2595   15E6 51 02 00      add sp, 2
2596   15E9             ;; print("HAS 3 TUNNELS LEADING TO OTHER ROOMS. (LOOK AT A\n"); 
2597   15E9 26 9D 24      mov b, __s8 ; "HAS 3 TUNNELS LEADING TO OTHER ROOMS. (LOOK AT A\n"
2598   15EC FD AB         swp b
2599   15EE D8            push b
2600   15EF 07 ED 0C      call print
2601   15F2 51 02 00      add sp, 2
2602   15F5             ;; print("DODECAHEDRON TO SEE HOW THIS WORKS-IF YOU DON'T KNOW\n"); 
2603   15F5 26 CF 24      mov b, __s9 ; "DODECAHEDRON TO SEE HOW THIS WORKS-IF YOU DON'T KNOW\n"
2604   15F8 FD AB         swp b
2605   15FA D8            push b
2606   15FB 07 ED 0C      call print
2607   15FE 51 02 00      add sp, 2
2608   1601             ;; print("WHAT A DODECAHEDRON IS, ASK SOMEONE)\n"); 
2609   1601 26 04 25      mov b, __s10 ; "WHAT A DODECAHEDRON IS, ASK SOMEONE)\n"
2610   1604 FD AB         swp b
2611   1606 D8            push b
2612   1607 07 ED 0C      call print
2613   160A 51 02 00      add sp, 2
2614   160D             ;; print("\n"); 
2615   160D 26 4A 24      mov b, __s5 ; "\n"
2616   1610 FD AB         swp b
2617   1612 D8            push b
2618   1613 07 ED 0C      call print
2619   1616 51 02 00      add sp, 2
2620   1619             ;; print(" HAZARDS:\n"); 
2621   1619 26 2A 25      mov b, __s11 ; " HAZARDS:\n"
2622   161C FD AB         swp b
2623   161E D8            push b
2624   161F 07 ED 0C      call print
2625   1622 51 02 00      add sp, 2
2626   1625             ;; print(" BOTTOMLESS PITS: TWO ROOMS HAVE BOTTOMLESS PITS IN THEM\n"); 
2627   1625 26 35 25      mov b, __s12 ; " BOTTOMLESS PITS: TWO ROOMS HAVE BOTTOMLESS PITS IN THEM\n"
2628   1628 FD AB         swp b
2629   162A D8            push b
2630   162B 07 ED 0C      call print
2631   162E 51 02 00      add sp, 2
2632   1631             ;; print(" IF YOU GO THERE, YOU FALL INTO THE PIT (& LOSE!)\n"); 
2633   1631 26 6F 25      mov b, __s13 ; " IF YOU GO THERE, YOU FALL INTO THE PIT (& LOSE!)\n"
2634   1634 FD AB         swp b
2635   1636 D8            push b
2636   1637 07 ED 0C      call print
2637   163A 51 02 00      add sp, 2
2638   163D             ;; print(" SUPER BATS     : TWO OTHER ROOMS HAVE SUPER BATS. IF YOU\n"); 
2639   163D 26 A2 25      mov b, __s14 ; " SUPER BATS     : TWO OTHER ROOMS HAVE SUPER BATS. IF YOU\n"
2640   1640 FD AB         swp b
2641   1642 D8            push b
2642   1643 07 ED 0C      call print
2643   1646 51 02 00      add sp, 2
2644   1649             ;; print(" GO THERE, A BAT GRABS YOU AND TAKES YOU TO SOME OTHER\n"); 
2645   1649 26 DD 25      mov b, __s15 ; " GO THERE, A BAT GRABS YOU AND TAKES YOU TO SOME OTHER\n"
2646   164C FD AB         swp b
2647   164E D8            push b
2648   164F 07 ED 0C      call print
2649   1652 51 02 00      add sp, 2
2650   1655             ;; print(" ROOM AT RANDOM. (WHICH MAY BE TROUBLESOME)\n"); 
2651   1655 26 15 26      mov b, __s16 ; " ROOM AT RANDOM. (WHICH MAY BE TROUBLESOME)\n"
2652   1658 FD AB         swp b
2653   165A D8            push b
2654   165B 07 ED 0C      call print
2655   165E 51 02 00      add sp, 2
2656   1661             ;; print(" WUMPUS:\n"); 
2657   1661 26 42 26      mov b, __s17 ; " WUMPUS:\n"
2658   1664 FD AB         swp b
2659   1666 D8            push b
2660   1667 07 ED 0C      call print
2661   166A 51 02 00      add sp, 2
2662   166D             ;; print(" THE WUMPUS IS NOT BOTHERED BY HAZARDS (HE HAS SUCKER\n"); 
2663   166D 26 4C 26      mov b, __s18 ; " THE WUMPUS IS NOT BOTHERED BY HAZARDS (HE HAS SUCKER\n"
2664   1670 FD AB         swp b
2665   1672 D8            push b
2666   1673 07 ED 0C      call print
2667   1676 51 02 00      add sp, 2
2668   1679             ;; print(" FEET AND IS TOO BIG FOR A BAT TO LIFT).  USUALLY\n"); 
2669   1679 26 83 26      mov b, __s19 ; " FEET AND IS TOO BIG FOR A BAT TO LIFT).  USUALLY\n"
2670   167C FD AB         swp b
2671   167E D8            push b
2672   167F 07 ED 0C      call print
2673   1682 51 02 00      add sp, 2
2674   1685             ;; print(" HE IS ASLEEP.  TWO THINGS WAKE HIM UP: YOU SHOOTING AN\n"); 
2675   1685 26 B6 26      mov b, __s20 ; " HE IS ASLEEP.  TWO THINGS WAKE HIM UP: YOU SHOOTING AN\n"
2676   1688 FD AB         swp b
2677   168A D8            push b
2678   168B 07 ED 0C      call print
2679   168E 51 02 00      add sp, 2
2680   1691             ;; print(" ARROW OR YOU ENTERING HIS ROOM.\n"); 
2681   1691 26 EF 26      mov b, __s21 ; " ARROW OR YOU ENTERING HIS ROOM.\n"
2682   1694 FD AB         swp b
2683   1696 D8            push b
2684   1697 07 ED 0C      call print
2685   169A 51 02 00      add sp, 2
2686   169D             ;; print(" IF THE WUMPUS WAKES HE MOVES (P=.75) ONE ROOM\n"); 
2687   169D 26 11 27      mov b, __s22 ; " IF THE WUMPUS WAKES HE MOVES (P=.75) ONE ROOM\n"
2688   16A0 FD AB         swp b
2689   16A2 D8            push b
2690   16A3 07 ED 0C      call print
2691   16A6 51 02 00      add sp, 2
2692   16A9             ;; print(" OR STAYS STILL (P=.25).  AFTER THAT, IF HE IS WHERE YOU\n"); 
2693   16A9 26 41 27      mov b, __s23 ; " OR STAYS STILL (P=.25).  AFTER THAT, IF HE IS WHERE YOU\n"
2694   16AC FD AB         swp b
2695   16AE D8            push b
2696   16AF 07 ED 0C      call print
2697   16B2 51 02 00      add sp, 2
2698   16B5             ;; print(" ARE, HE EATS YOU UP AND YOU LOSE!\n"); 
2699   16B5 26 7B 27      mov b, __s24 ; " ARE, HE EATS YOU UP AND YOU LOSE!\n"
2700   16B8 FD AB         swp b
2701   16BA D8            push b
2702   16BB 07 ED 0C      call print
2703   16BE 51 02 00      add sp, 2
2704   16C1             ;; print("\n"); 
2705   16C1 26 4A 24      mov b, __s5 ; "\n"
2706   16C4 FD AB         swp b
2707   16C6 D8            push b
2708   16C7 07 ED 0C      call print
2709   16CA 51 02 00      add sp, 2
2710   16CD             ;; print(" YOU:\n"); 
2711   16CD 26 9F 27      mov b, __s25 ; " YOU:\n"
2712   16D0 FD AB         swp b
2713   16D2 D8            push b
2714   16D3 07 ED 0C      call print
2715   16D6 51 02 00      add sp, 2
2716   16D9             ;; print(" EACH TURN YOU MAY MOVE OR SHOOT A CROOKED ARROW\n"); 
2717   16D9 26 A6 27      mov b, __s26 ; " EACH TURN YOU MAY MOVE OR SHOOT A CROOKED ARROW\n"
2718   16DC FD AB         swp b
2719   16DE D8            push b
2720   16DF 07 ED 0C      call print
2721   16E2 51 02 00      add sp, 2
2722   16E5             ;; print(" MOVING:  YOU CAN MOVE ONE ROOM (THRU ONE TUNNEL)\n"); 
2723   16E5 26 D8 27      mov b, __s27 ; " MOVING:  YOU CAN MOVE ONE ROOM (THRU ONE TUNNEL)\n"
2724   16E8 FD AB         swp b
2725   16EA D8            push b
2726   16EB 07 ED 0C      call print
2727   16EE 51 02 00      add sp, 2
2728   16F1             ;; print(" ARROWS:  YOU HAVE 5 ARROWS.  YOU LOSE WHEN YOU RUN OUT\n"); 
2729   16F1 26 0B 28      mov b, __s28 ; " ARROWS:  YOU HAVE 5 ARROWS.  YOU LOSE WHEN YOU RUN OUT\n"
2730   16F4 FD AB         swp b
2731   16F6 D8            push b
2732   16F7 07 ED 0C      call print
2733   16FA 51 02 00      add sp, 2
2734   16FD             ;; print(" EACH ARROW CAN GO FROM 1 TO 5 ROOMS. YOU AIM BY TELLING\n"); 
2735   16FD 26 44 28      mov b, __s29 ; " EACH ARROW CAN GO FROM 1 TO 5 ROOMS. YOU AIM BY TELLING\n"
2736   1700 FD AB         swp b
2737   1702 D8            push b
2738   1703 07 ED 0C      call print
2739   1706 51 02 00      add sp, 2
2740   1709             ;; print("   THE COMPUTER THE ROOM#S YOU WANT THE ARROW TO GO TO.\n"); 
2741   1709 26 7E 28      mov b, __s30 ; "   THE COMPUTER THE ROOM#S YOU WANT THE ARROW TO GO TO.\n"
2742   170C FD AB         swp b
2743   170E D8            push b
2744   170F 07 ED 0C      call print
2745   1712 51 02 00      add sp, 2
2746   1715             ;; print("   IF THE ARROW CAN'T GO THAT WAY (IF NO TUNNEL) IT MOVES\n"); 
2747   1715 26 B7 28      mov b, __s31 ; "   IF THE ARROW CAN'T GO THAT WAY (IF NO TUNNEL) IT MOVES\n"
2748   1718 FD AB         swp b
2749   171A D8            push b
2750   171B 07 ED 0C      call print
2751   171E 51 02 00      add sp, 2
2752   1721             ;; print("   AT RANDOM TO THE NEXT ROOM.\n"); 
2753   1721 26 F1 28      mov b, __s32 ; "   AT RANDOM TO THE NEXT ROOM.\n"
2754   1724 FD AB         swp b
2755   1726 D8            push b
2756   1727 07 ED 0C      call print
2757   172A 51 02 00      add sp, 2
2758   172D             ;; print("     IF THE ARROW HITS THE WUMPUS, YOU WIN.\n"); 
2759   172D 26 11 29      mov b, __s33 ; "     IF THE ARROW HITS THE WUMPUS, YOU WIN.\n"
2760   1730 FD AB         swp b
2761   1732 D8            push b
2762   1733 07 ED 0C      call print
2763   1736 51 02 00      add sp, 2
2764   1739             ;; print("     IF THE ARROW HITS YOU, YOU LOSE.\n"); 
2765   1739 26 3E 29      mov b, __s34 ; "     IF THE ARROW HITS YOU, YOU LOSE.\n"
2766   173C FD AB         swp b
2767   173E D8            push b
2768   173F 07 ED 0C      call print
2769   1742 51 02 00      add sp, 2
2770   1745             ;; print(" WARNINGS:\n"); 
2771   1745 26 65 29      mov b, __s35 ; " WARNINGS:\n"
2772   1748 FD AB         swp b
2773   174A D8            push b
2774   174B 07 ED 0C      call print
2775   174E 51 02 00      add sp, 2
2776   1751             ;; print(" WHEN YOU ARE ONE ROOM AWAY FROM A WUMPUS OR HAZARD,\n"); 
2777   1751 26 71 29      mov b, __s36 ; " WHEN YOU ARE ONE ROOM AWAY FROM A WUMPUS OR HAZARD,\n"
2778   1754 FD AB         swp b
2779   1756 D8            push b
2780   1757 07 ED 0C      call print
2781   175A 51 02 00      add sp, 2
2782   175D             ;; print(" THE COMPUTER SAYS:\n"); 
2783   175D 26 A7 29      mov b, __s37 ; " THE COMPUTER SAYS:\n"
2784   1760 FD AB         swp b
2785   1762 D8            push b
2786   1763 07 ED 0C      call print
2787   1766 51 02 00      add sp, 2
2788   1769             ;; print(" WUMPUS:  'I SMELL A WUMPUS'\n"); 
2789   1769 26 BC 29      mov b, __s38 ; " WUMPUS:  'I SMELL A WUMPUS'\n"
2790   176C FD AB         swp b
2791   176E D8            push b
2792   176F 07 ED 0C      call print
2793   1772 51 02 00      add sp, 2
2794   1775             ;; print(" BAT   :  'BATS NEARBY'\n"); 
2795   1775 26 DA 29      mov b, __s39 ; " BAT   :  'BATS NEARBY'\n"
2796   1778 FD AB         swp b
2797   177A D8            push b
2798   177B 07 ED 0C      call print
2799   177E 51 02 00      add sp, 2
2800   1781             ;; print(" PIT   :  'I FEEL A DRAFT'\n"); 
2801   1781 26 F3 29      mov b, __s40 ; " PIT   :  'I FEEL A DRAFT'\n"
2802   1784 FD AB         swp b
2803   1786 D8            push b
2804   1787 07 ED 0C      call print
2805   178A 51 02 00      add sp, 2
2806   178D             ;; print("\n"); 
2807   178D 26 4A 24      mov b, __s5 ; "\n"
2808   1790 FD AB         swp b
2809   1792 D8            push b
2810   1793 07 ED 0C      call print
2811   1796 51 02 00      add sp, 2
2812   1799 F9            leave
2813   179A 09            ret
2814   179B             
2815   179B             show_room:
2816   179B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2817   179E             ; $room 
2818   179E             ; $k 
2819   179E 52 04 00      sub sp, 4
2820   17A1             ;; print("\n"); 
2821   17A1 26 4A 24      mov b, __s5 ; "\n"
2822   17A4 FD AB         swp b
2823   17A6 D8            push b
2824   17A7 07 ED 0C      call print
2825   17AA 51 02 00      add sp, 2
2826   17AD             ;; for (k = 0; k < 3; k++) { 
2827   17AD             _for30_init:
2828   17AD FA FD FF      lea d, [bp + -3] ; $k
2829   17B0 DA            push d
2830   17B1 26 00 00      mov b, $0
2831   17B4 E7            pop d
2832   17B5 FD 43         mov [d], b
2833   17B7             _for30_cond:
2834   17B7 FA FD FF      lea d, [bp + -3] ; $k
2835   17BA 2A            mov b, [d]
2836   17BB             ; START RELATIONAL
2837   17BB D7            push a
2838   17BC 11            mov a, b
2839   17BD 26 03 00      mov b, $3
2840   17C0 B0            cmp a, b
2841   17C1 FD 73         slt ; < 
2842   17C3 E4            pop a
2843   17C4             ; END RELATIONAL
2844   17C4 C0 00 00      cmp b, 0
2845   17C7 C6 CE 18      je _for30_exit
2846   17CA             _for30_block:
2847   17CA             ;; room = cave[loc[ 0  ]][k]; 
2848   17CA FA FF FF      lea d, [bp + -1] ; $room
2849   17CD DA            push d
2850   17CE 3B 39 23      mov d, _cave_data ; $cave
2851   17D1 D7            push a
2852   17D2 DA            push d
2853   17D3 3B 2B 23      mov d, _loc_data ; $loc
2854   17D6 D7            push a
2855   17D7 DA            push d
2856   17D8 26 00 00      mov b, $0
2857   17DB E7            pop d
2858   17DC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2859   17E0 E4            pop a
2860   17E1 2A            mov b, [d]
2861   17E2 E7            pop d
2862   17E3 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
2863   17E7 DA            push d
2864   17E8 FA FD FF      lea d, [bp + -3] ; $k
2865   17EB 2A            mov b, [d]
2866   17EC E7            pop d
2867   17ED FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2868   17F1 E4            pop a
2869   17F2 2A            mov b, [d]
2870   17F3 E7            pop d
2871   17F4 FD 43         mov [d], b
2872   17F6             ;; if (room == loc[ 1     ]) { 
2873   17F6             _if31_cond:
2874   17F6 FA FF FF      lea d, [bp + -1] ; $room
2875   17F9 2A            mov b, [d]
2876   17FA             ; START RELATIONAL
2877   17FA D7            push a
2878   17FB 11            mov a, b
2879   17FC 3B 2B 23      mov d, _loc_data ; $loc
2880   17FF D7            push a
2881   1800 DA            push d
2882   1801 26 01 00      mov b, $1
2883   1804 E7            pop d
2884   1805 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2885   1809 E4            pop a
2886   180A 2A            mov b, [d]
2887   180B B0            cmp a, b
2888   180C FD 71         seq ; ==
2889   180E E4            pop a
2890   180F             ; END RELATIONAL
2891   180F C0 00 00      cmp b, 0
2892   1812 C6 24 18      je _if31_else
2893   1815             _if31_true:
2894   1815             ;; print("I SMELL A WUMPUS!\n"); 
2895   1815 26 0F 2A      mov b, __s41 ; "I SMELL A WUMPUS!\n"
2896   1818 FD AB         swp b
2897   181A D8            push b
2898   181B 07 ED 0C      call print
2899   181E 51 02 00      add sp, 2
2900   1821 0A BC 18      jmp _if31_exit
2901   1824             _if31_else:
2902   1824             ;; if (room == loc[ 2   ] || room == loc[ 3   ]) { 
2903   1824             _if32_cond:
2904   1824 FA FF FF      lea d, [bp + -1] ; $room
2905   1827 2A            mov b, [d]
2906   1828             ; START RELATIONAL
2907   1828 D7            push a
2908   1829 11            mov a, b
2909   182A 3B 2B 23      mov d, _loc_data ; $loc
2910   182D D7            push a
2911   182E DA            push d
2912   182F 26 02 00      mov b, $2
2913   1832 E7            pop d
2914   1833 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2915   1837 E4            pop a
2916   1838 2A            mov b, [d]
2917   1839 B0            cmp a, b
2918   183A FD 71         seq ; ==
2919   183C E4            pop a
2920   183D             ; END RELATIONAL
2921   183D D7            push a
2922   183E 11            mov a, b
2923   183F FA FF FF      lea d, [bp + -1] ; $room
2924   1842 2A            mov b, [d]
2925   1843             ; START RELATIONAL
2926   1843 D7            push a
2927   1844 11            mov a, b
2928   1845 3B 2B 23      mov d, _loc_data ; $loc
2929   1848 D7            push a
2930   1849 DA            push d
2931   184A 26 03 00      mov b, $3
2932   184D E7            pop d
2933   184E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2934   1852 E4            pop a
2935   1853 2A            mov b, [d]
2936   1854 B0            cmp a, b
2937   1855 FD 71         seq ; ==
2938   1857 E4            pop a
2939   1858             ; END RELATIONAL
2940   1858 FD A8         sor a, b ; ||
2941   185A E4            pop a
2942   185B C0 00 00      cmp b, 0
2943   185E C6 70 18      je _if32_else
2944   1861             _if32_true:
2945   1861             ;; print("I FEEL A DRAFT\n"); 
2946   1861 26 22 2A      mov b, __s42 ; "I FEEL A DRAFT\n"
2947   1864 FD AB         swp b
2948   1866 D8            push b
2949   1867 07 ED 0C      call print
2950   186A 51 02 00      add sp, 2
2951   186D 0A BC 18      jmp _if32_exit
2952   1870             _if32_else:
2953   1870             ;; if (room == loc[ 4    ] || room == loc[ 5    ]) { 
2954   1870             _if33_cond:
2955   1870 FA FF FF      lea d, [bp + -1] ; $room
2956   1873 2A            mov b, [d]
2957   1874             ; START RELATIONAL
2958   1874 D7            push a
2959   1875 11            mov a, b
2960   1876 3B 2B 23      mov d, _loc_data ; $loc
2961   1879 D7            push a
2962   187A DA            push d
2963   187B 26 04 00      mov b, $4
2964   187E E7            pop d
2965   187F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2966   1883 E4            pop a
2967   1884 2A            mov b, [d]
2968   1885 B0            cmp a, b
2969   1886 FD 71         seq ; ==
2970   1888 E4            pop a
2971   1889             ; END RELATIONAL
2972   1889 D7            push a
2973   188A 11            mov a, b
2974   188B FA FF FF      lea d, [bp + -1] ; $room
2975   188E 2A            mov b, [d]
2976   188F             ; START RELATIONAL
2977   188F D7            push a
2978   1890 11            mov a, b
2979   1891 3B 2B 23      mov d, _loc_data ; $loc
2980   1894 D7            push a
2981   1895 DA            push d
2982   1896 26 05 00      mov b, $5
2983   1899 E7            pop d
2984   189A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2985   189E E4            pop a
2986   189F 2A            mov b, [d]
2987   18A0 B0            cmp a, b
2988   18A1 FD 71         seq ; ==
2989   18A3 E4            pop a
2990   18A4             ; END RELATIONAL
2991   18A4 FD A8         sor a, b ; ||
2992   18A6 E4            pop a
2993   18A7 C0 00 00      cmp b, 0
2994   18AA C6 BC 18      je _if33_exit
2995   18AD             _if33_true:
2996   18AD             ;; print("BATS NEARBY!\n"); 
2997   18AD 26 32 2A      mov b, __s43 ; "BATS NEARBY!\n"
2998   18B0 FD AB         swp b
2999   18B2 D8            push b
3000   18B3 07 ED 0C      call print
3001   18B6 51 02 00      add sp, 2
3002   18B9 0A BC 18      jmp _if33_exit
3003   18BC             _if33_exit:
3004   18BC             _if32_exit:
3005   18BC             _if31_exit:
3006   18BC             _for30_update:
3007   18BC FA FD FF      lea d, [bp + -3] ; $k
3008   18BF 2A            mov b, [d]
3009   18C0 FD 79         mov g, b
3010   18C2 FD 77         inc b
3011   18C4 FA FD FF      lea d, [bp + -3] ; $k
3012   18C7 FD 43         mov [d], b
3013   18C9 FD 27         mov b, g
3014   18CB 0A B7 17      jmp _for30_cond
3015   18CE             _for30_exit:
3016   18CE             ;; print("YOU ARE IN ROOM "); printu(loc[ 0  ]+1); print("\n"); 
3017   18CE 26 40 2A      mov b, __s44 ; "YOU ARE IN ROOM "
3018   18D1 FD AB         swp b
3019   18D3 D8            push b
3020   18D4 07 ED 0C      call print
3021   18D7 51 02 00      add sp, 2
3022   18DA             ;; printu(loc[ 0  ]+1); print("\n"); 
3023   18DA 3B 2B 23      mov d, _loc_data ; $loc
3024   18DD D7            push a
3025   18DE DA            push d
3026   18DF 26 00 00      mov b, $0
3027   18E2 E7            pop d
3028   18E3 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3029   18E7 E4            pop a
3030   18E8 2A            mov b, [d]
3031   18E9             ; START TERMS
3032   18E9 D7            push a
3033   18EA 11            mov a, b
3034   18EB 26 01 00      mov b, $1
3035   18EE 54            add a, b
3036   18EF 27            mov b, a
3037   18F0 E4            pop a
3038   18F1             ; END TERMS
3039   18F1 FD AB         swp b
3040   18F3 D8            push b
3041   18F4 07 B9 0B      call printu
3042   18F7 51 02 00      add sp, 2
3043   18FA             ;; print("\n"); 
3044   18FA 26 4A 24      mov b, __s5 ; "\n"
3045   18FD FD AB         swp b
3046   18FF D8            push b
3047   1900 07 ED 0C      call print
3048   1903 51 02 00      add sp, 2
3049   1906             ;; print("TUNNELS LEAD TO ");  
3050   1906 26 51 2A      mov b, __s45 ; "TUNNELS LEAD TO "
3051   1909 FD AB         swp b
3052   190B D8            push b
3053   190C 07 ED 0C      call print
3054   190F 51 02 00      add sp, 2
3055   1912             ;; printu(cave[loc[ 0  ]][0]+1); print(", "); 
3056   1912 3B 39 23      mov d, _cave_data ; $cave
3057   1915 D7            push a
3058   1916 DA            push d
3059   1917 3B 2B 23      mov d, _loc_data ; $loc
3060   191A D7            push a
3061   191B DA            push d
3062   191C 26 00 00      mov b, $0
3063   191F E7            pop d
3064   1920 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3065   1924 E4            pop a
3066   1925 2A            mov b, [d]
3067   1926 E7            pop d
3068   1927 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
3069   192B DA            push d
3070   192C 26 00 00      mov b, $0
3071   192F E7            pop d
3072   1930 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3073   1934 E4            pop a
3074   1935 2A            mov b, [d]
3075   1936             ; START TERMS
3076   1936 D7            push a
3077   1937 11            mov a, b
3078   1938 26 01 00      mov b, $1
3079   193B 54            add a, b
3080   193C 27            mov b, a
3081   193D E4            pop a
3082   193E             ; END TERMS
3083   193E FD AB         swp b
3084   1940 D8            push b
3085   1941 07 B9 0B      call printu
3086   1944 51 02 00      add sp, 2
3087   1947             ;; print(", "); 
3088   1947 26 62 2A      mov b, __s46 ; ", "
3089   194A FD AB         swp b
3090   194C D8            push b
3091   194D 07 ED 0C      call print
3092   1950 51 02 00      add sp, 2
3093   1953             ;; printu(cave[loc[ 0  ]][1]+1); print(", "); 
3094   1953 3B 39 23      mov d, _cave_data ; $cave
3095   1956 D7            push a
3096   1957 DA            push d
3097   1958 3B 2B 23      mov d, _loc_data ; $loc
3098   195B D7            push a
3099   195C DA            push d
3100   195D 26 00 00      mov b, $0
3101   1960 E7            pop d
3102   1961 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3103   1965 E4            pop a
3104   1966 2A            mov b, [d]
3105   1967 E7            pop d
3106   1968 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
3107   196C DA            push d
3108   196D 26 01 00      mov b, $1
3109   1970 E7            pop d
3110   1971 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3111   1975 E4            pop a
3112   1976 2A            mov b, [d]
3113   1977             ; START TERMS
3114   1977 D7            push a
3115   1978 11            mov a, b
3116   1979 26 01 00      mov b, $1
3117   197C 54            add a, b
3118   197D 27            mov b, a
3119   197E E4            pop a
3120   197F             ; END TERMS
3121   197F FD AB         swp b
3122   1981 D8            push b
3123   1982 07 B9 0B      call printu
3124   1985 51 02 00      add sp, 2
3125   1988             ;; print(", "); 
3126   1988 26 62 2A      mov b, __s46 ; ", "
3127   198B FD AB         swp b
3128   198D D8            push b
3129   198E 07 ED 0C      call print
3130   1991 51 02 00      add sp, 2
3131   1994             ;; printu(cave[loc[ 0  ]][2]+1); 
3132   1994 3B 39 23      mov d, _cave_data ; $cave
3133   1997 D7            push a
3134   1998 DA            push d
3135   1999 3B 2B 23      mov d, _loc_data ; $loc
3136   199C D7            push a
3137   199D DA            push d
3138   199E 26 00 00      mov b, $0
3139   19A1 E7            pop d
3140   19A2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3141   19A6 E4            pop a
3142   19A7 2A            mov b, [d]
3143   19A8 E7            pop d
3144   19A9 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
3145   19AD DA            push d
3146   19AE 26 02 00      mov b, $2
3147   19B1 E7            pop d
3148   19B2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3149   19B6 E4            pop a
3150   19B7 2A            mov b, [d]
3151   19B8             ; START TERMS
3152   19B8 D7            push a
3153   19B9 11            mov a, b
3154   19BA 26 01 00      mov b, $1
3155   19BD 54            add a, b
3156   19BE 27            mov b, a
3157   19BF E4            pop a
3158   19C0             ; END TERMS
3159   19C0 FD AB         swp b
3160   19C2 D8            push b
3161   19C3 07 B9 0B      call printu
3162   19C6 51 02 00      add sp, 2
3163   19C9             ;; print("\n\n"); 
3164   19C9 26 65 2A      mov b, __s47 ; "\n\n"
3165   19CC FD AB         swp b
3166   19CE D8            push b
3167   19CF 07 ED 0C      call print
3168   19D2 51 02 00      add sp, 2
3169   19D5 F9            leave
3170   19D6 09            ret
3171   19D7             
3172   19D7             move_or_shoot:
3173   19D7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3174   19DA             ; $c 
3175   19DA 10 FF FF      mov a, $ffffffff
3176   19DD 45 FF FF      mov [bp + -1], a
3177   19E0 52 02 00      sub sp, 2
3178   19E3             ;; while ((c != 'S') && (c != 'M')) { 
3179   19E3             _while34_cond:
3180   19E3 FA FF FF      lea d, [bp + -1] ; $c
3181   19E6 2A            mov b, [d]
3182   19E7             ; START RELATIONAL
3183   19E7 D7            push a
3184   19E8 11            mov a, b
3185   19E9 26 53 00      mov b, $53
3186   19EC B0            cmp a, b
3187   19ED FD 72         sneq ; !=
3188   19EF E4            pop a
3189   19F0             ; END RELATIONAL
3190   19F0 D7            push a
3191   19F1 11            mov a, b
3192   19F2 FA FF FF      lea d, [bp + -1] ; $c
3193   19F5 2A            mov b, [d]
3194   19F6             ; START RELATIONAL
3195   19F6 D7            push a
3196   19F7 11            mov a, b
3197   19F8 26 4D 00      mov b, $4d
3198   19FB B0            cmp a, b
3199   19FC FD 72         sneq ; !=
3200   19FE E4            pop a
3201   19FF             ; END RELATIONAL
3202   19FF FD A7         sand a, b ; &&
3203   1A01 E4            pop a
3204   1A02 C0 00 00      cmp b, 0
3205   1A05 C6 1E 1A      je _while34_exit
3206   1A08             _while34_block:
3207   1A08             ;; c = getlet("SHOOT OR MOVE (S-M)"); 
3208   1A08 FA FF FF      lea d, [bp + -1] ; $c
3209   1A0B DA            push d
3210   1A0C 26 68 2A      mov b, __s48 ; "SHOOT OR MOVE (S-M)"
3211   1A0F FD AB         swp b
3212   1A11 D8            push b
3213   1A12 07 85 15      call getlet
3214   1A15 51 02 00      add sp, 2
3215   1A18 E7            pop d
3216   1A19 FD 43         mov [d], b
3217   1A1B 0A E3 19      jmp _while34_cond
3218   1A1E             _while34_exit:
3219   1A1E             ;; return (c == 'S') ? 1 : 0; 
3220   1A1E             _ternary35_cond:
3221   1A1E FA FF FF      lea d, [bp + -1] ; $c
3222   1A21 2A            mov b, [d]
3223   1A22             ; START RELATIONAL
3224   1A22 D7            push a
3225   1A23 11            mov a, b
3226   1A24 26 53 00      mov b, $53
3227   1A27 B0            cmp a, b
3228   1A28 FD 71         seq ; ==
3229   1A2A E4            pop a
3230   1A2B             ; END RELATIONAL
3231   1A2B C0 00 00      cmp b, 0
3232   1A2E C6 37 1A      je _ternary35_false
3233   1A31             _ternary35_true:
3234   1A31 26 01 00      mov b, $1
3235   1A34 0A 3A 1A      jmp _ternary35_exit
3236   1A37             _ternary35_false:
3237   1A37 26 00 00      mov b, $0
3238   1A3A             _ternary35_exit:
3239   1A3A F9            leave
3240   1A3B 09            ret
3241   1A3C             
3242   1A3C             move_wumpus:
3243   1A3C F8 00 00      enter 0 ; (push bp; mov bp, sp)
3244   1A3F             ; $k 
3245   1A3F 52 02 00      sub sp, 2
3246   1A42             ;; k = rand2() % 4; 
3247   1A42 FA FF FF      lea d, [bp + -1] ; $k
3248   1A45 DA            push d
3249   1A46 07 31 20      call rand2
3250   1A49             ; START FACTORS
3251   1A49 D7            push a
3252   1A4A 11            mov a, b
3253   1A4B 26 04 00      mov b, $4
3254   1A4E AE            div a, b ; 
3255   1A4F 11            mov a, b
3256   1A50 27            mov b, a
3257   1A51 E4            pop a
3258   1A52             ; END FACTORS
3259   1A52 E7            pop d
3260   1A53 FD 43         mov [d], b
3261   1A55             ;; if (k < 3) { 
3262   1A55             _if36_cond:
3263   1A55 FA FF FF      lea d, [bp + -1] ; $k
3264   1A58 2A            mov b, [d]
3265   1A59             ; START RELATIONAL
3266   1A59 D7            push a
3267   1A5A 11            mov a, b
3268   1A5B 26 03 00      mov b, $3
3269   1A5E B0            cmp a, b
3270   1A5F FD 73         slt ; < 
3271   1A61 E4            pop a
3272   1A62             ; END RELATIONAL
3273   1A62 C0 00 00      cmp b, 0
3274   1A65 C6 A2 1A      je _if36_exit
3275   1A68             _if36_true:
3276   1A68             ;; loc[ 1     ] = cave[loc[ 1     ]][k]; 
3277   1A68 3B 2B 23      mov d, _loc_data ; $loc
3278   1A6B D7            push a
3279   1A6C DA            push d
3280   1A6D 26 01 00      mov b, $1
3281   1A70 E7            pop d
3282   1A71 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3283   1A75 E4            pop a
3284   1A76 DA            push d
3285   1A77 3B 39 23      mov d, _cave_data ; $cave
3286   1A7A D7            push a
3287   1A7B DA            push d
3288   1A7C 3B 2B 23      mov d, _loc_data ; $loc
3289   1A7F D7            push a
3290   1A80 DA            push d
3291   1A81 26 01 00      mov b, $1
3292   1A84 E7            pop d
3293   1A85 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3294   1A89 E4            pop a
3295   1A8A 2A            mov b, [d]
3296   1A8B E7            pop d
3297   1A8C FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
3298   1A90 DA            push d
3299   1A91 FA FF FF      lea d, [bp + -1] ; $k
3300   1A94 2A            mov b, [d]
3301   1A95 E7            pop d
3302   1A96 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3303   1A9A E4            pop a
3304   1A9B 2A            mov b, [d]
3305   1A9C E7            pop d
3306   1A9D FD 43         mov [d], b
3307   1A9F 0A A2 1A      jmp _if36_exit
3308   1AA2             _if36_exit:
3309   1AA2             ;; if (loc[ 1     ] == loc[ 0  ]) { 
3310   1AA2             _if37_cond:
3311   1AA2 3B 2B 23      mov d, _loc_data ; $loc
3312   1AA5 D7            push a
3313   1AA6 DA            push d
3314   1AA7 26 01 00      mov b, $1
3315   1AAA E7            pop d
3316   1AAB FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3317   1AAF E4            pop a
3318   1AB0 2A            mov b, [d]
3319   1AB1             ; START RELATIONAL
3320   1AB1 D7            push a
3321   1AB2 11            mov a, b
3322   1AB3 3B 2B 23      mov d, _loc_data ; $loc
3323   1AB6 D7            push a
3324   1AB7 DA            push d
3325   1AB8 26 00 00      mov b, $0
3326   1ABB E7            pop d
3327   1ABC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3328   1AC0 E4            pop a
3329   1AC1 2A            mov b, [d]
3330   1AC2 B0            cmp a, b
3331   1AC3 FD 71         seq ; ==
3332   1AC5 E4            pop a
3333   1AC6             ; END RELATIONAL
3334   1AC6 C0 00 00      cmp b, 0
3335   1AC9 C6 E5 1A      je _if37_exit
3336   1ACC             _if37_true:
3337   1ACC             ;; print("TSK TSK TSK - WUMPUS GOT YOU!\n"); 
3338   1ACC 26 7C 2A      mov b, __s49 ; "TSK TSK TSK - WUMPUS GOT YOU!\n"
3339   1ACF FD AB         swp b
3340   1AD1 D8            push b
3341   1AD2 07 ED 0C      call print
3342   1AD5 51 02 00      add sp, 2
3343   1AD8             ;; finished =  2   ; 
3344   1AD8 3B 37 23      mov d, _finished ; $finished
3345   1ADB DA            push d
3346   1ADC 26 02 00      mov b, $2
3347   1ADF E7            pop d
3348   1AE0 FD 43         mov [d], b
3349   1AE2 0A E5 1A      jmp _if37_exit
3350   1AE5             _if37_exit:
3351   1AE5 F9            leave
3352   1AE6 09            ret
3353   1AE7             
3354   1AE7             shoot:
3355   1AE7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3356   1AEA             ; $path 
3357   1AEA             ; $scratchloc 
3358   1AEA 10 FF FF      mov a, $ffffffff
3359   1AED 45 F5 FF      mov [bp + -11], a
3360   1AF0             ; $len 
3361   1AF0             ; $k 
3362   1AF0 52 10 00      sub sp, 16
3363   1AF3             ;; finished =  0  ; 
3364   1AF3 3B 37 23      mov d, _finished ; $finished
3365   1AF6 DA            push d
3366   1AF7 26 00 00      mov b, $0
3367   1AFA E7            pop d
3368   1AFB FD 43         mov [d], b
3369   1AFD             ;; len = -1; 
3370   1AFD FA F3 FF      lea d, [bp + -13] ; $len
3371   1B00 DA            push d
3372   1B01 26 01 00      mov b, $1
3373   1B04 FD 97         neg b
3374   1B06 E7            pop d
3375   1B07 FD 43         mov [d], b
3376   1B09             ;; while (len < 1 || len > 5) { 
3377   1B09             _while38_cond:
3378   1B09 FA F3 FF      lea d, [bp + -13] ; $len
3379   1B0C 2A            mov b, [d]
3380   1B0D             ; START RELATIONAL
3381   1B0D D7            push a
3382   1B0E 11            mov a, b
3383   1B0F 26 01 00      mov b, $1
3384   1B12 B0            cmp a, b
3385   1B13 FD 73         slt ; < 
3386   1B15 E4            pop a
3387   1B16             ; END RELATIONAL
3388   1B16 D7            push a
3389   1B17 11            mov a, b
3390   1B18 FA F3 FF      lea d, [bp + -13] ; $len
3391   1B1B 2A            mov b, [d]
3392   1B1C             ; START RELATIONAL
3393   1B1C D7            push a
3394   1B1D 11            mov a, b
3395   1B1E 26 05 00      mov b, $5
3396   1B21 B0            cmp a, b
3397   1B22 FD 7F         sgt ; >
3398   1B24 E4            pop a
3399   1B25             ; END RELATIONAL
3400   1B25 FD A8         sor a, b ; ||
3401   1B27 E4            pop a
3402   1B28 C0 00 00      cmp b, 0
3403   1B2B C6 44 1B      je _while38_exit
3404   1B2E             _while38_block:
3405   1B2E             ;; len = getnum("NO. OF ROOMS (1-5)"); 
3406   1B2E FA F3 FF      lea d, [bp + -13] ; $len
3407   1B31 DA            push d
3408   1B32 26 9B 2A      mov b, __s50 ; "NO. OF ROOMS (1-5)"
3409   1B35 FD AB         swp b
3410   1B37 D8            push b
3411   1B38 07 62 15      call getnum
3412   1B3B 51 02 00      add sp, 2
3413   1B3E E7            pop d
3414   1B3F FD 43         mov [d], b
3415   1B41 0A 09 1B      jmp _while38_cond
3416   1B44             _while38_exit:
3417   1B44             ;; k = 0; 
3418   1B44 FA F1 FF      lea d, [bp + -15] ; $k
3419   1B47 DA            push d
3420   1B48 26 00 00      mov b, $0
3421   1B4B E7            pop d
3422   1B4C FD 43         mov [d], b
3423   1B4E             ;; while (k < len) { 
3424   1B4E             _while39_cond:
3425   1B4E FA F1 FF      lea d, [bp + -15] ; $k
3426   1B51 2A            mov b, [d]
3427   1B52             ; START RELATIONAL
3428   1B52 D7            push a
3429   1B53 11            mov a, b
3430   1B54 FA F3 FF      lea d, [bp + -13] ; $len
3431   1B57 2A            mov b, [d]
3432   1B58 B0            cmp a, b
3433   1B59 FD 73         slt ; < 
3434   1B5B E4            pop a
3435   1B5C             ; END RELATIONAL
3436   1B5C C0 00 00      cmp b, 0
3437   1B5F C6 F3 1B      je _while39_exit
3438   1B62             _while39_block:
3439   1B62             ;; path[k] = getnum("ROOM #") - 1; 
3440   1B62 FA F7 FF      lea d, [bp + -9] ; $path
3441   1B65 D7            push a
3442   1B66 DA            push d
3443   1B67 FA F1 FF      lea d, [bp + -15] ; $k
3444   1B6A 2A            mov b, [d]
3445   1B6B E7            pop d
3446   1B6C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3447   1B70 E4            pop a
3448   1B71 DA            push d
3449   1B72 26 AE 2A      mov b, __s51 ; "ROOM #"
3450   1B75 FD AB         swp b
3451   1B77 D8            push b
3452   1B78 07 62 15      call getnum
3453   1B7B 51 02 00      add sp, 2
3454   1B7E             ; START TERMS
3455   1B7E D7            push a
3456   1B7F 11            mov a, b
3457   1B80 26 01 00      mov b, $1
3458   1B83 60            sub a, b
3459   1B84 27            mov b, a
3460   1B85 E4            pop a
3461   1B86             ; END TERMS
3462   1B86 E7            pop d
3463   1B87 FD 43         mov [d], b
3464   1B89             ;; if ((k>1) && (path[k] == path[k-2])) { 
3465   1B89             _if40_cond:
3466   1B89 FA F1 FF      lea d, [bp + -15] ; $k
3467   1B8C 2A            mov b, [d]
3468   1B8D             ; START RELATIONAL
3469   1B8D D7            push a
3470   1B8E 11            mov a, b
3471   1B8F 26 01 00      mov b, $1
3472   1B92 B0            cmp a, b
3473   1B93 FD 7F         sgt ; >
3474   1B95 E4            pop a
3475   1B96             ; END RELATIONAL
3476   1B96 D7            push a
3477   1B97 11            mov a, b
3478   1B98 FA F7 FF      lea d, [bp + -9] ; $path
3479   1B9B D7            push a
3480   1B9C DA            push d
3481   1B9D FA F1 FF      lea d, [bp + -15] ; $k
3482   1BA0 2A            mov b, [d]
3483   1BA1 E7            pop d
3484   1BA2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3485   1BA6 E4            pop a
3486   1BA7 2A            mov b, [d]
3487   1BA8             ; START RELATIONAL
3488   1BA8 D7            push a
3489   1BA9 11            mov a, b
3490   1BAA FA F7 FF      lea d, [bp + -9] ; $path
3491   1BAD D7            push a
3492   1BAE DA            push d
3493   1BAF FA F1 FF      lea d, [bp + -15] ; $k
3494   1BB2 2A            mov b, [d]
3495   1BB3             ; START TERMS
3496   1BB3 D7            push a
3497   1BB4 11            mov a, b
3498   1BB5 26 02 00      mov b, $2
3499   1BB8 60            sub a, b
3500   1BB9 27            mov b, a
3501   1BBA E4            pop a
3502   1BBB             ; END TERMS
3503   1BBB E7            pop d
3504   1BBC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3505   1BC0 E4            pop a
3506   1BC1 2A            mov b, [d]
3507   1BC2 B0            cmp a, b
3508   1BC3 FD 71         seq ; ==
3509   1BC5 E4            pop a
3510   1BC6             ; END RELATIONAL
3511   1BC6 FD A7         sand a, b ; &&
3512   1BC8 E4            pop a
3513   1BC9 C0 00 00      cmp b, 0
3514   1BCC C6 E1 1B      je _if40_exit
3515   1BCF             _if40_true:
3516   1BCF             ;; print("ARROWS AREN'T THAT CROOKED - TRY ANOTHER ROOM\n"); 
3517   1BCF 26 B5 2A      mov b, __s52 ; "ARROWS AREN'T THAT CROOKED - TRY ANOTHER ROOM\n"
3518   1BD2 FD AB         swp b
3519   1BD4 D8            push b
3520   1BD5 07 ED 0C      call print
3521   1BD8 51 02 00      add sp, 2
3522   1BDB             ;; continue;  
3523   1BDB 0A 4E 1B      jmp _while39_cond ; while continue
3524   1BDE 0A E1 1B      jmp _if40_exit
3525   1BE1             _if40_exit:
3526   1BE1             ;; k++; 
3527   1BE1 FA F1 FF      lea d, [bp + -15] ; $k
3528   1BE4 2A            mov b, [d]
3529   1BE5 FD 79         mov g, b
3530   1BE7 FD 77         inc b
3531   1BE9 FA F1 FF      lea d, [bp + -15] ; $k
3532   1BEC FD 43         mov [d], b
3533   1BEE FD 27         mov b, g
3534   1BF0 0A 4E 1B      jmp _while39_cond
3535   1BF3             _while39_exit:
3536   1BF3             ;; scratchloc = loc[ 0  ]; 
3537   1BF3 FA F5 FF      lea d, [bp + -11] ; $scratchloc
3538   1BF6 DA            push d
3539   1BF7 3B 2B 23      mov d, _loc_data ; $loc
3540   1BFA D7            push a
3541   1BFB DA            push d
3542   1BFC 26 00 00      mov b, $0
3543   1BFF E7            pop d
3544   1C00 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3545   1C04 E4            pop a
3546   1C05 2A            mov b, [d]
3547   1C06 E7            pop d
3548   1C07 FD 43         mov [d], b
3549   1C09             ;; for (k = 0; k < len; k++) { 
3550   1C09             _for41_init:
3551   1C09 FA F1 FF      lea d, [bp + -15] ; $k
3552   1C0C DA            push d
3553   1C0D 26 00 00      mov b, $0
3554   1C10 E7            pop d
3555   1C11 FD 43         mov [d], b
3556   1C13             _for41_cond:
3557   1C13 FA F1 FF      lea d, [bp + -15] ; $k
3558   1C16 2A            mov b, [d]
3559   1C17             ; START RELATIONAL
3560   1C17 D7            push a
3561   1C18 11            mov a, b
3562   1C19 FA F3 FF      lea d, [bp + -13] ; $len
3563   1C1C 2A            mov b, [d]
3564   1C1D B0            cmp a, b
3565   1C1E FD 73         slt ; < 
3566   1C20 E4            pop a
3567   1C21             ; END RELATIONAL
3568   1C21 C0 00 00      cmp b, 0
3569   1C24 C6 9F 1D      je _for41_exit
3570   1C27             _for41_block:
3571   1C27             ;; if ((cave[scratchloc][0] == path[k]) || 
3572   1C27             _if42_cond:
3573   1C27 3B 39 23      mov d, _cave_data ; $cave
3574   1C2A D7            push a
3575   1C2B DA            push d
3576   1C2C FA F5 FF      lea d, [bp + -11] ; $scratchloc
3577   1C2F 2A            mov b, [d]
3578   1C30 E7            pop d
3579   1C31 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
3580   1C35 DA            push d
3581   1C36 26 00 00      mov b, $0
3582   1C39 E7            pop d
3583   1C3A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3584   1C3E E4            pop a
3585   1C3F 2A            mov b, [d]
3586   1C40             ; START RELATIONAL
3587   1C40 D7            push a
3588   1C41 11            mov a, b
3589   1C42 FA F7 FF      lea d, [bp + -9] ; $path
3590   1C45 D7            push a
3591   1C46 DA            push d
3592   1C47 FA F1 FF      lea d, [bp + -15] ; $k
3593   1C4A 2A            mov b, [d]
3594   1C4B E7            pop d
3595   1C4C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3596   1C50 E4            pop a
3597   1C51 2A            mov b, [d]
3598   1C52 B0            cmp a, b
3599   1C53 FD 71         seq ; ==
3600   1C55 E4            pop a
3601   1C56             ; END RELATIONAL
3602   1C56 D7            push a
3603   1C57 11            mov a, b
3604   1C58 3B 39 23      mov d, _cave_data ; $cave
3605   1C5B D7            push a
3606   1C5C DA            push d
3607   1C5D FA F5 FF      lea d, [bp + -11] ; $scratchloc
3608   1C60 2A            mov b, [d]
3609   1C61 E7            pop d
3610   1C62 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
3611   1C66 DA            push d
3612   1C67 26 01 00      mov b, $1
3613   1C6A E7            pop d
3614   1C6B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3615   1C6F E4            pop a
3616   1C70 2A            mov b, [d]
3617   1C71             ; START RELATIONAL
3618   1C71 D7            push a
3619   1C72 11            mov a, b
3620   1C73 FA F7 FF      lea d, [bp + -9] ; $path
3621   1C76 D7            push a
3622   1C77 DA            push d
3623   1C78 FA F1 FF      lea d, [bp + -15] ; $k
3624   1C7B 2A            mov b, [d]
3625   1C7C E7            pop d
3626   1C7D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3627   1C81 E4            pop a
3628   1C82 2A            mov b, [d]
3629   1C83 B0            cmp a, b
3630   1C84 FD 71         seq ; ==
3631   1C86 E4            pop a
3632   1C87             ; END RELATIONAL
3633   1C87 FD A8         sor a, b ; ||
3634   1C89 11            mov a, b
3635   1C8A 3B 39 23      mov d, _cave_data ; $cave
3636   1C8D D7            push a
3637   1C8E DA            push d
3638   1C8F FA F5 FF      lea d, [bp + -11] ; $scratchloc
3639   1C92 2A            mov b, [d]
3640   1C93 E7            pop d
3641   1C94 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
3642   1C98 DA            push d
3643   1C99 26 02 00      mov b, $2
3644   1C9C E7            pop d
3645   1C9D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3646   1CA1 E4            pop a
3647   1CA2 2A            mov b, [d]
3648   1CA3             ; START RELATIONAL
3649   1CA3 D7            push a
3650   1CA4 11            mov a, b
3651   1CA5 FA F7 FF      lea d, [bp + -9] ; $path
3652   1CA8 D7            push a
3653   1CA9 DA            push d
3654   1CAA FA F1 FF      lea d, [bp + -15] ; $k
3655   1CAD 2A            mov b, [d]
3656   1CAE E7            pop d
3657   1CAF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3658   1CB3 E4            pop a
3659   1CB4 2A            mov b, [d]
3660   1CB5 B0            cmp a, b
3661   1CB6 FD 71         seq ; ==
3662   1CB8 E4            pop a
3663   1CB9             ; END RELATIONAL
3664   1CB9 FD A8         sor a, b ; ||
3665   1CBB E4            pop a
3666   1CBC C0 00 00      cmp b, 0
3667   1CBF C6 DC 1C      je _if42_else
3668   1CC2             _if42_true:
3669   1CC2             ;; scratchloc = path[k]; 
3670   1CC2 FA F5 FF      lea d, [bp + -11] ; $scratchloc
3671   1CC5 DA            push d
3672   1CC6 FA F7 FF      lea d, [bp + -9] ; $path
3673   1CC9 D7            push a
3674   1CCA DA            push d
3675   1CCB FA F1 FF      lea d, [bp + -15] ; $k
3676   1CCE 2A            mov b, [d]
3677   1CCF E7            pop d
3678   1CD0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3679   1CD4 E4            pop a
3680   1CD5 2A            mov b, [d]
3681   1CD6 E7            pop d
3682   1CD7 FD 43         mov [d], b
3683   1CD9 0A 05 1D      jmp _if42_exit
3684   1CDC             _if42_else:
3685   1CDC             ;; scratchloc = cave[scratchloc][rand2()%3]; 
3686   1CDC FA F5 FF      lea d, [bp + -11] ; $scratchloc
3687   1CDF DA            push d
3688   1CE0 3B 39 23      mov d, _cave_data ; $cave
3689   1CE3 D7            push a
3690   1CE4 DA            push d
3691   1CE5 FA F5 FF      lea d, [bp + -11] ; $scratchloc
3692   1CE8 2A            mov b, [d]
3693   1CE9 E7            pop d
3694   1CEA FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
3695   1CEE DA            push d
3696   1CEF 07 31 20      call rand2
3697   1CF2             ; START FACTORS
3698   1CF2 D7            push a
3699   1CF3 11            mov a, b
3700   1CF4 26 03 00      mov b, $3
3701   1CF7 AE            div a, b ; 
3702   1CF8 11            mov a, b
3703   1CF9 27            mov b, a
3704   1CFA E4            pop a
3705   1CFB             ; END FACTORS
3706   1CFB E7            pop d
3707   1CFC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3708   1D00 E4            pop a
3709   1D01 2A            mov b, [d]
3710   1D02 E7            pop d
3711   1D03 FD 43         mov [d], b
3712   1D05             _if42_exit:
3713   1D05             ;; if (scratchloc == loc[ 1     ]) { 
3714   1D05             _if43_cond:
3715   1D05 FA F5 FF      lea d, [bp + -11] ; $scratchloc
3716   1D08 2A            mov b, [d]
3717   1D09             ; START RELATIONAL
3718   1D09 D7            push a
3719   1D0A 11            mov a, b
3720   1D0B 3B 2B 23      mov d, _loc_data ; $loc
3721   1D0E D7            push a
3722   1D0F DA            push d
3723   1D10 26 01 00      mov b, $1
3724   1D13 E7            pop d
3725   1D14 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3726   1D18 E4            pop a
3727   1D19 2A            mov b, [d]
3728   1D1A B0            cmp a, b
3729   1D1B FD 71         seq ; ==
3730   1D1D E4            pop a
3731   1D1E             ; END RELATIONAL
3732   1D1E C0 00 00      cmp b, 0
3733   1D21 C6 3D 1D      je _if43_else
3734   1D24             _if43_true:
3735   1D24             ;; print("AHA! YOU GOT THE WUMPUS!\n"); 
3736   1D24 26 E3 2A      mov b, __s53 ; "AHA! YOU GOT THE WUMPUS!\n"
3737   1D27 FD AB         swp b
3738   1D29 D8            push b
3739   1D2A 07 ED 0C      call print
3740   1D2D 51 02 00      add sp, 2
3741   1D30             ;; finished =  1  ; 
3742   1D30 3B 37 23      mov d, _finished ; $finished
3743   1D33 DA            push d
3744   1D34 26 01 00      mov b, $1
3745   1D37 E7            pop d
3746   1D38 FD 43         mov [d], b
3747   1D3A 0A 75 1D      jmp _if43_exit
3748   1D3D             _if43_else:
3749   1D3D             ;; if (scratchloc == loc[ 0  ]) { 
3750   1D3D             _if44_cond:
3751   1D3D FA F5 FF      lea d, [bp + -11] ; $scratchloc
3752   1D40 2A            mov b, [d]
3753   1D41             ; START RELATIONAL
3754   1D41 D7            push a
3755   1D42 11            mov a, b
3756   1D43 3B 2B 23      mov d, _loc_data ; $loc
3757   1D46 D7            push a
3758   1D47 DA            push d
3759   1D48 26 00 00      mov b, $0
3760   1D4B E7            pop d
3761   1D4C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3762   1D50 E4            pop a
3763   1D51 2A            mov b, [d]
3764   1D52 B0            cmp a, b
3765   1D53 FD 71         seq ; ==
3766   1D55 E4            pop a
3767   1D56             ; END RELATIONAL
3768   1D56 C0 00 00      cmp b, 0
3769   1D59 C6 75 1D      je _if44_exit
3770   1D5C             _if44_true:
3771   1D5C             ;; print("OUCH! ARROW GOT YOU!\n"); 
3772   1D5C 26 FD 2A      mov b, __s54 ; "OUCH! ARROW GOT YOU!\n"
3773   1D5F FD AB         swp b
3774   1D61 D8            push b
3775   1D62 07 ED 0C      call print
3776   1D65 51 02 00      add sp, 2
3777   1D68             ;; finished =  2   ; 
3778   1D68 3B 37 23      mov d, _finished ; $finished
3779   1D6B DA            push d
3780   1D6C 26 02 00      mov b, $2
3781   1D6F E7            pop d
3782   1D70 FD 43         mov [d], b
3783   1D72 0A 75 1D      jmp _if44_exit
3784   1D75             _if44_exit:
3785   1D75             _if43_exit:
3786   1D75             ;; if (finished !=  0  ) { 
3787   1D75             _if45_cond:
3788   1D75 3B 37 23      mov d, _finished ; $finished
3789   1D78 2A            mov b, [d]
3790   1D79             ; START RELATIONAL
3791   1D79 D7            push a
3792   1D7A 11            mov a, b
3793   1D7B 26 00 00      mov b, $0
3794   1D7E B0            cmp a, b
3795   1D7F FD 72         sneq ; !=
3796   1D81 E4            pop a
3797   1D82             ; END RELATIONAL
3798   1D82 C0 00 00      cmp b, 0
3799   1D85 C6 8D 1D      je _if45_exit
3800   1D88             _if45_true:
3801   1D88             ;; return; 
3802   1D88 F9            leave
3803   1D89 09            ret
3804   1D8A 0A 8D 1D      jmp _if45_exit
3805   1D8D             _if45_exit:
3806   1D8D             _for41_update:
3807   1D8D FA F1 FF      lea d, [bp + -15] ; $k
3808   1D90 2A            mov b, [d]
3809   1D91 FD 79         mov g, b
3810   1D93 FD 77         inc b
3811   1D95 FA F1 FF      lea d, [bp + -15] ; $k
3812   1D98 FD 43         mov [d], b
3813   1D9A FD 27         mov b, g
3814   1D9C 0A 13 1C      jmp _for41_cond
3815   1D9F             _for41_exit:
3816   1D9F             ;; print("MISSED\n"); 
3817   1D9F 26 13 2B      mov b, __s55 ; "MISSED\n"
3818   1DA2 FD AB         swp b
3819   1DA4 D8            push b
3820   1DA5 07 ED 0C      call print
3821   1DA8 51 02 00      add sp, 2
3822   1DAB             ;; move_wumpus(); 
3823   1DAB 07 3C 1A      call move_wumpus
3824   1DAE             ;; if (--arrows <= 0) { 
3825   1DAE             _if46_cond:
3826   1DAE 3B 23 23      mov d, _arrows ; $arrows
3827   1DB1 2A            mov b, [d]
3828   1DB2 FD 7D         dec b
3829   1DB4 3B 23 23      mov d, _arrows ; $arrows
3830   1DB7 FD 43         mov [d], b
3831   1DB9             ; START RELATIONAL
3832   1DB9 D7            push a
3833   1DBA 11            mov a, b
3834   1DBB 26 00 00      mov b, $0
3835   1DBE B0            cmp a, b
3836   1DBF FD 74         sle ; <=
3837   1DC1 E4            pop a
3838   1DC2             ; END RELATIONAL
3839   1DC2 C0 00 00      cmp b, 0
3840   1DC5 C6 D5 1D      je _if46_exit
3841   1DC8             _if46_true:
3842   1DC8             ;; finished =  2   ; 
3843   1DC8 3B 37 23      mov d, _finished ; $finished
3844   1DCB DA            push d
3845   1DCC 26 02 00      mov b, $2
3846   1DCF E7            pop d
3847   1DD0 FD 43         mov [d], b
3848   1DD2 0A D5 1D      jmp _if46_exit
3849   1DD5             _if46_exit:
3850   1DD5 F9            leave
3851   1DD6 09            ret
3852   1DD7             
3853   1DD7             move:
3854   1DD7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3855   1DDA             ; $scratchloc 
3856   1DDA 52 02 00      sub sp, 2
3857   1DDD             ;; scratchloc = -1; 
3858   1DDD FA FF FF      lea d, [bp + -1] ; $scratchloc
3859   1DE0 DA            push d
3860   1DE1 26 01 00      mov b, $1
3861   1DE4 FD 97         neg b
3862   1DE6 E7            pop d
3863   1DE7 FD 43         mov [d], b
3864   1DE9             ;; while (scratchloc == -1) { 
3865   1DE9             _while47_cond:
3866   1DE9 FA FF FF      lea d, [bp + -1] ; $scratchloc
3867   1DEC 2A            mov b, [d]
3868   1DED             ; START RELATIONAL
3869   1DED D7            push a
3870   1DEE 11            mov a, b
3871   1DEF 26 01 00      mov b, $1
3872   1DF2 FD 97         neg b
3873   1DF4 B0            cmp a, b
3874   1DF5 FD 71         seq ; ==
3875   1DF7 E4            pop a
3876   1DF8             ; END RELATIONAL
3877   1DF8 C0 00 00      cmp b, 0
3878   1DFB C6 21 1F      je _while47_exit
3879   1DFE             _while47_block:
3880   1DFE             ;; scratchloc = getnum("WHERE TO")-1; 
3881   1DFE FA FF FF      lea d, [bp + -1] ; $scratchloc
3882   1E01 DA            push d
3883   1E02 26 1B 2B      mov b, __s56 ; "WHERE TO"
3884   1E05 FD AB         swp b
3885   1E07 D8            push b
3886   1E08 07 62 15      call getnum
3887   1E0B 51 02 00      add sp, 2
3888   1E0E             ; START TERMS
3889   1E0E D7            push a
3890   1E0F 11            mov a, b
3891   1E10 26 01 00      mov b, $1
3892   1E13 60            sub a, b
3893   1E14 27            mov b, a
3894   1E15 E4            pop a
3895   1E16             ; END TERMS
3896   1E16 E7            pop d
3897   1E17 FD 43         mov [d], b
3898   1E19             ;; if (scratchloc < 0 || scratchloc > 19) { 
3899   1E19             _if48_cond:
3900   1E19 FA FF FF      lea d, [bp + -1] ; $scratchloc
3901   1E1C 2A            mov b, [d]
3902   1E1D             ; START RELATIONAL
3903   1E1D D7            push a
3904   1E1E 11            mov a, b
3905   1E1F 26 00 00      mov b, $0
3906   1E22 B0            cmp a, b
3907   1E23 FD 73         slt ; < 
3908   1E25 E4            pop a
3909   1E26             ; END RELATIONAL
3910   1E26 D7            push a
3911   1E27 11            mov a, b
3912   1E28 FA FF FF      lea d, [bp + -1] ; $scratchloc
3913   1E2B 2A            mov b, [d]
3914   1E2C             ; START RELATIONAL
3915   1E2C D7            push a
3916   1E2D 11            mov a, b
3917   1E2E 26 13 00      mov b, $13
3918   1E31 B0            cmp a, b
3919   1E32 FD 7F         sgt ; >
3920   1E34 E4            pop a
3921   1E35             ; END RELATIONAL
3922   1E35 FD A8         sor a, b ; ||
3923   1E37 E4            pop a
3924   1E38 C0 00 00      cmp b, 0
3925   1E3B C6 50 1E      je _if48_exit
3926   1E3E             _if48_true:
3927   1E3E             ;; scratchloc = -1; 
3928   1E3E FA FF FF      lea d, [bp + -1] ; $scratchloc
3929   1E41 DA            push d
3930   1E42 26 01 00      mov b, $1
3931   1E45 FD 97         neg b
3932   1E47 E7            pop d
3933   1E48 FD 43         mov [d], b
3934   1E4A             ;; continue; 
3935   1E4A 0A E9 1D      jmp _while47_cond ; while continue
3936   1E4D 0A 50 1E      jmp _if48_exit
3937   1E50             _if48_exit:
3938   1E50             ;; if ((cave[loc[ 0  ]][0] != scratchloc) & 
3939   1E50             _if49_cond:
3940   1E50 3B 39 23      mov d, _cave_data ; $cave
3941   1E53 D7            push a
3942   1E54 DA            push d
3943   1E55 3B 2B 23      mov d, _loc_data ; $loc
3944   1E58 D7            push a
3945   1E59 DA            push d
3946   1E5A 26 00 00      mov b, $0
3947   1E5D E7            pop d
3948   1E5E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3949   1E62 E4            pop a
3950   1E63 2A            mov b, [d]
3951   1E64 E7            pop d
3952   1E65 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
3953   1E69 DA            push d
3954   1E6A 26 00 00      mov b, $0
3955   1E6D E7            pop d
3956   1E6E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3957   1E72 E4            pop a
3958   1E73 2A            mov b, [d]
3959   1E74             ; START RELATIONAL
3960   1E74 D7            push a
3961   1E75 11            mov a, b
3962   1E76 FA FF FF      lea d, [bp + -1] ; $scratchloc
3963   1E79 2A            mov b, [d]
3964   1E7A B0            cmp a, b
3965   1E7B FD 72         sneq ; !=
3966   1E7D E4            pop a
3967   1E7E             ; END RELATIONAL
3968   1E7E D7            push a
3969   1E7F 11            mov a, b
3970   1E80 3B 39 23      mov d, _cave_data ; $cave
3971   1E83 D7            push a
3972   1E84 DA            push d
3973   1E85 3B 2B 23      mov d, _loc_data ; $loc
3974   1E88 D7            push a
3975   1E89 DA            push d
3976   1E8A 26 00 00      mov b, $0
3977   1E8D E7            pop d
3978   1E8E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3979   1E92 E4            pop a
3980   1E93 2A            mov b, [d]
3981   1E94 E7            pop d
3982   1E95 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
3983   1E99 DA            push d
3984   1E9A 26 01 00      mov b, $1
3985   1E9D E7            pop d
3986   1E9E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3987   1EA2 E4            pop a
3988   1EA3 2A            mov b, [d]
3989   1EA4             ; START RELATIONAL
3990   1EA4 D7            push a
3991   1EA5 11            mov a, b
3992   1EA6 FA FF FF      lea d, [bp + -1] ; $scratchloc
3993   1EA9 2A            mov b, [d]
3994   1EAA B0            cmp a, b
3995   1EAB FD 72         sneq ; !=
3996   1EAD E4            pop a
3997   1EAE             ; END RELATIONAL
3998   1EAE 86            and a, b ; &
3999   1EAF 3B 39 23      mov d, _cave_data ; $cave
4000   1EB2 D7            push a
4001   1EB3 DA            push d
4002   1EB4 3B 2B 23      mov d, _loc_data ; $loc
4003   1EB7 D7            push a
4004   1EB8 DA            push d
4005   1EB9 26 00 00      mov b, $0
4006   1EBC E7            pop d
4007   1EBD FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4008   1EC1 E4            pop a
4009   1EC2 2A            mov b, [d]
4010   1EC3 E7            pop d
4011   1EC4 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
4012   1EC8 DA            push d
4013   1EC9 26 02 00      mov b, $2
4014   1ECC E7            pop d
4015   1ECD FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4016   1ED1 E4            pop a
4017   1ED2 2A            mov b, [d]
4018   1ED3             ; START RELATIONAL
4019   1ED3 D7            push a
4020   1ED4 11            mov a, b
4021   1ED5 FA FF FF      lea d, [bp + -1] ; $scratchloc
4022   1ED8 2A            mov b, [d]
4023   1ED9 B0            cmp a, b
4024   1EDA FD 72         sneq ; !=
4025   1EDC E4            pop a
4026   1EDD             ; END RELATIONAL
4027   1EDD 86            and a, b ; &
4028   1EDE 3B 2B 23      mov d, _loc_data ; $loc
4029   1EE1 D7            push a
4030   1EE2 DA            push d
4031   1EE3 26 00 00      mov b, $0
4032   1EE6 E7            pop d
4033   1EE7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4034   1EEB E4            pop a
4035   1EEC 2A            mov b, [d]
4036   1EED             ; START RELATIONAL
4037   1EED D7            push a
4038   1EEE 11            mov a, b
4039   1EEF FA FF FF      lea d, [bp + -1] ; $scratchloc
4040   1EF2 2A            mov b, [d]
4041   1EF3 B0            cmp a, b
4042   1EF4 FD 72         sneq ; !=
4043   1EF6 E4            pop a
4044   1EF7             ; END RELATIONAL
4045   1EF7 86            and a, b ; &
4046   1EF8 27            mov b, a
4047   1EF9 E4            pop a
4048   1EFA C0 00 00      cmp b, 0
4049   1EFD C6 1E 1F      je _if49_exit
4050   1F00             _if49_true:
4051   1F00             ;; print("NOT POSSIBLE\n"); 
4052   1F00 26 24 2B      mov b, __s57 ; "NOT POSSIBLE\n"
4053   1F03 FD AB         swp b
4054   1F05 D8            push b
4055   1F06 07 ED 0C      call print
4056   1F09 51 02 00      add sp, 2
4057   1F0C             ;; scratchloc = -1; 
4058   1F0C FA FF FF      lea d, [bp + -1] ; $scratchloc
4059   1F0F DA            push d
4060   1F10 26 01 00      mov b, $1
4061   1F13 FD 97         neg b
4062   1F15 E7            pop d
4063   1F16 FD 43         mov [d], b
4064   1F18             ;; continue; 
4065   1F18 0A E9 1D      jmp _while47_cond ; while continue
4066   1F1B 0A 1E 1F      jmp _if49_exit
4067   1F1E             _if49_exit:
4068   1F1E 0A E9 1D      jmp _while47_cond
4069   1F21             _while47_exit:
4070   1F21             ;; loc[ 0  ] = scratchloc; 
4071   1F21 3B 2B 23      mov d, _loc_data ; $loc
4072   1F24 D7            push a
4073   1F25 DA            push d
4074   1F26 26 00 00      mov b, $0
4075   1F29 E7            pop d
4076   1F2A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4077   1F2E E4            pop a
4078   1F2F DA            push d
4079   1F30 FA FF FF      lea d, [bp + -1] ; $scratchloc
4080   1F33 2A            mov b, [d]
4081   1F34 E7            pop d
4082   1F35 FD 43         mov [d], b
4083   1F37             ;; while ((scratchloc == loc[ 4    ]) || (scratchloc == loc[ 5    ])) { 
4084   1F37             _while50_cond:
4085   1F37 FA FF FF      lea d, [bp + -1] ; $scratchloc
4086   1F3A 2A            mov b, [d]
4087   1F3B             ; START RELATIONAL
4088   1F3B D7            push a
4089   1F3C 11            mov a, b
4090   1F3D 3B 2B 23      mov d, _loc_data ; $loc
4091   1F40 D7            push a
4092   1F41 DA            push d
4093   1F42 26 04 00      mov b, $4
4094   1F45 E7            pop d
4095   1F46 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4096   1F4A E4            pop a
4097   1F4B 2A            mov b, [d]
4098   1F4C B0            cmp a, b
4099   1F4D FD 71         seq ; ==
4100   1F4F E4            pop a
4101   1F50             ; END RELATIONAL
4102   1F50 D7            push a
4103   1F51 11            mov a, b
4104   1F52 FA FF FF      lea d, [bp + -1] ; $scratchloc
4105   1F55 2A            mov b, [d]
4106   1F56             ; START RELATIONAL
4107   1F56 D7            push a
4108   1F57 11            mov a, b
4109   1F58 3B 2B 23      mov d, _loc_data ; $loc
4110   1F5B D7            push a
4111   1F5C DA            push d
4112   1F5D 26 05 00      mov b, $5
4113   1F60 E7            pop d
4114   1F61 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4115   1F65 E4            pop a
4116   1F66 2A            mov b, [d]
4117   1F67 B0            cmp a, b
4118   1F68 FD 71         seq ; ==
4119   1F6A E4            pop a
4120   1F6B             ; END RELATIONAL
4121   1F6B FD A8         sor a, b ; ||
4122   1F6D E4            pop a
4123   1F6E C0 00 00      cmp b, 0
4124   1F71 C6 A8 1F      je _while50_exit
4125   1F74             _while50_block:
4126   1F74             ;; print("ZAP--SUPER BAT SNATCH! ELSEWHEREVILLE FOR YOU!\n"); 
4127   1F74 26 32 2B      mov b, __s58 ; "ZAP--SUPER BAT SNATCH! ELSEWHEREVILLE FOR YOU!\n"
4128   1F77 FD AB         swp b
4129   1F79 D8            push b
4130   1F7A 07 ED 0C      call print
4131   1F7D 51 02 00      add sp, 2
4132   1F80             ;; scratchloc = loc[ 0  ] = rand2()%20; 
4133   1F80 FA FF FF      lea d, [bp + -1] ; $scratchloc
4134   1F83 DA            push d
4135   1F84 3B 2B 23      mov d, _loc_data ; $loc
4136   1F87 D7            push a
4137   1F88 DA            push d
4138   1F89 26 00 00      mov b, $0
4139   1F8C E7            pop d
4140   1F8D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4141   1F91 E4            pop a
4142   1F92 DA            push d
4143   1F93 07 31 20      call rand2
4144   1F96             ; START FACTORS
4145   1F96 D7            push a
4146   1F97 11            mov a, b
4147   1F98 26 14 00      mov b, $14
4148   1F9B AE            div a, b ; 
4149   1F9C 11            mov a, b
4150   1F9D 27            mov b, a
4151   1F9E E4            pop a
4152   1F9F             ; END FACTORS
4153   1F9F E7            pop d
4154   1FA0 FD 43         mov [d], b
4155   1FA2 E7            pop d
4156   1FA3 FD 43         mov [d], b
4157   1FA5 0A 37 1F      jmp _while50_cond
4158   1FA8             _while50_exit:
4159   1FA8             ;; if (scratchloc == loc[ 1     ]) { 
4160   1FA8             _if51_cond:
4161   1FA8 FA FF FF      lea d, [bp + -1] ; $scratchloc
4162   1FAB 2A            mov b, [d]
4163   1FAC             ; START RELATIONAL
4164   1FAC D7            push a
4165   1FAD 11            mov a, b
4166   1FAE 3B 2B 23      mov d, _loc_data ; $loc
4167   1FB1 D7            push a
4168   1FB2 DA            push d
4169   1FB3 26 01 00      mov b, $1
4170   1FB6 E7            pop d
4171   1FB7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4172   1FBB E4            pop a
4173   1FBC 2A            mov b, [d]
4174   1FBD B0            cmp a, b
4175   1FBE FD 71         seq ; ==
4176   1FC0 E4            pop a
4177   1FC1             ; END RELATIONAL
4178   1FC1 C0 00 00      cmp b, 0
4179   1FC4 C6 D9 1F      je _if51_exit
4180   1FC7             _if51_true:
4181   1FC7             ;; print("... OOPS! BUMPED A WUMPUS!\n"); 
4182   1FC7 26 62 2B      mov b, __s59 ; "... OOPS! BUMPED A WUMPUS!\n"
4183   1FCA FD AB         swp b
4184   1FCC D8            push b
4185   1FCD 07 ED 0C      call print
4186   1FD0 51 02 00      add sp, 2
4187   1FD3             ;; move_wumpus(); 
4188   1FD3 07 3C 1A      call move_wumpus
4189   1FD6 0A D9 1F      jmp _if51_exit
4190   1FD9             _if51_exit:
4191   1FD9             ;; if (scratchloc == loc[ 2   ] || scratchloc == loc[ 3   ]) { 
4192   1FD9             _if52_cond:
4193   1FD9 FA FF FF      lea d, [bp + -1] ; $scratchloc
4194   1FDC 2A            mov b, [d]
4195   1FDD             ; START RELATIONAL
4196   1FDD D7            push a
4197   1FDE 11            mov a, b
4198   1FDF 3B 2B 23      mov d, _loc_data ; $loc
4199   1FE2 D7            push a
4200   1FE3 DA            push d
4201   1FE4 26 02 00      mov b, $2
4202   1FE7 E7            pop d
4203   1FE8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4204   1FEC E4            pop a
4205   1FED 2A            mov b, [d]
4206   1FEE B0            cmp a, b
4207   1FEF FD 71         seq ; ==
4208   1FF1 E4            pop a
4209   1FF2             ; END RELATIONAL
4210   1FF2 D7            push a
4211   1FF3 11            mov a, b
4212   1FF4 FA FF FF      lea d, [bp + -1] ; $scratchloc
4213   1FF7 2A            mov b, [d]
4214   1FF8             ; START RELATIONAL
4215   1FF8 D7            push a
4216   1FF9 11            mov a, b
4217   1FFA 3B 2B 23      mov d, _loc_data ; $loc
4218   1FFD D7            push a
4219   1FFE DA            push d
4220   1FFF 26 03 00      mov b, $3
4221   2002 E7            pop d
4222   2003 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4223   2007 E4            pop a
4224   2008 2A            mov b, [d]
4225   2009 B0            cmp a, b
4226   200A FD 71         seq ; ==
4227   200C E4            pop a
4228   200D             ; END RELATIONAL
4229   200D FD A8         sor a, b ; ||
4230   200F E4            pop a
4231   2010 C0 00 00      cmp b, 0
4232   2013 C6 2F 20      je _if52_exit
4233   2016             _if52_true:
4234   2016             ;; print("YYYYIIIIEEEE . . . FELL IN PIT\n"); 
4235   2016 26 7E 2B      mov b, __s60 ; "YYYYIIIIEEEE . . . FELL IN PIT\n"
4236   2019 FD AB         swp b
4237   201B D8            push b
4238   201C 07 ED 0C      call print
4239   201F 51 02 00      add sp, 2
4240   2022             ;; finished =  2   ; 
4241   2022 3B 37 23      mov d, _finished ; $finished
4242   2025 DA            push d
4243   2026 26 02 00      mov b, $2
4244   2029 E7            pop d
4245   202A FD 43         mov [d], b
4246   202C 0A 2F 20      jmp _if52_exit
4247   202F             _if52_exit:
4248   202F F9            leave
4249   2030 09            ret
4250   2031             
4251   2031             rand2:
4252   2031 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4253   2034             ;; rand_val=rand_val+rand_inc; 
4254   2034 3B 27 23      mov d, _rand_val ; $rand_val
4255   2037 DA            push d
4256   2038 3B 27 23      mov d, _rand_val ; $rand_val
4257   203B 2A            mov b, [d]
4258   203C             ; START TERMS
4259   203C D7            push a
4260   203D 11            mov a, b
4261   203E 3B 29 23      mov d, _rand_inc ; $rand_inc
4262   2041 2A            mov b, [d]
4263   2042 54            add a, b
4264   2043 27            mov b, a
4265   2044 E4            pop a
4266   2045             ; END TERMS
4267   2045 E7            pop d
4268   2046 FD 43         mov [d], b
4269   2048             ;; rand_inc++; 
4270   2048 3B 29 23      mov d, _rand_inc ; $rand_inc
4271   204B 2A            mov b, [d]
4272   204C FD 79         mov g, b
4273   204E FD 77         inc b
4274   2050 3B 29 23      mov d, _rand_inc ; $rand_inc
4275   2053 FD 43         mov [d], b
4276   2055 FD 27         mov b, g
4277   2057             ;; return rand_val; 
4278   2057 3B 27 23      mov d, _rand_val ; $rand_val
4279   205A 2A            mov b, [d]
4280   205B F9            leave
4281   205C 09            ret
4282   205D             
4283   205D             game_setup:
4284   205D F8 00 00      enter 0 ; (push bp; mov bp, sp)
4285   2060             ; $j 
4286   2060             ; $k 
4287   2060             ; $v 
4288   2060 52 06 00      sub sp, 6
4289   2063             ;; for (j = 0; j <  6   ; j++) { 
4290   2063             _for53_init:
4291   2063 FA FF FF      lea d, [bp + -1] ; $j
4292   2066 DA            push d
4293   2067 26 00 00      mov b, $0
4294   206A E7            pop d
4295   206B FD 43         mov [d], b
4296   206D             _for53_cond:
4297   206D FA FF FF      lea d, [bp + -1] ; $j
4298   2070 2A            mov b, [d]
4299   2071             ; START RELATIONAL
4300   2071 D7            push a
4301   2072 11            mov a, b
4302   2073 26 06 00      mov b, $6
4303   2076 B0            cmp a, b
4304   2077 FD 73         slt ; < 
4305   2079 E4            pop a
4306   207A             ; END RELATIONAL
4307   207A C0 00 00      cmp b, 0
4308   207D C6 75 21      je _for53_exit
4309   2080             _for53_block:
4310   2080             ;; loc[j] = -1; 
4311   2080 3B 2B 23      mov d, _loc_data ; $loc
4312   2083 D7            push a
4313   2084 DA            push d
4314   2085 FA FF FF      lea d, [bp + -1] ; $j
4315   2088 2A            mov b, [d]
4316   2089 E7            pop d
4317   208A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4318   208E E4            pop a
4319   208F DA            push d
4320   2090 26 01 00      mov b, $1
4321   2093 FD 97         neg b
4322   2095 E7            pop d
4323   2096 FD 43         mov [d], b
4324   2098             ;; while (loc[j] < 0) { 
4325   2098             _while54_cond:
4326   2098 3B 2B 23      mov d, _loc_data ; $loc
4327   209B D7            push a
4328   209C DA            push d
4329   209D FA FF FF      lea d, [bp + -1] ; $j
4330   20A0 2A            mov b, [d]
4331   20A1 E7            pop d
4332   20A2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4333   20A6 E4            pop a
4334   20A7 2A            mov b, [d]
4335   20A8             ; START RELATIONAL
4336   20A8 D7            push a
4337   20A9 11            mov a, b
4338   20AA 26 00 00      mov b, $0
4339   20AD B0            cmp a, b
4340   20AE FD 73         slt ; < 
4341   20B0 E4            pop a
4342   20B1             ; END RELATIONAL
4343   20B1 C0 00 00      cmp b, 0
4344   20B4 C6 63 21      je _while54_exit
4345   20B7             _while54_block:
4346   20B7             ;; v = rand2(); 
4347   20B7 FA FB FF      lea d, [bp + -5] ; $v
4348   20BA DA            push d
4349   20BB 07 31 20      call rand2
4350   20BE E7            pop d
4351   20BF FD 43         mov [d], b
4352   20C1             ;; loc[j] = v % 20; 
4353   20C1 3B 2B 23      mov d, _loc_data ; $loc
4354   20C4 D7            push a
4355   20C5 DA            push d
4356   20C6 FA FF FF      lea d, [bp + -1] ; $j
4357   20C9 2A            mov b, [d]
4358   20CA E7            pop d
4359   20CB FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4360   20CF E4            pop a
4361   20D0 DA            push d
4362   20D1 FA FB FF      lea d, [bp + -5] ; $v
4363   20D4 2A            mov b, [d]
4364   20D5             ; START FACTORS
4365   20D5 D7            push a
4366   20D6 11            mov a, b
4367   20D7 26 14 00      mov b, $14
4368   20DA AE            div a, b ; 
4369   20DB 11            mov a, b
4370   20DC 27            mov b, a
4371   20DD E4            pop a
4372   20DE             ; END FACTORS
4373   20DE E7            pop d
4374   20DF FD 43         mov [d], b
4375   20E1             ;; for (k=0; k<j-1; k++) { 
4376   20E1             _for55_init:
4377   20E1 FA FD FF      lea d, [bp + -3] ; $k
4378   20E4 DA            push d
4379   20E5 26 00 00      mov b, $0
4380   20E8 E7            pop d
4381   20E9 FD 43         mov [d], b
4382   20EB             _for55_cond:
4383   20EB FA FD FF      lea d, [bp + -3] ; $k
4384   20EE 2A            mov b, [d]
4385   20EF             ; START RELATIONAL
4386   20EF D7            push a
4387   20F0 11            mov a, b
4388   20F1 FA FF FF      lea d, [bp + -1] ; $j
4389   20F4 2A            mov b, [d]
4390   20F5             ; START TERMS
4391   20F5 D7            push a
4392   20F6 11            mov a, b
4393   20F7 26 01 00      mov b, $1
4394   20FA 60            sub a, b
4395   20FB 27            mov b, a
4396   20FC E4            pop a
4397   20FD             ; END TERMS
4398   20FD B0            cmp a, b
4399   20FE FD 73         slt ; < 
4400   2100 E4            pop a
4401   2101             ; END RELATIONAL
4402   2101 C0 00 00      cmp b, 0
4403   2104 C6 60 21      je _for55_exit
4404   2107             _for55_block:
4405   2107             ;; if (loc[j] == loc[k]) { 
4406   2107             _if56_cond:
4407   2107 3B 2B 23      mov d, _loc_data ; $loc
4408   210A D7            push a
4409   210B DA            push d
4410   210C FA FF FF      lea d, [bp + -1] ; $j
4411   210F 2A            mov b, [d]
4412   2110 E7            pop d
4413   2111 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4414   2115 E4            pop a
4415   2116 2A            mov b, [d]
4416   2117             ; START RELATIONAL
4417   2117 D7            push a
4418   2118 11            mov a, b
4419   2119 3B 2B 23      mov d, _loc_data ; $loc
4420   211C D7            push a
4421   211D DA            push d
4422   211E FA FD FF      lea d, [bp + -3] ; $k
4423   2121 2A            mov b, [d]
4424   2122 E7            pop d
4425   2123 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4426   2127 E4            pop a
4427   2128 2A            mov b, [d]
4428   2129 B0            cmp a, b
4429   212A FD 71         seq ; ==
4430   212C E4            pop a
4431   212D             ; END RELATIONAL
4432   212D C0 00 00      cmp b, 0
4433   2130 C6 4E 21      je _if56_exit
4434   2133             _if56_true:
4435   2133             ;; loc[j] = -1; 
4436   2133 3B 2B 23      mov d, _loc_data ; $loc
4437   2136 D7            push a
4438   2137 DA            push d
4439   2138 FA FF FF      lea d, [bp + -1] ; $j
4440   213B 2A            mov b, [d]
4441   213C E7            pop d
4442   213D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4443   2141 E4            pop a
4444   2142 DA            push d
4445   2143 26 01 00      mov b, $1
4446   2146 FD 97         neg b
4447   2148 E7            pop d
4448   2149 FD 43         mov [d], b
4449   214B 0A 4E 21      jmp _if56_exit
4450   214E             _if56_exit:
4451   214E             _for55_update:
4452   214E FA FD FF      lea d, [bp + -3] ; $k
4453   2151 2A            mov b, [d]
4454   2152 FD 79         mov g, b
4455   2154 FD 77         inc b
4456   2156 FA FD FF      lea d, [bp + -3] ; $k
4457   2159 FD 43         mov [d], b
4458   215B FD 27         mov b, g
4459   215D 0A EB 20      jmp _for55_cond
4460   2160             _for55_exit:
4461   2160 0A 98 20      jmp _while54_cond
4462   2163             _while54_exit:
4463   2163             _for53_update:
4464   2163 FA FF FF      lea d, [bp + -1] ; $j
4465   2166 2A            mov b, [d]
4466   2167 FD 79         mov g, b
4467   2169 FD 77         inc b
4468   216B FA FF FF      lea d, [bp + -1] ; $j
4469   216E FD 43         mov [d], b
4470   2170 FD 27         mov b, g
4471   2172 0A 6D 20      jmp _for53_cond
4472   2175             _for53_exit:
4473   2175 F9            leave
4474   2176 09            ret
4475   2177             
4476   2177             game_play:
4477   2177 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4478   217A             ; $c 
4479   217A 52 02 00      sub sp, 2
4480   217D             ;; arrows = 5; 
4481   217D 3B 23 23      mov d, _arrows ; $arrows
4482   2180 DA            push d
4483   2181 26 05 00      mov b, $5
4484   2184 E7            pop d
4485   2185 FD 43         mov [d], b
4486   2187             ;; print("HUNT THE WUMPUS\n"); 
4487   2187 26 9E 2B      mov b, __s61 ; "HUNT THE WUMPUS\n"
4488   218A FD AB         swp b
4489   218C D8            push b
4490   218D 07 ED 0C      call print
4491   2190 51 02 00      add sp, 2
4492   2193             ;; if (debug) { 
4493   2193             _if57_cond:
4494   2193 3B 25 23      mov d, _debug ; $debug
4495   2196 2A            mov b, [d]
4496   2197 C0 00 00      cmp b, 0
4497   219A C6 7C 22      je _if57_exit
4498   219D             _if57_true:
4499   219D             ;; print("Wumpus is at "); printu(loc[ 1     ]+1); 
4500   219D 26 AF 2B      mov b, __s62 ; "Wumpus is at "
4501   21A0 FD AB         swp b
4502   21A2 D8            push b
4503   21A3 07 ED 0C      call print
4504   21A6 51 02 00      add sp, 2
4505   21A9             ;; printu(loc[ 1     ]+1); 
4506   21A9 3B 2B 23      mov d, _loc_data ; $loc
4507   21AC D7            push a
4508   21AD DA            push d
4509   21AE 26 01 00      mov b, $1
4510   21B1 E7            pop d
4511   21B2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4512   21B6 E4            pop a
4513   21B7 2A            mov b, [d]
4514   21B8             ; START TERMS
4515   21B8 D7            push a
4516   21B9 11            mov a, b
4517   21BA 26 01 00      mov b, $1
4518   21BD 54            add a, b
4519   21BE 27            mov b, a
4520   21BF E4            pop a
4521   21C0             ; END TERMS
4522   21C0 FD AB         swp b
4523   21C2 D8            push b
4524   21C3 07 B9 0B      call printu
4525   21C6 51 02 00      add sp, 2
4526   21C9             ;; print(", pits at "); printu(loc[ 2   ]+1); 
4527   21C9 26 BD 2B      mov b, __s63 ; ", pits at "
4528   21CC FD AB         swp b
4529   21CE D8            push b
4530   21CF 07 ED 0C      call print
4531   21D2 51 02 00      add sp, 2
4532   21D5             ;; printu(loc[ 2   ]+1); 
4533   21D5 3B 2B 23      mov d, _loc_data ; $loc
4534   21D8 D7            push a
4535   21D9 DA            push d
4536   21DA 26 02 00      mov b, $2
4537   21DD E7            pop d
4538   21DE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4539   21E2 E4            pop a
4540   21E3 2A            mov b, [d]
4541   21E4             ; START TERMS
4542   21E4 D7            push a
4543   21E5 11            mov a, b
4544   21E6 26 01 00      mov b, $1
4545   21E9 54            add a, b
4546   21EA 27            mov b, a
4547   21EB E4            pop a
4548   21EC             ; END TERMS
4549   21EC FD AB         swp b
4550   21EE D8            push b
4551   21EF 07 B9 0B      call printu
4552   21F2 51 02 00      add sp, 2
4553   21F5             ;; print(" & "); printu(loc[ 3   ]+1); 
4554   21F5 26 C8 2B      mov b, __s64 ; " & "
4555   21F8 FD AB         swp b
4556   21FA D8            push b
4557   21FB 07 ED 0C      call print
4558   21FE 51 02 00      add sp, 2
4559   2201             ;; printu(loc[ 3   ]+1); 
4560   2201 3B 2B 23      mov d, _loc_data ; $loc
4561   2204 D7            push a
4562   2205 DA            push d
4563   2206 26 03 00      mov b, $3
4564   2209 E7            pop d
4565   220A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4566   220E E4            pop a
4567   220F 2A            mov b, [d]
4568   2210             ; START TERMS
4569   2210 D7            push a
4570   2211 11            mov a, b
4571   2212 26 01 00      mov b, $1
4572   2215 54            add a, b
4573   2216 27            mov b, a
4574   2217 E4            pop a
4575   2218             ; END TERMS
4576   2218 FD AB         swp b
4577   221A D8            push b
4578   221B 07 B9 0B      call printu
4579   221E 51 02 00      add sp, 2
4580   2221             ;; print(", bats at "); printu(loc[ 4    ]+1); 
4581   2221 26 CC 2B      mov b, __s65 ; ", bats at "
4582   2224 FD AB         swp b
4583   2226 D8            push b
4584   2227 07 ED 0C      call print
4585   222A 51 02 00      add sp, 2
4586   222D             ;; printu(loc[ 4    ]+1); 
4587   222D 3B 2B 23      mov d, _loc_data ; $loc
4588   2230 D7            push a
4589   2231 DA            push d
4590   2232 26 04 00      mov b, $4
4591   2235 E7            pop d
4592   2236 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4593   223A E4            pop a
4594   223B 2A            mov b, [d]
4595   223C             ; START TERMS
4596   223C D7            push a
4597   223D 11            mov a, b
4598   223E 26 01 00      mov b, $1
4599   2241 54            add a, b
4600   2242 27            mov b, a
4601   2243 E4            pop a
4602   2244             ; END TERMS
4603   2244 FD AB         swp b
4604   2246 D8            push b
4605   2247 07 B9 0B      call printu
4606   224A 51 02 00      add sp, 2
4607   224D             ;; print(" & "); printu(loc[ 5    ]+1); 
4608   224D 26 C8 2B      mov b, __s64 ; " & "
4609   2250 FD AB         swp b
4610   2252 D8            push b
4611   2253 07 ED 0C      call print
4612   2256 51 02 00      add sp, 2
4613   2259             ;; printu(loc[ 5    ]+1); 
4614   2259 3B 2B 23      mov d, _loc_data ; $loc
4615   225C D7            push a
4616   225D DA            push d
4617   225E 26 05 00      mov b, $5
4618   2261 E7            pop d
4619   2262 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4620   2266 E4            pop a
4621   2267 2A            mov b, [d]
4622   2268             ; START TERMS
4623   2268 D7            push a
4624   2269 11            mov a, b
4625   226A 26 01 00      mov b, $1
4626   226D 54            add a, b
4627   226E 27            mov b, a
4628   226F E4            pop a
4629   2270             ; END TERMS
4630   2270 FD AB         swp b
4631   2272 D8            push b
4632   2273 07 B9 0B      call printu
4633   2276 51 02 00      add sp, 2
4634   2279 0A 7C 22      jmp _if57_exit
4635   227C             _if57_exit:
4636   227C             ;; finished =  0  ; 
4637   227C 3B 37 23      mov d, _finished ; $finished
4638   227F DA            push d
4639   2280 26 00 00      mov b, $0
4640   2283 E7            pop d
4641   2284 FD 43         mov [d], b
4642   2286             ;; while (finished ==  0  ) { 
4643   2286             _while58_cond:
4644   2286 3B 37 23      mov d, _finished ; $finished
4645   2289 2A            mov b, [d]
4646   228A             ; START RELATIONAL
4647   228A D7            push a
4648   228B 11            mov a, b
4649   228C 26 00 00      mov b, $0
4650   228F B0            cmp a, b
4651   2290 FD 71         seq ; ==
4652   2292 E4            pop a
4653   2293             ; END RELATIONAL
4654   2293 C0 00 00      cmp b, 0
4655   2296 C6 B1 22      je _while58_exit
4656   2299             _while58_block:
4657   2299             ;; show_room(); 
4658   2299 07 9B 17      call show_room
4659   229C             ;; if (move_or_shoot()) { 
4660   229C             _if59_cond:
4661   229C 07 D7 19      call move_or_shoot
4662   229F C0 00 00      cmp b, 0
4663   22A2 C6 AB 22      je _if59_else
4664   22A5             _if59_true:
4665   22A5             ;; shoot(); 
4666   22A5 07 E7 1A      call shoot
4667   22A8 0A AE 22      jmp _if59_exit
4668   22AB             _if59_else:
4669   22AB             ;; move(); 
4670   22AB 07 D7 1D      call move
4671   22AE             _if59_exit:
4672   22AE 0A 86 22      jmp _while58_cond
4673   22B1             _while58_exit:
4674   22B1             ;; if (finished ==  1  ) { 
4675   22B1             _if60_cond:
4676   22B1 3B 37 23      mov d, _finished ; $finished
4677   22B4 2A            mov b, [d]
4678   22B5             ; START RELATIONAL
4679   22B5 D7            push a
4680   22B6 11            mov a, b
4681   22B7 26 01 00      mov b, $1
4682   22BA B0            cmp a, b
4683   22BB FD 71         seq ; ==
4684   22BD E4            pop a
4685   22BE             ; END RELATIONAL
4686   22BE C0 00 00      cmp b, 0
4687   22C1 C6 D3 22      je _if60_exit
4688   22C4             _if60_true:
4689   22C4             ;; print("HEE HEE HEE - THE WUMPUS'LL GET YOU NEXT TIME!!\n"); 
4690   22C4 26 D7 2B      mov b, __s66 ; "HEE HEE HEE - THE WUMPUS'LL GET YOU NEXT TIME!!\n"
4691   22C7 FD AB         swp b
4692   22C9 D8            push b
4693   22CA 07 ED 0C      call print
4694   22CD 51 02 00      add sp, 2
4695   22D0 0A D3 22      jmp _if60_exit
4696   22D3             _if60_exit:
4697   22D3             ;; if (finished ==  2   ) { 
4698   22D3             _if61_cond:
4699   22D3 3B 37 23      mov d, _finished ; $finished
4700   22D6 2A            mov b, [d]
4701   22D7             ; START RELATIONAL
4702   22D7 D7            push a
4703   22D8 11            mov a, b
4704   22D9 26 02 00      mov b, $2
4705   22DC B0            cmp a, b
4706   22DD FD 71         seq ; ==
4707   22DF E4            pop a
4708   22E0             ; END RELATIONAL
4709   22E0 C0 00 00      cmp b, 0
4710   22E3 C6 F5 22      je _if61_exit
4711   22E6             _if61_true:
4712   22E6             ;; print("HA HA HA - YOU LOSE!\n"); 
4713   22E6 26 07 2C      mov b, __s67 ; "HA HA HA - YOU LOSE!\n"
4714   22E9 FD AB         swp b
4715   22EB D8            push b
4716   22EC 07 ED 0C      call print
4717   22EF 51 02 00      add sp, 2
4718   22F2 0A F5 22      jmp _if61_exit
4719   22F5             _if61_exit:
4720   22F5             ;; c = getlet("NEW GAME (Y-N)"); 
4721   22F5 FA FF FF      lea d, [bp + -1] ; $c
4722   22F8 DA            push d
4723   22F9 26 D0 23      mov b, __s1 ; "NEW GAME (Y-N)"
4724   22FC FD AB         swp b
4725   22FE D8            push b
4726   22FF 07 85 15      call getlet
4727   2302 51 02 00      add sp, 2
4728   2305 E7            pop d
4729   2306 FD 43         mov [d], b
4730   2308             ;; if (c == 'N') { 
4731   2308             _if62_cond:
4732   2308 FA FF FF      lea d, [bp + -1] ; $c
4733   230B 2A            mov b, [d]
4734   230C             ; START RELATIONAL
4735   230C D7            push a
4736   230D 11            mov a, b
4737   230E 26 4E 00      mov b, $4e
4738   2311 B0            cmp a, b
4739   2312 FD 71         seq ; ==
4740   2314 E4            pop a
4741   2315             ; END RELATIONAL
4742   2315 C0 00 00      cmp b, 0
4743   2318 C6 21 23      je _if62_exit
4744   231B             _if62_true:
4745   231B             ;; exit(); 
4746   231B 07 67 0D      call exit
4747   231E 0A 21 23      jmp _if62_exit
4748   2321             _if62_exit:
4749   2321 F9            leave
4750   2322 09            ret
4751   2323             ; --- END TEXT BLOCK
4752   2323             
4753   2323             ; --- BEGIN DATA BLOCK
4754   2323 00 00       _arrows: .fill 2, 0
4755   2325 00 00       _debug: .dw 0
4756   2327 1D 00       _rand_val: .dw 29
4757   2329 01 00       _rand_inc: .dw 1
4758   232B 00 00 00 00 _loc_data: .fill 12, 0
4758   232F 00 00 00 00 
4758   2333 00 00 00 00 
4759   2337 00 00       _finished: .fill 2, 0
4760   2339             _cave_data: 
4761   2339 00 00       .dw 
4762   233B 01 00 04 00 .dw 1,4,7,0,2,9,1,3,11,2,4,13,0,3,5,4,6,14,5,7,16,0,6,8,7,9,17,1,8,10,
4762   233F 07 00 00 00 
4762   2343 02 00 09 00 
4762   2347 01 00 03 00 
4762   234B 0B 00 02 00 
4762   234F 04 00 0D 00 
4762   2353 00 00 03 00 
4762   2357 05 00 04 00 
4762   235B 06 00 0E 00 
4762   235F 05 00 07 00 
4762   2363 10 00 00 00 
4762   2367 06 00 08 00 
4762   236B 07 00 09 00 
4762   236F 11 00 01 00 
4762   2373 08 00 0A 00 
4763   2377 00 00       .dw 
4764   2379 00 00       .dw 
4765   237B 09 00 0B 00 .dw 9,11,18,2,10,12,11,13,19,3,12,14,5,13,15,14,16,19,6,15,17,8,16,18,10,17,19,12,15,18,
4765   237F 12 00 02 00 
4765   2383 0A 00 0C 00 
4765   2387 0B 00 0D 00 
4765   238B 13 00 03 00 
4765   238F 0C 00 0E 00 
4765   2393 05 00 0D 00 
4765   2397 0F 00 0E 00 
4765   239B 10 00 13 00 
4765   239F 06 00 0F 00 
4765   23A3 11 00 08 00 
4765   23A7 10 00 12 00 
4765   23AB 0A 00 11 00 
4765   23AF 13 00 0C 00 
4765   23B3 0F 00 12 00 
4766   23B7 00 00       .dw 
4767   23B9 00 00       .dw 
4768   23BB 49 4E 53 54 __s0: .db "INSTRUCTIONS (Y-N): ", 0
4768   23BF 52 55 43 54 
4768   23C3 49 4F 4E 53 
4768   23C7 20 28 59 2D 
4768   23CB 4E 29 3A 20 
4768   23CF 00 
4769   23D0 4E 45 57 20 __s1: .db "NEW GAME (Y-N)", 0
4769   23D4 47 41 4D 45 
4769   23D8 20 28 59 2D 
4769   23DC 4E 29 00 
4770   23DF 55 6E 6B 6E __s2: .db "Unknown type size in va_arg() call. Size needs to be either 1 or 2.", 0
4770   23E3 6F 77 6E 20 
4770   23E7 74 79 70 65 
4770   23EB 20 73 69 7A 
4770   23EF 65 20 69 6E 
4770   23F3 20 76 61 5F 
4770   23F7 61 72 67 28 
4770   23FB 29 20 63 61 
4770   23FF 6C 6C 2E 20 
4770   2403 53 69 7A 65 
4770   2407 20 6E 65 65 
4770   240B 64 73 20 74 
4770   240F 6F 20 62 65 
4770   2413 20 65 69 74 
4770   2417 68 65 72 20 
4770   241B 31 20 6F 72 
4770   241F 20 32 2E 00 
4771   2423 45 72 72 6F __s3: .db "Error: Unknown argument type.\n", 0
4771   2427 72 3A 20 55 
4771   242B 6E 6B 6E 6F 
4771   242F 77 6E 20 61 
4771   2433 72 67 75 6D 
4771   2437 65 6E 74 20 
4771   243B 74 79 70 65 
4771   243F 2E 0A 00 
4772   2442 1B 5B 32 4A __s4: .db "\033[2J\033[H", 0
4772   2446 1B 5B 48 00 
4773   244A 0A 00       __s5: .db "\n", 0
4774   244C 57 45 4C 43 __s6: .db "WELCOME TO 'HUNT THE WUMPUS'\n", 0
4774   2450 4F 4D 45 20 
4774   2454 54 4F 20 27 
4774   2458 48 55 4E 54 
4774   245C 20 54 48 45 
4774   2460 20 57 55 4D 
4774   2464 50 55 53 27 
4774   2468 0A 00 
4775   246A 54 48 45 20 __s7: .db "THE WUMPUS LIVES IN A CAVE OF 20 ROOMS. EACH ROOM\n", 0
4775   246E 57 55 4D 50 
4775   2472 55 53 20 4C 
4775   2476 49 56 45 53 
4775   247A 20 49 4E 20 
4775   247E 41 20 43 41 
4775   2482 56 45 20 4F 
4775   2486 46 20 32 30 
4775   248A 20 52 4F 4F 
4775   248E 4D 53 2E 20 
4775   2492 45 41 43 48 
4775   2496 20 52 4F 4F 
4775   249A 4D 0A 00 
4776   249D 48 41 53 20 __s8: .db "HAS 3 TUNNELS LEADING TO OTHER ROOMS. (LOOK AT A\n", 0
4776   24A1 33 20 54 55 
4776   24A5 4E 4E 45 4C 
4776   24A9 53 20 4C 45 
4776   24AD 41 44 49 4E 
4776   24B1 47 20 54 4F 
4776   24B5 20 4F 54 48 
4776   24B9 45 52 20 52 
4776   24BD 4F 4F 4D 53 
4776   24C1 2E 20 28 4C 
4776   24C5 4F 4F 4B 20 
4776   24C9 41 54 20 41 
4776   24CD 0A 00 
4777   24CF 44 4F 44 45 __s9: .db "DODECAHEDRON TO SEE HOW THIS WORKS-IF YOU DON'T KNOW\n", 0
4777   24D3 43 41 48 45 
4777   24D7 44 52 4F 4E 
4777   24DB 20 54 4F 20 
4777   24DF 53 45 45 20 
4777   24E3 48 4F 57 20 
4777   24E7 54 48 49 53 
4777   24EB 20 57 4F 52 
4777   24EF 4B 53 2D 49 
4777   24F3 46 20 59 4F 
4777   24F7 55 20 44 4F 
4777   24FB 4E 27 54 20 
4777   24FF 4B 4E 4F 57 
4777   2503 0A 
4778   2504 57 48 41 54 __s10: .db "WHAT A DODECAHEDRON IS, ASK SOMEONE)\n", 0
4778   2508 20 41 20 44 
4778   250C 4F 44 45 43 
4778   2510 41 48 45 44 
4778   2514 52 4F 4E 20 
4778   2518 49 53 2C 20 
4778   251C 41 53 4B 20 
4778   2520 53 4F 4D 45 
4778   2524 4F 4E 45 29 
4778   2528 0A 00 
4779   252A 20 48 41 5A __s11: .db " HAZARDS:\n", 0
4779   252E 41 52 44 53 
4779   2532 3A 0A 00 
4780   2535 20 42 4F 54 __s12: .db " BOTTOMLESS PITS: TWO ROOMS HAVE BOTTOMLESS PITS IN THEM\n", 0
4780   2539 54 4F 4D 4C 
4780   253D 45 53 53 20 
4780   2541 50 49 54 53 
4780   2545 3A 20 54 57 
4780   2549 4F 20 52 4F 
4780   254D 4F 4D 53 20 
4780   2551 48 41 56 45 
4780   2555 20 42 4F 54 
4780   2559 54 4F 4D 4C 
4780   255D 45 53 53 20 
4780   2561 50 49 54 53 
4780   2565 20 49 4E 20 
4780   2569 54 48 45 4D 
4780   256D 0A 00 
4781   256F 20 49 46 20 __s13: .db " IF YOU GO THERE, YOU FALL INTO THE PIT (& LOSE!)\n", 0
4781   2573 59 4F 55 20 
4781   2577 47 4F 20 54 
4781   257B 48 45 52 45 
4781   257F 2C 20 59 4F 
4781   2583 55 20 46 41 
4781   2587 4C 4C 20 49 
4781   258B 4E 54 4F 20 
4781   258F 54 48 45 20 
4781   2593 50 49 54 20 
4781   2597 28 26 20 4C 
4781   259B 4F 53 45 21 
4781   259F 29 0A 00 
4782   25A2 20 53 55 50 __s14: .db " SUPER BATS     : TWO OTHER ROOMS HAVE SUPER BATS. IF YOU\n", 0
4782   25A6 45 52 20 42 
4782   25AA 41 54 53 20 
4782   25AE 20 20 20 20 
4782   25B2 3A 20 54 57 
4782   25B6 4F 20 4F 54 
4782   25BA 48 45 52 20 
4782   25BE 52 4F 4F 4D 
4782   25C2 53 20 48 41 
4782   25C6 56 45 20 53 
4782   25CA 55 50 45 52 
4782   25CE 20 42 41 54 
4782   25D2 53 2E 20 49 
4782   25D6 46 20 59 4F 
4782   25DA 55 0A 00 
4783   25DD 20 47 4F 20 __s15: .db " GO THERE, A BAT GRABS YOU AND TAKES YOU TO SOME OTHER\n", 0
4783   25E1 54 48 45 52 
4783   25E5 45 2C 20 41 
4783   25E9 20 42 41 54 
4783   25ED 20 47 52 41 
4783   25F1 42 53 20 59 
4783   25F5 4F 55 20 41 
4783   25F9 4E 44 20 54 
4783   25FD 41 4B 45 53 
4783   2601 20 59 4F 55 
4783   2605 20 54 4F 20 
4783   2609 53 4F 4D 45 
4783   260D 20 4F 54 48 
4783   2611 45 52 0A 00 
4784   2615 20 52 4F 4F __s16: .db " ROOM AT RANDOM. (WHICH MAY BE TROUBLESOME)\n", 0
4784   2619 4D 20 41 54 
4784   261D 20 52 41 4E 
4784   2621 44 4F 4D 2E 
4784   2625 20 28 57 48 
4784   2629 49 43 48 20 
4784   262D 4D 41 59 20 
4784   2631 42 45 20 54 
4784   2635 52 4F 55 42 
4784   2639 4C 45 53 4F 
4784   263D 4D 45 29 0A 
4784   2641 00 
4785   2642 20 57 55 4D __s17: .db " WUMPUS:\n", 0
4785   2646 50 55 53 3A 
4785   264A 0A 00 
4786   264C 20 54 48 45 __s18: .db " THE WUMPUS IS NOT BOTHERED BY HAZARDS (HE HAS SUCKER\n", 0
4786   2650 20 57 55 4D 
4786   2654 50 55 53 20 
4786   2658 49 53 20 4E 
4786   265C 4F 54 20 42 
4786   2660 4F 54 48 45 
4786   2664 52 45 44 20 
4786   2668 42 59 20 48 
4786   266C 41 5A 41 52 
4786   2670 44 53 20 28 
4786   2674 48 45 20 48 
4786   2678 41 53 20 53 
4786   267C 55 43 4B 45 
4786   2680 52 0A 00 
4787   2683 20 46 45 45 __s19: .db " FEET AND IS TOO BIG FOR A BAT TO LIFT).  USUALLY\n", 0
4787   2687 54 20 41 4E 
4787   268B 44 20 49 53 
4787   268F 20 54 4F 4F 
4787   2693 20 42 49 47 
4787   2697 20 46 4F 52 
4787   269B 20 41 20 42 
4787   269F 41 54 20 54 
4787   26A3 4F 20 4C 49 
4787   26A7 46 54 29 2E 
4787   26AB 20 20 55 53 
4787   26AF 55 41 4C 4C 
4787   26B3 59 0A 00 
4788   26B6 20 48 45 20 __s20: .db " HE IS ASLEEP.  TWO THINGS WAKE HIM UP: YOU SHOOTING AN\n", 0
4788   26BA 49 53 20 41 
4788   26BE 53 4C 45 45 
4788   26C2 50 2E 20 20 
4788   26C6 54 57 4F 20 
4788   26CA 54 48 49 4E 
4788   26CE 47 53 20 57 
4788   26D2 41 4B 45 20 
4788   26D6 48 49 4D 20 
4788   26DA 55 50 3A 20 
4788   26DE 59 4F 55 20 
4788   26E2 53 48 4F 4F 
4788   26E6 54 49 4E 47 
4788   26EA 20 41 4E 0A 
4788   26EE 00 
4789   26EF 20 41 52 52 __s21: .db " ARROW OR YOU ENTERING HIS ROOM.\n", 0
4789   26F3 4F 57 20 4F 
4789   26F7 52 20 59 4F 
4789   26FB 55 20 45 4E 
4789   26FF 54 45 52 49 
4789   2703 4E 47 20 48 
4789   2707 49 53 20 52 
4789   270B 4F 4F 4D 2E 
4789   270F 0A 00 
4790   2711 20 49 46 20 __s22: .db " IF THE WUMPUS WAKES HE MOVES (P=.75) ONE ROOM\n", 0
4790   2715 54 48 45 20 
4790   2719 57 55 4D 50 
4790   271D 55 53 20 57 
4790   2721 41 4B 45 53 
4790   2725 20 48 45 20 
4790   2729 4D 4F 56 45 
4790   272D 53 20 28 50 
4790   2731 3D 2E 37 35 
4790   2735 29 20 4F 4E 
4790   2739 45 20 52 4F 
4790   273D 4F 4D 0A 00 
4791   2741 20 4F 52 20 __s23: .db " OR STAYS STILL (P=.25).  AFTER THAT, IF HE IS WHERE YOU\n", 0
4791   2745 53 54 41 59 
4791   2749 53 20 53 54 
4791   274D 49 4C 4C 20 
4791   2751 28 50 3D 2E 
4791   2755 32 35 29 2E 
4791   2759 20 20 41 46 
4791   275D 54 45 52 20 
4791   2761 54 48 41 54 
4791   2765 2C 20 49 46 
4791   2769 20 48 45 20 
4791   276D 49 53 20 57 
4791   2771 48 45 52 45 
4791   2775 20 59 4F 55 
4791   2779 0A 00 
4792   277B 20 41 52 45 __s24: .db " ARE, HE EATS YOU UP AND YOU LOSE!\n", 0
4792   277F 2C 20 48 45 
4792   2783 20 45 41 54 
4792   2787 53 20 59 4F 
4792   278B 55 20 55 50 
4792   278F 20 41 4E 44 
4792   2793 20 59 4F 55 
4792   2797 20 4C 4F 53 
4792   279B 45 21 0A 00 
4793   279F 20 59 4F 55 __s25: .db " YOU:\n", 0
4793   27A3 3A 0A 00 
4794   27A6 20 45 41 43 __s26: .db " EACH TURN YOU MAY MOVE OR SHOOT A CROOKED ARROW\n", 0
4794   27AA 48 20 54 55 
4794   27AE 52 4E 20 59 
4794   27B2 4F 55 20 4D 
4794   27B6 41 59 20 4D 
4794   27BA 4F 56 45 20 
4794   27BE 4F 52 20 53 
4794   27C2 48 4F 4F 54 
4794   27C6 20 41 20 43 
4794   27CA 52 4F 4F 4B 
4794   27CE 45 44 20 41 
4794   27D2 52 52 4F 57 
4794   27D6 0A 00 
4795   27D8 20 4D 4F 56 __s27: .db " MOVING:  YOU CAN MOVE ONE ROOM (THRU ONE TUNNEL)\n", 0
4795   27DC 49 4E 47 3A 
4795   27E0 20 20 59 4F 
4795   27E4 55 20 43 41 
4795   27E8 4E 20 4D 4F 
4795   27EC 56 45 20 4F 
4795   27F0 4E 45 20 52 
4795   27F4 4F 4F 4D 20 
4795   27F8 28 54 48 52 
4795   27FC 55 20 4F 4E 
4795   2800 45 20 54 55 
4795   2804 4E 4E 45 4C 
4795   2808 29 0A 00 
4796   280B 20 41 52 52 __s28: .db " ARROWS:  YOU HAVE 5 ARROWS.  YOU LOSE WHEN YOU RUN OUT\n", 0
4796   280F 4F 57 53 3A 
4796   2813 20 20 59 4F 
4796   2817 55 20 48 41 
4796   281B 56 45 20 35 
4796   281F 20 41 52 52 
4796   2823 4F 57 53 2E 
4796   2827 20 20 59 4F 
4796   282B 55 20 4C 4F 
4796   282F 53 45 20 57 
4796   2833 48 45 4E 20 
4796   2837 59 4F 55 20 
4796   283B 52 55 4E 20 
4796   283F 4F 55 54 0A 
4796   2843 00 
4797   2844 20 45 41 43 __s29: .db " EACH ARROW CAN GO FROM 1 TO 5 ROOMS. YOU AIM BY TELLING\n", 0
4797   2848 48 20 41 52 
4797   284C 52 4F 57 20 
4797   2850 43 41 4E 20 
4797   2854 47 4F 20 46 
4797   2858 52 4F 4D 20 
4797   285C 31 20 54 4F 
4797   2860 20 35 20 52 
4797   2864 4F 4F 4D 53 
4797   2868 2E 20 59 4F 
4797   286C 55 20 41 49 
4797   2870 4D 20 42 59 
4797   2874 20 54 45 4C 
4797   2878 4C 49 4E 47 
4797   287C 0A 00 
4798   287E 20 20 20 54 __s30: .db "   THE COMPUTER THE ROOM#S YOU WANT THE ARROW TO GO TO.\n", 0
4798   2882 48 45 20 43 
4798   2886 4F 4D 50 55 
4798   288A 54 45 52 20 
4798   288E 54 48 45 20 
4798   2892 52 4F 4F 4D 
4798   2896 23 53 20 59 
4798   289A 4F 55 20 57 
4798   289E 41 4E 54 20 
4798   28A2 54 48 45 20 
4798   28A6 41 52 52 4F 
4798   28AA 57 20 54 4F 
4798   28AE 20 47 4F 20 
4798   28B2 54 4F 2E 0A 
4798   28B6 00 
4799   28B7 20 20 20 49 __s31: .db "   IF THE ARROW CAN'T GO THAT WAY (IF NO TUNNEL) IT MOVES\n", 0
4799   28BB 46 20 54 48 
4799   28BF 45 20 41 52 
4799   28C3 52 4F 57 20 
4799   28C7 43 41 4E 27 
4799   28CB 54 20 47 4F 
4799   28CF 20 54 48 41 
4799   28D3 54 20 57 41 
4799   28D7 59 20 28 49 
4799   28DB 46 20 4E 4F 
4799   28DF 20 54 55 4E 
4799   28E3 4E 45 4C 29 
4799   28E7 20 49 54 20 
4799   28EB 4D 4F 56 45 
4799   28EF 53 0A 
4800   28F1 20 20 20 41 __s32: .db "   AT RANDOM TO THE NEXT ROOM.\n", 0
4800   28F5 54 20 52 41 
4800   28F9 4E 44 4F 4D 
4800   28FD 20 54 4F 20 
4800   2901 54 48 45 20 
4800   2905 4E 45 58 54 
4800   2909 20 52 4F 4F 
4800   290D 4D 2E 0A 00 
4801   2911 20 20 20 20 __s33: .db "     IF THE ARROW HITS THE WUMPUS, YOU WIN.\n", 0
4801   2915 20 49 46 20 
4801   2919 54 48 45 20 
4801   291D 41 52 52 4F 
4801   2921 57 20 48 49 
4801   2925 54 53 20 54 
4801   2929 48 45 20 57 
4801   292D 55 4D 50 55 
4801   2931 53 2C 20 59 
4801   2935 4F 55 20 57 
4801   2939 49 4E 2E 0A 
4801   293D 00 
4802   293E 20 20 20 20 __s34: .db "     IF THE ARROW HITS YOU, YOU LOSE.\n", 0
4802   2942 20 49 46 20 
4802   2946 54 48 45 20 
4802   294A 41 52 52 4F 
4802   294E 57 20 48 49 
4802   2952 54 53 20 59 
4802   2956 4F 55 2C 20 
4802   295A 59 4F 55 20 
4802   295E 4C 4F 53 45 
4802   2962 2E 0A 00 
4803   2965 20 57 41 52 __s35: .db " WARNINGS:\n", 0
4803   2969 4E 49 4E 47 
4803   296D 53 3A 0A 00 
4804   2971 20 57 48 45 __s36: .db " WHEN YOU ARE ONE ROOM AWAY FROM A WUMPUS OR HAZARD,\n", 0
4804   2975 4E 20 59 4F 
4804   2979 55 20 41 52 
4804   297D 45 20 4F 4E 
4804   2981 45 20 52 4F 
4804   2985 4F 4D 20 41 
4804   2989 57 41 59 20 
4804   298D 46 52 4F 4D 
4804   2991 20 41 20 57 
4804   2995 55 4D 50 55 
4804   2999 53 20 4F 52 
4804   299D 20 48 41 5A 
4804   29A1 41 52 44 2C 
4804   29A5 0A 00 
4805   29A7 20 54 48 45 __s37: .db " THE COMPUTER SAYS:\n", 0
4805   29AB 20 43 4F 4D 
4805   29AF 50 55 54 45 
4805   29B3 52 20 53 41 
4805   29B7 59 53 3A 0A 
4805   29BB 00 
4806   29BC 20 57 55 4D __s38: .db " WUMPUS:  'I SMELL A WUMPUS'\n", 0
4806   29C0 50 55 53 3A 
4806   29C4 20 20 27 49 
4806   29C8 20 53 4D 45 
4806   29CC 4C 4C 20 41 
4806   29D0 20 57 55 4D 
4806   29D4 50 55 53 27 
4806   29D8 0A 00 
4807   29DA 20 42 41 54 __s39: .db " BAT   :  'BATS NEARBY'\n", 0
4807   29DE 20 20 20 3A 
4807   29E2 20 20 27 42 
4807   29E6 41 54 53 20 
4807   29EA 4E 45 41 52 
4807   29EE 42 59 27 0A 
4807   29F2 00 
4808   29F3 20 50 49 54 __s40: .db " PIT   :  'I FEEL A DRAFT'\n", 0
4808   29F7 20 20 20 3A 
4808   29FB 20 20 27 49 
4808   29FF 20 46 45 45 
4808   2A03 4C 20 41 20 
4808   2A07 44 52 41 46 
4808   2A0B 54 27 0A 00 
4809   2A0F 49 20 53 4D __s41: .db "I SMELL A WUMPUS!\n", 0
4809   2A13 45 4C 4C 20 
4809   2A17 41 20 57 55 
4809   2A1B 4D 50 55 53 
4809   2A1F 21 0A 00 
4810   2A22 49 20 46 45 __s42: .db "I FEEL A DRAFT\n", 0
4810   2A26 45 4C 20 41 
4810   2A2A 20 44 52 41 
4810   2A2E 46 54 0A 00 
4811   2A32 42 41 54 53 __s43: .db "BATS NEARBY!\n", 0
4811   2A36 20 4E 45 41 
4811   2A3A 52 42 59 21 
4811   2A3E 0A 00 
4812   2A40 59 4F 55 20 __s44: .db "YOU ARE IN ROOM ", 0
4812   2A44 41 52 45 20 
4812   2A48 49 4E 20 52 
4812   2A4C 4F 4F 4D 20 
4812   2A50 00 
4813   2A51 54 55 4E 4E __s45: .db "TUNNELS LEAD TO ", 0
4813   2A55 45 4C 53 20 
4813   2A59 4C 45 41 44 
4813   2A5D 20 54 4F 20 
4813   2A61 00 
4814   2A62 2C 20 00    __s46: .db ", ", 0
4815   2A65 0A 0A 00    __s47: .db "\n\n", 0
4816   2A68 53 48 4F 4F __s48: .db "SHOOT OR MOVE (S-M)", 0
4816   2A6C 54 20 4F 52 
4816   2A70 20 4D 4F 56 
4816   2A74 45 20 28 53 
4816   2A78 2D 4D 29 00 
4817   2A7C 54 53 4B 20 __s49: .db "TSK TSK TSK - WUMPUS GOT YOU!\n", 0
4817   2A80 54 53 4B 20 
4817   2A84 54 53 4B 20 
4817   2A88 2D 20 57 55 
4817   2A8C 4D 50 55 53 
4817   2A90 20 47 4F 54 
4817   2A94 20 59 4F 55 
4817   2A98 21 0A 00 
4818   2A9B 4E 4F 2E 20 __s50: .db "NO. OF ROOMS (1-5)", 0
4818   2A9F 4F 46 20 52 
4818   2AA3 4F 4F 4D 53 
4818   2AA7 20 28 31 2D 
4818   2AAB 35 29 00 
4819   2AAE 52 4F 4F 4D __s51: .db "ROOM #", 0
4819   2AB2 20 23 00 
4820   2AB5 41 52 52 4F __s52: .db "ARROWS AREN'T THAT CROOKED - TRY ANOTHER ROOM\n", 0
4820   2AB9 57 53 20 41 
4820   2ABD 52 45 4E 27 
4820   2AC1 54 20 54 48 
4820   2AC5 41 54 20 43 
4820   2AC9 52 4F 4F 4B 
4820   2ACD 45 44 20 2D 
4820   2AD1 20 54 52 59 
4820   2AD5 20 41 4E 4F 
4820   2AD9 54 48 45 52 
4820   2ADD 20 52 4F 4F 
4820   2AE1 4D 0A 
4821   2AE3 41 48 41 21 __s53: .db "AHA! YOU GOT THE WUMPUS!\n", 0
4821   2AE7 20 59 4F 55 
4821   2AEB 20 47 4F 54 
4821   2AEF 20 54 48 45 
4821   2AF3 20 57 55 4D 
4821   2AF7 50 55 53 21 
4821   2AFB 0A 00 
4822   2AFD 4F 55 43 48 __s54: .db "OUCH! ARROW GOT YOU!\n", 0
4822   2B01 21 20 41 52 
4822   2B05 52 4F 57 20 
4822   2B09 47 4F 54 20 
4822   2B0D 59 4F 55 21 
4822   2B11 0A 00 
4823   2B13 4D 49 53 53 __s55: .db "MISSED\n", 0
4823   2B17 45 44 0A 00 
4824   2B1B 57 48 45 52 __s56: .db "WHERE TO", 0
4824   2B1F 45 20 54 4F 
4824   2B23 00 
4825   2B24 4E 4F 54 20 __s57: .db "NOT POSSIBLE\n", 0
4825   2B28 50 4F 53 53 
4825   2B2C 49 42 4C 45 
4825   2B30 0A 00 
4826   2B32 5A 41 50 2D __s58: .db "ZAP--SUPER BAT SNATCH! ELSEWHEREVILLE FOR YOU!\n", 0
4826   2B36 2D 53 55 50 
4826   2B3A 45 52 20 42 
4826   2B3E 41 54 20 53 
4826   2B42 4E 41 54 43 
4826   2B46 48 21 20 45 
4826   2B4A 4C 53 45 57 
4826   2B4E 48 45 52 45 
4826   2B52 56 49 4C 4C 
4826   2B56 45 20 46 4F 
4826   2B5A 52 20 59 4F 
4826   2B5E 55 21 0A 00 
4827   2B62 2E 2E 2E 20 __s59: .db "... OOPS! BUMPED A WUMPUS!\n", 0
4827   2B66 4F 4F 50 53 
4827   2B6A 21 20 42 55 
4827   2B6E 4D 50 45 44 
4827   2B72 20 41 20 57 
4827   2B76 55 4D 50 55 
4827   2B7A 53 21 0A 00 
4828   2B7E 59 59 59 59 __s60: .db "YYYYIIIIEEEE . . . FELL IN PIT\n", 0
4828   2B82 49 49 49 49 
4828   2B86 45 45 45 45 
4828   2B8A 20 2E 20 2E 
4828   2B8E 20 2E 20 46 
4828   2B92 45 4C 4C 20 
4828   2B96 49 4E 20 50 
4828   2B9A 49 54 0A 00 
4829   2B9E 48 55 4E 54 __s61: .db "HUNT THE WUMPUS\n", 0
4829   2BA2 20 54 48 45 
4829   2BA6 20 57 55 4D 
4829   2BAA 50 55 53 0A 
4829   2BAE 00 
4830   2BAF 57 75 6D 70 __s62: .db "Wumpus is at ", 0
4830   2BB3 75 73 20 69 
4830   2BB7 73 20 61 74 
4830   2BBB 20 00 
4831   2BBD 2C 20 70 69 __s63: .db ", pits at ", 0
4831   2BC1 74 73 20 61 
4831   2BC5 74 20 00 
4832   2BC8 20 26 20 00 __s64: .db " & ", 0
4833   2BCC 2C 20 62 61 __s65: .db ", bats at ", 0
4833   2BD0 74 73 20 61 
4833   2BD4 74 20 00 
4834   2BD7 48 45 45 20 __s66: .db "HEE HEE HEE - THE WUMPUS'LL GET YOU NEXT TIME!!\n", 0
4834   2BDB 48 45 45 20 
4834   2BDF 48 45 45 20 
4834   2BE3 2D 20 54 48 
4834   2BE7 45 20 57 55 
4834   2BEB 4D 50 55 53 
4834   2BEF 27 4C 4C 20 
4834   2BF3 47 45 54 20 
4834   2BF7 59 4F 55 20 
4834   2BFB 4E 45 58 54 
4834   2BFF 20 54 49 4D 
4834   2C03 45 21 21 0A 
4835   2C07 48 41 20 48 __s67: .db "HA HA HA - YOU LOSE!\n", 0
4835   2C0B 41 20 48 41 
4835   2C0F 20 2D 20 59 
4835   2C13 4F 55 20 4C 
4835   2C17 4F 53 45 21 
4835   2C1B 0A 00 
4836   2C1D             
4837   2C1D 1F 2C       _heap_top: .dw _heap
4838   2C1F 00          _heap: .db 0
4839   2C20             ; --- END DATA BLOCK
4840   2C20             
4841   2C20             .end
tasm: Number of errors = 0
