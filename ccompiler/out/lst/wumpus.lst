0001   0000             ; --- FILENAME: programs/wumpus.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; int c; 
0011   0408 52 02 00      sub sp, 2
0012   040B             ; c = getlet("INSTRUCTIONS (Y-N): "); 
0013   040B FA FF FF      lea d, [bp + -1] ; $c
0014   040E DA            push d
0015   040F                            
0016   040F             ; --- START FUNCTION CALL
0017   040F                            
0018   040F 26 64 18      mov b, _s0 ; "INSTRUCTIONS (Y-N): "
0019   0412 FD AB         swp b
0020   0414 D8            push b
0021   0415 07 93 04      call getlet
0022   0418 51 02 00      add sp, 2
0023   041B             ; --- END FUNCTION CALL
0024   041B E7            pop d
0025   041C FD 43         mov [d], b
0026   041E             ; if (c == 'Y') { 
0027   041E             _if1_cond:
0028   041E                            
0029   041E FA FF FF      lea d, [bp + -1] ; $c
0030   0421 2A            mov b, [d]
0031   0422 38 00 00      mov c, 0
0032   0425             ; --- START RELATIONAL
0033   0425 D7            push a
0034   0426 11            mov a, b
0035   0427 FD 2E 59 00   mov32 cb, $00000059
0035   042B 00 00 
0036   042D B0            cmp a, b
0037   042E FD 71         seq ; ==
0038   0430 E4            pop a
0039   0431             ; --- END RELATIONAL
0040   0431 C0 00 00      cmp b, 0
0041   0434 C6 3D 04      je _if1_exit
0042   0437             _if1_TRUE:
0043   0437             ; print_instructions(); 
0044   0437                            
0045   0437             ; --- START FUNCTION CALL
0046   0437 07 F0 04      call print_instructions
0047   043A 0A 3D 04      jmp _if1_exit
0048   043D             _if1_exit:
0049   043D             ; do {  
0050   043D             _do2_block:
0051   043D             ; game_setup(); 
0052   043D                            
0053   043D             ; --- START FUNCTION CALL
0054   043D 07 9F 11      call game_setup
0055   0440             ; game_play(); 
0056   0440                            
0057   0440             ; --- START FUNCTION CALL
0058   0440 07 08 13      call game_play
0059   0443             ; } while (getlet("NEW GAME (Y-N): ") != 'N'); 
0060   0443             _do2_cond:
0061   0443                            
0062   0443             ; --- START FUNCTION CALL
0063   0443                            
0064   0443 26 79 18      mov b, _s1 ; "NEW GAME (Y-N): "
0065   0446 FD AB         swp b
0066   0448 D8            push b
0067   0449 07 93 04      call getlet
0068   044C 51 02 00      add sp, 2
0069   044F             ; --- END FUNCTION CALL
0070   044F             ; --- START RELATIONAL
0071   044F D7            push a
0072   0450 11            mov a, b
0073   0451 FD 2E 4E 00   mov32 cb, $0000004e
0073   0455 00 00 
0074   0457 B0            cmp a, b
0075   0458 FD 72         sneq ; !=
0076   045A E4            pop a
0077   045B             ; --- END RELATIONAL
0078   045B C0 01 00      cmp b, 1
0079   045E C6 3D 04      je _do2_block
0080   0461             _do2_exit:
0081   0461             ; return 0; 
0082   0461                            
0083   0461 FD 2E 00 00   mov32 cb, $00000000
0083   0465 00 00 
0084   0467 F9            leave
0085   0468 05 0B         syscall sys_terminate_proc
0086   046A             
0087   046A             getnum:
0088   046A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0089   046D             ; int n; 
0090   046D 52 02 00      sub sp, 2
0091   0470             ; print(prompt); 
0092   0470                            
0093   0470             ; --- START FUNCTION CALL
0094   0470                            
0095   0470 FA 05 00      lea d, [bp + 5] ; $prompt
0096   0473 2A            mov b, [d]
0097   0474 38 00 00      mov c, 0
0098   0477 FD AB         swp b
0099   0479 D8            push b
0100   047A 07 FD 14      call print
0101   047D 51 02 00      add sp, 2
0102   0480             ; --- END FUNCTION CALL
0103   0480             ; n = scann(); 
0104   0480 FA FF FF      lea d, [bp + -1] ; $n
0105   0483 DA            push d
0106   0484                            
0107   0484             ; --- START FUNCTION CALL
0108   0484 07 BC 16      call scann
0109   0487 E7            pop d
0110   0488 FD 43         mov [d], b
0111   048A             ; return n; 
0112   048A                            
0113   048A FA FF FF      lea d, [bp + -1] ; $n
0114   048D 2A            mov b, [d]
0115   048E 38 00 00      mov c, 0
0116   0491 F9            leave
0117   0492 09            ret
0118   0493             
0119   0493             getlet:
0120   0493 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0121   0496             ; char c = '\n'; 
0122   0496 52 01 00      sub sp, 1
0123   0499             ; --- START LOCAL VAR INITIALIZATION
0124   0499 FA 00 00      lea d, [bp + 0] ; $c
0125   049C DA            push d
0126   049D                            
0127   049D FD 2E 0A 00   mov32 cb, $0000000a
0127   04A1 00 00 
0128   04A3 E7            pop d
0129   04A4 FD 3E         mov [d], bl
0130   04A6             ; --- END LOCAL VAR INITIALIZATION
0131   04A6             ; print(prompt); 
0132   04A6                            
0133   04A6             ; --- START FUNCTION CALL
0134   04A6                            
0135   04A6 FA 05 00      lea d, [bp + 5] ; $prompt
0136   04A9 2A            mov b, [d]
0137   04AA 38 00 00      mov c, 0
0138   04AD FD AB         swp b
0139   04AF D8            push b
0140   04B0 07 FD 14      call print
0141   04B3 51 02 00      add sp, 2
0142   04B6             ; --- END FUNCTION CALL
0143   04B6             ; while (c == '\n') { 
0144   04B6             _while3_cond:
0145   04B6                            
0146   04B6 FA 00 00      lea d, [bp + 0] ; $c
0147   04B9 32            mov bl, [d]
0148   04BA A7 00         mov bh, 0
0149   04BC 38 00 00      mov c, 0
0150   04BF             ; --- START RELATIONAL
0151   04BF D7            push a
0152   04C0 11            mov a, b
0153   04C1 FD 2E 0A 00   mov32 cb, $0000000a
0153   04C5 00 00 
0154   04C7 B0            cmp a, b
0155   04C8 FD 71         seq ; ==
0156   04CA E4            pop a
0157   04CB             ; --- END RELATIONAL
0158   04CB C0 00 00      cmp b, 0
0159   04CE C6 DE 04      je _while3_exit
0160   04D1             _while3_block:
0161   04D1             ; c = getchar(); 
0162   04D1 FA 00 00      lea d, [bp + 0] ; $c
0163   04D4 DA            push d
0164   04D5                            
0165   04D5             ; --- START FUNCTION CALL
0166   04D5 07 16 15      call getchar
0167   04D8 E7            pop d
0168   04D9 FD 3E         mov [d], bl
0169   04DB 0A B6 04      jmp _while3_cond
0170   04DE             _while3_exit:
0171   04DE             ; return toupper(c); 
0172   04DE                            
0173   04DE             ; --- START FUNCTION CALL
0174   04DE                            
0175   04DE FA 00 00      lea d, [bp + 0] ; $c
0176   04E1 32            mov bl, [d]
0177   04E2 A7 00         mov bh, 0
0178   04E4 38 00 00      mov c, 0
0179   04E7 DD            push bl
0180   04E8 07 30 15      call toupper
0181   04EB 51 01 00      add sp, 1
0182   04EE             ; --- END FUNCTION CALL
0183   04EE F9            leave
0184   04EF 09            ret
0185   04F0             
0186   04F0             print_instructions:
0187   04F0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0188   04F3             ; print("Welcome to 'hunt the wumpus'\n"); 
0189   04F3                            
0190   04F3             ; --- START FUNCTION CALL
0191   04F3                            
0192   04F3 26 8A 18      mov b, _s2 ; "Welcome to 'hunt the wumpus'\n"
0193   04F6 FD AB         swp b
0194   04F8 D8            push b
0195   04F9 07 FD 14      call print
0196   04FC 51 02 00      add sp, 2
0197   04FF             ; --- END FUNCTION CALL
0198   04FF             ; print("The wumpus lives in a cave of 20 rooms. Each room\n"); 
0199   04FF                            
0200   04FF             ; --- START FUNCTION CALL
0201   04FF                            
0202   04FF 26 A8 18      mov b, _s3 ; "The wumpus lives in a cave of 20 rooms. Each room\n"
0203   0502 FD AB         swp b
0204   0504 D8            push b
0205   0505 07 FD 14      call print
0206   0508 51 02 00      add sp, 2
0207   050B             ; --- END FUNCTION CALL
0208   050B             ; print("has 3 tunnels leading to other rooms.\n");  
0209   050B                            
0210   050B             ; --- START FUNCTION CALL
0211   050B                            
0212   050B 26 DB 18      mov b, _s4 ; "has 3 tunnels leading to other rooms.\n"
0213   050E FD AB         swp b
0214   0510 D8            push b
0215   0511 07 FD 14      call print
0216   0514 51 02 00      add sp, 2
0217   0517             ; --- END FUNCTION CALL
0218   0517             ; print("Look at a dodecahedron to see how this works.\n"); 
0219   0517                            
0220   0517             ; --- START FUNCTION CALL
0221   0517                            
0222   0517 26 02 19      mov b, _s5 ; "Look at a dodecahedron to see how this works.\n"
0223   051A FD AB         swp b
0224   051C D8            push b
0225   051D 07 FD 14      call print
0226   0520 51 02 00      add sp, 2
0227   0523             ; --- END FUNCTION CALL
0228   0523             ; print("\n"); 
0229   0523                            
0230   0523             ; --- START FUNCTION CALL
0231   0523                            
0232   0523 26 31 19      mov b, _s6 ; "\n"
0233   0526 FD AB         swp b
0234   0528 D8            push b
0235   0529 07 FD 14      call print
0236   052C 51 02 00      add sp, 2
0237   052F             ; --- END FUNCTION CALL
0238   052F             ; print(" Hazards:\n"); 
0239   052F                            
0240   052F             ; --- START FUNCTION CALL
0241   052F                            
0242   052F 26 33 19      mov b, _s7 ; " Hazards:\n"
0243   0532 FD AB         swp b
0244   0534 D8            push b
0245   0535 07 FD 14      call print
0246   0538 51 02 00      add sp, 2
0247   053B             ; --- END FUNCTION CALL
0248   053B             ; print(" Bottomless pits: Two rooms have bottomless pits in them\n"); 
0249   053B                            
0250   053B             ; --- START FUNCTION CALL
0251   053B                            
0252   053B 26 3E 19      mov b, _s8 ; " Bottomless pits: Two rooms have bottomless pits in them\n"
0253   053E FD AB         swp b
0254   0540 D8            push b
0255   0541 07 FD 14      call print
0256   0544 51 02 00      add sp, 2
0257   0547             ; --- END FUNCTION CALL
0258   0547             ; print(" If you go there, you fall into the pit (& lose!)\n"); 
0259   0547                            
0260   0547             ; --- START FUNCTION CALL
0261   0547                            
0262   0547 26 78 19      mov b, _s9 ; " If you go there, you fall into the pit (& lose!)\n"
0263   054A FD AB         swp b
0264   054C D8            push b
0265   054D 07 FD 14      call print
0266   0550 51 02 00      add sp, 2
0267   0553             ; --- END FUNCTION CALL
0268   0553             ; print(" SUPER BATS     : TWO OTHER ROOMS HAVE SUPER BATS. IF YOU\n"); 
0269   0553                            
0270   0553             ; --- START FUNCTION CALL
0271   0553                            
0272   0553 26 AB 19      mov b, _s10 ; " SUPER BATS     : TWO OTHER ROOMS HAVE SUPER BATS. IF YOU\n"
0273   0556 FD AB         swp b
0274   0558 D8            push b
0275   0559 07 FD 14      call print
0276   055C 51 02 00      add sp, 2
0277   055F             ; --- END FUNCTION CALL
0278   055F             ; print(" GO THERE, A BAT GRABS YOU AND TAKES YOU TO SOME OTHER\n"); 
0279   055F                            
0280   055F             ; --- START FUNCTION CALL
0281   055F                            
0282   055F 26 E6 19      mov b, _s11 ; " GO THERE, A BAT GRABS YOU AND TAKES YOU TO SOME OTHER\n"
0283   0562 FD AB         swp b
0284   0564 D8            push b
0285   0565 07 FD 14      call print
0286   0568 51 02 00      add sp, 2
0287   056B             ; --- END FUNCTION CALL
0288   056B             ; print(" ROOM AT RANDOM. (WHICH MAY BE TROUBLESOME)\n\n"); 
0289   056B                            
0290   056B             ; --- START FUNCTION CALL
0291   056B                            
0292   056B 26 1E 1A      mov b, _s12 ; " ROOM AT RANDOM. (WHICH MAY BE TROUBLESOME)\n\n"
0293   056E FD AB         swp b
0294   0570 D8            push b
0295   0571 07 FD 14      call print
0296   0574 51 02 00      add sp, 2
0297   0577             ; --- END FUNCTION CALL
0298   0577             ; print(" WUMPUS:\n"); 
0299   0577                            
0300   0577             ; --- START FUNCTION CALL
0301   0577                            
0302   0577 26 4C 1A      mov b, _s13 ; " WUMPUS:\n"
0303   057A FD AB         swp b
0304   057C D8            push b
0305   057D 07 FD 14      call print
0306   0580 51 02 00      add sp, 2
0307   0583             ; --- END FUNCTION CALL
0308   0583             ; print(" THE WUMPUS IS NOT BOTHERED BY HAZARDS (HE HAS SUCKER\n"); 
0309   0583                            
0310   0583             ; --- START FUNCTION CALL
0311   0583                            
0312   0583 26 56 1A      mov b, _s14 ; " THE WUMPUS IS NOT BOTHERED BY HAZARDS (HE HAS SUCKER\n"
0313   0586 FD AB         swp b
0314   0588 D8            push b
0315   0589 07 FD 14      call print
0316   058C 51 02 00      add sp, 2
0317   058F             ; --- END FUNCTION CALL
0318   058F             ; print(" FEET AND IS TOO BIG FOR A BAT TO LIFT).  USUALLY\n"); 
0319   058F                            
0320   058F             ; --- START FUNCTION CALL
0321   058F                            
0322   058F 26 8D 1A      mov b, _s15 ; " FEET AND IS TOO BIG FOR A BAT TO LIFT).  USUALLY\n"
0323   0592 FD AB         swp b
0324   0594 D8            push b
0325   0595 07 FD 14      call print
0326   0598 51 02 00      add sp, 2
0327   059B             ; --- END FUNCTION CALL
0328   059B             ; print(" HE IS ASLEEP.  TWO THINGS WAKE HIM UP: YOU SHOOTING AN\n"); 
0329   059B                            
0330   059B             ; --- START FUNCTION CALL
0331   059B                            
0332   059B 26 C0 1A      mov b, _s16 ; " HE IS ASLEEP.  TWO THINGS WAKE HIM UP: YOU SHOOTING AN\n"
0333   059E FD AB         swp b
0334   05A0 D8            push b
0335   05A1 07 FD 14      call print
0336   05A4 51 02 00      add sp, 2
0337   05A7             ; --- END FUNCTION CALL
0338   05A7             ; print(" ARROW OR YOU ENTERING HIS ROOM.\n"); 
0339   05A7                            
0340   05A7             ; --- START FUNCTION CALL
0341   05A7                            
0342   05A7 26 F9 1A      mov b, _s17 ; " ARROW OR YOU ENTERING HIS ROOM.\n"
0343   05AA FD AB         swp b
0344   05AC D8            push b
0345   05AD 07 FD 14      call print
0346   05B0 51 02 00      add sp, 2
0347   05B3             ; --- END FUNCTION CALL
0348   05B3             ; print(" IF THE WUMPUS WAKES HE MOVES (P=.75) ONE ROOM\n"); 
0349   05B3                            
0350   05B3             ; --- START FUNCTION CALL
0351   05B3                            
0352   05B3 26 1B 1B      mov b, _s18 ; " IF THE WUMPUS WAKES HE MOVES (P=.75) ONE ROOM\n"
0353   05B6 FD AB         swp b
0354   05B8 D8            push b
0355   05B9 07 FD 14      call print
0356   05BC 51 02 00      add sp, 2
0357   05BF             ; --- END FUNCTION CALL
0358   05BF             ; print(" OR STAYS STILL (P=.25).  AFTER THAT, IF HE IS WHERE YOU\n"); 
0359   05BF                            
0360   05BF             ; --- START FUNCTION CALL
0361   05BF                            
0362   05BF 26 4B 1B      mov b, _s19 ; " OR STAYS STILL (P=.25).  AFTER THAT, IF HE IS WHERE YOU\n"
0363   05C2 FD AB         swp b
0364   05C4 D8            push b
0365   05C5 07 FD 14      call print
0366   05C8 51 02 00      add sp, 2
0367   05CB             ; --- END FUNCTION CALL
0368   05CB             ; print(" ARE, HE EATS YOU UP AND YOU LOSE!\n"); 
0369   05CB                            
0370   05CB             ; --- START FUNCTION CALL
0371   05CB                            
0372   05CB 26 85 1B      mov b, _s20 ; " ARE, HE EATS YOU UP AND YOU LOSE!\n"
0373   05CE FD AB         swp b
0374   05D0 D8            push b
0375   05D1 07 FD 14      call print
0376   05D4 51 02 00      add sp, 2
0377   05D7             ; --- END FUNCTION CALL
0378   05D7             ; print("\n"); 
0379   05D7                            
0380   05D7             ; --- START FUNCTION CALL
0381   05D7                            
0382   05D7 26 31 19      mov b, _s6 ; "\n"
0383   05DA FD AB         swp b
0384   05DC D8            push b
0385   05DD 07 FD 14      call print
0386   05E0 51 02 00      add sp, 2
0387   05E3             ; --- END FUNCTION CALL
0388   05E3             ; print(" YOU:\n"); 
0389   05E3                            
0390   05E3             ; --- START FUNCTION CALL
0391   05E3                            
0392   05E3 26 A9 1B      mov b, _s21 ; " YOU:\n"
0393   05E6 FD AB         swp b
0394   05E8 D8            push b
0395   05E9 07 FD 14      call print
0396   05EC 51 02 00      add sp, 2
0397   05EF             ; --- END FUNCTION CALL
0398   05EF             ; print(" EACH TURN YOU MAY MOVE OR SHOOT A CROOKED ARROW\n"); 
0399   05EF                            
0400   05EF             ; --- START FUNCTION CALL
0401   05EF                            
0402   05EF 26 B0 1B      mov b, _s22 ; " EACH TURN YOU MAY MOVE OR SHOOT A CROOKED ARROW\n"
0403   05F2 FD AB         swp b
0404   05F4 D8            push b
0405   05F5 07 FD 14      call print
0406   05F8 51 02 00      add sp, 2
0407   05FB             ; --- END FUNCTION CALL
0408   05FB             ; print(" MOVING:  YOU CAN MOVE ONE ROOM (THRU ONE TUNNEL)\n"); 
0409   05FB                            
0410   05FB             ; --- START FUNCTION CALL
0411   05FB                            
0412   05FB 26 E2 1B      mov b, _s23 ; " MOVING:  YOU CAN MOVE ONE ROOM (THRU ONE TUNNEL)\n"
0413   05FE FD AB         swp b
0414   0600 D8            push b
0415   0601 07 FD 14      call print
0416   0604 51 02 00      add sp, 2
0417   0607             ; --- END FUNCTION CALL
0418   0607             ; print(" ARROWS:  YOU HAVE 5 ARROWS.  YOU LOSE WHEN YOU RUN OUT\n"); 
0419   0607                            
0420   0607             ; --- START FUNCTION CALL
0421   0607                            
0422   0607 26 15 1C      mov b, _s24 ; " ARROWS:  YOU HAVE 5 ARROWS.  YOU LOSE WHEN YOU RUN OUT\n"
0423   060A FD AB         swp b
0424   060C D8            push b
0425   060D 07 FD 14      call print
0426   0610 51 02 00      add sp, 2
0427   0613             ; --- END FUNCTION CALL
0428   0613             ; print(" EACH ARROW CAN GO FROM 1 TO 5 ROOMS. YOU AIM BY TELLING\n"); 
0429   0613                            
0430   0613             ; --- START FUNCTION CALL
0431   0613                            
0432   0613 26 4E 1C      mov b, _s25 ; " EACH ARROW CAN GO FROM 1 TO 5 ROOMS. YOU AIM BY TELLING\n"
0433   0616 FD AB         swp b
0434   0618 D8            push b
0435   0619 07 FD 14      call print
0436   061C 51 02 00      add sp, 2
0437   061F             ; --- END FUNCTION CALL
0438   061F             ; print("   THE COMPUTER THE ROOM#S YOU WANT THE ARROW TO GO TO.\n"); 
0439   061F                            
0440   061F             ; --- START FUNCTION CALL
0441   061F                            
0442   061F 26 88 1C      mov b, _s26 ; "   THE COMPUTER THE ROOM#S YOU WANT THE ARROW TO GO TO.\n"
0443   0622 FD AB         swp b
0444   0624 D8            push b
0445   0625 07 FD 14      call print
0446   0628 51 02 00      add sp, 2
0447   062B             ; --- END FUNCTION CALL
0448   062B             ; print("   IF THE ARROW CAN'T GO THAT WAY (IF NO TUNNEL) IT MOVES\n"); 
0449   062B                            
0450   062B             ; --- START FUNCTION CALL
0451   062B                            
0452   062B 26 C1 1C      mov b, _s27 ; "   IF THE ARROW CAN'T GO THAT WAY (IF NO TUNNEL) IT MOVES\n"
0453   062E FD AB         swp b
0454   0630 D8            push b
0455   0631 07 FD 14      call print
0456   0634 51 02 00      add sp, 2
0457   0637             ; --- END FUNCTION CALL
0458   0637             ; print("   AT RANDOM TO THE NEXT ROOM.\n"); 
0459   0637                            
0460   0637             ; --- START FUNCTION CALL
0461   0637                            
0462   0637 26 FB 1C      mov b, _s28 ; "   AT RANDOM TO THE NEXT ROOM.\n"
0463   063A FD AB         swp b
0464   063C D8            push b
0465   063D 07 FD 14      call print
0466   0640 51 02 00      add sp, 2
0467   0643             ; --- END FUNCTION CALL
0468   0643             ; print("     IF THE ARROW HITS THE WUMPUS, YOU WIN.\n"); 
0469   0643                            
0470   0643             ; --- START FUNCTION CALL
0471   0643                            
0472   0643 26 1B 1D      mov b, _s29 ; "     IF THE ARROW HITS THE WUMPUS, YOU WIN.\n"
0473   0646 FD AB         swp b
0474   0648 D8            push b
0475   0649 07 FD 14      call print
0476   064C 51 02 00      add sp, 2
0477   064F             ; --- END FUNCTION CALL
0478   064F             ; print("     IF THE ARROW HITS YOU, YOU LOSE.\n"); 
0479   064F                            
0480   064F             ; --- START FUNCTION CALL
0481   064F                            
0482   064F 26 48 1D      mov b, _s30 ; "     IF THE ARROW HITS YOU, YOU LOSE.\n"
0483   0652 FD AB         swp b
0484   0654 D8            push b
0485   0655 07 FD 14      call print
0486   0658 51 02 00      add sp, 2
0487   065B             ; --- END FUNCTION CALL
0488   065B             ; print(" WARNINGS:\n"); 
0489   065B                            
0490   065B             ; --- START FUNCTION CALL
0491   065B                            
0492   065B 26 6F 1D      mov b, _s31 ; " WARNINGS:\n"
0493   065E FD AB         swp b
0494   0660 D8            push b
0495   0661 07 FD 14      call print
0496   0664 51 02 00      add sp, 2
0497   0667             ; --- END FUNCTION CALL
0498   0667             ; print(" WHEN YOU ARE ONE ROOM AWAY FROM A WUMPUS OR HAZARD,\n"); 
0499   0667                            
0500   0667             ; --- START FUNCTION CALL
0501   0667                            
0502   0667 26 7B 1D      mov b, _s32 ; " WHEN YOU ARE ONE ROOM AWAY FROM A WUMPUS OR HAZARD,\n"
0503   066A FD AB         swp b
0504   066C D8            push b
0505   066D 07 FD 14      call print
0506   0670 51 02 00      add sp, 2
0507   0673             ; --- END FUNCTION CALL
0508   0673             ; print(" THE COMPUTER SAYS:\n"); 
0509   0673                            
0510   0673             ; --- START FUNCTION CALL
0511   0673                            
0512   0673 26 B1 1D      mov b, _s33 ; " THE COMPUTER SAYS:\n"
0513   0676 FD AB         swp b
0514   0678 D8            push b
0515   0679 07 FD 14      call print
0516   067C 51 02 00      add sp, 2
0517   067F             ; --- END FUNCTION CALL
0518   067F             ; print(" WUMPUS:  'I SMELL A WUMPUS'\n"); 
0519   067F                            
0520   067F             ; --- START FUNCTION CALL
0521   067F                            
0522   067F 26 C6 1D      mov b, _s34 ; " WUMPUS:  'I SMELL A WUMPUS'\n"
0523   0682 FD AB         swp b
0524   0684 D8            push b
0525   0685 07 FD 14      call print
0526   0688 51 02 00      add sp, 2
0527   068B             ; --- END FUNCTION CALL
0528   068B             ; print(" BAT   :  'BATS NEARBY'\n"); 
0529   068B                            
0530   068B             ; --- START FUNCTION CALL
0531   068B                            
0532   068B 26 E4 1D      mov b, _s35 ; " BAT   :  'BATS NEARBY'\n"
0533   068E FD AB         swp b
0534   0690 D8            push b
0535   0691 07 FD 14      call print
0536   0694 51 02 00      add sp, 2
0537   0697             ; --- END FUNCTION CALL
0538   0697             ; print(" PIT   :  'I FEEL A DRAFT'\n"); 
0539   0697                            
0540   0697             ; --- START FUNCTION CALL
0541   0697                            
0542   0697 26 FD 1D      mov b, _s36 ; " PIT   :  'I FEEL A DRAFT'\n"
0543   069A FD AB         swp b
0544   069C D8            push b
0545   069D 07 FD 14      call print
0546   06A0 51 02 00      add sp, 2
0547   06A3             ; --- END FUNCTION CALL
0548   06A3             ; print("\n"); 
0549   06A3                            
0550   06A3             ; --- START FUNCTION CALL
0551   06A3                            
0552   06A3 26 31 19      mov b, _s6 ; "\n"
0553   06A6 FD AB         swp b
0554   06A8 D8            push b
0555   06A9 07 FD 14      call print
0556   06AC 51 02 00      add sp, 2
0557   06AF             ; --- END FUNCTION CALL
0558   06AF F9            leave
0559   06B0 09            ret
0560   06B1             
0561   06B1             show_room:
0562   06B1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0563   06B4             ; int room, k; 
0564   06B4 52 02 00      sub sp, 2
0565   06B7 52 02 00      sub sp, 2
0566   06BA             ; print("\n"); 
0567   06BA                            
0568   06BA             ; --- START FUNCTION CALL
0569   06BA                            
0570   06BA 26 31 19      mov b, _s6 ; "\n"
0571   06BD FD AB         swp b
0572   06BF D8            push b
0573   06C0 07 FD 14      call print
0574   06C3 51 02 00      add sp, 2
0575   06C6             ; --- END FUNCTION CALL
0576   06C6             ; for (k = 0; k < 3; k++) { 
0577   06C6             _for4_init:
0578   06C6 FA FD FF      lea d, [bp + -3] ; $k
0579   06C9 DA            push d
0580   06CA                            
0581   06CA FD 2E 00 00   mov32 cb, $00000000
0581   06CE 00 00 
0582   06D0 E7            pop d
0583   06D1 FD 43         mov [d], b
0584   06D3             _for4_cond:
0585   06D3                            
0586   06D3 FA FD FF      lea d, [bp + -3] ; $k
0587   06D6 2A            mov b, [d]
0588   06D7 38 00 00      mov c, 0
0589   06DA             ; --- START RELATIONAL
0590   06DA D7            push a
0591   06DB 11            mov a, b
0592   06DC FD 2E 03 00   mov32 cb, $00000003
0592   06E0 00 00 
0593   06E2 B0            cmp a, b
0594   06E3 FD 73         slt ; < (signed)
0595   06E5 E4            pop a
0596   06E6             ; --- END RELATIONAL
0597   06E6 C0 00 00      cmp b, 0
0598   06E9 C6 2A 08      je _for4_exit
0599   06EC             _for4_block:
0600   06EC             ; room = cave[loc[	    0   ]][k]; 
0601   06EC FA FF FF      lea d, [bp + -1] ; $room
0602   06EF DA            push d
0603   06F0                            
0604   06F0 3B E0 17      mov d, _cave_data ; $cave
0605   06F3 D7            push a
0606   06F4 DA            push d
0607   06F5                            
0608   06F5 3B D2 17      mov d, _loc_data ; $loc
0609   06F8 D7            push a
0610   06F9 DA            push d
0611   06FA                            
0612   06FA FD 2E 00 00   mov32 cb, $00000000
0612   06FE 00 00 
0613   0700 E7            pop d
0614   0701 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0615   0705 E4            pop a
0616   0706 2A            mov b, [d]
0617   0707 38 00 00      mov c, 0
0618   070A E7            pop d
0619   070B FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0620   070F DA            push d
0621   0710                            
0622   0710 FA FD FF      lea d, [bp + -3] ; $k
0623   0713 2A            mov b, [d]
0624   0714 38 00 00      mov c, 0
0625   0717 E7            pop d
0626   0718 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0627   071C E4            pop a
0628   071D 2A            mov b, [d]
0629   071E 38 00 00      mov c, 0
0630   0721 E7            pop d
0631   0722 FD 43         mov [d], b
0632   0724             ; if (room == loc[	1      ]) { 
0633   0724             _if5_cond:
0634   0724                            
0635   0724 FA FF FF      lea d, [bp + -1] ; $room
0636   0727 2A            mov b, [d]
0637   0728 38 00 00      mov c, 0
0638   072B             ; --- START RELATIONAL
0639   072B D7            push a
0640   072C 11            mov a, b
0641   072D 3B D2 17      mov d, _loc_data ; $loc
0642   0730 D7            push a
0643   0731 DA            push d
0644   0732                            
0645   0732 FD 2E 01 00   mov32 cb, $00000001
0645   0736 00 00 
0646   0738 E7            pop d
0647   0739 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0648   073D E4            pop a
0649   073E 2A            mov b, [d]
0650   073F 38 00 00      mov c, 0
0651   0742 B0            cmp a, b
0652   0743 FD 71         seq ; ==
0653   0745 E4            pop a
0654   0746             ; --- END RELATIONAL
0655   0746 C0 00 00      cmp b, 0
0656   0749 C6 5B 07      je _if5_else
0657   074C             _if5_TRUE:
0658   074C             ; print("I SMELL A WUMPUS!\n"); 
0659   074C                            
0660   074C             ; --- START FUNCTION CALL
0661   074C                            
0662   074C 26 19 1E      mov b, _s37 ; "I SMELL A WUMPUS!\n"
0663   074F FD AB         swp b
0664   0751 D8            push b
0665   0752 07 FD 14      call print
0666   0755 51 02 00      add sp, 2
0667   0758             ; --- END FUNCTION CALL
0668   0758 0A 17 08      jmp _if5_exit
0669   075B             _if5_else:
0670   075B             ; if (room == loc[	2    ] || room == loc[	3    ]) { 
0671   075B             _if6_cond:
0672   075B                            
0673   075B FA FF FF      lea d, [bp + -1] ; $room
0674   075E 2A            mov b, [d]
0675   075F 38 00 00      mov c, 0
0676   0762             ; --- START RELATIONAL
0677   0762 D7            push a
0678   0763 11            mov a, b
0679   0764 3B D2 17      mov d, _loc_data ; $loc
0680   0767 D7            push a
0681   0768 DA            push d
0682   0769                            
0683   0769 FD 2E 02 00   mov32 cb, $00000002
0683   076D 00 00 
0684   076F E7            pop d
0685   0770 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0686   0774 E4            pop a
0687   0775 2A            mov b, [d]
0688   0776 38 00 00      mov c, 0
0689   0779 B0            cmp a, b
0690   077A FD 71         seq ; ==
0691   077C E4            pop a
0692   077D             ; --- END RELATIONAL
0693   077D             ; --- START LOGICAL OR
0694   077D D7            push a
0695   077E 11            mov a, b
0696   077F FA FF FF      lea d, [bp + -1] ; $room
0697   0782 2A            mov b, [d]
0698   0783 38 00 00      mov c, 0
0699   0786             ; --- START RELATIONAL
0700   0786 D7            push a
0701   0787 11            mov a, b
0702   0788 3B D2 17      mov d, _loc_data ; $loc
0703   078B D7            push a
0704   078C DA            push d
0705   078D                            
0706   078D FD 2E 03 00   mov32 cb, $00000003
0706   0791 00 00 
0707   0793 E7            pop d
0708   0794 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0709   0798 E4            pop a
0710   0799 2A            mov b, [d]
0711   079A 38 00 00      mov c, 0
0712   079D B0            cmp a, b
0713   079E FD 71         seq ; ==
0714   07A0 E4            pop a
0715   07A1             ; --- END RELATIONAL
0716   07A1 FD A8         sor a, b ; ||
0717   07A3 E4            pop a
0718   07A4             ; --- END LOGICAL OR
0719   07A4 C0 00 00      cmp b, 0
0720   07A7 C6 B9 07      je _if6_else
0721   07AA             _if6_TRUE:
0722   07AA             ; print("I FEEL A DRAFT\n"); 
0723   07AA                            
0724   07AA             ; --- START FUNCTION CALL
0725   07AA                            
0726   07AA 26 2C 1E      mov b, _s38 ; "I FEEL A DRAFT\n"
0727   07AD FD AB         swp b
0728   07AF D8            push b
0729   07B0 07 FD 14      call print
0730   07B3 51 02 00      add sp, 2
0731   07B6             ; --- END FUNCTION CALL
0732   07B6 0A 17 08      jmp _if6_exit
0733   07B9             _if6_else:
0734   07B9             ; if (room == loc[	4     ] || room == loc[	5     ]) { 
0735   07B9             _if7_cond:
0736   07B9                            
0737   07B9 FA FF FF      lea d, [bp + -1] ; $room
0738   07BC 2A            mov b, [d]
0739   07BD 38 00 00      mov c, 0
0740   07C0             ; --- START RELATIONAL
0741   07C0 D7            push a
0742   07C1 11            mov a, b
0743   07C2 3B D2 17      mov d, _loc_data ; $loc
0744   07C5 D7            push a
0745   07C6 DA            push d
0746   07C7                            
0747   07C7 FD 2E 04 00   mov32 cb, $00000004
0747   07CB 00 00 
0748   07CD E7            pop d
0749   07CE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0750   07D2 E4            pop a
0751   07D3 2A            mov b, [d]
0752   07D4 38 00 00      mov c, 0
0753   07D7 B0            cmp a, b
0754   07D8 FD 71         seq ; ==
0755   07DA E4            pop a
0756   07DB             ; --- END RELATIONAL
0757   07DB             ; --- START LOGICAL OR
0758   07DB D7            push a
0759   07DC 11            mov a, b
0760   07DD FA FF FF      lea d, [bp + -1] ; $room
0761   07E0 2A            mov b, [d]
0762   07E1 38 00 00      mov c, 0
0763   07E4             ; --- START RELATIONAL
0764   07E4 D7            push a
0765   07E5 11            mov a, b
0766   07E6 3B D2 17      mov d, _loc_data ; $loc
0767   07E9 D7            push a
0768   07EA DA            push d
0769   07EB                            
0770   07EB FD 2E 05 00   mov32 cb, $00000005
0770   07EF 00 00 
0771   07F1 E7            pop d
0772   07F2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0773   07F6 E4            pop a
0774   07F7 2A            mov b, [d]
0775   07F8 38 00 00      mov c, 0
0776   07FB B0            cmp a, b
0777   07FC FD 71         seq ; ==
0778   07FE E4            pop a
0779   07FF             ; --- END RELATIONAL
0780   07FF FD A8         sor a, b ; ||
0781   0801 E4            pop a
0782   0802             ; --- END LOGICAL OR
0783   0802 C0 00 00      cmp b, 0
0784   0805 C6 17 08      je _if7_exit
0785   0808             _if7_TRUE:
0786   0808             ; print("BATS NEARBY!\n"); 
0787   0808                            
0788   0808             ; --- START FUNCTION CALL
0789   0808                            
0790   0808 26 3C 1E      mov b, _s39 ; "BATS NEARBY!\n"
0791   080B FD AB         swp b
0792   080D D8            push b
0793   080E 07 FD 14      call print
0794   0811 51 02 00      add sp, 2
0795   0814             ; --- END FUNCTION CALL
0796   0814 0A 17 08      jmp _if7_exit
0797   0817             _if7_exit:
0798   0817             _if6_exit:
0799   0817             _if5_exit:
0800   0817             _for4_update:
0801   0817                            
0802   0817 FA FD FF      lea d, [bp + -3] ; $k
0803   081A 2A            mov b, [d]
0804   081B 38 00 00      mov c, 0
0805   081E 11            mov a, b
0806   081F FD 77         inc b
0807   0821 FA FD FF      lea d, [bp + -3] ; $k
0808   0824 FD 43         mov [d], b
0809   0826 27            mov b, a
0810   0827 0A D3 06      jmp _for4_cond
0811   082A             _for4_exit:
0812   082A             ; print("YOU ARE IN ROOM "); print_unsigned(loc[	    0   ]+1); print("\n"); 
0813   082A                            
0814   082A             ; --- START FUNCTION CALL
0815   082A                            
0816   082A 26 4A 1E      mov b, _s40 ; "YOU ARE IN ROOM "
0817   082D FD AB         swp b
0818   082F D8            push b
0819   0830 07 FD 14      call print
0820   0833 51 02 00      add sp, 2
0821   0836             ; --- END FUNCTION CALL
0822   0836             ; print_unsigned(loc[	    0   ]+1); print("\n"); 
0823   0836                            
0824   0836             ; --- START FUNCTION CALL
0825   0836                            
0826   0836 3B D2 17      mov d, _loc_data ; $loc
0827   0839 D7            push a
0828   083A DA            push d
0829   083B                            
0830   083B FD 2E 00 00   mov32 cb, $00000000
0830   083F 00 00 
0831   0841 E7            pop d
0832   0842 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0833   0846 E4            pop a
0834   0847 2A            mov b, [d]
0835   0848 38 00 00      mov c, 0
0836   084B             ; --- START TERMS
0837   084B D7            push a
0838   084C 11            mov a, b
0839   084D FD 2E 01 00   mov32 cb, $00000001
0839   0851 00 00 
0840   0853 56            add b, a
0841   0854 E4            pop a
0842   0855             ; --- END TERMS
0843   0855 FD AB         swp b
0844   0857 D8            push b
0845   0858 07 96 15      call print_unsigned
0846   085B 51 02 00      add sp, 2
0847   085E             ; --- END FUNCTION CALL
0848   085E             ; print("\n"); 
0849   085E                            
0850   085E             ; --- START FUNCTION CALL
0851   085E                            
0852   085E 26 31 19      mov b, _s6 ; "\n"
0853   0861 FD AB         swp b
0854   0863 D8            push b
0855   0864 07 FD 14      call print
0856   0867 51 02 00      add sp, 2
0857   086A             ; --- END FUNCTION CALL
0858   086A             ; print("TUNNELS LEAD TO ");  
0859   086A                            
0860   086A             ; --- START FUNCTION CALL
0861   086A                            
0862   086A 26 5B 1E      mov b, _s41 ; "TUNNELS LEAD TO "
0863   086D FD AB         swp b
0864   086F D8            push b
0865   0870 07 FD 14      call print
0866   0873 51 02 00      add sp, 2
0867   0876             ; --- END FUNCTION CALL
0868   0876             ; print_unsigned(cave[loc[	    0   ]][0]+1); print(", "); 
0869   0876                            
0870   0876             ; --- START FUNCTION CALL
0871   0876                            
0872   0876 3B E0 17      mov d, _cave_data ; $cave
0873   0879 D7            push a
0874   087A DA            push d
0875   087B                            
0876   087B 3B D2 17      mov d, _loc_data ; $loc
0877   087E D7            push a
0878   087F DA            push d
0879   0880                            
0880   0880 FD 2E 00 00   mov32 cb, $00000000
0880   0884 00 00 
0881   0886 E7            pop d
0882   0887 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0883   088B E4            pop a
0884   088C 2A            mov b, [d]
0885   088D 38 00 00      mov c, 0
0886   0890 E7            pop d
0887   0891 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0888   0895 DA            push d
0889   0896                            
0890   0896 FD 2E 00 00   mov32 cb, $00000000
0890   089A 00 00 
0891   089C E7            pop d
0892   089D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0893   08A1 E4            pop a
0894   08A2 2A            mov b, [d]
0895   08A3 38 00 00      mov c, 0
0896   08A6             ; --- START TERMS
0897   08A6 D7            push a
0898   08A7 11            mov a, b
0899   08A8 FD 2E 01 00   mov32 cb, $00000001
0899   08AC 00 00 
0900   08AE 56            add b, a
0901   08AF E4            pop a
0902   08B0             ; --- END TERMS
0903   08B0 FD AB         swp b
0904   08B2 D8            push b
0905   08B3 07 96 15      call print_unsigned
0906   08B6 51 02 00      add sp, 2
0907   08B9             ; --- END FUNCTION CALL
0908   08B9             ; print(", "); 
0909   08B9                            
0910   08B9             ; --- START FUNCTION CALL
0911   08B9                            
0912   08B9 26 6C 1E      mov b, _s42 ; ", "
0913   08BC FD AB         swp b
0914   08BE D8            push b
0915   08BF 07 FD 14      call print
0916   08C2 51 02 00      add sp, 2
0917   08C5             ; --- END FUNCTION CALL
0918   08C5             ; print_unsigned(cave[loc[	    0   ]][1]+1); print(", "); 
0919   08C5                            
0920   08C5             ; --- START FUNCTION CALL
0921   08C5                            
0922   08C5 3B E0 17      mov d, _cave_data ; $cave
0923   08C8 D7            push a
0924   08C9 DA            push d
0925   08CA                            
0926   08CA 3B D2 17      mov d, _loc_data ; $loc
0927   08CD D7            push a
0928   08CE DA            push d
0929   08CF                            
0930   08CF FD 2E 00 00   mov32 cb, $00000000
0930   08D3 00 00 
0931   08D5 E7            pop d
0932   08D6 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0933   08DA E4            pop a
0934   08DB 2A            mov b, [d]
0935   08DC 38 00 00      mov c, 0
0936   08DF E7            pop d
0937   08E0 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0938   08E4 DA            push d
0939   08E5                            
0940   08E5 FD 2E 01 00   mov32 cb, $00000001
0940   08E9 00 00 
0941   08EB E7            pop d
0942   08EC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0943   08F0 E4            pop a
0944   08F1 2A            mov b, [d]
0945   08F2 38 00 00      mov c, 0
0946   08F5             ; --- START TERMS
0947   08F5 D7            push a
0948   08F6 11            mov a, b
0949   08F7 FD 2E 01 00   mov32 cb, $00000001
0949   08FB 00 00 
0950   08FD 56            add b, a
0951   08FE E4            pop a
0952   08FF             ; --- END TERMS
0953   08FF FD AB         swp b
0954   0901 D8            push b
0955   0902 07 96 15      call print_unsigned
0956   0905 51 02 00      add sp, 2
0957   0908             ; --- END FUNCTION CALL
0958   0908             ; print(", "); 
0959   0908                            
0960   0908             ; --- START FUNCTION CALL
0961   0908                            
0962   0908 26 6C 1E      mov b, _s42 ; ", "
0963   090B FD AB         swp b
0964   090D D8            push b
0965   090E 07 FD 14      call print
0966   0911 51 02 00      add sp, 2
0967   0914             ; --- END FUNCTION CALL
0968   0914             ; print_unsigned(cave[loc[	    0   ]][2]+1); 
0969   0914                            
0970   0914             ; --- START FUNCTION CALL
0971   0914                            
0972   0914 3B E0 17      mov d, _cave_data ; $cave
0973   0917 D7            push a
0974   0918 DA            push d
0975   0919                            
0976   0919 3B D2 17      mov d, _loc_data ; $loc
0977   091C D7            push a
0978   091D DA            push d
0979   091E                            
0980   091E FD 2E 00 00   mov32 cb, $00000000
0980   0922 00 00 
0981   0924 E7            pop d
0982   0925 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0983   0929 E4            pop a
0984   092A 2A            mov b, [d]
0985   092B 38 00 00      mov c, 0
0986   092E E7            pop d
0987   092F FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0988   0933 DA            push d
0989   0934                            
0990   0934 FD 2E 02 00   mov32 cb, $00000002
0990   0938 00 00 
0991   093A E7            pop d
0992   093B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0993   093F E4            pop a
0994   0940 2A            mov b, [d]
0995   0941 38 00 00      mov c, 0
0996   0944             ; --- START TERMS
0997   0944 D7            push a
0998   0945 11            mov a, b
0999   0946 FD 2E 01 00   mov32 cb, $00000001
0999   094A 00 00 
1000   094C 56            add b, a
1001   094D E4            pop a
1002   094E             ; --- END TERMS
1003   094E FD AB         swp b
1004   0950 D8            push b
1005   0951 07 96 15      call print_unsigned
1006   0954 51 02 00      add sp, 2
1007   0957             ; --- END FUNCTION CALL
1008   0957             ; print("\n\n"); 
1009   0957                            
1010   0957             ; --- START FUNCTION CALL
1011   0957                            
1012   0957 26 6F 1E      mov b, _s43 ; "\n\n"
1013   095A FD AB         swp b
1014   095C D8            push b
1015   095D 07 FD 14      call print
1016   0960 51 02 00      add sp, 2
1017   0963             ; --- END FUNCTION CALL
1018   0963 F9            leave
1019   0964 09            ret
1020   0965             
1021   0965             move_or_shoot:
1022   0965 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1023   0968             ; int c = -1; 
1024   0968 52 02 00      sub sp, 2
1025   096B             ; --- START LOCAL VAR INITIALIZATION
1026   096B FA FF FF      lea d, [bp + -1] ; $c
1027   096E DA            push d
1028   096F                            
1029   096F FD 2E FF FF   mov32 cb, $ffffffff
1029   0973 FF FF 
1030   0975 E7            pop d
1031   0976 FD 43         mov [d], b
1032   0978             ; --- END LOCAL VAR INITIALIZATION
1033   0978             ; while ((c != 'S') && (c != 'M')) { 
1034   0978             _while8_cond:
1035   0978                            
1036   0978                            
1037   0978 FA FF FF      lea d, [bp + -1] ; $c
1038   097B 2A            mov b, [d]
1039   097C 38 00 00      mov c, 0
1040   097F             ; --- START RELATIONAL
1041   097F D7            push a
1042   0980 11            mov a, b
1043   0981 FD 2E 53 00   mov32 cb, $00000053
1043   0985 00 00 
1044   0987 B0            cmp a, b
1045   0988 FD 72         sneq ; !=
1046   098A E4            pop a
1047   098B             ; --- END RELATIONAL
1048   098B             ; --- START LOGICAL AND
1049   098B D7            push a
1050   098C 11            mov a, b
1051   098D                            
1052   098D FA FF FF      lea d, [bp + -1] ; $c
1053   0990 2A            mov b, [d]
1054   0991 38 00 00      mov c, 0
1055   0994             ; --- START RELATIONAL
1056   0994 D7            push a
1057   0995 11            mov a, b
1058   0996 FD 2E 4D 00   mov32 cb, $0000004d
1058   099A 00 00 
1059   099C B0            cmp a, b
1060   099D FD 72         sneq ; !=
1061   099F E4            pop a
1062   09A0             ; --- END RELATIONAL
1063   09A0 FD A7         sand a, b
1064   09A2 E4            pop a
1065   09A3             ; --- END LOGICAL AND
1066   09A3 C0 00 00      cmp b, 0
1067   09A6 C6 BF 09      je _while8_exit
1068   09A9             _while8_block:
1069   09A9             ; c = getlet("SHOOT OR MOVE (S-M): "); 
1070   09A9 FA FF FF      lea d, [bp + -1] ; $c
1071   09AC DA            push d
1072   09AD                            
1073   09AD             ; --- START FUNCTION CALL
1074   09AD                            
1075   09AD 26 72 1E      mov b, _s44 ; "SHOOT OR MOVE (S-M): "
1076   09B0 FD AB         swp b
1077   09B2 D8            push b
1078   09B3 07 93 04      call getlet
1079   09B6 51 02 00      add sp, 2
1080   09B9             ; --- END FUNCTION CALL
1081   09B9 E7            pop d
1082   09BA FD 43         mov [d], b
1083   09BC 0A 78 09      jmp _while8_cond
1084   09BF             _while8_exit:
1085   09BF             ; return (c == 'S') ? 1 : 0; 
1086   09BF             _ternary9_cond:
1087   09BF                            
1088   09BF FA FF FF      lea d, [bp + -1] ; $c
1089   09C2 2A            mov b, [d]
1090   09C3 38 00 00      mov c, 0
1091   09C6             ; --- START RELATIONAL
1092   09C6 D7            push a
1093   09C7 11            mov a, b
1094   09C8 FD 2E 53 00   mov32 cb, $00000053
1094   09CC 00 00 
1095   09CE B0            cmp a, b
1096   09CF FD 71         seq ; ==
1097   09D1 E4            pop a
1098   09D2             ; --- END RELATIONAL
1099   09D2 C0 00 00      cmp b, 0
1100   09D5 C6 E1 09      je _ternary9_FALSE
1101   09D8             _ternary9_TRUE:
1102   09D8                             
1103   09D8 FD 2E 01 00   mov32 cb, $00000001
1103   09DC 00 00 
1104   09DE 0A E7 09      jmp _ternary9_exit
1105   09E1             _ternary9_FALSE:
1106   09E1                             
1107   09E1 FD 2E 00 00   mov32 cb, $00000000
1107   09E5 00 00 
1108   09E7             _ternary9_exit:
1109   09E7 F9            leave
1110   09E8 09            ret
1111   09E9             
1112   09E9             move_wumpus:
1113   09E9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1114   09EC             ; int k; 
1115   09EC 52 02 00      sub sp, 2
1116   09EF             ; k = rand2() % 4; 
1117   09EF FA FF FF      lea d, [bp + -1] ; $k
1118   09F2 DA            push d
1119   09F3                             
1120   09F3             ; --- START FUNCTION CALL
1121   09F3 07 6A 11      call rand2
1122   09F6             ; --- START FACTORS
1123   09F6 D7            push a
1124   09F7 FD D8         push g
1125   09F9 11            mov a, b
1126   09FA FD 7A         mov g, c
1127   09FC FD 2E 04 00   mov32 cb, $00000004
1127   0A00 00 00 
1128   0A02 FD D8         push g ; save 'g' as the div instruction uses it
1129   0A04 AE            div a, b ; %, a: quotient, b: remainder
1130   0A05 11            mov a, b
1131   0A06 FD F1         pop g
1132   0A08 FD 38         mov c, g
1133   0A0A 27            mov b, a
1134   0A0B FD F1         pop g
1135   0A0D E4            pop a
1136   0A0E             ; --- END FACTORS
1137   0A0E E7            pop d
1138   0A0F FD 43         mov [d], b
1139   0A11             ; if (k < 3) { 
1140   0A11             _if11_cond:
1141   0A11                             
1142   0A11 FA FF FF      lea d, [bp + -1] ; $k
1143   0A14 2A            mov b, [d]
1144   0A15 38 00 00      mov c, 0
1145   0A18             ; --- START RELATIONAL
1146   0A18 D7            push a
1147   0A19 11            mov a, b
1148   0A1A FD 2E 03 00   mov32 cb, $00000003
1148   0A1E 00 00 
1149   0A20 B0            cmp a, b
1150   0A21 FD 73         slt ; < (signed)
1151   0A23 E4            pop a
1152   0A24             ; --- END RELATIONAL
1153   0A24 C0 00 00      cmp b, 0
1154   0A27 C6 73 0A      je _if11_exit
1155   0A2A             _if11_TRUE:
1156   0A2A             ; loc[	1      ] = cave[loc[	1      ]][k]; 
1157   0A2A 3B D2 17      mov d, _loc_data ; $loc
1158   0A2D D7            push a
1159   0A2E DA            push d
1160   0A2F                             
1161   0A2F FD 2E 01 00   mov32 cb, $00000001
1161   0A33 00 00 
1162   0A35 E7            pop d
1163   0A36 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1164   0A3A E4            pop a
1165   0A3B DA            push d
1166   0A3C                             
1167   0A3C 3B E0 17      mov d, _cave_data ; $cave
1168   0A3F D7            push a
1169   0A40 DA            push d
1170   0A41                             
1171   0A41 3B D2 17      mov d, _loc_data ; $loc
1172   0A44 D7            push a
1173   0A45 DA            push d
1174   0A46                             
1175   0A46 FD 2E 01 00   mov32 cb, $00000001
1175   0A4A 00 00 
1176   0A4C E7            pop d
1177   0A4D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1178   0A51 E4            pop a
1179   0A52 2A            mov b, [d]
1180   0A53 38 00 00      mov c, 0
1181   0A56 E7            pop d
1182   0A57 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
1183   0A5B DA            push d
1184   0A5C                             
1185   0A5C FA FF FF      lea d, [bp + -1] ; $k
1186   0A5F 2A            mov b, [d]
1187   0A60 38 00 00      mov c, 0
1188   0A63 E7            pop d
1189   0A64 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1190   0A68 E4            pop a
1191   0A69 2A            mov b, [d]
1192   0A6A 38 00 00      mov c, 0
1193   0A6D E7            pop d
1194   0A6E FD 43         mov [d], b
1195   0A70 0A 73 0A      jmp _if11_exit
1196   0A73             _if11_exit:
1197   0A73             ; if (loc[	1      ] == loc[	    0   ]) { 
1198   0A73             _if12_cond:
1199   0A73                             
1200   0A73 3B D2 17      mov d, _loc_data ; $loc
1201   0A76 D7            push a
1202   0A77 DA            push d
1203   0A78                             
1204   0A78 FD 2E 01 00   mov32 cb, $00000001
1204   0A7C 00 00 
1205   0A7E E7            pop d
1206   0A7F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1207   0A83 E4            pop a
1208   0A84 2A            mov b, [d]
1209   0A85 38 00 00      mov c, 0
1210   0A88             ; --- START RELATIONAL
1211   0A88 D7            push a
1212   0A89 11            mov a, b
1213   0A8A 3B D2 17      mov d, _loc_data ; $loc
1214   0A8D D7            push a
1215   0A8E DA            push d
1216   0A8F                             
1217   0A8F FD 2E 00 00   mov32 cb, $00000000
1217   0A93 00 00 
1218   0A95 E7            pop d
1219   0A96 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1220   0A9A E4            pop a
1221   0A9B 2A            mov b, [d]
1222   0A9C 38 00 00      mov c, 0
1223   0A9F B0            cmp a, b
1224   0AA0 FD 71         seq ; ==
1225   0AA2 E4            pop a
1226   0AA3             ; --- END RELATIONAL
1227   0AA3 C0 00 00      cmp b, 0
1228   0AA6 C6 C5 0A      je _if12_exit
1229   0AA9             _if12_TRUE:
1230   0AA9             ; print("TSK TSK TSK - WUMPUS GOT YOU!\n"); 
1231   0AA9                             
1232   0AA9             ; --- START FUNCTION CALL
1233   0AA9                             
1234   0AA9 26 88 1E      mov b, _s45 ; "TSK TSK TSK - WUMPUS GOT YOU!\n"
1235   0AAC FD AB         swp b
1236   0AAE D8            push b
1237   0AAF 07 FD 14      call print
1238   0AB2 51 02 00      add sp, 2
1239   0AB5             ; --- END FUNCTION CALL
1240   0AB5             ; finished = 	2    ; 
1241   0AB5 3B DE 17      mov d, _finished ; $finished
1242   0AB8 DA            push d
1243   0AB9                             
1244   0AB9 FD 2E 02 00   mov32 cb, $00000002
1244   0ABD 00 00 
1245   0ABF E7            pop d
1246   0AC0 FD 43         mov [d], b
1247   0AC2 0A C5 0A      jmp _if12_exit
1248   0AC5             _if12_exit:
1249   0AC5 F9            leave
1250   0AC6 09            ret
1251   0AC7             
1252   0AC7             shoot:
1253   0AC7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1254   0ACA             ; int path[5]; 
1255   0ACA 52 0A 00      sub sp, 10
1256   0ACD             ; int scratchloc = -1; 
1257   0ACD 52 02 00      sub sp, 2
1258   0AD0             ; --- START LOCAL VAR INITIALIZATION
1259   0AD0 FA F5 FF      lea d, [bp + -11] ; $scratchloc
1260   0AD3 DA            push d
1261   0AD4                             
1262   0AD4 FD 2E FF FF   mov32 cb, $ffffffff
1262   0AD8 FF FF 
1263   0ADA E7            pop d
1264   0ADB FD 43         mov [d], b
1265   0ADD             ; --- END LOCAL VAR INITIALIZATION
1266   0ADD             ; int len, k; 
1267   0ADD 52 02 00      sub sp, 2
1268   0AE0 52 02 00      sub sp, 2
1269   0AE3             ; finished = 	     0   ; 
1270   0AE3 3B DE 17      mov d, _finished ; $finished
1271   0AE6 DA            push d
1272   0AE7                             
1273   0AE7 FD 2E 00 00   mov32 cb, $00000000
1273   0AEB 00 00 
1274   0AED E7            pop d
1275   0AEE FD 43         mov [d], b
1276   0AF0             ; len = -1; 
1277   0AF0 FA F3 FF      lea d, [bp + -13] ; $len
1278   0AF3 DA            push d
1279   0AF4                             
1280   0AF4 FD 2E FF FF   mov32 cb, $ffffffff
1280   0AF8 FF FF 
1281   0AFA E7            pop d
1282   0AFB FD 43         mov [d], b
1283   0AFD             ; while (len < 1 || len > 5) { 
1284   0AFD             _while13_cond:
1285   0AFD                             
1286   0AFD FA F3 FF      lea d, [bp + -13] ; $len
1287   0B00 2A            mov b, [d]
1288   0B01 38 00 00      mov c, 0
1289   0B04             ; --- START RELATIONAL
1290   0B04 D7            push a
1291   0B05 11            mov a, b
1292   0B06 FD 2E 01 00   mov32 cb, $00000001
1292   0B0A 00 00 
1293   0B0C B0            cmp a, b
1294   0B0D FD 73         slt ; < (signed)
1295   0B0F E4            pop a
1296   0B10             ; --- END RELATIONAL
1297   0B10             ; --- START LOGICAL OR
1298   0B10 D7            push a
1299   0B11 11            mov a, b
1300   0B12 FA F3 FF      lea d, [bp + -13] ; $len
1301   0B15 2A            mov b, [d]
1302   0B16 38 00 00      mov c, 0
1303   0B19             ; --- START RELATIONAL
1304   0B19 D7            push a
1305   0B1A 11            mov a, b
1306   0B1B FD 2E 05 00   mov32 cb, $00000005
1306   0B1F 00 00 
1307   0B21 B0            cmp a, b
1308   0B22 FD 7F         sgt ; >
1309   0B24 E4            pop a
1310   0B25             ; --- END RELATIONAL
1311   0B25 FD A8         sor a, b ; ||
1312   0B27 E4            pop a
1313   0B28             ; --- END LOGICAL OR
1314   0B28 C0 00 00      cmp b, 0
1315   0B2B C6 44 0B      je _while13_exit
1316   0B2E             _while13_block:
1317   0B2E             ; len = getnum("\nNUMBER OF ROOMS (1-5): "); 
1318   0B2E FA F3 FF      lea d, [bp + -13] ; $len
1319   0B31 DA            push d
1320   0B32                             
1321   0B32             ; --- START FUNCTION CALL
1322   0B32                             
1323   0B32 26 A7 1E      mov b, _s46 ; "\nNUMBER OF ROOMS (1-5): "
1324   0B35 FD AB         swp b
1325   0B37 D8            push b
1326   0B38 07 6A 04      call getnum
1327   0B3B 51 02 00      add sp, 2
1328   0B3E             ; --- END FUNCTION CALL
1329   0B3E E7            pop d
1330   0B3F FD 43         mov [d], b
1331   0B41 0A FD 0A      jmp _while13_cond
1332   0B44             _while13_exit:
1333   0B44             ; k = 0; 
1334   0B44 FA F1 FF      lea d, [bp + -15] ; $k
1335   0B47 DA            push d
1336   0B48                             
1337   0B48 FD 2E 00 00   mov32 cb, $00000000
1337   0B4C 00 00 
1338   0B4E E7            pop d
1339   0B4F FD 43         mov [d], b
1340   0B51             ; while (k < len) { 
1341   0B51             _while14_cond:
1342   0B51                             
1343   0B51 FA F1 FF      lea d, [bp + -15] ; $k
1344   0B54 2A            mov b, [d]
1345   0B55 38 00 00      mov c, 0
1346   0B58             ; --- START RELATIONAL
1347   0B58 D7            push a
1348   0B59 11            mov a, b
1349   0B5A FA F3 FF      lea d, [bp + -13] ; $len
1350   0B5D 2A            mov b, [d]
1351   0B5E 38 00 00      mov c, 0
1352   0B61 B0            cmp a, b
1353   0B62 FD 73         slt ; < (signed)
1354   0B64 E4            pop a
1355   0B65             ; --- END RELATIONAL
1356   0B65 C0 00 00      cmp b, 0
1357   0B68 C6 18 0C      je _while14_exit
1358   0B6B             _while14_block:
1359   0B6B             ; path[k] = getnum("ROOM #") - 1; 
1360   0B6B FA F7 FF      lea d, [bp + -9] ; $path
1361   0B6E D7            push a
1362   0B6F DA            push d
1363   0B70                             
1364   0B70 FA F1 FF      lea d, [bp + -15] ; $k
1365   0B73 2A            mov b, [d]
1366   0B74 38 00 00      mov c, 0
1367   0B77 E7            pop d
1368   0B78 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1369   0B7C E4            pop a
1370   0B7D DA            push d
1371   0B7E                             
1372   0B7E             ; --- START FUNCTION CALL
1373   0B7E                             
1374   0B7E 26 C0 1E      mov b, _s47 ; "ROOM #"
1375   0B81 FD AB         swp b
1376   0B83 D8            push b
1377   0B84 07 6A 04      call getnum
1378   0B87 51 02 00      add sp, 2
1379   0B8A             ; --- END FUNCTION CALL
1380   0B8A             ; --- START TERMS
1381   0B8A D7            push a
1382   0B8B 11            mov a, b
1383   0B8C FD 2E 01 00   mov32 cb, $00000001
1383   0B90 00 00 
1384   0B92 60            sub a, b
1385   0B93 27            mov b, a
1386   0B94 E4            pop a
1387   0B95             ; --- END TERMS
1388   0B95 E7            pop d
1389   0B96 FD 43         mov [d], b
1390   0B98             ; if ((k>1) && (path[k] == path[k - 2])) { 
1391   0B98             _if15_cond:
1392   0B98                             
1393   0B98                             
1394   0B98 FA F1 FF      lea d, [bp + -15] ; $k
1395   0B9B 2A            mov b, [d]
1396   0B9C 38 00 00      mov c, 0
1397   0B9F             ; --- START RELATIONAL
1398   0B9F D7            push a
1399   0BA0 11            mov a, b
1400   0BA1 FD 2E 01 00   mov32 cb, $00000001
1400   0BA5 00 00 
1401   0BA7 B0            cmp a, b
1402   0BA8 FD 7F         sgt ; >
1403   0BAA E4            pop a
1404   0BAB             ; --- END RELATIONAL
1405   0BAB             ; --- START LOGICAL AND
1406   0BAB D7            push a
1407   0BAC 11            mov a, b
1408   0BAD                             
1409   0BAD FA F7 FF      lea d, [bp + -9] ; $path
1410   0BB0 D7            push a
1411   0BB1 DA            push d
1412   0BB2                             
1413   0BB2 FA F1 FF      lea d, [bp + -15] ; $k
1414   0BB5 2A            mov b, [d]
1415   0BB6 38 00 00      mov c, 0
1416   0BB9 E7            pop d
1417   0BBA FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1418   0BBE E4            pop a
1419   0BBF 2A            mov b, [d]
1420   0BC0 38 00 00      mov c, 0
1421   0BC3             ; --- START RELATIONAL
1422   0BC3 D7            push a
1423   0BC4 11            mov a, b
1424   0BC5 FA F7 FF      lea d, [bp + -9] ; $path
1425   0BC8 D7            push a
1426   0BC9 DA            push d
1427   0BCA                             
1428   0BCA FA F1 FF      lea d, [bp + -15] ; $k
1429   0BCD 2A            mov b, [d]
1430   0BCE 38 00 00      mov c, 0
1431   0BD1             ; --- START TERMS
1432   0BD1 D7            push a
1433   0BD2 11            mov a, b
1434   0BD3 FD 2E 02 00   mov32 cb, $00000002
1434   0BD7 00 00 
1435   0BD9 60            sub a, b
1436   0BDA 27            mov b, a
1437   0BDB E4            pop a
1438   0BDC             ; --- END TERMS
1439   0BDC E7            pop d
1440   0BDD FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1441   0BE1 E4            pop a
1442   0BE2 2A            mov b, [d]
1443   0BE3 38 00 00      mov c, 0
1444   0BE6 B0            cmp a, b
1445   0BE7 FD 71         seq ; ==
1446   0BE9 E4            pop a
1447   0BEA             ; --- END RELATIONAL
1448   0BEA FD A7         sand a, b
1449   0BEC E4            pop a
1450   0BED             ; --- END LOGICAL AND
1451   0BED C0 00 00      cmp b, 0
1452   0BF0 C6 05 0C      je _if15_exit
1453   0BF3             _if15_TRUE:
1454   0BF3             ; print("ARROWS AREN'T THAT CROOKED - TRY ANOTHER ROOM\n"); 
1455   0BF3                             
1456   0BF3             ; --- START FUNCTION CALL
1457   0BF3                             
1458   0BF3 26 C7 1E      mov b, _s48 ; "ARROWS AREN'T THAT CROOKED - TRY ANOTHER ROOM\n"
1459   0BF6 FD AB         swp b
1460   0BF8 D8            push b
1461   0BF9 07 FD 14      call print
1462   0BFC 51 02 00      add sp, 2
1463   0BFF             ; --- END FUNCTION CALL
1464   0BFF             ; continue;  
1465   0BFF 0A 51 0B      jmp _while14_cond ; while continue
1466   0C02 0A 05 0C      jmp _if15_exit
1467   0C05             _if15_exit:
1468   0C05             ; k++; 
1469   0C05                             
1470   0C05 FA F1 FF      lea d, [bp + -15] ; $k
1471   0C08 2A            mov b, [d]
1472   0C09 38 00 00      mov c, 0
1473   0C0C 11            mov a, b
1474   0C0D FD 77         inc b
1475   0C0F FA F1 FF      lea d, [bp + -15] ; $k
1476   0C12 FD 43         mov [d], b
1477   0C14 27            mov b, a
1478   0C15 0A 51 0B      jmp _while14_cond
1479   0C18             _while14_exit:
1480   0C18             ; scratchloc = loc[	    0   ]; 
1481   0C18 FA F5 FF      lea d, [bp + -11] ; $scratchloc
1482   0C1B DA            push d
1483   0C1C                             
1484   0C1C 3B D2 17      mov d, _loc_data ; $loc
1485   0C1F D7            push a
1486   0C20 DA            push d
1487   0C21                             
1488   0C21 FD 2E 00 00   mov32 cb, $00000000
1488   0C25 00 00 
1489   0C27 E7            pop d
1490   0C28 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1491   0C2C E4            pop a
1492   0C2D 2A            mov b, [d]
1493   0C2E 38 00 00      mov c, 0
1494   0C31 E7            pop d
1495   0C32 FD 43         mov [d], b
1496   0C34             ; for (k = 0; k < len; k++) { 
1497   0C34             _for16_init:
1498   0C34 FA F1 FF      lea d, [bp + -15] ; $k
1499   0C37 DA            push d
1500   0C38                             
1501   0C38 FD 2E 00 00   mov32 cb, $00000000
1501   0C3C 00 00 
1502   0C3E E7            pop d
1503   0C3F FD 43         mov [d], b
1504   0C41             _for16_cond:
1505   0C41                             
1506   0C41 FA F1 FF      lea d, [bp + -15] ; $k
1507   0C44 2A            mov b, [d]
1508   0C45 38 00 00      mov c, 0
1509   0C48             ; --- START RELATIONAL
1510   0C48 D7            push a
1511   0C49 11            mov a, b
1512   0C4A FA F3 FF      lea d, [bp + -13] ; $len
1513   0C4D 2A            mov b, [d]
1514   0C4E 38 00 00      mov c, 0
1515   0C51 B0            cmp a, b
1516   0C52 FD 73         slt ; < (signed)
1517   0C54 E4            pop a
1518   0C55             ; --- END RELATIONAL
1519   0C55 C0 00 00      cmp b, 0
1520   0C58 C6 3A 0E      je _for16_exit
1521   0C5B             _for16_block:
1522   0C5B             ; if ((cave[scratchloc][0] == path[k]) || 
1523   0C5B             _if17_cond:
1524   0C5B                             
1525   0C5B                             
1526   0C5B 3B E0 17      mov d, _cave_data ; $cave
1527   0C5E D7            push a
1528   0C5F DA            push d
1529   0C60                             
1530   0C60 FA F5 FF      lea d, [bp + -11] ; $scratchloc
1531   0C63 2A            mov b, [d]
1532   0C64 38 00 00      mov c, 0
1533   0C67 E7            pop d
1534   0C68 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
1535   0C6C DA            push d
1536   0C6D                             
1537   0C6D FD 2E 00 00   mov32 cb, $00000000
1537   0C71 00 00 
1538   0C73 E7            pop d
1539   0C74 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1540   0C78 E4            pop a
1541   0C79 2A            mov b, [d]
1542   0C7A 38 00 00      mov c, 0
1543   0C7D             ; --- START RELATIONAL
1544   0C7D D7            push a
1545   0C7E 11            mov a, b
1546   0C7F FA F7 FF      lea d, [bp + -9] ; $path
1547   0C82 D7            push a
1548   0C83 DA            push d
1549   0C84                             
1550   0C84 FA F1 FF      lea d, [bp + -15] ; $k
1551   0C87 2A            mov b, [d]
1552   0C88 38 00 00      mov c, 0
1553   0C8B E7            pop d
1554   0C8C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1555   0C90 E4            pop a
1556   0C91 2A            mov b, [d]
1557   0C92 38 00 00      mov c, 0
1558   0C95 B0            cmp a, b
1559   0C96 FD 71         seq ; ==
1560   0C98 E4            pop a
1561   0C99             ; --- END RELATIONAL
1562   0C99             ; --- START LOGICAL OR
1563   0C99 D7            push a
1564   0C9A 11            mov a, b
1565   0C9B                             
1566   0C9B 3B E0 17      mov d, _cave_data ; $cave
1567   0C9E D7            push a
1568   0C9F DA            push d
1569   0CA0                             
1570   0CA0 FA F5 FF      lea d, [bp + -11] ; $scratchloc
1571   0CA3 2A            mov b, [d]
1572   0CA4 38 00 00      mov c, 0
1573   0CA7 E7            pop d
1574   0CA8 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
1575   0CAC DA            push d
1576   0CAD                             
1577   0CAD FD 2E 01 00   mov32 cb, $00000001
1577   0CB1 00 00 
1578   0CB3 E7            pop d
1579   0CB4 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1580   0CB8 E4            pop a
1581   0CB9 2A            mov b, [d]
1582   0CBA 38 00 00      mov c, 0
1583   0CBD             ; --- START RELATIONAL
1584   0CBD D7            push a
1585   0CBE 11            mov a, b
1586   0CBF FA F7 FF      lea d, [bp + -9] ; $path
1587   0CC2 D7            push a
1588   0CC3 DA            push d
1589   0CC4                             
1590   0CC4 FA F1 FF      lea d, [bp + -15] ; $k
1591   0CC7 2A            mov b, [d]
1592   0CC8 38 00 00      mov c, 0
1593   0CCB E7            pop d
1594   0CCC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1595   0CD0 E4            pop a
1596   0CD1 2A            mov b, [d]
1597   0CD2 38 00 00      mov c, 0
1598   0CD5 B0            cmp a, b
1599   0CD6 FD 71         seq ; ==
1600   0CD8 E4            pop a
1601   0CD9             ; --- END RELATIONAL
1602   0CD9 FD A8         sor a, b ; ||
1603   0CDB 11            mov a, b
1604   0CDC                             
1605   0CDC 3B E0 17      mov d, _cave_data ; $cave
1606   0CDF D7            push a
1607   0CE0 DA            push d
1608   0CE1                             
1609   0CE1 FA F5 FF      lea d, [bp + -11] ; $scratchloc
1610   0CE4 2A            mov b, [d]
1611   0CE5 38 00 00      mov c, 0
1612   0CE8 E7            pop d
1613   0CE9 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
1614   0CED DA            push d
1615   0CEE                             
1616   0CEE FD 2E 02 00   mov32 cb, $00000002
1616   0CF2 00 00 
1617   0CF4 E7            pop d
1618   0CF5 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1619   0CF9 E4            pop a
1620   0CFA 2A            mov b, [d]
1621   0CFB 38 00 00      mov c, 0
1622   0CFE             ; --- START RELATIONAL
1623   0CFE D7            push a
1624   0CFF 11            mov a, b
1625   0D00 FA F7 FF      lea d, [bp + -9] ; $path
1626   0D03 D7            push a
1627   0D04 DA            push d
1628   0D05                             
1629   0D05 FA F1 FF      lea d, [bp + -15] ; $k
1630   0D08 2A            mov b, [d]
1631   0D09 38 00 00      mov c, 0
1632   0D0C E7            pop d
1633   0D0D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1634   0D11 E4            pop a
1635   0D12 2A            mov b, [d]
1636   0D13 38 00 00      mov c, 0
1637   0D16 B0            cmp a, b
1638   0D17 FD 71         seq ; ==
1639   0D19 E4            pop a
1640   0D1A             ; --- END RELATIONAL
1641   0D1A FD A8         sor a, b ; ||
1642   0D1C E4            pop a
1643   0D1D             ; --- END LOGICAL OR
1644   0D1D C0 00 00      cmp b, 0
1645   0D20 C6 43 0D      je _if17_else
1646   0D23             _if17_TRUE:
1647   0D23             ; scratchloc = path[k]; 
1648   0D23 FA F5 FF      lea d, [bp + -11] ; $scratchloc
1649   0D26 DA            push d
1650   0D27                             
1651   0D27 FA F7 FF      lea d, [bp + -9] ; $path
1652   0D2A D7            push a
1653   0D2B DA            push d
1654   0D2C                             
1655   0D2C FA F1 FF      lea d, [bp + -15] ; $k
1656   0D2F 2A            mov b, [d]
1657   0D30 38 00 00      mov c, 0
1658   0D33 E7            pop d
1659   0D34 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1660   0D38 E4            pop a
1661   0D39 2A            mov b, [d]
1662   0D3A 38 00 00      mov c, 0
1663   0D3D E7            pop d
1664   0D3E FD 43         mov [d], b
1665   0D40 0A 81 0D      jmp _if17_exit
1666   0D43             _if17_else:
1667   0D43             ; scratchloc = cave[scratchloc][rand2()%3]; 
1668   0D43 FA F5 FF      lea d, [bp + -11] ; $scratchloc
1669   0D46 DA            push d
1670   0D47                             
1671   0D47 3B E0 17      mov d, _cave_data ; $cave
1672   0D4A D7            push a
1673   0D4B DA            push d
1674   0D4C                             
1675   0D4C FA F5 FF      lea d, [bp + -11] ; $scratchloc
1676   0D4F 2A            mov b, [d]
1677   0D50 38 00 00      mov c, 0
1678   0D53 E7            pop d
1679   0D54 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
1680   0D58 DA            push d
1681   0D59                             
1682   0D59             ; --- START FUNCTION CALL
1683   0D59 07 6A 11      call rand2
1684   0D5C             ; --- START FACTORS
1685   0D5C D7            push a
1686   0D5D FD D8         push g
1687   0D5F 11            mov a, b
1688   0D60 FD 7A         mov g, c
1689   0D62 FD 2E 03 00   mov32 cb, $00000003
1689   0D66 00 00 
1690   0D68 FD D8         push g ; save 'g' as the div instruction uses it
1691   0D6A AE            div a, b ; %, a: quotient, b: remainder
1692   0D6B 11            mov a, b
1693   0D6C FD F1         pop g
1694   0D6E FD 38         mov c, g
1695   0D70 27            mov b, a
1696   0D71 FD F1         pop g
1697   0D73 E4            pop a
1698   0D74             ; --- END FACTORS
1699   0D74 E7            pop d
1700   0D75 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1701   0D79 E4            pop a
1702   0D7A 2A            mov b, [d]
1703   0D7B 38 00 00      mov c, 0
1704   0D7E E7            pop d
1705   0D7F FD 43         mov [d], b
1706   0D81             _if17_exit:
1707   0D81             ; if (scratchloc == loc[	1      ]) { 
1708   0D81             _if19_cond:
1709   0D81                             
1710   0D81 FA F5 FF      lea d, [bp + -11] ; $scratchloc
1711   0D84 2A            mov b, [d]
1712   0D85 38 00 00      mov c, 0
1713   0D88             ; --- START RELATIONAL
1714   0D88 D7            push a
1715   0D89 11            mov a, b
1716   0D8A 3B D2 17      mov d, _loc_data ; $loc
1717   0D8D D7            push a
1718   0D8E DA            push d
1719   0D8F                             
1720   0D8F FD 2E 01 00   mov32 cb, $00000001
1720   0D93 00 00 
1721   0D95 E7            pop d
1722   0D96 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1723   0D9A E4            pop a
1724   0D9B 2A            mov b, [d]
1725   0D9C 38 00 00      mov c, 0
1726   0D9F B0            cmp a, b
1727   0DA0 FD 71         seq ; ==
1728   0DA2 E4            pop a
1729   0DA3             ; --- END RELATIONAL
1730   0DA3 C0 00 00      cmp b, 0
1731   0DA6 C6 C5 0D      je _if19_else
1732   0DA9             _if19_TRUE:
1733   0DA9             ; print("AHA! YOU GOT THE WUMPUS!\n"); 
1734   0DA9                             
1735   0DA9             ; --- START FUNCTION CALL
1736   0DA9                             
1737   0DA9 26 F5 1E      mov b, _s49 ; "AHA! YOU GOT THE WUMPUS!\n"
1738   0DAC FD AB         swp b
1739   0DAE D8            push b
1740   0DAF 07 FD 14      call print
1741   0DB2 51 02 00      add sp, 2
1742   0DB5             ; --- END FUNCTION CALL
1743   0DB5             ; finished = 	     1   ; 
1744   0DB5 3B DE 17      mov d, _finished ; $finished
1745   0DB8 DA            push d
1746   0DB9                             
1747   0DB9 FD 2E 01 00   mov32 cb, $00000001
1747   0DBD 00 00 
1748   0DBF E7            pop d
1749   0DC0 FD 43         mov [d], b
1750   0DC2 0A 09 0E      jmp _if19_exit
1751   0DC5             _if19_else:
1752   0DC5             ; if (scratchloc == loc[	    0   ]) { 
1753   0DC5             _if20_cond:
1754   0DC5                             
1755   0DC5 FA F5 FF      lea d, [bp + -11] ; $scratchloc
1756   0DC8 2A            mov b, [d]
1757   0DC9 38 00 00      mov c, 0
1758   0DCC             ; --- START RELATIONAL
1759   0DCC D7            push a
1760   0DCD 11            mov a, b
1761   0DCE 3B D2 17      mov d, _loc_data ; $loc
1762   0DD1 D7            push a
1763   0DD2 DA            push d
1764   0DD3                             
1765   0DD3 FD 2E 00 00   mov32 cb, $00000000
1765   0DD7 00 00 
1766   0DD9 E7            pop d
1767   0DDA FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1768   0DDE E4            pop a
1769   0DDF 2A            mov b, [d]
1770   0DE0 38 00 00      mov c, 0
1771   0DE3 B0            cmp a, b
1772   0DE4 FD 71         seq ; ==
1773   0DE6 E4            pop a
1774   0DE7             ; --- END RELATIONAL
1775   0DE7 C0 00 00      cmp b, 0
1776   0DEA C6 09 0E      je _if20_exit
1777   0DED             _if20_TRUE:
1778   0DED             ; print("OUCH! ARROW GOT YOU!\n"); 
1779   0DED                             
1780   0DED             ; --- START FUNCTION CALL
1781   0DED                             
1782   0DED 26 0F 1F      mov b, _s50 ; "OUCH! ARROW GOT YOU!\n"
1783   0DF0 FD AB         swp b
1784   0DF2 D8            push b
1785   0DF3 07 FD 14      call print
1786   0DF6 51 02 00      add sp, 2
1787   0DF9             ; --- END FUNCTION CALL
1788   0DF9             ; finished = 	2    ; 
1789   0DF9 3B DE 17      mov d, _finished ; $finished
1790   0DFC DA            push d
1791   0DFD                             
1792   0DFD FD 2E 02 00   mov32 cb, $00000002
1792   0E01 00 00 
1793   0E03 E7            pop d
1794   0E04 FD 43         mov [d], b
1795   0E06 0A 09 0E      jmp _if20_exit
1796   0E09             _if20_exit:
1797   0E09             _if19_exit:
1798   0E09             ; if (finished != 	     0   ) { 
1799   0E09             _if21_cond:
1800   0E09                             
1801   0E09 3B DE 17      mov d, _finished ; $finished
1802   0E0C 2A            mov b, [d]
1803   0E0D 38 00 00      mov c, 0
1804   0E10             ; --- START RELATIONAL
1805   0E10 D7            push a
1806   0E11 11            mov a, b
1807   0E12 FD 2E 00 00   mov32 cb, $00000000
1807   0E16 00 00 
1808   0E18 B0            cmp a, b
1809   0E19 FD 72         sneq ; !=
1810   0E1B E4            pop a
1811   0E1C             ; --- END RELATIONAL
1812   0E1C C0 00 00      cmp b, 0
1813   0E1F C6 27 0E      je _if21_exit
1814   0E22             _if21_TRUE:
1815   0E22             ; return; 
1816   0E22 F9            leave
1817   0E23 09            ret
1818   0E24 0A 27 0E      jmp _if21_exit
1819   0E27             _if21_exit:
1820   0E27             _for16_update:
1821   0E27                             
1822   0E27 FA F1 FF      lea d, [bp + -15] ; $k
1823   0E2A 2A            mov b, [d]
1824   0E2B 38 00 00      mov c, 0
1825   0E2E 11            mov a, b
1826   0E2F FD 77         inc b
1827   0E31 FA F1 FF      lea d, [bp + -15] ; $k
1828   0E34 FD 43         mov [d], b
1829   0E36 27            mov b, a
1830   0E37 0A 41 0C      jmp _for16_cond
1831   0E3A             _for16_exit:
1832   0E3A             ; print("MISSED\n"); 
1833   0E3A                             
1834   0E3A             ; --- START FUNCTION CALL
1835   0E3A                             
1836   0E3A 26 25 1F      mov b, _s51 ; "MISSED\n"
1837   0E3D FD AB         swp b
1838   0E3F D8            push b
1839   0E40 07 FD 14      call print
1840   0E43 51 02 00      add sp, 2
1841   0E46             ; --- END FUNCTION CALL
1842   0E46             ; move_wumpus(); 
1843   0E46                             
1844   0E46             ; --- START FUNCTION CALL
1845   0E46 07 E9 09      call move_wumpus
1846   0E49             ; if (--arrows <= 0) { 
1847   0E49             _if22_cond:
1848   0E49                             
1849   0E49 3B CA 17      mov d, _arrows ; $arrows
1850   0E4C 2A            mov b, [d]
1851   0E4D FD 7D         dec b
1852   0E4F 3B CA 17      mov d, _arrows ; $arrows
1853   0E52 FD 43         mov [d], b
1854   0E54             ; --- START RELATIONAL
1855   0E54 D7            push a
1856   0E55 11            mov a, b
1857   0E56 FD 2E 00 00   mov32 cb, $00000000
1857   0E5A 00 00 
1858   0E5C B0            cmp a, b
1859   0E5D FD 74         sle ; <= (signed)
1860   0E5F E4            pop a
1861   0E60             ; --- END RELATIONAL
1862   0E60 C0 00 00      cmp b, 0
1863   0E63 C6 76 0E      je _if22_exit
1864   0E66             _if22_TRUE:
1865   0E66             ; finished = 	2    ; 
1866   0E66 3B DE 17      mov d, _finished ; $finished
1867   0E69 DA            push d
1868   0E6A                             
1869   0E6A FD 2E 02 00   mov32 cb, $00000002
1869   0E6E 00 00 
1870   0E70 E7            pop d
1871   0E71 FD 43         mov [d], b
1872   0E73 0A 76 0E      jmp _if22_exit
1873   0E76             _if22_exit:
1874   0E76 F9            leave
1875   0E77 09            ret
1876   0E78             
1877   0E78             move:
1878   0E78 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1879   0E7B             ; int scratchloc; 
1880   0E7B 52 02 00      sub sp, 2
1881   0E7E             ; scratchloc = -1; 
1882   0E7E FA FF FF      lea d, [bp + -1] ; $scratchloc
1883   0E81 DA            push d
1884   0E82                             
1885   0E82 FD 2E FF FF   mov32 cb, $ffffffff
1885   0E86 FF FF 
1886   0E88 E7            pop d
1887   0E89 FD 43         mov [d], b
1888   0E8B             ; while (scratchloc == -1) { 
1889   0E8B             _while23_cond:
1890   0E8B                             
1891   0E8B FA FF FF      lea d, [bp + -1] ; $scratchloc
1892   0E8E 2A            mov b, [d]
1893   0E8F 38 00 00      mov c, 0
1894   0E92             ; --- START RELATIONAL
1895   0E92 D7            push a
1896   0E93 11            mov a, b
1897   0E94 FD 2E FF FF   mov32 cb, $ffffffff
1897   0E98 FF FF 
1898   0E9A B0            cmp a, b
1899   0E9B FD 71         seq ; ==
1900   0E9D E4            pop a
1901   0E9E             ; --- END RELATIONAL
1902   0E9E C0 00 00      cmp b, 0
1903   0EA1 C6 12 10      je _while23_exit
1904   0EA4             _while23_block:
1905   0EA4             ; scratchloc = getnum("\nWHERE TO: ")- 1; 
1906   0EA4 FA FF FF      lea d, [bp + -1] ; $scratchloc
1907   0EA7 DA            push d
1908   0EA8                             
1909   0EA8             ; --- START FUNCTION CALL
1910   0EA8                             
1911   0EA8 26 2D 1F      mov b, _s52 ; "\nWHERE TO: "
1912   0EAB FD AB         swp b
1913   0EAD D8            push b
1914   0EAE 07 6A 04      call getnum
1915   0EB1 51 02 00      add sp, 2
1916   0EB4             ; --- END FUNCTION CALL
1917   0EB4             ; --- START TERMS
1918   0EB4 D7            push a
1919   0EB5 11            mov a, b
1920   0EB6 FD 2E 01 00   mov32 cb, $00000001
1920   0EBA 00 00 
1921   0EBC 60            sub a, b
1922   0EBD 27            mov b, a
1923   0EBE E4            pop a
1924   0EBF             ; --- END TERMS
1925   0EBF E7            pop d
1926   0EC0 FD 43         mov [d], b
1927   0EC2             ; if (scratchloc < 0 || scratchloc > 19) { 
1928   0EC2             _if24_cond:
1929   0EC2                             
1930   0EC2 FA FF FF      lea d, [bp + -1] ; $scratchloc
1931   0EC5 2A            mov b, [d]
1932   0EC6 38 00 00      mov c, 0
1933   0EC9             ; --- START RELATIONAL
1934   0EC9 D7            push a
1935   0ECA 11            mov a, b
1936   0ECB FD 2E 00 00   mov32 cb, $00000000
1936   0ECF 00 00 
1937   0ED1 B0            cmp a, b
1938   0ED2 FD 73         slt ; < (signed)
1939   0ED4 E4            pop a
1940   0ED5             ; --- END RELATIONAL
1941   0ED5             ; --- START LOGICAL OR
1942   0ED5 D7            push a
1943   0ED6 11            mov a, b
1944   0ED7 FA FF FF      lea d, [bp + -1] ; $scratchloc
1945   0EDA 2A            mov b, [d]
1946   0EDB 38 00 00      mov c, 0
1947   0EDE             ; --- START RELATIONAL
1948   0EDE D7            push a
1949   0EDF 11            mov a, b
1950   0EE0 FD 2E 13 00   mov32 cb, $00000013
1950   0EE4 00 00 
1951   0EE6 B0            cmp a, b
1952   0EE7 FD 7F         sgt ; >
1953   0EE9 E4            pop a
1954   0EEA             ; --- END RELATIONAL
1955   0EEA FD A8         sor a, b ; ||
1956   0EEC E4            pop a
1957   0EED             ; --- END LOGICAL OR
1958   0EED C0 00 00      cmp b, 0
1959   0EF0 C6 06 0F      je _if24_exit
1960   0EF3             _if24_TRUE:
1961   0EF3             ; scratchloc = -1; 
1962   0EF3 FA FF FF      lea d, [bp + -1] ; $scratchloc
1963   0EF6 DA            push d
1964   0EF7                             
1965   0EF7 FD 2E FF FF   mov32 cb, $ffffffff
1965   0EFB FF FF 
1966   0EFD E7            pop d
1967   0EFE FD 43         mov [d], b
1968   0F00             ; continue; 
1969   0F00 0A 8B 0E      jmp _while23_cond ; while continue
1970   0F03 0A 06 0F      jmp _if24_exit
1971   0F06             _if24_exit:
1972   0F06             ; if ((cave[loc[	    0   ]][0] != scratchloc) & 
1973   0F06             _if25_cond:
1974   0F06                             
1975   0F06                             
1976   0F06 3B E0 17      mov d, _cave_data ; $cave
1977   0F09 D7            push a
1978   0F0A DA            push d
1979   0F0B                             
1980   0F0B 3B D2 17      mov d, _loc_data ; $loc
1981   0F0E D7            push a
1982   0F0F DA            push d
1983   0F10                             
1984   0F10 FD 2E 00 00   mov32 cb, $00000000
1984   0F14 00 00 
1985   0F16 E7            pop d
1986   0F17 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1987   0F1B E4            pop a
1988   0F1C 2A            mov b, [d]
1989   0F1D 38 00 00      mov c, 0
1990   0F20 E7            pop d
1991   0F21 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
1992   0F25 DA            push d
1993   0F26                             
1994   0F26 FD 2E 00 00   mov32 cb, $00000000
1994   0F2A 00 00 
1995   0F2C E7            pop d
1996   0F2D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1997   0F31 E4            pop a
1998   0F32 2A            mov b, [d]
1999   0F33 38 00 00      mov c, 0
2000   0F36             ; --- START RELATIONAL
2001   0F36 D7            push a
2002   0F37 11            mov a, b
2003   0F38 FA FF FF      lea d, [bp + -1] ; $scratchloc
2004   0F3B 2A            mov b, [d]
2005   0F3C 38 00 00      mov c, 0
2006   0F3F B0            cmp a, b
2007   0F40 FD 72         sneq ; !=
2008   0F42 E4            pop a
2009   0F43             ; --- END RELATIONAL
2010   0F43 D7            push a
2011   0F44 11            mov a, b
2012   0F45                             
2013   0F45 3B E0 17      mov d, _cave_data ; $cave
2014   0F48 D7            push a
2015   0F49 DA            push d
2016   0F4A                             
2017   0F4A 3B D2 17      mov d, _loc_data ; $loc
2018   0F4D D7            push a
2019   0F4E DA            push d
2020   0F4F                             
2021   0F4F FD 2E 00 00   mov32 cb, $00000000
2021   0F53 00 00 
2022   0F55 E7            pop d
2023   0F56 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2024   0F5A E4            pop a
2025   0F5B 2A            mov b, [d]
2026   0F5C 38 00 00      mov c, 0
2027   0F5F E7            pop d
2028   0F60 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
2029   0F64 DA            push d
2030   0F65                             
2031   0F65 FD 2E 01 00   mov32 cb, $00000001
2031   0F69 00 00 
2032   0F6B E7            pop d
2033   0F6C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2034   0F70 E4            pop a
2035   0F71 2A            mov b, [d]
2036   0F72 38 00 00      mov c, 0
2037   0F75             ; --- START RELATIONAL
2038   0F75 D7            push a
2039   0F76 11            mov a, b
2040   0F77 FA FF FF      lea d, [bp + -1] ; $scratchloc
2041   0F7A 2A            mov b, [d]
2042   0F7B 38 00 00      mov c, 0
2043   0F7E B0            cmp a, b
2044   0F7F FD 72         sneq ; !=
2045   0F81 E4            pop a
2046   0F82             ; --- END RELATIONAL
2047   0F82 FD 92         and b, a ; &
2048   0F84 11            mov a, b
2049   0F85                             
2050   0F85 3B E0 17      mov d, _cave_data ; $cave
2051   0F88 D7            push a
2052   0F89 DA            push d
2053   0F8A                             
2054   0F8A 3B D2 17      mov d, _loc_data ; $loc
2055   0F8D D7            push a
2056   0F8E DA            push d
2057   0F8F                             
2058   0F8F FD 2E 00 00   mov32 cb, $00000000
2058   0F93 00 00 
2059   0F95 E7            pop d
2060   0F96 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2061   0F9A E4            pop a
2062   0F9B 2A            mov b, [d]
2063   0F9C 38 00 00      mov c, 0
2064   0F9F E7            pop d
2065   0FA0 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
2066   0FA4 DA            push d
2067   0FA5                             
2068   0FA5 FD 2E 02 00   mov32 cb, $00000002
2068   0FA9 00 00 
2069   0FAB E7            pop d
2070   0FAC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2071   0FB0 E4            pop a
2072   0FB1 2A            mov b, [d]
2073   0FB2 38 00 00      mov c, 0
2074   0FB5             ; --- START RELATIONAL
2075   0FB5 D7            push a
2076   0FB6 11            mov a, b
2077   0FB7 FA FF FF      lea d, [bp + -1] ; $scratchloc
2078   0FBA 2A            mov b, [d]
2079   0FBB 38 00 00      mov c, 0
2080   0FBE B0            cmp a, b
2081   0FBF FD 72         sneq ; !=
2082   0FC1 E4            pop a
2083   0FC2             ; --- END RELATIONAL
2084   0FC2 FD 92         and b, a ; &
2085   0FC4 11            mov a, b
2086   0FC5                             
2087   0FC5 3B D2 17      mov d, _loc_data ; $loc
2088   0FC8 D7            push a
2089   0FC9 DA            push d
2090   0FCA                             
2091   0FCA FD 2E 00 00   mov32 cb, $00000000
2091   0FCE 00 00 
2092   0FD0 E7            pop d
2093   0FD1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2094   0FD5 E4            pop a
2095   0FD6 2A            mov b, [d]
2096   0FD7 38 00 00      mov c, 0
2097   0FDA             ; --- START RELATIONAL
2098   0FDA D7            push a
2099   0FDB 11            mov a, b
2100   0FDC FA FF FF      lea d, [bp + -1] ; $scratchloc
2101   0FDF 2A            mov b, [d]
2102   0FE0 38 00 00      mov c, 0
2103   0FE3 B0            cmp a, b
2104   0FE4 FD 72         sneq ; !=
2105   0FE6 E4            pop a
2106   0FE7             ; --- END RELATIONAL
2107   0FE7 FD 92         and b, a ; &
2108   0FE9 E4            pop a
2109   0FEA C0 00 00      cmp b, 0
2110   0FED C6 0F 10      je _if25_exit
2111   0FF0             _if25_TRUE:
2112   0FF0             ; print("NOT POSSIBLE\n"); 
2113   0FF0                             
2114   0FF0             ; --- START FUNCTION CALL
2115   0FF0                             
2116   0FF0 26 39 1F      mov b, _s53 ; "NOT POSSIBLE\n"
2117   0FF3 FD AB         swp b
2118   0FF5 D8            push b
2119   0FF6 07 FD 14      call print
2120   0FF9 51 02 00      add sp, 2
2121   0FFC             ; --- END FUNCTION CALL
2122   0FFC             ; scratchloc = -1; 
2123   0FFC FA FF FF      lea d, [bp + -1] ; $scratchloc
2124   0FFF DA            push d
2125   1000                             
2126   1000 FD 2E FF FF   mov32 cb, $ffffffff
2126   1004 FF FF 
2127   1006 E7            pop d
2128   1007 FD 43         mov [d], b
2129   1009             ; continue; 
2130   1009 0A 8B 0E      jmp _while23_cond ; while continue
2131   100C 0A 0F 10      jmp _if25_exit
2132   100F             _if25_exit:
2133   100F 0A 8B 0E      jmp _while23_cond
2134   1012             _while23_exit:
2135   1012             ; loc[	    0   ] = scratchloc; 
2136   1012 3B D2 17      mov d, _loc_data ; $loc
2137   1015 D7            push a
2138   1016 DA            push d
2139   1017                             
2140   1017 FD 2E 00 00   mov32 cb, $00000000
2140   101B 00 00 
2141   101D E7            pop d
2142   101E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2143   1022 E4            pop a
2144   1023 DA            push d
2145   1024                             
2146   1024 FA FF FF      lea d, [bp + -1] ; $scratchloc
2147   1027 2A            mov b, [d]
2148   1028 38 00 00      mov c, 0
2149   102B E7            pop d
2150   102C FD 43         mov [d], b
2151   102E             ; while ((scratchloc == loc[	4     ]) || (scratchloc == loc[	5     ])) { 
2152   102E             _while26_cond:
2153   102E                             
2154   102E                             
2155   102E FA FF FF      lea d, [bp + -1] ; $scratchloc
2156   1031 2A            mov b, [d]
2157   1032 38 00 00      mov c, 0
2158   1035             ; --- START RELATIONAL
2159   1035 D7            push a
2160   1036 11            mov a, b
2161   1037 3B D2 17      mov d, _loc_data ; $loc
2162   103A D7            push a
2163   103B DA            push d
2164   103C                             
2165   103C FD 2E 04 00   mov32 cb, $00000004
2165   1040 00 00 
2166   1042 E7            pop d
2167   1043 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2168   1047 E4            pop a
2169   1048 2A            mov b, [d]
2170   1049 38 00 00      mov c, 0
2171   104C B0            cmp a, b
2172   104D FD 71         seq ; ==
2173   104F E4            pop a
2174   1050             ; --- END RELATIONAL
2175   1050             ; --- START LOGICAL OR
2176   1050 D7            push a
2177   1051 11            mov a, b
2178   1052                             
2179   1052 FA FF FF      lea d, [bp + -1] ; $scratchloc
2180   1055 2A            mov b, [d]
2181   1056 38 00 00      mov c, 0
2182   1059             ; --- START RELATIONAL
2183   1059 D7            push a
2184   105A 11            mov a, b
2185   105B 3B D2 17      mov d, _loc_data ; $loc
2186   105E D7            push a
2187   105F DA            push d
2188   1060                             
2189   1060 FD 2E 05 00   mov32 cb, $00000005
2189   1064 00 00 
2190   1066 E7            pop d
2191   1067 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2192   106B E4            pop a
2193   106C 2A            mov b, [d]
2194   106D 38 00 00      mov c, 0
2195   1070 B0            cmp a, b
2196   1071 FD 71         seq ; ==
2197   1073 E4            pop a
2198   1074             ; --- END RELATIONAL
2199   1074 FD A8         sor a, b ; ||
2200   1076 E4            pop a
2201   1077             ; --- END LOGICAL OR
2202   1077 C0 00 00      cmp b, 0
2203   107A C6 C3 10      je _while26_exit
2204   107D             _while26_block:
2205   107D             ; print("ZAP--SUPER BAT SNATCH! ELSEWHEREVILLE FOR YOU!\n"); 
2206   107D                             
2207   107D             ; --- START FUNCTION CALL
2208   107D                             
2209   107D 26 47 1F      mov b, _s54 ; "ZAP--SUPER BAT SNATCH! ELSEWHEREVILLE FOR YOU!\n"
2210   1080 FD AB         swp b
2211   1082 D8            push b
2212   1083 07 FD 14      call print
2213   1086 51 02 00      add sp, 2
2214   1089             ; --- END FUNCTION CALL
2215   1089             ; scratchloc = loc[	    0   ] = rand2()%20; 
2216   1089 FA FF FF      lea d, [bp + -1] ; $scratchloc
2217   108C DA            push d
2218   108D 3B D2 17      mov d, _loc_data ; $loc
2219   1090 D7            push a
2220   1091 DA            push d
2221   1092                             
2222   1092 FD 2E 00 00   mov32 cb, $00000000
2222   1096 00 00 
2223   1098 E7            pop d
2224   1099 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2225   109D E4            pop a
2226   109E DA            push d
2227   109F                             
2228   109F             ; --- START FUNCTION CALL
2229   109F 07 6A 11      call rand2
2230   10A2             ; --- START FACTORS
2231   10A2 D7            push a
2232   10A3 FD D8         push g
2233   10A5 11            mov a, b
2234   10A6 FD 7A         mov g, c
2235   10A8 FD 2E 14 00   mov32 cb, $00000014
2235   10AC 00 00 
2236   10AE FD D8         push g ; save 'g' as the div instruction uses it
2237   10B0 AE            div a, b ; %, a: quotient, b: remainder
2238   10B1 11            mov a, b
2239   10B2 FD F1         pop g
2240   10B4 FD 38         mov c, g
2241   10B6 27            mov b, a
2242   10B7 FD F1         pop g
2243   10B9 E4            pop a
2244   10BA             ; --- END FACTORS
2245   10BA E7            pop d
2246   10BB FD 43         mov [d], b
2247   10BD E7            pop d
2248   10BE FD 43         mov [d], b
2249   10C0 0A 2E 10      jmp _while26_cond
2250   10C3             _while26_exit:
2251   10C3             ; if (scratchloc == loc[	1      ]) { 
2252   10C3             _if28_cond:
2253   10C3                             
2254   10C3 FA FF FF      lea d, [bp + -1] ; $scratchloc
2255   10C6 2A            mov b, [d]
2256   10C7 38 00 00      mov c, 0
2257   10CA             ; --- START RELATIONAL
2258   10CA D7            push a
2259   10CB 11            mov a, b
2260   10CC 3B D2 17      mov d, _loc_data ; $loc
2261   10CF D7            push a
2262   10D0 DA            push d
2263   10D1                             
2264   10D1 FD 2E 01 00   mov32 cb, $00000001
2264   10D5 00 00 
2265   10D7 E7            pop d
2266   10D8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2267   10DC E4            pop a
2268   10DD 2A            mov b, [d]
2269   10DE 38 00 00      mov c, 0
2270   10E1 B0            cmp a, b
2271   10E2 FD 71         seq ; ==
2272   10E4 E4            pop a
2273   10E5             ; --- END RELATIONAL
2274   10E5 C0 00 00      cmp b, 0
2275   10E8 C6 FD 10      je _if28_exit
2276   10EB             _if28_TRUE:
2277   10EB             ; print("... OOPS! BUMPED A WUMPUS!\n"); 
2278   10EB                             
2279   10EB             ; --- START FUNCTION CALL
2280   10EB                             
2281   10EB 26 77 1F      mov b, _s55 ; "... OOPS! BUMPED A WUMPUS!\n"
2282   10EE FD AB         swp b
2283   10F0 D8            push b
2284   10F1 07 FD 14      call print
2285   10F4 51 02 00      add sp, 2
2286   10F7             ; --- END FUNCTION CALL
2287   10F7             ; move_wumpus(); 
2288   10F7                             
2289   10F7             ; --- START FUNCTION CALL
2290   10F7 07 E9 09      call move_wumpus
2291   10FA 0A FD 10      jmp _if28_exit
2292   10FD             _if28_exit:
2293   10FD             ; if (scratchloc == loc[	2    ] || scratchloc == loc[	3    ]) { 
2294   10FD             _if29_cond:
2295   10FD                             
2296   10FD FA FF FF      lea d, [bp + -1] ; $scratchloc
2297   1100 2A            mov b, [d]
2298   1101 38 00 00      mov c, 0
2299   1104             ; --- START RELATIONAL
2300   1104 D7            push a
2301   1105 11            mov a, b
2302   1106 3B D2 17      mov d, _loc_data ; $loc
2303   1109 D7            push a
2304   110A DA            push d
2305   110B                             
2306   110B FD 2E 02 00   mov32 cb, $00000002
2306   110F 00 00 
2307   1111 E7            pop d
2308   1112 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2309   1116 E4            pop a
2310   1117 2A            mov b, [d]
2311   1118 38 00 00      mov c, 0
2312   111B B0            cmp a, b
2313   111C FD 71         seq ; ==
2314   111E E4            pop a
2315   111F             ; --- END RELATIONAL
2316   111F             ; --- START LOGICAL OR
2317   111F D7            push a
2318   1120 11            mov a, b
2319   1121 FA FF FF      lea d, [bp + -1] ; $scratchloc
2320   1124 2A            mov b, [d]
2321   1125 38 00 00      mov c, 0
2322   1128             ; --- START RELATIONAL
2323   1128 D7            push a
2324   1129 11            mov a, b
2325   112A 3B D2 17      mov d, _loc_data ; $loc
2326   112D D7            push a
2327   112E DA            push d
2328   112F                             
2329   112F FD 2E 03 00   mov32 cb, $00000003
2329   1133 00 00 
2330   1135 E7            pop d
2331   1136 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2332   113A E4            pop a
2333   113B 2A            mov b, [d]
2334   113C 38 00 00      mov c, 0
2335   113F B0            cmp a, b
2336   1140 FD 71         seq ; ==
2337   1142 E4            pop a
2338   1143             ; --- END RELATIONAL
2339   1143 FD A8         sor a, b ; ||
2340   1145 E4            pop a
2341   1146             ; --- END LOGICAL OR
2342   1146 C0 00 00      cmp b, 0
2343   1149 C6 68 11      je _if29_exit
2344   114C             _if29_TRUE:
2345   114C             ; print("YYYYIIIIEEEE . . . FELL IN PIT\n"); 
2346   114C                             
2347   114C             ; --- START FUNCTION CALL
2348   114C                             
2349   114C 26 93 1F      mov b, _s56 ; "YYYYIIIIEEEE . . . FELL IN PIT\n"
2350   114F FD AB         swp b
2351   1151 D8            push b
2352   1152 07 FD 14      call print
2353   1155 51 02 00      add sp, 2
2354   1158             ; --- END FUNCTION CALL
2355   1158             ; finished = 	2    ; 
2356   1158 3B DE 17      mov d, _finished ; $finished
2357   115B DA            push d
2358   115C                             
2359   115C FD 2E 02 00   mov32 cb, $00000002
2359   1160 00 00 
2360   1162 E7            pop d
2361   1163 FD 43         mov [d], b
2362   1165 0A 68 11      jmp _if29_exit
2363   1168             _if29_exit:
2364   1168 F9            leave
2365   1169 09            ret
2366   116A             
2367   116A             rand2:
2368   116A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2369   116D             ; rand_val=rand_val+rand_inc; 
2370   116D 3B CE 17      mov d, _rand_val ; $rand_val
2371   1170 DA            push d
2372   1171                             
2373   1171 3B CE 17      mov d, _rand_val ; $rand_val
2374   1174 2A            mov b, [d]
2375   1175 38 00 00      mov c, 0
2376   1178             ; --- START TERMS
2377   1178 D7            push a
2378   1179 11            mov a, b
2379   117A 3B D0 17      mov d, _rand_inc ; $rand_inc
2380   117D 2A            mov b, [d]
2381   117E 38 00 00      mov c, 0
2382   1181 56            add b, a
2383   1182 E4            pop a
2384   1183             ; --- END TERMS
2385   1183 E7            pop d
2386   1184 FD 43         mov [d], b
2387   1186             ; rand_inc++; 
2388   1186                             
2389   1186 3B D0 17      mov d, _rand_inc ; $rand_inc
2390   1189 2A            mov b, [d]
2391   118A 38 00 00      mov c, 0
2392   118D 11            mov a, b
2393   118E FD 77         inc b
2394   1190 3B D0 17      mov d, _rand_inc ; $rand_inc
2395   1193 FD 43         mov [d], b
2396   1195 27            mov b, a
2397   1196             ; return rand_val; 
2398   1196                             
2399   1196 3B CE 17      mov d, _rand_val ; $rand_val
2400   1199 2A            mov b, [d]
2401   119A 38 00 00      mov c, 0
2402   119D F9            leave
2403   119E 09            ret
2404   119F             
2405   119F             game_setup:
2406   119F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2407   11A2             ; int j, k; 
2408   11A2 52 02 00      sub sp, 2
2409   11A5 52 02 00      sub sp, 2
2410   11A8             ; int v; 
2411   11A8 52 02 00      sub sp, 2
2412   11AB             ; for (j = 0; j < 	6    ; j++) { 
2413   11AB             _for30_init:
2414   11AB FA FF FF      lea d, [bp + -1] ; $j
2415   11AE DA            push d
2416   11AF                             
2417   11AF FD 2E 00 00   mov32 cb, $00000000
2417   11B3 00 00 
2418   11B5 E7            pop d
2419   11B6 FD 43         mov [d], b
2420   11B8             _for30_cond:
2421   11B8                             
2422   11B8 FA FF FF      lea d, [bp + -1] ; $j
2423   11BB 2A            mov b, [d]
2424   11BC 38 00 00      mov c, 0
2425   11BF             ; --- START RELATIONAL
2426   11BF D7            push a
2427   11C0 11            mov a, b
2428   11C1 FD 2E 06 00   mov32 cb, $00000006
2428   11C5 00 00 
2429   11C7 B0            cmp a, b
2430   11C8 FD 73         slt ; < (signed)
2431   11CA E4            pop a
2432   11CB             ; --- END RELATIONAL
2433   11CB C0 00 00      cmp b, 0
2434   11CE C6 06 13      je _for30_exit
2435   11D1             _for30_block:
2436   11D1             ; loc[j] = -1; 
2437   11D1 3B D2 17      mov d, _loc_data ; $loc
2438   11D4 D7            push a
2439   11D5 DA            push d
2440   11D6                             
2441   11D6 FA FF FF      lea d, [bp + -1] ; $j
2442   11D9 2A            mov b, [d]
2443   11DA 38 00 00      mov c, 0
2444   11DD E7            pop d
2445   11DE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2446   11E2 E4            pop a
2447   11E3 DA            push d
2448   11E4                             
2449   11E4 FD 2E FF FF   mov32 cb, $ffffffff
2449   11E8 FF FF 
2450   11EA E7            pop d
2451   11EB FD 43         mov [d], b
2452   11ED             ; while (loc[j] < 0) { 
2453   11ED             _while31_cond:
2454   11ED                             
2455   11ED 3B D2 17      mov d, _loc_data ; $loc
2456   11F0 D7            push a
2457   11F1 DA            push d
2458   11F2                             
2459   11F2 FA FF FF      lea d, [bp + -1] ; $j
2460   11F5 2A            mov b, [d]
2461   11F6 38 00 00      mov c, 0
2462   11F9 E7            pop d
2463   11FA FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2464   11FE E4            pop a
2465   11FF 2A            mov b, [d]
2466   1200 38 00 00      mov c, 0
2467   1203             ; --- START RELATIONAL
2468   1203 D7            push a
2469   1204 11            mov a, b
2470   1205 FD 2E 00 00   mov32 cb, $00000000
2470   1209 00 00 
2471   120B B0            cmp a, b
2472   120C FD 73         slt ; < (signed)
2473   120E E4            pop a
2474   120F             ; --- END RELATIONAL
2475   120F C0 00 00      cmp b, 0
2476   1212 C6 F3 12      je _while31_exit
2477   1215             _while31_block:
2478   1215             ; v = rand2(); 
2479   1215 FA FB FF      lea d, [bp + -5] ; $v
2480   1218 DA            push d
2481   1219                             
2482   1219             ; --- START FUNCTION CALL
2483   1219 07 6A 11      call rand2
2484   121C E7            pop d
2485   121D FD 43         mov [d], b
2486   121F             ; loc[j] = v % 20; 
2487   121F 3B D2 17      mov d, _loc_data ; $loc
2488   1222 D7            push a
2489   1223 DA            push d
2490   1224                             
2491   1224 FA FF FF      lea d, [bp + -1] ; $j
2492   1227 2A            mov b, [d]
2493   1228 38 00 00      mov c, 0
2494   122B E7            pop d
2495   122C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2496   1230 E4            pop a
2497   1231 DA            push d
2498   1232                             
2499   1232 FA FB FF      lea d, [bp + -5] ; $v
2500   1235 2A            mov b, [d]
2501   1236 38 00 00      mov c, 0
2502   1239             ; --- START FACTORS
2503   1239 D7            push a
2504   123A FD D8         push g
2505   123C 11            mov a, b
2506   123D FD 7A         mov g, c
2507   123F FD 2E 14 00   mov32 cb, $00000014
2507   1243 00 00 
2508   1245 FD D8         push g ; save 'g' as the div instruction uses it
2509   1247 AE            div a, b ; %, a: quotient, b: remainder
2510   1248 11            mov a, b
2511   1249 FD F1         pop g
2512   124B FD 38         mov c, g
2513   124D 27            mov b, a
2514   124E FD F1         pop g
2515   1250 E4            pop a
2516   1251             ; --- END FACTORS
2517   1251 E7            pop d
2518   1252 FD 43         mov [d], b
2519   1254             ; for (k=0; k < j - 1; k++) { 
2520   1254             _for33_init:
2521   1254 FA FD FF      lea d, [bp + -3] ; $k
2522   1257 DA            push d
2523   1258                             
2524   1258 FD 2E 00 00   mov32 cb, $00000000
2524   125C 00 00 
2525   125E E7            pop d
2526   125F FD 43         mov [d], b
2527   1261             _for33_cond:
2528   1261                             
2529   1261 FA FD FF      lea d, [bp + -3] ; $k
2530   1264 2A            mov b, [d]
2531   1265 38 00 00      mov c, 0
2532   1268             ; --- START RELATIONAL
2533   1268 D7            push a
2534   1269 11            mov a, b
2535   126A FA FF FF      lea d, [bp + -1] ; $j
2536   126D 2A            mov b, [d]
2537   126E 38 00 00      mov c, 0
2538   1271             ; --- START TERMS
2539   1271 D7            push a
2540   1272 11            mov a, b
2541   1273 FD 2E 01 00   mov32 cb, $00000001
2541   1277 00 00 
2542   1279 60            sub a, b
2543   127A 27            mov b, a
2544   127B E4            pop a
2545   127C             ; --- END TERMS
2546   127C B0            cmp a, b
2547   127D FD 73         slt ; < (signed)
2548   127F E4            pop a
2549   1280             ; --- END RELATIONAL
2550   1280 C0 00 00      cmp b, 0
2551   1283 C6 F0 12      je _for33_exit
2552   1286             _for33_block:
2553   1286             ; if (loc[j] == loc[k]) { 
2554   1286             _if34_cond:
2555   1286                             
2556   1286 3B D2 17      mov d, _loc_data ; $loc
2557   1289 D7            push a
2558   128A DA            push d
2559   128B                             
2560   128B FA FF FF      lea d, [bp + -1] ; $j
2561   128E 2A            mov b, [d]
2562   128F 38 00 00      mov c, 0
2563   1292 E7            pop d
2564   1293 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2565   1297 E4            pop a
2566   1298 2A            mov b, [d]
2567   1299 38 00 00      mov c, 0
2568   129C             ; --- START RELATIONAL
2569   129C D7            push a
2570   129D 11            mov a, b
2571   129E 3B D2 17      mov d, _loc_data ; $loc
2572   12A1 D7            push a
2573   12A2 DA            push d
2574   12A3                             
2575   12A3 FA FD FF      lea d, [bp + -3] ; $k
2576   12A6 2A            mov b, [d]
2577   12A7 38 00 00      mov c, 0
2578   12AA E7            pop d
2579   12AB FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2580   12AF E4            pop a
2581   12B0 2A            mov b, [d]
2582   12B1 38 00 00      mov c, 0
2583   12B4 B0            cmp a, b
2584   12B5 FD 71         seq ; ==
2585   12B7 E4            pop a
2586   12B8             ; --- END RELATIONAL
2587   12B8 C0 00 00      cmp b, 0
2588   12BB C6 DD 12      je _if34_exit
2589   12BE             _if34_TRUE:
2590   12BE             ; loc[j] = -1; 
2591   12BE 3B D2 17      mov d, _loc_data ; $loc
2592   12C1 D7            push a
2593   12C2 DA            push d
2594   12C3                             
2595   12C3 FA FF FF      lea d, [bp + -1] ; $j
2596   12C6 2A            mov b, [d]
2597   12C7 38 00 00      mov c, 0
2598   12CA E7            pop d
2599   12CB FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2600   12CF E4            pop a
2601   12D0 DA            push d
2602   12D1                             
2603   12D1 FD 2E FF FF   mov32 cb, $ffffffff
2603   12D5 FF FF 
2604   12D7 E7            pop d
2605   12D8 FD 43         mov [d], b
2606   12DA 0A DD 12      jmp _if34_exit
2607   12DD             _if34_exit:
2608   12DD             _for33_update:
2609   12DD                             
2610   12DD FA FD FF      lea d, [bp + -3] ; $k
2611   12E0 2A            mov b, [d]
2612   12E1 38 00 00      mov c, 0
2613   12E4 11            mov a, b
2614   12E5 FD 77         inc b
2615   12E7 FA FD FF      lea d, [bp + -3] ; $k
2616   12EA FD 43         mov [d], b
2617   12EC 27            mov b, a
2618   12ED 0A 61 12      jmp _for33_cond
2619   12F0             _for33_exit:
2620   12F0 0A ED 11      jmp _while31_cond
2621   12F3             _while31_exit:
2622   12F3             _for30_update:
2623   12F3                             
2624   12F3 FA FF FF      lea d, [bp + -1] ; $j
2625   12F6 2A            mov b, [d]
2626   12F7 38 00 00      mov c, 0
2627   12FA 11            mov a, b
2628   12FB FD 77         inc b
2629   12FD FA FF FF      lea d, [bp + -1] ; $j
2630   1300 FD 43         mov [d], b
2631   1302 27            mov b, a
2632   1303 0A B8 11      jmp _for30_cond
2633   1306             _for30_exit:
2634   1306 F9            leave
2635   1307 09            ret
2636   1308             
2637   1308             game_play:
2638   1308 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2639   130B             ; arrows = 5; 
2640   130B 3B CA 17      mov d, _arrows ; $arrows
2641   130E DA            push d
2642   130F                             
2643   130F FD 2E 05 00   mov32 cb, $00000005
2643   1313 00 00 
2644   1315 E7            pop d
2645   1316 FD 43         mov [d], b
2646   1318             ; print("HUNT THE WUMPUS\n"); 
2647   1318                             
2648   1318             ; --- START FUNCTION CALL
2649   1318                             
2650   1318 26 B3 1F      mov b, _s57 ; "HUNT THE WUMPUS\n"
2651   131B FD AB         swp b
2652   131D D8            push b
2653   131E 07 FD 14      call print
2654   1321 51 02 00      add sp, 2
2655   1324             ; --- END FUNCTION CALL
2656   1324             ; if (debug) { 
2657   1324             _if35_cond:
2658   1324                             
2659   1324 3B CC 17      mov d, _debug ; $debug
2660   1327 2A            mov b, [d]
2661   1328 38 00 00      mov c, 0
2662   132B C0 00 00      cmp b, 0
2663   132E C6 38 14      je _if35_exit
2664   1331             _if35_TRUE:
2665   1331             ; print("Wumpus is at "); print_unsigned(loc[	1      ]+1); 
2666   1331                             
2667   1331             ; --- START FUNCTION CALL
2668   1331                             
2669   1331 26 C4 1F      mov b, _s58 ; "Wumpus is at "
2670   1334 FD AB         swp b
2671   1336 D8            push b
2672   1337 07 FD 14      call print
2673   133A 51 02 00      add sp, 2
2674   133D             ; --- END FUNCTION CALL
2675   133D             ; print_unsigned(loc[	1      ]+1); 
2676   133D                             
2677   133D             ; --- START FUNCTION CALL
2678   133D                             
2679   133D 3B D2 17      mov d, _loc_data ; $loc
2680   1340 D7            push a
2681   1341 DA            push d
2682   1342                             
2683   1342 FD 2E 01 00   mov32 cb, $00000001
2683   1346 00 00 
2684   1348 E7            pop d
2685   1349 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2686   134D E4            pop a
2687   134E 2A            mov b, [d]
2688   134F 38 00 00      mov c, 0
2689   1352             ; --- START TERMS
2690   1352 D7            push a
2691   1353 11            mov a, b
2692   1354 FD 2E 01 00   mov32 cb, $00000001
2692   1358 00 00 
2693   135A 56            add b, a
2694   135B E4            pop a
2695   135C             ; --- END TERMS
2696   135C FD AB         swp b
2697   135E D8            push b
2698   135F 07 96 15      call print_unsigned
2699   1362 51 02 00      add sp, 2
2700   1365             ; --- END FUNCTION CALL
2701   1365             ; print(", pits at "); print_unsigned(loc[	2    ]+1); 
2702   1365                             
2703   1365             ; --- START FUNCTION CALL
2704   1365                             
2705   1365 26 D2 1F      mov b, _s59 ; ", pits at "
2706   1368 FD AB         swp b
2707   136A D8            push b
2708   136B 07 FD 14      call print
2709   136E 51 02 00      add sp, 2
2710   1371             ; --- END FUNCTION CALL
2711   1371             ; print_unsigned(loc[	2    ]+1); 
2712   1371                             
2713   1371             ; --- START FUNCTION CALL
2714   1371                             
2715   1371 3B D2 17      mov d, _loc_data ; $loc
2716   1374 D7            push a
2717   1375 DA            push d
2718   1376                             
2719   1376 FD 2E 02 00   mov32 cb, $00000002
2719   137A 00 00 
2720   137C E7            pop d
2721   137D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2722   1381 E4            pop a
2723   1382 2A            mov b, [d]
2724   1383 38 00 00      mov c, 0
2725   1386             ; --- START TERMS
2726   1386 D7            push a
2727   1387 11            mov a, b
2728   1388 FD 2E 01 00   mov32 cb, $00000001
2728   138C 00 00 
2729   138E 56            add b, a
2730   138F E4            pop a
2731   1390             ; --- END TERMS
2732   1390 FD AB         swp b
2733   1392 D8            push b
2734   1393 07 96 15      call print_unsigned
2735   1396 51 02 00      add sp, 2
2736   1399             ; --- END FUNCTION CALL
2737   1399             ; print(" & "); print_unsigned(loc[	3    ]+1); 
2738   1399                             
2739   1399             ; --- START FUNCTION CALL
2740   1399                             
2741   1399 26 DD 1F      mov b, _s60 ; " & "
2742   139C FD AB         swp b
2743   139E D8            push b
2744   139F 07 FD 14      call print
2745   13A2 51 02 00      add sp, 2
2746   13A5             ; --- END FUNCTION CALL
2747   13A5             ; print_unsigned(loc[	3    ]+1); 
2748   13A5                             
2749   13A5             ; --- START FUNCTION CALL
2750   13A5                             
2751   13A5 3B D2 17      mov d, _loc_data ; $loc
2752   13A8 D7            push a
2753   13A9 DA            push d
2754   13AA                             
2755   13AA FD 2E 03 00   mov32 cb, $00000003
2755   13AE 00 00 
2756   13B0 E7            pop d
2757   13B1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2758   13B5 E4            pop a
2759   13B6 2A            mov b, [d]
2760   13B7 38 00 00      mov c, 0
2761   13BA             ; --- START TERMS
2762   13BA D7            push a
2763   13BB 11            mov a, b
2764   13BC FD 2E 01 00   mov32 cb, $00000001
2764   13C0 00 00 
2765   13C2 56            add b, a
2766   13C3 E4            pop a
2767   13C4             ; --- END TERMS
2768   13C4 FD AB         swp b
2769   13C6 D8            push b
2770   13C7 07 96 15      call print_unsigned
2771   13CA 51 02 00      add sp, 2
2772   13CD             ; --- END FUNCTION CALL
2773   13CD             ; print(", bats at "); print_unsigned(loc[	4     ]+1); 
2774   13CD                             
2775   13CD             ; --- START FUNCTION CALL
2776   13CD                             
2777   13CD 26 E1 1F      mov b, _s61 ; ", bats at "
2778   13D0 FD AB         swp b
2779   13D2 D8            push b
2780   13D3 07 FD 14      call print
2781   13D6 51 02 00      add sp, 2
2782   13D9             ; --- END FUNCTION CALL
2783   13D9             ; print_unsigned(loc[	4     ]+1); 
2784   13D9                             
2785   13D9             ; --- START FUNCTION CALL
2786   13D9                             
2787   13D9 3B D2 17      mov d, _loc_data ; $loc
2788   13DC D7            push a
2789   13DD DA            push d
2790   13DE                             
2791   13DE FD 2E 04 00   mov32 cb, $00000004
2791   13E2 00 00 
2792   13E4 E7            pop d
2793   13E5 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2794   13E9 E4            pop a
2795   13EA 2A            mov b, [d]
2796   13EB 38 00 00      mov c, 0
2797   13EE             ; --- START TERMS
2798   13EE D7            push a
2799   13EF 11            mov a, b
2800   13F0 FD 2E 01 00   mov32 cb, $00000001
2800   13F4 00 00 
2801   13F6 56            add b, a
2802   13F7 E4            pop a
2803   13F8             ; --- END TERMS
2804   13F8 FD AB         swp b
2805   13FA D8            push b
2806   13FB 07 96 15      call print_unsigned
2807   13FE 51 02 00      add sp, 2
2808   1401             ; --- END FUNCTION CALL
2809   1401             ; print(" & "); print_unsigned(loc[	5     ]+1); 
2810   1401                             
2811   1401             ; --- START FUNCTION CALL
2812   1401                             
2813   1401 26 DD 1F      mov b, _s60 ; " & "
2814   1404 FD AB         swp b
2815   1406 D8            push b
2816   1407 07 FD 14      call print
2817   140A 51 02 00      add sp, 2
2818   140D             ; --- END FUNCTION CALL
2819   140D             ; print_unsigned(loc[	5     ]+1); 
2820   140D                             
2821   140D             ; --- START FUNCTION CALL
2822   140D                             
2823   140D 3B D2 17      mov d, _loc_data ; $loc
2824   1410 D7            push a
2825   1411 DA            push d
2826   1412                             
2827   1412 FD 2E 05 00   mov32 cb, $00000005
2827   1416 00 00 
2828   1418 E7            pop d
2829   1419 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2830   141D E4            pop a
2831   141E 2A            mov b, [d]
2832   141F 38 00 00      mov c, 0
2833   1422             ; --- START TERMS
2834   1422 D7            push a
2835   1423 11            mov a, b
2836   1424 FD 2E 01 00   mov32 cb, $00000001
2836   1428 00 00 
2837   142A 56            add b, a
2838   142B E4            pop a
2839   142C             ; --- END TERMS
2840   142C FD AB         swp b
2841   142E D8            push b
2842   142F 07 96 15      call print_unsigned
2843   1432 51 02 00      add sp, 2
2844   1435             ; --- END FUNCTION CALL
2845   1435 0A 38 14      jmp _if35_exit
2846   1438             _if35_exit:
2847   1438             ; finished = 	     0   ; 
2848   1438 3B DE 17      mov d, _finished ; $finished
2849   143B DA            push d
2850   143C                             
2851   143C FD 2E 00 00   mov32 cb, $00000000
2851   1440 00 00 
2852   1442 E7            pop d
2853   1443 FD 43         mov [d], b
2854   1445             ; while (finished == 	     0   ) { 
2855   1445             _while36_cond:
2856   1445                             
2857   1445 3B DE 17      mov d, _finished ; $finished
2858   1448 2A            mov b, [d]
2859   1449 38 00 00      mov c, 0
2860   144C             ; --- START RELATIONAL
2861   144C D7            push a
2862   144D 11            mov a, b
2863   144E FD 2E 00 00   mov32 cb, $00000000
2863   1452 00 00 
2864   1454 B0            cmp a, b
2865   1455 FD 71         seq ; ==
2866   1457 E4            pop a
2867   1458             ; --- END RELATIONAL
2868   1458 C0 00 00      cmp b, 0
2869   145B C6 76 14      je _while36_exit
2870   145E             _while36_block:
2871   145E             ; show_room(); 
2872   145E                             
2873   145E             ; --- START FUNCTION CALL
2874   145E 07 B1 06      call show_room
2875   1461             ; if (move_or_shoot()) { 
2876   1461             _if37_cond:
2877   1461                             
2878   1461             ; --- START FUNCTION CALL
2879   1461 07 65 09      call move_or_shoot
2880   1464 C0 00 00      cmp b, 0
2881   1467 C6 70 14      je _if37_else
2882   146A             _if37_TRUE:
2883   146A             ; shoot(); 
2884   146A                             
2885   146A             ; --- START FUNCTION CALL
2886   146A 07 C7 0A      call shoot
2887   146D 0A 73 14      jmp _if37_exit
2888   1470             _if37_else:
2889   1470             ; move(); 
2890   1470                             
2891   1470             ; --- START FUNCTION CALL
2892   1470 07 78 0E      call move
2893   1473             _if37_exit:
2894   1473 0A 45 14      jmp _while36_cond
2895   1476             _while36_exit:
2896   1476             ; if (finished == 	     1   ) { 
2897   1476             _if38_cond:
2898   1476                             
2899   1476 3B DE 17      mov d, _finished ; $finished
2900   1479 2A            mov b, [d]
2901   147A 38 00 00      mov c, 0
2902   147D             ; --- START RELATIONAL
2903   147D D7            push a
2904   147E 11            mov a, b
2905   147F FD 2E 01 00   mov32 cb, $00000001
2905   1483 00 00 
2906   1485 B0            cmp a, b
2907   1486 FD 71         seq ; ==
2908   1488 E4            pop a
2909   1489             ; --- END RELATIONAL
2910   1489 C0 00 00      cmp b, 0
2911   148C C6 9E 14      je _if38_exit
2912   148F             _if38_TRUE:
2913   148F             ; print("HEE HEE HEE - THE WUMPUS'LL GET YOU NEXT TIME!!\n"); 
2914   148F                             
2915   148F             ; --- START FUNCTION CALL
2916   148F                             
2917   148F 26 EC 1F      mov b, _s62 ; "HEE HEE HEE - THE WUMPUS'LL GET YOU NEXT TIME!!\n"
2918   1492 FD AB         swp b
2919   1494 D8            push b
2920   1495 07 FD 14      call print
2921   1498 51 02 00      add sp, 2
2922   149B             ; --- END FUNCTION CALL
2923   149B 0A 9E 14      jmp _if38_exit
2924   149E             _if38_exit:
2925   149E             ; if (finished == 	2    ) { 
2926   149E             _if39_cond:
2927   149E                             
2928   149E 3B DE 17      mov d, _finished ; $finished
2929   14A1 2A            mov b, [d]
2930   14A2 38 00 00      mov c, 0
2931   14A5             ; --- START RELATIONAL
2932   14A5 D7            push a
2933   14A6 11            mov a, b
2934   14A7 FD 2E 02 00   mov32 cb, $00000002
2934   14AB 00 00 
2935   14AD B0            cmp a, b
2936   14AE FD 71         seq ; ==
2937   14B0 E4            pop a
2938   14B1             ; --- END RELATIONAL
2939   14B1 C0 00 00      cmp b, 0
2940   14B4 C6 C6 14      je _if39_exit
2941   14B7             _if39_TRUE:
2942   14B7             ; print("HA HA HA - YOU LOSE!\n"); 
2943   14B7                             
2944   14B7             ; --- START FUNCTION CALL
2945   14B7                             
2946   14B7 26 1C 20      mov b, _s63 ; "HA HA HA - YOU LOSE!\n"
2947   14BA FD AB         swp b
2948   14BC D8            push b
2949   14BD 07 FD 14      call print
2950   14C0 51 02 00      add sp, 2
2951   14C3             ; --- END FUNCTION CALL
2952   14C3 0A C6 14      jmp _if39_exit
2953   14C6             _if39_exit:
2954   14C6             ; int c; 
2955   14C6 52 02 00      sub sp, 2
2956   14C9             ; c = getlet("NEW GAME (Y-N): "); 
2957   14C9 FA FF FF      lea d, [bp + -1] ; $c
2958   14CC DA            push d
2959   14CD                             
2960   14CD             ; --- START FUNCTION CALL
2961   14CD                             
2962   14CD 26 79 18      mov b, _s1 ; "NEW GAME (Y-N): "
2963   14D0 FD AB         swp b
2964   14D2 D8            push b
2965   14D3 07 93 04      call getlet
2966   14D6 51 02 00      add sp, 2
2967   14D9             ; --- END FUNCTION CALL
2968   14D9 E7            pop d
2969   14DA FD 43         mov [d], b
2970   14DC             ; if (c == 'N') { 
2971   14DC             _if40_cond:
2972   14DC                             
2973   14DC FA FF FF      lea d, [bp + -1] ; $c
2974   14DF 2A            mov b, [d]
2975   14E0 38 00 00      mov c, 0
2976   14E3             ; --- START RELATIONAL
2977   14E3 D7            push a
2978   14E4 11            mov a, b
2979   14E5 FD 2E 4E 00   mov32 cb, $0000004e
2979   14E9 00 00 
2980   14EB B0            cmp a, b
2981   14EC FD 71         seq ; ==
2982   14EE E4            pop a
2983   14EF             ; --- END RELATIONAL
2984   14EF C0 00 00      cmp b, 0
2985   14F2 C6 FB 14      je _if40_exit
2986   14F5             _if40_TRUE:
2987   14F5             ; exit(); 
2988   14F5                             
2989   14F5             ; --- START FUNCTION CALL
2990   14F5 07 C3 17      call exit
2991   14F8 0A FB 14      jmp _if40_exit
2992   14FB             _if40_exit:
2993   14FB F9            leave
2994   14FC 09            ret
2995   14FD             
2996   14FD             print:
2997   14FD F8 00 00      enter 0 ; (push bp; mov bp, sp)
2998   1500             ; --- BEGIN INLINE ASM SEGMENT
2999   1500 FA 05 00      lea d, [bp + 5] ; $s
3000   1503 FD 2A         mov d, [d]
3001   1505             _puts_L1_print:
3002   1505 1E            mov al, [d]
3003   1506 B9 00         cmp al, 0
3004   1508 C6 14 15      jz _puts_END_print
3005   150B 23            mov ah, al
3006   150C 19 00         mov al, 0
3007   150E 05 03         syscall sys_io
3008   1510 79            inc d
3009   1511 0A 05 15      jmp _puts_L1_print
3010   1514             _puts_END_print:
3011   1514             ; --- END INLINE ASM SEGMENT
3012   1514 F9            leave
3013   1515 09            ret
3014   1516             
3015   1516             getchar:
3016   1516 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3017   1519             ; char c; 
3018   1519 52 01 00      sub sp, 1
3019   151C             ; --- BEGIN INLINE ASM SEGMENT
3020   151C 19 01         mov al, 1
3021   151E 05 03         syscall sys_io      ; receive in AH
3022   1520 1A            mov al, ah
3023   1521 FA 00 00      lea d, [bp + 0] ; $c
3024   1524 3E            mov [d], al
3025   1525             ; --- END INLINE ASM SEGMENT
3026   1525             ; return c; 
3027   1525                             
3028   1525 FA 00 00      lea d, [bp + 0] ; $c
3029   1528 32            mov bl, [d]
3030   1529 A7 00         mov bh, 0
3031   152B 38 00 00      mov c, 0
3032   152E F9            leave
3033   152F 09            ret
3034   1530             
3035   1530             toupper:
3036   1530 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3037   1533             ; if (ch >= 'a' && ch <= 'z')  
3038   1533             _if41_cond:
3039   1533                             
3040   1533 FA 05 00      lea d, [bp + 5] ; $ch
3041   1536 32            mov bl, [d]
3042   1537 A7 00         mov bh, 0
3043   1539 38 00 00      mov c, 0
3044   153C             ; --- START RELATIONAL
3045   153C D7            push a
3046   153D 11            mov a, b
3047   153E FD 2E 61 00   mov32 cb, $00000061
3047   1542 00 00 
3048   1544 B0            cmp a, b
3049   1545 FD 80         sge ; >=
3050   1547 E4            pop a
3051   1548             ; --- END RELATIONAL
3052   1548             ; --- START LOGICAL AND
3053   1548 D7            push a
3054   1549 11            mov a, b
3055   154A FA 05 00      lea d, [bp + 5] ; $ch
3056   154D 32            mov bl, [d]
3057   154E A7 00         mov bh, 0
3058   1550 38 00 00      mov c, 0
3059   1553             ; --- START RELATIONAL
3060   1553 D7            push a
3061   1554 11            mov a, b
3062   1555 FD 2E 7A 00   mov32 cb, $0000007a
3062   1559 00 00 
3063   155B B0            cmp a, b
3064   155C FD 74         sle ; <= (signed)
3065   155E E4            pop a
3066   155F             ; --- END RELATIONAL
3067   155F FD A7         sand a, b
3068   1561 E4            pop a
3069   1562             ; --- END LOGICAL AND
3070   1562 C0 00 00      cmp b, 0
3071   1565 C6 89 15      je _if41_else
3072   1568             _if41_TRUE:
3073   1568             ; return ch - 'a' + 'A'; 
3074   1568                             
3075   1568 FA 05 00      lea d, [bp + 5] ; $ch
3076   156B 32            mov bl, [d]
3077   156C A7 00         mov bh, 0
3078   156E 38 00 00      mov c, 0
3079   1571             ; --- START TERMS
3080   1571 D7            push a
3081   1572 11            mov a, b
3082   1573 FD 2E 61 00   mov32 cb, $00000061
3082   1577 00 00 
3083   1579 60            sub a, b
3084   157A 27            mov b, a
3085   157B 11            mov a, b
3086   157C FD 2E 41 00   mov32 cb, $00000041
3086   1580 00 00 
3087   1582 56            add b, a
3088   1583 E4            pop a
3089   1584             ; --- END TERMS
3090   1584 F9            leave
3091   1585 09            ret
3092   1586 0A 94 15      jmp _if41_exit
3093   1589             _if41_else:
3094   1589             ; return ch; 
3095   1589                             
3096   1589 FA 05 00      lea d, [bp + 5] ; $ch
3097   158C 32            mov bl, [d]
3098   158D A7 00         mov bh, 0
3099   158F 38 00 00      mov c, 0
3100   1592 F9            leave
3101   1593 09            ret
3102   1594             _if41_exit:
3103   1594 F9            leave
3104   1595 09            ret
3105   1596             
3106   1596             print_unsigned:
3107   1596 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3108   1599             ; char digits[5]; 
3109   1599 52 05 00      sub sp, 5
3110   159C             ; int i; 
3111   159C 52 02 00      sub sp, 2
3112   159F             ; i = 0; 
3113   159F FA FA FF      lea d, [bp + -6] ; $i
3114   15A2 DA            push d
3115   15A3                             
3116   15A3 FD 2E 00 00   mov32 cb, $00000000
3116   15A7 00 00 
3117   15A9 E7            pop d
3118   15AA FD 43         mov [d], b
3119   15AC             ; if(num == 0){ 
3120   15AC             _if42_cond:
3121   15AC                             
3122   15AC FA 05 00      lea d, [bp + 5] ; $num
3123   15AF 2A            mov b, [d]
3124   15B0 38 00 00      mov c, 0
3125   15B3             ; --- START RELATIONAL
3126   15B3 D7            push a
3127   15B4 11            mov a, b
3128   15B5 FD 2E 00 00   mov32 cb, $00000000
3128   15B9 00 00 
3129   15BB B0            cmp a, b
3130   15BC FD 71         seq ; ==
3131   15BE E4            pop a
3132   15BF             ; --- END RELATIONAL
3133   15BF C0 00 00      cmp b, 0
3134   15C2 C6 D7 15      je _if42_exit
3135   15C5             _if42_TRUE:
3136   15C5             ; putchar('0'); 
3137   15C5                             
3138   15C5             ; --- START FUNCTION CALL
3139   15C5                             
3140   15C5 FD 2E 30 00   mov32 cb, $00000030
3140   15C9 00 00 
3141   15CB DD            push bl
3142   15CC 07 AE 16      call putchar
3143   15CF 51 01 00      add sp, 1
3144   15D2             ; --- END FUNCTION CALL
3145   15D2             ; return; 
3146   15D2 F9            leave
3147   15D3 09            ret
3148   15D4 0A D7 15      jmp _if42_exit
3149   15D7             _if42_exit:
3150   15D7             ; while (num > 0) { 
3151   15D7             _while43_cond:
3152   15D7                             
3153   15D7 FA 05 00      lea d, [bp + 5] ; $num
3154   15DA 2A            mov b, [d]
3155   15DB 38 00 00      mov c, 0
3156   15DE             ; --- START RELATIONAL
3157   15DE D7            push a
3158   15DF 11            mov a, b
3159   15E0 FD 2E 00 00   mov32 cb, $00000000
3159   15E4 00 00 
3160   15E6 B0            cmp a, b
3161   15E7 FD 81         sgu ; > (unsigned)
3162   15E9 E4            pop a
3163   15EA             ; --- END RELATIONAL
3164   15EA C0 00 00      cmp b, 0
3165   15ED C6 64 16      je _while43_exit
3166   15F0             _while43_block:
3167   15F0             ; digits[i] = '0' + (num % 10); 
3168   15F0 FA FC FF      lea d, [bp + -4] ; $digits
3169   15F3 D7            push a
3170   15F4 DA            push d
3171   15F5                             
3172   15F5 FA FA FF      lea d, [bp + -6] ; $i
3173   15F8 2A            mov b, [d]
3174   15F9 38 00 00      mov c, 0
3175   15FC E7            pop d
3176   15FD 5A            add d, b
3177   15FE E4            pop a
3178   15FF DA            push d
3179   1600                             
3180   1600 FD 2E 30 00   mov32 cb, $00000030
3180   1604 00 00 
3181   1606             ; --- START TERMS
3182   1606 D7            push a
3183   1607 11            mov a, b
3184   1608                             
3185   1608 FA 05 00      lea d, [bp + 5] ; $num
3186   160B 2A            mov b, [d]
3187   160C 38 00 00      mov c, 0
3188   160F             ; --- START FACTORS
3189   160F D7            push a
3190   1610 FD D8         push g
3191   1612 11            mov a, b
3192   1613 FD 7A         mov g, c
3193   1615 FD 2E 0A 00   mov32 cb, $0000000a
3193   1619 00 00 
3194   161B FD D8         push g ; save 'g' as the div instruction uses it
3195   161D AE            div a, b ; %, a: quotient, b: remainder
3196   161E 11            mov a, b
3197   161F FD F1         pop g
3198   1621 FD 38         mov c, g
3199   1623 27            mov b, a
3200   1624 FD F1         pop g
3201   1626 E4            pop a
3202   1627             ; --- END FACTORS
3203   1627 56            add b, a
3204   1628 E4            pop a
3205   1629             ; --- END TERMS
3206   1629 E7            pop d
3207   162A FD 3E         mov [d], bl
3208   162C             ; num = num / 10; 
3209   162C FA 05 00      lea d, [bp + 5] ; $num
3210   162F DA            push d
3211   1630                             
3212   1630 FA 05 00      lea d, [bp + 5] ; $num
3213   1633 2A            mov b, [d]
3214   1634 38 00 00      mov c, 0
3215   1637             ; --- START FACTORS
3216   1637 D7            push a
3217   1638 FD D8         push g
3218   163A 11            mov a, b
3219   163B FD 7A         mov g, c
3220   163D FD 2E 0A 00   mov32 cb, $0000000a
3220   1641 00 00 
3221   1643 FD D8         push g ; save 'g' as the div instruction uses it
3222   1645 AE            div a, b ; /, a: quotient, b: remainder
3223   1646 FD F1         pop g
3224   1648 FD 38         mov c, g
3225   164A 27            mov b, a
3226   164B FD F1         pop g
3227   164D E4            pop a
3228   164E             ; --- END FACTORS
3229   164E E7            pop d
3230   164F FD 43         mov [d], b
3231   1651             ; i++; 
3232   1651                             
3233   1651 FA FA FF      lea d, [bp + -6] ; $i
3234   1654 2A            mov b, [d]
3235   1655 38 00 00      mov c, 0
3236   1658 11            mov a, b
3237   1659 FD 77         inc b
3238   165B FA FA FF      lea d, [bp + -6] ; $i
3239   165E FD 43         mov [d], b
3240   1660 27            mov b, a
3241   1661 0A D7 15      jmp _while43_cond
3242   1664             _while43_exit:
3243   1664             ; while (i > 0) { 
3244   1664             _while46_cond:
3245   1664                             
3246   1664 FA FA FF      lea d, [bp + -6] ; $i
3247   1667 2A            mov b, [d]
3248   1668 38 00 00      mov c, 0
3249   166B             ; --- START RELATIONAL
3250   166B D7            push a
3251   166C 11            mov a, b
3252   166D FD 2E 00 00   mov32 cb, $00000000
3252   1671 00 00 
3253   1673 B0            cmp a, b
3254   1674 FD 7F         sgt ; >
3255   1676 E4            pop a
3256   1677             ; --- END RELATIONAL
3257   1677 C0 00 00      cmp b, 0
3258   167A C6 AC 16      je _while46_exit
3259   167D             _while46_block:
3260   167D             ; i--; 
3261   167D                             
3262   167D FA FA FF      lea d, [bp + -6] ; $i
3263   1680 2A            mov b, [d]
3264   1681 38 00 00      mov c, 0
3265   1684 11            mov a, b
3266   1685 FD 7D         dec b
3267   1687 FA FA FF      lea d, [bp + -6] ; $i
3268   168A FD 43         mov [d], b
3269   168C 27            mov b, a
3270   168D             ; putchar(digits[i]); 
3271   168D                             
3272   168D             ; --- START FUNCTION CALL
3273   168D                             
3274   168D FA FC FF      lea d, [bp + -4] ; $digits
3275   1690 D7            push a
3276   1691 DA            push d
3277   1692                             
3278   1692 FA FA FF      lea d, [bp + -6] ; $i
3279   1695 2A            mov b, [d]
3280   1696 38 00 00      mov c, 0
3281   1699 E7            pop d
3282   169A 5A            add d, b
3283   169B E4            pop a
3284   169C 32            mov bl, [d]
3285   169D A7 00         mov bh, 0
3286   169F 38 00 00      mov c, 0
3287   16A2 DD            push bl
3288   16A3 07 AE 16      call putchar
3289   16A6 51 01 00      add sp, 1
3290   16A9             ; --- END FUNCTION CALL
3291   16A9 0A 64 16      jmp _while46_cond
3292   16AC             _while46_exit:
3293   16AC F9            leave
3294   16AD 09            ret
3295   16AE             
3296   16AE             putchar:
3297   16AE F8 00 00      enter 0 ; (push bp; mov bp, sp)
3298   16B1             ; --- BEGIN INLINE ASM SEGMENT
3299   16B1 FA 05 00      lea d, [bp + 5] ; $c
3300   16B4 1E            mov al, [d]
3301   16B5 23            mov ah, al
3302   16B6 19 00         mov al, 0
3303   16B8 05 03         syscall sys_io      ; char in AH
3304   16BA             ; --- END INLINE ASM SEGMENT
3305   16BA F9            leave
3306   16BB 09            ret
3307   16BC             
3308   16BC             scann:
3309   16BC F8 00 00      enter 0 ; (push bp; mov bp, sp)
3310   16BF             ; int m; 
3311   16BF 52 02 00      sub sp, 2
3312   16C2             ; --- BEGIN INLINE ASM SEGMENT
3313   16C2 F8 08 00      enter 8
3314   16C5 E2            push si
3315   16C6 D8            push b
3316   16C7 D9            push c
3317   16C8 DA            push d
3318   16C9 FA F9 FF      lea d, [bp +- 7]
3319   16CC 07 18 17      call _gets_scann
3320   16CF 07 08 17      call _strlen_scann      ; get string length in C
3321   16D2 7E            dec c
3322   16D3 FD 4E         mov si, d
3323   16D5 12            mov a, c
3324   16D6 FD 99         shl a
3325   16D8 3B B7 17      mov d, table_power_scann
3326   16DB 59            add d, a
3327   16DC 38 00 00      mov c, 0
3328   16DF             mul_loop_scann:
3329   16DF F6            lodsb      ; load ASCII to al
3330   16E0 B9 00         cmp al, 0
3331   16E2 C6 F5 16      je mul_exit_scann
3332   16E5 6F 30         sub al, $30    ; make into integer
3333   16E7 22 00         mov ah, 0
3334   16E9 2A            mov b, [d]
3335   16EA AC            mul a, b      ; result in B since it fits in 16bits
3336   16EB 11            mov a, b
3337   16EC 28            mov b, c
3338   16ED 54            add a, b
3339   16EE 39            mov c, a
3340   16EF 63 02 00      sub d, 2
3341   16F2 0A DF 16      jmp mul_loop_scann
3342   16F5             mul_exit_scann:
3343   16F5 12            mov a, c
3344   16F6 E7            pop d
3345   16F7 E6            pop c
3346   16F8 E5            pop b
3347   16F9 EF            pop si
3348   16FA F9            leave
3349   16FB FA FF FF      lea d, [bp + -1] ; $m
3350   16FE 43            mov [d], a
3351   16FF             ; --- END INLINE ASM SEGMENT
3352   16FF             ; return m; 
3353   16FF                             
3354   16FF FA FF FF      lea d, [bp + -1] ; $m
3355   1702 2A            mov b, [d]
3356   1703 38 00 00      mov c, 0
3357   1706 F9            leave
3358   1707 09            ret
3359   1708             ; --- BEGIN INLINE ASM SEGMENT
3360   1708             _strlen_scann:
3361   1708 DA            push d
3362   1709 38 00 00      mov c, 0
3363   170C             _strlen_L1_scann:
3364   170C BD 00         cmp byte [d], 0
3365   170E C6 16 17      je _strlen_ret_scann
3366   1711 79            inc d
3367   1712 78            inc c
3368   1713 0A 0C 17      jmp _strlen_L1_scann
3369   1716             _strlen_ret_scann:
3370   1716 E7            pop d
3371   1717 09            ret
3372   1718             _gets_scann:
3373   1718 D7            push a
3374   1719 DA            push d
3375   171A             _gets_loop_scann:
3376   171A 19 01         mov al, 1
3377   171C 05 03         syscall sys_io      ; receive in AH
3378   171E B9 00         cmp al, 0        ; check error code (AL)
3379   1720 C6 1A 17      je _gets_loop_scann      ; if no char received, retry
3380   1723 76 1B         cmp ah, 27
3381   1725 C6 46 17      je _gets_ansi_esc_scann
3382   1728 76 0A         cmp ah, $0A        ; LF
3383   172A C6 B1 17      je _gets_end_scann
3384   172D 76 0D         cmp ah, $0D        ; CR
3385   172F C6 B1 17      je _gets_end_scann
3386   1732 76 5C         cmp ah, $5C        ; '\\'
3387   1734 C6 72 17      je _gets_escape_scann
3388   1737 76 08         cmp ah, $08      ; check for backspace
3389   1739 C6 42 17      je _gets_backspace_scann
3390   173C 1A            mov al, ah
3391   173D 3E            mov [d], al
3392   173E 79            inc d
3393   173F 0A 1A 17      jmp _gets_loop_scann
3394   1742             _gets_backspace_scann:
3395   1742 7F            dec d
3396   1743 0A 1A 17      jmp _gets_loop_scann
3397   1746             _gets_ansi_esc_scann:
3398   1746 19 01         mov al, 1
3399   1748 05 03         syscall sys_io        ; receive in AH without echo
3400   174A B9 00         cmp al, 0          ; check error code (AL)
3401   174C C6 46 17      je _gets_ansi_esc_scann    ; if no char received, retry
3402   174F 76 5B         cmp ah, '['
3403   1751 C7 1A 17      jne _gets_loop_scann
3404   1754             _gets_ansi_esc_2_scann:
3405   1754 19 01         mov al, 1
3406   1756 05 03         syscall sys_io          ; receive in AH without echo
3407   1758 B9 00         cmp al, 0            ; check error code (AL)
3408   175A C6 54 17      je _gets_ansi_esc_2_scann  ; if no char received, retry
3409   175D 76 44         cmp ah, 'D'
3410   175F C6 6A 17      je _gets_left_arrow_scann
3411   1762 76 43         cmp ah, 'C'
3412   1764 C6 6E 17      je _gets_right_arrow_scann
3413   1767 0A 1A 17      jmp _gets_loop_scann
3414   176A             _gets_left_arrow_scann:
3415   176A 7F            dec d
3416   176B 0A 1A 17      jmp _gets_loop_scann
3417   176E             _gets_right_arrow_scann:
3418   176E 79            inc d
3419   176F 0A 1A 17      jmp _gets_loop_scann
3420   1772             _gets_escape_scann:
3421   1772 19 01         mov al, 1
3422   1774 05 03         syscall sys_io      ; receive in AH
3423   1776 B9 00         cmp al, 0        ; check error code (AL)
3424   1778 C6 72 17      je _gets_escape_scann      ; if no char received, retry
3425   177B 76 6E         cmp ah, 'n'
3426   177D C6 9C 17      je _gets_LF_scann
3427   1780 76 72         cmp ah, 'r'
3428   1782 C6 A3 17      je _gets_CR_scann
3429   1785 76 30         cmp ah, '0'
3430   1787 C6 AA 17      je _gets_NULL_scann
3431   178A 76 5C         cmp ah, $5C  
3432   178C C6 95 17      je _gets_slash_scann
3433   178F 1A            mov al, ah        ; if not a known escape, it is just a normal letter
3434   1790 3E            mov [d], al
3435   1791 79            inc d
3436   1792 0A 1A 17      jmp _gets_loop_scann
3437   1795             _gets_slash_scann:
3438   1795 19 5C         mov al, $5C
3439   1797 3E            mov [d], al
3440   1798 79            inc d
3441   1799 0A 1A 17      jmp _gets_loop_scann
3442   179C             _gets_LF_scann:
3443   179C 19 0A         mov al, $0A
3444   179E 3E            mov [d], al
3445   179F 79            inc d
3446   17A0 0A 1A 17      jmp _gets_loop_scann
3447   17A3             _gets_CR_scann:
3448   17A3 19 0D         mov al, $0D
3449   17A5 3E            mov [d], al
3450   17A6 79            inc d
3451   17A7 0A 1A 17      jmp _gets_loop_scann
3452   17AA             _gets_NULL_scann:
3453   17AA 19 00         mov al, $00
3454   17AC 3E            mov [d], al
3455   17AD 79            inc d
3456   17AE 0A 1A 17      jmp _gets_loop_scann
3457   17B1             _gets_end_scann:
3458   17B1 19 00         mov al, 0
3459   17B3 3E            mov [d], al        ; terminate string
3460   17B4 E7            pop d
3461   17B5 E4            pop a
3462   17B6 09            ret
3463   17B7             table_power_scann:
3464   17B7 01 00       .dw 1
3465   17B9 0A 00       .dw 10
3466   17BB 64 00       .dw 100
3467   17BD E8 03       .dw 1000
3468   17BF 10 27       .dw 10000
3469   17C1             ; --- END INLINE ASM SEGMENT
3470   17C1 F9            leave
3471   17C2 09            ret
3472   17C3             
3473   17C3             exit:
3474   17C3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3475   17C6             ; --- BEGIN INLINE ASM SEGMENT
3476   17C6 05 0B         syscall sys_terminate_proc
3477   17C8             ; --- END INLINE ASM SEGMENT
3478   17C8 F9            leave
3479   17C9 09            ret
3480   17CA             ; --- END TEXT SEGMENT
3481   17CA             
3482   17CA             ; --- BEGIN DATA SEGMENT
3483   17CA 00 00       _arrows: .fill 2, 0
3484   17CC 00 00       _debug: .dw $0000
3485   17CE 1D 00       _rand_val: .dw $001d
3486   17D0 01 00       _rand_inc: .dw $0001
3487   17D2 00 00 00 00 _loc_data: .fill 12, 0
3487   17D6 00 00 00 00 
3487   17DA 00 00 00 00 
3488   17DE 00 00       _finished: .fill 2, 0
3489   17E0             _cave_data: 
3490   17E0 00 00       .dw 
3491   17E2 00 00       .dw 
3492   17E4 01 00 04 00 .dw $0001,$0004,$0007,$0000,$0002,$0009,$0001,$0003,$000b,$0002,$0004,$000d,$0000,$0003,$0005,$0004,$0006,$000e,$0005,$0007,$0010,$0000,$0006,$0008,$0007,$0009,$0011,$0001,$0008,$000a,
3492   17E8 07 00 00 00 
3492   17EC 02 00 09 00 
3492   17F0 01 00 03 00 
3492   17F4 0B 00 02 00 
3492   17F8 04 00 0D 00 
3492   17FC 00 00 03 00 
3492   1800 05 00 04 00 
3492   1804 06 00 0E 00 
3492   1808 05 00 07 00 
3492   180C 10 00 00 00 
3492   1810 06 00 08 00 
3492   1814 07 00 09 00 
3492   1818 11 00 01 00 
3492   181C 08 00 0A 00 
3493   1820 00 00       .dw 
3494   1822 00 00       .dw 
3495   1824 09 00 0B 00 .dw $0009,$000b,$0012,$0002,$000a,$000c,$000b,$000d,$0013,$0003,$000c,$000e,$0005,$000d,$000f,$000e,$0010,$0013,$0006,$000f,$0011,$0008,$0010,$0012,$000a,$0011,$0013,$000c,$000f,$0012,
3495   1828 12 00 02 00 
3495   182C 0A 00 0C 00 
3495   1830 0B 00 0D 00 
3495   1834 13 00 03 00 
3495   1838 0C 00 0E 00 
3495   183C 05 00 0D 00 
3495   1840 0F 00 0E 00 
3495   1844 10 00 13 00 
3495   1848 06 00 0F 00 
3495   184C 11 00 08 00 
3495   1850 10 00 12 00 
3495   1854 0A 00 11 00 
3495   1858 13 00 0C 00 
3495   185C 0F 00 12 00 
3496   1860 00 00       .dw 
3497   1862 00 00       .dw 
3498   1864 49 4E 53 54 _s0: .db "INSTRUCTIONS (Y-N): ", 0
3498   1868 52 55 43 54 
3498   186C 49 4F 4E 53 
3498   1870 20 28 59 2D 
3498   1874 4E 29 3A 20 
3498   1878 00 
3499   1879 4E 45 57 20 _s1: .db "NEW GAME (Y-N): ", 0
3499   187D 47 41 4D 45 
3499   1881 20 28 59 2D 
3499   1885 4E 29 3A 20 
3499   1889 00 
3500   188A 57 65 6C 63 _s2: .db "Welcome to 'hunt the wumpus'\n", 0
3500   188E 6F 6D 65 20 
3500   1892 74 6F 20 27 
3500   1896 68 75 6E 74 
3500   189A 20 74 68 65 
3500   189E 20 77 75 6D 
3500   18A2 70 75 73 27 
3500   18A6 0A 00 
3501   18A8 54 68 65 20 _s3: .db "The wumpus lives in a cave of 20 rooms. Each room\n", 0
3501   18AC 77 75 6D 70 
3501   18B0 75 73 20 6C 
3501   18B4 69 76 65 73 
3501   18B8 20 69 6E 20 
3501   18BC 61 20 63 61 
3501   18C0 76 65 20 6F 
3501   18C4 66 20 32 30 
3501   18C8 20 72 6F 6F 
3501   18CC 6D 73 2E 20 
3501   18D0 45 61 63 68 
3501   18D4 20 72 6F 6F 
3501   18D8 6D 0A 00 
3502   18DB 68 61 73 20 _s4: .db "has 3 tunnels leading to other rooms.\n", 0
3502   18DF 33 20 74 75 
3502   18E3 6E 6E 65 6C 
3502   18E7 73 20 6C 65 
3502   18EB 61 64 69 6E 
3502   18EF 67 20 74 6F 
3502   18F3 20 6F 74 68 
3502   18F7 65 72 20 72 
3502   18FB 6F 6F 6D 73 
3502   18FF 2E 0A 00 
3503   1902 4C 6F 6F 6B _s5: .db "Look at a dodecahedron to see how this works.\n", 0
3503   1906 20 61 74 20 
3503   190A 61 20 64 6F 
3503   190E 64 65 63 61 
3503   1912 68 65 64 72 
3503   1916 6F 6E 20 74 
3503   191A 6F 20 73 65 
3503   191E 65 20 68 6F 
3503   1922 77 20 74 68 
3503   1926 69 73 20 77 
3503   192A 6F 72 6B 73 
3503   192E 2E 0A 00 
3504   1931 0A 00       _s6: .db "\n", 0
3505   1933 20 48 61 7A _s7: .db " Hazards:\n", 0
3505   1937 61 72 64 73 
3505   193B 3A 0A 00 
3506   193E 20 42 6F 74 _s8: .db " Bottomless pits: Two rooms have bottomless pits in them\n", 0
3506   1942 74 6F 6D 6C 
3506   1946 65 73 73 20 
3506   194A 70 69 74 73 
3506   194E 3A 20 54 77 
3506   1952 6F 20 72 6F 
3506   1956 6F 6D 73 20 
3506   195A 68 61 76 65 
3506   195E 20 62 6F 74 
3506   1962 74 6F 6D 6C 
3506   1966 65 73 73 20 
3506   196A 70 69 74 73 
3506   196E 20 69 6E 20 
3506   1972 74 68 65 6D 
3506   1976 0A 00 
3507   1978 20 49 66 20 _s9: .db " If you go there, you fall into the pit (& lose!)\n", 0
3507   197C 79 6F 75 20 
3507   1980 67 6F 20 74 
3507   1984 68 65 72 65 
3507   1988 2C 20 79 6F 
3507   198C 75 20 66 61 
3507   1990 6C 6C 20 69 
3507   1994 6E 74 6F 20 
3507   1998 74 68 65 20 
3507   199C 70 69 74 20 
3507   19A0 28 26 20 6C 
3507   19A4 6F 73 65 21 
3507   19A8 29 0A 00 
3508   19AB 20 53 55 50 _s10: .db " SUPER BATS     : TWO OTHER ROOMS HAVE SUPER BATS. IF YOU\n", 0
3508   19AF 45 52 20 42 
3508   19B3 41 54 53 20 
3508   19B7 20 20 20 20 
3508   19BB 3A 20 54 57 
3508   19BF 4F 20 4F 54 
3508   19C3 48 45 52 20 
3508   19C7 52 4F 4F 4D 
3508   19CB 53 20 48 41 
3508   19CF 56 45 20 53 
3508   19D3 55 50 45 52 
3508   19D7 20 42 41 54 
3508   19DB 53 2E 20 49 
3508   19DF 46 20 59 4F 
3508   19E3 55 0A 00 
3509   19E6 20 47 4F 20 _s11: .db " GO THERE, A BAT GRABS YOU AND TAKES YOU TO SOME OTHER\n", 0
3509   19EA 54 48 45 52 
3509   19EE 45 2C 20 41 
3509   19F2 20 42 41 54 
3509   19F6 20 47 52 41 
3509   19FA 42 53 20 59 
3509   19FE 4F 55 20 41 
3509   1A02 4E 44 20 54 
3509   1A06 41 4B 45 53 
3509   1A0A 20 59 4F 55 
3509   1A0E 20 54 4F 20 
3509   1A12 53 4F 4D 45 
3509   1A16 20 4F 54 48 
3509   1A1A 45 52 0A 00 
3510   1A1E 20 52 4F 4F _s12: .db " ROOM AT RANDOM. (WHICH MAY BE TROUBLESOME)\n\n", 0
3510   1A22 4D 20 41 54 
3510   1A26 20 52 41 4E 
3510   1A2A 44 4F 4D 2E 
3510   1A2E 20 28 57 48 
3510   1A32 49 43 48 20 
3510   1A36 4D 41 59 20 
3510   1A3A 42 45 20 54 
3510   1A3E 52 4F 55 42 
3510   1A42 4C 45 53 4F 
3510   1A46 4D 45 29 0A 
3510   1A4A 0A 00 
3511   1A4C 20 57 55 4D _s13: .db " WUMPUS:\n", 0
3511   1A50 50 55 53 3A 
3511   1A54 0A 00 
3512   1A56 20 54 48 45 _s14: .db " THE WUMPUS IS NOT BOTHERED BY HAZARDS (HE HAS SUCKER\n", 0
3512   1A5A 20 57 55 4D 
3512   1A5E 50 55 53 20 
3512   1A62 49 53 20 4E 
3512   1A66 4F 54 20 42 
3512   1A6A 4F 54 48 45 
3512   1A6E 52 45 44 20 
3512   1A72 42 59 20 48 
3512   1A76 41 5A 41 52 
3512   1A7A 44 53 20 28 
3512   1A7E 48 45 20 48 
3512   1A82 41 53 20 53 
3512   1A86 55 43 4B 45 
3512   1A8A 52 0A 00 
3513   1A8D 20 46 45 45 _s15: .db " FEET AND IS TOO BIG FOR A BAT TO LIFT).  USUALLY\n", 0
3513   1A91 54 20 41 4E 
3513   1A95 44 20 49 53 
3513   1A99 20 54 4F 4F 
3513   1A9D 20 42 49 47 
3513   1AA1 20 46 4F 52 
3513   1AA5 20 41 20 42 
3513   1AA9 41 54 20 54 
3513   1AAD 4F 20 4C 49 
3513   1AB1 46 54 29 2E 
3513   1AB5 20 20 55 53 
3513   1AB9 55 41 4C 4C 
3513   1ABD 59 0A 00 
3514   1AC0 20 48 45 20 _s16: .db " HE IS ASLEEP.  TWO THINGS WAKE HIM UP: YOU SHOOTING AN\n", 0
3514   1AC4 49 53 20 41 
3514   1AC8 53 4C 45 45 
3514   1ACC 50 2E 20 20 
3514   1AD0 54 57 4F 20 
3514   1AD4 54 48 49 4E 
3514   1AD8 47 53 20 57 
3514   1ADC 41 4B 45 20 
3514   1AE0 48 49 4D 20 
3514   1AE4 55 50 3A 20 
3514   1AE8 59 4F 55 20 
3514   1AEC 53 48 4F 4F 
3514   1AF0 54 49 4E 47 
3514   1AF4 20 41 4E 0A 
3514   1AF8 00 
3515   1AF9 20 41 52 52 _s17: .db " ARROW OR YOU ENTERING HIS ROOM.\n", 0
3515   1AFD 4F 57 20 4F 
3515   1B01 52 20 59 4F 
3515   1B05 55 20 45 4E 
3515   1B09 54 45 52 49 
3515   1B0D 4E 47 20 48 
3515   1B11 49 53 20 52 
3515   1B15 4F 4F 4D 2E 
3515   1B19 0A 00 
3516   1B1B 20 49 46 20 _s18: .db " IF THE WUMPUS WAKES HE MOVES (P=.75) ONE ROOM\n", 0
3516   1B1F 54 48 45 20 
3516   1B23 57 55 4D 50 
3516   1B27 55 53 20 57 
3516   1B2B 41 4B 45 53 
3516   1B2F 20 48 45 20 
3516   1B33 4D 4F 56 45 
3516   1B37 53 20 28 50 
3516   1B3B 3D 2E 37 35 
3516   1B3F 29 20 4F 4E 
3516   1B43 45 20 52 4F 
3516   1B47 4F 4D 0A 00 
3517   1B4B 20 4F 52 20 _s19: .db " OR STAYS STILL (P=.25).  AFTER THAT, IF HE IS WHERE YOU\n", 0
3517   1B4F 53 54 41 59 
3517   1B53 53 20 53 54 
3517   1B57 49 4C 4C 20 
3517   1B5B 28 50 3D 2E 
3517   1B5F 32 35 29 2E 
3517   1B63 20 20 41 46 
3517   1B67 54 45 52 20 
3517   1B6B 54 48 41 54 
3517   1B6F 2C 20 49 46 
3517   1B73 20 48 45 20 
3517   1B77 49 53 20 57 
3517   1B7B 48 45 52 45 
3517   1B7F 20 59 4F 55 
3517   1B83 0A 00 
3518   1B85 20 41 52 45 _s20: .db " ARE, HE EATS YOU UP AND YOU LOSE!\n", 0
3518   1B89 2C 20 48 45 
3518   1B8D 20 45 41 54 
3518   1B91 53 20 59 4F 
3518   1B95 55 20 55 50 
3518   1B99 20 41 4E 44 
3518   1B9D 20 59 4F 55 
3518   1BA1 20 4C 4F 53 
3518   1BA5 45 21 0A 00 
3519   1BA9 20 59 4F 55 _s21: .db " YOU:\n", 0
3519   1BAD 3A 0A 00 
3520   1BB0 20 45 41 43 _s22: .db " EACH TURN YOU MAY MOVE OR SHOOT A CROOKED ARROW\n", 0
3520   1BB4 48 20 54 55 
3520   1BB8 52 4E 20 59 
3520   1BBC 4F 55 20 4D 
3520   1BC0 41 59 20 4D 
3520   1BC4 4F 56 45 20 
3520   1BC8 4F 52 20 53 
3520   1BCC 48 4F 4F 54 
3520   1BD0 20 41 20 43 
3520   1BD4 52 4F 4F 4B 
3520   1BD8 45 44 20 41 
3520   1BDC 52 52 4F 57 
3520   1BE0 0A 00 
3521   1BE2 20 4D 4F 56 _s23: .db " MOVING:  YOU CAN MOVE ONE ROOM (THRU ONE TUNNEL)\n", 0
3521   1BE6 49 4E 47 3A 
3521   1BEA 20 20 59 4F 
3521   1BEE 55 20 43 41 
3521   1BF2 4E 20 4D 4F 
3521   1BF6 56 45 20 4F 
3521   1BFA 4E 45 20 52 
3521   1BFE 4F 4F 4D 20 
3521   1C02 28 54 48 52 
3521   1C06 55 20 4F 4E 
3521   1C0A 45 20 54 55 
3521   1C0E 4E 4E 45 4C 
3521   1C12 29 0A 00 
3522   1C15 20 41 52 52 _s24: .db " ARROWS:  YOU HAVE 5 ARROWS.  YOU LOSE WHEN YOU RUN OUT\n", 0
3522   1C19 4F 57 53 3A 
3522   1C1D 20 20 59 4F 
3522   1C21 55 20 48 41 
3522   1C25 56 45 20 35 
3522   1C29 20 41 52 52 
3522   1C2D 4F 57 53 2E 
3522   1C31 20 20 59 4F 
3522   1C35 55 20 4C 4F 
3522   1C39 53 45 20 57 
3522   1C3D 48 45 4E 20 
3522   1C41 59 4F 55 20 
3522   1C45 52 55 4E 20 
3522   1C49 4F 55 54 0A 
3522   1C4D 00 
3523   1C4E 20 45 41 43 _s25: .db " EACH ARROW CAN GO FROM 1 TO 5 ROOMS. YOU AIM BY TELLING\n", 0
3523   1C52 48 20 41 52 
3523   1C56 52 4F 57 20 
3523   1C5A 43 41 4E 20 
3523   1C5E 47 4F 20 46 
3523   1C62 52 4F 4D 20 
3523   1C66 31 20 54 4F 
3523   1C6A 20 35 20 52 
3523   1C6E 4F 4F 4D 53 
3523   1C72 2E 20 59 4F 
3523   1C76 55 20 41 49 
3523   1C7A 4D 20 42 59 
3523   1C7E 20 54 45 4C 
3523   1C82 4C 49 4E 47 
3523   1C86 0A 00 
3524   1C88 20 20 20 54 _s26: .db "   THE COMPUTER THE ROOM#S YOU WANT THE ARROW TO GO TO.\n", 0
3524   1C8C 48 45 20 43 
3524   1C90 4F 4D 50 55 
3524   1C94 54 45 52 20 
3524   1C98 54 48 45 20 
3524   1C9C 52 4F 4F 4D 
3524   1CA0 23 53 20 59 
3524   1CA4 4F 55 20 57 
3524   1CA8 41 4E 54 20 
3524   1CAC 54 48 45 20 
3524   1CB0 41 52 52 4F 
3524   1CB4 57 20 54 4F 
3524   1CB8 20 47 4F 20 
3524   1CBC 54 4F 2E 0A 
3524   1CC0 00 
3525   1CC1 20 20 20 49 _s27: .db "   IF THE ARROW CAN'T GO THAT WAY (IF NO TUNNEL) IT MOVES\n", 0
3525   1CC5 46 20 54 48 
3525   1CC9 45 20 41 52 
3525   1CCD 52 4F 57 20 
3525   1CD1 43 41 4E 27 
3525   1CD5 54 20 47 4F 
3525   1CD9 20 54 48 41 
3525   1CDD 54 20 57 41 
3525   1CE1 59 20 28 49 
3525   1CE5 46 20 4E 4F 
3525   1CE9 20 54 55 4E 
3525   1CED 4E 45 4C 29 
3525   1CF1 20 49 54 20 
3525   1CF5 4D 4F 56 45 
3525   1CF9 53 0A 
3526   1CFB 20 20 20 41 _s28: .db "   AT RANDOM TO THE NEXT ROOM.\n", 0
3526   1CFF 54 20 52 41 
3526   1D03 4E 44 4F 4D 
3526   1D07 20 54 4F 20 
3526   1D0B 54 48 45 20 
3526   1D0F 4E 45 58 54 
3526   1D13 20 52 4F 4F 
3526   1D17 4D 2E 0A 00 
3527   1D1B 20 20 20 20 _s29: .db "     IF THE ARROW HITS THE WUMPUS, YOU WIN.\n", 0
3527   1D1F 20 49 46 20 
3527   1D23 54 48 45 20 
3527   1D27 41 52 52 4F 
3527   1D2B 57 20 48 49 
3527   1D2F 54 53 20 54 
3527   1D33 48 45 20 57 
3527   1D37 55 4D 50 55 
3527   1D3B 53 2C 20 59 
3527   1D3F 4F 55 20 57 
3527   1D43 49 4E 2E 0A 
3527   1D47 00 
3528   1D48 20 20 20 20 _s30: .db "     IF THE ARROW HITS YOU, YOU LOSE.\n", 0
3528   1D4C 20 49 46 20 
3528   1D50 54 48 45 20 
3528   1D54 41 52 52 4F 
3528   1D58 57 20 48 49 
3528   1D5C 54 53 20 59 
3528   1D60 4F 55 2C 20 
3528   1D64 59 4F 55 20 
3528   1D68 4C 4F 53 45 
3528   1D6C 2E 0A 00 
3529   1D6F 20 57 41 52 _s31: .db " WARNINGS:\n", 0
3529   1D73 4E 49 4E 47 
3529   1D77 53 3A 0A 00 
3530   1D7B 20 57 48 45 _s32: .db " WHEN YOU ARE ONE ROOM AWAY FROM A WUMPUS OR HAZARD,\n", 0
3530   1D7F 4E 20 59 4F 
3530   1D83 55 20 41 52 
3530   1D87 45 20 4F 4E 
3530   1D8B 45 20 52 4F 
3530   1D8F 4F 4D 20 41 
3530   1D93 57 41 59 20 
3530   1D97 46 52 4F 4D 
3530   1D9B 20 41 20 57 
3530   1D9F 55 4D 50 55 
3530   1DA3 53 20 4F 52 
3530   1DA7 20 48 41 5A 
3530   1DAB 41 52 44 2C 
3530   1DAF 0A 00 
3531   1DB1 20 54 48 45 _s33: .db " THE COMPUTER SAYS:\n", 0
3531   1DB5 20 43 4F 4D 
3531   1DB9 50 55 54 45 
3531   1DBD 52 20 53 41 
3531   1DC1 59 53 3A 0A 
3531   1DC5 00 
3532   1DC6 20 57 55 4D _s34: .db " WUMPUS:  'I SMELL A WUMPUS'\n", 0
3532   1DCA 50 55 53 3A 
3532   1DCE 20 20 27 49 
3532   1DD2 20 53 4D 45 
3532   1DD6 4C 4C 20 41 
3532   1DDA 20 57 55 4D 
3532   1DDE 50 55 53 27 
3532   1DE2 0A 00 
3533   1DE4 20 42 41 54 _s35: .db " BAT   :  'BATS NEARBY'\n", 0
3533   1DE8 20 20 20 3A 
3533   1DEC 20 20 27 42 
3533   1DF0 41 54 53 20 
3533   1DF4 4E 45 41 52 
3533   1DF8 42 59 27 0A 
3533   1DFC 00 
3534   1DFD 20 50 49 54 _s36: .db " PIT   :  'I FEEL A DRAFT'\n", 0
3534   1E01 20 20 20 3A 
3534   1E05 20 20 27 49 
3534   1E09 20 46 45 45 
3534   1E0D 4C 20 41 20 
3534   1E11 44 52 41 46 
3534   1E15 54 27 0A 00 
3535   1E19 49 20 53 4D _s37: .db "I SMELL A WUMPUS!\n", 0
3535   1E1D 45 4C 4C 20 
3535   1E21 41 20 57 55 
3535   1E25 4D 50 55 53 
3535   1E29 21 0A 00 
3536   1E2C 49 20 46 45 _s38: .db "I FEEL A DRAFT\n", 0
3536   1E30 45 4C 20 41 
3536   1E34 20 44 52 41 
3536   1E38 46 54 0A 00 
3537   1E3C 42 41 54 53 _s39: .db "BATS NEARBY!\n", 0
3537   1E40 20 4E 45 41 
3537   1E44 52 42 59 21 
3537   1E48 0A 00 
3538   1E4A 59 4F 55 20 _s40: .db "YOU ARE IN ROOM ", 0
3538   1E4E 41 52 45 20 
3538   1E52 49 4E 20 52 
3538   1E56 4F 4F 4D 20 
3538   1E5A 00 
3539   1E5B 54 55 4E 4E _s41: .db "TUNNELS LEAD TO ", 0
3539   1E5F 45 4C 53 20 
3539   1E63 4C 45 41 44 
3539   1E67 20 54 4F 20 
3539   1E6B 00 
3540   1E6C 2C 20 00    _s42: .db ", ", 0
3541   1E6F 0A 0A 00    _s43: .db "\n\n", 0
3542   1E72 53 48 4F 4F _s44: .db "SHOOT OR MOVE (S-M): ", 0
3542   1E76 54 20 4F 52 
3542   1E7A 20 4D 4F 56 
3542   1E7E 45 20 28 53 
3542   1E82 2D 4D 29 3A 
3542   1E86 20 00 
3543   1E88 54 53 4B 20 _s45: .db "TSK TSK TSK - WUMPUS GOT YOU!\n", 0
3543   1E8C 54 53 4B 20 
3543   1E90 54 53 4B 20 
3543   1E94 2D 20 57 55 
3543   1E98 4D 50 55 53 
3543   1E9C 20 47 4F 54 
3543   1EA0 20 59 4F 55 
3543   1EA4 21 0A 00 
3544   1EA7 0A 4E 55 4D _s46: .db "\nNUMBER OF ROOMS (1-5): ", 0
3544   1EAB 42 45 52 20 
3544   1EAF 4F 46 20 52 
3544   1EB3 4F 4F 4D 53 
3544   1EB7 20 28 31 2D 
3544   1EBB 35 29 3A 20 
3544   1EBF 00 
3545   1EC0 52 4F 4F 4D _s47: .db "ROOM #", 0
3545   1EC4 20 23 00 
3546   1EC7 41 52 52 4F _s48: .db "ARROWS AREN'T THAT CROOKED - TRY ANOTHER ROOM\n", 0
3546   1ECB 57 53 20 41 
3546   1ECF 52 45 4E 27 
3546   1ED3 54 20 54 48 
3546   1ED7 41 54 20 43 
3546   1EDB 52 4F 4F 4B 
3546   1EDF 45 44 20 2D 
3546   1EE3 20 54 52 59 
3546   1EE7 20 41 4E 4F 
3546   1EEB 54 48 45 52 
3546   1EEF 20 52 4F 4F 
3546   1EF3 4D 0A 
3547   1EF5 41 48 41 21 _s49: .db "AHA! YOU GOT THE WUMPUS!\n", 0
3547   1EF9 20 59 4F 55 
3547   1EFD 20 47 4F 54 
3547   1F01 20 54 48 45 
3547   1F05 20 57 55 4D 
3547   1F09 50 55 53 21 
3547   1F0D 0A 00 
3548   1F0F 4F 55 43 48 _s50: .db "OUCH! ARROW GOT YOU!\n", 0
3548   1F13 21 20 41 52 
3548   1F17 52 4F 57 20 
3548   1F1B 47 4F 54 20 
3548   1F1F 59 4F 55 21 
3548   1F23 0A 00 
3549   1F25 4D 49 53 53 _s51: .db "MISSED\n", 0
3549   1F29 45 44 0A 00 
3550   1F2D 0A 57 48 45 _s52: .db "\nWHERE TO: ", 0
3550   1F31 52 45 20 54 
3550   1F35 4F 3A 20 00 
3551   1F39 4E 4F 54 20 _s53: .db "NOT POSSIBLE\n", 0
3551   1F3D 50 4F 53 53 
3551   1F41 49 42 4C 45 
3551   1F45 0A 00 
3552   1F47 5A 41 50 2D _s54: .db "ZAP--SUPER BAT SNATCH! ELSEWHEREVILLE FOR YOU!\n", 0
3552   1F4B 2D 53 55 50 
3552   1F4F 45 52 20 42 
3552   1F53 41 54 20 53 
3552   1F57 4E 41 54 43 
3552   1F5B 48 21 20 45 
3552   1F5F 4C 53 45 57 
3552   1F63 48 45 52 45 
3552   1F67 56 49 4C 4C 
3552   1F6B 45 20 46 4F 
3552   1F6F 52 20 59 4F 
3552   1F73 55 21 0A 00 
3553   1F77 2E 2E 2E 20 _s55: .db "... OOPS! BUMPED A WUMPUS!\n", 0
3553   1F7B 4F 4F 50 53 
3553   1F7F 21 20 42 55 
3553   1F83 4D 50 45 44 
3553   1F87 20 41 20 57 
3553   1F8B 55 4D 50 55 
3553   1F8F 53 21 0A 00 
3554   1F93 59 59 59 59 _s56: .db "YYYYIIIIEEEE . . . FELL IN PIT\n", 0
3554   1F97 49 49 49 49 
3554   1F9B 45 45 45 45 
3554   1F9F 20 2E 20 2E 
3554   1FA3 20 2E 20 46 
3554   1FA7 45 4C 4C 20 
3554   1FAB 49 4E 20 50 
3554   1FAF 49 54 0A 00 
3555   1FB3 48 55 4E 54 _s57: .db "HUNT THE WUMPUS\n", 0
3555   1FB7 20 54 48 45 
3555   1FBB 20 57 55 4D 
3555   1FBF 50 55 53 0A 
3555   1FC3 00 
3556   1FC4 57 75 6D 70 _s58: .db "Wumpus is at ", 0
3556   1FC8 75 73 20 69 
3556   1FCC 73 20 61 74 
3556   1FD0 20 00 
3557   1FD2 2C 20 70 69 _s59: .db ", pits at ", 0
3557   1FD6 74 73 20 61 
3557   1FDA 74 20 00 
3558   1FDD 20 26 20 00 _s60: .db " & ", 0
3559   1FE1 2C 20 62 61 _s61: .db ", bats at ", 0
3559   1FE5 74 73 20 61 
3559   1FE9 74 20 00 
3560   1FEC 48 45 45 20 _s62: .db "HEE HEE HEE - THE WUMPUS'LL GET YOU NEXT TIME!!\n", 0
3560   1FF0 48 45 45 20 
3560   1FF4 48 45 45 20 
3560   1FF8 2D 20 54 48 
3560   1FFC 45 20 57 55 
3560   2000 4D 50 55 53 
3560   2004 27 4C 4C 20 
3560   2008 47 45 54 20 
3560   200C 59 4F 55 20 
3560   2010 4E 45 58 54 
3560   2014 20 54 49 4D 
3560   2018 45 21 21 0A 
3561   201C 48 41 20 48 _s63: .db "HA HA HA - YOU LOSE!\n", 0
3561   2020 41 20 48 41 
3561   2024 20 2D 20 59 
3561   2028 4F 55 20 4C 
3561   202C 4F 53 45 21 
3561   2030 0A 00 
3562   2032             
3563   2032 34 20       _heap_top: .dw _heap
3564   2034 00          _heap: .db 0
3565   2035             ; --- END DATA SEGMENT
3566   2035             
3567   2035             .end
tasm: Number of errors = 0
