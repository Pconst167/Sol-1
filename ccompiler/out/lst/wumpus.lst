0001   0000             ; --- FILENAME: programs/wumpus.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0000             
0005   0000             ; --- BEGIN TEXT SEGMENT
0006   0400             .org text_org
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; int c; 
0011   0408 52 02 00      sub sp, 2
0012   040B             ; c = getlet("INSTRUCTIONS (Y-N): "); 
0013   040B FA FF FF      lea d, [bp + -1] ; $c
0014   040E DA            push d
0015   040F             ; --- START FUNCTION CALL
0016   040F 26 76 18      mov b, _s0 ; "INSTRUCTIONS (Y-N): "
0017   0412 FD AB         swp b
0018   0414 D8            push b
0019   0415 07 93 04      call getlet
0020   0418 51 02 00      add sp, 2
0021   041B             ; --- END FUNCTION CALL
0022   041B E7            pop d
0023   041C FD 43         mov [d], b
0024   041E             ; if (c == 'Y') { 
0025   041E             _if1_cond:
0026   041E FA FF FF      lea d, [bp + -1] ; $c
0027   0421 2A            mov b, [d]
0028   0422 38 00 00      mov c, 0
0029   0425             ; --- START RELATIONAL
0030   0425 D7            push a
0031   0426 11            mov a, b
0032   0427 FD 2E 59 00   mov32 cb, $00000059
0032   042B 00 00 
0033   042D B0            cmp a, b
0034   042E FD 71         seq ; ==
0035   0430 E4            pop a
0036   0431             ; --- END RELATIONAL
0037   0431 C0 00 00      cmp b, 0
0038   0434 C6 3D 04      je _if1_exit
0039   0437             _if1_TRUE:
0040   0437             ; print_instructions(); 
0041   0437             ; --- START FUNCTION CALL
0042   0437 07 F0 04      call print_instructions
0043   043A 0A 3D 04      jmp _if1_exit
0044   043D             _if1_exit:
0045   043D             ; do {  
0046   043D             _do2_block:
0047   043D             ; game_setup(); 
0048   043D             ; --- START FUNCTION CALL
0049   043D 07 9F 11      call game_setup
0050   0440             ; game_play(); 
0051   0440             ; --- START FUNCTION CALL
0052   0440 07 08 13      call game_play
0053   0443             ; } while (getlet("NEW GAME (Y-N): ") != 'N'); 
0054   0443             _do2_cond:
0055   0443             ; --- START FUNCTION CALL
0056   0443 26 8B 18      mov b, _s1 ; "NEW GAME (Y-N): "
0057   0446 FD AB         swp b
0058   0448 D8            push b
0059   0449 07 93 04      call getlet
0060   044C 51 02 00      add sp, 2
0061   044F             ; --- END FUNCTION CALL
0062   044F             ; --- START RELATIONAL
0063   044F D7            push a
0064   0450 11            mov a, b
0065   0451 FD 2E 4E 00   mov32 cb, $0000004e
0065   0455 00 00 
0066   0457 B0            cmp a, b
0067   0458 FD 72         sneq ; !=
0068   045A E4            pop a
0069   045B             ; --- END RELATIONAL
0070   045B C0 01 00      cmp b, 1
0071   045E C6 3D 04      je _do2_block
0072   0461             _do2_exit:
0073   0461             ; return 0; 
0074   0461 FD 2E 00 00   mov32 cb, $00000000
0074   0465 00 00 
0075   0467 F9            leave
0076   0468 05 0B         syscall sys_terminate_proc
0077   046A             
0078   046A             getnum:
0079   046A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0080   046D             ; int n; 
0081   046D 52 02 00      sub sp, 2
0082   0470             ; print(prompt); 
0083   0470             ; --- START FUNCTION CALL
0084   0470 FA 05 00      lea d, [bp + 5] ; $prompt
0085   0473 2A            mov b, [d]
0086   0474 38 00 00      mov c, 0
0087   0477 FD AB         swp b
0088   0479 D8            push b
0089   047A 07 09 15      call print
0090   047D 51 02 00      add sp, 2
0091   0480             ; --- END FUNCTION CALL
0092   0480             ; n = scann(); 
0093   0480 FA FF FF      lea d, [bp + -1] ; $n
0094   0483 DA            push d
0095   0484             ; --- START FUNCTION CALL
0096   0484 07 C8 16      call scann
0097   0487 E7            pop d
0098   0488 FD 43         mov [d], b
0099   048A             ; return n; 
0100   048A FA FF FF      lea d, [bp + -1] ; $n
0101   048D 2A            mov b, [d]
0102   048E 38 00 00      mov c, 0
0103   0491 F9            leave
0104   0492 09            ret
0105   0493             
0106   0493             getlet:
0107   0493 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0108   0496             ; char c = '\n'; 
0109   0496 52 01 00      sub sp, 1
0110   0499             ; --- START LOCAL VAR INITIALIZATION
0111   0499 FA 00 00      lea d, [bp + 0] ; $c
0112   049C DA            push d
0113   049D FD 2E 0A 00   mov32 cb, $0000000a
0113   04A1 00 00 
0114   04A3 E7            pop d
0115   04A4 FD 3E         mov [d], bl
0116   04A6             ; --- END LOCAL VAR INITIALIZATION
0117   04A6             ; print(prompt); 
0118   04A6             ; --- START FUNCTION CALL
0119   04A6 FA 05 00      lea d, [bp + 5] ; $prompt
0120   04A9 2A            mov b, [d]
0121   04AA 38 00 00      mov c, 0
0122   04AD FD AB         swp b
0123   04AF D8            push b
0124   04B0 07 09 15      call print
0125   04B3 51 02 00      add sp, 2
0126   04B6             ; --- END FUNCTION CALL
0127   04B6             ; while (c == '\n') { 
0128   04B6             _while3_cond:
0129   04B6 FA 00 00      lea d, [bp + 0] ; $c
0130   04B9 32            mov bl, [d]
0131   04BA A7 00         mov bh, 0
0132   04BC 38 00 00      mov c, 0
0133   04BF             ; --- START RELATIONAL
0134   04BF D7            push a
0135   04C0 11            mov a, b
0136   04C1 FD 2E 0A 00   mov32 cb, $0000000a
0136   04C5 00 00 
0137   04C7 B0            cmp a, b
0138   04C8 FD 71         seq ; ==
0139   04CA E4            pop a
0140   04CB             ; --- END RELATIONAL
0141   04CB C0 00 00      cmp b, 0
0142   04CE C6 DE 04      je _while3_exit
0143   04D1             _while3_block:
0144   04D1             ; c = getchar(); 
0145   04D1 FA 00 00      lea d, [bp + 0] ; $c
0146   04D4 DA            push d
0147   04D5             ; --- START FUNCTION CALL
0148   04D5 07 22 15      call getchar
0149   04D8 E7            pop d
0150   04D9 FD 3E         mov [d], bl
0151   04DB 0A B6 04      jmp _while3_cond
0152   04DE             _while3_exit:
0153   04DE             ; return toupper(c); 
0154   04DE             ; --- START FUNCTION CALL
0155   04DE FA 00 00      lea d, [bp + 0] ; $c
0156   04E1 32            mov bl, [d]
0157   04E2 A7 00         mov bh, 0
0158   04E4 38 00 00      mov c, 0
0159   04E7 DD            push bl
0160   04E8 07 3C 15      call toupper
0161   04EB 51 01 00      add sp, 1
0162   04EE             ; --- END FUNCTION CALL
0163   04EE F9            leave
0164   04EF 09            ret
0165   04F0             
0166   04F0             print_instructions:
0167   04F0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0168   04F3             ; print("Welcome to 'hunt the wumpus'\n"); 
0169   04F3             ; --- START FUNCTION CALL
0170   04F3 26 9C 18      mov b, _s2 ; "Welcome to 'hunt the wumpus'\n"
0171   04F6 FD AB         swp b
0172   04F8 D8            push b
0173   04F9 07 09 15      call print
0174   04FC 51 02 00      add sp, 2
0175   04FF             ; --- END FUNCTION CALL
0176   04FF             ; print("The wumpus lives in a cave of 20 rooms. Each room\n"); 
0177   04FF             ; --- START FUNCTION CALL
0178   04FF 26 BA 18      mov b, _s3 ; "The wumpus lives in a cave of 20 rooms. Each room\n"
0179   0502 FD AB         swp b
0180   0504 D8            push b
0181   0505 07 09 15      call print
0182   0508 51 02 00      add sp, 2
0183   050B             ; --- END FUNCTION CALL
0184   050B             ; print("has 3 tunnels leading to other rooms.\n");  
0185   050B             ; --- START FUNCTION CALL
0186   050B 26 ED 18      mov b, _s4 ; "has 3 tunnels leading to other rooms.\n"
0187   050E FD AB         swp b
0188   0510 D8            push b
0189   0511 07 09 15      call print
0190   0514 51 02 00      add sp, 2
0191   0517             ; --- END FUNCTION CALL
0192   0517             ; print("Look at a dodecahedron to see how this works.\n"); 
0193   0517             ; --- START FUNCTION CALL
0194   0517 26 14 19      mov b, _s5 ; "Look at a dodecahedron to see how this works.\n"
0195   051A FD AB         swp b
0196   051C D8            push b
0197   051D 07 09 15      call print
0198   0520 51 02 00      add sp, 2
0199   0523             ; --- END FUNCTION CALL
0200   0523             ; print("\n"); 
0201   0523             ; --- START FUNCTION CALL
0202   0523 26 43 19      mov b, _s6 ; "\n"
0203   0526 FD AB         swp b
0204   0528 D8            push b
0205   0529 07 09 15      call print
0206   052C 51 02 00      add sp, 2
0207   052F             ; --- END FUNCTION CALL
0208   052F             ; print(" Hazards:\n"); 
0209   052F             ; --- START FUNCTION CALL
0210   052F 26 45 19      mov b, _s7 ; " Hazards:\n"
0211   0532 FD AB         swp b
0212   0534 D8            push b
0213   0535 07 09 15      call print
0214   0538 51 02 00      add sp, 2
0215   053B             ; --- END FUNCTION CALL
0216   053B             ; print(" Bottomless pits: Two rooms have bottomless pits in them\n"); 
0217   053B             ; --- START FUNCTION CALL
0218   053B 26 50 19      mov b, _s8 ; " Bottomless pits: Two rooms have bottomless pits in them\n"
0219   053E FD AB         swp b
0220   0540 D8            push b
0221   0541 07 09 15      call print
0222   0544 51 02 00      add sp, 2
0223   0547             ; --- END FUNCTION CALL
0224   0547             ; print(" If you go there, you fall into the pit (& lose!)\n"); 
0225   0547             ; --- START FUNCTION CALL
0226   0547 26 8A 19      mov b, _s9 ; " If you go there, you fall into the pit (& lose!)\n"
0227   054A FD AB         swp b
0228   054C D8            push b
0229   054D 07 09 15      call print
0230   0550 51 02 00      add sp, 2
0231   0553             ; --- END FUNCTION CALL
0232   0553             ; print(" SUPER BATS     : TWO OTHER ROOMS HAVE SUPER BATS. IF YOU\n"); 
0233   0553             ; --- START FUNCTION CALL
0234   0553 26 BD 19      mov b, _s10 ; " SUPER BATS     : TWO OTHER ROOMS HAVE SUPER BATS. IF YOU\n"
0235   0556 FD AB         swp b
0236   0558 D8            push b
0237   0559 07 09 15      call print
0238   055C 51 02 00      add sp, 2
0239   055F             ; --- END FUNCTION CALL
0240   055F             ; print(" GO THERE, A BAT GRABS YOU AND TAKES YOU TO SOME OTHER\n"); 
0241   055F             ; --- START FUNCTION CALL
0242   055F 26 F8 19      mov b, _s11 ; " GO THERE, A BAT GRABS YOU AND TAKES YOU TO SOME OTHER\n"
0243   0562 FD AB         swp b
0244   0564 D8            push b
0245   0565 07 09 15      call print
0246   0568 51 02 00      add sp, 2
0247   056B             ; --- END FUNCTION CALL
0248   056B             ; print(" ROOM AT RANDOM. (WHICH MAY BE TROUBLESOME)\n\n"); 
0249   056B             ; --- START FUNCTION CALL
0250   056B 26 30 1A      mov b, _s12 ; " ROOM AT RANDOM. (WHICH MAY BE TROUBLESOME)\n\n"
0251   056E FD AB         swp b
0252   0570 D8            push b
0253   0571 07 09 15      call print
0254   0574 51 02 00      add sp, 2
0255   0577             ; --- END FUNCTION CALL
0256   0577             ; print(" WUMPUS:\n"); 
0257   0577             ; --- START FUNCTION CALL
0258   0577 26 5E 1A      mov b, _s13 ; " WUMPUS:\n"
0259   057A FD AB         swp b
0260   057C D8            push b
0261   057D 07 09 15      call print
0262   0580 51 02 00      add sp, 2
0263   0583             ; --- END FUNCTION CALL
0264   0583             ; print(" THE WUMPUS IS NOT BOTHERED BY HAZARDS (HE HAS SUCKER\n"); 
0265   0583             ; --- START FUNCTION CALL
0266   0583 26 68 1A      mov b, _s14 ; " THE WUMPUS IS NOT BOTHERED BY HAZARDS (HE HAS SUCKER\n"
0267   0586 FD AB         swp b
0268   0588 D8            push b
0269   0589 07 09 15      call print
0270   058C 51 02 00      add sp, 2
0271   058F             ; --- END FUNCTION CALL
0272   058F             ; print(" FEET AND IS TOO BIG FOR A BAT TO LIFT).  USUALLY\n"); 
0273   058F             ; --- START FUNCTION CALL
0274   058F 26 9F 1A      mov b, _s15 ; " FEET AND IS TOO BIG FOR A BAT TO LIFT).  USUALLY\n"
0275   0592 FD AB         swp b
0276   0594 D8            push b
0277   0595 07 09 15      call print
0278   0598 51 02 00      add sp, 2
0279   059B             ; --- END FUNCTION CALL
0280   059B             ; print(" HE IS ASLEEP.  TWO THINGS WAKE HIM UP: YOU SHOOTING AN\n"); 
0281   059B             ; --- START FUNCTION CALL
0282   059B 26 D2 1A      mov b, _s16 ; " HE IS ASLEEP.  TWO THINGS WAKE HIM UP: YOU SHOOTING AN\n"
0283   059E FD AB         swp b
0284   05A0 D8            push b
0285   05A1 07 09 15      call print
0286   05A4 51 02 00      add sp, 2
0287   05A7             ; --- END FUNCTION CALL
0288   05A7             ; print(" ARROW OR YOU ENTERING HIS ROOM.\n"); 
0289   05A7             ; --- START FUNCTION CALL
0290   05A7 26 0B 1B      mov b, _s17 ; " ARROW OR YOU ENTERING HIS ROOM.\n"
0291   05AA FD AB         swp b
0292   05AC D8            push b
0293   05AD 07 09 15      call print
0294   05B0 51 02 00      add sp, 2
0295   05B3             ; --- END FUNCTION CALL
0296   05B3             ; print(" IF THE WUMPUS WAKES HE MOVES (P=.75) ONE ROOM\n"); 
0297   05B3             ; --- START FUNCTION CALL
0298   05B3 26 2D 1B      mov b, _s18 ; " IF THE WUMPUS WAKES HE MOVES (P=.75) ONE ROOM\n"
0299   05B6 FD AB         swp b
0300   05B8 D8            push b
0301   05B9 07 09 15      call print
0302   05BC 51 02 00      add sp, 2
0303   05BF             ; --- END FUNCTION CALL
0304   05BF             ; print(" OR STAYS STILL (P=.25).  AFTER THAT, IF HE IS WHERE YOU\n"); 
0305   05BF             ; --- START FUNCTION CALL
0306   05BF 26 5D 1B      mov b, _s19 ; " OR STAYS STILL (P=.25).  AFTER THAT, IF HE IS WHERE YOU\n"
0307   05C2 FD AB         swp b
0308   05C4 D8            push b
0309   05C5 07 09 15      call print
0310   05C8 51 02 00      add sp, 2
0311   05CB             ; --- END FUNCTION CALL
0312   05CB             ; print(" ARE, HE EATS YOU UP AND YOU LOSE!\n"); 
0313   05CB             ; --- START FUNCTION CALL
0314   05CB 26 97 1B      mov b, _s20 ; " ARE, HE EATS YOU UP AND YOU LOSE!\n"
0315   05CE FD AB         swp b
0316   05D0 D8            push b
0317   05D1 07 09 15      call print
0318   05D4 51 02 00      add sp, 2
0319   05D7             ; --- END FUNCTION CALL
0320   05D7             ; print("\n"); 
0321   05D7             ; --- START FUNCTION CALL
0322   05D7 26 43 19      mov b, _s6 ; "\n"
0323   05DA FD AB         swp b
0324   05DC D8            push b
0325   05DD 07 09 15      call print
0326   05E0 51 02 00      add sp, 2
0327   05E3             ; --- END FUNCTION CALL
0328   05E3             ; print(" YOU:\n"); 
0329   05E3             ; --- START FUNCTION CALL
0330   05E3 26 BB 1B      mov b, _s21 ; " YOU:\n"
0331   05E6 FD AB         swp b
0332   05E8 D8            push b
0333   05E9 07 09 15      call print
0334   05EC 51 02 00      add sp, 2
0335   05EF             ; --- END FUNCTION CALL
0336   05EF             ; print(" EACH TURN YOU MAY MOVE OR SHOOT A CROOKED ARROW\n"); 
0337   05EF             ; --- START FUNCTION CALL
0338   05EF 26 C2 1B      mov b, _s22 ; " EACH TURN YOU MAY MOVE OR SHOOT A CROOKED ARROW\n"
0339   05F2 FD AB         swp b
0340   05F4 D8            push b
0341   05F5 07 09 15      call print
0342   05F8 51 02 00      add sp, 2
0343   05FB             ; --- END FUNCTION CALL
0344   05FB             ; print(" MOVING:  YOU CAN MOVE ONE ROOM (THRU ONE TUNNEL)\n"); 
0345   05FB             ; --- START FUNCTION CALL
0346   05FB 26 F4 1B      mov b, _s23 ; " MOVING:  YOU CAN MOVE ONE ROOM (THRU ONE TUNNEL)\n"
0347   05FE FD AB         swp b
0348   0600 D8            push b
0349   0601 07 09 15      call print
0350   0604 51 02 00      add sp, 2
0351   0607             ; --- END FUNCTION CALL
0352   0607             ; print(" ARROWS:  YOU HAVE 5 ARROWS.  YOU LOSE WHEN YOU RUN OUT\n"); 
0353   0607             ; --- START FUNCTION CALL
0354   0607 26 27 1C      mov b, _s24 ; " ARROWS:  YOU HAVE 5 ARROWS.  YOU LOSE WHEN YOU RUN OUT\n"
0355   060A FD AB         swp b
0356   060C D8            push b
0357   060D 07 09 15      call print
0358   0610 51 02 00      add sp, 2
0359   0613             ; --- END FUNCTION CALL
0360   0613             ; print(" EACH ARROW CAN GO FROM 1 TO 5 ROOMS. YOU AIM BY TELLING\n"); 
0361   0613             ; --- START FUNCTION CALL
0362   0613 26 60 1C      mov b, _s25 ; " EACH ARROW CAN GO FROM 1 TO 5 ROOMS. YOU AIM BY TELLING\n"
0363   0616 FD AB         swp b
0364   0618 D8            push b
0365   0619 07 09 15      call print
0366   061C 51 02 00      add sp, 2
0367   061F             ; --- END FUNCTION CALL
0368   061F             ; print("   THE COMPUTER THE ROOM#S YOU WANT THE ARROW TO GO TO.\n"); 
0369   061F             ; --- START FUNCTION CALL
0370   061F 26 9A 1C      mov b, _s26 ; "   THE COMPUTER THE ROOM#S YOU WANT THE ARROW TO GO TO.\n"
0371   0622 FD AB         swp b
0372   0624 D8            push b
0373   0625 07 09 15      call print
0374   0628 51 02 00      add sp, 2
0375   062B             ; --- END FUNCTION CALL
0376   062B             ; print("   IF THE ARROW CAN'T GO THAT WAY (IF NO TUNNEL) IT MOVES\n"); 
0377   062B             ; --- START FUNCTION CALL
0378   062B 26 D3 1C      mov b, _s27 ; "   IF THE ARROW CAN'T GO THAT WAY (IF NO TUNNEL) IT MOVES\n"
0379   062E FD AB         swp b
0380   0630 D8            push b
0381   0631 07 09 15      call print
0382   0634 51 02 00      add sp, 2
0383   0637             ; --- END FUNCTION CALL
0384   0637             ; print("   AT RANDOM TO THE NEXT ROOM.\n"); 
0385   0637             ; --- START FUNCTION CALL
0386   0637 26 0D 1D      mov b, _s28 ; "   AT RANDOM TO THE NEXT ROOM.\n"
0387   063A FD AB         swp b
0388   063C D8            push b
0389   063D 07 09 15      call print
0390   0640 51 02 00      add sp, 2
0391   0643             ; --- END FUNCTION CALL
0392   0643             ; print("     IF THE ARROW HITS THE WUMPUS, YOU WIN.\n"); 
0393   0643             ; --- START FUNCTION CALL
0394   0643 26 2D 1D      mov b, _s29 ; "     IF THE ARROW HITS THE WUMPUS, YOU WIN.\n"
0395   0646 FD AB         swp b
0396   0648 D8            push b
0397   0649 07 09 15      call print
0398   064C 51 02 00      add sp, 2
0399   064F             ; --- END FUNCTION CALL
0400   064F             ; print("     IF THE ARROW HITS YOU, YOU LOSE.\n"); 
0401   064F             ; --- START FUNCTION CALL
0402   064F 26 5A 1D      mov b, _s30 ; "     IF THE ARROW HITS YOU, YOU LOSE.\n"
0403   0652 FD AB         swp b
0404   0654 D8            push b
0405   0655 07 09 15      call print
0406   0658 51 02 00      add sp, 2
0407   065B             ; --- END FUNCTION CALL
0408   065B             ; print(" WARNINGS:\n"); 
0409   065B             ; --- START FUNCTION CALL
0410   065B 26 81 1D      mov b, _s31 ; " WARNINGS:\n"
0411   065E FD AB         swp b
0412   0660 D8            push b
0413   0661 07 09 15      call print
0414   0664 51 02 00      add sp, 2
0415   0667             ; --- END FUNCTION CALL
0416   0667             ; print(" WHEN YOU ARE ONE ROOM AWAY FROM A WUMPUS OR HAZARD,\n"); 
0417   0667             ; --- START FUNCTION CALL
0418   0667 26 8D 1D      mov b, _s32 ; " WHEN YOU ARE ONE ROOM AWAY FROM A WUMPUS OR HAZARD,\n"
0419   066A FD AB         swp b
0420   066C D8            push b
0421   066D 07 09 15      call print
0422   0670 51 02 00      add sp, 2
0423   0673             ; --- END FUNCTION CALL
0424   0673             ; print(" THE COMPUTER SAYS:\n"); 
0425   0673             ; --- START FUNCTION CALL
0426   0673 26 C3 1D      mov b, _s33 ; " THE COMPUTER SAYS:\n"
0427   0676 FD AB         swp b
0428   0678 D8            push b
0429   0679 07 09 15      call print
0430   067C 51 02 00      add sp, 2
0431   067F             ; --- END FUNCTION CALL
0432   067F             ; print(" WUMPUS:  'I SMELL A WUMPUS'\n"); 
0433   067F             ; --- START FUNCTION CALL
0434   067F 26 D8 1D      mov b, _s34 ; " WUMPUS:  'I SMELL A WUMPUS'\n"
0435   0682 FD AB         swp b
0436   0684 D8            push b
0437   0685 07 09 15      call print
0438   0688 51 02 00      add sp, 2
0439   068B             ; --- END FUNCTION CALL
0440   068B             ; print(" BAT   :  'BATS NEARBY'\n"); 
0441   068B             ; --- START FUNCTION CALL
0442   068B 26 F6 1D      mov b, _s35 ; " BAT   :  'BATS NEARBY'\n"
0443   068E FD AB         swp b
0444   0690 D8            push b
0445   0691 07 09 15      call print
0446   0694 51 02 00      add sp, 2
0447   0697             ; --- END FUNCTION CALL
0448   0697             ; print(" PIT   :  'I FEEL A DRAFT'\n"); 
0449   0697             ; --- START FUNCTION CALL
0450   0697 26 0F 1E      mov b, _s36 ; " PIT   :  'I FEEL A DRAFT'\n"
0451   069A FD AB         swp b
0452   069C D8            push b
0453   069D 07 09 15      call print
0454   06A0 51 02 00      add sp, 2
0455   06A3             ; --- END FUNCTION CALL
0456   06A3             ; print("\n"); 
0457   06A3             ; --- START FUNCTION CALL
0458   06A3 26 43 19      mov b, _s6 ; "\n"
0459   06A6 FD AB         swp b
0460   06A8 D8            push b
0461   06A9 07 09 15      call print
0462   06AC 51 02 00      add sp, 2
0463   06AF             ; --- END FUNCTION CALL
0464   06AF F9            leave
0465   06B0 09            ret
0466   06B1             
0467   06B1             show_room:
0468   06B1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0469   06B4             ; int room, k; 
0470   06B4 52 02 00      sub sp, 2
0471   06B7 52 02 00      sub sp, 2
0472   06BA             ; print("\n"); 
0473   06BA             ; --- START FUNCTION CALL
0474   06BA 26 43 19      mov b, _s6 ; "\n"
0475   06BD FD AB         swp b
0476   06BF D8            push b
0477   06C0 07 09 15      call print
0478   06C3 51 02 00      add sp, 2
0479   06C6             ; --- END FUNCTION CALL
0480   06C6             ; for (k = 0; k < 3; k++) { 
0481   06C6             _for4_init:
0482   06C6 FA FD FF      lea d, [bp + -3] ; $k
0483   06C9 DA            push d
0484   06CA FD 2E 00 00   mov32 cb, $00000000
0484   06CE 00 00 
0485   06D0 E7            pop d
0486   06D1 FD 43         mov [d], b
0487   06D3             _for4_cond:
0488   06D3 FA FD FF      lea d, [bp + -3] ; $k
0489   06D6 2A            mov b, [d]
0490   06D7 38 00 00      mov c, 0
0491   06DA             ; --- START RELATIONAL
0492   06DA D7            push a
0493   06DB 11            mov a, b
0494   06DC FD 2E 03 00   mov32 cb, $00000003
0494   06E0 00 00 
0495   06E2 B0            cmp a, b
0496   06E3 FD 73         slt ; < (signed)
0497   06E5 E4            pop a
0498   06E6             ; --- END RELATIONAL
0499   06E6 C0 00 00      cmp b, 0
0500   06E9 C6 2A 08      je _for4_exit
0501   06EC             _for4_block:
0502   06EC             ; room = cave[loc[	    0   ]][k]; 
0503   06EC FA FF FF      lea d, [bp + -1] ; $room
0504   06EF DA            push d
0505   06F0 3B FA 17      mov d, _cave_data ; $cave
0506   06F3 D7            push a
0507   06F4 DA            push d
0508   06F5 3B EC 17      mov d, _loc_data ; $loc
0509   06F8 D7            push a
0510   06F9 DA            push d
0511   06FA FD 2E 00 00   mov32 cb, $00000000
0511   06FE 00 00 
0512   0700 E7            pop d
0513   0701 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0514   0705 E4            pop a
0515   0706 2A            mov b, [d]
0516   0707 38 00 00      mov c, 0
0517   070A E7            pop d
0518   070B FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0519   070F DA            push d
0520   0710 FA FD FF      lea d, [bp + -3] ; $k
0521   0713 2A            mov b, [d]
0522   0714 38 00 00      mov c, 0
0523   0717 E7            pop d
0524   0718 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0525   071C E4            pop a
0526   071D 2A            mov b, [d]
0527   071E 38 00 00      mov c, 0
0528   0721 E7            pop d
0529   0722 FD 43         mov [d], b
0530   0724             ; if (room == loc[	1      ]) { 
0531   0724             _if5_cond:
0532   0724 FA FF FF      lea d, [bp + -1] ; $room
0533   0727 2A            mov b, [d]
0534   0728 38 00 00      mov c, 0
0535   072B             ; --- START RELATIONAL
0536   072B D7            push a
0537   072C 11            mov a, b
0538   072D 3B EC 17      mov d, _loc_data ; $loc
0539   0730 D7            push a
0540   0731 DA            push d
0541   0732 FD 2E 01 00   mov32 cb, $00000001
0541   0736 00 00 
0542   0738 E7            pop d
0543   0739 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0544   073D E4            pop a
0545   073E 2A            mov b, [d]
0546   073F 38 00 00      mov c, 0
0547   0742 B0            cmp a, b
0548   0743 FD 71         seq ; ==
0549   0745 E4            pop a
0550   0746             ; --- END RELATIONAL
0551   0746 C0 00 00      cmp b, 0
0552   0749 C6 5B 07      je _if5_else
0553   074C             _if5_TRUE:
0554   074C             ; print("I SMELL A WUMPUS!\n"); 
0555   074C             ; --- START FUNCTION CALL
0556   074C 26 2B 1E      mov b, _s37 ; "I SMELL A WUMPUS!\n"
0557   074F FD AB         swp b
0558   0751 D8            push b
0559   0752 07 09 15      call print
0560   0755 51 02 00      add sp, 2
0561   0758             ; --- END FUNCTION CALL
0562   0758 0A 17 08      jmp _if5_exit
0563   075B             _if5_else:
0564   075B             ; if (room == loc[	2    ] || room == loc[	3    ]) { 
0565   075B             _if6_cond:
0566   075B FA FF FF      lea d, [bp + -1] ; $room
0567   075E 2A            mov b, [d]
0568   075F 38 00 00      mov c, 0
0569   0762             ; --- START RELATIONAL
0570   0762 D7            push a
0571   0763 11            mov a, b
0572   0764 3B EC 17      mov d, _loc_data ; $loc
0573   0767 D7            push a
0574   0768 DA            push d
0575   0769 FD 2E 02 00   mov32 cb, $00000002
0575   076D 00 00 
0576   076F E7            pop d
0577   0770 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0578   0774 E4            pop a
0579   0775 2A            mov b, [d]
0580   0776 38 00 00      mov c, 0
0581   0779 B0            cmp a, b
0582   077A FD 71         seq ; ==
0583   077C E4            pop a
0584   077D             ; --- END RELATIONAL
0585   077D             ; --- START LOGICAL OR
0586   077D D7            push a
0587   077E 11            mov a, b
0588   077F FA FF FF      lea d, [bp + -1] ; $room
0589   0782 2A            mov b, [d]
0590   0783 38 00 00      mov c, 0
0591   0786             ; --- START RELATIONAL
0592   0786 D7            push a
0593   0787 11            mov a, b
0594   0788 3B EC 17      mov d, _loc_data ; $loc
0595   078B D7            push a
0596   078C DA            push d
0597   078D FD 2E 03 00   mov32 cb, $00000003
0597   0791 00 00 
0598   0793 E7            pop d
0599   0794 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0600   0798 E4            pop a
0601   0799 2A            mov b, [d]
0602   079A 38 00 00      mov c, 0
0603   079D B0            cmp a, b
0604   079E FD 71         seq ; ==
0605   07A0 E4            pop a
0606   07A1             ; --- END RELATIONAL
0607   07A1 FD A8         sor a, b ; ||
0608   07A3 E4            pop a
0609   07A4             ; --- END LOGICAL OR
0610   07A4 C0 00 00      cmp b, 0
0611   07A7 C6 B9 07      je _if6_else
0612   07AA             _if6_TRUE:
0613   07AA             ; print("I FEEL A DRAFT\n"); 
0614   07AA             ; --- START FUNCTION CALL
0615   07AA 26 3E 1E      mov b, _s38 ; "I FEEL A DRAFT\n"
0616   07AD FD AB         swp b
0617   07AF D8            push b
0618   07B0 07 09 15      call print
0619   07B3 51 02 00      add sp, 2
0620   07B6             ; --- END FUNCTION CALL
0621   07B6 0A 17 08      jmp _if6_exit
0622   07B9             _if6_else:
0623   07B9             ; if (room == loc[	4     ] || room == loc[	5     ]) { 
0624   07B9             _if7_cond:
0625   07B9 FA FF FF      lea d, [bp + -1] ; $room
0626   07BC 2A            mov b, [d]
0627   07BD 38 00 00      mov c, 0
0628   07C0             ; --- START RELATIONAL
0629   07C0 D7            push a
0630   07C1 11            mov a, b
0631   07C2 3B EC 17      mov d, _loc_data ; $loc
0632   07C5 D7            push a
0633   07C6 DA            push d
0634   07C7 FD 2E 04 00   mov32 cb, $00000004
0634   07CB 00 00 
0635   07CD E7            pop d
0636   07CE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0637   07D2 E4            pop a
0638   07D3 2A            mov b, [d]
0639   07D4 38 00 00      mov c, 0
0640   07D7 B0            cmp a, b
0641   07D8 FD 71         seq ; ==
0642   07DA E4            pop a
0643   07DB             ; --- END RELATIONAL
0644   07DB             ; --- START LOGICAL OR
0645   07DB D7            push a
0646   07DC 11            mov a, b
0647   07DD FA FF FF      lea d, [bp + -1] ; $room
0648   07E0 2A            mov b, [d]
0649   07E1 38 00 00      mov c, 0
0650   07E4             ; --- START RELATIONAL
0651   07E4 D7            push a
0652   07E5 11            mov a, b
0653   07E6 3B EC 17      mov d, _loc_data ; $loc
0654   07E9 D7            push a
0655   07EA DA            push d
0656   07EB FD 2E 05 00   mov32 cb, $00000005
0656   07EF 00 00 
0657   07F1 E7            pop d
0658   07F2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0659   07F6 E4            pop a
0660   07F7 2A            mov b, [d]
0661   07F8 38 00 00      mov c, 0
0662   07FB B0            cmp a, b
0663   07FC FD 71         seq ; ==
0664   07FE E4            pop a
0665   07FF             ; --- END RELATIONAL
0666   07FF FD A8         sor a, b ; ||
0667   0801 E4            pop a
0668   0802             ; --- END LOGICAL OR
0669   0802 C0 00 00      cmp b, 0
0670   0805 C6 17 08      je _if7_exit
0671   0808             _if7_TRUE:
0672   0808             ; print("BATS NEARBY!\n"); 
0673   0808             ; --- START FUNCTION CALL
0674   0808 26 4E 1E      mov b, _s39 ; "BATS NEARBY!\n"
0675   080B FD AB         swp b
0676   080D D8            push b
0677   080E 07 09 15      call print
0678   0811 51 02 00      add sp, 2
0679   0814             ; --- END FUNCTION CALL
0680   0814 0A 17 08      jmp _if7_exit
0681   0817             _if7_exit:
0682   0817             _if6_exit:
0683   0817             _if5_exit:
0684   0817             _for4_update:
0685   0817 FA FD FF      lea d, [bp + -3] ; $k
0686   081A 2A            mov b, [d]
0687   081B 38 00 00      mov c, 0
0688   081E 11            mov a, b
0689   081F FD 77         inc b
0690   0821 FA FD FF      lea d, [bp + -3] ; $k
0691   0824 FD 43         mov [d], b
0692   0826 27            mov b, a
0693   0827 0A D3 06      jmp _for4_cond
0694   082A             _for4_exit:
0695   082A             ; print("YOU ARE IN ROOM "); print_unsigned(loc[	    0   ]+1); print("\n"); 
0696   082A             ; --- START FUNCTION CALL
0697   082A 26 5C 1E      mov b, _s40 ; "YOU ARE IN ROOM "
0698   082D FD AB         swp b
0699   082F D8            push b
0700   0830 07 09 15      call print
0701   0833 51 02 00      add sp, 2
0702   0836             ; --- END FUNCTION CALL
0703   0836             ; print_unsigned(loc[	    0   ]+1); print("\n"); 
0704   0836             ; --- START FUNCTION CALL
0705   0836 3B EC 17      mov d, _loc_data ; $loc
0706   0839 D7            push a
0707   083A DA            push d
0708   083B FD 2E 00 00   mov32 cb, $00000000
0708   083F 00 00 
0709   0841 E7            pop d
0710   0842 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0711   0846 E4            pop a
0712   0847 2A            mov b, [d]
0713   0848 38 00 00      mov c, 0
0714   084B             ; --- START TERMS
0715   084B D7            push a
0716   084C 11            mov a, b
0717   084D FD 2E 01 00   mov32 cb, $00000001
0717   0851 00 00 
0718   0853 56            add b, a
0719   0854 E4            pop a
0720   0855             ; --- END TERMS
0721   0855 FD AB         swp b
0722   0857 D8            push b
0723   0858 07 A2 15      call print_unsigned
0724   085B 51 02 00      add sp, 2
0725   085E             ; --- END FUNCTION CALL
0726   085E             ; print("\n"); 
0727   085E             ; --- START FUNCTION CALL
0728   085E 26 43 19      mov b, _s6 ; "\n"
0729   0861 FD AB         swp b
0730   0863 D8            push b
0731   0864 07 09 15      call print
0732   0867 51 02 00      add sp, 2
0733   086A             ; --- END FUNCTION CALL
0734   086A             ; print("TUNNELS LEAD TO ");  
0735   086A             ; --- START FUNCTION CALL
0736   086A 26 6D 1E      mov b, _s41 ; "TUNNELS LEAD TO "
0737   086D FD AB         swp b
0738   086F D8            push b
0739   0870 07 09 15      call print
0740   0873 51 02 00      add sp, 2
0741   0876             ; --- END FUNCTION CALL
0742   0876             ; print_unsigned(cave[loc[	    0   ]][0]+1); print(", "); 
0743   0876             ; --- START FUNCTION CALL
0744   0876 3B FA 17      mov d, _cave_data ; $cave
0745   0879 D7            push a
0746   087A DA            push d
0747   087B 3B EC 17      mov d, _loc_data ; $loc
0748   087E D7            push a
0749   087F DA            push d
0750   0880 FD 2E 00 00   mov32 cb, $00000000
0750   0884 00 00 
0751   0886 E7            pop d
0752   0887 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0753   088B E4            pop a
0754   088C 2A            mov b, [d]
0755   088D 38 00 00      mov c, 0
0756   0890 E7            pop d
0757   0891 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0758   0895 DA            push d
0759   0896 FD 2E 00 00   mov32 cb, $00000000
0759   089A 00 00 
0760   089C E7            pop d
0761   089D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0762   08A1 E4            pop a
0763   08A2 2A            mov b, [d]
0764   08A3 38 00 00      mov c, 0
0765   08A6             ; --- START TERMS
0766   08A6 D7            push a
0767   08A7 11            mov a, b
0768   08A8 FD 2E 01 00   mov32 cb, $00000001
0768   08AC 00 00 
0769   08AE 56            add b, a
0770   08AF E4            pop a
0771   08B0             ; --- END TERMS
0772   08B0 FD AB         swp b
0773   08B2 D8            push b
0774   08B3 07 A2 15      call print_unsigned
0775   08B6 51 02 00      add sp, 2
0776   08B9             ; --- END FUNCTION CALL
0777   08B9             ; print(", "); 
0778   08B9             ; --- START FUNCTION CALL
0779   08B9 26 7E 1E      mov b, _s42 ; ", "
0780   08BC FD AB         swp b
0781   08BE D8            push b
0782   08BF 07 09 15      call print
0783   08C2 51 02 00      add sp, 2
0784   08C5             ; --- END FUNCTION CALL
0785   08C5             ; print_unsigned(cave[loc[	    0   ]][1]+1); print(", "); 
0786   08C5             ; --- START FUNCTION CALL
0787   08C5 3B FA 17      mov d, _cave_data ; $cave
0788   08C8 D7            push a
0789   08C9 DA            push d
0790   08CA 3B EC 17      mov d, _loc_data ; $loc
0791   08CD D7            push a
0792   08CE DA            push d
0793   08CF FD 2E 00 00   mov32 cb, $00000000
0793   08D3 00 00 
0794   08D5 E7            pop d
0795   08D6 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0796   08DA E4            pop a
0797   08DB 2A            mov b, [d]
0798   08DC 38 00 00      mov c, 0
0799   08DF E7            pop d
0800   08E0 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0801   08E4 DA            push d
0802   08E5 FD 2E 01 00   mov32 cb, $00000001
0802   08E9 00 00 
0803   08EB E7            pop d
0804   08EC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0805   08F0 E4            pop a
0806   08F1 2A            mov b, [d]
0807   08F2 38 00 00      mov c, 0
0808   08F5             ; --- START TERMS
0809   08F5 D7            push a
0810   08F6 11            mov a, b
0811   08F7 FD 2E 01 00   mov32 cb, $00000001
0811   08FB 00 00 
0812   08FD 56            add b, a
0813   08FE E4            pop a
0814   08FF             ; --- END TERMS
0815   08FF FD AB         swp b
0816   0901 D8            push b
0817   0902 07 A2 15      call print_unsigned
0818   0905 51 02 00      add sp, 2
0819   0908             ; --- END FUNCTION CALL
0820   0908             ; print(", "); 
0821   0908             ; --- START FUNCTION CALL
0822   0908 26 7E 1E      mov b, _s42 ; ", "
0823   090B FD AB         swp b
0824   090D D8            push b
0825   090E 07 09 15      call print
0826   0911 51 02 00      add sp, 2
0827   0914             ; --- END FUNCTION CALL
0828   0914             ; print_unsigned(cave[loc[	    0   ]][2]+1); 
0829   0914             ; --- START FUNCTION CALL
0830   0914 3B FA 17      mov d, _cave_data ; $cave
0831   0917 D7            push a
0832   0918 DA            push d
0833   0919 3B EC 17      mov d, _loc_data ; $loc
0834   091C D7            push a
0835   091D DA            push d
0836   091E FD 2E 00 00   mov32 cb, $00000000
0836   0922 00 00 
0837   0924 E7            pop d
0838   0925 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0839   0929 E4            pop a
0840   092A 2A            mov b, [d]
0841   092B 38 00 00      mov c, 0
0842   092E E7            pop d
0843   092F FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
0844   0933 DA            push d
0845   0934 FD 2E 02 00   mov32 cb, $00000002
0845   0938 00 00 
0846   093A E7            pop d
0847   093B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0848   093F E4            pop a
0849   0940 2A            mov b, [d]
0850   0941 38 00 00      mov c, 0
0851   0944             ; --- START TERMS
0852   0944 D7            push a
0853   0945 11            mov a, b
0854   0946 FD 2E 01 00   mov32 cb, $00000001
0854   094A 00 00 
0855   094C 56            add b, a
0856   094D E4            pop a
0857   094E             ; --- END TERMS
0858   094E FD AB         swp b
0859   0950 D8            push b
0860   0951 07 A2 15      call print_unsigned
0861   0954 51 02 00      add sp, 2
0862   0957             ; --- END FUNCTION CALL
0863   0957             ; print("\n\n"); 
0864   0957             ; --- START FUNCTION CALL
0865   0957 26 81 1E      mov b, _s43 ; "\n\n"
0866   095A FD AB         swp b
0867   095C D8            push b
0868   095D 07 09 15      call print
0869   0960 51 02 00      add sp, 2
0870   0963             ; --- END FUNCTION CALL
0871   0963 F9            leave
0872   0964 09            ret
0873   0965             
0874   0965             move_or_shoot:
0875   0965 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0876   0968             ; int c = -1; 
0877   0968 52 02 00      sub sp, 2
0878   096B             ; --- START LOCAL VAR INITIALIZATION
0879   096B FA FF FF      lea d, [bp + -1] ; $c
0880   096E DA            push d
0881   096F FD 2E FF FF   mov32 cb, $ffffffff
0881   0973 FF FF 
0882   0975 E7            pop d
0883   0976 FD 43         mov [d], b
0884   0978             ; --- END LOCAL VAR INITIALIZATION
0885   0978             ; while ((c != 'S') && (c != 'M')) { 
0886   0978             _while8_cond:
0887   0978 FA FF FF      lea d, [bp + -1] ; $c
0888   097B 2A            mov b, [d]
0889   097C 38 00 00      mov c, 0
0890   097F             ; --- START RELATIONAL
0891   097F D7            push a
0892   0980 11            mov a, b
0893   0981 FD 2E 53 00   mov32 cb, $00000053
0893   0985 00 00 
0894   0987 B0            cmp a, b
0895   0988 FD 72         sneq ; !=
0896   098A E4            pop a
0897   098B             ; --- END RELATIONAL
0898   098B             ; --- START LOGICAL AND
0899   098B D7            push a
0900   098C 11            mov a, b
0901   098D FA FF FF      lea d, [bp + -1] ; $c
0902   0990 2A            mov b, [d]
0903   0991 38 00 00      mov c, 0
0904   0994             ; --- START RELATIONAL
0905   0994 D7            push a
0906   0995 11            mov a, b
0907   0996 FD 2E 4D 00   mov32 cb, $0000004d
0907   099A 00 00 
0908   099C B0            cmp a, b
0909   099D FD 72         sneq ; !=
0910   099F E4            pop a
0911   09A0             ; --- END RELATIONAL
0912   09A0 FD A7         sand a, b
0913   09A2 E4            pop a
0914   09A3             ; --- END LOGICAL AND
0915   09A3 C0 00 00      cmp b, 0
0916   09A6 C6 BF 09      je _while8_exit
0917   09A9             _while8_block:
0918   09A9             ; c = getlet("SHOOT OR MOVE (S-M): "); 
0919   09A9 FA FF FF      lea d, [bp + -1] ; $c
0920   09AC DA            push d
0921   09AD             ; --- START FUNCTION CALL
0922   09AD 26 84 1E      mov b, _s44 ; "SHOOT OR MOVE (S-M): "
0923   09B0 FD AB         swp b
0924   09B2 D8            push b
0925   09B3 07 93 04      call getlet
0926   09B6 51 02 00      add sp, 2
0927   09B9             ; --- END FUNCTION CALL
0928   09B9 E7            pop d
0929   09BA FD 43         mov [d], b
0930   09BC 0A 78 09      jmp _while8_cond
0931   09BF             _while8_exit:
0932   09BF             ; return (c == 'S') ? 1 : 0; 
0933   09BF             _ternary9_cond:
0934   09BF FA FF FF      lea d, [bp + -1] ; $c
0935   09C2 2A            mov b, [d]
0936   09C3 38 00 00      mov c, 0
0937   09C6             ; --- START RELATIONAL
0938   09C6 D7            push a
0939   09C7 11            mov a, b
0940   09C8 FD 2E 53 00   mov32 cb, $00000053
0940   09CC 00 00 
0941   09CE B0            cmp a, b
0942   09CF FD 71         seq ; ==
0943   09D1 E4            pop a
0944   09D2             ; --- END RELATIONAL
0945   09D2 C0 00 00      cmp b, 0
0946   09D5 C6 E1 09      je _ternary9_FALSE
0947   09D8             _ternary9_TRUE:
0948   09D8 FD 2E 01 00   mov32 cb, $00000001
0948   09DC 00 00 
0949   09DE 0A E7 09      jmp _ternary9_exit
0950   09E1             _ternary9_FALSE:
0951   09E1 FD 2E 00 00   mov32 cb, $00000000
0951   09E5 00 00 
0952   09E7             _ternary9_exit:
0953   09E7 F9            leave
0954   09E8 09            ret
0955   09E9             
0956   09E9             move_wumpus:
0957   09E9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0958   09EC             ; int k; 
0959   09EC 52 02 00      sub sp, 2
0960   09EF             ; k = rand2() % 4; 
0961   09EF FA FF FF      lea d, [bp + -1] ; $k
0962   09F2 DA            push d
0963   09F3             ; --- START FUNCTION CALL
0964   09F3 07 6A 11      call rand2
0965   09F6             ; --- START FACTORS
0966   09F6 D7            push a
0967   09F7 FD D8         push g
0968   09F9 11            mov a, b
0969   09FA FD 7A         mov g, c
0970   09FC FD 2E 04 00   mov32 cb, $00000004
0970   0A00 00 00 
0971   0A02 FD D8         push g ; save 'g' as the div instruction uses it
0972   0A04 AE            div a, b ; %, a: quotient, b: remainder
0973   0A05 11            mov a, b
0974   0A06 FD F1         pop g
0975   0A08 FD 38         mov c, g
0976   0A0A 27            mov b, a
0977   0A0B FD F1         pop g
0978   0A0D E4            pop a
0979   0A0E             ; --- END FACTORS
0980   0A0E E7            pop d
0981   0A0F FD 43         mov [d], b
0982   0A11             ; if (k < 3) { 
0983   0A11             _if12_cond:
0984   0A11 FA FF FF      lea d, [bp + -1] ; $k
0985   0A14 2A            mov b, [d]
0986   0A15 38 00 00      mov c, 0
0987   0A18             ; --- START RELATIONAL
0988   0A18 D7            push a
0989   0A19 11            mov a, b
0990   0A1A FD 2E 03 00   mov32 cb, $00000003
0990   0A1E 00 00 
0991   0A20 B0            cmp a, b
0992   0A21 FD 73         slt ; < (signed)
0993   0A23 E4            pop a
0994   0A24             ; --- END RELATIONAL
0995   0A24 C0 00 00      cmp b, 0
0996   0A27 C6 73 0A      je _if12_exit
0997   0A2A             _if12_TRUE:
0998   0A2A             ; loc[	1      ] = cave[loc[	1      ]][k]; 
0999   0A2A 3B EC 17      mov d, _loc_data ; $loc
1000   0A2D D7            push a
1001   0A2E DA            push d
1002   0A2F FD 2E 01 00   mov32 cb, $00000001
1002   0A33 00 00 
1003   0A35 E7            pop d
1004   0A36 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1005   0A3A E4            pop a
1006   0A3B DA            push d
1007   0A3C 3B FA 17      mov d, _cave_data ; $cave
1008   0A3F D7            push a
1009   0A40 DA            push d
1010   0A41 3B EC 17      mov d, _loc_data ; $loc
1011   0A44 D7            push a
1012   0A45 DA            push d
1013   0A46 FD 2E 01 00   mov32 cb, $00000001
1013   0A4A 00 00 
1014   0A4C E7            pop d
1015   0A4D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1016   0A51 E4            pop a
1017   0A52 2A            mov b, [d]
1018   0A53 38 00 00      mov c, 0
1019   0A56 E7            pop d
1020   0A57 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
1021   0A5B DA            push d
1022   0A5C FA FF FF      lea d, [bp + -1] ; $k
1023   0A5F 2A            mov b, [d]
1024   0A60 38 00 00      mov c, 0
1025   0A63 E7            pop d
1026   0A64 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1027   0A68 E4            pop a
1028   0A69 2A            mov b, [d]
1029   0A6A 38 00 00      mov c, 0
1030   0A6D E7            pop d
1031   0A6E FD 43         mov [d], b
1032   0A70 0A 73 0A      jmp _if12_exit
1033   0A73             _if12_exit:
1034   0A73             ; if (loc[	1      ] == loc[	    0   ]) { 
1035   0A73             _if13_cond:
1036   0A73 3B EC 17      mov d, _loc_data ; $loc
1037   0A76 D7            push a
1038   0A77 DA            push d
1039   0A78 FD 2E 01 00   mov32 cb, $00000001
1039   0A7C 00 00 
1040   0A7E E7            pop d
1041   0A7F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1042   0A83 E4            pop a
1043   0A84 2A            mov b, [d]
1044   0A85 38 00 00      mov c, 0
1045   0A88             ; --- START RELATIONAL
1046   0A88 D7            push a
1047   0A89 11            mov a, b
1048   0A8A 3B EC 17      mov d, _loc_data ; $loc
1049   0A8D D7            push a
1050   0A8E DA            push d
1051   0A8F FD 2E 00 00   mov32 cb, $00000000
1051   0A93 00 00 
1052   0A95 E7            pop d
1053   0A96 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1054   0A9A E4            pop a
1055   0A9B 2A            mov b, [d]
1056   0A9C 38 00 00      mov c, 0
1057   0A9F B0            cmp a, b
1058   0AA0 FD 71         seq ; ==
1059   0AA2 E4            pop a
1060   0AA3             ; --- END RELATIONAL
1061   0AA3 C0 00 00      cmp b, 0
1062   0AA6 C6 C5 0A      je _if13_exit
1063   0AA9             _if13_TRUE:
1064   0AA9             ; print("TSK TSK TSK - WUMPUS GOT YOU!\n"); 
1065   0AA9             ; --- START FUNCTION CALL
1066   0AA9 26 9A 1E      mov b, _s45 ; "TSK TSK TSK - WUMPUS GOT YOU!\n"
1067   0AAC FD AB         swp b
1068   0AAE D8            push b
1069   0AAF 07 09 15      call print
1070   0AB2 51 02 00      add sp, 2
1071   0AB5             ; --- END FUNCTION CALL
1072   0AB5             ; finished = 	2    ; 
1073   0AB5 3B F8 17      mov d, _finished ; $finished
1074   0AB8 DA            push d
1075   0AB9 FD 2E 02 00   mov32 cb, $00000002
1075   0ABD 00 00 
1076   0ABF E7            pop d
1077   0AC0 FD 43         mov [d], b
1078   0AC2 0A C5 0A      jmp _if13_exit
1079   0AC5             _if13_exit:
1080   0AC5 F9            leave
1081   0AC6 09            ret
1082   0AC7             
1083   0AC7             shoot:
1084   0AC7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1085   0ACA             ; int path[5]; 
1086   0ACA 52 0A 00      sub sp, 10
1087   0ACD             ; int scratchloc = -1; 
1088   0ACD 52 02 00      sub sp, 2
1089   0AD0             ; --- START LOCAL VAR INITIALIZATION
1090   0AD0 FA F5 FF      lea d, [bp + -11] ; $scratchloc
1091   0AD3 DA            push d
1092   0AD4 FD 2E FF FF   mov32 cb, $ffffffff
1092   0AD8 FF FF 
1093   0ADA E7            pop d
1094   0ADB FD 43         mov [d], b
1095   0ADD             ; --- END LOCAL VAR INITIALIZATION
1096   0ADD             ; int len, k; 
1097   0ADD 52 02 00      sub sp, 2
1098   0AE0 52 02 00      sub sp, 2
1099   0AE3             ; finished = 	     0   ; 
1100   0AE3 3B F8 17      mov d, _finished ; $finished
1101   0AE6 DA            push d
1102   0AE7 FD 2E 00 00   mov32 cb, $00000000
1102   0AEB 00 00 
1103   0AED E7            pop d
1104   0AEE FD 43         mov [d], b
1105   0AF0             ; len = -1; 
1106   0AF0 FA F3 FF      lea d, [bp + -13] ; $len
1107   0AF3 DA            push d
1108   0AF4 FD 2E FF FF   mov32 cb, $ffffffff
1108   0AF8 FF FF 
1109   0AFA E7            pop d
1110   0AFB FD 43         mov [d], b
1111   0AFD             ; while (len < 1 || len > 5) { 
1112   0AFD             _while14_cond:
1113   0AFD FA F3 FF      lea d, [bp + -13] ; $len
1114   0B00 2A            mov b, [d]
1115   0B01 38 00 00      mov c, 0
1116   0B04             ; --- START RELATIONAL
1117   0B04 D7            push a
1118   0B05 11            mov a, b
1119   0B06 FD 2E 01 00   mov32 cb, $00000001
1119   0B0A 00 00 
1120   0B0C B0            cmp a, b
1121   0B0D FD 73         slt ; < (signed)
1122   0B0F E4            pop a
1123   0B10             ; --- END RELATIONAL
1124   0B10             ; --- START LOGICAL OR
1125   0B10 D7            push a
1126   0B11 11            mov a, b
1127   0B12 FA F3 FF      lea d, [bp + -13] ; $len
1128   0B15 2A            mov b, [d]
1129   0B16 38 00 00      mov c, 0
1130   0B19             ; --- START RELATIONAL
1131   0B19 D7            push a
1132   0B1A 11            mov a, b
1133   0B1B FD 2E 05 00   mov32 cb, $00000005
1133   0B1F 00 00 
1134   0B21 B0            cmp a, b
1135   0B22 FD 7F         sgt ; >
1136   0B24 E4            pop a
1137   0B25             ; --- END RELATIONAL
1138   0B25 FD A8         sor a, b ; ||
1139   0B27 E4            pop a
1140   0B28             ; --- END LOGICAL OR
1141   0B28 C0 00 00      cmp b, 0
1142   0B2B C6 44 0B      je _while14_exit
1143   0B2E             _while14_block:
1144   0B2E             ; len = getnum("\nNUMBER OF ROOMS (1-5): "); 
1145   0B2E FA F3 FF      lea d, [bp + -13] ; $len
1146   0B31 DA            push d
1147   0B32             ; --- START FUNCTION CALL
1148   0B32 26 B9 1E      mov b, _s46 ; "\nNUMBER OF ROOMS (1-5): "
1149   0B35 FD AB         swp b
1150   0B37 D8            push b
1151   0B38 07 6A 04      call getnum
1152   0B3B 51 02 00      add sp, 2
1153   0B3E             ; --- END FUNCTION CALL
1154   0B3E E7            pop d
1155   0B3F FD 43         mov [d], b
1156   0B41 0A FD 0A      jmp _while14_cond
1157   0B44             _while14_exit:
1158   0B44             ; k = 0; 
1159   0B44 FA F1 FF      lea d, [bp + -15] ; $k
1160   0B47 DA            push d
1161   0B48 FD 2E 00 00   mov32 cb, $00000000
1161   0B4C 00 00 
1162   0B4E E7            pop d
1163   0B4F FD 43         mov [d], b
1164   0B51             ; while (k < len) { 
1165   0B51             _while15_cond:
1166   0B51 FA F1 FF      lea d, [bp + -15] ; $k
1167   0B54 2A            mov b, [d]
1168   0B55 38 00 00      mov c, 0
1169   0B58             ; --- START RELATIONAL
1170   0B58 D7            push a
1171   0B59 11            mov a, b
1172   0B5A FA F3 FF      lea d, [bp + -13] ; $len
1173   0B5D 2A            mov b, [d]
1174   0B5E 38 00 00      mov c, 0
1175   0B61 B0            cmp a, b
1176   0B62 FD 73         slt ; < (signed)
1177   0B64 E4            pop a
1178   0B65             ; --- END RELATIONAL
1179   0B65 C0 00 00      cmp b, 0
1180   0B68 C6 18 0C      je _while15_exit
1181   0B6B             _while15_block:
1182   0B6B             ; path[k] = getnum("ROOM #") - 1; 
1183   0B6B FA F7 FF      lea d, [bp + -9] ; $path
1184   0B6E D7            push a
1185   0B6F DA            push d
1186   0B70 FA F1 FF      lea d, [bp + -15] ; $k
1187   0B73 2A            mov b, [d]
1188   0B74 38 00 00      mov c, 0
1189   0B77 E7            pop d
1190   0B78 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1191   0B7C E4            pop a
1192   0B7D DA            push d
1193   0B7E             ; --- START FUNCTION CALL
1194   0B7E 26 D2 1E      mov b, _s47 ; "ROOM #"
1195   0B81 FD AB         swp b
1196   0B83 D8            push b
1197   0B84 07 6A 04      call getnum
1198   0B87 51 02 00      add sp, 2
1199   0B8A             ; --- END FUNCTION CALL
1200   0B8A             ; --- START TERMS
1201   0B8A D7            push a
1202   0B8B 11            mov a, b
1203   0B8C FD 2E 01 00   mov32 cb, $00000001
1203   0B90 00 00 
1204   0B92 60            sub a, b
1205   0B93 27            mov b, a
1206   0B94 E4            pop a
1207   0B95             ; --- END TERMS
1208   0B95 E7            pop d
1209   0B96 FD 43         mov [d], b
1210   0B98             ; if ((k>1) && (path[k] == path[k - 2])) { 
1211   0B98             _if16_cond:
1212   0B98 FA F1 FF      lea d, [bp + -15] ; $k
1213   0B9B 2A            mov b, [d]
1214   0B9C 38 00 00      mov c, 0
1215   0B9F             ; --- START RELATIONAL
1216   0B9F D7            push a
1217   0BA0 11            mov a, b
1218   0BA1 FD 2E 01 00   mov32 cb, $00000001
1218   0BA5 00 00 
1219   0BA7 B0            cmp a, b
1220   0BA8 FD 7F         sgt ; >
1221   0BAA E4            pop a
1222   0BAB             ; --- END RELATIONAL
1223   0BAB             ; --- START LOGICAL AND
1224   0BAB D7            push a
1225   0BAC 11            mov a, b
1226   0BAD FA F7 FF      lea d, [bp + -9] ; $path
1227   0BB0 D7            push a
1228   0BB1 DA            push d
1229   0BB2 FA F1 FF      lea d, [bp + -15] ; $k
1230   0BB5 2A            mov b, [d]
1231   0BB6 38 00 00      mov c, 0
1232   0BB9 E7            pop d
1233   0BBA FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1234   0BBE E4            pop a
1235   0BBF 2A            mov b, [d]
1236   0BC0 38 00 00      mov c, 0
1237   0BC3             ; --- START RELATIONAL
1238   0BC3 D7            push a
1239   0BC4 11            mov a, b
1240   0BC5 FA F7 FF      lea d, [bp + -9] ; $path
1241   0BC8 D7            push a
1242   0BC9 DA            push d
1243   0BCA FA F1 FF      lea d, [bp + -15] ; $k
1244   0BCD 2A            mov b, [d]
1245   0BCE 38 00 00      mov c, 0
1246   0BD1             ; --- START TERMS
1247   0BD1 D7            push a
1248   0BD2 11            mov a, b
1249   0BD3 FD 2E 02 00   mov32 cb, $00000002
1249   0BD7 00 00 
1250   0BD9 60            sub a, b
1251   0BDA 27            mov b, a
1252   0BDB E4            pop a
1253   0BDC             ; --- END TERMS
1254   0BDC E7            pop d
1255   0BDD FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1256   0BE1 E4            pop a
1257   0BE2 2A            mov b, [d]
1258   0BE3 38 00 00      mov c, 0
1259   0BE6 B0            cmp a, b
1260   0BE7 FD 71         seq ; ==
1261   0BE9 E4            pop a
1262   0BEA             ; --- END RELATIONAL
1263   0BEA FD A7         sand a, b
1264   0BEC E4            pop a
1265   0BED             ; --- END LOGICAL AND
1266   0BED C0 00 00      cmp b, 0
1267   0BF0 C6 05 0C      je _if16_exit
1268   0BF3             _if16_TRUE:
1269   0BF3             ; print("ARROWS AREN'T THAT CROOKED - TRY ANOTHER ROOM\n"); 
1270   0BF3             ; --- START FUNCTION CALL
1271   0BF3 26 D9 1E      mov b, _s48 ; "ARROWS AREN'T THAT CROOKED - TRY ANOTHER ROOM\n"
1272   0BF6 FD AB         swp b
1273   0BF8 D8            push b
1274   0BF9 07 09 15      call print
1275   0BFC 51 02 00      add sp, 2
1276   0BFF             ; --- END FUNCTION CALL
1277   0BFF             ; continue;  
1278   0BFF 0A 51 0B      jmp _while15_cond ; while continue
1279   0C02 0A 05 0C      jmp _if16_exit
1280   0C05             _if16_exit:
1281   0C05             ; k++; 
1282   0C05 FA F1 FF      lea d, [bp + -15] ; $k
1283   0C08 2A            mov b, [d]
1284   0C09 38 00 00      mov c, 0
1285   0C0C 11            mov a, b
1286   0C0D FD 77         inc b
1287   0C0F FA F1 FF      lea d, [bp + -15] ; $k
1288   0C12 FD 43         mov [d], b
1289   0C14 27            mov b, a
1290   0C15 0A 51 0B      jmp _while15_cond
1291   0C18             _while15_exit:
1292   0C18             ; scratchloc = loc[	    0   ]; 
1293   0C18 FA F5 FF      lea d, [bp + -11] ; $scratchloc
1294   0C1B DA            push d
1295   0C1C 3B EC 17      mov d, _loc_data ; $loc
1296   0C1F D7            push a
1297   0C20 DA            push d
1298   0C21 FD 2E 00 00   mov32 cb, $00000000
1298   0C25 00 00 
1299   0C27 E7            pop d
1300   0C28 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1301   0C2C E4            pop a
1302   0C2D 2A            mov b, [d]
1303   0C2E 38 00 00      mov c, 0
1304   0C31 E7            pop d
1305   0C32 FD 43         mov [d], b
1306   0C34             ; for (k = 0; k < len; k++) { 
1307   0C34             _for17_init:
1308   0C34 FA F1 FF      lea d, [bp + -15] ; $k
1309   0C37 DA            push d
1310   0C38 FD 2E 00 00   mov32 cb, $00000000
1310   0C3C 00 00 
1311   0C3E E7            pop d
1312   0C3F FD 43         mov [d], b
1313   0C41             _for17_cond:
1314   0C41 FA F1 FF      lea d, [bp + -15] ; $k
1315   0C44 2A            mov b, [d]
1316   0C45 38 00 00      mov c, 0
1317   0C48             ; --- START RELATIONAL
1318   0C48 D7            push a
1319   0C49 11            mov a, b
1320   0C4A FA F3 FF      lea d, [bp + -13] ; $len
1321   0C4D 2A            mov b, [d]
1322   0C4E 38 00 00      mov c, 0
1323   0C51 B0            cmp a, b
1324   0C52 FD 73         slt ; < (signed)
1325   0C54 E4            pop a
1326   0C55             ; --- END RELATIONAL
1327   0C55 C0 00 00      cmp b, 0
1328   0C58 C6 3A 0E      je _for17_exit
1329   0C5B             _for17_block:
1330   0C5B             ; if ((cave[scratchloc][0] == path[k]) || 
1331   0C5B             _if18_cond:
1332   0C5B 3B FA 17      mov d, _cave_data ; $cave
1333   0C5E D7            push a
1334   0C5F DA            push d
1335   0C60 FA F5 FF      lea d, [bp + -11] ; $scratchloc
1336   0C63 2A            mov b, [d]
1337   0C64 38 00 00      mov c, 0
1338   0C67 E7            pop d
1339   0C68 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
1340   0C6C DA            push d
1341   0C6D FD 2E 00 00   mov32 cb, $00000000
1341   0C71 00 00 
1342   0C73 E7            pop d
1343   0C74 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1344   0C78 E4            pop a
1345   0C79 2A            mov b, [d]
1346   0C7A 38 00 00      mov c, 0
1347   0C7D             ; --- START RELATIONAL
1348   0C7D D7            push a
1349   0C7E 11            mov a, b
1350   0C7F FA F7 FF      lea d, [bp + -9] ; $path
1351   0C82 D7            push a
1352   0C83 DA            push d
1353   0C84 FA F1 FF      lea d, [bp + -15] ; $k
1354   0C87 2A            mov b, [d]
1355   0C88 38 00 00      mov c, 0
1356   0C8B E7            pop d
1357   0C8C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1358   0C90 E4            pop a
1359   0C91 2A            mov b, [d]
1360   0C92 38 00 00      mov c, 0
1361   0C95 B0            cmp a, b
1362   0C96 FD 71         seq ; ==
1363   0C98 E4            pop a
1364   0C99             ; --- END RELATIONAL
1365   0C99             ; --- START LOGICAL OR
1366   0C99 D7            push a
1367   0C9A 11            mov a, b
1368   0C9B 3B FA 17      mov d, _cave_data ; $cave
1369   0C9E D7            push a
1370   0C9F DA            push d
1371   0CA0 FA F5 FF      lea d, [bp + -11] ; $scratchloc
1372   0CA3 2A            mov b, [d]
1373   0CA4 38 00 00      mov c, 0
1374   0CA7 E7            pop d
1375   0CA8 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
1376   0CAC DA            push d
1377   0CAD FD 2E 01 00   mov32 cb, $00000001
1377   0CB1 00 00 
1378   0CB3 E7            pop d
1379   0CB4 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1380   0CB8 E4            pop a
1381   0CB9 2A            mov b, [d]
1382   0CBA 38 00 00      mov c, 0
1383   0CBD             ; --- START RELATIONAL
1384   0CBD D7            push a
1385   0CBE 11            mov a, b
1386   0CBF FA F7 FF      lea d, [bp + -9] ; $path
1387   0CC2 D7            push a
1388   0CC3 DA            push d
1389   0CC4 FA F1 FF      lea d, [bp + -15] ; $k
1390   0CC7 2A            mov b, [d]
1391   0CC8 38 00 00      mov c, 0
1392   0CCB E7            pop d
1393   0CCC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1394   0CD0 E4            pop a
1395   0CD1 2A            mov b, [d]
1396   0CD2 38 00 00      mov c, 0
1397   0CD5 B0            cmp a, b
1398   0CD6 FD 71         seq ; ==
1399   0CD8 E4            pop a
1400   0CD9             ; --- END RELATIONAL
1401   0CD9 FD A8         sor a, b ; ||
1402   0CDB 11            mov a, b
1403   0CDC 3B FA 17      mov d, _cave_data ; $cave
1404   0CDF D7            push a
1405   0CE0 DA            push d
1406   0CE1 FA F5 FF      lea d, [bp + -11] ; $scratchloc
1407   0CE4 2A            mov b, [d]
1408   0CE5 38 00 00      mov c, 0
1409   0CE8 E7            pop d
1410   0CE9 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
1411   0CED DA            push d
1412   0CEE FD 2E 02 00   mov32 cb, $00000002
1412   0CF2 00 00 
1413   0CF4 E7            pop d
1414   0CF5 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1415   0CF9 E4            pop a
1416   0CFA 2A            mov b, [d]
1417   0CFB 38 00 00      mov c, 0
1418   0CFE             ; --- START RELATIONAL
1419   0CFE D7            push a
1420   0CFF 11            mov a, b
1421   0D00 FA F7 FF      lea d, [bp + -9] ; $path
1422   0D03 D7            push a
1423   0D04 DA            push d
1424   0D05 FA F1 FF      lea d, [bp + -15] ; $k
1425   0D08 2A            mov b, [d]
1426   0D09 38 00 00      mov c, 0
1427   0D0C E7            pop d
1428   0D0D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1429   0D11 E4            pop a
1430   0D12 2A            mov b, [d]
1431   0D13 38 00 00      mov c, 0
1432   0D16 B0            cmp a, b
1433   0D17 FD 71         seq ; ==
1434   0D19 E4            pop a
1435   0D1A             ; --- END RELATIONAL
1436   0D1A FD A8         sor a, b ; ||
1437   0D1C E4            pop a
1438   0D1D             ; --- END LOGICAL OR
1439   0D1D C0 00 00      cmp b, 0
1440   0D20 C6 43 0D      je _if18_else
1441   0D23             _if18_TRUE:
1442   0D23             ; scratchloc = path[k]; 
1443   0D23 FA F5 FF      lea d, [bp + -11] ; $scratchloc
1444   0D26 DA            push d
1445   0D27 FA F7 FF      lea d, [bp + -9] ; $path
1446   0D2A D7            push a
1447   0D2B DA            push d
1448   0D2C FA F1 FF      lea d, [bp + -15] ; $k
1449   0D2F 2A            mov b, [d]
1450   0D30 38 00 00      mov c, 0
1451   0D33 E7            pop d
1452   0D34 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1453   0D38 E4            pop a
1454   0D39 2A            mov b, [d]
1455   0D3A 38 00 00      mov c, 0
1456   0D3D E7            pop d
1457   0D3E FD 43         mov [d], b
1458   0D40 0A 81 0D      jmp _if18_exit
1459   0D43             _if18_else:
1460   0D43             ; scratchloc = cave[scratchloc][rand2()%3]; 
1461   0D43 FA F5 FF      lea d, [bp + -11] ; $scratchloc
1462   0D46 DA            push d
1463   0D47 3B FA 17      mov d, _cave_data ; $cave
1464   0D4A D7            push a
1465   0D4B DA            push d
1466   0D4C FA F5 FF      lea d, [bp + -11] ; $scratchloc
1467   0D4F 2A            mov b, [d]
1468   0D50 38 00 00      mov c, 0
1469   0D53 E7            pop d
1470   0D54 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
1471   0D58 DA            push d
1472   0D59             ; --- START FUNCTION CALL
1473   0D59 07 6A 11      call rand2
1474   0D5C             ; --- START FACTORS
1475   0D5C D7            push a
1476   0D5D FD D8         push g
1477   0D5F 11            mov a, b
1478   0D60 FD 7A         mov g, c
1479   0D62 FD 2E 03 00   mov32 cb, $00000003
1479   0D66 00 00 
1480   0D68 FD D8         push g ; save 'g' as the div instruction uses it
1481   0D6A AE            div a, b ; %, a: quotient, b: remainder
1482   0D6B 11            mov a, b
1483   0D6C FD F1         pop g
1484   0D6E FD 38         mov c, g
1485   0D70 27            mov b, a
1486   0D71 FD F1         pop g
1487   0D73 E4            pop a
1488   0D74             ; --- END FACTORS
1489   0D74 E7            pop d
1490   0D75 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1491   0D79 E4            pop a
1492   0D7A 2A            mov b, [d]
1493   0D7B 38 00 00      mov c, 0
1494   0D7E E7            pop d
1495   0D7F FD 43         mov [d], b
1496   0D81             _if18_exit:
1497   0D81             ; if (scratchloc == loc[	1      ]) { 
1498   0D81             _if23_cond:
1499   0D81 FA F5 FF      lea d, [bp + -11] ; $scratchloc
1500   0D84 2A            mov b, [d]
1501   0D85 38 00 00      mov c, 0
1502   0D88             ; --- START RELATIONAL
1503   0D88 D7            push a
1504   0D89 11            mov a, b
1505   0D8A 3B EC 17      mov d, _loc_data ; $loc
1506   0D8D D7            push a
1507   0D8E DA            push d
1508   0D8F FD 2E 01 00   mov32 cb, $00000001
1508   0D93 00 00 
1509   0D95 E7            pop d
1510   0D96 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1511   0D9A E4            pop a
1512   0D9B 2A            mov b, [d]
1513   0D9C 38 00 00      mov c, 0
1514   0D9F B0            cmp a, b
1515   0DA0 FD 71         seq ; ==
1516   0DA2 E4            pop a
1517   0DA3             ; --- END RELATIONAL
1518   0DA3 C0 00 00      cmp b, 0
1519   0DA6 C6 C5 0D      je _if23_else
1520   0DA9             _if23_TRUE:
1521   0DA9             ; print("AHA! YOU GOT THE WUMPUS!\n"); 
1522   0DA9             ; --- START FUNCTION CALL
1523   0DA9 26 07 1F      mov b, _s49 ; "AHA! YOU GOT THE WUMPUS!\n"
1524   0DAC FD AB         swp b
1525   0DAE D8            push b
1526   0DAF 07 09 15      call print
1527   0DB2 51 02 00      add sp, 2
1528   0DB5             ; --- END FUNCTION CALL
1529   0DB5             ; finished = 	     1   ; 
1530   0DB5 3B F8 17      mov d, _finished ; $finished
1531   0DB8 DA            push d
1532   0DB9 FD 2E 01 00   mov32 cb, $00000001
1532   0DBD 00 00 
1533   0DBF E7            pop d
1534   0DC0 FD 43         mov [d], b
1535   0DC2 0A 09 0E      jmp _if23_exit
1536   0DC5             _if23_else:
1537   0DC5             ; if (scratchloc == loc[	    0   ]) { 
1538   0DC5             _if24_cond:
1539   0DC5 FA F5 FF      lea d, [bp + -11] ; $scratchloc
1540   0DC8 2A            mov b, [d]
1541   0DC9 38 00 00      mov c, 0
1542   0DCC             ; --- START RELATIONAL
1543   0DCC D7            push a
1544   0DCD 11            mov a, b
1545   0DCE 3B EC 17      mov d, _loc_data ; $loc
1546   0DD1 D7            push a
1547   0DD2 DA            push d
1548   0DD3 FD 2E 00 00   mov32 cb, $00000000
1548   0DD7 00 00 
1549   0DD9 E7            pop d
1550   0DDA FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1551   0DDE E4            pop a
1552   0DDF 2A            mov b, [d]
1553   0DE0 38 00 00      mov c, 0
1554   0DE3 B0            cmp a, b
1555   0DE4 FD 71         seq ; ==
1556   0DE6 E4            pop a
1557   0DE7             ; --- END RELATIONAL
1558   0DE7 C0 00 00      cmp b, 0
1559   0DEA C6 09 0E      je _if24_exit
1560   0DED             _if24_TRUE:
1561   0DED             ; print("OUCH! ARROW GOT YOU!\n"); 
1562   0DED             ; --- START FUNCTION CALL
1563   0DED 26 21 1F      mov b, _s50 ; "OUCH! ARROW GOT YOU!\n"
1564   0DF0 FD AB         swp b
1565   0DF2 D8            push b
1566   0DF3 07 09 15      call print
1567   0DF6 51 02 00      add sp, 2
1568   0DF9             ; --- END FUNCTION CALL
1569   0DF9             ; finished = 	2    ; 
1570   0DF9 3B F8 17      mov d, _finished ; $finished
1571   0DFC DA            push d
1572   0DFD FD 2E 02 00   mov32 cb, $00000002
1572   0E01 00 00 
1573   0E03 E7            pop d
1574   0E04 FD 43         mov [d], b
1575   0E06 0A 09 0E      jmp _if24_exit
1576   0E09             _if24_exit:
1577   0E09             _if23_exit:
1578   0E09             ; if (finished != 	     0   ) { 
1579   0E09             _if25_cond:
1580   0E09 3B F8 17      mov d, _finished ; $finished
1581   0E0C 2A            mov b, [d]
1582   0E0D 38 00 00      mov c, 0
1583   0E10             ; --- START RELATIONAL
1584   0E10 D7            push a
1585   0E11 11            mov a, b
1586   0E12 FD 2E 00 00   mov32 cb, $00000000
1586   0E16 00 00 
1587   0E18 B0            cmp a, b
1588   0E19 FD 72         sneq ; !=
1589   0E1B E4            pop a
1590   0E1C             ; --- END RELATIONAL
1591   0E1C C0 00 00      cmp b, 0
1592   0E1F C6 27 0E      je _if25_exit
1593   0E22             _if25_TRUE:
1594   0E22             ; return; 
1595   0E22 F9            leave
1596   0E23 09            ret
1597   0E24 0A 27 0E      jmp _if25_exit
1598   0E27             _if25_exit:
1599   0E27             _for17_update:
1600   0E27 FA F1 FF      lea d, [bp + -15] ; $k
1601   0E2A 2A            mov b, [d]
1602   0E2B 38 00 00      mov c, 0
1603   0E2E 11            mov a, b
1604   0E2F FD 77         inc b
1605   0E31 FA F1 FF      lea d, [bp + -15] ; $k
1606   0E34 FD 43         mov [d], b
1607   0E36 27            mov b, a
1608   0E37 0A 41 0C      jmp _for17_cond
1609   0E3A             _for17_exit:
1610   0E3A             ; print("MISSED\n"); 
1611   0E3A             ; --- START FUNCTION CALL
1612   0E3A 26 37 1F      mov b, _s51 ; "MISSED\n"
1613   0E3D FD AB         swp b
1614   0E3F D8            push b
1615   0E40 07 09 15      call print
1616   0E43 51 02 00      add sp, 2
1617   0E46             ; --- END FUNCTION CALL
1618   0E46             ; move_wumpus(); 
1619   0E46             ; --- START FUNCTION CALL
1620   0E46 07 E9 09      call move_wumpus
1621   0E49             ; if (--arrows <= 0) { 
1622   0E49             _if26_cond:
1623   0E49 3B E4 17      mov d, _arrows ; $arrows
1624   0E4C 2A            mov b, [d]
1625   0E4D FD 7D         dec b
1626   0E4F 3B E4 17      mov d, _arrows ; $arrows
1627   0E52 FD 43         mov [d], b
1628   0E54             ; --- START RELATIONAL
1629   0E54 D7            push a
1630   0E55 11            mov a, b
1631   0E56 FD 2E 00 00   mov32 cb, $00000000
1631   0E5A 00 00 
1632   0E5C B0            cmp a, b
1633   0E5D FD 74         sle ; <= (signed)
1634   0E5F E4            pop a
1635   0E60             ; --- END RELATIONAL
1636   0E60 C0 00 00      cmp b, 0
1637   0E63 C6 76 0E      je _if26_exit
1638   0E66             _if26_TRUE:
1639   0E66             ; finished = 	2    ; 
1640   0E66 3B F8 17      mov d, _finished ; $finished
1641   0E69 DA            push d
1642   0E6A FD 2E 02 00   mov32 cb, $00000002
1642   0E6E 00 00 
1643   0E70 E7            pop d
1644   0E71 FD 43         mov [d], b
1645   0E73 0A 76 0E      jmp _if26_exit
1646   0E76             _if26_exit:
1647   0E76 F9            leave
1648   0E77 09            ret
1649   0E78             
1650   0E78             move:
1651   0E78 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1652   0E7B             ; int scratchloc; 
1653   0E7B 52 02 00      sub sp, 2
1654   0E7E             ; scratchloc = -1; 
1655   0E7E FA FF FF      lea d, [bp + -1] ; $scratchloc
1656   0E81 DA            push d
1657   0E82 FD 2E FF FF   mov32 cb, $ffffffff
1657   0E86 FF FF 
1658   0E88 E7            pop d
1659   0E89 FD 43         mov [d], b
1660   0E8B             ; while (scratchloc == -1) { 
1661   0E8B             _while27_cond:
1662   0E8B FA FF FF      lea d, [bp + -1] ; $scratchloc
1663   0E8E 2A            mov b, [d]
1664   0E8F 38 00 00      mov c, 0
1665   0E92             ; --- START RELATIONAL
1666   0E92 D7            push a
1667   0E93 11            mov a, b
1668   0E94 FD 2E FF FF   mov32 cb, $ffffffff
1668   0E98 FF FF 
1669   0E9A B0            cmp a, b
1670   0E9B FD 71         seq ; ==
1671   0E9D E4            pop a
1672   0E9E             ; --- END RELATIONAL
1673   0E9E C0 00 00      cmp b, 0
1674   0EA1 C6 12 10      je _while27_exit
1675   0EA4             _while27_block:
1676   0EA4             ; scratchloc = getnum("\nWHERE TO: ")- 1; 
1677   0EA4 FA FF FF      lea d, [bp + -1] ; $scratchloc
1678   0EA7 DA            push d
1679   0EA8             ; --- START FUNCTION CALL
1680   0EA8 26 3F 1F      mov b, _s52 ; "\nWHERE TO: "
1681   0EAB FD AB         swp b
1682   0EAD D8            push b
1683   0EAE 07 6A 04      call getnum
1684   0EB1 51 02 00      add sp, 2
1685   0EB4             ; --- END FUNCTION CALL
1686   0EB4             ; --- START TERMS
1687   0EB4 D7            push a
1688   0EB5 11            mov a, b
1689   0EB6 FD 2E 01 00   mov32 cb, $00000001
1689   0EBA 00 00 
1690   0EBC 60            sub a, b
1691   0EBD 27            mov b, a
1692   0EBE E4            pop a
1693   0EBF             ; --- END TERMS
1694   0EBF E7            pop d
1695   0EC0 FD 43         mov [d], b
1696   0EC2             ; if (scratchloc < 0 || scratchloc > 19) { 
1697   0EC2             _if28_cond:
1698   0EC2 FA FF FF      lea d, [bp + -1] ; $scratchloc
1699   0EC5 2A            mov b, [d]
1700   0EC6 38 00 00      mov c, 0
1701   0EC9             ; --- START RELATIONAL
1702   0EC9 D7            push a
1703   0ECA 11            mov a, b
1704   0ECB FD 2E 00 00   mov32 cb, $00000000
1704   0ECF 00 00 
1705   0ED1 B0            cmp a, b
1706   0ED2 FD 73         slt ; < (signed)
1707   0ED4 E4            pop a
1708   0ED5             ; --- END RELATIONAL
1709   0ED5             ; --- START LOGICAL OR
1710   0ED5 D7            push a
1711   0ED6 11            mov a, b
1712   0ED7 FA FF FF      lea d, [bp + -1] ; $scratchloc
1713   0EDA 2A            mov b, [d]
1714   0EDB 38 00 00      mov c, 0
1715   0EDE             ; --- START RELATIONAL
1716   0EDE D7            push a
1717   0EDF 11            mov a, b
1718   0EE0 FD 2E 13 00   mov32 cb, $00000013
1718   0EE4 00 00 
1719   0EE6 B0            cmp a, b
1720   0EE7 FD 7F         sgt ; >
1721   0EE9 E4            pop a
1722   0EEA             ; --- END RELATIONAL
1723   0EEA FD A8         sor a, b ; ||
1724   0EEC E4            pop a
1725   0EED             ; --- END LOGICAL OR
1726   0EED C0 00 00      cmp b, 0
1727   0EF0 C6 06 0F      je _if28_exit
1728   0EF3             _if28_TRUE:
1729   0EF3             ; scratchloc = -1; 
1730   0EF3 FA FF FF      lea d, [bp + -1] ; $scratchloc
1731   0EF6 DA            push d
1732   0EF7 FD 2E FF FF   mov32 cb, $ffffffff
1732   0EFB FF FF 
1733   0EFD E7            pop d
1734   0EFE FD 43         mov [d], b
1735   0F00             ; continue; 
1736   0F00 0A 8B 0E      jmp _while27_cond ; while continue
1737   0F03 0A 06 0F      jmp _if28_exit
1738   0F06             _if28_exit:
1739   0F06             ; if ((cave[loc[	    0   ]][0] != scratchloc) & 
1740   0F06             _if29_cond:
1741   0F06 3B FA 17      mov d, _cave_data ; $cave
1742   0F09 D7            push a
1743   0F0A DA            push d
1744   0F0B 3B EC 17      mov d, _loc_data ; $loc
1745   0F0E D7            push a
1746   0F0F DA            push d
1747   0F10 FD 2E 00 00   mov32 cb, $00000000
1747   0F14 00 00 
1748   0F16 E7            pop d
1749   0F17 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1750   0F1B E4            pop a
1751   0F1C 2A            mov b, [d]
1752   0F1D 38 00 00      mov c, 0
1753   0F20 E7            pop d
1754   0F21 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
1755   0F25 DA            push d
1756   0F26 FD 2E 00 00   mov32 cb, $00000000
1756   0F2A 00 00 
1757   0F2C E7            pop d
1758   0F2D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1759   0F31 E4            pop a
1760   0F32 2A            mov b, [d]
1761   0F33 38 00 00      mov c, 0
1762   0F36             ; --- START RELATIONAL
1763   0F36 D7            push a
1764   0F37 11            mov a, b
1765   0F38 FA FF FF      lea d, [bp + -1] ; $scratchloc
1766   0F3B 2A            mov b, [d]
1767   0F3C 38 00 00      mov c, 0
1768   0F3F B0            cmp a, b
1769   0F40 FD 72         sneq ; !=
1770   0F42 E4            pop a
1771   0F43             ; --- END RELATIONAL
1772   0F43 D7            push a
1773   0F44 11            mov a, b
1774   0F45 3B FA 17      mov d, _cave_data ; $cave
1775   0F48 D7            push a
1776   0F49 DA            push d
1777   0F4A 3B EC 17      mov d, _loc_data ; $loc
1778   0F4D D7            push a
1779   0F4E DA            push d
1780   0F4F FD 2E 00 00   mov32 cb, $00000000
1780   0F53 00 00 
1781   0F55 E7            pop d
1782   0F56 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1783   0F5A E4            pop a
1784   0F5B 2A            mov b, [d]
1785   0F5C 38 00 00      mov c, 0
1786   0F5F E7            pop d
1787   0F60 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
1788   0F64 DA            push d
1789   0F65 FD 2E 01 00   mov32 cb, $00000001
1789   0F69 00 00 
1790   0F6B E7            pop d
1791   0F6C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1792   0F70 E4            pop a
1793   0F71 2A            mov b, [d]
1794   0F72 38 00 00      mov c, 0
1795   0F75             ; --- START RELATIONAL
1796   0F75 D7            push a
1797   0F76 11            mov a, b
1798   0F77 FA FF FF      lea d, [bp + -1] ; $scratchloc
1799   0F7A 2A            mov b, [d]
1800   0F7B 38 00 00      mov c, 0
1801   0F7E B0            cmp a, b
1802   0F7F FD 72         sneq ; !=
1803   0F81 E4            pop a
1804   0F82             ; --- END RELATIONAL
1805   0F82 FD 92         and b, a ; &
1806   0F84 11            mov a, b
1807   0F85 3B FA 17      mov d, _cave_data ; $cave
1808   0F88 D7            push a
1809   0F89 DA            push d
1810   0F8A 3B EC 17      mov d, _loc_data ; $loc
1811   0F8D D7            push a
1812   0F8E DA            push d
1813   0F8F FD 2E 00 00   mov32 cb, $00000000
1813   0F93 00 00 
1814   0F95 E7            pop d
1815   0F96 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1816   0F9A E4            pop a
1817   0F9B 2A            mov b, [d]
1818   0F9C 38 00 00      mov c, 0
1819   0F9F E7            pop d
1820   0FA0 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
1821   0FA4 DA            push d
1822   0FA5 FD 2E 02 00   mov32 cb, $00000002
1822   0FA9 00 00 
1823   0FAB E7            pop d
1824   0FAC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1825   0FB0 E4            pop a
1826   0FB1 2A            mov b, [d]
1827   0FB2 38 00 00      mov c, 0
1828   0FB5             ; --- START RELATIONAL
1829   0FB5 D7            push a
1830   0FB6 11            mov a, b
1831   0FB7 FA FF FF      lea d, [bp + -1] ; $scratchloc
1832   0FBA 2A            mov b, [d]
1833   0FBB 38 00 00      mov c, 0
1834   0FBE B0            cmp a, b
1835   0FBF FD 72         sneq ; !=
1836   0FC1 E4            pop a
1837   0FC2             ; --- END RELATIONAL
1838   0FC2 FD 92         and b, a ; &
1839   0FC4 11            mov a, b
1840   0FC5 3B EC 17      mov d, _loc_data ; $loc
1841   0FC8 D7            push a
1842   0FC9 DA            push d
1843   0FCA FD 2E 00 00   mov32 cb, $00000000
1843   0FCE 00 00 
1844   0FD0 E7            pop d
1845   0FD1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1846   0FD5 E4            pop a
1847   0FD6 2A            mov b, [d]
1848   0FD7 38 00 00      mov c, 0
1849   0FDA             ; --- START RELATIONAL
1850   0FDA D7            push a
1851   0FDB 11            mov a, b
1852   0FDC FA FF FF      lea d, [bp + -1] ; $scratchloc
1853   0FDF 2A            mov b, [d]
1854   0FE0 38 00 00      mov c, 0
1855   0FE3 B0            cmp a, b
1856   0FE4 FD 72         sneq ; !=
1857   0FE6 E4            pop a
1858   0FE7             ; --- END RELATIONAL
1859   0FE7 FD 92         and b, a ; &
1860   0FE9 E4            pop a
1861   0FEA C0 00 00      cmp b, 0
1862   0FED C6 0F 10      je _if29_exit
1863   0FF0             _if29_TRUE:
1864   0FF0             ; print("NOT POSSIBLE\n"); 
1865   0FF0             ; --- START FUNCTION CALL
1866   0FF0 26 4B 1F      mov b, _s53 ; "NOT POSSIBLE\n"
1867   0FF3 FD AB         swp b
1868   0FF5 D8            push b
1869   0FF6 07 09 15      call print
1870   0FF9 51 02 00      add sp, 2
1871   0FFC             ; --- END FUNCTION CALL
1872   0FFC             ; scratchloc = -1; 
1873   0FFC FA FF FF      lea d, [bp + -1] ; $scratchloc
1874   0FFF DA            push d
1875   1000 FD 2E FF FF   mov32 cb, $ffffffff
1875   1004 FF FF 
1876   1006 E7            pop d
1877   1007 FD 43         mov [d], b
1878   1009             ; continue; 
1879   1009 0A 8B 0E      jmp _while27_cond ; while continue
1880   100C 0A 0F 10      jmp _if29_exit
1881   100F             _if29_exit:
1882   100F 0A 8B 0E      jmp _while27_cond
1883   1012             _while27_exit:
1884   1012             ; loc[	    0   ] = scratchloc; 
1885   1012 3B EC 17      mov d, _loc_data ; $loc
1886   1015 D7            push a
1887   1016 DA            push d
1888   1017 FD 2E 00 00   mov32 cb, $00000000
1888   101B 00 00 
1889   101D E7            pop d
1890   101E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1891   1022 E4            pop a
1892   1023 DA            push d
1893   1024 FA FF FF      lea d, [bp + -1] ; $scratchloc
1894   1027 2A            mov b, [d]
1895   1028 38 00 00      mov c, 0
1896   102B E7            pop d
1897   102C FD 43         mov [d], b
1898   102E             ; while ((scratchloc == loc[	4     ]) || (scratchloc == loc[	5     ])) { 
1899   102E             _while30_cond:
1900   102E FA FF FF      lea d, [bp + -1] ; $scratchloc
1901   1031 2A            mov b, [d]
1902   1032 38 00 00      mov c, 0
1903   1035             ; --- START RELATIONAL
1904   1035 D7            push a
1905   1036 11            mov a, b
1906   1037 3B EC 17      mov d, _loc_data ; $loc
1907   103A D7            push a
1908   103B DA            push d
1909   103C FD 2E 04 00   mov32 cb, $00000004
1909   1040 00 00 
1910   1042 E7            pop d
1911   1043 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1912   1047 E4            pop a
1913   1048 2A            mov b, [d]
1914   1049 38 00 00      mov c, 0
1915   104C B0            cmp a, b
1916   104D FD 71         seq ; ==
1917   104F E4            pop a
1918   1050             ; --- END RELATIONAL
1919   1050             ; --- START LOGICAL OR
1920   1050 D7            push a
1921   1051 11            mov a, b
1922   1052 FA FF FF      lea d, [bp + -1] ; $scratchloc
1923   1055 2A            mov b, [d]
1924   1056 38 00 00      mov c, 0
1925   1059             ; --- START RELATIONAL
1926   1059 D7            push a
1927   105A 11            mov a, b
1928   105B 3B EC 17      mov d, _loc_data ; $loc
1929   105E D7            push a
1930   105F DA            push d
1931   1060 FD 2E 05 00   mov32 cb, $00000005
1931   1064 00 00 
1932   1066 E7            pop d
1933   1067 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1934   106B E4            pop a
1935   106C 2A            mov b, [d]
1936   106D 38 00 00      mov c, 0
1937   1070 B0            cmp a, b
1938   1071 FD 71         seq ; ==
1939   1073 E4            pop a
1940   1074             ; --- END RELATIONAL
1941   1074 FD A8         sor a, b ; ||
1942   1076 E4            pop a
1943   1077             ; --- END LOGICAL OR
1944   1077 C0 00 00      cmp b, 0
1945   107A C6 C3 10      je _while30_exit
1946   107D             _while30_block:
1947   107D             ; print("ZAP--SUPER BAT SNATCH! ELSEWHEREVILLE FOR YOU!\n"); 
1948   107D             ; --- START FUNCTION CALL
1949   107D 26 59 1F      mov b, _s54 ; "ZAP--SUPER BAT SNATCH! ELSEWHEREVILLE FOR YOU!\n"
1950   1080 FD AB         swp b
1951   1082 D8            push b
1952   1083 07 09 15      call print
1953   1086 51 02 00      add sp, 2
1954   1089             ; --- END FUNCTION CALL
1955   1089             ; scratchloc = loc[	    0   ] = rand2()%20; 
1956   1089 FA FF FF      lea d, [bp + -1] ; $scratchloc
1957   108C DA            push d
1958   108D 3B EC 17      mov d, _loc_data ; $loc
1959   1090 D7            push a
1960   1091 DA            push d
1961   1092 FD 2E 00 00   mov32 cb, $00000000
1961   1096 00 00 
1962   1098 E7            pop d
1963   1099 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1964   109D E4            pop a
1965   109E DA            push d
1966   109F             ; --- START FUNCTION CALL
1967   109F 07 6A 11      call rand2
1968   10A2             ; --- START FACTORS
1969   10A2 D7            push a
1970   10A3 FD D8         push g
1971   10A5 11            mov a, b
1972   10A6 FD 7A         mov g, c
1973   10A8 FD 2E 14 00   mov32 cb, $00000014
1973   10AC 00 00 
1974   10AE FD D8         push g ; save 'g' as the div instruction uses it
1975   10B0 AE            div a, b ; %, a: quotient, b: remainder
1976   10B1 11            mov a, b
1977   10B2 FD F1         pop g
1978   10B4 FD 38         mov c, g
1979   10B6 27            mov b, a
1980   10B7 FD F1         pop g
1981   10B9 E4            pop a
1982   10BA             ; --- END FACTORS
1983   10BA E7            pop d
1984   10BB FD 43         mov [d], b
1985   10BD E7            pop d
1986   10BE FD 43         mov [d], b
1987   10C0 0A 2E 10      jmp _while30_cond
1988   10C3             _while30_exit:
1989   10C3             ; if (scratchloc == loc[	1      ]) { 
1990   10C3             _if33_cond:
1991   10C3 FA FF FF      lea d, [bp + -1] ; $scratchloc
1992   10C6 2A            mov b, [d]
1993   10C7 38 00 00      mov c, 0
1994   10CA             ; --- START RELATIONAL
1995   10CA D7            push a
1996   10CB 11            mov a, b
1997   10CC 3B EC 17      mov d, _loc_data ; $loc
1998   10CF D7            push a
1999   10D0 DA            push d
2000   10D1 FD 2E 01 00   mov32 cb, $00000001
2000   10D5 00 00 
2001   10D7 E7            pop d
2002   10D8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2003   10DC E4            pop a
2004   10DD 2A            mov b, [d]
2005   10DE 38 00 00      mov c, 0
2006   10E1 B0            cmp a, b
2007   10E2 FD 71         seq ; ==
2008   10E4 E4            pop a
2009   10E5             ; --- END RELATIONAL
2010   10E5 C0 00 00      cmp b, 0
2011   10E8 C6 FD 10      je _if33_exit
2012   10EB             _if33_TRUE:
2013   10EB             ; print("... OOPS! BUMPED A WUMPUS!\n"); 
2014   10EB             ; --- START FUNCTION CALL
2015   10EB 26 89 1F      mov b, _s55 ; "... OOPS! BUMPED A WUMPUS!\n"
2016   10EE FD AB         swp b
2017   10F0 D8            push b
2018   10F1 07 09 15      call print
2019   10F4 51 02 00      add sp, 2
2020   10F7             ; --- END FUNCTION CALL
2021   10F7             ; move_wumpus(); 
2022   10F7             ; --- START FUNCTION CALL
2023   10F7 07 E9 09      call move_wumpus
2024   10FA 0A FD 10      jmp _if33_exit
2025   10FD             _if33_exit:
2026   10FD             ; if (scratchloc == loc[	2    ] || scratchloc == loc[	3    ]) { 
2027   10FD             _if34_cond:
2028   10FD FA FF FF      lea d, [bp + -1] ; $scratchloc
2029   1100 2A            mov b, [d]
2030   1101 38 00 00      mov c, 0
2031   1104             ; --- START RELATIONAL
2032   1104 D7            push a
2033   1105 11            mov a, b
2034   1106 3B EC 17      mov d, _loc_data ; $loc
2035   1109 D7            push a
2036   110A DA            push d
2037   110B FD 2E 02 00   mov32 cb, $00000002
2037   110F 00 00 
2038   1111 E7            pop d
2039   1112 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2040   1116 E4            pop a
2041   1117 2A            mov b, [d]
2042   1118 38 00 00      mov c, 0
2043   111B B0            cmp a, b
2044   111C FD 71         seq ; ==
2045   111E E4            pop a
2046   111F             ; --- END RELATIONAL
2047   111F             ; --- START LOGICAL OR
2048   111F D7            push a
2049   1120 11            mov a, b
2050   1121 FA FF FF      lea d, [bp + -1] ; $scratchloc
2051   1124 2A            mov b, [d]
2052   1125 38 00 00      mov c, 0
2053   1128             ; --- START RELATIONAL
2054   1128 D7            push a
2055   1129 11            mov a, b
2056   112A 3B EC 17      mov d, _loc_data ; $loc
2057   112D D7            push a
2058   112E DA            push d
2059   112F FD 2E 03 00   mov32 cb, $00000003
2059   1133 00 00 
2060   1135 E7            pop d
2061   1136 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2062   113A E4            pop a
2063   113B 2A            mov b, [d]
2064   113C 38 00 00      mov c, 0
2065   113F B0            cmp a, b
2066   1140 FD 71         seq ; ==
2067   1142 E4            pop a
2068   1143             ; --- END RELATIONAL
2069   1143 FD A8         sor a, b ; ||
2070   1145 E4            pop a
2071   1146             ; --- END LOGICAL OR
2072   1146 C0 00 00      cmp b, 0
2073   1149 C6 68 11      je _if34_exit
2074   114C             _if34_TRUE:
2075   114C             ; print("YYYYIIIIEEEE . . . FELL IN PIT\n"); 
2076   114C             ; --- START FUNCTION CALL
2077   114C 26 A5 1F      mov b, _s56 ; "YYYYIIIIEEEE . . . FELL IN PIT\n"
2078   114F FD AB         swp b
2079   1151 D8            push b
2080   1152 07 09 15      call print
2081   1155 51 02 00      add sp, 2
2082   1158             ; --- END FUNCTION CALL
2083   1158             ; finished = 	2    ; 
2084   1158 3B F8 17      mov d, _finished ; $finished
2085   115B DA            push d
2086   115C FD 2E 02 00   mov32 cb, $00000002
2086   1160 00 00 
2087   1162 E7            pop d
2088   1163 FD 43         mov [d], b
2089   1165 0A 68 11      jmp _if34_exit
2090   1168             _if34_exit:
2091   1168 F9            leave
2092   1169 09            ret
2093   116A             
2094   116A             rand2:
2095   116A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2096   116D             ; rand_val=rand_val+rand_inc; 
2097   116D 3B E8 17      mov d, _rand_val ; $rand_val
2098   1170 DA            push d
2099   1171 3B E8 17      mov d, _rand_val ; $rand_val
2100   1174 2A            mov b, [d]
2101   1175 38 00 00      mov c, 0
2102   1178             ; --- START TERMS
2103   1178 D7            push a
2104   1179 11            mov a, b
2105   117A 3B EA 17      mov d, _rand_inc ; $rand_inc
2106   117D 2A            mov b, [d]
2107   117E 38 00 00      mov c, 0
2108   1181 56            add b, a
2109   1182 E4            pop a
2110   1183             ; --- END TERMS
2111   1183 E7            pop d
2112   1184 FD 43         mov [d], b
2113   1186             ; rand_inc++; 
2114   1186 3B EA 17      mov d, _rand_inc ; $rand_inc
2115   1189 2A            mov b, [d]
2116   118A 38 00 00      mov c, 0
2117   118D 11            mov a, b
2118   118E FD 77         inc b
2119   1190 3B EA 17      mov d, _rand_inc ; $rand_inc
2120   1193 FD 43         mov [d], b
2121   1195 27            mov b, a
2122   1196             ; return rand_val; 
2123   1196 3B E8 17      mov d, _rand_val ; $rand_val
2124   1199 2A            mov b, [d]
2125   119A 38 00 00      mov c, 0
2126   119D F9            leave
2127   119E 09            ret
2128   119F             
2129   119F             game_setup:
2130   119F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2131   11A2             ; int j, k; 
2132   11A2 52 02 00      sub sp, 2
2133   11A5 52 02 00      sub sp, 2
2134   11A8             ; int v; 
2135   11A8 52 02 00      sub sp, 2
2136   11AB             ; for (j = 0; j < 	6    ; j++) { 
2137   11AB             _for35_init:
2138   11AB FA FF FF      lea d, [bp + -1] ; $j
2139   11AE DA            push d
2140   11AF FD 2E 00 00   mov32 cb, $00000000
2140   11B3 00 00 
2141   11B5 E7            pop d
2142   11B6 FD 43         mov [d], b
2143   11B8             _for35_cond:
2144   11B8 FA FF FF      lea d, [bp + -1] ; $j
2145   11BB 2A            mov b, [d]
2146   11BC 38 00 00      mov c, 0
2147   11BF             ; --- START RELATIONAL
2148   11BF D7            push a
2149   11C0 11            mov a, b
2150   11C1 FD 2E 06 00   mov32 cb, $00000006
2150   11C5 00 00 
2151   11C7 B0            cmp a, b
2152   11C8 FD 73         slt ; < (signed)
2153   11CA E4            pop a
2154   11CB             ; --- END RELATIONAL
2155   11CB C0 00 00      cmp b, 0
2156   11CE C6 06 13      je _for35_exit
2157   11D1             _for35_block:
2158   11D1             ; loc[j] = -1; 
2159   11D1 3B EC 17      mov d, _loc_data ; $loc
2160   11D4 D7            push a
2161   11D5 DA            push d
2162   11D6 FA FF FF      lea d, [bp + -1] ; $j
2163   11D9 2A            mov b, [d]
2164   11DA 38 00 00      mov c, 0
2165   11DD E7            pop d
2166   11DE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2167   11E2 E4            pop a
2168   11E3 DA            push d
2169   11E4 FD 2E FF FF   mov32 cb, $ffffffff
2169   11E8 FF FF 
2170   11EA E7            pop d
2171   11EB FD 43         mov [d], b
2172   11ED             ; while (loc[j] < 0) { 
2173   11ED             _while36_cond:
2174   11ED 3B EC 17      mov d, _loc_data ; $loc
2175   11F0 D7            push a
2176   11F1 DA            push d
2177   11F2 FA FF FF      lea d, [bp + -1] ; $j
2178   11F5 2A            mov b, [d]
2179   11F6 38 00 00      mov c, 0
2180   11F9 E7            pop d
2181   11FA FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2182   11FE E4            pop a
2183   11FF 2A            mov b, [d]
2184   1200 38 00 00      mov c, 0
2185   1203             ; --- START RELATIONAL
2186   1203 D7            push a
2187   1204 11            mov a, b
2188   1205 FD 2E 00 00   mov32 cb, $00000000
2188   1209 00 00 
2189   120B B0            cmp a, b
2190   120C FD 73         slt ; < (signed)
2191   120E E4            pop a
2192   120F             ; --- END RELATIONAL
2193   120F C0 00 00      cmp b, 0
2194   1212 C6 F3 12      je _while36_exit
2195   1215             _while36_block:
2196   1215             ; v = rand2(); 
2197   1215 FA FB FF      lea d, [bp + -5] ; $v
2198   1218 DA            push d
2199   1219             ; --- START FUNCTION CALL
2200   1219 07 6A 11      call rand2
2201   121C E7            pop d
2202   121D FD 43         mov [d], b
2203   121F             ; loc[j] = v % 20; 
2204   121F 3B EC 17      mov d, _loc_data ; $loc
2205   1222 D7            push a
2206   1223 DA            push d
2207   1224 FA FF FF      lea d, [bp + -1] ; $j
2208   1227 2A            mov b, [d]
2209   1228 38 00 00      mov c, 0
2210   122B E7            pop d
2211   122C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2212   1230 E4            pop a
2213   1231 DA            push d
2214   1232 FA FB FF      lea d, [bp + -5] ; $v
2215   1235 2A            mov b, [d]
2216   1236 38 00 00      mov c, 0
2217   1239             ; --- START FACTORS
2218   1239 D7            push a
2219   123A FD D8         push g
2220   123C 11            mov a, b
2221   123D FD 7A         mov g, c
2222   123F FD 2E 14 00   mov32 cb, $00000014
2222   1243 00 00 
2223   1245 FD D8         push g ; save 'g' as the div instruction uses it
2224   1247 AE            div a, b ; %, a: quotient, b: remainder
2225   1248 11            mov a, b
2226   1249 FD F1         pop g
2227   124B FD 38         mov c, g
2228   124D 27            mov b, a
2229   124E FD F1         pop g
2230   1250 E4            pop a
2231   1251             ; --- END FACTORS
2232   1251 E7            pop d
2233   1252 FD 43         mov [d], b
2234   1254             ; for (k=0; k < j - 1; k++) { 
2235   1254             _for39_init:
2236   1254 FA FD FF      lea d, [bp + -3] ; $k
2237   1257 DA            push d
2238   1258 FD 2E 00 00   mov32 cb, $00000000
2238   125C 00 00 
2239   125E E7            pop d
2240   125F FD 43         mov [d], b
2241   1261             _for39_cond:
2242   1261 FA FD FF      lea d, [bp + -3] ; $k
2243   1264 2A            mov b, [d]
2244   1265 38 00 00      mov c, 0
2245   1268             ; --- START RELATIONAL
2246   1268 D7            push a
2247   1269 11            mov a, b
2248   126A FA FF FF      lea d, [bp + -1] ; $j
2249   126D 2A            mov b, [d]
2250   126E 38 00 00      mov c, 0
2251   1271             ; --- START TERMS
2252   1271 D7            push a
2253   1272 11            mov a, b
2254   1273 FD 2E 01 00   mov32 cb, $00000001
2254   1277 00 00 
2255   1279 60            sub a, b
2256   127A 27            mov b, a
2257   127B E4            pop a
2258   127C             ; --- END TERMS
2259   127C B0            cmp a, b
2260   127D FD 73         slt ; < (signed)
2261   127F E4            pop a
2262   1280             ; --- END RELATIONAL
2263   1280 C0 00 00      cmp b, 0
2264   1283 C6 F0 12      je _for39_exit
2265   1286             _for39_block:
2266   1286             ; if (loc[j] == loc[k]) { 
2267   1286             _if40_cond:
2268   1286 3B EC 17      mov d, _loc_data ; $loc
2269   1289 D7            push a
2270   128A DA            push d
2271   128B FA FF FF      lea d, [bp + -1] ; $j
2272   128E 2A            mov b, [d]
2273   128F 38 00 00      mov c, 0
2274   1292 E7            pop d
2275   1293 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2276   1297 E4            pop a
2277   1298 2A            mov b, [d]
2278   1299 38 00 00      mov c, 0
2279   129C             ; --- START RELATIONAL
2280   129C D7            push a
2281   129D 11            mov a, b
2282   129E 3B EC 17      mov d, _loc_data ; $loc
2283   12A1 D7            push a
2284   12A2 DA            push d
2285   12A3 FA FD FF      lea d, [bp + -3] ; $k
2286   12A6 2A            mov b, [d]
2287   12A7 38 00 00      mov c, 0
2288   12AA E7            pop d
2289   12AB FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2290   12AF E4            pop a
2291   12B0 2A            mov b, [d]
2292   12B1 38 00 00      mov c, 0
2293   12B4 B0            cmp a, b
2294   12B5 FD 71         seq ; ==
2295   12B7 E4            pop a
2296   12B8             ; --- END RELATIONAL
2297   12B8 C0 00 00      cmp b, 0
2298   12BB C6 DD 12      je _if40_exit
2299   12BE             _if40_TRUE:
2300   12BE             ; loc[j] = -1; 
2301   12BE 3B EC 17      mov d, _loc_data ; $loc
2302   12C1 D7            push a
2303   12C2 DA            push d
2304   12C3 FA FF FF      lea d, [bp + -1] ; $j
2305   12C6 2A            mov b, [d]
2306   12C7 38 00 00      mov c, 0
2307   12CA E7            pop d
2308   12CB FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2309   12CF E4            pop a
2310   12D0 DA            push d
2311   12D1 FD 2E FF FF   mov32 cb, $ffffffff
2311   12D5 FF FF 
2312   12D7 E7            pop d
2313   12D8 FD 43         mov [d], b
2314   12DA 0A DD 12      jmp _if40_exit
2315   12DD             _if40_exit:
2316   12DD             _for39_update:
2317   12DD FA FD FF      lea d, [bp + -3] ; $k
2318   12E0 2A            mov b, [d]
2319   12E1 38 00 00      mov c, 0
2320   12E4 11            mov a, b
2321   12E5 FD 77         inc b
2322   12E7 FA FD FF      lea d, [bp + -3] ; $k
2323   12EA FD 43         mov [d], b
2324   12EC 27            mov b, a
2325   12ED 0A 61 12      jmp _for39_cond
2326   12F0             _for39_exit:
2327   12F0 0A ED 11      jmp _while36_cond
2328   12F3             _while36_exit:
2329   12F3             _for35_update:
2330   12F3 FA FF FF      lea d, [bp + -1] ; $j
2331   12F6 2A            mov b, [d]
2332   12F7 38 00 00      mov c, 0
2333   12FA 11            mov a, b
2334   12FB FD 77         inc b
2335   12FD FA FF FF      lea d, [bp + -1] ; $j
2336   1300 FD 43         mov [d], b
2337   1302 27            mov b, a
2338   1303 0A B8 11      jmp _for35_cond
2339   1306             _for35_exit:
2340   1306 F9            leave
2341   1307 09            ret
2342   1308             
2343   1308             game_play:
2344   1308 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2345   130B             ; arrows = 5; 
2346   130B 3B E4 17      mov d, _arrows ; $arrows
2347   130E DA            push d
2348   130F FD 2E 05 00   mov32 cb, $00000005
2348   1313 00 00 
2349   1315 E7            pop d
2350   1316 FD 43         mov [d], b
2351   1318             ; print("HUNT THE WUMPUS\n"); 
2352   1318             ; --- START FUNCTION CALL
2353   1318 26 C5 1F      mov b, _s57 ; "HUNT THE WUMPUS\n"
2354   131B FD AB         swp b
2355   131D D8            push b
2356   131E 07 09 15      call print
2357   1321 51 02 00      add sp, 2
2358   1324             ; --- END FUNCTION CALL
2359   1324             ; if (debug) { 
2360   1324             _if41_cond:
2361   1324 3B E6 17      mov d, _debug ; $debug
2362   1327 2A            mov b, [d]
2363   1328 38 00 00      mov c, 0
2364   132B C0 00 00      cmp b, 0
2365   132E C6 38 14      je _if41_exit
2366   1331             _if41_TRUE:
2367   1331             ; print("Wumpus is at "); print_unsigned(loc[	1      ]+1); 
2368   1331             ; --- START FUNCTION CALL
2369   1331 26 D6 1F      mov b, _s58 ; "Wumpus is at "
2370   1334 FD AB         swp b
2371   1336 D8            push b
2372   1337 07 09 15      call print
2373   133A 51 02 00      add sp, 2
2374   133D             ; --- END FUNCTION CALL
2375   133D             ; print_unsigned(loc[	1      ]+1); 
2376   133D             ; --- START FUNCTION CALL
2377   133D 3B EC 17      mov d, _loc_data ; $loc
2378   1340 D7            push a
2379   1341 DA            push d
2380   1342 FD 2E 01 00   mov32 cb, $00000001
2380   1346 00 00 
2381   1348 E7            pop d
2382   1349 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2383   134D E4            pop a
2384   134E 2A            mov b, [d]
2385   134F 38 00 00      mov c, 0
2386   1352             ; --- START TERMS
2387   1352 D7            push a
2388   1353 11            mov a, b
2389   1354 FD 2E 01 00   mov32 cb, $00000001
2389   1358 00 00 
2390   135A 56            add b, a
2391   135B E4            pop a
2392   135C             ; --- END TERMS
2393   135C FD AB         swp b
2394   135E D8            push b
2395   135F 07 A2 15      call print_unsigned
2396   1362 51 02 00      add sp, 2
2397   1365             ; --- END FUNCTION CALL
2398   1365             ; print(", pits at "); print_unsigned(loc[	2    ]+1); 
2399   1365             ; --- START FUNCTION CALL
2400   1365 26 E4 1F      mov b, _s59 ; ", pits at "
2401   1368 FD AB         swp b
2402   136A D8            push b
2403   136B 07 09 15      call print
2404   136E 51 02 00      add sp, 2
2405   1371             ; --- END FUNCTION CALL
2406   1371             ; print_unsigned(loc[	2    ]+1); 
2407   1371             ; --- START FUNCTION CALL
2408   1371 3B EC 17      mov d, _loc_data ; $loc
2409   1374 D7            push a
2410   1375 DA            push d
2411   1376 FD 2E 02 00   mov32 cb, $00000002
2411   137A 00 00 
2412   137C E7            pop d
2413   137D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2414   1381 E4            pop a
2415   1382 2A            mov b, [d]
2416   1383 38 00 00      mov c, 0
2417   1386             ; --- START TERMS
2418   1386 D7            push a
2419   1387 11            mov a, b
2420   1388 FD 2E 01 00   mov32 cb, $00000001
2420   138C 00 00 
2421   138E 56            add b, a
2422   138F E4            pop a
2423   1390             ; --- END TERMS
2424   1390 FD AB         swp b
2425   1392 D8            push b
2426   1393 07 A2 15      call print_unsigned
2427   1396 51 02 00      add sp, 2
2428   1399             ; --- END FUNCTION CALL
2429   1399             ; print(" & "); print_unsigned(loc[	3    ]+1); 
2430   1399             ; --- START FUNCTION CALL
2431   1399 26 EF 1F      mov b, _s60 ; " & "
2432   139C FD AB         swp b
2433   139E D8            push b
2434   139F 07 09 15      call print
2435   13A2 51 02 00      add sp, 2
2436   13A5             ; --- END FUNCTION CALL
2437   13A5             ; print_unsigned(loc[	3    ]+1); 
2438   13A5             ; --- START FUNCTION CALL
2439   13A5 3B EC 17      mov d, _loc_data ; $loc
2440   13A8 D7            push a
2441   13A9 DA            push d
2442   13AA FD 2E 03 00   mov32 cb, $00000003
2442   13AE 00 00 
2443   13B0 E7            pop d
2444   13B1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2445   13B5 E4            pop a
2446   13B6 2A            mov b, [d]
2447   13B7 38 00 00      mov c, 0
2448   13BA             ; --- START TERMS
2449   13BA D7            push a
2450   13BB 11            mov a, b
2451   13BC FD 2E 01 00   mov32 cb, $00000001
2451   13C0 00 00 
2452   13C2 56            add b, a
2453   13C3 E4            pop a
2454   13C4             ; --- END TERMS
2455   13C4 FD AB         swp b
2456   13C6 D8            push b
2457   13C7 07 A2 15      call print_unsigned
2458   13CA 51 02 00      add sp, 2
2459   13CD             ; --- END FUNCTION CALL
2460   13CD             ; print(", bats at "); print_unsigned(loc[	4     ]+1); 
2461   13CD             ; --- START FUNCTION CALL
2462   13CD 26 F3 1F      mov b, _s61 ; ", bats at "
2463   13D0 FD AB         swp b
2464   13D2 D8            push b
2465   13D3 07 09 15      call print
2466   13D6 51 02 00      add sp, 2
2467   13D9             ; --- END FUNCTION CALL
2468   13D9             ; print_unsigned(loc[	4     ]+1); 
2469   13D9             ; --- START FUNCTION CALL
2470   13D9 3B EC 17      mov d, _loc_data ; $loc
2471   13DC D7            push a
2472   13DD DA            push d
2473   13DE FD 2E 04 00   mov32 cb, $00000004
2473   13E2 00 00 
2474   13E4 E7            pop d
2475   13E5 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2476   13E9 E4            pop a
2477   13EA 2A            mov b, [d]
2478   13EB 38 00 00      mov c, 0
2479   13EE             ; --- START TERMS
2480   13EE D7            push a
2481   13EF 11            mov a, b
2482   13F0 FD 2E 01 00   mov32 cb, $00000001
2482   13F4 00 00 
2483   13F6 56            add b, a
2484   13F7 E4            pop a
2485   13F8             ; --- END TERMS
2486   13F8 FD AB         swp b
2487   13FA D8            push b
2488   13FB 07 A2 15      call print_unsigned
2489   13FE 51 02 00      add sp, 2
2490   1401             ; --- END FUNCTION CALL
2491   1401             ; print(" & "); print_unsigned(loc[	5     ]+1); 
2492   1401             ; --- START FUNCTION CALL
2493   1401 26 EF 1F      mov b, _s60 ; " & "
2494   1404 FD AB         swp b
2495   1406 D8            push b
2496   1407 07 09 15      call print
2497   140A 51 02 00      add sp, 2
2498   140D             ; --- END FUNCTION CALL
2499   140D             ; print_unsigned(loc[	5     ]+1); 
2500   140D             ; --- START FUNCTION CALL
2501   140D 3B EC 17      mov d, _loc_data ; $loc
2502   1410 D7            push a
2503   1411 DA            push d
2504   1412 FD 2E 05 00   mov32 cb, $00000005
2504   1416 00 00 
2505   1418 E7            pop d
2506   1419 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2507   141D E4            pop a
2508   141E 2A            mov b, [d]
2509   141F 38 00 00      mov c, 0
2510   1422             ; --- START TERMS
2511   1422 D7            push a
2512   1423 11            mov a, b
2513   1424 FD 2E 01 00   mov32 cb, $00000001
2513   1428 00 00 
2514   142A 56            add b, a
2515   142B E4            pop a
2516   142C             ; --- END TERMS
2517   142C FD AB         swp b
2518   142E D8            push b
2519   142F 07 A2 15      call print_unsigned
2520   1432 51 02 00      add sp, 2
2521   1435             ; --- END FUNCTION CALL
2522   1435 0A 38 14      jmp _if41_exit
2523   1438             _if41_exit:
2524   1438             ; finished = 	     0   ; 
2525   1438 3B F8 17      mov d, _finished ; $finished
2526   143B DA            push d
2527   143C FD 2E 00 00   mov32 cb, $00000000
2527   1440 00 00 
2528   1442 E7            pop d
2529   1443 FD 43         mov [d], b
2530   1445             ; while (finished == 	     0   ) { 
2531   1445             _while42_cond:
2532   1445 3B F8 17      mov d, _finished ; $finished
2533   1448 2A            mov b, [d]
2534   1449 38 00 00      mov c, 0
2535   144C             ; --- START RELATIONAL
2536   144C D7            push a
2537   144D 11            mov a, b
2538   144E FD 2E 00 00   mov32 cb, $00000000
2538   1452 00 00 
2539   1454 B0            cmp a, b
2540   1455 FD 71         seq ; ==
2541   1457 E4            pop a
2542   1458             ; --- END RELATIONAL
2543   1458 C0 00 00      cmp b, 0
2544   145B C6 76 14      je _while42_exit
2545   145E             _while42_block:
2546   145E             ; show_room(); 
2547   145E             ; --- START FUNCTION CALL
2548   145E 07 B1 06      call show_room
2549   1461             ; if (move_or_shoot()) { 
2550   1461             _if43_cond:
2551   1461             ; --- START FUNCTION CALL
2552   1461 07 65 09      call move_or_shoot
2553   1464 C0 00 00      cmp b, 0
2554   1467 C6 70 14      je _if43_else
2555   146A             _if43_TRUE:
2556   146A             ; shoot(); 
2557   146A             ; --- START FUNCTION CALL
2558   146A 07 C7 0A      call shoot
2559   146D 0A 73 14      jmp _if43_exit
2560   1470             _if43_else:
2561   1470             ; move(); 
2562   1470             ; --- START FUNCTION CALL
2563   1470 07 78 0E      call move
2564   1473             _if43_exit:
2565   1473 0A 45 14      jmp _while42_cond
2566   1476             _while42_exit:
2567   1476             ; if (finished == 	     1   ) { 
2568   1476             _if44_cond:
2569   1476 3B F8 17      mov d, _finished ; $finished
2570   1479 2A            mov b, [d]
2571   147A 38 00 00      mov c, 0
2572   147D             ; --- START RELATIONAL
2573   147D D7            push a
2574   147E 11            mov a, b
2575   147F FD 2E 01 00   mov32 cb, $00000001
2575   1483 00 00 
2576   1485 B0            cmp a, b
2577   1486 FD 71         seq ; ==
2578   1488 E4            pop a
2579   1489             ; --- END RELATIONAL
2580   1489 C0 00 00      cmp b, 0
2581   148C C6 9E 14      je _if44_exit
2582   148F             _if44_TRUE:
2583   148F             ; print("HEE HEE HEE - THE WUMPUS'LL GET YOU NEXT TIME!!\n"); 
2584   148F             ; --- START FUNCTION CALL
2585   148F 26 FE 1F      mov b, _s62 ; "HEE HEE HEE - THE WUMPUS'LL GET YOU NEXT TIME!!\n"
2586   1492 FD AB         swp b
2587   1494 D8            push b
2588   1495 07 09 15      call print
2589   1498 51 02 00      add sp, 2
2590   149B             ; --- END FUNCTION CALL
2591   149B 0A 9E 14      jmp _if44_exit
2592   149E             _if44_exit:
2593   149E             ; if (finished == 	2    ) { 
2594   149E             _if45_cond:
2595   149E 3B F8 17      mov d, _finished ; $finished
2596   14A1 2A            mov b, [d]
2597   14A2 38 00 00      mov c, 0
2598   14A5             ; --- START RELATIONAL
2599   14A5 D7            push a
2600   14A6 11            mov a, b
2601   14A7 FD 2E 02 00   mov32 cb, $00000002
2601   14AB 00 00 
2602   14AD B0            cmp a, b
2603   14AE FD 71         seq ; ==
2604   14B0 E4            pop a
2605   14B1             ; --- END RELATIONAL
2606   14B1 C0 00 00      cmp b, 0
2607   14B4 C6 C6 14      je _if45_exit
2608   14B7             _if45_TRUE:
2609   14B7             ; print("HA HA HA - YOU LOSE!\n"); 
2610   14B7             ; --- START FUNCTION CALL
2611   14B7 26 2E 20      mov b, _s63 ; "HA HA HA - YOU LOSE!\n"
2612   14BA FD AB         swp b
2613   14BC D8            push b
2614   14BD 07 09 15      call print
2615   14C0 51 02 00      add sp, 2
2616   14C3             ; --- END FUNCTION CALL
2617   14C3 0A C6 14      jmp _if45_exit
2618   14C6             _if45_exit:
2619   14C6             ; int c; 
2620   14C6 52 02 00      sub sp, 2
2621   14C9             ; c = getlet("NEW GAME (Y-N): "); 
2622   14C9 FA FF FF      lea d, [bp + -1] ; $c
2623   14CC DA            push d
2624   14CD             ; --- START FUNCTION CALL
2625   14CD 26 8B 18      mov b, _s1 ; "NEW GAME (Y-N): "
2626   14D0 FD AB         swp b
2627   14D2 D8            push b
2628   14D3 07 93 04      call getlet
2629   14D6 51 02 00      add sp, 2
2630   14D9             ; --- END FUNCTION CALL
2631   14D9 E7            pop d
2632   14DA FD 43         mov [d], b
2633   14DC             ; if (c == 'N') { 
2634   14DC             _if46_cond:
2635   14DC FA FF FF      lea d, [bp + -1] ; $c
2636   14DF 2A            mov b, [d]
2637   14E0 38 00 00      mov c, 0
2638   14E3             ; --- START RELATIONAL
2639   14E3 D7            push a
2640   14E4 11            mov a, b
2641   14E5 FD 2E 4E 00   mov32 cb, $0000004e
2641   14E9 00 00 
2642   14EB B0            cmp a, b
2643   14EC FD 71         seq ; ==
2644   14EE E4            pop a
2645   14EF             ; --- END RELATIONAL
2646   14EF C0 00 00      cmp b, 0
2647   14F2 C6 07 15      je _if46_exit
2648   14F5             _if46_TRUE:
2649   14F5             ; exit(1); 
2650   14F5             ; --- START FUNCTION CALL
2651   14F5 FD 2E 01 00   mov32 cb, $00000001
2651   14F9 00 00 
2652   14FB FD AB         swp b
2653   14FD D8            push b
2654   14FE 07 D9 17      call exit
2655   1501 51 02 00      add sp, 2
2656   1504             ; --- END FUNCTION CALL
2657   1504 0A 07 15      jmp _if46_exit
2658   1507             _if46_exit:
2659   1507 F9            leave
2660   1508 09            ret
2661   1509             
2662   1509             print:
2663   1509 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2664   150C             ; --- BEGIN INLINE ASM SEGMENT
2665   150C FA 05 00      lea d, [bp + 5] ; $s
2666   150F FD 2A         mov d, [d]
2667   1511             _puts_L1_print:
2668   1511 1E            mov al, [d]
2669   1512 B9 00         cmp al, 0
2670   1514 C6 20 15      jz _puts_END_print
2671   1517 23            mov ah, al
2672   1518 19 00         mov al, 0
2673   151A 05 03         syscall sys_io
2674   151C 79            inc d
2675   151D 0A 11 15      jmp _puts_L1_print
2676   1520             _puts_END_print:
2677   1520             ; --- END INLINE ASM SEGMENT
2678   1520 F9            leave
2679   1521 09            ret
2680   1522             
2681   1522             getchar:
2682   1522 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2683   1525             ; char c; 
2684   1525 52 01 00      sub sp, 1
2685   1528             ; --- BEGIN INLINE ASM SEGMENT
2686   1528 19 01         mov al, 1
2687   152A 05 03         syscall sys_io      ; receive in AH
2688   152C 1A            mov al, ah
2689   152D FA 00 00      lea d, [bp + 0] ; $c
2690   1530 3E            mov [d], al
2691   1531             ; --- END INLINE ASM SEGMENT
2692   1531             ; return c; 
2693   1531 FA 00 00      lea d, [bp + 0] ; $c
2694   1534 32            mov bl, [d]
2695   1535 A7 00         mov bh, 0
2696   1537 38 00 00      mov c, 0
2697   153A F9            leave
2698   153B 09            ret
2699   153C             
2700   153C             toupper:
2701   153C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2702   153F             ; if (ch >= 'a' && ch <= 'z')  
2703   153F             _if47_cond:
2704   153F FA 05 00      lea d, [bp + 5] ; $ch
2705   1542 32            mov bl, [d]
2706   1543 A7 00         mov bh, 0
2707   1545 38 00 00      mov c, 0
2708   1548             ; --- START RELATIONAL
2709   1548 D7            push a
2710   1549 11            mov a, b
2711   154A FD 2E 61 00   mov32 cb, $00000061
2711   154E 00 00 
2712   1550 B0            cmp a, b
2713   1551 FD 80         sge ; >=
2714   1553 E4            pop a
2715   1554             ; --- END RELATIONAL
2716   1554             ; --- START LOGICAL AND
2717   1554 D7            push a
2718   1555 11            mov a, b
2719   1556 FA 05 00      lea d, [bp + 5] ; $ch
2720   1559 32            mov bl, [d]
2721   155A A7 00         mov bh, 0
2722   155C 38 00 00      mov c, 0
2723   155F             ; --- START RELATIONAL
2724   155F D7            push a
2725   1560 11            mov a, b
2726   1561 FD 2E 7A 00   mov32 cb, $0000007a
2726   1565 00 00 
2727   1567 B0            cmp a, b
2728   1568 FD 74         sle ; <= (signed)
2729   156A E4            pop a
2730   156B             ; --- END RELATIONAL
2731   156B FD A7         sand a, b
2732   156D E4            pop a
2733   156E             ; --- END LOGICAL AND
2734   156E C0 00 00      cmp b, 0
2735   1571 C6 95 15      je _if47_else
2736   1574             _if47_TRUE:
2737   1574             ; return ch - 'a' + 'A'; 
2738   1574 FA 05 00      lea d, [bp + 5] ; $ch
2739   1577 32            mov bl, [d]
2740   1578 A7 00         mov bh, 0
2741   157A 38 00 00      mov c, 0
2742   157D             ; --- START TERMS
2743   157D D7            push a
2744   157E 11            mov a, b
2745   157F FD 2E 61 00   mov32 cb, $00000061
2745   1583 00 00 
2746   1585 60            sub a, b
2747   1586 27            mov b, a
2748   1587 11            mov a, b
2749   1588 FD 2E 41 00   mov32 cb, $00000041
2749   158C 00 00 
2750   158E 56            add b, a
2751   158F E4            pop a
2752   1590             ; --- END TERMS
2753   1590 F9            leave
2754   1591 09            ret
2755   1592 0A A0 15      jmp _if47_exit
2756   1595             _if47_else:
2757   1595             ; return ch; 
2758   1595 FA 05 00      lea d, [bp + 5] ; $ch
2759   1598 32            mov bl, [d]
2760   1599 A7 00         mov bh, 0
2761   159B 38 00 00      mov c, 0
2762   159E F9            leave
2763   159F 09            ret
2764   15A0             _if47_exit:
2765   15A0 F9            leave
2766   15A1 09            ret
2767   15A2             
2768   15A2             print_unsigned:
2769   15A2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2770   15A5             ; char digits[5]; 
2771   15A5 52 05 00      sub sp, 5
2772   15A8             ; int i; 
2773   15A8 52 02 00      sub sp, 2
2774   15AB             ; i = 0; 
2775   15AB FA FA FF      lea d, [bp + -6] ; $i
2776   15AE DA            push d
2777   15AF FD 2E 00 00   mov32 cb, $00000000
2777   15B3 00 00 
2778   15B5 E7            pop d
2779   15B6 FD 43         mov [d], b
2780   15B8             ; if(num == 0){ 
2781   15B8             _if48_cond:
2782   15B8 FA 05 00      lea d, [bp + 5] ; $num
2783   15BB 2A            mov b, [d]
2784   15BC 38 00 00      mov c, 0
2785   15BF             ; --- START RELATIONAL
2786   15BF D7            push a
2787   15C0 11            mov a, b
2788   15C1 FD 2E 00 00   mov32 cb, $00000000
2788   15C5 00 00 
2789   15C7 B0            cmp a, b
2790   15C8 FD 71         seq ; ==
2791   15CA E4            pop a
2792   15CB             ; --- END RELATIONAL
2793   15CB C0 00 00      cmp b, 0
2794   15CE C6 E3 15      je _if48_exit
2795   15D1             _if48_TRUE:
2796   15D1             ; putchar('0'); 
2797   15D1             ; --- START FUNCTION CALL
2798   15D1 FD 2E 30 00   mov32 cb, $00000030
2798   15D5 00 00 
2799   15D7 DD            push bl
2800   15D8 07 BA 16      call putchar
2801   15DB 51 01 00      add sp, 1
2802   15DE             ; --- END FUNCTION CALL
2803   15DE             ; return; 
2804   15DE F9            leave
2805   15DF 09            ret
2806   15E0 0A E3 15      jmp _if48_exit
2807   15E3             _if48_exit:
2808   15E3             ; while (num > 0) { 
2809   15E3             _while49_cond:
2810   15E3 FA 05 00      lea d, [bp + 5] ; $num
2811   15E6 2A            mov b, [d]
2812   15E7 38 00 00      mov c, 0
2813   15EA             ; --- START RELATIONAL
2814   15EA D7            push a
2815   15EB 11            mov a, b
2816   15EC FD 2E 00 00   mov32 cb, $00000000
2816   15F0 00 00 
2817   15F2 B0            cmp a, b
2818   15F3 FD 81         sgu ; > (unsigned)
2819   15F5 E4            pop a
2820   15F6             ; --- END RELATIONAL
2821   15F6 C0 00 00      cmp b, 0
2822   15F9 C6 70 16      je _while49_exit
2823   15FC             _while49_block:
2824   15FC             ; digits[i] = '0' + (num % 10); 
2825   15FC FA FC FF      lea d, [bp + -4] ; $digits
2826   15FF D7            push a
2827   1600 DA            push d
2828   1601 FA FA FF      lea d, [bp + -6] ; $i
2829   1604 2A            mov b, [d]
2830   1605 38 00 00      mov c, 0
2831   1608 E7            pop d
2832   1609 5A            add d, b
2833   160A E4            pop a
2834   160B DA            push d
2835   160C FD 2E 30 00   mov32 cb, $00000030
2835   1610 00 00 
2836   1612             ; --- START TERMS
2837   1612 D7            push a
2838   1613 11            mov a, b
2839   1614 FA 05 00      lea d, [bp + 5] ; $num
2840   1617 2A            mov b, [d]
2841   1618 38 00 00      mov c, 0
2842   161B             ; --- START FACTORS
2843   161B D7            push a
2844   161C FD D8         push g
2845   161E 11            mov a, b
2846   161F FD 7A         mov g, c
2847   1621 FD 2E 0A 00   mov32 cb, $0000000a
2847   1625 00 00 
2848   1627 FD D8         push g ; save 'g' as the div instruction uses it
2849   1629 AE            div a, b ; %, a: quotient, b: remainder
2850   162A 11            mov a, b
2851   162B FD F1         pop g
2852   162D FD 38         mov c, g
2853   162F 27            mov b, a
2854   1630 FD F1         pop g
2855   1632 E4            pop a
2856   1633             ; --- END FACTORS
2857   1633 56            add b, a
2858   1634 E4            pop a
2859   1635             ; --- END TERMS
2860   1635 E7            pop d
2861   1636 FD 3E         mov [d], bl
2862   1638             ; num = num / 10; 
2863   1638 FA 05 00      lea d, [bp + 5] ; $num
2864   163B DA            push d
2865   163C FA 05 00      lea d, [bp + 5] ; $num
2866   163F 2A            mov b, [d]
2867   1640 38 00 00      mov c, 0
2868   1643             ; --- START FACTORS
2869   1643 D7            push a
2870   1644 FD D8         push g
2871   1646 11            mov a, b
2872   1647 FD 7A         mov g, c
2873   1649 FD 2E 0A 00   mov32 cb, $0000000a
2873   164D 00 00 
2874   164F FD D8         push g ; save 'g' as the div instruction uses it
2875   1651 AE            div a, b ; /, a: quotient, b: remainder
2876   1652 FD F1         pop g
2877   1654 FD 38         mov c, g
2878   1656 27            mov b, a
2879   1657 FD F1         pop g
2880   1659 E4            pop a
2881   165A             ; --- END FACTORS
2882   165A E7            pop d
2883   165B FD 43         mov [d], b
2884   165D             ; i++; 
2885   165D FA FA FF      lea d, [bp + -6] ; $i
2886   1660 2A            mov b, [d]
2887   1661 38 00 00      mov c, 0
2888   1664 11            mov a, b
2889   1665 FD 77         inc b
2890   1667 FA FA FF      lea d, [bp + -6] ; $i
2891   166A FD 43         mov [d], b
2892   166C 27            mov b, a
2893   166D 0A E3 15      jmp _while49_cond
2894   1670             _while49_exit:
2895   1670             ; while (i > 0) { 
2896   1670             _while56_cond:
2897   1670 FA FA FF      lea d, [bp + -6] ; $i
2898   1673 2A            mov b, [d]
2899   1674 38 00 00      mov c, 0
2900   1677             ; --- START RELATIONAL
2901   1677 D7            push a
2902   1678 11            mov a, b
2903   1679 FD 2E 00 00   mov32 cb, $00000000
2903   167D 00 00 
2904   167F B0            cmp a, b
2905   1680 FD 7F         sgt ; >
2906   1682 E4            pop a
2907   1683             ; --- END RELATIONAL
2908   1683 C0 00 00      cmp b, 0
2909   1686 C6 B8 16      je _while56_exit
2910   1689             _while56_block:
2911   1689             ; i--; 
2912   1689 FA FA FF      lea d, [bp + -6] ; $i
2913   168C 2A            mov b, [d]
2914   168D 38 00 00      mov c, 0
2915   1690 11            mov a, b
2916   1691 FD 7D         dec b
2917   1693 FA FA FF      lea d, [bp + -6] ; $i
2918   1696 FD 43         mov [d], b
2919   1698 27            mov b, a
2920   1699             ; putchar(digits[i]); 
2921   1699             ; --- START FUNCTION CALL
2922   1699 FA FC FF      lea d, [bp + -4] ; $digits
2923   169C D7            push a
2924   169D DA            push d
2925   169E FA FA FF      lea d, [bp + -6] ; $i
2926   16A1 2A            mov b, [d]
2927   16A2 38 00 00      mov c, 0
2928   16A5 E7            pop d
2929   16A6 5A            add d, b
2930   16A7 E4            pop a
2931   16A8 32            mov bl, [d]
2932   16A9 A7 00         mov bh, 0
2933   16AB 38 00 00      mov c, 0
2934   16AE DD            push bl
2935   16AF 07 BA 16      call putchar
2936   16B2 51 01 00      add sp, 1
2937   16B5             ; --- END FUNCTION CALL
2938   16B5 0A 70 16      jmp _while56_cond
2939   16B8             _while56_exit:
2940   16B8 F9            leave
2941   16B9 09            ret
2942   16BA             
2943   16BA             putchar:
2944   16BA F8 00 00      enter 0 ; (push bp; mov bp, sp)
2945   16BD             ; --- BEGIN INLINE ASM SEGMENT
2946   16BD FA 05 00      lea d, [bp + 5] ; $c
2947   16C0 1E            mov al, [d]
2948   16C1 23            mov ah, al
2949   16C2 19 00         mov al, 0
2950   16C4 05 03         syscall sys_io      ; char in AH
2951   16C6             ; --- END INLINE ASM SEGMENT
2952   16C6 F9            leave
2953   16C7 09            ret
2954   16C8             
2955   16C8             scann:
2956   16C8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2957   16CB             ; int m; 
2958   16CB 52 02 00      sub sp, 2
2959   16CE             ; --- BEGIN INLINE ASM SEGMENT
2960   16CE F8 08 00      enter 8
2961   16D1 FA F9 FF      lea d, [bp +- 7]
2962   16D4 07 1C 17      call _gets_scann
2963   16D7 07 0C 17      call _strlen_scann      ; get string length in C
2964   16DA 7E            dec c
2965   16DB FD 4E         mov si, d
2966   16DD 12            mov a, c
2967   16DE FD 99         shl a
2968   16E0 3B B9 17      mov d, table_power_scann
2969   16E3 59            add d, a
2970   16E4 38 00 00      mov c, 0
2971   16E7             mul_loop_scann:
2972   16E7 F6            lodsb      ; load ASCII to al
2973   16E8 B9 00         cmp al, 0
2974   16EA C6 FD 16      je mul_exit_scann
2975   16ED 6F 30         sub al, $30    ; make into integer
2976   16EF 22 00         mov ah, 0
2977   16F1 2A            mov b, [d]
2978   16F2 AC            mul a, b      ; result in B since it fits in 16bits
2979   16F3 11            mov a, b
2980   16F4 28            mov b, c
2981   16F5 54            add a, b
2982   16F6 39            mov c, a
2983   16F7 63 02 00      sub d, 2
2984   16FA 0A E7 16      jmp mul_loop_scann
2985   16FD             mul_exit_scann:
2986   16FD 12            mov a, c
2987   16FE F9            leave
2988   16FF FA FF FF      lea d, [bp + -1] ; $m
2989   1702 43            mov [d], a
2990   1703             ; --- END INLINE ASM SEGMENT
2991   1703             ; return m; 
2992   1703 FA FF FF      lea d, [bp + -1] ; $m
2993   1706 2A            mov b, [d]
2994   1707 38 00 00      mov c, 0
2995   170A F9            leave
2996   170B 09            ret
2997   170C             ; --- BEGIN INLINE ASM SEGMENT
2998   170C             _strlen_scann:
2999   170C DA            push d
3000   170D 38 00 00      mov c, 0
3001   1710             _strlen_L1_scann:
3002   1710 BD 00         cmp byte [d], 0
3003   1712 C6 1A 17      je _strlen_ret_scann
3004   1715 79            inc d
3005   1716 78            inc c
3006   1717 0A 10 17      jmp _strlen_L1_scann
3007   171A             _strlen_ret_scann:
3008   171A E7            pop d
3009   171B 09            ret
3010   171C             _gets_scann:
3011   171C DA            push d
3012   171D             _gets_loop_scann:
3013   171D 19 01         mov al, 1
3014   171F 05 03         syscall sys_io      ; receive in AH
3015   1721 B9 00         cmp al, 0        ; check error code (AL)
3016   1723 C6 1D 17      je _gets_loop_scann      ; if no char received, retry
3017   1726 76 1B         cmp ah, 27
3018   1728 C6 49 17      je _gets_ansi_esc_scann
3019   172B 76 0A         cmp ah, $0A        ; LF
3020   172D C6 B4 17      je _gets_end_scann
3021   1730 76 0D         cmp ah, $0D        ; CR
3022   1732 C6 B4 17      je _gets_end_scann
3023   1735 76 5C         cmp ah, $5C        ; '\\'
3024   1737 C6 75 17      je _gets_escape_scann
3025   173A 76 08         cmp ah, $08      ; check for backspace
3026   173C C6 45 17      je _gets_backspace_scann
3027   173F 1A            mov al, ah
3028   1740 3E            mov [d], al
3029   1741 79            inc d
3030   1742 0A 1D 17      jmp _gets_loop_scann
3031   1745             _gets_backspace_scann:
3032   1745 7F            dec d
3033   1746 0A 1D 17      jmp _gets_loop_scann
3034   1749             _gets_ansi_esc_scann:
3035   1749 19 01         mov al, 1
3036   174B 05 03         syscall sys_io        ; receive in AH without echo
3037   174D B9 00         cmp al, 0          ; check error code (AL)
3038   174F C6 49 17      je _gets_ansi_esc_scann    ; if no char received, retry
3039   1752 76 5B         cmp ah, '['
3040   1754 C7 1D 17      jne _gets_loop_scann
3041   1757             _gets_ansi_esc_2_scann:
3042   1757 19 01         mov al, 1
3043   1759 05 03         syscall sys_io          ; receive in AH without echo
3044   175B B9 00         cmp al, 0            ; check error code (AL)
3045   175D C6 57 17      je _gets_ansi_esc_2_scann  ; if no char received, retry
3046   1760 76 44         cmp ah, 'D'
3047   1762 C6 6D 17      je _gets_left_arrow_scann
3048   1765 76 43         cmp ah, 'C'
3049   1767 C6 71 17      je _gets_right_arrow_scann
3050   176A 0A 1D 17      jmp _gets_loop_scann
3051   176D             _gets_left_arrow_scann:
3052   176D 7F            dec d
3053   176E 0A 1D 17      jmp _gets_loop_scann
3054   1771             _gets_right_arrow_scann:
3055   1771 79            inc d
3056   1772 0A 1D 17      jmp _gets_loop_scann
3057   1775             _gets_escape_scann:
3058   1775 19 01         mov al, 1
3059   1777 05 03         syscall sys_io      ; receive in AH
3060   1779 B9 00         cmp al, 0        ; check error code (AL)
3061   177B C6 75 17      je _gets_escape_scann      ; if no char received, retry
3062   177E 76 6E         cmp ah, 'n'
3063   1780 C6 9F 17      je _gets_LF_scann
3064   1783 76 72         cmp ah, 'r'
3065   1785 C6 A6 17      je _gets_CR_scann
3066   1788 76 30         cmp ah, '0'
3067   178A C6 AD 17      je _gets_NULL_scann
3068   178D 76 5C         cmp ah, $5C  
3069   178F C6 98 17      je _gets_slash_scann
3070   1792 1A            mov al, ah        ; if not a known escape, it is just a normal letter
3071   1793 3E            mov [d], al
3072   1794 79            inc d
3073   1795 0A 1D 17      jmp _gets_loop_scann
3074   1798             _gets_slash_scann:
3075   1798 19 5C         mov al, $5C
3076   179A 3E            mov [d], al
3077   179B 79            inc d
3078   179C 0A 1D 17      jmp _gets_loop_scann
3079   179F             _gets_LF_scann:
3080   179F 19 0A         mov al, $0A
3081   17A1 3E            mov [d], al
3082   17A2 79            inc d
3083   17A3 0A 1D 17      jmp _gets_loop_scann
3084   17A6             _gets_CR_scann:
3085   17A6 19 0D         mov al, $0D
3086   17A8 3E            mov [d], al
3087   17A9 79            inc d
3088   17AA 0A 1D 17      jmp _gets_loop_scann
3089   17AD             _gets_NULL_scann:
3090   17AD 19 00         mov al, $00
3091   17AF 3E            mov [d], al
3092   17B0 79            inc d
3093   17B1 0A 1D 17      jmp _gets_loop_scann
3094   17B4             _gets_end_scann:
3095   17B4 19 00         mov al, 0
3096   17B6 3E            mov [d], al        ; terminate string
3097   17B7 E7            pop d
3098   17B8 09            ret
3099   17B9             table_power_scann:
3100   17B9 01 00       .dw 1              ; 1
3101   17BB 0A 00       .dw $A             ; 10
3102   17BD 64 00       .dw $64            ; 100
3103   17BF E8 03       .dw $3E8           ; 1000
3104   17C1 10 27       .dw $2710          ; 10000
3105   17C3 A0 86 01 00 .dw $86A0, $1      ; 100000
3106   17C7 40 42 0F 00 .dw $4240, $F      ; 1000000
3107   17CB 80 96 98 00 .dw $9680, $98     ; 10000000
3108   17CF 00 E1 F5 05 .dw $E100, $5F5    ; 100000000
3109   17D3 00 CA 9A 3B .dw $CA00, $3B9A   ; 1000000000
3110   17D7             ; --- END INLINE ASM SEGMENT
3111   17D7 F9            leave
3112   17D8 09            ret
3113   17D9             
3114   17D9             exit:
3115   17D9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3116   17DC             ; --- BEGIN INLINE ASM SEGMENT
3117   17DC FA 05 00      lea d, [bp + 5] ; $status
3118   17DF 2A            mov b, [d] ; return value
3119   17E0 05 0B         syscall sys_terminate_proc
3120   17E2             ; --- END INLINE ASM SEGMENT
3121   17E2 F9            leave
3122   17E3 09            ret
3123   17E4             ; --- END TEXT SEGMENT
3124   17E4             
3125   17E4             ; --- BEGIN DATA SEGMENT
3126   17E4 00 00       _arrows: .fill 2, 0
3127   17E6 00 00       _debug: .dw $0000
3128   17E8 1D 00       _rand_val: .dw $001d
3129   17EA 01 00       _rand_inc: .dw $0001
3130   17EC 00 00 00 00 _loc_data: .fill 12, 0
3130   17F0 00 00 00 00 
3130   17F4 00 00 00 00 
3131   17F8 00 00       _finished: .fill 2, 0
3132   17FA 01 00 04 00 _cave_data: .dw $0001,$0004,$0007,$0000,$0002,$0009,$0001,$0003,$000b,$0002,$0004,$000d,$0000,$0003,$0005,
3132   17FE 07 00 00 00 
3132   1802 02 00 09 00 
3132   1806 01 00 03 00 
3132   180A 0B 00 02 00 
3132   180E 04 00 0D 00 
3132   1812 00 00 03 00 
3132   1816 05 00 
3133   1818 00 00       .dw 
3134   181A 00 00       .dw 
3135   181C 04 00 06 00 .dw $0004,$0006,$000e,$0005,$0007,$0010,$0000,$0006,$0008,$0007,$0009,$0011,$0001,$0008,$000a,$0009,
3135   1820 0E 00 05 00 
3135   1824 07 00 10 00 
3135   1828 00 00 06 00 
3135   182C 08 00 07 00 
3135   1830 09 00 11 00 
3135   1834 01 00 08 00 
3135   1838 0A 00 09 00 
3136   183C 0B 00 12 00 .dw $000b,$0012,$0002,$000a,$000c,$000b,$000d,$0013,$0003,$000c,$000e,$0005,$000d,$000f,$000e,$0010,
3136   1840 02 00 0A 00 
3136   1844 0C 00 0B 00 
3136   1848 0D 00 13 00 
3136   184C 03 00 0C 00 
3136   1850 0E 00 05 00 
3136   1854 0D 00 0F 00 
3136   1858 0E 00 10 00 
3137   185C 13 00 06 00 .dw $0013,$0006,$000f,$0011,$0008,$0010,$0012,$000a,$0011,$0013,$000c,$000f,$0012,
3137   1860 0F 00 11 00 
3137   1864 08 00 10 00 
3137   1868 12 00 0A 00 
3137   186C 11 00 13 00 
3137   1870 0C 00 0F 00 
3137   1874 12 00 
3138   1876 49 4E 53 54 _s0: .db "INSTRUCTIONS (Y-N): ", 0
3138   187A 52 55 43 54 
3138   187E 49 4F 4E 53 
3138   1882 20 28 59 2D 
3138   1886 4E 29 3A 20 
3138   188A 00 
3139   188B 4E 45 57 20 _s1: .db "NEW GAME (Y-N): ", 0
3139   188F 47 41 4D 45 
3139   1893 20 28 59 2D 
3139   1897 4E 29 3A 20 
3139   189B 00 
3140   189C 57 65 6C 63 _s2: .db "Welcome to 'hunt the wumpus'\n", 0
3140   18A0 6F 6D 65 20 
3140   18A4 74 6F 20 27 
3140   18A8 68 75 6E 74 
3140   18AC 20 74 68 65 
3140   18B0 20 77 75 6D 
3140   18B4 70 75 73 27 
3140   18B8 0A 00 
3141   18BA 54 68 65 20 _s3: .db "The wumpus lives in a cave of 20 rooms. Each room\n", 0
3141   18BE 77 75 6D 70 
3141   18C2 75 73 20 6C 
3141   18C6 69 76 65 73 
3141   18CA 20 69 6E 20 
3141   18CE 61 20 63 61 
3141   18D2 76 65 20 6F 
3141   18D6 66 20 32 30 
3141   18DA 20 72 6F 6F 
3141   18DE 6D 73 2E 20 
3141   18E2 45 61 63 68 
3141   18E6 20 72 6F 6F 
3141   18EA 6D 0A 00 
3142   18ED 68 61 73 20 _s4: .db "has 3 tunnels leading to other rooms.\n", 0
3142   18F1 33 20 74 75 
3142   18F5 6E 6E 65 6C 
3142   18F9 73 20 6C 65 
3142   18FD 61 64 69 6E 
3142   1901 67 20 74 6F 
3142   1905 20 6F 74 68 
3142   1909 65 72 20 72 
3142   190D 6F 6F 6D 73 
3142   1911 2E 0A 00 
3143   1914 4C 6F 6F 6B _s5: .db "Look at a dodecahedron to see how this works.\n", 0
3143   1918 20 61 74 20 
3143   191C 61 20 64 6F 
3143   1920 64 65 63 61 
3143   1924 68 65 64 72 
3143   1928 6F 6E 20 74 
3143   192C 6F 20 73 65 
3143   1930 65 20 68 6F 
3143   1934 77 20 74 68 
3143   1938 69 73 20 77 
3143   193C 6F 72 6B 73 
3143   1940 2E 0A 00 
3144   1943 0A 00       _s6: .db "\n", 0
3145   1945 20 48 61 7A _s7: .db " Hazards:\n", 0
3145   1949 61 72 64 73 
3145   194D 3A 0A 00 
3146   1950 20 42 6F 74 _s8: .db " Bottomless pits: Two rooms have bottomless pits in them\n", 0
3146   1954 74 6F 6D 6C 
3146   1958 65 73 73 20 
3146   195C 70 69 74 73 
3146   1960 3A 20 54 77 
3146   1964 6F 20 72 6F 
3146   1968 6F 6D 73 20 
3146   196C 68 61 76 65 
3146   1970 20 62 6F 74 
3146   1974 74 6F 6D 6C 
3146   1978 65 73 73 20 
3146   197C 70 69 74 73 
3146   1980 20 69 6E 20 
3146   1984 74 68 65 6D 
3146   1988 0A 00 
3147   198A 20 49 66 20 _s9: .db " If you go there, you fall into the pit (& lose!)\n", 0
3147   198E 79 6F 75 20 
3147   1992 67 6F 20 74 
3147   1996 68 65 72 65 
3147   199A 2C 20 79 6F 
3147   199E 75 20 66 61 
3147   19A2 6C 6C 20 69 
3147   19A6 6E 74 6F 20 
3147   19AA 74 68 65 20 
3147   19AE 70 69 74 20 
3147   19B2 28 26 20 6C 
3147   19B6 6F 73 65 21 
3147   19BA 29 0A 00 
3148   19BD 20 53 55 50 _s10: .db " SUPER BATS     : TWO OTHER ROOMS HAVE SUPER BATS. IF YOU\n", 0
3148   19C1 45 52 20 42 
3148   19C5 41 54 53 20 
3148   19C9 20 20 20 20 
3148   19CD 3A 20 54 57 
3148   19D1 4F 20 4F 54 
3148   19D5 48 45 52 20 
3148   19D9 52 4F 4F 4D 
3148   19DD 53 20 48 41 
3148   19E1 56 45 20 53 
3148   19E5 55 50 45 52 
3148   19E9 20 42 41 54 
3148   19ED 53 2E 20 49 
3148   19F1 46 20 59 4F 
3148   19F5 55 0A 00 
3149   19F8 20 47 4F 20 _s11: .db " GO THERE, A BAT GRABS YOU AND TAKES YOU TO SOME OTHER\n", 0
3149   19FC 54 48 45 52 
3149   1A00 45 2C 20 41 
3149   1A04 20 42 41 54 
3149   1A08 20 47 52 41 
3149   1A0C 42 53 20 59 
3149   1A10 4F 55 20 41 
3149   1A14 4E 44 20 54 
3149   1A18 41 4B 45 53 
3149   1A1C 20 59 4F 55 
3149   1A20 20 54 4F 20 
3149   1A24 53 4F 4D 45 
3149   1A28 20 4F 54 48 
3149   1A2C 45 52 0A 00 
3150   1A30 20 52 4F 4F _s12: .db " ROOM AT RANDOM. (WHICH MAY BE TROUBLESOME)\n\n", 0
3150   1A34 4D 20 41 54 
3150   1A38 20 52 41 4E 
3150   1A3C 44 4F 4D 2E 
3150   1A40 20 28 57 48 
3150   1A44 49 43 48 20 
3150   1A48 4D 41 59 20 
3150   1A4C 42 45 20 54 
3150   1A50 52 4F 55 42 
3150   1A54 4C 45 53 4F 
3150   1A58 4D 45 29 0A 
3150   1A5C 0A 00 
3151   1A5E 20 57 55 4D _s13: .db " WUMPUS:\n", 0
3151   1A62 50 55 53 3A 
3151   1A66 0A 00 
3152   1A68 20 54 48 45 _s14: .db " THE WUMPUS IS NOT BOTHERED BY HAZARDS (HE HAS SUCKER\n", 0
3152   1A6C 20 57 55 4D 
3152   1A70 50 55 53 20 
3152   1A74 49 53 20 4E 
3152   1A78 4F 54 20 42 
3152   1A7C 4F 54 48 45 
3152   1A80 52 45 44 20 
3152   1A84 42 59 20 48 
3152   1A88 41 5A 41 52 
3152   1A8C 44 53 20 28 
3152   1A90 48 45 20 48 
3152   1A94 41 53 20 53 
3152   1A98 55 43 4B 45 
3152   1A9C 52 0A 00 
3153   1A9F 20 46 45 45 _s15: .db " FEET AND IS TOO BIG FOR A BAT TO LIFT).  USUALLY\n", 0
3153   1AA3 54 20 41 4E 
3153   1AA7 44 20 49 53 
3153   1AAB 20 54 4F 4F 
3153   1AAF 20 42 49 47 
3153   1AB3 20 46 4F 52 
3153   1AB7 20 41 20 42 
3153   1ABB 41 54 20 54 
3153   1ABF 4F 20 4C 49 
3153   1AC3 46 54 29 2E 
3153   1AC7 20 20 55 53 
3153   1ACB 55 41 4C 4C 
3153   1ACF 59 0A 00 
3154   1AD2 20 48 45 20 _s16: .db " HE IS ASLEEP.  TWO THINGS WAKE HIM UP: YOU SHOOTING AN\n", 0
3154   1AD6 49 53 20 41 
3154   1ADA 53 4C 45 45 
3154   1ADE 50 2E 20 20 
3154   1AE2 54 57 4F 20 
3154   1AE6 54 48 49 4E 
3154   1AEA 47 53 20 57 
3154   1AEE 41 4B 45 20 
3154   1AF2 48 49 4D 20 
3154   1AF6 55 50 3A 20 
3154   1AFA 59 4F 55 20 
3154   1AFE 53 48 4F 4F 
3154   1B02 54 49 4E 47 
3154   1B06 20 41 4E 0A 
3154   1B0A 00 
3155   1B0B 20 41 52 52 _s17: .db " ARROW OR YOU ENTERING HIS ROOM.\n", 0
3155   1B0F 4F 57 20 4F 
3155   1B13 52 20 59 4F 
3155   1B17 55 20 45 4E 
3155   1B1B 54 45 52 49 
3155   1B1F 4E 47 20 48 
3155   1B23 49 53 20 52 
3155   1B27 4F 4F 4D 2E 
3155   1B2B 0A 00 
3156   1B2D 20 49 46 20 _s18: .db " IF THE WUMPUS WAKES HE MOVES (P=.75) ONE ROOM\n", 0
3156   1B31 54 48 45 20 
3156   1B35 57 55 4D 50 
3156   1B39 55 53 20 57 
3156   1B3D 41 4B 45 53 
3156   1B41 20 48 45 20 
3156   1B45 4D 4F 56 45 
3156   1B49 53 20 28 50 
3156   1B4D 3D 2E 37 35 
3156   1B51 29 20 4F 4E 
3156   1B55 45 20 52 4F 
3156   1B59 4F 4D 0A 00 
3157   1B5D 20 4F 52 20 _s19: .db " OR STAYS STILL (P=.25).  AFTER THAT, IF HE IS WHERE YOU\n", 0
3157   1B61 53 54 41 59 
3157   1B65 53 20 53 54 
3157   1B69 49 4C 4C 20 
3157   1B6D 28 50 3D 2E 
3157   1B71 32 35 29 2E 
3157   1B75 20 20 41 46 
3157   1B79 54 45 52 20 
3157   1B7D 54 48 41 54 
3157   1B81 2C 20 49 46 
3157   1B85 20 48 45 20 
3157   1B89 49 53 20 57 
3157   1B8D 48 45 52 45 
3157   1B91 20 59 4F 55 
3157   1B95 0A 00 
3158   1B97 20 41 52 45 _s20: .db " ARE, HE EATS YOU UP AND YOU LOSE!\n", 0
3158   1B9B 2C 20 48 45 
3158   1B9F 20 45 41 54 
3158   1BA3 53 20 59 4F 
3158   1BA7 55 20 55 50 
3158   1BAB 20 41 4E 44 
3158   1BAF 20 59 4F 55 
3158   1BB3 20 4C 4F 53 
3158   1BB7 45 21 0A 00 
3159   1BBB 20 59 4F 55 _s21: .db " YOU:\n", 0
3159   1BBF 3A 0A 00 
3160   1BC2 20 45 41 43 _s22: .db " EACH TURN YOU MAY MOVE OR SHOOT A CROOKED ARROW\n", 0
3160   1BC6 48 20 54 55 
3160   1BCA 52 4E 20 59 
3160   1BCE 4F 55 20 4D 
3160   1BD2 41 59 20 4D 
3160   1BD6 4F 56 45 20 
3160   1BDA 4F 52 20 53 
3160   1BDE 48 4F 4F 54 
3160   1BE2 20 41 20 43 
3160   1BE6 52 4F 4F 4B 
3160   1BEA 45 44 20 41 
3160   1BEE 52 52 4F 57 
3160   1BF2 0A 00 
3161   1BF4 20 4D 4F 56 _s23: .db " MOVING:  YOU CAN MOVE ONE ROOM (THRU ONE TUNNEL)\n", 0
3161   1BF8 49 4E 47 3A 
3161   1BFC 20 20 59 4F 
3161   1C00 55 20 43 41 
3161   1C04 4E 20 4D 4F 
3161   1C08 56 45 20 4F 
3161   1C0C 4E 45 20 52 
3161   1C10 4F 4F 4D 20 
3161   1C14 28 54 48 52 
3161   1C18 55 20 4F 4E 
3161   1C1C 45 20 54 55 
3161   1C20 4E 4E 45 4C 
3161   1C24 29 0A 00 
3162   1C27 20 41 52 52 _s24: .db " ARROWS:  YOU HAVE 5 ARROWS.  YOU LOSE WHEN YOU RUN OUT\n", 0
3162   1C2B 4F 57 53 3A 
3162   1C2F 20 20 59 4F 
3162   1C33 55 20 48 41 
3162   1C37 56 45 20 35 
3162   1C3B 20 41 52 52 
3162   1C3F 4F 57 53 2E 
3162   1C43 20 20 59 4F 
3162   1C47 55 20 4C 4F 
3162   1C4B 53 45 20 57 
3162   1C4F 48 45 4E 20 
3162   1C53 59 4F 55 20 
3162   1C57 52 55 4E 20 
3162   1C5B 4F 55 54 0A 
3162   1C5F 00 
3163   1C60 20 45 41 43 _s25: .db " EACH ARROW CAN GO FROM 1 TO 5 ROOMS. YOU AIM BY TELLING\n", 0
3163   1C64 48 20 41 52 
3163   1C68 52 4F 57 20 
3163   1C6C 43 41 4E 20 
3163   1C70 47 4F 20 46 
3163   1C74 52 4F 4D 20 
3163   1C78 31 20 54 4F 
3163   1C7C 20 35 20 52 
3163   1C80 4F 4F 4D 53 
3163   1C84 2E 20 59 4F 
3163   1C88 55 20 41 49 
3163   1C8C 4D 20 42 59 
3163   1C90 20 54 45 4C 
3163   1C94 4C 49 4E 47 
3163   1C98 0A 00 
3164   1C9A 20 20 20 54 _s26: .db "   THE COMPUTER THE ROOM#S YOU WANT THE ARROW TO GO TO.\n", 0
3164   1C9E 48 45 20 43 
3164   1CA2 4F 4D 50 55 
3164   1CA6 54 45 52 20 
3164   1CAA 54 48 45 20 
3164   1CAE 52 4F 4F 4D 
3164   1CB2 23 53 20 59 
3164   1CB6 4F 55 20 57 
3164   1CBA 41 4E 54 20 
3164   1CBE 54 48 45 20 
3164   1CC2 41 52 52 4F 
3164   1CC6 57 20 54 4F 
3164   1CCA 20 47 4F 20 
3164   1CCE 54 4F 2E 0A 
3164   1CD2 00 
3165   1CD3 20 20 20 49 _s27: .db "   IF THE ARROW CAN'T GO THAT WAY (IF NO TUNNEL) IT MOVES\n", 0
3165   1CD7 46 20 54 48 
3165   1CDB 45 20 41 52 
3165   1CDF 52 4F 57 20 
3165   1CE3 43 41 4E 27 
3165   1CE7 54 20 47 4F 
3165   1CEB 20 54 48 41 
3165   1CEF 54 20 57 41 
3165   1CF3 59 20 28 49 
3165   1CF7 46 20 4E 4F 
3165   1CFB 20 54 55 4E 
3165   1CFF 4E 45 4C 29 
3165   1D03 20 49 54 20 
3165   1D07 4D 4F 56 45 
3165   1D0B 53 0A 
3166   1D0D 20 20 20 41 _s28: .db "   AT RANDOM TO THE NEXT ROOM.\n", 0
3166   1D11 54 20 52 41 
3166   1D15 4E 44 4F 4D 
3166   1D19 20 54 4F 20 
3166   1D1D 54 48 45 20 
3166   1D21 4E 45 58 54 
3166   1D25 20 52 4F 4F 
3166   1D29 4D 2E 0A 00 
3167   1D2D 20 20 20 20 _s29: .db "     IF THE ARROW HITS THE WUMPUS, YOU WIN.\n", 0
3167   1D31 20 49 46 20 
3167   1D35 54 48 45 20 
3167   1D39 41 52 52 4F 
3167   1D3D 57 20 48 49 
3167   1D41 54 53 20 54 
3167   1D45 48 45 20 57 
3167   1D49 55 4D 50 55 
3167   1D4D 53 2C 20 59 
3167   1D51 4F 55 20 57 
3167   1D55 49 4E 2E 0A 
3167   1D59 00 
3168   1D5A 20 20 20 20 _s30: .db "     IF THE ARROW HITS YOU, YOU LOSE.\n", 0
3168   1D5E 20 49 46 20 
3168   1D62 54 48 45 20 
3168   1D66 41 52 52 4F 
3168   1D6A 57 20 48 49 
3168   1D6E 54 53 20 59 
3168   1D72 4F 55 2C 20 
3168   1D76 59 4F 55 20 
3168   1D7A 4C 4F 53 45 
3168   1D7E 2E 0A 00 
3169   1D81 20 57 41 52 _s31: .db " WARNINGS:\n", 0
3169   1D85 4E 49 4E 47 
3169   1D89 53 3A 0A 00 
3170   1D8D 20 57 48 45 _s32: .db " WHEN YOU ARE ONE ROOM AWAY FROM A WUMPUS OR HAZARD,\n", 0
3170   1D91 4E 20 59 4F 
3170   1D95 55 20 41 52 
3170   1D99 45 20 4F 4E 
3170   1D9D 45 20 52 4F 
3170   1DA1 4F 4D 20 41 
3170   1DA5 57 41 59 20 
3170   1DA9 46 52 4F 4D 
3170   1DAD 20 41 20 57 
3170   1DB1 55 4D 50 55 
3170   1DB5 53 20 4F 52 
3170   1DB9 20 48 41 5A 
3170   1DBD 41 52 44 2C 
3170   1DC1 0A 00 
3171   1DC3 20 54 48 45 _s33: .db " THE COMPUTER SAYS:\n", 0
3171   1DC7 20 43 4F 4D 
3171   1DCB 50 55 54 45 
3171   1DCF 52 20 53 41 
3171   1DD3 59 53 3A 0A 
3171   1DD7 00 
3172   1DD8 20 57 55 4D _s34: .db " WUMPUS:  'I SMELL A WUMPUS'\n", 0
3172   1DDC 50 55 53 3A 
3172   1DE0 20 20 27 49 
3172   1DE4 20 53 4D 45 
3172   1DE8 4C 4C 20 41 
3172   1DEC 20 57 55 4D 
3172   1DF0 50 55 53 27 
3172   1DF4 0A 00 
3173   1DF6 20 42 41 54 _s35: .db " BAT   :  'BATS NEARBY'\n", 0
3173   1DFA 20 20 20 3A 
3173   1DFE 20 20 27 42 
3173   1E02 41 54 53 20 
3173   1E06 4E 45 41 52 
3173   1E0A 42 59 27 0A 
3173   1E0E 00 
3174   1E0F 20 50 49 54 _s36: .db " PIT   :  'I FEEL A DRAFT'\n", 0
3174   1E13 20 20 20 3A 
3174   1E17 20 20 27 49 
3174   1E1B 20 46 45 45 
3174   1E1F 4C 20 41 20 
3174   1E23 44 52 41 46 
3174   1E27 54 27 0A 00 
3175   1E2B 49 20 53 4D _s37: .db "I SMELL A WUMPUS!\n", 0
3175   1E2F 45 4C 4C 20 
3175   1E33 41 20 57 55 
3175   1E37 4D 50 55 53 
3175   1E3B 21 0A 00 
3176   1E3E 49 20 46 45 _s38: .db "I FEEL A DRAFT\n", 0
3176   1E42 45 4C 20 41 
3176   1E46 20 44 52 41 
3176   1E4A 46 54 0A 00 
3177   1E4E 42 41 54 53 _s39: .db "BATS NEARBY!\n", 0
3177   1E52 20 4E 45 41 
3177   1E56 52 42 59 21 
3177   1E5A 0A 00 
3178   1E5C 59 4F 55 20 _s40: .db "YOU ARE IN ROOM ", 0
3178   1E60 41 52 45 20 
3178   1E64 49 4E 20 52 
3178   1E68 4F 4F 4D 20 
3178   1E6C 00 
3179   1E6D 54 55 4E 4E _s41: .db "TUNNELS LEAD TO ", 0
3179   1E71 45 4C 53 20 
3179   1E75 4C 45 41 44 
3179   1E79 20 54 4F 20 
3179   1E7D 00 
3180   1E7E 2C 20 00    _s42: .db ", ", 0
3181   1E81 0A 0A 00    _s43: .db "\n\n", 0
3182   1E84 53 48 4F 4F _s44: .db "SHOOT OR MOVE (S-M): ", 0
3182   1E88 54 20 4F 52 
3182   1E8C 20 4D 4F 56 
3182   1E90 45 20 28 53 
3182   1E94 2D 4D 29 3A 
3182   1E98 20 00 
3183   1E9A 54 53 4B 20 _s45: .db "TSK TSK TSK - WUMPUS GOT YOU!\n", 0
3183   1E9E 54 53 4B 20 
3183   1EA2 54 53 4B 20 
3183   1EA6 2D 20 57 55 
3183   1EAA 4D 50 55 53 
3183   1EAE 20 47 4F 54 
3183   1EB2 20 59 4F 55 
3183   1EB6 21 0A 00 
3184   1EB9 0A 4E 55 4D _s46: .db "\nNUMBER OF ROOMS (1-5): ", 0
3184   1EBD 42 45 52 20 
3184   1EC1 4F 46 20 52 
3184   1EC5 4F 4F 4D 53 
3184   1EC9 20 28 31 2D 
3184   1ECD 35 29 3A 20 
3184   1ED1 00 
3185   1ED2 52 4F 4F 4D _s47: .db "ROOM #", 0
3185   1ED6 20 23 00 
3186   1ED9 41 52 52 4F _s48: .db "ARROWS AREN'T THAT CROOKED - TRY ANOTHER ROOM\n", 0
3186   1EDD 57 53 20 41 
3186   1EE1 52 45 4E 27 
3186   1EE5 54 20 54 48 
3186   1EE9 41 54 20 43 
3186   1EED 52 4F 4F 4B 
3186   1EF1 45 44 20 2D 
3186   1EF5 20 54 52 59 
3186   1EF9 20 41 4E 4F 
3186   1EFD 54 48 45 52 
3186   1F01 20 52 4F 4F 
3186   1F05 4D 0A 
3187   1F07 41 48 41 21 _s49: .db "AHA! YOU GOT THE WUMPUS!\n", 0
3187   1F0B 20 59 4F 55 
3187   1F0F 20 47 4F 54 
3187   1F13 20 54 48 45 
3187   1F17 20 57 55 4D 
3187   1F1B 50 55 53 21 
3187   1F1F 0A 00 
3188   1F21 4F 55 43 48 _s50: .db "OUCH! ARROW GOT YOU!\n", 0
3188   1F25 21 20 41 52 
3188   1F29 52 4F 57 20 
3188   1F2D 47 4F 54 20 
3188   1F31 59 4F 55 21 
3188   1F35 0A 00 
3189   1F37 4D 49 53 53 _s51: .db "MISSED\n", 0
3189   1F3B 45 44 0A 00 
3190   1F3F 0A 57 48 45 _s52: .db "\nWHERE TO: ", 0
3190   1F43 52 45 20 54 
3190   1F47 4F 3A 20 00 
3191   1F4B 4E 4F 54 20 _s53: .db "NOT POSSIBLE\n", 0
3191   1F4F 50 4F 53 53 
3191   1F53 49 42 4C 45 
3191   1F57 0A 00 
3192   1F59 5A 41 50 2D _s54: .db "ZAP--SUPER BAT SNATCH! ELSEWHEREVILLE FOR YOU!\n", 0
3192   1F5D 2D 53 55 50 
3192   1F61 45 52 20 42 
3192   1F65 41 54 20 53 
3192   1F69 4E 41 54 43 
3192   1F6D 48 21 20 45 
3192   1F71 4C 53 45 57 
3192   1F75 48 45 52 45 
3192   1F79 56 49 4C 4C 
3192   1F7D 45 20 46 4F 
3192   1F81 52 20 59 4F 
3192   1F85 55 21 0A 00 
3193   1F89 2E 2E 2E 20 _s55: .db "... OOPS! BUMPED A WUMPUS!\n", 0
3193   1F8D 4F 4F 50 53 
3193   1F91 21 20 42 55 
3193   1F95 4D 50 45 44 
3193   1F99 20 41 20 57 
3193   1F9D 55 4D 50 55 
3193   1FA1 53 21 0A 00 
3194   1FA5 59 59 59 59 _s56: .db "YYYYIIIIEEEE . . . FELL IN PIT\n", 0
3194   1FA9 49 49 49 49 
3194   1FAD 45 45 45 45 
3194   1FB1 20 2E 20 2E 
3194   1FB5 20 2E 20 46 
3194   1FB9 45 4C 4C 20 
3194   1FBD 49 4E 20 50 
3194   1FC1 49 54 0A 00 
3195   1FC5 48 55 4E 54 _s57: .db "HUNT THE WUMPUS\n", 0
3195   1FC9 20 54 48 45 
3195   1FCD 20 57 55 4D 
3195   1FD1 50 55 53 0A 
3195   1FD5 00 
3196   1FD6 57 75 6D 70 _s58: .db "Wumpus is at ", 0
3196   1FDA 75 73 20 69 
3196   1FDE 73 20 61 74 
3196   1FE2 20 00 
3197   1FE4 2C 20 70 69 _s59: .db ", pits at ", 0
3197   1FE8 74 73 20 61 
3197   1FEC 74 20 00 
3198   1FEF 20 26 20 00 _s60: .db " & ", 0
3199   1FF3 2C 20 62 61 _s61: .db ", bats at ", 0
3199   1FF7 74 73 20 61 
3199   1FFB 74 20 00 
3200   1FFE 48 45 45 20 _s62: .db "HEE HEE HEE - THE WUMPUS'LL GET YOU NEXT TIME!!\n", 0
3200   2002 48 45 45 20 
3200   2006 48 45 45 20 
3200   200A 2D 20 54 48 
3200   200E 45 20 57 55 
3200   2012 4D 50 55 53 
3200   2016 27 4C 4C 20 
3200   201A 47 45 54 20 
3200   201E 59 4F 55 20 
3200   2022 4E 45 58 54 
3200   2026 20 54 49 4D 
3200   202A 45 21 21 0A 
3201   202E 48 41 20 48 _s63: .db "HA HA HA - YOU LOSE!\n", 0
3201   2032 41 20 48 41 
3201   2036 20 2D 20 59 
3201   203A 4F 55 20 4C 
3201   203E 4F 53 45 21 
3201   2042 0A 00 
3202   2044             
3203   2044 46 20       _heap_top: .dw _heap
3204   2046 00          _heap: .db 0
3205   2047             ; --- END DATA SEGMENT
3206   2047             
3207   2047             .end
tasm: Number of errors = 0
