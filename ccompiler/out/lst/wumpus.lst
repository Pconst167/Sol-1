0001   0000             ; --- FILENAME: programs/wumpus
0002   0000             .include "lib/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $c 
0011   0408 52 02 00      sub sp, 2
0012   040B             ;; c = getlet("INSTRUCTIONS (Y-N): "); 
0013   040B FA FF FF      lea d, [bp + -1] ; $c
0014   040E DA            push d
0015   040F 26 27 23      mov b, __s0 ; "INSTRUCTIONS (Y-N): "
0016   0412 FD AB         swp b
0017   0414 D8            push b
0018   0415 07 FD 14      call getlet
0019   0418 51 02 00      add sp, 2
0020   041B E7            pop d
0021   041C FD 43         mov [d], b
0022   041E             ;; if (c == 'Y') { 
0023   041E             _if1_cond:
0024   041E FA FF FF      lea d, [bp + -1] ; $c
0025   0421 2A            mov b, [d]
0026   0422             ; START RELATIONAL
0027   0422 D7            push a
0028   0423 11            mov a, b
0029   0424 26 59 00      mov b, $59
0030   0427 B0            cmp a, b
0031   0428 FD 71         seq ; ==
0032   042A E4            pop a
0033   042B             ; END RELATIONAL
0034   042B C0 00 00      cmp b, 0
0035   042E C6 37 04      je _if1_exit
0036   0431             _if1_true:
0037   0431             ;; print_instructions(); 
0038   0431 07 46 15      call print_instructions
0039   0434 0A 37 04      jmp _if1_exit
0040   0437             _if1_exit:
0041   0437             ;; do {  
0042   0437             _do2_block:
0043   0437             ;; game_setup(); 
0044   0437 07 C9 1F      call game_setup
0045   043A             ;; game_play(); 
0046   043A 07 E3 20      call game_play
0047   043D             ;; } while (getlet("NEW GAME (Y-N): ") != 'N'); 
0048   043D             _do2_cond:
0049   043D 26 3C 23      mov b, __s1 ; "NEW GAME (Y-N): "
0050   0440 FD AB         swp b
0051   0442 D8            push b
0052   0443 07 FD 14      call getlet
0053   0446 51 02 00      add sp, 2
0054   0449             ; START RELATIONAL
0055   0449 D7            push a
0056   044A 11            mov a, b
0057   044B 26 4E 00      mov b, $4e
0058   044E B0            cmp a, b
0059   044F FD 72         sneq ; !=
0060   0451 E4            pop a
0061   0452             ; END RELATIONAL
0062   0452 C0 01 00      cmp b, 1
0063   0455 C6 37 04      je _do2_block
0064   0458             _do2_exit:
0065   0458             ;; return 0; 
0066   0458 26 00 00      mov b, $0
0067   045B F9            leave
0068   045C 05 0B         syscall sys_terminate_proc
0069   045E             
0070   045E             strcpy:
0071   045E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0072   0461             ; $psrc 
0073   0461             ; $pdest 
0074   0461 52 04 00      sub sp, 4
0075   0464             ;; psrc = src; 
0076   0464 FA FF FF      lea d, [bp + -1] ; $psrc
0077   0467 DA            push d
0078   0468 FA 05 00      lea d, [bp + 5] ; $src
0079   046B 2A            mov b, [d]
0080   046C E7            pop d
0081   046D FD 43         mov [d], b
0082   046F             ;; pdest = dest; 
0083   046F FA FD FF      lea d, [bp + -3] ; $pdest
0084   0472 DA            push d
0085   0473 FA 07 00      lea d, [bp + 7] ; $dest
0086   0476 2A            mov b, [d]
0087   0477 E7            pop d
0088   0478 FD 43         mov [d], b
0089   047A             ;; while(*psrc) *pdest++ = *psrc++; 
0090   047A             _while3_cond:
0091   047A FA FF FF      lea d, [bp + -1] ; $psrc
0092   047D 2A            mov b, [d]
0093   047E 74            mov d, b
0094   047F 32            mov bl, [d]
0095   0480 A7 00         mov bh, 0
0096   0482 C0 00 00      cmp b, 0
0097   0485 C6 B1 04      je _while3_exit
0098   0488             _while3_block:
0099   0488             ;; *pdest++ = *psrc++; 
0100   0488 FA FD FF      lea d, [bp + -3] ; $pdest
0101   048B 2A            mov b, [d]
0102   048C FD 79         mov g, b
0103   048E FD 77         inc b
0104   0490 FA FD FF      lea d, [bp + -3] ; $pdest
0105   0493 FD 43         mov [d], b
0106   0495 FD 27         mov b, g
0107   0497 D8            push b
0108   0498 FA FF FF      lea d, [bp + -1] ; $psrc
0109   049B 2A            mov b, [d]
0110   049C FD 79         mov g, b
0111   049E FD 77         inc b
0112   04A0 FA FF FF      lea d, [bp + -1] ; $psrc
0113   04A3 FD 43         mov [d], b
0114   04A5 FD 27         mov b, g
0115   04A7 74            mov d, b
0116   04A8 32            mov bl, [d]
0117   04A9 A7 00         mov bh, 0
0118   04AB E7            pop d
0119   04AC FD 3E         mov [d], bl
0120   04AE 0A 7A 04      jmp _while3_cond
0121   04B1             _while3_exit:
0122   04B1             ;; *pdest = '\0'; 
0123   04B1 FA FD FF      lea d, [bp + -3] ; $pdest
0124   04B4 2A            mov b, [d]
0125   04B5 D8            push b
0126   04B6 26 00 00      mov b, $0
0127   04B9 E7            pop d
0128   04BA FD 3E         mov [d], bl
0129   04BC F9            leave
0130   04BD 09            ret
0131   04BE             
0132   04BE             strcmp:
0133   04BE F8 00 00      enter 0 ; (push bp; mov bp, sp)
0134   04C1             ;; while (*s1 && (*s1 == *s2)) { 
0135   04C1             _while4_cond:
0136   04C1 FA 07 00      lea d, [bp + 7] ; $s1
0137   04C4 2A            mov b, [d]
0138   04C5 74            mov d, b
0139   04C6 32            mov bl, [d]
0140   04C7 A7 00         mov bh, 0
0141   04C9 D7            push a
0142   04CA 11            mov a, b
0143   04CB FA 07 00      lea d, [bp + 7] ; $s1
0144   04CE 2A            mov b, [d]
0145   04CF 74            mov d, b
0146   04D0 32            mov bl, [d]
0147   04D1 A7 00         mov bh, 0
0148   04D3             ; START RELATIONAL
0149   04D3 D7            push a
0150   04D4 11            mov a, b
0151   04D5 FA 05 00      lea d, [bp + 5] ; $s2
0152   04D8 2A            mov b, [d]
0153   04D9 74            mov d, b
0154   04DA 32            mov bl, [d]
0155   04DB A7 00         mov bh, 0
0156   04DD B0            cmp a, b
0157   04DE FD 71         seq ; ==
0158   04E0 E4            pop a
0159   04E1             ; END RELATIONAL
0160   04E1 FD A7         sand a, b ; &&
0161   04E3 E4            pop a
0162   04E4 C0 00 00      cmp b, 0
0163   04E7 C6 0B 05      je _while4_exit
0164   04EA             _while4_block:
0165   04EA             ;; s1++; 
0166   04EA FA 07 00      lea d, [bp + 7] ; $s1
0167   04ED 2A            mov b, [d]
0168   04EE FD 79         mov g, b
0169   04F0 FD 77         inc b
0170   04F2 FA 07 00      lea d, [bp + 7] ; $s1
0171   04F5 FD 43         mov [d], b
0172   04F7 FD 27         mov b, g
0173   04F9             ;; s2++; 
0174   04F9 FA 05 00      lea d, [bp + 5] ; $s2
0175   04FC 2A            mov b, [d]
0176   04FD FD 79         mov g, b
0177   04FF FD 77         inc b
0178   0501 FA 05 00      lea d, [bp + 5] ; $s2
0179   0504 FD 43         mov [d], b
0180   0506 FD 27         mov b, g
0181   0508 0A C1 04      jmp _while4_cond
0182   050B             _while4_exit:
0183   050B             ;; return *s1 - *s2; 
0184   050B FA 07 00      lea d, [bp + 7] ; $s1
0185   050E 2A            mov b, [d]
0186   050F 74            mov d, b
0187   0510 32            mov bl, [d]
0188   0511 A7 00         mov bh, 0
0189   0513             ; START TERMS
0190   0513 D7            push a
0191   0514 11            mov a, b
0192   0515 FA 05 00      lea d, [bp + 5] ; $s2
0193   0518 2A            mov b, [d]
0194   0519 74            mov d, b
0195   051A 32            mov bl, [d]
0196   051B A7 00         mov bh, 0
0197   051D 60            sub a, b
0198   051E 27            mov b, a
0199   051F E4            pop a
0200   0520             ; END TERMS
0201   0520 F9            leave
0202   0521 09            ret
0203   0522             
0204   0522             strcat:
0205   0522 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0206   0525             ; $dest_len 
0207   0525             ; $i 
0208   0525 52 04 00      sub sp, 4
0209   0528             ;; dest_len = strlen(dest); 
0210   0528 FA FF FF      lea d, [bp + -1] ; $dest_len
0211   052B DA            push d
0212   052C FA 07 00      lea d, [bp + 7] ; $dest
0213   052F 2A            mov b, [d]
0214   0530 FD AB         swp b
0215   0532 D8            push b
0216   0533 07 D8 05      call strlen
0217   0536 51 02 00      add sp, 2
0218   0539 E7            pop d
0219   053A FD 43         mov [d], b
0220   053C             ;; for (i = 0; src[i] != 0; i=i+1) { 
0221   053C             _for5_init:
0222   053C FA FD FF      lea d, [bp + -3] ; $i
0223   053F DA            push d
0224   0540 26 00 00      mov b, $0
0225   0543 E7            pop d
0226   0544 FD 43         mov [d], b
0227   0546             _for5_cond:
0228   0546 FA 05 00      lea d, [bp + 5] ; $src
0229   0549 FD 2A         mov d, [d]
0230   054B D7            push a
0231   054C DA            push d
0232   054D FA FD FF      lea d, [bp + -3] ; $i
0233   0550 2A            mov b, [d]
0234   0551 E7            pop d
0235   0552 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0236   0556 E4            pop a
0237   0557 32            mov bl, [d]
0238   0558 A7 00         mov bh, 0
0239   055A             ; START RELATIONAL
0240   055A D7            push a
0241   055B 11            mov a, b
0242   055C 26 00 00      mov b, $0
0243   055F B0            cmp a, b
0244   0560 FD 72         sneq ; !=
0245   0562 E4            pop a
0246   0563             ; END RELATIONAL
0247   0563 C0 00 00      cmp b, 0
0248   0566 C6 B1 05      je _for5_exit
0249   0569             _for5_block:
0250   0569             ;; dest[dest_len + i] = src[i]; 
0251   0569 FA 07 00      lea d, [bp + 7] ; $dest
0252   056C FD 2A         mov d, [d]
0253   056E D7            push a
0254   056F DA            push d
0255   0570 FA FF FF      lea d, [bp + -1] ; $dest_len
0256   0573 2A            mov b, [d]
0257   0574             ; START TERMS
0258   0574 D7            push a
0259   0575 11            mov a, b
0260   0576 FA FD FF      lea d, [bp + -3] ; $i
0261   0579 2A            mov b, [d]
0262   057A 54            add a, b
0263   057B 27            mov b, a
0264   057C E4            pop a
0265   057D             ; END TERMS
0266   057D E7            pop d
0267   057E FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0268   0582 E4            pop a
0269   0583 DA            push d
0270   0584 FA 05 00      lea d, [bp + 5] ; $src
0271   0587 FD 2A         mov d, [d]
0272   0589 D7            push a
0273   058A DA            push d
0274   058B FA FD FF      lea d, [bp + -3] ; $i
0275   058E 2A            mov b, [d]
0276   058F E7            pop d
0277   0590 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0278   0594 E4            pop a
0279   0595 32            mov bl, [d]
0280   0596 A7 00         mov bh, 0
0281   0598 E7            pop d
0282   0599 FD 3E         mov [d], bl
0283   059B             _for5_update:
0284   059B FA FD FF      lea d, [bp + -3] ; $i
0285   059E DA            push d
0286   059F FA FD FF      lea d, [bp + -3] ; $i
0287   05A2 2A            mov b, [d]
0288   05A3             ; START TERMS
0289   05A3 D7            push a
0290   05A4 11            mov a, b
0291   05A5 26 01 00      mov b, $1
0292   05A8 54            add a, b
0293   05A9 27            mov b, a
0294   05AA E4            pop a
0295   05AB             ; END TERMS
0296   05AB E7            pop d
0297   05AC FD 43         mov [d], b
0298   05AE 0A 46 05      jmp _for5_cond
0299   05B1             _for5_exit:
0300   05B1             ;; dest[dest_len + i] = 0; 
0301   05B1 FA 07 00      lea d, [bp + 7] ; $dest
0302   05B4 FD 2A         mov d, [d]
0303   05B6 D7            push a
0304   05B7 DA            push d
0305   05B8 FA FF FF      lea d, [bp + -1] ; $dest_len
0306   05BB 2A            mov b, [d]
0307   05BC             ; START TERMS
0308   05BC D7            push a
0309   05BD 11            mov a, b
0310   05BE FA FD FF      lea d, [bp + -3] ; $i
0311   05C1 2A            mov b, [d]
0312   05C2 54            add a, b
0313   05C3 27            mov b, a
0314   05C4 E4            pop a
0315   05C5             ; END TERMS
0316   05C5 E7            pop d
0317   05C6 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0318   05CA E4            pop a
0319   05CB DA            push d
0320   05CC 26 00 00      mov b, $0
0321   05CF E7            pop d
0322   05D0 FD 3E         mov [d], bl
0323   05D2             ;; return dest; 
0324   05D2 FA 07 00      lea d, [bp + 7] ; $dest
0325   05D5 2A            mov b, [d]
0326   05D6 F9            leave
0327   05D7 09            ret
0328   05D8             
0329   05D8             strlen:
0330   05D8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0331   05DB             ; $length 
0332   05DB 52 02 00      sub sp, 2
0333   05DE             ;; length = 0; 
0334   05DE FA FF FF      lea d, [bp + -1] ; $length
0335   05E1 DA            push d
0336   05E2 26 00 00      mov b, $0
0337   05E5 E7            pop d
0338   05E6 FD 43         mov [d], b
0339   05E8             ;; while (str[length] != 0) { 
0340   05E8             _while6_cond:
0341   05E8 FA 05 00      lea d, [bp + 5] ; $str
0342   05EB FD 2A         mov d, [d]
0343   05ED D7            push a
0344   05EE DA            push d
0345   05EF FA FF FF      lea d, [bp + -1] ; $length
0346   05F2 2A            mov b, [d]
0347   05F3 E7            pop d
0348   05F4 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0349   05F8 E4            pop a
0350   05F9 32            mov bl, [d]
0351   05FA A7 00         mov bh, 0
0352   05FC             ; START RELATIONAL
0353   05FC D7            push a
0354   05FD 11            mov a, b
0355   05FE 26 00 00      mov b, $0
0356   0601 B0            cmp a, b
0357   0602 FD 72         sneq ; !=
0358   0604 E4            pop a
0359   0605             ; END RELATIONAL
0360   0605 C0 00 00      cmp b, 0
0361   0608 C6 1D 06      je _while6_exit
0362   060B             _while6_block:
0363   060B             ;; length++; 
0364   060B FA FF FF      lea d, [bp + -1] ; $length
0365   060E 2A            mov b, [d]
0366   060F FD 79         mov g, b
0367   0611 FD 77         inc b
0368   0613 FA FF FF      lea d, [bp + -1] ; $length
0369   0616 FD 43         mov [d], b
0370   0618 FD 27         mov b, g
0371   061A 0A E8 05      jmp _while6_cond
0372   061D             _while6_exit:
0373   061D             ;; return length; 
0374   061D FA FF FF      lea d, [bp + -1] ; $length
0375   0620 2A            mov b, [d]
0376   0621 F9            leave
0377   0622 09            ret
0378   0623             
0379   0623             printf:
0380   0623 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0381   0626             ; $p 
0382   0626             ; $fp 
0383   0626             ; $i 
0384   0626 52 06 00      sub sp, 6
0385   0629             ;; fp = format; 
0386   0629 FA FD FF      lea d, [bp + -3] ; $fp
0387   062C DA            push d
0388   062D FA 05 00      lea d, [bp + 5] ; $format
0389   0630 2A            mov b, [d]
0390   0631 E7            pop d
0391   0632 FD 43         mov [d], b
0392   0634             ;; p = &format + 2; 
0393   0634 FA FF FF      lea d, [bp + -1] ; $p
0394   0637 DA            push d
0395   0638 FA 05 00      lea d, [bp + 5] ; $format
0396   063B 2D            mov b, d
0397   063C             ; START TERMS
0398   063C D7            push a
0399   063D 11            mov a, b
0400   063E 26 02 00      mov b, $2
0401   0641 54            add a, b
0402   0642 27            mov b, a
0403   0643 E4            pop a
0404   0644             ; END TERMS
0405   0644 E7            pop d
0406   0645 FD 43         mov [d], b
0407   0647             ;; for(;;){ 
0408   0647             _for7_init:
0409   0647             _for7_cond:
0410   0647             _for7_block:
0411   0647             ;; if(!*fp) break; 
0412   0647             _if8_cond:
0413   0647 FA FD FF      lea d, [bp + -3] ; $fp
0414   064A 2A            mov b, [d]
0415   064B 74            mov d, b
0416   064C 32            mov bl, [d]
0417   064D A7 00         mov bh, 0
0418   064F C0 00 00      cmp b, 0
0419   0652 FD 71         seq ; !
0420   0654 C0 00 00      cmp b, 0
0421   0657 C6 60 06      je _if8_else
0422   065A             _if8_true:
0423   065A             ;; break; 
0424   065A 0A AA 07      jmp _for7_exit ; for break
0425   065D 0A A7 07      jmp _if8_exit
0426   0660             _if8_else:
0427   0660             ;; if(*fp == '%'){ 
0428   0660             _if9_cond:
0429   0660 FA FD FF      lea d, [bp + -3] ; $fp
0430   0663 2A            mov b, [d]
0431   0664 74            mov d, b
0432   0665 32            mov bl, [d]
0433   0666 A7 00         mov bh, 0
0434   0668             ; START RELATIONAL
0435   0668 D7            push a
0436   0669 11            mov a, b
0437   066A 26 25 00      mov b, $25
0438   066D B0            cmp a, b
0439   066E FD 71         seq ; ==
0440   0670 E4            pop a
0441   0671             ; END RELATIONAL
0442   0671 C0 00 00      cmp b, 0
0443   0674 C6 89 07      je _if9_else
0444   0677             _if9_true:
0445   0677             ;; fp++; 
0446   0677 FA FD FF      lea d, [bp + -3] ; $fp
0447   067A 2A            mov b, [d]
0448   067B FD 79         mov g, b
0449   067D FD 77         inc b
0450   067F FA FD FF      lea d, [bp + -3] ; $fp
0451   0682 FD 43         mov [d], b
0452   0684 FD 27         mov b, g
0453   0686             ;; switch(*fp){ 
0454   0686             _switch10_expr:
0455   0686 FA FD FF      lea d, [bp + -3] ; $fp
0456   0689 2A            mov b, [d]
0457   068A 74            mov d, b
0458   068B 32            mov bl, [d]
0459   068C A7 00         mov bh, 0
0460   068E             _switch10_comparisons:
0461   068E C1 64         cmp bl, $64
0462   0690 C6 B2 06      je _switch10_case0
0463   0693 C1 69         cmp bl, $69
0464   0695 C6 B2 06      je _switch10_case1
0465   0698 C1 75         cmp bl, $75
0466   069A C6 D7 06      je _switch10_case2
0467   069D C1 78         cmp bl, $78
0468   069F C6 FC 06      je _switch10_case3
0469   06A2 C1 63         cmp bl, $63
0470   06A4 C6 21 07      je _switch10_case4
0471   06A7 C1 73         cmp bl, $73
0472   06A9 C6 46 07      je _switch10_case5
0473   06AC 0A 6B 07      jmp _switch10_default
0474   06AF 0A 77 07      jmp _switch10_exit
0475   06B2             _switch10_case0:
0476   06B2             _switch10_case1:
0477   06B2             ;; prints(*(int*)p); 
0478   06B2 FA FF FF      lea d, [bp + -1] ; $p
0479   06B5 2A            mov b, [d]
0480   06B6 74            mov d, b
0481   06B7 2A            mov b, [d]
0482   06B8 FD AB         swp b
0483   06BA D8            push b
0484   06BB 07 3C 0A      call prints
0485   06BE 51 02 00      add sp, 2
0486   06C1             ;; p = p + 2; 
0487   06C1 FA FF FF      lea d, [bp + -1] ; $p
0488   06C4 DA            push d
0489   06C5 FA FF FF      lea d, [bp + -1] ; $p
0490   06C8 2A            mov b, [d]
0491   06C9             ; START TERMS
0492   06C9 D7            push a
0493   06CA 11            mov a, b
0494   06CB 26 02 00      mov b, $2
0495   06CE 54            add a, b
0496   06CF 27            mov b, a
0497   06D0 E4            pop a
0498   06D1             ; END TERMS
0499   06D1 E7            pop d
0500   06D2 FD 43         mov [d], b
0501   06D4             ;; break; 
0502   06D4 0A 77 07      jmp _switch10_exit ; case break
0503   06D7             _switch10_case2:
0504   06D7             ;; printu(*(unsigned int*)p); 
0505   06D7 FA FF FF      lea d, [bp + -1] ; $p
0506   06DA 2A            mov b, [d]
0507   06DB 74            mov d, b
0508   06DC 2A            mov b, [d]
0509   06DD FD AB         swp b
0510   06DF D8            push b
0511   06E0 07 31 0B      call printu
0512   06E3 51 02 00      add sp, 2
0513   06E6             ;; p = p + 2; 
0514   06E6 FA FF FF      lea d, [bp + -1] ; $p
0515   06E9 DA            push d
0516   06EA FA FF FF      lea d, [bp + -1] ; $p
0517   06ED 2A            mov b, [d]
0518   06EE             ; START TERMS
0519   06EE D7            push a
0520   06EF 11            mov a, b
0521   06F0 26 02 00      mov b, $2
0522   06F3 54            add a, b
0523   06F4 27            mov b, a
0524   06F5 E4            pop a
0525   06F6             ; END TERMS
0526   06F6 E7            pop d
0527   06F7 FD 43         mov [d], b
0528   06F9             ;; break; 
0529   06F9 0A 77 07      jmp _switch10_exit ; case break
0530   06FC             _switch10_case3:
0531   06FC             ;; printx16(*(unsigned int*)p); 
0532   06FC FA FF FF      lea d, [bp + -1] ; $p
0533   06FF 2A            mov b, [d]
0534   0700 74            mov d, b
0535   0701 2A            mov b, [d]
0536   0702 FD AB         swp b
0537   0704 D8            push b
0538   0705 07 AC 07      call printx16
0539   0708 51 02 00      add sp, 2
0540   070B             ;; p = p + 2; 
0541   070B FA FF FF      lea d, [bp + -1] ; $p
0542   070E DA            push d
0543   070F FA FF FF      lea d, [bp + -1] ; $p
0544   0712 2A            mov b, [d]
0545   0713             ; START TERMS
0546   0713 D7            push a
0547   0714 11            mov a, b
0548   0715 26 02 00      mov b, $2
0549   0718 54            add a, b
0550   0719 27            mov b, a
0551   071A E4            pop a
0552   071B             ; END TERMS
0553   071B E7            pop d
0554   071C FD 43         mov [d], b
0555   071E             ;; break; 
0556   071E 0A 77 07      jmp _switch10_exit ; case break
0557   0721             _switch10_case4:
0558   0721             ;; putchar(*(char*)p); 
0559   0721 FA FF FF      lea d, [bp + -1] ; $p
0560   0724 2A            mov b, [d]
0561   0725 74            mov d, b
0562   0726 32            mov bl, [d]
0563   0727 A7 00         mov bh, 0
0564   0729 DD            push bl
0565   072A 07 1D 0C      call putchar
0566   072D 51 01 00      add sp, 1
0567   0730             ;; p = p + 2; 
0568   0730 FA FF FF      lea d, [bp + -1] ; $p
0569   0733 DA            push d
0570   0734 FA FF FF      lea d, [bp + -1] ; $p
0571   0737 2A            mov b, [d]
0572   0738             ; START TERMS
0573   0738 D7            push a
0574   0739 11            mov a, b
0575   073A 26 02 00      mov b, $2
0576   073D 54            add a, b
0577   073E 27            mov b, a
0578   073F E4            pop a
0579   0740             ; END TERMS
0580   0740 E7            pop d
0581   0741 FD 43         mov [d], b
0582   0743             ;; break; 
0583   0743 0A 77 07      jmp _switch10_exit ; case break
0584   0746             _switch10_case5:
0585   0746             ;; print(*(char**)p); 
0586   0746 FA FF FF      lea d, [bp + -1] ; $p
0587   0749 2A            mov b, [d]
0588   074A 74            mov d, b
0589   074B 2A            mov b, [d]
0590   074C FD AB         swp b
0591   074E D8            push b
0592   074F 07 65 0C      call print
0593   0752 51 02 00      add sp, 2
0594   0755             ;; p = p + 2; 
0595   0755 FA FF FF      lea d, [bp + -1] ; $p
0596   0758 DA            push d
0597   0759 FA FF FF      lea d, [bp + -1] ; $p
0598   075C 2A            mov b, [d]
0599   075D             ; START TERMS
0600   075D D7            push a
0601   075E 11            mov a, b
0602   075F 26 02 00      mov b, $2
0603   0762 54            add a, b
0604   0763 27            mov b, a
0605   0764 E4            pop a
0606   0765             ; END TERMS
0607   0765 E7            pop d
0608   0766 FD 43         mov [d], b
0609   0768             ;; break; 
0610   0768 0A 77 07      jmp _switch10_exit ; case break
0611   076B             _switch10_default:
0612   076B             ;; print("Error: Unknown argument type.\n"); 
0613   076B 26 4D 23      mov b, __s2 ; "Error: Unknown argument type.\n"
0614   076E FD AB         swp b
0615   0770 D8            push b
0616   0771 07 65 0C      call print
0617   0774 51 02 00      add sp, 2
0618   0777             _switch10_exit:
0619   0777             ;; fp++; 
0620   0777 FA FD FF      lea d, [bp + -3] ; $fp
0621   077A 2A            mov b, [d]
0622   077B FD 79         mov g, b
0623   077D FD 77         inc b
0624   077F FA FD FF      lea d, [bp + -3] ; $fp
0625   0782 FD 43         mov [d], b
0626   0784 FD 27         mov b, g
0627   0786 0A A7 07      jmp _if9_exit
0628   0789             _if9_else:
0629   0789             ;; putchar(*fp); 
0630   0789 FA FD FF      lea d, [bp + -3] ; $fp
0631   078C 2A            mov b, [d]
0632   078D 74            mov d, b
0633   078E 32            mov bl, [d]
0634   078F A7 00         mov bh, 0
0635   0791 DD            push bl
0636   0792 07 1D 0C      call putchar
0637   0795 51 01 00      add sp, 1
0638   0798             ;; fp++; 
0639   0798 FA FD FF      lea d, [bp + -3] ; $fp
0640   079B 2A            mov b, [d]
0641   079C FD 79         mov g, b
0642   079E FD 77         inc b
0643   07A0 FA FD FF      lea d, [bp + -3] ; $fp
0644   07A3 FD 43         mov [d], b
0645   07A5 FD 27         mov b, g
0646   07A7             _if9_exit:
0647   07A7             _if8_exit:
0648   07A7             _for7_update:
0649   07A7 0A 47 06      jmp _for7_cond
0650   07AA             _for7_exit:
0651   07AA F9            leave
0652   07AB 09            ret
0653   07AC             
0654   07AC             printx16:
0655   07AC F8 00 00      enter 0 ; (push bp; mov bp, sp)
0656   07AF             
0657   07AF             ; --- BEGIN INLINE ASM BLOCK
0658   07AF FA 05 00      lea d, [bp + 5] ; $hex
0659   07B2 2A            mov b, [d]
0660   07B3 07 3C 10      call print_u16x
0661   07B6             ; --- END INLINE ASM BLOCK
0662   07B6             
0663   07B6 F9            leave
0664   07B7 09            ret
0665   07B8             
0666   07B8             printx8:
0667   07B8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0668   07BB             
0669   07BB             ; --- BEGIN INLINE ASM BLOCK
0670   07BB FA 05 00      lea d, [bp + 5] ; $hex
0671   07BE 32            mov bl, [d]
0672   07BF 07 80 10      call print_u8x
0673   07C2             ; --- END INLINE ASM BLOCK
0674   07C2             
0675   07C2 F9            leave
0676   07C3 09            ret
0677   07C4             
0678   07C4             hex_to_int:
0679   07C4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0680   07C7             ; $value 
0681   07C7 10 00 00      mov a, $0
0682   07CA 45 FF FF      mov [bp + -1], a
0683   07CD             ; $i 
0684   07CD             ; $hex_char 
0685   07CD             ; $len 
0686   07CD 52 07 00      sub sp, 7
0687   07D0             ;; len = strlen(hex_string); 
0688   07D0 FA FA FF      lea d, [bp + -6] ; $len
0689   07D3 DA            push d
0690   07D4 FA 05 00      lea d, [bp + 5] ; $hex_string
0691   07D7 2A            mov b, [d]
0692   07D8 FD AB         swp b
0693   07DA D8            push b
0694   07DB 07 D8 05      call strlen
0695   07DE 51 02 00      add sp, 2
0696   07E1 E7            pop d
0697   07E2 FD 43         mov [d], b
0698   07E4             ;; for (i = 0; i < len; i++) { 
0699   07E4             _for11_init:
0700   07E4 FA FD FF      lea d, [bp + -3] ; $i
0701   07E7 DA            push d
0702   07E8 26 00 00      mov b, $0
0703   07EB E7            pop d
0704   07EC FD 43         mov [d], b
0705   07EE             _for11_cond:
0706   07EE FA FD FF      lea d, [bp + -3] ; $i
0707   07F1 2A            mov b, [d]
0708   07F2             ; START RELATIONAL
0709   07F2 D7            push a
0710   07F3 11            mov a, b
0711   07F4 FA FA FF      lea d, [bp + -6] ; $len
0712   07F7 2A            mov b, [d]
0713   07F8 B0            cmp a, b
0714   07F9 FD 73         slt ; < 
0715   07FB E4            pop a
0716   07FC             ; END RELATIONAL
0717   07FC C0 00 00      cmp b, 0
0718   07FF C6 04 09      je _for11_exit
0719   0802             _for11_block:
0720   0802             ;; hex_char = hex_string[i]; 
0721   0802 FA FC FF      lea d, [bp + -4] ; $hex_char
0722   0805 DA            push d
0723   0806 FA 05 00      lea d, [bp + 5] ; $hex_string
0724   0809 FD 2A         mov d, [d]
0725   080B D7            push a
0726   080C DA            push d
0727   080D FA FD FF      lea d, [bp + -3] ; $i
0728   0810 2A            mov b, [d]
0729   0811 E7            pop d
0730   0812 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0731   0816 E4            pop a
0732   0817 32            mov bl, [d]
0733   0818 A7 00         mov bh, 0
0734   081A E7            pop d
0735   081B FD 3E         mov [d], bl
0736   081D             ;; if (hex_char >= 'a' && hex_char <= 'f')  
0737   081D             _if12_cond:
0738   081D FA FC FF      lea d, [bp + -4] ; $hex_char
0739   0820 32            mov bl, [d]
0740   0821 A7 00         mov bh, 0
0741   0823             ; START RELATIONAL
0742   0823 D7            push a
0743   0824 11            mov a, b
0744   0825 26 61 00      mov b, $61
0745   0828 B0            cmp a, b
0746   0829 FD 80         sge ; >=
0747   082B E4            pop a
0748   082C             ; END RELATIONAL
0749   082C D7            push a
0750   082D 11            mov a, b
0751   082E FA FC FF      lea d, [bp + -4] ; $hex_char
0752   0831 32            mov bl, [d]
0753   0832 A7 00         mov bh, 0
0754   0834             ; START RELATIONAL
0755   0834 D7            push a
0756   0835 11            mov a, b
0757   0836 26 66 00      mov b, $66
0758   0839 B0            cmp a, b
0759   083A FD 74         sle ; <=
0760   083C E4            pop a
0761   083D             ; END RELATIONAL
0762   083D FD A7         sand a, b ; &&
0763   083F E4            pop a
0764   0840 C0 00 00      cmp b, 0
0765   0843 C6 74 08      je _if12_else
0766   0846             _if12_true:
0767   0846             ;; value = (value * 16) + (hex_char - 'a' + 10); 
0768   0846 FA FF FF      lea d, [bp + -1] ; $value
0769   0849 DA            push d
0770   084A FA FF FF      lea d, [bp + -1] ; $value
0771   084D 2A            mov b, [d]
0772   084E             ; START FACTORS
0773   084E D7            push a
0774   084F 11            mov a, b
0775   0850 26 10 00      mov b, $10
0776   0853 AC            mul a, b ; *
0777   0854 11            mov a, b
0778   0855 27            mov b, a
0779   0856 E4            pop a
0780   0857             ; END FACTORS
0781   0857             ; START TERMS
0782   0857 D7            push a
0783   0858 11            mov a, b
0784   0859 FA FC FF      lea d, [bp + -4] ; $hex_char
0785   085C 32            mov bl, [d]
0786   085D A7 00         mov bh, 0
0787   085F             ; START TERMS
0788   085F D7            push a
0789   0860 11            mov a, b
0790   0861 26 61 00      mov b, $61
0791   0864 60            sub a, b
0792   0865 26 0A 00      mov b, $a
0793   0868 54            add a, b
0794   0869 27            mov b, a
0795   086A E4            pop a
0796   086B             ; END TERMS
0797   086B 54            add a, b
0798   086C 27            mov b, a
0799   086D E4            pop a
0800   086E             ; END TERMS
0801   086E E7            pop d
0802   086F FD 43         mov [d], b
0803   0871 0A F2 08      jmp _if12_exit
0804   0874             _if12_else:
0805   0874             ;; if (hex_char >= 'A' && hex_char <= 'F')  
0806   0874             _if13_cond:
0807   0874 FA FC FF      lea d, [bp + -4] ; $hex_char
0808   0877 32            mov bl, [d]
0809   0878 A7 00         mov bh, 0
0810   087A             ; START RELATIONAL
0811   087A D7            push a
0812   087B 11            mov a, b
0813   087C 26 41 00      mov b, $41
0814   087F B0            cmp a, b
0815   0880 FD 80         sge ; >=
0816   0882 E4            pop a
0817   0883             ; END RELATIONAL
0818   0883 D7            push a
0819   0884 11            mov a, b
0820   0885 FA FC FF      lea d, [bp + -4] ; $hex_char
0821   0888 32            mov bl, [d]
0822   0889 A7 00         mov bh, 0
0823   088B             ; START RELATIONAL
0824   088B D7            push a
0825   088C 11            mov a, b
0826   088D 26 46 00      mov b, $46
0827   0890 B0            cmp a, b
0828   0891 FD 74         sle ; <=
0829   0893 E4            pop a
0830   0894             ; END RELATIONAL
0831   0894 FD A7         sand a, b ; &&
0832   0896 E4            pop a
0833   0897 C0 00 00      cmp b, 0
0834   089A C6 CB 08      je _if13_else
0835   089D             _if13_true:
0836   089D             ;; value = (value * 16) + (hex_char - 'A' + 10); 
0837   089D FA FF FF      lea d, [bp + -1] ; $value
0838   08A0 DA            push d
0839   08A1 FA FF FF      lea d, [bp + -1] ; $value
0840   08A4 2A            mov b, [d]
0841   08A5             ; START FACTORS
0842   08A5 D7            push a
0843   08A6 11            mov a, b
0844   08A7 26 10 00      mov b, $10
0845   08AA AC            mul a, b ; *
0846   08AB 11            mov a, b
0847   08AC 27            mov b, a
0848   08AD E4            pop a
0849   08AE             ; END FACTORS
0850   08AE             ; START TERMS
0851   08AE D7            push a
0852   08AF 11            mov a, b
0853   08B0 FA FC FF      lea d, [bp + -4] ; $hex_char
0854   08B3 32            mov bl, [d]
0855   08B4 A7 00         mov bh, 0
0856   08B6             ; START TERMS
0857   08B6 D7            push a
0858   08B7 11            mov a, b
0859   08B8 26 41 00      mov b, $41
0860   08BB 60            sub a, b
0861   08BC 26 0A 00      mov b, $a
0862   08BF 54            add a, b
0863   08C0 27            mov b, a
0864   08C1 E4            pop a
0865   08C2             ; END TERMS
0866   08C2 54            add a, b
0867   08C3 27            mov b, a
0868   08C4 E4            pop a
0869   08C5             ; END TERMS
0870   08C5 E7            pop d
0871   08C6 FD 43         mov [d], b
0872   08C8 0A F2 08      jmp _if13_exit
0873   08CB             _if13_else:
0874   08CB             ;; value = (value * 16) + (hex_char - '0'); 
0875   08CB FA FF FF      lea d, [bp + -1] ; $value
0876   08CE DA            push d
0877   08CF FA FF FF      lea d, [bp + -1] ; $value
0878   08D2 2A            mov b, [d]
0879   08D3             ; START FACTORS
0880   08D3 D7            push a
0881   08D4 11            mov a, b
0882   08D5 26 10 00      mov b, $10
0883   08D8 AC            mul a, b ; *
0884   08D9 11            mov a, b
0885   08DA 27            mov b, a
0886   08DB E4            pop a
0887   08DC             ; END FACTORS
0888   08DC             ; START TERMS
0889   08DC D7            push a
0890   08DD 11            mov a, b
0891   08DE FA FC FF      lea d, [bp + -4] ; $hex_char
0892   08E1 32            mov bl, [d]
0893   08E2 A7 00         mov bh, 0
0894   08E4             ; START TERMS
0895   08E4 D7            push a
0896   08E5 11            mov a, b
0897   08E6 26 30 00      mov b, $30
0898   08E9 60            sub a, b
0899   08EA 27            mov b, a
0900   08EB E4            pop a
0901   08EC             ; END TERMS
0902   08EC 54            add a, b
0903   08ED 27            mov b, a
0904   08EE E4            pop a
0905   08EF             ; END TERMS
0906   08EF E7            pop d
0907   08F0 FD 43         mov [d], b
0908   08F2             _if13_exit:
0909   08F2             _if12_exit:
0910   08F2             _for11_update:
0911   08F2 FA FD FF      lea d, [bp + -3] ; $i
0912   08F5 2A            mov b, [d]
0913   08F6 FD 79         mov g, b
0914   08F8 FD 77         inc b
0915   08FA FA FD FF      lea d, [bp + -3] ; $i
0916   08FD FD 43         mov [d], b
0917   08FF FD 27         mov b, g
0918   0901 0A EE 07      jmp _for11_cond
0919   0904             _for11_exit:
0920   0904             ;; return value; 
0921   0904 FA FF FF      lea d, [bp + -1] ; $value
0922   0907 2A            mov b, [d]
0923   0908 F9            leave
0924   0909 09            ret
0925   090A             
0926   090A             atoi:
0927   090A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0928   090D             ; $result 
0929   090D 10 00 00      mov a, $0
0930   0910 45 FF FF      mov [bp + -1], a
0931   0913             ; $sign 
0932   0913 10 01 00      mov a, $1
0933   0916 45 FD FF      mov [bp + -3], a
0934   0919 52 04 00      sub sp, 4
0935   091C             ;; while (*str == ' ') str++; 
0936   091C             _while14_cond:
0937   091C FA 05 00      lea d, [bp + 5] ; $str
0938   091F 2A            mov b, [d]
0939   0920 74            mov d, b
0940   0921 32            mov bl, [d]
0941   0922 A7 00         mov bh, 0
0942   0924             ; START RELATIONAL
0943   0924 D7            push a
0944   0925 11            mov a, b
0945   0926 26 20 00      mov b, $20
0946   0929 B0            cmp a, b
0947   092A FD 71         seq ; ==
0948   092C E4            pop a
0949   092D             ; END RELATIONAL
0950   092D C0 00 00      cmp b, 0
0951   0930 C6 45 09      je _while14_exit
0952   0933             _while14_block:
0953   0933             ;; str++; 
0954   0933 FA 05 00      lea d, [bp + 5] ; $str
0955   0936 2A            mov b, [d]
0956   0937 FD 79         mov g, b
0957   0939 FD 77         inc b
0958   093B FA 05 00      lea d, [bp + 5] ; $str
0959   093E FD 43         mov [d], b
0960   0940 FD 27         mov b, g
0961   0942 0A 1C 09      jmp _while14_cond
0962   0945             _while14_exit:
0963   0945             ;; if (*str == '-' || *str == '+') { 
0964   0945             _if15_cond:
0965   0945 FA 05 00      lea d, [bp + 5] ; $str
0966   0948 2A            mov b, [d]
0967   0949 74            mov d, b
0968   094A 32            mov bl, [d]
0969   094B A7 00         mov bh, 0
0970   094D             ; START RELATIONAL
0971   094D D7            push a
0972   094E 11            mov a, b
0973   094F 26 2D 00      mov b, $2d
0974   0952 B0            cmp a, b
0975   0953 FD 71         seq ; ==
0976   0955 E4            pop a
0977   0956             ; END RELATIONAL
0978   0956 D7            push a
0979   0957 11            mov a, b
0980   0958 FA 05 00      lea d, [bp + 5] ; $str
0981   095B 2A            mov b, [d]
0982   095C 74            mov d, b
0983   095D 32            mov bl, [d]
0984   095E A7 00         mov bh, 0
0985   0960             ; START RELATIONAL
0986   0960 D7            push a
0987   0961 11            mov a, b
0988   0962 26 2B 00      mov b, $2b
0989   0965 B0            cmp a, b
0990   0966 FD 71         seq ; ==
0991   0968 E4            pop a
0992   0969             ; END RELATIONAL
0993   0969 FD A8         sor a, b ; ||
0994   096B E4            pop a
0995   096C C0 00 00      cmp b, 0
0996   096F C6 AA 09      je _if15_exit
0997   0972             _if15_true:
0998   0972             ;; if (*str == '-') sign = -1; 
0999   0972             _if16_cond:
1000   0972 FA 05 00      lea d, [bp + 5] ; $str
1001   0975 2A            mov b, [d]
1002   0976 74            mov d, b
1003   0977 32            mov bl, [d]
1004   0978 A7 00         mov bh, 0
1005   097A             ; START RELATIONAL
1006   097A D7            push a
1007   097B 11            mov a, b
1008   097C 26 2D 00      mov b, $2d
1009   097F B0            cmp a, b
1010   0980 FD 71         seq ; ==
1011   0982 E4            pop a
1012   0983             ; END RELATIONAL
1013   0983 C0 00 00      cmp b, 0
1014   0986 C6 98 09      je _if16_exit
1015   0989             _if16_true:
1016   0989             ;; sign = -1; 
1017   0989 FA FD FF      lea d, [bp + -3] ; $sign
1018   098C DA            push d
1019   098D 26 01 00      mov b, $1
1020   0990 FD 97         neg b
1021   0992 E7            pop d
1022   0993 FD 43         mov [d], b
1023   0995 0A 98 09      jmp _if16_exit
1024   0998             _if16_exit:
1025   0998             ;; str++; 
1026   0998 FA 05 00      lea d, [bp + 5] ; $str
1027   099B 2A            mov b, [d]
1028   099C FD 79         mov g, b
1029   099E FD 77         inc b
1030   09A0 FA 05 00      lea d, [bp + 5] ; $str
1031   09A3 FD 43         mov [d], b
1032   09A5 FD 27         mov b, g
1033   09A7 0A AA 09      jmp _if15_exit
1034   09AA             _if15_exit:
1035   09AA             ;; while (*str >= '0' && *str <= '9') { 
1036   09AA             _while17_cond:
1037   09AA FA 05 00      lea d, [bp + 5] ; $str
1038   09AD 2A            mov b, [d]
1039   09AE 74            mov d, b
1040   09AF 32            mov bl, [d]
1041   09B0 A7 00         mov bh, 0
1042   09B2             ; START RELATIONAL
1043   09B2 D7            push a
1044   09B3 11            mov a, b
1045   09B4 26 30 00      mov b, $30
1046   09B7 B0            cmp a, b
1047   09B8 FD 80         sge ; >=
1048   09BA E4            pop a
1049   09BB             ; END RELATIONAL
1050   09BB D7            push a
1051   09BC 11            mov a, b
1052   09BD FA 05 00      lea d, [bp + 5] ; $str
1053   09C0 2A            mov b, [d]
1054   09C1 74            mov d, b
1055   09C2 32            mov bl, [d]
1056   09C3 A7 00         mov bh, 0
1057   09C5             ; START RELATIONAL
1058   09C5 D7            push a
1059   09C6 11            mov a, b
1060   09C7 26 39 00      mov b, $39
1061   09CA B0            cmp a, b
1062   09CB FD 74         sle ; <=
1063   09CD E4            pop a
1064   09CE             ; END RELATIONAL
1065   09CE FD A7         sand a, b ; &&
1066   09D0 E4            pop a
1067   09D1 C0 00 00      cmp b, 0
1068   09D4 C6 12 0A      je _while17_exit
1069   09D7             _while17_block:
1070   09D7             ;; result = result * 10 + (*str - '0'); 
1071   09D7 FA FF FF      lea d, [bp + -1] ; $result
1072   09DA DA            push d
1073   09DB FA FF FF      lea d, [bp + -1] ; $result
1074   09DE 2A            mov b, [d]
1075   09DF             ; START FACTORS
1076   09DF D7            push a
1077   09E0 11            mov a, b
1078   09E1 26 0A 00      mov b, $a
1079   09E4 AC            mul a, b ; *
1080   09E5 11            mov a, b
1081   09E6 27            mov b, a
1082   09E7 E4            pop a
1083   09E8             ; END FACTORS
1084   09E8             ; START TERMS
1085   09E8 D7            push a
1086   09E9 11            mov a, b
1087   09EA FA 05 00      lea d, [bp + 5] ; $str
1088   09ED 2A            mov b, [d]
1089   09EE 74            mov d, b
1090   09EF 32            mov bl, [d]
1091   09F0 A7 00         mov bh, 0
1092   09F2             ; START TERMS
1093   09F2 D7            push a
1094   09F3 11            mov a, b
1095   09F4 26 30 00      mov b, $30
1096   09F7 60            sub a, b
1097   09F8 27            mov b, a
1098   09F9 E4            pop a
1099   09FA             ; END TERMS
1100   09FA 54            add a, b
1101   09FB 27            mov b, a
1102   09FC E4            pop a
1103   09FD             ; END TERMS
1104   09FD E7            pop d
1105   09FE FD 43         mov [d], b
1106   0A00             ;; str++; 
1107   0A00 FA 05 00      lea d, [bp + 5] ; $str
1108   0A03 2A            mov b, [d]
1109   0A04 FD 79         mov g, b
1110   0A06 FD 77         inc b
1111   0A08 FA 05 00      lea d, [bp + 5] ; $str
1112   0A0B FD 43         mov [d], b
1113   0A0D FD 27         mov b, g
1114   0A0F 0A AA 09      jmp _while17_cond
1115   0A12             _while17_exit:
1116   0A12             ;; return sign * result; 
1117   0A12 FA FD FF      lea d, [bp + -3] ; $sign
1118   0A15 2A            mov b, [d]
1119   0A16             ; START FACTORS
1120   0A16 D7            push a
1121   0A17 11            mov a, b
1122   0A18 FA FF FF      lea d, [bp + -1] ; $result
1123   0A1B 2A            mov b, [d]
1124   0A1C AC            mul a, b ; *
1125   0A1D 11            mov a, b
1126   0A1E 27            mov b, a
1127   0A1F E4            pop a
1128   0A20             ; END FACTORS
1129   0A20 F9            leave
1130   0A21 09            ret
1131   0A22             
1132   0A22             gets:
1133   0A22 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1134   0A25             
1135   0A25             ; --- BEGIN INLINE ASM BLOCK
1136   0A25 FA 05 00      lea d, [bp + 5] ; $s
1137   0A28 15            mov a, [d]
1138   0A29 3C            mov d, a
1139   0A2A 07 A1 0E      call _gets
1140   0A2D             ; --- END INLINE ASM BLOCK
1141   0A2D             
1142   0A2D             ;; return strlen(s); 
1143   0A2D FA 05 00      lea d, [bp + 5] ; $s
1144   0A30 2A            mov b, [d]
1145   0A31 FD AB         swp b
1146   0A33 D8            push b
1147   0A34 07 D8 05      call strlen
1148   0A37 51 02 00      add sp, 2
1149   0A3A F9            leave
1150   0A3B 09            ret
1151   0A3C             
1152   0A3C             prints:
1153   0A3C F8 00 00      enter 0 ; (push bp; mov bp, sp)
1154   0A3F             ; $digits 
1155   0A3F             ; $i 
1156   0A3F 10 00 00      mov a, $0
1157   0A42 45 FA FF      mov [bp + -6], a
1158   0A45 52 07 00      sub sp, 7
1159   0A48             ;; if (num < 0) { 
1160   0A48             _if18_cond:
1161   0A48 FA 05 00      lea d, [bp + 5] ; $num
1162   0A4B 2A            mov b, [d]
1163   0A4C             ; START RELATIONAL
1164   0A4C D7            push a
1165   0A4D 11            mov a, b
1166   0A4E 26 00 00      mov b, $0
1167   0A51 B0            cmp a, b
1168   0A52 FD 73         slt ; < 
1169   0A54 E4            pop a
1170   0A55             ; END RELATIONAL
1171   0A55 C0 00 00      cmp b, 0
1172   0A58 C6 75 0A      je _if18_else
1173   0A5B             _if18_true:
1174   0A5B             ;; putchar('-'); 
1175   0A5B 26 2D 00      mov b, $2d
1176   0A5E DD            push bl
1177   0A5F 07 1D 0C      call putchar
1178   0A62 51 01 00      add sp, 1
1179   0A65             ;; num = -num; 
1180   0A65 FA 05 00      lea d, [bp + 5] ; $num
1181   0A68 DA            push d
1182   0A69 FA 05 00      lea d, [bp + 5] ; $num
1183   0A6C 2A            mov b, [d]
1184   0A6D FD 97         neg b
1185   0A6F E7            pop d
1186   0A70 FD 43         mov [d], b
1187   0A72 0A 97 0A      jmp _if18_exit
1188   0A75             _if18_else:
1189   0A75             ;; if (num == 0) { 
1190   0A75             _if19_cond:
1191   0A75 FA 05 00      lea d, [bp + 5] ; $num
1192   0A78 2A            mov b, [d]
1193   0A79             ; START RELATIONAL
1194   0A79 D7            push a
1195   0A7A 11            mov a, b
1196   0A7B 26 00 00      mov b, $0
1197   0A7E B0            cmp a, b
1198   0A7F FD 71         seq ; ==
1199   0A81 E4            pop a
1200   0A82             ; END RELATIONAL
1201   0A82 C0 00 00      cmp b, 0
1202   0A85 C6 97 0A      je _if19_exit
1203   0A88             _if19_true:
1204   0A88             ;; putchar('0'); 
1205   0A88 26 30 00      mov b, $30
1206   0A8B DD            push bl
1207   0A8C 07 1D 0C      call putchar
1208   0A8F 51 01 00      add sp, 1
1209   0A92             ;; return; 
1210   0A92 F9            leave
1211   0A93 09            ret
1212   0A94 0A 97 0A      jmp _if19_exit
1213   0A97             _if19_exit:
1214   0A97             _if18_exit:
1215   0A97             ;; while (num > 0) { 
1216   0A97             _while20_cond:
1217   0A97 FA 05 00      lea d, [bp + 5] ; $num
1218   0A9A 2A            mov b, [d]
1219   0A9B             ; START RELATIONAL
1220   0A9B D7            push a
1221   0A9C 11            mov a, b
1222   0A9D 26 00 00      mov b, $0
1223   0AA0 B0            cmp a, b
1224   0AA1 FD 7F         sgt ; >
1225   0AA3 E4            pop a
1226   0AA4             ; END RELATIONAL
1227   0AA4 C0 00 00      cmp b, 0
1228   0AA7 C6 F4 0A      je _while20_exit
1229   0AAA             _while20_block:
1230   0AAA             ;; digits[i] = '0' + (num % 10); 
1231   0AAA FA FC FF      lea d, [bp + -4] ; $digits
1232   0AAD D7            push a
1233   0AAE DA            push d
1234   0AAF FA FA FF      lea d, [bp + -6] ; $i
1235   0AB2 2A            mov b, [d]
1236   0AB3 E7            pop d
1237   0AB4 5A            add d, b
1238   0AB5 E4            pop a
1239   0AB6 DA            push d
1240   0AB7 26 30 00      mov b, $30
1241   0ABA             ; START TERMS
1242   0ABA D7            push a
1243   0ABB 11            mov a, b
1244   0ABC FA 05 00      lea d, [bp + 5] ; $num
1245   0ABF 2A            mov b, [d]
1246   0AC0             ; START FACTORS
1247   0AC0 D7            push a
1248   0AC1 11            mov a, b
1249   0AC2 26 0A 00      mov b, $a
1250   0AC5 AE            div a, b ; 
1251   0AC6 11            mov a, b
1252   0AC7 27            mov b, a
1253   0AC8 E4            pop a
1254   0AC9             ; END FACTORS
1255   0AC9 54            add a, b
1256   0ACA 27            mov b, a
1257   0ACB E4            pop a
1258   0ACC             ; END TERMS
1259   0ACC E7            pop d
1260   0ACD FD 3E         mov [d], bl
1261   0ACF             ;; num = num / 10; 
1262   0ACF FA 05 00      lea d, [bp + 5] ; $num
1263   0AD2 DA            push d
1264   0AD3 FA 05 00      lea d, [bp + 5] ; $num
1265   0AD6 2A            mov b, [d]
1266   0AD7             ; START FACTORS
1267   0AD7 D7            push a
1268   0AD8 11            mov a, b
1269   0AD9 26 0A 00      mov b, $a
1270   0ADC AE            div a, b
1271   0ADD 27            mov b, a
1272   0ADE E4            pop a
1273   0ADF             ; END FACTORS
1274   0ADF E7            pop d
1275   0AE0 FD 43         mov [d], b
1276   0AE2             ;; i++; 
1277   0AE2 FA FA FF      lea d, [bp + -6] ; $i
1278   0AE5 2A            mov b, [d]
1279   0AE6 FD 79         mov g, b
1280   0AE8 FD 77         inc b
1281   0AEA FA FA FF      lea d, [bp + -6] ; $i
1282   0AED FD 43         mov [d], b
1283   0AEF FD 27         mov b, g
1284   0AF1 0A 97 0A      jmp _while20_cond
1285   0AF4             _while20_exit:
1286   0AF4             ;; while (i > 0) { 
1287   0AF4             _while21_cond:
1288   0AF4 FA FA FF      lea d, [bp + -6] ; $i
1289   0AF7 2A            mov b, [d]
1290   0AF8             ; START RELATIONAL
1291   0AF8 D7            push a
1292   0AF9 11            mov a, b
1293   0AFA 26 00 00      mov b, $0
1294   0AFD B0            cmp a, b
1295   0AFE FD 7F         sgt ; >
1296   0B00 E4            pop a
1297   0B01             ; END RELATIONAL
1298   0B01 C0 00 00      cmp b, 0
1299   0B04 C6 2F 0B      je _while21_exit
1300   0B07             _while21_block:
1301   0B07             ;; i--; 
1302   0B07 FA FA FF      lea d, [bp + -6] ; $i
1303   0B0A 2A            mov b, [d]
1304   0B0B FD 79         mov g, b
1305   0B0D FD 7D         dec b
1306   0B0F FA FA FF      lea d, [bp + -6] ; $i
1307   0B12 FD 43         mov [d], b
1308   0B14 FD 27         mov b, g
1309   0B16             ;; putchar(digits[i]); 
1310   0B16 FA FC FF      lea d, [bp + -4] ; $digits
1311   0B19 D7            push a
1312   0B1A DA            push d
1313   0B1B FA FA FF      lea d, [bp + -6] ; $i
1314   0B1E 2A            mov b, [d]
1315   0B1F E7            pop d
1316   0B20 5A            add d, b
1317   0B21 E4            pop a
1318   0B22 32            mov bl, [d]
1319   0B23 A7 00         mov bh, 0
1320   0B25 DD            push bl
1321   0B26 07 1D 0C      call putchar
1322   0B29 51 01 00      add sp, 1
1323   0B2C 0A F4 0A      jmp _while21_cond
1324   0B2F             _while21_exit:
1325   0B2F F9            leave
1326   0B30 09            ret
1327   0B31             
1328   0B31             printu:
1329   0B31 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1330   0B34             ; $digits 
1331   0B34             ; $i 
1332   0B34 52 07 00      sub sp, 7
1333   0B37             ;; i = 0; 
1334   0B37 FA FA FF      lea d, [bp + -6] ; $i
1335   0B3A DA            push d
1336   0B3B 26 00 00      mov b, $0
1337   0B3E E7            pop d
1338   0B3F FD 43         mov [d], b
1339   0B41             ;; if(num == 0){ 
1340   0B41             _if22_cond:
1341   0B41 FA 05 00      lea d, [bp + 5] ; $num
1342   0B44 2A            mov b, [d]
1343   0B45             ; START RELATIONAL
1344   0B45 D7            push a
1345   0B46 11            mov a, b
1346   0B47 26 00 00      mov b, $0
1347   0B4A B0            cmp a, b
1348   0B4B FD 71         seq ; ==
1349   0B4D E4            pop a
1350   0B4E             ; END RELATIONAL
1351   0B4E C0 00 00      cmp b, 0
1352   0B51 C6 63 0B      je _if22_exit
1353   0B54             _if22_true:
1354   0B54             ;; putchar('0'); 
1355   0B54 26 30 00      mov b, $30
1356   0B57 DD            push bl
1357   0B58 07 1D 0C      call putchar
1358   0B5B 51 01 00      add sp, 1
1359   0B5E             ;; return; 
1360   0B5E F9            leave
1361   0B5F 09            ret
1362   0B60 0A 63 0B      jmp _if22_exit
1363   0B63             _if22_exit:
1364   0B63             ;; while (num > 0) { 
1365   0B63             _while23_cond:
1366   0B63 FA 05 00      lea d, [bp + 5] ; $num
1367   0B66 2A            mov b, [d]
1368   0B67             ; START RELATIONAL
1369   0B67 D7            push a
1370   0B68 11            mov a, b
1371   0B69 26 00 00      mov b, $0
1372   0B6C B0            cmp a, b
1373   0B6D FD 81         sgu ; > (unsigned)
1374   0B6F E4            pop a
1375   0B70             ; END RELATIONAL
1376   0B70 C0 00 00      cmp b, 0
1377   0B73 C6 C0 0B      je _while23_exit
1378   0B76             _while23_block:
1379   0B76             ;; digits[i] = '0' + (num % 10); 
1380   0B76 FA FC FF      lea d, [bp + -4] ; $digits
1381   0B79 D7            push a
1382   0B7A DA            push d
1383   0B7B FA FA FF      lea d, [bp + -6] ; $i
1384   0B7E 2A            mov b, [d]
1385   0B7F E7            pop d
1386   0B80 5A            add d, b
1387   0B81 E4            pop a
1388   0B82 DA            push d
1389   0B83 26 30 00      mov b, $30
1390   0B86             ; START TERMS
1391   0B86 D7            push a
1392   0B87 11            mov a, b
1393   0B88 FA 05 00      lea d, [bp + 5] ; $num
1394   0B8B 2A            mov b, [d]
1395   0B8C             ; START FACTORS
1396   0B8C D7            push a
1397   0B8D 11            mov a, b
1398   0B8E 26 0A 00      mov b, $a
1399   0B91 AE            div a, b ; 
1400   0B92 11            mov a, b
1401   0B93 27            mov b, a
1402   0B94 E4            pop a
1403   0B95             ; END FACTORS
1404   0B95 54            add a, b
1405   0B96 27            mov b, a
1406   0B97 E4            pop a
1407   0B98             ; END TERMS
1408   0B98 E7            pop d
1409   0B99 FD 3E         mov [d], bl
1410   0B9B             ;; num = num / 10; 
1411   0B9B FA 05 00      lea d, [bp + 5] ; $num
1412   0B9E DA            push d
1413   0B9F FA 05 00      lea d, [bp + 5] ; $num
1414   0BA2 2A            mov b, [d]
1415   0BA3             ; START FACTORS
1416   0BA3 D7            push a
1417   0BA4 11            mov a, b
1418   0BA5 26 0A 00      mov b, $a
1419   0BA8 AE            div a, b
1420   0BA9 27            mov b, a
1421   0BAA E4            pop a
1422   0BAB             ; END FACTORS
1423   0BAB E7            pop d
1424   0BAC FD 43         mov [d], b
1425   0BAE             ;; i++; 
1426   0BAE FA FA FF      lea d, [bp + -6] ; $i
1427   0BB1 2A            mov b, [d]
1428   0BB2 FD 79         mov g, b
1429   0BB4 FD 77         inc b
1430   0BB6 FA FA FF      lea d, [bp + -6] ; $i
1431   0BB9 FD 43         mov [d], b
1432   0BBB FD 27         mov b, g
1433   0BBD 0A 63 0B      jmp _while23_cond
1434   0BC0             _while23_exit:
1435   0BC0             ;; while (i > 0) { 
1436   0BC0             _while24_cond:
1437   0BC0 FA FA FF      lea d, [bp + -6] ; $i
1438   0BC3 2A            mov b, [d]
1439   0BC4             ; START RELATIONAL
1440   0BC4 D7            push a
1441   0BC5 11            mov a, b
1442   0BC6 26 00 00      mov b, $0
1443   0BC9 B0            cmp a, b
1444   0BCA FD 7F         sgt ; >
1445   0BCC E4            pop a
1446   0BCD             ; END RELATIONAL
1447   0BCD C0 00 00      cmp b, 0
1448   0BD0 C6 FB 0B      je _while24_exit
1449   0BD3             _while24_block:
1450   0BD3             ;; i--; 
1451   0BD3 FA FA FF      lea d, [bp + -6] ; $i
1452   0BD6 2A            mov b, [d]
1453   0BD7 FD 79         mov g, b
1454   0BD9 FD 7D         dec b
1455   0BDB FA FA FF      lea d, [bp + -6] ; $i
1456   0BDE FD 43         mov [d], b
1457   0BE0 FD 27         mov b, g
1458   0BE2             ;; putchar(digits[i]); 
1459   0BE2 FA FC FF      lea d, [bp + -4] ; $digits
1460   0BE5 D7            push a
1461   0BE6 DA            push d
1462   0BE7 FA FA FF      lea d, [bp + -6] ; $i
1463   0BEA 2A            mov b, [d]
1464   0BEB E7            pop d
1465   0BEC 5A            add d, b
1466   0BED E4            pop a
1467   0BEE 32            mov bl, [d]
1468   0BEF A7 00         mov bh, 0
1469   0BF1 DD            push bl
1470   0BF2 07 1D 0C      call putchar
1471   0BF5 51 01 00      add sp, 1
1472   0BF8 0A C0 0B      jmp _while24_cond
1473   0BFB             _while24_exit:
1474   0BFB F9            leave
1475   0BFC 09            ret
1476   0BFD             
1477   0BFD             rand:
1478   0BFD F8 00 00      enter 0 ; (push bp; mov bp, sp)
1479   0C00             ; $sec 
1480   0C00 52 01 00      sub sp, 1
1481   0C03             
1482   0C03             ; --- BEGIN INLINE ASM BLOCK
1483   0C03 19 00         mov al, 0
1484   0C05 05 01         syscall sys_rtc					
1485   0C07 1A            mov al, ah
1486   0C08 FA 00 00      lea d, [bp + 0] ; $sec
1487   0C0B 1E            mov al, [d]
1488   0C0C             ; --- END INLINE ASM BLOCK
1489   0C0C             
1490   0C0C             ;; return sec; 
1491   0C0C FA 00 00      lea d, [bp + 0] ; $sec
1492   0C0F 32            mov bl, [d]
1493   0C10 A7 00         mov bh, 0
1494   0C12 F9            leave
1495   0C13 09            ret
1496   0C14             
1497   0C14             date:
1498   0C14 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1499   0C17             
1500   0C17             ; --- BEGIN INLINE ASM BLOCK
1501   0C17 19 00         mov al, 0 
1502   0C19 05 07         syscall sys_datetime
1503   0C1B             ; --- END INLINE ASM BLOCK
1504   0C1B             
1505   0C1B F9            leave
1506   0C1C 09            ret
1507   0C1D             
1508   0C1D             putchar:
1509   0C1D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1510   0C20             
1511   0C20             ; --- BEGIN INLINE ASM BLOCK
1512   0C20 FA 05 00      lea d, [bp + 5] ; $c
1513   0C23 1E            mov al, [d]
1514   0C24 23            mov ah, al
1515   0C25 07 9A 0E      call _putchar
1516   0C28             ; --- END INLINE ASM BLOCK
1517   0C28             
1518   0C28 F9            leave
1519   0C29 09            ret
1520   0C2A             
1521   0C2A             getchar:
1522   0C2A F8 00 00      enter 0 ; (push bp; mov bp, sp)
1523   0C2D             ; $c 
1524   0C2D 52 01 00      sub sp, 1
1525   0C30             
1526   0C30             ; --- BEGIN INLINE ASM BLOCK
1527   0C30 07 93 0E      call getch
1528   0C33 1A            mov al, ah
1529   0C34 FA 00 00      lea d, [bp + 0] ; $c
1530   0C37 3E            mov [d], al
1531   0C38             ; --- END INLINE ASM BLOCK
1532   0C38             
1533   0C38             ;; return c; 
1534   0C38 FA 00 00      lea d, [bp + 0] ; $c
1535   0C3B 32            mov bl, [d]
1536   0C3C A7 00         mov bh, 0
1537   0C3E F9            leave
1538   0C3F 09            ret
1539   0C40             
1540   0C40             scann:
1541   0C40 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1542   0C43             ; $m 
1543   0C43 52 02 00      sub sp, 2
1544   0C46             
1545   0C46             ; --- BEGIN INLINE ASM BLOCK
1546   0C46 07 DE 10      call scan_u16d
1547   0C49 FA FF FF      lea d, [bp + -1] ; $m
1548   0C4C 43            mov [d], a
1549   0C4D             ; --- END INLINE ASM BLOCK
1550   0C4D             
1551   0C4D             ;; return m; 
1552   0C4D FA FF FF      lea d, [bp + -1] ; $m
1553   0C50 2A            mov b, [d]
1554   0C51 F9            leave
1555   0C52 09            ret
1556   0C53             
1557   0C53             puts:
1558   0C53 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1559   0C56             
1560   0C56             ; --- BEGIN INLINE ASM BLOCK
1561   0C56 FA 05 00      lea d, [bp + 5] ; $s
1562   0C59 15            mov a, [d]
1563   0C5A 3C            mov d, a
1564   0C5B 07 E4 0F      call _puts
1565   0C5E 10 00 0A      mov a, $0A00
1566   0C61 05 03         syscall sys_io
1567   0C63             ; --- END INLINE ASM BLOCK
1568   0C63             
1569   0C63 F9            leave
1570   0C64 09            ret
1571   0C65             
1572   0C65             print:
1573   0C65 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1574   0C68             
1575   0C68             ; --- BEGIN INLINE ASM BLOCK
1576   0C68 FA 05 00      lea d, [bp + 5] ; $s
1577   0C6B FD 2A         mov d, [d]
1578   0C6D 07 E4 0F      call _puts
1579   0C70             ; --- END INLINE ASM BLOCK
1580   0C70             
1581   0C70 F9            leave
1582   0C71 09            ret
1583   0C72             
1584   0C72             loadfile:
1585   0C72 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1586   0C75             
1587   0C75             ; --- BEGIN INLINE ASM BLOCK
1588   0C75 FA 05 00      lea d, [bp + 5] ; $destination
1589   0C78 15            mov a, [d]
1590   0C79 4F            mov di, a
1591   0C7A FA 07 00      lea d, [bp + 7] ; $filename
1592   0C7D FD 2A         mov d, [d]
1593   0C7F 19 14         mov al, 20
1594   0C81 05 04         syscall sys_filesystem
1595   0C83             ; --- END INLINE ASM BLOCK
1596   0C83             
1597   0C83 F9            leave
1598   0C84 09            ret
1599   0C85             
1600   0C85             create_file:
1601   0C85 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1602   0C88 F9            leave
1603   0C89 09            ret
1604   0C8A             
1605   0C8A             delete_file:
1606   0C8A F8 00 00      enter 0 ; (push bp; mov bp, sp)
1607   0C8D             
1608   0C8D             ; --- BEGIN INLINE ASM BLOCK
1609   0C8D FA 05 00      lea d, [bp + 5] ; $filename
1610   0C90 19 0A         mov al, 10
1611   0C92 05 04         syscall sys_filesystem
1612   0C94             ; --- END INLINE ASM BLOCK
1613   0C94             
1614   0C94 F9            leave
1615   0C95 09            ret
1616   0C96             
1617   0C96             fopen:
1618   0C96 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1619   0C99 F9            leave
1620   0C9A 09            ret
1621   0C9B             
1622   0C9B             fclose:
1623   0C9B F8 00 00      enter 0 ; (push bp; mov bp, sp)
1624   0C9E F9            leave
1625   0C9F 09            ret
1626   0CA0             
1627   0CA0             alloc:
1628   0CA0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1629   0CA3             ;; heap_top = heap_top + bytes; 
1630   0CA3 3B 1C 2B      mov d, _heap_top ; $heap_top
1631   0CA6 DA            push d
1632   0CA7 3B 1C 2B      mov d, _heap_top ; $heap_top
1633   0CAA 2A            mov b, [d]
1634   0CAB             ; START TERMS
1635   0CAB D7            push a
1636   0CAC 11            mov a, b
1637   0CAD FA 05 00      lea d, [bp + 5] ; $bytes
1638   0CB0 2A            mov b, [d]
1639   0CB1 54            add a, b
1640   0CB2 27            mov b, a
1641   0CB3 E4            pop a
1642   0CB4             ; END TERMS
1643   0CB4 E7            pop d
1644   0CB5 FD 43         mov [d], b
1645   0CB7             ;; return heap_top - bytes; 
1646   0CB7 3B 1C 2B      mov d, _heap_top ; $heap_top
1647   0CBA 2A            mov b, [d]
1648   0CBB             ; START TERMS
1649   0CBB D7            push a
1650   0CBC 11            mov a, b
1651   0CBD FA 05 00      lea d, [bp + 5] ; $bytes
1652   0CC0 2A            mov b, [d]
1653   0CC1 60            sub a, b
1654   0CC2 27            mov b, a
1655   0CC3 E4            pop a
1656   0CC4             ; END TERMS
1657   0CC4 F9            leave
1658   0CC5 09            ret
1659   0CC6             
1660   0CC6             free:
1661   0CC6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1662   0CC9             ;; return heap_top = heap_top - bytes; 
1663   0CC9 3B 1C 2B      mov d, _heap_top ; $heap_top
1664   0CCC DA            push d
1665   0CCD 3B 1C 2B      mov d, _heap_top ; $heap_top
1666   0CD0 2A            mov b, [d]
1667   0CD1             ; START TERMS
1668   0CD1 D7            push a
1669   0CD2 11            mov a, b
1670   0CD3 FA 05 00      lea d, [bp + 5] ; $bytes
1671   0CD6 2A            mov b, [d]
1672   0CD7 60            sub a, b
1673   0CD8 27            mov b, a
1674   0CD9 E4            pop a
1675   0CDA             ; END TERMS
1676   0CDA E7            pop d
1677   0CDB FD 43         mov [d], b
1678   0CDD F9            leave
1679   0CDE 09            ret
1680   0CDF             
1681   0CDF             exit:
1682   0CDF F8 00 00      enter 0 ; (push bp; mov bp, sp)
1683   0CE2             
1684   0CE2             ; --- BEGIN INLINE ASM BLOCK
1685   0CE2 05 0B         syscall sys_terminate_proc
1686   0CE4             ; --- END INLINE ASM BLOCK
1687   0CE4             
1688   0CE4 F9            leave
1689   0CE5 09            ret
1690   0CE6             
1691   0CE6             load_hex:
1692   0CE6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1693   0CE9             ; $temp 
1694   0CE9 52 02 00      sub sp, 2
1695   0CEC             ;; temp = alloc(32768); 
1696   0CEC FA FF FF      lea d, [bp + -1] ; $temp
1697   0CEF DA            push d
1698   0CF0 26 00 80      mov b, $8000
1699   0CF3 FD AB         swp b
1700   0CF5 D8            push b
1701   0CF6 07 A0 0C      call alloc
1702   0CF9 51 02 00      add sp, 2
1703   0CFC E7            pop d
1704   0CFD FD 43         mov [d], b
1705   0CFF             
1706   0CFF             ; --- BEGIN INLINE ASM BLOCK
1707   0CFF               
1708   0CFF               
1709   0CFF               
1710   0CFF               
1711   0CFF               
1712   0CFF             _load_hex:
1713   0CFF D7            push a
1714   0D00 D8            push b
1715   0D01 DA            push d
1716   0D02 E2            push si
1717   0D03 E3            push di
1718   0D04 52 00 80      sub sp, $8000      
1719   0D07 38 00 00      mov c, 0
1720   0D0A 48            mov a, sp
1721   0D0B 77            inc a
1722   0D0C 3C            mov d, a          
1723   0D0D 07 A1 0E      call _gets        
1724   0D10 4D            mov si, a
1725   0D11             __load_hex_loop:
1726   0D11 F6            lodsb             
1727   0D12 B9 00         cmp al, 0         
1728   0D14 C6 22 0D      jz __load_hex_ret
1729   0D17 36            mov bh, al
1730   0D18 F6            lodsb
1731   0D19 2F            mov bl, al
1732   0D1A 07 57 0E      call _atoi        
1733   0D1D F7            stosb             
1734   0D1E 78            inc c
1735   0D1F 0A 11 0D      jmp __load_hex_loop
1736   0D22             __load_hex_ret:
1737   0D22 51 00 80      add sp, $8000
1738   0D25 F0            pop di
1739   0D26 EF            pop si
1740   0D27 E7            pop d
1741   0D28 E5            pop b
1742   0D29 E4            pop a
1743   0D2A             ; --- END INLINE ASM BLOCK
1744   0D2A             
1745   0D2A F9            leave
1746   0D2B 09            ret
1747   0D2C             
1748   0D2C             getparam:
1749   0D2C F8 00 00      enter 0 ; (push bp; mov bp, sp)
1750   0D2F             ; $data 
1751   0D2F 52 01 00      sub sp, 1
1752   0D32             
1753   0D32             ; --- BEGIN INLINE ASM BLOCK
1754   0D32 19 04         mov al, 4
1755   0D34 FA 05 00      lea d, [bp + 5] ; $address
1756   0D37 FD 2A         mov d, [d]
1757   0D39 05 0C         syscall sys_system
1758   0D3B FA 00 00      lea d, [bp + 0] ; $data
1759   0D3E FD 3E         mov [d], bl
1760   0D40             ; --- END INLINE ASM BLOCK
1761   0D40             
1762   0D40             ;; return data; 
1763   0D40 FA 00 00      lea d, [bp + 0] ; $data
1764   0D43 32            mov bl, [d]
1765   0D44 A7 00         mov bh, 0
1766   0D46 F9            leave
1767   0D47 09            ret
1768   0D48             
1769   0D48             clear:
1770   0D48 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1771   0D4B             ;; print("\033[2J\033[H"); 
1772   0D4B 26 6C 23      mov b, __s3 ; "\033[2J\033[H"
1773   0D4E FD AB         swp b
1774   0D50 D8            push b
1775   0D51 07 65 0C      call print
1776   0D54 51 02 00      add sp, 2
1777   0D57 F9            leave
1778   0D58 09            ret
1779   0D59             
1780   0D59             printun:
1781   0D59 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1782   0D5C             ;; print(prompt); 
1783   0D5C FA 07 00      lea d, [bp + 7] ; $prompt
1784   0D5F 2A            mov b, [d]
1785   0D60 FD AB         swp b
1786   0D62 D8            push b
1787   0D63 07 65 0C      call print
1788   0D66 51 02 00      add sp, 2
1789   0D69             ;; printu(n); 
1790   0D69 FA 05 00      lea d, [bp + 5] ; $n
1791   0D6C 2A            mov b, [d]
1792   0D6D FD AB         swp b
1793   0D6F D8            push b
1794   0D70 07 31 0B      call printu
1795   0D73 51 02 00      add sp, 2
1796   0D76             ;; print("\n"); 
1797   0D76 26 74 23      mov b, __s4 ; "\n"
1798   0D79 FD AB         swp b
1799   0D7B D8            push b
1800   0D7C 07 65 0C      call print
1801   0D7F 51 02 00      add sp, 2
1802   0D82 F9            leave
1803   0D83 09            ret
1804   0D84             
1805   0D84             printsn:
1806   0D84 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1807   0D87             ;; print(prompt); 
1808   0D87 FA 07 00      lea d, [bp + 7] ; $prompt
1809   0D8A 2A            mov b, [d]
1810   0D8B FD AB         swp b
1811   0D8D D8            push b
1812   0D8E 07 65 0C      call print
1813   0D91 51 02 00      add sp, 2
1814   0D94             ;; prints(n); 
1815   0D94 FA 05 00      lea d, [bp + 5] ; $n
1816   0D97 2A            mov b, [d]
1817   0D98 FD AB         swp b
1818   0D9A D8            push b
1819   0D9B 07 3C 0A      call prints
1820   0D9E 51 02 00      add sp, 2
1821   0DA1             ;; print("\n"); 
1822   0DA1 26 74 23      mov b, __s4 ; "\n"
1823   0DA4 FD AB         swp b
1824   0DA6 D8            push b
1825   0DA7 07 65 0C      call print
1826   0DAA 51 02 00      add sp, 2
1827   0DAD F9            leave
1828   0DAE 09            ret
1829   0DAF             
1830   0DAF             include_stdio_asm:
1831   0DAF F8 00 00      enter 0 ; (push bp; mov bp, sp)
1832   0DB2             
1833   0DB2             ; --- BEGIN INLINE ASM BLOCK
1834   0DB2             .include "lib/stdio.asm"
0001+  0DB2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0DB2             ; stdio.s
0003+  0DB2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0DB2             .include "lib/string.asm"
0001++ 0DB2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0DB2             ; string.s
0003++ 0DB2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0DB2             
0005++ 0DB2             
0006++ 0DB2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0DB2             ; _strrev
0008++ 0DB2             ; reverse a string
0009++ 0DB2             ; D = string address
0010++ 0DB2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0DB2             ; 01234
0012++ 0DB2             _strrev:
0013++ 0DB2 4B          	pusha
0014++ 0DB3 07 F9 0D    	call _strlen	; length in C
0015++ 0DB6 12          	mov a, c
0016++ 0DB7 AF 01 00    	cmp a, 1
0017++ 0DBA D0 D4 0D    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 0DBD 7D          	dec a
0019++ 0DBE FD 4E       	mov si, d	; beginning of string
0020++ 0DC0 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0DC2 59          	add d, a	; end of string
0022++ 0DC3 12          	mov a, c
0023++ 0DC4 FD 9B       	shr a		; divide by 2
0024++ 0DC6 39          	mov c, a	; C now counts the steps
0025++ 0DC7             _strrev_L0:
0026++ 0DC7 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0DC8 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0DC9 3E          	mov [d], al	; store left char into right side
0029++ 0DCA 1B          	mov al, bl
0030++ 0DCB F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0DCC 7E          	dec c
0032++ 0DCD 7F          	dec d
0033++ 0DCE C2 00 00    	cmp c, 0
0034++ 0DD1 C7 C7 0D    	jne _strrev_L0
0035++ 0DD4             _strrev_end:
0036++ 0DD4 4C          	popa
0037++ 0DD5 09          	ret
0038++ 0DD6             	
0039++ 0DD6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0DD6             ; _strchr
0041++ 0DD6             ; search string in D for char in AL
0042++ 0DD6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0DD6             _strchr:
0044++ 0DD6             _strchr_L0:
0045++ 0DD6 32          	mov bl, [d]
0046++ 0DD7 C1 00       	cmp bl, 0
0047++ 0DD9 C6 E4 0D    	je _strchr_end
0048++ 0DDC BA          	cmp al, bl
0049++ 0DDD C6 E4 0D    	je _strchr_end
0050++ 0DE0 79          	inc d
0051++ 0DE1 0A D6 0D    	jmp _strchr_L0
0052++ 0DE4             _strchr_end:
0053++ 0DE4 1B          	mov al, bl
0054++ 0DE5 09          	ret
0055++ 0DE6             
0056++ 0DE6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0DE6             ; _strstr
0058++ 0DE6             ; find sub-string
0059++ 0DE6             ; str1 in SI
0060++ 0DE6             ; str2 in DI
0061++ 0DE6             ; SI points to end of source string
0062++ 0DE6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0DE6             _strstr:
0064++ 0DE6 DB          	push al
0065++ 0DE7 DA          	push d
0066++ 0DE8 E3          	push di
0067++ 0DE9             _strstr_loop:
0068++ 0DE9 F3          	cmpsb					; compare a byte of the strings
0069++ 0DEA C7 F5 0D    	jne _strstr_ret
0070++ 0DED FC 00 00    	lea d, [di + 0]
0071++ 0DF0 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0DF2 C7 E9 0D    	jne _strstr_loop				; equal chars but not at end
0073++ 0DF5             _strstr_ret:
0074++ 0DF5 F0          	pop di
0075++ 0DF6 E7          	pop d
0076++ 0DF7 E8          	pop al
0077++ 0DF8 09          	ret
0078++ 0DF9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0DF9             ; length of null terminated string
0080++ 0DF9             ; result in C
0081++ 0DF9             ; pointer in D
0082++ 0DF9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0DF9             _strlen:
0084++ 0DF9 DA          	push d
0085++ 0DFA 38 00 00    	mov c, 0
0086++ 0DFD             _strlen_L1:
0087++ 0DFD BD 00       	cmp byte [d], 0
0088++ 0DFF C6 07 0E    	je _strlen_ret
0089++ 0E02 79          	inc d
0090++ 0E03 78          	inc c
0091++ 0E04 0A FD 0D    	jmp _strlen_L1
0092++ 0E07             _strlen_ret:
0093++ 0E07 E7          	pop d
0094++ 0E08 09          	ret
0095++ 0E09             
0096++ 0E09             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 0E09             ; STRCMP
0098++ 0E09             ; compare two strings
0099++ 0E09             ; str1 in SI
0100++ 0E09             ; str2 in DI
0101++ 0E09             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 0E09             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 0E09             _strcmp:
0104++ 0E09 DB          	push al
0105++ 0E0A DA          	push d
0106++ 0E0B E3          	push di
0107++ 0E0C E2          	push si
0108++ 0E0D             _strcmp_loop:
0109++ 0E0D F3          	cmpsb					; compare a byte of the strings
0110++ 0E0E C7 19 0E    	jne _strcmp_ret
0111++ 0E11 FB FF FF    	lea d, [si +- 1]
0112++ 0E14 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 0E16 C7 0D 0E    	jne _strcmp_loop				; equal chars but not at end
0114++ 0E19             _strcmp_ret:
0115++ 0E19 EF          	pop si
0116++ 0E1A F0          	pop di
0117++ 0E1B E7          	pop d
0118++ 0E1C E8          	pop al
0119++ 0E1D 09          	ret
0120++ 0E1E             
0121++ 0E1E             
0122++ 0E1E             ; STRCPY
0123++ 0E1E             ; copy null terminated string from SI to DI
0124++ 0E1E             ; source in SI
0125++ 0E1E             ; destination in DI
0126++ 0E1E             _strcpy:
0127++ 0E1E E2          	push si
0128++ 0E1F E3          	push di
0129++ 0E20 DB          	push al
0130++ 0E21             _strcpy_L1:
0131++ 0E21 F6          	lodsb
0132++ 0E22 F7          	stosb
0133++ 0E23 B9 00       	cmp al, 0
0134++ 0E25 C7 21 0E    	jne _strcpy_L1
0135++ 0E28             _strcpy_end:
0136++ 0E28 E8          	pop al
0137++ 0E29 F0          	pop di
0138++ 0E2A EF          	pop si
0139++ 0E2B 09          	ret
0140++ 0E2C             
0141++ 0E2C             ; STRCAT
0142++ 0E2C             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 0E2C             ; source in SI
0144++ 0E2C             ; destination in DI
0145++ 0E2C             _strcat:
0146++ 0E2C E2          	push si
0147++ 0E2D E3          	push di
0148++ 0E2E D7          	push a
0149++ 0E2F DA          	push d
0150++ 0E30 50          	mov a, di
0151++ 0E31 3C          	mov d, a
0152++ 0E32             _strcat_goto_end_L1:
0153++ 0E32 BD 00       	cmp byte[d], 0
0154++ 0E34 C6 3B 0E    	je _strcat_start
0155++ 0E37 79          	inc d
0156++ 0E38 0A 32 0E    	jmp _strcat_goto_end_L1
0157++ 0E3B             _strcat_start:
0158++ 0E3B FD 50       	mov di, d
0159++ 0E3D             _strcat_L1:
0160++ 0E3D F6          	lodsb
0161++ 0E3E F7          	stosb
0162++ 0E3F B9 00       	cmp al, 0
0163++ 0E41 C7 3D 0E    	jne _strcat_L1
0164++ 0E44             _strcat_end:
0165++ 0E44 E7          	pop d
0166++ 0E45 E4          	pop a
0167++ 0E46 F0          	pop di
0168++ 0E47 EF          	pop si
0169++ 0E48 09          	ret
0170++ 0E49             
0171++ 0E49             
0005+  0E49             
0006+  0E49             
0007+  0E49             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  0E49             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0009+  0E49             ; ASCII in BL
0010+  0E49             ; result in AL
0011+  0E49             ; ascii for F = 0100 0110
0012+  0E49             ; ascii for 9 = 0011 1001
0013+  0E49             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  0E49             hex_ascii_encode:
0015+  0E49 1B            mov al, bl
0016+  0E4A 93 40         test al, $40        ; test if letter or number
0017+  0E4C C7 52 0E      jnz hex_letter
0018+  0E4F 87 0F         and al, $0F        ; get number
0019+  0E51 09            ret
0020+  0E52             hex_letter:
0021+  0E52 87 0F         and al, $0F        ; get letter
0022+  0E54 6A 09         add al, 9
0023+  0E56 09            ret
0024+  0E57             
0025+  0E57             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  0E57             ; ATOI
0027+  0E57             ; 2 letter hex string in B
0028+  0E57             ; 8bit integer returned in AL
0029+  0E57             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  0E57             _atoi:
0031+  0E57 D8            push b
0032+  0E58 07 49 0E      call hex_ascii_encode      ; convert BL to 4bit code in AL
0033+  0E5B 30            mov bl, bh
0034+  0E5C DB            push al          ; save a
0035+  0E5D 07 49 0E      call hex_ascii_encode
0036+  0E60 EA            pop bl  
0037+  0E61 FD 9E 04      shl al, 4
0038+  0E64 8C            or al, bl
0039+  0E65 E5            pop b
0040+  0E66 09            ret  
0041+  0E67             
0042+  0E67             
0043+  0E67             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  0E67             ; scanf
0045+  0E67             ; no need for explanations!
0046+  0E67             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  0E67             scanf:
0048+  0E67 09            ret
0049+  0E68             
0050+  0E68             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  0E68             ; ITOA
0052+  0E68             ; 8bit value in BL
0053+  0E68             ; 2 byte ASCII result in A
0054+  0E68             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  0E68             _itoa:
0056+  0E68 DA            push d
0057+  0E69 D8            push b
0058+  0E6A A7 00         mov bh, 0
0059+  0E6C FD A4 04      shr bl, 4  
0060+  0E6F 74            mov d, b
0061+  0E70 1F 18 11      mov al, [d + s_hex_digits]
0062+  0E73 23            mov ah, al
0063+  0E74               
0064+  0E74 E5            pop b
0065+  0E75 D8            push b
0066+  0E76 A7 00         mov bh, 0
0067+  0E78 FD 87 0F      and bl, $0F
0068+  0E7B 74            mov d, b
0069+  0E7C 1F 18 11      mov al, [d + s_hex_digits]
0070+  0E7F E5            pop b
0071+  0E80 E7            pop d
0072+  0E81 09            ret
0073+  0E82             
0074+  0E82             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  0E82             ; HEX STRING TO BINARY
0076+  0E82             ; di = destination address
0077+  0E82             ; si = source
0078+  0E82             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  0E82             _hex_to_int:
0080+  0E82             _hex_to_int_L1:
0081+  0E82 F6            lodsb          ; load from [SI] to AL
0082+  0E83 B9 00         cmp al, 0        ; check if ASCII 0
0083+  0E85 C6 92 0E      jz _hex_to_int_ret
0084+  0E88 36            mov bh, al
0085+  0E89 F6            lodsb
0086+  0E8A 2F            mov bl, al
0087+  0E8B 07 57 0E      call _atoi        ; convert ASCII byte in B to int (to AL)
0088+  0E8E F7            stosb          ; store AL to [DI]
0089+  0E8F 0A 82 0E      jmp _hex_to_int_L1
0090+  0E92             _hex_to_int_ret:
0091+  0E92 09            ret    
0092+  0E93             
0093+  0E93             
0094+  0E93             
0095+  0E93             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  0E93             ; GETCHAR
0097+  0E93             ; char in ah
0098+  0E93             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  0E93             getch:
0100+  0E93 DB            push al
0101+  0E94             getch_retry:
0102+  0E94 19 01         mov al, 1
0103+  0E96 05 03         syscall sys_io      ; receive in AH
0104+  0E98 E8            pop al
0105+  0E99 09            ret
0106+  0E9A             
0107+  0E9A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  0E9A             ; PUTCHAR
0109+  0E9A             ; char in ah
0110+  0E9A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  0E9A             _putchar:
0112+  0E9A D7            push a
0113+  0E9B 19 00         mov al, 0
0114+  0E9D 05 03         syscall sys_io      ; char in AH
0115+  0E9F E4            pop a
0116+  0EA0 09            ret
0117+  0EA1             
0118+  0EA1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  0EA1             ;; INPUT A STRING
0120+  0EA1             ;; terminates with null
0121+  0EA1             ;; pointer in D
0122+  0EA1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  0EA1             _gets:
0124+  0EA1 D7            push a
0125+  0EA2 DA            push d
0126+  0EA3             _gets_loop:
0127+  0EA3 19 01         mov al, 1
0128+  0EA5 05 03         syscall sys_io      ; receive in AH
0129+  0EA7 B9 00         cmp al, 0        ; check error code (AL)
0130+  0EA9 C6 A3 0E      je _gets_loop      ; if no char received, retry
0131+  0EAC             
0132+  0EAC 76 1B         cmp ah, 27
0133+  0EAE C6 CF 0E      je _gets_ansi_esc
0134+  0EB1 76 0A         cmp ah, $0A        ; LF
0135+  0EB3 C6 3A 0F      je _gets_end
0136+  0EB6 76 0D         cmp ah, $0D        ; CR
0137+  0EB8 C6 3A 0F      je _gets_end
0138+  0EBB 76 5C         cmp ah, $5C        ; '\\'
0139+  0EBD C6 FB 0E      je _gets_escape
0140+  0EC0               
0141+  0EC0 76 08         cmp ah, $08      ; check for backspace
0142+  0EC2 C6 CB 0E      je _gets_backspace
0143+  0EC5             
0144+  0EC5 1A            mov al, ah
0145+  0EC6 3E            mov [d], al
0146+  0EC7 79            inc d
0147+  0EC8 0A A3 0E      jmp _gets_loop
0148+  0ECB             _gets_backspace:
0149+  0ECB 7F            dec d
0150+  0ECC 0A A3 0E      jmp _gets_loop
0151+  0ECF             _gets_ansi_esc:
0152+  0ECF 19 01         mov al, 1
0153+  0ED1 05 03         syscall sys_io        ; receive in AH without echo
0154+  0ED3 B9 00         cmp al, 0          ; check error code (AL)
0155+  0ED5 C6 CF 0E      je _gets_ansi_esc    ; if no char received, retry
0156+  0ED8 76 5B         cmp ah, '['
0157+  0EDA C7 A3 0E      jne _gets_loop
0158+  0EDD             _gets_ansi_esc_2:
0159+  0EDD 19 01         mov al, 1
0160+  0EDF 05 03         syscall sys_io          ; receive in AH without echo
0161+  0EE1 B9 00         cmp al, 0            ; check error code (AL)
0162+  0EE3 C6 DD 0E      je _gets_ansi_esc_2  ; if no char received, retry
0163+  0EE6 76 44         cmp ah, 'D'
0164+  0EE8 C6 F3 0E      je _gets_left_arrow
0165+  0EEB 76 43         cmp ah, 'C'
0166+  0EED C6 F7 0E      je _gets_right_arrow
0167+  0EF0 0A A3 0E      jmp _gets_loop
0168+  0EF3             _gets_left_arrow:
0169+  0EF3 7F            dec d
0170+  0EF4 0A A3 0E      jmp _gets_loop
0171+  0EF7             _gets_right_arrow:
0172+  0EF7 79            inc d
0173+  0EF8 0A A3 0E      jmp _gets_loop
0174+  0EFB             _gets_escape:
0175+  0EFB 19 01         mov al, 1
0176+  0EFD 05 03         syscall sys_io      ; receive in AH
0177+  0EFF B9 00         cmp al, 0        ; check error code (AL)
0178+  0F01 C6 FB 0E      je _gets_escape      ; if no char received, retry
0179+  0F04 76 6E         cmp ah, 'n'
0180+  0F06 C6 25 0F      je _gets_LF
0181+  0F09 76 72         cmp ah, 'r'
0182+  0F0B C6 2C 0F      je _gets_CR
0183+  0F0E 76 30         cmp ah, '0'
0184+  0F10 C6 33 0F      je _gets_NULL
0185+  0F13 76 5C         cmp ah, $5C  ; '\'
0186+  0F15 C6 1E 0F      je _gets_slash
0187+  0F18 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0188+  0F19 3E            mov [d], al
0189+  0F1A 79            inc d
0190+  0F1B 0A A3 0E      jmp _gets_loop
0191+  0F1E             _gets_slash:
0192+  0F1E 19 5C         mov al, $5C
0193+  0F20 3E            mov [d], al
0194+  0F21 79            inc d
0195+  0F22 0A A3 0E      jmp _gets_loop
0196+  0F25             _gets_LF:
0197+  0F25 19 0A         mov al, $0A
0198+  0F27 3E            mov [d], al
0199+  0F28 79            inc d
0200+  0F29 0A A3 0E      jmp _gets_loop
0201+  0F2C             _gets_CR:
0202+  0F2C 19 0D         mov al, $0D
0203+  0F2E 3E            mov [d], al
0204+  0F2F 79            inc d
0205+  0F30 0A A3 0E      jmp _gets_loop
0206+  0F33             _gets_NULL:
0207+  0F33 19 00         mov al, $00
0208+  0F35 3E            mov [d], al
0209+  0F36 79            inc d
0210+  0F37 0A A3 0E      jmp _gets_loop
0211+  0F3A             _gets_end:
0212+  0F3A 19 00         mov al, 0
0213+  0F3C 3E            mov [d], al        ; terminate string
0214+  0F3D E7            pop d
0215+  0F3E E4            pop a
0216+  0F3F 09            ret
0217+  0F40             
0218+  0F40             
0219+  0F40             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0220+  0F40             ;; INPUT TEXT
0221+  0F40             ;; terminated with CTRL+D
0222+  0F40             ;; pointer in D
0223+  0F40             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0224+  0F40             _gettxt:
0225+  0F40 D7            push a
0226+  0F41 DA            push d
0227+  0F42             _gettxt_loop:
0228+  0F42 19 01         mov al, 1
0229+  0F44 05 03         syscall sys_io      ; receive in AH
0230+  0F46 B9 00         cmp al, 0        ; check error code (AL)
0231+  0F48 C6 42 0F      je _gettxt_loop    ; if no char received, retry
0232+  0F4B 76 04         cmp ah, 4      ; EOT
0233+  0F4D C6 8B 0F      je _gettxt_end
0234+  0F50 76 08         cmp ah, $08      ; check for backspace
0235+  0F52 C6 87 0F      je _gettxt_backspace
0236+  0F55 76 5C         cmp ah, $5C        ; '\'
0237+  0F57 C6 60 0F      je _gettxt_escape
0238+  0F5A 1A            mov al, ah
0239+  0F5B 3E            mov [d], al
0240+  0F5C 79            inc d
0241+  0F5D 0A 42 0F      jmp _gettxt_loop
0242+  0F60             _gettxt_escape:
0243+  0F60 19 01         mov al, 1
0244+  0F62 05 03         syscall sys_io      ; receive in AH
0245+  0F64 B9 00         cmp al, 0        ; check error code (AL)
0246+  0F66 C6 60 0F      je _gettxt_escape    ; if no char received, retry
0247+  0F69 76 6E         cmp ah, 'n'
0248+  0F6B C6 79 0F      je _gettxt_LF
0249+  0F6E 76 72         cmp ah, 'r'
0250+  0F70 C6 80 0F      je _gettxt_CR
0251+  0F73 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0252+  0F74 3E            mov [d], al
0253+  0F75 79            inc d
0254+  0F76 0A 42 0F      jmp _gettxt_loop
0255+  0F79             _gettxt_LF:
0256+  0F79 19 0A         mov al, $0A
0257+  0F7B 3E            mov [d], al
0258+  0F7C 79            inc d
0259+  0F7D 0A 42 0F      jmp _gettxt_loop
0260+  0F80             _gettxt_CR:
0261+  0F80 19 0D         mov al, $0D
0262+  0F82 3E            mov [d], al
0263+  0F83 79            inc d
0264+  0F84 0A 42 0F      jmp _gettxt_loop
0265+  0F87             _gettxt_backspace:
0266+  0F87 7F            dec d
0267+  0F88 0A 42 0F      jmp _gettxt_loop
0268+  0F8B             _gettxt_end:
0269+  0F8B 19 00         mov al, 0
0270+  0F8D 3E            mov [d], al        ; terminate string
0271+  0F8E E7            pop d
0272+  0F8F E4            pop a
0273+  0F90 09            ret
0274+  0F91             
0275+  0F91             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  0F91             ; PRINT NEW LINE
0277+  0F91             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0278+  0F91             printnl:
0279+  0F91 D7            push a
0280+  0F92 10 00 0A      mov a, $0A00
0281+  0F95 05 03         syscall sys_io
0282+  0F97 10 00 0D      mov a, $0D00
0283+  0F9A 05 03         syscall sys_io
0284+  0F9C E4            pop a
0285+  0F9D 09            ret
0286+  0F9E             
0287+  0F9E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  0F9E             ; _strtoint
0289+  0F9E             ; 4 digit hex string number in d
0290+  0F9E             ; integer returned in A
0291+  0F9E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0292+  0F9E             _strtointx:
0293+  0F9E D8            push b
0294+  0F9F 32            mov bl, [d]
0295+  0FA0 37            mov bh, bl
0296+  0FA1 33 01 00      mov bl, [d + 1]
0297+  0FA4 07 57 0E      call _atoi        ; convert to int in AL
0298+  0FA7 23            mov ah, al        ; move to AH
0299+  0FA8 33 02 00      mov bl, [d + 2]
0300+  0FAB 37            mov bh, bl
0301+  0FAC 33 03 00      mov bl, [d + 3]
0302+  0FAF 07 57 0E      call _atoi        ; convert to int in AL
0303+  0FB2 E5            pop b
0304+  0FB3 09            ret
0305+  0FB4             
0306+  0FB4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0307+  0FB4             ; _strtoint
0308+  0FB4             ; 5 digit base10 string number in d
0309+  0FB4             ; integer returned in A
0310+  0FB4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0311+  0FB4             _strtoint:
0312+  0FB4 E2            push si
0313+  0FB5 D8            push b
0314+  0FB6 D9            push c
0315+  0FB7 DA            push d
0316+  0FB8 07 F9 0D      call _strlen      ; get string length in C
0317+  0FBB 7E            dec c
0318+  0FBC FD 4E         mov si, d
0319+  0FBE 12            mov a, c
0320+  0FBF FD 99         shl a
0321+  0FC1 3B 30 11      mov d, table_power
0322+  0FC4 59            add d, a
0323+  0FC5 38 00 00      mov c, 0
0324+  0FC8             _strtoint_L0:
0325+  0FC8 F6            lodsb      ; load ASCII to al
0326+  0FC9 B9 00         cmp al, 0
0327+  0FCB C6 DE 0F      je _strtoint_end
0328+  0FCE 6F 30         sub al, $30    ; make into integer
0329+  0FD0 22 00         mov ah, 0
0330+  0FD2 2A            mov b, [d]
0331+  0FD3 AC            mul a, b      ; result in B since it fits in 16bits
0332+  0FD4 11            mov a, b
0333+  0FD5 28            mov b, c
0334+  0FD6 54            add a, b
0335+  0FD7 39            mov c, a
0336+  0FD8 63 02 00      sub d, 2
0337+  0FDB 0A C8 0F      jmp _strtoint_L0
0338+  0FDE             _strtoint_end:
0339+  0FDE 12            mov a, c
0340+  0FDF E7            pop d
0341+  0FE0 E6            pop c
0342+  0FE1 E5            pop b
0343+  0FE2 EF            pop si
0344+  0FE3 09            ret
0345+  0FE4             
0346+  0FE4             
0347+  0FE4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0348+  0FE4             ; PRINT NULL TERMINATED STRING
0349+  0FE4             ; pointer in D
0350+  0FE4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0351+  0FE4             _puts:
0352+  0FE4 D7            push a
0353+  0FE5 DA            push d
0354+  0FE6             _puts_L1:
0355+  0FE6 1E            mov al, [d]
0356+  0FE7 B9 00         cmp al, 0
0357+  0FE9 C6 F5 0F      jz _puts_END
0358+  0FEC 23            mov ah, al
0359+  0FED 19 00         mov al, 0
0360+  0FEF 05 03         syscall sys_io
0361+  0FF1 79            inc d
0362+  0FF2 0A E6 0F      jmp _puts_L1
0363+  0FF5             _puts_END:
0364+  0FF5 E7            pop d
0365+  0FF6 E4            pop a
0366+  0FF7 09            ret
0367+  0FF8             
0368+  0FF8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0369+  0FF8             ; PRINT N SIZE STRING
0370+  0FF8             ; pointer in D
0371+  0FF8             ; size in C
0372+  0FF8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0373+  0FF8             _putsn:
0374+  0FF8 DB            push al
0375+  0FF9 DA            push d
0376+  0FFA D9            push c
0377+  0FFB             _putsn_L0:
0378+  0FFB 1E            mov al, [d]
0379+  0FFC 23            mov ah, al
0380+  0FFD 19 00         mov al, 0
0381+  0FFF 05 03         syscall sys_io
0382+  1001 79            inc d
0383+  1002 7E            dec c  
0384+  1003 C2 00 00      cmp c, 0
0385+  1006 C7 FB 0F      jne _putsn_L0
0386+  1009             _putsn_end:
0387+  1009 E6            pop c
0388+  100A E7            pop d
0389+  100B E8            pop al
0390+  100C 09            ret
0391+  100D             
0392+  100D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0393+  100D             ; print 16bit decimal number
0394+  100D             ; input number in A
0395+  100D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0396+  100D             print_u16d:
0397+  100D D7            push a
0398+  100E D8            push b
0399+  100F 26 10 27      mov b, 10000
0400+  1012 AE            div a, b      ; get 10000's coeff.
0401+  1013 07 35 10      call print_number
0402+  1016 11            mov a, b
0403+  1017 26 E8 03      mov b, 1000
0404+  101A AE            div a, b      ; get 1000's coeff.
0405+  101B 07 35 10      call print_number
0406+  101E 11            mov a, b
0407+  101F 26 64 00      mov b, 100
0408+  1022 AE            div a, b
0409+  1023 07 35 10      call print_number
0410+  1026 11            mov a, b
0411+  1027 26 0A 00      mov b, 10
0412+  102A AE            div a, b
0413+  102B 07 35 10      call print_number
0414+  102E 1B            mov al, bl      ; 1's coeff in bl
0415+  102F 07 35 10      call print_number
0416+  1032 E5            pop b
0417+  1033 E4            pop a
0418+  1034 09            ret
0419+  1035             
0420+  1035             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0421+  1035             ; print AL
0422+  1035             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0423+  1035             print_number:
0424+  1035 6A 30         add al, $30
0425+  1037 23            mov ah, al
0426+  1038 07 9A 0E      call _putchar
0427+  103B 09            ret
0428+  103C             
0429+  103C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0430+  103C             ; PRINT 16BIT HEX INTEGER
0431+  103C             ; integer value in reg B
0432+  103C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0433+  103C             print_u16x:
0434+  103C D7            push a
0435+  103D D8            push b
0436+  103E DD            push bl
0437+  103F 30            mov bl, bh
0438+  1040 07 68 0E      call _itoa        ; convert bh to char in A
0439+  1043 2F            mov bl, al        ; save al
0440+  1044 19 00         mov al, 0
0441+  1046 05 03         syscall sys_io        ; display AH
0442+  1048 24            mov ah, bl        ; retrieve al
0443+  1049 19 00         mov al, 0
0444+  104B 05 03         syscall sys_io        ; display AL
0445+  104D             
0446+  104D EA            pop bl
0447+  104E 07 68 0E      call _itoa        ; convert bh to char in A
0448+  1051 2F            mov bl, al        ; save al
0449+  1052 19 00         mov al, 0
0450+  1054 05 03         syscall sys_io        ; display AH
0451+  1056 24            mov ah, bl        ; retrieve al
0452+  1057 19 00         mov al, 0
0453+  1059 05 03         syscall sys_io        ; display AL
0454+  105B             
0455+  105B E5            pop b
0456+  105C E4            pop a
0457+  105D 09            ret
0458+  105E             
0459+  105E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0460+  105E             ; INPUT 16BIT HEX INTEGER
0461+  105E             ; read 16bit integer into A
0462+  105E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0463+  105E             scan_u16x:
0464+  105E F8 10 00      enter 16
0465+  1061 D8            push b
0466+  1062 DA            push d
0467+  1063             
0468+  1063 FA F1 FF      lea d, [bp + -15]
0469+  1066 07 A1 0E      call _gets        ; get number
0470+  1069             
0471+  1069 32            mov bl, [d]
0472+  106A 37            mov bh, bl
0473+  106B 33 01 00      mov bl, [d + 1]
0474+  106E 07 57 0E      call _atoi        ; convert to int in AL
0475+  1071 23            mov ah, al        ; move to AH
0476+  1072             
0477+  1072 33 02 00      mov bl, [d + 2]
0478+  1075 37            mov bh, bl
0479+  1076 33 03 00      mov bl, [d + 3]
0480+  1079 07 57 0E      call _atoi        ; convert to int in AL
0481+  107C             
0482+  107C E7            pop d
0483+  107D E5            pop b
0484+  107E F9            leave
0485+  107F 09            ret
0486+  1080             
0487+  1080             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0488+  1080             ; PRINT 8bit HEX INTEGER
0489+  1080             ; integer value in reg bl
0490+  1080             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0491+  1080             print_u8x:
0492+  1080 D7            push a
0493+  1081 DD            push bl
0494+  1082             
0495+  1082 07 68 0E      call _itoa        ; convert bl to char in A
0496+  1085 2F            mov bl, al        ; save al
0497+  1086 19 00         mov al, 0
0498+  1088 05 03         syscall sys_io        ; display AH
0499+  108A 24            mov ah, bl        ; retrieve al
0500+  108B 19 00         mov al, 0
0501+  108D 05 03         syscall sys_io        ; display AL
0502+  108F             
0503+  108F EA            pop bl
0504+  1090 E4            pop a
0505+  1091 09            ret
0506+  1092             
0507+  1092             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0508+  1092             ; print 8bit decimal unsigned number
0509+  1092             ; input number in AL
0510+  1092             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0511+  1092             print_u8d:
0512+  1092 D7            push a
0513+  1093 D8            push b
0514+  1094             
0515+  1094 22 00         mov ah, 0
0516+  1096 26 64 00      mov b, 100
0517+  1099 AE            div a, b
0518+  109A D8            push b      ; save remainder
0519+  109B B9 00         cmp al, 0
0520+  109D C6 A7 10      je skip100
0521+  10A0 6A 30         add al, $30
0522+  10A2 23            mov ah, al
0523+  10A3 19 00         mov al, 0
0524+  10A5 05 03         syscall sys_io  ; print coeff
0525+  10A7             skip100:
0526+  10A7 E4            pop a
0527+  10A8 22 00         mov ah, 0
0528+  10AA 26 0A 00      mov b, 10
0529+  10AD AE            div a, b
0530+  10AE D8            push b      ; save remainder
0531+  10AF B9 00         cmp al, 0
0532+  10B1 C6 BB 10      je skip10
0533+  10B4 6A 30         add al, $30
0534+  10B6 23            mov ah, al
0535+  10B7 19 00         mov al, 0
0536+  10B9 05 03         syscall sys_io  ; print coeff
0537+  10BB             skip10:
0538+  10BB E4            pop a
0539+  10BC 1B            mov al, bl
0540+  10BD 6A 30         add al, $30
0541+  10BF 23            mov ah, al
0542+  10C0 19 00         mov al, 0
0543+  10C2 05 03         syscall sys_io  ; print coeff
0544+  10C4 E5            pop b
0545+  10C5 E4            pop a
0546+  10C6 09            ret
0547+  10C7             
0548+  10C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0549+  10C7             ; INPUT 8BIT HEX INTEGER
0550+  10C7             ; read 8bit integer into AL
0551+  10C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0552+  10C7             scan_u8x:
0553+  10C7 F8 04 00      enter 4
0554+  10CA D8            push b
0555+  10CB DA            push d
0556+  10CC             
0557+  10CC FA FD FF      lea d, [bp + -3]
0558+  10CF 07 A1 0E      call _gets        ; get number
0559+  10D2             
0560+  10D2 32            mov bl, [d]
0561+  10D3 37            mov bh, bl
0562+  10D4 33 01 00      mov bl, [d + 1]
0563+  10D7 07 57 0E      call _atoi        ; convert to int in AL
0564+  10DA             
0565+  10DA E7            pop d
0566+  10DB E5            pop b
0567+  10DC F9            leave
0568+  10DD 09            ret
0569+  10DE             
0570+  10DE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0571+  10DE             ; input decimal number
0572+  10DE             ; result in A
0573+  10DE             ; 655'\0'
0574+  10DE             ; low--------high
0575+  10DE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0576+  10DE             scan_u16d:
0577+  10DE F8 08 00      enter 8
0578+  10E1 E2            push si
0579+  10E2 D8            push b
0580+  10E3 D9            push c
0581+  10E4 DA            push d
0582+  10E5 FA F9 FF      lea d, [bp +- 7]
0583+  10E8 07 A1 0E      call _gets
0584+  10EB 07 F9 0D      call _strlen      ; get string length in C
0585+  10EE 7E            dec c
0586+  10EF FD 4E         mov si, d
0587+  10F1 12            mov a, c
0588+  10F2 FD 99         shl a
0589+  10F4 3B 30 11      mov d, table_power
0590+  10F7 59            add d, a
0591+  10F8 38 00 00      mov c, 0
0592+  10FB             mul_loop:
0593+  10FB F6            lodsb      ; load ASCII to al
0594+  10FC B9 00         cmp al, 0
0595+  10FE C6 11 11      je mul_exit
0596+  1101 6F 30         sub al, $30    ; make into integer
0597+  1103 22 00         mov ah, 0
0598+  1105 2A            mov b, [d]
0599+  1106 AC            mul a, b      ; result in B since it fits in 16bits
0600+  1107 11            mov a, b
0601+  1108 28            mov b, c
0602+  1109 54            add a, b
0603+  110A 39            mov c, a
0604+  110B 63 02 00      sub d, 2
0605+  110E 0A FB 10      jmp mul_loop
0606+  1111             mul_exit:
0607+  1111 12            mov a, c
0608+  1112 E7            pop d
0609+  1113 E6            pop c
0610+  1114 E5            pop b
0611+  1115 EF            pop si
0612+  1116 F9            leave
0613+  1117 09            ret
0614+  1118             
0615+  1118             
0616+  1118 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0616+  111C 34 35 36 37 
0616+  1120 38 39 41 42 
0616+  1124 43 44 45 46 
0617+  1128 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0617+  112C 1B 5B 48 00 
0618+  1130             
0619+  1130             table_power:
0620+  1130 01 00         .dw 1
0621+  1132 0A 00         .dw 10
0622+  1134 64 00         .dw 100
0623+  1136 E8 03         .dw 1000
0624+  1138 10 27         .dw 100001835   113A             ; --- END INLINE ASM BLOCK
1836   113A             
1837   113A F9            leave
1838   113B 09            ret
1839   113C             
1840   113C             include_ctype_lib:
1841   113C F8 00 00      enter 0 ; (push bp; mov bp, sp)
1842   113F             
1843   113F             ; --- BEGIN INLINE ASM BLOCK
1844   113F             .include "lib/ctype.asm"
0001+  113F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  113F             ; ctype.s
0003+  113F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  113F             
0005+  113F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  113F             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  113F             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  113F             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  113F             ;; characters are supported.
0010+  113F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  113F             ;; _isalnum 
0012+  113F             ;; _isalpha 
0013+  113F             ;; islower 
0014+  113F             ;; isupper 
0015+  113F             ;; _isdigit 
0016+  113F             ;; isxdigit
0017+  113F             ;; iscntrl 
0018+  113F             ;; isgraph 
0019+  113F             ;; _isspace 
0020+  113F             ;; isblank 
0021+  113F             ;; isprint 
0022+  113F             ;; ispunct 
0023+  113F             ;; tolower 
0024+  113F             ;; toupper
0025+  113F             
0026+  113F             
0027+  113F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  113F             ;; IS ALPHANUMERIC
0029+  113F             ;; sets ZF according with result
0030+  113F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  113F             _isalnum:
0032+  113F 07 5C 11    	call _isalpha
0033+  1142 C6 48 11    	je _isalnum_exit
0034+  1145 07 49 11    	call _isdigit
0035+  1148             _isalnum_exit:
0036+  1148 09          	ret	
0037+  1149             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  1149             ;; IS DIGIT
0039+  1149             ;; sets ZF according with result
0040+  1149             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  1149             _isdigit:
0042+  1149 DB          	push al
0043+  114A B9 30       	cmp al, '0'
0044+  114C C8 58 11    	jlu _isdigit_false
0045+  114F B9 39       	cmp al, '9'
0046+  1151 D1 58 11    	jgu _isdigit_false
0047+  1154 87 00       	and al, 0	; set ZF
0048+  1156 E8          	pop al
0049+  1157 09          	ret
0050+  1158             _isdigit_false:
0051+  1158 8B 01       	or al, 1	; clear ZF
0052+  115A E8          	pop al
0053+  115B 09          	ret	
0054+  115C             	
0055+  115C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  115C             ;; IS ALPHA
0057+  115C             ;; sets ZF according with result
0058+  115C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  115C             _isalpha:
0060+  115C DB          	push al
0061+  115D B9 5F       	cmp al, '_'
0062+  115F C6 7F 11    	je _isalpha_true
0063+  1162 B9 2E       	cmp al, '.'
0064+  1164 C6 7F 11    	je _isalpha_true
0065+  1167 B9 41       	cmp al, 'A'
0066+  1169 C8 7B 11    	jlu _isalpha_false
0067+  116C B9 7A       	cmp al, 'z'
0068+  116E D1 7B 11    	jgu _isalpha_false
0069+  1171 B9 5A       	cmp al, 'Z'
0070+  1173 D0 7F 11    	jleu _isalpha_true
0071+  1176 B9 61       	cmp al, 'a'
0072+  1178 C9 7F 11    	jgeu _isalpha_true
0073+  117B             _isalpha_false:
0074+  117B 8B 01       	or al, 1	; clear ZF
0075+  117D E8          	pop al
0076+  117E 09          	ret
0077+  117F             _isalpha_true:
0078+  117F 87 00       	and al, 0	; set ZF
0079+  1181 E8          	pop al
0080+  1182 09          	ret
0081+  1183             
0082+  1183             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  1183             ;; IS PATH-ALPHA
0084+  1183             ;; sets ZF according with result
0085+  1183             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  1183             ispath:
0087+  1183 DB          	push al
0088+  1184 07 49 11    	call _isdigit
0089+  1187 C6 B1 11    	je ispath_true
0090+  118A B9 5F       	cmp al, '_'
0091+  118C C6 B1 11    	je ispath_true
0092+  118F B9 2F       	cmp al, '/'
0093+  1191 C6 B1 11    	je ispath_true
0094+  1194 B9 2E       	cmp al, '.'
0095+  1196 C6 B1 11    	je ispath_true
0096+  1199 B9 41       	cmp al, 'A'
0097+  119B C8 AD 11    	jlu ispath_false
0098+  119E B9 7A       	cmp al, 'z'
0099+  11A0 D1 AD 11    	jgu ispath_false
0100+  11A3 B9 5A       	cmp al, 'Z'
0101+  11A5 D0 B1 11    	jleu ispath_true
0102+  11A8 B9 61       	cmp al, 'a'
0103+  11AA C9 B1 11    	jgeu ispath_true
0104+  11AD             ispath_false:
0105+  11AD 8B 01       	or al, 1	; clear ZF
0106+  11AF E8          	pop al
0107+  11B0 09          	ret
0108+  11B1             ispath_true:
0109+  11B1 87 00       	and al, 0	; set ZF
0110+  11B3 E8          	pop al
0111+  11B4 09          	ret
0112+  11B5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  11B5             ;; IS SPACE
0114+  11B5             ;; sets ZF according with result
0115+  11B5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  11B5             _isspace:
0117+  11B5 B9 20       	cmp al, $20		; ' '
0118+  11B7 C6 CB 11    	je _isspace_exit
0119+  11BA B9 09       	cmp al, $09		; '\t'
0120+  11BC C6 CB 11    	je _isspace_exit
0121+  11BF B9 0A       	cmp al, $0A		; '\n'
0122+  11C1 C6 CB 11    	je _isspace_exit
0123+  11C4 B9 0D       	cmp al, $0D		; '\r'
0124+  11C6 C6 CB 11    	je _isspace_exit
0125+  11C9 B9 0B       	cmp al, $0B		; '\v'
0126+  11CB             _isspace_exit:
0127+  11CB 09          	ret	
0128+  11CC             
0129+  11CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  11CC             ; TO LOWER
0131+  11CC             ; input in AL
0132+  11CC             ; output in AL
0133+  11CC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  11CC             _to_lower:
0135+  11CC B9 5A       	cmp al, 'Z'
0136+  11CE D1 D3 11    	jgu _to_lower_ret
0137+  11D1 6A 20       	add al, $20				; convert to lower case
0138+  11D3             _to_lower_ret:
0139+  11D3 09          	ret
0140+  11D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  11D4             ; TO UPPER
0142+  11D4             ; input in AL
0143+  11D4             ; output in AL
0144+  11D4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  11D4             _to_upper:
0146+  11D4 B9 61       	cmp al, 'a'
0147+  11D6 C8 DB 11    	jlu _to_upper_ret
0148+  11D9 6F 20       	sub al, $20			; convert to upper case
0149+  11DB             _to_upper_ret:
0150+  11DB 09          	ret
0151+  11DC             
1845   11DC             ; --- END INLINE ASM BLOCK
1846   11DC             
1847   11DC F9            leave
1848   11DD 09            ret
1849   11DE             
1850   11DE             is_space:
1851   11DE F8 00 00      enter 0 ; (push bp; mov bp, sp)
1852   11E1             ;; return c == ' ' || c == '\t' || c == '\n' || c == '\r'; 
1853   11E1 FA 05 00      lea d, [bp + 5] ; $c
1854   11E4 32            mov bl, [d]
1855   11E5 A7 00         mov bh, 0
1856   11E7             ; START RELATIONAL
1857   11E7 D7            push a
1858   11E8 11            mov a, b
1859   11E9 26 20 00      mov b, $20
1860   11EC B0            cmp a, b
1861   11ED FD 71         seq ; ==
1862   11EF E4            pop a
1863   11F0             ; END RELATIONAL
1864   11F0 D7            push a
1865   11F1 11            mov a, b
1866   11F2 FA 05 00      lea d, [bp + 5] ; $c
1867   11F5 32            mov bl, [d]
1868   11F6 A7 00         mov bh, 0
1869   11F8             ; START RELATIONAL
1870   11F8 D7            push a
1871   11F9 11            mov a, b
1872   11FA 26 09 00      mov b, $9
1873   11FD B0            cmp a, b
1874   11FE FD 71         seq ; ==
1875   1200 E4            pop a
1876   1201             ; END RELATIONAL
1877   1201 FD A8         sor a, b ; ||
1878   1203 11            mov a, b
1879   1204 FA 05 00      lea d, [bp + 5] ; $c
1880   1207 32            mov bl, [d]
1881   1208 A7 00         mov bh, 0
1882   120A             ; START RELATIONAL
1883   120A D7            push a
1884   120B 11            mov a, b
1885   120C 26 0A 00      mov b, $a
1886   120F B0            cmp a, b
1887   1210 FD 71         seq ; ==
1888   1212 E4            pop a
1889   1213             ; END RELATIONAL
1890   1213 FD A8         sor a, b ; ||
1891   1215 11            mov a, b
1892   1216 FA 05 00      lea d, [bp + 5] ; $c
1893   1219 32            mov bl, [d]
1894   121A A7 00         mov bh, 0
1895   121C             ; START RELATIONAL
1896   121C D7            push a
1897   121D 11            mov a, b
1898   121E 26 0D 00      mov b, $d
1899   1221 B0            cmp a, b
1900   1222 FD 71         seq ; ==
1901   1224 E4            pop a
1902   1225             ; END RELATIONAL
1903   1225 FD A8         sor a, b ; ||
1904   1227 E4            pop a
1905   1228 F9            leave
1906   1229 09            ret
1907   122A             
1908   122A             is_digit:
1909   122A F8 00 00      enter 0 ; (push bp; mov bp, sp)
1910   122D             ;; return c >= '0' && c <= '9'; 
1911   122D FA 05 00      lea d, [bp + 5] ; $c
1912   1230 32            mov bl, [d]
1913   1231 A7 00         mov bh, 0
1914   1233             ; START RELATIONAL
1915   1233 D7            push a
1916   1234 11            mov a, b
1917   1235 26 30 00      mov b, $30
1918   1238 B0            cmp a, b
1919   1239 FD 80         sge ; >=
1920   123B E4            pop a
1921   123C             ; END RELATIONAL
1922   123C D7            push a
1923   123D 11            mov a, b
1924   123E FA 05 00      lea d, [bp + 5] ; $c
1925   1241 32            mov bl, [d]
1926   1242 A7 00         mov bh, 0
1927   1244             ; START RELATIONAL
1928   1244 D7            push a
1929   1245 11            mov a, b
1930   1246 26 39 00      mov b, $39
1931   1249 B0            cmp a, b
1932   124A FD 74         sle ; <=
1933   124C E4            pop a
1934   124D             ; END RELATIONAL
1935   124D FD A7         sand a, b ; &&
1936   124F E4            pop a
1937   1250 F9            leave
1938   1251 09            ret
1939   1252             
1940   1252             is_alpha:
1941   1252 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1942   1255             ;; return(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '_'); 
1943   1255 FA 05 00      lea d, [bp + 5] ; $c
1944   1258 32            mov bl, [d]
1945   1259 A7 00         mov bh, 0
1946   125B             ; START RELATIONAL
1947   125B D7            push a
1948   125C 11            mov a, b
1949   125D 26 61 00      mov b, $61
1950   1260 B0            cmp a, b
1951   1261 FD 80         sge ; >=
1952   1263 E4            pop a
1953   1264             ; END RELATIONAL
1954   1264 D7            push a
1955   1265 11            mov a, b
1956   1266 FA 05 00      lea d, [bp + 5] ; $c
1957   1269 32            mov bl, [d]
1958   126A A7 00         mov bh, 0
1959   126C             ; START RELATIONAL
1960   126C D7            push a
1961   126D 11            mov a, b
1962   126E 26 7A 00      mov b, $7a
1963   1271 B0            cmp a, b
1964   1272 FD 74         sle ; <=
1965   1274 E4            pop a
1966   1275             ; END RELATIONAL
1967   1275 FD A7         sand a, b ; &&
1968   1277 E4            pop a
1969   1278 D7            push a
1970   1279 11            mov a, b
1971   127A FA 05 00      lea d, [bp + 5] ; $c
1972   127D 32            mov bl, [d]
1973   127E A7 00         mov bh, 0
1974   1280             ; START RELATIONAL
1975   1280 D7            push a
1976   1281 11            mov a, b
1977   1282 26 41 00      mov b, $41
1978   1285 B0            cmp a, b
1979   1286 FD 80         sge ; >=
1980   1288 E4            pop a
1981   1289             ; END RELATIONAL
1982   1289 D7            push a
1983   128A 11            mov a, b
1984   128B FA 05 00      lea d, [bp + 5] ; $c
1985   128E 32            mov bl, [d]
1986   128F A7 00         mov bh, 0
1987   1291             ; START RELATIONAL
1988   1291 D7            push a
1989   1292 11            mov a, b
1990   1293 26 5A 00      mov b, $5a
1991   1296 B0            cmp a, b
1992   1297 FD 74         sle ; <=
1993   1299 E4            pop a
1994   129A             ; END RELATIONAL
1995   129A FD A7         sand a, b ; &&
1996   129C E4            pop a
1997   129D FD A8         sor a, b ; ||
1998   129F 11            mov a, b
1999   12A0 FA 05 00      lea d, [bp + 5] ; $c
2000   12A3 32            mov bl, [d]
2001   12A4 A7 00         mov bh, 0
2002   12A6             ; START RELATIONAL
2003   12A6 D7            push a
2004   12A7 11            mov a, b
2005   12A8 26 5F 00      mov b, $5f
2006   12AB B0            cmp a, b
2007   12AC FD 71         seq ; ==
2008   12AE E4            pop a
2009   12AF             ; END RELATIONAL
2010   12AF FD A8         sor a, b ; ||
2011   12B1 E4            pop a
2012   12B2 F9            leave
2013   12B3 09            ret
2014   12B4             
2015   12B4             toupper:
2016   12B4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2017   12B7             ;; if (ch >= 'a' && ch <= 'z') { 
2018   12B7             _if25_cond:
2019   12B7 FA 05 00      lea d, [bp + 5] ; $ch
2020   12BA 32            mov bl, [d]
2021   12BB A7 00         mov bh, 0
2022   12BD             ; START RELATIONAL
2023   12BD D7            push a
2024   12BE 11            mov a, b
2025   12BF 26 61 00      mov b, $61
2026   12C2 B0            cmp a, b
2027   12C3 FD 80         sge ; >=
2028   12C5 E4            pop a
2029   12C6             ; END RELATIONAL
2030   12C6 D7            push a
2031   12C7 11            mov a, b
2032   12C8 FA 05 00      lea d, [bp + 5] ; $ch
2033   12CB 32            mov bl, [d]
2034   12CC A7 00         mov bh, 0
2035   12CE             ; START RELATIONAL
2036   12CE D7            push a
2037   12CF 11            mov a, b
2038   12D0 26 7A 00      mov b, $7a
2039   12D3 B0            cmp a, b
2040   12D4 FD 74         sle ; <=
2041   12D6 E4            pop a
2042   12D7             ; END RELATIONAL
2043   12D7 FD A7         sand a, b ; &&
2044   12D9 E4            pop a
2045   12DA C0 00 00      cmp b, 0
2046   12DD C6 F7 12      je _if25_else
2047   12E0             _if25_true:
2048   12E0             ;; return ch - 'a' + 'A'; 
2049   12E0 FA 05 00      lea d, [bp + 5] ; $ch
2050   12E3 32            mov bl, [d]
2051   12E4 A7 00         mov bh, 0
2052   12E6             ; START TERMS
2053   12E6 D7            push a
2054   12E7 11            mov a, b
2055   12E8 26 61 00      mov b, $61
2056   12EB 60            sub a, b
2057   12EC 26 41 00      mov b, $41
2058   12EF 54            add a, b
2059   12F0 27            mov b, a
2060   12F1 E4            pop a
2061   12F2             ; END TERMS
2062   12F2 F9            leave
2063   12F3 09            ret
2064   12F4 0A FF 12      jmp _if25_exit
2065   12F7             _if25_else:
2066   12F7             ;; return ch; 
2067   12F7 FA 05 00      lea d, [bp + 5] ; $ch
2068   12FA 32            mov bl, [d]
2069   12FB A7 00         mov bh, 0
2070   12FD F9            leave
2071   12FE 09            ret
2072   12FF             _if25_exit:
2073   12FF F9            leave
2074   1300 09            ret
2075   1301             
2076   1301             is_delimiter:
2077   1301 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2078   1304             ;; if( 
2079   1304             _if26_cond:
2080   1304 FA 05 00      lea d, [bp + 5] ; $c
2081   1307 32            mov bl, [d]
2082   1308 A7 00         mov bh, 0
2083   130A             ; START RELATIONAL
2084   130A D7            push a
2085   130B 11            mov a, b
2086   130C 26 40 00      mov b, $40
2087   130F B0            cmp a, b
2088   1310 FD 71         seq ; ==
2089   1312 E4            pop a
2090   1313             ; END RELATIONAL
2091   1313 D7            push a
2092   1314 11            mov a, b
2093   1315 FA 05 00      lea d, [bp + 5] ; $c
2094   1318 32            mov bl, [d]
2095   1319 A7 00         mov bh, 0
2096   131B             ; START RELATIONAL
2097   131B D7            push a
2098   131C 11            mov a, b
2099   131D 26 23 00      mov b, $23
2100   1320 B0            cmp a, b
2101   1321 FD 71         seq ; ==
2102   1323 E4            pop a
2103   1324             ; END RELATIONAL
2104   1324 FD A8         sor a, b ; ||
2105   1326 11            mov a, b
2106   1327 FA 05 00      lea d, [bp + 5] ; $c
2107   132A 32            mov bl, [d]
2108   132B A7 00         mov bh, 0
2109   132D             ; START RELATIONAL
2110   132D D7            push a
2111   132E 11            mov a, b
2112   132F 26 24 00      mov b, $24
2113   1332 B0            cmp a, b
2114   1333 FD 71         seq ; ==
2115   1335 E4            pop a
2116   1336             ; END RELATIONAL
2117   1336 FD A8         sor a, b ; ||
2118   1338 11            mov a, b
2119   1339 FA 05 00      lea d, [bp + 5] ; $c
2120   133C 32            mov bl, [d]
2121   133D A7 00         mov bh, 0
2122   133F             ; START RELATIONAL
2123   133F D7            push a
2124   1340 11            mov a, b
2125   1341 26 2B 00      mov b, $2b
2126   1344 B0            cmp a, b
2127   1345 FD 71         seq ; ==
2128   1347 E4            pop a
2129   1348             ; END RELATIONAL
2130   1348 FD A8         sor a, b ; ||
2131   134A 11            mov a, b
2132   134B FA 05 00      lea d, [bp + 5] ; $c
2133   134E 32            mov bl, [d]
2134   134F A7 00         mov bh, 0
2135   1351             ; START RELATIONAL
2136   1351 D7            push a
2137   1352 11            mov a, b
2138   1353 26 2D 00      mov b, $2d
2139   1356 B0            cmp a, b
2140   1357 FD 71         seq ; ==
2141   1359 E4            pop a
2142   135A             ; END RELATIONAL
2143   135A FD A8         sor a, b ; ||
2144   135C 11            mov a, b
2145   135D FA 05 00      lea d, [bp + 5] ; $c
2146   1360 32            mov bl, [d]
2147   1361 A7 00         mov bh, 0
2148   1363             ; START RELATIONAL
2149   1363 D7            push a
2150   1364 11            mov a, b
2151   1365 26 2A 00      mov b, $2a
2152   1368 B0            cmp a, b
2153   1369 FD 71         seq ; ==
2154   136B E4            pop a
2155   136C             ; END RELATIONAL
2156   136C FD A8         sor a, b ; ||
2157   136E 11            mov a, b
2158   136F FA 05 00      lea d, [bp + 5] ; $c
2159   1372 32            mov bl, [d]
2160   1373 A7 00         mov bh, 0
2161   1375             ; START RELATIONAL
2162   1375 D7            push a
2163   1376 11            mov a, b
2164   1377 26 2F 00      mov b, $2f
2165   137A B0            cmp a, b
2166   137B FD 71         seq ; ==
2167   137D E4            pop a
2168   137E             ; END RELATIONAL
2169   137E FD A8         sor a, b ; ||
2170   1380 11            mov a, b
2171   1381 FA 05 00      lea d, [bp + 5] ; $c
2172   1384 32            mov bl, [d]
2173   1385 A7 00         mov bh, 0
2174   1387             ; START RELATIONAL
2175   1387 D7            push a
2176   1388 11            mov a, b
2177   1389 26 25 00      mov b, $25
2178   138C B0            cmp a, b
2179   138D FD 71         seq ; ==
2180   138F E4            pop a
2181   1390             ; END RELATIONAL
2182   1390 FD A8         sor a, b ; ||
2183   1392 11            mov a, b
2184   1393 FA 05 00      lea d, [bp + 5] ; $c
2185   1396 32            mov bl, [d]
2186   1397 A7 00         mov bh, 0
2187   1399             ; START RELATIONAL
2188   1399 D7            push a
2189   139A 11            mov a, b
2190   139B 26 5B 00      mov b, $5b
2191   139E B0            cmp a, b
2192   139F FD 71         seq ; ==
2193   13A1 E4            pop a
2194   13A2             ; END RELATIONAL
2195   13A2 FD A8         sor a, b ; ||
2196   13A4 11            mov a, b
2197   13A5 FA 05 00      lea d, [bp + 5] ; $c
2198   13A8 32            mov bl, [d]
2199   13A9 A7 00         mov bh, 0
2200   13AB             ; START RELATIONAL
2201   13AB D7            push a
2202   13AC 11            mov a, b
2203   13AD 26 5D 00      mov b, $5d
2204   13B0 B0            cmp a, b
2205   13B1 FD 71         seq ; ==
2206   13B3 E4            pop a
2207   13B4             ; END RELATIONAL
2208   13B4 FD A8         sor a, b ; ||
2209   13B6 11            mov a, b
2210   13B7 FA 05 00      lea d, [bp + 5] ; $c
2211   13BA 32            mov bl, [d]
2212   13BB A7 00         mov bh, 0
2213   13BD             ; START RELATIONAL
2214   13BD D7            push a
2215   13BE 11            mov a, b
2216   13BF 26 28 00      mov b, $28
2217   13C2 B0            cmp a, b
2218   13C3 FD 71         seq ; ==
2219   13C5 E4            pop a
2220   13C6             ; END RELATIONAL
2221   13C6 FD A8         sor a, b ; ||
2222   13C8 11            mov a, b
2223   13C9 FA 05 00      lea d, [bp + 5] ; $c
2224   13CC 32            mov bl, [d]
2225   13CD A7 00         mov bh, 0
2226   13CF             ; START RELATIONAL
2227   13CF D7            push a
2228   13D0 11            mov a, b
2229   13D1 26 29 00      mov b, $29
2230   13D4 B0            cmp a, b
2231   13D5 FD 71         seq ; ==
2232   13D7 E4            pop a
2233   13D8             ; END RELATIONAL
2234   13D8 FD A8         sor a, b ; ||
2235   13DA 11            mov a, b
2236   13DB FA 05 00      lea d, [bp + 5] ; $c
2237   13DE 32            mov bl, [d]
2238   13DF A7 00         mov bh, 0
2239   13E1             ; START RELATIONAL
2240   13E1 D7            push a
2241   13E2 11            mov a, b
2242   13E3 26 7B 00      mov b, $7b
2243   13E6 B0            cmp a, b
2244   13E7 FD 71         seq ; ==
2245   13E9 E4            pop a
2246   13EA             ; END RELATIONAL
2247   13EA FD A8         sor a, b ; ||
2248   13EC 11            mov a, b
2249   13ED FA 05 00      lea d, [bp + 5] ; $c
2250   13F0 32            mov bl, [d]
2251   13F1 A7 00         mov bh, 0
2252   13F3             ; START RELATIONAL
2253   13F3 D7            push a
2254   13F4 11            mov a, b
2255   13F5 26 7D 00      mov b, $7d
2256   13F8 B0            cmp a, b
2257   13F9 FD 71         seq ; ==
2258   13FB E4            pop a
2259   13FC             ; END RELATIONAL
2260   13FC FD A8         sor a, b ; ||
2261   13FE 11            mov a, b
2262   13FF FA 05 00      lea d, [bp + 5] ; $c
2263   1402 32            mov bl, [d]
2264   1403 A7 00         mov bh, 0
2265   1405             ; START RELATIONAL
2266   1405 D7            push a
2267   1406 11            mov a, b
2268   1407 26 3A 00      mov b, $3a
2269   140A B0            cmp a, b
2270   140B FD 71         seq ; ==
2271   140D E4            pop a
2272   140E             ; END RELATIONAL
2273   140E FD A8         sor a, b ; ||
2274   1410 11            mov a, b
2275   1411 FA 05 00      lea d, [bp + 5] ; $c
2276   1414 32            mov bl, [d]
2277   1415 A7 00         mov bh, 0
2278   1417             ; START RELATIONAL
2279   1417 D7            push a
2280   1418 11            mov a, b
2281   1419 26 3B 00      mov b, $3b
2282   141C B0            cmp a, b
2283   141D FD 71         seq ; ==
2284   141F E4            pop a
2285   1420             ; END RELATIONAL
2286   1420 FD A8         sor a, b ; ||
2287   1422 11            mov a, b
2288   1423 FA 05 00      lea d, [bp + 5] ; $c
2289   1426 32            mov bl, [d]
2290   1427 A7 00         mov bh, 0
2291   1429             ; START RELATIONAL
2292   1429 D7            push a
2293   142A 11            mov a, b
2294   142B 26 3C 00      mov b, $3c
2295   142E B0            cmp a, b
2296   142F FD 71         seq ; ==
2297   1431 E4            pop a
2298   1432             ; END RELATIONAL
2299   1432 FD A8         sor a, b ; ||
2300   1434 11            mov a, b
2301   1435 FA 05 00      lea d, [bp + 5] ; $c
2302   1438 32            mov bl, [d]
2303   1439 A7 00         mov bh, 0
2304   143B             ; START RELATIONAL
2305   143B D7            push a
2306   143C 11            mov a, b
2307   143D 26 3E 00      mov b, $3e
2308   1440 B0            cmp a, b
2309   1441 FD 71         seq ; ==
2310   1443 E4            pop a
2311   1444             ; END RELATIONAL
2312   1444 FD A8         sor a, b ; ||
2313   1446 11            mov a, b
2314   1447 FA 05 00      lea d, [bp + 5] ; $c
2315   144A 32            mov bl, [d]
2316   144B A7 00         mov bh, 0
2317   144D             ; START RELATIONAL
2318   144D D7            push a
2319   144E 11            mov a, b
2320   144F 26 3D 00      mov b, $3d
2321   1452 B0            cmp a, b
2322   1453 FD 71         seq ; ==
2323   1455 E4            pop a
2324   1456             ; END RELATIONAL
2325   1456 FD A8         sor a, b ; ||
2326   1458 11            mov a, b
2327   1459 FA 05 00      lea d, [bp + 5] ; $c
2328   145C 32            mov bl, [d]
2329   145D A7 00         mov bh, 0
2330   145F             ; START RELATIONAL
2331   145F D7            push a
2332   1460 11            mov a, b
2333   1461 26 21 00      mov b, $21
2334   1464 B0            cmp a, b
2335   1465 FD 71         seq ; ==
2336   1467 E4            pop a
2337   1468             ; END RELATIONAL
2338   1468 FD A8         sor a, b ; ||
2339   146A 11            mov a, b
2340   146B FA 05 00      lea d, [bp + 5] ; $c
2341   146E 32            mov bl, [d]
2342   146F A7 00         mov bh, 0
2343   1471             ; START RELATIONAL
2344   1471 D7            push a
2345   1472 11            mov a, b
2346   1473 26 5E 00      mov b, $5e
2347   1476 B0            cmp a, b
2348   1477 FD 71         seq ; ==
2349   1479 E4            pop a
2350   147A             ; END RELATIONAL
2351   147A FD A8         sor a, b ; ||
2352   147C 11            mov a, b
2353   147D FA 05 00      lea d, [bp + 5] ; $c
2354   1480 32            mov bl, [d]
2355   1481 A7 00         mov bh, 0
2356   1483             ; START RELATIONAL
2357   1483 D7            push a
2358   1484 11            mov a, b
2359   1485 26 26 00      mov b, $26
2360   1488 B0            cmp a, b
2361   1489 FD 71         seq ; ==
2362   148B E4            pop a
2363   148C             ; END RELATIONAL
2364   148C FD A8         sor a, b ; ||
2365   148E 11            mov a, b
2366   148F FA 05 00      lea d, [bp + 5] ; $c
2367   1492 32            mov bl, [d]
2368   1493 A7 00         mov bh, 0
2369   1495             ; START RELATIONAL
2370   1495 D7            push a
2371   1496 11            mov a, b
2372   1497 26 7C 00      mov b, $7c
2373   149A B0            cmp a, b
2374   149B FD 71         seq ; ==
2375   149D E4            pop a
2376   149E             ; END RELATIONAL
2377   149E FD A8         sor a, b ; ||
2378   14A0 11            mov a, b
2379   14A1 FA 05 00      lea d, [bp + 5] ; $c
2380   14A4 32            mov bl, [d]
2381   14A5 A7 00         mov bh, 0
2382   14A7             ; START RELATIONAL
2383   14A7 D7            push a
2384   14A8 11            mov a, b
2385   14A9 26 7E 00      mov b, $7e
2386   14AC B0            cmp a, b
2387   14AD FD 71         seq ; ==
2388   14AF E4            pop a
2389   14B0             ; END RELATIONAL
2390   14B0 FD A8         sor a, b ; ||
2391   14B2 11            mov a, b
2392   14B3 FA 05 00      lea d, [bp + 5] ; $c
2393   14B6 32            mov bl, [d]
2394   14B7 A7 00         mov bh, 0
2395   14B9             ; START RELATIONAL
2396   14B9 D7            push a
2397   14BA 11            mov a, b
2398   14BB 26 2E 00      mov b, $2e
2399   14BE B0            cmp a, b
2400   14BF FD 71         seq ; ==
2401   14C1 E4            pop a
2402   14C2             ; END RELATIONAL
2403   14C2 FD A8         sor a, b ; ||
2404   14C4 E4            pop a
2405   14C5 C0 00 00      cmp b, 0
2406   14C8 C6 D3 14      je _if26_else
2407   14CB             _if26_true:
2408   14CB             ;; return 1; 
2409   14CB 26 01 00      mov b, $1
2410   14CE F9            leave
2411   14CF 09            ret
2412   14D0 0A D8 14      jmp _if26_exit
2413   14D3             _if26_else:
2414   14D3             ;; return 0; 
2415   14D3 26 00 00      mov b, $0
2416   14D6 F9            leave
2417   14D7 09            ret
2418   14D8             _if26_exit:
2419   14D8 F9            leave
2420   14D9 09            ret
2421   14DA             
2422   14DA             getnum:
2423   14DA F8 00 00      enter 0 ; (push bp; mov bp, sp)
2424   14DD             ; $n 
2425   14DD 52 02 00      sub sp, 2
2426   14E0             ;; print(prompt); 
2427   14E0 FA 05 00      lea d, [bp + 5] ; $prompt
2428   14E3 2A            mov b, [d]
2429   14E4 FD AB         swp b
2430   14E6 D8            push b
2431   14E7 07 65 0C      call print
2432   14EA 51 02 00      add sp, 2
2433   14ED             ;; n = scann(); 
2434   14ED FA FF FF      lea d, [bp + -1] ; $n
2435   14F0 DA            push d
2436   14F1 07 40 0C      call scann
2437   14F4 E7            pop d
2438   14F5 FD 43         mov [d], b
2439   14F7             ;; return n; 
2440   14F7 FA FF FF      lea d, [bp + -1] ; $n
2441   14FA 2A            mov b, [d]
2442   14FB F9            leave
2443   14FC 09            ret
2444   14FD             
2445   14FD             getlet:
2446   14FD F8 00 00      enter 0 ; (push bp; mov bp, sp)
2447   1500             ; $c 
2448   1500 19 0A         mov al, $a
2449   1502 40 00 00      mov [bp + 0], al
2450   1505 52 01 00      sub sp, 1
2451   1508             ;; print(prompt); 
2452   1508 FA 05 00      lea d, [bp + 5] ; $prompt
2453   150B 2A            mov b, [d]
2454   150C FD AB         swp b
2455   150E D8            push b
2456   150F 07 65 0C      call print
2457   1512 51 02 00      add sp, 2
2458   1515             ;; while (c == '\n') { 
2459   1515             _while27_cond:
2460   1515 FA 00 00      lea d, [bp + 0] ; $c
2461   1518 32            mov bl, [d]
2462   1519 A7 00         mov bh, 0
2463   151B             ; START RELATIONAL
2464   151B D7            push a
2465   151C 11            mov a, b
2466   151D 26 0A 00      mov b, $a
2467   1520 B0            cmp a, b
2468   1521 FD 71         seq ; ==
2469   1523 E4            pop a
2470   1524             ; END RELATIONAL
2471   1524 C0 00 00      cmp b, 0
2472   1527 C6 37 15      je _while27_exit
2473   152A             _while27_block:
2474   152A             ;; c = getchar(); 
2475   152A FA 00 00      lea d, [bp + 0] ; $c
2476   152D DA            push d
2477   152E 07 2A 0C      call getchar
2478   1531 E7            pop d
2479   1532 FD 3E         mov [d], bl
2480   1534 0A 15 15      jmp _while27_cond
2481   1537             _while27_exit:
2482   1537             ;; return toupper(c); 
2483   1537 FA 00 00      lea d, [bp + 0] ; $c
2484   153A 32            mov bl, [d]
2485   153B A7 00         mov bh, 0
2486   153D DD            push bl
2487   153E 07 B4 12      call toupper
2488   1541 51 01 00      add sp, 1
2489   1544 F9            leave
2490   1545 09            ret
2491   1546             
2492   1546             print_instructions:
2493   1546 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2494   1549             ;; print("Welcome to 'hunt the wumpus'\n"); 
2495   1549 26 76 23      mov b, __s5 ; "Welcome to 'hunt the wumpus'\n"
2496   154C FD AB         swp b
2497   154E D8            push b
2498   154F 07 65 0C      call print
2499   1552 51 02 00      add sp, 2
2500   1555             ;; print("The wumpus lives in a cave of 20 rooms. Each room\n"); 
2501   1555 26 94 23      mov b, __s6 ; "The wumpus lives in a cave of 20 rooms. Each room\n"
2502   1558 FD AB         swp b
2503   155A D8            push b
2504   155B 07 65 0C      call print
2505   155E 51 02 00      add sp, 2
2506   1561             ;; print("has 3 tunnels leading to other rooms.\n");  
2507   1561 26 C7 23      mov b, __s7 ; "has 3 tunnels leading to other rooms.\n"
2508   1564 FD AB         swp b
2509   1566 D8            push b
2510   1567 07 65 0C      call print
2511   156A 51 02 00      add sp, 2
2512   156D             ;; print("Look at a dodecahedron to see how this works.\n"); 
2513   156D 26 EE 23      mov b, __s8 ; "Look at a dodecahedron to see how this works.\n"
2514   1570 FD AB         swp b
2515   1572 D8            push b
2516   1573 07 65 0C      call print
2517   1576 51 02 00      add sp, 2
2518   1579             ;; print("\n"); 
2519   1579 26 74 23      mov b, __s4 ; "\n"
2520   157C FD AB         swp b
2521   157E D8            push b
2522   157F 07 65 0C      call print
2523   1582 51 02 00      add sp, 2
2524   1585             ;; print(" Hazards:\n"); 
2525   1585 26 1D 24      mov b, __s9 ; " Hazards:\n"
2526   1588 FD AB         swp b
2527   158A D8            push b
2528   158B 07 65 0C      call print
2529   158E 51 02 00      add sp, 2
2530   1591             ;; print(" Bottomless pits: Two rooms have bottomless pits in them\n"); 
2531   1591 26 28 24      mov b, __s10 ; " Bottomless pits: Two rooms have bottomless pits in them\n"
2532   1594 FD AB         swp b
2533   1596 D8            push b
2534   1597 07 65 0C      call print
2535   159A 51 02 00      add sp, 2
2536   159D             ;; print(" If you go there, you fall into the pit (& lose!)\n"); 
2537   159D 26 62 24      mov b, __s11 ; " If you go there, you fall into the pit (& lose!)\n"
2538   15A0 FD AB         swp b
2539   15A2 D8            push b
2540   15A3 07 65 0C      call print
2541   15A6 51 02 00      add sp, 2
2542   15A9             ;; print(" SUPER BATS     : TWO OTHER ROOMS HAVE SUPER BATS. IF YOU\n"); 
2543   15A9 26 95 24      mov b, __s12 ; " SUPER BATS     : TWO OTHER ROOMS HAVE SUPER BATS. IF YOU\n"
2544   15AC FD AB         swp b
2545   15AE D8            push b
2546   15AF 07 65 0C      call print
2547   15B2 51 02 00      add sp, 2
2548   15B5             ;; print(" GO THERE, A BAT GRABS YOU AND TAKES YOU TO SOME OTHER\n"); 
2549   15B5 26 D0 24      mov b, __s13 ; " GO THERE, A BAT GRABS YOU AND TAKES YOU TO SOME OTHER\n"
2550   15B8 FD AB         swp b
2551   15BA D8            push b
2552   15BB 07 65 0C      call print
2553   15BE 51 02 00      add sp, 2
2554   15C1             ;; print(" ROOM AT RANDOM. (WHICH MAY BE TROUBLESOME)\n\n"); 
2555   15C1 26 08 25      mov b, __s14 ; " ROOM AT RANDOM. (WHICH MAY BE TROUBLESOME)\n\n"
2556   15C4 FD AB         swp b
2557   15C6 D8            push b
2558   15C7 07 65 0C      call print
2559   15CA 51 02 00      add sp, 2
2560   15CD             ;; print(" WUMPUS:\n"); 
2561   15CD 26 36 25      mov b, __s15 ; " WUMPUS:\n"
2562   15D0 FD AB         swp b
2563   15D2 D8            push b
2564   15D3 07 65 0C      call print
2565   15D6 51 02 00      add sp, 2
2566   15D9             ;; print(" THE WUMPUS IS NOT BOTHERED BY HAZARDS (HE HAS SUCKER\n"); 
2567   15D9 26 40 25      mov b, __s16 ; " THE WUMPUS IS NOT BOTHERED BY HAZARDS (HE HAS SUCKER\n"
2568   15DC FD AB         swp b
2569   15DE D8            push b
2570   15DF 07 65 0C      call print
2571   15E2 51 02 00      add sp, 2
2572   15E5             ;; print(" FEET AND IS TOO BIG FOR A BAT TO LIFT).  USUALLY\n"); 
2573   15E5 26 77 25      mov b, __s17 ; " FEET AND IS TOO BIG FOR A BAT TO LIFT).  USUALLY\n"
2574   15E8 FD AB         swp b
2575   15EA D8            push b
2576   15EB 07 65 0C      call print
2577   15EE 51 02 00      add sp, 2
2578   15F1             ;; print(" HE IS ASLEEP.  TWO THINGS WAKE HIM UP: YOU SHOOTING AN\n"); 
2579   15F1 26 AA 25      mov b, __s18 ; " HE IS ASLEEP.  TWO THINGS WAKE HIM UP: YOU SHOOTING AN\n"
2580   15F4 FD AB         swp b
2581   15F6 D8            push b
2582   15F7 07 65 0C      call print
2583   15FA 51 02 00      add sp, 2
2584   15FD             ;; print(" ARROW OR YOU ENTERING HIS ROOM.\n"); 
2585   15FD 26 E3 25      mov b, __s19 ; " ARROW OR YOU ENTERING HIS ROOM.\n"
2586   1600 FD AB         swp b
2587   1602 D8            push b
2588   1603 07 65 0C      call print
2589   1606 51 02 00      add sp, 2
2590   1609             ;; print(" IF THE WUMPUS WAKES HE MOVES (P=.75) ONE ROOM\n"); 
2591   1609 26 05 26      mov b, __s20 ; " IF THE WUMPUS WAKES HE MOVES (P=.75) ONE ROOM\n"
2592   160C FD AB         swp b
2593   160E D8            push b
2594   160F 07 65 0C      call print
2595   1612 51 02 00      add sp, 2
2596   1615             ;; print(" OR STAYS STILL (P=.25).  AFTER THAT, IF HE IS WHERE YOU\n"); 
2597   1615 26 35 26      mov b, __s21 ; " OR STAYS STILL (P=.25).  AFTER THAT, IF HE IS WHERE YOU\n"
2598   1618 FD AB         swp b
2599   161A D8            push b
2600   161B 07 65 0C      call print
2601   161E 51 02 00      add sp, 2
2602   1621             ;; print(" ARE, HE EATS YOU UP AND YOU LOSE!\n"); 
2603   1621 26 6F 26      mov b, __s22 ; " ARE, HE EATS YOU UP AND YOU LOSE!\n"
2604   1624 FD AB         swp b
2605   1626 D8            push b
2606   1627 07 65 0C      call print
2607   162A 51 02 00      add sp, 2
2608   162D             ;; print("\n"); 
2609   162D 26 74 23      mov b, __s4 ; "\n"
2610   1630 FD AB         swp b
2611   1632 D8            push b
2612   1633 07 65 0C      call print
2613   1636 51 02 00      add sp, 2
2614   1639             ;; print(" YOU:\n"); 
2615   1639 26 93 26      mov b, __s23 ; " YOU:\n"
2616   163C FD AB         swp b
2617   163E D8            push b
2618   163F 07 65 0C      call print
2619   1642 51 02 00      add sp, 2
2620   1645             ;; print(" EACH TURN YOU MAY MOVE OR SHOOT A CROOKED ARROW\n"); 
2621   1645 26 9A 26      mov b, __s24 ; " EACH TURN YOU MAY MOVE OR SHOOT A CROOKED ARROW\n"
2622   1648 FD AB         swp b
2623   164A D8            push b
2624   164B 07 65 0C      call print
2625   164E 51 02 00      add sp, 2
2626   1651             ;; print(" MOVING:  YOU CAN MOVE ONE ROOM (THRU ONE TUNNEL)\n"); 
2627   1651 26 CC 26      mov b, __s25 ; " MOVING:  YOU CAN MOVE ONE ROOM (THRU ONE TUNNEL)\n"
2628   1654 FD AB         swp b
2629   1656 D8            push b
2630   1657 07 65 0C      call print
2631   165A 51 02 00      add sp, 2
2632   165D             ;; print(" ARROWS:  YOU HAVE 5 ARROWS.  YOU LOSE WHEN YOU RUN OUT\n"); 
2633   165D 26 FF 26      mov b, __s26 ; " ARROWS:  YOU HAVE 5 ARROWS.  YOU LOSE WHEN YOU RUN OUT\n"
2634   1660 FD AB         swp b
2635   1662 D8            push b
2636   1663 07 65 0C      call print
2637   1666 51 02 00      add sp, 2
2638   1669             ;; print(" EACH ARROW CAN GO FROM 1 TO 5 ROOMS. YOU AIM BY TELLING\n"); 
2639   1669 26 38 27      mov b, __s27 ; " EACH ARROW CAN GO FROM 1 TO 5 ROOMS. YOU AIM BY TELLING\n"
2640   166C FD AB         swp b
2641   166E D8            push b
2642   166F 07 65 0C      call print
2643   1672 51 02 00      add sp, 2
2644   1675             ;; print("   THE COMPUTER THE ROOM#S YOU WANT THE ARROW TO GO TO.\n"); 
2645   1675 26 72 27      mov b, __s28 ; "   THE COMPUTER THE ROOM#S YOU WANT THE ARROW TO GO TO.\n"
2646   1678 FD AB         swp b
2647   167A D8            push b
2648   167B 07 65 0C      call print
2649   167E 51 02 00      add sp, 2
2650   1681             ;; print("   IF THE ARROW CAN'T GO THAT WAY (IF NO TUNNEL) IT MOVES\n"); 
2651   1681 26 AB 27      mov b, __s29 ; "   IF THE ARROW CAN'T GO THAT WAY (IF NO TUNNEL) IT MOVES\n"
2652   1684 FD AB         swp b
2653   1686 D8            push b
2654   1687 07 65 0C      call print
2655   168A 51 02 00      add sp, 2
2656   168D             ;; print("   AT RANDOM TO THE NEXT ROOM.\n"); 
2657   168D 26 E5 27      mov b, __s30 ; "   AT RANDOM TO THE NEXT ROOM.\n"
2658   1690 FD AB         swp b
2659   1692 D8            push b
2660   1693 07 65 0C      call print
2661   1696 51 02 00      add sp, 2
2662   1699             ;; print("     IF THE ARROW HITS THE WUMPUS, YOU WIN.\n"); 
2663   1699 26 05 28      mov b, __s31 ; "     IF THE ARROW HITS THE WUMPUS, YOU WIN.\n"
2664   169C FD AB         swp b
2665   169E D8            push b
2666   169F 07 65 0C      call print
2667   16A2 51 02 00      add sp, 2
2668   16A5             ;; print("     IF THE ARROW HITS YOU, YOU LOSE.\n"); 
2669   16A5 26 32 28      mov b, __s32 ; "     IF THE ARROW HITS YOU, YOU LOSE.\n"
2670   16A8 FD AB         swp b
2671   16AA D8            push b
2672   16AB 07 65 0C      call print
2673   16AE 51 02 00      add sp, 2
2674   16B1             ;; print(" WARNINGS:\n"); 
2675   16B1 26 59 28      mov b, __s33 ; " WARNINGS:\n"
2676   16B4 FD AB         swp b
2677   16B6 D8            push b
2678   16B7 07 65 0C      call print
2679   16BA 51 02 00      add sp, 2
2680   16BD             ;; print(" WHEN YOU ARE ONE ROOM AWAY FROM A WUMPUS OR HAZARD,\n"); 
2681   16BD 26 65 28      mov b, __s34 ; " WHEN YOU ARE ONE ROOM AWAY FROM A WUMPUS OR HAZARD,\n"
2682   16C0 FD AB         swp b
2683   16C2 D8            push b
2684   16C3 07 65 0C      call print
2685   16C6 51 02 00      add sp, 2
2686   16C9             ;; print(" THE COMPUTER SAYS:\n"); 
2687   16C9 26 9B 28      mov b, __s35 ; " THE COMPUTER SAYS:\n"
2688   16CC FD AB         swp b
2689   16CE D8            push b
2690   16CF 07 65 0C      call print
2691   16D2 51 02 00      add sp, 2
2692   16D5             ;; print(" WUMPUS:  'I SMELL A WUMPUS'\n"); 
2693   16D5 26 B0 28      mov b, __s36 ; " WUMPUS:  'I SMELL A WUMPUS'\n"
2694   16D8 FD AB         swp b
2695   16DA D8            push b
2696   16DB 07 65 0C      call print
2697   16DE 51 02 00      add sp, 2
2698   16E1             ;; print(" BAT   :  'BATS NEARBY'\n"); 
2699   16E1 26 CE 28      mov b, __s37 ; " BAT   :  'BATS NEARBY'\n"
2700   16E4 FD AB         swp b
2701   16E6 D8            push b
2702   16E7 07 65 0C      call print
2703   16EA 51 02 00      add sp, 2
2704   16ED             ;; print(" PIT   :  'I FEEL A DRAFT'\n"); 
2705   16ED 26 E7 28      mov b, __s38 ; " PIT   :  'I FEEL A DRAFT'\n"
2706   16F0 FD AB         swp b
2707   16F2 D8            push b
2708   16F3 07 65 0C      call print
2709   16F6 51 02 00      add sp, 2
2710   16F9             ;; print("\n"); 
2711   16F9 26 74 23      mov b, __s4 ; "\n"
2712   16FC FD AB         swp b
2713   16FE D8            push b
2714   16FF 07 65 0C      call print
2715   1702 51 02 00      add sp, 2
2716   1705 F9            leave
2717   1706 09            ret
2718   1707             
2719   1707             show_room:
2720   1707 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2721   170A             ; $room 
2722   170A             ; $k 
2723   170A 52 04 00      sub sp, 4
2724   170D             ;; print("\n"); 
2725   170D 26 74 23      mov b, __s4 ; "\n"
2726   1710 FD AB         swp b
2727   1712 D8            push b
2728   1713 07 65 0C      call print
2729   1716 51 02 00      add sp, 2
2730   1719             ;; for (k = 0; k < 3; k++) { 
2731   1719             _for28_init:
2732   1719 FA FD FF      lea d, [bp + -3] ; $k
2733   171C DA            push d
2734   171D 26 00 00      mov b, $0
2735   1720 E7            pop d
2736   1721 FD 43         mov [d], b
2737   1723             _for28_cond:
2738   1723 FA FD FF      lea d, [bp + -3] ; $k
2739   1726 2A            mov b, [d]
2740   1727             ; START RELATIONAL
2741   1727 D7            push a
2742   1728 11            mov a, b
2743   1729 26 03 00      mov b, $3
2744   172C B0            cmp a, b
2745   172D FD 73         slt ; < 
2746   172F E4            pop a
2747   1730             ; END RELATIONAL
2748   1730 C0 00 00      cmp b, 0
2749   1733 C6 3A 18      je _for28_exit
2750   1736             _for28_block:
2751   1736             ;; room = cave[loc[ 0  ]][k]; 
2752   1736 FA FF FF      lea d, [bp + -1] ; $room
2753   1739 DA            push d
2754   173A 3B A5 22      mov d, _cave_data ; $cave
2755   173D D7            push a
2756   173E DA            push d
2757   173F 3B 97 22      mov d, _loc_data ; $loc
2758   1742 D7            push a
2759   1743 DA            push d
2760   1744 26 00 00      mov b, $0
2761   1747 E7            pop d
2762   1748 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2763   174C E4            pop a
2764   174D 2A            mov b, [d]
2765   174E E7            pop d
2766   174F FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
2767   1753 DA            push d
2768   1754 FA FD FF      lea d, [bp + -3] ; $k
2769   1757 2A            mov b, [d]
2770   1758 E7            pop d
2771   1759 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2772   175D E4            pop a
2773   175E 2A            mov b, [d]
2774   175F E7            pop d
2775   1760 FD 43         mov [d], b
2776   1762             ;; if (room == loc[ 1     ]) { 
2777   1762             _if29_cond:
2778   1762 FA FF FF      lea d, [bp + -1] ; $room
2779   1765 2A            mov b, [d]
2780   1766             ; START RELATIONAL
2781   1766 D7            push a
2782   1767 11            mov a, b
2783   1768 3B 97 22      mov d, _loc_data ; $loc
2784   176B D7            push a
2785   176C DA            push d
2786   176D 26 01 00      mov b, $1
2787   1770 E7            pop d
2788   1771 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2789   1775 E4            pop a
2790   1776 2A            mov b, [d]
2791   1777 B0            cmp a, b
2792   1778 FD 71         seq ; ==
2793   177A E4            pop a
2794   177B             ; END RELATIONAL
2795   177B C0 00 00      cmp b, 0
2796   177E C6 90 17      je _if29_else
2797   1781             _if29_true:
2798   1781             ;; print("I SMELL A WUMPUS!\n"); 
2799   1781 26 03 29      mov b, __s39 ; "I SMELL A WUMPUS!\n"
2800   1784 FD AB         swp b
2801   1786 D8            push b
2802   1787 07 65 0C      call print
2803   178A 51 02 00      add sp, 2
2804   178D 0A 28 18      jmp _if29_exit
2805   1790             _if29_else:
2806   1790             ;; if (room == loc[ 2   ] || room == loc[ 3   ]) { 
2807   1790             _if30_cond:
2808   1790 FA FF FF      lea d, [bp + -1] ; $room
2809   1793 2A            mov b, [d]
2810   1794             ; START RELATIONAL
2811   1794 D7            push a
2812   1795 11            mov a, b
2813   1796 3B 97 22      mov d, _loc_data ; $loc
2814   1799 D7            push a
2815   179A DA            push d
2816   179B 26 02 00      mov b, $2
2817   179E E7            pop d
2818   179F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2819   17A3 E4            pop a
2820   17A4 2A            mov b, [d]
2821   17A5 B0            cmp a, b
2822   17A6 FD 71         seq ; ==
2823   17A8 E4            pop a
2824   17A9             ; END RELATIONAL
2825   17A9 D7            push a
2826   17AA 11            mov a, b
2827   17AB FA FF FF      lea d, [bp + -1] ; $room
2828   17AE 2A            mov b, [d]
2829   17AF             ; START RELATIONAL
2830   17AF D7            push a
2831   17B0 11            mov a, b
2832   17B1 3B 97 22      mov d, _loc_data ; $loc
2833   17B4 D7            push a
2834   17B5 DA            push d
2835   17B6 26 03 00      mov b, $3
2836   17B9 E7            pop d
2837   17BA FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2838   17BE E4            pop a
2839   17BF 2A            mov b, [d]
2840   17C0 B0            cmp a, b
2841   17C1 FD 71         seq ; ==
2842   17C3 E4            pop a
2843   17C4             ; END RELATIONAL
2844   17C4 FD A8         sor a, b ; ||
2845   17C6 E4            pop a
2846   17C7 C0 00 00      cmp b, 0
2847   17CA C6 DC 17      je _if30_else
2848   17CD             _if30_true:
2849   17CD             ;; print("I FEEL A DRAFT\n"); 
2850   17CD 26 16 29      mov b, __s40 ; "I FEEL A DRAFT\n"
2851   17D0 FD AB         swp b
2852   17D2 D8            push b
2853   17D3 07 65 0C      call print
2854   17D6 51 02 00      add sp, 2
2855   17D9 0A 28 18      jmp _if30_exit
2856   17DC             _if30_else:
2857   17DC             ;; if (room == loc[ 4    ] || room == loc[ 5    ]) { 
2858   17DC             _if31_cond:
2859   17DC FA FF FF      lea d, [bp + -1] ; $room
2860   17DF 2A            mov b, [d]
2861   17E0             ; START RELATIONAL
2862   17E0 D7            push a
2863   17E1 11            mov a, b
2864   17E2 3B 97 22      mov d, _loc_data ; $loc
2865   17E5 D7            push a
2866   17E6 DA            push d
2867   17E7 26 04 00      mov b, $4
2868   17EA E7            pop d
2869   17EB FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2870   17EF E4            pop a
2871   17F0 2A            mov b, [d]
2872   17F1 B0            cmp a, b
2873   17F2 FD 71         seq ; ==
2874   17F4 E4            pop a
2875   17F5             ; END RELATIONAL
2876   17F5 D7            push a
2877   17F6 11            mov a, b
2878   17F7 FA FF FF      lea d, [bp + -1] ; $room
2879   17FA 2A            mov b, [d]
2880   17FB             ; START RELATIONAL
2881   17FB D7            push a
2882   17FC 11            mov a, b
2883   17FD 3B 97 22      mov d, _loc_data ; $loc
2884   1800 D7            push a
2885   1801 DA            push d
2886   1802 26 05 00      mov b, $5
2887   1805 E7            pop d
2888   1806 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2889   180A E4            pop a
2890   180B 2A            mov b, [d]
2891   180C B0            cmp a, b
2892   180D FD 71         seq ; ==
2893   180F E4            pop a
2894   1810             ; END RELATIONAL
2895   1810 FD A8         sor a, b ; ||
2896   1812 E4            pop a
2897   1813 C0 00 00      cmp b, 0
2898   1816 C6 28 18      je _if31_exit
2899   1819             _if31_true:
2900   1819             ;; print("BATS NEARBY!\n"); 
2901   1819 26 26 29      mov b, __s41 ; "BATS NEARBY!\n"
2902   181C FD AB         swp b
2903   181E D8            push b
2904   181F 07 65 0C      call print
2905   1822 51 02 00      add sp, 2
2906   1825 0A 28 18      jmp _if31_exit
2907   1828             _if31_exit:
2908   1828             _if30_exit:
2909   1828             _if29_exit:
2910   1828             _for28_update:
2911   1828 FA FD FF      lea d, [bp + -3] ; $k
2912   182B 2A            mov b, [d]
2913   182C FD 79         mov g, b
2914   182E FD 77         inc b
2915   1830 FA FD FF      lea d, [bp + -3] ; $k
2916   1833 FD 43         mov [d], b
2917   1835 FD 27         mov b, g
2918   1837 0A 23 17      jmp _for28_cond
2919   183A             _for28_exit:
2920   183A             ;; print("YOU ARE IN ROOM "); printu(loc[ 0  ]+1); print("\n"); 
2921   183A 26 34 29      mov b, __s42 ; "YOU ARE IN ROOM "
2922   183D FD AB         swp b
2923   183F D8            push b
2924   1840 07 65 0C      call print
2925   1843 51 02 00      add sp, 2
2926   1846             ;; printu(loc[ 0  ]+1); print("\n"); 
2927   1846 3B 97 22      mov d, _loc_data ; $loc
2928   1849 D7            push a
2929   184A DA            push d
2930   184B 26 00 00      mov b, $0
2931   184E E7            pop d
2932   184F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2933   1853 E4            pop a
2934   1854 2A            mov b, [d]
2935   1855             ; START TERMS
2936   1855 D7            push a
2937   1856 11            mov a, b
2938   1857 26 01 00      mov b, $1
2939   185A 54            add a, b
2940   185B 27            mov b, a
2941   185C E4            pop a
2942   185D             ; END TERMS
2943   185D FD AB         swp b
2944   185F D8            push b
2945   1860 07 31 0B      call printu
2946   1863 51 02 00      add sp, 2
2947   1866             ;; print("\n"); 
2948   1866 26 74 23      mov b, __s4 ; "\n"
2949   1869 FD AB         swp b
2950   186B D8            push b
2951   186C 07 65 0C      call print
2952   186F 51 02 00      add sp, 2
2953   1872             ;; print("TUNNELS LEAD TO ");  
2954   1872 26 45 29      mov b, __s43 ; "TUNNELS LEAD TO "
2955   1875 FD AB         swp b
2956   1877 D8            push b
2957   1878 07 65 0C      call print
2958   187B 51 02 00      add sp, 2
2959   187E             ;; printu(cave[loc[ 0  ]][0]+1); print(", "); 
2960   187E 3B A5 22      mov d, _cave_data ; $cave
2961   1881 D7            push a
2962   1882 DA            push d
2963   1883 3B 97 22      mov d, _loc_data ; $loc
2964   1886 D7            push a
2965   1887 DA            push d
2966   1888 26 00 00      mov b, $0
2967   188B E7            pop d
2968   188C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2969   1890 E4            pop a
2970   1891 2A            mov b, [d]
2971   1892 E7            pop d
2972   1893 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
2973   1897 DA            push d
2974   1898 26 00 00      mov b, $0
2975   189B E7            pop d
2976   189C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2977   18A0 E4            pop a
2978   18A1 2A            mov b, [d]
2979   18A2             ; START TERMS
2980   18A2 D7            push a
2981   18A3 11            mov a, b
2982   18A4 26 01 00      mov b, $1
2983   18A7 54            add a, b
2984   18A8 27            mov b, a
2985   18A9 E4            pop a
2986   18AA             ; END TERMS
2987   18AA FD AB         swp b
2988   18AC D8            push b
2989   18AD 07 31 0B      call printu
2990   18B0 51 02 00      add sp, 2
2991   18B3             ;; print(", "); 
2992   18B3 26 56 29      mov b, __s44 ; ", "
2993   18B6 FD AB         swp b
2994   18B8 D8            push b
2995   18B9 07 65 0C      call print
2996   18BC 51 02 00      add sp, 2
2997   18BF             ;; printu(cave[loc[ 0  ]][1]+1); print(", "); 
2998   18BF 3B A5 22      mov d, _cave_data ; $cave
2999   18C2 D7            push a
3000   18C3 DA            push d
3001   18C4 3B 97 22      mov d, _loc_data ; $loc
3002   18C7 D7            push a
3003   18C8 DA            push d
3004   18C9 26 00 00      mov b, $0
3005   18CC E7            pop d
3006   18CD FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3007   18D1 E4            pop a
3008   18D2 2A            mov b, [d]
3009   18D3 E7            pop d
3010   18D4 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
3011   18D8 DA            push d
3012   18D9 26 01 00      mov b, $1
3013   18DC E7            pop d
3014   18DD FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3015   18E1 E4            pop a
3016   18E2 2A            mov b, [d]
3017   18E3             ; START TERMS
3018   18E3 D7            push a
3019   18E4 11            mov a, b
3020   18E5 26 01 00      mov b, $1
3021   18E8 54            add a, b
3022   18E9 27            mov b, a
3023   18EA E4            pop a
3024   18EB             ; END TERMS
3025   18EB FD AB         swp b
3026   18ED D8            push b
3027   18EE 07 31 0B      call printu
3028   18F1 51 02 00      add sp, 2
3029   18F4             ;; print(", "); 
3030   18F4 26 56 29      mov b, __s44 ; ", "
3031   18F7 FD AB         swp b
3032   18F9 D8            push b
3033   18FA 07 65 0C      call print
3034   18FD 51 02 00      add sp, 2
3035   1900             ;; printu(cave[loc[ 0  ]][2]+1); 
3036   1900 3B A5 22      mov d, _cave_data ; $cave
3037   1903 D7            push a
3038   1904 DA            push d
3039   1905 3B 97 22      mov d, _loc_data ; $loc
3040   1908 D7            push a
3041   1909 DA            push d
3042   190A 26 00 00      mov b, $0
3043   190D E7            pop d
3044   190E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3045   1912 E4            pop a
3046   1913 2A            mov b, [d]
3047   1914 E7            pop d
3048   1915 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
3049   1919 DA            push d
3050   191A 26 02 00      mov b, $2
3051   191D E7            pop d
3052   191E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3053   1922 E4            pop a
3054   1923 2A            mov b, [d]
3055   1924             ; START TERMS
3056   1924 D7            push a
3057   1925 11            mov a, b
3058   1926 26 01 00      mov b, $1
3059   1929 54            add a, b
3060   192A 27            mov b, a
3061   192B E4            pop a
3062   192C             ; END TERMS
3063   192C FD AB         swp b
3064   192E D8            push b
3065   192F 07 31 0B      call printu
3066   1932 51 02 00      add sp, 2
3067   1935             ;; print("\n\n"); 
3068   1935 26 59 29      mov b, __s45 ; "\n\n"
3069   1938 FD AB         swp b
3070   193A D8            push b
3071   193B 07 65 0C      call print
3072   193E 51 02 00      add sp, 2
3073   1941 F9            leave
3074   1942 09            ret
3075   1943             
3076   1943             move_or_shoot:
3077   1943 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3078   1946             ; $c 
3079   1946 10 FF FF      mov a, $ffffffff
3080   1949 45 FF FF      mov [bp + -1], a
3081   194C 52 02 00      sub sp, 2
3082   194F             ;; while ((c != 'S') && (c != 'M')) { 
3083   194F             _while32_cond:
3084   194F FA FF FF      lea d, [bp + -1] ; $c
3085   1952 2A            mov b, [d]
3086   1953             ; START RELATIONAL
3087   1953 D7            push a
3088   1954 11            mov a, b
3089   1955 26 53 00      mov b, $53
3090   1958 B0            cmp a, b
3091   1959 FD 72         sneq ; !=
3092   195B E4            pop a
3093   195C             ; END RELATIONAL
3094   195C D7            push a
3095   195D 11            mov a, b
3096   195E FA FF FF      lea d, [bp + -1] ; $c
3097   1961 2A            mov b, [d]
3098   1962             ; START RELATIONAL
3099   1962 D7            push a
3100   1963 11            mov a, b
3101   1964 26 4D 00      mov b, $4d
3102   1967 B0            cmp a, b
3103   1968 FD 72         sneq ; !=
3104   196A E4            pop a
3105   196B             ; END RELATIONAL
3106   196B FD A7         sand a, b ; &&
3107   196D E4            pop a
3108   196E C0 00 00      cmp b, 0
3109   1971 C6 8A 19      je _while32_exit
3110   1974             _while32_block:
3111   1974             ;; c = getlet("SHOOT OR MOVE (S-M): "); 
3112   1974 FA FF FF      lea d, [bp + -1] ; $c
3113   1977 DA            push d
3114   1978 26 5C 29      mov b, __s46 ; "SHOOT OR MOVE (S-M): "
3115   197B FD AB         swp b
3116   197D D8            push b
3117   197E 07 FD 14      call getlet
3118   1981 51 02 00      add sp, 2
3119   1984 E7            pop d
3120   1985 FD 43         mov [d], b
3121   1987 0A 4F 19      jmp _while32_cond
3122   198A             _while32_exit:
3123   198A             ;; return (c == 'S') ? 1 : 0; 
3124   198A             _ternary33_cond:
3125   198A FA FF FF      lea d, [bp + -1] ; $c
3126   198D 2A            mov b, [d]
3127   198E             ; START RELATIONAL
3128   198E D7            push a
3129   198F 11            mov a, b
3130   1990 26 53 00      mov b, $53
3131   1993 B0            cmp a, b
3132   1994 FD 71         seq ; ==
3133   1996 E4            pop a
3134   1997             ; END RELATIONAL
3135   1997 C0 00 00      cmp b, 0
3136   199A C6 A3 19      je _ternary33_false
3137   199D             _ternary33_true:
3138   199D 26 01 00      mov b, $1
3139   19A0 0A A6 19      jmp _ternary33_exit
3140   19A3             _ternary33_false:
3141   19A3 26 00 00      mov b, $0
3142   19A6             _ternary33_exit:
3143   19A6 F9            leave
3144   19A7 09            ret
3145   19A8             
3146   19A8             move_wumpus:
3147   19A8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3148   19AB             ; $k 
3149   19AB 52 02 00      sub sp, 2
3150   19AE             ;; k = rand2() % 4; 
3151   19AE FA FF FF      lea d, [bp + -1] ; $k
3152   19B1 DA            push d
3153   19B2 07 9D 1F      call rand2
3154   19B5             ; START FACTORS
3155   19B5 D7            push a
3156   19B6 11            mov a, b
3157   19B7 26 04 00      mov b, $4
3158   19BA AE            div a, b ; 
3159   19BB 11            mov a, b
3160   19BC 27            mov b, a
3161   19BD E4            pop a
3162   19BE             ; END FACTORS
3163   19BE E7            pop d
3164   19BF FD 43         mov [d], b
3165   19C1             ;; if (k < 3) { 
3166   19C1             _if34_cond:
3167   19C1 FA FF FF      lea d, [bp + -1] ; $k
3168   19C4 2A            mov b, [d]
3169   19C5             ; START RELATIONAL
3170   19C5 D7            push a
3171   19C6 11            mov a, b
3172   19C7 26 03 00      mov b, $3
3173   19CA B0            cmp a, b
3174   19CB FD 73         slt ; < 
3175   19CD E4            pop a
3176   19CE             ; END RELATIONAL
3177   19CE C0 00 00      cmp b, 0
3178   19D1 C6 0E 1A      je _if34_exit
3179   19D4             _if34_true:
3180   19D4             ;; loc[ 1     ] = cave[loc[ 1     ]][k]; 
3181   19D4 3B 97 22      mov d, _loc_data ; $loc
3182   19D7 D7            push a
3183   19D8 DA            push d
3184   19D9 26 01 00      mov b, $1
3185   19DC E7            pop d
3186   19DD FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3187   19E1 E4            pop a
3188   19E2 DA            push d
3189   19E3 3B A5 22      mov d, _cave_data ; $cave
3190   19E6 D7            push a
3191   19E7 DA            push d
3192   19E8 3B 97 22      mov d, _loc_data ; $loc
3193   19EB D7            push a
3194   19EC DA            push d
3195   19ED 26 01 00      mov b, $1
3196   19F0 E7            pop d
3197   19F1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3198   19F5 E4            pop a
3199   19F6 2A            mov b, [d]
3200   19F7 E7            pop d
3201   19F8 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
3202   19FC DA            push d
3203   19FD FA FF FF      lea d, [bp + -1] ; $k
3204   1A00 2A            mov b, [d]
3205   1A01 E7            pop d
3206   1A02 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3207   1A06 E4            pop a
3208   1A07 2A            mov b, [d]
3209   1A08 E7            pop d
3210   1A09 FD 43         mov [d], b
3211   1A0B 0A 0E 1A      jmp _if34_exit
3212   1A0E             _if34_exit:
3213   1A0E             ;; if (loc[ 1     ] == loc[ 0  ]) { 
3214   1A0E             _if35_cond:
3215   1A0E 3B 97 22      mov d, _loc_data ; $loc
3216   1A11 D7            push a
3217   1A12 DA            push d
3218   1A13 26 01 00      mov b, $1
3219   1A16 E7            pop d
3220   1A17 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3221   1A1B E4            pop a
3222   1A1C 2A            mov b, [d]
3223   1A1D             ; START RELATIONAL
3224   1A1D D7            push a
3225   1A1E 11            mov a, b
3226   1A1F 3B 97 22      mov d, _loc_data ; $loc
3227   1A22 D7            push a
3228   1A23 DA            push d
3229   1A24 26 00 00      mov b, $0
3230   1A27 E7            pop d
3231   1A28 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3232   1A2C E4            pop a
3233   1A2D 2A            mov b, [d]
3234   1A2E B0            cmp a, b
3235   1A2F FD 71         seq ; ==
3236   1A31 E4            pop a
3237   1A32             ; END RELATIONAL
3238   1A32 C0 00 00      cmp b, 0
3239   1A35 C6 51 1A      je _if35_exit
3240   1A38             _if35_true:
3241   1A38             ;; print("TSK TSK TSK - WUMPUS GOT YOU!\n"); 
3242   1A38 26 72 29      mov b, __s47 ; "TSK TSK TSK - WUMPUS GOT YOU!\n"
3243   1A3B FD AB         swp b
3244   1A3D D8            push b
3245   1A3E 07 65 0C      call print
3246   1A41 51 02 00      add sp, 2
3247   1A44             ;; finished =  2   ; 
3248   1A44 3B A3 22      mov d, _finished ; $finished
3249   1A47 DA            push d
3250   1A48 26 02 00      mov b, $2
3251   1A4B E7            pop d
3252   1A4C FD 43         mov [d], b
3253   1A4E 0A 51 1A      jmp _if35_exit
3254   1A51             _if35_exit:
3255   1A51 F9            leave
3256   1A52 09            ret
3257   1A53             
3258   1A53             shoot:
3259   1A53 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3260   1A56             ; $path 
3261   1A56             ; $scratchloc 
3262   1A56 10 FF FF      mov a, $ffffffff
3263   1A59 45 F5 FF      mov [bp + -11], a
3264   1A5C             ; $len 
3265   1A5C             ; $k 
3266   1A5C 52 10 00      sub sp, 16
3267   1A5F             ;; finished =  0  ; 
3268   1A5F 3B A3 22      mov d, _finished ; $finished
3269   1A62 DA            push d
3270   1A63 26 00 00      mov b, $0
3271   1A66 E7            pop d
3272   1A67 FD 43         mov [d], b
3273   1A69             ;; len = -1; 
3274   1A69 FA F3 FF      lea d, [bp + -13] ; $len
3275   1A6C DA            push d
3276   1A6D 26 01 00      mov b, $1
3277   1A70 FD 97         neg b
3278   1A72 E7            pop d
3279   1A73 FD 43         mov [d], b
3280   1A75             ;; while (len < 1 || len > 5) { 
3281   1A75             _while36_cond:
3282   1A75 FA F3 FF      lea d, [bp + -13] ; $len
3283   1A78 2A            mov b, [d]
3284   1A79             ; START RELATIONAL
3285   1A79 D7            push a
3286   1A7A 11            mov a, b
3287   1A7B 26 01 00      mov b, $1
3288   1A7E B0            cmp a, b
3289   1A7F FD 73         slt ; < 
3290   1A81 E4            pop a
3291   1A82             ; END RELATIONAL
3292   1A82 D7            push a
3293   1A83 11            mov a, b
3294   1A84 FA F3 FF      lea d, [bp + -13] ; $len
3295   1A87 2A            mov b, [d]
3296   1A88             ; START RELATIONAL
3297   1A88 D7            push a
3298   1A89 11            mov a, b
3299   1A8A 26 05 00      mov b, $5
3300   1A8D B0            cmp a, b
3301   1A8E FD 7F         sgt ; >
3302   1A90 E4            pop a
3303   1A91             ; END RELATIONAL
3304   1A91 FD A8         sor a, b ; ||
3305   1A93 E4            pop a
3306   1A94 C0 00 00      cmp b, 0
3307   1A97 C6 B0 1A      je _while36_exit
3308   1A9A             _while36_block:
3309   1A9A             ;; len = getnum("\nNUMBER OF ROOMS (1-5): "); 
3310   1A9A FA F3 FF      lea d, [bp + -13] ; $len
3311   1A9D DA            push d
3312   1A9E 26 91 29      mov b, __s48 ; "\nNUMBER OF ROOMS (1-5): "
3313   1AA1 FD AB         swp b
3314   1AA3 D8            push b
3315   1AA4 07 DA 14      call getnum
3316   1AA7 51 02 00      add sp, 2
3317   1AAA E7            pop d
3318   1AAB FD 43         mov [d], b
3319   1AAD 0A 75 1A      jmp _while36_cond
3320   1AB0             _while36_exit:
3321   1AB0             ;; k = 0; 
3322   1AB0 FA F1 FF      lea d, [bp + -15] ; $k
3323   1AB3 DA            push d
3324   1AB4 26 00 00      mov b, $0
3325   1AB7 E7            pop d
3326   1AB8 FD 43         mov [d], b
3327   1ABA             ;; while (k < len) { 
3328   1ABA             _while37_cond:
3329   1ABA FA F1 FF      lea d, [bp + -15] ; $k
3330   1ABD 2A            mov b, [d]
3331   1ABE             ; START RELATIONAL
3332   1ABE D7            push a
3333   1ABF 11            mov a, b
3334   1AC0 FA F3 FF      lea d, [bp + -13] ; $len
3335   1AC3 2A            mov b, [d]
3336   1AC4 B0            cmp a, b
3337   1AC5 FD 73         slt ; < 
3338   1AC7 E4            pop a
3339   1AC8             ; END RELATIONAL
3340   1AC8 C0 00 00      cmp b, 0
3341   1ACB C6 5F 1B      je _while37_exit
3342   1ACE             _while37_block:
3343   1ACE             ;; path[k] = getnum("ROOM #") - 1; 
3344   1ACE FA F7 FF      lea d, [bp + -9] ; $path
3345   1AD1 D7            push a
3346   1AD2 DA            push d
3347   1AD3 FA F1 FF      lea d, [bp + -15] ; $k
3348   1AD6 2A            mov b, [d]
3349   1AD7 E7            pop d
3350   1AD8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3351   1ADC E4            pop a
3352   1ADD DA            push d
3353   1ADE 26 AA 29      mov b, __s49 ; "ROOM #"
3354   1AE1 FD AB         swp b
3355   1AE3 D8            push b
3356   1AE4 07 DA 14      call getnum
3357   1AE7 51 02 00      add sp, 2
3358   1AEA             ; START TERMS
3359   1AEA D7            push a
3360   1AEB 11            mov a, b
3361   1AEC 26 01 00      mov b, $1
3362   1AEF 60            sub a, b
3363   1AF0 27            mov b, a
3364   1AF1 E4            pop a
3365   1AF2             ; END TERMS
3366   1AF2 E7            pop d
3367   1AF3 FD 43         mov [d], b
3368   1AF5             ;; if ((k>1) && (path[k] == path[k-2])) { 
3369   1AF5             _if38_cond:
3370   1AF5 FA F1 FF      lea d, [bp + -15] ; $k
3371   1AF8 2A            mov b, [d]
3372   1AF9             ; START RELATIONAL
3373   1AF9 D7            push a
3374   1AFA 11            mov a, b
3375   1AFB 26 01 00      mov b, $1
3376   1AFE B0            cmp a, b
3377   1AFF FD 7F         sgt ; >
3378   1B01 E4            pop a
3379   1B02             ; END RELATIONAL
3380   1B02 D7            push a
3381   1B03 11            mov a, b
3382   1B04 FA F7 FF      lea d, [bp + -9] ; $path
3383   1B07 D7            push a
3384   1B08 DA            push d
3385   1B09 FA F1 FF      lea d, [bp + -15] ; $k
3386   1B0C 2A            mov b, [d]
3387   1B0D E7            pop d
3388   1B0E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3389   1B12 E4            pop a
3390   1B13 2A            mov b, [d]
3391   1B14             ; START RELATIONAL
3392   1B14 D7            push a
3393   1B15 11            mov a, b
3394   1B16 FA F7 FF      lea d, [bp + -9] ; $path
3395   1B19 D7            push a
3396   1B1A DA            push d
3397   1B1B FA F1 FF      lea d, [bp + -15] ; $k
3398   1B1E 2A            mov b, [d]
3399   1B1F             ; START TERMS
3400   1B1F D7            push a
3401   1B20 11            mov a, b
3402   1B21 26 02 00      mov b, $2
3403   1B24 60            sub a, b
3404   1B25 27            mov b, a
3405   1B26 E4            pop a
3406   1B27             ; END TERMS
3407   1B27 E7            pop d
3408   1B28 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3409   1B2C E4            pop a
3410   1B2D 2A            mov b, [d]
3411   1B2E B0            cmp a, b
3412   1B2F FD 71         seq ; ==
3413   1B31 E4            pop a
3414   1B32             ; END RELATIONAL
3415   1B32 FD A7         sand a, b ; &&
3416   1B34 E4            pop a
3417   1B35 C0 00 00      cmp b, 0
3418   1B38 C6 4D 1B      je _if38_exit
3419   1B3B             _if38_true:
3420   1B3B             ;; print("ARROWS AREN'T THAT CROOKED - TRY ANOTHER ROOM\n"); 
3421   1B3B 26 B1 29      mov b, __s50 ; "ARROWS AREN'T THAT CROOKED - TRY ANOTHER ROOM\n"
3422   1B3E FD AB         swp b
3423   1B40 D8            push b
3424   1B41 07 65 0C      call print
3425   1B44 51 02 00      add sp, 2
3426   1B47             ;; continue;  
3427   1B47 0A BA 1A      jmp _while37_cond ; while continue
3428   1B4A 0A 4D 1B      jmp _if38_exit
3429   1B4D             _if38_exit:
3430   1B4D             ;; k++; 
3431   1B4D FA F1 FF      lea d, [bp + -15] ; $k
3432   1B50 2A            mov b, [d]
3433   1B51 FD 79         mov g, b
3434   1B53 FD 77         inc b
3435   1B55 FA F1 FF      lea d, [bp + -15] ; $k
3436   1B58 FD 43         mov [d], b
3437   1B5A FD 27         mov b, g
3438   1B5C 0A BA 1A      jmp _while37_cond
3439   1B5F             _while37_exit:
3440   1B5F             ;; scratchloc = loc[ 0  ]; 
3441   1B5F FA F5 FF      lea d, [bp + -11] ; $scratchloc
3442   1B62 DA            push d
3443   1B63 3B 97 22      mov d, _loc_data ; $loc
3444   1B66 D7            push a
3445   1B67 DA            push d
3446   1B68 26 00 00      mov b, $0
3447   1B6B E7            pop d
3448   1B6C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3449   1B70 E4            pop a
3450   1B71 2A            mov b, [d]
3451   1B72 E7            pop d
3452   1B73 FD 43         mov [d], b
3453   1B75             ;; for (k = 0; k < len; k++) { 
3454   1B75             _for39_init:
3455   1B75 FA F1 FF      lea d, [bp + -15] ; $k
3456   1B78 DA            push d
3457   1B79 26 00 00      mov b, $0
3458   1B7C E7            pop d
3459   1B7D FD 43         mov [d], b
3460   1B7F             _for39_cond:
3461   1B7F FA F1 FF      lea d, [bp + -15] ; $k
3462   1B82 2A            mov b, [d]
3463   1B83             ; START RELATIONAL
3464   1B83 D7            push a
3465   1B84 11            mov a, b
3466   1B85 FA F3 FF      lea d, [bp + -13] ; $len
3467   1B88 2A            mov b, [d]
3468   1B89 B0            cmp a, b
3469   1B8A FD 73         slt ; < 
3470   1B8C E4            pop a
3471   1B8D             ; END RELATIONAL
3472   1B8D C0 00 00      cmp b, 0
3473   1B90 C6 0B 1D      je _for39_exit
3474   1B93             _for39_block:
3475   1B93             ;; if ((cave[scratchloc][0] == path[k]) || 
3476   1B93             _if40_cond:
3477   1B93 3B A5 22      mov d, _cave_data ; $cave
3478   1B96 D7            push a
3479   1B97 DA            push d
3480   1B98 FA F5 FF      lea d, [bp + -11] ; $scratchloc
3481   1B9B 2A            mov b, [d]
3482   1B9C E7            pop d
3483   1B9D FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
3484   1BA1 DA            push d
3485   1BA2 26 00 00      mov b, $0
3486   1BA5 E7            pop d
3487   1BA6 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3488   1BAA E4            pop a
3489   1BAB 2A            mov b, [d]
3490   1BAC             ; START RELATIONAL
3491   1BAC D7            push a
3492   1BAD 11            mov a, b
3493   1BAE FA F7 FF      lea d, [bp + -9] ; $path
3494   1BB1 D7            push a
3495   1BB2 DA            push d
3496   1BB3 FA F1 FF      lea d, [bp + -15] ; $k
3497   1BB6 2A            mov b, [d]
3498   1BB7 E7            pop d
3499   1BB8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3500   1BBC E4            pop a
3501   1BBD 2A            mov b, [d]
3502   1BBE B0            cmp a, b
3503   1BBF FD 71         seq ; ==
3504   1BC1 E4            pop a
3505   1BC2             ; END RELATIONAL
3506   1BC2 D7            push a
3507   1BC3 11            mov a, b
3508   1BC4 3B A5 22      mov d, _cave_data ; $cave
3509   1BC7 D7            push a
3510   1BC8 DA            push d
3511   1BC9 FA F5 FF      lea d, [bp + -11] ; $scratchloc
3512   1BCC 2A            mov b, [d]
3513   1BCD E7            pop d
3514   1BCE FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
3515   1BD2 DA            push d
3516   1BD3 26 01 00      mov b, $1
3517   1BD6 E7            pop d
3518   1BD7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3519   1BDB E4            pop a
3520   1BDC 2A            mov b, [d]
3521   1BDD             ; START RELATIONAL
3522   1BDD D7            push a
3523   1BDE 11            mov a, b
3524   1BDF FA F7 FF      lea d, [bp + -9] ; $path
3525   1BE2 D7            push a
3526   1BE3 DA            push d
3527   1BE4 FA F1 FF      lea d, [bp + -15] ; $k
3528   1BE7 2A            mov b, [d]
3529   1BE8 E7            pop d
3530   1BE9 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3531   1BED E4            pop a
3532   1BEE 2A            mov b, [d]
3533   1BEF B0            cmp a, b
3534   1BF0 FD 71         seq ; ==
3535   1BF2 E4            pop a
3536   1BF3             ; END RELATIONAL
3537   1BF3 FD A8         sor a, b ; ||
3538   1BF5 11            mov a, b
3539   1BF6 3B A5 22      mov d, _cave_data ; $cave
3540   1BF9 D7            push a
3541   1BFA DA            push d
3542   1BFB FA F5 FF      lea d, [bp + -11] ; $scratchloc
3543   1BFE 2A            mov b, [d]
3544   1BFF E7            pop d
3545   1C00 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
3546   1C04 DA            push d
3547   1C05 26 02 00      mov b, $2
3548   1C08 E7            pop d
3549   1C09 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3550   1C0D E4            pop a
3551   1C0E 2A            mov b, [d]
3552   1C0F             ; START RELATIONAL
3553   1C0F D7            push a
3554   1C10 11            mov a, b
3555   1C11 FA F7 FF      lea d, [bp + -9] ; $path
3556   1C14 D7            push a
3557   1C15 DA            push d
3558   1C16 FA F1 FF      lea d, [bp + -15] ; $k
3559   1C19 2A            mov b, [d]
3560   1C1A E7            pop d
3561   1C1B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3562   1C1F E4            pop a
3563   1C20 2A            mov b, [d]
3564   1C21 B0            cmp a, b
3565   1C22 FD 71         seq ; ==
3566   1C24 E4            pop a
3567   1C25             ; END RELATIONAL
3568   1C25 FD A8         sor a, b ; ||
3569   1C27 E4            pop a
3570   1C28 C0 00 00      cmp b, 0
3571   1C2B C6 48 1C      je _if40_else
3572   1C2E             _if40_true:
3573   1C2E             ;; scratchloc = path[k]; 
3574   1C2E FA F5 FF      lea d, [bp + -11] ; $scratchloc
3575   1C31 DA            push d
3576   1C32 FA F7 FF      lea d, [bp + -9] ; $path
3577   1C35 D7            push a
3578   1C36 DA            push d
3579   1C37 FA F1 FF      lea d, [bp + -15] ; $k
3580   1C3A 2A            mov b, [d]
3581   1C3B E7            pop d
3582   1C3C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3583   1C40 E4            pop a
3584   1C41 2A            mov b, [d]
3585   1C42 E7            pop d
3586   1C43 FD 43         mov [d], b
3587   1C45 0A 71 1C      jmp _if40_exit
3588   1C48             _if40_else:
3589   1C48             ;; scratchloc = cave[scratchloc][rand2()%3]; 
3590   1C48 FA F5 FF      lea d, [bp + -11] ; $scratchloc
3591   1C4B DA            push d
3592   1C4C 3B A5 22      mov d, _cave_data ; $cave
3593   1C4F D7            push a
3594   1C50 DA            push d
3595   1C51 FA F5 FF      lea d, [bp + -11] ; $scratchloc
3596   1C54 2A            mov b, [d]
3597   1C55 E7            pop d
3598   1C56 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
3599   1C5A DA            push d
3600   1C5B 07 9D 1F      call rand2
3601   1C5E             ; START FACTORS
3602   1C5E D7            push a
3603   1C5F 11            mov a, b
3604   1C60 26 03 00      mov b, $3
3605   1C63 AE            div a, b ; 
3606   1C64 11            mov a, b
3607   1C65 27            mov b, a
3608   1C66 E4            pop a
3609   1C67             ; END FACTORS
3610   1C67 E7            pop d
3611   1C68 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3612   1C6C E4            pop a
3613   1C6D 2A            mov b, [d]
3614   1C6E E7            pop d
3615   1C6F FD 43         mov [d], b
3616   1C71             _if40_exit:
3617   1C71             ;; if (scratchloc == loc[ 1     ]) { 
3618   1C71             _if41_cond:
3619   1C71 FA F5 FF      lea d, [bp + -11] ; $scratchloc
3620   1C74 2A            mov b, [d]
3621   1C75             ; START RELATIONAL
3622   1C75 D7            push a
3623   1C76 11            mov a, b
3624   1C77 3B 97 22      mov d, _loc_data ; $loc
3625   1C7A D7            push a
3626   1C7B DA            push d
3627   1C7C 26 01 00      mov b, $1
3628   1C7F E7            pop d
3629   1C80 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3630   1C84 E4            pop a
3631   1C85 2A            mov b, [d]
3632   1C86 B0            cmp a, b
3633   1C87 FD 71         seq ; ==
3634   1C89 E4            pop a
3635   1C8A             ; END RELATIONAL
3636   1C8A C0 00 00      cmp b, 0
3637   1C8D C6 A9 1C      je _if41_else
3638   1C90             _if41_true:
3639   1C90             ;; print("AHA! YOU GOT THE WUMPUS!\n"); 
3640   1C90 26 DF 29      mov b, __s51 ; "AHA! YOU GOT THE WUMPUS!\n"
3641   1C93 FD AB         swp b
3642   1C95 D8            push b
3643   1C96 07 65 0C      call print
3644   1C99 51 02 00      add sp, 2
3645   1C9C             ;; finished =  1  ; 
3646   1C9C 3B A3 22      mov d, _finished ; $finished
3647   1C9F DA            push d
3648   1CA0 26 01 00      mov b, $1
3649   1CA3 E7            pop d
3650   1CA4 FD 43         mov [d], b
3651   1CA6 0A E1 1C      jmp _if41_exit
3652   1CA9             _if41_else:
3653   1CA9             ;; if (scratchloc == loc[ 0  ]) { 
3654   1CA9             _if42_cond:
3655   1CA9 FA F5 FF      lea d, [bp + -11] ; $scratchloc
3656   1CAC 2A            mov b, [d]
3657   1CAD             ; START RELATIONAL
3658   1CAD D7            push a
3659   1CAE 11            mov a, b
3660   1CAF 3B 97 22      mov d, _loc_data ; $loc
3661   1CB2 D7            push a
3662   1CB3 DA            push d
3663   1CB4 26 00 00      mov b, $0
3664   1CB7 E7            pop d
3665   1CB8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3666   1CBC E4            pop a
3667   1CBD 2A            mov b, [d]
3668   1CBE B0            cmp a, b
3669   1CBF FD 71         seq ; ==
3670   1CC1 E4            pop a
3671   1CC2             ; END RELATIONAL
3672   1CC2 C0 00 00      cmp b, 0
3673   1CC5 C6 E1 1C      je _if42_exit
3674   1CC8             _if42_true:
3675   1CC8             ;; print("OUCH! ARROW GOT YOU!\n"); 
3676   1CC8 26 F9 29      mov b, __s52 ; "OUCH! ARROW GOT YOU!\n"
3677   1CCB FD AB         swp b
3678   1CCD D8            push b
3679   1CCE 07 65 0C      call print
3680   1CD1 51 02 00      add sp, 2
3681   1CD4             ;; finished =  2   ; 
3682   1CD4 3B A3 22      mov d, _finished ; $finished
3683   1CD7 DA            push d
3684   1CD8 26 02 00      mov b, $2
3685   1CDB E7            pop d
3686   1CDC FD 43         mov [d], b
3687   1CDE 0A E1 1C      jmp _if42_exit
3688   1CE1             _if42_exit:
3689   1CE1             _if41_exit:
3690   1CE1             ;; if (finished !=  0  ) { 
3691   1CE1             _if43_cond:
3692   1CE1 3B A3 22      mov d, _finished ; $finished
3693   1CE4 2A            mov b, [d]
3694   1CE5             ; START RELATIONAL
3695   1CE5 D7            push a
3696   1CE6 11            mov a, b
3697   1CE7 26 00 00      mov b, $0
3698   1CEA B0            cmp a, b
3699   1CEB FD 72         sneq ; !=
3700   1CED E4            pop a
3701   1CEE             ; END RELATIONAL
3702   1CEE C0 00 00      cmp b, 0
3703   1CF1 C6 F9 1C      je _if43_exit
3704   1CF4             _if43_true:
3705   1CF4             ;; return; 
3706   1CF4 F9            leave
3707   1CF5 09            ret
3708   1CF6 0A F9 1C      jmp _if43_exit
3709   1CF9             _if43_exit:
3710   1CF9             _for39_update:
3711   1CF9 FA F1 FF      lea d, [bp + -15] ; $k
3712   1CFC 2A            mov b, [d]
3713   1CFD FD 79         mov g, b
3714   1CFF FD 77         inc b
3715   1D01 FA F1 FF      lea d, [bp + -15] ; $k
3716   1D04 FD 43         mov [d], b
3717   1D06 FD 27         mov b, g
3718   1D08 0A 7F 1B      jmp _for39_cond
3719   1D0B             _for39_exit:
3720   1D0B             ;; print("MISSED\n"); 
3721   1D0B 26 0F 2A      mov b, __s53 ; "MISSED\n"
3722   1D0E FD AB         swp b
3723   1D10 D8            push b
3724   1D11 07 65 0C      call print
3725   1D14 51 02 00      add sp, 2
3726   1D17             ;; move_wumpus(); 
3727   1D17 07 A8 19      call move_wumpus
3728   1D1A             ;; if (--arrows <= 0) { 
3729   1D1A             _if44_cond:
3730   1D1A 3B 8F 22      mov d, _arrows ; $arrows
3731   1D1D 2A            mov b, [d]
3732   1D1E FD 7D         dec b
3733   1D20 3B 8F 22      mov d, _arrows ; $arrows
3734   1D23 FD 43         mov [d], b
3735   1D25             ; START RELATIONAL
3736   1D25 D7            push a
3737   1D26 11            mov a, b
3738   1D27 26 00 00      mov b, $0
3739   1D2A B0            cmp a, b
3740   1D2B FD 74         sle ; <=
3741   1D2D E4            pop a
3742   1D2E             ; END RELATIONAL
3743   1D2E C0 00 00      cmp b, 0
3744   1D31 C6 41 1D      je _if44_exit
3745   1D34             _if44_true:
3746   1D34             ;; finished =  2   ; 
3747   1D34 3B A3 22      mov d, _finished ; $finished
3748   1D37 DA            push d
3749   1D38 26 02 00      mov b, $2
3750   1D3B E7            pop d
3751   1D3C FD 43         mov [d], b
3752   1D3E 0A 41 1D      jmp _if44_exit
3753   1D41             _if44_exit:
3754   1D41 F9            leave
3755   1D42 09            ret
3756   1D43             
3757   1D43             move:
3758   1D43 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3759   1D46             ; $scratchloc 
3760   1D46 52 02 00      sub sp, 2
3761   1D49             ;; scratchloc = -1; 
3762   1D49 FA FF FF      lea d, [bp + -1] ; $scratchloc
3763   1D4C DA            push d
3764   1D4D 26 01 00      mov b, $1
3765   1D50 FD 97         neg b
3766   1D52 E7            pop d
3767   1D53 FD 43         mov [d], b
3768   1D55             ;; while (scratchloc == -1) { 
3769   1D55             _while45_cond:
3770   1D55 FA FF FF      lea d, [bp + -1] ; $scratchloc
3771   1D58 2A            mov b, [d]
3772   1D59             ; START RELATIONAL
3773   1D59 D7            push a
3774   1D5A 11            mov a, b
3775   1D5B 26 01 00      mov b, $1
3776   1D5E FD 97         neg b
3777   1D60 B0            cmp a, b
3778   1D61 FD 71         seq ; ==
3779   1D63 E4            pop a
3780   1D64             ; END RELATIONAL
3781   1D64 C0 00 00      cmp b, 0
3782   1D67 C6 8D 1E      je _while45_exit
3783   1D6A             _while45_block:
3784   1D6A             ;; scratchloc = getnum("\nWHERE TO: ")-1; 
3785   1D6A FA FF FF      lea d, [bp + -1] ; $scratchloc
3786   1D6D DA            push d
3787   1D6E 26 17 2A      mov b, __s54 ; "\nWHERE TO: "
3788   1D71 FD AB         swp b
3789   1D73 D8            push b
3790   1D74 07 DA 14      call getnum
3791   1D77 51 02 00      add sp, 2
3792   1D7A             ; START TERMS
3793   1D7A D7            push a
3794   1D7B 11            mov a, b
3795   1D7C 26 01 00      mov b, $1
3796   1D7F 60            sub a, b
3797   1D80 27            mov b, a
3798   1D81 E4            pop a
3799   1D82             ; END TERMS
3800   1D82 E7            pop d
3801   1D83 FD 43         mov [d], b
3802   1D85             ;; if (scratchloc < 0 || scratchloc > 19) { 
3803   1D85             _if46_cond:
3804   1D85 FA FF FF      lea d, [bp + -1] ; $scratchloc
3805   1D88 2A            mov b, [d]
3806   1D89             ; START RELATIONAL
3807   1D89 D7            push a
3808   1D8A 11            mov a, b
3809   1D8B 26 00 00      mov b, $0
3810   1D8E B0            cmp a, b
3811   1D8F FD 73         slt ; < 
3812   1D91 E4            pop a
3813   1D92             ; END RELATIONAL
3814   1D92 D7            push a
3815   1D93 11            mov a, b
3816   1D94 FA FF FF      lea d, [bp + -1] ; $scratchloc
3817   1D97 2A            mov b, [d]
3818   1D98             ; START RELATIONAL
3819   1D98 D7            push a
3820   1D99 11            mov a, b
3821   1D9A 26 13 00      mov b, $13
3822   1D9D B0            cmp a, b
3823   1D9E FD 7F         sgt ; >
3824   1DA0 E4            pop a
3825   1DA1             ; END RELATIONAL
3826   1DA1 FD A8         sor a, b ; ||
3827   1DA3 E4            pop a
3828   1DA4 C0 00 00      cmp b, 0
3829   1DA7 C6 BC 1D      je _if46_exit
3830   1DAA             _if46_true:
3831   1DAA             ;; scratchloc = -1; 
3832   1DAA FA FF FF      lea d, [bp + -1] ; $scratchloc
3833   1DAD DA            push d
3834   1DAE 26 01 00      mov b, $1
3835   1DB1 FD 97         neg b
3836   1DB3 E7            pop d
3837   1DB4 FD 43         mov [d], b
3838   1DB6             ;; continue; 
3839   1DB6 0A 55 1D      jmp _while45_cond ; while continue
3840   1DB9 0A BC 1D      jmp _if46_exit
3841   1DBC             _if46_exit:
3842   1DBC             ;; if ((cave[loc[ 0  ]][0] != scratchloc) & 
3843   1DBC             _if47_cond:
3844   1DBC 3B A5 22      mov d, _cave_data ; $cave
3845   1DBF D7            push a
3846   1DC0 DA            push d
3847   1DC1 3B 97 22      mov d, _loc_data ; $loc
3848   1DC4 D7            push a
3849   1DC5 DA            push d
3850   1DC6 26 00 00      mov b, $0
3851   1DC9 E7            pop d
3852   1DCA FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3853   1DCE E4            pop a
3854   1DCF 2A            mov b, [d]
3855   1DD0 E7            pop d
3856   1DD1 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
3857   1DD5 DA            push d
3858   1DD6 26 00 00      mov b, $0
3859   1DD9 E7            pop d
3860   1DDA FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3861   1DDE E4            pop a
3862   1DDF 2A            mov b, [d]
3863   1DE0             ; START RELATIONAL
3864   1DE0 D7            push a
3865   1DE1 11            mov a, b
3866   1DE2 FA FF FF      lea d, [bp + -1] ; $scratchloc
3867   1DE5 2A            mov b, [d]
3868   1DE6 B0            cmp a, b
3869   1DE7 FD 72         sneq ; !=
3870   1DE9 E4            pop a
3871   1DEA             ; END RELATIONAL
3872   1DEA D7            push a
3873   1DEB 11            mov a, b
3874   1DEC 3B A5 22      mov d, _cave_data ; $cave
3875   1DEF D7            push a
3876   1DF0 DA            push d
3877   1DF1 3B 97 22      mov d, _loc_data ; $loc
3878   1DF4 D7            push a
3879   1DF5 DA            push d
3880   1DF6 26 00 00      mov b, $0
3881   1DF9 E7            pop d
3882   1DFA FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3883   1DFE E4            pop a
3884   1DFF 2A            mov b, [d]
3885   1E00 E7            pop d
3886   1E01 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
3887   1E05 DA            push d
3888   1E06 26 01 00      mov b, $1
3889   1E09 E7            pop d
3890   1E0A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3891   1E0E E4            pop a
3892   1E0F 2A            mov b, [d]
3893   1E10             ; START RELATIONAL
3894   1E10 D7            push a
3895   1E11 11            mov a, b
3896   1E12 FA FF FF      lea d, [bp + -1] ; $scratchloc
3897   1E15 2A            mov b, [d]
3898   1E16 B0            cmp a, b
3899   1E17 FD 72         sneq ; !=
3900   1E19 E4            pop a
3901   1E1A             ; END RELATIONAL
3902   1E1A 86            and a, b ; &
3903   1E1B 3B A5 22      mov d, _cave_data ; $cave
3904   1E1E D7            push a
3905   1E1F DA            push d
3906   1E20 3B 97 22      mov d, _loc_data ; $loc
3907   1E23 D7            push a
3908   1E24 DA            push d
3909   1E25 26 00 00      mov b, $0
3910   1E28 E7            pop d
3911   1E29 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3912   1E2D E4            pop a
3913   1E2E 2A            mov b, [d]
3914   1E2F E7            pop d
3915   1E30 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
3916   1E34 DA            push d
3917   1E35 26 02 00      mov b, $2
3918   1E38 E7            pop d
3919   1E39 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3920   1E3D E4            pop a
3921   1E3E 2A            mov b, [d]
3922   1E3F             ; START RELATIONAL
3923   1E3F D7            push a
3924   1E40 11            mov a, b
3925   1E41 FA FF FF      lea d, [bp + -1] ; $scratchloc
3926   1E44 2A            mov b, [d]
3927   1E45 B0            cmp a, b
3928   1E46 FD 72         sneq ; !=
3929   1E48 E4            pop a
3930   1E49             ; END RELATIONAL
3931   1E49 86            and a, b ; &
3932   1E4A 3B 97 22      mov d, _loc_data ; $loc
3933   1E4D D7            push a
3934   1E4E DA            push d
3935   1E4F 26 00 00      mov b, $0
3936   1E52 E7            pop d
3937   1E53 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3938   1E57 E4            pop a
3939   1E58 2A            mov b, [d]
3940   1E59             ; START RELATIONAL
3941   1E59 D7            push a
3942   1E5A 11            mov a, b
3943   1E5B FA FF FF      lea d, [bp + -1] ; $scratchloc
3944   1E5E 2A            mov b, [d]
3945   1E5F B0            cmp a, b
3946   1E60 FD 72         sneq ; !=
3947   1E62 E4            pop a
3948   1E63             ; END RELATIONAL
3949   1E63 86            and a, b ; &
3950   1E64 27            mov b, a
3951   1E65 E4            pop a
3952   1E66 C0 00 00      cmp b, 0
3953   1E69 C6 8A 1E      je _if47_exit
3954   1E6C             _if47_true:
3955   1E6C             ;; print("NOT POSSIBLE\n"); 
3956   1E6C 26 23 2A      mov b, __s55 ; "NOT POSSIBLE\n"
3957   1E6F FD AB         swp b
3958   1E71 D8            push b
3959   1E72 07 65 0C      call print
3960   1E75 51 02 00      add sp, 2
3961   1E78             ;; scratchloc = -1; 
3962   1E78 FA FF FF      lea d, [bp + -1] ; $scratchloc
3963   1E7B DA            push d
3964   1E7C 26 01 00      mov b, $1
3965   1E7F FD 97         neg b
3966   1E81 E7            pop d
3967   1E82 FD 43         mov [d], b
3968   1E84             ;; continue; 
3969   1E84 0A 55 1D      jmp _while45_cond ; while continue
3970   1E87 0A 8A 1E      jmp _if47_exit
3971   1E8A             _if47_exit:
3972   1E8A 0A 55 1D      jmp _while45_cond
3973   1E8D             _while45_exit:
3974   1E8D             ;; loc[ 0  ] = scratchloc; 
3975   1E8D 3B 97 22      mov d, _loc_data ; $loc
3976   1E90 D7            push a
3977   1E91 DA            push d
3978   1E92 26 00 00      mov b, $0
3979   1E95 E7            pop d
3980   1E96 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3981   1E9A E4            pop a
3982   1E9B DA            push d
3983   1E9C FA FF FF      lea d, [bp + -1] ; $scratchloc
3984   1E9F 2A            mov b, [d]
3985   1EA0 E7            pop d
3986   1EA1 FD 43         mov [d], b
3987   1EA3             ;; while ((scratchloc == loc[ 4    ]) || (scratchloc == loc[ 5    ])) { 
3988   1EA3             _while48_cond:
3989   1EA3 FA FF FF      lea d, [bp + -1] ; $scratchloc
3990   1EA6 2A            mov b, [d]
3991   1EA7             ; START RELATIONAL
3992   1EA7 D7            push a
3993   1EA8 11            mov a, b
3994   1EA9 3B 97 22      mov d, _loc_data ; $loc
3995   1EAC D7            push a
3996   1EAD DA            push d
3997   1EAE 26 04 00      mov b, $4
3998   1EB1 E7            pop d
3999   1EB2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4000   1EB6 E4            pop a
4001   1EB7 2A            mov b, [d]
4002   1EB8 B0            cmp a, b
4003   1EB9 FD 71         seq ; ==
4004   1EBB E4            pop a
4005   1EBC             ; END RELATIONAL
4006   1EBC D7            push a
4007   1EBD 11            mov a, b
4008   1EBE FA FF FF      lea d, [bp + -1] ; $scratchloc
4009   1EC1 2A            mov b, [d]
4010   1EC2             ; START RELATIONAL
4011   1EC2 D7            push a
4012   1EC3 11            mov a, b
4013   1EC4 3B 97 22      mov d, _loc_data ; $loc
4014   1EC7 D7            push a
4015   1EC8 DA            push d
4016   1EC9 26 05 00      mov b, $5
4017   1ECC E7            pop d
4018   1ECD FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4019   1ED1 E4            pop a
4020   1ED2 2A            mov b, [d]
4021   1ED3 B0            cmp a, b
4022   1ED4 FD 71         seq ; ==
4023   1ED6 E4            pop a
4024   1ED7             ; END RELATIONAL
4025   1ED7 FD A8         sor a, b ; ||
4026   1ED9 E4            pop a
4027   1EDA C0 00 00      cmp b, 0
4028   1EDD C6 14 1F      je _while48_exit
4029   1EE0             _while48_block:
4030   1EE0             ;; print("ZAP--SUPER BAT SNATCH! ELSEWHEREVILLE FOR YOU!\n"); 
4031   1EE0 26 31 2A      mov b, __s56 ; "ZAP--SUPER BAT SNATCH! ELSEWHEREVILLE FOR YOU!\n"
4032   1EE3 FD AB         swp b
4033   1EE5 D8            push b
4034   1EE6 07 65 0C      call print
4035   1EE9 51 02 00      add sp, 2
4036   1EEC             ;; scratchloc = loc[ 0  ] = rand2()%20; 
4037   1EEC FA FF FF      lea d, [bp + -1] ; $scratchloc
4038   1EEF DA            push d
4039   1EF0 3B 97 22      mov d, _loc_data ; $loc
4040   1EF3 D7            push a
4041   1EF4 DA            push d
4042   1EF5 26 00 00      mov b, $0
4043   1EF8 E7            pop d
4044   1EF9 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4045   1EFD E4            pop a
4046   1EFE DA            push d
4047   1EFF 07 9D 1F      call rand2
4048   1F02             ; START FACTORS
4049   1F02 D7            push a
4050   1F03 11            mov a, b
4051   1F04 26 14 00      mov b, $14
4052   1F07 AE            div a, b ; 
4053   1F08 11            mov a, b
4054   1F09 27            mov b, a
4055   1F0A E4            pop a
4056   1F0B             ; END FACTORS
4057   1F0B E7            pop d
4058   1F0C FD 43         mov [d], b
4059   1F0E E7            pop d
4060   1F0F FD 43         mov [d], b
4061   1F11 0A A3 1E      jmp _while48_cond
4062   1F14             _while48_exit:
4063   1F14             ;; if (scratchloc == loc[ 1     ]) { 
4064   1F14             _if49_cond:
4065   1F14 FA FF FF      lea d, [bp + -1] ; $scratchloc
4066   1F17 2A            mov b, [d]
4067   1F18             ; START RELATIONAL
4068   1F18 D7            push a
4069   1F19 11            mov a, b
4070   1F1A 3B 97 22      mov d, _loc_data ; $loc
4071   1F1D D7            push a
4072   1F1E DA            push d
4073   1F1F 26 01 00      mov b, $1
4074   1F22 E7            pop d
4075   1F23 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4076   1F27 E4            pop a
4077   1F28 2A            mov b, [d]
4078   1F29 B0            cmp a, b
4079   1F2A FD 71         seq ; ==
4080   1F2C E4            pop a
4081   1F2D             ; END RELATIONAL
4082   1F2D C0 00 00      cmp b, 0
4083   1F30 C6 45 1F      je _if49_exit
4084   1F33             _if49_true:
4085   1F33             ;; print("... OOPS! BUMPED A WUMPUS!\n"); 
4086   1F33 26 61 2A      mov b, __s57 ; "... OOPS! BUMPED A WUMPUS!\n"
4087   1F36 FD AB         swp b
4088   1F38 D8            push b
4089   1F39 07 65 0C      call print
4090   1F3C 51 02 00      add sp, 2
4091   1F3F             ;; move_wumpus(); 
4092   1F3F 07 A8 19      call move_wumpus
4093   1F42 0A 45 1F      jmp _if49_exit
4094   1F45             _if49_exit:
4095   1F45             ;; if (scratchloc == loc[ 2   ] || scratchloc == loc[ 3   ]) { 
4096   1F45             _if50_cond:
4097   1F45 FA FF FF      lea d, [bp + -1] ; $scratchloc
4098   1F48 2A            mov b, [d]
4099   1F49             ; START RELATIONAL
4100   1F49 D7            push a
4101   1F4A 11            mov a, b
4102   1F4B 3B 97 22      mov d, _loc_data ; $loc
4103   1F4E D7            push a
4104   1F4F DA            push d
4105   1F50 26 02 00      mov b, $2
4106   1F53 E7            pop d
4107   1F54 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4108   1F58 E4            pop a
4109   1F59 2A            mov b, [d]
4110   1F5A B0            cmp a, b
4111   1F5B FD 71         seq ; ==
4112   1F5D E4            pop a
4113   1F5E             ; END RELATIONAL
4114   1F5E D7            push a
4115   1F5F 11            mov a, b
4116   1F60 FA FF FF      lea d, [bp + -1] ; $scratchloc
4117   1F63 2A            mov b, [d]
4118   1F64             ; START RELATIONAL
4119   1F64 D7            push a
4120   1F65 11            mov a, b
4121   1F66 3B 97 22      mov d, _loc_data ; $loc
4122   1F69 D7            push a
4123   1F6A DA            push d
4124   1F6B 26 03 00      mov b, $3
4125   1F6E E7            pop d
4126   1F6F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4127   1F73 E4            pop a
4128   1F74 2A            mov b, [d]
4129   1F75 B0            cmp a, b
4130   1F76 FD 71         seq ; ==
4131   1F78 E4            pop a
4132   1F79             ; END RELATIONAL
4133   1F79 FD A8         sor a, b ; ||
4134   1F7B E4            pop a
4135   1F7C C0 00 00      cmp b, 0
4136   1F7F C6 9B 1F      je _if50_exit
4137   1F82             _if50_true:
4138   1F82             ;; print("YYYYIIIIEEEE . . . FELL IN PIT\n"); 
4139   1F82 26 7D 2A      mov b, __s58 ; "YYYYIIIIEEEE . . . FELL IN PIT\n"
4140   1F85 FD AB         swp b
4141   1F87 D8            push b
4142   1F88 07 65 0C      call print
4143   1F8B 51 02 00      add sp, 2
4144   1F8E             ;; finished =  2   ; 
4145   1F8E 3B A3 22      mov d, _finished ; $finished
4146   1F91 DA            push d
4147   1F92 26 02 00      mov b, $2
4148   1F95 E7            pop d
4149   1F96 FD 43         mov [d], b
4150   1F98 0A 9B 1F      jmp _if50_exit
4151   1F9B             _if50_exit:
4152   1F9B F9            leave
4153   1F9C 09            ret
4154   1F9D             
4155   1F9D             rand2:
4156   1F9D F8 00 00      enter 0 ; (push bp; mov bp, sp)
4157   1FA0             ;; rand_val=rand_val+rand_inc; 
4158   1FA0 3B 93 22      mov d, _rand_val ; $rand_val
4159   1FA3 DA            push d
4160   1FA4 3B 93 22      mov d, _rand_val ; $rand_val
4161   1FA7 2A            mov b, [d]
4162   1FA8             ; START TERMS
4163   1FA8 D7            push a
4164   1FA9 11            mov a, b
4165   1FAA 3B 95 22      mov d, _rand_inc ; $rand_inc
4166   1FAD 2A            mov b, [d]
4167   1FAE 54            add a, b
4168   1FAF 27            mov b, a
4169   1FB0 E4            pop a
4170   1FB1             ; END TERMS
4171   1FB1 E7            pop d
4172   1FB2 FD 43         mov [d], b
4173   1FB4             ;; rand_inc++; 
4174   1FB4 3B 95 22      mov d, _rand_inc ; $rand_inc
4175   1FB7 2A            mov b, [d]
4176   1FB8 FD 79         mov g, b
4177   1FBA FD 77         inc b
4178   1FBC 3B 95 22      mov d, _rand_inc ; $rand_inc
4179   1FBF FD 43         mov [d], b
4180   1FC1 FD 27         mov b, g
4181   1FC3             ;; return rand_val; 
4182   1FC3 3B 93 22      mov d, _rand_val ; $rand_val
4183   1FC6 2A            mov b, [d]
4184   1FC7 F9            leave
4185   1FC8 09            ret
4186   1FC9             
4187   1FC9             game_setup:
4188   1FC9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4189   1FCC             ; $j 
4190   1FCC             ; $k 
4191   1FCC             ; $v 
4192   1FCC 52 06 00      sub sp, 6
4193   1FCF             ;; for (j = 0; j <  6   ; j++) { 
4194   1FCF             _for51_init:
4195   1FCF FA FF FF      lea d, [bp + -1] ; $j
4196   1FD2 DA            push d
4197   1FD3 26 00 00      mov b, $0
4198   1FD6 E7            pop d
4199   1FD7 FD 43         mov [d], b
4200   1FD9             _for51_cond:
4201   1FD9 FA FF FF      lea d, [bp + -1] ; $j
4202   1FDC 2A            mov b, [d]
4203   1FDD             ; START RELATIONAL
4204   1FDD D7            push a
4205   1FDE 11            mov a, b
4206   1FDF 26 06 00      mov b, $6
4207   1FE2 B0            cmp a, b
4208   1FE3 FD 73         slt ; < 
4209   1FE5 E4            pop a
4210   1FE6             ; END RELATIONAL
4211   1FE6 C0 00 00      cmp b, 0
4212   1FE9 C6 E1 20      je _for51_exit
4213   1FEC             _for51_block:
4214   1FEC             ;; loc[j] = -1; 
4215   1FEC 3B 97 22      mov d, _loc_data ; $loc
4216   1FEF D7            push a
4217   1FF0 DA            push d
4218   1FF1 FA FF FF      lea d, [bp + -1] ; $j
4219   1FF4 2A            mov b, [d]
4220   1FF5 E7            pop d
4221   1FF6 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4222   1FFA E4            pop a
4223   1FFB DA            push d
4224   1FFC 26 01 00      mov b, $1
4225   1FFF FD 97         neg b
4226   2001 E7            pop d
4227   2002 FD 43         mov [d], b
4228   2004             ;; while (loc[j] < 0) { 
4229   2004             _while52_cond:
4230   2004 3B 97 22      mov d, _loc_data ; $loc
4231   2007 D7            push a
4232   2008 DA            push d
4233   2009 FA FF FF      lea d, [bp + -1] ; $j
4234   200C 2A            mov b, [d]
4235   200D E7            pop d
4236   200E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4237   2012 E4            pop a
4238   2013 2A            mov b, [d]
4239   2014             ; START RELATIONAL
4240   2014 D7            push a
4241   2015 11            mov a, b
4242   2016 26 00 00      mov b, $0
4243   2019 B0            cmp a, b
4244   201A FD 73         slt ; < 
4245   201C E4            pop a
4246   201D             ; END RELATIONAL
4247   201D C0 00 00      cmp b, 0
4248   2020 C6 CF 20      je _while52_exit
4249   2023             _while52_block:
4250   2023             ;; v = rand2(); 
4251   2023 FA FB FF      lea d, [bp + -5] ; $v
4252   2026 DA            push d
4253   2027 07 9D 1F      call rand2
4254   202A E7            pop d
4255   202B FD 43         mov [d], b
4256   202D             ;; loc[j] = v % 20; 
4257   202D 3B 97 22      mov d, _loc_data ; $loc
4258   2030 D7            push a
4259   2031 DA            push d
4260   2032 FA FF FF      lea d, [bp + -1] ; $j
4261   2035 2A            mov b, [d]
4262   2036 E7            pop d
4263   2037 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4264   203B E4            pop a
4265   203C DA            push d
4266   203D FA FB FF      lea d, [bp + -5] ; $v
4267   2040 2A            mov b, [d]
4268   2041             ; START FACTORS
4269   2041 D7            push a
4270   2042 11            mov a, b
4271   2043 26 14 00      mov b, $14
4272   2046 AE            div a, b ; 
4273   2047 11            mov a, b
4274   2048 27            mov b, a
4275   2049 E4            pop a
4276   204A             ; END FACTORS
4277   204A E7            pop d
4278   204B FD 43         mov [d], b
4279   204D             ;; for (k=0; k<j-1; k++) { 
4280   204D             _for53_init:
4281   204D FA FD FF      lea d, [bp + -3] ; $k
4282   2050 DA            push d
4283   2051 26 00 00      mov b, $0
4284   2054 E7            pop d
4285   2055 FD 43         mov [d], b
4286   2057             _for53_cond:
4287   2057 FA FD FF      lea d, [bp + -3] ; $k
4288   205A 2A            mov b, [d]
4289   205B             ; START RELATIONAL
4290   205B D7            push a
4291   205C 11            mov a, b
4292   205D FA FF FF      lea d, [bp + -1] ; $j
4293   2060 2A            mov b, [d]
4294   2061             ; START TERMS
4295   2061 D7            push a
4296   2062 11            mov a, b
4297   2063 26 01 00      mov b, $1
4298   2066 60            sub a, b
4299   2067 27            mov b, a
4300   2068 E4            pop a
4301   2069             ; END TERMS
4302   2069 B0            cmp a, b
4303   206A FD 73         slt ; < 
4304   206C E4            pop a
4305   206D             ; END RELATIONAL
4306   206D C0 00 00      cmp b, 0
4307   2070 C6 CC 20      je _for53_exit
4308   2073             _for53_block:
4309   2073             ;; if (loc[j] == loc[k]) { 
4310   2073             _if54_cond:
4311   2073 3B 97 22      mov d, _loc_data ; $loc
4312   2076 D7            push a
4313   2077 DA            push d
4314   2078 FA FF FF      lea d, [bp + -1] ; $j
4315   207B 2A            mov b, [d]
4316   207C E7            pop d
4317   207D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4318   2081 E4            pop a
4319   2082 2A            mov b, [d]
4320   2083             ; START RELATIONAL
4321   2083 D7            push a
4322   2084 11            mov a, b
4323   2085 3B 97 22      mov d, _loc_data ; $loc
4324   2088 D7            push a
4325   2089 DA            push d
4326   208A FA FD FF      lea d, [bp + -3] ; $k
4327   208D 2A            mov b, [d]
4328   208E E7            pop d
4329   208F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4330   2093 E4            pop a
4331   2094 2A            mov b, [d]
4332   2095 B0            cmp a, b
4333   2096 FD 71         seq ; ==
4334   2098 E4            pop a
4335   2099             ; END RELATIONAL
4336   2099 C0 00 00      cmp b, 0
4337   209C C6 BA 20      je _if54_exit
4338   209F             _if54_true:
4339   209F             ;; loc[j] = -1; 
4340   209F 3B 97 22      mov d, _loc_data ; $loc
4341   20A2 D7            push a
4342   20A3 DA            push d
4343   20A4 FA FF FF      lea d, [bp + -1] ; $j
4344   20A7 2A            mov b, [d]
4345   20A8 E7            pop d
4346   20A9 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4347   20AD E4            pop a
4348   20AE DA            push d
4349   20AF 26 01 00      mov b, $1
4350   20B2 FD 97         neg b
4351   20B4 E7            pop d
4352   20B5 FD 43         mov [d], b
4353   20B7 0A BA 20      jmp _if54_exit
4354   20BA             _if54_exit:
4355   20BA             _for53_update:
4356   20BA FA FD FF      lea d, [bp + -3] ; $k
4357   20BD 2A            mov b, [d]
4358   20BE FD 79         mov g, b
4359   20C0 FD 77         inc b
4360   20C2 FA FD FF      lea d, [bp + -3] ; $k
4361   20C5 FD 43         mov [d], b
4362   20C7 FD 27         mov b, g
4363   20C9 0A 57 20      jmp _for53_cond
4364   20CC             _for53_exit:
4365   20CC 0A 04 20      jmp _while52_cond
4366   20CF             _while52_exit:
4367   20CF             _for51_update:
4368   20CF FA FF FF      lea d, [bp + -1] ; $j
4369   20D2 2A            mov b, [d]
4370   20D3 FD 79         mov g, b
4371   20D5 FD 77         inc b
4372   20D7 FA FF FF      lea d, [bp + -1] ; $j
4373   20DA FD 43         mov [d], b
4374   20DC FD 27         mov b, g
4375   20DE 0A D9 1F      jmp _for51_cond
4376   20E1             _for51_exit:
4377   20E1 F9            leave
4378   20E2 09            ret
4379   20E3             
4380   20E3             game_play:
4381   20E3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4382   20E6             ; $c 
4383   20E6 52 02 00      sub sp, 2
4384   20E9             ;; arrows = 5; 
4385   20E9 3B 8F 22      mov d, _arrows ; $arrows
4386   20EC DA            push d
4387   20ED 26 05 00      mov b, $5
4388   20F0 E7            pop d
4389   20F1 FD 43         mov [d], b
4390   20F3             ;; print("HUNT THE WUMPUS\n"); 
4391   20F3 26 9D 2A      mov b, __s59 ; "HUNT THE WUMPUS\n"
4392   20F6 FD AB         swp b
4393   20F8 D8            push b
4394   20F9 07 65 0C      call print
4395   20FC 51 02 00      add sp, 2
4396   20FF             ;; if (debug) { 
4397   20FF             _if55_cond:
4398   20FF 3B 91 22      mov d, _debug ; $debug
4399   2102 2A            mov b, [d]
4400   2103 C0 00 00      cmp b, 0
4401   2106 C6 E8 21      je _if55_exit
4402   2109             _if55_true:
4403   2109             ;; print("Wumpus is at "); printu(loc[ 1     ]+1); 
4404   2109 26 AE 2A      mov b, __s60 ; "Wumpus is at "
4405   210C FD AB         swp b
4406   210E D8            push b
4407   210F 07 65 0C      call print
4408   2112 51 02 00      add sp, 2
4409   2115             ;; printu(loc[ 1     ]+1); 
4410   2115 3B 97 22      mov d, _loc_data ; $loc
4411   2118 D7            push a
4412   2119 DA            push d
4413   211A 26 01 00      mov b, $1
4414   211D E7            pop d
4415   211E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4416   2122 E4            pop a
4417   2123 2A            mov b, [d]
4418   2124             ; START TERMS
4419   2124 D7            push a
4420   2125 11            mov a, b
4421   2126 26 01 00      mov b, $1
4422   2129 54            add a, b
4423   212A 27            mov b, a
4424   212B E4            pop a
4425   212C             ; END TERMS
4426   212C FD AB         swp b
4427   212E D8            push b
4428   212F 07 31 0B      call printu
4429   2132 51 02 00      add sp, 2
4430   2135             ;; print(", pits at "); printu(loc[ 2   ]+1); 
4431   2135 26 BC 2A      mov b, __s61 ; ", pits at "
4432   2138 FD AB         swp b
4433   213A D8            push b
4434   213B 07 65 0C      call print
4435   213E 51 02 00      add sp, 2
4436   2141             ;; printu(loc[ 2   ]+1); 
4437   2141 3B 97 22      mov d, _loc_data ; $loc
4438   2144 D7            push a
4439   2145 DA            push d
4440   2146 26 02 00      mov b, $2
4441   2149 E7            pop d
4442   214A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4443   214E E4            pop a
4444   214F 2A            mov b, [d]
4445   2150             ; START TERMS
4446   2150 D7            push a
4447   2151 11            mov a, b
4448   2152 26 01 00      mov b, $1
4449   2155 54            add a, b
4450   2156 27            mov b, a
4451   2157 E4            pop a
4452   2158             ; END TERMS
4453   2158 FD AB         swp b
4454   215A D8            push b
4455   215B 07 31 0B      call printu
4456   215E 51 02 00      add sp, 2
4457   2161             ;; print(" & "); printu(loc[ 3   ]+1); 
4458   2161 26 C7 2A      mov b, __s62 ; " & "
4459   2164 FD AB         swp b
4460   2166 D8            push b
4461   2167 07 65 0C      call print
4462   216A 51 02 00      add sp, 2
4463   216D             ;; printu(loc[ 3   ]+1); 
4464   216D 3B 97 22      mov d, _loc_data ; $loc
4465   2170 D7            push a
4466   2171 DA            push d
4467   2172 26 03 00      mov b, $3
4468   2175 E7            pop d
4469   2176 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4470   217A E4            pop a
4471   217B 2A            mov b, [d]
4472   217C             ; START TERMS
4473   217C D7            push a
4474   217D 11            mov a, b
4475   217E 26 01 00      mov b, $1
4476   2181 54            add a, b
4477   2182 27            mov b, a
4478   2183 E4            pop a
4479   2184             ; END TERMS
4480   2184 FD AB         swp b
4481   2186 D8            push b
4482   2187 07 31 0B      call printu
4483   218A 51 02 00      add sp, 2
4484   218D             ;; print(", bats at "); printu(loc[ 4    ]+1); 
4485   218D 26 CB 2A      mov b, __s63 ; ", bats at "
4486   2190 FD AB         swp b
4487   2192 D8            push b
4488   2193 07 65 0C      call print
4489   2196 51 02 00      add sp, 2
4490   2199             ;; printu(loc[ 4    ]+1); 
4491   2199 3B 97 22      mov d, _loc_data ; $loc
4492   219C D7            push a
4493   219D DA            push d
4494   219E 26 04 00      mov b, $4
4495   21A1 E7            pop d
4496   21A2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4497   21A6 E4            pop a
4498   21A7 2A            mov b, [d]
4499   21A8             ; START TERMS
4500   21A8 D7            push a
4501   21A9 11            mov a, b
4502   21AA 26 01 00      mov b, $1
4503   21AD 54            add a, b
4504   21AE 27            mov b, a
4505   21AF E4            pop a
4506   21B0             ; END TERMS
4507   21B0 FD AB         swp b
4508   21B2 D8            push b
4509   21B3 07 31 0B      call printu
4510   21B6 51 02 00      add sp, 2
4511   21B9             ;; print(" & "); printu(loc[ 5    ]+1); 
4512   21B9 26 C7 2A      mov b, __s62 ; " & "
4513   21BC FD AB         swp b
4514   21BE D8            push b
4515   21BF 07 65 0C      call print
4516   21C2 51 02 00      add sp, 2
4517   21C5             ;; printu(loc[ 5    ]+1); 
4518   21C5 3B 97 22      mov d, _loc_data ; $loc
4519   21C8 D7            push a
4520   21C9 DA            push d
4521   21CA 26 05 00      mov b, $5
4522   21CD E7            pop d
4523   21CE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4524   21D2 E4            pop a
4525   21D3 2A            mov b, [d]
4526   21D4             ; START TERMS
4527   21D4 D7            push a
4528   21D5 11            mov a, b
4529   21D6 26 01 00      mov b, $1
4530   21D9 54            add a, b
4531   21DA 27            mov b, a
4532   21DB E4            pop a
4533   21DC             ; END TERMS
4534   21DC FD AB         swp b
4535   21DE D8            push b
4536   21DF 07 31 0B      call printu
4537   21E2 51 02 00      add sp, 2
4538   21E5 0A E8 21      jmp _if55_exit
4539   21E8             _if55_exit:
4540   21E8             ;; finished =  0  ; 
4541   21E8 3B A3 22      mov d, _finished ; $finished
4542   21EB DA            push d
4543   21EC 26 00 00      mov b, $0
4544   21EF E7            pop d
4545   21F0 FD 43         mov [d], b
4546   21F2             ;; while (finished ==  0  ) { 
4547   21F2             _while56_cond:
4548   21F2 3B A3 22      mov d, _finished ; $finished
4549   21F5 2A            mov b, [d]
4550   21F6             ; START RELATIONAL
4551   21F6 D7            push a
4552   21F7 11            mov a, b
4553   21F8 26 00 00      mov b, $0
4554   21FB B0            cmp a, b
4555   21FC FD 71         seq ; ==
4556   21FE E4            pop a
4557   21FF             ; END RELATIONAL
4558   21FF C0 00 00      cmp b, 0
4559   2202 C6 1D 22      je _while56_exit
4560   2205             _while56_block:
4561   2205             ;; show_room(); 
4562   2205 07 07 17      call show_room
4563   2208             ;; if (move_or_shoot()) { 
4564   2208             _if57_cond:
4565   2208 07 43 19      call move_or_shoot
4566   220B C0 00 00      cmp b, 0
4567   220E C6 17 22      je _if57_else
4568   2211             _if57_true:
4569   2211             ;; shoot(); 
4570   2211 07 53 1A      call shoot
4571   2214 0A 1A 22      jmp _if57_exit
4572   2217             _if57_else:
4573   2217             ;; move(); 
4574   2217 07 43 1D      call move
4575   221A             _if57_exit:
4576   221A 0A F2 21      jmp _while56_cond
4577   221D             _while56_exit:
4578   221D             ;; if (finished ==  1  ) { 
4579   221D             _if58_cond:
4580   221D 3B A3 22      mov d, _finished ; $finished
4581   2220 2A            mov b, [d]
4582   2221             ; START RELATIONAL
4583   2221 D7            push a
4584   2222 11            mov a, b
4585   2223 26 01 00      mov b, $1
4586   2226 B0            cmp a, b
4587   2227 FD 71         seq ; ==
4588   2229 E4            pop a
4589   222A             ; END RELATIONAL
4590   222A C0 00 00      cmp b, 0
4591   222D C6 3F 22      je _if58_exit
4592   2230             _if58_true:
4593   2230             ;; print("HEE HEE HEE - THE WUMPUS'LL GET YOU NEXT TIME!!\n"); 
4594   2230 26 D6 2A      mov b, __s64 ; "HEE HEE HEE - THE WUMPUS'LL GET YOU NEXT TIME!!\n"
4595   2233 FD AB         swp b
4596   2235 D8            push b
4597   2236 07 65 0C      call print
4598   2239 51 02 00      add sp, 2
4599   223C 0A 3F 22      jmp _if58_exit
4600   223F             _if58_exit:
4601   223F             ;; if (finished ==  2   ) { 
4602   223F             _if59_cond:
4603   223F 3B A3 22      mov d, _finished ; $finished
4604   2242 2A            mov b, [d]
4605   2243             ; START RELATIONAL
4606   2243 D7            push a
4607   2244 11            mov a, b
4608   2245 26 02 00      mov b, $2
4609   2248 B0            cmp a, b
4610   2249 FD 71         seq ; ==
4611   224B E4            pop a
4612   224C             ; END RELATIONAL
4613   224C C0 00 00      cmp b, 0
4614   224F C6 61 22      je _if59_exit
4615   2252             _if59_true:
4616   2252             ;; print("HA HA HA - YOU LOSE!\n"); 
4617   2252 26 06 2B      mov b, __s65 ; "HA HA HA - YOU LOSE!\n"
4618   2255 FD AB         swp b
4619   2257 D8            push b
4620   2258 07 65 0C      call print
4621   225B 51 02 00      add sp, 2
4622   225E 0A 61 22      jmp _if59_exit
4623   2261             _if59_exit:
4624   2261             ;; c = getlet("NEW GAME (Y-N): "); 
4625   2261 FA FF FF      lea d, [bp + -1] ; $c
4626   2264 DA            push d
4627   2265 26 3C 23      mov b, __s1 ; "NEW GAME (Y-N): "
4628   2268 FD AB         swp b
4629   226A D8            push b
4630   226B 07 FD 14      call getlet
4631   226E 51 02 00      add sp, 2
4632   2271 E7            pop d
4633   2272 FD 43         mov [d], b
4634   2274             ;; if (c == 'N') { 
4635   2274             _if60_cond:
4636   2274 FA FF FF      lea d, [bp + -1] ; $c
4637   2277 2A            mov b, [d]
4638   2278             ; START RELATIONAL
4639   2278 D7            push a
4640   2279 11            mov a, b
4641   227A 26 4E 00      mov b, $4e
4642   227D B0            cmp a, b
4643   227E FD 71         seq ; ==
4644   2280 E4            pop a
4645   2281             ; END RELATIONAL
4646   2281 C0 00 00      cmp b, 0
4647   2284 C6 8D 22      je _if60_exit
4648   2287             _if60_true:
4649   2287             ;; exit(); 
4650   2287 07 DF 0C      call exit
4651   228A 0A 8D 22      jmp _if60_exit
4652   228D             _if60_exit:
4653   228D F9            leave
4654   228E 09            ret
4655   228F             ; --- END TEXT BLOCK
4656   228F             
4657   228F             ; --- BEGIN DATA BLOCK
4658   228F 00 00       _arrows: .fill 2, 0
4659   2291 00 00       _debug: .dw 0
4660   2293 1D 00       _rand_val: .dw 29
4661   2295 01 00       _rand_inc: .dw 1
4662   2297 00 00 00 00 _loc_data: .fill 12, 0
4662   229B 00 00 00 00 
4662   229F 00 00 00 00 
4663   22A3 00 00       _finished: .fill 2, 0
4664   22A5             _cave_data: 
4665   22A5 00 00       .dw 
4666   22A7 01 00 04 00 .dw 1,4,7,0,2,9,1,3,11,2,4,13,0,3,5,4,6,14,5,7,16,0,6,8,7,9,17,1,8,10,
4666   22AB 07 00 00 00 
4666   22AF 02 00 09 00 
4666   22B3 01 00 03 00 
4666   22B7 0B 00 02 00 
4666   22BB 04 00 0D 00 
4666   22BF 00 00 03 00 
4666   22C3 05 00 04 00 
4666   22C7 06 00 0E 00 
4666   22CB 05 00 07 00 
4666   22CF 10 00 00 00 
4666   22D3 06 00 08 00 
4666   22D7 07 00 09 00 
4666   22DB 11 00 01 00 
4666   22DF 08 00 0A 00 
4667   22E3 00 00       .dw 
4668   22E5 00 00       .dw 
4669   22E7 09 00 0B 00 .dw 9,11,18,2,10,12,11,13,19,3,12,14,5,13,15,14,16,19,6,15,17,8,16,18,10,17,19,12,15,18,
4669   22EB 12 00 02 00 
4669   22EF 0A 00 0C 00 
4669   22F3 0B 00 0D 00 
4669   22F7 13 00 03 00 
4669   22FB 0C 00 0E 00 
4669   22FF 05 00 0D 00 
4669   2303 0F 00 0E 00 
4669   2307 10 00 13 00 
4669   230B 06 00 0F 00 
4669   230F 11 00 08 00 
4669   2313 10 00 12 00 
4669   2317 0A 00 11 00 
4669   231B 13 00 0C 00 
4669   231F 0F 00 12 00 
4670   2323 00 00       .dw 
4671   2325 00 00       .dw 
4672   2327 49 4E 53 54 __s0: .db "INSTRUCTIONS (Y-N): ", 0
4672   232B 52 55 43 54 
4672   232F 49 4F 4E 53 
4672   2333 20 28 59 2D 
4672   2337 4E 29 3A 20 
4672   233B 00 
4673   233C 4E 45 57 20 __s1: .db "NEW GAME (Y-N): ", 0
4673   2340 47 41 4D 45 
4673   2344 20 28 59 2D 
4673   2348 4E 29 3A 20 
4673   234C 00 
4674   234D 45 72 72 6F __s2: .db "Error: Unknown argument type.\n", 0
4674   2351 72 3A 20 55 
4674   2355 6E 6B 6E 6F 
4674   2359 77 6E 20 61 
4674   235D 72 67 75 6D 
4674   2361 65 6E 74 20 
4674   2365 74 79 70 65 
4674   2369 2E 0A 00 
4675   236C 1B 5B 32 4A __s3: .db "\033[2J\033[H", 0
4675   2370 1B 5B 48 00 
4676   2374 0A 00       __s4: .db "\n", 0
4677   2376 57 65 6C 63 __s5: .db "Welcome to 'hunt the wumpus'\n", 0
4677   237A 6F 6D 65 20 
4677   237E 74 6F 20 27 
4677   2382 68 75 6E 74 
4677   2386 20 74 68 65 
4677   238A 20 77 75 6D 
4677   238E 70 75 73 27 
4677   2392 0A 00 
4678   2394 54 68 65 20 __s6: .db "The wumpus lives in a cave of 20 rooms. Each room\n", 0
4678   2398 77 75 6D 70 
4678   239C 75 73 20 6C 
4678   23A0 69 76 65 73 
4678   23A4 20 69 6E 20 
4678   23A8 61 20 63 61 
4678   23AC 76 65 20 6F 
4678   23B0 66 20 32 30 
4678   23B4 20 72 6F 6F 
4678   23B8 6D 73 2E 20 
4678   23BC 45 61 63 68 
4678   23C0 20 72 6F 6F 
4678   23C4 6D 0A 00 
4679   23C7 68 61 73 20 __s7: .db "has 3 tunnels leading to other rooms.\n", 0
4679   23CB 33 20 74 75 
4679   23CF 6E 6E 65 6C 
4679   23D3 73 20 6C 65 
4679   23D7 61 64 69 6E 
4679   23DB 67 20 74 6F 
4679   23DF 20 6F 74 68 
4679   23E3 65 72 20 72 
4679   23E7 6F 6F 6D 73 
4679   23EB 2E 0A 00 
4680   23EE 4C 6F 6F 6B __s8: .db "Look at a dodecahedron to see how this works.\n", 0
4680   23F2 20 61 74 20 
4680   23F6 61 20 64 6F 
4680   23FA 64 65 63 61 
4680   23FE 68 65 64 72 
4680   2402 6F 6E 20 74 
4680   2406 6F 20 73 65 
4680   240A 65 20 68 6F 
4680   240E 77 20 74 68 
4680   2412 69 73 20 77 
4680   2416 6F 72 6B 73 
4680   241A 2E 0A 00 
4681   241D 20 48 61 7A __s9: .db " Hazards:\n", 0
4681   2421 61 72 64 73 
4681   2425 3A 0A 00 
4682   2428 20 42 6F 74 __s10: .db " Bottomless pits: Two rooms have bottomless pits in them\n", 0
4682   242C 74 6F 6D 6C 
4682   2430 65 73 73 20 
4682   2434 70 69 74 73 
4682   2438 3A 20 54 77 
4682   243C 6F 20 72 6F 
4682   2440 6F 6D 73 20 
4682   2444 68 61 76 65 
4682   2448 20 62 6F 74 
4682   244C 74 6F 6D 6C 
4682   2450 65 73 73 20 
4682   2454 70 69 74 73 
4682   2458 20 69 6E 20 
4682   245C 74 68 65 6D 
4682   2460 0A 00 
4683   2462 20 49 66 20 __s11: .db " If you go there, you fall into the pit (& lose!)\n", 0
4683   2466 79 6F 75 20 
4683   246A 67 6F 20 74 
4683   246E 68 65 72 65 
4683   2472 2C 20 79 6F 
4683   2476 75 20 66 61 
4683   247A 6C 6C 20 69 
4683   247E 6E 74 6F 20 
4683   2482 74 68 65 20 
4683   2486 70 69 74 20 
4683   248A 28 26 20 6C 
4683   248E 6F 73 65 21 
4683   2492 29 0A 00 
4684   2495 20 53 55 50 __s12: .db " SUPER BATS     : TWO OTHER ROOMS HAVE SUPER BATS. IF YOU\n", 0
4684   2499 45 52 20 42 
4684   249D 41 54 53 20 
4684   24A1 20 20 20 20 
4684   24A5 3A 20 54 57 
4684   24A9 4F 20 4F 54 
4684   24AD 48 45 52 20 
4684   24B1 52 4F 4F 4D 
4684   24B5 53 20 48 41 
4684   24B9 56 45 20 53 
4684   24BD 55 50 45 52 
4684   24C1 20 42 41 54 
4684   24C5 53 2E 20 49 
4684   24C9 46 20 59 4F 
4684   24CD 55 0A 00 
4685   24D0 20 47 4F 20 __s13: .db " GO THERE, A BAT GRABS YOU AND TAKES YOU TO SOME OTHER\n", 0
4685   24D4 54 48 45 52 
4685   24D8 45 2C 20 41 
4685   24DC 20 42 41 54 
4685   24E0 20 47 52 41 
4685   24E4 42 53 20 59 
4685   24E8 4F 55 20 41 
4685   24EC 4E 44 20 54 
4685   24F0 41 4B 45 53 
4685   24F4 20 59 4F 55 
4685   24F8 20 54 4F 20 
4685   24FC 53 4F 4D 45 
4685   2500 20 4F 54 48 
4685   2504 45 52 0A 00 
4686   2508 20 52 4F 4F __s14: .db " ROOM AT RANDOM. (WHICH MAY BE TROUBLESOME)\n\n", 0
4686   250C 4D 20 41 54 
4686   2510 20 52 41 4E 
4686   2514 44 4F 4D 2E 
4686   2518 20 28 57 48 
4686   251C 49 43 48 20 
4686   2520 4D 41 59 20 
4686   2524 42 45 20 54 
4686   2528 52 4F 55 42 
4686   252C 4C 45 53 4F 
4686   2530 4D 45 29 0A 
4686   2534 0A 00 
4687   2536 20 57 55 4D __s15: .db " WUMPUS:\n", 0
4687   253A 50 55 53 3A 
4687   253E 0A 00 
4688   2540 20 54 48 45 __s16: .db " THE WUMPUS IS NOT BOTHERED BY HAZARDS (HE HAS SUCKER\n", 0
4688   2544 20 57 55 4D 
4688   2548 50 55 53 20 
4688   254C 49 53 20 4E 
4688   2550 4F 54 20 42 
4688   2554 4F 54 48 45 
4688   2558 52 45 44 20 
4688   255C 42 59 20 48 
4688   2560 41 5A 41 52 
4688   2564 44 53 20 28 
4688   2568 48 45 20 48 
4688   256C 41 53 20 53 
4688   2570 55 43 4B 45 
4688   2574 52 0A 00 
4689   2577 20 46 45 45 __s17: .db " FEET AND IS TOO BIG FOR A BAT TO LIFT).  USUALLY\n", 0
4689   257B 54 20 41 4E 
4689   257F 44 20 49 53 
4689   2583 20 54 4F 4F 
4689   2587 20 42 49 47 
4689   258B 20 46 4F 52 
4689   258F 20 41 20 42 
4689   2593 41 54 20 54 
4689   2597 4F 20 4C 49 
4689   259B 46 54 29 2E 
4689   259F 20 20 55 53 
4689   25A3 55 41 4C 4C 
4689   25A7 59 0A 00 
4690   25AA 20 48 45 20 __s18: .db " HE IS ASLEEP.  TWO THINGS WAKE HIM UP: YOU SHOOTING AN\n", 0
4690   25AE 49 53 20 41 
4690   25B2 53 4C 45 45 
4690   25B6 50 2E 20 20 
4690   25BA 54 57 4F 20 
4690   25BE 54 48 49 4E 
4690   25C2 47 53 20 57 
4690   25C6 41 4B 45 20 
4690   25CA 48 49 4D 20 
4690   25CE 55 50 3A 20 
4690   25D2 59 4F 55 20 
4690   25D6 53 48 4F 4F 
4690   25DA 54 49 4E 47 
4690   25DE 20 41 4E 0A 
4690   25E2 00 
4691   25E3 20 41 52 52 __s19: .db " ARROW OR YOU ENTERING HIS ROOM.\n", 0
4691   25E7 4F 57 20 4F 
4691   25EB 52 20 59 4F 
4691   25EF 55 20 45 4E 
4691   25F3 54 45 52 49 
4691   25F7 4E 47 20 48 
4691   25FB 49 53 20 52 
4691   25FF 4F 4F 4D 2E 
4691   2603 0A 00 
4692   2605 20 49 46 20 __s20: .db " IF THE WUMPUS WAKES HE MOVES (P=.75) ONE ROOM\n", 0
4692   2609 54 48 45 20 
4692   260D 57 55 4D 50 
4692   2611 55 53 20 57 
4692   2615 41 4B 45 53 
4692   2619 20 48 45 20 
4692   261D 4D 4F 56 45 
4692   2621 53 20 28 50 
4692   2625 3D 2E 37 35 
4692   2629 29 20 4F 4E 
4692   262D 45 20 52 4F 
4692   2631 4F 4D 0A 00 
4693   2635 20 4F 52 20 __s21: .db " OR STAYS STILL (P=.25).  AFTER THAT, IF HE IS WHERE YOU\n", 0
4693   2639 53 54 41 59 
4693   263D 53 20 53 54 
4693   2641 49 4C 4C 20 
4693   2645 28 50 3D 2E 
4693   2649 32 35 29 2E 
4693   264D 20 20 41 46 
4693   2651 54 45 52 20 
4693   2655 54 48 41 54 
4693   2659 2C 20 49 46 
4693   265D 20 48 45 20 
4693   2661 49 53 20 57 
4693   2665 48 45 52 45 
4693   2669 20 59 4F 55 
4693   266D 0A 00 
4694   266F 20 41 52 45 __s22: .db " ARE, HE EATS YOU UP AND YOU LOSE!\n", 0
4694   2673 2C 20 48 45 
4694   2677 20 45 41 54 
4694   267B 53 20 59 4F 
4694   267F 55 20 55 50 
4694   2683 20 41 4E 44 
4694   2687 20 59 4F 55 
4694   268B 20 4C 4F 53 
4694   268F 45 21 0A 00 
4695   2693 20 59 4F 55 __s23: .db " YOU:\n", 0
4695   2697 3A 0A 00 
4696   269A 20 45 41 43 __s24: .db " EACH TURN YOU MAY MOVE OR SHOOT A CROOKED ARROW\n", 0
4696   269E 48 20 54 55 
4696   26A2 52 4E 20 59 
4696   26A6 4F 55 20 4D 
4696   26AA 41 59 20 4D 
4696   26AE 4F 56 45 20 
4696   26B2 4F 52 20 53 
4696   26B6 48 4F 4F 54 
4696   26BA 20 41 20 43 
4696   26BE 52 4F 4F 4B 
4696   26C2 45 44 20 41 
4696   26C6 52 52 4F 57 
4696   26CA 0A 00 
4697   26CC 20 4D 4F 56 __s25: .db " MOVING:  YOU CAN MOVE ONE ROOM (THRU ONE TUNNEL)\n", 0
4697   26D0 49 4E 47 3A 
4697   26D4 20 20 59 4F 
4697   26D8 55 20 43 41 
4697   26DC 4E 20 4D 4F 
4697   26E0 56 45 20 4F 
4697   26E4 4E 45 20 52 
4697   26E8 4F 4F 4D 20 
4697   26EC 28 54 48 52 
4697   26F0 55 20 4F 4E 
4697   26F4 45 20 54 55 
4697   26F8 4E 4E 45 4C 
4697   26FC 29 0A 00 
4698   26FF 20 41 52 52 __s26: .db " ARROWS:  YOU HAVE 5 ARROWS.  YOU LOSE WHEN YOU RUN OUT\n", 0
4698   2703 4F 57 53 3A 
4698   2707 20 20 59 4F 
4698   270B 55 20 48 41 
4698   270F 56 45 20 35 
4698   2713 20 41 52 52 
4698   2717 4F 57 53 2E 
4698   271B 20 20 59 4F 
4698   271F 55 20 4C 4F 
4698   2723 53 45 20 57 
4698   2727 48 45 4E 20 
4698   272B 59 4F 55 20 
4698   272F 52 55 4E 20 
4698   2733 4F 55 54 0A 
4698   2737 00 
4699   2738 20 45 41 43 __s27: .db " EACH ARROW CAN GO FROM 1 TO 5 ROOMS. YOU AIM BY TELLING\n", 0
4699   273C 48 20 41 52 
4699   2740 52 4F 57 20 
4699   2744 43 41 4E 20 
4699   2748 47 4F 20 46 
4699   274C 52 4F 4D 20 
4699   2750 31 20 54 4F 
4699   2754 20 35 20 52 
4699   2758 4F 4F 4D 53 
4699   275C 2E 20 59 4F 
4699   2760 55 20 41 49 
4699   2764 4D 20 42 59 
4699   2768 20 54 45 4C 
4699   276C 4C 49 4E 47 
4699   2770 0A 00 
4700   2772 20 20 20 54 __s28: .db "   THE COMPUTER THE ROOM#S YOU WANT THE ARROW TO GO TO.\n", 0
4700   2776 48 45 20 43 
4700   277A 4F 4D 50 55 
4700   277E 54 45 52 20 
4700   2782 54 48 45 20 
4700   2786 52 4F 4F 4D 
4700   278A 23 53 20 59 
4700   278E 4F 55 20 57 
4700   2792 41 4E 54 20 
4700   2796 54 48 45 20 
4700   279A 41 52 52 4F 
4700   279E 57 20 54 4F 
4700   27A2 20 47 4F 20 
4700   27A6 54 4F 2E 0A 
4700   27AA 00 
4701   27AB 20 20 20 49 __s29: .db "   IF THE ARROW CAN'T GO THAT WAY (IF NO TUNNEL) IT MOVES\n", 0
4701   27AF 46 20 54 48 
4701   27B3 45 20 41 52 
4701   27B7 52 4F 57 20 
4701   27BB 43 41 4E 27 
4701   27BF 54 20 47 4F 
4701   27C3 20 54 48 41 
4701   27C7 54 20 57 41 
4701   27CB 59 20 28 49 
4701   27CF 46 20 4E 4F 
4701   27D3 20 54 55 4E 
4701   27D7 4E 45 4C 29 
4701   27DB 20 49 54 20 
4701   27DF 4D 4F 56 45 
4701   27E3 53 0A 
4702   27E5 20 20 20 41 __s30: .db "   AT RANDOM TO THE NEXT ROOM.\n", 0
4702   27E9 54 20 52 41 
4702   27ED 4E 44 4F 4D 
4702   27F1 20 54 4F 20 
4702   27F5 54 48 45 20 
4702   27F9 4E 45 58 54 
4702   27FD 20 52 4F 4F 
4702   2801 4D 2E 0A 00 
4703   2805 20 20 20 20 __s31: .db "     IF THE ARROW HITS THE WUMPUS, YOU WIN.\n", 0
4703   2809 20 49 46 20 
4703   280D 54 48 45 20 
4703   2811 41 52 52 4F 
4703   2815 57 20 48 49 
4703   2819 54 53 20 54 
4703   281D 48 45 20 57 
4703   2821 55 4D 50 55 
4703   2825 53 2C 20 59 
4703   2829 4F 55 20 57 
4703   282D 49 4E 2E 0A 
4703   2831 00 
4704   2832 20 20 20 20 __s32: .db "     IF THE ARROW HITS YOU, YOU LOSE.\n", 0
4704   2836 20 49 46 20 
4704   283A 54 48 45 20 
4704   283E 41 52 52 4F 
4704   2842 57 20 48 49 
4704   2846 54 53 20 59 
4704   284A 4F 55 2C 20 
4704   284E 59 4F 55 20 
4704   2852 4C 4F 53 45 
4704   2856 2E 0A 00 
4705   2859 20 57 41 52 __s33: .db " WARNINGS:\n", 0
4705   285D 4E 49 4E 47 
4705   2861 53 3A 0A 00 
4706   2865 20 57 48 45 __s34: .db " WHEN YOU ARE ONE ROOM AWAY FROM A WUMPUS OR HAZARD,\n", 0
4706   2869 4E 20 59 4F 
4706   286D 55 20 41 52 
4706   2871 45 20 4F 4E 
4706   2875 45 20 52 4F 
4706   2879 4F 4D 20 41 
4706   287D 57 41 59 20 
4706   2881 46 52 4F 4D 
4706   2885 20 41 20 57 
4706   2889 55 4D 50 55 
4706   288D 53 20 4F 52 
4706   2891 20 48 41 5A 
4706   2895 41 52 44 2C 
4706   2899 0A 00 
4707   289B 20 54 48 45 __s35: .db " THE COMPUTER SAYS:\n", 0
4707   289F 20 43 4F 4D 
4707   28A3 50 55 54 45 
4707   28A7 52 20 53 41 
4707   28AB 59 53 3A 0A 
4707   28AF 00 
4708   28B0 20 57 55 4D __s36: .db " WUMPUS:  'I SMELL A WUMPUS'\n", 0
4708   28B4 50 55 53 3A 
4708   28B8 20 20 27 49 
4708   28BC 20 53 4D 45 
4708   28C0 4C 4C 20 41 
4708   28C4 20 57 55 4D 
4708   28C8 50 55 53 27 
4708   28CC 0A 00 
4709   28CE 20 42 41 54 __s37: .db " BAT   :  'BATS NEARBY'\n", 0
4709   28D2 20 20 20 3A 
4709   28D6 20 20 27 42 
4709   28DA 41 54 53 20 
4709   28DE 4E 45 41 52 
4709   28E2 42 59 27 0A 
4709   28E6 00 
4710   28E7 20 50 49 54 __s38: .db " PIT   :  'I FEEL A DRAFT'\n", 0
4710   28EB 20 20 20 3A 
4710   28EF 20 20 27 49 
4710   28F3 20 46 45 45 
4710   28F7 4C 20 41 20 
4710   28FB 44 52 41 46 
4710   28FF 54 27 0A 00 
4711   2903 49 20 53 4D __s39: .db "I SMELL A WUMPUS!\n", 0
4711   2907 45 4C 4C 20 
4711   290B 41 20 57 55 
4711   290F 4D 50 55 53 
4711   2913 21 0A 00 
4712   2916 49 20 46 45 __s40: .db "I FEEL A DRAFT\n", 0
4712   291A 45 4C 20 41 
4712   291E 20 44 52 41 
4712   2922 46 54 0A 00 
4713   2926 42 41 54 53 __s41: .db "BATS NEARBY!\n", 0
4713   292A 20 4E 45 41 
4713   292E 52 42 59 21 
4713   2932 0A 00 
4714   2934 59 4F 55 20 __s42: .db "YOU ARE IN ROOM ", 0
4714   2938 41 52 45 20 
4714   293C 49 4E 20 52 
4714   2940 4F 4F 4D 20 
4714   2944 00 
4715   2945 54 55 4E 4E __s43: .db "TUNNELS LEAD TO ", 0
4715   2949 45 4C 53 20 
4715   294D 4C 45 41 44 
4715   2951 20 54 4F 20 
4715   2955 00 
4716   2956 2C 20 00    __s44: .db ", ", 0
4717   2959 0A 0A 00    __s45: .db "\n\n", 0
4718   295C 53 48 4F 4F __s46: .db "SHOOT OR MOVE (S-M): ", 0
4718   2960 54 20 4F 52 
4718   2964 20 4D 4F 56 
4718   2968 45 20 28 53 
4718   296C 2D 4D 29 3A 
4718   2970 20 00 
4719   2972 54 53 4B 20 __s47: .db "TSK TSK TSK - WUMPUS GOT YOU!\n", 0
4719   2976 54 53 4B 20 
4719   297A 54 53 4B 20 
4719   297E 2D 20 57 55 
4719   2982 4D 50 55 53 
4719   2986 20 47 4F 54 
4719   298A 20 59 4F 55 
4719   298E 21 0A 00 
4720   2991 0A 4E 55 4D __s48: .db "\nNUMBER OF ROOMS (1-5): ", 0
4720   2995 42 45 52 20 
4720   2999 4F 46 20 52 
4720   299D 4F 4F 4D 53 
4720   29A1 20 28 31 2D 
4720   29A5 35 29 3A 20 
4720   29A9 00 
4721   29AA 52 4F 4F 4D __s49: .db "ROOM #", 0
4721   29AE 20 23 00 
4722   29B1 41 52 52 4F __s50: .db "ARROWS AREN'T THAT CROOKED - TRY ANOTHER ROOM\n", 0
4722   29B5 57 53 20 41 
4722   29B9 52 45 4E 27 
4722   29BD 54 20 54 48 
4722   29C1 41 54 20 43 
4722   29C5 52 4F 4F 4B 
4722   29C9 45 44 20 2D 
4722   29CD 20 54 52 59 
4722   29D1 20 41 4E 4F 
4722   29D5 54 48 45 52 
4722   29D9 20 52 4F 4F 
4722   29DD 4D 0A 
4723   29DF 41 48 41 21 __s51: .db "AHA! YOU GOT THE WUMPUS!\n", 0
4723   29E3 20 59 4F 55 
4723   29E7 20 47 4F 54 
4723   29EB 20 54 48 45 
4723   29EF 20 57 55 4D 
4723   29F3 50 55 53 21 
4723   29F7 0A 00 
4724   29F9 4F 55 43 48 __s52: .db "OUCH! ARROW GOT YOU!\n", 0
4724   29FD 21 20 41 52 
4724   2A01 52 4F 57 20 
4724   2A05 47 4F 54 20 
4724   2A09 59 4F 55 21 
4724   2A0D 0A 00 
4725   2A0F 4D 49 53 53 __s53: .db "MISSED\n", 0
4725   2A13 45 44 0A 00 
4726   2A17 0A 57 48 45 __s54: .db "\nWHERE TO: ", 0
4726   2A1B 52 45 20 54 
4726   2A1F 4F 3A 20 00 
4727   2A23 4E 4F 54 20 __s55: .db "NOT POSSIBLE\n", 0
4727   2A27 50 4F 53 53 
4727   2A2B 49 42 4C 45 
4727   2A2F 0A 00 
4728   2A31 5A 41 50 2D __s56: .db "ZAP--SUPER BAT SNATCH! ELSEWHEREVILLE FOR YOU!\n", 0
4728   2A35 2D 53 55 50 
4728   2A39 45 52 20 42 
4728   2A3D 41 54 20 53 
4728   2A41 4E 41 54 43 
4728   2A45 48 21 20 45 
4728   2A49 4C 53 45 57 
4728   2A4D 48 45 52 45 
4728   2A51 56 49 4C 4C 
4728   2A55 45 20 46 4F 
4728   2A59 52 20 59 4F 
4728   2A5D 55 21 0A 00 
4729   2A61 2E 2E 2E 20 __s57: .db "... OOPS! BUMPED A WUMPUS!\n", 0
4729   2A65 4F 4F 50 53 
4729   2A69 21 20 42 55 
4729   2A6D 4D 50 45 44 
4729   2A71 20 41 20 57 
4729   2A75 55 4D 50 55 
4729   2A79 53 21 0A 00 
4730   2A7D 59 59 59 59 __s58: .db "YYYYIIIIEEEE . . . FELL IN PIT\n", 0
4730   2A81 49 49 49 49 
4730   2A85 45 45 45 45 
4730   2A89 20 2E 20 2E 
4730   2A8D 20 2E 20 46 
4730   2A91 45 4C 4C 20 
4730   2A95 49 4E 20 50 
4730   2A99 49 54 0A 00 
4731   2A9D 48 55 4E 54 __s59: .db "HUNT THE WUMPUS\n", 0
4731   2AA1 20 54 48 45 
4731   2AA5 20 57 55 4D 
4731   2AA9 50 55 53 0A 
4731   2AAD 00 
4732   2AAE 57 75 6D 70 __s60: .db "Wumpus is at ", 0
4732   2AB2 75 73 20 69 
4732   2AB6 73 20 61 74 
4732   2ABA 20 00 
4733   2ABC 2C 20 70 69 __s61: .db ", pits at ", 0
4733   2AC0 74 73 20 61 
4733   2AC4 74 20 00 
4734   2AC7 20 26 20 00 __s62: .db " & ", 0
4735   2ACB 2C 20 62 61 __s63: .db ", bats at ", 0
4735   2ACF 74 73 20 61 
4735   2AD3 74 20 00 
4736   2AD6 48 45 45 20 __s64: .db "HEE HEE HEE - THE WUMPUS'LL GET YOU NEXT TIME!!\n", 0
4736   2ADA 48 45 45 20 
4736   2ADE 48 45 45 20 
4736   2AE2 2D 20 54 48 
4736   2AE6 45 20 57 55 
4736   2AEA 4D 50 55 53 
4736   2AEE 27 4C 4C 20 
4736   2AF2 47 45 54 20 
4736   2AF6 59 4F 55 20 
4736   2AFA 4E 45 58 54 
4736   2AFE 20 54 49 4D 
4736   2B02 45 21 21 0A 
4737   2B06 48 41 20 48 __s65: .db "HA HA HA - YOU LOSE!\n", 0
4737   2B0A 41 20 48 41 
4737   2B0E 20 2D 20 59 
4737   2B12 4F 55 20 4C 
4737   2B16 4F 53 45 21 
4737   2B1A 0A 00 
4738   2B1C             
4739   2B1C 1E 2B       _heap_top: .dw _heap
4740   2B1E 00          _heap: .db 0
4741   2B1F             ; --- END DATA BLOCK
4742   2B1F             
4743   2B1F             .end
tasm: Number of errors = 0
