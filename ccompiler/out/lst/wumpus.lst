0001   0000             ; --- FILENAME: programs/wumpus
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ;; int c; 
0011   0408 52 02 00      sub sp, 2 ; c
0012   040B             ;; c = getlet("INSTRUCTIONS (Y-N): "); 
0013   040B FA FF FF      lea d, [bp + -1] ; $c
0014   040E DA            push d
0015   040F 26 D9 2B      mov b, _s0 ; "INSTRUCTIONS (Y-N): "
0016   0412 FD AB         swp b
0017   0414 D8            push b
0018   0415 07 A1 1D      call getlet
0019   0418 51 02 00      add sp, 2
0020   041B E7            pop d
0021   041C FD 43         mov [d], b
0022   041E             ;; if (c == 'Y') { 
0023   041E             _if1_cond:
0024   041E FA FF FF      lea d, [bp + -1] ; $c
0025   0421 2A            mov b, [d]
0026   0422             ; START RELATIONAL
0027   0422 D7            push a
0028   0423 11            mov a, b
0029   0424 26 59 00      mov b, $59
0030   0427 B0            cmp a, b
0031   0428 FD 71         seq ; ==
0032   042A E4            pop a
0033   042B             ; END RELATIONAL
0034   042B C0 00 00      cmp b, 0
0035   042E C6 37 04      je _if1_exit
0036   0431             _if1_true:
0037   0431             ;; print_instructions(); 
0038   0431 07 EF 1D      call print_instructions
0039   0434 0A 37 04      jmp _if1_exit
0040   0437             _if1_exit:
0041   0437             ;; do {  
0042   0437             _do2_block:
0043   0437             ;; game_setup(); 
0044   0437 07 7E 28      call game_setup
0045   043A             ;; game_play(); 
0046   043A 07 9A 29      call game_play
0047   043D             ;; } while (getlet("NEW GAME (Y-N): ") != 'N'); 
0048   043D             _do2_cond:
0049   043D 26 EE 2B      mov b, _s1 ; "NEW GAME (Y-N): "
0050   0440 FD AB         swp b
0051   0442 D8            push b
0052   0443 07 A1 1D      call getlet
0053   0446 51 02 00      add sp, 2
0054   0449             ; START RELATIONAL
0055   0449 D7            push a
0056   044A 11            mov a, b
0057   044B 26 4E 00      mov b, $4e
0058   044E B0            cmp a, b
0059   044F FD 72         sneq ; !=
0060   0451 E4            pop a
0061   0452             ; END RELATIONAL
0062   0452 C0 01 00      cmp b, 1
0063   0455 C6 37 04      je _do2_block
0064   0458             _do2_exit:
0065   0458             ;; return 0; 
0066   0458 26 00 00      mov b, $0
0067   045B F9            leave
0068   045C 05 0B         syscall sys_terminate_proc
0069   045E             
0070   045E             strcpy:
0071   045E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0072   0461             ;; char *psrc; 
0073   0461 52 02 00      sub sp, 2 ; psrc
0074   0464             ;; char *pdest; 
0075   0464 52 02 00      sub sp, 2 ; pdest
0076   0467             ;; psrc = src; 
0077   0467 FA FF FF      lea d, [bp + -1] ; $psrc
0078   046A DA            push d
0079   046B FA 07 00      lea d, [bp + 7] ; $src
0080   046E 2A            mov b, [d]
0081   046F E7            pop d
0082   0470 FD 43         mov [d], b
0083   0472             ;; pdest = dest; 
0084   0472 FA FD FF      lea d, [bp + -3] ; $pdest
0085   0475 DA            push d
0086   0476 FA 05 00      lea d, [bp + 5] ; $dest
0087   0479 2A            mov b, [d]
0088   047A E7            pop d
0089   047B FD 43         mov [d], b
0090   047D             ;; while(*psrc) *pdest++ = *psrc++; 
0091   047D             _while3_cond:
0092   047D FA FF FF      lea d, [bp + -1] ; $psrc
0093   0480 2A            mov b, [d]
0094   0481 74            mov d, b
0095   0482 32            mov bl, [d]
0096   0483 A7 00         mov bh, 0
0097   0485 C0 00 00      cmp b, 0
0098   0488 C6 B0 04      je _while3_exit
0099   048B             _while3_block:
0100   048B             ;; *pdest++ = *psrc++; 
0101   048B FA FD FF      lea d, [bp + -3] ; $pdest
0102   048E 2A            mov b, [d]
0103   048F FD 77         inc b
0104   0491 FA FD FF      lea d, [bp + -3] ; $pdest
0105   0494 FD 43         mov [d], b
0106   0496 FD 7D         dec b
0107   0498 D8            push b
0108   0499 FA FF FF      lea d, [bp + -1] ; $psrc
0109   049C 2A            mov b, [d]
0110   049D FD 77         inc b
0111   049F FA FF FF      lea d, [bp + -1] ; $psrc
0112   04A2 FD 43         mov [d], b
0113   04A4 FD 7D         dec b
0114   04A6 74            mov d, b
0115   04A7 32            mov bl, [d]
0116   04A8 A7 00         mov bh, 0
0117   04AA E7            pop d
0118   04AB FD 3E         mov [d], bl
0119   04AD 0A 7D 04      jmp _while3_cond
0120   04B0             _while3_exit:
0121   04B0             ;; *pdest = '\0'; 
0122   04B0 FA FD FF      lea d, [bp + -3] ; $pdest
0123   04B3 2A            mov b, [d]
0124   04B4 D8            push b
0125   04B5 26 00 00      mov b, $0
0126   04B8 E7            pop d
0127   04B9 FD 3E         mov [d], bl
0128   04BB F9            leave
0129   04BC 09            ret
0130   04BD             
0131   04BD             strcmp:
0132   04BD F8 00 00      enter 0 ; (push bp; mov bp, sp)
0133   04C0             ;; while (*s1 && (*s1 == *s2)) { 
0134   04C0             _while4_cond:
0135   04C0 FA 05 00      lea d, [bp + 5] ; $s1
0136   04C3 2A            mov b, [d]
0137   04C4 74            mov d, b
0138   04C5 32            mov bl, [d]
0139   04C6 A7 00         mov bh, 0
0140   04C8             ; START LOGICAL AND
0141   04C8 D7            push a
0142   04C9 11            mov a, b
0143   04CA FA 05 00      lea d, [bp + 5] ; $s1
0144   04CD 2A            mov b, [d]
0145   04CE 74            mov d, b
0146   04CF 32            mov bl, [d]
0147   04D0 A7 00         mov bh, 0
0148   04D2             ; START RELATIONAL
0149   04D2 D7            push a
0150   04D3 11            mov a, b
0151   04D4 FA 07 00      lea d, [bp + 7] ; $s2
0152   04D7 2A            mov b, [d]
0153   04D8 74            mov d, b
0154   04D9 32            mov bl, [d]
0155   04DA A7 00         mov bh, 0
0156   04DC B0            cmp a, b
0157   04DD FD 71         seq ; ==
0158   04DF E4            pop a
0159   04E0             ; END RELATIONAL
0160   04E0 FD A7         sand a, b
0161   04E2 E4            pop a
0162   04E3             ; END LOGICAL AND
0163   04E3 C0 00 00      cmp b, 0
0164   04E6 C6 06 05      je _while4_exit
0165   04E9             _while4_block:
0166   04E9             ;; s1++; 
0167   04E9 FA 05 00      lea d, [bp + 5] ; $s1
0168   04EC 2A            mov b, [d]
0169   04ED FD 77         inc b
0170   04EF FA 05 00      lea d, [bp + 5] ; $s1
0171   04F2 FD 43         mov [d], b
0172   04F4 FD 7D         dec b
0173   04F6             ;; s2++; 
0174   04F6 FA 07 00      lea d, [bp + 7] ; $s2
0175   04F9 2A            mov b, [d]
0176   04FA FD 77         inc b
0177   04FC FA 07 00      lea d, [bp + 7] ; $s2
0178   04FF FD 43         mov [d], b
0179   0501 FD 7D         dec b
0180   0503 0A C0 04      jmp _while4_cond
0181   0506             _while4_exit:
0182   0506             ;; return *s1 - *s2; 
0183   0506 FA 05 00      lea d, [bp + 5] ; $s1
0184   0509 2A            mov b, [d]
0185   050A 74            mov d, b
0186   050B 32            mov bl, [d]
0187   050C A7 00         mov bh, 0
0188   050E             ; START TERMS
0189   050E D7            push a
0190   050F 11            mov a, b
0191   0510 FA 07 00      lea d, [bp + 7] ; $s2
0192   0513 2A            mov b, [d]
0193   0514 74            mov d, b
0194   0515 32            mov bl, [d]
0195   0516 A7 00         mov bh, 0
0196   0518 60            sub a, b
0197   0519 27            mov b, a
0198   051A E4            pop a
0199   051B             ; END TERMS
0200   051B F9            leave
0201   051C 09            ret
0202   051D             
0203   051D             strncmp:
0204   051D F8 00 00      enter 0 ; (push bp; mov bp, sp)
0205   0520 F9            leave
0206   0521 09            ret
0207   0522             
0208   0522             strcat:
0209   0522 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0210   0525             ;; int dest_len; 
0211   0525 52 02 00      sub sp, 2 ; dest_len
0212   0528             ;; int i; 
0213   0528 52 02 00      sub sp, 2 ; i
0214   052B             ;; dest_len = strlen(dest); 
0215   052B FA FF FF      lea d, [bp + -1] ; $dest_len
0216   052E DA            push d
0217   052F FA 05 00      lea d, [bp + 5] ; $dest
0218   0532 2A            mov b, [d]
0219   0533 FD AB         swp b
0220   0535 D8            push b
0221   0536 07 D8 05      call strlen
0222   0539 51 02 00      add sp, 2
0223   053C E7            pop d
0224   053D FD 43         mov [d], b
0225   053F             ;; for (i = 0; src[i] != 0; i=i+1) { 
0226   053F             _for5_init:
0227   053F FA FD FF      lea d, [bp + -3] ; $i
0228   0542 DA            push d
0229   0543 26 00 00      mov b, $0
0230   0546 E7            pop d
0231   0547 FD 43         mov [d], b
0232   0549             _for5_cond:
0233   0549 FA 07 00      lea d, [bp + 7] ; $src
0234   054C FD 2A         mov d, [d]
0235   054E D7            push a
0236   054F DA            push d
0237   0550 FA FD FF      lea d, [bp + -3] ; $i
0238   0553 2A            mov b, [d]
0239   0554 E7            pop d
0240   0555 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0241   0559 E4            pop a
0242   055A 32            mov bl, [d]
0243   055B A7 00         mov bh, 0
0244   055D             ; START RELATIONAL
0245   055D D7            push a
0246   055E 11            mov a, b
0247   055F 26 00 00      mov b, $0
0248   0562 B0            cmp a, b
0249   0563 FD 72         sneq ; !=
0250   0565 E4            pop a
0251   0566             ; END RELATIONAL
0252   0566 C0 00 00      cmp b, 0
0253   0569 C6 B2 05      je _for5_exit
0254   056C             _for5_block:
0255   056C             ;; dest[dest_len + i] = src[i]; 
0256   056C FA 05 00      lea d, [bp + 5] ; $dest
0257   056F FD 2A         mov d, [d]
0258   0571 D7            push a
0259   0572 DA            push d
0260   0573 FA FF FF      lea d, [bp + -1] ; $dest_len
0261   0576 2A            mov b, [d]
0262   0577             ; START TERMS
0263   0577 D7            push a
0264   0578 11            mov a, b
0265   0579 FA FD FF      lea d, [bp + -3] ; $i
0266   057C 2A            mov b, [d]
0267   057D 56            add b, a
0268   057E E4            pop a
0269   057F             ; END TERMS
0270   057F E7            pop d
0271   0580 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0272   0584 E4            pop a
0273   0585 DA            push d
0274   0586 FA 07 00      lea d, [bp + 7] ; $src
0275   0589 FD 2A         mov d, [d]
0276   058B D7            push a
0277   058C DA            push d
0278   058D FA FD FF      lea d, [bp + -3] ; $i
0279   0590 2A            mov b, [d]
0280   0591 E7            pop d
0281   0592 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0282   0596 E4            pop a
0283   0597 32            mov bl, [d]
0284   0598 A7 00         mov bh, 0
0285   059A E7            pop d
0286   059B FD 3E         mov [d], bl
0287   059D             _for5_update:
0288   059D FA FD FF      lea d, [bp + -3] ; $i
0289   05A0 DA            push d
0290   05A1 FA FD FF      lea d, [bp + -3] ; $i
0291   05A4 2A            mov b, [d]
0292   05A5             ; START TERMS
0293   05A5 D7            push a
0294   05A6 11            mov a, b
0295   05A7 26 01 00      mov b, $1
0296   05AA 56            add b, a
0297   05AB E4            pop a
0298   05AC             ; END TERMS
0299   05AC E7            pop d
0300   05AD FD 43         mov [d], b
0301   05AF 0A 49 05      jmp _for5_cond
0302   05B2             _for5_exit:
0303   05B2             ;; dest[dest_len + i] = 0; 
0304   05B2 FA 05 00      lea d, [bp + 5] ; $dest
0305   05B5 FD 2A         mov d, [d]
0306   05B7 D7            push a
0307   05B8 DA            push d
0308   05B9 FA FF FF      lea d, [bp + -1] ; $dest_len
0309   05BC 2A            mov b, [d]
0310   05BD             ; START TERMS
0311   05BD D7            push a
0312   05BE 11            mov a, b
0313   05BF FA FD FF      lea d, [bp + -3] ; $i
0314   05C2 2A            mov b, [d]
0315   05C3 56            add b, a
0316   05C4 E4            pop a
0317   05C5             ; END TERMS
0318   05C5 E7            pop d
0319   05C6 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0320   05CA E4            pop a
0321   05CB DA            push d
0322   05CC 26 00 00      mov b, $0
0323   05CF E7            pop d
0324   05D0 FD 3E         mov [d], bl
0325   05D2             ;; return dest; 
0326   05D2 FA 05 00      lea d, [bp + 5] ; $dest
0327   05D5 2A            mov b, [d]
0328   05D6 F9            leave
0329   05D7 09            ret
0330   05D8             
0331   05D8             strlen:
0332   05D8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0333   05DB             ;; int length; 
0334   05DB 52 02 00      sub sp, 2 ; length
0335   05DE             ;; length = 0; 
0336   05DE FA FF FF      lea d, [bp + -1] ; $length
0337   05E1 DA            push d
0338   05E2 26 00 00      mov b, $0
0339   05E5 E7            pop d
0340   05E6 FD 43         mov [d], b
0341   05E8             ;; while (str[length] != 0) { 
0342   05E8             _while6_cond:
0343   05E8 FA 05 00      lea d, [bp + 5] ; $str
0344   05EB FD 2A         mov d, [d]
0345   05ED D7            push a
0346   05EE DA            push d
0347   05EF FA FF FF      lea d, [bp + -1] ; $length
0348   05F2 2A            mov b, [d]
0349   05F3 E7            pop d
0350   05F4 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0351   05F8 E4            pop a
0352   05F9 32            mov bl, [d]
0353   05FA A7 00         mov bh, 0
0354   05FC             ; START RELATIONAL
0355   05FC D7            push a
0356   05FD 11            mov a, b
0357   05FE 26 00 00      mov b, $0
0358   0601 B0            cmp a, b
0359   0602 FD 72         sneq ; !=
0360   0604 E4            pop a
0361   0605             ; END RELATIONAL
0362   0605 C0 00 00      cmp b, 0
0363   0608 C6 1B 06      je _while6_exit
0364   060B             _while6_block:
0365   060B             ;; length++; 
0366   060B FA FF FF      lea d, [bp + -1] ; $length
0367   060E 2A            mov b, [d]
0368   060F FD 77         inc b
0369   0611 FA FF FF      lea d, [bp + -1] ; $length
0370   0614 FD 43         mov [d], b
0371   0616 FD 7D         dec b
0372   0618 0A E8 05      jmp _while6_cond
0373   061B             _while6_exit:
0374   061B             ;; return length; 
0375   061B FA FF FF      lea d, [bp + -1] ; $length
0376   061E 2A            mov b, [d]
0377   061F F9            leave
0378   0620 09            ret
0379   0621             
0380   0621             exit:
0381   0621 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0382   0624             
0383   0624             ; --- BEGIN INLINE ASM BLOCK
0384   0624 05 0B         syscall sys_terminate_proc
0385   0626             ; --- END INLINE ASM BLOCK
0386   0626             
0387   0626 F9            leave
0388   0627 09            ret
0389   0628             
0390   0628             memset:
0391   0628 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0392   062B             ;; int i; 
0393   062B 52 02 00      sub sp, 2 ; i
0394   062E             ;; for(i = 0; i < size; i++){ 
0395   062E             _for7_init:
0396   062E FA FF FF      lea d, [bp + -1] ; $i
0397   0631 DA            push d
0398   0632 26 00 00      mov b, $0
0399   0635 E7            pop d
0400   0636 FD 43         mov [d], b
0401   0638             _for7_cond:
0402   0638 FA FF FF      lea d, [bp + -1] ; $i
0403   063B 2A            mov b, [d]
0404   063C             ; START RELATIONAL
0405   063C D7            push a
0406   063D 11            mov a, b
0407   063E FA 08 00      lea d, [bp + 8] ; $size
0408   0641 2A            mov b, [d]
0409   0642 B0            cmp a, b
0410   0643 FD 73         slt ; < (signed)
0411   0645 E4            pop a
0412   0646             ; END RELATIONAL
0413   0646 C0 00 00      cmp b, 0
0414   0649 C6 72 06      je _for7_exit
0415   064C             _for7_block:
0416   064C             ;; *(s+i) = c; 
0417   064C FA 05 00      lea d, [bp + 5] ; $s
0418   064F 2A            mov b, [d]
0419   0650             ; START TERMS
0420   0650 D7            push a
0421   0651 11            mov a, b
0422   0652 FA FF FF      lea d, [bp + -1] ; $i
0423   0655 2A            mov b, [d]
0424   0656 56            add b, a
0425   0657 E4            pop a
0426   0658             ; END TERMS
0427   0658 D8            push b
0428   0659 FA 07 00      lea d, [bp + 7] ; $c
0429   065C 32            mov bl, [d]
0430   065D A7 00         mov bh, 0
0431   065F E7            pop d
0432   0660 FD 3E         mov [d], bl
0433   0662             _for7_update:
0434   0662 FA FF FF      lea d, [bp + -1] ; $i
0435   0665 2A            mov b, [d]
0436   0666 FD 77         inc b
0437   0668 FA FF FF      lea d, [bp + -1] ; $i
0438   066B FD 43         mov [d], b
0439   066D FD 7D         dec b
0440   066F 0A 38 06      jmp _for7_cond
0441   0672             _for7_exit:
0442   0672             ;; return s; 
0443   0672 FA 05 00      lea d, [bp + 5] ; $s
0444   0675 2A            mov b, [d]
0445   0676 F9            leave
0446   0677 09            ret
0447   0678             
0448   0678             atoi:
0449   0678 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0450   067B             ;; int result = 0;  // Initialize result 
0451   067B 52 02 00      sub sp, 2 ; result
0452   067E             ; --- START LOCAL VAR INITIALIZATION
0453   067E FA FF FF      lea d, [bp + -1] ; $result
0454   0681 DA            push d
0455   0682 26 00 00      mov b, $0
0456   0685 E7            pop d
0457   0686 FD 43         mov [d], b
0458   0688             ; --- END LOCAL VAR INITIALIZATION
0459   0688             ;; int sign = 1;    // Initialize sign as positive 
0460   0688 52 02 00      sub sp, 2 ; sign
0461   068B             ; --- START LOCAL VAR INITIALIZATION
0462   068B FA FD FF      lea d, [bp + -3] ; $sign
0463   068E DA            push d
0464   068F 26 01 00      mov b, $1
0465   0692 E7            pop d
0466   0693 FD 43         mov [d], b
0467   0695             ; --- END LOCAL VAR INITIALIZATION
0468   0695             ;; while (*str == ' ') str++; 
0469   0695             _while8_cond:
0470   0695 FA 05 00      lea d, [bp + 5] ; $str
0471   0698 2A            mov b, [d]
0472   0699 74            mov d, b
0473   069A 32            mov bl, [d]
0474   069B A7 00         mov bh, 0
0475   069D             ; START RELATIONAL
0476   069D D7            push a
0477   069E 11            mov a, b
0478   069F 26 20 00      mov b, $20
0479   06A2 B0            cmp a, b
0480   06A3 FD 71         seq ; ==
0481   06A5 E4            pop a
0482   06A6             ; END RELATIONAL
0483   06A6 C0 00 00      cmp b, 0
0484   06A9 C6 BC 06      je _while8_exit
0485   06AC             _while8_block:
0486   06AC             ;; str++; 
0487   06AC FA 05 00      lea d, [bp + 5] ; $str
0488   06AF 2A            mov b, [d]
0489   06B0 FD 77         inc b
0490   06B2 FA 05 00      lea d, [bp + 5] ; $str
0491   06B5 FD 43         mov [d], b
0492   06B7 FD 7D         dec b
0493   06B9 0A 95 06      jmp _while8_cond
0494   06BC             _while8_exit:
0495   06BC             ;; if (*str == '-' || *str == '+') { 
0496   06BC             _if9_cond:
0497   06BC FA 05 00      lea d, [bp + 5] ; $str
0498   06BF 2A            mov b, [d]
0499   06C0 74            mov d, b
0500   06C1 32            mov bl, [d]
0501   06C2 A7 00         mov bh, 0
0502   06C4             ; START RELATIONAL
0503   06C4 D7            push a
0504   06C5 11            mov a, b
0505   06C6 26 2D 00      mov b, $2d
0506   06C9 B0            cmp a, b
0507   06CA FD 71         seq ; ==
0508   06CC E4            pop a
0509   06CD             ; END RELATIONAL
0510   06CD             ; START LOGICAL OR
0511   06CD D7            push a
0512   06CE 11            mov a, b
0513   06CF FA 05 00      lea d, [bp + 5] ; $str
0514   06D2 2A            mov b, [d]
0515   06D3 74            mov d, b
0516   06D4 32            mov bl, [d]
0517   06D5 A7 00         mov bh, 0
0518   06D7             ; START RELATIONAL
0519   06D7 D7            push a
0520   06D8 11            mov a, b
0521   06D9 26 2B 00      mov b, $2b
0522   06DC B0            cmp a, b
0523   06DD FD 71         seq ; ==
0524   06DF E4            pop a
0525   06E0             ; END RELATIONAL
0526   06E0 FD A8         sor a, b ; ||
0527   06E2 E4            pop a
0528   06E3             ; END LOGICAL OR
0529   06E3 C0 00 00      cmp b, 0
0530   06E6 C6 1F 07      je _if9_exit
0531   06E9             _if9_true:
0532   06E9             ;; if (*str == '-') sign = -1; 
0533   06E9             _if10_cond:
0534   06E9 FA 05 00      lea d, [bp + 5] ; $str
0535   06EC 2A            mov b, [d]
0536   06ED 74            mov d, b
0537   06EE 32            mov bl, [d]
0538   06EF A7 00         mov bh, 0
0539   06F1             ; START RELATIONAL
0540   06F1 D7            push a
0541   06F2 11            mov a, b
0542   06F3 26 2D 00      mov b, $2d
0543   06F6 B0            cmp a, b
0544   06F7 FD 71         seq ; ==
0545   06F9 E4            pop a
0546   06FA             ; END RELATIONAL
0547   06FA C0 00 00      cmp b, 0
0548   06FD C6 0F 07      je _if10_exit
0549   0700             _if10_true:
0550   0700             ;; sign = -1; 
0551   0700 FA FD FF      lea d, [bp + -3] ; $sign
0552   0703 DA            push d
0553   0704 26 01 00      mov b, $1
0554   0707 FD 97         neg b
0555   0709 E7            pop d
0556   070A FD 43         mov [d], b
0557   070C 0A 0F 07      jmp _if10_exit
0558   070F             _if10_exit:
0559   070F             ;; str++; 
0560   070F FA 05 00      lea d, [bp + 5] ; $str
0561   0712 2A            mov b, [d]
0562   0713 FD 77         inc b
0563   0715 FA 05 00      lea d, [bp + 5] ; $str
0564   0718 FD 43         mov [d], b
0565   071A FD 7D         dec b
0566   071C 0A 1F 07      jmp _if9_exit
0567   071F             _if9_exit:
0568   071F             ;; while (*str >= '0' && *str <= '9') { 
0569   071F             _while11_cond:
0570   071F FA 05 00      lea d, [bp + 5] ; $str
0571   0722 2A            mov b, [d]
0572   0723 74            mov d, b
0573   0724 32            mov bl, [d]
0574   0725 A7 00         mov bh, 0
0575   0727             ; START RELATIONAL
0576   0727 D7            push a
0577   0728 11            mov a, b
0578   0729 26 30 00      mov b, $30
0579   072C B0            cmp a, b
0580   072D FD 82         sgeu ; >= (unsigned)
0581   072F E4            pop a
0582   0730             ; END RELATIONAL
0583   0730             ; START LOGICAL AND
0584   0730 D7            push a
0585   0731 11            mov a, b
0586   0732 FA 05 00      lea d, [bp + 5] ; $str
0587   0735 2A            mov b, [d]
0588   0736 74            mov d, b
0589   0737 32            mov bl, [d]
0590   0738 A7 00         mov bh, 0
0591   073A             ; START RELATIONAL
0592   073A D7            push a
0593   073B 11            mov a, b
0594   073C 26 39 00      mov b, $39
0595   073F B0            cmp a, b
0596   0740 FD 76         sleu ; <= (unsigned)
0597   0742 E4            pop a
0598   0743             ; END RELATIONAL
0599   0743 FD A7         sand a, b
0600   0745 E4            pop a
0601   0746             ; END LOGICAL AND
0602   0746 C0 00 00      cmp b, 0
0603   0749 C6 84 07      je _while11_exit
0604   074C             _while11_block:
0605   074C             ;; result = result * 10 + (*str - '0'); 
0606   074C FA FF FF      lea d, [bp + -1] ; $result
0607   074F DA            push d
0608   0750 FA FF FF      lea d, [bp + -1] ; $result
0609   0753 2A            mov b, [d]
0610   0754             ; START FACTORS
0611   0754 D7            push a
0612   0755 11            mov a, b
0613   0756 26 0A 00      mov b, $a
0614   0759 AC            mul a, b ; *
0615   075A 11            mov a, b
0616   075B 27            mov b, a
0617   075C E4            pop a
0618   075D             ; END FACTORS
0619   075D             ; START TERMS
0620   075D D7            push a
0621   075E 11            mov a, b
0622   075F FA 05 00      lea d, [bp + 5] ; $str
0623   0762 2A            mov b, [d]
0624   0763 74            mov d, b
0625   0764 32            mov bl, [d]
0626   0765 A7 00         mov bh, 0
0627   0767             ; START TERMS
0628   0767 D7            push a
0629   0768 11            mov a, b
0630   0769 26 30 00      mov b, $30
0631   076C 60            sub a, b
0632   076D 27            mov b, a
0633   076E E4            pop a
0634   076F             ; END TERMS
0635   076F 56            add b, a
0636   0770 E4            pop a
0637   0771             ; END TERMS
0638   0771 E7            pop d
0639   0772 FD 43         mov [d], b
0640   0774             ;; str++; 
0641   0774 FA 05 00      lea d, [bp + 5] ; $str
0642   0777 2A            mov b, [d]
0643   0778 FD 77         inc b
0644   077A FA 05 00      lea d, [bp + 5] ; $str
0645   077D FD 43         mov [d], b
0646   077F FD 7D         dec b
0647   0781 0A 1F 07      jmp _while11_cond
0648   0784             _while11_exit:
0649   0784             ;; return sign * result; 
0650   0784 FA FD FF      lea d, [bp + -3] ; $sign
0651   0787 2A            mov b, [d]
0652   0788             ; START FACTORS
0653   0788 D7            push a
0654   0789 11            mov a, b
0655   078A FA FF FF      lea d, [bp + -1] ; $result
0656   078D 2A            mov b, [d]
0657   078E AC            mul a, b ; *
0658   078F 11            mov a, b
0659   0790 27            mov b, a
0660   0791 E4            pop a
0661   0792             ; END FACTORS
0662   0792 F9            leave
0663   0793 09            ret
0664   0794             
0665   0794             rand:
0666   0794 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0667   0797             ;; int  sec; 
0668   0797 52 02 00      sub sp, 2 ; sec
0669   079A             
0670   079A             ; --- BEGIN INLINE ASM BLOCK
0671   079A 19 00         mov al, 0
0672   079C 05 01         syscall sys_rtc					
0673   079E 1A            mov al, ah
0674   079F FA FF FF      lea d, [bp + -1] ; $sec
0675   07A2 1E            mov al, [d]
0676   07A3 22 00         mov ah, 0
0677   07A5             ; --- END INLINE ASM BLOCK
0678   07A5             
0679   07A5             ;; return sec; 
0680   07A5 FA FF FF      lea d, [bp + -1] ; $sec
0681   07A8 2A            mov b, [d]
0682   07A9 F9            leave
0683   07AA 09            ret
0684   07AB             
0685   07AB             alloc:
0686   07AB F8 00 00      enter 0 ; (push bp; mov bp, sp)
0687   07AE             ;; heap_top = heap_top + bytes; 
0688   07AE 3B EB 33      mov d, _heap_top ; $heap_top
0689   07B1 DA            push d
0690   07B2 3B EB 33      mov d, _heap_top ; $heap_top
0691   07B5 2A            mov b, [d]
0692   07B6             ; START TERMS
0693   07B6 D7            push a
0694   07B7 11            mov a, b
0695   07B8 FA 05 00      lea d, [bp + 5] ; $bytes
0696   07BB 2A            mov b, [d]
0697   07BC 56            add b, a
0698   07BD E4            pop a
0699   07BE             ; END TERMS
0700   07BE E7            pop d
0701   07BF FD 43         mov [d], b
0702   07C1             ;; return heap_top - bytes; 
0703   07C1 3B EB 33      mov d, _heap_top ; $heap_top
0704   07C4 2A            mov b, [d]
0705   07C5             ; START TERMS
0706   07C5 D7            push a
0707   07C6 11            mov a, b
0708   07C7 FA 05 00      lea d, [bp + 5] ; $bytes
0709   07CA 2A            mov b, [d]
0710   07CB 60            sub a, b
0711   07CC 27            mov b, a
0712   07CD E4            pop a
0713   07CE             ; END TERMS
0714   07CE F9            leave
0715   07CF 09            ret
0716   07D0             
0717   07D0             free:
0718   07D0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0719   07D3             ;; return heap_top = heap_top - bytes; 
0720   07D3 3B EB 33      mov d, _heap_top ; $heap_top
0721   07D6 DA            push d
0722   07D7 3B EB 33      mov d, _heap_top ; $heap_top
0723   07DA 2A            mov b, [d]
0724   07DB             ; START TERMS
0725   07DB D7            push a
0726   07DC 11            mov a, b
0727   07DD FA 05 00      lea d, [bp + 5] ; $bytes
0728   07E0 2A            mov b, [d]
0729   07E1 60            sub a, b
0730   07E2 27            mov b, a
0731   07E3 E4            pop a
0732   07E4             ; END TERMS
0733   07E4 E7            pop d
0734   07E5 FD 43         mov [d], b
0735   07E7 F9            leave
0736   07E8 09            ret
0737   07E9             
0738   07E9             fopen:
0739   07E9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0740   07EC             ;; FILE *fp; 
0741   07EC 52 02 00      sub sp, 2 ; fp
0742   07EF             ;; fp = alloc(sizeof(int)); 
0743   07EF FA FF FF      lea d, [bp + -1] ; $fp
0744   07F2 DA            push d
0745   07F3 26 02 00      mov b, 2
0746   07F6 FD AB         swp b
0747   07F8 D8            push b
0748   07F9 07 AB 07      call alloc
0749   07FC 51 02 00      add sp, 2
0750   07FF E7            pop d
0751   0800 FD 43         mov [d], b
0752   0802 F9            leave
0753   0803 09            ret
0754   0804             
0755   0804             printf:
0756   0804 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0757   0807             ;; char *p, *format_p; 
0758   0807 52 02 00      sub sp, 2 ; p
0759   080A 52 02 00      sub sp, 2 ; format_p
0760   080D             ;; format_p = format; 
0761   080D FA FD FF      lea d, [bp + -3] ; $format_p
0762   0810 DA            push d
0763   0811 FA 05 00      lea d, [bp + 5] ; $format
0764   0814 2A            mov b, [d]
0765   0815 E7            pop d
0766   0816 FD 43         mov [d], b
0767   0818             ;; p = &format + 2; 
0768   0818 FA FF FF      lea d, [bp + -1] ; $p
0769   081B DA            push d
0770   081C FA 05 00      lea d, [bp + 5] ; $format
0771   081F 2D            mov b, d
0772   0820             ; START TERMS
0773   0820 D7            push a
0774   0821 11            mov a, b
0775   0822 26 02 00      mov b, $2
0776   0825 56            add b, a
0777   0826 E4            pop a
0778   0827             ; END TERMS
0779   0827 E7            pop d
0780   0828 FD 43         mov [d], b
0781   082A             ;; for(;;){ 
0782   082A             _for12_init:
0783   082A             _for12_cond:
0784   082A             _for12_block:
0785   082A             ;; if(!*format_p) break; 
0786   082A             _if13_cond:
0787   082A FA FD FF      lea d, [bp + -3] ; $format_p
0788   082D 2A            mov b, [d]
0789   082E 74            mov d, b
0790   082F 32            mov bl, [d]
0791   0830 A7 00         mov bh, 0
0792   0832 C0 00 00      cmp b, 0
0793   0835 FD 71         seq ; !
0794   0837 C0 00 00      cmp b, 0
0795   083A C6 43 08      je _if13_else
0796   083D             _if13_true:
0797   083D             ;; break; 
0798   083D 0A 6A 0A      jmp _for12_exit ; for break
0799   0840 0A 67 0A      jmp _if13_exit
0800   0843             _if13_else:
0801   0843             ;; if(*format_p == '%'){ 
0802   0843             _if14_cond:
0803   0843 FA FD FF      lea d, [bp + -3] ; $format_p
0804   0846 2A            mov b, [d]
0805   0847 74            mov d, b
0806   0848 32            mov bl, [d]
0807   0849 A7 00         mov bh, 0
0808   084B             ; START RELATIONAL
0809   084B D7            push a
0810   084C 11            mov a, b
0811   084D 26 25 00      mov b, $25
0812   0850 B0            cmp a, b
0813   0851 FD 71         seq ; ==
0814   0853 E4            pop a
0815   0854             ; END RELATIONAL
0816   0854 C0 00 00      cmp b, 0
0817   0857 C6 4B 0A      je _if14_else
0818   085A             _if14_true:
0819   085A             ;; format_p++; 
0820   085A FA FD FF      lea d, [bp + -3] ; $format_p
0821   085D 2A            mov b, [d]
0822   085E FD 77         inc b
0823   0860 FA FD FF      lea d, [bp + -3] ; $format_p
0824   0863 FD 43         mov [d], b
0825   0865 FD 7D         dec b
0826   0867             ;; switch(*format_p){ 
0827   0867             _switch15_expr:
0828   0867 FA FD FF      lea d, [bp + -3] ; $format_p
0829   086A 2A            mov b, [d]
0830   086B 74            mov d, b
0831   086C 32            mov bl, [d]
0832   086D A7 00         mov bh, 0
0833   086F             _switch15_comparisons:
0834   086F C1 6C         cmp bl, $6c
0835   0871 C6 9D 08      je _switch15_case0
0836   0874 C1 4C         cmp bl, $4c
0837   0876 C6 9D 08      je _switch15_case1
0838   0879 C1 64         cmp bl, $64
0839   087B C6 8B 09      je _switch15_case2
0840   087E C1 69         cmp bl, $69
0841   0880 C6 8B 09      je _switch15_case3
0842   0883 C1 75         cmp bl, $75
0843   0885 C6 AF 09      je _switch15_case4
0844   0888 C1 78         cmp bl, $78
0845   088A C6 D3 09      je _switch15_case5
0846   088D C1 63         cmp bl, $63
0847   088F C6 F1 09      je _switch15_case6
0848   0892 C1 73         cmp bl, $73
0849   0894 C6 10 0A      je _switch15_case7
0850   0897 0A 2F 0A      jmp _switch15_default
0851   089A 0A 3B 0A      jmp _switch15_exit
0852   089D             _switch15_case0:
0853   089D             _switch15_case1:
0854   089D             ;; format_p++; 
0855   089D FA FD FF      lea d, [bp + -3] ; $format_p
0856   08A0 2A            mov b, [d]
0857   08A1 FD 77         inc b
0858   08A3 FA FD FF      lea d, [bp + -3] ; $format_p
0859   08A6 FD 43         mov [d], b
0860   08A8 FD 7D         dec b
0861   08AA             ;; if(*format_p == 'd' || *format_p == 'i') 
0862   08AA             _if16_cond:
0863   08AA FA FD FF      lea d, [bp + -3] ; $format_p
0864   08AD 2A            mov b, [d]
0865   08AE 74            mov d, b
0866   08AF 32            mov bl, [d]
0867   08B0 A7 00         mov bh, 0
0868   08B2             ; START RELATIONAL
0869   08B2 D7            push a
0870   08B3 11            mov a, b
0871   08B4 26 64 00      mov b, $64
0872   08B7 B0            cmp a, b
0873   08B8 FD 71         seq ; ==
0874   08BA E4            pop a
0875   08BB             ; END RELATIONAL
0876   08BB             ; START LOGICAL OR
0877   08BB D7            push a
0878   08BC 11            mov a, b
0879   08BD FA FD FF      lea d, [bp + -3] ; $format_p
0880   08C0 2A            mov b, [d]
0881   08C1 74            mov d, b
0882   08C2 32            mov bl, [d]
0883   08C3 A7 00         mov bh, 0
0884   08C5             ; START RELATIONAL
0885   08C5 D7            push a
0886   08C6 11            mov a, b
0887   08C7 26 69 00      mov b, $69
0888   08CA B0            cmp a, b
0889   08CB FD 71         seq ; ==
0890   08CD E4            pop a
0891   08CE             ; END RELATIONAL
0892   08CE FD A8         sor a, b ; ||
0893   08D0 E4            pop a
0894   08D1             ; END LOGICAL OR
0895   08D1 C0 00 00      cmp b, 0
0896   08D4 C6 F9 08      je _if16_else
0897   08D7             _if16_true:
0898   08D7             ;; print_signed_long(*(long *)p); 
0899   08D7 FA FF FF      lea d, [bp + -1] ; $p
0900   08DA 2A            mov b, [d]
0901   08DB AB            snex b
0902   08DC FD 39         mov c, b
0903   08DE 74            mov d, b
0904   08DF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0905   08E2 FD 39         mov c, b ; And place it into C
0906   08E4 2A            mov b, [d] ; Lower Word in B
0907   08E5 FD 79         mov g, b
0908   08E7 28            mov b, c
0909   08E8 FD AB         swp b
0910   08EA D8            push b
0911   08EB FD 27         mov b, g
0912   08ED FD AB         swp b
0913   08EF D8            push b
0914   08F0 07 50 0F      call print_signed_long
0915   08F3 51 04 00      add sp, 4
0916   08F6 0A 76 09      jmp _if16_exit
0917   08F9             _if16_else:
0918   08F9             ;; if(*format_p == 'u') 
0919   08F9             _if17_cond:
0920   08F9 FA FD FF      lea d, [bp + -3] ; $format_p
0921   08FC 2A            mov b, [d]
0922   08FD 74            mov d, b
0923   08FE 32            mov bl, [d]
0924   08FF A7 00         mov bh, 0
0925   0901             ; START RELATIONAL
0926   0901 D7            push a
0927   0902 11            mov a, b
0928   0903 26 75 00      mov b, $75
0929   0906 B0            cmp a, b
0930   0907 FD 71         seq ; ==
0931   0909 E4            pop a
0932   090A             ; END RELATIONAL
0933   090A C0 00 00      cmp b, 0
0934   090D C6 34 09      je _if17_else
0935   0910             _if17_true:
0936   0910             ;; print_unsigned_long(*(unsigned long *)p); 
0937   0910 FA FF FF      lea d, [bp + -1] ; $p
0938   0913 2A            mov b, [d]
0939   0914 A7 00         mov bh, 0
0940   0916 38 00 00      mov c, 0
0941   0919 74            mov d, b
0942   091A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0943   091D FD 39         mov c, b ; And place it into C
0944   091F 2A            mov b, [d] ; Lower Word in B
0945   0920 FD 79         mov g, b
0946   0922 28            mov b, c
0947   0923 FD AB         swp b
0948   0925 D8            push b
0949   0926 FD 27         mov b, g
0950   0928 FD AB         swp b
0951   092A D8            push b
0952   092B 07 90 12      call print_unsigned_long
0953   092E 51 04 00      add sp, 4
0954   0931 0A 76 09      jmp _if17_exit
0955   0934             _if17_else:
0956   0934             ;; if(*format_p == 'x') 
0957   0934             _if18_cond:
0958   0934 FA FD FF      lea d, [bp + -3] ; $format_p
0959   0937 2A            mov b, [d]
0960   0938 74            mov d, b
0961   0939 32            mov bl, [d]
0962   093A A7 00         mov bh, 0
0963   093C             ; START RELATIONAL
0964   093C D7            push a
0965   093D 11            mov a, b
0966   093E 26 78 00      mov b, $78
0967   0941 B0            cmp a, b
0968   0942 FD 71         seq ; ==
0969   0944 E4            pop a
0970   0945             ; END RELATIONAL
0971   0945 C0 00 00      cmp b, 0
0972   0948 C6 6A 09      je _if18_else
0973   094B             _if18_true:
0974   094B             ;; printx32(*(long int *)p); 
0975   094B FA FF FF      lea d, [bp + -1] ; $p
0976   094E 2A            mov b, [d]
0977   094F 74            mov d, b
0978   0950 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0979   0953 FD 39         mov c, b ; And place it into C
0980   0955 2A            mov b, [d] ; Lower Word in B
0981   0956 FD 79         mov g, b
0982   0958 28            mov b, c
0983   0959 FD AB         swp b
0984   095B D8            push b
0985   095C FD 27         mov b, g
0986   095E FD AB         swp b
0987   0960 D8            push b
0988   0961 07 C5 0C      call printx32
0989   0964 51 04 00      add sp, 4
0990   0967 0A 76 09      jmp _if18_exit
0991   096A             _if18_else:
0992   096A             ;; err("Unexpected format in printf."); 
0993   096A 26 FF 2B      mov b, _s2 ; "Unexpected format in printf."
0994   096D FD AB         swp b
0995   096F D8            push b
0996   0970 07 B3 0C      call err
0997   0973 51 02 00      add sp, 2
0998   0976             _if18_exit:
0999   0976             _if17_exit:
1000   0976             _if16_exit:
1001   0976             ;; p = p + 4; 
1002   0976 FA FF FF      lea d, [bp + -1] ; $p
1003   0979 DA            push d
1004   097A FA FF FF      lea d, [bp + -1] ; $p
1005   097D 2A            mov b, [d]
1006   097E             ; START TERMS
1007   097E D7            push a
1008   097F 11            mov a, b
1009   0980 26 04 00      mov b, $4
1010   0983 56            add b, a
1011   0984 E4            pop a
1012   0985             ; END TERMS
1013   0985 E7            pop d
1014   0986 FD 43         mov [d], b
1015   0988             ;; break; 
1016   0988 0A 3B 0A      jmp _switch15_exit ; case break
1017   098B             _switch15_case2:
1018   098B             _switch15_case3:
1019   098B             ;; print_signed(*(int*)p); 
1020   098B FA FF FF      lea d, [bp + -1] ; $p
1021   098E 2A            mov b, [d]
1022   098F 74            mov d, b
1023   0990 2A            mov b, [d]
1024   0991 FD AB         swp b
1025   0993 D8            push b
1026   0994 07 59 0E      call print_signed
1027   0997 51 02 00      add sp, 2
1028   099A             ;; p = p + 2; 
1029   099A FA FF FF      lea d, [bp + -1] ; $p
1030   099D DA            push d
1031   099E FA FF FF      lea d, [bp + -1] ; $p
1032   09A1 2A            mov b, [d]
1033   09A2             ; START TERMS
1034   09A2 D7            push a
1035   09A3 11            mov a, b
1036   09A4 26 02 00      mov b, $2
1037   09A7 56            add b, a
1038   09A8 E4            pop a
1039   09A9             ; END TERMS
1040   09A9 E7            pop d
1041   09AA FD 43         mov [d], b
1042   09AC             ;; break; 
1043   09AC 0A 3B 0A      jmp _switch15_exit ; case break
1044   09AF             _switch15_case4:
1045   09AF             ;; print_unsigned(*(unsigned int*)p); 
1046   09AF FA FF FF      lea d, [bp + -1] ; $p
1047   09B2 2A            mov b, [d]
1048   09B3 74            mov d, b
1049   09B4 2A            mov b, [d]
1050   09B5 FD AB         swp b
1051   09B7 D8            push b
1052   09B8 07 8B 14      call print_unsigned
1053   09BB 51 02 00      add sp, 2
1054   09BE             ;; p = p + 2; 
1055   09BE FA FF FF      lea d, [bp + -1] ; $p
1056   09C1 DA            push d
1057   09C2 FA FF FF      lea d, [bp + -1] ; $p
1058   09C5 2A            mov b, [d]
1059   09C6             ; START TERMS
1060   09C6 D7            push a
1061   09C7 11            mov a, b
1062   09C8 26 02 00      mov b, $2
1063   09CB 56            add b, a
1064   09CC E4            pop a
1065   09CD             ; END TERMS
1066   09CD E7            pop d
1067   09CE FD 43         mov [d], b
1068   09D0             ;; break; 
1069   09D0 0A 3B 0A      jmp _switch15_exit ; case break
1070   09D3             _switch15_case5:
1071   09D3             
1072   09D3             ; --- BEGIN INLINE ASM BLOCK
1073   09D3 FA FF FF      lea d, [bp + -1] ; $p
1074   09D6 FD 2A         mov d, [d]
1075   09D8 2A            mov b, [d]
1076   09D9 07 91 18      call print_u16x
1077   09DC             ; --- END INLINE ASM BLOCK
1078   09DC             
1079   09DC             ;; p = p + 2; 
1080   09DC FA FF FF      lea d, [bp + -1] ; $p
1081   09DF DA            push d
1082   09E0 FA FF FF      lea d, [bp + -1] ; $p
1083   09E3 2A            mov b, [d]
1084   09E4             ; START TERMS
1085   09E4 D7            push a
1086   09E5 11            mov a, b
1087   09E6 26 02 00      mov b, $2
1088   09E9 56            add b, a
1089   09EA E4            pop a
1090   09EB             ; END TERMS
1091   09EB E7            pop d
1092   09EC FD 43         mov [d], b
1093   09EE             ;; break; 
1094   09EE 0A 3B 0A      jmp _switch15_exit ; case break
1095   09F1             _switch15_case6:
1096   09F1             
1097   09F1             ; --- BEGIN INLINE ASM BLOCK
1098   09F1 FA FF FF      lea d, [bp + -1] ; $p
1099   09F4 FD 2A         mov d, [d]
1100   09F6 1E            mov al, [d]
1101   09F7 23            mov ah, al
1102   09F8 07 EF 16      call _putchar
1103   09FB             ; --- END INLINE ASM BLOCK
1104   09FB             
1105   09FB             ;; p = p + 2; 
1106   09FB FA FF FF      lea d, [bp + -1] ; $p
1107   09FE DA            push d
1108   09FF FA FF FF      lea d, [bp + -1] ; $p
1109   0A02 2A            mov b, [d]
1110   0A03             ; START TERMS
1111   0A03 D7            push a
1112   0A04 11            mov a, b
1113   0A05 26 02 00      mov b, $2
1114   0A08 56            add b, a
1115   0A09 E4            pop a
1116   0A0A             ; END TERMS
1117   0A0A E7            pop d
1118   0A0B FD 43         mov [d], b
1119   0A0D             ;; break; 
1120   0A0D 0A 3B 0A      jmp _switch15_exit ; case break
1121   0A10             _switch15_case7:
1122   0A10             
1123   0A10             ; --- BEGIN INLINE ASM BLOCK
1124   0A10 FA FF FF      lea d, [bp + -1] ; $p
1125   0A13 FD 2A         mov d, [d]
1126   0A15 FD 2A         mov d, [d]
1127   0A17 07 39 18      call _puts
1128   0A1A             ; --- END INLINE ASM BLOCK
1129   0A1A             
1130   0A1A             ;; p = p + 2; 
1131   0A1A FA FF FF      lea d, [bp + -1] ; $p
1132   0A1D DA            push d
1133   0A1E FA FF FF      lea d, [bp + -1] ; $p
1134   0A21 2A            mov b, [d]
1135   0A22             ; START TERMS
1136   0A22 D7            push a
1137   0A23 11            mov a, b
1138   0A24 26 02 00      mov b, $2
1139   0A27 56            add b, a
1140   0A28 E4            pop a
1141   0A29             ; END TERMS
1142   0A29 E7            pop d
1143   0A2A FD 43         mov [d], b
1144   0A2C             ;; break; 
1145   0A2C 0A 3B 0A      jmp _switch15_exit ; case break
1146   0A2F             _switch15_default:
1147   0A2F             ;; print("Error: Unknown argument type.\n"); 
1148   0A2F 26 1C 2C      mov b, _s3 ; "Error: Unknown argument type.\n"
1149   0A32 FD AB         swp b
1150   0A34 D8            push b
1151   0A35 07 A6 15      call print
1152   0A38 51 02 00      add sp, 2
1153   0A3B             _switch15_exit:
1154   0A3B             ;; format_p++; 
1155   0A3B FA FD FF      lea d, [bp + -3] ; $format_p
1156   0A3E 2A            mov b, [d]
1157   0A3F FD 77         inc b
1158   0A41 FA FD FF      lea d, [bp + -3] ; $format_p
1159   0A44 FD 43         mov [d], b
1160   0A46 FD 7D         dec b
1161   0A48 0A 67 0A      jmp _if14_exit
1162   0A4B             _if14_else:
1163   0A4B             ;; putchar(*format_p); 
1164   0A4B FA FD FF      lea d, [bp + -3] ; $format_p
1165   0A4E 2A            mov b, [d]
1166   0A4F 74            mov d, b
1167   0A50 32            mov bl, [d]
1168   0A51 A7 00         mov bh, 0
1169   0A53 DD            push bl
1170   0A54 07 5E 15      call putchar
1171   0A57 51 01 00      add sp, 1
1172   0A5A             ;; format_p++; 
1173   0A5A FA FD FF      lea d, [bp + -3] ; $format_p
1174   0A5D 2A            mov b, [d]
1175   0A5E FD 77         inc b
1176   0A60 FA FD FF      lea d, [bp + -3] ; $format_p
1177   0A63 FD 43         mov [d], b
1178   0A65 FD 7D         dec b
1179   0A67             _if14_exit:
1180   0A67             _if13_exit:
1181   0A67             _for12_update:
1182   0A67 0A 2A 08      jmp _for12_cond
1183   0A6A             _for12_exit:
1184   0A6A F9            leave
1185   0A6B 09            ret
1186   0A6C             
1187   0A6C             scanf:
1188   0A6C F8 00 00      enter 0 ; (push bp; mov bp, sp)
1189   0A6F             ;; char *p, *format_p; 
1190   0A6F 52 02 00      sub sp, 2 ; p
1191   0A72 52 02 00      sub sp, 2 ; format_p
1192   0A75             ;; char c; 
1193   0A75 52 01 00      sub sp, 1 ; c
1194   0A78             ;; int i; 
1195   0A78 52 02 00      sub sp, 2 ; i
1196   0A7B             ;; char input_string[  512                    ]; 
1197   0A7B 52 00 02      sub sp, 512 ; input_string
1198   0A7E             ;; format_p = format; 
1199   0A7E FA FD FF      lea d, [bp + -3] ; $format_p
1200   0A81 DA            push d
1201   0A82 FA 05 00      lea d, [bp + 5] ; $format
1202   0A85 2A            mov b, [d]
1203   0A86 E7            pop d
1204   0A87 FD 43         mov [d], b
1205   0A89             ;; p = &format + 2; 
1206   0A89 FA FF FF      lea d, [bp + -1] ; $p
1207   0A8C DA            push d
1208   0A8D FA 05 00      lea d, [bp + 5] ; $format
1209   0A90 2D            mov b, d
1210   0A91             ; START TERMS
1211   0A91 D7            push a
1212   0A92 11            mov a, b
1213   0A93 26 02 00      mov b, $2
1214   0A96 56            add b, a
1215   0A97 E4            pop a
1216   0A98             ; END TERMS
1217   0A98 E7            pop d
1218   0A99 FD 43         mov [d], b
1219   0A9B             ;; for(;;){ 
1220   0A9B             _for19_init:
1221   0A9B             _for19_cond:
1222   0A9B             _for19_block:
1223   0A9B             ;; if(!*format_p) break; 
1224   0A9B             _if20_cond:
1225   0A9B FA FD FF      lea d, [bp + -3] ; $format_p
1226   0A9E 2A            mov b, [d]
1227   0A9F 74            mov d, b
1228   0AA0 32            mov bl, [d]
1229   0AA1 A7 00         mov bh, 0
1230   0AA3 C0 00 00      cmp b, 0
1231   0AA6 FD 71         seq ; !
1232   0AA8 C0 00 00      cmp b, 0
1233   0AAB C6 B4 0A      je _if20_else
1234   0AAE             _if20_true:
1235   0AAE             ;; break; 
1236   0AAE 0A B1 0C      jmp _for19_exit ; for break
1237   0AB1 0A AE 0C      jmp _if20_exit
1238   0AB4             _if20_else:
1239   0AB4             ;; if(*format_p == '%'){ 
1240   0AB4             _if21_cond:
1241   0AB4 FA FD FF      lea d, [bp + -3] ; $format_p
1242   0AB7 2A            mov b, [d]
1243   0AB8 74            mov d, b
1244   0AB9 32            mov bl, [d]
1245   0ABA A7 00         mov bh, 0
1246   0ABC             ; START RELATIONAL
1247   0ABC D7            push a
1248   0ABD 11            mov a, b
1249   0ABE 26 25 00      mov b, $25
1250   0AC1 B0            cmp a, b
1251   0AC2 FD 71         seq ; ==
1252   0AC4 E4            pop a
1253   0AC5             ; END RELATIONAL
1254   0AC5 C0 00 00      cmp b, 0
1255   0AC8 C6 92 0C      je _if21_else
1256   0ACB             _if21_true:
1257   0ACB             ;; format_p++; 
1258   0ACB FA FD FF      lea d, [bp + -3] ; $format_p
1259   0ACE 2A            mov b, [d]
1260   0ACF FD 77         inc b
1261   0AD1 FA FD FF      lea d, [bp + -3] ; $format_p
1262   0AD4 FD 43         mov [d], b
1263   0AD6 FD 7D         dec b
1264   0AD8             ;; switch(*format_p){ 
1265   0AD8             _switch22_expr:
1266   0AD8 FA FD FF      lea d, [bp + -3] ; $format_p
1267   0ADB 2A            mov b, [d]
1268   0ADC 74            mov d, b
1269   0ADD 32            mov bl, [d]
1270   0ADE A7 00         mov bh, 0
1271   0AE0             _switch22_comparisons:
1272   0AE0 C1 6C         cmp bl, $6c
1273   0AE2 C6 0E 0B      je _switch22_case0
1274   0AE5 C1 4C         cmp bl, $4c
1275   0AE7 C6 0E 0B      je _switch22_case1
1276   0AEA C1 64         cmp bl, $64
1277   0AEC C6 A0 0B      je _switch22_case2
1278   0AEF C1 69         cmp bl, $69
1279   0AF1 C6 A0 0B      je _switch22_case3
1280   0AF4 C1 75         cmp bl, $75
1281   0AF6 C6 CD 0B      je _switch22_case4
1282   0AF9 C1 78         cmp bl, $78
1283   0AFB C6 FA 0B      je _switch22_case5
1284   0AFE C1 63         cmp bl, $63
1285   0B00 C6 0F 0C      je _switch22_case6
1286   0B03 C1 73         cmp bl, $73
1287   0B05 C6 3E 0C      je _switch22_case7
1288   0B08 0A 76 0C      jmp _switch22_default
1289   0B0B 0A 82 0C      jmp _switch22_exit
1290   0B0E             _switch22_case0:
1291   0B0E             _switch22_case1:
1292   0B0E             ;; format_p++; 
1293   0B0E FA FD FF      lea d, [bp + -3] ; $format_p
1294   0B11 2A            mov b, [d]
1295   0B12 FD 77         inc b
1296   0B14 FA FD FF      lea d, [bp + -3] ; $format_p
1297   0B17 FD 43         mov [d], b
1298   0B19 FD 7D         dec b
1299   0B1B             ;; if(*format_p == 'd' || *format_p == 'i'); 
1300   0B1B             _if23_cond:
1301   0B1B FA FD FF      lea d, [bp + -3] ; $format_p
1302   0B1E 2A            mov b, [d]
1303   0B1F 74            mov d, b
1304   0B20 32            mov bl, [d]
1305   0B21 A7 00         mov bh, 0
1306   0B23             ; START RELATIONAL
1307   0B23 D7            push a
1308   0B24 11            mov a, b
1309   0B25 26 64 00      mov b, $64
1310   0B28 B0            cmp a, b
1311   0B29 FD 71         seq ; ==
1312   0B2B E4            pop a
1313   0B2C             ; END RELATIONAL
1314   0B2C             ; START LOGICAL OR
1315   0B2C D7            push a
1316   0B2D 11            mov a, b
1317   0B2E FA FD FF      lea d, [bp + -3] ; $format_p
1318   0B31 2A            mov b, [d]
1319   0B32 74            mov d, b
1320   0B33 32            mov bl, [d]
1321   0B34 A7 00         mov bh, 0
1322   0B36             ; START RELATIONAL
1323   0B36 D7            push a
1324   0B37 11            mov a, b
1325   0B38 26 69 00      mov b, $69
1326   0B3B B0            cmp a, b
1327   0B3C FD 71         seq ; ==
1328   0B3E E4            pop a
1329   0B3F             ; END RELATIONAL
1330   0B3F FD A8         sor a, b ; ||
1331   0B41 E4            pop a
1332   0B42             ; END LOGICAL OR
1333   0B42 C0 00 00      cmp b, 0
1334   0B45 C6 4B 0B      je _if23_else
1335   0B48             _if23_true:
1336   0B48             ;; ; 
1337   0B48 0A 8B 0B      jmp _if23_exit
1338   0B4B             _if23_else:
1339   0B4B             ;; if(*format_p == 'u'); 
1340   0B4B             _if24_cond:
1341   0B4B FA FD FF      lea d, [bp + -3] ; $format_p
1342   0B4E 2A            mov b, [d]
1343   0B4F 74            mov d, b
1344   0B50 32            mov bl, [d]
1345   0B51 A7 00         mov bh, 0
1346   0B53             ; START RELATIONAL
1347   0B53 D7            push a
1348   0B54 11            mov a, b
1349   0B55 26 75 00      mov b, $75
1350   0B58 B0            cmp a, b
1351   0B59 FD 71         seq ; ==
1352   0B5B E4            pop a
1353   0B5C             ; END RELATIONAL
1354   0B5C C0 00 00      cmp b, 0
1355   0B5F C6 65 0B      je _if24_else
1356   0B62             _if24_true:
1357   0B62             ;; ; 
1358   0B62 0A 8B 0B      jmp _if24_exit
1359   0B65             _if24_else:
1360   0B65             ;; if(*format_p == 'x'); 
1361   0B65             _if25_cond:
1362   0B65 FA FD FF      lea d, [bp + -3] ; $format_p
1363   0B68 2A            mov b, [d]
1364   0B69 74            mov d, b
1365   0B6A 32            mov bl, [d]
1366   0B6B A7 00         mov bh, 0
1367   0B6D             ; START RELATIONAL
1368   0B6D D7            push a
1369   0B6E 11            mov a, b
1370   0B6F 26 78 00      mov b, $78
1371   0B72 B0            cmp a, b
1372   0B73 FD 71         seq ; ==
1373   0B75 E4            pop a
1374   0B76             ; END RELATIONAL
1375   0B76 C0 00 00      cmp b, 0
1376   0B79 C6 7F 0B      je _if25_else
1377   0B7C             _if25_true:
1378   0B7C             ;; ; 
1379   0B7C 0A 8B 0B      jmp _if25_exit
1380   0B7F             _if25_else:
1381   0B7F             ;; err("Unexpected format in printf."); 
1382   0B7F 26 FF 2B      mov b, _s2 ; "Unexpected format in printf."
1383   0B82 FD AB         swp b
1384   0B84 D8            push b
1385   0B85 07 B3 0C      call err
1386   0B88 51 02 00      add sp, 2
1387   0B8B             _if25_exit:
1388   0B8B             _if24_exit:
1389   0B8B             _if23_exit:
1390   0B8B             ;; p = p + 4; 
1391   0B8B FA FF FF      lea d, [bp + -1] ; $p
1392   0B8E DA            push d
1393   0B8F FA FF FF      lea d, [bp + -1] ; $p
1394   0B92 2A            mov b, [d]
1395   0B93             ; START TERMS
1396   0B93 D7            push a
1397   0B94 11            mov a, b
1398   0B95 26 04 00      mov b, $4
1399   0B98 56            add b, a
1400   0B99 E4            pop a
1401   0B9A             ; END TERMS
1402   0B9A E7            pop d
1403   0B9B FD 43         mov [d], b
1404   0B9D             ;; break; 
1405   0B9D 0A 82 0C      jmp _switch22_exit ; case break
1406   0BA0             _switch22_case2:
1407   0BA0             _switch22_case3:
1408   0BA0             ;; i = scann(); 
1409   0BA0 FA FA FF      lea d, [bp + -6] ; $i
1410   0BA3 DA            push d
1411   0BA4 07 81 15      call scann
1412   0BA7 E7            pop d
1413   0BA8 FD 43         mov [d], b
1414   0BAA             ;; **(int **)p = i; 
1415   0BAA FA FF FF      lea d, [bp + -1] ; $p
1416   0BAD 2A            mov b, [d]
1417   0BAE 74            mov d, b
1418   0BAF 2A            mov b, [d]
1419   0BB0 D8            push b
1420   0BB1 FA FA FF      lea d, [bp + -6] ; $i
1421   0BB4 2A            mov b, [d]
1422   0BB5 E7            pop d
1423   0BB6 FD 43         mov [d], b
1424   0BB8             ;; p = p + 2; 
1425   0BB8 FA FF FF      lea d, [bp + -1] ; $p
1426   0BBB DA            push d
1427   0BBC FA FF FF      lea d, [bp + -1] ; $p
1428   0BBF 2A            mov b, [d]
1429   0BC0             ; START TERMS
1430   0BC0 D7            push a
1431   0BC1 11            mov a, b
1432   0BC2 26 02 00      mov b, $2
1433   0BC5 56            add b, a
1434   0BC6 E4            pop a
1435   0BC7             ; END TERMS
1436   0BC7 E7            pop d
1437   0BC8 FD 43         mov [d], b
1438   0BCA             ;; break; 
1439   0BCA 0A 82 0C      jmp _switch22_exit ; case break
1440   0BCD             _switch22_case4:
1441   0BCD             ;; i = scann(); 
1442   0BCD FA FA FF      lea d, [bp + -6] ; $i
1443   0BD0 DA            push d
1444   0BD1 07 81 15      call scann
1445   0BD4 E7            pop d
1446   0BD5 FD 43         mov [d], b
1447   0BD7             ;; **(int **)p = i; 
1448   0BD7 FA FF FF      lea d, [bp + -1] ; $p
1449   0BDA 2A            mov b, [d]
1450   0BDB 74            mov d, b
1451   0BDC 2A            mov b, [d]
1452   0BDD D8            push b
1453   0BDE FA FA FF      lea d, [bp + -6] ; $i
1454   0BE1 2A            mov b, [d]
1455   0BE2 E7            pop d
1456   0BE3 FD 43         mov [d], b
1457   0BE5             ;; p = p + 2; 
1458   0BE5 FA FF FF      lea d, [bp + -1] ; $p
1459   0BE8 DA            push d
1460   0BE9 FA FF FF      lea d, [bp + -1] ; $p
1461   0BEC 2A            mov b, [d]
1462   0BED             ; START TERMS
1463   0BED D7            push a
1464   0BEE 11            mov a, b
1465   0BEF 26 02 00      mov b, $2
1466   0BF2 56            add b, a
1467   0BF3 E4            pop a
1468   0BF4             ; END TERMS
1469   0BF4 E7            pop d
1470   0BF5 FD 43         mov [d], b
1471   0BF7             ;; break; 
1472   0BF7 0A 82 0C      jmp _switch22_exit ; case break
1473   0BFA             _switch22_case5:
1474   0BFA             ;; p = p + 2; 
1475   0BFA FA FF FF      lea d, [bp + -1] ; $p
1476   0BFD DA            push d
1477   0BFE FA FF FF      lea d, [bp + -1] ; $p
1478   0C01 2A            mov b, [d]
1479   0C02             ; START TERMS
1480   0C02 D7            push a
1481   0C03 11            mov a, b
1482   0C04 26 02 00      mov b, $2
1483   0C07 56            add b, a
1484   0C08 E4            pop a
1485   0C09             ; END TERMS
1486   0C09 E7            pop d
1487   0C0A FD 43         mov [d], b
1488   0C0C             ;; break; 
1489   0C0C 0A 82 0C      jmp _switch22_exit ; case break
1490   0C0F             _switch22_case6:
1491   0C0F             ;; c = getchar(); 
1492   0C0F FA FC FF      lea d, [bp + -4] ; $c
1493   0C12 DA            push d
1494   0C13 07 6B 15      call getchar
1495   0C16 E7            pop d
1496   0C17 FD 3E         mov [d], bl
1497   0C19             ;; **(char **)p = c; 
1498   0C19 FA FF FF      lea d, [bp + -1] ; $p
1499   0C1C 2A            mov b, [d]
1500   0C1D 74            mov d, b
1501   0C1E 2A            mov b, [d]
1502   0C1F D8            push b
1503   0C20 FA FC FF      lea d, [bp + -4] ; $c
1504   0C23 32            mov bl, [d]
1505   0C24 A7 00         mov bh, 0
1506   0C26 E7            pop d
1507   0C27 FD 43         mov [d], b
1508   0C29             ;; p = p + 2; 
1509   0C29 FA FF FF      lea d, [bp + -1] ; $p
1510   0C2C DA            push d
1511   0C2D FA FF FF      lea d, [bp + -1] ; $p
1512   0C30 2A            mov b, [d]
1513   0C31             ; START TERMS
1514   0C31 D7            push a
1515   0C32 11            mov a, b
1516   0C33 26 02 00      mov b, $2
1517   0C36 56            add b, a
1518   0C37 E4            pop a
1519   0C38             ; END TERMS
1520   0C38 E7            pop d
1521   0C39 FD 43         mov [d], b
1522   0C3B             ;; break; 
1523   0C3B 0A 82 0C      jmp _switch22_exit ; case break
1524   0C3E             _switch22_case7:
1525   0C3E             ;; gets(input_string); 
1526   0C3E FA FA FD      lea d, [bp + -518] ; $input_string
1527   0C41 2D            mov b, d
1528   0C42 FD AB         swp b
1529   0C44 D8            push b
1530   0C45 07 3F 0E      call gets
1531   0C48 51 02 00      add sp, 2
1532   0C4B             ;; strcpy(*(char **)p, input_string); 
1533   0C4B FA FA FD      lea d, [bp + -518] ; $input_string
1534   0C4E 2D            mov b, d
1535   0C4F FD AB         swp b
1536   0C51 D8            push b
1537   0C52 FA FF FF      lea d, [bp + -1] ; $p
1538   0C55 2A            mov b, [d]
1539   0C56 74            mov d, b
1540   0C57 2A            mov b, [d]
1541   0C58 FD AB         swp b
1542   0C5A D8            push b
1543   0C5B 07 5E 04      call strcpy
1544   0C5E 51 04 00      add sp, 4
1545   0C61             ;; p = p + 2; 
1546   0C61 FA FF FF      lea d, [bp + -1] ; $p
1547   0C64 DA            push d
1548   0C65 FA FF FF      lea d, [bp + -1] ; $p
1549   0C68 2A            mov b, [d]
1550   0C69             ; START TERMS
1551   0C69 D7            push a
1552   0C6A 11            mov a, b
1553   0C6B 26 02 00      mov b, $2
1554   0C6E 56            add b, a
1555   0C6F E4            pop a
1556   0C70             ; END TERMS
1557   0C70 E7            pop d
1558   0C71 FD 43         mov [d], b
1559   0C73             ;; break; 
1560   0C73 0A 82 0C      jmp _switch22_exit ; case break
1561   0C76             _switch22_default:
1562   0C76             ;; print("Error: Unknown argument type.\n"); 
1563   0C76 26 1C 2C      mov b, _s3 ; "Error: Unknown argument type.\n"
1564   0C79 FD AB         swp b
1565   0C7B D8            push b
1566   0C7C 07 A6 15      call print
1567   0C7F 51 02 00      add sp, 2
1568   0C82             _switch22_exit:
1569   0C82             ;; format_p++; 
1570   0C82 FA FD FF      lea d, [bp + -3] ; $format_p
1571   0C85 2A            mov b, [d]
1572   0C86 FD 77         inc b
1573   0C88 FA FD FF      lea d, [bp + -3] ; $format_p
1574   0C8B FD 43         mov [d], b
1575   0C8D FD 7D         dec b
1576   0C8F 0A AE 0C      jmp _if21_exit
1577   0C92             _if21_else:
1578   0C92             ;; putchar(*format_p); 
1579   0C92 FA FD FF      lea d, [bp + -3] ; $format_p
1580   0C95 2A            mov b, [d]
1581   0C96 74            mov d, b
1582   0C97 32            mov bl, [d]
1583   0C98 A7 00         mov bh, 0
1584   0C9A DD            push bl
1585   0C9B 07 5E 15      call putchar
1586   0C9E 51 01 00      add sp, 1
1587   0CA1             ;; format_p++; 
1588   0CA1 FA FD FF      lea d, [bp + -3] ; $format_p
1589   0CA4 2A            mov b, [d]
1590   0CA5 FD 77         inc b
1591   0CA7 FA FD FF      lea d, [bp + -3] ; $format_p
1592   0CAA FD 43         mov [d], b
1593   0CAC FD 7D         dec b
1594   0CAE             _if21_exit:
1595   0CAE             _if20_exit:
1596   0CAE             _for19_update:
1597   0CAE 0A 9B 0A      jmp _for19_cond
1598   0CB1             _for19_exit:
1599   0CB1 F9            leave
1600   0CB2 09            ret
1601   0CB3             
1602   0CB3             err:
1603   0CB3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1604   0CB6             ;; print(e); 
1605   0CB6 FA 05 00      lea d, [bp + 5] ; $e
1606   0CB9 2A            mov b, [d]
1607   0CBA FD AB         swp b
1608   0CBC D8            push b
1609   0CBD 07 A6 15      call print
1610   0CC0 51 02 00      add sp, 2
1611   0CC3 F9            leave
1612   0CC4 09            ret
1613   0CC5             
1614   0CC5             printx32:
1615   0CC5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1616   0CC8             
1617   0CC8             ; --- BEGIN INLINE ASM BLOCK
1618   0CC8 FA 05 00      lea d, [bp + 5] ; $hex
1619   0CCB 2B 02 00      mov b, [d+2]
1620   0CCE 07 91 18      call print_u16x
1621   0CD1 2A            mov b, [d]
1622   0CD2 07 91 18      call print_u16x
1623   0CD5             ; --- END INLINE ASM BLOCK
1624   0CD5             
1625   0CD5 F9            leave
1626   0CD6 09            ret
1627   0CD7             
1628   0CD7             printx16:
1629   0CD7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1630   0CDA             
1631   0CDA             ; --- BEGIN INLINE ASM BLOCK
1632   0CDA FA 05 00      lea d, [bp + 5] ; $hex
1633   0CDD 2A            mov b, [d]
1634   0CDE 07 91 18      call print_u16x
1635   0CE1             ; --- END INLINE ASM BLOCK
1636   0CE1             
1637   0CE1 F9            leave
1638   0CE2 09            ret
1639   0CE3             
1640   0CE3             printx8:
1641   0CE3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1642   0CE6             
1643   0CE6             ; --- BEGIN INLINE ASM BLOCK
1644   0CE6 FA 05 00      lea d, [bp + 5] ; $hex
1645   0CE9 32            mov bl, [d]
1646   0CEA 07 D5 18      call print_u8x
1647   0CED             ; --- END INLINE ASM BLOCK
1648   0CED             
1649   0CED F9            leave
1650   0CEE 09            ret
1651   0CEF             
1652   0CEF             hex_str_to_int:
1653   0CEF F8 00 00      enter 0 ; (push bp; mov bp, sp)
1654   0CF2             ;; int value = 0; 
1655   0CF2 52 02 00      sub sp, 2 ; value
1656   0CF5             ; --- START LOCAL VAR INITIALIZATION
1657   0CF5 FA FF FF      lea d, [bp + -1] ; $value
1658   0CF8 DA            push d
1659   0CF9 26 00 00      mov b, $0
1660   0CFC E7            pop d
1661   0CFD FD 43         mov [d], b
1662   0CFF             ; --- END LOCAL VAR INITIALIZATION
1663   0CFF             ;; int i; 
1664   0CFF 52 02 00      sub sp, 2 ; i
1665   0D02             ;; char hex_char; 
1666   0D02 52 01 00      sub sp, 1 ; hex_char
1667   0D05             ;; int len; 
1668   0D05 52 02 00      sub sp, 2 ; len
1669   0D08             ;; len = strlen(hex_string); 
1670   0D08 FA FA FF      lea d, [bp + -6] ; $len
1671   0D0B DA            push d
1672   0D0C FA 05 00      lea d, [bp + 5] ; $hex_string
1673   0D0F 2A            mov b, [d]
1674   0D10 FD AB         swp b
1675   0D12 D8            push b
1676   0D13 07 D8 05      call strlen
1677   0D16 51 02 00      add sp, 2
1678   0D19 E7            pop d
1679   0D1A FD 43         mov [d], b
1680   0D1C             ;; for (i = 0; i < len; i++) { 
1681   0D1C             _for26_init:
1682   0D1C FA FD FF      lea d, [bp + -3] ; $i
1683   0D1F DA            push d
1684   0D20 26 00 00      mov b, $0
1685   0D23 E7            pop d
1686   0D24 FD 43         mov [d], b
1687   0D26             _for26_cond:
1688   0D26 FA FD FF      lea d, [bp + -3] ; $i
1689   0D29 2A            mov b, [d]
1690   0D2A             ; START RELATIONAL
1691   0D2A D7            push a
1692   0D2B 11            mov a, b
1693   0D2C FA FA FF      lea d, [bp + -6] ; $len
1694   0D2F 2A            mov b, [d]
1695   0D30 B0            cmp a, b
1696   0D31 FD 73         slt ; < (signed)
1697   0D33 E4            pop a
1698   0D34             ; END RELATIONAL
1699   0D34 C0 00 00      cmp b, 0
1700   0D37 C6 39 0E      je _for26_exit
1701   0D3A             _for26_block:
1702   0D3A             ;; hex_char = hex_string[i]; 
1703   0D3A FA FC FF      lea d, [bp + -4] ; $hex_char
1704   0D3D DA            push d
1705   0D3E FA 05 00      lea d, [bp + 5] ; $hex_string
1706   0D41 FD 2A         mov d, [d]
1707   0D43 D7            push a
1708   0D44 DA            push d
1709   0D45 FA FD FF      lea d, [bp + -3] ; $i
1710   0D48 2A            mov b, [d]
1711   0D49 E7            pop d
1712   0D4A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1713   0D4E E4            pop a
1714   0D4F 32            mov bl, [d]
1715   0D50 A7 00         mov bh, 0
1716   0D52 E7            pop d
1717   0D53 FD 3E         mov [d], bl
1718   0D55             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1719   0D55             _if27_cond:
1720   0D55 FA FC FF      lea d, [bp + -4] ; $hex_char
1721   0D58 32            mov bl, [d]
1722   0D59 A7 00         mov bh, 0
1723   0D5B             ; START RELATIONAL
1724   0D5B D7            push a
1725   0D5C 11            mov a, b
1726   0D5D 26 61 00      mov b, $61
1727   0D60 B0            cmp a, b
1728   0D61 FD 80         sge ; >=
1729   0D63 E4            pop a
1730   0D64             ; END RELATIONAL
1731   0D64             ; START LOGICAL AND
1732   0D64 D7            push a
1733   0D65 11            mov a, b
1734   0D66 FA FC FF      lea d, [bp + -4] ; $hex_char
1735   0D69 32            mov bl, [d]
1736   0D6A A7 00         mov bh, 0
1737   0D6C             ; START RELATIONAL
1738   0D6C D7            push a
1739   0D6D 11            mov a, b
1740   0D6E 26 66 00      mov b, $66
1741   0D71 B0            cmp a, b
1742   0D72 FD 74         sle ; <= (signed)
1743   0D74 E4            pop a
1744   0D75             ; END RELATIONAL
1745   0D75 FD A7         sand a, b
1746   0D77 E4            pop a
1747   0D78             ; END LOGICAL AND
1748   0D78 C0 00 00      cmp b, 0
1749   0D7B C6 AC 0D      je _if27_else
1750   0D7E             _if27_true:
1751   0D7E             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1752   0D7E FA FF FF      lea d, [bp + -1] ; $value
1753   0D81 DA            push d
1754   0D82 FA FF FF      lea d, [bp + -1] ; $value
1755   0D85 2A            mov b, [d]
1756   0D86             ; START FACTORS
1757   0D86 D7            push a
1758   0D87 11            mov a, b
1759   0D88 26 10 00      mov b, $10
1760   0D8B AC            mul a, b ; *
1761   0D8C 11            mov a, b
1762   0D8D 27            mov b, a
1763   0D8E E4            pop a
1764   0D8F             ; END FACTORS
1765   0D8F             ; START TERMS
1766   0D8F D7            push a
1767   0D90 11            mov a, b
1768   0D91 FA FC FF      lea d, [bp + -4] ; $hex_char
1769   0D94 32            mov bl, [d]
1770   0D95 A7 00         mov bh, 0
1771   0D97             ; START TERMS
1772   0D97 D7            push a
1773   0D98 11            mov a, b
1774   0D99 26 61 00      mov b, $61
1775   0D9C 60            sub a, b
1776   0D9D 27            mov b, a
1777   0D9E 11            mov a, b
1778   0D9F 26 0A 00      mov b, $a
1779   0DA2 56            add b, a
1780   0DA3 E4            pop a
1781   0DA4             ; END TERMS
1782   0DA4 56            add b, a
1783   0DA5 E4            pop a
1784   0DA6             ; END TERMS
1785   0DA6 E7            pop d
1786   0DA7 FD 43         mov [d], b
1787   0DA9 0A 29 0E      jmp _if27_exit
1788   0DAC             _if27_else:
1789   0DAC             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1790   0DAC             _if28_cond:
1791   0DAC FA FC FF      lea d, [bp + -4] ; $hex_char
1792   0DAF 32            mov bl, [d]
1793   0DB0 A7 00         mov bh, 0
1794   0DB2             ; START RELATIONAL
1795   0DB2 D7            push a
1796   0DB3 11            mov a, b
1797   0DB4 26 41 00      mov b, $41
1798   0DB7 B0            cmp a, b
1799   0DB8 FD 80         sge ; >=
1800   0DBA E4            pop a
1801   0DBB             ; END RELATIONAL
1802   0DBB             ; START LOGICAL AND
1803   0DBB D7            push a
1804   0DBC 11            mov a, b
1805   0DBD FA FC FF      lea d, [bp + -4] ; $hex_char
1806   0DC0 32            mov bl, [d]
1807   0DC1 A7 00         mov bh, 0
1808   0DC3             ; START RELATIONAL
1809   0DC3 D7            push a
1810   0DC4 11            mov a, b
1811   0DC5 26 46 00      mov b, $46
1812   0DC8 B0            cmp a, b
1813   0DC9 FD 74         sle ; <= (signed)
1814   0DCB E4            pop a
1815   0DCC             ; END RELATIONAL
1816   0DCC FD A7         sand a, b
1817   0DCE E4            pop a
1818   0DCF             ; END LOGICAL AND
1819   0DCF C0 00 00      cmp b, 0
1820   0DD2 C6 03 0E      je _if28_else
1821   0DD5             _if28_true:
1822   0DD5             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1823   0DD5 FA FF FF      lea d, [bp + -1] ; $value
1824   0DD8 DA            push d
1825   0DD9 FA FF FF      lea d, [bp + -1] ; $value
1826   0DDC 2A            mov b, [d]
1827   0DDD             ; START FACTORS
1828   0DDD D7            push a
1829   0DDE 11            mov a, b
1830   0DDF 26 10 00      mov b, $10
1831   0DE2 AC            mul a, b ; *
1832   0DE3 11            mov a, b
1833   0DE4 27            mov b, a
1834   0DE5 E4            pop a
1835   0DE6             ; END FACTORS
1836   0DE6             ; START TERMS
1837   0DE6 D7            push a
1838   0DE7 11            mov a, b
1839   0DE8 FA FC FF      lea d, [bp + -4] ; $hex_char
1840   0DEB 32            mov bl, [d]
1841   0DEC A7 00         mov bh, 0
1842   0DEE             ; START TERMS
1843   0DEE D7            push a
1844   0DEF 11            mov a, b
1845   0DF0 26 41 00      mov b, $41
1846   0DF3 60            sub a, b
1847   0DF4 27            mov b, a
1848   0DF5 11            mov a, b
1849   0DF6 26 0A 00      mov b, $a
1850   0DF9 56            add b, a
1851   0DFA E4            pop a
1852   0DFB             ; END TERMS
1853   0DFB 56            add b, a
1854   0DFC E4            pop a
1855   0DFD             ; END TERMS
1856   0DFD E7            pop d
1857   0DFE FD 43         mov [d], b
1858   0E00 0A 29 0E      jmp _if28_exit
1859   0E03             _if28_else:
1860   0E03             ;; value = (value * 16) + (hex_char - '0'); 
1861   0E03 FA FF FF      lea d, [bp + -1] ; $value
1862   0E06 DA            push d
1863   0E07 FA FF FF      lea d, [bp + -1] ; $value
1864   0E0A 2A            mov b, [d]
1865   0E0B             ; START FACTORS
1866   0E0B D7            push a
1867   0E0C 11            mov a, b
1868   0E0D 26 10 00      mov b, $10
1869   0E10 AC            mul a, b ; *
1870   0E11 11            mov a, b
1871   0E12 27            mov b, a
1872   0E13 E4            pop a
1873   0E14             ; END FACTORS
1874   0E14             ; START TERMS
1875   0E14 D7            push a
1876   0E15 11            mov a, b
1877   0E16 FA FC FF      lea d, [bp + -4] ; $hex_char
1878   0E19 32            mov bl, [d]
1879   0E1A A7 00         mov bh, 0
1880   0E1C             ; START TERMS
1881   0E1C D7            push a
1882   0E1D 11            mov a, b
1883   0E1E 26 30 00      mov b, $30
1884   0E21 60            sub a, b
1885   0E22 27            mov b, a
1886   0E23 E4            pop a
1887   0E24             ; END TERMS
1888   0E24 56            add b, a
1889   0E25 E4            pop a
1890   0E26             ; END TERMS
1891   0E26 E7            pop d
1892   0E27 FD 43         mov [d], b
1893   0E29             _if28_exit:
1894   0E29             _if27_exit:
1895   0E29             _for26_update:
1896   0E29 FA FD FF      lea d, [bp + -3] ; $i
1897   0E2C 2A            mov b, [d]
1898   0E2D FD 77         inc b
1899   0E2F FA FD FF      lea d, [bp + -3] ; $i
1900   0E32 FD 43         mov [d], b
1901   0E34 FD 7D         dec b
1902   0E36 0A 26 0D      jmp _for26_cond
1903   0E39             _for26_exit:
1904   0E39             ;; return value; 
1905   0E39 FA FF FF      lea d, [bp + -1] ; $value
1906   0E3C 2A            mov b, [d]
1907   0E3D F9            leave
1908   0E3E 09            ret
1909   0E3F             
1910   0E3F             gets:
1911   0E3F F8 00 00      enter 0 ; (push bp; mov bp, sp)
1912   0E42             
1913   0E42             ; --- BEGIN INLINE ASM BLOCK
1914   0E42 FA 05 00      lea d, [bp + 5] ; $s
1915   0E45 15            mov a, [d]
1916   0E46 3C            mov d, a
1917   0E47 07 F6 16      call _gets
1918   0E4A             ; --- END INLINE ASM BLOCK
1919   0E4A             
1920   0E4A             ;; return strlen(s); 
1921   0E4A FA 05 00      lea d, [bp + 5] ; $s
1922   0E4D 2A            mov b, [d]
1923   0E4E FD AB         swp b
1924   0E50 D8            push b
1925   0E51 07 D8 05      call strlen
1926   0E54 51 02 00      add sp, 2
1927   0E57 F9            leave
1928   0E58 09            ret
1929   0E59             
1930   0E59             print_signed:
1931   0E59 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1932   0E5C             ;; char digits[5]; 
1933   0E5C 52 05 00      sub sp, 5 ; digits
1934   0E5F             ;; int i = 0; 
1935   0E5F 52 02 00      sub sp, 2 ; i
1936   0E62             ; --- START LOCAL VAR INITIALIZATION
1937   0E62 FA FA FF      lea d, [bp + -6] ; $i
1938   0E65 DA            push d
1939   0E66 26 00 00      mov b, $0
1940   0E69 E7            pop d
1941   0E6A FD 43         mov [d], b
1942   0E6C             ; --- END LOCAL VAR INITIALIZATION
1943   0E6C             ;; if (num < 0) { 
1944   0E6C             _if29_cond:
1945   0E6C FA 05 00      lea d, [bp + 5] ; $num
1946   0E6F 2A            mov b, [d]
1947   0E70             ; START RELATIONAL
1948   0E70 D7            push a
1949   0E71 11            mov a, b
1950   0E72 26 00 00      mov b, $0
1951   0E75 B0            cmp a, b
1952   0E76 FD 73         slt ; < (signed)
1953   0E78 E4            pop a
1954   0E79             ; END RELATIONAL
1955   0E79 C0 00 00      cmp b, 0
1956   0E7C C6 99 0E      je _if29_else
1957   0E7F             _if29_true:
1958   0E7F             ;; putchar('-'); 
1959   0E7F 26 2D 00      mov b, $2d
1960   0E82 DD            push bl
1961   0E83 07 5E 15      call putchar
1962   0E86 51 01 00      add sp, 1
1963   0E89             ;; num = -num; 
1964   0E89 FA 05 00      lea d, [bp + 5] ; $num
1965   0E8C DA            push d
1966   0E8D FA 05 00      lea d, [bp + 5] ; $num
1967   0E90 2A            mov b, [d]
1968   0E91 FD 97         neg b
1969   0E93 E7            pop d
1970   0E94 FD 43         mov [d], b
1971   0E96 0A BB 0E      jmp _if29_exit
1972   0E99             _if29_else:
1973   0E99             ;; if (num == 0) { 
1974   0E99             _if30_cond:
1975   0E99 FA 05 00      lea d, [bp + 5] ; $num
1976   0E9C 2A            mov b, [d]
1977   0E9D             ; START RELATIONAL
1978   0E9D D7            push a
1979   0E9E 11            mov a, b
1980   0E9F 26 00 00      mov b, $0
1981   0EA2 B0            cmp a, b
1982   0EA3 FD 71         seq ; ==
1983   0EA5 E4            pop a
1984   0EA6             ; END RELATIONAL
1985   0EA6 C0 00 00      cmp b, 0
1986   0EA9 C6 BB 0E      je _if30_exit
1987   0EAC             _if30_true:
1988   0EAC             ;; putchar('0'); 
1989   0EAC 26 30 00      mov b, $30
1990   0EAF DD            push bl
1991   0EB0 07 5E 15      call putchar
1992   0EB3 51 01 00      add sp, 1
1993   0EB6             ;; return; 
1994   0EB6 F9            leave
1995   0EB7 09            ret
1996   0EB8 0A BB 0E      jmp _if30_exit
1997   0EBB             _if30_exit:
1998   0EBB             _if29_exit:
1999   0EBB             ;; while (num > 0) { 
2000   0EBB             _while31_cond:
2001   0EBB FA 05 00      lea d, [bp + 5] ; $num
2002   0EBE 2A            mov b, [d]
2003   0EBF             ; START RELATIONAL
2004   0EBF D7            push a
2005   0EC0 11            mov a, b
2006   0EC1 26 00 00      mov b, $0
2007   0EC4 B0            cmp a, b
2008   0EC5 FD 7F         sgt ; >
2009   0EC7 E4            pop a
2010   0EC8             ; END RELATIONAL
2011   0EC8 C0 00 00      cmp b, 0
2012   0ECB C6 15 0F      je _while31_exit
2013   0ECE             _while31_block:
2014   0ECE             ;; digits[i] = '0' + (num % 10); 
2015   0ECE FA FC FF      lea d, [bp + -4] ; $digits
2016   0ED1 D7            push a
2017   0ED2 DA            push d
2018   0ED3 FA FA FF      lea d, [bp + -6] ; $i
2019   0ED6 2A            mov b, [d]
2020   0ED7 E7            pop d
2021   0ED8 5A            add d, b
2022   0ED9 E4            pop a
2023   0EDA DA            push d
2024   0EDB 26 30 00      mov b, $30
2025   0EDE             ; START TERMS
2026   0EDE D7            push a
2027   0EDF 11            mov a, b
2028   0EE0 FA 05 00      lea d, [bp + 5] ; $num
2029   0EE3 2A            mov b, [d]
2030   0EE4             ; START FACTORS
2031   0EE4 D7            push a
2032   0EE5 11            mov a, b
2033   0EE6 26 0A 00      mov b, $a
2034   0EE9 AE            div a, b ; 
2035   0EEA 11            mov a, b
2036   0EEB 27            mov b, a
2037   0EEC E4            pop a
2038   0EED             ; END FACTORS
2039   0EED 56            add b, a
2040   0EEE E4            pop a
2041   0EEF             ; END TERMS
2042   0EEF E7            pop d
2043   0EF0 FD 3E         mov [d], bl
2044   0EF2             ;; num = num / 10; 
2045   0EF2 FA 05 00      lea d, [bp + 5] ; $num
2046   0EF5 DA            push d
2047   0EF6 FA 05 00      lea d, [bp + 5] ; $num
2048   0EF9 2A            mov b, [d]
2049   0EFA             ; START FACTORS
2050   0EFA D7            push a
2051   0EFB 11            mov a, b
2052   0EFC 26 0A 00      mov b, $a
2053   0EFF AE            div a, b
2054   0F00 27            mov b, a
2055   0F01 E4            pop a
2056   0F02             ; END FACTORS
2057   0F02 E7            pop d
2058   0F03 FD 43         mov [d], b
2059   0F05             ;; i++; 
2060   0F05 FA FA FF      lea d, [bp + -6] ; $i
2061   0F08 2A            mov b, [d]
2062   0F09 FD 77         inc b
2063   0F0B FA FA FF      lea d, [bp + -6] ; $i
2064   0F0E FD 43         mov [d], b
2065   0F10 FD 7D         dec b
2066   0F12 0A BB 0E      jmp _while31_cond
2067   0F15             _while31_exit:
2068   0F15             ;; while (i > 0) { 
2069   0F15             _while32_cond:
2070   0F15 FA FA FF      lea d, [bp + -6] ; $i
2071   0F18 2A            mov b, [d]
2072   0F19             ; START RELATIONAL
2073   0F19 D7            push a
2074   0F1A 11            mov a, b
2075   0F1B 26 00 00      mov b, $0
2076   0F1E B0            cmp a, b
2077   0F1F FD 7F         sgt ; >
2078   0F21 E4            pop a
2079   0F22             ; END RELATIONAL
2080   0F22 C0 00 00      cmp b, 0
2081   0F25 C6 4E 0F      je _while32_exit
2082   0F28             _while32_block:
2083   0F28             ;; i--; 
2084   0F28 FA FA FF      lea d, [bp + -6] ; $i
2085   0F2B 2A            mov b, [d]
2086   0F2C FD 7D         dec b
2087   0F2E FA FA FF      lea d, [bp + -6] ; $i
2088   0F31 FD 43         mov [d], b
2089   0F33 FD 77         inc b
2090   0F35             ;; putchar(digits[i]); 
2091   0F35 FA FC FF      lea d, [bp + -4] ; $digits
2092   0F38 D7            push a
2093   0F39 DA            push d
2094   0F3A FA FA FF      lea d, [bp + -6] ; $i
2095   0F3D 2A            mov b, [d]
2096   0F3E E7            pop d
2097   0F3F 5A            add d, b
2098   0F40 E4            pop a
2099   0F41 32            mov bl, [d]
2100   0F42 A7 00         mov bh, 0
2101   0F44 DD            push bl
2102   0F45 07 5E 15      call putchar
2103   0F48 51 01 00      add sp, 1
2104   0F4B 0A 15 0F      jmp _while32_cond
2105   0F4E             _while32_exit:
2106   0F4E F9            leave
2107   0F4F 09            ret
2108   0F50             
2109   0F50             print_signed_long:
2110   0F50 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2111   0F53             ;; char digits[10]; 
2112   0F53 52 0A 00      sub sp, 10 ; digits
2113   0F56             ;; int i = 0; 
2114   0F56 52 02 00      sub sp, 2 ; i
2115   0F59             ; --- START LOCAL VAR INITIALIZATION
2116   0F59 FA F5 FF      lea d, [bp + -11] ; $i
2117   0F5C DA            push d
2118   0F5D 26 00 00      mov b, $0
2119   0F60 E7            pop d
2120   0F61 FD 43         mov [d], b
2121   0F63             ; --- END LOCAL VAR INITIALIZATION
2122   0F63             ;; if (num < 0) { 
2123   0F63             _if33_cond:
2124   0F63 FA 05 00      lea d, [bp + 5] ; $num
2125   0F66 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2126   0F69 FD 39         mov c, b ; And place it into C
2127   0F6B 2A            mov b, [d] ; Lower Word in B
2128   0F6C             ; START RELATIONAL
2129   0F6C D7            push a
2130   0F6D FD D8         push g
2131   0F6F 11            mov a, b
2132   0F70 FD 7A         mov g, c
2133   0F72 26 00 00      mov b, $0
2134   0F75 38 00 00      mov c, 0
2135   0F78 FD AF 00 00   cmp32 ga, cb
2135   0F7C 00 00 00 00 
2135   0F80 00 00 00 00 
2135   0F84 00 00 00 00 
2135   0F88 00 00 00 00 
2135   0F8C 00 00 00 00 
2135   0F90 00 00 00 00 
2135   0F94 00 00 00 00 
2135   0F98 00 00 00 00 
2135   0F9C 00 00 00 00 
2135   0FA0 00 00 00 00 
2135   0FA4 00 00 00 00 
2135   0FA8 00 00 00 00 
2135   0FAC 00 00 00 00 
2135   0FB0 00 00 00 00 
2135   0FB4 00 00 00 00 
2135   0FB8 00 00 00 00 
2135   0FBC 00 00 00 00 
2135   0FC0 00 00 00 00 
2135   0FC4 00 00 00 00 
2135   0FC8 00 00 00 00 
2135   0FCC 00 00 00 00 
2135   0FD0 00 00 00 00 
2135   0FD4 00 00 00 00 
2135   0FD8 00 00 00 00 
2135   0FDC 00 00 00 00 
2135   0FE0 00 00 00 00 
2135   0FE4 00 00 00 00 
2135   0FE8 00 00 00 00 
2135   0FEC 00 00 00 00 
2135   0FF0 00 00 00 00 
2135   0FF4 00 00 00 00 
2135   0FF8 00 00 00 00 
2135   0FFC 00 00 00 00 
2135   1000 00 00 00 00 
2135   1004 00 00 00 00 
2135   1008 00 00 00 00 
2135   100C 00 00 00 00 
2135   1010 00 00 00 00 
2135   1014 00 00 00 00 
2135   1018 00 00 00 00 
2135   101C 00 00 00 00 
2135   1020 00 00 00 00 
2135   1024 00 00 00 00 
2135   1028 00 00 00 00 
2135   102C 00 00 00 00 
2135   1030 00 00 00 00 
2135   1034 00 00 00 00 
2135   1038 00 00 00 00 
2135   103C 00 00 00 00 
2135   1040 00 00 00 00 
2135   1044 00 00 00 00 
2135   1048 00 00 00 00 
2135   104C 00 00 00 00 
2135   1050 00 00 00 00 
2135   1054 00 00 00 00 
2135   1058 00 00 00 00 
2135   105C 00 00 00 00 
2135   1060 00 00 00 00 
2135   1064 00 00 00 00 
2135   1068 00 00 00 00 
2135   106C 00 00 00 00 
2135   1070 00 00 00 00 
2135   1074 00 00 00 00 
2135   1078 00 
2136   1079 FD 73         slt ; <
2137   107B FD F1         pop g
2138   107D E4            pop a
2139   107E             ; END RELATIONAL
2140   107E C0 00 00      cmp b, 0
2141   1081 C6 A8 10      je _if33_else
2142   1084             _if33_true:
2143   1084             ;; putchar('-'); 
2144   1084 26 2D 00      mov b, $2d
2145   1087 DD            push bl
2146   1088 07 5E 15      call putchar
2147   108B 51 01 00      add sp, 1
2148   108E             ;; num = -num; 
2149   108E FA 05 00      lea d, [bp + 5] ; $num
2150   1091 DA            push d
2151   1092 FA 05 00      lea d, [bp + 5] ; $num
2152   1095 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2153   1098 FD 39         mov c, b ; And place it into C
2154   109A 2A            mov b, [d] ; Lower Word in B
2155   109B FD 97         neg b
2156   109D E7            pop d
2157   109E FD 43         mov [d], b
2158   10A0 28            mov b, c
2159   10A1 FD 44 02 00   mov [d + 2], b
2160   10A5 0A D8 11      jmp _if33_exit
2161   10A8             _if33_else:
2162   10A8             ;; if (num == 0) { 
2163   10A8             _if34_cond:
2164   10A8 FA 05 00      lea d, [bp + 5] ; $num
2165   10AB 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2166   10AE FD 39         mov c, b ; And place it into C
2167   10B0 2A            mov b, [d] ; Lower Word in B
2168   10B1             ; START RELATIONAL
2169   10B1 D7            push a
2170   10B2 FD D8         push g
2171   10B4 11            mov a, b
2172   10B5 FD 7A         mov g, c
2173   10B7 26 00 00      mov b, $0
2174   10BA 38 00 00      mov c, 0
2175   10BD FD AF 00 00   cmp32 ga, cb
2175   10C1 00 00 00 00 
2175   10C5 00 00 00 00 
2175   10C9 00 00 00 00 
2175   10CD 00 00 00 00 
2175   10D1 00 00 00 00 
2175   10D5 00 00 00 00 
2175   10D9 00 00 00 00 
2175   10DD 00 00 00 00 
2175   10E1 00 00 00 00 
2175   10E5 00 00 00 00 
2175   10E9 00 00 00 00 
2175   10ED 00 00 00 00 
2175   10F1 00 00 00 00 
2175   10F5 00 00 00 00 
2175   10F9 00 00 00 00 
2175   10FD 00 00 00 00 
2175   1101 00 00 00 00 
2175   1105 00 00 00 00 
2175   1109 00 00 00 00 
2175   110D 00 00 00 00 
2175   1111 00 00 00 00 
2175   1115 00 00 00 00 
2175   1119 00 00 00 00 
2175   111D 00 00 00 00 
2175   1121 00 00 00 00 
2175   1125 00 00 00 00 
2175   1129 00 00 00 00 
2175   112D 00 00 00 00 
2175   1131 00 00 00 00 
2175   1135 00 00 00 00 
2175   1139 00 00 00 00 
2175   113D 00 00 00 00 
2175   1141 00 00 00 00 
2175   1145 00 00 00 00 
2175   1149 00 00 00 00 
2175   114D 00 00 00 00 
2175   1151 00 00 00 00 
2175   1155 00 00 00 00 
2175   1159 00 00 00 00 
2175   115D 00 00 00 00 
2175   1161 00 00 00 00 
2175   1165 00 00 00 00 
2175   1169 00 00 00 00 
2175   116D 00 00 00 00 
2175   1171 00 00 00 00 
2175   1175 00 00 00 00 
2175   1179 00 00 00 00 
2175   117D 00 00 00 00 
2175   1181 00 00 00 00 
2175   1185 00 00 00 00 
2175   1189 00 00 00 00 
2175   118D 00 00 00 00 
2175   1191 00 00 00 00 
2175   1195 00 00 00 00 
2175   1199 00 00 00 00 
2175   119D 00 00 00 00 
2175   11A1 00 00 00 00 
2175   11A5 00 00 00 00 
2175   11A9 00 00 00 00 
2175   11AD 00 00 00 00 
2175   11B1 00 00 00 00 
2175   11B5 00 00 00 00 
2175   11B9 00 00 00 00 
2175   11BD 00 
2176   11BE FD 71         seq ; ==
2177   11C0 FD F1         pop g
2178   11C2 E4            pop a
2179   11C3             ; END RELATIONAL
2180   11C3 C0 00 00      cmp b, 0
2181   11C6 C6 D8 11      je _if34_exit
2182   11C9             _if34_true:
2183   11C9             ;; putchar('0'); 
2184   11C9 26 30 00      mov b, $30
2185   11CC DD            push bl
2186   11CD 07 5E 15      call putchar
2187   11D0 51 01 00      add sp, 1
2188   11D3             ;; return; 
2189   11D3 F9            leave
2190   11D4 09            ret
2191   11D5 0A D8 11      jmp _if34_exit
2192   11D8             _if34_exit:
2193   11D8             _if33_exit:
2194   11D8             ;; while (num > 0) { 
2195   11D8             _while35_cond:
2196   11D8 FA 05 00      lea d, [bp + 5] ; $num
2197   11DB 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2198   11DE FD 39         mov c, b ; And place it into C
2199   11E0 2A            mov b, [d] ; Lower Word in B
2200   11E1             ; START RELATIONAL
2201   11E1 D7            push a
2202   11E2 FD D8         push g
2203   11E4 11            mov a, b
2204   11E5 FD 7A         mov g, c
2205   11E7 26 00 00      mov b, $0
2206   11EA 38 00 00      mov c, 0
2207   11ED FD 7F         sgt
2208   11EF FD F1         pop g
2209   11F1 E4            pop a
2210   11F2             ; END RELATIONAL
2211   11F2 C0 00 00      cmp b, 0
2212   11F5 C6 55 12      je _while35_exit
2213   11F8             _while35_block:
2214   11F8             ;; digits[i] = '0' + (num % 10); 
2215   11F8 FA F7 FF      lea d, [bp + -9] ; $digits
2216   11FB D7            push a
2217   11FC DA            push d
2218   11FD FA F5 FF      lea d, [bp + -11] ; $i
2219   1200 2A            mov b, [d]
2220   1201 E7            pop d
2221   1202 5A            add d, b
2222   1203 E4            pop a
2223   1204 DA            push d
2224   1205 26 30 00      mov b, $30
2225   1208             ; START TERMS
2226   1208 D7            push a
2227   1209 11            mov a, b
2228   120A FA 05 00      lea d, [bp + 5] ; $num
2229   120D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2230   1210 FD 39         mov c, b ; And place it into C
2231   1212 2A            mov b, [d] ; Lower Word in B
2232   1213             ; START FACTORS
2233   1213 D7            push a
2234   1214 11            mov a, b
2235   1215 26 0A 00      mov b, $a
2236   1218 AE            div a, b ; 
2237   1219 11            mov a, b
2238   121A 27            mov b, a
2239   121B E4            pop a
2240   121C             ; END FACTORS
2241   121C 54            add a, b
2242   121D D7            push a
2243   121E FD 12         mov a, g
2244   1220 28            mov b, c
2245   1221 5C            adc a, b
2246   1222 39            mov c, a
2247   1223 E5            pop b
2248   1224 E4            pop a
2249   1225             ; END TERMS
2250   1225 E7            pop d
2251   1226 FD 3E         mov [d], bl
2252   1228             ;; num = num / 10; 
2253   1228 FA 05 00      lea d, [bp + 5] ; $num
2254   122B DA            push d
2255   122C FA 05 00      lea d, [bp + 5] ; $num
2256   122F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2257   1232 FD 39         mov c, b ; And place it into C
2258   1234 2A            mov b, [d] ; Lower Word in B
2259   1235             ; START FACTORS
2260   1235 D7            push a
2261   1236 11            mov a, b
2262   1237 26 0A 00      mov b, $a
2263   123A AE            div a, b
2264   123B 27            mov b, a
2265   123C E4            pop a
2266   123D             ; END FACTORS
2267   123D E7            pop d
2268   123E FD 43         mov [d], b
2269   1240 28            mov b, c
2270   1241 FD 44 02 00   mov [d + 2], b
2271   1245             ;; i++; 
2272   1245 FA F5 FF      lea d, [bp + -11] ; $i
2273   1248 2A            mov b, [d]
2274   1249 FD 77         inc b
2275   124B FA F5 FF      lea d, [bp + -11] ; $i
2276   124E FD 43         mov [d], b
2277   1250 FD 7D         dec b
2278   1252 0A D8 11      jmp _while35_cond
2279   1255             _while35_exit:
2280   1255             ;; while (i > 0) { 
2281   1255             _while36_cond:
2282   1255 FA F5 FF      lea d, [bp + -11] ; $i
2283   1258 2A            mov b, [d]
2284   1259             ; START RELATIONAL
2285   1259 D7            push a
2286   125A 11            mov a, b
2287   125B 26 00 00      mov b, $0
2288   125E B0            cmp a, b
2289   125F FD 7F         sgt ; >
2290   1261 E4            pop a
2291   1262             ; END RELATIONAL
2292   1262 C0 00 00      cmp b, 0
2293   1265 C6 8E 12      je _while36_exit
2294   1268             _while36_block:
2295   1268             ;; i--; 
2296   1268 FA F5 FF      lea d, [bp + -11] ; $i
2297   126B 2A            mov b, [d]
2298   126C FD 7D         dec b
2299   126E FA F5 FF      lea d, [bp + -11] ; $i
2300   1271 FD 43         mov [d], b
2301   1273 FD 77         inc b
2302   1275             ;; putchar(digits[i]); 
2303   1275 FA F7 FF      lea d, [bp + -9] ; $digits
2304   1278 D7            push a
2305   1279 DA            push d
2306   127A FA F5 FF      lea d, [bp + -11] ; $i
2307   127D 2A            mov b, [d]
2308   127E E7            pop d
2309   127F 5A            add d, b
2310   1280 E4            pop a
2311   1281 32            mov bl, [d]
2312   1282 A7 00         mov bh, 0
2313   1284 DD            push bl
2314   1285 07 5E 15      call putchar
2315   1288 51 01 00      add sp, 1
2316   128B 0A 55 12      jmp _while36_cond
2317   128E             _while36_exit:
2318   128E F9            leave
2319   128F 09            ret
2320   1290             
2321   1290             print_unsigned_long:
2322   1290 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2323   1293             ;; char digits[10]; 
2324   1293 52 0A 00      sub sp, 10 ; digits
2325   1296             ;; int i; 
2326   1296 52 02 00      sub sp, 2 ; i
2327   1299             ;; i = 0; 
2328   1299 FA F5 FF      lea d, [bp + -11] ; $i
2329   129C DA            push d
2330   129D 26 00 00      mov b, $0
2331   12A0 E7            pop d
2332   12A1 FD 43         mov [d], b
2333   12A3             ;; if(num == 0){ 
2334   12A3             _if37_cond:
2335   12A3 FA 05 00      lea d, [bp + 5] ; $num
2336   12A6 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2337   12A9 FD 39         mov c, b ; And place it into C
2338   12AB 2A            mov b, [d] ; Lower Word in B
2339   12AC             ; START RELATIONAL
2340   12AC D7            push a
2341   12AD FD D8         push g
2342   12AF 11            mov a, b
2343   12B0 FD 7A         mov g, c
2344   12B2 26 00 00      mov b, $0
2345   12B5 38 00 00      mov c, 0
2346   12B8 FD AF 00 00   cmp32 ga, cb
2346   12BC 00 00 00 00 
2346   12C0 00 00 00 00 
2346   12C4 00 00 00 00 
2346   12C8 00 00 00 00 
2346   12CC 00 00 00 00 
2346   12D0 00 00 00 00 
2346   12D4 00 00 00 00 
2346   12D8 00 00 00 00 
2346   12DC 00 00 00 00 
2346   12E0 00 00 00 00 
2346   12E4 00 00 00 00 
2346   12E8 00 00 00 00 
2346   12EC 00 00 00 00 
2346   12F0 00 00 00 00 
2346   12F4 00 00 00 00 
2346   12F8 00 00 00 00 
2346   12FC 00 00 00 00 
2346   1300 00 00 00 00 
2346   1304 00 00 00 00 
2346   1308 00 00 00 00 
2346   130C 00 00 00 00 
2346   1310 00 00 00 00 
2346   1314 00 00 00 00 
2346   1318 00 00 00 00 
2346   131C 00 00 00 00 
2346   1320 00 00 00 00 
2346   1324 00 00 00 00 
2346   1328 00 00 00 00 
2346   132C 00 00 00 00 
2346   1330 00 00 00 00 
2346   1334 00 00 00 00 
2346   1338 00 00 00 00 
2346   133C 00 00 00 00 
2346   1340 00 00 00 00 
2346   1344 00 00 00 00 
2346   1348 00 00 00 00 
2346   134C 00 00 00 00 
2346   1350 00 00 00 00 
2346   1354 00 00 00 00 
2346   1358 00 00 00 00 
2346   135C 00 00 00 00 
2346   1360 00 00 00 00 
2346   1364 00 00 00 00 
2346   1368 00 00 00 00 
2346   136C 00 00 00 00 
2346   1370 00 00 00 00 
2346   1374 00 00 00 00 
2346   1378 00 00 00 00 
2346   137C 00 00 00 00 
2346   1380 00 00 00 00 
2346   1384 00 00 00 00 
2346   1388 00 00 00 00 
2346   138C 00 00 00 00 
2346   1390 00 00 00 00 
2346   1394 00 00 00 00 
2346   1398 00 00 00 00 
2346   139C 00 00 00 00 
2346   13A0 00 00 00 00 
2346   13A4 00 00 00 00 
2346   13A8 00 00 00 00 
2346   13AC 00 00 00 00 
2346   13B0 00 00 00 00 
2346   13B4 00 00 00 00 
2346   13B8 00 
2347   13B9 FD 71         seq ; ==
2348   13BB FD F1         pop g
2349   13BD E4            pop a
2350   13BE             ; END RELATIONAL
2351   13BE C0 00 00      cmp b, 0
2352   13C1 C6 D3 13      je _if37_exit
2353   13C4             _if37_true:
2354   13C4             ;; putchar('0'); 
2355   13C4 26 30 00      mov b, $30
2356   13C7 DD            push bl
2357   13C8 07 5E 15      call putchar
2358   13CB 51 01 00      add sp, 1
2359   13CE             ;; return; 
2360   13CE F9            leave
2361   13CF 09            ret
2362   13D0 0A D3 13      jmp _if37_exit
2363   13D3             _if37_exit:
2364   13D3             ;; while (num > 0) { 
2365   13D3             _while38_cond:
2366   13D3 FA 05 00      lea d, [bp + 5] ; $num
2367   13D6 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2368   13D9 FD 39         mov c, b ; And place it into C
2369   13DB 2A            mov b, [d] ; Lower Word in B
2370   13DC             ; START RELATIONAL
2371   13DC D7            push a
2372   13DD FD D8         push g
2373   13DF 11            mov a, b
2374   13E0 FD 7A         mov g, c
2375   13E2 26 00 00      mov b, $0
2376   13E5 38 00 00      mov c, 0
2377   13E8 FD 81         sgu
2378   13EA FD F1         pop g
2379   13EC E4            pop a
2380   13ED             ; END RELATIONAL
2381   13ED C0 00 00      cmp b, 0
2382   13F0 C6 50 14      je _while38_exit
2383   13F3             _while38_block:
2384   13F3             ;; digits[i] = '0' + (num % 10); 
2385   13F3 FA F7 FF      lea d, [bp + -9] ; $digits
2386   13F6 D7            push a
2387   13F7 DA            push d
2388   13F8 FA F5 FF      lea d, [bp + -11] ; $i
2389   13FB 2A            mov b, [d]
2390   13FC E7            pop d
2391   13FD 5A            add d, b
2392   13FE E4            pop a
2393   13FF DA            push d
2394   1400 26 30 00      mov b, $30
2395   1403             ; START TERMS
2396   1403 D7            push a
2397   1404 11            mov a, b
2398   1405 FA 05 00      lea d, [bp + 5] ; $num
2399   1408 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2400   140B FD 39         mov c, b ; And place it into C
2401   140D 2A            mov b, [d] ; Lower Word in B
2402   140E             ; START FACTORS
2403   140E D7            push a
2404   140F 11            mov a, b
2405   1410 26 0A 00      mov b, $a
2406   1413 AE            div a, b ; 
2407   1414 11            mov a, b
2408   1415 27            mov b, a
2409   1416 E4            pop a
2410   1417             ; END FACTORS
2411   1417 54            add a, b
2412   1418 D7            push a
2413   1419 FD 12         mov a, g
2414   141B 28            mov b, c
2415   141C 5C            adc a, b
2416   141D 39            mov c, a
2417   141E E5            pop b
2418   141F E4            pop a
2419   1420             ; END TERMS
2420   1420 E7            pop d
2421   1421 FD 3E         mov [d], bl
2422   1423             ;; num = num / 10; 
2423   1423 FA 05 00      lea d, [bp + 5] ; $num
2424   1426 DA            push d
2425   1427 FA 05 00      lea d, [bp + 5] ; $num
2426   142A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2427   142D FD 39         mov c, b ; And place it into C
2428   142F 2A            mov b, [d] ; Lower Word in B
2429   1430             ; START FACTORS
2430   1430 D7            push a
2431   1431 11            mov a, b
2432   1432 26 0A 00      mov b, $a
2433   1435 AE            div a, b
2434   1436 27            mov b, a
2435   1437 E4            pop a
2436   1438             ; END FACTORS
2437   1438 E7            pop d
2438   1439 FD 43         mov [d], b
2439   143B 28            mov b, c
2440   143C FD 44 02 00   mov [d + 2], b
2441   1440             ;; i++; 
2442   1440 FA F5 FF      lea d, [bp + -11] ; $i
2443   1443 2A            mov b, [d]
2444   1444 FD 77         inc b
2445   1446 FA F5 FF      lea d, [bp + -11] ; $i
2446   1449 FD 43         mov [d], b
2447   144B FD 7D         dec b
2448   144D 0A D3 13      jmp _while38_cond
2449   1450             _while38_exit:
2450   1450             ;; while (i > 0) { 
2451   1450             _while39_cond:
2452   1450 FA F5 FF      lea d, [bp + -11] ; $i
2453   1453 2A            mov b, [d]
2454   1454             ; START RELATIONAL
2455   1454 D7            push a
2456   1455 11            mov a, b
2457   1456 26 00 00      mov b, $0
2458   1459 B0            cmp a, b
2459   145A FD 7F         sgt ; >
2460   145C E4            pop a
2461   145D             ; END RELATIONAL
2462   145D C0 00 00      cmp b, 0
2463   1460 C6 89 14      je _while39_exit
2464   1463             _while39_block:
2465   1463             ;; i--; 
2466   1463 FA F5 FF      lea d, [bp + -11] ; $i
2467   1466 2A            mov b, [d]
2468   1467 FD 7D         dec b
2469   1469 FA F5 FF      lea d, [bp + -11] ; $i
2470   146C FD 43         mov [d], b
2471   146E FD 77         inc b
2472   1470             ;; putchar(digits[i]); 
2473   1470 FA F7 FF      lea d, [bp + -9] ; $digits
2474   1473 D7            push a
2475   1474 DA            push d
2476   1475 FA F5 FF      lea d, [bp + -11] ; $i
2477   1478 2A            mov b, [d]
2478   1479 E7            pop d
2479   147A 5A            add d, b
2480   147B E4            pop a
2481   147C 32            mov bl, [d]
2482   147D A7 00         mov bh, 0
2483   147F DD            push bl
2484   1480 07 5E 15      call putchar
2485   1483 51 01 00      add sp, 1
2486   1486 0A 50 14      jmp _while39_cond
2487   1489             _while39_exit:
2488   1489 F9            leave
2489   148A 09            ret
2490   148B             
2491   148B             print_unsigned:
2492   148B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2493   148E             ;; char digits[5]; 
2494   148E 52 05 00      sub sp, 5 ; digits
2495   1491             ;; int i; 
2496   1491 52 02 00      sub sp, 2 ; i
2497   1494             ;; i = 0; 
2498   1494 FA FA FF      lea d, [bp + -6] ; $i
2499   1497 DA            push d
2500   1498 26 00 00      mov b, $0
2501   149B E7            pop d
2502   149C FD 43         mov [d], b
2503   149E             ;; if(num == 0){ 
2504   149E             _if40_cond:
2505   149E FA 05 00      lea d, [bp + 5] ; $num
2506   14A1 2A            mov b, [d]
2507   14A2             ; START RELATIONAL
2508   14A2 D7            push a
2509   14A3 11            mov a, b
2510   14A4 26 00 00      mov b, $0
2511   14A7 B0            cmp a, b
2512   14A8 FD 71         seq ; ==
2513   14AA E4            pop a
2514   14AB             ; END RELATIONAL
2515   14AB C0 00 00      cmp b, 0
2516   14AE C6 C0 14      je _if40_exit
2517   14B1             _if40_true:
2518   14B1             ;; putchar('0'); 
2519   14B1 26 30 00      mov b, $30
2520   14B4 DD            push bl
2521   14B5 07 5E 15      call putchar
2522   14B8 51 01 00      add sp, 1
2523   14BB             ;; return; 
2524   14BB F9            leave
2525   14BC 09            ret
2526   14BD 0A C0 14      jmp _if40_exit
2527   14C0             _if40_exit:
2528   14C0             ;; while (num > 0) { 
2529   14C0             _while41_cond:
2530   14C0 FA 05 00      lea d, [bp + 5] ; $num
2531   14C3 2A            mov b, [d]
2532   14C4             ; START RELATIONAL
2533   14C4 D7            push a
2534   14C5 11            mov a, b
2535   14C6 26 00 00      mov b, $0
2536   14C9 B0            cmp a, b
2537   14CA FD 81         sgu ; > (unsigned)
2538   14CC E4            pop a
2539   14CD             ; END RELATIONAL
2540   14CD C0 00 00      cmp b, 0
2541   14D0 C6 1A 15      je _while41_exit
2542   14D3             _while41_block:
2543   14D3             ;; digits[i] = '0' + (num % 10); 
2544   14D3 FA FC FF      lea d, [bp + -4] ; $digits
2545   14D6 D7            push a
2546   14D7 DA            push d
2547   14D8 FA FA FF      lea d, [bp + -6] ; $i
2548   14DB 2A            mov b, [d]
2549   14DC E7            pop d
2550   14DD 5A            add d, b
2551   14DE E4            pop a
2552   14DF DA            push d
2553   14E0 26 30 00      mov b, $30
2554   14E3             ; START TERMS
2555   14E3 D7            push a
2556   14E4 11            mov a, b
2557   14E5 FA 05 00      lea d, [bp + 5] ; $num
2558   14E8 2A            mov b, [d]
2559   14E9             ; START FACTORS
2560   14E9 D7            push a
2561   14EA 11            mov a, b
2562   14EB 26 0A 00      mov b, $a
2563   14EE AE            div a, b ; 
2564   14EF 11            mov a, b
2565   14F0 27            mov b, a
2566   14F1 E4            pop a
2567   14F2             ; END FACTORS
2568   14F2 56            add b, a
2569   14F3 E4            pop a
2570   14F4             ; END TERMS
2571   14F4 E7            pop d
2572   14F5 FD 3E         mov [d], bl
2573   14F7             ;; num = num / 10; 
2574   14F7 FA 05 00      lea d, [bp + 5] ; $num
2575   14FA DA            push d
2576   14FB FA 05 00      lea d, [bp + 5] ; $num
2577   14FE 2A            mov b, [d]
2578   14FF             ; START FACTORS
2579   14FF D7            push a
2580   1500 11            mov a, b
2581   1501 26 0A 00      mov b, $a
2582   1504 AE            div a, b
2583   1505 27            mov b, a
2584   1506 E4            pop a
2585   1507             ; END FACTORS
2586   1507 E7            pop d
2587   1508 FD 43         mov [d], b
2588   150A             ;; i++; 
2589   150A FA FA FF      lea d, [bp + -6] ; $i
2590   150D 2A            mov b, [d]
2591   150E FD 77         inc b
2592   1510 FA FA FF      lea d, [bp + -6] ; $i
2593   1513 FD 43         mov [d], b
2594   1515 FD 7D         dec b
2595   1517 0A C0 14      jmp _while41_cond
2596   151A             _while41_exit:
2597   151A             ;; while (i > 0) { 
2598   151A             _while42_cond:
2599   151A FA FA FF      lea d, [bp + -6] ; $i
2600   151D 2A            mov b, [d]
2601   151E             ; START RELATIONAL
2602   151E D7            push a
2603   151F 11            mov a, b
2604   1520 26 00 00      mov b, $0
2605   1523 B0            cmp a, b
2606   1524 FD 7F         sgt ; >
2607   1526 E4            pop a
2608   1527             ; END RELATIONAL
2609   1527 C0 00 00      cmp b, 0
2610   152A C6 53 15      je _while42_exit
2611   152D             _while42_block:
2612   152D             ;; i--; 
2613   152D FA FA FF      lea d, [bp + -6] ; $i
2614   1530 2A            mov b, [d]
2615   1531 FD 7D         dec b
2616   1533 FA FA FF      lea d, [bp + -6] ; $i
2617   1536 FD 43         mov [d], b
2618   1538 FD 77         inc b
2619   153A             ;; putchar(digits[i]); 
2620   153A FA FC FF      lea d, [bp + -4] ; $digits
2621   153D D7            push a
2622   153E DA            push d
2623   153F FA FA FF      lea d, [bp + -6] ; $i
2624   1542 2A            mov b, [d]
2625   1543 E7            pop d
2626   1544 5A            add d, b
2627   1545 E4            pop a
2628   1546 32            mov bl, [d]
2629   1547 A7 00         mov bh, 0
2630   1549 DD            push bl
2631   154A 07 5E 15      call putchar
2632   154D 51 01 00      add sp, 1
2633   1550 0A 1A 15      jmp _while42_cond
2634   1553             _while42_exit:
2635   1553 F9            leave
2636   1554 09            ret
2637   1555             
2638   1555             date:
2639   1555 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2640   1558             
2641   1558             ; --- BEGIN INLINE ASM BLOCK
2642   1558 19 00         mov al, 0 
2643   155A 05 07         syscall sys_datetime
2644   155C             ; --- END INLINE ASM BLOCK
2645   155C             
2646   155C F9            leave
2647   155D 09            ret
2648   155E             
2649   155E             putchar:
2650   155E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2651   1561             
2652   1561             ; --- BEGIN INLINE ASM BLOCK
2653   1561 FA 05 00      lea d, [bp + 5] ; $c
2654   1564 1E            mov al, [d]
2655   1565 23            mov ah, al
2656   1566 07 EF 16      call _putchar
2657   1569             ; --- END INLINE ASM BLOCK
2658   1569             
2659   1569 F9            leave
2660   156A 09            ret
2661   156B             
2662   156B             getchar:
2663   156B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2664   156E             ;; char c; 
2665   156E 52 01 00      sub sp, 1 ; c
2666   1571             
2667   1571             ; --- BEGIN INLINE ASM BLOCK
2668   1571 07 E8 16      call getch
2669   1574 1A            mov al, ah
2670   1575 FA 00 00      lea d, [bp + 0] ; $c
2671   1578 3E            mov [d], al
2672   1579             ; --- END INLINE ASM BLOCK
2673   1579             
2674   1579             ;; return c; 
2675   1579 FA 00 00      lea d, [bp + 0] ; $c
2676   157C 32            mov bl, [d]
2677   157D A7 00         mov bh, 0
2678   157F F9            leave
2679   1580 09            ret
2680   1581             
2681   1581             scann:
2682   1581 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2683   1584             ;; int m; 
2684   1584 52 02 00      sub sp, 2 ; m
2685   1587             
2686   1587             ; --- BEGIN INLINE ASM BLOCK
2687   1587 07 33 19      call scan_u16d
2688   158A FA FF FF      lea d, [bp + -1] ; $m
2689   158D 43            mov [d], a
2690   158E             ; --- END INLINE ASM BLOCK
2691   158E             
2692   158E             ;; return m; 
2693   158E FA FF FF      lea d, [bp + -1] ; $m
2694   1591 2A            mov b, [d]
2695   1592 F9            leave
2696   1593 09            ret
2697   1594             
2698   1594             puts:
2699   1594 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2700   1597             
2701   1597             ; --- BEGIN INLINE ASM BLOCK
2702   1597 FA 05 00      lea d, [bp + 5] ; $s
2703   159A 15            mov a, [d]
2704   159B 3C            mov d, a
2705   159C 07 39 18      call _puts
2706   159F 10 00 0A      mov a, $0A00
2707   15A2 05 03         syscall sys_io
2708   15A4             ; --- END INLINE ASM BLOCK
2709   15A4             
2710   15A4 F9            leave
2711   15A5 09            ret
2712   15A6             
2713   15A6             print:
2714   15A6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2715   15A9             
2716   15A9             ; --- BEGIN INLINE ASM BLOCK
2717   15A9 FA 05 00      lea d, [bp + 5] ; $s
2718   15AC FD 2A         mov d, [d]
2719   15AE 07 39 18      call _puts
2720   15B1             ; --- END INLINE ASM BLOCK
2721   15B1             
2722   15B1 F9            leave
2723   15B2 09            ret
2724   15B3             
2725   15B3             getparam:
2726   15B3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2727   15B6             ;; char data; 
2728   15B6 52 01 00      sub sp, 1 ; data
2729   15B9             
2730   15B9             ; --- BEGIN INLINE ASM BLOCK
2731   15B9 19 04         mov al, 4
2732   15BB FA 05 00      lea d, [bp + 5] ; $address
2733   15BE FD 2A         mov d, [d]
2734   15C0 05 0C         syscall sys_system
2735   15C2 FA 00 00      lea d, [bp + 0] ; $data
2736   15C5 FD 3E         mov [d], bl
2737   15C7             ; --- END INLINE ASM BLOCK
2738   15C7             
2739   15C7             ;; return data; 
2740   15C7 FA 00 00      lea d, [bp + 0] ; $data
2741   15CA 32            mov bl, [d]
2742   15CB A7 00         mov bh, 0
2743   15CD F9            leave
2744   15CE 09            ret
2745   15CF             
2746   15CF             clear:
2747   15CF F8 00 00      enter 0 ; (push bp; mov bp, sp)
2748   15D2             ;; print("\033[2J\033[H"); 
2749   15D2 26 3B 2C      mov b, _s4 ; "\033[2J\033[H"
2750   15D5 FD AB         swp b
2751   15D7 D8            push b
2752   15D8 07 A6 15      call print
2753   15DB 51 02 00      add sp, 2
2754   15DE F9            leave
2755   15DF 09            ret
2756   15E0             
2757   15E0             abs:
2758   15E0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2759   15E3             ;; return i < 0 ? -i : i; 
2760   15E3             _ternary43_cond:
2761   15E3 FA 05 00      lea d, [bp + 5] ; $i
2762   15E6 2A            mov b, [d]
2763   15E7             ; START RELATIONAL
2764   15E7 D7            push a
2765   15E8 11            mov a, b
2766   15E9 26 00 00      mov b, $0
2767   15EC B0            cmp a, b
2768   15ED FD 73         slt ; < (signed)
2769   15EF E4            pop a
2770   15F0             ; END RELATIONAL
2771   15F0 C0 00 00      cmp b, 0
2772   15F3 C6 FF 15      je _ternary43_false
2773   15F6             _ternary43_true:
2774   15F6 FA 05 00      lea d, [bp + 5] ; $i
2775   15F9 2A            mov b, [d]
2776   15FA FD 97         neg b
2777   15FC 0A 03 16      jmp _ternary43_exit
2778   15FF             _ternary43_false:
2779   15FF FA 05 00      lea d, [bp + 5] ; $i
2780   1602 2A            mov b, [d]
2781   1603             _ternary43_exit:
2782   1603 F9            leave
2783   1604 09            ret
2784   1605             
2785   1605             include_stdio_asm:
2786   1605 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2787   1608             
2788   1608             ; --- BEGIN INLINE ASM BLOCK
2789   1608             .include "lib/asm/stdio.asm"
0001+  1608             ;-----------------------------------------------------------------------------
0002+  1608             ; stdio.s
0003+  1608             ;-----------------------------------------------------------------------------
0004+  1608             .include "lib/asm/string.asm"
0001++ 1608             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1608             ; string.s
0003++ 1608             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1608             
0005++ 1608             
0006++ 1608             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1608             ; _strrev
0008++ 1608             ; reverse a string
0009++ 1608             ; D = string address
0010++ 1608             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1608             ; 01234
0012++ 1608             _strrev:
0013++ 1608 4B          	pusha
0014++ 1609 07 4F 16    	call _strlen	; length in C
0015++ 160C 12          	mov a, c
0016++ 160D AF 01 00    	cmp a, 1
0017++ 1610 D0 2A 16    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1613 7D          	dec a
0019++ 1614 FD 4E       	mov si, d	; beginning of string
0020++ 1616 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1618 59          	add d, a	; end of string
0022++ 1619 12          	mov a, c
0023++ 161A FD 9B       	shr a		; divide by 2
0024++ 161C 39          	mov c, a	; C now counts the steps
0025++ 161D             _strrev_L0:
0026++ 161D 32          	mov bl, [d]	; save load right-side char into BL
0027++ 161E F6          	lodsb		; load left-side char into AL; increase SI
0028++ 161F 3E          	mov [d], al	; store left char into right side
0029++ 1620 1B          	mov al, bl
0030++ 1621 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1622 7E          	dec c
0032++ 1623 7F          	dec d
0033++ 1624 C2 00 00    	cmp c, 0
0034++ 1627 C7 1D 16    	jne _strrev_L0
0035++ 162A             _strrev_end:
0036++ 162A 4C          	popa
0037++ 162B 09          	ret
0038++ 162C             	
0039++ 162C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 162C             ; _strchr
0041++ 162C             ; search string in D for char in AL
0042++ 162C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 162C             _strchr:
0044++ 162C             _strchr_L0:
0045++ 162C 32          	mov bl, [d]
0046++ 162D C1 00       	cmp bl, 0
0047++ 162F C6 3A 16    	je _strchr_end
0048++ 1632 BA          	cmp al, bl
0049++ 1633 C6 3A 16    	je _strchr_end
0050++ 1636 79          	inc d
0051++ 1637 0A 2C 16    	jmp _strchr_L0
0052++ 163A             _strchr_end:
0053++ 163A 1B          	mov al, bl
0054++ 163B 09          	ret
0055++ 163C             
0056++ 163C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 163C             ; _strstr
0058++ 163C             ; find sub-string
0059++ 163C             ; str1 in SI
0060++ 163C             ; str2 in DI
0061++ 163C             ; SI points to end of source string
0062++ 163C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 163C             _strstr:
0064++ 163C DB          	push al
0065++ 163D DA          	push d
0066++ 163E E3          	push di
0067++ 163F             _strstr_loop:
0068++ 163F F3          	cmpsb					; compare a byte of the strings
0069++ 1640 C7 4B 16    	jne _strstr_ret
0070++ 1643 FC 00 00    	lea d, [di + 0]
0071++ 1646 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1648 C7 3F 16    	jne _strstr_loop				; equal chars but not at end
0073++ 164B             _strstr_ret:
0074++ 164B F0          	pop di
0075++ 164C E7          	pop d
0076++ 164D E8          	pop al
0077++ 164E 09          	ret
0078++ 164F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 164F             ; length of null terminated string
0080++ 164F             ; result in C
0081++ 164F             ; pointer in D
0082++ 164F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 164F             _strlen:
0084++ 164F DA          	push d
0085++ 1650 38 00 00    	mov c, 0
0086++ 1653             _strlen_L1:
0087++ 1653 BD 00       	cmp byte [d], 0
0088++ 1655 C6 5D 16    	je _strlen_ret
0089++ 1658 79          	inc d
0090++ 1659 78          	inc c
0091++ 165A 0A 53 16    	jmp _strlen_L1
0092++ 165D             _strlen_ret:
0093++ 165D E7          	pop d
0094++ 165E 09          	ret
0095++ 165F             
0096++ 165F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 165F             ; STRCMP
0098++ 165F             ; compare two strings
0099++ 165F             ; str1 in SI
0100++ 165F             ; str2 in DI
0101++ 165F             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 165F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 165F             _strcmp:
0104++ 165F DB          	push al
0105++ 1660 DA          	push d
0106++ 1661 E3          	push di
0107++ 1662 E2          	push si
0108++ 1663             _strcmp_loop:
0109++ 1663 F3          	cmpsb					; compare a byte of the strings
0110++ 1664 C7 6F 16    	jne _strcmp_ret
0111++ 1667 FB FF FF    	lea d, [si +- 1]
0112++ 166A BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 166C C7 63 16    	jne _strcmp_loop				; equal chars but not at end
0114++ 166F             _strcmp_ret:
0115++ 166F EF          	pop si
0116++ 1670 F0          	pop di
0117++ 1671 E7          	pop d
0118++ 1672 E8          	pop al
0119++ 1673 09          	ret
0120++ 1674             
0121++ 1674             
0122++ 1674             ; STRCPY
0123++ 1674             ; copy null terminated string from SI to DI
0124++ 1674             ; source in SI
0125++ 1674             ; destination in DI
0126++ 1674             _strcpy:
0127++ 1674 E2          	push si
0128++ 1675 E3          	push di
0129++ 1676 DB          	push al
0130++ 1677             _strcpy_L1:
0131++ 1677 F6          	lodsb
0132++ 1678 F7          	stosb
0133++ 1679 B9 00       	cmp al, 0
0134++ 167B C7 77 16    	jne _strcpy_L1
0135++ 167E             _strcpy_end:
0136++ 167E E8          	pop al
0137++ 167F F0          	pop di
0138++ 1680 EF          	pop si
0139++ 1681 09          	ret
0140++ 1682             
0141++ 1682             ; STRCAT
0142++ 1682             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1682             ; source in SI
0144++ 1682             ; destination in DI
0145++ 1682             _strcat:
0146++ 1682 E2          	push si
0147++ 1683 E3          	push di
0148++ 1684 D7          	push a
0149++ 1685 DA          	push d
0150++ 1686 50          	mov a, di
0151++ 1687 3C          	mov d, a
0152++ 1688             _strcat_goto_end_L1:
0153++ 1688 BD 00       	cmp byte[d], 0
0154++ 168A C6 91 16    	je _strcat_start
0155++ 168D 79          	inc d
0156++ 168E 0A 88 16    	jmp _strcat_goto_end_L1
0157++ 1691             _strcat_start:
0158++ 1691 FD 50       	mov di, d
0159++ 1693             _strcat_L1:
0160++ 1693 F6          	lodsb
0161++ 1694 F7          	stosb
0162++ 1695 B9 00       	cmp al, 0
0163++ 1697 C7 93 16    	jne _strcat_L1
0164++ 169A             _strcat_end:
0165++ 169A E7          	pop d
0166++ 169B E4          	pop a
0167++ 169C F0          	pop di
0168++ 169D EF          	pop si
0169++ 169E 09          	ret
0170++ 169F             
0171++ 169F             
0005+  169F             
0006+  169F             ;-----------------------------------------------------------------------------
0007+  169F             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  169F             ; ASCII in BL
0009+  169F             ; result in AL
0010+  169F             ; ascii for F = 0100 0110
0011+  169F             ; ascii for 9 = 0011 1001
0012+  169F             ;-----------------------------------------------------------------------------
0013+  169F             hex_ascii_encode:
0014+  169F 1B            mov al, bl
0015+  16A0 93 40         test al, $40        ; test if letter or number
0016+  16A2 C7 A8 16      jnz hex_letter
0017+  16A5 87 0F         and al, $0F        ; get number
0018+  16A7 09            ret
0019+  16A8             hex_letter:
0020+  16A8 87 0F         and al, $0F        ; get letter
0021+  16AA 6A 09         add al, 9
0022+  16AC 09            ret
0023+  16AD             
0024+  16AD             ;-----------------------------------------------------------------------------
0025+  16AD             ; ATOI
0026+  16AD             ; 2 letter hex string in B
0027+  16AD             ; 8bit integer returned in AL
0028+  16AD             ;-----------------------------------------------------------------------------
0029+  16AD             _atoi:
0030+  16AD D8            push b
0031+  16AE 07 9F 16      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  16B1 30            mov bl, bh
0033+  16B2 DB            push al          ; save a
0034+  16B3 07 9F 16      call hex_ascii_encode
0035+  16B6 EA            pop bl  
0036+  16B7 FD 9E 04      shl al, 4
0037+  16BA 8C            or al, bl
0038+  16BB E5            pop b
0039+  16BC 09            ret  
0040+  16BD             
0041+  16BD             
0042+  16BD             ;-----------------------------------------------------------------------------
0043+  16BD             ; ITOA
0044+  16BD             ; 8bit value in BL
0045+  16BD             ; 2 byte ASCII result in A
0046+  16BD             ;-----------------------------------------------------------------------------
0047+  16BD             _itoa:
0048+  16BD DA            push d
0049+  16BE D8            push b
0050+  16BF A7 00         mov bh, 0
0051+  16C1 FD A4 04      shr bl, 4  
0052+  16C4 74            mov d, b
0053+  16C5 1F 6D 19      mov al, [d + s_hex_digits]
0054+  16C8 23            mov ah, al
0055+  16C9               
0056+  16C9 E5            pop b
0057+  16CA D8            push b
0058+  16CB A7 00         mov bh, 0
0059+  16CD FD 87 0F      and bl, $0F
0060+  16D0 74            mov d, b
0061+  16D1 1F 6D 19      mov al, [d + s_hex_digits]
0062+  16D4 E5            pop b
0063+  16D5 E7            pop d
0064+  16D6 09            ret
0065+  16D7             
0066+  16D7             ;-----------------------------------------------------------------------------
0067+  16D7             ; HEX STRING TO BINARY
0068+  16D7             ; di = destination address
0069+  16D7             ; si = source
0070+  16D7             ;-----------------------------------------------------------------------------
0071+  16D7             _hex_to_int:
0072+  16D7             _hex_to_int_L1:
0073+  16D7 F6            lodsb          ; load from [SI] to AL
0074+  16D8 B9 00         cmp al, 0        ; check if ASCII 0
0075+  16DA C6 E7 16      jz _hex_to_int_ret
0076+  16DD 36            mov bh, al
0077+  16DE F6            lodsb
0078+  16DF 2F            mov bl, al
0079+  16E0 07 AD 16      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  16E3 F7            stosb          ; store AL to [DI]
0081+  16E4 0A D7 16      jmp _hex_to_int_L1
0082+  16E7             _hex_to_int_ret:
0083+  16E7 09            ret    
0084+  16E8             
0085+  16E8             ;-----------------------------------------------------------------------------
0086+  16E8             ; GETCHAR
0087+  16E8             ; char in ah
0088+  16E8             ;-----------------------------------------------------------------------------
0089+  16E8             getch:
0090+  16E8 DB            push al
0091+  16E9             getch_retry:
0092+  16E9 19 01         mov al, 1
0093+  16EB 05 03         syscall sys_io      ; receive in AH
0094+  16ED E8            pop al
0095+  16EE 09            ret
0096+  16EF             
0097+  16EF             ;-----------------------------------------------------------------------------
0098+  16EF             ; PUTCHAR
0099+  16EF             ; char in ah
0100+  16EF             ;-----------------------------------------------------------------------------
0101+  16EF             _putchar:
0102+  16EF D7            push a
0103+  16F0 19 00         mov al, 0
0104+  16F2 05 03         syscall sys_io      ; char in AH
0105+  16F4 E4            pop a
0106+  16F5 09            ret
0107+  16F6             
0108+  16F6             ;-----------------------------------------------------------------------------
0109+  16F6             ;; INPUT A STRING
0110+  16F6             ;; terminates with null
0111+  16F6             ;; pointer in D
0112+  16F6             ;-----------------------------------------------------------------------------
0113+  16F6             _gets:
0114+  16F6 D7            push a
0115+  16F7 DA            push d
0116+  16F8             _gets_loop:
0117+  16F8 19 01         mov al, 1
0118+  16FA 05 03         syscall sys_io      ; receive in AH
0119+  16FC B9 00         cmp al, 0        ; check error code (AL)
0120+  16FE C6 F8 16      je _gets_loop      ; if no char received, retry
0121+  1701             
0122+  1701 76 1B         cmp ah, 27
0123+  1703 C6 24 17      je _gets_ansi_esc
0124+  1706 76 0A         cmp ah, $0A        ; LF
0125+  1708 C6 8F 17      je _gets_end
0126+  170B 76 0D         cmp ah, $0D        ; CR
0127+  170D C6 8F 17      je _gets_end
0128+  1710 76 5C         cmp ah, $5C        ; '\\'
0129+  1712 C6 50 17      je _gets_escape
0130+  1715               
0131+  1715 76 08         cmp ah, $08      ; check for backspace
0132+  1717 C6 20 17      je _gets_backspace
0133+  171A             
0134+  171A 1A            mov al, ah
0135+  171B 3E            mov [d], al
0136+  171C 79            inc d
0137+  171D 0A F8 16      jmp _gets_loop
0138+  1720             _gets_backspace:
0139+  1720 7F            dec d
0140+  1721 0A F8 16      jmp _gets_loop
0141+  1724             _gets_ansi_esc:
0142+  1724 19 01         mov al, 1
0143+  1726 05 03         syscall sys_io        ; receive in AH without echo
0144+  1728 B9 00         cmp al, 0          ; check error code (AL)
0145+  172A C6 24 17      je _gets_ansi_esc    ; if no char received, retry
0146+  172D 76 5B         cmp ah, '['
0147+  172F C7 F8 16      jne _gets_loop
0148+  1732             _gets_ansi_esc_2:
0149+  1732 19 01         mov al, 1
0150+  1734 05 03         syscall sys_io          ; receive in AH without echo
0151+  1736 B9 00         cmp al, 0            ; check error code (AL)
0152+  1738 C6 32 17      je _gets_ansi_esc_2  ; if no char received, retry
0153+  173B 76 44         cmp ah, 'D'
0154+  173D C6 48 17      je _gets_left_arrow
0155+  1740 76 43         cmp ah, 'C'
0156+  1742 C6 4C 17      je _gets_right_arrow
0157+  1745 0A F8 16      jmp _gets_loop
0158+  1748             _gets_left_arrow:
0159+  1748 7F            dec d
0160+  1749 0A F8 16      jmp _gets_loop
0161+  174C             _gets_right_arrow:
0162+  174C 79            inc d
0163+  174D 0A F8 16      jmp _gets_loop
0164+  1750             _gets_escape:
0165+  1750 19 01         mov al, 1
0166+  1752 05 03         syscall sys_io      ; receive in AH
0167+  1754 B9 00         cmp al, 0        ; check error code (AL)
0168+  1756 C6 50 17      je _gets_escape      ; if no char received, retry
0169+  1759 76 6E         cmp ah, 'n'
0170+  175B C6 7A 17      je _gets_LF
0171+  175E 76 72         cmp ah, 'r'
0172+  1760 C6 81 17      je _gets_CR
0173+  1763 76 30         cmp ah, '0'
0174+  1765 C6 88 17      je _gets_NULL
0175+  1768 76 5C         cmp ah, $5C  ; '\'
0176+  176A C6 73 17      je _gets_slash
0177+  176D 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  176E 3E            mov [d], al
0179+  176F 79            inc d
0180+  1770 0A F8 16      jmp _gets_loop
0181+  1773             _gets_slash:
0182+  1773 19 5C         mov al, $5C
0183+  1775 3E            mov [d], al
0184+  1776 79            inc d
0185+  1777 0A F8 16      jmp _gets_loop
0186+  177A             _gets_LF:
0187+  177A 19 0A         mov al, $0A
0188+  177C 3E            mov [d], al
0189+  177D 79            inc d
0190+  177E 0A F8 16      jmp _gets_loop
0191+  1781             _gets_CR:
0192+  1781 19 0D         mov al, $0D
0193+  1783 3E            mov [d], al
0194+  1784 79            inc d
0195+  1785 0A F8 16      jmp _gets_loop
0196+  1788             _gets_NULL:
0197+  1788 19 00         mov al, $00
0198+  178A 3E            mov [d], al
0199+  178B 79            inc d
0200+  178C 0A F8 16      jmp _gets_loop
0201+  178F             _gets_end:
0202+  178F 19 00         mov al, 0
0203+  1791 3E            mov [d], al        ; terminate string
0204+  1792 E7            pop d
0205+  1793 E4            pop a
0206+  1794 09            ret
0207+  1795             
0208+  1795             ;-----------------------------------------------------------------------------
0209+  1795             ;; INPUT TEXT
0210+  1795             ;; terminated with CTRL+D
0211+  1795             ;; pointer in D
0212+  1795             ;-----------------------------------------------------------------------------
0213+  1795             _gettxt:
0214+  1795 D7            push a
0215+  1796 DA            push d
0216+  1797             _gettxt_loop:
0217+  1797 19 01         mov al, 1
0218+  1799 05 03         syscall sys_io      ; receive in AH
0219+  179B B9 00         cmp al, 0        ; check error code (AL)
0220+  179D C6 97 17      je _gettxt_loop    ; if no char received, retry
0221+  17A0 76 04         cmp ah, 4      ; EOT
0222+  17A2 C6 E0 17      je _gettxt_end
0223+  17A5 76 08         cmp ah, $08      ; check for backspace
0224+  17A7 C6 DC 17      je _gettxt_backspace
0225+  17AA 76 5C         cmp ah, $5C        ; '\'
0226+  17AC C6 B5 17      je _gettxt_escape
0227+  17AF 1A            mov al, ah
0228+  17B0 3E            mov [d], al
0229+  17B1 79            inc d
0230+  17B2 0A 97 17      jmp _gettxt_loop
0231+  17B5             _gettxt_escape:
0232+  17B5 19 01         mov al, 1
0233+  17B7 05 03         syscall sys_io      ; receive in AH
0234+  17B9 B9 00         cmp al, 0        ; check error code (AL)
0235+  17BB C6 B5 17      je _gettxt_escape    ; if no char received, retry
0236+  17BE 76 6E         cmp ah, 'n'
0237+  17C0 C6 CE 17      je _gettxt_LF
0238+  17C3 76 72         cmp ah, 'r'
0239+  17C5 C6 D5 17      je _gettxt_CR
0240+  17C8 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  17C9 3E            mov [d], al
0242+  17CA 79            inc d
0243+  17CB 0A 97 17      jmp _gettxt_loop
0244+  17CE             _gettxt_LF:
0245+  17CE 19 0A         mov al, $0A
0246+  17D0 3E            mov [d], al
0247+  17D1 79            inc d
0248+  17D2 0A 97 17      jmp _gettxt_loop
0249+  17D5             _gettxt_CR:
0250+  17D5 19 0D         mov al, $0D
0251+  17D7 3E            mov [d], al
0252+  17D8 79            inc d
0253+  17D9 0A 97 17      jmp _gettxt_loop
0254+  17DC             _gettxt_backspace:
0255+  17DC 7F            dec d
0256+  17DD 0A 97 17      jmp _gettxt_loop
0257+  17E0             _gettxt_end:
0258+  17E0 19 00         mov al, 0
0259+  17E2 3E            mov [d], al        ; terminate string
0260+  17E3 E7            pop d
0261+  17E4 E4            pop a
0262+  17E5 09            ret
0263+  17E6             
0264+  17E6             ;-----------------------------------------------------------------------------
0265+  17E6             ; PRINT NEW LINE
0266+  17E6             ;-----------------------------------------------------------------------------
0267+  17E6             printnl:
0268+  17E6 D7            push a
0269+  17E7 10 00 0A      mov a, $0A00
0270+  17EA 05 03         syscall sys_io
0271+  17EC 10 00 0D      mov a, $0D00
0272+  17EF 05 03         syscall sys_io
0273+  17F1 E4            pop a
0274+  17F2 09            ret
0275+  17F3             
0276+  17F3             ;-----------------------------------------------------------------------------
0277+  17F3             ; _strtoint
0278+  17F3             ; 4 digit hex string number in d
0279+  17F3             ; integer returned in A
0280+  17F3             ;-----------------------------------------------------------------------------
0281+  17F3             _strtointx:
0282+  17F3 D8            push b
0283+  17F4 32            mov bl, [d]
0284+  17F5 37            mov bh, bl
0285+  17F6 33 01 00      mov bl, [d + 1]
0286+  17F9 07 AD 16      call _atoi        ; convert to int in AL
0287+  17FC 23            mov ah, al        ; move to AH
0288+  17FD 33 02 00      mov bl, [d + 2]
0289+  1800 37            mov bh, bl
0290+  1801 33 03 00      mov bl, [d + 3]
0291+  1804 07 AD 16      call _atoi        ; convert to int in AL
0292+  1807 E5            pop b
0293+  1808 09            ret
0294+  1809             
0295+  1809             ;-----------------------------------------------------------------------------
0296+  1809             ; _strtoint
0297+  1809             ; 5 digit base10 string number in d
0298+  1809             ; integer returned in A
0299+  1809             ;-----------------------------------------------------------------------------
0300+  1809             _strtoint:
0301+  1809 E2            push si
0302+  180A D8            push b
0303+  180B D9            push c
0304+  180C DA            push d
0305+  180D 07 4F 16      call _strlen      ; get string length in C
0306+  1810 7E            dec c
0307+  1811 FD 4E         mov si, d
0308+  1813 12            mov a, c
0309+  1814 FD 99         shl a
0310+  1816 3B 85 19      mov d, table_power
0311+  1819 59            add d, a
0312+  181A 38 00 00      mov c, 0
0313+  181D             _strtoint_L0:
0314+  181D F6            lodsb      ; load ASCII to al
0315+  181E B9 00         cmp al, 0
0316+  1820 C6 33 18      je _strtoint_end
0317+  1823 6F 30         sub al, $30    ; make into integer
0318+  1825 22 00         mov ah, 0
0319+  1827 2A            mov b, [d]
0320+  1828 AC            mul a, b      ; result in B since it fits in 16bits
0321+  1829 11            mov a, b
0322+  182A 28            mov b, c
0323+  182B 54            add a, b
0324+  182C 39            mov c, a
0325+  182D 63 02 00      sub d, 2
0326+  1830 0A 1D 18      jmp _strtoint_L0
0327+  1833             _strtoint_end:
0328+  1833 12            mov a, c
0329+  1834 E7            pop d
0330+  1835 E6            pop c
0331+  1836 E5            pop b
0332+  1837 EF            pop si
0333+  1838 09            ret
0334+  1839             
0335+  1839             ;-----------------------------------------------------------------------------
0336+  1839             ; PRINT NULL TERMINATED STRING
0337+  1839             ; pointer in D
0338+  1839             ;-----------------------------------------------------------------------------
0339+  1839             _puts:
0340+  1839 D7            push a
0341+  183A DA            push d
0342+  183B             _puts_L1:
0343+  183B 1E            mov al, [d]
0344+  183C B9 00         cmp al, 0
0345+  183E C6 4A 18      jz _puts_END
0346+  1841 23            mov ah, al
0347+  1842 19 00         mov al, 0
0348+  1844 05 03         syscall sys_io
0349+  1846 79            inc d
0350+  1847 0A 3B 18      jmp _puts_L1
0351+  184A             _puts_END:
0352+  184A E7            pop d
0353+  184B E4            pop a
0354+  184C 09            ret
0355+  184D             
0356+  184D             ;-----------------------------------------------------------------------------
0357+  184D             ; PRINT N SIZE STRING
0358+  184D             ; pointer in D
0359+  184D             ; size in C
0360+  184D             ;-----------------------------------------------------------------------------
0361+  184D             _putsn:
0362+  184D DB            push al
0363+  184E DA            push d
0364+  184F D9            push c
0365+  1850             _putsn_L0:
0366+  1850 1E            mov al, [d]
0367+  1851 23            mov ah, al
0368+  1852 19 00         mov al, 0
0369+  1854 05 03         syscall sys_io
0370+  1856 79            inc d
0371+  1857 7E            dec c  
0372+  1858 C2 00 00      cmp c, 0
0373+  185B C7 50 18      jne _putsn_L0
0374+  185E             _putsn_end:
0375+  185E E6            pop c
0376+  185F E7            pop d
0377+  1860 E8            pop al
0378+  1861 09            ret
0379+  1862             
0380+  1862             ;-----------------------------------------------------------------------------
0381+  1862             ; print 16bit decimal number
0382+  1862             ; input number in A
0383+  1862             ;-----------------------------------------------------------------------------
0384+  1862             print_u16d:
0385+  1862 D7            push a
0386+  1863 D8            push b
0387+  1864 26 10 27      mov b, 10000
0388+  1867 AE            div a, b      ; get 10000's coeff.
0389+  1868 07 8A 18      call print_number
0390+  186B 11            mov a, b
0391+  186C 26 E8 03      mov b, 1000
0392+  186F AE            div a, b      ; get 1000's coeff.
0393+  1870 07 8A 18      call print_number
0394+  1873 11            mov a, b
0395+  1874 26 64 00      mov b, 100
0396+  1877 AE            div a, b
0397+  1878 07 8A 18      call print_number
0398+  187B 11            mov a, b
0399+  187C 26 0A 00      mov b, 10
0400+  187F AE            div a, b
0401+  1880 07 8A 18      call print_number
0402+  1883 1B            mov al, bl      ; 1's coeff in bl
0403+  1884 07 8A 18      call print_number
0404+  1887 E5            pop b
0405+  1888 E4            pop a
0406+  1889 09            ret
0407+  188A             
0408+  188A             ;-----------------------------------------------------------------------------
0409+  188A             ; print AL
0410+  188A             ;-----------------------------------------------------------------------------
0411+  188A             print_number:
0412+  188A 6A 30         add al, $30
0413+  188C 23            mov ah, al
0414+  188D 07 EF 16      call _putchar
0415+  1890 09            ret
0416+  1891             
0417+  1891             ;-----------------------------------------------------------------------------
0418+  1891             ; PRINT 16BIT HEX INTEGER
0419+  1891             ; integer value in reg B
0420+  1891             ;-----------------------------------------------------------------------------
0421+  1891             print_u16x:
0422+  1891 D7            push a
0423+  1892 D8            push b
0424+  1893 DD            push bl
0425+  1894 30            mov bl, bh
0426+  1895 07 BD 16      call _itoa        ; convert bh to char in A
0427+  1898 2F            mov bl, al        ; save al
0428+  1899 19 00         mov al, 0
0429+  189B 05 03         syscall sys_io        ; display AH
0430+  189D 24            mov ah, bl        ; retrieve al
0431+  189E 19 00         mov al, 0
0432+  18A0 05 03         syscall sys_io        ; display AL
0433+  18A2             
0434+  18A2 EA            pop bl
0435+  18A3 07 BD 16      call _itoa        ; convert bh to char in A
0436+  18A6 2F            mov bl, al        ; save al
0437+  18A7 19 00         mov al, 0
0438+  18A9 05 03         syscall sys_io        ; display AH
0439+  18AB 24            mov ah, bl        ; retrieve al
0440+  18AC 19 00         mov al, 0
0441+  18AE 05 03         syscall sys_io        ; display AL
0442+  18B0             
0443+  18B0 E5            pop b
0444+  18B1 E4            pop a
0445+  18B2 09            ret
0446+  18B3             
0447+  18B3             ;-----------------------------------------------------------------------------
0448+  18B3             ; INPUT 16BIT HEX INTEGER
0449+  18B3             ; read 16bit integer into A
0450+  18B3             ;-----------------------------------------------------------------------------
0451+  18B3             scan_u16x:
0452+  18B3 F8 10 00      enter 16
0453+  18B6 D8            push b
0454+  18B7 DA            push d
0455+  18B8             
0456+  18B8 FA F1 FF      lea d, [bp + -15]
0457+  18BB 07 F6 16      call _gets        ; get number
0458+  18BE             
0459+  18BE 32            mov bl, [d]
0460+  18BF 37            mov bh, bl
0461+  18C0 33 01 00      mov bl, [d + 1]
0462+  18C3 07 AD 16      call _atoi        ; convert to int in AL
0463+  18C6 23            mov ah, al        ; move to AH
0464+  18C7             
0465+  18C7 33 02 00      mov bl, [d + 2]
0466+  18CA 37            mov bh, bl
0467+  18CB 33 03 00      mov bl, [d + 3]
0468+  18CE 07 AD 16      call _atoi        ; convert to int in AL
0469+  18D1             
0470+  18D1 E7            pop d
0471+  18D2 E5            pop b
0472+  18D3 F9            leave
0473+  18D4 09            ret
0474+  18D5             
0475+  18D5             ;-----------------------------------------------------------------------------
0476+  18D5             ; PRINT 8bit HEX INTEGER
0477+  18D5             ; integer value in reg bl
0478+  18D5             ;-----------------------------------------------------------------------------
0479+  18D5             print_u8x:
0480+  18D5 D7            push a
0481+  18D6 DD            push bl
0482+  18D7             
0483+  18D7 07 BD 16      call _itoa        ; convert bl to char in A
0484+  18DA 2F            mov bl, al        ; save al
0485+  18DB 19 00         mov al, 0
0486+  18DD 05 03         syscall sys_io        ; display AH
0487+  18DF 24            mov ah, bl        ; retrieve al
0488+  18E0 19 00         mov al, 0
0489+  18E2 05 03         syscall sys_io        ; display AL
0490+  18E4             
0491+  18E4 EA            pop bl
0492+  18E5 E4            pop a
0493+  18E6 09            ret
0494+  18E7             
0495+  18E7             ;-----------------------------------------------------------------------------
0496+  18E7             ; print 8bit decimal unsigned number
0497+  18E7             ; input number in AL
0498+  18E7             ;-----------------------------------------------------------------------------
0499+  18E7             print_u8d:
0500+  18E7 D7            push a
0501+  18E8 D8            push b
0502+  18E9             
0503+  18E9 22 00         mov ah, 0
0504+  18EB 26 64 00      mov b, 100
0505+  18EE AE            div a, b
0506+  18EF D8            push b      ; save remainder
0507+  18F0 B9 00         cmp al, 0
0508+  18F2 C6 FC 18      je skip100
0509+  18F5 6A 30         add al, $30
0510+  18F7 23            mov ah, al
0511+  18F8 19 00         mov al, 0
0512+  18FA 05 03         syscall sys_io  ; print coeff
0513+  18FC             skip100:
0514+  18FC E4            pop a
0515+  18FD 22 00         mov ah, 0
0516+  18FF 26 0A 00      mov b, 10
0517+  1902 AE            div a, b
0518+  1903 D8            push b      ; save remainder
0519+  1904 B9 00         cmp al, 0
0520+  1906 C6 10 19      je skip10
0521+  1909 6A 30         add al, $30
0522+  190B 23            mov ah, al
0523+  190C 19 00         mov al, 0
0524+  190E 05 03         syscall sys_io  ; print coeff
0525+  1910             skip10:
0526+  1910 E4            pop a
0527+  1911 1B            mov al, bl
0528+  1912 6A 30         add al, $30
0529+  1914 23            mov ah, al
0530+  1915 19 00         mov al, 0
0531+  1917 05 03         syscall sys_io  ; print coeff
0532+  1919 E5            pop b
0533+  191A E4            pop a
0534+  191B 09            ret
0535+  191C             
0536+  191C             ;-----------------------------------------------------------------------------
0537+  191C             ; INPUT 8BIT HEX INTEGER
0538+  191C             ; read 8bit integer into AL
0539+  191C             ;-----------------------------------------------------------------------------
0540+  191C             scan_u8x:
0541+  191C F8 04 00      enter 4
0542+  191F D8            push b
0543+  1920 DA            push d
0544+  1921             
0545+  1921 FA FD FF      lea d, [bp + -3]
0546+  1924 07 F6 16      call _gets        ; get number
0547+  1927             
0548+  1927 32            mov bl, [d]
0549+  1928 37            mov bh, bl
0550+  1929 33 01 00      mov bl, [d + 1]
0551+  192C 07 AD 16      call _atoi        ; convert to int in AL
0552+  192F             
0553+  192F E7            pop d
0554+  1930 E5            pop b
0555+  1931 F9            leave
0556+  1932 09            ret
0557+  1933             
0558+  1933             ;-----------------------------------------------------------------------------
0559+  1933             ; input decimal number
0560+  1933             ; result in A
0561+  1933             ; 655'\0'
0562+  1933             ; low--------high
0563+  1933             ;-----------------------------------------------------------------------------
0564+  1933             scan_u16d:
0565+  1933 F8 08 00      enter 8
0566+  1936 E2            push si
0567+  1937 D8            push b
0568+  1938 D9            push c
0569+  1939 DA            push d
0570+  193A FA F9 FF      lea d, [bp +- 7]
0571+  193D 07 F6 16      call _gets
0572+  1940 07 4F 16      call _strlen      ; get string length in C
0573+  1943 7E            dec c
0574+  1944 FD 4E         mov si, d
0575+  1946 12            mov a, c
0576+  1947 FD 99         shl a
0577+  1949 3B 85 19      mov d, table_power
0578+  194C 59            add d, a
0579+  194D 38 00 00      mov c, 0
0580+  1950             mul_loop:
0581+  1950 F6            lodsb      ; load ASCII to al
0582+  1951 B9 00         cmp al, 0
0583+  1953 C6 66 19      je mul_exit
0584+  1956 6F 30         sub al, $30    ; make into integer
0585+  1958 22 00         mov ah, 0
0586+  195A 2A            mov b, [d]
0587+  195B AC            mul a, b      ; result in B since it fits in 16bits
0588+  195C 11            mov a, b
0589+  195D 28            mov b, c
0590+  195E 54            add a, b
0591+  195F 39            mov c, a
0592+  1960 63 02 00      sub d, 2
0593+  1963 0A 50 19      jmp mul_loop
0594+  1966             mul_exit:
0595+  1966 12            mov a, c
0596+  1967 E7            pop d
0597+  1968 E6            pop c
0598+  1969 E5            pop b
0599+  196A EF            pop si
0600+  196B F9            leave
0601+  196C 09            ret
0602+  196D             
0603+  196D 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  1971 34 35 36 37 
0603+  1975 38 39 41 42 
0603+  1979 43 44 45 46 
0604+  197D 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  1981 1B 5B 48 00 
0605+  1985             
0606+  1985             table_power:
0607+  1985 01 00         .dw 1
0608+  1987 0A 00         .dw 10
0609+  1989 64 00         .dw 100
0610+  198B E8 03         .dw 1000
0611+  198D 10 27         .dw 100002790   198F             ; --- END INLINE ASM BLOCK
2791   198F             
2792   198F F9            leave
2793   1990 09            ret
2794   1991             
2795   1991             include_ctype_lib:
2796   1991 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2797   1994             
2798   1994             ; --- BEGIN INLINE ASM BLOCK
2799   1994             .include "lib/asm/ctype.asm"
0001+  1994             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  1994             ; ctype.s
0003+  1994             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  1994             
0005+  1994             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  1994             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  1994             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  1994             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  1994             ;; characters are supported.
0010+  1994             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  1994             ;; _isalnum 
0012+  1994             ;; _isalpha 
0013+  1994             ;; islower 
0014+  1994             ;; isupper 
0015+  1994             ;; _isdigit 
0016+  1994             ;; isxdigit
0017+  1994             ;; iscntrl 
0018+  1994             ;; isgraph 
0019+  1994             ;; _isspace 
0020+  1994             ;; isblank 
0021+  1994             ;; isprint 
0022+  1994             ;; ispunct 
0023+  1994             ;; tolower 
0024+  1994             ;; toupper
0025+  1994             
0026+  1994             
0027+  1994             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  1994             ;; IS ALPHANUMERIC
0029+  1994             ;; sets ZF according with result
0030+  1994             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  1994             _isalnum:
0032+  1994 07 B1 19    	call _isalpha
0033+  1997 C6 9D 19    	je _isalnum_exit
0034+  199A 07 9E 19    	call _isdigit
0035+  199D             _isalnum_exit:
0036+  199D 09          	ret	
0037+  199E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  199E             ;; IS DIGIT
0039+  199E             ;; sets ZF according with result
0040+  199E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  199E             _isdigit:
0042+  199E DB          	push al
0043+  199F B9 30       	cmp al, '0'
0044+  19A1 C8 AD 19    	jlu _isdigit_false
0045+  19A4 B9 39       	cmp al, '9'
0046+  19A6 D1 AD 19    	jgu _isdigit_false
0047+  19A9 87 00       	and al, 0	; set ZF
0048+  19AB E8          	pop al
0049+  19AC 09          	ret
0050+  19AD             _isdigit_false:
0051+  19AD 8B 01       	or al, 1	; clear ZF
0052+  19AF E8          	pop al
0053+  19B0 09          	ret	
0054+  19B1             	
0055+  19B1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  19B1             ;; IS ALPHA
0057+  19B1             ;; sets ZF according with result
0058+  19B1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  19B1             _isalpha:
0060+  19B1 DB          	push al
0061+  19B2 B9 5F       	cmp al, '_'
0062+  19B4 C6 D4 19    	je _isalpha_true
0063+  19B7 B9 2E       	cmp al, '.'
0064+  19B9 C6 D4 19    	je _isalpha_true
0065+  19BC B9 41       	cmp al, 'A'
0066+  19BE C8 D0 19    	jlu _isalpha_false
0067+  19C1 B9 7A       	cmp al, 'z'
0068+  19C3 D1 D0 19    	jgu _isalpha_false
0069+  19C6 B9 5A       	cmp al, 'Z'
0070+  19C8 D0 D4 19    	jleu _isalpha_true
0071+  19CB B9 61       	cmp al, 'a'
0072+  19CD C9 D4 19    	jgeu _isalpha_true
0073+  19D0             _isalpha_false:
0074+  19D0 8B 01       	or al, 1	; clear ZF
0075+  19D2 E8          	pop al
0076+  19D3 09          	ret
0077+  19D4             _isalpha_true:
0078+  19D4 87 00       	and al, 0	; set ZF
0079+  19D6 E8          	pop al
0080+  19D7 09          	ret
0081+  19D8             
0082+  19D8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  19D8             ;; IS PATH-ALPHA
0084+  19D8             ;; sets ZF according with result
0085+  19D8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  19D8             ispath:
0087+  19D8 DB          	push al
0088+  19D9 07 9E 19    	call _isdigit
0089+  19DC C6 06 1A    	je ispath_true
0090+  19DF B9 5F       	cmp al, '_'
0091+  19E1 C6 06 1A    	je ispath_true
0092+  19E4 B9 2F       	cmp al, '/'
0093+  19E6 C6 06 1A    	je ispath_true
0094+  19E9 B9 2E       	cmp al, '.'
0095+  19EB C6 06 1A    	je ispath_true
0096+  19EE B9 41       	cmp al, 'A'
0097+  19F0 C8 02 1A    	jlu ispath_false
0098+  19F3 B9 7A       	cmp al, 'z'
0099+  19F5 D1 02 1A    	jgu ispath_false
0100+  19F8 B9 5A       	cmp al, 'Z'
0101+  19FA D0 06 1A    	jleu ispath_true
0102+  19FD B9 61       	cmp al, 'a'
0103+  19FF C9 06 1A    	jgeu ispath_true
0104+  1A02             ispath_false:
0105+  1A02 8B 01       	or al, 1	; clear ZF
0106+  1A04 E8          	pop al
0107+  1A05 09          	ret
0108+  1A06             ispath_true:
0109+  1A06 87 00       	and al, 0	; set ZF
0110+  1A08 E8          	pop al
0111+  1A09 09          	ret
0112+  1A0A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  1A0A             ;; IS SPACE
0114+  1A0A             ;; sets ZF according with result
0115+  1A0A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  1A0A             _isspace:
0117+  1A0A B9 20       	cmp al, $20		; ' '
0118+  1A0C C6 20 1A    	je _isspace_exit
0119+  1A0F B9 09       	cmp al, $09		; '\t'
0120+  1A11 C6 20 1A    	je _isspace_exit
0121+  1A14 B9 0A       	cmp al, $0A		; '\n'
0122+  1A16 C6 20 1A    	je _isspace_exit
0123+  1A19 B9 0D       	cmp al, $0D		; '\r'
0124+  1A1B C6 20 1A    	je _isspace_exit
0125+  1A1E B9 0B       	cmp al, $0B		; '\v'
0126+  1A20             _isspace_exit:
0127+  1A20 09          	ret	
0128+  1A21             
0129+  1A21             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  1A21             ; TO LOWER
0131+  1A21             ; input in AL
0132+  1A21             ; output in AL
0133+  1A21             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  1A21             _to_lower:
0135+  1A21 B9 5A       	cmp al, 'Z'
0136+  1A23 D1 28 1A    	jgu _to_lower_ret
0137+  1A26 6A 20       	add al, $20				; convert to lower case
0138+  1A28             _to_lower_ret:
0139+  1A28 09          	ret
0140+  1A29             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  1A29             ; TO UPPER
0142+  1A29             ; input in AL
0143+  1A29             ; output in AL
0144+  1A29             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  1A29             _to_upper:
0146+  1A29 B9 61       	cmp al, 'a'
0147+  1A2B C8 30 1A    	jlu _to_upper_ret
0148+  1A2E 6F 20       	sub al, $20			; convert to upper case
0149+  1A30             _to_upper_ret:
0150+  1A30 09          	ret
0151+  1A31             
2800   1A31             ; --- END INLINE ASM BLOCK
2801   1A31             
2802   1A31 F9            leave
2803   1A32 09            ret
2804   1A33             
2805   1A33             is_space:
2806   1A33 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2807   1A36             ;; return c == ' ' || c == '\t' || c == '\n' || c == '\r'; 
2808   1A36 FA 05 00      lea d, [bp + 5] ; $c
2809   1A39 32            mov bl, [d]
2810   1A3A A7 00         mov bh, 0
2811   1A3C             ; START RELATIONAL
2812   1A3C D7            push a
2813   1A3D 11            mov a, b
2814   1A3E 26 20 00      mov b, $20
2815   1A41 B0            cmp a, b
2816   1A42 FD 71         seq ; ==
2817   1A44 E4            pop a
2818   1A45             ; END RELATIONAL
2819   1A45             ; START LOGICAL OR
2820   1A45 D7            push a
2821   1A46 11            mov a, b
2822   1A47 FA 05 00      lea d, [bp + 5] ; $c
2823   1A4A 32            mov bl, [d]
2824   1A4B A7 00         mov bh, 0
2825   1A4D             ; START RELATIONAL
2826   1A4D D7            push a
2827   1A4E 11            mov a, b
2828   1A4F 26 09 00      mov b, $9
2829   1A52 B0            cmp a, b
2830   1A53 FD 71         seq ; ==
2831   1A55 E4            pop a
2832   1A56             ; END RELATIONAL
2833   1A56 FD A8         sor a, b ; ||
2834   1A58 11            mov a, b
2835   1A59 FA 05 00      lea d, [bp + 5] ; $c
2836   1A5C 32            mov bl, [d]
2837   1A5D A7 00         mov bh, 0
2838   1A5F             ; START RELATIONAL
2839   1A5F D7            push a
2840   1A60 11            mov a, b
2841   1A61 26 0A 00      mov b, $a
2842   1A64 B0            cmp a, b
2843   1A65 FD 71         seq ; ==
2844   1A67 E4            pop a
2845   1A68             ; END RELATIONAL
2846   1A68 FD A8         sor a, b ; ||
2847   1A6A 11            mov a, b
2848   1A6B FA 05 00      lea d, [bp + 5] ; $c
2849   1A6E 32            mov bl, [d]
2850   1A6F A7 00         mov bh, 0
2851   1A71             ; START RELATIONAL
2852   1A71 D7            push a
2853   1A72 11            mov a, b
2854   1A73 26 0D 00      mov b, $d
2855   1A76 B0            cmp a, b
2856   1A77 FD 71         seq ; ==
2857   1A79 E4            pop a
2858   1A7A             ; END RELATIONAL
2859   1A7A FD A8         sor a, b ; ||
2860   1A7C E4            pop a
2861   1A7D             ; END LOGICAL OR
2862   1A7D F9            leave
2863   1A7E 09            ret
2864   1A7F             
2865   1A7F             is_digit:
2866   1A7F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2867   1A82             ;; return c >= '0' && c <= '9'; 
2868   1A82 FA 05 00      lea d, [bp + 5] ; $c
2869   1A85 32            mov bl, [d]
2870   1A86 A7 00         mov bh, 0
2871   1A88             ; START RELATIONAL
2872   1A88 D7            push a
2873   1A89 11            mov a, b
2874   1A8A 26 30 00      mov b, $30
2875   1A8D B0            cmp a, b
2876   1A8E FD 80         sge ; >=
2877   1A90 E4            pop a
2878   1A91             ; END RELATIONAL
2879   1A91             ; START LOGICAL AND
2880   1A91 D7            push a
2881   1A92 11            mov a, b
2882   1A93 FA 05 00      lea d, [bp + 5] ; $c
2883   1A96 32            mov bl, [d]
2884   1A97 A7 00         mov bh, 0
2885   1A99             ; START RELATIONAL
2886   1A99 D7            push a
2887   1A9A 11            mov a, b
2888   1A9B 26 39 00      mov b, $39
2889   1A9E B0            cmp a, b
2890   1A9F FD 74         sle ; <= (signed)
2891   1AA1 E4            pop a
2892   1AA2             ; END RELATIONAL
2893   1AA2 FD A7         sand a, b
2894   1AA4 E4            pop a
2895   1AA5             ; END LOGICAL AND
2896   1AA5 F9            leave
2897   1AA6 09            ret
2898   1AA7             
2899   1AA7             is_alpha:
2900   1AA7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2901   1AAA             ;; return(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '_'); 
2902   1AAA FA 05 00      lea d, [bp + 5] ; $c
2903   1AAD 32            mov bl, [d]
2904   1AAE A7 00         mov bh, 0
2905   1AB0             ; START RELATIONAL
2906   1AB0 D7            push a
2907   1AB1 11            mov a, b
2908   1AB2 26 61 00      mov b, $61
2909   1AB5 B0            cmp a, b
2910   1AB6 FD 80         sge ; >=
2911   1AB8 E4            pop a
2912   1AB9             ; END RELATIONAL
2913   1AB9             ; START LOGICAL AND
2914   1AB9 D7            push a
2915   1ABA 11            mov a, b
2916   1ABB FA 05 00      lea d, [bp + 5] ; $c
2917   1ABE 32            mov bl, [d]
2918   1ABF A7 00         mov bh, 0
2919   1AC1             ; START RELATIONAL
2920   1AC1 D7            push a
2921   1AC2 11            mov a, b
2922   1AC3 26 7A 00      mov b, $7a
2923   1AC6 B0            cmp a, b
2924   1AC7 FD 74         sle ; <= (signed)
2925   1AC9 E4            pop a
2926   1ACA             ; END RELATIONAL
2927   1ACA FD A7         sand a, b
2928   1ACC E4            pop a
2929   1ACD             ; END LOGICAL AND
2930   1ACD             ; START LOGICAL OR
2931   1ACD D7            push a
2932   1ACE 11            mov a, b
2933   1ACF FA 05 00      lea d, [bp + 5] ; $c
2934   1AD2 32            mov bl, [d]
2935   1AD3 A7 00         mov bh, 0
2936   1AD5             ; START RELATIONAL
2937   1AD5 D7            push a
2938   1AD6 11            mov a, b
2939   1AD7 26 41 00      mov b, $41
2940   1ADA B0            cmp a, b
2941   1ADB FD 80         sge ; >=
2942   1ADD E4            pop a
2943   1ADE             ; END RELATIONAL
2944   1ADE             ; START LOGICAL AND
2945   1ADE D7            push a
2946   1ADF 11            mov a, b
2947   1AE0 FA 05 00      lea d, [bp + 5] ; $c
2948   1AE3 32            mov bl, [d]
2949   1AE4 A7 00         mov bh, 0
2950   1AE6             ; START RELATIONAL
2951   1AE6 D7            push a
2952   1AE7 11            mov a, b
2953   1AE8 26 5A 00      mov b, $5a
2954   1AEB B0            cmp a, b
2955   1AEC FD 74         sle ; <= (signed)
2956   1AEE E4            pop a
2957   1AEF             ; END RELATIONAL
2958   1AEF FD A7         sand a, b
2959   1AF1 E4            pop a
2960   1AF2             ; END LOGICAL AND
2961   1AF2 FD A8         sor a, b ; ||
2962   1AF4 11            mov a, b
2963   1AF5 FA 05 00      lea d, [bp + 5] ; $c
2964   1AF8 32            mov bl, [d]
2965   1AF9 A7 00         mov bh, 0
2966   1AFB             ; START RELATIONAL
2967   1AFB D7            push a
2968   1AFC 11            mov a, b
2969   1AFD 26 5F 00      mov b, $5f
2970   1B00 B0            cmp a, b
2971   1B01 FD 71         seq ; ==
2972   1B03 E4            pop a
2973   1B04             ; END RELATIONAL
2974   1B04 FD A8         sor a, b ; ||
2975   1B06 E4            pop a
2976   1B07             ; END LOGICAL OR
2977   1B07 F9            leave
2978   1B08 09            ret
2979   1B09             
2980   1B09             tolower:
2981   1B09 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2982   1B0C             ;; if (ch >= 'A' && ch <= 'Z')  
2983   1B0C             _if44_cond:
2984   1B0C FA 05 00      lea d, [bp + 5] ; $ch
2985   1B0F 32            mov bl, [d]
2986   1B10 A7 00         mov bh, 0
2987   1B12             ; START RELATIONAL
2988   1B12 D7            push a
2989   1B13 11            mov a, b
2990   1B14 26 41 00      mov b, $41
2991   1B17 B0            cmp a, b
2992   1B18 FD 80         sge ; >=
2993   1B1A E4            pop a
2994   1B1B             ; END RELATIONAL
2995   1B1B             ; START LOGICAL AND
2996   1B1B D7            push a
2997   1B1C 11            mov a, b
2998   1B1D FA 05 00      lea d, [bp + 5] ; $ch
2999   1B20 32            mov bl, [d]
3000   1B21 A7 00         mov bh, 0
3001   1B23             ; START RELATIONAL
3002   1B23 D7            push a
3003   1B24 11            mov a, b
3004   1B25 26 5A 00      mov b, $5a
3005   1B28 B0            cmp a, b
3006   1B29 FD 74         sle ; <= (signed)
3007   1B2B E4            pop a
3008   1B2C             ; END RELATIONAL
3009   1B2C FD A7         sand a, b
3010   1B2E E4            pop a
3011   1B2F             ; END LOGICAL AND
3012   1B2F C0 00 00      cmp b, 0
3013   1B32 C6 4D 1B      je _if44_else
3014   1B35             _if44_true:
3015   1B35             ;; return ch - 'A' + 'a'; 
3016   1B35 FA 05 00      lea d, [bp + 5] ; $ch
3017   1B38 32            mov bl, [d]
3018   1B39 A7 00         mov bh, 0
3019   1B3B             ; START TERMS
3020   1B3B D7            push a
3021   1B3C 11            mov a, b
3022   1B3D 26 41 00      mov b, $41
3023   1B40 60            sub a, b
3024   1B41 27            mov b, a
3025   1B42 11            mov a, b
3026   1B43 26 61 00      mov b, $61
3027   1B46 56            add b, a
3028   1B47 E4            pop a
3029   1B48             ; END TERMS
3030   1B48 F9            leave
3031   1B49 09            ret
3032   1B4A 0A 55 1B      jmp _if44_exit
3033   1B4D             _if44_else:
3034   1B4D             ;; return ch; 
3035   1B4D FA 05 00      lea d, [bp + 5] ; $ch
3036   1B50 32            mov bl, [d]
3037   1B51 A7 00         mov bh, 0
3038   1B53 F9            leave
3039   1B54 09            ret
3040   1B55             _if44_exit:
3041   1B55 F9            leave
3042   1B56 09            ret
3043   1B57             
3044   1B57             toupper:
3045   1B57 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3046   1B5A             ;; if (ch >= 'a' && ch <= 'z')  
3047   1B5A             _if45_cond:
3048   1B5A FA 05 00      lea d, [bp + 5] ; $ch
3049   1B5D 32            mov bl, [d]
3050   1B5E A7 00         mov bh, 0
3051   1B60             ; START RELATIONAL
3052   1B60 D7            push a
3053   1B61 11            mov a, b
3054   1B62 26 61 00      mov b, $61
3055   1B65 B0            cmp a, b
3056   1B66 FD 80         sge ; >=
3057   1B68 E4            pop a
3058   1B69             ; END RELATIONAL
3059   1B69             ; START LOGICAL AND
3060   1B69 D7            push a
3061   1B6A 11            mov a, b
3062   1B6B FA 05 00      lea d, [bp + 5] ; $ch
3063   1B6E 32            mov bl, [d]
3064   1B6F A7 00         mov bh, 0
3065   1B71             ; START RELATIONAL
3066   1B71 D7            push a
3067   1B72 11            mov a, b
3068   1B73 26 7A 00      mov b, $7a
3069   1B76 B0            cmp a, b
3070   1B77 FD 74         sle ; <= (signed)
3071   1B79 E4            pop a
3072   1B7A             ; END RELATIONAL
3073   1B7A FD A7         sand a, b
3074   1B7C E4            pop a
3075   1B7D             ; END LOGICAL AND
3076   1B7D C0 00 00      cmp b, 0
3077   1B80 C6 9B 1B      je _if45_else
3078   1B83             _if45_true:
3079   1B83             ;; return ch - 'a' + 'A'; 
3080   1B83 FA 05 00      lea d, [bp + 5] ; $ch
3081   1B86 32            mov bl, [d]
3082   1B87 A7 00         mov bh, 0
3083   1B89             ; START TERMS
3084   1B89 D7            push a
3085   1B8A 11            mov a, b
3086   1B8B 26 61 00      mov b, $61
3087   1B8E 60            sub a, b
3088   1B8F 27            mov b, a
3089   1B90 11            mov a, b
3090   1B91 26 41 00      mov b, $41
3091   1B94 56            add b, a
3092   1B95 E4            pop a
3093   1B96             ; END TERMS
3094   1B96 F9            leave
3095   1B97 09            ret
3096   1B98 0A A3 1B      jmp _if45_exit
3097   1B9B             _if45_else:
3098   1B9B             ;; return ch; 
3099   1B9B FA 05 00      lea d, [bp + 5] ; $ch
3100   1B9E 32            mov bl, [d]
3101   1B9F A7 00         mov bh, 0
3102   1BA1 F9            leave
3103   1BA2 09            ret
3104   1BA3             _if45_exit:
3105   1BA3 F9            leave
3106   1BA4 09            ret
3107   1BA5             
3108   1BA5             is_delimiter:
3109   1BA5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3110   1BA8             ;; if( 
3111   1BA8             _if46_cond:
3112   1BA8 FA 05 00      lea d, [bp + 5] ; $c
3113   1BAB 32            mov bl, [d]
3114   1BAC A7 00         mov bh, 0
3115   1BAE             ; START RELATIONAL
3116   1BAE D7            push a
3117   1BAF 11            mov a, b
3118   1BB0 26 40 00      mov b, $40
3119   1BB3 B0            cmp a, b
3120   1BB4 FD 71         seq ; ==
3121   1BB6 E4            pop a
3122   1BB7             ; END RELATIONAL
3123   1BB7             ; START LOGICAL OR
3124   1BB7 D7            push a
3125   1BB8 11            mov a, b
3126   1BB9 FA 05 00      lea d, [bp + 5] ; $c
3127   1BBC 32            mov bl, [d]
3128   1BBD A7 00         mov bh, 0
3129   1BBF             ; START RELATIONAL
3130   1BBF D7            push a
3131   1BC0 11            mov a, b
3132   1BC1 26 23 00      mov b, $23
3133   1BC4 B0            cmp a, b
3134   1BC5 FD 71         seq ; ==
3135   1BC7 E4            pop a
3136   1BC8             ; END RELATIONAL
3137   1BC8 FD A8         sor a, b ; ||
3138   1BCA 11            mov a, b
3139   1BCB FA 05 00      lea d, [bp + 5] ; $c
3140   1BCE 32            mov bl, [d]
3141   1BCF A7 00         mov bh, 0
3142   1BD1             ; START RELATIONAL
3143   1BD1 D7            push a
3144   1BD2 11            mov a, b
3145   1BD3 26 24 00      mov b, $24
3146   1BD6 B0            cmp a, b
3147   1BD7 FD 71         seq ; ==
3148   1BD9 E4            pop a
3149   1BDA             ; END RELATIONAL
3150   1BDA FD A8         sor a, b ; ||
3151   1BDC 11            mov a, b
3152   1BDD FA 05 00      lea d, [bp + 5] ; $c
3153   1BE0 32            mov bl, [d]
3154   1BE1 A7 00         mov bh, 0
3155   1BE3             ; START RELATIONAL
3156   1BE3 D7            push a
3157   1BE4 11            mov a, b
3158   1BE5 26 2B 00      mov b, $2b
3159   1BE8 B0            cmp a, b
3160   1BE9 FD 71         seq ; ==
3161   1BEB E4            pop a
3162   1BEC             ; END RELATIONAL
3163   1BEC FD A8         sor a, b ; ||
3164   1BEE 11            mov a, b
3165   1BEF FA 05 00      lea d, [bp + 5] ; $c
3166   1BF2 32            mov bl, [d]
3167   1BF3 A7 00         mov bh, 0
3168   1BF5             ; START RELATIONAL
3169   1BF5 D7            push a
3170   1BF6 11            mov a, b
3171   1BF7 26 2D 00      mov b, $2d
3172   1BFA B0            cmp a, b
3173   1BFB FD 71         seq ; ==
3174   1BFD E4            pop a
3175   1BFE             ; END RELATIONAL
3176   1BFE FD A8         sor a, b ; ||
3177   1C00 11            mov a, b
3178   1C01 FA 05 00      lea d, [bp + 5] ; $c
3179   1C04 32            mov bl, [d]
3180   1C05 A7 00         mov bh, 0
3181   1C07             ; START RELATIONAL
3182   1C07 D7            push a
3183   1C08 11            mov a, b
3184   1C09 26 2A 00      mov b, $2a
3185   1C0C B0            cmp a, b
3186   1C0D FD 71         seq ; ==
3187   1C0F E4            pop a
3188   1C10             ; END RELATIONAL
3189   1C10 FD A8         sor a, b ; ||
3190   1C12 11            mov a, b
3191   1C13 FA 05 00      lea d, [bp + 5] ; $c
3192   1C16 32            mov bl, [d]
3193   1C17 A7 00         mov bh, 0
3194   1C19             ; START RELATIONAL
3195   1C19 D7            push a
3196   1C1A 11            mov a, b
3197   1C1B 26 2F 00      mov b, $2f
3198   1C1E B0            cmp a, b
3199   1C1F FD 71         seq ; ==
3200   1C21 E4            pop a
3201   1C22             ; END RELATIONAL
3202   1C22 FD A8         sor a, b ; ||
3203   1C24 11            mov a, b
3204   1C25 FA 05 00      lea d, [bp + 5] ; $c
3205   1C28 32            mov bl, [d]
3206   1C29 A7 00         mov bh, 0
3207   1C2B             ; START RELATIONAL
3208   1C2B D7            push a
3209   1C2C 11            mov a, b
3210   1C2D 26 25 00      mov b, $25
3211   1C30 B0            cmp a, b
3212   1C31 FD 71         seq ; ==
3213   1C33 E4            pop a
3214   1C34             ; END RELATIONAL
3215   1C34 FD A8         sor a, b ; ||
3216   1C36 11            mov a, b
3217   1C37 FA 05 00      lea d, [bp + 5] ; $c
3218   1C3A 32            mov bl, [d]
3219   1C3B A7 00         mov bh, 0
3220   1C3D             ; START RELATIONAL
3221   1C3D D7            push a
3222   1C3E 11            mov a, b
3223   1C3F 26 5B 00      mov b, $5b
3224   1C42 B0            cmp a, b
3225   1C43 FD 71         seq ; ==
3226   1C45 E4            pop a
3227   1C46             ; END RELATIONAL
3228   1C46 FD A8         sor a, b ; ||
3229   1C48 11            mov a, b
3230   1C49 FA 05 00      lea d, [bp + 5] ; $c
3231   1C4C 32            mov bl, [d]
3232   1C4D A7 00         mov bh, 0
3233   1C4F             ; START RELATIONAL
3234   1C4F D7            push a
3235   1C50 11            mov a, b
3236   1C51 26 5D 00      mov b, $5d
3237   1C54 B0            cmp a, b
3238   1C55 FD 71         seq ; ==
3239   1C57 E4            pop a
3240   1C58             ; END RELATIONAL
3241   1C58 FD A8         sor a, b ; ||
3242   1C5A 11            mov a, b
3243   1C5B FA 05 00      lea d, [bp + 5] ; $c
3244   1C5E 32            mov bl, [d]
3245   1C5F A7 00         mov bh, 0
3246   1C61             ; START RELATIONAL
3247   1C61 D7            push a
3248   1C62 11            mov a, b
3249   1C63 26 28 00      mov b, $28
3250   1C66 B0            cmp a, b
3251   1C67 FD 71         seq ; ==
3252   1C69 E4            pop a
3253   1C6A             ; END RELATIONAL
3254   1C6A FD A8         sor a, b ; ||
3255   1C6C 11            mov a, b
3256   1C6D FA 05 00      lea d, [bp + 5] ; $c
3257   1C70 32            mov bl, [d]
3258   1C71 A7 00         mov bh, 0
3259   1C73             ; START RELATIONAL
3260   1C73 D7            push a
3261   1C74 11            mov a, b
3262   1C75 26 29 00      mov b, $29
3263   1C78 B0            cmp a, b
3264   1C79 FD 71         seq ; ==
3265   1C7B E4            pop a
3266   1C7C             ; END RELATIONAL
3267   1C7C FD A8         sor a, b ; ||
3268   1C7E 11            mov a, b
3269   1C7F FA 05 00      lea d, [bp + 5] ; $c
3270   1C82 32            mov bl, [d]
3271   1C83 A7 00         mov bh, 0
3272   1C85             ; START RELATIONAL
3273   1C85 D7            push a
3274   1C86 11            mov a, b
3275   1C87 26 7B 00      mov b, $7b
3276   1C8A B0            cmp a, b
3277   1C8B FD 71         seq ; ==
3278   1C8D E4            pop a
3279   1C8E             ; END RELATIONAL
3280   1C8E FD A8         sor a, b ; ||
3281   1C90 11            mov a, b
3282   1C91 FA 05 00      lea d, [bp + 5] ; $c
3283   1C94 32            mov bl, [d]
3284   1C95 A7 00         mov bh, 0
3285   1C97             ; START RELATIONAL
3286   1C97 D7            push a
3287   1C98 11            mov a, b
3288   1C99 26 7D 00      mov b, $7d
3289   1C9C B0            cmp a, b
3290   1C9D FD 71         seq ; ==
3291   1C9F E4            pop a
3292   1CA0             ; END RELATIONAL
3293   1CA0 FD A8         sor a, b ; ||
3294   1CA2 11            mov a, b
3295   1CA3 FA 05 00      lea d, [bp + 5] ; $c
3296   1CA6 32            mov bl, [d]
3297   1CA7 A7 00         mov bh, 0
3298   1CA9             ; START RELATIONAL
3299   1CA9 D7            push a
3300   1CAA 11            mov a, b
3301   1CAB 26 3A 00      mov b, $3a
3302   1CAE B0            cmp a, b
3303   1CAF FD 71         seq ; ==
3304   1CB1 E4            pop a
3305   1CB2             ; END RELATIONAL
3306   1CB2 FD A8         sor a, b ; ||
3307   1CB4 11            mov a, b
3308   1CB5 FA 05 00      lea d, [bp + 5] ; $c
3309   1CB8 32            mov bl, [d]
3310   1CB9 A7 00         mov bh, 0
3311   1CBB             ; START RELATIONAL
3312   1CBB D7            push a
3313   1CBC 11            mov a, b
3314   1CBD 26 3B 00      mov b, $3b
3315   1CC0 B0            cmp a, b
3316   1CC1 FD 71         seq ; ==
3317   1CC3 E4            pop a
3318   1CC4             ; END RELATIONAL
3319   1CC4 FD A8         sor a, b ; ||
3320   1CC6 11            mov a, b
3321   1CC7 FA 05 00      lea d, [bp + 5] ; $c
3322   1CCA 32            mov bl, [d]
3323   1CCB A7 00         mov bh, 0
3324   1CCD             ; START RELATIONAL
3325   1CCD D7            push a
3326   1CCE 11            mov a, b
3327   1CCF 26 3C 00      mov b, $3c
3328   1CD2 B0            cmp a, b
3329   1CD3 FD 71         seq ; ==
3330   1CD5 E4            pop a
3331   1CD6             ; END RELATIONAL
3332   1CD6 FD A8         sor a, b ; ||
3333   1CD8 11            mov a, b
3334   1CD9 FA 05 00      lea d, [bp + 5] ; $c
3335   1CDC 32            mov bl, [d]
3336   1CDD A7 00         mov bh, 0
3337   1CDF             ; START RELATIONAL
3338   1CDF D7            push a
3339   1CE0 11            mov a, b
3340   1CE1 26 3E 00      mov b, $3e
3341   1CE4 B0            cmp a, b
3342   1CE5 FD 71         seq ; ==
3343   1CE7 E4            pop a
3344   1CE8             ; END RELATIONAL
3345   1CE8 FD A8         sor a, b ; ||
3346   1CEA 11            mov a, b
3347   1CEB FA 05 00      lea d, [bp + 5] ; $c
3348   1CEE 32            mov bl, [d]
3349   1CEF A7 00         mov bh, 0
3350   1CF1             ; START RELATIONAL
3351   1CF1 D7            push a
3352   1CF2 11            mov a, b
3353   1CF3 26 3D 00      mov b, $3d
3354   1CF6 B0            cmp a, b
3355   1CF7 FD 71         seq ; ==
3356   1CF9 E4            pop a
3357   1CFA             ; END RELATIONAL
3358   1CFA FD A8         sor a, b ; ||
3359   1CFC 11            mov a, b
3360   1CFD FA 05 00      lea d, [bp + 5] ; $c
3361   1D00 32            mov bl, [d]
3362   1D01 A7 00         mov bh, 0
3363   1D03             ; START RELATIONAL
3364   1D03 D7            push a
3365   1D04 11            mov a, b
3366   1D05 26 21 00      mov b, $21
3367   1D08 B0            cmp a, b
3368   1D09 FD 71         seq ; ==
3369   1D0B E4            pop a
3370   1D0C             ; END RELATIONAL
3371   1D0C FD A8         sor a, b ; ||
3372   1D0E 11            mov a, b
3373   1D0F FA 05 00      lea d, [bp + 5] ; $c
3374   1D12 32            mov bl, [d]
3375   1D13 A7 00         mov bh, 0
3376   1D15             ; START RELATIONAL
3377   1D15 D7            push a
3378   1D16 11            mov a, b
3379   1D17 26 5E 00      mov b, $5e
3380   1D1A B0            cmp a, b
3381   1D1B FD 71         seq ; ==
3382   1D1D E4            pop a
3383   1D1E             ; END RELATIONAL
3384   1D1E FD A8         sor a, b ; ||
3385   1D20 11            mov a, b
3386   1D21 FA 05 00      lea d, [bp + 5] ; $c
3387   1D24 32            mov bl, [d]
3388   1D25 A7 00         mov bh, 0
3389   1D27             ; START RELATIONAL
3390   1D27 D7            push a
3391   1D28 11            mov a, b
3392   1D29 26 26 00      mov b, $26
3393   1D2C B0            cmp a, b
3394   1D2D FD 71         seq ; ==
3395   1D2F E4            pop a
3396   1D30             ; END RELATIONAL
3397   1D30 FD A8         sor a, b ; ||
3398   1D32 11            mov a, b
3399   1D33 FA 05 00      lea d, [bp + 5] ; $c
3400   1D36 32            mov bl, [d]
3401   1D37 A7 00         mov bh, 0
3402   1D39             ; START RELATIONAL
3403   1D39 D7            push a
3404   1D3A 11            mov a, b
3405   1D3B 26 7C 00      mov b, $7c
3406   1D3E B0            cmp a, b
3407   1D3F FD 71         seq ; ==
3408   1D41 E4            pop a
3409   1D42             ; END RELATIONAL
3410   1D42 FD A8         sor a, b ; ||
3411   1D44 11            mov a, b
3412   1D45 FA 05 00      lea d, [bp + 5] ; $c
3413   1D48 32            mov bl, [d]
3414   1D49 A7 00         mov bh, 0
3415   1D4B             ; START RELATIONAL
3416   1D4B D7            push a
3417   1D4C 11            mov a, b
3418   1D4D 26 7E 00      mov b, $7e
3419   1D50 B0            cmp a, b
3420   1D51 FD 71         seq ; ==
3421   1D53 E4            pop a
3422   1D54             ; END RELATIONAL
3423   1D54 FD A8         sor a, b ; ||
3424   1D56 11            mov a, b
3425   1D57 FA 05 00      lea d, [bp + 5] ; $c
3426   1D5A 32            mov bl, [d]
3427   1D5B A7 00         mov bh, 0
3428   1D5D             ; START RELATIONAL
3429   1D5D D7            push a
3430   1D5E 11            mov a, b
3431   1D5F 26 2E 00      mov b, $2e
3432   1D62 B0            cmp a, b
3433   1D63 FD 71         seq ; ==
3434   1D65 E4            pop a
3435   1D66             ; END RELATIONAL
3436   1D66 FD A8         sor a, b ; ||
3437   1D68 E4            pop a
3438   1D69             ; END LOGICAL OR
3439   1D69 C0 00 00      cmp b, 0
3440   1D6C C6 77 1D      je _if46_else
3441   1D6F             _if46_true:
3442   1D6F             ;; return 1; 
3443   1D6F 26 01 00      mov b, $1
3444   1D72 F9            leave
3445   1D73 09            ret
3446   1D74 0A 7C 1D      jmp _if46_exit
3447   1D77             _if46_else:
3448   1D77             ;; return 0; 
3449   1D77 26 00 00      mov b, $0
3450   1D7A F9            leave
3451   1D7B 09            ret
3452   1D7C             _if46_exit:
3453   1D7C F9            leave
3454   1D7D 09            ret
3455   1D7E             
3456   1D7E             getnum:
3457   1D7E F8 00 00      enter 0 ; (push bp; mov bp, sp)
3458   1D81             ;; int n; 
3459   1D81 52 02 00      sub sp, 2 ; n
3460   1D84             ;; print(prompt); 
3461   1D84 FA 05 00      lea d, [bp + 5] ; $prompt
3462   1D87 2A            mov b, [d]
3463   1D88 FD AB         swp b
3464   1D8A D8            push b
3465   1D8B 07 A6 15      call print
3466   1D8E 51 02 00      add sp, 2
3467   1D91             ;; n = scann(); 
3468   1D91 FA FF FF      lea d, [bp + -1] ; $n
3469   1D94 DA            push d
3470   1D95 07 81 15      call scann
3471   1D98 E7            pop d
3472   1D99 FD 43         mov [d], b
3473   1D9B             ;; return n; 
3474   1D9B FA FF FF      lea d, [bp + -1] ; $n
3475   1D9E 2A            mov b, [d]
3476   1D9F F9            leave
3477   1DA0 09            ret
3478   1DA1             
3479   1DA1             getlet:
3480   1DA1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3481   1DA4             ;; char c = '\n'; 
3482   1DA4 52 01 00      sub sp, 1 ; c
3483   1DA7             ; --- START LOCAL VAR INITIALIZATION
3484   1DA7 FA 00 00      lea d, [bp + 0] ; $c
3485   1DAA DA            push d
3486   1DAB 26 0A 00      mov b, $a
3487   1DAE E7            pop d
3488   1DAF FD 3E         mov [d], bl
3489   1DB1             ; --- END LOCAL VAR INITIALIZATION
3490   1DB1             ;; print(prompt); 
3491   1DB1 FA 05 00      lea d, [bp + 5] ; $prompt
3492   1DB4 2A            mov b, [d]
3493   1DB5 FD AB         swp b
3494   1DB7 D8            push b
3495   1DB8 07 A6 15      call print
3496   1DBB 51 02 00      add sp, 2
3497   1DBE             ;; while (c == '\n') { 
3498   1DBE             _while47_cond:
3499   1DBE FA 00 00      lea d, [bp + 0] ; $c
3500   1DC1 32            mov bl, [d]
3501   1DC2 A7 00         mov bh, 0
3502   1DC4             ; START RELATIONAL
3503   1DC4 D7            push a
3504   1DC5 11            mov a, b
3505   1DC6 26 0A 00      mov b, $a
3506   1DC9 B0            cmp a, b
3507   1DCA FD 71         seq ; ==
3508   1DCC E4            pop a
3509   1DCD             ; END RELATIONAL
3510   1DCD C0 00 00      cmp b, 0
3511   1DD0 C6 E0 1D      je _while47_exit
3512   1DD3             _while47_block:
3513   1DD3             ;; c = getchar(); 
3514   1DD3 FA 00 00      lea d, [bp + 0] ; $c
3515   1DD6 DA            push d
3516   1DD7 07 6B 15      call getchar
3517   1DDA E7            pop d
3518   1DDB FD 3E         mov [d], bl
3519   1DDD 0A BE 1D      jmp _while47_cond
3520   1DE0             _while47_exit:
3521   1DE0             ;; return toupper(c); 
3522   1DE0 FA 00 00      lea d, [bp + 0] ; $c
3523   1DE3 32            mov bl, [d]
3524   1DE4 A7 00         mov bh, 0
3525   1DE6 DD            push bl
3526   1DE7 07 57 1B      call toupper
3527   1DEA 51 01 00      add sp, 1
3528   1DED F9            leave
3529   1DEE 09            ret
3530   1DEF             
3531   1DEF             print_instructions:
3532   1DEF F8 00 00      enter 0 ; (push bp; mov bp, sp)
3533   1DF2             ;; print("Welcome to 'hunt the wumpus'\n"); 
3534   1DF2 26 43 2C      mov b, _s5 ; "Welcome to 'hunt the wumpus'\n"
3535   1DF5 FD AB         swp b
3536   1DF7 D8            push b
3537   1DF8 07 A6 15      call print
3538   1DFB 51 02 00      add sp, 2
3539   1DFE             ;; print("The wumpus lives in a cave of 20 rooms. Each room\n"); 
3540   1DFE 26 61 2C      mov b, _s6 ; "The wumpus lives in a cave of 20 rooms. Each room\n"
3541   1E01 FD AB         swp b
3542   1E03 D8            push b
3543   1E04 07 A6 15      call print
3544   1E07 51 02 00      add sp, 2
3545   1E0A             ;; print("has 3 tunnels leading to other rooms.\n");  
3546   1E0A 26 94 2C      mov b, _s7 ; "has 3 tunnels leading to other rooms.\n"
3547   1E0D FD AB         swp b
3548   1E0F D8            push b
3549   1E10 07 A6 15      call print
3550   1E13 51 02 00      add sp, 2
3551   1E16             ;; print("Look at a dodecahedron to see how this works.\n"); 
3552   1E16 26 BB 2C      mov b, _s8 ; "Look at a dodecahedron to see how this works.\n"
3553   1E19 FD AB         swp b
3554   1E1B D8            push b
3555   1E1C 07 A6 15      call print
3556   1E1F 51 02 00      add sp, 2
3557   1E22             ;; print("\n"); 
3558   1E22 26 EA 2C      mov b, _s9 ; "\n"
3559   1E25 FD AB         swp b
3560   1E27 D8            push b
3561   1E28 07 A6 15      call print
3562   1E2B 51 02 00      add sp, 2
3563   1E2E             ;; print(" Hazards:\n"); 
3564   1E2E 26 EC 2C      mov b, _s10 ; " Hazards:\n"
3565   1E31 FD AB         swp b
3566   1E33 D8            push b
3567   1E34 07 A6 15      call print
3568   1E37 51 02 00      add sp, 2
3569   1E3A             ;; print(" Bottomless pits: Two rooms have bottomless pits in them\n"); 
3570   1E3A 26 F7 2C      mov b, _s11 ; " Bottomless pits: Two rooms have bottomless pits in them\n"
3571   1E3D FD AB         swp b
3572   1E3F D8            push b
3573   1E40 07 A6 15      call print
3574   1E43 51 02 00      add sp, 2
3575   1E46             ;; print(" If you go there, you fall into the pit (& lose!)\n"); 
3576   1E46 26 31 2D      mov b, _s12 ; " If you go there, you fall into the pit (& lose!)\n"
3577   1E49 FD AB         swp b
3578   1E4B D8            push b
3579   1E4C 07 A6 15      call print
3580   1E4F 51 02 00      add sp, 2
3581   1E52             ;; print(" SUPER BATS     : TWO OTHER ROOMS HAVE SUPER BATS. IF YOU\n"); 
3582   1E52 26 64 2D      mov b, _s13 ; " SUPER BATS     : TWO OTHER ROOMS HAVE SUPER BATS. IF YOU\n"
3583   1E55 FD AB         swp b
3584   1E57 D8            push b
3585   1E58 07 A6 15      call print
3586   1E5B 51 02 00      add sp, 2
3587   1E5E             ;; print(" GO THERE, A BAT GRABS YOU AND TAKES YOU TO SOME OTHER\n"); 
3588   1E5E 26 9F 2D      mov b, _s14 ; " GO THERE, A BAT GRABS YOU AND TAKES YOU TO SOME OTHER\n"
3589   1E61 FD AB         swp b
3590   1E63 D8            push b
3591   1E64 07 A6 15      call print
3592   1E67 51 02 00      add sp, 2
3593   1E6A             ;; print(" ROOM AT RANDOM. (WHICH MAY BE TROUBLESOME)\n\n"); 
3594   1E6A 26 D7 2D      mov b, _s15 ; " ROOM AT RANDOM. (WHICH MAY BE TROUBLESOME)\n\n"
3595   1E6D FD AB         swp b
3596   1E6F D8            push b
3597   1E70 07 A6 15      call print
3598   1E73 51 02 00      add sp, 2
3599   1E76             ;; print(" WUMPUS:\n"); 
3600   1E76 26 05 2E      mov b, _s16 ; " WUMPUS:\n"
3601   1E79 FD AB         swp b
3602   1E7B D8            push b
3603   1E7C 07 A6 15      call print
3604   1E7F 51 02 00      add sp, 2
3605   1E82             ;; print(" THE WUMPUS IS NOT BOTHERED BY HAZARDS (HE HAS SUCKER\n"); 
3606   1E82 26 0F 2E      mov b, _s17 ; " THE WUMPUS IS NOT BOTHERED BY HAZARDS (HE HAS SUCKER\n"
3607   1E85 FD AB         swp b
3608   1E87 D8            push b
3609   1E88 07 A6 15      call print
3610   1E8B 51 02 00      add sp, 2
3611   1E8E             ;; print(" FEET AND IS TOO BIG FOR A BAT TO LIFT).  USUALLY\n"); 
3612   1E8E 26 46 2E      mov b, _s18 ; " FEET AND IS TOO BIG FOR A BAT TO LIFT).  USUALLY\n"
3613   1E91 FD AB         swp b
3614   1E93 D8            push b
3615   1E94 07 A6 15      call print
3616   1E97 51 02 00      add sp, 2
3617   1E9A             ;; print(" HE IS ASLEEP.  TWO THINGS WAKE HIM UP: YOU SHOOTING AN\n"); 
3618   1E9A 26 79 2E      mov b, _s19 ; " HE IS ASLEEP.  TWO THINGS WAKE HIM UP: YOU SHOOTING AN\n"
3619   1E9D FD AB         swp b
3620   1E9F D8            push b
3621   1EA0 07 A6 15      call print
3622   1EA3 51 02 00      add sp, 2
3623   1EA6             ;; print(" ARROW OR YOU ENTERING HIS ROOM.\n"); 
3624   1EA6 26 B2 2E      mov b, _s20 ; " ARROW OR YOU ENTERING HIS ROOM.\n"
3625   1EA9 FD AB         swp b
3626   1EAB D8            push b
3627   1EAC 07 A6 15      call print
3628   1EAF 51 02 00      add sp, 2
3629   1EB2             ;; print(" IF THE WUMPUS WAKES HE MOVES (P=.75) ONE ROOM\n"); 
3630   1EB2 26 D4 2E      mov b, _s21 ; " IF THE WUMPUS WAKES HE MOVES (P=.75) ONE ROOM\n"
3631   1EB5 FD AB         swp b
3632   1EB7 D8            push b
3633   1EB8 07 A6 15      call print
3634   1EBB 51 02 00      add sp, 2
3635   1EBE             ;; print(" OR STAYS STILL (P=.25).  AFTER THAT, IF HE IS WHERE YOU\n"); 
3636   1EBE 26 04 2F      mov b, _s22 ; " OR STAYS STILL (P=.25).  AFTER THAT, IF HE IS WHERE YOU\n"
3637   1EC1 FD AB         swp b
3638   1EC3 D8            push b
3639   1EC4 07 A6 15      call print
3640   1EC7 51 02 00      add sp, 2
3641   1ECA             ;; print(" ARE, HE EATS YOU UP AND YOU LOSE!\n"); 
3642   1ECA 26 3E 2F      mov b, _s23 ; " ARE, HE EATS YOU UP AND YOU LOSE!\n"
3643   1ECD FD AB         swp b
3644   1ECF D8            push b
3645   1ED0 07 A6 15      call print
3646   1ED3 51 02 00      add sp, 2
3647   1ED6             ;; print("\n"); 
3648   1ED6 26 EA 2C      mov b, _s9 ; "\n"
3649   1ED9 FD AB         swp b
3650   1EDB D8            push b
3651   1EDC 07 A6 15      call print
3652   1EDF 51 02 00      add sp, 2
3653   1EE2             ;; print(" YOU:\n"); 
3654   1EE2 26 62 2F      mov b, _s24 ; " YOU:\n"
3655   1EE5 FD AB         swp b
3656   1EE7 D8            push b
3657   1EE8 07 A6 15      call print
3658   1EEB 51 02 00      add sp, 2
3659   1EEE             ;; print(" EACH TURN YOU MAY MOVE OR SHOOT A CROOKED ARROW\n"); 
3660   1EEE 26 69 2F      mov b, _s25 ; " EACH TURN YOU MAY MOVE OR SHOOT A CROOKED ARROW\n"
3661   1EF1 FD AB         swp b
3662   1EF3 D8            push b
3663   1EF4 07 A6 15      call print
3664   1EF7 51 02 00      add sp, 2
3665   1EFA             ;; print(" MOVING:  YOU CAN MOVE ONE ROOM (THRU ONE TUNNEL)\n"); 
3666   1EFA 26 9B 2F      mov b, _s26 ; " MOVING:  YOU CAN MOVE ONE ROOM (THRU ONE TUNNEL)\n"
3667   1EFD FD AB         swp b
3668   1EFF D8            push b
3669   1F00 07 A6 15      call print
3670   1F03 51 02 00      add sp, 2
3671   1F06             ;; print(" ARROWS:  YOU HAVE 5 ARROWS.  YOU LOSE WHEN YOU RUN OUT\n"); 
3672   1F06 26 CE 2F      mov b, _s27 ; " ARROWS:  YOU HAVE 5 ARROWS.  YOU LOSE WHEN YOU RUN OUT\n"
3673   1F09 FD AB         swp b
3674   1F0B D8            push b
3675   1F0C 07 A6 15      call print
3676   1F0F 51 02 00      add sp, 2
3677   1F12             ;; print(" EACH ARROW CAN GO FROM 1 TO 5 ROOMS. YOU AIM BY TELLING\n"); 
3678   1F12 26 07 30      mov b, _s28 ; " EACH ARROW CAN GO FROM 1 TO 5 ROOMS. YOU AIM BY TELLING\n"
3679   1F15 FD AB         swp b
3680   1F17 D8            push b
3681   1F18 07 A6 15      call print
3682   1F1B 51 02 00      add sp, 2
3683   1F1E             ;; print("   THE COMPUTER THE ROOM#S YOU WANT THE ARROW TO GO TO.\n"); 
3684   1F1E 26 41 30      mov b, _s29 ; "   THE COMPUTER THE ROOM#S YOU WANT THE ARROW TO GO TO.\n"
3685   1F21 FD AB         swp b
3686   1F23 D8            push b
3687   1F24 07 A6 15      call print
3688   1F27 51 02 00      add sp, 2
3689   1F2A             ;; print("   IF THE ARROW CAN'T GO THAT WAY (IF NO TUNNEL) IT MOVES\n"); 
3690   1F2A 26 7A 30      mov b, _s30 ; "   IF THE ARROW CAN'T GO THAT WAY (IF NO TUNNEL) IT MOVES\n"
3691   1F2D FD AB         swp b
3692   1F2F D8            push b
3693   1F30 07 A6 15      call print
3694   1F33 51 02 00      add sp, 2
3695   1F36             ;; print("   AT RANDOM TO THE NEXT ROOM.\n"); 
3696   1F36 26 B4 30      mov b, _s31 ; "   AT RANDOM TO THE NEXT ROOM.\n"
3697   1F39 FD AB         swp b
3698   1F3B D8            push b
3699   1F3C 07 A6 15      call print
3700   1F3F 51 02 00      add sp, 2
3701   1F42             ;; print("     IF THE ARROW HITS THE WUMPUS, YOU WIN.\n"); 
3702   1F42 26 D4 30      mov b, _s32 ; "     IF THE ARROW HITS THE WUMPUS, YOU WIN.\n"
3703   1F45 FD AB         swp b
3704   1F47 D8            push b
3705   1F48 07 A6 15      call print
3706   1F4B 51 02 00      add sp, 2
3707   1F4E             ;; print("     IF THE ARROW HITS YOU, YOU LOSE.\n"); 
3708   1F4E 26 01 31      mov b, _s33 ; "     IF THE ARROW HITS YOU, YOU LOSE.\n"
3709   1F51 FD AB         swp b
3710   1F53 D8            push b
3711   1F54 07 A6 15      call print
3712   1F57 51 02 00      add sp, 2
3713   1F5A             ;; print(" WARNINGS:\n"); 
3714   1F5A 26 28 31      mov b, _s34 ; " WARNINGS:\n"
3715   1F5D FD AB         swp b
3716   1F5F D8            push b
3717   1F60 07 A6 15      call print
3718   1F63 51 02 00      add sp, 2
3719   1F66             ;; print(" WHEN YOU ARE ONE ROOM AWAY FROM A WUMPUS OR HAZARD,\n"); 
3720   1F66 26 34 31      mov b, _s35 ; " WHEN YOU ARE ONE ROOM AWAY FROM A WUMPUS OR HAZARD,\n"
3721   1F69 FD AB         swp b
3722   1F6B D8            push b
3723   1F6C 07 A6 15      call print
3724   1F6F 51 02 00      add sp, 2
3725   1F72             ;; print(" THE COMPUTER SAYS:\n"); 
3726   1F72 26 6A 31      mov b, _s36 ; " THE COMPUTER SAYS:\n"
3727   1F75 FD AB         swp b
3728   1F77 D8            push b
3729   1F78 07 A6 15      call print
3730   1F7B 51 02 00      add sp, 2
3731   1F7E             ;; print(" WUMPUS:  'I SMELL A WUMPUS'\n"); 
3732   1F7E 26 7F 31      mov b, _s37 ; " WUMPUS:  'I SMELL A WUMPUS'\n"
3733   1F81 FD AB         swp b
3734   1F83 D8            push b
3735   1F84 07 A6 15      call print
3736   1F87 51 02 00      add sp, 2
3737   1F8A             ;; print(" BAT   :  'BATS NEARBY'\n"); 
3738   1F8A 26 9D 31      mov b, _s38 ; " BAT   :  'BATS NEARBY'\n"
3739   1F8D FD AB         swp b
3740   1F8F D8            push b
3741   1F90 07 A6 15      call print
3742   1F93 51 02 00      add sp, 2
3743   1F96             ;; print(" PIT   :  'I FEEL A DRAFT'\n"); 
3744   1F96 26 B6 31      mov b, _s39 ; " PIT   :  'I FEEL A DRAFT'\n"
3745   1F99 FD AB         swp b
3746   1F9B D8            push b
3747   1F9C 07 A6 15      call print
3748   1F9F 51 02 00      add sp, 2
3749   1FA2             ;; print("\n"); 
3750   1FA2 26 EA 2C      mov b, _s9 ; "\n"
3751   1FA5 FD AB         swp b
3752   1FA7 D8            push b
3753   1FA8 07 A6 15      call print
3754   1FAB 51 02 00      add sp, 2
3755   1FAE F9            leave
3756   1FAF 09            ret
3757   1FB0             
3758   1FB0             show_room:
3759   1FB0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3760   1FB3             ;; int room, k; 
3761   1FB3 52 02 00      sub sp, 2 ; room
3762   1FB6 52 02 00      sub sp, 2 ; k
3763   1FB9             ;; print("\n"); 
3764   1FB9 26 EA 2C      mov b, _s9 ; "\n"
3765   1FBC FD AB         swp b
3766   1FBE D8            push b
3767   1FBF 07 A6 15      call print
3768   1FC2 51 02 00      add sp, 2
3769   1FC5             ;; for (k = 0; k < 3; k++) { 
3770   1FC5             _for48_init:
3771   1FC5 FA FD FF      lea d, [bp + -3] ; $k
3772   1FC8 DA            push d
3773   1FC9 26 00 00      mov b, $0
3774   1FCC E7            pop d
3775   1FCD FD 43         mov [d], b
3776   1FCF             _for48_cond:
3777   1FCF FA FD FF      lea d, [bp + -3] ; $k
3778   1FD2 2A            mov b, [d]
3779   1FD3             ; START RELATIONAL
3780   1FD3 D7            push a
3781   1FD4 11            mov a, b
3782   1FD5 26 03 00      mov b, $3
3783   1FD8 B0            cmp a, b
3784   1FD9 FD 73         slt ; < (signed)
3785   1FDB E4            pop a
3786   1FDC             ; END RELATIONAL
3787   1FDC C0 00 00      cmp b, 0
3788   1FDF C6 E4 20      je _for48_exit
3789   1FE2             _for48_block:
3790   1FE2             ;; room = cave[loc[ 	    0  ]][k]; 
3791   1FE2 FA FF FF      lea d, [bp + -1] ; $room
3792   1FE5 DA            push d
3793   1FE6 3B 57 2B      mov d, _cave_data ; $cave
3794   1FE9 D7            push a
3795   1FEA DA            push d
3796   1FEB 3B 49 2B      mov d, _loc_data ; $loc
3797   1FEE D7            push a
3798   1FEF DA            push d
3799   1FF0 26 00 00      mov b, $0
3800   1FF3 E7            pop d
3801   1FF4 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3802   1FF8 E4            pop a
3803   1FF9 2A            mov b, [d]
3804   1FFA E7            pop d
3805   1FFB FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
3806   1FFF DA            push d
3807   2000 FA FD FF      lea d, [bp + -3] ; $k
3808   2003 2A            mov b, [d]
3809   2004 E7            pop d
3810   2005 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3811   2009 E4            pop a
3812   200A 2A            mov b, [d]
3813   200B E7            pop d
3814   200C FD 43         mov [d], b
3815   200E             ;; if (room == loc[ 	1     ]) { 
3816   200E             _if49_cond:
3817   200E FA FF FF      lea d, [bp + -1] ; $room
3818   2011 2A            mov b, [d]
3819   2012             ; START RELATIONAL
3820   2012 D7            push a
3821   2013 11            mov a, b
3822   2014 3B 49 2B      mov d, _loc_data ; $loc
3823   2017 D7            push a
3824   2018 DA            push d
3825   2019 26 01 00      mov b, $1
3826   201C E7            pop d
3827   201D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3828   2021 E4            pop a
3829   2022 2A            mov b, [d]
3830   2023 B0            cmp a, b
3831   2024 FD 71         seq ; ==
3832   2026 E4            pop a
3833   2027             ; END RELATIONAL
3834   2027 C0 00 00      cmp b, 0
3835   202A C6 3C 20      je _if49_else
3836   202D             _if49_true:
3837   202D             ;; print("I SMELL A WUMPUS!\n"); 
3838   202D 26 D2 31      mov b, _s40 ; "I SMELL A WUMPUS!\n"
3839   2030 FD AB         swp b
3840   2032 D8            push b
3841   2033 07 A6 15      call print
3842   2036 51 02 00      add sp, 2
3843   2039 0A D4 20      jmp _if49_exit
3844   203C             _if49_else:
3845   203C             ;; if (room == loc[ 	2   ] || room == loc[ 	3   ]) { 
3846   203C             _if50_cond:
3847   203C FA FF FF      lea d, [bp + -1] ; $room
3848   203F 2A            mov b, [d]
3849   2040             ; START RELATIONAL
3850   2040 D7            push a
3851   2041 11            mov a, b
3852   2042 3B 49 2B      mov d, _loc_data ; $loc
3853   2045 D7            push a
3854   2046 DA            push d
3855   2047 26 02 00      mov b, $2
3856   204A E7            pop d
3857   204B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3858   204F E4            pop a
3859   2050 2A            mov b, [d]
3860   2051 B0            cmp a, b
3861   2052 FD 71         seq ; ==
3862   2054 E4            pop a
3863   2055             ; END RELATIONAL
3864   2055             ; START LOGICAL OR
3865   2055 D7            push a
3866   2056 11            mov a, b
3867   2057 FA FF FF      lea d, [bp + -1] ; $room
3868   205A 2A            mov b, [d]
3869   205B             ; START RELATIONAL
3870   205B D7            push a
3871   205C 11            mov a, b
3872   205D 3B 49 2B      mov d, _loc_data ; $loc
3873   2060 D7            push a
3874   2061 DA            push d
3875   2062 26 03 00      mov b, $3
3876   2065 E7            pop d
3877   2066 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3878   206A E4            pop a
3879   206B 2A            mov b, [d]
3880   206C B0            cmp a, b
3881   206D FD 71         seq ; ==
3882   206F E4            pop a
3883   2070             ; END RELATIONAL
3884   2070 FD A8         sor a, b ; ||
3885   2072 E4            pop a
3886   2073             ; END LOGICAL OR
3887   2073 C0 00 00      cmp b, 0
3888   2076 C6 88 20      je _if50_else
3889   2079             _if50_true:
3890   2079             ;; print("I FEEL A DRAFT\n"); 
3891   2079 26 E5 31      mov b, _s41 ; "I FEEL A DRAFT\n"
3892   207C FD AB         swp b
3893   207E D8            push b
3894   207F 07 A6 15      call print
3895   2082 51 02 00      add sp, 2
3896   2085 0A D4 20      jmp _if50_exit
3897   2088             _if50_else:
3898   2088             ;; if (room == loc[ 	4    ] || room == loc[ 	5    ]) { 
3899   2088             _if51_cond:
3900   2088 FA FF FF      lea d, [bp + -1] ; $room
3901   208B 2A            mov b, [d]
3902   208C             ; START RELATIONAL
3903   208C D7            push a
3904   208D 11            mov a, b
3905   208E 3B 49 2B      mov d, _loc_data ; $loc
3906   2091 D7            push a
3907   2092 DA            push d
3908   2093 26 04 00      mov b, $4
3909   2096 E7            pop d
3910   2097 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3911   209B E4            pop a
3912   209C 2A            mov b, [d]
3913   209D B0            cmp a, b
3914   209E FD 71         seq ; ==
3915   20A0 E4            pop a
3916   20A1             ; END RELATIONAL
3917   20A1             ; START LOGICAL OR
3918   20A1 D7            push a
3919   20A2 11            mov a, b
3920   20A3 FA FF FF      lea d, [bp + -1] ; $room
3921   20A6 2A            mov b, [d]
3922   20A7             ; START RELATIONAL
3923   20A7 D7            push a
3924   20A8 11            mov a, b
3925   20A9 3B 49 2B      mov d, _loc_data ; $loc
3926   20AC D7            push a
3927   20AD DA            push d
3928   20AE 26 05 00      mov b, $5
3929   20B1 E7            pop d
3930   20B2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3931   20B6 E4            pop a
3932   20B7 2A            mov b, [d]
3933   20B8 B0            cmp a, b
3934   20B9 FD 71         seq ; ==
3935   20BB E4            pop a
3936   20BC             ; END RELATIONAL
3937   20BC FD A8         sor a, b ; ||
3938   20BE E4            pop a
3939   20BF             ; END LOGICAL OR
3940   20BF C0 00 00      cmp b, 0
3941   20C2 C6 D4 20      je _if51_exit
3942   20C5             _if51_true:
3943   20C5             ;; print("BATS NEARBY!\n"); 
3944   20C5 26 F5 31      mov b, _s42 ; "BATS NEARBY!\n"
3945   20C8 FD AB         swp b
3946   20CA D8            push b
3947   20CB 07 A6 15      call print
3948   20CE 51 02 00      add sp, 2
3949   20D1 0A D4 20      jmp _if51_exit
3950   20D4             _if51_exit:
3951   20D4             _if50_exit:
3952   20D4             _if49_exit:
3953   20D4             _for48_update:
3954   20D4 FA FD FF      lea d, [bp + -3] ; $k
3955   20D7 2A            mov b, [d]
3956   20D8 FD 77         inc b
3957   20DA FA FD FF      lea d, [bp + -3] ; $k
3958   20DD FD 43         mov [d], b
3959   20DF FD 7D         dec b
3960   20E1 0A CF 1F      jmp _for48_cond
3961   20E4             _for48_exit:
3962   20E4             ;; print("YOU ARE IN ROOM "); print_unsigned(loc[ 	    0  ]+1); print("\n"); 
3963   20E4 26 03 32      mov b, _s43 ; "YOU ARE IN ROOM "
3964   20E7 FD AB         swp b
3965   20E9 D8            push b
3966   20EA 07 A6 15      call print
3967   20ED 51 02 00      add sp, 2
3968   20F0             ;; print_unsigned(loc[ 	    0  ]+1); print("\n"); 
3969   20F0 3B 49 2B      mov d, _loc_data ; $loc
3970   20F3 D7            push a
3971   20F4 DA            push d
3972   20F5 26 00 00      mov b, $0
3973   20F8 E7            pop d
3974   20F9 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3975   20FD E4            pop a
3976   20FE 2A            mov b, [d]
3977   20FF             ; START TERMS
3978   20FF D7            push a
3979   2100 11            mov a, b
3980   2101 26 01 00      mov b, $1
3981   2104 56            add b, a
3982   2105 E4            pop a
3983   2106             ; END TERMS
3984   2106 FD AB         swp b
3985   2108 D8            push b
3986   2109 07 8B 14      call print_unsigned
3987   210C 51 02 00      add sp, 2
3988   210F             ;; print("\n"); 
3989   210F 26 EA 2C      mov b, _s9 ; "\n"
3990   2112 FD AB         swp b
3991   2114 D8            push b
3992   2115 07 A6 15      call print
3993   2118 51 02 00      add sp, 2
3994   211B             ;; print("TUNNELS LEAD TO ");  
3995   211B 26 14 32      mov b, _s44 ; "TUNNELS LEAD TO "
3996   211E FD AB         swp b
3997   2120 D8            push b
3998   2121 07 A6 15      call print
3999   2124 51 02 00      add sp, 2
4000   2127             ;; print_unsigned(cave[loc[ 	    0  ]][0]+1); print(", "); 
4001   2127 3B 57 2B      mov d, _cave_data ; $cave
4002   212A D7            push a
4003   212B DA            push d
4004   212C 3B 49 2B      mov d, _loc_data ; $loc
4005   212F D7            push a
4006   2130 DA            push d
4007   2131 26 00 00      mov b, $0
4008   2134 E7            pop d
4009   2135 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4010   2139 E4            pop a
4011   213A 2A            mov b, [d]
4012   213B E7            pop d
4013   213C FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
4014   2140 DA            push d
4015   2141 26 00 00      mov b, $0
4016   2144 E7            pop d
4017   2145 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4018   2149 E4            pop a
4019   214A 2A            mov b, [d]
4020   214B             ; START TERMS
4021   214B D7            push a
4022   214C 11            mov a, b
4023   214D 26 01 00      mov b, $1
4024   2150 56            add b, a
4025   2151 E4            pop a
4026   2152             ; END TERMS
4027   2152 FD AB         swp b
4028   2154 D8            push b
4029   2155 07 8B 14      call print_unsigned
4030   2158 51 02 00      add sp, 2
4031   215B             ;; print(", "); 
4032   215B 26 25 32      mov b, _s45 ; ", "
4033   215E FD AB         swp b
4034   2160 D8            push b
4035   2161 07 A6 15      call print
4036   2164 51 02 00      add sp, 2
4037   2167             ;; print_unsigned(cave[loc[ 	    0  ]][1]+1); print(", "); 
4038   2167 3B 57 2B      mov d, _cave_data ; $cave
4039   216A D7            push a
4040   216B DA            push d
4041   216C 3B 49 2B      mov d, _loc_data ; $loc
4042   216F D7            push a
4043   2170 DA            push d
4044   2171 26 00 00      mov b, $0
4045   2174 E7            pop d
4046   2175 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4047   2179 E4            pop a
4048   217A 2A            mov b, [d]
4049   217B E7            pop d
4050   217C FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
4051   2180 DA            push d
4052   2181 26 01 00      mov b, $1
4053   2184 E7            pop d
4054   2185 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4055   2189 E4            pop a
4056   218A 2A            mov b, [d]
4057   218B             ; START TERMS
4058   218B D7            push a
4059   218C 11            mov a, b
4060   218D 26 01 00      mov b, $1
4061   2190 56            add b, a
4062   2191 E4            pop a
4063   2192             ; END TERMS
4064   2192 FD AB         swp b
4065   2194 D8            push b
4066   2195 07 8B 14      call print_unsigned
4067   2198 51 02 00      add sp, 2
4068   219B             ;; print(", "); 
4069   219B 26 25 32      mov b, _s45 ; ", "
4070   219E FD AB         swp b
4071   21A0 D8            push b
4072   21A1 07 A6 15      call print
4073   21A4 51 02 00      add sp, 2
4074   21A7             ;; print_unsigned(cave[loc[ 	    0  ]][2]+1); 
4075   21A7 3B 57 2B      mov d, _cave_data ; $cave
4076   21AA D7            push a
4077   21AB DA            push d
4078   21AC 3B 49 2B      mov d, _loc_data ; $loc
4079   21AF D7            push a
4080   21B0 DA            push d
4081   21B1 26 00 00      mov b, $0
4082   21B4 E7            pop d
4083   21B5 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4084   21B9 E4            pop a
4085   21BA 2A            mov b, [d]
4086   21BB E7            pop d
4087   21BC FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
4088   21C0 DA            push d
4089   21C1 26 02 00      mov b, $2
4090   21C4 E7            pop d
4091   21C5 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4092   21C9 E4            pop a
4093   21CA 2A            mov b, [d]
4094   21CB             ; START TERMS
4095   21CB D7            push a
4096   21CC 11            mov a, b
4097   21CD 26 01 00      mov b, $1
4098   21D0 56            add b, a
4099   21D1 E4            pop a
4100   21D2             ; END TERMS
4101   21D2 FD AB         swp b
4102   21D4 D8            push b
4103   21D5 07 8B 14      call print_unsigned
4104   21D8 51 02 00      add sp, 2
4105   21DB             ;; print("\n\n"); 
4106   21DB 26 28 32      mov b, _s46 ; "\n\n"
4107   21DE FD AB         swp b
4108   21E0 D8            push b
4109   21E1 07 A6 15      call print
4110   21E4 51 02 00      add sp, 2
4111   21E7 F9            leave
4112   21E8 09            ret
4113   21E9             
4114   21E9             move_or_shoot:
4115   21E9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4116   21EC             ;; int c = -1; 
4117   21EC 52 02 00      sub sp, 2 ; c
4118   21EF             ; --- START LOCAL VAR INITIALIZATION
4119   21EF FA FF FF      lea d, [bp + -1] ; $c
4120   21F2 DA            push d
4121   21F3 26 01 00      mov b, $1
4122   21F6 FD 97         neg b
4123   21F8 E7            pop d
4124   21F9 FD 43         mov [d], b
4125   21FB             ; --- END LOCAL VAR INITIALIZATION
4126   21FB             ;; while ((c != 'S') && (c != 'M')) { 
4127   21FB             _while52_cond:
4128   21FB FA FF FF      lea d, [bp + -1] ; $c
4129   21FE 2A            mov b, [d]
4130   21FF             ; START RELATIONAL
4131   21FF D7            push a
4132   2200 11            mov a, b
4133   2201 26 53 00      mov b, $53
4134   2204 B0            cmp a, b
4135   2205 FD 72         sneq ; !=
4136   2207 E4            pop a
4137   2208             ; END RELATIONAL
4138   2208             ; START LOGICAL AND
4139   2208 D7            push a
4140   2209 11            mov a, b
4141   220A FA FF FF      lea d, [bp + -1] ; $c
4142   220D 2A            mov b, [d]
4143   220E             ; START RELATIONAL
4144   220E D7            push a
4145   220F 11            mov a, b
4146   2210 26 4D 00      mov b, $4d
4147   2213 B0            cmp a, b
4148   2214 FD 72         sneq ; !=
4149   2216 E4            pop a
4150   2217             ; END RELATIONAL
4151   2217 FD A7         sand a, b
4152   2219 E4            pop a
4153   221A             ; END LOGICAL AND
4154   221A C0 00 00      cmp b, 0
4155   221D C6 36 22      je _while52_exit
4156   2220             _while52_block:
4157   2220             ;; c = getlet("SHOOT OR MOVE (S-M): "); 
4158   2220 FA FF FF      lea d, [bp + -1] ; $c
4159   2223 DA            push d
4160   2224 26 2B 32      mov b, _s47 ; "SHOOT OR MOVE (S-M): "
4161   2227 FD AB         swp b
4162   2229 D8            push b
4163   222A 07 A1 1D      call getlet
4164   222D 51 02 00      add sp, 2
4165   2230 E7            pop d
4166   2231 FD 43         mov [d], b
4167   2233 0A FB 21      jmp _while52_cond
4168   2236             _while52_exit:
4169   2236             ;; return (c == 'S') ? 1 : 0; 
4170   2236             _ternary53_cond:
4171   2236 FA FF FF      lea d, [bp + -1] ; $c
4172   2239 2A            mov b, [d]
4173   223A             ; START RELATIONAL
4174   223A D7            push a
4175   223B 11            mov a, b
4176   223C 26 53 00      mov b, $53
4177   223F B0            cmp a, b
4178   2240 FD 71         seq ; ==
4179   2242 E4            pop a
4180   2243             ; END RELATIONAL
4181   2243 C0 00 00      cmp b, 0
4182   2246 C6 4F 22      je _ternary53_false
4183   2249             _ternary53_true:
4184   2249 26 01 00      mov b, $1
4185   224C 0A 52 22      jmp _ternary53_exit
4186   224F             _ternary53_false:
4187   224F 26 00 00      mov b, $0
4188   2252             _ternary53_exit:
4189   2252 F9            leave
4190   2253 09            ret
4191   2254             
4192   2254             move_wumpus:
4193   2254 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4194   2257             ;; int k; 
4195   2257 52 02 00      sub sp, 2 ; k
4196   225A             ;; k = rand2() % 4; 
4197   225A FA FF FF      lea d, [bp + -1] ; $k
4198   225D DA            push d
4199   225E 07 55 28      call rand2
4200   2261             ; START FACTORS
4201   2261 D7            push a
4202   2262 11            mov a, b
4203   2263 26 04 00      mov b, $4
4204   2266 AE            div a, b ; 
4205   2267 11            mov a, b
4206   2268 27            mov b, a
4207   2269 E4            pop a
4208   226A             ; END FACTORS
4209   226A E7            pop d
4210   226B FD 43         mov [d], b
4211   226D             ;; if (k < 3) { 
4212   226D             _if54_cond:
4213   226D FA FF FF      lea d, [bp + -1] ; $k
4214   2270 2A            mov b, [d]
4215   2271             ; START RELATIONAL
4216   2271 D7            push a
4217   2272 11            mov a, b
4218   2273 26 03 00      mov b, $3
4219   2276 B0            cmp a, b
4220   2277 FD 73         slt ; < (signed)
4221   2279 E4            pop a
4222   227A             ; END RELATIONAL
4223   227A C0 00 00      cmp b, 0
4224   227D C6 BA 22      je _if54_exit
4225   2280             _if54_true:
4226   2280             ;; loc[ 	1     ] = cave[loc[ 	1     ]][k]; 
4227   2280 3B 49 2B      mov d, _loc_data ; $loc
4228   2283 D7            push a
4229   2284 DA            push d
4230   2285 26 01 00      mov b, $1
4231   2288 E7            pop d
4232   2289 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4233   228D E4            pop a
4234   228E DA            push d
4235   228F 3B 57 2B      mov d, _cave_data ; $cave
4236   2292 D7            push a
4237   2293 DA            push d
4238   2294 3B 49 2B      mov d, _loc_data ; $loc
4239   2297 D7            push a
4240   2298 DA            push d
4241   2299 26 01 00      mov b, $1
4242   229C E7            pop d
4243   229D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4244   22A1 E4            pop a
4245   22A2 2A            mov b, [d]
4246   22A3 E7            pop d
4247   22A4 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
4248   22A8 DA            push d
4249   22A9 FA FF FF      lea d, [bp + -1] ; $k
4250   22AC 2A            mov b, [d]
4251   22AD E7            pop d
4252   22AE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4253   22B2 E4            pop a
4254   22B3 2A            mov b, [d]
4255   22B4 E7            pop d
4256   22B5 FD 43         mov [d], b
4257   22B7 0A BA 22      jmp _if54_exit
4258   22BA             _if54_exit:
4259   22BA             ;; if (loc[ 	1     ] == loc[ 	    0  ]) { 
4260   22BA             _if55_cond:
4261   22BA 3B 49 2B      mov d, _loc_data ; $loc
4262   22BD D7            push a
4263   22BE DA            push d
4264   22BF 26 01 00      mov b, $1
4265   22C2 E7            pop d
4266   22C3 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4267   22C7 E4            pop a
4268   22C8 2A            mov b, [d]
4269   22C9             ; START RELATIONAL
4270   22C9 D7            push a
4271   22CA 11            mov a, b
4272   22CB 3B 49 2B      mov d, _loc_data ; $loc
4273   22CE D7            push a
4274   22CF DA            push d
4275   22D0 26 00 00      mov b, $0
4276   22D3 E7            pop d
4277   22D4 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4278   22D8 E4            pop a
4279   22D9 2A            mov b, [d]
4280   22DA B0            cmp a, b
4281   22DB FD 71         seq ; ==
4282   22DD E4            pop a
4283   22DE             ; END RELATIONAL
4284   22DE C0 00 00      cmp b, 0
4285   22E1 C6 FD 22      je _if55_exit
4286   22E4             _if55_true:
4287   22E4             ;; print("TSK TSK TSK - WUMPUS GOT YOU!\n"); 
4288   22E4 26 41 32      mov b, _s48 ; "TSK TSK TSK - WUMPUS GOT YOU!\n"
4289   22E7 FD AB         swp b
4290   22E9 D8            push b
4291   22EA 07 A6 15      call print
4292   22ED 51 02 00      add sp, 2
4293   22F0             ;; finished =  	2   ; 
4294   22F0 3B 55 2B      mov d, _finished ; $finished
4295   22F3 DA            push d
4296   22F4 26 02 00      mov b, $2
4297   22F7 E7            pop d
4298   22F8 FD 43         mov [d], b
4299   22FA 0A FD 22      jmp _if55_exit
4300   22FD             _if55_exit:
4301   22FD F9            leave
4302   22FE 09            ret
4303   22FF             
4304   22FF             shoot:
4305   22FF F8 00 00      enter 0 ; (push bp; mov bp, sp)
4306   2302             ;; int path[5]; 
4307   2302 52 0A 00      sub sp, 10 ; path
4308   2305             ;; int scratchloc = -1; 
4309   2305 52 02 00      sub sp, 2 ; scratchloc
4310   2308             ; --- START LOCAL VAR INITIALIZATION
4311   2308 FA F5 FF      lea d, [bp + -11] ; $scratchloc
4312   230B DA            push d
4313   230C 26 01 00      mov b, $1
4314   230F FD 97         neg b
4315   2311 E7            pop d
4316   2312 FD 43         mov [d], b
4317   2314             ; --- END LOCAL VAR INITIALIZATION
4318   2314             ;; int len, k; 
4319   2314 52 02 00      sub sp, 2 ; len
4320   2317 52 02 00      sub sp, 2 ; k
4321   231A             ;; finished =  	     0  ; 
4322   231A 3B 55 2B      mov d, _finished ; $finished
4323   231D DA            push d
4324   231E 26 00 00      mov b, $0
4325   2321 E7            pop d
4326   2322 FD 43         mov [d], b
4327   2324             ;; len = -1; 
4328   2324 FA F3 FF      lea d, [bp + -13] ; $len
4329   2327 DA            push d
4330   2328 26 01 00      mov b, $1
4331   232B FD 97         neg b
4332   232D E7            pop d
4333   232E FD 43         mov [d], b
4334   2330             ;; while (len < 1 || len > 5) { 
4335   2330             _while56_cond:
4336   2330 FA F3 FF      lea d, [bp + -13] ; $len
4337   2333 2A            mov b, [d]
4338   2334             ; START RELATIONAL
4339   2334 D7            push a
4340   2335 11            mov a, b
4341   2336 26 01 00      mov b, $1
4342   2339 B0            cmp a, b
4343   233A FD 73         slt ; < (signed)
4344   233C E4            pop a
4345   233D             ; END RELATIONAL
4346   233D             ; START LOGICAL OR
4347   233D D7            push a
4348   233E 11            mov a, b
4349   233F FA F3 FF      lea d, [bp + -13] ; $len
4350   2342 2A            mov b, [d]
4351   2343             ; START RELATIONAL
4352   2343 D7            push a
4353   2344 11            mov a, b
4354   2345 26 05 00      mov b, $5
4355   2348 B0            cmp a, b
4356   2349 FD 7F         sgt ; >
4357   234B E4            pop a
4358   234C             ; END RELATIONAL
4359   234C FD A8         sor a, b ; ||
4360   234E E4            pop a
4361   234F             ; END LOGICAL OR
4362   234F C0 00 00      cmp b, 0
4363   2352 C6 6B 23      je _while56_exit
4364   2355             _while56_block:
4365   2355             ;; len = getnum("\nNUMBER OF ROOMS (1-5): "); 
4366   2355 FA F3 FF      lea d, [bp + -13] ; $len
4367   2358 DA            push d
4368   2359 26 60 32      mov b, _s49 ; "\nNUMBER OF ROOMS (1-5): "
4369   235C FD AB         swp b
4370   235E D8            push b
4371   235F 07 7E 1D      call getnum
4372   2362 51 02 00      add sp, 2
4373   2365 E7            pop d
4374   2366 FD 43         mov [d], b
4375   2368 0A 30 23      jmp _while56_cond
4376   236B             _while56_exit:
4377   236B             ;; k = 0; 
4378   236B FA F1 FF      lea d, [bp + -15] ; $k
4379   236E DA            push d
4380   236F 26 00 00      mov b, $0
4381   2372 E7            pop d
4382   2373 FD 43         mov [d], b
4383   2375             ;; while (k < len) { 
4384   2375             _while57_cond:
4385   2375 FA F1 FF      lea d, [bp + -15] ; $k
4386   2378 2A            mov b, [d]
4387   2379             ; START RELATIONAL
4388   2379 D7            push a
4389   237A 11            mov a, b
4390   237B FA F3 FF      lea d, [bp + -13] ; $len
4391   237E 2A            mov b, [d]
4392   237F B0            cmp a, b
4393   2380 FD 73         slt ; < (signed)
4394   2382 E4            pop a
4395   2383             ; END RELATIONAL
4396   2383 C0 00 00      cmp b, 0
4397   2386 C6 18 24      je _while57_exit
4398   2389             _while57_block:
4399   2389             ;; path[k] = getnum("ROOM #") - 1; 
4400   2389 FA F7 FF      lea d, [bp + -9] ; $path
4401   238C D7            push a
4402   238D DA            push d
4403   238E FA F1 FF      lea d, [bp + -15] ; $k
4404   2391 2A            mov b, [d]
4405   2392 E7            pop d
4406   2393 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4407   2397 E4            pop a
4408   2398 DA            push d
4409   2399 26 79 32      mov b, _s50 ; "ROOM #"
4410   239C FD AB         swp b
4411   239E D8            push b
4412   239F 07 7E 1D      call getnum
4413   23A2 51 02 00      add sp, 2
4414   23A5             ; START TERMS
4415   23A5 D7            push a
4416   23A6 11            mov a, b
4417   23A7 26 01 00      mov b, $1
4418   23AA 60            sub a, b
4419   23AB 27            mov b, a
4420   23AC E4            pop a
4421   23AD             ; END TERMS
4422   23AD E7            pop d
4423   23AE FD 43         mov [d], b
4424   23B0             ;; if ((k>1) && (path[k] == path[k-2])) { 
4425   23B0             _if58_cond:
4426   23B0 FA F1 FF      lea d, [bp + -15] ; $k
4427   23B3 2A            mov b, [d]
4428   23B4             ; START RELATIONAL
4429   23B4 D7            push a
4430   23B5 11            mov a, b
4431   23B6 26 01 00      mov b, $1
4432   23B9 B0            cmp a, b
4433   23BA FD 7F         sgt ; >
4434   23BC E4            pop a
4435   23BD             ; END RELATIONAL
4436   23BD             ; START LOGICAL AND
4437   23BD D7            push a
4438   23BE 11            mov a, b
4439   23BF FA F7 FF      lea d, [bp + -9] ; $path
4440   23C2 D7            push a
4441   23C3 DA            push d
4442   23C4 FA F1 FF      lea d, [bp + -15] ; $k
4443   23C7 2A            mov b, [d]
4444   23C8 E7            pop d
4445   23C9 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4446   23CD E4            pop a
4447   23CE 2A            mov b, [d]
4448   23CF             ; START RELATIONAL
4449   23CF D7            push a
4450   23D0 11            mov a, b
4451   23D1 FA F7 FF      lea d, [bp + -9] ; $path
4452   23D4 D7            push a
4453   23D5 DA            push d
4454   23D6 FA F1 FF      lea d, [bp + -15] ; $k
4455   23D9 2A            mov b, [d]
4456   23DA             ; START TERMS
4457   23DA D7            push a
4458   23DB 11            mov a, b
4459   23DC 26 02 00      mov b, $2
4460   23DF 60            sub a, b
4461   23E0 27            mov b, a
4462   23E1 E4            pop a
4463   23E2             ; END TERMS
4464   23E2 E7            pop d
4465   23E3 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4466   23E7 E4            pop a
4467   23E8 2A            mov b, [d]
4468   23E9 B0            cmp a, b
4469   23EA FD 71         seq ; ==
4470   23EC E4            pop a
4471   23ED             ; END RELATIONAL
4472   23ED FD A7         sand a, b
4473   23EF E4            pop a
4474   23F0             ; END LOGICAL AND
4475   23F0 C0 00 00      cmp b, 0
4476   23F3 C6 08 24      je _if58_exit
4477   23F6             _if58_true:
4478   23F6             ;; print("ARROWS AREN'T THAT CROOKED - TRY ANOTHER ROOM\n"); 
4479   23F6 26 80 32      mov b, _s51 ; "ARROWS AREN'T THAT CROOKED - TRY ANOTHER ROOM\n"
4480   23F9 FD AB         swp b
4481   23FB D8            push b
4482   23FC 07 A6 15      call print
4483   23FF 51 02 00      add sp, 2
4484   2402             ;; continue;  
4485   2402 0A 75 23      jmp _while57_cond ; while continue
4486   2405 0A 08 24      jmp _if58_exit
4487   2408             _if58_exit:
4488   2408             ;; k++; 
4489   2408 FA F1 FF      lea d, [bp + -15] ; $k
4490   240B 2A            mov b, [d]
4491   240C FD 77         inc b
4492   240E FA F1 FF      lea d, [bp + -15] ; $k
4493   2411 FD 43         mov [d], b
4494   2413 FD 7D         dec b
4495   2415 0A 75 23      jmp _while57_cond
4496   2418             _while57_exit:
4497   2418             ;; scratchloc = loc[ 	    0  ]; 
4498   2418 FA F5 FF      lea d, [bp + -11] ; $scratchloc
4499   241B DA            push d
4500   241C 3B 49 2B      mov d, _loc_data ; $loc
4501   241F D7            push a
4502   2420 DA            push d
4503   2421 26 00 00      mov b, $0
4504   2424 E7            pop d
4505   2425 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4506   2429 E4            pop a
4507   242A 2A            mov b, [d]
4508   242B E7            pop d
4509   242C FD 43         mov [d], b
4510   242E             ;; for (k = 0; k < len; k++) { 
4511   242E             _for59_init:
4512   242E FA F1 FF      lea d, [bp + -15] ; $k
4513   2431 DA            push d
4514   2432 26 00 00      mov b, $0
4515   2435 E7            pop d
4516   2436 FD 43         mov [d], b
4517   2438             _for59_cond:
4518   2438 FA F1 FF      lea d, [bp + -15] ; $k
4519   243B 2A            mov b, [d]
4520   243C             ; START RELATIONAL
4521   243C D7            push a
4522   243D 11            mov a, b
4523   243E FA F3 FF      lea d, [bp + -13] ; $len
4524   2441 2A            mov b, [d]
4525   2442 B0            cmp a, b
4526   2443 FD 73         slt ; < (signed)
4527   2445 E4            pop a
4528   2446             ; END RELATIONAL
4529   2446 C0 00 00      cmp b, 0
4530   2449 C6 C2 25      je _for59_exit
4531   244C             _for59_block:
4532   244C             ;; if ((cave[scratchloc][0] == path[k]) || 
4533   244C             _if60_cond:
4534   244C 3B 57 2B      mov d, _cave_data ; $cave
4535   244F D7            push a
4536   2450 DA            push d
4537   2451 FA F5 FF      lea d, [bp + -11] ; $scratchloc
4538   2454 2A            mov b, [d]
4539   2455 E7            pop d
4540   2456 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
4541   245A DA            push d
4542   245B 26 00 00      mov b, $0
4543   245E E7            pop d
4544   245F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4545   2463 E4            pop a
4546   2464 2A            mov b, [d]
4547   2465             ; START RELATIONAL
4548   2465 D7            push a
4549   2466 11            mov a, b
4550   2467 FA F7 FF      lea d, [bp + -9] ; $path
4551   246A D7            push a
4552   246B DA            push d
4553   246C FA F1 FF      lea d, [bp + -15] ; $k
4554   246F 2A            mov b, [d]
4555   2470 E7            pop d
4556   2471 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4557   2475 E4            pop a
4558   2476 2A            mov b, [d]
4559   2477 B0            cmp a, b
4560   2478 FD 71         seq ; ==
4561   247A E4            pop a
4562   247B             ; END RELATIONAL
4563   247B             ; START LOGICAL OR
4564   247B D7            push a
4565   247C 11            mov a, b
4566   247D 3B 57 2B      mov d, _cave_data ; $cave
4567   2480 D7            push a
4568   2481 DA            push d
4569   2482 FA F5 FF      lea d, [bp + -11] ; $scratchloc
4570   2485 2A            mov b, [d]
4571   2486 E7            pop d
4572   2487 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
4573   248B DA            push d
4574   248C 26 01 00      mov b, $1
4575   248F E7            pop d
4576   2490 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4577   2494 E4            pop a
4578   2495 2A            mov b, [d]
4579   2496             ; START RELATIONAL
4580   2496 D7            push a
4581   2497 11            mov a, b
4582   2498 FA F7 FF      lea d, [bp + -9] ; $path
4583   249B D7            push a
4584   249C DA            push d
4585   249D FA F1 FF      lea d, [bp + -15] ; $k
4586   24A0 2A            mov b, [d]
4587   24A1 E7            pop d
4588   24A2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4589   24A6 E4            pop a
4590   24A7 2A            mov b, [d]
4591   24A8 B0            cmp a, b
4592   24A9 FD 71         seq ; ==
4593   24AB E4            pop a
4594   24AC             ; END RELATIONAL
4595   24AC FD A8         sor a, b ; ||
4596   24AE 11            mov a, b
4597   24AF 3B 57 2B      mov d, _cave_data ; $cave
4598   24B2 D7            push a
4599   24B3 DA            push d
4600   24B4 FA F5 FF      lea d, [bp + -11] ; $scratchloc
4601   24B7 2A            mov b, [d]
4602   24B8 E7            pop d
4603   24B9 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
4604   24BD DA            push d
4605   24BE 26 02 00      mov b, $2
4606   24C1 E7            pop d
4607   24C2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4608   24C6 E4            pop a
4609   24C7 2A            mov b, [d]
4610   24C8             ; START RELATIONAL
4611   24C8 D7            push a
4612   24C9 11            mov a, b
4613   24CA FA F7 FF      lea d, [bp + -9] ; $path
4614   24CD D7            push a
4615   24CE DA            push d
4616   24CF FA F1 FF      lea d, [bp + -15] ; $k
4617   24D2 2A            mov b, [d]
4618   24D3 E7            pop d
4619   24D4 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4620   24D8 E4            pop a
4621   24D9 2A            mov b, [d]
4622   24DA B0            cmp a, b
4623   24DB FD 71         seq ; ==
4624   24DD E4            pop a
4625   24DE             ; END RELATIONAL
4626   24DE FD A8         sor a, b ; ||
4627   24E0 E4            pop a
4628   24E1             ; END LOGICAL OR
4629   24E1 C0 00 00      cmp b, 0
4630   24E4 C6 01 25      je _if60_else
4631   24E7             _if60_true:
4632   24E7             ;; scratchloc = path[k]; 
4633   24E7 FA F5 FF      lea d, [bp + -11] ; $scratchloc
4634   24EA DA            push d
4635   24EB FA F7 FF      lea d, [bp + -9] ; $path
4636   24EE D7            push a
4637   24EF DA            push d
4638   24F0 FA F1 FF      lea d, [bp + -15] ; $k
4639   24F3 2A            mov b, [d]
4640   24F4 E7            pop d
4641   24F5 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4642   24F9 E4            pop a
4643   24FA 2A            mov b, [d]
4644   24FB E7            pop d
4645   24FC FD 43         mov [d], b
4646   24FE 0A 2A 25      jmp _if60_exit
4647   2501             _if60_else:
4648   2501             ;; scratchloc = cave[scratchloc][rand2()%3]; 
4649   2501 FA F5 FF      lea d, [bp + -11] ; $scratchloc
4650   2504 DA            push d
4651   2505 3B 57 2B      mov d, _cave_data ; $cave
4652   2508 D7            push a
4653   2509 DA            push d
4654   250A FA F5 FF      lea d, [bp + -11] ; $scratchloc
4655   250D 2A            mov b, [d]
4656   250E E7            pop d
4657   250F FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
4658   2513 DA            push d
4659   2514 07 55 28      call rand2
4660   2517             ; START FACTORS
4661   2517 D7            push a
4662   2518 11            mov a, b
4663   2519 26 03 00      mov b, $3
4664   251C AE            div a, b ; 
4665   251D 11            mov a, b
4666   251E 27            mov b, a
4667   251F E4            pop a
4668   2520             ; END FACTORS
4669   2520 E7            pop d
4670   2521 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4671   2525 E4            pop a
4672   2526 2A            mov b, [d]
4673   2527 E7            pop d
4674   2528 FD 43         mov [d], b
4675   252A             _if60_exit:
4676   252A             ;; if (scratchloc == loc[ 	1     ]) { 
4677   252A             _if61_cond:
4678   252A FA F5 FF      lea d, [bp + -11] ; $scratchloc
4679   252D 2A            mov b, [d]
4680   252E             ; START RELATIONAL
4681   252E D7            push a
4682   252F 11            mov a, b
4683   2530 3B 49 2B      mov d, _loc_data ; $loc
4684   2533 D7            push a
4685   2534 DA            push d
4686   2535 26 01 00      mov b, $1
4687   2538 E7            pop d
4688   2539 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4689   253D E4            pop a
4690   253E 2A            mov b, [d]
4691   253F B0            cmp a, b
4692   2540 FD 71         seq ; ==
4693   2542 E4            pop a
4694   2543             ; END RELATIONAL
4695   2543 C0 00 00      cmp b, 0
4696   2546 C6 62 25      je _if61_else
4697   2549             _if61_true:
4698   2549             ;; print("AHA! YOU GOT THE WUMPUS!\n"); 
4699   2549 26 AE 32      mov b, _s52 ; "AHA! YOU GOT THE WUMPUS!\n"
4700   254C FD AB         swp b
4701   254E D8            push b
4702   254F 07 A6 15      call print
4703   2552 51 02 00      add sp, 2
4704   2555             ;; finished =  	     1  ; 
4705   2555 3B 55 2B      mov d, _finished ; $finished
4706   2558 DA            push d
4707   2559 26 01 00      mov b, $1
4708   255C E7            pop d
4709   255D FD 43         mov [d], b
4710   255F 0A 9A 25      jmp _if61_exit
4711   2562             _if61_else:
4712   2562             ;; if (scratchloc == loc[ 	    0  ]) { 
4713   2562             _if62_cond:
4714   2562 FA F5 FF      lea d, [bp + -11] ; $scratchloc
4715   2565 2A            mov b, [d]
4716   2566             ; START RELATIONAL
4717   2566 D7            push a
4718   2567 11            mov a, b
4719   2568 3B 49 2B      mov d, _loc_data ; $loc
4720   256B D7            push a
4721   256C DA            push d
4722   256D 26 00 00      mov b, $0
4723   2570 E7            pop d
4724   2571 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4725   2575 E4            pop a
4726   2576 2A            mov b, [d]
4727   2577 B0            cmp a, b
4728   2578 FD 71         seq ; ==
4729   257A E4            pop a
4730   257B             ; END RELATIONAL
4731   257B C0 00 00      cmp b, 0
4732   257E C6 9A 25      je _if62_exit
4733   2581             _if62_true:
4734   2581             ;; print("OUCH! ARROW GOT YOU!\n"); 
4735   2581 26 C8 32      mov b, _s53 ; "OUCH! ARROW GOT YOU!\n"
4736   2584 FD AB         swp b
4737   2586 D8            push b
4738   2587 07 A6 15      call print
4739   258A 51 02 00      add sp, 2
4740   258D             ;; finished =  	2   ; 
4741   258D 3B 55 2B      mov d, _finished ; $finished
4742   2590 DA            push d
4743   2591 26 02 00      mov b, $2
4744   2594 E7            pop d
4745   2595 FD 43         mov [d], b
4746   2597 0A 9A 25      jmp _if62_exit
4747   259A             _if62_exit:
4748   259A             _if61_exit:
4749   259A             ;; if (finished !=  	     0  ) { 
4750   259A             _if63_cond:
4751   259A 3B 55 2B      mov d, _finished ; $finished
4752   259D 2A            mov b, [d]
4753   259E             ; START RELATIONAL
4754   259E D7            push a
4755   259F 11            mov a, b
4756   25A0 26 00 00      mov b, $0
4757   25A3 B0            cmp a, b
4758   25A4 FD 72         sneq ; !=
4759   25A6 E4            pop a
4760   25A7             ; END RELATIONAL
4761   25A7 C0 00 00      cmp b, 0
4762   25AA C6 B2 25      je _if63_exit
4763   25AD             _if63_true:
4764   25AD             ;; return; 
4765   25AD F9            leave
4766   25AE 09            ret
4767   25AF 0A B2 25      jmp _if63_exit
4768   25B2             _if63_exit:
4769   25B2             _for59_update:
4770   25B2 FA F1 FF      lea d, [bp + -15] ; $k
4771   25B5 2A            mov b, [d]
4772   25B6 FD 77         inc b
4773   25B8 FA F1 FF      lea d, [bp + -15] ; $k
4774   25BB FD 43         mov [d], b
4775   25BD FD 7D         dec b
4776   25BF 0A 38 24      jmp _for59_cond
4777   25C2             _for59_exit:
4778   25C2             ;; print("MISSED\n"); 
4779   25C2 26 DE 32      mov b, _s54 ; "MISSED\n"
4780   25C5 FD AB         swp b
4781   25C7 D8            push b
4782   25C8 07 A6 15      call print
4783   25CB 51 02 00      add sp, 2
4784   25CE             ;; move_wumpus(); 
4785   25CE 07 54 22      call move_wumpus
4786   25D1             ;; if (--arrows <= 0) { 
4787   25D1             _if64_cond:
4788   25D1 3B 41 2B      mov d, _arrows ; $arrows
4789   25D4 2A            mov b, [d]
4790   25D5 FD 7D         dec b
4791   25D7 FD 43         mov [d], b
4792   25D9             ; START RELATIONAL
4793   25D9 D7            push a
4794   25DA 11            mov a, b
4795   25DB 26 00 00      mov b, $0
4796   25DE B0            cmp a, b
4797   25DF FD 74         sle ; <= (signed)
4798   25E1 E4            pop a
4799   25E2             ; END RELATIONAL
4800   25E2 C0 00 00      cmp b, 0
4801   25E5 C6 F5 25      je _if64_exit
4802   25E8             _if64_true:
4803   25E8             ;; finished =  	2   ; 
4804   25E8 3B 55 2B      mov d, _finished ; $finished
4805   25EB DA            push d
4806   25EC 26 02 00      mov b, $2
4807   25EF E7            pop d
4808   25F0 FD 43         mov [d], b
4809   25F2 0A F5 25      jmp _if64_exit
4810   25F5             _if64_exit:
4811   25F5 F9            leave
4812   25F6 09            ret
4813   25F7             
4814   25F7             move:
4815   25F7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4816   25FA             ;; int scratchloc; 
4817   25FA 52 02 00      sub sp, 2 ; scratchloc
4818   25FD             ;; scratchloc = -1; 
4819   25FD FA FF FF      lea d, [bp + -1] ; $scratchloc
4820   2600 DA            push d
4821   2601 26 01 00      mov b, $1
4822   2604 FD 97         neg b
4823   2606 E7            pop d
4824   2607 FD 43         mov [d], b
4825   2609             ;; while (scratchloc == -1) { 
4826   2609             _while65_cond:
4827   2609 FA FF FF      lea d, [bp + -1] ; $scratchloc
4828   260C 2A            mov b, [d]
4829   260D             ; START RELATIONAL
4830   260D D7            push a
4831   260E 11            mov a, b
4832   260F 26 01 00      mov b, $1
4833   2612 FD 97         neg b
4834   2614 B0            cmp a, b
4835   2615 FD 71         seq ; ==
4836   2617 E4            pop a
4837   2618             ; END RELATIONAL
4838   2618 C0 00 00      cmp b, 0
4839   261B C6 45 27      je _while65_exit
4840   261E             _while65_block:
4841   261E             ;; scratchloc = getnum("\nWHERE TO: ")-1; 
4842   261E FA FF FF      lea d, [bp + -1] ; $scratchloc
4843   2621 DA            push d
4844   2622 26 E6 32      mov b, _s55 ; "\nWHERE TO: "
4845   2625 FD AB         swp b
4846   2627 D8            push b
4847   2628 07 7E 1D      call getnum
4848   262B 51 02 00      add sp, 2
4849   262E             ; START TERMS
4850   262E D7            push a
4851   262F 11            mov a, b
4852   2630 26 01 00      mov b, $1
4853   2633 60            sub a, b
4854   2634 27            mov b, a
4855   2635 E4            pop a
4856   2636             ; END TERMS
4857   2636 E7            pop d
4858   2637 FD 43         mov [d], b
4859   2639             ;; if (scratchloc < 0 || scratchloc > 19) { 
4860   2639             _if66_cond:
4861   2639 FA FF FF      lea d, [bp + -1] ; $scratchloc
4862   263C 2A            mov b, [d]
4863   263D             ; START RELATIONAL
4864   263D D7            push a
4865   263E 11            mov a, b
4866   263F 26 00 00      mov b, $0
4867   2642 B0            cmp a, b
4868   2643 FD 73         slt ; < (signed)
4869   2645 E4            pop a
4870   2646             ; END RELATIONAL
4871   2646             ; START LOGICAL OR
4872   2646 D7            push a
4873   2647 11            mov a, b
4874   2648 FA FF FF      lea d, [bp + -1] ; $scratchloc
4875   264B 2A            mov b, [d]
4876   264C             ; START RELATIONAL
4877   264C D7            push a
4878   264D 11            mov a, b
4879   264E 26 13 00      mov b, $13
4880   2651 B0            cmp a, b
4881   2652 FD 7F         sgt ; >
4882   2654 E4            pop a
4883   2655             ; END RELATIONAL
4884   2655 FD A8         sor a, b ; ||
4885   2657 E4            pop a
4886   2658             ; END LOGICAL OR
4887   2658 C0 00 00      cmp b, 0
4888   265B C6 70 26      je _if66_exit
4889   265E             _if66_true:
4890   265E             ;; scratchloc = -1; 
4891   265E FA FF FF      lea d, [bp + -1] ; $scratchloc
4892   2661 DA            push d
4893   2662 26 01 00      mov b, $1
4894   2665 FD 97         neg b
4895   2667 E7            pop d
4896   2668 FD 43         mov [d], b
4897   266A             ;; continue; 
4898   266A 0A 09 26      jmp _while65_cond ; while continue
4899   266D 0A 70 26      jmp _if66_exit
4900   2670             _if66_exit:
4901   2670             ;; if ((cave[loc[ 	    0  ]][0] != scratchloc) & 
4902   2670             _if67_cond:
4903   2670 3B 57 2B      mov d, _cave_data ; $cave
4904   2673 D7            push a
4905   2674 DA            push d
4906   2675 3B 49 2B      mov d, _loc_data ; $loc
4907   2678 D7            push a
4908   2679 DA            push d
4909   267A 26 00 00      mov b, $0
4910   267D E7            pop d
4911   267E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4912   2682 E4            pop a
4913   2683 2A            mov b, [d]
4914   2684 E7            pop d
4915   2685 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
4916   2689 DA            push d
4917   268A 26 00 00      mov b, $0
4918   268D E7            pop d
4919   268E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4920   2692 E4            pop a
4921   2693 2A            mov b, [d]
4922   2694             ; START RELATIONAL
4923   2694 D7            push a
4924   2695 11            mov a, b
4925   2696 FA FF FF      lea d, [bp + -1] ; $scratchloc
4926   2699 2A            mov b, [d]
4927   269A B0            cmp a, b
4928   269B FD 72         sneq ; !=
4929   269D E4            pop a
4930   269E             ; END RELATIONAL
4931   269E D7            push a
4932   269F 11            mov a, b
4933   26A0 3B 57 2B      mov d, _cave_data ; $cave
4934   26A3 D7            push a
4935   26A4 DA            push d
4936   26A5 3B 49 2B      mov d, _loc_data ; $loc
4937   26A8 D7            push a
4938   26A9 DA            push d
4939   26AA 26 00 00      mov b, $0
4940   26AD E7            pop d
4941   26AE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4942   26B2 E4            pop a
4943   26B3 2A            mov b, [d]
4944   26B4 E7            pop d
4945   26B5 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
4946   26B9 DA            push d
4947   26BA 26 01 00      mov b, $1
4948   26BD E7            pop d
4949   26BE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4950   26C2 E4            pop a
4951   26C3 2A            mov b, [d]
4952   26C4             ; START RELATIONAL
4953   26C4 D7            push a
4954   26C5 11            mov a, b
4955   26C6 FA FF FF      lea d, [bp + -1] ; $scratchloc
4956   26C9 2A            mov b, [d]
4957   26CA B0            cmp a, b
4958   26CB FD 72         sneq ; !=
4959   26CD E4            pop a
4960   26CE             ; END RELATIONAL
4961   26CE FD 92         and b, a ; &
4962   26D0 11            mov a, b
4963   26D1 3B 57 2B      mov d, _cave_data ; $cave
4964   26D4 D7            push a
4965   26D5 DA            push d
4966   26D6 3B 49 2B      mov d, _loc_data ; $loc
4967   26D9 D7            push a
4968   26DA DA            push d
4969   26DB 26 00 00      mov b, $0
4970   26DE E7            pop d
4971   26DF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4972   26E3 E4            pop a
4973   26E4 2A            mov b, [d]
4974   26E5 E7            pop d
4975   26E6 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
4976   26EA DA            push d
4977   26EB 26 02 00      mov b, $2
4978   26EE E7            pop d
4979   26EF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4980   26F3 E4            pop a
4981   26F4 2A            mov b, [d]
4982   26F5             ; START RELATIONAL
4983   26F5 D7            push a
4984   26F6 11            mov a, b
4985   26F7 FA FF FF      lea d, [bp + -1] ; $scratchloc
4986   26FA 2A            mov b, [d]
4987   26FB B0            cmp a, b
4988   26FC FD 72         sneq ; !=
4989   26FE E4            pop a
4990   26FF             ; END RELATIONAL
4991   26FF FD 92         and b, a ; &
4992   2701 11            mov a, b
4993   2702 3B 49 2B      mov d, _loc_data ; $loc
4994   2705 D7            push a
4995   2706 DA            push d
4996   2707 26 00 00      mov b, $0
4997   270A E7            pop d
4998   270B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4999   270F E4            pop a
5000   2710 2A            mov b, [d]
5001   2711             ; START RELATIONAL
5002   2711 D7            push a
5003   2712 11            mov a, b
5004   2713 FA FF FF      lea d, [bp + -1] ; $scratchloc
5005   2716 2A            mov b, [d]
5006   2717 B0            cmp a, b
5007   2718 FD 72         sneq ; !=
5008   271A E4            pop a
5009   271B             ; END RELATIONAL
5010   271B FD 92         and b, a ; &
5011   271D E4            pop a
5012   271E C0 00 00      cmp b, 0
5013   2721 C6 42 27      je _if67_exit
5014   2724             _if67_true:
5015   2724             ;; print("NOT POSSIBLE\n"); 
5016   2724 26 F2 32      mov b, _s56 ; "NOT POSSIBLE\n"
5017   2727 FD AB         swp b
5018   2729 D8            push b
5019   272A 07 A6 15      call print
5020   272D 51 02 00      add sp, 2
5021   2730             ;; scratchloc = -1; 
5022   2730 FA FF FF      lea d, [bp + -1] ; $scratchloc
5023   2733 DA            push d
5024   2734 26 01 00      mov b, $1
5025   2737 FD 97         neg b
5026   2739 E7            pop d
5027   273A FD 43         mov [d], b
5028   273C             ;; continue; 
5029   273C 0A 09 26      jmp _while65_cond ; while continue
5030   273F 0A 42 27      jmp _if67_exit
5031   2742             _if67_exit:
5032   2742 0A 09 26      jmp _while65_cond
5033   2745             _while65_exit:
5034   2745             ;; loc[ 	    0  ] = scratchloc; 
5035   2745 3B 49 2B      mov d, _loc_data ; $loc
5036   2748 D7            push a
5037   2749 DA            push d
5038   274A 26 00 00      mov b, $0
5039   274D E7            pop d
5040   274E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5041   2752 E4            pop a
5042   2753 DA            push d
5043   2754 FA FF FF      lea d, [bp + -1] ; $scratchloc
5044   2757 2A            mov b, [d]
5045   2758 E7            pop d
5046   2759 FD 43         mov [d], b
5047   275B             ;; while ((scratchloc == loc[ 	4    ]) || (scratchloc == loc[ 	5    ])) { 
5048   275B             _while68_cond:
5049   275B FA FF FF      lea d, [bp + -1] ; $scratchloc
5050   275E 2A            mov b, [d]
5051   275F             ; START RELATIONAL
5052   275F D7            push a
5053   2760 11            mov a, b
5054   2761 3B 49 2B      mov d, _loc_data ; $loc
5055   2764 D7            push a
5056   2765 DA            push d
5057   2766 26 04 00      mov b, $4
5058   2769 E7            pop d
5059   276A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5060   276E E4            pop a
5061   276F 2A            mov b, [d]
5062   2770 B0            cmp a, b
5063   2771 FD 71         seq ; ==
5064   2773 E4            pop a
5065   2774             ; END RELATIONAL
5066   2774             ; START LOGICAL OR
5067   2774 D7            push a
5068   2775 11            mov a, b
5069   2776 FA FF FF      lea d, [bp + -1] ; $scratchloc
5070   2779 2A            mov b, [d]
5071   277A             ; START RELATIONAL
5072   277A D7            push a
5073   277B 11            mov a, b
5074   277C 3B 49 2B      mov d, _loc_data ; $loc
5075   277F D7            push a
5076   2780 DA            push d
5077   2781 26 05 00      mov b, $5
5078   2784 E7            pop d
5079   2785 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5080   2789 E4            pop a
5081   278A 2A            mov b, [d]
5082   278B B0            cmp a, b
5083   278C FD 71         seq ; ==
5084   278E E4            pop a
5085   278F             ; END RELATIONAL
5086   278F FD A8         sor a, b ; ||
5087   2791 E4            pop a
5088   2792             ; END LOGICAL OR
5089   2792 C0 00 00      cmp b, 0
5090   2795 C6 CC 27      je _while68_exit
5091   2798             _while68_block:
5092   2798             ;; print("ZAP--SUPER BAT SNATCH! ELSEWHEREVILLE FOR YOU!\n"); 
5093   2798 26 00 33      mov b, _s57 ; "ZAP--SUPER BAT SNATCH! ELSEWHEREVILLE FOR YOU!\n"
5094   279B FD AB         swp b
5095   279D D8            push b
5096   279E 07 A6 15      call print
5097   27A1 51 02 00      add sp, 2
5098   27A4             ;; scratchloc = loc[ 	    0  ] = rand2()%20; 
5099   27A4 FA FF FF      lea d, [bp + -1] ; $scratchloc
5100   27A7 DA            push d
5101   27A8 3B 49 2B      mov d, _loc_data ; $loc
5102   27AB D7            push a
5103   27AC DA            push d
5104   27AD 26 00 00      mov b, $0
5105   27B0 E7            pop d
5106   27B1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5107   27B5 E4            pop a
5108   27B6 DA            push d
5109   27B7 07 55 28      call rand2
5110   27BA             ; START FACTORS
5111   27BA D7            push a
5112   27BB 11            mov a, b
5113   27BC 26 14 00      mov b, $14
5114   27BF AE            div a, b ; 
5115   27C0 11            mov a, b
5116   27C1 27            mov b, a
5117   27C2 E4            pop a
5118   27C3             ; END FACTORS
5119   27C3 E7            pop d
5120   27C4 FD 43         mov [d], b
5121   27C6 E7            pop d
5122   27C7 FD 43         mov [d], b
5123   27C9 0A 5B 27      jmp _while68_cond
5124   27CC             _while68_exit:
5125   27CC             ;; if (scratchloc == loc[ 	1     ]) { 
5126   27CC             _if69_cond:
5127   27CC FA FF FF      lea d, [bp + -1] ; $scratchloc
5128   27CF 2A            mov b, [d]
5129   27D0             ; START RELATIONAL
5130   27D0 D7            push a
5131   27D1 11            mov a, b
5132   27D2 3B 49 2B      mov d, _loc_data ; $loc
5133   27D5 D7            push a
5134   27D6 DA            push d
5135   27D7 26 01 00      mov b, $1
5136   27DA E7            pop d
5137   27DB FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5138   27DF E4            pop a
5139   27E0 2A            mov b, [d]
5140   27E1 B0            cmp a, b
5141   27E2 FD 71         seq ; ==
5142   27E4 E4            pop a
5143   27E5             ; END RELATIONAL
5144   27E5 C0 00 00      cmp b, 0
5145   27E8 C6 FD 27      je _if69_exit
5146   27EB             _if69_true:
5147   27EB             ;; print("... OOPS! BUMPED A WUMPUS!\n"); 
5148   27EB 26 30 33      mov b, _s58 ; "... OOPS! BUMPED A WUMPUS!\n"
5149   27EE FD AB         swp b
5150   27F0 D8            push b
5151   27F1 07 A6 15      call print
5152   27F4 51 02 00      add sp, 2
5153   27F7             ;; move_wumpus(); 
5154   27F7 07 54 22      call move_wumpus
5155   27FA 0A FD 27      jmp _if69_exit
5156   27FD             _if69_exit:
5157   27FD             ;; if (scratchloc == loc[ 	2   ] || scratchloc == loc[ 	3   ]) { 
5158   27FD             _if70_cond:
5159   27FD FA FF FF      lea d, [bp + -1] ; $scratchloc
5160   2800 2A            mov b, [d]
5161   2801             ; START RELATIONAL
5162   2801 D7            push a
5163   2802 11            mov a, b
5164   2803 3B 49 2B      mov d, _loc_data ; $loc
5165   2806 D7            push a
5166   2807 DA            push d
5167   2808 26 02 00      mov b, $2
5168   280B E7            pop d
5169   280C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5170   2810 E4            pop a
5171   2811 2A            mov b, [d]
5172   2812 B0            cmp a, b
5173   2813 FD 71         seq ; ==
5174   2815 E4            pop a
5175   2816             ; END RELATIONAL
5176   2816             ; START LOGICAL OR
5177   2816 D7            push a
5178   2817 11            mov a, b
5179   2818 FA FF FF      lea d, [bp + -1] ; $scratchloc
5180   281B 2A            mov b, [d]
5181   281C             ; START RELATIONAL
5182   281C D7            push a
5183   281D 11            mov a, b
5184   281E 3B 49 2B      mov d, _loc_data ; $loc
5185   2821 D7            push a
5186   2822 DA            push d
5187   2823 26 03 00      mov b, $3
5188   2826 E7            pop d
5189   2827 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5190   282B E4            pop a
5191   282C 2A            mov b, [d]
5192   282D B0            cmp a, b
5193   282E FD 71         seq ; ==
5194   2830 E4            pop a
5195   2831             ; END RELATIONAL
5196   2831 FD A8         sor a, b ; ||
5197   2833 E4            pop a
5198   2834             ; END LOGICAL OR
5199   2834 C0 00 00      cmp b, 0
5200   2837 C6 53 28      je _if70_exit
5201   283A             _if70_true:
5202   283A             ;; print("YYYYIIIIEEEE . . . FELL IN PIT\n"); 
5203   283A 26 4C 33      mov b, _s59 ; "YYYYIIIIEEEE . . . FELL IN PIT\n"
5204   283D FD AB         swp b
5205   283F D8            push b
5206   2840 07 A6 15      call print
5207   2843 51 02 00      add sp, 2
5208   2846             ;; finished =  	2   ; 
5209   2846 3B 55 2B      mov d, _finished ; $finished
5210   2849 DA            push d
5211   284A 26 02 00      mov b, $2
5212   284D E7            pop d
5213   284E FD 43         mov [d], b
5214   2850 0A 53 28      jmp _if70_exit
5215   2853             _if70_exit:
5216   2853 F9            leave
5217   2854 09            ret
5218   2855             
5219   2855             rand2:
5220   2855 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5221   2858             ;; rand_val=rand_val+rand_inc; 
5222   2858 3B 45 2B      mov d, _rand_val ; $rand_val
5223   285B DA            push d
5224   285C 3B 45 2B      mov d, _rand_val ; $rand_val
5225   285F 2A            mov b, [d]
5226   2860             ; START TERMS
5227   2860 D7            push a
5228   2861 11            mov a, b
5229   2862 3B 47 2B      mov d, _rand_inc ; $rand_inc
5230   2865 2A            mov b, [d]
5231   2866 56            add b, a
5232   2867 E4            pop a
5233   2868             ; END TERMS
5234   2868 E7            pop d
5235   2869 FD 43         mov [d], b
5236   286B             ;; rand_inc++; 
5237   286B 3B 47 2B      mov d, _rand_inc ; $rand_inc
5238   286E 2A            mov b, [d]
5239   286F FD 77         inc b
5240   2871 3B 47 2B      mov d, _rand_inc ; $rand_inc
5241   2874 FD 43         mov [d], b
5242   2876 FD 7D         dec b
5243   2878             ;; return rand_val; 
5244   2878 3B 45 2B      mov d, _rand_val ; $rand_val
5245   287B 2A            mov b, [d]
5246   287C F9            leave
5247   287D 09            ret
5248   287E             
5249   287E             game_setup:
5250   287E F8 00 00      enter 0 ; (push bp; mov bp, sp)
5251   2881             ;; int j, k; 
5252   2881 52 02 00      sub sp, 2 ; j
5253   2884 52 02 00      sub sp, 2 ; k
5254   2887             ;; int v; 
5255   2887 52 02 00      sub sp, 2 ; v
5256   288A             ;; for (j = 0; j <  	6   ; j++) { 
5257   288A             _for71_init:
5258   288A FA FF FF      lea d, [bp + -1] ; $j
5259   288D DA            push d
5260   288E 26 00 00      mov b, $0
5261   2891 E7            pop d
5262   2892 FD 43         mov [d], b
5263   2894             _for71_cond:
5264   2894 FA FF FF      lea d, [bp + -1] ; $j
5265   2897 2A            mov b, [d]
5266   2898             ; START RELATIONAL
5267   2898 D7            push a
5268   2899 11            mov a, b
5269   289A 26 06 00      mov b, $6
5270   289D B0            cmp a, b
5271   289E FD 73         slt ; < (signed)
5272   28A0 E4            pop a
5273   28A1             ; END RELATIONAL
5274   28A1 C0 00 00      cmp b, 0
5275   28A4 C6 98 29      je _for71_exit
5276   28A7             _for71_block:
5277   28A7             ;; loc[j] = -1; 
5278   28A7 3B 49 2B      mov d, _loc_data ; $loc
5279   28AA D7            push a
5280   28AB DA            push d
5281   28AC FA FF FF      lea d, [bp + -1] ; $j
5282   28AF 2A            mov b, [d]
5283   28B0 E7            pop d
5284   28B1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5285   28B5 E4            pop a
5286   28B6 DA            push d
5287   28B7 26 01 00      mov b, $1
5288   28BA FD 97         neg b
5289   28BC E7            pop d
5290   28BD FD 43         mov [d], b
5291   28BF             ;; while (loc[j] < 0) { 
5292   28BF             _while72_cond:
5293   28BF 3B 49 2B      mov d, _loc_data ; $loc
5294   28C2 D7            push a
5295   28C3 DA            push d
5296   28C4 FA FF FF      lea d, [bp + -1] ; $j
5297   28C7 2A            mov b, [d]
5298   28C8 E7            pop d
5299   28C9 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5300   28CD E4            pop a
5301   28CE 2A            mov b, [d]
5302   28CF             ; START RELATIONAL
5303   28CF D7            push a
5304   28D0 11            mov a, b
5305   28D1 26 00 00      mov b, $0
5306   28D4 B0            cmp a, b
5307   28D5 FD 73         slt ; < (signed)
5308   28D7 E4            pop a
5309   28D8             ; END RELATIONAL
5310   28D8 C0 00 00      cmp b, 0
5311   28DB C6 88 29      je _while72_exit
5312   28DE             _while72_block:
5313   28DE             ;; v = rand2(); 
5314   28DE FA FB FF      lea d, [bp + -5] ; $v
5315   28E1 DA            push d
5316   28E2 07 55 28      call rand2
5317   28E5 E7            pop d
5318   28E6 FD 43         mov [d], b
5319   28E8             ;; loc[j] = v % 20; 
5320   28E8 3B 49 2B      mov d, _loc_data ; $loc
5321   28EB D7            push a
5322   28EC DA            push d
5323   28ED FA FF FF      lea d, [bp + -1] ; $j
5324   28F0 2A            mov b, [d]
5325   28F1 E7            pop d
5326   28F2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5327   28F6 E4            pop a
5328   28F7 DA            push d
5329   28F8 FA FB FF      lea d, [bp + -5] ; $v
5330   28FB 2A            mov b, [d]
5331   28FC             ; START FACTORS
5332   28FC D7            push a
5333   28FD 11            mov a, b
5334   28FE 26 14 00      mov b, $14
5335   2901 AE            div a, b ; 
5336   2902 11            mov a, b
5337   2903 27            mov b, a
5338   2904 E4            pop a
5339   2905             ; END FACTORS
5340   2905 E7            pop d
5341   2906 FD 43         mov [d], b
5342   2908             ;; for (k=0; k<j-1; k++) { 
5343   2908             _for73_init:
5344   2908 FA FD FF      lea d, [bp + -3] ; $k
5345   290B DA            push d
5346   290C 26 00 00      mov b, $0
5347   290F E7            pop d
5348   2910 FD 43         mov [d], b
5349   2912             _for73_cond:
5350   2912 FA FD FF      lea d, [bp + -3] ; $k
5351   2915 2A            mov b, [d]
5352   2916             ; START RELATIONAL
5353   2916 D7            push a
5354   2917 11            mov a, b
5355   2918 FA FF FF      lea d, [bp + -1] ; $j
5356   291B 2A            mov b, [d]
5357   291C             ; START TERMS
5358   291C D7            push a
5359   291D 11            mov a, b
5360   291E 26 01 00      mov b, $1
5361   2921 60            sub a, b
5362   2922 27            mov b, a
5363   2923 E4            pop a
5364   2924             ; END TERMS
5365   2924 B0            cmp a, b
5366   2925 FD 73         slt ; < (signed)
5367   2927 E4            pop a
5368   2928             ; END RELATIONAL
5369   2928 C0 00 00      cmp b, 0
5370   292B C6 85 29      je _for73_exit
5371   292E             _for73_block:
5372   292E             ;; if (loc[j] == loc[k]) { 
5373   292E             _if74_cond:
5374   292E 3B 49 2B      mov d, _loc_data ; $loc
5375   2931 D7            push a
5376   2932 DA            push d
5377   2933 FA FF FF      lea d, [bp + -1] ; $j
5378   2936 2A            mov b, [d]
5379   2937 E7            pop d
5380   2938 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5381   293C E4            pop a
5382   293D 2A            mov b, [d]
5383   293E             ; START RELATIONAL
5384   293E D7            push a
5385   293F 11            mov a, b
5386   2940 3B 49 2B      mov d, _loc_data ; $loc
5387   2943 D7            push a
5388   2944 DA            push d
5389   2945 FA FD FF      lea d, [bp + -3] ; $k
5390   2948 2A            mov b, [d]
5391   2949 E7            pop d
5392   294A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5393   294E E4            pop a
5394   294F 2A            mov b, [d]
5395   2950 B0            cmp a, b
5396   2951 FD 71         seq ; ==
5397   2953 E4            pop a
5398   2954             ; END RELATIONAL
5399   2954 C0 00 00      cmp b, 0
5400   2957 C6 75 29      je _if74_exit
5401   295A             _if74_true:
5402   295A             ;; loc[j] = -1; 
5403   295A 3B 49 2B      mov d, _loc_data ; $loc
5404   295D D7            push a
5405   295E DA            push d
5406   295F FA FF FF      lea d, [bp + -1] ; $j
5407   2962 2A            mov b, [d]
5408   2963 E7            pop d
5409   2964 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5410   2968 E4            pop a
5411   2969 DA            push d
5412   296A 26 01 00      mov b, $1
5413   296D FD 97         neg b
5414   296F E7            pop d
5415   2970 FD 43         mov [d], b
5416   2972 0A 75 29      jmp _if74_exit
5417   2975             _if74_exit:
5418   2975             _for73_update:
5419   2975 FA FD FF      lea d, [bp + -3] ; $k
5420   2978 2A            mov b, [d]
5421   2979 FD 77         inc b
5422   297B FA FD FF      lea d, [bp + -3] ; $k
5423   297E FD 43         mov [d], b
5424   2980 FD 7D         dec b
5425   2982 0A 12 29      jmp _for73_cond
5426   2985             _for73_exit:
5427   2985 0A BF 28      jmp _while72_cond
5428   2988             _while72_exit:
5429   2988             _for71_update:
5430   2988 FA FF FF      lea d, [bp + -1] ; $j
5431   298B 2A            mov b, [d]
5432   298C FD 77         inc b
5433   298E FA FF FF      lea d, [bp + -1] ; $j
5434   2991 FD 43         mov [d], b
5435   2993 FD 7D         dec b
5436   2995 0A 94 28      jmp _for71_cond
5437   2998             _for71_exit:
5438   2998 F9            leave
5439   2999 09            ret
5440   299A             
5441   299A             game_play:
5442   299A F8 00 00      enter 0 ; (push bp; mov bp, sp)
5443   299D             ;; arrows = 5; 
5444   299D 3B 41 2B      mov d, _arrows ; $arrows
5445   29A0 DA            push d
5446   29A1 26 05 00      mov b, $5
5447   29A4 E7            pop d
5448   29A5 FD 43         mov [d], b
5449   29A7             ;; print("HUNT THE WUMPUS\n"); 
5450   29A7 26 6C 33      mov b, _s60 ; "HUNT THE WUMPUS\n"
5451   29AA FD AB         swp b
5452   29AC D8            push b
5453   29AD 07 A6 15      call print
5454   29B0 51 02 00      add sp, 2
5455   29B3             ;; if (debug) { 
5456   29B3             _if75_cond:
5457   29B3 3B 43 2B      mov d, _debug ; $debug
5458   29B6 2A            mov b, [d]
5459   29B7 C0 00 00      cmp b, 0
5460   29BA C6 97 2A      je _if75_exit
5461   29BD             _if75_true:
5462   29BD             ;; print("Wumpus is at "); print_unsigned(loc[ 	1     ]+1); 
5463   29BD 26 7D 33      mov b, _s61 ; "Wumpus is at "
5464   29C0 FD AB         swp b
5465   29C2 D8            push b
5466   29C3 07 A6 15      call print
5467   29C6 51 02 00      add sp, 2
5468   29C9             ;; print_unsigned(loc[ 	1     ]+1); 
5469   29C9 3B 49 2B      mov d, _loc_data ; $loc
5470   29CC D7            push a
5471   29CD DA            push d
5472   29CE 26 01 00      mov b, $1
5473   29D1 E7            pop d
5474   29D2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5475   29D6 E4            pop a
5476   29D7 2A            mov b, [d]
5477   29D8             ; START TERMS
5478   29D8 D7            push a
5479   29D9 11            mov a, b
5480   29DA 26 01 00      mov b, $1
5481   29DD 56            add b, a
5482   29DE E4            pop a
5483   29DF             ; END TERMS
5484   29DF FD AB         swp b
5485   29E1 D8            push b
5486   29E2 07 8B 14      call print_unsigned
5487   29E5 51 02 00      add sp, 2
5488   29E8             ;; print(", pits at "); print_unsigned(loc[ 	2   ]+1); 
5489   29E8 26 8B 33      mov b, _s62 ; ", pits at "
5490   29EB FD AB         swp b
5491   29ED D8            push b
5492   29EE 07 A6 15      call print
5493   29F1 51 02 00      add sp, 2
5494   29F4             ;; print_unsigned(loc[ 	2   ]+1); 
5495   29F4 3B 49 2B      mov d, _loc_data ; $loc
5496   29F7 D7            push a
5497   29F8 DA            push d
5498   29F9 26 02 00      mov b, $2
5499   29FC E7            pop d
5500   29FD FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5501   2A01 E4            pop a
5502   2A02 2A            mov b, [d]
5503   2A03             ; START TERMS
5504   2A03 D7            push a
5505   2A04 11            mov a, b
5506   2A05 26 01 00      mov b, $1
5507   2A08 56            add b, a
5508   2A09 E4            pop a
5509   2A0A             ; END TERMS
5510   2A0A FD AB         swp b
5511   2A0C D8            push b
5512   2A0D 07 8B 14      call print_unsigned
5513   2A10 51 02 00      add sp, 2
5514   2A13             ;; print(" & "); print_unsigned(loc[ 	3   ]+1); 
5515   2A13 26 96 33      mov b, _s63 ; " & "
5516   2A16 FD AB         swp b
5517   2A18 D8            push b
5518   2A19 07 A6 15      call print
5519   2A1C 51 02 00      add sp, 2
5520   2A1F             ;; print_unsigned(loc[ 	3   ]+1); 
5521   2A1F 3B 49 2B      mov d, _loc_data ; $loc
5522   2A22 D7            push a
5523   2A23 DA            push d
5524   2A24 26 03 00      mov b, $3
5525   2A27 E7            pop d
5526   2A28 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5527   2A2C E4            pop a
5528   2A2D 2A            mov b, [d]
5529   2A2E             ; START TERMS
5530   2A2E D7            push a
5531   2A2F 11            mov a, b
5532   2A30 26 01 00      mov b, $1
5533   2A33 56            add b, a
5534   2A34 E4            pop a
5535   2A35             ; END TERMS
5536   2A35 FD AB         swp b
5537   2A37 D8            push b
5538   2A38 07 8B 14      call print_unsigned
5539   2A3B 51 02 00      add sp, 2
5540   2A3E             ;; print(", bats at "); print_unsigned(loc[ 	4    ]+1); 
5541   2A3E 26 9A 33      mov b, _s64 ; ", bats at "
5542   2A41 FD AB         swp b
5543   2A43 D8            push b
5544   2A44 07 A6 15      call print
5545   2A47 51 02 00      add sp, 2
5546   2A4A             ;; print_unsigned(loc[ 	4    ]+1); 
5547   2A4A 3B 49 2B      mov d, _loc_data ; $loc
5548   2A4D D7            push a
5549   2A4E DA            push d
5550   2A4F 26 04 00      mov b, $4
5551   2A52 E7            pop d
5552   2A53 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5553   2A57 E4            pop a
5554   2A58 2A            mov b, [d]
5555   2A59             ; START TERMS
5556   2A59 D7            push a
5557   2A5A 11            mov a, b
5558   2A5B 26 01 00      mov b, $1
5559   2A5E 56            add b, a
5560   2A5F E4            pop a
5561   2A60             ; END TERMS
5562   2A60 FD AB         swp b
5563   2A62 D8            push b
5564   2A63 07 8B 14      call print_unsigned
5565   2A66 51 02 00      add sp, 2
5566   2A69             ;; print(" & "); print_unsigned(loc[ 	5    ]+1); 
5567   2A69 26 96 33      mov b, _s63 ; " & "
5568   2A6C FD AB         swp b
5569   2A6E D8            push b
5570   2A6F 07 A6 15      call print
5571   2A72 51 02 00      add sp, 2
5572   2A75             ;; print_unsigned(loc[ 	5    ]+1); 
5573   2A75 3B 49 2B      mov d, _loc_data ; $loc
5574   2A78 D7            push a
5575   2A79 DA            push d
5576   2A7A 26 05 00      mov b, $5
5577   2A7D E7            pop d
5578   2A7E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5579   2A82 E4            pop a
5580   2A83 2A            mov b, [d]
5581   2A84             ; START TERMS
5582   2A84 D7            push a
5583   2A85 11            mov a, b
5584   2A86 26 01 00      mov b, $1
5585   2A89 56            add b, a
5586   2A8A E4            pop a
5587   2A8B             ; END TERMS
5588   2A8B FD AB         swp b
5589   2A8D D8            push b
5590   2A8E 07 8B 14      call print_unsigned
5591   2A91 51 02 00      add sp, 2
5592   2A94 0A 97 2A      jmp _if75_exit
5593   2A97             _if75_exit:
5594   2A97             ;; finished =  	     0  ; 
5595   2A97 3B 55 2B      mov d, _finished ; $finished
5596   2A9A DA            push d
5597   2A9B 26 00 00      mov b, $0
5598   2A9E E7            pop d
5599   2A9F FD 43         mov [d], b
5600   2AA1             ;; while (finished ==  	     0  ) { 
5601   2AA1             _while76_cond:
5602   2AA1 3B 55 2B      mov d, _finished ; $finished
5603   2AA4 2A            mov b, [d]
5604   2AA5             ; START RELATIONAL
5605   2AA5 D7            push a
5606   2AA6 11            mov a, b
5607   2AA7 26 00 00      mov b, $0
5608   2AAA B0            cmp a, b
5609   2AAB FD 71         seq ; ==
5610   2AAD E4            pop a
5611   2AAE             ; END RELATIONAL
5612   2AAE C0 00 00      cmp b, 0
5613   2AB1 C6 CC 2A      je _while76_exit
5614   2AB4             _while76_block:
5615   2AB4             ;; show_room(); 
5616   2AB4 07 B0 1F      call show_room
5617   2AB7             ;; if (move_or_shoot()) { 
5618   2AB7             _if77_cond:
5619   2AB7 07 E9 21      call move_or_shoot
5620   2ABA C0 00 00      cmp b, 0
5621   2ABD C6 C6 2A      je _if77_else
5622   2AC0             _if77_true:
5623   2AC0             ;; shoot(); 
5624   2AC0 07 FF 22      call shoot
5625   2AC3 0A C9 2A      jmp _if77_exit
5626   2AC6             _if77_else:
5627   2AC6             ;; move(); 
5628   2AC6 07 F7 25      call move
5629   2AC9             _if77_exit:
5630   2AC9 0A A1 2A      jmp _while76_cond
5631   2ACC             _while76_exit:
5632   2ACC             ;; if (finished ==  	     1  ) { 
5633   2ACC             _if78_cond:
5634   2ACC 3B 55 2B      mov d, _finished ; $finished
5635   2ACF 2A            mov b, [d]
5636   2AD0             ; START RELATIONAL
5637   2AD0 D7            push a
5638   2AD1 11            mov a, b
5639   2AD2 26 01 00      mov b, $1
5640   2AD5 B0            cmp a, b
5641   2AD6 FD 71         seq ; ==
5642   2AD8 E4            pop a
5643   2AD9             ; END RELATIONAL
5644   2AD9 C0 00 00      cmp b, 0
5645   2ADC C6 EE 2A      je _if78_exit
5646   2ADF             _if78_true:
5647   2ADF             ;; print("HEE HEE HEE - THE WUMPUS'LL GET YOU NEXT TIME!!\n"); 
5648   2ADF 26 A5 33      mov b, _s65 ; "HEE HEE HEE - THE WUMPUS'LL GET YOU NEXT TIME!!\n"
5649   2AE2 FD AB         swp b
5650   2AE4 D8            push b
5651   2AE5 07 A6 15      call print
5652   2AE8 51 02 00      add sp, 2
5653   2AEB 0A EE 2A      jmp _if78_exit
5654   2AEE             _if78_exit:
5655   2AEE             ;; if (finished ==  	2   ) { 
5656   2AEE             _if79_cond:
5657   2AEE 3B 55 2B      mov d, _finished ; $finished
5658   2AF1 2A            mov b, [d]
5659   2AF2             ; START RELATIONAL
5660   2AF2 D7            push a
5661   2AF3 11            mov a, b
5662   2AF4 26 02 00      mov b, $2
5663   2AF7 B0            cmp a, b
5664   2AF8 FD 71         seq ; ==
5665   2AFA E4            pop a
5666   2AFB             ; END RELATIONAL
5667   2AFB C0 00 00      cmp b, 0
5668   2AFE C6 10 2B      je _if79_exit
5669   2B01             _if79_true:
5670   2B01             ;; print("HA HA HA - YOU LOSE!\n"); 
5671   2B01 26 D5 33      mov b, _s66 ; "HA HA HA - YOU LOSE!\n"
5672   2B04 FD AB         swp b
5673   2B06 D8            push b
5674   2B07 07 A6 15      call print
5675   2B0A 51 02 00      add sp, 2
5676   2B0D 0A 10 2B      jmp _if79_exit
5677   2B10             _if79_exit:
5678   2B10             ;; int c; 
5679   2B10 52 02 00      sub sp, 2 ; c
5680   2B13             ;; c = getlet("NEW GAME (Y-N): "); 
5681   2B13 FA FF FF      lea d, [bp + -1] ; $c
5682   2B16 DA            push d
5683   2B17 26 EE 2B      mov b, _s1 ; "NEW GAME (Y-N): "
5684   2B1A FD AB         swp b
5685   2B1C D8            push b
5686   2B1D 07 A1 1D      call getlet
5687   2B20 51 02 00      add sp, 2
5688   2B23 E7            pop d
5689   2B24 FD 43         mov [d], b
5690   2B26             ;; if (c == 'N') { 
5691   2B26             _if80_cond:
5692   2B26 FA FF FF      lea d, [bp + -1] ; $c
5693   2B29 2A            mov b, [d]
5694   2B2A             ; START RELATIONAL
5695   2B2A D7            push a
5696   2B2B 11            mov a, b
5697   2B2C 26 4E 00      mov b, $4e
5698   2B2F B0            cmp a, b
5699   2B30 FD 71         seq ; ==
5700   2B32 E4            pop a
5701   2B33             ; END RELATIONAL
5702   2B33 C0 00 00      cmp b, 0
5703   2B36 C6 3F 2B      je _if80_exit
5704   2B39             _if80_true:
5705   2B39             ;; exit(); 
5706   2B39 07 21 06      call exit
5707   2B3C 0A 3F 2B      jmp _if80_exit
5708   2B3F             _if80_exit:
5709   2B3F F9            leave
5710   2B40 09            ret
5711   2B41             ; --- END TEXT BLOCK
5712   2B41             
5713   2B41             ; --- BEGIN DATA BLOCK
5714   2B41 00 00       _arrows: .fill 2, 0
5715   2B43 00 00       _debug: .dw 0
5716   2B45 1D 00       _rand_val: .dw 29
5717   2B47 01 00       _rand_inc: .dw 1
5718   2B49 00 00 00 00 _loc_data: .fill 12, 0
5718   2B4D 00 00 00 00 
5718   2B51 00 00 00 00 
5719   2B55 00 00       _finished: .fill 2, 0
5720   2B57             _cave_data: 
5721   2B57 00 00       .dw 
5722   2B59 01 00 04 00 .dw $1,$4,$7,$0,$2,$9,$1,$3,$b,$2,$4,$d,$0,$3,$5,$4,$6,$e,$5,$7,$10,$0,$6,$8,$7,$9,$11,$1,$8,$a,
5722   2B5D 07 00 00 00 
5722   2B61 02 00 09 00 
5722   2B65 01 00 03 00 
5722   2B69 0B 00 02 00 
5722   2B6D 04 00 0D 00 
5722   2B71 00 00 03 00 
5722   2B75 05 00 04 00 
5722   2B79 06 00 0E 00 
5722   2B7D 05 00 07 00 
5722   2B81 10 00 00 00 
5722   2B85 06 00 08 00 
5722   2B89 07 00 09 00 
5722   2B8D 11 00 01 00 
5722   2B91 08 00 0A 00 
5723   2B95 00 00       .dw 
5724   2B97 00 00       .dw 
5725   2B99 09 00 0B 00 .dw $9,$b,$12,$2,$a,$c,$b,$d,$13,$3,$c,$e,$5,$d,$f,$e,$10,$13,$6,$f,$11,$8,$10,$12,$a,$11,$13,$c,$f,$12,
5725   2B9D 12 00 02 00 
5725   2BA1 0A 00 0C 00 
5725   2BA5 0B 00 0D 00 
5725   2BA9 13 00 03 00 
5725   2BAD 0C 00 0E 00 
5725   2BB1 05 00 0D 00 
5725   2BB5 0F 00 0E 00 
5725   2BB9 10 00 13 00 
5725   2BBD 06 00 0F 00 
5725   2BC1 11 00 08 00 
5725   2BC5 10 00 12 00 
5725   2BC9 0A 00 11 00 
5725   2BCD 13 00 0C 00 
5725   2BD1 0F 00 12 00 
5726   2BD5 00 00       .dw 
5727   2BD7 00 00       .dw 
5728   2BD9 49 4E 53 54 _s0: .db "INSTRUCTIONS (Y-N): ", 0
5728   2BDD 52 55 43 54 
5728   2BE1 49 4F 4E 53 
5728   2BE5 20 28 59 2D 
5728   2BE9 4E 29 3A 20 
5728   2BED 00 
5729   2BEE 4E 45 57 20 _s1: .db "NEW GAME (Y-N): ", 0
5729   2BF2 47 41 4D 45 
5729   2BF6 20 28 59 2D 
5729   2BFA 4E 29 3A 20 
5729   2BFE 00 
5730   2BFF 55 6E 65 78 _s2: .db "Unexpected format in printf.", 0
5730   2C03 70 65 63 74 
5730   2C07 65 64 20 66 
5730   2C0B 6F 72 6D 61 
5730   2C0F 74 20 69 6E 
5730   2C13 20 70 72 69 
5730   2C17 6E 74 66 2E 
5730   2C1B 00 
5731   2C1C 45 72 72 6F _s3: .db "Error: Unknown argument type.\n", 0
5731   2C20 72 3A 20 55 
5731   2C24 6E 6B 6E 6F 
5731   2C28 77 6E 20 61 
5731   2C2C 72 67 75 6D 
5731   2C30 65 6E 74 20 
5731   2C34 74 79 70 65 
5731   2C38 2E 0A 00 
5732   2C3B 1B 5B 32 4A _s4: .db "\033[2J\033[H", 0
5732   2C3F 1B 5B 48 00 
5733   2C43 57 65 6C 63 _s5: .db "Welcome to 'hunt the wumpus'\n", 0
5733   2C47 6F 6D 65 20 
5733   2C4B 74 6F 20 27 
5733   2C4F 68 75 6E 74 
5733   2C53 20 74 68 65 
5733   2C57 20 77 75 6D 
5733   2C5B 70 75 73 27 
5733   2C5F 0A 00 
5734   2C61 54 68 65 20 _s6: .db "The wumpus lives in a cave of 20 rooms. Each room\n", 0
5734   2C65 77 75 6D 70 
5734   2C69 75 73 20 6C 
5734   2C6D 69 76 65 73 
5734   2C71 20 69 6E 20 
5734   2C75 61 20 63 61 
5734   2C79 76 65 20 6F 
5734   2C7D 66 20 32 30 
5734   2C81 20 72 6F 6F 
5734   2C85 6D 73 2E 20 
5734   2C89 45 61 63 68 
5734   2C8D 20 72 6F 6F 
5734   2C91 6D 0A 00 
5735   2C94 68 61 73 20 _s7: .db "has 3 tunnels leading to other rooms.\n", 0
5735   2C98 33 20 74 75 
5735   2C9C 6E 6E 65 6C 
5735   2CA0 73 20 6C 65 
5735   2CA4 61 64 69 6E 
5735   2CA8 67 20 74 6F 
5735   2CAC 20 6F 74 68 
5735   2CB0 65 72 20 72 
5735   2CB4 6F 6F 6D 73 
5735   2CB8 2E 0A 00 
5736   2CBB 4C 6F 6F 6B _s8: .db "Look at a dodecahedron to see how this works.\n", 0
5736   2CBF 20 61 74 20 
5736   2CC3 61 20 64 6F 
5736   2CC7 64 65 63 61 
5736   2CCB 68 65 64 72 
5736   2CCF 6F 6E 20 74 
5736   2CD3 6F 20 73 65 
5736   2CD7 65 20 68 6F 
5736   2CDB 77 20 74 68 
5736   2CDF 69 73 20 77 
5736   2CE3 6F 72 6B 73 
5736   2CE7 2E 0A 00 
5737   2CEA 0A 00       _s9: .db "\n", 0
5738   2CEC 20 48 61 7A _s10: .db " Hazards:\n", 0
5738   2CF0 61 72 64 73 
5738   2CF4 3A 0A 00 
5739   2CF7 20 42 6F 74 _s11: .db " Bottomless pits: Two rooms have bottomless pits in them\n", 0
5739   2CFB 74 6F 6D 6C 
5739   2CFF 65 73 73 20 
5739   2D03 70 69 74 73 
5739   2D07 3A 20 54 77 
5739   2D0B 6F 20 72 6F 
5739   2D0F 6F 6D 73 20 
5739   2D13 68 61 76 65 
5739   2D17 20 62 6F 74 
5739   2D1B 74 6F 6D 6C 
5739   2D1F 65 73 73 20 
5739   2D23 70 69 74 73 
5739   2D27 20 69 6E 20 
5739   2D2B 74 68 65 6D 
5739   2D2F 0A 00 
5740   2D31 20 49 66 20 _s12: .db " If you go there, you fall into the pit (& lose!)\n", 0
5740   2D35 79 6F 75 20 
5740   2D39 67 6F 20 74 
5740   2D3D 68 65 72 65 
5740   2D41 2C 20 79 6F 
5740   2D45 75 20 66 61 
5740   2D49 6C 6C 20 69 
5740   2D4D 6E 74 6F 20 
5740   2D51 74 68 65 20 
5740   2D55 70 69 74 20 
5740   2D59 28 26 20 6C 
5740   2D5D 6F 73 65 21 
5740   2D61 29 0A 00 
5741   2D64 20 53 55 50 _s13: .db " SUPER BATS     : TWO OTHER ROOMS HAVE SUPER BATS. IF YOU\n", 0
5741   2D68 45 52 20 42 
5741   2D6C 41 54 53 20 
5741   2D70 20 20 20 20 
5741   2D74 3A 20 54 57 
5741   2D78 4F 20 4F 54 
5741   2D7C 48 45 52 20 
5741   2D80 52 4F 4F 4D 
5741   2D84 53 20 48 41 
5741   2D88 56 45 20 53 
5741   2D8C 55 50 45 52 
5741   2D90 20 42 41 54 
5741   2D94 53 2E 20 49 
5741   2D98 46 20 59 4F 
5741   2D9C 55 0A 00 
5742   2D9F 20 47 4F 20 _s14: .db " GO THERE, A BAT GRABS YOU AND TAKES YOU TO SOME OTHER\n", 0
5742   2DA3 54 48 45 52 
5742   2DA7 45 2C 20 41 
5742   2DAB 20 42 41 54 
5742   2DAF 20 47 52 41 
5742   2DB3 42 53 20 59 
5742   2DB7 4F 55 20 41 
5742   2DBB 4E 44 20 54 
5742   2DBF 41 4B 45 53 
5742   2DC3 20 59 4F 55 
5742   2DC7 20 54 4F 20 
5742   2DCB 53 4F 4D 45 
5742   2DCF 20 4F 54 48 
5742   2DD3 45 52 0A 00 
5743   2DD7 20 52 4F 4F _s15: .db " ROOM AT RANDOM. (WHICH MAY BE TROUBLESOME)\n\n", 0
5743   2DDB 4D 20 41 54 
5743   2DDF 20 52 41 4E 
5743   2DE3 44 4F 4D 2E 
5743   2DE7 20 28 57 48 
5743   2DEB 49 43 48 20 
5743   2DEF 4D 41 59 20 
5743   2DF3 42 45 20 54 
5743   2DF7 52 4F 55 42 
5743   2DFB 4C 45 53 4F 
5743   2DFF 4D 45 29 0A 
5743   2E03 0A 00 
5744   2E05 20 57 55 4D _s16: .db " WUMPUS:\n", 0
5744   2E09 50 55 53 3A 
5744   2E0D 0A 00 
5745   2E0F 20 54 48 45 _s17: .db " THE WUMPUS IS NOT BOTHERED BY HAZARDS (HE HAS SUCKER\n", 0
5745   2E13 20 57 55 4D 
5745   2E17 50 55 53 20 
5745   2E1B 49 53 20 4E 
5745   2E1F 4F 54 20 42 
5745   2E23 4F 54 48 45 
5745   2E27 52 45 44 20 
5745   2E2B 42 59 20 48 
5745   2E2F 41 5A 41 52 
5745   2E33 44 53 20 28 
5745   2E37 48 45 20 48 
5745   2E3B 41 53 20 53 
5745   2E3F 55 43 4B 45 
5745   2E43 52 0A 00 
5746   2E46 20 46 45 45 _s18: .db " FEET AND IS TOO BIG FOR A BAT TO LIFT).  USUALLY\n", 0
5746   2E4A 54 20 41 4E 
5746   2E4E 44 20 49 53 
5746   2E52 20 54 4F 4F 
5746   2E56 20 42 49 47 
5746   2E5A 20 46 4F 52 
5746   2E5E 20 41 20 42 
5746   2E62 41 54 20 54 
5746   2E66 4F 20 4C 49 
5746   2E6A 46 54 29 2E 
5746   2E6E 20 20 55 53 
5746   2E72 55 41 4C 4C 
5746   2E76 59 0A 00 
5747   2E79 20 48 45 20 _s19: .db " HE IS ASLEEP.  TWO THINGS WAKE HIM UP: YOU SHOOTING AN\n", 0
5747   2E7D 49 53 20 41 
5747   2E81 53 4C 45 45 
5747   2E85 50 2E 20 20 
5747   2E89 54 57 4F 20 
5747   2E8D 54 48 49 4E 
5747   2E91 47 53 20 57 
5747   2E95 41 4B 45 20 
5747   2E99 48 49 4D 20 
5747   2E9D 55 50 3A 20 
5747   2EA1 59 4F 55 20 
5747   2EA5 53 48 4F 4F 
5747   2EA9 54 49 4E 47 
5747   2EAD 20 41 4E 0A 
5747   2EB1 00 
5748   2EB2 20 41 52 52 _s20: .db " ARROW OR YOU ENTERING HIS ROOM.\n", 0
5748   2EB6 4F 57 20 4F 
5748   2EBA 52 20 59 4F 
5748   2EBE 55 20 45 4E 
5748   2EC2 54 45 52 49 
5748   2EC6 4E 47 20 48 
5748   2ECA 49 53 20 52 
5748   2ECE 4F 4F 4D 2E 
5748   2ED2 0A 00 
5749   2ED4 20 49 46 20 _s21: .db " IF THE WUMPUS WAKES HE MOVES (P=.75) ONE ROOM\n", 0
5749   2ED8 54 48 45 20 
5749   2EDC 57 55 4D 50 
5749   2EE0 55 53 20 57 
5749   2EE4 41 4B 45 53 
5749   2EE8 20 48 45 20 
5749   2EEC 4D 4F 56 45 
5749   2EF0 53 20 28 50 
5749   2EF4 3D 2E 37 35 
5749   2EF8 29 20 4F 4E 
5749   2EFC 45 20 52 4F 
5749   2F00 4F 4D 0A 00 
5750   2F04 20 4F 52 20 _s22: .db " OR STAYS STILL (P=.25).  AFTER THAT, IF HE IS WHERE YOU\n", 0
5750   2F08 53 54 41 59 
5750   2F0C 53 20 53 54 
5750   2F10 49 4C 4C 20 
5750   2F14 28 50 3D 2E 
5750   2F18 32 35 29 2E 
5750   2F1C 20 20 41 46 
5750   2F20 54 45 52 20 
5750   2F24 54 48 41 54 
5750   2F28 2C 20 49 46 
5750   2F2C 20 48 45 20 
5750   2F30 49 53 20 57 
5750   2F34 48 45 52 45 
5750   2F38 20 59 4F 55 
5750   2F3C 0A 00 
5751   2F3E 20 41 52 45 _s23: .db " ARE, HE EATS YOU UP AND YOU LOSE!\n", 0
5751   2F42 2C 20 48 45 
5751   2F46 20 45 41 54 
5751   2F4A 53 20 59 4F 
5751   2F4E 55 20 55 50 
5751   2F52 20 41 4E 44 
5751   2F56 20 59 4F 55 
5751   2F5A 20 4C 4F 53 
5751   2F5E 45 21 0A 00 
5752   2F62 20 59 4F 55 _s24: .db " YOU:\n", 0
5752   2F66 3A 0A 00 
5753   2F69 20 45 41 43 _s25: .db " EACH TURN YOU MAY MOVE OR SHOOT A CROOKED ARROW\n", 0
5753   2F6D 48 20 54 55 
5753   2F71 52 4E 20 59 
5753   2F75 4F 55 20 4D 
5753   2F79 41 59 20 4D 
5753   2F7D 4F 56 45 20 
5753   2F81 4F 52 20 53 
5753   2F85 48 4F 4F 54 
5753   2F89 20 41 20 43 
5753   2F8D 52 4F 4F 4B 
5753   2F91 45 44 20 41 
5753   2F95 52 52 4F 57 
5753   2F99 0A 00 
5754   2F9B 20 4D 4F 56 _s26: .db " MOVING:  YOU CAN MOVE ONE ROOM (THRU ONE TUNNEL)\n", 0
5754   2F9F 49 4E 47 3A 
5754   2FA3 20 20 59 4F 
5754   2FA7 55 20 43 41 
5754   2FAB 4E 20 4D 4F 
5754   2FAF 56 45 20 4F 
5754   2FB3 4E 45 20 52 
5754   2FB7 4F 4F 4D 20 
5754   2FBB 28 54 48 52 
5754   2FBF 55 20 4F 4E 
5754   2FC3 45 20 54 55 
5754   2FC7 4E 4E 45 4C 
5754   2FCB 29 0A 00 
5755   2FCE 20 41 52 52 _s27: .db " ARROWS:  YOU HAVE 5 ARROWS.  YOU LOSE WHEN YOU RUN OUT\n", 0
5755   2FD2 4F 57 53 3A 
5755   2FD6 20 20 59 4F 
5755   2FDA 55 20 48 41 
5755   2FDE 56 45 20 35 
5755   2FE2 20 41 52 52 
5755   2FE6 4F 57 53 2E 
5755   2FEA 20 20 59 4F 
5755   2FEE 55 20 4C 4F 
5755   2FF2 53 45 20 57 
5755   2FF6 48 45 4E 20 
5755   2FFA 59 4F 55 20 
5755   2FFE 52 55 4E 20 
5755   3002 4F 55 54 0A 
5755   3006 00 
5756   3007 20 45 41 43 _s28: .db " EACH ARROW CAN GO FROM 1 TO 5 ROOMS. YOU AIM BY TELLING\n", 0
5756   300B 48 20 41 52 
5756   300F 52 4F 57 20 
5756   3013 43 41 4E 20 
5756   3017 47 4F 20 46 
5756   301B 52 4F 4D 20 
5756   301F 31 20 54 4F 
5756   3023 20 35 20 52 
5756   3027 4F 4F 4D 53 
5756   302B 2E 20 59 4F 
5756   302F 55 20 41 49 
5756   3033 4D 20 42 59 
5756   3037 20 54 45 4C 
5756   303B 4C 49 4E 47 
5756   303F 0A 00 
5757   3041 20 20 20 54 _s29: .db "   THE COMPUTER THE ROOM#S YOU WANT THE ARROW TO GO TO.\n", 0
5757   3045 48 45 20 43 
5757   3049 4F 4D 50 55 
5757   304D 54 45 52 20 
5757   3051 54 48 45 20 
5757   3055 52 4F 4F 4D 
5757   3059 23 53 20 59 
5757   305D 4F 55 20 57 
5757   3061 41 4E 54 20 
5757   3065 54 48 45 20 
5757   3069 41 52 52 4F 
5757   306D 57 20 54 4F 
5757   3071 20 47 4F 20 
5757   3075 54 4F 2E 0A 
5757   3079 00 
5758   307A 20 20 20 49 _s30: .db "   IF THE ARROW CAN'T GO THAT WAY (IF NO TUNNEL) IT MOVES\n", 0
5758   307E 46 20 54 48 
5758   3082 45 20 41 52 
5758   3086 52 4F 57 20 
5758   308A 43 41 4E 27 
5758   308E 54 20 47 4F 
5758   3092 20 54 48 41 
5758   3096 54 20 57 41 
5758   309A 59 20 28 49 
5758   309E 46 20 4E 4F 
5758   30A2 20 54 55 4E 
5758   30A6 4E 45 4C 29 
5758   30AA 20 49 54 20 
5758   30AE 4D 4F 56 45 
5758   30B2 53 0A 
5759   30B4 20 20 20 41 _s31: .db "   AT RANDOM TO THE NEXT ROOM.\n", 0
5759   30B8 54 20 52 41 
5759   30BC 4E 44 4F 4D 
5759   30C0 20 54 4F 20 
5759   30C4 54 48 45 20 
5759   30C8 4E 45 58 54 
5759   30CC 20 52 4F 4F 
5759   30D0 4D 2E 0A 00 
5760   30D4 20 20 20 20 _s32: .db "     IF THE ARROW HITS THE WUMPUS, YOU WIN.\n", 0
5760   30D8 20 49 46 20 
5760   30DC 54 48 45 20 
5760   30E0 41 52 52 4F 
5760   30E4 57 20 48 49 
5760   30E8 54 53 20 54 
5760   30EC 48 45 20 57 
5760   30F0 55 4D 50 55 
5760   30F4 53 2C 20 59 
5760   30F8 4F 55 20 57 
5760   30FC 49 4E 2E 0A 
5760   3100 00 
5761   3101 20 20 20 20 _s33: .db "     IF THE ARROW HITS YOU, YOU LOSE.\n", 0
5761   3105 20 49 46 20 
5761   3109 54 48 45 20 
5761   310D 41 52 52 4F 
5761   3111 57 20 48 49 
5761   3115 54 53 20 59 
5761   3119 4F 55 2C 20 
5761   311D 59 4F 55 20 
5761   3121 4C 4F 53 45 
5761   3125 2E 0A 00 
5762   3128 20 57 41 52 _s34: .db " WARNINGS:\n", 0
5762   312C 4E 49 4E 47 
5762   3130 53 3A 0A 00 
5763   3134 20 57 48 45 _s35: .db " WHEN YOU ARE ONE ROOM AWAY FROM A WUMPUS OR HAZARD,\n", 0
5763   3138 4E 20 59 4F 
5763   313C 55 20 41 52 
5763   3140 45 20 4F 4E 
5763   3144 45 20 52 4F 
5763   3148 4F 4D 20 41 
5763   314C 57 41 59 20 
5763   3150 46 52 4F 4D 
5763   3154 20 41 20 57 
5763   3158 55 4D 50 55 
5763   315C 53 20 4F 52 
5763   3160 20 48 41 5A 
5763   3164 41 52 44 2C 
5763   3168 0A 00 
5764   316A 20 54 48 45 _s36: .db " THE COMPUTER SAYS:\n", 0
5764   316E 20 43 4F 4D 
5764   3172 50 55 54 45 
5764   3176 52 20 53 41 
5764   317A 59 53 3A 0A 
5764   317E 00 
5765   317F 20 57 55 4D _s37: .db " WUMPUS:  'I SMELL A WUMPUS'\n", 0
5765   3183 50 55 53 3A 
5765   3187 20 20 27 49 
5765   318B 20 53 4D 45 
5765   318F 4C 4C 20 41 
5765   3193 20 57 55 4D 
5765   3197 50 55 53 27 
5765   319B 0A 00 
5766   319D 20 42 41 54 _s38: .db " BAT   :  'BATS NEARBY'\n", 0
5766   31A1 20 20 20 3A 
5766   31A5 20 20 27 42 
5766   31A9 41 54 53 20 
5766   31AD 4E 45 41 52 
5766   31B1 42 59 27 0A 
5766   31B5 00 
5767   31B6 20 50 49 54 _s39: .db " PIT   :  'I FEEL A DRAFT'\n", 0
5767   31BA 20 20 20 3A 
5767   31BE 20 20 27 49 
5767   31C2 20 46 45 45 
5767   31C6 4C 20 41 20 
5767   31CA 44 52 41 46 
5767   31CE 54 27 0A 00 
5768   31D2 49 20 53 4D _s40: .db "I SMELL A WUMPUS!\n", 0
5768   31D6 45 4C 4C 20 
5768   31DA 41 20 57 55 
5768   31DE 4D 50 55 53 
5768   31E2 21 0A 00 
5769   31E5 49 20 46 45 _s41: .db "I FEEL A DRAFT\n", 0
5769   31E9 45 4C 20 41 
5769   31ED 20 44 52 41 
5769   31F1 46 54 0A 00 
5770   31F5 42 41 54 53 _s42: .db "BATS NEARBY!\n", 0
5770   31F9 20 4E 45 41 
5770   31FD 52 42 59 21 
5770   3201 0A 00 
5771   3203 59 4F 55 20 _s43: .db "YOU ARE IN ROOM ", 0
5771   3207 41 52 45 20 
5771   320B 49 4E 20 52 
5771   320F 4F 4F 4D 20 
5771   3213 00 
5772   3214 54 55 4E 4E _s44: .db "TUNNELS LEAD TO ", 0
5772   3218 45 4C 53 20 
5772   321C 4C 45 41 44 
5772   3220 20 54 4F 20 
5772   3224 00 
5773   3225 2C 20 00    _s45: .db ", ", 0
5774   3228 0A 0A 00    _s46: .db "\n\n", 0
5775   322B 53 48 4F 4F _s47: .db "SHOOT OR MOVE (S-M): ", 0
5775   322F 54 20 4F 52 
5775   3233 20 4D 4F 56 
5775   3237 45 20 28 53 
5775   323B 2D 4D 29 3A 
5775   323F 20 00 
5776   3241 54 53 4B 20 _s48: .db "TSK TSK TSK - WUMPUS GOT YOU!\n", 0
5776   3245 54 53 4B 20 
5776   3249 54 53 4B 20 
5776   324D 2D 20 57 55 
5776   3251 4D 50 55 53 
5776   3255 20 47 4F 54 
5776   3259 20 59 4F 55 
5776   325D 21 0A 00 
5777   3260 0A 4E 55 4D _s49: .db "\nNUMBER OF ROOMS (1-5): ", 0
5777   3264 42 45 52 20 
5777   3268 4F 46 20 52 
5777   326C 4F 4F 4D 53 
5777   3270 20 28 31 2D 
5777   3274 35 29 3A 20 
5777   3278 00 
5778   3279 52 4F 4F 4D _s50: .db "ROOM #", 0
5778   327D 20 23 00 
5779   3280 41 52 52 4F _s51: .db "ARROWS AREN'T THAT CROOKED - TRY ANOTHER ROOM\n", 0
5779   3284 57 53 20 41 
5779   3288 52 45 4E 27 
5779   328C 54 20 54 48 
5779   3290 41 54 20 43 
5779   3294 52 4F 4F 4B 
5779   3298 45 44 20 2D 
5779   329C 20 54 52 59 
5779   32A0 20 41 4E 4F 
5779   32A4 54 48 45 52 
5779   32A8 20 52 4F 4F 
5779   32AC 4D 0A 
5780   32AE 41 48 41 21 _s52: .db "AHA! YOU GOT THE WUMPUS!\n", 0
5780   32B2 20 59 4F 55 
5780   32B6 20 47 4F 54 
5780   32BA 20 54 48 45 
5780   32BE 20 57 55 4D 
5780   32C2 50 55 53 21 
5780   32C6 0A 00 
5781   32C8 4F 55 43 48 _s53: .db "OUCH! ARROW GOT YOU!\n", 0
5781   32CC 21 20 41 52 
5781   32D0 52 4F 57 20 
5781   32D4 47 4F 54 20 
5781   32D8 59 4F 55 21 
5781   32DC 0A 00 
5782   32DE 4D 49 53 53 _s54: .db "MISSED\n", 0
5782   32E2 45 44 0A 00 
5783   32E6 0A 57 48 45 _s55: .db "\nWHERE TO: ", 0
5783   32EA 52 45 20 54 
5783   32EE 4F 3A 20 00 
5784   32F2 4E 4F 54 20 _s56: .db "NOT POSSIBLE\n", 0
5784   32F6 50 4F 53 53 
5784   32FA 49 42 4C 45 
5784   32FE 0A 00 
5785   3300 5A 41 50 2D _s57: .db "ZAP--SUPER BAT SNATCH! ELSEWHEREVILLE FOR YOU!\n", 0
5785   3304 2D 53 55 50 
5785   3308 45 52 20 42 
5785   330C 41 54 20 53 
5785   3310 4E 41 54 43 
5785   3314 48 21 20 45 
5785   3318 4C 53 45 57 
5785   331C 48 45 52 45 
5785   3320 56 49 4C 4C 
5785   3324 45 20 46 4F 
5785   3328 52 20 59 4F 
5785   332C 55 21 0A 00 
5786   3330 2E 2E 2E 20 _s58: .db "... OOPS! BUMPED A WUMPUS!\n", 0
5786   3334 4F 4F 50 53 
5786   3338 21 20 42 55 
5786   333C 4D 50 45 44 
5786   3340 20 41 20 57 
5786   3344 55 4D 50 55 
5786   3348 53 21 0A 00 
5787   334C 59 59 59 59 _s59: .db "YYYYIIIIEEEE . . . FELL IN PIT\n", 0
5787   3350 49 49 49 49 
5787   3354 45 45 45 45 
5787   3358 20 2E 20 2E 
5787   335C 20 2E 20 46 
5787   3360 45 4C 4C 20 
5787   3364 49 4E 20 50 
5787   3368 49 54 0A 00 
5788   336C 48 55 4E 54 _s60: .db "HUNT THE WUMPUS\n", 0
5788   3370 20 54 48 45 
5788   3374 20 57 55 4D 
5788   3378 50 55 53 0A 
5788   337C 00 
5789   337D 57 75 6D 70 _s61: .db "Wumpus is at ", 0
5789   3381 75 73 20 69 
5789   3385 73 20 61 74 
5789   3389 20 00 
5790   338B 2C 20 70 69 _s62: .db ", pits at ", 0
5790   338F 74 73 20 61 
5790   3393 74 20 00 
5791   3396 20 26 20 00 _s63: .db " & ", 0
5792   339A 2C 20 62 61 _s64: .db ", bats at ", 0
5792   339E 74 73 20 61 
5792   33A2 74 20 00 
5793   33A5 48 45 45 20 _s65: .db "HEE HEE HEE - THE WUMPUS'LL GET YOU NEXT TIME!!\n", 0
5793   33A9 48 45 45 20 
5793   33AD 48 45 45 20 
5793   33B1 2D 20 54 48 
5793   33B5 45 20 57 55 
5793   33B9 4D 50 55 53 
5793   33BD 27 4C 4C 20 
5793   33C1 47 45 54 20 
5793   33C5 59 4F 55 20 
5793   33C9 4E 45 58 54 
5793   33CD 20 54 49 4D 
5793   33D1 45 21 21 0A 
5794   33D5 48 41 20 48 _s66: .db "HA HA HA - YOU LOSE!\n", 0
5794   33D9 41 20 48 41 
5794   33DD 20 2D 20 59 
5794   33E1 4F 55 20 4C 
5794   33E5 4F 53 45 21 
5794   33E9 0A 00 
5795   33EB             
5796   33EB ED 33       _heap_top: .dw _heap
5797   33ED 00          _heap: .db 0
5798   33EE             ; --- END DATA BLOCK
5799   33EE             
5800   33EE             .end
tasm: Number of errors = 0
