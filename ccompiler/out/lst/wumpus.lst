0001   0000             ; --- FILENAME: programs/wumpus
0002   0000             .include "lib/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; $c 
0011   0408 52 02 00      sub sp, 2
0012   040B             ;; c = getlet("INSTRUCTIONS (Y-N): "); 
0013   040B FA FF FF      lea d, [bp + -1] ; $c
0014   040E DA            push d
0015   040F 26 AF 23      mov b, __s0 ; "INSTRUCTIONS (Y-N): "
0016   0412 FD AB         swp b
0017   0414 D8            push b
0018   0415 07 85 15      call getlet
0019   0418 51 02 00      add sp, 2
0020   041B E7            pop d
0021   041C FD 43         mov [d], b
0022   041E             ;; if (c == 'Y') { 
0023   041E             _if1_cond:
0024   041E FA FF FF      lea d, [bp + -1] ; $c
0025   0421 2A            mov b, [d]
0026   0422             ; START RELATIONAL
0027   0422 D7            push a
0028   0423 11            mov a, b
0029   0424 26 59 00      mov b, $59
0030   0427 B0            cmp a, b
0031   0428 FD 71         seq ; ==
0032   042A E4            pop a
0033   042B             ; END RELATIONAL
0034   042B C0 00 00      cmp b, 0
0035   042E C6 37 04      je _if1_exit
0036   0431             _if1_true:
0037   0431             ;; print_instructions(); 
0038   0431 07 CE 15      call print_instructions
0039   0434 0A 37 04      jmp _if1_exit
0040   0437             _if1_exit:
0041   0437             ;; do {  
0042   0437             _do2_block:
0043   0437             ;; game_setup(); 
0044   0437 07 51 20      call game_setup
0045   043A             ;; game_play(); 
0046   043A 07 6B 21      call game_play
0047   043D             ;; } while (getlet("NEW GAME (Y-N): ") != 'N'); 
0048   043D             _do2_cond:
0049   043D 26 C4 23      mov b, __s1 ; "NEW GAME (Y-N): "
0050   0440 FD AB         swp b
0051   0442 D8            push b
0052   0443 07 85 15      call getlet
0053   0446 51 02 00      add sp, 2
0054   0449             ; START RELATIONAL
0055   0449 D7            push a
0056   044A 11            mov a, b
0057   044B 26 4E 00      mov b, $4e
0058   044E B0            cmp a, b
0059   044F FD 72         sneq ; !=
0060   0451 E4            pop a
0061   0452             ; END RELATIONAL
0062   0452 C0 01 00      cmp b, 1
0063   0455 C6 37 04      je _do2_block
0064   0458             _do2_exit:
0065   0458             ;; return 0; 
0066   0458 26 00 00      mov b, $0
0067   045B F9            leave
0068   045C 05 0B         syscall sys_terminate_proc
0069   045E             
0070   045E             strcpy:
0071   045E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0072   0461             ; $psrc 
0073   0461             ; $pdest 
0074   0461 52 04 00      sub sp, 4
0075   0464             ;; psrc = src; 
0076   0464 FA FF FF      lea d, [bp + -1] ; $psrc
0077   0467 DA            push d
0078   0468 FA 05 00      lea d, [bp + 5] ; $src
0079   046B 2A            mov b, [d]
0080   046C E7            pop d
0081   046D FD 43         mov [d], b
0082   046F             ;; pdest = dest; 
0083   046F FA FD FF      lea d, [bp + -3] ; $pdest
0084   0472 DA            push d
0085   0473 FA 07 00      lea d, [bp + 7] ; $dest
0086   0476 2A            mov b, [d]
0087   0477 E7            pop d
0088   0478 FD 43         mov [d], b
0089   047A             ;; while(*psrc) *pdest++ = *psrc++; 
0090   047A             _while3_cond:
0091   047A FA FF FF      lea d, [bp + -1] ; $psrc
0092   047D 2A            mov b, [d]
0093   047E 74            mov d, b
0094   047F 32            mov bl, [d]
0095   0480 A7 00         mov bh, 0
0096   0482 C0 00 00      cmp b, 0
0097   0485 C6 B1 04      je _while3_exit
0098   0488             _while3_block:
0099   0488             ;; *pdest++ = *psrc++; 
0100   0488 FA FD FF      lea d, [bp + -3] ; $pdest
0101   048B 2A            mov b, [d]
0102   048C FD 79         mov g, b
0103   048E FD 77         inc b
0104   0490 FA FD FF      lea d, [bp + -3] ; $pdest
0105   0493 FD 43         mov [d], b
0106   0495 FD 27         mov b, g
0107   0497 D8            push b
0108   0498 FA FF FF      lea d, [bp + -1] ; $psrc
0109   049B 2A            mov b, [d]
0110   049C FD 79         mov g, b
0111   049E FD 77         inc b
0112   04A0 FA FF FF      lea d, [bp + -1] ; $psrc
0113   04A3 FD 43         mov [d], b
0114   04A5 FD 27         mov b, g
0115   04A7 74            mov d, b
0116   04A8 32            mov bl, [d]
0117   04A9 A7 00         mov bh, 0
0118   04AB E7            pop d
0119   04AC FD 3E         mov [d], bl
0120   04AE 0A 7A 04      jmp _while3_cond
0121   04B1             _while3_exit:
0122   04B1             ;; *pdest = '\0'; 
0123   04B1 FA FD FF      lea d, [bp + -3] ; $pdest
0124   04B4 2A            mov b, [d]
0125   04B5 D8            push b
0126   04B6 26 00 00      mov b, $0
0127   04B9 E7            pop d
0128   04BA FD 3E         mov [d], bl
0129   04BC F9            leave
0130   04BD 09            ret
0131   04BE             
0132   04BE             strcmp:
0133   04BE F8 00 00      enter 0 ; (push bp; mov bp, sp)
0134   04C1             ;; while (*s1 && (*s1 == *s2)) { 
0135   04C1             _while4_cond:
0136   04C1 FA 07 00      lea d, [bp + 7] ; $s1
0137   04C4 2A            mov b, [d]
0138   04C5 74            mov d, b
0139   04C6 32            mov bl, [d]
0140   04C7 A7 00         mov bh, 0
0141   04C9 D7            push a
0142   04CA 11            mov a, b
0143   04CB FA 07 00      lea d, [bp + 7] ; $s1
0144   04CE 2A            mov b, [d]
0145   04CF 74            mov d, b
0146   04D0 32            mov bl, [d]
0147   04D1 A7 00         mov bh, 0
0148   04D3             ; START RELATIONAL
0149   04D3 D7            push a
0150   04D4 11            mov a, b
0151   04D5 FA 05 00      lea d, [bp + 5] ; $s2
0152   04D8 2A            mov b, [d]
0153   04D9 74            mov d, b
0154   04DA 32            mov bl, [d]
0155   04DB A7 00         mov bh, 0
0156   04DD B0            cmp a, b
0157   04DE FD 71         seq ; ==
0158   04E0 E4            pop a
0159   04E1             ; END RELATIONAL
0160   04E1 FD A7         sand a, b ; &&
0161   04E3 E4            pop a
0162   04E4 C0 00 00      cmp b, 0
0163   04E7 C6 0B 05      je _while4_exit
0164   04EA             _while4_block:
0165   04EA             ;; s1++; 
0166   04EA FA 07 00      lea d, [bp + 7] ; $s1
0167   04ED 2A            mov b, [d]
0168   04EE FD 79         mov g, b
0169   04F0 FD 77         inc b
0170   04F2 FA 07 00      lea d, [bp + 7] ; $s1
0171   04F5 FD 43         mov [d], b
0172   04F7 FD 27         mov b, g
0173   04F9             ;; s2++; 
0174   04F9 FA 05 00      lea d, [bp + 5] ; $s2
0175   04FC 2A            mov b, [d]
0176   04FD FD 79         mov g, b
0177   04FF FD 77         inc b
0178   0501 FA 05 00      lea d, [bp + 5] ; $s2
0179   0504 FD 43         mov [d], b
0180   0506 FD 27         mov b, g
0181   0508 0A C1 04      jmp _while4_cond
0182   050B             _while4_exit:
0183   050B             ;; return *s1 - *s2; 
0184   050B FA 07 00      lea d, [bp + 7] ; $s1
0185   050E 2A            mov b, [d]
0186   050F 74            mov d, b
0187   0510 32            mov bl, [d]
0188   0511 A7 00         mov bh, 0
0189   0513             ; START TERMS
0190   0513 D7            push a
0191   0514 11            mov a, b
0192   0515 FA 05 00      lea d, [bp + 5] ; $s2
0193   0518 2A            mov b, [d]
0194   0519 74            mov d, b
0195   051A 32            mov bl, [d]
0196   051B A7 00         mov bh, 0
0197   051D 60            sub a, b
0198   051E 27            mov b, a
0199   051F E4            pop a
0200   0520             ; END TERMS
0201   0520 F9            leave
0202   0521 09            ret
0203   0522             
0204   0522             strcat:
0205   0522 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0206   0525             ; $dest_len 
0207   0525             ; $i 
0208   0525 52 04 00      sub sp, 4
0209   0528             ;; dest_len = strlen(dest); 
0210   0528 FA FF FF      lea d, [bp + -1] ; $dest_len
0211   052B DA            push d
0212   052C FA 07 00      lea d, [bp + 7] ; $dest
0213   052F 2A            mov b, [d]
0214   0530 FD AB         swp b
0215   0532 D8            push b
0216   0533 07 D8 05      call strlen
0217   0536 51 02 00      add sp, 2
0218   0539 E7            pop d
0219   053A FD 43         mov [d], b
0220   053C             ;; for (i = 0; src[i] != 0; i=i+1) { 
0221   053C             _for5_init:
0222   053C FA FD FF      lea d, [bp + -3] ; $i
0223   053F DA            push d
0224   0540 26 00 00      mov b, $0
0225   0543 E7            pop d
0226   0544 FD 43         mov [d], b
0227   0546             _for5_cond:
0228   0546 FA 05 00      lea d, [bp + 5] ; $src
0229   0549 FD 2A         mov d, [d]
0230   054B D7            push a
0231   054C DA            push d
0232   054D FA FD FF      lea d, [bp + -3] ; $i
0233   0550 2A            mov b, [d]
0234   0551 E7            pop d
0235   0552 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0236   0556 E4            pop a
0237   0557 32            mov bl, [d]
0238   0558 A7 00         mov bh, 0
0239   055A             ; START RELATIONAL
0240   055A D7            push a
0241   055B 11            mov a, b
0242   055C 26 00 00      mov b, $0
0243   055F B0            cmp a, b
0244   0560 FD 72         sneq ; !=
0245   0562 E4            pop a
0246   0563             ; END RELATIONAL
0247   0563 C0 00 00      cmp b, 0
0248   0566 C6 B1 05      je _for5_exit
0249   0569             _for5_block:
0250   0569             ;; dest[dest_len + i] = src[i]; 
0251   0569 FA 07 00      lea d, [bp + 7] ; $dest
0252   056C FD 2A         mov d, [d]
0253   056E D7            push a
0254   056F DA            push d
0255   0570 FA FF FF      lea d, [bp + -1] ; $dest_len
0256   0573 2A            mov b, [d]
0257   0574             ; START TERMS
0258   0574 D7            push a
0259   0575 11            mov a, b
0260   0576 FA FD FF      lea d, [bp + -3] ; $i
0261   0579 2A            mov b, [d]
0262   057A 54            add a, b
0263   057B 27            mov b, a
0264   057C E4            pop a
0265   057D             ; END TERMS
0266   057D E7            pop d
0267   057E FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0268   0582 E4            pop a
0269   0583 DA            push d
0270   0584 FA 05 00      lea d, [bp + 5] ; $src
0271   0587 FD 2A         mov d, [d]
0272   0589 D7            push a
0273   058A DA            push d
0274   058B FA FD FF      lea d, [bp + -3] ; $i
0275   058E 2A            mov b, [d]
0276   058F E7            pop d
0277   0590 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0278   0594 E4            pop a
0279   0595 32            mov bl, [d]
0280   0596 A7 00         mov bh, 0
0281   0598 E7            pop d
0282   0599 FD 3E         mov [d], bl
0283   059B             _for5_update:
0284   059B FA FD FF      lea d, [bp + -3] ; $i
0285   059E DA            push d
0286   059F FA FD FF      lea d, [bp + -3] ; $i
0287   05A2 2A            mov b, [d]
0288   05A3             ; START TERMS
0289   05A3 D7            push a
0290   05A4 11            mov a, b
0291   05A5 26 01 00      mov b, $1
0292   05A8 54            add a, b
0293   05A9 27            mov b, a
0294   05AA E4            pop a
0295   05AB             ; END TERMS
0296   05AB E7            pop d
0297   05AC FD 43         mov [d], b
0298   05AE 0A 46 05      jmp _for5_cond
0299   05B1             _for5_exit:
0300   05B1             ;; dest[dest_len + i] = 0; 
0301   05B1 FA 07 00      lea d, [bp + 7] ; $dest
0302   05B4 FD 2A         mov d, [d]
0303   05B6 D7            push a
0304   05B7 DA            push d
0305   05B8 FA FF FF      lea d, [bp + -1] ; $dest_len
0306   05BB 2A            mov b, [d]
0307   05BC             ; START TERMS
0308   05BC D7            push a
0309   05BD 11            mov a, b
0310   05BE FA FD FF      lea d, [bp + -3] ; $i
0311   05C1 2A            mov b, [d]
0312   05C2 54            add a, b
0313   05C3 27            mov b, a
0314   05C4 E4            pop a
0315   05C5             ; END TERMS
0316   05C5 E7            pop d
0317   05C6 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0318   05CA E4            pop a
0319   05CB DA            push d
0320   05CC 26 00 00      mov b, $0
0321   05CF E7            pop d
0322   05D0 FD 3E         mov [d], bl
0323   05D2             ;; return dest; 
0324   05D2 FA 07 00      lea d, [bp + 7] ; $dest
0325   05D5 2A            mov b, [d]
0326   05D6 F9            leave
0327   05D7 09            ret
0328   05D8             
0329   05D8             strlen:
0330   05D8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0331   05DB             ; $length 
0332   05DB 52 02 00      sub sp, 2
0333   05DE             ;; length = 0; 
0334   05DE FA FF FF      lea d, [bp + -1] ; $length
0335   05E1 DA            push d
0336   05E2 26 00 00      mov b, $0
0337   05E5 E7            pop d
0338   05E6 FD 43         mov [d], b
0339   05E8             ;; while (str[length] != 0) { 
0340   05E8             _while6_cond:
0341   05E8 FA 05 00      lea d, [bp + 5] ; $str
0342   05EB FD 2A         mov d, [d]
0343   05ED D7            push a
0344   05EE DA            push d
0345   05EF FA FF FF      lea d, [bp + -1] ; $length
0346   05F2 2A            mov b, [d]
0347   05F3 E7            pop d
0348   05F4 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0349   05F8 E4            pop a
0350   05F9 32            mov bl, [d]
0351   05FA A7 00         mov bh, 0
0352   05FC             ; START RELATIONAL
0353   05FC D7            push a
0354   05FD 11            mov a, b
0355   05FE 26 00 00      mov b, $0
0356   0601 B0            cmp a, b
0357   0602 FD 72         sneq ; !=
0358   0604 E4            pop a
0359   0605             ; END RELATIONAL
0360   0605 C0 00 00      cmp b, 0
0361   0608 C6 1D 06      je _while6_exit
0362   060B             _while6_block:
0363   060B             ;; length++; 
0364   060B FA FF FF      lea d, [bp + -1] ; $length
0365   060E 2A            mov b, [d]
0366   060F FD 79         mov g, b
0367   0611 FD 77         inc b
0368   0613 FA FF FF      lea d, [bp + -1] ; $length
0369   0616 FD 43         mov [d], b
0370   0618 FD 27         mov b, g
0371   061A 0A E8 05      jmp _while6_cond
0372   061D             _while6_exit:
0373   061D             ;; return length; 
0374   061D FA FF FF      lea d, [bp + -1] ; $length
0375   0620 2A            mov b, [d]
0376   0621 F9            leave
0377   0622 09            ret
0378   0623             
0379   0623             va_arg:
0380   0623 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0381   0626             ; $val 
0382   0626 52 02 00      sub sp, 2
0383   0629             ;; if(size == 1){ 
0384   0629             _if7_cond:
0385   0629 FA 05 00      lea d, [bp + 5] ; $size
0386   062C 2A            mov b, [d]
0387   062D             ; START RELATIONAL
0388   062D D7            push a
0389   062E 11            mov a, b
0390   062F 26 01 00      mov b, $1
0391   0632 B0            cmp a, b
0392   0633 FD 71         seq ; ==
0393   0635 E4            pop a
0394   0636             ; END RELATIONAL
0395   0636 C0 00 00      cmp b, 0
0396   0639 C6 55 06      je _if7_else
0397   063C             _if7_true:
0398   063C             ;; val = *(char*)arg->p; 
0399   063C FA FF FF      lea d, [bp + -1] ; $val
0400   063F DA            push d
0401   0640 FA 07 00      lea d, [bp + 7] ; $arg
0402   0643 FD 2A         mov d, [d]
0403   0645 58 00 00      add d, 0
0404   0648 FD 14         clb
0405   064A 2A            mov b, [d]
0406   064B 74            mov d, b
0407   064C 32            mov bl, [d]
0408   064D A7 00         mov bh, 0
0409   064F E7            pop d
0410   0650 FD 43         mov [d], b
0411   0652 0A 8B 06      jmp _if7_exit
0412   0655             _if7_else:
0413   0655             ;; if(size == 2){ 
0414   0655             _if8_cond:
0415   0655 FA 05 00      lea d, [bp + 5] ; $size
0416   0658 2A            mov b, [d]
0417   0659             ; START RELATIONAL
0418   0659 D7            push a
0419   065A 11            mov a, b
0420   065B 26 02 00      mov b, $2
0421   065E B0            cmp a, b
0422   065F FD 71         seq ; ==
0423   0661 E4            pop a
0424   0662             ; END RELATIONAL
0425   0662 C0 00 00      cmp b, 0
0426   0665 C6 7F 06      je _if8_else
0427   0668             _if8_true:
0428   0668             ;; val = *(int*)arg->p; 
0429   0668 FA FF FF      lea d, [bp + -1] ; $val
0430   066B DA            push d
0431   066C FA 07 00      lea d, [bp + 7] ; $arg
0432   066F FD 2A         mov d, [d]
0433   0671 58 00 00      add d, 0
0434   0674 FD 14         clb
0435   0676 2A            mov b, [d]
0436   0677 74            mov d, b
0437   0678 2A            mov b, [d]
0438   0679 E7            pop d
0439   067A FD 43         mov [d], b
0440   067C 0A 8B 06      jmp _if8_exit
0441   067F             _if8_else:
0442   067F             ;; print("Unknown type size in va_arg() call. Size needs to be either 1 or 2."); 
0443   067F 26 D5 23      mov b, __s2 ; "Unknown type size in va_arg() call. Size needs to be either 1 or 2."
0444   0682 FD AB         swp b
0445   0684 D8            push b
0446   0685 07 ED 0C      call print
0447   0688 51 02 00      add sp, 2
0448   068B             _if8_exit:
0449   068B             _if7_exit:
0450   068B             ;; arg->p = arg->p + size; 
0451   068B FA 07 00      lea d, [bp + 7] ; $arg
0452   068E FD 2A         mov d, [d]
0453   0690 58 00 00      add d, 0
0454   0693 FD 14         clb
0455   0695 DA            push d
0456   0696 FA 07 00      lea d, [bp + 7] ; $arg
0457   0699 FD 2A         mov d, [d]
0458   069B 58 00 00      add d, 0
0459   069E FD 14         clb
0460   06A0 2A            mov b, [d]
0461   06A1             ; START TERMS
0462   06A1 D7            push a
0463   06A2 11            mov a, b
0464   06A3 FA 05 00      lea d, [bp + 5] ; $size
0465   06A6 2A            mov b, [d]
0466   06A7 54            add a, b
0467   06A8 27            mov b, a
0468   06A9 E4            pop a
0469   06AA             ; END TERMS
0470   06AA E7            pop d
0471   06AB FD 43         mov [d], b
0472   06AD             ;; return val; 
0473   06AD FA FF FF      lea d, [bp + -1] ; $val
0474   06B0 2A            mov b, [d]
0475   06B1 F9            leave
0476   06B2 09            ret
0477   06B3             
0478   06B3             printf:
0479   06B3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0480   06B6             ; $p 
0481   06B6             ; $fp 
0482   06B6             ; $i 
0483   06B6 52 06 00      sub sp, 6
0484   06B9             ;; fp = format; 
0485   06B9 FA FD FF      lea d, [bp + -3] ; $fp
0486   06BC DA            push d
0487   06BD FA 05 00      lea d, [bp + 5] ; $format
0488   06C0 2A            mov b, [d]
0489   06C1 E7            pop d
0490   06C2 FD 43         mov [d], b
0491   06C4             ;; p = &format; 
0492   06C4 FA FF FF      lea d, [bp + -1] ; $p
0493   06C7 DA            push d
0494   06C8 FA 05 00      lea d, [bp + 5] ; $format
0495   06CB 2D            mov b, d
0496   06CC E7            pop d
0497   06CD FD 43         mov [d], b
0498   06CF             ;; for(;;){ 
0499   06CF             _for9_init:
0500   06CF             _for9_cond:
0501   06CF             _for9_block:
0502   06CF             ;; if(!*fp) break; 
0503   06CF             _if10_cond:
0504   06CF FA FD FF      lea d, [bp + -3] ; $fp
0505   06D2 2A            mov b, [d]
0506   06D3 74            mov d, b
0507   06D4 32            mov bl, [d]
0508   06D5 A7 00         mov bh, 0
0509   06D7 C0 00 00      cmp b, 0
0510   06DA FD 71         seq ; !
0511   06DC C0 00 00      cmp b, 0
0512   06DF C6 E8 06      je _if10_exit
0513   06E2             _if10_true:
0514   06E2             ;; break; 
0515   06E2 0A 32 08      jmp _for9_exit ; for break
0516   06E5 0A E8 06      jmp _if10_exit
0517   06E8             _if10_exit:
0518   06E8             ;; if(*fp == '%'){ 
0519   06E8             _if11_cond:
0520   06E8 FA FD FF      lea d, [bp + -3] ; $fp
0521   06EB 2A            mov b, [d]
0522   06EC 74            mov d, b
0523   06ED 32            mov bl, [d]
0524   06EE A7 00         mov bh, 0
0525   06F0             ; START RELATIONAL
0526   06F0 D7            push a
0527   06F1 11            mov a, b
0528   06F2 26 25 00      mov b, $25
0529   06F5 B0            cmp a, b
0530   06F6 FD 71         seq ; ==
0531   06F8 E4            pop a
0532   06F9             ; END RELATIONAL
0533   06F9 C0 00 00      cmp b, 0
0534   06FC C6 11 08      je _if11_else
0535   06FF             _if11_true:
0536   06FF             ;; fp++; 
0537   06FF FA FD FF      lea d, [bp + -3] ; $fp
0538   0702 2A            mov b, [d]
0539   0703 FD 79         mov g, b
0540   0705 FD 77         inc b
0541   0707 FA FD FF      lea d, [bp + -3] ; $fp
0542   070A FD 43         mov [d], b
0543   070C FD 27         mov b, g
0544   070E             ;; switch(*fp){ 
0545   070E             _switch12_expr:
0546   070E FA FD FF      lea d, [bp + -3] ; $fp
0547   0711 2A            mov b, [d]
0548   0712 74            mov d, b
0549   0713 32            mov bl, [d]
0550   0714 A7 00         mov bh, 0
0551   0716             _switch12_comparisons:
0552   0716 C1 64         cmp bl, $64
0553   0718 C6 3A 07      je _switch12_case0
0554   071B C1 69         cmp bl, $69
0555   071D C6 3A 07      je _switch12_case1
0556   0720 C1 75         cmp bl, $75
0557   0722 C6 5F 07      je _switch12_case2
0558   0725 C1 78         cmp bl, $78
0559   0727 C6 84 07      je _switch12_case3
0560   072A C1 63         cmp bl, $63
0561   072C C6 A9 07      je _switch12_case4
0562   072F C1 73         cmp bl, $73
0563   0731 C6 CE 07      je _switch12_case5
0564   0734 0A F3 07      jmp _switch12_default
0565   0737 0A FF 07      jmp _switch12_exit
0566   073A             _switch12_case0:
0567   073A             _switch12_case1:
0568   073A             ;; p = p - 2; 
0569   073A FA FF FF      lea d, [bp + -1] ; $p
0570   073D DA            push d
0571   073E FA FF FF      lea d, [bp + -1] ; $p
0572   0741 2A            mov b, [d]
0573   0742             ; START TERMS
0574   0742 D7            push a
0575   0743 11            mov a, b
0576   0744 26 02 00      mov b, $2
0577   0747 60            sub a, b
0578   0748 27            mov b, a
0579   0749 E4            pop a
0580   074A             ; END TERMS
0581   074A E7            pop d
0582   074B FD 43         mov [d], b
0583   074D             ;; prints(*(int*)p); 
0584   074D FA FF FF      lea d, [bp + -1] ; $p
0585   0750 2A            mov b, [d]
0586   0751 74            mov d, b
0587   0752 2A            mov b, [d]
0588   0753 FD AB         swp b
0589   0755 D8            push b
0590   0756 07 C4 0A      call prints
0591   0759 51 02 00      add sp, 2
0592   075C             ;; break; 
0593   075C 0A FF 07      jmp _switch12_exit ; case break
0594   075F             _switch12_case2:
0595   075F             ;; p = p - 2; 
0596   075F FA FF FF      lea d, [bp + -1] ; $p
0597   0762 DA            push d
0598   0763 FA FF FF      lea d, [bp + -1] ; $p
0599   0766 2A            mov b, [d]
0600   0767             ; START TERMS
0601   0767 D7            push a
0602   0768 11            mov a, b
0603   0769 26 02 00      mov b, $2
0604   076C 60            sub a, b
0605   076D 27            mov b, a
0606   076E E4            pop a
0607   076F             ; END TERMS
0608   076F E7            pop d
0609   0770 FD 43         mov [d], b
0610   0772             ;; printu(*(unsigned int*)p); 
0611   0772 FA FF FF      lea d, [bp + -1] ; $p
0612   0775 2A            mov b, [d]
0613   0776 74            mov d, b
0614   0777 2A            mov b, [d]
0615   0778 FD AB         swp b
0616   077A D8            push b
0617   077B 07 B9 0B      call printu
0618   077E 51 02 00      add sp, 2
0619   0781             ;; break; 
0620   0781 0A FF 07      jmp _switch12_exit ; case break
0621   0784             _switch12_case3:
0622   0784             ;; p = p - 2; 
0623   0784 FA FF FF      lea d, [bp + -1] ; $p
0624   0787 DA            push d
0625   0788 FA FF FF      lea d, [bp + -1] ; $p
0626   078B 2A            mov b, [d]
0627   078C             ; START TERMS
0628   078C D7            push a
0629   078D 11            mov a, b
0630   078E 26 02 00      mov b, $2
0631   0791 60            sub a, b
0632   0792 27            mov b, a
0633   0793 E4            pop a
0634   0794             ; END TERMS
0635   0794 E7            pop d
0636   0795 FD 43         mov [d], b
0637   0797             ;; printx16(*(unsigned int*)p); 
0638   0797 FA FF FF      lea d, [bp + -1] ; $p
0639   079A 2A            mov b, [d]
0640   079B 74            mov d, b
0641   079C 2A            mov b, [d]
0642   079D FD AB         swp b
0643   079F D8            push b
0644   07A0 07 34 08      call printx16
0645   07A3 51 02 00      add sp, 2
0646   07A6             ;; break; 
0647   07A6 0A FF 07      jmp _switch12_exit ; case break
0648   07A9             _switch12_case4:
0649   07A9             ;; p = p - 2; 
0650   07A9 FA FF FF      lea d, [bp + -1] ; $p
0651   07AC DA            push d
0652   07AD FA FF FF      lea d, [bp + -1] ; $p
0653   07B0 2A            mov b, [d]
0654   07B1             ; START TERMS
0655   07B1 D7            push a
0656   07B2 11            mov a, b
0657   07B3 26 02 00      mov b, $2
0658   07B6 60            sub a, b
0659   07B7 27            mov b, a
0660   07B8 E4            pop a
0661   07B9             ; END TERMS
0662   07B9 E7            pop d
0663   07BA FD 43         mov [d], b
0664   07BC             ;; putchar(*(char*)p); 
0665   07BC FA FF FF      lea d, [bp + -1] ; $p
0666   07BF 2A            mov b, [d]
0667   07C0 74            mov d, b
0668   07C1 32            mov bl, [d]
0669   07C2 A7 00         mov bh, 0
0670   07C4 DD            push bl
0671   07C5 07 A5 0C      call putchar
0672   07C8 51 01 00      add sp, 1
0673   07CB             ;; break; 
0674   07CB 0A FF 07      jmp _switch12_exit ; case break
0675   07CE             _switch12_case5:
0676   07CE             ;; p = p - 2; 
0677   07CE FA FF FF      lea d, [bp + -1] ; $p
0678   07D1 DA            push d
0679   07D2 FA FF FF      lea d, [bp + -1] ; $p
0680   07D5 2A            mov b, [d]
0681   07D6             ; START TERMS
0682   07D6 D7            push a
0683   07D7 11            mov a, b
0684   07D8 26 02 00      mov b, $2
0685   07DB 60            sub a, b
0686   07DC 27            mov b, a
0687   07DD E4            pop a
0688   07DE             ; END TERMS
0689   07DE E7            pop d
0690   07DF FD 43         mov [d], b
0691   07E1             ;; print(*(char**)p); 
0692   07E1 FA FF FF      lea d, [bp + -1] ; $p
0693   07E4 2A            mov b, [d]
0694   07E5 74            mov d, b
0695   07E6 2A            mov b, [d]
0696   07E7 FD AB         swp b
0697   07E9 D8            push b
0698   07EA 07 ED 0C      call print
0699   07ED 51 02 00      add sp, 2
0700   07F0             ;; break; 
0701   07F0 0A FF 07      jmp _switch12_exit ; case break
0702   07F3             _switch12_default:
0703   07F3             ;; print("Error: Unknown argument type.\n"); 
0704   07F3 26 19 24      mov b, __s3 ; "Error: Unknown argument type.\n"
0705   07F6 FD AB         swp b
0706   07F8 D8            push b
0707   07F9 07 ED 0C      call print
0708   07FC 51 02 00      add sp, 2
0709   07FF             _switch12_exit:
0710   07FF             ;; fp++; 
0711   07FF FA FD FF      lea d, [bp + -3] ; $fp
0712   0802 2A            mov b, [d]
0713   0803 FD 79         mov g, b
0714   0805 FD 77         inc b
0715   0807 FA FD FF      lea d, [bp + -3] ; $fp
0716   080A FD 43         mov [d], b
0717   080C FD 27         mov b, g
0718   080E 0A 2F 08      jmp _if11_exit
0719   0811             _if11_else:
0720   0811             ;; putchar(*fp); 
0721   0811 FA FD FF      lea d, [bp + -3] ; $fp
0722   0814 2A            mov b, [d]
0723   0815 74            mov d, b
0724   0816 32            mov bl, [d]
0725   0817 A7 00         mov bh, 0
0726   0819 DD            push bl
0727   081A 07 A5 0C      call putchar
0728   081D 51 01 00      add sp, 1
0729   0820             ;; fp++; 
0730   0820 FA FD FF      lea d, [bp + -3] ; $fp
0731   0823 2A            mov b, [d]
0732   0824 FD 79         mov g, b
0733   0826 FD 77         inc b
0734   0828 FA FD FF      lea d, [bp + -3] ; $fp
0735   082B FD 43         mov [d], b
0736   082D FD 27         mov b, g
0737   082F             _if11_exit:
0738   082F             _for9_update:
0739   082F 0A CF 06      jmp _for9_cond
0740   0832             _for9_exit:
0741   0832 F9            leave
0742   0833 09            ret
0743   0834             
0744   0834             printx16:
0745   0834 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0746   0837             
0747   0837             ; --- BEGIN INLINE ASM BLOCK
0748   0837 FA 05 00      lea d, [bp + 5] ; $hex
0749   083A 2A            mov b, [d]
0750   083B 07 C4 10      call print_u16x
0751   083E             ; --- END INLINE ASM BLOCK
0752   083E             
0753   083E F9            leave
0754   083F 09            ret
0755   0840             
0756   0840             printx8:
0757   0840 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0758   0843             
0759   0843             ; --- BEGIN INLINE ASM BLOCK
0760   0843 FA 05 00      lea d, [bp + 5] ; $hex
0761   0846 32            mov bl, [d]
0762   0847 07 08 11      call print_u8x
0763   084A             ; --- END INLINE ASM BLOCK
0764   084A             
0765   084A F9            leave
0766   084B 09            ret
0767   084C             
0768   084C             hex_to_int:
0769   084C F8 00 00      enter 0 ; (push bp; mov bp, sp)
0770   084F             ; $value 
0771   084F 10 00 00      mov a, $0
0772   0852 45 FF FF      mov [bp + -1], a
0773   0855             ; $i 
0774   0855             ; $hex_char 
0775   0855             ; $len 
0776   0855 52 07 00      sub sp, 7
0777   0858             ;; len = strlen(hex_string); 
0778   0858 FA FA FF      lea d, [bp + -6] ; $len
0779   085B DA            push d
0780   085C FA 05 00      lea d, [bp + 5] ; $hex_string
0781   085F 2A            mov b, [d]
0782   0860 FD AB         swp b
0783   0862 D8            push b
0784   0863 07 D8 05      call strlen
0785   0866 51 02 00      add sp, 2
0786   0869 E7            pop d
0787   086A FD 43         mov [d], b
0788   086C             ;; for (i = 0; i < len; i++) { 
0789   086C             _for13_init:
0790   086C FA FD FF      lea d, [bp + -3] ; $i
0791   086F DA            push d
0792   0870 26 00 00      mov b, $0
0793   0873 E7            pop d
0794   0874 FD 43         mov [d], b
0795   0876             _for13_cond:
0796   0876 FA FD FF      lea d, [bp + -3] ; $i
0797   0879 2A            mov b, [d]
0798   087A             ; START RELATIONAL
0799   087A D7            push a
0800   087B 11            mov a, b
0801   087C FA FA FF      lea d, [bp + -6] ; $len
0802   087F 2A            mov b, [d]
0803   0880 B0            cmp a, b
0804   0881 FD 73         slt ; < 
0805   0883 E4            pop a
0806   0884             ; END RELATIONAL
0807   0884 C0 00 00      cmp b, 0
0808   0887 C6 8C 09      je _for13_exit
0809   088A             _for13_block:
0810   088A             ;; hex_char = hex_string[i]; 
0811   088A FA FC FF      lea d, [bp + -4] ; $hex_char
0812   088D DA            push d
0813   088E FA 05 00      lea d, [bp + 5] ; $hex_string
0814   0891 FD 2A         mov d, [d]
0815   0893 D7            push a
0816   0894 DA            push d
0817   0895 FA FD FF      lea d, [bp + -3] ; $i
0818   0898 2A            mov b, [d]
0819   0899 E7            pop d
0820   089A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0821   089E E4            pop a
0822   089F 32            mov bl, [d]
0823   08A0 A7 00         mov bh, 0
0824   08A2 E7            pop d
0825   08A3 FD 3E         mov [d], bl
0826   08A5             ;; if (hex_char >= 'a' && hex_char <= 'f')  
0827   08A5             _if14_cond:
0828   08A5 FA FC FF      lea d, [bp + -4] ; $hex_char
0829   08A8 32            mov bl, [d]
0830   08A9 A7 00         mov bh, 0
0831   08AB             ; START RELATIONAL
0832   08AB D7            push a
0833   08AC 11            mov a, b
0834   08AD 26 61 00      mov b, $61
0835   08B0 B0            cmp a, b
0836   08B1 FD 80         sge ; >=
0837   08B3 E4            pop a
0838   08B4             ; END RELATIONAL
0839   08B4 D7            push a
0840   08B5 11            mov a, b
0841   08B6 FA FC FF      lea d, [bp + -4] ; $hex_char
0842   08B9 32            mov bl, [d]
0843   08BA A7 00         mov bh, 0
0844   08BC             ; START RELATIONAL
0845   08BC D7            push a
0846   08BD 11            mov a, b
0847   08BE 26 66 00      mov b, $66
0848   08C1 B0            cmp a, b
0849   08C2 FD 74         sle ; <=
0850   08C4 E4            pop a
0851   08C5             ; END RELATIONAL
0852   08C5 FD A7         sand a, b ; &&
0853   08C7 E4            pop a
0854   08C8 C0 00 00      cmp b, 0
0855   08CB C6 FC 08      je _if14_else
0856   08CE             _if14_true:
0857   08CE             ;; value = (value * 16) + (hex_char - 'a' + 10); 
0858   08CE FA FF FF      lea d, [bp + -1] ; $value
0859   08D1 DA            push d
0860   08D2 FA FF FF      lea d, [bp + -1] ; $value
0861   08D5 2A            mov b, [d]
0862   08D6             ; START FACTORS
0863   08D6 D7            push a
0864   08D7 11            mov a, b
0865   08D8 26 10 00      mov b, $10
0866   08DB AC            mul a, b ; *
0867   08DC 11            mov a, b
0868   08DD 27            mov b, a
0869   08DE E4            pop a
0870   08DF             ; END FACTORS
0871   08DF             ; START TERMS
0872   08DF D7            push a
0873   08E0 11            mov a, b
0874   08E1 FA FC FF      lea d, [bp + -4] ; $hex_char
0875   08E4 32            mov bl, [d]
0876   08E5 A7 00         mov bh, 0
0877   08E7             ; START TERMS
0878   08E7 D7            push a
0879   08E8 11            mov a, b
0880   08E9 26 61 00      mov b, $61
0881   08EC 60            sub a, b
0882   08ED 26 0A 00      mov b, $a
0883   08F0 54            add a, b
0884   08F1 27            mov b, a
0885   08F2 E4            pop a
0886   08F3             ; END TERMS
0887   08F3 54            add a, b
0888   08F4 27            mov b, a
0889   08F5 E4            pop a
0890   08F6             ; END TERMS
0891   08F6 E7            pop d
0892   08F7 FD 43         mov [d], b
0893   08F9 0A 7A 09      jmp _if14_exit
0894   08FC             _if14_else:
0895   08FC             ;; if (hex_char >= 'A' && hex_char <= 'F')  
0896   08FC             _if15_cond:
0897   08FC FA FC FF      lea d, [bp + -4] ; $hex_char
0898   08FF 32            mov bl, [d]
0899   0900 A7 00         mov bh, 0
0900   0902             ; START RELATIONAL
0901   0902 D7            push a
0902   0903 11            mov a, b
0903   0904 26 41 00      mov b, $41
0904   0907 B0            cmp a, b
0905   0908 FD 80         sge ; >=
0906   090A E4            pop a
0907   090B             ; END RELATIONAL
0908   090B D7            push a
0909   090C 11            mov a, b
0910   090D FA FC FF      lea d, [bp + -4] ; $hex_char
0911   0910 32            mov bl, [d]
0912   0911 A7 00         mov bh, 0
0913   0913             ; START RELATIONAL
0914   0913 D7            push a
0915   0914 11            mov a, b
0916   0915 26 46 00      mov b, $46
0917   0918 B0            cmp a, b
0918   0919 FD 74         sle ; <=
0919   091B E4            pop a
0920   091C             ; END RELATIONAL
0921   091C FD A7         sand a, b ; &&
0922   091E E4            pop a
0923   091F C0 00 00      cmp b, 0
0924   0922 C6 53 09      je _if15_else
0925   0925             _if15_true:
0926   0925             ;; value = (value * 16) + (hex_char - 'A' + 10); 
0927   0925 FA FF FF      lea d, [bp + -1] ; $value
0928   0928 DA            push d
0929   0929 FA FF FF      lea d, [bp + -1] ; $value
0930   092C 2A            mov b, [d]
0931   092D             ; START FACTORS
0932   092D D7            push a
0933   092E 11            mov a, b
0934   092F 26 10 00      mov b, $10
0935   0932 AC            mul a, b ; *
0936   0933 11            mov a, b
0937   0934 27            mov b, a
0938   0935 E4            pop a
0939   0936             ; END FACTORS
0940   0936             ; START TERMS
0941   0936 D7            push a
0942   0937 11            mov a, b
0943   0938 FA FC FF      lea d, [bp + -4] ; $hex_char
0944   093B 32            mov bl, [d]
0945   093C A7 00         mov bh, 0
0946   093E             ; START TERMS
0947   093E D7            push a
0948   093F 11            mov a, b
0949   0940 26 41 00      mov b, $41
0950   0943 60            sub a, b
0951   0944 26 0A 00      mov b, $a
0952   0947 54            add a, b
0953   0948 27            mov b, a
0954   0949 E4            pop a
0955   094A             ; END TERMS
0956   094A 54            add a, b
0957   094B 27            mov b, a
0958   094C E4            pop a
0959   094D             ; END TERMS
0960   094D E7            pop d
0961   094E FD 43         mov [d], b
0962   0950 0A 7A 09      jmp _if15_exit
0963   0953             _if15_else:
0964   0953             ;; value = (value * 16) + (hex_char - '0'); 
0965   0953 FA FF FF      lea d, [bp + -1] ; $value
0966   0956 DA            push d
0967   0957 FA FF FF      lea d, [bp + -1] ; $value
0968   095A 2A            mov b, [d]
0969   095B             ; START FACTORS
0970   095B D7            push a
0971   095C 11            mov a, b
0972   095D 26 10 00      mov b, $10
0973   0960 AC            mul a, b ; *
0974   0961 11            mov a, b
0975   0962 27            mov b, a
0976   0963 E4            pop a
0977   0964             ; END FACTORS
0978   0964             ; START TERMS
0979   0964 D7            push a
0980   0965 11            mov a, b
0981   0966 FA FC FF      lea d, [bp + -4] ; $hex_char
0982   0969 32            mov bl, [d]
0983   096A A7 00         mov bh, 0
0984   096C             ; START TERMS
0985   096C D7            push a
0986   096D 11            mov a, b
0987   096E 26 30 00      mov b, $30
0988   0971 60            sub a, b
0989   0972 27            mov b, a
0990   0973 E4            pop a
0991   0974             ; END TERMS
0992   0974 54            add a, b
0993   0975 27            mov b, a
0994   0976 E4            pop a
0995   0977             ; END TERMS
0996   0977 E7            pop d
0997   0978 FD 43         mov [d], b
0998   097A             _if15_exit:
0999   097A             _if14_exit:
1000   097A             _for13_update:
1001   097A FA FD FF      lea d, [bp + -3] ; $i
1002   097D 2A            mov b, [d]
1003   097E FD 79         mov g, b
1004   0980 FD 77         inc b
1005   0982 FA FD FF      lea d, [bp + -3] ; $i
1006   0985 FD 43         mov [d], b
1007   0987 FD 27         mov b, g
1008   0989 0A 76 08      jmp _for13_cond
1009   098C             _for13_exit:
1010   098C             ;; return value; 
1011   098C FA FF FF      lea d, [bp + -1] ; $value
1012   098F 2A            mov b, [d]
1013   0990 F9            leave
1014   0991 09            ret
1015   0992             
1016   0992             atoi:
1017   0992 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1018   0995             ; $result 
1019   0995 10 00 00      mov a, $0
1020   0998 45 FF FF      mov [bp + -1], a
1021   099B             ; $sign 
1022   099B 10 01 00      mov a, $1
1023   099E 45 FD FF      mov [bp + -3], a
1024   09A1 52 04 00      sub sp, 4
1025   09A4             ;; while (*str == ' ') str++; 
1026   09A4             _while16_cond:
1027   09A4 FA 05 00      lea d, [bp + 5] ; $str
1028   09A7 2A            mov b, [d]
1029   09A8 74            mov d, b
1030   09A9 32            mov bl, [d]
1031   09AA A7 00         mov bh, 0
1032   09AC             ; START RELATIONAL
1033   09AC D7            push a
1034   09AD 11            mov a, b
1035   09AE 26 20 00      mov b, $20
1036   09B1 B0            cmp a, b
1037   09B2 FD 71         seq ; ==
1038   09B4 E4            pop a
1039   09B5             ; END RELATIONAL
1040   09B5 C0 00 00      cmp b, 0
1041   09B8 C6 CD 09      je _while16_exit
1042   09BB             _while16_block:
1043   09BB             ;; str++; 
1044   09BB FA 05 00      lea d, [bp + 5] ; $str
1045   09BE 2A            mov b, [d]
1046   09BF FD 79         mov g, b
1047   09C1 FD 77         inc b
1048   09C3 FA 05 00      lea d, [bp + 5] ; $str
1049   09C6 FD 43         mov [d], b
1050   09C8 FD 27         mov b, g
1051   09CA 0A A4 09      jmp _while16_cond
1052   09CD             _while16_exit:
1053   09CD             ;; if (*str == '-' || *str == '+') { 
1054   09CD             _if17_cond:
1055   09CD FA 05 00      lea d, [bp + 5] ; $str
1056   09D0 2A            mov b, [d]
1057   09D1 74            mov d, b
1058   09D2 32            mov bl, [d]
1059   09D3 A7 00         mov bh, 0
1060   09D5             ; START RELATIONAL
1061   09D5 D7            push a
1062   09D6 11            mov a, b
1063   09D7 26 2D 00      mov b, $2d
1064   09DA B0            cmp a, b
1065   09DB FD 71         seq ; ==
1066   09DD E4            pop a
1067   09DE             ; END RELATIONAL
1068   09DE D7            push a
1069   09DF 11            mov a, b
1070   09E0 FA 05 00      lea d, [bp + 5] ; $str
1071   09E3 2A            mov b, [d]
1072   09E4 74            mov d, b
1073   09E5 32            mov bl, [d]
1074   09E6 A7 00         mov bh, 0
1075   09E8             ; START RELATIONAL
1076   09E8 D7            push a
1077   09E9 11            mov a, b
1078   09EA 26 2B 00      mov b, $2b
1079   09ED B0            cmp a, b
1080   09EE FD 71         seq ; ==
1081   09F0 E4            pop a
1082   09F1             ; END RELATIONAL
1083   09F1 FD A8         sor a, b ; ||
1084   09F3 E4            pop a
1085   09F4 C0 00 00      cmp b, 0
1086   09F7 C6 32 0A      je _if17_exit
1087   09FA             _if17_true:
1088   09FA             ;; if (*str == '-') sign = -1; 
1089   09FA             _if18_cond:
1090   09FA FA 05 00      lea d, [bp + 5] ; $str
1091   09FD 2A            mov b, [d]
1092   09FE 74            mov d, b
1093   09FF 32            mov bl, [d]
1094   0A00 A7 00         mov bh, 0
1095   0A02             ; START RELATIONAL
1096   0A02 D7            push a
1097   0A03 11            mov a, b
1098   0A04 26 2D 00      mov b, $2d
1099   0A07 B0            cmp a, b
1100   0A08 FD 71         seq ; ==
1101   0A0A E4            pop a
1102   0A0B             ; END RELATIONAL
1103   0A0B C0 00 00      cmp b, 0
1104   0A0E C6 20 0A      je _if18_exit
1105   0A11             _if18_true:
1106   0A11             ;; sign = -1; 
1107   0A11 FA FD FF      lea d, [bp + -3] ; $sign
1108   0A14 DA            push d
1109   0A15 26 01 00      mov b, $1
1110   0A18 FD 97         neg b
1111   0A1A E7            pop d
1112   0A1B FD 43         mov [d], b
1113   0A1D 0A 20 0A      jmp _if18_exit
1114   0A20             _if18_exit:
1115   0A20             ;; str++; 
1116   0A20 FA 05 00      lea d, [bp + 5] ; $str
1117   0A23 2A            mov b, [d]
1118   0A24 FD 79         mov g, b
1119   0A26 FD 77         inc b
1120   0A28 FA 05 00      lea d, [bp + 5] ; $str
1121   0A2B FD 43         mov [d], b
1122   0A2D FD 27         mov b, g
1123   0A2F 0A 32 0A      jmp _if17_exit
1124   0A32             _if17_exit:
1125   0A32             ;; while (*str >= '0' && *str <= '9') { 
1126   0A32             _while19_cond:
1127   0A32 FA 05 00      lea d, [bp + 5] ; $str
1128   0A35 2A            mov b, [d]
1129   0A36 74            mov d, b
1130   0A37 32            mov bl, [d]
1131   0A38 A7 00         mov bh, 0
1132   0A3A             ; START RELATIONAL
1133   0A3A D7            push a
1134   0A3B 11            mov a, b
1135   0A3C 26 30 00      mov b, $30
1136   0A3F B0            cmp a, b
1137   0A40 FD 80         sge ; >=
1138   0A42 E4            pop a
1139   0A43             ; END RELATIONAL
1140   0A43 D7            push a
1141   0A44 11            mov a, b
1142   0A45 FA 05 00      lea d, [bp + 5] ; $str
1143   0A48 2A            mov b, [d]
1144   0A49 74            mov d, b
1145   0A4A 32            mov bl, [d]
1146   0A4B A7 00         mov bh, 0
1147   0A4D             ; START RELATIONAL
1148   0A4D D7            push a
1149   0A4E 11            mov a, b
1150   0A4F 26 39 00      mov b, $39
1151   0A52 B0            cmp a, b
1152   0A53 FD 74         sle ; <=
1153   0A55 E4            pop a
1154   0A56             ; END RELATIONAL
1155   0A56 FD A7         sand a, b ; &&
1156   0A58 E4            pop a
1157   0A59 C0 00 00      cmp b, 0
1158   0A5C C6 9A 0A      je _while19_exit
1159   0A5F             _while19_block:
1160   0A5F             ;; result = result * 10 + (*str - '0'); 
1161   0A5F FA FF FF      lea d, [bp + -1] ; $result
1162   0A62 DA            push d
1163   0A63 FA FF FF      lea d, [bp + -1] ; $result
1164   0A66 2A            mov b, [d]
1165   0A67             ; START FACTORS
1166   0A67 D7            push a
1167   0A68 11            mov a, b
1168   0A69 26 0A 00      mov b, $a
1169   0A6C AC            mul a, b ; *
1170   0A6D 11            mov a, b
1171   0A6E 27            mov b, a
1172   0A6F E4            pop a
1173   0A70             ; END FACTORS
1174   0A70             ; START TERMS
1175   0A70 D7            push a
1176   0A71 11            mov a, b
1177   0A72 FA 05 00      lea d, [bp + 5] ; $str
1178   0A75 2A            mov b, [d]
1179   0A76 74            mov d, b
1180   0A77 32            mov bl, [d]
1181   0A78 A7 00         mov bh, 0
1182   0A7A             ; START TERMS
1183   0A7A D7            push a
1184   0A7B 11            mov a, b
1185   0A7C 26 30 00      mov b, $30
1186   0A7F 60            sub a, b
1187   0A80 27            mov b, a
1188   0A81 E4            pop a
1189   0A82             ; END TERMS
1190   0A82 54            add a, b
1191   0A83 27            mov b, a
1192   0A84 E4            pop a
1193   0A85             ; END TERMS
1194   0A85 E7            pop d
1195   0A86 FD 43         mov [d], b
1196   0A88             ;; str++; 
1197   0A88 FA 05 00      lea d, [bp + 5] ; $str
1198   0A8B 2A            mov b, [d]
1199   0A8C FD 79         mov g, b
1200   0A8E FD 77         inc b
1201   0A90 FA 05 00      lea d, [bp + 5] ; $str
1202   0A93 FD 43         mov [d], b
1203   0A95 FD 27         mov b, g
1204   0A97 0A 32 0A      jmp _while19_cond
1205   0A9A             _while19_exit:
1206   0A9A             ;; return sign * result; 
1207   0A9A FA FD FF      lea d, [bp + -3] ; $sign
1208   0A9D 2A            mov b, [d]
1209   0A9E             ; START FACTORS
1210   0A9E D7            push a
1211   0A9F 11            mov a, b
1212   0AA0 FA FF FF      lea d, [bp + -1] ; $result
1213   0AA3 2A            mov b, [d]
1214   0AA4 AC            mul a, b ; *
1215   0AA5 11            mov a, b
1216   0AA6 27            mov b, a
1217   0AA7 E4            pop a
1218   0AA8             ; END FACTORS
1219   0AA8 F9            leave
1220   0AA9 09            ret
1221   0AAA             
1222   0AAA             gets:
1223   0AAA F8 00 00      enter 0 ; (push bp; mov bp, sp)
1224   0AAD             
1225   0AAD             ; --- BEGIN INLINE ASM BLOCK
1226   0AAD FA 05 00      lea d, [bp + 5] ; $s
1227   0AB0 15            mov a, [d]
1228   0AB1 3C            mov d, a
1229   0AB2 07 29 0F      call _gets
1230   0AB5             ; --- END INLINE ASM BLOCK
1231   0AB5             
1232   0AB5             ;; return strlen(s); 
1233   0AB5 FA 05 00      lea d, [bp + 5] ; $s
1234   0AB8 2A            mov b, [d]
1235   0AB9 FD AB         swp b
1236   0ABB D8            push b
1237   0ABC 07 D8 05      call strlen
1238   0ABF 51 02 00      add sp, 2
1239   0AC2 F9            leave
1240   0AC3 09            ret
1241   0AC4             
1242   0AC4             prints:
1243   0AC4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1244   0AC7             ; $digits 
1245   0AC7             ; $i 
1246   0AC7 10 00 00      mov a, $0
1247   0ACA 45 FA FF      mov [bp + -6], a
1248   0ACD 52 07 00      sub sp, 7
1249   0AD0             ;; if (num < 0) { 
1250   0AD0             _if20_cond:
1251   0AD0 FA 05 00      lea d, [bp + 5] ; $num
1252   0AD3 2A            mov b, [d]
1253   0AD4             ; START RELATIONAL
1254   0AD4 D7            push a
1255   0AD5 11            mov a, b
1256   0AD6 26 00 00      mov b, $0
1257   0AD9 B0            cmp a, b
1258   0ADA FD 73         slt ; < 
1259   0ADC E4            pop a
1260   0ADD             ; END RELATIONAL
1261   0ADD C0 00 00      cmp b, 0
1262   0AE0 C6 FD 0A      je _if20_else
1263   0AE3             _if20_true:
1264   0AE3             ;; putchar('-'); 
1265   0AE3 26 2D 00      mov b, $2d
1266   0AE6 DD            push bl
1267   0AE7 07 A5 0C      call putchar
1268   0AEA 51 01 00      add sp, 1
1269   0AED             ;; num = -num; 
1270   0AED FA 05 00      lea d, [bp + 5] ; $num
1271   0AF0 DA            push d
1272   0AF1 FA 05 00      lea d, [bp + 5] ; $num
1273   0AF4 2A            mov b, [d]
1274   0AF5 FD 97         neg b
1275   0AF7 E7            pop d
1276   0AF8 FD 43         mov [d], b
1277   0AFA 0A 1F 0B      jmp _if20_exit
1278   0AFD             _if20_else:
1279   0AFD             ;; if (num == 0) { 
1280   0AFD             _if21_cond:
1281   0AFD FA 05 00      lea d, [bp + 5] ; $num
1282   0B00 2A            mov b, [d]
1283   0B01             ; START RELATIONAL
1284   0B01 D7            push a
1285   0B02 11            mov a, b
1286   0B03 26 00 00      mov b, $0
1287   0B06 B0            cmp a, b
1288   0B07 FD 71         seq ; ==
1289   0B09 E4            pop a
1290   0B0A             ; END RELATIONAL
1291   0B0A C0 00 00      cmp b, 0
1292   0B0D C6 1F 0B      je _if21_exit
1293   0B10             _if21_true:
1294   0B10             ;; putchar('0'); 
1295   0B10 26 30 00      mov b, $30
1296   0B13 DD            push bl
1297   0B14 07 A5 0C      call putchar
1298   0B17 51 01 00      add sp, 1
1299   0B1A             ;; return; 
1300   0B1A F9            leave
1301   0B1B 09            ret
1302   0B1C 0A 1F 0B      jmp _if21_exit
1303   0B1F             _if21_exit:
1304   0B1F             _if20_exit:
1305   0B1F             ;; while (num > 0) { 
1306   0B1F             _while22_cond:
1307   0B1F FA 05 00      lea d, [bp + 5] ; $num
1308   0B22 2A            mov b, [d]
1309   0B23             ; START RELATIONAL
1310   0B23 D7            push a
1311   0B24 11            mov a, b
1312   0B25 26 00 00      mov b, $0
1313   0B28 B0            cmp a, b
1314   0B29 FD 7F         sgt ; >
1315   0B2B E4            pop a
1316   0B2C             ; END RELATIONAL
1317   0B2C C0 00 00      cmp b, 0
1318   0B2F C6 7C 0B      je _while22_exit
1319   0B32             _while22_block:
1320   0B32             ;; digits[i] = '0' + (num % 10); 
1321   0B32 FA FC FF      lea d, [bp + -4] ; $digits
1322   0B35 D7            push a
1323   0B36 DA            push d
1324   0B37 FA FA FF      lea d, [bp + -6] ; $i
1325   0B3A 2A            mov b, [d]
1326   0B3B E7            pop d
1327   0B3C 5A            add d, b
1328   0B3D E4            pop a
1329   0B3E DA            push d
1330   0B3F 26 30 00      mov b, $30
1331   0B42             ; START TERMS
1332   0B42 D7            push a
1333   0B43 11            mov a, b
1334   0B44 FA 05 00      lea d, [bp + 5] ; $num
1335   0B47 2A            mov b, [d]
1336   0B48             ; START FACTORS
1337   0B48 D7            push a
1338   0B49 11            mov a, b
1339   0B4A 26 0A 00      mov b, $a
1340   0B4D AE            div a, b ; 
1341   0B4E 11            mov a, b
1342   0B4F 27            mov b, a
1343   0B50 E4            pop a
1344   0B51             ; END FACTORS
1345   0B51 54            add a, b
1346   0B52 27            mov b, a
1347   0B53 E4            pop a
1348   0B54             ; END TERMS
1349   0B54 E7            pop d
1350   0B55 FD 3E         mov [d], bl
1351   0B57             ;; num = num / 10; 
1352   0B57 FA 05 00      lea d, [bp + 5] ; $num
1353   0B5A DA            push d
1354   0B5B FA 05 00      lea d, [bp + 5] ; $num
1355   0B5E 2A            mov b, [d]
1356   0B5F             ; START FACTORS
1357   0B5F D7            push a
1358   0B60 11            mov a, b
1359   0B61 26 0A 00      mov b, $a
1360   0B64 AE            div a, b
1361   0B65 27            mov b, a
1362   0B66 E4            pop a
1363   0B67             ; END FACTORS
1364   0B67 E7            pop d
1365   0B68 FD 43         mov [d], b
1366   0B6A             ;; i++; 
1367   0B6A FA FA FF      lea d, [bp + -6] ; $i
1368   0B6D 2A            mov b, [d]
1369   0B6E FD 79         mov g, b
1370   0B70 FD 77         inc b
1371   0B72 FA FA FF      lea d, [bp + -6] ; $i
1372   0B75 FD 43         mov [d], b
1373   0B77 FD 27         mov b, g
1374   0B79 0A 1F 0B      jmp _while22_cond
1375   0B7C             _while22_exit:
1376   0B7C             ;; while (i > 0) { 
1377   0B7C             _while23_cond:
1378   0B7C FA FA FF      lea d, [bp + -6] ; $i
1379   0B7F 2A            mov b, [d]
1380   0B80             ; START RELATIONAL
1381   0B80 D7            push a
1382   0B81 11            mov a, b
1383   0B82 26 00 00      mov b, $0
1384   0B85 B0            cmp a, b
1385   0B86 FD 7F         sgt ; >
1386   0B88 E4            pop a
1387   0B89             ; END RELATIONAL
1388   0B89 C0 00 00      cmp b, 0
1389   0B8C C6 B7 0B      je _while23_exit
1390   0B8F             _while23_block:
1391   0B8F             ;; i--; 
1392   0B8F FA FA FF      lea d, [bp + -6] ; $i
1393   0B92 2A            mov b, [d]
1394   0B93 FD 79         mov g, b
1395   0B95 FD 7D         dec b
1396   0B97 FA FA FF      lea d, [bp + -6] ; $i
1397   0B9A FD 43         mov [d], b
1398   0B9C FD 27         mov b, g
1399   0B9E             ;; putchar(digits[i]); 
1400   0B9E FA FC FF      lea d, [bp + -4] ; $digits
1401   0BA1 D7            push a
1402   0BA2 DA            push d
1403   0BA3 FA FA FF      lea d, [bp + -6] ; $i
1404   0BA6 2A            mov b, [d]
1405   0BA7 E7            pop d
1406   0BA8 5A            add d, b
1407   0BA9 E4            pop a
1408   0BAA 32            mov bl, [d]
1409   0BAB A7 00         mov bh, 0
1410   0BAD DD            push bl
1411   0BAE 07 A5 0C      call putchar
1412   0BB1 51 01 00      add sp, 1
1413   0BB4 0A 7C 0B      jmp _while23_cond
1414   0BB7             _while23_exit:
1415   0BB7 F9            leave
1416   0BB8 09            ret
1417   0BB9             
1418   0BB9             printu:
1419   0BB9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1420   0BBC             ; $digits 
1421   0BBC             ; $i 
1422   0BBC 52 07 00      sub sp, 7
1423   0BBF             ;; i = 0; 
1424   0BBF FA FA FF      lea d, [bp + -6] ; $i
1425   0BC2 DA            push d
1426   0BC3 26 00 00      mov b, $0
1427   0BC6 E7            pop d
1428   0BC7 FD 43         mov [d], b
1429   0BC9             ;; if(num == 0){ 
1430   0BC9             _if24_cond:
1431   0BC9 FA 05 00      lea d, [bp + 5] ; $num
1432   0BCC 2A            mov b, [d]
1433   0BCD             ; START RELATIONAL
1434   0BCD D7            push a
1435   0BCE 11            mov a, b
1436   0BCF 26 00 00      mov b, $0
1437   0BD2 B0            cmp a, b
1438   0BD3 FD 71         seq ; ==
1439   0BD5 E4            pop a
1440   0BD6             ; END RELATIONAL
1441   0BD6 C0 00 00      cmp b, 0
1442   0BD9 C6 EB 0B      je _if24_exit
1443   0BDC             _if24_true:
1444   0BDC             ;; putchar('0'); 
1445   0BDC 26 30 00      mov b, $30
1446   0BDF DD            push bl
1447   0BE0 07 A5 0C      call putchar
1448   0BE3 51 01 00      add sp, 1
1449   0BE6             ;; return; 
1450   0BE6 F9            leave
1451   0BE7 09            ret
1452   0BE8 0A EB 0B      jmp _if24_exit
1453   0BEB             _if24_exit:
1454   0BEB             ;; while (num > 0) { 
1455   0BEB             _while25_cond:
1456   0BEB FA 05 00      lea d, [bp + 5] ; $num
1457   0BEE 2A            mov b, [d]
1458   0BEF             ; START RELATIONAL
1459   0BEF D7            push a
1460   0BF0 11            mov a, b
1461   0BF1 26 00 00      mov b, $0
1462   0BF4 B0            cmp a, b
1463   0BF5 FD 81         sgu ; > (unsigned)
1464   0BF7 E4            pop a
1465   0BF8             ; END RELATIONAL
1466   0BF8 C0 00 00      cmp b, 0
1467   0BFB C6 48 0C      je _while25_exit
1468   0BFE             _while25_block:
1469   0BFE             ;; digits[i] = '0' + (num % 10); 
1470   0BFE FA FC FF      lea d, [bp + -4] ; $digits
1471   0C01 D7            push a
1472   0C02 DA            push d
1473   0C03 FA FA FF      lea d, [bp + -6] ; $i
1474   0C06 2A            mov b, [d]
1475   0C07 E7            pop d
1476   0C08 5A            add d, b
1477   0C09 E4            pop a
1478   0C0A DA            push d
1479   0C0B 26 30 00      mov b, $30
1480   0C0E             ; START TERMS
1481   0C0E D7            push a
1482   0C0F 11            mov a, b
1483   0C10 FA 05 00      lea d, [bp + 5] ; $num
1484   0C13 2A            mov b, [d]
1485   0C14             ; START FACTORS
1486   0C14 D7            push a
1487   0C15 11            mov a, b
1488   0C16 26 0A 00      mov b, $a
1489   0C19 AE            div a, b ; 
1490   0C1A 11            mov a, b
1491   0C1B 27            mov b, a
1492   0C1C E4            pop a
1493   0C1D             ; END FACTORS
1494   0C1D 54            add a, b
1495   0C1E 27            mov b, a
1496   0C1F E4            pop a
1497   0C20             ; END TERMS
1498   0C20 E7            pop d
1499   0C21 FD 3E         mov [d], bl
1500   0C23             ;; num = num / 10; 
1501   0C23 FA 05 00      lea d, [bp + 5] ; $num
1502   0C26 DA            push d
1503   0C27 FA 05 00      lea d, [bp + 5] ; $num
1504   0C2A 2A            mov b, [d]
1505   0C2B             ; START FACTORS
1506   0C2B D7            push a
1507   0C2C 11            mov a, b
1508   0C2D 26 0A 00      mov b, $a
1509   0C30 AE            div a, b
1510   0C31 27            mov b, a
1511   0C32 E4            pop a
1512   0C33             ; END FACTORS
1513   0C33 E7            pop d
1514   0C34 FD 43         mov [d], b
1515   0C36             ;; i++; 
1516   0C36 FA FA FF      lea d, [bp + -6] ; $i
1517   0C39 2A            mov b, [d]
1518   0C3A FD 79         mov g, b
1519   0C3C FD 77         inc b
1520   0C3E FA FA FF      lea d, [bp + -6] ; $i
1521   0C41 FD 43         mov [d], b
1522   0C43 FD 27         mov b, g
1523   0C45 0A EB 0B      jmp _while25_cond
1524   0C48             _while25_exit:
1525   0C48             ;; while (i > 0) { 
1526   0C48             _while26_cond:
1527   0C48 FA FA FF      lea d, [bp + -6] ; $i
1528   0C4B 2A            mov b, [d]
1529   0C4C             ; START RELATIONAL
1530   0C4C D7            push a
1531   0C4D 11            mov a, b
1532   0C4E 26 00 00      mov b, $0
1533   0C51 B0            cmp a, b
1534   0C52 FD 7F         sgt ; >
1535   0C54 E4            pop a
1536   0C55             ; END RELATIONAL
1537   0C55 C0 00 00      cmp b, 0
1538   0C58 C6 83 0C      je _while26_exit
1539   0C5B             _while26_block:
1540   0C5B             ;; i--; 
1541   0C5B FA FA FF      lea d, [bp + -6] ; $i
1542   0C5E 2A            mov b, [d]
1543   0C5F FD 79         mov g, b
1544   0C61 FD 7D         dec b
1545   0C63 FA FA FF      lea d, [bp + -6] ; $i
1546   0C66 FD 43         mov [d], b
1547   0C68 FD 27         mov b, g
1548   0C6A             ;; putchar(digits[i]); 
1549   0C6A FA FC FF      lea d, [bp + -4] ; $digits
1550   0C6D D7            push a
1551   0C6E DA            push d
1552   0C6F FA FA FF      lea d, [bp + -6] ; $i
1553   0C72 2A            mov b, [d]
1554   0C73 E7            pop d
1555   0C74 5A            add d, b
1556   0C75 E4            pop a
1557   0C76 32            mov bl, [d]
1558   0C77 A7 00         mov bh, 0
1559   0C79 DD            push bl
1560   0C7A 07 A5 0C      call putchar
1561   0C7D 51 01 00      add sp, 1
1562   0C80 0A 48 0C      jmp _while26_cond
1563   0C83             _while26_exit:
1564   0C83 F9            leave
1565   0C84 09            ret
1566   0C85             
1567   0C85             rand:
1568   0C85 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1569   0C88             ; $sec 
1570   0C88 52 01 00      sub sp, 1
1571   0C8B             
1572   0C8B             ; --- BEGIN INLINE ASM BLOCK
1573   0C8B 19 00         mov al, 0
1574   0C8D 05 01         syscall sys_rtc					
1575   0C8F 1A            mov al, ah
1576   0C90 FA 00 00      lea d, [bp + 0] ; $sec
1577   0C93 1E            mov al, [d]
1578   0C94             ; --- END INLINE ASM BLOCK
1579   0C94             
1580   0C94             ;; return sec; 
1581   0C94 FA 00 00      lea d, [bp + 0] ; $sec
1582   0C97 32            mov bl, [d]
1583   0C98 A7 00         mov bh, 0
1584   0C9A F9            leave
1585   0C9B 09            ret
1586   0C9C             
1587   0C9C             date:
1588   0C9C F8 00 00      enter 0 ; (push bp; mov bp, sp)
1589   0C9F             
1590   0C9F             ; --- BEGIN INLINE ASM BLOCK
1591   0C9F 19 00         mov al, 0 
1592   0CA1 05 07         syscall sys_datetime
1593   0CA3             ; --- END INLINE ASM BLOCK
1594   0CA3             
1595   0CA3 F9            leave
1596   0CA4 09            ret
1597   0CA5             
1598   0CA5             putchar:
1599   0CA5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1600   0CA8             
1601   0CA8             ; --- BEGIN INLINE ASM BLOCK
1602   0CA8 FA 05 00      lea d, [bp + 5] ; $c
1603   0CAB 1E            mov al, [d]
1604   0CAC 23            mov ah, al
1605   0CAD 07 22 0F      call _putchar
1606   0CB0             ; --- END INLINE ASM BLOCK
1607   0CB0             
1608   0CB0 F9            leave
1609   0CB1 09            ret
1610   0CB2             
1611   0CB2             getchar:
1612   0CB2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1613   0CB5             ; $c 
1614   0CB5 52 01 00      sub sp, 1
1615   0CB8             
1616   0CB8             ; --- BEGIN INLINE ASM BLOCK
1617   0CB8 07 1B 0F      call getch
1618   0CBB 1A            mov al, ah
1619   0CBC FA 00 00      lea d, [bp + 0] ; $c
1620   0CBF 3E            mov [d], al
1621   0CC0             ; --- END INLINE ASM BLOCK
1622   0CC0             
1623   0CC0             ;; return c; 
1624   0CC0 FA 00 00      lea d, [bp + 0] ; $c
1625   0CC3 32            mov bl, [d]
1626   0CC4 A7 00         mov bh, 0
1627   0CC6 F9            leave
1628   0CC7 09            ret
1629   0CC8             
1630   0CC8             scann:
1631   0CC8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1632   0CCB             ; $m 
1633   0CCB 52 02 00      sub sp, 2
1634   0CCE             
1635   0CCE             ; --- BEGIN INLINE ASM BLOCK
1636   0CCE 07 66 11      call scan_u16d
1637   0CD1 FA FF FF      lea d, [bp + -1] ; $m
1638   0CD4 43            mov [d], a
1639   0CD5             ; --- END INLINE ASM BLOCK
1640   0CD5             
1641   0CD5             ;; return m; 
1642   0CD5 FA FF FF      lea d, [bp + -1] ; $m
1643   0CD8 2A            mov b, [d]
1644   0CD9 F9            leave
1645   0CDA 09            ret
1646   0CDB             
1647   0CDB             puts:
1648   0CDB F8 00 00      enter 0 ; (push bp; mov bp, sp)
1649   0CDE             
1650   0CDE             ; --- BEGIN INLINE ASM BLOCK
1651   0CDE FA 05 00      lea d, [bp + 5] ; $s
1652   0CE1 15            mov a, [d]
1653   0CE2 3C            mov d, a
1654   0CE3 07 6C 10      call _puts
1655   0CE6 10 00 0A      mov a, $0A00
1656   0CE9 05 03         syscall sys_io
1657   0CEB             ; --- END INLINE ASM BLOCK
1658   0CEB             
1659   0CEB F9            leave
1660   0CEC 09            ret
1661   0CED             
1662   0CED             print:
1663   0CED F8 00 00      enter 0 ; (push bp; mov bp, sp)
1664   0CF0             
1665   0CF0             ; --- BEGIN INLINE ASM BLOCK
1666   0CF0 FA 05 00      lea d, [bp + 5] ; $s
1667   0CF3 FD 2A         mov d, [d]
1668   0CF5 07 6C 10      call _puts
1669   0CF8             ; --- END INLINE ASM BLOCK
1670   0CF8             
1671   0CF8 F9            leave
1672   0CF9 09            ret
1673   0CFA             
1674   0CFA             loadfile:
1675   0CFA F8 00 00      enter 0 ; (push bp; mov bp, sp)
1676   0CFD             
1677   0CFD             ; --- BEGIN INLINE ASM BLOCK
1678   0CFD FA 05 00      lea d, [bp + 5] ; $destination
1679   0D00 15            mov a, [d]
1680   0D01 4F            mov di, a
1681   0D02 FA 07 00      lea d, [bp + 7] ; $filename
1682   0D05 FD 2A         mov d, [d]
1683   0D07 19 14         mov al, 20
1684   0D09 05 04         syscall sys_filesystem
1685   0D0B             ; --- END INLINE ASM BLOCK
1686   0D0B             
1687   0D0B F9            leave
1688   0D0C 09            ret
1689   0D0D             
1690   0D0D             create_file:
1691   0D0D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1692   0D10 F9            leave
1693   0D11 09            ret
1694   0D12             
1695   0D12             delete_file:
1696   0D12 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1697   0D15             
1698   0D15             ; --- BEGIN INLINE ASM BLOCK
1699   0D15 FA 05 00      lea d, [bp + 5] ; $filename
1700   0D18 19 0A         mov al, 10
1701   0D1A 05 04         syscall sys_filesystem
1702   0D1C             ; --- END INLINE ASM BLOCK
1703   0D1C             
1704   0D1C F9            leave
1705   0D1D 09            ret
1706   0D1E             
1707   0D1E             fopen:
1708   0D1E F8 00 00      enter 0 ; (push bp; mov bp, sp)
1709   0D21 F9            leave
1710   0D22 09            ret
1711   0D23             
1712   0D23             fclose:
1713   0D23 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1714   0D26 F9            leave
1715   0D27 09            ret
1716   0D28             
1717   0D28             alloc:
1718   0D28 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1719   0D2B             ;; heap_top = heap_top + bytes; 
1720   0D2B 3B E8 2B      mov d, _heap_top ; $heap_top
1721   0D2E DA            push d
1722   0D2F 3B E8 2B      mov d, _heap_top ; $heap_top
1723   0D32 2A            mov b, [d]
1724   0D33             ; START TERMS
1725   0D33 D7            push a
1726   0D34 11            mov a, b
1727   0D35 FA 05 00      lea d, [bp + 5] ; $bytes
1728   0D38 2A            mov b, [d]
1729   0D39 54            add a, b
1730   0D3A 27            mov b, a
1731   0D3B E4            pop a
1732   0D3C             ; END TERMS
1733   0D3C E7            pop d
1734   0D3D FD 43         mov [d], b
1735   0D3F             ;; return heap_top - bytes; 
1736   0D3F 3B E8 2B      mov d, _heap_top ; $heap_top
1737   0D42 2A            mov b, [d]
1738   0D43             ; START TERMS
1739   0D43 D7            push a
1740   0D44 11            mov a, b
1741   0D45 FA 05 00      lea d, [bp + 5] ; $bytes
1742   0D48 2A            mov b, [d]
1743   0D49 60            sub a, b
1744   0D4A 27            mov b, a
1745   0D4B E4            pop a
1746   0D4C             ; END TERMS
1747   0D4C F9            leave
1748   0D4D 09            ret
1749   0D4E             
1750   0D4E             free:
1751   0D4E F8 00 00      enter 0 ; (push bp; mov bp, sp)
1752   0D51             ;; return heap_top = heap_top - bytes; 
1753   0D51 3B E8 2B      mov d, _heap_top ; $heap_top
1754   0D54 DA            push d
1755   0D55 3B E8 2B      mov d, _heap_top ; $heap_top
1756   0D58 2A            mov b, [d]
1757   0D59             ; START TERMS
1758   0D59 D7            push a
1759   0D5A 11            mov a, b
1760   0D5B FA 05 00      lea d, [bp + 5] ; $bytes
1761   0D5E 2A            mov b, [d]
1762   0D5F 60            sub a, b
1763   0D60 27            mov b, a
1764   0D61 E4            pop a
1765   0D62             ; END TERMS
1766   0D62 E7            pop d
1767   0D63 FD 43         mov [d], b
1768   0D65 F9            leave
1769   0D66 09            ret
1770   0D67             
1771   0D67             exit:
1772   0D67 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1773   0D6A             
1774   0D6A             ; --- BEGIN INLINE ASM BLOCK
1775   0D6A 05 0B         syscall sys_terminate_proc
1776   0D6C             ; --- END INLINE ASM BLOCK
1777   0D6C             
1778   0D6C F9            leave
1779   0D6D 09            ret
1780   0D6E             
1781   0D6E             load_hex:
1782   0D6E F8 00 00      enter 0 ; (push bp; mov bp, sp)
1783   0D71             ; $temp 
1784   0D71 52 02 00      sub sp, 2
1785   0D74             ;; temp = alloc(32768); 
1786   0D74 FA FF FF      lea d, [bp + -1] ; $temp
1787   0D77 DA            push d
1788   0D78 26 00 80      mov b, $8000
1789   0D7B FD AB         swp b
1790   0D7D D8            push b
1791   0D7E 07 28 0D      call alloc
1792   0D81 51 02 00      add sp, 2
1793   0D84 E7            pop d
1794   0D85 FD 43         mov [d], b
1795   0D87             
1796   0D87             ; --- BEGIN INLINE ASM BLOCK
1797   0D87               
1798   0D87               
1799   0D87               
1800   0D87               
1801   0D87               
1802   0D87             _load_hex:
1803   0D87 D7            push a
1804   0D88 D8            push b
1805   0D89 DA            push d
1806   0D8A E2            push si
1807   0D8B E3            push di
1808   0D8C 52 00 80      sub sp, $8000      
1809   0D8F 38 00 00      mov c, 0
1810   0D92 48            mov a, sp
1811   0D93 77            inc a
1812   0D94 3C            mov d, a          
1813   0D95 07 29 0F      call _gets        
1814   0D98 4D            mov si, a
1815   0D99             __load_hex_loop:
1816   0D99 F6            lodsb             
1817   0D9A B9 00         cmp al, 0         
1818   0D9C C6 AA 0D      jz __load_hex_ret
1819   0D9F 36            mov bh, al
1820   0DA0 F6            lodsb
1821   0DA1 2F            mov bl, al
1822   0DA2 07 DF 0E      call _atoi        
1823   0DA5 F7            stosb             
1824   0DA6 78            inc c
1825   0DA7 0A 99 0D      jmp __load_hex_loop
1826   0DAA             __load_hex_ret:
1827   0DAA 51 00 80      add sp, $8000
1828   0DAD F0            pop di
1829   0DAE EF            pop si
1830   0DAF E7            pop d
1831   0DB0 E5            pop b
1832   0DB1 E4            pop a
1833   0DB2             ; --- END INLINE ASM BLOCK
1834   0DB2             
1835   0DB2 F9            leave
1836   0DB3 09            ret
1837   0DB4             
1838   0DB4             getparam:
1839   0DB4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1840   0DB7             ; $data 
1841   0DB7 52 01 00      sub sp, 1
1842   0DBA             
1843   0DBA             ; --- BEGIN INLINE ASM BLOCK
1844   0DBA 19 04         mov al, 4
1845   0DBC FA 05 00      lea d, [bp + 5] ; $address
1846   0DBF FD 2A         mov d, [d]
1847   0DC1 05 0C         syscall sys_system
1848   0DC3 FA 00 00      lea d, [bp + 0] ; $data
1849   0DC6 FD 3E         mov [d], bl
1850   0DC8             ; --- END INLINE ASM BLOCK
1851   0DC8             
1852   0DC8             ;; return data; 
1853   0DC8 FA 00 00      lea d, [bp + 0] ; $data
1854   0DCB 32            mov bl, [d]
1855   0DCC A7 00         mov bh, 0
1856   0DCE F9            leave
1857   0DCF 09            ret
1858   0DD0             
1859   0DD0             clear:
1860   0DD0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1861   0DD3             ;; print("\033[2J\033[H"); 
1862   0DD3 26 38 24      mov b, __s4 ; "\033[2J\033[H"
1863   0DD6 FD AB         swp b
1864   0DD8 D8            push b
1865   0DD9 07 ED 0C      call print
1866   0DDC 51 02 00      add sp, 2
1867   0DDF F9            leave
1868   0DE0 09            ret
1869   0DE1             
1870   0DE1             printun:
1871   0DE1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1872   0DE4             ;; print(prompt); 
1873   0DE4 FA 07 00      lea d, [bp + 7] ; $prompt
1874   0DE7 2A            mov b, [d]
1875   0DE8 FD AB         swp b
1876   0DEA D8            push b
1877   0DEB 07 ED 0C      call print
1878   0DEE 51 02 00      add sp, 2
1879   0DF1             ;; printu(n); 
1880   0DF1 FA 05 00      lea d, [bp + 5] ; $n
1881   0DF4 2A            mov b, [d]
1882   0DF5 FD AB         swp b
1883   0DF7 D8            push b
1884   0DF8 07 B9 0B      call printu
1885   0DFB 51 02 00      add sp, 2
1886   0DFE             ;; print("\n"); 
1887   0DFE 26 40 24      mov b, __s5 ; "\n"
1888   0E01 FD AB         swp b
1889   0E03 D8            push b
1890   0E04 07 ED 0C      call print
1891   0E07 51 02 00      add sp, 2
1892   0E0A F9            leave
1893   0E0B 09            ret
1894   0E0C             
1895   0E0C             printsn:
1896   0E0C F8 00 00      enter 0 ; (push bp; mov bp, sp)
1897   0E0F             ;; print(prompt); 
1898   0E0F FA 07 00      lea d, [bp + 7] ; $prompt
1899   0E12 2A            mov b, [d]
1900   0E13 FD AB         swp b
1901   0E15 D8            push b
1902   0E16 07 ED 0C      call print
1903   0E19 51 02 00      add sp, 2
1904   0E1C             ;; prints(n); 
1905   0E1C FA 05 00      lea d, [bp + 5] ; $n
1906   0E1F 2A            mov b, [d]
1907   0E20 FD AB         swp b
1908   0E22 D8            push b
1909   0E23 07 C4 0A      call prints
1910   0E26 51 02 00      add sp, 2
1911   0E29             ;; print("\n"); 
1912   0E29 26 40 24      mov b, __s5 ; "\n"
1913   0E2C FD AB         swp b
1914   0E2E D8            push b
1915   0E2F 07 ED 0C      call print
1916   0E32 51 02 00      add sp, 2
1917   0E35 F9            leave
1918   0E36 09            ret
1919   0E37             
1920   0E37             include_stdio_asm:
1921   0E37 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1922   0E3A             
1923   0E3A             ; --- BEGIN INLINE ASM BLOCK
1924   0E3A             .include "lib/stdio.asm"
0001+  0E3A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  0E3A             ; stdio.s
0003+  0E3A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  0E3A             .include "lib/string.asm"
0001++ 0E3A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 0E3A             ; string.s
0003++ 0E3A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 0E3A             
0005++ 0E3A             
0006++ 0E3A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 0E3A             ; _strrev
0008++ 0E3A             ; reverse a string
0009++ 0E3A             ; D = string address
0010++ 0E3A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 0E3A             ; 01234
0012++ 0E3A             _strrev:
0013++ 0E3A 4B          	pusha
0014++ 0E3B 07 81 0E    	call _strlen	; length in C
0015++ 0E3E 12          	mov a, c
0016++ 0E3F AF 01 00    	cmp a, 1
0017++ 0E42 D0 5C 0E    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 0E45 7D          	dec a
0019++ 0E46 FD 4E       	mov si, d	; beginning of string
0020++ 0E48 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 0E4A 59          	add d, a	; end of string
0022++ 0E4B 12          	mov a, c
0023++ 0E4C FD 9B       	shr a		; divide by 2
0024++ 0E4E 39          	mov c, a	; C now counts the steps
0025++ 0E4F             _strrev_L0:
0026++ 0E4F 32          	mov bl, [d]	; save load right-side char into BL
0027++ 0E50 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 0E51 3E          	mov [d], al	; store left char into right side
0029++ 0E52 1B          	mov al, bl
0030++ 0E53 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 0E54 7E          	dec c
0032++ 0E55 7F          	dec d
0033++ 0E56 C2 00 00    	cmp c, 0
0034++ 0E59 C7 4F 0E    	jne _strrev_L0
0035++ 0E5C             _strrev_end:
0036++ 0E5C 4C          	popa
0037++ 0E5D 09          	ret
0038++ 0E5E             	
0039++ 0E5E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 0E5E             ; _strchr
0041++ 0E5E             ; search string in D for char in AL
0042++ 0E5E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 0E5E             _strchr:
0044++ 0E5E             _strchr_L0:
0045++ 0E5E 32          	mov bl, [d]
0046++ 0E5F C1 00       	cmp bl, 0
0047++ 0E61 C6 6C 0E    	je _strchr_end
0048++ 0E64 BA          	cmp al, bl
0049++ 0E65 C6 6C 0E    	je _strchr_end
0050++ 0E68 79          	inc d
0051++ 0E69 0A 5E 0E    	jmp _strchr_L0
0052++ 0E6C             _strchr_end:
0053++ 0E6C 1B          	mov al, bl
0054++ 0E6D 09          	ret
0055++ 0E6E             
0056++ 0E6E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 0E6E             ; _strstr
0058++ 0E6E             ; find sub-string
0059++ 0E6E             ; str1 in SI
0060++ 0E6E             ; str2 in DI
0061++ 0E6E             ; SI points to end of source string
0062++ 0E6E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 0E6E             _strstr:
0064++ 0E6E DB          	push al
0065++ 0E6F DA          	push d
0066++ 0E70 E3          	push di
0067++ 0E71             _strstr_loop:
0068++ 0E71 F3          	cmpsb					; compare a byte of the strings
0069++ 0E72 C7 7D 0E    	jne _strstr_ret
0070++ 0E75 FC 00 00    	lea d, [di + 0]
0071++ 0E78 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 0E7A C7 71 0E    	jne _strstr_loop				; equal chars but not at end
0073++ 0E7D             _strstr_ret:
0074++ 0E7D F0          	pop di
0075++ 0E7E E7          	pop d
0076++ 0E7F E8          	pop al
0077++ 0E80 09          	ret
0078++ 0E81             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 0E81             ; length of null terminated string
0080++ 0E81             ; result in C
0081++ 0E81             ; pointer in D
0082++ 0E81             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 0E81             _strlen:
0084++ 0E81 DA          	push d
0085++ 0E82 38 00 00    	mov c, 0
0086++ 0E85             _strlen_L1:
0087++ 0E85 BD 00       	cmp byte [d], 0
0088++ 0E87 C6 8F 0E    	je _strlen_ret
0089++ 0E8A 79          	inc d
0090++ 0E8B 78          	inc c
0091++ 0E8C 0A 85 0E    	jmp _strlen_L1
0092++ 0E8F             _strlen_ret:
0093++ 0E8F E7          	pop d
0094++ 0E90 09          	ret
0095++ 0E91             
0096++ 0E91             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 0E91             ; STRCMP
0098++ 0E91             ; compare two strings
0099++ 0E91             ; str1 in SI
0100++ 0E91             ; str2 in DI
0101++ 0E91             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 0E91             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 0E91             _strcmp:
0104++ 0E91 DB          	push al
0105++ 0E92 DA          	push d
0106++ 0E93 E3          	push di
0107++ 0E94 E2          	push si
0108++ 0E95             _strcmp_loop:
0109++ 0E95 F3          	cmpsb					; compare a byte of the strings
0110++ 0E96 C7 A1 0E    	jne _strcmp_ret
0111++ 0E99 FB FF FF    	lea d, [si +- 1]
0112++ 0E9C BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 0E9E C7 95 0E    	jne _strcmp_loop				; equal chars but not at end
0114++ 0EA1             _strcmp_ret:
0115++ 0EA1 EF          	pop si
0116++ 0EA2 F0          	pop di
0117++ 0EA3 E7          	pop d
0118++ 0EA4 E8          	pop al
0119++ 0EA5 09          	ret
0120++ 0EA6             
0121++ 0EA6             
0122++ 0EA6             ; STRCPY
0123++ 0EA6             ; copy null terminated string from SI to DI
0124++ 0EA6             ; source in SI
0125++ 0EA6             ; destination in DI
0126++ 0EA6             _strcpy:
0127++ 0EA6 E2          	push si
0128++ 0EA7 E3          	push di
0129++ 0EA8 DB          	push al
0130++ 0EA9             _strcpy_L1:
0131++ 0EA9 F6          	lodsb
0132++ 0EAA F7          	stosb
0133++ 0EAB B9 00       	cmp al, 0
0134++ 0EAD C7 A9 0E    	jne _strcpy_L1
0135++ 0EB0             _strcpy_end:
0136++ 0EB0 E8          	pop al
0137++ 0EB1 F0          	pop di
0138++ 0EB2 EF          	pop si
0139++ 0EB3 09          	ret
0140++ 0EB4             
0141++ 0EB4             ; STRCAT
0142++ 0EB4             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 0EB4             ; source in SI
0144++ 0EB4             ; destination in DI
0145++ 0EB4             _strcat:
0146++ 0EB4 E2          	push si
0147++ 0EB5 E3          	push di
0148++ 0EB6 D7          	push a
0149++ 0EB7 DA          	push d
0150++ 0EB8 50          	mov a, di
0151++ 0EB9 3C          	mov d, a
0152++ 0EBA             _strcat_goto_end_L1:
0153++ 0EBA BD 00       	cmp byte[d], 0
0154++ 0EBC C6 C3 0E    	je _strcat_start
0155++ 0EBF 79          	inc d
0156++ 0EC0 0A BA 0E    	jmp _strcat_goto_end_L1
0157++ 0EC3             _strcat_start:
0158++ 0EC3 FD 50       	mov di, d
0159++ 0EC5             _strcat_L1:
0160++ 0EC5 F6          	lodsb
0161++ 0EC6 F7          	stosb
0162++ 0EC7 B9 00       	cmp al, 0
0163++ 0EC9 C7 C5 0E    	jne _strcat_L1
0164++ 0ECC             _strcat_end:
0165++ 0ECC E7          	pop d
0166++ 0ECD E4          	pop a
0167++ 0ECE F0          	pop di
0168++ 0ECF EF          	pop si
0169++ 0ED0 09          	ret
0170++ 0ED1             
0171++ 0ED1             
0005+  0ED1             
0006+  0ED1             
0007+  0ED1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0008+  0ED1             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0009+  0ED1             ; ASCII in BL
0010+  0ED1             ; result in AL
0011+  0ED1             ; ascii for F = 0100 0110
0012+  0ED1             ; ascii for 9 = 0011 1001
0013+  0ED1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0014+  0ED1             hex_ascii_encode:
0015+  0ED1 1B            mov al, bl
0016+  0ED2 93 40         test al, $40        ; test if letter or number
0017+  0ED4 C7 DA 0E      jnz hex_letter
0018+  0ED7 87 0F         and al, $0F        ; get number
0019+  0ED9 09            ret
0020+  0EDA             hex_letter:
0021+  0EDA 87 0F         and al, $0F        ; get letter
0022+  0EDC 6A 09         add al, 9
0023+  0EDE 09            ret
0024+  0EDF             
0025+  0EDF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0026+  0EDF             ; ATOI
0027+  0EDF             ; 2 letter hex string in B
0028+  0EDF             ; 8bit integer returned in AL
0029+  0EDF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0030+  0EDF             _atoi:
0031+  0EDF D8            push b
0032+  0EE0 07 D1 0E      call hex_ascii_encode      ; convert BL to 4bit code in AL
0033+  0EE3 30            mov bl, bh
0034+  0EE4 DB            push al          ; save a
0035+  0EE5 07 D1 0E      call hex_ascii_encode
0036+  0EE8 EA            pop bl  
0037+  0EE9 FD 9E 04      shl al, 4
0038+  0EEC 8C            or al, bl
0039+  0EED E5            pop b
0040+  0EEE 09            ret  
0041+  0EEF             
0042+  0EEF             
0043+  0EEF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0044+  0EEF             ; scanf
0045+  0EEF             ; no need for explanations!
0046+  0EEF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0047+  0EEF             scanf:
0048+  0EEF 09            ret
0049+  0EF0             
0050+  0EF0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0051+  0EF0             ; ITOA
0052+  0EF0             ; 8bit value in BL
0053+  0EF0             ; 2 byte ASCII result in A
0054+  0EF0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0055+  0EF0             _itoa:
0056+  0EF0 DA            push d
0057+  0EF1 D8            push b
0058+  0EF2 A7 00         mov bh, 0
0059+  0EF4 FD A4 04      shr bl, 4  
0060+  0EF7 74            mov d, b
0061+  0EF8 1F A0 11      mov al, [d + s_hex_digits]
0062+  0EFB 23            mov ah, al
0063+  0EFC               
0064+  0EFC E5            pop b
0065+  0EFD D8            push b
0066+  0EFE A7 00         mov bh, 0
0067+  0F00 FD 87 0F      and bl, $0F
0068+  0F03 74            mov d, b
0069+  0F04 1F A0 11      mov al, [d + s_hex_digits]
0070+  0F07 E5            pop b
0071+  0F08 E7            pop d
0072+  0F09 09            ret
0073+  0F0A             
0074+  0F0A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0075+  0F0A             ; HEX STRING TO BINARY
0076+  0F0A             ; di = destination address
0077+  0F0A             ; si = source
0078+  0F0A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079+  0F0A             _hex_to_int:
0080+  0F0A             _hex_to_int_L1:
0081+  0F0A F6            lodsb          ; load from [SI] to AL
0082+  0F0B B9 00         cmp al, 0        ; check if ASCII 0
0083+  0F0D C6 1A 0F      jz _hex_to_int_ret
0084+  0F10 36            mov bh, al
0085+  0F11 F6            lodsb
0086+  0F12 2F            mov bl, al
0087+  0F13 07 DF 0E      call _atoi        ; convert ASCII byte in B to int (to AL)
0088+  0F16 F7            stosb          ; store AL to [DI]
0089+  0F17 0A 0A 0F      jmp _hex_to_int_L1
0090+  0F1A             _hex_to_int_ret:
0091+  0F1A 09            ret    
0092+  0F1B             
0093+  0F1B             
0094+  0F1B             
0095+  0F1B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0096+  0F1B             ; GETCHAR
0097+  0F1B             ; char in ah
0098+  0F1B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0099+  0F1B             getch:
0100+  0F1B DB            push al
0101+  0F1C             getch_retry:
0102+  0F1C 19 01         mov al, 1
0103+  0F1E 05 03         syscall sys_io      ; receive in AH
0104+  0F20 E8            pop al
0105+  0F21 09            ret
0106+  0F22             
0107+  0F22             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0108+  0F22             ; PUTCHAR
0109+  0F22             ; char in ah
0110+  0F22             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0111+  0F22             _putchar:
0112+  0F22 D7            push a
0113+  0F23 19 00         mov al, 0
0114+  0F25 05 03         syscall sys_io      ; char in AH
0115+  0F27 E4            pop a
0116+  0F28 09            ret
0117+  0F29             
0118+  0F29             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0119+  0F29             ;; INPUT A STRING
0120+  0F29             ;; terminates with null
0121+  0F29             ;; pointer in D
0122+  0F29             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0123+  0F29             _gets:
0124+  0F29 D7            push a
0125+  0F2A DA            push d
0126+  0F2B             _gets_loop:
0127+  0F2B 19 01         mov al, 1
0128+  0F2D 05 03         syscall sys_io      ; receive in AH
0129+  0F2F B9 00         cmp al, 0        ; check error code (AL)
0130+  0F31 C6 2B 0F      je _gets_loop      ; if no char received, retry
0131+  0F34             
0132+  0F34 76 1B         cmp ah, 27
0133+  0F36 C6 57 0F      je _gets_ansi_esc
0134+  0F39 76 0A         cmp ah, $0A        ; LF
0135+  0F3B C6 C2 0F      je _gets_end
0136+  0F3E 76 0D         cmp ah, $0D        ; CR
0137+  0F40 C6 C2 0F      je _gets_end
0138+  0F43 76 5C         cmp ah, $5C        ; '\\'
0139+  0F45 C6 83 0F      je _gets_escape
0140+  0F48               
0141+  0F48 76 08         cmp ah, $08      ; check for backspace
0142+  0F4A C6 53 0F      je _gets_backspace
0143+  0F4D             
0144+  0F4D 1A            mov al, ah
0145+  0F4E 3E            mov [d], al
0146+  0F4F 79            inc d
0147+  0F50 0A 2B 0F      jmp _gets_loop
0148+  0F53             _gets_backspace:
0149+  0F53 7F            dec d
0150+  0F54 0A 2B 0F      jmp _gets_loop
0151+  0F57             _gets_ansi_esc:
0152+  0F57 19 01         mov al, 1
0153+  0F59 05 03         syscall sys_io        ; receive in AH without echo
0154+  0F5B B9 00         cmp al, 0          ; check error code (AL)
0155+  0F5D C6 57 0F      je _gets_ansi_esc    ; if no char received, retry
0156+  0F60 76 5B         cmp ah, '['
0157+  0F62 C7 2B 0F      jne _gets_loop
0158+  0F65             _gets_ansi_esc_2:
0159+  0F65 19 01         mov al, 1
0160+  0F67 05 03         syscall sys_io          ; receive in AH without echo
0161+  0F69 B9 00         cmp al, 0            ; check error code (AL)
0162+  0F6B C6 65 0F      je _gets_ansi_esc_2  ; if no char received, retry
0163+  0F6E 76 44         cmp ah, 'D'
0164+  0F70 C6 7B 0F      je _gets_left_arrow
0165+  0F73 76 43         cmp ah, 'C'
0166+  0F75 C6 7F 0F      je _gets_right_arrow
0167+  0F78 0A 2B 0F      jmp _gets_loop
0168+  0F7B             _gets_left_arrow:
0169+  0F7B 7F            dec d
0170+  0F7C 0A 2B 0F      jmp _gets_loop
0171+  0F7F             _gets_right_arrow:
0172+  0F7F 79            inc d
0173+  0F80 0A 2B 0F      jmp _gets_loop
0174+  0F83             _gets_escape:
0175+  0F83 19 01         mov al, 1
0176+  0F85 05 03         syscall sys_io      ; receive in AH
0177+  0F87 B9 00         cmp al, 0        ; check error code (AL)
0178+  0F89 C6 83 0F      je _gets_escape      ; if no char received, retry
0179+  0F8C 76 6E         cmp ah, 'n'
0180+  0F8E C6 AD 0F      je _gets_LF
0181+  0F91 76 72         cmp ah, 'r'
0182+  0F93 C6 B4 0F      je _gets_CR
0183+  0F96 76 30         cmp ah, '0'
0184+  0F98 C6 BB 0F      je _gets_NULL
0185+  0F9B 76 5C         cmp ah, $5C  ; '\'
0186+  0F9D C6 A6 0F      je _gets_slash
0187+  0FA0 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0188+  0FA1 3E            mov [d], al
0189+  0FA2 79            inc d
0190+  0FA3 0A 2B 0F      jmp _gets_loop
0191+  0FA6             _gets_slash:
0192+  0FA6 19 5C         mov al, $5C
0193+  0FA8 3E            mov [d], al
0194+  0FA9 79            inc d
0195+  0FAA 0A 2B 0F      jmp _gets_loop
0196+  0FAD             _gets_LF:
0197+  0FAD 19 0A         mov al, $0A
0198+  0FAF 3E            mov [d], al
0199+  0FB0 79            inc d
0200+  0FB1 0A 2B 0F      jmp _gets_loop
0201+  0FB4             _gets_CR:
0202+  0FB4 19 0D         mov al, $0D
0203+  0FB6 3E            mov [d], al
0204+  0FB7 79            inc d
0205+  0FB8 0A 2B 0F      jmp _gets_loop
0206+  0FBB             _gets_NULL:
0207+  0FBB 19 00         mov al, $00
0208+  0FBD 3E            mov [d], al
0209+  0FBE 79            inc d
0210+  0FBF 0A 2B 0F      jmp _gets_loop
0211+  0FC2             _gets_end:
0212+  0FC2 19 00         mov al, 0
0213+  0FC4 3E            mov [d], al        ; terminate string
0214+  0FC5 E7            pop d
0215+  0FC6 E4            pop a
0216+  0FC7 09            ret
0217+  0FC8             
0218+  0FC8             
0219+  0FC8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0220+  0FC8             ;; INPUT TEXT
0221+  0FC8             ;; terminated with CTRL+D
0222+  0FC8             ;; pointer in D
0223+  0FC8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0224+  0FC8             _gettxt:
0225+  0FC8 D7            push a
0226+  0FC9 DA            push d
0227+  0FCA             _gettxt_loop:
0228+  0FCA 19 01         mov al, 1
0229+  0FCC 05 03         syscall sys_io      ; receive in AH
0230+  0FCE B9 00         cmp al, 0        ; check error code (AL)
0231+  0FD0 C6 CA 0F      je _gettxt_loop    ; if no char received, retry
0232+  0FD3 76 04         cmp ah, 4      ; EOT
0233+  0FD5 C6 13 10      je _gettxt_end
0234+  0FD8 76 08         cmp ah, $08      ; check for backspace
0235+  0FDA C6 0F 10      je _gettxt_backspace
0236+  0FDD 76 5C         cmp ah, $5C        ; '\'
0237+  0FDF C6 E8 0F      je _gettxt_escape
0238+  0FE2 1A            mov al, ah
0239+  0FE3 3E            mov [d], al
0240+  0FE4 79            inc d
0241+  0FE5 0A CA 0F      jmp _gettxt_loop
0242+  0FE8             _gettxt_escape:
0243+  0FE8 19 01         mov al, 1
0244+  0FEA 05 03         syscall sys_io      ; receive in AH
0245+  0FEC B9 00         cmp al, 0        ; check error code (AL)
0246+  0FEE C6 E8 0F      je _gettxt_escape    ; if no char received, retry
0247+  0FF1 76 6E         cmp ah, 'n'
0248+  0FF3 C6 01 10      je _gettxt_LF
0249+  0FF6 76 72         cmp ah, 'r'
0250+  0FF8 C6 08 10      je _gettxt_CR
0251+  0FFB 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0252+  0FFC 3E            mov [d], al
0253+  0FFD 79            inc d
0254+  0FFE 0A CA 0F      jmp _gettxt_loop
0255+  1001             _gettxt_LF:
0256+  1001 19 0A         mov al, $0A
0257+  1003 3E            mov [d], al
0258+  1004 79            inc d
0259+  1005 0A CA 0F      jmp _gettxt_loop
0260+  1008             _gettxt_CR:
0261+  1008 19 0D         mov al, $0D
0262+  100A 3E            mov [d], al
0263+  100B 79            inc d
0264+  100C 0A CA 0F      jmp _gettxt_loop
0265+  100F             _gettxt_backspace:
0266+  100F 7F            dec d
0267+  1010 0A CA 0F      jmp _gettxt_loop
0268+  1013             _gettxt_end:
0269+  1013 19 00         mov al, 0
0270+  1015 3E            mov [d], al        ; terminate string
0271+  1016 E7            pop d
0272+  1017 E4            pop a
0273+  1018 09            ret
0274+  1019             
0275+  1019             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276+  1019             ; PRINT NEW LINE
0277+  1019             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0278+  1019             printnl:
0279+  1019 D7            push a
0280+  101A 10 00 0A      mov a, $0A00
0281+  101D 05 03         syscall sys_io
0282+  101F 10 00 0D      mov a, $0D00
0283+  1022 05 03         syscall sys_io
0284+  1024 E4            pop a
0285+  1025 09            ret
0286+  1026             
0287+  1026             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0288+  1026             ; _strtoint
0289+  1026             ; 4 digit hex string number in d
0290+  1026             ; integer returned in A
0291+  1026             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0292+  1026             _strtointx:
0293+  1026 D8            push b
0294+  1027 32            mov bl, [d]
0295+  1028 37            mov bh, bl
0296+  1029 33 01 00      mov bl, [d + 1]
0297+  102C 07 DF 0E      call _atoi        ; convert to int in AL
0298+  102F 23            mov ah, al        ; move to AH
0299+  1030 33 02 00      mov bl, [d + 2]
0300+  1033 37            mov bh, bl
0301+  1034 33 03 00      mov bl, [d + 3]
0302+  1037 07 DF 0E      call _atoi        ; convert to int in AL
0303+  103A E5            pop b
0304+  103B 09            ret
0305+  103C             
0306+  103C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0307+  103C             ; _strtoint
0308+  103C             ; 5 digit base10 string number in d
0309+  103C             ; integer returned in A
0310+  103C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0311+  103C             _strtoint:
0312+  103C E2            push si
0313+  103D D8            push b
0314+  103E D9            push c
0315+  103F DA            push d
0316+  1040 07 81 0E      call _strlen      ; get string length in C
0317+  1043 7E            dec c
0318+  1044 FD 4E         mov si, d
0319+  1046 12            mov a, c
0320+  1047 FD 99         shl a
0321+  1049 3B B8 11      mov d, table_power
0322+  104C 59            add d, a
0323+  104D 38 00 00      mov c, 0
0324+  1050             _strtoint_L0:
0325+  1050 F6            lodsb      ; load ASCII to al
0326+  1051 B9 00         cmp al, 0
0327+  1053 C6 66 10      je _strtoint_end
0328+  1056 6F 30         sub al, $30    ; make into integer
0329+  1058 22 00         mov ah, 0
0330+  105A 2A            mov b, [d]
0331+  105B AC            mul a, b      ; result in B since it fits in 16bits
0332+  105C 11            mov a, b
0333+  105D 28            mov b, c
0334+  105E 54            add a, b
0335+  105F 39            mov c, a
0336+  1060 63 02 00      sub d, 2
0337+  1063 0A 50 10      jmp _strtoint_L0
0338+  1066             _strtoint_end:
0339+  1066 12            mov a, c
0340+  1067 E7            pop d
0341+  1068 E6            pop c
0342+  1069 E5            pop b
0343+  106A EF            pop si
0344+  106B 09            ret
0345+  106C             
0346+  106C             
0347+  106C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0348+  106C             ; PRINT NULL TERMINATED STRING
0349+  106C             ; pointer in D
0350+  106C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0351+  106C             _puts:
0352+  106C D7            push a
0353+  106D DA            push d
0354+  106E             _puts_L1:
0355+  106E 1E            mov al, [d]
0356+  106F B9 00         cmp al, 0
0357+  1071 C6 7D 10      jz _puts_END
0358+  1074 23            mov ah, al
0359+  1075 19 00         mov al, 0
0360+  1077 05 03         syscall sys_io
0361+  1079 79            inc d
0362+  107A 0A 6E 10      jmp _puts_L1
0363+  107D             _puts_END:
0364+  107D E7            pop d
0365+  107E E4            pop a
0366+  107F 09            ret
0367+  1080             
0368+  1080             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0369+  1080             ; PRINT N SIZE STRING
0370+  1080             ; pointer in D
0371+  1080             ; size in C
0372+  1080             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0373+  1080             _putsn:
0374+  1080 DB            push al
0375+  1081 DA            push d
0376+  1082 D9            push c
0377+  1083             _putsn_L0:
0378+  1083 1E            mov al, [d]
0379+  1084 23            mov ah, al
0380+  1085 19 00         mov al, 0
0381+  1087 05 03         syscall sys_io
0382+  1089 79            inc d
0383+  108A 7E            dec c  
0384+  108B C2 00 00      cmp c, 0
0385+  108E C7 83 10      jne _putsn_L0
0386+  1091             _putsn_end:
0387+  1091 E6            pop c
0388+  1092 E7            pop d
0389+  1093 E8            pop al
0390+  1094 09            ret
0391+  1095             
0392+  1095             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0393+  1095             ; print 16bit decimal number
0394+  1095             ; input number in A
0395+  1095             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0396+  1095             print_u16d:
0397+  1095 D7            push a
0398+  1096 D8            push b
0399+  1097 26 10 27      mov b, 10000
0400+  109A AE            div a, b      ; get 10000's coeff.
0401+  109B 07 BD 10      call print_number
0402+  109E 11            mov a, b
0403+  109F 26 E8 03      mov b, 1000
0404+  10A2 AE            div a, b      ; get 1000's coeff.
0405+  10A3 07 BD 10      call print_number
0406+  10A6 11            mov a, b
0407+  10A7 26 64 00      mov b, 100
0408+  10AA AE            div a, b
0409+  10AB 07 BD 10      call print_number
0410+  10AE 11            mov a, b
0411+  10AF 26 0A 00      mov b, 10
0412+  10B2 AE            div a, b
0413+  10B3 07 BD 10      call print_number
0414+  10B6 1B            mov al, bl      ; 1's coeff in bl
0415+  10B7 07 BD 10      call print_number
0416+  10BA E5            pop b
0417+  10BB E4            pop a
0418+  10BC 09            ret
0419+  10BD             
0420+  10BD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0421+  10BD             ; print AL
0422+  10BD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0423+  10BD             print_number:
0424+  10BD 6A 30         add al, $30
0425+  10BF 23            mov ah, al
0426+  10C0 07 22 0F      call _putchar
0427+  10C3 09            ret
0428+  10C4             
0429+  10C4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0430+  10C4             ; PRINT 16BIT HEX INTEGER
0431+  10C4             ; integer value in reg B
0432+  10C4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0433+  10C4             print_u16x:
0434+  10C4 D7            push a
0435+  10C5 D8            push b
0436+  10C6 DD            push bl
0437+  10C7 30            mov bl, bh
0438+  10C8 07 F0 0E      call _itoa        ; convert bh to char in A
0439+  10CB 2F            mov bl, al        ; save al
0440+  10CC 19 00         mov al, 0
0441+  10CE 05 03         syscall sys_io        ; display AH
0442+  10D0 24            mov ah, bl        ; retrieve al
0443+  10D1 19 00         mov al, 0
0444+  10D3 05 03         syscall sys_io        ; display AL
0445+  10D5             
0446+  10D5 EA            pop bl
0447+  10D6 07 F0 0E      call _itoa        ; convert bh to char in A
0448+  10D9 2F            mov bl, al        ; save al
0449+  10DA 19 00         mov al, 0
0450+  10DC 05 03         syscall sys_io        ; display AH
0451+  10DE 24            mov ah, bl        ; retrieve al
0452+  10DF 19 00         mov al, 0
0453+  10E1 05 03         syscall sys_io        ; display AL
0454+  10E3             
0455+  10E3 E5            pop b
0456+  10E4 E4            pop a
0457+  10E5 09            ret
0458+  10E6             
0459+  10E6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0460+  10E6             ; INPUT 16BIT HEX INTEGER
0461+  10E6             ; read 16bit integer into A
0462+  10E6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0463+  10E6             scan_u16x:
0464+  10E6 F8 10 00      enter 16
0465+  10E9 D8            push b
0466+  10EA DA            push d
0467+  10EB             
0468+  10EB FA F1 FF      lea d, [bp + -15]
0469+  10EE 07 29 0F      call _gets        ; get number
0470+  10F1             
0471+  10F1 32            mov bl, [d]
0472+  10F2 37            mov bh, bl
0473+  10F3 33 01 00      mov bl, [d + 1]
0474+  10F6 07 DF 0E      call _atoi        ; convert to int in AL
0475+  10F9 23            mov ah, al        ; move to AH
0476+  10FA             
0477+  10FA 33 02 00      mov bl, [d + 2]
0478+  10FD 37            mov bh, bl
0479+  10FE 33 03 00      mov bl, [d + 3]
0480+  1101 07 DF 0E      call _atoi        ; convert to int in AL
0481+  1104             
0482+  1104 E7            pop d
0483+  1105 E5            pop b
0484+  1106 F9            leave
0485+  1107 09            ret
0486+  1108             
0487+  1108             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0488+  1108             ; PRINT 8bit HEX INTEGER
0489+  1108             ; integer value in reg bl
0490+  1108             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0491+  1108             print_u8x:
0492+  1108 D7            push a
0493+  1109 DD            push bl
0494+  110A             
0495+  110A 07 F0 0E      call _itoa        ; convert bl to char in A
0496+  110D 2F            mov bl, al        ; save al
0497+  110E 19 00         mov al, 0
0498+  1110 05 03         syscall sys_io        ; display AH
0499+  1112 24            mov ah, bl        ; retrieve al
0500+  1113 19 00         mov al, 0
0501+  1115 05 03         syscall sys_io        ; display AL
0502+  1117             
0503+  1117 EA            pop bl
0504+  1118 E4            pop a
0505+  1119 09            ret
0506+  111A             
0507+  111A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0508+  111A             ; print 8bit decimal unsigned number
0509+  111A             ; input number in AL
0510+  111A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0511+  111A             print_u8d:
0512+  111A D7            push a
0513+  111B D8            push b
0514+  111C             
0515+  111C 22 00         mov ah, 0
0516+  111E 26 64 00      mov b, 100
0517+  1121 AE            div a, b
0518+  1122 D8            push b      ; save remainder
0519+  1123 B9 00         cmp al, 0
0520+  1125 C6 2F 11      je skip100
0521+  1128 6A 30         add al, $30
0522+  112A 23            mov ah, al
0523+  112B 19 00         mov al, 0
0524+  112D 05 03         syscall sys_io  ; print coeff
0525+  112F             skip100:
0526+  112F E4            pop a
0527+  1130 22 00         mov ah, 0
0528+  1132 26 0A 00      mov b, 10
0529+  1135 AE            div a, b
0530+  1136 D8            push b      ; save remainder
0531+  1137 B9 00         cmp al, 0
0532+  1139 C6 43 11      je skip10
0533+  113C 6A 30         add al, $30
0534+  113E 23            mov ah, al
0535+  113F 19 00         mov al, 0
0536+  1141 05 03         syscall sys_io  ; print coeff
0537+  1143             skip10:
0538+  1143 E4            pop a
0539+  1144 1B            mov al, bl
0540+  1145 6A 30         add al, $30
0541+  1147 23            mov ah, al
0542+  1148 19 00         mov al, 0
0543+  114A 05 03         syscall sys_io  ; print coeff
0544+  114C E5            pop b
0545+  114D E4            pop a
0546+  114E 09            ret
0547+  114F             
0548+  114F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0549+  114F             ; INPUT 8BIT HEX INTEGER
0550+  114F             ; read 8bit integer into AL
0551+  114F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0552+  114F             scan_u8x:
0553+  114F F8 04 00      enter 4
0554+  1152 D8            push b
0555+  1153 DA            push d
0556+  1154             
0557+  1154 FA FD FF      lea d, [bp + -3]
0558+  1157 07 29 0F      call _gets        ; get number
0559+  115A             
0560+  115A 32            mov bl, [d]
0561+  115B 37            mov bh, bl
0562+  115C 33 01 00      mov bl, [d + 1]
0563+  115F 07 DF 0E      call _atoi        ; convert to int in AL
0564+  1162             
0565+  1162 E7            pop d
0566+  1163 E5            pop b
0567+  1164 F9            leave
0568+  1165 09            ret
0569+  1166             
0570+  1166             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0571+  1166             ; input decimal number
0572+  1166             ; result in A
0573+  1166             ; 655'\0'
0574+  1166             ; low--------high
0575+  1166             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0576+  1166             scan_u16d:
0577+  1166 F8 08 00      enter 8
0578+  1169 E2            push si
0579+  116A D8            push b
0580+  116B D9            push c
0581+  116C DA            push d
0582+  116D FA F9 FF      lea d, [bp +- 7]
0583+  1170 07 29 0F      call _gets
0584+  1173 07 81 0E      call _strlen      ; get string length in C
0585+  1176 7E            dec c
0586+  1177 FD 4E         mov si, d
0587+  1179 12            mov a, c
0588+  117A FD 99         shl a
0589+  117C 3B B8 11      mov d, table_power
0590+  117F 59            add d, a
0591+  1180 38 00 00      mov c, 0
0592+  1183             mul_loop:
0593+  1183 F6            lodsb      ; load ASCII to al
0594+  1184 B9 00         cmp al, 0
0595+  1186 C6 99 11      je mul_exit
0596+  1189 6F 30         sub al, $30    ; make into integer
0597+  118B 22 00         mov ah, 0
0598+  118D 2A            mov b, [d]
0599+  118E AC            mul a, b      ; result in B since it fits in 16bits
0600+  118F 11            mov a, b
0601+  1190 28            mov b, c
0602+  1191 54            add a, b
0603+  1192 39            mov c, a
0604+  1193 63 02 00      sub d, 2
0605+  1196 0A 83 11      jmp mul_loop
0606+  1199             mul_exit:
0607+  1199 12            mov a, c
0608+  119A E7            pop d
0609+  119B E6            pop c
0610+  119C E5            pop b
0611+  119D EF            pop si
0612+  119E F9            leave
0613+  119F 09            ret
0614+  11A0             
0615+  11A0             
0616+  11A0 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0616+  11A4 34 35 36 37 
0616+  11A8 38 39 41 42 
0616+  11AC 43 44 45 46 
0617+  11B0 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0617+  11B4 1B 5B 48 00 
0618+  11B8             
0619+  11B8             table_power:
0620+  11B8 01 00         .dw 1
0621+  11BA 0A 00         .dw 10
0622+  11BC 64 00         .dw 100
0623+  11BE E8 03         .dw 1000
0624+  11C0 10 27         .dw 100001925   11C2             ; --- END INLINE ASM BLOCK
1926   11C2             
1927   11C2 F9            leave
1928   11C3 09            ret
1929   11C4             
1930   11C4             include_ctype_lib:
1931   11C4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1932   11C7             
1933   11C7             ; --- BEGIN INLINE ASM BLOCK
1934   11C7             .include "lib/ctype.asm"
0001+  11C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  11C7             ; ctype.s
0003+  11C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  11C7             
0005+  11C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  11C7             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  11C7             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  11C7             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  11C7             ;; characters are supported.
0010+  11C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  11C7             ;; _isalnum 
0012+  11C7             ;; _isalpha 
0013+  11C7             ;; islower 
0014+  11C7             ;; isupper 
0015+  11C7             ;; _isdigit 
0016+  11C7             ;; isxdigit
0017+  11C7             ;; iscntrl 
0018+  11C7             ;; isgraph 
0019+  11C7             ;; _isspace 
0020+  11C7             ;; isblank 
0021+  11C7             ;; isprint 
0022+  11C7             ;; ispunct 
0023+  11C7             ;; tolower 
0024+  11C7             ;; toupper
0025+  11C7             
0026+  11C7             
0027+  11C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  11C7             ;; IS ALPHANUMERIC
0029+  11C7             ;; sets ZF according with result
0030+  11C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  11C7             _isalnum:
0032+  11C7 07 E4 11    	call _isalpha
0033+  11CA C6 D0 11    	je _isalnum_exit
0034+  11CD 07 D1 11    	call _isdigit
0035+  11D0             _isalnum_exit:
0036+  11D0 09          	ret	
0037+  11D1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  11D1             ;; IS DIGIT
0039+  11D1             ;; sets ZF according with result
0040+  11D1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  11D1             _isdigit:
0042+  11D1 DB          	push al
0043+  11D2 B9 30       	cmp al, '0'
0044+  11D4 C8 E0 11    	jlu _isdigit_false
0045+  11D7 B9 39       	cmp al, '9'
0046+  11D9 D1 E0 11    	jgu _isdigit_false
0047+  11DC 87 00       	and al, 0	; set ZF
0048+  11DE E8          	pop al
0049+  11DF 09          	ret
0050+  11E0             _isdigit_false:
0051+  11E0 8B 01       	or al, 1	; clear ZF
0052+  11E2 E8          	pop al
0053+  11E3 09          	ret	
0054+  11E4             	
0055+  11E4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  11E4             ;; IS ALPHA
0057+  11E4             ;; sets ZF according with result
0058+  11E4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  11E4             _isalpha:
0060+  11E4 DB          	push al
0061+  11E5 B9 5F       	cmp al, '_'
0062+  11E7 C6 07 12    	je _isalpha_true
0063+  11EA B9 2E       	cmp al, '.'
0064+  11EC C6 07 12    	je _isalpha_true
0065+  11EF B9 41       	cmp al, 'A'
0066+  11F1 C8 03 12    	jlu _isalpha_false
0067+  11F4 B9 7A       	cmp al, 'z'
0068+  11F6 D1 03 12    	jgu _isalpha_false
0069+  11F9 B9 5A       	cmp al, 'Z'
0070+  11FB D0 07 12    	jleu _isalpha_true
0071+  11FE B9 61       	cmp al, 'a'
0072+  1200 C9 07 12    	jgeu _isalpha_true
0073+  1203             _isalpha_false:
0074+  1203 8B 01       	or al, 1	; clear ZF
0075+  1205 E8          	pop al
0076+  1206 09          	ret
0077+  1207             _isalpha_true:
0078+  1207 87 00       	and al, 0	; set ZF
0079+  1209 E8          	pop al
0080+  120A 09          	ret
0081+  120B             
0082+  120B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  120B             ;; IS PATH-ALPHA
0084+  120B             ;; sets ZF according with result
0085+  120B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  120B             ispath:
0087+  120B DB          	push al
0088+  120C 07 D1 11    	call _isdigit
0089+  120F C6 39 12    	je ispath_true
0090+  1212 B9 5F       	cmp al, '_'
0091+  1214 C6 39 12    	je ispath_true
0092+  1217 B9 2F       	cmp al, '/'
0093+  1219 C6 39 12    	je ispath_true
0094+  121C B9 2E       	cmp al, '.'
0095+  121E C6 39 12    	je ispath_true
0096+  1221 B9 41       	cmp al, 'A'
0097+  1223 C8 35 12    	jlu ispath_false
0098+  1226 B9 7A       	cmp al, 'z'
0099+  1228 D1 35 12    	jgu ispath_false
0100+  122B B9 5A       	cmp al, 'Z'
0101+  122D D0 39 12    	jleu ispath_true
0102+  1230 B9 61       	cmp al, 'a'
0103+  1232 C9 39 12    	jgeu ispath_true
0104+  1235             ispath_false:
0105+  1235 8B 01       	or al, 1	; clear ZF
0106+  1237 E8          	pop al
0107+  1238 09          	ret
0108+  1239             ispath_true:
0109+  1239 87 00       	and al, 0	; set ZF
0110+  123B E8          	pop al
0111+  123C 09          	ret
0112+  123D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  123D             ;; IS SPACE
0114+  123D             ;; sets ZF according with result
0115+  123D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  123D             _isspace:
0117+  123D B9 20       	cmp al, $20		; ' '
0118+  123F C6 53 12    	je _isspace_exit
0119+  1242 B9 09       	cmp al, $09		; '\t'
0120+  1244 C6 53 12    	je _isspace_exit
0121+  1247 B9 0A       	cmp al, $0A		; '\n'
0122+  1249 C6 53 12    	je _isspace_exit
0123+  124C B9 0D       	cmp al, $0D		; '\r'
0124+  124E C6 53 12    	je _isspace_exit
0125+  1251 B9 0B       	cmp al, $0B		; '\v'
0126+  1253             _isspace_exit:
0127+  1253 09          	ret	
0128+  1254             
0129+  1254             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  1254             ; TO LOWER
0131+  1254             ; input in AL
0132+  1254             ; output in AL
0133+  1254             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  1254             _to_lower:
0135+  1254 B9 5A       	cmp al, 'Z'
0136+  1256 D1 5B 12    	jgu _to_lower_ret
0137+  1259 6A 20       	add al, $20				; convert to lower case
0138+  125B             _to_lower_ret:
0139+  125B 09          	ret
0140+  125C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  125C             ; TO UPPER
0142+  125C             ; input in AL
0143+  125C             ; output in AL
0144+  125C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  125C             _to_upper:
0146+  125C B9 61       	cmp al, 'a'
0147+  125E C8 63 12    	jlu _to_upper_ret
0148+  1261 6F 20       	sub al, $20			; convert to upper case
0149+  1263             _to_upper_ret:
0150+  1263 09          	ret
0151+  1264             
1935   1264             ; --- END INLINE ASM BLOCK
1936   1264             
1937   1264 F9            leave
1938   1265 09            ret
1939   1266             
1940   1266             is_space:
1941   1266 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1942   1269             ;; return c == ' ' || c == '\t' || c == '\n' || c == '\r'; 
1943   1269 FA 05 00      lea d, [bp + 5] ; $c
1944   126C 32            mov bl, [d]
1945   126D A7 00         mov bh, 0
1946   126F             ; START RELATIONAL
1947   126F D7            push a
1948   1270 11            mov a, b
1949   1271 26 20 00      mov b, $20
1950   1274 B0            cmp a, b
1951   1275 FD 71         seq ; ==
1952   1277 E4            pop a
1953   1278             ; END RELATIONAL
1954   1278 D7            push a
1955   1279 11            mov a, b
1956   127A FA 05 00      lea d, [bp + 5] ; $c
1957   127D 32            mov bl, [d]
1958   127E A7 00         mov bh, 0
1959   1280             ; START RELATIONAL
1960   1280 D7            push a
1961   1281 11            mov a, b
1962   1282 26 09 00      mov b, $9
1963   1285 B0            cmp a, b
1964   1286 FD 71         seq ; ==
1965   1288 E4            pop a
1966   1289             ; END RELATIONAL
1967   1289 FD A8         sor a, b ; ||
1968   128B 11            mov a, b
1969   128C FA 05 00      lea d, [bp + 5] ; $c
1970   128F 32            mov bl, [d]
1971   1290 A7 00         mov bh, 0
1972   1292             ; START RELATIONAL
1973   1292 D7            push a
1974   1293 11            mov a, b
1975   1294 26 0A 00      mov b, $a
1976   1297 B0            cmp a, b
1977   1298 FD 71         seq ; ==
1978   129A E4            pop a
1979   129B             ; END RELATIONAL
1980   129B FD A8         sor a, b ; ||
1981   129D 11            mov a, b
1982   129E FA 05 00      lea d, [bp + 5] ; $c
1983   12A1 32            mov bl, [d]
1984   12A2 A7 00         mov bh, 0
1985   12A4             ; START RELATIONAL
1986   12A4 D7            push a
1987   12A5 11            mov a, b
1988   12A6 26 0D 00      mov b, $d
1989   12A9 B0            cmp a, b
1990   12AA FD 71         seq ; ==
1991   12AC E4            pop a
1992   12AD             ; END RELATIONAL
1993   12AD FD A8         sor a, b ; ||
1994   12AF E4            pop a
1995   12B0 F9            leave
1996   12B1 09            ret
1997   12B2             
1998   12B2             is_digit:
1999   12B2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2000   12B5             ;; return c >= '0' && c <= '9'; 
2001   12B5 FA 05 00      lea d, [bp + 5] ; $c
2002   12B8 32            mov bl, [d]
2003   12B9 A7 00         mov bh, 0
2004   12BB             ; START RELATIONAL
2005   12BB D7            push a
2006   12BC 11            mov a, b
2007   12BD 26 30 00      mov b, $30
2008   12C0 B0            cmp a, b
2009   12C1 FD 80         sge ; >=
2010   12C3 E4            pop a
2011   12C4             ; END RELATIONAL
2012   12C4 D7            push a
2013   12C5 11            mov a, b
2014   12C6 FA 05 00      lea d, [bp + 5] ; $c
2015   12C9 32            mov bl, [d]
2016   12CA A7 00         mov bh, 0
2017   12CC             ; START RELATIONAL
2018   12CC D7            push a
2019   12CD 11            mov a, b
2020   12CE 26 39 00      mov b, $39
2021   12D1 B0            cmp a, b
2022   12D2 FD 74         sle ; <=
2023   12D4 E4            pop a
2024   12D5             ; END RELATIONAL
2025   12D5 FD A7         sand a, b ; &&
2026   12D7 E4            pop a
2027   12D8 F9            leave
2028   12D9 09            ret
2029   12DA             
2030   12DA             is_alpha:
2031   12DA F8 00 00      enter 0 ; (push bp; mov bp, sp)
2032   12DD             ;; return(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '_'); 
2033   12DD FA 05 00      lea d, [bp + 5] ; $c
2034   12E0 32            mov bl, [d]
2035   12E1 A7 00         mov bh, 0
2036   12E3             ; START RELATIONAL
2037   12E3 D7            push a
2038   12E4 11            mov a, b
2039   12E5 26 61 00      mov b, $61
2040   12E8 B0            cmp a, b
2041   12E9 FD 80         sge ; >=
2042   12EB E4            pop a
2043   12EC             ; END RELATIONAL
2044   12EC D7            push a
2045   12ED 11            mov a, b
2046   12EE FA 05 00      lea d, [bp + 5] ; $c
2047   12F1 32            mov bl, [d]
2048   12F2 A7 00         mov bh, 0
2049   12F4             ; START RELATIONAL
2050   12F4 D7            push a
2051   12F5 11            mov a, b
2052   12F6 26 7A 00      mov b, $7a
2053   12F9 B0            cmp a, b
2054   12FA FD 74         sle ; <=
2055   12FC E4            pop a
2056   12FD             ; END RELATIONAL
2057   12FD FD A7         sand a, b ; &&
2058   12FF E4            pop a
2059   1300 D7            push a
2060   1301 11            mov a, b
2061   1302 FA 05 00      lea d, [bp + 5] ; $c
2062   1305 32            mov bl, [d]
2063   1306 A7 00         mov bh, 0
2064   1308             ; START RELATIONAL
2065   1308 D7            push a
2066   1309 11            mov a, b
2067   130A 26 41 00      mov b, $41
2068   130D B0            cmp a, b
2069   130E FD 80         sge ; >=
2070   1310 E4            pop a
2071   1311             ; END RELATIONAL
2072   1311 D7            push a
2073   1312 11            mov a, b
2074   1313 FA 05 00      lea d, [bp + 5] ; $c
2075   1316 32            mov bl, [d]
2076   1317 A7 00         mov bh, 0
2077   1319             ; START RELATIONAL
2078   1319 D7            push a
2079   131A 11            mov a, b
2080   131B 26 5A 00      mov b, $5a
2081   131E B0            cmp a, b
2082   131F FD 74         sle ; <=
2083   1321 E4            pop a
2084   1322             ; END RELATIONAL
2085   1322 FD A7         sand a, b ; &&
2086   1324 E4            pop a
2087   1325 FD A8         sor a, b ; ||
2088   1327 11            mov a, b
2089   1328 FA 05 00      lea d, [bp + 5] ; $c
2090   132B 32            mov bl, [d]
2091   132C A7 00         mov bh, 0
2092   132E             ; START RELATIONAL
2093   132E D7            push a
2094   132F 11            mov a, b
2095   1330 26 5F 00      mov b, $5f
2096   1333 B0            cmp a, b
2097   1334 FD 71         seq ; ==
2098   1336 E4            pop a
2099   1337             ; END RELATIONAL
2100   1337 FD A8         sor a, b ; ||
2101   1339 E4            pop a
2102   133A F9            leave
2103   133B 09            ret
2104   133C             
2105   133C             toupper:
2106   133C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2107   133F             ;; if (ch >= 'a' && ch <= 'z') { 
2108   133F             _if27_cond:
2109   133F FA 05 00      lea d, [bp + 5] ; $ch
2110   1342 32            mov bl, [d]
2111   1343 A7 00         mov bh, 0
2112   1345             ; START RELATIONAL
2113   1345 D7            push a
2114   1346 11            mov a, b
2115   1347 26 61 00      mov b, $61
2116   134A B0            cmp a, b
2117   134B FD 80         sge ; >=
2118   134D E4            pop a
2119   134E             ; END RELATIONAL
2120   134E D7            push a
2121   134F 11            mov a, b
2122   1350 FA 05 00      lea d, [bp + 5] ; $ch
2123   1353 32            mov bl, [d]
2124   1354 A7 00         mov bh, 0
2125   1356             ; START RELATIONAL
2126   1356 D7            push a
2127   1357 11            mov a, b
2128   1358 26 7A 00      mov b, $7a
2129   135B B0            cmp a, b
2130   135C FD 74         sle ; <=
2131   135E E4            pop a
2132   135F             ; END RELATIONAL
2133   135F FD A7         sand a, b ; &&
2134   1361 E4            pop a
2135   1362 C0 00 00      cmp b, 0
2136   1365 C6 7F 13      je _if27_else
2137   1368             _if27_true:
2138   1368             ;; return ch - 'a' + 'A'; 
2139   1368 FA 05 00      lea d, [bp + 5] ; $ch
2140   136B 32            mov bl, [d]
2141   136C A7 00         mov bh, 0
2142   136E             ; START TERMS
2143   136E D7            push a
2144   136F 11            mov a, b
2145   1370 26 61 00      mov b, $61
2146   1373 60            sub a, b
2147   1374 26 41 00      mov b, $41
2148   1377 54            add a, b
2149   1378 27            mov b, a
2150   1379 E4            pop a
2151   137A             ; END TERMS
2152   137A F9            leave
2153   137B 09            ret
2154   137C 0A 87 13      jmp _if27_exit
2155   137F             _if27_else:
2156   137F             ;; return ch; 
2157   137F FA 05 00      lea d, [bp + 5] ; $ch
2158   1382 32            mov bl, [d]
2159   1383 A7 00         mov bh, 0
2160   1385 F9            leave
2161   1386 09            ret
2162   1387             _if27_exit:
2163   1387 F9            leave
2164   1388 09            ret
2165   1389             
2166   1389             is_delimiter:
2167   1389 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2168   138C             ;; if( 
2169   138C             _if28_cond:
2170   138C FA 05 00      lea d, [bp + 5] ; $c
2171   138F 32            mov bl, [d]
2172   1390 A7 00         mov bh, 0
2173   1392             ; START RELATIONAL
2174   1392 D7            push a
2175   1393 11            mov a, b
2176   1394 26 40 00      mov b, $40
2177   1397 B0            cmp a, b
2178   1398 FD 71         seq ; ==
2179   139A E4            pop a
2180   139B             ; END RELATIONAL
2181   139B D7            push a
2182   139C 11            mov a, b
2183   139D FA 05 00      lea d, [bp + 5] ; $c
2184   13A0 32            mov bl, [d]
2185   13A1 A7 00         mov bh, 0
2186   13A3             ; START RELATIONAL
2187   13A3 D7            push a
2188   13A4 11            mov a, b
2189   13A5 26 23 00      mov b, $23
2190   13A8 B0            cmp a, b
2191   13A9 FD 71         seq ; ==
2192   13AB E4            pop a
2193   13AC             ; END RELATIONAL
2194   13AC FD A8         sor a, b ; ||
2195   13AE 11            mov a, b
2196   13AF FA 05 00      lea d, [bp + 5] ; $c
2197   13B2 32            mov bl, [d]
2198   13B3 A7 00         mov bh, 0
2199   13B5             ; START RELATIONAL
2200   13B5 D7            push a
2201   13B6 11            mov a, b
2202   13B7 26 24 00      mov b, $24
2203   13BA B0            cmp a, b
2204   13BB FD 71         seq ; ==
2205   13BD E4            pop a
2206   13BE             ; END RELATIONAL
2207   13BE FD A8         sor a, b ; ||
2208   13C0 11            mov a, b
2209   13C1 FA 05 00      lea d, [bp + 5] ; $c
2210   13C4 32            mov bl, [d]
2211   13C5 A7 00         mov bh, 0
2212   13C7             ; START RELATIONAL
2213   13C7 D7            push a
2214   13C8 11            mov a, b
2215   13C9 26 2B 00      mov b, $2b
2216   13CC B0            cmp a, b
2217   13CD FD 71         seq ; ==
2218   13CF E4            pop a
2219   13D0             ; END RELATIONAL
2220   13D0 FD A8         sor a, b ; ||
2221   13D2 11            mov a, b
2222   13D3 FA 05 00      lea d, [bp + 5] ; $c
2223   13D6 32            mov bl, [d]
2224   13D7 A7 00         mov bh, 0
2225   13D9             ; START RELATIONAL
2226   13D9 D7            push a
2227   13DA 11            mov a, b
2228   13DB 26 2D 00      mov b, $2d
2229   13DE B0            cmp a, b
2230   13DF FD 71         seq ; ==
2231   13E1 E4            pop a
2232   13E2             ; END RELATIONAL
2233   13E2 FD A8         sor a, b ; ||
2234   13E4 11            mov a, b
2235   13E5 FA 05 00      lea d, [bp + 5] ; $c
2236   13E8 32            mov bl, [d]
2237   13E9 A7 00         mov bh, 0
2238   13EB             ; START RELATIONAL
2239   13EB D7            push a
2240   13EC 11            mov a, b
2241   13ED 26 2A 00      mov b, $2a
2242   13F0 B0            cmp a, b
2243   13F1 FD 71         seq ; ==
2244   13F3 E4            pop a
2245   13F4             ; END RELATIONAL
2246   13F4 FD A8         sor a, b ; ||
2247   13F6 11            mov a, b
2248   13F7 FA 05 00      lea d, [bp + 5] ; $c
2249   13FA 32            mov bl, [d]
2250   13FB A7 00         mov bh, 0
2251   13FD             ; START RELATIONAL
2252   13FD D7            push a
2253   13FE 11            mov a, b
2254   13FF 26 2F 00      mov b, $2f
2255   1402 B0            cmp a, b
2256   1403 FD 71         seq ; ==
2257   1405 E4            pop a
2258   1406             ; END RELATIONAL
2259   1406 FD A8         sor a, b ; ||
2260   1408 11            mov a, b
2261   1409 FA 05 00      lea d, [bp + 5] ; $c
2262   140C 32            mov bl, [d]
2263   140D A7 00         mov bh, 0
2264   140F             ; START RELATIONAL
2265   140F D7            push a
2266   1410 11            mov a, b
2267   1411 26 25 00      mov b, $25
2268   1414 B0            cmp a, b
2269   1415 FD 71         seq ; ==
2270   1417 E4            pop a
2271   1418             ; END RELATIONAL
2272   1418 FD A8         sor a, b ; ||
2273   141A 11            mov a, b
2274   141B FA 05 00      lea d, [bp + 5] ; $c
2275   141E 32            mov bl, [d]
2276   141F A7 00         mov bh, 0
2277   1421             ; START RELATIONAL
2278   1421 D7            push a
2279   1422 11            mov a, b
2280   1423 26 5B 00      mov b, $5b
2281   1426 B0            cmp a, b
2282   1427 FD 71         seq ; ==
2283   1429 E4            pop a
2284   142A             ; END RELATIONAL
2285   142A FD A8         sor a, b ; ||
2286   142C 11            mov a, b
2287   142D FA 05 00      lea d, [bp + 5] ; $c
2288   1430 32            mov bl, [d]
2289   1431 A7 00         mov bh, 0
2290   1433             ; START RELATIONAL
2291   1433 D7            push a
2292   1434 11            mov a, b
2293   1435 26 5D 00      mov b, $5d
2294   1438 B0            cmp a, b
2295   1439 FD 71         seq ; ==
2296   143B E4            pop a
2297   143C             ; END RELATIONAL
2298   143C FD A8         sor a, b ; ||
2299   143E 11            mov a, b
2300   143F FA 05 00      lea d, [bp + 5] ; $c
2301   1442 32            mov bl, [d]
2302   1443 A7 00         mov bh, 0
2303   1445             ; START RELATIONAL
2304   1445 D7            push a
2305   1446 11            mov a, b
2306   1447 26 28 00      mov b, $28
2307   144A B0            cmp a, b
2308   144B FD 71         seq ; ==
2309   144D E4            pop a
2310   144E             ; END RELATIONAL
2311   144E FD A8         sor a, b ; ||
2312   1450 11            mov a, b
2313   1451 FA 05 00      lea d, [bp + 5] ; $c
2314   1454 32            mov bl, [d]
2315   1455 A7 00         mov bh, 0
2316   1457             ; START RELATIONAL
2317   1457 D7            push a
2318   1458 11            mov a, b
2319   1459 26 29 00      mov b, $29
2320   145C B0            cmp a, b
2321   145D FD 71         seq ; ==
2322   145F E4            pop a
2323   1460             ; END RELATIONAL
2324   1460 FD A8         sor a, b ; ||
2325   1462 11            mov a, b
2326   1463 FA 05 00      lea d, [bp + 5] ; $c
2327   1466 32            mov bl, [d]
2328   1467 A7 00         mov bh, 0
2329   1469             ; START RELATIONAL
2330   1469 D7            push a
2331   146A 11            mov a, b
2332   146B 26 7B 00      mov b, $7b
2333   146E B0            cmp a, b
2334   146F FD 71         seq ; ==
2335   1471 E4            pop a
2336   1472             ; END RELATIONAL
2337   1472 FD A8         sor a, b ; ||
2338   1474 11            mov a, b
2339   1475 FA 05 00      lea d, [bp + 5] ; $c
2340   1478 32            mov bl, [d]
2341   1479 A7 00         mov bh, 0
2342   147B             ; START RELATIONAL
2343   147B D7            push a
2344   147C 11            mov a, b
2345   147D 26 7D 00      mov b, $7d
2346   1480 B0            cmp a, b
2347   1481 FD 71         seq ; ==
2348   1483 E4            pop a
2349   1484             ; END RELATIONAL
2350   1484 FD A8         sor a, b ; ||
2351   1486 11            mov a, b
2352   1487 FA 05 00      lea d, [bp + 5] ; $c
2353   148A 32            mov bl, [d]
2354   148B A7 00         mov bh, 0
2355   148D             ; START RELATIONAL
2356   148D D7            push a
2357   148E 11            mov a, b
2358   148F 26 3A 00      mov b, $3a
2359   1492 B0            cmp a, b
2360   1493 FD 71         seq ; ==
2361   1495 E4            pop a
2362   1496             ; END RELATIONAL
2363   1496 FD A8         sor a, b ; ||
2364   1498 11            mov a, b
2365   1499 FA 05 00      lea d, [bp + 5] ; $c
2366   149C 32            mov bl, [d]
2367   149D A7 00         mov bh, 0
2368   149F             ; START RELATIONAL
2369   149F D7            push a
2370   14A0 11            mov a, b
2371   14A1 26 3B 00      mov b, $3b
2372   14A4 B0            cmp a, b
2373   14A5 FD 71         seq ; ==
2374   14A7 E4            pop a
2375   14A8             ; END RELATIONAL
2376   14A8 FD A8         sor a, b ; ||
2377   14AA 11            mov a, b
2378   14AB FA 05 00      lea d, [bp + 5] ; $c
2379   14AE 32            mov bl, [d]
2380   14AF A7 00         mov bh, 0
2381   14B1             ; START RELATIONAL
2382   14B1 D7            push a
2383   14B2 11            mov a, b
2384   14B3 26 3C 00      mov b, $3c
2385   14B6 B0            cmp a, b
2386   14B7 FD 71         seq ; ==
2387   14B9 E4            pop a
2388   14BA             ; END RELATIONAL
2389   14BA FD A8         sor a, b ; ||
2390   14BC 11            mov a, b
2391   14BD FA 05 00      lea d, [bp + 5] ; $c
2392   14C0 32            mov bl, [d]
2393   14C1 A7 00         mov bh, 0
2394   14C3             ; START RELATIONAL
2395   14C3 D7            push a
2396   14C4 11            mov a, b
2397   14C5 26 3E 00      mov b, $3e
2398   14C8 B0            cmp a, b
2399   14C9 FD 71         seq ; ==
2400   14CB E4            pop a
2401   14CC             ; END RELATIONAL
2402   14CC FD A8         sor a, b ; ||
2403   14CE 11            mov a, b
2404   14CF FA 05 00      lea d, [bp + 5] ; $c
2405   14D2 32            mov bl, [d]
2406   14D3 A7 00         mov bh, 0
2407   14D5             ; START RELATIONAL
2408   14D5 D7            push a
2409   14D6 11            mov a, b
2410   14D7 26 3D 00      mov b, $3d
2411   14DA B0            cmp a, b
2412   14DB FD 71         seq ; ==
2413   14DD E4            pop a
2414   14DE             ; END RELATIONAL
2415   14DE FD A8         sor a, b ; ||
2416   14E0 11            mov a, b
2417   14E1 FA 05 00      lea d, [bp + 5] ; $c
2418   14E4 32            mov bl, [d]
2419   14E5 A7 00         mov bh, 0
2420   14E7             ; START RELATIONAL
2421   14E7 D7            push a
2422   14E8 11            mov a, b
2423   14E9 26 21 00      mov b, $21
2424   14EC B0            cmp a, b
2425   14ED FD 71         seq ; ==
2426   14EF E4            pop a
2427   14F0             ; END RELATIONAL
2428   14F0 FD A8         sor a, b ; ||
2429   14F2 11            mov a, b
2430   14F3 FA 05 00      lea d, [bp + 5] ; $c
2431   14F6 32            mov bl, [d]
2432   14F7 A7 00         mov bh, 0
2433   14F9             ; START RELATIONAL
2434   14F9 D7            push a
2435   14FA 11            mov a, b
2436   14FB 26 5E 00      mov b, $5e
2437   14FE B0            cmp a, b
2438   14FF FD 71         seq ; ==
2439   1501 E4            pop a
2440   1502             ; END RELATIONAL
2441   1502 FD A8         sor a, b ; ||
2442   1504 11            mov a, b
2443   1505 FA 05 00      lea d, [bp + 5] ; $c
2444   1508 32            mov bl, [d]
2445   1509 A7 00         mov bh, 0
2446   150B             ; START RELATIONAL
2447   150B D7            push a
2448   150C 11            mov a, b
2449   150D 26 26 00      mov b, $26
2450   1510 B0            cmp a, b
2451   1511 FD 71         seq ; ==
2452   1513 E4            pop a
2453   1514             ; END RELATIONAL
2454   1514 FD A8         sor a, b ; ||
2455   1516 11            mov a, b
2456   1517 FA 05 00      lea d, [bp + 5] ; $c
2457   151A 32            mov bl, [d]
2458   151B A7 00         mov bh, 0
2459   151D             ; START RELATIONAL
2460   151D D7            push a
2461   151E 11            mov a, b
2462   151F 26 7C 00      mov b, $7c
2463   1522 B0            cmp a, b
2464   1523 FD 71         seq ; ==
2465   1525 E4            pop a
2466   1526             ; END RELATIONAL
2467   1526 FD A8         sor a, b ; ||
2468   1528 11            mov a, b
2469   1529 FA 05 00      lea d, [bp + 5] ; $c
2470   152C 32            mov bl, [d]
2471   152D A7 00         mov bh, 0
2472   152F             ; START RELATIONAL
2473   152F D7            push a
2474   1530 11            mov a, b
2475   1531 26 7E 00      mov b, $7e
2476   1534 B0            cmp a, b
2477   1535 FD 71         seq ; ==
2478   1537 E4            pop a
2479   1538             ; END RELATIONAL
2480   1538 FD A8         sor a, b ; ||
2481   153A 11            mov a, b
2482   153B FA 05 00      lea d, [bp + 5] ; $c
2483   153E 32            mov bl, [d]
2484   153F A7 00         mov bh, 0
2485   1541             ; START RELATIONAL
2486   1541 D7            push a
2487   1542 11            mov a, b
2488   1543 26 2E 00      mov b, $2e
2489   1546 B0            cmp a, b
2490   1547 FD 71         seq ; ==
2491   1549 E4            pop a
2492   154A             ; END RELATIONAL
2493   154A FD A8         sor a, b ; ||
2494   154C E4            pop a
2495   154D C0 00 00      cmp b, 0
2496   1550 C6 5B 15      je _if28_else
2497   1553             _if28_true:
2498   1553             ;; return 1; 
2499   1553 26 01 00      mov b, $1
2500   1556 F9            leave
2501   1557 09            ret
2502   1558 0A 60 15      jmp _if28_exit
2503   155B             _if28_else:
2504   155B             ;; return 0; 
2505   155B 26 00 00      mov b, $0
2506   155E F9            leave
2507   155F 09            ret
2508   1560             _if28_exit:
2509   1560 F9            leave
2510   1561 09            ret
2511   1562             
2512   1562             getnum:
2513   1562 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2514   1565             ; $n 
2515   1565 52 02 00      sub sp, 2
2516   1568             ;; print(prompt); 
2517   1568 FA 05 00      lea d, [bp + 5] ; $prompt
2518   156B 2A            mov b, [d]
2519   156C FD AB         swp b
2520   156E D8            push b
2521   156F 07 ED 0C      call print
2522   1572 51 02 00      add sp, 2
2523   1575             ;; n = scann(); 
2524   1575 FA FF FF      lea d, [bp + -1] ; $n
2525   1578 DA            push d
2526   1579 07 C8 0C      call scann
2527   157C E7            pop d
2528   157D FD 43         mov [d], b
2529   157F             ;; return n; 
2530   157F FA FF FF      lea d, [bp + -1] ; $n
2531   1582 2A            mov b, [d]
2532   1583 F9            leave
2533   1584 09            ret
2534   1585             
2535   1585             getlet:
2536   1585 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2537   1588             ; $c 
2538   1588 19 0A         mov al, $a
2539   158A 40 00 00      mov [bp + 0], al
2540   158D 52 01 00      sub sp, 1
2541   1590             ;; print(prompt); 
2542   1590 FA 05 00      lea d, [bp + 5] ; $prompt
2543   1593 2A            mov b, [d]
2544   1594 FD AB         swp b
2545   1596 D8            push b
2546   1597 07 ED 0C      call print
2547   159A 51 02 00      add sp, 2
2548   159D             ;; while (c == '\n') { 
2549   159D             _while29_cond:
2550   159D FA 00 00      lea d, [bp + 0] ; $c
2551   15A0 32            mov bl, [d]
2552   15A1 A7 00         mov bh, 0
2553   15A3             ; START RELATIONAL
2554   15A3 D7            push a
2555   15A4 11            mov a, b
2556   15A5 26 0A 00      mov b, $a
2557   15A8 B0            cmp a, b
2558   15A9 FD 71         seq ; ==
2559   15AB E4            pop a
2560   15AC             ; END RELATIONAL
2561   15AC C0 00 00      cmp b, 0
2562   15AF C6 BF 15      je _while29_exit
2563   15B2             _while29_block:
2564   15B2             ;; c = getchar(); 
2565   15B2 FA 00 00      lea d, [bp + 0] ; $c
2566   15B5 DA            push d
2567   15B6 07 B2 0C      call getchar
2568   15B9 E7            pop d
2569   15BA FD 3E         mov [d], bl
2570   15BC 0A 9D 15      jmp _while29_cond
2571   15BF             _while29_exit:
2572   15BF             ;; return toupper(c); 
2573   15BF FA 00 00      lea d, [bp + 0] ; $c
2574   15C2 32            mov bl, [d]
2575   15C3 A7 00         mov bh, 0
2576   15C5 DD            push bl
2577   15C6 07 3C 13      call toupper
2578   15C9 51 01 00      add sp, 1
2579   15CC F9            leave
2580   15CD 09            ret
2581   15CE             
2582   15CE             print_instructions:
2583   15CE F8 00 00      enter 0 ; (push bp; mov bp, sp)
2584   15D1             ;; print("WELCOME TO 'HUNT THE WUMPUS'\n"); 
2585   15D1 26 42 24      mov b, __s6 ; "WELCOME TO 'HUNT THE WUMPUS'\n"
2586   15D4 FD AB         swp b
2587   15D6 D8            push b
2588   15D7 07 ED 0C      call print
2589   15DA 51 02 00      add sp, 2
2590   15DD             ;; print("THE WUMPUS LIVES IN A CAVE OF 20 ROOMS. EACH ROOM\n"); 
2591   15DD 26 60 24      mov b, __s7 ; "THE WUMPUS LIVES IN A CAVE OF 20 ROOMS. EACH ROOM\n"
2592   15E0 FD AB         swp b
2593   15E2 D8            push b
2594   15E3 07 ED 0C      call print
2595   15E6 51 02 00      add sp, 2
2596   15E9             ;; print("HAS 3 TUNNELS LEADING TO OTHER ROOMS.\n");  
2597   15E9 26 93 24      mov b, __s8 ; "HAS 3 TUNNELS LEADING TO OTHER ROOMS.\n"
2598   15EC FD AB         swp b
2599   15EE D8            push b
2600   15EF 07 ED 0C      call print
2601   15F2 51 02 00      add sp, 2
2602   15F5             ;; print("LOOK AT A DODECAHEDRON TO SEE HOW THIS WORKS.\n"); 
2603   15F5 26 BA 24      mov b, __s9 ; "LOOK AT A DODECAHEDRON TO SEE HOW THIS WORKS.\n"
2604   15F8 FD AB         swp b
2605   15FA D8            push b
2606   15FB 07 ED 0C      call print
2607   15FE 51 02 00      add sp, 2
2608   1601             ;; print("\n"); 
2609   1601 26 40 24      mov b, __s5 ; "\n"
2610   1604 FD AB         swp b
2611   1606 D8            push b
2612   1607 07 ED 0C      call print
2613   160A 51 02 00      add sp, 2
2614   160D             ;; print(" HAZARDS:\n"); 
2615   160D 26 E9 24      mov b, __s10 ; " HAZARDS:\n"
2616   1610 FD AB         swp b
2617   1612 D8            push b
2618   1613 07 ED 0C      call print
2619   1616 51 02 00      add sp, 2
2620   1619             ;; print(" BOTTOMLESS PITS: TWO ROOMS HAVE BOTTOMLESS PITS IN THEM\n"); 
2621   1619 26 F4 24      mov b, __s11 ; " BOTTOMLESS PITS: TWO ROOMS HAVE BOTTOMLESS PITS IN THEM\n"
2622   161C FD AB         swp b
2623   161E D8            push b
2624   161F 07 ED 0C      call print
2625   1622 51 02 00      add sp, 2
2626   1625             ;; print(" IF YOU GO THERE, YOU FALL INTO THE PIT (& LOSE!)\n"); 
2627   1625 26 2E 25      mov b, __s12 ; " IF YOU GO THERE, YOU FALL INTO THE PIT (& LOSE!)\n"
2628   1628 FD AB         swp b
2629   162A D8            push b
2630   162B 07 ED 0C      call print
2631   162E 51 02 00      add sp, 2
2632   1631             ;; print(" SUPER BATS     : TWO OTHER ROOMS HAVE SUPER BATS. IF YOU\n"); 
2633   1631 26 61 25      mov b, __s13 ; " SUPER BATS     : TWO OTHER ROOMS HAVE SUPER BATS. IF YOU\n"
2634   1634 FD AB         swp b
2635   1636 D8            push b
2636   1637 07 ED 0C      call print
2637   163A 51 02 00      add sp, 2
2638   163D             ;; print(" GO THERE, A BAT GRABS YOU AND TAKES YOU TO SOME OTHER\n"); 
2639   163D 26 9C 25      mov b, __s14 ; " GO THERE, A BAT GRABS YOU AND TAKES YOU TO SOME OTHER\n"
2640   1640 FD AB         swp b
2641   1642 D8            push b
2642   1643 07 ED 0C      call print
2643   1646 51 02 00      add sp, 2
2644   1649             ;; print(" ROOM AT RANDOM. (WHICH MAY BE TROUBLESOME)\n\n"); 
2645   1649 26 D4 25      mov b, __s15 ; " ROOM AT RANDOM. (WHICH MAY BE TROUBLESOME)\n\n"
2646   164C FD AB         swp b
2647   164E D8            push b
2648   164F 07 ED 0C      call print
2649   1652 51 02 00      add sp, 2
2650   1655             ;; print(" WUMPUS:\n"); 
2651   1655 26 02 26      mov b, __s16 ; " WUMPUS:\n"
2652   1658 FD AB         swp b
2653   165A D8            push b
2654   165B 07 ED 0C      call print
2655   165E 51 02 00      add sp, 2
2656   1661             ;; print(" THE WUMPUS IS NOT BOTHERED BY HAZARDS (HE HAS SUCKER\n"); 
2657   1661 26 0C 26      mov b, __s17 ; " THE WUMPUS IS NOT BOTHERED BY HAZARDS (HE HAS SUCKER\n"
2658   1664 FD AB         swp b
2659   1666 D8            push b
2660   1667 07 ED 0C      call print
2661   166A 51 02 00      add sp, 2
2662   166D             ;; print(" FEET AND IS TOO BIG FOR A BAT TO LIFT).  USUALLY\n"); 
2663   166D 26 43 26      mov b, __s18 ; " FEET AND IS TOO BIG FOR A BAT TO LIFT).  USUALLY\n"
2664   1670 FD AB         swp b
2665   1672 D8            push b
2666   1673 07 ED 0C      call print
2667   1676 51 02 00      add sp, 2
2668   1679             ;; print(" HE IS ASLEEP.  TWO THINGS WAKE HIM UP: YOU SHOOTING AN\n"); 
2669   1679 26 76 26      mov b, __s19 ; " HE IS ASLEEP.  TWO THINGS WAKE HIM UP: YOU SHOOTING AN\n"
2670   167C FD AB         swp b
2671   167E D8            push b
2672   167F 07 ED 0C      call print
2673   1682 51 02 00      add sp, 2
2674   1685             ;; print(" ARROW OR YOU ENTERING HIS ROOM.\n"); 
2675   1685 26 AF 26      mov b, __s20 ; " ARROW OR YOU ENTERING HIS ROOM.\n"
2676   1688 FD AB         swp b
2677   168A D8            push b
2678   168B 07 ED 0C      call print
2679   168E 51 02 00      add sp, 2
2680   1691             ;; print(" IF THE WUMPUS WAKES HE MOVES (P=.75) ONE ROOM\n"); 
2681   1691 26 D1 26      mov b, __s21 ; " IF THE WUMPUS WAKES HE MOVES (P=.75) ONE ROOM\n"
2682   1694 FD AB         swp b
2683   1696 D8            push b
2684   1697 07 ED 0C      call print
2685   169A 51 02 00      add sp, 2
2686   169D             ;; print(" OR STAYS STILL (P=.25).  AFTER THAT, IF HE IS WHERE YOU\n"); 
2687   169D 26 01 27      mov b, __s22 ; " OR STAYS STILL (P=.25).  AFTER THAT, IF HE IS WHERE YOU\n"
2688   16A0 FD AB         swp b
2689   16A2 D8            push b
2690   16A3 07 ED 0C      call print
2691   16A6 51 02 00      add sp, 2
2692   16A9             ;; print(" ARE, HE EATS YOU UP AND YOU LOSE!\n"); 
2693   16A9 26 3B 27      mov b, __s23 ; " ARE, HE EATS YOU UP AND YOU LOSE!\n"
2694   16AC FD AB         swp b
2695   16AE D8            push b
2696   16AF 07 ED 0C      call print
2697   16B2 51 02 00      add sp, 2
2698   16B5             ;; print("\n"); 
2699   16B5 26 40 24      mov b, __s5 ; "\n"
2700   16B8 FD AB         swp b
2701   16BA D8            push b
2702   16BB 07 ED 0C      call print
2703   16BE 51 02 00      add sp, 2
2704   16C1             ;; print(" YOU:\n"); 
2705   16C1 26 5F 27      mov b, __s24 ; " YOU:\n"
2706   16C4 FD AB         swp b
2707   16C6 D8            push b
2708   16C7 07 ED 0C      call print
2709   16CA 51 02 00      add sp, 2
2710   16CD             ;; print(" EACH TURN YOU MAY MOVE OR SHOOT A CROOKED ARROW\n"); 
2711   16CD 26 66 27      mov b, __s25 ; " EACH TURN YOU MAY MOVE OR SHOOT A CROOKED ARROW\n"
2712   16D0 FD AB         swp b
2713   16D2 D8            push b
2714   16D3 07 ED 0C      call print
2715   16D6 51 02 00      add sp, 2
2716   16D9             ;; print(" MOVING:  YOU CAN MOVE ONE ROOM (THRU ONE TUNNEL)\n"); 
2717   16D9 26 98 27      mov b, __s26 ; " MOVING:  YOU CAN MOVE ONE ROOM (THRU ONE TUNNEL)\n"
2718   16DC FD AB         swp b
2719   16DE D8            push b
2720   16DF 07 ED 0C      call print
2721   16E2 51 02 00      add sp, 2
2722   16E5             ;; print(" ARROWS:  YOU HAVE 5 ARROWS.  YOU LOSE WHEN YOU RUN OUT\n"); 
2723   16E5 26 CB 27      mov b, __s27 ; " ARROWS:  YOU HAVE 5 ARROWS.  YOU LOSE WHEN YOU RUN OUT\n"
2724   16E8 FD AB         swp b
2725   16EA D8            push b
2726   16EB 07 ED 0C      call print
2727   16EE 51 02 00      add sp, 2
2728   16F1             ;; print(" EACH ARROW CAN GO FROM 1 TO 5 ROOMS. YOU AIM BY TELLING\n"); 
2729   16F1 26 04 28      mov b, __s28 ; " EACH ARROW CAN GO FROM 1 TO 5 ROOMS. YOU AIM BY TELLING\n"
2730   16F4 FD AB         swp b
2731   16F6 D8            push b
2732   16F7 07 ED 0C      call print
2733   16FA 51 02 00      add sp, 2
2734   16FD             ;; print("   THE COMPUTER THE ROOM#S YOU WANT THE ARROW TO GO TO.\n"); 
2735   16FD 26 3E 28      mov b, __s29 ; "   THE COMPUTER THE ROOM#S YOU WANT THE ARROW TO GO TO.\n"
2736   1700 FD AB         swp b
2737   1702 D8            push b
2738   1703 07 ED 0C      call print
2739   1706 51 02 00      add sp, 2
2740   1709             ;; print("   IF THE ARROW CAN'T GO THAT WAY (IF NO TUNNEL) IT MOVES\n"); 
2741   1709 26 77 28      mov b, __s30 ; "   IF THE ARROW CAN'T GO THAT WAY (IF NO TUNNEL) IT MOVES\n"
2742   170C FD AB         swp b
2743   170E D8            push b
2744   170F 07 ED 0C      call print
2745   1712 51 02 00      add sp, 2
2746   1715             ;; print("   AT RANDOM TO THE NEXT ROOM.\n"); 
2747   1715 26 B1 28      mov b, __s31 ; "   AT RANDOM TO THE NEXT ROOM.\n"
2748   1718 FD AB         swp b
2749   171A D8            push b
2750   171B 07 ED 0C      call print
2751   171E 51 02 00      add sp, 2
2752   1721             ;; print("     IF THE ARROW HITS THE WUMPUS, YOU WIN.\n"); 
2753   1721 26 D1 28      mov b, __s32 ; "     IF THE ARROW HITS THE WUMPUS, YOU WIN.\n"
2754   1724 FD AB         swp b
2755   1726 D8            push b
2756   1727 07 ED 0C      call print
2757   172A 51 02 00      add sp, 2
2758   172D             ;; print("     IF THE ARROW HITS YOU, YOU LOSE.\n"); 
2759   172D 26 FE 28      mov b, __s33 ; "     IF THE ARROW HITS YOU, YOU LOSE.\n"
2760   1730 FD AB         swp b
2761   1732 D8            push b
2762   1733 07 ED 0C      call print
2763   1736 51 02 00      add sp, 2
2764   1739             ;; print(" WARNINGS:\n"); 
2765   1739 26 25 29      mov b, __s34 ; " WARNINGS:\n"
2766   173C FD AB         swp b
2767   173E D8            push b
2768   173F 07 ED 0C      call print
2769   1742 51 02 00      add sp, 2
2770   1745             ;; print(" WHEN YOU ARE ONE ROOM AWAY FROM A WUMPUS OR HAZARD,\n"); 
2771   1745 26 31 29      mov b, __s35 ; " WHEN YOU ARE ONE ROOM AWAY FROM A WUMPUS OR HAZARD,\n"
2772   1748 FD AB         swp b
2773   174A D8            push b
2774   174B 07 ED 0C      call print
2775   174E 51 02 00      add sp, 2
2776   1751             ;; print(" THE COMPUTER SAYS:\n"); 
2777   1751 26 67 29      mov b, __s36 ; " THE COMPUTER SAYS:\n"
2778   1754 FD AB         swp b
2779   1756 D8            push b
2780   1757 07 ED 0C      call print
2781   175A 51 02 00      add sp, 2
2782   175D             ;; print(" WUMPUS:  'I SMELL A WUMPUS'\n"); 
2783   175D 26 7C 29      mov b, __s37 ; " WUMPUS:  'I SMELL A WUMPUS'\n"
2784   1760 FD AB         swp b
2785   1762 D8            push b
2786   1763 07 ED 0C      call print
2787   1766 51 02 00      add sp, 2
2788   1769             ;; print(" BAT   :  'BATS NEARBY'\n"); 
2789   1769 26 9A 29      mov b, __s38 ; " BAT   :  'BATS NEARBY'\n"
2790   176C FD AB         swp b
2791   176E D8            push b
2792   176F 07 ED 0C      call print
2793   1772 51 02 00      add sp, 2
2794   1775             ;; print(" PIT   :  'I FEEL A DRAFT'\n"); 
2795   1775 26 B3 29      mov b, __s39 ; " PIT   :  'I FEEL A DRAFT'\n"
2796   1778 FD AB         swp b
2797   177A D8            push b
2798   177B 07 ED 0C      call print
2799   177E 51 02 00      add sp, 2
2800   1781             ;; print("\n"); 
2801   1781 26 40 24      mov b, __s5 ; "\n"
2802   1784 FD AB         swp b
2803   1786 D8            push b
2804   1787 07 ED 0C      call print
2805   178A 51 02 00      add sp, 2
2806   178D F9            leave
2807   178E 09            ret
2808   178F             
2809   178F             show_room:
2810   178F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2811   1792             ; $room 
2812   1792             ; $k 
2813   1792 52 04 00      sub sp, 4
2814   1795             ;; print("\n"); 
2815   1795 26 40 24      mov b, __s5 ; "\n"
2816   1798 FD AB         swp b
2817   179A D8            push b
2818   179B 07 ED 0C      call print
2819   179E 51 02 00      add sp, 2
2820   17A1             ;; for (k = 0; k < 3; k++) { 
2821   17A1             _for30_init:
2822   17A1 FA FD FF      lea d, [bp + -3] ; $k
2823   17A4 DA            push d
2824   17A5 26 00 00      mov b, $0
2825   17A8 E7            pop d
2826   17A9 FD 43         mov [d], b
2827   17AB             _for30_cond:
2828   17AB FA FD FF      lea d, [bp + -3] ; $k
2829   17AE 2A            mov b, [d]
2830   17AF             ; START RELATIONAL
2831   17AF D7            push a
2832   17B0 11            mov a, b
2833   17B1 26 03 00      mov b, $3
2834   17B4 B0            cmp a, b
2835   17B5 FD 73         slt ; < 
2836   17B7 E4            pop a
2837   17B8             ; END RELATIONAL
2838   17B8 C0 00 00      cmp b, 0
2839   17BB C6 C2 18      je _for30_exit
2840   17BE             _for30_block:
2841   17BE             ;; room = cave[loc[ 0  ]][k]; 
2842   17BE FA FF FF      lea d, [bp + -1] ; $room
2843   17C1 DA            push d
2844   17C2 3B 2D 23      mov d, _cave_data ; $cave
2845   17C5 D7            push a
2846   17C6 DA            push d
2847   17C7 3B 1F 23      mov d, _loc_data ; $loc
2848   17CA D7            push a
2849   17CB DA            push d
2850   17CC 26 00 00      mov b, $0
2851   17CF E7            pop d
2852   17D0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2853   17D4 E4            pop a
2854   17D5 2A            mov b, [d]
2855   17D6 E7            pop d
2856   17D7 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
2857   17DB DA            push d
2858   17DC FA FD FF      lea d, [bp + -3] ; $k
2859   17DF 2A            mov b, [d]
2860   17E0 E7            pop d
2861   17E1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2862   17E5 E4            pop a
2863   17E6 2A            mov b, [d]
2864   17E7 E7            pop d
2865   17E8 FD 43         mov [d], b
2866   17EA             ;; if (room == loc[ 1     ]) { 
2867   17EA             _if31_cond:
2868   17EA FA FF FF      lea d, [bp + -1] ; $room
2869   17ED 2A            mov b, [d]
2870   17EE             ; START RELATIONAL
2871   17EE D7            push a
2872   17EF 11            mov a, b
2873   17F0 3B 1F 23      mov d, _loc_data ; $loc
2874   17F3 D7            push a
2875   17F4 DA            push d
2876   17F5 26 01 00      mov b, $1
2877   17F8 E7            pop d
2878   17F9 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2879   17FD E4            pop a
2880   17FE 2A            mov b, [d]
2881   17FF B0            cmp a, b
2882   1800 FD 71         seq ; ==
2883   1802 E4            pop a
2884   1803             ; END RELATIONAL
2885   1803 C0 00 00      cmp b, 0
2886   1806 C6 18 18      je _if31_else
2887   1809             _if31_true:
2888   1809             ;; print("I SMELL A WUMPUS!\n"); 
2889   1809 26 CF 29      mov b, __s40 ; "I SMELL A WUMPUS!\n"
2890   180C FD AB         swp b
2891   180E D8            push b
2892   180F 07 ED 0C      call print
2893   1812 51 02 00      add sp, 2
2894   1815 0A B0 18      jmp _if31_exit
2895   1818             _if31_else:
2896   1818             ;; if (room == loc[ 2   ] || room == loc[ 3   ]) { 
2897   1818             _if32_cond:
2898   1818 FA FF FF      lea d, [bp + -1] ; $room
2899   181B 2A            mov b, [d]
2900   181C             ; START RELATIONAL
2901   181C D7            push a
2902   181D 11            mov a, b
2903   181E 3B 1F 23      mov d, _loc_data ; $loc
2904   1821 D7            push a
2905   1822 DA            push d
2906   1823 26 02 00      mov b, $2
2907   1826 E7            pop d
2908   1827 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2909   182B E4            pop a
2910   182C 2A            mov b, [d]
2911   182D B0            cmp a, b
2912   182E FD 71         seq ; ==
2913   1830 E4            pop a
2914   1831             ; END RELATIONAL
2915   1831 D7            push a
2916   1832 11            mov a, b
2917   1833 FA FF FF      lea d, [bp + -1] ; $room
2918   1836 2A            mov b, [d]
2919   1837             ; START RELATIONAL
2920   1837 D7            push a
2921   1838 11            mov a, b
2922   1839 3B 1F 23      mov d, _loc_data ; $loc
2923   183C D7            push a
2924   183D DA            push d
2925   183E 26 03 00      mov b, $3
2926   1841 E7            pop d
2927   1842 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2928   1846 E4            pop a
2929   1847 2A            mov b, [d]
2930   1848 B0            cmp a, b
2931   1849 FD 71         seq ; ==
2932   184B E4            pop a
2933   184C             ; END RELATIONAL
2934   184C FD A8         sor a, b ; ||
2935   184E E4            pop a
2936   184F C0 00 00      cmp b, 0
2937   1852 C6 64 18      je _if32_else
2938   1855             _if32_true:
2939   1855             ;; print("I FEEL A DRAFT\n"); 
2940   1855 26 E2 29      mov b, __s41 ; "I FEEL A DRAFT\n"
2941   1858 FD AB         swp b
2942   185A D8            push b
2943   185B 07 ED 0C      call print
2944   185E 51 02 00      add sp, 2
2945   1861 0A B0 18      jmp _if32_exit
2946   1864             _if32_else:
2947   1864             ;; if (room == loc[ 4    ] || room == loc[ 5    ]) { 
2948   1864             _if33_cond:
2949   1864 FA FF FF      lea d, [bp + -1] ; $room
2950   1867 2A            mov b, [d]
2951   1868             ; START RELATIONAL
2952   1868 D7            push a
2953   1869 11            mov a, b
2954   186A 3B 1F 23      mov d, _loc_data ; $loc
2955   186D D7            push a
2956   186E DA            push d
2957   186F 26 04 00      mov b, $4
2958   1872 E7            pop d
2959   1873 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2960   1877 E4            pop a
2961   1878 2A            mov b, [d]
2962   1879 B0            cmp a, b
2963   187A FD 71         seq ; ==
2964   187C E4            pop a
2965   187D             ; END RELATIONAL
2966   187D D7            push a
2967   187E 11            mov a, b
2968   187F FA FF FF      lea d, [bp + -1] ; $room
2969   1882 2A            mov b, [d]
2970   1883             ; START RELATIONAL
2971   1883 D7            push a
2972   1884 11            mov a, b
2973   1885 3B 1F 23      mov d, _loc_data ; $loc
2974   1888 D7            push a
2975   1889 DA            push d
2976   188A 26 05 00      mov b, $5
2977   188D E7            pop d
2978   188E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2979   1892 E4            pop a
2980   1893 2A            mov b, [d]
2981   1894 B0            cmp a, b
2982   1895 FD 71         seq ; ==
2983   1897 E4            pop a
2984   1898             ; END RELATIONAL
2985   1898 FD A8         sor a, b ; ||
2986   189A E4            pop a
2987   189B C0 00 00      cmp b, 0
2988   189E C6 B0 18      je _if33_exit
2989   18A1             _if33_true:
2990   18A1             ;; print("BATS NEARBY!\n"); 
2991   18A1 26 F2 29      mov b, __s42 ; "BATS NEARBY!\n"
2992   18A4 FD AB         swp b
2993   18A6 D8            push b
2994   18A7 07 ED 0C      call print
2995   18AA 51 02 00      add sp, 2
2996   18AD 0A B0 18      jmp _if33_exit
2997   18B0             _if33_exit:
2998   18B0             _if32_exit:
2999   18B0             _if31_exit:
3000   18B0             _for30_update:
3001   18B0 FA FD FF      lea d, [bp + -3] ; $k
3002   18B3 2A            mov b, [d]
3003   18B4 FD 79         mov g, b
3004   18B6 FD 77         inc b
3005   18B8 FA FD FF      lea d, [bp + -3] ; $k
3006   18BB FD 43         mov [d], b
3007   18BD FD 27         mov b, g
3008   18BF 0A AB 17      jmp _for30_cond
3009   18C2             _for30_exit:
3010   18C2             ;; print("YOU ARE IN ROOM "); printu(loc[ 0  ]+1); print("\n"); 
3011   18C2 26 00 2A      mov b, __s43 ; "YOU ARE IN ROOM "
3012   18C5 FD AB         swp b
3013   18C7 D8            push b
3014   18C8 07 ED 0C      call print
3015   18CB 51 02 00      add sp, 2
3016   18CE             ;; printu(loc[ 0  ]+1); print("\n"); 
3017   18CE 3B 1F 23      mov d, _loc_data ; $loc
3018   18D1 D7            push a
3019   18D2 DA            push d
3020   18D3 26 00 00      mov b, $0
3021   18D6 E7            pop d
3022   18D7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3023   18DB E4            pop a
3024   18DC 2A            mov b, [d]
3025   18DD             ; START TERMS
3026   18DD D7            push a
3027   18DE 11            mov a, b
3028   18DF 26 01 00      mov b, $1
3029   18E2 54            add a, b
3030   18E3 27            mov b, a
3031   18E4 E4            pop a
3032   18E5             ; END TERMS
3033   18E5 FD AB         swp b
3034   18E7 D8            push b
3035   18E8 07 B9 0B      call printu
3036   18EB 51 02 00      add sp, 2
3037   18EE             ;; print("\n"); 
3038   18EE 26 40 24      mov b, __s5 ; "\n"
3039   18F1 FD AB         swp b
3040   18F3 D8            push b
3041   18F4 07 ED 0C      call print
3042   18F7 51 02 00      add sp, 2
3043   18FA             ;; print("TUNNELS LEAD TO ");  
3044   18FA 26 11 2A      mov b, __s44 ; "TUNNELS LEAD TO "
3045   18FD FD AB         swp b
3046   18FF D8            push b
3047   1900 07 ED 0C      call print
3048   1903 51 02 00      add sp, 2
3049   1906             ;; printu(cave[loc[ 0  ]][0]+1); print(", "); 
3050   1906 3B 2D 23      mov d, _cave_data ; $cave
3051   1909 D7            push a
3052   190A DA            push d
3053   190B 3B 1F 23      mov d, _loc_data ; $loc
3054   190E D7            push a
3055   190F DA            push d
3056   1910 26 00 00      mov b, $0
3057   1913 E7            pop d
3058   1914 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3059   1918 E4            pop a
3060   1919 2A            mov b, [d]
3061   191A E7            pop d
3062   191B FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
3063   191F DA            push d
3064   1920 26 00 00      mov b, $0
3065   1923 E7            pop d
3066   1924 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3067   1928 E4            pop a
3068   1929 2A            mov b, [d]
3069   192A             ; START TERMS
3070   192A D7            push a
3071   192B 11            mov a, b
3072   192C 26 01 00      mov b, $1
3073   192F 54            add a, b
3074   1930 27            mov b, a
3075   1931 E4            pop a
3076   1932             ; END TERMS
3077   1932 FD AB         swp b
3078   1934 D8            push b
3079   1935 07 B9 0B      call printu
3080   1938 51 02 00      add sp, 2
3081   193B             ;; print(", "); 
3082   193B 26 22 2A      mov b, __s45 ; ", "
3083   193E FD AB         swp b
3084   1940 D8            push b
3085   1941 07 ED 0C      call print
3086   1944 51 02 00      add sp, 2
3087   1947             ;; printu(cave[loc[ 0  ]][1]+1); print(", "); 
3088   1947 3B 2D 23      mov d, _cave_data ; $cave
3089   194A D7            push a
3090   194B DA            push d
3091   194C 3B 1F 23      mov d, _loc_data ; $loc
3092   194F D7            push a
3093   1950 DA            push d
3094   1951 26 00 00      mov b, $0
3095   1954 E7            pop d
3096   1955 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3097   1959 E4            pop a
3098   195A 2A            mov b, [d]
3099   195B E7            pop d
3100   195C FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
3101   1960 DA            push d
3102   1961 26 01 00      mov b, $1
3103   1964 E7            pop d
3104   1965 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3105   1969 E4            pop a
3106   196A 2A            mov b, [d]
3107   196B             ; START TERMS
3108   196B D7            push a
3109   196C 11            mov a, b
3110   196D 26 01 00      mov b, $1
3111   1970 54            add a, b
3112   1971 27            mov b, a
3113   1972 E4            pop a
3114   1973             ; END TERMS
3115   1973 FD AB         swp b
3116   1975 D8            push b
3117   1976 07 B9 0B      call printu
3118   1979 51 02 00      add sp, 2
3119   197C             ;; print(", "); 
3120   197C 26 22 2A      mov b, __s45 ; ", "
3121   197F FD AB         swp b
3122   1981 D8            push b
3123   1982 07 ED 0C      call print
3124   1985 51 02 00      add sp, 2
3125   1988             ;; printu(cave[loc[ 0  ]][2]+1); 
3126   1988 3B 2D 23      mov d, _cave_data ; $cave
3127   198B D7            push a
3128   198C DA            push d
3129   198D 3B 1F 23      mov d, _loc_data ; $loc
3130   1990 D7            push a
3131   1991 DA            push d
3132   1992 26 00 00      mov b, $0
3133   1995 E7            pop d
3134   1996 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3135   199A E4            pop a
3136   199B 2A            mov b, [d]
3137   199C E7            pop d
3138   199D FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
3139   19A1 DA            push d
3140   19A2 26 02 00      mov b, $2
3141   19A5 E7            pop d
3142   19A6 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3143   19AA E4            pop a
3144   19AB 2A            mov b, [d]
3145   19AC             ; START TERMS
3146   19AC D7            push a
3147   19AD 11            mov a, b
3148   19AE 26 01 00      mov b, $1
3149   19B1 54            add a, b
3150   19B2 27            mov b, a
3151   19B3 E4            pop a
3152   19B4             ; END TERMS
3153   19B4 FD AB         swp b
3154   19B6 D8            push b
3155   19B7 07 B9 0B      call printu
3156   19BA 51 02 00      add sp, 2
3157   19BD             ;; print("\n\n"); 
3158   19BD 26 25 2A      mov b, __s46 ; "\n\n"
3159   19C0 FD AB         swp b
3160   19C2 D8            push b
3161   19C3 07 ED 0C      call print
3162   19C6 51 02 00      add sp, 2
3163   19C9 F9            leave
3164   19CA 09            ret
3165   19CB             
3166   19CB             move_or_shoot:
3167   19CB F8 00 00      enter 0 ; (push bp; mov bp, sp)
3168   19CE             ; $c 
3169   19CE 10 FF FF      mov a, $ffffffff
3170   19D1 45 FF FF      mov [bp + -1], a
3171   19D4 52 02 00      sub sp, 2
3172   19D7             ;; while ((c != 'S') && (c != 'M')) { 
3173   19D7             _while34_cond:
3174   19D7 FA FF FF      lea d, [bp + -1] ; $c
3175   19DA 2A            mov b, [d]
3176   19DB             ; START RELATIONAL
3177   19DB D7            push a
3178   19DC 11            mov a, b
3179   19DD 26 53 00      mov b, $53
3180   19E0 B0            cmp a, b
3181   19E1 FD 72         sneq ; !=
3182   19E3 E4            pop a
3183   19E4             ; END RELATIONAL
3184   19E4 D7            push a
3185   19E5 11            mov a, b
3186   19E6 FA FF FF      lea d, [bp + -1] ; $c
3187   19E9 2A            mov b, [d]
3188   19EA             ; START RELATIONAL
3189   19EA D7            push a
3190   19EB 11            mov a, b
3191   19EC 26 4D 00      mov b, $4d
3192   19EF B0            cmp a, b
3193   19F0 FD 72         sneq ; !=
3194   19F2 E4            pop a
3195   19F3             ; END RELATIONAL
3196   19F3 FD A7         sand a, b ; &&
3197   19F5 E4            pop a
3198   19F6 C0 00 00      cmp b, 0
3199   19F9 C6 12 1A      je _while34_exit
3200   19FC             _while34_block:
3201   19FC             ;; c = getlet("SHOOT OR MOVE (S-M): "); 
3202   19FC FA FF FF      lea d, [bp + -1] ; $c
3203   19FF DA            push d
3204   1A00 26 28 2A      mov b, __s47 ; "SHOOT OR MOVE (S-M): "
3205   1A03 FD AB         swp b
3206   1A05 D8            push b
3207   1A06 07 85 15      call getlet
3208   1A09 51 02 00      add sp, 2
3209   1A0C E7            pop d
3210   1A0D FD 43         mov [d], b
3211   1A0F 0A D7 19      jmp _while34_cond
3212   1A12             _while34_exit:
3213   1A12             ;; return (c == 'S') ? 1 : 0; 
3214   1A12             _ternary35_cond:
3215   1A12 FA FF FF      lea d, [bp + -1] ; $c
3216   1A15 2A            mov b, [d]
3217   1A16             ; START RELATIONAL
3218   1A16 D7            push a
3219   1A17 11            mov a, b
3220   1A18 26 53 00      mov b, $53
3221   1A1B B0            cmp a, b
3222   1A1C FD 71         seq ; ==
3223   1A1E E4            pop a
3224   1A1F             ; END RELATIONAL
3225   1A1F C0 00 00      cmp b, 0
3226   1A22 C6 2B 1A      je _ternary35_false
3227   1A25             _ternary35_true:
3228   1A25 26 01 00      mov b, $1
3229   1A28 0A 2E 1A      jmp _ternary35_exit
3230   1A2B             _ternary35_false:
3231   1A2B 26 00 00      mov b, $0
3232   1A2E             _ternary35_exit:
3233   1A2E F9            leave
3234   1A2F 09            ret
3235   1A30             
3236   1A30             move_wumpus:
3237   1A30 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3238   1A33             ; $k 
3239   1A33 52 02 00      sub sp, 2
3240   1A36             ;; k = rand2() % 4; 
3241   1A36 FA FF FF      lea d, [bp + -1] ; $k
3242   1A39 DA            push d
3243   1A3A 07 25 20      call rand2
3244   1A3D             ; START FACTORS
3245   1A3D D7            push a
3246   1A3E 11            mov a, b
3247   1A3F 26 04 00      mov b, $4
3248   1A42 AE            div a, b ; 
3249   1A43 11            mov a, b
3250   1A44 27            mov b, a
3251   1A45 E4            pop a
3252   1A46             ; END FACTORS
3253   1A46 E7            pop d
3254   1A47 FD 43         mov [d], b
3255   1A49             ;; if (k < 3) { 
3256   1A49             _if36_cond:
3257   1A49 FA FF FF      lea d, [bp + -1] ; $k
3258   1A4C 2A            mov b, [d]
3259   1A4D             ; START RELATIONAL
3260   1A4D D7            push a
3261   1A4E 11            mov a, b
3262   1A4F 26 03 00      mov b, $3
3263   1A52 B0            cmp a, b
3264   1A53 FD 73         slt ; < 
3265   1A55 E4            pop a
3266   1A56             ; END RELATIONAL
3267   1A56 C0 00 00      cmp b, 0
3268   1A59 C6 96 1A      je _if36_exit
3269   1A5C             _if36_true:
3270   1A5C             ;; loc[ 1     ] = cave[loc[ 1     ]][k]; 
3271   1A5C 3B 1F 23      mov d, _loc_data ; $loc
3272   1A5F D7            push a
3273   1A60 DA            push d
3274   1A61 26 01 00      mov b, $1
3275   1A64 E7            pop d
3276   1A65 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3277   1A69 E4            pop a
3278   1A6A DA            push d
3279   1A6B 3B 2D 23      mov d, _cave_data ; $cave
3280   1A6E D7            push a
3281   1A6F DA            push d
3282   1A70 3B 1F 23      mov d, _loc_data ; $loc
3283   1A73 D7            push a
3284   1A74 DA            push d
3285   1A75 26 01 00      mov b, $1
3286   1A78 E7            pop d
3287   1A79 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3288   1A7D E4            pop a
3289   1A7E 2A            mov b, [d]
3290   1A7F E7            pop d
3291   1A80 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
3292   1A84 DA            push d
3293   1A85 FA FF FF      lea d, [bp + -1] ; $k
3294   1A88 2A            mov b, [d]
3295   1A89 E7            pop d
3296   1A8A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3297   1A8E E4            pop a
3298   1A8F 2A            mov b, [d]
3299   1A90 E7            pop d
3300   1A91 FD 43         mov [d], b
3301   1A93 0A 96 1A      jmp _if36_exit
3302   1A96             _if36_exit:
3303   1A96             ;; if (loc[ 1     ] == loc[ 0  ]) { 
3304   1A96             _if37_cond:
3305   1A96 3B 1F 23      mov d, _loc_data ; $loc
3306   1A99 D7            push a
3307   1A9A DA            push d
3308   1A9B 26 01 00      mov b, $1
3309   1A9E E7            pop d
3310   1A9F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3311   1AA3 E4            pop a
3312   1AA4 2A            mov b, [d]
3313   1AA5             ; START RELATIONAL
3314   1AA5 D7            push a
3315   1AA6 11            mov a, b
3316   1AA7 3B 1F 23      mov d, _loc_data ; $loc
3317   1AAA D7            push a
3318   1AAB DA            push d
3319   1AAC 26 00 00      mov b, $0
3320   1AAF E7            pop d
3321   1AB0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3322   1AB4 E4            pop a
3323   1AB5 2A            mov b, [d]
3324   1AB6 B0            cmp a, b
3325   1AB7 FD 71         seq ; ==
3326   1AB9 E4            pop a
3327   1ABA             ; END RELATIONAL
3328   1ABA C0 00 00      cmp b, 0
3329   1ABD C6 D9 1A      je _if37_exit
3330   1AC0             _if37_true:
3331   1AC0             ;; print("TSK TSK TSK - WUMPUS GOT YOU!\n"); 
3332   1AC0 26 3E 2A      mov b, __s48 ; "TSK TSK TSK - WUMPUS GOT YOU!\n"
3333   1AC3 FD AB         swp b
3334   1AC5 D8            push b
3335   1AC6 07 ED 0C      call print
3336   1AC9 51 02 00      add sp, 2
3337   1ACC             ;; finished =  2   ; 
3338   1ACC 3B 2B 23      mov d, _finished ; $finished
3339   1ACF DA            push d
3340   1AD0 26 02 00      mov b, $2
3341   1AD3 E7            pop d
3342   1AD4 FD 43         mov [d], b
3343   1AD6 0A D9 1A      jmp _if37_exit
3344   1AD9             _if37_exit:
3345   1AD9 F9            leave
3346   1ADA 09            ret
3347   1ADB             
3348   1ADB             shoot:
3349   1ADB F8 00 00      enter 0 ; (push bp; mov bp, sp)
3350   1ADE             ; $path 
3351   1ADE             ; $scratchloc 
3352   1ADE 10 FF FF      mov a, $ffffffff
3353   1AE1 45 F5 FF      mov [bp + -11], a
3354   1AE4             ; $len 
3355   1AE4             ; $k 
3356   1AE4 52 10 00      sub sp, 16
3357   1AE7             ;; finished =  0  ; 
3358   1AE7 3B 2B 23      mov d, _finished ; $finished
3359   1AEA DA            push d
3360   1AEB 26 00 00      mov b, $0
3361   1AEE E7            pop d
3362   1AEF FD 43         mov [d], b
3363   1AF1             ;; len = -1; 
3364   1AF1 FA F3 FF      lea d, [bp + -13] ; $len
3365   1AF4 DA            push d
3366   1AF5 26 01 00      mov b, $1
3367   1AF8 FD 97         neg b
3368   1AFA E7            pop d
3369   1AFB FD 43         mov [d], b
3370   1AFD             ;; while (len < 1 || len > 5) { 
3371   1AFD             _while38_cond:
3372   1AFD FA F3 FF      lea d, [bp + -13] ; $len
3373   1B00 2A            mov b, [d]
3374   1B01             ; START RELATIONAL
3375   1B01 D7            push a
3376   1B02 11            mov a, b
3377   1B03 26 01 00      mov b, $1
3378   1B06 B0            cmp a, b
3379   1B07 FD 73         slt ; < 
3380   1B09 E4            pop a
3381   1B0A             ; END RELATIONAL
3382   1B0A D7            push a
3383   1B0B 11            mov a, b
3384   1B0C FA F3 FF      lea d, [bp + -13] ; $len
3385   1B0F 2A            mov b, [d]
3386   1B10             ; START RELATIONAL
3387   1B10 D7            push a
3388   1B11 11            mov a, b
3389   1B12 26 05 00      mov b, $5
3390   1B15 B0            cmp a, b
3391   1B16 FD 7F         sgt ; >
3392   1B18 E4            pop a
3393   1B19             ; END RELATIONAL
3394   1B19 FD A8         sor a, b ; ||
3395   1B1B E4            pop a
3396   1B1C C0 00 00      cmp b, 0
3397   1B1F C6 38 1B      je _while38_exit
3398   1B22             _while38_block:
3399   1B22             ;; len = getnum("\nNUMBER OF ROOMS (1-5): "); 
3400   1B22 FA F3 FF      lea d, [bp + -13] ; $len
3401   1B25 DA            push d
3402   1B26 26 5D 2A      mov b, __s49 ; "\nNUMBER OF ROOMS (1-5): "
3403   1B29 FD AB         swp b
3404   1B2B D8            push b
3405   1B2C 07 62 15      call getnum
3406   1B2F 51 02 00      add sp, 2
3407   1B32 E7            pop d
3408   1B33 FD 43         mov [d], b
3409   1B35 0A FD 1A      jmp _while38_cond
3410   1B38             _while38_exit:
3411   1B38             ;; k = 0; 
3412   1B38 FA F1 FF      lea d, [bp + -15] ; $k
3413   1B3B DA            push d
3414   1B3C 26 00 00      mov b, $0
3415   1B3F E7            pop d
3416   1B40 FD 43         mov [d], b
3417   1B42             ;; while (k < len) { 
3418   1B42             _while39_cond:
3419   1B42 FA F1 FF      lea d, [bp + -15] ; $k
3420   1B45 2A            mov b, [d]
3421   1B46             ; START RELATIONAL
3422   1B46 D7            push a
3423   1B47 11            mov a, b
3424   1B48 FA F3 FF      lea d, [bp + -13] ; $len
3425   1B4B 2A            mov b, [d]
3426   1B4C B0            cmp a, b
3427   1B4D FD 73         slt ; < 
3428   1B4F E4            pop a
3429   1B50             ; END RELATIONAL
3430   1B50 C0 00 00      cmp b, 0
3431   1B53 C6 E7 1B      je _while39_exit
3432   1B56             _while39_block:
3433   1B56             ;; path[k] = getnum("ROOM #") - 1; 
3434   1B56 FA F7 FF      lea d, [bp + -9] ; $path
3435   1B59 D7            push a
3436   1B5A DA            push d
3437   1B5B FA F1 FF      lea d, [bp + -15] ; $k
3438   1B5E 2A            mov b, [d]
3439   1B5F E7            pop d
3440   1B60 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3441   1B64 E4            pop a
3442   1B65 DA            push d
3443   1B66 26 76 2A      mov b, __s50 ; "ROOM #"
3444   1B69 FD AB         swp b
3445   1B6B D8            push b
3446   1B6C 07 62 15      call getnum
3447   1B6F 51 02 00      add sp, 2
3448   1B72             ; START TERMS
3449   1B72 D7            push a
3450   1B73 11            mov a, b
3451   1B74 26 01 00      mov b, $1
3452   1B77 60            sub a, b
3453   1B78 27            mov b, a
3454   1B79 E4            pop a
3455   1B7A             ; END TERMS
3456   1B7A E7            pop d
3457   1B7B FD 43         mov [d], b
3458   1B7D             ;; if ((k>1) && (path[k] == path[k-2])) { 
3459   1B7D             _if40_cond:
3460   1B7D FA F1 FF      lea d, [bp + -15] ; $k
3461   1B80 2A            mov b, [d]
3462   1B81             ; START RELATIONAL
3463   1B81 D7            push a
3464   1B82 11            mov a, b
3465   1B83 26 01 00      mov b, $1
3466   1B86 B0            cmp a, b
3467   1B87 FD 7F         sgt ; >
3468   1B89 E4            pop a
3469   1B8A             ; END RELATIONAL
3470   1B8A D7            push a
3471   1B8B 11            mov a, b
3472   1B8C FA F7 FF      lea d, [bp + -9] ; $path
3473   1B8F D7            push a
3474   1B90 DA            push d
3475   1B91 FA F1 FF      lea d, [bp + -15] ; $k
3476   1B94 2A            mov b, [d]
3477   1B95 E7            pop d
3478   1B96 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3479   1B9A E4            pop a
3480   1B9B 2A            mov b, [d]
3481   1B9C             ; START RELATIONAL
3482   1B9C D7            push a
3483   1B9D 11            mov a, b
3484   1B9E FA F7 FF      lea d, [bp + -9] ; $path
3485   1BA1 D7            push a
3486   1BA2 DA            push d
3487   1BA3 FA F1 FF      lea d, [bp + -15] ; $k
3488   1BA6 2A            mov b, [d]
3489   1BA7             ; START TERMS
3490   1BA7 D7            push a
3491   1BA8 11            mov a, b
3492   1BA9 26 02 00      mov b, $2
3493   1BAC 60            sub a, b
3494   1BAD 27            mov b, a
3495   1BAE E4            pop a
3496   1BAF             ; END TERMS
3497   1BAF E7            pop d
3498   1BB0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3499   1BB4 E4            pop a
3500   1BB5 2A            mov b, [d]
3501   1BB6 B0            cmp a, b
3502   1BB7 FD 71         seq ; ==
3503   1BB9 E4            pop a
3504   1BBA             ; END RELATIONAL
3505   1BBA FD A7         sand a, b ; &&
3506   1BBC E4            pop a
3507   1BBD C0 00 00      cmp b, 0
3508   1BC0 C6 D5 1B      je _if40_exit
3509   1BC3             _if40_true:
3510   1BC3             ;; print("ARROWS AREN'T THAT CROOKED - TRY ANOTHER ROOM\n"); 
3511   1BC3 26 7D 2A      mov b, __s51 ; "ARROWS AREN'T THAT CROOKED - TRY ANOTHER ROOM\n"
3512   1BC6 FD AB         swp b
3513   1BC8 D8            push b
3514   1BC9 07 ED 0C      call print
3515   1BCC 51 02 00      add sp, 2
3516   1BCF             ;; continue;  
3517   1BCF 0A 42 1B      jmp _while39_cond ; while continue
3518   1BD2 0A D5 1B      jmp _if40_exit
3519   1BD5             _if40_exit:
3520   1BD5             ;; k++; 
3521   1BD5 FA F1 FF      lea d, [bp + -15] ; $k
3522   1BD8 2A            mov b, [d]
3523   1BD9 FD 79         mov g, b
3524   1BDB FD 77         inc b
3525   1BDD FA F1 FF      lea d, [bp + -15] ; $k
3526   1BE0 FD 43         mov [d], b
3527   1BE2 FD 27         mov b, g
3528   1BE4 0A 42 1B      jmp _while39_cond
3529   1BE7             _while39_exit:
3530   1BE7             ;; scratchloc = loc[ 0  ]; 
3531   1BE7 FA F5 FF      lea d, [bp + -11] ; $scratchloc
3532   1BEA DA            push d
3533   1BEB 3B 1F 23      mov d, _loc_data ; $loc
3534   1BEE D7            push a
3535   1BEF DA            push d
3536   1BF0 26 00 00      mov b, $0
3537   1BF3 E7            pop d
3538   1BF4 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3539   1BF8 E4            pop a
3540   1BF9 2A            mov b, [d]
3541   1BFA E7            pop d
3542   1BFB FD 43         mov [d], b
3543   1BFD             ;; for (k = 0; k < len; k++) { 
3544   1BFD             _for41_init:
3545   1BFD FA F1 FF      lea d, [bp + -15] ; $k
3546   1C00 DA            push d
3547   1C01 26 00 00      mov b, $0
3548   1C04 E7            pop d
3549   1C05 FD 43         mov [d], b
3550   1C07             _for41_cond:
3551   1C07 FA F1 FF      lea d, [bp + -15] ; $k
3552   1C0A 2A            mov b, [d]
3553   1C0B             ; START RELATIONAL
3554   1C0B D7            push a
3555   1C0C 11            mov a, b
3556   1C0D FA F3 FF      lea d, [bp + -13] ; $len
3557   1C10 2A            mov b, [d]
3558   1C11 B0            cmp a, b
3559   1C12 FD 73         slt ; < 
3560   1C14 E4            pop a
3561   1C15             ; END RELATIONAL
3562   1C15 C0 00 00      cmp b, 0
3563   1C18 C6 93 1D      je _for41_exit
3564   1C1B             _for41_block:
3565   1C1B             ;; if ((cave[scratchloc][0] == path[k]) || 
3566   1C1B             _if42_cond:
3567   1C1B 3B 2D 23      mov d, _cave_data ; $cave
3568   1C1E D7            push a
3569   1C1F DA            push d
3570   1C20 FA F5 FF      lea d, [bp + -11] ; $scratchloc
3571   1C23 2A            mov b, [d]
3572   1C24 E7            pop d
3573   1C25 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
3574   1C29 DA            push d
3575   1C2A 26 00 00      mov b, $0
3576   1C2D E7            pop d
3577   1C2E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3578   1C32 E4            pop a
3579   1C33 2A            mov b, [d]
3580   1C34             ; START RELATIONAL
3581   1C34 D7            push a
3582   1C35 11            mov a, b
3583   1C36 FA F7 FF      lea d, [bp + -9] ; $path
3584   1C39 D7            push a
3585   1C3A DA            push d
3586   1C3B FA F1 FF      lea d, [bp + -15] ; $k
3587   1C3E 2A            mov b, [d]
3588   1C3F E7            pop d
3589   1C40 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3590   1C44 E4            pop a
3591   1C45 2A            mov b, [d]
3592   1C46 B0            cmp a, b
3593   1C47 FD 71         seq ; ==
3594   1C49 E4            pop a
3595   1C4A             ; END RELATIONAL
3596   1C4A D7            push a
3597   1C4B 11            mov a, b
3598   1C4C 3B 2D 23      mov d, _cave_data ; $cave
3599   1C4F D7            push a
3600   1C50 DA            push d
3601   1C51 FA F5 FF      lea d, [bp + -11] ; $scratchloc
3602   1C54 2A            mov b, [d]
3603   1C55 E7            pop d
3604   1C56 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
3605   1C5A DA            push d
3606   1C5B 26 01 00      mov b, $1
3607   1C5E E7            pop d
3608   1C5F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3609   1C63 E4            pop a
3610   1C64 2A            mov b, [d]
3611   1C65             ; START RELATIONAL
3612   1C65 D7            push a
3613   1C66 11            mov a, b
3614   1C67 FA F7 FF      lea d, [bp + -9] ; $path
3615   1C6A D7            push a
3616   1C6B DA            push d
3617   1C6C FA F1 FF      lea d, [bp + -15] ; $k
3618   1C6F 2A            mov b, [d]
3619   1C70 E7            pop d
3620   1C71 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3621   1C75 E4            pop a
3622   1C76 2A            mov b, [d]
3623   1C77 B0            cmp a, b
3624   1C78 FD 71         seq ; ==
3625   1C7A E4            pop a
3626   1C7B             ; END RELATIONAL
3627   1C7B FD A8         sor a, b ; ||
3628   1C7D 11            mov a, b
3629   1C7E 3B 2D 23      mov d, _cave_data ; $cave
3630   1C81 D7            push a
3631   1C82 DA            push d
3632   1C83 FA F5 FF      lea d, [bp + -11] ; $scratchloc
3633   1C86 2A            mov b, [d]
3634   1C87 E7            pop d
3635   1C88 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
3636   1C8C DA            push d
3637   1C8D 26 02 00      mov b, $2
3638   1C90 E7            pop d
3639   1C91 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3640   1C95 E4            pop a
3641   1C96 2A            mov b, [d]
3642   1C97             ; START RELATIONAL
3643   1C97 D7            push a
3644   1C98 11            mov a, b
3645   1C99 FA F7 FF      lea d, [bp + -9] ; $path
3646   1C9C D7            push a
3647   1C9D DA            push d
3648   1C9E FA F1 FF      lea d, [bp + -15] ; $k
3649   1CA1 2A            mov b, [d]
3650   1CA2 E7            pop d
3651   1CA3 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3652   1CA7 E4            pop a
3653   1CA8 2A            mov b, [d]
3654   1CA9 B0            cmp a, b
3655   1CAA FD 71         seq ; ==
3656   1CAC E4            pop a
3657   1CAD             ; END RELATIONAL
3658   1CAD FD A8         sor a, b ; ||
3659   1CAF E4            pop a
3660   1CB0 C0 00 00      cmp b, 0
3661   1CB3 C6 D0 1C      je _if42_else
3662   1CB6             _if42_true:
3663   1CB6             ;; scratchloc = path[k]; 
3664   1CB6 FA F5 FF      lea d, [bp + -11] ; $scratchloc
3665   1CB9 DA            push d
3666   1CBA FA F7 FF      lea d, [bp + -9] ; $path
3667   1CBD D7            push a
3668   1CBE DA            push d
3669   1CBF FA F1 FF      lea d, [bp + -15] ; $k
3670   1CC2 2A            mov b, [d]
3671   1CC3 E7            pop d
3672   1CC4 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3673   1CC8 E4            pop a
3674   1CC9 2A            mov b, [d]
3675   1CCA E7            pop d
3676   1CCB FD 43         mov [d], b
3677   1CCD 0A F9 1C      jmp _if42_exit
3678   1CD0             _if42_else:
3679   1CD0             ;; scratchloc = cave[scratchloc][rand2()%3]; 
3680   1CD0 FA F5 FF      lea d, [bp + -11] ; $scratchloc
3681   1CD3 DA            push d
3682   1CD4 3B 2D 23      mov d, _cave_data ; $cave
3683   1CD7 D7            push a
3684   1CD8 DA            push d
3685   1CD9 FA F5 FF      lea d, [bp + -11] ; $scratchloc
3686   1CDC 2A            mov b, [d]
3687   1CDD E7            pop d
3688   1CDE FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
3689   1CE2 DA            push d
3690   1CE3 07 25 20      call rand2
3691   1CE6             ; START FACTORS
3692   1CE6 D7            push a
3693   1CE7 11            mov a, b
3694   1CE8 26 03 00      mov b, $3
3695   1CEB AE            div a, b ; 
3696   1CEC 11            mov a, b
3697   1CED 27            mov b, a
3698   1CEE E4            pop a
3699   1CEF             ; END FACTORS
3700   1CEF E7            pop d
3701   1CF0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3702   1CF4 E4            pop a
3703   1CF5 2A            mov b, [d]
3704   1CF6 E7            pop d
3705   1CF7 FD 43         mov [d], b
3706   1CF9             _if42_exit:
3707   1CF9             ;; if (scratchloc == loc[ 1     ]) { 
3708   1CF9             _if43_cond:
3709   1CF9 FA F5 FF      lea d, [bp + -11] ; $scratchloc
3710   1CFC 2A            mov b, [d]
3711   1CFD             ; START RELATIONAL
3712   1CFD D7            push a
3713   1CFE 11            mov a, b
3714   1CFF 3B 1F 23      mov d, _loc_data ; $loc
3715   1D02 D7            push a
3716   1D03 DA            push d
3717   1D04 26 01 00      mov b, $1
3718   1D07 E7            pop d
3719   1D08 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3720   1D0C E4            pop a
3721   1D0D 2A            mov b, [d]
3722   1D0E B0            cmp a, b
3723   1D0F FD 71         seq ; ==
3724   1D11 E4            pop a
3725   1D12             ; END RELATIONAL
3726   1D12 C0 00 00      cmp b, 0
3727   1D15 C6 31 1D      je _if43_else
3728   1D18             _if43_true:
3729   1D18             ;; print("AHA! YOU GOT THE WUMPUS!\n"); 
3730   1D18 26 AB 2A      mov b, __s52 ; "AHA! YOU GOT THE WUMPUS!\n"
3731   1D1B FD AB         swp b
3732   1D1D D8            push b
3733   1D1E 07 ED 0C      call print
3734   1D21 51 02 00      add sp, 2
3735   1D24             ;; finished =  1  ; 
3736   1D24 3B 2B 23      mov d, _finished ; $finished
3737   1D27 DA            push d
3738   1D28 26 01 00      mov b, $1
3739   1D2B E7            pop d
3740   1D2C FD 43         mov [d], b
3741   1D2E 0A 69 1D      jmp _if43_exit
3742   1D31             _if43_else:
3743   1D31             ;; if (scratchloc == loc[ 0  ]) { 
3744   1D31             _if44_cond:
3745   1D31 FA F5 FF      lea d, [bp + -11] ; $scratchloc
3746   1D34 2A            mov b, [d]
3747   1D35             ; START RELATIONAL
3748   1D35 D7            push a
3749   1D36 11            mov a, b
3750   1D37 3B 1F 23      mov d, _loc_data ; $loc
3751   1D3A D7            push a
3752   1D3B DA            push d
3753   1D3C 26 00 00      mov b, $0
3754   1D3F E7            pop d
3755   1D40 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3756   1D44 E4            pop a
3757   1D45 2A            mov b, [d]
3758   1D46 B0            cmp a, b
3759   1D47 FD 71         seq ; ==
3760   1D49 E4            pop a
3761   1D4A             ; END RELATIONAL
3762   1D4A C0 00 00      cmp b, 0
3763   1D4D C6 69 1D      je _if44_exit
3764   1D50             _if44_true:
3765   1D50             ;; print("OUCH! ARROW GOT YOU!\n"); 
3766   1D50 26 C5 2A      mov b, __s53 ; "OUCH! ARROW GOT YOU!\n"
3767   1D53 FD AB         swp b
3768   1D55 D8            push b
3769   1D56 07 ED 0C      call print
3770   1D59 51 02 00      add sp, 2
3771   1D5C             ;; finished =  2   ; 
3772   1D5C 3B 2B 23      mov d, _finished ; $finished
3773   1D5F DA            push d
3774   1D60 26 02 00      mov b, $2
3775   1D63 E7            pop d
3776   1D64 FD 43         mov [d], b
3777   1D66 0A 69 1D      jmp _if44_exit
3778   1D69             _if44_exit:
3779   1D69             _if43_exit:
3780   1D69             ;; if (finished !=  0  ) { 
3781   1D69             _if45_cond:
3782   1D69 3B 2B 23      mov d, _finished ; $finished
3783   1D6C 2A            mov b, [d]
3784   1D6D             ; START RELATIONAL
3785   1D6D D7            push a
3786   1D6E 11            mov a, b
3787   1D6F 26 00 00      mov b, $0
3788   1D72 B0            cmp a, b
3789   1D73 FD 72         sneq ; !=
3790   1D75 E4            pop a
3791   1D76             ; END RELATIONAL
3792   1D76 C0 00 00      cmp b, 0
3793   1D79 C6 81 1D      je _if45_exit
3794   1D7C             _if45_true:
3795   1D7C             ;; return; 
3796   1D7C F9            leave
3797   1D7D 09            ret
3798   1D7E 0A 81 1D      jmp _if45_exit
3799   1D81             _if45_exit:
3800   1D81             _for41_update:
3801   1D81 FA F1 FF      lea d, [bp + -15] ; $k
3802   1D84 2A            mov b, [d]
3803   1D85 FD 79         mov g, b
3804   1D87 FD 77         inc b
3805   1D89 FA F1 FF      lea d, [bp + -15] ; $k
3806   1D8C FD 43         mov [d], b
3807   1D8E FD 27         mov b, g
3808   1D90 0A 07 1C      jmp _for41_cond
3809   1D93             _for41_exit:
3810   1D93             ;; print("MISSED\n"); 
3811   1D93 26 DB 2A      mov b, __s54 ; "MISSED\n"
3812   1D96 FD AB         swp b
3813   1D98 D8            push b
3814   1D99 07 ED 0C      call print
3815   1D9C 51 02 00      add sp, 2
3816   1D9F             ;; move_wumpus(); 
3817   1D9F 07 30 1A      call move_wumpus
3818   1DA2             ;; if (--arrows <= 0) { 
3819   1DA2             _if46_cond:
3820   1DA2 3B 17 23      mov d, _arrows ; $arrows
3821   1DA5 2A            mov b, [d]
3822   1DA6 FD 7D         dec b
3823   1DA8 3B 17 23      mov d, _arrows ; $arrows
3824   1DAB FD 43         mov [d], b
3825   1DAD             ; START RELATIONAL
3826   1DAD D7            push a
3827   1DAE 11            mov a, b
3828   1DAF 26 00 00      mov b, $0
3829   1DB2 B0            cmp a, b
3830   1DB3 FD 74         sle ; <=
3831   1DB5 E4            pop a
3832   1DB6             ; END RELATIONAL
3833   1DB6 C0 00 00      cmp b, 0
3834   1DB9 C6 C9 1D      je _if46_exit
3835   1DBC             _if46_true:
3836   1DBC             ;; finished =  2   ; 
3837   1DBC 3B 2B 23      mov d, _finished ; $finished
3838   1DBF DA            push d
3839   1DC0 26 02 00      mov b, $2
3840   1DC3 E7            pop d
3841   1DC4 FD 43         mov [d], b
3842   1DC6 0A C9 1D      jmp _if46_exit
3843   1DC9             _if46_exit:
3844   1DC9 F9            leave
3845   1DCA 09            ret
3846   1DCB             
3847   1DCB             move:
3848   1DCB F8 00 00      enter 0 ; (push bp; mov bp, sp)
3849   1DCE             ; $scratchloc 
3850   1DCE 52 02 00      sub sp, 2
3851   1DD1             ;; scratchloc = -1; 
3852   1DD1 FA FF FF      lea d, [bp + -1] ; $scratchloc
3853   1DD4 DA            push d
3854   1DD5 26 01 00      mov b, $1
3855   1DD8 FD 97         neg b
3856   1DDA E7            pop d
3857   1DDB FD 43         mov [d], b
3858   1DDD             ;; while (scratchloc == -1) { 
3859   1DDD             _while47_cond:
3860   1DDD FA FF FF      lea d, [bp + -1] ; $scratchloc
3861   1DE0 2A            mov b, [d]
3862   1DE1             ; START RELATIONAL
3863   1DE1 D7            push a
3864   1DE2 11            mov a, b
3865   1DE3 26 01 00      mov b, $1
3866   1DE6 FD 97         neg b
3867   1DE8 B0            cmp a, b
3868   1DE9 FD 71         seq ; ==
3869   1DEB E4            pop a
3870   1DEC             ; END RELATIONAL
3871   1DEC C0 00 00      cmp b, 0
3872   1DEF C6 15 1F      je _while47_exit
3873   1DF2             _while47_block:
3874   1DF2             ;; scratchloc = getnum("\nWHERE TO: ")-1; 
3875   1DF2 FA FF FF      lea d, [bp + -1] ; $scratchloc
3876   1DF5 DA            push d
3877   1DF6 26 E3 2A      mov b, __s55 ; "\nWHERE TO: "
3878   1DF9 FD AB         swp b
3879   1DFB D8            push b
3880   1DFC 07 62 15      call getnum
3881   1DFF 51 02 00      add sp, 2
3882   1E02             ; START TERMS
3883   1E02 D7            push a
3884   1E03 11            mov a, b
3885   1E04 26 01 00      mov b, $1
3886   1E07 60            sub a, b
3887   1E08 27            mov b, a
3888   1E09 E4            pop a
3889   1E0A             ; END TERMS
3890   1E0A E7            pop d
3891   1E0B FD 43         mov [d], b
3892   1E0D             ;; if (scratchloc < 0 || scratchloc > 19) { 
3893   1E0D             _if48_cond:
3894   1E0D FA FF FF      lea d, [bp + -1] ; $scratchloc
3895   1E10 2A            mov b, [d]
3896   1E11             ; START RELATIONAL
3897   1E11 D7            push a
3898   1E12 11            mov a, b
3899   1E13 26 00 00      mov b, $0
3900   1E16 B0            cmp a, b
3901   1E17 FD 73         slt ; < 
3902   1E19 E4            pop a
3903   1E1A             ; END RELATIONAL
3904   1E1A D7            push a
3905   1E1B 11            mov a, b
3906   1E1C FA FF FF      lea d, [bp + -1] ; $scratchloc
3907   1E1F 2A            mov b, [d]
3908   1E20             ; START RELATIONAL
3909   1E20 D7            push a
3910   1E21 11            mov a, b
3911   1E22 26 13 00      mov b, $13
3912   1E25 B0            cmp a, b
3913   1E26 FD 7F         sgt ; >
3914   1E28 E4            pop a
3915   1E29             ; END RELATIONAL
3916   1E29 FD A8         sor a, b ; ||
3917   1E2B E4            pop a
3918   1E2C C0 00 00      cmp b, 0
3919   1E2F C6 44 1E      je _if48_exit
3920   1E32             _if48_true:
3921   1E32             ;; scratchloc = -1; 
3922   1E32 FA FF FF      lea d, [bp + -1] ; $scratchloc
3923   1E35 DA            push d
3924   1E36 26 01 00      mov b, $1
3925   1E39 FD 97         neg b
3926   1E3B E7            pop d
3927   1E3C FD 43         mov [d], b
3928   1E3E             ;; continue; 
3929   1E3E 0A DD 1D      jmp _while47_cond ; while continue
3930   1E41 0A 44 1E      jmp _if48_exit
3931   1E44             _if48_exit:
3932   1E44             ;; if ((cave[loc[ 0  ]][0] != scratchloc) & 
3933   1E44             _if49_cond:
3934   1E44 3B 2D 23      mov d, _cave_data ; $cave
3935   1E47 D7            push a
3936   1E48 DA            push d
3937   1E49 3B 1F 23      mov d, _loc_data ; $loc
3938   1E4C D7            push a
3939   1E4D DA            push d
3940   1E4E 26 00 00      mov b, $0
3941   1E51 E7            pop d
3942   1E52 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3943   1E56 E4            pop a
3944   1E57 2A            mov b, [d]
3945   1E58 E7            pop d
3946   1E59 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
3947   1E5D DA            push d
3948   1E5E 26 00 00      mov b, $0
3949   1E61 E7            pop d
3950   1E62 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3951   1E66 E4            pop a
3952   1E67 2A            mov b, [d]
3953   1E68             ; START RELATIONAL
3954   1E68 D7            push a
3955   1E69 11            mov a, b
3956   1E6A FA FF FF      lea d, [bp + -1] ; $scratchloc
3957   1E6D 2A            mov b, [d]
3958   1E6E B0            cmp a, b
3959   1E6F FD 72         sneq ; !=
3960   1E71 E4            pop a
3961   1E72             ; END RELATIONAL
3962   1E72 D7            push a
3963   1E73 11            mov a, b
3964   1E74 3B 2D 23      mov d, _cave_data ; $cave
3965   1E77 D7            push a
3966   1E78 DA            push d
3967   1E79 3B 1F 23      mov d, _loc_data ; $loc
3968   1E7C D7            push a
3969   1E7D DA            push d
3970   1E7E 26 00 00      mov b, $0
3971   1E81 E7            pop d
3972   1E82 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3973   1E86 E4            pop a
3974   1E87 2A            mov b, [d]
3975   1E88 E7            pop d
3976   1E89 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
3977   1E8D DA            push d
3978   1E8E 26 01 00      mov b, $1
3979   1E91 E7            pop d
3980   1E92 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3981   1E96 E4            pop a
3982   1E97 2A            mov b, [d]
3983   1E98             ; START RELATIONAL
3984   1E98 D7            push a
3985   1E99 11            mov a, b
3986   1E9A FA FF FF      lea d, [bp + -1] ; $scratchloc
3987   1E9D 2A            mov b, [d]
3988   1E9E B0            cmp a, b
3989   1E9F FD 72         sneq ; !=
3990   1EA1 E4            pop a
3991   1EA2             ; END RELATIONAL
3992   1EA2 86            and a, b ; &
3993   1EA3 3B 2D 23      mov d, _cave_data ; $cave
3994   1EA6 D7            push a
3995   1EA7 DA            push d
3996   1EA8 3B 1F 23      mov d, _loc_data ; $loc
3997   1EAB D7            push a
3998   1EAC DA            push d
3999   1EAD 26 00 00      mov b, $0
4000   1EB0 E7            pop d
4001   1EB1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4002   1EB5 E4            pop a
4003   1EB6 2A            mov b, [d]
4004   1EB7 E7            pop d
4005   1EB8 FD 13 06 00   mma 6 ; mov a, 6; mul a, b; add d, b
4006   1EBC DA            push d
4007   1EBD 26 02 00      mov b, $2
4008   1EC0 E7            pop d
4009   1EC1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4010   1EC5 E4            pop a
4011   1EC6 2A            mov b, [d]
4012   1EC7             ; START RELATIONAL
4013   1EC7 D7            push a
4014   1EC8 11            mov a, b
4015   1EC9 FA FF FF      lea d, [bp + -1] ; $scratchloc
4016   1ECC 2A            mov b, [d]
4017   1ECD B0            cmp a, b
4018   1ECE FD 72         sneq ; !=
4019   1ED0 E4            pop a
4020   1ED1             ; END RELATIONAL
4021   1ED1 86            and a, b ; &
4022   1ED2 3B 1F 23      mov d, _loc_data ; $loc
4023   1ED5 D7            push a
4024   1ED6 DA            push d
4025   1ED7 26 00 00      mov b, $0
4026   1EDA E7            pop d
4027   1EDB FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4028   1EDF E4            pop a
4029   1EE0 2A            mov b, [d]
4030   1EE1             ; START RELATIONAL
4031   1EE1 D7            push a
4032   1EE2 11            mov a, b
4033   1EE3 FA FF FF      lea d, [bp + -1] ; $scratchloc
4034   1EE6 2A            mov b, [d]
4035   1EE7 B0            cmp a, b
4036   1EE8 FD 72         sneq ; !=
4037   1EEA E4            pop a
4038   1EEB             ; END RELATIONAL
4039   1EEB 86            and a, b ; &
4040   1EEC 27            mov b, a
4041   1EED E4            pop a
4042   1EEE C0 00 00      cmp b, 0
4043   1EF1 C6 12 1F      je _if49_exit
4044   1EF4             _if49_true:
4045   1EF4             ;; print("NOT POSSIBLE\n"); 
4046   1EF4 26 EF 2A      mov b, __s56 ; "NOT POSSIBLE\n"
4047   1EF7 FD AB         swp b
4048   1EF9 D8            push b
4049   1EFA 07 ED 0C      call print
4050   1EFD 51 02 00      add sp, 2
4051   1F00             ;; scratchloc = -1; 
4052   1F00 FA FF FF      lea d, [bp + -1] ; $scratchloc
4053   1F03 DA            push d
4054   1F04 26 01 00      mov b, $1
4055   1F07 FD 97         neg b
4056   1F09 E7            pop d
4057   1F0A FD 43         mov [d], b
4058   1F0C             ;; continue; 
4059   1F0C 0A DD 1D      jmp _while47_cond ; while continue
4060   1F0F 0A 12 1F      jmp _if49_exit
4061   1F12             _if49_exit:
4062   1F12 0A DD 1D      jmp _while47_cond
4063   1F15             _while47_exit:
4064   1F15             ;; loc[ 0  ] = scratchloc; 
4065   1F15 3B 1F 23      mov d, _loc_data ; $loc
4066   1F18 D7            push a
4067   1F19 DA            push d
4068   1F1A 26 00 00      mov b, $0
4069   1F1D E7            pop d
4070   1F1E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4071   1F22 E4            pop a
4072   1F23 DA            push d
4073   1F24 FA FF FF      lea d, [bp + -1] ; $scratchloc
4074   1F27 2A            mov b, [d]
4075   1F28 E7            pop d
4076   1F29 FD 43         mov [d], b
4077   1F2B             ;; while ((scratchloc == loc[ 4    ]) || (scratchloc == loc[ 5    ])) { 
4078   1F2B             _while50_cond:
4079   1F2B FA FF FF      lea d, [bp + -1] ; $scratchloc
4080   1F2E 2A            mov b, [d]
4081   1F2F             ; START RELATIONAL
4082   1F2F D7            push a
4083   1F30 11            mov a, b
4084   1F31 3B 1F 23      mov d, _loc_data ; $loc
4085   1F34 D7            push a
4086   1F35 DA            push d
4087   1F36 26 04 00      mov b, $4
4088   1F39 E7            pop d
4089   1F3A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4090   1F3E E4            pop a
4091   1F3F 2A            mov b, [d]
4092   1F40 B0            cmp a, b
4093   1F41 FD 71         seq ; ==
4094   1F43 E4            pop a
4095   1F44             ; END RELATIONAL
4096   1F44 D7            push a
4097   1F45 11            mov a, b
4098   1F46 FA FF FF      lea d, [bp + -1] ; $scratchloc
4099   1F49 2A            mov b, [d]
4100   1F4A             ; START RELATIONAL
4101   1F4A D7            push a
4102   1F4B 11            mov a, b
4103   1F4C 3B 1F 23      mov d, _loc_data ; $loc
4104   1F4F D7            push a
4105   1F50 DA            push d
4106   1F51 26 05 00      mov b, $5
4107   1F54 E7            pop d
4108   1F55 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4109   1F59 E4            pop a
4110   1F5A 2A            mov b, [d]
4111   1F5B B0            cmp a, b
4112   1F5C FD 71         seq ; ==
4113   1F5E E4            pop a
4114   1F5F             ; END RELATIONAL
4115   1F5F FD A8         sor a, b ; ||
4116   1F61 E4            pop a
4117   1F62 C0 00 00      cmp b, 0
4118   1F65 C6 9C 1F      je _while50_exit
4119   1F68             _while50_block:
4120   1F68             ;; print("ZAP--SUPER BAT SNATCH! ELSEWHEREVILLE FOR YOU!\n"); 
4121   1F68 26 FD 2A      mov b, __s57 ; "ZAP--SUPER BAT SNATCH! ELSEWHEREVILLE FOR YOU!\n"
4122   1F6B FD AB         swp b
4123   1F6D D8            push b
4124   1F6E 07 ED 0C      call print
4125   1F71 51 02 00      add sp, 2
4126   1F74             ;; scratchloc = loc[ 0  ] = rand2()%20; 
4127   1F74 FA FF FF      lea d, [bp + -1] ; $scratchloc
4128   1F77 DA            push d
4129   1F78 3B 1F 23      mov d, _loc_data ; $loc
4130   1F7B D7            push a
4131   1F7C DA            push d
4132   1F7D 26 00 00      mov b, $0
4133   1F80 E7            pop d
4134   1F81 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4135   1F85 E4            pop a
4136   1F86 DA            push d
4137   1F87 07 25 20      call rand2
4138   1F8A             ; START FACTORS
4139   1F8A D7            push a
4140   1F8B 11            mov a, b
4141   1F8C 26 14 00      mov b, $14
4142   1F8F AE            div a, b ; 
4143   1F90 11            mov a, b
4144   1F91 27            mov b, a
4145   1F92 E4            pop a
4146   1F93             ; END FACTORS
4147   1F93 E7            pop d
4148   1F94 FD 43         mov [d], b
4149   1F96 E7            pop d
4150   1F97 FD 43         mov [d], b
4151   1F99 0A 2B 1F      jmp _while50_cond
4152   1F9C             _while50_exit:
4153   1F9C             ;; if (scratchloc == loc[ 1     ]) { 
4154   1F9C             _if51_cond:
4155   1F9C FA FF FF      lea d, [bp + -1] ; $scratchloc
4156   1F9F 2A            mov b, [d]
4157   1FA0             ; START RELATIONAL
4158   1FA0 D7            push a
4159   1FA1 11            mov a, b
4160   1FA2 3B 1F 23      mov d, _loc_data ; $loc
4161   1FA5 D7            push a
4162   1FA6 DA            push d
4163   1FA7 26 01 00      mov b, $1
4164   1FAA E7            pop d
4165   1FAB FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4166   1FAF E4            pop a
4167   1FB0 2A            mov b, [d]
4168   1FB1 B0            cmp a, b
4169   1FB2 FD 71         seq ; ==
4170   1FB4 E4            pop a
4171   1FB5             ; END RELATIONAL
4172   1FB5 C0 00 00      cmp b, 0
4173   1FB8 C6 CD 1F      je _if51_exit
4174   1FBB             _if51_true:
4175   1FBB             ;; print("... OOPS! BUMPED A WUMPUS!\n"); 
4176   1FBB 26 2D 2B      mov b, __s58 ; "... OOPS! BUMPED A WUMPUS!\n"
4177   1FBE FD AB         swp b
4178   1FC0 D8            push b
4179   1FC1 07 ED 0C      call print
4180   1FC4 51 02 00      add sp, 2
4181   1FC7             ;; move_wumpus(); 
4182   1FC7 07 30 1A      call move_wumpus
4183   1FCA 0A CD 1F      jmp _if51_exit
4184   1FCD             _if51_exit:
4185   1FCD             ;; if (scratchloc == loc[ 2   ] || scratchloc == loc[ 3   ]) { 
4186   1FCD             _if52_cond:
4187   1FCD FA FF FF      lea d, [bp + -1] ; $scratchloc
4188   1FD0 2A            mov b, [d]
4189   1FD1             ; START RELATIONAL
4190   1FD1 D7            push a
4191   1FD2 11            mov a, b
4192   1FD3 3B 1F 23      mov d, _loc_data ; $loc
4193   1FD6 D7            push a
4194   1FD7 DA            push d
4195   1FD8 26 02 00      mov b, $2
4196   1FDB E7            pop d
4197   1FDC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4198   1FE0 E4            pop a
4199   1FE1 2A            mov b, [d]
4200   1FE2 B0            cmp a, b
4201   1FE3 FD 71         seq ; ==
4202   1FE5 E4            pop a
4203   1FE6             ; END RELATIONAL
4204   1FE6 D7            push a
4205   1FE7 11            mov a, b
4206   1FE8 FA FF FF      lea d, [bp + -1] ; $scratchloc
4207   1FEB 2A            mov b, [d]
4208   1FEC             ; START RELATIONAL
4209   1FEC D7            push a
4210   1FED 11            mov a, b
4211   1FEE 3B 1F 23      mov d, _loc_data ; $loc
4212   1FF1 D7            push a
4213   1FF2 DA            push d
4214   1FF3 26 03 00      mov b, $3
4215   1FF6 E7            pop d
4216   1FF7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4217   1FFB E4            pop a
4218   1FFC 2A            mov b, [d]
4219   1FFD B0            cmp a, b
4220   1FFE FD 71         seq ; ==
4221   2000 E4            pop a
4222   2001             ; END RELATIONAL
4223   2001 FD A8         sor a, b ; ||
4224   2003 E4            pop a
4225   2004 C0 00 00      cmp b, 0
4226   2007 C6 23 20      je _if52_exit
4227   200A             _if52_true:
4228   200A             ;; print("YYYYIIIIEEEE . . . FELL IN PIT\n"); 
4229   200A 26 49 2B      mov b, __s59 ; "YYYYIIIIEEEE . . . FELL IN PIT\n"
4230   200D FD AB         swp b
4231   200F D8            push b
4232   2010 07 ED 0C      call print
4233   2013 51 02 00      add sp, 2
4234   2016             ;; finished =  2   ; 
4235   2016 3B 2B 23      mov d, _finished ; $finished
4236   2019 DA            push d
4237   201A 26 02 00      mov b, $2
4238   201D E7            pop d
4239   201E FD 43         mov [d], b
4240   2020 0A 23 20      jmp _if52_exit
4241   2023             _if52_exit:
4242   2023 F9            leave
4243   2024 09            ret
4244   2025             
4245   2025             rand2:
4246   2025 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4247   2028             ;; rand_val=rand_val+rand_inc; 
4248   2028 3B 1B 23      mov d, _rand_val ; $rand_val
4249   202B DA            push d
4250   202C 3B 1B 23      mov d, _rand_val ; $rand_val
4251   202F 2A            mov b, [d]
4252   2030             ; START TERMS
4253   2030 D7            push a
4254   2031 11            mov a, b
4255   2032 3B 1D 23      mov d, _rand_inc ; $rand_inc
4256   2035 2A            mov b, [d]
4257   2036 54            add a, b
4258   2037 27            mov b, a
4259   2038 E4            pop a
4260   2039             ; END TERMS
4261   2039 E7            pop d
4262   203A FD 43         mov [d], b
4263   203C             ;; rand_inc++; 
4264   203C 3B 1D 23      mov d, _rand_inc ; $rand_inc
4265   203F 2A            mov b, [d]
4266   2040 FD 79         mov g, b
4267   2042 FD 77         inc b
4268   2044 3B 1D 23      mov d, _rand_inc ; $rand_inc
4269   2047 FD 43         mov [d], b
4270   2049 FD 27         mov b, g
4271   204B             ;; return rand_val; 
4272   204B 3B 1B 23      mov d, _rand_val ; $rand_val
4273   204E 2A            mov b, [d]
4274   204F F9            leave
4275   2050 09            ret
4276   2051             
4277   2051             game_setup:
4278   2051 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4279   2054             ; $j 
4280   2054             ; $k 
4281   2054             ; $v 
4282   2054 52 06 00      sub sp, 6
4283   2057             ;; for (j = 0; j <  6   ; j++) { 
4284   2057             _for53_init:
4285   2057 FA FF FF      lea d, [bp + -1] ; $j
4286   205A DA            push d
4287   205B 26 00 00      mov b, $0
4288   205E E7            pop d
4289   205F FD 43         mov [d], b
4290   2061             _for53_cond:
4291   2061 FA FF FF      lea d, [bp + -1] ; $j
4292   2064 2A            mov b, [d]
4293   2065             ; START RELATIONAL
4294   2065 D7            push a
4295   2066 11            mov a, b
4296   2067 26 06 00      mov b, $6
4297   206A B0            cmp a, b
4298   206B FD 73         slt ; < 
4299   206D E4            pop a
4300   206E             ; END RELATIONAL
4301   206E C0 00 00      cmp b, 0
4302   2071 C6 69 21      je _for53_exit
4303   2074             _for53_block:
4304   2074             ;; loc[j] = -1; 
4305   2074 3B 1F 23      mov d, _loc_data ; $loc
4306   2077 D7            push a
4307   2078 DA            push d
4308   2079 FA FF FF      lea d, [bp + -1] ; $j
4309   207C 2A            mov b, [d]
4310   207D E7            pop d
4311   207E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4312   2082 E4            pop a
4313   2083 DA            push d
4314   2084 26 01 00      mov b, $1
4315   2087 FD 97         neg b
4316   2089 E7            pop d
4317   208A FD 43         mov [d], b
4318   208C             ;; while (loc[j] < 0) { 
4319   208C             _while54_cond:
4320   208C 3B 1F 23      mov d, _loc_data ; $loc
4321   208F D7            push a
4322   2090 DA            push d
4323   2091 FA FF FF      lea d, [bp + -1] ; $j
4324   2094 2A            mov b, [d]
4325   2095 E7            pop d
4326   2096 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4327   209A E4            pop a
4328   209B 2A            mov b, [d]
4329   209C             ; START RELATIONAL
4330   209C D7            push a
4331   209D 11            mov a, b
4332   209E 26 00 00      mov b, $0
4333   20A1 B0            cmp a, b
4334   20A2 FD 73         slt ; < 
4335   20A4 E4            pop a
4336   20A5             ; END RELATIONAL
4337   20A5 C0 00 00      cmp b, 0
4338   20A8 C6 57 21      je _while54_exit
4339   20AB             _while54_block:
4340   20AB             ;; v = rand2(); 
4341   20AB FA FB FF      lea d, [bp + -5] ; $v
4342   20AE DA            push d
4343   20AF 07 25 20      call rand2
4344   20B2 E7            pop d
4345   20B3 FD 43         mov [d], b
4346   20B5             ;; loc[j] = v % 20; 
4347   20B5 3B 1F 23      mov d, _loc_data ; $loc
4348   20B8 D7            push a
4349   20B9 DA            push d
4350   20BA FA FF FF      lea d, [bp + -1] ; $j
4351   20BD 2A            mov b, [d]
4352   20BE E7            pop d
4353   20BF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4354   20C3 E4            pop a
4355   20C4 DA            push d
4356   20C5 FA FB FF      lea d, [bp + -5] ; $v
4357   20C8 2A            mov b, [d]
4358   20C9             ; START FACTORS
4359   20C9 D7            push a
4360   20CA 11            mov a, b
4361   20CB 26 14 00      mov b, $14
4362   20CE AE            div a, b ; 
4363   20CF 11            mov a, b
4364   20D0 27            mov b, a
4365   20D1 E4            pop a
4366   20D2             ; END FACTORS
4367   20D2 E7            pop d
4368   20D3 FD 43         mov [d], b
4369   20D5             ;; for (k=0; k<j-1; k++) { 
4370   20D5             _for55_init:
4371   20D5 FA FD FF      lea d, [bp + -3] ; $k
4372   20D8 DA            push d
4373   20D9 26 00 00      mov b, $0
4374   20DC E7            pop d
4375   20DD FD 43         mov [d], b
4376   20DF             _for55_cond:
4377   20DF FA FD FF      lea d, [bp + -3] ; $k
4378   20E2 2A            mov b, [d]
4379   20E3             ; START RELATIONAL
4380   20E3 D7            push a
4381   20E4 11            mov a, b
4382   20E5 FA FF FF      lea d, [bp + -1] ; $j
4383   20E8 2A            mov b, [d]
4384   20E9             ; START TERMS
4385   20E9 D7            push a
4386   20EA 11            mov a, b
4387   20EB 26 01 00      mov b, $1
4388   20EE 60            sub a, b
4389   20EF 27            mov b, a
4390   20F0 E4            pop a
4391   20F1             ; END TERMS
4392   20F1 B0            cmp a, b
4393   20F2 FD 73         slt ; < 
4394   20F4 E4            pop a
4395   20F5             ; END RELATIONAL
4396   20F5 C0 00 00      cmp b, 0
4397   20F8 C6 54 21      je _for55_exit
4398   20FB             _for55_block:
4399   20FB             ;; if (loc[j] == loc[k]) { 
4400   20FB             _if56_cond:
4401   20FB 3B 1F 23      mov d, _loc_data ; $loc
4402   20FE D7            push a
4403   20FF DA            push d
4404   2100 FA FF FF      lea d, [bp + -1] ; $j
4405   2103 2A            mov b, [d]
4406   2104 E7            pop d
4407   2105 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4408   2109 E4            pop a
4409   210A 2A            mov b, [d]
4410   210B             ; START RELATIONAL
4411   210B D7            push a
4412   210C 11            mov a, b
4413   210D 3B 1F 23      mov d, _loc_data ; $loc
4414   2110 D7            push a
4415   2111 DA            push d
4416   2112 FA FD FF      lea d, [bp + -3] ; $k
4417   2115 2A            mov b, [d]
4418   2116 E7            pop d
4419   2117 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4420   211B E4            pop a
4421   211C 2A            mov b, [d]
4422   211D B0            cmp a, b
4423   211E FD 71         seq ; ==
4424   2120 E4            pop a
4425   2121             ; END RELATIONAL
4426   2121 C0 00 00      cmp b, 0
4427   2124 C6 42 21      je _if56_exit
4428   2127             _if56_true:
4429   2127             ;; loc[j] = -1; 
4430   2127 3B 1F 23      mov d, _loc_data ; $loc
4431   212A D7            push a
4432   212B DA            push d
4433   212C FA FF FF      lea d, [bp + -1] ; $j
4434   212F 2A            mov b, [d]
4435   2130 E7            pop d
4436   2131 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4437   2135 E4            pop a
4438   2136 DA            push d
4439   2137 26 01 00      mov b, $1
4440   213A FD 97         neg b
4441   213C E7            pop d
4442   213D FD 43         mov [d], b
4443   213F 0A 42 21      jmp _if56_exit
4444   2142             _if56_exit:
4445   2142             _for55_update:
4446   2142 FA FD FF      lea d, [bp + -3] ; $k
4447   2145 2A            mov b, [d]
4448   2146 FD 79         mov g, b
4449   2148 FD 77         inc b
4450   214A FA FD FF      lea d, [bp + -3] ; $k
4451   214D FD 43         mov [d], b
4452   214F FD 27         mov b, g
4453   2151 0A DF 20      jmp _for55_cond
4454   2154             _for55_exit:
4455   2154 0A 8C 20      jmp _while54_cond
4456   2157             _while54_exit:
4457   2157             _for53_update:
4458   2157 FA FF FF      lea d, [bp + -1] ; $j
4459   215A 2A            mov b, [d]
4460   215B FD 79         mov g, b
4461   215D FD 77         inc b
4462   215F FA FF FF      lea d, [bp + -1] ; $j
4463   2162 FD 43         mov [d], b
4464   2164 FD 27         mov b, g
4465   2166 0A 61 20      jmp _for53_cond
4466   2169             _for53_exit:
4467   2169 F9            leave
4468   216A 09            ret
4469   216B             
4470   216B             game_play:
4471   216B F8 00 00      enter 0 ; (push bp; mov bp, sp)
4472   216E             ; $c 
4473   216E 52 02 00      sub sp, 2
4474   2171             ;; arrows = 5; 
4475   2171 3B 17 23      mov d, _arrows ; $arrows
4476   2174 DA            push d
4477   2175 26 05 00      mov b, $5
4478   2178 E7            pop d
4479   2179 FD 43         mov [d], b
4480   217B             ;; print("HUNT THE WUMPUS\n"); 
4481   217B 26 69 2B      mov b, __s60 ; "HUNT THE WUMPUS\n"
4482   217E FD AB         swp b
4483   2180 D8            push b
4484   2181 07 ED 0C      call print
4485   2184 51 02 00      add sp, 2
4486   2187             ;; if (debug) { 
4487   2187             _if57_cond:
4488   2187 3B 19 23      mov d, _debug ; $debug
4489   218A 2A            mov b, [d]
4490   218B C0 00 00      cmp b, 0
4491   218E C6 70 22      je _if57_exit
4492   2191             _if57_true:
4493   2191             ;; print("Wumpus is at "); printu(loc[ 1     ]+1); 
4494   2191 26 7A 2B      mov b, __s61 ; "Wumpus is at "
4495   2194 FD AB         swp b
4496   2196 D8            push b
4497   2197 07 ED 0C      call print
4498   219A 51 02 00      add sp, 2
4499   219D             ;; printu(loc[ 1     ]+1); 
4500   219D 3B 1F 23      mov d, _loc_data ; $loc
4501   21A0 D7            push a
4502   21A1 DA            push d
4503   21A2 26 01 00      mov b, $1
4504   21A5 E7            pop d
4505   21A6 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4506   21AA E4            pop a
4507   21AB 2A            mov b, [d]
4508   21AC             ; START TERMS
4509   21AC D7            push a
4510   21AD 11            mov a, b
4511   21AE 26 01 00      mov b, $1
4512   21B1 54            add a, b
4513   21B2 27            mov b, a
4514   21B3 E4            pop a
4515   21B4             ; END TERMS
4516   21B4 FD AB         swp b
4517   21B6 D8            push b
4518   21B7 07 B9 0B      call printu
4519   21BA 51 02 00      add sp, 2
4520   21BD             ;; print(", pits at "); printu(loc[ 2   ]+1); 
4521   21BD 26 88 2B      mov b, __s62 ; ", pits at "
4522   21C0 FD AB         swp b
4523   21C2 D8            push b
4524   21C3 07 ED 0C      call print
4525   21C6 51 02 00      add sp, 2
4526   21C9             ;; printu(loc[ 2   ]+1); 
4527   21C9 3B 1F 23      mov d, _loc_data ; $loc
4528   21CC D7            push a
4529   21CD DA            push d
4530   21CE 26 02 00      mov b, $2
4531   21D1 E7            pop d
4532   21D2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4533   21D6 E4            pop a
4534   21D7 2A            mov b, [d]
4535   21D8             ; START TERMS
4536   21D8 D7            push a
4537   21D9 11            mov a, b
4538   21DA 26 01 00      mov b, $1
4539   21DD 54            add a, b
4540   21DE 27            mov b, a
4541   21DF E4            pop a
4542   21E0             ; END TERMS
4543   21E0 FD AB         swp b
4544   21E2 D8            push b
4545   21E3 07 B9 0B      call printu
4546   21E6 51 02 00      add sp, 2
4547   21E9             ;; print(" & "); printu(loc[ 3   ]+1); 
4548   21E9 26 93 2B      mov b, __s63 ; " & "
4549   21EC FD AB         swp b
4550   21EE D8            push b
4551   21EF 07 ED 0C      call print
4552   21F2 51 02 00      add sp, 2
4553   21F5             ;; printu(loc[ 3   ]+1); 
4554   21F5 3B 1F 23      mov d, _loc_data ; $loc
4555   21F8 D7            push a
4556   21F9 DA            push d
4557   21FA 26 03 00      mov b, $3
4558   21FD E7            pop d
4559   21FE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4560   2202 E4            pop a
4561   2203 2A            mov b, [d]
4562   2204             ; START TERMS
4563   2204 D7            push a
4564   2205 11            mov a, b
4565   2206 26 01 00      mov b, $1
4566   2209 54            add a, b
4567   220A 27            mov b, a
4568   220B E4            pop a
4569   220C             ; END TERMS
4570   220C FD AB         swp b
4571   220E D8            push b
4572   220F 07 B9 0B      call printu
4573   2212 51 02 00      add sp, 2
4574   2215             ;; print(", bats at "); printu(loc[ 4    ]+1); 
4575   2215 26 97 2B      mov b, __s64 ; ", bats at "
4576   2218 FD AB         swp b
4577   221A D8            push b
4578   221B 07 ED 0C      call print
4579   221E 51 02 00      add sp, 2
4580   2221             ;; printu(loc[ 4    ]+1); 
4581   2221 3B 1F 23      mov d, _loc_data ; $loc
4582   2224 D7            push a
4583   2225 DA            push d
4584   2226 26 04 00      mov b, $4
4585   2229 E7            pop d
4586   222A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4587   222E E4            pop a
4588   222F 2A            mov b, [d]
4589   2230             ; START TERMS
4590   2230 D7            push a
4591   2231 11            mov a, b
4592   2232 26 01 00      mov b, $1
4593   2235 54            add a, b
4594   2236 27            mov b, a
4595   2237 E4            pop a
4596   2238             ; END TERMS
4597   2238 FD AB         swp b
4598   223A D8            push b
4599   223B 07 B9 0B      call printu
4600   223E 51 02 00      add sp, 2
4601   2241             ;; print(" & "); printu(loc[ 5    ]+1); 
4602   2241 26 93 2B      mov b, __s63 ; " & "
4603   2244 FD AB         swp b
4604   2246 D8            push b
4605   2247 07 ED 0C      call print
4606   224A 51 02 00      add sp, 2
4607   224D             ;; printu(loc[ 5    ]+1); 
4608   224D 3B 1F 23      mov d, _loc_data ; $loc
4609   2250 D7            push a
4610   2251 DA            push d
4611   2252 26 05 00      mov b, $5
4612   2255 E7            pop d
4613   2256 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4614   225A E4            pop a
4615   225B 2A            mov b, [d]
4616   225C             ; START TERMS
4617   225C D7            push a
4618   225D 11            mov a, b
4619   225E 26 01 00      mov b, $1
4620   2261 54            add a, b
4621   2262 27            mov b, a
4622   2263 E4            pop a
4623   2264             ; END TERMS
4624   2264 FD AB         swp b
4625   2266 D8            push b
4626   2267 07 B9 0B      call printu
4627   226A 51 02 00      add sp, 2
4628   226D 0A 70 22      jmp _if57_exit
4629   2270             _if57_exit:
4630   2270             ;; finished =  0  ; 
4631   2270 3B 2B 23      mov d, _finished ; $finished
4632   2273 DA            push d
4633   2274 26 00 00      mov b, $0
4634   2277 E7            pop d
4635   2278 FD 43         mov [d], b
4636   227A             ;; while (finished ==  0  ) { 
4637   227A             _while58_cond:
4638   227A 3B 2B 23      mov d, _finished ; $finished
4639   227D 2A            mov b, [d]
4640   227E             ; START RELATIONAL
4641   227E D7            push a
4642   227F 11            mov a, b
4643   2280 26 00 00      mov b, $0
4644   2283 B0            cmp a, b
4645   2284 FD 71         seq ; ==
4646   2286 E4            pop a
4647   2287             ; END RELATIONAL
4648   2287 C0 00 00      cmp b, 0
4649   228A C6 A5 22      je _while58_exit
4650   228D             _while58_block:
4651   228D             ;; show_room(); 
4652   228D 07 8F 17      call show_room
4653   2290             ;; if (move_or_shoot()) { 
4654   2290             _if59_cond:
4655   2290 07 CB 19      call move_or_shoot
4656   2293 C0 00 00      cmp b, 0
4657   2296 C6 9F 22      je _if59_else
4658   2299             _if59_true:
4659   2299             ;; shoot(); 
4660   2299 07 DB 1A      call shoot
4661   229C 0A A2 22      jmp _if59_exit
4662   229F             _if59_else:
4663   229F             ;; move(); 
4664   229F 07 CB 1D      call move
4665   22A2             _if59_exit:
4666   22A2 0A 7A 22      jmp _while58_cond
4667   22A5             _while58_exit:
4668   22A5             ;; if (finished ==  1  ) { 
4669   22A5             _if60_cond:
4670   22A5 3B 2B 23      mov d, _finished ; $finished
4671   22A8 2A            mov b, [d]
4672   22A9             ; START RELATIONAL
4673   22A9 D7            push a
4674   22AA 11            mov a, b
4675   22AB 26 01 00      mov b, $1
4676   22AE B0            cmp a, b
4677   22AF FD 71         seq ; ==
4678   22B1 E4            pop a
4679   22B2             ; END RELATIONAL
4680   22B2 C0 00 00      cmp b, 0
4681   22B5 C6 C7 22      je _if60_exit
4682   22B8             _if60_true:
4683   22B8             ;; print("HEE HEE HEE - THE WUMPUS'LL GET YOU NEXT TIME!!\n"); 
4684   22B8 26 A2 2B      mov b, __s65 ; "HEE HEE HEE - THE WUMPUS'LL GET YOU NEXT TIME!!\n"
4685   22BB FD AB         swp b
4686   22BD D8            push b
4687   22BE 07 ED 0C      call print
4688   22C1 51 02 00      add sp, 2
4689   22C4 0A C7 22      jmp _if60_exit
4690   22C7             _if60_exit:
4691   22C7             ;; if (finished ==  2   ) { 
4692   22C7             _if61_cond:
4693   22C7 3B 2B 23      mov d, _finished ; $finished
4694   22CA 2A            mov b, [d]
4695   22CB             ; START RELATIONAL
4696   22CB D7            push a
4697   22CC 11            mov a, b
4698   22CD 26 02 00      mov b, $2
4699   22D0 B0            cmp a, b
4700   22D1 FD 71         seq ; ==
4701   22D3 E4            pop a
4702   22D4             ; END RELATIONAL
4703   22D4 C0 00 00      cmp b, 0
4704   22D7 C6 E9 22      je _if61_exit
4705   22DA             _if61_true:
4706   22DA             ;; print("HA HA HA - YOU LOSE!\n"); 
4707   22DA 26 D2 2B      mov b, __s66 ; "HA HA HA - YOU LOSE!\n"
4708   22DD FD AB         swp b
4709   22DF D8            push b
4710   22E0 07 ED 0C      call print
4711   22E3 51 02 00      add sp, 2
4712   22E6 0A E9 22      jmp _if61_exit
4713   22E9             _if61_exit:
4714   22E9             ;; c = getlet("NEW GAME (Y-N): "); 
4715   22E9 FA FF FF      lea d, [bp + -1] ; $c
4716   22EC DA            push d
4717   22ED 26 C4 23      mov b, __s1 ; "NEW GAME (Y-N): "
4718   22F0 FD AB         swp b
4719   22F2 D8            push b
4720   22F3 07 85 15      call getlet
4721   22F6 51 02 00      add sp, 2
4722   22F9 E7            pop d
4723   22FA FD 43         mov [d], b
4724   22FC             ;; if (c == 'N') { 
4725   22FC             _if62_cond:
4726   22FC FA FF FF      lea d, [bp + -1] ; $c
4727   22FF 2A            mov b, [d]
4728   2300             ; START RELATIONAL
4729   2300 D7            push a
4730   2301 11            mov a, b
4731   2302 26 4E 00      mov b, $4e
4732   2305 B0            cmp a, b
4733   2306 FD 71         seq ; ==
4734   2308 E4            pop a
4735   2309             ; END RELATIONAL
4736   2309 C0 00 00      cmp b, 0
4737   230C C6 15 23      je _if62_exit
4738   230F             _if62_true:
4739   230F             ;; exit(); 
4740   230F 07 67 0D      call exit
4741   2312 0A 15 23      jmp _if62_exit
4742   2315             _if62_exit:
4743   2315 F9            leave
4744   2316 09            ret
4745   2317             ; --- END TEXT BLOCK
4746   2317             
4747   2317             ; --- BEGIN DATA BLOCK
4748   2317 00 00       _arrows: .fill 2, 0
4749   2319 00 00       _debug: .dw 0
4750   231B 1D 00       _rand_val: .dw 29
4751   231D 01 00       _rand_inc: .dw 1
4752   231F 00 00 00 00 _loc_data: .fill 12, 0
4752   2323 00 00 00 00 
4752   2327 00 00 00 00 
4753   232B 00 00       _finished: .fill 2, 0
4754   232D             _cave_data: 
4755   232D 00 00       .dw 
4756   232F 01 00 04 00 .dw 1,4,7,0,2,9,1,3,11,2,4,13,0,3,5,4,6,14,5,7,16,0,6,8,7,9,17,1,8,10,
4756   2333 07 00 00 00 
4756   2337 02 00 09 00 
4756   233B 01 00 03 00 
4756   233F 0B 00 02 00 
4756   2343 04 00 0D 00 
4756   2347 00 00 03 00 
4756   234B 05 00 04 00 
4756   234F 06 00 0E 00 
4756   2353 05 00 07 00 
4756   2357 10 00 00 00 
4756   235B 06 00 08 00 
4756   235F 07 00 09 00 
4756   2363 11 00 01 00 
4756   2367 08 00 0A 00 
4757   236B 00 00       .dw 
4758   236D 00 00       .dw 
4759   236F 09 00 0B 00 .dw 9,11,18,2,10,12,11,13,19,3,12,14,5,13,15,14,16,19,6,15,17,8,16,18,10,17,19,12,15,18,
4759   2373 12 00 02 00 
4759   2377 0A 00 0C 00 
4759   237B 0B 00 0D 00 
4759   237F 13 00 03 00 
4759   2383 0C 00 0E 00 
4759   2387 05 00 0D 00 
4759   238B 0F 00 0E 00 
4759   238F 10 00 13 00 
4759   2393 06 00 0F 00 
4759   2397 11 00 08 00 
4759   239B 10 00 12 00 
4759   239F 0A 00 11 00 
4759   23A3 13 00 0C 00 
4759   23A7 0F 00 12 00 
4760   23AB 00 00       .dw 
4761   23AD 00 00       .dw 
4762   23AF 49 4E 53 54 __s0: .db "INSTRUCTIONS (Y-N): ", 0
4762   23B3 52 55 43 54 
4762   23B7 49 4F 4E 53 
4762   23BB 20 28 59 2D 
4762   23BF 4E 29 3A 20 
4762   23C3 00 
4763   23C4 4E 45 57 20 __s1: .db "NEW GAME (Y-N): ", 0
4763   23C8 47 41 4D 45 
4763   23CC 20 28 59 2D 
4763   23D0 4E 29 3A 20 
4763   23D4 00 
4764   23D5 55 6E 6B 6E __s2: .db "Unknown type size in va_arg() call. Size needs to be either 1 or 2.", 0
4764   23D9 6F 77 6E 20 
4764   23DD 74 79 70 65 
4764   23E1 20 73 69 7A 
4764   23E5 65 20 69 6E 
4764   23E9 20 76 61 5F 
4764   23ED 61 72 67 28 
4764   23F1 29 20 63 61 
4764   23F5 6C 6C 2E 20 
4764   23F9 53 69 7A 65 
4764   23FD 20 6E 65 65 
4764   2401 64 73 20 74 
4764   2405 6F 20 62 65 
4764   2409 20 65 69 74 
4764   240D 68 65 72 20 
4764   2411 31 20 6F 72 
4764   2415 20 32 2E 00 
4765   2419 45 72 72 6F __s3: .db "Error: Unknown argument type.\n", 0
4765   241D 72 3A 20 55 
4765   2421 6E 6B 6E 6F 
4765   2425 77 6E 20 61 
4765   2429 72 67 75 6D 
4765   242D 65 6E 74 20 
4765   2431 74 79 70 65 
4765   2435 2E 0A 00 
4766   2438 1B 5B 32 4A __s4: .db "\033[2J\033[H", 0
4766   243C 1B 5B 48 00 
4767   2440 0A 00       __s5: .db "\n", 0
4768   2442 57 45 4C 43 __s6: .db "WELCOME TO 'HUNT THE WUMPUS'\n", 0
4768   2446 4F 4D 45 20 
4768   244A 54 4F 20 27 
4768   244E 48 55 4E 54 
4768   2452 20 54 48 45 
4768   2456 20 57 55 4D 
4768   245A 50 55 53 27 
4768   245E 0A 00 
4769   2460 54 48 45 20 __s7: .db "THE WUMPUS LIVES IN A CAVE OF 20 ROOMS. EACH ROOM\n", 0
4769   2464 57 55 4D 50 
4769   2468 55 53 20 4C 
4769   246C 49 56 45 53 
4769   2470 20 49 4E 20 
4769   2474 41 20 43 41 
4769   2478 56 45 20 4F 
4769   247C 46 20 32 30 
4769   2480 20 52 4F 4F 
4769   2484 4D 53 2E 20 
4769   2488 45 41 43 48 
4769   248C 20 52 4F 4F 
4769   2490 4D 0A 00 
4770   2493 48 41 53 20 __s8: .db "HAS 3 TUNNELS LEADING TO OTHER ROOMS.\n", 0
4770   2497 33 20 54 55 
4770   249B 4E 4E 45 4C 
4770   249F 53 20 4C 45 
4770   24A3 41 44 49 4E 
4770   24A7 47 20 54 4F 
4770   24AB 20 4F 54 48 
4770   24AF 45 52 20 52 
4770   24B3 4F 4F 4D 53 
4770   24B7 2E 0A 00 
4771   24BA 4C 4F 4F 4B __s9: .db "LOOK AT A DODECAHEDRON TO SEE HOW THIS WORKS.\n", 0
4771   24BE 20 41 54 20 
4771   24C2 41 20 44 4F 
4771   24C6 44 45 43 41 
4771   24CA 48 45 44 52 
4771   24CE 4F 4E 20 54 
4771   24D2 4F 20 53 45 
4771   24D6 45 20 48 4F 
4771   24DA 57 20 54 48 
4771   24DE 49 53 20 57 
4771   24E2 4F 52 4B 53 
4771   24E6 2E 0A 00 
4772   24E9 20 48 41 5A __s10: .db " HAZARDS:\n", 0
4772   24ED 41 52 44 53 
4772   24F1 3A 0A 00 
4773   24F4 20 42 4F 54 __s11: .db " BOTTOMLESS PITS: TWO ROOMS HAVE BOTTOMLESS PITS IN THEM\n", 0
4773   24F8 54 4F 4D 4C 
4773   24FC 45 53 53 20 
4773   2500 50 49 54 53 
4773   2504 3A 20 54 57 
4773   2508 4F 20 52 4F 
4773   250C 4F 4D 53 20 
4773   2510 48 41 56 45 
4773   2514 20 42 4F 54 
4773   2518 54 4F 4D 4C 
4773   251C 45 53 53 20 
4773   2520 50 49 54 53 
4773   2524 20 49 4E 20 
4773   2528 54 48 45 4D 
4773   252C 0A 00 
4774   252E 20 49 46 20 __s12: .db " IF YOU GO THERE, YOU FALL INTO THE PIT (& LOSE!)\n", 0
4774   2532 59 4F 55 20 
4774   2536 47 4F 20 54 
4774   253A 48 45 52 45 
4774   253E 2C 20 59 4F 
4774   2542 55 20 46 41 
4774   2546 4C 4C 20 49 
4774   254A 4E 54 4F 20 
4774   254E 54 48 45 20 
4774   2552 50 49 54 20 
4774   2556 28 26 20 4C 
4774   255A 4F 53 45 21 
4774   255E 29 0A 00 
4775   2561 20 53 55 50 __s13: .db " SUPER BATS     : TWO OTHER ROOMS HAVE SUPER BATS. IF YOU\n", 0
4775   2565 45 52 20 42 
4775   2569 41 54 53 20 
4775   256D 20 20 20 20 
4775   2571 3A 20 54 57 
4775   2575 4F 20 4F 54 
4775   2579 48 45 52 20 
4775   257D 52 4F 4F 4D 
4775   2581 53 20 48 41 
4775   2585 56 45 20 53 
4775   2589 55 50 45 52 
4775   258D 20 42 41 54 
4775   2591 53 2E 20 49 
4775   2595 46 20 59 4F 
4775   2599 55 0A 00 
4776   259C 20 47 4F 20 __s14: .db " GO THERE, A BAT GRABS YOU AND TAKES YOU TO SOME OTHER\n", 0
4776   25A0 54 48 45 52 
4776   25A4 45 2C 20 41 
4776   25A8 20 42 41 54 
4776   25AC 20 47 52 41 
4776   25B0 42 53 20 59 
4776   25B4 4F 55 20 41 
4776   25B8 4E 44 20 54 
4776   25BC 41 4B 45 53 
4776   25C0 20 59 4F 55 
4776   25C4 20 54 4F 20 
4776   25C8 53 4F 4D 45 
4776   25CC 20 4F 54 48 
4776   25D0 45 52 0A 00 
4777   25D4 20 52 4F 4F __s15: .db " ROOM AT RANDOM. (WHICH MAY BE TROUBLESOME)\n\n", 0
4777   25D8 4D 20 41 54 
4777   25DC 20 52 41 4E 
4777   25E0 44 4F 4D 2E 
4777   25E4 20 28 57 48 
4777   25E8 49 43 48 20 
4777   25EC 4D 41 59 20 
4777   25F0 42 45 20 54 
4777   25F4 52 4F 55 42 
4777   25F8 4C 45 53 4F 
4777   25FC 4D 45 29 0A 
4777   2600 0A 00 
4778   2602 20 57 55 4D __s16: .db " WUMPUS:\n", 0
4778   2606 50 55 53 3A 
4778   260A 0A 00 
4779   260C 20 54 48 45 __s17: .db " THE WUMPUS IS NOT BOTHERED BY HAZARDS (HE HAS SUCKER\n", 0
4779   2610 20 57 55 4D 
4779   2614 50 55 53 20 
4779   2618 49 53 20 4E 
4779   261C 4F 54 20 42 
4779   2620 4F 54 48 45 
4779   2624 52 45 44 20 
4779   2628 42 59 20 48 
4779   262C 41 5A 41 52 
4779   2630 44 53 20 28 
4779   2634 48 45 20 48 
4779   2638 41 53 20 53 
4779   263C 55 43 4B 45 
4779   2640 52 0A 00 
4780   2643 20 46 45 45 __s18: .db " FEET AND IS TOO BIG FOR A BAT TO LIFT).  USUALLY\n", 0
4780   2647 54 20 41 4E 
4780   264B 44 20 49 53 
4780   264F 20 54 4F 4F 
4780   2653 20 42 49 47 
4780   2657 20 46 4F 52 
4780   265B 20 41 20 42 
4780   265F 41 54 20 54 
4780   2663 4F 20 4C 49 
4780   2667 46 54 29 2E 
4780   266B 20 20 55 53 
4780   266F 55 41 4C 4C 
4780   2673 59 0A 00 
4781   2676 20 48 45 20 __s19: .db " HE IS ASLEEP.  TWO THINGS WAKE HIM UP: YOU SHOOTING AN\n", 0
4781   267A 49 53 20 41 
4781   267E 53 4C 45 45 
4781   2682 50 2E 20 20 
4781   2686 54 57 4F 20 
4781   268A 54 48 49 4E 
4781   268E 47 53 20 57 
4781   2692 41 4B 45 20 
4781   2696 48 49 4D 20 
4781   269A 55 50 3A 20 
4781   269E 59 4F 55 20 
4781   26A2 53 48 4F 4F 
4781   26A6 54 49 4E 47 
4781   26AA 20 41 4E 0A 
4781   26AE 00 
4782   26AF 20 41 52 52 __s20: .db " ARROW OR YOU ENTERING HIS ROOM.\n", 0
4782   26B3 4F 57 20 4F 
4782   26B7 52 20 59 4F 
4782   26BB 55 20 45 4E 
4782   26BF 54 45 52 49 
4782   26C3 4E 47 20 48 
4782   26C7 49 53 20 52 
4782   26CB 4F 4F 4D 2E 
4782   26CF 0A 00 
4783   26D1 20 49 46 20 __s21: .db " IF THE WUMPUS WAKES HE MOVES (P=.75) ONE ROOM\n", 0
4783   26D5 54 48 45 20 
4783   26D9 57 55 4D 50 
4783   26DD 55 53 20 57 
4783   26E1 41 4B 45 53 
4783   26E5 20 48 45 20 
4783   26E9 4D 4F 56 45 
4783   26ED 53 20 28 50 
4783   26F1 3D 2E 37 35 
4783   26F5 29 20 4F 4E 
4783   26F9 45 20 52 4F 
4783   26FD 4F 4D 0A 00 
4784   2701 20 4F 52 20 __s22: .db " OR STAYS STILL (P=.25).  AFTER THAT, IF HE IS WHERE YOU\n", 0
4784   2705 53 54 41 59 
4784   2709 53 20 53 54 
4784   270D 49 4C 4C 20 
4784   2711 28 50 3D 2E 
4784   2715 32 35 29 2E 
4784   2719 20 20 41 46 
4784   271D 54 45 52 20 
4784   2721 54 48 41 54 
4784   2725 2C 20 49 46 
4784   2729 20 48 45 20 
4784   272D 49 53 20 57 
4784   2731 48 45 52 45 
4784   2735 20 59 4F 55 
4784   2739 0A 00 
4785   273B 20 41 52 45 __s23: .db " ARE, HE EATS YOU UP AND YOU LOSE!\n", 0
4785   273F 2C 20 48 45 
4785   2743 20 45 41 54 
4785   2747 53 20 59 4F 
4785   274B 55 20 55 50 
4785   274F 20 41 4E 44 
4785   2753 20 59 4F 55 
4785   2757 20 4C 4F 53 
4785   275B 45 21 0A 00 
4786   275F 20 59 4F 55 __s24: .db " YOU:\n", 0
4786   2763 3A 0A 00 
4787   2766 20 45 41 43 __s25: .db " EACH TURN YOU MAY MOVE OR SHOOT A CROOKED ARROW\n", 0
4787   276A 48 20 54 55 
4787   276E 52 4E 20 59 
4787   2772 4F 55 20 4D 
4787   2776 41 59 20 4D 
4787   277A 4F 56 45 20 
4787   277E 4F 52 20 53 
4787   2782 48 4F 4F 54 
4787   2786 20 41 20 43 
4787   278A 52 4F 4F 4B 
4787   278E 45 44 20 41 
4787   2792 52 52 4F 57 
4787   2796 0A 00 
4788   2798 20 4D 4F 56 __s26: .db " MOVING:  YOU CAN MOVE ONE ROOM (THRU ONE TUNNEL)\n", 0
4788   279C 49 4E 47 3A 
4788   27A0 20 20 59 4F 
4788   27A4 55 20 43 41 
4788   27A8 4E 20 4D 4F 
4788   27AC 56 45 20 4F 
4788   27B0 4E 45 20 52 
4788   27B4 4F 4F 4D 20 
4788   27B8 28 54 48 52 
4788   27BC 55 20 4F 4E 
4788   27C0 45 20 54 55 
4788   27C4 4E 4E 45 4C 
4788   27C8 29 0A 00 
4789   27CB 20 41 52 52 __s27: .db " ARROWS:  YOU HAVE 5 ARROWS.  YOU LOSE WHEN YOU RUN OUT\n", 0
4789   27CF 4F 57 53 3A 
4789   27D3 20 20 59 4F 
4789   27D7 55 20 48 41 
4789   27DB 56 45 20 35 
4789   27DF 20 41 52 52 
4789   27E3 4F 57 53 2E 
4789   27E7 20 20 59 4F 
4789   27EB 55 20 4C 4F 
4789   27EF 53 45 20 57 
4789   27F3 48 45 4E 20 
4789   27F7 59 4F 55 20 
4789   27FB 52 55 4E 20 
4789   27FF 4F 55 54 0A 
4789   2803 00 
4790   2804 20 45 41 43 __s28: .db " EACH ARROW CAN GO FROM 1 TO 5 ROOMS. YOU AIM BY TELLING\n", 0
4790   2808 48 20 41 52 
4790   280C 52 4F 57 20 
4790   2810 43 41 4E 20 
4790   2814 47 4F 20 46 
4790   2818 52 4F 4D 20 
4790   281C 31 20 54 4F 
4790   2820 20 35 20 52 
4790   2824 4F 4F 4D 53 
4790   2828 2E 20 59 4F 
4790   282C 55 20 41 49 
4790   2830 4D 20 42 59 
4790   2834 20 54 45 4C 
4790   2838 4C 49 4E 47 
4790   283C 0A 00 
4791   283E 20 20 20 54 __s29: .db "   THE COMPUTER THE ROOM#S YOU WANT THE ARROW TO GO TO.\n", 0
4791   2842 48 45 20 43 
4791   2846 4F 4D 50 55 
4791   284A 54 45 52 20 
4791   284E 54 48 45 20 
4791   2852 52 4F 4F 4D 
4791   2856 23 53 20 59 
4791   285A 4F 55 20 57 
4791   285E 41 4E 54 20 
4791   2862 54 48 45 20 
4791   2866 41 52 52 4F 
4791   286A 57 20 54 4F 
4791   286E 20 47 4F 20 
4791   2872 54 4F 2E 0A 
4791   2876 00 
4792   2877 20 20 20 49 __s30: .db "   IF THE ARROW CAN'T GO THAT WAY (IF NO TUNNEL) IT MOVES\n", 0
4792   287B 46 20 54 48 
4792   287F 45 20 41 52 
4792   2883 52 4F 57 20 
4792   2887 43 41 4E 27 
4792   288B 54 20 47 4F 
4792   288F 20 54 48 41 
4792   2893 54 20 57 41 
4792   2897 59 20 28 49 
4792   289B 46 20 4E 4F 
4792   289F 20 54 55 4E 
4792   28A3 4E 45 4C 29 
4792   28A7 20 49 54 20 
4792   28AB 4D 4F 56 45 
4792   28AF 53 0A 
4793   28B1 20 20 20 41 __s31: .db "   AT RANDOM TO THE NEXT ROOM.\n", 0
4793   28B5 54 20 52 41 
4793   28B9 4E 44 4F 4D 
4793   28BD 20 54 4F 20 
4793   28C1 54 48 45 20 
4793   28C5 4E 45 58 54 
4793   28C9 20 52 4F 4F 
4793   28CD 4D 2E 0A 00 
4794   28D1 20 20 20 20 __s32: .db "     IF THE ARROW HITS THE WUMPUS, YOU WIN.\n", 0
4794   28D5 20 49 46 20 
4794   28D9 54 48 45 20 
4794   28DD 41 52 52 4F 
4794   28E1 57 20 48 49 
4794   28E5 54 53 20 54 
4794   28E9 48 45 20 57 
4794   28ED 55 4D 50 55 
4794   28F1 53 2C 20 59 
4794   28F5 4F 55 20 57 
4794   28F9 49 4E 2E 0A 
4794   28FD 00 
4795   28FE 20 20 20 20 __s33: .db "     IF THE ARROW HITS YOU, YOU LOSE.\n", 0
4795   2902 20 49 46 20 
4795   2906 54 48 45 20 
4795   290A 41 52 52 4F 
4795   290E 57 20 48 49 
4795   2912 54 53 20 59 
4795   2916 4F 55 2C 20 
4795   291A 59 4F 55 20 
4795   291E 4C 4F 53 45 
4795   2922 2E 0A 00 
4796   2925 20 57 41 52 __s34: .db " WARNINGS:\n", 0
4796   2929 4E 49 4E 47 
4796   292D 53 3A 0A 00 
4797   2931 20 57 48 45 __s35: .db " WHEN YOU ARE ONE ROOM AWAY FROM A WUMPUS OR HAZARD,\n", 0
4797   2935 4E 20 59 4F 
4797   2939 55 20 41 52 
4797   293D 45 20 4F 4E 
4797   2941 45 20 52 4F 
4797   2945 4F 4D 20 41 
4797   2949 57 41 59 20 
4797   294D 46 52 4F 4D 
4797   2951 20 41 20 57 
4797   2955 55 4D 50 55 
4797   2959 53 20 4F 52 
4797   295D 20 48 41 5A 
4797   2961 41 52 44 2C 
4797   2965 0A 00 
4798   2967 20 54 48 45 __s36: .db " THE COMPUTER SAYS:\n", 0
4798   296B 20 43 4F 4D 
4798   296F 50 55 54 45 
4798   2973 52 20 53 41 
4798   2977 59 53 3A 0A 
4798   297B 00 
4799   297C 20 57 55 4D __s37: .db " WUMPUS:  'I SMELL A WUMPUS'\n", 0
4799   2980 50 55 53 3A 
4799   2984 20 20 27 49 
4799   2988 20 53 4D 45 
4799   298C 4C 4C 20 41 
4799   2990 20 57 55 4D 
4799   2994 50 55 53 27 
4799   2998 0A 00 
4800   299A 20 42 41 54 __s38: .db " BAT   :  'BATS NEARBY'\n", 0
4800   299E 20 20 20 3A 
4800   29A2 20 20 27 42 
4800   29A6 41 54 53 20 
4800   29AA 4E 45 41 52 
4800   29AE 42 59 27 0A 
4800   29B2 00 
4801   29B3 20 50 49 54 __s39: .db " PIT   :  'I FEEL A DRAFT'\n", 0
4801   29B7 20 20 20 3A 
4801   29BB 20 20 27 49 
4801   29BF 20 46 45 45 
4801   29C3 4C 20 41 20 
4801   29C7 44 52 41 46 
4801   29CB 54 27 0A 00 
4802   29CF 49 20 53 4D __s40: .db "I SMELL A WUMPUS!\n", 0
4802   29D3 45 4C 4C 20 
4802   29D7 41 20 57 55 
4802   29DB 4D 50 55 53 
4802   29DF 21 0A 00 
4803   29E2 49 20 46 45 __s41: .db "I FEEL A DRAFT\n", 0
4803   29E6 45 4C 20 41 
4803   29EA 20 44 52 41 
4803   29EE 46 54 0A 00 
4804   29F2 42 41 54 53 __s42: .db "BATS NEARBY!\n", 0
4804   29F6 20 4E 45 41 
4804   29FA 52 42 59 21 
4804   29FE 0A 00 
4805   2A00 59 4F 55 20 __s43: .db "YOU ARE IN ROOM ", 0
4805   2A04 41 52 45 20 
4805   2A08 49 4E 20 52 
4805   2A0C 4F 4F 4D 20 
4805   2A10 00 
4806   2A11 54 55 4E 4E __s44: .db "TUNNELS LEAD TO ", 0
4806   2A15 45 4C 53 20 
4806   2A19 4C 45 41 44 
4806   2A1D 20 54 4F 20 
4806   2A21 00 
4807   2A22 2C 20 00    __s45: .db ", ", 0
4808   2A25 0A 0A 00    __s46: .db "\n\n", 0
4809   2A28 53 48 4F 4F __s47: .db "SHOOT OR MOVE (S-M): ", 0
4809   2A2C 54 20 4F 52 
4809   2A30 20 4D 4F 56 
4809   2A34 45 20 28 53 
4809   2A38 2D 4D 29 3A 
4809   2A3C 20 00 
4810   2A3E 54 53 4B 20 __s48: .db "TSK TSK TSK - WUMPUS GOT YOU!\n", 0
4810   2A42 54 53 4B 20 
4810   2A46 54 53 4B 20 
4810   2A4A 2D 20 57 55 
4810   2A4E 4D 50 55 53 
4810   2A52 20 47 4F 54 
4810   2A56 20 59 4F 55 
4810   2A5A 21 0A 00 
4811   2A5D 0A 4E 55 4D __s49: .db "\nNUMBER OF ROOMS (1-5): ", 0
4811   2A61 42 45 52 20 
4811   2A65 4F 46 20 52 
4811   2A69 4F 4F 4D 53 
4811   2A6D 20 28 31 2D 
4811   2A71 35 29 3A 20 
4811   2A75 00 
4812   2A76 52 4F 4F 4D __s50: .db "ROOM #", 0
4812   2A7A 20 23 00 
4813   2A7D 41 52 52 4F __s51: .db "ARROWS AREN'T THAT CROOKED - TRY ANOTHER ROOM\n", 0
4813   2A81 57 53 20 41 
4813   2A85 52 45 4E 27 
4813   2A89 54 20 54 48 
4813   2A8D 41 54 20 43 
4813   2A91 52 4F 4F 4B 
4813   2A95 45 44 20 2D 
4813   2A99 20 54 52 59 
4813   2A9D 20 41 4E 4F 
4813   2AA1 54 48 45 52 
4813   2AA5 20 52 4F 4F 
4813   2AA9 4D 0A 
4814   2AAB 41 48 41 21 __s52: .db "AHA! YOU GOT THE WUMPUS!\n", 0
4814   2AAF 20 59 4F 55 
4814   2AB3 20 47 4F 54 
4814   2AB7 20 54 48 45 
4814   2ABB 20 57 55 4D 
4814   2ABF 50 55 53 21 
4814   2AC3 0A 00 
4815   2AC5 4F 55 43 48 __s53: .db "OUCH! ARROW GOT YOU!\n", 0
4815   2AC9 21 20 41 52 
4815   2ACD 52 4F 57 20 
4815   2AD1 47 4F 54 20 
4815   2AD5 59 4F 55 21 
4815   2AD9 0A 00 
4816   2ADB 4D 49 53 53 __s54: .db "MISSED\n", 0
4816   2ADF 45 44 0A 00 
4817   2AE3 0A 57 48 45 __s55: .db "\nWHERE TO: ", 0
4817   2AE7 52 45 20 54 
4817   2AEB 4F 3A 20 00 
4818   2AEF 4E 4F 54 20 __s56: .db "NOT POSSIBLE\n", 0
4818   2AF3 50 4F 53 53 
4818   2AF7 49 42 4C 45 
4818   2AFB 0A 00 
4819   2AFD 5A 41 50 2D __s57: .db "ZAP--SUPER BAT SNATCH! ELSEWHEREVILLE FOR YOU!\n", 0
4819   2B01 2D 53 55 50 
4819   2B05 45 52 20 42 
4819   2B09 41 54 20 53 
4819   2B0D 4E 41 54 43 
4819   2B11 48 21 20 45 
4819   2B15 4C 53 45 57 
4819   2B19 48 45 52 45 
4819   2B1D 56 49 4C 4C 
4819   2B21 45 20 46 4F 
4819   2B25 52 20 59 4F 
4819   2B29 55 21 0A 00 
4820   2B2D 2E 2E 2E 20 __s58: .db "... OOPS! BUMPED A WUMPUS!\n", 0
4820   2B31 4F 4F 50 53 
4820   2B35 21 20 42 55 
4820   2B39 4D 50 45 44 
4820   2B3D 20 41 20 57 
4820   2B41 55 4D 50 55 
4820   2B45 53 21 0A 00 
4821   2B49 59 59 59 59 __s59: .db "YYYYIIIIEEEE . . . FELL IN PIT\n", 0
4821   2B4D 49 49 49 49 
4821   2B51 45 45 45 45 
4821   2B55 20 2E 20 2E 
4821   2B59 20 2E 20 46 
4821   2B5D 45 4C 4C 20 
4821   2B61 49 4E 20 50 
4821   2B65 49 54 0A 00 
4822   2B69 48 55 4E 54 __s60: .db "HUNT THE WUMPUS\n", 0
4822   2B6D 20 54 48 45 
4822   2B71 20 57 55 4D 
4822   2B75 50 55 53 0A 
4822   2B79 00 
4823   2B7A 57 75 6D 70 __s61: .db "Wumpus is at ", 0
4823   2B7E 75 73 20 69 
4823   2B82 73 20 61 74 
4823   2B86 20 00 
4824   2B88 2C 20 70 69 __s62: .db ", pits at ", 0
4824   2B8C 74 73 20 61 
4824   2B90 74 20 00 
4825   2B93 20 26 20 00 __s63: .db " & ", 0
4826   2B97 2C 20 62 61 __s64: .db ", bats at ", 0
4826   2B9B 74 73 20 61 
4826   2B9F 74 20 00 
4827   2BA2 48 45 45 20 __s65: .db "HEE HEE HEE - THE WUMPUS'LL GET YOU NEXT TIME!!\n", 0
4827   2BA6 48 45 45 20 
4827   2BAA 48 45 45 20 
4827   2BAE 2D 20 54 48 
4827   2BB2 45 20 57 55 
4827   2BB6 4D 50 55 53 
4827   2BBA 27 4C 4C 20 
4827   2BBE 47 45 54 20 
4827   2BC2 59 4F 55 20 
4827   2BC6 4E 45 58 54 
4827   2BCA 20 54 49 4D 
4827   2BCE 45 21 21 0A 
4828   2BD2 48 41 20 48 __s66: .db "HA HA HA - YOU LOSE!\n", 0
4828   2BD6 41 20 48 41 
4828   2BDA 20 2D 20 59 
4828   2BDE 4F 55 20 4C 
4828   2BE2 4F 53 45 21 
4828   2BE6 0A 00 
4829   2BE8             
4830   2BE8 EA 2B       _heap_top: .dw _heap
4831   2BEA 00          _heap: .db 0
4832   2BEB             ; --- END DATA BLOCK
4833   2BEB             
4834   2BEB             .end
tasm: Number of errors = 0
