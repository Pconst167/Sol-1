0001   0000             ; --- FILENAME: games/startrek.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; intro(); 
0011   0408             ; --- START FUNCTION CALL
0012   0408 07 20 09      call intro
0013   040B             ; new_game(); 
0014   040B             ; --- START FUNCTION CALL
0015   040B 07 90 09      call new_game
0016   040E             ; return 0; 
0017   040E FD 2E 00 00   mov32 cb, $00000000
0017   0412 00 00 
0018   0414 F9            leave
0019   0415 05 0B         syscall sys_terminate_proc
0020   0417             
0021   0417             TO_FIXED:
0022   0417 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0023   041A             ; return x * 10; 
0024   041A FA 05 00      lea d, [bp + 5] ; $x
0025   041D 2A            mov b, [d]
0026   041E 38 00 00      mov c, 0
0027   0421             ; --- START FACTORS
0028   0421 D7            push a
0029   0422 FD D8         push g
0030   0424 11            mov a, b
0031   0425 FD 7A         mov g, c
0032   0427 FD 2E 0A 00   mov32 cb, $0000000a
0032   042B 00 00 
0033   042D FD 38         mov c, g
0034   042F 27            mov b, a
0035   0430 FD F1         pop g
0036   0432 E4            pop a
0037   0433             ; --- END FACTORS
0038   0433 F9            leave
0039   0434 09            ret
0040   0435             
0041   0435             FROM_FIXED:
0042   0435 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0043   0438             ; return x / 10; 
0044   0438 FA 05 00      lea d, [bp + 5] ; $x
0045   043B 2A            mov b, [d]
0046   043C 38 00 00      mov c, 0
0047   043F             ; --- START FACTORS
0048   043F D7            push a
0049   0440 FD D8         push g
0050   0442 11            mov a, b
0051   0443 FD 7A         mov g, c
0052   0445 FD 2E 0A 00   mov32 cb, $0000000a
0052   0449 00 00 
0053   044B AE            div a, b
0054   044C FD 38         mov c, g
0055   044E 27            mov b, a
0056   044F FD F1         pop g
0057   0451 E4            pop a
0058   0452             ; --- END FACTORS
0059   0452 F9            leave
0060   0453 09            ret
0061   0454             
0062   0454             TO_FIXED00:
0063   0454 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0064   0457             ; return x * 100; 
0065   0457 FA 05 00      lea d, [bp + 5] ; $x
0066   045A 2A            mov b, [d]
0067   045B 38 00 00      mov c, 0
0068   045E             ; --- START FACTORS
0069   045E D7            push a
0070   045F FD D8         push g
0071   0461 11            mov a, b
0072   0462 FD 7A         mov g, c
0073   0464 FD 2E 64 00   mov32 cb, $00000064
0073   0468 00 00 
0074   046A FD 38         mov c, g
0075   046C 27            mov b, a
0076   046D FD F1         pop g
0077   046F E4            pop a
0078   0470             ; --- END FACTORS
0079   0470 F9            leave
0080   0471 09            ret
0081   0472             
0082   0472             FROM_FIXED00:
0083   0472 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0084   0475             ; return x / 100; 
0085   0475 FA 05 00      lea d, [bp + 5] ; $x
0086   0478 2A            mov b, [d]
0087   0479 38 00 00      mov c, 0
0088   047C             ; --- START FACTORS
0089   047C D7            push a
0090   047D FD D8         push g
0091   047F 11            mov a, b
0092   0480 FD 7A         mov g, c
0093   0482 FD 2E 64 00   mov32 cb, $00000064
0093   0486 00 00 
0094   0488 AE            div a, b
0095   0489 FD 38         mov c, g
0096   048B 27            mov b, a
0097   048C FD F1         pop g
0098   048E E4            pop a
0099   048F             ; --- END FACTORS
0100   048F F9            leave
0101   0490 09            ret
0102   0491             
0103   0491             get_rand:
0104   0491 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0105   0494             ; unsigned int         r ; 
0106   0494 52 02 00      sub sp, 2
0107   0497             ; r = rand(); 
0108   0497 FA FF FF      lea d, [bp + -1] ; $r
0109   049A DA            push d
0110   049B             ; --- START FUNCTION CALL
0111   049B 07 5A 59      call rand
0112   049E E7            pop d
0113   049F FD 43         mov [d], b
0114   04A1             ; r = (r >> 8) | (r << 8); 
0115   04A1 FA FF FF      lea d, [bp + -1] ; $r
0116   04A4 DA            push d
0117   04A5 FA FF FF      lea d, [bp + -1] ; $r
0118   04A8 2A            mov b, [d]
0119   04A9 38 00 00      mov c, 0
0120   04AC             ; --- START SHIFT
0121   04AC D7            push a
0122   04AD 11            mov a, b
0123   04AE FD 2E 08 00   mov32 cb, $00000008
0123   04B2 00 00 
0124   04B4 FD 39         mov c, b
0125   04B6 A1            shr a, cl
0126   04B7 27            mov b, a
0127   04B8 E4            pop a
0128   04B9             ; --- END SHIFT
0129   04B9 D7            push a
0130   04BA 11            mov a, b
0131   04BB FA FF FF      lea d, [bp + -1] ; $r
0132   04BE 2A            mov b, [d]
0133   04BF 38 00 00      mov c, 0
0134   04C2             ; --- START SHIFT
0135   04C2 D7            push a
0136   04C3 11            mov a, b
0137   04C4 FD 2E 08 00   mov32 cb, $00000008
0137   04C8 00 00 
0138   04CA FD 39         mov c, b
0139   04CC 9D            shl a, cl
0140   04CD 27            mov b, a
0141   04CE E4            pop a
0142   04CF             ; --- END SHIFT
0143   04CF FD 70         or b, a ; |
0144   04D1 E4            pop a
0145   04D2 E7            pop d
0146   04D3 FD 43         mov [d], b
0147   04D5             ; return ((r % spread) + 1); 
0148   04D5 FA FF FF      lea d, [bp + -1] ; $r
0149   04D8 2A            mov b, [d]
0150   04D9 38 00 00      mov c, 0
0151   04DC             ; --- START FACTORS
0152   04DC D7            push a
0153   04DD FD D8         push g
0154   04DF 11            mov a, b
0155   04E0 FD 7A         mov g, c
0156   04E2 FA 05 00      lea d, [bp + 5] ; $spread
0157   04E5 2A            mov b, [d]
0158   04E6 38 00 00      mov c, 0
0159   04E9 AE            div a, b ; 
0160   04EA 11            mov a, b
0161   04EB FD 38         mov c, g
0162   04ED 27            mov b, a
0163   04EE FD F1         pop g
0164   04F0 E4            pop a
0165   04F1             ; --- END FACTORS
0166   04F1             ; --- START TERMS
0167   04F1 D7            push a
0168   04F2 11            mov a, b
0169   04F3 FD 2E 01 00   mov32 cb, $00000001
0169   04F7 00 00 
0170   04F9 56            add b, a
0171   04FA E4            pop a
0172   04FB             ; --- END TERMS
0173   04FB F9            leave
0174   04FC 09            ret
0175   04FD             
0176   04FD             rand8:
0177   04FD F8 00 00      enter 0 ; (push bp; mov bp, sp)
0178   0500             ; return (get_rand(8)); 
0179   0500             ; --- START FUNCTION CALL
0180   0500 FD 2E 08 00   mov32 cb, $00000008
0180   0504 00 00 
0181   0506 FD AB         swp b
0182   0508 D8            push b
0183   0509 07 91 04      call get_rand
0184   050C 51 02 00      add sp, 2
0185   050F             ; --- END FUNCTION CALL
0186   050F F9            leave
0187   0510 09            ret
0188   0511             
0189   0511             input:
0190   0511 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0191   0514             ; int c; 
0192   0514 52 02 00      sub sp, 2
0193   0517             ; while((c = getchar()) != '\n') { 
0194   0517             _while17_cond:
0195   0517 FA FF FF      lea d, [bp + -1] ; $c
0196   051A DA            push d
0197   051B             ; --- START FUNCTION CALL
0198   051B 07 D3 58      call getchar
0199   051E E7            pop d
0200   051F FD 43         mov [d], b
0201   0521             ; --- START RELATIONAL
0202   0521 D7            push a
0203   0522 11            mov a, b
0204   0523 FD 2E 0A 00   mov32 cb, $0000000a
0204   0527 00 00 
0205   0529 B0            cmp a, b
0206   052A FD 72         sneq ; !=
0207   052C E4            pop a
0208   052D             ; --- END RELATIONAL
0209   052D C0 00 00      cmp b, 0
0210   0530 C6 A0 05      je _while17_exit
0211   0533             _while17_block:
0212   0533             ; if (c == -1) 
0213   0533             _if18_cond:
0214   0533 FA FF FF      lea d, [bp + -1] ; $c
0215   0536 2A            mov b, [d]
0216   0537 38 00 00      mov c, 0
0217   053A             ; --- START RELATIONAL
0218   053A D7            push a
0219   053B 11            mov a, b
0220   053C FD 2E FF FF   mov32 cb, $ffffffff
0220   0540 FF FF 
0221   0542 B0            cmp a, b
0222   0543 FD 71         seq ; ==
0223   0545 E4            pop a
0224   0546             ; --- END RELATIONAL
0225   0546 C0 00 00      cmp b, 0
0226   0549 C6 52 05      je _if18_exit
0227   054C             _if18_TRUE:
0228   054C             ; exit(); 
0229   054C             ; --- START FUNCTION CALL
0230   054C 07 ED 58      call exit
0231   054F 0A 52 05      jmp _if18_exit
0232   0552             _if18_exit:
0233   0552             ; if (l > 1) { 
0234   0552             _if19_cond:
0235   0552 FA 07 00      lea d, [bp + 7] ; $l
0236   0555 32            mov bl, [d]
0237   0556 A7 00         mov bh, 0
0238   0558 38 00 00      mov c, 0
0239   055B             ; --- START RELATIONAL
0240   055B D7            push a
0241   055C 11            mov a, b
0242   055D FD 2E 01 00   mov32 cb, $00000001
0242   0561 00 00 
0243   0563 B0            cmp a, b
0244   0564 FD 81         sgu ; > (unsigned)
0245   0566 E4            pop a
0246   0567             ; --- END RELATIONAL
0247   0567 C0 00 00      cmp b, 0
0248   056A C6 9D 05      je _if19_exit
0249   056D             _if19_TRUE:
0250   056D             ; *b++ = c; 
0251   056D FA 05 00      lea d, [bp + 5] ; $b
0252   0570 2A            mov b, [d]
0253   0571 38 00 00      mov c, 0
0254   0574 FD 77         inc b
0255   0576 FA 05 00      lea d, [bp + 5] ; $b
0256   0579 FD 43         mov [d], b
0257   057B FD 7D         dec b
0258   057D D8            push b
0259   057E FA FF FF      lea d, [bp + -1] ; $c
0260   0581 2A            mov b, [d]
0261   0582 38 00 00      mov c, 0
0262   0585 E7            pop d
0263   0586 FD 3E         mov [d], bl
0264   0588             ; l--; 
0265   0588 FA 07 00      lea d, [bp + 7] ; $l
0266   058B 32            mov bl, [d]
0267   058C A7 00         mov bh, 0
0268   058E 38 00 00      mov c, 0
0269   0591 FD 7D         dec b
0270   0593 FA 07 00      lea d, [bp + 7] ; $l
0271   0596 FD 3E         mov [d], bl
0272   0598 FD 77         inc b
0273   059A 0A 9D 05      jmp _if19_exit
0274   059D             _if19_exit:
0275   059D 0A 17 05      jmp _while17_cond
0276   05A0             _while17_exit:
0277   05A0             ; *b = 0; 
0278   05A0 FA 05 00      lea d, [bp + 5] ; $b
0279   05A3 2A            mov b, [d]
0280   05A4 38 00 00      mov c, 0
0281   05A7 D8            push b
0282   05A8 FD 2E 00 00   mov32 cb, $00000000
0282   05AC 00 00 
0283   05AE E7            pop d
0284   05AF FD 3E         mov [d], bl
0285   05B1 F9            leave
0286   05B2 09            ret
0287   05B3             
0288   05B3             yesno:
0289   05B3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0290   05B6             ; char b[2]; 
0291   05B6 52 02 00      sub sp, 2
0292   05B9             ; input(b,2); 
0293   05B9             ; --- START FUNCTION CALL
0294   05B9 FD 2E 02 00   mov32 cb, $00000002
0294   05BD 00 00 
0295   05BF DD            push bl
0296   05C0 FA FF FF      lea d, [bp + -1] ; $b
0297   05C3 2D            mov b, d
0298   05C4 38 00 00      mov c, 0
0299   05C7 FD AB         swp b
0300   05C9 D8            push b
0301   05CA 07 11 05      call input
0302   05CD 51 03 00      add sp, 3
0303   05D0             ; --- END FUNCTION CALL
0304   05D0             ; tolower(*b); 
0305   05D0             ; --- START FUNCTION CALL
0306   05D0 FA FF FF      lea d, [bp + -1] ; $b
0307   05D3 2D            mov b, d
0308   05D4 38 00 00      mov c, 0
0309   05D7 74            mov d, b
0310   05D8 32            mov bl, [d]
0311   05D9 A7 00         mov bh, 0
0312   05DB 38 00 00      mov c, 0
0313   05DE DD            push bl
0314   05DF 07 F4 58      call tolower
0315   05E2 51 01 00      add sp, 1
0316   05E5             ; --- END FUNCTION CALL
0317   05E5             ; return 1; 
0318   05E5 FD 2E 01 00   mov32 cb, $00000001
0318   05E9 00 00 
0319   05EB F9            leave
0320   05EC 09            ret
0321   05ED             ; return 0; 
0322   05ED FD 2E 00 00   mov32 cb, $00000000
0322   05F1 00 00 
0323   05F3 F9            leave
0324   05F4 09            ret
0325   05F5             
0326   05F5             input_f00:
0327   05F5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0328   05F8             ; int        v; 
0329   05F8 52 02 00      sub sp, 2
0330   05FB             ; char buf[8]; 
0331   05FB 52 08 00      sub sp, 8
0332   05FE             ; char *x; 
0333   05FE 52 02 00      sub sp, 2
0334   0601             ; input(buf, 8); 
0335   0601             ; --- START FUNCTION CALL
0336   0601 FD 2E 08 00   mov32 cb, $00000008
0336   0605 00 00 
0337   0607 DD            push bl
0338   0608 FA F7 FF      lea d, [bp + -9] ; $buf
0339   060B 2D            mov b, d
0340   060C 38 00 00      mov c, 0
0341   060F FD AB         swp b
0342   0611 D8            push b
0343   0612 07 11 05      call input
0344   0615 51 03 00      add sp, 3
0345   0618             ; --- END FUNCTION CALL
0346   0618             ; x = buf; 
0347   0618 FA F5 FF      lea d, [bp + -11] ; $x
0348   061B DA            push d
0349   061C FA F7 FF      lea d, [bp + -9] ; $buf
0350   061F 2D            mov b, d
0351   0620 38 00 00      mov c, 0
0352   0623 E7            pop d
0353   0624 FD 43         mov [d], b
0354   0626             ; if (!is_digit(*x)) 
0355   0626             _if20_cond:
0356   0626             ; --- START FUNCTION CALL
0357   0626 FA F5 FF      lea d, [bp + -11] ; $x
0358   0629 2A            mov b, [d]
0359   062A 38 00 00      mov c, 0
0360   062D 74            mov d, b
0361   062E 32            mov bl, [d]
0362   062F A7 00         mov bh, 0
0363   0631 38 00 00      mov c, 0
0364   0634 DD            push bl
0365   0635 07 C6 65      call is_digit
0366   0638 51 01 00      add sp, 1
0367   063B             ; --- END FUNCTION CALL
0368   063B C0 00 00      cmp b, 0
0369   063E C6 4C 06      je _if20_exit
0370   0641             _if20_TRUE:
0371   0641             ; return -1; 
0372   0641 FD 2E FF FF   mov32 cb, $ffffffff
0372   0645 FF FF 
0373   0647 F9            leave
0374   0648 09            ret
0375   0649 0A 4C 06      jmp _if20_exit
0376   064C             _if20_exit:
0377   064C             ; v = 100 * (*x++ - '0'); 
0378   064C FA FF FF      lea d, [bp + -1] ; $v
0379   064F DA            push d
0380   0650 FD 2E 64 00   mov32 cb, $00000064
0380   0654 00 00 
0381   0656             ; --- START FACTORS
0382   0656 D7            push a
0383   0657 FD D8         push g
0384   0659 11            mov a, b
0385   065A FD 7A         mov g, c
0386   065C FA F5 FF      lea d, [bp + -11] ; $x
0387   065F 2A            mov b, [d]
0388   0660 38 00 00      mov c, 0
0389   0663 FD 77         inc b
0390   0665 FA F5 FF      lea d, [bp + -11] ; $x
0391   0668 FD 43         mov [d], b
0392   066A FD 7D         dec b
0393   066C 74            mov d, b
0394   066D 32            mov bl, [d]
0395   066E A7 00         mov bh, 0
0396   0670 38 00 00      mov c, 0
0397   0673             ; --- START TERMS
0398   0673 D7            push a
0399   0674 11            mov a, b
0400   0675 FD 2E 30 00   mov32 cb, $00000030
0400   0679 00 00 
0401   067B 60            sub a, b
0402   067C 27            mov b, a
0403   067D E4            pop a
0404   067E             ; --- END TERMS
0405   067E FD 38         mov c, g
0406   0680 27            mov b, a
0407   0681 FD F1         pop g
0408   0683 E4            pop a
0409   0684             ; --- END FACTORS
0410   0684 E7            pop d
0411   0685 FD 43         mov [d], b
0412   0687             ; if (*x == 0) 
0413   0687             _if23_cond:
0414   0687 FA F5 FF      lea d, [bp + -11] ; $x
0415   068A 2A            mov b, [d]
0416   068B 38 00 00      mov c, 0
0417   068E 74            mov d, b
0418   068F 32            mov bl, [d]
0419   0690 A7 00         mov bh, 0
0420   0692 38 00 00      mov c, 0
0421   0695             ; --- START RELATIONAL
0422   0695 D7            push a
0423   0696 11            mov a, b
0424   0697 FD 2E 00 00   mov32 cb, $00000000
0424   069B 00 00 
0425   069D B0            cmp a, b
0426   069E FD 71         seq ; ==
0427   06A0 E4            pop a
0428   06A1             ; --- END RELATIONAL
0429   06A1 C0 00 00      cmp b, 0
0430   06A4 C6 B3 06      je _if23_exit
0431   06A7             _if23_TRUE:
0432   06A7             ; return v; 
0433   06A7 FA FF FF      lea d, [bp + -1] ; $v
0434   06AA 2A            mov b, [d]
0435   06AB 38 00 00      mov c, 0
0436   06AE F9            leave
0437   06AF 09            ret
0438   06B0 0A B3 06      jmp _if23_exit
0439   06B3             _if23_exit:
0440   06B3             ; if (*x++ != '.') 
0441   06B3             _if24_cond:
0442   06B3 FA F5 FF      lea d, [bp + -11] ; $x
0443   06B6 2A            mov b, [d]
0444   06B7 38 00 00      mov c, 0
0445   06BA FD 77         inc b
0446   06BC FA F5 FF      lea d, [bp + -11] ; $x
0447   06BF FD 43         mov [d], b
0448   06C1 FD 7D         dec b
0449   06C3 74            mov d, b
0450   06C4 32            mov bl, [d]
0451   06C5 A7 00         mov bh, 0
0452   06C7 38 00 00      mov c, 0
0453   06CA             ; --- START RELATIONAL
0454   06CA D7            push a
0455   06CB 11            mov a, b
0456   06CC FD 2E 2E 00   mov32 cb, $0000002e
0456   06D0 00 00 
0457   06D2 B0            cmp a, b
0458   06D3 FD 72         sneq ; !=
0459   06D5 E4            pop a
0460   06D6             ; --- END RELATIONAL
0461   06D6 C0 00 00      cmp b, 0
0462   06D9 C6 E7 06      je _if24_exit
0463   06DC             _if24_TRUE:
0464   06DC             ; return -1; 
0465   06DC FD 2E FF FF   mov32 cb, $ffffffff
0465   06E0 FF FF 
0466   06E2 F9            leave
0467   06E3 09            ret
0468   06E4 0A E7 06      jmp _if24_exit
0469   06E7             _if24_exit:
0470   06E7             ; if (!is_digit(*x)) 
0471   06E7             _if25_cond:
0472   06E7             ; --- START FUNCTION CALL
0473   06E7 FA F5 FF      lea d, [bp + -11] ; $x
0474   06EA 2A            mov b, [d]
0475   06EB 38 00 00      mov c, 0
0476   06EE 74            mov d, b
0477   06EF 32            mov bl, [d]
0478   06F0 A7 00         mov bh, 0
0479   06F2 38 00 00      mov c, 0
0480   06F5 DD            push bl
0481   06F6 07 C6 65      call is_digit
0482   06F9 51 01 00      add sp, 1
0483   06FC             ; --- END FUNCTION CALL
0484   06FC C0 00 00      cmp b, 0
0485   06FF C6 0D 07      je _if25_exit
0486   0702             _if25_TRUE:
0487   0702             ; return -1; 
0488   0702 FD 2E FF FF   mov32 cb, $ffffffff
0488   0706 FF FF 
0489   0708 F9            leave
0490   0709 09            ret
0491   070A 0A 0D 07      jmp _if25_exit
0492   070D             _if25_exit:
0493   070D             ; v = v + 10 * (*x++ - '0'); 
0494   070D FA FF FF      lea d, [bp + -1] ; $v
0495   0710 DA            push d
0496   0711 FA FF FF      lea d, [bp + -1] ; $v
0497   0714 2A            mov b, [d]
0498   0715 38 00 00      mov c, 0
0499   0718             ; --- START TERMS
0500   0718 D7            push a
0501   0719 11            mov a, b
0502   071A FD 2E 0A 00   mov32 cb, $0000000a
0502   071E 00 00 
0503   0720             ; --- START FACTORS
0504   0720 D7            push a
0505   0721 FD D8         push g
0506   0723 11            mov a, b
0507   0724 FD 7A         mov g, c
0508   0726 FA F5 FF      lea d, [bp + -11] ; $x
0509   0729 2A            mov b, [d]
0510   072A 38 00 00      mov c, 0
0511   072D FD 77         inc b
0512   072F FA F5 FF      lea d, [bp + -11] ; $x
0513   0732 FD 43         mov [d], b
0514   0734 FD 7D         dec b
0515   0736 74            mov d, b
0516   0737 32            mov bl, [d]
0517   0738 A7 00         mov bh, 0
0518   073A 38 00 00      mov c, 0
0519   073D             ; --- START TERMS
0520   073D D7            push a
0521   073E 11            mov a, b
0522   073F FD 2E 30 00   mov32 cb, $00000030
0522   0743 00 00 
0523   0745 60            sub a, b
0524   0746 27            mov b, a
0525   0747 E4            pop a
0526   0748             ; --- END TERMS
0527   0748 FD 38         mov c, g
0528   074A 27            mov b, a
0529   074B FD F1         pop g
0530   074D E4            pop a
0531   074E             ; --- END FACTORS
0532   074E 56            add b, a
0533   074F E4            pop a
0534   0750             ; --- END TERMS
0535   0750 E7            pop d
0536   0751 FD 43         mov [d], b
0537   0753             ; if (!*x) 
0538   0753             _if28_cond:
0539   0753 FA F5 FF      lea d, [bp + -11] ; $x
0540   0756 2A            mov b, [d]
0541   0757 38 00 00      mov c, 0
0542   075A 74            mov d, b
0543   075B 32            mov bl, [d]
0544   075C A7 00         mov bh, 0
0545   075E 38 00 00      mov c, 0
0546   0761 C0 00 00      cmp b, 0
0547   0764 FD 71         seq ; !
0548   0766 C0 00 00      cmp b, 0
0549   0769 C6 78 07      je _if28_exit
0550   076C             _if28_TRUE:
0551   076C             ; return v; 
0552   076C FA FF FF      lea d, [bp + -1] ; $v
0553   076F 2A            mov b, [d]
0554   0770 38 00 00      mov c, 0
0555   0773 F9            leave
0556   0774 09            ret
0557   0775 0A 78 07      jmp _if28_exit
0558   0778             _if28_exit:
0559   0778             ; if (!is_digit(*x)) 
0560   0778             _if29_cond:
0561   0778             ; --- START FUNCTION CALL
0562   0778 FA F5 FF      lea d, [bp + -11] ; $x
0563   077B 2A            mov b, [d]
0564   077C 38 00 00      mov c, 0
0565   077F 74            mov d, b
0566   0780 32            mov bl, [d]
0567   0781 A7 00         mov bh, 0
0568   0783 38 00 00      mov c, 0
0569   0786 DD            push bl
0570   0787 07 C6 65      call is_digit
0571   078A 51 01 00      add sp, 1
0572   078D             ; --- END FUNCTION CALL
0573   078D C0 00 00      cmp b, 0
0574   0790 C6 9E 07      je _if29_exit
0575   0793             _if29_TRUE:
0576   0793             ; return -1; 
0577   0793 FD 2E FF FF   mov32 cb, $ffffffff
0577   0797 FF FF 
0578   0799 F9            leave
0579   079A 09            ret
0580   079B 0A 9E 07      jmp _if29_exit
0581   079E             _if29_exit:
0582   079E             ; v = v + *x++ - '0'; 
0583   079E FA FF FF      lea d, [bp + -1] ; $v
0584   07A1 DA            push d
0585   07A2 FA FF FF      lea d, [bp + -1] ; $v
0586   07A5 2A            mov b, [d]
0587   07A6 38 00 00      mov c, 0
0588   07A9             ; --- START TERMS
0589   07A9 D7            push a
0590   07AA 11            mov a, b
0591   07AB FA F5 FF      lea d, [bp + -11] ; $x
0592   07AE 2A            mov b, [d]
0593   07AF 38 00 00      mov c, 0
0594   07B2 FD 77         inc b
0595   07B4 FA F5 FF      lea d, [bp + -11] ; $x
0596   07B7 FD 43         mov [d], b
0597   07B9 FD 7D         dec b
0598   07BB 74            mov d, b
0599   07BC 32            mov bl, [d]
0600   07BD A7 00         mov bh, 0
0601   07BF 38 00 00      mov c, 0
0602   07C2 56            add b, a
0603   07C3 11            mov a, b
0604   07C4 FD 2E 30 00   mov32 cb, $00000030
0604   07C8 00 00 
0605   07CA 60            sub a, b
0606   07CB 27            mov b, a
0607   07CC E4            pop a
0608   07CD             ; --- END TERMS
0609   07CD E7            pop d
0610   07CE FD 43         mov [d], b
0611   07D0             ; return v; 
0612   07D0 FA FF FF      lea d, [bp + -1] ; $v
0613   07D3 2A            mov b, [d]
0614   07D4 38 00 00      mov c, 0
0615   07D7 F9            leave
0616   07D8 09            ret
0617   07D9             
0618   07D9             input_int:
0619   07D9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0620   07DC             ; char x[8]; 
0621   07DC 52 08 00      sub sp, 8
0622   07DF             ; input(x, 8); 
0623   07DF             ; --- START FUNCTION CALL
0624   07DF FD 2E 08 00   mov32 cb, $00000008
0624   07E3 00 00 
0625   07E5 DD            push bl
0626   07E6 FA F9 FF      lea d, [bp + -7] ; $x
0627   07E9 2D            mov b, d
0628   07EA 38 00 00      mov c, 0
0629   07ED FD AB         swp b
0630   07EF D8            push b
0631   07F0 07 11 05      call input
0632   07F3 51 03 00      add sp, 3
0633   07F6             ; --- END FUNCTION CALL
0634   07F6             ; if (!is_digit(*x)) 
0635   07F6             _if30_cond:
0636   07F6             ; --- START FUNCTION CALL
0637   07F6 FA F9 FF      lea d, [bp + -7] ; $x
0638   07F9 2D            mov b, d
0639   07FA 38 00 00      mov c, 0
0640   07FD 74            mov d, b
0641   07FE 32            mov bl, [d]
0642   07FF A7 00         mov bh, 0
0643   0801 38 00 00      mov c, 0
0644   0804 DD            push bl
0645   0805 07 C6 65      call is_digit
0646   0808 51 01 00      add sp, 1
0647   080B             ; --- END FUNCTION CALL
0648   080B C0 00 00      cmp b, 0
0649   080E C6 1C 08      je _if30_exit
0650   0811             _if30_TRUE:
0651   0811             ; return -1; 
0652   0811 FD 2E FF FF   mov32 cb, $ffffffff
0652   0815 FF FF 
0653   0817 F9            leave
0654   0818 09            ret
0655   0819 0A 1C 08      jmp _if30_exit
0656   081C             _if30_exit:
0657   081C             ; return atoi(x); 
0658   081C             ; --- START FUNCTION CALL
0659   081C FA F9 FF      lea d, [bp + -7] ; $x
0660   081F 2D            mov b, d
0661   0820 38 00 00      mov c, 0
0662   0823 FD AB         swp b
0663   0825 D8            push b
0664   0826 07 2B 66      call atoi
0665   0829 51 02 00      add sp, 2
0666   082C             ; --- END FUNCTION CALL
0667   082C F9            leave
0668   082D 09            ret
0669   082E             
0670   082E             print100:
0671   082E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0672   0831             ; static char buf[16]; 
0673   0831 52 10 00      sub sp, 16
0674   0834             ; char *p; 
0675   0834 52 02 00      sub sp, 2
0676   0837             ; *p = buf; 
0677   0837 FA FF FF      lea d, [bp + -1] ; $p
0678   083A 2A            mov b, [d]
0679   083B 38 00 00      mov c, 0
0680   083E D8            push b
0681   083F 3B 82 6A      mov d, st_print100_buf_dt ; static buf
0682   0842 2D            mov b, d
0683   0843 38 00 00      mov c, 0
0684   0846 E7            pop d
0685   0847 FD 3E         mov [d], bl
0686   0849             ; if (v < 0) { 
0687   0849             _if31_cond:
0688   0849 FA 05 00      lea d, [bp + 5] ; $v
0689   084C 2A            mov b, [d]
0690   084D 38 00 00      mov c, 0
0691   0850             ; --- START RELATIONAL
0692   0850 D7            push a
0693   0851 11            mov a, b
0694   0852 FD 2E 00 00   mov32 cb, $00000000
0694   0856 00 00 
0695   0858 B0            cmp a, b
0696   0859 FD 73         slt ; < (signed)
0697   085B E4            pop a
0698   085C             ; --- END RELATIONAL
0699   085C C0 00 00      cmp b, 0
0700   085F C6 8F 08      je _if31_exit
0701   0862             _if31_TRUE:
0702   0862             ; v = -v; 
0703   0862 FA 05 00      lea d, [bp + 5] ; $v
0704   0865 DA            push d
0705   0866 FA 05 00      lea d, [bp + 5] ; $v
0706   0869 2A            mov b, [d]
0707   086A 38 00 00      mov c, 0
0708   086D FD 97         neg b
0709   086F E7            pop d
0710   0870 FD 43         mov [d], b
0711   0872             ; *p++ = '-'; 
0712   0872 FA FF FF      lea d, [bp + -1] ; $p
0713   0875 2A            mov b, [d]
0714   0876 38 00 00      mov c, 0
0715   0879 FD 77         inc b
0716   087B FA FF FF      lea d, [bp + -1] ; $p
0717   087E FD 43         mov [d], b
0718   0880 FD 7D         dec b
0719   0882 D8            push b
0720   0883 FD 2E 2D 00   mov32 cb, $0000002d
0720   0887 00 00 
0721   0889 E7            pop d
0722   088A FD 3E         mov [d], bl
0723   088C 0A 8F 08      jmp _if31_exit
0724   088F             _if31_exit:
0725   088F             ; return buf; 
0726   088F 3B 82 6A      mov d, st_print100_buf_dt ; static buf
0727   0892 2D            mov b, d
0728   0893 38 00 00      mov c, 0
0729   0896 F9            leave
0730   0897 09            ret
0731   0898             
0732   0898             inoperable:
0733   0898 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0734   089B             ; if (damage[u] < 0) { 
0735   089B             _if32_cond:
0736   089B 3B 95 68      mov d, _damage_data ; $damage
0737   089E D7            push a
0738   089F DA            push d
0739   08A0 FA 05 00      lea d, [bp + 5] ; $u
0740   08A3 32            mov bl, [d]
0741   08A4 A7 00         mov bh, 0
0742   08A6 38 00 00      mov c, 0
0743   08A9 E7            pop d
0744   08AA FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0745   08AE E4            pop a
0746   08AF 2A            mov b, [d]
0747   08B0 38 00 00      mov c, 0
0748   08B3             ; --- START RELATIONAL
0749   08B3 D7            push a
0750   08B4 11            mov a, b
0751   08B5 FD 2E 00 00   mov32 cb, $00000000
0751   08B9 00 00 
0752   08BB B0            cmp a, b
0753   08BC FD 73         slt ; < (signed)
0754   08BE E4            pop a
0755   08BF             ; --- END RELATIONAL
0756   08BF C0 00 00      cmp b, 0
0757   08C2 C6 18 09      je _if32_exit
0758   08C5             _if32_TRUE:
0759   08C5             ; printf("%s %s inoperable.\n", 
0760   08C5             ; --- START FUNCTION CALL
0761   08C5             _ternary34_cond:
0762   08C5 FA 05 00      lea d, [bp + 5] ; $u
0763   08C8 32            mov bl, [d]
0764   08C9 A7 00         mov bh, 0
0765   08CB 38 00 00      mov c, 0
0766   08CE             ; --- START RELATIONAL
0767   08CE D7            push a
0768   08CF 11            mov a, b
0769   08D0 FD 2E 05 00   mov32 cb, $00000005
0769   08D4 00 00 
0770   08D6 B0            cmp a, b
0771   08D7 FD 71         seq ; ==
0772   08D9 E4            pop a
0773   08DA             ; --- END RELATIONAL
0774   08DA C0 00 00      cmp b, 0
0775   08DD C6 E6 08      je _ternary34_FALSE
0776   08E0             _ternary34_TRUE:
0777   08E0 26 BA 6B      mov b, _s30 ; "are"
0778   08E3 0A E9 08      jmp _ternary34_exit
0779   08E6             _ternary34_FALSE:
0780   08E6 26 BE 6B      mov b, _s31 ; "is"
0781   08E9             _ternary34_exit:
0782   08E9 FD AB         swp b
0783   08EB D8            push b
0784   08EC             ; --- START FUNCTION CALL
0785   08EC FA 05 00      lea d, [bp + 5] ; $u
0786   08EF 32            mov bl, [d]
0787   08F0 A7 00         mov bh, 0
0788   08F2 38 00 00      mov c, 0
0789   08F5 FD AB         swp b
0790   08F7 D8            push b
0791   08F8 07 8F 54      call get_device_name
0792   08FB 51 02 00      add sp, 2
0793   08FE             ; --- END FUNCTION CALL
0794   08FE FD AB         swp b
0795   0900 D8            push b
0796   0901 26 C1 6B      mov b, _s32 ; "%s %s inoperable.\n"
0797   0904 FD AB         swp b
0798   0906 D8            push b
0799   0907 07 2C 5B      call printf
0800   090A 51 06 00      add sp, 6
0801   090D             ; --- END FUNCTION CALL
0802   090D             ; return 1; 
0803   090D FD 2E 01 00   mov32 cb, $00000001
0803   0911 00 00 
0804   0913 F9            leave
0805   0914 09            ret
0806   0915 0A 18 09      jmp _if32_exit
0807   0918             _if32_exit:
0808   0918             ; return 0; 
0809   0918 FD 2E 00 00   mov32 cb, $00000000
0809   091C 00 00 
0810   091E F9            leave
0811   091F 09            ret
0812   0920             
0813   0920             intro:
0814   0920 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0815   0923             ; showfile("startrek.intro"); 
0816   0923             ; --- START FUNCTION CALL
0817   0923 26 D4 6B      mov b, _s33 ; "startrek.intro"
0818   0926 FD AB         swp b
0819   0928 D8            push b
0820   0929 07 CE 58      call showfile
0821   092C 51 02 00      add sp, 2
0822   092F             ; --- END FUNCTION CALL
0823   092F             ; if (yesno()) 
0824   092F             _if35_cond:
0825   092F             ; --- START FUNCTION CALL
0826   092F 07 B3 05      call yesno
0827   0932 C0 00 00      cmp b, 0
0828   0935 C6 47 09      je _if35_exit
0829   0938             _if35_TRUE:
0830   0938             ; showfile("startrek.doc"); 
0831   0938             ; --- START FUNCTION CALL
0832   0938 26 E3 6B      mov b, _s34 ; "startrek.doc"
0833   093B FD AB         swp b
0834   093D D8            push b
0835   093E 07 CE 58      call showfile
0836   0941 51 02 00      add sp, 2
0837   0944             ; --- END FUNCTION CALL
0838   0944 0A 47 09      jmp _if35_exit
0839   0947             _if35_exit:
0840   0947             ; showfile("startrek.logo"); 
0841   0947             ; --- START FUNCTION CALL
0842   0947 26 F0 6B      mov b, _s35 ; "startrek.logo"
0843   094A FD AB         swp b
0844   094C D8            push b
0845   094D 07 CE 58      call showfile
0846   0950 51 02 00      add sp, 2
0847   0953             ; --- END FUNCTION CALL
0848   0953             ; stardate = TO_FIXED((get_rand(20) + 20) * 100); 
0849   0953 3B AD 68      mov d, _stardate ; $stardate
0850   0956 DA            push d
0851   0957             ; --- START FUNCTION CALL
0852   0957             ; --- START FUNCTION CALL
0853   0957 FD 2E 14 00   mov32 cb, $00000014
0853   095B 00 00 
0854   095D FD AB         swp b
0855   095F D8            push b
0856   0960 07 91 04      call get_rand
0857   0963 51 02 00      add sp, 2
0858   0966             ; --- END FUNCTION CALL
0859   0966             ; --- START TERMS
0860   0966 D7            push a
0861   0967 11            mov a, b
0862   0968 FD 2E 14 00   mov32 cb, $00000014
0862   096C 00 00 
0863   096E 56            add b, a
0864   096F E4            pop a
0865   0970             ; --- END TERMS
0866   0970             ; --- START FACTORS
0867   0970 D7            push a
0868   0971 FD D8         push g
0869   0973 11            mov a, b
0870   0974 FD 7A         mov g, c
0871   0976 FD 2E 64 00   mov32 cb, $00000064
0871   097A 00 00 
0872   097C FD 38         mov c, g
0873   097E 27            mov b, a
0874   097F FD F1         pop g
0875   0981 E4            pop a
0876   0982             ; --- END FACTORS
0877   0982 FD AB         swp b
0878   0984 D8            push b
0879   0985 07 17 04      call TO_FIXED
0880   0988 51 02 00      add sp, 2
0881   098B             ; --- END FUNCTION CALL
0882   098B E7            pop d
0883   098C FD 43         mov [d], b
0884   098E F9            leave
0885   098F 09            ret
0886   0990             
0887   0990             new_game:
0888   0990 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0889   0993             ; char cmd[4]; 
0890   0993 52 04 00      sub sp, 4
0891   0996             ; initialize(); 
0892   0996             ; --- START FUNCTION CALL
0893   0996 07 4F 0C      call initialize
0894   0999             ; new_quadrant(); 
0895   0999             ; --- START FUNCTION CALL
0896   0999 07 8C 11      call new_quadrant
0897   099C             ; short_range_scan(); 
0898   099C             ; --- START FUNCTION CALL
0899   099C 07 0B 22      call short_range_scan
0900   099F             ; while (1) { 
0901   099F             _while40_cond:
0902   099F FD 2E 01 00   mov32 cb, $00000001
0902   09A3 00 00 
0903   09A5 C0 00 00      cmp b, 0
0904   09A8 C6 4D 0C      je _while40_exit
0905   09AB             _while40_block:
0906   09AB             ; if (shield + energy <= 10 && (energy < 10 || damage[7] < 0)) { 
0907   09AB             _if41_cond:
0908   09AB 3B 8E 68      mov d, _shield ; $shield
0909   09AE 2A            mov b, [d]
0910   09AF 38 00 00      mov c, 0
0911   09B2             ; --- START TERMS
0912   09B2 D7            push a
0913   09B3 11            mov a, b
0914   09B4 3B D3 67      mov d, _energy ; $energy
0915   09B7 2A            mov b, [d]
0916   09B8 38 00 00      mov c, 0
0917   09BB 56            add b, a
0918   09BC E4            pop a
0919   09BD             ; --- END TERMS
0920   09BD             ; --- START RELATIONAL
0921   09BD D7            push a
0922   09BE 11            mov a, b
0923   09BF FD 2E 0A 00   mov32 cb, $0000000a
0923   09C3 00 00 
0924   09C5 B0            cmp a, b
0925   09C6 FD 74         sle ; <= (signed)
0926   09C8 E4            pop a
0927   09C9             ; --- END RELATIONAL
0928   09C9             ; --- START LOGICAL AND
0929   09C9 D7            push a
0930   09CA 11            mov a, b
0931   09CB 3B D3 67      mov d, _energy ; $energy
0932   09CE 2A            mov b, [d]
0933   09CF 38 00 00      mov c, 0
0934   09D2             ; --- START RELATIONAL
0935   09D2 D7            push a
0936   09D3 11            mov a, b
0937   09D4 FD 2E 0A 00   mov32 cb, $0000000a
0937   09D8 00 00 
0938   09DA B0            cmp a, b
0939   09DB FD 73         slt ; < (signed)
0940   09DD E4            pop a
0941   09DE             ; --- END RELATIONAL
0942   09DE             ; --- START LOGICAL OR
0943   09DE D7            push a
0944   09DF 11            mov a, b
0945   09E0 3B 95 68      mov d, _damage_data ; $damage
0946   09E3 D7            push a
0947   09E4 DA            push d
0948   09E5 FD 2E 07 00   mov32 cb, $00000007
0948   09E9 00 00 
0949   09EB E7            pop d
0950   09EC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0951   09F0 E4            pop a
0952   09F1 2A            mov b, [d]
0953   09F2 38 00 00      mov c, 0
0954   09F5             ; --- START RELATIONAL
0955   09F5 D7            push a
0956   09F6 11            mov a, b
0957   09F7 FD 2E 00 00   mov32 cb, $00000000
0957   09FB 00 00 
0958   09FD B0            cmp a, b
0959   09FE FD 73         slt ; < (signed)
0960   0A00 E4            pop a
0961   0A01             ; --- END RELATIONAL
0962   0A01 FD A8         sor a, b ; ||
0963   0A03 E4            pop a
0964   0A04             ; --- END LOGICAL OR
0965   0A04 FD A7         sand a, b
0966   0A06 E4            pop a
0967   0A07             ; --- END LOGICAL AND
0968   0A07 C0 00 00      cmp b, 0
0969   0A0A C6 1F 0A      je _if41_exit
0970   0A0D             _if41_TRUE:
0971   0A0D             ; showfile("startrek.fatal"); 
0972   0A0D             ; --- START FUNCTION CALL
0973   0A0D 26 FE 6B      mov b, _s36 ; "startrek.fatal"
0974   0A10 FD AB         swp b
0975   0A12 D8            push b
0976   0A13 07 CE 58      call showfile
0977   0A16 51 02 00      add sp, 2
0978   0A19             ; --- END FUNCTION CALL
0979   0A19             ; end_of_time(); 
0980   0A19             ; --- START FUNCTION CALL
0981   0A19 07 53 4A      call end_of_time
0982   0A1C 0A 1F 0A      jmp _if41_exit
0983   0A1F             _if41_exit:
0984   0A1F             ; puts("Command? "); 
0985   0A1F             ; --- START FUNCTION CALL
0986   0A1F 26 0D 6C      mov b, _s37 ; "Command? "
0987   0A22 FD AB         swp b
0988   0A24 D8            push b
0989   0A25 07 19 64      call puts
0990   0A28 51 02 00      add sp, 2
0991   0A2B             ; --- END FUNCTION CALL
0992   0A2B             ; input(cmd, 4); 
0993   0A2B             ; --- START FUNCTION CALL
0994   0A2B FD 2E 04 00   mov32 cb, $00000004
0994   0A2F 00 00 
0995   0A31 DD            push bl
0996   0A32 FA FD FF      lea d, [bp + -3] ; $cmd
0997   0A35 2D            mov b, d
0998   0A36 38 00 00      mov c, 0
0999   0A39 FD AB         swp b
1000   0A3B D8            push b
1001   0A3C 07 11 05      call input
1002   0A3F 51 03 00      add sp, 3
1003   0A42             ; --- END FUNCTION CALL
1004   0A42             ; putchar('\n'); 
1005   0A42             ; --- START FUNCTION CALL
1006   0A42 FD 2E 0A 00   mov32 cb, $0000000a
1006   0A46 00 00 
1007   0A48 DD            push bl
1008   0A49 07 A6 5F      call putchar
1009   0A4C 51 01 00      add sp, 1
1010   0A4F             ; --- END FUNCTION CALL
1011   0A4F             ; if (!strncmp(cmd, "nav", 3)) 
1012   0A4F             _if42_cond:
1013   0A4F             ; --- START FUNCTION CALL
1014   0A4F FD 2E 03 00   mov32 cb, $00000003
1014   0A53 00 00 
1015   0A55 FD AB         swp b
1016   0A57 D8            push b
1017   0A58 26 17 6C      mov b, _s38 ; "nav"
1018   0A5B FD AB         swp b
1019   0A5D D8            push b
1020   0A5E FA FD FF      lea d, [bp + -3] ; $cmd
1021   0A61 2D            mov b, d
1022   0A62 38 00 00      mov c, 0
1023   0A65 FD AB         swp b
1024   0A67 D8            push b
1025   0A68 07 9F 64      call strncmp
1026   0A6B 51 06 00      add sp, 6
1027   0A6E             ; --- END FUNCTION CALL
1028   0A6E C0 00 00      cmp b, 0
1029   0A71 C6 7A 0A      je _if42_else
1030   0A74             _if42_TRUE:
1031   0A74             ; course_control(); 
1032   0A74             ; --- START FUNCTION CALL
1033   0A74 07 00 16      call course_control
1034   0A77 0A 4A 0C      jmp _if42_exit
1035   0A7A             _if42_else:
1036   0A7A             ; if (!strncmp(cmd, "srs", 3)) 
1037   0A7A             _if43_cond:
1038   0A7A             ; --- START FUNCTION CALL
1039   0A7A FD 2E 03 00   mov32 cb, $00000003
1039   0A7E 00 00 
1040   0A80 FD AB         swp b
1041   0A82 D8            push b
1042   0A83 26 1B 6C      mov b, _s39 ; "srs"
1043   0A86 FD AB         swp b
1044   0A88 D8            push b
1045   0A89 FA FD FF      lea d, [bp + -3] ; $cmd
1046   0A8C 2D            mov b, d
1047   0A8D 38 00 00      mov c, 0
1048   0A90 FD AB         swp b
1049   0A92 D8            push b
1050   0A93 07 9F 64      call strncmp
1051   0A96 51 06 00      add sp, 6
1052   0A99             ; --- END FUNCTION CALL
1053   0A99 C0 00 00      cmp b, 0
1054   0A9C C6 A5 0A      je _if43_else
1055   0A9F             _if43_TRUE:
1056   0A9F             ; short_range_scan(); 
1057   0A9F             ; --- START FUNCTION CALL
1058   0A9F 07 0B 22      call short_range_scan
1059   0AA2 0A 4A 0C      jmp _if43_exit
1060   0AA5             _if43_else:
1061   0AA5             ; if (!strncmp(cmd, "lrs", 3)) 
1062   0AA5             _if44_cond:
1063   0AA5             ; --- START FUNCTION CALL
1064   0AA5 FD 2E 03 00   mov32 cb, $00000003
1064   0AA9 00 00 
1065   0AAB FD AB         swp b
1066   0AAD D8            push b
1067   0AAE 26 1F 6C      mov b, _s40 ; "lrs"
1068   0AB1 FD AB         swp b
1069   0AB3 D8            push b
1070   0AB4 FA FD FF      lea d, [bp + -3] ; $cmd
1071   0AB7 2D            mov b, d
1072   0AB8 38 00 00      mov c, 0
1073   0ABB FD AB         swp b
1074   0ABD D8            push b
1075   0ABE 07 9F 64      call strncmp
1076   0AC1 51 06 00      add sp, 6
1077   0AC4             ; --- END FUNCTION CALL
1078   0AC4 C0 00 00      cmp b, 0
1079   0AC7 C6 D0 0A      je _if44_else
1080   0ACA             _if44_TRUE:
1081   0ACA             ; long_range_scan(); 
1082   0ACA             ; --- START FUNCTION CALL
1083   0ACA 07 B1 27      call long_range_scan
1084   0ACD 0A 4A 0C      jmp _if44_exit
1085   0AD0             _if44_else:
1086   0AD0             ; if (!strncmp(cmd, "pha", 3)) 
1087   0AD0             _if45_cond:
1088   0AD0             ; --- START FUNCTION CALL
1089   0AD0 FD 2E 03 00   mov32 cb, $00000003
1089   0AD4 00 00 
1090   0AD6 FD AB         swp b
1091   0AD8 D8            push b
1092   0AD9 26 23 6C      mov b, _s41 ; "pha"
1093   0ADC FD AB         swp b
1094   0ADE D8            push b
1095   0ADF FA FD FF      lea d, [bp + -3] ; $cmd
1096   0AE2 2D            mov b, d
1097   0AE3 38 00 00      mov c, 0
1098   0AE6 FD AB         swp b
1099   0AE8 D8            push b
1100   0AE9 07 9F 64      call strncmp
1101   0AEC 51 06 00      add sp, 6
1102   0AEF             ; --- END FUNCTION CALL
1103   0AEF C0 00 00      cmp b, 0
1104   0AF2 C6 FB 0A      je _if45_else
1105   0AF5             _if45_TRUE:
1106   0AF5             ; phaser_control(); 
1107   0AF5             ; --- START FUNCTION CALL
1108   0AF5 07 59 2A      call phaser_control
1109   0AF8 0A 4A 0C      jmp _if45_exit
1110   0AFB             _if45_else:
1111   0AFB             ; if (!strncmp(cmd, "tor", 3)) 
1112   0AFB             _if46_cond:
1113   0AFB             ; --- START FUNCTION CALL
1114   0AFB FD 2E 03 00   mov32 cb, $00000003
1114   0AFF 00 00 
1115   0B01 FD AB         swp b
1116   0B03 D8            push b
1117   0B04 26 27 6C      mov b, _s42 ; "tor"
1118   0B07 FD AB         swp b
1119   0B09 D8            push b
1120   0B0A FA FD FF      lea d, [bp + -3] ; $cmd
1121   0B0D 2D            mov b, d
1122   0B0E 38 00 00      mov c, 0
1123   0B11 FD AB         swp b
1124   0B13 D8            push b
1125   0B14 07 9F 64      call strncmp
1126   0B17 51 06 00      add sp, 6
1127   0B1A             ; --- END FUNCTION CALL
1128   0B1A C0 00 00      cmp b, 0
1129   0B1D C6 26 0B      je _if46_else
1130   0B20             _if46_TRUE:
1131   0B20             ; photon_torpedoes(); 
1132   0B20             ; --- START FUNCTION CALL
1133   0B20 07 92 2F      call photon_torpedoes
1134   0B23 0A 4A 0C      jmp _if46_exit
1135   0B26             _if46_else:
1136   0B26             ; if (!strncmp(cmd, "shi", 3)) 
1137   0B26             _if47_cond:
1138   0B26             ; --- START FUNCTION CALL
1139   0B26 FD 2E 03 00   mov32 cb, $00000003
1139   0B2A 00 00 
1140   0B2C FD AB         swp b
1141   0B2E D8            push b
1142   0B2F 26 2B 6C      mov b, _s43 ; "shi"
1143   0B32 FD AB         swp b
1144   0B34 D8            push b
1145   0B35 FA FD FF      lea d, [bp + -3] ; $cmd
1146   0B38 2D            mov b, d
1147   0B39 38 00 00      mov c, 0
1148   0B3C FD AB         swp b
1149   0B3E D8            push b
1150   0B3F 07 9F 64      call strncmp
1151   0B42 51 06 00      add sp, 6
1152   0B45             ; --- END FUNCTION CALL
1153   0B45 C0 00 00      cmp b, 0
1154   0B48 C6 51 0B      je _if47_else
1155   0B4B             _if47_TRUE:
1156   0B4B             ; shield_control(); 
1157   0B4B             ; --- START FUNCTION CALL
1158   0B4B 07 41 3A      call shield_control
1159   0B4E 0A 4A 0C      jmp _if47_exit
1160   0B51             _if47_else:
1161   0B51             ; if (!strncmp(cmd, "dam", 3)) 
1162   0B51             _if48_cond:
1163   0B51             ; --- START FUNCTION CALL
1164   0B51 FD 2E 03 00   mov32 cb, $00000003
1164   0B55 00 00 
1165   0B57 FD AB         swp b
1166   0B59 D8            push b
1167   0B5A 26 2F 6C      mov b, _s44 ; "dam"
1168   0B5D FD AB         swp b
1169   0B5F D8            push b
1170   0B60 FA FD FF      lea d, [bp + -3] ; $cmd
1171   0B63 2D            mov b, d
1172   0B64 38 00 00      mov c, 0
1173   0B67 FD AB         swp b
1174   0B69 D8            push b
1175   0B6A 07 9F 64      call strncmp
1176   0B6D 51 06 00      add sp, 6
1177   0B70             ; --- END FUNCTION CALL
1178   0B70 C0 00 00      cmp b, 0
1179   0B73 C6 7C 0B      je _if48_else
1180   0B76             _if48_TRUE:
1181   0B76             ; damage_control(); 
1182   0B76             ; --- START FUNCTION CALL
1183   0B76 07 5D 37      call damage_control
1184   0B79 0A 4A 0C      jmp _if48_exit
1185   0B7C             _if48_else:
1186   0B7C             ; if (!strncmp(cmd, "com", 3)) 
1187   0B7C             _if49_cond:
1188   0B7C             ; --- START FUNCTION CALL
1189   0B7C FD 2E 03 00   mov32 cb, $00000003
1189   0B80 00 00 
1190   0B82 FD AB         swp b
1191   0B84 D8            push b
1192   0B85 26 33 6C      mov b, _s45 ; "com"
1193   0B88 FD AB         swp b
1194   0B8A D8            push b
1195   0B8B FA FD FF      lea d, [bp + -3] ; $cmd
1196   0B8E 2D            mov b, d
1197   0B8F 38 00 00      mov c, 0
1198   0B92 FD AB         swp b
1199   0B94 D8            push b
1200   0B95 07 9F 64      call strncmp
1201   0B98 51 06 00      add sp, 6
1202   0B9B             ; --- END FUNCTION CALL
1203   0B9B C0 00 00      cmp b, 0
1204   0B9E C6 A7 0B      je _if49_else
1205   0BA1             _if49_TRUE:
1206   0BA1             ; library_computer(); 
1207   0BA1             ; --- START FUNCTION CALL
1208   0BA1 07 4A 3B      call library_computer
1209   0BA4 0A 4A 0C      jmp _if49_exit
1210   0BA7             _if49_else:
1211   0BA7             ; if (!strncmp(cmd, "xxx", 3)) 
1212   0BA7             _if50_cond:
1213   0BA7             ; --- START FUNCTION CALL
1214   0BA7 FD 2E 03 00   mov32 cb, $00000003
1214   0BAB 00 00 
1215   0BAD FD AB         swp b
1216   0BAF D8            push b
1217   0BB0 26 37 6C      mov b, _s46 ; "xxx"
1218   0BB3 FD AB         swp b
1219   0BB5 D8            push b
1220   0BB6 FA FD FF      lea d, [bp + -3] ; $cmd
1221   0BB9 2D            mov b, d
1222   0BBA 38 00 00      mov c, 0
1223   0BBD FD AB         swp b
1224   0BBF D8            push b
1225   0BC0 07 9F 64      call strncmp
1226   0BC3 51 06 00      add sp, 6
1227   0BC6             ; --- END FUNCTION CALL
1228   0BC6 C0 00 00      cmp b, 0
1229   0BC9 C6 D2 0B      je _if50_else
1230   0BCC             _if50_TRUE:
1231   0BCC             ; resign_commision(); 
1232   0BCC             ; --- START FUNCTION CALL
1233   0BCC 07 7A 4A      call resign_commision
1234   0BCF 0A 4A 0C      jmp _if50_exit
1235   0BD2             _if50_else:
1236   0BD2             ; puts("Enter one of the following:\n"); 
1237   0BD2             ; --- START FUNCTION CALL
1238   0BD2 26 3B 6C      mov b, _s47 ; "Enter one of the following:\n"
1239   0BD5 FD AB         swp b
1240   0BD7 D8            push b
1241   0BD8 07 19 64      call puts
1242   0BDB 51 02 00      add sp, 2
1243   0BDE             ; --- END FUNCTION CALL
1244   0BDE             ; puts("  nav - To Set Course"); 
1245   0BDE             ; --- START FUNCTION CALL
1246   0BDE 26 58 6C      mov b, _s48 ; "  nav - To Set Course"
1247   0BE1 FD AB         swp b
1248   0BE3 D8            push b
1249   0BE4 07 19 64      call puts
1250   0BE7 51 02 00      add sp, 2
1251   0BEA             ; --- END FUNCTION CALL
1252   0BEA             ; puts("  srs - Short Range Sensors"); 
1253   0BEA             ; --- START FUNCTION CALL
1254   0BEA 26 6E 6C      mov b, _s49 ; "  srs - Short Range Sensors"
1255   0BED FD AB         swp b
1256   0BEF D8            push b
1257   0BF0 07 19 64      call puts
1258   0BF3 51 02 00      add sp, 2
1259   0BF6             ; --- END FUNCTION CALL
1260   0BF6             ; puts("  lrs - Long Range Sensors"); 
1261   0BF6             ; --- START FUNCTION CALL
1262   0BF6 26 8A 6C      mov b, _s50 ; "  lrs - Long Range Sensors"
1263   0BF9 FD AB         swp b
1264   0BFB D8            push b
1265   0BFC 07 19 64      call puts
1266   0BFF 51 02 00      add sp, 2
1267   0C02             ; --- END FUNCTION CALL
1268   0C02             ; puts("  pha - Phasers"); 
1269   0C02             ; --- START FUNCTION CALL
1270   0C02 26 A5 6C      mov b, _s51 ; "  pha - Phasers"
1271   0C05 FD AB         swp b
1272   0C07 D8            push b
1273   0C08 07 19 64      call puts
1274   0C0B 51 02 00      add sp, 2
1275   0C0E             ; --- END FUNCTION CALL
1276   0C0E             ; puts("  tor - Photon Torpedoes"); 
1277   0C0E             ; --- START FUNCTION CALL
1278   0C0E 26 B5 6C      mov b, _s52 ; "  tor - Photon Torpedoes"
1279   0C11 FD AB         swp b
1280   0C13 D8            push b
1281   0C14 07 19 64      call puts
1282   0C17 51 02 00      add sp, 2
1283   0C1A             ; --- END FUNCTION CALL
1284   0C1A             ; puts("  shi - Shield Control"); 
1285   0C1A             ; --- START FUNCTION CALL
1286   0C1A 26 CE 6C      mov b, _s53 ; "  shi - Shield Control"
1287   0C1D FD AB         swp b
1288   0C1F D8            push b
1289   0C20 07 19 64      call puts
1290   0C23 51 02 00      add sp, 2
1291   0C26             ; --- END FUNCTION CALL
1292   0C26             ; puts("  dam - Damage Control"); 
1293   0C26             ; --- START FUNCTION CALL
1294   0C26 26 E5 6C      mov b, _s54 ; "  dam - Damage Control"
1295   0C29 FD AB         swp b
1296   0C2B D8            push b
1297   0C2C 07 19 64      call puts
1298   0C2F 51 02 00      add sp, 2
1299   0C32             ; --- END FUNCTION CALL
1300   0C32             ; puts("  com - Library Computer"); 
1301   0C32             ; --- START FUNCTION CALL
1302   0C32 26 FC 6C      mov b, _s55 ; "  com - Library Computer"
1303   0C35 FD AB         swp b
1304   0C37 D8            push b
1305   0C38 07 19 64      call puts
1306   0C3B 51 02 00      add sp, 2
1307   0C3E             ; --- END FUNCTION CALL
1308   0C3E             ; puts("  xxx - Resign Command\n"); 
1309   0C3E             ; --- START FUNCTION CALL
1310   0C3E 26 15 6D      mov b, _s56 ; "  xxx - Resign Command\n"
1311   0C41 FD AB         swp b
1312   0C43 D8            push b
1313   0C44 07 19 64      call puts
1314   0C47 51 02 00      add sp, 2
1315   0C4A             ; --- END FUNCTION CALL
1316   0C4A             _if50_exit:
1317   0C4A             _if49_exit:
1318   0C4A             _if48_exit:
1319   0C4A             _if47_exit:
1320   0C4A             _if46_exit:
1321   0C4A             _if45_exit:
1322   0C4A             _if44_exit:
1323   0C4A             _if43_exit:
1324   0C4A             _if42_exit:
1325   0C4A 0A 9F 09      jmp _while40_cond
1326   0C4D             _while40_exit:
1327   0C4D F9            leave
1328   0C4E 09            ret
1329   0C4F             
1330   0C4F             initialize:
1331   0C4F F8 00 00      enter 0 ; (push bp; mov bp, sp)
1332   0C52             ; int i, j; 
1333   0C52 52 02 00      sub sp, 2
1334   0C55 52 02 00      sub sp, 2
1335   0C58             ; unsigned char        yp, xp; 
1336   0C58 52 01 00      sub sp, 1
1337   0C5B 52 01 00      sub sp, 1
1338   0C5E             ; unsigned char        r; 
1339   0C5E 52 01 00      sub sp, 1
1340   0C61             ; time_start = FROM_FIXED(stardate); 
1341   0C61 3B 91 68      mov d, _time_start ; $time_start
1342   0C64 DA            push d
1343   0C65             ; --- START FUNCTION CALL
1344   0C65 3B AD 68      mov d, _stardate ; $stardate
1345   0C68 2A            mov b, [d]
1346   0C69 38 00 00      mov c, 0
1347   0C6C FD AB         swp b
1348   0C6E D8            push b
1349   0C6F 07 35 04      call FROM_FIXED
1350   0C72 51 02 00      add sp, 2
1351   0C75             ; --- END FUNCTION CALL
1352   0C75 E7            pop d
1353   0C76 FD 43         mov [d], b
1354   0C78             ; time_up = 25 + get_rand(10); 
1355   0C78 3B 93 68      mov d, _time_up ; $time_up
1356   0C7B DA            push d
1357   0C7C FD 2E 19 00   mov32 cb, $00000019
1357   0C80 00 00 
1358   0C82             ; --- START TERMS
1359   0C82 D7            push a
1360   0C83 11            mov a, b
1361   0C84             ; --- START FUNCTION CALL
1362   0C84 FD 2E 0A 00   mov32 cb, $0000000a
1362   0C88 00 00 
1363   0C8A FD AB         swp b
1364   0C8C D8            push b
1365   0C8D 07 91 04      call get_rand
1366   0C90 51 02 00      add sp, 2
1367   0C93             ; --- END FUNCTION CALL
1368   0C93 56            add b, a
1369   0C94 E4            pop a
1370   0C95             ; --- END TERMS
1371   0C95 E7            pop d
1372   0C96 FD 43         mov [d], b
1373   0C98             ; docked = 0; 
1374   0C98 3B D2 67      mov d, _docked ; $docked
1375   0C9B DA            push d
1376   0C9C FD 2E 00 00   mov32 cb, $00000000
1376   0CA0 00 00 
1377   0CA2 E7            pop d
1378   0CA3 FD 3E         mov [d], bl
1379   0CA5             ; energy = energy0; 
1380   0CA5 3B D3 67      mov d, _energy ; $energy
1381   0CA8 DA            push d
1382   0CA9 3B D5 67      mov d, _energy0 ; $energy0
1383   0CAC 2A            mov b, [d]
1384   0CAD 38 00 00      mov c, 0
1385   0CB0 E7            pop d
1386   0CB1 FD 43         mov [d], b
1387   0CB3             ; torps = torps0; 
1388   0CB3 3B 88 68      mov d, _torps ; $torps
1389   0CB6 DA            push d
1390   0CB7 3B 89 68      mov d, _torps0 ; $torps0
1391   0CBA 32            mov bl, [d]
1392   0CBB A7 00         mov bh, 0
1393   0CBD 38 00 00      mov c, 0
1394   0CC0 E7            pop d
1395   0CC1 FD 3E         mov [d], bl
1396   0CC3             ; shield = 0; 
1397   0CC3 3B 8E 68      mov d, _shield ; $shield
1398   0CC6 DA            push d
1399   0CC7 FD 2E 00 00   mov32 cb, $00000000
1399   0CCB 00 00 
1400   0CCD E7            pop d
1401   0CCE FD 43         mov [d], b
1402   0CD0             ; quad_y = rand8(); 
1403   0CD0 3B 8A 68      mov d, _quad_y ; $quad_y
1404   0CD3 DA            push d
1405   0CD4             ; --- START FUNCTION CALL
1406   0CD4 07 FD 04      call rand8
1407   0CD7 E7            pop d
1408   0CD8 FD 43         mov [d], b
1409   0CDA             ; quad_x = rand8(); 
1410   0CDA 3B 8C 68      mov d, _quad_x ; $quad_x
1411   0CDD DA            push d
1412   0CDE             ; --- START FUNCTION CALL
1413   0CDE 07 FD 04      call rand8
1414   0CE1 E7            pop d
1415   0CE2 FD 43         mov [d], b
1416   0CE4             ; ship_y = TO_FIXED00(rand8()); 
1417   0CE4 3B A9 68      mov d, _ship_y ; $ship_y
1418   0CE7 DA            push d
1419   0CE8             ; --- START FUNCTION CALL
1420   0CE8             ; --- START FUNCTION CALL
1421   0CE8 07 FD 04      call rand8
1422   0CEB FD AB         swp b
1423   0CED D8            push b
1424   0CEE 07 54 04      call TO_FIXED00
1425   0CF1 51 02 00      add sp, 2
1426   0CF4             ; --- END FUNCTION CALL
1427   0CF4 E7            pop d
1428   0CF5 FD 43         mov [d], b
1429   0CF7             ; ship_x = TO_FIXED00(rand8()); 
1430   0CF7 3B AB 68      mov d, _ship_x ; $ship_x
1431   0CFA DA            push d
1432   0CFB             ; --- START FUNCTION CALL
1433   0CFB             ; --- START FUNCTION CALL
1434   0CFB 07 FD 04      call rand8
1435   0CFE FD AB         swp b
1436   0D00 D8            push b
1437   0D01 07 54 04      call TO_FIXED00
1438   0D04 51 02 00      add sp, 2
1439   0D07             ; --- END FUNCTION CALL
1440   0D07 E7            pop d
1441   0D08 FD 43         mov [d], b
1442   0D0A             ; for (i = 1; i <= 8; i++) 
1443   0D0A             _for51_init:
1444   0D0A FA FF FF      lea d, [bp + -1] ; $i
1445   0D0D DA            push d
1446   0D0E FD 2E 01 00   mov32 cb, $00000001
1446   0D12 00 00 
1447   0D14 E7            pop d
1448   0D15 FD 43         mov [d], b
1449   0D17             _for51_cond:
1450   0D17 FA FF FF      lea d, [bp + -1] ; $i
1451   0D1A 2A            mov b, [d]
1452   0D1B 38 00 00      mov c, 0
1453   0D1E             ; --- START RELATIONAL
1454   0D1E D7            push a
1455   0D1F 11            mov a, b
1456   0D20 FD 2E 08 00   mov32 cb, $00000008
1456   0D24 00 00 
1457   0D26 B0            cmp a, b
1458   0D27 FD 74         sle ; <= (signed)
1459   0D29 E4            pop a
1460   0D2A             ; --- END RELATIONAL
1461   0D2A C0 00 00      cmp b, 0
1462   0D2D C6 5F 0D      je _for51_exit
1463   0D30             _for51_block:
1464   0D30             ; damage[i] = 0; 
1465   0D30 3B 95 68      mov d, _damage_data ; $damage
1466   0D33 D7            push a
1467   0D34 DA            push d
1468   0D35 FA FF FF      lea d, [bp + -1] ; $i
1469   0D38 2A            mov b, [d]
1470   0D39 38 00 00      mov c, 0
1471   0D3C E7            pop d
1472   0D3D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1473   0D41 E4            pop a
1474   0D42 DA            push d
1475   0D43 FD 2E 00 00   mov32 cb, $00000000
1475   0D47 00 00 
1476   0D49 E7            pop d
1477   0D4A FD 43         mov [d], b
1478   0D4C             _for51_update:
1479   0D4C FA FF FF      lea d, [bp + -1] ; $i
1480   0D4F 2A            mov b, [d]
1481   0D50 38 00 00      mov c, 0
1482   0D53 11            mov a, b
1483   0D54 FD 77         inc b
1484   0D56 FA FF FF      lea d, [bp + -1] ; $i
1485   0D59 FD 43         mov [d], b
1486   0D5B 27            mov b, a
1487   0D5C 0A 17 0D      jmp _for51_cond
1488   0D5F             _for51_exit:
1489   0D5F             ; for (i = 1; i <= 8; i++) { 
1490   0D5F             _for52_init:
1491   0D5F FA FF FF      lea d, [bp + -1] ; $i
1492   0D62 DA            push d
1493   0D63 FD 2E 01 00   mov32 cb, $00000001
1493   0D67 00 00 
1494   0D69 E7            pop d
1495   0D6A FD 43         mov [d], b
1496   0D6C             _for52_cond:
1497   0D6C FA FF FF      lea d, [bp + -1] ; $i
1498   0D6F 2A            mov b, [d]
1499   0D70 38 00 00      mov c, 0
1500   0D73             ; --- START RELATIONAL
1501   0D73 D7            push a
1502   0D74 11            mov a, b
1503   0D75 FD 2E 08 00   mov32 cb, $00000008
1503   0D79 00 00 
1504   0D7B B0            cmp a, b
1505   0D7C FD 74         sle ; <= (signed)
1506   0D7E E4            pop a
1507   0D7F             ; --- END RELATIONAL
1508   0D7F C0 00 00      cmp b, 0
1509   0D82 C6 45 0F      je _for52_exit
1510   0D85             _for52_block:
1511   0D85             ; for (j = 1; j <= 8; j++) { 
1512   0D85             _for53_init:
1513   0D85 FA FD FF      lea d, [bp + -3] ; $j
1514   0D88 DA            push d
1515   0D89 FD 2E 01 00   mov32 cb, $00000001
1515   0D8D 00 00 
1516   0D8F E7            pop d
1517   0D90 FD 43         mov [d], b
1518   0D92             _for53_cond:
1519   0D92 FA FD FF      lea d, [bp + -3] ; $j
1520   0D95 2A            mov b, [d]
1521   0D96 38 00 00      mov c, 0
1522   0D99             ; --- START RELATIONAL
1523   0D99 D7            push a
1524   0D9A 11            mov a, b
1525   0D9B FD 2E 08 00   mov32 cb, $00000008
1525   0D9F 00 00 
1526   0DA1 B0            cmp a, b
1527   0DA2 FD 74         sle ; <= (signed)
1528   0DA4 E4            pop a
1529   0DA5             ; --- END RELATIONAL
1530   0DA5 C0 00 00      cmp b, 0
1531   0DA8 C6 32 0F      je _for53_exit
1532   0DAB             _for53_block:
1533   0DAB             ; r = get_rand(100); 
1534   0DAB FA FA FF      lea d, [bp + -6] ; $r
1535   0DAE DA            push d
1536   0DAF             ; --- START FUNCTION CALL
1537   0DAF FD 2E 64 00   mov32 cb, $00000064
1537   0DB3 00 00 
1538   0DB5 FD AB         swp b
1539   0DB7 D8            push b
1540   0DB8 07 91 04      call get_rand
1541   0DBB 51 02 00      add sp, 2
1542   0DBE             ; --- END FUNCTION CALL
1543   0DBE E7            pop d
1544   0DBF FD 3E         mov [d], bl
1545   0DC1             ; klingons = 0; 
1546   0DC1 3B 85 68      mov d, _klingons ; $klingons
1547   0DC4 DA            push d
1548   0DC5 FD 2E 00 00   mov32 cb, $00000000
1548   0DC9 00 00 
1549   0DCB E7            pop d
1550   0DCC FD 3E         mov [d], bl
1551   0DCE             ; if (r > 98) 
1552   0DCE             _if54_cond:
1553   0DCE FA FA FF      lea d, [bp + -6] ; $r
1554   0DD1 32            mov bl, [d]
1555   0DD2 A7 00         mov bh, 0
1556   0DD4 38 00 00      mov c, 0
1557   0DD7             ; --- START RELATIONAL
1558   0DD7 D7            push a
1559   0DD8 11            mov a, b
1560   0DD9 FD 2E 62 00   mov32 cb, $00000062
1560   0DDD 00 00 
1561   0DDF B0            cmp a, b
1562   0DE0 FD 81         sgu ; > (unsigned)
1563   0DE2 E4            pop a
1564   0DE3             ; --- END RELATIONAL
1565   0DE3 C0 00 00      cmp b, 0
1566   0DE6 C6 F9 0D      je _if54_else
1567   0DE9             _if54_TRUE:
1568   0DE9             ; klingons = 3; 
1569   0DE9 3B 85 68      mov d, _klingons ; $klingons
1570   0DEC DA            push d
1571   0DED FD 2E 03 00   mov32 cb, $00000003
1571   0DF1 00 00 
1572   0DF3 E7            pop d
1573   0DF4 FD 3E         mov [d], bl
1574   0DF6 0A 4F 0E      jmp _if54_exit
1575   0DF9             _if54_else:
1576   0DF9             ; if (r > 95) 
1577   0DF9             _if55_cond:
1578   0DF9 FA FA FF      lea d, [bp + -6] ; $r
1579   0DFC 32            mov bl, [d]
1580   0DFD A7 00         mov bh, 0
1581   0DFF 38 00 00      mov c, 0
1582   0E02             ; --- START RELATIONAL
1583   0E02 D7            push a
1584   0E03 11            mov a, b
1585   0E04 FD 2E 5F 00   mov32 cb, $0000005f
1585   0E08 00 00 
1586   0E0A B0            cmp a, b
1587   0E0B FD 81         sgu ; > (unsigned)
1588   0E0D E4            pop a
1589   0E0E             ; --- END RELATIONAL
1590   0E0E C0 00 00      cmp b, 0
1591   0E11 C6 24 0E      je _if55_else
1592   0E14             _if55_TRUE:
1593   0E14             ; klingons = 2; 
1594   0E14 3B 85 68      mov d, _klingons ; $klingons
1595   0E17 DA            push d
1596   0E18 FD 2E 02 00   mov32 cb, $00000002
1596   0E1C 00 00 
1597   0E1E E7            pop d
1598   0E1F FD 3E         mov [d], bl
1599   0E21 0A 4F 0E      jmp _if55_exit
1600   0E24             _if55_else:
1601   0E24             ; if (r > 80) 
1602   0E24             _if56_cond:
1603   0E24 FA FA FF      lea d, [bp + -6] ; $r
1604   0E27 32            mov bl, [d]
1605   0E28 A7 00         mov bh, 0
1606   0E2A 38 00 00      mov c, 0
1607   0E2D             ; --- START RELATIONAL
1608   0E2D D7            push a
1609   0E2E 11            mov a, b
1610   0E2F FD 2E 50 00   mov32 cb, $00000050
1610   0E33 00 00 
1611   0E35 B0            cmp a, b
1612   0E36 FD 81         sgu ; > (unsigned)
1613   0E38 E4            pop a
1614   0E39             ; --- END RELATIONAL
1615   0E39 C0 00 00      cmp b, 0
1616   0E3C C6 4F 0E      je _if56_exit
1617   0E3F             _if56_TRUE:
1618   0E3F             ; klingons = 1; 
1619   0E3F 3B 85 68      mov d, _klingons ; $klingons
1620   0E42 DA            push d
1621   0E43 FD 2E 01 00   mov32 cb, $00000001
1621   0E47 00 00 
1622   0E49 E7            pop d
1623   0E4A FD 3E         mov [d], bl
1624   0E4C 0A 4F 0E      jmp _if56_exit
1625   0E4F             _if56_exit:
1626   0E4F             _if55_exit:
1627   0E4F             _if54_exit:
1628   0E4F             ; klingons_left = klingons_left + klingons; 
1629   0E4F 3B 87 68      mov d, _klingons_left ; $klingons_left
1630   0E52 DA            push d
1631   0E53 3B 87 68      mov d, _klingons_left ; $klingons_left
1632   0E56 32            mov bl, [d]
1633   0E57 A7 00         mov bh, 0
1634   0E59 38 00 00      mov c, 0
1635   0E5C             ; --- START TERMS
1636   0E5C D7            push a
1637   0E5D 11            mov a, b
1638   0E5E 3B 85 68      mov d, _klingons ; $klingons
1639   0E61 32            mov bl, [d]
1640   0E62 A7 00         mov bh, 0
1641   0E64 38 00 00      mov c, 0
1642   0E67 56            add b, a
1643   0E68 E4            pop a
1644   0E69             ; --- END TERMS
1645   0E69 E7            pop d
1646   0E6A FD 3E         mov [d], bl
1647   0E6C             ; starbases = 0; 
1648   0E6C 3B AE 67      mov d, _starbases ; $starbases
1649   0E6F DA            push d
1650   0E70 FD 2E 00 00   mov32 cb, $00000000
1650   0E74 00 00 
1651   0E76 E7            pop d
1652   0E77 FD 3E         mov [d], bl
1653   0E79             ; if (get_rand(100) > 96) 
1654   0E79             _if57_cond:
1655   0E79             ; --- START FUNCTION CALL
1656   0E79 FD 2E 64 00   mov32 cb, $00000064
1656   0E7D 00 00 
1657   0E7F FD AB         swp b
1658   0E81 D8            push b
1659   0E82 07 91 04      call get_rand
1660   0E85 51 02 00      add sp, 2
1661   0E88             ; --- END FUNCTION CALL
1662   0E88             ; --- START RELATIONAL
1663   0E88 D7            push a
1664   0E89 11            mov a, b
1665   0E8A FD 2E 60 00   mov32 cb, $00000060
1665   0E8E 00 00 
1666   0E90 B0            cmp a, b
1667   0E91 FD 7F         sgt ; >
1668   0E93 E4            pop a
1669   0E94             ; --- END RELATIONAL
1670   0E94 C0 00 00      cmp b, 0
1671   0E97 C6 AA 0E      je _if57_exit
1672   0E9A             _if57_TRUE:
1673   0E9A             ; starbases = 1; 
1674   0E9A 3B AE 67      mov d, _starbases ; $starbases
1675   0E9D DA            push d
1676   0E9E FD 2E 01 00   mov32 cb, $00000001
1676   0EA2 00 00 
1677   0EA4 E7            pop d
1678   0EA5 FD 3E         mov [d], bl
1679   0EA7 0A AA 0E      jmp _if57_exit
1680   0EAA             _if57_exit:
1681   0EAA             ; starbases_left = starbases_left + starbases; 
1682   0EAA 3B B1 67      mov d, _starbases_left ; $starbases_left
1683   0EAD DA            push d
1684   0EAE 3B B1 67      mov d, _starbases_left ; $starbases_left
1685   0EB1 32            mov bl, [d]
1686   0EB2 A7 00         mov bh, 0
1687   0EB4 38 00 00      mov c, 0
1688   0EB7             ; --- START TERMS
1689   0EB7 D7            push a
1690   0EB8 11            mov a, b
1691   0EB9 3B AE 67      mov d, _starbases ; $starbases
1692   0EBC 32            mov bl, [d]
1693   0EBD A7 00         mov bh, 0
1694   0EBF 38 00 00      mov c, 0
1695   0EC2 56            add b, a
1696   0EC3 E4            pop a
1697   0EC4             ; --- END TERMS
1698   0EC4 E7            pop d
1699   0EC5 FD 3E         mov [d], bl
1700   0EC7             ; map[i][j] = (klingons << 8) + (starbases << 4) + rand8(); 
1701   0EC7 3B D7 67      mov d, _map_data ; $map
1702   0ECA D7            push a
1703   0ECB DA            push d
1704   0ECC FA FF FF      lea d, [bp + -1] ; $i
1705   0ECF 2A            mov b, [d]
1706   0ED0 38 00 00      mov c, 0
1707   0ED3 E7            pop d
1708   0ED4 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
1709   0ED8 DA            push d
1710   0ED9 FA FD FF      lea d, [bp + -3] ; $j
1711   0EDC 2A            mov b, [d]
1712   0EDD 38 00 00      mov c, 0
1713   0EE0 E7            pop d
1714   0EE1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1715   0EE5 E4            pop a
1716   0EE6 DA            push d
1717   0EE7 3B 85 68      mov d, _klingons ; $klingons
1718   0EEA 32            mov bl, [d]
1719   0EEB A7 00         mov bh, 0
1720   0EED 38 00 00      mov c, 0
1721   0EF0             ; --- START SHIFT
1722   0EF0 D7            push a
1723   0EF1 11            mov a, b
1724   0EF2 FD 2E 08 00   mov32 cb, $00000008
1724   0EF6 00 00 
1725   0EF8 FD 39         mov c, b
1726   0EFA 9D            shl a, cl
1727   0EFB 27            mov b, a
1728   0EFC E4            pop a
1729   0EFD             ; --- END SHIFT
1730   0EFD             ; --- START TERMS
1731   0EFD D7            push a
1732   0EFE 11            mov a, b
1733   0EFF 3B AE 67      mov d, _starbases ; $starbases
1734   0F02 32            mov bl, [d]
1735   0F03 A7 00         mov bh, 0
1736   0F05 38 00 00      mov c, 0
1737   0F08             ; --- START SHIFT
1738   0F08 D7            push a
1739   0F09 11            mov a, b
1740   0F0A FD 2E 04 00   mov32 cb, $00000004
1740   0F0E 00 00 
1741   0F10 FD 39         mov c, b
1742   0F12 9D            shl a, cl
1743   0F13 27            mov b, a
1744   0F14 E4            pop a
1745   0F15             ; --- END SHIFT
1746   0F15 56            add b, a
1747   0F16 11            mov a, b
1748   0F17             ; --- START FUNCTION CALL
1749   0F17 07 FD 04      call rand8
1750   0F1A 56            add b, a
1751   0F1B E4            pop a
1752   0F1C             ; --- END TERMS
1753   0F1C E7            pop d
1754   0F1D FD 43         mov [d], b
1755   0F1F             _for53_update:
1756   0F1F FA FD FF      lea d, [bp + -3] ; $j
1757   0F22 2A            mov b, [d]
1758   0F23 38 00 00      mov c, 0
1759   0F26 11            mov a, b
1760   0F27 FD 77         inc b
1761   0F29 FA FD FF      lea d, [bp + -3] ; $j
1762   0F2C FD 43         mov [d], b
1763   0F2E 27            mov b, a
1764   0F2F 0A 92 0D      jmp _for53_cond
1765   0F32             _for53_exit:
1766   0F32             _for52_update:
1767   0F32 FA FF FF      lea d, [bp + -1] ; $i
1768   0F35 2A            mov b, [d]
1769   0F36 38 00 00      mov c, 0
1770   0F39 11            mov a, b
1771   0F3A FD 77         inc b
1772   0F3C FA FF FF      lea d, [bp + -1] ; $i
1773   0F3F FD 43         mov [d], b
1774   0F41 27            mov b, a
1775   0F42 0A 6C 0D      jmp _for52_cond
1776   0F45             _for52_exit:
1777   0F45             ; if (klingons_left > time_up) 
1778   0F45             _if58_cond:
1779   0F45 3B 87 68      mov d, _klingons_left ; $klingons_left
1780   0F48 32            mov bl, [d]
1781   0F49 A7 00         mov bh, 0
1782   0F4B 38 00 00      mov c, 0
1783   0F4E             ; --- START RELATIONAL
1784   0F4E D7            push a
1785   0F4F 11            mov a, b
1786   0F50 3B 93 68      mov d, _time_up ; $time_up
1787   0F53 2A            mov b, [d]
1788   0F54 38 00 00      mov c, 0
1789   0F57 B0            cmp a, b
1790   0F58 FD 81         sgu ; > (unsigned)
1791   0F5A E4            pop a
1792   0F5B             ; --- END RELATIONAL
1793   0F5B C0 00 00      cmp b, 0
1794   0F5E C6 7E 0F      je _if58_exit
1795   0F61             _if58_TRUE:
1796   0F61             ; time_up = klingons_left + 1; 
1797   0F61 3B 93 68      mov d, _time_up ; $time_up
1798   0F64 DA            push d
1799   0F65 3B 87 68      mov d, _klingons_left ; $klingons_left
1800   0F68 32            mov bl, [d]
1801   0F69 A7 00         mov bh, 0
1802   0F6B 38 00 00      mov c, 0
1803   0F6E             ; --- START TERMS
1804   0F6E D7            push a
1805   0F6F 11            mov a, b
1806   0F70 FD 2E 01 00   mov32 cb, $00000001
1806   0F74 00 00 
1807   0F76 56            add b, a
1808   0F77 E4            pop a
1809   0F78             ; --- END TERMS
1810   0F78 E7            pop d
1811   0F79 FD 43         mov [d], b
1812   0F7B 0A 7E 0F      jmp _if58_exit
1813   0F7E             _if58_exit:
1814   0F7E             ; if (starbases_left == 0) { 
1815   0F7E             _if59_cond:
1816   0F7E 3B B1 67      mov d, _starbases_left ; $starbases_left
1817   0F81 32            mov bl, [d]
1818   0F82 A7 00         mov bh, 0
1819   0F84 38 00 00      mov c, 0
1820   0F87             ; --- START RELATIONAL
1821   0F87 D7            push a
1822   0F88 11            mov a, b
1823   0F89 FD 2E 00 00   mov32 cb, $00000000
1823   0F8D 00 00 
1824   0F8F B0            cmp a, b
1825   0F90 FD 71         seq ; ==
1826   0F92 E4            pop a
1827   0F93             ; --- END RELATIONAL
1828   0F93 C0 00 00      cmp b, 0
1829   0F96 C6 DA 10      je _if59_exit
1830   0F99             _if59_TRUE:
1831   0F99             ; yp = rand8(); 
1832   0F99 FA FC FF      lea d, [bp + -4] ; $yp
1833   0F9C DA            push d
1834   0F9D             ; --- START FUNCTION CALL
1835   0F9D 07 FD 04      call rand8
1836   0FA0 E7            pop d
1837   0FA1 FD 3E         mov [d], bl
1838   0FA3             ; xp = rand8(); 
1839   0FA3 FA FB FF      lea d, [bp + -5] ; $xp
1840   0FA6 DA            push d
1841   0FA7             ; --- START FUNCTION CALL
1842   0FA7 07 FD 04      call rand8
1843   0FAA E7            pop d
1844   0FAB FD 3E         mov [d], bl
1845   0FAD             ; if (map[yp][xp] < 0x200) { 
1846   0FAD             _if60_cond:
1847   0FAD 3B D7 67      mov d, _map_data ; $map
1848   0FB0 D7            push a
1849   0FB1 DA            push d
1850   0FB2 FA FC FF      lea d, [bp + -4] ; $yp
1851   0FB5 32            mov bl, [d]
1852   0FB6 A7 00         mov bh, 0
1853   0FB8 38 00 00      mov c, 0
1854   0FBB E7            pop d
1855   0FBC FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
1856   0FC0 DA            push d
1857   0FC1 FA FB FF      lea d, [bp + -5] ; $xp
1858   0FC4 32            mov bl, [d]
1859   0FC5 A7 00         mov bh, 0
1860   0FC7 38 00 00      mov c, 0
1861   0FCA E7            pop d
1862   0FCB FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1863   0FCF E4            pop a
1864   0FD0 2A            mov b, [d]
1865   0FD1 38 00 00      mov c, 0
1866   0FD4             ; --- START RELATIONAL
1867   0FD4 D7            push a
1868   0FD5 11            mov a, b
1869   0FD6 FD 2E 00 02   mov32 cb, $00000200
1869   0FDA 00 00 
1870   0FDC B0            cmp a, b
1871   0FDD FD 75         slu ; < (unsigned)
1872   0FDF E4            pop a
1873   0FE0             ; --- END RELATIONAL
1874   0FE0 C0 00 00      cmp b, 0
1875   0FE3 C6 60 10      je _if60_exit
1876   0FE6             _if60_TRUE:
1877   0FE6             ; map[yp][xp] = map[yp][xp] + (1 << 8); 
1878   0FE6 3B D7 67      mov d, _map_data ; $map
1879   0FE9 D7            push a
1880   0FEA DA            push d
1881   0FEB FA FC FF      lea d, [bp + -4] ; $yp
1882   0FEE 32            mov bl, [d]
1883   0FEF A7 00         mov bh, 0
1884   0FF1 38 00 00      mov c, 0
1885   0FF4 E7            pop d
1886   0FF5 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
1887   0FF9 DA            push d
1888   0FFA FA FB FF      lea d, [bp + -5] ; $xp
1889   0FFD 32            mov bl, [d]
1890   0FFE A7 00         mov bh, 0
1891   1000 38 00 00      mov c, 0
1892   1003 E7            pop d
1893   1004 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1894   1008 E4            pop a
1895   1009 DA            push d
1896   100A 3B D7 67      mov d, _map_data ; $map
1897   100D D7            push a
1898   100E DA            push d
1899   100F FA FC FF      lea d, [bp + -4] ; $yp
1900   1012 32            mov bl, [d]
1901   1013 A7 00         mov bh, 0
1902   1015 38 00 00      mov c, 0
1903   1018 E7            pop d
1904   1019 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
1905   101D DA            push d
1906   101E FA FB FF      lea d, [bp + -5] ; $xp
1907   1021 32            mov bl, [d]
1908   1022 A7 00         mov bh, 0
1909   1024 38 00 00      mov c, 0
1910   1027 E7            pop d
1911   1028 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1912   102C E4            pop a
1913   102D 2A            mov b, [d]
1914   102E 38 00 00      mov c, 0
1915   1031             ; --- START TERMS
1916   1031 D7            push a
1917   1032 11            mov a, b
1918   1033 FD 2E 01 00   mov32 cb, $00000001
1918   1037 00 00 
1919   1039             ; --- START SHIFT
1920   1039 D7            push a
1921   103A 11            mov a, b
1922   103B FD 2E 08 00   mov32 cb, $00000008
1922   103F 00 00 
1923   1041 FD 39         mov c, b
1924   1043 9D            shl a, cl
1925   1044 27            mov b, a
1926   1045 E4            pop a
1927   1046             ; --- END SHIFT
1928   1046 56            add b, a
1929   1047 E4            pop a
1930   1048             ; --- END TERMS
1931   1048 E7            pop d
1932   1049 FD 43         mov [d], b
1933   104B             ; klingons_left++; 
1934   104B 3B 87 68      mov d, _klingons_left ; $klingons_left
1935   104E 32            mov bl, [d]
1936   104F A7 00         mov bh, 0
1937   1051 38 00 00      mov c, 0
1938   1054 FD 77         inc b
1939   1056 3B 87 68      mov d, _klingons_left ; $klingons_left
1940   1059 FD 3E         mov [d], bl
1941   105B FD 7D         dec b
1942   105D 0A 60 10      jmp _if60_exit
1943   1060             _if60_exit:
1944   1060             ; map[yp][xp] = map[yp][xp] + (1 << 4); 
1945   1060 3B D7 67      mov d, _map_data ; $map
1946   1063 D7            push a
1947   1064 DA            push d
1948   1065 FA FC FF      lea d, [bp + -4] ; $yp
1949   1068 32            mov bl, [d]
1950   1069 A7 00         mov bh, 0
1951   106B 38 00 00      mov c, 0
1952   106E E7            pop d
1953   106F FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
1954   1073 DA            push d
1955   1074 FA FB FF      lea d, [bp + -5] ; $xp
1956   1077 32            mov bl, [d]
1957   1078 A7 00         mov bh, 0
1958   107A 38 00 00      mov c, 0
1959   107D E7            pop d
1960   107E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1961   1082 E4            pop a
1962   1083 DA            push d
1963   1084 3B D7 67      mov d, _map_data ; $map
1964   1087 D7            push a
1965   1088 DA            push d
1966   1089 FA FC FF      lea d, [bp + -4] ; $yp
1967   108C 32            mov bl, [d]
1968   108D A7 00         mov bh, 0
1969   108F 38 00 00      mov c, 0
1970   1092 E7            pop d
1971   1093 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
1972   1097 DA            push d
1973   1098 FA FB FF      lea d, [bp + -5] ; $xp
1974   109B 32            mov bl, [d]
1975   109C A7 00         mov bh, 0
1976   109E 38 00 00      mov c, 0
1977   10A1 E7            pop d
1978   10A2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1979   10A6 E4            pop a
1980   10A7 2A            mov b, [d]
1981   10A8 38 00 00      mov c, 0
1982   10AB             ; --- START TERMS
1983   10AB D7            push a
1984   10AC 11            mov a, b
1985   10AD FD 2E 01 00   mov32 cb, $00000001
1985   10B1 00 00 
1986   10B3             ; --- START SHIFT
1987   10B3 D7            push a
1988   10B4 11            mov a, b
1989   10B5 FD 2E 04 00   mov32 cb, $00000004
1989   10B9 00 00 
1990   10BB FD 39         mov c, b
1991   10BD 9D            shl a, cl
1992   10BE 27            mov b, a
1993   10BF E4            pop a
1994   10C0             ; --- END SHIFT
1995   10C0 56            add b, a
1996   10C1 E4            pop a
1997   10C2             ; --- END TERMS
1998   10C2 E7            pop d
1999   10C3 FD 43         mov [d], b
2000   10C5             ; starbases_left++; 
2001   10C5 3B B1 67      mov d, _starbases_left ; $starbases_left
2002   10C8 32            mov bl, [d]
2003   10C9 A7 00         mov bh, 0
2004   10CB 38 00 00      mov c, 0
2005   10CE FD 77         inc b
2006   10D0 3B B1 67      mov d, _starbases_left ; $starbases_left
2007   10D3 FD 3E         mov [d], bl
2008   10D5 FD 7D         dec b
2009   10D7 0A DA 10      jmp _if59_exit
2010   10DA             _if59_exit:
2011   10DA             ; total_klingons = klingons_left; 
2012   10DA 3B 86 68      mov d, _total_klingons ; $total_klingons
2013   10DD DA            push d
2014   10DE 3B 87 68      mov d, _klingons_left ; $klingons_left
2015   10E1 32            mov bl, [d]
2016   10E2 A7 00         mov bh, 0
2017   10E4 38 00 00      mov c, 0
2018   10E7 E7            pop d
2019   10E8 FD 3E         mov [d], bl
2020   10EA             ; if (starbases_left != 1) { 
2021   10EA             _if61_cond:
2022   10EA 3B B1 67      mov d, _starbases_left ; $starbases_left
2023   10ED 32            mov bl, [d]
2024   10EE A7 00         mov bh, 0
2025   10F0 38 00 00      mov c, 0
2026   10F3             ; --- START RELATIONAL
2027   10F3 D7            push a
2028   10F4 11            mov a, b
2029   10F5 FD 2E 01 00   mov32 cb, $00000001
2029   10F9 00 00 
2030   10FB B0            cmp a, b
2031   10FC FD 72         sneq ; !=
2032   10FE E4            pop a
2033   10FF             ; --- END RELATIONAL
2034   10FF C0 00 00      cmp b, 0
2035   1102 C6 34 11      je _if61_exit
2036   1105             _if61_TRUE:
2037   1105             ; strcpy(plural_2, "s"); 
2038   1105             ; --- START FUNCTION CALL
2039   1105 26 2D 6D      mov b, _s57 ; "s"
2040   1108 FD AB         swp b
2041   110A D8            push b
2042   110B 3B AA 69      mov d, _plural_2_data ; $plural_2
2043   110E 2D            mov b, d
2044   110F 38 00 00      mov c, 0
2045   1112 FD AB         swp b
2046   1114 D8            push b
2047   1115 07 74 59      call strcpy
2048   1118 51 04 00      add sp, 4
2049   111B             ; --- END FUNCTION CALL
2050   111B             ; strcpy(plural, "are"); 
2051   111B             ; --- START FUNCTION CALL
2052   111B 26 BA 6B      mov b, _s30 ; "are"
2053   111E FD AB         swp b
2054   1120 D8            push b
2055   1121 3B AD 69      mov d, _plural_data ; $plural
2056   1124 2D            mov b, d
2057   1125 38 00 00      mov c, 0
2058   1128 FD AB         swp b
2059   112A D8            push b
2060   112B 07 74 59      call strcpy
2061   112E 51 04 00      add sp, 4
2062   1131             ; --- END FUNCTION CALL
2063   1131 0A 34 11      jmp _if61_exit
2064   1134             _if61_exit:
2065   1134             ; getchar(); 
2066   1134             ; --- START FUNCTION CALL
2067   1134 07 D3 58      call getchar
2068   1137 F9            leave
2069   1138 09            ret
2070   1139             
2071   1139             place_ship:
2072   1139 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2073   113C             ; quad[FROM_FIXED00(ship_y) - 1][FROM_FIXED00(ship_x) - 1] = 		4      ; 
2074   113C 3B AF 68      mov d, _quad_data ; $quad
2075   113F D7            push a
2076   1140 DA            push d
2077   1141             ; --- START FUNCTION CALL
2078   1141 3B A9 68      mov d, _ship_y ; $ship_y
2079   1144 2A            mov b, [d]
2080   1145 38 00 00      mov c, 0
2081   1148 FD AB         swp b
2082   114A D8            push b
2083   114B 07 72 04      call FROM_FIXED00
2084   114E 51 02 00      add sp, 2
2085   1151             ; --- END FUNCTION CALL
2086   1151             ; --- START TERMS
2087   1151 D7            push a
2088   1152 11            mov a, b
2089   1153 FD 2E 01 00   mov32 cb, $00000001
2089   1157 00 00 
2090   1159 60            sub a, b
2091   115A 27            mov b, a
2092   115B E4            pop a
2093   115C             ; --- END TERMS
2094   115C E7            pop d
2095   115D FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
2096   1161 DA            push d
2097   1162             ; --- START FUNCTION CALL
2098   1162 3B AB 68      mov d, _ship_x ; $ship_x
2099   1165 2A            mov b, [d]
2100   1166 38 00 00      mov c, 0
2101   1169 FD AB         swp b
2102   116B D8            push b
2103   116C 07 72 04      call FROM_FIXED00
2104   116F 51 02 00      add sp, 2
2105   1172             ; --- END FUNCTION CALL
2106   1172             ; --- START TERMS
2107   1172 D7            push a
2108   1173 11            mov a, b
2109   1174 FD 2E 01 00   mov32 cb, $00000001
2109   1178 00 00 
2110   117A 60            sub a, b
2111   117B 27            mov b, a
2112   117C E4            pop a
2113   117D             ; --- END TERMS
2114   117D E7            pop d
2115   117E 5A            add d, b
2116   117F E4            pop a
2117   1180 DA            push d
2118   1181 FD 2E 04 00   mov32 cb, $00000004
2118   1185 00 00 
2119   1187 E7            pop d
2120   1188 FD 3E         mov [d], bl
2121   118A F9            leave
2122   118B 09            ret
2123   118C             
2124   118C             new_quadrant:
2125   118C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2126   118F             ; int i; 
2127   118F 52 02 00      sub sp, 2
2128   1192             ; unsigned int         tmp; 
2129   1192 52 02 00      sub sp, 2
2130   1195             ; struct klingon *k; 
2131   1195 52 02 00      sub sp, 2
2132   1198             ; k = &kdata; 
2133   1198 FA FB FF      lea d, [bp + -5] ; $k
2134   119B DA            push d
2135   119C 3B 79 68      mov d, _kdata_data ; $kdata
2136   119F 2D            mov b, d
2137   11A0 E7            pop d
2138   11A1 FD 43         mov [d], b
2139   11A3             ; klingons = 0; 
2140   11A3 3B 85 68      mov d, _klingons ; $klingons
2141   11A6 DA            push d
2142   11A7 FD 2E 00 00   mov32 cb, $00000000
2142   11AB 00 00 
2143   11AD E7            pop d
2144   11AE FD 3E         mov [d], bl
2145   11B0             ; starbases = 0; 
2146   11B0 3B AE 67      mov d, _starbases ; $starbases
2147   11B3 DA            push d
2148   11B4 FD 2E 00 00   mov32 cb, $00000000
2148   11B8 00 00 
2149   11BA E7            pop d
2150   11BB FD 3E         mov [d], bl
2151   11BD             ; stars = 0; 
2152   11BD 3B 90 68      mov d, _stars ; $stars
2153   11C0 DA            push d
2154   11C1 FD 2E 00 00   mov32 cb, $00000000
2154   11C5 00 00 
2155   11C7 E7            pop d
2156   11C8 FD 3E         mov [d], bl
2157   11CA             ; d4 = get_rand(50) - 1; 
2158   11CA 3B A7 68      mov d, _d4 ; $d4
2159   11CD DA            push d
2160   11CE             ; --- START FUNCTION CALL
2161   11CE FD 2E 32 00   mov32 cb, $00000032
2161   11D2 00 00 
2162   11D4 FD AB         swp b
2163   11D6 D8            push b
2164   11D7 07 91 04      call get_rand
2165   11DA 51 02 00      add sp, 2
2166   11DD             ; --- END FUNCTION CALL
2167   11DD             ; --- START TERMS
2168   11DD D7            push a
2169   11DE 11            mov a, b
2170   11DF FD 2E 01 00   mov32 cb, $00000001
2170   11E3 00 00 
2171   11E5 60            sub a, b
2172   11E6 27            mov b, a
2173   11E7 E4            pop a
2174   11E8             ; --- END TERMS
2175   11E8 E7            pop d
2176   11E9 FD 43         mov [d], b
2177   11EB             ; map[quad_y][quad_x] = map[quad_y][quad_x] |  0x1000		/* Set if this sector was mapped */           ; 
2178   11EB 3B D7 67      mov d, _map_data ; $map
2179   11EE D7            push a
2180   11EF DA            push d
2181   11F0 3B 8A 68      mov d, _quad_y ; $quad_y
2182   11F3 2A            mov b, [d]
2183   11F4 38 00 00      mov c, 0
2184   11F7 E7            pop d
2185   11F8 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
2186   11FC DA            push d
2187   11FD 3B 8C 68      mov d, _quad_x ; $quad_x
2188   1200 2A            mov b, [d]
2189   1201 38 00 00      mov c, 0
2190   1204 E7            pop d
2191   1205 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2192   1209 E4            pop a
2193   120A DA            push d
2194   120B 3B D7 67      mov d, _map_data ; $map
2195   120E D7            push a
2196   120F DA            push d
2197   1210 3B 8A 68      mov d, _quad_y ; $quad_y
2198   1213 2A            mov b, [d]
2199   1214 38 00 00      mov c, 0
2200   1217 E7            pop d
2201   1218 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
2202   121C DA            push d
2203   121D 3B 8C 68      mov d, _quad_x ; $quad_x
2204   1220 2A            mov b, [d]
2205   1221 38 00 00      mov c, 0
2206   1224 E7            pop d
2207   1225 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2208   1229 E4            pop a
2209   122A 2A            mov b, [d]
2210   122B 38 00 00      mov c, 0
2211   122E D7            push a
2212   122F 11            mov a, b
2213   1230 FD 2E 00 10   mov32 cb, $00001000
2213   1234 00 00 
2214   1236 FD 70         or b, a ; |
2215   1238 E4            pop a
2216   1239 E7            pop d
2217   123A FD 43         mov [d], b
2218   123C             ; if (quad_y >= 1 && quad_y <= 8 && quad_x >= 1 && quad_x <= 8) { 
2219   123C             _if62_cond:
2220   123C 3B 8A 68      mov d, _quad_y ; $quad_y
2221   123F 2A            mov b, [d]
2222   1240 38 00 00      mov c, 0
2223   1243             ; --- START RELATIONAL
2224   1243 D7            push a
2225   1244 11            mov a, b
2226   1245 FD 2E 01 00   mov32 cb, $00000001
2226   1249 00 00 
2227   124B B0            cmp a, b
2228   124C FD 80         sge ; >=
2229   124E E4            pop a
2230   124F             ; --- END RELATIONAL
2231   124F             ; --- START LOGICAL AND
2232   124F D7            push a
2233   1250 11            mov a, b
2234   1251 3B 8A 68      mov d, _quad_y ; $quad_y
2235   1254 2A            mov b, [d]
2236   1255 38 00 00      mov c, 0
2237   1258             ; --- START RELATIONAL
2238   1258 D7            push a
2239   1259 11            mov a, b
2240   125A FD 2E 08 00   mov32 cb, $00000008
2240   125E 00 00 
2241   1260 B0            cmp a, b
2242   1261 FD 74         sle ; <= (signed)
2243   1263 E4            pop a
2244   1264             ; --- END RELATIONAL
2245   1264 FD A7         sand a, b
2246   1266 11            mov a, b
2247   1267 3B 8C 68      mov d, _quad_x ; $quad_x
2248   126A 2A            mov b, [d]
2249   126B 38 00 00      mov c, 0
2250   126E             ; --- START RELATIONAL
2251   126E D7            push a
2252   126F 11            mov a, b
2253   1270 FD 2E 01 00   mov32 cb, $00000001
2253   1274 00 00 
2254   1276 B0            cmp a, b
2255   1277 FD 80         sge ; >=
2256   1279 E4            pop a
2257   127A             ; --- END RELATIONAL
2258   127A FD A7         sand a, b
2259   127C 11            mov a, b
2260   127D 3B 8C 68      mov d, _quad_x ; $quad_x
2261   1280 2A            mov b, [d]
2262   1281 38 00 00      mov c, 0
2263   1284             ; --- START RELATIONAL
2264   1284 D7            push a
2265   1285 11            mov a, b
2266   1286 FD 2E 08 00   mov32 cb, $00000008
2266   128A 00 00 
2267   128C B0            cmp a, b
2268   128D FD 74         sle ; <= (signed)
2269   128F E4            pop a
2270   1290             ; --- END RELATIONAL
2271   1290 FD A7         sand a, b
2272   1292 E4            pop a
2273   1293             ; --- END LOGICAL AND
2274   1293 C0 00 00      cmp b, 0
2275   1296 C6 17 13      je _if62_exit
2276   1299             _if62_TRUE:
2277   1299             ; quadrant_name(0, quad_y, quad_x); 
2278   1299             ; --- START FUNCTION CALL
2279   1299 3B 8C 68      mov d, _quad_x ; $quad_x
2280   129C 2A            mov b, [d]
2281   129D 38 00 00      mov c, 0
2282   12A0 DD            push bl
2283   12A1 3B 8A 68      mov d, _quad_y ; $quad_y
2284   12A4 2A            mov b, [d]
2285   12A5 38 00 00      mov c, 0
2286   12A8 DD            push bl
2287   12A9 FD 2E 00 00   mov32 cb, $00000000
2287   12AD 00 00 
2288   12AF DD            push bl
2289   12B0 07 EB 54      call quadrant_name
2290   12B3 51 03 00      add sp, 3
2291   12B6             ; --- END FUNCTION CALL
2292   12B6             ; if (TO_FIXED(time_start) != stardate) 
2293   12B6             _if63_cond:
2294   12B6             ; --- START FUNCTION CALL
2295   12B6 3B 91 68      mov d, _time_start ; $time_start
2296   12B9 2A            mov b, [d]
2297   12BA 38 00 00      mov c, 0
2298   12BD FD AB         swp b
2299   12BF D8            push b
2300   12C0 07 17 04      call TO_FIXED
2301   12C3 51 02 00      add sp, 2
2302   12C6             ; --- END FUNCTION CALL
2303   12C6             ; --- START RELATIONAL
2304   12C6 D7            push a
2305   12C7 11            mov a, b
2306   12C8 3B AD 68      mov d, _stardate ; $stardate
2307   12CB 2A            mov b, [d]
2308   12CC 38 00 00      mov c, 0
2309   12CF B0            cmp a, b
2310   12D0 FD 72         sneq ; !=
2311   12D2 E4            pop a
2312   12D3             ; --- END RELATIONAL
2313   12D3 C0 00 00      cmp b, 0
2314   12D6 C6 F2 12      je _if63_else
2315   12D9             _if63_TRUE:
2316   12D9             ; printf("Now entering %s quadrant...\n\n", quadname); 
2317   12D9             ; --- START FUNCTION CALL
2318   12D9 3B EF 68      mov d, _quadname_data ; $quadname
2319   12DC 2D            mov b, d
2320   12DD 38 00 00      mov c, 0
2321   12E0 FD AB         swp b
2322   12E2 D8            push b
2323   12E3 26 2F 6D      mov b, _s58 ; "Now entering %s quadrant...\n\n"
2324   12E6 FD AB         swp b
2325   12E8 D8            push b
2326   12E9 07 2C 5B      call printf
2327   12EC 51 04 00      add sp, 4
2328   12EF             ; --- END FUNCTION CALL
2329   12EF 0A 14 13      jmp _if63_exit
2330   12F2             _if63_else:
2331   12F2             ; puts("\nYour mission begins with your starship located"); 
2332   12F2             ; --- START FUNCTION CALL
2333   12F2 26 4D 6D      mov b, _s59 ; "\nYour mission begins with your starship located"
2334   12F5 FD AB         swp b
2335   12F7 D8            push b
2336   12F8 07 19 64      call puts
2337   12FB 51 02 00      add sp, 2
2338   12FE             ; --- END FUNCTION CALL
2339   12FE             ; printf("in the galactic quadrant %s.\n\n", quadname); 
2340   12FE             ; --- START FUNCTION CALL
2341   12FE 3B EF 68      mov d, _quadname_data ; $quadname
2342   1301 2D            mov b, d
2343   1302 38 00 00      mov c, 0
2344   1305 FD AB         swp b
2345   1307 D8            push b
2346   1308 26 7D 6D      mov b, _s60 ; "in the galactic quadrant %s.\n\n"
2347   130B FD AB         swp b
2348   130D D8            push b
2349   130E 07 2C 5B      call printf
2350   1311 51 04 00      add sp, 4
2351   1314             ; --- END FUNCTION CALL
2352   1314             _if63_exit:
2353   1314 0A 17 13      jmp _if62_exit
2354   1317             _if62_exit:
2355   1317             ; tmp = map[quad_y][quad_x]; 
2356   1317 FA FD FF      lea d, [bp + -3] ; $tmp
2357   131A DA            push d
2358   131B 3B D7 67      mov d, _map_data ; $map
2359   131E D7            push a
2360   131F DA            push d
2361   1320 3B 8A 68      mov d, _quad_y ; $quad_y
2362   1323 2A            mov b, [d]
2363   1324 38 00 00      mov c, 0
2364   1327 E7            pop d
2365   1328 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
2366   132C DA            push d
2367   132D 3B 8C 68      mov d, _quad_x ; $quad_x
2368   1330 2A            mov b, [d]
2369   1331 38 00 00      mov c, 0
2370   1334 E7            pop d
2371   1335 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2372   1339 E4            pop a
2373   133A 2A            mov b, [d]
2374   133B 38 00 00      mov c, 0
2375   133E E7            pop d
2376   133F FD 43         mov [d], b
2377   1341             ; klingons = (tmp >> 8) & 0x0F; 
2378   1341 3B 85 68      mov d, _klingons ; $klingons
2379   1344 DA            push d
2380   1345 FA FD FF      lea d, [bp + -3] ; $tmp
2381   1348 2A            mov b, [d]
2382   1349 38 00 00      mov c, 0
2383   134C             ; --- START SHIFT
2384   134C D7            push a
2385   134D 11            mov a, b
2386   134E FD 2E 08 00   mov32 cb, $00000008
2386   1352 00 00 
2387   1354 FD 39         mov c, b
2388   1356 A1            shr a, cl
2389   1357 27            mov b, a
2390   1358 E4            pop a
2391   1359             ; --- END SHIFT
2392   1359 D7            push a
2393   135A 11            mov a, b
2394   135B FD 2E 0F 00   mov32 cb, $0000000f
2394   135F 00 00 
2395   1361 FD 92         and b, a ; &
2396   1363 E4            pop a
2397   1364 E7            pop d
2398   1365 FD 3E         mov [d], bl
2399   1367             ; starbases = (tmp >> 4) & 0x0F; 
2400   1367 3B AE 67      mov d, _starbases ; $starbases
2401   136A DA            push d
2402   136B FA FD FF      lea d, [bp + -3] ; $tmp
2403   136E 2A            mov b, [d]
2404   136F 38 00 00      mov c, 0
2405   1372             ; --- START SHIFT
2406   1372 D7            push a
2407   1373 11            mov a, b
2408   1374 FD 2E 04 00   mov32 cb, $00000004
2408   1378 00 00 
2409   137A FD 39         mov c, b
2410   137C A1            shr a, cl
2411   137D 27            mov b, a
2412   137E E4            pop a
2413   137F             ; --- END SHIFT
2414   137F D7            push a
2415   1380 11            mov a, b
2416   1381 FD 2E 0F 00   mov32 cb, $0000000f
2416   1385 00 00 
2417   1387 FD 92         and b, a ; &
2418   1389 E4            pop a
2419   138A E7            pop d
2420   138B FD 3E         mov [d], bl
2421   138D             ; stars = tmp & 0x0F; 
2422   138D 3B 90 68      mov d, _stars ; $stars
2423   1390 DA            push d
2424   1391 FA FD FF      lea d, [bp + -3] ; $tmp
2425   1394 2A            mov b, [d]
2426   1395 38 00 00      mov c, 0
2427   1398 D7            push a
2428   1399 11            mov a, b
2429   139A FD 2E 0F 00   mov32 cb, $0000000f
2429   139E 00 00 
2430   13A0 FD 92         and b, a ; &
2431   13A2 E4            pop a
2432   13A3 E7            pop d
2433   13A4 FD 3E         mov [d], bl
2434   13A6             ; if (klingons > 0) { 
2435   13A6             _if64_cond:
2436   13A6 3B 85 68      mov d, _klingons ; $klingons
2437   13A9 32            mov bl, [d]
2438   13AA A7 00         mov bh, 0
2439   13AC 38 00 00      mov c, 0
2440   13AF             ; --- START RELATIONAL
2441   13AF D7            push a
2442   13B0 11            mov a, b
2443   13B1 FD 2E 00 00   mov32 cb, $00000000
2443   13B5 00 00 
2444   13B7 B0            cmp a, b
2445   13B8 FD 81         sgu ; > (unsigned)
2446   13BA E4            pop a
2447   13BB             ; --- END RELATIONAL
2448   13BB C0 00 00      cmp b, 0
2449   13BE C6 F8 13      je _if64_exit
2450   13C1             _if64_TRUE:
2451   13C1             ; printf("Combat Area  Condition Red\n"); 
2452   13C1             ; --- START FUNCTION CALL
2453   13C1 26 9C 6D      mov b, _s61 ; "Combat Area  Condition Red\n"
2454   13C4 FD AB         swp b
2455   13C6 D8            push b
2456   13C7 07 2C 5B      call printf
2457   13CA 51 02 00      add sp, 2
2458   13CD             ; --- END FUNCTION CALL
2459   13CD             ; if (shield < 200) 
2460   13CD             _if65_cond:
2461   13CD 3B 8E 68      mov d, _shield ; $shield
2462   13D0 2A            mov b, [d]
2463   13D1 38 00 00      mov c, 0
2464   13D4             ; --- START RELATIONAL
2465   13D4 D7            push a
2466   13D5 11            mov a, b
2467   13D6 FD 2E C8 00   mov32 cb, $000000c8
2467   13DA 00 00 
2468   13DC B0            cmp a, b
2469   13DD FD 73         slt ; < (signed)
2470   13DF E4            pop a
2471   13E0             ; --- END RELATIONAL
2472   13E0 C0 00 00      cmp b, 0
2473   13E3 C6 F5 13      je _if65_exit
2474   13E6             _if65_TRUE:
2475   13E6             ; printf("Shields Dangerously Low\n"); 
2476   13E6             ; --- START FUNCTION CALL
2477   13E6 26 B8 6D      mov b, _s62 ; "Shields Dangerously Low\n"
2478   13E9 FD AB         swp b
2479   13EB D8            push b
2480   13EC 07 2C 5B      call printf
2481   13EF 51 02 00      add sp, 2
2482   13F2             ; --- END FUNCTION CALL
2483   13F2 0A F5 13      jmp _if65_exit
2484   13F5             _if65_exit:
2485   13F5 0A F8 13      jmp _if64_exit
2486   13F8             _if64_exit:
2487   13F8             ; for (i = 1; i <= 3; i++) { 
2488   13F8             _for66_init:
2489   13F8 FA FF FF      lea d, [bp + -1] ; $i
2490   13FB DA            push d
2491   13FC FD 2E 01 00   mov32 cb, $00000001
2491   1400 00 00 
2492   1402 E7            pop d
2493   1403 FD 43         mov [d], b
2494   1405             _for66_cond:
2495   1405 FA FF FF      lea d, [bp + -1] ; $i
2496   1408 2A            mov b, [d]
2497   1409 38 00 00      mov c, 0
2498   140C             ; --- START RELATIONAL
2499   140C D7            push a
2500   140D 11            mov a, b
2501   140E FD 2E 03 00   mov32 cb, $00000003
2501   1412 00 00 
2502   1414 B0            cmp a, b
2503   1415 FD 74         sle ; <= (signed)
2504   1417 E4            pop a
2505   1418             ; --- END RELATIONAL
2506   1418 C0 00 00      cmp b, 0
2507   141B C6 79 14      je _for66_exit
2508   141E             _for66_block:
2509   141E             ; k->y = 0; 
2510   141E FA FB FF      lea d, [bp + -5] ; $k
2511   1421 FD 2A         mov d, [d]
2512   1423 58 00 00      add d, 0
2513   1426 DA            push d
2514   1427 FD 2E 00 00   mov32 cb, $00000000
2514   142B 00 00 
2515   142D E7            pop d
2516   142E FD 3E         mov [d], bl
2517   1430             ; k->x = 0; 
2518   1430 FA FB FF      lea d, [bp + -5] ; $k
2519   1433 FD 2A         mov d, [d]
2520   1435 58 01 00      add d, 1
2521   1438 DA            push d
2522   1439 FD 2E 00 00   mov32 cb, $00000000
2522   143D 00 00 
2523   143F E7            pop d
2524   1440 FD 3E         mov [d], bl
2525   1442             ; k->energy = 0; 
2526   1442 FA FB FF      lea d, [bp + -5] ; $k
2527   1445 FD 2A         mov d, [d]
2528   1447 58 02 00      add d, 2
2529   144A DA            push d
2530   144B FD 2E 00 00   mov32 cb, $00000000
2530   144F 00 00 
2531   1451 E7            pop d
2532   1452 FD 43         mov [d], b
2533   1454             ; k++; 
2534   1454 FA FB FF      lea d, [bp + -5] ; $k
2535   1457 2A            mov b, [d]
2536   1458 38 00 00      mov c, 0
2537   145B 11            mov a, b
2538   145C FD 77         inc b
2539   145E FD 77         inc b
2540   1460 FA FB FF      lea d, [bp + -5] ; $k
2541   1463 FD 43         mov [d], b
2542   1465 27            mov b, a
2543   1466             _for66_update:
2544   1466 FA FF FF      lea d, [bp + -1] ; $i
2545   1469 2A            mov b, [d]
2546   146A 38 00 00      mov c, 0
2547   146D 11            mov a, b
2548   146E FD 77         inc b
2549   1470 FA FF FF      lea d, [bp + -1] ; $i
2550   1473 FD 43         mov [d], b
2551   1475 27            mov b, a
2552   1476 0A 05 14      jmp _for66_cond
2553   1479             _for66_exit:
2554   1479             ; memset(quad, 		0       , 64); 
2555   1479             ; --- START FUNCTION CALL
2556   1479 FD 2E 40 00   mov32 cb, $00000040
2556   147D 00 00 
2557   147F FD AB         swp b
2558   1481 D8            push b
2559   1482 FD 2E 00 00   mov32 cb, $00000000
2559   1486 00 00 
2560   1488 DD            push bl
2561   1489 3B AF 68      mov d, _quad_data ; $quad
2562   148C 2D            mov b, d
2563   148D 38 00 00      mov c, 0
2564   1490 FD AB         swp b
2565   1492 D8            push b
2566   1493 07 37 64      call memset
2567   1496 51 05 00      add sp, 5
2568   1499             ; --- END FUNCTION CALL
2569   1499             ; place_ship(); 
2570   1499             ; --- START FUNCTION CALL
2571   1499 07 39 11      call place_ship
2572   149C             ; if (klingons > 0) { 
2573   149C             _if67_cond:
2574   149C 3B 85 68      mov d, _klingons ; $klingons
2575   149F 32            mov bl, [d]
2576   14A0 A7 00         mov bh, 0
2577   14A2 38 00 00      mov c, 0
2578   14A5             ; --- START RELATIONAL
2579   14A5 D7            push a
2580   14A6 11            mov a, b
2581   14A7 FD 2E 00 00   mov32 cb, $00000000
2581   14AB 00 00 
2582   14AD B0            cmp a, b
2583   14AE FD 81         sgu ; > (unsigned)
2584   14B0 E4            pop a
2585   14B1             ; --- END RELATIONAL
2586   14B1 C0 00 00      cmp b, 0
2587   14B4 C6 6A 15      je _if67_exit
2588   14B7             _if67_TRUE:
2589   14B7             ; k = kdata; 
2590   14B7 FA FB FF      lea d, [bp + -5] ; $k
2591   14BA DA            push d
2592   14BB 3B 79 68      mov d, _kdata_data ; $kdata
2593   14BE 2D            mov b, d
2594   14BF 38 00 00      mov c, 0
2595   14C2 E7            pop d
2596   14C3 FD 43         mov [d], b
2597   14C5             ; for (i = 0; i < klingons; i++) { 
2598   14C5             _for68_init:
2599   14C5 FA FF FF      lea d, [bp + -1] ; $i
2600   14C8 DA            push d
2601   14C9 FD 2E 00 00   mov32 cb, $00000000
2601   14CD 00 00 
2602   14CF E7            pop d
2603   14D0 FD 43         mov [d], b
2604   14D2             _for68_cond:
2605   14D2 FA FF FF      lea d, [bp + -1] ; $i
2606   14D5 2A            mov b, [d]
2607   14D6 38 00 00      mov c, 0
2608   14D9             ; --- START RELATIONAL
2609   14D9 D7            push a
2610   14DA 11            mov a, b
2611   14DB 3B 85 68      mov d, _klingons ; $klingons
2612   14DE 32            mov bl, [d]
2613   14DF A7 00         mov bh, 0
2614   14E1 38 00 00      mov c, 0
2615   14E4 B0            cmp a, b
2616   14E5 FD 73         slt ; < (signed)
2617   14E7 E4            pop a
2618   14E8             ; --- END RELATIONAL
2619   14E8 C0 00 00      cmp b, 0
2620   14EB C6 67 15      je _for68_exit
2621   14EE             _for68_block:
2622   14EE             ; find_set_empty_place(	3         , k->y, k->x); 
2623   14EE             ; --- START FUNCTION CALL
2624   14EE FA FB FF      lea d, [bp + -5] ; $k
2625   14F1 FD 2A         mov d, [d]
2626   14F3 58 01 00      add d, 1
2627   14F6 32            mov bl, [d]
2628   14F7 A7 00         mov bh, 0
2629   14F9 38 00 00      mov c, 0
2630   14FC FD AB         swp b
2631   14FE D8            push b
2632   14FF FA FB FF      lea d, [bp + -5] ; $k
2633   1502 FD 2A         mov d, [d]
2634   1504 58 00 00      add d, 0
2635   1507 32            mov bl, [d]
2636   1508 A7 00         mov bh, 0
2637   150A 38 00 00      mov c, 0
2638   150D FD AB         swp b
2639   150F D8            push b
2640   1510 FD 2E 03 00   mov32 cb, $00000003
2640   1514 00 00 
2641   1516 DD            push bl
2642   1517 07 9B 53      call find_set_empty_place
2643   151A 51 05 00      add sp, 5
2644   151D             ; --- END FUNCTION CALL
2645   151D             ; k->energy = 100 + get_rand(200); 
2646   151D FA FB FF      lea d, [bp + -5] ; $k
2647   1520 FD 2A         mov d, [d]
2648   1522 58 02 00      add d, 2
2649   1525 DA            push d
2650   1526 FD 2E 64 00   mov32 cb, $00000064
2650   152A 00 00 
2651   152C             ; --- START TERMS
2652   152C D7            push a
2653   152D 11            mov a, b
2654   152E             ; --- START FUNCTION CALL
2655   152E FD 2E C8 00   mov32 cb, $000000c8
2655   1532 00 00 
2656   1534 FD AB         swp b
2657   1536 D8            push b
2658   1537 07 91 04      call get_rand
2659   153A 51 02 00      add sp, 2
2660   153D             ; --- END FUNCTION CALL
2661   153D 56            add b, a
2662   153E E4            pop a
2663   153F             ; --- END TERMS
2664   153F E7            pop d
2665   1540 FD 43         mov [d], b
2666   1542             ; k++; 
2667   1542 FA FB FF      lea d, [bp + -5] ; $k
2668   1545 2A            mov b, [d]
2669   1546 38 00 00      mov c, 0
2670   1549 11            mov a, b
2671   154A FD 77         inc b
2672   154C FD 77         inc b
2673   154E FA FB FF      lea d, [bp + -5] ; $k
2674   1551 FD 43         mov [d], b
2675   1553 27            mov b, a
2676   1554             _for68_update:
2677   1554 FA FF FF      lea d, [bp + -1] ; $i
2678   1557 2A            mov b, [d]
2679   1558 38 00 00      mov c, 0
2680   155B 11            mov a, b
2681   155C FD 77         inc b
2682   155E FA FF FF      lea d, [bp + -1] ; $i
2683   1561 FD 43         mov [d], b
2684   1563 27            mov b, a
2685   1564 0A D2 14      jmp _for68_cond
2686   1567             _for68_exit:
2687   1567 0A 6A 15      jmp _if67_exit
2688   156A             _if67_exit:
2689   156A             ; if (starbases > 0) 
2690   156A             _if69_cond:
2691   156A 3B AE 67      mov d, _starbases ; $starbases
2692   156D 32            mov bl, [d]
2693   156E A7 00         mov bh, 0
2694   1570 38 00 00      mov c, 0
2695   1573             ; --- START RELATIONAL
2696   1573 D7            push a
2697   1574 11            mov a, b
2698   1575 FD 2E 00 00   mov32 cb, $00000000
2698   1579 00 00 
2699   157B B0            cmp a, b
2700   157C FD 7F         sgt ; >
2701   157E E4            pop a
2702   157F             ; --- END RELATIONAL
2703   157F C0 00 00      cmp b, 0
2704   1582 C6 A3 15      je _if69_exit
2705   1585             _if69_TRUE:
2706   1585             ; find_set_empty_place(		2      , &base_y, &base_x); 
2707   1585             ; --- START FUNCTION CALL
2708   1585 3B B0 67      mov d, _base_x ; $base_x
2709   1588 2D            mov b, d
2710   1589 FD AB         swp b
2711   158B D8            push b
2712   158C 3B AF 67      mov d, _base_y ; $base_y
2713   158F 2D            mov b, d
2714   1590 FD AB         swp b
2715   1592 D8            push b
2716   1593 FD 2E 02 00   mov32 cb, $00000002
2716   1597 00 00 
2717   1599 DD            push bl
2718   159A 07 9B 53      call find_set_empty_place
2719   159D 51 05 00      add sp, 5
2720   15A0             ; --- END FUNCTION CALL
2721   15A0 0A A3 15      jmp _if69_exit
2722   15A3             _if69_exit:
2723   15A3             ; for (i = 1; i <= stars; i++) 
2724   15A3             _for70_init:
2725   15A3 FA FF FF      lea d, [bp + -1] ; $i
2726   15A6 DA            push d
2727   15A7 FD 2E 01 00   mov32 cb, $00000001
2727   15AB 00 00 
2728   15AD E7            pop d
2729   15AE FD 43         mov [d], b
2730   15B0             _for70_cond:
2731   15B0 FA FF FF      lea d, [bp + -1] ; $i
2732   15B3 2A            mov b, [d]
2733   15B4 38 00 00      mov c, 0
2734   15B7             ; --- START RELATIONAL
2735   15B7 D7            push a
2736   15B8 11            mov a, b
2737   15B9 3B 90 68      mov d, _stars ; $stars
2738   15BC 32            mov bl, [d]
2739   15BD A7 00         mov bh, 0
2740   15BF 38 00 00      mov c, 0
2741   15C2 B0            cmp a, b
2742   15C3 FD 74         sle ; <= (signed)
2743   15C5 E4            pop a
2744   15C6             ; --- END RELATIONAL
2745   15C6 C0 00 00      cmp b, 0
2746   15C9 C6 FE 15      je _for70_exit
2747   15CC             _for70_block:
2748   15CC             ; find_set_empty_place(		1      ,  0    ,  0    ); 
2749   15CC             ; --- START FUNCTION CALL
2750   15CC FD 2E 00 00   mov32 cb, $00000000
2750   15D0 00 00 
2751   15D2 FD AB         swp b
2752   15D4 D8            push b
2753   15D5 FD 2E 00 00   mov32 cb, $00000000
2753   15D9 00 00 
2754   15DB FD AB         swp b
2755   15DD D8            push b
2756   15DE FD 2E 01 00   mov32 cb, $00000001
2756   15E2 00 00 
2757   15E4 DD            push bl
2758   15E5 07 9B 53      call find_set_empty_place
2759   15E8 51 05 00      add sp, 5
2760   15EB             ; --- END FUNCTION CALL
2761   15EB             _for70_update:
2762   15EB FA FF FF      lea d, [bp + -1] ; $i
2763   15EE 2A            mov b, [d]
2764   15EF 38 00 00      mov c, 0
2765   15F2 11            mov a, b
2766   15F3 FD 77         inc b
2767   15F5 FA FF FF      lea d, [bp + -1] ; $i
2768   15F8 FD 43         mov [d], b
2769   15FA 27            mov b, a
2770   15FB 0A B0 15      jmp _for70_cond
2771   15FE             _for70_exit:
2772   15FE F9            leave
2773   15FF 09            ret
2774   1600             
2775   1600             course_control:
2776   1600 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2777   1603             ; int i; 
2778   1603 52 02 00      sub sp, 2
2779   1606             ; int        c1; 
2780   1606 52 02 00      sub sp, 2
2781   1609             ; int        warp; 
2782   1609 52 02 00      sub sp, 2
2783   160C             ; unsigned int         n; 
2784   160C 52 02 00      sub sp, 2
2785   160F             ; int c2, c3, c4; 
2786   160F 52 02 00      sub sp, 2
2787   1612 52 02 00      sub sp, 2
2788   1615 52 02 00      sub sp, 2
2789   1618             ; int        z1, z2; 
2790   1618 52 02 00      sub sp, 2
2791   161B 52 02 00      sub sp, 2
2792   161E             ; int        x1, x2; 
2793   161E 52 02 00      sub sp, 2
2794   1621 52 02 00      sub sp, 2
2795   1624             ; int        x, y; 
2796   1624 52 02 00      sub sp, 2
2797   1627 52 02 00      sub sp, 2
2798   162A             ; unsigned char        outside = 0;		/* Outside galaxy flag */ 
2799   162A 52 01 00      sub sp, 1
2800   162D             ; --- START LOCAL VAR INITIALIZATION
2801   162D FA E6 FF      lea d, [bp + -26] ; $outside
2802   1630 DA            push d
2803   1631 FD 2E 00 00   mov32 cb, $00000000
2803   1635 00 00 
2804   1637 E7            pop d
2805   1638 FD 43         mov [d], b
2806   163A             ; --- END LOCAL VAR INITIALIZATION
2807   163A             ; unsigned char        quad_y_old; 
2808   163A 52 01 00      sub sp, 1
2809   163D             ; unsigned char        quad_x_old; 
2810   163D 52 01 00      sub sp, 1
2811   1640             ; puts("Course (0-9): " ); 
2812   1640             ; --- START FUNCTION CALL
2813   1640 26 D1 6D      mov b, _s63 ; "Course (0-9): "
2814   1643 FD AB         swp b
2815   1645 D8            push b
2816   1646 07 19 64      call puts
2817   1649 51 02 00      add sp, 2
2818   164C             ; --- END FUNCTION CALL
2819   164C             ; c1 = input_f00(); 
2820   164C FA FD FF      lea d, [bp + -3] ; $c1
2821   164F DA            push d
2822   1650             ; --- START FUNCTION CALL
2823   1650 07 F5 05      call input_f00
2824   1653 E7            pop d
2825   1654 FD 43         mov [d], b
2826   1656             ; if (c1 == 900) 
2827   1656             _if71_cond:
2828   1656 FA FD FF      lea d, [bp + -3] ; $c1
2829   1659 2A            mov b, [d]
2830   165A 38 00 00      mov c, 0
2831   165D             ; --- START RELATIONAL
2832   165D D7            push a
2833   165E 11            mov a, b
2834   165F FD 2E 84 03   mov32 cb, $00000384
2834   1663 00 00 
2835   1665 B0            cmp a, b
2836   1666 FD 71         seq ; ==
2837   1668 E4            pop a
2838   1669             ; --- END RELATIONAL
2839   1669 C0 00 00      cmp b, 0
2840   166C C6 7F 16      je _if71_exit
2841   166F             _if71_TRUE:
2842   166F             ; c1 = 100; 
2843   166F FA FD FF      lea d, [bp + -3] ; $c1
2844   1672 DA            push d
2845   1673 FD 2E 64 00   mov32 cb, $00000064
2845   1677 00 00 
2846   1679 E7            pop d
2847   167A FD 43         mov [d], b
2848   167C 0A 7F 16      jmp _if71_exit
2849   167F             _if71_exit:
2850   167F             ; if (c1 < 0 || c1 > 900) { 
2851   167F             _if72_cond:
2852   167F FA FD FF      lea d, [bp + -3] ; $c1
2853   1682 2A            mov b, [d]
2854   1683 38 00 00      mov c, 0
2855   1686             ; --- START RELATIONAL
2856   1686 D7            push a
2857   1687 11            mov a, b
2858   1688 FD 2E 00 00   mov32 cb, $00000000
2858   168C 00 00 
2859   168E B0            cmp a, b
2860   168F FD 73         slt ; < (signed)
2861   1691 E4            pop a
2862   1692             ; --- END RELATIONAL
2863   1692             ; --- START LOGICAL OR
2864   1692 D7            push a
2865   1693 11            mov a, b
2866   1694 FA FD FF      lea d, [bp + -3] ; $c1
2867   1697 2A            mov b, [d]
2868   1698 38 00 00      mov c, 0
2869   169B             ; --- START RELATIONAL
2870   169B D7            push a
2871   169C 11            mov a, b
2872   169D FD 2E 84 03   mov32 cb, $00000384
2872   16A1 00 00 
2873   16A3 B0            cmp a, b
2874   16A4 FD 7F         sgt ; >
2875   16A6 E4            pop a
2876   16A7             ; --- END RELATIONAL
2877   16A7 FD A8         sor a, b ; ||
2878   16A9 E4            pop a
2879   16AA             ; --- END LOGICAL OR
2880   16AA C0 00 00      cmp b, 0
2881   16AD C6 CB 16      je _if72_exit
2882   16B0             _if72_TRUE:
2883   16B0             ; printf("Lt. Sulu%s", inc_1); 
2884   16B0             ; --- START FUNCTION CALL
2885   16B0 3B 23 69      mov d, _inc_1 ; $inc_1
2886   16B3 2A            mov b, [d]
2887   16B4 38 00 00      mov c, 0
2888   16B7 FD AB         swp b
2889   16B9 D8            push b
2890   16BA 26 E0 6D      mov b, _s64 ; "Lt. Sulu%s"
2891   16BD FD AB         swp b
2892   16BF D8            push b
2893   16C0 07 2C 5B      call printf
2894   16C3 51 04 00      add sp, 4
2895   16C6             ; --- END FUNCTION CALL
2896   16C6             ; return; 
2897   16C6 F9            leave
2898   16C7 09            ret
2899   16C8 0A CB 16      jmp _if72_exit
2900   16CB             _if72_exit:
2901   16CB             ; if (damage[1] < 0) 
2902   16CB             _if73_cond:
2903   16CB 3B 95 68      mov d, _damage_data ; $damage
2904   16CE D7            push a
2905   16CF DA            push d
2906   16D0 FD 2E 01 00   mov32 cb, $00000001
2906   16D4 00 00 
2907   16D6 E7            pop d
2908   16D7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2909   16DB E4            pop a
2910   16DC 2A            mov b, [d]
2911   16DD 38 00 00      mov c, 0
2912   16E0             ; --- START RELATIONAL
2913   16E0 D7            push a
2914   16E1 11            mov a, b
2915   16E2 FD 2E 00 00   mov32 cb, $00000000
2915   16E6 00 00 
2916   16E8 B0            cmp a, b
2917   16E9 FD 73         slt ; < (signed)
2918   16EB E4            pop a
2919   16EC             ; --- END RELATIONAL
2920   16EC C0 00 00      cmp b, 0
2921   16EF C6 0B 17      je _if73_exit
2922   16F2             _if73_TRUE:
2923   16F2             ; strcpy(warpmax, "0.2"); 
2924   16F2             ; --- START FUNCTION CALL
2925   16F2 26 EB 6D      mov b, _s65 ; "0.2"
2926   16F5 FD AB         swp b
2927   16F7 D8            push b
2928   16F8 3B B2 69      mov d, _warpmax_data ; $warpmax
2929   16FB 2D            mov b, d
2930   16FC 38 00 00      mov c, 0
2931   16FF FD AB         swp b
2932   1701 D8            push b
2933   1702 07 74 59      call strcpy
2934   1705 51 04 00      add sp, 4
2935   1708             ; --- END FUNCTION CALL
2936   1708 0A 0B 17      jmp _if73_exit
2937   170B             _if73_exit:
2938   170B             ; printf("Warp Factor (0-%s): ", warpmax); 
2939   170B             ; --- START FUNCTION CALL
2940   170B 3B B2 69      mov d, _warpmax_data ; $warpmax
2941   170E 2D            mov b, d
2942   170F 38 00 00      mov c, 0
2943   1712 FD AB         swp b
2944   1714 D8            push b
2945   1715 26 EF 6D      mov b, _s66 ; "Warp Factor (0-%s): "
2946   1718 FD AB         swp b
2947   171A D8            push b
2948   171B 07 2C 5B      call printf
2949   171E 51 04 00      add sp, 4
2950   1721             ; --- END FUNCTION CALL
2951   1721             ; warp = input_f00(); 
2952   1721 FA FB FF      lea d, [bp + -5] ; $warp
2953   1724 DA            push d
2954   1725             ; --- START FUNCTION CALL
2955   1725 07 F5 05      call input_f00
2956   1728 E7            pop d
2957   1729 FD 43         mov [d], b
2958   172B             ; if (damage[1] < 0 && warp > 20) { 
2959   172B             _if74_cond:
2960   172B 3B 95 68      mov d, _damage_data ; $damage
2961   172E D7            push a
2962   172F DA            push d
2963   1730 FD 2E 01 00   mov32 cb, $00000001
2963   1734 00 00 
2964   1736 E7            pop d
2965   1737 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2966   173B E4            pop a
2967   173C 2A            mov b, [d]
2968   173D 38 00 00      mov c, 0
2969   1740             ; --- START RELATIONAL
2970   1740 D7            push a
2971   1741 11            mov a, b
2972   1742 FD 2E 00 00   mov32 cb, $00000000
2972   1746 00 00 
2973   1748 B0            cmp a, b
2974   1749 FD 73         slt ; < (signed)
2975   174B E4            pop a
2976   174C             ; --- END RELATIONAL
2977   174C             ; --- START LOGICAL AND
2978   174C D7            push a
2979   174D 11            mov a, b
2980   174E FA FB FF      lea d, [bp + -5] ; $warp
2981   1751 2A            mov b, [d]
2982   1752 38 00 00      mov c, 0
2983   1755             ; --- START RELATIONAL
2984   1755 D7            push a
2985   1756 11            mov a, b
2986   1757 FD 2E 14 00   mov32 cb, $00000014
2986   175B 00 00 
2987   175D B0            cmp a, b
2988   175E FD 7F         sgt ; >
2989   1760 E4            pop a
2990   1761             ; --- END RELATIONAL
2991   1761 FD A7         sand a, b
2992   1763 E4            pop a
2993   1764             ; --- END LOGICAL AND
2994   1764 C0 00 00      cmp b, 0
2995   1767 C6 7B 17      je _if74_exit
2996   176A             _if74_TRUE:
2997   176A             ; printf("Warp Engines are damaged. Maximum speed = Warp 0.2.\n\n"); 
2998   176A             ; --- START FUNCTION CALL
2999   176A 26 04 6E      mov b, _s67 ; "Warp Engines are damaged. Maximum speed = Warp 0.2.\n\n"
3000   176D FD AB         swp b
3001   176F D8            push b
3002   1770 07 2C 5B      call printf
3003   1773 51 02 00      add sp, 2
3004   1776             ; --- END FUNCTION CALL
3005   1776             ; return; 
3006   1776 F9            leave
3007   1777 09            ret
3008   1778 0A 7B 17      jmp _if74_exit
3009   177B             _if74_exit:
3010   177B             ; if (warp <= 0) 
3011   177B             _if75_cond:
3012   177B FA FB FF      lea d, [bp + -5] ; $warp
3013   177E 2A            mov b, [d]
3014   177F 38 00 00      mov c, 0
3015   1782             ; --- START RELATIONAL
3016   1782 D7            push a
3017   1783 11            mov a, b
3018   1784 FD 2E 00 00   mov32 cb, $00000000
3018   1788 00 00 
3019   178A B0            cmp a, b
3020   178B FD 74         sle ; <= (signed)
3021   178D E4            pop a
3022   178E             ; --- END RELATIONAL
3023   178E C0 00 00      cmp b, 0
3024   1791 C6 99 17      je _if75_exit
3025   1794             _if75_TRUE:
3026   1794             ; return; 
3027   1794 F9            leave
3028   1795 09            ret
3029   1796 0A 99 17      jmp _if75_exit
3030   1799             _if75_exit:
3031   1799             ; if (warp > 800) { 
3032   1799             _if76_cond:
3033   1799 FA FB FF      lea d, [bp + -5] ; $warp
3034   179C 2A            mov b, [d]
3035   179D 38 00 00      mov c, 0
3036   17A0             ; --- START RELATIONAL
3037   17A0 D7            push a
3038   17A1 11            mov a, b
3039   17A2 FD 2E 20 03   mov32 cb, $00000320
3039   17A6 00 00 
3040   17A8 B0            cmp a, b
3041   17A9 FD 7F         sgt ; >
3042   17AB E4            pop a
3043   17AC             ; --- END RELATIONAL
3044   17AC C0 00 00      cmp b, 0
3045   17AF C6 D6 17      je _if76_exit
3046   17B2             _if76_TRUE:
3047   17B2             ; printf("Chief Engineer Scott reports:\n  The engines won't take warp %s!\n\n", print100(warp)); 
3048   17B2             ; --- START FUNCTION CALL
3049   17B2             ; --- START FUNCTION CALL
3050   17B2 FA FB FF      lea d, [bp + -5] ; $warp
3051   17B5 2A            mov b, [d]
3052   17B6 38 00 00      mov c, 0
3053   17B9 FD AB         swp b
3054   17BB D8            push b
3055   17BC 07 2E 08      call print100
3056   17BF 51 02 00      add sp, 2
3057   17C2             ; --- END FUNCTION CALL
3058   17C2 FD AB         swp b
3059   17C4 D8            push b
3060   17C5 26 3A 6E      mov b, _s68 ; "Chief Engineer Scott reports:\n  The engines won't take warp %s!\n\n"
3061   17C8 FD AB         swp b
3062   17CA D8            push b
3063   17CB 07 2C 5B      call printf
3064   17CE 51 04 00      add sp, 4
3065   17D1             ; --- END FUNCTION CALL
3066   17D1             ; return; 
3067   17D1 F9            leave
3068   17D2 09            ret
3069   17D3 0A D6 17      jmp _if76_exit
3070   17D6             _if76_exit:
3071   17D6             ; n = warp * 8; 
3072   17D6 FA F9 FF      lea d, [bp + -7] ; $n
3073   17D9 DA            push d
3074   17DA FA FB FF      lea d, [bp + -5] ; $warp
3075   17DD 2A            mov b, [d]
3076   17DE 38 00 00      mov c, 0
3077   17E1             ; --- START FACTORS
3078   17E1 D7            push a
3079   17E2 FD D8         push g
3080   17E4 11            mov a, b
3081   17E5 FD 7A         mov g, c
3082   17E7 FD 2E 08 00   mov32 cb, $00000008
3082   17EB 00 00 
3083   17ED FD 38         mov c, g
3084   17EF 27            mov b, a
3085   17F0 FD F1         pop g
3086   17F2 E4            pop a
3087   17F3             ; --- END FACTORS
3088   17F3 E7            pop d
3089   17F4 FD 43         mov [d], b
3090   17F6             ; n = cint100(n);	 
3091   17F6 FA F9 FF      lea d, [bp + -7] ; $n
3092   17F9 DA            push d
3093   17FA             ; --- START FUNCTION CALL
3094   17FA FA F9 FF      lea d, [bp + -7] ; $n
3095   17FD 2A            mov b, [d]
3096   17FE 38 00 00      mov c, 0
3097   1801 FD AB         swp b
3098   1803 D8            push b
3099   1804 07 A5 58      call cint100
3100   1807 51 02 00      add sp, 2
3101   180A             ; --- END FUNCTION CALL
3102   180A E7            pop d
3103   180B FD 43         mov [d], b
3104   180D             ; if (energy - n < 0) { 
3105   180D             _if79_cond:
3106   180D 3B D3 67      mov d, _energy ; $energy
3107   1810 2A            mov b, [d]
3108   1811 38 00 00      mov c, 0
3109   1814             ; --- START TERMS
3110   1814 D7            push a
3111   1815 11            mov a, b
3112   1816 FA F9 FF      lea d, [bp + -7] ; $n
3113   1819 2A            mov b, [d]
3114   181A 38 00 00      mov c, 0
3115   181D 60            sub a, b
3116   181E 27            mov b, a
3117   181F E4            pop a
3118   1820             ; --- END TERMS
3119   1820             ; --- START RELATIONAL
3120   1820 D7            push a
3121   1821 11            mov a, b
3122   1822 FD 2E 00 00   mov32 cb, $00000000
3122   1826 00 00 
3123   1828 B0            cmp a, b
3124   1829 FD 75         slu ; < (unsigned)
3125   182B E4            pop a
3126   182C             ; --- END RELATIONAL
3127   182C C0 00 00      cmp b, 0
3128   182F C6 AF 18      je _if79_exit
3129   1832             _if79_TRUE:
3130   1832             ; printf("Engineering reports:\n  Insufficient energy available for maneuvering at warp %s!\n\n", print100(warp)); 
3131   1832             ; --- START FUNCTION CALL
3132   1832             ; --- START FUNCTION CALL
3133   1832 FA FB FF      lea d, [bp + -5] ; $warp
3134   1835 2A            mov b, [d]
3135   1836 38 00 00      mov c, 0
3136   1839 FD AB         swp b
3137   183B D8            push b
3138   183C 07 2E 08      call print100
3139   183F 51 02 00      add sp, 2
3140   1842             ; --- END FUNCTION CALL
3141   1842 FD AB         swp b
3142   1844 D8            push b
3143   1845 26 7B 6E      mov b, _s69 ; "Engineering reports:\n  Insufficient energy available for maneuvering at warp %s!\n\n"
3144   1848 FD AB         swp b
3145   184A D8            push b
3146   184B 07 2C 5B      call printf
3147   184E 51 04 00      add sp, 4
3148   1851             ; --- END FUNCTION CALL
3149   1851             ; if (shield >= n && damage[7] >= 0) { 
3150   1851             _if80_cond:
3151   1851 3B 8E 68      mov d, _shield ; $shield
3152   1854 2A            mov b, [d]
3153   1855 38 00 00      mov c, 0
3154   1858             ; --- START RELATIONAL
3155   1858 D7            push a
3156   1859 11            mov a, b
3157   185A FA F9 FF      lea d, [bp + -7] ; $n
3158   185D 2A            mov b, [d]
3159   185E 38 00 00      mov c, 0
3160   1861 B0            cmp a, b
3161   1862 FD 80         sge ; >=
3162   1864 E4            pop a
3163   1865             ; --- END RELATIONAL
3164   1865             ; --- START LOGICAL AND
3165   1865 D7            push a
3166   1866 11            mov a, b
3167   1867 3B 95 68      mov d, _damage_data ; $damage
3168   186A D7            push a
3169   186B DA            push d
3170   186C FD 2E 07 00   mov32 cb, $00000007
3170   1870 00 00 
3171   1872 E7            pop d
3172   1873 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3173   1877 E4            pop a
3174   1878 2A            mov b, [d]
3175   1879 38 00 00      mov c, 0
3176   187C             ; --- START RELATIONAL
3177   187C D7            push a
3178   187D 11            mov a, b
3179   187E FD 2E 00 00   mov32 cb, $00000000
3179   1882 00 00 
3180   1884 B0            cmp a, b
3181   1885 FD 80         sge ; >=
3182   1887 E4            pop a
3183   1888             ; --- END RELATIONAL
3184   1888 FD A7         sand a, b
3185   188A E4            pop a
3186   188B             ; --- END LOGICAL AND
3187   188B C0 00 00      cmp b, 0
3188   188E C6 AA 18      je _if80_exit
3189   1891             _if80_TRUE:
3190   1891             ; printf("Deflector Control Room acknowledges:\n  %d units of energy presently deployed to shields.\n", shield); 
3191   1891             ; --- START FUNCTION CALL
3192   1891 3B 8E 68      mov d, _shield ; $shield
3193   1894 2A            mov b, [d]
3194   1895 38 00 00      mov c, 0
3195   1898 FD AB         swp b
3196   189A D8            push b
3197   189B 26 CE 6E      mov b, _s70 ; "Deflector Control Room acknowledges:\n  %d units of energy presently deployed to shields.\n"
3198   189E FD AB         swp b
3199   18A0 D8            push b
3200   18A1 07 2C 5B      call printf
3201   18A4 51 04 00      add sp, 4
3202   18A7             ; --- END FUNCTION CALL
3203   18A7 0A AA 18      jmp _if80_exit
3204   18AA             _if80_exit:
3205   18AA             ; return; 
3206   18AA F9            leave
3207   18AB 09            ret
3208   18AC 0A AF 18      jmp _if79_exit
3209   18AF             _if79_exit:
3210   18AF             ; klingons_move(); 
3211   18AF             ; --- START FUNCTION CALL
3212   18AF 07 AB 4B      call klingons_move
3213   18B2             ; repair_damage(warp); 
3214   18B2             ; --- START FUNCTION CALL
3215   18B2 FA FB FF      lea d, [bp + -5] ; $warp
3216   18B5 2A            mov b, [d]
3217   18B6 38 00 00      mov c, 0
3218   18B9 FD AB         swp b
3219   18BB D8            push b
3220   18BC 07 55 50      call repair_damage
3221   18BF 51 02 00      add sp, 2
3222   18C2             ; --- END FUNCTION CALL
3223   18C2             ; z1 = FROM_FIXED00(ship_y); 
3224   18C2 FA F1 FF      lea d, [bp + -15] ; $z1
3225   18C5 DA            push d
3226   18C6             ; --- START FUNCTION CALL
3227   18C6 3B A9 68      mov d, _ship_y ; $ship_y
3228   18C9 2A            mov b, [d]
3229   18CA 38 00 00      mov c, 0
3230   18CD FD AB         swp b
3231   18CF D8            push b
3232   18D0 07 72 04      call FROM_FIXED00
3233   18D3 51 02 00      add sp, 2
3234   18D6             ; --- END FUNCTION CALL
3235   18D6 E7            pop d
3236   18D7 FD 43         mov [d], b
3237   18D9             ; z2 = FROM_FIXED00(ship_x); 
3238   18D9 FA EF FF      lea d, [bp + -17] ; $z2
3239   18DC DA            push d
3240   18DD             ; --- START FUNCTION CALL
3241   18DD 3B AB 68      mov d, _ship_x ; $ship_x
3242   18E0 2A            mov b, [d]
3243   18E1 38 00 00      mov c, 0
3244   18E4 FD AB         swp b
3245   18E6 D8            push b
3246   18E7 07 72 04      call FROM_FIXED00
3247   18EA 51 02 00      add sp, 2
3248   18ED             ; --- END FUNCTION CALL
3249   18ED E7            pop d
3250   18EE FD 43         mov [d], b
3251   18F0             ; quad[z1+-1][z2+-1] = 		0       ; 
3252   18F0 3B AF 68      mov d, _quad_data ; $quad
3253   18F3 D7            push a
3254   18F4 DA            push d
3255   18F5 FA F1 FF      lea d, [bp + -15] ; $z1
3256   18F8 2A            mov b, [d]
3257   18F9 38 00 00      mov c, 0
3258   18FC             ; --- START TERMS
3259   18FC D7            push a
3260   18FD 11            mov a, b
3261   18FE FD 2E FF FF   mov32 cb, $ffffffff
3261   1902 FF FF 
3262   1904 56            add b, a
3263   1905 E4            pop a
3264   1906             ; --- END TERMS
3265   1906 E7            pop d
3266   1907 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
3267   190B DA            push d
3268   190C FA EF FF      lea d, [bp + -17] ; $z2
3269   190F 2A            mov b, [d]
3270   1910 38 00 00      mov c, 0
3271   1913             ; --- START TERMS
3272   1913 D7            push a
3273   1914 11            mov a, b
3274   1915 FD 2E FF FF   mov32 cb, $ffffffff
3274   1919 FF FF 
3275   191B 56            add b, a
3276   191C E4            pop a
3277   191D             ; --- END TERMS
3278   191D E7            pop d
3279   191E 5A            add d, b
3280   191F E4            pop a
3281   1920 DA            push d
3282   1921 FD 2E 00 00   mov32 cb, $00000000
3282   1925 00 00 
3283   1927 E7            pop d
3284   1928 FD 3E         mov [d], bl
3285   192A             ; c2 = FROM_FIXED00(c1);	/* Integer part */ 
3286   192A FA F7 FF      lea d, [bp + -9] ; $c2
3287   192D DA            push d
3288   192E             ; --- START FUNCTION CALL
3289   192E FA FD FF      lea d, [bp + -3] ; $c1
3290   1931 2A            mov b, [d]
3291   1932 38 00 00      mov c, 0
3292   1935 FD AB         swp b
3293   1937 D8            push b
3294   1938 07 72 04      call FROM_FIXED00
3295   193B 51 02 00      add sp, 2
3296   193E             ; --- END FUNCTION CALL
3297   193E E7            pop d
3298   193F FD 43         mov [d], b
3299   1941             ; c3 = c2 + 1;		/* Next integer part */ 
3300   1941 FA F5 FF      lea d, [bp + -11] ; $c3
3301   1944 DA            push d
3302   1945 FA F7 FF      lea d, [bp + -9] ; $c2
3303   1948 2A            mov b, [d]
3304   1949 38 00 00      mov c, 0
3305   194C             ; --- START TERMS
3306   194C D7            push a
3307   194D 11            mov a, b
3308   194E FD 2E 01 00   mov32 cb, $00000001
3308   1952 00 00 
3309   1954 56            add b, a
3310   1955 E4            pop a
3311   1956             ; --- END TERMS
3312   1956 E7            pop d
3313   1957 FD 43         mov [d], b
3314   1959             ; c4 = (c1 - TO_FIXED00(c2));	/* Fractional element in fixed point */ 
3315   1959 FA F3 FF      lea d, [bp + -13] ; $c4
3316   195C DA            push d
3317   195D FA FD FF      lea d, [bp + -3] ; $c1
3318   1960 2A            mov b, [d]
3319   1961 38 00 00      mov c, 0
3320   1964             ; --- START TERMS
3321   1964 D7            push a
3322   1965 11            mov a, b
3323   1966             ; --- START FUNCTION CALL
3324   1966 FA F7 FF      lea d, [bp + -9] ; $c2
3325   1969 2A            mov b, [d]
3326   196A 38 00 00      mov c, 0
3327   196D FD AB         swp b
3328   196F D8            push b
3329   1970 07 54 04      call TO_FIXED00
3330   1973 51 02 00      add sp, 2
3331   1976             ; --- END FUNCTION CALL
3332   1976 60            sub a, b
3333   1977 27            mov b, a
3334   1978 E4            pop a
3335   1979             ; --- END TERMS
3336   1979 E7            pop d
3337   197A FD 43         mov [d], b
3338   197C             ; x1 = 100 * c[1][c2] + (c[1][c3] - c[1][c2]) * c4; 
3339   197C FA ED FF      lea d, [bp + -19] ; $x1
3340   197F DA            push d
3341   1980 FD 2E 64 00   mov32 cb, $00000064
3341   1984 00 00 
3342   1986             ; --- START FACTORS
3343   1986 D7            push a
3344   1987 FD D8         push g
3345   1989 11            mov a, b
3346   198A FD 7A         mov g, c
3347   198C 3B B2 67      mov d, _c_data ; $c
3348   198F D7            push a
3349   1990 DA            push d
3350   1991 FD 2E 01 00   mov32 cb, $00000001
3350   1995 00 00 
3351   1997 E7            pop d
3352   1998 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
3353   199C DA            push d
3354   199D FA F7 FF      lea d, [bp + -9] ; $c2
3355   19A0 2A            mov b, [d]
3356   19A1 38 00 00      mov c, 0
3357   19A4 E7            pop d
3358   19A5 5A            add d, b
3359   19A6 E4            pop a
3360   19A7 32            mov bl, [d]
3361   19A8 A7 00         mov bh, 0
3362   19AA 38 00 00      mov c, 0
3363   19AD FD 38         mov c, g
3364   19AF 27            mov b, a
3365   19B0 FD F1         pop g
3366   19B2 E4            pop a
3367   19B3             ; --- END FACTORS
3368   19B3             ; --- START TERMS
3369   19B3 D7            push a
3370   19B4 11            mov a, b
3371   19B5 3B B2 67      mov d, _c_data ; $c
3372   19B8 D7            push a
3373   19B9 DA            push d
3374   19BA FD 2E 01 00   mov32 cb, $00000001
3374   19BE 00 00 
3375   19C0 E7            pop d
3376   19C1 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
3377   19C5 DA            push d
3378   19C6 FA F5 FF      lea d, [bp + -11] ; $c3
3379   19C9 2A            mov b, [d]
3380   19CA 38 00 00      mov c, 0
3381   19CD E7            pop d
3382   19CE 5A            add d, b
3383   19CF E4            pop a
3384   19D0 32            mov bl, [d]
3385   19D1 A7 00         mov bh, 0
3386   19D3 38 00 00      mov c, 0
3387   19D6             ; --- START TERMS
3388   19D6 D7            push a
3389   19D7 11            mov a, b
3390   19D8 3B B2 67      mov d, _c_data ; $c
3391   19DB D7            push a
3392   19DC DA            push d
3393   19DD FD 2E 01 00   mov32 cb, $00000001
3393   19E1 00 00 
3394   19E3 E7            pop d
3395   19E4 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
3396   19E8 DA            push d
3397   19E9 FA F7 FF      lea d, [bp + -9] ; $c2
3398   19EC 2A            mov b, [d]
3399   19ED 38 00 00      mov c, 0
3400   19F0 E7            pop d
3401   19F1 5A            add d, b
3402   19F2 E4            pop a
3403   19F3 32            mov bl, [d]
3404   19F4 A7 00         mov bh, 0
3405   19F6 38 00 00      mov c, 0
3406   19F9 60            sub a, b
3407   19FA 27            mov b, a
3408   19FB E4            pop a
3409   19FC             ; --- END TERMS
3410   19FC             ; --- START FACTORS
3411   19FC D7            push a
3412   19FD FD D8         push g
3413   19FF 11            mov a, b
3414   1A00 FD 7A         mov g, c
3415   1A02 FA F3 FF      lea d, [bp + -13] ; $c4
3416   1A05 2A            mov b, [d]
3417   1A06 38 00 00      mov c, 0
3418   1A09 FD 38         mov c, g
3419   1A0B 27            mov b, a
3420   1A0C FD F1         pop g
3421   1A0E E4            pop a
3422   1A0F             ; --- END FACTORS
3423   1A0F 56            add b, a
3424   1A10 E4            pop a
3425   1A11             ; --- END TERMS
3426   1A11 E7            pop d
3427   1A12 FD 43         mov [d], b
3428   1A14             ; x2 = 100 * c[2][c2] + (c[2][c3] - c[2][c2]) * c4; 
3429   1A14 FA EB FF      lea d, [bp + -21] ; $x2
3430   1A17 DA            push d
3431   1A18 FD 2E 64 00   mov32 cb, $00000064
3431   1A1C 00 00 
3432   1A1E             ; --- START FACTORS
3433   1A1E D7            push a
3434   1A1F FD D8         push g
3435   1A21 11            mov a, b
3436   1A22 FD 7A         mov g, c
3437   1A24 3B B2 67      mov d, _c_data ; $c
3438   1A27 D7            push a
3439   1A28 DA            push d
3440   1A29 FD 2E 02 00   mov32 cb, $00000002
3440   1A2D 00 00 
3441   1A2F E7            pop d
3442   1A30 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
3443   1A34 DA            push d
3444   1A35 FA F7 FF      lea d, [bp + -9] ; $c2
3445   1A38 2A            mov b, [d]
3446   1A39 38 00 00      mov c, 0
3447   1A3C E7            pop d
3448   1A3D 5A            add d, b
3449   1A3E E4            pop a
3450   1A3F 32            mov bl, [d]
3451   1A40 A7 00         mov bh, 0
3452   1A42 38 00 00      mov c, 0
3453   1A45 FD 38         mov c, g
3454   1A47 27            mov b, a
3455   1A48 FD F1         pop g
3456   1A4A E4            pop a
3457   1A4B             ; --- END FACTORS
3458   1A4B             ; --- START TERMS
3459   1A4B D7            push a
3460   1A4C 11            mov a, b
3461   1A4D 3B B2 67      mov d, _c_data ; $c
3462   1A50 D7            push a
3463   1A51 DA            push d
3464   1A52 FD 2E 02 00   mov32 cb, $00000002
3464   1A56 00 00 
3465   1A58 E7            pop d
3466   1A59 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
3467   1A5D DA            push d
3468   1A5E FA F5 FF      lea d, [bp + -11] ; $c3
3469   1A61 2A            mov b, [d]
3470   1A62 38 00 00      mov c, 0
3471   1A65 E7            pop d
3472   1A66 5A            add d, b
3473   1A67 E4            pop a
3474   1A68 32            mov bl, [d]
3475   1A69 A7 00         mov bh, 0
3476   1A6B 38 00 00      mov c, 0
3477   1A6E             ; --- START TERMS
3478   1A6E D7            push a
3479   1A6F 11            mov a, b
3480   1A70 3B B2 67      mov d, _c_data ; $c
3481   1A73 D7            push a
3482   1A74 DA            push d
3483   1A75 FD 2E 02 00   mov32 cb, $00000002
3483   1A79 00 00 
3484   1A7B E7            pop d
3485   1A7C FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
3486   1A80 DA            push d
3487   1A81 FA F7 FF      lea d, [bp + -9] ; $c2
3488   1A84 2A            mov b, [d]
3489   1A85 38 00 00      mov c, 0
3490   1A88 E7            pop d
3491   1A89 5A            add d, b
3492   1A8A E4            pop a
3493   1A8B 32            mov bl, [d]
3494   1A8C A7 00         mov bh, 0
3495   1A8E 38 00 00      mov c, 0
3496   1A91 60            sub a, b
3497   1A92 27            mov b, a
3498   1A93 E4            pop a
3499   1A94             ; --- END TERMS
3500   1A94             ; --- START FACTORS
3501   1A94 D7            push a
3502   1A95 FD D8         push g
3503   1A97 11            mov a, b
3504   1A98 FD 7A         mov g, c
3505   1A9A FA F3 FF      lea d, [bp + -13] ; $c4
3506   1A9D 2A            mov b, [d]
3507   1A9E 38 00 00      mov c, 0
3508   1AA1 FD 38         mov c, g
3509   1AA3 27            mov b, a
3510   1AA4 FD F1         pop g
3511   1AA6 E4            pop a
3512   1AA7             ; --- END FACTORS
3513   1AA7 56            add b, a
3514   1AA8 E4            pop a
3515   1AA9             ; --- END TERMS
3516   1AA9 E7            pop d
3517   1AAA FD 43         mov [d], b
3518   1AAC             ; x = ship_y; 
3519   1AAC FA E9 FF      lea d, [bp + -23] ; $x
3520   1AAF DA            push d
3521   1AB0 3B A9 68      mov d, _ship_y ; $ship_y
3522   1AB3 2A            mov b, [d]
3523   1AB4 38 00 00      mov c, 0
3524   1AB7 E7            pop d
3525   1AB8 FD 43         mov [d], b
3526   1ABA             ; y = ship_x; 
3527   1ABA FA E7 FF      lea d, [bp + -25] ; $y
3528   1ABD DA            push d
3529   1ABE 3B AB 68      mov d, _ship_x ; $ship_x
3530   1AC1 2A            mov b, [d]
3531   1AC2 38 00 00      mov c, 0
3532   1AC5 E7            pop d
3533   1AC6 FD 43         mov [d], b
3534   1AC8             ; for (i = 1; i <= n; i++) { 
3535   1AC8             _for89_init:
3536   1AC8 FA FF FF      lea d, [bp + -1] ; $i
3537   1ACB DA            push d
3538   1ACC FD 2E 01 00   mov32 cb, $00000001
3538   1AD0 00 00 
3539   1AD2 E7            pop d
3540   1AD3 FD 43         mov [d], b
3541   1AD5             _for89_cond:
3542   1AD5 FA FF FF      lea d, [bp + -1] ; $i
3543   1AD8 2A            mov b, [d]
3544   1AD9 38 00 00      mov c, 0
3545   1ADC             ; --- START RELATIONAL
3546   1ADC D7            push a
3547   1ADD 11            mov a, b
3548   1ADE FA F9 FF      lea d, [bp + -7] ; $n
3549   1AE1 2A            mov b, [d]
3550   1AE2 38 00 00      mov c, 0
3551   1AE5 B0            cmp a, b
3552   1AE6 FD 74         sle ; <= (signed)
3553   1AE8 E4            pop a
3554   1AE9             ; --- END RELATIONAL
3555   1AE9 C0 00 00      cmp b, 0
3556   1AEC C6 92 20      je _for89_exit
3557   1AEF             _for89_block:
3558   1AEF             ; ship_y = ship_y + x1; 
3559   1AEF 3B A9 68      mov d, _ship_y ; $ship_y
3560   1AF2 DA            push d
3561   1AF3 3B A9 68      mov d, _ship_y ; $ship_y
3562   1AF6 2A            mov b, [d]
3563   1AF7 38 00 00      mov c, 0
3564   1AFA             ; --- START TERMS
3565   1AFA D7            push a
3566   1AFB 11            mov a, b
3567   1AFC FA ED FF      lea d, [bp + -19] ; $x1
3568   1AFF 2A            mov b, [d]
3569   1B00 38 00 00      mov c, 0
3570   1B03 56            add b, a
3571   1B04 E4            pop a
3572   1B05             ; --- END TERMS
3573   1B05 E7            pop d
3574   1B06 FD 43         mov [d], b
3575   1B08             ; ship_x = ship_x + x2; 
3576   1B08 3B AB 68      mov d, _ship_x ; $ship_x
3577   1B0B DA            push d
3578   1B0C 3B AB 68      mov d, _ship_x ; $ship_x
3579   1B0F 2A            mov b, [d]
3580   1B10 38 00 00      mov c, 0
3581   1B13             ; --- START TERMS
3582   1B13 D7            push a
3583   1B14 11            mov a, b
3584   1B15 FA EB FF      lea d, [bp + -21] ; $x2
3585   1B18 2A            mov b, [d]
3586   1B19 38 00 00      mov c, 0
3587   1B1C 56            add b, a
3588   1B1D E4            pop a
3589   1B1E             ; --- END TERMS
3590   1B1E E7            pop d
3591   1B1F FD 43         mov [d], b
3592   1B21             ; z1 = FROM_FIXED00(ship_y); 
3593   1B21 FA F1 FF      lea d, [bp + -15] ; $z1
3594   1B24 DA            push d
3595   1B25             ; --- START FUNCTION CALL
3596   1B25 3B A9 68      mov d, _ship_y ; $ship_y
3597   1B28 2A            mov b, [d]
3598   1B29 38 00 00      mov c, 0
3599   1B2C FD AB         swp b
3600   1B2E D8            push b
3601   1B2F 07 72 04      call FROM_FIXED00
3602   1B32 51 02 00      add sp, 2
3603   1B35             ; --- END FUNCTION CALL
3604   1B35 E7            pop d
3605   1B36 FD 43         mov [d], b
3606   1B38             ; z2 = FROM_FIXED00(ship_x);	/* ?? cint100 ?? */ 
3607   1B38 FA EF FF      lea d, [bp + -17] ; $z2
3608   1B3B DA            push d
3609   1B3C             ; --- START FUNCTION CALL
3610   1B3C 3B AB 68      mov d, _ship_x ; $ship_x
3611   1B3F 2A            mov b, [d]
3612   1B40 38 00 00      mov c, 0
3613   1B43 FD AB         swp b
3614   1B45 D8            push b
3615   1B46 07 72 04      call FROM_FIXED00
3616   1B49 51 02 00      add sp, 2
3617   1B4C             ; --- END FUNCTION CALL
3618   1B4C E7            pop d
3619   1B4D FD 43         mov [d], b
3620   1B4F             ; if (z1 < 1 || z1 >= 9 || z2 < 1 || z2 >= 9) { 
3621   1B4F             _if90_cond:
3622   1B4F FA F1 FF      lea d, [bp + -15] ; $z1
3623   1B52 2A            mov b, [d]
3624   1B53 38 00 00      mov c, 0
3625   1B56             ; --- START RELATIONAL
3626   1B56 D7            push a
3627   1B57 11            mov a, b
3628   1B58 FD 2E 01 00   mov32 cb, $00000001
3628   1B5C 00 00 
3629   1B5E B0            cmp a, b
3630   1B5F FD 73         slt ; < (signed)
3631   1B61 E4            pop a
3632   1B62             ; --- END RELATIONAL
3633   1B62             ; --- START LOGICAL OR
3634   1B62 D7            push a
3635   1B63 11            mov a, b
3636   1B64 FA F1 FF      lea d, [bp + -15] ; $z1
3637   1B67 2A            mov b, [d]
3638   1B68 38 00 00      mov c, 0
3639   1B6B             ; --- START RELATIONAL
3640   1B6B D7            push a
3641   1B6C 11            mov a, b
3642   1B6D FD 2E 09 00   mov32 cb, $00000009
3642   1B71 00 00 
3643   1B73 B0            cmp a, b
3644   1B74 FD 80         sge ; >=
3645   1B76 E4            pop a
3646   1B77             ; --- END RELATIONAL
3647   1B77 FD A8         sor a, b ; ||
3648   1B79 11            mov a, b
3649   1B7A FA EF FF      lea d, [bp + -17] ; $z2
3650   1B7D 2A            mov b, [d]
3651   1B7E 38 00 00      mov c, 0
3652   1B81             ; --- START RELATIONAL
3653   1B81 D7            push a
3654   1B82 11            mov a, b
3655   1B83 FD 2E 01 00   mov32 cb, $00000001
3655   1B87 00 00 
3656   1B89 B0            cmp a, b
3657   1B8A FD 73         slt ; < (signed)
3658   1B8C E4            pop a
3659   1B8D             ; --- END RELATIONAL
3660   1B8D FD A8         sor a, b ; ||
3661   1B8F 11            mov a, b
3662   1B90 FA EF FF      lea d, [bp + -17] ; $z2
3663   1B93 2A            mov b, [d]
3664   1B94 38 00 00      mov c, 0
3665   1B97             ; --- START RELATIONAL
3666   1B97 D7            push a
3667   1B98 11            mov a, b
3668   1B99 FD 2E 09 00   mov32 cb, $00000009
3668   1B9D 00 00 
3669   1B9F B0            cmp a, b
3670   1BA0 FD 80         sge ; >=
3671   1BA2 E4            pop a
3672   1BA3             ; --- END RELATIONAL
3673   1BA3 FD A8         sor a, b ; ||
3674   1BA5 E4            pop a
3675   1BA6             ; --- END LOGICAL OR
3676   1BA6 C0 00 00      cmp b, 0
3677   1BA9 C6 C8 1F      je _if90_exit
3678   1BAC             _if90_TRUE:
3679   1BAC             ; outside = 0;		/* Outside galaxy flag */ 
3680   1BAC FA E6 FF      lea d, [bp + -26] ; $outside
3681   1BAF DA            push d
3682   1BB0 FD 2E 00 00   mov32 cb, $00000000
3682   1BB4 00 00 
3683   1BB6 E7            pop d
3684   1BB7 FD 3E         mov [d], bl
3685   1BB9             ; quad_y_old = quad_y; 
3686   1BB9 FA E5 FF      lea d, [bp + -27] ; $quad_y_old
3687   1BBC DA            push d
3688   1BBD 3B 8A 68      mov d, _quad_y ; $quad_y
3689   1BC0 2A            mov b, [d]
3690   1BC1 38 00 00      mov c, 0
3691   1BC4 E7            pop d
3692   1BC5 FD 3E         mov [d], bl
3693   1BC7             ; quad_x_old = quad_x; 
3694   1BC7 FA E4 FF      lea d, [bp + -28] ; $quad_x_old
3695   1BCA DA            push d
3696   1BCB 3B 8C 68      mov d, _quad_x ; $quad_x
3697   1BCE 2A            mov b, [d]
3698   1BCF 38 00 00      mov c, 0
3699   1BD2 E7            pop d
3700   1BD3 FD 3E         mov [d], bl
3701   1BD5             ; x = (800 * quad_y) + x + (n * x1); 
3702   1BD5 FA E9 FF      lea d, [bp + -23] ; $x
3703   1BD8 DA            push d
3704   1BD9 FD 2E 20 03   mov32 cb, $00000320
3704   1BDD 00 00 
3705   1BDF             ; --- START FACTORS
3706   1BDF D7            push a
3707   1BE0 FD D8         push g
3708   1BE2 11            mov a, b
3709   1BE3 FD 7A         mov g, c
3710   1BE5 3B 8A 68      mov d, _quad_y ; $quad_y
3711   1BE8 2A            mov b, [d]
3712   1BE9 38 00 00      mov c, 0
3713   1BEC FD 38         mov c, g
3714   1BEE 27            mov b, a
3715   1BEF FD F1         pop g
3716   1BF1 E4            pop a
3717   1BF2             ; --- END FACTORS
3718   1BF2             ; --- START TERMS
3719   1BF2 D7            push a
3720   1BF3 11            mov a, b
3721   1BF4 FA E9 FF      lea d, [bp + -23] ; $x
3722   1BF7 2A            mov b, [d]
3723   1BF8 38 00 00      mov c, 0
3724   1BFB 56            add b, a
3725   1BFC 11            mov a, b
3726   1BFD FA F9 FF      lea d, [bp + -7] ; $n
3727   1C00 2A            mov b, [d]
3728   1C01 38 00 00      mov c, 0
3729   1C04             ; --- START FACTORS
3730   1C04 D7            push a
3731   1C05 FD D8         push g
3732   1C07 11            mov a, b
3733   1C08 FD 7A         mov g, c
3734   1C0A FA ED FF      lea d, [bp + -19] ; $x1
3735   1C0D 2A            mov b, [d]
3736   1C0E 38 00 00      mov c, 0
3737   1C11 FD 38         mov c, g
3738   1C13 27            mov b, a
3739   1C14 FD F1         pop g
3740   1C16 E4            pop a
3741   1C17             ; --- END FACTORS
3742   1C17 56            add b, a
3743   1C18 E4            pop a
3744   1C19             ; --- END TERMS
3745   1C19 E7            pop d
3746   1C1A FD 43         mov [d], b
3747   1C1C             ; y = (800 * quad_x) + y + (n * x2); 
3748   1C1C FA E7 FF      lea d, [bp + -25] ; $y
3749   1C1F DA            push d
3750   1C20 FD 2E 20 03   mov32 cb, $00000320
3750   1C24 00 00 
3751   1C26             ; --- START FACTORS
3752   1C26 D7            push a
3753   1C27 FD D8         push g
3754   1C29 11            mov a, b
3755   1C2A FD 7A         mov g, c
3756   1C2C 3B 8C 68      mov d, _quad_x ; $quad_x
3757   1C2F 2A            mov b, [d]
3758   1C30 38 00 00      mov c, 0
3759   1C33 FD 38         mov c, g
3760   1C35 27            mov b, a
3761   1C36 FD F1         pop g
3762   1C38 E4            pop a
3763   1C39             ; --- END FACTORS
3764   1C39             ; --- START TERMS
3765   1C39 D7            push a
3766   1C3A 11            mov a, b
3767   1C3B FA E7 FF      lea d, [bp + -25] ; $y
3768   1C3E 2A            mov b, [d]
3769   1C3F 38 00 00      mov c, 0
3770   1C42 56            add b, a
3771   1C43 11            mov a, b
3772   1C44 FA F9 FF      lea d, [bp + -7] ; $n
3773   1C47 2A            mov b, [d]
3774   1C48 38 00 00      mov c, 0
3775   1C4B             ; --- START FACTORS
3776   1C4B D7            push a
3777   1C4C FD D8         push g
3778   1C4E 11            mov a, b
3779   1C4F FD 7A         mov g, c
3780   1C51 FA EB FF      lea d, [bp + -21] ; $x2
3781   1C54 2A            mov b, [d]
3782   1C55 38 00 00      mov c, 0
3783   1C58 FD 38         mov c, g
3784   1C5A 27            mov b, a
3785   1C5B FD F1         pop g
3786   1C5D E4            pop a
3787   1C5E             ; --- END FACTORS
3788   1C5E 56            add b, a
3789   1C5F E4            pop a
3790   1C60             ; --- END TERMS
3791   1C60 E7            pop d
3792   1C61 FD 43         mov [d], b
3793   1C63             ; quad_y = x / 800;	/* Fixed point to int and divide by 8 */ 
3794   1C63 3B 8A 68      mov d, _quad_y ; $quad_y
3795   1C66 DA            push d
3796   1C67 FA E9 FF      lea d, [bp + -23] ; $x
3797   1C6A 2A            mov b, [d]
3798   1C6B 38 00 00      mov c, 0
3799   1C6E             ; --- START FACTORS
3800   1C6E D7            push a
3801   1C6F FD D8         push g
3802   1C71 11            mov a, b
3803   1C72 FD 7A         mov g, c
3804   1C74 FD 2E 20 03   mov32 cb, $00000320
3804   1C78 00 00 
3805   1C7A AE            div a, b
3806   1C7B FD 38         mov c, g
3807   1C7D 27            mov b, a
3808   1C7E FD F1         pop g
3809   1C80 E4            pop a
3810   1C81             ; --- END FACTORS
3811   1C81 E7            pop d
3812   1C82 FD 43         mov [d], b
3813   1C84             ; quad_x = y / 800;	/* Ditto */ 
3814   1C84 3B 8C 68      mov d, _quad_x ; $quad_x
3815   1C87 DA            push d
3816   1C88 FA E7 FF      lea d, [bp + -25] ; $y
3817   1C8B 2A            mov b, [d]
3818   1C8C 38 00 00      mov c, 0
3819   1C8F             ; --- START FACTORS
3820   1C8F D7            push a
3821   1C90 FD D8         push g
3822   1C92 11            mov a, b
3823   1C93 FD 7A         mov g, c
3824   1C95 FD 2E 20 03   mov32 cb, $00000320
3824   1C99 00 00 
3825   1C9B AE            div a, b
3826   1C9C FD 38         mov c, g
3827   1C9E 27            mov b, a
3828   1C9F FD F1         pop g
3829   1CA1 E4            pop a
3830   1CA2             ; --- END FACTORS
3831   1CA2 E7            pop d
3832   1CA3 FD 43         mov [d], b
3833   1CA5             ; ship_y = x - (quad_y * 800); 
3834   1CA5 3B A9 68      mov d, _ship_y ; $ship_y
3835   1CA8 DA            push d
3836   1CA9 FA E9 FF      lea d, [bp + -23] ; $x
3837   1CAC 2A            mov b, [d]
3838   1CAD 38 00 00      mov c, 0
3839   1CB0             ; --- START TERMS
3840   1CB0 D7            push a
3841   1CB1 11            mov a, b
3842   1CB2 3B 8A 68      mov d, _quad_y ; $quad_y
3843   1CB5 2A            mov b, [d]
3844   1CB6 38 00 00      mov c, 0
3845   1CB9             ; --- START FACTORS
3846   1CB9 D7            push a
3847   1CBA FD D8         push g
3848   1CBC 11            mov a, b
3849   1CBD FD 7A         mov g, c
3850   1CBF FD 2E 20 03   mov32 cb, $00000320
3850   1CC3 00 00 
3851   1CC5 FD 38         mov c, g
3852   1CC7 27            mov b, a
3853   1CC8 FD F1         pop g
3854   1CCA E4            pop a
3855   1CCB             ; --- END FACTORS
3856   1CCB 60            sub a, b
3857   1CCC 27            mov b, a
3858   1CCD E4            pop a
3859   1CCE             ; --- END TERMS
3860   1CCE E7            pop d
3861   1CCF FD 43         mov [d], b
3862   1CD1             ; ship_x = y - (quad_x * 800); 
3863   1CD1 3B AB 68      mov d, _ship_x ; $ship_x
3864   1CD4 DA            push d
3865   1CD5 FA E7 FF      lea d, [bp + -25] ; $y
3866   1CD8 2A            mov b, [d]
3867   1CD9 38 00 00      mov c, 0
3868   1CDC             ; --- START TERMS
3869   1CDC D7            push a
3870   1CDD 11            mov a, b
3871   1CDE 3B 8C 68      mov d, _quad_x ; $quad_x
3872   1CE1 2A            mov b, [d]
3873   1CE2 38 00 00      mov c, 0
3874   1CE5             ; --- START FACTORS
3875   1CE5 D7            push a
3876   1CE6 FD D8         push g
3877   1CE8 11            mov a, b
3878   1CE9 FD 7A         mov g, c
3879   1CEB FD 2E 20 03   mov32 cb, $00000320
3879   1CEF 00 00 
3880   1CF1 FD 38         mov c, g
3881   1CF3 27            mov b, a
3882   1CF4 FD F1         pop g
3883   1CF6 E4            pop a
3884   1CF7             ; --- END FACTORS
3885   1CF7 60            sub a, b
3886   1CF8 27            mov b, a
3887   1CF9 E4            pop a
3888   1CFA             ; --- END TERMS
3889   1CFA E7            pop d
3890   1CFB FD 43         mov [d], b
3891   1CFD             ; if (ship_y < 100) { 
3892   1CFD             _if119_cond:
3893   1CFD 3B A9 68      mov d, _ship_y ; $ship_y
3894   1D00 2A            mov b, [d]
3895   1D01 38 00 00      mov c, 0
3896   1D04             ; --- START RELATIONAL
3897   1D04 D7            push a
3898   1D05 11            mov a, b
3899   1D06 FD 2E 64 00   mov32 cb, $00000064
3899   1D0A 00 00 
3900   1D0C B0            cmp a, b
3901   1D0D FD 73         slt ; < (signed)
3902   1D0F E4            pop a
3903   1D10             ; --- END RELATIONAL
3904   1D10 C0 00 00      cmp b, 0
3905   1D13 C6 4A 1D      je _if119_exit
3906   1D16             _if119_TRUE:
3907   1D16             ; quad_y = quad_y - 1; 
3908   1D16 3B 8A 68      mov d, _quad_y ; $quad_y
3909   1D19 DA            push d
3910   1D1A 3B 8A 68      mov d, _quad_y ; $quad_y
3911   1D1D 2A            mov b, [d]
3912   1D1E 38 00 00      mov c, 0
3913   1D21             ; --- START TERMS
3914   1D21 D7            push a
3915   1D22 11            mov a, b
3916   1D23 FD 2E 01 00   mov32 cb, $00000001
3916   1D27 00 00 
3917   1D29 60            sub a, b
3918   1D2A 27            mov b, a
3919   1D2B E4            pop a
3920   1D2C             ; --- END TERMS
3921   1D2C E7            pop d
3922   1D2D FD 43         mov [d], b
3923   1D2F             ; ship_y = ship_y + 800; 
3924   1D2F 3B A9 68      mov d, _ship_y ; $ship_y
3925   1D32 DA            push d
3926   1D33 3B A9 68      mov d, _ship_y ; $ship_y
3927   1D36 2A            mov b, [d]
3928   1D37 38 00 00      mov c, 0
3929   1D3A             ; --- START TERMS
3930   1D3A D7            push a
3931   1D3B 11            mov a, b
3932   1D3C FD 2E 20 03   mov32 cb, $00000320
3932   1D40 00 00 
3933   1D42 56            add b, a
3934   1D43 E4            pop a
3935   1D44             ; --- END TERMS
3936   1D44 E7            pop d
3937   1D45 FD 43         mov [d], b
3938   1D47 0A 4A 1D      jmp _if119_exit
3939   1D4A             _if119_exit:
3940   1D4A             ; if (ship_x < 100) { 
3941   1D4A             _if120_cond:
3942   1D4A 3B AB 68      mov d, _ship_x ; $ship_x
3943   1D4D 2A            mov b, [d]
3944   1D4E 38 00 00      mov c, 0
3945   1D51             ; --- START RELATIONAL
3946   1D51 D7            push a
3947   1D52 11            mov a, b
3948   1D53 FD 2E 64 00   mov32 cb, $00000064
3948   1D57 00 00 
3949   1D59 B0            cmp a, b
3950   1D5A FD 73         slt ; < (signed)
3951   1D5C E4            pop a
3952   1D5D             ; --- END RELATIONAL
3953   1D5D C0 00 00      cmp b, 0
3954   1D60 C6 97 1D      je _if120_exit
3955   1D63             _if120_TRUE:
3956   1D63             ; quad_x = quad_x - 1; 
3957   1D63 3B 8C 68      mov d, _quad_x ; $quad_x
3958   1D66 DA            push d
3959   1D67 3B 8C 68      mov d, _quad_x ; $quad_x
3960   1D6A 2A            mov b, [d]
3961   1D6B 38 00 00      mov c, 0
3962   1D6E             ; --- START TERMS
3963   1D6E D7            push a
3964   1D6F 11            mov a, b
3965   1D70 FD 2E 01 00   mov32 cb, $00000001
3965   1D74 00 00 
3966   1D76 60            sub a, b
3967   1D77 27            mov b, a
3968   1D78 E4            pop a
3969   1D79             ; --- END TERMS
3970   1D79 E7            pop d
3971   1D7A FD 43         mov [d], b
3972   1D7C             ; ship_x = ship_x + 800; 
3973   1D7C 3B AB 68      mov d, _ship_x ; $ship_x
3974   1D7F DA            push d
3975   1D80 3B AB 68      mov d, _ship_x ; $ship_x
3976   1D83 2A            mov b, [d]
3977   1D84 38 00 00      mov c, 0
3978   1D87             ; --- START TERMS
3979   1D87 D7            push a
3980   1D88 11            mov a, b
3981   1D89 FD 2E 20 03   mov32 cb, $00000320
3981   1D8D 00 00 
3982   1D8F 56            add b, a
3983   1D90 E4            pop a
3984   1D91             ; --- END TERMS
3985   1D91 E7            pop d
3986   1D92 FD 43         mov [d], b
3987   1D94 0A 97 1D      jmp _if120_exit
3988   1D97             _if120_exit:
3989   1D97             ; if (quad_y < 1) { 
3990   1D97             _if121_cond:
3991   1D97 3B 8A 68      mov d, _quad_y ; $quad_y
3992   1D9A 2A            mov b, [d]
3993   1D9B 38 00 00      mov c, 0
3994   1D9E             ; --- START RELATIONAL
3995   1D9E D7            push a
3996   1D9F 11            mov a, b
3997   1DA0 FD 2E 01 00   mov32 cb, $00000001
3997   1DA4 00 00 
3998   1DA6 B0            cmp a, b
3999   1DA7 FD 73         slt ; < (signed)
4000   1DA9 E4            pop a
4001   1DAA             ; --- END RELATIONAL
4002   1DAA C0 00 00      cmp b, 0
4003   1DAD C6 DA 1D      je _if121_exit
4004   1DB0             _if121_TRUE:
4005   1DB0             ; outside = 1; 
4006   1DB0 FA E6 FF      lea d, [bp + -26] ; $outside
4007   1DB3 DA            push d
4008   1DB4 FD 2E 01 00   mov32 cb, $00000001
4008   1DB8 00 00 
4009   1DBA E7            pop d
4010   1DBB FD 3E         mov [d], bl
4011   1DBD             ; quad_y = 1; 
4012   1DBD 3B 8A 68      mov d, _quad_y ; $quad_y
4013   1DC0 DA            push d
4014   1DC1 FD 2E 01 00   mov32 cb, $00000001
4014   1DC5 00 00 
4015   1DC7 E7            pop d
4016   1DC8 FD 43         mov [d], b
4017   1DCA             ; ship_y = 100; 
4018   1DCA 3B A9 68      mov d, _ship_y ; $ship_y
4019   1DCD DA            push d
4020   1DCE FD 2E 64 00   mov32 cb, $00000064
4020   1DD2 00 00 
4021   1DD4 E7            pop d
4022   1DD5 FD 43         mov [d], b
4023   1DD7 0A DA 1D      jmp _if121_exit
4024   1DDA             _if121_exit:
4025   1DDA             ; if (quad_y > 8) { 
4026   1DDA             _if122_cond:
4027   1DDA 3B 8A 68      mov d, _quad_y ; $quad_y
4028   1DDD 2A            mov b, [d]
4029   1DDE 38 00 00      mov c, 0
4030   1DE1             ; --- START RELATIONAL
4031   1DE1 D7            push a
4032   1DE2 11            mov a, b
4033   1DE3 FD 2E 08 00   mov32 cb, $00000008
4033   1DE7 00 00 
4034   1DE9 B0            cmp a, b
4035   1DEA FD 7F         sgt ; >
4036   1DEC E4            pop a
4037   1DED             ; --- END RELATIONAL
4038   1DED C0 00 00      cmp b, 0
4039   1DF0 C6 1D 1E      je _if122_exit
4040   1DF3             _if122_TRUE:
4041   1DF3             ; outside = 1; 
4042   1DF3 FA E6 FF      lea d, [bp + -26] ; $outside
4043   1DF6 DA            push d
4044   1DF7 FD 2E 01 00   mov32 cb, $00000001
4044   1DFB 00 00 
4045   1DFD E7            pop d
4046   1DFE FD 3E         mov [d], bl
4047   1E00             ; quad_y = 8; 
4048   1E00 3B 8A 68      mov d, _quad_y ; $quad_y
4049   1E03 DA            push d
4050   1E04 FD 2E 08 00   mov32 cb, $00000008
4050   1E08 00 00 
4051   1E0A E7            pop d
4052   1E0B FD 43         mov [d], b
4053   1E0D             ; ship_y = 800; 
4054   1E0D 3B A9 68      mov d, _ship_y ; $ship_y
4055   1E10 DA            push d
4056   1E11 FD 2E 20 03   mov32 cb, $00000320
4056   1E15 00 00 
4057   1E17 E7            pop d
4058   1E18 FD 43         mov [d], b
4059   1E1A 0A 1D 1E      jmp _if122_exit
4060   1E1D             _if122_exit:
4061   1E1D             ; if (quad_x < 1) { 
4062   1E1D             _if123_cond:
4063   1E1D 3B 8C 68      mov d, _quad_x ; $quad_x
4064   1E20 2A            mov b, [d]
4065   1E21 38 00 00      mov c, 0
4066   1E24             ; --- START RELATIONAL
4067   1E24 D7            push a
4068   1E25 11            mov a, b
4069   1E26 FD 2E 01 00   mov32 cb, $00000001
4069   1E2A 00 00 
4070   1E2C B0            cmp a, b
4071   1E2D FD 73         slt ; < (signed)
4072   1E2F E4            pop a
4073   1E30             ; --- END RELATIONAL
4074   1E30 C0 00 00      cmp b, 0
4075   1E33 C6 60 1E      je _if123_exit
4076   1E36             _if123_TRUE:
4077   1E36             ; outside = 1; 
4078   1E36 FA E6 FF      lea d, [bp + -26] ; $outside
4079   1E39 DA            push d
4080   1E3A FD 2E 01 00   mov32 cb, $00000001
4080   1E3E 00 00 
4081   1E40 E7            pop d
4082   1E41 FD 3E         mov [d], bl
4083   1E43             ; quad_x = 1; 
4084   1E43 3B 8C 68      mov d, _quad_x ; $quad_x
4085   1E46 DA            push d
4086   1E47 FD 2E 01 00   mov32 cb, $00000001
4086   1E4B 00 00 
4087   1E4D E7            pop d
4088   1E4E FD 43         mov [d], b
4089   1E50             ; ship_x = 100; 
4090   1E50 3B AB 68      mov d, _ship_x ; $ship_x
4091   1E53 DA            push d
4092   1E54 FD 2E 64 00   mov32 cb, $00000064
4092   1E58 00 00 
4093   1E5A E7            pop d
4094   1E5B FD 43         mov [d], b
4095   1E5D 0A 60 1E      jmp _if123_exit
4096   1E60             _if123_exit:
4097   1E60             ; if (quad_x > 8) { 
4098   1E60             _if124_cond:
4099   1E60 3B 8C 68      mov d, _quad_x ; $quad_x
4100   1E63 2A            mov b, [d]
4101   1E64 38 00 00      mov c, 0
4102   1E67             ; --- START RELATIONAL
4103   1E67 D7            push a
4104   1E68 11            mov a, b
4105   1E69 FD 2E 08 00   mov32 cb, $00000008
4105   1E6D 00 00 
4106   1E6F B0            cmp a, b
4107   1E70 FD 7F         sgt ; >
4108   1E72 E4            pop a
4109   1E73             ; --- END RELATIONAL
4110   1E73 C0 00 00      cmp b, 0
4111   1E76 C6 A3 1E      je _if124_exit
4112   1E79             _if124_TRUE:
4113   1E79             ; outside = 1; 
4114   1E79 FA E6 FF      lea d, [bp + -26] ; $outside
4115   1E7C DA            push d
4116   1E7D FD 2E 01 00   mov32 cb, $00000001
4116   1E81 00 00 
4117   1E83 E7            pop d
4118   1E84 FD 3E         mov [d], bl
4119   1E86             ; quad_x = 8; 
4120   1E86 3B 8C 68      mov d, _quad_x ; $quad_x
4121   1E89 DA            push d
4122   1E8A FD 2E 08 00   mov32 cb, $00000008
4122   1E8E 00 00 
4123   1E90 E7            pop d
4124   1E91 FD 43         mov [d], b
4125   1E93             ; ship_x = 800; 
4126   1E93 3B AB 68      mov d, _ship_x ; $ship_x
4127   1E96 DA            push d
4128   1E97 FD 2E 20 03   mov32 cb, $00000320
4128   1E9B 00 00 
4129   1E9D E7            pop d
4130   1E9E FD 43         mov [d], b
4131   1EA0 0A A3 1E      jmp _if124_exit
4132   1EA3             _if124_exit:
4133   1EA3             ; if (outside == 1) { 
4134   1EA3             _if125_cond:
4135   1EA3 FA E6 FF      lea d, [bp + -26] ; $outside
4136   1EA6 32            mov bl, [d]
4137   1EA7 A7 00         mov bh, 0
4138   1EA9 38 00 00      mov c, 0
4139   1EAC             ; --- START RELATIONAL
4140   1EAC D7            push a
4141   1EAD 11            mov a, b
4142   1EAE FD 2E 01 00   mov32 cb, $00000001
4142   1EB2 00 00 
4143   1EB4 B0            cmp a, b
4144   1EB5 FD 71         seq ; ==
4145   1EB7 E4            pop a
4146   1EB8             ; --- END RELATIONAL
4147   1EB8 C0 00 00      cmp b, 0
4148   1EBB C6 07 1F      je _if125_exit
4149   1EBE             _if125_TRUE:
4150   1EBE             ; printf("LT. Uhura reports:\n Message from Starfleet Command:\n\n Permission to attempt crossing of galactic perimeter\n is hereby *denied*. Shut down your engines.\n\n Chief Engineer Scott reports:\n Warp Engines shut down at sector %d, %d of quadrant %d, %d.\n\n", FROM_FIXED00(ship_y), 
4151   1EBE             ; --- START FUNCTION CALL
4152   1EBE 3B 8C 68      mov d, _quad_x ; $quad_x
4153   1EC1 2A            mov b, [d]
4154   1EC2 38 00 00      mov c, 0
4155   1EC5 FD AB         swp b
4156   1EC7 D8            push b
4157   1EC8 3B 8A 68      mov d, _quad_y ; $quad_y
4158   1ECB 2A            mov b, [d]
4159   1ECC 38 00 00      mov c, 0
4160   1ECF FD AB         swp b
4161   1ED1 D8            push b
4162   1ED2             ; --- START FUNCTION CALL
4163   1ED2 3B AB 68      mov d, _ship_x ; $ship_x
4164   1ED5 2A            mov b, [d]
4165   1ED6 38 00 00      mov c, 0
4166   1ED9 FD AB         swp b
4167   1EDB D8            push b
4168   1EDC 07 72 04      call FROM_FIXED00
4169   1EDF 51 02 00      add sp, 2
4170   1EE2             ; --- END FUNCTION CALL
4171   1EE2 FD AB         swp b
4172   1EE4 D8            push b
4173   1EE5             ; --- START FUNCTION CALL
4174   1EE5 3B A9 68      mov d, _ship_y ; $ship_y
4175   1EE8 2A            mov b, [d]
4176   1EE9 38 00 00      mov c, 0
4177   1EEC FD AB         swp b
4178   1EEE D8            push b
4179   1EEF 07 72 04      call FROM_FIXED00
4180   1EF2 51 02 00      add sp, 2
4181   1EF5             ; --- END FUNCTION CALL
4182   1EF5 FD AB         swp b
4183   1EF7 D8            push b
4184   1EF8 26 28 6F      mov b, _s71 ; "LT. Uhura reports:\n Message from Starfleet Command:\n\n Permission to attempt crossing of galactic perimeter\n is hereby *denied*. Shut down your engines.\n\n Chief Engineer Scott reports:\n Warp Engines shut down at sector %d, %d of quadrant %d, %d.\n\n"
4185   1EFB FD AB         swp b
4186   1EFD D8            push b
4187   1EFE 07 2C 5B      call printf
4188   1F01 51 0A 00      add sp, 10
4189   1F04             ; --- END FUNCTION CALL
4190   1F04 0A 07 1F      jmp _if125_exit
4191   1F07             _if125_exit:
4192   1F07             ; maneuver_energy(n); 
4193   1F07             ; --- START FUNCTION CALL
4194   1F07 FA F9 FF      lea d, [bp + -7] ; $n
4195   1F0A 2A            mov b, [d]
4196   1F0B 38 00 00      mov c, 0
4197   1F0E FD AB         swp b
4198   1F10 D8            push b
4199   1F11 07 6B 21      call maneuver_energy
4200   1F14 51 02 00      add sp, 2
4201   1F17             ; --- END FUNCTION CALL
4202   1F17             ; if (FROM_FIXED(stardate) > time_start + time_up) 
4203   1F17             _if126_cond:
4204   1F17             ; --- START FUNCTION CALL
4205   1F17 3B AD 68      mov d, _stardate ; $stardate
4206   1F1A 2A            mov b, [d]
4207   1F1B 38 00 00      mov c, 0
4208   1F1E FD AB         swp b
4209   1F20 D8            push b
4210   1F21 07 35 04      call FROM_FIXED
4211   1F24 51 02 00      add sp, 2
4212   1F27             ; --- END FUNCTION CALL
4213   1F27             ; --- START RELATIONAL
4214   1F27 D7            push a
4215   1F28 11            mov a, b
4216   1F29 3B 91 68      mov d, _time_start ; $time_start
4217   1F2C 2A            mov b, [d]
4218   1F2D 38 00 00      mov c, 0
4219   1F30             ; --- START TERMS
4220   1F30 D7            push a
4221   1F31 11            mov a, b
4222   1F32 3B 93 68      mov d, _time_up ; $time_up
4223   1F35 2A            mov b, [d]
4224   1F36 38 00 00      mov c, 0
4225   1F39 56            add b, a
4226   1F3A E4            pop a
4227   1F3B             ; --- END TERMS
4228   1F3B B0            cmp a, b
4229   1F3C FD 7F         sgt ; >
4230   1F3E E4            pop a
4231   1F3F             ; --- END RELATIONAL
4232   1F3F C0 00 00      cmp b, 0
4233   1F42 C6 4B 1F      je _if126_exit
4234   1F45             _if126_TRUE:
4235   1F45             ; end_of_time(); 
4236   1F45             ; --- START FUNCTION CALL
4237   1F45 07 53 4A      call end_of_time
4238   1F48 0A 4B 1F      jmp _if126_exit
4239   1F4B             _if126_exit:
4240   1F4B             ; if (quad_y != quad_y_old || quad_x != quad_x_old) { 
4241   1F4B             _if127_cond:
4242   1F4B 3B 8A 68      mov d, _quad_y ; $quad_y
4243   1F4E 2A            mov b, [d]
4244   1F4F 38 00 00      mov c, 0
4245   1F52             ; --- START RELATIONAL
4246   1F52 D7            push a
4247   1F53 11            mov a, b
4248   1F54 FA E5 FF      lea d, [bp + -27] ; $quad_y_old
4249   1F57 32            mov bl, [d]
4250   1F58 A7 00         mov bh, 0
4251   1F5A 38 00 00      mov c, 0
4252   1F5D B0            cmp a, b
4253   1F5E FD 72         sneq ; !=
4254   1F60 E4            pop a
4255   1F61             ; --- END RELATIONAL
4256   1F61             ; --- START LOGICAL OR
4257   1F61 D7            push a
4258   1F62 11            mov a, b
4259   1F63 3B 8C 68      mov d, _quad_x ; $quad_x
4260   1F66 2A            mov b, [d]
4261   1F67 38 00 00      mov c, 0
4262   1F6A             ; --- START RELATIONAL
4263   1F6A D7            push a
4264   1F6B 11            mov a, b
4265   1F6C FA E4 FF      lea d, [bp + -28] ; $quad_x_old
4266   1F6F 32            mov bl, [d]
4267   1F70 A7 00         mov bh, 0
4268   1F72 38 00 00      mov c, 0
4269   1F75 B0            cmp a, b
4270   1F76 FD 72         sneq ; !=
4271   1F78 E4            pop a
4272   1F79             ; --- END RELATIONAL
4273   1F79 FD A8         sor a, b ; ||
4274   1F7B E4            pop a
4275   1F7C             ; --- END LOGICAL OR
4276   1F7C C0 00 00      cmp b, 0
4277   1F7F C6 A9 1F      je _if127_exit
4278   1F82             _if127_TRUE:
4279   1F82             ; stardate = stardate + TO_FIXED(1); 
4280   1F82 3B AD 68      mov d, _stardate ; $stardate
4281   1F85 DA            push d
4282   1F86 3B AD 68      mov d, _stardate ; $stardate
4283   1F89 2A            mov b, [d]
4284   1F8A 38 00 00      mov c, 0
4285   1F8D             ; --- START TERMS
4286   1F8D D7            push a
4287   1F8E 11            mov a, b
4288   1F8F             ; --- START FUNCTION CALL
4289   1F8F FD 2E 01 00   mov32 cb, $00000001
4289   1F93 00 00 
4290   1F95 FD AB         swp b
4291   1F97 D8            push b
4292   1F98 07 17 04      call TO_FIXED
4293   1F9B 51 02 00      add sp, 2
4294   1F9E             ; --- END FUNCTION CALL
4295   1F9E 56            add b, a
4296   1F9F E4            pop a
4297   1FA0             ; --- END TERMS
4298   1FA0 E7            pop d
4299   1FA1 FD 43         mov [d], b
4300   1FA3             ; new_quadrant(); 
4301   1FA3             ; --- START FUNCTION CALL
4302   1FA3 07 8C 11      call new_quadrant
4303   1FA6 0A A9 1F      jmp _if127_exit
4304   1FA9             _if127_exit:
4305   1FA9             ; complete_maneuver(warp, n); 
4306   1FA9             ; --- START FUNCTION CALL
4307   1FA9 FA F9 FF      lea d, [bp + -7] ; $n
4308   1FAC 2A            mov b, [d]
4309   1FAD 38 00 00      mov c, 0
4310   1FB0 FD AB         swp b
4311   1FB2 D8            push b
4312   1FB3 FA FB FF      lea d, [bp + -5] ; $warp
4313   1FB6 2A            mov b, [d]
4314   1FB7 38 00 00      mov c, 0
4315   1FBA FD AB         swp b
4316   1FBC D8            push b
4317   1FBD 07 AE 20      call complete_maneuver
4318   1FC0 51 04 00      add sp, 4
4319   1FC3             ; --- END FUNCTION CALL
4320   1FC3             ; return; 
4321   1FC3 F9            leave
4322   1FC4 09            ret
4323   1FC5 0A C8 1F      jmp _if90_exit
4324   1FC8             _if90_exit:
4325   1FC8             ; if (quad[z1+-1][z2+-1] != 		0       ) {	/* Sector not empty */ 
4326   1FC8             _if128_cond:
4327   1FC8 3B AF 68      mov d, _quad_data ; $quad
4328   1FCB D7            push a
4329   1FCC DA            push d
4330   1FCD FA F1 FF      lea d, [bp + -15] ; $z1
4331   1FD0 2A            mov b, [d]
4332   1FD1 38 00 00      mov c, 0
4333   1FD4             ; --- START TERMS
4334   1FD4 D7            push a
4335   1FD5 11            mov a, b
4336   1FD6 FD 2E FF FF   mov32 cb, $ffffffff
4336   1FDA FF FF 
4337   1FDC 56            add b, a
4338   1FDD E4            pop a
4339   1FDE             ; --- END TERMS
4340   1FDE E7            pop d
4341   1FDF FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
4342   1FE3 DA            push d
4343   1FE4 FA EF FF      lea d, [bp + -17] ; $z2
4344   1FE7 2A            mov b, [d]
4345   1FE8 38 00 00      mov c, 0
4346   1FEB             ; --- START TERMS
4347   1FEB D7            push a
4348   1FEC 11            mov a, b
4349   1FED FD 2E FF FF   mov32 cb, $ffffffff
4349   1FF1 FF FF 
4350   1FF3 56            add b, a
4351   1FF4 E4            pop a
4352   1FF5             ; --- END TERMS
4353   1FF5 E7            pop d
4354   1FF6 5A            add d, b
4355   1FF7 E4            pop a
4356   1FF8 32            mov bl, [d]
4357   1FF9 A7 00         mov bh, 0
4358   1FFB 38 00 00      mov c, 0
4359   1FFE             ; --- START RELATIONAL
4360   1FFE D7            push a
4361   1FFF 11            mov a, b
4362   2000 FD 2E 00 00   mov32 cb, $00000000
4362   2004 00 00 
4363   2006 B0            cmp a, b
4364   2007 FD 72         sneq ; !=
4365   2009 E4            pop a
4366   200A             ; --- END RELATIONAL
4367   200A C0 00 00      cmp b, 0
4368   200D C6 7F 20      je _if128_exit
4369   2010             _if128_TRUE:
4370   2010             ; ship_y = ship_y - x1; 
4371   2010 3B A9 68      mov d, _ship_y ; $ship_y
4372   2013 DA            push d
4373   2014 3B A9 68      mov d, _ship_y ; $ship_y
4374   2017 2A            mov b, [d]
4375   2018 38 00 00      mov c, 0
4376   201B             ; --- START TERMS
4377   201B D7            push a
4378   201C 11            mov a, b
4379   201D FA ED FF      lea d, [bp + -19] ; $x1
4380   2020 2A            mov b, [d]
4381   2021 38 00 00      mov c, 0
4382   2024 60            sub a, b
4383   2025 27            mov b, a
4384   2026 E4            pop a
4385   2027             ; --- END TERMS
4386   2027 E7            pop d
4387   2028 FD 43         mov [d], b
4388   202A             ; ship_x = ship_x - x2; 
4389   202A 3B AB 68      mov d, _ship_x ; $ship_x
4390   202D DA            push d
4391   202E 3B AB 68      mov d, _ship_x ; $ship_x
4392   2031 2A            mov b, [d]
4393   2032 38 00 00      mov c, 0
4394   2035             ; --- START TERMS
4395   2035 D7            push a
4396   2036 11            mov a, b
4397   2037 FA EB FF      lea d, [bp + -21] ; $x2
4398   203A 2A            mov b, [d]
4399   203B 38 00 00      mov c, 0
4400   203E 60            sub a, b
4401   203F 27            mov b, a
4402   2040 E4            pop a
4403   2041             ; --- END TERMS
4404   2041 E7            pop d
4405   2042 FD 43         mov [d], b
4406   2044             ; printf("Warp Engines shut down at sector %d, %d due to bad navigation.\n\n", z1, z2); 
4407   2044             ; --- START FUNCTION CALL
4408   2044 FA EF FF      lea d, [bp + -17] ; $z2
4409   2047 2A            mov b, [d]
4410   2048 38 00 00      mov c, 0
4411   204B FD AB         swp b
4412   204D D8            push b
4413   204E FA F1 FF      lea d, [bp + -15] ; $z1
4414   2051 2A            mov b, [d]
4415   2052 38 00 00      mov c, 0
4416   2055 FD AB         swp b
4417   2057 D8            push b
4418   2058 26 1F 70      mov b, _s72 ; "Warp Engines shut down at sector %d, %d due to bad navigation.\n\n"
4419   205B FD AB         swp b
4420   205D D8            push b
4421   205E 07 2C 5B      call printf
4422   2061 51 06 00      add sp, 6
4423   2064             ; --- END FUNCTION CALL
4424   2064             ; i = n + 1; 
4425   2064 FA FF FF      lea d, [bp + -1] ; $i
4426   2067 DA            push d
4427   2068 FA F9 FF      lea d, [bp + -7] ; $n
4428   206B 2A            mov b, [d]
4429   206C 38 00 00      mov c, 0
4430   206F             ; --- START TERMS
4431   206F D7            push a
4432   2070 11            mov a, b
4433   2071 FD 2E 01 00   mov32 cb, $00000001
4433   2075 00 00 
4434   2077 56            add b, a
4435   2078 E4            pop a
4436   2079             ; --- END TERMS
4437   2079 E7            pop d
4438   207A FD 43         mov [d], b
4439   207C 0A 7F 20      jmp _if128_exit
4440   207F             _if128_exit:
4441   207F             _for89_update:
4442   207F FA FF FF      lea d, [bp + -1] ; $i
4443   2082 2A            mov b, [d]
4444   2083 38 00 00      mov c, 0
4445   2086 11            mov a, b
4446   2087 FD 77         inc b
4447   2089 FA FF FF      lea d, [bp + -1] ; $i
4448   208C FD 43         mov [d], b
4449   208E 27            mov b, a
4450   208F 0A D5 1A      jmp _for89_cond
4451   2092             _for89_exit:
4452   2092             ; complete_maneuver(warp, n); 
4453   2092             ; --- START FUNCTION CALL
4454   2092 FA F9 FF      lea d, [bp + -7] ; $n
4455   2095 2A            mov b, [d]
4456   2096 38 00 00      mov c, 0
4457   2099 FD AB         swp b
4458   209B D8            push b
4459   209C FA FB FF      lea d, [bp + -5] ; $warp
4460   209F 2A            mov b, [d]
4461   20A0 38 00 00      mov c, 0
4462   20A3 FD AB         swp b
4463   20A5 D8            push b
4464   20A6 07 AE 20      call complete_maneuver
4465   20A9 51 04 00      add sp, 4
4466   20AC             ; --- END FUNCTION CALL
4467   20AC F9            leave
4468   20AD 09            ret
4469   20AE             
4470   20AE             complete_maneuver:
4471   20AE F8 00 00      enter 0 ; (push bp; mov bp, sp)
4472   20B1             ; unsigned int         time_used; 
4473   20B1 52 02 00      sub sp, 2
4474   20B4             ; place_ship(); 
4475   20B4             ; --- START FUNCTION CALL
4476   20B4 07 39 11      call place_ship
4477   20B7             ; maneuver_energy(n); 
4478   20B7             ; --- START FUNCTION CALL
4479   20B7 FA 07 00      lea d, [bp + 7] ; $n
4480   20BA 2A            mov b, [d]
4481   20BB 38 00 00      mov c, 0
4482   20BE FD AB         swp b
4483   20C0 D8            push b
4484   20C1 07 6B 21      call maneuver_energy
4485   20C4 51 02 00      add sp, 2
4486   20C7             ; --- END FUNCTION CALL
4487   20C7             ; time_used = TO_FIXED(1); 
4488   20C7 FA FF FF      lea d, [bp + -1] ; $time_used
4489   20CA DA            push d
4490   20CB             ; --- START FUNCTION CALL
4491   20CB FD 2E 01 00   mov32 cb, $00000001
4491   20CF 00 00 
4492   20D1 FD AB         swp b
4493   20D3 D8            push b
4494   20D4 07 17 04      call TO_FIXED
4495   20D7 51 02 00      add sp, 2
4496   20DA             ; --- END FUNCTION CALL
4497   20DA E7            pop d
4498   20DB FD 43         mov [d], b
4499   20DD             ; if (warp < 100) 
4500   20DD             _if129_cond:
4501   20DD FA 05 00      lea d, [bp + 5] ; $warp
4502   20E0 2A            mov b, [d]
4503   20E1 38 00 00      mov c, 0
4504   20E4             ; --- START RELATIONAL
4505   20E4 D7            push a
4506   20E5 11            mov a, b
4507   20E6 FD 2E 64 00   mov32 cb, $00000064
4507   20EA 00 00 
4508   20EC B0            cmp a, b
4509   20ED FD 75         slu ; < (unsigned)
4510   20EF E4            pop a
4511   20F0             ; --- END RELATIONAL
4512   20F0 C0 00 00      cmp b, 0
4513   20F3 C6 19 21      je _if129_exit
4514   20F6             _if129_TRUE:
4515   20F6             ; time_used = TO_FIXED(FROM_FIXED00(warp)); 
4516   20F6 FA FF FF      lea d, [bp + -1] ; $time_used
4517   20F9 DA            push d
4518   20FA             ; --- START FUNCTION CALL
4519   20FA             ; --- START FUNCTION CALL
4520   20FA FA 05 00      lea d, [bp + 5] ; $warp
4521   20FD 2A            mov b, [d]
4522   20FE 38 00 00      mov c, 0
4523   2101 FD AB         swp b
4524   2103 D8            push b
4525   2104 07 72 04      call FROM_FIXED00
4526   2107 51 02 00      add sp, 2
4527   210A             ; --- END FUNCTION CALL
4528   210A FD AB         swp b
4529   210C D8            push b
4530   210D 07 17 04      call TO_FIXED
4531   2110 51 02 00      add sp, 2
4532   2113             ; --- END FUNCTION CALL
4533   2113 E7            pop d
4534   2114 FD 43         mov [d], b
4535   2116 0A 19 21      jmp _if129_exit
4536   2119             _if129_exit:
4537   2119             ; stardate = stardate + time_used; 
4538   2119 3B AD 68      mov d, _stardate ; $stardate
4539   211C DA            push d
4540   211D 3B AD 68      mov d, _stardate ; $stardate
4541   2120 2A            mov b, [d]
4542   2121 38 00 00      mov c, 0
4543   2124             ; --- START TERMS
4544   2124 D7            push a
4545   2125 11            mov a, b
4546   2126 FA FF FF      lea d, [bp + -1] ; $time_used
4547   2129 2A            mov b, [d]
4548   212A 38 00 00      mov c, 0
4549   212D 56            add b, a
4550   212E E4            pop a
4551   212F             ; --- END TERMS
4552   212F E7            pop d
4553   2130 FD 43         mov [d], b
4554   2132             ; if (FROM_FIXED(stardate) > time_start + time_up) 
4555   2132             _if130_cond:
4556   2132             ; --- START FUNCTION CALL
4557   2132 3B AD 68      mov d, _stardate ; $stardate
4558   2135 2A            mov b, [d]
4559   2136 38 00 00      mov c, 0
4560   2139 FD AB         swp b
4561   213B D8            push b
4562   213C 07 35 04      call FROM_FIXED
4563   213F 51 02 00      add sp, 2
4564   2142             ; --- END FUNCTION CALL
4565   2142             ; --- START RELATIONAL
4566   2142 D7            push a
4567   2143 11            mov a, b
4568   2144 3B 91 68      mov d, _time_start ; $time_start
4569   2147 2A            mov b, [d]
4570   2148 38 00 00      mov c, 0
4571   214B             ; --- START TERMS
4572   214B D7            push a
4573   214C 11            mov a, b
4574   214D 3B 93 68      mov d, _time_up ; $time_up
4575   2150 2A            mov b, [d]
4576   2151 38 00 00      mov c, 0
4577   2154 56            add b, a
4578   2155 E4            pop a
4579   2156             ; --- END TERMS
4580   2156 B0            cmp a, b
4581   2157 FD 7F         sgt ; >
4582   2159 E4            pop a
4583   215A             ; --- END RELATIONAL
4584   215A C0 00 00      cmp b, 0
4585   215D C6 66 21      je _if130_exit
4586   2160             _if130_TRUE:
4587   2160             ; end_of_time(); 
4588   2160             ; --- START FUNCTION CALL
4589   2160 07 53 4A      call end_of_time
4590   2163 0A 66 21      jmp _if130_exit
4591   2166             _if130_exit:
4592   2166             ; short_range_scan(); 
4593   2166             ; --- START FUNCTION CALL
4594   2166 07 0B 22      call short_range_scan
4595   2169 F9            leave
4596   216A 09            ret
4597   216B             
4598   216B             maneuver_energy:
4599   216B F8 00 00      enter 0 ; (push bp; mov bp, sp)
4600   216E             ; energy = energy - n + 10; 
4601   216E 3B D3 67      mov d, _energy ; $energy
4602   2171 DA            push d
4603   2172 3B D3 67      mov d, _energy ; $energy
4604   2175 2A            mov b, [d]
4605   2176 38 00 00      mov c, 0
4606   2179             ; --- START TERMS
4607   2179 D7            push a
4608   217A 11            mov a, b
4609   217B FA 05 00      lea d, [bp + 5] ; $n
4610   217E 2A            mov b, [d]
4611   217F 38 00 00      mov c, 0
4612   2182 60            sub a, b
4613   2183 27            mov b, a
4614   2184 11            mov a, b
4615   2185 FD 2E 0A 00   mov32 cb, $0000000a
4615   2189 00 00 
4616   218B 56            add b, a
4617   218C E4            pop a
4618   218D             ; --- END TERMS
4619   218D E7            pop d
4620   218E FD 43         mov [d], b
4621   2190             ; if (energy >= 0) 
4622   2190             _if131_cond:
4623   2190 3B D3 67      mov d, _energy ; $energy
4624   2193 2A            mov b, [d]
4625   2194 38 00 00      mov c, 0
4626   2197             ; --- START RELATIONAL
4627   2197 D7            push a
4628   2198 11            mov a, b
4629   2199 FD 2E 00 00   mov32 cb, $00000000
4629   219D 00 00 
4630   219F B0            cmp a, b
4631   21A0 FD 80         sge ; >=
4632   21A2 E4            pop a
4633   21A3             ; --- END RELATIONAL
4634   21A3 C0 00 00      cmp b, 0
4635   21A6 C6 AE 21      je _if131_exit
4636   21A9             _if131_TRUE:
4637   21A9             ; return; 
4638   21A9 F9            leave
4639   21AA 09            ret
4640   21AB 0A AE 21      jmp _if131_exit
4641   21AE             _if131_exit:
4642   21AE             ; puts("Shield Control supplies energy to complete maneuver.\n"); 
4643   21AE             ; --- START FUNCTION CALL
4644   21AE 26 60 70      mov b, _s73 ; "Shield Control supplies energy to complete maneuver.\n"
4645   21B1 FD AB         swp b
4646   21B3 D8            push b
4647   21B4 07 19 64      call puts
4648   21B7 51 02 00      add sp, 2
4649   21BA             ; --- END FUNCTION CALL
4650   21BA             ; shield = shield + energy; 
4651   21BA 3B 8E 68      mov d, _shield ; $shield
4652   21BD DA            push d
4653   21BE 3B 8E 68      mov d, _shield ; $shield
4654   21C1 2A            mov b, [d]
4655   21C2 38 00 00      mov c, 0
4656   21C5             ; --- START TERMS
4657   21C5 D7            push a
4658   21C6 11            mov a, b
4659   21C7 3B D3 67      mov d, _energy ; $energy
4660   21CA 2A            mov b, [d]
4661   21CB 38 00 00      mov c, 0
4662   21CE 56            add b, a
4663   21CF E4            pop a
4664   21D0             ; --- END TERMS
4665   21D0 E7            pop d
4666   21D1 FD 43         mov [d], b
4667   21D3             ; energy = 0; 
4668   21D3 3B D3 67      mov d, _energy ; $energy
4669   21D6 DA            push d
4670   21D7 FD 2E 00 00   mov32 cb, $00000000
4670   21DB 00 00 
4671   21DD E7            pop d
4672   21DE FD 43         mov [d], b
4673   21E0             ; if (shield <= 0) 
4674   21E0             _if132_cond:
4675   21E0 3B 8E 68      mov d, _shield ; $shield
4676   21E3 2A            mov b, [d]
4677   21E4 38 00 00      mov c, 0
4678   21E7             ; --- START RELATIONAL
4679   21E7 D7            push a
4680   21E8 11            mov a, b
4681   21E9 FD 2E 00 00   mov32 cb, $00000000
4681   21ED 00 00 
4682   21EF B0            cmp a, b
4683   21F0 FD 74         sle ; <= (signed)
4684   21F2 E4            pop a
4685   21F3             ; --- END RELATIONAL
4686   21F3 C0 00 00      cmp b, 0
4687   21F6 C6 09 22      je _if132_exit
4688   21F9             _if132_TRUE:
4689   21F9             ; shield = 0; 
4690   21F9 3B 8E 68      mov d, _shield ; $shield
4691   21FC DA            push d
4692   21FD FD 2E 00 00   mov32 cb, $00000000
4692   2201 00 00 
4693   2203 E7            pop d
4694   2204 FD 43         mov [d], b
4695   2206 0A 09 22      jmp _if132_exit
4696   2209             _if132_exit:
4697   2209 F9            leave
4698   220A 09            ret
4699   220B             
4700   220B             short_range_scan:
4701   220B F8 00 00      enter 0 ; (push bp; mov bp, sp)
4702   220E             ; int i, j; 
4703   220E 52 02 00      sub sp, 2
4704   2211 52 02 00      sub sp, 2
4705   2214             ; char *sC = "GREEN"; 
4706   2214 52 02 00      sub sp, 2
4707   2217             ; --- START LOCAL VAR INITIALIZATION
4708   2217 FA FB FF      lea d, [bp + -5] ; $sC
4709   221A DA            push d
4710   221B 26 96 70      mov b, _s74 ; "GREEN"
4711   221E E7            pop d
4712   221F FD 43         mov [d], b
4713   2221             ; --- END LOCAL VAR INITIALIZATION
4714   2221             ; if (energy < energy0 / 10) 
4715   2221             _if133_cond:
4716   2221 3B D3 67      mov d, _energy ; $energy
4717   2224 2A            mov b, [d]
4718   2225 38 00 00      mov c, 0
4719   2228             ; --- START RELATIONAL
4720   2228 D7            push a
4721   2229 11            mov a, b
4722   222A 3B D5 67      mov d, _energy0 ; $energy0
4723   222D 2A            mov b, [d]
4724   222E 38 00 00      mov c, 0
4725   2231             ; --- START FACTORS
4726   2231 D7            push a
4727   2232 FD D8         push g
4728   2234 11            mov a, b
4729   2235 FD 7A         mov g, c
4730   2237 FD 2E 0A 00   mov32 cb, $0000000a
4730   223B 00 00 
4731   223D AE            div a, b
4732   223E FD 38         mov c, g
4733   2240 27            mov b, a
4734   2241 FD F1         pop g
4735   2243 E4            pop a
4736   2244             ; --- END FACTORS
4737   2244 B0            cmp a, b
4738   2245 FD 73         slt ; < (signed)
4739   2247 E4            pop a
4740   2248             ; --- END RELATIONAL
4741   2248 C0 00 00      cmp b, 0
4742   224B C6 5B 22      je _if133_exit
4743   224E             _if133_TRUE:
4744   224E             ; sC = "YELLOW"; 
4745   224E FA FB FF      lea d, [bp + -5] ; $sC
4746   2251 DA            push d
4747   2252 26 9C 70      mov b, _s75 ; "YELLOW"
4748   2255 E7            pop d
4749   2256 FD 43         mov [d], b
4750   2258 0A 5B 22      jmp _if133_exit
4751   225B             _if133_exit:
4752   225B             ; if (klingons > 0) 
4753   225B             _if136_cond:
4754   225B 3B 85 68      mov d, _klingons ; $klingons
4755   225E 32            mov bl, [d]
4756   225F A7 00         mov bh, 0
4757   2261 38 00 00      mov c, 0
4758   2264             ; --- START RELATIONAL
4759   2264 D7            push a
4760   2265 11            mov a, b
4761   2266 FD 2E 00 00   mov32 cb, $00000000
4761   226A 00 00 
4762   226C B0            cmp a, b
4763   226D FD 81         sgu ; > (unsigned)
4764   226F E4            pop a
4765   2270             ; --- END RELATIONAL
4766   2270 C0 00 00      cmp b, 0
4767   2273 C6 83 22      je _if136_exit
4768   2276             _if136_TRUE:
4769   2276             ; sC = "*RED*"; 
4770   2276 FA FB FF      lea d, [bp + -5] ; $sC
4771   2279 DA            push d
4772   227A 26 A3 70      mov b, _s76 ; "*RED*"
4773   227D E7            pop d
4774   227E FD 43         mov [d], b
4775   2280 0A 83 22      jmp _if136_exit
4776   2283             _if136_exit:
4777   2283             ; docked = 0; 
4778   2283 3B D2 67      mov d, _docked ; $docked
4779   2286 DA            push d
4780   2287 FD 2E 00 00   mov32 cb, $00000000
4780   228B 00 00 
4781   228D E7            pop d
4782   228E FD 3E         mov [d], bl
4783   2290             ; for (i = (int) (FROM_FIXED00(ship_y) - 1); i <= (int) (FROM_FIXED00(ship_y) + 1); i++) 
4784   2290             _for137_init:
4785   2290 FA FF FF      lea d, [bp + -1] ; $i
4786   2293 DA            push d
4787   2294             ; --- START FUNCTION CALL
4788   2294 3B A9 68      mov d, _ship_y ; $ship_y
4789   2297 2A            mov b, [d]
4790   2298 38 00 00      mov c, 0
4791   229B FD AB         swp b
4792   229D D8            push b
4793   229E 07 72 04      call FROM_FIXED00
4794   22A1 51 02 00      add sp, 2
4795   22A4             ; --- END FUNCTION CALL
4796   22A4             ; --- START TERMS
4797   22A4 D7            push a
4798   22A5 11            mov a, b
4799   22A6 FD 2E 01 00   mov32 cb, $00000001
4799   22AA 00 00 
4800   22AC 60            sub a, b
4801   22AD 27            mov b, a
4802   22AE E4            pop a
4803   22AF             ; --- END TERMS
4804   22AF E7            pop d
4805   22B0 FD 43         mov [d], b
4806   22B2             _for137_cond:
4807   22B2 FA FF FF      lea d, [bp + -1] ; $i
4808   22B5 2A            mov b, [d]
4809   22B6 38 00 00      mov c, 0
4810   22B9             ; --- START RELATIONAL
4811   22B9 D7            push a
4812   22BA 11            mov a, b
4813   22BB             ; --- START FUNCTION CALL
4814   22BB 3B A9 68      mov d, _ship_y ; $ship_y
4815   22BE 2A            mov b, [d]
4816   22BF 38 00 00      mov c, 0
4817   22C2 FD AB         swp b
4818   22C4 D8            push b
4819   22C5 07 72 04      call FROM_FIXED00
4820   22C8 51 02 00      add sp, 2
4821   22CB             ; --- END FUNCTION CALL
4822   22CB             ; --- START TERMS
4823   22CB D7            push a
4824   22CC 11            mov a, b
4825   22CD FD 2E 01 00   mov32 cb, $00000001
4825   22D1 00 00 
4826   22D3 56            add b, a
4827   22D4 E4            pop a
4828   22D5             ; --- END TERMS
4829   22D5 B0            cmp a, b
4830   22D6 FD 74         sle ; <= (signed)
4831   22D8 E4            pop a
4832   22D9             ; --- END RELATIONAL
4833   22D9 C0 00 00      cmp b, 0
4834   22DC C6 4D 24      je _for137_exit
4835   22DF             _for137_block:
4836   22DF             ; for (j = (int) (FROM_FIXED00(ship_x) - 1); j <= (int) (FROM_FIXED00(ship_x) + 1); j++) 
4837   22DF             _for138_init:
4838   22DF FA FD FF      lea d, [bp + -3] ; $j
4839   22E2 DA            push d
4840   22E3             ; --- START FUNCTION CALL
4841   22E3 3B AB 68      mov d, _ship_x ; $ship_x
4842   22E6 2A            mov b, [d]
4843   22E7 38 00 00      mov c, 0
4844   22EA FD AB         swp b
4845   22EC D8            push b
4846   22ED 07 72 04      call FROM_FIXED00
4847   22F0 51 02 00      add sp, 2
4848   22F3             ; --- END FUNCTION CALL
4849   22F3             ; --- START TERMS
4850   22F3 D7            push a
4851   22F4 11            mov a, b
4852   22F5 FD 2E 01 00   mov32 cb, $00000001
4852   22F9 00 00 
4853   22FB 60            sub a, b
4854   22FC 27            mov b, a
4855   22FD E4            pop a
4856   22FE             ; --- END TERMS
4857   22FE E7            pop d
4858   22FF FD 43         mov [d], b
4859   2301             _for138_cond:
4860   2301 FA FD FF      lea d, [bp + -3] ; $j
4861   2304 2A            mov b, [d]
4862   2305 38 00 00      mov c, 0
4863   2308             ; --- START RELATIONAL
4864   2308 D7            push a
4865   2309 11            mov a, b
4866   230A             ; --- START FUNCTION CALL
4867   230A 3B AB 68      mov d, _ship_x ; $ship_x
4868   230D 2A            mov b, [d]
4869   230E 38 00 00      mov c, 0
4870   2311 FD AB         swp b
4871   2313 D8            push b
4872   2314 07 72 04      call FROM_FIXED00
4873   2317 51 02 00      add sp, 2
4874   231A             ; --- END FUNCTION CALL
4875   231A             ; --- START TERMS
4876   231A D7            push a
4877   231B 11            mov a, b
4878   231C FD 2E 01 00   mov32 cb, $00000001
4878   2320 00 00 
4879   2322 56            add b, a
4880   2323 E4            pop a
4881   2324             ; --- END TERMS
4882   2324 B0            cmp a, b
4883   2325 FD 74         sle ; <= (signed)
4884   2327 E4            pop a
4885   2328             ; --- END RELATIONAL
4886   2328 C0 00 00      cmp b, 0
4887   232B C6 3A 24      je _for138_exit
4888   232E             _for138_block:
4889   232E             ; if (i >= 1 && i <= 8 && j >= 1 && j <= 8) { 
4890   232E             _if139_cond:
4891   232E FA FF FF      lea d, [bp + -1] ; $i
4892   2331 2A            mov b, [d]
4893   2332 38 00 00      mov c, 0
4894   2335             ; --- START RELATIONAL
4895   2335 D7            push a
4896   2336 11            mov a, b
4897   2337 FD 2E 01 00   mov32 cb, $00000001
4897   233B 00 00 
4898   233D B0            cmp a, b
4899   233E FD 80         sge ; >=
4900   2340 E4            pop a
4901   2341             ; --- END RELATIONAL
4902   2341             ; --- START LOGICAL AND
4903   2341 D7            push a
4904   2342 11            mov a, b
4905   2343 FA FF FF      lea d, [bp + -1] ; $i
4906   2346 2A            mov b, [d]
4907   2347 38 00 00      mov c, 0
4908   234A             ; --- START RELATIONAL
4909   234A D7            push a
4910   234B 11            mov a, b
4911   234C FD 2E 08 00   mov32 cb, $00000008
4911   2350 00 00 
4912   2352 B0            cmp a, b
4913   2353 FD 74         sle ; <= (signed)
4914   2355 E4            pop a
4915   2356             ; --- END RELATIONAL
4916   2356 FD A7         sand a, b
4917   2358 11            mov a, b
4918   2359 FA FD FF      lea d, [bp + -3] ; $j
4919   235C 2A            mov b, [d]
4920   235D 38 00 00      mov c, 0
4921   2360             ; --- START RELATIONAL
4922   2360 D7            push a
4923   2361 11            mov a, b
4924   2362 FD 2E 01 00   mov32 cb, $00000001
4924   2366 00 00 
4925   2368 B0            cmp a, b
4926   2369 FD 80         sge ; >=
4927   236B E4            pop a
4928   236C             ; --- END RELATIONAL
4929   236C FD A7         sand a, b
4930   236E 11            mov a, b
4931   236F FA FD FF      lea d, [bp + -3] ; $j
4932   2372 2A            mov b, [d]
4933   2373 38 00 00      mov c, 0
4934   2376             ; --- START RELATIONAL
4935   2376 D7            push a
4936   2377 11            mov a, b
4937   2378 FD 2E 08 00   mov32 cb, $00000008
4937   237C 00 00 
4938   237E B0            cmp a, b
4939   237F FD 74         sle ; <= (signed)
4940   2381 E4            pop a
4941   2382             ; --- END RELATIONAL
4942   2382 FD A7         sand a, b
4943   2384 E4            pop a
4944   2385             ; --- END LOGICAL AND
4945   2385 C0 00 00      cmp b, 0
4946   2388 C6 27 24      je _if139_exit
4947   238B             _if139_TRUE:
4948   238B             ; if (quad[i+-1][j+-1] == 		2      ) { 
4949   238B             _if140_cond:
4950   238B 3B AF 68      mov d, _quad_data ; $quad
4951   238E D7            push a
4952   238F DA            push d
4953   2390 FA FF FF      lea d, [bp + -1] ; $i
4954   2393 2A            mov b, [d]
4955   2394 38 00 00      mov c, 0
4956   2397             ; --- START TERMS
4957   2397 D7            push a
4958   2398 11            mov a, b
4959   2399 FD 2E FF FF   mov32 cb, $ffffffff
4959   239D FF FF 
4960   239F 56            add b, a
4961   23A0 E4            pop a
4962   23A1             ; --- END TERMS
4963   23A1 E7            pop d
4964   23A2 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
4965   23A6 DA            push d
4966   23A7 FA FD FF      lea d, [bp + -3] ; $j
4967   23AA 2A            mov b, [d]
4968   23AB 38 00 00      mov c, 0
4969   23AE             ; --- START TERMS
4970   23AE D7            push a
4971   23AF 11            mov a, b
4972   23B0 FD 2E FF FF   mov32 cb, $ffffffff
4972   23B4 FF FF 
4973   23B6 56            add b, a
4974   23B7 E4            pop a
4975   23B8             ; --- END TERMS
4976   23B8 E7            pop d
4977   23B9 5A            add d, b
4978   23BA E4            pop a
4979   23BB 32            mov bl, [d]
4980   23BC A7 00         mov bh, 0
4981   23BE 38 00 00      mov c, 0
4982   23C1             ; --- START RELATIONAL
4983   23C1 D7            push a
4984   23C2 11            mov a, b
4985   23C3 FD 2E 02 00   mov32 cb, $00000002
4985   23C7 00 00 
4986   23C9 B0            cmp a, b
4987   23CA FD 71         seq ; ==
4988   23CC E4            pop a
4989   23CD             ; --- END RELATIONAL
4990   23CD C0 00 00      cmp b, 0
4991   23D0 C6 24 24      je _if140_exit
4992   23D3             _if140_TRUE:
4993   23D3             ; docked = 1; 
4994   23D3 3B D2 67      mov d, _docked ; $docked
4995   23D6 DA            push d
4996   23D7 FD 2E 01 00   mov32 cb, $00000001
4996   23DB 00 00 
4997   23DD E7            pop d
4998   23DE FD 3E         mov [d], bl
4999   23E0             ; sC = "DOCKED"; 
5000   23E0 FA FB FF      lea d, [bp + -5] ; $sC
5001   23E3 DA            push d
5002   23E4 26 A9 70      mov b, _s77 ; "DOCKED"
5003   23E7 E7            pop d
5004   23E8 FD 43         mov [d], b
5005   23EA             ; energy = energy0; 
5006   23EA 3B D3 67      mov d, _energy ; $energy
5007   23ED DA            push d
5008   23EE 3B D5 67      mov d, _energy0 ; $energy0
5009   23F1 2A            mov b, [d]
5010   23F2 38 00 00      mov c, 0
5011   23F5 E7            pop d
5012   23F6 FD 43         mov [d], b
5013   23F8             ; torps = torps0; 
5014   23F8 3B 88 68      mov d, _torps ; $torps
5015   23FB DA            push d
5016   23FC 3B 89 68      mov d, _torps0 ; $torps0
5017   23FF 32            mov bl, [d]
5018   2400 A7 00         mov bh, 0
5019   2402 38 00 00      mov c, 0
5020   2405 E7            pop d
5021   2406 FD 3E         mov [d], bl
5022   2408             ; puts("Shields dropped for docking purposes."); 
5023   2408             ; --- START FUNCTION CALL
5024   2408 26 B0 70      mov b, _s78 ; "Shields dropped for docking purposes."
5025   240B FD AB         swp b
5026   240D D8            push b
5027   240E 07 19 64      call puts
5028   2411 51 02 00      add sp, 2
5029   2414             ; --- END FUNCTION CALL
5030   2414             ; shield = 0; 
5031   2414 3B 8E 68      mov d, _shield ; $shield
5032   2417 DA            push d
5033   2418 FD 2E 00 00   mov32 cb, $00000000
5033   241C 00 00 
5034   241E E7            pop d
5035   241F FD 43         mov [d], b
5036   2421 0A 24 24      jmp _if140_exit
5037   2424             _if140_exit:
5038   2424 0A 27 24      jmp _if139_exit
5039   2427             _if139_exit:
5040   2427             _for138_update:
5041   2427 FA FD FF      lea d, [bp + -3] ; $j
5042   242A 2A            mov b, [d]
5043   242B 38 00 00      mov c, 0
5044   242E 11            mov a, b
5045   242F FD 77         inc b
5046   2431 FA FD FF      lea d, [bp + -3] ; $j
5047   2434 FD 43         mov [d], b
5048   2436 27            mov b, a
5049   2437 0A 01 23      jmp _for138_cond
5050   243A             _for138_exit:
5051   243A             _for137_update:
5052   243A FA FF FF      lea d, [bp + -1] ; $i
5053   243D 2A            mov b, [d]
5054   243E 38 00 00      mov c, 0
5055   2441 11            mov a, b
5056   2442 FD 77         inc b
5057   2444 FA FF FF      lea d, [bp + -1] ; $i
5058   2447 FD 43         mov [d], b
5059   2449 27            mov b, a
5060   244A 0A B2 22      jmp _for137_cond
5061   244D             _for137_exit:
5062   244D             ; if (damage[2] < 0) { 
5063   244D             _if141_cond:
5064   244D 3B 95 68      mov d, _damage_data ; $damage
5065   2450 D7            push a
5066   2451 DA            push d
5067   2452 FD 2E 02 00   mov32 cb, $00000002
5067   2456 00 00 
5068   2458 E7            pop d
5069   2459 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5070   245D E4            pop a
5071   245E 2A            mov b, [d]
5072   245F 38 00 00      mov c, 0
5073   2462             ; --- START RELATIONAL
5074   2462 D7            push a
5075   2463 11            mov a, b
5076   2464 FD 2E 00 00   mov32 cb, $00000000
5076   2468 00 00 
5077   246A B0            cmp a, b
5078   246B FD 73         slt ; < (signed)
5079   246D E4            pop a
5080   246E             ; --- END RELATIONAL
5081   246E C0 00 00      cmp b, 0
5082   2471 C6 85 24      je _if141_exit
5083   2474             _if141_TRUE:
5084   2474             ; puts("\n*** Short Range Sensors are out ***"); 
5085   2474             ; --- START FUNCTION CALL
5086   2474 26 D6 70      mov b, _s79 ; "\n*** Short Range Sensors are out ***"
5087   2477 FD AB         swp b
5088   2479 D8            push b
5089   247A 07 19 64      call puts
5090   247D 51 02 00      add sp, 2
5091   2480             ; --- END FUNCTION CALL
5092   2480             ; return; 
5093   2480 F9            leave
5094   2481 09            ret
5095   2482 0A 85 24      jmp _if141_exit
5096   2485             _if141_exit:
5097   2485             ; puts(srs_1); 
5098   2485             ; --- START FUNCTION CALL
5099   2485 3B D0 69      mov d, _srs_1 ; $srs_1
5100   2488 2A            mov b, [d]
5101   2489 38 00 00      mov c, 0
5102   248C FD AB         swp b
5103   248E D8            push b
5104   248F 07 19 64      call puts
5105   2492 51 02 00      add sp, 2
5106   2495             ; --- END FUNCTION CALL
5107   2495             ; for (i = 0; i < 8; i++) { 
5108   2495             _for142_init:
5109   2495 FA FF FF      lea d, [bp + -1] ; $i
5110   2498 DA            push d
5111   2499 FD 2E 00 00   mov32 cb, $00000000
5111   249D 00 00 
5112   249F E7            pop d
5113   24A0 FD 43         mov [d], b
5114   24A2             _for142_cond:
5115   24A2 FA FF FF      lea d, [bp + -1] ; $i
5116   24A5 2A            mov b, [d]
5117   24A6 38 00 00      mov c, 0
5118   24A9             ; --- START RELATIONAL
5119   24A9 D7            push a
5120   24AA 11            mov a, b
5121   24AB FD 2E 08 00   mov32 cb, $00000008
5121   24AF 00 00 
5122   24B1 B0            cmp a, b
5123   24B2 FD 73         slt ; < (signed)
5124   24B4 E4            pop a
5125   24B5             ; --- END RELATIONAL
5126   24B5 C0 00 00      cmp b, 0
5127   24B8 C6 0F 27      je _for142_exit
5128   24BB             _for142_block:
5129   24BB             ; for (j = 0; j < 8; j++) 
5130   24BB             _for143_init:
5131   24BB FA FD FF      lea d, [bp + -3] ; $j
5132   24BE DA            push d
5133   24BF FD 2E 00 00   mov32 cb, $00000000
5133   24C3 00 00 
5134   24C5 E7            pop d
5135   24C6 FD 43         mov [d], b
5136   24C8             _for143_cond:
5137   24C8 FA FD FF      lea d, [bp + -3] ; $j
5138   24CB 2A            mov b, [d]
5139   24CC 38 00 00      mov c, 0
5140   24CF             ; --- START RELATIONAL
5141   24CF D7            push a
5142   24D0 11            mov a, b
5143   24D1 FD 2E 08 00   mov32 cb, $00000008
5143   24D5 00 00 
5144   24D7 B0            cmp a, b
5145   24D8 FD 73         slt ; < (signed)
5146   24DA E4            pop a
5147   24DB             ; --- END RELATIONAL
5148   24DB C0 00 00      cmp b, 0
5149   24DE C6 2E 25      je _for143_exit
5150   24E1             _for143_block:
5151   24E1             ; puts(tilestr[quad[i][j]]); 
5152   24E1             ; --- START FUNCTION CALL
5153   24E1 3B D2 69      mov d, _tilestr_data ; $tilestr
5154   24E4 D7            push a
5155   24E5 DA            push d
5156   24E6 3B AF 68      mov d, _quad_data ; $quad
5157   24E9 D7            push a
5158   24EA DA            push d
5159   24EB FA FF FF      lea d, [bp + -1] ; $i
5160   24EE 2A            mov b, [d]
5161   24EF 38 00 00      mov c, 0
5162   24F2 E7            pop d
5163   24F3 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
5164   24F7 DA            push d
5165   24F8 FA FD FF      lea d, [bp + -3] ; $j
5166   24FB 2A            mov b, [d]
5167   24FC 38 00 00      mov c, 0
5168   24FF E7            pop d
5169   2500 5A            add d, b
5170   2501 E4            pop a
5171   2502 32            mov bl, [d]
5172   2503 A7 00         mov bh, 0
5173   2505 38 00 00      mov c, 0
5174   2508 E7            pop d
5175   2509 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5176   250D E4            pop a
5177   250E 2A            mov b, [d]
5178   250F 38 00 00      mov c, 0
5179   2512 FD AB         swp b
5180   2514 D8            push b
5181   2515 07 19 64      call puts
5182   2518 51 02 00      add sp, 2
5183   251B             ; --- END FUNCTION CALL
5184   251B             _for143_update:
5185   251B FA FD FF      lea d, [bp + -3] ; $j
5186   251E 2A            mov b, [d]
5187   251F 38 00 00      mov c, 0
5188   2522 11            mov a, b
5189   2523 FD 77         inc b
5190   2525 FA FD FF      lea d, [bp + -3] ; $j
5191   2528 FD 43         mov [d], b
5192   252A 27            mov b, a
5193   252B 0A C8 24      jmp _for143_cond
5194   252E             _for143_exit:
5195   252E             ; if (i == 0) 
5196   252E             _if144_cond:
5197   252E FA FF FF      lea d, [bp + -1] ; $i
5198   2531 2A            mov b, [d]
5199   2532 38 00 00      mov c, 0
5200   2535             ; --- START RELATIONAL
5201   2535 D7            push a
5202   2536 11            mov a, b
5203   2537 FD 2E 00 00   mov32 cb, $00000000
5203   253B 00 00 
5204   253D B0            cmp a, b
5205   253E FD 71         seq ; ==
5206   2540 E4            pop a
5207   2541             ; --- END RELATIONAL
5208   2541 C0 00 00      cmp b, 0
5209   2544 C6 69 25      je _if144_exit
5210   2547             _if144_TRUE:
5211   2547             ; printf("    Stardate            %d\n", FROM_FIXED(stardate)); 
5212   2547             ; --- START FUNCTION CALL
5213   2547             ; --- START FUNCTION CALL
5214   2547 3B AD 68      mov d, _stardate ; $stardate
5215   254A 2A            mov b, [d]
5216   254B 38 00 00      mov c, 0
5217   254E FD AB         swp b
5218   2550 D8            push b
5219   2551 07 35 04      call FROM_FIXED
5220   2554 51 02 00      add sp, 2
5221   2557             ; --- END FUNCTION CALL
5222   2557 FD AB         swp b
5223   2559 D8            push b
5224   255A 26 FB 70      mov b, _s80 ; "    Stardate            %d\n"
5225   255D FD AB         swp b
5226   255F D8            push b
5227   2560 07 2C 5B      call printf
5228   2563 51 04 00      add sp, 4
5229   2566             ; --- END FUNCTION CALL
5230   2566 0A 69 25      jmp _if144_exit
5231   2569             _if144_exit:
5232   2569             ; if (i == 1) 
5233   2569             _if145_cond:
5234   2569 FA FF FF      lea d, [bp + -1] ; $i
5235   256C 2A            mov b, [d]
5236   256D 38 00 00      mov c, 0
5237   2570             ; --- START RELATIONAL
5238   2570 D7            push a
5239   2571 11            mov a, b
5240   2572 FD 2E 01 00   mov32 cb, $00000001
5240   2576 00 00 
5241   2578 B0            cmp a, b
5242   2579 FD 71         seq ; ==
5243   257B E4            pop a
5244   257C             ; --- END RELATIONAL
5245   257C C0 00 00      cmp b, 0
5246   257F C6 9B 25      je _if145_exit
5247   2582             _if145_TRUE:
5248   2582             ; printf("    Condition           %s\n", sC); 
5249   2582             ; --- START FUNCTION CALL
5250   2582 FA FB FF      lea d, [bp + -5] ; $sC
5251   2585 2A            mov b, [d]
5252   2586 38 00 00      mov c, 0
5253   2589 FD AB         swp b
5254   258B D8            push b
5255   258C 26 17 71      mov b, _s81 ; "    Condition           %s\n"
5256   258F FD AB         swp b
5257   2591 D8            push b
5258   2592 07 2C 5B      call printf
5259   2595 51 04 00      add sp, 4
5260   2598             ; --- END FUNCTION CALL
5261   2598 0A 9B 25      jmp _if145_exit
5262   259B             _if145_exit:
5263   259B             ; if (i == 2) 
5264   259B             _if146_cond:
5265   259B FA FF FF      lea d, [bp + -1] ; $i
5266   259E 2A            mov b, [d]
5267   259F 38 00 00      mov c, 0
5268   25A2             ; --- START RELATIONAL
5269   25A2 D7            push a
5270   25A3 11            mov a, b
5271   25A4 FD 2E 02 00   mov32 cb, $00000002
5271   25A8 00 00 
5272   25AA B0            cmp a, b
5273   25AB FD 71         seq ; ==
5274   25AD E4            pop a
5275   25AE             ; --- END RELATIONAL
5276   25AE C0 00 00      cmp b, 0
5277   25B1 C6 D7 25      je _if146_exit
5278   25B4             _if146_TRUE:
5279   25B4             ; printf("    Quadrant            %d, %d\n", quad_y, quad_x); 
5280   25B4             ; --- START FUNCTION CALL
5281   25B4 3B 8C 68      mov d, _quad_x ; $quad_x
5282   25B7 2A            mov b, [d]
5283   25B8 38 00 00      mov c, 0
5284   25BB FD AB         swp b
5285   25BD D8            push b
5286   25BE 3B 8A 68      mov d, _quad_y ; $quad_y
5287   25C1 2A            mov b, [d]
5288   25C2 38 00 00      mov c, 0
5289   25C5 FD AB         swp b
5290   25C7 D8            push b
5291   25C8 26 33 71      mov b, _s82 ; "    Quadrant            %d, %d\n"
5292   25CB FD AB         swp b
5293   25CD D8            push b
5294   25CE 07 2C 5B      call printf
5295   25D1 51 06 00      add sp, 6
5296   25D4             ; --- END FUNCTION CALL
5297   25D4 0A D7 25      jmp _if146_exit
5298   25D7             _if146_exit:
5299   25D7             ; if (i == 3) 
5300   25D7             _if147_cond:
5301   25D7 FA FF FF      lea d, [bp + -1] ; $i
5302   25DA 2A            mov b, [d]
5303   25DB 38 00 00      mov c, 0
5304   25DE             ; --- START RELATIONAL
5305   25DE D7            push a
5306   25DF 11            mov a, b
5307   25E0 FD 2E 03 00   mov32 cb, $00000003
5307   25E4 00 00 
5308   25E6 B0            cmp a, b
5309   25E7 FD 71         seq ; ==
5310   25E9 E4            pop a
5311   25EA             ; --- END RELATIONAL
5312   25EA C0 00 00      cmp b, 0
5313   25ED C6 25 26      je _if147_exit
5314   25F0             _if147_TRUE:
5315   25F0             ; printf("    Sector              %d, %d\n", FROM_FIXED00(ship_y), FROM_FIXED00(ship_x)); 
5316   25F0             ; --- START FUNCTION CALL
5317   25F0             ; --- START FUNCTION CALL
5318   25F0 3B AB 68      mov d, _ship_x ; $ship_x
5319   25F3 2A            mov b, [d]
5320   25F4 38 00 00      mov c, 0
5321   25F7 FD AB         swp b
5322   25F9 D8            push b
5323   25FA 07 72 04      call FROM_FIXED00
5324   25FD 51 02 00      add sp, 2
5325   2600             ; --- END FUNCTION CALL
5326   2600 FD AB         swp b
5327   2602 D8            push b
5328   2603             ; --- START FUNCTION CALL
5329   2603 3B A9 68      mov d, _ship_y ; $ship_y
5330   2606 2A            mov b, [d]
5331   2607 38 00 00      mov c, 0
5332   260A FD AB         swp b
5333   260C D8            push b
5334   260D 07 72 04      call FROM_FIXED00
5335   2610 51 02 00      add sp, 2
5336   2613             ; --- END FUNCTION CALL
5337   2613 FD AB         swp b
5338   2615 D8            push b
5339   2616 26 53 71      mov b, _s83 ; "    Sector              %d, %d\n"
5340   2619 FD AB         swp b
5341   261B D8            push b
5342   261C 07 2C 5B      call printf
5343   261F 51 06 00      add sp, 6
5344   2622             ; --- END FUNCTION CALL
5345   2622 0A 25 26      jmp _if147_exit
5346   2625             _if147_exit:
5347   2625             ; if (i == 4) 
5348   2625             _if148_cond:
5349   2625 FA FF FF      lea d, [bp + -1] ; $i
5350   2628 2A            mov b, [d]
5351   2629 38 00 00      mov c, 0
5352   262C             ; --- START RELATIONAL
5353   262C D7            push a
5354   262D 11            mov a, b
5355   262E FD 2E 04 00   mov32 cb, $00000004
5355   2632 00 00 
5356   2634 B0            cmp a, b
5357   2635 FD 71         seq ; ==
5358   2637 E4            pop a
5359   2638             ; --- END RELATIONAL
5360   2638 C0 00 00      cmp b, 0
5361   263B C6 59 26      je _if148_exit
5362   263E             _if148_TRUE:
5363   263E             ; printf("    Photon Torpedoes    %d\n", torps); 
5364   263E             ; --- START FUNCTION CALL
5365   263E 3B 88 68      mov d, _torps ; $torps
5366   2641 32            mov bl, [d]
5367   2642 A7 00         mov bh, 0
5368   2644 38 00 00      mov c, 0
5369   2647 FD AA         swp a
5370   2649 D8            push b
5371   264A 26 73 71      mov b, _s84 ; "    Photon Torpedoes    %d\n"
5372   264D FD AB         swp b
5373   264F D8            push b
5374   2650 07 2C 5B      call printf
5375   2653 51 03 00      add sp, 3
5376   2656             ; --- END FUNCTION CALL
5377   2656 0A 59 26      jmp _if148_exit
5378   2659             _if148_exit:
5379   2659             ; if (i == 5) 
5380   2659             _if149_cond:
5381   2659 FA FF FF      lea d, [bp + -1] ; $i
5382   265C 2A            mov b, [d]
5383   265D 38 00 00      mov c, 0
5384   2660             ; --- START RELATIONAL
5385   2660 D7            push a
5386   2661 11            mov a, b
5387   2662 FD 2E 05 00   mov32 cb, $00000005
5387   2666 00 00 
5388   2668 B0            cmp a, b
5389   2669 FD 71         seq ; ==
5390   266B E4            pop a
5391   266C             ; --- END RELATIONAL
5392   266C C0 00 00      cmp b, 0
5393   266F C6 96 26      je _if149_exit
5394   2672             _if149_TRUE:
5395   2672             ; printf("    Total Energy        %d\n", energy + shield); 
5396   2672             ; --- START FUNCTION CALL
5397   2672 3B D3 67      mov d, _energy ; $energy
5398   2675 2A            mov b, [d]
5399   2676 38 00 00      mov c, 0
5400   2679             ; --- START TERMS
5401   2679 D7            push a
5402   267A 11            mov a, b
5403   267B 3B 8E 68      mov d, _shield ; $shield
5404   267E 2A            mov b, [d]
5405   267F 38 00 00      mov c, 0
5406   2682 56            add b, a
5407   2683 E4            pop a
5408   2684             ; --- END TERMS
5409   2684 FD AB         swp b
5410   2686 D8            push b
5411   2687 26 8F 71      mov b, _s85 ; "    Total Energy        %d\n"
5412   268A FD AB         swp b
5413   268C D8            push b
5414   268D 07 2C 5B      call printf
5415   2690 51 04 00      add sp, 4
5416   2693             ; --- END FUNCTION CALL
5417   2693 0A 96 26      jmp _if149_exit
5418   2696             _if149_exit:
5419   2696             ; if (i == 6) 
5420   2696             _if150_cond:
5421   2696 FA FF FF      lea d, [bp + -1] ; $i
5422   2699 2A            mov b, [d]
5423   269A 38 00 00      mov c, 0
5424   269D             ; --- START RELATIONAL
5425   269D D7            push a
5426   269E 11            mov a, b
5427   269F FD 2E 06 00   mov32 cb, $00000006
5427   26A3 00 00 
5428   26A5 B0            cmp a, b
5429   26A6 FD 71         seq ; ==
5430   26A8 E4            pop a
5431   26A9             ; --- END RELATIONAL
5432   26A9 C0 00 00      cmp b, 0
5433   26AC C6 C8 26      je _if150_exit
5434   26AF             _if150_TRUE:
5435   26AF             ; printf("    Shields             %d\n", shield); 
5436   26AF             ; --- START FUNCTION CALL
5437   26AF 3B 8E 68      mov d, _shield ; $shield
5438   26B2 2A            mov b, [d]
5439   26B3 38 00 00      mov c, 0
5440   26B6 FD AB         swp b
5441   26B8 D8            push b
5442   26B9 26 AB 71      mov b, _s86 ; "    Shields             %d\n"
5443   26BC FD AB         swp b
5444   26BE D8            push b
5445   26BF 07 2C 5B      call printf
5446   26C2 51 04 00      add sp, 4
5447   26C5             ; --- END FUNCTION CALL
5448   26C5 0A C8 26      jmp _if150_exit
5449   26C8             _if150_exit:
5450   26C8             ; if (i == 7) 
5451   26C8             _if151_cond:
5452   26C8 FA FF FF      lea d, [bp + -1] ; $i
5453   26CB 2A            mov b, [d]
5454   26CC 38 00 00      mov c, 0
5455   26CF             ; --- START RELATIONAL
5456   26CF D7            push a
5457   26D0 11            mov a, b
5458   26D1 FD 2E 07 00   mov32 cb, $00000007
5458   26D5 00 00 
5459   26D7 B0            cmp a, b
5460   26D8 FD 71         seq ; ==
5461   26DA E4            pop a
5462   26DB             ; --- END RELATIONAL
5463   26DB C0 00 00      cmp b, 0
5464   26DE C6 FC 26      je _if151_exit
5465   26E1             _if151_TRUE:
5466   26E1             ; printf("    Klingons Remaining  %d\n", klingons_left); 
5467   26E1             ; --- START FUNCTION CALL
5468   26E1 3B 87 68      mov d, _klingons_left ; $klingons_left
5469   26E4 32            mov bl, [d]
5470   26E5 A7 00         mov bh, 0
5471   26E7 38 00 00      mov c, 0
5472   26EA FD AA         swp a
5473   26EC D8            push b
5474   26ED 26 C7 71      mov b, _s87 ; "    Klingons Remaining  %d\n"
5475   26F0 FD AB         swp b
5476   26F2 D8            push b
5477   26F3 07 2C 5B      call printf
5478   26F6 51 03 00      add sp, 3
5479   26F9             ; --- END FUNCTION CALL
5480   26F9 0A FC 26      jmp _if151_exit
5481   26FC             _if151_exit:
5482   26FC             _for142_update:
5483   26FC FA FF FF      lea d, [bp + -1] ; $i
5484   26FF 2A            mov b, [d]
5485   2700 38 00 00      mov c, 0
5486   2703 11            mov a, b
5487   2704 FD 77         inc b
5488   2706 FA FF FF      lea d, [bp + -1] ; $i
5489   2709 FD 43         mov [d], b
5490   270B 27            mov b, a
5491   270C 0A A2 24      jmp _for142_cond
5492   270F             _for142_exit:
5493   270F             ; puts(srs_1); 
5494   270F             ; --- START FUNCTION CALL
5495   270F 3B D0 69      mov d, _srs_1 ; $srs_1
5496   2712 2A            mov b, [d]
5497   2713 38 00 00      mov c, 0
5498   2716 FD AB         swp b
5499   2718 D8            push b
5500   2719 07 19 64      call puts
5501   271C 51 02 00      add sp, 2
5502   271F             ; --- END FUNCTION CALL
5503   271F             ; putchar('\n'); 
5504   271F             ; --- START FUNCTION CALL
5505   271F FD 2E 0A 00   mov32 cb, $0000000a
5505   2723 00 00 
5506   2725 DD            push bl
5507   2726 07 A6 5F      call putchar
5508   2729 51 01 00      add sp, 1
5509   272C             ; --- END FUNCTION CALL
5510   272C             ; return; 
5511   272C F9            leave
5512   272D 09            ret
5513   272E             
5514   272E             put1bcd:
5515   272E F8 00 00      enter 0 ; (push bp; mov bp, sp)
5516   2731             ; v = v & 0x0F; 
5517   2731 FA 05 00      lea d, [bp + 5] ; $v
5518   2734 DA            push d
5519   2735 FA 05 00      lea d, [bp + 5] ; $v
5520   2738 32            mov bl, [d]
5521   2739 A7 00         mov bh, 0
5522   273B 38 00 00      mov c, 0
5523   273E D7            push a
5524   273F 11            mov a, b
5525   2740 FD 2E 0F 00   mov32 cb, $0000000f
5525   2744 00 00 
5526   2746 FD 92         and b, a ; &
5527   2748 E4            pop a
5528   2749 E7            pop d
5529   274A FD 3E         mov [d], bl
5530   274C             ; putchar('0' + v); 
5531   274C             ; --- START FUNCTION CALL
5532   274C FD 2E 30 00   mov32 cb, $00000030
5532   2750 00 00 
5533   2752             ; --- START TERMS
5534   2752 D7            push a
5535   2753 11            mov a, b
5536   2754 FA 05 00      lea d, [bp + 5] ; $v
5537   2757 32            mov bl, [d]
5538   2758 A7 00         mov bh, 0
5539   275A 38 00 00      mov c, 0
5540   275D 56            add b, a
5541   275E E4            pop a
5542   275F             ; --- END TERMS
5543   275F DD            push bl
5544   2760 07 A6 5F      call putchar
5545   2763 51 01 00      add sp, 1
5546   2766             ; --- END FUNCTION CALL
5547   2766 F9            leave
5548   2767 09            ret
5549   2768             
5550   2768             putbcd:
5551   2768 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5552   276B             ; put1bcd(x >> 8); 
5553   276B             ; --- START FUNCTION CALL
5554   276B FA 05 00      lea d, [bp + 5] ; $x
5555   276E 2A            mov b, [d]
5556   276F 38 00 00      mov c, 0
5557   2772             ; --- START SHIFT
5558   2772 D7            push a
5559   2773 11            mov a, b
5560   2774 FD 2E 08 00   mov32 cb, $00000008
5560   2778 00 00 
5561   277A FD 39         mov c, b
5562   277C A1            shr a, cl
5563   277D 27            mov b, a
5564   277E E4            pop a
5565   277F             ; --- END SHIFT
5566   277F DD            push bl
5567   2780 07 2E 27      call put1bcd
5568   2783 51 01 00      add sp, 1
5569   2786             ; --- END FUNCTION CALL
5570   2786             ; put1bcd(x >> 4); 
5571   2786             ; --- START FUNCTION CALL
5572   2786 FA 05 00      lea d, [bp + 5] ; $x
5573   2789 2A            mov b, [d]
5574   278A 38 00 00      mov c, 0
5575   278D             ; --- START SHIFT
5576   278D D7            push a
5577   278E 11            mov a, b
5578   278F FD 2E 04 00   mov32 cb, $00000004
5578   2793 00 00 
5579   2795 FD 39         mov c, b
5580   2797 A1            shr a, cl
5581   2798 27            mov b, a
5582   2799 E4            pop a
5583   279A             ; --- END SHIFT
5584   279A DD            push bl
5585   279B 07 2E 27      call put1bcd
5586   279E 51 01 00      add sp, 1
5587   27A1             ; --- END FUNCTION CALL
5588   27A1             ; put1bcd(x); 
5589   27A1             ; --- START FUNCTION CALL
5590   27A1 FA 05 00      lea d, [bp + 5] ; $x
5591   27A4 2A            mov b, [d]
5592   27A5 38 00 00      mov c, 0
5593   27A8 DD            push bl
5594   27A9 07 2E 27      call put1bcd
5595   27AC 51 01 00      add sp, 1
5596   27AF             ; --- END FUNCTION CALL
5597   27AF F9            leave
5598   27B0 09            ret
5599   27B1             
5600   27B1             long_range_scan:
5601   27B1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5602   27B4             ; int i, j; 
5603   27B4 52 02 00      sub sp, 2
5604   27B7 52 02 00      sub sp, 2
5605   27BA             ; if (inoperable(3)) 
5606   27BA             _if152_cond:
5607   27BA             ; --- START FUNCTION CALL
5608   27BA FD 2E 03 00   mov32 cb, $00000003
5608   27BE 00 00 
5609   27C0 DD            push bl
5610   27C1 07 98 08      call inoperable
5611   27C4 51 01 00      add sp, 1
5612   27C7             ; --- END FUNCTION CALL
5613   27C7 C0 00 00      cmp b, 0
5614   27CA C6 D2 27      je _if152_exit
5615   27CD             _if152_TRUE:
5616   27CD             ; return; 
5617   27CD F9            leave
5618   27CE 09            ret
5619   27CF 0A D2 27      jmp _if152_exit
5620   27D2             _if152_exit:
5621   27D2             ; printf("Long Range Scan for Quadrant %d, %d\n\n", quad_y, quad_x); 
5622   27D2             ; --- START FUNCTION CALL
5623   27D2 3B 8C 68      mov d, _quad_x ; $quad_x
5624   27D5 2A            mov b, [d]
5625   27D6 38 00 00      mov c, 0
5626   27D9 FD AB         swp b
5627   27DB D8            push b
5628   27DC 3B 8A 68      mov d, _quad_y ; $quad_y
5629   27DF 2A            mov b, [d]
5630   27E0 38 00 00      mov c, 0
5631   27E3 FD AB         swp b
5632   27E5 D8            push b
5633   27E6 26 E3 71      mov b, _s88 ; "Long Range Scan for Quadrant %d, %d\n\n"
5634   27E9 FD AB         swp b
5635   27EB D8            push b
5636   27EC 07 2C 5B      call printf
5637   27EF 51 06 00      add sp, 6
5638   27F2             ; --- END FUNCTION CALL
5639   27F2             ; for (i = quad_y - 1; i <= quad_y + 1; i++) { 
5640   27F2             _for153_init:
5641   27F2 FA FF FF      lea d, [bp + -1] ; $i
5642   27F5 DA            push d
5643   27F6 3B 8A 68      mov d, _quad_y ; $quad_y
5644   27F9 2A            mov b, [d]
5645   27FA 38 00 00      mov c, 0
5646   27FD             ; --- START TERMS
5647   27FD D7            push a
5648   27FE 11            mov a, b
5649   27FF FD 2E 01 00   mov32 cb, $00000001
5649   2803 00 00 
5650   2805 60            sub a, b
5651   2806 27            mov b, a
5652   2807 E4            pop a
5653   2808             ; --- END TERMS
5654   2808 E7            pop d
5655   2809 FD 43         mov [d], b
5656   280B             _for153_cond:
5657   280B FA FF FF      lea d, [bp + -1] ; $i
5658   280E 2A            mov b, [d]
5659   280F 38 00 00      mov c, 0
5660   2812             ; --- START RELATIONAL
5661   2812 D7            push a
5662   2813 11            mov a, b
5663   2814 3B 8A 68      mov d, _quad_y ; $quad_y
5664   2817 2A            mov b, [d]
5665   2818 38 00 00      mov c, 0
5666   281B             ; --- START TERMS
5667   281B D7            push a
5668   281C 11            mov a, b
5669   281D FD 2E 01 00   mov32 cb, $00000001
5669   2821 00 00 
5670   2823 56            add b, a
5671   2824 E4            pop a
5672   2825             ; --- END TERMS
5673   2825 B0            cmp a, b
5674   2826 FD 74         sle ; <= (signed)
5675   2828 E4            pop a
5676   2829             ; --- END RELATIONAL
5677   2829 C0 00 00      cmp b, 0
5678   282C C6 B7 29      je _for153_exit
5679   282F             _for153_block:
5680   282F             ; printf("%s:", lrs_1); 
5681   282F             ; --- START FUNCTION CALL
5682   282F 3B FD 69      mov d, _lrs_1 ; $lrs_1
5683   2832 2A            mov b, [d]
5684   2833 38 00 00      mov c, 0
5685   2836 FD AB         swp b
5686   2838 D8            push b
5687   2839 26 09 72      mov b, _s89 ; "%s:"
5688   283C FD AB         swp b
5689   283E D8            push b
5690   283F 07 2C 5B      call printf
5691   2842 51 04 00      add sp, 4
5692   2845             ; --- END FUNCTION CALL
5693   2845             ; for (j = quad_x - 1; j <= quad_x + 1; j++) { 
5694   2845             _for154_init:
5695   2845 FA FD FF      lea d, [bp + -3] ; $j
5696   2848 DA            push d
5697   2849 3B 8C 68      mov d, _quad_x ; $quad_x
5698   284C 2A            mov b, [d]
5699   284D 38 00 00      mov c, 0
5700   2850             ; --- START TERMS
5701   2850 D7            push a
5702   2851 11            mov a, b
5703   2852 FD 2E 01 00   mov32 cb, $00000001
5703   2856 00 00 
5704   2858 60            sub a, b
5705   2859 27            mov b, a
5706   285A E4            pop a
5707   285B             ; --- END TERMS
5708   285B E7            pop d
5709   285C FD 43         mov [d], b
5710   285E             _for154_cond:
5711   285E FA FD FF      lea d, [bp + -3] ; $j
5712   2861 2A            mov b, [d]
5713   2862 38 00 00      mov c, 0
5714   2865             ; --- START RELATIONAL
5715   2865 D7            push a
5716   2866 11            mov a, b
5717   2867 3B 8C 68      mov d, _quad_x ; $quad_x
5718   286A 2A            mov b, [d]
5719   286B 38 00 00      mov c, 0
5720   286E             ; --- START TERMS
5721   286E D7            push a
5722   286F 11            mov a, b
5723   2870 FD 2E 01 00   mov32 cb, $00000001
5723   2874 00 00 
5724   2876 56            add b, a
5725   2877 E4            pop a
5726   2878             ; --- END TERMS
5727   2878 B0            cmp a, b
5728   2879 FD 74         sle ; <= (signed)
5729   287B E4            pop a
5730   287C             ; --- END RELATIONAL
5731   287C C0 00 00      cmp b, 0
5732   287F C6 97 29      je _for154_exit
5733   2882             _for154_block:
5734   2882             ; putchar(' '); 
5735   2882             ; --- START FUNCTION CALL
5736   2882 FD 2E 20 00   mov32 cb, $00000020
5736   2886 00 00 
5737   2888 DD            push bl
5738   2889 07 A6 5F      call putchar
5739   288C 51 01 00      add sp, 1
5740   288F             ; --- END FUNCTION CALL
5741   288F             ; if (i > 0 && i <= 8 && j > 0 && j <= 8) { 
5742   288F             _if155_cond:
5743   288F FA FF FF      lea d, [bp + -1] ; $i
5744   2892 2A            mov b, [d]
5745   2893 38 00 00      mov c, 0
5746   2896             ; --- START RELATIONAL
5747   2896 D7            push a
5748   2897 11            mov a, b
5749   2898 FD 2E 00 00   mov32 cb, $00000000
5749   289C 00 00 
5750   289E B0            cmp a, b
5751   289F FD 7F         sgt ; >
5752   28A1 E4            pop a
5753   28A2             ; --- END RELATIONAL
5754   28A2             ; --- START LOGICAL AND
5755   28A2 D7            push a
5756   28A3 11            mov a, b
5757   28A4 FA FF FF      lea d, [bp + -1] ; $i
5758   28A7 2A            mov b, [d]
5759   28A8 38 00 00      mov c, 0
5760   28AB             ; --- START RELATIONAL
5761   28AB D7            push a
5762   28AC 11            mov a, b
5763   28AD FD 2E 08 00   mov32 cb, $00000008
5763   28B1 00 00 
5764   28B3 B0            cmp a, b
5765   28B4 FD 74         sle ; <= (signed)
5766   28B6 E4            pop a
5767   28B7             ; --- END RELATIONAL
5768   28B7 FD A7         sand a, b
5769   28B9 11            mov a, b
5770   28BA FA FD FF      lea d, [bp + -3] ; $j
5771   28BD 2A            mov b, [d]
5772   28BE 38 00 00      mov c, 0
5773   28C1             ; --- START RELATIONAL
5774   28C1 D7            push a
5775   28C2 11            mov a, b
5776   28C3 FD 2E 00 00   mov32 cb, $00000000
5776   28C7 00 00 
5777   28C9 B0            cmp a, b
5778   28CA FD 7F         sgt ; >
5779   28CC E4            pop a
5780   28CD             ; --- END RELATIONAL
5781   28CD FD A7         sand a, b
5782   28CF 11            mov a, b
5783   28D0 FA FD FF      lea d, [bp + -3] ; $j
5784   28D3 2A            mov b, [d]
5785   28D4 38 00 00      mov c, 0
5786   28D7             ; --- START RELATIONAL
5787   28D7 D7            push a
5788   28D8 11            mov a, b
5789   28D9 FD 2E 08 00   mov32 cb, $00000008
5789   28DD 00 00 
5790   28DF B0            cmp a, b
5791   28E0 FD 74         sle ; <= (signed)
5792   28E2 E4            pop a
5793   28E3             ; --- END RELATIONAL
5794   28E3 FD A7         sand a, b
5795   28E5 E4            pop a
5796   28E6             ; --- END LOGICAL AND
5797   28E6 C0 00 00      cmp b, 0
5798   28E9 C6 6C 29      je _if155_else
5799   28EC             _if155_TRUE:
5800   28EC             ; map[i][j] = map[i][j] |  0x1000		/* Set if this sector was mapped */           ; 
5801   28EC 3B D7 67      mov d, _map_data ; $map
5802   28EF D7            push a
5803   28F0 DA            push d
5804   28F1 FA FF FF      lea d, [bp + -1] ; $i
5805   28F4 2A            mov b, [d]
5806   28F5 38 00 00      mov c, 0
5807   28F8 E7            pop d
5808   28F9 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5809   28FD DA            push d
5810   28FE FA FD FF      lea d, [bp + -3] ; $j
5811   2901 2A            mov b, [d]
5812   2902 38 00 00      mov c, 0
5813   2905 E7            pop d
5814   2906 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5815   290A E4            pop a
5816   290B DA            push d
5817   290C 3B D7 67      mov d, _map_data ; $map
5818   290F D7            push a
5819   2910 DA            push d
5820   2911 FA FF FF      lea d, [bp + -1] ; $i
5821   2914 2A            mov b, [d]
5822   2915 38 00 00      mov c, 0
5823   2918 E7            pop d
5824   2919 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5825   291D DA            push d
5826   291E FA FD FF      lea d, [bp + -3] ; $j
5827   2921 2A            mov b, [d]
5828   2922 38 00 00      mov c, 0
5829   2925 E7            pop d
5830   2926 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5831   292A E4            pop a
5832   292B 2A            mov b, [d]
5833   292C 38 00 00      mov c, 0
5834   292F D7            push a
5835   2930 11            mov a, b
5836   2931 FD 2E 00 10   mov32 cb, $00001000
5836   2935 00 00 
5837   2937 FD 70         or b, a ; |
5838   2939 E4            pop a
5839   293A E7            pop d
5840   293B FD 43         mov [d], b
5841   293D             ; putbcd(map[i][j]); 
5842   293D             ; --- START FUNCTION CALL
5843   293D 3B D7 67      mov d, _map_data ; $map
5844   2940 D7            push a
5845   2941 DA            push d
5846   2942 FA FF FF      lea d, [bp + -1] ; $i
5847   2945 2A            mov b, [d]
5848   2946 38 00 00      mov c, 0
5849   2949 E7            pop d
5850   294A FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5851   294E DA            push d
5852   294F FA FD FF      lea d, [bp + -3] ; $j
5853   2952 2A            mov b, [d]
5854   2953 38 00 00      mov c, 0
5855   2956 E7            pop d
5856   2957 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5857   295B E4            pop a
5858   295C 2A            mov b, [d]
5859   295D 38 00 00      mov c, 0
5860   2960 FD AB         swp b
5861   2962 D8            push b
5862   2963 07 68 27      call putbcd
5863   2966 51 02 00      add sp, 2
5864   2969             ; --- END FUNCTION CALL
5865   2969 0A 78 29      jmp _if155_exit
5866   296C             _if155_else:
5867   296C             ; puts("***"); 
5868   296C             ; --- START FUNCTION CALL
5869   296C 26 0D 72      mov b, _s90 ; "***"
5870   296F FD AB         swp b
5871   2971 D8            push b
5872   2972 07 19 64      call puts
5873   2975 51 02 00      add sp, 2
5874   2978             ; --- END FUNCTION CALL
5875   2978             _if155_exit:
5876   2978             ; puts(" :"); 
5877   2978             ; --- START FUNCTION CALL
5878   2978 26 11 72      mov b, _s91 ; " :"
5879   297B FD AB         swp b
5880   297D D8            push b
5881   297E 07 19 64      call puts
5882   2981 51 02 00      add sp, 2
5883   2984             ; --- END FUNCTION CALL
5884   2984             _for154_update:
5885   2984 FA FD FF      lea d, [bp + -3] ; $j
5886   2987 2A            mov b, [d]
5887   2988 38 00 00      mov c, 0
5888   298B 11            mov a, b
5889   298C FD 77         inc b
5890   298E FA FD FF      lea d, [bp + -3] ; $j
5891   2991 FD 43         mov [d], b
5892   2993 27            mov b, a
5893   2994 0A 5E 28      jmp _for154_cond
5894   2997             _for154_exit:
5895   2997             ; putchar('\n'); 
5896   2997             ; --- START FUNCTION CALL
5897   2997 FD 2E 0A 00   mov32 cb, $0000000a
5897   299B 00 00 
5898   299D DD            push bl
5899   299E 07 A6 5F      call putchar
5900   29A1 51 01 00      add sp, 1
5901   29A4             ; --- END FUNCTION CALL
5902   29A4             _for153_update:
5903   29A4 FA FF FF      lea d, [bp + -1] ; $i
5904   29A7 2A            mov b, [d]
5905   29A8 38 00 00      mov c, 0
5906   29AB 11            mov a, b
5907   29AC FD 77         inc b
5908   29AE FA FF FF      lea d, [bp + -1] ; $i
5909   29B1 FD 43         mov [d], b
5910   29B3 27            mov b, a
5911   29B4 0A 0B 28      jmp _for153_cond
5912   29B7             _for153_exit:
5913   29B7             ; printf("%s\n", lrs_1); 
5914   29B7             ; --- START FUNCTION CALL
5915   29B7 3B FD 69      mov d, _lrs_1 ; $lrs_1
5916   29BA 2A            mov b, [d]
5917   29BB 38 00 00      mov c, 0
5918   29BE FD AB         swp b
5919   29C0 D8            push b
5920   29C1 26 14 72      mov b, _s92 ; "%s\n"
5921   29C4 FD AB         swp b
5922   29C6 D8            push b
5923   29C7 07 2C 5B      call printf
5924   29CA 51 04 00      add sp, 4
5925   29CD             ; --- END FUNCTION CALL
5926   29CD F9            leave
5927   29CE 09            ret
5928   29CF             
5929   29CF             no_klingon:
5930   29CF F8 00 00      enter 0 ; (push bp; mov bp, sp)
5931   29D2             ; if (klingons <= 0) { 
5932   29D2             _if156_cond:
5933   29D2 3B 85 68      mov d, _klingons ; $klingons
5934   29D5 32            mov bl, [d]
5935   29D6 A7 00         mov bh, 0
5936   29D8 38 00 00      mov c, 0
5937   29DB             ; --- START RELATIONAL
5938   29DB D7            push a
5939   29DC 11            mov a, b
5940   29DD FD 2E 00 00   mov32 cb, $00000000
5940   29E1 00 00 
5941   29E3 B0            cmp a, b
5942   29E4 FD 76         sleu ; <= (unsigned)
5943   29E6 E4            pop a
5944   29E7             ; --- END RELATIONAL
5945   29E7 C0 00 00      cmp b, 0
5946   29EA C6 04 2A      je _if156_exit
5947   29ED             _if156_TRUE:
5948   29ED             ; puts("Science Officer Spock reports:\n  'Sensors show no enemy ships in this quadrant'\n"); 
5949   29ED             ; --- START FUNCTION CALL
5950   29ED 26 18 72      mov b, _s93 ; "Science Officer Spock reports:\n  'Sensors show no enemy ships in this quadrant'\n"
5951   29F0 FD AB         swp b
5952   29F2 D8            push b
5953   29F3 07 19 64      call puts
5954   29F6 51 02 00      add sp, 2
5955   29F9             ; --- END FUNCTION CALL
5956   29F9             ; return 1; 
5957   29F9 FD 2E 01 00   mov32 cb, $00000001
5957   29FD 00 00 
5958   29FF F9            leave
5959   2A00 09            ret
5960   2A01 0A 04 2A      jmp _if156_exit
5961   2A04             _if156_exit:
5962   2A04             ; return 0; 
5963   2A04 FD 2E 00 00   mov32 cb, $00000000
5963   2A08 00 00 
5964   2A0A F9            leave
5965   2A0B 09            ret
5966   2A0C             
5967   2A0C             wipe_klingon:
5968   2A0C F8 00 00      enter 0 ; (push bp; mov bp, sp)
5969   2A0F             ; quad[k->y+-1][k->x+-1] = 		0       ; 
5970   2A0F 3B AF 68      mov d, _quad_data ; $quad
5971   2A12 D7            push a
5972   2A13 DA            push d
5973   2A14 FA 05 00      lea d, [bp + 5] ; $k
5974   2A17 FD 2A         mov d, [d]
5975   2A19 58 00 00      add d, 0
5976   2A1C 32            mov bl, [d]
5977   2A1D A7 00         mov bh, 0
5978   2A1F 38 00 00      mov c, 0
5979   2A22             ; --- START TERMS
5980   2A22 D7            push a
5981   2A23 11            mov a, b
5982   2A24 FD 2E FF FF   mov32 cb, $ffffffff
5982   2A28 FF FF 
5983   2A2A 56            add b, a
5984   2A2B E4            pop a
5985   2A2C             ; --- END TERMS
5986   2A2C E7            pop d
5987   2A2D FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
5988   2A31 DA            push d
5989   2A32 FA 05 00      lea d, [bp + 5] ; $k
5990   2A35 FD 2A         mov d, [d]
5991   2A37 58 01 00      add d, 1
5992   2A3A 32            mov bl, [d]
5993   2A3B A7 00         mov bh, 0
5994   2A3D 38 00 00      mov c, 0
5995   2A40             ; --- START TERMS
5996   2A40 D7            push a
5997   2A41 11            mov a, b
5998   2A42 FD 2E FF FF   mov32 cb, $ffffffff
5998   2A46 FF FF 
5999   2A48 56            add b, a
6000   2A49 E4            pop a
6001   2A4A             ; --- END TERMS
6002   2A4A E7            pop d
6003   2A4B 5A            add d, b
6004   2A4C E4            pop a
6005   2A4D DA            push d
6006   2A4E FD 2E 00 00   mov32 cb, $00000000
6006   2A52 00 00 
6007   2A54 E7            pop d
6008   2A55 FD 3E         mov [d], bl
6009   2A57 F9            leave
6010   2A58 09            ret
6011   2A59             
6012   2A59             phaser_control:
6013   2A59 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6014   2A5C             ; int i; 
6015   2A5C 52 02 00      sub sp, 2
6016   2A5F             ; long int        phaser_energy; 
6017   2A5F 52 04 00      sub sp, 4
6018   2A62             ; long unsigned int         h1; 
6019   2A62 52 04 00      sub sp, 4
6020   2A65             ; int h; 
6021   2A65 52 02 00      sub sp, 2
6022   2A68             ; struct klingon *k; 
6023   2A68 52 02 00      sub sp, 2
6024   2A6B             ; k = &kdata; 
6025   2A6B FA F3 FF      lea d, [bp + -13] ; $k
6026   2A6E DA            push d
6027   2A6F 3B 79 68      mov d, _kdata_data ; $kdata
6028   2A72 2D            mov b, d
6029   2A73 E7            pop d
6030   2A74 FD 43         mov [d], b
6031   2A76             ; if (inoperable(4)) 
6032   2A76             _if157_cond:
6033   2A76             ; --- START FUNCTION CALL
6034   2A76 FD 2E 04 00   mov32 cb, $00000004
6034   2A7A 00 00 
6035   2A7C DD            push bl
6036   2A7D 07 98 08      call inoperable
6037   2A80 51 01 00      add sp, 1
6038   2A83             ; --- END FUNCTION CALL
6039   2A83 C0 00 00      cmp b, 0
6040   2A86 C6 8E 2A      je _if157_exit
6041   2A89             _if157_TRUE:
6042   2A89             ; return; 
6043   2A89 F9            leave
6044   2A8A 09            ret
6045   2A8B 0A 8E 2A      jmp _if157_exit
6046   2A8E             _if157_exit:
6047   2A8E             ; if (no_klingon()) 
6048   2A8E             _if158_cond:
6049   2A8E             ; --- START FUNCTION CALL
6050   2A8E 07 CF 29      call no_klingon
6051   2A91 C0 00 00      cmp b, 0
6052   2A94 C6 9C 2A      je _if158_exit
6053   2A97             _if158_TRUE:
6054   2A97             ; return; 
6055   2A97 F9            leave
6056   2A98 09            ret
6057   2A99 0A 9C 2A      jmp _if158_exit
6058   2A9C             _if158_exit:
6059   2A9C             ; if (damage[8] < 0) 
6060   2A9C             _if159_cond:
6061   2A9C 3B 95 68      mov d, _damage_data ; $damage
6062   2A9F D7            push a
6063   2AA0 DA            push d
6064   2AA1 FD 2E 08 00   mov32 cb, $00000008
6064   2AA5 00 00 
6065   2AA7 E7            pop d
6066   2AA8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6067   2AAC E4            pop a
6068   2AAD 2A            mov b, [d]
6069   2AAE 38 00 00      mov c, 0
6070   2AB1             ; --- START RELATIONAL
6071   2AB1 D7            push a
6072   2AB2 11            mov a, b
6073   2AB3 FD 2E 00 00   mov32 cb, $00000000
6073   2AB7 00 00 
6074   2AB9 B0            cmp a, b
6075   2ABA FD 73         slt ; < (signed)
6076   2ABC E4            pop a
6077   2ABD             ; --- END RELATIONAL
6078   2ABD C0 00 00      cmp b, 0
6079   2AC0 C6 D2 2A      je _if159_exit
6080   2AC3             _if159_TRUE:
6081   2AC3             ; puts("Computer failure hampers accuracy."); 
6082   2AC3             ; --- START FUNCTION CALL
6083   2AC3 26 69 72      mov b, _s94 ; "Computer failure hampers accuracy."
6084   2AC6 FD AB         swp b
6085   2AC8 D8            push b
6086   2AC9 07 19 64      call puts
6087   2ACC 51 02 00      add sp, 2
6088   2ACF             ; --- END FUNCTION CALL
6089   2ACF 0A D2 2A      jmp _if159_exit
6090   2AD2             _if159_exit:
6091   2AD2             ; printf("Phasers locked on target;\n Energy available = %d units\n\n Number of units to fire: ", energy); 
6092   2AD2             ; --- START FUNCTION CALL
6093   2AD2 3B D3 67      mov d, _energy ; $energy
6094   2AD5 2A            mov b, [d]
6095   2AD6 38 00 00      mov c, 0
6096   2AD9 FD AB         swp b
6097   2ADB D8            push b
6098   2ADC 26 8C 72      mov b, _s95 ; "Phasers locked on target;\n Energy available = %d units\n\n Number of units to fire: "
6099   2ADF FD AB         swp b
6100   2AE1 D8            push b
6101   2AE2 07 2C 5B      call printf
6102   2AE5 51 04 00      add sp, 4
6103   2AE8             ; --- END FUNCTION CALL
6104   2AE8             ; phaser_energy = input_int(); 
6105   2AE8 FA FB FF      lea d, [bp + -5] ; $phaser_energy
6106   2AEB DA            push d
6107   2AEC             ; --- START FUNCTION CALL
6108   2AEC 07 D9 07      call input_int
6109   2AEF E7            pop d
6110   2AF0 FD 43         mov [d], b
6111   2AF2 26 00 00      mov b, 0
6112   2AF5 FD 44 02 00   mov [d + 2], b
6113   2AF9             ; if (phaser_energy <= 0) 
6114   2AF9             _if160_cond:
6115   2AF9 FA FB FF      lea d, [bp + -5] ; $phaser_energy
6116   2AFC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6117   2AFF FD 39         mov c, b ; And place it into C
6118   2B01 2A            mov b, [d] ; Lower Word in B
6119   2B02             ; --- START RELATIONAL
6120   2B02 D7            push a
6121   2B03 FD D8         push g
6122   2B05 11            mov a, b
6123   2B06 FD 7A         mov g, c
6124   2B08 FD 2E 00 00   mov32 cb, $00000000
6124   2B0C 00 00 
6125   2B0E FD AF         cmp32 ga, cb
6126   2B10 FD 74         sle
6127   2B12 FD F1         pop g
6128   2B14 E4            pop a
6129   2B15             ; --- END RELATIONAL
6130   2B15 C0 00 00      cmp b, 0
6131   2B18 C6 20 2B      je _if160_exit
6132   2B1B             _if160_TRUE:
6133   2B1B             ; return; 
6134   2B1B F9            leave
6135   2B1C 09            ret
6136   2B1D 0A 20 2B      jmp _if160_exit
6137   2B20             _if160_exit:
6138   2B20             ; if (energy - phaser_energy < 0) { 
6139   2B20             _if161_cond:
6140   2B20 3B D3 67      mov d, _energy ; $energy
6141   2B23 2A            mov b, [d]
6142   2B24 38 00 00      mov c, 0
6143   2B27             ; --- START TERMS
6144   2B27 D7            push a
6145   2B28 11            mov a, b
6146   2B29 FA FB FF      lea d, [bp + -5] ; $phaser_energy
6147   2B2C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6148   2B2F FD 39         mov c, b ; And place it into C
6149   2B31 2A            mov b, [d] ; Lower Word in B
6150   2B32 FD 1C         sub32 ga, cb
6151   2B34 27            mov b, a
6152   2B35 FD 38         mov c, g
6153   2B37 E4            pop a
6154   2B38             ; --- END TERMS
6155   2B38             ; --- START RELATIONAL
6156   2B38 D7            push a
6157   2B39 FD D8         push g
6158   2B3B 11            mov a, b
6159   2B3C FD 7A         mov g, c
6160   2B3E FD 2E 00 00   mov32 cb, $00000000
6160   2B42 00 00 
6161   2B44 FD AF         cmp32 ga, cb
6162   2B46 FD 73         slt ; <
6163   2B48 FD F1         pop g
6164   2B4A E4            pop a
6165   2B4B             ; --- END RELATIONAL
6166   2B4B C0 00 00      cmp b, 0
6167   2B4E C6 62 2B      je _if161_exit
6168   2B51             _if161_TRUE:
6169   2B51             ; puts("Not enough energy available.\n"); 
6170   2B51             ; --- START FUNCTION CALL
6171   2B51 26 DF 72      mov b, _s96 ; "Not enough energy available.\n"
6172   2B54 FD AB         swp b
6173   2B56 D8            push b
6174   2B57 07 19 64      call puts
6175   2B5A 51 02 00      add sp, 2
6176   2B5D             ; --- END FUNCTION CALL
6177   2B5D             ; return; 
6178   2B5D F9            leave
6179   2B5E 09            ret
6180   2B5F 0A 62 2B      jmp _if161_exit
6181   2B62             _if161_exit:
6182   2B62             ; energy = energy -  phaser_energy; 
6183   2B62 3B D3 67      mov d, _energy ; $energy
6184   2B65 DA            push d
6185   2B66 3B D3 67      mov d, _energy ; $energy
6186   2B69 2A            mov b, [d]
6187   2B6A 38 00 00      mov c, 0
6188   2B6D             ; --- START TERMS
6189   2B6D D7            push a
6190   2B6E 11            mov a, b
6191   2B6F FA FB FF      lea d, [bp + -5] ; $phaser_energy
6192   2B72 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6193   2B75 FD 39         mov c, b ; And place it into C
6194   2B77 2A            mov b, [d] ; Lower Word in B
6195   2B78 FD 1C         sub32 ga, cb
6196   2B7A 27            mov b, a
6197   2B7B FD 38         mov c, g
6198   2B7D E4            pop a
6199   2B7E             ; --- END TERMS
6200   2B7E E7            pop d
6201   2B7F FD 43         mov [d], b
6202   2B81             ; if (damage[8] < 0) 
6203   2B81             _if162_cond:
6204   2B81 3B 95 68      mov d, _damage_data ; $damage
6205   2B84 D7            push a
6206   2B85 DA            push d
6207   2B86 FD 2E 08 00   mov32 cb, $00000008
6207   2B8A 00 00 
6208   2B8C E7            pop d
6209   2B8D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6210   2B91 E4            pop a
6211   2B92 2A            mov b, [d]
6212   2B93 38 00 00      mov c, 0
6213   2B96             ; --- START RELATIONAL
6214   2B96 D7            push a
6215   2B97 11            mov a, b
6216   2B98 FD 2E 00 00   mov32 cb, $00000000
6216   2B9C 00 00 
6217   2B9E B0            cmp a, b
6218   2B9F FD 73         slt ; < (signed)
6219   2BA1 E4            pop a
6220   2BA2             ; --- END RELATIONAL
6221   2BA2 C0 00 00      cmp b, 0
6222   2BA5 C6 13 2C      je _if162_else
6223   2BA8             _if162_TRUE:
6224   2BA8             ; phaser_energy =phaser_energy * get_rand(100); 
6225   2BA8 FA FB FF      lea d, [bp + -5] ; $phaser_energy
6226   2BAB DA            push d
6227   2BAC FA FB FF      lea d, [bp + -5] ; $phaser_energy
6228   2BAF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6229   2BB2 FD 39         mov c, b ; And place it into C
6230   2BB4 2A            mov b, [d] ; Lower Word in B
6231   2BB5             ; --- START FACTORS
6232   2BB5 D7            push a
6233   2BB6 FD D8         push g
6234   2BB8 11            mov a, b
6235   2BB9 FD 7A         mov g, c
6236   2BBB             ; --- START FUNCTION CALL
6237   2BBB FD 2E 64 00   mov32 cb, $00000064
6237   2BBF 00 00 
6238   2BC1 FD AB         swp b
6239   2BC3 D8            push b
6240   2BC4 07 91 04      call get_rand
6241   2BC7 51 02 00      add sp, 2
6242   2BCA             ; --- END FUNCTION CALL
6243   2BCA D7            push a     ; save left operand
6244   2BCB 8E            xor a, b   ; xor sign bits
6245   2BCC FD AA         swp a      ; swap bytes
6246   2BCE 83            mov cl, al ; save result of xor into 'dl'
6247   2BCF E4            pop a      ; restore left side operator
6248   2BD0 DF            push cl    ; save result of xor above
6249   2BD1 FD AA         swp a  
6250   2BD3 93 80         test al, $80  
6251   2BD5 FD AA         swp a  
6252   2BD7 C6 DC 2B      jz skip_invert_a_164  
6253   2BDA FD 95          neg a 
6254   2BDC             skip_invert_a_164:   
6255   2BDC FD AB         swp b
6256   2BDE FD 93 80      test bl, $80  
6257   2BE1 FD AB         swp b
6258   2BE3 C6 E8 2B      jz skip_invert_b_164  
6259   2BE6 FD 97          neg b 
6260   2BE8             skip_invert_b_164:   
6261   2BE8 AC            mul a, b ; *
6262   2BE9 FD 78         mov g, a
6263   2BEB 11            mov a, b
6264   2BEC EA            pop bl
6265   2BED FD 93 80      test bl, $80
6266   2BF0 C6 02 2C      jz _same_signs_164
6267   2BF3 27            mov b, a
6268   2BF4 FD 12         mov a, g
6269   2BF6 95            not a
6270   2BF7 97            not b
6271   2BF8 55 01 00      add b, 1
6272   2BFB 5B 00 00      adc a, 0
6273   2BFE 39            mov c, a
6274   2BFF FD 7A         mov g, c
6275   2C01 11            mov a, b
6276   2C02             _same_signs_164:
6277   2C02 FD 38         mov c, g
6278   2C04 27            mov b, a
6279   2C05 FD F1         pop g
6280   2C07 E4            pop a
6281   2C08             ; --- END FACTORS
6282   2C08 E7            pop d
6283   2C09 FD 43         mov [d], b
6284   2C0B 28            mov b, c
6285   2C0C FD 44 02 00   mov [d + 2], b
6286   2C10 0A 72 2C      jmp _if162_exit
6287   2C13             _if162_else:
6288   2C13             ; phaser_energy = phaser_energy* 100; 
6289   2C13 FA FB FF      lea d, [bp + -5] ; $phaser_energy
6290   2C16 DA            push d
6291   2C17 FA FB FF      lea d, [bp + -5] ; $phaser_energy
6292   2C1A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6293   2C1D FD 39         mov c, b ; And place it into C
6294   2C1F 2A            mov b, [d] ; Lower Word in B
6295   2C20             ; --- START FACTORS
6296   2C20 D7            push a
6297   2C21 FD D8         push g
6298   2C23 11            mov a, b
6299   2C24 FD 7A         mov g, c
6300   2C26 FD 2E 64 00   mov32 cb, $00000064
6300   2C2A 00 00 
6301   2C2C D7            push a     ; save left operand
6302   2C2D 8E            xor a, b   ; xor sign bits
6303   2C2E FD AA         swp a      ; swap bytes
6304   2C30 83            mov cl, al ; save result of xor into 'dl'
6305   2C31 E4            pop a      ; restore left side operator
6306   2C32 DF            push cl    ; save result of xor above
6307   2C33 FD AA         swp a  
6308   2C35 93 80         test al, $80  
6309   2C37 FD AA         swp a  
6310   2C39 C6 3E 2C      jz skip_invert_a_166  
6311   2C3C FD 95          neg a 
6312   2C3E             skip_invert_a_166:   
6313   2C3E FD AB         swp b
6314   2C40 FD 93 80      test bl, $80  
6315   2C43 FD AB         swp b
6316   2C45 C6 4A 2C      jz skip_invert_b_166  
6317   2C48 FD 97          neg b 
6318   2C4A             skip_invert_b_166:   
6319   2C4A AC            mul a, b ; *
6320   2C4B FD 78         mov g, a
6321   2C4D 11            mov a, b
6322   2C4E EA            pop bl
6323   2C4F FD 93 80      test bl, $80
6324   2C52 C6 64 2C      jz _same_signs_166
6325   2C55 27            mov b, a
6326   2C56 FD 12         mov a, g
6327   2C58 95            not a
6328   2C59 97            not b
6329   2C5A 55 01 00      add b, 1
6330   2C5D 5B 00 00      adc a, 0
6331   2C60 39            mov c, a
6332   2C61 FD 7A         mov g, c
6333   2C63 11            mov a, b
6334   2C64             _same_signs_166:
6335   2C64 FD 38         mov c, g
6336   2C66 27            mov b, a
6337   2C67 FD F1         pop g
6338   2C69 E4            pop a
6339   2C6A             ; --- END FACTORS
6340   2C6A E7            pop d
6341   2C6B FD 43         mov [d], b
6342   2C6D 28            mov b, c
6343   2C6E FD 44 02 00   mov [d + 2], b
6344   2C72             _if162_exit:
6345   2C72             ; h1 = phaser_energy / klingons; 
6346   2C72 FA F7 FF      lea d, [bp + -9] ; $h1
6347   2C75 DA            push d
6348   2C76 FA FB FF      lea d, [bp + -5] ; $phaser_energy
6349   2C79 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6350   2C7C FD 39         mov c, b ; And place it into C
6351   2C7E 2A            mov b, [d] ; Lower Word in B
6352   2C7F             ; --- START FACTORS
6353   2C7F D7            push a
6354   2C80 FD D8         push g
6355   2C82 11            mov a, b
6356   2C83 FD 7A         mov g, c
6357   2C85 3B 85 68      mov d, _klingons ; $klingons
6358   2C88 32            mov bl, [d]
6359   2C89 A7 00         mov bh, 0
6360   2C8B 38 00 00      mov c, 0
6361   2C8E AE            div a, b
6362   2C8F FD 38         mov c, g
6363   2C91 27            mov b, a
6364   2C92 FD F1         pop g
6365   2C94 E4            pop a
6366   2C95             ; --- END FACTORS
6367   2C95 E7            pop d
6368   2C96 FD 43         mov [d], b
6369   2C98 28            mov b, c
6370   2C99 FD 44 02 00   mov [d + 2], b
6371   2C9D             ; for (i = 0; i <= 2; i++) { 
6372   2C9D             _for169_init:
6373   2C9D FA FF FF      lea d, [bp + -1] ; $i
6374   2CA0 DA            push d
6375   2CA1 FD 2E 00 00   mov32 cb, $00000000
6375   2CA5 00 00 
6376   2CA7 E7            pop d
6377   2CA8 FD 43         mov [d], b
6378   2CAA             _for169_cond:
6379   2CAA FA FF FF      lea d, [bp + -1] ; $i
6380   2CAD 2A            mov b, [d]
6381   2CAE 38 00 00      mov c, 0
6382   2CB1             ; --- START RELATIONAL
6383   2CB1 D7            push a
6384   2CB2 11            mov a, b
6385   2CB3 FD 2E 02 00   mov32 cb, $00000002
6385   2CB7 00 00 
6386   2CB9 B0            cmp a, b
6387   2CBA FD 74         sle ; <= (signed)
6388   2CBC E4            pop a
6389   2CBD             ; --- END RELATIONAL
6390   2CBD C0 00 00      cmp b, 0
6391   2CC0 C6 8D 2F      je _for169_exit
6392   2CC3             _for169_block:
6393   2CC3             ; if (k->energy > 0) { 
6394   2CC3             _if170_cond:
6395   2CC3 FA F3 FF      lea d, [bp + -13] ; $k
6396   2CC6 FD 2A         mov d, [d]
6397   2CC8 58 02 00      add d, 2
6398   2CCB 2A            mov b, [d]
6399   2CCC 38 00 00      mov c, 0
6400   2CCF             ; --- START RELATIONAL
6401   2CCF D7            push a
6402   2CD0 11            mov a, b
6403   2CD1 FD 2E 00 00   mov32 cb, $00000000
6403   2CD5 00 00 
6404   2CD7 B0            cmp a, b
6405   2CD8 FD 7F         sgt ; >
6406   2CDA E4            pop a
6407   2CDB             ; --- END RELATIONAL
6408   2CDB C0 00 00      cmp b, 0
6409   2CDE C6 68 2F      je _if170_exit
6410   2CE1             _if170_TRUE:
6411   2CE1             ; h1 = h1 * (get_rand(100) + 200); 
6412   2CE1 FA F7 FF      lea d, [bp + -9] ; $h1
6413   2CE4 DA            push d
6414   2CE5 FA F7 FF      lea d, [bp + -9] ; $h1
6415   2CE8 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6416   2CEB FD 39         mov c, b ; And place it into C
6417   2CED 2A            mov b, [d] ; Lower Word in B
6418   2CEE             ; --- START FACTORS
6419   2CEE D7            push a
6420   2CEF FD D8         push g
6421   2CF1 11            mov a, b
6422   2CF2 FD 7A         mov g, c
6423   2CF4             ; --- START FUNCTION CALL
6424   2CF4 FD 2E 64 00   mov32 cb, $00000064
6424   2CF8 00 00 
6425   2CFA FD AB         swp b
6426   2CFC D8            push b
6427   2CFD 07 91 04      call get_rand
6428   2D00 51 02 00      add sp, 2
6429   2D03             ; --- END FUNCTION CALL
6430   2D03             ; --- START TERMS
6431   2D03 D7            push a
6432   2D04 11            mov a, b
6433   2D05 FD 2E C8 00   mov32 cb, $000000c8
6433   2D09 00 00 
6434   2D0B 56            add b, a
6435   2D0C E4            pop a
6436   2D0D             ; --- END TERMS
6437   2D0D D7            push a     ; save left operand
6438   2D0E 8E            xor a, b   ; xor sign bits
6439   2D0F FD AA         swp a      ; swap bytes
6440   2D11 83            mov cl, al ; save result of xor into 'dl'
6441   2D12 E4            pop a      ; restore left side operator
6442   2D13 DF            push cl    ; save result of xor above
6443   2D14 FD AA         swp a  
6444   2D16 93 80         test al, $80  
6445   2D18 FD AA         swp a  
6446   2D1A C6 1F 2D      jz skip_invert_a_172  
6447   2D1D FD 95          neg a 
6448   2D1F             skip_invert_a_172:   
6449   2D1F FD AB         swp b
6450   2D21 FD 93 80      test bl, $80  
6451   2D24 FD AB         swp b
6452   2D26 C6 2B 2D      jz skip_invert_b_172  
6453   2D29 FD 97          neg b 
6454   2D2B             skip_invert_b_172:   
6455   2D2B AC            mul a, b ; *
6456   2D2C FD 78         mov g, a
6457   2D2E 11            mov a, b
6458   2D2F EA            pop bl
6459   2D30 FD 93 80      test bl, $80
6460   2D33 C6 45 2D      jz _same_signs_172
6461   2D36 27            mov b, a
6462   2D37 FD 12         mov a, g
6463   2D39 95            not a
6464   2D3A 97            not b
6465   2D3B 55 01 00      add b, 1
6466   2D3E 5B 00 00      adc a, 0
6467   2D41 39            mov c, a
6468   2D42 FD 7A         mov g, c
6469   2D44 11            mov a, b
6470   2D45             _same_signs_172:
6471   2D45 FD 38         mov c, g
6472   2D47 27            mov b, a
6473   2D48 FD F1         pop g
6474   2D4A E4            pop a
6475   2D4B             ; --- END FACTORS
6476   2D4B E7            pop d
6477   2D4C FD 43         mov [d], b
6478   2D4E 28            mov b, c
6479   2D4F FD 44 02 00   mov [d + 2], b
6480   2D53             ; h1 =h1/ distance_to(k); 
6481   2D53 FA F7 FF      lea d, [bp + -9] ; $h1
6482   2D56 DA            push d
6483   2D57 FA F7 FF      lea d, [bp + -9] ; $h1
6484   2D5A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6485   2D5D FD 39         mov c, b ; And place it into C
6486   2D5F 2A            mov b, [d] ; Lower Word in B
6487   2D60             ; --- START FACTORS
6488   2D60 D7            push a
6489   2D61 FD D8         push g
6490   2D63 11            mov a, b
6491   2D64 FD 7A         mov g, c
6492   2D66             ; --- START FUNCTION CALL
6493   2D66 FA F3 FF      lea d, [bp + -13] ; $k
6494   2D69 2A            mov b, [d]
6495   2D6A 38 00 00      mov c, 0
6496   2D6D FD AB         swp b
6497   2D6F D8            push b
6498   2D70 07 15 58      call distance_to
6499   2D73 51 02 00      add sp, 2
6500   2D76             ; --- END FUNCTION CALL
6501   2D76 AE            div a, b
6502   2D77 FD 38         mov c, g
6503   2D79 27            mov b, a
6504   2D7A FD F1         pop g
6505   2D7C E4            pop a
6506   2D7D             ; --- END FACTORS
6507   2D7D E7            pop d
6508   2D7E FD 43         mov [d], b
6509   2D80 28            mov b, c
6510   2D81 FD 44 02 00   mov [d + 2], b
6511   2D85             ; if (h1 <= 15 * k->energy) {	/* was 0.15 */ 
6512   2D85             _if175_cond:
6513   2D85 FA F7 FF      lea d, [bp + -9] ; $h1
6514   2D88 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6515   2D8B FD 39         mov c, b ; And place it into C
6516   2D8D 2A            mov b, [d] ; Lower Word in B
6517   2D8E             ; --- START RELATIONAL
6518   2D8E D7            push a
6519   2D8F FD D8         push g
6520   2D91 11            mov a, b
6521   2D92 FD 7A         mov g, c
6522   2D94 FD 2E 0F 00   mov32 cb, $0000000f
6522   2D98 00 00 
6523   2D9A             ; --- START FACTORS
6524   2D9A D7            push a
6525   2D9B FD D8         push g
6526   2D9D 11            mov a, b
6527   2D9E FD 7A         mov g, c
6528   2DA0 FA F3 FF      lea d, [bp + -13] ; $k
6529   2DA3 FD 2A         mov d, [d]
6530   2DA5 58 02 00      add d, 2
6531   2DA8 2A            mov b, [d]
6532   2DA9 38 00 00      mov c, 0
6533   2DAC FD 38         mov c, g
6534   2DAE 27            mov b, a
6535   2DAF FD F1         pop g
6536   2DB1 E4            pop a
6537   2DB2             ; --- END FACTORS
6538   2DB2 FD AF         cmp32 ga, cb
6539   2DB4 FD 76         sleu
6540   2DB6 FD F1         pop g
6541   2DB8 E4            pop a
6542   2DB9             ; --- END RELATIONAL
6543   2DB9 C0 00 00      cmp b, 0
6544   2DBC C6 F0 2D      je _if175_else
6545   2DBF             _if175_TRUE:
6546   2DBF             ; printf("Sensors show no damage to enemy at %d, %d\n\n", k->y, k->x); 
6547   2DBF             ; --- START FUNCTION CALL
6548   2DBF FA F3 FF      lea d, [bp + -13] ; $k
6549   2DC2 FD 2A         mov d, [d]
6550   2DC4 58 01 00      add d, 1
6551   2DC7 32            mov bl, [d]
6552   2DC8 A7 00         mov bh, 0
6553   2DCA 38 00 00      mov c, 0
6554   2DCD FD AA         swp a
6555   2DCF D8            push b
6556   2DD0 FA F3 FF      lea d, [bp + -13] ; $k
6557   2DD3 FD 2A         mov d, [d]
6558   2DD5 58 00 00      add d, 0
6559   2DD8 32            mov bl, [d]
6560   2DD9 A7 00         mov bh, 0
6561   2DDB 38 00 00      mov c, 0
6562   2DDE FD AA         swp a
6563   2DE0 D8            push b
6564   2DE1 26 FD 72      mov b, _s97 ; "Sensors show no damage to enemy at %d, %d\n\n"
6565   2DE4 FD AB         swp b
6566   2DE6 D8            push b
6567   2DE7 07 2C 5B      call printf
6568   2DEA 51 04 00      add sp, 4
6569   2DED             ; --- END FUNCTION CALL
6570   2DED 0A 65 2F      jmp _if175_exit
6571   2DF0             _if175_else:
6572   2DF0             ; h = FROM_FIXED00(h1); 
6573   2DF0 FA F5 FF      lea d, [bp + -11] ; $h
6574   2DF3 DA            push d
6575   2DF4             ; --- START FUNCTION CALL
6576   2DF4 FA F7 FF      lea d, [bp + -9] ; $h1
6577   2DF7 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
6578   2DFA FD 39         mov c, b ; And place it into C
6579   2DFC 2A            mov b, [d] ; Lower Word in B
6580   2DFD FD AB         swp b
6581   2DFF D8            push b
6582   2E00 07 72 04      call FROM_FIXED00
6583   2E03 51 02 00      add sp, 2
6584   2E06             ; --- END FUNCTION CALL
6585   2E06 E7            pop d
6586   2E07 FD 43         mov [d], b
6587   2E09             ; k->energy = k->energy - h; 
6588   2E09 FA F3 FF      lea d, [bp + -13] ; $k
6589   2E0C FD 2A         mov d, [d]
6590   2E0E 58 02 00      add d, 2
6591   2E11 DA            push d
6592   2E12 FA F3 FF      lea d, [bp + -13] ; $k
6593   2E15 FD 2A         mov d, [d]
6594   2E17 58 02 00      add d, 2
6595   2E1A 2A            mov b, [d]
6596   2E1B 38 00 00      mov c, 0
6597   2E1E             ; --- START TERMS
6598   2E1E D7            push a
6599   2E1F 11            mov a, b
6600   2E20 FA F5 FF      lea d, [bp + -11] ; $h
6601   2E23 2A            mov b, [d]
6602   2E24 38 00 00      mov c, 0
6603   2E27 60            sub a, b
6604   2E28 27            mov b, a
6605   2E29 E4            pop a
6606   2E2A             ; --- END TERMS
6607   2E2A E7            pop d
6608   2E2B FD 43         mov [d], b
6609   2E2D             ; printf("%d unit hit on Klingon at sector %d, %d\n", 
6610   2E2D             ; --- START FUNCTION CALL
6611   2E2D FA F3 FF      lea d, [bp + -13] ; $k
6612   2E30 FD 2A         mov d, [d]
6613   2E32 58 01 00      add d, 1
6614   2E35 32            mov bl, [d]
6615   2E36 A7 00         mov bh, 0
6616   2E38 38 00 00      mov c, 0
6617   2E3B FD AA         swp a
6618   2E3D D8            push b
6619   2E3E FA F3 FF      lea d, [bp + -13] ; $k
6620   2E41 FD 2A         mov d, [d]
6621   2E43 58 00 00      add d, 0
6622   2E46 32            mov bl, [d]
6623   2E47 A7 00         mov bh, 0
6624   2E49 38 00 00      mov c, 0
6625   2E4C FD AA         swp a
6626   2E4E D8            push b
6627   2E4F FA F5 FF      lea d, [bp + -11] ; $h
6628   2E52 2A            mov b, [d]
6629   2E53 38 00 00      mov c, 0
6630   2E56 FD AB         swp b
6631   2E58 D8            push b
6632   2E59 26 29 73      mov b, _s98 ; "%d unit hit on Klingon at sector %d, %d\n"
6633   2E5C FD AB         swp b
6634   2E5E D8            push b
6635   2E5F 07 2C 5B      call printf
6636   2E62 51 06 00      add sp, 6
6637   2E65             ; --- END FUNCTION CALL
6638   2E65             ; if (k->energy <= 0) { 
6639   2E65             _if178_cond:
6640   2E65 FA F3 FF      lea d, [bp + -13] ; $k
6641   2E68 FD 2A         mov d, [d]
6642   2E6A 58 02 00      add d, 2
6643   2E6D 2A            mov b, [d]
6644   2E6E 38 00 00      mov c, 0
6645   2E71             ; --- START RELATIONAL
6646   2E71 D7            push a
6647   2E72 11            mov a, b
6648   2E73 FD 2E 00 00   mov32 cb, $00000000
6648   2E77 00 00 
6649   2E79 B0            cmp a, b
6650   2E7A FD 74         sle ; <= (signed)
6651   2E7C E4            pop a
6652   2E7D             ; --- END RELATIONAL
6653   2E7D C0 00 00      cmp b, 0
6654   2E80 C6 4A 2F      je _if178_else
6655   2E83             _if178_TRUE:
6656   2E83             ; puts("*** Klingon Destroyed ***\n"); 
6657   2E83             ; --- START FUNCTION CALL
6658   2E83 26 52 73      mov b, _s99 ; "*** Klingon Destroyed ***\n"
6659   2E86 FD AB         swp b
6660   2E88 D8            push b
6661   2E89 07 19 64      call puts
6662   2E8C 51 02 00      add sp, 2
6663   2E8F             ; --- END FUNCTION CALL
6664   2E8F             ; klingons--; 
6665   2E8F 3B 85 68      mov d, _klingons ; $klingons
6666   2E92 32            mov bl, [d]
6667   2E93 A7 00         mov bh, 0
6668   2E95 38 00 00      mov c, 0
6669   2E98 FD 7D         dec b
6670   2E9A 3B 85 68      mov d, _klingons ; $klingons
6671   2E9D FD 3E         mov [d], bl
6672   2E9F FD 77         inc b
6673   2EA1             ; klingons_left--; 
6674   2EA1 3B 87 68      mov d, _klingons_left ; $klingons_left
6675   2EA4 32            mov bl, [d]
6676   2EA5 A7 00         mov bh, 0
6677   2EA7 38 00 00      mov c, 0
6678   2EAA FD 7D         dec b
6679   2EAC 3B 87 68      mov d, _klingons_left ; $klingons_left
6680   2EAF FD 3E         mov [d], bl
6681   2EB1 FD 77         inc b
6682   2EB3             ; wipe_klingon(k); 
6683   2EB3             ; --- START FUNCTION CALL
6684   2EB3 FA F3 FF      lea d, [bp + -13] ; $k
6685   2EB6 2A            mov b, [d]
6686   2EB7 38 00 00      mov c, 0
6687   2EBA FD AB         swp b
6688   2EBC D8            push b
6689   2EBD 07 0C 2A      call wipe_klingon
6690   2EC0 51 02 00      add sp, 2
6691   2EC3             ; --- END FUNCTION CALL
6692   2EC3             ; k->energy = 0; 
6693   2EC3 FA F3 FF      lea d, [bp + -13] ; $k
6694   2EC6 FD 2A         mov d, [d]
6695   2EC8 58 02 00      add d, 2
6696   2ECB DA            push d
6697   2ECC FD 2E 00 00   mov32 cb, $00000000
6697   2ED0 00 00 
6698   2ED2 E7            pop d
6699   2ED3 FD 43         mov [d], b
6700   2ED5             ; map[quad_y][quad_x] = map[quad_y][quad_x] - 0x100; 
6701   2ED5 3B D7 67      mov d, _map_data ; $map
6702   2ED8 D7            push a
6703   2ED9 DA            push d
6704   2EDA 3B 8A 68      mov d, _quad_y ; $quad_y
6705   2EDD 2A            mov b, [d]
6706   2EDE 38 00 00      mov c, 0
6707   2EE1 E7            pop d
6708   2EE2 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
6709   2EE6 DA            push d
6710   2EE7 3B 8C 68      mov d, _quad_x ; $quad_x
6711   2EEA 2A            mov b, [d]
6712   2EEB 38 00 00      mov c, 0
6713   2EEE E7            pop d
6714   2EEF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6715   2EF3 E4            pop a
6716   2EF4 DA            push d
6717   2EF5 3B D7 67      mov d, _map_data ; $map
6718   2EF8 D7            push a
6719   2EF9 DA            push d
6720   2EFA 3B 8A 68      mov d, _quad_y ; $quad_y
6721   2EFD 2A            mov b, [d]
6722   2EFE 38 00 00      mov c, 0
6723   2F01 E7            pop d
6724   2F02 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
6725   2F06 DA            push d
6726   2F07 3B 8C 68      mov d, _quad_x ; $quad_x
6727   2F0A 2A            mov b, [d]
6728   2F0B 38 00 00      mov c, 0
6729   2F0E E7            pop d
6730   2F0F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6731   2F13 E4            pop a
6732   2F14 2A            mov b, [d]
6733   2F15 38 00 00      mov c, 0
6734   2F18             ; --- START TERMS
6735   2F18 D7            push a
6736   2F19 11            mov a, b
6737   2F1A FD 2E 00 01   mov32 cb, $00000100
6737   2F1E 00 00 
6738   2F20 60            sub a, b
6739   2F21 27            mov b, a
6740   2F22 E4            pop a
6741   2F23             ; --- END TERMS
6742   2F23 E7            pop d
6743   2F24 FD 43         mov [d], b
6744   2F26             ; if (klingons_left <= 0) 
6745   2F26             _if179_cond:
6746   2F26 3B 87 68      mov d, _klingons_left ; $klingons_left
6747   2F29 32            mov bl, [d]
6748   2F2A A7 00         mov bh, 0
6749   2F2C 38 00 00      mov c, 0
6750   2F2F             ; --- START RELATIONAL
6751   2F2F D7            push a
6752   2F30 11            mov a, b
6753   2F31 FD 2E 00 00   mov32 cb, $00000000
6753   2F35 00 00 
6754   2F37 B0            cmp a, b
6755   2F38 FD 76         sleu ; <= (unsigned)
6756   2F3A E4            pop a
6757   2F3B             ; --- END RELATIONAL
6758   2F3B C0 00 00      cmp b, 0
6759   2F3E C6 47 2F      je _if179_exit
6760   2F41             _if179_TRUE:
6761   2F41             ; won_game(); 
6762   2F41             ; --- START FUNCTION CALL
6763   2F41 07 9A 4A      call won_game
6764   2F44 0A 47 2F      jmp _if179_exit
6765   2F47             _if179_exit:
6766   2F47 0A 65 2F      jmp _if178_exit
6767   2F4A             _if178_else:
6768   2F4A             ; printf("   (Sensors show %d units remaining.)\n\n", k->energy); 
6769   2F4A             ; --- START FUNCTION CALL
6770   2F4A FA F3 FF      lea d, [bp + -13] ; $k
6771   2F4D FD 2A         mov d, [d]
6772   2F4F 58 02 00      add d, 2
6773   2F52 2A            mov b, [d]
6774   2F53 38 00 00      mov c, 0
6775   2F56 FD AB         swp b
6776   2F58 D8            push b
6777   2F59 26 6D 73      mov b, _s100 ; "   (Sensors show %d units remaining.)\n\n"
6778   2F5C FD AB         swp b
6779   2F5E D8            push b
6780   2F5F 07 2C 5B      call printf
6781   2F62 51 04 00      add sp, 4
6782   2F65             ; --- END FUNCTION CALL
6783   2F65             _if178_exit:
6784   2F65             _if175_exit:
6785   2F65 0A 68 2F      jmp _if170_exit
6786   2F68             _if170_exit:
6787   2F68             ; k++; 
6788   2F68 FA F3 FF      lea d, [bp + -13] ; $k
6789   2F6B 2A            mov b, [d]
6790   2F6C 38 00 00      mov c, 0
6791   2F6F 11            mov a, b
6792   2F70 FD 77         inc b
6793   2F72 FD 77         inc b
6794   2F74 FA F3 FF      lea d, [bp + -13] ; $k
6795   2F77 FD 43         mov [d], b
6796   2F79 27            mov b, a
6797   2F7A             _for169_update:
6798   2F7A FA FF FF      lea d, [bp + -1] ; $i
6799   2F7D 2A            mov b, [d]
6800   2F7E 38 00 00      mov c, 0
6801   2F81 11            mov a, b
6802   2F82 FD 77         inc b
6803   2F84 FA FF FF      lea d, [bp + -1] ; $i
6804   2F87 FD 43         mov [d], b
6805   2F89 27            mov b, a
6806   2F8A 0A AA 2C      jmp _for169_cond
6807   2F8D             _for169_exit:
6808   2F8D             ; klingons_shoot(); 
6809   2F8D             ; --- START FUNCTION CALL
6810   2F8D 07 6F 4C      call klingons_shoot
6811   2F90 F9            leave
6812   2F91 09            ret
6813   2F92             
6814   2F92             photon_torpedoes:
6815   2F92 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6816   2F95             ; int x3, y3; 
6817   2F95 52 02 00      sub sp, 2
6818   2F98 52 02 00      sub sp, 2
6819   2F9B             ; int        c1; 
6820   2F9B 52 02 00      sub sp, 2
6821   2F9E             ; int c2, c3, c4; 
6822   2F9E 52 02 00      sub sp, 2
6823   2FA1 52 02 00      sub sp, 2
6824   2FA4 52 02 00      sub sp, 2
6825   2FA7             ; int        x, y, x1, x2; 
6826   2FA7 52 02 00      sub sp, 2
6827   2FAA 52 02 00      sub sp, 2
6828   2FAD 52 02 00      sub sp, 2
6829   2FB0 52 02 00      sub sp, 2
6830   2FB3             ; if (torps <= 0) { 
6831   2FB3             _if180_cond:
6832   2FB3 3B 88 68      mov d, _torps ; $torps
6833   2FB6 32            mov bl, [d]
6834   2FB7 A7 00         mov bh, 0
6835   2FB9 38 00 00      mov c, 0
6836   2FBC             ; --- START RELATIONAL
6837   2FBC D7            push a
6838   2FBD 11            mov a, b
6839   2FBE FD 2E 00 00   mov32 cb, $00000000
6839   2FC2 00 00 
6840   2FC4 B0            cmp a, b
6841   2FC5 FD 76         sleu ; <= (unsigned)
6842   2FC7 E4            pop a
6843   2FC8             ; --- END RELATIONAL
6844   2FC8 C0 00 00      cmp b, 0
6845   2FCB C6 DF 2F      je _if180_exit
6846   2FCE             _if180_TRUE:
6847   2FCE             ; puts("All photon torpedoes expended"); 
6848   2FCE             ; --- START FUNCTION CALL
6849   2FCE 26 95 73      mov b, _s101 ; "All photon torpedoes expended"
6850   2FD1 FD AB         swp b
6851   2FD3 D8            push b
6852   2FD4 07 19 64      call puts
6853   2FD7 51 02 00      add sp, 2
6854   2FDA             ; --- END FUNCTION CALL
6855   2FDA             ; return; 
6856   2FDA F9            leave
6857   2FDB 09            ret
6858   2FDC 0A DF 2F      jmp _if180_exit
6859   2FDF             _if180_exit:
6860   2FDF             ; if (inoperable(5)) 
6861   2FDF             _if181_cond:
6862   2FDF             ; --- START FUNCTION CALL
6863   2FDF FD 2E 05 00   mov32 cb, $00000005
6863   2FE3 00 00 
6864   2FE5 DD            push bl
6865   2FE6 07 98 08      call inoperable
6866   2FE9 51 01 00      add sp, 1
6867   2FEC             ; --- END FUNCTION CALL
6868   2FEC C0 00 00      cmp b, 0
6869   2FEF C6 F7 2F      je _if181_exit
6870   2FF2             _if181_TRUE:
6871   2FF2             ; return; 
6872   2FF2 F9            leave
6873   2FF3 09            ret
6874   2FF4 0A F7 2F      jmp _if181_exit
6875   2FF7             _if181_exit:
6876   2FF7             ; puts("Course (0-9): "); 
6877   2FF7             ; --- START FUNCTION CALL
6878   2FF7 26 D1 6D      mov b, _s63 ; "Course (0-9): "
6879   2FFA FD AB         swp b
6880   2FFC D8            push b
6881   2FFD 07 19 64      call puts
6882   3000 51 02 00      add sp, 2
6883   3003             ; --- END FUNCTION CALL
6884   3003             ; c1 = input_f00(); 
6885   3003 FA FB FF      lea d, [bp + -5] ; $c1
6886   3006 DA            push d
6887   3007             ; --- START FUNCTION CALL
6888   3007 07 F5 05      call input_f00
6889   300A E7            pop d
6890   300B FD 43         mov [d], b
6891   300D             ; if (c1 == 900) 
6892   300D             _if182_cond:
6893   300D FA FB FF      lea d, [bp + -5] ; $c1
6894   3010 2A            mov b, [d]
6895   3011 38 00 00      mov c, 0
6896   3014             ; --- START RELATIONAL
6897   3014 D7            push a
6898   3015 11            mov a, b
6899   3016 FD 2E 84 03   mov32 cb, $00000384
6899   301A 00 00 
6900   301C B0            cmp a, b
6901   301D FD 71         seq ; ==
6902   301F E4            pop a
6903   3020             ; --- END RELATIONAL
6904   3020 C0 00 00      cmp b, 0
6905   3023 C6 36 30      je _if182_exit
6906   3026             _if182_TRUE:
6907   3026             ; c1 = 100; 
6908   3026 FA FB FF      lea d, [bp + -5] ; $c1
6909   3029 DA            push d
6910   302A FD 2E 64 00   mov32 cb, $00000064
6910   302E 00 00 
6911   3030 E7            pop d
6912   3031 FD 43         mov [d], b
6913   3033 0A 36 30      jmp _if182_exit
6914   3036             _if182_exit:
6915   3036             ; if (c1 < 100 || c1 >= 900) { 
6916   3036             _if183_cond:
6917   3036 FA FB FF      lea d, [bp + -5] ; $c1
6918   3039 2A            mov b, [d]
6919   303A 38 00 00      mov c, 0
6920   303D             ; --- START RELATIONAL
6921   303D D7            push a
6922   303E 11            mov a, b
6923   303F FD 2E 64 00   mov32 cb, $00000064
6923   3043 00 00 
6924   3045 B0            cmp a, b
6925   3046 FD 73         slt ; < (signed)
6926   3048 E4            pop a
6927   3049             ; --- END RELATIONAL
6928   3049             ; --- START LOGICAL OR
6929   3049 D7            push a
6930   304A 11            mov a, b
6931   304B FA FB FF      lea d, [bp + -5] ; $c1
6932   304E 2A            mov b, [d]
6933   304F 38 00 00      mov c, 0
6934   3052             ; --- START RELATIONAL
6935   3052 D7            push a
6936   3053 11            mov a, b
6937   3054 FD 2E 84 03   mov32 cb, $00000384
6937   3058 00 00 
6938   305A B0            cmp a, b
6939   305B FD 80         sge ; >=
6940   305D E4            pop a
6941   305E             ; --- END RELATIONAL
6942   305E FD A8         sor a, b ; ||
6943   3060 E4            pop a
6944   3061             ; --- END LOGICAL OR
6945   3061 C0 00 00      cmp b, 0
6946   3064 C6 82 30      je _if183_exit
6947   3067             _if183_TRUE:
6948   3067             ; printf("Ensign Chekov%s", inc_1); 
6949   3067             ; --- START FUNCTION CALL
6950   3067 3B 23 69      mov d, _inc_1 ; $inc_1
6951   306A 2A            mov b, [d]
6952   306B 38 00 00      mov c, 0
6953   306E FD AB         swp b
6954   3070 D8            push b
6955   3071 26 B3 73      mov b, _s102 ; "Ensign Chekov%s"
6956   3074 FD AB         swp b
6957   3076 D8            push b
6958   3077 07 2C 5B      call printf
6959   307A 51 04 00      add sp, 4
6960   307D             ; --- END FUNCTION CALL
6961   307D             ; return; 
6962   307D F9            leave
6963   307E 09            ret
6964   307F 0A 82 30      jmp _if183_exit
6965   3082             _if183_exit:
6966   3082             ; energy = energy - 2; 
6967   3082 3B D3 67      mov d, _energy ; $energy
6968   3085 DA            push d
6969   3086 3B D3 67      mov d, _energy ; $energy
6970   3089 2A            mov b, [d]
6971   308A 38 00 00      mov c, 0
6972   308D             ; --- START TERMS
6973   308D D7            push a
6974   308E 11            mov a, b
6975   308F FD 2E 02 00   mov32 cb, $00000002
6975   3093 00 00 
6976   3095 60            sub a, b
6977   3096 27            mov b, a
6978   3097 E4            pop a
6979   3098             ; --- END TERMS
6980   3098 E7            pop d
6981   3099 FD 43         mov [d], b
6982   309B             ; torps--; 
6983   309B 3B 88 68      mov d, _torps ; $torps
6984   309E 32            mov bl, [d]
6985   309F A7 00         mov bh, 0
6986   30A1 38 00 00      mov c, 0
6987   30A4 FD 7D         dec b
6988   30A6 3B 88 68      mov d, _torps ; $torps
6989   30A9 FD 3E         mov [d], bl
6990   30AB FD 77         inc b
6991   30AD             ; c2 = FROM_FIXED00(c1);	/* Integer part */ 
6992   30AD FA F9 FF      lea d, [bp + -7] ; $c2
6993   30B0 DA            push d
6994   30B1             ; --- START FUNCTION CALL
6995   30B1 FA FB FF      lea d, [bp + -5] ; $c1
6996   30B4 2A            mov b, [d]
6997   30B5 38 00 00      mov c, 0
6998   30B8 FD AB         swp b
6999   30BA D8            push b
7000   30BB 07 72 04      call FROM_FIXED00
7001   30BE 51 02 00      add sp, 2
7002   30C1             ; --- END FUNCTION CALL
7003   30C1 E7            pop d
7004   30C2 FD 43         mov [d], b
7005   30C4             ; c3 = c2 + 1;		/* Next integer part */ 
7006   30C4 FA F7 FF      lea d, [bp + -9] ; $c3
7007   30C7 DA            push d
7008   30C8 FA F9 FF      lea d, [bp + -7] ; $c2
7009   30CB 2A            mov b, [d]
7010   30CC 38 00 00      mov c, 0
7011   30CF             ; --- START TERMS
7012   30CF D7            push a
7013   30D0 11            mov a, b
7014   30D1 FD 2E 01 00   mov32 cb, $00000001
7014   30D5 00 00 
7015   30D7 56            add b, a
7016   30D8 E4            pop a
7017   30D9             ; --- END TERMS
7018   30D9 E7            pop d
7019   30DA FD 43         mov [d], b
7020   30DC             ; c4 = (c1 - TO_FIXED00(c2));	/* Fractional element in fixed point */ 
7021   30DC FA F5 FF      lea d, [bp + -11] ; $c4
7022   30DF DA            push d
7023   30E0 FA FB FF      lea d, [bp + -5] ; $c1
7024   30E3 2A            mov b, [d]
7025   30E4 38 00 00      mov c, 0
7026   30E7             ; --- START TERMS
7027   30E7 D7            push a
7028   30E8 11            mov a, b
7029   30E9             ; --- START FUNCTION CALL
7030   30E9 FA F9 FF      lea d, [bp + -7] ; $c2
7031   30EC 2A            mov b, [d]
7032   30ED 38 00 00      mov c, 0
7033   30F0 FD AB         swp b
7034   30F2 D8            push b
7035   30F3 07 54 04      call TO_FIXED00
7036   30F6 51 02 00      add sp, 2
7037   30F9             ; --- END FUNCTION CALL
7038   30F9 60            sub a, b
7039   30FA 27            mov b, a
7040   30FB E4            pop a
7041   30FC             ; --- END TERMS
7042   30FC E7            pop d
7043   30FD FD 43         mov [d], b
7044   30FF             ; x1 = 100 * c[1][c2] + (c[1][c3] - c[1][c2]) * c4; 
7045   30FF FA EF FF      lea d, [bp + -17] ; $x1
7046   3102 DA            push d
7047   3103 FD 2E 64 00   mov32 cb, $00000064
7047   3107 00 00 
7048   3109             ; --- START FACTORS
7049   3109 D7            push a
7050   310A FD D8         push g
7051   310C 11            mov a, b
7052   310D FD 7A         mov g, c
7053   310F 3B B2 67      mov d, _c_data ; $c
7054   3112 D7            push a
7055   3113 DA            push d
7056   3114 FD 2E 01 00   mov32 cb, $00000001
7056   3118 00 00 
7057   311A E7            pop d
7058   311B FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
7059   311F DA            push d
7060   3120 FA F9 FF      lea d, [bp + -7] ; $c2
7061   3123 2A            mov b, [d]
7062   3124 38 00 00      mov c, 0
7063   3127 E7            pop d
7064   3128 5A            add d, b
7065   3129 E4            pop a
7066   312A 32            mov bl, [d]
7067   312B A7 00         mov bh, 0
7068   312D 38 00 00      mov c, 0
7069   3130 FD 38         mov c, g
7070   3132 27            mov b, a
7071   3133 FD F1         pop g
7072   3135 E4            pop a
7073   3136             ; --- END FACTORS
7074   3136             ; --- START TERMS
7075   3136 D7            push a
7076   3137 11            mov a, b
7077   3138 3B B2 67      mov d, _c_data ; $c
7078   313B D7            push a
7079   313C DA            push d
7080   313D FD 2E 01 00   mov32 cb, $00000001
7080   3141 00 00 
7081   3143 E7            pop d
7082   3144 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
7083   3148 DA            push d
7084   3149 FA F7 FF      lea d, [bp + -9] ; $c3
7085   314C 2A            mov b, [d]
7086   314D 38 00 00      mov c, 0
7087   3150 E7            pop d
7088   3151 5A            add d, b
7089   3152 E4            pop a
7090   3153 32            mov bl, [d]
7091   3154 A7 00         mov bh, 0
7092   3156 38 00 00      mov c, 0
7093   3159             ; --- START TERMS
7094   3159 D7            push a
7095   315A 11            mov a, b
7096   315B 3B B2 67      mov d, _c_data ; $c
7097   315E D7            push a
7098   315F DA            push d
7099   3160 FD 2E 01 00   mov32 cb, $00000001
7099   3164 00 00 
7100   3166 E7            pop d
7101   3167 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
7102   316B DA            push d
7103   316C FA F9 FF      lea d, [bp + -7] ; $c2
7104   316F 2A            mov b, [d]
7105   3170 38 00 00      mov c, 0
7106   3173 E7            pop d
7107   3174 5A            add d, b
7108   3175 E4            pop a
7109   3176 32            mov bl, [d]
7110   3177 A7 00         mov bh, 0
7111   3179 38 00 00      mov c, 0
7112   317C 60            sub a, b
7113   317D 27            mov b, a
7114   317E E4            pop a
7115   317F             ; --- END TERMS
7116   317F             ; --- START FACTORS
7117   317F D7            push a
7118   3180 FD D8         push g
7119   3182 11            mov a, b
7120   3183 FD 7A         mov g, c
7121   3185 FA F5 FF      lea d, [bp + -11] ; $c4
7122   3188 2A            mov b, [d]
7123   3189 38 00 00      mov c, 0
7124   318C FD 38         mov c, g
7125   318E 27            mov b, a
7126   318F FD F1         pop g
7127   3191 E4            pop a
7128   3192             ; --- END FACTORS
7129   3192 56            add b, a
7130   3193 E4            pop a
7131   3194             ; --- END TERMS
7132   3194 E7            pop d
7133   3195 FD 43         mov [d], b
7134   3197             ; x2 = 100 * c[2][c2] + (c[2][c3] - c[2][c2]) * c4; 
7135   3197 FA ED FF      lea d, [bp + -19] ; $x2
7136   319A DA            push d
7137   319B FD 2E 64 00   mov32 cb, $00000064
7137   319F 00 00 
7138   31A1             ; --- START FACTORS
7139   31A1 D7            push a
7140   31A2 FD D8         push g
7141   31A4 11            mov a, b
7142   31A5 FD 7A         mov g, c
7143   31A7 3B B2 67      mov d, _c_data ; $c
7144   31AA D7            push a
7145   31AB DA            push d
7146   31AC FD 2E 02 00   mov32 cb, $00000002
7146   31B0 00 00 
7147   31B2 E7            pop d
7148   31B3 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
7149   31B7 DA            push d
7150   31B8 FA F9 FF      lea d, [bp + -7] ; $c2
7151   31BB 2A            mov b, [d]
7152   31BC 38 00 00      mov c, 0
7153   31BF E7            pop d
7154   31C0 5A            add d, b
7155   31C1 E4            pop a
7156   31C2 32            mov bl, [d]
7157   31C3 A7 00         mov bh, 0
7158   31C5 38 00 00      mov c, 0
7159   31C8 FD 38         mov c, g
7160   31CA 27            mov b, a
7161   31CB FD F1         pop g
7162   31CD E4            pop a
7163   31CE             ; --- END FACTORS
7164   31CE             ; --- START TERMS
7165   31CE D7            push a
7166   31CF 11            mov a, b
7167   31D0 3B B2 67      mov d, _c_data ; $c
7168   31D3 D7            push a
7169   31D4 DA            push d
7170   31D5 FD 2E 02 00   mov32 cb, $00000002
7170   31D9 00 00 
7171   31DB E7            pop d
7172   31DC FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
7173   31E0 DA            push d
7174   31E1 FA F7 FF      lea d, [bp + -9] ; $c3
7175   31E4 2A            mov b, [d]
7176   31E5 38 00 00      mov c, 0
7177   31E8 E7            pop d
7178   31E9 5A            add d, b
7179   31EA E4            pop a
7180   31EB 32            mov bl, [d]
7181   31EC A7 00         mov bh, 0
7182   31EE 38 00 00      mov c, 0
7183   31F1             ; --- START TERMS
7184   31F1 D7            push a
7185   31F2 11            mov a, b
7186   31F3 3B B2 67      mov d, _c_data ; $c
7187   31F6 D7            push a
7188   31F7 DA            push d
7189   31F8 FD 2E 02 00   mov32 cb, $00000002
7189   31FC 00 00 
7190   31FE E7            pop d
7191   31FF FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
7192   3203 DA            push d
7193   3204 FA F9 FF      lea d, [bp + -7] ; $c2
7194   3207 2A            mov b, [d]
7195   3208 38 00 00      mov c, 0
7196   320B E7            pop d
7197   320C 5A            add d, b
7198   320D E4            pop a
7199   320E 32            mov bl, [d]
7200   320F A7 00         mov bh, 0
7201   3211 38 00 00      mov c, 0
7202   3214 60            sub a, b
7203   3215 27            mov b, a
7204   3216 E4            pop a
7205   3217             ; --- END TERMS
7206   3217             ; --- START FACTORS
7207   3217 D7            push a
7208   3218 FD D8         push g
7209   321A 11            mov a, b
7210   321B FD 7A         mov g, c
7211   321D FA F5 FF      lea d, [bp + -11] ; $c4
7212   3220 2A            mov b, [d]
7213   3221 38 00 00      mov c, 0
7214   3224 FD 38         mov c, g
7215   3226 27            mov b, a
7216   3227 FD F1         pop g
7217   3229 E4            pop a
7218   322A             ; --- END FACTORS
7219   322A 56            add b, a
7220   322B E4            pop a
7221   322C             ; --- END TERMS
7222   322C E7            pop d
7223   322D FD 43         mov [d], b
7224   322F             ; x = ship_y + x1; 
7225   322F FA F3 FF      lea d, [bp + -13] ; $x
7226   3232 DA            push d
7227   3233 3B A9 68      mov d, _ship_y ; $ship_y
7228   3236 2A            mov b, [d]
7229   3237 38 00 00      mov c, 0
7230   323A             ; --- START TERMS
7231   323A D7            push a
7232   323B 11            mov a, b
7233   323C FA EF FF      lea d, [bp + -17] ; $x1
7234   323F 2A            mov b, [d]
7235   3240 38 00 00      mov c, 0
7236   3243 56            add b, a
7237   3244 E4            pop a
7238   3245             ; --- END TERMS
7239   3245 E7            pop d
7240   3246 FD 43         mov [d], b
7241   3248             ; y = ship_x + x2; 
7242   3248 FA F1 FF      lea d, [bp + -15] ; $y
7243   324B DA            push d
7244   324C 3B AB 68      mov d, _ship_x ; $ship_x
7245   324F 2A            mov b, [d]
7246   3250 38 00 00      mov c, 0
7247   3253             ; --- START TERMS
7248   3253 D7            push a
7249   3254 11            mov a, b
7250   3255 FA ED FF      lea d, [bp + -19] ; $x2
7251   3258 2A            mov b, [d]
7252   3259 38 00 00      mov c, 0
7253   325C 56            add b, a
7254   325D E4            pop a
7255   325E             ; --- END TERMS
7256   325E E7            pop d
7257   325F FD 43         mov [d], b
7258   3261             ; x3 = FROM_FIXED00(x); 
7259   3261 FA FF FF      lea d, [bp + -1] ; $x3
7260   3264 DA            push d
7261   3265             ; --- START FUNCTION CALL
7262   3265 FA F3 FF      lea d, [bp + -13] ; $x
7263   3268 2A            mov b, [d]
7264   3269 38 00 00      mov c, 0
7265   326C FD AB         swp b
7266   326E D8            push b
7267   326F 07 72 04      call FROM_FIXED00
7268   3272 51 02 00      add sp, 2
7269   3275             ; --- END FUNCTION CALL
7270   3275 E7            pop d
7271   3276 FD 43         mov [d], b
7272   3278             ; y3 = FROM_FIXED00(y); 
7273   3278 FA FD FF      lea d, [bp + -3] ; $y3
7274   327B DA            push d
7275   327C             ; --- START FUNCTION CALL
7276   327C FA F1 FF      lea d, [bp + -15] ; $y
7277   327F 2A            mov b, [d]
7278   3280 38 00 00      mov c, 0
7279   3283 FD AB         swp b
7280   3285 D8            push b
7281   3286 07 72 04      call FROM_FIXED00
7282   3289 51 02 00      add sp, 2
7283   328C             ; --- END FUNCTION CALL
7284   328C E7            pop d
7285   328D FD 43         mov [d], b
7286   328F             ; puts("Torpedo Track:"); 
7287   328F             ; --- START FUNCTION CALL
7288   328F 26 C3 73      mov b, _s103 ; "Torpedo Track:"
7289   3292 FD AB         swp b
7290   3294 D8            push b
7291   3295 07 19 64      call puts
7292   3298 51 02 00      add sp, 2
7293   329B             ; --- END FUNCTION CALL
7294   329B             ; while (x3 >= 1 && x3 <= 8 && y3 >= 1 && y3 <= 8) { 
7295   329B             _while192_cond:
7296   329B FA FF FF      lea d, [bp + -1] ; $x3
7297   329E 2A            mov b, [d]
7298   329F 38 00 00      mov c, 0
7299   32A2             ; --- START RELATIONAL
7300   32A2 D7            push a
7301   32A3 11            mov a, b
7302   32A4 FD 2E 01 00   mov32 cb, $00000001
7302   32A8 00 00 
7303   32AA B0            cmp a, b
7304   32AB FD 80         sge ; >=
7305   32AD E4            pop a
7306   32AE             ; --- END RELATIONAL
7307   32AE             ; --- START LOGICAL AND
7308   32AE D7            push a
7309   32AF 11            mov a, b
7310   32B0 FA FF FF      lea d, [bp + -1] ; $x3
7311   32B3 2A            mov b, [d]
7312   32B4 38 00 00      mov c, 0
7313   32B7             ; --- START RELATIONAL
7314   32B7 D7            push a
7315   32B8 11            mov a, b
7316   32B9 FD 2E 08 00   mov32 cb, $00000008
7316   32BD 00 00 
7317   32BF B0            cmp a, b
7318   32C0 FD 74         sle ; <= (signed)
7319   32C2 E4            pop a
7320   32C3             ; --- END RELATIONAL
7321   32C3 FD A7         sand a, b
7322   32C5 11            mov a, b
7323   32C6 FA FD FF      lea d, [bp + -3] ; $y3
7324   32C9 2A            mov b, [d]
7325   32CA 38 00 00      mov c, 0
7326   32CD             ; --- START RELATIONAL
7327   32CD D7            push a
7328   32CE 11            mov a, b
7329   32CF FD 2E 01 00   mov32 cb, $00000001
7329   32D3 00 00 
7330   32D5 B0            cmp a, b
7331   32D6 FD 80         sge ; >=
7332   32D8 E4            pop a
7333   32D9             ; --- END RELATIONAL
7334   32D9 FD A7         sand a, b
7335   32DB 11            mov a, b
7336   32DC FA FD FF      lea d, [bp + -3] ; $y3
7337   32DF 2A            mov b, [d]
7338   32E0 38 00 00      mov c, 0
7339   32E3             ; --- START RELATIONAL
7340   32E3 D7            push a
7341   32E4 11            mov a, b
7342   32E5 FD 2E 08 00   mov32 cb, $00000008
7342   32E9 00 00 
7343   32EB B0            cmp a, b
7344   32EC FD 74         sle ; <= (signed)
7345   32EE E4            pop a
7346   32EF             ; --- END RELATIONAL
7347   32EF FD A7         sand a, b
7348   32F1 E4            pop a
7349   32F2             ; --- END LOGICAL AND
7350   32F2 C0 00 00      cmp b, 0
7351   32F5 C6 0E 34      je _while192_exit
7352   32F8             _while192_block:
7353   32F8             ; unsigned char        p; 
7354   32F8 52 01 00      sub sp, 1
7355   32FB             ; printf("    %d, %d\n", x3, y3); 
7356   32FB             ; --- START FUNCTION CALL
7357   32FB FA FD FF      lea d, [bp + -3] ; $y3
7358   32FE 2A            mov b, [d]
7359   32FF 38 00 00      mov c, 0
7360   3302 FD AB         swp b
7361   3304 D8            push b
7362   3305 FA FF FF      lea d, [bp + -1] ; $x3
7363   3308 2A            mov b, [d]
7364   3309 38 00 00      mov c, 0
7365   330C FD AB         swp b
7366   330E D8            push b
7367   330F 26 D2 73      mov b, _s104 ; "    %d, %d\n"
7368   3312 FD AB         swp b
7369   3314 D8            push b
7370   3315 07 2C 5B      call printf
7371   3318 51 06 00      add sp, 6
7372   331B             ; --- END FUNCTION CALL
7373   331B             ; p = quad[x3+-1][y3+-1]; 
7374   331B FA EC FF      lea d, [bp + -20] ; $p
7375   331E DA            push d
7376   331F 3B AF 68      mov d, _quad_data ; $quad
7377   3322 D7            push a
7378   3323 DA            push d
7379   3324 FA FF FF      lea d, [bp + -1] ; $x3
7380   3327 2A            mov b, [d]
7381   3328 38 00 00      mov c, 0
7382   332B             ; --- START TERMS
7383   332B D7            push a
7384   332C 11            mov a, b
7385   332D FD 2E FF FF   mov32 cb, $ffffffff
7385   3331 FF FF 
7386   3333 56            add b, a
7387   3334 E4            pop a
7388   3335             ; --- END TERMS
7389   3335 E7            pop d
7390   3336 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
7391   333A DA            push d
7392   333B FA FD FF      lea d, [bp + -3] ; $y3
7393   333E 2A            mov b, [d]
7394   333F 38 00 00      mov c, 0
7395   3342             ; --- START TERMS
7396   3342 D7            push a
7397   3343 11            mov a, b
7398   3344 FD 2E FF FF   mov32 cb, $ffffffff
7398   3348 FF FF 
7399   334A 56            add b, a
7400   334B E4            pop a
7401   334C             ; --- END TERMS
7402   334C E7            pop d
7403   334D 5A            add d, b
7404   334E E4            pop a
7405   334F 32            mov bl, [d]
7406   3350 A7 00         mov bh, 0
7407   3352 38 00 00      mov c, 0
7408   3355 E7            pop d
7409   3356 FD 3E         mov [d], bl
7410   3358             ; if (p != 		0        && p != 		4      ) { 
7411   3358             _if193_cond:
7412   3358 FA EC FF      lea d, [bp + -20] ; $p
7413   335B 32            mov bl, [d]
7414   335C A7 00         mov bh, 0
7415   335E 38 00 00      mov c, 0
7416   3361             ; --- START RELATIONAL
7417   3361 D7            push a
7418   3362 11            mov a, b
7419   3363 FD 2E 00 00   mov32 cb, $00000000
7419   3367 00 00 
7420   3369 B0            cmp a, b
7421   336A FD 72         sneq ; !=
7422   336C E4            pop a
7423   336D             ; --- END RELATIONAL
7424   336D             ; --- START LOGICAL AND
7425   336D D7            push a
7426   336E 11            mov a, b
7427   336F FA EC FF      lea d, [bp + -20] ; $p
7428   3372 32            mov bl, [d]
7429   3373 A7 00         mov bh, 0
7430   3375 38 00 00      mov c, 0
7431   3378             ; --- START RELATIONAL
7432   3378 D7            push a
7433   3379 11            mov a, b
7434   337A FD 2E 04 00   mov32 cb, $00000004
7434   337E 00 00 
7435   3380 B0            cmp a, b
7436   3381 FD 72         sneq ; !=
7437   3383 E4            pop a
7438   3384             ; --- END RELATIONAL
7439   3384 FD A7         sand a, b
7440   3386 E4            pop a
7441   3387             ; --- END LOGICAL AND
7442   3387 C0 00 00      cmp b, 0
7443   338A C6 AB 33      je _if193_exit
7444   338D             _if193_TRUE:
7445   338D             ; torpedo_hit(x3, y3); 
7446   338D             ; --- START FUNCTION CALL
7447   338D FA FD FF      lea d, [bp + -3] ; $y3
7448   3390 2A            mov b, [d]
7449   3391 38 00 00      mov c, 0
7450   3394 DD            push bl
7451   3395 FA FF FF      lea d, [bp + -1] ; $x3
7452   3398 2A            mov b, [d]
7453   3399 38 00 00      mov c, 0
7454   339C DD            push bl
7455   339D 07 1F 34      call torpedo_hit
7456   33A0 51 02 00      add sp, 2
7457   33A3             ; --- END FUNCTION CALL
7458   33A3             ; klingons_shoot(); 
7459   33A3             ; --- START FUNCTION CALL
7460   33A3 07 6F 4C      call klingons_shoot
7461   33A6             ; return; 
7462   33A6 F9            leave
7463   33A7 09            ret
7464   33A8 0A AB 33      jmp _if193_exit
7465   33AB             _if193_exit:
7466   33AB             ; x = x + x1; 
7467   33AB FA F3 FF      lea d, [bp + -13] ; $x
7468   33AE DA            push d
7469   33AF FA F3 FF      lea d, [bp + -13] ; $x
7470   33B2 2A            mov b, [d]
7471   33B3 38 00 00      mov c, 0
7472   33B6             ; --- START TERMS
7473   33B6 D7            push a
7474   33B7 11            mov a, b
7475   33B8 FA EF FF      lea d, [bp + -17] ; $x1
7476   33BB 2A            mov b, [d]
7477   33BC 38 00 00      mov c, 0
7478   33BF 56            add b, a
7479   33C0 E4            pop a
7480   33C1             ; --- END TERMS
7481   33C1 E7            pop d
7482   33C2 FD 43         mov [d], b
7483   33C4             ; y = y + x2; 
7484   33C4 FA F1 FF      lea d, [bp + -15] ; $y
7485   33C7 DA            push d
7486   33C8 FA F1 FF      lea d, [bp + -15] ; $y
7487   33CB 2A            mov b, [d]
7488   33CC 38 00 00      mov c, 0
7489   33CF             ; --- START TERMS
7490   33CF D7            push a
7491   33D0 11            mov a, b
7492   33D1 FA ED FF      lea d, [bp + -19] ; $x2
7493   33D4 2A            mov b, [d]
7494   33D5 38 00 00      mov c, 0
7495   33D8 56            add b, a
7496   33D9 E4            pop a
7497   33DA             ; --- END TERMS
7498   33DA E7            pop d
7499   33DB FD 43         mov [d], b
7500   33DD             ; x3 = FROM_FIXED00(x); 
7501   33DD FA FF FF      lea d, [bp + -1] ; $x3
7502   33E0 DA            push d
7503   33E1             ; --- START FUNCTION CALL
7504   33E1 FA F3 FF      lea d, [bp + -13] ; $x
7505   33E4 2A            mov b, [d]
7506   33E5 38 00 00      mov c, 0
7507   33E8 FD AB         swp b
7508   33EA D8            push b
7509   33EB 07 72 04      call FROM_FIXED00
7510   33EE 51 02 00      add sp, 2
7511   33F1             ; --- END FUNCTION CALL
7512   33F1 E7            pop d
7513   33F2 FD 43         mov [d], b
7514   33F4             ; y3 = FROM_FIXED00(y); 
7515   33F4 FA FD FF      lea d, [bp + -3] ; $y3
7516   33F7 DA            push d
7517   33F8             ; --- START FUNCTION CALL
7518   33F8 FA F1 FF      lea d, [bp + -15] ; $y
7519   33FB 2A            mov b, [d]
7520   33FC 38 00 00      mov c, 0
7521   33FF FD AB         swp b
7522   3401 D8            push b
7523   3402 07 72 04      call FROM_FIXED00
7524   3405 51 02 00      add sp, 2
7525   3408             ; --- END FUNCTION CALL
7526   3408 E7            pop d
7527   3409 FD 43         mov [d], b
7528   340B 0A 9B 32      jmp _while192_cond
7529   340E             _while192_exit:
7530   340E             ; puts("Torpedo Missed\n"); 
7531   340E             ; --- START FUNCTION CALL
7532   340E 26 DE 73      mov b, _s105 ; "Torpedo Missed\n"
7533   3411 FD AB         swp b
7534   3413 D8            push b
7535   3414 07 19 64      call puts
7536   3417 51 02 00      add sp, 2
7537   341A             ; --- END FUNCTION CALL
7538   341A             ; klingons_shoot(); 
7539   341A             ; --- START FUNCTION CALL
7540   341A 07 6F 4C      call klingons_shoot
7541   341D F9            leave
7542   341E 09            ret
7543   341F             
7544   341F             torpedo_hit:
7545   341F F8 00 00      enter 0 ; (push bp; mov bp, sp)
7546   3422             ; int i; 
7547   3422 52 02 00      sub sp, 2
7548   3425             ; struct klingon *k; 
7549   3425 52 02 00      sub sp, 2
7550   3428             ; switch(quad[yp+-1][xp+-1]) { 
7551   3428             _switch194_expr:
7552   3428 3B AF 68      mov d, _quad_data ; $quad
7553   342B D7            push a
7554   342C DA            push d
7555   342D FA 05 00      lea d, [bp + 5] ; $yp
7556   3430 32            mov bl, [d]
7557   3431 A7 00         mov bh, 0
7558   3433 38 00 00      mov c, 0
7559   3436             ; --- START TERMS
7560   3436 D7            push a
7561   3437 11            mov a, b
7562   3438 FD 2E FF FF   mov32 cb, $ffffffff
7562   343C FF FF 
7563   343E 56            add b, a
7564   343F E4            pop a
7565   3440             ; --- END TERMS
7566   3440 E7            pop d
7567   3441 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
7568   3445 DA            push d
7569   3446 FA 06 00      lea d, [bp + 6] ; $xp
7570   3449 32            mov bl, [d]
7571   344A A7 00         mov bh, 0
7572   344C 38 00 00      mov c, 0
7573   344F             ; --- START TERMS
7574   344F D7            push a
7575   3450 11            mov a, b
7576   3451 FD 2E FF FF   mov32 cb, $ffffffff
7576   3455 FF FF 
7577   3457 56            add b, a
7578   3458 E4            pop a
7579   3459             ; --- END TERMS
7580   3459 E7            pop d
7581   345A 5A            add d, b
7582   345B E4            pop a
7583   345C 32            mov bl, [d]
7584   345D A7 00         mov bh, 0
7585   345F 38 00 00      mov c, 0
7586   3462             _switch194_comparisons:
7587   3462 C0 01 00      cmp b, 1
7588   3465 C6 77 34      je _switch194_case0
7589   3468 C0 03 00      cmp b, 3
7590   346B C6 9D 34      je _switch194_case1
7591   346E C0 02 00      cmp b, 2
7592   3471 C6 F5 35      je _switch194_case2
7593   3474 0A 1D 37      jmp _switch194_exit
7594   3477             _switch194_case0:
7595   3477             ; printf("Star at %d, %d absorbed torpedo energy.\n\n", yp, xp); 
7596   3477             ; --- START FUNCTION CALL
7597   3477 FA 06 00      lea d, [bp + 6] ; $xp
7598   347A 32            mov bl, [d]
7599   347B A7 00         mov bh, 0
7600   347D 38 00 00      mov c, 0
7601   3480 FD AA         swp a
7602   3482 D8            push b
7603   3483 FA 05 00      lea d, [bp + 5] ; $yp
7604   3486 32            mov bl, [d]
7605   3487 A7 00         mov bh, 0
7606   3489 38 00 00      mov c, 0
7607   348C FD AA         swp a
7608   348E D8            push b
7609   348F 26 EE 73      mov b, _s106 ; "Star at %d, %d absorbed torpedo energy.\n\n"
7610   3492 FD AB         swp b
7611   3494 D8            push b
7612   3495 07 2C 5B      call printf
7613   3498 51 04 00      add sp, 4
7614   349B             ; --- END FUNCTION CALL
7615   349B             ; return; 
7616   349B F9            leave
7617   349C 09            ret
7618   349D             _switch194_case1:
7619   349D             ; puts("*** Klingon Destroyed ***\n"); 
7620   349D             ; --- START FUNCTION CALL
7621   349D 26 52 73      mov b, _s99 ; "*** Klingon Destroyed ***\n"
7622   34A0 FD AB         swp b
7623   34A2 D8            push b
7624   34A3 07 19 64      call puts
7625   34A6 51 02 00      add sp, 2
7626   34A9             ; --- END FUNCTION CALL
7627   34A9             ; klingons--; 
7628   34A9 3B 85 68      mov d, _klingons ; $klingons
7629   34AC 32            mov bl, [d]
7630   34AD A7 00         mov bh, 0
7631   34AF 38 00 00      mov c, 0
7632   34B2 FD 7D         dec b
7633   34B4 3B 85 68      mov d, _klingons ; $klingons
7634   34B7 FD 3E         mov [d], bl
7635   34B9 FD 77         inc b
7636   34BB             ; klingons_left--; 
7637   34BB 3B 87 68      mov d, _klingons_left ; $klingons_left
7638   34BE 32            mov bl, [d]
7639   34BF A7 00         mov bh, 0
7640   34C1 38 00 00      mov c, 0
7641   34C4 FD 7D         dec b
7642   34C6 3B 87 68      mov d, _klingons_left ; $klingons_left
7643   34C9 FD 3E         mov [d], bl
7644   34CB FD 77         inc b
7645   34CD             ; if (klingons_left <= 0) 
7646   34CD             _if195_cond:
7647   34CD 3B 87 68      mov d, _klingons_left ; $klingons_left
7648   34D0 32            mov bl, [d]
7649   34D1 A7 00         mov bh, 0
7650   34D3 38 00 00      mov c, 0
7651   34D6             ; --- START RELATIONAL
7652   34D6 D7            push a
7653   34D7 11            mov a, b
7654   34D8 FD 2E 00 00   mov32 cb, $00000000
7654   34DC 00 00 
7655   34DE B0            cmp a, b
7656   34DF FD 76         sleu ; <= (unsigned)
7657   34E1 E4            pop a
7658   34E2             ; --- END RELATIONAL
7659   34E2 C0 00 00      cmp b, 0
7660   34E5 C6 EE 34      je _if195_exit
7661   34E8             _if195_TRUE:
7662   34E8             ; won_game(); 
7663   34E8             ; --- START FUNCTION CALL
7664   34E8 07 9A 4A      call won_game
7665   34EB 0A EE 34      jmp _if195_exit
7666   34EE             _if195_exit:
7667   34EE             ; k = kdata; 
7668   34EE FA FD FF      lea d, [bp + -3] ; $k
7669   34F1 DA            push d
7670   34F2 3B 79 68      mov d, _kdata_data ; $kdata
7671   34F5 2D            mov b, d
7672   34F6 38 00 00      mov c, 0
7673   34F9 E7            pop d
7674   34FA FD 43         mov [d], b
7675   34FC             ; for (i = 0; i <= 2; i++) { 
7676   34FC             _for196_init:
7677   34FC FA FF FF      lea d, [bp + -1] ; $i
7678   34FF DA            push d
7679   3500 FD 2E 00 00   mov32 cb, $00000000
7679   3504 00 00 
7680   3506 E7            pop d
7681   3507 FD 43         mov [d], b
7682   3509             _for196_cond:
7683   3509 FA FF FF      lea d, [bp + -1] ; $i
7684   350C 2A            mov b, [d]
7685   350D 38 00 00      mov c, 0
7686   3510             ; --- START RELATIONAL
7687   3510 D7            push a
7688   3511 11            mov a, b
7689   3512 FD 2E 02 00   mov32 cb, $00000002
7689   3516 00 00 
7690   3518 B0            cmp a, b
7691   3519 FD 74         sle ; <= (signed)
7692   351B E4            pop a
7693   351C             ; --- END RELATIONAL
7694   351C C0 00 00      cmp b, 0
7695   351F C6 A1 35      je _for196_exit
7696   3522             _for196_block:
7697   3522             ; if (yp == k->y && xp == k->x) 
7698   3522             _if197_cond:
7699   3522 FA 05 00      lea d, [bp + 5] ; $yp
7700   3525 32            mov bl, [d]
7701   3526 A7 00         mov bh, 0
7702   3528 38 00 00      mov c, 0
7703   352B             ; --- START RELATIONAL
7704   352B D7            push a
7705   352C 11            mov a, b
7706   352D FA FD FF      lea d, [bp + -3] ; $k
7707   3530 FD 2A         mov d, [d]
7708   3532 58 00 00      add d, 0
7709   3535 32            mov bl, [d]
7710   3536 A7 00         mov bh, 0
7711   3538 38 00 00      mov c, 0
7712   353B B0            cmp a, b
7713   353C FD 71         seq ; ==
7714   353E E4            pop a
7715   353F             ; --- END RELATIONAL
7716   353F             ; --- START LOGICAL AND
7717   353F D7            push a
7718   3540 11            mov a, b
7719   3541 FA 06 00      lea d, [bp + 6] ; $xp
7720   3544 32            mov bl, [d]
7721   3545 A7 00         mov bh, 0
7722   3547 38 00 00      mov c, 0
7723   354A             ; --- START RELATIONAL
7724   354A D7            push a
7725   354B 11            mov a, b
7726   354C FA FD FF      lea d, [bp + -3] ; $k
7727   354F FD 2A         mov d, [d]
7728   3551 58 01 00      add d, 1
7729   3554 32            mov bl, [d]
7730   3555 A7 00         mov bh, 0
7731   3557 38 00 00      mov c, 0
7732   355A B0            cmp a, b
7733   355B FD 71         seq ; ==
7734   355D E4            pop a
7735   355E             ; --- END RELATIONAL
7736   355E FD A7         sand a, b
7737   3560 E4            pop a
7738   3561             ; --- END LOGICAL AND
7739   3561 C0 00 00      cmp b, 0
7740   3564 C6 7C 35      je _if197_exit
7741   3567             _if197_TRUE:
7742   3567             ; k->energy = 0; 
7743   3567 FA FD FF      lea d, [bp + -3] ; $k
7744   356A FD 2A         mov d, [d]
7745   356C 58 02 00      add d, 2
7746   356F DA            push d
7747   3570 FD 2E 00 00   mov32 cb, $00000000
7747   3574 00 00 
7748   3576 E7            pop d
7749   3577 FD 43         mov [d], b
7750   3579 0A 7C 35      jmp _if197_exit
7751   357C             _if197_exit:
7752   357C             ; k++; 
7753   357C FA FD FF      lea d, [bp + -3] ; $k
7754   357F 2A            mov b, [d]
7755   3580 38 00 00      mov c, 0
7756   3583 11            mov a, b
7757   3584 FD 77         inc b
7758   3586 FD 77         inc b
7759   3588 FA FD FF      lea d, [bp + -3] ; $k
7760   358B FD 43         mov [d], b
7761   358D 27            mov b, a
7762   358E             _for196_update:
7763   358E FA FF FF      lea d, [bp + -1] ; $i
7764   3591 2A            mov b, [d]
7765   3592 38 00 00      mov c, 0
7766   3595 11            mov a, b
7767   3596 FD 77         inc b
7768   3598 FA FF FF      lea d, [bp + -1] ; $i
7769   359B FD 43         mov [d], b
7770   359D 27            mov b, a
7771   359E 0A 09 35      jmp _for196_cond
7772   35A1             _for196_exit:
7773   35A1             ; map[quad_y][quad_x] =map[quad_y][quad_x] - 0x100; 
7774   35A1 3B D7 67      mov d, _map_data ; $map
7775   35A4 D7            push a
7776   35A5 DA            push d
7777   35A6 3B 8A 68      mov d, _quad_y ; $quad_y
7778   35A9 2A            mov b, [d]
7779   35AA 38 00 00      mov c, 0
7780   35AD E7            pop d
7781   35AE FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
7782   35B2 DA            push d
7783   35B3 3B 8C 68      mov d, _quad_x ; $quad_x
7784   35B6 2A            mov b, [d]
7785   35B7 38 00 00      mov c, 0
7786   35BA E7            pop d
7787   35BB FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
7788   35BF E4            pop a
7789   35C0 DA            push d
7790   35C1 3B D7 67      mov d, _map_data ; $map
7791   35C4 D7            push a
7792   35C5 DA            push d
7793   35C6 3B 8A 68      mov d, _quad_y ; $quad_y
7794   35C9 2A            mov b, [d]
7795   35CA 38 00 00      mov c, 0
7796   35CD E7            pop d
7797   35CE FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
7798   35D2 DA            push d
7799   35D3 3B 8C 68      mov d, _quad_x ; $quad_x
7800   35D6 2A            mov b, [d]
7801   35D7 38 00 00      mov c, 0
7802   35DA E7            pop d
7803   35DB FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
7804   35DF E4            pop a
7805   35E0 2A            mov b, [d]
7806   35E1 38 00 00      mov c, 0
7807   35E4             ; --- START TERMS
7808   35E4 D7            push a
7809   35E5 11            mov a, b
7810   35E6 FD 2E 00 01   mov32 cb, $00000100
7810   35EA 00 00 
7811   35EC 60            sub a, b
7812   35ED 27            mov b, a
7813   35EE E4            pop a
7814   35EF             ; --- END TERMS
7815   35EF E7            pop d
7816   35F0 FD 43         mov [d], b
7817   35F2             ; break; 
7818   35F2 0A 1D 37      jmp _switch194_exit ; case break
7819   35F5             _switch194_case2:
7820   35F5             ; puts("*** Starbase Destroyed ***"); 
7821   35F5             ; --- START FUNCTION CALL
7822   35F5 26 18 74      mov b, _s107 ; "*** Starbase Destroyed ***"
7823   35F8 FD AB         swp b
7824   35FA D8            push b
7825   35FB 07 19 64      call puts
7826   35FE 51 02 00      add sp, 2
7827   3601             ; --- END FUNCTION CALL
7828   3601             ; starbases--; 
7829   3601 3B AE 67      mov d, _starbases ; $starbases
7830   3604 32            mov bl, [d]
7831   3605 A7 00         mov bh, 0
7832   3607 38 00 00      mov c, 0
7833   360A FD 7D         dec b
7834   360C 3B AE 67      mov d, _starbases ; $starbases
7835   360F FD 3E         mov [d], bl
7836   3611 FD 77         inc b
7837   3613             ; starbases_left--; 
7838   3613 3B B1 67      mov d, _starbases_left ; $starbases_left
7839   3616 32            mov bl, [d]
7840   3617 A7 00         mov bh, 0
7841   3619 38 00 00      mov c, 0
7842   361C FD 7D         dec b
7843   361E 3B B1 67      mov d, _starbases_left ; $starbases_left
7844   3621 FD 3E         mov [d], bl
7845   3623 FD 77         inc b
7846   3625             ; if (starbases_left <= 0 && klingons_left <= FROM_FIXED(stardate) - time_start - time_up) { 
7847   3625             _if198_cond:
7848   3625 3B B1 67      mov d, _starbases_left ; $starbases_left
7849   3628 32            mov bl, [d]
7850   3629 A7 00         mov bh, 0
7851   362B 38 00 00      mov c, 0
7852   362E             ; --- START RELATIONAL
7853   362E D7            push a
7854   362F 11            mov a, b
7855   3630 FD 2E 00 00   mov32 cb, $00000000
7855   3634 00 00 
7856   3636 B0            cmp a, b
7857   3637 FD 74         sle ; <= (signed)
7858   3639 E4            pop a
7859   363A             ; --- END RELATIONAL
7860   363A             ; --- START LOGICAL AND
7861   363A D7            push a
7862   363B 11            mov a, b
7863   363C 3B 87 68      mov d, _klingons_left ; $klingons_left
7864   363F 32            mov bl, [d]
7865   3640 A7 00         mov bh, 0
7866   3642 38 00 00      mov c, 0
7867   3645             ; --- START RELATIONAL
7868   3645 D7            push a
7869   3646 11            mov a, b
7870   3647             ; --- START FUNCTION CALL
7871   3647 3B AD 68      mov d, _stardate ; $stardate
7872   364A 2A            mov b, [d]
7873   364B 38 00 00      mov c, 0
7874   364E FD AB         swp b
7875   3650 D8            push b
7876   3651 07 35 04      call FROM_FIXED
7877   3654 51 02 00      add sp, 2
7878   3657             ; --- END FUNCTION CALL
7879   3657             ; --- START TERMS
7880   3657 D7            push a
7881   3658 11            mov a, b
7882   3659 3B 91 68      mov d, _time_start ; $time_start
7883   365C 2A            mov b, [d]
7884   365D 38 00 00      mov c, 0
7885   3660 60            sub a, b
7886   3661 27            mov b, a
7887   3662 11            mov a, b
7888   3663 3B 93 68      mov d, _time_up ; $time_up
7889   3666 2A            mov b, [d]
7890   3667 38 00 00      mov c, 0
7891   366A 60            sub a, b
7892   366B 27            mov b, a
7893   366C E4            pop a
7894   366D             ; --- END TERMS
7895   366D B0            cmp a, b
7896   366E FD 76         sleu ; <= (unsigned)
7897   3670 E4            pop a
7898   3671             ; --- END RELATIONAL
7899   3671 FD A7         sand a, b
7900   3673 E4            pop a
7901   3674             ; --- END LOGICAL AND
7902   3674 C0 00 00      cmp b, 0
7903   3677 C6 B0 36      je _if198_exit
7904   367A             _if198_TRUE:
7905   367A             ; puts("That does it, Captain!!"); 
7906   367A             ; --- START FUNCTION CALL
7907   367A 26 33 74      mov b, _s108 ; "That does it, Captain!!"
7908   367D FD AB         swp b
7909   367F D8            push b
7910   3680 07 19 64      call puts
7911   3683 51 02 00      add sp, 2
7912   3686             ; --- END FUNCTION CALL
7913   3686             ; puts("You are hereby relieved of command\n"); 
7914   3686             ; --- START FUNCTION CALL
7915   3686 26 4B 74      mov b, _s109 ; "You are hereby relieved of command\n"
7916   3689 FD AB         swp b
7917   368B D8            push b
7918   368C 07 19 64      call puts
7919   368F 51 02 00      add sp, 2
7920   3692             ; --- END FUNCTION CALL
7921   3692             ; puts("and sentenced to 99 stardates of hard"); 
7922   3692             ; --- START FUNCTION CALL
7923   3692 26 6F 74      mov b, _s110 ; "and sentenced to 99 stardates of hard"
7924   3695 FD AB         swp b
7925   3697 D8            push b
7926   3698 07 19 64      call puts
7927   369B 51 02 00      add sp, 2
7928   369E             ; --- END FUNCTION CALL
7929   369E             ; puts("labor on Cygnus 12!!\n"); 
7930   369E             ; --- START FUNCTION CALL
7931   369E 26 95 74      mov b, _s111 ; "labor on Cygnus 12!!\n"
7932   36A1 FD AB         swp b
7933   36A3 D8            push b
7934   36A4 07 19 64      call puts
7935   36A7 51 02 00      add sp, 2
7936   36AA             ; --- END FUNCTION CALL
7937   36AA             ; resign_commision(); 
7938   36AA             ; --- START FUNCTION CALL
7939   36AA 07 7A 4A      call resign_commision
7940   36AD 0A B0 36      jmp _if198_exit
7941   36B0             _if198_exit:
7942   36B0             ; puts("Starfleet Command reviewing your record to consider\n court martial!\n"); 
7943   36B0             ; --- START FUNCTION CALL
7944   36B0 26 AB 74      mov b, _s112 ; "Starfleet Command reviewing your record to consider\n court martial!\n"
7945   36B3 FD AB         swp b
7946   36B5 D8            push b
7947   36B6 07 19 64      call puts
7948   36B9 51 02 00      add sp, 2
7949   36BC             ; --- END FUNCTION CALL
7950   36BC             ; docked = 0;		/* Undock */ 
7951   36BC 3B D2 67      mov d, _docked ; $docked
7952   36BF DA            push d
7953   36C0 FD 2E 00 00   mov32 cb, $00000000
7953   36C4 00 00 
7954   36C6 E7            pop d
7955   36C7 FD 3E         mov [d], bl
7956   36C9             ; map[quad_y][quad_x] =map[quad_y][quad_x] - 0x10; 
7957   36C9 3B D7 67      mov d, _map_data ; $map
7958   36CC D7            push a
7959   36CD DA            push d
7960   36CE 3B 8A 68      mov d, _quad_y ; $quad_y
7961   36D1 2A            mov b, [d]
7962   36D2 38 00 00      mov c, 0
7963   36D5 E7            pop d
7964   36D6 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
7965   36DA DA            push d
7966   36DB 3B 8C 68      mov d, _quad_x ; $quad_x
7967   36DE 2A            mov b, [d]
7968   36DF 38 00 00      mov c, 0
7969   36E2 E7            pop d
7970   36E3 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
7971   36E7 E4            pop a
7972   36E8 DA            push d
7973   36E9 3B D7 67      mov d, _map_data ; $map
7974   36EC D7            push a
7975   36ED DA            push d
7976   36EE 3B 8A 68      mov d, _quad_y ; $quad_y
7977   36F1 2A            mov b, [d]
7978   36F2 38 00 00      mov c, 0
7979   36F5 E7            pop d
7980   36F6 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
7981   36FA DA            push d
7982   36FB 3B 8C 68      mov d, _quad_x ; $quad_x
7983   36FE 2A            mov b, [d]
7984   36FF 38 00 00      mov c, 0
7985   3702 E7            pop d
7986   3703 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
7987   3707 E4            pop a
7988   3708 2A            mov b, [d]
7989   3709 38 00 00      mov c, 0
7990   370C             ; --- START TERMS
7991   370C D7            push a
7992   370D 11            mov a, b
7993   370E FD 2E 10 00   mov32 cb, $00000010
7993   3712 00 00 
7994   3714 60            sub a, b
7995   3715 27            mov b, a
7996   3716 E4            pop a
7997   3717             ; --- END TERMS
7998   3717 E7            pop d
7999   3718 FD 43         mov [d], b
8000   371A             ; break; 
8001   371A 0A 1D 37      jmp _switch194_exit ; case break
8002   371D             _switch194_exit:
8003   371D             ; quad[yp+-1][xp+-1] = 		0       ; 
8004   371D 3B AF 68      mov d, _quad_data ; $quad
8005   3720 D7            push a
8006   3721 DA            push d
8007   3722 FA 05 00      lea d, [bp + 5] ; $yp
8008   3725 32            mov bl, [d]
8009   3726 A7 00         mov bh, 0
8010   3728 38 00 00      mov c, 0
8011   372B             ; --- START TERMS
8012   372B D7            push a
8013   372C 11            mov a, b
8014   372D FD 2E FF FF   mov32 cb, $ffffffff
8014   3731 FF FF 
8015   3733 56            add b, a
8016   3734 E4            pop a
8017   3735             ; --- END TERMS
8018   3735 E7            pop d
8019   3736 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
8020   373A DA            push d
8021   373B FA 06 00      lea d, [bp + 6] ; $xp
8022   373E 32            mov bl, [d]
8023   373F A7 00         mov bh, 0
8024   3741 38 00 00      mov c, 0
8025   3744             ; --- START TERMS
8026   3744 D7            push a
8027   3745 11            mov a, b
8028   3746 FD 2E FF FF   mov32 cb, $ffffffff
8028   374A FF FF 
8029   374C 56            add b, a
8030   374D E4            pop a
8031   374E             ; --- END TERMS
8032   374E E7            pop d
8033   374F 5A            add d, b
8034   3750 E4            pop a
8035   3751 DA            push d
8036   3752 FD 2E 00 00   mov32 cb, $00000000
8036   3756 00 00 
8037   3758 E7            pop d
8038   3759 FD 3E         mov [d], bl
8039   375B F9            leave
8040   375C 09            ret
8041   375D             
8042   375D             damage_control:
8043   375D F8 00 00      enter 0 ; (push bp; mov bp, sp)
8044   3760             ; int        repair_cost = 0; 
8045   3760 52 02 00      sub sp, 2
8046   3763             ; --- START LOCAL VAR INITIALIZATION
8047   3763 FA FF FF      lea d, [bp + -1] ; $repair_cost
8048   3766 DA            push d
8049   3767 FD 2E 00 00   mov32 cb, $00000000
8049   376B 00 00 
8050   376D E7            pop d
8051   376E FD 43         mov [d], b
8052   3770             ; --- END LOCAL VAR INITIALIZATION
8053   3770             ; int i; 
8054   3770 52 02 00      sub sp, 2
8055   3773             ; if (damage[6] < 0) 
8056   3773             _if199_cond:
8057   3773 3B 95 68      mov d, _damage_data ; $damage
8058   3776 D7            push a
8059   3777 DA            push d
8060   3778 FD 2E 06 00   mov32 cb, $00000006
8060   377C 00 00 
8061   377E E7            pop d
8062   377F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8063   3783 E4            pop a
8064   3784 2A            mov b, [d]
8065   3785 38 00 00      mov c, 0
8066   3788             ; --- START RELATIONAL
8067   3788 D7            push a
8068   3789 11            mov a, b
8069   378A FD 2E 00 00   mov32 cb, $00000000
8069   378E 00 00 
8070   3790 B0            cmp a, b
8071   3791 FD 73         slt ; < (signed)
8072   3793 E4            pop a
8073   3794             ; --- END RELATIONAL
8074   3794 C0 00 00      cmp b, 0
8075   3797 C6 A9 37      je _if199_exit
8076   379A             _if199_TRUE:
8077   379A             ; puts("Damage Control report not available."); 
8078   379A             ; --- START FUNCTION CALL
8079   379A 26 F0 74      mov b, _s113 ; "Damage Control report not available."
8080   379D FD AB         swp b
8081   379F D8            push b
8082   37A0 07 19 64      call puts
8083   37A3 51 02 00      add sp, 2
8084   37A6             ; --- END FUNCTION CALL
8085   37A6 0A A9 37      jmp _if199_exit
8086   37A9             _if199_exit:
8087   37A9             ; if (docked) { 
8088   37A9             _if200_cond:
8089   37A9 3B D2 67      mov d, _docked ; $docked
8090   37AC 32            mov bl, [d]
8091   37AD A7 00         mov bh, 0
8092   37AF 38 00 00      mov c, 0
8093   37B2 C0 00 00      cmp b, 0
8094   37B5 C6 81 39      je _if200_exit
8095   37B8             _if200_TRUE:
8096   37B8             ; repair_cost = 0; 
8097   37B8 FA FF FF      lea d, [bp + -1] ; $repair_cost
8098   37BB DA            push d
8099   37BC FD 2E 00 00   mov32 cb, $00000000
8099   37C0 00 00 
8100   37C2 E7            pop d
8101   37C3 FD 43         mov [d], b
8102   37C5             ; for (i = 1; i <= 8; i++) 
8103   37C5             _for201_init:
8104   37C5 FA FD FF      lea d, [bp + -3] ; $i
8105   37C8 DA            push d
8106   37C9 FD 2E 01 00   mov32 cb, $00000001
8106   37CD 00 00 
8107   37CF E7            pop d
8108   37D0 FD 43         mov [d], b
8109   37D2             _for201_cond:
8110   37D2 FA FD FF      lea d, [bp + -3] ; $i
8111   37D5 2A            mov b, [d]
8112   37D6 38 00 00      mov c, 0
8113   37D9             ; --- START RELATIONAL
8114   37D9 D7            push a
8115   37DA 11            mov a, b
8116   37DB FD 2E 08 00   mov32 cb, $00000008
8116   37DF 00 00 
8117   37E1 B0            cmp a, b
8118   37E2 FD 74         sle ; <= (signed)
8119   37E4 E4            pop a
8120   37E5             ; --- END RELATIONAL
8121   37E5 C0 00 00      cmp b, 0
8122   37E8 C6 41 38      je _for201_exit
8123   37EB             _for201_block:
8124   37EB             ; if (damage[i] < 0) 
8125   37EB             _if202_cond:
8126   37EB 3B 95 68      mov d, _damage_data ; $damage
8127   37EE D7            push a
8128   37EF DA            push d
8129   37F0 FA FD FF      lea d, [bp + -3] ; $i
8130   37F3 2A            mov b, [d]
8131   37F4 38 00 00      mov c, 0
8132   37F7 E7            pop d
8133   37F8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8134   37FC E4            pop a
8135   37FD 2A            mov b, [d]
8136   37FE 38 00 00      mov c, 0
8137   3801             ; --- START RELATIONAL
8138   3801 D7            push a
8139   3802 11            mov a, b
8140   3803 FD 2E 00 00   mov32 cb, $00000000
8140   3807 00 00 
8141   3809 B0            cmp a, b
8142   380A FD 73         slt ; < (signed)
8143   380C E4            pop a
8144   380D             ; --- END RELATIONAL
8145   380D C0 00 00      cmp b, 0
8146   3810 C6 2E 38      je _if202_exit
8147   3813             _if202_TRUE:
8148   3813             ; repair_cost = repair_cost + 10; 
8149   3813 FA FF FF      lea d, [bp + -1] ; $repair_cost
8150   3816 DA            push d
8151   3817 FA FF FF      lea d, [bp + -1] ; $repair_cost
8152   381A 2A            mov b, [d]
8153   381B 38 00 00      mov c, 0
8154   381E             ; --- START TERMS
8155   381E D7            push a
8156   381F 11            mov a, b
8157   3820 FD 2E 0A 00   mov32 cb, $0000000a
8157   3824 00 00 
8158   3826 56            add b, a
8159   3827 E4            pop a
8160   3828             ; --- END TERMS
8161   3828 E7            pop d
8162   3829 FD 43         mov [d], b
8163   382B 0A 2E 38      jmp _if202_exit
8164   382E             _if202_exit:
8165   382E             _for201_update:
8166   382E FA FD FF      lea d, [bp + -3] ; $i
8167   3831 2A            mov b, [d]
8168   3832 38 00 00      mov c, 0
8169   3835 11            mov a, b
8170   3836 FD 77         inc b
8171   3838 FA FD FF      lea d, [bp + -3] ; $i
8172   383B FD 43         mov [d], b
8173   383D 27            mov b, a
8174   383E 0A D2 37      jmp _for201_cond
8175   3841             _for201_exit:
8176   3841             ; if (repair_cost) { 
8177   3841             _if203_cond:
8178   3841 FA FF FF      lea d, [bp + -1] ; $repair_cost
8179   3844 2A            mov b, [d]
8180   3845 38 00 00      mov c, 0
8181   3848 C0 00 00      cmp b, 0
8182   384B C6 7E 39      je _if203_exit
8183   384E             _if203_TRUE:
8184   384E             ; repair_cost = repair_cost + d4; 
8185   384E FA FF FF      lea d, [bp + -1] ; $repair_cost
8186   3851 DA            push d
8187   3852 FA FF FF      lea d, [bp + -1] ; $repair_cost
8188   3855 2A            mov b, [d]
8189   3856 38 00 00      mov c, 0
8190   3859             ; --- START TERMS
8191   3859 D7            push a
8192   385A 11            mov a, b
8193   385B 3B A7 68      mov d, _d4 ; $d4
8194   385E 2A            mov b, [d]
8195   385F 38 00 00      mov c, 0
8196   3862 56            add b, a
8197   3863 E4            pop a
8198   3864             ; --- END TERMS
8199   3864 E7            pop d
8200   3865 FD 43         mov [d], b
8201   3867             ; if (repair_cost >= 100) 
8202   3867             _if204_cond:
8203   3867 FA FF FF      lea d, [bp + -1] ; $repair_cost
8204   386A 2A            mov b, [d]
8205   386B 38 00 00      mov c, 0
8206   386E             ; --- START RELATIONAL
8207   386E D7            push a
8208   386F 11            mov a, b
8209   3870 FD 2E 64 00   mov32 cb, $00000064
8209   3874 00 00 
8210   3876 B0            cmp a, b
8211   3877 FD 80         sge ; >=
8212   3879 E4            pop a
8213   387A             ; --- END RELATIONAL
8214   387A C0 00 00      cmp b, 0
8215   387D C6 90 38      je _if204_exit
8216   3880             _if204_TRUE:
8217   3880             ; repair_cost = 90;	/* 0.9 */ 
8218   3880 FA FF FF      lea d, [bp + -1] ; $repair_cost
8219   3883 DA            push d
8220   3884 FD 2E 5A 00   mov32 cb, $0000005a
8220   3888 00 00 
8221   388A E7            pop d
8222   388B FD 43         mov [d], b
8223   388D 0A 90 38      jmp _if204_exit
8224   3890             _if204_exit:
8225   3890             ; printf("\nTechnicians standing by to effect repairs to your ship;\nEstimated time to repair: %s stardates.\n Will you authorize the repair order (y/N)? ", print100(repair_cost)); 
8226   3890             ; --- START FUNCTION CALL
8227   3890             ; --- START FUNCTION CALL
8228   3890 FA FF FF      lea d, [bp + -1] ; $repair_cost
8229   3893 2A            mov b, [d]
8230   3894 38 00 00      mov c, 0
8231   3897 FD AB         swp b
8232   3899 D8            push b
8233   389A 07 2E 08      call print100
8234   389D 51 02 00      add sp, 2
8235   38A0             ; --- END FUNCTION CALL
8236   38A0 FD AB         swp b
8237   38A2 D8            push b
8238   38A3 26 15 75      mov b, _s114 ; "\nTechnicians standing by to effect repairs to your ship;\nEstimated time to repair: %s stardates.\n Will you authorize the repair order (y/N)? "
8239   38A6 FD AB         swp b
8240   38A8 D8            push b
8241   38A9 07 2C 5B      call printf
8242   38AC 51 04 00      add sp, 4
8243   38AF             ; --- END FUNCTION CALL
8244   38AF             ; if (yesno()) { 
8245   38AF             _if205_cond:
8246   38AF             ; --- START FUNCTION CALL
8247   38AF 07 B3 05      call yesno
8248   38B2 C0 00 00      cmp b, 0
8249   38B5 C6 79 39      je _if205_exit
8250   38B8             _if205_TRUE:
8251   38B8             ; for (i = 1; i <= 8; i++) 
8252   38B8             _for206_init:
8253   38B8 FA FD FF      lea d, [bp + -3] ; $i
8254   38BB DA            push d
8255   38BC FD 2E 01 00   mov32 cb, $00000001
8255   38C0 00 00 
8256   38C2 E7            pop d
8257   38C3 FD 43         mov [d], b
8258   38C5             _for206_cond:
8259   38C5 FA FD FF      lea d, [bp + -3] ; $i
8260   38C8 2A            mov b, [d]
8261   38C9 38 00 00      mov c, 0
8262   38CC             ; --- START RELATIONAL
8263   38CC D7            push a
8264   38CD 11            mov a, b
8265   38CE FD 2E 08 00   mov32 cb, $00000008
8265   38D2 00 00 
8266   38D4 B0            cmp a, b
8267   38D5 FD 74         sle ; <= (signed)
8268   38D7 E4            pop a
8269   38D8             ; --- END RELATIONAL
8270   38D8 C0 00 00      cmp b, 0
8271   38DB C6 38 39      je _for206_exit
8272   38DE             _for206_block:
8273   38DE             ; if (damage[i] < 0) 
8274   38DE             _if207_cond:
8275   38DE 3B 95 68      mov d, _damage_data ; $damage
8276   38E1 D7            push a
8277   38E2 DA            push d
8278   38E3 FA FD FF      lea d, [bp + -3] ; $i
8279   38E6 2A            mov b, [d]
8280   38E7 38 00 00      mov c, 0
8281   38EA E7            pop d
8282   38EB FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8283   38EF E4            pop a
8284   38F0 2A            mov b, [d]
8285   38F1 38 00 00      mov c, 0
8286   38F4             ; --- START RELATIONAL
8287   38F4 D7            push a
8288   38F5 11            mov a, b
8289   38F6 FD 2E 00 00   mov32 cb, $00000000
8289   38FA 00 00 
8290   38FC B0            cmp a, b
8291   38FD FD 73         slt ; < (signed)
8292   38FF E4            pop a
8293   3900             ; --- END RELATIONAL
8294   3900 C0 00 00      cmp b, 0
8295   3903 C6 25 39      je _if207_exit
8296   3906             _if207_TRUE:
8297   3906             ; damage[i] = 0; 
8298   3906 3B 95 68      mov d, _damage_data ; $damage
8299   3909 D7            push a
8300   390A DA            push d
8301   390B FA FD FF      lea d, [bp + -3] ; $i
8302   390E 2A            mov b, [d]
8303   390F 38 00 00      mov c, 0
8304   3912 E7            pop d
8305   3913 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8306   3917 E4            pop a
8307   3918 DA            push d
8308   3919 FD 2E 00 00   mov32 cb, $00000000
8308   391D 00 00 
8309   391F E7            pop d
8310   3920 FD 43         mov [d], b
8311   3922 0A 25 39      jmp _if207_exit
8312   3925             _if207_exit:
8313   3925             _for206_update:
8314   3925 FA FD FF      lea d, [bp + -3] ; $i
8315   3928 2A            mov b, [d]
8316   3929 38 00 00      mov c, 0
8317   392C 11            mov a, b
8318   392D FD 77         inc b
8319   392F FA FD FF      lea d, [bp + -3] ; $i
8320   3932 FD 43         mov [d], b
8321   3934 27            mov b, a
8322   3935 0A C5 38      jmp _for206_cond
8323   3938             _for206_exit:
8324   3938             ; stardate = stardate + (repair_cost + 5)/10 + 1; 
8325   3938 3B AD 68      mov d, _stardate ; $stardate
8326   393B DA            push d
8327   393C 3B AD 68      mov d, _stardate ; $stardate
8328   393F 2A            mov b, [d]
8329   3940 38 00 00      mov c, 0
8330   3943             ; --- START TERMS
8331   3943 D7            push a
8332   3944 11            mov a, b
8333   3945 FA FF FF      lea d, [bp + -1] ; $repair_cost
8334   3948 2A            mov b, [d]
8335   3949 38 00 00      mov c, 0
8336   394C             ; --- START TERMS
8337   394C D7            push a
8338   394D 11            mov a, b
8339   394E FD 2E 05 00   mov32 cb, $00000005
8339   3952 00 00 
8340   3954 56            add b, a
8341   3955 E4            pop a
8342   3956             ; --- END TERMS
8343   3956             ; --- START FACTORS
8344   3956 D7            push a
8345   3957 FD D8         push g
8346   3959 11            mov a, b
8347   395A FD 7A         mov g, c
8348   395C FD 2E 0A 00   mov32 cb, $0000000a
8348   3960 00 00 
8349   3962 AE            div a, b
8350   3963 FD 38         mov c, g
8351   3965 27            mov b, a
8352   3966 FD F1         pop g
8353   3968 E4            pop a
8354   3969             ; --- END FACTORS
8355   3969 56            add b, a
8356   396A 11            mov a, b
8357   396B FD 2E 01 00   mov32 cb, $00000001
8357   396F 00 00 
8358   3971 56            add b, a
8359   3972 E4            pop a
8360   3973             ; --- END TERMS
8361   3973 E7            pop d
8362   3974 FD 43         mov [d], b
8363   3976 0A 79 39      jmp _if205_exit
8364   3979             _if205_exit:
8365   3979             ; return; 
8366   3979 F9            leave
8367   397A 09            ret
8368   397B 0A 7E 39      jmp _if203_exit
8369   397E             _if203_exit:
8370   397E 0A 81 39      jmp _if200_exit
8371   3981             _if200_exit:
8372   3981             ; if (damage[6] < 0) 
8373   3981             _if210_cond:
8374   3981 3B 95 68      mov d, _damage_data ; $damage
8375   3984 D7            push a
8376   3985 DA            push d
8377   3986 FD 2E 06 00   mov32 cb, $00000006
8377   398A 00 00 
8378   398C E7            pop d
8379   398D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8380   3991 E4            pop a
8381   3992 2A            mov b, [d]
8382   3993 38 00 00      mov c, 0
8383   3996             ; --- START RELATIONAL
8384   3996 D7            push a
8385   3997 11            mov a, b
8386   3998 FD 2E 00 00   mov32 cb, $00000000
8386   399C 00 00 
8387   399E B0            cmp a, b
8388   399F FD 73         slt ; < (signed)
8389   39A1 E4            pop a
8390   39A2             ; --- END RELATIONAL
8391   39A2 C0 00 00      cmp b, 0
8392   39A5 C6 AD 39      je _if210_exit
8393   39A8             _if210_TRUE:
8394   39A8             ; return; 
8395   39A8 F9            leave
8396   39A9 09            ret
8397   39AA 0A AD 39      jmp _if210_exit
8398   39AD             _if210_exit:
8399   39AD             ; puts("Device            State of Repair"); 
8400   39AD             ; --- START FUNCTION CALL
8401   39AD 26 A3 75      mov b, _s115 ; "Device            State of Repair"
8402   39B0 FD AB         swp b
8403   39B2 D8            push b
8404   39B3 07 19 64      call puts
8405   39B6 51 02 00      add sp, 2
8406   39B9             ; --- END FUNCTION CALL
8407   39B9             ; for (i = 1; i <= 8; i++) 
8408   39B9             _for211_init:
8409   39B9 FA FD FF      lea d, [bp + -3] ; $i
8410   39BC DA            push d
8411   39BD FD 2E 01 00   mov32 cb, $00000001
8411   39C1 00 00 
8412   39C3 E7            pop d
8413   39C4 FD 43         mov [d], b
8414   39C6             _for211_cond:
8415   39C6 FA FD FF      lea d, [bp + -3] ; $i
8416   39C9 2A            mov b, [d]
8417   39CA 38 00 00      mov c, 0
8418   39CD             ; --- START RELATIONAL
8419   39CD D7            push a
8420   39CE 11            mov a, b
8421   39CF FD 2E 08 00   mov32 cb, $00000008
8421   39D3 00 00 
8422   39D5 B0            cmp a, b
8423   39D6 FD 74         sle ; <= (signed)
8424   39D8 E4            pop a
8425   39D9             ; --- END RELATIONAL
8426   39D9 C0 00 00      cmp b, 0
8427   39DC C6 33 3A      je _for211_exit
8428   39DF             _for211_block:
8429   39DF             ; printf("%-25s%6s\n", get_device_name(i), print100(damage[i])); 
8430   39DF             ; --- START FUNCTION CALL
8431   39DF             ; --- START FUNCTION CALL
8432   39DF 3B 95 68      mov d, _damage_data ; $damage
8433   39E2 D7            push a
8434   39E3 DA            push d
8435   39E4 FA FD FF      lea d, [bp + -3] ; $i
8436   39E7 2A            mov b, [d]
8437   39E8 38 00 00      mov c, 0
8438   39EB E7            pop d
8439   39EC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8440   39F0 E4            pop a
8441   39F1 2A            mov b, [d]
8442   39F2 38 00 00      mov c, 0
8443   39F5 FD AB         swp b
8444   39F7 D8            push b
8445   39F8 07 2E 08      call print100
8446   39FB 51 02 00      add sp, 2
8447   39FE             ; --- END FUNCTION CALL
8448   39FE FD AB         swp b
8449   3A00 D8            push b
8450   3A01             ; --- START FUNCTION CALL
8451   3A01 FA FD FF      lea d, [bp + -3] ; $i
8452   3A04 2A            mov b, [d]
8453   3A05 38 00 00      mov c, 0
8454   3A08 FD AB         swp b
8455   3A0A D8            push b
8456   3A0B 07 8F 54      call get_device_name
8457   3A0E 51 02 00      add sp, 2
8458   3A11             ; --- END FUNCTION CALL
8459   3A11 FD AB         swp b
8460   3A13 D8            push b
8461   3A14 26 C5 75      mov b, _s116 ; "%-25s%6s\n"
8462   3A17 FD AB         swp b
8463   3A19 D8            push b
8464   3A1A 07 2C 5B      call printf
8465   3A1D 51 06 00      add sp, 6
8466   3A20             ; --- END FUNCTION CALL
8467   3A20             _for211_update:
8468   3A20 FA FD FF      lea d, [bp + -3] ; $i
8469   3A23 2A            mov b, [d]
8470   3A24 38 00 00      mov c, 0
8471   3A27 11            mov a, b
8472   3A28 FD 77         inc b
8473   3A2A FA FD FF      lea d, [bp + -3] ; $i
8474   3A2D FD 43         mov [d], b
8475   3A2F 27            mov b, a
8476   3A30 0A C6 39      jmp _for211_cond
8477   3A33             _for211_exit:
8478   3A33             ; printf("\n"); 
8479   3A33             ; --- START FUNCTION CALL
8480   3A33 26 CF 75      mov b, _s117 ; "\n"
8481   3A36 FD AB         swp b
8482   3A38 D8            push b
8483   3A39 07 2C 5B      call printf
8484   3A3C 51 02 00      add sp, 2
8485   3A3F             ; --- END FUNCTION CALL
8486   3A3F F9            leave
8487   3A40 09            ret
8488   3A41             
8489   3A41             shield_control:
8490   3A41 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8491   3A44             ; int i; 
8492   3A44 52 02 00      sub sp, 2
8493   3A47             ; if (inoperable(7)) 
8494   3A47             _if212_cond:
8495   3A47             ; --- START FUNCTION CALL
8496   3A47 FD 2E 07 00   mov32 cb, $00000007
8496   3A4B 00 00 
8497   3A4D DD            push bl
8498   3A4E 07 98 08      call inoperable
8499   3A51 51 01 00      add sp, 1
8500   3A54             ; --- END FUNCTION CALL
8501   3A54 C0 00 00      cmp b, 0
8502   3A57 C6 5F 3A      je _if212_exit
8503   3A5A             _if212_TRUE:
8504   3A5A             ; return; 
8505   3A5A F9            leave
8506   3A5B 09            ret
8507   3A5C 0A 5F 3A      jmp _if212_exit
8508   3A5F             _if212_exit:
8509   3A5F             ; printf("Energy available = %d\n\n Input number of units to shields: ", energy + shield); 
8510   3A5F             ; --- START FUNCTION CALL
8511   3A5F 3B D3 67      mov d, _energy ; $energy
8512   3A62 2A            mov b, [d]
8513   3A63 38 00 00      mov c, 0
8514   3A66             ; --- START TERMS
8515   3A66 D7            push a
8516   3A67 11            mov a, b
8517   3A68 3B 8E 68      mov d, _shield ; $shield
8518   3A6B 2A            mov b, [d]
8519   3A6C 38 00 00      mov c, 0
8520   3A6F 56            add b, a
8521   3A70 E4            pop a
8522   3A71             ; --- END TERMS
8523   3A71 FD AB         swp b
8524   3A73 D8            push b
8525   3A74 26 D1 75      mov b, _s118 ; "Energy available = %d\n\n Input number of units to shields: "
8526   3A77 FD AB         swp b
8527   3A79 D8            push b
8528   3A7A 07 2C 5B      call printf
8529   3A7D 51 04 00      add sp, 4
8530   3A80             ; --- END FUNCTION CALL
8531   3A80             ; i = input_int(); 
8532   3A80 FA FF FF      lea d, [bp + -1] ; $i
8533   3A83 DA            push d
8534   3A84             ; --- START FUNCTION CALL
8535   3A84 07 D9 07      call input_int
8536   3A87 E7            pop d
8537   3A88 FD 43         mov [d], b
8538   3A8A             ; if (i < 0 || shield == i) { 
8539   3A8A             _if213_cond:
8540   3A8A FA FF FF      lea d, [bp + -1] ; $i
8541   3A8D 2A            mov b, [d]
8542   3A8E 38 00 00      mov c, 0
8543   3A91             ; --- START RELATIONAL
8544   3A91 D7            push a
8545   3A92 11            mov a, b
8546   3A93 FD 2E 00 00   mov32 cb, $00000000
8546   3A97 00 00 
8547   3A99 B0            cmp a, b
8548   3A9A FD 73         slt ; < (signed)
8549   3A9C E4            pop a
8550   3A9D             ; --- END RELATIONAL
8551   3A9D             ; --- START LOGICAL OR
8552   3A9D D7            push a
8553   3A9E 11            mov a, b
8554   3A9F 3B 8E 68      mov d, _shield ; $shield
8555   3AA2 2A            mov b, [d]
8556   3AA3 38 00 00      mov c, 0
8557   3AA6             ; --- START RELATIONAL
8558   3AA6 D7            push a
8559   3AA7 11            mov a, b
8560   3AA8 FA FF FF      lea d, [bp + -1] ; $i
8561   3AAB 2A            mov b, [d]
8562   3AAC 38 00 00      mov c, 0
8563   3AAF B0            cmp a, b
8564   3AB0 FD 71         seq ; ==
8565   3AB2 E4            pop a
8566   3AB3             ; --- END RELATIONAL
8567   3AB3 FD A8         sor a, b ; ||
8568   3AB5 E4            pop a
8569   3AB6             ; --- END LOGICAL OR
8570   3AB6 C0 00 00      cmp b, 0
8571   3AB9 C6 CD 3A      je _if213_exit
8572   3ABC             _if213_TRUE:
8573   3ABC             ; puts("<Shields Unchanged>\n"); 
8574   3ABC             ; --- START FUNCTION CALL
8575   3ABC 26 0C 76      mov b, _s119 ; "<Shields Unchanged>\n"
8576   3ABF FD AB         swp b
8577   3AC1 D8            push b
8578   3AC2 07 19 64      call puts
8579   3AC5 51 02 00      add sp, 2
8580   3AC8             ; --- END FUNCTION CALL
8581   3AC8             ; return; 
8582   3AC8 F9            leave
8583   3AC9 09            ret
8584   3ACA 0A CD 3A      jmp _if213_exit
8585   3ACD             _if213_exit:
8586   3ACD             ; if (i >= energy + shield) { 
8587   3ACD             _if214_cond:
8588   3ACD FA FF FF      lea d, [bp + -1] ; $i
8589   3AD0 2A            mov b, [d]
8590   3AD1 38 00 00      mov c, 0
8591   3AD4             ; --- START RELATIONAL
8592   3AD4 D7            push a
8593   3AD5 11            mov a, b
8594   3AD6 3B D3 67      mov d, _energy ; $energy
8595   3AD9 2A            mov b, [d]
8596   3ADA 38 00 00      mov c, 0
8597   3ADD             ; --- START TERMS
8598   3ADD D7            push a
8599   3ADE 11            mov a, b
8600   3ADF 3B 8E 68      mov d, _shield ; $shield
8601   3AE2 2A            mov b, [d]
8602   3AE3 38 00 00      mov c, 0
8603   3AE6 56            add b, a
8604   3AE7 E4            pop a
8605   3AE8             ; --- END TERMS
8606   3AE8 B0            cmp a, b
8607   3AE9 FD 80         sge ; >=
8608   3AEB E4            pop a
8609   3AEC             ; --- END RELATIONAL
8610   3AEC C0 00 00      cmp b, 0
8611   3AEF C6 01 3B      je _if214_exit
8612   3AF2             _if214_TRUE:
8613   3AF2             ; puts("Shield Control Reports:\n  'This is not the Federation Treasury.'"); 
8614   3AF2             ; --- START FUNCTION CALL
8615   3AF2 26 21 76      mov b, _s120 ; "Shield Control Reports:\n  'This is not the Federation Treasury.'"
8616   3AF5 FD AB         swp b
8617   3AF7 D8            push b
8618   3AF8 07 19 64      call puts
8619   3AFB 51 02 00      add sp, 2
8620   3AFE             ; --- END FUNCTION CALL
8621   3AFE 0A 01 3B      jmp _if214_exit
8622   3B01             _if214_exit:
8623   3B01             ; energy = energy + shield - i; 
8624   3B01 3B D3 67      mov d, _energy ; $energy
8625   3B04 DA            push d
8626   3B05 3B D3 67      mov d, _energy ; $energy
8627   3B08 2A            mov b, [d]
8628   3B09 38 00 00      mov c, 0
8629   3B0C             ; --- START TERMS
8630   3B0C D7            push a
8631   3B0D 11            mov a, b
8632   3B0E 3B 8E 68      mov d, _shield ; $shield
8633   3B11 2A            mov b, [d]
8634   3B12 38 00 00      mov c, 0
8635   3B15 56            add b, a
8636   3B16 11            mov a, b
8637   3B17 FA FF FF      lea d, [bp + -1] ; $i
8638   3B1A 2A            mov b, [d]
8639   3B1B 38 00 00      mov c, 0
8640   3B1E 60            sub a, b
8641   3B1F 27            mov b, a
8642   3B20 E4            pop a
8643   3B21             ; --- END TERMS
8644   3B21 E7            pop d
8645   3B22 FD 43         mov [d], b
8646   3B24             ; shield = i; 
8647   3B24 3B 8E 68      mov d, _shield ; $shield
8648   3B27 DA            push d
8649   3B28 FA FF FF      lea d, [bp + -1] ; $i
8650   3B2B 2A            mov b, [d]
8651   3B2C 38 00 00      mov c, 0
8652   3B2F E7            pop d
8653   3B30 FD 43         mov [d], b
8654   3B32             ; printf("Deflector Control Room report:\n  'Shields now at %d units per your command.'\n\n", shield); 
8655   3B32             ; --- START FUNCTION CALL
8656   3B32 3B 8E 68      mov d, _shield ; $shield
8657   3B35 2A            mov b, [d]
8658   3B36 38 00 00      mov c, 0
8659   3B39 FD AB         swp b
8660   3B3B D8            push b
8661   3B3C 26 62 76      mov b, _s121 ; "Deflector Control Room report:\n  'Shields now at %d units per your command.'\n\n"
8662   3B3F FD AB         swp b
8663   3B41 D8            push b
8664   3B42 07 2C 5B      call printf
8665   3B45 51 04 00      add sp, 4
8666   3B48             ; --- END FUNCTION CALL
8667   3B48 F9            leave
8668   3B49 09            ret
8669   3B4A             
8670   3B4A             library_computer:
8671   3B4A F8 00 00      enter 0 ; (push bp; mov bp, sp)
8672   3B4D             ; if (inoperable(8)) 
8673   3B4D             _if215_cond:
8674   3B4D             ; --- START FUNCTION CALL
8675   3B4D FD 2E 08 00   mov32 cb, $00000008
8675   3B51 00 00 
8676   3B53 DD            push bl
8677   3B54 07 98 08      call inoperable
8678   3B57 51 01 00      add sp, 1
8679   3B5A             ; --- END FUNCTION CALL
8680   3B5A C0 00 00      cmp b, 0
8681   3B5D C6 65 3B      je _if215_exit
8682   3B60             _if215_TRUE:
8683   3B60             ; return; 
8684   3B60 F9            leave
8685   3B61 09            ret
8686   3B62 0A 65 3B      jmp _if215_exit
8687   3B65             _if215_exit:
8688   3B65             ; puts("Computer active and awating command: "); 
8689   3B65             ; --- START FUNCTION CALL
8690   3B65 26 B1 76      mov b, _s122 ; "Computer active and awating command: "
8691   3B68 FD AB         swp b
8692   3B6A D8            push b
8693   3B6B 07 19 64      call puts
8694   3B6E 51 02 00      add sp, 2
8695   3B71             ; --- END FUNCTION CALL
8696   3B71             ; switch(input_int()) { 
8697   3B71             _switch216_expr:
8698   3B71             ; --- START FUNCTION CALL
8699   3B71 07 D9 07      call input_int
8700   3B74             _switch216_comparisons:
8701   3B74 C0 FF FF      cmp b, -1
8702   3B77 C6 A4 3B      je _switch216_case0
8703   3B7A C0 00 00      cmp b, 0
8704   3B7D C6 A7 3B      je _switch216_case1
8705   3B80 C0 01 00      cmp b, 1
8706   3B83 C6 AD 3B      je _switch216_case2
8707   3B86 C0 02 00      cmp b, 2
8708   3B89 C6 B3 3B      je _switch216_case3
8709   3B8C C0 03 00      cmp b, 3
8710   3B8F C6 B9 3B      je _switch216_case4
8711   3B92 C0 04 00      cmp b, 4
8712   3B95 C6 BF 3B      je _switch216_case5
8713   3B98 C0 05 00      cmp b, 5
8714   3B9B C6 C5 3B      je _switch216_case6
8715   3B9E 0A CB 3B      jmp _switch216_default
8716   3BA1 0A 1F 3C      jmp _switch216_exit
8717   3BA4             _switch216_case0:
8718   3BA4             ; break; 
8719   3BA4 0A 1F 3C      jmp _switch216_exit ; case break
8720   3BA7             _switch216_case1:
8721   3BA7             ; galactic_record(); 
8722   3BA7             ; --- START FUNCTION CALL
8723   3BA7 07 21 3C      call galactic_record
8724   3BAA             ; break; 
8725   3BAA 0A 1F 3C      jmp _switch216_exit ; case break
8726   3BAD             _switch216_case2:
8727   3BAD             ; status_report(); 
8728   3BAD             ; --- START FUNCTION CALL
8729   3BAD 07 88 3D      call status_report
8730   3BB0             ; break; 
8731   3BB0 0A 1F 3C      jmp _switch216_exit ; case break
8732   3BB3             _switch216_case3:
8733   3BB3             ; torpedo_data(); 
8734   3BB3             ; --- START FUNCTION CALL
8735   3BB3 07 EC 3E      call torpedo_data
8736   3BB6             ; break; 
8737   3BB6 0A 1F 3C      jmp _switch216_exit ; case break
8738   3BB9             _switch216_case4:
8739   3BB9             ; nav_data(); 
8740   3BB9             ; --- START FUNCTION CALL
8741   3BB9 07 2C 40      call nav_data
8742   3BBC             ; break; 
8743   3BBC 0A 1F 3C      jmp _switch216_exit ; case break
8744   3BBF             _switch216_case5:
8745   3BBF             ; dirdist_calc(); 
8746   3BBF             ; --- START FUNCTION CALL
8747   3BBF 07 A1 40      call dirdist_calc
8748   3BC2             ; break; 
8749   3BC2 0A 1F 3C      jmp _switch216_exit ; case break
8750   3BC5             _switch216_case6:
8751   3BC5             ; galaxy_map(); 
8752   3BC5             ; --- START FUNCTION CALL
8753   3BC5 07 6E 42      call galaxy_map
8754   3BC8             ; break; 
8755   3BC8 0A 1F 3C      jmp _switch216_exit ; case break
8756   3BCB             _switch216_default:
8757   3BCB             ; puts("Functions available from Library-Computer:\n\n"); 
8758   3BCB             ; --- START FUNCTION CALL
8759   3BCB 26 D7 76      mov b, _s123 ; "Functions available from Library-Computer:\n\n"
8760   3BCE FD AB         swp b
8761   3BD0 D8            push b
8762   3BD1 07 19 64      call puts
8763   3BD4 51 02 00      add sp, 2
8764   3BD7             ; --- END FUNCTION CALL
8765   3BD7             ; puts("   0 = Cumulative Galactic Record\n"); 
8766   3BD7             ; --- START FUNCTION CALL
8767   3BD7 26 04 77      mov b, _s124 ; "   0 = Cumulative Galactic Record\n"
8768   3BDA FD AB         swp b
8769   3BDC D8            push b
8770   3BDD 07 19 64      call puts
8771   3BE0 51 02 00      add sp, 2
8772   3BE3             ; --- END FUNCTION CALL
8773   3BE3             ; puts("   1 = Status Report\n"); 
8774   3BE3             ; --- START FUNCTION CALL
8775   3BE3 26 27 77      mov b, _s125 ; "   1 = Status Report\n"
8776   3BE6 FD AB         swp b
8777   3BE8 D8            push b
8778   3BE9 07 19 64      call puts
8779   3BEC 51 02 00      add sp, 2
8780   3BEF             ; --- END FUNCTION CALL
8781   3BEF             ; puts("   2 = Photon Torpedo Data\n"); 
8782   3BEF             ; --- START FUNCTION CALL
8783   3BEF 26 3D 77      mov b, _s126 ; "   2 = Photon Torpedo Data\n"
8784   3BF2 FD AB         swp b
8785   3BF4 D8            push b
8786   3BF5 07 19 64      call puts
8787   3BF8 51 02 00      add sp, 2
8788   3BFB             ; --- END FUNCTION CALL
8789   3BFB             ; puts("   3 = Starbase Nav Data\n"); 
8790   3BFB             ; --- START FUNCTION CALL
8791   3BFB 26 59 77      mov b, _s127 ; "   3 = Starbase Nav Data\n"
8792   3BFE FD AB         swp b
8793   3C00 D8            push b
8794   3C01 07 19 64      call puts
8795   3C04 51 02 00      add sp, 2
8796   3C07             ; --- END FUNCTION CALL
8797   3C07             ; puts("   4 = Direction/Distance Calculator\n"); 
8798   3C07             ; --- START FUNCTION CALL
8799   3C07 26 73 77      mov b, _s128 ; "   4 = Direction/Distance Calculator\n"
8800   3C0A FD AB         swp b
8801   3C0C D8            push b
8802   3C0D 07 19 64      call puts
8803   3C10 51 02 00      add sp, 2
8804   3C13             ; --- END FUNCTION CALL
8805   3C13             ; puts("   5 = Galaxy 'Region Name' Map\n"); 
8806   3C13             ; --- START FUNCTION CALL
8807   3C13 26 99 77      mov b, _s129 ; "   5 = Galaxy 'Region Name' Map\n"
8808   3C16 FD AB         swp b
8809   3C18 D8            push b
8810   3C19 07 19 64      call puts
8811   3C1C 51 02 00      add sp, 2
8812   3C1F             ; --- END FUNCTION CALL
8813   3C1F             _switch216_exit:
8814   3C1F F9            leave
8815   3C20 09            ret
8816   3C21             
8817   3C21             galactic_record:
8818   3C21 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8819   3C24             ; int i, j; 
8820   3C24 52 02 00      sub sp, 2
8821   3C27 52 02 00      sub sp, 2
8822   3C2A             ; printf("\n     Computer Record of Galaxy for Quadrant %d,%d\n\n", quad_y, quad_x); 
8823   3C2A             ; --- START FUNCTION CALL
8824   3C2A 3B 8C 68      mov d, _quad_x ; $quad_x
8825   3C2D 2A            mov b, [d]
8826   3C2E 38 00 00      mov c, 0
8827   3C31 FD AB         swp b
8828   3C33 D8            push b
8829   3C34 3B 8A 68      mov d, _quad_y ; $quad_y
8830   3C37 2A            mov b, [d]
8831   3C38 38 00 00      mov c, 0
8832   3C3B FD AB         swp b
8833   3C3D D8            push b
8834   3C3E 26 BA 77      mov b, _s130 ; "\n     Computer Record of Galaxy for Quadrant %d,%d\n\n"
8835   3C41 FD AB         swp b
8836   3C43 D8            push b
8837   3C44 07 2C 5B      call printf
8838   3C47 51 06 00      add sp, 6
8839   3C4A             ; --- END FUNCTION CALL
8840   3C4A             ; puts("     1     2     3     4     5     6     7     8"); 
8841   3C4A             ; --- START FUNCTION CALL
8842   3C4A 26 EF 77      mov b, _s131 ; "     1     2     3     4     5     6     7     8"
8843   3C4D FD AB         swp b
8844   3C4F D8            push b
8845   3C50 07 19 64      call puts
8846   3C53 51 02 00      add sp, 2
8847   3C56             ; --- END FUNCTION CALL
8848   3C56             ; for (i = 1; i <= 8; i++) { 
8849   3C56             _for217_init:
8850   3C56 FA FF FF      lea d, [bp + -1] ; $i
8851   3C59 DA            push d
8852   3C5A FD 2E 01 00   mov32 cb, $00000001
8852   3C5E 00 00 
8853   3C60 E7            pop d
8854   3C61 FD 43         mov [d], b
8855   3C63             _for217_cond:
8856   3C63 FA FF FF      lea d, [bp + -1] ; $i
8857   3C66 2A            mov b, [d]
8858   3C67 38 00 00      mov c, 0
8859   3C6A             ; --- START RELATIONAL
8860   3C6A D7            push a
8861   3C6B 11            mov a, b
8862   3C6C FD 2E 08 00   mov32 cb, $00000008
8862   3C70 00 00 
8863   3C72 B0            cmp a, b
8864   3C73 FD 74         sle ; <= (signed)
8865   3C75 E4            pop a
8866   3C76             ; --- END RELATIONAL
8867   3C76 C0 00 00      cmp b, 0
8868   3C79 C6 70 3D      je _for217_exit
8869   3C7C             _for217_block:
8870   3C7C             ; printf("%s%d", gr_1, i); 
8871   3C7C             ; --- START FUNCTION CALL
8872   3C7C FA FF FF      lea d, [bp + -1] ; $i
8873   3C7F 2A            mov b, [d]
8874   3C80 38 00 00      mov c, 0
8875   3C83 FD AB         swp b
8876   3C85 D8            push b
8877   3C86 3B 33 6A      mov d, _gr_1 ; $gr_1
8878   3C89 2A            mov b, [d]
8879   3C8A 38 00 00      mov c, 0
8880   3C8D FD AB         swp b
8881   3C8F D8            push b
8882   3C90 26 20 78      mov b, _s132 ; "%s%d"
8883   3C93 FD AB         swp b
8884   3C95 D8            push b
8885   3C96 07 2C 5B      call printf
8886   3C99 51 06 00      add sp, 6
8887   3C9C             ; --- END FUNCTION CALL
8888   3C9C             ; for (j = 1; j <= 8; j++) { 
8889   3C9C             _for218_init:
8890   3C9C FA FD FF      lea d, [bp + -3] ; $j
8891   3C9F DA            push d
8892   3CA0 FD 2E 01 00   mov32 cb, $00000001
8892   3CA4 00 00 
8893   3CA6 E7            pop d
8894   3CA7 FD 43         mov [d], b
8895   3CA9             _for218_cond:
8896   3CA9 FA FD FF      lea d, [bp + -3] ; $j
8897   3CAC 2A            mov b, [d]
8898   3CAD 38 00 00      mov c, 0
8899   3CB0             ; --- START RELATIONAL
8900   3CB0 D7            push a
8901   3CB1 11            mov a, b
8902   3CB2 FD 2E 08 00   mov32 cb, $00000008
8902   3CB6 00 00 
8903   3CB8 B0            cmp a, b
8904   3CB9 FD 74         sle ; <= (signed)
8905   3CBB E4            pop a
8906   3CBC             ; --- END RELATIONAL
8907   3CBC C0 00 00      cmp b, 0
8908   3CBF C6 50 3D      je _for218_exit
8909   3CC2             _for218_block:
8910   3CC2             ; printf("   "); 
8911   3CC2             ; --- START FUNCTION CALL
8912   3CC2 26 A6 6B      mov b, _s25 ; "   "
8913   3CC5 FD AB         swp b
8914   3CC7 D8            push b
8915   3CC8 07 2C 5B      call printf
8916   3CCB 51 02 00      add sp, 2
8917   3CCE             ; --- END FUNCTION CALL
8918   3CCE             ; if (map[i][j] &  0x1000		/* Set if this sector was mapped */           ) 
8919   3CCE             _if219_cond:
8920   3CCE 3B D7 67      mov d, _map_data ; $map
8921   3CD1 D7            push a
8922   3CD2 DA            push d
8923   3CD3 FA FF FF      lea d, [bp + -1] ; $i
8924   3CD6 2A            mov b, [d]
8925   3CD7 38 00 00      mov c, 0
8926   3CDA E7            pop d
8927   3CDB FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
8928   3CDF DA            push d
8929   3CE0 FA FD FF      lea d, [bp + -3] ; $j
8930   3CE3 2A            mov b, [d]
8931   3CE4 38 00 00      mov c, 0
8932   3CE7 E7            pop d
8933   3CE8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8934   3CEC E4            pop a
8935   3CED 2A            mov b, [d]
8936   3CEE 38 00 00      mov c, 0
8937   3CF1 D7            push a
8938   3CF2 11            mov a, b
8939   3CF3 FD 2E 00 10   mov32 cb, $00001000
8939   3CF7 00 00 
8940   3CF9 FD 92         and b, a ; &
8941   3CFB E4            pop a
8942   3CFC C0 00 00      cmp b, 0
8943   3CFF C6 31 3D      je _if219_else
8944   3D02             _if219_TRUE:
8945   3D02             ; putbcd(map[i][j]); 
8946   3D02             ; --- START FUNCTION CALL
8947   3D02 3B D7 67      mov d, _map_data ; $map
8948   3D05 D7            push a
8949   3D06 DA            push d
8950   3D07 FA FF FF      lea d, [bp + -1] ; $i
8951   3D0A 2A            mov b, [d]
8952   3D0B 38 00 00      mov c, 0
8953   3D0E E7            pop d
8954   3D0F FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
8955   3D13 DA            push d
8956   3D14 FA FD FF      lea d, [bp + -3] ; $j
8957   3D17 2A            mov b, [d]
8958   3D18 38 00 00      mov c, 0
8959   3D1B E7            pop d
8960   3D1C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8961   3D20 E4            pop a
8962   3D21 2A            mov b, [d]
8963   3D22 38 00 00      mov c, 0
8964   3D25 FD AB         swp b
8965   3D27 D8            push b
8966   3D28 07 68 27      call putbcd
8967   3D2B 51 02 00      add sp, 2
8968   3D2E             ; --- END FUNCTION CALL
8969   3D2E 0A 3D 3D      jmp _if219_exit
8970   3D31             _if219_else:
8971   3D31             ; printf("***"); 
8972   3D31             ; --- START FUNCTION CALL
8973   3D31 26 0D 72      mov b, _s90 ; "***"
8974   3D34 FD AB         swp b
8975   3D36 D8            push b
8976   3D37 07 2C 5B      call printf
8977   3D3A 51 02 00      add sp, 2
8978   3D3D             ; --- END FUNCTION CALL
8979   3D3D             _if219_exit:
8980   3D3D             _for218_update:
8981   3D3D FA FD FF      lea d, [bp + -3] ; $j
8982   3D40 2A            mov b, [d]
8983   3D41 38 00 00      mov c, 0
8984   3D44 11            mov a, b
8985   3D45 FD 77         inc b
8986   3D47 FA FD FF      lea d, [bp + -3] ; $j
8987   3D4A FD 43         mov [d], b
8988   3D4C 27            mov b, a
8989   3D4D 0A A9 3C      jmp _for218_cond
8990   3D50             _for218_exit:
8991   3D50             ; putchar('\n'); 
8992   3D50             ; --- START FUNCTION CALL
8993   3D50 FD 2E 0A 00   mov32 cb, $0000000a
8993   3D54 00 00 
8994   3D56 DD            push bl
8995   3D57 07 A6 5F      call putchar
8996   3D5A 51 01 00      add sp, 1
8997   3D5D             ; --- END FUNCTION CALL
8998   3D5D             _for217_update:
8999   3D5D FA FF FF      lea d, [bp + -1] ; $i
9000   3D60 2A            mov b, [d]
9001   3D61 38 00 00      mov c, 0
9002   3D64 11            mov a, b
9003   3D65 FD 77         inc b
9004   3D67 FA FF FF      lea d, [bp + -1] ; $i
9005   3D6A FD 43         mov [d], b
9006   3D6C 27            mov b, a
9007   3D6D 0A 63 3C      jmp _for217_cond
9008   3D70             _for217_exit:
9009   3D70             ; printf("%s\n", gr_1); 
9010   3D70             ; --- START FUNCTION CALL
9011   3D70 3B 33 6A      mov d, _gr_1 ; $gr_1
9012   3D73 2A            mov b, [d]
9013   3D74 38 00 00      mov c, 0
9014   3D77 FD AB         swp b
9015   3D79 D8            push b
9016   3D7A 26 14 72      mov b, _s92 ; "%s\n"
9017   3D7D FD AB         swp b
9018   3D7F D8            push b
9019   3D80 07 2C 5B      call printf
9020   3D83 51 04 00      add sp, 4
9021   3D86             ; --- END FUNCTION CALL
9022   3D86 F9            leave
9023   3D87 09            ret
9024   3D88             
9025   3D88             status_report:
9026   3D88 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9027   3D8B             ; char *plural; 
9028   3D8B 52 02 00      sub sp, 2
9029   3D8E             ; plural = str_s + 1; 
9030   3D8E FA FF FF      lea d, [bp + -1] ; $plural
9031   3D91 DA            push d
9032   3D92 3B 37 6A      mov d, _str_s ; $str_s
9033   3D95 2A            mov b, [d]
9034   3D96 38 00 00      mov c, 0
9035   3D99             ; --- START TERMS
9036   3D99 D7            push a
9037   3D9A 11            mov a, b
9038   3D9B FD 2E 01 00   mov32 cb, $00000001
9038   3D9F 00 00 
9039   3DA1 56            add b, a
9040   3DA2 E4            pop a
9041   3DA3             ; --- END TERMS
9042   3DA3 E7            pop d
9043   3DA4 FD 43         mov [d], b
9044   3DA6             ; unsigned int         left; 
9045   3DA6 52 02 00      sub sp, 2
9046   3DA9             ; left = TO_FIXED(time_start + time_up) - stardate; 
9047   3DA9 FA FD FF      lea d, [bp + -3] ; $left
9048   3DAC DA            push d
9049   3DAD             ; --- START FUNCTION CALL
9050   3DAD 3B 91 68      mov d, _time_start ; $time_start
9051   3DB0 2A            mov b, [d]
9052   3DB1 38 00 00      mov c, 0
9053   3DB4             ; --- START TERMS
9054   3DB4 D7            push a
9055   3DB5 11            mov a, b
9056   3DB6 3B 93 68      mov d, _time_up ; $time_up
9057   3DB9 2A            mov b, [d]
9058   3DBA 38 00 00      mov c, 0
9059   3DBD 56            add b, a
9060   3DBE E4            pop a
9061   3DBF             ; --- END TERMS
9062   3DBF FD AB         swp b
9063   3DC1 D8            push b
9064   3DC2 07 17 04      call TO_FIXED
9065   3DC5 51 02 00      add sp, 2
9066   3DC8             ; --- END FUNCTION CALL
9067   3DC8             ; --- START TERMS
9068   3DC8 D7            push a
9069   3DC9 11            mov a, b
9070   3DCA 3B AD 68      mov d, _stardate ; $stardate
9071   3DCD 2A            mov b, [d]
9072   3DCE 38 00 00      mov c, 0
9073   3DD1 60            sub a, b
9074   3DD2 27            mov b, a
9075   3DD3 E4            pop a
9076   3DD4             ; --- END TERMS
9077   3DD4 E7            pop d
9078   3DD5 FD 43         mov [d], b
9079   3DD7             ; puts("   Status Report:\n"); 
9080   3DD7             ; --- START FUNCTION CALL
9081   3DD7 26 25 78      mov b, _s133 ; "   Status Report:\n"
9082   3DDA FD AB         swp b
9083   3DDC D8            push b
9084   3DDD 07 19 64      call puts
9085   3DE0 51 02 00      add sp, 2
9086   3DE3             ; --- END FUNCTION CALL
9087   3DE3             ; if (klingons_left > 1) 
9088   3DE3             _if220_cond:
9089   3DE3 3B 87 68      mov d, _klingons_left ; $klingons_left
9090   3DE6 32            mov bl, [d]
9091   3DE7 A7 00         mov bh, 0
9092   3DE9 38 00 00      mov c, 0
9093   3DEC             ; --- START RELATIONAL
9094   3DEC D7            push a
9095   3DED 11            mov a, b
9096   3DEE FD 2E 01 00   mov32 cb, $00000001
9096   3DF2 00 00 
9097   3DF4 B0            cmp a, b
9098   3DF5 FD 81         sgu ; > (unsigned)
9099   3DF7 E4            pop a
9100   3DF8             ; --- END RELATIONAL
9101   3DF8 C0 00 00      cmp b, 0
9102   3DFB C6 0F 3E      je _if220_exit
9103   3DFE             _if220_TRUE:
9104   3DFE             ; plural = str_s; 
9105   3DFE FA FF FF      lea d, [bp + -1] ; $plural
9106   3E01 DA            push d
9107   3E02 3B 37 6A      mov d, _str_s ; $str_s
9108   3E05 2A            mov b, [d]
9109   3E06 38 00 00      mov c, 0
9110   3E09 E7            pop d
9111   3E0A FD 43         mov [d], b
9112   3E0C 0A 0F 3E      jmp _if220_exit
9113   3E0F             _if220_exit:
9114   3E0F             ; printf("Klingon%s Left: %d\n Mission must be completed in %d.%d stardates\n", 
9115   3E0F             ; --- START FUNCTION CALL
9116   3E0F FA FD FF      lea d, [bp + -3] ; $left
9117   3E12 2A            mov b, [d]
9118   3E13 38 00 00      mov c, 0
9119   3E16             ; --- START FACTORS
9120   3E16 D7            push a
9121   3E17 FD D8         push g
9122   3E19 11            mov a, b
9123   3E1A FD 7A         mov g, c
9124   3E1C FD 2E 0A 00   mov32 cb, $0000000a
9124   3E20 00 00 
9125   3E22 AE            div a, b ; 
9126   3E23 11            mov a, b
9127   3E24 FD 38         mov c, g
9128   3E26 27            mov b, a
9129   3E27 FD F1         pop g
9130   3E29 E4            pop a
9131   3E2A             ; --- END FACTORS
9132   3E2A FD AB         swp b
9133   3E2C D8            push b
9134   3E2D             ; --- START FUNCTION CALL
9135   3E2D FA FD FF      lea d, [bp + -3] ; $left
9136   3E30 2A            mov b, [d]
9137   3E31 38 00 00      mov c, 0
9138   3E34 FD AB         swp b
9139   3E36 D8            push b
9140   3E37 07 35 04      call FROM_FIXED
9141   3E3A 51 02 00      add sp, 2
9142   3E3D             ; --- END FUNCTION CALL
9143   3E3D FD AB         swp b
9144   3E3F D8            push b
9145   3E40 3B 87 68      mov d, _klingons_left ; $klingons_left
9146   3E43 32            mov bl, [d]
9147   3E44 A7 00         mov bh, 0
9148   3E46 38 00 00      mov c, 0
9149   3E49 FD AA         swp a
9150   3E4B D8            push b
9151   3E4C FA FF FF      lea d, [bp + -1] ; $plural
9152   3E4F 2A            mov b, [d]
9153   3E50 38 00 00      mov c, 0
9154   3E53 FD AB         swp b
9155   3E55 D8            push b
9156   3E56 26 38 78      mov b, _s134 ; "Klingon%s Left: %d\n Mission must be completed in %d.%d stardates\n"
9157   3E59 FD AB         swp b
9158   3E5B D8            push b
9159   3E5C 07 2C 5B      call printf
9160   3E5F 51 09 00      add sp, 9
9161   3E62             ; --- END FUNCTION CALL
9162   3E62             ; if (starbases_left < 1) { 
9163   3E62             _if225_cond:
9164   3E62 3B B1 67      mov d, _starbases_left ; $starbases_left
9165   3E65 32            mov bl, [d]
9166   3E66 A7 00         mov bh, 0
9167   3E68 38 00 00      mov c, 0
9168   3E6B             ; --- START RELATIONAL
9169   3E6B D7            push a
9170   3E6C 11            mov a, b
9171   3E6D FD 2E 01 00   mov32 cb, $00000001
9171   3E71 00 00 
9172   3E73 B0            cmp a, b
9173   3E74 FD 73         slt ; < (signed)
9174   3E76 E4            pop a
9175   3E77             ; --- END RELATIONAL
9176   3E77 C0 00 00      cmp b, 0
9177   3E7A C6 8C 3E      je _if225_else
9178   3E7D             _if225_TRUE:
9179   3E7D             ; puts("Your stupidity has left you on your own in the galaxy\n -- you have no starbases left!\n"); 
9180   3E7D             ; --- START FUNCTION CALL
9181   3E7D 26 7A 78      mov b, _s135 ; "Your stupidity has left you on your own in the galaxy\n -- you have no starbases left!\n"
9182   3E80 FD AB         swp b
9183   3E82 D8            push b
9184   3E83 07 19 64      call puts
9185   3E86 51 02 00      add sp, 2
9186   3E89             ; --- END FUNCTION CALL
9187   3E89 0A EA 3E      jmp _if225_exit
9188   3E8C             _if225_else:
9189   3E8C             ; plural = str_s; 
9190   3E8C FA FF FF      lea d, [bp + -1] ; $plural
9191   3E8F DA            push d
9192   3E90 3B 37 6A      mov d, _str_s ; $str_s
9193   3E93 2A            mov b, [d]
9194   3E94 38 00 00      mov c, 0
9195   3E97 E7            pop d
9196   3E98 FD 43         mov [d], b
9197   3E9A             ; if (starbases_left < 2) 
9198   3E9A             _if226_cond:
9199   3E9A 3B B1 67      mov d, _starbases_left ; $starbases_left
9200   3E9D 32            mov bl, [d]
9201   3E9E A7 00         mov bh, 0
9202   3EA0 38 00 00      mov c, 0
9203   3EA3             ; --- START RELATIONAL
9204   3EA3 D7            push a
9205   3EA4 11            mov a, b
9206   3EA5 FD 2E 02 00   mov32 cb, $00000002
9206   3EA9 00 00 
9207   3EAB B0            cmp a, b
9208   3EAC FD 73         slt ; < (signed)
9209   3EAE E4            pop a
9210   3EAF             ; --- END RELATIONAL
9211   3EAF C0 00 00      cmp b, 0
9212   3EB2 C6 C8 3E      je _if226_exit
9213   3EB5             _if226_TRUE:
9214   3EB5             ; plural++; 
9215   3EB5 FA FF FF      lea d, [bp + -1] ; $plural
9216   3EB8 2A            mov b, [d]
9217   3EB9 38 00 00      mov c, 0
9218   3EBC FD 77         inc b
9219   3EBE FA FF FF      lea d, [bp + -1] ; $plural
9220   3EC1 FD 43         mov [d], b
9221   3EC3 FD 7D         dec b
9222   3EC5 0A C8 3E      jmp _if226_exit
9223   3EC8             _if226_exit:
9224   3EC8             ; printf("The Federation is maintaining %d starbase%s in the galaxy\n\n", starbases_left, plural); 
9225   3EC8             ; --- START FUNCTION CALL
9226   3EC8 FA FF FF      lea d, [bp + -1] ; $plural
9227   3ECB 2A            mov b, [d]
9228   3ECC 38 00 00      mov c, 0
9229   3ECF FD AB         swp b
9230   3ED1 D8            push b
9231   3ED2 3B B1 67      mov d, _starbases_left ; $starbases_left
9232   3ED5 32            mov bl, [d]
9233   3ED6 A7 00         mov bh, 0
9234   3ED8 38 00 00      mov c, 0
9235   3EDB FD AA         swp a
9236   3EDD D8            push b
9237   3EDE 26 D1 78      mov b, _s136 ; "The Federation is maintaining %d starbase%s in the galaxy\n\n"
9238   3EE1 FD AB         swp b
9239   3EE3 D8            push b
9240   3EE4 07 2C 5B      call printf
9241   3EE7 51 05 00      add sp, 5
9242   3EEA             ; --- END FUNCTION CALL
9243   3EEA             _if225_exit:
9244   3EEA F9            leave
9245   3EEB 09            ret
9246   3EEC             
9247   3EEC             torpedo_data:
9248   3EEC F8 00 00      enter 0 ; (push bp; mov bp, sp)
9249   3EEF             ; int i; 
9250   3EEF 52 02 00      sub sp, 2
9251   3EF2             ; char *plural; 
9252   3EF2 52 02 00      sub sp, 2
9253   3EF5             ; plural = str_s + 1; 
9254   3EF5 FA FD FF      lea d, [bp + -3] ; $plural
9255   3EF8 DA            push d
9256   3EF9 3B 37 6A      mov d, _str_s ; $str_s
9257   3EFC 2A            mov b, [d]
9258   3EFD 38 00 00      mov c, 0
9259   3F00             ; --- START TERMS
9260   3F00 D7            push a
9261   3F01 11            mov a, b
9262   3F02 FD 2E 01 00   mov32 cb, $00000001
9262   3F06 00 00 
9263   3F08 56            add b, a
9264   3F09 E4            pop a
9265   3F0A             ; --- END TERMS
9266   3F0A E7            pop d
9267   3F0B FD 43         mov [d], b
9268   3F0D             ; struct klingon *k; 
9269   3F0D 52 02 00      sub sp, 2
9270   3F10             ; if (no_klingon()) 
9271   3F10             _if227_cond:
9272   3F10             ; --- START FUNCTION CALL
9273   3F10 07 CF 29      call no_klingon
9274   3F13 C0 00 00      cmp b, 0
9275   3F16 C6 1E 3F      je _if227_exit
9276   3F19             _if227_TRUE:
9277   3F19             ; return; 
9278   3F19 F9            leave
9279   3F1A 09            ret
9280   3F1B 0A 1E 3F      jmp _if227_exit
9281   3F1E             _if227_exit:
9282   3F1E             ; if (klingons > 1) 
9283   3F1E             _if228_cond:
9284   3F1E 3B 85 68      mov d, _klingons ; $klingons
9285   3F21 32            mov bl, [d]
9286   3F22 A7 00         mov bh, 0
9287   3F24 38 00 00      mov c, 0
9288   3F27             ; --- START RELATIONAL
9289   3F27 D7            push a
9290   3F28 11            mov a, b
9291   3F29 FD 2E 01 00   mov32 cb, $00000001
9291   3F2D 00 00 
9292   3F2F B0            cmp a, b
9293   3F30 FD 81         sgu ; > (unsigned)
9294   3F32 E4            pop a
9295   3F33             ; --- END RELATIONAL
9296   3F33 C0 00 00      cmp b, 0
9297   3F36 C6 4C 3F      je _if228_exit
9298   3F39             _if228_TRUE:
9299   3F39             ; plural--; 
9300   3F39 FA FD FF      lea d, [bp + -3] ; $plural
9301   3F3C 2A            mov b, [d]
9302   3F3D 38 00 00      mov c, 0
9303   3F40 FD 7D         dec b
9304   3F42 FA FD FF      lea d, [bp + -3] ; $plural
9305   3F45 FD 43         mov [d], b
9306   3F47 FD 77         inc b
9307   3F49 0A 4C 3F      jmp _if228_exit
9308   3F4C             _if228_exit:
9309   3F4C             ; printf("From Enterprise to Klingon battlecriuser%s:\n\n", plural); 
9310   3F4C             ; --- START FUNCTION CALL
9311   3F4C FA FD FF      lea d, [bp + -3] ; $plural
9312   3F4F 2A            mov b, [d]
9313   3F50 38 00 00      mov c, 0
9314   3F53 FD AB         swp b
9315   3F55 D8            push b
9316   3F56 26 0D 79      mov b, _s137 ; "From Enterprise to Klingon battlecriuser%s:\n\n"
9317   3F59 FD AB         swp b
9318   3F5B D8            push b
9319   3F5C 07 2C 5B      call printf
9320   3F5F 51 04 00      add sp, 4
9321   3F62             ; --- END FUNCTION CALL
9322   3F62             ; k = kdata; 
9323   3F62 FA FB FF      lea d, [bp + -5] ; $k
9324   3F65 DA            push d
9325   3F66 3B 79 68      mov d, _kdata_data ; $kdata
9326   3F69 2D            mov b, d
9327   3F6A 38 00 00      mov c, 0
9328   3F6D E7            pop d
9329   3F6E FD 43         mov [d], b
9330   3F70             ; for (i = 0; i <= 2; i++) { 
9331   3F70             _for229_init:
9332   3F70 FA FF FF      lea d, [bp + -1] ; $i
9333   3F73 DA            push d
9334   3F74 FD 2E 00 00   mov32 cb, $00000000
9334   3F78 00 00 
9335   3F7A E7            pop d
9336   3F7B FD 43         mov [d], b
9337   3F7D             _for229_cond:
9338   3F7D FA FF FF      lea d, [bp + -1] ; $i
9339   3F80 2A            mov b, [d]
9340   3F81 38 00 00      mov c, 0
9341   3F84             ; --- START RELATIONAL
9342   3F84 D7            push a
9343   3F85 11            mov a, b
9344   3F86 FD 2E 02 00   mov32 cb, $00000002
9344   3F8A 00 00 
9345   3F8C B0            cmp a, b
9346   3F8D FD 74         sle ; <= (signed)
9347   3F8F E4            pop a
9348   3F90             ; --- END RELATIONAL
9349   3F90 C0 00 00      cmp b, 0
9350   3F93 C6 2A 40      je _for229_exit
9351   3F96             _for229_block:
9352   3F96             ; if (k->energy > 0) { 
9353   3F96             _if230_cond:
9354   3F96 FA FB FF      lea d, [bp + -5] ; $k
9355   3F99 FD 2A         mov d, [d]
9356   3F9B 58 02 00      add d, 2
9357   3F9E 2A            mov b, [d]
9358   3F9F 38 00 00      mov c, 0
9359   3FA2             ; --- START RELATIONAL
9360   3FA2 D7            push a
9361   3FA3 11            mov a, b
9362   3FA4 FD 2E 00 00   mov32 cb, $00000000
9362   3FA8 00 00 
9363   3FAA B0            cmp a, b
9364   3FAB FD 7F         sgt ; >
9365   3FAD E4            pop a
9366   3FAE             ; --- END RELATIONAL
9367   3FAE C0 00 00      cmp b, 0
9368   3FB1 C6 05 40      je _if230_exit
9369   3FB4             _if230_TRUE:
9370   3FB4             ; compute_vector(TO_FIXED00(k->y), 
9371   3FB4             ; --- START FUNCTION CALL
9372   3FB4 3B AB 68      mov d, _ship_x ; $ship_x
9373   3FB7 2A            mov b, [d]
9374   3FB8 38 00 00      mov c, 0
9375   3FBB FD AB         swp b
9376   3FBD D8            push b
9377   3FBE 3B A9 68      mov d, _ship_y ; $ship_y
9378   3FC1 2A            mov b, [d]
9379   3FC2 38 00 00      mov c, 0
9380   3FC5 FD AB         swp b
9381   3FC7 D8            push b
9382   3FC8             ; --- START FUNCTION CALL
9383   3FC8 FA FB FF      lea d, [bp + -5] ; $k
9384   3FCB FD 2A         mov d, [d]
9385   3FCD 58 01 00      add d, 1
9386   3FD0 32            mov bl, [d]
9387   3FD1 A7 00         mov bh, 0
9388   3FD3 38 00 00      mov c, 0
9389   3FD6 FD AB         swp b
9390   3FD8 D8            push b
9391   3FD9 07 54 04      call TO_FIXED00
9392   3FDC 51 02 00      add sp, 2
9393   3FDF             ; --- END FUNCTION CALL
9394   3FDF FD AB         swp b
9395   3FE1 D8            push b
9396   3FE2             ; --- START FUNCTION CALL
9397   3FE2 FA FB FF      lea d, [bp + -5] ; $k
9398   3FE5 FD 2A         mov d, [d]
9399   3FE7 58 00 00      add d, 0
9400   3FEA 32            mov bl, [d]
9401   3FEB A7 00         mov bh, 0
9402   3FED 38 00 00      mov c, 0
9403   3FF0 FD AB         swp b
9404   3FF2 D8            push b
9405   3FF3 07 54 04      call TO_FIXED00
9406   3FF6 51 02 00      add sp, 2
9407   3FF9             ; --- END FUNCTION CALL
9408   3FF9 FD AB         swp b
9409   3FFB D8            push b
9410   3FFC 07 CE 44      call compute_vector
9411   3FFF 51 08 00      add sp, 8
9412   4002             ; --- END FUNCTION CALL
9413   4002 0A 05 40      jmp _if230_exit
9414   4005             _if230_exit:
9415   4005             ; k++; 
9416   4005 FA FB FF      lea d, [bp + -5] ; $k
9417   4008 2A            mov b, [d]
9418   4009 38 00 00      mov c, 0
9419   400C 11            mov a, b
9420   400D FD 77         inc b
9421   400F FD 77         inc b
9422   4011 FA FB FF      lea d, [bp + -5] ; $k
9423   4014 FD 43         mov [d], b
9424   4016 27            mov b, a
9425   4017             _for229_update:
9426   4017 FA FF FF      lea d, [bp + -1] ; $i
9427   401A 2A            mov b, [d]
9428   401B 38 00 00      mov c, 0
9429   401E 11            mov a, b
9430   401F FD 77         inc b
9431   4021 FA FF FF      lea d, [bp + -1] ; $i
9432   4024 FD 43         mov [d], b
9433   4026 27            mov b, a
9434   4027 0A 7D 3F      jmp _for229_cond
9435   402A             _for229_exit:
9436   402A F9            leave
9437   402B 09            ret
9438   402C             
9439   402C             nav_data:
9440   402C F8 00 00      enter 0 ; (push bp; mov bp, sp)
9441   402F             ; if (starbases <= 0) { 
9442   402F             _if231_cond:
9443   402F 3B AE 67      mov d, _starbases ; $starbases
9444   4032 32            mov bl, [d]
9445   4033 A7 00         mov bh, 0
9446   4035 38 00 00      mov c, 0
9447   4038             ; --- START RELATIONAL
9448   4038 D7            push a
9449   4039 11            mov a, b
9450   403A FD 2E 00 00   mov32 cb, $00000000
9450   403E 00 00 
9451   4040 B0            cmp a, b
9452   4041 FD 74         sle ; <= (signed)
9453   4043 E4            pop a
9454   4044             ; --- END RELATIONAL
9455   4044 C0 00 00      cmp b, 0
9456   4047 C6 5B 40      je _if231_exit
9457   404A             _if231_TRUE:
9458   404A             ; puts("Mr. Spock reports,\n  'Sensors show no starbases in this quadrant.'\n"); 
9459   404A             ; --- START FUNCTION CALL
9460   404A 26 3B 79      mov b, _s138 ; "Mr. Spock reports,\n  'Sensors show no starbases in this quadrant.'\n"
9461   404D FD AB         swp b
9462   404F D8            push b
9463   4050 07 19 64      call puts
9464   4053 51 02 00      add sp, 2
9465   4056             ; --- END FUNCTION CALL
9466   4056             ; return; 
9467   4056 F9            leave
9468   4057 09            ret
9469   4058 0A 5B 40      jmp _if231_exit
9470   405B             _if231_exit:
9471   405B             ; compute_vector(TO_FIXED00(base_y), TO_FIXED00(base_x), ship_y, ship_x); 
9472   405B             ; --- START FUNCTION CALL
9473   405B 3B AB 68      mov d, _ship_x ; $ship_x
9474   405E 2A            mov b, [d]
9475   405F 38 00 00      mov c, 0
9476   4062 FD AB         swp b
9477   4064 D8            push b
9478   4065 3B A9 68      mov d, _ship_y ; $ship_y
9479   4068 2A            mov b, [d]
9480   4069 38 00 00      mov c, 0
9481   406C FD AB         swp b
9482   406E D8            push b
9483   406F             ; --- START FUNCTION CALL
9484   406F 3B B0 67      mov d, _base_x ; $base_x
9485   4072 32            mov bl, [d]
9486   4073 A7 00         mov bh, 0
9487   4075 38 00 00      mov c, 0
9488   4078 FD AB         swp b
9489   407A D8            push b
9490   407B 07 54 04      call TO_FIXED00
9491   407E 51 02 00      add sp, 2
9492   4081             ; --- END FUNCTION CALL
9493   4081 FD AB         swp b
9494   4083 D8            push b
9495   4084             ; --- START FUNCTION CALL
9496   4084 3B AF 67      mov d, _base_y ; $base_y
9497   4087 32            mov bl, [d]
9498   4088 A7 00         mov bh, 0
9499   408A 38 00 00      mov c, 0
9500   408D FD AB         swp b
9501   408F D8            push b
9502   4090 07 54 04      call TO_FIXED00
9503   4093 51 02 00      add sp, 2
9504   4096             ; --- END FUNCTION CALL
9505   4096 FD AB         swp b
9506   4098 D8            push b
9507   4099 07 CE 44      call compute_vector
9508   409C 51 08 00      add sp, 8
9509   409F             ; --- END FUNCTION CALL
9510   409F F9            leave
9511   40A0 09            ret
9512   40A1             
9513   40A1             dirdist_calc:
9514   40A1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9515   40A4             ; int        c1, a, w1, x; 
9516   40A4 52 02 00      sub sp, 2
9517   40A7 52 02 00      sub sp, 2
9518   40AA 52 02 00      sub sp, 2
9519   40AD 52 02 00      sub sp, 2
9520   40B0             ; printf("Direction/Distance Calculator\n You are at quadrant %d,%d sector %d,%d\n\n Please enter initial X coordinate: ", 
9521   40B0             ; --- START FUNCTION CALL
9522   40B0             ; --- START FUNCTION CALL
9523   40B0 3B AB 68      mov d, _ship_x ; $ship_x
9524   40B3 2A            mov b, [d]
9525   40B4 38 00 00      mov c, 0
9526   40B7 FD AB         swp b
9527   40B9 D8            push b
9528   40BA 07 72 04      call FROM_FIXED00
9529   40BD 51 02 00      add sp, 2
9530   40C0             ; --- END FUNCTION CALL
9531   40C0 FD AB         swp b
9532   40C2 D8            push b
9533   40C3             ; --- START FUNCTION CALL
9534   40C3 3B A9 68      mov d, _ship_y ; $ship_y
9535   40C6 2A            mov b, [d]
9536   40C7 38 00 00      mov c, 0
9537   40CA FD AB         swp b
9538   40CC D8            push b
9539   40CD 07 72 04      call FROM_FIXED00
9540   40D0 51 02 00      add sp, 2
9541   40D3             ; --- END FUNCTION CALL
9542   40D3 FD AB         swp b
9543   40D5 D8            push b
9544   40D6 3B 8C 68      mov d, _quad_x ; $quad_x
9545   40D9 2A            mov b, [d]
9546   40DA 38 00 00      mov c, 0
9547   40DD FD AB         swp b
9548   40DF D8            push b
9549   40E0 3B 8A 68      mov d, _quad_y ; $quad_y
9550   40E3 2A            mov b, [d]
9551   40E4 38 00 00      mov c, 0
9552   40E7 FD AB         swp b
9553   40E9 D8            push b
9554   40EA 26 7F 79      mov b, _s139 ; "Direction/Distance Calculator\n You are at quadrant %d,%d sector %d,%d\n\n Please enter initial X coordinate: "
9555   40ED FD AB         swp b
9556   40EF D8            push b
9557   40F0 07 2C 5B      call printf
9558   40F3 51 0A 00      add sp, 10
9559   40F6             ; --- END FUNCTION CALL
9560   40F6             ; c1 = TO_FIXED00(input_int()); 
9561   40F6 FA FF FF      lea d, [bp + -1] ; $c1
9562   40F9 DA            push d
9563   40FA             ; --- START FUNCTION CALL
9564   40FA             ; --- START FUNCTION CALL
9565   40FA 07 D9 07      call input_int
9566   40FD FD AB         swp b
9567   40FF D8            push b
9568   4100 07 54 04      call TO_FIXED00
9569   4103 51 02 00      add sp, 2
9570   4106             ; --- END FUNCTION CALL
9571   4106 E7            pop d
9572   4107 FD 43         mov [d], b
9573   4109             ; if (c1 < 0 || c1 > 900 ) 
9574   4109             _if232_cond:
9575   4109 FA FF FF      lea d, [bp + -1] ; $c1
9576   410C 2A            mov b, [d]
9577   410D 38 00 00      mov c, 0
9578   4110             ; --- START RELATIONAL
9579   4110 D7            push a
9580   4111 11            mov a, b
9581   4112 FD 2E 00 00   mov32 cb, $00000000
9581   4116 00 00 
9582   4118 B0            cmp a, b
9583   4119 FD 73         slt ; < (signed)
9584   411B E4            pop a
9585   411C             ; --- END RELATIONAL
9586   411C             ; --- START LOGICAL OR
9587   411C D7            push a
9588   411D 11            mov a, b
9589   411E FA FF FF      lea d, [bp + -1] ; $c1
9590   4121 2A            mov b, [d]
9591   4122 38 00 00      mov c, 0
9592   4125             ; --- START RELATIONAL
9593   4125 D7            push a
9594   4126 11            mov a, b
9595   4127 FD 2E 84 03   mov32 cb, $00000384
9595   412B 00 00 
9596   412D B0            cmp a, b
9597   412E FD 7F         sgt ; >
9598   4130 E4            pop a
9599   4131             ; --- END RELATIONAL
9600   4131 FD A8         sor a, b ; ||
9601   4133 E4            pop a
9602   4134             ; --- END LOGICAL OR
9603   4134 C0 00 00      cmp b, 0
9604   4137 C6 3F 41      je _if232_exit
9605   413A             _if232_TRUE:
9606   413A             ; return; 
9607   413A F9            leave
9608   413B 09            ret
9609   413C 0A 3F 41      jmp _if232_exit
9610   413F             _if232_exit:
9611   413F             ; puts("Please enter initial Y coordinate: "); 
9612   413F             ; --- START FUNCTION CALL
9613   413F 26 EB 79      mov b, _s140 ; "Please enter initial Y coordinate: "
9614   4142 FD AB         swp b
9615   4144 D8            push b
9616   4145 07 19 64      call puts
9617   4148 51 02 00      add sp, 2
9618   414B             ; --- END FUNCTION CALL
9619   414B             ; a = TO_FIXED00(input_int()); 
9620   414B FA FD FF      lea d, [bp + -3] ; $a
9621   414E DA            push d
9622   414F             ; --- START FUNCTION CALL
9623   414F             ; --- START FUNCTION CALL
9624   414F 07 D9 07      call input_int
9625   4152 FD AB         swp b
9626   4154 D8            push b
9627   4155 07 54 04      call TO_FIXED00
9628   4158 51 02 00      add sp, 2
9629   415B             ; --- END FUNCTION CALL
9630   415B E7            pop d
9631   415C FD 43         mov [d], b
9632   415E             ; if (a < 0 || a > 900) 
9633   415E             _if233_cond:
9634   415E FA FD FF      lea d, [bp + -3] ; $a
9635   4161 2A            mov b, [d]
9636   4162 38 00 00      mov c, 0
9637   4165             ; --- START RELATIONAL
9638   4165 D7            push a
9639   4166 11            mov a, b
9640   4167 FD 2E 00 00   mov32 cb, $00000000
9640   416B 00 00 
9641   416D B0            cmp a, b
9642   416E FD 73         slt ; < (signed)
9643   4170 E4            pop a
9644   4171             ; --- END RELATIONAL
9645   4171             ; --- START LOGICAL OR
9646   4171 D7            push a
9647   4172 11            mov a, b
9648   4173 FA FD FF      lea d, [bp + -3] ; $a
9649   4176 2A            mov b, [d]
9650   4177 38 00 00      mov c, 0
9651   417A             ; --- START RELATIONAL
9652   417A D7            push a
9653   417B 11            mov a, b
9654   417C FD 2E 84 03   mov32 cb, $00000384
9654   4180 00 00 
9655   4182 B0            cmp a, b
9656   4183 FD 7F         sgt ; >
9657   4185 E4            pop a
9658   4186             ; --- END RELATIONAL
9659   4186 FD A8         sor a, b ; ||
9660   4188 E4            pop a
9661   4189             ; --- END LOGICAL OR
9662   4189 C0 00 00      cmp b, 0
9663   418C C6 94 41      je _if233_exit
9664   418F             _if233_TRUE:
9665   418F             ; return; 
9666   418F F9            leave
9667   4190 09            ret
9668   4191 0A 94 41      jmp _if233_exit
9669   4194             _if233_exit:
9670   4194             ; puts("Please enter final X coordinate: "); 
9671   4194             ; --- START FUNCTION CALL
9672   4194 26 0F 7A      mov b, _s141 ; "Please enter final X coordinate: "
9673   4197 FD AB         swp b
9674   4199 D8            push b
9675   419A 07 19 64      call puts
9676   419D 51 02 00      add sp, 2
9677   41A0             ; --- END FUNCTION CALL
9678   41A0             ; w1 = TO_FIXED00(input_int()); 
9679   41A0 FA FB FF      lea d, [bp + -5] ; $w1
9680   41A3 DA            push d
9681   41A4             ; --- START FUNCTION CALL
9682   41A4             ; --- START FUNCTION CALL
9683   41A4 07 D9 07      call input_int
9684   41A7 FD AB         swp b
9685   41A9 D8            push b
9686   41AA 07 54 04      call TO_FIXED00
9687   41AD 51 02 00      add sp, 2
9688   41B0             ; --- END FUNCTION CALL
9689   41B0 E7            pop d
9690   41B1 FD 43         mov [d], b
9691   41B3             ; if (w1 < 0 || w1 > 900) 
9692   41B3             _if234_cond:
9693   41B3 FA FB FF      lea d, [bp + -5] ; $w1
9694   41B6 2A            mov b, [d]
9695   41B7 38 00 00      mov c, 0
9696   41BA             ; --- START RELATIONAL
9697   41BA D7            push a
9698   41BB 11            mov a, b
9699   41BC FD 2E 00 00   mov32 cb, $00000000
9699   41C0 00 00 
9700   41C2 B0            cmp a, b
9701   41C3 FD 73         slt ; < (signed)
9702   41C5 E4            pop a
9703   41C6             ; --- END RELATIONAL
9704   41C6             ; --- START LOGICAL OR
9705   41C6 D7            push a
9706   41C7 11            mov a, b
9707   41C8 FA FB FF      lea d, [bp + -5] ; $w1
9708   41CB 2A            mov b, [d]
9709   41CC 38 00 00      mov c, 0
9710   41CF             ; --- START RELATIONAL
9711   41CF D7            push a
9712   41D0 11            mov a, b
9713   41D1 FD 2E 84 03   mov32 cb, $00000384
9713   41D5 00 00 
9714   41D7 B0            cmp a, b
9715   41D8 FD 7F         sgt ; >
9716   41DA E4            pop a
9717   41DB             ; --- END RELATIONAL
9718   41DB FD A8         sor a, b ; ||
9719   41DD E4            pop a
9720   41DE             ; --- END LOGICAL OR
9721   41DE C0 00 00      cmp b, 0
9722   41E1 C6 E9 41      je _if234_exit
9723   41E4             _if234_TRUE:
9724   41E4             ; return; 
9725   41E4 F9            leave
9726   41E5 09            ret
9727   41E6 0A E9 41      jmp _if234_exit
9728   41E9             _if234_exit:
9729   41E9             ; puts("Please enter final Y coordinate: "); 
9730   41E9             ; --- START FUNCTION CALL
9731   41E9 26 31 7A      mov b, _s142 ; "Please enter final Y coordinate: "
9732   41EC FD AB         swp b
9733   41EE D8            push b
9734   41EF 07 19 64      call puts
9735   41F2 51 02 00      add sp, 2
9736   41F5             ; --- END FUNCTION CALL
9737   41F5             ; x = TO_FIXED00(input_int()); 
9738   41F5 FA F9 FF      lea d, [bp + -7] ; $x
9739   41F8 DA            push d
9740   41F9             ; --- START FUNCTION CALL
9741   41F9             ; --- START FUNCTION CALL
9742   41F9 07 D9 07      call input_int
9743   41FC FD AB         swp b
9744   41FE D8            push b
9745   41FF 07 54 04      call TO_FIXED00
9746   4202 51 02 00      add sp, 2
9747   4205             ; --- END FUNCTION CALL
9748   4205 E7            pop d
9749   4206 FD 43         mov [d], b
9750   4208             ; if (x < 0 || x > 900) 
9751   4208             _if235_cond:
9752   4208 FA F9 FF      lea d, [bp + -7] ; $x
9753   420B 2A            mov b, [d]
9754   420C 38 00 00      mov c, 0
9755   420F             ; --- START RELATIONAL
9756   420F D7            push a
9757   4210 11            mov a, b
9758   4211 FD 2E 00 00   mov32 cb, $00000000
9758   4215 00 00 
9759   4217 B0            cmp a, b
9760   4218 FD 73         slt ; < (signed)
9761   421A E4            pop a
9762   421B             ; --- END RELATIONAL
9763   421B             ; --- START LOGICAL OR
9764   421B D7            push a
9765   421C 11            mov a, b
9766   421D FA F9 FF      lea d, [bp + -7] ; $x
9767   4220 2A            mov b, [d]
9768   4221 38 00 00      mov c, 0
9769   4224             ; --- START RELATIONAL
9770   4224 D7            push a
9771   4225 11            mov a, b
9772   4226 FD 2E 84 03   mov32 cb, $00000384
9772   422A 00 00 
9773   422C B0            cmp a, b
9774   422D FD 7F         sgt ; >
9775   422F E4            pop a
9776   4230             ; --- END RELATIONAL
9777   4230 FD A8         sor a, b ; ||
9778   4232 E4            pop a
9779   4233             ; --- END LOGICAL OR
9780   4233 C0 00 00      cmp b, 0
9781   4236 C6 3E 42      je _if235_exit
9782   4239             _if235_TRUE:
9783   4239             ; return; 
9784   4239 F9            leave
9785   423A 09            ret
9786   423B 0A 3E 42      jmp _if235_exit
9787   423E             _if235_exit:
9788   423E             ; compute_vector(w1, x, c1, a); 
9789   423E             ; --- START FUNCTION CALL
9790   423E FA FD FF      lea d, [bp + -3] ; $a
9791   4241 2A            mov b, [d]
9792   4242 38 00 00      mov c, 0
9793   4245 FD AB         swp b
9794   4247 D8            push b
9795   4248 FA FF FF      lea d, [bp + -1] ; $c1
9796   424B 2A            mov b, [d]
9797   424C 38 00 00      mov c, 0
9798   424F FD AB         swp b
9799   4251 D8            push b
9800   4252 FA F9 FF      lea d, [bp + -7] ; $x
9801   4255 2A            mov b, [d]
9802   4256 38 00 00      mov c, 0
9803   4259 FD AB         swp b
9804   425B D8            push b
9805   425C FA FB FF      lea d, [bp + -5] ; $w1
9806   425F 2A            mov b, [d]
9807   4260 38 00 00      mov c, 0
9808   4263 FD AB         swp b
9809   4265 D8            push b
9810   4266 07 CE 44      call compute_vector
9811   4269 51 08 00      add sp, 8
9812   426C             ; --- END FUNCTION CALL
9813   426C F9            leave
9814   426D 09            ret
9815   426E             
9816   426E             galaxy_map:
9817   426E F8 00 00      enter 0 ; (push bp; mov bp, sp)
9818   4271             ; int i, j, j0; 
9819   4271 52 02 00      sub sp, 2
9820   4274 52 02 00      sub sp, 2
9821   4277 52 02 00      sub sp, 2
9822   427A             ; printf("\n                   The Galaxy\n\n"); 
9823   427A             ; --- START FUNCTION CALL
9824   427A 26 53 7A      mov b, _s143 ; "\n                   The Galaxy\n\n"
9825   427D FD AB         swp b
9826   427F D8            push b
9827   4280 07 2C 5B      call printf
9828   4283 51 02 00      add sp, 2
9829   4286             ; --- END FUNCTION CALL
9830   4286             ; printf("    1     2     3     4     5     6     7     8\n"); 
9831   4286             ; --- START FUNCTION CALL
9832   4286 26 74 7A      mov b, _s144 ; "    1     2     3     4     5     6     7     8\n"
9833   4289 FD AB         swp b
9834   428B D8            push b
9835   428C 07 2C 5B      call printf
9836   428F 51 02 00      add sp, 2
9837   4292             ; --- END FUNCTION CALL
9838   4292             ; for (i = 1; i <= 8; i++) { 
9839   4292             _for236_init:
9840   4292 FA FF FF      lea d, [bp + -1] ; $i
9841   4295 DA            push d
9842   4296 FD 2E 01 00   mov32 cb, $00000001
9842   429A 00 00 
9843   429C E7            pop d
9844   429D FD 43         mov [d], b
9845   429F             _for236_cond:
9846   429F FA FF FF      lea d, [bp + -1] ; $i
9847   42A2 2A            mov b, [d]
9848   42A3 38 00 00      mov c, 0
9849   42A6             ; --- START RELATIONAL
9850   42A6 D7            push a
9851   42A7 11            mov a, b
9852   42A8 FD 2E 08 00   mov32 cb, $00000008
9852   42AC 00 00 
9853   42AE B0            cmp a, b
9854   42AF FD 74         sle ; <= (signed)
9855   42B1 E4            pop a
9856   42B2             ; --- END RELATIONAL
9857   42B2 C0 00 00      cmp b, 0
9858   42B5 C6 BC 44      je _for236_exit
9859   42B8             _for236_block:
9860   42B8             ; printf("%s%d ", gm_1, i); 
9861   42B8             ; --- START FUNCTION CALL
9862   42B8 FA FF FF      lea d, [bp + -1] ; $i
9863   42BB 2A            mov b, [d]
9864   42BC 38 00 00      mov c, 0
9865   42BF FD AB         swp b
9866   42C1 D8            push b
9867   42C2 3B 6C 6A      mov d, _gm_1 ; $gm_1
9868   42C5 2A            mov b, [d]
9869   42C6 38 00 00      mov c, 0
9870   42C9 FD AB         swp b
9871   42CB D8            push b
9872   42CC 26 A5 7A      mov b, _s145 ; "%s%d "
9873   42CF FD AB         swp b
9874   42D1 D8            push b
9875   42D2 07 2C 5B      call printf
9876   42D5 51 06 00      add sp, 6
9877   42D8             ; --- END FUNCTION CALL
9878   42D8             ; quadrant_name(1, i, 1); 
9879   42D8             ; --- START FUNCTION CALL
9880   42D8 FD 2E 01 00   mov32 cb, $00000001
9880   42DC 00 00 
9881   42DE DD            push bl
9882   42DF FA FF FF      lea d, [bp + -1] ; $i
9883   42E2 2A            mov b, [d]
9884   42E3 38 00 00      mov c, 0
9885   42E6 DD            push bl
9886   42E7 FD 2E 01 00   mov32 cb, $00000001
9886   42EB 00 00 
9887   42ED DD            push bl
9888   42EE 07 EB 54      call quadrant_name
9889   42F1 51 03 00      add sp, 3
9890   42F4             ; --- END FUNCTION CALL
9891   42F4             ; j0 = (int) (11 - (strlen(quadname) / 2)); 
9892   42F4 FA FB FF      lea d, [bp + -5] ; $j0
9893   42F7 DA            push d
9894   42F8 FD 2E 0B 00   mov32 cb, $0000000b
9894   42FC 00 00 
9895   42FE             ; --- START TERMS
9896   42FE D7            push a
9897   42FF 11            mov a, b
9898   4300             ; --- START FUNCTION CALL
9899   4300 3B EF 68      mov d, _quadname_data ; $quadname
9900   4303 2D            mov b, d
9901   4304 38 00 00      mov c, 0
9902   4307 FD AB         swp b
9903   4309 D8            push b
9904   430A 07 D1 5A      call strlen
9905   430D 51 02 00      add sp, 2
9906   4310             ; --- END FUNCTION CALL
9907   4310             ; --- START FACTORS
9908   4310 D7            push a
9909   4311 FD D8         push g
9910   4313 11            mov a, b
9911   4314 FD 7A         mov g, c
9912   4316 FD 2E 02 00   mov32 cb, $00000002
9912   431A 00 00 
9913   431C AE            div a, b
9914   431D FD 38         mov c, g
9915   431F 27            mov b, a
9916   4320 FD F1         pop g
9917   4322 E4            pop a
9918   4323             ; --- END FACTORS
9919   4323 60            sub a, b
9920   4324 27            mov b, a
9921   4325 E4            pop a
9922   4326             ; --- END TERMS
9923   4326 E7            pop d
9924   4327 FD 43         mov [d], b
9925   4329             ; for (j = 0; j < j0; j++) 
9926   4329             _for245_init:
9927   4329 FA FD FF      lea d, [bp + -3] ; $j
9928   432C DA            push d
9929   432D FD 2E 00 00   mov32 cb, $00000000
9929   4331 00 00 
9930   4333 E7            pop d
9931   4334 FD 43         mov [d], b
9932   4336             _for245_cond:
9933   4336 FA FD FF      lea d, [bp + -3] ; $j
9934   4339 2A            mov b, [d]
9935   433A 38 00 00      mov c, 0
9936   433D             ; --- START RELATIONAL
9937   433D D7            push a
9938   433E 11            mov a, b
9939   433F FA FB FF      lea d, [bp + -5] ; $j0
9940   4342 2A            mov b, [d]
9941   4343 38 00 00      mov c, 0
9942   4346 B0            cmp a, b
9943   4347 FD 73         slt ; < (signed)
9944   4349 E4            pop a
9945   434A             ; --- END RELATIONAL
9946   434A C0 00 00      cmp b, 0
9947   434D C6 70 43      je _for245_exit
9948   4350             _for245_block:
9949   4350             ; putchar(' '); 
9950   4350             ; --- START FUNCTION CALL
9951   4350 FD 2E 20 00   mov32 cb, $00000020
9951   4354 00 00 
9952   4356 DD            push bl
9953   4357 07 A6 5F      call putchar
9954   435A 51 01 00      add sp, 1
9955   435D             ; --- END FUNCTION CALL
9956   435D             _for245_update:
9957   435D FA FD FF      lea d, [bp + -3] ; $j
9958   4360 2A            mov b, [d]
9959   4361 38 00 00      mov c, 0
9960   4364 11            mov a, b
9961   4365 FD 77         inc b
9962   4367 FA FD FF      lea d, [bp + -3] ; $j
9963   436A FD 43         mov [d], b
9964   436C 27            mov b, a
9965   436D 0A 36 43      jmp _for245_cond
9966   4370             _for245_exit:
9967   4370             ; puts(quadname); 
9968   4370             ; --- START FUNCTION CALL
9969   4370 3B EF 68      mov d, _quadname_data ; $quadname
9970   4373 2D            mov b, d
9971   4374 38 00 00      mov c, 0
9972   4377 FD AB         swp b
9973   4379 D8            push b
9974   437A 07 19 64      call puts
9975   437D 51 02 00      add sp, 2
9976   4380             ; --- END FUNCTION CALL
9977   4380             ; for (j = 0; j < j0; j++) 
9978   4380             _for246_init:
9979   4380 FA FD FF      lea d, [bp + -3] ; $j
9980   4383 DA            push d
9981   4384 FD 2E 00 00   mov32 cb, $00000000
9981   4388 00 00 
9982   438A E7            pop d
9983   438B FD 43         mov [d], b
9984   438D             _for246_cond:
9985   438D FA FD FF      lea d, [bp + -3] ; $j
9986   4390 2A            mov b, [d]
9987   4391 38 00 00      mov c, 0
9988   4394             ; --- START RELATIONAL
9989   4394 D7            push a
9990   4395 11            mov a, b
9991   4396 FA FB FF      lea d, [bp + -5] ; $j0
9992   4399 2A            mov b, [d]
9993   439A 38 00 00      mov c, 0
9994   439D B0            cmp a, b
9995   439E FD 73         slt ; < (signed)
9996   43A0 E4            pop a
9997   43A1             ; --- END RELATIONAL
9998   43A1 C0 00 00      cmp b, 0
9999   43A4 C6 C7 43      je _for246_exit
10000  43A7             _for246_block:
10001  43A7             ; putchar(' '); 
10002  43A7             ; --- START FUNCTION CALL
10003  43A7 FD 2E 20 00   mov32 cb, $00000020
10003  43AB 00 00 
10004  43AD DD            push bl
10005  43AE 07 A6 5F      call putchar
10006  43B1 51 01 00      add sp, 1
10007  43B4             ; --- END FUNCTION CALL
10008  43B4             _for246_update:
10009  43B4 FA FD FF      lea d, [bp + -3] ; $j
10010  43B7 2A            mov b, [d]
10011  43B8 38 00 00      mov c, 0
10012  43BB 11            mov a, b
10013  43BC FD 77         inc b
10014  43BE FA FD FF      lea d, [bp + -3] ; $j
10015  43C1 FD 43         mov [d], b
10016  43C3 27            mov b, a
10017  43C4 0A 8D 43      jmp _for246_cond
10018  43C7             _for246_exit:
10019  43C7             ; if (!(strlen(quadname) % 2)) 
10020  43C7             _if247_cond:
10021  43C7             ; --- START FUNCTION CALL
10022  43C7 3B EF 68      mov d, _quadname_data ; $quadname
10023  43CA 2D            mov b, d
10024  43CB 38 00 00      mov c, 0
10025  43CE FD AB         swp b
10026  43D0 D8            push b
10027  43D1 07 D1 5A      call strlen
10028  43D4 51 02 00      add sp, 2
10029  43D7             ; --- END FUNCTION CALL
10030  43D7             ; --- START FACTORS
10031  43D7 D7            push a
10032  43D8 FD D8         push g
10033  43DA 11            mov a, b
10034  43DB FD 7A         mov g, c
10035  43DD FD 2E 02 00   mov32 cb, $00000002
10035  43E1 00 00 
10036  43E3 AE            div a, b ; 
10037  43E4 11            mov a, b
10038  43E5 FD 38         mov c, g
10039  43E7 27            mov b, a
10040  43E8 FD F1         pop g
10041  43EA E4            pop a
10042  43EB             ; --- END FACTORS
10043  43EB C0 00 00      cmp b, 0
10044  43EE C6 01 44      je _if247_exit
10045  43F1             _if247_TRUE:
10046  43F1             ; putchar(' '); 
10047  43F1             ; --- START FUNCTION CALL
10048  43F1 FD 2E 20 00   mov32 cb, $00000020
10048  43F5 00 00 
10049  43F7 DD            push bl
10050  43F8 07 A6 5F      call putchar
10051  43FB 51 01 00      add sp, 1
10052  43FE             ; --- END FUNCTION CALL
10053  43FE 0A 01 44      jmp _if247_exit
10054  4401             _if247_exit:
10055  4401             ; quadrant_name(1, i, 5); 
10056  4401             ; --- START FUNCTION CALL
10057  4401 FD 2E 05 00   mov32 cb, $00000005
10057  4405 00 00 
10058  4407 DD            push bl
10059  4408 FA FF FF      lea d, [bp + -1] ; $i
10060  440B 2A            mov b, [d]
10061  440C 38 00 00      mov c, 0
10062  440F DD            push bl
10063  4410 FD 2E 01 00   mov32 cb, $00000001
10063  4414 00 00 
10064  4416 DD            push bl
10065  4417 07 EB 54      call quadrant_name
10066  441A 51 03 00      add sp, 3
10067  441D             ; --- END FUNCTION CALL
10068  441D             ; j0 = (int) (12 - (strlen(quadname) / 2)); 
10069  441D FA FB FF      lea d, [bp + -5] ; $j0
10070  4420 DA            push d
10071  4421 FD 2E 0C 00   mov32 cb, $0000000c
10071  4425 00 00 
10072  4427             ; --- START TERMS
10073  4427 D7            push a
10074  4428 11            mov a, b
10075  4429             ; --- START FUNCTION CALL
10076  4429 3B EF 68      mov d, _quadname_data ; $quadname
10077  442C 2D            mov b, d
10078  442D 38 00 00      mov c, 0
10079  4430 FD AB         swp b
10080  4432 D8            push b
10081  4433 07 D1 5A      call strlen
10082  4436 51 02 00      add sp, 2
10083  4439             ; --- END FUNCTION CALL
10084  4439             ; --- START FACTORS
10085  4439 D7            push a
10086  443A FD D8         push g
10087  443C 11            mov a, b
10088  443D FD 7A         mov g, c
10089  443F FD 2E 02 00   mov32 cb, $00000002
10089  4443 00 00 
10090  4445 AE            div a, b
10091  4446 FD 38         mov c, g
10092  4448 27            mov b, a
10093  4449 FD F1         pop g
10094  444B E4            pop a
10095  444C             ; --- END FACTORS
10096  444C 60            sub a, b
10097  444D 27            mov b, a
10098  444E E4            pop a
10099  444F             ; --- END TERMS
10100  444F E7            pop d
10101  4450 FD 43         mov [d], b
10102  4452             ; for (j = 0; j < j0; j++) 
10103  4452             _for260_init:
10104  4452 FA FD FF      lea d, [bp + -3] ; $j
10105  4455 DA            push d
10106  4456 FD 2E 00 00   mov32 cb, $00000000
10106  445A 00 00 
10107  445C E7            pop d
10108  445D FD 43         mov [d], b
10109  445F             _for260_cond:
10110  445F FA FD FF      lea d, [bp + -3] ; $j
10111  4462 2A            mov b, [d]
10112  4463 38 00 00      mov c, 0
10113  4466             ; --- START RELATIONAL
10114  4466 D7            push a
10115  4467 11            mov a, b
10116  4468 FA FB FF      lea d, [bp + -5] ; $j0
10117  446B 2A            mov b, [d]
10118  446C 38 00 00      mov c, 0
10119  446F B0            cmp a, b
10120  4470 FD 73         slt ; < (signed)
10121  4472 E4            pop a
10122  4473             ; --- END RELATIONAL
10123  4473 C0 00 00      cmp b, 0
10124  4476 C6 99 44      je _for260_exit
10125  4479             _for260_block:
10126  4479             ; putchar(' '); 
10127  4479             ; --- START FUNCTION CALL
10128  4479 FD 2E 20 00   mov32 cb, $00000020
10128  447D 00 00 
10129  447F DD            push bl
10130  4480 07 A6 5F      call putchar
10131  4483 51 01 00      add sp, 1
10132  4486             ; --- END FUNCTION CALL
10133  4486             _for260_update:
10134  4486 FA FD FF      lea d, [bp + -3] ; $j
10135  4489 2A            mov b, [d]
10136  448A 38 00 00      mov c, 0
10137  448D 11            mov a, b
10138  448E FD 77         inc b
10139  4490 FA FD FF      lea d, [bp + -3] ; $j
10140  4493 FD 43         mov [d], b
10141  4495 27            mov b, a
10142  4496 0A 5F 44      jmp _for260_cond
10143  4499             _for260_exit:
10144  4499             ; puts(quadname); 
10145  4499             ; --- START FUNCTION CALL
10146  4499 3B EF 68      mov d, _quadname_data ; $quadname
10147  449C 2D            mov b, d
10148  449D 38 00 00      mov c, 0
10149  44A0 FD AB         swp b
10150  44A2 D8            push b
10151  44A3 07 19 64      call puts
10152  44A6 51 02 00      add sp, 2
10153  44A9             ; --- END FUNCTION CALL
10154  44A9             _for236_update:
10155  44A9 FA FF FF      lea d, [bp + -1] ; $i
10156  44AC 2A            mov b, [d]
10157  44AD 38 00 00      mov c, 0
10158  44B0 11            mov a, b
10159  44B1 FD 77         inc b
10160  44B3 FA FF FF      lea d, [bp + -1] ; $i
10161  44B6 FD 43         mov [d], b
10162  44B8 27            mov b, a
10163  44B9 0A 9F 42      jmp _for236_cond
10164  44BC             _for236_exit:
10165  44BC             ; puts(gm_1); 
10166  44BC             ; --- START FUNCTION CALL
10167  44BC 3B 6C 6A      mov d, _gm_1 ; $gm_1
10168  44BF 2A            mov b, [d]
10169  44C0 38 00 00      mov c, 0
10170  44C3 FD AB         swp b
10171  44C5 D8            push b
10172  44C6 07 19 64      call puts
10173  44C9 51 02 00      add sp, 2
10174  44CC             ; --- END FUNCTION CALL
10175  44CC F9            leave
10176  44CD 09            ret
10177  44CE             
10178  44CE             compute_vector:
10179  44CE F8 00 00      enter 0 ; (push bp; mov bp, sp)
10180  44D1             ; long unsigned int         xl, al; 
10181  44D1 52 04 00      sub sp, 4
10182  44D4 52 04 00      sub sp, 4
10183  44D7             ; puts("  DIRECTION = "); 
10184  44D7             ; --- START FUNCTION CALL
10185  44D7 26 AB 7A      mov b, _s146 ; "  DIRECTION = "
10186  44DA FD AB         swp b
10187  44DC D8            push b
10188  44DD 07 19 64      call puts
10189  44E0 51 02 00      add sp, 2
10190  44E3             ; --- END FUNCTION CALL
10191  44E3             ; x = x - a; 
10192  44E3 FA 07 00      lea d, [bp + 7] ; $x
10193  44E6 DA            push d
10194  44E7 FA 07 00      lea d, [bp + 7] ; $x
10195  44EA 2A            mov b, [d]
10196  44EB 38 00 00      mov c, 0
10197  44EE             ; --- START TERMS
10198  44EE D7            push a
10199  44EF 11            mov a, b
10200  44F0 FA 0B 00      lea d, [bp + 11] ; $a
10201  44F3 2A            mov b, [d]
10202  44F4 38 00 00      mov c, 0
10203  44F7 60            sub a, b
10204  44F8 27            mov b, a
10205  44F9 E4            pop a
10206  44FA             ; --- END TERMS
10207  44FA E7            pop d
10208  44FB FD 43         mov [d], b
10209  44FD             ; a = c1 - w1; 
10210  44FD FA 0B 00      lea d, [bp + 11] ; $a
10211  4500 DA            push d
10212  4501 FA 09 00      lea d, [bp + 9] ; $c1
10213  4504 2A            mov b, [d]
10214  4505 38 00 00      mov c, 0
10215  4508             ; --- START TERMS
10216  4508 D7            push a
10217  4509 11            mov a, b
10218  450A FA 05 00      lea d, [bp + 5] ; $w1
10219  450D 2A            mov b, [d]
10220  450E 38 00 00      mov c, 0
10221  4511 60            sub a, b
10222  4512 27            mov b, a
10223  4513 E4            pop a
10224  4514             ; --- END TERMS
10225  4514 E7            pop d
10226  4515 FD 43         mov [d], b
10227  4517             ; xl = abs(x); 
10228  4517 FA FD FF      lea d, [bp + -3] ; $xl
10229  451A DA            push d
10230  451B             ; --- START FUNCTION CALL
10231  451B FA 07 00      lea d, [bp + 7] ; $x
10232  451E 2A            mov b, [d]
10233  451F 38 00 00      mov c, 0
10234  4522 FD AB         swp b
10235  4524 D8            push b
10236  4525 07 FA 65      call abs
10237  4528 51 02 00      add sp, 2
10238  452B             ; --- END FUNCTION CALL
10239  452B E7            pop d
10240  452C FD 43         mov [d], b
10241  452E 26 00 00      mov b, 0
10242  4531 FD 44 02 00   mov [d + 2], b
10243  4535             ; al = abs(a); 
10244  4535 FA F9 FF      lea d, [bp + -7] ; $al
10245  4538 DA            push d
10246  4539             ; --- START FUNCTION CALL
10247  4539 FA 0B 00      lea d, [bp + 11] ; $a
10248  453C 2A            mov b, [d]
10249  453D 38 00 00      mov c, 0
10250  4540 FD AB         swp b
10251  4542 D8            push b
10252  4543 07 FA 65      call abs
10253  4546 51 02 00      add sp, 2
10254  4549             ; --- END FUNCTION CALL
10255  4549 E7            pop d
10256  454A FD 43         mov [d], b
10257  454C 26 00 00      mov b, 0
10258  454F FD 44 02 00   mov [d + 2], b
10259  4553             ; if (x < 0) { 
10260  4553             _if261_cond:
10261  4553 FA 07 00      lea d, [bp + 7] ; $x
10262  4556 2A            mov b, [d]
10263  4557 38 00 00      mov c, 0
10264  455A             ; --- START RELATIONAL
10265  455A D7            push a
10266  455B 11            mov a, b
10267  455C FD 2E 00 00   mov32 cb, $00000000
10267  4560 00 00 
10268  4562 B0            cmp a, b
10269  4563 FD 73         slt ; < (signed)
10270  4565 E4            pop a
10271  4566             ; --- END RELATIONAL
10272  4566 C0 00 00      cmp b, 0
10273  4569 C6 BC 47      je _if261_else
10274  456C             _if261_TRUE:
10275  456C             ; if (a > 0) { 
10276  456C             _if262_cond:
10277  456C FA 0B 00      lea d, [bp + 11] ; $a
10278  456F 2A            mov b, [d]
10279  4570 38 00 00      mov c, 0
10280  4573             ; --- START RELATIONAL
10281  4573 D7            push a
10282  4574 11            mov a, b
10283  4575 FD 2E 00 00   mov32 cb, $00000000
10283  4579 00 00 
10284  457B B0            cmp a, b
10285  457C FD 7F         sgt ; >
10286  457E E4            pop a
10287  457F             ; --- END RELATIONAL
10288  457F C0 00 00      cmp b, 0
10289  4582 C6 81 47      je _if262_else
10290  4585             _if262_TRUE:
10291  4585             ; c1 = 300; 
10292  4585 FA 09 00      lea d, [bp + 9] ; $c1
10293  4588 DA            push d
10294  4589 FD 2E 2C 01   mov32 cb, $0000012c
10294  458D 00 00 
10295  458F E7            pop d
10296  4590 FD 43         mov [d], b
10297  4592             ; if (al >= xl) 
10298  4592             _if263_cond:
10299  4592 FA F9 FF      lea d, [bp + -7] ; $al
10300  4595 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10301  4598 FD 39         mov c, b ; And place it into C
10302  459A 2A            mov b, [d] ; Lower Word in B
10303  459B             ; --- START RELATIONAL
10304  459B D7            push a
10305  459C FD D8         push g
10306  459E 11            mov a, b
10307  459F FD 7A         mov g, c
10308  45A1 FA FD FF      lea d, [bp + -3] ; $xl
10309  45A4 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10310  45A7 FD 39         mov c, b ; And place it into C
10311  45A9 2A            mov b, [d] ; Lower Word in B
10312  45AA FD AF         cmp32 ga, cb
10313  45AC FD 82         sgeu
10314  45AE FD F1         pop g
10315  45B0 E4            pop a
10316  45B1             ; --- END RELATIONAL
10317  45B1 C0 00 00      cmp b, 0
10318  45B4 C6 47 46      je _if263_else
10319  45B7             _if263_TRUE:
10320  45B7             ; printf("%s", print100(c1 + ((xl * 100) / al))); 
10321  45B7             ; --- START FUNCTION CALL
10322  45B7             ; --- START FUNCTION CALL
10323  45B7 FA 09 00      lea d, [bp + 9] ; $c1
10324  45BA 2A            mov b, [d]
10325  45BB 38 00 00      mov c, 0
10326  45BE             ; --- START TERMS
10327  45BE D7            push a
10328  45BF 11            mov a, b
10329  45C0 FA FD FF      lea d, [bp + -3] ; $xl
10330  45C3 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10331  45C6 FD 39         mov c, b ; And place it into C
10332  45C8 2A            mov b, [d] ; Lower Word in B
10333  45C9             ; --- START FACTORS
10334  45C9 D7            push a
10335  45CA FD D8         push g
10336  45CC 11            mov a, b
10337  45CD FD 7A         mov g, c
10338  45CF FD 2E 64 00   mov32 cb, $00000064
10338  45D3 00 00 
10339  45D5 D7            push a     ; save left operand
10340  45D6 8E            xor a, b   ; xor sign bits
10341  45D7 FD AA         swp a      ; swap bytes
10342  45D9 83            mov cl, al ; save result of xor into 'dl'
10343  45DA E4            pop a      ; restore left side operator
10344  45DB DF            push cl    ; save result of xor above
10345  45DC FD AA         swp a  
10346  45DE 93 80         test al, $80  
10347  45E0 FD AA         swp a  
10348  45E2 C6 E7 45      jz skip_invert_a_310  
10349  45E5 FD 95          neg a 
10350  45E7             skip_invert_a_310:   
10351  45E7 FD AB         swp b
10352  45E9 FD 93 80      test bl, $80  
10353  45EC FD AB         swp b
10354  45EE C6 F3 45      jz skip_invert_b_310  
10355  45F1 FD 97          neg b 
10356  45F3             skip_invert_b_310:   
10357  45F3 AC            mul a, b ; *
10358  45F4 FD 78         mov g, a
10359  45F6 11            mov a, b
10360  45F7 EA            pop bl
10361  45F8 FD 93 80      test bl, $80
10362  45FB C6 0D 46      jz _same_signs_310
10363  45FE 27            mov b, a
10364  45FF FD 12         mov a, g
10365  4601 95            not a
10366  4602 97            not b
10367  4603 55 01 00      add b, 1
10368  4606 5B 00 00      adc a, 0
10369  4609 39            mov c, a
10370  460A FD 7A         mov g, c
10371  460C 11            mov a, b
10372  460D             _same_signs_310:
10373  460D FD 38         mov c, g
10374  460F 27            mov b, a
10375  4610 FD F1         pop g
10376  4612 E4            pop a
10377  4613             ; --- END FACTORS
10378  4613             ; --- START FACTORS
10379  4613 D7            push a
10380  4614 FD D8         push g
10381  4616 11            mov a, b
10382  4617 FD 7A         mov g, c
10383  4619 FA F9 FF      lea d, [bp + -7] ; $al
10384  461C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10385  461F FD 39         mov c, b ; And place it into C
10386  4621 2A            mov b, [d] ; Lower Word in B
10387  4622 AE            div a, b
10388  4623 FD 38         mov c, g
10389  4625 27            mov b, a
10390  4626 FD F1         pop g
10391  4628 E4            pop a
10392  4629             ; --- END FACTORS
10393  4629 FD 15         add32 cb, ga
10394  462B E4            pop a
10395  462C             ; --- END TERMS
10396  462C FD AB         swp b
10397  462E D8            push b
10398  462F 07 2E 08      call print100
10399  4632 51 02 00      add sp, 2
10400  4635             ; --- END FUNCTION CALL
10401  4635 FD AB         swp b
10402  4637 D8            push b
10403  4638 26 BA 7A      mov b, _s147 ; "%s"
10404  463B FD AB         swp b
10405  463D D8            push b
10406  463E 07 2C 5B      call printf
10407  4641 51 04 00      add sp, 4
10408  4644             ; --- END FUNCTION CALL
10409  4644 0A 35 47      jmp _if263_exit
10410  4647             _if263_else:
10411  4647             ; printf("%s", print100(c1 + ((((xl * 2) - al) * 100)  / xl))); 
10412  4647             ; --- START FUNCTION CALL
10413  4647             ; --- START FUNCTION CALL
10414  4647 FA 09 00      lea d, [bp + 9] ; $c1
10415  464A 2A            mov b, [d]
10416  464B 38 00 00      mov c, 0
10417  464E             ; --- START TERMS
10418  464E D7            push a
10419  464F 11            mov a, b
10420  4650 FA FD FF      lea d, [bp + -3] ; $xl
10421  4653 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10422  4656 FD 39         mov c, b ; And place it into C
10423  4658 2A            mov b, [d] ; Lower Word in B
10424  4659             ; --- START FACTORS
10425  4659 D7            push a
10426  465A FD D8         push g
10427  465C 11            mov a, b
10428  465D FD 7A         mov g, c
10429  465F FD 2E 02 00   mov32 cb, $00000002
10429  4663 00 00 
10430  4665 D7            push a     ; save left operand
10431  4666 8E            xor a, b   ; xor sign bits
10432  4667 FD AA         swp a      ; swap bytes
10433  4669 83            mov cl, al ; save result of xor into 'dl'
10434  466A E4            pop a      ; restore left side operator
10435  466B DF            push cl    ; save result of xor above
10436  466C FD AA         swp a  
10437  466E 93 80         test al, $80  
10438  4670 FD AA         swp a  
10439  4672 C6 77 46      jz skip_invert_a_485  
10440  4675 FD 95          neg a 
10441  4677             skip_invert_a_485:   
10442  4677 FD AB         swp b
10443  4679 FD 93 80      test bl, $80  
10444  467C FD AB         swp b
10445  467E C6 83 46      jz skip_invert_b_485  
10446  4681 FD 97          neg b 
10447  4683             skip_invert_b_485:   
10448  4683 AC            mul a, b ; *
10449  4684 FD 78         mov g, a
10450  4686 11            mov a, b
10451  4687 EA            pop bl
10452  4688 FD 93 80      test bl, $80
10453  468B C6 9D 46      jz _same_signs_485
10454  468E 27            mov b, a
10455  468F FD 12         mov a, g
10456  4691 95            not a
10457  4692 97            not b
10458  4693 55 01 00      add b, 1
10459  4696 5B 00 00      adc a, 0
10460  4699 39            mov c, a
10461  469A FD 7A         mov g, c
10462  469C 11            mov a, b
10463  469D             _same_signs_485:
10464  469D FD 38         mov c, g
10465  469F 27            mov b, a
10466  46A0 FD F1         pop g
10467  46A2 E4            pop a
10468  46A3             ; --- END FACTORS
10469  46A3             ; --- START TERMS
10470  46A3 D7            push a
10471  46A4 FD D8         push g
10472  46A6 11            mov a, b
10473  46A7 FD 7A         mov g, c
10474  46A9 FA F9 FF      lea d, [bp + -7] ; $al
10475  46AC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10476  46AF FD 39         mov c, b ; And place it into C
10477  46B1 2A            mov b, [d] ; Lower Word in B
10478  46B2 FD 1C         sub32 ga, cb
10479  46B4 27            mov b, a
10480  46B5 FD 38         mov c, g
10481  46B7 FD F1         pop g
10482  46B9 E4            pop a
10483  46BA             ; --- END TERMS
10484  46BA             ; --- START FACTORS
10485  46BA D7            push a
10486  46BB FD D8         push g
10487  46BD 11            mov a, b
10488  46BE FD 7A         mov g, c
10489  46C0 FD 2E 64 00   mov32 cb, $00000064
10489  46C4 00 00 
10490  46C6 D7            push a     ; save left operand
10491  46C7 8E            xor a, b   ; xor sign bits
10492  46C8 FD AA         swp a      ; swap bytes
10493  46CA 83            mov cl, al ; save result of xor into 'dl'
10494  46CB E4            pop a      ; restore left side operator
10495  46CC DF            push cl    ; save result of xor above
10496  46CD FD AA         swp a  
10497  46CF 93 80         test al, $80  
10498  46D1 FD AA         swp a  
10499  46D3 C6 D8 46      jz skip_invert_a_486  
10500  46D6 FD 95          neg a 
10501  46D8             skip_invert_a_486:   
10502  46D8 FD AB         swp b
10503  46DA FD 93 80      test bl, $80  
10504  46DD FD AB         swp b
10505  46DF C6 E4 46      jz skip_invert_b_486  
10506  46E2 FD 97          neg b 
10507  46E4             skip_invert_b_486:   
10508  46E4 AC            mul a, b ; *
10509  46E5 FD 78         mov g, a
10510  46E7 11            mov a, b
10511  46E8 EA            pop bl
10512  46E9 FD 93 80      test bl, $80
10513  46EC C6 FE 46      jz _same_signs_486
10514  46EF 27            mov b, a
10515  46F0 FD 12         mov a, g
10516  46F2 95            not a
10517  46F3 97            not b
10518  46F4 55 01 00      add b, 1
10519  46F7 5B 00 00      adc a, 0
10520  46FA 39            mov c, a
10521  46FB FD 7A         mov g, c
10522  46FD 11            mov a, b
10523  46FE             _same_signs_486:
10524  46FE FD 38         mov c, g
10525  4700 27            mov b, a
10526  4701 FD F1         pop g
10527  4703 E4            pop a
10528  4704             ; --- END FACTORS
10529  4704             ; --- START FACTORS
10530  4704 D7            push a
10531  4705 FD D8         push g
10532  4707 11            mov a, b
10533  4708 FD 7A         mov g, c
10534  470A FA FD FF      lea d, [bp + -3] ; $xl
10535  470D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10536  4710 FD 39         mov c, b ; And place it into C
10537  4712 2A            mov b, [d] ; Lower Word in B
10538  4713 AE            div a, b
10539  4714 FD 38         mov c, g
10540  4716 27            mov b, a
10541  4717 FD F1         pop g
10542  4719 E4            pop a
10543  471A             ; --- END FACTORS
10544  471A FD 15         add32 cb, ga
10545  471C E4            pop a
10546  471D             ; --- END TERMS
10547  471D FD AB         swp b
10548  471F D8            push b
10549  4720 07 2E 08      call print100
10550  4723 51 02 00      add sp, 2
10551  4726             ; --- END FUNCTION CALL
10552  4726 FD AB         swp b
10553  4728 D8            push b
10554  4729 26 BA 7A      mov b, _s147 ; "%s"
10555  472C FD AB         swp b
10556  472E D8            push b
10557  472F 07 2C 5B      call printf
10558  4732 51 04 00      add sp, 4
10559  4735             ; --- END FUNCTION CALL
10560  4735             _if263_exit:
10561  4735             ; printf(dist_1, print100((x > a) ? x : a)); 
10562  4735             ; --- START FUNCTION CALL
10563  4735             ; --- START FUNCTION CALL
10564  4735             _ternary491_cond:
10565  4735 FA 07 00      lea d, [bp + 7] ; $x
10566  4738 2A            mov b, [d]
10567  4739 38 00 00      mov c, 0
10568  473C             ; --- START RELATIONAL
10569  473C D7            push a
10570  473D 11            mov a, b
10571  473E FA 0B 00      lea d, [bp + 11] ; $a
10572  4741 2A            mov b, [d]
10573  4742 38 00 00      mov c, 0
10574  4745 B0            cmp a, b
10575  4746 FD 7F         sgt ; >
10576  4748 E4            pop a
10577  4749             ; --- END RELATIONAL
10578  4749 C0 00 00      cmp b, 0
10579  474C C6 59 47      je _ternary491_FALSE
10580  474F             _ternary491_TRUE:
10581  474F FA 07 00      lea d, [bp + 7] ; $x
10582  4752 2A            mov b, [d]
10583  4753 38 00 00      mov c, 0
10584  4756 0A 60 47      jmp _ternary491_exit
10585  4759             _ternary491_FALSE:
10586  4759 FA 0B 00      lea d, [bp + 11] ; $a
10587  475C 2A            mov b, [d]
10588  475D 38 00 00      mov c, 0
10589  4760             _ternary491_exit:
10590  4760 FD AB         swp b
10591  4762 D8            push b
10592  4763 07 2E 08      call print100
10593  4766 51 02 00      add sp, 2
10594  4769             ; --- END FUNCTION CALL
10595  4769 FD AB         swp b
10596  476B D8            push b
10597  476C 3B 80 6A      mov d, _dist_1 ; $dist_1
10598  476F 2A            mov b, [d]
10599  4770 38 00 00      mov c, 0
10600  4773 FD AB         swp b
10601  4775 D8            push b
10602  4776 07 2C 5B      call printf
10603  4779 51 04 00      add sp, 4
10604  477C             ; --- END FUNCTION CALL
10605  477C             ; return; 
10606  477C F9            leave
10607  477D 09            ret
10608  477E 0A B9 47      jmp _if262_exit
10609  4781             _if262_else:
10610  4781             ; if (x != 0){ 
10611  4781             _if492_cond:
10612  4781 FA 07 00      lea d, [bp + 7] ; $x
10613  4784 2A            mov b, [d]
10614  4785 38 00 00      mov c, 0
10615  4788             ; --- START RELATIONAL
10616  4788 D7            push a
10617  4789 11            mov a, b
10618  478A FD 2E 00 00   mov32 cb, $00000000
10618  478E 00 00 
10619  4790 B0            cmp a, b
10620  4791 FD 72         sneq ; !=
10621  4793 E4            pop a
10622  4794             ; --- END RELATIONAL
10623  4794 C0 00 00      cmp b, 0
10624  4797 C6 AC 47      je _if492_else
10625  479A             _if492_TRUE:
10626  479A             ; c1 = 500; 
10627  479A FA 09 00      lea d, [bp + 9] ; $c1
10628  479D DA            push d
10629  479E FD 2E F4 01   mov32 cb, $000001f4
10629  47A2 00 00 
10630  47A4 E7            pop d
10631  47A5 FD 43         mov [d], b
10632  47A7             ; return; 
10633  47A7 F9            leave
10634  47A8 09            ret
10635  47A9 0A B9 47      jmp _if492_exit
10636  47AC             _if492_else:
10637  47AC             ; c1 = 700; 
10638  47AC FA 09 00      lea d, [bp + 9] ; $c1
10639  47AF DA            push d
10640  47B0 FD 2E BC 02   mov32 cb, $000002bc
10640  47B4 00 00 
10641  47B6 E7            pop d
10642  47B7 FD 43         mov [d], b
10643  47B9             _if492_exit:
10644  47B9             _if262_exit:
10645  47B9 0A 3D 4A      jmp _if261_exit
10646  47BC             _if261_else:
10647  47BC             ; if (a < 0) { 
10648  47BC             _if493_cond:
10649  47BC FA 0B 00      lea d, [bp + 11] ; $a
10650  47BF 2A            mov b, [d]
10651  47C0 38 00 00      mov c, 0
10652  47C3             ; --- START RELATIONAL
10653  47C3 D7            push a
10654  47C4 11            mov a, b
10655  47C5 FD 2E 00 00   mov32 cb, $00000000
10655  47C9 00 00 
10656  47CB B0            cmp a, b
10657  47CC FD 73         slt ; < (signed)
10658  47CE E4            pop a
10659  47CF             ; --- END RELATIONAL
10660  47CF C0 00 00      cmp b, 0
10661  47D2 C6 E5 47      je _if493_else
10662  47D5             _if493_TRUE:
10663  47D5             ; c1 = 700; 
10664  47D5 FA 09 00      lea d, [bp + 9] ; $c1
10665  47D8 DA            push d
10666  47D9 FD 2E BC 02   mov32 cb, $000002bc
10666  47DD 00 00 
10667  47DF E7            pop d
10668  47E0 FD 43         mov [d], b
10669  47E2 0A 3D 4A      jmp _if493_exit
10670  47E5             _if493_else:
10671  47E5             ; if (x > 0) { 
10672  47E5             _if494_cond:
10673  47E5 FA 07 00      lea d, [bp + 7] ; $x
10674  47E8 2A            mov b, [d]
10675  47E9 38 00 00      mov c, 0
10676  47EC             ; --- START RELATIONAL
10677  47EC D7            push a
10678  47ED 11            mov a, b
10679  47EE FD 2E 00 00   mov32 cb, $00000000
10679  47F2 00 00 
10680  47F4 B0            cmp a, b
10681  47F5 FD 7F         sgt ; >
10682  47F7 E4            pop a
10683  47F8             ; --- END RELATIONAL
10684  47F8 C0 00 00      cmp b, 0
10685  47FB C6 0E 48      je _if494_else
10686  47FE             _if494_TRUE:
10687  47FE             ; c1 = 100; 
10688  47FE FA 09 00      lea d, [bp + 9] ; $c1
10689  4801 DA            push d
10690  4802 FD 2E 64 00   mov32 cb, $00000064
10690  4806 00 00 
10691  4808 E7            pop d
10692  4809 FD 43         mov [d], b
10693  480B 0A 3D 4A      jmp _if494_exit
10694  480E             _if494_else:
10695  480E             ; if (a == 0) { 
10696  480E             _if495_cond:
10697  480E FA 0B 00      lea d, [bp + 11] ; $a
10698  4811 2A            mov b, [d]
10699  4812 38 00 00      mov c, 0
10700  4815             ; --- START RELATIONAL
10701  4815 D7            push a
10702  4816 11            mov a, b
10703  4817 FD 2E 00 00   mov32 cb, $00000000
10703  481B 00 00 
10704  481D B0            cmp a, b
10705  481E FD 71         seq ; ==
10706  4820 E4            pop a
10707  4821             ; --- END RELATIONAL
10708  4821 C0 00 00      cmp b, 0
10709  4824 C6 37 48      je _if495_else
10710  4827             _if495_TRUE:
10711  4827             ; c1 = 500; 
10712  4827 FA 09 00      lea d, [bp + 9] ; $c1
10713  482A DA            push d
10714  482B FD 2E F4 01   mov32 cb, $000001f4
10714  482F 00 00 
10715  4831 E7            pop d
10716  4832 FD 43         mov [d], b
10717  4834 0A 3D 4A      jmp _if495_exit
10718  4837             _if495_else:
10719  4837             ; c1 = 100; 
10720  4837 FA 09 00      lea d, [bp + 9] ; $c1
10721  483A DA            push d
10722  483B FD 2E 64 00   mov32 cb, $00000064
10722  483F 00 00 
10723  4841 E7            pop d
10724  4842 FD 43         mov [d], b
10725  4844             ; if (al <= xl) 
10726  4844             _if496_cond:
10727  4844 FA F9 FF      lea d, [bp + -7] ; $al
10728  4847 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10729  484A FD 39         mov c, b ; And place it into C
10730  484C 2A            mov b, [d] ; Lower Word in B
10731  484D             ; --- START RELATIONAL
10732  484D D7            push a
10733  484E FD D8         push g
10734  4850 11            mov a, b
10735  4851 FD 7A         mov g, c
10736  4853 FA FD FF      lea d, [bp + -3] ; $xl
10737  4856 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10738  4859 FD 39         mov c, b ; And place it into C
10739  485B 2A            mov b, [d] ; Lower Word in B
10740  485C FD AF         cmp32 ga, cb
10741  485E FD 76         sleu
10742  4860 FD F1         pop g
10743  4862 E4            pop a
10744  4863             ; --- END RELATIONAL
10745  4863 C0 00 00      cmp b, 0
10746  4866 C6 F9 48      je _if496_else
10747  4869             _if496_TRUE:
10748  4869             ; printf("%s", print100(c1 + ((al * 100) / xl))); 
10749  4869             ; --- START FUNCTION CALL
10750  4869             ; --- START FUNCTION CALL
10751  4869 FA 09 00      lea d, [bp + 9] ; $c1
10752  486C 2A            mov b, [d]
10753  486D 38 00 00      mov c, 0
10754  4870             ; --- START TERMS
10755  4870 D7            push a
10756  4871 11            mov a, b
10757  4872 FA F9 FF      lea d, [bp + -7] ; $al
10758  4875 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10759  4878 FD 39         mov c, b ; And place it into C
10760  487A 2A            mov b, [d] ; Lower Word in B
10761  487B             ; --- START FACTORS
10762  487B D7            push a
10763  487C FD D8         push g
10764  487E 11            mov a, b
10765  487F FD 7A         mov g, c
10766  4881 FD 2E 64 00   mov32 cb, $00000064
10766  4885 00 00 
10767  4887 D7            push a     ; save left operand
10768  4888 8E            xor a, b   ; xor sign bits
10769  4889 FD AA         swp a      ; swap bytes
10770  488B 83            mov cl, al ; save result of xor into 'dl'
10771  488C E4            pop a      ; restore left side operator
10772  488D DF            push cl    ; save result of xor above
10773  488E FD AA         swp a  
10774  4890 93 80         test al, $80  
10775  4892 FD AA         swp a  
10776  4894 C6 99 48      jz skip_invert_a_543  
10777  4897 FD 95          neg a 
10778  4899             skip_invert_a_543:   
10779  4899 FD AB         swp b
10780  489B FD 93 80      test bl, $80  
10781  489E FD AB         swp b
10782  48A0 C6 A5 48      jz skip_invert_b_543  
10783  48A3 FD 97          neg b 
10784  48A5             skip_invert_b_543:   
10785  48A5 AC            mul a, b ; *
10786  48A6 FD 78         mov g, a
10787  48A8 11            mov a, b
10788  48A9 EA            pop bl
10789  48AA FD 93 80      test bl, $80
10790  48AD C6 BF 48      jz _same_signs_543
10791  48B0 27            mov b, a
10792  48B1 FD 12         mov a, g
10793  48B3 95            not a
10794  48B4 97            not b
10795  48B5 55 01 00      add b, 1
10796  48B8 5B 00 00      adc a, 0
10797  48BB 39            mov c, a
10798  48BC FD 7A         mov g, c
10799  48BE 11            mov a, b
10800  48BF             _same_signs_543:
10801  48BF FD 38         mov c, g
10802  48C1 27            mov b, a
10803  48C2 FD F1         pop g
10804  48C4 E4            pop a
10805  48C5             ; --- END FACTORS
10806  48C5             ; --- START FACTORS
10807  48C5 D7            push a
10808  48C6 FD D8         push g
10809  48C8 11            mov a, b
10810  48C9 FD 7A         mov g, c
10811  48CB FA FD FF      lea d, [bp + -3] ; $xl
10812  48CE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10813  48D1 FD 39         mov c, b ; And place it into C
10814  48D3 2A            mov b, [d] ; Lower Word in B
10815  48D4 AE            div a, b
10816  48D5 FD 38         mov c, g
10817  48D7 27            mov b, a
10818  48D8 FD F1         pop g
10819  48DA E4            pop a
10820  48DB             ; --- END FACTORS
10821  48DB FD 15         add32 cb, ga
10822  48DD E4            pop a
10823  48DE             ; --- END TERMS
10824  48DE FD AB         swp b
10825  48E0 D8            push b
10826  48E1 07 2E 08      call print100
10827  48E4 51 02 00      add sp, 2
10828  48E7             ; --- END FUNCTION CALL
10829  48E7 FD AB         swp b
10830  48E9 D8            push b
10831  48EA 26 BA 7A      mov b, _s147 ; "%s"
10832  48ED FD AB         swp b
10833  48EF D8            push b
10834  48F0 07 2C 5B      call printf
10835  48F3 51 04 00      add sp, 4
10836  48F6             ; --- END FUNCTION CALL
10837  48F6 0A E7 49      jmp _if496_exit
10838  48F9             _if496_else:
10839  48F9             ; printf("%s", print100(c1 + ((((al * 2) - xl) * 100) / al))); 
10840  48F9             ; --- START FUNCTION CALL
10841  48F9             ; --- START FUNCTION CALL
10842  48F9 FA 09 00      lea d, [bp + 9] ; $c1
10843  48FC 2A            mov b, [d]
10844  48FD 38 00 00      mov c, 0
10845  4900             ; --- START TERMS
10846  4900 D7            push a
10847  4901 11            mov a, b
10848  4902 FA F9 FF      lea d, [bp + -7] ; $al
10849  4905 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10850  4908 FD 39         mov c, b ; And place it into C
10851  490A 2A            mov b, [d] ; Lower Word in B
10852  490B             ; --- START FACTORS
10853  490B D7            push a
10854  490C FD D8         push g
10855  490E 11            mov a, b
10856  490F FD 7A         mov g, c
10857  4911 FD 2E 02 00   mov32 cb, $00000002
10857  4915 00 00 
10858  4917 D7            push a     ; save left operand
10859  4918 8E            xor a, b   ; xor sign bits
10860  4919 FD AA         swp a      ; swap bytes
10861  491B 83            mov cl, al ; save result of xor into 'dl'
10862  491C E4            pop a      ; restore left side operator
10863  491D DF            push cl    ; save result of xor above
10864  491E FD AA         swp a  
10865  4920 93 80         test al, $80  
10866  4922 FD AA         swp a  
10867  4924 C6 29 49      jz skip_invert_a_718  
10868  4927 FD 95          neg a 
10869  4929             skip_invert_a_718:   
10870  4929 FD AB         swp b
10871  492B FD 93 80      test bl, $80  
10872  492E FD AB         swp b
10873  4930 C6 35 49      jz skip_invert_b_718  
10874  4933 FD 97          neg b 
10875  4935             skip_invert_b_718:   
10876  4935 AC            mul a, b ; *
10877  4936 FD 78         mov g, a
10878  4938 11            mov a, b
10879  4939 EA            pop bl
10880  493A FD 93 80      test bl, $80
10881  493D C6 4F 49      jz _same_signs_718
10882  4940 27            mov b, a
10883  4941 FD 12         mov a, g
10884  4943 95            not a
10885  4944 97            not b
10886  4945 55 01 00      add b, 1
10887  4948 5B 00 00      adc a, 0
10888  494B 39            mov c, a
10889  494C FD 7A         mov g, c
10890  494E 11            mov a, b
10891  494F             _same_signs_718:
10892  494F FD 38         mov c, g
10893  4951 27            mov b, a
10894  4952 FD F1         pop g
10895  4954 E4            pop a
10896  4955             ; --- END FACTORS
10897  4955             ; --- START TERMS
10898  4955 D7            push a
10899  4956 FD D8         push g
10900  4958 11            mov a, b
10901  4959 FD 7A         mov g, c
10902  495B FA FD FF      lea d, [bp + -3] ; $xl
10903  495E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10904  4961 FD 39         mov c, b ; And place it into C
10905  4963 2A            mov b, [d] ; Lower Word in B
10906  4964 FD 1C         sub32 ga, cb
10907  4966 27            mov b, a
10908  4967 FD 38         mov c, g
10909  4969 FD F1         pop g
10910  496B E4            pop a
10911  496C             ; --- END TERMS
10912  496C             ; --- START FACTORS
10913  496C D7            push a
10914  496D FD D8         push g
10915  496F 11            mov a, b
10916  4970 FD 7A         mov g, c
10917  4972 FD 2E 64 00   mov32 cb, $00000064
10917  4976 00 00 
10918  4978 D7            push a     ; save left operand
10919  4979 8E            xor a, b   ; xor sign bits
10920  497A FD AA         swp a      ; swap bytes
10921  497C 83            mov cl, al ; save result of xor into 'dl'
10922  497D E4            pop a      ; restore left side operator
10923  497E DF            push cl    ; save result of xor above
10924  497F FD AA         swp a  
10925  4981 93 80         test al, $80  
10926  4983 FD AA         swp a  
10927  4985 C6 8A 49      jz skip_invert_a_719  
10928  4988 FD 95          neg a 
10929  498A             skip_invert_a_719:   
10930  498A FD AB         swp b
10931  498C FD 93 80      test bl, $80  
10932  498F FD AB         swp b
10933  4991 C6 96 49      jz skip_invert_b_719  
10934  4994 FD 97          neg b 
10935  4996             skip_invert_b_719:   
10936  4996 AC            mul a, b ; *
10937  4997 FD 78         mov g, a
10938  4999 11            mov a, b
10939  499A EA            pop bl
10940  499B FD 93 80      test bl, $80
10941  499E C6 B0 49      jz _same_signs_719
10942  49A1 27            mov b, a
10943  49A2 FD 12         mov a, g
10944  49A4 95            not a
10945  49A5 97            not b
10946  49A6 55 01 00      add b, 1
10947  49A9 5B 00 00      adc a, 0
10948  49AC 39            mov c, a
10949  49AD FD 7A         mov g, c
10950  49AF 11            mov a, b
10951  49B0             _same_signs_719:
10952  49B0 FD 38         mov c, g
10953  49B2 27            mov b, a
10954  49B3 FD F1         pop g
10955  49B5 E4            pop a
10956  49B6             ; --- END FACTORS
10957  49B6             ; --- START FACTORS
10958  49B6 D7            push a
10959  49B7 FD D8         push g
10960  49B9 11            mov a, b
10961  49BA FD 7A         mov g, c
10962  49BC FA F9 FF      lea d, [bp + -7] ; $al
10963  49BF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10964  49C2 FD 39         mov c, b ; And place it into C
10965  49C4 2A            mov b, [d] ; Lower Word in B
10966  49C5 AE            div a, b
10967  49C6 FD 38         mov c, g
10968  49C8 27            mov b, a
10969  49C9 FD F1         pop g
10970  49CB E4            pop a
10971  49CC             ; --- END FACTORS
10972  49CC FD 15         add32 cb, ga
10973  49CE E4            pop a
10974  49CF             ; --- END TERMS
10975  49CF FD AB         swp b
10976  49D1 D8            push b
10977  49D2 07 2E 08      call print100
10978  49D5 51 02 00      add sp, 2
10979  49D8             ; --- END FUNCTION CALL
10980  49D8 FD AB         swp b
10981  49DA D8            push b
10982  49DB 26 BA 7A      mov b, _s147 ; "%s"
10983  49DE FD AB         swp b
10984  49E0 D8            push b
10985  49E1 07 2C 5B      call printf
10986  49E4 51 04 00      add sp, 4
10987  49E7             ; --- END FUNCTION CALL
10988  49E7             _if496_exit:
10989  49E7             ; printf(dist_1, print100((xl > al) ? xl : al)); 
10990  49E7             ; --- START FUNCTION CALL
10991  49E7             ; --- START FUNCTION CALL
10992  49E7             _ternary724_cond:
10993  49E7 FA FD FF      lea d, [bp + -3] ; $xl
10994  49EA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10995  49ED FD 39         mov c, b ; And place it into C
10996  49EF 2A            mov b, [d] ; Lower Word in B
10997  49F0             ; --- START RELATIONAL
10998  49F0 D7            push a
10999  49F1 FD D8         push g
11000  49F3 11            mov a, b
11001  49F4 FD 7A         mov g, c
11002  49F6 FA F9 FF      lea d, [bp + -7] ; $al
11003  49F9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11004  49FC FD 39         mov c, b ; And place it into C
11005  49FE 2A            mov b, [d] ; Lower Word in B
11006  49FF FD AF         cmp32 ga, cb
11007  4A01 FD 81         sgu
11008  4A03 FD F1         pop g
11009  4A05 E4            pop a
11010  4A06             ; --- END RELATIONAL
11011  4A06 C0 00 00      cmp b, 0
11012  4A09 C6 18 4A      je _ternary724_FALSE
11013  4A0C             _ternary724_TRUE:
11014  4A0C FA FD FF      lea d, [bp + -3] ; $xl
11015  4A0F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11016  4A12 FD 39         mov c, b ; And place it into C
11017  4A14 2A            mov b, [d] ; Lower Word in B
11018  4A15 0A 21 4A      jmp _ternary724_exit
11019  4A18             _ternary724_FALSE:
11020  4A18 FA F9 FF      lea d, [bp + -7] ; $al
11021  4A1B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11022  4A1E FD 39         mov c, b ; And place it into C
11023  4A20 2A            mov b, [d] ; Lower Word in B
11024  4A21             _ternary724_exit:
11025  4A21 FD AB         swp b
11026  4A23 D8            push b
11027  4A24 07 2E 08      call print100
11028  4A27 51 02 00      add sp, 2
11029  4A2A             ; --- END FUNCTION CALL
11030  4A2A FD AB         swp b
11031  4A2C D8            push b
11032  4A2D 3B 80 6A      mov d, _dist_1 ; $dist_1
11033  4A30 2A            mov b, [d]
11034  4A31 38 00 00      mov c, 0
11035  4A34 FD AB         swp b
11036  4A36 D8            push b
11037  4A37 07 2C 5B      call printf
11038  4A3A 51 04 00      add sp, 4
11039  4A3D             ; --- END FUNCTION CALL
11040  4A3D             _if495_exit:
11041  4A3D             _if494_exit:
11042  4A3D             _if493_exit:
11043  4A3D             _if261_exit:
11044  4A3D F9            leave
11045  4A3E 09            ret
11046  4A3F             
11047  4A3F             ship_destroyed:
11048  4A3F F8 00 00      enter 0 ; (push bp; mov bp, sp)
11049  4A42             ; puts("The Enterprise has been destroyed. The Federation will be conquered.\n"); 
11050  4A42             ; --- START FUNCTION CALL
11051  4A42 26 BD 7A      mov b, _s148 ; "The Enterprise has been destroyed. The Federation will be conquered.\n"
11052  4A45 FD AB         swp b
11053  4A47 D8            push b
11054  4A48 07 19 64      call puts
11055  4A4B 51 02 00      add sp, 2
11056  4A4E             ; --- END FUNCTION CALL
11057  4A4E             ; end_of_time(); 
11058  4A4E             ; --- START FUNCTION CALL
11059  4A4E 07 53 4A      call end_of_time
11060  4A51 F9            leave
11061  4A52 09            ret
11062  4A53             
11063  4A53             end_of_time:
11064  4A53 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11065  4A56             ; printf("It is stardate %d.\n\n",  FROM_FIXED(stardate)); 
11066  4A56             ; --- START FUNCTION CALL
11067  4A56             ; --- START FUNCTION CALL
11068  4A56 3B AD 68      mov d, _stardate ; $stardate
11069  4A59 2A            mov b, [d]
11070  4A5A 38 00 00      mov c, 0
11071  4A5D FD AB         swp b
11072  4A5F D8            push b
11073  4A60 07 35 04      call FROM_FIXED
11074  4A63 51 02 00      add sp, 2
11075  4A66             ; --- END FUNCTION CALL
11076  4A66 FD AB         swp b
11077  4A68 D8            push b
11078  4A69 26 03 7B      mov b, _s149 ; "It is stardate %d.\n\n"
11079  4A6C FD AB         swp b
11080  4A6E D8            push b
11081  4A6F 07 2C 5B      call printf
11082  4A72 51 04 00      add sp, 4
11083  4A75             ; --- END FUNCTION CALL
11084  4A75             ; resign_commision(); 
11085  4A75             ; --- START FUNCTION CALL
11086  4A75 07 7A 4A      call resign_commision
11087  4A78 F9            leave
11088  4A79 09            ret
11089  4A7A             
11090  4A7A             resign_commision:
11091  4A7A F8 00 00      enter 0 ; (push bp; mov bp, sp)
11092  4A7D             ; printf("There were %d Klingon Battlecruisers left at the end of your mission.\n\n", klingons_left); 
11093  4A7D             ; --- START FUNCTION CALL
11094  4A7D 3B 87 68      mov d, _klingons_left ; $klingons_left
11095  4A80 32            mov bl, [d]
11096  4A81 A7 00         mov bh, 0
11097  4A83 38 00 00      mov c, 0
11098  4A86 FD AA         swp a
11099  4A88 D8            push b
11100  4A89 26 18 7B      mov b, _s150 ; "There were %d Klingon Battlecruisers left at the end of your mission.\n\n"
11101  4A8C FD AB         swp b
11102  4A8E D8            push b
11103  4A8F 07 2C 5B      call printf
11104  4A92 51 03 00      add sp, 3
11105  4A95             ; --- END FUNCTION CALL
11106  4A95             ; end_of_game(); 
11107  4A95             ; --- START FUNCTION CALL
11108  4A95 07 3B 4B      call end_of_game
11109  4A98 F9            leave
11110  4A99 09            ret
11111  4A9A             
11112  4A9A             won_game:
11113  4A9A F8 00 00      enter 0 ; (push bp; mov bp, sp)
11114  4A9D             ; puts("Congratulations, Captain!  The last Klingon Battle Cruiser\n menacing the Federation has been destoyed.\n"); 
11115  4A9D             ; --- START FUNCTION CALL
11116  4A9D 26 60 7B      mov b, _s151 ; "Congratulations, Captain!  The last Klingon Battle Cruiser\n menacing the Federation has been destoyed.\n"
11117  4AA0 FD AB         swp b
11118  4AA2 D8            push b
11119  4AA3 07 19 64      call puts
11120  4AA6 51 02 00      add sp, 2
11121  4AA9             ; --- END FUNCTION CALL
11122  4AA9             ; if (FROM_FIXED(stardate) - time_start > 0) 
11123  4AA9             _if725_cond:
11124  4AA9             ; --- START FUNCTION CALL
11125  4AA9 3B AD 68      mov d, _stardate ; $stardate
11126  4AAC 2A            mov b, [d]
11127  4AAD 38 00 00      mov c, 0
11128  4AB0 FD AB         swp b
11129  4AB2 D8            push b
11130  4AB3 07 35 04      call FROM_FIXED
11131  4AB6 51 02 00      add sp, 2
11132  4AB9             ; --- END FUNCTION CALL
11133  4AB9             ; --- START TERMS
11134  4AB9 D7            push a
11135  4ABA 11            mov a, b
11136  4ABB 3B 91 68      mov d, _time_start ; $time_start
11137  4ABE 2A            mov b, [d]
11138  4ABF 38 00 00      mov c, 0
11139  4AC2 60            sub a, b
11140  4AC3 27            mov b, a
11141  4AC4 E4            pop a
11142  4AC5             ; --- END TERMS
11143  4AC5             ; --- START RELATIONAL
11144  4AC5 D7            push a
11145  4AC6 11            mov a, b
11146  4AC7 FD 2E 00 00   mov32 cb, $00000000
11146  4ACB 00 00 
11147  4ACD B0            cmp a, b
11148  4ACE FD 81         sgu ; > (unsigned)
11149  4AD0 E4            pop a
11150  4AD1             ; --- END RELATIONAL
11151  4AD1 C0 00 00      cmp b, 0
11152  4AD4 C6 36 4B      je _if725_exit
11153  4AD7             _if725_TRUE:
11154  4AD7             ; printf("Your efficiency rating is %s\n", 
11155  4AD7             ; --- START FUNCTION CALL
11156  4AD7             ; --- START FUNCTION CALL
11157  4AD7             ; --- START FUNCTION CALL
11158  4AD7             ; --- START FUNCTION CALL
11159  4AD7 3B 86 68      mov d, _total_klingons ; $total_klingons
11160  4ADA 32            mov bl, [d]
11161  4ADB A7 00         mov bh, 0
11162  4ADD 38 00 00      mov c, 0
11163  4AE0 FD AB         swp b
11164  4AE2 D8            push b
11165  4AE3 07 54 04      call TO_FIXED00
11166  4AE6 51 02 00      add sp, 2
11167  4AE9             ; --- END FUNCTION CALL
11168  4AE9             ; --- START FACTORS
11169  4AE9 D7            push a
11170  4AEA FD D8         push g
11171  4AEC 11            mov a, b
11172  4AED FD 7A         mov g, c
11173  4AEF             ; --- START FUNCTION CALL
11174  4AEF 3B AD 68      mov d, _stardate ; $stardate
11175  4AF2 2A            mov b, [d]
11176  4AF3 38 00 00      mov c, 0
11177  4AF6 FD AB         swp b
11178  4AF8 D8            push b
11179  4AF9 07 35 04      call FROM_FIXED
11180  4AFC 51 02 00      add sp, 2
11181  4AFF             ; --- END FUNCTION CALL
11182  4AFF             ; --- START TERMS
11183  4AFF D7            push a
11184  4B00 11            mov a, b
11185  4B01 3B 91 68      mov d, _time_start ; $time_start
11186  4B04 2A            mov b, [d]
11187  4B05 38 00 00      mov c, 0
11188  4B08 60            sub a, b
11189  4B09 27            mov b, a
11190  4B0A E4            pop a
11191  4B0B             ; --- END TERMS
11192  4B0B AE            div a, b
11193  4B0C FD 38         mov c, g
11194  4B0E 27            mov b, a
11195  4B0F FD F1         pop g
11196  4B11 E4            pop a
11197  4B12             ; --- END FACTORS
11198  4B12 FD AB         swp b
11199  4B14 D8            push b
11200  4B15 07 60 57      call square00
11201  4B18 51 02 00      add sp, 2
11202  4B1B             ; --- END FUNCTION CALL
11203  4B1B FD AB         swp b
11204  4B1D D8            push b
11205  4B1E 07 2E 08      call print100
11206  4B21 51 02 00      add sp, 2
11207  4B24             ; --- END FUNCTION CALL
11208  4B24 FD AB         swp b
11209  4B26 D8            push b
11210  4B27 26 C8 7B      mov b, _s152 ; "Your efficiency rating is %s\n"
11211  4B2A FD AB         swp b
11212  4B2C D8            push b
11213  4B2D 07 2C 5B      call printf
11214  4B30 51 04 00      add sp, 4
11215  4B33             ; --- END FUNCTION CALL
11216  4B33 0A 36 4B      jmp _if725_exit
11217  4B36             _if725_exit:
11218  4B36             ; end_of_game(); 
11219  4B36             ; --- START FUNCTION CALL
11220  4B36 07 3B 4B      call end_of_game
11221  4B39 F9            leave
11222  4B3A 09            ret
11223  4B3B             
11224  4B3B             end_of_game:
11225  4B3B F8 00 00      enter 0 ; (push bp; mov bp, sp)
11226  4B3E             ; char x[4]; 
11227  4B3E 52 04 00      sub sp, 4
11228  4B41             ; if (starbases_left > 0) { 
11229  4B41             _if742_cond:
11230  4B41 3B B1 67      mov d, _starbases_left ; $starbases_left
11231  4B44 32            mov bl, [d]
11232  4B45 A7 00         mov bh, 0
11233  4B47 38 00 00      mov c, 0
11234  4B4A             ; --- START RELATIONAL
11235  4B4A D7            push a
11236  4B4B 11            mov a, b
11237  4B4C FD 2E 00 00   mov32 cb, $00000000
11237  4B50 00 00 
11238  4B52 B0            cmp a, b
11239  4B53 FD 7F         sgt ; >
11240  4B55 E4            pop a
11241  4B56             ; --- END RELATIONAL
11242  4B56 C0 00 00      cmp b, 0
11243  4B59 C6 A6 4B      je _if742_exit
11244  4B5C             _if742_TRUE:
11245  4B5C             ; puts("The Federation is in need of a new starship commander"); 
11246  4B5C             ; --- START FUNCTION CALL
11247  4B5C 26 E6 7B      mov b, _s153 ; "The Federation is in need of a new starship commander"
11248  4B5F FD AB         swp b
11249  4B61 D8            push b
11250  4B62 07 19 64      call puts
11251  4B65 51 02 00      add sp, 2
11252  4B68             ; --- END FUNCTION CALL
11253  4B68             ; puts(" for a similar mission.\n"); 
11254  4B68             ; --- START FUNCTION CALL
11255  4B68 26 1C 7C      mov b, _s154 ; " for a similar mission.\n"
11256  4B6B FD AB         swp b
11257  4B6D D8            push b
11258  4B6E 07 19 64      call puts
11259  4B71 51 02 00      add sp, 2
11260  4B74             ; --- END FUNCTION CALL
11261  4B74             ; puts("If there is a volunteer, let him step forward and"); 
11262  4B74             ; --- START FUNCTION CALL
11263  4B74 26 35 7C      mov b, _s155 ; "If there is a volunteer, let him step forward and"
11264  4B77 FD AB         swp b
11265  4B79 D8            push b
11266  4B7A 07 19 64      call puts
11267  4B7D 51 02 00      add sp, 2
11268  4B80             ; --- END FUNCTION CALL
11269  4B80             ; puts(" enter 'aye': "); 
11270  4B80             ; --- START FUNCTION CALL
11271  4B80 26 67 7C      mov b, _s156 ; " enter 'aye': "
11272  4B83 FD AB         swp b
11273  4B85 D8            push b
11274  4B86 07 19 64      call puts
11275  4B89 51 02 00      add sp, 2
11276  4B8C             ; --- END FUNCTION CALL
11277  4B8C             ; input(x,4); 
11278  4B8C             ; --- START FUNCTION CALL
11279  4B8C FD 2E 04 00   mov32 cb, $00000004
11279  4B90 00 00 
11280  4B92 DD            push bl
11281  4B93 FA FD FF      lea d, [bp + -3] ; $x
11282  4B96 2D            mov b, d
11283  4B97 38 00 00      mov c, 0
11284  4B9A FD AB         swp b
11285  4B9C D8            push b
11286  4B9D 07 11 05      call input
11287  4BA0 51 03 00      add sp, 3
11288  4BA3             ; --- END FUNCTION CALL
11289  4BA3 0A A6 4B      jmp _if742_exit
11290  4BA6             _if742_exit:
11291  4BA6             ; exit(); 
11292  4BA6             ; --- START FUNCTION CALL
11293  4BA6 07 ED 58      call exit
11294  4BA9 F9            leave
11295  4BAA 09            ret
11296  4BAB             
11297  4BAB             klingons_move:
11298  4BAB F8 00 00      enter 0 ; (push bp; mov bp, sp)
11299  4BAE             ; int i; 
11300  4BAE 52 02 00      sub sp, 2
11301  4BB1             ; struct klingon *k; 
11302  4BB1 52 02 00      sub sp, 2
11303  4BB4             ; k = &kdata; 
11304  4BB4 FA FD FF      lea d, [bp + -3] ; $k
11305  4BB7 DA            push d
11306  4BB8 3B 79 68      mov d, _kdata_data ; $kdata
11307  4BBB 2D            mov b, d
11308  4BBC E7            pop d
11309  4BBD FD 43         mov [d], b
11310  4BBF             ; for (i = 0; i <= 2; i++) { 
11311  4BBF             _for743_init:
11312  4BBF FA FF FF      lea d, [bp + -1] ; $i
11313  4BC2 DA            push d
11314  4BC3 FD 2E 00 00   mov32 cb, $00000000
11314  4BC7 00 00 
11315  4BC9 E7            pop d
11316  4BCA FD 43         mov [d], b
11317  4BCC             _for743_cond:
11318  4BCC FA FF FF      lea d, [bp + -1] ; $i
11319  4BCF 2A            mov b, [d]
11320  4BD0 38 00 00      mov c, 0
11321  4BD3             ; --- START RELATIONAL
11322  4BD3 D7            push a
11323  4BD4 11            mov a, b
11324  4BD5 FD 2E 02 00   mov32 cb, $00000002
11324  4BD9 00 00 
11325  4BDB B0            cmp a, b
11326  4BDC FD 74         sle ; <= (signed)
11327  4BDE E4            pop a
11328  4BDF             ; --- END RELATIONAL
11329  4BDF C0 00 00      cmp b, 0
11330  4BE2 C6 6A 4C      je _for743_exit
11331  4BE5             _for743_block:
11332  4BE5             ; if (k->energy > 0) { 
11333  4BE5             _if744_cond:
11334  4BE5 FA FD FF      lea d, [bp + -3] ; $k
11335  4BE8 FD 2A         mov d, [d]
11336  4BEA 58 02 00      add d, 2
11337  4BED 2A            mov b, [d]
11338  4BEE 38 00 00      mov c, 0
11339  4BF1             ; --- START RELATIONAL
11340  4BF1 D7            push a
11341  4BF2 11            mov a, b
11342  4BF3 FD 2E 00 00   mov32 cb, $00000000
11342  4BF7 00 00 
11343  4BF9 B0            cmp a, b
11344  4BFA FD 7F         sgt ; >
11345  4BFC E4            pop a
11346  4BFD             ; --- END RELATIONAL
11347  4BFD C0 00 00      cmp b, 0
11348  4C00 C6 45 4C      je _if744_exit
11349  4C03             _if744_TRUE:
11350  4C03             ; wipe_klingon(k); 
11351  4C03             ; --- START FUNCTION CALL
11352  4C03 FA FD FF      lea d, [bp + -3] ; $k
11353  4C06 2A            mov b, [d]
11354  4C07 38 00 00      mov c, 0
11355  4C0A FD AB         swp b
11356  4C0C D8            push b
11357  4C0D 07 0C 2A      call wipe_klingon
11358  4C10 51 02 00      add sp, 2
11359  4C13             ; --- END FUNCTION CALL
11360  4C13             ; find_set_empty_place(	3         , k->y, k->x); 
11361  4C13             ; --- START FUNCTION CALL
11362  4C13 FA FD FF      lea d, [bp + -3] ; $k
11363  4C16 FD 2A         mov d, [d]
11364  4C18 58 01 00      add d, 1
11365  4C1B 32            mov bl, [d]
11366  4C1C A7 00         mov bh, 0
11367  4C1E 38 00 00      mov c, 0
11368  4C21 FD AB         swp b
11369  4C23 D8            push b
11370  4C24 FA FD FF      lea d, [bp + -3] ; $k
11371  4C27 FD 2A         mov d, [d]
11372  4C29 58 00 00      add d, 0
11373  4C2C 32            mov bl, [d]
11374  4C2D A7 00         mov bh, 0
11375  4C2F 38 00 00      mov c, 0
11376  4C32 FD AB         swp b
11377  4C34 D8            push b
11378  4C35 FD 2E 03 00   mov32 cb, $00000003
11378  4C39 00 00 
11379  4C3B DD            push bl
11380  4C3C 07 9B 53      call find_set_empty_place
11381  4C3F 51 05 00      add sp, 5
11382  4C42             ; --- END FUNCTION CALL
11383  4C42 0A 45 4C      jmp _if744_exit
11384  4C45             _if744_exit:
11385  4C45             ; k++; 
11386  4C45 FA FD FF      lea d, [bp + -3] ; $k
11387  4C48 2A            mov b, [d]
11388  4C49 38 00 00      mov c, 0
11389  4C4C 11            mov a, b
11390  4C4D FD 77         inc b
11391  4C4F FD 77         inc b
11392  4C51 FA FD FF      lea d, [bp + -3] ; $k
11393  4C54 FD 43         mov [d], b
11394  4C56 27            mov b, a
11395  4C57             _for743_update:
11396  4C57 FA FF FF      lea d, [bp + -1] ; $i
11397  4C5A 2A            mov b, [d]
11398  4C5B 38 00 00      mov c, 0
11399  4C5E 11            mov a, b
11400  4C5F FD 77         inc b
11401  4C61 FA FF FF      lea d, [bp + -1] ; $i
11402  4C64 FD 43         mov [d], b
11403  4C66 27            mov b, a
11404  4C67 0A CC 4B      jmp _for743_cond
11405  4C6A             _for743_exit:
11406  4C6A             ; klingons_shoot(); 
11407  4C6A             ; --- START FUNCTION CALL
11408  4C6A 07 6F 4C      call klingons_shoot
11409  4C6D F9            leave
11410  4C6E 09            ret
11411  4C6F             
11412  4C6F             klingons_shoot:
11413  4C6F F8 00 00      enter 0 ; (push bp; mov bp, sp)
11414  4C72             ; unsigned char        r; 
11415  4C72 52 01 00      sub sp, 1
11416  4C75             ; long unsigned int         h; 
11417  4C75 52 04 00      sub sp, 4
11418  4C78             ; unsigned char        i; 
11419  4C78 52 01 00      sub sp, 1
11420  4C7B             ; struct klingon *k; 
11421  4C7B 52 02 00      sub sp, 2
11422  4C7E             ; long unsigned int         ratio; 
11423  4C7E 52 04 00      sub sp, 4
11424  4C81             ; k = &kdata; 
11425  4C81 FA F9 FF      lea d, [bp + -7] ; $k
11426  4C84 DA            push d
11427  4C85 3B 79 68      mov d, _kdata_data ; $kdata
11428  4C88 2D            mov b, d
11429  4C89 E7            pop d
11430  4C8A FD 43         mov [d], b
11431  4C8C             ; if (klingons <= 0) 
11432  4C8C             _if745_cond:
11433  4C8C 3B 85 68      mov d, _klingons ; $klingons
11434  4C8F 32            mov bl, [d]
11435  4C90 A7 00         mov bh, 0
11436  4C92 38 00 00      mov c, 0
11437  4C95             ; --- START RELATIONAL
11438  4C95 D7            push a
11439  4C96 11            mov a, b
11440  4C97 FD 2E 00 00   mov32 cb, $00000000
11440  4C9B 00 00 
11441  4C9D B0            cmp a, b
11442  4C9E FD 76         sleu ; <= (unsigned)
11443  4CA0 E4            pop a
11444  4CA1             ; --- END RELATIONAL
11445  4CA1 C0 00 00      cmp b, 0
11446  4CA4 C6 AC 4C      je _if745_exit
11447  4CA7             _if745_TRUE:
11448  4CA7             ; return; 
11449  4CA7 F9            leave
11450  4CA8 09            ret
11451  4CA9 0A AC 4C      jmp _if745_exit
11452  4CAC             _if745_exit:
11453  4CAC             ; if (docked) { 
11454  4CAC             _if746_cond:
11455  4CAC 3B D2 67      mov d, _docked ; $docked
11456  4CAF 32            mov bl, [d]
11457  4CB0 A7 00         mov bh, 0
11458  4CB2 38 00 00      mov c, 0
11459  4CB5 C0 00 00      cmp b, 0
11460  4CB8 C6 CC 4C      je _if746_exit
11461  4CBB             _if746_TRUE:
11462  4CBB             ; puts("Starbase shields protect the Enterprise\n"); 
11463  4CBB             ; --- START FUNCTION CALL
11464  4CBB 26 76 7C      mov b, _s157 ; "Starbase shields protect the Enterprise\n"
11465  4CBE FD AB         swp b
11466  4CC0 D8            push b
11467  4CC1 07 19 64      call puts
11468  4CC4 51 02 00      add sp, 2
11469  4CC7             ; --- END FUNCTION CALL
11470  4CC7             ; return; 
11471  4CC7 F9            leave
11472  4CC8 09            ret
11473  4CC9 0A CC 4C      jmp _if746_exit
11474  4CCC             _if746_exit:
11475  4CCC             ; for (i = 0; i <= 2; i++) { 
11476  4CCC             _for747_init:
11477  4CCC FA FB FF      lea d, [bp + -5] ; $i
11478  4CCF DA            push d
11479  4CD0 FD 2E 00 00   mov32 cb, $00000000
11479  4CD4 00 00 
11480  4CD6 E7            pop d
11481  4CD7 FD 3E         mov [d], bl
11482  4CD9             _for747_cond:
11483  4CD9 FA FB FF      lea d, [bp + -5] ; $i
11484  4CDC 32            mov bl, [d]
11485  4CDD A7 00         mov bh, 0
11486  4CDF 38 00 00      mov c, 0
11487  4CE2             ; --- START RELATIONAL
11488  4CE2 D7            push a
11489  4CE3 11            mov a, b
11490  4CE4 FD 2E 02 00   mov32 cb, $00000002
11490  4CE8 00 00 
11491  4CEA B0            cmp a, b
11492  4CEB FD 76         sleu ; <= (unsigned)
11493  4CED E4            pop a
11494  4CEE             ; --- END RELATIONAL
11495  4CEE C0 00 00      cmp b, 0
11496  4CF1 C6 53 50      je _for747_exit
11497  4CF4             _for747_block:
11498  4CF4             ; if (k->energy > 0) { 
11499  4CF4             _if748_cond:
11500  4CF4 FA F9 FF      lea d, [bp + -7] ; $k
11501  4CF7 FD 2A         mov d, [d]
11502  4CF9 58 02 00      add d, 2
11503  4CFC 2A            mov b, [d]
11504  4CFD 38 00 00      mov c, 0
11505  4D00             ; --- START RELATIONAL
11506  4D00 D7            push a
11507  4D01 11            mov a, b
11508  4D02 FD 2E 00 00   mov32 cb, $00000000
11508  4D06 00 00 
11509  4D08 B0            cmp a, b
11510  4D09 FD 7F         sgt ; >
11511  4D0B E4            pop a
11512  4D0C             ; --- END RELATIONAL
11513  4D0C C0 00 00      cmp b, 0
11514  4D0F C6 2C 50      je _if748_exit
11515  4D12             _if748_TRUE:
11516  4D12             ; h = k->energy * (200UL + get_rand(100)); 
11517  4D12 FA FC FF      lea d, [bp + -4] ; $h
11518  4D15 DA            push d
11519  4D16 FA F9 FF      lea d, [bp + -7] ; $k
11520  4D19 FD 2A         mov d, [d]
11521  4D1B 58 02 00      add d, 2
11522  4D1E 2A            mov b, [d]
11523  4D1F 38 00 00      mov c, 0
11524  4D22             ; --- START FACTORS
11525  4D22 D7            push a
11526  4D23 FD D8         push g
11527  4D25 11            mov a, b
11528  4D26 FD 7A         mov g, c
11529  4D28 FD 2E C8 00   mov32 cb, $000000c8
11529  4D2C 00 00 
11530  4D2E             ; --- START TERMS
11531  4D2E D7            push a
11532  4D2F FD D8         push g
11533  4D31 11            mov a, b
11534  4D32 FD 7A         mov g, c
11535  4D34             ; --- START FUNCTION CALL
11536  4D34 FD 2E 64 00   mov32 cb, $00000064
11536  4D38 00 00 
11537  4D3A FD AB         swp b
11538  4D3C D8            push b
11539  4D3D 07 91 04      call get_rand
11540  4D40 51 02 00      add sp, 2
11541  4D43             ; --- END FUNCTION CALL
11542  4D43 FD 15         add32 cb, ga
11543  4D45 FD F1         pop g
11544  4D47 E4            pop a
11545  4D48             ; --- END TERMS
11546  4D48 D7            push a     ; save left operand
11547  4D49 8E            xor a, b   ; xor sign bits
11548  4D4A FD AA         swp a      ; swap bytes
11549  4D4C 83            mov cl, al ; save result of xor into 'dl'
11550  4D4D E4            pop a      ; restore left side operator
11551  4D4E DF            push cl    ; save result of xor above
11552  4D4F FD AA         swp a  
11553  4D51 93 80         test al, $80  
11554  4D53 FD AA         swp a  
11555  4D55 C6 5A 4D      jz skip_invert_a_750  
11556  4D58 FD 95          neg a 
11557  4D5A             skip_invert_a_750:   
11558  4D5A FD AB         swp b
11559  4D5C FD 93 80      test bl, $80  
11560  4D5F FD AB         swp b
11561  4D61 C6 66 4D      jz skip_invert_b_750  
11562  4D64 FD 97          neg b 
11563  4D66             skip_invert_b_750:   
11564  4D66 AC            mul a, b ; *
11565  4D67 FD 78         mov g, a
11566  4D69 11            mov a, b
11567  4D6A EA            pop bl
11568  4D6B FD 93 80      test bl, $80
11569  4D6E C6 80 4D      jz _same_signs_750
11570  4D71 27            mov b, a
11571  4D72 FD 12         mov a, g
11572  4D74 95            not a
11573  4D75 97            not b
11574  4D76 55 01 00      add b, 1
11575  4D79 5B 00 00      adc a, 0
11576  4D7C 39            mov c, a
11577  4D7D FD 7A         mov g, c
11578  4D7F 11            mov a, b
11579  4D80             _same_signs_750:
11580  4D80 FD 38         mov c, g
11581  4D82 27            mov b, a
11582  4D83 FD F1         pop g
11583  4D85 E4            pop a
11584  4D86             ; --- END FACTORS
11585  4D86 E7            pop d
11586  4D87 FD 43         mov [d], b
11587  4D89 28            mov b, c
11588  4D8A FD 44 02 00   mov [d + 2], b
11589  4D8E             ; h =h* 100;	/* Ready for division in fixed */ 
11590  4D8E FA FC FF      lea d, [bp + -4] ; $h
11591  4D91 DA            push d
11592  4D92 FA FC FF      lea d, [bp + -4] ; $h
11593  4D95 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11594  4D98 FD 39         mov c, b ; And place it into C
11595  4D9A 2A            mov b, [d] ; Lower Word in B
11596  4D9B             ; --- START FACTORS
11597  4D9B D7            push a
11598  4D9C FD D8         push g
11599  4D9E 11            mov a, b
11600  4D9F FD 7A         mov g, c
11601  4DA1 FD 2E 64 00   mov32 cb, $00000064
11601  4DA5 00 00 
11602  4DA7 D7            push a     ; save left operand
11603  4DA8 8E            xor a, b   ; xor sign bits
11604  4DA9 FD AA         swp a      ; swap bytes
11605  4DAB 83            mov cl, al ; save result of xor into 'dl'
11606  4DAC E4            pop a      ; restore left side operator
11607  4DAD DF            push cl    ; save result of xor above
11608  4DAE FD AA         swp a  
11609  4DB0 93 80         test al, $80  
11610  4DB2 FD AA         swp a  
11611  4DB4 C6 B9 4D      jz skip_invert_a_752  
11612  4DB7 FD 95          neg a 
11613  4DB9             skip_invert_a_752:   
11614  4DB9 FD AB         swp b
11615  4DBB FD 93 80      test bl, $80  
11616  4DBE FD AB         swp b
11617  4DC0 C6 C5 4D      jz skip_invert_b_752  
11618  4DC3 FD 97          neg b 
11619  4DC5             skip_invert_b_752:   
11620  4DC5 AC            mul a, b ; *
11621  4DC6 FD 78         mov g, a
11622  4DC8 11            mov a, b
11623  4DC9 EA            pop bl
11624  4DCA FD 93 80      test bl, $80
11625  4DCD C6 DF 4D      jz _same_signs_752
11626  4DD0 27            mov b, a
11627  4DD1 FD 12         mov a, g
11628  4DD3 95            not a
11629  4DD4 97            not b
11630  4DD5 55 01 00      add b, 1
11631  4DD8 5B 00 00      adc a, 0
11632  4DDB 39            mov c, a
11633  4DDC FD 7A         mov g, c
11634  4DDE 11            mov a, b
11635  4DDF             _same_signs_752:
11636  4DDF FD 38         mov c, g
11637  4DE1 27            mov b, a
11638  4DE2 FD F1         pop g
11639  4DE4 E4            pop a
11640  4DE5             ; --- END FACTORS
11641  4DE5 E7            pop d
11642  4DE6 FD 43         mov [d], b
11643  4DE8 28            mov b, c
11644  4DE9 FD 44 02 00   mov [d + 2], b
11645  4DED             ; h =h/ distance_to(k); 
11646  4DED FA FC FF      lea d, [bp + -4] ; $h
11647  4DF0 DA            push d
11648  4DF1 FA FC FF      lea d, [bp + -4] ; $h
11649  4DF4 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11650  4DF7 FD 39         mov c, b ; And place it into C
11651  4DF9 2A            mov b, [d] ; Lower Word in B
11652  4DFA             ; --- START FACTORS
11653  4DFA D7            push a
11654  4DFB FD D8         push g
11655  4DFD 11            mov a, b
11656  4DFE FD 7A         mov g, c
11657  4E00             ; --- START FUNCTION CALL
11658  4E00 FA F9 FF      lea d, [bp + -7] ; $k
11659  4E03 2A            mov b, [d]
11660  4E04 38 00 00      mov c, 0
11661  4E07 FD AB         swp b
11662  4E09 D8            push b
11663  4E0A 07 15 58      call distance_to
11664  4E0D 51 02 00      add sp, 2
11665  4E10             ; --- END FUNCTION CALL
11666  4E10 AE            div a, b
11667  4E11 FD 38         mov c, g
11668  4E13 27            mov b, a
11669  4E14 FD F1         pop g
11670  4E16 E4            pop a
11671  4E17             ; --- END FACTORS
11672  4E17 E7            pop d
11673  4E18 FD 43         mov [d], b
11674  4E1A 28            mov b, c
11675  4E1B FD 44 02 00   mov [d + 2], b
11676  4E1F             ; shield = shield - FROM_FIXED00(h); 
11677  4E1F 3B 8E 68      mov d, _shield ; $shield
11678  4E22 DA            push d
11679  4E23 3B 8E 68      mov d, _shield ; $shield
11680  4E26 2A            mov b, [d]
11681  4E27 38 00 00      mov c, 0
11682  4E2A             ; --- START TERMS
11683  4E2A D7            push a
11684  4E2B 11            mov a, b
11685  4E2C             ; --- START FUNCTION CALL
11686  4E2C FA FC FF      lea d, [bp + -4] ; $h
11687  4E2F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11688  4E32 FD 39         mov c, b ; And place it into C
11689  4E34 2A            mov b, [d] ; Lower Word in B
11690  4E35 FD AB         swp b
11691  4E37 D8            push b
11692  4E38 07 72 04      call FROM_FIXED00
11693  4E3B 51 02 00      add sp, 2
11694  4E3E             ; --- END FUNCTION CALL
11695  4E3E 60            sub a, b
11696  4E3F 27            mov b, a
11697  4E40 E4            pop a
11698  4E41             ; --- END TERMS
11699  4E41 E7            pop d
11700  4E42 FD 43         mov [d], b
11701  4E44             ; k->energy = (k->energy * 100) / (300 + get_rand(100)); 
11702  4E44 FA F9 FF      lea d, [bp + -7] ; $k
11703  4E47 FD 2A         mov d, [d]
11704  4E49 58 02 00      add d, 2
11705  4E4C DA            push d
11706  4E4D FA F9 FF      lea d, [bp + -7] ; $k
11707  4E50 FD 2A         mov d, [d]
11708  4E52 58 02 00      add d, 2
11709  4E55 2A            mov b, [d]
11710  4E56 38 00 00      mov c, 0
11711  4E59             ; --- START FACTORS
11712  4E59 D7            push a
11713  4E5A FD D8         push g
11714  4E5C 11            mov a, b
11715  4E5D FD 7A         mov g, c
11716  4E5F FD 2E 64 00   mov32 cb, $00000064
11716  4E63 00 00 
11717  4E65 FD 38         mov c, g
11718  4E67 27            mov b, a
11719  4E68 FD F1         pop g
11720  4E6A E4            pop a
11721  4E6B             ; --- END FACTORS
11722  4E6B             ; --- START FACTORS
11723  4E6B D7            push a
11724  4E6C FD D8         push g
11725  4E6E 11            mov a, b
11726  4E6F FD 7A         mov g, c
11727  4E71 FD 2E 2C 01   mov32 cb, $0000012c
11727  4E75 00 00 
11728  4E77             ; --- START TERMS
11729  4E77 D7            push a
11730  4E78 11            mov a, b
11731  4E79             ; --- START FUNCTION CALL
11732  4E79 FD 2E 64 00   mov32 cb, $00000064
11732  4E7D 00 00 
11733  4E7F FD AB         swp b
11734  4E81 D8            push b
11735  4E82 07 91 04      call get_rand
11736  4E85 51 02 00      add sp, 2
11737  4E88             ; --- END FUNCTION CALL
11738  4E88 56            add b, a
11739  4E89 E4            pop a
11740  4E8A             ; --- END TERMS
11741  4E8A AE            div a, b
11742  4E8B FD 38         mov c, g
11743  4E8D 27            mov b, a
11744  4E8E FD F1         pop g
11745  4E90 E4            pop a
11746  4E91             ; --- END FACTORS
11747  4E91 E7            pop d
11748  4E92 FD 43         mov [d], b
11749  4E94             ; printf("%d unit hit on Enterprise from sector %d, %d\n", (unsigned)FROM_FIXED00(h), k->y, k->x); 
11750  4E94             ; --- START FUNCTION CALL
11751  4E94 FA F9 FF      lea d, [bp + -7] ; $k
11752  4E97 FD 2A         mov d, [d]
11753  4E99 58 01 00      add d, 1
11754  4E9C 32            mov bl, [d]
11755  4E9D A7 00         mov bh, 0
11756  4E9F 38 00 00      mov c, 0
11757  4EA2 FD AA         swp a
11758  4EA4 D8            push b
11759  4EA5 FA F9 FF      lea d, [bp + -7] ; $k
11760  4EA8 FD 2A         mov d, [d]
11761  4EAA 58 00 00      add d, 0
11762  4EAD 32            mov bl, [d]
11763  4EAE A7 00         mov bh, 0
11764  4EB0 38 00 00      mov c, 0
11765  4EB3 FD AA         swp a
11766  4EB5 D8            push b
11767  4EB6 FA FC FF      lea d, [bp + -4] ; $h
11768  4EB9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11769  4EBC FD 39         mov c, b ; And place it into C
11770  4EBE 2A            mov b, [d] ; Lower Word in B
11771  4EBF FD AB         swp b
11772  4EC1 D8            push b
11773  4EC2 26 9F 7C      mov b, _s158 ; "%d unit hit on Enterprise from sector %d, %d\n"
11774  4EC5 FD AB         swp b
11775  4EC7 D8            push b
11776  4EC8 07 2C 5B      call printf
11777  4ECB 51 06 00      add sp, 6
11778  4ECE             ; --- END FUNCTION CALL
11779  4ECE             ; if (shield <= 0) { 
11780  4ECE             _if761_cond:
11781  4ECE 3B 8E 68      mov d, _shield ; $shield
11782  4ED1 2A            mov b, [d]
11783  4ED2 38 00 00      mov c, 0
11784  4ED5             ; --- START RELATIONAL
11785  4ED5 D7            push a
11786  4ED6 11            mov a, b
11787  4ED7 FD 2E 00 00   mov32 cb, $00000000
11787  4EDB 00 00 
11788  4EDD B0            cmp a, b
11789  4EDE FD 74         sle ; <= (signed)
11790  4EE0 E4            pop a
11791  4EE1             ; --- END RELATIONAL
11792  4EE1 C0 00 00      cmp b, 0
11793  4EE4 C6 FA 4E      je _if761_exit
11794  4EE7             _if761_TRUE:
11795  4EE7             ; putchar('\n'); 
11796  4EE7             ; --- START FUNCTION CALL
11797  4EE7 FD 2E 0A 00   mov32 cb, $0000000a
11797  4EEB 00 00 
11798  4EED DD            push bl
11799  4EEE 07 A6 5F      call putchar
11800  4EF1 51 01 00      add sp, 1
11801  4EF4             ; --- END FUNCTION CALL
11802  4EF4             ; ship_destroyed(); 
11803  4EF4             ; --- START FUNCTION CALL
11804  4EF4 07 3F 4A      call ship_destroyed
11805  4EF7 0A FA 4E      jmp _if761_exit
11806  4EFA             _if761_exit:
11807  4EFA             ; printf("    <Shields down to %d units>\n\n", shield); 
11808  4EFA             ; --- START FUNCTION CALL
11809  4EFA 3B 8E 68      mov d, _shield ; $shield
11810  4EFD 2A            mov b, [d]
11811  4EFE 38 00 00      mov c, 0
11812  4F01 FD AB         swp b
11813  4F03 D8            push b
11814  4F04 26 CD 7C      mov b, _s159 ; "    <Shields down to %d units>\n\n"
11815  4F07 FD AB         swp b
11816  4F09 D8            push b
11817  4F0A 07 2C 5B      call printf
11818  4F0D 51 04 00      add sp, 4
11819  4F10             ; --- END FUNCTION CALL
11820  4F10             ; if (h >= 20) { 
11821  4F10             _if762_cond:
11822  4F10 FA FC FF      lea d, [bp + -4] ; $h
11823  4F13 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11824  4F16 FD 39         mov c, b ; And place it into C
11825  4F18 2A            mov b, [d] ; Lower Word in B
11826  4F19             ; --- START RELATIONAL
11827  4F19 D7            push a
11828  4F1A FD D8         push g
11829  4F1C 11            mov a, b
11830  4F1D FD 7A         mov g, c
11831  4F1F FD 2E 14 00   mov32 cb, $00000014
11831  4F23 00 00 
11832  4F25 FD AF         cmp32 ga, cb
11833  4F27 FD 82         sgeu
11834  4F29 FD F1         pop g
11835  4F2B E4            pop a
11836  4F2C             ; --- END RELATIONAL
11837  4F2C C0 00 00      cmp b, 0
11838  4F2F C6 29 50      je _if762_exit
11839  4F32             _if762_TRUE:
11840  4F32             ; ratio = ((int)h)/shield; 
11841  4F32 FA F5 FF      lea d, [bp + -11] ; $ratio
11842  4F35 DA            push d
11843  4F36 FA FC FF      lea d, [bp + -4] ; $h
11844  4F39 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11845  4F3C FD 39         mov c, b ; And place it into C
11846  4F3E 2A            mov b, [d] ; Lower Word in B
11847  4F3F             ; --- START FACTORS
11848  4F3F D7            push a
11849  4F40 FD D8         push g
11850  4F42 11            mov a, b
11851  4F43 FD 7A         mov g, c
11852  4F45 3B 8E 68      mov d, _shield ; $shield
11853  4F48 2A            mov b, [d]
11854  4F49 38 00 00      mov c, 0
11855  4F4C AE            div a, b
11856  4F4D FD 38         mov c, g
11857  4F4F 27            mov b, a
11858  4F50 FD F1         pop g
11859  4F52 E4            pop a
11860  4F53             ; --- END FACTORS
11861  4F53 E7            pop d
11862  4F54 FD 43         mov [d], b
11863  4F56 26 00 00      mov b, 0
11864  4F59 FD 44 02 00   mov [d + 2], b
11865  4F5D             ; if (get_rand(10) <= 6 && ratio > 2) { 
11866  4F5D             _if765_cond:
11867  4F5D             ; --- START FUNCTION CALL
11868  4F5D FD 2E 0A 00   mov32 cb, $0000000a
11868  4F61 00 00 
11869  4F63 FD AB         swp b
11870  4F65 D8            push b
11871  4F66 07 91 04      call get_rand
11872  4F69 51 02 00      add sp, 2
11873  4F6C             ; --- END FUNCTION CALL
11874  4F6C             ; --- START RELATIONAL
11875  4F6C D7            push a
11876  4F6D 11            mov a, b
11877  4F6E FD 2E 06 00   mov32 cb, $00000006
11877  4F72 00 00 
11878  4F74 B0            cmp a, b
11879  4F75 FD 74         sle ; <= (signed)
11880  4F77 E4            pop a
11881  4F78             ; --- END RELATIONAL
11882  4F78             ; --- START LOGICAL AND
11883  4F78 D7            push a
11884  4F79 11            mov a, b
11885  4F7A FA F5 FF      lea d, [bp + -11] ; $ratio
11886  4F7D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11887  4F80 FD 39         mov c, b ; And place it into C
11888  4F82 2A            mov b, [d] ; Lower Word in B
11889  4F83             ; --- START RELATIONAL
11890  4F83 D7            push a
11891  4F84 FD D8         push g
11892  4F86 11            mov a, b
11893  4F87 FD 7A         mov g, c
11894  4F89 FD 2E 02 00   mov32 cb, $00000002
11894  4F8D 00 00 
11895  4F8F FD AF         cmp32 ga, cb
11896  4F91 FD 81         sgu
11897  4F93 FD F1         pop g
11898  4F95 E4            pop a
11899  4F96             ; --- END RELATIONAL
11900  4F96 FD 22 00 00   mov g, 0
11901  4F9A FD B1         sand32 ga, cb
11902  4F9C E4            pop a
11903  4F9D             ; --- END LOGICAL AND
11904  4F9D C0 00 00      cmp b, 0
11905  4FA0 C6 26 50      je _if765_exit
11906  4FA3             _if765_TRUE:
11907  4FA3             ; r = rand8(); 
11908  4FA3 FA 00 00      lea d, [bp + 0] ; $r
11909  4FA6 DA            push d
11910  4FA7             ; --- START FUNCTION CALL
11911  4FA7 07 FD 04      call rand8
11912  4FAA E7            pop d
11913  4FAB FD 3E         mov [d], bl
11914  4FAD             ; damage[r] =damage[r] - ratio + get_rand(50); 
11915  4FAD 3B 95 68      mov d, _damage_data ; $damage
11916  4FB0 D7            push a
11917  4FB1 DA            push d
11918  4FB2 FA 00 00      lea d, [bp + 0] ; $r
11919  4FB5 32            mov bl, [d]
11920  4FB6 A7 00         mov bh, 0
11921  4FB8 38 00 00      mov c, 0
11922  4FBB E7            pop d
11923  4FBC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
11924  4FC0 E4            pop a
11925  4FC1 DA            push d
11926  4FC2 3B 95 68      mov d, _damage_data ; $damage
11927  4FC5 D7            push a
11928  4FC6 DA            push d
11929  4FC7 FA 00 00      lea d, [bp + 0] ; $r
11930  4FCA 32            mov bl, [d]
11931  4FCB A7 00         mov bh, 0
11932  4FCD 38 00 00      mov c, 0
11933  4FD0 E7            pop d
11934  4FD1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
11935  4FD5 E4            pop a
11936  4FD6 2A            mov b, [d]
11937  4FD7 38 00 00      mov c, 0
11938  4FDA             ; --- START TERMS
11939  4FDA D7            push a
11940  4FDB 11            mov a, b
11941  4FDC FA F5 FF      lea d, [bp + -11] ; $ratio
11942  4FDF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
11943  4FE2 FD 39         mov c, b ; And place it into C
11944  4FE4 2A            mov b, [d] ; Lower Word in B
11945  4FE5 FD 1C         sub32 ga, cb
11946  4FE7 27            mov b, a
11947  4FE8 FD 38         mov c, g
11948  4FEA 11            mov a, b
11949  4FEB FD 7A         mov g, c
11950  4FED             ; --- START FUNCTION CALL
11951  4FED FD 2E 32 00   mov32 cb, $00000032
11951  4FF1 00 00 
11952  4FF3 FD AB         swp b
11953  4FF5 D8            push b
11954  4FF6 07 91 04      call get_rand
11955  4FF9 51 02 00      add sp, 2
11956  4FFC             ; --- END FUNCTION CALL
11957  4FFC FD 15         add32 cb, ga
11958  4FFE E4            pop a
11959  4FFF             ; --- END TERMS
11960  4FFF E7            pop d
11961  5000 FD 43         mov [d], b
11962  5002             ; printf("Damage Control reports\n'%s' damaged by hit\n\n", get_device_name(r)); 
11963  5002             ; --- START FUNCTION CALL
11964  5002             ; --- START FUNCTION CALL
11965  5002 FA 00 00      lea d, [bp + 0] ; $r
11966  5005 32            mov bl, [d]
11967  5006 A7 00         mov bh, 0
11968  5008 38 00 00      mov c, 0
11969  500B FD AB         swp b
11970  500D D8            push b
11971  500E 07 8F 54      call get_device_name
11972  5011 51 02 00      add sp, 2
11973  5014             ; --- END FUNCTION CALL
11974  5014 FD AB         swp b
11975  5016 D8            push b
11976  5017 26 EE 7C      mov b, _s160 ; "Damage Control reports\n'%s' damaged by hit\n\n"
11977  501A FD AB         swp b
11978  501C D8            push b
11979  501D 07 2C 5B      call printf
11980  5020 51 04 00      add sp, 4
11981  5023             ; --- END FUNCTION CALL
11982  5023 0A 26 50      jmp _if765_exit
11983  5026             _if765_exit:
11984  5026 0A 29 50      jmp _if762_exit
11985  5029             _if762_exit:
11986  5029 0A 2C 50      jmp _if748_exit
11987  502C             _if748_exit:
11988  502C             ; k++; 
11989  502C FA F9 FF      lea d, [bp + -7] ; $k
11990  502F 2A            mov b, [d]
11991  5030 38 00 00      mov c, 0
11992  5033 11            mov a, b
11993  5034 FD 77         inc b
11994  5036 FD 77         inc b
11995  5038 FA F9 FF      lea d, [bp + -7] ; $k
11996  503B FD 43         mov [d], b
11997  503D 27            mov b, a
11998  503E             _for747_update:
11999  503E FA FB FF      lea d, [bp + -5] ; $i
12000  5041 32            mov bl, [d]
12001  5042 A7 00         mov bh, 0
12002  5044 38 00 00      mov c, 0
12003  5047 FD 77         inc b
12004  5049 FA FB FF      lea d, [bp + -5] ; $i
12005  504C FD 3E         mov [d], bl
12006  504E FD 7D         dec b
12007  5050 0A D9 4C      jmp _for747_cond
12008  5053             _for747_exit:
12009  5053 F9            leave
12010  5054 09            ret
12011  5055             
12012  5055             repair_damage:
12013  5055 F8 00 00      enter 0 ; (push bp; mov bp, sp)
12014  5058             ; int i; 
12015  5058 52 02 00      sub sp, 2
12016  505B             ; int d1; 
12017  505B 52 02 00      sub sp, 2
12018  505E             ; unsigned int         repair_factor;		/* Repair Factor */ 
12019  505E 52 02 00      sub sp, 2
12020  5061             ; repair_factor = warp; 
12021  5061 FA FB FF      lea d, [bp + -5] ; $repair_factor
12022  5064 DA            push d
12023  5065 FA 05 00      lea d, [bp + 5] ; $warp
12024  5068 2A            mov b, [d]
12025  5069 38 00 00      mov c, 0
12026  506C E7            pop d
12027  506D FD 43         mov [d], b
12028  506F             ; if (warp >= 100) 
12029  506F             _if766_cond:
12030  506F FA 05 00      lea d, [bp + 5] ; $warp
12031  5072 2A            mov b, [d]
12032  5073 38 00 00      mov c, 0
12033  5076             ; --- START RELATIONAL
12034  5076 D7            push a
12035  5077 11            mov a, b
12036  5078 FD 2E 64 00   mov32 cb, $00000064
12036  507C 00 00 
12037  507E B0            cmp a, b
12038  507F FD 82         sgeu ; >= (unsigned)
12039  5081 E4            pop a
12040  5082             ; --- END RELATIONAL
12041  5082 C0 00 00      cmp b, 0
12042  5085 C6 A1 50      je _if766_exit
12043  5088             _if766_TRUE:
12044  5088             ; repair_factor = TO_FIXED00(1); 
12045  5088 FA FB FF      lea d, [bp + -5] ; $repair_factor
12046  508B DA            push d
12047  508C             ; --- START FUNCTION CALL
12048  508C FD 2E 01 00   mov32 cb, $00000001
12048  5090 00 00 
12049  5092 FD AB         swp b
12050  5094 D8            push b
12051  5095 07 54 04      call TO_FIXED00
12052  5098 51 02 00      add sp, 2
12053  509B             ; --- END FUNCTION CALL
12054  509B E7            pop d
12055  509C FD 43         mov [d], b
12056  509E 0A A1 50      jmp _if766_exit
12057  50A1             _if766_exit:
12058  50A1             ; for (i = 1; i <= 8; i++) { 
12059  50A1             _for767_init:
12060  50A1 FA FF FF      lea d, [bp + -1] ; $i
12061  50A4 DA            push d
12062  50A5 FD 2E 01 00   mov32 cb, $00000001
12062  50A9 00 00 
12063  50AB E7            pop d
12064  50AC FD 43         mov [d], b
12065  50AE             _for767_cond:
12066  50AE FA FF FF      lea d, [bp + -1] ; $i
12067  50B1 2A            mov b, [d]
12068  50B2 38 00 00      mov c, 0
12069  50B5             ; --- START RELATIONAL
12070  50B5 D7            push a
12071  50B6 11            mov a, b
12072  50B7 FD 2E 08 00   mov32 cb, $00000008
12072  50BB 00 00 
12073  50BD B0            cmp a, b
12074  50BE FD 74         sle ; <= (signed)
12075  50C0 E4            pop a
12076  50C1             ; --- END RELATIONAL
12077  50C1 C0 00 00      cmp b, 0
12078  50C4 C6 49 52      je _for767_exit
12079  50C7             _for767_block:
12080  50C7             ; if (damage[i] < 0) { 
12081  50C7             _if768_cond:
12082  50C7 3B 95 68      mov d, _damage_data ; $damage
12083  50CA D7            push a
12084  50CB DA            push d
12085  50CC FA FF FF      lea d, [bp + -1] ; $i
12086  50CF 2A            mov b, [d]
12087  50D0 38 00 00      mov c, 0
12088  50D3 E7            pop d
12089  50D4 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12090  50D8 E4            pop a
12091  50D9 2A            mov b, [d]
12092  50DA 38 00 00      mov c, 0
12093  50DD             ; --- START RELATIONAL
12094  50DD D7            push a
12095  50DE 11            mov a, b
12096  50DF FD 2E 00 00   mov32 cb, $00000000
12096  50E3 00 00 
12097  50E5 B0            cmp a, b
12098  50E6 FD 73         slt ; < (signed)
12099  50E8 E4            pop a
12100  50E9             ; --- END RELATIONAL
12101  50E9 C0 00 00      cmp b, 0
12102  50EC C6 36 52      je _if768_exit
12103  50EF             _if768_TRUE:
12104  50EF             ; damage[i] = damage[i] + repair_factor; 
12105  50EF 3B 95 68      mov d, _damage_data ; $damage
12106  50F2 D7            push a
12107  50F3 DA            push d
12108  50F4 FA FF FF      lea d, [bp + -1] ; $i
12109  50F7 2A            mov b, [d]
12110  50F8 38 00 00      mov c, 0
12111  50FB E7            pop d
12112  50FC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12113  5100 E4            pop a
12114  5101 DA            push d
12115  5102 3B 95 68      mov d, _damage_data ; $damage
12116  5105 D7            push a
12117  5106 DA            push d
12118  5107 FA FF FF      lea d, [bp + -1] ; $i
12119  510A 2A            mov b, [d]
12120  510B 38 00 00      mov c, 0
12121  510E E7            pop d
12122  510F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12123  5113 E4            pop a
12124  5114 2A            mov b, [d]
12125  5115 38 00 00      mov c, 0
12126  5118             ; --- START TERMS
12127  5118 D7            push a
12128  5119 11            mov a, b
12129  511A FA FB FF      lea d, [bp + -5] ; $repair_factor
12130  511D 2A            mov b, [d]
12131  511E 38 00 00      mov c, 0
12132  5121 56            add b, a
12133  5122 E4            pop a
12134  5123             ; --- END TERMS
12135  5123 E7            pop d
12136  5124 FD 43         mov [d], b
12137  5126             ; if (damage[i] > -10 && damage[i] < 0)	/* -0.1 */ 
12138  5126             _if769_cond:
12139  5126 3B 95 68      mov d, _damage_data ; $damage
12140  5129 D7            push a
12141  512A DA            push d
12142  512B FA FF FF      lea d, [bp + -1] ; $i
12143  512E 2A            mov b, [d]
12144  512F 38 00 00      mov c, 0
12145  5132 E7            pop d
12146  5133 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12147  5137 E4            pop a
12148  5138 2A            mov b, [d]
12149  5139 38 00 00      mov c, 0
12150  513C             ; --- START RELATIONAL
12151  513C D7            push a
12152  513D 11            mov a, b
12153  513E FD 2E F6 FF   mov32 cb, $fffffff6
12153  5142 FF FF 
12154  5144 B0            cmp a, b
12155  5145 FD 7F         sgt ; >
12156  5147 E4            pop a
12157  5148             ; --- END RELATIONAL
12158  5148             ; --- START LOGICAL AND
12159  5148 D7            push a
12160  5149 11            mov a, b
12161  514A 3B 95 68      mov d, _damage_data ; $damage
12162  514D D7            push a
12163  514E DA            push d
12164  514F FA FF FF      lea d, [bp + -1] ; $i
12165  5152 2A            mov b, [d]
12166  5153 38 00 00      mov c, 0
12167  5156 E7            pop d
12168  5157 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12169  515B E4            pop a
12170  515C 2A            mov b, [d]
12171  515D 38 00 00      mov c, 0
12172  5160             ; --- START RELATIONAL
12173  5160 D7            push a
12174  5161 11            mov a, b
12175  5162 FD 2E 00 00   mov32 cb, $00000000
12175  5166 00 00 
12176  5168 B0            cmp a, b
12177  5169 FD 73         slt ; < (signed)
12178  516B E4            pop a
12179  516C             ; --- END RELATIONAL
12180  516C FD A7         sand a, b
12181  516E E4            pop a
12182  516F             ; --- END LOGICAL AND
12183  516F C0 00 00      cmp b, 0
12184  5172 C6 94 51      je _if769_else
12185  5175             _if769_TRUE:
12186  5175             ; damage[i] = -10; 
12187  5175 3B 95 68      mov d, _damage_data ; $damage
12188  5178 D7            push a
12189  5179 DA            push d
12190  517A FA FF FF      lea d, [bp + -1] ; $i
12191  517D 2A            mov b, [d]
12192  517E 38 00 00      mov c, 0
12193  5181 E7            pop d
12194  5182 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12195  5186 E4            pop a
12196  5187 DA            push d
12197  5188 FD 2E F6 FF   mov32 cb, $fffffff6
12197  518C FF FF 
12198  518E E7            pop d
12199  518F FD 43         mov [d], b
12200  5191 0A 33 52      jmp _if769_exit
12201  5194             _if769_else:
12202  5194             ; if (damage[i] >= 0) { 
12203  5194             _if770_cond:
12204  5194 3B 95 68      mov d, _damage_data ; $damage
12205  5197 D7            push a
12206  5198 DA            push d
12207  5199 FA FF FF      lea d, [bp + -1] ; $i
12208  519C 2A            mov b, [d]
12209  519D 38 00 00      mov c, 0
12210  51A0 E7            pop d
12211  51A1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12212  51A5 E4            pop a
12213  51A6 2A            mov b, [d]
12214  51A7 38 00 00      mov c, 0
12215  51AA             ; --- START RELATIONAL
12216  51AA D7            push a
12217  51AB 11            mov a, b
12218  51AC FD 2E 00 00   mov32 cb, $00000000
12218  51B0 00 00 
12219  51B2 B0            cmp a, b
12220  51B3 FD 80         sge ; >=
12221  51B5 E4            pop a
12222  51B6             ; --- END RELATIONAL
12223  51B6 C0 00 00      cmp b, 0
12224  51B9 C6 33 52      je _if770_exit
12225  51BC             _if770_TRUE:
12226  51BC             ; if (d1 != 1) { 
12227  51BC             _if771_cond:
12228  51BC FA FD FF      lea d, [bp + -3] ; $d1
12229  51BF 2A            mov b, [d]
12230  51C0 38 00 00      mov c, 0
12231  51C3             ; --- START RELATIONAL
12232  51C3 D7            push a
12233  51C4 11            mov a, b
12234  51C5 FD 2E 01 00   mov32 cb, $00000001
12234  51C9 00 00 
12235  51CB B0            cmp a, b
12236  51CC FD 72         sneq ; !=
12237  51CE E4            pop a
12238  51CF             ; --- END RELATIONAL
12239  51CF C0 00 00      cmp b, 0
12240  51D2 C6 F5 51      je _if771_exit
12241  51D5             _if771_TRUE:
12242  51D5             ; d1 = 1; 
12243  51D5 FA FD FF      lea d, [bp + -3] ; $d1
12244  51D8 DA            push d
12245  51D9 FD 2E 01 00   mov32 cb, $00000001
12245  51DD 00 00 
12246  51DF E7            pop d
12247  51E0 FD 43         mov [d], b
12248  51E2             ; puts(dcr_1); 
12249  51E2             ; --- START FUNCTION CALL
12250  51E2 3B A8 69      mov d, _dcr_1 ; $dcr_1
12251  51E5 2A            mov b, [d]
12252  51E6 38 00 00      mov c, 0
12253  51E9 FD AB         swp b
12254  51EB D8            push b
12255  51EC 07 19 64      call puts
12256  51EF 51 02 00      add sp, 2
12257  51F2             ; --- END FUNCTION CALL
12258  51F2 0A F5 51      jmp _if771_exit
12259  51F5             _if771_exit:
12260  51F5             ; printf("    %s repair completed\n\n", 
12261  51F5             ; --- START FUNCTION CALL
12262  51F5             ; --- START FUNCTION CALL
12263  51F5 FA FF FF      lea d, [bp + -1] ; $i
12264  51F8 2A            mov b, [d]
12265  51F9 38 00 00      mov c, 0
12266  51FC FD AB         swp b
12267  51FE D8            push b
12268  51FF 07 8F 54      call get_device_name
12269  5202 51 02 00      add sp, 2
12270  5205             ; --- END FUNCTION CALL
12271  5205 FD AB         swp b
12272  5207 D8            push b
12273  5208 26 1B 7D      mov b, _s161 ; "    %s repair completed\n\n"
12274  520B FD AB         swp b
12275  520D D8            push b
12276  520E 07 2C 5B      call printf
12277  5211 51 04 00      add sp, 4
12278  5214             ; --- END FUNCTION CALL
12279  5214             ; damage[i] = 0; 
12280  5214 3B 95 68      mov d, _damage_data ; $damage
12281  5217 D7            push a
12282  5218 DA            push d
12283  5219 FA FF FF      lea d, [bp + -1] ; $i
12284  521C 2A            mov b, [d]
12285  521D 38 00 00      mov c, 0
12286  5220 E7            pop d
12287  5221 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12288  5225 E4            pop a
12289  5226 DA            push d
12290  5227 FD 2E 00 00   mov32 cb, $00000000
12290  522B 00 00 
12291  522D E7            pop d
12292  522E FD 43         mov [d], b
12293  5230 0A 33 52      jmp _if770_exit
12294  5233             _if770_exit:
12295  5233             _if769_exit:
12296  5233 0A 36 52      jmp _if768_exit
12297  5236             _if768_exit:
12298  5236             _for767_update:
12299  5236 FA FF FF      lea d, [bp + -1] ; $i
12300  5239 2A            mov b, [d]
12301  523A 38 00 00      mov c, 0
12302  523D 11            mov a, b
12303  523E FD 77         inc b
12304  5240 FA FF FF      lea d, [bp + -1] ; $i
12305  5243 FD 43         mov [d], b
12306  5245 27            mov b, a
12307  5246 0A AE 50      jmp _for767_cond
12308  5249             _for767_exit:
12309  5249             ; unsigned char        r; 
12310  5249 52 01 00      sub sp, 1
12311  524C             ; if (get_rand(10) <= 2) { 
12312  524C             _if772_cond:
12313  524C             ; --- START FUNCTION CALL
12314  524C FD 2E 0A 00   mov32 cb, $0000000a
12314  5250 00 00 
12315  5252 FD AB         swp b
12316  5254 D8            push b
12317  5255 07 91 04      call get_rand
12318  5258 51 02 00      add sp, 2
12319  525B             ; --- END FUNCTION CALL
12320  525B             ; --- START RELATIONAL
12321  525B D7            push a
12322  525C 11            mov a, b
12323  525D FD 2E 02 00   mov32 cb, $00000002
12323  5261 00 00 
12324  5263 B0            cmp a, b
12325  5264 FD 74         sle ; <= (signed)
12326  5266 E4            pop a
12327  5267             ; --- END RELATIONAL
12328  5267 C0 00 00      cmp b, 0
12329  526A C6 99 53      je _if772_exit
12330  526D             _if772_TRUE:
12331  526D             ; r = rand8(); 
12332  526D FA FA FF      lea d, [bp + -6] ; $r
12333  5270 DA            push d
12334  5271             ; --- START FUNCTION CALL
12335  5271 07 FD 04      call rand8
12336  5274 E7            pop d
12337  5275 FD 3E         mov [d], bl
12338  5277             ; if (get_rand(10) < 6) { 
12339  5277             _if773_cond:
12340  5277             ; --- START FUNCTION CALL
12341  5277 FD 2E 0A 00   mov32 cb, $0000000a
12341  527B 00 00 
12342  527D FD AB         swp b
12343  527F D8            push b
12344  5280 07 91 04      call get_rand
12345  5283 51 02 00      add sp, 2
12346  5286             ; --- END FUNCTION CALL
12347  5286             ; --- START RELATIONAL
12348  5286 D7            push a
12349  5287 11            mov a, b
12350  5288 FD 2E 06 00   mov32 cb, $00000006
12350  528C 00 00 
12351  528E B0            cmp a, b
12352  528F FD 73         slt ; < (signed)
12353  5291 E4            pop a
12354  5292             ; --- END RELATIONAL
12355  5292 C0 00 00      cmp b, 0
12356  5295 C6 1A 53      je _if773_else
12357  5298             _if773_TRUE:
12358  5298             ; damage[r] =damage[r]- (get_rand(500) + 100); 
12359  5298 3B 95 68      mov d, _damage_data ; $damage
12360  529B D7            push a
12361  529C DA            push d
12362  529D FA FA FF      lea d, [bp + -6] ; $r
12363  52A0 32            mov bl, [d]
12364  52A1 A7 00         mov bh, 0
12365  52A3 38 00 00      mov c, 0
12366  52A6 E7            pop d
12367  52A7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12368  52AB E4            pop a
12369  52AC DA            push d
12370  52AD 3B 95 68      mov d, _damage_data ; $damage
12371  52B0 D7            push a
12372  52B1 DA            push d
12373  52B2 FA FA FF      lea d, [bp + -6] ; $r
12374  52B5 32            mov bl, [d]
12375  52B6 A7 00         mov bh, 0
12376  52B8 38 00 00      mov c, 0
12377  52BB E7            pop d
12378  52BC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12379  52C0 E4            pop a
12380  52C1 2A            mov b, [d]
12381  52C2 38 00 00      mov c, 0
12382  52C5             ; --- START TERMS
12383  52C5 D7            push a
12384  52C6 11            mov a, b
12385  52C7             ; --- START FUNCTION CALL
12386  52C7 FD 2E F4 01   mov32 cb, $000001f4
12386  52CB 00 00 
12387  52CD FD AB         swp b
12388  52CF D8            push b
12389  52D0 07 91 04      call get_rand
12390  52D3 51 02 00      add sp, 2
12391  52D6             ; --- END FUNCTION CALL
12392  52D6             ; --- START TERMS
12393  52D6 D7            push a
12394  52D7 11            mov a, b
12395  52D8 FD 2E 64 00   mov32 cb, $00000064
12395  52DC 00 00 
12396  52DE 56            add b, a
12397  52DF E4            pop a
12398  52E0             ; --- END TERMS
12399  52E0 60            sub a, b
12400  52E1 27            mov b, a
12401  52E2 E4            pop a
12402  52E3             ; --- END TERMS
12403  52E3 E7            pop d
12404  52E4 FD 43         mov [d], b
12405  52E6             ; puts(dcr_1); 
12406  52E6             ; --- START FUNCTION CALL
12407  52E6 3B A8 69      mov d, _dcr_1 ; $dcr_1
12408  52E9 2A            mov b, [d]
12409  52EA 38 00 00      mov c, 0
12410  52ED FD AB         swp b
12411  52EF D8            push b
12412  52F0 07 19 64      call puts
12413  52F3 51 02 00      add sp, 2
12414  52F6             ; --- END FUNCTION CALL
12415  52F6             ; printf("    %s damaged\n\n", get_device_name(r)); 
12416  52F6             ; --- START FUNCTION CALL
12417  52F6             ; --- START FUNCTION CALL
12418  52F6 FA FA FF      lea d, [bp + -6] ; $r
12419  52F9 32            mov bl, [d]
12420  52FA A7 00         mov bh, 0
12421  52FC 38 00 00      mov c, 0
12422  52FF FD AB         swp b
12423  5301 D8            push b
12424  5302 07 8F 54      call get_device_name
12425  5305 51 02 00      add sp, 2
12426  5308             ; --- END FUNCTION CALL
12427  5308 FD AB         swp b
12428  530A D8            push b
12429  530B 26 35 7D      mov b, _s162 ; "    %s damaged\n\n"
12430  530E FD AB         swp b
12431  5310 D8            push b
12432  5311 07 2C 5B      call printf
12433  5314 51 04 00      add sp, 4
12434  5317             ; --- END FUNCTION CALL
12435  5317 0A 96 53      jmp _if773_exit
12436  531A             _if773_else:
12437  531A             ; damage[r] = damage[r] + get_rand(300) + 100; 
12438  531A 3B 95 68      mov d, _damage_data ; $damage
12439  531D D7            push a
12440  531E DA            push d
12441  531F FA FA FF      lea d, [bp + -6] ; $r
12442  5322 32            mov bl, [d]
12443  5323 A7 00         mov bh, 0
12444  5325 38 00 00      mov c, 0
12445  5328 E7            pop d
12446  5329 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12447  532D E4            pop a
12448  532E DA            push d
12449  532F 3B 95 68      mov d, _damage_data ; $damage
12450  5332 D7            push a
12451  5333 DA            push d
12452  5334 FA FA FF      lea d, [bp + -6] ; $r
12453  5337 32            mov bl, [d]
12454  5338 A7 00         mov bh, 0
12455  533A 38 00 00      mov c, 0
12456  533D E7            pop d
12457  533E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12458  5342 E4            pop a
12459  5343 2A            mov b, [d]
12460  5344 38 00 00      mov c, 0
12461  5347             ; --- START TERMS
12462  5347 D7            push a
12463  5348 11            mov a, b
12464  5349             ; --- START FUNCTION CALL
12465  5349 FD 2E 2C 01   mov32 cb, $0000012c
12465  534D 00 00 
12466  534F FD AB         swp b
12467  5351 D8            push b
12468  5352 07 91 04      call get_rand
12469  5355 51 02 00      add sp, 2
12470  5358             ; --- END FUNCTION CALL
12471  5358 56            add b, a
12472  5359 11            mov a, b
12473  535A FD 2E 64 00   mov32 cb, $00000064
12473  535E 00 00 
12474  5360 56            add b, a
12475  5361 E4            pop a
12476  5362             ; --- END TERMS
12477  5362 E7            pop d
12478  5363 FD 43         mov [d], b
12479  5365             ; puts(dcr_1); 
12480  5365             ; --- START FUNCTION CALL
12481  5365 3B A8 69      mov d, _dcr_1 ; $dcr_1
12482  5368 2A            mov b, [d]
12483  5369 38 00 00      mov c, 0
12484  536C FD AB         swp b
12485  536E D8            push b
12486  536F 07 19 64      call puts
12487  5372 51 02 00      add sp, 2
12488  5375             ; --- END FUNCTION CALL
12489  5375             ; printf("    %s state of repair improved\n\n", 
12490  5375             ; --- START FUNCTION CALL
12491  5375             ; --- START FUNCTION CALL
12492  5375 FA FA FF      lea d, [bp + -6] ; $r
12493  5378 32            mov bl, [d]
12494  5379 A7 00         mov bh, 0
12495  537B 38 00 00      mov c, 0
12496  537E FD AB         swp b
12497  5380 D8            push b
12498  5381 07 8F 54      call get_device_name
12499  5384 51 02 00      add sp, 2
12500  5387             ; --- END FUNCTION CALL
12501  5387 FD AB         swp b
12502  5389 D8            push b
12503  538A 26 46 7D      mov b, _s163 ; "    %s state of repair improved\n\n"
12504  538D FD AB         swp b
12505  538F D8            push b
12506  5390 07 2C 5B      call printf
12507  5393 51 04 00      add sp, 4
12508  5396             ; --- END FUNCTION CALL
12509  5396             _if773_exit:
12510  5396 0A 99 53      jmp _if772_exit
12511  5399             _if772_exit:
12512  5399 F9            leave
12513  539A 09            ret
12514  539B             
12515  539B             find_set_empty_place:
12516  539B F8 00 00      enter 0 ; (push bp; mov bp, sp)
12517  539E             ; unsigned char        r1, r2; 
12518  539E 52 01 00      sub sp, 1
12519  53A1 52 01 00      sub sp, 1
12520  53A4             ; do { 
12521  53A4             _do774_block:
12522  53A4             ; r1 = rand8(); 
12523  53A4 FA 00 00      lea d, [bp + 0] ; $r1
12524  53A7 DA            push d
12525  53A8             ; --- START FUNCTION CALL
12526  53A8 07 FD 04      call rand8
12527  53AB E7            pop d
12528  53AC FD 3E         mov [d], bl
12529  53AE             ; r2 = rand8(); 
12530  53AE FA FF FF      lea d, [bp + -1] ; $r2
12531  53B1 DA            push d
12532  53B2             ; --- START FUNCTION CALL
12533  53B2 07 FD 04      call rand8
12534  53B5 E7            pop d
12535  53B6 FD 3E         mov [d], bl
12536  53B8             ; } while (quad[r1+-1][r2+-1] != 		0        ); 
12537  53B8             _do774_cond:
12538  53B8 3B AF 68      mov d, _quad_data ; $quad
12539  53BB D7            push a
12540  53BC DA            push d
12541  53BD FA 00 00      lea d, [bp + 0] ; $r1
12542  53C0 32            mov bl, [d]
12543  53C1 A7 00         mov bh, 0
12544  53C3 38 00 00      mov c, 0
12545  53C6             ; --- START TERMS
12546  53C6 D7            push a
12547  53C7 11            mov a, b
12548  53C8 FD 2E FF FF   mov32 cb, $ffffffff
12548  53CC FF FF 
12549  53CE 56            add b, a
12550  53CF E4            pop a
12551  53D0             ; --- END TERMS
12552  53D0 E7            pop d
12553  53D1 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
12554  53D5 DA            push d
12555  53D6 FA FF FF      lea d, [bp + -1] ; $r2
12556  53D9 32            mov bl, [d]
12557  53DA A7 00         mov bh, 0
12558  53DC 38 00 00      mov c, 0
12559  53DF             ; --- START TERMS
12560  53DF D7            push a
12561  53E0 11            mov a, b
12562  53E1 FD 2E FF FF   mov32 cb, $ffffffff
12562  53E5 FF FF 
12563  53E7 56            add b, a
12564  53E8 E4            pop a
12565  53E9             ; --- END TERMS
12566  53E9 E7            pop d
12567  53EA 5A            add d, b
12568  53EB E4            pop a
12569  53EC 32            mov bl, [d]
12570  53ED A7 00         mov bh, 0
12571  53EF 38 00 00      mov c, 0
12572  53F2             ; --- START RELATIONAL
12573  53F2 D7            push a
12574  53F3 11            mov a, b
12575  53F4 FD 2E 00 00   mov32 cb, $00000000
12575  53F8 00 00 
12576  53FA B0            cmp a, b
12577  53FB FD 72         sneq ; !=
12578  53FD E4            pop a
12579  53FE             ; --- END RELATIONAL
12580  53FE C0 01 00      cmp b, 1
12581  5401 C6 A4 53      je _do774_block
12582  5404             _do774_exit:
12583  5404             ; quad[r1+-1][r2+-1] = t; 
12584  5404 3B AF 68      mov d, _quad_data ; $quad
12585  5407 D7            push a
12586  5408 DA            push d
12587  5409 FA 00 00      lea d, [bp + 0] ; $r1
12588  540C 32            mov bl, [d]
12589  540D A7 00         mov bh, 0
12590  540F 38 00 00      mov c, 0
12591  5412             ; --- START TERMS
12592  5412 D7            push a
12593  5413 11            mov a, b
12594  5414 FD 2E FF FF   mov32 cb, $ffffffff
12594  5418 FF FF 
12595  541A 56            add b, a
12596  541B E4            pop a
12597  541C             ; --- END TERMS
12598  541C E7            pop d
12599  541D FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
12600  5421 DA            push d
12601  5422 FA FF FF      lea d, [bp + -1] ; $r2
12602  5425 32            mov bl, [d]
12603  5426 A7 00         mov bh, 0
12604  5428 38 00 00      mov c, 0
12605  542B             ; --- START TERMS
12606  542B D7            push a
12607  542C 11            mov a, b
12608  542D FD 2E FF FF   mov32 cb, $ffffffff
12608  5431 FF FF 
12609  5433 56            add b, a
12610  5434 E4            pop a
12611  5435             ; --- END TERMS
12612  5435 E7            pop d
12613  5436 5A            add d, b
12614  5437 E4            pop a
12615  5438 DA            push d
12616  5439 FA 05 00      lea d, [bp + 5] ; $t
12617  543C 32            mov bl, [d]
12618  543D A7 00         mov bh, 0
12619  543F 38 00 00      mov c, 0
12620  5442 E7            pop d
12621  5443 FD 3E         mov [d], bl
12622  5445             ; if (z1) 
12623  5445             _if775_cond:
12624  5445 FA 06 00      lea d, [bp + 6] ; $z1
12625  5448 2A            mov b, [d]
12626  5449 38 00 00      mov c, 0
12627  544C C0 00 00      cmp b, 0
12628  544F C6 69 54      je _if775_exit
12629  5452             _if775_TRUE:
12630  5452             ; *z1 = r1; 
12631  5452 FA 06 00      lea d, [bp + 6] ; $z1
12632  5455 2A            mov b, [d]
12633  5456 38 00 00      mov c, 0
12634  5459 D8            push b
12635  545A FA 00 00      lea d, [bp + 0] ; $r1
12636  545D 32            mov bl, [d]
12637  545E A7 00         mov bh, 0
12638  5460 38 00 00      mov c, 0
12639  5463 E7            pop d
12640  5464 FD 3E         mov [d], bl
12641  5466 0A 69 54      jmp _if775_exit
12642  5469             _if775_exit:
12643  5469             ; if (z2) 
12644  5469             _if776_cond:
12645  5469 FA 08 00      lea d, [bp + 8] ; $z2
12646  546C 2A            mov b, [d]
12647  546D 38 00 00      mov c, 0
12648  5470 C0 00 00      cmp b, 0
12649  5473 C6 8D 54      je _if776_exit
12650  5476             _if776_TRUE:
12651  5476             ; *z2 = r2; 
12652  5476 FA 08 00      lea d, [bp + 8] ; $z2
12653  5479 2A            mov b, [d]
12654  547A 38 00 00      mov c, 0
12655  547D D8            push b
12656  547E FA FF FF      lea d, [bp + -1] ; $r2
12657  5481 32            mov bl, [d]
12658  5482 A7 00         mov bh, 0
12659  5484 38 00 00      mov c, 0
12660  5487 E7            pop d
12661  5488 FD 3E         mov [d], bl
12662  548A 0A 8D 54      jmp _if776_exit
12663  548D             _if776_exit:
12664  548D F9            leave
12665  548E 09            ret
12666  548F             
12667  548F             get_device_name:
12668  548F F8 00 00      enter 0 ; (push bp; mov bp, sp)
12669  5492             ; if (n < 0 || n > 8) 
12670  5492             _if777_cond:
12671  5492 FA 05 00      lea d, [bp + 5] ; $n
12672  5495 2A            mov b, [d]
12673  5496 38 00 00      mov c, 0
12674  5499             ; --- START RELATIONAL
12675  5499 D7            push a
12676  549A 11            mov a, b
12677  549B FD 2E 00 00   mov32 cb, $00000000
12677  549F 00 00 
12678  54A1 B0            cmp a, b
12679  54A2 FD 73         slt ; < (signed)
12680  54A4 E4            pop a
12681  54A5             ; --- END RELATIONAL
12682  54A5             ; --- START LOGICAL OR
12683  54A5 D7            push a
12684  54A6 11            mov a, b
12685  54A7 FA 05 00      lea d, [bp + 5] ; $n
12686  54AA 2A            mov b, [d]
12687  54AB 38 00 00      mov c, 0
12688  54AE             ; --- START RELATIONAL
12689  54AE D7            push a
12690  54AF 11            mov a, b
12691  54B0 FD 2E 08 00   mov32 cb, $00000008
12691  54B4 00 00 
12692  54B6 B0            cmp a, b
12693  54B7 FD 7F         sgt ; >
12694  54B9 E4            pop a
12695  54BA             ; --- END RELATIONAL
12696  54BA FD A8         sor a, b ; ||
12697  54BC E4            pop a
12698  54BD             ; --- END LOGICAL OR
12699  54BD C0 00 00      cmp b, 0
12700  54C0 C6 D3 54      je _if777_exit
12701  54C3             _if777_TRUE:
12702  54C3             ; n = 0; 
12703  54C3 FA 05 00      lea d, [bp + 5] ; $n
12704  54C6 DA            push d
12705  54C7 FD 2E 00 00   mov32 cb, $00000000
12705  54CB 00 00 
12706  54CD E7            pop d
12707  54CE FD 43         mov [d], b
12708  54D0 0A D3 54      jmp _if777_exit
12709  54D3             _if777_exit:
12710  54D3             ; return device_name[n]; 
12711  54D3 3B 6B 69      mov d, _device_name_data ; $device_name
12712  54D6 D7            push a
12713  54D7 DA            push d
12714  54D8 FA 05 00      lea d, [bp + 5] ; $n
12715  54DB 2A            mov b, [d]
12716  54DC 38 00 00      mov c, 0
12717  54DF E7            pop d
12718  54E0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12719  54E4 E4            pop a
12720  54E5 2A            mov b, [d]
12721  54E6 38 00 00      mov c, 0
12722  54E9 F9            leave
12723  54EA 09            ret
12724  54EB             
12725  54EB             quadrant_name:
12726  54EB F8 00 00      enter 0 ; (push bp; mov bp, sp)
12727  54EE             ; static char *sect_name[] = { "", " I", " II", " III", " IV" }; 
12728  54EE 52 14 00      sub sp, 20
12729  54F1             ; if (y < 1 || y > 8 || x < 1 || x > 8) 
12730  54F1             _if778_cond:
12731  54F1 FA 06 00      lea d, [bp + 6] ; $y
12732  54F4 32            mov bl, [d]
12733  54F5 A7 00         mov bh, 0
12734  54F7 38 00 00      mov c, 0
12735  54FA             ; --- START RELATIONAL
12736  54FA D7            push a
12737  54FB 11            mov a, b
12738  54FC FD 2E 01 00   mov32 cb, $00000001
12738  5500 00 00 
12739  5502 B0            cmp a, b
12740  5503 FD 75         slu ; < (unsigned)
12741  5505 E4            pop a
12742  5506             ; --- END RELATIONAL
12743  5506             ; --- START LOGICAL OR
12744  5506 D7            push a
12745  5507 11            mov a, b
12746  5508 FA 06 00      lea d, [bp + 6] ; $y
12747  550B 32            mov bl, [d]
12748  550C A7 00         mov bh, 0
12749  550E 38 00 00      mov c, 0
12750  5511             ; --- START RELATIONAL
12751  5511 D7            push a
12752  5512 11            mov a, b
12753  5513 FD 2E 08 00   mov32 cb, $00000008
12753  5517 00 00 
12754  5519 B0            cmp a, b
12755  551A FD 81         sgu ; > (unsigned)
12756  551C E4            pop a
12757  551D             ; --- END RELATIONAL
12758  551D FD A8         sor a, b ; ||
12759  551F 11            mov a, b
12760  5520 FA 07 00      lea d, [bp + 7] ; $x
12761  5523 32            mov bl, [d]
12762  5524 A7 00         mov bh, 0
12763  5526 38 00 00      mov c, 0
12764  5529             ; --- START RELATIONAL
12765  5529 D7            push a
12766  552A 11            mov a, b
12767  552B FD 2E 01 00   mov32 cb, $00000001
12767  552F 00 00 
12768  5531 B0            cmp a, b
12769  5532 FD 75         slu ; < (unsigned)
12770  5534 E4            pop a
12771  5535             ; --- END RELATIONAL
12772  5535 FD A8         sor a, b ; ||
12773  5537 11            mov a, b
12774  5538 FA 07 00      lea d, [bp + 7] ; $x
12775  553B 32            mov bl, [d]
12776  553C A7 00         mov bh, 0
12777  553E 38 00 00      mov c, 0
12778  5541             ; --- START RELATIONAL
12779  5541 D7            push a
12780  5542 11            mov a, b
12781  5543 FD 2E 08 00   mov32 cb, $00000008
12781  5547 00 00 
12782  5549 B0            cmp a, b
12783  554A FD 81         sgu ; > (unsigned)
12784  554C E4            pop a
12785  554D             ; --- END RELATIONAL
12786  554D FD A8         sor a, b ; ||
12787  554F E4            pop a
12788  5550             ; --- END LOGICAL OR
12789  5550 C0 00 00      cmp b, 0
12790  5553 C6 6F 55      je _if778_exit
12791  5556             _if778_TRUE:
12792  5556             ; strcpy(quadname, "Unknown"); 
12793  5556             ; --- START FUNCTION CALL
12794  5556 26 78 7D      mov b, _s168 ; "Unknown"
12795  5559 FD AB         swp b
12796  555B D8            push b
12797  555C 3B EF 68      mov d, _quadname_data ; $quadname
12798  555F 2D            mov b, d
12799  5560 38 00 00      mov c, 0
12800  5563 FD AB         swp b
12801  5565 D8            push b
12802  5566 07 74 59      call strcpy
12803  5569 51 04 00      add sp, 4
12804  556C             ; --- END FUNCTION CALL
12805  556C 0A 6F 55      jmp _if778_exit
12806  556F             _if778_exit:
12807  556F             ; if (x <= 4) 
12808  556F             _if779_cond:
12809  556F FA 07 00      lea d, [bp + 7] ; $x
12810  5572 32            mov bl, [d]
12811  5573 A7 00         mov bh, 0
12812  5575 38 00 00      mov c, 0
12813  5578             ; --- START RELATIONAL
12814  5578 D7            push a
12815  5579 11            mov a, b
12816  557A FD 2E 04 00   mov32 cb, $00000004
12816  557E 00 00 
12817  5580 B0            cmp a, b
12818  5581 FD 76         sleu ; <= (unsigned)
12819  5583 E4            pop a
12820  5584             ; --- END RELATIONAL
12821  5584 C0 00 00      cmp b, 0
12822  5587 C6 B8 55      je _if779_else
12823  558A             _if779_TRUE:
12824  558A             ; strcpy(quadname, quad_name[y]); 
12825  558A             ; --- START FUNCTION CALL
12826  558A 3B 25 69      mov d, _quad_name_data ; $quad_name
12827  558D D7            push a
12828  558E DA            push d
12829  558F FA 06 00      lea d, [bp + 6] ; $y
12830  5592 32            mov bl, [d]
12831  5593 A7 00         mov bh, 0
12832  5595 38 00 00      mov c, 0
12833  5598 E7            pop d
12834  5599 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12835  559D E4            pop a
12836  559E 2A            mov b, [d]
12837  559F 38 00 00      mov c, 0
12838  55A2 FD AB         swp b
12839  55A4 D8            push b
12840  55A5 3B EF 68      mov d, _quadname_data ; $quadname
12841  55A8 2D            mov b, d
12842  55A9 38 00 00      mov c, 0
12843  55AC FD AB         swp b
12844  55AE D8            push b
12845  55AF 07 74 59      call strcpy
12846  55B2 51 04 00      add sp, 4
12847  55B5             ; --- END FUNCTION CALL
12848  55B5 0A ED 55      jmp _if779_exit
12849  55B8             _if779_else:
12850  55B8             ; strcpy(quadname, quad_name[y + 8]); 
12851  55B8             ; --- START FUNCTION CALL
12852  55B8 3B 25 69      mov d, _quad_name_data ; $quad_name
12853  55BB D7            push a
12854  55BC DA            push d
12855  55BD FA 06 00      lea d, [bp + 6] ; $y
12856  55C0 32            mov bl, [d]
12857  55C1 A7 00         mov bh, 0
12858  55C3 38 00 00      mov c, 0
12859  55C6             ; --- START TERMS
12860  55C6 D7            push a
12861  55C7 11            mov a, b
12862  55C8 FD 2E 08 00   mov32 cb, $00000008
12862  55CC 00 00 
12863  55CE 56            add b, a
12864  55CF E4            pop a
12865  55D0             ; --- END TERMS
12866  55D0 E7            pop d
12867  55D1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12868  55D5 E4            pop a
12869  55D6 2A            mov b, [d]
12870  55D7 38 00 00      mov c, 0
12871  55DA FD AB         swp b
12872  55DC D8            push b
12873  55DD 3B EF 68      mov d, _quadname_data ; $quadname
12874  55E0 2D            mov b, d
12875  55E1 38 00 00      mov c, 0
12876  55E4 FD AB         swp b
12877  55E6 D8            push b
12878  55E7 07 74 59      call strcpy
12879  55EA 51 04 00      add sp, 4
12880  55ED             ; --- END FUNCTION CALL
12881  55ED             _if779_exit:
12882  55ED             ; if (small != 1) { 
12883  55ED             _if780_cond:
12884  55ED FA 05 00      lea d, [bp + 5] ; $small
12885  55F0 32            mov bl, [d]
12886  55F1 A7 00         mov bh, 0
12887  55F3 38 00 00      mov c, 0
12888  55F6             ; --- START RELATIONAL
12889  55F6 D7            push a
12890  55F7 11            mov a, b
12891  55F8 FD 2E 01 00   mov32 cb, $00000001
12891  55FC 00 00 
12892  55FE B0            cmp a, b
12893  55FF FD 72         sneq ; !=
12894  5601 E4            pop a
12895  5602             ; --- END RELATIONAL
12896  5602 C0 00 00      cmp b, 0
12897  5605 C6 6F 56      je _if780_exit
12898  5608             _if780_TRUE:
12899  5608             ; if (x > 4) 
12900  5608             _if781_cond:
12901  5608 FA 07 00      lea d, [bp + 7] ; $x
12902  560B 32            mov bl, [d]
12903  560C A7 00         mov bh, 0
12904  560E 38 00 00      mov c, 0
12905  5611             ; --- START RELATIONAL
12906  5611 D7            push a
12907  5612 11            mov a, b
12908  5613 FD 2E 04 00   mov32 cb, $00000004
12908  5617 00 00 
12909  5619 B0            cmp a, b
12910  561A FD 81         sgu ; > (unsigned)
12911  561C E4            pop a
12912  561D             ; --- END RELATIONAL
12913  561D C0 00 00      cmp b, 0
12914  5620 C6 41 56      je _if781_exit
12915  5623             _if781_TRUE:
12916  5623             ; x = x - 4; 
12917  5623 FA 07 00      lea d, [bp + 7] ; $x
12918  5626 DA            push d
12919  5627 FA 07 00      lea d, [bp + 7] ; $x
12920  562A 32            mov bl, [d]
12921  562B A7 00         mov bh, 0
12922  562D 38 00 00      mov c, 0
12923  5630             ; --- START TERMS
12924  5630 D7            push a
12925  5631 11            mov a, b
12926  5632 FD 2E 04 00   mov32 cb, $00000004
12926  5636 00 00 
12927  5638 60            sub a, b
12928  5639 27            mov b, a
12929  563A E4            pop a
12930  563B             ; --- END TERMS
12931  563B E7            pop d
12932  563C FD 3E         mov [d], bl
12933  563E 0A 41 56      jmp _if781_exit
12934  5641             _if781_exit:
12935  5641             ; strcat(quadname, sect_name[x]); 
12936  5641             ; --- START FUNCTION CALL
12937  5641 3B 92 6A      mov d, st_quadrant_name_sect_name_dt ; static sect_name
12938  5644 D7            push a
12939  5645 DA            push d
12940  5646 FA 07 00      lea d, [bp + 7] ; $x
12941  5649 32            mov bl, [d]
12942  564A A7 00         mov bh, 0
12943  564C 38 00 00      mov c, 0
12944  564F E7            pop d
12945  5650 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12946  5654 E4            pop a
12947  5655 2A            mov b, [d]
12948  5656 38 00 00      mov c, 0
12949  5659 FD AB         swp b
12950  565B D8            push b
12951  565C 3B EF 68      mov d, _quadname_data ; $quadname
12952  565F 2D            mov b, d
12953  5660 38 00 00      mov c, 0
12954  5663 FD AB         swp b
12955  5665 D8            push b
12956  5666 07 EE 59      call strcat
12957  5669 51 04 00      add sp, 4
12958  566C             ; --- END FUNCTION CALL
12959  566C 0A 6F 56      jmp _if780_exit
12960  566F             _if780_exit:
12961  566F             ; return; 
12962  566F F9            leave
12963  5670 09            ret
12964  5671             
12965  5671             isqrt:
12966  5671 F8 00 00      enter 0 ; (push bp; mov bp, sp)
12967  5674             ; unsigned int         b, q, r, t; 
12968  5674 52 02 00      sub sp, 2
12969  5677 52 02 00      sub sp, 2
12970  567A 52 02 00      sub sp, 2
12971  567D 52 02 00      sub sp, 2
12972  5680             ; b = 0x4000; 
12973  5680 FA FF FF      lea d, [bp + -1] ; $b
12974  5683 DA            push d
12975  5684 FD 2E 00 40   mov32 cb, $00004000
12975  5688 00 00 
12976  568A E7            pop d
12977  568B FD 43         mov [d], b
12978  568D             ; q = 0; 
12979  568D FA FD FF      lea d, [bp + -3] ; $q
12980  5690 DA            push d
12981  5691 FD 2E 00 00   mov32 cb, $00000000
12981  5695 00 00 
12982  5697 E7            pop d
12983  5698 FD 43         mov [d], b
12984  569A             ; r = i; 
12985  569A FA FB FF      lea d, [bp + -5] ; $r
12986  569D DA            push d
12987  569E FA 05 00      lea d, [bp + 5] ; $i
12988  56A1 2A            mov b, [d]
12989  56A2 38 00 00      mov c, 0
12990  56A5 E7            pop d
12991  56A6 FD 43         mov [d], b
12992  56A8             ; while (b) { 
12993  56A8             _while782_cond:
12994  56A8 FA FF FF      lea d, [bp + -1] ; $b
12995  56AB 2A            mov b, [d]
12996  56AC 38 00 00      mov c, 0
12997  56AF C0 00 00      cmp b, 0
12998  56B2 C6 57 57      je _while782_exit
12999  56B5             _while782_block:
13000  56B5             ; t = q + b; 
13001  56B5 FA F9 FF      lea d, [bp + -7] ; $t
13002  56B8 DA            push d
13003  56B9 FA FD FF      lea d, [bp + -3] ; $q
13004  56BC 2A            mov b, [d]
13005  56BD 38 00 00      mov c, 0
13006  56C0             ; --- START TERMS
13007  56C0 D7            push a
13008  56C1 11            mov a, b
13009  56C2 FA FF FF      lea d, [bp + -1] ; $b
13010  56C5 2A            mov b, [d]
13011  56C6 38 00 00      mov c, 0
13012  56C9 56            add b, a
13013  56CA E4            pop a
13014  56CB             ; --- END TERMS
13015  56CB E7            pop d
13016  56CC FD 43         mov [d], b
13017  56CE             ; q =q>> 1; 
13018  56CE FA FD FF      lea d, [bp + -3] ; $q
13019  56D1 DA            push d
13020  56D2 FA FD FF      lea d, [bp + -3] ; $q
13021  56D5 2A            mov b, [d]
13022  56D6 38 00 00      mov c, 0
13023  56D9             ; --- START SHIFT
13024  56D9 D7            push a
13025  56DA 11            mov a, b
13026  56DB FD 2E 01 00   mov32 cb, $00000001
13026  56DF 00 00 
13027  56E1 FD 39         mov c, b
13028  56E3 A1            shr a, cl
13029  56E4 27            mov b, a
13030  56E5 E4            pop a
13031  56E6             ; --- END SHIFT
13032  56E6 E7            pop d
13033  56E7 FD 43         mov [d], b
13034  56E9             ; if (r >= t) { 
13035  56E9             _if783_cond:
13036  56E9 FA FB FF      lea d, [bp + -5] ; $r
13037  56EC 2A            mov b, [d]
13038  56ED 38 00 00      mov c, 0
13039  56F0             ; --- START RELATIONAL
13040  56F0 D7            push a
13041  56F1 11            mov a, b
13042  56F2 FA F9 FF      lea d, [bp + -7] ; $t
13043  56F5 2A            mov b, [d]
13044  56F6 38 00 00      mov c, 0
13045  56F9 B0            cmp a, b
13046  56FA FD 82         sgeu ; >= (unsigned)
13047  56FC E4            pop a
13048  56FD             ; --- END RELATIONAL
13049  56FD C0 00 00      cmp b, 0
13050  5700 C6 39 57      je _if783_exit
13051  5703             _if783_TRUE:
13052  5703             ; r =r- t; 
13053  5703 FA FB FF      lea d, [bp + -5] ; $r
13054  5706 DA            push d
13055  5707 FA FB FF      lea d, [bp + -5] ; $r
13056  570A 2A            mov b, [d]
13057  570B 38 00 00      mov c, 0
13058  570E             ; --- START TERMS
13059  570E D7            push a
13060  570F 11            mov a, b
13061  5710 FA F9 FF      lea d, [bp + -7] ; $t
13062  5713 2A            mov b, [d]
13063  5714 38 00 00      mov c, 0
13064  5717 60            sub a, b
13065  5718 27            mov b, a
13066  5719 E4            pop a
13067  571A             ; --- END TERMS
13068  571A E7            pop d
13069  571B FD 43         mov [d], b
13070  571D             ; q = q + b; 
13071  571D FA FD FF      lea d, [bp + -3] ; $q
13072  5720 DA            push d
13073  5721 FA FD FF      lea d, [bp + -3] ; $q
13074  5724 2A            mov b, [d]
13075  5725 38 00 00      mov c, 0
13076  5728             ; --- START TERMS
13077  5728 D7            push a
13078  5729 11            mov a, b
13079  572A FA FF FF      lea d, [bp + -1] ; $b
13080  572D 2A            mov b, [d]
13081  572E 38 00 00      mov c, 0
13082  5731 56            add b, a
13083  5732 E4            pop a
13084  5733             ; --- END TERMS
13085  5733 E7            pop d
13086  5734 FD 43         mov [d], b
13087  5736 0A 39 57      jmp _if783_exit
13088  5739             _if783_exit:
13089  5739             ; b =b>> 2; 
13090  5739 FA FF FF      lea d, [bp + -1] ; $b
13091  573C DA            push d
13092  573D FA FF FF      lea d, [bp + -1] ; $b
13093  5740 2A            mov b, [d]
13094  5741 38 00 00      mov c, 0
13095  5744             ; --- START SHIFT
13096  5744 D7            push a
13097  5745 11            mov a, b
13098  5746 FD 2E 02 00   mov32 cb, $00000002
13098  574A 00 00 
13099  574C FD 39         mov c, b
13100  574E A1            shr a, cl
13101  574F 27            mov b, a
13102  5750 E4            pop a
13103  5751             ; --- END SHIFT
13104  5751 E7            pop d
13105  5752 FD 43         mov [d], b
13106  5754 0A A8 56      jmp _while782_cond
13107  5757             _while782_exit:
13108  5757             ; return q; 
13109  5757 FA FD FF      lea d, [bp + -3] ; $q
13110  575A 2A            mov b, [d]
13111  575B 38 00 00      mov c, 0
13112  575E F9            leave
13113  575F 09            ret
13114  5760             
13115  5760             square00:
13116  5760 F8 00 00      enter 0 ; (push bp; mov bp, sp)
13117  5763             ; if (abs(t) > 181) { 
13118  5763             _if784_cond:
13119  5763             ; --- START FUNCTION CALL
13120  5763 FA 05 00      lea d, [bp + 5] ; $t
13121  5766 2A            mov b, [d]
13122  5767 38 00 00      mov c, 0
13123  576A FD AB         swp b
13124  576C D8            push b
13125  576D 07 FA 65      call abs
13126  5770 51 02 00      add sp, 2
13127  5773             ; --- END FUNCTION CALL
13128  5773             ; --- START RELATIONAL
13129  5773 D7            push a
13130  5774 11            mov a, b
13131  5775 FD 2E B5 00   mov32 cb, $000000b5
13131  5779 00 00 
13132  577B B0            cmp a, b
13133  577C FD 7F         sgt ; >
13134  577E E4            pop a
13135  577F             ; --- END RELATIONAL
13136  577F C0 00 00      cmp b, 0
13137  5782 C6 CA 57      je _if784_else
13138  5785             _if784_TRUE:
13139  5785             ; t =t/ 10; 
13140  5785 FA 05 00      lea d, [bp + 5] ; $t
13141  5788 DA            push d
13142  5789 FA 05 00      lea d, [bp + 5] ; $t
13143  578C 2A            mov b, [d]
13144  578D 38 00 00      mov c, 0
13145  5790             ; --- START FACTORS
13146  5790 D7            push a
13147  5791 FD D8         push g
13148  5793 11            mov a, b
13149  5794 FD 7A         mov g, c
13150  5796 FD 2E 0A 00   mov32 cb, $0000000a
13150  579A 00 00 
13151  579C AE            div a, b
13152  579D FD 38         mov c, g
13153  579F 27            mov b, a
13154  57A0 FD F1         pop g
13155  57A2 E4            pop a
13156  57A3             ; --- END FACTORS
13157  57A3 E7            pop d
13158  57A4 FD 43         mov [d], b
13159  57A6             ; t =t* t; 
13160  57A6 FA 05 00      lea d, [bp + 5] ; $t
13161  57A9 DA            push d
13162  57AA FA 05 00      lea d, [bp + 5] ; $t
13163  57AD 2A            mov b, [d]
13164  57AE 38 00 00      mov c, 0
13165  57B1             ; --- START FACTORS
13166  57B1 D7            push a
13167  57B2 FD D8         push g
13168  57B4 11            mov a, b
13169  57B5 FD 7A         mov g, c
13170  57B7 FA 05 00      lea d, [bp + 5] ; $t
13171  57BA 2A            mov b, [d]
13172  57BB 38 00 00      mov c, 0
13173  57BE FD 38         mov c, g
13174  57C0 27            mov b, a
13175  57C1 FD F1         pop g
13176  57C3 E4            pop a
13177  57C4             ; --- END FACTORS
13178  57C4 E7            pop d
13179  57C5 FD 43         mov [d], b
13180  57C7 0A 0C 58      jmp _if784_exit
13181  57CA             _if784_else:
13182  57CA             ; t =t* t; 
13183  57CA FA 05 00      lea d, [bp + 5] ; $t
13184  57CD DA            push d
13185  57CE FA 05 00      lea d, [bp + 5] ; $t
13186  57D1 2A            mov b, [d]
13187  57D2 38 00 00      mov c, 0
13188  57D5             ; --- START FACTORS
13189  57D5 D7            push a
13190  57D6 FD D8         push g
13191  57D8 11            mov a, b
13192  57D9 FD 7A         mov g, c
13193  57DB FA 05 00      lea d, [bp + 5] ; $t
13194  57DE 2A            mov b, [d]
13195  57DF 38 00 00      mov c, 0
13196  57E2 FD 38         mov c, g
13197  57E4 27            mov b, a
13198  57E5 FD F1         pop g
13199  57E7 E4            pop a
13200  57E8             ; --- END FACTORS
13201  57E8 E7            pop d
13202  57E9 FD 43         mov [d], b
13203  57EB             ; t =t/ 100; 
13204  57EB FA 05 00      lea d, [bp + 5] ; $t
13205  57EE DA            push d
13206  57EF FA 05 00      lea d, [bp + 5] ; $t
13207  57F2 2A            mov b, [d]
13208  57F3 38 00 00      mov c, 0
13209  57F6             ; --- START FACTORS
13210  57F6 D7            push a
13211  57F7 FD D8         push g
13212  57F9 11            mov a, b
13213  57FA FD 7A         mov g, c
13214  57FC FD 2E 64 00   mov32 cb, $00000064
13214  5800 00 00 
13215  5802 AE            div a, b
13216  5803 FD 38         mov c, g
13217  5805 27            mov b, a
13218  5806 FD F1         pop g
13219  5808 E4            pop a
13220  5809             ; --- END FACTORS
13221  5809 E7            pop d
13222  580A FD 43         mov [d], b
13223  580C             _if784_exit:
13224  580C             ; return t; 
13225  580C FA 05 00      lea d, [bp + 5] ; $t
13226  580F 2A            mov b, [d]
13227  5810 38 00 00      mov c, 0
13228  5813 F9            leave
13229  5814 09            ret
13230  5815             
13231  5815             distance_to:
13232  5815 F8 00 00      enter 0 ; (push bp; mov bp, sp)
13233  5818             ; unsigned int         j; 
13234  5818 52 02 00      sub sp, 2
13235  581B             ; j = square00(TO_FIXED00(k->y) - ship_y); 
13236  581B FA FF FF      lea d, [bp + -1] ; $j
13237  581E DA            push d
13238  581F             ; --- START FUNCTION CALL
13239  581F             ; --- START FUNCTION CALL
13240  581F FA 05 00      lea d, [bp + 5] ; $k
13241  5822 FD 2A         mov d, [d]
13242  5824 58 00 00      add d, 0
13243  5827 32            mov bl, [d]
13244  5828 A7 00         mov bh, 0
13245  582A 38 00 00      mov c, 0
13246  582D FD AB         swp b
13247  582F D8            push b
13248  5830 07 54 04      call TO_FIXED00
13249  5833 51 02 00      add sp, 2
13250  5836             ; --- END FUNCTION CALL
13251  5836             ; --- START TERMS
13252  5836 D7            push a
13253  5837 11            mov a, b
13254  5838 3B A9 68      mov d, _ship_y ; $ship_y
13255  583B 2A            mov b, [d]
13256  583C 38 00 00      mov c, 0
13257  583F 60            sub a, b
13258  5840 27            mov b, a
13259  5841 E4            pop a
13260  5842             ; --- END TERMS
13261  5842 FD AB         swp b
13262  5844 D8            push b
13263  5845 07 60 57      call square00
13264  5848 51 02 00      add sp, 2
13265  584B             ; --- END FUNCTION CALL
13266  584B E7            pop d
13267  584C FD 43         mov [d], b
13268  584E             ; j = j + square00(TO_FIXED00(k->x) - ship_x); 
13269  584E FA FF FF      lea d, [bp + -1] ; $j
13270  5851 DA            push d
13271  5852 FA FF FF      lea d, [bp + -1] ; $j
13272  5855 2A            mov b, [d]
13273  5856 38 00 00      mov c, 0
13274  5859             ; --- START TERMS
13275  5859 D7            push a
13276  585A 11            mov a, b
13277  585B             ; --- START FUNCTION CALL
13278  585B             ; --- START FUNCTION CALL
13279  585B FA 05 00      lea d, [bp + 5] ; $k
13280  585E FD 2A         mov d, [d]
13281  5860 58 01 00      add d, 1
13282  5863 32            mov bl, [d]
13283  5864 A7 00         mov bh, 0
13284  5866 38 00 00      mov c, 0
13285  5869 FD AB         swp b
13286  586B D8            push b
13287  586C 07 54 04      call TO_FIXED00
13288  586F 51 02 00      add sp, 2
13289  5872             ; --- END FUNCTION CALL
13290  5872             ; --- START TERMS
13291  5872 D7            push a
13292  5873 11            mov a, b
13293  5874 3B AB 68      mov d, _ship_x ; $ship_x
13294  5877 2A            mov b, [d]
13295  5878 38 00 00      mov c, 0
13296  587B 60            sub a, b
13297  587C 27            mov b, a
13298  587D E4            pop a
13299  587E             ; --- END TERMS
13300  587E FD AB         swp b
13301  5880 D8            push b
13302  5881 07 60 57      call square00
13303  5884 51 02 00      add sp, 2
13304  5887             ; --- END FUNCTION CALL
13305  5887 56            add b, a
13306  5888 E4            pop a
13307  5889             ; --- END TERMS
13308  5889 E7            pop d
13309  588A FD 43         mov [d], b
13310  588C             ; j = isqrt(j); 
13311  588C FA FF FF      lea d, [bp + -1] ; $j
13312  588F DA            push d
13313  5890             ; --- START FUNCTION CALL
13314  5890 FA FF FF      lea d, [bp + -1] ; $j
13315  5893 2A            mov b, [d]
13316  5894 38 00 00      mov c, 0
13317  5897 FD AB         swp b
13318  5899 D8            push b
13319  589A 07 71 56      call isqrt
13320  589D 51 02 00      add sp, 2
13321  58A0             ; --- END FUNCTION CALL
13322  58A0 E7            pop d
13323  58A1 FD 43         mov [d], b
13324  58A3 F9            leave
13325  58A4 09            ret
13326  58A5             
13327  58A5             cint100:
13328  58A5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
13329  58A8             ; return (d + 50) / 100; 
13330  58A8 FA 05 00      lea d, [bp + 5] ; $d
13331  58AB 2A            mov b, [d]
13332  58AC 38 00 00      mov c, 0
13333  58AF             ; --- START TERMS
13334  58AF D7            push a
13335  58B0 11            mov a, b
13336  58B1 FD 2E 32 00   mov32 cb, $00000032
13336  58B5 00 00 
13337  58B7 56            add b, a
13338  58B8 E4            pop a
13339  58B9             ; --- END TERMS
13340  58B9             ; --- START FACTORS
13341  58B9 D7            push a
13342  58BA FD D8         push g
13343  58BC 11            mov a, b
13344  58BD FD 7A         mov g, c
13345  58BF FD 2E 64 00   mov32 cb, $00000064
13345  58C3 00 00 
13346  58C5 AE            div a, b
13347  58C6 FD 38         mov c, g
13348  58C8 27            mov b, a
13349  58C9 FD F1         pop g
13350  58CB E4            pop a
13351  58CC             ; --- END FACTORS
13352  58CC F9            leave
13353  58CD 09            ret
13354  58CE             
13355  58CE             showfile:
13356  58CE F8 00 00      enter 0 ; (push bp; mov bp, sp)
13357  58D1 F9            leave
13358  58D2 09            ret
13359  58D3             
13360  58D3             getchar:
13361  58D3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
13362  58D6             ; char c; 
13363  58D6 52 01 00      sub sp, 1
13364  58D9             ; --- BEGIN INLINE ASM SEGMENT
13365  58D9 19 01         mov al, 1
13366  58DB 05 03         syscall sys_io      
13367  58DD 1A            mov al, ah
13368  58DE FA 00 00      lea d, [bp + 0] ; $c
13369  58E1 3E            mov [d], al
13370  58E2             ; --- END INLINE ASM SEGMENT
13371  58E2             ; return c; 
13372  58E2 FA 00 00      lea d, [bp + 0] ; $c
13373  58E5 32            mov bl, [d]
13374  58E6 A7 00         mov bh, 0
13375  58E8 38 00 00      mov c, 0
13376  58EB F9            leave
13377  58EC 09            ret
13378  58ED             
13379  58ED             exit:
13380  58ED F8 00 00      enter 0 ; (push bp; mov bp, sp)
13381  58F0             ; --- BEGIN INLINE ASM SEGMENT
13382  58F0 05 0B         syscall sys_terminate_proc
13383  58F2             ; --- END INLINE ASM SEGMENT
13384  58F2 F9            leave
13385  58F3 09            ret
13386  58F4             
13387  58F4             tolower:
13388  58F4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
13389  58F7             ; if (ch >= 'A' && ch <= 'Z')  
13390  58F7             _if795_cond:
13391  58F7 FA 05 00      lea d, [bp + 5] ; $ch
13392  58FA 32            mov bl, [d]
13393  58FB A7 00         mov bh, 0
13394  58FD 38 00 00      mov c, 0
13395  5900             ; --- START RELATIONAL
13396  5900 D7            push a
13397  5901 11            mov a, b
13398  5902 FD 2E 41 00   mov32 cb, $00000041
13398  5906 00 00 
13399  5908 B0            cmp a, b
13400  5909 FD 80         sge ; >=
13401  590B E4            pop a
13402  590C             ; --- END RELATIONAL
13403  590C             ; --- START LOGICAL AND
13404  590C D7            push a
13405  590D 11            mov a, b
13406  590E FA 05 00      lea d, [bp + 5] ; $ch
13407  5911 32            mov bl, [d]
13408  5912 A7 00         mov bh, 0
13409  5914 38 00 00      mov c, 0
13410  5917             ; --- START RELATIONAL
13411  5917 D7            push a
13412  5918 11            mov a, b
13413  5919 FD 2E 5A 00   mov32 cb, $0000005a
13413  591D 00 00 
13414  591F B0            cmp a, b
13415  5920 FD 74         sle ; <= (signed)
13416  5922 E4            pop a
13417  5923             ; --- END RELATIONAL
13418  5923 FD A7         sand a, b
13419  5925 E4            pop a
13420  5926             ; --- END LOGICAL AND
13421  5926 C0 00 00      cmp b, 0
13422  5929 C6 4D 59      je _if795_else
13423  592C             _if795_TRUE:
13424  592C             ; return ch - 'A' + 'a'; 
13425  592C FA 05 00      lea d, [bp + 5] ; $ch
13426  592F 32            mov bl, [d]
13427  5930 A7 00         mov bh, 0
13428  5932 38 00 00      mov c, 0
13429  5935             ; --- START TERMS
13430  5935 D7            push a
13431  5936 11            mov a, b
13432  5937 FD 2E 41 00   mov32 cb, $00000041
13432  593B 00 00 
13433  593D 60            sub a, b
13434  593E 27            mov b, a
13435  593F 11            mov a, b
13436  5940 FD 2E 61 00   mov32 cb, $00000061
13436  5944 00 00 
13437  5946 56            add b, a
13438  5947 E4            pop a
13439  5948             ; --- END TERMS
13440  5948 F9            leave
13441  5949 09            ret
13442  594A 0A 58 59      jmp _if795_exit
13443  594D             _if795_else:
13444  594D             ; return ch; 
13445  594D FA 05 00      lea d, [bp + 5] ; $ch
13446  5950 32            mov bl, [d]
13447  5951 A7 00         mov bh, 0
13448  5953 38 00 00      mov c, 0
13449  5956 F9            leave
13450  5957 09            ret
13451  5958             _if795_exit:
13452  5958 F9            leave
13453  5959 09            ret
13454  595A             
13455  595A             rand:
13456  595A F8 00 00      enter 0 ; (push bp; mov bp, sp)
13457  595D             ; int  sec; 
13458  595D 52 02 00      sub sp, 2
13459  5960             ; --- BEGIN INLINE ASM SEGMENT
13460  5960 19 00         mov al, 0
13461  5962 05 01         syscall sys_rtc					
13462  5964 1A            mov al, ah
13463  5965 FA FF FF      lea d, [bp + -1] ; $sec
13464  5968 1E            mov al, [d]
13465  5969 22 00         mov ah, 0
13466  596B             ; --- END INLINE ASM SEGMENT
13467  596B             ; return sec; 
13468  596B FA FF FF      lea d, [bp + -1] ; $sec
13469  596E 2A            mov b, [d]
13470  596F 38 00 00      mov c, 0
13471  5972 F9            leave
13472  5973 09            ret
13473  5974             
13474  5974             strcpy:
13475  5974 F8 00 00      enter 0 ; (push bp; mov bp, sp)
13476  5977             ; char *psrc; 
13477  5977 52 02 00      sub sp, 2
13478  597A             ; char *pdest; 
13479  597A 52 02 00      sub sp, 2
13480  597D             ; psrc = src; 
13481  597D FA FF FF      lea d, [bp + -1] ; $psrc
13482  5980 DA            push d
13483  5981 FA 07 00      lea d, [bp + 7] ; $src
13484  5984 2A            mov b, [d]
13485  5985 38 00 00      mov c, 0
13486  5988 E7            pop d
13487  5989 FD 43         mov [d], b
13488  598B             ; pdest = dest; 
13489  598B FA FD FF      lea d, [bp + -3] ; $pdest
13490  598E DA            push d
13491  598F FA 05 00      lea d, [bp + 5] ; $dest
13492  5992 2A            mov b, [d]
13493  5993 38 00 00      mov c, 0
13494  5996 E7            pop d
13495  5997 FD 43         mov [d], b
13496  5999             ; while(*psrc) *pdest++ = *psrc++; 
13497  5999             _while796_cond:
13498  5999 FA FF FF      lea d, [bp + -1] ; $psrc
13499  599C 2A            mov b, [d]
13500  599D 38 00 00      mov c, 0
13501  59A0 74            mov d, b
13502  59A1 32            mov bl, [d]
13503  59A2 A7 00         mov bh, 0
13504  59A4 38 00 00      mov c, 0
13505  59A7 C0 00 00      cmp b, 0
13506  59AA C6 DB 59      je _while796_exit
13507  59AD             _while796_block:
13508  59AD             ; *pdest++ = *psrc++; 
13509  59AD FA FD FF      lea d, [bp + -3] ; $pdest
13510  59B0 2A            mov b, [d]
13511  59B1 38 00 00      mov c, 0
13512  59B4 FD 77         inc b
13513  59B6 FA FD FF      lea d, [bp + -3] ; $pdest
13514  59B9 FD 43         mov [d], b
13515  59BB FD 7D         dec b
13516  59BD D8            push b
13517  59BE FA FF FF      lea d, [bp + -1] ; $psrc
13518  59C1 2A            mov b, [d]
13519  59C2 38 00 00      mov c, 0
13520  59C5 FD 77         inc b
13521  59C7 FA FF FF      lea d, [bp + -1] ; $psrc
13522  59CA FD 43         mov [d], b
13523  59CC FD 7D         dec b
13524  59CE 74            mov d, b
13525  59CF 32            mov bl, [d]
13526  59D0 A7 00         mov bh, 0
13527  59D2 38 00 00      mov c, 0
13528  59D5 E7            pop d
13529  59D6 FD 3E         mov [d], bl
13530  59D8 0A 99 59      jmp _while796_cond
13531  59DB             _while796_exit:
13532  59DB             ; *pdest = '\0'; 
13533  59DB FA FD FF      lea d, [bp + -3] ; $pdest
13534  59DE 2A            mov b, [d]
13535  59DF 38 00 00      mov c, 0
13536  59E2 D8            push b
13537  59E3 FD 2E 00 00   mov32 cb, $00000000
13537  59E7 00 00 
13538  59E9 E7            pop d
13539  59EA FD 3E         mov [d], bl
13540  59EC F9            leave
13541  59ED 09            ret
13542  59EE             
13543  59EE             strcat:
13544  59EE F8 00 00      enter 0 ; (push bp; mov bp, sp)
13545  59F1             ; int dest_len; 
13546  59F1 52 02 00      sub sp, 2
13547  59F4             ; int i; 
13548  59F4 52 02 00      sub sp, 2
13549  59F7             ; dest_len = strlen(dest); 
13550  59F7 FA FF FF      lea d, [bp + -1] ; $dest_len
13551  59FA DA            push d
13552  59FB             ; --- START FUNCTION CALL
13553  59FB FA 05 00      lea d, [bp + 5] ; $dest
13554  59FE 2A            mov b, [d]
13555  59FF 38 00 00      mov c, 0
13556  5A02 FD AB         swp b
13557  5A04 D8            push b
13558  5A05 07 D1 5A      call strlen
13559  5A08 51 02 00      add sp, 2
13560  5A0B             ; --- END FUNCTION CALL
13561  5A0B E7            pop d
13562  5A0C FD 43         mov [d], b
13563  5A0E             ; for (i = 0; src[i] != 0; i=i+1) { 
13564  5A0E             _for797_init:
13565  5A0E FA FD FF      lea d, [bp + -3] ; $i
13566  5A11 DA            push d
13567  5A12 FD 2E 00 00   mov32 cb, $00000000
13567  5A16 00 00 
13568  5A18 E7            pop d
13569  5A19 FD 43         mov [d], b
13570  5A1B             _for797_cond:
13571  5A1B FA 07 00      lea d, [bp + 7] ; $src
13572  5A1E FD 2A         mov d, [d]
13573  5A20 D7            push a
13574  5A21 DA            push d
13575  5A22 FA FD FF      lea d, [bp + -3] ; $i
13576  5A25 2A            mov b, [d]
13577  5A26 38 00 00      mov c, 0
13578  5A29 E7            pop d
13579  5A2A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
13580  5A2E E4            pop a
13581  5A2F 32            mov bl, [d]
13582  5A30 A7 00         mov bh, 0
13583  5A32 38 00 00      mov c, 0
13584  5A35             ; --- START RELATIONAL
13585  5A35 D7            push a
13586  5A36 11            mov a, b
13587  5A37 FD 2E 00 00   mov32 cb, $00000000
13587  5A3B 00 00 
13588  5A3D B0            cmp a, b
13589  5A3E FD 72         sneq ; !=
13590  5A40 E4            pop a
13591  5A41             ; --- END RELATIONAL
13592  5A41 C0 00 00      cmp b, 0
13593  5A44 C6 9F 5A      je _for797_exit
13594  5A47             _for797_block:
13595  5A47             ; dest[dest_len + i] = src[i]; 
13596  5A47 FA 05 00      lea d, [bp + 5] ; $dest
13597  5A4A FD 2A         mov d, [d]
13598  5A4C D7            push a
13599  5A4D DA            push d
13600  5A4E FA FF FF      lea d, [bp + -1] ; $dest_len
13601  5A51 2A            mov b, [d]
13602  5A52 38 00 00      mov c, 0
13603  5A55             ; --- START TERMS
13604  5A55 D7            push a
13605  5A56 11            mov a, b
13606  5A57 FA FD FF      lea d, [bp + -3] ; $i
13607  5A5A 2A            mov b, [d]
13608  5A5B 38 00 00      mov c, 0
13609  5A5E 56            add b, a
13610  5A5F E4            pop a
13611  5A60             ; --- END TERMS
13612  5A60 E7            pop d
13613  5A61 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
13614  5A65 E4            pop a
13615  5A66 DA            push d
13616  5A67 FA 07 00      lea d, [bp + 7] ; $src
13617  5A6A FD 2A         mov d, [d]
13618  5A6C D7            push a
13619  5A6D DA            push d
13620  5A6E FA FD FF      lea d, [bp + -3] ; $i
13621  5A71 2A            mov b, [d]
13622  5A72 38 00 00      mov c, 0
13623  5A75 E7            pop d
13624  5A76 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
13625  5A7A E4            pop a
13626  5A7B 32            mov bl, [d]
13627  5A7C A7 00         mov bh, 0
13628  5A7E 38 00 00      mov c, 0
13629  5A81 E7            pop d
13630  5A82 FD 3E         mov [d], bl
13631  5A84             _for797_update:
13632  5A84 FA FD FF      lea d, [bp + -3] ; $i
13633  5A87 DA            push d
13634  5A88 FA FD FF      lea d, [bp + -3] ; $i
13635  5A8B 2A            mov b, [d]
13636  5A8C 38 00 00      mov c, 0
13637  5A8F             ; --- START TERMS
13638  5A8F D7            push a
13639  5A90 11            mov a, b
13640  5A91 FD 2E 01 00   mov32 cb, $00000001
13640  5A95 00 00 
13641  5A97 56            add b, a
13642  5A98 E4            pop a
13643  5A99             ; --- END TERMS
13644  5A99 E7            pop d
13645  5A9A FD 43         mov [d], b
13646  5A9C 0A 1B 5A      jmp _for797_cond
13647  5A9F             _for797_exit:
13648  5A9F             ; dest[dest_len + i] = 0; 
13649  5A9F FA 05 00      lea d, [bp + 5] ; $dest
13650  5AA2 FD 2A         mov d, [d]
13651  5AA4 D7            push a
13652  5AA5 DA            push d
13653  5AA6 FA FF FF      lea d, [bp + -1] ; $dest_len
13654  5AA9 2A            mov b, [d]
13655  5AAA 38 00 00      mov c, 0
13656  5AAD             ; --- START TERMS
13657  5AAD D7            push a
13658  5AAE 11            mov a, b
13659  5AAF FA FD FF      lea d, [bp + -3] ; $i
13660  5AB2 2A            mov b, [d]
13661  5AB3 38 00 00      mov c, 0
13662  5AB6 56            add b, a
13663  5AB7 E4            pop a
13664  5AB8             ; --- END TERMS
13665  5AB8 E7            pop d
13666  5AB9 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
13667  5ABD E4            pop a
13668  5ABE DA            push d
13669  5ABF FD 2E 00 00   mov32 cb, $00000000
13669  5AC3 00 00 
13670  5AC5 E7            pop d
13671  5AC6 FD 3E         mov [d], bl
13672  5AC8             ; return dest; 
13673  5AC8 FA 05 00      lea d, [bp + 5] ; $dest
13674  5ACB 2A            mov b, [d]
13675  5ACC 38 00 00      mov c, 0
13676  5ACF F9            leave
13677  5AD0 09            ret
13678  5AD1             
13679  5AD1             strlen:
13680  5AD1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
13681  5AD4             ; int length; 
13682  5AD4 52 02 00      sub sp, 2
13683  5AD7             ; length = 0; 
13684  5AD7 FA FF FF      lea d, [bp + -1] ; $length
13685  5ADA DA            push d
13686  5ADB FD 2E 00 00   mov32 cb, $00000000
13686  5ADF 00 00 
13687  5AE1 E7            pop d
13688  5AE2 FD 43         mov [d], b
13689  5AE4             ; while (str[length] != 0) { 
13690  5AE4             _while798_cond:
13691  5AE4 FA 05 00      lea d, [bp + 5] ; $str
13692  5AE7 FD 2A         mov d, [d]
13693  5AE9 D7            push a
13694  5AEA DA            push d
13695  5AEB FA FF FF      lea d, [bp + -1] ; $length
13696  5AEE 2A            mov b, [d]
13697  5AEF 38 00 00      mov c, 0
13698  5AF2 E7            pop d
13699  5AF3 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
13700  5AF7 E4            pop a
13701  5AF8 32            mov bl, [d]
13702  5AF9 A7 00         mov bh, 0
13703  5AFB 38 00 00      mov c, 0
13704  5AFE             ; --- START RELATIONAL
13705  5AFE D7            push a
13706  5AFF 11            mov a, b
13707  5B00 FD 2E 00 00   mov32 cb, $00000000
13707  5B04 00 00 
13708  5B06 B0            cmp a, b
13709  5B07 FD 72         sneq ; !=
13710  5B09 E4            pop a
13711  5B0A             ; --- END RELATIONAL
13712  5B0A C0 00 00      cmp b, 0
13713  5B0D C6 23 5B      je _while798_exit
13714  5B10             _while798_block:
13715  5B10             ; length++; 
13716  5B10 FA FF FF      lea d, [bp + -1] ; $length
13717  5B13 2A            mov b, [d]
13718  5B14 38 00 00      mov c, 0
13719  5B17 11            mov a, b
13720  5B18 FD 77         inc b
13721  5B1A FA FF FF      lea d, [bp + -1] ; $length
13722  5B1D FD 43         mov [d], b
13723  5B1F 27            mov b, a
13724  5B20 0A E4 5A      jmp _while798_cond
13725  5B23             _while798_exit:
13726  5B23             ; return length; 
13727  5B23 FA FF FF      lea d, [bp + -1] ; $length
13728  5B26 2A            mov b, [d]
13729  5B27 38 00 00      mov c, 0
13730  5B2A F9            leave
13731  5B2B 09            ret
13732  5B2C             
13733  5B2C             printf:
13734  5B2C F8 00 00      enter 0 ; (push bp; mov bp, sp)
13735  5B2F             ; char *p, *format_p; 
13736  5B2F 52 02 00      sub sp, 2
13737  5B32 52 02 00      sub sp, 2
13738  5B35             ; format_p = format; 
13739  5B35 FA FD FF      lea d, [bp + -3] ; $format_p
13740  5B38 DA            push d
13741  5B39 FA 05 00      lea d, [bp + 5] ; $format
13742  5B3C 2A            mov b, [d]
13743  5B3D 38 00 00      mov c, 0
13744  5B40 E7            pop d
13745  5B41 FD 43         mov [d], b
13746  5B43             ; p = &format + 2; 
13747  5B43 FA FF FF      lea d, [bp + -1] ; $p
13748  5B46 DA            push d
13749  5B47 FA 05 00      lea d, [bp + 5] ; $format
13750  5B4A 2D            mov b, d
13751  5B4B             ; --- START TERMS
13752  5B4B D7            push a
13753  5B4C 11            mov a, b
13754  5B4D FD 2E 02 00   mov32 cb, $00000002
13754  5B51 00 00 
13755  5B53 56            add b, a
13756  5B54 E4            pop a
13757  5B55             ; --- END TERMS
13758  5B55 E7            pop d
13759  5B56 FD 43         mov [d], b
13760  5B58             ; for(;;){ 
13761  5B58             _for799_init:
13762  5B58             _for799_cond:
13763  5B58             _for799_block:
13764  5B58             ; if(!*format_p) break; 
13765  5B58             _if800_cond:
13766  5B58 FA FD FF      lea d, [bp + -3] ; $format_p
13767  5B5B 2A            mov b, [d]
13768  5B5C 38 00 00      mov c, 0
13769  5B5F 74            mov d, b
13770  5B60 32            mov bl, [d]
13771  5B61 A7 00         mov bh, 0
13772  5B63 38 00 00      mov c, 0
13773  5B66 C0 00 00      cmp b, 0
13774  5B69 FD 71         seq ; !
13775  5B6B C0 00 00      cmp b, 0
13776  5B6E C6 77 5B      je _if800_else
13777  5B71             _if800_TRUE:
13778  5B71             ; break; 
13779  5B71 0A 27 5E      jmp _for799_exit ; for break
13780  5B74 0A 24 5E      jmp _if800_exit
13781  5B77             _if800_else:
13782  5B77             ; if(*format_p == '%'){ 
13783  5B77             _if801_cond:
13784  5B77 FA FD FF      lea d, [bp + -3] ; $format_p
13785  5B7A 2A            mov b, [d]
13786  5B7B 38 00 00      mov c, 0
13787  5B7E 74            mov d, b
13788  5B7F 32            mov bl, [d]
13789  5B80 A7 00         mov bh, 0
13790  5B82 38 00 00      mov c, 0
13791  5B85             ; --- START RELATIONAL
13792  5B85 D7            push a
13793  5B86 11            mov a, b
13794  5B87 FD 2E 25 00   mov32 cb, $00000025
13794  5B8B 00 00 
13795  5B8D B0            cmp a, b
13796  5B8E FD 71         seq ; ==
13797  5B90 E4            pop a
13798  5B91             ; --- END RELATIONAL
13799  5B91 C0 00 00      cmp b, 0
13800  5B94 C6 FF 5D      je _if801_else
13801  5B97             _if801_TRUE:
13802  5B97             ; format_p++; 
13803  5B97 FA FD FF      lea d, [bp + -3] ; $format_p
13804  5B9A 2A            mov b, [d]
13805  5B9B 38 00 00      mov c, 0
13806  5B9E FD 77         inc b
13807  5BA0 FA FD FF      lea d, [bp + -3] ; $format_p
13808  5BA3 FD 43         mov [d], b
13809  5BA5 FD 7D         dec b
13810  5BA7             ; switch(*format_p){ 
13811  5BA7             _switch802_expr:
13812  5BA7 FA FD FF      lea d, [bp + -3] ; $format_p
13813  5BAA 2A            mov b, [d]
13814  5BAB 38 00 00      mov c, 0
13815  5BAE 74            mov d, b
13816  5BAF 32            mov bl, [d]
13817  5BB0 A7 00         mov bh, 0
13818  5BB2 38 00 00      mov c, 0
13819  5BB5             _switch802_comparisons:
13820  5BB5 C1 6C         cmp bl, $6c
13821  5BB7 C6 E3 5B      je _switch802_case0
13822  5BBA C1 4C         cmp bl, $4c
13823  5BBC C6 E3 5B      je _switch802_case1
13824  5BBF C1 64         cmp bl, $64
13825  5BC1 C6 F3 5C      je _switch802_case2
13826  5BC4 C1 69         cmp bl, $69
13827  5BC6 C6 F3 5C      je _switch802_case3
13828  5BC9 C1 75         cmp bl, $75
13829  5BCB C6 23 5D      je _switch802_case4
13830  5BCE C1 78         cmp bl, $78
13831  5BD0 C6 53 5D      je _switch802_case5
13832  5BD3 C1 63         cmp bl, $63
13833  5BD5 C6 83 5D      je _switch802_case6
13834  5BD8 C1 73         cmp bl, $73
13835  5BDA C6 B3 5D      je _switch802_case7
13836  5BDD 0A E0 5D      jmp _switch802_default
13837  5BE0 0A EC 5D      jmp _switch802_exit
13838  5BE3             _switch802_case0:
13839  5BE3             _switch802_case1:
13840  5BE3             ; format_p++; 
13841  5BE3 FA FD FF      lea d, [bp + -3] ; $format_p
13842  5BE6 2A            mov b, [d]
13843  5BE7 38 00 00      mov c, 0
13844  5BEA FD 77         inc b
13845  5BEC FA FD FF      lea d, [bp + -3] ; $format_p
13846  5BEF FD 43         mov [d], b
13847  5BF1 FD 7D         dec b
13848  5BF3             ; if(*format_p == 'd' || *format_p == 'i') 
13849  5BF3             _if803_cond:
13850  5BF3 FA FD FF      lea d, [bp + -3] ; $format_p
13851  5BF6 2A            mov b, [d]
13852  5BF7 38 00 00      mov c, 0
13853  5BFA 74            mov d, b
13854  5BFB 32            mov bl, [d]
13855  5BFC A7 00         mov bh, 0
13856  5BFE 38 00 00      mov c, 0
13857  5C01             ; --- START RELATIONAL
13858  5C01 D7            push a
13859  5C02 11            mov a, b
13860  5C03 FD 2E 64 00   mov32 cb, $00000064
13860  5C07 00 00 
13861  5C09 B0            cmp a, b
13862  5C0A FD 71         seq ; ==
13863  5C0C E4            pop a
13864  5C0D             ; --- END RELATIONAL
13865  5C0D             ; --- START LOGICAL OR
13866  5C0D D7            push a
13867  5C0E 11            mov a, b
13868  5C0F FA FD FF      lea d, [bp + -3] ; $format_p
13869  5C12 2A            mov b, [d]
13870  5C13 38 00 00      mov c, 0
13871  5C16 74            mov d, b
13872  5C17 32            mov bl, [d]
13873  5C18 A7 00         mov bh, 0
13874  5C1A 38 00 00      mov c, 0
13875  5C1D             ; --- START RELATIONAL
13876  5C1D D7            push a
13877  5C1E 11            mov a, b
13878  5C1F FD 2E 69 00   mov32 cb, $00000069
13878  5C23 00 00 
13879  5C25 B0            cmp a, b
13880  5C26 FD 71         seq ; ==
13881  5C28 E4            pop a
13882  5C29             ; --- END RELATIONAL
13883  5C29 FD A8         sor a, b ; ||
13884  5C2B E4            pop a
13885  5C2C             ; --- END LOGICAL OR
13886  5C2C C0 00 00      cmp b, 0
13887  5C2F C6 50 5C      je _if803_else
13888  5C32             _if803_TRUE:
13889  5C32             ; print_signed_long(*(long *)p); 
13890  5C32             ; --- START FUNCTION CALL
13891  5C32 FA FF FF      lea d, [bp + -1] ; $p
13892  5C35 2A            mov b, [d]
13893  5C36 38 00 00      mov c, 0
13894  5C39 74            mov d, b
13895  5C3A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13896  5C3D FD 39         mov c, b ; And place it into C
13897  5C3F 2A            mov b, [d] ; Lower Word in B
13898  5C40 12            mov a, c
13899  5C41 FD AA         swp a
13900  5C43 D7            push a
13901  5C44 FD AB         swp b
13902  5C46 D8            push b
13903  5C47 07 29 5E      call print_signed_long
13904  5C4A 51 04 00      add sp, 4
13905  5C4D             ; --- END FUNCTION CALL
13906  5C4D 0A D8 5C      jmp _if803_exit
13907  5C50             _if803_else:
13908  5C50             ; if(*format_p == 'u') 
13909  5C50             _if804_cond:
13910  5C50 FA FD FF      lea d, [bp + -3] ; $format_p
13911  5C53 2A            mov b, [d]
13912  5C54 38 00 00      mov c, 0
13913  5C57 74            mov d, b
13914  5C58 32            mov bl, [d]
13915  5C59 A7 00         mov bh, 0
13916  5C5B 38 00 00      mov c, 0
13917  5C5E             ; --- START RELATIONAL
13918  5C5E D7            push a
13919  5C5F 11            mov a, b
13920  5C60 FD 2E 75 00   mov32 cb, $00000075
13920  5C64 00 00 
13921  5C66 B0            cmp a, b
13922  5C67 FD 71         seq ; ==
13923  5C69 E4            pop a
13924  5C6A             ; --- END RELATIONAL
13925  5C6A C0 00 00      cmp b, 0
13926  5C6D C6 8E 5C      je _if804_else
13927  5C70             _if804_TRUE:
13928  5C70             ; print_unsigned_long(*(unsigned long *)p); 
13929  5C70             ; --- START FUNCTION CALL
13930  5C70 FA FF FF      lea d, [bp + -1] ; $p
13931  5C73 2A            mov b, [d]
13932  5C74 38 00 00      mov c, 0
13933  5C77 74            mov d, b
13934  5C78 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13935  5C7B FD 39         mov c, b ; And place it into C
13936  5C7D 2A            mov b, [d] ; Lower Word in B
13937  5C7E 12            mov a, c
13938  5C7F FD AA         swp a
13939  5C81 D7            push a
13940  5C82 FD AB         swp b
13941  5C84 D8            push b
13942  5C85 07 B4 5F      call print_unsigned_long
13943  5C88 51 04 00      add sp, 4
13944  5C8B             ; --- END FUNCTION CALL
13945  5C8B 0A D8 5C      jmp _if804_exit
13946  5C8E             _if804_else:
13947  5C8E             ; if(*format_p == 'x') 
13948  5C8E             _if805_cond:
13949  5C8E FA FD FF      lea d, [bp + -3] ; $format_p
13950  5C91 2A            mov b, [d]
13951  5C92 38 00 00      mov c, 0
13952  5C95 74            mov d, b
13953  5C96 32            mov bl, [d]
13954  5C97 A7 00         mov bh, 0
13955  5C99 38 00 00      mov c, 0
13956  5C9C             ; --- START RELATIONAL
13957  5C9C D7            push a
13958  5C9D 11            mov a, b
13959  5C9E FD 2E 78 00   mov32 cb, $00000078
13959  5CA2 00 00 
13960  5CA4 B0            cmp a, b
13961  5CA5 FD 71         seq ; ==
13962  5CA7 E4            pop a
13963  5CA8             ; --- END RELATIONAL
13964  5CA8 C0 00 00      cmp b, 0
13965  5CAB C6 CC 5C      je _if805_else
13966  5CAE             _if805_TRUE:
13967  5CAE             ; printx32(*(long int *)p); 
13968  5CAE             ; --- START FUNCTION CALL
13969  5CAE FA FF FF      lea d, [bp + -1] ; $p
13970  5CB1 2A            mov b, [d]
13971  5CB2 38 00 00      mov c, 0
13972  5CB5 74            mov d, b
13973  5CB6 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13974  5CB9 FD 39         mov c, b ; And place it into C
13975  5CBB 2A            mov b, [d] ; Lower Word in B
13976  5CBC 12            mov a, c
13977  5CBD FD AA         swp a
13978  5CBF D7            push a
13979  5CC0 FD AB         swp b
13980  5CC2 D8            push b
13981  5CC3 07 E0 60      call printx32
13982  5CC6 51 04 00      add sp, 4
13983  5CC9             ; --- END FUNCTION CALL
13984  5CC9 0A D8 5C      jmp _if805_exit
13985  5CCC             _if805_else:
13986  5CCC             ; err("Unexpected format in printf."); 
13987  5CCC             ; --- START FUNCTION CALL
13988  5CCC 26 80 7D      mov b, _s169 ; "Unexpected format in printf."
13989  5CCF FD AB         swp b
13990  5CD1 D8            push b
13991  5CD2 07 40 61      call err
13992  5CD5 51 02 00      add sp, 2
13993  5CD8             ; --- END FUNCTION CALL
13994  5CD8             _if805_exit:
13995  5CD8             _if804_exit:
13996  5CD8             _if803_exit:
13997  5CD8             ; p = p + 4; 
13998  5CD8 FA FF FF      lea d, [bp + -1] ; $p
13999  5CDB DA            push d
14000  5CDC FA FF FF      lea d, [bp + -1] ; $p
14001  5CDF 2A            mov b, [d]
14002  5CE0 38 00 00      mov c, 0
14003  5CE3             ; --- START TERMS
14004  5CE3 D7            push a
14005  5CE4 11            mov a, b
14006  5CE5 FD 2E 04 00   mov32 cb, $00000004
14006  5CE9 00 00 
14007  5CEB 56            add b, a
14008  5CEC E4            pop a
14009  5CED             ; --- END TERMS
14010  5CED E7            pop d
14011  5CEE FD 43         mov [d], b
14012  5CF0             ; break; 
14013  5CF0 0A EC 5D      jmp _switch802_exit ; case break
14014  5CF3             _switch802_case2:
14015  5CF3             _switch802_case3:
14016  5CF3             ; print_signed(*(int*)p); 
14017  5CF3             ; --- START FUNCTION CALL
14018  5CF3 FA FF FF      lea d, [bp + -1] ; $p
14019  5CF6 2A            mov b, [d]
14020  5CF7 38 00 00      mov c, 0
14021  5CFA 74            mov d, b
14022  5CFB 2A            mov b, [d]
14023  5CFC 38 00 00      mov c, 0
14024  5CFF FD AB         swp b
14025  5D01 D8            push b
14026  5D02 07 6E 61      call print_signed
14027  5D05 51 02 00      add sp, 2
14028  5D08             ; --- END FUNCTION CALL
14029  5D08             ; p = p + 2; 
14030  5D08 FA FF FF      lea d, [bp + -1] ; $p
14031  5D0B DA            push d
14032  5D0C FA FF FF      lea d, [bp + -1] ; $p
14033  5D0F 2A            mov b, [d]
14034  5D10 38 00 00      mov c, 0
14035  5D13             ; --- START TERMS
14036  5D13 D7            push a
14037  5D14 11            mov a, b
14038  5D15 FD 2E 02 00   mov32 cb, $00000002
14038  5D19 00 00 
14039  5D1B 56            add b, a
14040  5D1C E4            pop a
14041  5D1D             ; --- END TERMS
14042  5D1D E7            pop d
14043  5D1E FD 43         mov [d], b
14044  5D20             ; break; 
14045  5D20 0A EC 5D      jmp _switch802_exit ; case break
14046  5D23             _switch802_case4:
14047  5D23             ; print_unsigned(*(unsigned int*)p); 
14048  5D23             ; --- START FUNCTION CALL
14049  5D23 FA FF FF      lea d, [bp + -1] ; $p
14050  5D26 2A            mov b, [d]
14051  5D27 38 00 00      mov c, 0
14052  5D2A 74            mov d, b
14053  5D2B 2A            mov b, [d]
14054  5D2C 38 00 00      mov c, 0
14055  5D2F FD AB         swp b
14056  5D31 D8            push b
14057  5D32 07 B7 62      call print_unsigned
14058  5D35 51 02 00      add sp, 2
14059  5D38             ; --- END FUNCTION CALL
14060  5D38             ; p = p + 2; 
14061  5D38 FA FF FF      lea d, [bp + -1] ; $p
14062  5D3B DA            push d
14063  5D3C FA FF FF      lea d, [bp + -1] ; $p
14064  5D3F 2A            mov b, [d]
14065  5D40 38 00 00      mov c, 0
14066  5D43             ; --- START TERMS
14067  5D43 D7            push a
14068  5D44 11            mov a, b
14069  5D45 FD 2E 02 00   mov32 cb, $00000002
14069  5D49 00 00 
14070  5D4B 56            add b, a
14071  5D4C E4            pop a
14072  5D4D             ; --- END TERMS
14073  5D4D E7            pop d
14074  5D4E FD 43         mov [d], b
14075  5D50             ; break; 
14076  5D50 0A EC 5D      jmp _switch802_exit ; case break
14077  5D53             _switch802_case5:
14078  5D53             ; printx16(*(int*)p); 
14079  5D53             ; --- START FUNCTION CALL
14080  5D53 FA FF FF      lea d, [bp + -1] ; $p
14081  5D56 2A            mov b, [d]
14082  5D57 38 00 00      mov c, 0
14083  5D5A 74            mov d, b
14084  5D5B 2A            mov b, [d]
14085  5D5C 38 00 00      mov c, 0
14086  5D5F FD AB         swp b
14087  5D61 D8            push b
14088  5D62 07 C7 63      call printx16
14089  5D65 51 02 00      add sp, 2
14090  5D68             ; --- END FUNCTION CALL
14091  5D68             ; p = p + 2; 
14092  5D68 FA FF FF      lea d, [bp + -1] ; $p
14093  5D6B DA            push d
14094  5D6C FA FF FF      lea d, [bp + -1] ; $p
14095  5D6F 2A            mov b, [d]
14096  5D70 38 00 00      mov c, 0
14097  5D73             ; --- START TERMS
14098  5D73 D7            push a
14099  5D74 11            mov a, b
14100  5D75 FD 2E 02 00   mov32 cb, $00000002
14100  5D79 00 00 
14101  5D7B 56            add b, a
14102  5D7C E4            pop a
14103  5D7D             ; --- END TERMS
14104  5D7D E7            pop d
14105  5D7E FD 43         mov [d], b
14106  5D80             ; break; 
14107  5D80 0A EC 5D      jmp _switch802_exit ; case break
14108  5D83             _switch802_case6:
14109  5D83             ; putchar(*(char*)p); 
14110  5D83             ; --- START FUNCTION CALL
14111  5D83 FA FF FF      lea d, [bp + -1] ; $p
14112  5D86 2A            mov b, [d]
14113  5D87 38 00 00      mov c, 0
14114  5D8A 74            mov d, b
14115  5D8B 32            mov bl, [d]
14116  5D8C A7 00         mov bh, 0
14117  5D8E 38 00 00      mov c, 0
14118  5D91 DD            push bl
14119  5D92 07 A6 5F      call putchar
14120  5D95 51 01 00      add sp, 1
14121  5D98             ; --- END FUNCTION CALL
14122  5D98             ; p = p + 1; 
14123  5D98 FA FF FF      lea d, [bp + -1] ; $p
14124  5D9B DA            push d
14125  5D9C FA FF FF      lea d, [bp + -1] ; $p
14126  5D9F 2A            mov b, [d]
14127  5DA0 38 00 00      mov c, 0
14128  5DA3             ; --- START TERMS
14129  5DA3 D7            push a
14130  5DA4 11            mov a, b
14131  5DA5 FD 2E 01 00   mov32 cb, $00000001
14131  5DA9 00 00 
14132  5DAB 56            add b, a
14133  5DAC E4            pop a
14134  5DAD             ; --- END TERMS
14135  5DAD E7            pop d
14136  5DAE FD 43         mov [d], b
14137  5DB0             ; break; 
14138  5DB0 0A EC 5D      jmp _switch802_exit ; case break
14139  5DB3             _switch802_case7:
14140  5DB3             ; print(*(char**)p); 
14141  5DB3             ; --- START FUNCTION CALL
14142  5DB3 FA FF FF      lea d, [bp + -1] ; $p
14143  5DB6 2A            mov b, [d]
14144  5DB7 38 00 00      mov c, 0
14145  5DBA 74            mov d, b
14146  5DBB 2A            mov b, [d]
14147  5DBC FD AB         swp b
14148  5DBE D8            push b
14149  5DBF 07 55 61      call print
14150  5DC2 51 02 00      add sp, 2
14151  5DC5             ; --- END FUNCTION CALL
14152  5DC5             ; p = p + 2; 
14153  5DC5 FA FF FF      lea d, [bp + -1] ; $p
14154  5DC8 DA            push d
14155  5DC9 FA FF FF      lea d, [bp + -1] ; $p
14156  5DCC 2A            mov b, [d]
14157  5DCD 38 00 00      mov c, 0
14158  5DD0             ; --- START TERMS
14159  5DD0 D7            push a
14160  5DD1 11            mov a, b
14161  5DD2 FD 2E 02 00   mov32 cb, $00000002
14161  5DD6 00 00 
14162  5DD8 56            add b, a
14163  5DD9 E4            pop a
14164  5DDA             ; --- END TERMS
14165  5DDA E7            pop d
14166  5DDB FD 43         mov [d], b
14167  5DDD             ; break; 
14168  5DDD 0A EC 5D      jmp _switch802_exit ; case break
14169  5DE0             _switch802_default:
14170  5DE0             ; print("Error: Unknown argument type.\n"); 
14171  5DE0             ; --- START FUNCTION CALL
14172  5DE0 26 9D 7D      mov b, _s170 ; "Error: Unknown argument type.\n"
14173  5DE3 FD AB         swp b
14174  5DE5 D8            push b
14175  5DE6 07 55 61      call print
14176  5DE9 51 02 00      add sp, 2
14177  5DEC             ; --- END FUNCTION CALL
14178  5DEC             _switch802_exit:
14179  5DEC             ; format_p++; 
14180  5DEC FA FD FF      lea d, [bp + -3] ; $format_p
14181  5DEF 2A            mov b, [d]
14182  5DF0 38 00 00      mov c, 0
14183  5DF3 FD 77         inc b
14184  5DF5 FA FD FF      lea d, [bp + -3] ; $format_p
14185  5DF8 FD 43         mov [d], b
14186  5DFA FD 7D         dec b
14187  5DFC 0A 24 5E      jmp _if801_exit
14188  5DFF             _if801_else:
14189  5DFF             ; putchar(*format_p); 
14190  5DFF             ; --- START FUNCTION CALL
14191  5DFF FA FD FF      lea d, [bp + -3] ; $format_p
14192  5E02 2A            mov b, [d]
14193  5E03 38 00 00      mov c, 0
14194  5E06 74            mov d, b
14195  5E07 32            mov bl, [d]
14196  5E08 A7 00         mov bh, 0
14197  5E0A 38 00 00      mov c, 0
14198  5E0D DD            push bl
14199  5E0E 07 A6 5F      call putchar
14200  5E11 51 01 00      add sp, 1
14201  5E14             ; --- END FUNCTION CALL
14202  5E14             ; format_p++; 
14203  5E14 FA FD FF      lea d, [bp + -3] ; $format_p
14204  5E17 2A            mov b, [d]
14205  5E18 38 00 00      mov c, 0
14206  5E1B FD 77         inc b
14207  5E1D FA FD FF      lea d, [bp + -3] ; $format_p
14208  5E20 FD 43         mov [d], b
14209  5E22 FD 7D         dec b
14210  5E24             _if801_exit:
14211  5E24             _if800_exit:
14212  5E24             _for799_update:
14213  5E24 0A 58 5B      jmp _for799_cond
14214  5E27             _for799_exit:
14215  5E27 F9            leave
14216  5E28 09            ret
14217  5E29             
14218  5E29             print_signed_long:
14219  5E29 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14220  5E2C             ; char digits[10]; 
14221  5E2C 52 0A 00      sub sp, 10
14222  5E2F             ; int i = 0; 
14223  5E2F 52 02 00      sub sp, 2
14224  5E32             ; --- START LOCAL VAR INITIALIZATION
14225  5E32 FA F5 FF      lea d, [bp + -11] ; $i
14226  5E35 DA            push d
14227  5E36 FD 2E 00 00   mov32 cb, $00000000
14227  5E3A 00 00 
14228  5E3C E7            pop d
14229  5E3D FD 43         mov [d], b
14230  5E3F             ; --- END LOCAL VAR INITIALIZATION
14231  5E3F             ; if (num < 0) { 
14232  5E3F             _if806_cond:
14233  5E3F FA 05 00      lea d, [bp + 5] ; $num
14234  5E42 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
14235  5E45 FD 39         mov c, b ; And place it into C
14236  5E47 2A            mov b, [d] ; Lower Word in B
14237  5E48             ; --- START RELATIONAL
14238  5E48 D7            push a
14239  5E49 FD D8         push g
14240  5E4B 11            mov a, b
14241  5E4C FD 7A         mov g, c
14242  5E4E FD 2E 00 00   mov32 cb, $00000000
14242  5E52 00 00 
14243  5E54 FD AF         cmp32 ga, cb
14244  5E56 FD 73         slt ; <
14245  5E58 FD F1         pop g
14246  5E5A E4            pop a
14247  5E5B             ; --- END RELATIONAL
14248  5E5B C0 00 00      cmp b, 0
14249  5E5E C6 90 5E      je _if806_else
14250  5E61             _if806_TRUE:
14251  5E61             ; putchar('-'); 
14252  5E61             ; --- START FUNCTION CALL
14253  5E61 FD 2E 2D 00   mov32 cb, $0000002d
14253  5E65 00 00 
14254  5E67 DD            push bl
14255  5E68 07 A6 5F      call putchar
14256  5E6B 51 01 00      add sp, 1
14257  5E6E             ; --- END FUNCTION CALL
14258  5E6E             ; num = -num; 
14259  5E6E FA 05 00      lea d, [bp + 5] ; $num
14260  5E71 DA            push d
14261  5E72 FA 05 00      lea d, [bp + 5] ; $num
14262  5E75 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
14263  5E78 FD 39         mov c, b ; And place it into C
14264  5E7A 2A            mov b, [d] ; Lower Word in B
14265  5E7B 12            mov a, c
14266  5E7C 95            not a
14267  5E7D 97            not b
14268  5E7E 55 01 00      add b, 1
14269  5E81 5B 00 00      adc a, 0
14270  5E84 39            mov c, a
14271  5E85 E7            pop d
14272  5E86 FD 43         mov [d], b
14273  5E88 28            mov b, c
14274  5E89 FD 44 02 00   mov [d + 2], b
14275  5E8D 0A C4 5E      jmp _if806_exit
14276  5E90             _if806_else:
14277  5E90             ; if (num == 0) { 
14278  5E90             _if807_cond:
14279  5E90 FA 05 00      lea d, [bp + 5] ; $num
14280  5E93 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
14281  5E96 FD 39         mov c, b ; And place it into C
14282  5E98 2A            mov b, [d] ; Lower Word in B
14283  5E99             ; --- START RELATIONAL
14284  5E99 D7            push a
14285  5E9A FD D8         push g
14286  5E9C 11            mov a, b
14287  5E9D FD 7A         mov g, c
14288  5E9F FD 2E 00 00   mov32 cb, $00000000
14288  5EA3 00 00 
14289  5EA5 FD AF         cmp32 ga, cb
14290  5EA7 FD 71         seq ; ==
14291  5EA9 FD F1         pop g
14292  5EAB E4            pop a
14293  5EAC             ; --- END RELATIONAL
14294  5EAC C0 00 00      cmp b, 0
14295  5EAF C6 C4 5E      je _if807_exit
14296  5EB2             _if807_TRUE:
14297  5EB2             ; putchar('0'); 
14298  5EB2             ; --- START FUNCTION CALL
14299  5EB2 FD 2E 30 00   mov32 cb, $00000030
14299  5EB6 00 00 
14300  5EB8 DD            push bl
14301  5EB9 07 A6 5F      call putchar
14302  5EBC 51 01 00      add sp, 1
14303  5EBF             ; --- END FUNCTION CALL
14304  5EBF             ; return; 
14305  5EBF F9            leave
14306  5EC0 09            ret
14307  5EC1 0A C4 5E      jmp _if807_exit
14308  5EC4             _if807_exit:
14309  5EC4             _if806_exit:
14310  5EC4             ; while (num > 0) { 
14311  5EC4             _while808_cond:
14312  5EC4 FA 05 00      lea d, [bp + 5] ; $num
14313  5EC7 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
14314  5ECA FD 39         mov c, b ; And place it into C
14315  5ECC 2A            mov b, [d] ; Lower Word in B
14316  5ECD             ; --- START RELATIONAL
14317  5ECD D7            push a
14318  5ECE FD D8         push g
14319  5ED0 11            mov a, b
14320  5ED1 FD 7A         mov g, c
14321  5ED3 FD 2E 00 00   mov32 cb, $00000000
14321  5ED7 00 00 
14322  5ED9 FD AF         cmp32 ga, cb
14323  5EDB FD 7F         sgt
14324  5EDD FD F1         pop g
14325  5EDF E4            pop a
14326  5EE0             ; --- END RELATIONAL
14327  5EE0 C0 00 00      cmp b, 0
14328  5EE3 C6 5C 5F      je _while808_exit
14329  5EE6             _while808_block:
14330  5EE6             ; digits[i] = '0' + (num % 10); 
14331  5EE6 FA F7 FF      lea d, [bp + -9] ; $digits
14332  5EE9 D7            push a
14333  5EEA DA            push d
14334  5EEB FA F5 FF      lea d, [bp + -11] ; $i
14335  5EEE 2A            mov b, [d]
14336  5EEF 38 00 00      mov c, 0
14337  5EF2 E7            pop d
14338  5EF3 5A            add d, b
14339  5EF4 E4            pop a
14340  5EF5 DA            push d
14341  5EF6 FD 2E 30 00   mov32 cb, $00000030
14341  5EFA 00 00 
14342  5EFC             ; --- START TERMS
14343  5EFC D7            push a
14344  5EFD 11            mov a, b
14345  5EFE FA 05 00      lea d, [bp + 5] ; $num
14346  5F01 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
14347  5F04 FD 39         mov c, b ; And place it into C
14348  5F06 2A            mov b, [d] ; Lower Word in B
14349  5F07             ; --- START FACTORS
14350  5F07 D7            push a
14351  5F08 FD D8         push g
14352  5F0A 11            mov a, b
14353  5F0B FD 7A         mov g, c
14354  5F0D FD 2E 0A 00   mov32 cb, $0000000a
14354  5F11 00 00 
14355  5F13 AE            div a, b ; 
14356  5F14 11            mov a, b
14357  5F15 FD 38         mov c, g
14358  5F17 27            mov b, a
14359  5F18 FD F1         pop g
14360  5F1A E4            pop a
14361  5F1B             ; --- END FACTORS
14362  5F1B FD 15         add32 cb, ga
14363  5F1D E4            pop a
14364  5F1E             ; --- END TERMS
14365  5F1E E7            pop d
14366  5F1F FD 3E         mov [d], bl
14367  5F21             ; num = num / 10; 
14368  5F21 FA 05 00      lea d, [bp + 5] ; $num
14369  5F24 DA            push d
14370  5F25 FA 05 00      lea d, [bp + 5] ; $num
14371  5F28 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
14372  5F2B FD 39         mov c, b ; And place it into C
14373  5F2D 2A            mov b, [d] ; Lower Word in B
14374  5F2E             ; --- START FACTORS
14375  5F2E D7            push a
14376  5F2F FD D8         push g
14377  5F31 11            mov a, b
14378  5F32 FD 7A         mov g, c
14379  5F34 FD 2E 0A 00   mov32 cb, $0000000a
14379  5F38 00 00 
14380  5F3A AE            div a, b
14381  5F3B FD 38         mov c, g
14382  5F3D 27            mov b, a
14383  5F3E FD F1         pop g
14384  5F40 E4            pop a
14385  5F41             ; --- END FACTORS
14386  5F41 E7            pop d
14387  5F42 FD 43         mov [d], b
14388  5F44 28            mov b, c
14389  5F45 FD 44 02 00   mov [d + 2], b
14390  5F49             ; i++; 
14391  5F49 FA F5 FF      lea d, [bp + -11] ; $i
14392  5F4C 2A            mov b, [d]
14393  5F4D 38 00 00      mov c, 0
14394  5F50 11            mov a, b
14395  5F51 FD 77         inc b
14396  5F53 FA F5 FF      lea d, [bp + -11] ; $i
14397  5F56 FD 43         mov [d], b
14398  5F58 27            mov b, a
14399  5F59 0A C4 5E      jmp _while808_cond
14400  5F5C             _while808_exit:
14401  5F5C             ; while (i > 0) { 
14402  5F5C             _while815_cond:
14403  5F5C FA F5 FF      lea d, [bp + -11] ; $i
14404  5F5F 2A            mov b, [d]
14405  5F60 38 00 00      mov c, 0
14406  5F63             ; --- START RELATIONAL
14407  5F63 D7            push a
14408  5F64 11            mov a, b
14409  5F65 FD 2E 00 00   mov32 cb, $00000000
14409  5F69 00 00 
14410  5F6B B0            cmp a, b
14411  5F6C FD 7F         sgt ; >
14412  5F6E E4            pop a
14413  5F6F             ; --- END RELATIONAL
14414  5F6F C0 00 00      cmp b, 0
14415  5F72 C6 A4 5F      je _while815_exit
14416  5F75             _while815_block:
14417  5F75             ; i--; 
14418  5F75 FA F5 FF      lea d, [bp + -11] ; $i
14419  5F78 2A            mov b, [d]
14420  5F79 38 00 00      mov c, 0
14421  5F7C 11            mov a, b
14422  5F7D FD 7D         dec b
14423  5F7F FA F5 FF      lea d, [bp + -11] ; $i
14424  5F82 FD 43         mov [d], b
14425  5F84 27            mov b, a
14426  5F85             ; putchar(digits[i]); 
14427  5F85             ; --- START FUNCTION CALL
14428  5F85 FA F7 FF      lea d, [bp + -9] ; $digits
14429  5F88 D7            push a
14430  5F89 DA            push d
14431  5F8A FA F5 FF      lea d, [bp + -11] ; $i
14432  5F8D 2A            mov b, [d]
14433  5F8E 38 00 00      mov c, 0
14434  5F91 E7            pop d
14435  5F92 5A            add d, b
14436  5F93 E4            pop a
14437  5F94 32            mov bl, [d]
14438  5F95 A7 00         mov bh, 0
14439  5F97 38 00 00      mov c, 0
14440  5F9A DD            push bl
14441  5F9B 07 A6 5F      call putchar
14442  5F9E 51 01 00      add sp, 1
14443  5FA1             ; --- END FUNCTION CALL
14444  5FA1 0A 5C 5F      jmp _while815_cond
14445  5FA4             _while815_exit:
14446  5FA4 F9            leave
14447  5FA5 09            ret
14448  5FA6             
14449  5FA6             putchar:
14450  5FA6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14451  5FA9             ; --- BEGIN INLINE ASM SEGMENT
14452  5FA9 FA 05 00      lea d, [bp + 5] ; $c
14453  5FAC 1E            mov al, [d]
14454  5FAD 23            mov ah, al
14455  5FAE 19 00         mov al, 0
14456  5FB0 05 03         syscall sys_io      
14457  5FB2             ; --- END INLINE ASM SEGMENT
14458  5FB2 F9            leave
14459  5FB3 09            ret
14460  5FB4             
14461  5FB4             print_unsigned_long:
14462  5FB4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14463  5FB7             ; char digits[10]; 
14464  5FB7 52 0A 00      sub sp, 10
14465  5FBA             ; int i; 
14466  5FBA 52 02 00      sub sp, 2
14467  5FBD             ; i = 0; 
14468  5FBD FA F5 FF      lea d, [bp + -11] ; $i
14469  5FC0 DA            push d
14470  5FC1 FD 2E 00 00   mov32 cb, $00000000
14470  5FC5 00 00 
14471  5FC7 E7            pop d
14472  5FC8 FD 43         mov [d], b
14473  5FCA             ; if(num == 0){ 
14474  5FCA             _if816_cond:
14475  5FCA FA 05 00      lea d, [bp + 5] ; $num
14476  5FCD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
14477  5FD0 FD 39         mov c, b ; And place it into C
14478  5FD2 2A            mov b, [d] ; Lower Word in B
14479  5FD3             ; --- START RELATIONAL
14480  5FD3 D7            push a
14481  5FD4 FD D8         push g
14482  5FD6 11            mov a, b
14483  5FD7 FD 7A         mov g, c
14484  5FD9 FD 2E 00 00   mov32 cb, $00000000
14484  5FDD 00 00 
14485  5FDF FD AF         cmp32 ga, cb
14486  5FE1 FD 71         seq ; ==
14487  5FE3 FD F1         pop g
14488  5FE5 E4            pop a
14489  5FE6             ; --- END RELATIONAL
14490  5FE6 C0 00 00      cmp b, 0
14491  5FE9 C6 FE 5F      je _if816_exit
14492  5FEC             _if816_TRUE:
14493  5FEC             ; putchar('0'); 
14494  5FEC             ; --- START FUNCTION CALL
14495  5FEC FD 2E 30 00   mov32 cb, $00000030
14495  5FF0 00 00 
14496  5FF2 DD            push bl
14497  5FF3 07 A6 5F      call putchar
14498  5FF6 51 01 00      add sp, 1
14499  5FF9             ; --- END FUNCTION CALL
14500  5FF9             ; return; 
14501  5FF9 F9            leave
14502  5FFA 09            ret
14503  5FFB 0A FE 5F      jmp _if816_exit
14504  5FFE             _if816_exit:
14505  5FFE             ; while (num > 0) { 
14506  5FFE             _while817_cond:
14507  5FFE FA 05 00      lea d, [bp + 5] ; $num
14508  6001 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
14509  6004 FD 39         mov c, b ; And place it into C
14510  6006 2A            mov b, [d] ; Lower Word in B
14511  6007             ; --- START RELATIONAL
14512  6007 D7            push a
14513  6008 FD D8         push g
14514  600A 11            mov a, b
14515  600B FD 7A         mov g, c
14516  600D FD 2E 00 00   mov32 cb, $00000000
14516  6011 00 00 
14517  6013 FD AF         cmp32 ga, cb
14518  6015 FD 81         sgu
14519  6017 FD F1         pop g
14520  6019 E4            pop a
14521  601A             ; --- END RELATIONAL
14522  601A C0 00 00      cmp b, 0
14523  601D C6 96 60      je _while817_exit
14524  6020             _while817_block:
14525  6020             ; digits[i] = '0' + (num % 10); 
14526  6020 FA F7 FF      lea d, [bp + -9] ; $digits
14527  6023 D7            push a
14528  6024 DA            push d
14529  6025 FA F5 FF      lea d, [bp + -11] ; $i
14530  6028 2A            mov b, [d]
14531  6029 38 00 00      mov c, 0
14532  602C E7            pop d
14533  602D 5A            add d, b
14534  602E E4            pop a
14535  602F DA            push d
14536  6030 FD 2E 30 00   mov32 cb, $00000030
14536  6034 00 00 
14537  6036             ; --- START TERMS
14538  6036 D7            push a
14539  6037 11            mov a, b
14540  6038 FA 05 00      lea d, [bp + 5] ; $num
14541  603B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
14542  603E FD 39         mov c, b ; And place it into C
14543  6040 2A            mov b, [d] ; Lower Word in B
14544  6041             ; --- START FACTORS
14545  6041 D7            push a
14546  6042 FD D8         push g
14547  6044 11            mov a, b
14548  6045 FD 7A         mov g, c
14549  6047 FD 2E 0A 00   mov32 cb, $0000000a
14549  604B 00 00 
14550  604D AE            div a, b ; 
14551  604E 11            mov a, b
14552  604F FD 38         mov c, g
14553  6051 27            mov b, a
14554  6052 FD F1         pop g
14555  6054 E4            pop a
14556  6055             ; --- END FACTORS
14557  6055 FD 15         add32 cb, ga
14558  6057 E4            pop a
14559  6058             ; --- END TERMS
14560  6058 E7            pop d
14561  6059 FD 3E         mov [d], bl
14562  605B             ; num = num / 10; 
14563  605B FA 05 00      lea d, [bp + 5] ; $num
14564  605E DA            push d
14565  605F FA 05 00      lea d, [bp + 5] ; $num
14566  6062 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
14567  6065 FD 39         mov c, b ; And place it into C
14568  6067 2A            mov b, [d] ; Lower Word in B
14569  6068             ; --- START FACTORS
14570  6068 D7            push a
14571  6069 FD D8         push g
14572  606B 11            mov a, b
14573  606C FD 7A         mov g, c
14574  606E FD 2E 0A 00   mov32 cb, $0000000a
14574  6072 00 00 
14575  6074 AE            div a, b
14576  6075 FD 38         mov c, g
14577  6077 27            mov b, a
14578  6078 FD F1         pop g
14579  607A E4            pop a
14580  607B             ; --- END FACTORS
14581  607B E7            pop d
14582  607C FD 43         mov [d], b
14583  607E 28            mov b, c
14584  607F FD 44 02 00   mov [d + 2], b
14585  6083             ; i++; 
14586  6083 FA F5 FF      lea d, [bp + -11] ; $i
14587  6086 2A            mov b, [d]
14588  6087 38 00 00      mov c, 0
14589  608A 11            mov a, b
14590  608B FD 77         inc b
14591  608D FA F5 FF      lea d, [bp + -11] ; $i
14592  6090 FD 43         mov [d], b
14593  6092 27            mov b, a
14594  6093 0A FE 5F      jmp _while817_cond
14595  6096             _while817_exit:
14596  6096             ; while (i > 0) { 
14597  6096             _while824_cond:
14598  6096 FA F5 FF      lea d, [bp + -11] ; $i
14599  6099 2A            mov b, [d]
14600  609A 38 00 00      mov c, 0
14601  609D             ; --- START RELATIONAL
14602  609D D7            push a
14603  609E 11            mov a, b
14604  609F FD 2E 00 00   mov32 cb, $00000000
14604  60A3 00 00 
14605  60A5 B0            cmp a, b
14606  60A6 FD 7F         sgt ; >
14607  60A8 E4            pop a
14608  60A9             ; --- END RELATIONAL
14609  60A9 C0 00 00      cmp b, 0
14610  60AC C6 DE 60      je _while824_exit
14611  60AF             _while824_block:
14612  60AF             ; i--; 
14613  60AF FA F5 FF      lea d, [bp + -11] ; $i
14614  60B2 2A            mov b, [d]
14615  60B3 38 00 00      mov c, 0
14616  60B6 11            mov a, b
14617  60B7 FD 7D         dec b
14618  60B9 FA F5 FF      lea d, [bp + -11] ; $i
14619  60BC FD 43         mov [d], b
14620  60BE 27            mov b, a
14621  60BF             ; putchar(digits[i]); 
14622  60BF             ; --- START FUNCTION CALL
14623  60BF FA F7 FF      lea d, [bp + -9] ; $digits
14624  60C2 D7            push a
14625  60C3 DA            push d
14626  60C4 FA F5 FF      lea d, [bp + -11] ; $i
14627  60C7 2A            mov b, [d]
14628  60C8 38 00 00      mov c, 0
14629  60CB E7            pop d
14630  60CC 5A            add d, b
14631  60CD E4            pop a
14632  60CE 32            mov bl, [d]
14633  60CF A7 00         mov bh, 0
14634  60D1 38 00 00      mov c, 0
14635  60D4 DD            push bl
14636  60D5 07 A6 5F      call putchar
14637  60D8 51 01 00      add sp, 1
14638  60DB             ; --- END FUNCTION CALL
14639  60DB 0A 96 60      jmp _while824_cond
14640  60DE             _while824_exit:
14641  60DE F9            leave
14642  60DF 09            ret
14643  60E0             
14644  60E0             printx32:
14645  60E0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14646  60E3             ; --- BEGIN INLINE ASM SEGMENT
14647  60E3 FA 05 00      lea d, [bp + 5] ; $hex
14648  60E6 2B 02 00      mov b, [d+2]
14649  60E9 07 F2 60      call print_u16x_printx32
14650  60EC 2A            mov b, [d]
14651  60ED 07 F2 60      call print_u16x_printx32
14652  60F0             ; --- END INLINE ASM SEGMENT
14653  60F0             ; return; 
14654  60F0 F9            leave
14655  60F1 09            ret
14656  60F2             ; --- BEGIN INLINE ASM SEGMENT
14657  60F2             print_u16x_printx32:
14658  60F2 D7            push a
14659  60F3 D8            push b
14660  60F4 DD            push bl
14661  60F5 30            mov bl, bh
14662  60F6 07 14 61      call _itoa_printx32        
14663  60F9 2F            mov bl, al        
14664  60FA 19 00         mov al, 0
14665  60FC 05 03         syscall sys_io        
14666  60FE 24            mov ah, bl        
14667  60FF 19 00         mov al, 0
14668  6101 05 03         syscall sys_io        
14669  6103 EA            pop bl
14670  6104 07 14 61      call _itoa_printx32        
14671  6107 2F            mov bl, al        
14672  6108 19 00         mov al, 0
14673  610A 05 03         syscall sys_io        
14674  610C 24            mov ah, bl        
14675  610D 19 00         mov al, 0
14676  610F 05 03         syscall sys_io        
14677  6111 E5            pop b
14678  6112 E4            pop a
14679  6113 09            ret
14680  6114             _itoa_printx32:
14681  6114 DA            push d
14682  6115 D8            push b
14683  6116 A7 00         mov bh, 0
14684  6118 FD A4 04      shr bl, 4  
14685  611B 74            mov d, b
14686  611C 1F 2E 61      mov al, [d + s_hex_digits_printx32]
14687  611F 23            mov ah, al
14688  6120 E5            pop b
14689  6121 D8            push b
14690  6122 A7 00         mov bh, 0
14691  6124 FD 87 0F      and bl, $0F
14692  6127 74            mov d, b
14693  6128 1F 2E 61      mov al, [d + s_hex_digits_printx32]
14694  612B E5            pop b
14695  612C E7            pop d
14696  612D 09            ret
14697  612E 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
14697  6132 34 35 36 37 
14697  6136 38 39 41 42 
14697  613A 43 44 45 46 
14698  613E             ; --- END INLINE ASM SEGMENT
14699  613E F9            leave
14700  613F 09            ret
14701  6140             
14702  6140             err:
14703  6140 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14704  6143             ; print(e); 
14705  6143             ; --- START FUNCTION CALL
14706  6143 FA 05 00      lea d, [bp + 5] ; $e
14707  6146 2A            mov b, [d]
14708  6147 38 00 00      mov c, 0
14709  614A FD AB         swp b
14710  614C D8            push b
14711  614D 07 55 61      call print
14712  6150 51 02 00      add sp, 2
14713  6153             ; --- END FUNCTION CALL
14714  6153 F9            leave
14715  6154 09            ret
14716  6155             
14717  6155             print:
14718  6155 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14719  6158             ; --- BEGIN INLINE ASM SEGMENT
14720  6158 FA 05 00      lea d, [bp + 5] ; $s
14721  615B FD 2A         mov d, [d]
14722  615D             _puts_L1_print:
14723  615D 1E            mov al, [d]
14724  615E B9 00         cmp al, 0
14725  6160 C6 6C 61      jz _puts_END_print
14726  6163 23            mov ah, al
14727  6164 19 00         mov al, 0
14728  6166 05 03         syscall sys_io
14729  6168 79            inc d
14730  6169 0A 5D 61      jmp _puts_L1_print
14731  616C             _puts_END_print:
14732  616C             ; --- END INLINE ASM SEGMENT
14733  616C F9            leave
14734  616D 09            ret
14735  616E             
14736  616E             print_signed:
14737  616E F8 00 00      enter 0 ; (push bp; mov bp, sp)
14738  6171             ; char digits[5]; 
14739  6171 52 05 00      sub sp, 5
14740  6174             ; int i = 0; 
14741  6174 52 02 00      sub sp, 2
14742  6177             ; --- START LOCAL VAR INITIALIZATION
14743  6177 FA FA FF      lea d, [bp + -6] ; $i
14744  617A DA            push d
14745  617B FD 2E 00 00   mov32 cb, $00000000
14745  617F 00 00 
14746  6181 E7            pop d
14747  6182 FD 43         mov [d], b
14748  6184             ; --- END LOCAL VAR INITIALIZATION
14749  6184             ; if (num < 0) { 
14750  6184             _if825_cond:
14751  6184 FA 05 00      lea d, [bp + 5] ; $num
14752  6187 2A            mov b, [d]
14753  6188 38 00 00      mov c, 0
14754  618B             ; --- START RELATIONAL
14755  618B D7            push a
14756  618C 11            mov a, b
14757  618D FD 2E 00 00   mov32 cb, $00000000
14757  6191 00 00 
14758  6193 B0            cmp a, b
14759  6194 FD 73         slt ; < (signed)
14760  6196 E4            pop a
14761  6197             ; --- END RELATIONAL
14762  6197 C0 00 00      cmp b, 0
14763  619A C6 BD 61      je _if825_else
14764  619D             _if825_TRUE:
14765  619D             ; putchar('-'); 
14766  619D             ; --- START FUNCTION CALL
14767  619D FD 2E 2D 00   mov32 cb, $0000002d
14767  61A1 00 00 
14768  61A3 DD            push bl
14769  61A4 07 A6 5F      call putchar
14770  61A7 51 01 00      add sp, 1
14771  61AA             ; --- END FUNCTION CALL
14772  61AA             ; num = -num; 
14773  61AA FA 05 00      lea d, [bp + 5] ; $num
14774  61AD DA            push d
14775  61AE FA 05 00      lea d, [bp + 5] ; $num
14776  61B1 2A            mov b, [d]
14777  61B2 38 00 00      mov c, 0
14778  61B5 FD 97         neg b
14779  61B7 E7            pop d
14780  61B8 FD 43         mov [d], b
14781  61BA 0A E8 61      jmp _if825_exit
14782  61BD             _if825_else:
14783  61BD             ; if (num == 0) { 
14784  61BD             _if826_cond:
14785  61BD FA 05 00      lea d, [bp + 5] ; $num
14786  61C0 2A            mov b, [d]
14787  61C1 38 00 00      mov c, 0
14788  61C4             ; --- START RELATIONAL
14789  61C4 D7            push a
14790  61C5 11            mov a, b
14791  61C6 FD 2E 00 00   mov32 cb, $00000000
14791  61CA 00 00 
14792  61CC B0            cmp a, b
14793  61CD FD 71         seq ; ==
14794  61CF E4            pop a
14795  61D0             ; --- END RELATIONAL
14796  61D0 C0 00 00      cmp b, 0
14797  61D3 C6 E8 61      je _if826_exit
14798  61D6             _if826_TRUE:
14799  61D6             ; putchar('0'); 
14800  61D6             ; --- START FUNCTION CALL
14801  61D6 FD 2E 30 00   mov32 cb, $00000030
14801  61DA 00 00 
14802  61DC DD            push bl
14803  61DD 07 A6 5F      call putchar
14804  61E0 51 01 00      add sp, 1
14805  61E3             ; --- END FUNCTION CALL
14806  61E3             ; return; 
14807  61E3 F9            leave
14808  61E4 09            ret
14809  61E5 0A E8 61      jmp _if826_exit
14810  61E8             _if826_exit:
14811  61E8             _if825_exit:
14812  61E8             ; while (num > 0) { 
14813  61E8             _while827_cond:
14814  61E8 FA 05 00      lea d, [bp + 5] ; $num
14815  61EB 2A            mov b, [d]
14816  61EC 38 00 00      mov c, 0
14817  61EF             ; --- START RELATIONAL
14818  61EF D7            push a
14819  61F0 11            mov a, b
14820  61F1 FD 2E 00 00   mov32 cb, $00000000
14820  61F5 00 00 
14821  61F7 B0            cmp a, b
14822  61F8 FD 7F         sgt ; >
14823  61FA E4            pop a
14824  61FB             ; --- END RELATIONAL
14825  61FB C0 00 00      cmp b, 0
14826  61FE C6 6D 62      je _while827_exit
14827  6201             _while827_block:
14828  6201             ; digits[i] = '0' + (num % 10); 
14829  6201 FA FC FF      lea d, [bp + -4] ; $digits
14830  6204 D7            push a
14831  6205 DA            push d
14832  6206 FA FA FF      lea d, [bp + -6] ; $i
14833  6209 2A            mov b, [d]
14834  620A 38 00 00      mov c, 0
14835  620D E7            pop d
14836  620E 5A            add d, b
14837  620F E4            pop a
14838  6210 DA            push d
14839  6211 FD 2E 30 00   mov32 cb, $00000030
14839  6215 00 00 
14840  6217             ; --- START TERMS
14841  6217 D7            push a
14842  6218 11            mov a, b
14843  6219 FA 05 00      lea d, [bp + 5] ; $num
14844  621C 2A            mov b, [d]
14845  621D 38 00 00      mov c, 0
14846  6220             ; --- START FACTORS
14847  6220 D7            push a
14848  6221 FD D8         push g
14849  6223 11            mov a, b
14850  6224 FD 7A         mov g, c
14851  6226 FD 2E 0A 00   mov32 cb, $0000000a
14851  622A 00 00 
14852  622C AE            div a, b ; 
14853  622D 11            mov a, b
14854  622E FD 38         mov c, g
14855  6230 27            mov b, a
14856  6231 FD F1         pop g
14857  6233 E4            pop a
14858  6234             ; --- END FACTORS
14859  6234 56            add b, a
14860  6235 E4            pop a
14861  6236             ; --- END TERMS
14862  6236 E7            pop d
14863  6237 FD 3E         mov [d], bl
14864  6239             ; num = num / 10; 
14865  6239 FA 05 00      lea d, [bp + 5] ; $num
14866  623C DA            push d
14867  623D FA 05 00      lea d, [bp + 5] ; $num
14868  6240 2A            mov b, [d]
14869  6241 38 00 00      mov c, 0
14870  6244             ; --- START FACTORS
14871  6244 D7            push a
14872  6245 FD D8         push g
14873  6247 11            mov a, b
14874  6248 FD 7A         mov g, c
14875  624A FD 2E 0A 00   mov32 cb, $0000000a
14875  624E 00 00 
14876  6250 AE            div a, b
14877  6251 FD 38         mov c, g
14878  6253 27            mov b, a
14879  6254 FD F1         pop g
14880  6256 E4            pop a
14881  6257             ; --- END FACTORS
14882  6257 E7            pop d
14883  6258 FD 43         mov [d], b
14884  625A             ; i++; 
14885  625A FA FA FF      lea d, [bp + -6] ; $i
14886  625D 2A            mov b, [d]
14887  625E 38 00 00      mov c, 0
14888  6261 11            mov a, b
14889  6262 FD 77         inc b
14890  6264 FA FA FF      lea d, [bp + -6] ; $i
14891  6267 FD 43         mov [d], b
14892  6269 27            mov b, a
14893  626A 0A E8 61      jmp _while827_cond
14894  626D             _while827_exit:
14895  626D             ; while (i > 0) { 
14896  626D             _while834_cond:
14897  626D FA FA FF      lea d, [bp + -6] ; $i
14898  6270 2A            mov b, [d]
14899  6271 38 00 00      mov c, 0
14900  6274             ; --- START RELATIONAL
14901  6274 D7            push a
14902  6275 11            mov a, b
14903  6276 FD 2E 00 00   mov32 cb, $00000000
14903  627A 00 00 
14904  627C B0            cmp a, b
14905  627D FD 7F         sgt ; >
14906  627F E4            pop a
14907  6280             ; --- END RELATIONAL
14908  6280 C0 00 00      cmp b, 0
14909  6283 C6 B5 62      je _while834_exit
14910  6286             _while834_block:
14911  6286             ; i--; 
14912  6286 FA FA FF      lea d, [bp + -6] ; $i
14913  6289 2A            mov b, [d]
14914  628A 38 00 00      mov c, 0
14915  628D 11            mov a, b
14916  628E FD 7D         dec b
14917  6290 FA FA FF      lea d, [bp + -6] ; $i
14918  6293 FD 43         mov [d], b
14919  6295 27            mov b, a
14920  6296             ; putchar(digits[i]); 
14921  6296             ; --- START FUNCTION CALL
14922  6296 FA FC FF      lea d, [bp + -4] ; $digits
14923  6299 D7            push a
14924  629A DA            push d
14925  629B FA FA FF      lea d, [bp + -6] ; $i
14926  629E 2A            mov b, [d]
14927  629F 38 00 00      mov c, 0
14928  62A2 E7            pop d
14929  62A3 5A            add d, b
14930  62A4 E4            pop a
14931  62A5 32            mov bl, [d]
14932  62A6 A7 00         mov bh, 0
14933  62A8 38 00 00      mov c, 0
14934  62AB DD            push bl
14935  62AC 07 A6 5F      call putchar
14936  62AF 51 01 00      add sp, 1
14937  62B2             ; --- END FUNCTION CALL
14938  62B2 0A 6D 62      jmp _while834_cond
14939  62B5             _while834_exit:
14940  62B5 F9            leave
14941  62B6 09            ret
14942  62B7             
14943  62B7             print_unsigned:
14944  62B7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14945  62BA             ; char digits[5]; 
14946  62BA 52 05 00      sub sp, 5
14947  62BD             ; int i; 
14948  62BD 52 02 00      sub sp, 2
14949  62C0             ; i = 0; 
14950  62C0 FA FA FF      lea d, [bp + -6] ; $i
14951  62C3 DA            push d
14952  62C4 FD 2E 00 00   mov32 cb, $00000000
14952  62C8 00 00 
14953  62CA E7            pop d
14954  62CB FD 43         mov [d], b
14955  62CD             ; if(num == 0){ 
14956  62CD             _if835_cond:
14957  62CD FA 05 00      lea d, [bp + 5] ; $num
14958  62D0 2A            mov b, [d]
14959  62D1 38 00 00      mov c, 0
14960  62D4             ; --- START RELATIONAL
14961  62D4 D7            push a
14962  62D5 11            mov a, b
14963  62D6 FD 2E 00 00   mov32 cb, $00000000
14963  62DA 00 00 
14964  62DC B0            cmp a, b
14965  62DD FD 71         seq ; ==
14966  62DF E4            pop a
14967  62E0             ; --- END RELATIONAL
14968  62E0 C0 00 00      cmp b, 0
14969  62E3 C6 F8 62      je _if835_exit
14970  62E6             _if835_TRUE:
14971  62E6             ; putchar('0'); 
14972  62E6             ; --- START FUNCTION CALL
14973  62E6 FD 2E 30 00   mov32 cb, $00000030
14973  62EA 00 00 
14974  62EC DD            push bl
14975  62ED 07 A6 5F      call putchar
14976  62F0 51 01 00      add sp, 1
14977  62F3             ; --- END FUNCTION CALL
14978  62F3             ; return; 
14979  62F3 F9            leave
14980  62F4 09            ret
14981  62F5 0A F8 62      jmp _if835_exit
14982  62F8             _if835_exit:
14983  62F8             ; while (num > 0) { 
14984  62F8             _while836_cond:
14985  62F8 FA 05 00      lea d, [bp + 5] ; $num
14986  62FB 2A            mov b, [d]
14987  62FC 38 00 00      mov c, 0
14988  62FF             ; --- START RELATIONAL
14989  62FF D7            push a
14990  6300 11            mov a, b
14991  6301 FD 2E 00 00   mov32 cb, $00000000
14991  6305 00 00 
14992  6307 B0            cmp a, b
14993  6308 FD 81         sgu ; > (unsigned)
14994  630A E4            pop a
14995  630B             ; --- END RELATIONAL
14996  630B C0 00 00      cmp b, 0
14997  630E C6 7D 63      je _while836_exit
14998  6311             _while836_block:
14999  6311             ; digits[i] = '0' + (num % 10); 
15000  6311 FA FC FF      lea d, [bp + -4] ; $digits
15001  6314 D7            push a
15002  6315 DA            push d
15003  6316 FA FA FF      lea d, [bp + -6] ; $i
15004  6319 2A            mov b, [d]
15005  631A 38 00 00      mov c, 0
15006  631D E7            pop d
15007  631E 5A            add d, b
15008  631F E4            pop a
15009  6320 DA            push d
15010  6321 FD 2E 30 00   mov32 cb, $00000030
15010  6325 00 00 
15011  6327             ; --- START TERMS
15012  6327 D7            push a
15013  6328 11            mov a, b
15014  6329 FA 05 00      lea d, [bp + 5] ; $num
15015  632C 2A            mov b, [d]
15016  632D 38 00 00      mov c, 0
15017  6330             ; --- START FACTORS
15018  6330 D7            push a
15019  6331 FD D8         push g
15020  6333 11            mov a, b
15021  6334 FD 7A         mov g, c
15022  6336 FD 2E 0A 00   mov32 cb, $0000000a
15022  633A 00 00 
15023  633C AE            div a, b ; 
15024  633D 11            mov a, b
15025  633E FD 38         mov c, g
15026  6340 27            mov b, a
15027  6341 FD F1         pop g
15028  6343 E4            pop a
15029  6344             ; --- END FACTORS
15030  6344 56            add b, a
15031  6345 E4            pop a
15032  6346             ; --- END TERMS
15033  6346 E7            pop d
15034  6347 FD 3E         mov [d], bl
15035  6349             ; num = num / 10; 
15036  6349 FA 05 00      lea d, [bp + 5] ; $num
15037  634C DA            push d
15038  634D FA 05 00      lea d, [bp + 5] ; $num
15039  6350 2A            mov b, [d]
15040  6351 38 00 00      mov c, 0
15041  6354             ; --- START FACTORS
15042  6354 D7            push a
15043  6355 FD D8         push g
15044  6357 11            mov a, b
15045  6358 FD 7A         mov g, c
15046  635A FD 2E 0A 00   mov32 cb, $0000000a
15046  635E 00 00 
15047  6360 AE            div a, b
15048  6361 FD 38         mov c, g
15049  6363 27            mov b, a
15050  6364 FD F1         pop g
15051  6366 E4            pop a
15052  6367             ; --- END FACTORS
15053  6367 E7            pop d
15054  6368 FD 43         mov [d], b
15055  636A             ; i++; 
15056  636A FA FA FF      lea d, [bp + -6] ; $i
15057  636D 2A            mov b, [d]
15058  636E 38 00 00      mov c, 0
15059  6371 11            mov a, b
15060  6372 FD 77         inc b
15061  6374 FA FA FF      lea d, [bp + -6] ; $i
15062  6377 FD 43         mov [d], b
15063  6379 27            mov b, a
15064  637A 0A F8 62      jmp _while836_cond
15065  637D             _while836_exit:
15066  637D             ; while (i > 0) { 
15067  637D             _while843_cond:
15068  637D FA FA FF      lea d, [bp + -6] ; $i
15069  6380 2A            mov b, [d]
15070  6381 38 00 00      mov c, 0
15071  6384             ; --- START RELATIONAL
15072  6384 D7            push a
15073  6385 11            mov a, b
15074  6386 FD 2E 00 00   mov32 cb, $00000000
15074  638A 00 00 
15075  638C B0            cmp a, b
15076  638D FD 7F         sgt ; >
15077  638F E4            pop a
15078  6390             ; --- END RELATIONAL
15079  6390 C0 00 00      cmp b, 0
15080  6393 C6 C5 63      je _while843_exit
15081  6396             _while843_block:
15082  6396             ; i--; 
15083  6396 FA FA FF      lea d, [bp + -6] ; $i
15084  6399 2A            mov b, [d]
15085  639A 38 00 00      mov c, 0
15086  639D 11            mov a, b
15087  639E FD 7D         dec b
15088  63A0 FA FA FF      lea d, [bp + -6] ; $i
15089  63A3 FD 43         mov [d], b
15090  63A5 27            mov b, a
15091  63A6             ; putchar(digits[i]); 
15092  63A6             ; --- START FUNCTION CALL
15093  63A6 FA FC FF      lea d, [bp + -4] ; $digits
15094  63A9 D7            push a
15095  63AA DA            push d
15096  63AB FA FA FF      lea d, [bp + -6] ; $i
15097  63AE 2A            mov b, [d]
15098  63AF 38 00 00      mov c, 0
15099  63B2 E7            pop d
15100  63B3 5A            add d, b
15101  63B4 E4            pop a
15102  63B5 32            mov bl, [d]
15103  63B6 A7 00         mov bh, 0
15104  63B8 38 00 00      mov c, 0
15105  63BB DD            push bl
15106  63BC 07 A6 5F      call putchar
15107  63BF 51 01 00      add sp, 1
15108  63C2             ; --- END FUNCTION CALL
15109  63C2 0A 7D 63      jmp _while843_cond
15110  63C5             _while843_exit:
15111  63C5 F9            leave
15112  63C6 09            ret
15113  63C7             
15114  63C7             printx16:
15115  63C7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
15116  63CA             ; --- BEGIN INLINE ASM SEGMENT
15117  63CA FA 05 00      lea d, [bp + 5] ; $hex
15118  63CD 2A            mov b, [d]
15119  63CE             print_u16x_printx16:
15120  63CE DD            push bl
15121  63CF 30            mov bl, bh
15122  63D0 07 ED 63      call _itoa_printx16        
15123  63D3 2F            mov bl, al        
15124  63D4 19 00         mov al, 0
15125  63D6 05 03         syscall sys_io        
15126  63D8 24            mov ah, bl        
15127  63D9 19 00         mov al, 0
15128  63DB 05 03         syscall sys_io        
15129  63DD EA            pop bl
15130  63DE 07 ED 63      call _itoa_printx16        
15131  63E1 2F            mov bl, al        
15132  63E2 19 00         mov al, 0
15133  63E4 05 03         syscall sys_io        
15134  63E6 24            mov ah, bl        
15135  63E7 19 00         mov al, 0
15136  63E9 05 03         syscall sys_io        
15137  63EB             ; --- END INLINE ASM SEGMENT
15138  63EB             ; return; 
15139  63EB F9            leave
15140  63EC 09            ret
15141  63ED             ; --- BEGIN INLINE ASM SEGMENT
15142  63ED             _itoa_printx16:
15143  63ED DA            push d
15144  63EE D8            push b
15145  63EF A7 00         mov bh, 0
15146  63F1 FD A4 04      shr bl, 4  
15147  63F4 74            mov d, b
15148  63F5 1F 07 64      mov al, [d + s_hex_digits_printx16]
15149  63F8 23            mov ah, al
15150  63F9 E5            pop b
15151  63FA D8            push b
15152  63FB A7 00         mov bh, 0
15153  63FD FD 87 0F      and bl, $0F
15154  6400 74            mov d, b
15155  6401 1F 07 64      mov al, [d + s_hex_digits_printx16]
15156  6404 E5            pop b
15157  6405 E7            pop d
15158  6406 09            ret
15159  6407 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
15159  640B 34 35 36 37 
15159  640F 38 39 41 42 
15159  6413 43 44 45 46 
15160  6417             ; --- END INLINE ASM SEGMENT
15161  6417 F9            leave
15162  6418 09            ret
15163  6419             
15164  6419             puts:
15165  6419 F8 00 00      enter 0 ; (push bp; mov bp, sp)
15166  641C             ; --- BEGIN INLINE ASM SEGMENT
15167  641C FA 05 00      lea d, [bp + 5] ; $s
15168  641F FD 2A         mov d, [d]
15169  6421             _puts_L1_puts:
15170  6421 1E            mov al, [d]
15171  6422 B9 00         cmp al, 0
15172  6424 C6 30 64      jz _puts_END_puts
15173  6427 23            mov ah, al
15174  6428 19 00         mov al, 0
15175  642A 05 03         syscall sys_io
15176  642C 79            inc d
15177  642D 0A 21 64      jmp _puts_L1_puts
15178  6430             _puts_END_puts:
15179  6430 10 00 0A      mov a, $0A00
15180  6433 05 03         syscall sys_io
15181  6435             ; --- END INLINE ASM SEGMENT
15182  6435 F9            leave
15183  6436 09            ret
15184  6437             
15185  6437             memset:
15186  6437 F8 00 00      enter 0 ; (push bp; mov bp, sp)
15187  643A             ; int i; 
15188  643A 52 02 00      sub sp, 2
15189  643D             ; for(i = 0; i < size; i++){ 
15190  643D             _for844_init:
15191  643D FA FF FF      lea d, [bp + -1] ; $i
15192  6440 DA            push d
15193  6441 FD 2E 00 00   mov32 cb, $00000000
15193  6445 00 00 
15194  6447 E7            pop d
15195  6448 FD 43         mov [d], b
15196  644A             _for844_cond:
15197  644A FA FF FF      lea d, [bp + -1] ; $i
15198  644D 2A            mov b, [d]
15199  644E 38 00 00      mov c, 0
15200  6451             ; --- START RELATIONAL
15201  6451 D7            push a
15202  6452 11            mov a, b
15203  6453 FA 08 00      lea d, [bp + 8] ; $size
15204  6456 2A            mov b, [d]
15205  6457 38 00 00      mov c, 0
15206  645A B0            cmp a, b
15207  645B FD 73         slt ; < (signed)
15208  645D E4            pop a
15209  645E             ; --- END RELATIONAL
15210  645E C0 00 00      cmp b, 0
15211  6461 C6 96 64      je _for844_exit
15212  6464             _for844_block:
15213  6464             ; *(s+i) = c; 
15214  6464 FA 05 00      lea d, [bp + 5] ; $s
15215  6467 2A            mov b, [d]
15216  6468 38 00 00      mov c, 0
15217  646B             ; --- START TERMS
15218  646B D7            push a
15219  646C 11            mov a, b
15220  646D FA FF FF      lea d, [bp + -1] ; $i
15221  6470 2A            mov b, [d]
15222  6471 38 00 00      mov c, 0
15223  6474 56            add b, a
15224  6475 E4            pop a
15225  6476             ; --- END TERMS
15226  6476 D8            push b
15227  6477 FA 07 00      lea d, [bp + 7] ; $c
15228  647A 32            mov bl, [d]
15229  647B A7 00         mov bh, 0
15230  647D 38 00 00      mov c, 0
15231  6480 E7            pop d
15232  6481 FD 3E         mov [d], bl
15233  6483             _for844_update:
15234  6483 FA FF FF      lea d, [bp + -1] ; $i
15235  6486 2A            mov b, [d]
15236  6487 38 00 00      mov c, 0
15237  648A 11            mov a, b
15238  648B FD 77         inc b
15239  648D FA FF FF      lea d, [bp + -1] ; $i
15240  6490 FD 43         mov [d], b
15241  6492 27            mov b, a
15242  6493 0A 4A 64      jmp _for844_cond
15243  6496             _for844_exit:
15244  6496             ; return s; 
15245  6496 FA 05 00      lea d, [bp + 5] ; $s
15246  6499 2A            mov b, [d]
15247  649A 38 00 00      mov c, 0
15248  649D F9            leave
15249  649E 09            ret
15250  649F             
15251  649F             strncmp:
15252  649F F8 00 00      enter 0 ; (push bp; mov bp, sp)
15253  64A2             ; int i; 
15254  64A2 52 02 00      sub sp, 2
15255  64A5             ; for (i = 0; i < n; i++) { 
15256  64A5             _for845_init:
15257  64A5 FA FF FF      lea d, [bp + -1] ; $i
15258  64A8 DA            push d
15259  64A9 FD 2E 00 00   mov32 cb, $00000000
15259  64AD 00 00 
15260  64AF E7            pop d
15261  64B0 FD 43         mov [d], b
15262  64B2             _for845_cond:
15263  64B2 FA FF FF      lea d, [bp + -1] ; $i
15264  64B5 2A            mov b, [d]
15265  64B6 38 00 00      mov c, 0
15266  64B9             ; --- START RELATIONAL
15267  64B9 D7            push a
15268  64BA 11            mov a, b
15269  64BB FA 09 00      lea d, [bp + 9] ; $n
15270  64BE 2A            mov b, [d]
15271  64BF 38 00 00      mov c, 0
15272  64C2 B0            cmp a, b
15273  64C3 FD 73         slt ; < (signed)
15274  64C5 E4            pop a
15275  64C6             ; --- END RELATIONAL
15276  64C6 C0 00 00      cmp b, 0
15277  64C9 C6 BE 65      je _for845_exit
15278  64CC             _for845_block:
15279  64CC             ; if (str1[i] != str2[i]) { 
15280  64CC             _if846_cond:
15281  64CC FA 05 00      lea d, [bp + 5] ; $str1
15282  64CF FD 2A         mov d, [d]
15283  64D1 D7            push a
15284  64D2 DA            push d
15285  64D3 FA FF FF      lea d, [bp + -1] ; $i
15286  64D6 2A            mov b, [d]
15287  64D7 38 00 00      mov c, 0
15288  64DA E7            pop d
15289  64DB FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
15290  64DF E4            pop a
15291  64E0 32            mov bl, [d]
15292  64E1 A7 00         mov bh, 0
15293  64E3 38 00 00      mov c, 0
15294  64E6             ; --- START RELATIONAL
15295  64E6 D7            push a
15296  64E7 11            mov a, b
15297  64E8 FA 07 00      lea d, [bp + 7] ; $str2
15298  64EB FD 2A         mov d, [d]
15299  64ED D7            push a
15300  64EE DA            push d
15301  64EF FA FF FF      lea d, [bp + -1] ; $i
15302  64F2 2A            mov b, [d]
15303  64F3 38 00 00      mov c, 0
15304  64F6 E7            pop d
15305  64F7 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
15306  64FB E4            pop a
15307  64FC 32            mov bl, [d]
15308  64FD A7 00         mov bh, 0
15309  64FF 38 00 00      mov c, 0
15310  6502 B0            cmp a, b
15311  6503 FD 72         sneq ; !=
15312  6505 E4            pop a
15313  6506             ; --- END RELATIONAL
15314  6506 C0 00 00      cmp b, 0
15315  6509 C6 4E 65      je _if846_exit
15316  650C             _if846_TRUE:
15317  650C             ; return (unsigned char)str1[i] - (unsigned char)str2[i]; 
15318  650C FA 05 00      lea d, [bp + 5] ; $str1
15319  650F FD 2A         mov d, [d]
15320  6511 D7            push a
15321  6512 DA            push d
15322  6513 FA FF FF      lea d, [bp + -1] ; $i
15323  6516 2A            mov b, [d]
15324  6517 38 00 00      mov c, 0
15325  651A E7            pop d
15326  651B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
15327  651F E4            pop a
15328  6520 32            mov bl, [d]
15329  6521 A7 00         mov bh, 0
15330  6523 38 00 00      mov c, 0
15331  6526 A7 00         mov bh, 0
15332  6528             ; --- START TERMS
15333  6528 D7            push a
15334  6529 11            mov a, b
15335  652A FA 07 00      lea d, [bp + 7] ; $str2
15336  652D FD 2A         mov d, [d]
15337  652F D7            push a
15338  6530 DA            push d
15339  6531 FA FF FF      lea d, [bp + -1] ; $i
15340  6534 2A            mov b, [d]
15341  6535 38 00 00      mov c, 0
15342  6538 E7            pop d
15343  6539 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
15344  653D E4            pop a
15345  653E 32            mov bl, [d]
15346  653F A7 00         mov bh, 0
15347  6541 38 00 00      mov c, 0
15348  6544 A7 00         mov bh, 0
15349  6546 60            sub a, b
15350  6547 27            mov b, a
15351  6548 E4            pop a
15352  6549             ; --- END TERMS
15353  6549 F9            leave
15354  654A 09            ret
15355  654B 0A 4E 65      jmp _if846_exit
15356  654E             _if846_exit:
15357  654E             ; if (str1[i] == '\0' || str2[i] == '\0') { 
15358  654E             _if847_cond:
15359  654E FA 05 00      lea d, [bp + 5] ; $str1
15360  6551 FD 2A         mov d, [d]
15361  6553 D7            push a
15362  6554 DA            push d
15363  6555 FA FF FF      lea d, [bp + -1] ; $i
15364  6558 2A            mov b, [d]
15365  6559 38 00 00      mov c, 0
15366  655C E7            pop d
15367  655D FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
15368  6561 E4            pop a
15369  6562 32            mov bl, [d]
15370  6563 A7 00         mov bh, 0
15371  6565 38 00 00      mov c, 0
15372  6568             ; --- START RELATIONAL
15373  6568 D7            push a
15374  6569 11            mov a, b
15375  656A FD 2E 00 00   mov32 cb, $00000000
15375  656E 00 00 
15376  6570 B0            cmp a, b
15377  6571 FD 71         seq ; ==
15378  6573 E4            pop a
15379  6574             ; --- END RELATIONAL
15380  6574             ; --- START LOGICAL OR
15381  6574 D7            push a
15382  6575 11            mov a, b
15383  6576 FA 07 00      lea d, [bp + 7] ; $str2
15384  6579 FD 2A         mov d, [d]
15385  657B D7            push a
15386  657C DA            push d
15387  657D FA FF FF      lea d, [bp + -1] ; $i
15388  6580 2A            mov b, [d]
15389  6581 38 00 00      mov c, 0
15390  6584 E7            pop d
15391  6585 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
15392  6589 E4            pop a
15393  658A 32            mov bl, [d]
15394  658B A7 00         mov bh, 0
15395  658D 38 00 00      mov c, 0
15396  6590             ; --- START RELATIONAL
15397  6590 D7            push a
15398  6591 11            mov a, b
15399  6592 FD 2E 00 00   mov32 cb, $00000000
15399  6596 00 00 
15400  6598 B0            cmp a, b
15401  6599 FD 71         seq ; ==
15402  659B E4            pop a
15403  659C             ; --- END RELATIONAL
15404  659C FD A8         sor a, b ; ||
15405  659E E4            pop a
15406  659F             ; --- END LOGICAL OR
15407  659F C0 00 00      cmp b, 0
15408  65A2 C6 AB 65      je _if847_exit
15409  65A5             _if847_TRUE:
15410  65A5             ; break; 
15411  65A5 0A BE 65      jmp _for845_exit ; for break
15412  65A8 0A AB 65      jmp _if847_exit
15413  65AB             _if847_exit:
15414  65AB             _for845_update:
15415  65AB FA FF FF      lea d, [bp + -1] ; $i
15416  65AE 2A            mov b, [d]
15417  65AF 38 00 00      mov c, 0
15418  65B2 11            mov a, b
15419  65B3 FD 77         inc b
15420  65B5 FA FF FF      lea d, [bp + -1] ; $i
15421  65B8 FD 43         mov [d], b
15422  65BA 27            mov b, a
15423  65BB 0A B2 64      jmp _for845_cond
15424  65BE             _for845_exit:
15425  65BE             ; return 0; 
15426  65BE FD 2E 00 00   mov32 cb, $00000000
15426  65C2 00 00 
15427  65C4 F9            leave
15428  65C5 09            ret
15429  65C6             
15430  65C6             is_digit:
15431  65C6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
15432  65C9             ; return c >= '0' && c <= '9'; 
15433  65C9 FA 05 00      lea d, [bp + 5] ; $c
15434  65CC 32            mov bl, [d]
15435  65CD A7 00         mov bh, 0
15436  65CF 38 00 00      mov c, 0
15437  65D2             ; --- START RELATIONAL
15438  65D2 D7            push a
15439  65D3 11            mov a, b
15440  65D4 FD 2E 30 00   mov32 cb, $00000030
15440  65D8 00 00 
15441  65DA B0            cmp a, b
15442  65DB FD 80         sge ; >=
15443  65DD E4            pop a
15444  65DE             ; --- END RELATIONAL
15445  65DE             ; --- START LOGICAL AND
15446  65DE D7            push a
15447  65DF 11            mov a, b
15448  65E0 FA 05 00      lea d, [bp + 5] ; $c
15449  65E3 32            mov bl, [d]
15450  65E4 A7 00         mov bh, 0
15451  65E6 38 00 00      mov c, 0
15452  65E9             ; --- START RELATIONAL
15453  65E9 D7            push a
15454  65EA 11            mov a, b
15455  65EB FD 2E 39 00   mov32 cb, $00000039
15455  65EF 00 00 
15456  65F1 B0            cmp a, b
15457  65F2 FD 74         sle ; <= (signed)
15458  65F4 E4            pop a
15459  65F5             ; --- END RELATIONAL
15460  65F5 FD A7         sand a, b
15461  65F7 E4            pop a
15462  65F8             ; --- END LOGICAL AND
15463  65F8 F9            leave
15464  65F9 09            ret
15465  65FA             
15466  65FA             abs:
15467  65FA F8 00 00      enter 0 ; (push bp; mov bp, sp)
15468  65FD             ; return i < 0 ? -i : i; 
15469  65FD             _ternary848_cond:
15470  65FD FA 05 00      lea d, [bp + 5] ; $i
15471  6600 2A            mov b, [d]
15472  6601 38 00 00      mov c, 0
15473  6604             ; --- START RELATIONAL
15474  6604 D7            push a
15475  6605 11            mov a, b
15476  6606 FD 2E 00 00   mov32 cb, $00000000
15476  660A 00 00 
15477  660C B0            cmp a, b
15478  660D FD 73         slt ; < (signed)
15479  660F E4            pop a
15480  6610             ; --- END RELATIONAL
15481  6610 C0 00 00      cmp b, 0
15482  6613 C6 22 66      je _ternary848_FALSE
15483  6616             _ternary848_TRUE:
15484  6616 FA 05 00      lea d, [bp + 5] ; $i
15485  6619 2A            mov b, [d]
15486  661A 38 00 00      mov c, 0
15487  661D FD 97         neg b
15488  661F 0A 29 66      jmp _ternary848_exit
15489  6622             _ternary848_FALSE:
15490  6622 FA 05 00      lea d, [bp + 5] ; $i
15491  6625 2A            mov b, [d]
15492  6626 38 00 00      mov c, 0
15493  6629             _ternary848_exit:
15494  6629 F9            leave
15495  662A 09            ret
15496  662B             
15497  662B             atoi:
15498  662B F8 00 00      enter 0 ; (push bp; mov bp, sp)
15499  662E             ; int result = 0;  // Initialize result 
15500  662E 52 02 00      sub sp, 2
15501  6631             ; --- START LOCAL VAR INITIALIZATION
15502  6631 FA FF FF      lea d, [bp + -1] ; $result
15503  6634 DA            push d
15504  6635 FD 2E 00 00   mov32 cb, $00000000
15504  6639 00 00 
15505  663B E7            pop d
15506  663C FD 43         mov [d], b
15507  663E             ; --- END LOCAL VAR INITIALIZATION
15508  663E             ; int sign = 1;    // Initialize sign as positive 
15509  663E 52 02 00      sub sp, 2
15510  6641             ; --- START LOCAL VAR INITIALIZATION
15511  6641 FA FD FF      lea d, [bp + -3] ; $sign
15512  6644 DA            push d
15513  6645 FD 2E 01 00   mov32 cb, $00000001
15513  6649 00 00 
15514  664B E7            pop d
15515  664C FD 43         mov [d], b
15516  664E             ; --- END LOCAL VAR INITIALIZATION
15517  664E             ; while (*str == ' ') str++; 
15518  664E             _while849_cond:
15519  664E FA 05 00      lea d, [bp + 5] ; $str
15520  6651 2A            mov b, [d]
15521  6652 38 00 00      mov c, 0
15522  6655 74            mov d, b
15523  6656 32            mov bl, [d]
15524  6657 A7 00         mov bh, 0
15525  6659 38 00 00      mov c, 0
15526  665C             ; --- START RELATIONAL
15527  665C D7            push a
15528  665D 11            mov a, b
15529  665E FD 2E 20 00   mov32 cb, $00000020
15529  6662 00 00 
15530  6664 B0            cmp a, b
15531  6665 FD 71         seq ; ==
15532  6667 E4            pop a
15533  6668             ; --- END RELATIONAL
15534  6668 C0 00 00      cmp b, 0
15535  666B C6 81 66      je _while849_exit
15536  666E             _while849_block:
15537  666E             ; str++; 
15538  666E FA 05 00      lea d, [bp + 5] ; $str
15539  6671 2A            mov b, [d]
15540  6672 38 00 00      mov c, 0
15541  6675 FD 77         inc b
15542  6677 FA 05 00      lea d, [bp + 5] ; $str
15543  667A FD 43         mov [d], b
15544  667C FD 7D         dec b
15545  667E 0A 4E 66      jmp _while849_cond
15546  6681             _while849_exit:
15547  6681             ; if (*str == '-' || *str == '+') { 
15548  6681             _if850_cond:
15549  6681 FA 05 00      lea d, [bp + 5] ; $str
15550  6684 2A            mov b, [d]
15551  6685 38 00 00      mov c, 0
15552  6688 74            mov d, b
15553  6689 32            mov bl, [d]
15554  668A A7 00         mov bh, 0
15555  668C 38 00 00      mov c, 0
15556  668F             ; --- START RELATIONAL
15557  668F D7            push a
15558  6690 11            mov a, b
15559  6691 FD 2E 2D 00   mov32 cb, $0000002d
15559  6695 00 00 
15560  6697 B0            cmp a, b
15561  6698 FD 71         seq ; ==
15562  669A E4            pop a
15563  669B             ; --- END RELATIONAL
15564  669B             ; --- START LOGICAL OR
15565  669B D7            push a
15566  669C 11            mov a, b
15567  669D FA 05 00      lea d, [bp + 5] ; $str
15568  66A0 2A            mov b, [d]
15569  66A1 38 00 00      mov c, 0
15570  66A4 74            mov d, b
15571  66A5 32            mov bl, [d]
15572  66A6 A7 00         mov bh, 0
15573  66A8 38 00 00      mov c, 0
15574  66AB             ; --- START RELATIONAL
15575  66AB D7            push a
15576  66AC 11            mov a, b
15577  66AD FD 2E 2B 00   mov32 cb, $0000002b
15577  66B1 00 00 
15578  66B3 B0            cmp a, b
15579  66B4 FD 71         seq ; ==
15580  66B6 E4            pop a
15581  66B7             ; --- END RELATIONAL
15582  66B7 FD A8         sor a, b ; ||
15583  66B9 E4            pop a
15584  66BA             ; --- END LOGICAL OR
15585  66BA C0 00 00      cmp b, 0
15586  66BD C6 03 67      je _if850_exit
15587  66C0             _if850_TRUE:
15588  66C0             ; if (*str == '-') sign = -1; 
15589  66C0             _if851_cond:
15590  66C0 FA 05 00      lea d, [bp + 5] ; $str
15591  66C3 2A            mov b, [d]
15592  66C4 38 00 00      mov c, 0
15593  66C7 74            mov d, b
15594  66C8 32            mov bl, [d]
15595  66C9 A7 00         mov bh, 0
15596  66CB 38 00 00      mov c, 0
15597  66CE             ; --- START RELATIONAL
15598  66CE D7            push a
15599  66CF 11            mov a, b
15600  66D0 FD 2E 2D 00   mov32 cb, $0000002d
15600  66D4 00 00 
15601  66D6 B0            cmp a, b
15602  66D7 FD 71         seq ; ==
15603  66D9 E4            pop a
15604  66DA             ; --- END RELATIONAL
15605  66DA C0 00 00      cmp b, 0
15606  66DD C6 F0 66      je _if851_exit
15607  66E0             _if851_TRUE:
15608  66E0             ; sign = -1; 
15609  66E0 FA FD FF      lea d, [bp + -3] ; $sign
15610  66E3 DA            push d
15611  66E4 FD 2E FF FF   mov32 cb, $ffffffff
15611  66E8 FF FF 
15612  66EA E7            pop d
15613  66EB FD 43         mov [d], b
15614  66ED 0A F0 66      jmp _if851_exit
15615  66F0             _if851_exit:
15616  66F0             ; str++; 
15617  66F0 FA 05 00      lea d, [bp + 5] ; $str
15618  66F3 2A            mov b, [d]
15619  66F4 38 00 00      mov c, 0
15620  66F7 FD 77         inc b
15621  66F9 FA 05 00      lea d, [bp + 5] ; $str
15622  66FC FD 43         mov [d], b
15623  66FE FD 7D         dec b
15624  6700 0A 03 67      jmp _if850_exit
15625  6703             _if850_exit:
15626  6703             ; while (*str >= '0' && *str <= '9') { 
15627  6703             _while852_cond:
15628  6703 FA 05 00      lea d, [bp + 5] ; $str
15629  6706 2A            mov b, [d]
15630  6707 38 00 00      mov c, 0
15631  670A 74            mov d, b
15632  670B 32            mov bl, [d]
15633  670C A7 00         mov bh, 0
15634  670E 38 00 00      mov c, 0
15635  6711             ; --- START RELATIONAL
15636  6711 D7            push a
15637  6712 11            mov a, b
15638  6713 FD 2E 30 00   mov32 cb, $00000030
15638  6717 00 00 
15639  6719 B0            cmp a, b
15640  671A FD 82         sgeu ; >= (unsigned)
15641  671C E4            pop a
15642  671D             ; --- END RELATIONAL
15643  671D             ; --- START LOGICAL AND
15644  671D D7            push a
15645  671E 11            mov a, b
15646  671F FA 05 00      lea d, [bp + 5] ; $str
15647  6722 2A            mov b, [d]
15648  6723 38 00 00      mov c, 0
15649  6726 74            mov d, b
15650  6727 32            mov bl, [d]
15651  6728 A7 00         mov bh, 0
15652  672A 38 00 00      mov c, 0
15653  672D             ; --- START RELATIONAL
15654  672D D7            push a
15655  672E 11            mov a, b
15656  672F FD 2E 39 00   mov32 cb, $00000039
15656  6733 00 00 
15657  6735 B0            cmp a, b
15658  6736 FD 76         sleu ; <= (unsigned)
15659  6738 E4            pop a
15660  6739             ; --- END RELATIONAL
15661  6739 FD A7         sand a, b
15662  673B E4            pop a
15663  673C             ; --- END LOGICAL AND
15664  673C C0 00 00      cmp b, 0
15665  673F C6 92 67      je _while852_exit
15666  6742             _while852_block:
15667  6742             ; result = result * 10 + (*str - '0'); 
15668  6742 FA FF FF      lea d, [bp + -1] ; $result
15669  6745 DA            push d
15670  6746 FA FF FF      lea d, [bp + -1] ; $result
15671  6749 2A            mov b, [d]
15672  674A 38 00 00      mov c, 0
15673  674D             ; --- START FACTORS
15674  674D D7            push a
15675  674E FD D8         push g
15676  6750 11            mov a, b
15677  6751 FD 7A         mov g, c
15678  6753 FD 2E 0A 00   mov32 cb, $0000000a
15678  6757 00 00 
15679  6759 FD 38         mov c, g
15680  675B 27            mov b, a
15681  675C FD F1         pop g
15682  675E E4            pop a
15683  675F             ; --- END FACTORS
15684  675F             ; --- START TERMS
15685  675F D7            push a
15686  6760 11            mov a, b
15687  6761 FA 05 00      lea d, [bp + 5] ; $str
15688  6764 2A            mov b, [d]
15689  6765 38 00 00      mov c, 0
15690  6768 74            mov d, b
15691  6769 32            mov bl, [d]
15692  676A A7 00         mov bh, 0
15693  676C 38 00 00      mov c, 0
15694  676F             ; --- START TERMS
15695  676F D7            push a
15696  6770 11            mov a, b
15697  6771 FD 2E 30 00   mov32 cb, $00000030
15697  6775 00 00 
15698  6777 60            sub a, b
15699  6778 27            mov b, a
15700  6779 E4            pop a
15701  677A             ; --- END TERMS
15702  677A 56            add b, a
15703  677B E4            pop a
15704  677C             ; --- END TERMS
15705  677C E7            pop d
15706  677D FD 43         mov [d], b
15707  677F             ; str++; 
15708  677F FA 05 00      lea d, [bp + 5] ; $str
15709  6782 2A            mov b, [d]
15710  6783 38 00 00      mov c, 0
15711  6786 FD 77         inc b
15712  6788 FA 05 00      lea d, [bp + 5] ; $str
15713  678B FD 43         mov [d], b
15714  678D FD 7D         dec b
15715  678F 0A 03 67      jmp _while852_cond
15716  6792             _while852_exit:
15717  6792             ; return sign * result; 
15718  6792 FA FD FF      lea d, [bp + -3] ; $sign
15719  6795 2A            mov b, [d]
15720  6796 38 00 00      mov c, 0
15721  6799             ; --- START FACTORS
15722  6799 D7            push a
15723  679A FD D8         push g
15724  679C 11            mov a, b
15725  679D FD 7A         mov g, c
15726  679F FA FF FF      lea d, [bp + -1] ; $result
15727  67A2 2A            mov b, [d]
15728  67A3 38 00 00      mov c, 0
15729  67A6 FD 38         mov c, g
15730  67A8 27            mov b, a
15731  67A9 FD F1         pop g
15732  67AB E4            pop a
15733  67AC             ; --- END FACTORS
15734  67AC F9            leave
15735  67AD 09            ret
15736  67AE             ; --- END TEXT SEGMENT
15737  67AE             
15738  67AE             ; --- BEGIN DATA SEGMENT
15739  67AE 00          _starbases: .fill 1, 0
15740  67AF 00          _base_y: .fill 1, 0
15741  67B0 00          _base_x: .fill 1, 0
15742  67B1 00          _starbases_left: .fill 1, 0
15743  67B2             _c_data: 
15744  67B2 00          .db 
15745  67B3 00          .db 
15746  67B4 00 00 00 FF .db $00,$00,$00,$ff,$ff,$ff,$00,$01,$01,$01,$00,$01,$01,$01,$00,$ff,$ff,$ff,$00,$01,$01,
15746  67B8 FF FF 00 01 
15746  67BC 01 01 00 01 
15746  67C0 01 01 00 FF 
15746  67C4 FF FF 00 01 
15746  67C8 01 
15747  67C9 00 00 00 00 .fill 9, 0
15747  67CD 00 00 00 00 
15747  67D1 00 
15748  67D2 00          _docked: .fill 1, 0
15749  67D3 00 00       _energy: .fill 2, 0
15750  67D5 B8 0B       _energy0: .dw 3000
15751  67D7 00 00 00 00 _map_data: .fill 162, 0
15751  67DB 00 00 00 00 
15751  67DF 00 00 00 00 
15751  67E3 00 00 00 00 
15751  67E7 00 00 00 00 
15751  67EB 00 00 00 00 
15751  67EF 00 00 00 00 
15751  67F3 00 00 00 00 
15751  67F7 00 00 00 00 
15751  67FB 00 00 00 00 
15751  67FF 00 00 00 00 
15751  6803 00 00 00 00 
15751  6807 00 00 00 00 
15751  680B 00 00 00 00 
15751  680F 00 00 00 00 
15751  6813 00 00 00 00 
15751  6817 00 00 00 00 
15751  681B 00 00 00 00 
15751  681F 00 00 00 00 
15751  6823 00 00 00 00 
15751  6827 00 00 00 00 
15751  682B 00 00 00 00 
15751  682F 00 00 00 00 
15751  6833 00 00 00 00 
15751  6837 00 00 00 00 
15751  683B 00 00 00 00 
15751  683F 00 00 00 00 
15751  6843 00 00 00 00 
15751  6847 00 00 00 00 
15751  684B 00 00 00 00 
15751  684F 00 00 00 00 
15751  6853 00 00 00 00 
15751  6857 00 00 00 00 
15751  685B 00 00 00 00 
15751  685F 00 00 00 00 
15751  6863 00 00 00 00 
15751  6867 00 00 00 00 
15751  686B 00 00 00 00 
15751  686F 00 00 00 00 
15751  6873 00 00 00 00 
15751  6877 00 00 
15752  6879 00 00 00 00 _kdata_data: .fill 12, 0
15752  687D 00 00 00 00 
15752  6881 00 00 00 00 
15753  6885 00          _klingons: .fill 1, 0
15754  6886 00          _total_klingons: .fill 1, 0
15755  6887 00          _klingons_left: .fill 1, 0
15756  6888 00          _torps: .fill 1, 0
15757  6889 0A          _torps0: .db 10
15758  688A 00 00       _quad_y: .fill 2, 0
15759  688C 00 00       _quad_x: .fill 2, 0
15760  688E 00 00       _shield: .fill 2, 0
15761  6890 00          _stars: .fill 1, 0
15762  6891 00 00       _time_start: .fill 2, 0
15763  6893 00 00       _time_up: .fill 2, 0
15764  6895 00 00 00 00 _damage_data: .fill 18, 0
15764  6899 00 00 00 00 
15764  689D 00 00 00 00 
15764  68A1 00 00 00 00 
15764  68A5 00 00 
15765  68A7 00 00       _d4: .fill 2, 0
15766  68A9 00 00       _ship_y: .fill 2, 0
15767  68AB 00 00       _ship_x: .fill 2, 0
15768  68AD 00 00       _stardate: .fill 2, 0
15769  68AF 00 00 00 00 _quad_data: .fill 64, 0
15769  68B3 00 00 00 00 
15769  68B7 00 00 00 00 
15769  68BB 00 00 00 00 
15769  68BF 00 00 00 00 
15769  68C3 00 00 00 00 
15769  68C7 00 00 00 00 
15769  68CB 00 00 00 00 
15769  68CF 00 00 00 00 
15769  68D3 00 00 00 00 
15769  68D7 00 00 00 00 
15769  68DB 00 00 00 00 
15769  68DF 00 00 00 00 
15769  68E3 00 00 00 00 
15769  68E7 00 00 00 00 
15769  68EB 00 00 00 00 
15770  68EF 00 00 00 00 _quadname_data: .fill 12, 0
15770  68F3 00 00 00 00 
15770  68F7 00 00 00 00 
15771  68FB 72 65 70 6F _inc_1_data: .db "reports:\n  Incorrect course data, sir!\n", 0
15771  68FF 72 74 73 3A 
15771  6903 0A 20 20 49 
15771  6907 6E 63 6F 72 
15771  690B 72 65 63 74 
15771  690F 20 63 6F 75 
15771  6913 72 73 65 20 
15771  6917 64 61 74 61 
15771  691B 2C 20 73 69 
15771  691F 72 21 0A 00 
15772  6923 FB 68       _inc_1: .dw _inc_1_data
15773  6925             _quad_name_data: 
15774  6925 00 00       .dw 
15775  6927 A8 6A A9 6A .dw _s0, _s1, _s2, _s3, _s4, _s5, _s6, _s7, _s8, _s9, _s10, _s11, _s12, _s13, _s14, _s15, _s16, 
15775  692B B1 6A B7 6A 
15775  692F BF 6A C4 6A 
15775  6933 CC 6A D3 6A 
15775  6937 DF 6A E6 6A 
15775  693B ED 6A F3 6A 
15775  693F FB 6A 06 6B 
15775  6943 10 6B 18 6B 
15775  6947 21 6B 
15776  6949 00 00 00 00 .fill 34, 0
15776  694D 00 00 00 00 
15776  6951 00 00 00 00 
15776  6955 00 00 00 00 
15776  6959 00 00 00 00 
15776  695D 00 00 00 00 
15776  6961 00 00 00 00 
15776  6965 00 00 00 00 
15776  6969 00 00 
15777  696B             _device_name_data: 
15778  696B 00 00       .dw 
15779  696D A8 6A 27 6B .dw _s0, _s17, _s18, _s19, _s20, _s21, _s22, _s23, _s24, 
15779  6971 34 6B 48 6B 
15779  6975 5B 6B 6A 6B 
15779  6979 77 6B 86 6B 
15779  697D 95 6B 
15780  697F 00 00 00 00 .fill 18, 0
15780  6983 00 00 00 00 
15780  6987 00 00 00 00 
15780  698B 00 00 00 00 
15780  698F 00 00 
15781  6991 44 61 6D 61 _dcr_1_data: .db "Damage Control report:", 0
15781  6995 67 65 20 43 
15781  6999 6F 6E 74 72 
15781  699D 6F 6C 20 72 
15781  69A1 65 70 6F 72 
15781  69A5 74 3A 00 
15782  69A8 91 69       _dcr_1: .dw _dcr_1_data
15783  69AA             _plural_2_data: 
15784  69AA 00          .db 
15785  69AB 00 00       .db $00,$00,
15786  69AD             _plural_data: 
15787  69AD 00          .db 
15788  69AE 69 73 00    .db $69,$73,$00,
15789  69B1 00          .fill 1, 0
15790  69B2             _warpmax_data: 
15791  69B2 00          .db 
15792  69B3 08          .db $08,
15793  69B4 00 00 00    .fill 3, 0
15794  69B7 2D 2D 2D 2D _srs_1_data: .db "------------------------", 0
15794  69BB 2D 2D 2D 2D 
15794  69BF 2D 2D 2D 2D 
15794  69C3 2D 2D 2D 2D 
15794  69C7 2D 2D 2D 2D 
15794  69CB 2D 2D 2D 2D 
15794  69CF 00 
15795  69D0 B7 69       _srs_1: .dw _srs_1_data
15796  69D2             _tilestr_data: 
15797  69D2 00 00       .dw 
15798  69D4 A6 6B AA 6B .dw _s25, _s26, _s27, _s28, _s29, 
15798  69D8 AE 6B B2 6B 
15798  69DC B6 6B 
15799  69DE 00 00 00 00 .fill 10, 0
15799  69E2 00 00 00 00 
15799  69E6 00 00 
15800  69E8 2D 2D 2D 2D _lrs_1_data: .db "-------------------\n", 0
15800  69EC 2D 2D 2D 2D 
15800  69F0 2D 2D 2D 2D 
15800  69F4 2D 2D 2D 2D 
15800  69F8 2D 2D 2D 0A 
15800  69FC 00 
15801  69FD E8 69       _lrs_1: .dw _lrs_1_data
15802  69FF 20 20 20 2D _gr_1_data: .db "   ----- ----- ----- ----- ----- ----- ----- -----\n", 0
15802  6A03 2D 2D 2D 2D 
15802  6A07 20 2D 2D 2D 
15802  6A0B 2D 2D 20 2D 
15802  6A0F 2D 2D 2D 2D 
15802  6A13 20 2D 2D 2D 
15802  6A17 2D 2D 20 2D 
15802  6A1B 2D 2D 2D 2D 
15802  6A1F 20 2D 2D 2D 
15802  6A23 2D 2D 20 2D 
15802  6A27 2D 2D 2D 2D 
15802  6A2B 20 2D 2D 2D 
15802  6A2F 2D 2D 0A 00 
15803  6A33 FF 69       _gr_1: .dw _gr_1_data
15804  6A35 73 00       _str_s_data: .db "s", 0
15805  6A37 35 6A       _str_s: .dw _str_s_data
15806  6A39 20 20 2D 2D _gm_1_data: .db "  ----- ----- ----- ----- ----- ----- ----- -----\n", 0
15806  6A3D 2D 2D 2D 20 
15806  6A41 2D 2D 2D 2D 
15806  6A45 2D 20 2D 2D 
15806  6A49 2D 2D 2D 20 
15806  6A4D 2D 2D 2D 2D 
15806  6A51 2D 20 2D 2D 
15806  6A55 2D 2D 2D 20 
15806  6A59 2D 2D 2D 2D 
15806  6A5D 2D 20 2D 2D 
15806  6A61 2D 2D 2D 20 
15806  6A65 2D 2D 2D 2D 
15806  6A69 2D 0A 00 
15807  6A6C 39 6A       _gm_1: .dw _gm_1_data
15808  6A6E 20 20 44 49 _dist_1_data: .db "  DISTANCE = %s\n\n", 0
15808  6A72 53 54 41 4E 
15808  6A76 43 45 20 3D 
15808  6A7A 20 25 73 0A 
15808  6A7E 0A 00 
15809  6A80 6E 6A       _dist_1: .dw _dist_1_data
15810  6A82 00 00 00 00 st_print100_buf_dt: .fill 16, 0
15810  6A86 00 00 00 00 
15810  6A8A 00 00 00 00 
15810  6A8E 00 00 00 00 
15811  6A92             st_quadrant_name_sect_name_dt: 
15812  6A92 A8 6A 68 7D .dw _s0, _s164, _s165, _s166, _s167, 
15812  6A96 6B 7D 6F 7D 
15812  6A9A 74 7D 
15813  6A9C 00 00 00 00 .fill 10, 0
15813  6AA0 00 00 00 00 
15813  6AA4 00 00 
15814  6AA6 92 6A       st_quadrant_name_sect_name: .dw st_quadrant_name_sect_name_dt
15815  6AA8 00          _s0: .db "", 0
15816  6AA9 41 6E 74 61 _s1: .db "Antares", 0
15816  6AAD 72 65 73 00 
15817  6AB1 52 69 67 65 _s2: .db "Rigel", 0
15817  6AB5 6C 00 
15818  6AB7 50 72 6F 63 _s3: .db "Procyon", 0
15818  6ABB 79 6F 6E 00 
15819  6ABF 56 65 67 61 _s4: .db "Vega", 0
15819  6AC3 00 
15820  6AC4 43 61 6E 6F _s5: .db "Canopus", 0
15820  6AC8 70 75 73 00 
15821  6ACC 41 6C 74 61 _s6: .db "Altair", 0
15821  6AD0 69 72 00 
15822  6AD3 53 61 67 69 _s7: .db "Sagittarius", 0
15822  6AD7 74 74 61 72 
15822  6ADB 69 75 73 00 
15823  6ADF 50 6F 6C 6C _s8: .db "Pollux", 0
15823  6AE3 75 78 00 
15824  6AE6 53 69 72 69 _s9: .db "Sirius", 0
15824  6AEA 75 73 00 
15825  6AED 44 65 6E 65 _s10: .db "Deneb", 0
15825  6AF1 62 00 
15826  6AF3 43 61 70 65 _s11: .db "Capella", 0
15826  6AF7 6C 6C 61 00 
15827  6AFB 42 65 74 65 _s12: .db "Betelgeuse", 0
15827  6AFF 6C 67 65 75 
15827  6B03 73 65 00 
15828  6B06 41 6C 64 65 _s13: .db "Aldebaran", 0
15828  6B0A 62 61 72 61 
15828  6B0E 6E 00 
15829  6B10 52 65 67 75 _s14: .db "Regulus", 0
15829  6B14 6C 75 73 00 
15830  6B18 41 72 63 74 _s15: .db "Arcturus", 0
15830  6B1C 75 72 75 73 
15830  6B20 00 
15831  6B21 53 70 69 63 _s16: .db "Spica", 0
15831  6B25 61 00 
15832  6B27 57 61 72 70 _s17: .db "Warp engines", 0
15832  6B2B 20 65 6E 67 
15832  6B2F 69 6E 65 73 
15832  6B33 00 
15833  6B34 53 68 6F 72 _s18: .db "Short range sensors", 0
15833  6B38 74 20 72 61 
15833  6B3C 6E 67 65 20 
15833  6B40 73 65 6E 73 
15833  6B44 6F 72 73 00 
15834  6B48 4C 6F 6E 67 _s19: .db "Long range sensors", 0
15834  6B4C 20 72 61 6E 
15834  6B50 67 65 20 73 
15834  6B54 65 6E 73 6F 
15834  6B58 72 73 00 
15835  6B5B 50 68 61 73 _s20: .db "Phaser control", 0
15835  6B5F 65 72 20 63 
15835  6B63 6F 6E 74 72 
15835  6B67 6F 6C 00 
15836  6B6A 50 68 6F 74 _s21: .db "Photon tubes", 0
15836  6B6E 6F 6E 20 74 
15836  6B72 75 62 65 73 
15836  6B76 00 
15837  6B77 44 61 6D 61 _s22: .db "Damage control", 0
15837  6B7B 67 65 20 63 
15837  6B7F 6F 6E 74 72 
15837  6B83 6F 6C 00 
15838  6B86 53 68 69 65 _s23: .db "Shield control", 0
15838  6B8A 6C 64 20 63 
15838  6B8E 6F 6E 74 72 
15838  6B92 6F 6C 00 
15839  6B95 4C 69 62 72 _s24: .db "Library computer", 0
15839  6B99 61 72 79 20 
15839  6B9D 63 6F 6D 70 
15839  6BA1 75 74 65 72 
15839  6BA5 00 
15840  6BA6 20 20 20 00 _s25: .db "   ", 0
15841  6BAA 20 2A 20 00 _s26: .db " * ", 0
15842  6BAE 3E 21 3C 00 _s27: .db ">!<", 0
15843  6BB2 2B 4B 2B 00 _s28: .db "+K+", 0
15844  6BB6 3C 2A 3E 00 _s29: .db "<*>", 0
15845  6BBA 61 72 65 00 _s30: .db "are", 0
15846  6BBE 69 73 00    _s31: .db "is", 0
15847  6BC1 25 73 20 25 _s32: .db "%s %s inoperable.\n", 0
15847  6BC5 73 20 69 6E 
15847  6BC9 6F 70 65 72 
15847  6BCD 61 62 6C 65 
15847  6BD1 2E 0A 00 
15848  6BD4 73 74 61 72 _s33: .db "startrek.intro", 0
15848  6BD8 74 72 65 6B 
15848  6BDC 2E 69 6E 74 
15848  6BE0 72 6F 00 
15849  6BE3 73 74 61 72 _s34: .db "startrek.doc", 0
15849  6BE7 74 72 65 6B 
15849  6BEB 2E 64 6F 63 
15849  6BEF 00 
15850  6BF0 73 74 61 72 _s35: .db "startrek.logo", 0
15850  6BF4 74 72 65 6B 
15850  6BF8 2E 6C 6F 67 
15850  6BFC 6F 00 
15851  6BFE 73 74 61 72 _s36: .db "startrek.fatal", 0
15851  6C02 74 72 65 6B 
15851  6C06 2E 66 61 74 
15851  6C0A 61 6C 00 
15852  6C0D 43 6F 6D 6D _s37: .db "Command? ", 0
15852  6C11 61 6E 64 3F 
15852  6C15 20 00 
15853  6C17 6E 61 76 00 _s38: .db "nav", 0
15854  6C1B 73 72 73 00 _s39: .db "srs", 0
15855  6C1F 6C 72 73 00 _s40: .db "lrs", 0
15856  6C23 70 68 61 00 _s41: .db "pha", 0
15857  6C27 74 6F 72 00 _s42: .db "tor", 0
15858  6C2B 73 68 69 00 _s43: .db "shi", 0
15859  6C2F 64 61 6D 00 _s44: .db "dam", 0
15860  6C33 63 6F 6D 00 _s45: .db "com", 0
15861  6C37 78 78 78 00 _s46: .db "xxx", 0
15862  6C3B 45 6E 74 65 _s47: .db "Enter one of the following:\n", 0
15862  6C3F 72 20 6F 6E 
15862  6C43 65 20 6F 66 
15862  6C47 20 74 68 65 
15862  6C4B 20 66 6F 6C 
15862  6C4F 6C 6F 77 69 
15862  6C53 6E 67 3A 0A 
15862  6C57 00 
15863  6C58 20 20 6E 61 _s48: .db "  nav - To Set Course", 0
15863  6C5C 76 20 2D 20 
15863  6C60 54 6F 20 53 
15863  6C64 65 74 20 43 
15863  6C68 6F 75 72 73 
15863  6C6C 65 00 
15864  6C6E 20 20 73 72 _s49: .db "  srs - Short Range Sensors", 0
15864  6C72 73 20 2D 20 
15864  6C76 53 68 6F 72 
15864  6C7A 74 20 52 61 
15864  6C7E 6E 67 65 20 
15864  6C82 53 65 6E 73 
15864  6C86 6F 72 73 00 
15865  6C8A 20 20 6C 72 _s50: .db "  lrs - Long Range Sensors", 0
15865  6C8E 73 20 2D 20 
15865  6C92 4C 6F 6E 67 
15865  6C96 20 52 61 6E 
15865  6C9A 67 65 20 53 
15865  6C9E 65 6E 73 6F 
15865  6CA2 72 73 00 
15866  6CA5 20 20 70 68 _s51: .db "  pha - Phasers", 0
15866  6CA9 61 20 2D 20 
15866  6CAD 50 68 61 73 
15866  6CB1 65 72 73 00 
15867  6CB5 20 20 74 6F _s52: .db "  tor - Photon Torpedoes", 0
15867  6CB9 72 20 2D 20 
15867  6CBD 50 68 6F 74 
15867  6CC1 6F 6E 20 54 
15867  6CC5 6F 72 70 65 
15867  6CC9 64 6F 65 73 
15867  6CCD 00 
15868  6CCE 20 20 73 68 _s53: .db "  shi - Shield Control", 0
15868  6CD2 69 20 2D 20 
15868  6CD6 53 68 69 65 
15868  6CDA 6C 64 20 43 
15868  6CDE 6F 6E 74 72 
15868  6CE2 6F 6C 00 
15869  6CE5 20 20 64 61 _s54: .db "  dam - Damage Control", 0
15869  6CE9 6D 20 2D 20 
15869  6CED 44 61 6D 61 
15869  6CF1 67 65 20 43 
15869  6CF5 6F 6E 74 72 
15869  6CF9 6F 6C 00 
15870  6CFC 20 20 63 6F _s55: .db "  com - Library Computer", 0
15870  6D00 6D 20 2D 20 
15870  6D04 4C 69 62 72 
15870  6D08 61 72 79 20 
15870  6D0C 43 6F 6D 70 
15870  6D10 75 74 65 72 
15870  6D14 00 
15871  6D15 20 20 78 78 _s56: .db "  xxx - Resign Command\n", 0
15871  6D19 78 20 2D 20 
15871  6D1D 52 65 73 69 
15871  6D21 67 6E 20 43 
15871  6D25 6F 6D 6D 61 
15871  6D29 6E 64 0A 00 
15872  6D2D 73 00       _s57: .db "s", 0
15873  6D2F 4E 6F 77 20 _s58: .db "Now entering %s quadrant...\n\n", 0
15873  6D33 65 6E 74 65 
15873  6D37 72 69 6E 67 
15873  6D3B 20 25 73 20 
15873  6D3F 71 75 61 64 
15873  6D43 72 61 6E 74 
15873  6D47 2E 2E 2E 0A 
15873  6D4B 0A 00 
15874  6D4D 0A 59 6F 75 _s59: .db "\nYour mission begins with your starship located", 0
15874  6D51 72 20 6D 69 
15874  6D55 73 73 69 6F 
15874  6D59 6E 20 62 65 
15874  6D5D 67 69 6E 73 
15874  6D61 20 77 69 74 
15874  6D65 68 20 79 6F 
15874  6D69 75 72 20 73 
15874  6D6D 74 61 72 73 
15874  6D71 68 69 70 20 
15874  6D75 6C 6F 63 61 
15874  6D79 74 65 64 00 
15875  6D7D 69 6E 20 74 _s60: .db "in the galactic quadrant %s.\n\n", 0
15875  6D81 68 65 20 67 
15875  6D85 61 6C 61 63 
15875  6D89 74 69 63 20 
15875  6D8D 71 75 61 64 
15875  6D91 72 61 6E 74 
15875  6D95 20 25 73 2E 
15875  6D99 0A 0A 00 
15876  6D9C 43 6F 6D 62 _s61: .db "Combat Area  Condition Red\n", 0
15876  6DA0 61 74 20 41 
15876  6DA4 72 65 61 20 
15876  6DA8 20 43 6F 6E 
15876  6DAC 64 69 74 69 
15876  6DB0 6F 6E 20 52 
15876  6DB4 65 64 0A 00 
15877  6DB8 53 68 69 65 _s62: .db "Shields Dangerously Low\n", 0
15877  6DBC 6C 64 73 20 
15877  6DC0 44 61 6E 67 
15877  6DC4 65 72 6F 75 
15877  6DC8 73 6C 79 20 
15877  6DCC 4C 6F 77 0A 
15877  6DD0 00 
15878  6DD1 43 6F 75 72 _s63: .db "Course (0-9): ", 0
15878  6DD5 73 65 20 28 
15878  6DD9 30 2D 39 29 
15878  6DDD 3A 20 00 
15879  6DE0 4C 74 2E 20 _s64: .db "Lt. Sulu%s", 0
15879  6DE4 53 75 6C 75 
15879  6DE8 25 73 00 
15880  6DEB 30 2E 32 00 _s65: .db "0.2", 0
15881  6DEF 57 61 72 70 _s66: .db "Warp Factor (0-%s): ", 0
15881  6DF3 20 46 61 63 
15881  6DF7 74 6F 72 20 
15881  6DFB 28 30 2D 25 
15881  6DFF 73 29 3A 20 
15881  6E03 00 
15882  6E04 57 61 72 70 _s67: .db "Warp Engines are damaged. Maximum speed = Warp 0.2.\n\n", 0
15882  6E08 20 45 6E 67 
15882  6E0C 69 6E 65 73 
15882  6E10 20 61 72 65 
15882  6E14 20 64 61 6D 
15882  6E18 61 67 65 64 
15882  6E1C 2E 20 4D 61 
15882  6E20 78 69 6D 75 
15882  6E24 6D 20 73 70 
15882  6E28 65 65 64 20 
15882  6E2C 3D 20 57 61 
15882  6E30 72 70 20 30 
15882  6E34 2E 32 2E 0A 
15882  6E38 0A 00 
15883  6E3A 43 68 69 65 _s68: .db "Chief Engineer Scott reports:\n  The engines won't take warp %s!\n\n", 0
15883  6E3E 66 20 45 6E 
15883  6E42 67 69 6E 65 
15883  6E46 65 72 20 53 
15883  6E4A 63 6F 74 74 
15883  6E4E 20 72 65 70 
15883  6E52 6F 72 74 73 
15883  6E56 3A 0A 20 20 
15883  6E5A 54 68 65 20 
15883  6E5E 65 6E 67 69 
15883  6E62 6E 65 73 20 
15883  6E66 77 6F 6E 27 
15883  6E6A 74 20 74 61 
15883  6E6E 6B 65 20 77 
15883  6E72 61 72 70 20 
15883  6E76 25 73 21 0A 
15883  6E7A 0A 
15884  6E7B 45 6E 67 69 _s69: .db "Engineering reports:\n  Insufficient energy available for maneuvering at warp %s!\n\n", 0
15884  6E7F 6E 65 65 72 
15884  6E83 69 6E 67 20 
15884  6E87 72 65 70 6F 
15884  6E8B 72 74 73 3A 
15884  6E8F 0A 20 20 49 
15884  6E93 6E 73 75 66 
15884  6E97 66 69 63 69 
15884  6E9B 65 6E 74 20 
15884  6E9F 65 6E 65 72 
15884  6EA3 67 79 20 61 
15884  6EA7 76 61 69 6C 
15884  6EAB 61 62 6C 65 
15884  6EAF 20 66 6F 72 
15884  6EB3 20 6D 61 6E 
15884  6EB7 65 75 76 65 
15884  6EBB 72 69 6E 67 
15884  6EBF 20 61 74 20 
15884  6EC3 77 61 72 70 
15884  6EC7 20 25 73 21 
15884  6ECB 0A 0A 00 
15885  6ECE 44 65 66 6C _s70: .db "Deflector Control Room acknowledges:\n  %d units of energy presently deployed to shields.\n", 0
15885  6ED2 65 63 74 6F 
15885  6ED6 72 20 43 6F 
15885  6EDA 6E 74 72 6F 
15885  6EDE 6C 20 52 6F 
15885  6EE2 6F 6D 20 61 
15885  6EE6 63 6B 6E 6F 
15885  6EEA 77 6C 65 64 
15885  6EEE 67 65 73 3A 
15885  6EF2 0A 20 20 25 
15885  6EF6 64 20 75 6E 
15885  6EFA 69 74 73 20 
15885  6EFE 6F 66 20 65 
15885  6F02 6E 65 72 67 
15885  6F06 79 20 70 72 
15885  6F0A 65 73 65 6E 
15885  6F0E 74 6C 79 20 
15885  6F12 64 65 70 6C 
15885  6F16 6F 79 65 64 
15885  6F1A 20 74 6F 20 
15885  6F1E 73 68 69 65 
15885  6F22 6C 64 73 2E 
15885  6F26 0A 00 
15886  6F28 4C 54 2E 20 _s71: .db "LT. Uhura reports:\n Message from Starfleet Command:\n\n Permission to attempt crossing of galactic perimeter\n is hereby *denie"
15886  6F2C 55 68 75 72 
15886  6F30 61 20 72 65 
15886  6F34 70 6F 72 74 
15886  6F38 73 3A 0A 20 
15886  6F3C 4D 65 73 73 
15886  6F40 61 67 65 20 
15886  6F44 66 72 6F 6D 
15886  6F48 20 53 74 61 
15886  6F4C 72 66 6C 65 
15886  6F50 65 74 20 43 
15886  6F54 6F 6D 6D 61 
15886  6F58 6E 64 3A 0A 
15886  6F5C 0A 20 50 65 
15886  6F60 72 6D 69 73 
15886  6F64 73 69 6F 6E 
15886  6F68 20 74 6F 20 
15886  6F6C 61 74 74 65 
15886  6F70 6D 70 74 20 
15886  6F74 63 72 6F 73 
15886  6F78 73 69 6E 67 
15886  6F7C 20 6F 66 20 
15886  6F80 67 61 6C 61 
15886  6F84 63 74 69 63 
15886  6F88 20 70 65 72 
15886  6F8C 69 6D 65 74 
15886  6F90 65 72 0A 20 
15886  6F94 69 73 20 68 
15886  6F98 65 72 65 62 
15886  6F9C 79 20 2A 64 
15886  6FA0 65 6E 69 65 
15887  6FA4 64 2A 2E 20 .db "d*. Shut down your engines.\n\n Chief Engineer Scott reports:\n Warp Engines shut down at sector %d, %d of quadrant %d, %d.\n\n", 0
15887  6FA8 53 68 75 74 
15887  6FAC 20 64 6F 77 
15887  6FB0 6E 20 79 6F 
15887  6FB4 75 72 20 65 
15887  6FB8 6E 67 69 6E 
15887  6FBC 65 73 2E 0A 
15887  6FC0 0A 20 43 68 
15887  6FC4 69 65 66 20 
15887  6FC8 45 6E 67 69 
15887  6FCC 6E 65 65 72 
15887  6FD0 20 53 63 6F 
15887  6FD4 74 74 20 72 
15887  6FD8 65 70 6F 72 
15887  6FDC 74 73 3A 0A 
15887  6FE0 20 57 61 72 
15887  6FE4 70 20 45 6E 
15887  6FE8 67 69 6E 65 
15887  6FEC 73 20 73 68 
15887  6FF0 75 74 20 64 
15887  6FF4 6F 77 6E 20 
15887  6FF8 61 74 20 73 
15887  6FFC 65 63 74 6F 
15887  7000 72 20 25 64 
15887  7004 2C 20 25 64 
15887  7008 20 6F 66 20 
15887  700C 71 75 61 64 
15887  7010 72 61 6E 74 
15887  7014 20 25 64 2C 
15887  7018 20 25 64 2E 
15887  701C 0A 0A 00 
15888  701F 57 61 72 70 _s72: .db "Warp Engines shut down at sector %d, %d due to bad navigation.\n\n", 0
15888  7023 20 45 6E 67 
15888  7027 69 6E 65 73 
15888  702B 20 73 68 75 
15888  702F 74 20 64 6F 
15888  7033 77 6E 20 61 
15888  7037 74 20 73 65 
15888  703B 63 74 6F 72 
15888  703F 20 25 64 2C 
15888  7043 20 25 64 20 
15888  7047 64 75 65 20 
15888  704B 74 6F 20 62 
15888  704F 61 64 20 6E 
15888  7053 61 76 69 67 
15888  7057 61 74 69 6F 
15888  705B 6E 2E 0A 0A 
15888  705F 00 
15889  7060 53 68 69 65 _s73: .db "Shield Control supplies energy to complete maneuver.\n", 0
15889  7064 6C 64 20 43 
15889  7068 6F 6E 74 72 
15889  706C 6F 6C 20 73 
15889  7070 75 70 70 6C 
15889  7074 69 65 73 20 
15889  7078 65 6E 65 72 
15889  707C 67 79 20 74 
15889  7080 6F 20 63 6F 
15889  7084 6D 70 6C 65 
15889  7088 74 65 20 6D 
15889  708C 61 6E 65 75 
15889  7090 76 65 72 2E 
15889  7094 0A 00 
15890  7096 47 52 45 45 _s74: .db "GREEN", 0
15890  709A 4E 00 
15891  709C 59 45 4C 4C _s75: .db "YELLOW", 0
15891  70A0 4F 57 00 
15892  70A3 2A 52 45 44 _s76: .db "*RED*", 0
15892  70A7 2A 00 
15893  70A9 44 4F 43 4B _s77: .db "DOCKED", 0
15893  70AD 45 44 00 
15894  70B0 53 68 69 65 _s78: .db "Shields dropped for docking purposes.", 0
15894  70B4 6C 64 73 20 
15894  70B8 64 72 6F 70 
15894  70BC 70 65 64 20 
15894  70C0 66 6F 72 20 
15894  70C4 64 6F 63 6B 
15894  70C8 69 6E 67 20 
15894  70CC 70 75 72 70 
15894  70D0 6F 73 65 73 
15894  70D4 2E 00 
15895  70D6 0A 2A 2A 2A _s79: .db "\n*** Short Range Sensors are out ***", 0
15895  70DA 20 53 68 6F 
15895  70DE 72 74 20 52 
15895  70E2 61 6E 67 65 
15895  70E6 20 53 65 6E 
15895  70EA 73 6F 72 73 
15895  70EE 20 61 72 65 
15895  70F2 20 6F 75 74 
15895  70F6 20 2A 2A 2A 
15895  70FA 00 
15896  70FB 20 20 20 20 _s80: .db "    Stardate            %d\n", 0
15896  70FF 53 74 61 72 
15896  7103 64 61 74 65 
15896  7107 20 20 20 20 
15896  710B 20 20 20 20 
15896  710F 20 20 20 20 
15896  7113 25 64 0A 00 
15897  7117 20 20 20 20 _s81: .db "    Condition           %s\n", 0
15897  711B 43 6F 6E 64 
15897  711F 69 74 69 6F 
15897  7123 6E 20 20 20 
15897  7127 20 20 20 20 
15897  712B 20 20 20 20 
15897  712F 25 73 0A 00 
15898  7133 20 20 20 20 _s82: .db "    Quadrant            %d, %d\n", 0
15898  7137 51 75 61 64 
15898  713B 72 61 6E 74 
15898  713F 20 20 20 20 
15898  7143 20 20 20 20 
15898  7147 20 20 20 20 
15898  714B 25 64 2C 20 
15898  714F 25 64 0A 00 
15899  7153 20 20 20 20 _s83: .db "    Sector              %d, %d\n", 0
15899  7157 53 65 63 74 
15899  715B 6F 72 20 20 
15899  715F 20 20 20 20 
15899  7163 20 20 20 20 
15899  7167 20 20 20 20 
15899  716B 25 64 2C 20 
15899  716F 25 64 0A 00 
15900  7173 20 20 20 20 _s84: .db "    Photon Torpedoes    %d\n", 0
15900  7177 50 68 6F 74 
15900  717B 6F 6E 20 54 
15900  717F 6F 72 70 65 
15900  7183 64 6F 65 73 
15900  7187 20 20 20 20 
15900  718B 25 64 0A 00 
15901  718F 20 20 20 20 _s85: .db "    Total Energy        %d\n", 0
15901  7193 54 6F 74 61 
15901  7197 6C 20 45 6E 
15901  719B 65 72 67 79 
15901  719F 20 20 20 20 
15901  71A3 20 20 20 20 
15901  71A7 25 64 0A 00 
15902  71AB 20 20 20 20 _s86: .db "    Shields             %d\n", 0
15902  71AF 53 68 69 65 
15902  71B3 6C 64 73 20 
15902  71B7 20 20 20 20 
15902  71BB 20 20 20 20 
15902  71BF 20 20 20 20 
15902  71C3 25 64 0A 00 
15903  71C7 20 20 20 20 _s87: .db "    Klingons Remaining  %d\n", 0
15903  71CB 4B 6C 69 6E 
15903  71CF 67 6F 6E 73 
15903  71D3 20 52 65 6D 
15903  71D7 61 69 6E 69 
15903  71DB 6E 67 20 20 
15903  71DF 25 64 0A 00 
15904  71E3 4C 6F 6E 67 _s88: .db "Long Range Scan for Quadrant %d, %d\n\n", 0
15904  71E7 20 52 61 6E 
15904  71EB 67 65 20 53 
15904  71EF 63 61 6E 20 
15904  71F3 66 6F 72 20 
15904  71F7 51 75 61 64 
15904  71FB 72 61 6E 74 
15904  71FF 20 25 64 2C 
15904  7203 20 25 64 0A 
15904  7207 0A 00 
15905  7209 25 73 3A 00 _s89: .db "%s:", 0
15906  720D 2A 2A 2A 00 _s90: .db "***", 0
15907  7211 20 3A 00    _s91: .db " :", 0
15908  7214 25 73 0A 00 _s92: .db "%s\n", 0
15909  7218 53 63 69 65 _s93: .db "Science Officer Spock reports:\n  'Sensors show no enemy ships in this quadrant'\n", 0
15909  721C 6E 63 65 20 
15909  7220 4F 66 66 69 
15909  7224 63 65 72 20 
15909  7228 53 70 6F 63 
15909  722C 6B 20 72 65 
15909  7230 70 6F 72 74 
15909  7234 73 3A 0A 20 
15909  7238 20 27 53 65 
15909  723C 6E 73 6F 72 
15909  7240 73 20 73 68 
15909  7244 6F 77 20 6E 
15909  7248 6F 20 65 6E 
15909  724C 65 6D 79 20 
15909  7250 73 68 69 70 
15909  7254 73 20 69 6E 
15909  7258 20 74 68 69 
15909  725C 73 20 71 75 
15909  7260 61 64 72 61 
15909  7264 6E 74 27 0A 
15909  7268 00 
15910  7269 43 6F 6D 70 _s94: .db "Computer failure hampers accuracy.", 0
15910  726D 75 74 65 72 
15910  7271 20 66 61 69 
15910  7275 6C 75 72 65 
15910  7279 20 68 61 6D 
15910  727D 70 65 72 73 
15910  7281 20 61 63 63 
15910  7285 75 72 61 63 
15910  7289 79 2E 00 
15911  728C 50 68 61 73 _s95: .db "Phasers locked on target;\n Energy available = %d units\n\n Number of units to fire: ", 0
15911  7290 65 72 73 20 
15911  7294 6C 6F 63 6B 
15911  7298 65 64 20 6F 
15911  729C 6E 20 74 61 
15911  72A0 72 67 65 74 
15911  72A4 3B 0A 20 45 
15911  72A8 6E 65 72 67 
15911  72AC 79 20 61 76 
15911  72B0 61 69 6C 61 
15911  72B4 62 6C 65 20 
15911  72B8 3D 20 25 64 
15911  72BC 20 75 6E 69 
15911  72C0 74 73 0A 0A 
15911  72C4 20 4E 75 6D 
15911  72C8 62 65 72 20 
15911  72CC 6F 66 20 75 
15911  72D0 6E 69 74 73 
15911  72D4 20 74 6F 20 
15911  72D8 66 69 72 65 
15911  72DC 3A 20 00 
15912  72DF 4E 6F 74 20 _s96: .db "Not enough energy available.\n", 0
15912  72E3 65 6E 6F 75 
15912  72E7 67 68 20 65 
15912  72EB 6E 65 72 67 
15912  72EF 79 20 61 76 
15912  72F3 61 69 6C 61 
15912  72F7 62 6C 65 2E 
15912  72FB 0A 00 
15913  72FD 53 65 6E 73 _s97: .db "Sensors show no damage to enemy at %d, %d\n\n", 0
15913  7301 6F 72 73 20 
15913  7305 73 68 6F 77 
15913  7309 20 6E 6F 20 
15913  730D 64 61 6D 61 
15913  7311 67 65 20 74 
15913  7315 6F 20 65 6E 
15913  7319 65 6D 79 20 
15913  731D 61 74 20 25 
15913  7321 64 2C 20 25 
15913  7325 64 0A 0A 00 
15914  7329 25 64 20 75 _s98: .db "%d unit hit on Klingon at sector %d, %d\n", 0
15914  732D 6E 69 74 20 
15914  7331 68 69 74 20 
15914  7335 6F 6E 20 4B 
15914  7339 6C 69 6E 67 
15914  733D 6F 6E 20 61 
15914  7341 74 20 73 65 
15914  7345 63 74 6F 72 
15914  7349 20 25 64 2C 
15914  734D 20 25 64 0A 
15914  7351 00 
15915  7352 2A 2A 2A 20 _s99: .db "*** Klingon Destroyed ***\n", 0
15915  7356 4B 6C 69 6E 
15915  735A 67 6F 6E 20 
15915  735E 44 65 73 74 
15915  7362 72 6F 79 65 
15915  7366 64 20 2A 2A 
15915  736A 2A 0A 00 
15916  736D 20 20 20 28 _s100: .db "   (Sensors show %d units remaining.)\n\n", 0
15916  7371 53 65 6E 73 
15916  7375 6F 72 73 20 
15916  7379 73 68 6F 77 
15916  737D 20 25 64 20 
15916  7381 75 6E 69 74 
15916  7385 73 20 72 65 
15916  7389 6D 61 69 6E 
15916  738D 69 6E 67 2E 
15916  7391 29 0A 0A 00 
15917  7395 41 6C 6C 20 _s101: .db "All photon torpedoes expended", 0
15917  7399 70 68 6F 74 
15917  739D 6F 6E 20 74 
15917  73A1 6F 72 70 65 
15917  73A5 64 6F 65 73 
15917  73A9 20 65 78 70 
15917  73AD 65 6E 64 65 
15917  73B1 64 00 
15918  73B3 45 6E 73 69 _s102: .db "Ensign Chekov%s", 0
15918  73B7 67 6E 20 43 
15918  73BB 68 65 6B 6F 
15918  73BF 76 25 73 00 
15919  73C3 54 6F 72 70 _s103: .db "Torpedo Track:", 0
15919  73C7 65 64 6F 20 
15919  73CB 54 72 61 63 
15919  73CF 6B 3A 00 
15920  73D2 20 20 20 20 _s104: .db "    %d, %d\n", 0
15920  73D6 25 64 2C 20 
15920  73DA 25 64 0A 00 
15921  73DE 54 6F 72 70 _s105: .db "Torpedo Missed\n", 0
15921  73E2 65 64 6F 20 
15921  73E6 4D 69 73 73 
15921  73EA 65 64 0A 00 
15922  73EE 53 74 61 72 _s106: .db "Star at %d, %d absorbed torpedo energy.\n\n", 0
15922  73F2 20 61 74 20 
15922  73F6 25 64 2C 20 
15922  73FA 25 64 20 61 
15922  73FE 62 73 6F 72 
15922  7402 62 65 64 20 
15922  7406 74 6F 72 70 
15922  740A 65 64 6F 20 
15922  740E 65 6E 65 72 
15922  7412 67 79 2E 0A 
15922  7416 0A 00 
15923  7418 2A 2A 2A 20 _s107: .db "*** Starbase Destroyed ***", 0
15923  741C 53 74 61 72 
15923  7420 62 61 73 65 
15923  7424 20 44 65 73 
15923  7428 74 72 6F 79 
15923  742C 65 64 20 2A 
15923  7430 2A 2A 00 
15924  7433 54 68 61 74 _s108: .db "That does it, Captain!!", 0
15924  7437 20 64 6F 65 
15924  743B 73 20 69 74 
15924  743F 2C 20 43 61 
15924  7443 70 74 61 69 
15924  7447 6E 21 21 00 
15925  744B 59 6F 75 20 _s109: .db "You are hereby relieved of command\n", 0
15925  744F 61 72 65 20 
15925  7453 68 65 72 65 
15925  7457 62 79 20 72 
15925  745B 65 6C 69 65 
15925  745F 76 65 64 20 
15925  7463 6F 66 20 63 
15925  7467 6F 6D 6D 61 
15925  746B 6E 64 0A 00 
15926  746F 61 6E 64 20 _s110: .db "and sentenced to 99 stardates of hard", 0
15926  7473 73 65 6E 74 
15926  7477 65 6E 63 65 
15926  747B 64 20 74 6F 
15926  747F 20 39 39 20 
15926  7483 73 74 61 72 
15926  7487 64 61 74 65 
15926  748B 73 20 6F 66 
15926  748F 20 68 61 72 
15926  7493 64 00 
15927  7495 6C 61 62 6F _s111: .db "labor on Cygnus 12!!\n", 0
15927  7499 72 20 6F 6E 
15927  749D 20 43 79 67 
15927  74A1 6E 75 73 20 
15927  74A5 31 32 21 21 
15927  74A9 0A 00 
15928  74AB 53 74 61 72 _s112: .db "Starfleet Command reviewing your record to consider\n court martial!\n", 0
15928  74AF 66 6C 65 65 
15928  74B3 74 20 43 6F 
15928  74B7 6D 6D 61 6E 
15928  74BB 64 20 72 65 
15928  74BF 76 69 65 77 
15928  74C3 69 6E 67 20 
15928  74C7 79 6F 75 72 
15928  74CB 20 72 65 63 
15928  74CF 6F 72 64 20 
15928  74D3 74 6F 20 63 
15928  74D7 6F 6E 73 69 
15928  74DB 64 65 72 0A 
15928  74DF 20 63 6F 75 
15928  74E3 72 74 20 6D 
15928  74E7 61 72 74 69 
15928  74EB 61 6C 21 0A 
15928  74EF 00 
15929  74F0 44 61 6D 61 _s113: .db "Damage Control report not available.", 0
15929  74F4 67 65 20 43 
15929  74F8 6F 6E 74 72 
15929  74FC 6F 6C 20 72 
15929  7500 65 70 6F 72 
15929  7504 74 20 6E 6F 
15929  7508 74 20 61 76 
15929  750C 61 69 6C 61 
15929  7510 62 6C 65 2E 
15929  7514 00 
15930  7515 0A 54 65 63 _s114: .db "\nTechnicians standing by to effect repairs to your ship;\nEstimated time to repair: %s stardates.\n Will you authorize the repa"
15930  7519 68 6E 69 63 
15930  751D 69 61 6E 73 
15930  7521 20 73 74 61 
15930  7525 6E 64 69 6E 
15930  7529 67 20 62 79 
15930  752D 20 74 6F 20 
15930  7531 65 66 66 65 
15930  7535 63 74 20 72 
15930  7539 65 70 61 69 
15930  753D 72 73 20 74 
15930  7541 6F 20 79 6F 
15930  7545 75 72 20 73 
15930  7549 68 69 70 3B 
15930  754D 0A 45 73 74 
15930  7551 69 6D 61 74 
15930  7555 65 64 20 74 
15930  7559 69 6D 65 20 
15930  755D 74 6F 20 72 
15930  7561 65 70 61 69 
15930  7565 72 3A 20 25 
15930  7569 73 20 73 74 
15930  756D 61 72 64 61 
15930  7571 74 65 73 2E 
15930  7575 0A 20 57 69 
15930  7579 6C 6C 20 79 
15930  757D 6F 75 20 61 
15930  7581 75 74 68 6F 
15930  7585 72 69 7A 65 
15930  7589 20 74 68 65 
15930  758D 20 72 65 70 
15930  7591 61 
15931  7592 69 72 20 6F .db "ir order (y/N)? ", 0
15931  7596 72 64 65 72 
15931  759A 20 28 79 2F 
15931  759E 4E 29 3F 20 
15931  75A2 00 
15932  75A3 44 65 76 69 _s115: .db "Device            State of Repair", 0
15932  75A7 63 65 20 20 
15932  75AB 20 20 20 20 
15932  75AF 20 20 20 20 
15932  75B3 20 20 53 74 
15932  75B7 61 74 65 20 
15932  75BB 6F 66 20 52 
15932  75BF 65 70 61 69 
15932  75C3 72 00 
15933  75C5 25 2D 32 35 _s116: .db "%-25s%6s\n", 0
15933  75C9 73 25 36 73 
15933  75CD 0A 00 
15934  75CF 0A 00       _s117: .db "\n", 0
15935  75D1 45 6E 65 72 _s118: .db "Energy available = %d\n\n Input number of units to shields: ", 0
15935  75D5 67 79 20 61 
15935  75D9 76 61 69 6C 
15935  75DD 61 62 6C 65 
15935  75E1 20 3D 20 25 
15935  75E5 64 0A 0A 20 
15935  75E9 49 6E 70 75 
15935  75ED 74 20 6E 75 
15935  75F1 6D 62 65 72 
15935  75F5 20 6F 66 20 
15935  75F9 75 6E 69 74 
15935  75FD 73 20 74 6F 
15935  7601 20 73 68 69 
15935  7605 65 6C 64 73 
15935  7609 3A 20 00 
15936  760C 3C 53 68 69 _s119: .db "<Shields Unchanged>\n", 0
15936  7610 65 6C 64 73 
15936  7614 20 55 6E 63 
15936  7618 68 61 6E 67 
15936  761C 65 64 3E 0A 
15936  7620 00 
15937  7621 53 68 69 65 _s120: .db "Shield Control Reports:\n  'This is not the Federation Treasury.'", 0
15937  7625 6C 64 20 43 
15937  7629 6F 6E 74 72 
15937  762D 6F 6C 20 52 
15937  7631 65 70 6F 72 
15937  7635 74 73 3A 0A 
15937  7639 20 20 27 54 
15937  763D 68 69 73 20 
15937  7641 69 73 20 6E 
15937  7645 6F 74 20 74 
15937  7649 68 65 20 46 
15937  764D 65 64 65 72 
15937  7651 61 74 69 6F 
15937  7655 6E 20 54 72 
15937  7659 65 61 73 75 
15937  765D 72 79 2E 27 
15937  7661 00 
15938  7662 44 65 66 6C _s121: .db "Deflector Control Room report:\n  'Shields now at %d units per your command.'\n\n", 0
15938  7666 65 63 74 6F 
15938  766A 72 20 43 6F 
15938  766E 6E 74 72 6F 
15938  7672 6C 20 52 6F 
15938  7676 6F 6D 20 72 
15938  767A 65 70 6F 72 
15938  767E 74 3A 0A 20 
15938  7682 20 27 53 68 
15938  7686 69 65 6C 64 
15938  768A 73 20 6E 6F 
15938  768E 77 20 61 74 
15938  7692 20 25 64 20 
15938  7696 75 6E 69 74 
15938  769A 73 20 70 65 
15938  769E 72 20 79 6F 
15938  76A2 75 72 20 63 
15938  76A6 6F 6D 6D 61 
15938  76AA 6E 64 2E 27 
15938  76AE 0A 0A 00 
15939  76B1 43 6F 6D 70 _s122: .db "Computer active and awating command: ", 0
15939  76B5 75 74 65 72 
15939  76B9 20 61 63 74 
15939  76BD 69 76 65 20 
15939  76C1 61 6E 64 20 
15939  76C5 61 77 61 74 
15939  76C9 69 6E 67 20 
15939  76CD 63 6F 6D 6D 
15939  76D1 61 6E 64 3A 
15939  76D5 20 00 
15940  76D7 46 75 6E 63 _s123: .db "Functions available from Library-Computer:\n\n", 0
15940  76DB 74 69 6F 6E 
15940  76DF 73 20 61 76 
15940  76E3 61 69 6C 61 
15940  76E7 62 6C 65 20 
15940  76EB 66 72 6F 6D 
15940  76EF 20 4C 69 62 
15940  76F3 72 61 72 79 
15940  76F7 2D 43 6F 6D 
15940  76FB 70 75 74 65 
15940  76FF 72 3A 0A 0A 
15940  7703 00 
15941  7704 20 20 20 30 _s124: .db "   0 = Cumulative Galactic Record\n", 0
15941  7708 20 3D 20 43 
15941  770C 75 6D 75 6C 
15941  7710 61 74 69 76 
15941  7714 65 20 47 61 
15941  7718 6C 61 63 74 
15941  771C 69 63 20 52 
15941  7720 65 63 6F 72 
15941  7724 64 0A 00 
15942  7727 20 20 20 31 _s125: .db "   1 = Status Report\n", 0
15942  772B 20 3D 20 53 
15942  772F 74 61 74 75 
15942  7733 73 20 52 65 
15942  7737 70 6F 72 74 
15942  773B 0A 00 
15943  773D 20 20 20 32 _s126: .db "   2 = Photon Torpedo Data\n", 0
15943  7741 20 3D 20 50 
15943  7745 68 6F 74 6F 
15943  7749 6E 20 54 6F 
15943  774D 72 70 65 64 
15943  7751 6F 20 44 61 
15943  7755 74 61 0A 00 
15944  7759 20 20 20 33 _s127: .db "   3 = Starbase Nav Data\n", 0
15944  775D 20 3D 20 53 
15944  7761 74 61 72 62 
15944  7765 61 73 65 20 
15944  7769 4E 61 76 20 
15944  776D 44 61 74 61 
15944  7771 0A 00 
15945  7773 20 20 20 34 _s128: .db "   4 = Direction/Distance Calculator\n", 0
15945  7777 20 3D 20 44 
15945  777B 69 72 65 63 
15945  777F 74 69 6F 6E 
15945  7783 2F 44 69 73 
15945  7787 74 61 6E 63 
15945  778B 65 20 43 61 
15945  778F 6C 63 75 6C 
15945  7793 61 74 6F 72 
15945  7797 0A 00 
15946  7799 20 20 20 35 _s129: .db "   5 = Galaxy 'Region Name' Map\n", 0
15946  779D 20 3D 20 47 
15946  77A1 61 6C 61 78 
15946  77A5 79 20 27 52 
15946  77A9 65 67 69 6F 
15946  77AD 6E 20 4E 61 
15946  77B1 6D 65 27 20 
15946  77B5 4D 61 70 0A 
15946  77B9 00 
15947  77BA 0A 20 20 20 _s130: .db "\n     Computer Record of Galaxy for Quadrant %d,%d\n\n", 0
15947  77BE 20 20 43 6F 
15947  77C2 6D 70 75 74 
15947  77C6 65 72 20 52 
15947  77CA 65 63 6F 72 
15947  77CE 64 20 6F 66 
15947  77D2 20 47 61 6C 
15947  77D6 61 78 79 20 
15947  77DA 66 6F 72 20 
15947  77DE 51 75 61 64 
15947  77E2 72 61 6E 74 
15947  77E6 20 25 64 2C 
15947  77EA 25 64 0A 0A 
15947  77EE 00 
15948  77EF 20 20 20 20 _s131: .db "     1     2     3     4     5     6     7     8", 0
15948  77F3 20 31 20 20 
15948  77F7 20 20 20 32 
15948  77FB 20 20 20 20 
15948  77FF 20 33 20 20 
15948  7803 20 20 20 34 
15948  7807 20 20 20 20 
15948  780B 20 35 20 20 
15948  780F 20 20 20 36 
15948  7813 20 20 20 20 
15948  7817 20 37 20 20 
15948  781B 20 20 20 38 
15948  781F 00 
15949  7820 25 73 25 64 _s132: .db "%s%d", 0
15949  7824 00 
15950  7825 20 20 20 53 _s133: .db "   Status Report:\n", 0
15950  7829 74 61 74 75 
15950  782D 73 20 52 65 
15950  7831 70 6F 72 74 
15950  7835 3A 0A 00 
15951  7838 4B 6C 69 6E _s134: .db "Klingon%s Left: %d\n Mission must be completed in %d.%d stardates\n", 0
15951  783C 67 6F 6E 25 
15951  7840 73 20 4C 65 
15951  7844 66 74 3A 20 
15951  7848 25 64 0A 20 
15951  784C 4D 69 73 73 
15951  7850 69 6F 6E 20 
15951  7854 6D 75 73 74 
15951  7858 20 62 65 20 
15951  785C 63 6F 6D 70 
15951  7860 6C 65 74 65 
15951  7864 64 20 69 6E 
15951  7868 20 25 64 2E 
15951  786C 25 64 20 73 
15951  7870 74 61 72 64 
15951  7874 61 74 65 73 
15951  7878 0A 00 
15952  787A 59 6F 75 72 _s135: .db "Your stupidity has left you on your own in the galaxy\n -- you have no starbases left!\n", 0
15952  787E 20 73 74 75 
15952  7882 70 69 64 69 
15952  7886 74 79 20 68 
15952  788A 61 73 20 6C 
15952  788E 65 66 74 20 
15952  7892 79 6F 75 20 
15952  7896 6F 6E 20 79 
15952  789A 6F 75 72 20 
15952  789E 6F 77 6E 20 
15952  78A2 69 6E 20 74 
15952  78A6 68 65 20 67 
15952  78AA 61 6C 61 78 
15952  78AE 79 0A 20 2D 
15952  78B2 2D 20 79 6F 
15952  78B6 75 20 68 61 
15952  78BA 76 65 20 6E 
15952  78BE 6F 20 73 74 
15952  78C2 61 72 62 61 
15952  78C6 73 65 73 20 
15952  78CA 6C 65 66 74 
15952  78CE 21 0A 00 
15953  78D1 54 68 65 20 _s136: .db "The Federation is maintaining %d starbase%s in the galaxy\n\n", 0
15953  78D5 46 65 64 65 
15953  78D9 72 61 74 69 
15953  78DD 6F 6E 20 69 
15953  78E1 73 20 6D 61 
15953  78E5 69 6E 74 61 
15953  78E9 69 6E 69 6E 
15953  78ED 67 20 25 64 
15953  78F1 20 73 74 61 
15953  78F5 72 62 61 73 
15953  78F9 65 25 73 20 
15953  78FD 69 6E 20 74 
15953  7901 68 65 20 67 
15953  7905 61 6C 61 78 
15953  7909 79 0A 0A 00 
15954  790D 46 72 6F 6D _s137: .db "From Enterprise to Klingon battlecriuser%s:\n\n", 0
15954  7911 20 45 6E 74 
15954  7915 65 72 70 72 
15954  7919 69 73 65 20 
15954  791D 74 6F 20 4B 
15954  7921 6C 69 6E 67 
15954  7925 6F 6E 20 62 
15954  7929 61 74 74 6C 
15954  792D 65 63 72 69 
15954  7931 75 73 65 72 
15954  7935 25 73 3A 0A 
15954  7939 0A 00 
15955  793B 4D 72 2E 20 _s138: .db "Mr. Spock reports,\n  'Sensors show no starbases in this quadrant.'\n", 0
15955  793F 53 70 6F 63 
15955  7943 6B 20 72 65 
15955  7947 70 6F 72 74 
15955  794B 73 2C 0A 20 
15955  794F 20 27 53 65 
15955  7953 6E 73 6F 72 
15955  7957 73 20 73 68 
15955  795B 6F 77 20 6E 
15955  795F 6F 20 73 74 
15955  7963 61 72 62 61 
15955  7967 73 65 73 20 
15955  796B 69 6E 20 74 
15955  796F 68 69 73 20 
15955  7973 71 75 61 64 
15955  7977 72 61 6E 74 
15955  797B 2E 27 0A 00 
15956  797F 44 69 72 65 _s139: .db "Direction/Distance Calculator\n You are at quadrant %d,%d sector %d,%d\n\n Please enter initial X coordinate: ", 0
15956  7983 63 74 69 6F 
15956  7987 6E 2F 44 69 
15956  798B 73 74 61 6E 
15956  798F 63 65 20 43 
15956  7993 61 6C 63 75 
15956  7997 6C 61 74 6F 
15956  799B 72 0A 20 59 
15956  799F 6F 75 20 61 
15956  79A3 72 65 20 61 
15956  79A7 74 20 71 75 
15956  79AB 61 64 72 61 
15956  79AF 6E 74 20 25 
15956  79B3 64 2C 25 64 
15956  79B7 20 73 65 63 
15956  79BB 74 6F 72 20 
15956  79BF 25 64 2C 25 
15956  79C3 64 0A 0A 20 
15956  79C7 50 6C 65 61 
15956  79CB 73 65 20 65 
15956  79CF 6E 74 65 72 
15956  79D3 20 69 6E 69 
15956  79D7 74 69 61 6C 
15956  79DB 20 58 20 63 
15956  79DF 6F 6F 72 64 
15956  79E3 69 6E 61 74 
15956  79E7 65 3A 20 00 
15957  79EB 50 6C 65 61 _s140: .db "Please enter initial Y coordinate: ", 0
15957  79EF 73 65 20 65 
15957  79F3 6E 74 65 72 
15957  79F7 20 69 6E 69 
15957  79FB 74 69 61 6C 
15957  79FF 20 59 20 63 
15957  7A03 6F 6F 72 64 
15957  7A07 69 6E 61 74 
15957  7A0B 65 3A 20 00 
15958  7A0F 50 6C 65 61 _s141: .db "Please enter final X coordinate: ", 0
15958  7A13 73 65 20 65 
15958  7A17 6E 74 65 72 
15958  7A1B 20 66 69 6E 
15958  7A1F 61 6C 20 58 
15958  7A23 20 63 6F 6F 
15958  7A27 72 64 69 6E 
15958  7A2B 61 74 65 3A 
15958  7A2F 20 00 
15959  7A31 50 6C 65 61 _s142: .db "Please enter final Y coordinate: ", 0
15959  7A35 73 65 20 65 
15959  7A39 6E 74 65 72 
15959  7A3D 20 66 69 6E 
15959  7A41 61 6C 20 59 
15959  7A45 20 63 6F 6F 
15959  7A49 72 64 69 6E 
15959  7A4D 61 74 65 3A 
15959  7A51 20 00 
15960  7A53 0A 20 20 20 _s143: .db "\n                   The Galaxy\n\n", 0
15960  7A57 20 20 20 20 
15960  7A5B 20 20 20 20 
15960  7A5F 20 20 20 20 
15960  7A63 20 20 20 20 
15960  7A67 54 68 65 20 
15960  7A6B 47 61 6C 61 
15960  7A6F 78 79 0A 0A 
15960  7A73 00 
15961  7A74 20 20 20 20 _s144: .db "    1     2     3     4     5     6     7     8\n", 0
15961  7A78 31 20 20 20 
15961  7A7C 20 20 32 20 
15961  7A80 20 20 20 20 
15961  7A84 33 20 20 20 
15961  7A88 20 20 34 20 
15961  7A8C 20 20 20 20 
15961  7A90 35 20 20 20 
15961  7A94 20 20 36 20 
15961  7A98 20 20 20 20 
15961  7A9C 37 20 20 20 
15961  7AA0 20 20 38 0A 
15961  7AA4 00 
15962  7AA5 25 73 25 64 _s145: .db "%s%d ", 0
15962  7AA9 20 00 
15963  7AAB 20 20 44 49 _s146: .db "  DIRECTION = ", 0
15963  7AAF 52 45 43 54 
15963  7AB3 49 4F 4E 20 
15963  7AB7 3D 20 00 
15964  7ABA 25 73 00    _s147: .db "%s", 0
15965  7ABD 54 68 65 20 _s148: .db "The Enterprise has been destroyed. The Federation will be conquered.\n", 0
15965  7AC1 45 6E 74 65 
15965  7AC5 72 70 72 69 
15965  7AC9 73 65 20 68 
15965  7ACD 61 73 20 62 
15965  7AD1 65 65 6E 20 
15965  7AD5 64 65 73 74 
15965  7AD9 72 6F 79 65 
15965  7ADD 64 2E 20 54 
15965  7AE1 68 65 20 46 
15965  7AE5 65 64 65 72 
15965  7AE9 61 74 69 6F 
15965  7AED 6E 20 77 69 
15965  7AF1 6C 6C 20 62 
15965  7AF5 65 20 63 6F 
15965  7AF9 6E 71 75 65 
15965  7AFD 72 65 64 2E 
15965  7B01 0A 00 
15966  7B03 49 74 20 69 _s149: .db "It is stardate %d.\n\n", 0
15966  7B07 73 20 73 74 
15966  7B0B 61 72 64 61 
15966  7B0F 74 65 20 25 
15966  7B13 64 2E 0A 0A 
15966  7B17 00 
15967  7B18 54 68 65 72 _s150: .db "There were %d Klingon Battlecruisers left at the end of your mission.\n\n", 0
15967  7B1C 65 20 77 65 
15967  7B20 72 65 20 25 
15967  7B24 64 20 4B 6C 
15967  7B28 69 6E 67 6F 
15967  7B2C 6E 20 42 61 
15967  7B30 74 74 6C 65 
15967  7B34 63 72 75 69 
15967  7B38 73 65 72 73 
15967  7B3C 20 6C 65 66 
15967  7B40 74 20 61 74 
15967  7B44 20 74 68 65 
15967  7B48 20 65 6E 64 
15967  7B4C 20 6F 66 20 
15967  7B50 79 6F 75 72 
15967  7B54 20 6D 69 73 
15967  7B58 73 69 6F 6E 
15967  7B5C 2E 0A 0A 00 
15968  7B60 43 6F 6E 67 _s151: .db "Congratulations, Captain!  The last Klingon Battle Cruiser\n menacing the Federation has been destoyed.\n", 0
15968  7B64 72 61 74 75 
15968  7B68 6C 61 74 69 
15968  7B6C 6F 6E 73 2C 
15968  7B70 20 43 61 70 
15968  7B74 74 61 69 6E 
15968  7B78 21 20 20 54 
15968  7B7C 68 65 20 6C 
15968  7B80 61 73 74 20 
15968  7B84 4B 6C 69 6E 
15968  7B88 67 6F 6E 20 
15968  7B8C 42 61 74 74 
15968  7B90 6C 65 20 43 
15968  7B94 72 75 69 73 
15968  7B98 65 72 0A 20 
15968  7B9C 6D 65 6E 61 
15968  7BA0 63 69 6E 67 
15968  7BA4 20 74 68 65 
15968  7BA8 20 46 65 64 
15968  7BAC 65 72 61 74 
15968  7BB0 69 6F 6E 20 
15968  7BB4 68 61 73 20 
15968  7BB8 62 65 65 6E 
15968  7BBC 20 64 65 73 
15968  7BC0 74 6F 79 65 
15968  7BC4 64 2E 0A 00 
15969  7BC8 59 6F 75 72 _s152: .db "Your efficiency rating is %s\n", 0
15969  7BCC 20 65 66 66 
15969  7BD0 69 63 69 65 
15969  7BD4 6E 63 79 20 
15969  7BD8 72 61 74 69 
15969  7BDC 6E 67 20 69 
15969  7BE0 73 20 25 73 
15969  7BE4 0A 00 
15970  7BE6 54 68 65 20 _s153: .db "The Federation is in need of a new starship commander", 0
15970  7BEA 46 65 64 65 
15970  7BEE 72 61 74 69 
15970  7BF2 6F 6E 20 69 
15970  7BF6 73 20 69 6E 
15970  7BFA 20 6E 65 65 
15970  7BFE 64 20 6F 66 
15970  7C02 20 61 20 6E 
15970  7C06 65 77 20 73 
15970  7C0A 74 61 72 73 
15970  7C0E 68 69 70 20 
15970  7C12 63 6F 6D 6D 
15970  7C16 61 6E 64 65 
15970  7C1A 72 00 
15971  7C1C 20 66 6F 72 _s154: .db " for a similar mission.\n", 0
15971  7C20 20 61 20 73 
15971  7C24 69 6D 69 6C 
15971  7C28 61 72 20 6D 
15971  7C2C 69 73 73 69 
15971  7C30 6F 6E 2E 0A 
15971  7C34 00 
15972  7C35 49 66 20 74 _s155: .db "If there is a volunteer, let him step forward and", 0
15972  7C39 68 65 72 65 
15972  7C3D 20 69 73 20 
15972  7C41 61 20 76 6F 
15972  7C45 6C 75 6E 74 
15972  7C49 65 65 72 2C 
15972  7C4D 20 6C 65 74 
15972  7C51 20 68 69 6D 
15972  7C55 20 73 74 65 
15972  7C59 70 20 66 6F 
15972  7C5D 72 77 61 72 
15972  7C61 64 20 61 6E 
15972  7C65 64 00 
15973  7C67 20 65 6E 74 _s156: .db " enter 'aye': ", 0
15973  7C6B 65 72 20 27 
15973  7C6F 61 79 65 27 
15973  7C73 3A 20 00 
15974  7C76 53 74 61 72 _s157: .db "Starbase shields protect the Enterprise\n", 0
15974  7C7A 62 61 73 65 
15974  7C7E 20 73 68 69 
15974  7C82 65 6C 64 73 
15974  7C86 20 70 72 6F 
15974  7C8A 74 65 63 74 
15974  7C8E 20 74 68 65 
15974  7C92 20 45 6E 74 
15974  7C96 65 72 70 72 
15974  7C9A 69 73 65 0A 
15974  7C9E 00 
15975  7C9F 25 64 20 75 _s158: .db "%d unit hit on Enterprise from sector %d, %d\n", 0
15975  7CA3 6E 69 74 20 
15975  7CA7 68 69 74 20 
15975  7CAB 6F 6E 20 45 
15975  7CAF 6E 74 65 72 
15975  7CB3 70 72 69 73 
15975  7CB7 65 20 66 72 
15975  7CBB 6F 6D 20 73 
15975  7CBF 65 63 74 6F 
15975  7CC3 72 20 25 64 
15975  7CC7 2C 20 25 64 
15975  7CCB 0A 00 
15976  7CCD 20 20 20 20 _s159: .db "    <Shields down to %d units>\n\n", 0
15976  7CD1 3C 53 68 69 
15976  7CD5 65 6C 64 73 
15976  7CD9 20 64 6F 77 
15976  7CDD 6E 20 74 6F 
15976  7CE1 20 25 64 20 
15976  7CE5 75 6E 69 74 
15976  7CE9 73 3E 0A 0A 
15976  7CED 00 
15977  7CEE 44 61 6D 61 _s160: .db "Damage Control reports\n'%s' damaged by hit\n\n", 0
15977  7CF2 67 65 20 43 
15977  7CF6 6F 6E 74 72 
15977  7CFA 6F 6C 20 72 
15977  7CFE 65 70 6F 72 
15977  7D02 74 73 0A 27 
15977  7D06 25 73 27 20 
15977  7D0A 64 61 6D 61 
15977  7D0E 67 65 64 20 
15977  7D12 62 79 20 68 
15977  7D16 69 74 0A 0A 
15977  7D1A 00 
15978  7D1B 20 20 20 20 _s161: .db "    %s repair completed\n\n", 0
15978  7D1F 25 73 20 72 
15978  7D23 65 70 61 69 
15978  7D27 72 20 63 6F 
15978  7D2B 6D 70 6C 65 
15978  7D2F 74 65 64 0A 
15978  7D33 0A 00 
15979  7D35 20 20 20 20 _s162: .db "    %s damaged\n\n", 0
15979  7D39 25 73 20 64 
15979  7D3D 61 6D 61 67 
15979  7D41 65 64 0A 0A 
15979  7D45 00 
15980  7D46 20 20 20 20 _s163: .db "    %s state of repair improved\n\n", 0
15980  7D4A 25 73 20 73 
15980  7D4E 74 61 74 65 
15980  7D52 20 6F 66 20 
15980  7D56 72 65 70 61 
15980  7D5A 69 72 20 69 
15980  7D5E 6D 70 72 6F 
15980  7D62 76 65 64 0A 
15980  7D66 0A 00 
15981  7D68 20 49 00    _s164: .db " I", 0
15982  7D6B 20 49 49 00 _s165: .db " II", 0
15983  7D6F 20 49 49 49 _s166: .db " III", 0
15983  7D73 00 
15984  7D74 20 49 56 00 _s167: .db " IV", 0
15985  7D78 55 6E 6B 6E _s168: .db "Unknown", 0
15985  7D7C 6F 77 6E 00 
15986  7D80 55 6E 65 78 _s169: .db "Unexpected format in printf.", 0
15986  7D84 70 65 63 74 
15986  7D88 65 64 20 66 
15986  7D8C 6F 72 6D 61 
15986  7D90 74 20 69 6E 
15986  7D94 20 70 72 69 
15986  7D98 6E 74 66 2E 
15986  7D9C 00 
15987  7D9D 45 72 72 6F _s170: .db "Error: Unknown argument type.\n", 0
15987  7DA1 72 3A 20 55 
15987  7DA5 6E 6B 6E 6F 
15987  7DA9 77 6E 20 61 
15987  7DAD 72 67 75 6D 
15987  7DB1 65 6E 74 20 
15987  7DB5 74 79 70 65 
15987  7DB9 2E 0A 00 
15988  7DBC             
15989  7DBC BE 7D       _heap_top: .dw _heap
15990  7DBE 00          _heap: .db 0
15991  7DBF             ; --- END DATA SEGMENT
15992  7DBF             
15993  7DBF             .end
tasm: Number of errors = 0
