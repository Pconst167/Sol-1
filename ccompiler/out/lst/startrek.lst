0001   0000             ; --- FILENAME: games/startrek
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; intro(); 
0011   0408 07 DC 26      call intro
0012   040B             ; new_game(); 
0013   040B 07 3D 27      call new_game
0014   040E             ; return (0); 
0015   040E 26 00 00      mov b, $0
0016   0411 F9            leave
0017   0412 05 0B         syscall sys_terminate_proc
0018   0414             
0019   0414             strcpy:
0020   0414 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0021   0417             ; char *psrc; 
0022   0417 52 02 00      sub sp, 2
0023   041A             ; char *pdest; 
0024   041A 52 02 00      sub sp, 2
0025   041D             ; psrc = src; 
0026   041D FA FF FF      lea d, [bp + -1] ; $psrc
0027   0420 DA            push d
0028   0421 FA 07 00      lea d, [bp + 7] ; $src
0029   0424 2A            mov b, [d]
0030   0425 E7            pop d
0031   0426 FD 43         mov [d], b
0032   0428             ; pdest = dest; 
0033   0428 FA FD FF      lea d, [bp + -3] ; $pdest
0034   042B DA            push d
0035   042C FA 05 00      lea d, [bp + 5] ; $dest
0036   042F 2A            mov b, [d]
0037   0430 E7            pop d
0038   0431 FD 43         mov [d], b
0039   0433             ; while(*psrc) *pdest++ = *psrc++; 
0040   0433             _while1_cond:
0041   0433 FA FF FF      lea d, [bp + -1] ; $psrc
0042   0436 2A            mov b, [d]
0043   0437 74            mov d, b
0044   0438 32            mov bl, [d]
0045   0439 A7 00         mov bh, 0
0046   043B C0 00 00      cmp b, 0
0047   043E C6 66 04      je _while1_exit
0048   0441             _while1_block:
0049   0441             ; *pdest++ = *psrc++; 
0050   0441 FA FD FF      lea d, [bp + -3] ; $pdest
0051   0444 2A            mov b, [d]
0052   0445 FD 77         inc b
0053   0447 FA FD FF      lea d, [bp + -3] ; $pdest
0054   044A FD 43         mov [d], b
0055   044C FD 7D         dec b
0056   044E D8            push b
0057   044F FA FF FF      lea d, [bp + -1] ; $psrc
0058   0452 2A            mov b, [d]
0059   0453 FD 77         inc b
0060   0455 FA FF FF      lea d, [bp + -1] ; $psrc
0061   0458 FD 43         mov [d], b
0062   045A FD 7D         dec b
0063   045C 74            mov d, b
0064   045D 32            mov bl, [d]
0065   045E A7 00         mov bh, 0
0066   0460 E7            pop d
0067   0461 FD 3E         mov [d], bl
0068   0463 0A 33 04      jmp _while1_cond
0069   0466             _while1_exit:
0070   0466             ; *pdest = '\0'; 
0071   0466 FA FD FF      lea d, [bp + -3] ; $pdest
0072   0469 2A            mov b, [d]
0073   046A D8            push b
0074   046B 26 00 00      mov b, $0
0075   046E E7            pop d
0076   046F FD 3E         mov [d], bl
0077   0471 F9            leave
0078   0472 09            ret
0079   0473             
0080   0473             strcmp:
0081   0473 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0082   0476             ; while (*s1 && (*s1 == *s2)) { 
0083   0476             _while2_cond:
0084   0476 FA 05 00      lea d, [bp + 5] ; $s1
0085   0479 2A            mov b, [d]
0086   047A 74            mov d, b
0087   047B 32            mov bl, [d]
0088   047C A7 00         mov bh, 0
0089   047E             ; START LOGICAL AND
0090   047E D7            push a
0091   047F 11            mov a, b
0092   0480 FA 05 00      lea d, [bp + 5] ; $s1
0093   0483 2A            mov b, [d]
0094   0484 74            mov d, b
0095   0485 32            mov bl, [d]
0096   0486 A7 00         mov bh, 0
0097   0488             ; START RELATIONAL
0098   0488 D7            push a
0099   0489 11            mov a, b
0100   048A FA 07 00      lea d, [bp + 7] ; $s2
0101   048D 2A            mov b, [d]
0102   048E 74            mov d, b
0103   048F 32            mov bl, [d]
0104   0490 A7 00         mov bh, 0
0105   0492 B0            cmp a, b
0106   0493 FD 71         seq ; ==
0107   0495 E4            pop a
0108   0496             ; END RELATIONAL
0109   0496 FD A7         sand a, b
0110   0498 E4            pop a
0111   0499             ; END LOGICAL AND
0112   0499 C0 00 00      cmp b, 0
0113   049C C6 BC 04      je _while2_exit
0114   049F             _while2_block:
0115   049F             ; s1++; 
0116   049F FA 05 00      lea d, [bp + 5] ; $s1
0117   04A2 2A            mov b, [d]
0118   04A3 FD 77         inc b
0119   04A5 FA 05 00      lea d, [bp + 5] ; $s1
0120   04A8 FD 43         mov [d], b
0121   04AA FD 7D         dec b
0122   04AC             ; s2++; 
0123   04AC FA 07 00      lea d, [bp + 7] ; $s2
0124   04AF 2A            mov b, [d]
0125   04B0 FD 77         inc b
0126   04B2 FA 07 00      lea d, [bp + 7] ; $s2
0127   04B5 FD 43         mov [d], b
0128   04B7 FD 7D         dec b
0129   04B9 0A 76 04      jmp _while2_cond
0130   04BC             _while2_exit:
0131   04BC             ; return *s1 - *s2; 
0132   04BC FA 05 00      lea d, [bp + 5] ; $s1
0133   04BF 2A            mov b, [d]
0134   04C0 74            mov d, b
0135   04C1 32            mov bl, [d]
0136   04C2 A7 00         mov bh, 0
0137   04C4             ; START TERMS
0138   04C4 D7            push a
0139   04C5 11            mov a, b
0140   04C6 FA 07 00      lea d, [bp + 7] ; $s2
0141   04C9 2A            mov b, [d]
0142   04CA 74            mov d, b
0143   04CB 32            mov bl, [d]
0144   04CC A7 00         mov bh, 0
0145   04CE 60            sub a, b
0146   04CF 27            mov b, a
0147   04D0 E4            pop a
0148   04D1             ; END TERMS
0149   04D1 F9            leave
0150   04D2 09            ret
0151   04D3             
0152   04D3             strncmp:
0153   04D3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0154   04D6 F9            leave
0155   04D7 09            ret
0156   04D8             
0157   04D8             strcat:
0158   04D8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0159   04DB             ; int dest_len; 
0160   04DB 52 02 00      sub sp, 2
0161   04DE             ; int i; 
0162   04DE 52 02 00      sub sp, 2
0163   04E1             ; dest_len = strlen(dest); 
0164   04E1 FA FF FF      lea d, [bp + -1] ; $dest_len
0165   04E4 DA            push d
0166   04E5 FA 05 00      lea d, [bp + 5] ; $dest
0167   04E8 2A            mov b, [d]
0168   04E9 FD AB         swp b
0169   04EB D8            push b
0170   04EC 07 8E 05      call strlen
0171   04EF 51 02 00      add sp, 2
0172   04F2 E7            pop d
0173   04F3 FD 43         mov [d], b
0174   04F5             ; for (i = 0; src[i] != 0; i=i+1) { 
0175   04F5             _for3_init:
0176   04F5 FA FD FF      lea d, [bp + -3] ; $i
0177   04F8 DA            push d
0178   04F9 26 00 00      mov b, $0
0179   04FC E7            pop d
0180   04FD FD 43         mov [d], b
0181   04FF             _for3_cond:
0182   04FF FA 07 00      lea d, [bp + 7] ; $src
0183   0502 FD 2A         mov d, [d]
0184   0504 D7            push a
0185   0505 DA            push d
0186   0506 FA FD FF      lea d, [bp + -3] ; $i
0187   0509 2A            mov b, [d]
0188   050A E7            pop d
0189   050B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0190   050F E4            pop a
0191   0510 32            mov bl, [d]
0192   0511 A7 00         mov bh, 0
0193   0513             ; START RELATIONAL
0194   0513 D7            push a
0195   0514 11            mov a, b
0196   0515 26 00 00      mov b, $0
0197   0518 B0            cmp a, b
0198   0519 FD 72         sneq ; !=
0199   051B E4            pop a
0200   051C             ; END RELATIONAL
0201   051C C0 00 00      cmp b, 0
0202   051F C6 68 05      je _for3_exit
0203   0522             _for3_block:
0204   0522             ; dest[dest_len + i] = src[i]; 
0205   0522 FA 05 00      lea d, [bp + 5] ; $dest
0206   0525 FD 2A         mov d, [d]
0207   0527 D7            push a
0208   0528 DA            push d
0209   0529 FA FF FF      lea d, [bp + -1] ; $dest_len
0210   052C 2A            mov b, [d]
0211   052D             ; START TERMS
0212   052D D7            push a
0213   052E 11            mov a, b
0214   052F FA FD FF      lea d, [bp + -3] ; $i
0215   0532 2A            mov b, [d]
0216   0533 56            add b, a
0217   0534 E4            pop a
0218   0535             ; END TERMS
0219   0535 E7            pop d
0220   0536 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0221   053A E4            pop a
0222   053B DA            push d
0223   053C FA 07 00      lea d, [bp + 7] ; $src
0224   053F FD 2A         mov d, [d]
0225   0541 D7            push a
0226   0542 DA            push d
0227   0543 FA FD FF      lea d, [bp + -3] ; $i
0228   0546 2A            mov b, [d]
0229   0547 E7            pop d
0230   0548 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0231   054C E4            pop a
0232   054D 32            mov bl, [d]
0233   054E A7 00         mov bh, 0
0234   0550 E7            pop d
0235   0551 FD 3E         mov [d], bl
0236   0553             _for3_update:
0237   0553 FA FD FF      lea d, [bp + -3] ; $i
0238   0556 DA            push d
0239   0557 FA FD FF      lea d, [bp + -3] ; $i
0240   055A 2A            mov b, [d]
0241   055B             ; START TERMS
0242   055B D7            push a
0243   055C 11            mov a, b
0244   055D 26 01 00      mov b, $1
0245   0560 56            add b, a
0246   0561 E4            pop a
0247   0562             ; END TERMS
0248   0562 E7            pop d
0249   0563 FD 43         mov [d], b
0250   0565 0A FF 04      jmp _for3_cond
0251   0568             _for3_exit:
0252   0568             ; dest[dest_len + i] = 0; 
0253   0568 FA 05 00      lea d, [bp + 5] ; $dest
0254   056B FD 2A         mov d, [d]
0255   056D D7            push a
0256   056E DA            push d
0257   056F FA FF FF      lea d, [bp + -1] ; $dest_len
0258   0572 2A            mov b, [d]
0259   0573             ; START TERMS
0260   0573 D7            push a
0261   0574 11            mov a, b
0262   0575 FA FD FF      lea d, [bp + -3] ; $i
0263   0578 2A            mov b, [d]
0264   0579 56            add b, a
0265   057A E4            pop a
0266   057B             ; END TERMS
0267   057B E7            pop d
0268   057C FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0269   0580 E4            pop a
0270   0581 DA            push d
0271   0582 26 00 00      mov b, $0
0272   0585 E7            pop d
0273   0586 FD 3E         mov [d], bl
0274   0588             ; return dest; 
0275   0588 FA 05 00      lea d, [bp + 5] ; $dest
0276   058B 2A            mov b, [d]
0277   058C F9            leave
0278   058D 09            ret
0279   058E             
0280   058E             strlen:
0281   058E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0282   0591             ; int length; 
0283   0591 52 02 00      sub sp, 2
0284   0594             ; length = 0; 
0285   0594 FA FF FF      lea d, [bp + -1] ; $length
0286   0597 DA            push d
0287   0598 26 00 00      mov b, $0
0288   059B E7            pop d
0289   059C FD 43         mov [d], b
0290   059E             ; while (str[length] != 0) { 
0291   059E             _while4_cond:
0292   059E FA 05 00      lea d, [bp + 5] ; $str
0293   05A1 FD 2A         mov d, [d]
0294   05A3 D7            push a
0295   05A4 DA            push d
0296   05A5 FA FF FF      lea d, [bp + -1] ; $length
0297   05A8 2A            mov b, [d]
0298   05A9 E7            pop d
0299   05AA FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0300   05AE E4            pop a
0301   05AF 32            mov bl, [d]
0302   05B0 A7 00         mov bh, 0
0303   05B2             ; START RELATIONAL
0304   05B2 D7            push a
0305   05B3 11            mov a, b
0306   05B4 26 00 00      mov b, $0
0307   05B7 B0            cmp a, b
0308   05B8 FD 72         sneq ; !=
0309   05BA E4            pop a
0310   05BB             ; END RELATIONAL
0311   05BB C0 00 00      cmp b, 0
0312   05BE C6 D1 05      je _while4_exit
0313   05C1             _while4_block:
0314   05C1             ; length++; 
0315   05C1 FA FF FF      lea d, [bp + -1] ; $length
0316   05C4 2A            mov b, [d]
0317   05C5 FD 77         inc b
0318   05C7 FA FF FF      lea d, [bp + -1] ; $length
0319   05CA FD 43         mov [d], b
0320   05CC FD 7D         dec b
0321   05CE 0A 9E 05      jmp _while4_cond
0322   05D1             _while4_exit:
0323   05D1             ; return length; 
0324   05D1 FA FF FF      lea d, [bp + -1] ; $length
0325   05D4 2A            mov b, [d]
0326   05D5 F9            leave
0327   05D6 09            ret
0328   05D7             
0329   05D7             exit:
0330   05D7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0331   05DA             
0332   05DA             ; --- BEGIN INLINE ASM BLOCK
0333   05DA 05 0B         syscall sys_terminate_proc
0334   05DC             ; --- END INLINE ASM BLOCK
0335   05DC             
0336   05DC F9            leave
0337   05DD 09            ret
0338   05DE             
0339   05DE             memset:
0340   05DE F8 00 00      enter 0 ; (push bp; mov bp, sp)
0341   05E1             ; int i; 
0342   05E1 52 02 00      sub sp, 2
0343   05E4             ; for(i = 0; i < size; i++){ 
0344   05E4             _for5_init:
0345   05E4 FA FF FF      lea d, [bp + -1] ; $i
0346   05E7 DA            push d
0347   05E8 26 00 00      mov b, $0
0348   05EB E7            pop d
0349   05EC FD 43         mov [d], b
0350   05EE             _for5_cond:
0351   05EE FA FF FF      lea d, [bp + -1] ; $i
0352   05F1 2A            mov b, [d]
0353   05F2             ; START RELATIONAL
0354   05F2 D7            push a
0355   05F3 11            mov a, b
0356   05F4 FA 08 00      lea d, [bp + 8] ; $size
0357   05F7 2A            mov b, [d]
0358   05F8 B0            cmp a, b
0359   05F9 FD 73         slt ; < (signed)
0360   05FB E4            pop a
0361   05FC             ; END RELATIONAL
0362   05FC C0 00 00      cmp b, 0
0363   05FF C6 28 06      je _for5_exit
0364   0602             _for5_block:
0365   0602             ; *(s+i) = c; 
0366   0602 FA 05 00      lea d, [bp + 5] ; $s
0367   0605 2A            mov b, [d]
0368   0606             ; START TERMS
0369   0606 D7            push a
0370   0607 11            mov a, b
0371   0608 FA FF FF      lea d, [bp + -1] ; $i
0372   060B 2A            mov b, [d]
0373   060C 56            add b, a
0374   060D E4            pop a
0375   060E             ; END TERMS
0376   060E D8            push b
0377   060F FA 07 00      lea d, [bp + 7] ; $c
0378   0612 32            mov bl, [d]
0379   0613 A7 00         mov bh, 0
0380   0615 E7            pop d
0381   0616 FD 3E         mov [d], bl
0382   0618             _for5_update:
0383   0618 FA FF FF      lea d, [bp + -1] ; $i
0384   061B 2A            mov b, [d]
0385   061C FD 77         inc b
0386   061E FA FF FF      lea d, [bp + -1] ; $i
0387   0621 FD 43         mov [d], b
0388   0623 FD 7D         dec b
0389   0625 0A EE 05      jmp _for5_cond
0390   0628             _for5_exit:
0391   0628             ; return s; 
0392   0628 FA 05 00      lea d, [bp + 5] ; $s
0393   062B 2A            mov b, [d]
0394   062C F9            leave
0395   062D 09            ret
0396   062E             
0397   062E             atoi:
0398   062E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0399   0631             ; int result = 0;  // Initialize result 
0400   0631 52 02 00      sub sp, 2
0401   0634             ; --- START LOCAL VAR INITIALIZATION
0402   0634 FA FF FF      lea d, [bp + -1] ; $result
0403   0637 DA            push d
0404   0638 26 00 00      mov b, $0
0405   063B E7            pop d
0406   063C FD 43         mov [d], b
0407   063E             ; --- END LOCAL VAR INITIALIZATION
0408   063E             ; int sign = 1;    // Initialize sign as positive 
0409   063E 52 02 00      sub sp, 2
0410   0641             ; --- START LOCAL VAR INITIALIZATION
0411   0641 FA FD FF      lea d, [bp + -3] ; $sign
0412   0644 DA            push d
0413   0645 26 01 00      mov b, $1
0414   0648 E7            pop d
0415   0649 FD 43         mov [d], b
0416   064B             ; --- END LOCAL VAR INITIALIZATION
0417   064B             ; while (*str == ' ') str++; 
0418   064B             _while6_cond:
0419   064B FA 05 00      lea d, [bp + 5] ; $str
0420   064E 2A            mov b, [d]
0421   064F 74            mov d, b
0422   0650 32            mov bl, [d]
0423   0651 A7 00         mov bh, 0
0424   0653             ; START RELATIONAL
0425   0653 D7            push a
0426   0654 11            mov a, b
0427   0655 26 20 00      mov b, $20
0428   0658 B0            cmp a, b
0429   0659 FD 71         seq ; ==
0430   065B E4            pop a
0431   065C             ; END RELATIONAL
0432   065C C0 00 00      cmp b, 0
0433   065F C6 72 06      je _while6_exit
0434   0662             _while6_block:
0435   0662             ; str++; 
0436   0662 FA 05 00      lea d, [bp + 5] ; $str
0437   0665 2A            mov b, [d]
0438   0666 FD 77         inc b
0439   0668 FA 05 00      lea d, [bp + 5] ; $str
0440   066B FD 43         mov [d], b
0441   066D FD 7D         dec b
0442   066F 0A 4B 06      jmp _while6_cond
0443   0672             _while6_exit:
0444   0672             ; if (*str == '-' || *str == '+') { 
0445   0672             _if7_cond:
0446   0672 FA 05 00      lea d, [bp + 5] ; $str
0447   0675 2A            mov b, [d]
0448   0676 74            mov d, b
0449   0677 32            mov bl, [d]
0450   0678 A7 00         mov bh, 0
0451   067A             ; START RELATIONAL
0452   067A D7            push a
0453   067B 11            mov a, b
0454   067C 26 2D 00      mov b, $2d
0455   067F B0            cmp a, b
0456   0680 FD 71         seq ; ==
0457   0682 E4            pop a
0458   0683             ; END RELATIONAL
0459   0683             ; START LOGICAL OR
0460   0683 D7            push a
0461   0684 11            mov a, b
0462   0685 FA 05 00      lea d, [bp + 5] ; $str
0463   0688 2A            mov b, [d]
0464   0689 74            mov d, b
0465   068A 32            mov bl, [d]
0466   068B A7 00         mov bh, 0
0467   068D             ; START RELATIONAL
0468   068D D7            push a
0469   068E 11            mov a, b
0470   068F 26 2B 00      mov b, $2b
0471   0692 B0            cmp a, b
0472   0693 FD 71         seq ; ==
0473   0695 E4            pop a
0474   0696             ; END RELATIONAL
0475   0696 FD A8         sor a, b ; ||
0476   0698 E4            pop a
0477   0699             ; END LOGICAL OR
0478   0699 C0 00 00      cmp b, 0
0479   069C C6 D5 06      je _if7_exit
0480   069F             _if7_true:
0481   069F             ; if (*str == '-') sign = -1; 
0482   069F             _if8_cond:
0483   069F FA 05 00      lea d, [bp + 5] ; $str
0484   06A2 2A            mov b, [d]
0485   06A3 74            mov d, b
0486   06A4 32            mov bl, [d]
0487   06A5 A7 00         mov bh, 0
0488   06A7             ; START RELATIONAL
0489   06A7 D7            push a
0490   06A8 11            mov a, b
0491   06A9 26 2D 00      mov b, $2d
0492   06AC B0            cmp a, b
0493   06AD FD 71         seq ; ==
0494   06AF E4            pop a
0495   06B0             ; END RELATIONAL
0496   06B0 C0 00 00      cmp b, 0
0497   06B3 C6 C5 06      je _if8_exit
0498   06B6             _if8_true:
0499   06B6             ; sign = -1; 
0500   06B6 FA FD FF      lea d, [bp + -3] ; $sign
0501   06B9 DA            push d
0502   06BA 26 01 00      mov b, $1
0503   06BD FD 97         neg b
0504   06BF E7            pop d
0505   06C0 FD 43         mov [d], b
0506   06C2 0A C5 06      jmp _if8_exit
0507   06C5             _if8_exit:
0508   06C5             ; str++; 
0509   06C5 FA 05 00      lea d, [bp + 5] ; $str
0510   06C8 2A            mov b, [d]
0511   06C9 FD 77         inc b
0512   06CB FA 05 00      lea d, [bp + 5] ; $str
0513   06CE FD 43         mov [d], b
0514   06D0 FD 7D         dec b
0515   06D2 0A D5 06      jmp _if7_exit
0516   06D5             _if7_exit:
0517   06D5             ; while (*str >= '0' && *str <= '9') { 
0518   06D5             _while9_cond:
0519   06D5 FA 05 00      lea d, [bp + 5] ; $str
0520   06D8 2A            mov b, [d]
0521   06D9 74            mov d, b
0522   06DA 32            mov bl, [d]
0523   06DB A7 00         mov bh, 0
0524   06DD             ; START RELATIONAL
0525   06DD D7            push a
0526   06DE 11            mov a, b
0527   06DF 26 30 00      mov b, $30
0528   06E2 B0            cmp a, b
0529   06E3 FD 82         sgeu ; >= (unsigned)
0530   06E5 E4            pop a
0531   06E6             ; END RELATIONAL
0532   06E6             ; START LOGICAL AND
0533   06E6 D7            push a
0534   06E7 11            mov a, b
0535   06E8 FA 05 00      lea d, [bp + 5] ; $str
0536   06EB 2A            mov b, [d]
0537   06EC 74            mov d, b
0538   06ED 32            mov bl, [d]
0539   06EE A7 00         mov bh, 0
0540   06F0             ; START RELATIONAL
0541   06F0 D7            push a
0542   06F1 11            mov a, b
0543   06F2 26 39 00      mov b, $39
0544   06F5 B0            cmp a, b
0545   06F6 FD 76         sleu ; <= (unsigned)
0546   06F8 E4            pop a
0547   06F9             ; END RELATIONAL
0548   06F9 FD A7         sand a, b
0549   06FB E4            pop a
0550   06FC             ; END LOGICAL AND
0551   06FC C0 00 00      cmp b, 0
0552   06FF C6 3A 07      je _while9_exit
0553   0702             _while9_block:
0554   0702             ; result = result * 10 + (*str - '0'); 
0555   0702 FA FF FF      lea d, [bp + -1] ; $result
0556   0705 DA            push d
0557   0706 FA FF FF      lea d, [bp + -1] ; $result
0558   0709 2A            mov b, [d]
0559   070A             ; START FACTORS
0560   070A D7            push a
0561   070B 11            mov a, b
0562   070C 26 0A 00      mov b, $a
0563   070F AC            mul a, b ; *
0564   0710 11            mov a, b
0565   0711 27            mov b, a
0566   0712 E4            pop a
0567   0713             ; END FACTORS
0568   0713             ; START TERMS
0569   0713 D7            push a
0570   0714 11            mov a, b
0571   0715 FA 05 00      lea d, [bp + 5] ; $str
0572   0718 2A            mov b, [d]
0573   0719 74            mov d, b
0574   071A 32            mov bl, [d]
0575   071B A7 00         mov bh, 0
0576   071D             ; START TERMS
0577   071D D7            push a
0578   071E 11            mov a, b
0579   071F 26 30 00      mov b, $30
0580   0722 60            sub a, b
0581   0723 27            mov b, a
0582   0724 E4            pop a
0583   0725             ; END TERMS
0584   0725 56            add b, a
0585   0726 E4            pop a
0586   0727             ; END TERMS
0587   0727 E7            pop d
0588   0728 FD 43         mov [d], b
0589   072A             ; str++; 
0590   072A FA 05 00      lea d, [bp + 5] ; $str
0591   072D 2A            mov b, [d]
0592   072E FD 77         inc b
0593   0730 FA 05 00      lea d, [bp + 5] ; $str
0594   0733 FD 43         mov [d], b
0595   0735 FD 7D         dec b
0596   0737 0A D5 06      jmp _while9_cond
0597   073A             _while9_exit:
0598   073A             ; return sign * result; 
0599   073A FA FD FF      lea d, [bp + -3] ; $sign
0600   073D 2A            mov b, [d]
0601   073E             ; START FACTORS
0602   073E D7            push a
0603   073F 11            mov a, b
0604   0740 FA FF FF      lea d, [bp + -1] ; $result
0605   0743 2A            mov b, [d]
0606   0744 AC            mul a, b ; *
0607   0745 11            mov a, b
0608   0746 27            mov b, a
0609   0747 E4            pop a
0610   0748             ; END FACTORS
0611   0748 F9            leave
0612   0749 09            ret
0613   074A             
0614   074A             rand:
0615   074A F8 00 00      enter 0 ; (push bp; mov bp, sp)
0616   074D             ; int  sec; 
0617   074D 52 02 00      sub sp, 2
0618   0750             
0619   0750             ; --- BEGIN INLINE ASM BLOCK
0620   0750 19 00         mov al, 0
0621   0752 05 01         syscall sys_rtc					
0622   0754 1A            mov al, ah
0623   0755 FA FF FF      lea d, [bp + -1] ; $sec
0624   0758 1E            mov al, [d]
0625   0759 22 00         mov ah, 0
0626   075B             ; --- END INLINE ASM BLOCK
0627   075B             
0628   075B             ; return sec; 
0629   075B FA FF FF      lea d, [bp + -1] ; $sec
0630   075E 2A            mov b, [d]
0631   075F F9            leave
0632   0760 09            ret
0633   0761             
0634   0761             alloc:
0635   0761 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0636   0764             ; heap_top = heap_top + bytes; 
0637   0764 3B D1 7E      mov d, _heap_top ; $heap_top
0638   0767 DA            push d
0639   0768 3B D1 7E      mov d, _heap_top ; $heap_top
0640   076B 2A            mov b, [d]
0641   076C             ; START TERMS
0642   076C D7            push a
0643   076D 11            mov a, b
0644   076E FA 05 00      lea d, [bp + 5] ; $bytes
0645   0771 2A            mov b, [d]
0646   0772 56            add b, a
0647   0773 E4            pop a
0648   0774             ; END TERMS
0649   0774 E7            pop d
0650   0775 FD 43         mov [d], b
0651   0777             ; return heap_top - bytes; 
0652   0777 3B D1 7E      mov d, _heap_top ; $heap_top
0653   077A 2A            mov b, [d]
0654   077B             ; START TERMS
0655   077B D7            push a
0656   077C 11            mov a, b
0657   077D FA 05 00      lea d, [bp + 5] ; $bytes
0658   0780 2A            mov b, [d]
0659   0781 60            sub a, b
0660   0782 27            mov b, a
0661   0783 E4            pop a
0662   0784             ; END TERMS
0663   0784 F9            leave
0664   0785 09            ret
0665   0786             
0666   0786             free:
0667   0786 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0668   0789             ; return heap_top = heap_top - bytes; 
0669   0789 3B D1 7E      mov d, _heap_top ; $heap_top
0670   078C DA            push d
0671   078D 3B D1 7E      mov d, _heap_top ; $heap_top
0672   0790 2A            mov b, [d]
0673   0791             ; START TERMS
0674   0791 D7            push a
0675   0792 11            mov a, b
0676   0793 FA 05 00      lea d, [bp + 5] ; $bytes
0677   0796 2A            mov b, [d]
0678   0797 60            sub a, b
0679   0798 27            mov b, a
0680   0799 E4            pop a
0681   079A             ; END TERMS
0682   079A E7            pop d
0683   079B FD 43         mov [d], b
0684   079D F9            leave
0685   079E 09            ret
0686   079F             
0687   079F             fopen:
0688   079F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0689   07A2             ; FILE *fp; 
0690   07A2 52 02 00      sub sp, 2
0691   07A5             ; fp = alloc(sizeof(int)); 
0692   07A5 FA FF FF      lea d, [bp + -1] ; $fp
0693   07A8 DA            push d
0694   07A9 26 02 00      mov b, 2
0695   07AC FD AB         swp b
0696   07AE D8            push b
0697   07AF 07 61 07      call alloc
0698   07B2 51 02 00      add sp, 2
0699   07B5 E7            pop d
0700   07B6 FD 43         mov [d], b
0701   07B8 F9            leave
0702   07B9 09            ret
0703   07BA             
0704   07BA             printf:
0705   07BA F8 00 00      enter 0 ; (push bp; mov bp, sp)
0706   07BD             ; char *p, *format_p; 
0707   07BD 52 02 00      sub sp, 2
0708   07C0 52 02 00      sub sp, 2
0709   07C3             ; format_p = format; 
0710   07C3 FA FD FF      lea d, [bp + -3] ; $format_p
0711   07C6 DA            push d
0712   07C7 FA 05 00      lea d, [bp + 5] ; $format
0713   07CA 2A            mov b, [d]
0714   07CB E7            pop d
0715   07CC FD 43         mov [d], b
0716   07CE             ; p = &format + 2; 
0717   07CE FA FF FF      lea d, [bp + -1] ; $p
0718   07D1 DA            push d
0719   07D2 FA 05 00      lea d, [bp + 5] ; $format
0720   07D5 2D            mov b, d
0721   07D6             ; START TERMS
0722   07D6 D7            push a
0723   07D7 11            mov a, b
0724   07D8 26 02 00      mov b, $2
0725   07DB 56            add b, a
0726   07DC E4            pop a
0727   07DD             ; END TERMS
0728   07DD E7            pop d
0729   07DE FD 43         mov [d], b
0730   07E0             ; for(;;){ 
0731   07E0             _for10_init:
0732   07E0             _for10_cond:
0733   07E0             _for10_block:
0734   07E0             ; if(!*format_p) break; 
0735   07E0             _if11_cond:
0736   07E0 FA FD FF      lea d, [bp + -3] ; $format_p
0737   07E3 2A            mov b, [d]
0738   07E4 74            mov d, b
0739   07E5 32            mov bl, [d]
0740   07E6 A7 00         mov bh, 0
0741   07E8 C0 00 00      cmp b, 0
0742   07EB FD 71         seq ; !
0743   07ED C0 00 00      cmp b, 0
0744   07F0 C6 F9 07      je _if11_else
0745   07F3             _if11_true:
0746   07F3             ; break; 
0747   07F3 0A 20 0A      jmp _for10_exit ; for break
0748   07F6 0A 1D 0A      jmp _if11_exit
0749   07F9             _if11_else:
0750   07F9             ; if(*format_p == '%'){ 
0751   07F9             _if12_cond:
0752   07F9 FA FD FF      lea d, [bp + -3] ; $format_p
0753   07FC 2A            mov b, [d]
0754   07FD 74            mov d, b
0755   07FE 32            mov bl, [d]
0756   07FF A7 00         mov bh, 0
0757   0801             ; START RELATIONAL
0758   0801 D7            push a
0759   0802 11            mov a, b
0760   0803 26 25 00      mov b, $25
0761   0806 B0            cmp a, b
0762   0807 FD 71         seq ; ==
0763   0809 E4            pop a
0764   080A             ; END RELATIONAL
0765   080A C0 00 00      cmp b, 0
0766   080D C6 01 0A      je _if12_else
0767   0810             _if12_true:
0768   0810             ; format_p++; 
0769   0810 FA FD FF      lea d, [bp + -3] ; $format_p
0770   0813 2A            mov b, [d]
0771   0814 FD 77         inc b
0772   0816 FA FD FF      lea d, [bp + -3] ; $format_p
0773   0819 FD 43         mov [d], b
0774   081B FD 7D         dec b
0775   081D             ; switch(*format_p){ 
0776   081D             _switch13_expr:
0777   081D FA FD FF      lea d, [bp + -3] ; $format_p
0778   0820 2A            mov b, [d]
0779   0821 74            mov d, b
0780   0822 32            mov bl, [d]
0781   0823 A7 00         mov bh, 0
0782   0825             _switch13_comparisons:
0783   0825 C1 6C         cmp bl, $6c
0784   0827 C6 53 08      je _switch13_case0
0785   082A C1 4C         cmp bl, $4c
0786   082C C6 53 08      je _switch13_case1
0787   082F C1 64         cmp bl, $64
0788   0831 C6 41 09      je _switch13_case2
0789   0834 C1 69         cmp bl, $69
0790   0836 C6 41 09      je _switch13_case3
0791   0839 C1 75         cmp bl, $75
0792   083B C6 65 09      je _switch13_case4
0793   083E C1 78         cmp bl, $78
0794   0840 C6 89 09      je _switch13_case5
0795   0843 C1 63         cmp bl, $63
0796   0845 C6 A7 09      je _switch13_case6
0797   0848 C1 73         cmp bl, $73
0798   084A C6 C6 09      je _switch13_case7
0799   084D 0A E5 09      jmp _switch13_default
0800   0850 0A F1 09      jmp _switch13_exit
0801   0853             _switch13_case0:
0802   0853             _switch13_case1:
0803   0853             ; format_p++; 
0804   0853 FA FD FF      lea d, [bp + -3] ; $format_p
0805   0856 2A            mov b, [d]
0806   0857 FD 77         inc b
0807   0859 FA FD FF      lea d, [bp + -3] ; $format_p
0808   085C FD 43         mov [d], b
0809   085E FD 7D         dec b
0810   0860             ; if(*format_p == 'd' || *format_p == 'i') 
0811   0860             _if14_cond:
0812   0860 FA FD FF      lea d, [bp + -3] ; $format_p
0813   0863 2A            mov b, [d]
0814   0864 74            mov d, b
0815   0865 32            mov bl, [d]
0816   0866 A7 00         mov bh, 0
0817   0868             ; START RELATIONAL
0818   0868 D7            push a
0819   0869 11            mov a, b
0820   086A 26 64 00      mov b, $64
0821   086D B0            cmp a, b
0822   086E FD 71         seq ; ==
0823   0870 E4            pop a
0824   0871             ; END RELATIONAL
0825   0871             ; START LOGICAL OR
0826   0871 D7            push a
0827   0872 11            mov a, b
0828   0873 FA FD FF      lea d, [bp + -3] ; $format_p
0829   0876 2A            mov b, [d]
0830   0877 74            mov d, b
0831   0878 32            mov bl, [d]
0832   0879 A7 00         mov bh, 0
0833   087B             ; START RELATIONAL
0834   087B D7            push a
0835   087C 11            mov a, b
0836   087D 26 69 00      mov b, $69
0837   0880 B0            cmp a, b
0838   0881 FD 71         seq ; ==
0839   0883 E4            pop a
0840   0884             ; END RELATIONAL
0841   0884 FD A8         sor a, b ; ||
0842   0886 E4            pop a
0843   0887             ; END LOGICAL OR
0844   0887 C0 00 00      cmp b, 0
0845   088A C6 AF 08      je _if14_else
0846   088D             _if14_true:
0847   088D             ; print_signed_long(*(long *)p); 
0848   088D FA FF FF      lea d, [bp + -1] ; $p
0849   0890 2A            mov b, [d]
0850   0891 AB            snex b
0851   0892 FD 39         mov c, b
0852   0894 74            mov d, b
0853   0895 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0854   0898 FD 39         mov c, b ; And place it into C
0855   089A 2A            mov b, [d] ; Lower Word in B
0856   089B FD 79         mov g, b
0857   089D 28            mov b, c
0858   089E FD AB         swp b
0859   08A0 D8            push b
0860   08A1 FD 27         mov b, g
0861   08A3 FD AB         swp b
0862   08A5 D8            push b
0863   08A6 07 11 12      call print_signed_long
0864   08A9 51 04 00      add sp, 4
0865   08AC 0A 2C 09      jmp _if14_exit
0866   08AF             _if14_else:
0867   08AF             ; if(*format_p == 'u') 
0868   08AF             _if15_cond:
0869   08AF FA FD FF      lea d, [bp + -3] ; $format_p
0870   08B2 2A            mov b, [d]
0871   08B3 74            mov d, b
0872   08B4 32            mov bl, [d]
0873   08B5 A7 00         mov bh, 0
0874   08B7             ; START RELATIONAL
0875   08B7 D7            push a
0876   08B8 11            mov a, b
0877   08B9 26 75 00      mov b, $75
0878   08BC B0            cmp a, b
0879   08BD FD 71         seq ; ==
0880   08BF E4            pop a
0881   08C0             ; END RELATIONAL
0882   08C0 C0 00 00      cmp b, 0
0883   08C3 C6 EA 08      je _if15_else
0884   08C6             _if15_true:
0885   08C6             ; print_unsigned_long(*(unsigned long *)p); 
0886   08C6 FA FF FF      lea d, [bp + -1] ; $p
0887   08C9 2A            mov b, [d]
0888   08CA A7 00         mov bh, 0
0889   08CC 38 00 00      mov c, 0
0890   08CF 74            mov d, b
0891   08D0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0892   08D3 FD 39         mov c, b ; And place it into C
0893   08D5 2A            mov b, [d] ; Lower Word in B
0894   08D6 FD 79         mov g, b
0895   08D8 28            mov b, c
0896   08D9 FD AB         swp b
0897   08DB D8            push b
0898   08DC FD 27         mov b, g
0899   08DE FD AB         swp b
0900   08E0 D8            push b
0901   08E1 07 51 15      call print_unsigned_long
0902   08E4 51 04 00      add sp, 4
0903   08E7 0A 2C 09      jmp _if15_exit
0904   08EA             _if15_else:
0905   08EA             ; if(*format_p == 'x') 
0906   08EA             _if16_cond:
0907   08EA FA FD FF      lea d, [bp + -3] ; $format_p
0908   08ED 2A            mov b, [d]
0909   08EE 74            mov d, b
0910   08EF 32            mov bl, [d]
0911   08F0 A7 00         mov bh, 0
0912   08F2             ; START RELATIONAL
0913   08F2 D7            push a
0914   08F3 11            mov a, b
0915   08F4 26 78 00      mov b, $78
0916   08F7 B0            cmp a, b
0917   08F8 FD 71         seq ; ==
0918   08FA E4            pop a
0919   08FB             ; END RELATIONAL
0920   08FB C0 00 00      cmp b, 0
0921   08FE C6 20 09      je _if16_else
0922   0901             _if16_true:
0923   0901             ; printx32(*(long int *)p); 
0924   0901 FA FF FF      lea d, [bp + -1] ; $p
0925   0904 2A            mov b, [d]
0926   0905 74            mov d, b
0927   0906 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0928   0909 FD 39         mov c, b ; And place it into C
0929   090B 2A            mov b, [d] ; Lower Word in B
0930   090C FD 79         mov g, b
0931   090E 28            mov b, c
0932   090F FD AB         swp b
0933   0911 D8            push b
0934   0912 FD 27         mov b, g
0935   0914 FD AB         swp b
0936   0916 D8            push b
0937   0917 07 86 0F      call printx32
0938   091A 51 04 00      add sp, 4
0939   091D 0A 2C 09      jmp _if16_exit
0940   0920             _if16_else:
0941   0920             ; err("Unexpected format in printf."); 
0942   0920 26 AD 6B      mov b, _s30 ; "Unexpected format in printf."
0943   0923 FD AB         swp b
0944   0925 D8            push b
0945   0926 07 74 0F      call err
0946   0929 51 02 00      add sp, 2
0947   092C             _if16_exit:
0948   092C             _if15_exit:
0949   092C             _if14_exit:
0950   092C             ; p = p + 4; 
0951   092C FA FF FF      lea d, [bp + -1] ; $p
0952   092F DA            push d
0953   0930 FA FF FF      lea d, [bp + -1] ; $p
0954   0933 2A            mov b, [d]
0955   0934             ; START TERMS
0956   0934 D7            push a
0957   0935 11            mov a, b
0958   0936 26 04 00      mov b, $4
0959   0939 56            add b, a
0960   093A E4            pop a
0961   093B             ; END TERMS
0962   093B E7            pop d
0963   093C FD 43         mov [d], b
0964   093E             ; break; 
0965   093E 0A F1 09      jmp _switch13_exit ; case break
0966   0941             _switch13_case2:
0967   0941             _switch13_case3:
0968   0941             ; print_signed(*(int*)p); 
0969   0941 FA FF FF      lea d, [bp + -1] ; $p
0970   0944 2A            mov b, [d]
0971   0945 74            mov d, b
0972   0946 2A            mov b, [d]
0973   0947 FD AB         swp b
0974   0949 D8            push b
0975   094A 07 1A 11      call print_signed
0976   094D 51 02 00      add sp, 2
0977   0950             ; p = p + 2; 
0978   0950 FA FF FF      lea d, [bp + -1] ; $p
0979   0953 DA            push d
0980   0954 FA FF FF      lea d, [bp + -1] ; $p
0981   0957 2A            mov b, [d]
0982   0958             ; START TERMS
0983   0958 D7            push a
0984   0959 11            mov a, b
0985   095A 26 02 00      mov b, $2
0986   095D 56            add b, a
0987   095E E4            pop a
0988   095F             ; END TERMS
0989   095F E7            pop d
0990   0960 FD 43         mov [d], b
0991   0962             ; break; 
0992   0962 0A F1 09      jmp _switch13_exit ; case break
0993   0965             _switch13_case4:
0994   0965             ; print_unsigned(*(unsigned int*)p); 
0995   0965 FA FF FF      lea d, [bp + -1] ; $p
0996   0968 2A            mov b, [d]
0997   0969 74            mov d, b
0998   096A 2A            mov b, [d]
0999   096B FD AB         swp b
1000   096D D8            push b
1001   096E 07 56 18      call print_unsigned
1002   0971 51 02 00      add sp, 2
1003   0974             ; p = p + 2; 
1004   0974 FA FF FF      lea d, [bp + -1] ; $p
1005   0977 DA            push d
1006   0978 FA FF FF      lea d, [bp + -1] ; $p
1007   097B 2A            mov b, [d]
1008   097C             ; START TERMS
1009   097C D7            push a
1010   097D 11            mov a, b
1011   097E 26 02 00      mov b, $2
1012   0981 56            add b, a
1013   0982 E4            pop a
1014   0983             ; END TERMS
1015   0983 E7            pop d
1016   0984 FD 43         mov [d], b
1017   0986             ; break; 
1018   0986 0A F1 09      jmp _switch13_exit ; case break
1019   0989             _switch13_case5:
1020   0989             
1021   0989             ; --- BEGIN INLINE ASM BLOCK
1022   0989 FA FF FF      lea d, [bp + -1] ; $p
1023   098C FD 2A         mov d, [d]
1024   098E 2A            mov b, [d]
1025   098F 07 B5 1D      call print_u16x
1026   0992             ; --- END INLINE ASM BLOCK
1027   0992             
1028   0992             ; p = p + 2; 
1029   0992 FA FF FF      lea d, [bp + -1] ; $p
1030   0995 DA            push d
1031   0996 FA FF FF      lea d, [bp + -1] ; $p
1032   0999 2A            mov b, [d]
1033   099A             ; START TERMS
1034   099A D7            push a
1035   099B 11            mov a, b
1036   099C 26 02 00      mov b, $2
1037   099F 56            add b, a
1038   09A0 E4            pop a
1039   09A1             ; END TERMS
1040   09A1 E7            pop d
1041   09A2 FD 43         mov [d], b
1042   09A4             ; break; 
1043   09A4 0A F1 09      jmp _switch13_exit ; case break
1044   09A7             _switch13_case6:
1045   09A7             
1046   09A7             ; --- BEGIN INLINE ASM BLOCK
1047   09A7 FA FF FF      lea d, [bp + -1] ; $p
1048   09AA FD 2A         mov d, [d]
1049   09AC 1E            mov al, [d]
1050   09AD 23            mov ah, al
1051   09AE 07 13 1C      call _putchar
1052   09B1             ; --- END INLINE ASM BLOCK
1053   09B1             
1054   09B1             ; p = p + 1; 
1055   09B1 FA FF FF      lea d, [bp + -1] ; $p
1056   09B4 DA            push d
1057   09B5 FA FF FF      lea d, [bp + -1] ; $p
1058   09B8 2A            mov b, [d]
1059   09B9             ; START TERMS
1060   09B9 D7            push a
1061   09BA 11            mov a, b
1062   09BB 26 01 00      mov b, $1
1063   09BE 56            add b, a
1064   09BF E4            pop a
1065   09C0             ; END TERMS
1066   09C0 E7            pop d
1067   09C1 FD 43         mov [d], b
1068   09C3             ; break; 
1069   09C3 0A F1 09      jmp _switch13_exit ; case break
1070   09C6             _switch13_case7:
1071   09C6             
1072   09C6             ; --- BEGIN INLINE ASM BLOCK
1073   09C6 FA FF FF      lea d, [bp + -1] ; $p
1074   09C9 FD 2A         mov d, [d]
1075   09CB FD 2A         mov d, [d]
1076   09CD 07 5D 1D      call _puts
1077   09D0             ; --- END INLINE ASM BLOCK
1078   09D0             
1079   09D0             ; p = p + 2; 
1080   09D0 FA FF FF      lea d, [bp + -1] ; $p
1081   09D3 DA            push d
1082   09D4 FA FF FF      lea d, [bp + -1] ; $p
1083   09D7 2A            mov b, [d]
1084   09D8             ; START TERMS
1085   09D8 D7            push a
1086   09D9 11            mov a, b
1087   09DA 26 02 00      mov b, $2
1088   09DD 56            add b, a
1089   09DE E4            pop a
1090   09DF             ; END TERMS
1091   09DF E7            pop d
1092   09E0 FD 43         mov [d], b
1093   09E2             ; break; 
1094   09E2 0A F1 09      jmp _switch13_exit ; case break
1095   09E5             _switch13_default:
1096   09E5             ; print("Error: Unknown argument type.\n"); 
1097   09E5 26 CA 6B      mov b, _s31 ; "Error: Unknown argument type.\n"
1098   09E8 FD AB         swp b
1099   09EA D8            push b
1100   09EB 07 CA 1A      call print
1101   09EE 51 02 00      add sp, 2
1102   09F1             _switch13_exit:
1103   09F1             ; format_p++; 
1104   09F1 FA FD FF      lea d, [bp + -3] ; $format_p
1105   09F4 2A            mov b, [d]
1106   09F5 FD 77         inc b
1107   09F7 FA FD FF      lea d, [bp + -3] ; $format_p
1108   09FA FD 43         mov [d], b
1109   09FC FD 7D         dec b
1110   09FE 0A 1D 0A      jmp _if12_exit
1111   0A01             _if12_else:
1112   0A01             ; putchar(*format_p); 
1113   0A01 FA FD FF      lea d, [bp + -3] ; $format_p
1114   0A04 2A            mov b, [d]
1115   0A05 74            mov d, b
1116   0A06 32            mov bl, [d]
1117   0A07 A7 00         mov bh, 0
1118   0A09 DD            push bl
1119   0A0A 07 82 1A      call putchar
1120   0A0D 51 01 00      add sp, 1
1121   0A10             ; format_p++; 
1122   0A10 FA FD FF      lea d, [bp + -3] ; $format_p
1123   0A13 2A            mov b, [d]
1124   0A14 FD 77         inc b
1125   0A16 FA FD FF      lea d, [bp + -3] ; $format_p
1126   0A19 FD 43         mov [d], b
1127   0A1B FD 7D         dec b
1128   0A1D             _if12_exit:
1129   0A1D             _if11_exit:
1130   0A1D             _for10_update:
1131   0A1D 0A E0 07      jmp _for10_cond
1132   0A20             _for10_exit:
1133   0A20 F9            leave
1134   0A21 09            ret
1135   0A22             
1136   0A22             scanf:
1137   0A22 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1138   0A25             ; char *p, *format_p; 
1139   0A25 52 02 00      sub sp, 2
1140   0A28 52 02 00      sub sp, 2
1141   0A2B             ; char c; 
1142   0A2B 52 01 00      sub sp, 1
1143   0A2E             ; int i; 
1144   0A2E 52 02 00      sub sp, 2
1145   0A31             ; char input_string[  512                    ]; 
1146   0A31 52 00 02      sub sp, 512
1147   0A34             ; format_p = format; 
1148   0A34 FA FD FF      lea d, [bp + -3] ; $format_p
1149   0A37 DA            push d
1150   0A38 FA 05 00      lea d, [bp + 5] ; $format
1151   0A3B 2A            mov b, [d]
1152   0A3C E7            pop d
1153   0A3D FD 43         mov [d], b
1154   0A3F             ; p = &format + 2; 
1155   0A3F FA FF FF      lea d, [bp + -1] ; $p
1156   0A42 DA            push d
1157   0A43 FA 05 00      lea d, [bp + 5] ; $format
1158   0A46 2D            mov b, d
1159   0A47             ; START TERMS
1160   0A47 D7            push a
1161   0A48 11            mov a, b
1162   0A49 26 02 00      mov b, $2
1163   0A4C 56            add b, a
1164   0A4D E4            pop a
1165   0A4E             ; END TERMS
1166   0A4E E7            pop d
1167   0A4F FD 43         mov [d], b
1168   0A51             ; for(;;){ 
1169   0A51             _for17_init:
1170   0A51             _for17_cond:
1171   0A51             _for17_block:
1172   0A51             ; if(!*format_p) break; 
1173   0A51             _if18_cond:
1174   0A51 FA FD FF      lea d, [bp + -3] ; $format_p
1175   0A54 2A            mov b, [d]
1176   0A55 74            mov d, b
1177   0A56 32            mov bl, [d]
1178   0A57 A7 00         mov bh, 0
1179   0A59 C0 00 00      cmp b, 0
1180   0A5C FD 71         seq ; !
1181   0A5E C0 00 00      cmp b, 0
1182   0A61 C6 6A 0A      je _if18_else
1183   0A64             _if18_true:
1184   0A64             ; break; 
1185   0A64 0A 6B 0C      jmp _for17_exit ; for break
1186   0A67 0A 68 0C      jmp _if18_exit
1187   0A6A             _if18_else:
1188   0A6A             ; if(*format_p == '%'){ 
1189   0A6A             _if19_cond:
1190   0A6A FA FD FF      lea d, [bp + -3] ; $format_p
1191   0A6D 2A            mov b, [d]
1192   0A6E 74            mov d, b
1193   0A6F 32            mov bl, [d]
1194   0A70 A7 00         mov bh, 0
1195   0A72             ; START RELATIONAL
1196   0A72 D7            push a
1197   0A73 11            mov a, b
1198   0A74 26 25 00      mov b, $25
1199   0A77 B0            cmp a, b
1200   0A78 FD 71         seq ; ==
1201   0A7A E4            pop a
1202   0A7B             ; END RELATIONAL
1203   0A7B C0 00 00      cmp b, 0
1204   0A7E C6 4C 0C      je _if19_else
1205   0A81             _if19_true:
1206   0A81             ; format_p++; 
1207   0A81 FA FD FF      lea d, [bp + -3] ; $format_p
1208   0A84 2A            mov b, [d]
1209   0A85 FD 77         inc b
1210   0A87 FA FD FF      lea d, [bp + -3] ; $format_p
1211   0A8A FD 43         mov [d], b
1212   0A8C FD 7D         dec b
1213   0A8E             ; switch(*format_p){ 
1214   0A8E             _switch20_expr:
1215   0A8E FA FD FF      lea d, [bp + -3] ; $format_p
1216   0A91 2A            mov b, [d]
1217   0A92 74            mov d, b
1218   0A93 32            mov bl, [d]
1219   0A94 A7 00         mov bh, 0
1220   0A96             _switch20_comparisons:
1221   0A96 C1 6C         cmp bl, $6c
1222   0A98 C6 C4 0A      je _switch20_case0
1223   0A9B C1 4C         cmp bl, $4c
1224   0A9D C6 C4 0A      je _switch20_case1
1225   0AA0 C1 64         cmp bl, $64
1226   0AA2 C6 56 0B      je _switch20_case2
1227   0AA5 C1 69         cmp bl, $69
1228   0AA7 C6 56 0B      je _switch20_case3
1229   0AAA C1 75         cmp bl, $75
1230   0AAC C6 83 0B      je _switch20_case4
1231   0AAF C1 78         cmp bl, $78
1232   0AB1 C6 B0 0B      je _switch20_case5
1233   0AB4 C1 63         cmp bl, $63
1234   0AB6 C6 C5 0B      je _switch20_case6
1235   0AB9 C1 73         cmp bl, $73
1236   0ABB C6 F8 0B      je _switch20_case7
1237   0ABE 0A 30 0C      jmp _switch20_default
1238   0AC1 0A 3C 0C      jmp _switch20_exit
1239   0AC4             _switch20_case0:
1240   0AC4             _switch20_case1:
1241   0AC4             ; format_p++; 
1242   0AC4 FA FD FF      lea d, [bp + -3] ; $format_p
1243   0AC7 2A            mov b, [d]
1244   0AC8 FD 77         inc b
1245   0ACA FA FD FF      lea d, [bp + -3] ; $format_p
1246   0ACD FD 43         mov [d], b
1247   0ACF FD 7D         dec b
1248   0AD1             ; if(*format_p == 'd' || *format_p == 'i'); 
1249   0AD1             _if21_cond:
1250   0AD1 FA FD FF      lea d, [bp + -3] ; $format_p
1251   0AD4 2A            mov b, [d]
1252   0AD5 74            mov d, b
1253   0AD6 32            mov bl, [d]
1254   0AD7 A7 00         mov bh, 0
1255   0AD9             ; START RELATIONAL
1256   0AD9 D7            push a
1257   0ADA 11            mov a, b
1258   0ADB 26 64 00      mov b, $64
1259   0ADE B0            cmp a, b
1260   0ADF FD 71         seq ; ==
1261   0AE1 E4            pop a
1262   0AE2             ; END RELATIONAL
1263   0AE2             ; START LOGICAL OR
1264   0AE2 D7            push a
1265   0AE3 11            mov a, b
1266   0AE4 FA FD FF      lea d, [bp + -3] ; $format_p
1267   0AE7 2A            mov b, [d]
1268   0AE8 74            mov d, b
1269   0AE9 32            mov bl, [d]
1270   0AEA A7 00         mov bh, 0
1271   0AEC             ; START RELATIONAL
1272   0AEC D7            push a
1273   0AED 11            mov a, b
1274   0AEE 26 69 00      mov b, $69
1275   0AF1 B0            cmp a, b
1276   0AF2 FD 71         seq ; ==
1277   0AF4 E4            pop a
1278   0AF5             ; END RELATIONAL
1279   0AF5 FD A8         sor a, b ; ||
1280   0AF7 E4            pop a
1281   0AF8             ; END LOGICAL OR
1282   0AF8 C0 00 00      cmp b, 0
1283   0AFB C6 01 0B      je _if21_else
1284   0AFE             _if21_true:
1285   0AFE             ; ; 
1286   0AFE 0A 41 0B      jmp _if21_exit
1287   0B01             _if21_else:
1288   0B01             ; if(*format_p == 'u'); 
1289   0B01             _if22_cond:
1290   0B01 FA FD FF      lea d, [bp + -3] ; $format_p
1291   0B04 2A            mov b, [d]
1292   0B05 74            mov d, b
1293   0B06 32            mov bl, [d]
1294   0B07 A7 00         mov bh, 0
1295   0B09             ; START RELATIONAL
1296   0B09 D7            push a
1297   0B0A 11            mov a, b
1298   0B0B 26 75 00      mov b, $75
1299   0B0E B0            cmp a, b
1300   0B0F FD 71         seq ; ==
1301   0B11 E4            pop a
1302   0B12             ; END RELATIONAL
1303   0B12 C0 00 00      cmp b, 0
1304   0B15 C6 1B 0B      je _if22_else
1305   0B18             _if22_true:
1306   0B18             ; ; 
1307   0B18 0A 41 0B      jmp _if22_exit
1308   0B1B             _if22_else:
1309   0B1B             ; if(*format_p == 'x'); 
1310   0B1B             _if23_cond:
1311   0B1B FA FD FF      lea d, [bp + -3] ; $format_p
1312   0B1E 2A            mov b, [d]
1313   0B1F 74            mov d, b
1314   0B20 32            mov bl, [d]
1315   0B21 A7 00         mov bh, 0
1316   0B23             ; START RELATIONAL
1317   0B23 D7            push a
1318   0B24 11            mov a, b
1319   0B25 26 78 00      mov b, $78
1320   0B28 B0            cmp a, b
1321   0B29 FD 71         seq ; ==
1322   0B2B E4            pop a
1323   0B2C             ; END RELATIONAL
1324   0B2C C0 00 00      cmp b, 0
1325   0B2F C6 35 0B      je _if23_else
1326   0B32             _if23_true:
1327   0B32             ; ; 
1328   0B32 0A 41 0B      jmp _if23_exit
1329   0B35             _if23_else:
1330   0B35             ; err("Unexpected format in printf."); 
1331   0B35 26 AD 6B      mov b, _s30 ; "Unexpected format in printf."
1332   0B38 FD AB         swp b
1333   0B3A D8            push b
1334   0B3B 07 74 0F      call err
1335   0B3E 51 02 00      add sp, 2
1336   0B41             _if23_exit:
1337   0B41             _if22_exit:
1338   0B41             _if21_exit:
1339   0B41             ; p = p + 4; 
1340   0B41 FA FF FF      lea d, [bp + -1] ; $p
1341   0B44 DA            push d
1342   0B45 FA FF FF      lea d, [bp + -1] ; $p
1343   0B48 2A            mov b, [d]
1344   0B49             ; START TERMS
1345   0B49 D7            push a
1346   0B4A 11            mov a, b
1347   0B4B 26 04 00      mov b, $4
1348   0B4E 56            add b, a
1349   0B4F E4            pop a
1350   0B50             ; END TERMS
1351   0B50 E7            pop d
1352   0B51 FD 43         mov [d], b
1353   0B53             ; break; 
1354   0B53 0A 3C 0C      jmp _switch20_exit ; case break
1355   0B56             _switch20_case2:
1356   0B56             _switch20_case3:
1357   0B56             ; i = scann(); 
1358   0B56 FA FA FF      lea d, [bp + -6] ; $i
1359   0B59 DA            push d
1360   0B5A 07 A5 1A      call scann
1361   0B5D E7            pop d
1362   0B5E FD 43         mov [d], b
1363   0B60             ; **(int **)p = i; 
1364   0B60 FA FF FF      lea d, [bp + -1] ; $p
1365   0B63 2A            mov b, [d]
1366   0B64 74            mov d, b
1367   0B65 2A            mov b, [d]
1368   0B66 D8            push b
1369   0B67 FA FA FF      lea d, [bp + -6] ; $i
1370   0B6A 2A            mov b, [d]
1371   0B6B E7            pop d
1372   0B6C FD 43         mov [d], b
1373   0B6E             ; p = p + 2; 
1374   0B6E FA FF FF      lea d, [bp + -1] ; $p
1375   0B71 DA            push d
1376   0B72 FA FF FF      lea d, [bp + -1] ; $p
1377   0B75 2A            mov b, [d]
1378   0B76             ; START TERMS
1379   0B76 D7            push a
1380   0B77 11            mov a, b
1381   0B78 26 02 00      mov b, $2
1382   0B7B 56            add b, a
1383   0B7C E4            pop a
1384   0B7D             ; END TERMS
1385   0B7D E7            pop d
1386   0B7E FD 43         mov [d], b
1387   0B80             ; break; 
1388   0B80 0A 3C 0C      jmp _switch20_exit ; case break
1389   0B83             _switch20_case4:
1390   0B83             ; i = scann(); 
1391   0B83 FA FA FF      lea d, [bp + -6] ; $i
1392   0B86 DA            push d
1393   0B87 07 A5 1A      call scann
1394   0B8A E7            pop d
1395   0B8B FD 43         mov [d], b
1396   0B8D             ; **(int **)p = i; 
1397   0B8D FA FF FF      lea d, [bp + -1] ; $p
1398   0B90 2A            mov b, [d]
1399   0B91 74            mov d, b
1400   0B92 2A            mov b, [d]
1401   0B93 D8            push b
1402   0B94 FA FA FF      lea d, [bp + -6] ; $i
1403   0B97 2A            mov b, [d]
1404   0B98 E7            pop d
1405   0B99 FD 43         mov [d], b
1406   0B9B             ; p = p + 2; 
1407   0B9B FA FF FF      lea d, [bp + -1] ; $p
1408   0B9E DA            push d
1409   0B9F FA FF FF      lea d, [bp + -1] ; $p
1410   0BA2 2A            mov b, [d]
1411   0BA3             ; START TERMS
1412   0BA3 D7            push a
1413   0BA4 11            mov a, b
1414   0BA5 26 02 00      mov b, $2
1415   0BA8 56            add b, a
1416   0BA9 E4            pop a
1417   0BAA             ; END TERMS
1418   0BAA E7            pop d
1419   0BAB FD 43         mov [d], b
1420   0BAD             ; break; 
1421   0BAD 0A 3C 0C      jmp _switch20_exit ; case break
1422   0BB0             _switch20_case5:
1423   0BB0             ; p = p + 2; 
1424   0BB0 FA FF FF      lea d, [bp + -1] ; $p
1425   0BB3 DA            push d
1426   0BB4 FA FF FF      lea d, [bp + -1] ; $p
1427   0BB7 2A            mov b, [d]
1428   0BB8             ; START TERMS
1429   0BB8 D7            push a
1430   0BB9 11            mov a, b
1431   0BBA 26 02 00      mov b, $2
1432   0BBD 56            add b, a
1433   0BBE E4            pop a
1434   0BBF             ; END TERMS
1435   0BBF E7            pop d
1436   0BC0 FD 43         mov [d], b
1437   0BC2             ; break; 
1438   0BC2 0A 3C 0C      jmp _switch20_exit ; case break
1439   0BC5             _switch20_case6:
1440   0BC5             ; c = getchar(); 
1441   0BC5 FA FC FF      lea d, [bp + -4] ; $c
1442   0BC8 DA            push d
1443   0BC9 07 8F 1A      call getchar
1444   0BCC E7            pop d
1445   0BCD FD 3E         mov [d], bl
1446   0BCF             ; **(char **)p = *(char *)c; 
1447   0BCF FA FF FF      lea d, [bp + -1] ; $p
1448   0BD2 2A            mov b, [d]
1449   0BD3 74            mov d, b
1450   0BD4 2A            mov b, [d]
1451   0BD5 D8            push b
1452   0BD6 FA FC FF      lea d, [bp + -4] ; $c
1453   0BD9 32            mov bl, [d]
1454   0BDA A7 00         mov bh, 0
1455   0BDC 74            mov d, b
1456   0BDD 32            mov bl, [d]
1457   0BDE A7 00         mov bh, 0
1458   0BE0 E7            pop d
1459   0BE1 FD 43         mov [d], b
1460   0BE3             ; p = p + 1; 
1461   0BE3 FA FF FF      lea d, [bp + -1] ; $p
1462   0BE6 DA            push d
1463   0BE7 FA FF FF      lea d, [bp + -1] ; $p
1464   0BEA 2A            mov b, [d]
1465   0BEB             ; START TERMS
1466   0BEB D7            push a
1467   0BEC 11            mov a, b
1468   0BED 26 01 00      mov b, $1
1469   0BF0 56            add b, a
1470   0BF1 E4            pop a
1471   0BF2             ; END TERMS
1472   0BF2 E7            pop d
1473   0BF3 FD 43         mov [d], b
1474   0BF5             ; break; 
1475   0BF5 0A 3C 0C      jmp _switch20_exit ; case break
1476   0BF8             _switch20_case7:
1477   0BF8             ; gets(input_string); 
1478   0BF8 FA FA FD      lea d, [bp + -518] ; $input_string
1479   0BFB 2D            mov b, d
1480   0BFC FD AB         swp b
1481   0BFE D8            push b
1482   0BFF 07 00 11      call gets
1483   0C02 51 02 00      add sp, 2
1484   0C05             ; strcpy(*(char **)p, input_string); 
1485   0C05 FA FA FD      lea d, [bp + -518] ; $input_string
1486   0C08 2D            mov b, d
1487   0C09 FD AB         swp b
1488   0C0B D8            push b
1489   0C0C FA FF FF      lea d, [bp + -1] ; $p
1490   0C0F 2A            mov b, [d]
1491   0C10 74            mov d, b
1492   0C11 2A            mov b, [d]
1493   0C12 FD AB         swp b
1494   0C14 D8            push b
1495   0C15 07 14 04      call strcpy
1496   0C18 51 04 00      add sp, 4
1497   0C1B             ; p = p + 2; 
1498   0C1B FA FF FF      lea d, [bp + -1] ; $p
1499   0C1E DA            push d
1500   0C1F FA FF FF      lea d, [bp + -1] ; $p
1501   0C22 2A            mov b, [d]
1502   0C23             ; START TERMS
1503   0C23 D7            push a
1504   0C24 11            mov a, b
1505   0C25 26 02 00      mov b, $2
1506   0C28 56            add b, a
1507   0C29 E4            pop a
1508   0C2A             ; END TERMS
1509   0C2A E7            pop d
1510   0C2B FD 43         mov [d], b
1511   0C2D             ; break; 
1512   0C2D 0A 3C 0C      jmp _switch20_exit ; case break
1513   0C30             _switch20_default:
1514   0C30             ; print("Error: Unknown argument type.\n"); 
1515   0C30 26 CA 6B      mov b, _s31 ; "Error: Unknown argument type.\n"
1516   0C33 FD AB         swp b
1517   0C35 D8            push b
1518   0C36 07 CA 1A      call print
1519   0C39 51 02 00      add sp, 2
1520   0C3C             _switch20_exit:
1521   0C3C             ; format_p++; 
1522   0C3C FA FD FF      lea d, [bp + -3] ; $format_p
1523   0C3F 2A            mov b, [d]
1524   0C40 FD 77         inc b
1525   0C42 FA FD FF      lea d, [bp + -3] ; $format_p
1526   0C45 FD 43         mov [d], b
1527   0C47 FD 7D         dec b
1528   0C49 0A 68 0C      jmp _if19_exit
1529   0C4C             _if19_else:
1530   0C4C             ; putchar(*format_p); 
1531   0C4C FA FD FF      lea d, [bp + -3] ; $format_p
1532   0C4F 2A            mov b, [d]
1533   0C50 74            mov d, b
1534   0C51 32            mov bl, [d]
1535   0C52 A7 00         mov bh, 0
1536   0C54 DD            push bl
1537   0C55 07 82 1A      call putchar
1538   0C58 51 01 00      add sp, 1
1539   0C5B             ; format_p++; 
1540   0C5B FA FD FF      lea d, [bp + -3] ; $format_p
1541   0C5E 2A            mov b, [d]
1542   0C5F FD 77         inc b
1543   0C61 FA FD FF      lea d, [bp + -3] ; $format_p
1544   0C64 FD 43         mov [d], b
1545   0C66 FD 7D         dec b
1546   0C68             _if19_exit:
1547   0C68             _if18_exit:
1548   0C68             _for17_update:
1549   0C68 0A 51 0A      jmp _for17_cond
1550   0C6B             _for17_exit:
1551   0C6B F9            leave
1552   0C6C 09            ret
1553   0C6D             
1554   0C6D             sprintf:
1555   0C6D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1556   0C70             ; char *p, *format_p; 
1557   0C70 52 02 00      sub sp, 2
1558   0C73 52 02 00      sub sp, 2
1559   0C76             ; char *sp; 
1560   0C76 52 02 00      sub sp, 2
1561   0C79             ; sp = dest; 
1562   0C79 FA FB FF      lea d, [bp + -5] ; $sp
1563   0C7C DA            push d
1564   0C7D FA 05 00      lea d, [bp + 5] ; $dest
1565   0C80 2A            mov b, [d]
1566   0C81 E7            pop d
1567   0C82 FD 43         mov [d], b
1568   0C84             ; format_p = format; 
1569   0C84 FA FD FF      lea d, [bp + -3] ; $format_p
1570   0C87 DA            push d
1571   0C88 FA 07 00      lea d, [bp + 7] ; $format
1572   0C8B 2A            mov b, [d]
1573   0C8C E7            pop d
1574   0C8D FD 43         mov [d], b
1575   0C8F             ; p = &format + 2; 
1576   0C8F FA FF FF      lea d, [bp + -1] ; $p
1577   0C92 DA            push d
1578   0C93 FA 07 00      lea d, [bp + 7] ; $format
1579   0C96 2D            mov b, d
1580   0C97             ; START TERMS
1581   0C97 D7            push a
1582   0C98 11            mov a, b
1583   0C99 26 02 00      mov b, $2
1584   0C9C 56            add b, a
1585   0C9D E4            pop a
1586   0C9E             ; END TERMS
1587   0C9E E7            pop d
1588   0C9F FD 43         mov [d], b
1589   0CA1             ; for(;;){ 
1590   0CA1             _for24_init:
1591   0CA1             _for24_cond:
1592   0CA1             _for24_block:
1593   0CA1             ; if(!*format_p) break; 
1594   0CA1             _if25_cond:
1595   0CA1 FA FD FF      lea d, [bp + -3] ; $format_p
1596   0CA4 2A            mov b, [d]
1597   0CA5 74            mov d, b
1598   0CA6 32            mov bl, [d]
1599   0CA7 A7 00         mov bh, 0
1600   0CA9 C0 00 00      cmp b, 0
1601   0CAC FD 71         seq ; !
1602   0CAE C0 00 00      cmp b, 0
1603   0CB1 C6 BA 0C      je _if25_else
1604   0CB4             _if25_true:
1605   0CB4             ; break; 
1606   0CB4 0A 5A 0F      jmp _for24_exit ; for break
1607   0CB7 0A 57 0F      jmp _if25_exit
1608   0CBA             _if25_else:
1609   0CBA             ; if(*format_p == '%'){ 
1610   0CBA             _if26_cond:
1611   0CBA FA FD FF      lea d, [bp + -3] ; $format_p
1612   0CBD 2A            mov b, [d]
1613   0CBE 74            mov d, b
1614   0CBF 32            mov bl, [d]
1615   0CC0 A7 00         mov bh, 0
1616   0CC2             ; START RELATIONAL
1617   0CC2 D7            push a
1618   0CC3 11            mov a, b
1619   0CC4 26 25 00      mov b, $25
1620   0CC7 B0            cmp a, b
1621   0CC8 FD 71         seq ; ==
1622   0CCA E4            pop a
1623   0CCB             ; END RELATIONAL
1624   0CCB C0 00 00      cmp b, 0
1625   0CCE C6 35 0F      je _if26_else
1626   0CD1             _if26_true:
1627   0CD1             ; format_p++; 
1628   0CD1 FA FD FF      lea d, [bp + -3] ; $format_p
1629   0CD4 2A            mov b, [d]
1630   0CD5 FD 77         inc b
1631   0CD7 FA FD FF      lea d, [bp + -3] ; $format_p
1632   0CDA FD 43         mov [d], b
1633   0CDC FD 7D         dec b
1634   0CDE             ; switch(*format_p){ 
1635   0CDE             _switch27_expr:
1636   0CDE FA FD FF      lea d, [bp + -3] ; $format_p
1637   0CE1 2A            mov b, [d]
1638   0CE2 74            mov d, b
1639   0CE3 32            mov bl, [d]
1640   0CE4 A7 00         mov bh, 0
1641   0CE6             _switch27_comparisons:
1642   0CE6 C1 6C         cmp bl, $6c
1643   0CE8 C6 14 0D      je _switch27_case0
1644   0CEB C1 4C         cmp bl, $4c
1645   0CED C6 14 0D      je _switch27_case1
1646   0CF0 C1 64         cmp bl, $64
1647   0CF2 C6 02 0E      je _switch27_case2
1648   0CF5 C1 69         cmp bl, $69
1649   0CF7 C6 02 0E      je _switch27_case3
1650   0CFA C1 75         cmp bl, $75
1651   0CFC C6 3C 0E      je _switch27_case4
1652   0CFF C1 78         cmp bl, $78
1653   0D01 C6 76 0E      je _switch27_case5
1654   0D04 C1 63         cmp bl, $63
1655   0D06 C6 94 0E      je _switch27_case6
1656   0D09 C1 73         cmp bl, $73
1657   0D0B C6 C2 0E      je _switch27_case7
1658   0D0E 0A 19 0F      jmp _switch27_default
1659   0D11 0A 25 0F      jmp _switch27_exit
1660   0D14             _switch27_case0:
1661   0D14             _switch27_case1:
1662   0D14             ; format_p++; 
1663   0D14 FA FD FF      lea d, [bp + -3] ; $format_p
1664   0D17 2A            mov b, [d]
1665   0D18 FD 77         inc b
1666   0D1A FA FD FF      lea d, [bp + -3] ; $format_p
1667   0D1D FD 43         mov [d], b
1668   0D1F FD 7D         dec b
1669   0D21             ; if(*format_p == 'd' || *format_p == 'i') 
1670   0D21             _if28_cond:
1671   0D21 FA FD FF      lea d, [bp + -3] ; $format_p
1672   0D24 2A            mov b, [d]
1673   0D25 74            mov d, b
1674   0D26 32            mov bl, [d]
1675   0D27 A7 00         mov bh, 0
1676   0D29             ; START RELATIONAL
1677   0D29 D7            push a
1678   0D2A 11            mov a, b
1679   0D2B 26 64 00      mov b, $64
1680   0D2E B0            cmp a, b
1681   0D2F FD 71         seq ; ==
1682   0D31 E4            pop a
1683   0D32             ; END RELATIONAL
1684   0D32             ; START LOGICAL OR
1685   0D32 D7            push a
1686   0D33 11            mov a, b
1687   0D34 FA FD FF      lea d, [bp + -3] ; $format_p
1688   0D37 2A            mov b, [d]
1689   0D38 74            mov d, b
1690   0D39 32            mov bl, [d]
1691   0D3A A7 00         mov bh, 0
1692   0D3C             ; START RELATIONAL
1693   0D3C D7            push a
1694   0D3D 11            mov a, b
1695   0D3E 26 69 00      mov b, $69
1696   0D41 B0            cmp a, b
1697   0D42 FD 71         seq ; ==
1698   0D44 E4            pop a
1699   0D45             ; END RELATIONAL
1700   0D45 FD A8         sor a, b ; ||
1701   0D47 E4            pop a
1702   0D48             ; END LOGICAL OR
1703   0D48 C0 00 00      cmp b, 0
1704   0D4B C6 70 0D      je _if28_else
1705   0D4E             _if28_true:
1706   0D4E             ; print_signed_long(*(long *)p); 
1707   0D4E FA FF FF      lea d, [bp + -1] ; $p
1708   0D51 2A            mov b, [d]
1709   0D52 AB            snex b
1710   0D53 FD 39         mov c, b
1711   0D55 74            mov d, b
1712   0D56 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1713   0D59 FD 39         mov c, b ; And place it into C
1714   0D5B 2A            mov b, [d] ; Lower Word in B
1715   0D5C FD 79         mov g, b
1716   0D5E 28            mov b, c
1717   0D5F FD AB         swp b
1718   0D61 D8            push b
1719   0D62 FD 27         mov b, g
1720   0D64 FD AB         swp b
1721   0D66 D8            push b
1722   0D67 07 11 12      call print_signed_long
1723   0D6A 51 04 00      add sp, 4
1724   0D6D 0A ED 0D      jmp _if28_exit
1725   0D70             _if28_else:
1726   0D70             ; if(*format_p == 'u') 
1727   0D70             _if29_cond:
1728   0D70 FA FD FF      lea d, [bp + -3] ; $format_p
1729   0D73 2A            mov b, [d]
1730   0D74 74            mov d, b
1731   0D75 32            mov bl, [d]
1732   0D76 A7 00         mov bh, 0
1733   0D78             ; START RELATIONAL
1734   0D78 D7            push a
1735   0D79 11            mov a, b
1736   0D7A 26 75 00      mov b, $75
1737   0D7D B0            cmp a, b
1738   0D7E FD 71         seq ; ==
1739   0D80 E4            pop a
1740   0D81             ; END RELATIONAL
1741   0D81 C0 00 00      cmp b, 0
1742   0D84 C6 AB 0D      je _if29_else
1743   0D87             _if29_true:
1744   0D87             ; print_unsigned_long(*(unsigned long *)p); 
1745   0D87 FA FF FF      lea d, [bp + -1] ; $p
1746   0D8A 2A            mov b, [d]
1747   0D8B A7 00         mov bh, 0
1748   0D8D 38 00 00      mov c, 0
1749   0D90 74            mov d, b
1750   0D91 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1751   0D94 FD 39         mov c, b ; And place it into C
1752   0D96 2A            mov b, [d] ; Lower Word in B
1753   0D97 FD 79         mov g, b
1754   0D99 28            mov b, c
1755   0D9A FD AB         swp b
1756   0D9C D8            push b
1757   0D9D FD 27         mov b, g
1758   0D9F FD AB         swp b
1759   0DA1 D8            push b
1760   0DA2 07 51 15      call print_unsigned_long
1761   0DA5 51 04 00      add sp, 4
1762   0DA8 0A ED 0D      jmp _if29_exit
1763   0DAB             _if29_else:
1764   0DAB             ; if(*format_p == 'x') 
1765   0DAB             _if30_cond:
1766   0DAB FA FD FF      lea d, [bp + -3] ; $format_p
1767   0DAE 2A            mov b, [d]
1768   0DAF 74            mov d, b
1769   0DB0 32            mov bl, [d]
1770   0DB1 A7 00         mov bh, 0
1771   0DB3             ; START RELATIONAL
1772   0DB3 D7            push a
1773   0DB4 11            mov a, b
1774   0DB5 26 78 00      mov b, $78
1775   0DB8 B0            cmp a, b
1776   0DB9 FD 71         seq ; ==
1777   0DBB E4            pop a
1778   0DBC             ; END RELATIONAL
1779   0DBC C0 00 00      cmp b, 0
1780   0DBF C6 E1 0D      je _if30_else
1781   0DC2             _if30_true:
1782   0DC2             ; printx32(*(long int *)p); 
1783   0DC2 FA FF FF      lea d, [bp + -1] ; $p
1784   0DC5 2A            mov b, [d]
1785   0DC6 74            mov d, b
1786   0DC7 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1787   0DCA FD 39         mov c, b ; And place it into C
1788   0DCC 2A            mov b, [d] ; Lower Word in B
1789   0DCD FD 79         mov g, b
1790   0DCF 28            mov b, c
1791   0DD0 FD AB         swp b
1792   0DD2 D8            push b
1793   0DD3 FD 27         mov b, g
1794   0DD5 FD AB         swp b
1795   0DD7 D8            push b
1796   0DD8 07 86 0F      call printx32
1797   0DDB 51 04 00      add sp, 4
1798   0DDE 0A ED 0D      jmp _if30_exit
1799   0DE1             _if30_else:
1800   0DE1             ; err("Unexpected format in printf."); 
1801   0DE1 26 AD 6B      mov b, _s30 ; "Unexpected format in printf."
1802   0DE4 FD AB         swp b
1803   0DE6 D8            push b
1804   0DE7 07 74 0F      call err
1805   0DEA 51 02 00      add sp, 2
1806   0DED             _if30_exit:
1807   0DED             _if29_exit:
1808   0DED             _if28_exit:
1809   0DED             ; p = p + 4; 
1810   0DED FA FF FF      lea d, [bp + -1] ; $p
1811   0DF0 DA            push d
1812   0DF1 FA FF FF      lea d, [bp + -1] ; $p
1813   0DF4 2A            mov b, [d]
1814   0DF5             ; START TERMS
1815   0DF5 D7            push a
1816   0DF6 11            mov a, b
1817   0DF7 26 04 00      mov b, $4
1818   0DFA 56            add b, a
1819   0DFB E4            pop a
1820   0DFC             ; END TERMS
1821   0DFC E7            pop d
1822   0DFD FD 43         mov [d], b
1823   0DFF             ; break; 
1824   0DFF 0A 25 0F      jmp _switch27_exit ; case break
1825   0E02             _switch27_case2:
1826   0E02             _switch27_case3:
1827   0E02             ; sp = sp + sprint_signed(sp, *(int*)p); 
1828   0E02 FA FB FF      lea d, [bp + -5] ; $sp
1829   0E05 DA            push d
1830   0E06 FA FB FF      lea d, [bp + -5] ; $sp
1831   0E09 2A            mov b, [d]
1832   0E0A             ; START TERMS
1833   0E0A D7            push a
1834   0E0B 11            mov a, b
1835   0E0C FA FF FF      lea d, [bp + -1] ; $p
1836   0E0F 2A            mov b, [d]
1837   0E10 74            mov d, b
1838   0E11 2A            mov b, [d]
1839   0E12 FD AB         swp b
1840   0E14 D8            push b
1841   0E15 FA FB FF      lea d, [bp + -5] ; $sp
1842   0E18 2A            mov b, [d]
1843   0E19 FD AB         swp b
1844   0E1B D8            push b
1845   0E1C 07 20 19      call sprint_signed
1846   0E1F 51 04 00      add sp, 4
1847   0E22 56            add b, a
1848   0E23 E4            pop a
1849   0E24             ; END TERMS
1850   0E24 E7            pop d
1851   0E25 FD 43         mov [d], b
1852   0E27             ; p = p + 2; 
1853   0E27 FA FF FF      lea d, [bp + -1] ; $p
1854   0E2A DA            push d
1855   0E2B FA FF FF      lea d, [bp + -1] ; $p
1856   0E2E 2A            mov b, [d]
1857   0E2F             ; START TERMS
1858   0E2F D7            push a
1859   0E30 11            mov a, b
1860   0E31 26 02 00      mov b, $2
1861   0E34 56            add b, a
1862   0E35 E4            pop a
1863   0E36             ; END TERMS
1864   0E36 E7            pop d
1865   0E37 FD 43         mov [d], b
1866   0E39             ; break; 
1867   0E39 0A 25 0F      jmp _switch27_exit ; case break
1868   0E3C             _switch27_case4:
1869   0E3C             ; sp = sp + sprint_unsigned(sp, *(unsigned int*)p); 
1870   0E3C FA FB FF      lea d, [bp + -5] ; $sp
1871   0E3F DA            push d
1872   0E40 FA FB FF      lea d, [bp + -5] ; $sp
1873   0E43 2A            mov b, [d]
1874   0E44             ; START TERMS
1875   0E44 D7            push a
1876   0E45 11            mov a, b
1877   0E46 FA FF FF      lea d, [bp + -1] ; $p
1878   0E49 2A            mov b, [d]
1879   0E4A 74            mov d, b
1880   0E4B 2A            mov b, [d]
1881   0E4C FD AB         swp b
1882   0E4E D8            push b
1883   0E4F FA FB FF      lea d, [bp + -5] ; $sp
1884   0E52 2A            mov b, [d]
1885   0E53 FD AB         swp b
1886   0E55 D8            push b
1887   0E56 07 4C 17      call sprint_unsigned
1888   0E59 51 04 00      add sp, 4
1889   0E5C 56            add b, a
1890   0E5D E4            pop a
1891   0E5E             ; END TERMS
1892   0E5E E7            pop d
1893   0E5F FD 43         mov [d], b
1894   0E61             ; p = p + 2; 
1895   0E61 FA FF FF      lea d, [bp + -1] ; $p
1896   0E64 DA            push d
1897   0E65 FA FF FF      lea d, [bp + -1] ; $p
1898   0E68 2A            mov b, [d]
1899   0E69             ; START TERMS
1900   0E69 D7            push a
1901   0E6A 11            mov a, b
1902   0E6B 26 02 00      mov b, $2
1903   0E6E 56            add b, a
1904   0E6F E4            pop a
1905   0E70             ; END TERMS
1906   0E70 E7            pop d
1907   0E71 FD 43         mov [d], b
1908   0E73             ; break; 
1909   0E73 0A 25 0F      jmp _switch27_exit ; case break
1910   0E76             _switch27_case5:
1911   0E76             
1912   0E76             ; --- BEGIN INLINE ASM BLOCK
1913   0E76 FA FF FF      lea d, [bp + -1] ; $p
1914   0E79 FD 2A         mov d, [d]
1915   0E7B 2A            mov b, [d]
1916   0E7C 07 B5 1D      call print_u16x
1917   0E7F             ; --- END INLINE ASM BLOCK
1918   0E7F             
1919   0E7F             ; p = p + 2; 
1920   0E7F FA FF FF      lea d, [bp + -1] ; $p
1921   0E82 DA            push d
1922   0E83 FA FF FF      lea d, [bp + -1] ; $p
1923   0E86 2A            mov b, [d]
1924   0E87             ; START TERMS
1925   0E87 D7            push a
1926   0E88 11            mov a, b
1927   0E89 26 02 00      mov b, $2
1928   0E8C 56            add b, a
1929   0E8D E4            pop a
1930   0E8E             ; END TERMS
1931   0E8E E7            pop d
1932   0E8F FD 43         mov [d], b
1933   0E91             ; break; 
1934   0E91 0A 25 0F      jmp _switch27_exit ; case break
1935   0E94             _switch27_case6:
1936   0E94             ; *sp++ = *(char *)p; 
1937   0E94 FA FB FF      lea d, [bp + -5] ; $sp
1938   0E97 2A            mov b, [d]
1939   0E98 FD 77         inc b
1940   0E9A FA FB FF      lea d, [bp + -5] ; $sp
1941   0E9D FD 43         mov [d], b
1942   0E9F FD 7D         dec b
1943   0EA1 D8            push b
1944   0EA2 FA FF FF      lea d, [bp + -1] ; $p
1945   0EA5 2A            mov b, [d]
1946   0EA6 74            mov d, b
1947   0EA7 32            mov bl, [d]
1948   0EA8 A7 00         mov bh, 0
1949   0EAA E7            pop d
1950   0EAB FD 3E         mov [d], bl
1951   0EAD             ; p = p + 1; 
1952   0EAD FA FF FF      lea d, [bp + -1] ; $p
1953   0EB0 DA            push d
1954   0EB1 FA FF FF      lea d, [bp + -1] ; $p
1955   0EB4 2A            mov b, [d]
1956   0EB5             ; START TERMS
1957   0EB5 D7            push a
1958   0EB6 11            mov a, b
1959   0EB7 26 01 00      mov b, $1
1960   0EBA 56            add b, a
1961   0EBB E4            pop a
1962   0EBC             ; END TERMS
1963   0EBC E7            pop d
1964   0EBD FD 43         mov [d], b
1965   0EBF             ; break; 
1966   0EBF 0A 25 0F      jmp _switch27_exit ; case break
1967   0EC2             _switch27_case7:
1968   0EC2             ; int len = strlen(*(char **)p); 
1969   0EC2 52 02 00      sub sp, 2
1970   0EC5             ; --- START LOCAL VAR INITIALIZATION
1971   0EC5 FA F9 FF      lea d, [bp + -7] ; $len
1972   0EC8 DA            push d
1973   0EC9 FA FF FF      lea d, [bp + -1] ; $p
1974   0ECC 2A            mov b, [d]
1975   0ECD 74            mov d, b
1976   0ECE 2A            mov b, [d]
1977   0ECF FD AB         swp b
1978   0ED1 D8            push b
1979   0ED2 07 8E 05      call strlen
1980   0ED5 51 02 00      add sp, 2
1981   0ED8 E7            pop d
1982   0ED9 FD 43         mov [d], b
1983   0EDB             ; --- END LOCAL VAR INITIALIZATION
1984   0EDB             ; strcpy(sp, *(char **)p); 
1985   0EDB FA FF FF      lea d, [bp + -1] ; $p
1986   0EDE 2A            mov b, [d]
1987   0EDF 74            mov d, b
1988   0EE0 2A            mov b, [d]
1989   0EE1 FD AB         swp b
1990   0EE3 D8            push b
1991   0EE4 FA FB FF      lea d, [bp + -5] ; $sp
1992   0EE7 2A            mov b, [d]
1993   0EE8 FD AB         swp b
1994   0EEA D8            push b
1995   0EEB 07 14 04      call strcpy
1996   0EEE 51 04 00      add sp, 4
1997   0EF1             ; sp = sp + len; 
1998   0EF1 FA FB FF      lea d, [bp + -5] ; $sp
1999   0EF4 DA            push d
2000   0EF5 FA FB FF      lea d, [bp + -5] ; $sp
2001   0EF8 2A            mov b, [d]
2002   0EF9             ; START TERMS
2003   0EF9 D7            push a
2004   0EFA 11            mov a, b
2005   0EFB FA F9 FF      lea d, [bp + -7] ; $len
2006   0EFE 2A            mov b, [d]
2007   0EFF 56            add b, a
2008   0F00 E4            pop a
2009   0F01             ; END TERMS
2010   0F01 E7            pop d
2011   0F02 FD 43         mov [d], b
2012   0F04             ; p = p + 2; 
2013   0F04 FA FF FF      lea d, [bp + -1] ; $p
2014   0F07 DA            push d
2015   0F08 FA FF FF      lea d, [bp + -1] ; $p
2016   0F0B 2A            mov b, [d]
2017   0F0C             ; START TERMS
2018   0F0C D7            push a
2019   0F0D 11            mov a, b
2020   0F0E 26 02 00      mov b, $2
2021   0F11 56            add b, a
2022   0F12 E4            pop a
2023   0F13             ; END TERMS
2024   0F13 E7            pop d
2025   0F14 FD 43         mov [d], b
2026   0F16             ; break; 
2027   0F16 0A 25 0F      jmp _switch27_exit ; case break
2028   0F19             _switch27_default:
2029   0F19             ; print("Error: Unknown argument type.\n"); 
2030   0F19 26 CA 6B      mov b, _s31 ; "Error: Unknown argument type.\n"
2031   0F1C FD AB         swp b
2032   0F1E D8            push b
2033   0F1F 07 CA 1A      call print
2034   0F22 51 02 00      add sp, 2
2035   0F25             _switch27_exit:
2036   0F25             ; format_p++; 
2037   0F25 FA FD FF      lea d, [bp + -3] ; $format_p
2038   0F28 2A            mov b, [d]
2039   0F29 FD 77         inc b
2040   0F2B FA FD FF      lea d, [bp + -3] ; $format_p
2041   0F2E FD 43         mov [d], b
2042   0F30 FD 7D         dec b
2043   0F32 0A 57 0F      jmp _if26_exit
2044   0F35             _if26_else:
2045   0F35             ; *sp++ = *format_p++; 
2046   0F35 FA FB FF      lea d, [bp + -5] ; $sp
2047   0F38 2A            mov b, [d]
2048   0F39 FD 77         inc b
2049   0F3B FA FB FF      lea d, [bp + -5] ; $sp
2050   0F3E FD 43         mov [d], b
2051   0F40 FD 7D         dec b
2052   0F42 D8            push b
2053   0F43 FA FD FF      lea d, [bp + -3] ; $format_p
2054   0F46 2A            mov b, [d]
2055   0F47 FD 77         inc b
2056   0F49 FA FD FF      lea d, [bp + -3] ; $format_p
2057   0F4C FD 43         mov [d], b
2058   0F4E FD 7D         dec b
2059   0F50 74            mov d, b
2060   0F51 32            mov bl, [d]
2061   0F52 A7 00         mov bh, 0
2062   0F54 E7            pop d
2063   0F55 FD 3E         mov [d], bl
2064   0F57             _if26_exit:
2065   0F57             _if25_exit:
2066   0F57             _for24_update:
2067   0F57 0A A1 0C      jmp _for24_cond
2068   0F5A             _for24_exit:
2069   0F5A             ; *sp = '\0'; 
2070   0F5A FA FB FF      lea d, [bp + -5] ; $sp
2071   0F5D 2A            mov b, [d]
2072   0F5E D8            push b
2073   0F5F 26 00 00      mov b, $0
2074   0F62 E7            pop d
2075   0F63 FD 3E         mov [d], bl
2076   0F65             ; return sp - dest; // return total number of chars written 
2077   0F65 FA FB FF      lea d, [bp + -5] ; $sp
2078   0F68 2A            mov b, [d]
2079   0F69             ; START TERMS
2080   0F69 D7            push a
2081   0F6A 11            mov a, b
2082   0F6B FA 05 00      lea d, [bp + 5] ; $dest
2083   0F6E 2A            mov b, [d]
2084   0F6F 60            sub a, b
2085   0F70 27            mov b, a
2086   0F71 E4            pop a
2087   0F72             ; END TERMS
2088   0F72 F9            leave
2089   0F73 09            ret
2090   0F74             
2091   0F74             err:
2092   0F74 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2093   0F77             ; print(e); 
2094   0F77 FA 05 00      lea d, [bp + 5] ; $e
2095   0F7A 2A            mov b, [d]
2096   0F7B FD AB         swp b
2097   0F7D D8            push b
2098   0F7E 07 CA 1A      call print
2099   0F81 51 02 00      add sp, 2
2100   0F84 F9            leave
2101   0F85 09            ret
2102   0F86             
2103   0F86             printx32:
2104   0F86 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2105   0F89             
2106   0F89             ; --- BEGIN INLINE ASM BLOCK
2107   0F89 FA 05 00      lea d, [bp + 5] ; $hex
2108   0F8C 2B 02 00      mov b, [d+2]
2109   0F8F 07 B5 1D      call print_u16x
2110   0F92 2A            mov b, [d]
2111   0F93 07 B5 1D      call print_u16x
2112   0F96             ; --- END INLINE ASM BLOCK
2113   0F96             
2114   0F96 F9            leave
2115   0F97 09            ret
2116   0F98             
2117   0F98             printx16:
2118   0F98 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2119   0F9B             
2120   0F9B             ; --- BEGIN INLINE ASM BLOCK
2121   0F9B FA 05 00      lea d, [bp + 5] ; $hex
2122   0F9E 2A            mov b, [d]
2123   0F9F 07 B5 1D      call print_u16x
2124   0FA2             ; --- END INLINE ASM BLOCK
2125   0FA2             
2126   0FA2 F9            leave
2127   0FA3 09            ret
2128   0FA4             
2129   0FA4             printx8:
2130   0FA4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2131   0FA7             
2132   0FA7             ; --- BEGIN INLINE ASM BLOCK
2133   0FA7 FA 05 00      lea d, [bp + 5] ; $hex
2134   0FAA 32            mov bl, [d]
2135   0FAB 07 F9 1D      call print_u8x
2136   0FAE             ; --- END INLINE ASM BLOCK
2137   0FAE             
2138   0FAE F9            leave
2139   0FAF 09            ret
2140   0FB0             
2141   0FB0             hex_str_to_int:
2142   0FB0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2143   0FB3             ; int value = 0; 
2144   0FB3 52 02 00      sub sp, 2
2145   0FB6             ; --- START LOCAL VAR INITIALIZATION
2146   0FB6 FA FF FF      lea d, [bp + -1] ; $value
2147   0FB9 DA            push d
2148   0FBA 26 00 00      mov b, $0
2149   0FBD E7            pop d
2150   0FBE FD 43         mov [d], b
2151   0FC0             ; --- END LOCAL VAR INITIALIZATION
2152   0FC0             ; int i; 
2153   0FC0 52 02 00      sub sp, 2
2154   0FC3             ; char hex_char; 
2155   0FC3 52 01 00      sub sp, 1
2156   0FC6             ; int len; 
2157   0FC6 52 02 00      sub sp, 2
2158   0FC9             ; len = strlen(hex_string); 
2159   0FC9 FA FA FF      lea d, [bp + -6] ; $len
2160   0FCC DA            push d
2161   0FCD FA 05 00      lea d, [bp + 5] ; $hex_string
2162   0FD0 2A            mov b, [d]
2163   0FD1 FD AB         swp b
2164   0FD3 D8            push b
2165   0FD4 07 8E 05      call strlen
2166   0FD7 51 02 00      add sp, 2
2167   0FDA E7            pop d
2168   0FDB FD 43         mov [d], b
2169   0FDD             ; for (i = 0; i < len; i++) { 
2170   0FDD             _for31_init:
2171   0FDD FA FD FF      lea d, [bp + -3] ; $i
2172   0FE0 DA            push d
2173   0FE1 26 00 00      mov b, $0
2174   0FE4 E7            pop d
2175   0FE5 FD 43         mov [d], b
2176   0FE7             _for31_cond:
2177   0FE7 FA FD FF      lea d, [bp + -3] ; $i
2178   0FEA 2A            mov b, [d]
2179   0FEB             ; START RELATIONAL
2180   0FEB D7            push a
2181   0FEC 11            mov a, b
2182   0FED FA FA FF      lea d, [bp + -6] ; $len
2183   0FF0 2A            mov b, [d]
2184   0FF1 B0            cmp a, b
2185   0FF2 FD 73         slt ; < (signed)
2186   0FF4 E4            pop a
2187   0FF5             ; END RELATIONAL
2188   0FF5 C0 00 00      cmp b, 0
2189   0FF8 C6 FA 10      je _for31_exit
2190   0FFB             _for31_block:
2191   0FFB             ; hex_char = hex_string[i]; 
2192   0FFB FA FC FF      lea d, [bp + -4] ; $hex_char
2193   0FFE DA            push d
2194   0FFF FA 05 00      lea d, [bp + 5] ; $hex_string
2195   1002 FD 2A         mov d, [d]
2196   1004 D7            push a
2197   1005 DA            push d
2198   1006 FA FD FF      lea d, [bp + -3] ; $i
2199   1009 2A            mov b, [d]
2200   100A E7            pop d
2201   100B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
2202   100F E4            pop a
2203   1010 32            mov bl, [d]
2204   1011 A7 00         mov bh, 0
2205   1013 E7            pop d
2206   1014 FD 3E         mov [d], bl
2207   1016             ; if (hex_char >= 'a' && hex_char <= 'f')  
2208   1016             _if32_cond:
2209   1016 FA FC FF      lea d, [bp + -4] ; $hex_char
2210   1019 32            mov bl, [d]
2211   101A A7 00         mov bh, 0
2212   101C             ; START RELATIONAL
2213   101C D7            push a
2214   101D 11            mov a, b
2215   101E 26 61 00      mov b, $61
2216   1021 B0            cmp a, b
2217   1022 FD 80         sge ; >=
2218   1024 E4            pop a
2219   1025             ; END RELATIONAL
2220   1025             ; START LOGICAL AND
2221   1025 D7            push a
2222   1026 11            mov a, b
2223   1027 FA FC FF      lea d, [bp + -4] ; $hex_char
2224   102A 32            mov bl, [d]
2225   102B A7 00         mov bh, 0
2226   102D             ; START RELATIONAL
2227   102D D7            push a
2228   102E 11            mov a, b
2229   102F 26 66 00      mov b, $66
2230   1032 B0            cmp a, b
2231   1033 FD 74         sle ; <= (signed)
2232   1035 E4            pop a
2233   1036             ; END RELATIONAL
2234   1036 FD A7         sand a, b
2235   1038 E4            pop a
2236   1039             ; END LOGICAL AND
2237   1039 C0 00 00      cmp b, 0
2238   103C C6 6D 10      je _if32_else
2239   103F             _if32_true:
2240   103F             ; value = (value * 16) + (hex_char - 'a' + 10); 
2241   103F FA FF FF      lea d, [bp + -1] ; $value
2242   1042 DA            push d
2243   1043 FA FF FF      lea d, [bp + -1] ; $value
2244   1046 2A            mov b, [d]
2245   1047             ; START FACTORS
2246   1047 D7            push a
2247   1048 11            mov a, b
2248   1049 26 10 00      mov b, $10
2249   104C AC            mul a, b ; *
2250   104D 11            mov a, b
2251   104E 27            mov b, a
2252   104F E4            pop a
2253   1050             ; END FACTORS
2254   1050             ; START TERMS
2255   1050 D7            push a
2256   1051 11            mov a, b
2257   1052 FA FC FF      lea d, [bp + -4] ; $hex_char
2258   1055 32            mov bl, [d]
2259   1056 A7 00         mov bh, 0
2260   1058             ; START TERMS
2261   1058 D7            push a
2262   1059 11            mov a, b
2263   105A 26 61 00      mov b, $61
2264   105D 60            sub a, b
2265   105E 27            mov b, a
2266   105F 11            mov a, b
2267   1060 26 0A 00      mov b, $a
2268   1063 56            add b, a
2269   1064 E4            pop a
2270   1065             ; END TERMS
2271   1065 56            add b, a
2272   1066 E4            pop a
2273   1067             ; END TERMS
2274   1067 E7            pop d
2275   1068 FD 43         mov [d], b
2276   106A 0A EA 10      jmp _if32_exit
2277   106D             _if32_else:
2278   106D             ; if (hex_char >= 'A' && hex_char <= 'F')  
2279   106D             _if33_cond:
2280   106D FA FC FF      lea d, [bp + -4] ; $hex_char
2281   1070 32            mov bl, [d]
2282   1071 A7 00         mov bh, 0
2283   1073             ; START RELATIONAL
2284   1073 D7            push a
2285   1074 11            mov a, b
2286   1075 26 41 00      mov b, $41
2287   1078 B0            cmp a, b
2288   1079 FD 80         sge ; >=
2289   107B E4            pop a
2290   107C             ; END RELATIONAL
2291   107C             ; START LOGICAL AND
2292   107C D7            push a
2293   107D 11            mov a, b
2294   107E FA FC FF      lea d, [bp + -4] ; $hex_char
2295   1081 32            mov bl, [d]
2296   1082 A7 00         mov bh, 0
2297   1084             ; START RELATIONAL
2298   1084 D7            push a
2299   1085 11            mov a, b
2300   1086 26 46 00      mov b, $46
2301   1089 B0            cmp a, b
2302   108A FD 74         sle ; <= (signed)
2303   108C E4            pop a
2304   108D             ; END RELATIONAL
2305   108D FD A7         sand a, b
2306   108F E4            pop a
2307   1090             ; END LOGICAL AND
2308   1090 C0 00 00      cmp b, 0
2309   1093 C6 C4 10      je _if33_else
2310   1096             _if33_true:
2311   1096             ; value = (value * 16) + (hex_char - 'A' + 10); 
2312   1096 FA FF FF      lea d, [bp + -1] ; $value
2313   1099 DA            push d
2314   109A FA FF FF      lea d, [bp + -1] ; $value
2315   109D 2A            mov b, [d]
2316   109E             ; START FACTORS
2317   109E D7            push a
2318   109F 11            mov a, b
2319   10A0 26 10 00      mov b, $10
2320   10A3 AC            mul a, b ; *
2321   10A4 11            mov a, b
2322   10A5 27            mov b, a
2323   10A6 E4            pop a
2324   10A7             ; END FACTORS
2325   10A7             ; START TERMS
2326   10A7 D7            push a
2327   10A8 11            mov a, b
2328   10A9 FA FC FF      lea d, [bp + -4] ; $hex_char
2329   10AC 32            mov bl, [d]
2330   10AD A7 00         mov bh, 0
2331   10AF             ; START TERMS
2332   10AF D7            push a
2333   10B0 11            mov a, b
2334   10B1 26 41 00      mov b, $41
2335   10B4 60            sub a, b
2336   10B5 27            mov b, a
2337   10B6 11            mov a, b
2338   10B7 26 0A 00      mov b, $a
2339   10BA 56            add b, a
2340   10BB E4            pop a
2341   10BC             ; END TERMS
2342   10BC 56            add b, a
2343   10BD E4            pop a
2344   10BE             ; END TERMS
2345   10BE E7            pop d
2346   10BF FD 43         mov [d], b
2347   10C1 0A EA 10      jmp _if33_exit
2348   10C4             _if33_else:
2349   10C4             ; value = (value * 16) + (hex_char - '0'); 
2350   10C4 FA FF FF      lea d, [bp + -1] ; $value
2351   10C7 DA            push d
2352   10C8 FA FF FF      lea d, [bp + -1] ; $value
2353   10CB 2A            mov b, [d]
2354   10CC             ; START FACTORS
2355   10CC D7            push a
2356   10CD 11            mov a, b
2357   10CE 26 10 00      mov b, $10
2358   10D1 AC            mul a, b ; *
2359   10D2 11            mov a, b
2360   10D3 27            mov b, a
2361   10D4 E4            pop a
2362   10D5             ; END FACTORS
2363   10D5             ; START TERMS
2364   10D5 D7            push a
2365   10D6 11            mov a, b
2366   10D7 FA FC FF      lea d, [bp + -4] ; $hex_char
2367   10DA 32            mov bl, [d]
2368   10DB A7 00         mov bh, 0
2369   10DD             ; START TERMS
2370   10DD D7            push a
2371   10DE 11            mov a, b
2372   10DF 26 30 00      mov b, $30
2373   10E2 60            sub a, b
2374   10E3 27            mov b, a
2375   10E4 E4            pop a
2376   10E5             ; END TERMS
2377   10E5 56            add b, a
2378   10E6 E4            pop a
2379   10E7             ; END TERMS
2380   10E7 E7            pop d
2381   10E8 FD 43         mov [d], b
2382   10EA             _if33_exit:
2383   10EA             _if32_exit:
2384   10EA             _for31_update:
2385   10EA FA FD FF      lea d, [bp + -3] ; $i
2386   10ED 2A            mov b, [d]
2387   10EE FD 77         inc b
2388   10F0 FA FD FF      lea d, [bp + -3] ; $i
2389   10F3 FD 43         mov [d], b
2390   10F5 FD 7D         dec b
2391   10F7 0A E7 0F      jmp _for31_cond
2392   10FA             _for31_exit:
2393   10FA             ; return value; 
2394   10FA FA FF FF      lea d, [bp + -1] ; $value
2395   10FD 2A            mov b, [d]
2396   10FE F9            leave
2397   10FF 09            ret
2398   1100             
2399   1100             gets:
2400   1100 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2401   1103             
2402   1103             ; --- BEGIN INLINE ASM BLOCK
2403   1103 FA 05 00      lea d, [bp + 5] ; $s
2404   1106 15            mov a, [d]
2405   1107 3C            mov d, a
2406   1108 07 1A 1C      call _gets
2407   110B             ; --- END INLINE ASM BLOCK
2408   110B             
2409   110B             ; return strlen(s); 
2410   110B FA 05 00      lea d, [bp + 5] ; $s
2411   110E 2A            mov b, [d]
2412   110F FD AB         swp b
2413   1111 D8            push b
2414   1112 07 8E 05      call strlen
2415   1115 51 02 00      add sp, 2
2416   1118 F9            leave
2417   1119 09            ret
2418   111A             
2419   111A             print_signed:
2420   111A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2421   111D             ; char digits[5]; 
2422   111D 52 05 00      sub sp, 5
2423   1120             ; int i = 0; 
2424   1120 52 02 00      sub sp, 2
2425   1123             ; --- START LOCAL VAR INITIALIZATION
2426   1123 FA FA FF      lea d, [bp + -6] ; $i
2427   1126 DA            push d
2428   1127 26 00 00      mov b, $0
2429   112A E7            pop d
2430   112B FD 43         mov [d], b
2431   112D             ; --- END LOCAL VAR INITIALIZATION
2432   112D             ; if (num < 0) { 
2433   112D             _if34_cond:
2434   112D FA 05 00      lea d, [bp + 5] ; $num
2435   1130 2A            mov b, [d]
2436   1131             ; START RELATIONAL
2437   1131 D7            push a
2438   1132 11            mov a, b
2439   1133 26 00 00      mov b, $0
2440   1136 B0            cmp a, b
2441   1137 FD 73         slt ; < (signed)
2442   1139 E4            pop a
2443   113A             ; END RELATIONAL
2444   113A C0 00 00      cmp b, 0
2445   113D C6 5A 11      je _if34_else
2446   1140             _if34_true:
2447   1140             ; putchar('-'); 
2448   1140 26 2D 00      mov b, $2d
2449   1143 DD            push bl
2450   1144 07 82 1A      call putchar
2451   1147 51 01 00      add sp, 1
2452   114A             ; num = -num; 
2453   114A FA 05 00      lea d, [bp + 5] ; $num
2454   114D DA            push d
2455   114E FA 05 00      lea d, [bp + 5] ; $num
2456   1151 2A            mov b, [d]
2457   1152 FD 97         neg b
2458   1154 E7            pop d
2459   1155 FD 43         mov [d], b
2460   1157 0A 7C 11      jmp _if34_exit
2461   115A             _if34_else:
2462   115A             ; if (num == 0) { 
2463   115A             _if35_cond:
2464   115A FA 05 00      lea d, [bp + 5] ; $num
2465   115D 2A            mov b, [d]
2466   115E             ; START RELATIONAL
2467   115E D7            push a
2468   115F 11            mov a, b
2469   1160 26 00 00      mov b, $0
2470   1163 B0            cmp a, b
2471   1164 FD 71         seq ; ==
2472   1166 E4            pop a
2473   1167             ; END RELATIONAL
2474   1167 C0 00 00      cmp b, 0
2475   116A C6 7C 11      je _if35_exit
2476   116D             _if35_true:
2477   116D             ; putchar('0'); 
2478   116D 26 30 00      mov b, $30
2479   1170 DD            push bl
2480   1171 07 82 1A      call putchar
2481   1174 51 01 00      add sp, 1
2482   1177             ; return; 
2483   1177 F9            leave
2484   1178 09            ret
2485   1179 0A 7C 11      jmp _if35_exit
2486   117C             _if35_exit:
2487   117C             _if34_exit:
2488   117C             ; while (num > 0) { 
2489   117C             _while36_cond:
2490   117C FA 05 00      lea d, [bp + 5] ; $num
2491   117F 2A            mov b, [d]
2492   1180             ; START RELATIONAL
2493   1180 D7            push a
2494   1181 11            mov a, b
2495   1182 26 00 00      mov b, $0
2496   1185 B0            cmp a, b
2497   1186 FD 7F         sgt ; >
2498   1188 E4            pop a
2499   1189             ; END RELATIONAL
2500   1189 C0 00 00      cmp b, 0
2501   118C C6 D6 11      je _while36_exit
2502   118F             _while36_block:
2503   118F             ; digits[i] = '0' + (num % 10); 
2504   118F FA FC FF      lea d, [bp + -4] ; $digits
2505   1192 D7            push a
2506   1193 DA            push d
2507   1194 FA FA FF      lea d, [bp + -6] ; $i
2508   1197 2A            mov b, [d]
2509   1198 E7            pop d
2510   1199 5A            add d, b
2511   119A E4            pop a
2512   119B DA            push d
2513   119C 26 30 00      mov b, $30
2514   119F             ; START TERMS
2515   119F D7            push a
2516   11A0 11            mov a, b
2517   11A1 FA 05 00      lea d, [bp + 5] ; $num
2518   11A4 2A            mov b, [d]
2519   11A5             ; START FACTORS
2520   11A5 D7            push a
2521   11A6 11            mov a, b
2522   11A7 26 0A 00      mov b, $a
2523   11AA AE            div a, b ; 
2524   11AB 11            mov a, b
2525   11AC 27            mov b, a
2526   11AD E4            pop a
2527   11AE             ; END FACTORS
2528   11AE 56            add b, a
2529   11AF E4            pop a
2530   11B0             ; END TERMS
2531   11B0 E7            pop d
2532   11B1 FD 3E         mov [d], bl
2533   11B3             ; num = num / 10; 
2534   11B3 FA 05 00      lea d, [bp + 5] ; $num
2535   11B6 DA            push d
2536   11B7 FA 05 00      lea d, [bp + 5] ; $num
2537   11BA 2A            mov b, [d]
2538   11BB             ; START FACTORS
2539   11BB D7            push a
2540   11BC 11            mov a, b
2541   11BD 26 0A 00      mov b, $a
2542   11C0 AE            div a, b
2543   11C1 27            mov b, a
2544   11C2 E4            pop a
2545   11C3             ; END FACTORS
2546   11C3 E7            pop d
2547   11C4 FD 43         mov [d], b
2548   11C6             ; i++; 
2549   11C6 FA FA FF      lea d, [bp + -6] ; $i
2550   11C9 2A            mov b, [d]
2551   11CA FD 77         inc b
2552   11CC FA FA FF      lea d, [bp + -6] ; $i
2553   11CF FD 43         mov [d], b
2554   11D1 FD 7D         dec b
2555   11D3 0A 7C 11      jmp _while36_cond
2556   11D6             _while36_exit:
2557   11D6             ; while (i > 0) { 
2558   11D6             _while37_cond:
2559   11D6 FA FA FF      lea d, [bp + -6] ; $i
2560   11D9 2A            mov b, [d]
2561   11DA             ; START RELATIONAL
2562   11DA D7            push a
2563   11DB 11            mov a, b
2564   11DC 26 00 00      mov b, $0
2565   11DF B0            cmp a, b
2566   11E0 FD 7F         sgt ; >
2567   11E2 E4            pop a
2568   11E3             ; END RELATIONAL
2569   11E3 C0 00 00      cmp b, 0
2570   11E6 C6 0F 12      je _while37_exit
2571   11E9             _while37_block:
2572   11E9             ; i--; 
2573   11E9 FA FA FF      lea d, [bp + -6] ; $i
2574   11EC 2A            mov b, [d]
2575   11ED FD 7D         dec b
2576   11EF FA FA FF      lea d, [bp + -6] ; $i
2577   11F2 FD 43         mov [d], b
2578   11F4 FD 77         inc b
2579   11F6             ; putchar(digits[i]); 
2580   11F6 FA FC FF      lea d, [bp + -4] ; $digits
2581   11F9 D7            push a
2582   11FA DA            push d
2583   11FB FA FA FF      lea d, [bp + -6] ; $i
2584   11FE 2A            mov b, [d]
2585   11FF E7            pop d
2586   1200 5A            add d, b
2587   1201 E4            pop a
2588   1202 32            mov bl, [d]
2589   1203 A7 00         mov bh, 0
2590   1205 DD            push bl
2591   1206 07 82 1A      call putchar
2592   1209 51 01 00      add sp, 1
2593   120C 0A D6 11      jmp _while37_cond
2594   120F             _while37_exit:
2595   120F F9            leave
2596   1210 09            ret
2597   1211             
2598   1211             print_signed_long:
2599   1211 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2600   1214             ; char digits[10]; 
2601   1214 52 0A 00      sub sp, 10
2602   1217             ; int i = 0; 
2603   1217 52 02 00      sub sp, 2
2604   121A             ; --- START LOCAL VAR INITIALIZATION
2605   121A FA F5 FF      lea d, [bp + -11] ; $i
2606   121D DA            push d
2607   121E 26 00 00      mov b, $0
2608   1221 E7            pop d
2609   1222 FD 43         mov [d], b
2610   1224             ; --- END LOCAL VAR INITIALIZATION
2611   1224             ; if (num < 0) { 
2612   1224             _if38_cond:
2613   1224 FA 05 00      lea d, [bp + 5] ; $num
2614   1227 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2615   122A FD 39         mov c, b ; And place it into C
2616   122C 2A            mov b, [d] ; Lower Word in B
2617   122D             ; START RELATIONAL
2618   122D D7            push a
2619   122E FD D8         push g
2620   1230 11            mov a, b
2621   1231 FD 7A         mov g, c
2622   1233 26 00 00      mov b, $0
2623   1236 38 00 00      mov c, 0
2624   1239 FD AF 00 00   cmp32 ga, cb
2624   123D 00 00 00 00 
2624   1241 00 00 00 00 
2624   1245 00 00 00 00 
2624   1249 00 00 00 00 
2624   124D 00 00 00 00 
2624   1251 00 00 00 00 
2624   1255 00 00 00 00 
2624   1259 00 00 00 00 
2624   125D 00 00 00 00 
2624   1261 00 00 00 00 
2624   1265 00 00 00 00 
2624   1269 00 00 00 00 
2624   126D 00 00 00 00 
2624   1271 00 00 00 00 
2624   1275 00 00 00 00 
2624   1279 00 00 00 00 
2624   127D 00 00 00 00 
2624   1281 00 00 00 00 
2624   1285 00 00 00 00 
2624   1289 00 00 00 00 
2624   128D 00 00 00 00 
2624   1291 00 00 00 00 
2624   1295 00 00 00 00 
2624   1299 00 00 00 00 
2624   129D 00 00 00 00 
2624   12A1 00 00 00 00 
2624   12A5 00 00 00 00 
2624   12A9 00 00 00 00 
2624   12AD 00 00 00 00 
2624   12B1 00 00 00 00 
2624   12B5 00 00 00 00 
2624   12B9 00 00 00 00 
2624   12BD 00 00 00 00 
2624   12C1 00 00 00 00 
2624   12C5 00 00 00 00 
2624   12C9 00 00 00 00 
2624   12CD 00 00 00 00 
2624   12D1 00 00 00 00 
2624   12D5 00 00 00 00 
2624   12D9 00 00 00 00 
2624   12DD 00 00 00 00 
2624   12E1 00 00 00 00 
2624   12E5 00 00 00 00 
2624   12E9 00 00 00 00 
2624   12ED 00 00 00 00 
2624   12F1 00 00 00 00 
2624   12F5 00 00 00 00 
2624   12F9 00 00 00 00 
2624   12FD 00 00 00 00 
2624   1301 00 00 00 00 
2624   1305 00 00 00 00 
2624   1309 00 00 00 00 
2624   130D 00 00 00 00 
2624   1311 00 00 00 00 
2624   1315 00 00 00 00 
2624   1319 00 00 00 00 
2624   131D 00 00 00 00 
2624   1321 00 00 00 00 
2624   1325 00 00 00 00 
2624   1329 00 00 00 00 
2624   132D 00 00 00 00 
2624   1331 00 00 00 00 
2624   1335 00 00 00 00 
2624   1339 00 
2625   133A FD 73         slt ; <
2626   133C FD F1         pop g
2627   133E E4            pop a
2628   133F             ; END RELATIONAL
2629   133F C0 00 00      cmp b, 0
2630   1342 C6 69 13      je _if38_else
2631   1345             _if38_true:
2632   1345             ; putchar('-'); 
2633   1345 26 2D 00      mov b, $2d
2634   1348 DD            push bl
2635   1349 07 82 1A      call putchar
2636   134C 51 01 00      add sp, 1
2637   134F             ; num = -num; 
2638   134F FA 05 00      lea d, [bp + 5] ; $num
2639   1352 DA            push d
2640   1353 FA 05 00      lea d, [bp + 5] ; $num
2641   1356 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2642   1359 FD 39         mov c, b ; And place it into C
2643   135B 2A            mov b, [d] ; Lower Word in B
2644   135C FD 97         neg b
2645   135E E7            pop d
2646   135F FD 43         mov [d], b
2647   1361 28            mov b, c
2648   1362 FD 44 02 00   mov [d + 2], b
2649   1366 0A 99 14      jmp _if38_exit
2650   1369             _if38_else:
2651   1369             ; if (num == 0) { 
2652   1369             _if39_cond:
2653   1369 FA 05 00      lea d, [bp + 5] ; $num
2654   136C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2655   136F FD 39         mov c, b ; And place it into C
2656   1371 2A            mov b, [d] ; Lower Word in B
2657   1372             ; START RELATIONAL
2658   1372 D7            push a
2659   1373 FD D8         push g
2660   1375 11            mov a, b
2661   1376 FD 7A         mov g, c
2662   1378 26 00 00      mov b, $0
2663   137B 38 00 00      mov c, 0
2664   137E FD AF 00 00   cmp32 ga, cb
2664   1382 00 00 00 00 
2664   1386 00 00 00 00 
2664   138A 00 00 00 00 
2664   138E 00 00 00 00 
2664   1392 00 00 00 00 
2664   1396 00 00 00 00 
2664   139A 00 00 00 00 
2664   139E 00 00 00 00 
2664   13A2 00 00 00 00 
2664   13A6 00 00 00 00 
2664   13AA 00 00 00 00 
2664   13AE 00 00 00 00 
2664   13B2 00 00 00 00 
2664   13B6 00 00 00 00 
2664   13BA 00 00 00 00 
2664   13BE 00 00 00 00 
2664   13C2 00 00 00 00 
2664   13C6 00 00 00 00 
2664   13CA 00 00 00 00 
2664   13CE 00 00 00 00 
2664   13D2 00 00 00 00 
2664   13D6 00 00 00 00 
2664   13DA 00 00 00 00 
2664   13DE 00 00 00 00 
2664   13E2 00 00 00 00 
2664   13E6 00 00 00 00 
2664   13EA 00 00 00 00 
2664   13EE 00 00 00 00 
2664   13F2 00 00 00 00 
2664   13F6 00 00 00 00 
2664   13FA 00 00 00 00 
2664   13FE 00 00 00 00 
2664   1402 00 00 00 00 
2664   1406 00 00 00 00 
2664   140A 00 00 00 00 
2664   140E 00 00 00 00 
2664   1412 00 00 00 00 
2664   1416 00 00 00 00 
2664   141A 00 00 00 00 
2664   141E 00 00 00 00 
2664   1422 00 00 00 00 
2664   1426 00 00 00 00 
2664   142A 00 00 00 00 
2664   142E 00 00 00 00 
2664   1432 00 00 00 00 
2664   1436 00 00 00 00 
2664   143A 00 00 00 00 
2664   143E 00 00 00 00 
2664   1442 00 00 00 00 
2664   1446 00 00 00 00 
2664   144A 00 00 00 00 
2664   144E 00 00 00 00 
2664   1452 00 00 00 00 
2664   1456 00 00 00 00 
2664   145A 00 00 00 00 
2664   145E 00 00 00 00 
2664   1462 00 00 00 00 
2664   1466 00 00 00 00 
2664   146A 00 00 00 00 
2664   146E 00 00 00 00 
2664   1472 00 00 00 00 
2664   1476 00 00 00 00 
2664   147A 00 00 00 00 
2664   147E 00 
2665   147F FD 71         seq ; ==
2666   1481 FD F1         pop g
2667   1483 E4            pop a
2668   1484             ; END RELATIONAL
2669   1484 C0 00 00      cmp b, 0
2670   1487 C6 99 14      je _if39_exit
2671   148A             _if39_true:
2672   148A             ; putchar('0'); 
2673   148A 26 30 00      mov b, $30
2674   148D DD            push bl
2675   148E 07 82 1A      call putchar
2676   1491 51 01 00      add sp, 1
2677   1494             ; return; 
2678   1494 F9            leave
2679   1495 09            ret
2680   1496 0A 99 14      jmp _if39_exit
2681   1499             _if39_exit:
2682   1499             _if38_exit:
2683   1499             ; while (num > 0) { 
2684   1499             _while40_cond:
2685   1499 FA 05 00      lea d, [bp + 5] ; $num
2686   149C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2687   149F FD 39         mov c, b ; And place it into C
2688   14A1 2A            mov b, [d] ; Lower Word in B
2689   14A2             ; START RELATIONAL
2690   14A2 D7            push a
2691   14A3 FD D8         push g
2692   14A5 11            mov a, b
2693   14A6 FD 7A         mov g, c
2694   14A8 26 00 00      mov b, $0
2695   14AB 38 00 00      mov c, 0
2696   14AE FD 7F         sgt
2697   14B0 FD F1         pop g
2698   14B2 E4            pop a
2699   14B3             ; END RELATIONAL
2700   14B3 C0 00 00      cmp b, 0
2701   14B6 C6 16 15      je _while40_exit
2702   14B9             _while40_block:
2703   14B9             ; digits[i] = '0' + (num % 10); 
2704   14B9 FA F7 FF      lea d, [bp + -9] ; $digits
2705   14BC D7            push a
2706   14BD DA            push d
2707   14BE FA F5 FF      lea d, [bp + -11] ; $i
2708   14C1 2A            mov b, [d]
2709   14C2 E7            pop d
2710   14C3 5A            add d, b
2711   14C4 E4            pop a
2712   14C5 DA            push d
2713   14C6 26 30 00      mov b, $30
2714   14C9             ; START TERMS
2715   14C9 D7            push a
2716   14CA 11            mov a, b
2717   14CB FA 05 00      lea d, [bp + 5] ; $num
2718   14CE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2719   14D1 FD 39         mov c, b ; And place it into C
2720   14D3 2A            mov b, [d] ; Lower Word in B
2721   14D4             ; START FACTORS
2722   14D4 D7            push a
2723   14D5 11            mov a, b
2724   14D6 26 0A 00      mov b, $a
2725   14D9 AE            div a, b ; 
2726   14DA 11            mov a, b
2727   14DB 27            mov b, a
2728   14DC E4            pop a
2729   14DD             ; END FACTORS
2730   14DD 54            add a, b
2731   14DE D7            push a
2732   14DF FD 12         mov a, g
2733   14E1 28            mov b, c
2734   14E2 5C            adc a, b
2735   14E3 39            mov c, a
2736   14E4 E5            pop b
2737   14E5 E4            pop a
2738   14E6             ; END TERMS
2739   14E6 E7            pop d
2740   14E7 FD 3E         mov [d], bl
2741   14E9             ; num = num / 10; 
2742   14E9 FA 05 00      lea d, [bp + 5] ; $num
2743   14EC DA            push d
2744   14ED FA 05 00      lea d, [bp + 5] ; $num
2745   14F0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2746   14F3 FD 39         mov c, b ; And place it into C
2747   14F5 2A            mov b, [d] ; Lower Word in B
2748   14F6             ; START FACTORS
2749   14F6 D7            push a
2750   14F7 11            mov a, b
2751   14F8 26 0A 00      mov b, $a
2752   14FB AE            div a, b
2753   14FC 27            mov b, a
2754   14FD E4            pop a
2755   14FE             ; END FACTORS
2756   14FE E7            pop d
2757   14FF FD 43         mov [d], b
2758   1501 28            mov b, c
2759   1502 FD 44 02 00   mov [d + 2], b
2760   1506             ; i++; 
2761   1506 FA F5 FF      lea d, [bp + -11] ; $i
2762   1509 2A            mov b, [d]
2763   150A FD 77         inc b
2764   150C FA F5 FF      lea d, [bp + -11] ; $i
2765   150F FD 43         mov [d], b
2766   1511 FD 7D         dec b
2767   1513 0A 99 14      jmp _while40_cond
2768   1516             _while40_exit:
2769   1516             ; while (i > 0) { 
2770   1516             _while41_cond:
2771   1516 FA F5 FF      lea d, [bp + -11] ; $i
2772   1519 2A            mov b, [d]
2773   151A             ; START RELATIONAL
2774   151A D7            push a
2775   151B 11            mov a, b
2776   151C 26 00 00      mov b, $0
2777   151F B0            cmp a, b
2778   1520 FD 7F         sgt ; >
2779   1522 E4            pop a
2780   1523             ; END RELATIONAL
2781   1523 C0 00 00      cmp b, 0
2782   1526 C6 4F 15      je _while41_exit
2783   1529             _while41_block:
2784   1529             ; i--; 
2785   1529 FA F5 FF      lea d, [bp + -11] ; $i
2786   152C 2A            mov b, [d]
2787   152D FD 7D         dec b
2788   152F FA F5 FF      lea d, [bp + -11] ; $i
2789   1532 FD 43         mov [d], b
2790   1534 FD 77         inc b
2791   1536             ; putchar(digits[i]); 
2792   1536 FA F7 FF      lea d, [bp + -9] ; $digits
2793   1539 D7            push a
2794   153A DA            push d
2795   153B FA F5 FF      lea d, [bp + -11] ; $i
2796   153E 2A            mov b, [d]
2797   153F E7            pop d
2798   1540 5A            add d, b
2799   1541 E4            pop a
2800   1542 32            mov bl, [d]
2801   1543 A7 00         mov bh, 0
2802   1545 DD            push bl
2803   1546 07 82 1A      call putchar
2804   1549 51 01 00      add sp, 1
2805   154C 0A 16 15      jmp _while41_cond
2806   154F             _while41_exit:
2807   154F F9            leave
2808   1550 09            ret
2809   1551             
2810   1551             print_unsigned_long:
2811   1551 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2812   1554             ; char digits[10]; 
2813   1554 52 0A 00      sub sp, 10
2814   1557             ; int i; 
2815   1557 52 02 00      sub sp, 2
2816   155A             ; i = 0; 
2817   155A FA F5 FF      lea d, [bp + -11] ; $i
2818   155D DA            push d
2819   155E 26 00 00      mov b, $0
2820   1561 E7            pop d
2821   1562 FD 43         mov [d], b
2822   1564             ; if(num == 0){ 
2823   1564             _if42_cond:
2824   1564 FA 05 00      lea d, [bp + 5] ; $num
2825   1567 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2826   156A FD 39         mov c, b ; And place it into C
2827   156C 2A            mov b, [d] ; Lower Word in B
2828   156D             ; START RELATIONAL
2829   156D D7            push a
2830   156E FD D8         push g
2831   1570 11            mov a, b
2832   1571 FD 7A         mov g, c
2833   1573 26 00 00      mov b, $0
2834   1576 38 00 00      mov c, 0
2835   1579 FD AF 00 00   cmp32 ga, cb
2835   157D 00 00 00 00 
2835   1581 00 00 00 00 
2835   1585 00 00 00 00 
2835   1589 00 00 00 00 
2835   158D 00 00 00 00 
2835   1591 00 00 00 00 
2835   1595 00 00 00 00 
2835   1599 00 00 00 00 
2835   159D 00 00 00 00 
2835   15A1 00 00 00 00 
2835   15A5 00 00 00 00 
2835   15A9 00 00 00 00 
2835   15AD 00 00 00 00 
2835   15B1 00 00 00 00 
2835   15B5 00 00 00 00 
2835   15B9 00 00 00 00 
2835   15BD 00 00 00 00 
2835   15C1 00 00 00 00 
2835   15C5 00 00 00 00 
2835   15C9 00 00 00 00 
2835   15CD 00 00 00 00 
2835   15D1 00 00 00 00 
2835   15D5 00 00 00 00 
2835   15D9 00 00 00 00 
2835   15DD 00 00 00 00 
2835   15E1 00 00 00 00 
2835   15E5 00 00 00 00 
2835   15E9 00 00 00 00 
2835   15ED 00 00 00 00 
2835   15F1 00 00 00 00 
2835   15F5 00 00 00 00 
2835   15F9 00 00 00 00 
2835   15FD 00 00 00 00 
2835   1601 00 00 00 00 
2835   1605 00 00 00 00 
2835   1609 00 00 00 00 
2835   160D 00 00 00 00 
2835   1611 00 00 00 00 
2835   1615 00 00 00 00 
2835   1619 00 00 00 00 
2835   161D 00 00 00 00 
2835   1621 00 00 00 00 
2835   1625 00 00 00 00 
2835   1629 00 00 00 00 
2835   162D 00 00 00 00 
2835   1631 00 00 00 00 
2835   1635 00 00 00 00 
2835   1639 00 00 00 00 
2835   163D 00 00 00 00 
2835   1641 00 00 00 00 
2835   1645 00 00 00 00 
2835   1649 00 00 00 00 
2835   164D 00 00 00 00 
2835   1651 00 00 00 00 
2835   1655 00 00 00 00 
2835   1659 00 00 00 00 
2835   165D 00 00 00 00 
2835   1661 00 00 00 00 
2835   1665 00 00 00 00 
2835   1669 00 00 00 00 
2835   166D 00 00 00 00 
2835   1671 00 00 00 00 
2835   1675 00 00 00 00 
2835   1679 00 
2836   167A FD 71         seq ; ==
2837   167C FD F1         pop g
2838   167E E4            pop a
2839   167F             ; END RELATIONAL
2840   167F C0 00 00      cmp b, 0
2841   1682 C6 94 16      je _if42_exit
2842   1685             _if42_true:
2843   1685             ; putchar('0'); 
2844   1685 26 30 00      mov b, $30
2845   1688 DD            push bl
2846   1689 07 82 1A      call putchar
2847   168C 51 01 00      add sp, 1
2848   168F             ; return; 
2849   168F F9            leave
2850   1690 09            ret
2851   1691 0A 94 16      jmp _if42_exit
2852   1694             _if42_exit:
2853   1694             ; while (num > 0) { 
2854   1694             _while43_cond:
2855   1694 FA 05 00      lea d, [bp + 5] ; $num
2856   1697 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2857   169A FD 39         mov c, b ; And place it into C
2858   169C 2A            mov b, [d] ; Lower Word in B
2859   169D             ; START RELATIONAL
2860   169D D7            push a
2861   169E FD D8         push g
2862   16A0 11            mov a, b
2863   16A1 FD 7A         mov g, c
2864   16A3 26 00 00      mov b, $0
2865   16A6 38 00 00      mov c, 0
2866   16A9 FD 81         sgu
2867   16AB FD F1         pop g
2868   16AD E4            pop a
2869   16AE             ; END RELATIONAL
2870   16AE C0 00 00      cmp b, 0
2871   16B1 C6 11 17      je _while43_exit
2872   16B4             _while43_block:
2873   16B4             ; digits[i] = '0' + (num % 10); 
2874   16B4 FA F7 FF      lea d, [bp + -9] ; $digits
2875   16B7 D7            push a
2876   16B8 DA            push d
2877   16B9 FA F5 FF      lea d, [bp + -11] ; $i
2878   16BC 2A            mov b, [d]
2879   16BD E7            pop d
2880   16BE 5A            add d, b
2881   16BF E4            pop a
2882   16C0 DA            push d
2883   16C1 26 30 00      mov b, $30
2884   16C4             ; START TERMS
2885   16C4 D7            push a
2886   16C5 11            mov a, b
2887   16C6 FA 05 00      lea d, [bp + 5] ; $num
2888   16C9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2889   16CC FD 39         mov c, b ; And place it into C
2890   16CE 2A            mov b, [d] ; Lower Word in B
2891   16CF             ; START FACTORS
2892   16CF D7            push a
2893   16D0 11            mov a, b
2894   16D1 26 0A 00      mov b, $a
2895   16D4 AE            div a, b ; 
2896   16D5 11            mov a, b
2897   16D6 27            mov b, a
2898   16D7 E4            pop a
2899   16D8             ; END FACTORS
2900   16D8 54            add a, b
2901   16D9 D7            push a
2902   16DA FD 12         mov a, g
2903   16DC 28            mov b, c
2904   16DD 5C            adc a, b
2905   16DE 39            mov c, a
2906   16DF E5            pop b
2907   16E0 E4            pop a
2908   16E1             ; END TERMS
2909   16E1 E7            pop d
2910   16E2 FD 3E         mov [d], bl
2911   16E4             ; num = num / 10; 
2912   16E4 FA 05 00      lea d, [bp + 5] ; $num
2913   16E7 DA            push d
2914   16E8 FA 05 00      lea d, [bp + 5] ; $num
2915   16EB 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2916   16EE FD 39         mov c, b ; And place it into C
2917   16F0 2A            mov b, [d] ; Lower Word in B
2918   16F1             ; START FACTORS
2919   16F1 D7            push a
2920   16F2 11            mov a, b
2921   16F3 26 0A 00      mov b, $a
2922   16F6 AE            div a, b
2923   16F7 27            mov b, a
2924   16F8 E4            pop a
2925   16F9             ; END FACTORS
2926   16F9 E7            pop d
2927   16FA FD 43         mov [d], b
2928   16FC 28            mov b, c
2929   16FD FD 44 02 00   mov [d + 2], b
2930   1701             ; i++; 
2931   1701 FA F5 FF      lea d, [bp + -11] ; $i
2932   1704 2A            mov b, [d]
2933   1705 FD 77         inc b
2934   1707 FA F5 FF      lea d, [bp + -11] ; $i
2935   170A FD 43         mov [d], b
2936   170C FD 7D         dec b
2937   170E 0A 94 16      jmp _while43_cond
2938   1711             _while43_exit:
2939   1711             ; while (i > 0) { 
2940   1711             _while44_cond:
2941   1711 FA F5 FF      lea d, [bp + -11] ; $i
2942   1714 2A            mov b, [d]
2943   1715             ; START RELATIONAL
2944   1715 D7            push a
2945   1716 11            mov a, b
2946   1717 26 00 00      mov b, $0
2947   171A B0            cmp a, b
2948   171B FD 7F         sgt ; >
2949   171D E4            pop a
2950   171E             ; END RELATIONAL
2951   171E C0 00 00      cmp b, 0
2952   1721 C6 4A 17      je _while44_exit
2953   1724             _while44_block:
2954   1724             ; i--; 
2955   1724 FA F5 FF      lea d, [bp + -11] ; $i
2956   1727 2A            mov b, [d]
2957   1728 FD 7D         dec b
2958   172A FA F5 FF      lea d, [bp + -11] ; $i
2959   172D FD 43         mov [d], b
2960   172F FD 77         inc b
2961   1731             ; putchar(digits[i]); 
2962   1731 FA F7 FF      lea d, [bp + -9] ; $digits
2963   1734 D7            push a
2964   1735 DA            push d
2965   1736 FA F5 FF      lea d, [bp + -11] ; $i
2966   1739 2A            mov b, [d]
2967   173A E7            pop d
2968   173B 5A            add d, b
2969   173C E4            pop a
2970   173D 32            mov bl, [d]
2971   173E A7 00         mov bh, 0
2972   1740 DD            push bl
2973   1741 07 82 1A      call putchar
2974   1744 51 01 00      add sp, 1
2975   1747 0A 11 17      jmp _while44_cond
2976   174A             _while44_exit:
2977   174A F9            leave
2978   174B 09            ret
2979   174C             
2980   174C             sprint_unsigned:
2981   174C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2982   174F             ; char digits[5]; 
2983   174F 52 05 00      sub sp, 5
2984   1752             ; int i; 
2985   1752 52 02 00      sub sp, 2
2986   1755             ; int len = 0; 
2987   1755 52 02 00      sub sp, 2
2988   1758             ; --- START LOCAL VAR INITIALIZATION
2989   1758 FA F8 FF      lea d, [bp + -8] ; $len
2990   175B DA            push d
2991   175C 26 00 00      mov b, $0
2992   175F E7            pop d
2993   1760 FD 43         mov [d], b
2994   1762             ; --- END LOCAL VAR INITIALIZATION
2995   1762             ; i = 0; 
2996   1762 FA FA FF      lea d, [bp + -6] ; $i
2997   1765 DA            push d
2998   1766 26 00 00      mov b, $0
2999   1769 E7            pop d
3000   176A FD 43         mov [d], b
3001   176C             ; if(num == 0){ 
3002   176C             _if45_cond:
3003   176C FA 07 00      lea d, [bp + 7] ; $num
3004   176F 2A            mov b, [d]
3005   1770             ; START RELATIONAL
3006   1770 D7            push a
3007   1771 11            mov a, b
3008   1772 26 00 00      mov b, $0
3009   1775 B0            cmp a, b
3010   1776 FD 71         seq ; ==
3011   1778 E4            pop a
3012   1779             ; END RELATIONAL
3013   1779 C0 00 00      cmp b, 0
3014   177C C6 9B 17      je _if45_exit
3015   177F             _if45_true:
3016   177F             ; *dest++ = '0'; 
3017   177F FA 05 00      lea d, [bp + 5] ; $dest
3018   1782 2A            mov b, [d]
3019   1783 FD 77         inc b
3020   1785 FA 05 00      lea d, [bp + 5] ; $dest
3021   1788 FD 43         mov [d], b
3022   178A FD 7D         dec b
3023   178C D8            push b
3024   178D 26 30 00      mov b, $30
3025   1790 E7            pop d
3026   1791 FD 3E         mov [d], bl
3027   1793             ; return 1; 
3028   1793 26 01 00      mov b, $1
3029   1796 F9            leave
3030   1797 09            ret
3031   1798 0A 9B 17      jmp _if45_exit
3032   179B             _if45_exit:
3033   179B             ; while (num > 0) { 
3034   179B             _while46_cond:
3035   179B FA 07 00      lea d, [bp + 7] ; $num
3036   179E 2A            mov b, [d]
3037   179F             ; START RELATIONAL
3038   179F D7            push a
3039   17A0 11            mov a, b
3040   17A1 26 00 00      mov b, $0
3041   17A4 B0            cmp a, b
3042   17A5 FD 81         sgu ; > (unsigned)
3043   17A7 E4            pop a
3044   17A8             ; END RELATIONAL
3045   17A8 C0 00 00      cmp b, 0
3046   17AB C6 F5 17      je _while46_exit
3047   17AE             _while46_block:
3048   17AE             ; digits[i] = '0' + (num % 10); 
3049   17AE FA FC FF      lea d, [bp + -4] ; $digits
3050   17B1 D7            push a
3051   17B2 DA            push d
3052   17B3 FA FA FF      lea d, [bp + -6] ; $i
3053   17B6 2A            mov b, [d]
3054   17B7 E7            pop d
3055   17B8 5A            add d, b
3056   17B9 E4            pop a
3057   17BA DA            push d
3058   17BB 26 30 00      mov b, $30
3059   17BE             ; START TERMS
3060   17BE D7            push a
3061   17BF 11            mov a, b
3062   17C0 FA 07 00      lea d, [bp + 7] ; $num
3063   17C3 2A            mov b, [d]
3064   17C4             ; START FACTORS
3065   17C4 D7            push a
3066   17C5 11            mov a, b
3067   17C6 26 0A 00      mov b, $a
3068   17C9 AE            div a, b ; 
3069   17CA 11            mov a, b
3070   17CB 27            mov b, a
3071   17CC E4            pop a
3072   17CD             ; END FACTORS
3073   17CD 56            add b, a
3074   17CE E4            pop a
3075   17CF             ; END TERMS
3076   17CF E7            pop d
3077   17D0 FD 3E         mov [d], bl
3078   17D2             ; num = num / 10; 
3079   17D2 FA 07 00      lea d, [bp + 7] ; $num
3080   17D5 DA            push d
3081   17D6 FA 07 00      lea d, [bp + 7] ; $num
3082   17D9 2A            mov b, [d]
3083   17DA             ; START FACTORS
3084   17DA D7            push a
3085   17DB 11            mov a, b
3086   17DC 26 0A 00      mov b, $a
3087   17DF AE            div a, b
3088   17E0 27            mov b, a
3089   17E1 E4            pop a
3090   17E2             ; END FACTORS
3091   17E2 E7            pop d
3092   17E3 FD 43         mov [d], b
3093   17E5             ; i++; 
3094   17E5 FA FA FF      lea d, [bp + -6] ; $i
3095   17E8 2A            mov b, [d]
3096   17E9 FD 77         inc b
3097   17EB FA FA FF      lea d, [bp + -6] ; $i
3098   17EE FD 43         mov [d], b
3099   17F0 FD 7D         dec b
3100   17F2 0A 9B 17      jmp _while46_cond
3101   17F5             _while46_exit:
3102   17F5             ; while (i > 0) { 
3103   17F5             _while47_cond:
3104   17F5 FA FA FF      lea d, [bp + -6] ; $i
3105   17F8 2A            mov b, [d]
3106   17F9             ; START RELATIONAL
3107   17F9 D7            push a
3108   17FA 11            mov a, b
3109   17FB 26 00 00      mov b, $0
3110   17FE B0            cmp a, b
3111   17FF FD 7F         sgt ; >
3112   1801 E4            pop a
3113   1802             ; END RELATIONAL
3114   1802 C0 00 00      cmp b, 0
3115   1805 C6 45 18      je _while47_exit
3116   1808             _while47_block:
3117   1808             ; i--; 
3118   1808 FA FA FF      lea d, [bp + -6] ; $i
3119   180B 2A            mov b, [d]
3120   180C FD 7D         dec b
3121   180E FA FA FF      lea d, [bp + -6] ; $i
3122   1811 FD 43         mov [d], b
3123   1813 FD 77         inc b
3124   1815             ; *dest++ = digits[i]; 
3125   1815 FA 05 00      lea d, [bp + 5] ; $dest
3126   1818 2A            mov b, [d]
3127   1819 FD 77         inc b
3128   181B FA 05 00      lea d, [bp + 5] ; $dest
3129   181E FD 43         mov [d], b
3130   1820 FD 7D         dec b
3131   1822 D8            push b
3132   1823 FA FC FF      lea d, [bp + -4] ; $digits
3133   1826 D7            push a
3134   1827 DA            push d
3135   1828 FA FA FF      lea d, [bp + -6] ; $i
3136   182B 2A            mov b, [d]
3137   182C E7            pop d
3138   182D 5A            add d, b
3139   182E E4            pop a
3140   182F 32            mov bl, [d]
3141   1830 A7 00         mov bh, 0
3142   1832 E7            pop d
3143   1833 FD 3E         mov [d], bl
3144   1835             ; len++; 
3145   1835 FA F8 FF      lea d, [bp + -8] ; $len
3146   1838 2A            mov b, [d]
3147   1839 FD 77         inc b
3148   183B FA F8 FF      lea d, [bp + -8] ; $len
3149   183E FD 43         mov [d], b
3150   1840 FD 7D         dec b
3151   1842 0A F5 17      jmp _while47_cond
3152   1845             _while47_exit:
3153   1845             ; *dest = '\0'; 
3154   1845 FA 05 00      lea d, [bp + 5] ; $dest
3155   1848 2A            mov b, [d]
3156   1849 D8            push b
3157   184A 26 00 00      mov b, $0
3158   184D E7            pop d
3159   184E FD 3E         mov [d], bl
3160   1850             ; return len; 
3161   1850 FA F8 FF      lea d, [bp + -8] ; $len
3162   1853 2A            mov b, [d]
3163   1854 F9            leave
3164   1855 09            ret
3165   1856             
3166   1856             print_unsigned:
3167   1856 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3168   1859             ; char digits[5]; 
3169   1859 52 05 00      sub sp, 5
3170   185C             ; int i; 
3171   185C 52 02 00      sub sp, 2
3172   185F             ; i = 0; 
3173   185F FA FA FF      lea d, [bp + -6] ; $i
3174   1862 DA            push d
3175   1863 26 00 00      mov b, $0
3176   1866 E7            pop d
3177   1867 FD 43         mov [d], b
3178   1869             ; if(num == 0){ 
3179   1869             _if48_cond:
3180   1869 FA 05 00      lea d, [bp + 5] ; $num
3181   186C 2A            mov b, [d]
3182   186D             ; START RELATIONAL
3183   186D D7            push a
3184   186E 11            mov a, b
3185   186F 26 00 00      mov b, $0
3186   1872 B0            cmp a, b
3187   1873 FD 71         seq ; ==
3188   1875 E4            pop a
3189   1876             ; END RELATIONAL
3190   1876 C0 00 00      cmp b, 0
3191   1879 C6 8B 18      je _if48_exit
3192   187C             _if48_true:
3193   187C             ; putchar('0'); 
3194   187C 26 30 00      mov b, $30
3195   187F DD            push bl
3196   1880 07 82 1A      call putchar
3197   1883 51 01 00      add sp, 1
3198   1886             ; return; 
3199   1886 F9            leave
3200   1887 09            ret
3201   1888 0A 8B 18      jmp _if48_exit
3202   188B             _if48_exit:
3203   188B             ; while (num > 0) { 
3204   188B             _while49_cond:
3205   188B FA 05 00      lea d, [bp + 5] ; $num
3206   188E 2A            mov b, [d]
3207   188F             ; START RELATIONAL
3208   188F D7            push a
3209   1890 11            mov a, b
3210   1891 26 00 00      mov b, $0
3211   1894 B0            cmp a, b
3212   1895 FD 81         sgu ; > (unsigned)
3213   1897 E4            pop a
3214   1898             ; END RELATIONAL
3215   1898 C0 00 00      cmp b, 0
3216   189B C6 E5 18      je _while49_exit
3217   189E             _while49_block:
3218   189E             ; digits[i] = '0' + (num % 10); 
3219   189E FA FC FF      lea d, [bp + -4] ; $digits
3220   18A1 D7            push a
3221   18A2 DA            push d
3222   18A3 FA FA FF      lea d, [bp + -6] ; $i
3223   18A6 2A            mov b, [d]
3224   18A7 E7            pop d
3225   18A8 5A            add d, b
3226   18A9 E4            pop a
3227   18AA DA            push d
3228   18AB 26 30 00      mov b, $30
3229   18AE             ; START TERMS
3230   18AE D7            push a
3231   18AF 11            mov a, b
3232   18B0 FA 05 00      lea d, [bp + 5] ; $num
3233   18B3 2A            mov b, [d]
3234   18B4             ; START FACTORS
3235   18B4 D7            push a
3236   18B5 11            mov a, b
3237   18B6 26 0A 00      mov b, $a
3238   18B9 AE            div a, b ; 
3239   18BA 11            mov a, b
3240   18BB 27            mov b, a
3241   18BC E4            pop a
3242   18BD             ; END FACTORS
3243   18BD 56            add b, a
3244   18BE E4            pop a
3245   18BF             ; END TERMS
3246   18BF E7            pop d
3247   18C0 FD 3E         mov [d], bl
3248   18C2             ; num = num / 10; 
3249   18C2 FA 05 00      lea d, [bp + 5] ; $num
3250   18C5 DA            push d
3251   18C6 FA 05 00      lea d, [bp + 5] ; $num
3252   18C9 2A            mov b, [d]
3253   18CA             ; START FACTORS
3254   18CA D7            push a
3255   18CB 11            mov a, b
3256   18CC 26 0A 00      mov b, $a
3257   18CF AE            div a, b
3258   18D0 27            mov b, a
3259   18D1 E4            pop a
3260   18D2             ; END FACTORS
3261   18D2 E7            pop d
3262   18D3 FD 43         mov [d], b
3263   18D5             ; i++; 
3264   18D5 FA FA FF      lea d, [bp + -6] ; $i
3265   18D8 2A            mov b, [d]
3266   18D9 FD 77         inc b
3267   18DB FA FA FF      lea d, [bp + -6] ; $i
3268   18DE FD 43         mov [d], b
3269   18E0 FD 7D         dec b
3270   18E2 0A 8B 18      jmp _while49_cond
3271   18E5             _while49_exit:
3272   18E5             ; while (i > 0) { 
3273   18E5             _while50_cond:
3274   18E5 FA FA FF      lea d, [bp + -6] ; $i
3275   18E8 2A            mov b, [d]
3276   18E9             ; START RELATIONAL
3277   18E9 D7            push a
3278   18EA 11            mov a, b
3279   18EB 26 00 00      mov b, $0
3280   18EE B0            cmp a, b
3281   18EF FD 7F         sgt ; >
3282   18F1 E4            pop a
3283   18F2             ; END RELATIONAL
3284   18F2 C0 00 00      cmp b, 0
3285   18F5 C6 1E 19      je _while50_exit
3286   18F8             _while50_block:
3287   18F8             ; i--; 
3288   18F8 FA FA FF      lea d, [bp + -6] ; $i
3289   18FB 2A            mov b, [d]
3290   18FC FD 7D         dec b
3291   18FE FA FA FF      lea d, [bp + -6] ; $i
3292   1901 FD 43         mov [d], b
3293   1903 FD 77         inc b
3294   1905             ; putchar(digits[i]); 
3295   1905 FA FC FF      lea d, [bp + -4] ; $digits
3296   1908 D7            push a
3297   1909 DA            push d
3298   190A FA FA FF      lea d, [bp + -6] ; $i
3299   190D 2A            mov b, [d]
3300   190E E7            pop d
3301   190F 5A            add d, b
3302   1910 E4            pop a
3303   1911 32            mov bl, [d]
3304   1912 A7 00         mov bh, 0
3305   1914 DD            push bl
3306   1915 07 82 1A      call putchar
3307   1918 51 01 00      add sp, 1
3308   191B 0A E5 18      jmp _while50_cond
3309   191E             _while50_exit:
3310   191E F9            leave
3311   191F 09            ret
3312   1920             
3313   1920             sprint_signed:
3314   1920 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3315   1923             ; char digits[5]; 
3316   1923 52 05 00      sub sp, 5
3317   1926             ; int i = 0; 
3318   1926 52 02 00      sub sp, 2
3319   1929             ; --- START LOCAL VAR INITIALIZATION
3320   1929 FA FA FF      lea d, [bp + -6] ; $i
3321   192C DA            push d
3322   192D 26 00 00      mov b, $0
3323   1930 E7            pop d
3324   1931 FD 43         mov [d], b
3325   1933             ; --- END LOCAL VAR INITIALIZATION
3326   1933             ; int len = 0; 
3327   1933 52 02 00      sub sp, 2
3328   1936             ; --- START LOCAL VAR INITIALIZATION
3329   1936 FA F8 FF      lea d, [bp + -8] ; $len
3330   1939 DA            push d
3331   193A 26 00 00      mov b, $0
3332   193D E7            pop d
3333   193E FD 43         mov [d], b
3334   1940             ; --- END LOCAL VAR INITIALIZATION
3335   1940             ; if (num < 0) { 
3336   1940             _if51_cond:
3337   1940 FA 07 00      lea d, [bp + 7] ; $num
3338   1943 2A            mov b, [d]
3339   1944             ; START RELATIONAL
3340   1944 D7            push a
3341   1945 11            mov a, b
3342   1946 26 00 00      mov b, $0
3343   1949 B0            cmp a, b
3344   194A FD 73         slt ; < (signed)
3345   194C E4            pop a
3346   194D             ; END RELATIONAL
3347   194D C0 00 00      cmp b, 0
3348   1950 C6 84 19      je _if51_else
3349   1953             _if51_true:
3350   1953             ; *dest++ = '-'; 
3351   1953 FA 05 00      lea d, [bp + 5] ; $dest
3352   1956 2A            mov b, [d]
3353   1957 FD 77         inc b
3354   1959 FA 05 00      lea d, [bp + 5] ; $dest
3355   195C FD 43         mov [d], b
3356   195E FD 7D         dec b
3357   1960 D8            push b
3358   1961 26 2D 00      mov b, $2d
3359   1964 E7            pop d
3360   1965 FD 3E         mov [d], bl
3361   1967             ; num = -num; 
3362   1967 FA 07 00      lea d, [bp + 7] ; $num
3363   196A DA            push d
3364   196B FA 07 00      lea d, [bp + 7] ; $num
3365   196E 2A            mov b, [d]
3366   196F FD 97         neg b
3367   1971 E7            pop d
3368   1972 FD 43         mov [d], b
3369   1974             ; len++; 
3370   1974 FA F8 FF      lea d, [bp + -8] ; $len
3371   1977 2A            mov b, [d]
3372   1978 FD 77         inc b
3373   197A FA F8 FF      lea d, [bp + -8] ; $len
3374   197D FD 43         mov [d], b
3375   197F FD 7D         dec b
3376   1981 0A BE 19      jmp _if51_exit
3377   1984             _if51_else:
3378   1984             ; if (num == 0) { 
3379   1984             _if52_cond:
3380   1984 FA 07 00      lea d, [bp + 7] ; $num
3381   1987 2A            mov b, [d]
3382   1988             ; START RELATIONAL
3383   1988 D7            push a
3384   1989 11            mov a, b
3385   198A 26 00 00      mov b, $0
3386   198D B0            cmp a, b
3387   198E FD 71         seq ; ==
3388   1990 E4            pop a
3389   1991             ; END RELATIONAL
3390   1991 C0 00 00      cmp b, 0
3391   1994 C6 BE 19      je _if52_exit
3392   1997             _if52_true:
3393   1997             ; *dest++ = '0'; 
3394   1997 FA 05 00      lea d, [bp + 5] ; $dest
3395   199A 2A            mov b, [d]
3396   199B FD 77         inc b
3397   199D FA 05 00      lea d, [bp + 5] ; $dest
3398   19A0 FD 43         mov [d], b
3399   19A2 FD 7D         dec b
3400   19A4 D8            push b
3401   19A5 26 30 00      mov b, $30
3402   19A8 E7            pop d
3403   19A9 FD 3E         mov [d], bl
3404   19AB             ; *dest = '\0'; 
3405   19AB FA 05 00      lea d, [bp + 5] ; $dest
3406   19AE 2A            mov b, [d]
3407   19AF D8            push b
3408   19B0 26 00 00      mov b, $0
3409   19B3 E7            pop d
3410   19B4 FD 3E         mov [d], bl
3411   19B6             ; return 1; 
3412   19B6 26 01 00      mov b, $1
3413   19B9 F9            leave
3414   19BA 09            ret
3415   19BB 0A BE 19      jmp _if52_exit
3416   19BE             _if52_exit:
3417   19BE             _if51_exit:
3418   19BE             ; while (num > 0) { 
3419   19BE             _while53_cond:
3420   19BE FA 07 00      lea d, [bp + 7] ; $num
3421   19C1 2A            mov b, [d]
3422   19C2             ; START RELATIONAL
3423   19C2 D7            push a
3424   19C3 11            mov a, b
3425   19C4 26 00 00      mov b, $0
3426   19C7 B0            cmp a, b
3427   19C8 FD 7F         sgt ; >
3428   19CA E4            pop a
3429   19CB             ; END RELATIONAL
3430   19CB C0 00 00      cmp b, 0
3431   19CE C6 18 1A      je _while53_exit
3432   19D1             _while53_block:
3433   19D1             ; digits[i] = '0' + (num % 10); 
3434   19D1 FA FC FF      lea d, [bp + -4] ; $digits
3435   19D4 D7            push a
3436   19D5 DA            push d
3437   19D6 FA FA FF      lea d, [bp + -6] ; $i
3438   19D9 2A            mov b, [d]
3439   19DA E7            pop d
3440   19DB 5A            add d, b
3441   19DC E4            pop a
3442   19DD DA            push d
3443   19DE 26 30 00      mov b, $30
3444   19E1             ; START TERMS
3445   19E1 D7            push a
3446   19E2 11            mov a, b
3447   19E3 FA 07 00      lea d, [bp + 7] ; $num
3448   19E6 2A            mov b, [d]
3449   19E7             ; START FACTORS
3450   19E7 D7            push a
3451   19E8 11            mov a, b
3452   19E9 26 0A 00      mov b, $a
3453   19EC AE            div a, b ; 
3454   19ED 11            mov a, b
3455   19EE 27            mov b, a
3456   19EF E4            pop a
3457   19F0             ; END FACTORS
3458   19F0 56            add b, a
3459   19F1 E4            pop a
3460   19F2             ; END TERMS
3461   19F2 E7            pop d
3462   19F3 FD 3E         mov [d], bl
3463   19F5             ; num = num / 10; 
3464   19F5 FA 07 00      lea d, [bp + 7] ; $num
3465   19F8 DA            push d
3466   19F9 FA 07 00      lea d, [bp + 7] ; $num
3467   19FC 2A            mov b, [d]
3468   19FD             ; START FACTORS
3469   19FD D7            push a
3470   19FE 11            mov a, b
3471   19FF 26 0A 00      mov b, $a
3472   1A02 AE            div a, b
3473   1A03 27            mov b, a
3474   1A04 E4            pop a
3475   1A05             ; END FACTORS
3476   1A05 E7            pop d
3477   1A06 FD 43         mov [d], b
3478   1A08             ; i++; 
3479   1A08 FA FA FF      lea d, [bp + -6] ; $i
3480   1A0B 2A            mov b, [d]
3481   1A0C FD 77         inc b
3482   1A0E FA FA FF      lea d, [bp + -6] ; $i
3483   1A11 FD 43         mov [d], b
3484   1A13 FD 7D         dec b
3485   1A15 0A BE 19      jmp _while53_cond
3486   1A18             _while53_exit:
3487   1A18             ; while (i > 0) { 
3488   1A18             _while54_cond:
3489   1A18 FA FA FF      lea d, [bp + -6] ; $i
3490   1A1B 2A            mov b, [d]
3491   1A1C             ; START RELATIONAL
3492   1A1C D7            push a
3493   1A1D 11            mov a, b
3494   1A1E 26 00 00      mov b, $0
3495   1A21 B0            cmp a, b
3496   1A22 FD 7F         sgt ; >
3497   1A24 E4            pop a
3498   1A25             ; END RELATIONAL
3499   1A25 C0 00 00      cmp b, 0
3500   1A28 C6 68 1A      je _while54_exit
3501   1A2B             _while54_block:
3502   1A2B             ; i--; 
3503   1A2B FA FA FF      lea d, [bp + -6] ; $i
3504   1A2E 2A            mov b, [d]
3505   1A2F FD 7D         dec b
3506   1A31 FA FA FF      lea d, [bp + -6] ; $i
3507   1A34 FD 43         mov [d], b
3508   1A36 FD 77         inc b
3509   1A38             ; *dest++ = digits[i]; 
3510   1A38 FA 05 00      lea d, [bp + 5] ; $dest
3511   1A3B 2A            mov b, [d]
3512   1A3C FD 77         inc b
3513   1A3E FA 05 00      lea d, [bp + 5] ; $dest
3514   1A41 FD 43         mov [d], b
3515   1A43 FD 7D         dec b
3516   1A45 D8            push b
3517   1A46 FA FC FF      lea d, [bp + -4] ; $digits
3518   1A49 D7            push a
3519   1A4A DA            push d
3520   1A4B FA FA FF      lea d, [bp + -6] ; $i
3521   1A4E 2A            mov b, [d]
3522   1A4F E7            pop d
3523   1A50 5A            add d, b
3524   1A51 E4            pop a
3525   1A52 32            mov bl, [d]
3526   1A53 A7 00         mov bh, 0
3527   1A55 E7            pop d
3528   1A56 FD 3E         mov [d], bl
3529   1A58             ; len++; 
3530   1A58 FA F8 FF      lea d, [bp + -8] ; $len
3531   1A5B 2A            mov b, [d]
3532   1A5C FD 77         inc b
3533   1A5E FA F8 FF      lea d, [bp + -8] ; $len
3534   1A61 FD 43         mov [d], b
3535   1A63 FD 7D         dec b
3536   1A65 0A 18 1A      jmp _while54_cond
3537   1A68             _while54_exit:
3538   1A68             ; *dest = '\0'; 
3539   1A68 FA 05 00      lea d, [bp + 5] ; $dest
3540   1A6B 2A            mov b, [d]
3541   1A6C D8            push b
3542   1A6D 26 00 00      mov b, $0
3543   1A70 E7            pop d
3544   1A71 FD 3E         mov [d], bl
3545   1A73             ; return len; 
3546   1A73 FA F8 FF      lea d, [bp + -8] ; $len
3547   1A76 2A            mov b, [d]
3548   1A77 F9            leave
3549   1A78 09            ret
3550   1A79             
3551   1A79             date:
3552   1A79 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3553   1A7C             
3554   1A7C             ; --- BEGIN INLINE ASM BLOCK
3555   1A7C 19 00         mov al, 0 
3556   1A7E 05 07         syscall sys_datetime
3557   1A80             ; --- END INLINE ASM BLOCK
3558   1A80             
3559   1A80 F9            leave
3560   1A81 09            ret
3561   1A82             
3562   1A82             putchar:
3563   1A82 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3564   1A85             
3565   1A85             ; --- BEGIN INLINE ASM BLOCK
3566   1A85 FA 05 00      lea d, [bp + 5] ; $c
3567   1A88 1E            mov al, [d]
3568   1A89 23            mov ah, al
3569   1A8A 07 13 1C      call _putchar
3570   1A8D             ; --- END INLINE ASM BLOCK
3571   1A8D             
3572   1A8D F9            leave
3573   1A8E 09            ret
3574   1A8F             
3575   1A8F             getchar:
3576   1A8F F8 00 00      enter 0 ; (push bp; mov bp, sp)
3577   1A92             ; char c; 
3578   1A92 52 01 00      sub sp, 1
3579   1A95             
3580   1A95             ; --- BEGIN INLINE ASM BLOCK
3581   1A95 07 0C 1C      call getch
3582   1A98 1A            mov al, ah
3583   1A99 FA 00 00      lea d, [bp + 0] ; $c
3584   1A9C 3E            mov [d], al
3585   1A9D             ; --- END INLINE ASM BLOCK
3586   1A9D             
3587   1A9D             ; return c; 
3588   1A9D FA 00 00      lea d, [bp + 0] ; $c
3589   1AA0 32            mov bl, [d]
3590   1AA1 A7 00         mov bh, 0
3591   1AA3 F9            leave
3592   1AA4 09            ret
3593   1AA5             
3594   1AA5             scann:
3595   1AA5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3596   1AA8             ; int m; 
3597   1AA8 52 02 00      sub sp, 2
3598   1AAB             
3599   1AAB             ; --- BEGIN INLINE ASM BLOCK
3600   1AAB 07 57 1E      call scan_u16d
3601   1AAE FA FF FF      lea d, [bp + -1] ; $m
3602   1AB1 43            mov [d], a
3603   1AB2             ; --- END INLINE ASM BLOCK
3604   1AB2             
3605   1AB2             ; return m; 
3606   1AB2 FA FF FF      lea d, [bp + -1] ; $m
3607   1AB5 2A            mov b, [d]
3608   1AB6 F9            leave
3609   1AB7 09            ret
3610   1AB8             
3611   1AB8             puts:
3612   1AB8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3613   1ABB             
3614   1ABB             ; --- BEGIN INLINE ASM BLOCK
3615   1ABB FA 05 00      lea d, [bp + 5] ; $s
3616   1ABE 15            mov a, [d]
3617   1ABF 3C            mov d, a
3618   1AC0 07 5D 1D      call _puts
3619   1AC3 10 00 0A      mov a, $0A00
3620   1AC6 05 03         syscall sys_io
3621   1AC8             ; --- END INLINE ASM BLOCK
3622   1AC8             
3623   1AC8 F9            leave
3624   1AC9 09            ret
3625   1ACA             
3626   1ACA             print:
3627   1ACA F8 00 00      enter 0 ; (push bp; mov bp, sp)
3628   1ACD             
3629   1ACD             ; --- BEGIN INLINE ASM BLOCK
3630   1ACD FA 05 00      lea d, [bp + 5] ; $s
3631   1AD0 FD 2A         mov d, [d]
3632   1AD2 07 5D 1D      call _puts
3633   1AD5             ; --- END INLINE ASM BLOCK
3634   1AD5             
3635   1AD5 F9            leave
3636   1AD6 09            ret
3637   1AD7             
3638   1AD7             getparam:
3639   1AD7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3640   1ADA             ; char data; 
3641   1ADA 52 01 00      sub sp, 1
3642   1ADD             
3643   1ADD             ; --- BEGIN INLINE ASM BLOCK
3644   1ADD 19 04         mov al, 4
3645   1ADF FA 05 00      lea d, [bp + 5] ; $address
3646   1AE2 FD 2A         mov d, [d]
3647   1AE4 05 0C         syscall sys_system
3648   1AE6 FA 00 00      lea d, [bp + 0] ; $data
3649   1AE9 FD 3E         mov [d], bl
3650   1AEB             ; --- END INLINE ASM BLOCK
3651   1AEB             
3652   1AEB             ; return data; 
3653   1AEB FA 00 00      lea d, [bp + 0] ; $data
3654   1AEE 32            mov bl, [d]
3655   1AEF A7 00         mov bh, 0
3656   1AF1 F9            leave
3657   1AF2 09            ret
3658   1AF3             
3659   1AF3             clear:
3660   1AF3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3661   1AF6             ; print("\033[2J\033[H"); 
3662   1AF6 26 E9 6B      mov b, _s32 ; "\033[2J\033[H"
3663   1AF9 FD AB         swp b
3664   1AFB D8            push b
3665   1AFC 07 CA 1A      call print
3666   1AFF 51 02 00      add sp, 2
3667   1B02 F9            leave
3668   1B03 09            ret
3669   1B04             
3670   1B04             abs:
3671   1B04 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3672   1B07             ; return i < 0 ? -i : i; 
3673   1B07             _ternary55_cond:
3674   1B07 FA 05 00      lea d, [bp + 5] ; $i
3675   1B0A 2A            mov b, [d]
3676   1B0B             ; START RELATIONAL
3677   1B0B D7            push a
3678   1B0C 11            mov a, b
3679   1B0D 26 00 00      mov b, $0
3680   1B10 B0            cmp a, b
3681   1B11 FD 73         slt ; < (signed)
3682   1B13 E4            pop a
3683   1B14             ; END RELATIONAL
3684   1B14 C0 00 00      cmp b, 0
3685   1B17 C6 23 1B      je _ternary55_false
3686   1B1A             _ternary55_true:
3687   1B1A FA 05 00      lea d, [bp + 5] ; $i
3688   1B1D 2A            mov b, [d]
3689   1B1E FD 97         neg b
3690   1B20 0A 27 1B      jmp _ternary55_exit
3691   1B23             _ternary55_false:
3692   1B23 FA 05 00      lea d, [bp + 5] ; $i
3693   1B26 2A            mov b, [d]
3694   1B27             _ternary55_exit:
3695   1B27 F9            leave
3696   1B28 09            ret
3697   1B29             
3698   1B29             include_stdio_asm:
3699   1B29 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3700   1B2C             
3701   1B2C             ; --- BEGIN INLINE ASM BLOCK
3702   1B2C             .include "lib/asm/stdio.asm"
0001+  1B2C             ;-----------------------------------------------------------------------------
0002+  1B2C             ; stdio.s
0003+  1B2C             ;-----------------------------------------------------------------------------
0004+  1B2C             .include "lib/asm/string.asm"
0001++ 1B2C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 1B2C             ; string.s
0003++ 1B2C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 1B2C             
0005++ 1B2C             
0006++ 1B2C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 1B2C             ; _strrev
0008++ 1B2C             ; reverse a string
0009++ 1B2C             ; D = string address
0010++ 1B2C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 1B2C             ; 01234
0012++ 1B2C             _strrev:
0013++ 1B2C 4B          	pusha
0014++ 1B2D 07 73 1B    	call _strlen	; length in C
0015++ 1B30 12          	mov a, c
0016++ 1B31 AF 01 00    	cmp a, 1
0017++ 1B34 D0 4E 1B    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 1B37 7D          	dec a
0019++ 1B38 FD 4E       	mov si, d	; beginning of string
0020++ 1B3A FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 1B3C 59          	add d, a	; end of string
0022++ 1B3D 12          	mov a, c
0023++ 1B3E FD 9B       	shr a		; divide by 2
0024++ 1B40 39          	mov c, a	; C now counts the steps
0025++ 1B41             _strrev_L0:
0026++ 1B41 32          	mov bl, [d]	; save load right-side char into BL
0027++ 1B42 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 1B43 3E          	mov [d], al	; store left char into right side
0029++ 1B44 1B          	mov al, bl
0030++ 1B45 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 1B46 7E          	dec c
0032++ 1B47 7F          	dec d
0033++ 1B48 C2 00 00    	cmp c, 0
0034++ 1B4B C7 41 1B    	jne _strrev_L0
0035++ 1B4E             _strrev_end:
0036++ 1B4E 4C          	popa
0037++ 1B4F 09          	ret
0038++ 1B50             	
0039++ 1B50             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 1B50             ; _strchr
0041++ 1B50             ; search string in D for char in AL
0042++ 1B50             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 1B50             _strchr:
0044++ 1B50             _strchr_L0:
0045++ 1B50 32          	mov bl, [d]
0046++ 1B51 C1 00       	cmp bl, 0
0047++ 1B53 C6 5E 1B    	je _strchr_end
0048++ 1B56 BA          	cmp al, bl
0049++ 1B57 C6 5E 1B    	je _strchr_end
0050++ 1B5A 79          	inc d
0051++ 1B5B 0A 50 1B    	jmp _strchr_L0
0052++ 1B5E             _strchr_end:
0053++ 1B5E 1B          	mov al, bl
0054++ 1B5F 09          	ret
0055++ 1B60             
0056++ 1B60             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 1B60             ; _strstr
0058++ 1B60             ; find sub-string
0059++ 1B60             ; str1 in SI
0060++ 1B60             ; str2 in DI
0061++ 1B60             ; SI points to end of source string
0062++ 1B60             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 1B60             _strstr:
0064++ 1B60 DB          	push al
0065++ 1B61 DA          	push d
0066++ 1B62 E3          	push di
0067++ 1B63             _strstr_loop:
0068++ 1B63 F3          	cmpsb					; compare a byte of the strings
0069++ 1B64 C7 6F 1B    	jne _strstr_ret
0070++ 1B67 FC 00 00    	lea d, [di + 0]
0071++ 1B6A BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 1B6C C7 63 1B    	jne _strstr_loop				; equal chars but not at end
0073++ 1B6F             _strstr_ret:
0074++ 1B6F F0          	pop di
0075++ 1B70 E7          	pop d
0076++ 1B71 E8          	pop al
0077++ 1B72 09          	ret
0078++ 1B73             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1B73             ; length of null terminated string
0080++ 1B73             ; result in C
0081++ 1B73             ; pointer in D
0082++ 1B73             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1B73             _strlen:
0084++ 1B73 DA          	push d
0085++ 1B74 38 00 00    	mov c, 0
0086++ 1B77             _strlen_L1:
0087++ 1B77 BD 00       	cmp byte [d], 0
0088++ 1B79 C6 81 1B    	je _strlen_ret
0089++ 1B7C 79          	inc d
0090++ 1B7D 78          	inc c
0091++ 1B7E 0A 77 1B    	jmp _strlen_L1
0092++ 1B81             _strlen_ret:
0093++ 1B81 E7          	pop d
0094++ 1B82 09          	ret
0095++ 1B83             
0096++ 1B83             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1B83             ; STRCMP
0098++ 1B83             ; compare two strings
0099++ 1B83             ; str1 in SI
0100++ 1B83             ; str2 in DI
0101++ 1B83             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1B83             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1B83             _strcmp:
0104++ 1B83 DB          	push al
0105++ 1B84 DA          	push d
0106++ 1B85 E3          	push di
0107++ 1B86 E2          	push si
0108++ 1B87             _strcmp_loop:
0109++ 1B87 F3          	cmpsb					; compare a byte of the strings
0110++ 1B88 C7 93 1B    	jne _strcmp_ret
0111++ 1B8B FB FF FF    	lea d, [si +- 1]
0112++ 1B8E BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1B90 C7 87 1B    	jne _strcmp_loop				; equal chars but not at end
0114++ 1B93             _strcmp_ret:
0115++ 1B93 EF          	pop si
0116++ 1B94 F0          	pop di
0117++ 1B95 E7          	pop d
0118++ 1B96 E8          	pop al
0119++ 1B97 09          	ret
0120++ 1B98             
0121++ 1B98             
0122++ 1B98             ; STRCPY
0123++ 1B98             ; copy null terminated string from SI to DI
0124++ 1B98             ; source in SI
0125++ 1B98             ; destination in DI
0126++ 1B98             _strcpy:
0127++ 1B98 E2          	push si
0128++ 1B99 E3          	push di
0129++ 1B9A DB          	push al
0130++ 1B9B             _strcpy_L1:
0131++ 1B9B F6          	lodsb
0132++ 1B9C F7          	stosb
0133++ 1B9D B9 00       	cmp al, 0
0134++ 1B9F C7 9B 1B    	jne _strcpy_L1
0135++ 1BA2             _strcpy_end:
0136++ 1BA2 E8          	pop al
0137++ 1BA3 F0          	pop di
0138++ 1BA4 EF          	pop si
0139++ 1BA5 09          	ret
0140++ 1BA6             
0141++ 1BA6             ; STRCAT
0142++ 1BA6             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1BA6             ; source in SI
0144++ 1BA6             ; destination in DI
0145++ 1BA6             _strcat:
0146++ 1BA6 E2          	push si
0147++ 1BA7 E3          	push di
0148++ 1BA8 D7          	push a
0149++ 1BA9 DA          	push d
0150++ 1BAA 50          	mov a, di
0151++ 1BAB 3C          	mov d, a
0152++ 1BAC             _strcat_goto_end_L1:
0153++ 1BAC BD 00       	cmp byte[d], 0
0154++ 1BAE C6 B5 1B    	je _strcat_start
0155++ 1BB1 79          	inc d
0156++ 1BB2 0A AC 1B    	jmp _strcat_goto_end_L1
0157++ 1BB5             _strcat_start:
0158++ 1BB5 FD 50       	mov di, d
0159++ 1BB7             _strcat_L1:
0160++ 1BB7 F6          	lodsb
0161++ 1BB8 F7          	stosb
0162++ 1BB9 B9 00       	cmp al, 0
0163++ 1BBB C7 B7 1B    	jne _strcat_L1
0164++ 1BBE             _strcat_end:
0165++ 1BBE E7          	pop d
0166++ 1BBF E4          	pop a
0167++ 1BC0 F0          	pop di
0168++ 1BC1 EF          	pop si
0169++ 1BC2 09          	ret
0170++ 1BC3             
0171++ 1BC3             
0005+  1BC3             
0006+  1BC3             ;-----------------------------------------------------------------------------
0007+  1BC3             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  1BC3             ; ASCII in BL
0009+  1BC3             ; result in AL
0010+  1BC3             ; ascii for F = 0100 0110
0011+  1BC3             ; ascii for 9 = 0011 1001
0012+  1BC3             ;-----------------------------------------------------------------------------
0013+  1BC3             hex_ascii_encode:
0014+  1BC3 1B            mov al, bl
0015+  1BC4 93 40         test al, $40        ; test if letter or number
0016+  1BC6 C7 CC 1B      jnz hex_letter
0017+  1BC9 87 0F         and al, $0F        ; get number
0018+  1BCB 09            ret
0019+  1BCC             hex_letter:
0020+  1BCC 87 0F         and al, $0F        ; get letter
0021+  1BCE 6A 09         add al, 9
0022+  1BD0 09            ret
0023+  1BD1             
0024+  1BD1             ;-----------------------------------------------------------------------------
0025+  1BD1             ; ATOI
0026+  1BD1             ; 2 letter hex string in B
0027+  1BD1             ; 8bit integer returned in AL
0028+  1BD1             ;-----------------------------------------------------------------------------
0029+  1BD1             _atoi:
0030+  1BD1 D8            push b
0031+  1BD2 07 C3 1B      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  1BD5 30            mov bl, bh
0033+  1BD6 DB            push al          ; save a
0034+  1BD7 07 C3 1B      call hex_ascii_encode
0035+  1BDA EA            pop bl  
0036+  1BDB FD 9E 04      shl al, 4
0037+  1BDE 8C            or al, bl
0038+  1BDF E5            pop b
0039+  1BE0 09            ret  
0040+  1BE1             
0041+  1BE1             
0042+  1BE1             ;-----------------------------------------------------------------------------
0043+  1BE1             ; ITOA
0044+  1BE1             ; 8bit value in BL
0045+  1BE1             ; 2 byte ASCII result in A
0046+  1BE1             ;-----------------------------------------------------------------------------
0047+  1BE1             _itoa:
0048+  1BE1 DA            push d
0049+  1BE2 D8            push b
0050+  1BE3 A7 00         mov bh, 0
0051+  1BE5 FD A4 04      shr bl, 4  
0052+  1BE8 74            mov d, b
0053+  1BE9 1F 91 1E      mov al, [d + s_hex_digits]
0054+  1BEC 23            mov ah, al
0055+  1BED               
0056+  1BED E5            pop b
0057+  1BEE D8            push b
0058+  1BEF A7 00         mov bh, 0
0059+  1BF1 FD 87 0F      and bl, $0F
0060+  1BF4 74            mov d, b
0061+  1BF5 1F 91 1E      mov al, [d + s_hex_digits]
0062+  1BF8 E5            pop b
0063+  1BF9 E7            pop d
0064+  1BFA 09            ret
0065+  1BFB             
0066+  1BFB             ;-----------------------------------------------------------------------------
0067+  1BFB             ; HEX STRING TO BINARY
0068+  1BFB             ; di = destination address
0069+  1BFB             ; si = source
0070+  1BFB             ;-----------------------------------------------------------------------------
0071+  1BFB             _hex_to_int:
0072+  1BFB             _hex_to_int_L1:
0073+  1BFB F6            lodsb          ; load from [SI] to AL
0074+  1BFC B9 00         cmp al, 0        ; check if ASCII 0
0075+  1BFE C6 0B 1C      jz _hex_to_int_ret
0076+  1C01 36            mov bh, al
0077+  1C02 F6            lodsb
0078+  1C03 2F            mov bl, al
0079+  1C04 07 D1 1B      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  1C07 F7            stosb          ; store AL to [DI]
0081+  1C08 0A FB 1B      jmp _hex_to_int_L1
0082+  1C0B             _hex_to_int_ret:
0083+  1C0B 09            ret    
0084+  1C0C             
0085+  1C0C             ;-----------------------------------------------------------------------------
0086+  1C0C             ; GETCHAR
0087+  1C0C             ; char in ah
0088+  1C0C             ;-----------------------------------------------------------------------------
0089+  1C0C             getch:
0090+  1C0C DB            push al
0091+  1C0D             getch_retry:
0092+  1C0D 19 01         mov al, 1
0093+  1C0F 05 03         syscall sys_io      ; receive in AH
0094+  1C11 E8            pop al
0095+  1C12 09            ret
0096+  1C13             
0097+  1C13             ;-----------------------------------------------------------------------------
0098+  1C13             ; PUTCHAR
0099+  1C13             ; char in ah
0100+  1C13             ;-----------------------------------------------------------------------------
0101+  1C13             _putchar:
0102+  1C13 D7            push a
0103+  1C14 19 00         mov al, 0
0104+  1C16 05 03         syscall sys_io      ; char in AH
0105+  1C18 E4            pop a
0106+  1C19 09            ret
0107+  1C1A             
0108+  1C1A             ;-----------------------------------------------------------------------------
0109+  1C1A             ;; INPUT A STRING
0110+  1C1A             ;; terminates with null
0111+  1C1A             ;; pointer in D
0112+  1C1A             ;-----------------------------------------------------------------------------
0113+  1C1A             _gets:
0114+  1C1A D7            push a
0115+  1C1B DA            push d
0116+  1C1C             _gets_loop:
0117+  1C1C 19 01         mov al, 1
0118+  1C1E 05 03         syscall sys_io      ; receive in AH
0119+  1C20 B9 00         cmp al, 0        ; check error code (AL)
0120+  1C22 C6 1C 1C      je _gets_loop      ; if no char received, retry
0121+  1C25             
0122+  1C25 76 1B         cmp ah, 27
0123+  1C27 C6 48 1C      je _gets_ansi_esc
0124+  1C2A 76 0A         cmp ah, $0A        ; LF
0125+  1C2C C6 B3 1C      je _gets_end
0126+  1C2F 76 0D         cmp ah, $0D        ; CR
0127+  1C31 C6 B3 1C      je _gets_end
0128+  1C34 76 5C         cmp ah, $5C        ; '\\'
0129+  1C36 C6 74 1C      je _gets_escape
0130+  1C39               
0131+  1C39 76 08         cmp ah, $08      ; check for backspace
0132+  1C3B C6 44 1C      je _gets_backspace
0133+  1C3E             
0134+  1C3E 1A            mov al, ah
0135+  1C3F 3E            mov [d], al
0136+  1C40 79            inc d
0137+  1C41 0A 1C 1C      jmp _gets_loop
0138+  1C44             _gets_backspace:
0139+  1C44 7F            dec d
0140+  1C45 0A 1C 1C      jmp _gets_loop
0141+  1C48             _gets_ansi_esc:
0142+  1C48 19 01         mov al, 1
0143+  1C4A 05 03         syscall sys_io        ; receive in AH without echo
0144+  1C4C B9 00         cmp al, 0          ; check error code (AL)
0145+  1C4E C6 48 1C      je _gets_ansi_esc    ; if no char received, retry
0146+  1C51 76 5B         cmp ah, '['
0147+  1C53 C7 1C 1C      jne _gets_loop
0148+  1C56             _gets_ansi_esc_2:
0149+  1C56 19 01         mov al, 1
0150+  1C58 05 03         syscall sys_io          ; receive in AH without echo
0151+  1C5A B9 00         cmp al, 0            ; check error code (AL)
0152+  1C5C C6 56 1C      je _gets_ansi_esc_2  ; if no char received, retry
0153+  1C5F 76 44         cmp ah, 'D'
0154+  1C61 C6 6C 1C      je _gets_left_arrow
0155+  1C64 76 43         cmp ah, 'C'
0156+  1C66 C6 70 1C      je _gets_right_arrow
0157+  1C69 0A 1C 1C      jmp _gets_loop
0158+  1C6C             _gets_left_arrow:
0159+  1C6C 7F            dec d
0160+  1C6D 0A 1C 1C      jmp _gets_loop
0161+  1C70             _gets_right_arrow:
0162+  1C70 79            inc d
0163+  1C71 0A 1C 1C      jmp _gets_loop
0164+  1C74             _gets_escape:
0165+  1C74 19 01         mov al, 1
0166+  1C76 05 03         syscall sys_io      ; receive in AH
0167+  1C78 B9 00         cmp al, 0        ; check error code (AL)
0168+  1C7A C6 74 1C      je _gets_escape      ; if no char received, retry
0169+  1C7D 76 6E         cmp ah, 'n'
0170+  1C7F C6 9E 1C      je _gets_LF
0171+  1C82 76 72         cmp ah, 'r'
0172+  1C84 C6 A5 1C      je _gets_CR
0173+  1C87 76 30         cmp ah, '0'
0174+  1C89 C6 AC 1C      je _gets_NULL
0175+  1C8C 76 5C         cmp ah, $5C  ; '\'
0176+  1C8E C6 97 1C      je _gets_slash
0177+  1C91 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  1C92 3E            mov [d], al
0179+  1C93 79            inc d
0180+  1C94 0A 1C 1C      jmp _gets_loop
0181+  1C97             _gets_slash:
0182+  1C97 19 5C         mov al, $5C
0183+  1C99 3E            mov [d], al
0184+  1C9A 79            inc d
0185+  1C9B 0A 1C 1C      jmp _gets_loop
0186+  1C9E             _gets_LF:
0187+  1C9E 19 0A         mov al, $0A
0188+  1CA0 3E            mov [d], al
0189+  1CA1 79            inc d
0190+  1CA2 0A 1C 1C      jmp _gets_loop
0191+  1CA5             _gets_CR:
0192+  1CA5 19 0D         mov al, $0D
0193+  1CA7 3E            mov [d], al
0194+  1CA8 79            inc d
0195+  1CA9 0A 1C 1C      jmp _gets_loop
0196+  1CAC             _gets_NULL:
0197+  1CAC 19 00         mov al, $00
0198+  1CAE 3E            mov [d], al
0199+  1CAF 79            inc d
0200+  1CB0 0A 1C 1C      jmp _gets_loop
0201+  1CB3             _gets_end:
0202+  1CB3 19 00         mov al, 0
0203+  1CB5 3E            mov [d], al        ; terminate string
0204+  1CB6 E7            pop d
0205+  1CB7 E4            pop a
0206+  1CB8 09            ret
0207+  1CB9             
0208+  1CB9             ;-----------------------------------------------------------------------------
0209+  1CB9             ;; INPUT TEXT
0210+  1CB9             ;; terminated with CTRL+D
0211+  1CB9             ;; pointer in D
0212+  1CB9             ;-----------------------------------------------------------------------------
0213+  1CB9             _gettxt:
0214+  1CB9 D7            push a
0215+  1CBA DA            push d
0216+  1CBB             _gettxt_loop:
0217+  1CBB 19 01         mov al, 1
0218+  1CBD 05 03         syscall sys_io      ; receive in AH
0219+  1CBF B9 00         cmp al, 0        ; check error code (AL)
0220+  1CC1 C6 BB 1C      je _gettxt_loop    ; if no char received, retry
0221+  1CC4 76 04         cmp ah, 4      ; EOT
0222+  1CC6 C6 04 1D      je _gettxt_end
0223+  1CC9 76 08         cmp ah, $08      ; check for backspace
0224+  1CCB C6 00 1D      je _gettxt_backspace
0225+  1CCE 76 5C         cmp ah, $5C        ; '\'
0226+  1CD0 C6 D9 1C      je _gettxt_escape
0227+  1CD3 1A            mov al, ah
0228+  1CD4 3E            mov [d], al
0229+  1CD5 79            inc d
0230+  1CD6 0A BB 1C      jmp _gettxt_loop
0231+  1CD9             _gettxt_escape:
0232+  1CD9 19 01         mov al, 1
0233+  1CDB 05 03         syscall sys_io      ; receive in AH
0234+  1CDD B9 00         cmp al, 0        ; check error code (AL)
0235+  1CDF C6 D9 1C      je _gettxt_escape    ; if no char received, retry
0236+  1CE2 76 6E         cmp ah, 'n'
0237+  1CE4 C6 F2 1C      je _gettxt_LF
0238+  1CE7 76 72         cmp ah, 'r'
0239+  1CE9 C6 F9 1C      je _gettxt_CR
0240+  1CEC 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  1CED 3E            mov [d], al
0242+  1CEE 79            inc d
0243+  1CEF 0A BB 1C      jmp _gettxt_loop
0244+  1CF2             _gettxt_LF:
0245+  1CF2 19 0A         mov al, $0A
0246+  1CF4 3E            mov [d], al
0247+  1CF5 79            inc d
0248+  1CF6 0A BB 1C      jmp _gettxt_loop
0249+  1CF9             _gettxt_CR:
0250+  1CF9 19 0D         mov al, $0D
0251+  1CFB 3E            mov [d], al
0252+  1CFC 79            inc d
0253+  1CFD 0A BB 1C      jmp _gettxt_loop
0254+  1D00             _gettxt_backspace:
0255+  1D00 7F            dec d
0256+  1D01 0A BB 1C      jmp _gettxt_loop
0257+  1D04             _gettxt_end:
0258+  1D04 19 00         mov al, 0
0259+  1D06 3E            mov [d], al        ; terminate string
0260+  1D07 E7            pop d
0261+  1D08 E4            pop a
0262+  1D09 09            ret
0263+  1D0A             
0264+  1D0A             ;-----------------------------------------------------------------------------
0265+  1D0A             ; PRINT NEW LINE
0266+  1D0A             ;-----------------------------------------------------------------------------
0267+  1D0A             printnl:
0268+  1D0A D7            push a
0269+  1D0B 10 00 0A      mov a, $0A00
0270+  1D0E 05 03         syscall sys_io
0271+  1D10 10 00 0D      mov a, $0D00
0272+  1D13 05 03         syscall sys_io
0273+  1D15 E4            pop a
0274+  1D16 09            ret
0275+  1D17             
0276+  1D17             ;-----------------------------------------------------------------------------
0277+  1D17             ; _strtoint
0278+  1D17             ; 4 digit hex string number in d
0279+  1D17             ; integer returned in A
0280+  1D17             ;-----------------------------------------------------------------------------
0281+  1D17             _strtointx:
0282+  1D17 D8            push b
0283+  1D18 32            mov bl, [d]
0284+  1D19 37            mov bh, bl
0285+  1D1A 33 01 00      mov bl, [d + 1]
0286+  1D1D 07 D1 1B      call _atoi        ; convert to int in AL
0287+  1D20 23            mov ah, al        ; move to AH
0288+  1D21 33 02 00      mov bl, [d + 2]
0289+  1D24 37            mov bh, bl
0290+  1D25 33 03 00      mov bl, [d + 3]
0291+  1D28 07 D1 1B      call _atoi        ; convert to int in AL
0292+  1D2B E5            pop b
0293+  1D2C 09            ret
0294+  1D2D             
0295+  1D2D             ;-----------------------------------------------------------------------------
0296+  1D2D             ; _strtoint
0297+  1D2D             ; 5 digit base10 string number in d
0298+  1D2D             ; integer returned in A
0299+  1D2D             ;-----------------------------------------------------------------------------
0300+  1D2D             _strtoint:
0301+  1D2D E2            push si
0302+  1D2E D8            push b
0303+  1D2F D9            push c
0304+  1D30 DA            push d
0305+  1D31 07 73 1B      call _strlen      ; get string length in C
0306+  1D34 7E            dec c
0307+  1D35 FD 4E         mov si, d
0308+  1D37 12            mov a, c
0309+  1D38 FD 99         shl a
0310+  1D3A 3B A9 1E      mov d, table_power
0311+  1D3D 59            add d, a
0312+  1D3E 38 00 00      mov c, 0
0313+  1D41             _strtoint_L0:
0314+  1D41 F6            lodsb      ; load ASCII to al
0315+  1D42 B9 00         cmp al, 0
0316+  1D44 C6 57 1D      je _strtoint_end
0317+  1D47 6F 30         sub al, $30    ; make into integer
0318+  1D49 22 00         mov ah, 0
0319+  1D4B 2A            mov b, [d]
0320+  1D4C AC            mul a, b      ; result in B since it fits in 16bits
0321+  1D4D 11            mov a, b
0322+  1D4E 28            mov b, c
0323+  1D4F 54            add a, b
0324+  1D50 39            mov c, a
0325+  1D51 63 02 00      sub d, 2
0326+  1D54 0A 41 1D      jmp _strtoint_L0
0327+  1D57             _strtoint_end:
0328+  1D57 12            mov a, c
0329+  1D58 E7            pop d
0330+  1D59 E6            pop c
0331+  1D5A E5            pop b
0332+  1D5B EF            pop si
0333+  1D5C 09            ret
0334+  1D5D             
0335+  1D5D             ;-----------------------------------------------------------------------------
0336+  1D5D             ; PRINT NULL TERMINATED STRING
0337+  1D5D             ; pointer in D
0338+  1D5D             ;-----------------------------------------------------------------------------
0339+  1D5D             _puts:
0340+  1D5D D7            push a
0341+  1D5E DA            push d
0342+  1D5F             _puts_L1:
0343+  1D5F 1E            mov al, [d]
0344+  1D60 B9 00         cmp al, 0
0345+  1D62 C6 6E 1D      jz _puts_END
0346+  1D65 23            mov ah, al
0347+  1D66 19 00         mov al, 0
0348+  1D68 05 03         syscall sys_io
0349+  1D6A 79            inc d
0350+  1D6B 0A 5F 1D      jmp _puts_L1
0351+  1D6E             _puts_END:
0352+  1D6E E7            pop d
0353+  1D6F E4            pop a
0354+  1D70 09            ret
0355+  1D71             
0356+  1D71             ;-----------------------------------------------------------------------------
0357+  1D71             ; PRINT N SIZE STRING
0358+  1D71             ; pointer in D
0359+  1D71             ; size in C
0360+  1D71             ;-----------------------------------------------------------------------------
0361+  1D71             _putsn:
0362+  1D71 DB            push al
0363+  1D72 DA            push d
0364+  1D73 D9            push c
0365+  1D74             _putsn_L0:
0366+  1D74 1E            mov al, [d]
0367+  1D75 23            mov ah, al
0368+  1D76 19 00         mov al, 0
0369+  1D78 05 03         syscall sys_io
0370+  1D7A 79            inc d
0371+  1D7B 7E            dec c  
0372+  1D7C C2 00 00      cmp c, 0
0373+  1D7F C7 74 1D      jne _putsn_L0
0374+  1D82             _putsn_end:
0375+  1D82 E6            pop c
0376+  1D83 E7            pop d
0377+  1D84 E8            pop al
0378+  1D85 09            ret
0379+  1D86             
0380+  1D86             ;-----------------------------------------------------------------------------
0381+  1D86             ; print 16bit decimal number
0382+  1D86             ; input number in A
0383+  1D86             ;-----------------------------------------------------------------------------
0384+  1D86             print_u16d:
0385+  1D86 D7            push a
0386+  1D87 D8            push b
0387+  1D88 26 10 27      mov b, 10000
0388+  1D8B AE            div a, b      ; get 10000's coeff.
0389+  1D8C 07 AE 1D      call print_number
0390+  1D8F 11            mov a, b
0391+  1D90 26 E8 03      mov b, 1000
0392+  1D93 AE            div a, b      ; get 1000's coeff.
0393+  1D94 07 AE 1D      call print_number
0394+  1D97 11            mov a, b
0395+  1D98 26 64 00      mov b, 100
0396+  1D9B AE            div a, b
0397+  1D9C 07 AE 1D      call print_number
0398+  1D9F 11            mov a, b
0399+  1DA0 26 0A 00      mov b, 10
0400+  1DA3 AE            div a, b
0401+  1DA4 07 AE 1D      call print_number
0402+  1DA7 1B            mov al, bl      ; 1's coeff in bl
0403+  1DA8 07 AE 1D      call print_number
0404+  1DAB E5            pop b
0405+  1DAC E4            pop a
0406+  1DAD 09            ret
0407+  1DAE             
0408+  1DAE             ;-----------------------------------------------------------------------------
0409+  1DAE             ; print AL
0410+  1DAE             ;-----------------------------------------------------------------------------
0411+  1DAE             print_number:
0412+  1DAE 6A 30         add al, $30
0413+  1DB0 23            mov ah, al
0414+  1DB1 07 13 1C      call _putchar
0415+  1DB4 09            ret
0416+  1DB5             
0417+  1DB5             ;-----------------------------------------------------------------------------
0418+  1DB5             ; PRINT 16BIT HEX INTEGER
0419+  1DB5             ; integer value in reg B
0420+  1DB5             ;-----------------------------------------------------------------------------
0421+  1DB5             print_u16x:
0422+  1DB5 D7            push a
0423+  1DB6 D8            push b
0424+  1DB7 DD            push bl
0425+  1DB8 30            mov bl, bh
0426+  1DB9 07 E1 1B      call _itoa        ; convert bh to char in A
0427+  1DBC 2F            mov bl, al        ; save al
0428+  1DBD 19 00         mov al, 0
0429+  1DBF 05 03         syscall sys_io        ; display AH
0430+  1DC1 24            mov ah, bl        ; retrieve al
0431+  1DC2 19 00         mov al, 0
0432+  1DC4 05 03         syscall sys_io        ; display AL
0433+  1DC6             
0434+  1DC6 EA            pop bl
0435+  1DC7 07 E1 1B      call _itoa        ; convert bh to char in A
0436+  1DCA 2F            mov bl, al        ; save al
0437+  1DCB 19 00         mov al, 0
0438+  1DCD 05 03         syscall sys_io        ; display AH
0439+  1DCF 24            mov ah, bl        ; retrieve al
0440+  1DD0 19 00         mov al, 0
0441+  1DD2 05 03         syscall sys_io        ; display AL
0442+  1DD4             
0443+  1DD4 E5            pop b
0444+  1DD5 E4            pop a
0445+  1DD6 09            ret
0446+  1DD7             
0447+  1DD7             ;-----------------------------------------------------------------------------
0448+  1DD7             ; INPUT 16BIT HEX INTEGER
0449+  1DD7             ; read 16bit integer into A
0450+  1DD7             ;-----------------------------------------------------------------------------
0451+  1DD7             scan_u16x:
0452+  1DD7 F8 10 00      enter 16
0453+  1DDA D8            push b
0454+  1DDB DA            push d
0455+  1DDC             
0456+  1DDC FA F1 FF      lea d, [bp + -15]
0457+  1DDF 07 1A 1C      call _gets        ; get number
0458+  1DE2             
0459+  1DE2 32            mov bl, [d]
0460+  1DE3 37            mov bh, bl
0461+  1DE4 33 01 00      mov bl, [d + 1]
0462+  1DE7 07 D1 1B      call _atoi        ; convert to int in AL
0463+  1DEA 23            mov ah, al        ; move to AH
0464+  1DEB             
0465+  1DEB 33 02 00      mov bl, [d + 2]
0466+  1DEE 37            mov bh, bl
0467+  1DEF 33 03 00      mov bl, [d + 3]
0468+  1DF2 07 D1 1B      call _atoi        ; convert to int in AL
0469+  1DF5             
0470+  1DF5 E7            pop d
0471+  1DF6 E5            pop b
0472+  1DF7 F9            leave
0473+  1DF8 09            ret
0474+  1DF9             
0475+  1DF9             ;-----------------------------------------------------------------------------
0476+  1DF9             ; PRINT 8bit HEX INTEGER
0477+  1DF9             ; integer value in reg bl
0478+  1DF9             ;-----------------------------------------------------------------------------
0479+  1DF9             print_u8x:
0480+  1DF9 D7            push a
0481+  1DFA DD            push bl
0482+  1DFB             
0483+  1DFB 07 E1 1B      call _itoa        ; convert bl to char in A
0484+  1DFE 2F            mov bl, al        ; save al
0485+  1DFF 19 00         mov al, 0
0486+  1E01 05 03         syscall sys_io        ; display AH
0487+  1E03 24            mov ah, bl        ; retrieve al
0488+  1E04 19 00         mov al, 0
0489+  1E06 05 03         syscall sys_io        ; display AL
0490+  1E08             
0491+  1E08 EA            pop bl
0492+  1E09 E4            pop a
0493+  1E0A 09            ret
0494+  1E0B             
0495+  1E0B             ;-----------------------------------------------------------------------------
0496+  1E0B             ; print 8bit decimal unsigned number
0497+  1E0B             ; input number in AL
0498+  1E0B             ;-----------------------------------------------------------------------------
0499+  1E0B             print_u8d:
0500+  1E0B D7            push a
0501+  1E0C D8            push b
0502+  1E0D             
0503+  1E0D 22 00         mov ah, 0
0504+  1E0F 26 64 00      mov b, 100
0505+  1E12 AE            div a, b
0506+  1E13 D8            push b      ; save remainder
0507+  1E14 B9 00         cmp al, 0
0508+  1E16 C6 20 1E      je skip100
0509+  1E19 6A 30         add al, $30
0510+  1E1B 23            mov ah, al
0511+  1E1C 19 00         mov al, 0
0512+  1E1E 05 03         syscall sys_io  ; print coeff
0513+  1E20             skip100:
0514+  1E20 E4            pop a
0515+  1E21 22 00         mov ah, 0
0516+  1E23 26 0A 00      mov b, 10
0517+  1E26 AE            div a, b
0518+  1E27 D8            push b      ; save remainder
0519+  1E28 B9 00         cmp al, 0
0520+  1E2A C6 34 1E      je skip10
0521+  1E2D 6A 30         add al, $30
0522+  1E2F 23            mov ah, al
0523+  1E30 19 00         mov al, 0
0524+  1E32 05 03         syscall sys_io  ; print coeff
0525+  1E34             skip10:
0526+  1E34 E4            pop a
0527+  1E35 1B            mov al, bl
0528+  1E36 6A 30         add al, $30
0529+  1E38 23            mov ah, al
0530+  1E39 19 00         mov al, 0
0531+  1E3B 05 03         syscall sys_io  ; print coeff
0532+  1E3D E5            pop b
0533+  1E3E E4            pop a
0534+  1E3F 09            ret
0535+  1E40             
0536+  1E40             ;-----------------------------------------------------------------------------
0537+  1E40             ; INPUT 8BIT HEX INTEGER
0538+  1E40             ; read 8bit integer into AL
0539+  1E40             ;-----------------------------------------------------------------------------
0540+  1E40             scan_u8x:
0541+  1E40 F8 04 00      enter 4
0542+  1E43 D8            push b
0543+  1E44 DA            push d
0544+  1E45             
0545+  1E45 FA FD FF      lea d, [bp + -3]
0546+  1E48 07 1A 1C      call _gets        ; get number
0547+  1E4B             
0548+  1E4B 32            mov bl, [d]
0549+  1E4C 37            mov bh, bl
0550+  1E4D 33 01 00      mov bl, [d + 1]
0551+  1E50 07 D1 1B      call _atoi        ; convert to int in AL
0552+  1E53             
0553+  1E53 E7            pop d
0554+  1E54 E5            pop b
0555+  1E55 F9            leave
0556+  1E56 09            ret
0557+  1E57             
0558+  1E57             ;-----------------------------------------------------------------------------
0559+  1E57             ; input decimal number
0560+  1E57             ; result in A
0561+  1E57             ; 655'\0'
0562+  1E57             ; low--------high
0563+  1E57             ;-----------------------------------------------------------------------------
0564+  1E57             scan_u16d:
0565+  1E57 F8 08 00      enter 8
0566+  1E5A E2            push si
0567+  1E5B D8            push b
0568+  1E5C D9            push c
0569+  1E5D DA            push d
0570+  1E5E FA F9 FF      lea d, [bp +- 7]
0571+  1E61 07 1A 1C      call _gets
0572+  1E64 07 73 1B      call _strlen      ; get string length in C
0573+  1E67 7E            dec c
0574+  1E68 FD 4E         mov si, d
0575+  1E6A 12            mov a, c
0576+  1E6B FD 99         shl a
0577+  1E6D 3B A9 1E      mov d, table_power
0578+  1E70 59            add d, a
0579+  1E71 38 00 00      mov c, 0
0580+  1E74             mul_loop:
0581+  1E74 F6            lodsb      ; load ASCII to al
0582+  1E75 B9 00         cmp al, 0
0583+  1E77 C6 8A 1E      je mul_exit
0584+  1E7A 6F 30         sub al, $30    ; make into integer
0585+  1E7C 22 00         mov ah, 0
0586+  1E7E 2A            mov b, [d]
0587+  1E7F AC            mul a, b      ; result in B since it fits in 16bits
0588+  1E80 11            mov a, b
0589+  1E81 28            mov b, c
0590+  1E82 54            add a, b
0591+  1E83 39            mov c, a
0592+  1E84 63 02 00      sub d, 2
0593+  1E87 0A 74 1E      jmp mul_loop
0594+  1E8A             mul_exit:
0595+  1E8A 12            mov a, c
0596+  1E8B E7            pop d
0597+  1E8C E6            pop c
0598+  1E8D E5            pop b
0599+  1E8E EF            pop si
0600+  1E8F F9            leave
0601+  1E90 09            ret
0602+  1E91             
0603+  1E91 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  1E95 34 35 36 37 
0603+  1E99 38 39 41 42 
0603+  1E9D 43 44 45 46 
0604+  1EA1 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  1EA5 1B 5B 48 00 
0605+  1EA9             
0606+  1EA9             table_power:
0607+  1EA9 01 00         .dw 1
0608+  1EAB 0A 00         .dw 10
0609+  1EAD 64 00         .dw 100
0610+  1EAF E8 03         .dw 1000
0611+  1EB1 10 27         .dw 100003703   1EB3             ; --- END INLINE ASM BLOCK
3704   1EB3             
3705   1EB3 F9            leave
3706   1EB4 09            ret
3707   1EB5             
3708   1EB5             include_ctype_lib:
3709   1EB5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3710   1EB8             
3711   1EB8             ; --- BEGIN INLINE ASM BLOCK
3712   1EB8             .include "lib/asm/ctype.asm"
0001+  1EB8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  1EB8             ; ctype.s
0003+  1EB8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  1EB8             
0005+  1EB8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  1EB8             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  1EB8             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  1EB8             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  1EB8             ;; characters are supported.
0010+  1EB8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  1EB8             ;; _isalnum 
0012+  1EB8             ;; _isalpha 
0013+  1EB8             ;; islower 
0014+  1EB8             ;; isupper 
0015+  1EB8             ;; _isdigit 
0016+  1EB8             ;; isxdigit
0017+  1EB8             ;; iscntrl 
0018+  1EB8             ;; isgraph 
0019+  1EB8             ;; _isspace 
0020+  1EB8             ;; isblank 
0021+  1EB8             ;; isprint 
0022+  1EB8             ;; ispunct 
0023+  1EB8             ;; tolower 
0024+  1EB8             ;; toupper
0025+  1EB8             
0026+  1EB8             
0027+  1EB8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  1EB8             ;; IS ALPHANUMERIC
0029+  1EB8             ;; sets ZF according with result
0030+  1EB8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  1EB8             _isalnum:
0032+  1EB8 07 D5 1E    	call _isalpha
0033+  1EBB C6 C1 1E    	je _isalnum_exit
0034+  1EBE 07 C2 1E    	call _isdigit
0035+  1EC1             _isalnum_exit:
0036+  1EC1 09          	ret	
0037+  1EC2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  1EC2             ;; IS DIGIT
0039+  1EC2             ;; sets ZF according with result
0040+  1EC2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  1EC2             _isdigit:
0042+  1EC2 DB          	push al
0043+  1EC3 B9 30       	cmp al, '0'
0044+  1EC5 C8 D1 1E    	jlu _isdigit_false
0045+  1EC8 B9 39       	cmp al, '9'
0046+  1ECA D1 D1 1E    	jgu _isdigit_false
0047+  1ECD 87 00       	and al, 0	; set ZF
0048+  1ECF E8          	pop al
0049+  1ED0 09          	ret
0050+  1ED1             _isdigit_false:
0051+  1ED1 8B 01       	or al, 1	; clear ZF
0052+  1ED3 E8          	pop al
0053+  1ED4 09          	ret	
0054+  1ED5             	
0055+  1ED5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  1ED5             ;; IS ALPHA
0057+  1ED5             ;; sets ZF according with result
0058+  1ED5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  1ED5             _isalpha:
0060+  1ED5 DB          	push al
0061+  1ED6 B9 5F       	cmp al, '_'
0062+  1ED8 C6 F8 1E    	je _isalpha_true
0063+  1EDB B9 2E       	cmp al, '.'
0064+  1EDD C6 F8 1E    	je _isalpha_true
0065+  1EE0 B9 41       	cmp al, 'A'
0066+  1EE2 C8 F4 1E    	jlu _isalpha_false
0067+  1EE5 B9 7A       	cmp al, 'z'
0068+  1EE7 D1 F4 1E    	jgu _isalpha_false
0069+  1EEA B9 5A       	cmp al, 'Z'
0070+  1EEC D0 F8 1E    	jleu _isalpha_true
0071+  1EEF B9 61       	cmp al, 'a'
0072+  1EF1 C9 F8 1E    	jgeu _isalpha_true
0073+  1EF4             _isalpha_false:
0074+  1EF4 8B 01       	or al, 1	; clear ZF
0075+  1EF6 E8          	pop al
0076+  1EF7 09          	ret
0077+  1EF8             _isalpha_true:
0078+  1EF8 87 00       	and al, 0	; set ZF
0079+  1EFA E8          	pop al
0080+  1EFB 09          	ret
0081+  1EFC             
0082+  1EFC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  1EFC             ;; IS PATH-ALPHA
0084+  1EFC             ;; sets ZF according with result
0085+  1EFC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  1EFC             ispath:
0087+  1EFC DB          	push al
0088+  1EFD 07 C2 1E    	call _isdigit
0089+  1F00 C6 2A 1F    	je ispath_true
0090+  1F03 B9 5F       	cmp al, '_'
0091+  1F05 C6 2A 1F    	je ispath_true
0092+  1F08 B9 2F       	cmp al, '/'
0093+  1F0A C6 2A 1F    	je ispath_true
0094+  1F0D B9 2E       	cmp al, '.'
0095+  1F0F C6 2A 1F    	je ispath_true
0096+  1F12 B9 41       	cmp al, 'A'
0097+  1F14 C8 26 1F    	jlu ispath_false
0098+  1F17 B9 7A       	cmp al, 'z'
0099+  1F19 D1 26 1F    	jgu ispath_false
0100+  1F1C B9 5A       	cmp al, 'Z'
0101+  1F1E D0 2A 1F    	jleu ispath_true
0102+  1F21 B9 61       	cmp al, 'a'
0103+  1F23 C9 2A 1F    	jgeu ispath_true
0104+  1F26             ispath_false:
0105+  1F26 8B 01       	or al, 1	; clear ZF
0106+  1F28 E8          	pop al
0107+  1F29 09          	ret
0108+  1F2A             ispath_true:
0109+  1F2A 87 00       	and al, 0	; set ZF
0110+  1F2C E8          	pop al
0111+  1F2D 09          	ret
0112+  1F2E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  1F2E             ;; IS SPACE
0114+  1F2E             ;; sets ZF according with result
0115+  1F2E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  1F2E             _isspace:
0117+  1F2E B9 20       	cmp al, $20		; ' '
0118+  1F30 C6 44 1F    	je _isspace_exit
0119+  1F33 B9 09       	cmp al, $09		; '\t'
0120+  1F35 C6 44 1F    	je _isspace_exit
0121+  1F38 B9 0A       	cmp al, $0A		; '\n'
0122+  1F3A C6 44 1F    	je _isspace_exit
0123+  1F3D B9 0D       	cmp al, $0D		; '\r'
0124+  1F3F C6 44 1F    	je _isspace_exit
0125+  1F42 B9 0B       	cmp al, $0B		; '\v'
0126+  1F44             _isspace_exit:
0127+  1F44 09          	ret	
0128+  1F45             
0129+  1F45             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  1F45             ; TO LOWER
0131+  1F45             ; input in AL
0132+  1F45             ; output in AL
0133+  1F45             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  1F45             _to_lower:
0135+  1F45 B9 5A       	cmp al, 'Z'
0136+  1F47 D1 4C 1F    	jgu _to_lower_ret
0137+  1F4A 6A 20       	add al, $20				; convert to lower case
0138+  1F4C             _to_lower_ret:
0139+  1F4C 09          	ret
0140+  1F4D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  1F4D             ; TO UPPER
0142+  1F4D             ; input in AL
0143+  1F4D             ; output in AL
0144+  1F4D             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  1F4D             _to_upper:
0146+  1F4D B9 61       	cmp al, 'a'
0147+  1F4F C8 54 1F    	jlu _to_upper_ret
0148+  1F52 6F 20       	sub al, $20			; convert to upper case
0149+  1F54             _to_upper_ret:
0150+  1F54 09          	ret
0151+  1F55             
3713   1F55             ; --- END INLINE ASM BLOCK
3714   1F55             
3715   1F55 F9            leave
3716   1F56 09            ret
3717   1F57             
3718   1F57             is_space:
3719   1F57 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3720   1F5A             ; return c == ' ' || c == '\t' || c == '\n' || c == '\r'; 
3721   1F5A FA 05 00      lea d, [bp + 5] ; $c
3722   1F5D 32            mov bl, [d]
3723   1F5E A7 00         mov bh, 0
3724   1F60             ; START RELATIONAL
3725   1F60 D7            push a
3726   1F61 11            mov a, b
3727   1F62 26 20 00      mov b, $20
3728   1F65 B0            cmp a, b
3729   1F66 FD 71         seq ; ==
3730   1F68 E4            pop a
3731   1F69             ; END RELATIONAL
3732   1F69             ; START LOGICAL OR
3733   1F69 D7            push a
3734   1F6A 11            mov a, b
3735   1F6B FA 05 00      lea d, [bp + 5] ; $c
3736   1F6E 32            mov bl, [d]
3737   1F6F A7 00         mov bh, 0
3738   1F71             ; START RELATIONAL
3739   1F71 D7            push a
3740   1F72 11            mov a, b
3741   1F73 26 09 00      mov b, $9
3742   1F76 B0            cmp a, b
3743   1F77 FD 71         seq ; ==
3744   1F79 E4            pop a
3745   1F7A             ; END RELATIONAL
3746   1F7A FD A8         sor a, b ; ||
3747   1F7C 11            mov a, b
3748   1F7D FA 05 00      lea d, [bp + 5] ; $c
3749   1F80 32            mov bl, [d]
3750   1F81 A7 00         mov bh, 0
3751   1F83             ; START RELATIONAL
3752   1F83 D7            push a
3753   1F84 11            mov a, b
3754   1F85 26 0A 00      mov b, $a
3755   1F88 B0            cmp a, b
3756   1F89 FD 71         seq ; ==
3757   1F8B E4            pop a
3758   1F8C             ; END RELATIONAL
3759   1F8C FD A8         sor a, b ; ||
3760   1F8E 11            mov a, b
3761   1F8F FA 05 00      lea d, [bp + 5] ; $c
3762   1F92 32            mov bl, [d]
3763   1F93 A7 00         mov bh, 0
3764   1F95             ; START RELATIONAL
3765   1F95 D7            push a
3766   1F96 11            mov a, b
3767   1F97 26 0D 00      mov b, $d
3768   1F9A B0            cmp a, b
3769   1F9B FD 71         seq ; ==
3770   1F9D E4            pop a
3771   1F9E             ; END RELATIONAL
3772   1F9E FD A8         sor a, b ; ||
3773   1FA0 E4            pop a
3774   1FA1             ; END LOGICAL OR
3775   1FA1 F9            leave
3776   1FA2 09            ret
3777   1FA3             
3778   1FA3             is_digit:
3779   1FA3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3780   1FA6             ; return c >= '0' && c <= '9'; 
3781   1FA6 FA 05 00      lea d, [bp + 5] ; $c
3782   1FA9 32            mov bl, [d]
3783   1FAA A7 00         mov bh, 0
3784   1FAC             ; START RELATIONAL
3785   1FAC D7            push a
3786   1FAD 11            mov a, b
3787   1FAE 26 30 00      mov b, $30
3788   1FB1 B0            cmp a, b
3789   1FB2 FD 80         sge ; >=
3790   1FB4 E4            pop a
3791   1FB5             ; END RELATIONAL
3792   1FB5             ; START LOGICAL AND
3793   1FB5 D7            push a
3794   1FB6 11            mov a, b
3795   1FB7 FA 05 00      lea d, [bp + 5] ; $c
3796   1FBA 32            mov bl, [d]
3797   1FBB A7 00         mov bh, 0
3798   1FBD             ; START RELATIONAL
3799   1FBD D7            push a
3800   1FBE 11            mov a, b
3801   1FBF 26 39 00      mov b, $39
3802   1FC2 B0            cmp a, b
3803   1FC3 FD 74         sle ; <= (signed)
3804   1FC5 E4            pop a
3805   1FC6             ; END RELATIONAL
3806   1FC6 FD A7         sand a, b
3807   1FC8 E4            pop a
3808   1FC9             ; END LOGICAL AND
3809   1FC9 F9            leave
3810   1FCA 09            ret
3811   1FCB             
3812   1FCB             is_alpha:
3813   1FCB F8 00 00      enter 0 ; (push bp; mov bp, sp)
3814   1FCE             ; return(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '_'); 
3815   1FCE FA 05 00      lea d, [bp + 5] ; $c
3816   1FD1 32            mov bl, [d]
3817   1FD2 A7 00         mov bh, 0
3818   1FD4             ; START RELATIONAL
3819   1FD4 D7            push a
3820   1FD5 11            mov a, b
3821   1FD6 26 61 00      mov b, $61
3822   1FD9 B0            cmp a, b
3823   1FDA FD 80         sge ; >=
3824   1FDC E4            pop a
3825   1FDD             ; END RELATIONAL
3826   1FDD             ; START LOGICAL AND
3827   1FDD D7            push a
3828   1FDE 11            mov a, b
3829   1FDF FA 05 00      lea d, [bp + 5] ; $c
3830   1FE2 32            mov bl, [d]
3831   1FE3 A7 00         mov bh, 0
3832   1FE5             ; START RELATIONAL
3833   1FE5 D7            push a
3834   1FE6 11            mov a, b
3835   1FE7 26 7A 00      mov b, $7a
3836   1FEA B0            cmp a, b
3837   1FEB FD 74         sle ; <= (signed)
3838   1FED E4            pop a
3839   1FEE             ; END RELATIONAL
3840   1FEE FD A7         sand a, b
3841   1FF0 E4            pop a
3842   1FF1             ; END LOGICAL AND
3843   1FF1             ; START LOGICAL OR
3844   1FF1 D7            push a
3845   1FF2 11            mov a, b
3846   1FF3 FA 05 00      lea d, [bp + 5] ; $c
3847   1FF6 32            mov bl, [d]
3848   1FF7 A7 00         mov bh, 0
3849   1FF9             ; START RELATIONAL
3850   1FF9 D7            push a
3851   1FFA 11            mov a, b
3852   1FFB 26 41 00      mov b, $41
3853   1FFE B0            cmp a, b
3854   1FFF FD 80         sge ; >=
3855   2001 E4            pop a
3856   2002             ; END RELATIONAL
3857   2002             ; START LOGICAL AND
3858   2002 D7            push a
3859   2003 11            mov a, b
3860   2004 FA 05 00      lea d, [bp + 5] ; $c
3861   2007 32            mov bl, [d]
3862   2008 A7 00         mov bh, 0
3863   200A             ; START RELATIONAL
3864   200A D7            push a
3865   200B 11            mov a, b
3866   200C 26 5A 00      mov b, $5a
3867   200F B0            cmp a, b
3868   2010 FD 74         sle ; <= (signed)
3869   2012 E4            pop a
3870   2013             ; END RELATIONAL
3871   2013 FD A7         sand a, b
3872   2015 E4            pop a
3873   2016             ; END LOGICAL AND
3874   2016 FD A8         sor a, b ; ||
3875   2018 11            mov a, b
3876   2019 FA 05 00      lea d, [bp + 5] ; $c
3877   201C 32            mov bl, [d]
3878   201D A7 00         mov bh, 0
3879   201F             ; START RELATIONAL
3880   201F D7            push a
3881   2020 11            mov a, b
3882   2021 26 5F 00      mov b, $5f
3883   2024 B0            cmp a, b
3884   2025 FD 71         seq ; ==
3885   2027 E4            pop a
3886   2028             ; END RELATIONAL
3887   2028 FD A8         sor a, b ; ||
3888   202A E4            pop a
3889   202B             ; END LOGICAL OR
3890   202B F9            leave
3891   202C 09            ret
3892   202D             
3893   202D             tolower:
3894   202D F8 00 00      enter 0 ; (push bp; mov bp, sp)
3895   2030             ; if (ch >= 'A' && ch <= 'Z')  
3896   2030             _if56_cond:
3897   2030 FA 05 00      lea d, [bp + 5] ; $ch
3898   2033 32            mov bl, [d]
3899   2034 A7 00         mov bh, 0
3900   2036             ; START RELATIONAL
3901   2036 D7            push a
3902   2037 11            mov a, b
3903   2038 26 41 00      mov b, $41
3904   203B B0            cmp a, b
3905   203C FD 80         sge ; >=
3906   203E E4            pop a
3907   203F             ; END RELATIONAL
3908   203F             ; START LOGICAL AND
3909   203F D7            push a
3910   2040 11            mov a, b
3911   2041 FA 05 00      lea d, [bp + 5] ; $ch
3912   2044 32            mov bl, [d]
3913   2045 A7 00         mov bh, 0
3914   2047             ; START RELATIONAL
3915   2047 D7            push a
3916   2048 11            mov a, b
3917   2049 26 5A 00      mov b, $5a
3918   204C B0            cmp a, b
3919   204D FD 74         sle ; <= (signed)
3920   204F E4            pop a
3921   2050             ; END RELATIONAL
3922   2050 FD A7         sand a, b
3923   2052 E4            pop a
3924   2053             ; END LOGICAL AND
3925   2053 C0 00 00      cmp b, 0
3926   2056 C6 71 20      je _if56_else
3927   2059             _if56_true:
3928   2059             ; return ch - 'A' + 'a'; 
3929   2059 FA 05 00      lea d, [bp + 5] ; $ch
3930   205C 32            mov bl, [d]
3931   205D A7 00         mov bh, 0
3932   205F             ; START TERMS
3933   205F D7            push a
3934   2060 11            mov a, b
3935   2061 26 41 00      mov b, $41
3936   2064 60            sub a, b
3937   2065 27            mov b, a
3938   2066 11            mov a, b
3939   2067 26 61 00      mov b, $61
3940   206A 56            add b, a
3941   206B E4            pop a
3942   206C             ; END TERMS
3943   206C F9            leave
3944   206D 09            ret
3945   206E 0A 79 20      jmp _if56_exit
3946   2071             _if56_else:
3947   2071             ; return ch; 
3948   2071 FA 05 00      lea d, [bp + 5] ; $ch
3949   2074 32            mov bl, [d]
3950   2075 A7 00         mov bh, 0
3951   2077 F9            leave
3952   2078 09            ret
3953   2079             _if56_exit:
3954   2079 F9            leave
3955   207A 09            ret
3956   207B             
3957   207B             toupper:
3958   207B F8 00 00      enter 0 ; (push bp; mov bp, sp)
3959   207E             ; if (ch >= 'a' && ch <= 'z')  
3960   207E             _if57_cond:
3961   207E FA 05 00      lea d, [bp + 5] ; $ch
3962   2081 32            mov bl, [d]
3963   2082 A7 00         mov bh, 0
3964   2084             ; START RELATIONAL
3965   2084 D7            push a
3966   2085 11            mov a, b
3967   2086 26 61 00      mov b, $61
3968   2089 B0            cmp a, b
3969   208A FD 80         sge ; >=
3970   208C E4            pop a
3971   208D             ; END RELATIONAL
3972   208D             ; START LOGICAL AND
3973   208D D7            push a
3974   208E 11            mov a, b
3975   208F FA 05 00      lea d, [bp + 5] ; $ch
3976   2092 32            mov bl, [d]
3977   2093 A7 00         mov bh, 0
3978   2095             ; START RELATIONAL
3979   2095 D7            push a
3980   2096 11            mov a, b
3981   2097 26 7A 00      mov b, $7a
3982   209A B0            cmp a, b
3983   209B FD 74         sle ; <= (signed)
3984   209D E4            pop a
3985   209E             ; END RELATIONAL
3986   209E FD A7         sand a, b
3987   20A0 E4            pop a
3988   20A1             ; END LOGICAL AND
3989   20A1 C0 00 00      cmp b, 0
3990   20A4 C6 BF 20      je _if57_else
3991   20A7             _if57_true:
3992   20A7             ; return ch - 'a' + 'A'; 
3993   20A7 FA 05 00      lea d, [bp + 5] ; $ch
3994   20AA 32            mov bl, [d]
3995   20AB A7 00         mov bh, 0
3996   20AD             ; START TERMS
3997   20AD D7            push a
3998   20AE 11            mov a, b
3999   20AF 26 61 00      mov b, $61
4000   20B2 60            sub a, b
4001   20B3 27            mov b, a
4002   20B4 11            mov a, b
4003   20B5 26 41 00      mov b, $41
4004   20B8 56            add b, a
4005   20B9 E4            pop a
4006   20BA             ; END TERMS
4007   20BA F9            leave
4008   20BB 09            ret
4009   20BC 0A C7 20      jmp _if57_exit
4010   20BF             _if57_else:
4011   20BF             ; return ch; 
4012   20BF FA 05 00      lea d, [bp + 5] ; $ch
4013   20C2 32            mov bl, [d]
4014   20C3 A7 00         mov bh, 0
4015   20C5 F9            leave
4016   20C6 09            ret
4017   20C7             _if57_exit:
4018   20C7 F9            leave
4019   20C8 09            ret
4020   20C9             
4021   20C9             is_delimiter:
4022   20C9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4023   20CC             ; if( 
4024   20CC             _if58_cond:
4025   20CC FA 05 00      lea d, [bp + 5] ; $c
4026   20CF 32            mov bl, [d]
4027   20D0 A7 00         mov bh, 0
4028   20D2             ; START RELATIONAL
4029   20D2 D7            push a
4030   20D3 11            mov a, b
4031   20D4 26 40 00      mov b, $40
4032   20D7 B0            cmp a, b
4033   20D8 FD 71         seq ; ==
4034   20DA E4            pop a
4035   20DB             ; END RELATIONAL
4036   20DB             ; START LOGICAL OR
4037   20DB D7            push a
4038   20DC 11            mov a, b
4039   20DD FA 05 00      lea d, [bp + 5] ; $c
4040   20E0 32            mov bl, [d]
4041   20E1 A7 00         mov bh, 0
4042   20E3             ; START RELATIONAL
4043   20E3 D7            push a
4044   20E4 11            mov a, b
4045   20E5 26 23 00      mov b, $23
4046   20E8 B0            cmp a, b
4047   20E9 FD 71         seq ; ==
4048   20EB E4            pop a
4049   20EC             ; END RELATIONAL
4050   20EC FD A8         sor a, b ; ||
4051   20EE 11            mov a, b
4052   20EF FA 05 00      lea d, [bp + 5] ; $c
4053   20F2 32            mov bl, [d]
4054   20F3 A7 00         mov bh, 0
4055   20F5             ; START RELATIONAL
4056   20F5 D7            push a
4057   20F6 11            mov a, b
4058   20F7 26 24 00      mov b, $24
4059   20FA B0            cmp a, b
4060   20FB FD 71         seq ; ==
4061   20FD E4            pop a
4062   20FE             ; END RELATIONAL
4063   20FE FD A8         sor a, b ; ||
4064   2100 11            mov a, b
4065   2101 FA 05 00      lea d, [bp + 5] ; $c
4066   2104 32            mov bl, [d]
4067   2105 A7 00         mov bh, 0
4068   2107             ; START RELATIONAL
4069   2107 D7            push a
4070   2108 11            mov a, b
4071   2109 26 2B 00      mov b, $2b
4072   210C B0            cmp a, b
4073   210D FD 71         seq ; ==
4074   210F E4            pop a
4075   2110             ; END RELATIONAL
4076   2110 FD A8         sor a, b ; ||
4077   2112 11            mov a, b
4078   2113 FA 05 00      lea d, [bp + 5] ; $c
4079   2116 32            mov bl, [d]
4080   2117 A7 00         mov bh, 0
4081   2119             ; START RELATIONAL
4082   2119 D7            push a
4083   211A 11            mov a, b
4084   211B 26 2D 00      mov b, $2d
4085   211E B0            cmp a, b
4086   211F FD 71         seq ; ==
4087   2121 E4            pop a
4088   2122             ; END RELATIONAL
4089   2122 FD A8         sor a, b ; ||
4090   2124 11            mov a, b
4091   2125 FA 05 00      lea d, [bp + 5] ; $c
4092   2128 32            mov bl, [d]
4093   2129 A7 00         mov bh, 0
4094   212B             ; START RELATIONAL
4095   212B D7            push a
4096   212C 11            mov a, b
4097   212D 26 2A 00      mov b, $2a
4098   2130 B0            cmp a, b
4099   2131 FD 71         seq ; ==
4100   2133 E4            pop a
4101   2134             ; END RELATIONAL
4102   2134 FD A8         sor a, b ; ||
4103   2136 11            mov a, b
4104   2137 FA 05 00      lea d, [bp + 5] ; $c
4105   213A 32            mov bl, [d]
4106   213B A7 00         mov bh, 0
4107   213D             ; START RELATIONAL
4108   213D D7            push a
4109   213E 11            mov a, b
4110   213F 26 2F 00      mov b, $2f
4111   2142 B0            cmp a, b
4112   2143 FD 71         seq ; ==
4113   2145 E4            pop a
4114   2146             ; END RELATIONAL
4115   2146 FD A8         sor a, b ; ||
4116   2148 11            mov a, b
4117   2149 FA 05 00      lea d, [bp + 5] ; $c
4118   214C 32            mov bl, [d]
4119   214D A7 00         mov bh, 0
4120   214F             ; START RELATIONAL
4121   214F D7            push a
4122   2150 11            mov a, b
4123   2151 26 25 00      mov b, $25
4124   2154 B0            cmp a, b
4125   2155 FD 71         seq ; ==
4126   2157 E4            pop a
4127   2158             ; END RELATIONAL
4128   2158 FD A8         sor a, b ; ||
4129   215A 11            mov a, b
4130   215B FA 05 00      lea d, [bp + 5] ; $c
4131   215E 32            mov bl, [d]
4132   215F A7 00         mov bh, 0
4133   2161             ; START RELATIONAL
4134   2161 D7            push a
4135   2162 11            mov a, b
4136   2163 26 5B 00      mov b, $5b
4137   2166 B0            cmp a, b
4138   2167 FD 71         seq ; ==
4139   2169 E4            pop a
4140   216A             ; END RELATIONAL
4141   216A FD A8         sor a, b ; ||
4142   216C 11            mov a, b
4143   216D FA 05 00      lea d, [bp + 5] ; $c
4144   2170 32            mov bl, [d]
4145   2171 A7 00         mov bh, 0
4146   2173             ; START RELATIONAL
4147   2173 D7            push a
4148   2174 11            mov a, b
4149   2175 26 5D 00      mov b, $5d
4150   2178 B0            cmp a, b
4151   2179 FD 71         seq ; ==
4152   217B E4            pop a
4153   217C             ; END RELATIONAL
4154   217C FD A8         sor a, b ; ||
4155   217E 11            mov a, b
4156   217F FA 05 00      lea d, [bp + 5] ; $c
4157   2182 32            mov bl, [d]
4158   2183 A7 00         mov bh, 0
4159   2185             ; START RELATIONAL
4160   2185 D7            push a
4161   2186 11            mov a, b
4162   2187 26 28 00      mov b, $28
4163   218A B0            cmp a, b
4164   218B FD 71         seq ; ==
4165   218D E4            pop a
4166   218E             ; END RELATIONAL
4167   218E FD A8         sor a, b ; ||
4168   2190 11            mov a, b
4169   2191 FA 05 00      lea d, [bp + 5] ; $c
4170   2194 32            mov bl, [d]
4171   2195 A7 00         mov bh, 0
4172   2197             ; START RELATIONAL
4173   2197 D7            push a
4174   2198 11            mov a, b
4175   2199 26 29 00      mov b, $29
4176   219C B0            cmp a, b
4177   219D FD 71         seq ; ==
4178   219F E4            pop a
4179   21A0             ; END RELATIONAL
4180   21A0 FD A8         sor a, b ; ||
4181   21A2 11            mov a, b
4182   21A3 FA 05 00      lea d, [bp + 5] ; $c
4183   21A6 32            mov bl, [d]
4184   21A7 A7 00         mov bh, 0
4185   21A9             ; START RELATIONAL
4186   21A9 D7            push a
4187   21AA 11            mov a, b
4188   21AB 26 7B 00      mov b, $7b
4189   21AE B0            cmp a, b
4190   21AF FD 71         seq ; ==
4191   21B1 E4            pop a
4192   21B2             ; END RELATIONAL
4193   21B2 FD A8         sor a, b ; ||
4194   21B4 11            mov a, b
4195   21B5 FA 05 00      lea d, [bp + 5] ; $c
4196   21B8 32            mov bl, [d]
4197   21B9 A7 00         mov bh, 0
4198   21BB             ; START RELATIONAL
4199   21BB D7            push a
4200   21BC 11            mov a, b
4201   21BD 26 7D 00      mov b, $7d
4202   21C0 B0            cmp a, b
4203   21C1 FD 71         seq ; ==
4204   21C3 E4            pop a
4205   21C4             ; END RELATIONAL
4206   21C4 FD A8         sor a, b ; ||
4207   21C6 11            mov a, b
4208   21C7 FA 05 00      lea d, [bp + 5] ; $c
4209   21CA 32            mov bl, [d]
4210   21CB A7 00         mov bh, 0
4211   21CD             ; START RELATIONAL
4212   21CD D7            push a
4213   21CE 11            mov a, b
4214   21CF 26 3A 00      mov b, $3a
4215   21D2 B0            cmp a, b
4216   21D3 FD 71         seq ; ==
4217   21D5 E4            pop a
4218   21D6             ; END RELATIONAL
4219   21D6 FD A8         sor a, b ; ||
4220   21D8 11            mov a, b
4221   21D9 FA 05 00      lea d, [bp + 5] ; $c
4222   21DC 32            mov bl, [d]
4223   21DD A7 00         mov bh, 0
4224   21DF             ; START RELATIONAL
4225   21DF D7            push a
4226   21E0 11            mov a, b
4227   21E1 26 3B 00      mov b, $3b
4228   21E4 B0            cmp a, b
4229   21E5 FD 71         seq ; ==
4230   21E7 E4            pop a
4231   21E8             ; END RELATIONAL
4232   21E8 FD A8         sor a, b ; ||
4233   21EA 11            mov a, b
4234   21EB FA 05 00      lea d, [bp + 5] ; $c
4235   21EE 32            mov bl, [d]
4236   21EF A7 00         mov bh, 0
4237   21F1             ; START RELATIONAL
4238   21F1 D7            push a
4239   21F2 11            mov a, b
4240   21F3 26 3C 00      mov b, $3c
4241   21F6 B0            cmp a, b
4242   21F7 FD 71         seq ; ==
4243   21F9 E4            pop a
4244   21FA             ; END RELATIONAL
4245   21FA FD A8         sor a, b ; ||
4246   21FC 11            mov a, b
4247   21FD FA 05 00      lea d, [bp + 5] ; $c
4248   2200 32            mov bl, [d]
4249   2201 A7 00         mov bh, 0
4250   2203             ; START RELATIONAL
4251   2203 D7            push a
4252   2204 11            mov a, b
4253   2205 26 3E 00      mov b, $3e
4254   2208 B0            cmp a, b
4255   2209 FD 71         seq ; ==
4256   220B E4            pop a
4257   220C             ; END RELATIONAL
4258   220C FD A8         sor a, b ; ||
4259   220E 11            mov a, b
4260   220F FA 05 00      lea d, [bp + 5] ; $c
4261   2212 32            mov bl, [d]
4262   2213 A7 00         mov bh, 0
4263   2215             ; START RELATIONAL
4264   2215 D7            push a
4265   2216 11            mov a, b
4266   2217 26 3D 00      mov b, $3d
4267   221A B0            cmp a, b
4268   221B FD 71         seq ; ==
4269   221D E4            pop a
4270   221E             ; END RELATIONAL
4271   221E FD A8         sor a, b ; ||
4272   2220 11            mov a, b
4273   2221 FA 05 00      lea d, [bp + 5] ; $c
4274   2224 32            mov bl, [d]
4275   2225 A7 00         mov bh, 0
4276   2227             ; START RELATIONAL
4277   2227 D7            push a
4278   2228 11            mov a, b
4279   2229 26 21 00      mov b, $21
4280   222C B0            cmp a, b
4281   222D FD 71         seq ; ==
4282   222F E4            pop a
4283   2230             ; END RELATIONAL
4284   2230 FD A8         sor a, b ; ||
4285   2232 11            mov a, b
4286   2233 FA 05 00      lea d, [bp + 5] ; $c
4287   2236 32            mov bl, [d]
4288   2237 A7 00         mov bh, 0
4289   2239             ; START RELATIONAL
4290   2239 D7            push a
4291   223A 11            mov a, b
4292   223B 26 5E 00      mov b, $5e
4293   223E B0            cmp a, b
4294   223F FD 71         seq ; ==
4295   2241 E4            pop a
4296   2242             ; END RELATIONAL
4297   2242 FD A8         sor a, b ; ||
4298   2244 11            mov a, b
4299   2245 FA 05 00      lea d, [bp + 5] ; $c
4300   2248 32            mov bl, [d]
4301   2249 A7 00         mov bh, 0
4302   224B             ; START RELATIONAL
4303   224B D7            push a
4304   224C 11            mov a, b
4305   224D 26 26 00      mov b, $26
4306   2250 B0            cmp a, b
4307   2251 FD 71         seq ; ==
4308   2253 E4            pop a
4309   2254             ; END RELATIONAL
4310   2254 FD A8         sor a, b ; ||
4311   2256 11            mov a, b
4312   2257 FA 05 00      lea d, [bp + 5] ; $c
4313   225A 32            mov bl, [d]
4314   225B A7 00         mov bh, 0
4315   225D             ; START RELATIONAL
4316   225D D7            push a
4317   225E 11            mov a, b
4318   225F 26 7C 00      mov b, $7c
4319   2262 B0            cmp a, b
4320   2263 FD 71         seq ; ==
4321   2265 E4            pop a
4322   2266             ; END RELATIONAL
4323   2266 FD A8         sor a, b ; ||
4324   2268 11            mov a, b
4325   2269 FA 05 00      lea d, [bp + 5] ; $c
4326   226C 32            mov bl, [d]
4327   226D A7 00         mov bh, 0
4328   226F             ; START RELATIONAL
4329   226F D7            push a
4330   2270 11            mov a, b
4331   2271 26 7E 00      mov b, $7e
4332   2274 B0            cmp a, b
4333   2275 FD 71         seq ; ==
4334   2277 E4            pop a
4335   2278             ; END RELATIONAL
4336   2278 FD A8         sor a, b ; ||
4337   227A 11            mov a, b
4338   227B FA 05 00      lea d, [bp + 5] ; $c
4339   227E 32            mov bl, [d]
4340   227F A7 00         mov bh, 0
4341   2281             ; START RELATIONAL
4342   2281 D7            push a
4343   2282 11            mov a, b
4344   2283 26 2E 00      mov b, $2e
4345   2286 B0            cmp a, b
4346   2287 FD 71         seq ; ==
4347   2289 E4            pop a
4348   228A             ; END RELATIONAL
4349   228A FD A8         sor a, b ; ||
4350   228C E4            pop a
4351   228D             ; END LOGICAL OR
4352   228D C0 00 00      cmp b, 0
4353   2290 C6 9B 22      je _if58_else
4354   2293             _if58_true:
4355   2293             ; return 1; 
4356   2293 26 01 00      mov b, $1
4357   2296 F9            leave
4358   2297 09            ret
4359   2298 0A A0 22      jmp _if58_exit
4360   229B             _if58_else:
4361   229B             ; return 0; 
4362   229B 26 00 00      mov b, $0
4363   229E F9            leave
4364   229F 09            ret
4365   22A0             _if58_exit:
4366   22A0 F9            leave
4367   22A1 09            ret
4368   22A2             
4369   22A2             TO_FIXED:
4370   22A2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4371   22A5             ; return x * 10; 
4372   22A5 FA 05 00      lea d, [bp + 5] ; $x
4373   22A8 2A            mov b, [d]
4374   22A9             ; START FACTORS
4375   22A9 D7            push a
4376   22AA 11            mov a, b
4377   22AB 26 0A 00      mov b, $a
4378   22AE AC            mul a, b ; *
4379   22AF 11            mov a, b
4380   22B0 27            mov b, a
4381   22B1 E4            pop a
4382   22B2             ; END FACTORS
4383   22B2 F9            leave
4384   22B3 09            ret
4385   22B4             
4386   22B4             FROM_FIXED:
4387   22B4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4388   22B7             ; return x / 10; 
4389   22B7 FA 05 00      lea d, [bp + 5] ; $x
4390   22BA 2A            mov b, [d]
4391   22BB             ; START FACTORS
4392   22BB D7            push a
4393   22BC 11            mov a, b
4394   22BD 26 0A 00      mov b, $a
4395   22C0 AE            div a, b
4396   22C1 27            mov b, a
4397   22C2 E4            pop a
4398   22C3             ; END FACTORS
4399   22C3 F9            leave
4400   22C4 09            ret
4401   22C5             
4402   22C5             TO_FIXED00:
4403   22C5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4404   22C8             ; return x * 100; 
4405   22C8 FA 05 00      lea d, [bp + 5] ; $x
4406   22CB 2A            mov b, [d]
4407   22CC             ; START FACTORS
4408   22CC D7            push a
4409   22CD 11            mov a, b
4410   22CE 26 64 00      mov b, $64
4411   22D1 AC            mul a, b ; *
4412   22D2 11            mov a, b
4413   22D3 27            mov b, a
4414   22D4 E4            pop a
4415   22D5             ; END FACTORS
4416   22D5 F9            leave
4417   22D6 09            ret
4418   22D7             
4419   22D7             FROM_FIXED00:
4420   22D7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4421   22DA             ; return x / 100; 
4422   22DA FA 05 00      lea d, [bp + 5] ; $x
4423   22DD 2A            mov b, [d]
4424   22DE             ; START FACTORS
4425   22DE D7            push a
4426   22DF 11            mov a, b
4427   22E0 26 64 00      mov b, $64
4428   22E3 AE            div a, b
4429   22E4 27            mov b, a
4430   22E5 E4            pop a
4431   22E6             ; END FACTORS
4432   22E6 F9            leave
4433   22E7 09            ret
4434   22E8             
4435   22E8             get_rand:
4436   22E8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4437   22EB             ; unsigned int        r = rand(); 
4438   22EB 52 02 00      sub sp, 2
4439   22EE             ; --- START LOCAL VAR INITIALIZATION
4440   22EE FA FF FF      lea d, [bp + -1] ; $r
4441   22F1 DA            push d
4442   22F2 07 4A 07      call rand
4443   22F5 E7            pop d
4444   22F6 FD 43         mov [d], b
4445   22F8             ; --- END LOCAL VAR INITIALIZATION
4446   22F8             ; r = (r >> 8) | (r << 8); 
4447   22F8 FA FF FF      lea d, [bp + -1] ; $r
4448   22FB DA            push d
4449   22FC FA FF FF      lea d, [bp + -1] ; $r
4450   22FF 2A            mov b, [d]
4451   2300             ; START SHIFT
4452   2300 D7            push a
4453   2301 11            mov a, b
4454   2302 26 08 00      mov b, $8
4455   2305 FD 39         mov c, b
4456   2307 A1            shr a, cl
4457   2308 27            mov b, a
4458   2309 E4            pop a
4459   230A             ; END SHIFT
4460   230A D7            push a
4461   230B 11            mov a, b
4462   230C FA FF FF      lea d, [bp + -1] ; $r
4463   230F 2A            mov b, [d]
4464   2310             ; START SHIFT
4465   2310 D7            push a
4466   2311 11            mov a, b
4467   2312 26 08 00      mov b, $8
4468   2315 FD 39         mov c, b
4469   2317 9D            shl a, cl
4470   2318 27            mov b, a
4471   2319 E4            pop a
4472   231A             ; END SHIFT
4473   231A FD 70         or b, a ; |
4474   231C E4            pop a
4475   231D E7            pop d
4476   231E FD 43         mov [d], b
4477   2320             ; return ((r % spread) + 1); 
4478   2320 FA FF FF      lea d, [bp + -1] ; $r
4479   2323 2A            mov b, [d]
4480   2324             ; START FACTORS
4481   2324 D7            push a
4482   2325 11            mov a, b
4483   2326 FA 05 00      lea d, [bp + 5] ; $spread
4484   2329 2A            mov b, [d]
4485   232A AE            div a, b ; 
4486   232B 11            mov a, b
4487   232C 27            mov b, a
4488   232D E4            pop a
4489   232E             ; END FACTORS
4490   232E             ; START TERMS
4491   232E D7            push a
4492   232F 11            mov a, b
4493   2330 26 01 00      mov b, $1
4494   2333 56            add b, a
4495   2334 E4            pop a
4496   2335             ; END TERMS
4497   2335 F9            leave
4498   2336 09            ret
4499   2337             
4500   2337             rand8:
4501   2337 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4502   233A             ; return (get_rand(8)); 
4503   233A 26 08 00      mov b, $8
4504   233D FD AB         swp b
4505   233F D8            push b
4506   2340 07 E8 22      call get_rand
4507   2343 51 02 00      add sp, 2
4508   2346 F9            leave
4509   2347 09            ret
4510   2348             
4511   2348             input:
4512   2348 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4513   234B             ; int c; 
4514   234B 52 02 00      sub sp, 2
4515   234E             ; while((c = getchar()) != '\n') { 
4516   234E             _while59_cond:
4517   234E FA FF FF      lea d, [bp + -1] ; $c
4518   2351 DA            push d
4519   2352 07 8F 1A      call getchar
4520   2355 E7            pop d
4521   2356 FD 43         mov [d], b
4522   2358             ; START RELATIONAL
4523   2358 D7            push a
4524   2359 11            mov a, b
4525   235A 26 0A 00      mov b, $a
4526   235D B0            cmp a, b
4527   235E FD 72         sneq ; !=
4528   2360 E4            pop a
4529   2361             ; END RELATIONAL
4530   2361 C0 00 00      cmp b, 0
4531   2364 C6 C1 23      je _while59_exit
4532   2367             _while59_block:
4533   2367             ; if (c ==   -1  ) 
4534   2367             _if60_cond:
4535   2367 FA FF FF      lea d, [bp + -1] ; $c
4536   236A 2A            mov b, [d]
4537   236B             ; START RELATIONAL
4538   236B D7            push a
4539   236C 11            mov a, b
4540   236D 26 01 00      mov b, $1
4541   2370 FD 97         neg b
4542   2372 B0            cmp a, b
4543   2373 FD 71         seq ; ==
4544   2375 E4            pop a
4545   2376             ; END RELATIONAL
4546   2376 C0 00 00      cmp b, 0
4547   2379 C6 82 23      je _if60_exit
4548   237C             _if60_true:
4549   237C             ; exit(); 
4550   237C 07 D7 05      call exit
4551   237F 0A 82 23      jmp _if60_exit
4552   2382             _if60_exit:
4553   2382             ; if (l > 1) { 
4554   2382             _if61_cond:
4555   2382 FA 07 00      lea d, [bp + 7] ; $l
4556   2385 32            mov bl, [d]
4557   2386 A7 00         mov bh, 0
4558   2388             ; START RELATIONAL
4559   2388 D7            push a
4560   2389 11            mov a, b
4561   238A 26 01 00      mov b, $1
4562   238D B0            cmp a, b
4563   238E FD 81         sgu ; > (unsigned)
4564   2390 E4            pop a
4565   2391             ; END RELATIONAL
4566   2391 C0 00 00      cmp b, 0
4567   2394 C6 BE 23      je _if61_exit
4568   2397             _if61_true:
4569   2397             ; *b++ = c; 
4570   2397 FA 05 00      lea d, [bp + 5] ; $b
4571   239A 2A            mov b, [d]
4572   239B FD 77         inc b
4573   239D FA 05 00      lea d, [bp + 5] ; $b
4574   23A0 FD 43         mov [d], b
4575   23A2 FD 7D         dec b
4576   23A4 D8            push b
4577   23A5 FA FF FF      lea d, [bp + -1] ; $c
4578   23A8 2A            mov b, [d]
4579   23A9 E7            pop d
4580   23AA FD 3E         mov [d], bl
4581   23AC             ; l--; 
4582   23AC FA 07 00      lea d, [bp + 7] ; $l
4583   23AF 32            mov bl, [d]
4584   23B0 A7 00         mov bh, 0
4585   23B2 FD 7D         dec b
4586   23B4 FA 07 00      lea d, [bp + 7] ; $l
4587   23B7 FD 43         mov [d], b
4588   23B9 FD 77         inc b
4589   23BB 0A BE 23      jmp _if61_exit
4590   23BE             _if61_exit:
4591   23BE 0A 4E 23      jmp _while59_cond
4592   23C1             _while59_exit:
4593   23C1             ; *b = 0; 
4594   23C1 FA 05 00      lea d, [bp + 5] ; $b
4595   23C4 2A            mov b, [d]
4596   23C5 D8            push b
4597   23C6 26 00 00      mov b, $0
4598   23C9 E7            pop d
4599   23CA FD 3E         mov [d], bl
4600   23CC F9            leave
4601   23CD 09            ret
4602   23CE             
4603   23CE             yesno:
4604   23CE F8 00 00      enter 0 ; (push bp; mov bp, sp)
4605   23D1             ; char b[2]; 
4606   23D1 52 02 00      sub sp, 2
4607   23D4             ; input(b,2); 
4608   23D4 26 02 00      mov b, $2
4609   23D7 DD            push bl
4610   23D8 FA FF FF      lea d, [bp + -1] ; $b
4611   23DB 2D            mov b, d
4612   23DC FD AB         swp b
4613   23DE D8            push b
4614   23DF 07 48 23      call input
4615   23E2 51 03 00      add sp, 3
4616   23E5             ; if (tolower(*b) == 'y') 
4617   23E5             _if62_cond:
4618   23E5 FA FF FF      lea d, [bp + -1] ; $b
4619   23E8 2D            mov b, d
4620   23E9 74            mov d, b
4621   23EA 32            mov bl, [d]
4622   23EB A7 00         mov bh, 0
4623   23ED DD            push bl
4624   23EE 07 2D 20      call tolower
4625   23F1 51 01 00      add sp, 1
4626   23F4             ; START RELATIONAL
4627   23F4 D7            push a
4628   23F5 11            mov a, b
4629   23F6 26 79 00      mov b, $79
4630   23F9 B0            cmp a, b
4631   23FA FD 71         seq ; ==
4632   23FC E4            pop a
4633   23FD             ; END RELATIONAL
4634   23FD C0 00 00      cmp b, 0
4635   2400 C6 0B 24      je _if62_exit
4636   2403             _if62_true:
4637   2403             ; return 1; 
4638   2403 26 01 00      mov b, $1
4639   2406 F9            leave
4640   2407 09            ret
4641   2408 0A 0B 24      jmp _if62_exit
4642   240B             _if62_exit:
4643   240B             ; return 0; 
4644   240B 26 00 00      mov b, $0
4645   240E F9            leave
4646   240F 09            ret
4647   2410             
4648   2410             input_f00:
4649   2410 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4650   2413             ; int       v; 
4651   2413 52 02 00      sub sp, 2
4652   2416             ; char buf[8]; 
4653   2416 52 08 00      sub sp, 8
4654   2419             ; char *x; 
4655   2419 52 02 00      sub sp, 2
4656   241C             ; input(buf, 8); 
4657   241C 26 08 00      mov b, $8
4658   241F DD            push bl
4659   2420 FA F7 FF      lea d, [bp + -9] ; $buf
4660   2423 2D            mov b, d
4661   2424 FD AB         swp b
4662   2426 D8            push b
4663   2427 07 48 23      call input
4664   242A 51 03 00      add sp, 3
4665   242D             ; x = buf; 
4666   242D FA F5 FF      lea d, [bp + -11] ; $x
4667   2430 DA            push d
4668   2431 FA F7 FF      lea d, [bp + -9] ; $buf
4669   2434 2D            mov b, d
4670   2435 E7            pop d
4671   2436 FD 43         mov [d], b
4672   2438             ; if (!is_digit(*x)) 
4673   2438             _if63_cond:
4674   2438 FA F5 FF      lea d, [bp + -11] ; $x
4675   243B 2A            mov b, [d]
4676   243C 74            mov d, b
4677   243D 32            mov bl, [d]
4678   243E A7 00         mov bh, 0
4679   2440 DD            push bl
4680   2441 07 A3 1F      call is_digit
4681   2444 51 01 00      add sp, 1
4682   2447 C0 00 00      cmp b, 0
4683   244A FD 71         seq ; !
4684   244C C0 00 00      cmp b, 0
4685   244F C6 5C 24      je _if63_exit
4686   2452             _if63_true:
4687   2452             ; return -1; 
4688   2452 26 01 00      mov b, $1
4689   2455 FD 97         neg b
4690   2457 F9            leave
4691   2458 09            ret
4692   2459 0A 5C 24      jmp _if63_exit
4693   245C             _if63_exit:
4694   245C             ; v = 100 * (*x++ - '0'); 
4695   245C FA FF FF      lea d, [bp + -1] ; $v
4696   245F DA            push d
4697   2460 26 64 00      mov b, $64
4698   2463             ; START FACTORS
4699   2463 D7            push a
4700   2464 11            mov a, b
4701   2465 FA F5 FF      lea d, [bp + -11] ; $x
4702   2468 2A            mov b, [d]
4703   2469 FD 77         inc b
4704   246B FA F5 FF      lea d, [bp + -11] ; $x
4705   246E FD 43         mov [d], b
4706   2470 FD 7D         dec b
4707   2472 74            mov d, b
4708   2473 32            mov bl, [d]
4709   2474 A7 00         mov bh, 0
4710   2476             ; START TERMS
4711   2476 D7            push a
4712   2477 11            mov a, b
4713   2478 26 30 00      mov b, $30
4714   247B 60            sub a, b
4715   247C 27            mov b, a
4716   247D E4            pop a
4717   247E             ; END TERMS
4718   247E AC            mul a, b ; *
4719   247F 11            mov a, b
4720   2480 27            mov b, a
4721   2481 E4            pop a
4722   2482             ; END FACTORS
4723   2482 E7            pop d
4724   2483 FD 43         mov [d], b
4725   2485             ; if (*x == 0) 
4726   2485             _if64_cond:
4727   2485 FA F5 FF      lea d, [bp + -11] ; $x
4728   2488 2A            mov b, [d]
4729   2489 74            mov d, b
4730   248A 32            mov bl, [d]
4731   248B A7 00         mov bh, 0
4732   248D             ; START RELATIONAL
4733   248D D7            push a
4734   248E 11            mov a, b
4735   248F 26 00 00      mov b, $0
4736   2492 B0            cmp a, b
4737   2493 FD 71         seq ; ==
4738   2495 E4            pop a
4739   2496             ; END RELATIONAL
4740   2496 C0 00 00      cmp b, 0
4741   2499 C6 A5 24      je _if64_exit
4742   249C             _if64_true:
4743   249C             ; return v; 
4744   249C FA FF FF      lea d, [bp + -1] ; $v
4745   249F 2A            mov b, [d]
4746   24A0 F9            leave
4747   24A1 09            ret
4748   24A2 0A A5 24      jmp _if64_exit
4749   24A5             _if64_exit:
4750   24A5             ; if (*x++ != '.') 
4751   24A5             _if65_cond:
4752   24A5 FA F5 FF      lea d, [bp + -11] ; $x
4753   24A8 2A            mov b, [d]
4754   24A9 FD 77         inc b
4755   24AB FA F5 FF      lea d, [bp + -11] ; $x
4756   24AE FD 43         mov [d], b
4757   24B0 FD 7D         dec b
4758   24B2 74            mov d, b
4759   24B3 32            mov bl, [d]
4760   24B4 A7 00         mov bh, 0
4761   24B6             ; START RELATIONAL
4762   24B6 D7            push a
4763   24B7 11            mov a, b
4764   24B8 26 2E 00      mov b, $2e
4765   24BB B0            cmp a, b
4766   24BC FD 72         sneq ; !=
4767   24BE E4            pop a
4768   24BF             ; END RELATIONAL
4769   24BF C0 00 00      cmp b, 0
4770   24C2 C6 CF 24      je _if65_exit
4771   24C5             _if65_true:
4772   24C5             ; return -1; 
4773   24C5 26 01 00      mov b, $1
4774   24C8 FD 97         neg b
4775   24CA F9            leave
4776   24CB 09            ret
4777   24CC 0A CF 24      jmp _if65_exit
4778   24CF             _if65_exit:
4779   24CF             ; if (!is_digit(*x)) 
4780   24CF             _if66_cond:
4781   24CF FA F5 FF      lea d, [bp + -11] ; $x
4782   24D2 2A            mov b, [d]
4783   24D3 74            mov d, b
4784   24D4 32            mov bl, [d]
4785   24D5 A7 00         mov bh, 0
4786   24D7 DD            push bl
4787   24D8 07 A3 1F      call is_digit
4788   24DB 51 01 00      add sp, 1
4789   24DE C0 00 00      cmp b, 0
4790   24E1 FD 71         seq ; !
4791   24E3 C0 00 00      cmp b, 0
4792   24E6 C6 F3 24      je _if66_exit
4793   24E9             _if66_true:
4794   24E9             ; return -1; 
4795   24E9 26 01 00      mov b, $1
4796   24EC FD 97         neg b
4797   24EE F9            leave
4798   24EF 09            ret
4799   24F0 0A F3 24      jmp _if66_exit
4800   24F3             _if66_exit:
4801   24F3             ; v = v + 10 * (*x++ - '0'); 
4802   24F3 FA FF FF      lea d, [bp + -1] ; $v
4803   24F6 DA            push d
4804   24F7 FA FF FF      lea d, [bp + -1] ; $v
4805   24FA 2A            mov b, [d]
4806   24FB             ; START TERMS
4807   24FB D7            push a
4808   24FC 11            mov a, b
4809   24FD 26 0A 00      mov b, $a
4810   2500             ; START FACTORS
4811   2500 D7            push a
4812   2501 11            mov a, b
4813   2502 FA F5 FF      lea d, [bp + -11] ; $x
4814   2505 2A            mov b, [d]
4815   2506 FD 77         inc b
4816   2508 FA F5 FF      lea d, [bp + -11] ; $x
4817   250B FD 43         mov [d], b
4818   250D FD 7D         dec b
4819   250F 74            mov d, b
4820   2510 32            mov bl, [d]
4821   2511 A7 00         mov bh, 0
4822   2513             ; START TERMS
4823   2513 D7            push a
4824   2514 11            mov a, b
4825   2515 26 30 00      mov b, $30
4826   2518 60            sub a, b
4827   2519 27            mov b, a
4828   251A E4            pop a
4829   251B             ; END TERMS
4830   251B AC            mul a, b ; *
4831   251C 11            mov a, b
4832   251D 27            mov b, a
4833   251E E4            pop a
4834   251F             ; END FACTORS
4835   251F 56            add b, a
4836   2520 E4            pop a
4837   2521             ; END TERMS
4838   2521 E7            pop d
4839   2522 FD 43         mov [d], b
4840   2524             ; if (!*x) 
4841   2524             _if67_cond:
4842   2524 FA F5 FF      lea d, [bp + -11] ; $x
4843   2527 2A            mov b, [d]
4844   2528 74            mov d, b
4845   2529 32            mov bl, [d]
4846   252A A7 00         mov bh, 0
4847   252C C0 00 00      cmp b, 0
4848   252F FD 71         seq ; !
4849   2531 C0 00 00      cmp b, 0
4850   2534 C6 40 25      je _if67_exit
4851   2537             _if67_true:
4852   2537             ; return v; 
4853   2537 FA FF FF      lea d, [bp + -1] ; $v
4854   253A 2A            mov b, [d]
4855   253B F9            leave
4856   253C 09            ret
4857   253D 0A 40 25      jmp _if67_exit
4858   2540             _if67_exit:
4859   2540             ; if (!is_digit(*x)) 
4860   2540             _if68_cond:
4861   2540 FA F5 FF      lea d, [bp + -11] ; $x
4862   2543 2A            mov b, [d]
4863   2544 74            mov d, b
4864   2545 32            mov bl, [d]
4865   2546 A7 00         mov bh, 0
4866   2548 DD            push bl
4867   2549 07 A3 1F      call is_digit
4868   254C 51 01 00      add sp, 1
4869   254F C0 00 00      cmp b, 0
4870   2552 FD 71         seq ; !
4871   2554 C0 00 00      cmp b, 0
4872   2557 C6 64 25      je _if68_exit
4873   255A             _if68_true:
4874   255A             ; return -1; 
4875   255A 26 01 00      mov b, $1
4876   255D FD 97         neg b
4877   255F F9            leave
4878   2560 09            ret
4879   2561 0A 64 25      jmp _if68_exit
4880   2564             _if68_exit:
4881   2564             ; v = v + *x++ - '0'; 
4882   2564 FA FF FF      lea d, [bp + -1] ; $v
4883   2567 DA            push d
4884   2568 FA FF FF      lea d, [bp + -1] ; $v
4885   256B 2A            mov b, [d]
4886   256C             ; START TERMS
4887   256C D7            push a
4888   256D 11            mov a, b
4889   256E FA F5 FF      lea d, [bp + -11] ; $x
4890   2571 2A            mov b, [d]
4891   2572 FD 77         inc b
4892   2574 FA F5 FF      lea d, [bp + -11] ; $x
4893   2577 FD 43         mov [d], b
4894   2579 FD 7D         dec b
4895   257B 74            mov d, b
4896   257C 32            mov bl, [d]
4897   257D A7 00         mov bh, 0
4898   257F 56            add b, a
4899   2580 11            mov a, b
4900   2581 26 30 00      mov b, $30
4901   2584 60            sub a, b
4902   2585 27            mov b, a
4903   2586 E4            pop a
4904   2587             ; END TERMS
4905   2587 E7            pop d
4906   2588 FD 43         mov [d], b
4907   258A             ; return v; 
4908   258A FA FF FF      lea d, [bp + -1] ; $v
4909   258D 2A            mov b, [d]
4910   258E F9            leave
4911   258F 09            ret
4912   2590             
4913   2590             input_int:
4914   2590 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4915   2593             ; char x[8]; 
4916   2593 52 08 00      sub sp, 8
4917   2596             ; input(x, 8); 
4918   2596 26 08 00      mov b, $8
4919   2599 DD            push bl
4920   259A FA F9 FF      lea d, [bp + -7] ; $x
4921   259D 2D            mov b, d
4922   259E FD AB         swp b
4923   25A0 D8            push b
4924   25A1 07 48 23      call input
4925   25A4 51 03 00      add sp, 3
4926   25A7             ; if (!is_digit(*x)) 
4927   25A7             _if69_cond:
4928   25A7 FA F9 FF      lea d, [bp + -7] ; $x
4929   25AA 2D            mov b, d
4930   25AB 74            mov d, b
4931   25AC 32            mov bl, [d]
4932   25AD A7 00         mov bh, 0
4933   25AF DD            push bl
4934   25B0 07 A3 1F      call is_digit
4935   25B3 51 01 00      add sp, 1
4936   25B6 C0 00 00      cmp b, 0
4937   25B9 FD 71         seq ; !
4938   25BB C0 00 00      cmp b, 0
4939   25BE C6 CB 25      je _if69_exit
4940   25C1             _if69_true:
4941   25C1             ; return -1; 
4942   25C1 26 01 00      mov b, $1
4943   25C4 FD 97         neg b
4944   25C6 F9            leave
4945   25C7 09            ret
4946   25C8 0A CB 25      jmp _if69_exit
4947   25CB             _if69_exit:
4948   25CB             ; return atoi(x); 
4949   25CB FA F9 FF      lea d, [bp + -7] ; $x
4950   25CE 2D            mov b, d
4951   25CF FD AB         swp b
4952   25D1 D8            push b
4953   25D2 07 2E 06      call atoi
4954   25D5 51 02 00      add sp, 2
4955   25D8 F9            leave
4956   25D9 09            ret
4957   25DA             
4958   25DA             print100:
4959   25DA F8 00 00      enter 0 ; (push bp; mov bp, sp)
4960   25DD             ; static char buf[16]; 
4961   25DD 52 10 00      sub sp, 16
4962   25E0             ; char *p = buf; 
4963   25E0 52 02 00      sub sp, 2
4964   25E3             ; --- START LOCAL VAR INITIALIZATION
4965   25E3 FA FF FF      lea d, [bp + -1] ; $p
4966   25E6 DA            push d
4967   25E7 3B 75 6A      mov d, st_print100_buf_dt ; static buf
4968   25EA 2D            mov b, d
4969   25EB E7            pop d
4970   25EC FD 3E         mov [d], bl
4971   25EE             ; --- END LOCAL VAR INITIALIZATION
4972   25EE             ; if (v < 0) { 
4973   25EE             _if70_cond:
4974   25EE FA 05 00      lea d, [bp + 5] ; $v
4975   25F1 2A            mov b, [d]
4976   25F2             ; START RELATIONAL
4977   25F2 D7            push a
4978   25F3 11            mov a, b
4979   25F4 26 00 00      mov b, $0
4980   25F7 B0            cmp a, b
4981   25F8 FD 73         slt ; < (signed)
4982   25FA E4            pop a
4983   25FB             ; END RELATIONAL
4984   25FB C0 00 00      cmp b, 0
4985   25FE C6 25 26      je _if70_exit
4986   2601             _if70_true:
4987   2601             ; v = -v; 
4988   2601 FA 05 00      lea d, [bp + 5] ; $v
4989   2604 DA            push d
4990   2605 FA 05 00      lea d, [bp + 5] ; $v
4991   2608 2A            mov b, [d]
4992   2609 FD 97         neg b
4993   260B E7            pop d
4994   260C FD 43         mov [d], b
4995   260E             ; *p++ = '-'; 
4996   260E FA FF FF      lea d, [bp + -1] ; $p
4997   2611 2A            mov b, [d]
4998   2612 FD 77         inc b
4999   2614 FA FF FF      lea d, [bp + -1] ; $p
5000   2617 FD 43         mov [d], b
5001   2619 FD 7D         dec b
5002   261B D8            push b
5003   261C 26 2D 00      mov b, $2d
5004   261F E7            pop d
5005   2620 FD 3E         mov [d], bl
5006   2622 0A 25 26      jmp _if70_exit
5007   2625             _if70_exit:
5008   2625             ; p = p + sprintf(p, "%d.%d", v / 100, v%100); 
5009   2625 FA FF FF      lea d, [bp + -1] ; $p
5010   2628 DA            push d
5011   2629 FA FF FF      lea d, [bp + -1] ; $p
5012   262C 2A            mov b, [d]
5013   262D             ; START TERMS
5014   262D D7            push a
5015   262E 11            mov a, b
5016   262F FA 05 00      lea d, [bp + 5] ; $v
5017   2632 2A            mov b, [d]
5018   2633             ; START FACTORS
5019   2633 D7            push a
5020   2634 11            mov a, b
5021   2635 26 64 00      mov b, $64
5022   2638 AE            div a, b ; 
5023   2639 11            mov a, b
5024   263A 27            mov b, a
5025   263B E4            pop a
5026   263C             ; END FACTORS
5027   263C FD AB         swp b
5028   263E D8            push b
5029   263F FA 05 00      lea d, [bp + 5] ; $v
5030   2642 2A            mov b, [d]
5031   2643             ; START FACTORS
5032   2643 D7            push a
5033   2644 11            mov a, b
5034   2645 26 64 00      mov b, $64
5035   2648 AE            div a, b
5036   2649 27            mov b, a
5037   264A E4            pop a
5038   264B             ; END FACTORS
5039   264B FD AB         swp b
5040   264D D8            push b
5041   264E 26 F1 6B      mov b, _s33 ; "%d.%d"
5042   2651 FD AB         swp b
5043   2653 D8            push b
5044   2654 FA FF FF      lea d, [bp + -1] ; $p
5045   2657 2A            mov b, [d]
5046   2658 FD AB         swp b
5047   265A D8            push b
5048   265B 07 6D 0C      call sprintf
5049   265E 51 08 00      add sp, 8
5050   2661 56            add b, a
5051   2662 E4            pop a
5052   2663             ; END TERMS
5053   2663 E7            pop d
5054   2664 FD 43         mov [d], b
5055   2666             ; return buf; 
5056   2666 3B 75 6A      mov d, st_print100_buf_dt ; static buf
5057   2669 2D            mov b, d
5058   266A F9            leave
5059   266B 09            ret
5060   266C             
5061   266C             inoperable:
5062   266C F8 00 00      enter 0 ; (push bp; mov bp, sp)
5063   266F             ; if (damage[u] < 0) { 
5064   266F             _if71_cond:
5065   266F 3B 8A 68      mov d, _damage_data ; $damage
5066   2672 D7            push a
5067   2673 DA            push d
5068   2674 FA 05 00      lea d, [bp + 5] ; $u
5069   2677 32            mov bl, [d]
5070   2678 A7 00         mov bh, 0
5071   267A E7            pop d
5072   267B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5073   267F E4            pop a
5074   2680 2A            mov b, [d]
5075   2681             ; START RELATIONAL
5076   2681 D7            push a
5077   2682 11            mov a, b
5078   2683 26 00 00      mov b, $0
5079   2686 B0            cmp a, b
5080   2687 FD 73         slt ; < (signed)
5081   2689 E4            pop a
5082   268A             ; END RELATIONAL
5083   268A C0 00 00      cmp b, 0
5084   268D C6 D7 26      je _if71_exit
5085   2690             _if71_true:
5086   2690             ; printf("%s %s inoperable.\n", 
5087   2690             _ternary73_cond:
5088   2690 FA 05 00      lea d, [bp + 5] ; $u
5089   2693 32            mov bl, [d]
5090   2694 A7 00         mov bh, 0
5091   2696             ; START RELATIONAL
5092   2696 D7            push a
5093   2697 11            mov a, b
5094   2698 26 05 00      mov b, $5
5095   269B B0            cmp a, b
5096   269C FD 71         seq ; ==
5097   269E E4            pop a
5098   269F             ; END RELATIONAL
5099   269F C0 00 00      cmp b, 0
5100   26A2 C6 AB 26      je _ternary73_false
5101   26A5             _ternary73_true:
5102   26A5 26 F7 6B      mov b, _s34 ; "are"
5103   26A8 0A AE 26      jmp _ternary73_exit
5104   26AB             _ternary73_false:
5105   26AB 26 FB 6B      mov b, _s35 ; "is"
5106   26AE             _ternary73_exit:
5107   26AE FD AB         swp b
5108   26B0 D8            push b
5109   26B1 FA 05 00      lea d, [bp + 5] ; $u
5110   26B4 32            mov bl, [d]
5111   26B5 A7 00         mov bh, 0
5112   26B7 FD AB         swp b
5113   26B9 D8            push b
5114   26BA 07 40 64      call get_device_name
5115   26BD 51 02 00      add sp, 2
5116   26C0 FD AB         swp b
5117   26C2 D8            push b
5118   26C3 26 FE 6B      mov b, _s36 ; "%s %s inoperable.\n"
5119   26C6 FD AB         swp b
5120   26C8 D8            push b
5121   26C9 07 BA 07      call printf
5122   26CC 51 06 00      add sp, 6
5123   26CF             ; return 1; 
5124   26CF 26 01 00      mov b, $1
5125   26D2 F9            leave
5126   26D3 09            ret
5127   26D4 0A D7 26      jmp _if71_exit
5128   26D7             _if71_exit:
5129   26D7             ; return 0; 
5130   26D7 26 00 00      mov b, $0
5131   26DA F9            leave
5132   26DB 09            ret
5133   26DC             
5134   26DC             intro:
5135   26DC F8 00 00      enter 0 ; (push bp; mov bp, sp)
5136   26DF             ; showfile("startrek.intro"); 
5137   26DF 26 11 6C      mov b, _s37 ; "startrek.intro"
5138   26E2 FD AB         swp b
5139   26E4 D8            push b
5140   26E5 07 9E 67      call showfile
5141   26E8 51 02 00      add sp, 2
5142   26EB             ; if (yesno()) 
5143   26EB             _if74_cond:
5144   26EB 07 CE 23      call yesno
5145   26EE C0 00 00      cmp b, 0
5146   26F1 C6 03 27      je _if74_exit
5147   26F4             _if74_true:
5148   26F4             ; showfile("startrek.doc"); 
5149   26F4 26 20 6C      mov b, _s38 ; "startrek.doc"
5150   26F7 FD AB         swp b
5151   26F9 D8            push b
5152   26FA 07 9E 67      call showfile
5153   26FD 51 02 00      add sp, 2
5154   2700 0A 03 27      jmp _if74_exit
5155   2703             _if74_exit:
5156   2703             ; showfile("startrek.logo"); 
5157   2703 26 2D 6C      mov b, _s39 ; "startrek.logo"
5158   2706 FD AB         swp b
5159   2708 D8            push b
5160   2709 07 9E 67      call showfile
5161   270C 51 02 00      add sp, 2
5162   270F             ; stardate = TO_FIXED((get_rand(20) + 20) * 100); 
5163   270F 3B A2 68      mov d, _stardate ; $stardate
5164   2712 DA            push d
5165   2713 26 14 00      mov b, $14
5166   2716 FD AB         swp b
5167   2718 D8            push b
5168   2719 07 E8 22      call get_rand
5169   271C 51 02 00      add sp, 2
5170   271F             ; START TERMS
5171   271F D7            push a
5172   2720 11            mov a, b
5173   2721 26 14 00      mov b, $14
5174   2724 56            add b, a
5175   2725 E4            pop a
5176   2726             ; END TERMS
5177   2726             ; START FACTORS
5178   2726 D7            push a
5179   2727 11            mov a, b
5180   2728 26 64 00      mov b, $64
5181   272B AC            mul a, b ; *
5182   272C 11            mov a, b
5183   272D 27            mov b, a
5184   272E E4            pop a
5185   272F             ; END FACTORS
5186   272F FD AB         swp b
5187   2731 D8            push b
5188   2732 07 A2 22      call TO_FIXED
5189   2735 51 02 00      add sp, 2
5190   2738 E7            pop d
5191   2739 FD 43         mov [d], b
5192   273B F9            leave
5193   273C 09            ret
5194   273D             
5195   273D             new_game:
5196   273D F8 00 00      enter 0 ; (push bp; mov bp, sp)
5197   2740             ; char cmd[4]; 
5198   2740 52 04 00      sub sp, 4
5199   2743             ; initialize(); 
5200   2743 07 CF 29      call initialize
5201   2746             ; new_quadrant(); 
5202   2746 07 78 2E      call new_quadrant
5203   2749             ; short_range_scan(); 
5204   2749 07 8C 3B      call short_range_scan
5205   274C             ; while (1) { 
5206   274C             _while75_cond:
5207   274C 26 01 00      mov b, $1
5208   274F C0 00 00      cmp b, 0
5209   2752 C6 CD 29      je _while75_exit
5210   2755             _while75_block:
5211   2755             ; if (shield + energy <= 10 && (energy < 10 || damage[7] < 0)) { 
5212   2755             _if76_cond:
5213   2755 3B 83 68      mov d, _shield ; $shield
5214   2758 2A            mov b, [d]
5215   2759             ; START TERMS
5216   2759 D7            push a
5217   275A 11            mov a, b
5218   275B 3B C8 67      mov d, _energy ; $energy
5219   275E 2A            mov b, [d]
5220   275F 56            add b, a
5221   2760 E4            pop a
5222   2761             ; END TERMS
5223   2761             ; START RELATIONAL
5224   2761 D7            push a
5225   2762 11            mov a, b
5226   2763 26 0A 00      mov b, $a
5227   2766 B0            cmp a, b
5228   2767 FD 74         sle ; <= (signed)
5229   2769 E4            pop a
5230   276A             ; END RELATIONAL
5231   276A             ; START LOGICAL AND
5232   276A D7            push a
5233   276B 11            mov a, b
5234   276C 3B C8 67      mov d, _energy ; $energy
5235   276F 2A            mov b, [d]
5236   2770             ; START RELATIONAL
5237   2770 D7            push a
5238   2771 11            mov a, b
5239   2772 26 0A 00      mov b, $a
5240   2775 B0            cmp a, b
5241   2776 FD 73         slt ; < (signed)
5242   2778 E4            pop a
5243   2779             ; END RELATIONAL
5244   2779             ; START LOGICAL OR
5245   2779 D7            push a
5246   277A 11            mov a, b
5247   277B 3B 8A 68      mov d, _damage_data ; $damage
5248   277E D7            push a
5249   277F DA            push d
5250   2780 26 07 00      mov b, $7
5251   2783 E7            pop d
5252   2784 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5253   2788 E4            pop a
5254   2789 2A            mov b, [d]
5255   278A             ; START RELATIONAL
5256   278A D7            push a
5257   278B 11            mov a, b
5258   278C 26 00 00      mov b, $0
5259   278F B0            cmp a, b
5260   2790 FD 73         slt ; < (signed)
5261   2792 E4            pop a
5262   2793             ; END RELATIONAL
5263   2793 FD A8         sor a, b ; ||
5264   2795 E4            pop a
5265   2796             ; END LOGICAL OR
5266   2796 FD A7         sand a, b
5267   2798 E4            pop a
5268   2799             ; END LOGICAL AND
5269   2799 C0 00 00      cmp b, 0
5270   279C C6 B1 27      je _if76_exit
5271   279F             _if76_true:
5272   279F             ; showfile("startrek.fatal"); 
5273   279F 26 3B 6C      mov b, _s40 ; "startrek.fatal"
5274   27A2 FD AB         swp b
5275   27A4 D8            push b
5276   27A5 07 9E 67      call showfile
5277   27A8 51 02 00      add sp, 2
5278   27AB             ; end_of_time(); 
5279   27AB 07 E9 5B      call end_of_time
5280   27AE 0A B1 27      jmp _if76_exit
5281   27B1             _if76_exit:
5282   27B1             ; puts("Command? "); 
5283   27B1 26 4A 6C      mov b, _s41 ; "Command? "
5284   27B4 FD AB         swp b
5285   27B6 D8            push b
5286   27B7 07 B8 1A      call puts
5287   27BA 51 02 00      add sp, 2
5288   27BD             ; input(cmd, 4); 
5289   27BD 26 04 00      mov b, $4
5290   27C0 DD            push bl
5291   27C1 FA FD FF      lea d, [bp + -3] ; $cmd
5292   27C4 2D            mov b, d
5293   27C5 FD AB         swp b
5294   27C7 D8            push b
5295   27C8 07 48 23      call input
5296   27CB 51 03 00      add sp, 3
5297   27CE             ; putchar('\n'); 
5298   27CE 26 0A 00      mov b, $a
5299   27D1 DD            push bl
5300   27D2 07 82 1A      call putchar
5301   27D5 51 01 00      add sp, 1
5302   27D8             ; if (!strncmp(cmd, "nav", 3)) 
5303   27D8             _if77_cond:
5304   27D8 26 03 00      mov b, $3
5305   27DB FD AB         swp b
5306   27DD D8            push b
5307   27DE 26 54 6C      mov b, _s42 ; "nav"
5308   27E1 FD AB         swp b
5309   27E3 D8            push b
5310   27E4 FA FD FF      lea d, [bp + -3] ; $cmd
5311   27E7 2D            mov b, d
5312   27E8 FD AB         swp b
5313   27EA D8            push b
5314   27EB 07 D3 04      call strncmp
5315   27EE 51 06 00      add sp, 6
5316   27F1 C0 00 00      cmp b, 0
5317   27F4 FD 71         seq ; !
5318   27F6 C0 00 00      cmp b, 0
5319   27F9 C6 02 28      je _if77_else
5320   27FC             _if77_true:
5321   27FC             ; course_control(); 
5322   27FC 07 0B 32      call course_control
5323   27FF 0A CA 29      jmp _if77_exit
5324   2802             _if77_else:
5325   2802             ; if (!strncmp(cmd, "srs", 3)) 
5326   2802             _if78_cond:
5327   2802 26 03 00      mov b, $3
5328   2805 FD AB         swp b
5329   2807 D8            push b
5330   2808 26 58 6C      mov b, _s43 ; "srs"
5331   280B FD AB         swp b
5332   280D D8            push b
5333   280E FA FD FF      lea d, [bp + -3] ; $cmd
5334   2811 2D            mov b, d
5335   2812 FD AB         swp b
5336   2814 D8            push b
5337   2815 07 D3 04      call strncmp
5338   2818 51 06 00      add sp, 6
5339   281B C0 00 00      cmp b, 0
5340   281E FD 71         seq ; !
5341   2820 C0 00 00      cmp b, 0
5342   2823 C6 2C 28      je _if78_else
5343   2826             _if78_true:
5344   2826             ; short_range_scan(); 
5345   2826 07 8C 3B      call short_range_scan
5346   2829 0A CA 29      jmp _if78_exit
5347   282C             _if78_else:
5348   282C             ; if (!strncmp(cmd, "lrs", 3)) 
5349   282C             _if79_cond:
5350   282C 26 03 00      mov b, $3
5351   282F FD AB         swp b
5352   2831 D8            push b
5353   2832 26 5C 6C      mov b, _s44 ; "lrs"
5354   2835 FD AB         swp b
5355   2837 D8            push b
5356   2838 FA FD FF      lea d, [bp + -3] ; $cmd
5357   283B 2D            mov b, d
5358   283C FD AB         swp b
5359   283E D8            push b
5360   283F 07 D3 04      call strncmp
5361   2842 51 06 00      add sp, 6
5362   2845 C0 00 00      cmp b, 0
5363   2848 FD 71         seq ; !
5364   284A C0 00 00      cmp b, 0
5365   284D C6 56 28      je _if79_else
5366   2850             _if79_true:
5367   2850             ; long_range_scan(); 
5368   2850 07 1A 40      call long_range_scan
5369   2853 0A CA 29      jmp _if79_exit
5370   2856             _if79_else:
5371   2856             ; if (!strncmp(cmd, "pha", 3)) 
5372   2856             _if80_cond:
5373   2856 26 03 00      mov b, $3
5374   2859 FD AB         swp b
5375   285B D8            push b
5376   285C 26 60 6C      mov b, _s45 ; "pha"
5377   285F FD AB         swp b
5378   2861 D8            push b
5379   2862 FA FD FF      lea d, [bp + -3] ; $cmd
5380   2865 2D            mov b, d
5381   2866 FD AB         swp b
5382   2868 D8            push b
5383   2869 07 D3 04      call strncmp
5384   286C 51 06 00      add sp, 6
5385   286F C0 00 00      cmp b, 0
5386   2872 FD 71         seq ; !
5387   2874 C0 00 00      cmp b, 0
5388   2877 C6 80 28      je _if80_else
5389   287A             _if80_true:
5390   287A             ; phaser_control(); 
5391   287A 07 3B 42      call phaser_control
5392   287D 0A CA 29      jmp _if80_exit
5393   2880             _if80_else:
5394   2880             ; if (!strncmp(cmd, "tor", 3)) 
5395   2880             _if81_cond:
5396   2880 26 03 00      mov b, $3
5397   2883 FD AB         swp b
5398   2885 D8            push b
5399   2886 26 64 6C      mov b, _s46 ; "tor"
5400   2889 FD AB         swp b
5401   288B D8            push b
5402   288C FA FD FF      lea d, [bp + -3] ; $cmd
5403   288F 2D            mov b, d
5404   2890 FD AB         swp b
5405   2892 D8            push b
5406   2893 07 D3 04      call strncmp
5407   2896 51 06 00      add sp, 6
5408   2899 C0 00 00      cmp b, 0
5409   289C FD 71         seq ; !
5410   289E C0 00 00      cmp b, 0
5411   28A1 C6 AA 28      je _if81_else
5412   28A4             _if81_true:
5413   28A4             ; photon_torpedoes(); 
5414   28A4 07 07 47      call photon_torpedoes
5415   28A7 0A CA 29      jmp _if81_exit
5416   28AA             _if81_else:
5417   28AA             ; if (!strncmp(cmd, "shi", 3)) 
5418   28AA             _if82_cond:
5419   28AA 26 03 00      mov b, $3
5420   28AD FD AB         swp b
5421   28AF D8            push b
5422   28B0 26 68 6C      mov b, _s47 ; "shi"
5423   28B3 FD AB         swp b
5424   28B5 D8            push b
5425   28B6 FA FD FF      lea d, [bp + -3] ; $cmd
5426   28B9 2D            mov b, d
5427   28BA FD AB         swp b
5428   28BC D8            push b
5429   28BD 07 D3 04      call strncmp
5430   28C0 51 06 00      add sp, 6
5431   28C3 C0 00 00      cmp b, 0
5432   28C6 FD 71         seq ; !
5433   28C8 C0 00 00      cmp b, 0
5434   28CB C6 D4 28      je _if82_else
5435   28CE             _if82_true:
5436   28CE             ; shield_control(); 
5437   28CE 07 AE 4F      call shield_control
5438   28D1 0A CA 29      jmp _if82_exit
5439   28D4             _if82_else:
5440   28D4             ; if (!strncmp(cmd, "dam", 3)) 
5441   28D4             _if83_cond:
5442   28D4 26 03 00      mov b, $3
5443   28D7 FD AB         swp b
5444   28D9 D8            push b
5445   28DA 26 6C 6C      mov b, _s48 ; "dam"
5446   28DD FD AB         swp b
5447   28DF D8            push b
5448   28E0 FA FD FF      lea d, [bp + -3] ; $cmd
5449   28E3 2D            mov b, d
5450   28E4 FD AB         swp b
5451   28E6 D8            push b
5452   28E7 07 D3 04      call strncmp
5453   28EA 51 06 00      add sp, 6
5454   28ED C0 00 00      cmp b, 0
5455   28F0 FD 71         seq ; !
5456   28F2 C0 00 00      cmp b, 0
5457   28F5 C6 FE 28      je _if83_else
5458   28F8             _if83_true:
5459   28F8             ; damage_control(); 
5460   28F8 07 50 4D      call damage_control
5461   28FB 0A CA 29      jmp _if83_exit
5462   28FE             _if83_else:
5463   28FE             ; if (!strncmp(cmd, "com", 3)) 
5464   28FE             _if84_cond:
5465   28FE 26 03 00      mov b, $3
5466   2901 FD AB         swp b
5467   2903 D8            push b
5468   2904 26 70 6C      mov b, _s49 ; "com"
5469   2907 FD AB         swp b
5470   2909 D8            push b
5471   290A FA FD FF      lea d, [bp + -3] ; $cmd
5472   290D 2D            mov b, d
5473   290E FD AB         swp b
5474   2910 D8            push b
5475   2911 07 D3 04      call strncmp
5476   2914 51 06 00      add sp, 6
5477   2917 C0 00 00      cmp b, 0
5478   291A FD 71         seq ; !
5479   291C C0 00 00      cmp b, 0
5480   291F C6 28 29      je _if84_else
5481   2922             _if84_true:
5482   2922             ; library_computer(); 
5483   2922 07 8A 50      call library_computer
5484   2925 0A CA 29      jmp _if84_exit
5485   2928             _if84_else:
5486   2928             ; if (!strncmp(cmd, "xxx", 3)) 
5487   2928             _if85_cond:
5488   2928 26 03 00      mov b, $3
5489   292B FD AB         swp b
5490   292D D8            push b
5491   292E 26 74 6C      mov b, _s50 ; "xxx"
5492   2931 FD AB         swp b
5493   2933 D8            push b
5494   2934 FA FD FF      lea d, [bp + -3] ; $cmd
5495   2937 2D            mov b, d
5496   2938 FD AB         swp b
5497   293A D8            push b
5498   293B 07 D3 04      call strncmp
5499   293E 51 06 00      add sp, 6
5500   2941 C0 00 00      cmp b, 0
5501   2944 FD 71         seq ; !
5502   2946 C0 00 00      cmp b, 0
5503   2949 C6 52 29      je _if85_else
5504   294C             _if85_true:
5505   294C             ; resign_commision(); 
5506   294C 07 0D 5C      call resign_commision
5507   294F 0A CA 29      jmp _if85_exit
5508   2952             _if85_else:
5509   2952             ; puts("Enter one of the following:\n"); 
5510   2952 26 78 6C      mov b, _s51 ; "Enter one of the following:\n"
5511   2955 FD AB         swp b
5512   2957 D8            push b
5513   2958 07 B8 1A      call puts
5514   295B 51 02 00      add sp, 2
5515   295E             ; puts("  nav - To Set Course"); 
5516   295E 26 95 6C      mov b, _s52 ; "  nav - To Set Course"
5517   2961 FD AB         swp b
5518   2963 D8            push b
5519   2964 07 B8 1A      call puts
5520   2967 51 02 00      add sp, 2
5521   296A             ; puts("  srs - Short Range Sensors"); 
5522   296A 26 AB 6C      mov b, _s53 ; "  srs - Short Range Sensors"
5523   296D FD AB         swp b
5524   296F D8            push b
5525   2970 07 B8 1A      call puts
5526   2973 51 02 00      add sp, 2
5527   2976             ; puts("  lrs - Long Range Sensors"); 
5528   2976 26 C7 6C      mov b, _s54 ; "  lrs - Long Range Sensors"
5529   2979 FD AB         swp b
5530   297B D8            push b
5531   297C 07 B8 1A      call puts
5532   297F 51 02 00      add sp, 2
5533   2982             ; puts("  pha - Phasers"); 
5534   2982 26 E2 6C      mov b, _s55 ; "  pha - Phasers"
5535   2985 FD AB         swp b
5536   2987 D8            push b
5537   2988 07 B8 1A      call puts
5538   298B 51 02 00      add sp, 2
5539   298E             ; puts("  tor - Photon Torpedoes"); 
5540   298E 26 F2 6C      mov b, _s56 ; "  tor - Photon Torpedoes"
5541   2991 FD AB         swp b
5542   2993 D8            push b
5543   2994 07 B8 1A      call puts
5544   2997 51 02 00      add sp, 2
5545   299A             ; puts("  shi - Shield Control"); 
5546   299A 26 0B 6D      mov b, _s57 ; "  shi - Shield Control"
5547   299D FD AB         swp b
5548   299F D8            push b
5549   29A0 07 B8 1A      call puts
5550   29A3 51 02 00      add sp, 2
5551   29A6             ; puts("  dam - Damage Control"); 
5552   29A6 26 22 6D      mov b, _s58 ; "  dam - Damage Control"
5553   29A9 FD AB         swp b
5554   29AB D8            push b
5555   29AC 07 B8 1A      call puts
5556   29AF 51 02 00      add sp, 2
5557   29B2             ; puts("  com - Library Computer"); 
5558   29B2 26 39 6D      mov b, _s59 ; "  com - Library Computer"
5559   29B5 FD AB         swp b
5560   29B7 D8            push b
5561   29B8 07 B8 1A      call puts
5562   29BB 51 02 00      add sp, 2
5563   29BE             ; puts("  xxx - Resign Command\n"); 
5564   29BE 26 52 6D      mov b, _s60 ; "  xxx - Resign Command\n"
5565   29C1 FD AB         swp b
5566   29C3 D8            push b
5567   29C4 07 B8 1A      call puts
5568   29C7 51 02 00      add sp, 2
5569   29CA             _if85_exit:
5570   29CA             _if84_exit:
5571   29CA             _if83_exit:
5572   29CA             _if82_exit:
5573   29CA             _if81_exit:
5574   29CA             _if80_exit:
5575   29CA             _if79_exit:
5576   29CA             _if78_exit:
5577   29CA             _if77_exit:
5578   29CA 0A 4C 27      jmp _while75_cond
5579   29CD             _while75_exit:
5580   29CD F9            leave
5581   29CE 09            ret
5582   29CF             
5583   29CF             initialize:
5584   29CF F8 00 00      enter 0 ; (push bp; mov bp, sp)
5585   29D2             ; int i, j; 
5586   29D2 52 02 00      sub sp, 2
5587   29D5 52 02 00      sub sp, 2
5588   29D8             ; unsigned char                         yp, xp; 
5589   29D8 52 01 00      sub sp, 1
5590   29DB 52 01 00      sub sp, 1
5591   29DE             ; unsigned char                         r; 
5592   29DE 52 01 00      sub sp, 1
5593   29E1             ; time_start = FROM_FIXED(stardate); 
5594   29E1 3B 86 68      mov d, _time_start ; $time_start
5595   29E4 DA            push d
5596   29E5 3B A2 68      mov d, _stardate ; $stardate
5597   29E8 2A            mov b, [d]
5598   29E9 FD AB         swp b
5599   29EB D8            push b
5600   29EC 07 B4 22      call FROM_FIXED
5601   29EF 51 02 00      add sp, 2
5602   29F2 E7            pop d
5603   29F3 FD 43         mov [d], b
5604   29F5             ; time_up = 25 + get_rand(10); 
5605   29F5 3B 88 68      mov d, _time_up ; $time_up
5606   29F8 DA            push d
5607   29F9 26 19 00      mov b, $19
5608   29FC             ; START TERMS
5609   29FC D7            push a
5610   29FD 11            mov a, b
5611   29FE 26 0A 00      mov b, $a
5612   2A01 FD AB         swp b
5613   2A03 D8            push b
5614   2A04 07 E8 22      call get_rand
5615   2A07 51 02 00      add sp, 2
5616   2A0A 56            add b, a
5617   2A0B E4            pop a
5618   2A0C             ; END TERMS
5619   2A0C E7            pop d
5620   2A0D FD 43         mov [d], b
5621   2A0F             ; docked = 0; 
5622   2A0F 3B C7 67      mov d, _docked ; $docked
5623   2A12 DA            push d
5624   2A13 26 00 00      mov b, $0
5625   2A16 E7            pop d
5626   2A17 FD 3E         mov [d], bl
5627   2A19             ; energy = energy0; 
5628   2A19 3B C8 67      mov d, _energy ; $energy
5629   2A1C DA            push d
5630   2A1D 3B CA 67      mov d, _energy0 ; $energy0
5631   2A20 2A            mov b, [d]
5632   2A21 E7            pop d
5633   2A22 FD 43         mov [d], b
5634   2A24             ; torps = torps0; 
5635   2A24 3B 7D 68      mov d, _torps ; $torps
5636   2A27 DA            push d
5637   2A28 3B 7E 68      mov d, _torps0 ; $torps0
5638   2A2B 32            mov bl, [d]
5639   2A2C A7 00         mov bh, 0
5640   2A2E E7            pop d
5641   2A2F FD 3E         mov [d], bl
5642   2A31             ; shield = 0; 
5643   2A31 3B 83 68      mov d, _shield ; $shield
5644   2A34 DA            push d
5645   2A35 26 00 00      mov b, $0
5646   2A38 E7            pop d
5647   2A39 FD 43         mov [d], b
5648   2A3B             ; quad_y = rand8(); 
5649   2A3B 3B 7F 68      mov d, _quad_y ; $quad_y
5650   2A3E DA            push d
5651   2A3F 07 37 23      call rand8
5652   2A42 E7            pop d
5653   2A43 FD 43         mov [d], b
5654   2A45             ; quad_x = rand8(); 
5655   2A45 3B 81 68      mov d, _quad_x ; $quad_x
5656   2A48 DA            push d
5657   2A49 07 37 23      call rand8
5658   2A4C E7            pop d
5659   2A4D FD 43         mov [d], b
5660   2A4F             ; ship_y = TO_FIXED00(rand8()); 
5661   2A4F 3B 9E 68      mov d, _ship_y ; $ship_y
5662   2A52 DA            push d
5663   2A53 07 37 23      call rand8
5664   2A56 FD AB         swp b
5665   2A58 D8            push b
5666   2A59 07 C5 22      call TO_FIXED00
5667   2A5C 51 02 00      add sp, 2
5668   2A5F E7            pop d
5669   2A60 FD 43         mov [d], b
5670   2A62             ; ship_x = TO_FIXED00(rand8()); 
5671   2A62 3B A0 68      mov d, _ship_x ; $ship_x
5672   2A65 DA            push d
5673   2A66 07 37 23      call rand8
5674   2A69 FD AB         swp b
5675   2A6B D8            push b
5676   2A6C 07 C5 22      call TO_FIXED00
5677   2A6F 51 02 00      add sp, 2
5678   2A72 E7            pop d
5679   2A73 FD 43         mov [d], b
5680   2A75             ; for (i = 1; i <= 8; i++) 
5681   2A75             _for86_init:
5682   2A75 FA FF FF      lea d, [bp + -1] ; $i
5683   2A78 DA            push d
5684   2A79 26 01 00      mov b, $1
5685   2A7C E7            pop d
5686   2A7D FD 43         mov [d], b
5687   2A7F             _for86_cond:
5688   2A7F FA FF FF      lea d, [bp + -1] ; $i
5689   2A82 2A            mov b, [d]
5690   2A83             ; START RELATIONAL
5691   2A83 D7            push a
5692   2A84 11            mov a, b
5693   2A85 26 08 00      mov b, $8
5694   2A88 B0            cmp a, b
5695   2A89 FD 74         sle ; <= (signed)
5696   2A8B E4            pop a
5697   2A8C             ; END RELATIONAL
5698   2A8C C0 00 00      cmp b, 0
5699   2A8F C6 B8 2A      je _for86_exit
5700   2A92             _for86_block:
5701   2A92             ; damage[i] = 0; 
5702   2A92 3B 8A 68      mov d, _damage_data ; $damage
5703   2A95 D7            push a
5704   2A96 DA            push d
5705   2A97 FA FF FF      lea d, [bp + -1] ; $i
5706   2A9A 2A            mov b, [d]
5707   2A9B E7            pop d
5708   2A9C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5709   2AA0 E4            pop a
5710   2AA1 DA            push d
5711   2AA2 26 00 00      mov b, $0
5712   2AA5 E7            pop d
5713   2AA6 FD 43         mov [d], b
5714   2AA8             _for86_update:
5715   2AA8 FA FF FF      lea d, [bp + -1] ; $i
5716   2AAB 2A            mov b, [d]
5717   2AAC FD 77         inc b
5718   2AAE FA FF FF      lea d, [bp + -1] ; $i
5719   2AB1 FD 43         mov [d], b
5720   2AB3 FD 7D         dec b
5721   2AB5 0A 7F 2A      jmp _for86_cond
5722   2AB8             _for86_exit:
5723   2AB8             ; for (i = 1; i <= 8; i++) { 
5724   2AB8             _for87_init:
5725   2AB8 FA FF FF      lea d, [bp + -1] ; $i
5726   2ABB DA            push d
5727   2ABC 26 01 00      mov b, $1
5728   2ABF E7            pop d
5729   2AC0 FD 43         mov [d], b
5730   2AC2             _for87_cond:
5731   2AC2 FA FF FF      lea d, [bp + -1] ; $i
5732   2AC5 2A            mov b, [d]
5733   2AC6             ; START RELATIONAL
5734   2AC6 D7            push a
5735   2AC7 11            mov a, b
5736   2AC8 26 08 00      mov b, $8
5737   2ACB B0            cmp a, b
5738   2ACC FD 74         sle ; <= (signed)
5739   2ACE E4            pop a
5740   2ACF             ; END RELATIONAL
5741   2ACF C0 00 00      cmp b, 0
5742   2AD2 C6 3B 2C      je _for87_exit
5743   2AD5             _for87_block:
5744   2AD5             ; for (j = 1; j <= 8; j++) { 
5745   2AD5             _for88_init:
5746   2AD5 FA FD FF      lea d, [bp + -3] ; $j
5747   2AD8 DA            push d
5748   2AD9 26 01 00      mov b, $1
5749   2ADC E7            pop d
5750   2ADD FD 43         mov [d], b
5751   2ADF             _for88_cond:
5752   2ADF FA FD FF      lea d, [bp + -3] ; $j
5753   2AE2 2A            mov b, [d]
5754   2AE3             ; START RELATIONAL
5755   2AE3 D7            push a
5756   2AE4 11            mov a, b
5757   2AE5 26 08 00      mov b, $8
5758   2AE8 B0            cmp a, b
5759   2AE9 FD 74         sle ; <= (signed)
5760   2AEB E4            pop a
5761   2AEC             ; END RELATIONAL
5762   2AEC C0 00 00      cmp b, 0
5763   2AEF C6 2B 2C      je _for88_exit
5764   2AF2             _for88_block:
5765   2AF2             ; r = get_rand(100); 
5766   2AF2 FA FA FF      lea d, [bp + -6] ; $r
5767   2AF5 DA            push d
5768   2AF6 26 64 00      mov b, $64
5769   2AF9 FD AB         swp b
5770   2AFB D8            push b
5771   2AFC 07 E8 22      call get_rand
5772   2AFF 51 02 00      add sp, 2
5773   2B02 E7            pop d
5774   2B03 FD 3E         mov [d], bl
5775   2B05             ; klingons = 0; 
5776   2B05 3B 7A 68      mov d, _klingons ; $klingons
5777   2B08 DA            push d
5778   2B09 26 00 00      mov b, $0
5779   2B0C E7            pop d
5780   2B0D FD 3E         mov [d], bl
5781   2B0F             ; if (r > 98) 
5782   2B0F             _if89_cond:
5783   2B0F FA FA FF      lea d, [bp + -6] ; $r
5784   2B12 32            mov bl, [d]
5785   2B13 A7 00         mov bh, 0
5786   2B15             ; START RELATIONAL
5787   2B15 D7            push a
5788   2B16 11            mov a, b
5789   2B17 26 62 00      mov b, $62
5790   2B1A B0            cmp a, b
5791   2B1B FD 81         sgu ; > (unsigned)
5792   2B1D E4            pop a
5793   2B1E             ; END RELATIONAL
5794   2B1E C0 00 00      cmp b, 0
5795   2B21 C6 31 2B      je _if89_else
5796   2B24             _if89_true:
5797   2B24             ; klingons = 3; 
5798   2B24 3B 7A 68      mov d, _klingons ; $klingons
5799   2B27 DA            push d
5800   2B28 26 03 00      mov b, $3
5801   2B2B E7            pop d
5802   2B2C FD 3E         mov [d], bl
5803   2B2E 0A 75 2B      jmp _if89_exit
5804   2B31             _if89_else:
5805   2B31             ; if (r > 95) 
5806   2B31             _if90_cond:
5807   2B31 FA FA FF      lea d, [bp + -6] ; $r
5808   2B34 32            mov bl, [d]
5809   2B35 A7 00         mov bh, 0
5810   2B37             ; START RELATIONAL
5811   2B37 D7            push a
5812   2B38 11            mov a, b
5813   2B39 26 5F 00      mov b, $5f
5814   2B3C B0            cmp a, b
5815   2B3D FD 81         sgu ; > (unsigned)
5816   2B3F E4            pop a
5817   2B40             ; END RELATIONAL
5818   2B40 C0 00 00      cmp b, 0
5819   2B43 C6 53 2B      je _if90_else
5820   2B46             _if90_true:
5821   2B46             ; klingons = 2; 
5822   2B46 3B 7A 68      mov d, _klingons ; $klingons
5823   2B49 DA            push d
5824   2B4A 26 02 00      mov b, $2
5825   2B4D E7            pop d
5826   2B4E FD 3E         mov [d], bl
5827   2B50 0A 75 2B      jmp _if90_exit
5828   2B53             _if90_else:
5829   2B53             ; if (r > 80) 
5830   2B53             _if91_cond:
5831   2B53 FA FA FF      lea d, [bp + -6] ; $r
5832   2B56 32            mov bl, [d]
5833   2B57 A7 00         mov bh, 0
5834   2B59             ; START RELATIONAL
5835   2B59 D7            push a
5836   2B5A 11            mov a, b
5837   2B5B 26 50 00      mov b, $50
5838   2B5E B0            cmp a, b
5839   2B5F FD 81         sgu ; > (unsigned)
5840   2B61 E4            pop a
5841   2B62             ; END RELATIONAL
5842   2B62 C0 00 00      cmp b, 0
5843   2B65 C6 75 2B      je _if91_exit
5844   2B68             _if91_true:
5845   2B68             ; klingons = 1; 
5846   2B68 3B 7A 68      mov d, _klingons ; $klingons
5847   2B6B DA            push d
5848   2B6C 26 01 00      mov b, $1
5849   2B6F E7            pop d
5850   2B70 FD 3E         mov [d], bl
5851   2B72 0A 75 2B      jmp _if91_exit
5852   2B75             _if91_exit:
5853   2B75             _if90_exit:
5854   2B75             _if89_exit:
5855   2B75             ; klingons_left = klingons_left + klingons; 
5856   2B75 3B 7C 68      mov d, _klingons_left ; $klingons_left
5857   2B78 DA            push d
5858   2B79 3B 7C 68      mov d, _klingons_left ; $klingons_left
5859   2B7C 32            mov bl, [d]
5860   2B7D A7 00         mov bh, 0
5861   2B7F             ; START TERMS
5862   2B7F D7            push a
5863   2B80 11            mov a, b
5864   2B81 3B 7A 68      mov d, _klingons ; $klingons
5865   2B84 32            mov bl, [d]
5866   2B85 A7 00         mov bh, 0
5867   2B87 56            add b, a
5868   2B88 E4            pop a
5869   2B89             ; END TERMS
5870   2B89 E7            pop d
5871   2B8A FD 3E         mov [d], bl
5872   2B8C             ; starbases = 0; 
5873   2B8C 3B A3 67      mov d, _starbases ; $starbases
5874   2B8F DA            push d
5875   2B90 26 00 00      mov b, $0
5876   2B93 E7            pop d
5877   2B94 FD 3E         mov [d], bl
5878   2B96             ; if (get_rand(100) > 96) 
5879   2B96             _if92_cond:
5880   2B96 26 64 00      mov b, $64
5881   2B99 FD AB         swp b
5882   2B9B D8            push b
5883   2B9C 07 E8 22      call get_rand
5884   2B9F 51 02 00      add sp, 2
5885   2BA2             ; START RELATIONAL
5886   2BA2 D7            push a
5887   2BA3 11            mov a, b
5888   2BA4 26 60 00      mov b, $60
5889   2BA7 B0            cmp a, b
5890   2BA8 FD 7F         sgt ; >
5891   2BAA E4            pop a
5892   2BAB             ; END RELATIONAL
5893   2BAB C0 00 00      cmp b, 0
5894   2BAE C6 BE 2B      je _if92_exit
5895   2BB1             _if92_true:
5896   2BB1             ; starbases = 1; 
5897   2BB1 3B A3 67      mov d, _starbases ; $starbases
5898   2BB4 DA            push d
5899   2BB5 26 01 00      mov b, $1
5900   2BB8 E7            pop d
5901   2BB9 FD 3E         mov [d], bl
5902   2BBB 0A BE 2B      jmp _if92_exit
5903   2BBE             _if92_exit:
5904   2BBE             ; starbases_left = starbases_left + starbases; 
5905   2BBE 3B A6 67      mov d, _starbases_left ; $starbases_left
5906   2BC1 DA            push d
5907   2BC2 3B A6 67      mov d, _starbases_left ; $starbases_left
5908   2BC5 32            mov bl, [d]
5909   2BC6 A7 00         mov bh, 0
5910   2BC8             ; START TERMS
5911   2BC8 D7            push a
5912   2BC9 11            mov a, b
5913   2BCA 3B A3 67      mov d, _starbases ; $starbases
5914   2BCD 32            mov bl, [d]
5915   2BCE A7 00         mov bh, 0
5916   2BD0 56            add b, a
5917   2BD1 E4            pop a
5918   2BD2             ; END TERMS
5919   2BD2 E7            pop d
5920   2BD3 FD 3E         mov [d], bl
5921   2BD5             ; map[i][j] = (klingons << 8) + (starbases << 4) + rand8(); 
5922   2BD5 3B CC 67      mov d, _map_data ; $map
5923   2BD8 D7            push a
5924   2BD9 DA            push d
5925   2BDA FA FF FF      lea d, [bp + -1] ; $i
5926   2BDD 2A            mov b, [d]
5927   2BDE E7            pop d
5928   2BDF FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5929   2BE3 DA            push d
5930   2BE4 FA FD FF      lea d, [bp + -3] ; $j
5931   2BE7 2A            mov b, [d]
5932   2BE8 E7            pop d
5933   2BE9 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5934   2BED E4            pop a
5935   2BEE DA            push d
5936   2BEF 3B 7A 68      mov d, _klingons ; $klingons
5937   2BF2 32            mov bl, [d]
5938   2BF3 A7 00         mov bh, 0
5939   2BF5             ; START SHIFT
5940   2BF5 D7            push a
5941   2BF6 11            mov a, b
5942   2BF7 26 08 00      mov b, $8
5943   2BFA FD 39         mov c, b
5944   2BFC 9D            shl a, cl
5945   2BFD 27            mov b, a
5946   2BFE E4            pop a
5947   2BFF             ; END SHIFT
5948   2BFF             ; START TERMS
5949   2BFF D7            push a
5950   2C00 11            mov a, b
5951   2C01 3B A3 67      mov d, _starbases ; $starbases
5952   2C04 32            mov bl, [d]
5953   2C05 A7 00         mov bh, 0
5954   2C07             ; START SHIFT
5955   2C07 D7            push a
5956   2C08 11            mov a, b
5957   2C09 26 04 00      mov b, $4
5958   2C0C FD 39         mov c, b
5959   2C0E 9D            shl a, cl
5960   2C0F 27            mov b, a
5961   2C10 E4            pop a
5962   2C11             ; END SHIFT
5963   2C11 56            add b, a
5964   2C12 11            mov a, b
5965   2C13 07 37 23      call rand8
5966   2C16 56            add b, a
5967   2C17 E4            pop a
5968   2C18             ; END TERMS
5969   2C18 E7            pop d
5970   2C19 FD 43         mov [d], b
5971   2C1B             _for88_update:
5972   2C1B FA FD FF      lea d, [bp + -3] ; $j
5973   2C1E 2A            mov b, [d]
5974   2C1F FD 77         inc b
5975   2C21 FA FD FF      lea d, [bp + -3] ; $j
5976   2C24 FD 43         mov [d], b
5977   2C26 FD 7D         dec b
5978   2C28 0A DF 2A      jmp _for88_cond
5979   2C2B             _for88_exit:
5980   2C2B             _for87_update:
5981   2C2B FA FF FF      lea d, [bp + -1] ; $i
5982   2C2E 2A            mov b, [d]
5983   2C2F FD 77         inc b
5984   2C31 FA FF FF      lea d, [bp + -1] ; $i
5985   2C34 FD 43         mov [d], b
5986   2C36 FD 7D         dec b
5987   2C38 0A C2 2A      jmp _for87_cond
5988   2C3B             _for87_exit:
5989   2C3B             ; if (klingons_left > time_up) 
5990   2C3B             _if93_cond:
5991   2C3B 3B 7C 68      mov d, _klingons_left ; $klingons_left
5992   2C3E 32            mov bl, [d]
5993   2C3F A7 00         mov bh, 0
5994   2C41             ; START RELATIONAL
5995   2C41 D7            push a
5996   2C42 11            mov a, b
5997   2C43 3B 88 68      mov d, _time_up ; $time_up
5998   2C46 2A            mov b, [d]
5999   2C47 B0            cmp a, b
6000   2C48 FD 81         sgu ; > (unsigned)
6001   2C4A E4            pop a
6002   2C4B             ; END RELATIONAL
6003   2C4B C0 00 00      cmp b, 0
6004   2C4E C6 68 2C      je _if93_exit
6005   2C51             _if93_true:
6006   2C51             ; time_up = klingons_left + 1; 
6007   2C51 3B 88 68      mov d, _time_up ; $time_up
6008   2C54 DA            push d
6009   2C55 3B 7C 68      mov d, _klingons_left ; $klingons_left
6010   2C58 32            mov bl, [d]
6011   2C59 A7 00         mov bh, 0
6012   2C5B             ; START TERMS
6013   2C5B D7            push a
6014   2C5C 11            mov a, b
6015   2C5D 26 01 00      mov b, $1
6016   2C60 56            add b, a
6017   2C61 E4            pop a
6018   2C62             ; END TERMS
6019   2C62 E7            pop d
6020   2C63 FD 43         mov [d], b
6021   2C65 0A 68 2C      jmp _if93_exit
6022   2C68             _if93_exit:
6023   2C68             ; if (starbases_left == 0) { 
6024   2C68             _if94_cond:
6025   2C68 3B A6 67      mov d, _starbases_left ; $starbases_left
6026   2C6B 32            mov bl, [d]
6027   2C6C A7 00         mov bh, 0
6028   2C6E             ; START RELATIONAL
6029   2C6E D7            push a
6030   2C6F 11            mov a, b
6031   2C70 26 00 00      mov b, $0
6032   2C73 B0            cmp a, b
6033   2C74 FD 71         seq ; ==
6034   2C76 E4            pop a
6035   2C77             ; END RELATIONAL
6036   2C77 C0 00 00      cmp b, 0
6037   2C7A C6 82 2D      je _if94_exit
6038   2C7D             _if94_true:
6039   2C7D             ; yp = rand8(); 
6040   2C7D FA FC FF      lea d, [bp + -4] ; $yp
6041   2C80 DA            push d
6042   2C81 07 37 23      call rand8
6043   2C84 E7            pop d
6044   2C85 FD 3E         mov [d], bl
6045   2C87             ; xp = rand8(); 
6046   2C87 FA FB FF      lea d, [bp + -5] ; $xp
6047   2C8A DA            push d
6048   2C8B 07 37 23      call rand8
6049   2C8E E7            pop d
6050   2C8F FD 3E         mov [d], bl
6051   2C91             ; if (map[yp][xp] < 0x200) { 
6052   2C91             _if95_cond:
6053   2C91 3B CC 67      mov d, _map_data ; $map
6054   2C94 D7            push a
6055   2C95 DA            push d
6056   2C96 FA FC FF      lea d, [bp + -4] ; $yp
6057   2C99 32            mov bl, [d]
6058   2C9A A7 00         mov bh, 0
6059   2C9C E7            pop d
6060   2C9D FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
6061   2CA1 DA            push d
6062   2CA2 FA FB FF      lea d, [bp + -5] ; $xp
6063   2CA5 32            mov bl, [d]
6064   2CA6 A7 00         mov bh, 0
6065   2CA8 E7            pop d
6066   2CA9 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6067   2CAD E4            pop a
6068   2CAE 2A            mov b, [d]
6069   2CAF             ; START RELATIONAL
6070   2CAF D7            push a
6071   2CB0 11            mov a, b
6072   2CB1 26 00 02      mov b, $200
6073   2CB4 B0            cmp a, b
6074   2CB5 FD 75         slu ; < (unsigned)
6075   2CB7 E4            pop a
6076   2CB8             ; END RELATIONAL
6077   2CB8 C0 00 00      cmp b, 0
6078   2CBB C6 20 2D      je _if95_exit
6079   2CBE             _if95_true:
6080   2CBE             ; map[yp][xp] = map[yp][xp] + (1 << 8); 
6081   2CBE 3B CC 67      mov d, _map_data ; $map
6082   2CC1 D7            push a
6083   2CC2 DA            push d
6084   2CC3 FA FC FF      lea d, [bp + -4] ; $yp
6085   2CC6 32            mov bl, [d]
6086   2CC7 A7 00         mov bh, 0
6087   2CC9 E7            pop d
6088   2CCA FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
6089   2CCE DA            push d
6090   2CCF FA FB FF      lea d, [bp + -5] ; $xp
6091   2CD2 32            mov bl, [d]
6092   2CD3 A7 00         mov bh, 0
6093   2CD5 E7            pop d
6094   2CD6 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6095   2CDA E4            pop a
6096   2CDB DA            push d
6097   2CDC 3B CC 67      mov d, _map_data ; $map
6098   2CDF D7            push a
6099   2CE0 DA            push d
6100   2CE1 FA FC FF      lea d, [bp + -4] ; $yp
6101   2CE4 32            mov bl, [d]
6102   2CE5 A7 00         mov bh, 0
6103   2CE7 E7            pop d
6104   2CE8 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
6105   2CEC DA            push d
6106   2CED FA FB FF      lea d, [bp + -5] ; $xp
6107   2CF0 32            mov bl, [d]
6108   2CF1 A7 00         mov bh, 0
6109   2CF3 E7            pop d
6110   2CF4 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6111   2CF8 E4            pop a
6112   2CF9 2A            mov b, [d]
6113   2CFA             ; START TERMS
6114   2CFA D7            push a
6115   2CFB 11            mov a, b
6116   2CFC 26 01 00      mov b, $1
6117   2CFF             ; START SHIFT
6118   2CFF D7            push a
6119   2D00 11            mov a, b
6120   2D01 26 08 00      mov b, $8
6121   2D04 FD 39         mov c, b
6122   2D06 9D            shl a, cl
6123   2D07 27            mov b, a
6124   2D08 E4            pop a
6125   2D09             ; END SHIFT
6126   2D09 56            add b, a
6127   2D0A E4            pop a
6128   2D0B             ; END TERMS
6129   2D0B E7            pop d
6130   2D0C FD 43         mov [d], b
6131   2D0E             ; klingons_left++; 
6132   2D0E 3B 7C 68      mov d, _klingons_left ; $klingons_left
6133   2D11 32            mov bl, [d]
6134   2D12 A7 00         mov bh, 0
6135   2D14 FD 77         inc b
6136   2D16 3B 7C 68      mov d, _klingons_left ; $klingons_left
6137   2D19 FD 43         mov [d], b
6138   2D1B FD 7D         dec b
6139   2D1D 0A 20 2D      jmp _if95_exit
6140   2D20             _if95_exit:
6141   2D20             ; map[yp][xp] = map[yp][xp] + (1 << 4); 
6142   2D20 3B CC 67      mov d, _map_data ; $map
6143   2D23 D7            push a
6144   2D24 DA            push d
6145   2D25 FA FC FF      lea d, [bp + -4] ; $yp
6146   2D28 32            mov bl, [d]
6147   2D29 A7 00         mov bh, 0
6148   2D2B E7            pop d
6149   2D2C FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
6150   2D30 DA            push d
6151   2D31 FA FB FF      lea d, [bp + -5] ; $xp
6152   2D34 32            mov bl, [d]
6153   2D35 A7 00         mov bh, 0
6154   2D37 E7            pop d
6155   2D38 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6156   2D3C E4            pop a
6157   2D3D DA            push d
6158   2D3E 3B CC 67      mov d, _map_data ; $map
6159   2D41 D7            push a
6160   2D42 DA            push d
6161   2D43 FA FC FF      lea d, [bp + -4] ; $yp
6162   2D46 32            mov bl, [d]
6163   2D47 A7 00         mov bh, 0
6164   2D49 E7            pop d
6165   2D4A FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
6166   2D4E DA            push d
6167   2D4F FA FB FF      lea d, [bp + -5] ; $xp
6168   2D52 32            mov bl, [d]
6169   2D53 A7 00         mov bh, 0
6170   2D55 E7            pop d
6171   2D56 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6172   2D5A E4            pop a
6173   2D5B 2A            mov b, [d]
6174   2D5C             ; START TERMS
6175   2D5C D7            push a
6176   2D5D 11            mov a, b
6177   2D5E 26 01 00      mov b, $1
6178   2D61             ; START SHIFT
6179   2D61 D7            push a
6180   2D62 11            mov a, b
6181   2D63 26 04 00      mov b, $4
6182   2D66 FD 39         mov c, b
6183   2D68 9D            shl a, cl
6184   2D69 27            mov b, a
6185   2D6A E4            pop a
6186   2D6B             ; END SHIFT
6187   2D6B 56            add b, a
6188   2D6C E4            pop a
6189   2D6D             ; END TERMS
6190   2D6D E7            pop d
6191   2D6E FD 43         mov [d], b
6192   2D70             ; starbases_left++; 
6193   2D70 3B A6 67      mov d, _starbases_left ; $starbases_left
6194   2D73 32            mov bl, [d]
6195   2D74 A7 00         mov bh, 0
6196   2D76 FD 77         inc b
6197   2D78 3B A6 67      mov d, _starbases_left ; $starbases_left
6198   2D7B FD 43         mov [d], b
6199   2D7D FD 7D         dec b
6200   2D7F 0A 82 2D      jmp _if94_exit
6201   2D82             _if94_exit:
6202   2D82             ; total_klingons = klingons_left; 
6203   2D82 3B 7B 68      mov d, _total_klingons ; $total_klingons
6204   2D85 DA            push d
6205   2D86 3B 7C 68      mov d, _klingons_left ; $klingons_left
6206   2D89 32            mov bl, [d]
6207   2D8A A7 00         mov bh, 0
6208   2D8C E7            pop d
6209   2D8D FD 3E         mov [d], bl
6210   2D8F             ; if (starbases_left != 1) { 
6211   2D8F             _if96_cond:
6212   2D8F 3B A6 67      mov d, _starbases_left ; $starbases_left
6213   2D92 32            mov bl, [d]
6214   2D93 A7 00         mov bh, 0
6215   2D95             ; START RELATIONAL
6216   2D95 D7            push a
6217   2D96 11            mov a, b
6218   2D97 26 01 00      mov b, $1
6219   2D9A B0            cmp a, b
6220   2D9B FD 72         sneq ; !=
6221   2D9D E4            pop a
6222   2D9E             ; END RELATIONAL
6223   2D9E C0 00 00      cmp b, 0
6224   2DA1 C6 CD 2D      je _if96_exit
6225   2DA4             _if96_true:
6226   2DA4             ; strcpy(plural_2, "s"); 
6227   2DA4 26 6A 6D      mov b, _s61 ; "s"
6228   2DA7 FD AB         swp b
6229   2DA9 D8            push b
6230   2DAA 3B 9F 69      mov d, _plural_2_data ; $plural_2
6231   2DAD 2D            mov b, d
6232   2DAE FD AB         swp b
6233   2DB0 D8            push b
6234   2DB1 07 14 04      call strcpy
6235   2DB4 51 04 00      add sp, 4
6236   2DB7             ; strcpy(plural, "are"); 
6237   2DB7 26 F7 6B      mov b, _s34 ; "are"
6238   2DBA FD AB         swp b
6239   2DBC D8            push b
6240   2DBD 3B A2 69      mov d, _plural_data ; $plural
6241   2DC0 2D            mov b, d
6242   2DC1 FD AB         swp b
6243   2DC3 D8            push b
6244   2DC4 07 14 04      call strcpy
6245   2DC7 51 04 00      add sp, 4
6246   2DCA 0A CD 2D      jmp _if96_exit
6247   2DCD             _if96_exit:
6248   2DCD             ; printf("Your orders are as follows:\nDestroy the %d Klingon warships which have",klingons_left); 
6249   2DCD 3B 7C 68      mov d, _klingons_left ; $klingons_left
6250   2DD0 32            mov bl, [d]
6251   2DD1 A7 00         mov bh, 0
6252   2DD3 DD            push bl
6253   2DD4 26 6C 6D      mov b, _s62 ; "Your orders are as follows:\nDestroy the %d Klingon warships which have"
6254   2DD7 FD AB         swp b
6255   2DD9 D8            push b
6256   2DDA 07 BA 07      call printf
6257   2DDD 51 03 00      add sp, 3
6258   2DE0             ; printf("invaded\n the galaxy before they can attack Federation Headquarters\n"); 
6259   2DE0 26 B3 6D      mov b, _s63 ; "invaded\n the galaxy before they can attack Federation Headquarters\n"
6260   2DE3 FD AB         swp b
6261   2DE5 D8            push b
6262   2DE6 07 BA 07      call printf
6263   2DE9 51 02 00      add sp, 2
6264   2DEC             ; printf(" on stardate %u. This gives you %d days. There %s\n %d starbase%s in the galaxy",  
6265   2DEC 3B 9F 69      mov d, _plural_2_data ; $plural_2
6266   2DEF 2D            mov b, d
6267   2DF0 FD AB         swp b
6268   2DF2 D8            push b
6269   2DF3 3B A6 67      mov d, _starbases_left ; $starbases_left
6270   2DF6 32            mov bl, [d]
6271   2DF7 A7 00         mov bh, 0
6272   2DF9 DD            push bl
6273   2DFA 3B A2 69      mov d, _plural_data ; $plural
6274   2DFD 2D            mov b, d
6275   2DFE FD AB         swp b
6276   2E00 D8            push b
6277   2E01 3B 88 68      mov d, _time_up ; $time_up
6278   2E04 2A            mov b, [d]
6279   2E05 FD AB         swp b
6280   2E07 D8            push b
6281   2E08 3B 86 68      mov d, _time_start ; $time_start
6282   2E0B 2A            mov b, [d]
6283   2E0C             ; START TERMS
6284   2E0C D7            push a
6285   2E0D 11            mov a, b
6286   2E0E 3B 88 68      mov d, _time_up ; $time_up
6287   2E11 2A            mov b, [d]
6288   2E12 56            add b, a
6289   2E13 E4            pop a
6290   2E14             ; END TERMS
6291   2E14 FD AB         swp b
6292   2E16 D8            push b
6293   2E17 26 F7 6D      mov b, _s64 ; " on stardate %u. This gives you %d days. There %s\n %d starbase%s in the galaxy"
6294   2E1A FD AB         swp b
6295   2E1C D8            push b
6296   2E1D 07 BA 07      call printf
6297   2E20 51 0B 00      add sp, 11
6298   2E23             ; printf(" for resupplying your ship.\n\n Hit any key to accept command. "); 
6299   2E23 26 46 6E      mov b, _s65 ; " for resupplying your ship.\n\n Hit any key to accept command. "
6300   2E26 FD AB         swp b
6301   2E28 D8            push b
6302   2E29 07 BA 07      call printf
6303   2E2C 51 02 00      add sp, 2
6304   2E2F             ; getchar(); 
6305   2E2F 07 8F 1A      call getchar
6306   2E32 F9            leave
6307   2E33 09            ret
6308   2E34             
6309   2E34             place_ship:
6310   2E34 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6311   2E37             ; quad[FROM_FIXED00(ship_y) - 1][FROM_FIXED00(ship_x) - 1] =  		4     ; 
6312   2E37 3B A4 68      mov d, _quad_data ; $quad
6313   2E3A D7            push a
6314   2E3B DA            push d
6315   2E3C 3B 9E 68      mov d, _ship_y ; $ship_y
6316   2E3F 2A            mov b, [d]
6317   2E40 FD AB         swp b
6318   2E42 D8            push b
6319   2E43 07 D7 22      call FROM_FIXED00
6320   2E46 51 02 00      add sp, 2
6321   2E49             ; START TERMS
6322   2E49 D7            push a
6323   2E4A 11            mov a, b
6324   2E4B 26 01 00      mov b, $1
6325   2E4E 60            sub a, b
6326   2E4F 27            mov b, a
6327   2E50 E4            pop a
6328   2E51             ; END TERMS
6329   2E51 E7            pop d
6330   2E52 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
6331   2E56 DA            push d
6332   2E57 3B A0 68      mov d, _ship_x ; $ship_x
6333   2E5A 2A            mov b, [d]
6334   2E5B FD AB         swp b
6335   2E5D D8            push b
6336   2E5E 07 D7 22      call FROM_FIXED00
6337   2E61 51 02 00      add sp, 2
6338   2E64             ; START TERMS
6339   2E64 D7            push a
6340   2E65 11            mov a, b
6341   2E66 26 01 00      mov b, $1
6342   2E69 60            sub a, b
6343   2E6A 27            mov b, a
6344   2E6B E4            pop a
6345   2E6C             ; END TERMS
6346   2E6C E7            pop d
6347   2E6D 5A            add d, b
6348   2E6E E4            pop a
6349   2E6F DA            push d
6350   2E70 26 04 00      mov b, $4
6351   2E73 E7            pop d
6352   2E74 FD 3E         mov [d], bl
6353   2E76 F9            leave
6354   2E77 09            ret
6355   2E78             
6356   2E78             new_quadrant:
6357   2E78 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6358   2E7B             ; int i; 
6359   2E7B 52 02 00      sub sp, 2
6360   2E7E             ; unsigned int        tmp; 
6361   2E7E 52 02 00      sub sp, 2
6362   2E81             ; struct klingon *k; 
6363   2E81 52 02 00      sub sp, 2
6364   2E84             ; k = &kdata; 
6365   2E84 FA FB FF      lea d, [bp + -5] ; $k
6366   2E87 DA            push d
6367   2E88 3B 6E 68      mov d, _kdata_data ; $kdata
6368   2E8B 2D            mov b, d
6369   2E8C E7            pop d
6370   2E8D FD 43         mov [d], b
6371   2E8F             ; klingons = 0; 
6372   2E8F 3B 7A 68      mov d, _klingons ; $klingons
6373   2E92 DA            push d
6374   2E93 26 00 00      mov b, $0
6375   2E96 E7            pop d
6376   2E97 FD 3E         mov [d], bl
6377   2E99             ; starbases = 0; 
6378   2E99 3B A3 67      mov d, _starbases ; $starbases
6379   2E9C DA            push d
6380   2E9D 26 00 00      mov b, $0
6381   2EA0 E7            pop d
6382   2EA1 FD 3E         mov [d], bl
6383   2EA3             ; stars = 0; 
6384   2EA3 3B 85 68      mov d, _stars ; $stars
6385   2EA6 DA            push d
6386   2EA7 26 00 00      mov b, $0
6387   2EAA E7            pop d
6388   2EAB FD 3E         mov [d], bl
6389   2EAD             ; d4 = get_rand(50) - 1; 
6390   2EAD 3B 9C 68      mov d, _d4 ; $d4
6391   2EB0 DA            push d
6392   2EB1 26 32 00      mov b, $32
6393   2EB4 FD AB         swp b
6394   2EB6 D8            push b
6395   2EB7 07 E8 22      call get_rand
6396   2EBA 51 02 00      add sp, 2
6397   2EBD             ; START TERMS
6398   2EBD D7            push a
6399   2EBE 11            mov a, b
6400   2EBF 26 01 00      mov b, $1
6401   2EC2 60            sub a, b
6402   2EC3 27            mov b, a
6403   2EC4 E4            pop a
6404   2EC5             ; END TERMS
6405   2EC5 E7            pop d
6406   2EC6 FD 43         mov [d], b
6407   2EC8             ; map[quad_y][quad_x] = map[quad_y][quad_x] |   0x1000		/* Set if this sector was mapped */          ; 
6408   2EC8 3B CC 67      mov d, _map_data ; $map
6409   2ECB D7            push a
6410   2ECC DA            push d
6411   2ECD 3B 7F 68      mov d, _quad_y ; $quad_y
6412   2ED0 2A            mov b, [d]
6413   2ED1 E7            pop d
6414   2ED2 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
6415   2ED6 DA            push d
6416   2ED7 3B 81 68      mov d, _quad_x ; $quad_x
6417   2EDA 2A            mov b, [d]
6418   2EDB E7            pop d
6419   2EDC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6420   2EE0 E4            pop a
6421   2EE1 DA            push d
6422   2EE2 3B CC 67      mov d, _map_data ; $map
6423   2EE5 D7            push a
6424   2EE6 DA            push d
6425   2EE7 3B 7F 68      mov d, _quad_y ; $quad_y
6426   2EEA 2A            mov b, [d]
6427   2EEB E7            pop d
6428   2EEC FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
6429   2EF0 DA            push d
6430   2EF1 3B 81 68      mov d, _quad_x ; $quad_x
6431   2EF4 2A            mov b, [d]
6432   2EF5 E7            pop d
6433   2EF6 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6434   2EFA E4            pop a
6435   2EFB 2A            mov b, [d]
6436   2EFC D7            push a
6437   2EFD 11            mov a, b
6438   2EFE 26 00 10      mov b, $1000
6439   2F01 FD 70         or b, a ; |
6440   2F03 E4            pop a
6441   2F04 E7            pop d
6442   2F05 FD 43         mov [d], b
6443   2F07             ; if (quad_y >= 1 && quad_y <= 8 && quad_x >= 1 && quad_x <= 8) { 
6444   2F07             _if97_cond:
6445   2F07 3B 7F 68      mov d, _quad_y ; $quad_y
6446   2F0A 2A            mov b, [d]
6447   2F0B             ; START RELATIONAL
6448   2F0B D7            push a
6449   2F0C 11            mov a, b
6450   2F0D 26 01 00      mov b, $1
6451   2F10 B0            cmp a, b
6452   2F11 FD 80         sge ; >=
6453   2F13 E4            pop a
6454   2F14             ; END RELATIONAL
6455   2F14             ; START LOGICAL AND
6456   2F14 D7            push a
6457   2F15 11            mov a, b
6458   2F16 3B 7F 68      mov d, _quad_y ; $quad_y
6459   2F19 2A            mov b, [d]
6460   2F1A             ; START RELATIONAL
6461   2F1A D7            push a
6462   2F1B 11            mov a, b
6463   2F1C 26 08 00      mov b, $8
6464   2F1F B0            cmp a, b
6465   2F20 FD 74         sle ; <= (signed)
6466   2F22 E4            pop a
6467   2F23             ; END RELATIONAL
6468   2F23 FD A7         sand a, b
6469   2F25 11            mov a, b
6470   2F26 3B 81 68      mov d, _quad_x ; $quad_x
6471   2F29 2A            mov b, [d]
6472   2F2A             ; START RELATIONAL
6473   2F2A D7            push a
6474   2F2B 11            mov a, b
6475   2F2C 26 01 00      mov b, $1
6476   2F2F B0            cmp a, b
6477   2F30 FD 80         sge ; >=
6478   2F32 E4            pop a
6479   2F33             ; END RELATIONAL
6480   2F33 FD A7         sand a, b
6481   2F35 11            mov a, b
6482   2F36 3B 81 68      mov d, _quad_x ; $quad_x
6483   2F39 2A            mov b, [d]
6484   2F3A             ; START RELATIONAL
6485   2F3A D7            push a
6486   2F3B 11            mov a, b
6487   2F3C 26 08 00      mov b, $8
6488   2F3F B0            cmp a, b
6489   2F40 FD 74         sle ; <= (signed)
6490   2F42 E4            pop a
6491   2F43             ; END RELATIONAL
6492   2F43 FD A7         sand a, b
6493   2F45 E4            pop a
6494   2F46             ; END LOGICAL AND
6495   2F46 C0 00 00      cmp b, 0
6496   2F49 C6 B5 2F      je _if97_exit
6497   2F4C             _if97_true:
6498   2F4C             ; quadrant_name(0, quad_y, quad_x); 
6499   2F4C 3B 81 68      mov d, _quad_x ; $quad_x
6500   2F4F 2A            mov b, [d]
6501   2F50 DD            push bl
6502   2F51 3B 7F 68      mov d, _quad_y ; $quad_y
6503   2F54 2A            mov b, [d]
6504   2F55 DD            push bl
6505   2F56 26 00 00      mov b, $0
6506   2F59 DD            push bl
6507   2F5A 07 87 64      call quadrant_name
6508   2F5D 51 03 00      add sp, 3
6509   2F60             ; if (TO_FIXED(time_start) != stardate) 
6510   2F60             _if98_cond:
6511   2F60 3B 86 68      mov d, _time_start ; $time_start
6512   2F63 2A            mov b, [d]
6513   2F64 FD AB         swp b
6514   2F66 D8            push b
6515   2F67 07 A2 22      call TO_FIXED
6516   2F6A 51 02 00      add sp, 2
6517   2F6D             ; START RELATIONAL
6518   2F6D D7            push a
6519   2F6E 11            mov a, b
6520   2F6F 3B A2 68      mov d, _stardate ; $stardate
6521   2F72 2A            mov b, [d]
6522   2F73 B0            cmp a, b
6523   2F74 FD 72         sneq ; !=
6524   2F76 E4            pop a
6525   2F77             ; END RELATIONAL
6526   2F77 C0 00 00      cmp b, 0
6527   2F7A C6 93 2F      je _if98_else
6528   2F7D             _if98_true:
6529   2F7D             ; printf("Now entering %s quadrant...\n\n", quadname); 
6530   2F7D 3B E4 68      mov d, _quadname_data ; $quadname
6531   2F80 2D            mov b, d
6532   2F81 FD AB         swp b
6533   2F83 D8            push b
6534   2F84 26 84 6E      mov b, _s66 ; "Now entering %s quadrant...\n\n"
6535   2F87 FD AB         swp b
6536   2F89 D8            push b
6537   2F8A 07 BA 07      call printf
6538   2F8D 51 04 00      add sp, 4
6539   2F90 0A B2 2F      jmp _if98_exit
6540   2F93             _if98_else:
6541   2F93             ; puts("\nYour mission begins with your starship located"); 
6542   2F93 26 A2 6E      mov b, _s67 ; "\nYour mission begins with your starship located"
6543   2F96 FD AB         swp b
6544   2F98 D8            push b
6545   2F99 07 B8 1A      call puts
6546   2F9C 51 02 00      add sp, 2
6547   2F9F             ; printf("in the galactic quadrant %s.\n\n", quadname); 
6548   2F9F 3B E4 68      mov d, _quadname_data ; $quadname
6549   2FA2 2D            mov b, d
6550   2FA3 FD AB         swp b
6551   2FA5 D8            push b
6552   2FA6 26 D2 6E      mov b, _s68 ; "in the galactic quadrant %s.\n\n"
6553   2FA9 FD AB         swp b
6554   2FAB D8            push b
6555   2FAC 07 BA 07      call printf
6556   2FAF 51 04 00      add sp, 4
6557   2FB2             _if98_exit:
6558   2FB2 0A B5 2F      jmp _if97_exit
6559   2FB5             _if97_exit:
6560   2FB5             ; tmp = map[quad_y][quad_x]; 
6561   2FB5 FA FD FF      lea d, [bp + -3] ; $tmp
6562   2FB8 DA            push d
6563   2FB9 3B CC 67      mov d, _map_data ; $map
6564   2FBC D7            push a
6565   2FBD DA            push d
6566   2FBE 3B 7F 68      mov d, _quad_y ; $quad_y
6567   2FC1 2A            mov b, [d]
6568   2FC2 E7            pop d
6569   2FC3 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
6570   2FC7 DA            push d
6571   2FC8 3B 81 68      mov d, _quad_x ; $quad_x
6572   2FCB 2A            mov b, [d]
6573   2FCC E7            pop d
6574   2FCD FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6575   2FD1 E4            pop a
6576   2FD2 2A            mov b, [d]
6577   2FD3 E7            pop d
6578   2FD4 FD 43         mov [d], b
6579   2FD6             ; klingons = (tmp >> 8) & 0x0F; 
6580   2FD6 3B 7A 68      mov d, _klingons ; $klingons
6581   2FD9 DA            push d
6582   2FDA FA FD FF      lea d, [bp + -3] ; $tmp
6583   2FDD 2A            mov b, [d]
6584   2FDE             ; START SHIFT
6585   2FDE D7            push a
6586   2FDF 11            mov a, b
6587   2FE0 26 08 00      mov b, $8
6588   2FE3 FD 39         mov c, b
6589   2FE5 A1            shr a, cl
6590   2FE6 27            mov b, a
6591   2FE7 E4            pop a
6592   2FE8             ; END SHIFT
6593   2FE8 D7            push a
6594   2FE9 11            mov a, b
6595   2FEA 26 0F 00      mov b, $f
6596   2FED FD 92         and b, a ; &
6597   2FEF E4            pop a
6598   2FF0 E7            pop d
6599   2FF1 FD 3E         mov [d], bl
6600   2FF3             ; starbases = (tmp >> 4) & 0x0F; 
6601   2FF3 3B A3 67      mov d, _starbases ; $starbases
6602   2FF6 DA            push d
6603   2FF7 FA FD FF      lea d, [bp + -3] ; $tmp
6604   2FFA 2A            mov b, [d]
6605   2FFB             ; START SHIFT
6606   2FFB D7            push a
6607   2FFC 11            mov a, b
6608   2FFD 26 04 00      mov b, $4
6609   3000 FD 39         mov c, b
6610   3002 A1            shr a, cl
6611   3003 27            mov b, a
6612   3004 E4            pop a
6613   3005             ; END SHIFT
6614   3005 D7            push a
6615   3006 11            mov a, b
6616   3007 26 0F 00      mov b, $f
6617   300A FD 92         and b, a ; &
6618   300C E4            pop a
6619   300D E7            pop d
6620   300E FD 3E         mov [d], bl
6621   3010             ; stars = tmp & 0x0F; 
6622   3010 3B 85 68      mov d, _stars ; $stars
6623   3013 DA            push d
6624   3014 FA FD FF      lea d, [bp + -3] ; $tmp
6625   3017 2A            mov b, [d]
6626   3018 D7            push a
6627   3019 11            mov a, b
6628   301A 26 0F 00      mov b, $f
6629   301D FD 92         and b, a ; &
6630   301F E4            pop a
6631   3020 E7            pop d
6632   3021 FD 3E         mov [d], bl
6633   3023             ; if (klingons > 0) { 
6634   3023             _if99_cond:
6635   3023 3B 7A 68      mov d, _klingons ; $klingons
6636   3026 32            mov bl, [d]
6637   3027 A7 00         mov bh, 0
6638   3029             ; START RELATIONAL
6639   3029 D7            push a
6640   302A 11            mov a, b
6641   302B 26 00 00      mov b, $0
6642   302E B0            cmp a, b
6643   302F FD 81         sgu ; > (unsigned)
6644   3031 E4            pop a
6645   3032             ; END RELATIONAL
6646   3032 C0 00 00      cmp b, 0
6647   3035 C6 69 30      je _if99_exit
6648   3038             _if99_true:
6649   3038             ; printf("Combat Area  Condition Red\n"); 
6650   3038 26 F1 6E      mov b, _s69 ; "Combat Area  Condition Red\n"
6651   303B FD AB         swp b
6652   303D D8            push b
6653   303E 07 BA 07      call printf
6654   3041 51 02 00      add sp, 2
6655   3044             ; if (shield < 200) 
6656   3044             _if100_cond:
6657   3044 3B 83 68      mov d, _shield ; $shield
6658   3047 2A            mov b, [d]
6659   3048             ; START RELATIONAL
6660   3048 D7            push a
6661   3049 11            mov a, b
6662   304A 26 C8 00      mov b, $c8
6663   304D B0            cmp a, b
6664   304E FD 73         slt ; < (signed)
6665   3050 E4            pop a
6666   3051             ; END RELATIONAL
6667   3051 C0 00 00      cmp b, 0
6668   3054 C6 66 30      je _if100_exit
6669   3057             _if100_true:
6670   3057             ; printf("Shields Dangerously Low\n"); 
6671   3057 26 0D 6F      mov b, _s70 ; "Shields Dangerously Low\n"
6672   305A FD AB         swp b
6673   305C D8            push b
6674   305D 07 BA 07      call printf
6675   3060 51 02 00      add sp, 2
6676   3063 0A 66 30      jmp _if100_exit
6677   3066             _if100_exit:
6678   3066 0A 69 30      jmp _if99_exit
6679   3069             _if99_exit:
6680   3069             ; for (i = 1; i <= 3; i++) { 
6681   3069             _for101_init:
6682   3069 FA FF FF      lea d, [bp + -1] ; $i
6683   306C DA            push d
6684   306D 26 01 00      mov b, $1
6685   3070 E7            pop d
6686   3071 FD 43         mov [d], b
6687   3073             _for101_cond:
6688   3073 FA FF FF      lea d, [bp + -1] ; $i
6689   3076 2A            mov b, [d]
6690   3077             ; START RELATIONAL
6691   3077 D7            push a
6692   3078 11            mov a, b
6693   3079 26 03 00      mov b, $3
6694   307C B0            cmp a, b
6695   307D FD 74         sle ; <= (signed)
6696   307F E4            pop a
6697   3080             ; END RELATIONAL
6698   3080 C0 00 00      cmp b, 0
6699   3083 C6 D4 30      je _for101_exit
6700   3086             _for101_block:
6701   3086             ; k->y = 0; 
6702   3086 FA FB FF      lea d, [bp + -5] ; $k
6703   3089 FD 2A         mov d, [d]
6704   308B 58 00 00      add d, 0
6705   308E DA            push d
6706   308F 26 00 00      mov b, $0
6707   3092 E7            pop d
6708   3093 FD 3E         mov [d], bl
6709   3095             ; k->x = 0; 
6710   3095 FA FB FF      lea d, [bp + -5] ; $k
6711   3098 FD 2A         mov d, [d]
6712   309A 58 01 00      add d, 1
6713   309D DA            push d
6714   309E 26 00 00      mov b, $0
6715   30A1 E7            pop d
6716   30A2 FD 3E         mov [d], bl
6717   30A4             ; k->energy = 0; 
6718   30A4 FA FB FF      lea d, [bp + -5] ; $k
6719   30A7 FD 2A         mov d, [d]
6720   30A9 58 02 00      add d, 2
6721   30AC DA            push d
6722   30AD 26 00 00      mov b, $0
6723   30B0 E7            pop d
6724   30B1 FD 43         mov [d], b
6725   30B3             ; k++; 
6726   30B3 FA FB FF      lea d, [bp + -5] ; $k
6727   30B6 2A            mov b, [d]
6728   30B7 FD 77         inc b
6729   30B9 FD 77         inc b
6730   30BB FA FB FF      lea d, [bp + -5] ; $k
6731   30BE FD 43         mov [d], b
6732   30C0 FD 7D         dec b
6733   30C2 FD 7D         dec b
6734   30C4             _for101_update:
6735   30C4 FA FF FF      lea d, [bp + -1] ; $i
6736   30C7 2A            mov b, [d]
6737   30C8 FD 77         inc b
6738   30CA FA FF FF      lea d, [bp + -1] ; $i
6739   30CD FD 43         mov [d], b
6740   30CF FD 7D         dec b
6741   30D1 0A 73 30      jmp _for101_cond
6742   30D4             _for101_exit:
6743   30D4             ; memset(quad,  		0      , 64); 
6744   30D4 26 40 00      mov b, $40
6745   30D7 FD AB         swp b
6746   30D9 D8            push b
6747   30DA 26 00 00      mov b, $0
6748   30DD DD            push bl
6749   30DE 3B A4 68      mov d, _quad_data ; $quad
6750   30E1 2D            mov b, d
6751   30E2 FD AB         swp b
6752   30E4 D8            push b
6753   30E5 07 DE 05      call memset
6754   30E8 51 05 00      add sp, 5
6755   30EB             ; place_ship(); 
6756   30EB 07 34 2E      call place_ship
6757   30EE             ; if (klingons > 0) { 
6758   30EE             _if102_cond:
6759   30EE 3B 7A 68      mov d, _klingons ; $klingons
6760   30F1 32            mov bl, [d]
6761   30F2 A7 00         mov bh, 0
6762   30F4             ; START RELATIONAL
6763   30F4 D7            push a
6764   30F5 11            mov a, b
6765   30F6 26 00 00      mov b, $0
6766   30F9 B0            cmp a, b
6767   30FA FD 81         sgu ; > (unsigned)
6768   30FC E4            pop a
6769   30FD             ; END RELATIONAL
6770   30FD C0 00 00      cmp b, 0
6771   3100 C6 93 31      je _if102_exit
6772   3103             _if102_true:
6773   3103             ; k = kdata; 
6774   3103 FA FB FF      lea d, [bp + -5] ; $k
6775   3106 DA            push d
6776   3107 3B 6E 68      mov d, _kdata_data ; $kdata
6777   310A 2D            mov b, d
6778   310B E7            pop d
6779   310C FD 43         mov [d], b
6780   310E             ; for (i = 0; i < klingons; i++) { 
6781   310E             _for103_init:
6782   310E FA FF FF      lea d, [bp + -1] ; $i
6783   3111 DA            push d
6784   3112 26 00 00      mov b, $0
6785   3115 E7            pop d
6786   3116 FD 43         mov [d], b
6787   3118             _for103_cond:
6788   3118 FA FF FF      lea d, [bp + -1] ; $i
6789   311B 2A            mov b, [d]
6790   311C             ; START RELATIONAL
6791   311C D7            push a
6792   311D 11            mov a, b
6793   311E 3B 7A 68      mov d, _klingons ; $klingons
6794   3121 32            mov bl, [d]
6795   3122 A7 00         mov bh, 0
6796   3124 B0            cmp a, b
6797   3125 FD 73         slt ; < (signed)
6798   3127 E4            pop a
6799   3128             ; END RELATIONAL
6800   3128 C0 00 00      cmp b, 0
6801   312B C6 90 31      je _for103_exit
6802   312E             _for103_block:
6803   312E             ; find_set_empty_place( 	3        , &k->y, &k->x); 
6804   312E FA FB FF      lea d, [bp + -5] ; $k
6805   3131 FD 2A         mov d, [d]
6806   3133 58 01 00      add d, 1
6807   3136 2D            mov b, d
6808   3137 FD AB         swp b
6809   3139 D8            push b
6810   313A FA FB FF      lea d, [bp + -5] ; $k
6811   313D FD 2A         mov d, [d]
6812   313F 58 00 00      add d, 0
6813   3142 2D            mov b, d
6814   3143 FD AB         swp b
6815   3145 D8            push b
6816   3146 26 03 00      mov b, $3
6817   3149 DD            push bl
6818   314A 07 7B 63      call find_set_empty_place
6819   314D 51 05 00      add sp, 5
6820   3150             ; k->energy = 100 + get_rand(200); 
6821   3150 FA FB FF      lea d, [bp + -5] ; $k
6822   3153 FD 2A         mov d, [d]
6823   3155 58 02 00      add d, 2
6824   3158 DA            push d
6825   3159 26 64 00      mov b, $64
6826   315C             ; START TERMS
6827   315C D7            push a
6828   315D 11            mov a, b
6829   315E 26 C8 00      mov b, $c8
6830   3161 FD AB         swp b
6831   3163 D8            push b
6832   3164 07 E8 22      call get_rand
6833   3167 51 02 00      add sp, 2
6834   316A 56            add b, a
6835   316B E4            pop a
6836   316C             ; END TERMS
6837   316C E7            pop d
6838   316D FD 43         mov [d], b
6839   316F             ; k++; 
6840   316F FA FB FF      lea d, [bp + -5] ; $k
6841   3172 2A            mov b, [d]
6842   3173 FD 77         inc b
6843   3175 FD 77         inc b
6844   3177 FA FB FF      lea d, [bp + -5] ; $k
6845   317A FD 43         mov [d], b
6846   317C FD 7D         dec b
6847   317E FD 7D         dec b
6848   3180             _for103_update:
6849   3180 FA FF FF      lea d, [bp + -1] ; $i
6850   3183 2A            mov b, [d]
6851   3184 FD 77         inc b
6852   3186 FA FF FF      lea d, [bp + -1] ; $i
6853   3189 FD 43         mov [d], b
6854   318B FD 7D         dec b
6855   318D 0A 18 31      jmp _for103_cond
6856   3190             _for103_exit:
6857   3190 0A 93 31      jmp _if102_exit
6858   3193             _if102_exit:
6859   3193             ; if (starbases > 0) 
6860   3193             _if104_cond:
6861   3193 3B A3 67      mov d, _starbases ; $starbases
6862   3196 32            mov bl, [d]
6863   3197 A7 00         mov bh, 0
6864   3199             ; START RELATIONAL
6865   3199 D7            push a
6866   319A 11            mov a, b
6867   319B 26 00 00      mov b, $0
6868   319E B0            cmp a, b
6869   319F FD 7F         sgt ; >
6870   31A1 E4            pop a
6871   31A2             ; END RELATIONAL
6872   31A2 C0 00 00      cmp b, 0
6873   31A5 C6 C3 31      je _if104_exit
6874   31A8             _if104_true:
6875   31A8             ; find_set_empty_place( 		2     , &base_y, &base_x); 
6876   31A8 3B A5 67      mov d, _base_x ; $base_x
6877   31AB 2D            mov b, d
6878   31AC FD AB         swp b
6879   31AE D8            push b
6880   31AF 3B A4 67      mov d, _base_y ; $base_y
6881   31B2 2D            mov b, d
6882   31B3 FD AB         swp b
6883   31B5 D8            push b
6884   31B6 26 02 00      mov b, $2
6885   31B9 DD            push bl
6886   31BA 07 7B 63      call find_set_empty_place
6887   31BD 51 05 00      add sp, 5
6888   31C0 0A C3 31      jmp _if104_exit
6889   31C3             _if104_exit:
6890   31C3             ; for (i = 1; i <= stars; i++) 
6891   31C3             _for105_init:
6892   31C3 FA FF FF      lea d, [bp + -1] ; $i
6893   31C6 DA            push d
6894   31C7 26 01 00      mov b, $1
6895   31CA E7            pop d
6896   31CB FD 43         mov [d], b
6897   31CD             _for105_cond:
6898   31CD FA FF FF      lea d, [bp + -1] ; $i
6899   31D0 2A            mov b, [d]
6900   31D1             ; START RELATIONAL
6901   31D1 D7            push a
6902   31D2 11            mov a, b
6903   31D3 3B 85 68      mov d, _stars ; $stars
6904   31D6 32            mov bl, [d]
6905   31D7 A7 00         mov bh, 0
6906   31D9 B0            cmp a, b
6907   31DA FD 74         sle ; <= (signed)
6908   31DC E4            pop a
6909   31DD             ; END RELATIONAL
6910   31DD C0 00 00      cmp b, 0
6911   31E0 C6 09 32      je _for105_exit
6912   31E3             _for105_block:
6913   31E3             ; find_set_empty_place( 		1     ,   0   ,   0   ); 
6914   31E3 26 00 00      mov b, $0
6915   31E6 FD AB         swp b
6916   31E8 D8            push b
6917   31E9 26 00 00      mov b, $0
6918   31EC FD AB         swp b
6919   31EE D8            push b
6920   31EF 26 01 00      mov b, $1
6921   31F2 DD            push bl
6922   31F3 07 7B 63      call find_set_empty_place
6923   31F6 51 05 00      add sp, 5
6924   31F9             _for105_update:
6925   31F9 FA FF FF      lea d, [bp + -1] ; $i
6926   31FC 2A            mov b, [d]
6927   31FD FD 77         inc b
6928   31FF FA FF FF      lea d, [bp + -1] ; $i
6929   3202 FD 43         mov [d], b
6930   3204 FD 7D         dec b
6931   3206 0A CD 31      jmp _for105_cond
6932   3209             _for105_exit:
6933   3209 F9            leave
6934   320A 09            ret
6935   320B             
6936   320B             course_control:
6937   320B F8 00 00      enter 0 ; (push bp; mov bp, sp)
6938   320E             ; int i; 
6939   320E 52 02 00      sub sp, 2
6940   3211             ; int       c1; 
6941   3211 52 02 00      sub sp, 2
6942   3214             ; int       warp; 
6943   3214 52 02 00      sub sp, 2
6944   3217             ; unsigned int        n; 
6945   3217 52 02 00      sub sp, 2
6946   321A             ; int c2, c3, c4; 
6947   321A 52 02 00      sub sp, 2
6948   321D 52 02 00      sub sp, 2
6949   3220 52 02 00      sub sp, 2
6950   3223             ; int       z1, z2; 
6951   3223 52 02 00      sub sp, 2
6952   3226 52 02 00      sub sp, 2
6953   3229             ; int       x1, x2; 
6954   3229 52 02 00      sub sp, 2
6955   322C 52 02 00      sub sp, 2
6956   322F             ; int       x, y; 
6957   322F 52 02 00      sub sp, 2
6958   3232 52 02 00      sub sp, 2
6959   3235             ; unsigned char                         outside = 0;		/* Outside galaxy flag */ 
6960   3235 52 01 00      sub sp, 1
6961   3238             ; --- START LOCAL VAR INITIALIZATION
6962   3238 FA E6 FF      lea d, [bp + -26] ; $outside
6963   323B DA            push d
6964   323C 26 00 00      mov b, $0
6965   323F E7            pop d
6966   3240 FD 43         mov [d], b
6967   3242             ; --- END LOCAL VAR INITIALIZATION
6968   3242             ; unsigned char                         quad_y_old; 
6969   3242 52 01 00      sub sp, 1
6970   3245             ; unsigned char                         quad_x_old; 
6971   3245 52 01 00      sub sp, 1
6972   3248             ; puts("Course (0-9): " ); 
6973   3248 26 26 6F      mov b, _s71 ; "Course (0-9): "
6974   324B FD AB         swp b
6975   324D D8            push b
6976   324E 07 B8 1A      call puts
6977   3251 51 02 00      add sp, 2
6978   3254             ; c1 = input_f00(); 
6979   3254 FA FD FF      lea d, [bp + -3] ; $c1
6980   3257 DA            push d
6981   3258 07 10 24      call input_f00
6982   325B E7            pop d
6983   325C FD 43         mov [d], b
6984   325E             ; if (c1 == 900) 
6985   325E             _if106_cond:
6986   325E FA FD FF      lea d, [bp + -3] ; $c1
6987   3261 2A            mov b, [d]
6988   3262             ; START RELATIONAL
6989   3262 D7            push a
6990   3263 11            mov a, b
6991   3264 26 84 03      mov b, $384
6992   3267 B0            cmp a, b
6993   3268 FD 71         seq ; ==
6994   326A E4            pop a
6995   326B             ; END RELATIONAL
6996   326B C0 00 00      cmp b, 0
6997   326E C6 7E 32      je _if106_exit
6998   3271             _if106_true:
6999   3271             ; c1 = 100; 
7000   3271 FA FD FF      lea d, [bp + -3] ; $c1
7001   3274 DA            push d
7002   3275 26 64 00      mov b, $64
7003   3278 E7            pop d
7004   3279 FD 43         mov [d], b
7005   327B 0A 7E 32      jmp _if106_exit
7006   327E             _if106_exit:
7007   327E             ; if (c1 < 0 || c1 > 900) { 
7008   327E             _if107_cond:
7009   327E FA FD FF      lea d, [bp + -3] ; $c1
7010   3281 2A            mov b, [d]
7011   3282             ; START RELATIONAL
7012   3282 D7            push a
7013   3283 11            mov a, b
7014   3284 26 00 00      mov b, $0
7015   3287 B0            cmp a, b
7016   3288 FD 73         slt ; < (signed)
7017   328A E4            pop a
7018   328B             ; END RELATIONAL
7019   328B             ; START LOGICAL OR
7020   328B D7            push a
7021   328C 11            mov a, b
7022   328D FA FD FF      lea d, [bp + -3] ; $c1
7023   3290 2A            mov b, [d]
7024   3291             ; START RELATIONAL
7025   3291 D7            push a
7026   3292 11            mov a, b
7027   3293 26 84 03      mov b, $384
7028   3296 B0            cmp a, b
7029   3297 FD 7F         sgt ; >
7030   3299 E4            pop a
7031   329A             ; END RELATIONAL
7032   329A FD A8         sor a, b ; ||
7033   329C E4            pop a
7034   329D             ; END LOGICAL OR
7035   329D C0 00 00      cmp b, 0
7036   32A0 C6 BB 32      je _if107_exit
7037   32A3             _if107_true:
7038   32A3             ; printf("Lt. Sulu%s", inc_1); 
7039   32A3 3B 18 69      mov d, _inc_1 ; $inc_1
7040   32A6 2A            mov b, [d]
7041   32A7 FD AB         swp b
7042   32A9 D8            push b
7043   32AA 26 35 6F      mov b, _s72 ; "Lt. Sulu%s"
7044   32AD FD AB         swp b
7045   32AF D8            push b
7046   32B0 07 BA 07      call printf
7047   32B3 51 04 00      add sp, 4
7048   32B6             ; return; 
7049   32B6 F9            leave
7050   32B7 09            ret
7051   32B8 0A BB 32      jmp _if107_exit
7052   32BB             _if107_exit:
7053   32BB             ; if (damage[1] < 0) 
7054   32BB             _if108_cond:
7055   32BB 3B 8A 68      mov d, _damage_data ; $damage
7056   32BE D7            push a
7057   32BF DA            push d
7058   32C0 26 01 00      mov b, $1
7059   32C3 E7            pop d
7060   32C4 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
7061   32C8 E4            pop a
7062   32C9 2A            mov b, [d]
7063   32CA             ; START RELATIONAL
7064   32CA D7            push a
7065   32CB 11            mov a, b
7066   32CC 26 00 00      mov b, $0
7067   32CF B0            cmp a, b
7068   32D0 FD 73         slt ; < (signed)
7069   32D2 E4            pop a
7070   32D3             ; END RELATIONAL
7071   32D3 C0 00 00      cmp b, 0
7072   32D6 C6 EF 32      je _if108_exit
7073   32D9             _if108_true:
7074   32D9             ; strcpy(warpmax, "0.2"); 
7075   32D9 26 40 6F      mov b, _s73 ; "0.2"
7076   32DC FD AB         swp b
7077   32DE D8            push b
7078   32DF 3B A7 69      mov d, _warpmax_data ; $warpmax
7079   32E2 2D            mov b, d
7080   32E3 FD AB         swp b
7081   32E5 D8            push b
7082   32E6 07 14 04      call strcpy
7083   32E9 51 04 00      add sp, 4
7084   32EC 0A EF 32      jmp _if108_exit
7085   32EF             _if108_exit:
7086   32EF             ; printf("Warp Factor (0-%s): ", warpmax); 
7087   32EF 3B A7 69      mov d, _warpmax_data ; $warpmax
7088   32F2 2D            mov b, d
7089   32F3 FD AB         swp b
7090   32F5 D8            push b
7091   32F6 26 44 6F      mov b, _s74 ; "Warp Factor (0-%s): "
7092   32F9 FD AB         swp b
7093   32FB D8            push b
7094   32FC 07 BA 07      call printf
7095   32FF 51 04 00      add sp, 4
7096   3302             ; warp = input_f00(); 
7097   3302 FA FB FF      lea d, [bp + -5] ; $warp
7098   3305 DA            push d
7099   3306 07 10 24      call input_f00
7100   3309 E7            pop d
7101   330A FD 43         mov [d], b
7102   330C             ; if (damage[1] < 0 && warp > 20) { 
7103   330C             _if109_cond:
7104   330C 3B 8A 68      mov d, _damage_data ; $damage
7105   330F D7            push a
7106   3310 DA            push d
7107   3311 26 01 00      mov b, $1
7108   3314 E7            pop d
7109   3315 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
7110   3319 E4            pop a
7111   331A 2A            mov b, [d]
7112   331B             ; START RELATIONAL
7113   331B D7            push a
7114   331C 11            mov a, b
7115   331D 26 00 00      mov b, $0
7116   3320 B0            cmp a, b
7117   3321 FD 73         slt ; < (signed)
7118   3323 E4            pop a
7119   3324             ; END RELATIONAL
7120   3324             ; START LOGICAL AND
7121   3324 D7            push a
7122   3325 11            mov a, b
7123   3326 FA FB FF      lea d, [bp + -5] ; $warp
7124   3329 2A            mov b, [d]
7125   332A             ; START RELATIONAL
7126   332A D7            push a
7127   332B 11            mov a, b
7128   332C 26 14 00      mov b, $14
7129   332F B0            cmp a, b
7130   3330 FD 7F         sgt ; >
7131   3332 E4            pop a
7132   3333             ; END RELATIONAL
7133   3333 FD A7         sand a, b
7134   3335 E4            pop a
7135   3336             ; END LOGICAL AND
7136   3336 C0 00 00      cmp b, 0
7137   3339 C6 4D 33      je _if109_exit
7138   333C             _if109_true:
7139   333C             ; printf("Warp Engines are damaged. Maximum speed = Warp 0.2.\n\n"); 
7140   333C 26 59 6F      mov b, _s75 ; "Warp Engines are damaged. Maximum speed = Warp 0.2.\n\n"
7141   333F FD AB         swp b
7142   3341 D8            push b
7143   3342 07 BA 07      call printf
7144   3345 51 02 00      add sp, 2
7145   3348             ; return; 
7146   3348 F9            leave
7147   3349 09            ret
7148   334A 0A 4D 33      jmp _if109_exit
7149   334D             _if109_exit:
7150   334D             ; if (warp <= 0) 
7151   334D             _if110_cond:
7152   334D FA FB FF      lea d, [bp + -5] ; $warp
7153   3350 2A            mov b, [d]
7154   3351             ; START RELATIONAL
7155   3351 D7            push a
7156   3352 11            mov a, b
7157   3353 26 00 00      mov b, $0
7158   3356 B0            cmp a, b
7159   3357 FD 74         sle ; <= (signed)
7160   3359 E4            pop a
7161   335A             ; END RELATIONAL
7162   335A C0 00 00      cmp b, 0
7163   335D C6 65 33      je _if110_exit
7164   3360             _if110_true:
7165   3360             ; return; 
7166   3360 F9            leave
7167   3361 09            ret
7168   3362 0A 65 33      jmp _if110_exit
7169   3365             _if110_exit:
7170   3365             ; if (warp > 800) { 
7171   3365             _if111_cond:
7172   3365 FA FB FF      lea d, [bp + -5] ; $warp
7173   3368 2A            mov b, [d]
7174   3369             ; START RELATIONAL
7175   3369 D7            push a
7176   336A 11            mov a, b
7177   336B 26 20 03      mov b, $320
7178   336E B0            cmp a, b
7179   336F FD 7F         sgt ; >
7180   3371 E4            pop a
7181   3372             ; END RELATIONAL
7182   3372 C0 00 00      cmp b, 0
7183   3375 C6 99 33      je _if111_exit
7184   3378             _if111_true:
7185   3378             ; printf("Chief Engineer Scott reports:\n  The engines wont take warp %s!\n\n", print100(warp)); 
7186   3378 FA FB FF      lea d, [bp + -5] ; $warp
7187   337B 2A            mov b, [d]
7188   337C FD AB         swp b
7189   337E D8            push b
7190   337F 07 DA 25      call print100
7191   3382 51 02 00      add sp, 2
7192   3385 FD AB         swp b
7193   3387 D8            push b
7194   3388 26 8F 6F      mov b, _s76 ; "Chief Engineer Scott reports:\n  The engines wont take warp %s!\n\n"
7195   338B FD AB         swp b
7196   338D D8            push b
7197   338E 07 BA 07      call printf
7198   3391 51 04 00      add sp, 4
7199   3394             ; return; 
7200   3394 F9            leave
7201   3395 09            ret
7202   3396 0A 99 33      jmp _if111_exit
7203   3399             _if111_exit:
7204   3399             ; n = warp * 8; 
7205   3399 FA F9 FF      lea d, [bp + -7] ; $n
7206   339C DA            push d
7207   339D FA FB FF      lea d, [bp + -5] ; $warp
7208   33A0 2A            mov b, [d]
7209   33A1             ; START FACTORS
7210   33A1 D7            push a
7211   33A2 11            mov a, b
7212   33A3 26 08 00      mov b, $8
7213   33A6 AC            mul a, b ; *
7214   33A7 11            mov a, b
7215   33A8 27            mov b, a
7216   33A9 E4            pop a
7217   33AA             ; END FACTORS
7218   33AA E7            pop d
7219   33AB FD 43         mov [d], b
7220   33AD             ; n = cint100(n);	 
7221   33AD FA F9 FF      lea d, [bp + -7] ; $n
7222   33B0 DA            push d
7223   33B1 FA F9 FF      lea d, [bp + -7] ; $n
7224   33B4 2A            mov b, [d]
7225   33B5 FD AB         swp b
7226   33B7 D8            push b
7227   33B8 07 86 67      call cint100
7228   33BB 51 02 00      add sp, 2
7229   33BE E7            pop d
7230   33BF FD 43         mov [d], b
7231   33C1             ; if (energy - n < 0) { 
7232   33C1             _if112_cond:
7233   33C1 3B C8 67      mov d, _energy ; $energy
7234   33C4 2A            mov b, [d]
7235   33C5             ; START TERMS
7236   33C5 D7            push a
7237   33C6 11            mov a, b
7238   33C7 FA F9 FF      lea d, [bp + -7] ; $n
7239   33CA 2A            mov b, [d]
7240   33CB 60            sub a, b
7241   33CC 27            mov b, a
7242   33CD E4            pop a
7243   33CE             ; END TERMS
7244   33CE             ; START RELATIONAL
7245   33CE D7            push a
7246   33CF 11            mov a, b
7247   33D0 26 00 00      mov b, $0
7248   33D3 B0            cmp a, b
7249   33D4 FD 75         slu ; < (unsigned)
7250   33D6 E4            pop a
7251   33D7             ; END RELATIONAL
7252   33D7 C0 00 00      cmp b, 0
7253   33DA C6 45 34      je _if112_exit
7254   33DD             _if112_true:
7255   33DD             ; printf("Engineering reports:\n  Insufficient energy available for maneuvering at warp %s!\n\n", print100(warp)); 
7256   33DD FA FB FF      lea d, [bp + -5] ; $warp
7257   33E0 2A            mov b, [d]
7258   33E1 FD AB         swp b
7259   33E3 D8            push b
7260   33E4 07 DA 25      call print100
7261   33E7 51 02 00      add sp, 2
7262   33EA FD AB         swp b
7263   33EC D8            push b
7264   33ED 26 D0 6F      mov b, _s77 ; "Engineering reports:\n  Insufficient energy available for maneuvering at warp %s!\n\n"
7265   33F0 FD AB         swp b
7266   33F2 D8            push b
7267   33F3 07 BA 07      call printf
7268   33F6 51 04 00      add sp, 4
7269   33F9             ; if (shield >= n && damage[7] >= 0) { 
7270   33F9             _if113_cond:
7271   33F9 3B 83 68      mov d, _shield ; $shield
7272   33FC 2A            mov b, [d]
7273   33FD             ; START RELATIONAL
7274   33FD D7            push a
7275   33FE 11            mov a, b
7276   33FF FA F9 FF      lea d, [bp + -7] ; $n
7277   3402 2A            mov b, [d]
7278   3403 B0            cmp a, b
7279   3404 FD 80         sge ; >=
7280   3406 E4            pop a
7281   3407             ; END RELATIONAL
7282   3407             ; START LOGICAL AND
7283   3407 D7            push a
7284   3408 11            mov a, b
7285   3409 3B 8A 68      mov d, _damage_data ; $damage
7286   340C D7            push a
7287   340D DA            push d
7288   340E 26 07 00      mov b, $7
7289   3411 E7            pop d
7290   3412 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
7291   3416 E4            pop a
7292   3417 2A            mov b, [d]
7293   3418             ; START RELATIONAL
7294   3418 D7            push a
7295   3419 11            mov a, b
7296   341A 26 00 00      mov b, $0
7297   341D B0            cmp a, b
7298   341E FD 80         sge ; >=
7299   3420 E4            pop a
7300   3421             ; END RELATIONAL
7301   3421 FD A7         sand a, b
7302   3423 E4            pop a
7303   3424             ; END LOGICAL AND
7304   3424 C0 00 00      cmp b, 0
7305   3427 C6 40 34      je _if113_exit
7306   342A             _if113_true:
7307   342A             ; printf("Deflector Control Room acknowledges:\n  %d units of energy presently deployed to shields.\n", shield); 
7308   342A 3B 83 68      mov d, _shield ; $shield
7309   342D 2A            mov b, [d]
7310   342E FD AB         swp b
7311   3430 D8            push b
7312   3431 26 23 70      mov b, _s78 ; "Deflector Control Room acknowledges:\n  %d units of energy presently deployed to shields.\n"
7313   3434 FD AB         swp b
7314   3436 D8            push b
7315   3437 07 BA 07      call printf
7316   343A 51 04 00      add sp, 4
7317   343D 0A 40 34      jmp _if113_exit
7318   3440             _if113_exit:
7319   3440             ; return; 
7320   3440 F9            leave
7321   3441 09            ret
7322   3442 0A 45 34      jmp _if112_exit
7323   3445             _if112_exit:
7324   3445             ; klingons_move(); 
7325   3445 07 3D 5D      call klingons_move
7326   3448             ; repair_damage(warp); 
7327   3448 FA FB FF      lea d, [bp + -5] ; $warp
7328   344B 2A            mov b, [d]
7329   344C FD AB         swp b
7330   344E D8            push b
7331   344F 07 CC 60      call repair_damage
7332   3452 51 02 00      add sp, 2
7333   3455             ; z1 = FROM_FIXED00(ship_y); 
7334   3455 FA F1 FF      lea d, [bp + -15] ; $z1
7335   3458 DA            push d
7336   3459 3B 9E 68      mov d, _ship_y ; $ship_y
7337   345C 2A            mov b, [d]
7338   345D FD AB         swp b
7339   345F D8            push b
7340   3460 07 D7 22      call FROM_FIXED00
7341   3463 51 02 00      add sp, 2
7342   3466 E7            pop d
7343   3467 FD 43         mov [d], b
7344   3469             ; z2 = FROM_FIXED00(ship_x); 
7345   3469 FA EF FF      lea d, [bp + -17] ; $z2
7346   346C DA            push d
7347   346D 3B A0 68      mov d, _ship_x ; $ship_x
7348   3470 2A            mov b, [d]
7349   3471 FD AB         swp b
7350   3473 D8            push b
7351   3474 07 D7 22      call FROM_FIXED00
7352   3477 51 02 00      add sp, 2
7353   347A E7            pop d
7354   347B FD 43         mov [d], b
7355   347D             ; quad[z1+-1][z2+-1] =  		0      ; 
7356   347D 3B A4 68      mov d, _quad_data ; $quad
7357   3480 D7            push a
7358   3481 DA            push d
7359   3482 FA F1 FF      lea d, [bp + -15] ; $z1
7360   3485 2A            mov b, [d]
7361   3486             ; START TERMS
7362   3486 D7            push a
7363   3487 11            mov a, b
7364   3488 26 FF FF      mov b, $ffff
7365   348B 56            add b, a
7366   348C E4            pop a
7367   348D             ; END TERMS
7368   348D E7            pop d
7369   348E FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
7370   3492 DA            push d
7371   3493 FA EF FF      lea d, [bp + -17] ; $z2
7372   3496 2A            mov b, [d]
7373   3497             ; START TERMS
7374   3497 D7            push a
7375   3498 11            mov a, b
7376   3499 26 FF FF      mov b, $ffff
7377   349C 56            add b, a
7378   349D E4            pop a
7379   349E             ; END TERMS
7380   349E E7            pop d
7381   349F 5A            add d, b
7382   34A0 E4            pop a
7383   34A1 DA            push d
7384   34A2 26 00 00      mov b, $0
7385   34A5 E7            pop d
7386   34A6 FD 3E         mov [d], bl
7387   34A8             ; c2 = FROM_FIXED00(c1);	/* Integer part */ 
7388   34A8 FA F7 FF      lea d, [bp + -9] ; $c2
7389   34AB DA            push d
7390   34AC FA FD FF      lea d, [bp + -3] ; $c1
7391   34AF 2A            mov b, [d]
7392   34B0 FD AB         swp b
7393   34B2 D8            push b
7394   34B3 07 D7 22      call FROM_FIXED00
7395   34B6 51 02 00      add sp, 2
7396   34B9 E7            pop d
7397   34BA FD 43         mov [d], b
7398   34BC             ; c3 = c2 + 1;		/* Next integer part */ 
7399   34BC FA F5 FF      lea d, [bp + -11] ; $c3
7400   34BF DA            push d
7401   34C0 FA F7 FF      lea d, [bp + -9] ; $c2
7402   34C3 2A            mov b, [d]
7403   34C4             ; START TERMS
7404   34C4 D7            push a
7405   34C5 11            mov a, b
7406   34C6 26 01 00      mov b, $1
7407   34C9 56            add b, a
7408   34CA E4            pop a
7409   34CB             ; END TERMS
7410   34CB E7            pop d
7411   34CC FD 43         mov [d], b
7412   34CE             ; c4 = (c1 - TO_FIXED00(c2));	/* Fractional element in fixed point */ 
7413   34CE FA F3 FF      lea d, [bp + -13] ; $c4
7414   34D1 DA            push d
7415   34D2 FA FD FF      lea d, [bp + -3] ; $c1
7416   34D5 2A            mov b, [d]
7417   34D6             ; START TERMS
7418   34D6 D7            push a
7419   34D7 11            mov a, b
7420   34D8 FA F7 FF      lea d, [bp + -9] ; $c2
7421   34DB 2A            mov b, [d]
7422   34DC FD AB         swp b
7423   34DE D8            push b
7424   34DF 07 C5 22      call TO_FIXED00
7425   34E2 51 02 00      add sp, 2
7426   34E5 60            sub a, b
7427   34E6 27            mov b, a
7428   34E7 E4            pop a
7429   34E8             ; END TERMS
7430   34E8 E7            pop d
7431   34E9 FD 43         mov [d], b
7432   34EB             ; x1 = 100 * c[1][c2] + (c[1][c3] - c[1][c2]) * c4; 
7433   34EB FA ED FF      lea d, [bp + -19] ; $x1
7434   34EE DA            push d
7435   34EF 26 64 00      mov b, $64
7436   34F2             ; START FACTORS
7437   34F2 D7            push a
7438   34F3 11            mov a, b
7439   34F4 3B A7 67      mov d, _c_data ; $c
7440   34F7 D7            push a
7441   34F8 DA            push d
7442   34F9 26 01 00      mov b, $1
7443   34FC E7            pop d
7444   34FD FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
7445   3501 DA            push d
7446   3502 FA F7 FF      lea d, [bp + -9] ; $c2
7447   3505 2A            mov b, [d]
7448   3506 E7            pop d
7449   3507 5A            add d, b
7450   3508 E4            pop a
7451   3509 32            mov bl, [d]
7452   350A A7 00         mov bh, 0
7453   350C AC            mul a, b ; *
7454   350D 11            mov a, b
7455   350E 27            mov b, a
7456   350F E4            pop a
7457   3510             ; END FACTORS
7458   3510             ; START TERMS
7459   3510 D7            push a
7460   3511 11            mov a, b
7461   3512 3B A7 67      mov d, _c_data ; $c
7462   3515 D7            push a
7463   3516 DA            push d
7464   3517 26 01 00      mov b, $1
7465   351A E7            pop d
7466   351B FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
7467   351F DA            push d
7468   3520 FA F5 FF      lea d, [bp + -11] ; $c3
7469   3523 2A            mov b, [d]
7470   3524 E7            pop d
7471   3525 5A            add d, b
7472   3526 E4            pop a
7473   3527 32            mov bl, [d]
7474   3528 A7 00         mov bh, 0
7475   352A             ; START TERMS
7476   352A D7            push a
7477   352B 11            mov a, b
7478   352C 3B A7 67      mov d, _c_data ; $c
7479   352F D7            push a
7480   3530 DA            push d
7481   3531 26 01 00      mov b, $1
7482   3534 E7            pop d
7483   3535 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
7484   3539 DA            push d
7485   353A FA F7 FF      lea d, [bp + -9] ; $c2
7486   353D 2A            mov b, [d]
7487   353E E7            pop d
7488   353F 5A            add d, b
7489   3540 E4            pop a
7490   3541 32            mov bl, [d]
7491   3542 A7 00         mov bh, 0
7492   3544 60            sub a, b
7493   3545 27            mov b, a
7494   3546 E4            pop a
7495   3547             ; END TERMS
7496   3547             ; START FACTORS
7497   3547 D7            push a
7498   3548 11            mov a, b
7499   3549 FA F3 FF      lea d, [bp + -13] ; $c4
7500   354C 2A            mov b, [d]
7501   354D AC            mul a, b ; *
7502   354E 11            mov a, b
7503   354F 27            mov b, a
7504   3550 E4            pop a
7505   3551             ; END FACTORS
7506   3551 56            add b, a
7507   3552 E4            pop a
7508   3553             ; END TERMS
7509   3553 E7            pop d
7510   3554 FD 43         mov [d], b
7511   3556             ; x2 = 100 * c[2][c2] + (c[2][c3] - c[2][c2]) * c4; 
7512   3556 FA EB FF      lea d, [bp + -21] ; $x2
7513   3559 DA            push d
7514   355A 26 64 00      mov b, $64
7515   355D             ; START FACTORS
7516   355D D7            push a
7517   355E 11            mov a, b
7518   355F 3B A7 67      mov d, _c_data ; $c
7519   3562 D7            push a
7520   3563 DA            push d
7521   3564 26 02 00      mov b, $2
7522   3567 E7            pop d
7523   3568 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
7524   356C DA            push d
7525   356D FA F7 FF      lea d, [bp + -9] ; $c2
7526   3570 2A            mov b, [d]
7527   3571 E7            pop d
7528   3572 5A            add d, b
7529   3573 E4            pop a
7530   3574 32            mov bl, [d]
7531   3575 A7 00         mov bh, 0
7532   3577 AC            mul a, b ; *
7533   3578 11            mov a, b
7534   3579 27            mov b, a
7535   357A E4            pop a
7536   357B             ; END FACTORS
7537   357B             ; START TERMS
7538   357B D7            push a
7539   357C 11            mov a, b
7540   357D 3B A7 67      mov d, _c_data ; $c
7541   3580 D7            push a
7542   3581 DA            push d
7543   3582 26 02 00      mov b, $2
7544   3585 E7            pop d
7545   3586 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
7546   358A DA            push d
7547   358B FA F5 FF      lea d, [bp + -11] ; $c3
7548   358E 2A            mov b, [d]
7549   358F E7            pop d
7550   3590 5A            add d, b
7551   3591 E4            pop a
7552   3592 32            mov bl, [d]
7553   3593 A7 00         mov bh, 0
7554   3595             ; START TERMS
7555   3595 D7            push a
7556   3596 11            mov a, b
7557   3597 3B A7 67      mov d, _c_data ; $c
7558   359A D7            push a
7559   359B DA            push d
7560   359C 26 02 00      mov b, $2
7561   359F E7            pop d
7562   35A0 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
7563   35A4 DA            push d
7564   35A5 FA F7 FF      lea d, [bp + -9] ; $c2
7565   35A8 2A            mov b, [d]
7566   35A9 E7            pop d
7567   35AA 5A            add d, b
7568   35AB E4            pop a
7569   35AC 32            mov bl, [d]
7570   35AD A7 00         mov bh, 0
7571   35AF 60            sub a, b
7572   35B0 27            mov b, a
7573   35B1 E4            pop a
7574   35B2             ; END TERMS
7575   35B2             ; START FACTORS
7576   35B2 D7            push a
7577   35B3 11            mov a, b
7578   35B4 FA F3 FF      lea d, [bp + -13] ; $c4
7579   35B7 2A            mov b, [d]
7580   35B8 AC            mul a, b ; *
7581   35B9 11            mov a, b
7582   35BA 27            mov b, a
7583   35BB E4            pop a
7584   35BC             ; END FACTORS
7585   35BC 56            add b, a
7586   35BD E4            pop a
7587   35BE             ; END TERMS
7588   35BE E7            pop d
7589   35BF FD 43         mov [d], b
7590   35C1             ; x = ship_y; 
7591   35C1 FA E9 FF      lea d, [bp + -23] ; $x
7592   35C4 DA            push d
7593   35C5 3B 9E 68      mov d, _ship_y ; $ship_y
7594   35C8 2A            mov b, [d]
7595   35C9 E7            pop d
7596   35CA FD 43         mov [d], b
7597   35CC             ; y = ship_x; 
7598   35CC FA E7 FF      lea d, [bp + -25] ; $y
7599   35CF DA            push d
7600   35D0 3B A0 68      mov d, _ship_x ; $ship_x
7601   35D3 2A            mov b, [d]
7602   35D4 E7            pop d
7603   35D5 FD 43         mov [d], b
7604   35D7             ; for (i = 1; i <= n; i++) { 
7605   35D7             _for114_init:
7606   35D7 FA FF FF      lea d, [bp + -1] ; $i
7607   35DA DA            push d
7608   35DB 26 01 00      mov b, $1
7609   35DE E7            pop d
7610   35DF FD 43         mov [d], b
7611   35E1             _for114_cond:
7612   35E1 FA FF FF      lea d, [bp + -1] ; $i
7613   35E4 2A            mov b, [d]
7614   35E5             ; START RELATIONAL
7615   35E5 D7            push a
7616   35E6 11            mov a, b
7617   35E7 FA F9 FF      lea d, [bp + -7] ; $n
7618   35EA 2A            mov b, [d]
7619   35EB B0            cmp a, b
7620   35EC FD 74         sle ; <= (signed)
7621   35EE E4            pop a
7622   35EF             ; END RELATIONAL
7623   35EF C0 00 00      cmp b, 0
7624   35F2 C6 58 3A      je _for114_exit
7625   35F5             _for114_block:
7626   35F5             ; ship_y = ship_y + x1; 
7627   35F5 3B 9E 68      mov d, _ship_y ; $ship_y
7628   35F8 DA            push d
7629   35F9 3B 9E 68      mov d, _ship_y ; $ship_y
7630   35FC 2A            mov b, [d]
7631   35FD             ; START TERMS
7632   35FD D7            push a
7633   35FE 11            mov a, b
7634   35FF FA ED FF      lea d, [bp + -19] ; $x1
7635   3602 2A            mov b, [d]
7636   3603 56            add b, a
7637   3604 E4            pop a
7638   3605             ; END TERMS
7639   3605 E7            pop d
7640   3606 FD 43         mov [d], b
7641   3608             ; ship_x = ship_x + x2; 
7642   3608 3B A0 68      mov d, _ship_x ; $ship_x
7643   360B DA            push d
7644   360C 3B A0 68      mov d, _ship_x ; $ship_x
7645   360F 2A            mov b, [d]
7646   3610             ; START TERMS
7647   3610 D7            push a
7648   3611 11            mov a, b
7649   3612 FA EB FF      lea d, [bp + -21] ; $x2
7650   3615 2A            mov b, [d]
7651   3616 56            add b, a
7652   3617 E4            pop a
7653   3618             ; END TERMS
7654   3618 E7            pop d
7655   3619 FD 43         mov [d], b
7656   361B             ; z1 = FROM_FIXED00(ship_y); 
7657   361B FA F1 FF      lea d, [bp + -15] ; $z1
7658   361E DA            push d
7659   361F 3B 9E 68      mov d, _ship_y ; $ship_y
7660   3622 2A            mov b, [d]
7661   3623 FD AB         swp b
7662   3625 D8            push b
7663   3626 07 D7 22      call FROM_FIXED00
7664   3629 51 02 00      add sp, 2
7665   362C E7            pop d
7666   362D FD 43         mov [d], b
7667   362F             ; z2 = FROM_FIXED00(ship_x);	/* ?? cint100 ?? */ 
7668   362F FA EF FF      lea d, [bp + -17] ; $z2
7669   3632 DA            push d
7670   3633 3B A0 68      mov d, _ship_x ; $ship_x
7671   3636 2A            mov b, [d]
7672   3637 FD AB         swp b
7673   3639 D8            push b
7674   363A 07 D7 22      call FROM_FIXED00
7675   363D 51 02 00      add sp, 2
7676   3640 E7            pop d
7677   3641 FD 43         mov [d], b
7678   3643             ; if (z1 < 1 || z1 >= 9 || z2 < 1 || z2 >= 9) { 
7679   3643             _if115_cond:
7680   3643 FA F1 FF      lea d, [bp + -15] ; $z1
7681   3646 2A            mov b, [d]
7682   3647             ; START RELATIONAL
7683   3647 D7            push a
7684   3648 11            mov a, b
7685   3649 26 01 00      mov b, $1
7686   364C B0            cmp a, b
7687   364D FD 73         slt ; < (signed)
7688   364F E4            pop a
7689   3650             ; END RELATIONAL
7690   3650             ; START LOGICAL OR
7691   3650 D7            push a
7692   3651 11            mov a, b
7693   3652 FA F1 FF      lea d, [bp + -15] ; $z1
7694   3655 2A            mov b, [d]
7695   3656             ; START RELATIONAL
7696   3656 D7            push a
7697   3657 11            mov a, b
7698   3658 26 09 00      mov b, $9
7699   365B B0            cmp a, b
7700   365C FD 80         sge ; >=
7701   365E E4            pop a
7702   365F             ; END RELATIONAL
7703   365F FD A8         sor a, b ; ||
7704   3661 11            mov a, b
7705   3662 FA EF FF      lea d, [bp + -17] ; $z2
7706   3665 2A            mov b, [d]
7707   3666             ; START RELATIONAL
7708   3666 D7            push a
7709   3667 11            mov a, b
7710   3668 26 01 00      mov b, $1
7711   366B B0            cmp a, b
7712   366C FD 73         slt ; < (signed)
7713   366E E4            pop a
7714   366F             ; END RELATIONAL
7715   366F FD A8         sor a, b ; ||
7716   3671 11            mov a, b
7717   3672 FA EF FF      lea d, [bp + -17] ; $z2
7718   3675 2A            mov b, [d]
7719   3676             ; START RELATIONAL
7720   3676 D7            push a
7721   3677 11            mov a, b
7722   3678 26 09 00      mov b, $9
7723   367B B0            cmp a, b
7724   367C FD 80         sge ; >=
7725   367E E4            pop a
7726   367F             ; END RELATIONAL
7727   367F FD A8         sor a, b ; ||
7728   3681 E4            pop a
7729   3682             ; END LOGICAL OR
7730   3682 C0 00 00      cmp b, 0
7731   3685 C6 B9 39      je _if115_exit
7732   3688             _if115_true:
7733   3688             ; outside = 0;		/* Outside galaxy flag */ 
7734   3688 FA E6 FF      lea d, [bp + -26] ; $outside
7735   368B DA            push d
7736   368C 26 00 00      mov b, $0
7737   368F E7            pop d
7738   3690 FD 3E         mov [d], bl
7739   3692             ; quad_y_old = quad_y; 
7740   3692 FA E5 FF      lea d, [bp + -27] ; $quad_y_old
7741   3695 DA            push d
7742   3696 3B 7F 68      mov d, _quad_y ; $quad_y
7743   3699 2A            mov b, [d]
7744   369A E7            pop d
7745   369B FD 3E         mov [d], bl
7746   369D             ; quad_x_old = quad_x; 
7747   369D FA E4 FF      lea d, [bp + -28] ; $quad_x_old
7748   36A0 DA            push d
7749   36A1 3B 81 68      mov d, _quad_x ; $quad_x
7750   36A4 2A            mov b, [d]
7751   36A5 E7            pop d
7752   36A6 FD 3E         mov [d], bl
7753   36A8             ; x = (800 * quad_y) + x + (n * x1); 
7754   36A8 FA E9 FF      lea d, [bp + -23] ; $x
7755   36AB DA            push d
7756   36AC 26 20 03      mov b, $320
7757   36AF             ; START FACTORS
7758   36AF D7            push a
7759   36B0 11            mov a, b
7760   36B1 3B 7F 68      mov d, _quad_y ; $quad_y
7761   36B4 2A            mov b, [d]
7762   36B5 AC            mul a, b ; *
7763   36B6 11            mov a, b
7764   36B7 27            mov b, a
7765   36B8 E4            pop a
7766   36B9             ; END FACTORS
7767   36B9             ; START TERMS
7768   36B9 D7            push a
7769   36BA 11            mov a, b
7770   36BB FA E9 FF      lea d, [bp + -23] ; $x
7771   36BE 2A            mov b, [d]
7772   36BF 56            add b, a
7773   36C0 11            mov a, b
7774   36C1 FA F9 FF      lea d, [bp + -7] ; $n
7775   36C4 2A            mov b, [d]
7776   36C5             ; START FACTORS
7777   36C5 D7            push a
7778   36C6 11            mov a, b
7779   36C7 FA ED FF      lea d, [bp + -19] ; $x1
7780   36CA 2A            mov b, [d]
7781   36CB AC            mul a, b ; *
7782   36CC 11            mov a, b
7783   36CD 27            mov b, a
7784   36CE E4            pop a
7785   36CF             ; END FACTORS
7786   36CF 56            add b, a
7787   36D0 E4            pop a
7788   36D1             ; END TERMS
7789   36D1 E7            pop d
7790   36D2 FD 43         mov [d], b
7791   36D4             ; y = (800 * quad_x) + y + (n * x2); 
7792   36D4 FA E7 FF      lea d, [bp + -25] ; $y
7793   36D7 DA            push d
7794   36D8 26 20 03      mov b, $320
7795   36DB             ; START FACTORS
7796   36DB D7            push a
7797   36DC 11            mov a, b
7798   36DD 3B 81 68      mov d, _quad_x ; $quad_x
7799   36E0 2A            mov b, [d]
7800   36E1 AC            mul a, b ; *
7801   36E2 11            mov a, b
7802   36E3 27            mov b, a
7803   36E4 E4            pop a
7804   36E5             ; END FACTORS
7805   36E5             ; START TERMS
7806   36E5 D7            push a
7807   36E6 11            mov a, b
7808   36E7 FA E7 FF      lea d, [bp + -25] ; $y
7809   36EA 2A            mov b, [d]
7810   36EB 56            add b, a
7811   36EC 11            mov a, b
7812   36ED FA F9 FF      lea d, [bp + -7] ; $n
7813   36F0 2A            mov b, [d]
7814   36F1             ; START FACTORS
7815   36F1 D7            push a
7816   36F2 11            mov a, b
7817   36F3 FA EB FF      lea d, [bp + -21] ; $x2
7818   36F6 2A            mov b, [d]
7819   36F7 AC            mul a, b ; *
7820   36F8 11            mov a, b
7821   36F9 27            mov b, a
7822   36FA E4            pop a
7823   36FB             ; END FACTORS
7824   36FB 56            add b, a
7825   36FC E4            pop a
7826   36FD             ; END TERMS
7827   36FD E7            pop d
7828   36FE FD 43         mov [d], b
7829   3700             ; quad_y = x / 800;	/* Fixed point to int and divide by 8 */ 
7830   3700 3B 7F 68      mov d, _quad_y ; $quad_y
7831   3703 DA            push d
7832   3704 FA E9 FF      lea d, [bp + -23] ; $x
7833   3707 2A            mov b, [d]
7834   3708             ; START FACTORS
7835   3708 D7            push a
7836   3709 11            mov a, b
7837   370A 26 20 03      mov b, $320
7838   370D AE            div a, b
7839   370E 27            mov b, a
7840   370F E4            pop a
7841   3710             ; END FACTORS
7842   3710 E7            pop d
7843   3711 FD 43         mov [d], b
7844   3713             ; quad_x = y / 800;	/* Ditto */ 
7845   3713 3B 81 68      mov d, _quad_x ; $quad_x
7846   3716 DA            push d
7847   3717 FA E7 FF      lea d, [bp + -25] ; $y
7848   371A 2A            mov b, [d]
7849   371B             ; START FACTORS
7850   371B D7            push a
7851   371C 11            mov a, b
7852   371D 26 20 03      mov b, $320
7853   3720 AE            div a, b
7854   3721 27            mov b, a
7855   3722 E4            pop a
7856   3723             ; END FACTORS
7857   3723 E7            pop d
7858   3724 FD 43         mov [d], b
7859   3726             ; ship_y = x - (quad_y * 800); 
7860   3726 3B 9E 68      mov d, _ship_y ; $ship_y
7861   3729 DA            push d
7862   372A FA E9 FF      lea d, [bp + -23] ; $x
7863   372D 2A            mov b, [d]
7864   372E             ; START TERMS
7865   372E D7            push a
7866   372F 11            mov a, b
7867   3730 3B 7F 68      mov d, _quad_y ; $quad_y
7868   3733 2A            mov b, [d]
7869   3734             ; START FACTORS
7870   3734 D7            push a
7871   3735 11            mov a, b
7872   3736 26 20 03      mov b, $320
7873   3739 AC            mul a, b ; *
7874   373A 11            mov a, b
7875   373B 27            mov b, a
7876   373C E4            pop a
7877   373D             ; END FACTORS
7878   373D 60            sub a, b
7879   373E 27            mov b, a
7880   373F E4            pop a
7881   3740             ; END TERMS
7882   3740 E7            pop d
7883   3741 FD 43         mov [d], b
7884   3743             ; ship_x = y - (quad_x * 800); 
7885   3743 3B A0 68      mov d, _ship_x ; $ship_x
7886   3746 DA            push d
7887   3747 FA E7 FF      lea d, [bp + -25] ; $y
7888   374A 2A            mov b, [d]
7889   374B             ; START TERMS
7890   374B D7            push a
7891   374C 11            mov a, b
7892   374D 3B 81 68      mov d, _quad_x ; $quad_x
7893   3750 2A            mov b, [d]
7894   3751             ; START FACTORS
7895   3751 D7            push a
7896   3752 11            mov a, b
7897   3753 26 20 03      mov b, $320
7898   3756 AC            mul a, b ; *
7899   3757 11            mov a, b
7900   3758 27            mov b, a
7901   3759 E4            pop a
7902   375A             ; END FACTORS
7903   375A 60            sub a, b
7904   375B 27            mov b, a
7905   375C E4            pop a
7906   375D             ; END TERMS
7907   375D E7            pop d
7908   375E FD 43         mov [d], b
7909   3760             ; if (ship_y < 100) { 
7910   3760             _if116_cond:
7911   3760 3B 9E 68      mov d, _ship_y ; $ship_y
7912   3763 2A            mov b, [d]
7913   3764             ; START RELATIONAL
7914   3764 D7            push a
7915   3765 11            mov a, b
7916   3766 26 64 00      mov b, $64
7917   3769 B0            cmp a, b
7918   376A FD 73         slt ; < (signed)
7919   376C E4            pop a
7920   376D             ; END RELATIONAL
7921   376D C0 00 00      cmp b, 0
7922   3770 C6 9B 37      je _if116_exit
7923   3773             _if116_true:
7924   3773             ; quad_y = quad_y - 1; 
7925   3773 3B 7F 68      mov d, _quad_y ; $quad_y
7926   3776 DA            push d
7927   3777 3B 7F 68      mov d, _quad_y ; $quad_y
7928   377A 2A            mov b, [d]
7929   377B             ; START TERMS
7930   377B D7            push a
7931   377C 11            mov a, b
7932   377D 26 01 00      mov b, $1
7933   3780 60            sub a, b
7934   3781 27            mov b, a
7935   3782 E4            pop a
7936   3783             ; END TERMS
7937   3783 E7            pop d
7938   3784 FD 43         mov [d], b
7939   3786             ; ship_y = ship_y + 800; 
7940   3786 3B 9E 68      mov d, _ship_y ; $ship_y
7941   3789 DA            push d
7942   378A 3B 9E 68      mov d, _ship_y ; $ship_y
7943   378D 2A            mov b, [d]
7944   378E             ; START TERMS
7945   378E D7            push a
7946   378F 11            mov a, b
7947   3790 26 20 03      mov b, $320
7948   3793 56            add b, a
7949   3794 E4            pop a
7950   3795             ; END TERMS
7951   3795 E7            pop d
7952   3796 FD 43         mov [d], b
7953   3798 0A 9B 37      jmp _if116_exit
7954   379B             _if116_exit:
7955   379B             ; if (ship_x < 100) { 
7956   379B             _if117_cond:
7957   379B 3B A0 68      mov d, _ship_x ; $ship_x
7958   379E 2A            mov b, [d]
7959   379F             ; START RELATIONAL
7960   379F D7            push a
7961   37A0 11            mov a, b
7962   37A1 26 64 00      mov b, $64
7963   37A4 B0            cmp a, b
7964   37A5 FD 73         slt ; < (signed)
7965   37A7 E4            pop a
7966   37A8             ; END RELATIONAL
7967   37A8 C0 00 00      cmp b, 0
7968   37AB C6 D6 37      je _if117_exit
7969   37AE             _if117_true:
7970   37AE             ; quad_x = quad_x - 1; 
7971   37AE 3B 81 68      mov d, _quad_x ; $quad_x
7972   37B1 DA            push d
7973   37B2 3B 81 68      mov d, _quad_x ; $quad_x
7974   37B5 2A            mov b, [d]
7975   37B6             ; START TERMS
7976   37B6 D7            push a
7977   37B7 11            mov a, b
7978   37B8 26 01 00      mov b, $1
7979   37BB 60            sub a, b
7980   37BC 27            mov b, a
7981   37BD E4            pop a
7982   37BE             ; END TERMS
7983   37BE E7            pop d
7984   37BF FD 43         mov [d], b
7985   37C1             ; ship_x = ship_x + 800; 
7986   37C1 3B A0 68      mov d, _ship_x ; $ship_x
7987   37C4 DA            push d
7988   37C5 3B A0 68      mov d, _ship_x ; $ship_x
7989   37C8 2A            mov b, [d]
7990   37C9             ; START TERMS
7991   37C9 D7            push a
7992   37CA 11            mov a, b
7993   37CB 26 20 03      mov b, $320
7994   37CE 56            add b, a
7995   37CF E4            pop a
7996   37D0             ; END TERMS
7997   37D0 E7            pop d
7998   37D1 FD 43         mov [d], b
7999   37D3 0A D6 37      jmp _if117_exit
8000   37D6             _if117_exit:
8001   37D6             ; if (quad_y < 1) { 
8002   37D6             _if118_cond:
8003   37D6 3B 7F 68      mov d, _quad_y ; $quad_y
8004   37D9 2A            mov b, [d]
8005   37DA             ; START RELATIONAL
8006   37DA D7            push a
8007   37DB 11            mov a, b
8008   37DC 26 01 00      mov b, $1
8009   37DF B0            cmp a, b
8010   37E0 FD 73         slt ; < (signed)
8011   37E2 E4            pop a
8012   37E3             ; END RELATIONAL
8013   37E3 C0 00 00      cmp b, 0
8014   37E6 C6 0A 38      je _if118_exit
8015   37E9             _if118_true:
8016   37E9             ; outside = 1; 
8017   37E9 FA E6 FF      lea d, [bp + -26] ; $outside
8018   37EC DA            push d
8019   37ED 26 01 00      mov b, $1
8020   37F0 E7            pop d
8021   37F1 FD 3E         mov [d], bl
8022   37F3             ; quad_y = 1; 
8023   37F3 3B 7F 68      mov d, _quad_y ; $quad_y
8024   37F6 DA            push d
8025   37F7 26 01 00      mov b, $1
8026   37FA E7            pop d
8027   37FB FD 43         mov [d], b
8028   37FD             ; ship_y = 100; 
8029   37FD 3B 9E 68      mov d, _ship_y ; $ship_y
8030   3800 DA            push d
8031   3801 26 64 00      mov b, $64
8032   3804 E7            pop d
8033   3805 FD 43         mov [d], b
8034   3807 0A 0A 38      jmp _if118_exit
8035   380A             _if118_exit:
8036   380A             ; if (quad_y > 8) { 
8037   380A             _if119_cond:
8038   380A 3B 7F 68      mov d, _quad_y ; $quad_y
8039   380D 2A            mov b, [d]
8040   380E             ; START RELATIONAL
8041   380E D7            push a
8042   380F 11            mov a, b
8043   3810 26 08 00      mov b, $8
8044   3813 B0            cmp a, b
8045   3814 FD 7F         sgt ; >
8046   3816 E4            pop a
8047   3817             ; END RELATIONAL
8048   3817 C0 00 00      cmp b, 0
8049   381A C6 3E 38      je _if119_exit
8050   381D             _if119_true:
8051   381D             ; outside = 1; 
8052   381D FA E6 FF      lea d, [bp + -26] ; $outside
8053   3820 DA            push d
8054   3821 26 01 00      mov b, $1
8055   3824 E7            pop d
8056   3825 FD 3E         mov [d], bl
8057   3827             ; quad_y = 8; 
8058   3827 3B 7F 68      mov d, _quad_y ; $quad_y
8059   382A DA            push d
8060   382B 26 08 00      mov b, $8
8061   382E E7            pop d
8062   382F FD 43         mov [d], b
8063   3831             ; ship_y = 800; 
8064   3831 3B 9E 68      mov d, _ship_y ; $ship_y
8065   3834 DA            push d
8066   3835 26 20 03      mov b, $320
8067   3838 E7            pop d
8068   3839 FD 43         mov [d], b
8069   383B 0A 3E 38      jmp _if119_exit
8070   383E             _if119_exit:
8071   383E             ; if (quad_x < 1) { 
8072   383E             _if120_cond:
8073   383E 3B 81 68      mov d, _quad_x ; $quad_x
8074   3841 2A            mov b, [d]
8075   3842             ; START RELATIONAL
8076   3842 D7            push a
8077   3843 11            mov a, b
8078   3844 26 01 00      mov b, $1
8079   3847 B0            cmp a, b
8080   3848 FD 73         slt ; < (signed)
8081   384A E4            pop a
8082   384B             ; END RELATIONAL
8083   384B C0 00 00      cmp b, 0
8084   384E C6 72 38      je _if120_exit
8085   3851             _if120_true:
8086   3851             ; outside = 1; 
8087   3851 FA E6 FF      lea d, [bp + -26] ; $outside
8088   3854 DA            push d
8089   3855 26 01 00      mov b, $1
8090   3858 E7            pop d
8091   3859 FD 3E         mov [d], bl
8092   385B             ; quad_x = 1; 
8093   385B 3B 81 68      mov d, _quad_x ; $quad_x
8094   385E DA            push d
8095   385F 26 01 00      mov b, $1
8096   3862 E7            pop d
8097   3863 FD 43         mov [d], b
8098   3865             ; ship_x = 100; 
8099   3865 3B A0 68      mov d, _ship_x ; $ship_x
8100   3868 DA            push d
8101   3869 26 64 00      mov b, $64
8102   386C E7            pop d
8103   386D FD 43         mov [d], b
8104   386F 0A 72 38      jmp _if120_exit
8105   3872             _if120_exit:
8106   3872             ; if (quad_x > 8) { 
8107   3872             _if121_cond:
8108   3872 3B 81 68      mov d, _quad_x ; $quad_x
8109   3875 2A            mov b, [d]
8110   3876             ; START RELATIONAL
8111   3876 D7            push a
8112   3877 11            mov a, b
8113   3878 26 08 00      mov b, $8
8114   387B B0            cmp a, b
8115   387C FD 7F         sgt ; >
8116   387E E4            pop a
8117   387F             ; END RELATIONAL
8118   387F C0 00 00      cmp b, 0
8119   3882 C6 A6 38      je _if121_exit
8120   3885             _if121_true:
8121   3885             ; outside = 1; 
8122   3885 FA E6 FF      lea d, [bp + -26] ; $outside
8123   3888 DA            push d
8124   3889 26 01 00      mov b, $1
8125   388C E7            pop d
8126   388D FD 3E         mov [d], bl
8127   388F             ; quad_x = 8; 
8128   388F 3B 81 68      mov d, _quad_x ; $quad_x
8129   3892 DA            push d
8130   3893 26 08 00      mov b, $8
8131   3896 E7            pop d
8132   3897 FD 43         mov [d], b
8133   3899             ; ship_x = 800; 
8134   3899 3B A0 68      mov d, _ship_x ; $ship_x
8135   389C DA            push d
8136   389D 26 20 03      mov b, $320
8137   38A0 E7            pop d
8138   38A1 FD 43         mov [d], b
8139   38A3 0A A6 38      jmp _if121_exit
8140   38A6             _if121_exit:
8141   38A6             ; if (outside == 1) { 
8142   38A6             _if122_cond:
8143   38A6 FA E6 FF      lea d, [bp + -26] ; $outside
8144   38A9 32            mov bl, [d]
8145   38AA A7 00         mov bh, 0
8146   38AC             ; START RELATIONAL
8147   38AC D7            push a
8148   38AD 11            mov a, b
8149   38AE 26 01 00      mov b, $1
8150   38B1 B0            cmp a, b
8151   38B2 FD 71         seq ; ==
8152   38B4 E4            pop a
8153   38B5             ; END RELATIONAL
8154   38B5 C0 00 00      cmp b, 0
8155   38B8 C6 1C 39      je _if122_exit
8156   38BB             _if122_true:
8157   38BB             ; printf("LT. Uhura reports:\n Message from Starfleet Command:\n\n "); 
8158   38BB 26 7D 70      mov b, _s79 ; "LT. Uhura reports:\n Message from Starfleet Command:\n\n "
8159   38BE FD AB         swp b
8160   38C0 D8            push b
8161   38C1 07 BA 07      call printf
8162   38C4 51 02 00      add sp, 2
8163   38C7             ; printf("Permission to attempt crossing of galactic perimeter\n is hereby *denied*. "); 
8164   38C7 26 B4 70      mov b, _s80 ; "Permission to attempt crossing of galactic perimeter\n is hereby *denied*. "
8165   38CA FD AB         swp b
8166   38CC D8            push b
8167   38CD 07 BA 07      call printf
8168   38D0 51 02 00      add sp, 2
8169   38D3             ; printf("Shut down your engines.\n\n Chief Engineer Scott reports:\n "); 
8170   38D3 26 FF 70      mov b, _s81 ; "Shut down your engines.\n\n Chief Engineer Scott reports:\n "
8171   38D6 FD AB         swp b
8172   38D8 D8            push b
8173   38D9 07 BA 07      call printf
8174   38DC 51 02 00      add sp, 2
8175   38DF             ; printf("Warp Engines shut down at sector %d, %d of quadrant %d, %d.\n\n",  
8176   38DF 3B 81 68      mov d, _quad_x ; $quad_x
8177   38E2 2A            mov b, [d]
8178   38E3 FD AB         swp b
8179   38E5 D8            push b
8180   38E6 3B 7F 68      mov d, _quad_y ; $quad_y
8181   38E9 2A            mov b, [d]
8182   38EA FD AB         swp b
8183   38EC D8            push b
8184   38ED 3B A0 68      mov d, _ship_x ; $ship_x
8185   38F0 2A            mov b, [d]
8186   38F1 FD AB         swp b
8187   38F3 D8            push b
8188   38F4 07 D7 22      call FROM_FIXED00
8189   38F7 51 02 00      add sp, 2
8190   38FA FD AB         swp b
8191   38FC D8            push b
8192   38FD 3B 9E 68      mov d, _ship_y ; $ship_y
8193   3900 2A            mov b, [d]
8194   3901 FD AB         swp b
8195   3903 D8            push b
8196   3904 07 D7 22      call FROM_FIXED00
8197   3907 51 02 00      add sp, 2
8198   390A FD AB         swp b
8199   390C D8            push b
8200   390D 26 39 71      mov b, _s82 ; "Warp Engines shut down at sector %d, %d of quadrant %d, %d.\n\n"
8201   3910 FD AB         swp b
8202   3912 D8            push b
8203   3913 07 BA 07      call printf
8204   3916 51 0A 00      add sp, 10
8205   3919 0A 1C 39      jmp _if122_exit
8206   391C             _if122_exit:
8207   391C             ; maneuver_energy(n); 
8208   391C FA F9 FF      lea d, [bp + -7] ; $n
8209   391F 2A            mov b, [d]
8210   3920 FD AB         swp b
8211   3922 D8            push b
8212   3923 07 0D 3B      call maneuver_energy
8213   3926 51 02 00      add sp, 2
8214   3929             ; if (FROM_FIXED(stardate) > time_start + time_up) 
8215   3929             _if123_cond:
8216   3929 3B A2 68      mov d, _stardate ; $stardate
8217   392C 2A            mov b, [d]
8218   392D FD AB         swp b
8219   392F D8            push b
8220   3930 07 B4 22      call FROM_FIXED
8221   3933 51 02 00      add sp, 2
8222   3936             ; START RELATIONAL
8223   3936 D7            push a
8224   3937 11            mov a, b
8225   3938 3B 86 68      mov d, _time_start ; $time_start
8226   393B 2A            mov b, [d]
8227   393C             ; START TERMS
8228   393C D7            push a
8229   393D 11            mov a, b
8230   393E 3B 88 68      mov d, _time_up ; $time_up
8231   3941 2A            mov b, [d]
8232   3942 56            add b, a
8233   3943 E4            pop a
8234   3944             ; END TERMS
8235   3944 B0            cmp a, b
8236   3945 FD 7F         sgt ; >
8237   3947 E4            pop a
8238   3948             ; END RELATIONAL
8239   3948 C0 00 00      cmp b, 0
8240   394B C6 54 39      je _if123_exit
8241   394E             _if123_true:
8242   394E             ; end_of_time(); 
8243   394E 07 E9 5B      call end_of_time
8244   3951 0A 54 39      jmp _if123_exit
8245   3954             _if123_exit:
8246   3954             ; if (quad_y != quad_y_old || quad_x != quad_x_old) { 
8247   3954             _if124_cond:
8248   3954 3B 7F 68      mov d, _quad_y ; $quad_y
8249   3957 2A            mov b, [d]
8250   3958             ; START RELATIONAL
8251   3958 D7            push a
8252   3959 11            mov a, b
8253   395A FA E5 FF      lea d, [bp + -27] ; $quad_y_old
8254   395D 32            mov bl, [d]
8255   395E A7 00         mov bh, 0
8256   3960 B0            cmp a, b
8257   3961 FD 72         sneq ; !=
8258   3963 E4            pop a
8259   3964             ; END RELATIONAL
8260   3964             ; START LOGICAL OR
8261   3964 D7            push a
8262   3965 11            mov a, b
8263   3966 3B 81 68      mov d, _quad_x ; $quad_x
8264   3969 2A            mov b, [d]
8265   396A             ; START RELATIONAL
8266   396A D7            push a
8267   396B 11            mov a, b
8268   396C FA E4 FF      lea d, [bp + -28] ; $quad_x_old
8269   396F 32            mov bl, [d]
8270   3970 A7 00         mov bh, 0
8271   3972 B0            cmp a, b
8272   3973 FD 72         sneq ; !=
8273   3975 E4            pop a
8274   3976             ; END RELATIONAL
8275   3976 FD A8         sor a, b ; ||
8276   3978 E4            pop a
8277   3979             ; END LOGICAL OR
8278   3979 C0 00 00      cmp b, 0
8279   397C C6 A0 39      je _if124_exit
8280   397F             _if124_true:
8281   397F             ; stardate = stardate + TO_FIXED(1); 
8282   397F 3B A2 68      mov d, _stardate ; $stardate
8283   3982 DA            push d
8284   3983 3B A2 68      mov d, _stardate ; $stardate
8285   3986 2A            mov b, [d]
8286   3987             ; START TERMS
8287   3987 D7            push a
8288   3988 11            mov a, b
8289   3989 26 01 00      mov b, $1
8290   398C FD AB         swp b
8291   398E D8            push b
8292   398F 07 A2 22      call TO_FIXED
8293   3992 51 02 00      add sp, 2
8294   3995 56            add b, a
8295   3996 E4            pop a
8296   3997             ; END TERMS
8297   3997 E7            pop d
8298   3998 FD 43         mov [d], b
8299   399A             ; new_quadrant(); 
8300   399A 07 78 2E      call new_quadrant
8301   399D 0A A0 39      jmp _if124_exit
8302   39A0             _if124_exit:
8303   39A0             ; complete_maneuver(warp, n); 
8304   39A0 FA F9 FF      lea d, [bp + -7] ; $n
8305   39A3 2A            mov b, [d]
8306   39A4 FD AB         swp b
8307   39A6 D8            push b
8308   39A7 FA FB FF      lea d, [bp + -5] ; $warp
8309   39AA 2A            mov b, [d]
8310   39AB FD AB         swp b
8311   39AD D8            push b
8312   39AE 07 6E 3A      call complete_maneuver
8313   39B1 51 04 00      add sp, 4
8314   39B4             ; return; 
8315   39B4 F9            leave
8316   39B5 09            ret
8317   39B6 0A B9 39      jmp _if115_exit
8318   39B9             _if115_exit:
8319   39B9             ; if (quad[z1-1][z2-1] !=  		0      ) {	/* Sector not empty */ 
8320   39B9             _if125_cond:
8321   39B9 3B A4 68      mov d, _quad_data ; $quad
8322   39BC D7            push a
8323   39BD DA            push d
8324   39BE FA F1 FF      lea d, [bp + -15] ; $z1
8325   39C1 2A            mov b, [d]
8326   39C2             ; START TERMS
8327   39C2 D7            push a
8328   39C3 11            mov a, b
8329   39C4 26 01 00      mov b, $1
8330   39C7 60            sub a, b
8331   39C8 27            mov b, a
8332   39C9 E4            pop a
8333   39CA             ; END TERMS
8334   39CA E7            pop d
8335   39CB FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
8336   39CF DA            push d
8337   39D0 FA EF FF      lea d, [bp + -17] ; $z2
8338   39D3 2A            mov b, [d]
8339   39D4             ; START TERMS
8340   39D4 D7            push a
8341   39D5 11            mov a, b
8342   39D6 26 01 00      mov b, $1
8343   39D9 60            sub a, b
8344   39DA 27            mov b, a
8345   39DB E4            pop a
8346   39DC             ; END TERMS
8347   39DC E7            pop d
8348   39DD 5A            add d, b
8349   39DE E4            pop a
8350   39DF 32            mov bl, [d]
8351   39E0 A7 00         mov bh, 0
8352   39E2             ; START RELATIONAL
8353   39E2 D7            push a
8354   39E3 11            mov a, b
8355   39E4 26 00 00      mov b, $0
8356   39E7 B0            cmp a, b
8357   39E8 FD 72         sneq ; !=
8358   39EA E4            pop a
8359   39EB             ; END RELATIONAL
8360   39EB C0 00 00      cmp b, 0
8361   39EE C6 48 3A      je _if125_exit
8362   39F1             _if125_true:
8363   39F1             ; ship_y = ship_y - x1; 
8364   39F1 3B 9E 68      mov d, _ship_y ; $ship_y
8365   39F4 DA            push d
8366   39F5 3B 9E 68      mov d, _ship_y ; $ship_y
8367   39F8 2A            mov b, [d]
8368   39F9             ; START TERMS
8369   39F9 D7            push a
8370   39FA 11            mov a, b
8371   39FB FA ED FF      lea d, [bp + -19] ; $x1
8372   39FE 2A            mov b, [d]
8373   39FF 60            sub a, b
8374   3A00 27            mov b, a
8375   3A01 E4            pop a
8376   3A02             ; END TERMS
8377   3A02 E7            pop d
8378   3A03 FD 43         mov [d], b
8379   3A05             ; ship_x = ship_x - x2; 
8380   3A05 3B A0 68      mov d, _ship_x ; $ship_x
8381   3A08 DA            push d
8382   3A09 3B A0 68      mov d, _ship_x ; $ship_x
8383   3A0C 2A            mov b, [d]
8384   3A0D             ; START TERMS
8385   3A0D D7            push a
8386   3A0E 11            mov a, b
8387   3A0F FA EB FF      lea d, [bp + -21] ; $x2
8388   3A12 2A            mov b, [d]
8389   3A13 60            sub a, b
8390   3A14 27            mov b, a
8391   3A15 E4            pop a
8392   3A16             ; END TERMS
8393   3A16 E7            pop d
8394   3A17 FD 43         mov [d], b
8395   3A19             ; printf("Warp Engines shut down at sector %d, %d due to bad navigation.\n\n", z1, z2); 
8396   3A19 FA EF FF      lea d, [bp + -17] ; $z2
8397   3A1C 2A            mov b, [d]
8398   3A1D FD AB         swp b
8399   3A1F D8            push b
8400   3A20 FA F1 FF      lea d, [bp + -15] ; $z1
8401   3A23 2A            mov b, [d]
8402   3A24 FD AB         swp b
8403   3A26 D8            push b
8404   3A27 26 77 71      mov b, _s83 ; "Warp Engines shut down at sector %d, %d due to bad navigation.\n\n"
8405   3A2A FD AB         swp b
8406   3A2C D8            push b
8407   3A2D 07 BA 07      call printf
8408   3A30 51 06 00      add sp, 6
8409   3A33             ; i = n + 1; 
8410   3A33 FA FF FF      lea d, [bp + -1] ; $i
8411   3A36 DA            push d
8412   3A37 FA F9 FF      lea d, [bp + -7] ; $n
8413   3A3A 2A            mov b, [d]
8414   3A3B             ; START TERMS
8415   3A3B D7            push a
8416   3A3C 11            mov a, b
8417   3A3D 26 01 00      mov b, $1
8418   3A40 56            add b, a
8419   3A41 E4            pop a
8420   3A42             ; END TERMS
8421   3A42 E7            pop d
8422   3A43 FD 43         mov [d], b
8423   3A45 0A 48 3A      jmp _if125_exit
8424   3A48             _if125_exit:
8425   3A48             _for114_update:
8426   3A48 FA FF FF      lea d, [bp + -1] ; $i
8427   3A4B 2A            mov b, [d]
8428   3A4C FD 77         inc b
8429   3A4E FA FF FF      lea d, [bp + -1] ; $i
8430   3A51 FD 43         mov [d], b
8431   3A53 FD 7D         dec b
8432   3A55 0A E1 35      jmp _for114_cond
8433   3A58             _for114_exit:
8434   3A58             ; complete_maneuver(warp, n); 
8435   3A58 FA F9 FF      lea d, [bp + -7] ; $n
8436   3A5B 2A            mov b, [d]
8437   3A5C FD AB         swp b
8438   3A5E D8            push b
8439   3A5F FA FB FF      lea d, [bp + -5] ; $warp
8440   3A62 2A            mov b, [d]
8441   3A63 FD AB         swp b
8442   3A65 D8            push b
8443   3A66 07 6E 3A      call complete_maneuver
8444   3A69 51 04 00      add sp, 4
8445   3A6C F9            leave
8446   3A6D 09            ret
8447   3A6E             
8448   3A6E             complete_maneuver:
8449   3A6E F8 00 00      enter 0 ; (push bp; mov bp, sp)
8450   3A71             ; unsigned int        time_used; 
8451   3A71 52 02 00      sub sp, 2
8452   3A74             ; place_ship(); 
8453   3A74 07 34 2E      call place_ship
8454   3A77             ; maneuver_energy(n); 
8455   3A77 FA 07 00      lea d, [bp + 7] ; $n
8456   3A7A 2A            mov b, [d]
8457   3A7B FD AB         swp b
8458   3A7D D8            push b
8459   3A7E 07 0D 3B      call maneuver_energy
8460   3A81 51 02 00      add sp, 2
8461   3A84             ; time_used = TO_FIXED(1); 
8462   3A84 FA FF FF      lea d, [bp + -1] ; $time_used
8463   3A87 DA            push d
8464   3A88 26 01 00      mov b, $1
8465   3A8B FD AB         swp b
8466   3A8D D8            push b
8467   3A8E 07 A2 22      call TO_FIXED
8468   3A91 51 02 00      add sp, 2
8469   3A94 E7            pop d
8470   3A95 FD 43         mov [d], b
8471   3A97             ; if (warp < 100) 
8472   3A97             _if126_cond:
8473   3A97 FA 05 00      lea d, [bp + 5] ; $warp
8474   3A9A 2A            mov b, [d]
8475   3A9B             ; START RELATIONAL
8476   3A9B D7            push a
8477   3A9C 11            mov a, b
8478   3A9D 26 64 00      mov b, $64
8479   3AA0 B0            cmp a, b
8480   3AA1 FD 75         slu ; < (unsigned)
8481   3AA3 E4            pop a
8482   3AA4             ; END RELATIONAL
8483   3AA4 C0 00 00      cmp b, 0
8484   3AA7 C6 CA 3A      je _if126_exit
8485   3AAA             _if126_true:
8486   3AAA             ; time_used = TO_FIXED(FROM_FIXED00(warp)); 
8487   3AAA FA FF FF      lea d, [bp + -1] ; $time_used
8488   3AAD DA            push d
8489   3AAE FA 05 00      lea d, [bp + 5] ; $warp
8490   3AB1 2A            mov b, [d]
8491   3AB2 FD AB         swp b
8492   3AB4 D8            push b
8493   3AB5 07 D7 22      call FROM_FIXED00
8494   3AB8 51 02 00      add sp, 2
8495   3ABB FD AB         swp b
8496   3ABD D8            push b
8497   3ABE 07 A2 22      call TO_FIXED
8498   3AC1 51 02 00      add sp, 2
8499   3AC4 E7            pop d
8500   3AC5 FD 43         mov [d], b
8501   3AC7 0A CA 3A      jmp _if126_exit
8502   3ACA             _if126_exit:
8503   3ACA             ; stardate = stardate + time_used; 
8504   3ACA 3B A2 68      mov d, _stardate ; $stardate
8505   3ACD DA            push d
8506   3ACE 3B A2 68      mov d, _stardate ; $stardate
8507   3AD1 2A            mov b, [d]
8508   3AD2             ; START TERMS
8509   3AD2 D7            push a
8510   3AD3 11            mov a, b
8511   3AD4 FA FF FF      lea d, [bp + -1] ; $time_used
8512   3AD7 2A            mov b, [d]
8513   3AD8 56            add b, a
8514   3AD9 E4            pop a
8515   3ADA             ; END TERMS
8516   3ADA E7            pop d
8517   3ADB FD 43         mov [d], b
8518   3ADD             ; if (FROM_FIXED(stardate) > time_start + time_up) 
8519   3ADD             _if127_cond:
8520   3ADD 3B A2 68      mov d, _stardate ; $stardate
8521   3AE0 2A            mov b, [d]
8522   3AE1 FD AB         swp b
8523   3AE3 D8            push b
8524   3AE4 07 B4 22      call FROM_FIXED
8525   3AE7 51 02 00      add sp, 2
8526   3AEA             ; START RELATIONAL
8527   3AEA D7            push a
8528   3AEB 11            mov a, b
8529   3AEC 3B 86 68      mov d, _time_start ; $time_start
8530   3AEF 2A            mov b, [d]
8531   3AF0             ; START TERMS
8532   3AF0 D7            push a
8533   3AF1 11            mov a, b
8534   3AF2 3B 88 68      mov d, _time_up ; $time_up
8535   3AF5 2A            mov b, [d]
8536   3AF6 56            add b, a
8537   3AF7 E4            pop a
8538   3AF8             ; END TERMS
8539   3AF8 B0            cmp a, b
8540   3AF9 FD 7F         sgt ; >
8541   3AFB E4            pop a
8542   3AFC             ; END RELATIONAL
8543   3AFC C0 00 00      cmp b, 0
8544   3AFF C6 08 3B      je _if127_exit
8545   3B02             _if127_true:
8546   3B02             ; end_of_time(); 
8547   3B02 07 E9 5B      call end_of_time
8548   3B05 0A 08 3B      jmp _if127_exit
8549   3B08             _if127_exit:
8550   3B08             ; short_range_scan(); 
8551   3B08 07 8C 3B      call short_range_scan
8552   3B0B F9            leave
8553   3B0C 09            ret
8554   3B0D             
8555   3B0D             maneuver_energy:
8556   3B0D F8 00 00      enter 0 ; (push bp; mov bp, sp)
8557   3B10             ; energy = energy - n + 10; 
8558   3B10 3B C8 67      mov d, _energy ; $energy
8559   3B13 DA            push d
8560   3B14 3B C8 67      mov d, _energy ; $energy
8561   3B17 2A            mov b, [d]
8562   3B18             ; START TERMS
8563   3B18 D7            push a
8564   3B19 11            mov a, b
8565   3B1A FA 05 00      lea d, [bp + 5] ; $n
8566   3B1D 2A            mov b, [d]
8567   3B1E 60            sub a, b
8568   3B1F 27            mov b, a
8569   3B20 11            mov a, b
8570   3B21 26 0A 00      mov b, $a
8571   3B24 56            add b, a
8572   3B25 E4            pop a
8573   3B26             ; END TERMS
8574   3B26 E7            pop d
8575   3B27 FD 43         mov [d], b
8576   3B29             ; if (energy >= 0) 
8577   3B29             _if128_cond:
8578   3B29 3B C8 67      mov d, _energy ; $energy
8579   3B2C 2A            mov b, [d]
8580   3B2D             ; START RELATIONAL
8581   3B2D D7            push a
8582   3B2E 11            mov a, b
8583   3B2F 26 00 00      mov b, $0
8584   3B32 B0            cmp a, b
8585   3B33 FD 80         sge ; >=
8586   3B35 E4            pop a
8587   3B36             ; END RELATIONAL
8588   3B36 C0 00 00      cmp b, 0
8589   3B39 C6 41 3B      je _if128_exit
8590   3B3C             _if128_true:
8591   3B3C             ; return; 
8592   3B3C F9            leave
8593   3B3D 09            ret
8594   3B3E 0A 41 3B      jmp _if128_exit
8595   3B41             _if128_exit:
8596   3B41             ; puts("Shield Control supplies energy to complete maneuver.\n"); 
8597   3B41 26 B8 71      mov b, _s84 ; "Shield Control supplies energy to complete maneuver.\n"
8598   3B44 FD AB         swp b
8599   3B46 D8            push b
8600   3B47 07 B8 1A      call puts
8601   3B4A 51 02 00      add sp, 2
8602   3B4D             ; shield = shield + energy; 
8603   3B4D 3B 83 68      mov d, _shield ; $shield
8604   3B50 DA            push d
8605   3B51 3B 83 68      mov d, _shield ; $shield
8606   3B54 2A            mov b, [d]
8607   3B55             ; START TERMS
8608   3B55 D7            push a
8609   3B56 11            mov a, b
8610   3B57 3B C8 67      mov d, _energy ; $energy
8611   3B5A 2A            mov b, [d]
8612   3B5B 56            add b, a
8613   3B5C E4            pop a
8614   3B5D             ; END TERMS
8615   3B5D E7            pop d
8616   3B5E FD 43         mov [d], b
8617   3B60             ; energy = 0; 
8618   3B60 3B C8 67      mov d, _energy ; $energy
8619   3B63 DA            push d
8620   3B64 26 00 00      mov b, $0
8621   3B67 E7            pop d
8622   3B68 FD 43         mov [d], b
8623   3B6A             ; if (shield <= 0) 
8624   3B6A             _if129_cond:
8625   3B6A 3B 83 68      mov d, _shield ; $shield
8626   3B6D 2A            mov b, [d]
8627   3B6E             ; START RELATIONAL
8628   3B6E D7            push a
8629   3B6F 11            mov a, b
8630   3B70 26 00 00      mov b, $0
8631   3B73 B0            cmp a, b
8632   3B74 FD 74         sle ; <= (signed)
8633   3B76 E4            pop a
8634   3B77             ; END RELATIONAL
8635   3B77 C0 00 00      cmp b, 0
8636   3B7A C6 8A 3B      je _if129_exit
8637   3B7D             _if129_true:
8638   3B7D             ; shield = 0; 
8639   3B7D 3B 83 68      mov d, _shield ; $shield
8640   3B80 DA            push d
8641   3B81 26 00 00      mov b, $0
8642   3B84 E7            pop d
8643   3B85 FD 43         mov [d], b
8644   3B87 0A 8A 3B      jmp _if129_exit
8645   3B8A             _if129_exit:
8646   3B8A F9            leave
8647   3B8B 09            ret
8648   3B8C             
8649   3B8C             short_range_scan:
8650   3B8C F8 00 00      enter 0 ; (push bp; mov bp, sp)
8651   3B8F             ; int i, j; 
8652   3B8F 52 02 00      sub sp, 2
8653   3B92 52 02 00      sub sp, 2
8654   3B95             ; char *sC = "GREEN"; 
8655   3B95 52 02 00      sub sp, 2
8656   3B98             ; --- START LOCAL VAR INITIALIZATION
8657   3B98 FA FB FF      lea d, [bp + -5] ; $sC
8658   3B9B DA            push d
8659   3B9C 26 EE 71      mov b, _s85 ; "GREEN"
8660   3B9F E7            pop d
8661   3BA0 FD 43         mov [d], b
8662   3BA2             ; --- END LOCAL VAR INITIALIZATION
8663   3BA2             ; if (energy < energy0 / 10) 
8664   3BA2             _if130_cond:
8665   3BA2 3B C8 67      mov d, _energy ; $energy
8666   3BA5 2A            mov b, [d]
8667   3BA6             ; START RELATIONAL
8668   3BA6 D7            push a
8669   3BA7 11            mov a, b
8670   3BA8 3B CA 67      mov d, _energy0 ; $energy0
8671   3BAB 2A            mov b, [d]
8672   3BAC             ; START FACTORS
8673   3BAC D7            push a
8674   3BAD 11            mov a, b
8675   3BAE 26 0A 00      mov b, $a
8676   3BB1 AE            div a, b
8677   3BB2 27            mov b, a
8678   3BB3 E4            pop a
8679   3BB4             ; END FACTORS
8680   3BB4 B0            cmp a, b
8681   3BB5 FD 73         slt ; < (signed)
8682   3BB7 E4            pop a
8683   3BB8             ; END RELATIONAL
8684   3BB8 C0 00 00      cmp b, 0
8685   3BBB C6 CB 3B      je _if130_exit
8686   3BBE             _if130_true:
8687   3BBE             ; sC = "YELLOW"; 
8688   3BBE FA FB FF      lea d, [bp + -5] ; $sC
8689   3BC1 DA            push d
8690   3BC2 26 F4 71      mov b, _s86 ; "YELLOW"
8691   3BC5 E7            pop d
8692   3BC6 FD 43         mov [d], b
8693   3BC8 0A CB 3B      jmp _if130_exit
8694   3BCB             _if130_exit:
8695   3BCB             ; if (klingons > 0) 
8696   3BCB             _if131_cond:
8697   3BCB 3B 7A 68      mov d, _klingons ; $klingons
8698   3BCE 32            mov bl, [d]
8699   3BCF A7 00         mov bh, 0
8700   3BD1             ; START RELATIONAL
8701   3BD1 D7            push a
8702   3BD2 11            mov a, b
8703   3BD3 26 00 00      mov b, $0
8704   3BD6 B0            cmp a, b
8705   3BD7 FD 81         sgu ; > (unsigned)
8706   3BD9 E4            pop a
8707   3BDA             ; END RELATIONAL
8708   3BDA C0 00 00      cmp b, 0
8709   3BDD C6 ED 3B      je _if131_exit
8710   3BE0             _if131_true:
8711   3BE0             ; sC = "*RED*"; 
8712   3BE0 FA FB FF      lea d, [bp + -5] ; $sC
8713   3BE3 DA            push d
8714   3BE4 26 FB 71      mov b, _s87 ; "*RED*"
8715   3BE7 E7            pop d
8716   3BE8 FD 43         mov [d], b
8717   3BEA 0A ED 3B      jmp _if131_exit
8718   3BED             _if131_exit:
8719   3BED             ; docked = 0; 
8720   3BED 3B C7 67      mov d, _docked ; $docked
8721   3BF0 DA            push d
8722   3BF1 26 00 00      mov b, $0
8723   3BF4 E7            pop d
8724   3BF5 FD 3E         mov [d], bl
8725   3BF7             ; for (i = (int) (FROM_FIXED00(ship_y) - 1); i <= (int) (FROM_FIXED00(ship_y) + 1); i++) 
8726   3BF7             _for132_init:
8727   3BF7 FA FF FF      lea d, [bp + -1] ; $i
8728   3BFA DA            push d
8729   3BFB 3B 9E 68      mov d, _ship_y ; $ship_y
8730   3BFE 2A            mov b, [d]
8731   3BFF FD AB         swp b
8732   3C01 D8            push b
8733   3C02 07 D7 22      call FROM_FIXED00
8734   3C05 51 02 00      add sp, 2
8735   3C08             ; START TERMS
8736   3C08 D7            push a
8737   3C09 11            mov a, b
8738   3C0A 26 01 00      mov b, $1
8739   3C0D 60            sub a, b
8740   3C0E 27            mov b, a
8741   3C0F E4            pop a
8742   3C10             ; END TERMS
8743   3C10 E7            pop d
8744   3C11 FD 43         mov [d], b
8745   3C13             _for132_cond:
8746   3C13 FA FF FF      lea d, [bp + -1] ; $i
8747   3C16 2A            mov b, [d]
8748   3C17             ; START RELATIONAL
8749   3C17 D7            push a
8750   3C18 11            mov a, b
8751   3C19 3B 9E 68      mov d, _ship_y ; $ship_y
8752   3C1C 2A            mov b, [d]
8753   3C1D FD AB         swp b
8754   3C1F D8            push b
8755   3C20 07 D7 22      call FROM_FIXED00
8756   3C23 51 02 00      add sp, 2
8757   3C26             ; START TERMS
8758   3C26 D7            push a
8759   3C27 11            mov a, b
8760   3C28 26 01 00      mov b, $1
8761   3C2B 56            add b, a
8762   3C2C E4            pop a
8763   3C2D             ; END TERMS
8764   3C2D B0            cmp a, b
8765   3C2E FD 74         sle ; <= (signed)
8766   3C30 E4            pop a
8767   3C31             ; END RELATIONAL
8768   3C31 C0 00 00      cmp b, 0
8769   3C34 C6 5C 3D      je _for132_exit
8770   3C37             _for132_block:
8771   3C37             ; for (j = (int) (FROM_FIXED00(ship_x) - 1); j <= (int) (FROM_FIXED00(ship_x) + 1); j++) 
8772   3C37             _for133_init:
8773   3C37 FA FD FF      lea d, [bp + -3] ; $j
8774   3C3A DA            push d
8775   3C3B 3B A0 68      mov d, _ship_x ; $ship_x
8776   3C3E 2A            mov b, [d]
8777   3C3F FD AB         swp b
8778   3C41 D8            push b
8779   3C42 07 D7 22      call FROM_FIXED00
8780   3C45 51 02 00      add sp, 2
8781   3C48             ; START TERMS
8782   3C48 D7            push a
8783   3C49 11            mov a, b
8784   3C4A 26 01 00      mov b, $1
8785   3C4D 60            sub a, b
8786   3C4E 27            mov b, a
8787   3C4F E4            pop a
8788   3C50             ; END TERMS
8789   3C50 E7            pop d
8790   3C51 FD 43         mov [d], b
8791   3C53             _for133_cond:
8792   3C53 FA FD FF      lea d, [bp + -3] ; $j
8793   3C56 2A            mov b, [d]
8794   3C57             ; START RELATIONAL
8795   3C57 D7            push a
8796   3C58 11            mov a, b
8797   3C59 3B A0 68      mov d, _ship_x ; $ship_x
8798   3C5C 2A            mov b, [d]
8799   3C5D FD AB         swp b
8800   3C5F D8            push b
8801   3C60 07 D7 22      call FROM_FIXED00
8802   3C63 51 02 00      add sp, 2
8803   3C66             ; START TERMS
8804   3C66 D7            push a
8805   3C67 11            mov a, b
8806   3C68 26 01 00      mov b, $1
8807   3C6B 56            add b, a
8808   3C6C E4            pop a
8809   3C6D             ; END TERMS
8810   3C6D B0            cmp a, b
8811   3C6E FD 74         sle ; <= (signed)
8812   3C70 E4            pop a
8813   3C71             ; END RELATIONAL
8814   3C71 C0 00 00      cmp b, 0
8815   3C74 C6 4C 3D      je _for133_exit
8816   3C77             _for133_block:
8817   3C77             ; if (i >= 1 && i <= 8 && j >= 1 && j <= 8) { 
8818   3C77             _if134_cond:
8819   3C77 FA FF FF      lea d, [bp + -1] ; $i
8820   3C7A 2A            mov b, [d]
8821   3C7B             ; START RELATIONAL
8822   3C7B D7            push a
8823   3C7C 11            mov a, b
8824   3C7D 26 01 00      mov b, $1
8825   3C80 B0            cmp a, b
8826   3C81 FD 80         sge ; >=
8827   3C83 E4            pop a
8828   3C84             ; END RELATIONAL
8829   3C84             ; START LOGICAL AND
8830   3C84 D7            push a
8831   3C85 11            mov a, b
8832   3C86 FA FF FF      lea d, [bp + -1] ; $i
8833   3C89 2A            mov b, [d]
8834   3C8A             ; START RELATIONAL
8835   3C8A D7            push a
8836   3C8B 11            mov a, b
8837   3C8C 26 08 00      mov b, $8
8838   3C8F B0            cmp a, b
8839   3C90 FD 74         sle ; <= (signed)
8840   3C92 E4            pop a
8841   3C93             ; END RELATIONAL
8842   3C93 FD A7         sand a, b
8843   3C95 11            mov a, b
8844   3C96 FA FD FF      lea d, [bp + -3] ; $j
8845   3C99 2A            mov b, [d]
8846   3C9A             ; START RELATIONAL
8847   3C9A D7            push a
8848   3C9B 11            mov a, b
8849   3C9C 26 01 00      mov b, $1
8850   3C9F B0            cmp a, b
8851   3CA0 FD 80         sge ; >=
8852   3CA2 E4            pop a
8853   3CA3             ; END RELATIONAL
8854   3CA3 FD A7         sand a, b
8855   3CA5 11            mov a, b
8856   3CA6 FA FD FF      lea d, [bp + -3] ; $j
8857   3CA9 2A            mov b, [d]
8858   3CAA             ; START RELATIONAL
8859   3CAA D7            push a
8860   3CAB 11            mov a, b
8861   3CAC 26 08 00      mov b, $8
8862   3CAF B0            cmp a, b
8863   3CB0 FD 74         sle ; <= (signed)
8864   3CB2 E4            pop a
8865   3CB3             ; END RELATIONAL
8866   3CB3 FD A7         sand a, b
8867   3CB5 E4            pop a
8868   3CB6             ; END LOGICAL AND
8869   3CB6 C0 00 00      cmp b, 0
8870   3CB9 C6 3C 3D      je _if134_exit
8871   3CBC             _if134_true:
8872   3CBC             ; if (quad[i-1][j-1] ==  		2     ) { 
8873   3CBC             _if135_cond:
8874   3CBC 3B A4 68      mov d, _quad_data ; $quad
8875   3CBF D7            push a
8876   3CC0 DA            push d
8877   3CC1 FA FF FF      lea d, [bp + -1] ; $i
8878   3CC4 2A            mov b, [d]
8879   3CC5             ; START TERMS
8880   3CC5 D7            push a
8881   3CC6 11            mov a, b
8882   3CC7 26 01 00      mov b, $1
8883   3CCA 60            sub a, b
8884   3CCB 27            mov b, a
8885   3CCC E4            pop a
8886   3CCD             ; END TERMS
8887   3CCD E7            pop d
8888   3CCE FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
8889   3CD2 DA            push d
8890   3CD3 FA FD FF      lea d, [bp + -3] ; $j
8891   3CD6 2A            mov b, [d]
8892   3CD7             ; START TERMS
8893   3CD7 D7            push a
8894   3CD8 11            mov a, b
8895   3CD9 26 01 00      mov b, $1
8896   3CDC 60            sub a, b
8897   3CDD 27            mov b, a
8898   3CDE E4            pop a
8899   3CDF             ; END TERMS
8900   3CDF E7            pop d
8901   3CE0 5A            add d, b
8902   3CE1 E4            pop a
8903   3CE2 32            mov bl, [d]
8904   3CE3 A7 00         mov bh, 0
8905   3CE5             ; START RELATIONAL
8906   3CE5 D7            push a
8907   3CE6 11            mov a, b
8908   3CE7 26 02 00      mov b, $2
8909   3CEA B0            cmp a, b
8910   3CEB FD 71         seq ; ==
8911   3CED E4            pop a
8912   3CEE             ; END RELATIONAL
8913   3CEE C0 00 00      cmp b, 0
8914   3CF1 C6 39 3D      je _if135_exit
8915   3CF4             _if135_true:
8916   3CF4             ; docked = 1; 
8917   3CF4 3B C7 67      mov d, _docked ; $docked
8918   3CF7 DA            push d
8919   3CF8 26 01 00      mov b, $1
8920   3CFB E7            pop d
8921   3CFC FD 3E         mov [d], bl
8922   3CFE             ; sC = "DOCKED"; 
8923   3CFE FA FB FF      lea d, [bp + -5] ; $sC
8924   3D01 DA            push d
8925   3D02 26 01 72      mov b, _s88 ; "DOCKED"
8926   3D05 E7            pop d
8927   3D06 FD 43         mov [d], b
8928   3D08             ; energy = energy0; 
8929   3D08 3B C8 67      mov d, _energy ; $energy
8930   3D0B DA            push d
8931   3D0C 3B CA 67      mov d, _energy0 ; $energy0
8932   3D0F 2A            mov b, [d]
8933   3D10 E7            pop d
8934   3D11 FD 43         mov [d], b
8935   3D13             ; torps = torps0; 
8936   3D13 3B 7D 68      mov d, _torps ; $torps
8937   3D16 DA            push d
8938   3D17 3B 7E 68      mov d, _torps0 ; $torps0
8939   3D1A 32            mov bl, [d]
8940   3D1B A7 00         mov bh, 0
8941   3D1D E7            pop d
8942   3D1E FD 3E         mov [d], bl
8943   3D20             ; puts("Shields dropped for docking purposes."); 
8944   3D20 26 08 72      mov b, _s89 ; "Shields dropped for docking purposes."
8945   3D23 FD AB         swp b
8946   3D25 D8            push b
8947   3D26 07 B8 1A      call puts
8948   3D29 51 02 00      add sp, 2
8949   3D2C             ; shield = 0; 
8950   3D2C 3B 83 68      mov d, _shield ; $shield
8951   3D2F DA            push d
8952   3D30 26 00 00      mov b, $0
8953   3D33 E7            pop d
8954   3D34 FD 43         mov [d], b
8955   3D36 0A 39 3D      jmp _if135_exit
8956   3D39             _if135_exit:
8957   3D39 0A 3C 3D      jmp _if134_exit
8958   3D3C             _if134_exit:
8959   3D3C             _for133_update:
8960   3D3C FA FD FF      lea d, [bp + -3] ; $j
8961   3D3F 2A            mov b, [d]
8962   3D40 FD 77         inc b
8963   3D42 FA FD FF      lea d, [bp + -3] ; $j
8964   3D45 FD 43         mov [d], b
8965   3D47 FD 7D         dec b
8966   3D49 0A 53 3C      jmp _for133_cond
8967   3D4C             _for133_exit:
8968   3D4C             _for132_update:
8969   3D4C FA FF FF      lea d, [bp + -1] ; $i
8970   3D4F 2A            mov b, [d]
8971   3D50 FD 77         inc b
8972   3D52 FA FF FF      lea d, [bp + -1] ; $i
8973   3D55 FD 43         mov [d], b
8974   3D57 FD 7D         dec b
8975   3D59 0A 13 3C      jmp _for132_cond
8976   3D5C             _for132_exit:
8977   3D5C             ; if (damage[2] < 0) { 
8978   3D5C             _if136_cond:
8979   3D5C 3B 8A 68      mov d, _damage_data ; $damage
8980   3D5F D7            push a
8981   3D60 DA            push d
8982   3D61 26 02 00      mov b, $2
8983   3D64 E7            pop d
8984   3D65 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8985   3D69 E4            pop a
8986   3D6A 2A            mov b, [d]
8987   3D6B             ; START RELATIONAL
8988   3D6B D7            push a
8989   3D6C 11            mov a, b
8990   3D6D 26 00 00      mov b, $0
8991   3D70 B0            cmp a, b
8992   3D71 FD 73         slt ; < (signed)
8993   3D73 E4            pop a
8994   3D74             ; END RELATIONAL
8995   3D74 C0 00 00      cmp b, 0
8996   3D77 C6 8B 3D      je _if136_exit
8997   3D7A             _if136_true:
8998   3D7A             ; puts("\n*** Short Range Sensors are out ***"); 
8999   3D7A 26 2E 72      mov b, _s90 ; "\n*** Short Range Sensors are out ***"
9000   3D7D FD AB         swp b
9001   3D7F D8            push b
9002   3D80 07 B8 1A      call puts
9003   3D83 51 02 00      add sp, 2
9004   3D86             ; return; 
9005   3D86 F9            leave
9006   3D87 09            ret
9007   3D88 0A 8B 3D      jmp _if136_exit
9008   3D8B             _if136_exit:
9009   3D8B             ; puts(srs_1); 
9010   3D8B 3B C5 69      mov d, _srs_1 ; $srs_1
9011   3D8E 2A            mov b, [d]
9012   3D8F FD AB         swp b
9013   3D91 D8            push b
9014   3D92 07 B8 1A      call puts
9015   3D95 51 02 00      add sp, 2
9016   3D98             ; for (i = 0; i < 8; i++) { 
9017   3D98             _for137_init:
9018   3D98 FA FF FF      lea d, [bp + -1] ; $i
9019   3D9B DA            push d
9020   3D9C 26 00 00      mov b, $0
9021   3D9F E7            pop d
9022   3DA0 FD 43         mov [d], b
9023   3DA2             _for137_cond:
9024   3DA2 FA FF FF      lea d, [bp + -1] ; $i
9025   3DA5 2A            mov b, [d]
9026   3DA6             ; START RELATIONAL
9027   3DA6 D7            push a
9028   3DA7 11            mov a, b
9029   3DA8 26 08 00      mov b, $8
9030   3DAB B0            cmp a, b
9031   3DAC FD 73         slt ; < (signed)
9032   3DAE E4            pop a
9033   3DAF             ; END RELATIONAL
9034   3DAF C0 00 00      cmp b, 0
9035   3DB2 C6 99 3F      je _for137_exit
9036   3DB5             _for137_block:
9037   3DB5             ; for (j = 0; j < 8; j++) 
9038   3DB5             _for138_init:
9039   3DB5 FA FD FF      lea d, [bp + -3] ; $j
9040   3DB8 DA            push d
9041   3DB9 26 00 00      mov b, $0
9042   3DBC E7            pop d
9043   3DBD FD 43         mov [d], b
9044   3DBF             _for138_cond:
9045   3DBF FA FD FF      lea d, [bp + -3] ; $j
9046   3DC2 2A            mov b, [d]
9047   3DC3             ; START RELATIONAL
9048   3DC3 D7            push a
9049   3DC4 11            mov a, b
9050   3DC5 26 08 00      mov b, $8
9051   3DC8 B0            cmp a, b
9052   3DC9 FD 73         slt ; < (signed)
9053   3DCB E4            pop a
9054   3DCC             ; END RELATIONAL
9055   3DCC C0 00 00      cmp b, 0
9056   3DCF C6 10 3E      je _for138_exit
9057   3DD2             _for138_block:
9058   3DD2             ; puts(tilestr[quad[i][j]]); 
9059   3DD2 3B C7 69      mov d, _tilestr_data ; $tilestr
9060   3DD5 D7            push a
9061   3DD6 DA            push d
9062   3DD7 3B A4 68      mov d, _quad_data ; $quad
9063   3DDA D7            push a
9064   3DDB DA            push d
9065   3DDC FA FF FF      lea d, [bp + -1] ; $i
9066   3DDF 2A            mov b, [d]
9067   3DE0 E7            pop d
9068   3DE1 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
9069   3DE5 DA            push d
9070   3DE6 FA FD FF      lea d, [bp + -3] ; $j
9071   3DE9 2A            mov b, [d]
9072   3DEA E7            pop d
9073   3DEB 5A            add d, b
9074   3DEC E4            pop a
9075   3DED 32            mov bl, [d]
9076   3DEE A7 00         mov bh, 0
9077   3DF0 E7            pop d
9078   3DF1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9079   3DF5 E4            pop a
9080   3DF6 2A            mov b, [d]
9081   3DF7 FD AB         swp b
9082   3DF9 D8            push b
9083   3DFA 07 B8 1A      call puts
9084   3DFD 51 02 00      add sp, 2
9085   3E00             _for138_update:
9086   3E00 FA FD FF      lea d, [bp + -3] ; $j
9087   3E03 2A            mov b, [d]
9088   3E04 FD 77         inc b
9089   3E06 FA FD FF      lea d, [bp + -3] ; $j
9090   3E09 FD 43         mov [d], b
9091   3E0B FD 7D         dec b
9092   3E0D 0A BF 3D      jmp _for138_cond
9093   3E10             _for138_exit:
9094   3E10             ; if (i == 0) 
9095   3E10             _if139_cond:
9096   3E10 FA FF FF      lea d, [bp + -1] ; $i
9097   3E13 2A            mov b, [d]
9098   3E14             ; START RELATIONAL
9099   3E14 D7            push a
9100   3E15 11            mov a, b
9101   3E16 26 00 00      mov b, $0
9102   3E19 B0            cmp a, b
9103   3E1A FD 71         seq ; ==
9104   3E1C E4            pop a
9105   3E1D             ; END RELATIONAL
9106   3E1D C0 00 00      cmp b, 0
9107   3E20 C6 42 3E      je _if139_exit
9108   3E23             _if139_true:
9109   3E23             ; printf("    Stardate            %d\n", FROM_FIXED(stardate)); 
9110   3E23 3B A2 68      mov d, _stardate ; $stardate
9111   3E26 2A            mov b, [d]
9112   3E27 FD AB         swp b
9113   3E29 D8            push b
9114   3E2A 07 B4 22      call FROM_FIXED
9115   3E2D 51 02 00      add sp, 2
9116   3E30 FD AB         swp b
9117   3E32 D8            push b
9118   3E33 26 53 72      mov b, _s91 ; "    Stardate            %d\n"
9119   3E36 FD AB         swp b
9120   3E38 D8            push b
9121   3E39 07 BA 07      call printf
9122   3E3C 51 04 00      add sp, 4
9123   3E3F 0A 42 3E      jmp _if139_exit
9124   3E42             _if139_exit:
9125   3E42             ; if (i == 1) 
9126   3E42             _if140_cond:
9127   3E42 FA FF FF      lea d, [bp + -1] ; $i
9128   3E45 2A            mov b, [d]
9129   3E46             ; START RELATIONAL
9130   3E46 D7            push a
9131   3E47 11            mov a, b
9132   3E48 26 01 00      mov b, $1
9133   3E4B B0            cmp a, b
9134   3E4C FD 71         seq ; ==
9135   3E4E E4            pop a
9136   3E4F             ; END RELATIONAL
9137   3E4F C0 00 00      cmp b, 0
9138   3E52 C6 6B 3E      je _if140_exit
9139   3E55             _if140_true:
9140   3E55             ; printf("    Condition           %s\n", sC); 
9141   3E55 FA FB FF      lea d, [bp + -5] ; $sC
9142   3E58 2A            mov b, [d]
9143   3E59 FD AB         swp b
9144   3E5B D8            push b
9145   3E5C 26 6F 72      mov b, _s92 ; "    Condition           %s\n"
9146   3E5F FD AB         swp b
9147   3E61 D8            push b
9148   3E62 07 BA 07      call printf
9149   3E65 51 04 00      add sp, 4
9150   3E68 0A 6B 3E      jmp _if140_exit
9151   3E6B             _if140_exit:
9152   3E6B             ; if (i == 2) 
9153   3E6B             _if141_cond:
9154   3E6B FA FF FF      lea d, [bp + -1] ; $i
9155   3E6E 2A            mov b, [d]
9156   3E6F             ; START RELATIONAL
9157   3E6F D7            push a
9158   3E70 11            mov a, b
9159   3E71 26 02 00      mov b, $2
9160   3E74 B0            cmp a, b
9161   3E75 FD 71         seq ; ==
9162   3E77 E4            pop a
9163   3E78             ; END RELATIONAL
9164   3E78 C0 00 00      cmp b, 0
9165   3E7B C6 9B 3E      je _if141_exit
9166   3E7E             _if141_true:
9167   3E7E             ; printf("    Quadrant            %d, %d\n", quad_y, quad_x); 
9168   3E7E 3B 81 68      mov d, _quad_x ; $quad_x
9169   3E81 2A            mov b, [d]
9170   3E82 FD AB         swp b
9171   3E84 D8            push b
9172   3E85 3B 7F 68      mov d, _quad_y ; $quad_y
9173   3E88 2A            mov b, [d]
9174   3E89 FD AB         swp b
9175   3E8B D8            push b
9176   3E8C 26 8B 72      mov b, _s93 ; "    Quadrant            %d, %d\n"
9177   3E8F FD AB         swp b
9178   3E91 D8            push b
9179   3E92 07 BA 07      call printf
9180   3E95 51 06 00      add sp, 6
9181   3E98 0A 9B 3E      jmp _if141_exit
9182   3E9B             _if141_exit:
9183   3E9B             ; if (i == 3) 
9184   3E9B             _if142_cond:
9185   3E9B FA FF FF      lea d, [bp + -1] ; $i
9186   3E9E 2A            mov b, [d]
9187   3E9F             ; START RELATIONAL
9188   3E9F D7            push a
9189   3EA0 11            mov a, b
9190   3EA1 26 03 00      mov b, $3
9191   3EA4 B0            cmp a, b
9192   3EA5 FD 71         seq ; ==
9193   3EA7 E4            pop a
9194   3EA8             ; END RELATIONAL
9195   3EA8 C0 00 00      cmp b, 0
9196   3EAB C6 DD 3E      je _if142_exit
9197   3EAE             _if142_true:
9198   3EAE             ; printf("    Sector              %d, %d\n", FROM_FIXED00(ship_y), FROM_FIXED00(ship_x)); 
9199   3EAE 3B A0 68      mov d, _ship_x ; $ship_x
9200   3EB1 2A            mov b, [d]
9201   3EB2 FD AB         swp b
9202   3EB4 D8            push b
9203   3EB5 07 D7 22      call FROM_FIXED00
9204   3EB8 51 02 00      add sp, 2
9205   3EBB FD AB         swp b
9206   3EBD D8            push b
9207   3EBE 3B 9E 68      mov d, _ship_y ; $ship_y
9208   3EC1 2A            mov b, [d]
9209   3EC2 FD AB         swp b
9210   3EC4 D8            push b
9211   3EC5 07 D7 22      call FROM_FIXED00
9212   3EC8 51 02 00      add sp, 2
9213   3ECB FD AB         swp b
9214   3ECD D8            push b
9215   3ECE 26 AB 72      mov b, _s94 ; "    Sector              %d, %d\n"
9216   3ED1 FD AB         swp b
9217   3ED3 D8            push b
9218   3ED4 07 BA 07      call printf
9219   3ED7 51 06 00      add sp, 6
9220   3EDA 0A DD 3E      jmp _if142_exit
9221   3EDD             _if142_exit:
9222   3EDD             ; if (i == 4) 
9223   3EDD             _if143_cond:
9224   3EDD FA FF FF      lea d, [bp + -1] ; $i
9225   3EE0 2A            mov b, [d]
9226   3EE1             ; START RELATIONAL
9227   3EE1 D7            push a
9228   3EE2 11            mov a, b
9229   3EE3 26 04 00      mov b, $4
9230   3EE6 B0            cmp a, b
9231   3EE7 FD 71         seq ; ==
9232   3EE9 E4            pop a
9233   3EEA             ; END RELATIONAL
9234   3EEA C0 00 00      cmp b, 0
9235   3EED C6 06 3F      je _if143_exit
9236   3EF0             _if143_true:
9237   3EF0             ; printf("    Photon Torpedoes    %d\n", torps); 
9238   3EF0 3B 7D 68      mov d, _torps ; $torps
9239   3EF3 32            mov bl, [d]
9240   3EF4 A7 00         mov bh, 0
9241   3EF6 DD            push bl
9242   3EF7 26 CB 72      mov b, _s95 ; "    Photon Torpedoes    %d\n"
9243   3EFA FD AB         swp b
9244   3EFC D8            push b
9245   3EFD 07 BA 07      call printf
9246   3F00 51 03 00      add sp, 3
9247   3F03 0A 06 3F      jmp _if143_exit
9248   3F06             _if143_exit:
9249   3F06             ; if (i == 5) 
9250   3F06             _if144_cond:
9251   3F06 FA FF FF      lea d, [bp + -1] ; $i
9252   3F09 2A            mov b, [d]
9253   3F0A             ; START RELATIONAL
9254   3F0A D7            push a
9255   3F0B 11            mov a, b
9256   3F0C 26 05 00      mov b, $5
9257   3F0F B0            cmp a, b
9258   3F10 FD 71         seq ; ==
9259   3F12 E4            pop a
9260   3F13             ; END RELATIONAL
9261   3F13 C0 00 00      cmp b, 0
9262   3F16 C6 37 3F      je _if144_exit
9263   3F19             _if144_true:
9264   3F19             ; printf("    Total Energy        %d\n", energy + shield); 
9265   3F19 3B C8 67      mov d, _energy ; $energy
9266   3F1C 2A            mov b, [d]
9267   3F1D             ; START TERMS
9268   3F1D D7            push a
9269   3F1E 11            mov a, b
9270   3F1F 3B 83 68      mov d, _shield ; $shield
9271   3F22 2A            mov b, [d]
9272   3F23 56            add b, a
9273   3F24 E4            pop a
9274   3F25             ; END TERMS
9275   3F25 FD AB         swp b
9276   3F27 D8            push b
9277   3F28 26 E7 72      mov b, _s96 ; "    Total Energy        %d\n"
9278   3F2B FD AB         swp b
9279   3F2D D8            push b
9280   3F2E 07 BA 07      call printf
9281   3F31 51 04 00      add sp, 4
9282   3F34 0A 37 3F      jmp _if144_exit
9283   3F37             _if144_exit:
9284   3F37             ; if (i == 6) 
9285   3F37             _if145_cond:
9286   3F37 FA FF FF      lea d, [bp + -1] ; $i
9287   3F3A 2A            mov b, [d]
9288   3F3B             ; START RELATIONAL
9289   3F3B D7            push a
9290   3F3C 11            mov a, b
9291   3F3D 26 06 00      mov b, $6
9292   3F40 B0            cmp a, b
9293   3F41 FD 71         seq ; ==
9294   3F43 E4            pop a
9295   3F44             ; END RELATIONAL
9296   3F44 C0 00 00      cmp b, 0
9297   3F47 C6 60 3F      je _if145_exit
9298   3F4A             _if145_true:
9299   3F4A             ; printf("    Shields             %d\n", shield); 
9300   3F4A 3B 83 68      mov d, _shield ; $shield
9301   3F4D 2A            mov b, [d]
9302   3F4E FD AB         swp b
9303   3F50 D8            push b
9304   3F51 26 03 73      mov b, _s97 ; "    Shields             %d\n"
9305   3F54 FD AB         swp b
9306   3F56 D8            push b
9307   3F57 07 BA 07      call printf
9308   3F5A 51 04 00      add sp, 4
9309   3F5D 0A 60 3F      jmp _if145_exit
9310   3F60             _if145_exit:
9311   3F60             ; if (i == 7) 
9312   3F60             _if146_cond:
9313   3F60 FA FF FF      lea d, [bp + -1] ; $i
9314   3F63 2A            mov b, [d]
9315   3F64             ; START RELATIONAL
9316   3F64 D7            push a
9317   3F65 11            mov a, b
9318   3F66 26 07 00      mov b, $7
9319   3F69 B0            cmp a, b
9320   3F6A FD 71         seq ; ==
9321   3F6C E4            pop a
9322   3F6D             ; END RELATIONAL
9323   3F6D C0 00 00      cmp b, 0
9324   3F70 C6 89 3F      je _if146_exit
9325   3F73             _if146_true:
9326   3F73             ; printf("    Klingons Remaining  %d\n", klingons_left); 
9327   3F73 3B 7C 68      mov d, _klingons_left ; $klingons_left
9328   3F76 32            mov bl, [d]
9329   3F77 A7 00         mov bh, 0
9330   3F79 DD            push bl
9331   3F7A 26 1F 73      mov b, _s98 ; "    Klingons Remaining  %d\n"
9332   3F7D FD AB         swp b
9333   3F7F D8            push b
9334   3F80 07 BA 07      call printf
9335   3F83 51 03 00      add sp, 3
9336   3F86 0A 89 3F      jmp _if146_exit
9337   3F89             _if146_exit:
9338   3F89             _for137_update:
9339   3F89 FA FF FF      lea d, [bp + -1] ; $i
9340   3F8C 2A            mov b, [d]
9341   3F8D FD 77         inc b
9342   3F8F FA FF FF      lea d, [bp + -1] ; $i
9343   3F92 FD 43         mov [d], b
9344   3F94 FD 7D         dec b
9345   3F96 0A A2 3D      jmp _for137_cond
9346   3F99             _for137_exit:
9347   3F99             ; puts(srs_1); 
9348   3F99 3B C5 69      mov d, _srs_1 ; $srs_1
9349   3F9C 2A            mov b, [d]
9350   3F9D FD AB         swp b
9351   3F9F D8            push b
9352   3FA0 07 B8 1A      call puts
9353   3FA3 51 02 00      add sp, 2
9354   3FA6             ; putchar('\n'); 
9355   3FA6 26 0A 00      mov b, $a
9356   3FA9 DD            push bl
9357   3FAA 07 82 1A      call putchar
9358   3FAD 51 01 00      add sp, 1
9359   3FB0             ; return; 
9360   3FB0 F9            leave
9361   3FB1 09            ret
9362   3FB2             
9363   3FB2             put1bcd:
9364   3FB2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9365   3FB5             ; v = v & 0x0F; 
9366   3FB5 FA 05 00      lea d, [bp + 5] ; $v
9367   3FB8 DA            push d
9368   3FB9 FA 05 00      lea d, [bp + 5] ; $v
9369   3FBC 32            mov bl, [d]
9370   3FBD A7 00         mov bh, 0
9371   3FBF D7            push a
9372   3FC0 11            mov a, b
9373   3FC1 26 0F 00      mov b, $f
9374   3FC4 FD 92         and b, a ; &
9375   3FC6 E4            pop a
9376   3FC7 E7            pop d
9377   3FC8 FD 3E         mov [d], bl
9378   3FCA             ; putchar('0' + v); 
9379   3FCA 26 30 00      mov b, $30
9380   3FCD             ; START TERMS
9381   3FCD D7            push a
9382   3FCE 11            mov a, b
9383   3FCF FA 05 00      lea d, [bp + 5] ; $v
9384   3FD2 32            mov bl, [d]
9385   3FD3 A7 00         mov bh, 0
9386   3FD5 56            add b, a
9387   3FD6 E4            pop a
9388   3FD7             ; END TERMS
9389   3FD7 DD            push bl
9390   3FD8 07 82 1A      call putchar
9391   3FDB 51 01 00      add sp, 1
9392   3FDE F9            leave
9393   3FDF 09            ret
9394   3FE0             
9395   3FE0             putbcd:
9396   3FE0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9397   3FE3             ; put1bcd(x >> 8); 
9398   3FE3 FA 05 00      lea d, [bp + 5] ; $x
9399   3FE6 2A            mov b, [d]
9400   3FE7             ; START SHIFT
9401   3FE7 D7            push a
9402   3FE8 11            mov a, b
9403   3FE9 26 08 00      mov b, $8
9404   3FEC FD 39         mov c, b
9405   3FEE A1            shr a, cl
9406   3FEF 27            mov b, a
9407   3FF0 E4            pop a
9408   3FF1             ; END SHIFT
9409   3FF1 DD            push bl
9410   3FF2 07 B2 3F      call put1bcd
9411   3FF5 51 01 00      add sp, 1
9412   3FF8             ; put1bcd(x >> 4); 
9413   3FF8 FA 05 00      lea d, [bp + 5] ; $x
9414   3FFB 2A            mov b, [d]
9415   3FFC             ; START SHIFT
9416   3FFC D7            push a
9417   3FFD 11            mov a, b
9418   3FFE 26 04 00      mov b, $4
9419   4001 FD 39         mov c, b
9420   4003 A1            shr a, cl
9421   4004 27            mov b, a
9422   4005 E4            pop a
9423   4006             ; END SHIFT
9424   4006 DD            push bl
9425   4007 07 B2 3F      call put1bcd
9426   400A 51 01 00      add sp, 1
9427   400D             ; put1bcd(x); 
9428   400D FA 05 00      lea d, [bp + 5] ; $x
9429   4010 2A            mov b, [d]
9430   4011 DD            push bl
9431   4012 07 B2 3F      call put1bcd
9432   4015 51 01 00      add sp, 1
9433   4018 F9            leave
9434   4019 09            ret
9435   401A             
9436   401A             long_range_scan:
9437   401A F8 00 00      enter 0 ; (push bp; mov bp, sp)
9438   401D             ; int i, j; 
9439   401D 52 02 00      sub sp, 2
9440   4020 52 02 00      sub sp, 2
9441   4023             ; if (inoperable(3)) 
9442   4023             _if147_cond:
9443   4023 26 03 00      mov b, $3
9444   4026 DD            push bl
9445   4027 07 6C 26      call inoperable
9446   402A 51 01 00      add sp, 1
9447   402D C0 00 00      cmp b, 0
9448   4030 C6 38 40      je _if147_exit
9449   4033             _if147_true:
9450   4033             ; return; 
9451   4033 F9            leave
9452   4034 09            ret
9453   4035 0A 38 40      jmp _if147_exit
9454   4038             _if147_exit:
9455   4038             ; printf("Long Range Scan for Quadrant %d, %d\n\n", quad_y, quad_x); 
9456   4038 3B 81 68      mov d, _quad_x ; $quad_x
9457   403B 2A            mov b, [d]
9458   403C FD AB         swp b
9459   403E D8            push b
9460   403F 3B 7F 68      mov d, _quad_y ; $quad_y
9461   4042 2A            mov b, [d]
9462   4043 FD AB         swp b
9463   4045 D8            push b
9464   4046 26 3B 73      mov b, _s99 ; "Long Range Scan for Quadrant %d, %d\n\n"
9465   4049 FD AB         swp b
9466   404B D8            push b
9467   404C 07 BA 07      call printf
9468   404F 51 06 00      add sp, 6
9469   4052             ; for (i = quad_y - 1; i <= quad_y + 1; i++) { 
9470   4052             _for148_init:
9471   4052 FA FF FF      lea d, [bp + -1] ; $i
9472   4055 DA            push d
9473   4056 3B 7F 68      mov d, _quad_y ; $quad_y
9474   4059 2A            mov b, [d]
9475   405A             ; START TERMS
9476   405A D7            push a
9477   405B 11            mov a, b
9478   405C 26 01 00      mov b, $1
9479   405F 60            sub a, b
9480   4060 27            mov b, a
9481   4061 E4            pop a
9482   4062             ; END TERMS
9483   4062 E7            pop d
9484   4063 FD 43         mov [d], b
9485   4065             _for148_cond:
9486   4065 FA FF FF      lea d, [bp + -1] ; $i
9487   4068 2A            mov b, [d]
9488   4069             ; START RELATIONAL
9489   4069 D7            push a
9490   406A 11            mov a, b
9491   406B 3B 7F 68      mov d, _quad_y ; $quad_y
9492   406E 2A            mov b, [d]
9493   406F             ; START TERMS
9494   406F D7            push a
9495   4070 11            mov a, b
9496   4071 26 01 00      mov b, $1
9497   4074 56            add b, a
9498   4075 E4            pop a
9499   4076             ; END TERMS
9500   4076 B0            cmp a, b
9501   4077 FD 74         sle ; <= (signed)
9502   4079 E4            pop a
9503   407A             ; END RELATIONAL
9504   407A C0 00 00      cmp b, 0
9505   407D C6 B7 41      je _for148_exit
9506   4080             _for148_block:
9507   4080             ; printf("%s:", lrs_1); 
9508   4080 3B F2 69      mov d, _lrs_1 ; $lrs_1
9509   4083 2A            mov b, [d]
9510   4084 FD AB         swp b
9511   4086 D8            push b
9512   4087 26 61 73      mov b, _s100 ; "%s:"
9513   408A FD AB         swp b
9514   408C D8            push b
9515   408D 07 BA 07      call printf
9516   4090 51 04 00      add sp, 4
9517   4093             ; for (j = quad_x - 1; j <= quad_x + 1; j++) { 
9518   4093             _for149_init:
9519   4093 FA FD FF      lea d, [bp + -3] ; $j
9520   4096 DA            push d
9521   4097 3B 81 68      mov d, _quad_x ; $quad_x
9522   409A 2A            mov b, [d]
9523   409B             ; START TERMS
9524   409B D7            push a
9525   409C 11            mov a, b
9526   409D 26 01 00      mov b, $1
9527   40A0 60            sub a, b
9528   40A1 27            mov b, a
9529   40A2 E4            pop a
9530   40A3             ; END TERMS
9531   40A3 E7            pop d
9532   40A4 FD 43         mov [d], b
9533   40A6             _for149_cond:
9534   40A6 FA FD FF      lea d, [bp + -3] ; $j
9535   40A9 2A            mov b, [d]
9536   40AA             ; START RELATIONAL
9537   40AA D7            push a
9538   40AB 11            mov a, b
9539   40AC 3B 81 68      mov d, _quad_x ; $quad_x
9540   40AF 2A            mov b, [d]
9541   40B0             ; START TERMS
9542   40B0 D7            push a
9543   40B1 11            mov a, b
9544   40B2 26 01 00      mov b, $1
9545   40B5 56            add b, a
9546   40B6 E4            pop a
9547   40B7             ; END TERMS
9548   40B7 B0            cmp a, b
9549   40B8 FD 74         sle ; <= (signed)
9550   40BA E4            pop a
9551   40BB             ; END RELATIONAL
9552   40BB C0 00 00      cmp b, 0
9553   40BE C6 9D 41      je _for149_exit
9554   40C1             _for149_block:
9555   40C1             ; putchar(' '); 
9556   40C1 26 20 00      mov b, $20
9557   40C4 DD            push bl
9558   40C5 07 82 1A      call putchar
9559   40C8 51 01 00      add sp, 1
9560   40CB             ; if (i > 0 && i <= 8 && j > 0 && j <= 8) { 
9561   40CB             _if150_cond:
9562   40CB FA FF FF      lea d, [bp + -1] ; $i
9563   40CE 2A            mov b, [d]
9564   40CF             ; START RELATIONAL
9565   40CF D7            push a
9566   40D0 11            mov a, b
9567   40D1 26 00 00      mov b, $0
9568   40D4 B0            cmp a, b
9569   40D5 FD 7F         sgt ; >
9570   40D7 E4            pop a
9571   40D8             ; END RELATIONAL
9572   40D8             ; START LOGICAL AND
9573   40D8 D7            push a
9574   40D9 11            mov a, b
9575   40DA FA FF FF      lea d, [bp + -1] ; $i
9576   40DD 2A            mov b, [d]
9577   40DE             ; START RELATIONAL
9578   40DE D7            push a
9579   40DF 11            mov a, b
9580   40E0 26 08 00      mov b, $8
9581   40E3 B0            cmp a, b
9582   40E4 FD 74         sle ; <= (signed)
9583   40E6 E4            pop a
9584   40E7             ; END RELATIONAL
9585   40E7 FD A7         sand a, b
9586   40E9 11            mov a, b
9587   40EA FA FD FF      lea d, [bp + -3] ; $j
9588   40ED 2A            mov b, [d]
9589   40EE             ; START RELATIONAL
9590   40EE D7            push a
9591   40EF 11            mov a, b
9592   40F0 26 00 00      mov b, $0
9593   40F3 B0            cmp a, b
9594   40F4 FD 7F         sgt ; >
9595   40F6 E4            pop a
9596   40F7             ; END RELATIONAL
9597   40F7 FD A7         sand a, b
9598   40F9 11            mov a, b
9599   40FA FA FD FF      lea d, [bp + -3] ; $j
9600   40FD 2A            mov b, [d]
9601   40FE             ; START RELATIONAL
9602   40FE D7            push a
9603   40FF 11            mov a, b
9604   4100 26 08 00      mov b, $8
9605   4103 B0            cmp a, b
9606   4104 FD 74         sle ; <= (signed)
9607   4106 E4            pop a
9608   4107             ; END RELATIONAL
9609   4107 FD A7         sand a, b
9610   4109 E4            pop a
9611   410A             ; END LOGICAL AND
9612   410A C0 00 00      cmp b, 0
9613   410D C6 75 41      je _if150_else
9614   4110             _if150_true:
9615   4110             ; map[i][j] = map[i][j] |   0x1000		/* Set if this sector was mapped */          ; 
9616   4110 3B CC 67      mov d, _map_data ; $map
9617   4113 D7            push a
9618   4114 DA            push d
9619   4115 FA FF FF      lea d, [bp + -1] ; $i
9620   4118 2A            mov b, [d]
9621   4119 E7            pop d
9622   411A FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
9623   411E DA            push d
9624   411F FA FD FF      lea d, [bp + -3] ; $j
9625   4122 2A            mov b, [d]
9626   4123 E7            pop d
9627   4124 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9628   4128 E4            pop a
9629   4129 DA            push d
9630   412A 3B CC 67      mov d, _map_data ; $map
9631   412D D7            push a
9632   412E DA            push d
9633   412F FA FF FF      lea d, [bp + -1] ; $i
9634   4132 2A            mov b, [d]
9635   4133 E7            pop d
9636   4134 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
9637   4138 DA            push d
9638   4139 FA FD FF      lea d, [bp + -3] ; $j
9639   413C 2A            mov b, [d]
9640   413D E7            pop d
9641   413E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9642   4142 E4            pop a
9643   4143 2A            mov b, [d]
9644   4144 D7            push a
9645   4145 11            mov a, b
9646   4146 26 00 10      mov b, $1000
9647   4149 FD 70         or b, a ; |
9648   414B E4            pop a
9649   414C E7            pop d
9650   414D FD 43         mov [d], b
9651   414F             ; putbcd(map[i][j]); 
9652   414F 3B CC 67      mov d, _map_data ; $map
9653   4152 D7            push a
9654   4153 DA            push d
9655   4154 FA FF FF      lea d, [bp + -1] ; $i
9656   4157 2A            mov b, [d]
9657   4158 E7            pop d
9658   4159 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
9659   415D DA            push d
9660   415E FA FD FF      lea d, [bp + -3] ; $j
9661   4161 2A            mov b, [d]
9662   4162 E7            pop d
9663   4163 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9664   4167 E4            pop a
9665   4168 2A            mov b, [d]
9666   4169 FD AB         swp b
9667   416B D8            push b
9668   416C 07 E0 3F      call putbcd
9669   416F 51 02 00      add sp, 2
9670   4172 0A 81 41      jmp _if150_exit
9671   4175             _if150_else:
9672   4175             ; puts("***"); 
9673   4175 26 65 73      mov b, _s101 ; "***"
9674   4178 FD AB         swp b
9675   417A D8            push b
9676   417B 07 B8 1A      call puts
9677   417E 51 02 00      add sp, 2
9678   4181             _if150_exit:
9679   4181             ; puts(" :"); 
9680   4181 26 69 73      mov b, _s102 ; " :"
9681   4184 FD AB         swp b
9682   4186 D8            push b
9683   4187 07 B8 1A      call puts
9684   418A 51 02 00      add sp, 2
9685   418D             _for149_update:
9686   418D FA FD FF      lea d, [bp + -3] ; $j
9687   4190 2A            mov b, [d]
9688   4191 FD 77         inc b
9689   4193 FA FD FF      lea d, [bp + -3] ; $j
9690   4196 FD 43         mov [d], b
9691   4198 FD 7D         dec b
9692   419A 0A A6 40      jmp _for149_cond
9693   419D             _for149_exit:
9694   419D             ; putchar('\n'); 
9695   419D 26 0A 00      mov b, $a
9696   41A0 DD            push bl
9697   41A1 07 82 1A      call putchar
9698   41A4 51 01 00      add sp, 1
9699   41A7             _for148_update:
9700   41A7 FA FF FF      lea d, [bp + -1] ; $i
9701   41AA 2A            mov b, [d]
9702   41AB FD 77         inc b
9703   41AD FA FF FF      lea d, [bp + -1] ; $i
9704   41B0 FD 43         mov [d], b
9705   41B2 FD 7D         dec b
9706   41B4 0A 65 40      jmp _for148_cond
9707   41B7             _for148_exit:
9708   41B7             ; printf("%s\n", lrs_1); 
9709   41B7 3B F2 69      mov d, _lrs_1 ; $lrs_1
9710   41BA 2A            mov b, [d]
9711   41BB FD AB         swp b
9712   41BD D8            push b
9713   41BE 26 6C 73      mov b, _s103 ; "%s\n"
9714   41C1 FD AB         swp b
9715   41C3 D8            push b
9716   41C4 07 BA 07      call printf
9717   41C7 51 04 00      add sp, 4
9718   41CA F9            leave
9719   41CB 09            ret
9720   41CC             
9721   41CC             no_klingon:
9722   41CC F8 00 00      enter 0 ; (push bp; mov bp, sp)
9723   41CF             ; if (klingons <= 0) { 
9724   41CF             _if151_cond:
9725   41CF 3B 7A 68      mov d, _klingons ; $klingons
9726   41D2 32            mov bl, [d]
9727   41D3 A7 00         mov bh, 0
9728   41D5             ; START RELATIONAL
9729   41D5 D7            push a
9730   41D6 11            mov a, b
9731   41D7 26 00 00      mov b, $0
9732   41DA B0            cmp a, b
9733   41DB FD 76         sleu ; <= (unsigned)
9734   41DD E4            pop a
9735   41DE             ; END RELATIONAL
9736   41DE C0 00 00      cmp b, 0
9737   41E1 C6 F8 41      je _if151_exit
9738   41E4             _if151_true:
9739   41E4             ; puts("Science Officer Spock reports:\n  'Sensors show no enemy ships in this quadrant'\n"); 
9740   41E4 26 70 73      mov b, _s104 ; "Science Officer Spock reports:\n  'Sensors show no enemy ships in this quadrant'\n"
9741   41E7 FD AB         swp b
9742   41E9 D8            push b
9743   41EA 07 B8 1A      call puts
9744   41ED 51 02 00      add sp, 2
9745   41F0             ; return 1; 
9746   41F0 26 01 00      mov b, $1
9747   41F3 F9            leave
9748   41F4 09            ret
9749   41F5 0A F8 41      jmp _if151_exit
9750   41F8             _if151_exit:
9751   41F8             ; return 0; 
9752   41F8 26 00 00      mov b, $0
9753   41FB F9            leave
9754   41FC 09            ret
9755   41FD             
9756   41FD             wipe_klingon:
9757   41FD F8 00 00      enter 0 ; (push bp; mov bp, sp)
9758   4200             ; quad[k->y+-1][k->x+-1] =  		0      ; 
9759   4200 3B A4 68      mov d, _quad_data ; $quad
9760   4203 D7            push a
9761   4204 DA            push d
9762   4205 FA 05 00      lea d, [bp + 5] ; $k
9763   4208 FD 2A         mov d, [d]
9764   420A 58 00 00      add d, 0
9765   420D 32            mov bl, [d]
9766   420E A7 00         mov bh, 0
9767   4210             ; START TERMS
9768   4210 D7            push a
9769   4211 11            mov a, b
9770   4212 26 FF FF      mov b, $ffff
9771   4215 56            add b, a
9772   4216 E4            pop a
9773   4217             ; END TERMS
9774   4217 E7            pop d
9775   4218 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
9776   421C DA            push d
9777   421D FA 05 00      lea d, [bp + 5] ; $k
9778   4220 FD 2A         mov d, [d]
9779   4222 58 01 00      add d, 1
9780   4225 32            mov bl, [d]
9781   4226 A7 00         mov bh, 0
9782   4228             ; START TERMS
9783   4228 D7            push a
9784   4229 11            mov a, b
9785   422A 26 FF FF      mov b, $ffff
9786   422D 56            add b, a
9787   422E E4            pop a
9788   422F             ; END TERMS
9789   422F E7            pop d
9790   4230 5A            add d, b
9791   4231 E4            pop a
9792   4232 DA            push d
9793   4233 26 00 00      mov b, $0
9794   4236 E7            pop d
9795   4237 FD 3E         mov [d], bl
9796   4239 F9            leave
9797   423A 09            ret
9798   423B             
9799   423B             phaser_control:
9800   423B F8 00 00      enter 0 ; (push bp; mov bp, sp)
9801   423E             ; int i; 
9802   423E 52 02 00      sub sp, 2
9803   4241             ; long int       phaser_energy; 
9804   4241 52 04 00      sub sp, 4
9805   4244             ; long unsigned int        h1; 
9806   4244 52 04 00      sub sp, 4
9807   4247             ; int h; 
9808   4247 52 02 00      sub sp, 2
9809   424A             ; struct klingon *k; 
9810   424A 52 02 00      sub sp, 2
9811   424D             ; k = &kdata; 
9812   424D FA F3 FF      lea d, [bp + -13] ; $k
9813   4250 DA            push d
9814   4251 3B 6E 68      mov d, _kdata_data ; $kdata
9815   4254 2D            mov b, d
9816   4255 E7            pop d
9817   4256 FD 43         mov [d], b
9818   4258             ; if (inoperable(4)) 
9819   4258             _if152_cond:
9820   4258 26 04 00      mov b, $4
9821   425B DD            push bl
9822   425C 07 6C 26      call inoperable
9823   425F 51 01 00      add sp, 1
9824   4262 C0 00 00      cmp b, 0
9825   4265 C6 6D 42      je _if152_exit
9826   4268             _if152_true:
9827   4268             ; return; 
9828   4268 F9            leave
9829   4269 09            ret
9830   426A 0A 6D 42      jmp _if152_exit
9831   426D             _if152_exit:
9832   426D             ; if (no_klingon()) 
9833   426D             _if153_cond:
9834   426D 07 CC 41      call no_klingon
9835   4270 C0 00 00      cmp b, 0
9836   4273 C6 7B 42      je _if153_exit
9837   4276             _if153_true:
9838   4276             ; return; 
9839   4276 F9            leave
9840   4277 09            ret
9841   4278 0A 7B 42      jmp _if153_exit
9842   427B             _if153_exit:
9843   427B             ; if (damage[8] < 0) 
9844   427B             _if154_cond:
9845   427B 3B 8A 68      mov d, _damage_data ; $damage
9846   427E D7            push a
9847   427F DA            push d
9848   4280 26 08 00      mov b, $8
9849   4283 E7            pop d
9850   4284 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9851   4288 E4            pop a
9852   4289 2A            mov b, [d]
9853   428A             ; START RELATIONAL
9854   428A D7            push a
9855   428B 11            mov a, b
9856   428C 26 00 00      mov b, $0
9857   428F B0            cmp a, b
9858   4290 FD 73         slt ; < (signed)
9859   4292 E4            pop a
9860   4293             ; END RELATIONAL
9861   4293 C0 00 00      cmp b, 0
9862   4296 C6 A8 42      je _if154_exit
9863   4299             _if154_true:
9864   4299             ; puts("Computer failure hampers accuracy."); 
9865   4299 26 C1 73      mov b, _s105 ; "Computer failure hampers accuracy."
9866   429C FD AB         swp b
9867   429E D8            push b
9868   429F 07 B8 1A      call puts
9869   42A2 51 02 00      add sp, 2
9870   42A5 0A A8 42      jmp _if154_exit
9871   42A8             _if154_exit:
9872   42A8             ; printf("Phasers locked on target;\n Energy available = %d units\n\n Number of units to fire: ", energy); 
9873   42A8 3B C8 67      mov d, _energy ; $energy
9874   42AB 2A            mov b, [d]
9875   42AC FD AB         swp b
9876   42AE D8            push b
9877   42AF 26 E4 73      mov b, _s106 ; "Phasers locked on target;\n Energy available = %d units\n\n Number of units to fire: "
9878   42B2 FD AB         swp b
9879   42B4 D8            push b
9880   42B5 07 BA 07      call printf
9881   42B8 51 04 00      add sp, 4
9882   42BB             ; phaser_energy = input_int(); 
9883   42BB FA FB FF      lea d, [bp + -5] ; $phaser_energy
9884   42BE DA            push d
9885   42BF 07 90 25      call input_int
9886   42C2 E7            pop d
9887   42C3 FD 43         mov [d], b
9888   42C5 28            mov b, c
9889   42C6 FD 44 02 00   mov [d + 2], b
9890   42CA             ; if (phaser_energy <= 0) 
9891   42CA             _if155_cond:
9892   42CA FA FB FF      lea d, [bp + -5] ; $phaser_energy
9893   42CD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9894   42D0 FD 39         mov c, b ; And place it into C
9895   42D2 2A            mov b, [d] ; Lower Word in B
9896   42D3             ; START RELATIONAL
9897   42D3 D7            push a
9898   42D4 FD D8         push g
9899   42D6 11            mov a, b
9900   42D7 FD 7A         mov g, c
9901   42D9 26 00 00      mov b, $0
9902   42DC 38 00 00      mov c, 0
9903   42DF FD 74         sle
9904   42E1 FD F1         pop g
9905   42E3 E4            pop a
9906   42E4             ; END RELATIONAL
9907   42E4 C0 00 00      cmp b, 0
9908   42E7 C6 EF 42      je _if155_exit
9909   42EA             _if155_true:
9910   42EA             ; return; 
9911   42EA F9            leave
9912   42EB 09            ret
9913   42EC 0A EF 42      jmp _if155_exit
9914   42EF             _if155_exit:
9915   42EF             ; if (energy - phaser_energy < 0) { 
9916   42EF             _if156_cond:
9917   42EF 3B C8 67      mov d, _energy ; $energy
9918   42F2 2A            mov b, [d]
9919   42F3             ; START TERMS
9920   42F3 D7            push a
9921   42F4 11            mov a, b
9922   42F5 FA FB FF      lea d, [bp + -5] ; $phaser_energy
9923   42F8 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9924   42FB FD 39         mov c, b ; And place it into C
9925   42FD 2A            mov b, [d] ; Lower Word in B
9926   42FE 60            sub a, b
9927   42FF 27            mov b, a
9928   4300 E4            pop a
9929   4301             ; END TERMS
9930   4301             ; START RELATIONAL
9931   4301 D7            push a
9932   4302 FD D8         push g
9933   4304 11            mov a, b
9934   4305 FD 7A         mov g, c
9935   4307 26 00 00      mov b, $0
9936   430A 38 00 00      mov c, 0
9937   430D FD AF 00 00   cmp32 ga, cb
9937   4311 00 00 00 00 
9937   4315 00 00 00 00 
9937   4319 00 00 00 00 
9937   431D 00 00 00 00 
9937   4321 00 00 00 00 
9937   4325 00 00 00 00 
9937   4329 00 00 00 00 
9937   432D 00 00 00 00 
9937   4331 00 00 00 00 
9937   4335 00 00 00 00 
9937   4339 00 00 00 00 
9937   433D 00 00 00 00 
9937   4341 00 00 00 00 
9937   4345 00 00 00 00 
9937   4349 00 00 00 00 
9937   434D 00 00 00 00 
9937   4351 00 00 00 00 
9937   4355 00 00 00 00 
9937   4359 00 00 00 00 
9937   435D 00 00 00 00 
9937   4361 00 00 00 00 
9937   4365 00 00 00 00 
9937   4369 00 00 00 00 
9937   436D 00 00 00 00 
9937   4371 00 00 00 00 
9937   4375 00 00 00 00 
9937   4379 00 00 00 00 
9937   437D 00 00 00 00 
9937   4381 00 00 00 00 
9937   4385 00 00 00 00 
9937   4389 00 00 00 00 
9937   438D 00 00 00 00 
9937   4391 00 00 00 00 
9937   4395 00 00 00 00 
9937   4399 00 00 00 00 
9937   439D 00 00 00 00 
9937   43A1 00 00 00 00 
9937   43A5 00 00 00 00 
9937   43A9 00 00 00 00 
9937   43AD 00 00 00 00 
9937   43B1 00 00 00 00 
9937   43B5 00 00 00 00 
9937   43B9 00 00 00 00 
9937   43BD 00 00 00 00 
9937   43C1 00 00 00 00 
9937   43C5 00 00 00 00 
9937   43C9 00 00 00 00 
9937   43CD 00 00 00 00 
9937   43D1 00 00 00 00 
9937   43D5 00 00 00 00 
9937   43D9 00 00 00 00 
9937   43DD 00 00 00 00 
9937   43E1 00 00 00 00 
9937   43E5 00 00 00 00 
9937   43E9 00 00 00 00 
9937   43ED 00 00 00 00 
9937   43F1 00 00 00 00 
9937   43F5 00 00 00 00 
9937   43F9 00 00 00 00 
9937   43FD 00 00 00 00 
9937   4401 00 00 00 00 
9937   4405 00 00 00 00 
9937   4409 00 00 00 00 
9937   440D 00 
9938   440E FD 73         slt ; <
9939   4410 FD F1         pop g
9940   4412 E4            pop a
9941   4413             ; END RELATIONAL
9942   4413 C0 00 00      cmp b, 0
9943   4416 C6 2A 44      je _if156_exit
9944   4419             _if156_true:
9945   4419             ; puts("Not enough energy available.\n"); 
9946   4419 26 37 74      mov b, _s107 ; "Not enough energy available.\n"
9947   441C FD AB         swp b
9948   441E D8            push b
9949   441F 07 B8 1A      call puts
9950   4422 51 02 00      add sp, 2
9951   4425             ; return; 
9952   4425 F9            leave
9953   4426 09            ret
9954   4427 0A 2A 44      jmp _if156_exit
9955   442A             _if156_exit:
9956   442A             ; energy = energy -  phaser_energy; 
9957   442A 3B C8 67      mov d, _energy ; $energy
9958   442D DA            push d
9959   442E 3B C8 67      mov d, _energy ; $energy
9960   4431 2A            mov b, [d]
9961   4432             ; START TERMS
9962   4432 D7            push a
9963   4433 11            mov a, b
9964   4434 FA FB FF      lea d, [bp + -5] ; $phaser_energy
9965   4437 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9966   443A FD 39         mov c, b ; And place it into C
9967   443C 2A            mov b, [d] ; Lower Word in B
9968   443D 60            sub a, b
9969   443E 27            mov b, a
9970   443F E4            pop a
9971   4440             ; END TERMS
9972   4440 E7            pop d
9973   4441 FD 43         mov [d], b
9974   4443             ; if (damage[8] < 0) 
9975   4443             _if157_cond:
9976   4443 3B 8A 68      mov d, _damage_data ; $damage
9977   4446 D7            push a
9978   4447 DA            push d
9979   4448 26 08 00      mov b, $8
9980   444B E7            pop d
9981   444C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9982   4450 E4            pop a
9983   4451 2A            mov b, [d]
9984   4452             ; START RELATIONAL
9985   4452 D7            push a
9986   4453 11            mov a, b
9987   4454 26 00 00      mov b, $0
9988   4457 B0            cmp a, b
9989   4458 FD 73         slt ; < (signed)
9990   445A E4            pop a
9991   445B             ; END RELATIONAL
9992   445B C0 00 00      cmp b, 0
9993   445E C6 8B 44      je _if157_else
9994   4461             _if157_true:
9995   4461             ; phaser_energy =phaser_energy * get_rand(100); 
9996   4461 FA FB FF      lea d, [bp + -5] ; $phaser_energy
9997   4464 DA            push d
9998   4465 FA FB FF      lea d, [bp + -5] ; $phaser_energy
9999   4468 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10000  446B FD 39         mov c, b ; And place it into C
10001  446D 2A            mov b, [d] ; Lower Word in B
10002  446E             ; START FACTORS
10003  446E D7            push a
10004  446F 11            mov a, b
10005  4470 26 64 00      mov b, $64
10006  4473 FD AB         swp b
10007  4475 D8            push b
10008  4476 07 E8 22      call get_rand
10009  4479 51 02 00      add sp, 2
10010  447C AC            mul a, b ; *
10011  447D 11            mov a, b
10012  447E 27            mov b, a
10013  447F E4            pop a
10014  4480             ; END FACTORS
10015  4480 E7            pop d
10016  4481 FD 43         mov [d], b
10017  4483 28            mov b, c
10018  4484 FD 44 02 00   mov [d + 2], b
10019  4488 0A A9 44      jmp _if157_exit
10020  448B             _if157_else:
10021  448B             ; phaser_energy = phaser_energy* 100; 
10022  448B FA FB FF      lea d, [bp + -5] ; $phaser_energy
10023  448E DA            push d
10024  448F FA FB FF      lea d, [bp + -5] ; $phaser_energy
10025  4492 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10026  4495 FD 39         mov c, b ; And place it into C
10027  4497 2A            mov b, [d] ; Lower Word in B
10028  4498             ; START FACTORS
10029  4498 D7            push a
10030  4499 11            mov a, b
10031  449A 26 64 00      mov b, $64
10032  449D AC            mul a, b ; *
10033  449E 11            mov a, b
10034  449F 27            mov b, a
10035  44A0 E4            pop a
10036  44A1             ; END FACTORS
10037  44A1 E7            pop d
10038  44A2 FD 43         mov [d], b
10039  44A4 28            mov b, c
10040  44A5 FD 44 02 00   mov [d + 2], b
10041  44A9             _if157_exit:
10042  44A9             ; h1 = phaser_energy / klingons; 
10043  44A9 FA F7 FF      lea d, [bp + -9] ; $h1
10044  44AC DA            push d
10045  44AD FA FB FF      lea d, [bp + -5] ; $phaser_energy
10046  44B0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10047  44B3 FD 39         mov c, b ; And place it into C
10048  44B5 2A            mov b, [d] ; Lower Word in B
10049  44B6             ; START FACTORS
10050  44B6 D7            push a
10051  44B7 11            mov a, b
10052  44B8 3B 7A 68      mov d, _klingons ; $klingons
10053  44BB 32            mov bl, [d]
10054  44BC A7 00         mov bh, 0
10055  44BE AE            div a, b
10056  44BF 27            mov b, a
10057  44C0 E4            pop a
10058  44C1             ; END FACTORS
10059  44C1 E7            pop d
10060  44C2 FD 43         mov [d], b
10061  44C4 28            mov b, c
10062  44C5 FD 44 02 00   mov [d + 2], b
10063  44C9             ; for (i = 0; i <= 2; i++) { 
10064  44C9             _for158_init:
10065  44C9 FA FF FF      lea d, [bp + -1] ; $i
10066  44CC DA            push d
10067  44CD 26 00 00      mov b, $0
10068  44D0 E7            pop d
10069  44D1 FD 43         mov [d], b
10070  44D3             _for158_cond:
10071  44D3 FA FF FF      lea d, [bp + -1] ; $i
10072  44D6 2A            mov b, [d]
10073  44D7             ; START RELATIONAL
10074  44D7 D7            push a
10075  44D8 11            mov a, b
10076  44D9 26 02 00      mov b, $2
10077  44DC B0            cmp a, b
10078  44DD FD 74         sle ; <= (signed)
10079  44DF E4            pop a
10080  44E0             ; END RELATIONAL
10081  44E0 C0 00 00      cmp b, 0
10082  44E3 C6 02 47      je _for158_exit
10083  44E6             _for158_block:
10084  44E6             ; if (k->energy > 0) { 
10085  44E6             _if159_cond:
10086  44E6 FA F3 FF      lea d, [bp + -13] ; $k
10087  44E9 FD 2A         mov d, [d]
10088  44EB 58 02 00      add d, 2
10089  44EE 2A            mov b, [d]
10090  44EF             ; START RELATIONAL
10091  44EF D7            push a
10092  44F0 11            mov a, b
10093  44F1 26 00 00      mov b, $0
10094  44F4 B0            cmp a, b
10095  44F5 FD 7F         sgt ; >
10096  44F7 E4            pop a
10097  44F8             ; END RELATIONAL
10098  44F8 C0 00 00      cmp b, 0
10099  44FB C6 E1 46      je _if159_exit
10100  44FE             _if159_true:
10101  44FE             ; h1 = h1 * (get_rand(100) + 200); 
10102  44FE FA F7 FF      lea d, [bp + -9] ; $h1
10103  4501 DA            push d
10104  4502 FA F7 FF      lea d, [bp + -9] ; $h1
10105  4505 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10106  4508 FD 39         mov c, b ; And place it into C
10107  450A 2A            mov b, [d] ; Lower Word in B
10108  450B             ; START FACTORS
10109  450B D7            push a
10110  450C 11            mov a, b
10111  450D 26 64 00      mov b, $64
10112  4510 FD AB         swp b
10113  4512 D8            push b
10114  4513 07 E8 22      call get_rand
10115  4516 51 02 00      add sp, 2
10116  4519             ; START TERMS
10117  4519 D7            push a
10118  451A 11            mov a, b
10119  451B 26 C8 00      mov b, $c8
10120  451E 56            add b, a
10121  451F E4            pop a
10122  4520             ; END TERMS
10123  4520 AC            mul a, b ; *
10124  4521 11            mov a, b
10125  4522 27            mov b, a
10126  4523 E4            pop a
10127  4524             ; END FACTORS
10128  4524 E7            pop d
10129  4525 FD 43         mov [d], b
10130  4527 28            mov b, c
10131  4528 FD 44 02 00   mov [d + 2], b
10132  452C             ; h1 =h1/ distance_to(k); 
10133  452C FA F7 FF      lea d, [bp + -9] ; $h1
10134  452F DA            push d
10135  4530 FA F7 FF      lea d, [bp + -9] ; $h1
10136  4533 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10137  4536 FD 39         mov c, b ; And place it into C
10138  4538 2A            mov b, [d] ; Lower Word in B
10139  4539             ; START FACTORS
10140  4539 D7            push a
10141  453A 11            mov a, b
10142  453B FA F3 FF      lea d, [bp + -13] ; $k
10143  453E 2A            mov b, [d]
10144  453F FD AB         swp b
10145  4541 D8            push b
10146  4542 07 F0 66      call distance_to
10147  4545 51 02 00      add sp, 2
10148  4548 AE            div a, b
10149  4549 27            mov b, a
10150  454A E4            pop a
10151  454B             ; END FACTORS
10152  454B E7            pop d
10153  454C FD 43         mov [d], b
10154  454E 28            mov b, c
10155  454F FD 44 02 00   mov [d + 2], b
10156  4553             ; if (h1 <= 15 * k->energy) {	/* was 0.15 */ 
10157  4553             _if160_cond:
10158  4553 FA F7 FF      lea d, [bp + -9] ; $h1
10159  4556 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10160  4559 FD 39         mov c, b ; And place it into C
10161  455B 2A            mov b, [d] ; Lower Word in B
10162  455C             ; START RELATIONAL
10163  455C D7            push a
10164  455D FD D8         push g
10165  455F 11            mov a, b
10166  4560 FD 7A         mov g, c
10167  4562 26 0F 00      mov b, $f
10168  4565             ; START FACTORS
10169  4565 D7            push a
10170  4566 11            mov a, b
10171  4567 FA F3 FF      lea d, [bp + -13] ; $k
10172  456A FD 2A         mov d, [d]
10173  456C 58 02 00      add d, 2
10174  456F 2A            mov b, [d]
10175  4570 AC            mul a, b ; *
10176  4571 11            mov a, b
10177  4572 27            mov b, a
10178  4573 E4            pop a
10179  4574             ; END FACTORS
10180  4574 38 00 00      mov c, 0
10181  4577 FD 76         sleu
10182  4579 FD F1         pop g
10183  457B E4            pop a
10184  457C             ; END RELATIONAL
10185  457C C0 00 00      cmp b, 0
10186  457F C6 A9 45      je _if160_else
10187  4582             _if160_true:
10188  4582             ; printf("Sensors show no damage to enemy at %d, %d\n\n", k->y, k->x); 
10189  4582 FA F3 FF      lea d, [bp + -13] ; $k
10190  4585 FD 2A         mov d, [d]
10191  4587 58 01 00      add d, 1
10192  458A 32            mov bl, [d]
10193  458B A7 00         mov bh, 0
10194  458D DD            push bl
10195  458E FA F3 FF      lea d, [bp + -13] ; $k
10196  4591 FD 2A         mov d, [d]
10197  4593 58 00 00      add d, 0
10198  4596 32            mov bl, [d]
10199  4597 A7 00         mov bh, 0
10200  4599 DD            push bl
10201  459A 26 55 74      mov b, _s108 ; "Sensors show no damage to enemy at %d, %d\n\n"
10202  459D FD AB         swp b
10203  459F D8            push b
10204  45A0 07 BA 07      call printf
10205  45A3 51 04 00      add sp, 4
10206  45A6 0A DE 46      jmp _if160_exit
10207  45A9             _if160_else:
10208  45A9             ; h = FROM_FIXED00(h1); 
10209  45A9 FA F5 FF      lea d, [bp + -11] ; $h
10210  45AC DA            push d
10211  45AD FA F7 FF      lea d, [bp + -9] ; $h1
10212  45B0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
10213  45B3 FD 39         mov c, b ; And place it into C
10214  45B5 2A            mov b, [d] ; Lower Word in B
10215  45B6 FD AB         swp b
10216  45B8 D8            push b
10217  45B9 07 D7 22      call FROM_FIXED00
10218  45BC 51 02 00      add sp, 2
10219  45BF E7            pop d
10220  45C0 FD 43         mov [d], b
10221  45C2             ; k->energy = k->energy - h; 
10222  45C2 FA F3 FF      lea d, [bp + -13] ; $k
10223  45C5 FD 2A         mov d, [d]
10224  45C7 58 02 00      add d, 2
10225  45CA DA            push d
10226  45CB FA F3 FF      lea d, [bp + -13] ; $k
10227  45CE FD 2A         mov d, [d]
10228  45D0 58 02 00      add d, 2
10229  45D3 2A            mov b, [d]
10230  45D4             ; START TERMS
10231  45D4 D7            push a
10232  45D5 11            mov a, b
10233  45D6 FA F5 FF      lea d, [bp + -11] ; $h
10234  45D9 2A            mov b, [d]
10235  45DA 60            sub a, b
10236  45DB 27            mov b, a
10237  45DC E4            pop a
10238  45DD             ; END TERMS
10239  45DD E7            pop d
10240  45DE FD 43         mov [d], b
10241  45E0             ; printf("%d unit hit on Klingon at sector %d, %d\n", 
10242  45E0 FA F3 FF      lea d, [bp + -13] ; $k
10243  45E3 FD 2A         mov d, [d]
10244  45E5 58 01 00      add d, 1
10245  45E8 32            mov bl, [d]
10246  45E9 A7 00         mov bh, 0
10247  45EB DD            push bl
10248  45EC FA F3 FF      lea d, [bp + -13] ; $k
10249  45EF FD 2A         mov d, [d]
10250  45F1 58 00 00      add d, 0
10251  45F4 32            mov bl, [d]
10252  45F5 A7 00         mov bh, 0
10253  45F7 DD            push bl
10254  45F8 FA F5 FF      lea d, [bp + -11] ; $h
10255  45FB 2A            mov b, [d]
10256  45FC FD AB         swp b
10257  45FE D8            push b
10258  45FF 26 81 74      mov b, _s109 ; "%d unit hit on Klingon at sector %d, %d\n"
10259  4602 FD AB         swp b
10260  4604 D8            push b
10261  4605 07 BA 07      call printf
10262  4608 51 06 00      add sp, 6
10263  460B             ; if (k->energy <= 0) { 
10264  460B             _if161_cond:
10265  460B FA F3 FF      lea d, [bp + -13] ; $k
10266  460E FD 2A         mov d, [d]
10267  4610 58 02 00      add d, 2
10268  4613 2A            mov b, [d]
10269  4614             ; START RELATIONAL
10270  4614 D7            push a
10271  4615 11            mov a, b
10272  4616 26 00 00      mov b, $0
10273  4619 B0            cmp a, b
10274  461A FD 74         sle ; <= (signed)
10275  461C E4            pop a
10276  461D             ; END RELATIONAL
10277  461D C0 00 00      cmp b, 0
10278  4620 C6 C6 46      je _if161_else
10279  4623             _if161_true:
10280  4623             ; puts("*** Klingon Destroyed ***\n"); 
10281  4623 26 AA 74      mov b, _s110 ; "*** Klingon Destroyed ***\n"
10282  4626 FD AB         swp b
10283  4628 D8            push b
10284  4629 07 B8 1A      call puts
10285  462C 51 02 00      add sp, 2
10286  462F             ; klingons--; 
10287  462F 3B 7A 68      mov d, _klingons ; $klingons
10288  4632 32            mov bl, [d]
10289  4633 A7 00         mov bh, 0
10290  4635 FD 7D         dec b
10291  4637 3B 7A 68      mov d, _klingons ; $klingons
10292  463A FD 43         mov [d], b
10293  463C FD 77         inc b
10294  463E             ; klingons_left--; 
10295  463E 3B 7C 68      mov d, _klingons_left ; $klingons_left
10296  4641 32            mov bl, [d]
10297  4642 A7 00         mov bh, 0
10298  4644 FD 7D         dec b
10299  4646 3B 7C 68      mov d, _klingons_left ; $klingons_left
10300  4649 FD 43         mov [d], b
10301  464B FD 77         inc b
10302  464D             ; wipe_klingon(k); 
10303  464D FA F3 FF      lea d, [bp + -13] ; $k
10304  4650 2A            mov b, [d]
10305  4651 FD AB         swp b
10306  4653 D8            push b
10307  4654 07 FD 41      call wipe_klingon
10308  4657 51 02 00      add sp, 2
10309  465A             ; k->energy = 0; 
10310  465A FA F3 FF      lea d, [bp + -13] ; $k
10311  465D FD 2A         mov d, [d]
10312  465F 58 02 00      add d, 2
10313  4662 DA            push d
10314  4663 26 00 00      mov b, $0
10315  4666 E7            pop d
10316  4667 FD 43         mov [d], b
10317  4669             ; map[quad_y][quad_x] = map[quad_y][quad_x] - 0x100; 
10318  4669 3B CC 67      mov d, _map_data ; $map
10319  466C D7            push a
10320  466D DA            push d
10321  466E 3B 7F 68      mov d, _quad_y ; $quad_y
10322  4671 2A            mov b, [d]
10323  4672 E7            pop d
10324  4673 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
10325  4677 DA            push d
10326  4678 3B 81 68      mov d, _quad_x ; $quad_x
10327  467B 2A            mov b, [d]
10328  467C E7            pop d
10329  467D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10330  4681 E4            pop a
10331  4682 DA            push d
10332  4683 3B CC 67      mov d, _map_data ; $map
10333  4686 D7            push a
10334  4687 DA            push d
10335  4688 3B 7F 68      mov d, _quad_y ; $quad_y
10336  468B 2A            mov b, [d]
10337  468C E7            pop d
10338  468D FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
10339  4691 DA            push d
10340  4692 3B 81 68      mov d, _quad_x ; $quad_x
10341  4695 2A            mov b, [d]
10342  4696 E7            pop d
10343  4697 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10344  469B E4            pop a
10345  469C 2A            mov b, [d]
10346  469D             ; START TERMS
10347  469D D7            push a
10348  469E 11            mov a, b
10349  469F 26 00 01      mov b, $100
10350  46A2 60            sub a, b
10351  46A3 27            mov b, a
10352  46A4 E4            pop a
10353  46A5             ; END TERMS
10354  46A5 E7            pop d
10355  46A6 FD 43         mov [d], b
10356  46A8             ; if (klingons_left <= 0) 
10357  46A8             _if162_cond:
10358  46A8 3B 7C 68      mov d, _klingons_left ; $klingons_left
10359  46AB 32            mov bl, [d]
10360  46AC A7 00         mov bh, 0
10361  46AE             ; START RELATIONAL
10362  46AE D7            push a
10363  46AF 11            mov a, b
10364  46B0 26 00 00      mov b, $0
10365  46B3 B0            cmp a, b
10366  46B4 FD 76         sleu ; <= (unsigned)
10367  46B6 E4            pop a
10368  46B7             ; END RELATIONAL
10369  46B7 C0 00 00      cmp b, 0
10370  46BA C6 C3 46      je _if162_exit
10371  46BD             _if162_true:
10372  46BD             ; won_game(); 
10373  46BD 07 28 5C      call won_game
10374  46C0 0A C3 46      jmp _if162_exit
10375  46C3             _if162_exit:
10376  46C3 0A DE 46      jmp _if161_exit
10377  46C6             _if161_else:
10378  46C6             ; printf("   (Sensors show %d units remaining.)\n\n", k->energy); 
10379  46C6 FA F3 FF      lea d, [bp + -13] ; $k
10380  46C9 FD 2A         mov d, [d]
10381  46CB 58 02 00      add d, 2
10382  46CE 2A            mov b, [d]
10383  46CF FD AB         swp b
10384  46D1 D8            push b
10385  46D2 26 C5 74      mov b, _s111 ; "   (Sensors show %d units remaining.)\n\n"
10386  46D5 FD AB         swp b
10387  46D7 D8            push b
10388  46D8 07 BA 07      call printf
10389  46DB 51 04 00      add sp, 4
10390  46DE             _if161_exit:
10391  46DE             _if160_exit:
10392  46DE 0A E1 46      jmp _if159_exit
10393  46E1             _if159_exit:
10394  46E1             ; k++; 
10395  46E1 FA F3 FF      lea d, [bp + -13] ; $k
10396  46E4 2A            mov b, [d]
10397  46E5 FD 77         inc b
10398  46E7 FD 77         inc b
10399  46E9 FA F3 FF      lea d, [bp + -13] ; $k
10400  46EC FD 43         mov [d], b
10401  46EE FD 7D         dec b
10402  46F0 FD 7D         dec b
10403  46F2             _for158_update:
10404  46F2 FA FF FF      lea d, [bp + -1] ; $i
10405  46F5 2A            mov b, [d]
10406  46F6 FD 77         inc b
10407  46F8 FA FF FF      lea d, [bp + -1] ; $i
10408  46FB FD 43         mov [d], b
10409  46FD FD 7D         dec b
10410  46FF 0A D3 44      jmp _for158_cond
10411  4702             _for158_exit:
10412  4702             ; klingons_shoot(); 
10413  4702 07 DE 5D      call klingons_shoot
10414  4705 F9            leave
10415  4706 09            ret
10416  4707             
10417  4707             photon_torpedoes:
10418  4707 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10419  470A             ; int x3, y3; 
10420  470A 52 02 00      sub sp, 2
10421  470D 52 02 00      sub sp, 2
10422  4710             ; int       c1; 
10423  4710 52 02 00      sub sp, 2
10424  4713             ; int c2, c3, c4; 
10425  4713 52 02 00      sub sp, 2
10426  4716 52 02 00      sub sp, 2
10427  4719 52 02 00      sub sp, 2
10428  471C             ; int       x, y, x1, x2; 
10429  471C 52 02 00      sub sp, 2
10430  471F 52 02 00      sub sp, 2
10431  4722 52 02 00      sub sp, 2
10432  4725 52 02 00      sub sp, 2
10433  4728             ; if (torps <= 0) { 
10434  4728             _if163_cond:
10435  4728 3B 7D 68      mov d, _torps ; $torps
10436  472B 32            mov bl, [d]
10437  472C A7 00         mov bh, 0
10438  472E             ; START RELATIONAL
10439  472E D7            push a
10440  472F 11            mov a, b
10441  4730 26 00 00      mov b, $0
10442  4733 B0            cmp a, b
10443  4734 FD 76         sleu ; <= (unsigned)
10444  4736 E4            pop a
10445  4737             ; END RELATIONAL
10446  4737 C0 00 00      cmp b, 0
10447  473A C6 4E 47      je _if163_exit
10448  473D             _if163_true:
10449  473D             ; puts("All photon torpedoes expended"); 
10450  473D 26 ED 74      mov b, _s112 ; "All photon torpedoes expended"
10451  4740 FD AB         swp b
10452  4742 D8            push b
10453  4743 07 B8 1A      call puts
10454  4746 51 02 00      add sp, 2
10455  4749             ; return; 
10456  4749 F9            leave
10457  474A 09            ret
10458  474B 0A 4E 47      jmp _if163_exit
10459  474E             _if163_exit:
10460  474E             ; if (inoperable(5)) 
10461  474E             _if164_cond:
10462  474E 26 05 00      mov b, $5
10463  4751 DD            push bl
10464  4752 07 6C 26      call inoperable
10465  4755 51 01 00      add sp, 1
10466  4758 C0 00 00      cmp b, 0
10467  475B C6 63 47      je _if164_exit
10468  475E             _if164_true:
10469  475E             ; return; 
10470  475E F9            leave
10471  475F 09            ret
10472  4760 0A 63 47      jmp _if164_exit
10473  4763             _if164_exit:
10474  4763             ; puts("Course (0-9): "); 
10475  4763 26 26 6F      mov b, _s71 ; "Course (0-9): "
10476  4766 FD AB         swp b
10477  4768 D8            push b
10478  4769 07 B8 1A      call puts
10479  476C 51 02 00      add sp, 2
10480  476F             ; c1 = input_f00(); 
10481  476F FA FB FF      lea d, [bp + -5] ; $c1
10482  4772 DA            push d
10483  4773 07 10 24      call input_f00
10484  4776 E7            pop d
10485  4777 FD 43         mov [d], b
10486  4779             ; if (c1 == 900) 
10487  4779             _if165_cond:
10488  4779 FA FB FF      lea d, [bp + -5] ; $c1
10489  477C 2A            mov b, [d]
10490  477D             ; START RELATIONAL
10491  477D D7            push a
10492  477E 11            mov a, b
10493  477F 26 84 03      mov b, $384
10494  4782 B0            cmp a, b
10495  4783 FD 71         seq ; ==
10496  4785 E4            pop a
10497  4786             ; END RELATIONAL
10498  4786 C0 00 00      cmp b, 0
10499  4789 C6 99 47      je _if165_exit
10500  478C             _if165_true:
10501  478C             ; c1 = 100; 
10502  478C FA FB FF      lea d, [bp + -5] ; $c1
10503  478F DA            push d
10504  4790 26 64 00      mov b, $64
10505  4793 E7            pop d
10506  4794 FD 43         mov [d], b
10507  4796 0A 99 47      jmp _if165_exit
10508  4799             _if165_exit:
10509  4799             ; if (c1 < 100 || c1 >= 900) { 
10510  4799             _if166_cond:
10511  4799 FA FB FF      lea d, [bp + -5] ; $c1
10512  479C 2A            mov b, [d]
10513  479D             ; START RELATIONAL
10514  479D D7            push a
10515  479E 11            mov a, b
10516  479F 26 64 00      mov b, $64
10517  47A2 B0            cmp a, b
10518  47A3 FD 73         slt ; < (signed)
10519  47A5 E4            pop a
10520  47A6             ; END RELATIONAL
10521  47A6             ; START LOGICAL OR
10522  47A6 D7            push a
10523  47A7 11            mov a, b
10524  47A8 FA FB FF      lea d, [bp + -5] ; $c1
10525  47AB 2A            mov b, [d]
10526  47AC             ; START RELATIONAL
10527  47AC D7            push a
10528  47AD 11            mov a, b
10529  47AE 26 84 03      mov b, $384
10530  47B1 B0            cmp a, b
10531  47B2 FD 80         sge ; >=
10532  47B4 E4            pop a
10533  47B5             ; END RELATIONAL
10534  47B5 FD A8         sor a, b ; ||
10535  47B7 E4            pop a
10536  47B8             ; END LOGICAL OR
10537  47B8 C0 00 00      cmp b, 0
10538  47BB C6 D6 47      je _if166_exit
10539  47BE             _if166_true:
10540  47BE             ; printf("Ensign Chekov%s", inc_1); 
10541  47BE 3B 18 69      mov d, _inc_1 ; $inc_1
10542  47C1 2A            mov b, [d]
10543  47C2 FD AB         swp b
10544  47C4 D8            push b
10545  47C5 26 0B 75      mov b, _s113 ; "Ensign Chekov%s"
10546  47C8 FD AB         swp b
10547  47CA D8            push b
10548  47CB 07 BA 07      call printf
10549  47CE 51 04 00      add sp, 4
10550  47D1             ; return; 
10551  47D1 F9            leave
10552  47D2 09            ret
10553  47D3 0A D6 47      jmp _if166_exit
10554  47D6             _if166_exit:
10555  47D6             ; energy = energy - 2; 
10556  47D6 3B C8 67      mov d, _energy ; $energy
10557  47D9 DA            push d
10558  47DA 3B C8 67      mov d, _energy ; $energy
10559  47DD 2A            mov b, [d]
10560  47DE             ; START TERMS
10561  47DE D7            push a
10562  47DF 11            mov a, b
10563  47E0 26 02 00      mov b, $2
10564  47E3 60            sub a, b
10565  47E4 27            mov b, a
10566  47E5 E4            pop a
10567  47E6             ; END TERMS
10568  47E6 E7            pop d
10569  47E7 FD 43         mov [d], b
10570  47E9             ; torps--; 
10571  47E9 3B 7D 68      mov d, _torps ; $torps
10572  47EC 32            mov bl, [d]
10573  47ED A7 00         mov bh, 0
10574  47EF FD 7D         dec b
10575  47F1 3B 7D 68      mov d, _torps ; $torps
10576  47F4 FD 43         mov [d], b
10577  47F6 FD 77         inc b
10578  47F8             ; c2 = FROM_FIXED00(c1);	/* Integer part */ 
10579  47F8 FA F9 FF      lea d, [bp + -7] ; $c2
10580  47FB DA            push d
10581  47FC FA FB FF      lea d, [bp + -5] ; $c1
10582  47FF 2A            mov b, [d]
10583  4800 FD AB         swp b
10584  4802 D8            push b
10585  4803 07 D7 22      call FROM_FIXED00
10586  4806 51 02 00      add sp, 2
10587  4809 E7            pop d
10588  480A FD 43         mov [d], b
10589  480C             ; c3 = c2 + 1;		/* Next integer part */ 
10590  480C FA F7 FF      lea d, [bp + -9] ; $c3
10591  480F DA            push d
10592  4810 FA F9 FF      lea d, [bp + -7] ; $c2
10593  4813 2A            mov b, [d]
10594  4814             ; START TERMS
10595  4814 D7            push a
10596  4815 11            mov a, b
10597  4816 26 01 00      mov b, $1
10598  4819 56            add b, a
10599  481A E4            pop a
10600  481B             ; END TERMS
10601  481B E7            pop d
10602  481C FD 43         mov [d], b
10603  481E             ; c4 = (c1 - TO_FIXED00(c2));	/* Fractional element in fixed point */ 
10604  481E FA F5 FF      lea d, [bp + -11] ; $c4
10605  4821 DA            push d
10606  4822 FA FB FF      lea d, [bp + -5] ; $c1
10607  4825 2A            mov b, [d]
10608  4826             ; START TERMS
10609  4826 D7            push a
10610  4827 11            mov a, b
10611  4828 FA F9 FF      lea d, [bp + -7] ; $c2
10612  482B 2A            mov b, [d]
10613  482C FD AB         swp b
10614  482E D8            push b
10615  482F 07 C5 22      call TO_FIXED00
10616  4832 51 02 00      add sp, 2
10617  4835 60            sub a, b
10618  4836 27            mov b, a
10619  4837 E4            pop a
10620  4838             ; END TERMS
10621  4838 E7            pop d
10622  4839 FD 43         mov [d], b
10623  483B             ; x1 = 100 * c[1][c2] + (c[1][c3] - c[1][c2]) * c4; 
10624  483B FA EF FF      lea d, [bp + -17] ; $x1
10625  483E DA            push d
10626  483F 26 64 00      mov b, $64
10627  4842             ; START FACTORS
10628  4842 D7            push a
10629  4843 11            mov a, b
10630  4844 3B A7 67      mov d, _c_data ; $c
10631  4847 D7            push a
10632  4848 DA            push d
10633  4849 26 01 00      mov b, $1
10634  484C E7            pop d
10635  484D FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
10636  4851 DA            push d
10637  4852 FA F9 FF      lea d, [bp + -7] ; $c2
10638  4855 2A            mov b, [d]
10639  4856 E7            pop d
10640  4857 5A            add d, b
10641  4858 E4            pop a
10642  4859 32            mov bl, [d]
10643  485A A7 00         mov bh, 0
10644  485C AC            mul a, b ; *
10645  485D 11            mov a, b
10646  485E 27            mov b, a
10647  485F E4            pop a
10648  4860             ; END FACTORS
10649  4860             ; START TERMS
10650  4860 D7            push a
10651  4861 11            mov a, b
10652  4862 3B A7 67      mov d, _c_data ; $c
10653  4865 D7            push a
10654  4866 DA            push d
10655  4867 26 01 00      mov b, $1
10656  486A E7            pop d
10657  486B FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
10658  486F DA            push d
10659  4870 FA F7 FF      lea d, [bp + -9] ; $c3
10660  4873 2A            mov b, [d]
10661  4874 E7            pop d
10662  4875 5A            add d, b
10663  4876 E4            pop a
10664  4877 32            mov bl, [d]
10665  4878 A7 00         mov bh, 0
10666  487A             ; START TERMS
10667  487A D7            push a
10668  487B 11            mov a, b
10669  487C 3B A7 67      mov d, _c_data ; $c
10670  487F D7            push a
10671  4880 DA            push d
10672  4881 26 01 00      mov b, $1
10673  4884 E7            pop d
10674  4885 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
10675  4889 DA            push d
10676  488A FA F9 FF      lea d, [bp + -7] ; $c2
10677  488D 2A            mov b, [d]
10678  488E E7            pop d
10679  488F 5A            add d, b
10680  4890 E4            pop a
10681  4891 32            mov bl, [d]
10682  4892 A7 00         mov bh, 0
10683  4894 60            sub a, b
10684  4895 27            mov b, a
10685  4896 E4            pop a
10686  4897             ; END TERMS
10687  4897             ; START FACTORS
10688  4897 D7            push a
10689  4898 11            mov a, b
10690  4899 FA F5 FF      lea d, [bp + -11] ; $c4
10691  489C 2A            mov b, [d]
10692  489D AC            mul a, b ; *
10693  489E 11            mov a, b
10694  489F 27            mov b, a
10695  48A0 E4            pop a
10696  48A1             ; END FACTORS
10697  48A1 56            add b, a
10698  48A2 E4            pop a
10699  48A3             ; END TERMS
10700  48A3 E7            pop d
10701  48A4 FD 43         mov [d], b
10702  48A6             ; x2 = 100 * c[2][c2] + (c[2][c3] - c[2][c2]) * c4; 
10703  48A6 FA ED FF      lea d, [bp + -19] ; $x2
10704  48A9 DA            push d
10705  48AA 26 64 00      mov b, $64
10706  48AD             ; START FACTORS
10707  48AD D7            push a
10708  48AE 11            mov a, b
10709  48AF 3B A7 67      mov d, _c_data ; $c
10710  48B2 D7            push a
10711  48B3 DA            push d
10712  48B4 26 02 00      mov b, $2
10713  48B7 E7            pop d
10714  48B8 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
10715  48BC DA            push d
10716  48BD FA F9 FF      lea d, [bp + -7] ; $c2
10717  48C0 2A            mov b, [d]
10718  48C1 E7            pop d
10719  48C2 5A            add d, b
10720  48C3 E4            pop a
10721  48C4 32            mov bl, [d]
10722  48C5 A7 00         mov bh, 0
10723  48C7 AC            mul a, b ; *
10724  48C8 11            mov a, b
10725  48C9 27            mov b, a
10726  48CA E4            pop a
10727  48CB             ; END FACTORS
10728  48CB             ; START TERMS
10729  48CB D7            push a
10730  48CC 11            mov a, b
10731  48CD 3B A7 67      mov d, _c_data ; $c
10732  48D0 D7            push a
10733  48D1 DA            push d
10734  48D2 26 02 00      mov b, $2
10735  48D5 E7            pop d
10736  48D6 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
10737  48DA DA            push d
10738  48DB FA F7 FF      lea d, [bp + -9] ; $c3
10739  48DE 2A            mov b, [d]
10740  48DF E7            pop d
10741  48E0 5A            add d, b
10742  48E1 E4            pop a
10743  48E2 32            mov bl, [d]
10744  48E3 A7 00         mov bh, 0
10745  48E5             ; START TERMS
10746  48E5 D7            push a
10747  48E6 11            mov a, b
10748  48E7 3B A7 67      mov d, _c_data ; $c
10749  48EA D7            push a
10750  48EB DA            push d
10751  48EC 26 02 00      mov b, $2
10752  48EF E7            pop d
10753  48F0 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
10754  48F4 DA            push d
10755  48F5 FA F9 FF      lea d, [bp + -7] ; $c2
10756  48F8 2A            mov b, [d]
10757  48F9 E7            pop d
10758  48FA 5A            add d, b
10759  48FB E4            pop a
10760  48FC 32            mov bl, [d]
10761  48FD A7 00         mov bh, 0
10762  48FF 60            sub a, b
10763  4900 27            mov b, a
10764  4901 E4            pop a
10765  4902             ; END TERMS
10766  4902             ; START FACTORS
10767  4902 D7            push a
10768  4903 11            mov a, b
10769  4904 FA F5 FF      lea d, [bp + -11] ; $c4
10770  4907 2A            mov b, [d]
10771  4908 AC            mul a, b ; *
10772  4909 11            mov a, b
10773  490A 27            mov b, a
10774  490B E4            pop a
10775  490C             ; END FACTORS
10776  490C 56            add b, a
10777  490D E4            pop a
10778  490E             ; END TERMS
10779  490E E7            pop d
10780  490F FD 43         mov [d], b
10781  4911             ; x = ship_y + x1; 
10782  4911 FA F3 FF      lea d, [bp + -13] ; $x
10783  4914 DA            push d
10784  4915 3B 9E 68      mov d, _ship_y ; $ship_y
10785  4918 2A            mov b, [d]
10786  4919             ; START TERMS
10787  4919 D7            push a
10788  491A 11            mov a, b
10789  491B FA EF FF      lea d, [bp + -17] ; $x1
10790  491E 2A            mov b, [d]
10791  491F 56            add b, a
10792  4920 E4            pop a
10793  4921             ; END TERMS
10794  4921 E7            pop d
10795  4922 FD 43         mov [d], b
10796  4924             ; y = ship_x + x2; 
10797  4924 FA F1 FF      lea d, [bp + -15] ; $y
10798  4927 DA            push d
10799  4928 3B A0 68      mov d, _ship_x ; $ship_x
10800  492B 2A            mov b, [d]
10801  492C             ; START TERMS
10802  492C D7            push a
10803  492D 11            mov a, b
10804  492E FA ED FF      lea d, [bp + -19] ; $x2
10805  4931 2A            mov b, [d]
10806  4932 56            add b, a
10807  4933 E4            pop a
10808  4934             ; END TERMS
10809  4934 E7            pop d
10810  4935 FD 43         mov [d], b
10811  4937             ; x3 = FROM_FIXED00(x); 
10812  4937 FA FF FF      lea d, [bp + -1] ; $x3
10813  493A DA            push d
10814  493B FA F3 FF      lea d, [bp + -13] ; $x
10815  493E 2A            mov b, [d]
10816  493F FD AB         swp b
10817  4941 D8            push b
10818  4942 07 D7 22      call FROM_FIXED00
10819  4945 51 02 00      add sp, 2
10820  4948 E7            pop d
10821  4949 FD 43         mov [d], b
10822  494B             ; y3 = FROM_FIXED00(y); 
10823  494B FA FD FF      lea d, [bp + -3] ; $y3
10824  494E DA            push d
10825  494F FA F1 FF      lea d, [bp + -15] ; $y
10826  4952 2A            mov b, [d]
10827  4953 FD AB         swp b
10828  4955 D8            push b
10829  4956 07 D7 22      call FROM_FIXED00
10830  4959 51 02 00      add sp, 2
10831  495C E7            pop d
10832  495D FD 43         mov [d], b
10833  495F             ; puts("Torpedo Track:"); 
10834  495F 26 1B 75      mov b, _s114 ; "Torpedo Track:"
10835  4962 FD AB         swp b
10836  4964 D8            push b
10837  4965 07 B8 1A      call puts
10838  4968 51 02 00      add sp, 2
10839  496B             ; while (x3 >= 1 && x3 <= 8 && y3 >= 1 && y3 <= 8) { 
10840  496B             _while167_cond:
10841  496B FA FF FF      lea d, [bp + -1] ; $x3
10842  496E 2A            mov b, [d]
10843  496F             ; START RELATIONAL
10844  496F D7            push a
10845  4970 11            mov a, b
10846  4971 26 01 00      mov b, $1
10847  4974 B0            cmp a, b
10848  4975 FD 80         sge ; >=
10849  4977 E4            pop a
10850  4978             ; END RELATIONAL
10851  4978             ; START LOGICAL AND
10852  4978 D7            push a
10853  4979 11            mov a, b
10854  497A FA FF FF      lea d, [bp + -1] ; $x3
10855  497D 2A            mov b, [d]
10856  497E             ; START RELATIONAL
10857  497E D7            push a
10858  497F 11            mov a, b
10859  4980 26 08 00      mov b, $8
10860  4983 B0            cmp a, b
10861  4984 FD 74         sle ; <= (signed)
10862  4986 E4            pop a
10863  4987             ; END RELATIONAL
10864  4987 FD A7         sand a, b
10865  4989 11            mov a, b
10866  498A FA FD FF      lea d, [bp + -3] ; $y3
10867  498D 2A            mov b, [d]
10868  498E             ; START RELATIONAL
10869  498E D7            push a
10870  498F 11            mov a, b
10871  4990 26 01 00      mov b, $1
10872  4993 B0            cmp a, b
10873  4994 FD 80         sge ; >=
10874  4996 E4            pop a
10875  4997             ; END RELATIONAL
10876  4997 FD A7         sand a, b
10877  4999 11            mov a, b
10878  499A FA FD FF      lea d, [bp + -3] ; $y3
10879  499D 2A            mov b, [d]
10880  499E             ; START RELATIONAL
10881  499E D7            push a
10882  499F 11            mov a, b
10883  49A0 26 08 00      mov b, $8
10884  49A3 B0            cmp a, b
10885  49A4 FD 74         sle ; <= (signed)
10886  49A6 E4            pop a
10887  49A7             ; END RELATIONAL
10888  49A7 FD A7         sand a, b
10889  49A9 E4            pop a
10890  49AA             ; END LOGICAL AND
10891  49AA C0 00 00      cmp b, 0
10892  49AD C6 8F 4A      je _while167_exit
10893  49B0             _while167_block:
10894  49B0             ; unsigned char                         p; 
10895  49B0 52 01 00      sub sp, 1
10896  49B3             ; printf("    %d, %d\n", x3, y3); 
10897  49B3 FA FD FF      lea d, [bp + -3] ; $y3
10898  49B6 2A            mov b, [d]
10899  49B7 FD AB         swp b
10900  49B9 D8            push b
10901  49BA FA FF FF      lea d, [bp + -1] ; $x3
10902  49BD 2A            mov b, [d]
10903  49BE FD AB         swp b
10904  49C0 D8            push b
10905  49C1 26 2A 75      mov b, _s115 ; "    %d, %d\n"
10906  49C4 FD AB         swp b
10907  49C6 D8            push b
10908  49C7 07 BA 07      call printf
10909  49CA 51 06 00      add sp, 6
10910  49CD             ; p = quad[x3-1][y3-1]; 
10911  49CD FA EC FF      lea d, [bp + -20] ; $p
10912  49D0 DA            push d
10913  49D1 3B A4 68      mov d, _quad_data ; $quad
10914  49D4 D7            push a
10915  49D5 DA            push d
10916  49D6 FA FF FF      lea d, [bp + -1] ; $x3
10917  49D9 2A            mov b, [d]
10918  49DA             ; START TERMS
10919  49DA D7            push a
10920  49DB 11            mov a, b
10921  49DC 26 01 00      mov b, $1
10922  49DF 60            sub a, b
10923  49E0 27            mov b, a
10924  49E1 E4            pop a
10925  49E2             ; END TERMS
10926  49E2 E7            pop d
10927  49E3 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
10928  49E7 DA            push d
10929  49E8 FA FD FF      lea d, [bp + -3] ; $y3
10930  49EB 2A            mov b, [d]
10931  49EC             ; START TERMS
10932  49EC D7            push a
10933  49ED 11            mov a, b
10934  49EE 26 01 00      mov b, $1
10935  49F1 60            sub a, b
10936  49F2 27            mov b, a
10937  49F3 E4            pop a
10938  49F4             ; END TERMS
10939  49F4 E7            pop d
10940  49F5 5A            add d, b
10941  49F6 E4            pop a
10942  49F7 32            mov bl, [d]
10943  49F8 A7 00         mov bh, 0
10944  49FA E7            pop d
10945  49FB FD 3E         mov [d], bl
10946  49FD             ; if (p !=  		0       && p !=  		4     ) { 
10947  49FD             _if168_cond:
10948  49FD FA EC FF      lea d, [bp + -20] ; $p
10949  4A00 32            mov bl, [d]
10950  4A01 A7 00         mov bh, 0
10951  4A03             ; START RELATIONAL
10952  4A03 D7            push a
10953  4A04 11            mov a, b
10954  4A05 26 00 00      mov b, $0
10955  4A08 B0            cmp a, b
10956  4A09 FD 72         sneq ; !=
10957  4A0B E4            pop a
10958  4A0C             ; END RELATIONAL
10959  4A0C             ; START LOGICAL AND
10960  4A0C D7            push a
10961  4A0D 11            mov a, b
10962  4A0E FA EC FF      lea d, [bp + -20] ; $p
10963  4A11 32            mov bl, [d]
10964  4A12 A7 00         mov bh, 0
10965  4A14             ; START RELATIONAL
10966  4A14 D7            push a
10967  4A15 11            mov a, b
10968  4A16 26 04 00      mov b, $4
10969  4A19 B0            cmp a, b
10970  4A1A FD 72         sneq ; !=
10971  4A1C E4            pop a
10972  4A1D             ; END RELATIONAL
10973  4A1D FD A7         sand a, b
10974  4A1F E4            pop a
10975  4A20             ; END LOGICAL AND
10976  4A20 C0 00 00      cmp b, 0
10977  4A23 C6 3E 4A      je _if168_exit
10978  4A26             _if168_true:
10979  4A26             ; torpedo_hit(x3, y3); 
10980  4A26 FA FD FF      lea d, [bp + -3] ; $y3
10981  4A29 2A            mov b, [d]
10982  4A2A DD            push bl
10983  4A2B FA FF FF      lea d, [bp + -1] ; $x3
10984  4A2E 2A            mov b, [d]
10985  4A2F DD            push bl
10986  4A30 07 A0 4A      call torpedo_hit
10987  4A33 51 02 00      add sp, 2
10988  4A36             ; klingons_shoot(); 
10989  4A36 07 DE 5D      call klingons_shoot
10990  4A39             ; return; 
10991  4A39 F9            leave
10992  4A3A 09            ret
10993  4A3B 0A 3E 4A      jmp _if168_exit
10994  4A3E             _if168_exit:
10995  4A3E             ; x = x + x1; 
10996  4A3E FA F3 FF      lea d, [bp + -13] ; $x
10997  4A41 DA            push d
10998  4A42 FA F3 FF      lea d, [bp + -13] ; $x
10999  4A45 2A            mov b, [d]
11000  4A46             ; START TERMS
11001  4A46 D7            push a
11002  4A47 11            mov a, b
11003  4A48 FA EF FF      lea d, [bp + -17] ; $x1
11004  4A4B 2A            mov b, [d]
11005  4A4C 56            add b, a
11006  4A4D E4            pop a
11007  4A4E             ; END TERMS
11008  4A4E E7            pop d
11009  4A4F FD 43         mov [d], b
11010  4A51             ; y = y + x2; 
11011  4A51 FA F1 FF      lea d, [bp + -15] ; $y
11012  4A54 DA            push d
11013  4A55 FA F1 FF      lea d, [bp + -15] ; $y
11014  4A58 2A            mov b, [d]
11015  4A59             ; START TERMS
11016  4A59 D7            push a
11017  4A5A 11            mov a, b
11018  4A5B FA ED FF      lea d, [bp + -19] ; $x2
11019  4A5E 2A            mov b, [d]
11020  4A5F 56            add b, a
11021  4A60 E4            pop a
11022  4A61             ; END TERMS
11023  4A61 E7            pop d
11024  4A62 FD 43         mov [d], b
11025  4A64             ; x3 = FROM_FIXED00(x); 
11026  4A64 FA FF FF      lea d, [bp + -1] ; $x3
11027  4A67 DA            push d
11028  4A68 FA F3 FF      lea d, [bp + -13] ; $x
11029  4A6B 2A            mov b, [d]
11030  4A6C FD AB         swp b
11031  4A6E D8            push b
11032  4A6F 07 D7 22      call FROM_FIXED00
11033  4A72 51 02 00      add sp, 2
11034  4A75 E7            pop d
11035  4A76 FD 43         mov [d], b
11036  4A78             ; y3 = FROM_FIXED00(y); 
11037  4A78 FA FD FF      lea d, [bp + -3] ; $y3
11038  4A7B DA            push d
11039  4A7C FA F1 FF      lea d, [bp + -15] ; $y
11040  4A7F 2A            mov b, [d]
11041  4A80 FD AB         swp b
11042  4A82 D8            push b
11043  4A83 07 D7 22      call FROM_FIXED00
11044  4A86 51 02 00      add sp, 2
11045  4A89 E7            pop d
11046  4A8A FD 43         mov [d], b
11047  4A8C 0A 6B 49      jmp _while167_cond
11048  4A8F             _while167_exit:
11049  4A8F             ; puts("Torpedo Missed\n"); 
11050  4A8F 26 36 75      mov b, _s116 ; "Torpedo Missed\n"
11051  4A92 FD AB         swp b
11052  4A94 D8            push b
11053  4A95 07 B8 1A      call puts
11054  4A98 51 02 00      add sp, 2
11055  4A9B             ; klingons_shoot(); 
11056  4A9B 07 DE 5D      call klingons_shoot
11057  4A9E F9            leave
11058  4A9F 09            ret
11059  4AA0             
11060  4AA0             torpedo_hit:
11061  4AA0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11062  4AA3             ; int i; 
11063  4AA3 52 02 00      sub sp, 2
11064  4AA6             ; struct klingon *k; 
11065  4AA6 52 02 00      sub sp, 2
11066  4AA9             ; switch(quad[yp-1][xp-1]) { 
11067  4AA9             _switch169_expr:
11068  4AA9 3B A4 68      mov d, _quad_data ; $quad
11069  4AAC D7            push a
11070  4AAD DA            push d
11071  4AAE FA 05 00      lea d, [bp + 5] ; $yp
11072  4AB1 32            mov bl, [d]
11073  4AB2 A7 00         mov bh, 0
11074  4AB4             ; START TERMS
11075  4AB4 D7            push a
11076  4AB5 11            mov a, b
11077  4AB6 26 01 00      mov b, $1
11078  4AB9 60            sub a, b
11079  4ABA 27            mov b, a
11080  4ABB E4            pop a
11081  4ABC             ; END TERMS
11082  4ABC E7            pop d
11083  4ABD FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
11084  4AC1 DA            push d
11085  4AC2 FA 06 00      lea d, [bp + 6] ; $xp
11086  4AC5 32            mov bl, [d]
11087  4AC6 A7 00         mov bh, 0
11088  4AC8             ; START TERMS
11089  4AC8 D7            push a
11090  4AC9 11            mov a, b
11091  4ACA 26 01 00      mov b, $1
11092  4ACD 60            sub a, b
11093  4ACE 27            mov b, a
11094  4ACF E4            pop a
11095  4AD0             ; END TERMS
11096  4AD0 E7            pop d
11097  4AD1 5A            add d, b
11098  4AD2 E4            pop a
11099  4AD3 32            mov bl, [d]
11100  4AD4 A7 00         mov bh, 0
11101  4AD6             _switch169_comparisons:
11102  4AD6 C0 01 00      cmp b, 1
11103  4AD9 C6 EB 4A      je _switch169_case0
11104  4ADC C0 03 00      cmp b, 3
11105  4ADF C6 07 4B      je _switch169_case1
11106  4AE2 C0 02 00      cmp b, 2
11107  4AE5 C6 22 4C      je _switch169_case2
11108  4AE8 0A 1D 4D      jmp _switch169_exit
11109  4AEB             _switch169_case0:
11110  4AEB             ; printf("Star at %d, %d absorbed torpedo energy.\n\n", yp, xp); 
11111  4AEB FA 06 00      lea d, [bp + 6] ; $xp
11112  4AEE 32            mov bl, [d]
11113  4AEF A7 00         mov bh, 0
11114  4AF1 DD            push bl
11115  4AF2 FA 05 00      lea d, [bp + 5] ; $yp
11116  4AF5 32            mov bl, [d]
11117  4AF6 A7 00         mov bh, 0
11118  4AF8 DD            push bl
11119  4AF9 26 46 75      mov b, _s117 ; "Star at %d, %d absorbed torpedo energy.\n\n"
11120  4AFC FD AB         swp b
11121  4AFE D8            push b
11122  4AFF 07 BA 07      call printf
11123  4B02 51 04 00      add sp, 4
11124  4B05             ; return; 
11125  4B05 F9            leave
11126  4B06 09            ret
11127  4B07             _switch169_case1:
11128  4B07             ; puts("*** Klingon Destroyed ***\n"); 
11129  4B07 26 AA 74      mov b, _s110 ; "*** Klingon Destroyed ***\n"
11130  4B0A FD AB         swp b
11131  4B0C D8            push b
11132  4B0D 07 B8 1A      call puts
11133  4B10 51 02 00      add sp, 2
11134  4B13             ; klingons--; 
11135  4B13 3B 7A 68      mov d, _klingons ; $klingons
11136  4B16 32            mov bl, [d]
11137  4B17 A7 00         mov bh, 0
11138  4B19 FD 7D         dec b
11139  4B1B 3B 7A 68      mov d, _klingons ; $klingons
11140  4B1E FD 43         mov [d], b
11141  4B20 FD 77         inc b
11142  4B22             ; klingons_left--; 
11143  4B22 3B 7C 68      mov d, _klingons_left ; $klingons_left
11144  4B25 32            mov bl, [d]
11145  4B26 A7 00         mov bh, 0
11146  4B28 FD 7D         dec b
11147  4B2A 3B 7C 68      mov d, _klingons_left ; $klingons_left
11148  4B2D FD 43         mov [d], b
11149  4B2F FD 77         inc b
11150  4B31             ; if (klingons_left <= 0) 
11151  4B31             _if170_cond:
11152  4B31 3B 7C 68      mov d, _klingons_left ; $klingons_left
11153  4B34 32            mov bl, [d]
11154  4B35 A7 00         mov bh, 0
11155  4B37             ; START RELATIONAL
11156  4B37 D7            push a
11157  4B38 11            mov a, b
11158  4B39 26 00 00      mov b, $0
11159  4B3C B0            cmp a, b
11160  4B3D FD 76         sleu ; <= (unsigned)
11161  4B3F E4            pop a
11162  4B40             ; END RELATIONAL
11163  4B40 C0 00 00      cmp b, 0
11164  4B43 C6 4C 4B      je _if170_exit
11165  4B46             _if170_true:
11166  4B46             ; won_game(); 
11167  4B46 07 28 5C      call won_game
11168  4B49 0A 4C 4B      jmp _if170_exit
11169  4B4C             _if170_exit:
11170  4B4C             ; k = kdata; 
11171  4B4C FA FD FF      lea d, [bp + -3] ; $k
11172  4B4F DA            push d
11173  4B50 3B 6E 68      mov d, _kdata_data ; $kdata
11174  4B53 2D            mov b, d
11175  4B54 E7            pop d
11176  4B55 FD 43         mov [d], b
11177  4B57             ; for (i = 0; i <= 2; i++) { 
11178  4B57             _for171_init:
11179  4B57 FA FF FF      lea d, [bp + -1] ; $i
11180  4B5A DA            push d
11181  4B5B 26 00 00      mov b, $0
11182  4B5E E7            pop d
11183  4B5F FD 43         mov [d], b
11184  4B61             _for171_cond:
11185  4B61 FA FF FF      lea d, [bp + -1] ; $i
11186  4B64 2A            mov b, [d]
11187  4B65             ; START RELATIONAL
11188  4B65 D7            push a
11189  4B66 11            mov a, b
11190  4B67 26 02 00      mov b, $2
11191  4B6A B0            cmp a, b
11192  4B6B FD 74         sle ; <= (signed)
11193  4B6D E4            pop a
11194  4B6E             ; END RELATIONAL
11195  4B6E C0 00 00      cmp b, 0
11196  4B71 C6 E0 4B      je _for171_exit
11197  4B74             _for171_block:
11198  4B74             ; if (yp == k->y && xp == k->x) 
11199  4B74             _if172_cond:
11200  4B74 FA 05 00      lea d, [bp + 5] ; $yp
11201  4B77 32            mov bl, [d]
11202  4B78 A7 00         mov bh, 0
11203  4B7A             ; START RELATIONAL
11204  4B7A D7            push a
11205  4B7B 11            mov a, b
11206  4B7C FA FD FF      lea d, [bp + -3] ; $k
11207  4B7F FD 2A         mov d, [d]
11208  4B81 58 00 00      add d, 0
11209  4B84 32            mov bl, [d]
11210  4B85 A7 00         mov bh, 0
11211  4B87 B0            cmp a, b
11212  4B88 FD 71         seq ; ==
11213  4B8A E4            pop a
11214  4B8B             ; END RELATIONAL
11215  4B8B             ; START LOGICAL AND
11216  4B8B D7            push a
11217  4B8C 11            mov a, b
11218  4B8D FA 06 00      lea d, [bp + 6] ; $xp
11219  4B90 32            mov bl, [d]
11220  4B91 A7 00         mov bh, 0
11221  4B93             ; START RELATIONAL
11222  4B93 D7            push a
11223  4B94 11            mov a, b
11224  4B95 FA FD FF      lea d, [bp + -3] ; $k
11225  4B98 FD 2A         mov d, [d]
11226  4B9A 58 01 00      add d, 1
11227  4B9D 32            mov bl, [d]
11228  4B9E A7 00         mov bh, 0
11229  4BA0 B0            cmp a, b
11230  4BA1 FD 71         seq ; ==
11231  4BA3 E4            pop a
11232  4BA4             ; END RELATIONAL
11233  4BA4 FD A7         sand a, b
11234  4BA6 E4            pop a
11235  4BA7             ; END LOGICAL AND
11236  4BA7 C0 00 00      cmp b, 0
11237  4BAA C6 BF 4B      je _if172_exit
11238  4BAD             _if172_true:
11239  4BAD             ; k->energy = 0; 
11240  4BAD FA FD FF      lea d, [bp + -3] ; $k
11241  4BB0 FD 2A         mov d, [d]
11242  4BB2 58 02 00      add d, 2
11243  4BB5 DA            push d
11244  4BB6 26 00 00      mov b, $0
11245  4BB9 E7            pop d
11246  4BBA FD 43         mov [d], b
11247  4BBC 0A BF 4B      jmp _if172_exit
11248  4BBF             _if172_exit:
11249  4BBF             ; k++; 
11250  4BBF FA FD FF      lea d, [bp + -3] ; $k
11251  4BC2 2A            mov b, [d]
11252  4BC3 FD 77         inc b
11253  4BC5 FD 77         inc b
11254  4BC7 FA FD FF      lea d, [bp + -3] ; $k
11255  4BCA FD 43         mov [d], b
11256  4BCC FD 7D         dec b
11257  4BCE FD 7D         dec b
11258  4BD0             _for171_update:
11259  4BD0 FA FF FF      lea d, [bp + -1] ; $i
11260  4BD3 2A            mov b, [d]
11261  4BD4 FD 77         inc b
11262  4BD6 FA FF FF      lea d, [bp + -1] ; $i
11263  4BD9 FD 43         mov [d], b
11264  4BDB FD 7D         dec b
11265  4BDD 0A 61 4B      jmp _for171_cond
11266  4BE0             _for171_exit:
11267  4BE0             ; map[quad_y][quad_x] =map[quad_y][quad_x] - 0x100; 
11268  4BE0 3B CC 67      mov d, _map_data ; $map
11269  4BE3 D7            push a
11270  4BE4 DA            push d
11271  4BE5 3B 7F 68      mov d, _quad_y ; $quad_y
11272  4BE8 2A            mov b, [d]
11273  4BE9 E7            pop d
11274  4BEA FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
11275  4BEE DA            push d
11276  4BEF 3B 81 68      mov d, _quad_x ; $quad_x
11277  4BF2 2A            mov b, [d]
11278  4BF3 E7            pop d
11279  4BF4 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
11280  4BF8 E4            pop a
11281  4BF9 DA            push d
11282  4BFA 3B CC 67      mov d, _map_data ; $map
11283  4BFD D7            push a
11284  4BFE DA            push d
11285  4BFF 3B 7F 68      mov d, _quad_y ; $quad_y
11286  4C02 2A            mov b, [d]
11287  4C03 E7            pop d
11288  4C04 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
11289  4C08 DA            push d
11290  4C09 3B 81 68      mov d, _quad_x ; $quad_x
11291  4C0C 2A            mov b, [d]
11292  4C0D E7            pop d
11293  4C0E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
11294  4C12 E4            pop a
11295  4C13 2A            mov b, [d]
11296  4C14             ; START TERMS
11297  4C14 D7            push a
11298  4C15 11            mov a, b
11299  4C16 26 00 01      mov b, $100
11300  4C19 60            sub a, b
11301  4C1A 27            mov b, a
11302  4C1B E4            pop a
11303  4C1C             ; END TERMS
11304  4C1C E7            pop d
11305  4C1D FD 43         mov [d], b
11306  4C1F             ; break; 
11307  4C1F 0A 1D 4D      jmp _switch169_exit ; case break
11308  4C22             _switch169_case2:
11309  4C22             ; puts("*** Starbase Destroyed ***"); 
11310  4C22 26 70 75      mov b, _s118 ; "*** Starbase Destroyed ***"
11311  4C25 FD AB         swp b
11312  4C27 D8            push b
11313  4C28 07 B8 1A      call puts
11314  4C2B 51 02 00      add sp, 2
11315  4C2E             ; starbases--; 
11316  4C2E 3B A3 67      mov d, _starbases ; $starbases
11317  4C31 32            mov bl, [d]
11318  4C32 A7 00         mov bh, 0
11319  4C34 FD 7D         dec b
11320  4C36 3B A3 67      mov d, _starbases ; $starbases
11321  4C39 FD 43         mov [d], b
11322  4C3B FD 77         inc b
11323  4C3D             ; starbases_left--; 
11324  4C3D 3B A6 67      mov d, _starbases_left ; $starbases_left
11325  4C40 32            mov bl, [d]
11326  4C41 A7 00         mov bh, 0
11327  4C43 FD 7D         dec b
11328  4C45 3B A6 67      mov d, _starbases_left ; $starbases_left
11329  4C48 FD 43         mov [d], b
11330  4C4A FD 77         inc b
11331  4C4C             ; if (starbases_left <= 0 && klingons_left <= FROM_FIXED(stardate) - time_start - time_up) { 
11332  4C4C             _if173_cond:
11333  4C4C 3B A6 67      mov d, _starbases_left ; $starbases_left
11334  4C4F 32            mov bl, [d]
11335  4C50 A7 00         mov bh, 0
11336  4C52             ; START RELATIONAL
11337  4C52 D7            push a
11338  4C53 11            mov a, b
11339  4C54 26 00 00      mov b, $0
11340  4C57 B0            cmp a, b
11341  4C58 FD 74         sle ; <= (signed)
11342  4C5A E4            pop a
11343  4C5B             ; END RELATIONAL
11344  4C5B             ; START LOGICAL AND
11345  4C5B D7            push a
11346  4C5C 11            mov a, b
11347  4C5D 3B 7C 68      mov d, _klingons_left ; $klingons_left
11348  4C60 32            mov bl, [d]
11349  4C61 A7 00         mov bh, 0
11350  4C63             ; START RELATIONAL
11351  4C63 D7            push a
11352  4C64 11            mov a, b
11353  4C65 3B A2 68      mov d, _stardate ; $stardate
11354  4C68 2A            mov b, [d]
11355  4C69 FD AB         swp b
11356  4C6B D8            push b
11357  4C6C 07 B4 22      call FROM_FIXED
11358  4C6F 51 02 00      add sp, 2
11359  4C72             ; START TERMS
11360  4C72 D7            push a
11361  4C73 11            mov a, b
11362  4C74 3B 86 68      mov d, _time_start ; $time_start
11363  4C77 2A            mov b, [d]
11364  4C78 60            sub a, b
11365  4C79 27            mov b, a
11366  4C7A 11            mov a, b
11367  4C7B 3B 88 68      mov d, _time_up ; $time_up
11368  4C7E 2A            mov b, [d]
11369  4C7F 60            sub a, b
11370  4C80 27            mov b, a
11371  4C81 E4            pop a
11372  4C82             ; END TERMS
11373  4C82 B0            cmp a, b
11374  4C83 FD 76         sleu ; <= (unsigned)
11375  4C85 E4            pop a
11376  4C86             ; END RELATIONAL
11377  4C86 FD A7         sand a, b
11378  4C88 E4            pop a
11379  4C89             ; END LOGICAL AND
11380  4C89 C0 00 00      cmp b, 0
11381  4C8C C6 C5 4C      je _if173_exit
11382  4C8F             _if173_true:
11383  4C8F             ; puts("That does it, Captain!!"); 
11384  4C8F 26 8B 75      mov b, _s119 ; "That does it, Captain!!"
11385  4C92 FD AB         swp b
11386  4C94 D8            push b
11387  4C95 07 B8 1A      call puts
11388  4C98 51 02 00      add sp, 2
11389  4C9B             ; puts("You are hereby relieved of command\n"); 
11390  4C9B 26 A3 75      mov b, _s120 ; "You are hereby relieved of command\n"
11391  4C9E FD AB         swp b
11392  4CA0 D8            push b
11393  4CA1 07 B8 1A      call puts
11394  4CA4 51 02 00      add sp, 2
11395  4CA7             ; puts("and sentenced to 99 stardates of hard"); 
11396  4CA7 26 C7 75      mov b, _s121 ; "and sentenced to 99 stardates of hard"
11397  4CAA FD AB         swp b
11398  4CAC D8            push b
11399  4CAD 07 B8 1A      call puts
11400  4CB0 51 02 00      add sp, 2
11401  4CB3             ; puts("labor on Cygnus 12!!\n"); 
11402  4CB3 26 ED 75      mov b, _s122 ; "labor on Cygnus 12!!\n"
11403  4CB6 FD AB         swp b
11404  4CB8 D8            push b
11405  4CB9 07 B8 1A      call puts
11406  4CBC 51 02 00      add sp, 2
11407  4CBF             ; resign_commision(); 
11408  4CBF 07 0D 5C      call resign_commision
11409  4CC2 0A C5 4C      jmp _if173_exit
11410  4CC5             _if173_exit:
11411  4CC5             ; puts("Starfleet Command reviewing your record to consider\n court martial!\n"); 
11412  4CC5 26 03 76      mov b, _s123 ; "Starfleet Command reviewing your record to consider\n court martial!\n"
11413  4CC8 FD AB         swp b
11414  4CCA D8            push b
11415  4CCB 07 B8 1A      call puts
11416  4CCE 51 02 00      add sp, 2
11417  4CD1             ; docked = 0;		/* Undock */ 
11418  4CD1 3B C7 67      mov d, _docked ; $docked
11419  4CD4 DA            push d
11420  4CD5 26 00 00      mov b, $0
11421  4CD8 E7            pop d
11422  4CD9 FD 3E         mov [d], bl
11423  4CDB             ; map[quad_y][quad_x] =map[quad_y][quad_x] - 0x10; 
11424  4CDB 3B CC 67      mov d, _map_data ; $map
11425  4CDE D7            push a
11426  4CDF DA            push d
11427  4CE0 3B 7F 68      mov d, _quad_y ; $quad_y
11428  4CE3 2A            mov b, [d]
11429  4CE4 E7            pop d
11430  4CE5 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
11431  4CE9 DA            push d
11432  4CEA 3B 81 68      mov d, _quad_x ; $quad_x
11433  4CED 2A            mov b, [d]
11434  4CEE E7            pop d
11435  4CEF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
11436  4CF3 E4            pop a
11437  4CF4 DA            push d
11438  4CF5 3B CC 67      mov d, _map_data ; $map
11439  4CF8 D7            push a
11440  4CF9 DA            push d
11441  4CFA 3B 7F 68      mov d, _quad_y ; $quad_y
11442  4CFD 2A            mov b, [d]
11443  4CFE E7            pop d
11444  4CFF FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
11445  4D03 DA            push d
11446  4D04 3B 81 68      mov d, _quad_x ; $quad_x
11447  4D07 2A            mov b, [d]
11448  4D08 E7            pop d
11449  4D09 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
11450  4D0D E4            pop a
11451  4D0E 2A            mov b, [d]
11452  4D0F             ; START TERMS
11453  4D0F D7            push a
11454  4D10 11            mov a, b
11455  4D11 26 10 00      mov b, $10
11456  4D14 60            sub a, b
11457  4D15 27            mov b, a
11458  4D16 E4            pop a
11459  4D17             ; END TERMS
11460  4D17 E7            pop d
11461  4D18 FD 43         mov [d], b
11462  4D1A             ; break; 
11463  4D1A 0A 1D 4D      jmp _switch169_exit ; case break
11464  4D1D             _switch169_exit:
11465  4D1D             ; quad[yp-1][xp-1] =  		0      ; 
11466  4D1D 3B A4 68      mov d, _quad_data ; $quad
11467  4D20 D7            push a
11468  4D21 DA            push d
11469  4D22 FA 05 00      lea d, [bp + 5] ; $yp
11470  4D25 32            mov bl, [d]
11471  4D26 A7 00         mov bh, 0
11472  4D28             ; START TERMS
11473  4D28 D7            push a
11474  4D29 11            mov a, b
11475  4D2A 26 01 00      mov b, $1
11476  4D2D 60            sub a, b
11477  4D2E 27            mov b, a
11478  4D2F E4            pop a
11479  4D30             ; END TERMS
11480  4D30 E7            pop d
11481  4D31 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
11482  4D35 DA            push d
11483  4D36 FA 06 00      lea d, [bp + 6] ; $xp
11484  4D39 32            mov bl, [d]
11485  4D3A A7 00         mov bh, 0
11486  4D3C             ; START TERMS
11487  4D3C D7            push a
11488  4D3D 11            mov a, b
11489  4D3E 26 01 00      mov b, $1
11490  4D41 60            sub a, b
11491  4D42 27            mov b, a
11492  4D43 E4            pop a
11493  4D44             ; END TERMS
11494  4D44 E7            pop d
11495  4D45 5A            add d, b
11496  4D46 E4            pop a
11497  4D47 DA            push d
11498  4D48 26 00 00      mov b, $0
11499  4D4B E7            pop d
11500  4D4C FD 3E         mov [d], bl
11501  4D4E F9            leave
11502  4D4F 09            ret
11503  4D50             
11504  4D50             damage_control:
11505  4D50 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11506  4D53             ; int       repair_cost = 0; 
11507  4D53 52 02 00      sub sp, 2
11508  4D56             ; --- START LOCAL VAR INITIALIZATION
11509  4D56 FA FF FF      lea d, [bp + -1] ; $repair_cost
11510  4D59 DA            push d
11511  4D5A 26 00 00      mov b, $0
11512  4D5D E7            pop d
11513  4D5E FD 43         mov [d], b
11514  4D60             ; --- END LOCAL VAR INITIALIZATION
11515  4D60             ; int i; 
11516  4D60 52 02 00      sub sp, 2
11517  4D63             ; if (damage[6] < 0) 
11518  4D63             _if174_cond:
11519  4D63 3B 8A 68      mov d, _damage_data ; $damage
11520  4D66 D7            push a
11521  4D67 DA            push d
11522  4D68 26 06 00      mov b, $6
11523  4D6B E7            pop d
11524  4D6C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
11525  4D70 E4            pop a
11526  4D71 2A            mov b, [d]
11527  4D72             ; START RELATIONAL
11528  4D72 D7            push a
11529  4D73 11            mov a, b
11530  4D74 26 00 00      mov b, $0
11531  4D77 B0            cmp a, b
11532  4D78 FD 73         slt ; < (signed)
11533  4D7A E4            pop a
11534  4D7B             ; END RELATIONAL
11535  4D7B C0 00 00      cmp b, 0
11536  4D7E C6 90 4D      je _if174_exit
11537  4D81             _if174_true:
11538  4D81             ; puts("Damage Control report not available."); 
11539  4D81 26 48 76      mov b, _s124 ; "Damage Control report not available."
11540  4D84 FD AB         swp b
11541  4D86 D8            push b
11542  4D87 07 B8 1A      call puts
11543  4D8A 51 02 00      add sp, 2
11544  4D8D 0A 90 4D      jmp _if174_exit
11545  4D90             _if174_exit:
11546  4D90             ; if (docked) { 
11547  4D90             _if175_cond:
11548  4D90 3B C7 67      mov d, _docked ; $docked
11549  4D93 32            mov bl, [d]
11550  4D94 A7 00         mov bh, 0
11551  4D96 C0 00 00      cmp b, 0
11552  4D99 C6 0C 4F      je _if175_exit
11553  4D9C             _if175_true:
11554  4D9C             ; repair_cost = 0; 
11555  4D9C FA FF FF      lea d, [bp + -1] ; $repair_cost
11556  4D9F DA            push d
11557  4DA0 26 00 00      mov b, $0
11558  4DA3 E7            pop d
11559  4DA4 FD 43         mov [d], b
11560  4DA6             ; for (i = 1; i <= 8; i++) 
11561  4DA6             _for176_init:
11562  4DA6 FA FD FF      lea d, [bp + -3] ; $i
11563  4DA9 DA            push d
11564  4DAA 26 01 00      mov b, $1
11565  4DAD E7            pop d
11566  4DAE FD 43         mov [d], b
11567  4DB0             _for176_cond:
11568  4DB0 FA FD FF      lea d, [bp + -3] ; $i
11569  4DB3 2A            mov b, [d]
11570  4DB4             ; START RELATIONAL
11571  4DB4 D7            push a
11572  4DB5 11            mov a, b
11573  4DB6 26 08 00      mov b, $8
11574  4DB9 B0            cmp a, b
11575  4DBA FD 74         sle ; <= (signed)
11576  4DBC E4            pop a
11577  4DBD             ; END RELATIONAL
11578  4DBD C0 00 00      cmp b, 0
11579  4DC0 C6 07 4E      je _for176_exit
11580  4DC3             _for176_block:
11581  4DC3             ; if (damage[i] < 0) 
11582  4DC3             _if177_cond:
11583  4DC3 3B 8A 68      mov d, _damage_data ; $damage
11584  4DC6 D7            push a
11585  4DC7 DA            push d
11586  4DC8 FA FD FF      lea d, [bp + -3] ; $i
11587  4DCB 2A            mov b, [d]
11588  4DCC E7            pop d
11589  4DCD FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
11590  4DD1 E4            pop a
11591  4DD2 2A            mov b, [d]
11592  4DD3             ; START RELATIONAL
11593  4DD3 D7            push a
11594  4DD4 11            mov a, b
11595  4DD5 26 00 00      mov b, $0
11596  4DD8 B0            cmp a, b
11597  4DD9 FD 73         slt ; < (signed)
11598  4DDB E4            pop a
11599  4DDC             ; END RELATIONAL
11600  4DDC C0 00 00      cmp b, 0
11601  4DDF C6 F7 4D      je _if177_exit
11602  4DE2             _if177_true:
11603  4DE2             ; repair_cost = repair_cost + 10; 
11604  4DE2 FA FF FF      lea d, [bp + -1] ; $repair_cost
11605  4DE5 DA            push d
11606  4DE6 FA FF FF      lea d, [bp + -1] ; $repair_cost
11607  4DE9 2A            mov b, [d]
11608  4DEA             ; START TERMS
11609  4DEA D7            push a
11610  4DEB 11            mov a, b
11611  4DEC 26 0A 00      mov b, $a
11612  4DEF 56            add b, a
11613  4DF0 E4            pop a
11614  4DF1             ; END TERMS
11615  4DF1 E7            pop d
11616  4DF2 FD 43         mov [d], b
11617  4DF4 0A F7 4D      jmp _if177_exit
11618  4DF7             _if177_exit:
11619  4DF7             _for176_update:
11620  4DF7 FA FD FF      lea d, [bp + -3] ; $i
11621  4DFA 2A            mov b, [d]
11622  4DFB FD 77         inc b
11623  4DFD FA FD FF      lea d, [bp + -3] ; $i
11624  4E00 FD 43         mov [d], b
11625  4E02 FD 7D         dec b
11626  4E04 0A B0 4D      jmp _for176_cond
11627  4E07             _for176_exit:
11628  4E07             ; if (repair_cost) { 
11629  4E07             _if178_cond:
11630  4E07 FA FF FF      lea d, [bp + -1] ; $repair_cost
11631  4E0A 2A            mov b, [d]
11632  4E0B C0 00 00      cmp b, 0
11633  4E0E C6 09 4F      je _if178_exit
11634  4E11             _if178_true:
11635  4E11             ; repair_cost = repair_cost + d4; 
11636  4E11 FA FF FF      lea d, [bp + -1] ; $repair_cost
11637  4E14 DA            push d
11638  4E15 FA FF FF      lea d, [bp + -1] ; $repair_cost
11639  4E18 2A            mov b, [d]
11640  4E19             ; START TERMS
11641  4E19 D7            push a
11642  4E1A 11            mov a, b
11643  4E1B 3B 9C 68      mov d, _d4 ; $d4
11644  4E1E 2A            mov b, [d]
11645  4E1F 56            add b, a
11646  4E20 E4            pop a
11647  4E21             ; END TERMS
11648  4E21 E7            pop d
11649  4E22 FD 43         mov [d], b
11650  4E24             ; if (repair_cost >= 100) 
11651  4E24             _if179_cond:
11652  4E24 FA FF FF      lea d, [bp + -1] ; $repair_cost
11653  4E27 2A            mov b, [d]
11654  4E28             ; START RELATIONAL
11655  4E28 D7            push a
11656  4E29 11            mov a, b
11657  4E2A 26 64 00      mov b, $64
11658  4E2D B0            cmp a, b
11659  4E2E FD 80         sge ; >=
11660  4E30 E4            pop a
11661  4E31             ; END RELATIONAL
11662  4E31 C0 00 00      cmp b, 0
11663  4E34 C6 44 4E      je _if179_exit
11664  4E37             _if179_true:
11665  4E37             ; repair_cost = 90;	/* 0.9 */ 
11666  4E37 FA FF FF      lea d, [bp + -1] ; $repair_cost
11667  4E3A DA            push d
11668  4E3B 26 5A 00      mov b, $5a
11669  4E3E E7            pop d
11670  4E3F FD 43         mov [d], b
11671  4E41 0A 44 4E      jmp _if179_exit
11672  4E44             _if179_exit:
11673  4E44             ; printf("\nTechnicians standing by to effect repairs to your ship;\n"); 
11674  4E44 26 6D 76      mov b, _s125 ; "\nTechnicians standing by to effect repairs to your ship;\n"
11675  4E47 FD AB         swp b
11676  4E49 D8            push b
11677  4E4A 07 BA 07      call printf
11678  4E4D 51 02 00      add sp, 2
11679  4E50             ; printf("Estimated time to repair: %s stardates.\n Will you authorize the repair order (y/N)? ", print100(repair_cost)); 
11680  4E50 FA FF FF      lea d, [bp + -1] ; $repair_cost
11681  4E53 2A            mov b, [d]
11682  4E54 FD AB         swp b
11683  4E56 D8            push b
11684  4E57 07 DA 25      call print100
11685  4E5A 51 02 00      add sp, 2
11686  4E5D FD AB         swp b
11687  4E5F D8            push b
11688  4E60 26 A7 76      mov b, _s126 ; "Estimated time to repair: %s stardates.\n Will you authorize the repair order (y/N)? "
11689  4E63 FD AB         swp b
11690  4E65 D8            push b
11691  4E66 07 BA 07      call printf
11692  4E69 51 04 00      add sp, 4
11693  4E6C             ; if (yesno()) { 
11694  4E6C             _if180_cond:
11695  4E6C 07 CE 23      call yesno
11696  4E6F C0 00 00      cmp b, 0
11697  4E72 C6 04 4F      je _if180_exit
11698  4E75             _if180_true:
11699  4E75             ; for (i = 1; i <= 8; i++) 
11700  4E75             _for181_init:
11701  4E75 FA FD FF      lea d, [bp + -3] ; $i
11702  4E78 DA            push d
11703  4E79 26 01 00      mov b, $1
11704  4E7C E7            pop d
11705  4E7D FD 43         mov [d], b
11706  4E7F             _for181_cond:
11707  4E7F FA FD FF      lea d, [bp + -3] ; $i
11708  4E82 2A            mov b, [d]
11709  4E83             ; START RELATIONAL
11710  4E83 D7            push a
11711  4E84 11            mov a, b
11712  4E85 26 08 00      mov b, $8
11713  4E88 B0            cmp a, b
11714  4E89 FD 74         sle ; <= (signed)
11715  4E8B E4            pop a
11716  4E8C             ; END RELATIONAL
11717  4E8C C0 00 00      cmp b, 0
11718  4E8F C6 DA 4E      je _for181_exit
11719  4E92             _for181_block:
11720  4E92             ; if (damage[i] < 0) 
11721  4E92             _if182_cond:
11722  4E92 3B 8A 68      mov d, _damage_data ; $damage
11723  4E95 D7            push a
11724  4E96 DA            push d
11725  4E97 FA FD FF      lea d, [bp + -3] ; $i
11726  4E9A 2A            mov b, [d]
11727  4E9B E7            pop d
11728  4E9C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
11729  4EA0 E4            pop a
11730  4EA1 2A            mov b, [d]
11731  4EA2             ; START RELATIONAL
11732  4EA2 D7            push a
11733  4EA3 11            mov a, b
11734  4EA4 26 00 00      mov b, $0
11735  4EA7 B0            cmp a, b
11736  4EA8 FD 73         slt ; < (signed)
11737  4EAA E4            pop a
11738  4EAB             ; END RELATIONAL
11739  4EAB C0 00 00      cmp b, 0
11740  4EAE C6 CA 4E      je _if182_exit
11741  4EB1             _if182_true:
11742  4EB1             ; damage[i] = 0; 
11743  4EB1 3B 8A 68      mov d, _damage_data ; $damage
11744  4EB4 D7            push a
11745  4EB5 DA            push d
11746  4EB6 FA FD FF      lea d, [bp + -3] ; $i
11747  4EB9 2A            mov b, [d]
11748  4EBA E7            pop d
11749  4EBB FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
11750  4EBF E4            pop a
11751  4EC0 DA            push d
11752  4EC1 26 00 00      mov b, $0
11753  4EC4 E7            pop d
11754  4EC5 FD 43         mov [d], b
11755  4EC7 0A CA 4E      jmp _if182_exit
11756  4ECA             _if182_exit:
11757  4ECA             _for181_update:
11758  4ECA FA FD FF      lea d, [bp + -3] ; $i
11759  4ECD 2A            mov b, [d]
11760  4ECE FD 77         inc b
11761  4ED0 FA FD FF      lea d, [bp + -3] ; $i
11762  4ED3 FD 43         mov [d], b
11763  4ED5 FD 7D         dec b
11764  4ED7 0A 7F 4E      jmp _for181_cond
11765  4EDA             _for181_exit:
11766  4EDA             ; stardate = stardate + (repair_cost + 5)/10 + 1; 
11767  4EDA 3B A2 68      mov d, _stardate ; $stardate
11768  4EDD DA            push d
11769  4EDE 3B A2 68      mov d, _stardate ; $stardate
11770  4EE1 2A            mov b, [d]
11771  4EE2             ; START TERMS
11772  4EE2 D7            push a
11773  4EE3 11            mov a, b
11774  4EE4 FA FF FF      lea d, [bp + -1] ; $repair_cost
11775  4EE7 2A            mov b, [d]
11776  4EE8             ; START TERMS
11777  4EE8 D7            push a
11778  4EE9 11            mov a, b
11779  4EEA 26 05 00      mov b, $5
11780  4EED 56            add b, a
11781  4EEE E4            pop a
11782  4EEF             ; END TERMS
11783  4EEF             ; START FACTORS
11784  4EEF D7            push a
11785  4EF0 11            mov a, b
11786  4EF1 26 0A 00      mov b, $a
11787  4EF4 AE            div a, b
11788  4EF5 27            mov b, a
11789  4EF6 E4            pop a
11790  4EF7             ; END FACTORS
11791  4EF7 56            add b, a
11792  4EF8 11            mov a, b
11793  4EF9 26 01 00      mov b, $1
11794  4EFC 56            add b, a
11795  4EFD E4            pop a
11796  4EFE             ; END TERMS
11797  4EFE E7            pop d
11798  4EFF FD 43         mov [d], b
11799  4F01 0A 04 4F      jmp _if180_exit
11800  4F04             _if180_exit:
11801  4F04             ; return; 
11802  4F04 F9            leave
11803  4F05 09            ret
11804  4F06 0A 09 4F      jmp _if178_exit
11805  4F09             _if178_exit:
11806  4F09 0A 0C 4F      jmp _if175_exit
11807  4F0C             _if175_exit:
11808  4F0C             ; if (damage[6] < 0) 
11809  4F0C             _if183_cond:
11810  4F0C 3B 8A 68      mov d, _damage_data ; $damage
11811  4F0F D7            push a
11812  4F10 DA            push d
11813  4F11 26 06 00      mov b, $6
11814  4F14 E7            pop d
11815  4F15 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
11816  4F19 E4            pop a
11817  4F1A 2A            mov b, [d]
11818  4F1B             ; START RELATIONAL
11819  4F1B D7            push a
11820  4F1C 11            mov a, b
11821  4F1D 26 00 00      mov b, $0
11822  4F20 B0            cmp a, b
11823  4F21 FD 73         slt ; < (signed)
11824  4F23 E4            pop a
11825  4F24             ; END RELATIONAL
11826  4F24 C0 00 00      cmp b, 0
11827  4F27 C6 2F 4F      je _if183_exit
11828  4F2A             _if183_true:
11829  4F2A             ; return; 
11830  4F2A F9            leave
11831  4F2B 09            ret
11832  4F2C 0A 2F 4F      jmp _if183_exit
11833  4F2F             _if183_exit:
11834  4F2F             ; puts("Device            State of Repair"); 
11835  4F2F 26 FC 76      mov b, _s127 ; "Device            State of Repair"
11836  4F32 FD AB         swp b
11837  4F34 D8            push b
11838  4F35 07 B8 1A      call puts
11839  4F38 51 02 00      add sp, 2
11840  4F3B             ; for (i = 1; i <= 8; i++) 
11841  4F3B             _for184_init:
11842  4F3B FA FD FF      lea d, [bp + -3] ; $i
11843  4F3E DA            push d
11844  4F3F 26 01 00      mov b, $1
11845  4F42 E7            pop d
11846  4F43 FD 43         mov [d], b
11847  4F45             _for184_cond:
11848  4F45 FA FD FF      lea d, [bp + -3] ; $i
11849  4F48 2A            mov b, [d]
11850  4F49             ; START RELATIONAL
11851  4F49 D7            push a
11852  4F4A 11            mov a, b
11853  4F4B 26 08 00      mov b, $8
11854  4F4E B0            cmp a, b
11855  4F4F FD 74         sle ; <= (signed)
11856  4F51 E4            pop a
11857  4F52             ; END RELATIONAL
11858  4F52 C0 00 00      cmp b, 0
11859  4F55 C6 A0 4F      je _for184_exit
11860  4F58             _for184_block:
11861  4F58             ; printf("%-25s%6s\n", get_device_name(i), print100(damage[i])); 
11862  4F58 3B 8A 68      mov d, _damage_data ; $damage
11863  4F5B D7            push a
11864  4F5C DA            push d
11865  4F5D FA FD FF      lea d, [bp + -3] ; $i
11866  4F60 2A            mov b, [d]
11867  4F61 E7            pop d
11868  4F62 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
11869  4F66 E4            pop a
11870  4F67 2A            mov b, [d]
11871  4F68 FD AB         swp b
11872  4F6A D8            push b
11873  4F6B 07 DA 25      call print100
11874  4F6E 51 02 00      add sp, 2
11875  4F71 FD AB         swp b
11876  4F73 D8            push b
11877  4F74 FA FD FF      lea d, [bp + -3] ; $i
11878  4F77 2A            mov b, [d]
11879  4F78 FD AB         swp b
11880  4F7A D8            push b
11881  4F7B 07 40 64      call get_device_name
11882  4F7E 51 02 00      add sp, 2
11883  4F81 FD AB         swp b
11884  4F83 D8            push b
11885  4F84 26 1E 77      mov b, _s128 ; "%-25s%6s\n"
11886  4F87 FD AB         swp b
11887  4F89 D8            push b
11888  4F8A 07 BA 07      call printf
11889  4F8D 51 06 00      add sp, 6
11890  4F90             _for184_update:
11891  4F90 FA FD FF      lea d, [bp + -3] ; $i
11892  4F93 2A            mov b, [d]
11893  4F94 FD 77         inc b
11894  4F96 FA FD FF      lea d, [bp + -3] ; $i
11895  4F99 FD 43         mov [d], b
11896  4F9B FD 7D         dec b
11897  4F9D 0A 45 4F      jmp _for184_cond
11898  4FA0             _for184_exit:
11899  4FA0             ; printf("\n"); 
11900  4FA0 26 28 77      mov b, _s129 ; "\n"
11901  4FA3 FD AB         swp b
11902  4FA5 D8            push b
11903  4FA6 07 BA 07      call printf
11904  4FA9 51 02 00      add sp, 2
11905  4FAC F9            leave
11906  4FAD 09            ret
11907  4FAE             
11908  4FAE             shield_control:
11909  4FAE F8 00 00      enter 0 ; (push bp; mov bp, sp)
11910  4FB1             ; int i; 
11911  4FB1 52 02 00      sub sp, 2
11912  4FB4             ; if (inoperable(7)) 
11913  4FB4             _if185_cond:
11914  4FB4 26 07 00      mov b, $7
11915  4FB7 DD            push bl
11916  4FB8 07 6C 26      call inoperable
11917  4FBB 51 01 00      add sp, 1
11918  4FBE C0 00 00      cmp b, 0
11919  4FC1 C6 C9 4F      je _if185_exit
11920  4FC4             _if185_true:
11921  4FC4             ; return; 
11922  4FC4 F9            leave
11923  4FC5 09            ret
11924  4FC6 0A C9 4F      jmp _if185_exit
11925  4FC9             _if185_exit:
11926  4FC9             ; printf("Energy available = %d\n\n Input number of units to shields: ", energy + shield); 
11927  4FC9 3B C8 67      mov d, _energy ; $energy
11928  4FCC 2A            mov b, [d]
11929  4FCD             ; START TERMS
11930  4FCD D7            push a
11931  4FCE 11            mov a, b
11932  4FCF 3B 83 68      mov d, _shield ; $shield
11933  4FD2 2A            mov b, [d]
11934  4FD3 56            add b, a
11935  4FD4 E4            pop a
11936  4FD5             ; END TERMS
11937  4FD5 FD AB         swp b
11938  4FD7 D8            push b
11939  4FD8 26 2A 77      mov b, _s130 ; "Energy available = %d\n\n Input number of units to shields: "
11940  4FDB FD AB         swp b
11941  4FDD D8            push b
11942  4FDE 07 BA 07      call printf
11943  4FE1 51 04 00      add sp, 4
11944  4FE4             ; i = input_int(); 
11945  4FE4 FA FF FF      lea d, [bp + -1] ; $i
11946  4FE7 DA            push d
11947  4FE8 07 90 25      call input_int
11948  4FEB E7            pop d
11949  4FEC FD 43         mov [d], b
11950  4FEE             ; if (i < 0 || shield == i) { 
11951  4FEE             _if186_cond:
11952  4FEE FA FF FF      lea d, [bp + -1] ; $i
11953  4FF1 2A            mov b, [d]
11954  4FF2             ; START RELATIONAL
11955  4FF2 D7            push a
11956  4FF3 11            mov a, b
11957  4FF4 26 00 00      mov b, $0
11958  4FF7 B0            cmp a, b
11959  4FF8 FD 73         slt ; < (signed)
11960  4FFA E4            pop a
11961  4FFB             ; END RELATIONAL
11962  4FFB             ; START LOGICAL OR
11963  4FFB D7            push a
11964  4FFC 11            mov a, b
11965  4FFD 3B 83 68      mov d, _shield ; $shield
11966  5000 2A            mov b, [d]
11967  5001             ; START RELATIONAL
11968  5001 D7            push a
11969  5002 11            mov a, b
11970  5003 FA FF FF      lea d, [bp + -1] ; $i
11971  5006 2A            mov b, [d]
11972  5007 B0            cmp a, b
11973  5008 FD 71         seq ; ==
11974  500A E4            pop a
11975  500B             ; END RELATIONAL
11976  500B FD A8         sor a, b ; ||
11977  500D E4            pop a
11978  500E             ; END LOGICAL OR
11979  500E C0 00 00      cmp b, 0
11980  5011 C6 25 50      je _if186_exit
11981  5014             _if186_true:
11982  5014             ; puts("<Shields Unchanged>\n"); 
11983  5014 26 65 77      mov b, _s131 ; "<Shields Unchanged>\n"
11984  5017 FD AB         swp b
11985  5019 D8            push b
11986  501A 07 B8 1A      call puts
11987  501D 51 02 00      add sp, 2
11988  5020             ; return; 
11989  5020 F9            leave
11990  5021 09            ret
11991  5022 0A 25 50      jmp _if186_exit
11992  5025             _if186_exit:
11993  5025             ; if (i >= energy + shield) { 
11994  5025             _if187_cond:
11995  5025 FA FF FF      lea d, [bp + -1] ; $i
11996  5028 2A            mov b, [d]
11997  5029             ; START RELATIONAL
11998  5029 D7            push a
11999  502A 11            mov a, b
12000  502B 3B C8 67      mov d, _energy ; $energy
12001  502E 2A            mov b, [d]
12002  502F             ; START TERMS
12003  502F D7            push a
12004  5030 11            mov a, b
12005  5031 3B 83 68      mov d, _shield ; $shield
12006  5034 2A            mov b, [d]
12007  5035 56            add b, a
12008  5036 E4            pop a
12009  5037             ; END TERMS
12010  5037 B0            cmp a, b
12011  5038 FD 80         sge ; >=
12012  503A E4            pop a
12013  503B             ; END RELATIONAL
12014  503B C0 00 00      cmp b, 0
12015  503E C6 50 50      je _if187_exit
12016  5041             _if187_true:
12017  5041             ; puts("Shield Control Reports:\n  This is not the Federation Treasury."); 
12018  5041 26 7A 77      mov b, _s132 ; "Shield Control Reports:\n  This is not the Federation Treasury."
12019  5044 FD AB         swp b
12020  5046 D8            push b
12021  5047 07 B8 1A      call puts
12022  504A 51 02 00      add sp, 2
12023  504D 0A 50 50      jmp _if187_exit
12024  5050             _if187_exit:
12025  5050             ; energy = energy + shield - i; 
12026  5050 3B C8 67      mov d, _energy ; $energy
12027  5053 DA            push d
12028  5054 3B C8 67      mov d, _energy ; $energy
12029  5057 2A            mov b, [d]
12030  5058             ; START TERMS
12031  5058 D7            push a
12032  5059 11            mov a, b
12033  505A 3B 83 68      mov d, _shield ; $shield
12034  505D 2A            mov b, [d]
12035  505E 56            add b, a
12036  505F 11            mov a, b
12037  5060 FA FF FF      lea d, [bp + -1] ; $i
12038  5063 2A            mov b, [d]
12039  5064 60            sub a, b
12040  5065 27            mov b, a
12041  5066 E4            pop a
12042  5067             ; END TERMS
12043  5067 E7            pop d
12044  5068 FD 43         mov [d], b
12045  506A             ; shield = i; 
12046  506A 3B 83 68      mov d, _shield ; $shield
12047  506D DA            push d
12048  506E FA FF FF      lea d, [bp + -1] ; $i
12049  5071 2A            mov b, [d]
12050  5072 E7            pop d
12051  5073 FD 43         mov [d], b
12052  5075             ; printf("Deflector Control Room report:\n  Shields now at %d units per your command.\n\n", shield); 
12053  5075 3B 83 68      mov d, _shield ; $shield
12054  5078 2A            mov b, [d]
12055  5079 FD AB         swp b
12056  507B D8            push b
12057  507C 26 B9 77      mov b, _s133 ; "Deflector Control Room report:\n  Shields now at %d units per your command.\n\n"
12058  507F FD AB         swp b
12059  5081 D8            push b
12060  5082 07 BA 07      call printf
12061  5085 51 04 00      add sp, 4
12062  5088 F9            leave
12063  5089 09            ret
12064  508A             
12065  508A             library_computer:
12066  508A F8 00 00      enter 0 ; (push bp; mov bp, sp)
12067  508D             ; if (inoperable(8)) 
12068  508D             _if188_cond:
12069  508D 26 08 00      mov b, $8
12070  5090 DD            push bl
12071  5091 07 6C 26      call inoperable
12072  5094 51 01 00      add sp, 1
12073  5097 C0 00 00      cmp b, 0
12074  509A C6 A2 50      je _if188_exit
12075  509D             _if188_true:
12076  509D             ; return; 
12077  509D F9            leave
12078  509E 09            ret
12079  509F 0A A2 50      jmp _if188_exit
12080  50A2             _if188_exit:
12081  50A2             ; puts("Computer active and awating command: "); 
12082  50A2 26 06 78      mov b, _s134 ; "Computer active and awating command: "
12083  50A5 FD AB         swp b
12084  50A7 D8            push b
12085  50A8 07 B8 1A      call puts
12086  50AB 51 02 00      add sp, 2
12087  50AE             ; switch(input_int()) { 
12088  50AE             _switch189_expr:
12089  50AE 07 90 25      call input_int
12090  50B1             _switch189_comparisons:
12091  50B1 C0 FF FF      cmp b, -1
12092  50B4 C6 E1 50      je _switch189_case0
12093  50B7 C0 00 00      cmp b, 0
12094  50BA C6 E4 50      je _switch189_case1
12095  50BD C0 01 00      cmp b, 1
12096  50C0 C6 EA 50      je _switch189_case2
12097  50C3 C0 02 00      cmp b, 2
12098  50C6 C6 F0 50      je _switch189_case3
12099  50C9 C0 03 00      cmp b, 3
12100  50CC C6 F6 50      je _switch189_case4
12101  50CF C0 04 00      cmp b, 4
12102  50D2 C6 FC 50      je _switch189_case5
12103  50D5 C0 05 00      cmp b, 5
12104  50D8 C6 02 51      je _switch189_case6
12105  50DB 0A 08 51      jmp _switch189_default
12106  50DE 0A 5C 51      jmp _switch189_exit
12107  50E1             _switch189_case0:
12108  50E1             ; break; 
12109  50E1 0A 5C 51      jmp _switch189_exit ; case break
12110  50E4             _switch189_case1:
12111  50E4             ; galactic_record(); 
12112  50E4 07 5E 51      call galactic_record
12113  50E7             ; break; 
12114  50E7 0A 5C 51      jmp _switch189_exit ; case break
12115  50EA             _switch189_case2:
12116  50EA             ; status_report(); 
12117  50EA 07 86 52      call status_report
12118  50ED             ; break; 
12119  50ED 0A 5C 51      jmp _switch189_exit ; case break
12120  50F0             _switch189_case3:
12121  50F0             ; torpedo_data(); 
12122  50F0 07 9F 53      call torpedo_data
12123  50F3             ; break; 
12124  50F3 0A 5C 51      jmp _switch189_exit ; case break
12125  50F6             _switch189_case4:
12126  50F6             ; nav_data(); 
12127  50F6 07 AB 54      call nav_data
12128  50F9             ; break; 
12129  50F9 0A 5C 51      jmp _switch189_exit ; case break
12130  50FC             _switch189_case5:
12131  50FC             ; dirdist_calc(); 
12132  50FC 07 0E 55      call dirdist_calc
12133  50FF             ; break; 
12134  50FF 0A 5C 51      jmp _switch189_exit ; case break
12135  5102             _switch189_case6:
12136  5102             ; galaxy_map(); 
12137  5102 07 93 56      call galaxy_map
12138  5105             ; break; 
12139  5105 0A 5C 51      jmp _switch189_exit ; case break
12140  5108             _switch189_default:
12141  5108             ; puts("Functions available from Library-Computer:\n\n"); 
12142  5108 26 2C 78      mov b, _s135 ; "Functions available from Library-Computer:\n\n"
12143  510B FD AB         swp b
12144  510D D8            push b
12145  510E 07 B8 1A      call puts
12146  5111 51 02 00      add sp, 2
12147  5114             ; puts("   0 = Cumulative Galactic Record\n"); 
12148  5114 26 59 78      mov b, _s136 ; "   0 = Cumulative Galactic Record\n"
12149  5117 FD AB         swp b
12150  5119 D8            push b
12151  511A 07 B8 1A      call puts
12152  511D 51 02 00      add sp, 2
12153  5120             ; puts("   1 = Status Report\n"); 
12154  5120 26 7C 78      mov b, _s137 ; "   1 = Status Report\n"
12155  5123 FD AB         swp b
12156  5125 D8            push b
12157  5126 07 B8 1A      call puts
12158  5129 51 02 00      add sp, 2
12159  512C             ; puts("   2 = Photon Torpedo Data\n"); 
12160  512C 26 92 78      mov b, _s138 ; "   2 = Photon Torpedo Data\n"
12161  512F FD AB         swp b
12162  5131 D8            push b
12163  5132 07 B8 1A      call puts
12164  5135 51 02 00      add sp, 2
12165  5138             ; puts("   3 = Starbase Nav Data\n"); 
12166  5138 26 AE 78      mov b, _s139 ; "   3 = Starbase Nav Data\n"
12167  513B FD AB         swp b
12168  513D D8            push b
12169  513E 07 B8 1A      call puts
12170  5141 51 02 00      add sp, 2
12171  5144             ; puts("   4 = Direction/Distance Calculator\n"); 
12172  5144 26 C8 78      mov b, _s140 ; "   4 = Direction/Distance Calculator\n"
12173  5147 FD AB         swp b
12174  5149 D8            push b
12175  514A 07 B8 1A      call puts
12176  514D 51 02 00      add sp, 2
12177  5150             ; puts("   5 = Galaxy Region Name Map\n"); 
12178  5150 26 EE 78      mov b, _s141 ; "   5 = Galaxy Region Name Map\n"
12179  5153 FD AB         swp b
12180  5155 D8            push b
12181  5156 07 B8 1A      call puts
12182  5159 51 02 00      add sp, 2
12183  515C             _switch189_exit:
12184  515C F9            leave
12185  515D 09            ret
12186  515E             
12187  515E             galactic_record:
12188  515E F8 00 00      enter 0 ; (push bp; mov bp, sp)
12189  5161             ; int i, j; 
12190  5161 52 02 00      sub sp, 2
12191  5164 52 02 00      sub sp, 2
12192  5167             ; printf("\n     Computer Record of Galaxy for Quadrant %d,%d\n\n", quad_y, quad_x); 
12193  5167 3B 81 68      mov d, _quad_x ; $quad_x
12194  516A 2A            mov b, [d]
12195  516B FD AB         swp b
12196  516D D8            push b
12197  516E 3B 7F 68      mov d, _quad_y ; $quad_y
12198  5171 2A            mov b, [d]
12199  5172 FD AB         swp b
12200  5174 D8            push b
12201  5175 26 0D 79      mov b, _s142 ; "\n     Computer Record of Galaxy for Quadrant %d,%d\n\n"
12202  5178 FD AB         swp b
12203  517A D8            push b
12204  517B 07 BA 07      call printf
12205  517E 51 06 00      add sp, 6
12206  5181             ; puts("     1     2     3     4     5     6     7     8"); 
12207  5181 26 42 79      mov b, _s143 ; "     1     2     3     4     5     6     7     8"
12208  5184 FD AB         swp b
12209  5186 D8            push b
12210  5187 07 B8 1A      call puts
12211  518A 51 02 00      add sp, 2
12212  518D             ; for (i = 1; i <= 8; i++) { 
12213  518D             _for190_init:
12214  518D FA FF FF      lea d, [bp + -1] ; $i
12215  5190 DA            push d
12216  5191 26 01 00      mov b, $1
12217  5194 E7            pop d
12218  5195 FD 43         mov [d], b
12219  5197             _for190_cond:
12220  5197 FA FF FF      lea d, [bp + -1] ; $i
12221  519A 2A            mov b, [d]
12222  519B             ; START RELATIONAL
12223  519B D7            push a
12224  519C 11            mov a, b
12225  519D 26 08 00      mov b, $8
12226  51A0 B0            cmp a, b
12227  51A1 FD 74         sle ; <= (signed)
12228  51A3 E4            pop a
12229  51A4             ; END RELATIONAL
12230  51A4 C0 00 00      cmp b, 0
12231  51A7 C6 71 52      je _for190_exit
12232  51AA             _for190_block:
12233  51AA             ; printf("%s%d", gr_1, i); 
12234  51AA FA FF FF      lea d, [bp + -1] ; $i
12235  51AD 2A            mov b, [d]
12236  51AE FD AB         swp b
12237  51B0 D8            push b
12238  51B1 3B 28 6A      mov d, _gr_1 ; $gr_1
12239  51B4 2A            mov b, [d]
12240  51B5 FD AB         swp b
12241  51B7 D8            push b
12242  51B8 26 73 79      mov b, _s144 ; "%s%d"
12243  51BB FD AB         swp b
12244  51BD D8            push b
12245  51BE 07 BA 07      call printf
12246  51C1 51 06 00      add sp, 6
12247  51C4             ; for (j = 1; j <= 8; j++) { 
12248  51C4             _for191_init:
12249  51C4 FA FD FF      lea d, [bp + -3] ; $j
12250  51C7 DA            push d
12251  51C8 26 01 00      mov b, $1
12252  51CB E7            pop d
12253  51CC FD 43         mov [d], b
12254  51CE             _for191_cond:
12255  51CE FA FD FF      lea d, [bp + -3] ; $j
12256  51D1 2A            mov b, [d]
12257  51D2             ; START RELATIONAL
12258  51D2 D7            push a
12259  51D3 11            mov a, b
12260  51D4 26 08 00      mov b, $8
12261  51D7 B0            cmp a, b
12262  51D8 FD 74         sle ; <= (signed)
12263  51DA E4            pop a
12264  51DB             ; END RELATIONAL
12265  51DB C0 00 00      cmp b, 0
12266  51DE C6 57 52      je _for191_exit
12267  51E1             _for191_block:
12268  51E1             ; printf("   "); 
12269  51E1 26 99 6B      mov b, _s25 ; "   "
12270  51E4 FD AB         swp b
12271  51E6 D8            push b
12272  51E7 07 BA 07      call printf
12273  51EA 51 02 00      add sp, 2
12274  51ED             ; if (map[i][j] &   0x1000		/* Set if this sector was mapped */          ) 
12275  51ED             _if192_cond:
12276  51ED 3B CC 67      mov d, _map_data ; $map
12277  51F0 D7            push a
12278  51F1 DA            push d
12279  51F2 FA FF FF      lea d, [bp + -1] ; $i
12280  51F5 2A            mov b, [d]
12281  51F6 E7            pop d
12282  51F7 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
12283  51FB DA            push d
12284  51FC FA FD FF      lea d, [bp + -3] ; $j
12285  51FF 2A            mov b, [d]
12286  5200 E7            pop d
12287  5201 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12288  5205 E4            pop a
12289  5206 2A            mov b, [d]
12290  5207 D7            push a
12291  5208 11            mov a, b
12292  5209 26 00 10      mov b, $1000
12293  520C FD 92         and b, a ; &
12294  520E E4            pop a
12295  520F C0 00 00      cmp b, 0
12296  5212 C6 3B 52      je _if192_else
12297  5215             _if192_true:
12298  5215             ; putbcd(map[i][j]); 
12299  5215 3B CC 67      mov d, _map_data ; $map
12300  5218 D7            push a
12301  5219 DA            push d
12302  521A FA FF FF      lea d, [bp + -1] ; $i
12303  521D 2A            mov b, [d]
12304  521E E7            pop d
12305  521F FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
12306  5223 DA            push d
12307  5224 FA FD FF      lea d, [bp + -3] ; $j
12308  5227 2A            mov b, [d]
12309  5228 E7            pop d
12310  5229 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
12311  522D E4            pop a
12312  522E 2A            mov b, [d]
12313  522F FD AB         swp b
12314  5231 D8            push b
12315  5232 07 E0 3F      call putbcd
12316  5235 51 02 00      add sp, 2
12317  5238 0A 47 52      jmp _if192_exit
12318  523B             _if192_else:
12319  523B             ; printf("***"); 
12320  523B 26 65 73      mov b, _s101 ; "***"
12321  523E FD AB         swp b
12322  5240 D8            push b
12323  5241 07 BA 07      call printf
12324  5244 51 02 00      add sp, 2
12325  5247             _if192_exit:
12326  5247             _for191_update:
12327  5247 FA FD FF      lea d, [bp + -3] ; $j
12328  524A 2A            mov b, [d]
12329  524B FD 77         inc b
12330  524D FA FD FF      lea d, [bp + -3] ; $j
12331  5250 FD 43         mov [d], b
12332  5252 FD 7D         dec b
12333  5254 0A CE 51      jmp _for191_cond
12334  5257             _for191_exit:
12335  5257             ; putchar('\n'); 
12336  5257 26 0A 00      mov b, $a
12337  525A DD            push bl
12338  525B 07 82 1A      call putchar
12339  525E 51 01 00      add sp, 1
12340  5261             _for190_update:
12341  5261 FA FF FF      lea d, [bp + -1] ; $i
12342  5264 2A            mov b, [d]
12343  5265 FD 77         inc b
12344  5267 FA FF FF      lea d, [bp + -1] ; $i
12345  526A FD 43         mov [d], b
12346  526C FD 7D         dec b
12347  526E 0A 97 51      jmp _for190_cond
12348  5271             _for190_exit:
12349  5271             ; printf("%s\n", gr_1); 
12350  5271 3B 28 6A      mov d, _gr_1 ; $gr_1
12351  5274 2A            mov b, [d]
12352  5275 FD AB         swp b
12353  5277 D8            push b
12354  5278 26 6C 73      mov b, _s103 ; "%s\n"
12355  527B FD AB         swp b
12356  527D D8            push b
12357  527E 07 BA 07      call printf
12358  5281 51 04 00      add sp, 4
12359  5284 F9            leave
12360  5285 09            ret
12361  5286             
12362  5286             status_report:
12363  5286 F8 00 00      enter 0 ; (push bp; mov bp, sp)
12364  5289             ; char *plural = str_s + 1; 
12365  5289 52 02 00      sub sp, 2
12366  528C             ; --- START LOCAL VAR INITIALIZATION
12367  528C FA FF FF      lea d, [bp + -1] ; $plural
12368  528F DA            push d
12369  5290 3B 2C 6A      mov d, _str_s ; $str_s
12370  5293 2A            mov b, [d]
12371  5294             ; START TERMS
12372  5294 D7            push a
12373  5295 11            mov a, b
12374  5296 26 01 00      mov b, $1
12375  5299 56            add b, a
12376  529A E4            pop a
12377  529B             ; END TERMS
12378  529B E7            pop d
12379  529C FD 43         mov [d], b
12380  529E             ; --- END LOCAL VAR INITIALIZATION
12381  529E             ; unsigned int        left = TO_FIXED(time_start + time_up) - stardate; 
12382  529E 52 02 00      sub sp, 2
12383  52A1             ; --- START LOCAL VAR INITIALIZATION
12384  52A1 FA FD FF      lea d, [bp + -3] ; $left
12385  52A4 DA            push d
12386  52A5 3B 86 68      mov d, _time_start ; $time_start
12387  52A8 2A            mov b, [d]
12388  52A9             ; START TERMS
12389  52A9 D7            push a
12390  52AA 11            mov a, b
12391  52AB 3B 88 68      mov d, _time_up ; $time_up
12392  52AE 2A            mov b, [d]
12393  52AF 56            add b, a
12394  52B0 E4            pop a
12395  52B1             ; END TERMS
12396  52B1 FD AB         swp b
12397  52B3 D8            push b
12398  52B4 07 A2 22      call TO_FIXED
12399  52B7 51 02 00      add sp, 2
12400  52BA             ; START TERMS
12401  52BA D7            push a
12402  52BB 11            mov a, b
12403  52BC 3B A2 68      mov d, _stardate ; $stardate
12404  52BF 2A            mov b, [d]
12405  52C0 60            sub a, b
12406  52C1 27            mov b, a
12407  52C2 E4            pop a
12408  52C3             ; END TERMS
12409  52C3 E7            pop d
12410  52C4 FD 43         mov [d], b
12411  52C6             ; --- END LOCAL VAR INITIALIZATION
12412  52C6             ; puts("   Status Report:\n"); 
12413  52C6 26 78 79      mov b, _s145 ; "   Status Report:\n"
12414  52C9 FD AB         swp b
12415  52CB D8            push b
12416  52CC 07 B8 1A      call puts
12417  52CF 51 02 00      add sp, 2
12418  52D2             ; if (klingons_left > 1) 
12419  52D2             _if193_cond:
12420  52D2 3B 7C 68      mov d, _klingons_left ; $klingons_left
12421  52D5 32            mov bl, [d]
12422  52D6 A7 00         mov bh, 0
12423  52D8             ; START RELATIONAL
12424  52D8 D7            push a
12425  52D9 11            mov a, b
12426  52DA 26 01 00      mov b, $1
12427  52DD B0            cmp a, b
12428  52DE FD 81         sgu ; > (unsigned)
12429  52E0 E4            pop a
12430  52E1             ; END RELATIONAL
12431  52E1 C0 00 00      cmp b, 0
12432  52E4 C6 F5 52      je _if193_exit
12433  52E7             _if193_true:
12434  52E7             ; plural = str_s; 
12435  52E7 FA FF FF      lea d, [bp + -1] ; $plural
12436  52EA DA            push d
12437  52EB 3B 2C 6A      mov d, _str_s ; $str_s
12438  52EE 2A            mov b, [d]
12439  52EF E7            pop d
12440  52F0 FD 43         mov [d], b
12441  52F2 0A F5 52      jmp _if193_exit
12442  52F5             _if193_exit:
12443  52F5             ; printf("Klingon%s Left: %d\n Mission must be completed in %d.%d stardates\n", 
12444  52F5 FA FD FF      lea d, [bp + -3] ; $left
12445  52F8 2A            mov b, [d]
12446  52F9             ; START FACTORS
12447  52F9 D7            push a
12448  52FA 11            mov a, b
12449  52FB 26 0A 00      mov b, $a
12450  52FE AE            div a, b ; 
12451  52FF 11            mov a, b
12452  5300 27            mov b, a
12453  5301 E4            pop a
12454  5302             ; END FACTORS
12455  5302 FD AB         swp b
12456  5304 D8            push b
12457  5305 FA FD FF      lea d, [bp + -3] ; $left
12458  5308 2A            mov b, [d]
12459  5309 FD AB         swp b
12460  530B D8            push b
12461  530C 07 B4 22      call FROM_FIXED
12462  530F 51 02 00      add sp, 2
12463  5312 FD AB         swp b
12464  5314 D8            push b
12465  5315 3B 7C 68      mov d, _klingons_left ; $klingons_left
12466  5318 32            mov bl, [d]
12467  5319 A7 00         mov bh, 0
12468  531B DD            push bl
12469  531C FA FF FF      lea d, [bp + -1] ; $plural
12470  531F 2A            mov b, [d]
12471  5320 FD AB         swp b
12472  5322 D8            push b
12473  5323 26 8B 79      mov b, _s146 ; "Klingon%s Left: %d\n Mission must be completed in %d.%d stardates\n"
12474  5326 FD AB         swp b
12475  5328 D8            push b
12476  5329 07 BA 07      call printf
12477  532C 51 09 00      add sp, 9
12478  532F             ; if (starbases_left < 1) { 
12479  532F             _if194_cond:
12480  532F 3B A6 67      mov d, _starbases_left ; $starbases_left
12481  5332 32            mov bl, [d]
12482  5333 A7 00         mov bh, 0
12483  5335             ; START RELATIONAL
12484  5335 D7            push a
12485  5336 11            mov a, b
12486  5337 26 01 00      mov b, $1
12487  533A B0            cmp a, b
12488  533B FD 73         slt ; < (signed)
12489  533D E4            pop a
12490  533E             ; END RELATIONAL
12491  533E C0 00 00      cmp b, 0
12492  5341 C6 53 53      je _if194_else
12493  5344             _if194_true:
12494  5344             ; puts("Your stupidity has left you on your own in the galaxy\n -- you have no starbases left!\n"); 
12495  5344 26 CD 79      mov b, _s147 ; "Your stupidity has left you on your own in the galaxy\n -- you have no starbases left!\n"
12496  5347 FD AB         swp b
12497  5349 D8            push b
12498  534A 07 B8 1A      call puts
12499  534D 51 02 00      add sp, 2
12500  5350 0A 9D 53      jmp _if194_exit
12501  5353             _if194_else:
12502  5353             ; plural = str_s; 
12503  5353 FA FF FF      lea d, [bp + -1] ; $plural
12504  5356 DA            push d
12505  5357 3B 2C 6A      mov d, _str_s ; $str_s
12506  535A 2A            mov b, [d]
12507  535B E7            pop d
12508  535C FD 43         mov [d], b
12509  535E             ; if (starbases_left < 2) 
12510  535E             _if195_cond:
12511  535E 3B A6 67      mov d, _starbases_left ; $starbases_left
12512  5361 32            mov bl, [d]
12513  5362 A7 00         mov bh, 0
12514  5364             ; START RELATIONAL
12515  5364 D7            push a
12516  5365 11            mov a, b
12517  5366 26 02 00      mov b, $2
12518  5369 B0            cmp a, b
12519  536A FD 73         slt ; < (signed)
12520  536C E4            pop a
12521  536D             ; END RELATIONAL
12522  536D C0 00 00      cmp b, 0
12523  5370 C6 83 53      je _if195_exit
12524  5373             _if195_true:
12525  5373             ; plural++; 
12526  5373 FA FF FF      lea d, [bp + -1] ; $plural
12527  5376 2A            mov b, [d]
12528  5377 FD 77         inc b
12529  5379 FA FF FF      lea d, [bp + -1] ; $plural
12530  537C FD 43         mov [d], b
12531  537E FD 7D         dec b
12532  5380 0A 83 53      jmp _if195_exit
12533  5383             _if195_exit:
12534  5383             ; printf("The Federation is maintaining %d starbase%s in the galaxy\n\n", starbases_left, plural); 
12535  5383 FA FF FF      lea d, [bp + -1] ; $plural
12536  5386 2A            mov b, [d]
12537  5387 FD AB         swp b
12538  5389 D8            push b
12539  538A 3B A6 67      mov d, _starbases_left ; $starbases_left
12540  538D 32            mov bl, [d]
12541  538E A7 00         mov bh, 0
12542  5390 DD            push bl
12543  5391 26 24 7A      mov b, _s148 ; "The Federation is maintaining %d starbase%s in the galaxy\n\n"
12544  5394 FD AB         swp b
12545  5396 D8            push b
12546  5397 07 BA 07      call printf
12547  539A 51 05 00      add sp, 5
12548  539D             _if194_exit:
12549  539D F9            leave
12550  539E 09            ret
12551  539F             
12552  539F             torpedo_data:
12553  539F F8 00 00      enter 0 ; (push bp; mov bp, sp)
12554  53A2             ; int i; 
12555  53A2 52 02 00      sub sp, 2
12556  53A5             ; const char *plural = str_s + 1; 
12557  53A5 52 02 00      sub sp, 2
12558  53A8             ; --- START LOCAL VAR INITIALIZATION
12559  53A8 FA FD FF      lea d, [bp + -3] ; $plural
12560  53AB DA            push d
12561  53AC 3B 2C 6A      mov d, _str_s ; $str_s
12562  53AF 2A            mov b, [d]
12563  53B0             ; START TERMS
12564  53B0 D7            push a
12565  53B1 11            mov a, b
12566  53B2 26 01 00      mov b, $1
12567  53B5 56            add b, a
12568  53B6 E4            pop a
12569  53B7             ; END TERMS
12570  53B7 E7            pop d
12571  53B8 FD 43         mov [d], b
12572  53BA             ; --- END LOCAL VAR INITIALIZATION
12573  53BA             ; struct klingon *k; 
12574  53BA 52 02 00      sub sp, 2
12575  53BD             ; if (no_klingon()) 
12576  53BD             _if196_cond:
12577  53BD 07 CC 41      call no_klingon
12578  53C0 C0 00 00      cmp b, 0
12579  53C3 C6 CB 53      je _if196_exit
12580  53C6             _if196_true:
12581  53C6             ; return; 
12582  53C6 F9            leave
12583  53C7 09            ret
12584  53C8 0A CB 53      jmp _if196_exit
12585  53CB             _if196_exit:
12586  53CB             ; if (klingons > 1) 
12587  53CB             _if197_cond:
12588  53CB 3B 7A 68      mov d, _klingons ; $klingons
12589  53CE 32            mov bl, [d]
12590  53CF A7 00         mov bh, 0
12591  53D1             ; START RELATIONAL
12592  53D1 D7            push a
12593  53D2 11            mov a, b
12594  53D3 26 01 00      mov b, $1
12595  53D6 B0            cmp a, b
12596  53D7 FD 81         sgu ; > (unsigned)
12597  53D9 E4            pop a
12598  53DA             ; END RELATIONAL
12599  53DA C0 00 00      cmp b, 0
12600  53DD C6 F0 53      je _if197_exit
12601  53E0             _if197_true:
12602  53E0             ; plural--; 
12603  53E0 FA FD FF      lea d, [bp + -3] ; $plural
12604  53E3 2A            mov b, [d]
12605  53E4 FD 7D         dec b
12606  53E6 FA FD FF      lea d, [bp + -3] ; $plural
12607  53E9 FD 43         mov [d], b
12608  53EB FD 77         inc b
12609  53ED 0A F0 53      jmp _if197_exit
12610  53F0             _if197_exit:
12611  53F0             ; printf("From Enterprise to Klingon battlecriuser%s:\n\n", plural); 
12612  53F0 FA FD FF      lea d, [bp + -3] ; $plural
12613  53F3 2A            mov b, [d]
12614  53F4 FD AB         swp b
12615  53F6 D8            push b
12616  53F7 26 60 7A      mov b, _s149 ; "From Enterprise to Klingon battlecriuser%s:\n\n"
12617  53FA FD AB         swp b
12618  53FC D8            push b
12619  53FD 07 BA 07      call printf
12620  5400 51 04 00      add sp, 4
12621  5403             ; k = kdata; 
12622  5403 FA FB FF      lea d, [bp + -5] ; $k
12623  5406 DA            push d
12624  5407 3B 6E 68      mov d, _kdata_data ; $kdata
12625  540A 2D            mov b, d
12626  540B E7            pop d
12627  540C FD 43         mov [d], b
12628  540E             ; for (i = 0; i <= 2; i++) { 
12629  540E             _for198_init:
12630  540E FA FF FF      lea d, [bp + -1] ; $i
12631  5411 DA            push d
12632  5412 26 00 00      mov b, $0
12633  5415 E7            pop d
12634  5416 FD 43         mov [d], b
12635  5418             _for198_cond:
12636  5418 FA FF FF      lea d, [bp + -1] ; $i
12637  541B 2A            mov b, [d]
12638  541C             ; START RELATIONAL
12639  541C D7            push a
12640  541D 11            mov a, b
12641  541E 26 02 00      mov b, $2
12642  5421 B0            cmp a, b
12643  5422 FD 74         sle ; <= (signed)
12644  5424 E4            pop a
12645  5425             ; END RELATIONAL
12646  5425 C0 00 00      cmp b, 0
12647  5428 C6 A9 54      je _for198_exit
12648  542B             _for198_block:
12649  542B             ; if (k->energy > 0) { 
12650  542B             _if199_cond:
12651  542B FA FB FF      lea d, [bp + -5] ; $k
12652  542E FD 2A         mov d, [d]
12653  5430 58 02 00      add d, 2
12654  5433 2A            mov b, [d]
12655  5434             ; START RELATIONAL
12656  5434 D7            push a
12657  5435 11            mov a, b
12658  5436 26 00 00      mov b, $0
12659  5439 B0            cmp a, b
12660  543A FD 7F         sgt ; >
12661  543C E4            pop a
12662  543D             ; END RELATIONAL
12663  543D C0 00 00      cmp b, 0
12664  5440 C6 88 54      je _if199_exit
12665  5443             _if199_true:
12666  5443             ; compute_vector(TO_FIXED00(k->y), 
12667  5443 3B A0 68      mov d, _ship_x ; $ship_x
12668  5446 2A            mov b, [d]
12669  5447 FD AB         swp b
12670  5449 D8            push b
12671  544A 3B 9E 68      mov d, _ship_y ; $ship_y
12672  544D 2A            mov b, [d]
12673  544E FD AB         swp b
12674  5450 D8            push b
12675  5451 FA FB FF      lea d, [bp + -5] ; $k
12676  5454 FD 2A         mov d, [d]
12677  5456 58 01 00      add d, 1
12678  5459 32            mov bl, [d]
12679  545A A7 00         mov bh, 0
12680  545C FD AB         swp b
12681  545E D8            push b
12682  545F 07 C5 22      call TO_FIXED00
12683  5462 51 02 00      add sp, 2
12684  5465 FD AB         swp b
12685  5467 D8            push b
12686  5468 FA FB FF      lea d, [bp + -5] ; $k
12687  546B FD 2A         mov d, [d]
12688  546D 58 00 00      add d, 0
12689  5470 32            mov bl, [d]
12690  5471 A7 00         mov bh, 0
12691  5473 FD AB         swp b
12692  5475 D8            push b
12693  5476 07 C5 22      call TO_FIXED00
12694  5479 51 02 00      add sp, 2
12695  547C FD AB         swp b
12696  547E D8            push b
12697  547F 07 6B 58      call compute_vector
12698  5482 51 08 00      add sp, 8
12699  5485 0A 88 54      jmp _if199_exit
12700  5488             _if199_exit:
12701  5488             ; k++; 
12702  5488 FA FB FF      lea d, [bp + -5] ; $k
12703  548B 2A            mov b, [d]
12704  548C FD 77         inc b
12705  548E FD 77         inc b
12706  5490 FA FB FF      lea d, [bp + -5] ; $k
12707  5493 FD 43         mov [d], b
12708  5495 FD 7D         dec b
12709  5497 FD 7D         dec b
12710  5499             _for198_update:
12711  5499 FA FF FF      lea d, [bp + -1] ; $i
12712  549C 2A            mov b, [d]
12713  549D FD 77         inc b
12714  549F FA FF FF      lea d, [bp + -1] ; $i
12715  54A2 FD 43         mov [d], b
12716  54A4 FD 7D         dec b
12717  54A6 0A 18 54      jmp _for198_cond
12718  54A9             _for198_exit:
12719  54A9 F9            leave
12720  54AA 09            ret
12721  54AB             
12722  54AB             nav_data:
12723  54AB F8 00 00      enter 0 ; (push bp; mov bp, sp)
12724  54AE             ; if (starbases <= 0) { 
12725  54AE             _if200_cond:
12726  54AE 3B A3 67      mov d, _starbases ; $starbases
12727  54B1 32            mov bl, [d]
12728  54B2 A7 00         mov bh, 0
12729  54B4             ; START RELATIONAL
12730  54B4 D7            push a
12731  54B5 11            mov a, b
12732  54B6 26 00 00      mov b, $0
12733  54B9 B0            cmp a, b
12734  54BA FD 74         sle ; <= (signed)
12735  54BC E4            pop a
12736  54BD             ; END RELATIONAL
12737  54BD C0 00 00      cmp b, 0
12738  54C0 C6 D4 54      je _if200_exit
12739  54C3             _if200_true:
12740  54C3             ; puts("Mr. Spock reports,\n  Sensors show no starbases in this quadrant.\n"); 
12741  54C3 26 8E 7A      mov b, _s150 ; "Mr. Spock reports,\n  Sensors show no starbases in this quadrant.\n"
12742  54C6 FD AB         swp b
12743  54C8 D8            push b
12744  54C9 07 B8 1A      call puts
12745  54CC 51 02 00      add sp, 2
12746  54CF             ; return; 
12747  54CF F9            leave
12748  54D0 09            ret
12749  54D1 0A D4 54      jmp _if200_exit
12750  54D4             _if200_exit:
12751  54D4             ; compute_vector(TO_FIXED00(base_y), TO_FIXED00(base_x), ship_y, ship_x); 
12752  54D4 3B A0 68      mov d, _ship_x ; $ship_x
12753  54D7 2A            mov b, [d]
12754  54D8 FD AB         swp b
12755  54DA D8            push b
12756  54DB 3B 9E 68      mov d, _ship_y ; $ship_y
12757  54DE 2A            mov b, [d]
12758  54DF FD AB         swp b
12759  54E1 D8            push b
12760  54E2 3B A5 67      mov d, _base_x ; $base_x
12761  54E5 32            mov bl, [d]
12762  54E6 A7 00         mov bh, 0
12763  54E8 FD AB         swp b
12764  54EA D8            push b
12765  54EB 07 C5 22      call TO_FIXED00
12766  54EE 51 02 00      add sp, 2
12767  54F1 FD AB         swp b
12768  54F3 D8            push b
12769  54F4 3B A4 67      mov d, _base_y ; $base_y
12770  54F7 32            mov bl, [d]
12771  54F8 A7 00         mov bh, 0
12772  54FA FD AB         swp b
12773  54FC D8            push b
12774  54FD 07 C5 22      call TO_FIXED00
12775  5500 51 02 00      add sp, 2
12776  5503 FD AB         swp b
12777  5505 D8            push b
12778  5506 07 6B 58      call compute_vector
12779  5509 51 08 00      add sp, 8
12780  550C F9            leave
12781  550D 09            ret
12782  550E             
12783  550E             dirdist_calc:
12784  550E F8 00 00      enter 0 ; (push bp; mov bp, sp)
12785  5511             ; int       c1, a, w1, x; 
12786  5511 52 02 00      sub sp, 2
12787  5514 52 02 00      sub sp, 2
12788  5517 52 02 00      sub sp, 2
12789  551A 52 02 00      sub sp, 2
12790  551D             ; printf("Direction/Distance Calculator\n You are at quadrant %d,%d sector %d,%d\n\n Please enter initial X coordinate: ", 
12791  551D 3B A0 68      mov d, _ship_x ; $ship_x
12792  5520 2A            mov b, [d]
12793  5521 FD AB         swp b
12794  5523 D8            push b
12795  5524 07 D7 22      call FROM_FIXED00
12796  5527 51 02 00      add sp, 2
12797  552A FD AB         swp b
12798  552C D8            push b
12799  552D 3B 9E 68      mov d, _ship_y ; $ship_y
12800  5530 2A            mov b, [d]
12801  5531 FD AB         swp b
12802  5533 D8            push b
12803  5534 07 D7 22      call FROM_FIXED00
12804  5537 51 02 00      add sp, 2
12805  553A FD AB         swp b
12806  553C D8            push b
12807  553D 3B 81 68      mov d, _quad_x ; $quad_x
12808  5540 2A            mov b, [d]
12809  5541 FD AB         swp b
12810  5543 D8            push b
12811  5544 3B 7F 68      mov d, _quad_y ; $quad_y
12812  5547 2A            mov b, [d]
12813  5548 FD AB         swp b
12814  554A D8            push b
12815  554B 26 D0 7A      mov b, _s151 ; "Direction/Distance Calculator\n You are at quadrant %d,%d sector %d,%d\n\n Please enter initial X coordinate: "
12816  554E FD AB         swp b
12817  5550 D8            push b
12818  5551 07 BA 07      call printf
12819  5554 51 0A 00      add sp, 10
12820  5557             ; c1 = TO_FIXED00(input_int()); 
12821  5557 FA FF FF      lea d, [bp + -1] ; $c1
12822  555A DA            push d
12823  555B 07 90 25      call input_int
12824  555E FD AB         swp b
12825  5560 D8            push b
12826  5561 07 C5 22      call TO_FIXED00
12827  5564 51 02 00      add sp, 2
12828  5567 E7            pop d
12829  5568 FD 43         mov [d], b
12830  556A             ; if (c1 < 0 || c1 > 900 ) 
12831  556A             _if201_cond:
12832  556A FA FF FF      lea d, [bp + -1] ; $c1
12833  556D 2A            mov b, [d]
12834  556E             ; START RELATIONAL
12835  556E D7            push a
12836  556F 11            mov a, b
12837  5570 26 00 00      mov b, $0
12838  5573 B0            cmp a, b
12839  5574 FD 73         slt ; < (signed)
12840  5576 E4            pop a
12841  5577             ; END RELATIONAL
12842  5577             ; START LOGICAL OR
12843  5577 D7            push a
12844  5578 11            mov a, b
12845  5579 FA FF FF      lea d, [bp + -1] ; $c1
12846  557C 2A            mov b, [d]
12847  557D             ; START RELATIONAL
12848  557D D7            push a
12849  557E 11            mov a, b
12850  557F 26 84 03      mov b, $384
12851  5582 B0            cmp a, b
12852  5583 FD 7F         sgt ; >
12853  5585 E4            pop a
12854  5586             ; END RELATIONAL
12855  5586 FD A8         sor a, b ; ||
12856  5588 E4            pop a
12857  5589             ; END LOGICAL OR
12858  5589 C0 00 00      cmp b, 0
12859  558C C6 94 55      je _if201_exit
12860  558F             _if201_true:
12861  558F             ; return; 
12862  558F F9            leave
12863  5590 09            ret
12864  5591 0A 94 55      jmp _if201_exit
12865  5594             _if201_exit:
12866  5594             ; puts("Please enter initial Y coordinate: "); 
12867  5594 26 3C 7B      mov b, _s152 ; "Please enter initial Y coordinate: "
12868  5597 FD AB         swp b
12869  5599 D8            push b
12870  559A 07 B8 1A      call puts
12871  559D 51 02 00      add sp, 2
12872  55A0             ; a = TO_FIXED00(input_int()); 
12873  55A0 FA FD FF      lea d, [bp + -3] ; $a
12874  55A3 DA            push d
12875  55A4 07 90 25      call input_int
12876  55A7 FD AB         swp b
12877  55A9 D8            push b
12878  55AA 07 C5 22      call TO_FIXED00
12879  55AD 51 02 00      add sp, 2
12880  55B0 E7            pop d
12881  55B1 FD 43         mov [d], b
12882  55B3             ; if (a < 0 || a > 900) 
12883  55B3             _if202_cond:
12884  55B3 FA FD FF      lea d, [bp + -3] ; $a
12885  55B6 2A            mov b, [d]
12886  55B7             ; START RELATIONAL
12887  55B7 D7            push a
12888  55B8 11            mov a, b
12889  55B9 26 00 00      mov b, $0
12890  55BC B0            cmp a, b
12891  55BD FD 73         slt ; < (signed)
12892  55BF E4            pop a
12893  55C0             ; END RELATIONAL
12894  55C0             ; START LOGICAL OR
12895  55C0 D7            push a
12896  55C1 11            mov a, b
12897  55C2 FA FD FF      lea d, [bp + -3] ; $a
12898  55C5 2A            mov b, [d]
12899  55C6             ; START RELATIONAL
12900  55C6 D7            push a
12901  55C7 11            mov a, b
12902  55C8 26 84 03      mov b, $384
12903  55CB B0            cmp a, b
12904  55CC FD 7F         sgt ; >
12905  55CE E4            pop a
12906  55CF             ; END RELATIONAL
12907  55CF FD A8         sor a, b ; ||
12908  55D1 E4            pop a
12909  55D2             ; END LOGICAL OR
12910  55D2 C0 00 00      cmp b, 0
12911  55D5 C6 DD 55      je _if202_exit
12912  55D8             _if202_true:
12913  55D8             ; return; 
12914  55D8 F9            leave
12915  55D9 09            ret
12916  55DA 0A DD 55      jmp _if202_exit
12917  55DD             _if202_exit:
12918  55DD             ; puts("Please enter final X coordinate: "); 
12919  55DD 26 60 7B      mov b, _s153 ; "Please enter final X coordinate: "
12920  55E0 FD AB         swp b
12921  55E2 D8            push b
12922  55E3 07 B8 1A      call puts
12923  55E6 51 02 00      add sp, 2
12924  55E9             ; w1 = TO_FIXED00(input_int()); 
12925  55E9 FA FB FF      lea d, [bp + -5] ; $w1
12926  55EC DA            push d
12927  55ED 07 90 25      call input_int
12928  55F0 FD AB         swp b
12929  55F2 D8            push b
12930  55F3 07 C5 22      call TO_FIXED00
12931  55F6 51 02 00      add sp, 2
12932  55F9 E7            pop d
12933  55FA FD 43         mov [d], b
12934  55FC             ; if (w1 < 0 || w1 > 900) 
12935  55FC             _if203_cond:
12936  55FC FA FB FF      lea d, [bp + -5] ; $w1
12937  55FF 2A            mov b, [d]
12938  5600             ; START RELATIONAL
12939  5600 D7            push a
12940  5601 11            mov a, b
12941  5602 26 00 00      mov b, $0
12942  5605 B0            cmp a, b
12943  5606 FD 73         slt ; < (signed)
12944  5608 E4            pop a
12945  5609             ; END RELATIONAL
12946  5609             ; START LOGICAL OR
12947  5609 D7            push a
12948  560A 11            mov a, b
12949  560B FA FB FF      lea d, [bp + -5] ; $w1
12950  560E 2A            mov b, [d]
12951  560F             ; START RELATIONAL
12952  560F D7            push a
12953  5610 11            mov a, b
12954  5611 26 84 03      mov b, $384
12955  5614 B0            cmp a, b
12956  5615 FD 7F         sgt ; >
12957  5617 E4            pop a
12958  5618             ; END RELATIONAL
12959  5618 FD A8         sor a, b ; ||
12960  561A E4            pop a
12961  561B             ; END LOGICAL OR
12962  561B C0 00 00      cmp b, 0
12963  561E C6 26 56      je _if203_exit
12964  5621             _if203_true:
12965  5621             ; return; 
12966  5621 F9            leave
12967  5622 09            ret
12968  5623 0A 26 56      jmp _if203_exit
12969  5626             _if203_exit:
12970  5626             ; puts("Please enter final Y coordinate: "); 
12971  5626 26 82 7B      mov b, _s154 ; "Please enter final Y coordinate: "
12972  5629 FD AB         swp b
12973  562B D8            push b
12974  562C 07 B8 1A      call puts
12975  562F 51 02 00      add sp, 2
12976  5632             ; x = TO_FIXED00(input_int()); 
12977  5632 FA F9 FF      lea d, [bp + -7] ; $x
12978  5635 DA            push d
12979  5636 07 90 25      call input_int
12980  5639 FD AB         swp b
12981  563B D8            push b
12982  563C 07 C5 22      call TO_FIXED00
12983  563F 51 02 00      add sp, 2
12984  5642 E7            pop d
12985  5643 FD 43         mov [d], b
12986  5645             ; if (x < 0 || x > 900) 
12987  5645             _if204_cond:
12988  5645 FA F9 FF      lea d, [bp + -7] ; $x
12989  5648 2A            mov b, [d]
12990  5649             ; START RELATIONAL
12991  5649 D7            push a
12992  564A 11            mov a, b
12993  564B 26 00 00      mov b, $0
12994  564E B0            cmp a, b
12995  564F FD 73         slt ; < (signed)
12996  5651 E4            pop a
12997  5652             ; END RELATIONAL
12998  5652             ; START LOGICAL OR
12999  5652 D7            push a
13000  5653 11            mov a, b
13001  5654 FA F9 FF      lea d, [bp + -7] ; $x
13002  5657 2A            mov b, [d]
13003  5658             ; START RELATIONAL
13004  5658 D7            push a
13005  5659 11            mov a, b
13006  565A 26 84 03      mov b, $384
13007  565D B0            cmp a, b
13008  565E FD 7F         sgt ; >
13009  5660 E4            pop a
13010  5661             ; END RELATIONAL
13011  5661 FD A8         sor a, b ; ||
13012  5663 E4            pop a
13013  5664             ; END LOGICAL OR
13014  5664 C0 00 00      cmp b, 0
13015  5667 C6 6F 56      je _if204_exit
13016  566A             _if204_true:
13017  566A             ; return; 
13018  566A F9            leave
13019  566B 09            ret
13020  566C 0A 6F 56      jmp _if204_exit
13021  566F             _if204_exit:
13022  566F             ; compute_vector(w1, x, c1, a); 
13023  566F FA FD FF      lea d, [bp + -3] ; $a
13024  5672 2A            mov b, [d]
13025  5673 FD AB         swp b
13026  5675 D8            push b
13027  5676 FA FF FF      lea d, [bp + -1] ; $c1
13028  5679 2A            mov b, [d]
13029  567A FD AB         swp b
13030  567C D8            push b
13031  567D FA F9 FF      lea d, [bp + -7] ; $x
13032  5680 2A            mov b, [d]
13033  5681 FD AB         swp b
13034  5683 D8            push b
13035  5684 FA FB FF      lea d, [bp + -5] ; $w1
13036  5687 2A            mov b, [d]
13037  5688 FD AB         swp b
13038  568A D8            push b
13039  568B 07 6B 58      call compute_vector
13040  568E 51 08 00      add sp, 8
13041  5691 F9            leave
13042  5692 09            ret
13043  5693             
13044  5693             galaxy_map:
13045  5693 F8 00 00      enter 0 ; (push bp; mov bp, sp)
13046  5696             ; int i, j, j0; 
13047  5696 52 02 00      sub sp, 2
13048  5699 52 02 00      sub sp, 2
13049  569C 52 02 00      sub sp, 2
13050  569F             ; printf("\n                   The Galaxy\n\n"); 
13051  569F 26 A4 7B      mov b, _s155 ; "\n                   The Galaxy\n\n"
13052  56A2 FD AB         swp b
13053  56A4 D8            push b
13054  56A5 07 BA 07      call printf
13055  56A8 51 02 00      add sp, 2
13056  56AB             ; printf("    1     2     3     4     5     6     7     8\n"); 
13057  56AB 26 C5 7B      mov b, _s156 ; "    1     2     3     4     5     6     7     8\n"
13058  56AE FD AB         swp b
13059  56B0 D8            push b
13060  56B1 07 BA 07      call printf
13061  56B4 51 02 00      add sp, 2
13062  56B7             ; for (i = 1; i <= 8; i++) { 
13063  56B7             _for205_init:
13064  56B7 FA FF FF      lea d, [bp + -1] ; $i
13065  56BA DA            push d
13066  56BB 26 01 00      mov b, $1
13067  56BE E7            pop d
13068  56BF FD 43         mov [d], b
13069  56C1             _for205_cond:
13070  56C1 FA FF FF      lea d, [bp + -1] ; $i
13071  56C4 2A            mov b, [d]
13072  56C5             ; START RELATIONAL
13073  56C5 D7            push a
13074  56C6 11            mov a, b
13075  56C7 26 08 00      mov b, $8
13076  56CA B0            cmp a, b
13077  56CB FD 74         sle ; <= (signed)
13078  56CD E4            pop a
13079  56CE             ; END RELATIONAL
13080  56CE C0 00 00      cmp b, 0
13081  56D1 C6 5C 58      je _for205_exit
13082  56D4             _for205_block:
13083  56D4             ; printf("%s%d ", gm_1, i); 
13084  56D4 FA FF FF      lea d, [bp + -1] ; $i
13085  56D7 2A            mov b, [d]
13086  56D8 FD AB         swp b
13087  56DA D8            push b
13088  56DB 3B 61 6A      mov d, _gm_1 ; $gm_1
13089  56DE 2A            mov b, [d]
13090  56DF FD AB         swp b
13091  56E1 D8            push b
13092  56E2 26 F6 7B      mov b, _s157 ; "%s%d "
13093  56E5 FD AB         swp b
13094  56E7 D8            push b
13095  56E8 07 BA 07      call printf
13096  56EB 51 06 00      add sp, 6
13097  56EE             ; quadrant_name(1, i, 1); 
13098  56EE 26 01 00      mov b, $1
13099  56F1 DD            push bl
13100  56F2 FA FF FF      lea d, [bp + -1] ; $i
13101  56F5 2A            mov b, [d]
13102  56F6 DD            push bl
13103  56F7 26 01 00      mov b, $1
13104  56FA DD            push bl
13105  56FB 07 87 64      call quadrant_name
13106  56FE 51 03 00      add sp, 3
13107  5701             ; j0 = (int) (11 - (strlen(quadname) / 2)); 
13108  5701 FA FB FF      lea d, [bp + -5] ; $j0
13109  5704 DA            push d
13110  5705 26 0B 00      mov b, $b
13111  5708             ; START TERMS
13112  5708 D7            push a
13113  5709 11            mov a, b
13114  570A 3B E4 68      mov d, _quadname_data ; $quadname
13115  570D 2D            mov b, d
13116  570E FD AB         swp b
13117  5710 D8            push b
13118  5711 07 8E 05      call strlen
13119  5714 51 02 00      add sp, 2
13120  5717             ; START FACTORS
13121  5717 D7            push a
13122  5718 11            mov a, b
13123  5719 26 02 00      mov b, $2
13124  571C AE            div a, b
13125  571D 27            mov b, a
13126  571E E4            pop a
13127  571F             ; END FACTORS
13128  571F 60            sub a, b
13129  5720 27            mov b, a
13130  5721 E4            pop a
13131  5722             ; END TERMS
13132  5722 E7            pop d
13133  5723 FD 43         mov [d], b
13134  5725             ; for (j = 0; j < j0; j++) 
13135  5725             _for206_init:
13136  5725 FA FD FF      lea d, [bp + -3] ; $j
13137  5728 DA            push d
13138  5729 26 00 00      mov b, $0
13139  572C E7            pop d
13140  572D FD 43         mov [d], b
13141  572F             _for206_cond:
13142  572F FA FD FF      lea d, [bp + -3] ; $j
13143  5732 2A            mov b, [d]
13144  5733             ; START RELATIONAL
13145  5733 D7            push a
13146  5734 11            mov a, b
13147  5735 FA FB FF      lea d, [bp + -5] ; $j0
13148  5738 2A            mov b, [d]
13149  5739 B0            cmp a, b
13150  573A FD 73         slt ; < (signed)
13151  573C E4            pop a
13152  573D             ; END RELATIONAL
13153  573D C0 00 00      cmp b, 0
13154  5740 C6 5D 57      je _for206_exit
13155  5743             _for206_block:
13156  5743             ; putchar(' '); 
13157  5743 26 20 00      mov b, $20
13158  5746 DD            push bl
13159  5747 07 82 1A      call putchar
13160  574A 51 01 00      add sp, 1
13161  574D             _for206_update:
13162  574D FA FD FF      lea d, [bp + -3] ; $j
13163  5750 2A            mov b, [d]
13164  5751 FD 77         inc b
13165  5753 FA FD FF      lea d, [bp + -3] ; $j
13166  5756 FD 43         mov [d], b
13167  5758 FD 7D         dec b
13168  575A 0A 2F 57      jmp _for206_cond
13169  575D             _for206_exit:
13170  575D             ; puts(quadname); 
13171  575D 3B E4 68      mov d, _quadname_data ; $quadname
13172  5760 2D            mov b, d
13173  5761 FD AB         swp b
13174  5763 D8            push b
13175  5764 07 B8 1A      call puts
13176  5767 51 02 00      add sp, 2
13177  576A             ; for (j = 0; j < j0; j++) 
13178  576A             _for207_init:
13179  576A FA FD FF      lea d, [bp + -3] ; $j
13180  576D DA            push d
13181  576E 26 00 00      mov b, $0
13182  5771 E7            pop d
13183  5772 FD 43         mov [d], b
13184  5774             _for207_cond:
13185  5774 FA FD FF      lea d, [bp + -3] ; $j
13186  5777 2A            mov b, [d]
13187  5778             ; START RELATIONAL
13188  5778 D7            push a
13189  5779 11            mov a, b
13190  577A FA FB FF      lea d, [bp + -5] ; $j0
13191  577D 2A            mov b, [d]
13192  577E B0            cmp a, b
13193  577F FD 73         slt ; < (signed)
13194  5781 E4            pop a
13195  5782             ; END RELATIONAL
13196  5782 C0 00 00      cmp b, 0
13197  5785 C6 A2 57      je _for207_exit
13198  5788             _for207_block:
13199  5788             ; putchar(' '); 
13200  5788 26 20 00      mov b, $20
13201  578B DD            push bl
13202  578C 07 82 1A      call putchar
13203  578F 51 01 00      add sp, 1
13204  5792             _for207_update:
13205  5792 FA FD FF      lea d, [bp + -3] ; $j
13206  5795 2A            mov b, [d]
13207  5796 FD 77         inc b
13208  5798 FA FD FF      lea d, [bp + -3] ; $j
13209  579B FD 43         mov [d], b
13210  579D FD 7D         dec b
13211  579F 0A 74 57      jmp _for207_cond
13212  57A2             _for207_exit:
13213  57A2             ; if (!(strlen(quadname) % 2)) 
13214  57A2             _if208_cond:
13215  57A2 3B E4 68      mov d, _quadname_data ; $quadname
13216  57A5 2D            mov b, d
13217  57A6 FD AB         swp b
13218  57A8 D8            push b
13219  57A9 07 8E 05      call strlen
13220  57AC 51 02 00      add sp, 2
13221  57AF             ; START FACTORS
13222  57AF D7            push a
13223  57B0 11            mov a, b
13224  57B1 26 02 00      mov b, $2
13225  57B4 AE            div a, b ; 
13226  57B5 11            mov a, b
13227  57B6 27            mov b, a
13228  57B7 E4            pop a
13229  57B8             ; END FACTORS
13230  57B8 C0 00 00      cmp b, 0
13231  57BB FD 71         seq ; !
13232  57BD C0 00 00      cmp b, 0
13233  57C0 C6 D0 57      je _if208_exit
13234  57C3             _if208_true:
13235  57C3             ; putchar(' '); 
13236  57C3 26 20 00      mov b, $20
13237  57C6 DD            push bl
13238  57C7 07 82 1A      call putchar
13239  57CA 51 01 00      add sp, 1
13240  57CD 0A D0 57      jmp _if208_exit
13241  57D0             _if208_exit:
13242  57D0             ; quadrant_name(1, i, 5); 
13243  57D0 26 05 00      mov b, $5
13244  57D3 DD            push bl
13245  57D4 FA FF FF      lea d, [bp + -1] ; $i
13246  57D7 2A            mov b, [d]
13247  57D8 DD            push bl
13248  57D9 26 01 00      mov b, $1
13249  57DC DD            push bl
13250  57DD 07 87 64      call quadrant_name
13251  57E0 51 03 00      add sp, 3
13252  57E3             ; j0 = (int) (12 - (strlen(quadname) / 2)); 
13253  57E3 FA FB FF      lea d, [bp + -5] ; $j0
13254  57E6 DA            push d
13255  57E7 26 0C 00      mov b, $c
13256  57EA             ; START TERMS
13257  57EA D7            push a
13258  57EB 11            mov a, b
13259  57EC 3B E4 68      mov d, _quadname_data ; $quadname
13260  57EF 2D            mov b, d
13261  57F0 FD AB         swp b
13262  57F2 D8            push b
13263  57F3 07 8E 05      call strlen
13264  57F6 51 02 00      add sp, 2
13265  57F9             ; START FACTORS
13266  57F9 D7            push a
13267  57FA 11            mov a, b
13268  57FB 26 02 00      mov b, $2
13269  57FE AE            div a, b
13270  57FF 27            mov b, a
13271  5800 E4            pop a
13272  5801             ; END FACTORS
13273  5801 60            sub a, b
13274  5802 27            mov b, a
13275  5803 E4            pop a
13276  5804             ; END TERMS
13277  5804 E7            pop d
13278  5805 FD 43         mov [d], b
13279  5807             ; for (j = 0; j < j0; j++) 
13280  5807             _for209_init:
13281  5807 FA FD FF      lea d, [bp + -3] ; $j
13282  580A DA            push d
13283  580B 26 00 00      mov b, $0
13284  580E E7            pop d
13285  580F FD 43         mov [d], b
13286  5811             _for209_cond:
13287  5811 FA FD FF      lea d, [bp + -3] ; $j
13288  5814 2A            mov b, [d]
13289  5815             ; START RELATIONAL
13290  5815 D7            push a
13291  5816 11            mov a, b
13292  5817 FA FB FF      lea d, [bp + -5] ; $j0
13293  581A 2A            mov b, [d]
13294  581B B0            cmp a, b
13295  581C FD 73         slt ; < (signed)
13296  581E E4            pop a
13297  581F             ; END RELATIONAL
13298  581F C0 00 00      cmp b, 0
13299  5822 C6 3F 58      je _for209_exit
13300  5825             _for209_block:
13301  5825             ; putchar(' '); 
13302  5825 26 20 00      mov b, $20
13303  5828 DD            push bl
13304  5829 07 82 1A      call putchar
13305  582C 51 01 00      add sp, 1
13306  582F             _for209_update:
13307  582F FA FD FF      lea d, [bp + -3] ; $j
13308  5832 2A            mov b, [d]
13309  5833 FD 77         inc b
13310  5835 FA FD FF      lea d, [bp + -3] ; $j
13311  5838 FD 43         mov [d], b
13312  583A FD 7D         dec b
13313  583C 0A 11 58      jmp _for209_cond
13314  583F             _for209_exit:
13315  583F             ; puts(quadname); 
13316  583F 3B E4 68      mov d, _quadname_data ; $quadname
13317  5842 2D            mov b, d
13318  5843 FD AB         swp b
13319  5845 D8            push b
13320  5846 07 B8 1A      call puts
13321  5849 51 02 00      add sp, 2
13322  584C             _for205_update:
13323  584C FA FF FF      lea d, [bp + -1] ; $i
13324  584F 2A            mov b, [d]
13325  5850 FD 77         inc b
13326  5852 FA FF FF      lea d, [bp + -1] ; $i
13327  5855 FD 43         mov [d], b
13328  5857 FD 7D         dec b
13329  5859 0A C1 56      jmp _for205_cond
13330  585C             _for205_exit:
13331  585C             ; puts(gm_1); 
13332  585C 3B 61 6A      mov d, _gm_1 ; $gm_1
13333  585F 2A            mov b, [d]
13334  5860 FD AB         swp b
13335  5862 D8            push b
13336  5863 07 B8 1A      call puts
13337  5866 51 02 00      add sp, 2
13338  5869 F9            leave
13339  586A 09            ret
13340  586B             
13341  586B             compute_vector:
13342  586B F8 00 00      enter 0 ; (push bp; mov bp, sp)
13343  586E             ; long unsigned int        xl, al; 
13344  586E 52 04 00      sub sp, 4
13345  5871 52 04 00      sub sp, 4
13346  5874             ; puts("  DIRECTION = "); 
13347  5874 26 FC 7B      mov b, _s158 ; "  DIRECTION = "
13348  5877 FD AB         swp b
13349  5879 D8            push b
13350  587A 07 B8 1A      call puts
13351  587D 51 02 00      add sp, 2
13352  5880             ; x = x - a; 
13353  5880 FA 07 00      lea d, [bp + 7] ; $x
13354  5883 DA            push d
13355  5884 FA 07 00      lea d, [bp + 7] ; $x
13356  5887 2A            mov b, [d]
13357  5888             ; START TERMS
13358  5888 D7            push a
13359  5889 11            mov a, b
13360  588A FA 0B 00      lea d, [bp + 11] ; $a
13361  588D 2A            mov b, [d]
13362  588E 60            sub a, b
13363  588F 27            mov b, a
13364  5890 E4            pop a
13365  5891             ; END TERMS
13366  5891 E7            pop d
13367  5892 FD 43         mov [d], b
13368  5894             ; a = c1 - w1; 
13369  5894 FA 0B 00      lea d, [bp + 11] ; $a
13370  5897 DA            push d
13371  5898 FA 09 00      lea d, [bp + 9] ; $c1
13372  589B 2A            mov b, [d]
13373  589C             ; START TERMS
13374  589C D7            push a
13375  589D 11            mov a, b
13376  589E FA 05 00      lea d, [bp + 5] ; $w1
13377  58A1 2A            mov b, [d]
13378  58A2 60            sub a, b
13379  58A3 27            mov b, a
13380  58A4 E4            pop a
13381  58A5             ; END TERMS
13382  58A5 E7            pop d
13383  58A6 FD 43         mov [d], b
13384  58A8             ; xl = abs(x); 
13385  58A8 FA FD FF      lea d, [bp + -3] ; $xl
13386  58AB DA            push d
13387  58AC FA 07 00      lea d, [bp + 7] ; $x
13388  58AF 2A            mov b, [d]
13389  58B0 FD AB         swp b
13390  58B2 D8            push b
13391  58B3 07 04 1B      call abs
13392  58B6 51 02 00      add sp, 2
13393  58B9 E7            pop d
13394  58BA FD 43         mov [d], b
13395  58BC 28            mov b, c
13396  58BD FD 44 02 00   mov [d + 2], b
13397  58C1             ; al = abs(a); 
13398  58C1 FA F9 FF      lea d, [bp + -7] ; $al
13399  58C4 DA            push d
13400  58C5 FA 0B 00      lea d, [bp + 11] ; $a
13401  58C8 2A            mov b, [d]
13402  58C9 FD AB         swp b
13403  58CB D8            push b
13404  58CC 07 04 1B      call abs
13405  58CF 51 02 00      add sp, 2
13406  58D2 E7            pop d
13407  58D3 FD 43         mov [d], b
13408  58D5 28            mov b, c
13409  58D6 FD 44 02 00   mov [d + 2], b
13410  58DA             ; if (x < 0) { 
13411  58DA             _if210_cond:
13412  58DA FA 07 00      lea d, [bp + 7] ; $x
13413  58DD 2A            mov b, [d]
13414  58DE             ; START RELATIONAL
13415  58DE D7            push a
13416  58DF 11            mov a, b
13417  58E0 26 00 00      mov b, $0
13418  58E3 B0            cmp a, b
13419  58E4 FD 73         slt ; < (signed)
13420  58E6 E4            pop a
13421  58E7             ; END RELATIONAL
13422  58E7 C0 00 00      cmp b, 0
13423  58EA C6 47 5A      je _if210_else
13424  58ED             _if210_true:
13425  58ED             ; if (a > 0) { 
13426  58ED             _if211_cond:
13427  58ED FA 0B 00      lea d, [bp + 11] ; $a
13428  58F0 2A            mov b, [d]
13429  58F1             ; START RELATIONAL
13430  58F1 D7            push a
13431  58F2 11            mov a, b
13432  58F3 26 00 00      mov b, $0
13433  58F6 B0            cmp a, b
13434  58F7 FD 7F         sgt ; >
13435  58F9 E4            pop a
13436  58FA             ; END RELATIONAL
13437  58FA C0 00 00      cmp b, 0
13438  58FD C6 18 5A      je _if211_else
13439  5900             _if211_true:
13440  5900             ; c1 = 300; 
13441  5900 FA 09 00      lea d, [bp + 9] ; $c1
13442  5903 DA            push d
13443  5904 26 2C 01      mov b, $12c
13444  5907 E7            pop d
13445  5908 FD 43         mov [d], b
13446  590A             ; if (al >= xl) 
13447  590A             _if212_cond:
13448  590A FA F9 FF      lea d, [bp + -7] ; $al
13449  590D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13450  5910 FD 39         mov c, b ; And place it into C
13451  5912 2A            mov b, [d] ; Lower Word in B
13452  5913             ; START RELATIONAL
13453  5913 D7            push a
13454  5914 FD D8         push g
13455  5916 11            mov a, b
13456  5917 FD 7A         mov g, c
13457  5919 FA FD FF      lea d, [bp + -3] ; $xl
13458  591C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13459  591F FD 39         mov c, b ; And place it into C
13460  5921 2A            mov b, [d] ; Lower Word in B
13461  5922 FD 82         sgeu
13462  5924 FD F1         pop g
13463  5926 E4            pop a
13464  5927             ; END RELATIONAL
13465  5927 C0 00 00      cmp b, 0
13466  592A C6 77 59      je _if212_else
13467  592D             _if212_true:
13468  592D             ; printf("%s", print100(c1 + ((xl * 100) / al))); 
13469  592D FA 09 00      lea d, [bp + 9] ; $c1
13470  5930 2A            mov b, [d]
13471  5931             ; START TERMS
13472  5931 D7            push a
13473  5932 11            mov a, b
13474  5933 FA FD FF      lea d, [bp + -3] ; $xl
13475  5936 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13476  5939 FD 39         mov c, b ; And place it into C
13477  593B 2A            mov b, [d] ; Lower Word in B
13478  593C             ; START FACTORS
13479  593C D7            push a
13480  593D 11            mov a, b
13481  593E 26 64 00      mov b, $64
13482  5941 AC            mul a, b ; *
13483  5942 11            mov a, b
13484  5943 27            mov b, a
13485  5944 E4            pop a
13486  5945             ; END FACTORS
13487  5945             ; START FACTORS
13488  5945 D7            push a
13489  5946 11            mov a, b
13490  5947 FA F9 FF      lea d, [bp + -7] ; $al
13491  594A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13492  594D FD 39         mov c, b ; And place it into C
13493  594F 2A            mov b, [d] ; Lower Word in B
13494  5950 AE            div a, b
13495  5951 27            mov b, a
13496  5952 E4            pop a
13497  5953             ; END FACTORS
13498  5953 54            add a, b
13499  5954 D7            push a
13500  5955 FD 12         mov a, g
13501  5957 28            mov b, c
13502  5958 5C            adc a, b
13503  5959 39            mov c, a
13504  595A E5            pop b
13505  595B E4            pop a
13506  595C             ; END TERMS
13507  595C FD AB         swp b
13508  595E D8            push b
13509  595F 07 DA 25      call print100
13510  5962 51 02 00      add sp, 2
13511  5965 FD AB         swp b
13512  5967 D8            push b
13513  5968 26 0B 7C      mov b, _s159 ; "%s"
13514  596B FD AB         swp b
13515  596D D8            push b
13516  596E 07 BA 07      call printf
13517  5971 51 04 00      add sp, 4
13518  5974 0A DB 59      jmp _if212_exit
13519  5977             _if212_else:
13520  5977             ; printf("%s", print100(c1 + ((((xl * 2) - al) * 100)  / xl))); 
13521  5977 FA 09 00      lea d, [bp + 9] ; $c1
13522  597A 2A            mov b, [d]
13523  597B             ; START TERMS
13524  597B D7            push a
13525  597C 11            mov a, b
13526  597D FA FD FF      lea d, [bp + -3] ; $xl
13527  5980 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13528  5983 FD 39         mov c, b ; And place it into C
13529  5985 2A            mov b, [d] ; Lower Word in B
13530  5986             ; START FACTORS
13531  5986 D7            push a
13532  5987 11            mov a, b
13533  5988 26 02 00      mov b, $2
13534  598B AC            mul a, b ; *
13535  598C 11            mov a, b
13536  598D 27            mov b, a
13537  598E E4            pop a
13538  598F             ; END FACTORS
13539  598F             ; START TERMS
13540  598F D7            push a
13541  5990 FD D8         push g
13542  5992 11            mov a, b
13543  5993 FD 7A         mov g, c
13544  5995 FA F9 FF      lea d, [bp + -7] ; $al
13545  5998 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13546  599B FD 39         mov c, b ; And place it into C
13547  599D 2A            mov b, [d] ; Lower Word in B
13548  599E 60            sub a, b
13549  599F 27            mov b, a
13550  59A0 FD F1         pop g
13551  59A2 E4            pop a
13552  59A3             ; END TERMS
13553  59A3             ; START FACTORS
13554  59A3 D7            push a
13555  59A4 11            mov a, b
13556  59A5 26 64 00      mov b, $64
13557  59A8 AC            mul a, b ; *
13558  59A9 11            mov a, b
13559  59AA 27            mov b, a
13560  59AB E4            pop a
13561  59AC             ; END FACTORS
13562  59AC             ; START FACTORS
13563  59AC D7            push a
13564  59AD 11            mov a, b
13565  59AE FA FD FF      lea d, [bp + -3] ; $xl
13566  59B1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13567  59B4 FD 39         mov c, b ; And place it into C
13568  59B6 2A            mov b, [d] ; Lower Word in B
13569  59B7 AE            div a, b
13570  59B8 27            mov b, a
13571  59B9 E4            pop a
13572  59BA             ; END FACTORS
13573  59BA 54            add a, b
13574  59BB D7            push a
13575  59BC FD 12         mov a, g
13576  59BE 28            mov b, c
13577  59BF 5C            adc a, b
13578  59C0 39            mov c, a
13579  59C1 E5            pop b
13580  59C2 E4            pop a
13581  59C3             ; END TERMS
13582  59C3 FD AB         swp b
13583  59C5 D8            push b
13584  59C6 07 DA 25      call print100
13585  59C9 51 02 00      add sp, 2
13586  59CC FD AB         swp b
13587  59CE D8            push b
13588  59CF 26 0B 7C      mov b, _s159 ; "%s"
13589  59D2 FD AB         swp b
13590  59D4 D8            push b
13591  59D5 07 BA 07      call printf
13592  59D8 51 04 00      add sp, 4
13593  59DB             _if212_exit:
13594  59DB             ; printf(dist_1, print100((x > a) ? x : a)); 
13595  59DB             _ternary216_cond:
13596  59DB FA 07 00      lea d, [bp + 7] ; $x
13597  59DE 2A            mov b, [d]
13598  59DF             ; START RELATIONAL
13599  59DF D7            push a
13600  59E0 11            mov a, b
13601  59E1 FA 0B 00      lea d, [bp + 11] ; $a
13602  59E4 2A            mov b, [d]
13603  59E5 B0            cmp a, b
13604  59E6 FD 7F         sgt ; >
13605  59E8 E4            pop a
13606  59E9             ; END RELATIONAL
13607  59E9 C0 00 00      cmp b, 0
13608  59EC C6 F6 59      je _ternary216_false
13609  59EF             _ternary216_true:
13610  59EF FA 07 00      lea d, [bp + 7] ; $x
13611  59F2 2A            mov b, [d]
13612  59F3 0A FA 59      jmp _ternary216_exit
13613  59F6             _ternary216_false:
13614  59F6 FA 0B 00      lea d, [bp + 11] ; $a
13615  59F9 2A            mov b, [d]
13616  59FA             _ternary216_exit:
13617  59FA FD AB         swp b
13618  59FC D8            push b
13619  59FD 07 DA 25      call print100
13620  5A00 51 02 00      add sp, 2
13621  5A03 FD AB         swp b
13622  5A05 D8            push b
13623  5A06 3B 73 6A      mov d, _dist_1 ; $dist_1
13624  5A09 2A            mov b, [d]
13625  5A0A FD AB         swp b
13626  5A0C D8            push b
13627  5A0D 07 BA 07      call printf
13628  5A10 51 04 00      add sp, 4
13629  5A13             ; return; 
13630  5A13 F9            leave
13631  5A14 09            ret
13632  5A15 0A 44 5A      jmp _if211_exit
13633  5A18             _if211_else:
13634  5A18             ; if (x != 0){ 
13635  5A18             _if217_cond:
13636  5A18 FA 07 00      lea d, [bp + 7] ; $x
13637  5A1B 2A            mov b, [d]
13638  5A1C             ; START RELATIONAL
13639  5A1C D7            push a
13640  5A1D 11            mov a, b
13641  5A1E 26 00 00      mov b, $0
13642  5A21 B0            cmp a, b
13643  5A22 FD 72         sneq ; !=
13644  5A24 E4            pop a
13645  5A25             ; END RELATIONAL
13646  5A25 C0 00 00      cmp b, 0
13647  5A28 C6 3A 5A      je _if217_else
13648  5A2B             _if217_true:
13649  5A2B             ; c1 = 500; 
13650  5A2B FA 09 00      lea d, [bp + 9] ; $c1
13651  5A2E DA            push d
13652  5A2F 26 F4 01      mov b, $1f4
13653  5A32 E7            pop d
13654  5A33 FD 43         mov [d], b
13655  5A35             ; return; 
13656  5A35 F9            leave
13657  5A36 09            ret
13658  5A37 0A 44 5A      jmp _if217_exit
13659  5A3A             _if217_else:
13660  5A3A             ; c1 = 700; 
13661  5A3A FA 09 00      lea d, [bp + 9] ; $c1
13662  5A3D DA            push d
13663  5A3E 26 BC 02      mov b, $2bc
13664  5A41 E7            pop d
13665  5A42 FD 43         mov [d], b
13666  5A44             _if217_exit:
13667  5A44             _if211_exit:
13668  5A44 0A D3 5B      jmp _if210_exit
13669  5A47             _if210_else:
13670  5A47             ; if (a < 0) { 
13671  5A47             _if218_cond:
13672  5A47 FA 0B 00      lea d, [bp + 11] ; $a
13673  5A4A 2A            mov b, [d]
13674  5A4B             ; START RELATIONAL
13675  5A4B D7            push a
13676  5A4C 11            mov a, b
13677  5A4D 26 00 00      mov b, $0
13678  5A50 B0            cmp a, b
13679  5A51 FD 73         slt ; < (signed)
13680  5A53 E4            pop a
13681  5A54             ; END RELATIONAL
13682  5A54 C0 00 00      cmp b, 0
13683  5A57 C6 67 5A      je _if218_else
13684  5A5A             _if218_true:
13685  5A5A             ; c1 = 700; 
13686  5A5A FA 09 00      lea d, [bp + 9] ; $c1
13687  5A5D DA            push d
13688  5A5E 26 BC 02      mov b, $2bc
13689  5A61 E7            pop d
13690  5A62 FD 43         mov [d], b
13691  5A64 0A D3 5B      jmp _if218_exit
13692  5A67             _if218_else:
13693  5A67             ; if (x > 0) { 
13694  5A67             _if219_cond:
13695  5A67 FA 07 00      lea d, [bp + 7] ; $x
13696  5A6A 2A            mov b, [d]
13697  5A6B             ; START RELATIONAL
13698  5A6B D7            push a
13699  5A6C 11            mov a, b
13700  5A6D 26 00 00      mov b, $0
13701  5A70 B0            cmp a, b
13702  5A71 FD 7F         sgt ; >
13703  5A73 E4            pop a
13704  5A74             ; END RELATIONAL
13705  5A74 C0 00 00      cmp b, 0
13706  5A77 C6 87 5A      je _if219_else
13707  5A7A             _if219_true:
13708  5A7A             ; c1 = 100; 
13709  5A7A FA 09 00      lea d, [bp + 9] ; $c1
13710  5A7D DA            push d
13711  5A7E 26 64 00      mov b, $64
13712  5A81 E7            pop d
13713  5A82 FD 43         mov [d], b
13714  5A84 0A D3 5B      jmp _if219_exit
13715  5A87             _if219_else:
13716  5A87             ; if (a == 0) { 
13717  5A87             _if220_cond:
13718  5A87 FA 0B 00      lea d, [bp + 11] ; $a
13719  5A8A 2A            mov b, [d]
13720  5A8B             ; START RELATIONAL
13721  5A8B D7            push a
13722  5A8C 11            mov a, b
13723  5A8D 26 00 00      mov b, $0
13724  5A90 B0            cmp a, b
13725  5A91 FD 71         seq ; ==
13726  5A93 E4            pop a
13727  5A94             ; END RELATIONAL
13728  5A94 C0 00 00      cmp b, 0
13729  5A97 C6 A7 5A      je _if220_else
13730  5A9A             _if220_true:
13731  5A9A             ; c1 = 500; 
13732  5A9A FA 09 00      lea d, [bp + 9] ; $c1
13733  5A9D DA            push d
13734  5A9E 26 F4 01      mov b, $1f4
13735  5AA1 E7            pop d
13736  5AA2 FD 43         mov [d], b
13737  5AA4 0A D3 5B      jmp _if220_exit
13738  5AA7             _if220_else:
13739  5AA7             ; c1 = 100; 
13740  5AA7 FA 09 00      lea d, [bp + 9] ; $c1
13741  5AAA DA            push d
13742  5AAB 26 64 00      mov b, $64
13743  5AAE E7            pop d
13744  5AAF FD 43         mov [d], b
13745  5AB1             ; if (al <= xl) 
13746  5AB1             _if221_cond:
13747  5AB1 FA F9 FF      lea d, [bp + -7] ; $al
13748  5AB4 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13749  5AB7 FD 39         mov c, b ; And place it into C
13750  5AB9 2A            mov b, [d] ; Lower Word in B
13751  5ABA             ; START RELATIONAL
13752  5ABA D7            push a
13753  5ABB FD D8         push g
13754  5ABD 11            mov a, b
13755  5ABE FD 7A         mov g, c
13756  5AC0 FA FD FF      lea d, [bp + -3] ; $xl
13757  5AC3 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13758  5AC6 FD 39         mov c, b ; And place it into C
13759  5AC8 2A            mov b, [d] ; Lower Word in B
13760  5AC9 FD 76         sleu
13761  5ACB FD F1         pop g
13762  5ACD E4            pop a
13763  5ACE             ; END RELATIONAL
13764  5ACE C0 00 00      cmp b, 0
13765  5AD1 C6 1E 5B      je _if221_else
13766  5AD4             _if221_true:
13767  5AD4             ; printf("%s", print100(c1 + ((al * 100) / xl))); 
13768  5AD4 FA 09 00      lea d, [bp + 9] ; $c1
13769  5AD7 2A            mov b, [d]
13770  5AD8             ; START TERMS
13771  5AD8 D7            push a
13772  5AD9 11            mov a, b
13773  5ADA FA F9 FF      lea d, [bp + -7] ; $al
13774  5ADD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13775  5AE0 FD 39         mov c, b ; And place it into C
13776  5AE2 2A            mov b, [d] ; Lower Word in B
13777  5AE3             ; START FACTORS
13778  5AE3 D7            push a
13779  5AE4 11            mov a, b
13780  5AE5 26 64 00      mov b, $64
13781  5AE8 AC            mul a, b ; *
13782  5AE9 11            mov a, b
13783  5AEA 27            mov b, a
13784  5AEB E4            pop a
13785  5AEC             ; END FACTORS
13786  5AEC             ; START FACTORS
13787  5AEC D7            push a
13788  5AED 11            mov a, b
13789  5AEE FA FD FF      lea d, [bp + -3] ; $xl
13790  5AF1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13791  5AF4 FD 39         mov c, b ; And place it into C
13792  5AF6 2A            mov b, [d] ; Lower Word in B
13793  5AF7 AE            div a, b
13794  5AF8 27            mov b, a
13795  5AF9 E4            pop a
13796  5AFA             ; END FACTORS
13797  5AFA 54            add a, b
13798  5AFB D7            push a
13799  5AFC FD 12         mov a, g
13800  5AFE 28            mov b, c
13801  5AFF 5C            adc a, b
13802  5B00 39            mov c, a
13803  5B01 E5            pop b
13804  5B02 E4            pop a
13805  5B03             ; END TERMS
13806  5B03 FD AB         swp b
13807  5B05 D8            push b
13808  5B06 07 DA 25      call print100
13809  5B09 51 02 00      add sp, 2
13810  5B0C FD AB         swp b
13811  5B0E D8            push b
13812  5B0F 26 0B 7C      mov b, _s159 ; "%s"
13813  5B12 FD AB         swp b
13814  5B14 D8            push b
13815  5B15 07 BA 07      call printf
13816  5B18 51 04 00      add sp, 4
13817  5B1B 0A 82 5B      jmp _if221_exit
13818  5B1E             _if221_else:
13819  5B1E             ; printf("%s", print100(c1 + ((((al * 2) - xl) * 100) / al))); 
13820  5B1E FA 09 00      lea d, [bp + 9] ; $c1
13821  5B21 2A            mov b, [d]
13822  5B22             ; START TERMS
13823  5B22 D7            push a
13824  5B23 11            mov a, b
13825  5B24 FA F9 FF      lea d, [bp + -7] ; $al
13826  5B27 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13827  5B2A FD 39         mov c, b ; And place it into C
13828  5B2C 2A            mov b, [d] ; Lower Word in B
13829  5B2D             ; START FACTORS
13830  5B2D D7            push a
13831  5B2E 11            mov a, b
13832  5B2F 26 02 00      mov b, $2
13833  5B32 AC            mul a, b ; *
13834  5B33 11            mov a, b
13835  5B34 27            mov b, a
13836  5B35 E4            pop a
13837  5B36             ; END FACTORS
13838  5B36             ; START TERMS
13839  5B36 D7            push a
13840  5B37 FD D8         push g
13841  5B39 11            mov a, b
13842  5B3A FD 7A         mov g, c
13843  5B3C FA FD FF      lea d, [bp + -3] ; $xl
13844  5B3F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13845  5B42 FD 39         mov c, b ; And place it into C
13846  5B44 2A            mov b, [d] ; Lower Word in B
13847  5B45 60            sub a, b
13848  5B46 27            mov b, a
13849  5B47 FD F1         pop g
13850  5B49 E4            pop a
13851  5B4A             ; END TERMS
13852  5B4A             ; START FACTORS
13853  5B4A D7            push a
13854  5B4B 11            mov a, b
13855  5B4C 26 64 00      mov b, $64
13856  5B4F AC            mul a, b ; *
13857  5B50 11            mov a, b
13858  5B51 27            mov b, a
13859  5B52 E4            pop a
13860  5B53             ; END FACTORS
13861  5B53             ; START FACTORS
13862  5B53 D7            push a
13863  5B54 11            mov a, b
13864  5B55 FA F9 FF      lea d, [bp + -7] ; $al
13865  5B58 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13866  5B5B FD 39         mov c, b ; And place it into C
13867  5B5D 2A            mov b, [d] ; Lower Word in B
13868  5B5E AE            div a, b
13869  5B5F 27            mov b, a
13870  5B60 E4            pop a
13871  5B61             ; END FACTORS
13872  5B61 54            add a, b
13873  5B62 D7            push a
13874  5B63 FD 12         mov a, g
13875  5B65 28            mov b, c
13876  5B66 5C            adc a, b
13877  5B67 39            mov c, a
13878  5B68 E5            pop b
13879  5B69 E4            pop a
13880  5B6A             ; END TERMS
13881  5B6A FD AB         swp b
13882  5B6C D8            push b
13883  5B6D 07 DA 25      call print100
13884  5B70 51 02 00      add sp, 2
13885  5B73 FD AB         swp b
13886  5B75 D8            push b
13887  5B76 26 0B 7C      mov b, _s159 ; "%s"
13888  5B79 FD AB         swp b
13889  5B7B D8            push b
13890  5B7C 07 BA 07      call printf
13891  5B7F 51 04 00      add sp, 4
13892  5B82             _if221_exit:
13893  5B82             ; printf(dist_1, print100((xl > al) ? xl : al)); 
13894  5B82             _ternary225_cond:
13895  5B82 FA FD FF      lea d, [bp + -3] ; $xl
13896  5B85 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13897  5B88 FD 39         mov c, b ; And place it into C
13898  5B8A 2A            mov b, [d] ; Lower Word in B
13899  5B8B             ; START RELATIONAL
13900  5B8B D7            push a
13901  5B8C FD D8         push g
13902  5B8E 11            mov a, b
13903  5B8F FD 7A         mov g, c
13904  5B91 FA F9 FF      lea d, [bp + -7] ; $al
13905  5B94 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13906  5B97 FD 39         mov c, b ; And place it into C
13907  5B99 2A            mov b, [d] ; Lower Word in B
13908  5B9A FD 81         sgu
13909  5B9C FD F1         pop g
13910  5B9E E4            pop a
13911  5B9F             ; END RELATIONAL
13912  5B9F C0 00 00      cmp b, 0
13913  5BA2 C6 B1 5B      je _ternary225_false
13914  5BA5             _ternary225_true:
13915  5BA5 FA FD FF      lea d, [bp + -3] ; $xl
13916  5BA8 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13917  5BAB FD 39         mov c, b ; And place it into C
13918  5BAD 2A            mov b, [d] ; Lower Word in B
13919  5BAE 0A BA 5B      jmp _ternary225_exit
13920  5BB1             _ternary225_false:
13921  5BB1 FA F9 FF      lea d, [bp + -7] ; $al
13922  5BB4 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13923  5BB7 FD 39         mov c, b ; And place it into C
13924  5BB9 2A            mov b, [d] ; Lower Word in B
13925  5BBA             _ternary225_exit:
13926  5BBA FD AB         swp b
13927  5BBC D8            push b
13928  5BBD 07 DA 25      call print100
13929  5BC0 51 02 00      add sp, 2
13930  5BC3 FD AB         swp b
13931  5BC5 D8            push b
13932  5BC6 3B 73 6A      mov d, _dist_1 ; $dist_1
13933  5BC9 2A            mov b, [d]
13934  5BCA FD AB         swp b
13935  5BCC D8            push b
13936  5BCD 07 BA 07      call printf
13937  5BD0 51 04 00      add sp, 4
13938  5BD3             _if220_exit:
13939  5BD3             _if219_exit:
13940  5BD3             _if218_exit:
13941  5BD3             _if210_exit:
13942  5BD3 F9            leave
13943  5BD4 09            ret
13944  5BD5             
13945  5BD5             ship_destroyed:
13946  5BD5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
13947  5BD8             ; puts("The Enterprise has been destroyed. The Federation will be conquered.\n"); 
13948  5BD8 26 0E 7C      mov b, _s160 ; "The Enterprise has been destroyed. The Federation will be conquered.\n"
13949  5BDB FD AB         swp b
13950  5BDD D8            push b
13951  5BDE 07 B8 1A      call puts
13952  5BE1 51 02 00      add sp, 2
13953  5BE4             ; end_of_time(); 
13954  5BE4 07 E9 5B      call end_of_time
13955  5BE7 F9            leave
13956  5BE8 09            ret
13957  5BE9             
13958  5BE9             end_of_time:
13959  5BE9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
13960  5BEC             ; printf("It is stardate %d.\n\n",  FROM_FIXED(stardate)); 
13961  5BEC 3B A2 68      mov d, _stardate ; $stardate
13962  5BEF 2A            mov b, [d]
13963  5BF0 FD AB         swp b
13964  5BF2 D8            push b
13965  5BF3 07 B4 22      call FROM_FIXED
13966  5BF6 51 02 00      add sp, 2
13967  5BF9 FD AB         swp b
13968  5BFB D8            push b
13969  5BFC 26 54 7C      mov b, _s161 ; "It is stardate %d.\n\n"
13970  5BFF FD AB         swp b
13971  5C01 D8            push b
13972  5C02 07 BA 07      call printf
13973  5C05 51 04 00      add sp, 4
13974  5C08             ; resign_commision(); 
13975  5C08 07 0D 5C      call resign_commision
13976  5C0B F9            leave
13977  5C0C 09            ret
13978  5C0D             
13979  5C0D             resign_commision:
13980  5C0D F8 00 00      enter 0 ; (push bp; mov bp, sp)
13981  5C10             ; printf("There were %d Klingon Battlecruisers left at the end of your mission.\n\n", klingons_left); 
13982  5C10 3B 7C 68      mov d, _klingons_left ; $klingons_left
13983  5C13 32            mov bl, [d]
13984  5C14 A7 00         mov bh, 0
13985  5C16 DD            push bl
13986  5C17 26 69 7C      mov b, _s162 ; "There were %d Klingon Battlecruisers left at the end of your mission.\n\n"
13987  5C1A FD AB         swp b
13988  5C1C D8            push b
13989  5C1D 07 BA 07      call printf
13990  5C20 51 03 00      add sp, 3
13991  5C23             ; end_of_game(); 
13992  5C23 07 AF 5C      call end_of_game
13993  5C26 F9            leave
13994  5C27 09            ret
13995  5C28             
13996  5C28             won_game:
13997  5C28 F8 00 00      enter 0 ; (push bp; mov bp, sp)
13998  5C2B             ; puts("Congratulations, Captain!  The last Klingon Battle Cruiser\n menacing the Federation has been destoyed.\n"); 
13999  5C2B 26 B1 7C      mov b, _s163 ; "Congratulations, Captain!  The last Klingon Battle Cruiser\n menacing the Federation has been destoyed.\n"
14000  5C2E FD AB         swp b
14001  5C30 D8            push b
14002  5C31 07 B8 1A      call puts
14003  5C34 51 02 00      add sp, 2
14004  5C37             ; if (FROM_FIXED(stardate) - time_start > 0) 
14005  5C37             _if226_cond:
14006  5C37 3B A2 68      mov d, _stardate ; $stardate
14007  5C3A 2A            mov b, [d]
14008  5C3B FD AB         swp b
14009  5C3D D8            push b
14010  5C3E 07 B4 22      call FROM_FIXED
14011  5C41 51 02 00      add sp, 2
14012  5C44             ; START TERMS
14013  5C44 D7            push a
14014  5C45 11            mov a, b
14015  5C46 3B 86 68      mov d, _time_start ; $time_start
14016  5C49 2A            mov b, [d]
14017  5C4A 60            sub a, b
14018  5C4B 27            mov b, a
14019  5C4C E4            pop a
14020  5C4D             ; END TERMS
14021  5C4D             ; START RELATIONAL
14022  5C4D D7            push a
14023  5C4E 11            mov a, b
14024  5C4F 26 00 00      mov b, $0
14025  5C52 B0            cmp a, b
14026  5C53 FD 81         sgu ; > (unsigned)
14027  5C55 E4            pop a
14028  5C56             ; END RELATIONAL
14029  5C56 C0 00 00      cmp b, 0
14030  5C59 C6 AA 5C      je _if226_exit
14031  5C5C             _if226_true:
14032  5C5C             ; printf("Your efficiency rating is %s\n", 
14033  5C5C 3B 7B 68      mov d, _total_klingons ; $total_klingons
14034  5C5F 32            mov bl, [d]
14035  5C60 A7 00         mov bh, 0
14036  5C62 FD AB         swp b
14037  5C64 D8            push b
14038  5C65 07 C5 22      call TO_FIXED00
14039  5C68 51 02 00      add sp, 2
14040  5C6B             ; START FACTORS
14041  5C6B D7            push a
14042  5C6C 11            mov a, b
14043  5C6D 3B A2 68      mov d, _stardate ; $stardate
14044  5C70 2A            mov b, [d]
14045  5C71 FD AB         swp b
14046  5C73 D8            push b
14047  5C74 07 B4 22      call FROM_FIXED
14048  5C77 51 02 00      add sp, 2
14049  5C7A             ; START TERMS
14050  5C7A D7            push a
14051  5C7B 11            mov a, b
14052  5C7C 3B 86 68      mov d, _time_start ; $time_start
14053  5C7F 2A            mov b, [d]
14054  5C80 60            sub a, b
14055  5C81 27            mov b, a
14056  5C82 E4            pop a
14057  5C83             ; END TERMS
14058  5C83 AE            div a, b
14059  5C84 27            mov b, a
14060  5C85 E4            pop a
14061  5C86             ; END FACTORS
14062  5C86 FD AB         swp b
14063  5C88 D8            push b
14064  5C89 07 78 66      call square00
14065  5C8C 51 02 00      add sp, 2
14066  5C8F FD AB         swp b
14067  5C91 D8            push b
14068  5C92 07 DA 25      call print100
14069  5C95 51 02 00      add sp, 2
14070  5C98 FD AB         swp b
14071  5C9A D8            push b
14072  5C9B 26 19 7D      mov b, _s164 ; "Your efficiency rating is %s\n"
14073  5C9E FD AB         swp b
14074  5CA0 D8            push b
14075  5CA1 07 BA 07      call printf
14076  5CA4 51 04 00      add sp, 4
14077  5CA7 0A AA 5C      jmp _if226_exit
14078  5CAA             _if226_exit:
14079  5CAA             ; end_of_game(); 
14080  5CAA 07 AF 5C      call end_of_game
14081  5CAD F9            leave
14082  5CAE 09            ret
14083  5CAF             
14084  5CAF             end_of_game:
14085  5CAF F8 00 00      enter 0 ; (push bp; mov bp, sp)
14086  5CB2             ; char x[4]; 
14087  5CB2 52 04 00      sub sp, 4
14088  5CB5             ; if (starbases_left > 0) { 
14089  5CB5             _if227_cond:
14090  5CB5 3B A6 67      mov d, _starbases_left ; $starbases_left
14091  5CB8 32            mov bl, [d]
14092  5CB9 A7 00         mov bh, 0
14093  5CBB             ; START RELATIONAL
14094  5CBB D7            push a
14095  5CBC 11            mov a, b
14096  5CBD 26 00 00      mov b, $0
14097  5CC0 B0            cmp a, b
14098  5CC1 FD 7F         sgt ; >
14099  5CC3 E4            pop a
14100  5CC4             ; END RELATIONAL
14101  5CC4 C0 00 00      cmp b, 0
14102  5CC7 C6 38 5D      je _if227_exit
14103  5CCA             _if227_true:
14104  5CCA             ; puts("The Federation is in need of a new starship commander"); 
14105  5CCA 26 37 7D      mov b, _s165 ; "The Federation is in need of a new starship commander"
14106  5CCD FD AB         swp b
14107  5CCF D8            push b
14108  5CD0 07 B8 1A      call puts
14109  5CD3 51 02 00      add sp, 2
14110  5CD6             ; puts(" for a similar mission.\n"); 
14111  5CD6 26 6D 7D      mov b, _s166 ; " for a similar mission.\n"
14112  5CD9 FD AB         swp b
14113  5CDB D8            push b
14114  5CDC 07 B8 1A      call puts
14115  5CDF 51 02 00      add sp, 2
14116  5CE2             ; puts("If there is a volunteer, let him step forward and"); 
14117  5CE2 26 86 7D      mov b, _s167 ; "If there is a volunteer, let him step forward and"
14118  5CE5 FD AB         swp b
14119  5CE7 D8            push b
14120  5CE8 07 B8 1A      call puts
14121  5CEB 51 02 00      add sp, 2
14122  5CEE             ; puts(" enter aye: "); 
14123  5CEE 26 B8 7D      mov b, _s168 ; " enter aye: "
14124  5CF1 FD AB         swp b
14125  5CF3 D8            push b
14126  5CF4 07 B8 1A      call puts
14127  5CF7 51 02 00      add sp, 2
14128  5CFA             ; input(x,4); 
14129  5CFA 26 04 00      mov b, $4
14130  5CFD DD            push bl
14131  5CFE FA FD FF      lea d, [bp + -3] ; $x
14132  5D01 2D            mov b, d
14133  5D02 FD AB         swp b
14134  5D04 D8            push b
14135  5D05 07 48 23      call input
14136  5D08 51 03 00      add sp, 3
14137  5D0B             ; if (!strncmp(x, "aye", 3)) 
14138  5D0B             _if228_cond:
14139  5D0B 26 03 00      mov b, $3
14140  5D0E FD AB         swp b
14141  5D10 D8            push b
14142  5D11 26 C5 7D      mov b, _s169 ; "aye"
14143  5D14 FD AB         swp b
14144  5D16 D8            push b
14145  5D17 FA FD FF      lea d, [bp + -3] ; $x
14146  5D1A 2D            mov b, d
14147  5D1B FD AB         swp b
14148  5D1D D8            push b
14149  5D1E 07 D3 04      call strncmp
14150  5D21 51 06 00      add sp, 6
14151  5D24 C0 00 00      cmp b, 0
14152  5D27 FD 71         seq ; !
14153  5D29 C0 00 00      cmp b, 0
14154  5D2C C6 35 5D      je _if228_exit
14155  5D2F             _if228_true:
14156  5D2F             ; new_game(); 
14157  5D2F 07 3D 27      call new_game
14158  5D32 0A 35 5D      jmp _if228_exit
14159  5D35             _if228_exit:
14160  5D35 0A 38 5D      jmp _if227_exit
14161  5D38             _if227_exit:
14162  5D38             ; exit(); 
14163  5D38 07 D7 05      call exit
14164  5D3B F9            leave
14165  5D3C 09            ret
14166  5D3D             
14167  5D3D             klingons_move:
14168  5D3D F8 00 00      enter 0 ; (push bp; mov bp, sp)
14169  5D40             ; int i; 
14170  5D40 52 02 00      sub sp, 2
14171  5D43             ; struct klingon *k; 
14172  5D43 52 02 00      sub sp, 2
14173  5D46             ; k = &kdata; 
14174  5D46 FA FD FF      lea d, [bp + -3] ; $k
14175  5D49 DA            push d
14176  5D4A 3B 6E 68      mov d, _kdata_data ; $kdata
14177  5D4D 2D            mov b, d
14178  5D4E E7            pop d
14179  5D4F FD 43         mov [d], b
14180  5D51             ; for (i = 0; i <= 2; i++) { 
14181  5D51             _for229_init:
14182  5D51 FA FF FF      lea d, [bp + -1] ; $i
14183  5D54 DA            push d
14184  5D55 26 00 00      mov b, $0
14185  5D58 E7            pop d
14186  5D59 FD 43         mov [d], b
14187  5D5B             _for229_cond:
14188  5D5B FA FF FF      lea d, [bp + -1] ; $i
14189  5D5E 2A            mov b, [d]
14190  5D5F             ; START RELATIONAL
14191  5D5F D7            push a
14192  5D60 11            mov a, b
14193  5D61 26 02 00      mov b, $2
14194  5D64 B0            cmp a, b
14195  5D65 FD 74         sle ; <= (signed)
14196  5D67 E4            pop a
14197  5D68             ; END RELATIONAL
14198  5D68 C0 00 00      cmp b, 0
14199  5D6B C6 D9 5D      je _for229_exit
14200  5D6E             _for229_block:
14201  5D6E             ; if (k->energy > 0) { 
14202  5D6E             _if230_cond:
14203  5D6E FA FD FF      lea d, [bp + -3] ; $k
14204  5D71 FD 2A         mov d, [d]
14205  5D73 58 02 00      add d, 2
14206  5D76 2A            mov b, [d]
14207  5D77             ; START RELATIONAL
14208  5D77 D7            push a
14209  5D78 11            mov a, b
14210  5D79 26 00 00      mov b, $0
14211  5D7C B0            cmp a, b
14212  5D7D FD 7F         sgt ; >
14213  5D7F E4            pop a
14214  5D80             ; END RELATIONAL
14215  5D80 C0 00 00      cmp b, 0
14216  5D83 C6 B8 5D      je _if230_exit
14217  5D86             _if230_true:
14218  5D86             ; wipe_klingon(k); 
14219  5D86 FA FD FF      lea d, [bp + -3] ; $k
14220  5D89 2A            mov b, [d]
14221  5D8A FD AB         swp b
14222  5D8C D8            push b
14223  5D8D 07 FD 41      call wipe_klingon
14224  5D90 51 02 00      add sp, 2
14225  5D93             ; find_set_empty_place( 	3        , &k->y, &k->x); 
14226  5D93 FA FD FF      lea d, [bp + -3] ; $k
14227  5D96 FD 2A         mov d, [d]
14228  5D98 58 01 00      add d, 1
14229  5D9B 2D            mov b, d
14230  5D9C FD AB         swp b
14231  5D9E D8            push b
14232  5D9F FA FD FF      lea d, [bp + -3] ; $k
14233  5DA2 FD 2A         mov d, [d]
14234  5DA4 58 00 00      add d, 0
14235  5DA7 2D            mov b, d
14236  5DA8 FD AB         swp b
14237  5DAA D8            push b
14238  5DAB 26 03 00      mov b, $3
14239  5DAE DD            push bl
14240  5DAF 07 7B 63      call find_set_empty_place
14241  5DB2 51 05 00      add sp, 5
14242  5DB5 0A B8 5D      jmp _if230_exit
14243  5DB8             _if230_exit:
14244  5DB8             ; k++; 
14245  5DB8 FA FD FF      lea d, [bp + -3] ; $k
14246  5DBB 2A            mov b, [d]
14247  5DBC FD 77         inc b
14248  5DBE FD 77         inc b
14249  5DC0 FA FD FF      lea d, [bp + -3] ; $k
14250  5DC3 FD 43         mov [d], b
14251  5DC5 FD 7D         dec b
14252  5DC7 FD 7D         dec b
14253  5DC9             _for229_update:
14254  5DC9 FA FF FF      lea d, [bp + -1] ; $i
14255  5DCC 2A            mov b, [d]
14256  5DCD FD 77         inc b
14257  5DCF FA FF FF      lea d, [bp + -1] ; $i
14258  5DD2 FD 43         mov [d], b
14259  5DD4 FD 7D         dec b
14260  5DD6 0A 5B 5D      jmp _for229_cond
14261  5DD9             _for229_exit:
14262  5DD9             ; klingons_shoot(); 
14263  5DD9 07 DE 5D      call klingons_shoot
14264  5DDC F9            leave
14265  5DDD 09            ret
14266  5DDE             
14267  5DDE             klingons_shoot:
14268  5DDE F8 00 00      enter 0 ; (push bp; mov bp, sp)
14269  5DE1             ; unsigned char                         r; 
14270  5DE1 52 01 00      sub sp, 1
14271  5DE4             ; long unsigned int        h; 
14272  5DE4 52 04 00      sub sp, 4
14273  5DE7             ; unsigned char                         i; 
14274  5DE7 52 01 00      sub sp, 1
14275  5DEA             ; struct klingon *k; 
14276  5DEA 52 02 00      sub sp, 2
14277  5DED             ; long unsigned int        ratio; 
14278  5DED 52 04 00      sub sp, 4
14279  5DF0             ; k = &kdata; 
14280  5DF0 FA F9 FF      lea d, [bp + -7] ; $k
14281  5DF3 DA            push d
14282  5DF4 3B 6E 68      mov d, _kdata_data ; $kdata
14283  5DF7 2D            mov b, d
14284  5DF8 E7            pop d
14285  5DF9 FD 43         mov [d], b
14286  5DFB             ; if (klingons <= 0) 
14287  5DFB             _if231_cond:
14288  5DFB 3B 7A 68      mov d, _klingons ; $klingons
14289  5DFE 32            mov bl, [d]
14290  5DFF A7 00         mov bh, 0
14291  5E01             ; START RELATIONAL
14292  5E01 D7            push a
14293  5E02 11            mov a, b
14294  5E03 26 00 00      mov b, $0
14295  5E06 B0            cmp a, b
14296  5E07 FD 76         sleu ; <= (unsigned)
14297  5E09 E4            pop a
14298  5E0A             ; END RELATIONAL
14299  5E0A C0 00 00      cmp b, 0
14300  5E0D C6 15 5E      je _if231_exit
14301  5E10             _if231_true:
14302  5E10             ; return; 
14303  5E10 F9            leave
14304  5E11 09            ret
14305  5E12 0A 15 5E      jmp _if231_exit
14306  5E15             _if231_exit:
14307  5E15             ; if (docked) { 
14308  5E15             _if232_cond:
14309  5E15 3B C7 67      mov d, _docked ; $docked
14310  5E18 32            mov bl, [d]
14311  5E19 A7 00         mov bh, 0
14312  5E1B C0 00 00      cmp b, 0
14313  5E1E C6 32 5E      je _if232_exit
14314  5E21             _if232_true:
14315  5E21             ; puts("Starbase shields protect the Enterprise\n"); 
14316  5E21 26 C9 7D      mov b, _s170 ; "Starbase shields protect the Enterprise\n"
14317  5E24 FD AB         swp b
14318  5E26 D8            push b
14319  5E27 07 B8 1A      call puts
14320  5E2A 51 02 00      add sp, 2
14321  5E2D             ; return; 
14322  5E2D F9            leave
14323  5E2E 09            ret
14324  5E2F 0A 32 5E      jmp _if232_exit
14325  5E32             _if232_exit:
14326  5E32             ; for (i = 0; i <= 2; i++) { 
14327  5E32             _for233_init:
14328  5E32 FA FB FF      lea d, [bp + -5] ; $i
14329  5E35 DA            push d
14330  5E36 26 00 00      mov b, $0
14331  5E39 E7            pop d
14332  5E3A FD 3E         mov [d], bl
14333  5E3C             _for233_cond:
14334  5E3C FA FB FF      lea d, [bp + -5] ; $i
14335  5E3F 32            mov bl, [d]
14336  5E40 A7 00         mov bh, 0
14337  5E42             ; START RELATIONAL
14338  5E42 D7            push a
14339  5E43 11            mov a, b
14340  5E44 26 02 00      mov b, $2
14341  5E47 B0            cmp a, b
14342  5E48 FD 76         sleu ; <= (unsigned)
14343  5E4A E4            pop a
14344  5E4B             ; END RELATIONAL
14345  5E4B C0 00 00      cmp b, 0
14346  5E4E C6 CA 60      je _for233_exit
14347  5E51             _for233_block:
14348  5E51             ; if (k->energy > 0) { 
14349  5E51             _if234_cond:
14350  5E51 FA F9 FF      lea d, [bp + -7] ; $k
14351  5E54 FD 2A         mov d, [d]
14352  5E56 58 02 00      add d, 2
14353  5E59 2A            mov b, [d]
14354  5E5A             ; START RELATIONAL
14355  5E5A D7            push a
14356  5E5B 11            mov a, b
14357  5E5C 26 00 00      mov b, $0
14358  5E5F B0            cmp a, b
14359  5E60 FD 7F         sgt ; >
14360  5E62 E4            pop a
14361  5E63             ; END RELATIONAL
14362  5E63 C0 00 00      cmp b, 0
14363  5E66 C6 A7 60      je _if234_exit
14364  5E69             _if234_true:
14365  5E69             ; h = k->energy * (200UL + get_rand(100)); 
14366  5E69 FA FC FF      lea d, [bp + -4] ; $h
14367  5E6C DA            push d
14368  5E6D FA F9 FF      lea d, [bp + -7] ; $k
14369  5E70 FD 2A         mov d, [d]
14370  5E72 58 02 00      add d, 2
14371  5E75 2A            mov b, [d]
14372  5E76             ; START FACTORS
14373  5E76 D7            push a
14374  5E77 11            mov a, b
14375  5E78 26 C8 00      mov b, 200
14376  5E7B 38 00 00      mov c, 0
14377  5E7E             ; START TERMS
14378  5E7E D7            push a
14379  5E7F FD D8         push g
14380  5E81 11            mov a, b
14381  5E82 FD 7A         mov g, c
14382  5E84 26 64 00      mov b, $64
14383  5E87 FD AB         swp b
14384  5E89 D8            push b
14385  5E8A 07 E8 22      call get_rand
14386  5E8D 51 02 00      add sp, 2
14387  5E90 54            add a, b
14388  5E91 D7            push a
14389  5E92 FD 12         mov a, g
14390  5E94 28            mov b, c
14391  5E95 5C            adc a, b
14392  5E96 39            mov c, a
14393  5E97 E5            pop b
14394  5E98 FD F1         pop g
14395  5E9A E4            pop a
14396  5E9B             ; END TERMS
14397  5E9B AC            mul a, b ; *
14398  5E9C 11            mov a, b
14399  5E9D 27            mov b, a
14400  5E9E E4            pop a
14401  5E9F             ; END FACTORS
14402  5E9F E7            pop d
14403  5EA0 FD 43         mov [d], b
14404  5EA2 28            mov b, c
14405  5EA3 FD 44 02 00   mov [d + 2], b
14406  5EA7             ; h =h* 100;	/* Ready for division in fixed */ 
14407  5EA7 FA FC FF      lea d, [bp + -4] ; $h
14408  5EAA DA            push d
14409  5EAB FA FC FF      lea d, [bp + -4] ; $h
14410  5EAE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
14411  5EB1 FD 39         mov c, b ; And place it into C
14412  5EB3 2A            mov b, [d] ; Lower Word in B
14413  5EB4             ; START FACTORS
14414  5EB4 D7            push a
14415  5EB5 11            mov a, b
14416  5EB6 26 64 00      mov b, $64
14417  5EB9 AC            mul a, b ; *
14418  5EBA 11            mov a, b
14419  5EBB 27            mov b, a
14420  5EBC E4            pop a
14421  5EBD             ; END FACTORS
14422  5EBD E7            pop d
14423  5EBE FD 43         mov [d], b
14424  5EC0 28            mov b, c
14425  5EC1 FD 44 02 00   mov [d + 2], b
14426  5EC5             ; h =h/ distance_to(k); 
14427  5EC5 FA FC FF      lea d, [bp + -4] ; $h
14428  5EC8 DA            push d
14429  5EC9 FA FC FF      lea d, [bp + -4] ; $h
14430  5ECC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
14431  5ECF FD 39         mov c, b ; And place it into C
14432  5ED1 2A            mov b, [d] ; Lower Word in B
14433  5ED2             ; START FACTORS
14434  5ED2 D7            push a
14435  5ED3 11            mov a, b
14436  5ED4 FA F9 FF      lea d, [bp + -7] ; $k
14437  5ED7 2A            mov b, [d]
14438  5ED8 FD AB         swp b
14439  5EDA D8            push b
14440  5EDB 07 F0 66      call distance_to
14441  5EDE 51 02 00      add sp, 2
14442  5EE1 AE            div a, b
14443  5EE2 27            mov b, a
14444  5EE3 E4            pop a
14445  5EE4             ; END FACTORS
14446  5EE4 E7            pop d
14447  5EE5 FD 43         mov [d], b
14448  5EE7 28            mov b, c
14449  5EE8 FD 44 02 00   mov [d + 2], b
14450  5EEC             ; shield = shield - FROM_FIXED00(h); 
14451  5EEC 3B 83 68      mov d, _shield ; $shield
14452  5EEF DA            push d
14453  5EF0 3B 83 68      mov d, _shield ; $shield
14454  5EF3 2A            mov b, [d]
14455  5EF4             ; START TERMS
14456  5EF4 D7            push a
14457  5EF5 11            mov a, b
14458  5EF6 FA FC FF      lea d, [bp + -4] ; $h
14459  5EF9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
14460  5EFC FD 39         mov c, b ; And place it into C
14461  5EFE 2A            mov b, [d] ; Lower Word in B
14462  5EFF FD AB         swp b
14463  5F01 D8            push b
14464  5F02 07 D7 22      call FROM_FIXED00
14465  5F05 51 02 00      add sp, 2
14466  5F08 60            sub a, b
14467  5F09 27            mov b, a
14468  5F0A E4            pop a
14469  5F0B             ; END TERMS
14470  5F0B E7            pop d
14471  5F0C FD 43         mov [d], b
14472  5F0E             ; k->energy = (k->energy * 100) / (300 + get_rand(100)); 
14473  5F0E FA F9 FF      lea d, [bp + -7] ; $k
14474  5F11 FD 2A         mov d, [d]
14475  5F13 58 02 00      add d, 2
14476  5F16 DA            push d
14477  5F17 FA F9 FF      lea d, [bp + -7] ; $k
14478  5F1A FD 2A         mov d, [d]
14479  5F1C 58 02 00      add d, 2
14480  5F1F 2A            mov b, [d]
14481  5F20             ; START FACTORS
14482  5F20 D7            push a
14483  5F21 11            mov a, b
14484  5F22 26 64 00      mov b, $64
14485  5F25 AC            mul a, b ; *
14486  5F26 11            mov a, b
14487  5F27 27            mov b, a
14488  5F28 E4            pop a
14489  5F29             ; END FACTORS
14490  5F29             ; START FACTORS
14491  5F29 D7            push a
14492  5F2A 11            mov a, b
14493  5F2B 26 2C 01      mov b, $12c
14494  5F2E             ; START TERMS
14495  5F2E D7            push a
14496  5F2F 11            mov a, b
14497  5F30 26 64 00      mov b, $64
14498  5F33 FD AB         swp b
14499  5F35 D8            push b
14500  5F36 07 E8 22      call get_rand
14501  5F39 51 02 00      add sp, 2
14502  5F3C 56            add b, a
14503  5F3D E4            pop a
14504  5F3E             ; END TERMS
14505  5F3E AE            div a, b
14506  5F3F 27            mov b, a
14507  5F40 E4            pop a
14508  5F41             ; END FACTORS
14509  5F41 E7            pop d
14510  5F42 FD 43         mov [d], b
14511  5F44             ; printf("%d unit hit on Enterprise from sector %d, %d\n", (unsigned)FROM_FIXED00(h), k->y, k->x); 
14512  5F44 FA F9 FF      lea d, [bp + -7] ; $k
14513  5F47 FD 2A         mov d, [d]
14514  5F49 58 01 00      add d, 1
14515  5F4C 32            mov bl, [d]
14516  5F4D A7 00         mov bh, 0
14517  5F4F DD            push bl
14518  5F50 FA F9 FF      lea d, [bp + -7] ; $k
14519  5F53 FD 2A         mov d, [d]
14520  5F55 58 00 00      add d, 0
14521  5F58 32            mov bl, [d]
14522  5F59 A7 00         mov bh, 0
14523  5F5B DD            push bl
14524  5F5C FA FC FF      lea d, [bp + -4] ; $h
14525  5F5F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
14526  5F62 FD 39         mov c, b ; And place it into C
14527  5F64 2A            mov b, [d] ; Lower Word in B
14528  5F65 FD AB         swp b
14529  5F67 D8            push b
14530  5F68 26 F2 7D      mov b, _s171 ; "%d unit hit on Enterprise from sector %d, %d\n"
14531  5F6B FD AB         swp b
14532  5F6D D8            push b
14533  5F6E 07 BA 07      call printf
14534  5F71 51 06 00      add sp, 6
14535  5F74             ; if (shield <= 0) { 
14536  5F74             _if235_cond:
14537  5F74 3B 83 68      mov d, _shield ; $shield
14538  5F77 2A            mov b, [d]
14539  5F78             ; START RELATIONAL
14540  5F78 D7            push a
14541  5F79 11            mov a, b
14542  5F7A 26 00 00      mov b, $0
14543  5F7D B0            cmp a, b
14544  5F7E FD 74         sle ; <= (signed)
14545  5F80 E4            pop a
14546  5F81             ; END RELATIONAL
14547  5F81 C0 00 00      cmp b, 0
14548  5F84 C6 97 5F      je _if235_exit
14549  5F87             _if235_true:
14550  5F87             ; putchar('\n'); 
14551  5F87 26 0A 00      mov b, $a
14552  5F8A DD            push bl
14553  5F8B 07 82 1A      call putchar
14554  5F8E 51 01 00      add sp, 1
14555  5F91             ; ship_destroyed(); 
14556  5F91 07 D5 5B      call ship_destroyed
14557  5F94 0A 97 5F      jmp _if235_exit
14558  5F97             _if235_exit:
14559  5F97             ; printf("    <Shields down to %d units>\n\n", shield); 
14560  5F97 3B 83 68      mov d, _shield ; $shield
14561  5F9A 2A            mov b, [d]
14562  5F9B FD AB         swp b
14563  5F9D D8            push b
14564  5F9E 26 20 7E      mov b, _s172 ; "    <Shields down to %d units>\n\n"
14565  5FA1 FD AB         swp b
14566  5FA3 D8            push b
14567  5FA4 07 BA 07      call printf
14568  5FA7 51 04 00      add sp, 4
14569  5FAA             ; if (h >= 20) { 
14570  5FAA             _if236_cond:
14571  5FAA FA FC FF      lea d, [bp + -4] ; $h
14572  5FAD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
14573  5FB0 FD 39         mov c, b ; And place it into C
14574  5FB2 2A            mov b, [d] ; Lower Word in B
14575  5FB3             ; START RELATIONAL
14576  5FB3 D7            push a
14577  5FB4 FD D8         push g
14578  5FB6 11            mov a, b
14579  5FB7 FD 7A         mov g, c
14580  5FB9 26 14 00      mov b, $14
14581  5FBC 38 00 00      mov c, 0
14582  5FBF FD 82         sgeu
14583  5FC1 FD F1         pop g
14584  5FC3 E4            pop a
14585  5FC4             ; END RELATIONAL
14586  5FC4 C0 00 00      cmp b, 0
14587  5FC7 C6 A4 60      je _if236_exit
14588  5FCA             _if236_true:
14589  5FCA             ; ratio = ((int)h)/shield; 
14590  5FCA FA F5 FF      lea d, [bp + -11] ; $ratio
14591  5FCD DA            push d
14592  5FCE FA FC FF      lea d, [bp + -4] ; $h
14593  5FD1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
14594  5FD4 FD 39         mov c, b ; And place it into C
14595  5FD6 2A            mov b, [d] ; Lower Word in B
14596  5FD7             ; START FACTORS
14597  5FD7 D7            push a
14598  5FD8 11            mov a, b
14599  5FD9 3B 83 68      mov d, _shield ; $shield
14600  5FDC 2A            mov b, [d]
14601  5FDD AE            div a, b
14602  5FDE 27            mov b, a
14603  5FDF E4            pop a
14604  5FE0             ; END FACTORS
14605  5FE0 E7            pop d
14606  5FE1 FD 43         mov [d], b
14607  5FE3 28            mov b, c
14608  5FE4 FD 44 02 00   mov [d + 2], b
14609  5FE8             ; if (get_rand(10) <= 6 && ratio > 2) { 
14610  5FE8             _if237_cond:
14611  5FE8 26 0A 00      mov b, $a
14612  5FEB FD AB         swp b
14613  5FED D8            push b
14614  5FEE 07 E8 22      call get_rand
14615  5FF1 51 02 00      add sp, 2
14616  5FF4             ; START RELATIONAL
14617  5FF4 D7            push a
14618  5FF5 11            mov a, b
14619  5FF6 26 06 00      mov b, $6
14620  5FF9 B0            cmp a, b
14621  5FFA FD 74         sle ; <= (signed)
14622  5FFC E4            pop a
14623  5FFD             ; END RELATIONAL
14624  5FFD             ; START LOGICAL AND
14625  5FFD D7            push a
14626  5FFE 11            mov a, b
14627  5FFF FA F5 FF      lea d, [bp + -11] ; $ratio
14628  6002 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
14629  6005 FD 39         mov c, b ; And place it into C
14630  6007 2A            mov b, [d] ; Lower Word in B
14631  6008             ; START RELATIONAL
14632  6008 D7            push a
14633  6009 FD D8         push g
14634  600B 11            mov a, b
14635  600C FD 7A         mov g, c
14636  600E 26 02 00      mov b, $2
14637  6011 38 00 00      mov c, 0
14638  6014 FD 81         sgu
14639  6016 FD F1         pop g
14640  6018 E4            pop a
14641  6019             ; END RELATIONAL
14642  6019 FD 22 00 00   mov g, 0
14643  601D FD B1 00 00   sand32 ga, cb
14643  6021 00 00 
14644  6023 E4            pop a
14645  6024             ; END LOGICAL AND
14646  6024 C0 00 00      cmp b, 0
14647  6027 C6 A1 60      je _if237_exit
14648  602A             _if237_true:
14649  602A             ; r = rand8(); 
14650  602A FA 00 00      lea d, [bp + 0] ; $r
14651  602D DA            push d
14652  602E 07 37 23      call rand8
14653  6031 E7            pop d
14654  6032 FD 3E         mov [d], bl
14655  6034             ; damage[r] =damage[r] - ratio + get_rand(50); 
14656  6034 3B 8A 68      mov d, _damage_data ; $damage
14657  6037 D7            push a
14658  6038 DA            push d
14659  6039 FA 00 00      lea d, [bp + 0] ; $r
14660  603C 32            mov bl, [d]
14661  603D A7 00         mov bh, 0
14662  603F E7            pop d
14663  6040 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14664  6044 E4            pop a
14665  6045 DA            push d
14666  6046 3B 8A 68      mov d, _damage_data ; $damage
14667  6049 D7            push a
14668  604A DA            push d
14669  604B FA 00 00      lea d, [bp + 0] ; $r
14670  604E 32            mov bl, [d]
14671  604F A7 00         mov bh, 0
14672  6051 E7            pop d
14673  6052 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14674  6056 E4            pop a
14675  6057 2A            mov b, [d]
14676  6058             ; START TERMS
14677  6058 D7            push a
14678  6059 11            mov a, b
14679  605A FA F5 FF      lea d, [bp + -11] ; $ratio
14680  605D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
14681  6060 FD 39         mov c, b ; And place it into C
14682  6062 2A            mov b, [d] ; Lower Word in B
14683  6063 60            sub a, b
14684  6064 27            mov b, a
14685  6065 11            mov a, b
14686  6066 FD 7A         mov g, c
14687  6068 26 32 00      mov b, $32
14688  606B FD AB         swp b
14689  606D D8            push b
14690  606E 07 E8 22      call get_rand
14691  6071 51 02 00      add sp, 2
14692  6074 54            add a, b
14693  6075 D7            push a
14694  6076 FD 12         mov a, g
14695  6078 28            mov b, c
14696  6079 5C            adc a, b
14697  607A 39            mov c, a
14698  607B E5            pop b
14699  607C E4            pop a
14700  607D             ; END TERMS
14701  607D E7            pop d
14702  607E FD 43         mov [d], b
14703  6080             ; printf("Damage Control reports\n%s damaged by hit\n\n", get_device_name(r)); 
14704  6080 FA 00 00      lea d, [bp + 0] ; $r
14705  6083 32            mov bl, [d]
14706  6084 A7 00         mov bh, 0
14707  6086 FD AB         swp b
14708  6088 D8            push b
14709  6089 07 40 64      call get_device_name
14710  608C 51 02 00      add sp, 2
14711  608F FD AB         swp b
14712  6091 D8            push b
14713  6092 26 41 7E      mov b, _s173 ; "Damage Control reports\n%s damaged by hit\n\n"
14714  6095 FD AB         swp b
14715  6097 D8            push b
14716  6098 07 BA 07      call printf
14717  609B 51 04 00      add sp, 4
14718  609E 0A A1 60      jmp _if237_exit
14719  60A1             _if237_exit:
14720  60A1 0A A4 60      jmp _if236_exit
14721  60A4             _if236_exit:
14722  60A4 0A A7 60      jmp _if234_exit
14723  60A7             _if234_exit:
14724  60A7             ; k++; 
14725  60A7 FA F9 FF      lea d, [bp + -7] ; $k
14726  60AA 2A            mov b, [d]
14727  60AB FD 77         inc b
14728  60AD FD 77         inc b
14729  60AF FA F9 FF      lea d, [bp + -7] ; $k
14730  60B2 FD 43         mov [d], b
14731  60B4 FD 7D         dec b
14732  60B6 FD 7D         dec b
14733  60B8             _for233_update:
14734  60B8 FA FB FF      lea d, [bp + -5] ; $i
14735  60BB 32            mov bl, [d]
14736  60BC A7 00         mov bh, 0
14737  60BE FD 77         inc b
14738  60C0 FA FB FF      lea d, [bp + -5] ; $i
14739  60C3 FD 43         mov [d], b
14740  60C5 FD 7D         dec b
14741  60C7 0A 3C 5E      jmp _for233_cond
14742  60CA             _for233_exit:
14743  60CA F9            leave
14744  60CB 09            ret
14745  60CC             
14746  60CC             repair_damage:
14747  60CC F8 00 00      enter 0 ; (push bp; mov bp, sp)
14748  60CF             ; int i; 
14749  60CF 52 02 00      sub sp, 2
14750  60D2             ; int d1; 
14751  60D2 52 02 00      sub sp, 2
14752  60D5             ; unsigned int        repair_factor;		/* Repair Factor */ 
14753  60D5 52 02 00      sub sp, 2
14754  60D8             ; repair_factor = warp; 
14755  60D8 FA FB FF      lea d, [bp + -5] ; $repair_factor
14756  60DB DA            push d
14757  60DC FA 05 00      lea d, [bp + 5] ; $warp
14758  60DF 2A            mov b, [d]
14759  60E0 E7            pop d
14760  60E1 FD 43         mov [d], b
14761  60E3             ; if (warp >= 100) 
14762  60E3             _if238_cond:
14763  60E3 FA 05 00      lea d, [bp + 5] ; $warp
14764  60E6 2A            mov b, [d]
14765  60E7             ; START RELATIONAL
14766  60E7 D7            push a
14767  60E8 11            mov a, b
14768  60E9 26 64 00      mov b, $64
14769  60EC B0            cmp a, b
14770  60ED FD 82         sgeu ; >= (unsigned)
14771  60EF E4            pop a
14772  60F0             ; END RELATIONAL
14773  60F0 C0 00 00      cmp b, 0
14774  60F3 C6 0C 61      je _if238_exit
14775  60F6             _if238_true:
14776  60F6             ; repair_factor = TO_FIXED00(1); 
14777  60F6 FA FB FF      lea d, [bp + -5] ; $repair_factor
14778  60F9 DA            push d
14779  60FA 26 01 00      mov b, $1
14780  60FD FD AB         swp b
14781  60FF D8            push b
14782  6100 07 C5 22      call TO_FIXED00
14783  6103 51 02 00      add sp, 2
14784  6106 E7            pop d
14785  6107 FD 43         mov [d], b
14786  6109 0A 0C 61      jmp _if238_exit
14787  610C             _if238_exit:
14788  610C             ; for (i = 1; i <= 8; i++) { 
14789  610C             _for239_init:
14790  610C FA FF FF      lea d, [bp + -1] ; $i
14791  610F DA            push d
14792  6110 26 01 00      mov b, $1
14793  6113 E7            pop d
14794  6114 FD 43         mov [d], b
14795  6116             _for239_cond:
14796  6116 FA FF FF      lea d, [bp + -1] ; $i
14797  6119 2A            mov b, [d]
14798  611A             ; START RELATIONAL
14799  611A D7            push a
14800  611B 11            mov a, b
14801  611C 26 08 00      mov b, $8
14802  611F B0            cmp a, b
14803  6120 FD 74         sle ; <= (signed)
14804  6122 E4            pop a
14805  6123             ; END RELATIONAL
14806  6123 C0 00 00      cmp b, 0
14807  6126 C6 5F 62      je _for239_exit
14808  6129             _for239_block:
14809  6129             ; if (damage[i] < 0) { 
14810  6129             _if240_cond:
14811  6129 3B 8A 68      mov d, _damage_data ; $damage
14812  612C D7            push a
14813  612D DA            push d
14814  612E FA FF FF      lea d, [bp + -1] ; $i
14815  6131 2A            mov b, [d]
14816  6132 E7            pop d
14817  6133 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14818  6137 E4            pop a
14819  6138 2A            mov b, [d]
14820  6139             ; START RELATIONAL
14821  6139 D7            push a
14822  613A 11            mov a, b
14823  613B 26 00 00      mov b, $0
14824  613E B0            cmp a, b
14825  613F FD 73         slt ; < (signed)
14826  6141 E4            pop a
14827  6142             ; END RELATIONAL
14828  6142 C0 00 00      cmp b, 0
14829  6145 C6 4F 62      je _if240_exit
14830  6148             _if240_true:
14831  6148             ; damage[i] = damage[i] + repair_factor; 
14832  6148 3B 8A 68      mov d, _damage_data ; $damage
14833  614B D7            push a
14834  614C DA            push d
14835  614D FA FF FF      lea d, [bp + -1] ; $i
14836  6150 2A            mov b, [d]
14837  6151 E7            pop d
14838  6152 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14839  6156 E4            pop a
14840  6157 DA            push d
14841  6158 3B 8A 68      mov d, _damage_data ; $damage
14842  615B D7            push a
14843  615C DA            push d
14844  615D FA FF FF      lea d, [bp + -1] ; $i
14845  6160 2A            mov b, [d]
14846  6161 E7            pop d
14847  6162 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14848  6166 E4            pop a
14849  6167 2A            mov b, [d]
14850  6168             ; START TERMS
14851  6168 D7            push a
14852  6169 11            mov a, b
14853  616A FA FB FF      lea d, [bp + -5] ; $repair_factor
14854  616D 2A            mov b, [d]
14855  616E 56            add b, a
14856  616F E4            pop a
14857  6170             ; END TERMS
14858  6170 E7            pop d
14859  6171 FD 43         mov [d], b
14860  6173             ; if (damage[i] > -10 && damage[i] < 0)	/* -0.1 */ 
14861  6173             _if241_cond:
14862  6173 3B 8A 68      mov d, _damage_data ; $damage
14863  6176 D7            push a
14864  6177 DA            push d
14865  6178 FA FF FF      lea d, [bp + -1] ; $i
14866  617B 2A            mov b, [d]
14867  617C E7            pop d
14868  617D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14869  6181 E4            pop a
14870  6182 2A            mov b, [d]
14871  6183             ; START RELATIONAL
14872  6183 D7            push a
14873  6184 11            mov a, b
14874  6185 26 F6 FF      mov b, $fff6
14875  6188 B0            cmp a, b
14876  6189 FD 7F         sgt ; >
14877  618B E4            pop a
14878  618C             ; END RELATIONAL
14879  618C             ; START LOGICAL AND
14880  618C D7            push a
14881  618D 11            mov a, b
14882  618E 3B 8A 68      mov d, _damage_data ; $damage
14883  6191 D7            push a
14884  6192 DA            push d
14885  6193 FA FF FF      lea d, [bp + -1] ; $i
14886  6196 2A            mov b, [d]
14887  6197 E7            pop d
14888  6198 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14889  619C E4            pop a
14890  619D 2A            mov b, [d]
14891  619E             ; START RELATIONAL
14892  619E D7            push a
14893  619F 11            mov a, b
14894  61A0 26 00 00      mov b, $0
14895  61A3 B0            cmp a, b
14896  61A4 FD 73         slt ; < (signed)
14897  61A6 E4            pop a
14898  61A7             ; END RELATIONAL
14899  61A7 FD A7         sand a, b
14900  61A9 E4            pop a
14901  61AA             ; END LOGICAL AND
14902  61AA C0 00 00      cmp b, 0
14903  61AD C6 CB 61      je _if241_else
14904  61B0             _if241_true:
14905  61B0             ; damage[i] = -10; 
14906  61B0 3B 8A 68      mov d, _damage_data ; $damage
14907  61B3 D7            push a
14908  61B4 DA            push d
14909  61B5 FA FF FF      lea d, [bp + -1] ; $i
14910  61B8 2A            mov b, [d]
14911  61B9 E7            pop d
14912  61BA FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14913  61BE E4            pop a
14914  61BF DA            push d
14915  61C0 26 0A 00      mov b, $a
14916  61C3 FD 97         neg b
14917  61C5 E7            pop d
14918  61C6 FD 43         mov [d], b
14919  61C8 0A 4C 62      jmp _if241_exit
14920  61CB             _if241_else:
14921  61CB             ; if (damage[i] >= 0) { 
14922  61CB             _if242_cond:
14923  61CB 3B 8A 68      mov d, _damage_data ; $damage
14924  61CE D7            push a
14925  61CF DA            push d
14926  61D0 FA FF FF      lea d, [bp + -1] ; $i
14927  61D3 2A            mov b, [d]
14928  61D4 E7            pop d
14929  61D5 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14930  61D9 E4            pop a
14931  61DA 2A            mov b, [d]
14932  61DB             ; START RELATIONAL
14933  61DB D7            push a
14934  61DC 11            mov a, b
14935  61DD 26 00 00      mov b, $0
14936  61E0 B0            cmp a, b
14937  61E1 FD 80         sge ; >=
14938  61E3 E4            pop a
14939  61E4             ; END RELATIONAL
14940  61E4 C0 00 00      cmp b, 0
14941  61E7 C6 4C 62      je _if242_exit
14942  61EA             _if242_true:
14943  61EA             ; if (d1 != 1) { 
14944  61EA             _if243_cond:
14945  61EA FA FD FF      lea d, [bp + -3] ; $d1
14946  61ED 2A            mov b, [d]
14947  61EE             ; START RELATIONAL
14948  61EE D7            push a
14949  61EF 11            mov a, b
14950  61F0 26 01 00      mov b, $1
14951  61F3 B0            cmp a, b
14952  61F4 FD 72         sneq ; !=
14953  61F6 E4            pop a
14954  61F7             ; END RELATIONAL
14955  61F7 C0 00 00      cmp b, 0
14956  61FA C6 17 62      je _if243_exit
14957  61FD             _if243_true:
14958  61FD             ; d1 = 1; 
14959  61FD FA FD FF      lea d, [bp + -3] ; $d1
14960  6200 DA            push d
14961  6201 26 01 00      mov b, $1
14962  6204 E7            pop d
14963  6205 FD 43         mov [d], b
14964  6207             ; puts(dcr_1); 
14965  6207 3B 9D 69      mov d, _dcr_1 ; $dcr_1
14966  620A 2A            mov b, [d]
14967  620B FD AB         swp b
14968  620D D8            push b
14969  620E 07 B8 1A      call puts
14970  6211 51 02 00      add sp, 2
14971  6214 0A 17 62      jmp _if243_exit
14972  6217             _if243_exit:
14973  6217             ; printf("    %s repair completed\n\n", 
14974  6217 FA FF FF      lea d, [bp + -1] ; $i
14975  621A 2A            mov b, [d]
14976  621B FD AB         swp b
14977  621D D8            push b
14978  621E 07 40 64      call get_device_name
14979  6221 51 02 00      add sp, 2
14980  6224 FD AB         swp b
14981  6226 D8            push b
14982  6227 26 6C 7E      mov b, _s174 ; "    %s repair completed\n\n"
14983  622A FD AB         swp b
14984  622C D8            push b
14985  622D 07 BA 07      call printf
14986  6230 51 04 00      add sp, 4
14987  6233             ; damage[i] = 0; 
14988  6233 3B 8A 68      mov d, _damage_data ; $damage
14989  6236 D7            push a
14990  6237 DA            push d
14991  6238 FA FF FF      lea d, [bp + -1] ; $i
14992  623B 2A            mov b, [d]
14993  623C E7            pop d
14994  623D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14995  6241 E4            pop a
14996  6242 DA            push d
14997  6243 26 00 00      mov b, $0
14998  6246 E7            pop d
14999  6247 FD 43         mov [d], b
15000  6249 0A 4C 62      jmp _if242_exit
15001  624C             _if242_exit:
15002  624C             _if241_exit:
15003  624C 0A 4F 62      jmp _if240_exit
15004  624F             _if240_exit:
15005  624F             _for239_update:
15006  624F FA FF FF      lea d, [bp + -1] ; $i
15007  6252 2A            mov b, [d]
15008  6253 FD 77         inc b
15009  6255 FA FF FF      lea d, [bp + -1] ; $i
15010  6258 FD 43         mov [d], b
15011  625A FD 7D         dec b
15012  625C 0A 16 61      jmp _for239_cond
15013  625F             _for239_exit:
15014  625F             ; unsigned char                         r; 
15015  625F 52 01 00      sub sp, 1
15016  6262             ; if (get_rand(10) <= 2) { 
15017  6262             _if244_cond:
15018  6262 26 0A 00      mov b, $a
15019  6265 FD AB         swp b
15020  6267 D8            push b
15021  6268 07 E8 22      call get_rand
15022  626B 51 02 00      add sp, 2
15023  626E             ; START RELATIONAL
15024  626E D7            push a
15025  626F 11            mov a, b
15026  6270 26 02 00      mov b, $2
15027  6273 B0            cmp a, b
15028  6274 FD 74         sle ; <= (signed)
15029  6276 E4            pop a
15030  6277             ; END RELATIONAL
15031  6277 C0 00 00      cmp b, 0
15032  627A C6 79 63      je _if244_exit
15033  627D             _if244_true:
15034  627D             ; r = rand8(); 
15035  627D FA FA FF      lea d, [bp + -6] ; $r
15036  6280 DA            push d
15037  6281 07 37 23      call rand8
15038  6284 E7            pop d
15039  6285 FD 3E         mov [d], bl
15040  6287             ; if (get_rand(10) < 6) { 
15041  6287             _if245_cond:
15042  6287 26 0A 00      mov b, $a
15043  628A FD AB         swp b
15044  628C D8            push b
15045  628D 07 E8 22      call get_rand
15046  6290 51 02 00      add sp, 2
15047  6293             ; START RELATIONAL
15048  6293 D7            push a
15049  6294 11            mov a, b
15050  6295 26 06 00      mov b, $6
15051  6298 B0            cmp a, b
15052  6299 FD 73         slt ; < (signed)
15053  629B E4            pop a
15054  629C             ; END RELATIONAL
15055  629C C0 00 00      cmp b, 0
15056  629F C6 0F 63      je _if245_else
15057  62A2             _if245_true:
15058  62A2             ; damage[r] =damage[r]- (get_rand(500) + 100); 
15059  62A2 3B 8A 68      mov d, _damage_data ; $damage
15060  62A5 D7            push a
15061  62A6 DA            push d
15062  62A7 FA FA FF      lea d, [bp + -6] ; $r
15063  62AA 32            mov bl, [d]
15064  62AB A7 00         mov bh, 0
15065  62AD E7            pop d
15066  62AE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
15067  62B2 E4            pop a
15068  62B3 DA            push d
15069  62B4 3B 8A 68      mov d, _damage_data ; $damage
15070  62B7 D7            push a
15071  62B8 DA            push d
15072  62B9 FA FA FF      lea d, [bp + -6] ; $r
15073  62BC 32            mov bl, [d]
15074  62BD A7 00         mov bh, 0
15075  62BF E7            pop d
15076  62C0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
15077  62C4 E4            pop a
15078  62C5 2A            mov b, [d]
15079  62C6             ; START TERMS
15080  62C6 D7            push a
15081  62C7 11            mov a, b
15082  62C8 26 F4 01      mov b, $1f4
15083  62CB FD AB         swp b
15084  62CD D8            push b
15085  62CE 07 E8 22      call get_rand
15086  62D1 51 02 00      add sp, 2
15087  62D4             ; START TERMS
15088  62D4 D7            push a
15089  62D5 11            mov a, b
15090  62D6 26 64 00      mov b, $64
15091  62D9 56            add b, a
15092  62DA E4            pop a
15093  62DB             ; END TERMS
15094  62DB 60            sub a, b
15095  62DC 27            mov b, a
15096  62DD E4            pop a
15097  62DE             ; END TERMS
15098  62DE E7            pop d
15099  62DF FD 43         mov [d], b
15100  62E1             ; puts(dcr_1); 
15101  62E1 3B 9D 69      mov d, _dcr_1 ; $dcr_1
15102  62E4 2A            mov b, [d]
15103  62E5 FD AB         swp b
15104  62E7 D8            push b
15105  62E8 07 B8 1A      call puts
15106  62EB 51 02 00      add sp, 2
15107  62EE             ; printf("    %s damaged\n\n", get_device_name(r)); 
15108  62EE FA FA FF      lea d, [bp + -6] ; $r
15109  62F1 32            mov bl, [d]
15110  62F2 A7 00         mov bh, 0
15111  62F4 FD AB         swp b
15112  62F6 D8            push b
15113  62F7 07 40 64      call get_device_name
15114  62FA 51 02 00      add sp, 2
15115  62FD FD AB         swp b
15116  62FF D8            push b
15117  6300 26 86 7E      mov b, _s175 ; "    %s damaged\n\n"
15118  6303 FD AB         swp b
15119  6305 D8            push b
15120  6306 07 BA 07      call printf
15121  6309 51 04 00      add sp, 4
15122  630C 0A 76 63      jmp _if245_exit
15123  630F             _if245_else:
15124  630F             ; damage[r] = damage[r] + get_rand(300) + 100; 
15125  630F 3B 8A 68      mov d, _damage_data ; $damage
15126  6312 D7            push a
15127  6313 DA            push d
15128  6314 FA FA FF      lea d, [bp + -6] ; $r
15129  6317 32            mov bl, [d]
15130  6318 A7 00         mov bh, 0
15131  631A E7            pop d
15132  631B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
15133  631F E4            pop a
15134  6320 DA            push d
15135  6321 3B 8A 68      mov d, _damage_data ; $damage
15136  6324 D7            push a
15137  6325 DA            push d
15138  6326 FA FA FF      lea d, [bp + -6] ; $r
15139  6329 32            mov bl, [d]
15140  632A A7 00         mov bh, 0
15141  632C E7            pop d
15142  632D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
15143  6331 E4            pop a
15144  6332 2A            mov b, [d]
15145  6333             ; START TERMS
15146  6333 D7            push a
15147  6334 11            mov a, b
15148  6335 26 2C 01      mov b, $12c
15149  6338 FD AB         swp b
15150  633A D8            push b
15151  633B 07 E8 22      call get_rand
15152  633E 51 02 00      add sp, 2
15153  6341 56            add b, a
15154  6342 11            mov a, b
15155  6343 26 64 00      mov b, $64
15156  6346 56            add b, a
15157  6347 E4            pop a
15158  6348             ; END TERMS
15159  6348 E7            pop d
15160  6349 FD 43         mov [d], b
15161  634B             ; puts(dcr_1); 
15162  634B 3B 9D 69      mov d, _dcr_1 ; $dcr_1
15163  634E 2A            mov b, [d]
15164  634F FD AB         swp b
15165  6351 D8            push b
15166  6352 07 B8 1A      call puts
15167  6355 51 02 00      add sp, 2
15168  6358             ; printf("    %s state of repair improved\n\n", 
15169  6358 FA FA FF      lea d, [bp + -6] ; $r
15170  635B 32            mov bl, [d]
15171  635C A7 00         mov bh, 0
15172  635E FD AB         swp b
15173  6360 D8            push b
15174  6361 07 40 64      call get_device_name
15175  6364 51 02 00      add sp, 2
15176  6367 FD AB         swp b
15177  6369 D8            push b
15178  636A 26 97 7E      mov b, _s176 ; "    %s state of repair improved\n\n"
15179  636D FD AB         swp b
15180  636F D8            push b
15181  6370 07 BA 07      call printf
15182  6373 51 04 00      add sp, 4
15183  6376             _if245_exit:
15184  6376 0A 79 63      jmp _if244_exit
15185  6379             _if244_exit:
15186  6379 F9            leave
15187  637A 09            ret
15188  637B             
15189  637B             find_set_empty_place:
15190  637B F8 00 00      enter 0 ; (push bp; mov bp, sp)
15191  637E             ; unsigned char                         r1, r2; 
15192  637E 52 01 00      sub sp, 1
15193  6381 52 01 00      sub sp, 1
15194  6384             ; do { 
15195  6384             _do246_block:
15196  6384             ; r1 = rand8(); 
15197  6384 FA 00 00      lea d, [bp + 0] ; $r1
15198  6387 DA            push d
15199  6388 07 37 23      call rand8
15200  638B E7            pop d
15201  638C FD 3E         mov [d], bl
15202  638E             ; r2 = rand8(); 
15203  638E FA FF FF      lea d, [bp + -1] ; $r2
15204  6391 DA            push d
15205  6392 07 37 23      call rand8
15206  6395 E7            pop d
15207  6396 FD 3E         mov [d], bl
15208  6398             ; } while (quad[r1-1][r2-1] !=  		0       ); 
15209  6398             _do246_cond:
15210  6398 3B A4 68      mov d, _quad_data ; $quad
15211  639B D7            push a
15212  639C DA            push d
15213  639D FA 00 00      lea d, [bp + 0] ; $r1
15214  63A0 32            mov bl, [d]
15215  63A1 A7 00         mov bh, 0
15216  63A3             ; START TERMS
15217  63A3 D7            push a
15218  63A4 11            mov a, b
15219  63A5 26 01 00      mov b, $1
15220  63A8 60            sub a, b
15221  63A9 27            mov b, a
15222  63AA E4            pop a
15223  63AB             ; END TERMS
15224  63AB E7            pop d
15225  63AC FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
15226  63B0 DA            push d
15227  63B1 FA FF FF      lea d, [bp + -1] ; $r2
15228  63B4 32            mov bl, [d]
15229  63B5 A7 00         mov bh, 0
15230  63B7             ; START TERMS
15231  63B7 D7            push a
15232  63B8 11            mov a, b
15233  63B9 26 01 00      mov b, $1
15234  63BC 60            sub a, b
15235  63BD 27            mov b, a
15236  63BE E4            pop a
15237  63BF             ; END TERMS
15238  63BF E7            pop d
15239  63C0 5A            add d, b
15240  63C1 E4            pop a
15241  63C2 32            mov bl, [d]
15242  63C3 A7 00         mov bh, 0
15243  63C5             ; START RELATIONAL
15244  63C5 D7            push a
15245  63C6 11            mov a, b
15246  63C7 26 00 00      mov b, $0
15247  63CA B0            cmp a, b
15248  63CB FD 72         sneq ; !=
15249  63CD E4            pop a
15250  63CE             ; END RELATIONAL
15251  63CE C0 01 00      cmp b, 1
15252  63D1 C6 84 63      je _do246_block
15253  63D4             _do246_exit:
15254  63D4             ; quad[r1-1][r2-1] = t; 
15255  63D4 3B A4 68      mov d, _quad_data ; $quad
15256  63D7 D7            push a
15257  63D8 DA            push d
15258  63D9 FA 00 00      lea d, [bp + 0] ; $r1
15259  63DC 32            mov bl, [d]
15260  63DD A7 00         mov bh, 0
15261  63DF             ; START TERMS
15262  63DF D7            push a
15263  63E0 11            mov a, b
15264  63E1 26 01 00      mov b, $1
15265  63E4 60            sub a, b
15266  63E5 27            mov b, a
15267  63E6 E4            pop a
15268  63E7             ; END TERMS
15269  63E7 E7            pop d
15270  63E8 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
15271  63EC DA            push d
15272  63ED FA FF FF      lea d, [bp + -1] ; $r2
15273  63F0 32            mov bl, [d]
15274  63F1 A7 00         mov bh, 0
15275  63F3             ; START TERMS
15276  63F3 D7            push a
15277  63F4 11            mov a, b
15278  63F5 26 01 00      mov b, $1
15279  63F8 60            sub a, b
15280  63F9 27            mov b, a
15281  63FA E4            pop a
15282  63FB             ; END TERMS
15283  63FB E7            pop d
15284  63FC 5A            add d, b
15285  63FD E4            pop a
15286  63FE DA            push d
15287  63FF FA 05 00      lea d, [bp + 5] ; $t
15288  6402 32            mov bl, [d]
15289  6403 A7 00         mov bh, 0
15290  6405 E7            pop d
15291  6406 FD 3E         mov [d], bl
15292  6408             ; if (z1) 
15293  6408             _if247_cond:
15294  6408 FA 06 00      lea d, [bp + 6] ; $z1
15295  640B 2A            mov b, [d]
15296  640C C0 00 00      cmp b, 0
15297  640F C6 23 64      je _if247_exit
15298  6412             _if247_true:
15299  6412             ; *z1 = r1; 
15300  6412 FA 06 00      lea d, [bp + 6] ; $z1
15301  6415 2A            mov b, [d]
15302  6416 D8            push b
15303  6417 FA 00 00      lea d, [bp + 0] ; $r1
15304  641A 32            mov bl, [d]
15305  641B A7 00         mov bh, 0
15306  641D E7            pop d
15307  641E FD 3E         mov [d], bl
15308  6420 0A 23 64      jmp _if247_exit
15309  6423             _if247_exit:
15310  6423             ; if (z2) 
15311  6423             _if248_cond:
15312  6423 FA 08 00      lea d, [bp + 8] ; $z2
15313  6426 2A            mov b, [d]
15314  6427 C0 00 00      cmp b, 0
15315  642A C6 3E 64      je _if248_exit
15316  642D             _if248_true:
15317  642D             ; *z2 = r2; 
15318  642D FA 08 00      lea d, [bp + 8] ; $z2
15319  6430 2A            mov b, [d]
15320  6431 D8            push b
15321  6432 FA FF FF      lea d, [bp + -1] ; $r2
15322  6435 32            mov bl, [d]
15323  6436 A7 00         mov bh, 0
15324  6438 E7            pop d
15325  6439 FD 3E         mov [d], bl
15326  643B 0A 3E 64      jmp _if248_exit
15327  643E             _if248_exit:
15328  643E F9            leave
15329  643F 09            ret
15330  6440             
15331  6440             get_device_name:
15332  6440 F8 00 00      enter 0 ; (push bp; mov bp, sp)
15333  6443             ; if (n < 0 || n > 8) 
15334  6443             _if249_cond:
15335  6443 FA 05 00      lea d, [bp + 5] ; $n
15336  6446 2A            mov b, [d]
15337  6447             ; START RELATIONAL
15338  6447 D7            push a
15339  6448 11            mov a, b
15340  6449 26 00 00      mov b, $0
15341  644C B0            cmp a, b
15342  644D FD 73         slt ; < (signed)
15343  644F E4            pop a
15344  6450             ; END RELATIONAL
15345  6450             ; START LOGICAL OR
15346  6450 D7            push a
15347  6451 11            mov a, b
15348  6452 FA 05 00      lea d, [bp + 5] ; $n
15349  6455 2A            mov b, [d]
15350  6456             ; START RELATIONAL
15351  6456 D7            push a
15352  6457 11            mov a, b
15353  6458 26 08 00      mov b, $8
15354  645B B0            cmp a, b
15355  645C FD 7F         sgt ; >
15356  645E E4            pop a
15357  645F             ; END RELATIONAL
15358  645F FD A8         sor a, b ; ||
15359  6461 E4            pop a
15360  6462             ; END LOGICAL OR
15361  6462 C0 00 00      cmp b, 0
15362  6465 C6 75 64      je _if249_exit
15363  6468             _if249_true:
15364  6468             ; n = 0; 
15365  6468 FA 05 00      lea d, [bp + 5] ; $n
15366  646B DA            push d
15367  646C 26 00 00      mov b, $0
15368  646F E7            pop d
15369  6470 FD 43         mov [d], b
15370  6472 0A 75 64      jmp _if249_exit
15371  6475             _if249_exit:
15372  6475             ; return device_name[n]; 
15373  6475 3B 60 69      mov d, _device_name_data ; $device_name
15374  6478 D7            push a
15375  6479 DA            push d
15376  647A FA 05 00      lea d, [bp + 5] ; $n
15377  647D 2A            mov b, [d]
15378  647E E7            pop d
15379  647F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
15380  6483 E4            pop a
15381  6484 2A            mov b, [d]
15382  6485 F9            leave
15383  6486 09            ret
15384  6487             
15385  6487             quadrant_name:
15386  6487 F8 00 00      enter 0 ; (push bp; mov bp, sp)
15387  648A             ; static char *sect_name[] = { "", " I", " II", " III", " IV" }; 
15388  648A 52 14 00      sub sp, 20
15389  648D             ; if (y < 1 || y > 8 || x < 1 || x > 8) 
15390  648D             _if250_cond:
15391  648D FA 06 00      lea d, [bp + 6] ; $y
15392  6490 32            mov bl, [d]
15393  6491 A7 00         mov bh, 0
15394  6493             ; START RELATIONAL
15395  6493 D7            push a
15396  6494 11            mov a, b
15397  6495 26 01 00      mov b, $1
15398  6498 B0            cmp a, b
15399  6499 FD 75         slu ; < (unsigned)
15400  649B E4            pop a
15401  649C             ; END RELATIONAL
15402  649C             ; START LOGICAL OR
15403  649C D7            push a
15404  649D 11            mov a, b
15405  649E FA 06 00      lea d, [bp + 6] ; $y
15406  64A1 32            mov bl, [d]
15407  64A2 A7 00         mov bh, 0
15408  64A4             ; START RELATIONAL
15409  64A4 D7            push a
15410  64A5 11            mov a, b
15411  64A6 26 08 00      mov b, $8
15412  64A9 B0            cmp a, b
15413  64AA FD 81         sgu ; > (unsigned)
15414  64AC E4            pop a
15415  64AD             ; END RELATIONAL
15416  64AD FD A8         sor a, b ; ||
15417  64AF 11            mov a, b
15418  64B0 FA 07 00      lea d, [bp + 7] ; $x
15419  64B3 32            mov bl, [d]
15420  64B4 A7 00         mov bh, 0
15421  64B6             ; START RELATIONAL
15422  64B6 D7            push a
15423  64B7 11            mov a, b
15424  64B8 26 01 00      mov b, $1
15425  64BB B0            cmp a, b
15426  64BC FD 75         slu ; < (unsigned)
15427  64BE E4            pop a
15428  64BF             ; END RELATIONAL
15429  64BF FD A8         sor a, b ; ||
15430  64C1 11            mov a, b
15431  64C2 FA 07 00      lea d, [bp + 7] ; $x
15432  64C5 32            mov bl, [d]
15433  64C6 A7 00         mov bh, 0
15434  64C8             ; START RELATIONAL
15435  64C8 D7            push a
15436  64C9 11            mov a, b
15437  64CA 26 08 00      mov b, $8
15438  64CD B0            cmp a, b
15439  64CE FD 81         sgu ; > (unsigned)
15440  64D0 E4            pop a
15441  64D1             ; END RELATIONAL
15442  64D1 FD A8         sor a, b ; ||
15443  64D3 E4            pop a
15444  64D4             ; END LOGICAL OR
15445  64D4 C0 00 00      cmp b, 0
15446  64D7 C6 F0 64      je _if250_exit
15447  64DA             _if250_true:
15448  64DA             ; strcpy(quadname, "Unknown"); 
15449  64DA 26 C9 7E      mov b, _s181 ; "Unknown"
15450  64DD FD AB         swp b
15451  64DF D8            push b
15452  64E0 3B E4 68      mov d, _quadname_data ; $quadname
15453  64E3 2D            mov b, d
15454  64E4 FD AB         swp b
15455  64E6 D8            push b
15456  64E7 07 14 04      call strcpy
15457  64EA 51 04 00      add sp, 4
15458  64ED 0A F0 64      jmp _if250_exit
15459  64F0             _if250_exit:
15460  64F0             ; if (x <= 4) 
15461  64F0             _if251_cond:
15462  64F0 FA 07 00      lea d, [bp + 7] ; $x
15463  64F3 32            mov bl, [d]
15464  64F4 A7 00         mov bh, 0
15465  64F6             ; START RELATIONAL
15466  64F6 D7            push a
15467  64F7 11            mov a, b
15468  64F8 26 04 00      mov b, $4
15469  64FB B0            cmp a, b
15470  64FC FD 76         sleu ; <= (unsigned)
15471  64FE E4            pop a
15472  64FF             ; END RELATIONAL
15473  64FF C0 00 00      cmp b, 0
15474  6502 C6 2A 65      je _if251_else
15475  6505             _if251_true:
15476  6505             ; strcpy(quadname, quad_name[y]); 
15477  6505 3B 1A 69      mov d, _quad_name_data ; $quad_name
15478  6508 D7            push a
15479  6509 DA            push d
15480  650A FA 06 00      lea d, [bp + 6] ; $y
15481  650D 32            mov bl, [d]
15482  650E A7 00         mov bh, 0
15483  6510 E7            pop d
15484  6511 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
15485  6515 E4            pop a
15486  6516 2A            mov b, [d]
15487  6517 FD AB         swp b
15488  6519 D8            push b
15489  651A 3B E4 68      mov d, _quadname_data ; $quadname
15490  651D 2D            mov b, d
15491  651E FD AB         swp b
15492  6520 D8            push b
15493  6521 07 14 04      call strcpy
15494  6524 51 04 00      add sp, 4
15495  6527 0A 53 65      jmp _if251_exit
15496  652A             _if251_else:
15497  652A             ; strcpy(quadname, quad_name[y + 8]); 
15498  652A 3B 1A 69      mov d, _quad_name_data ; $quad_name
15499  652D D7            push a
15500  652E DA            push d
15501  652F FA 06 00      lea d, [bp + 6] ; $y
15502  6532 32            mov bl, [d]
15503  6533 A7 00         mov bh, 0
15504  6535             ; START TERMS
15505  6535 D7            push a
15506  6536 11            mov a, b
15507  6537 26 08 00      mov b, $8
15508  653A 56            add b, a
15509  653B E4            pop a
15510  653C             ; END TERMS
15511  653C E7            pop d
15512  653D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
15513  6541 E4            pop a
15514  6542 2A            mov b, [d]
15515  6543 FD AB         swp b
15516  6545 D8            push b
15517  6546 3B E4 68      mov d, _quadname_data ; $quadname
15518  6549 2D            mov b, d
15519  654A FD AB         swp b
15520  654C D8            push b
15521  654D 07 14 04      call strcpy
15522  6550 51 04 00      add sp, 4
15523  6553             _if251_exit:
15524  6553             ; if (small != 1) { 
15525  6553             _if252_cond:
15526  6553 FA 05 00      lea d, [bp + 5] ; $small
15527  6556 32            mov bl, [d]
15528  6557 A7 00         mov bh, 0
15529  6559             ; START RELATIONAL
15530  6559 D7            push a
15531  655A 11            mov a, b
15532  655B 26 01 00      mov b, $1
15533  655E B0            cmp a, b
15534  655F FD 72         sneq ; !=
15535  6561 E4            pop a
15536  6562             ; END RELATIONAL
15537  6562 C0 00 00      cmp b, 0
15538  6565 C6 BA 65      je _if252_exit
15539  6568             _if252_true:
15540  6568             ; if (x > 4) 
15541  6568             _if253_cond:
15542  6568 FA 07 00      lea d, [bp + 7] ; $x
15543  656B 32            mov bl, [d]
15544  656C A7 00         mov bh, 0
15545  656E             ; START RELATIONAL
15546  656E D7            push a
15547  656F 11            mov a, b
15548  6570 26 04 00      mov b, $4
15549  6573 B0            cmp a, b
15550  6574 FD 81         sgu ; > (unsigned)
15551  6576 E4            pop a
15552  6577             ; END RELATIONAL
15553  6577 C0 00 00      cmp b, 0
15554  657A C6 95 65      je _if253_exit
15555  657D             _if253_true:
15556  657D             ; x = x - 4; 
15557  657D FA 07 00      lea d, [bp + 7] ; $x
15558  6580 DA            push d
15559  6581 FA 07 00      lea d, [bp + 7] ; $x
15560  6584 32            mov bl, [d]
15561  6585 A7 00         mov bh, 0
15562  6587             ; START TERMS
15563  6587 D7            push a
15564  6588 11            mov a, b
15565  6589 26 04 00      mov b, $4
15566  658C 60            sub a, b
15567  658D 27            mov b, a
15568  658E E4            pop a
15569  658F             ; END TERMS
15570  658F E7            pop d
15571  6590 FD 3E         mov [d], bl
15572  6592 0A 95 65      jmp _if253_exit
15573  6595             _if253_exit:
15574  6595             ; strcat(quadname, sect_name[x]); 
15575  6595 3B 85 6A      mov d, st_quadrant_name_sect_name_dt ; static sect_name
15576  6598 D7            push a
15577  6599 DA            push d
15578  659A FA 07 00      lea d, [bp + 7] ; $x
15579  659D 32            mov bl, [d]
15580  659E A7 00         mov bh, 0
15581  65A0 E7            pop d
15582  65A1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
15583  65A5 E4            pop a
15584  65A6 2A            mov b, [d]
15585  65A7 FD AB         swp b
15586  65A9 D8            push b
15587  65AA 3B E4 68      mov d, _quadname_data ; $quadname
15588  65AD 2D            mov b, d
15589  65AE FD AB         swp b
15590  65B0 D8            push b
15591  65B1 07 D8 04      call strcat
15592  65B4 51 04 00      add sp, 4
15593  65B7 0A BA 65      jmp _if252_exit
15594  65BA             _if252_exit:
15595  65BA             ; return; 
15596  65BA F9            leave
15597  65BB 09            ret
15598  65BC             
15599  65BC             isqrt:
15600  65BC F8 00 00      enter 0 ; (push bp; mov bp, sp)
15601  65BF             ; unsigned int        b = 0x4000, q = 0, r = i, t; 
15602  65BF 52 02 00      sub sp, 2
15603  65C2             ; --- START LOCAL VAR INITIALIZATION
15604  65C2 FA FF FF      lea d, [bp + -1] ; $b
15605  65C5 DA            push d
15606  65C6 26 00 40      mov b, $4000
15607  65C9 E7            pop d
15608  65CA FD 43         mov [d], b
15609  65CC             ; --- END LOCAL VAR INITIALIZATION
15610  65CC 52 02 00      sub sp, 2
15611  65CF             ; --- START LOCAL VAR INITIALIZATION
15612  65CF FA FD FF      lea d, [bp + -3] ; $q
15613  65D2 DA            push d
15614  65D3 26 00 00      mov b, $0
15615  65D6 E7            pop d
15616  65D7 FD 43         mov [d], b
15617  65D9             ; --- END LOCAL VAR INITIALIZATION
15618  65D9 52 02 00      sub sp, 2
15619  65DC             ; --- START LOCAL VAR INITIALIZATION
15620  65DC FA FB FF      lea d, [bp + -5] ; $r
15621  65DF DA            push d
15622  65E0 FA 05 00      lea d, [bp + 5] ; $i
15623  65E3 2A            mov b, [d]
15624  65E4 E7            pop d
15625  65E5 FD 43         mov [d], b
15626  65E7             ; --- END LOCAL VAR INITIALIZATION
15627  65E7 52 02 00      sub sp, 2
15628  65EA             ; while (b) { 
15629  65EA             _while254_cond:
15630  65EA FA FF FF      lea d, [bp + -1] ; $b
15631  65ED 2A            mov b, [d]
15632  65EE C0 00 00      cmp b, 0
15633  65F1 C6 72 66      je _while254_exit
15634  65F4             _while254_block:
15635  65F4             ; t = q + b; 
15636  65F4 FA F9 FF      lea d, [bp + -7] ; $t
15637  65F7 DA            push d
15638  65F8 FA FD FF      lea d, [bp + -3] ; $q
15639  65FB 2A            mov b, [d]
15640  65FC             ; START TERMS
15641  65FC D7            push a
15642  65FD 11            mov a, b
15643  65FE FA FF FF      lea d, [bp + -1] ; $b
15644  6601 2A            mov b, [d]
15645  6602 56            add b, a
15646  6603 E4            pop a
15647  6604             ; END TERMS
15648  6604 E7            pop d
15649  6605 FD 43         mov [d], b
15650  6607             ; q =q>> 1; 
15651  6607 FA FD FF      lea d, [bp + -3] ; $q
15652  660A DA            push d
15653  660B FA FD FF      lea d, [bp + -3] ; $q
15654  660E 2A            mov b, [d]
15655  660F             ; START SHIFT
15656  660F D7            push a
15657  6610 11            mov a, b
15658  6611 26 01 00      mov b, $1
15659  6614 FD 39         mov c, b
15660  6616 A1            shr a, cl
15661  6617 27            mov b, a
15662  6618 E4            pop a
15663  6619             ; END SHIFT
15664  6619 E7            pop d
15665  661A FD 43         mov [d], b
15666  661C             ; if (r >= t) { 
15667  661C             _if255_cond:
15668  661C FA FB FF      lea d, [bp + -5] ; $r
15669  661F 2A            mov b, [d]
15670  6620             ; START RELATIONAL
15671  6620 D7            push a
15672  6621 11            mov a, b
15673  6622 FA F9 FF      lea d, [bp + -7] ; $t
15674  6625 2A            mov b, [d]
15675  6626 B0            cmp a, b
15676  6627 FD 82         sgeu ; >= (unsigned)
15677  6629 E4            pop a
15678  662A             ; END RELATIONAL
15679  662A C0 00 00      cmp b, 0
15680  662D C6 5A 66      je _if255_exit
15681  6630             _if255_true:
15682  6630             ; r =r- t; 
15683  6630 FA FB FF      lea d, [bp + -5] ; $r
15684  6633 DA            push d
15685  6634 FA FB FF      lea d, [bp + -5] ; $r
15686  6637 2A            mov b, [d]
15687  6638             ; START TERMS
15688  6638 D7            push a
15689  6639 11            mov a, b
15690  663A FA F9 FF      lea d, [bp + -7] ; $t
15691  663D 2A            mov b, [d]
15692  663E 60            sub a, b
15693  663F 27            mov b, a
15694  6640 E4            pop a
15695  6641             ; END TERMS
15696  6641 E7            pop d
15697  6642 FD 43         mov [d], b
15698  6644             ; q = q + b; 
15699  6644 FA FD FF      lea d, [bp + -3] ; $q
15700  6647 DA            push d
15701  6648 FA FD FF      lea d, [bp + -3] ; $q
15702  664B 2A            mov b, [d]
15703  664C             ; START TERMS
15704  664C D7            push a
15705  664D 11            mov a, b
15706  664E FA FF FF      lea d, [bp + -1] ; $b
15707  6651 2A            mov b, [d]
15708  6652 56            add b, a
15709  6653 E4            pop a
15710  6654             ; END TERMS
15711  6654 E7            pop d
15712  6655 FD 43         mov [d], b
15713  6657 0A 5A 66      jmp _if255_exit
15714  665A             _if255_exit:
15715  665A             ; b =b>> 2; 
15716  665A FA FF FF      lea d, [bp + -1] ; $b
15717  665D DA            push d
15718  665E FA FF FF      lea d, [bp + -1] ; $b
15719  6661 2A            mov b, [d]
15720  6662             ; START SHIFT
15721  6662 D7            push a
15722  6663 11            mov a, b
15723  6664 26 02 00      mov b, $2
15724  6667 FD 39         mov c, b
15725  6669 A1            shr a, cl
15726  666A 27            mov b, a
15727  666B E4            pop a
15728  666C             ; END SHIFT
15729  666C E7            pop d
15730  666D FD 43         mov [d], b
15731  666F 0A EA 65      jmp _while254_cond
15732  6672             _while254_exit:
15733  6672             ; return q; 
15734  6672 FA FD FF      lea d, [bp + -3] ; $q
15735  6675 2A            mov b, [d]
15736  6676 F9            leave
15737  6677 09            ret
15738  6678             
15739  6678             square00:
15740  6678 F8 00 00      enter 0 ; (push bp; mov bp, sp)
15741  667B             ; if (abs(t) > 181) { 
15742  667B             _if256_cond:
15743  667B FA 05 00      lea d, [bp + 5] ; $t
15744  667E 2A            mov b, [d]
15745  667F FD AB         swp b
15746  6681 D8            push b
15747  6682 07 04 1B      call abs
15748  6685 51 02 00      add sp, 2
15749  6688             ; START RELATIONAL
15750  6688 D7            push a
15751  6689 11            mov a, b
15752  668A 26 B5 00      mov b, $b5
15753  668D B0            cmp a, b
15754  668E FD 7F         sgt ; >
15755  6690 E4            pop a
15756  6691             ; END RELATIONAL
15757  6691 C0 00 00      cmp b, 0
15758  6694 C6 C2 66      je _if256_else
15759  6697             _if256_true:
15760  6697             ; t =t/ 10; 
15761  6697 FA 05 00      lea d, [bp + 5] ; $t
15762  669A DA            push d
15763  669B FA 05 00      lea d, [bp + 5] ; $t
15764  669E 2A            mov b, [d]
15765  669F             ; START FACTORS
15766  669F D7            push a
15767  66A0 11            mov a, b
15768  66A1 26 0A 00      mov b, $a
15769  66A4 AE            div a, b
15770  66A5 27            mov b, a
15771  66A6 E4            pop a
15772  66A7             ; END FACTORS
15773  66A7 E7            pop d
15774  66A8 FD 43         mov [d], b
15775  66AA             ; t =t* t; 
15776  66AA FA 05 00      lea d, [bp + 5] ; $t
15777  66AD DA            push d
15778  66AE FA 05 00      lea d, [bp + 5] ; $t
15779  66B1 2A            mov b, [d]
15780  66B2             ; START FACTORS
15781  66B2 D7            push a
15782  66B3 11            mov a, b
15783  66B4 FA 05 00      lea d, [bp + 5] ; $t
15784  66B7 2A            mov b, [d]
15785  66B8 AC            mul a, b ; *
15786  66B9 11            mov a, b
15787  66BA 27            mov b, a
15788  66BB E4            pop a
15789  66BC             ; END FACTORS
15790  66BC E7            pop d
15791  66BD FD 43         mov [d], b
15792  66BF 0A EA 66      jmp _if256_exit
15793  66C2             _if256_else:
15794  66C2             ; t =t* t; 
15795  66C2 FA 05 00      lea d, [bp + 5] ; $t
15796  66C5 DA            push d
15797  66C6 FA 05 00      lea d, [bp + 5] ; $t
15798  66C9 2A            mov b, [d]
15799  66CA             ; START FACTORS
15800  66CA D7            push a
15801  66CB 11            mov a, b
15802  66CC FA 05 00      lea d, [bp + 5] ; $t
15803  66CF 2A            mov b, [d]
15804  66D0 AC            mul a, b ; *
15805  66D1 11            mov a, b
15806  66D2 27            mov b, a
15807  66D3 E4            pop a
15808  66D4             ; END FACTORS
15809  66D4 E7            pop d
15810  66D5 FD 43         mov [d], b
15811  66D7             ; t =t/ 100; 
15812  66D7 FA 05 00      lea d, [bp + 5] ; $t
15813  66DA DA            push d
15814  66DB FA 05 00      lea d, [bp + 5] ; $t
15815  66DE 2A            mov b, [d]
15816  66DF             ; START FACTORS
15817  66DF D7            push a
15818  66E0 11            mov a, b
15819  66E1 26 64 00      mov b, $64
15820  66E4 AE            div a, b
15821  66E5 27            mov b, a
15822  66E6 E4            pop a
15823  66E7             ; END FACTORS
15824  66E7 E7            pop d
15825  66E8 FD 43         mov [d], b
15826  66EA             _if256_exit:
15827  66EA             ; return t; 
15828  66EA FA 05 00      lea d, [bp + 5] ; $t
15829  66ED 2A            mov b, [d]
15830  66EE F9            leave
15831  66EF 09            ret
15832  66F0             
15833  66F0             distance_to:
15834  66F0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
15835  66F3             ; unsigned int        j; 
15836  66F3 52 02 00      sub sp, 2
15837  66F6             ; j = square00(TO_FIXED00(k->y) - ship_y); 
15838  66F6 FA FF FF      lea d, [bp + -1] ; $j
15839  66F9 DA            push d
15840  66FA FA 05 00      lea d, [bp + 5] ; $k
15841  66FD FD 2A         mov d, [d]
15842  66FF 58 00 00      add d, 0
15843  6702 32            mov bl, [d]
15844  6703 A7 00         mov bh, 0
15845  6705 FD AB         swp b
15846  6707 D8            push b
15847  6708 07 C5 22      call TO_FIXED00
15848  670B 51 02 00      add sp, 2
15849  670E             ; START TERMS
15850  670E D7            push a
15851  670F 11            mov a, b
15852  6710 3B 9E 68      mov d, _ship_y ; $ship_y
15853  6713 2A            mov b, [d]
15854  6714 60            sub a, b
15855  6715 27            mov b, a
15856  6716 E4            pop a
15857  6717             ; END TERMS
15858  6717 FD AB         swp b
15859  6719 D8            push b
15860  671A 07 78 66      call square00
15861  671D 51 02 00      add sp, 2
15862  6720 E7            pop d
15863  6721 FD 43         mov [d], b
15864  6723             ; j = j + square00(TO_FIXED00(k->x) - ship_x); 
15865  6723 FA FF FF      lea d, [bp + -1] ; $j
15866  6726 DA            push d
15867  6727 FA FF FF      lea d, [bp + -1] ; $j
15868  672A 2A            mov b, [d]
15869  672B             ; START TERMS
15870  672B D7            push a
15871  672C 11            mov a, b
15872  672D FA 05 00      lea d, [bp + 5] ; $k
15873  6730 FD 2A         mov d, [d]
15874  6732 58 01 00      add d, 1
15875  6735 32            mov bl, [d]
15876  6736 A7 00         mov bh, 0
15877  6738 FD AB         swp b
15878  673A D8            push b
15879  673B 07 C5 22      call TO_FIXED00
15880  673E 51 02 00      add sp, 2
15881  6741             ; START TERMS
15882  6741 D7            push a
15883  6742 11            mov a, b
15884  6743 3B A0 68      mov d, _ship_x ; $ship_x
15885  6746 2A            mov b, [d]
15886  6747 60            sub a, b
15887  6748 27            mov b, a
15888  6749 E4            pop a
15889  674A             ; END TERMS
15890  674A FD AB         swp b
15891  674C D8            push b
15892  674D 07 78 66      call square00
15893  6750 51 02 00      add sp, 2
15894  6753 56            add b, a
15895  6754 E4            pop a
15896  6755             ; END TERMS
15897  6755 E7            pop d
15898  6756 FD 43         mov [d], b
15899  6758             ; j = isqrt(j); 
15900  6758 FA FF FF      lea d, [bp + -1] ; $j
15901  675B DA            push d
15902  675C FA FF FF      lea d, [bp + -1] ; $j
15903  675F 2A            mov b, [d]
15904  6760 FD AB         swp b
15905  6762 D8            push b
15906  6763 07 BC 65      call isqrt
15907  6766 51 02 00      add sp, 2
15908  6769 E7            pop d
15909  676A FD 43         mov [d], b
15910  676C             ; j =j* 10; 
15911  676C FA FF FF      lea d, [bp + -1] ; $j
15912  676F DA            push d
15913  6770 FA FF FF      lea d, [bp + -1] ; $j
15914  6773 2A            mov b, [d]
15915  6774             ; START FACTORS
15916  6774 D7            push a
15917  6775 11            mov a, b
15918  6776 26 0A 00      mov b, $a
15919  6779 AC            mul a, b ; *
15920  677A 11            mov a, b
15921  677B 27            mov b, a
15922  677C E4            pop a
15923  677D             ; END FACTORS
15924  677D E7            pop d
15925  677E FD 43         mov [d], b
15926  6780             ; return j; 
15927  6780 FA FF FF      lea d, [bp + -1] ; $j
15928  6783 2A            mov b, [d]
15929  6784 F9            leave
15930  6785 09            ret
15931  6786             
15932  6786             cint100:
15933  6786 F8 00 00      enter 0 ; (push bp; mov bp, sp)
15934  6789             ; return (d + 50) / 100; 
15935  6789 FA 05 00      lea d, [bp + 5] ; $d
15936  678C 2A            mov b, [d]
15937  678D             ; START TERMS
15938  678D D7            push a
15939  678E 11            mov a, b
15940  678F 26 32 00      mov b, $32
15941  6792 56            add b, a
15942  6793 E4            pop a
15943  6794             ; END TERMS
15944  6794             ; START FACTORS
15945  6794 D7            push a
15946  6795 11            mov a, b
15947  6796 26 64 00      mov b, $64
15948  6799 AE            div a, b
15949  679A 27            mov b, a
15950  679B E4            pop a
15951  679C             ; END FACTORS
15952  679C F9            leave
15953  679D 09            ret
15954  679E             
15955  679E             showfile:
15956  679E F8 00 00      enter 0 ; (push bp; mov bp, sp)
15957  67A1 F9            leave
15958  67A2 09            ret
15959  67A3             ; --- END TEXT BLOCK
15960  67A3             
15961  67A3             ; --- BEGIN DATA BLOCK
15962  67A3 00          _starbases: .fill 1, 0
15963  67A4 00          _base_y: .fill 1, 0
15964  67A5 00          _base_x: .fill 1, 0
15965  67A6 00          _starbases_left: .fill 1, 0
15966  67A7             _c_data: 
15967  67A7 00          .db 
15968  67A8 00          .db 
15969  67A9 00 00 00 FF .db $0,$0,$0,$ffff,$ffff,$ffff,$0,$1,$1,$1,$0,$1,$1,$1,$0,$ffff,$ffff,$ffff,$0,$1,$1,
15969  67AD FF FF 00 01 
15969  67B1 01 01 00 01 
15969  67B5 01 01 00 FF 
15969  67B9 FF FF 00 01 
15969  67BD 01 
15970  67BE 00 00 00 00 .fill 9, 0
15970  67C2 00 00 00 00 
15970  67C6 00 
15971  67C7 00          _docked: .fill 1, 0
15972  67C8 00 00       _energy: .fill 2, 0
15973  67CA B8 0B       _energy0: .dw 3000
15974  67CC 00 00 00 00 _map_data: .fill 162, 0
15974  67D0 00 00 00 00 
15974  67D4 00 00 00 00 
15974  67D8 00 00 00 00 
15974  67DC 00 00 00 00 
15974  67E0 00 00 00 00 
15974  67E4 00 00 00 00 
15974  67E8 00 00 00 00 
15974  67EC 00 00 00 00 
15974  67F0 00 00 00 00 
15974  67F4 00 00 00 00 
15974  67F8 00 00 00 00 
15974  67FC 00 00 00 00 
15974  6800 00 00 00 00 
15974  6804 00 00 00 00 
15974  6808 00 00 00 00 
15974  680C 00 00 00 00 
15974  6810 00 00 00 00 
15974  6814 00 00 00 00 
15974  6818 00 00 00 00 
15974  681C 00 00 00 00 
15974  6820 00 00 00 00 
15974  6824 00 00 00 00 
15974  6828 00 00 00 00 
15974  682C 00 00 00 00 
15974  6830 00 00 00 00 
15974  6834 00 00 00 00 
15974  6838 00 00 00 00 
15974  683C 00 00 00 00 
15974  6840 00 00 00 00 
15974  6844 00 00 00 00 
15974  6848 00 00 00 00 
15974  684C 00 00 00 00 
15974  6850 00 00 00 00 
15974  6854 00 00 00 00 
15974  6858 00 00 00 00 
15974  685C 00 00 00 00 
15974  6860 00 00 00 00 
15974  6864 00 00 00 00 
15974  6868 00 00 00 00 
15974  686C 00 00 
15975  686E 00 00 00 00 _kdata_data: .fill 12, 0
15975  6872 00 00 00 00 
15975  6876 00 00 00 00 
15976  687A 00          _klingons: .fill 1, 0
15977  687B 00          _total_klingons: .fill 1, 0
15978  687C 00          _klingons_left: .fill 1, 0
15979  687D 00          _torps: .fill 1, 0
15980  687E 0A          _torps0: .db 10
15981  687F 00 00       _quad_y: .fill 2, 0
15982  6881 00 00       _quad_x: .fill 2, 0
15983  6883 00 00       _shield: .fill 2, 0
15984  6885 00          _stars: .fill 1, 0
15985  6886 00 00       _time_start: .fill 2, 0
15986  6888 00 00       _time_up: .fill 2, 0
15987  688A 00 00 00 00 _damage_data: .fill 18, 0
15987  688E 00 00 00 00 
15987  6892 00 00 00 00 
15987  6896 00 00 00 00 
15987  689A 00 00 
15988  689C 00 00       _d4: .fill 2, 0
15989  689E 00 00       _ship_y: .fill 2, 0
15990  68A0 00 00       _ship_x: .fill 2, 0
15991  68A2 00 00       _stardate: .fill 2, 0
15992  68A4 00 00 00 00 _quad_data: .fill 64, 0
15992  68A8 00 00 00 00 
15992  68AC 00 00 00 00 
15992  68B0 00 00 00 00 
15992  68B4 00 00 00 00 
15992  68B8 00 00 00 00 
15992  68BC 00 00 00 00 
15992  68C0 00 00 00 00 
15992  68C4 00 00 00 00 
15992  68C8 00 00 00 00 
15992  68CC 00 00 00 00 
15992  68D0 00 00 00 00 
15992  68D4 00 00 00 00 
15992  68D8 00 00 00 00 
15992  68DC 00 00 00 00 
15992  68E0 00 00 00 00 
15993  68E4 00 00 00 00 _quadname_data: .fill 12, 0
15993  68E8 00 00 00 00 
15993  68EC 00 00 00 00 
15994  68F0 72 65 70 6F _inc_1_data: .db "reports:\n  Incorrect course data, sir!\n", 0
15994  68F4 72 74 73 3A 
15994  68F8 0A 20 20 49 
15994  68FC 6E 63 6F 72 
15994  6900 72 65 63 74 
15994  6904 20 63 6F 75 
15994  6908 72 73 65 20 
15994  690C 64 61 74 61 
15994  6910 2C 20 73 69 
15994  6914 72 21 0A 00 
15995  6918 F0 68       _inc_1: .dw _inc_1_data
15996  691A             _quad_name_data: 
15997  691A 00 00       .dw 
15998  691C 9B 6A 9C 6A .dw _s0, _s1, _s2, _s3, _s4, _s5, _s6, _s7, _s8, _s9, _s10, _s11, _s12, _s13, _s14, _s15, _s16, 
15998  6920 A4 6A AA 6A 
15998  6924 B2 6A B7 6A 
15998  6928 BF 6A C6 6A 
15998  692C D2 6A D9 6A 
15998  6930 E0 6A E6 6A 
15998  6934 EE 6A F9 6A 
15998  6938 03 6B 0B 6B 
15998  693C 14 6B 
15999  693E 00 00 00 00 .fill 34, 0
15999  6942 00 00 00 00 
15999  6946 00 00 00 00 
15999  694A 00 00 00 00 
15999  694E 00 00 00 00 
15999  6952 00 00 00 00 
15999  6956 00 00 00 00 
15999  695A 00 00 00 00 
15999  695E 00 00 
16000  6960             _device_name_data: 
16001  6960 00 00       .dw 
16002  6962 9B 6A 1A 6B .dw _s0, _s17, _s18, _s19, _s20, _s21, _s22, _s23, _s24, 
16002  6966 27 6B 3B 6B 
16002  696A 4E 6B 5D 6B 
16002  696E 6A 6B 79 6B 
16002  6972 88 6B 
16003  6974 00 00 00 00 .fill 18, 0
16003  6978 00 00 00 00 
16003  697C 00 00 00 00 
16003  6980 00 00 00 00 
16003  6984 00 00 
16004  6986 44 61 6D 61 _dcr_1_data: .db "Damage Control report:", 0
16004  698A 67 65 20 43 
16004  698E 6F 6E 74 72 
16004  6992 6F 6C 20 72 
16004  6996 65 70 6F 72 
16004  699A 74 3A 00 
16005  699D 86 69       _dcr_1: .dw _dcr_1_data
16006  699F             _plural_2_data: 
16007  699F 00          .db 
16008  69A0 00 00       .db $0,$0,
16009  69A2             _plural_data: 
16010  69A2 00          .db 
16011  69A3 69 73 00    .db $69,$73,$0,
16012  69A6 00          .fill 1, 0
16013  69A7             _warpmax_data: 
16014  69A7 00          .db 
16015  69A8 08          .db $8,
16016  69A9 00 00 00    .fill 3, 0
16017  69AC 2D 2D 2D 2D _srs_1_data: .db "------------------------", 0
16017  69B0 2D 2D 2D 2D 
16017  69B4 2D 2D 2D 2D 
16017  69B8 2D 2D 2D 2D 
16017  69BC 2D 2D 2D 2D 
16017  69C0 2D 2D 2D 2D 
16017  69C4 00 
16018  69C5 AC 69       _srs_1: .dw _srs_1_data
16019  69C7             _tilestr_data: 
16020  69C7 00 00       .dw 
16021  69C9 99 6B 9D 6B .dw _s25, _s26, _s27, _s28, _s29, 
16021  69CD A1 6B A5 6B 
16021  69D1 A9 6B 
16022  69D3 00 00 00 00 .fill 10, 0
16022  69D7 00 00 00 00 
16022  69DB 00 00 
16023  69DD 2D 2D 2D 2D _lrs_1_data: .db "-------------------\n", 0
16023  69E1 2D 2D 2D 2D 
16023  69E5 2D 2D 2D 2D 
16023  69E9 2D 2D 2D 2D 
16023  69ED 2D 2D 2D 0A 
16023  69F1 00 
16024  69F2 DD 69       _lrs_1: .dw _lrs_1_data
16025  69F4 20 20 20 2D _gr_1_data: .db "   ----- ----- ----- ----- ----- ----- ----- -----\n", 0
16025  69F8 2D 2D 2D 2D 
16025  69FC 20 2D 2D 2D 
16025  6A00 2D 2D 20 2D 
16025  6A04 2D 2D 2D 2D 
16025  6A08 20 2D 2D 2D 
16025  6A0C 2D 2D 20 2D 
16025  6A10 2D 2D 2D 2D 
16025  6A14 20 2D 2D 2D 
16025  6A18 2D 2D 20 2D 
16025  6A1C 2D 2D 2D 2D 
16025  6A20 20 2D 2D 2D 
16025  6A24 2D 2D 0A 00 
16026  6A28 F4 69       _gr_1: .dw _gr_1_data
16027  6A2A 73 00       _str_s_data: .db "s", 0
16028  6A2C 2A 6A       _str_s: .dw _str_s_data
16029  6A2E 20 20 2D 2D _gm_1_data: .db "  ----- ----- ----- ----- ----- ----- ----- -----\n", 0
16029  6A32 2D 2D 2D 20 
16029  6A36 2D 2D 2D 2D 
16029  6A3A 2D 20 2D 2D 
16029  6A3E 2D 2D 2D 20 
16029  6A42 2D 2D 2D 2D 
16029  6A46 2D 20 2D 2D 
16029  6A4A 2D 2D 2D 20 
16029  6A4E 2D 2D 2D 2D 
16029  6A52 2D 20 2D 2D 
16029  6A56 2D 2D 2D 20 
16029  6A5A 2D 2D 2D 2D 
16029  6A5E 2D 0A 00 
16030  6A61 2E 6A       _gm_1: .dw _gm_1_data
16031  6A63 20 20 44 49 _dist_1_data: .db "  DISTANCE = \n\n", 0
16031  6A67 53 54 41 4E 
16031  6A6B 43 45 20 3D 
16031  6A6F 20 0A 0A 00 
16032  6A73 63 6A       _dist_1: .dw _dist_1_data
16033  6A75 00 00 00 00 st_print100_buf_dt: .fill 16, 0
16033  6A79 00 00 00 00 
16033  6A7D 00 00 00 00 
16033  6A81 00 00 00 00 
16034  6A85             st_quadrant_name_sect_name_dt: 
16035  6A85 9B 6A B9 7E .dw _s0, _s177, _s178, _s179, _s180, 
16035  6A89 BC 7E C0 7E 
16035  6A8D C5 7E 
16036  6A8F 00 00 00 00 .fill 10, 0
16036  6A93 00 00 00 00 
16036  6A97 00 00 
16037  6A99 85 6A       st_quadrant_name_sect_name: .dw st_quadrant_name_sect_name_dt
16038  6A9B 00          _s0: .db "", 0
16039  6A9C 41 6E 74 61 _s1: .db "Antares", 0
16039  6AA0 72 65 73 00 
16040  6AA4 52 69 67 65 _s2: .db "Rigel", 0
16040  6AA8 6C 00 
16041  6AAA 50 72 6F 63 _s3: .db "Procyon", 0
16041  6AAE 79 6F 6E 00 
16042  6AB2 56 65 67 61 _s4: .db "Vega", 0
16042  6AB6 00 
16043  6AB7 43 61 6E 6F _s5: .db "Canopus", 0
16043  6ABB 70 75 73 00 
16044  6ABF 41 6C 74 61 _s6: .db "Altair", 0
16044  6AC3 69 72 00 
16045  6AC6 53 61 67 69 _s7: .db "Sagittarius", 0
16045  6ACA 74 74 61 72 
16045  6ACE 69 75 73 00 
16046  6AD2 50 6F 6C 6C _s8: .db "Pollux", 0
16046  6AD6 75 78 00 
16047  6AD9 53 69 72 69 _s9: .db "Sirius", 0
16047  6ADD 75 73 00 
16048  6AE0 44 65 6E 65 _s10: .db "Deneb", 0
16048  6AE4 62 00 
16049  6AE6 43 61 70 65 _s11: .db "Capella", 0
16049  6AEA 6C 6C 61 00 
16050  6AEE 42 65 74 65 _s12: .db "Betelgeuse", 0
16050  6AF2 6C 67 65 75 
16050  6AF6 73 65 00 
16051  6AF9 41 6C 64 65 _s13: .db "Aldebaran", 0
16051  6AFD 62 61 72 61 
16051  6B01 6E 00 
16052  6B03 52 65 67 75 _s14: .db "Regulus", 0
16052  6B07 6C 75 73 00 
16053  6B0B 41 72 63 74 _s15: .db "Arcturus", 0
16053  6B0F 75 72 75 73 
16053  6B13 00 
16054  6B14 53 70 69 63 _s16: .db "Spica", 0
16054  6B18 61 00 
16055  6B1A 57 61 72 70 _s17: .db "Warp engines", 0
16055  6B1E 20 65 6E 67 
16055  6B22 69 6E 65 73 
16055  6B26 00 
16056  6B27 53 68 6F 72 _s18: .db "Short range sensors", 0
16056  6B2B 74 20 72 61 
16056  6B2F 6E 67 65 20 
16056  6B33 73 65 6E 73 
16056  6B37 6F 72 73 00 
16057  6B3B 4C 6F 6E 67 _s19: .db "Long range sensors", 0
16057  6B3F 20 72 61 6E 
16057  6B43 67 65 20 73 
16057  6B47 65 6E 73 6F 
16057  6B4B 72 73 00 
16058  6B4E 50 68 61 73 _s20: .db "Phaser control", 0
16058  6B52 65 72 20 63 
16058  6B56 6F 6E 74 72 
16058  6B5A 6F 6C 00 
16059  6B5D 50 68 6F 74 _s21: .db "Photon tubes", 0
16059  6B61 6F 6E 20 74 
16059  6B65 75 62 65 73 
16059  6B69 00 
16060  6B6A 44 61 6D 61 _s22: .db "Damage control", 0
16060  6B6E 67 65 20 63 
16060  6B72 6F 6E 74 72 
16060  6B76 6F 6C 00 
16061  6B79 53 68 69 65 _s23: .db "Shield control", 0
16061  6B7D 6C 64 20 63 
16061  6B81 6F 6E 74 72 
16061  6B85 6F 6C 00 
16062  6B88 4C 69 62 72 _s24: .db "Library computer", 0
16062  6B8C 61 72 79 20 
16062  6B90 63 6F 6D 70 
16062  6B94 75 74 65 72 
16062  6B98 00 
16063  6B99 20 20 20 00 _s25: .db "   ", 0
16064  6B9D 20 2A 20 00 _s26: .db " * ", 0
16065  6BA1 3E 21 3C 00 _s27: .db ">!<", 0
16066  6BA5 2B 4B 2B 00 _s28: .db "+K+", 0
16067  6BA9 3C 2A 3E 00 _s29: .db "<*>", 0
16068  6BAD 55 6E 65 78 _s30: .db "Unexpected format in printf.", 0
16068  6BB1 70 65 63 74 
16068  6BB5 65 64 20 66 
16068  6BB9 6F 72 6D 61 
16068  6BBD 74 20 69 6E 
16068  6BC1 20 70 72 69 
16068  6BC5 6E 74 66 2E 
16068  6BC9 00 
16069  6BCA 45 72 72 6F _s31: .db "Error: Unknown argument type.\n", 0
16069  6BCE 72 3A 20 55 
16069  6BD2 6E 6B 6E 6F 
16069  6BD6 77 6E 20 61 
16069  6BDA 72 67 75 6D 
16069  6BDE 65 6E 74 20 
16069  6BE2 74 79 70 65 
16069  6BE6 2E 0A 00 
16070  6BE9 1B 5B 32 4A _s32: .db "\033[2J\033[H", 0
16070  6BED 1B 5B 48 00 
16071  6BF1 25 64 2E 25 _s33: .db "%d.%d", 0
16071  6BF5 64 00 
16072  6BF7 61 72 65 00 _s34: .db "are", 0
16073  6BFB 69 73 00    _s35: .db "is", 0
16074  6BFE 25 73 20 25 _s36: .db "%s %s inoperable.\n", 0
16074  6C02 73 20 69 6E 
16074  6C06 6F 70 65 72 
16074  6C0A 61 62 6C 65 
16074  6C0E 2E 0A 00 
16075  6C11 73 74 61 72 _s37: .db "startrek.intro", 0
16075  6C15 74 72 65 6B 
16075  6C19 2E 69 6E 74 
16075  6C1D 72 6F 00 
16076  6C20 73 74 61 72 _s38: .db "startrek.doc", 0
16076  6C24 74 72 65 6B 
16076  6C28 2E 64 6F 63 
16076  6C2C 00 
16077  6C2D 73 74 61 72 _s39: .db "startrek.logo", 0
16077  6C31 74 72 65 6B 
16077  6C35 2E 6C 6F 67 
16077  6C39 6F 00 
16078  6C3B 73 74 61 72 _s40: .db "startrek.fatal", 0
16078  6C3F 74 72 65 6B 
16078  6C43 2E 66 61 74 
16078  6C47 61 6C 00 
16079  6C4A 43 6F 6D 6D _s41: .db "Command? ", 0
16079  6C4E 61 6E 64 3F 
16079  6C52 20 00 
16080  6C54 6E 61 76 00 _s42: .db "nav", 0
16081  6C58 73 72 73 00 _s43: .db "srs", 0
16082  6C5C 6C 72 73 00 _s44: .db "lrs", 0
16083  6C60 70 68 61 00 _s45: .db "pha", 0
16084  6C64 74 6F 72 00 _s46: .db "tor", 0
16085  6C68 73 68 69 00 _s47: .db "shi", 0
16086  6C6C 64 61 6D 00 _s48: .db "dam", 0
16087  6C70 63 6F 6D 00 _s49: .db "com", 0
16088  6C74 78 78 78 00 _s50: .db "xxx", 0
16089  6C78 45 6E 74 65 _s51: .db "Enter one of the following:\n", 0
16089  6C7C 72 20 6F 6E 
16089  6C80 65 20 6F 66 
16089  6C84 20 74 68 65 
16089  6C88 20 66 6F 6C 
16089  6C8C 6C 6F 77 69 
16089  6C90 6E 67 3A 0A 
16089  6C94 00 
16090  6C95 20 20 6E 61 _s52: .db "  nav - To Set Course", 0
16090  6C99 76 20 2D 20 
16090  6C9D 54 6F 20 53 
16090  6CA1 65 74 20 43 
16090  6CA5 6F 75 72 73 
16090  6CA9 65 00 
16091  6CAB 20 20 73 72 _s53: .db "  srs - Short Range Sensors", 0
16091  6CAF 73 20 2D 20 
16091  6CB3 53 68 6F 72 
16091  6CB7 74 20 52 61 
16091  6CBB 6E 67 65 20 
16091  6CBF 53 65 6E 73 
16091  6CC3 6F 72 73 00 
16092  6CC7 20 20 6C 72 _s54: .db "  lrs - Long Range Sensors", 0
16092  6CCB 73 20 2D 20 
16092  6CCF 4C 6F 6E 67 
16092  6CD3 20 52 61 6E 
16092  6CD7 67 65 20 53 
16092  6CDB 65 6E 73 6F 
16092  6CDF 72 73 00 
16093  6CE2 20 20 70 68 _s55: .db "  pha - Phasers", 0
16093  6CE6 61 20 2D 20 
16093  6CEA 50 68 61 73 
16093  6CEE 65 72 73 00 
16094  6CF2 20 20 74 6F _s56: .db "  tor - Photon Torpedoes", 0
16094  6CF6 72 20 2D 20 
16094  6CFA 50 68 6F 74 
16094  6CFE 6F 6E 20 54 
16094  6D02 6F 72 70 65 
16094  6D06 64 6F 65 73 
16094  6D0A 00 
16095  6D0B 20 20 73 68 _s57: .db "  shi - Shield Control", 0
16095  6D0F 69 20 2D 20 
16095  6D13 53 68 69 65 
16095  6D17 6C 64 20 43 
16095  6D1B 6F 6E 74 72 
16095  6D1F 6F 6C 00 
16096  6D22 20 20 64 61 _s58: .db "  dam - Damage Control", 0
16096  6D26 6D 20 2D 20 
16096  6D2A 44 61 6D 61 
16096  6D2E 67 65 20 43 
16096  6D32 6F 6E 74 72 
16096  6D36 6F 6C 00 
16097  6D39 20 20 63 6F _s59: .db "  com - Library Computer", 0
16097  6D3D 6D 20 2D 20 
16097  6D41 4C 69 62 72 
16097  6D45 61 72 79 20 
16097  6D49 43 6F 6D 70 
16097  6D4D 75 74 65 72 
16097  6D51 00 
16098  6D52 20 20 78 78 _s60: .db "  xxx - Resign Command\n", 0
16098  6D56 78 20 2D 20 
16098  6D5A 52 65 73 69 
16098  6D5E 67 6E 20 43 
16098  6D62 6F 6D 6D 61 
16098  6D66 6E 64 0A 00 
16099  6D6A 73 00       _s61: .db "s", 0
16100  6D6C 59 6F 75 72 _s62: .db "Your orders are as follows:\nDestroy the %d Klingon warships which have", 0
16100  6D70 20 6F 72 64 
16100  6D74 65 72 73 20 
16100  6D78 61 72 65 20 
16100  6D7C 61 73 20 66 
16100  6D80 6F 6C 6C 6F 
16100  6D84 77 73 3A 0A 
16100  6D88 44 65 73 74 
16100  6D8C 72 6F 79 20 
16100  6D90 74 68 65 20 
16100  6D94 25 64 20 4B 
16100  6D98 6C 69 6E 67 
16100  6D9C 6F 6E 20 77 
16100  6DA0 61 72 73 68 
16100  6DA4 69 70 73 20 
16100  6DA8 77 68 69 63 
16100  6DAC 68 20 68 61 
16100  6DB0 76 65 00 
16101  6DB3 69 6E 76 61 _s63: .db "invaded\n the galaxy before they can attack Federation Headquarters\n", 0
16101  6DB7 64 65 64 0A 
16101  6DBB 20 74 68 65 
16101  6DBF 20 67 61 6C 
16101  6DC3 61 78 79 20 
16101  6DC7 62 65 66 6F 
16101  6DCB 72 65 20 74 
16101  6DCF 68 65 79 20 
16101  6DD3 63 61 6E 20 
16101  6DD7 61 74 74 61 
16101  6DDB 63 6B 20 46 
16101  6DDF 65 64 65 72 
16101  6DE3 61 74 69 6F 
16101  6DE7 6E 20 48 65 
16101  6DEB 61 64 71 75 
16101  6DEF 61 72 74 65 
16101  6DF3 72 73 0A 00 
16102  6DF7 20 6F 6E 20 _s64: .db " on stardate %u. This gives you %d days. There %s\n %d starbase%s in the galaxy", 0
16102  6DFB 73 74 61 72 
16102  6DFF 64 61 74 65 
16102  6E03 20 25 75 2E 
16102  6E07 20 54 68 69 
16102  6E0B 73 20 67 69 
16102  6E0F 76 65 73 20 
16102  6E13 79 6F 75 20 
16102  6E17 25 64 20 64 
16102  6E1B 61 79 73 2E 
16102  6E1F 20 54 68 65 
16102  6E23 72 65 20 25 
16102  6E27 73 0A 20 25 
16102  6E2B 64 20 73 74 
16102  6E2F 61 72 62 61 
16102  6E33 73 65 25 73 
16102  6E37 20 69 6E 20 
16102  6E3B 74 68 65 20 
16102  6E3F 67 61 6C 61 
16102  6E43 78 79 00 
16103  6E46 20 66 6F 72 _s65: .db " for resupplying your ship.\n\n Hit any key to accept command. ", 0
16103  6E4A 20 72 65 73 
16103  6E4E 75 70 70 6C 
16103  6E52 79 69 6E 67 
16103  6E56 20 79 6F 75 
16103  6E5A 72 20 73 68 
16103  6E5E 69 70 2E 0A 
16103  6E62 0A 20 48 69 
16103  6E66 74 20 61 6E 
16103  6E6A 79 20 6B 65 
16103  6E6E 79 20 74 6F 
16103  6E72 20 61 63 63 
16103  6E76 65 70 74 20 
16103  6E7A 63 6F 6D 6D 
16103  6E7E 61 6E 64 2E 
16103  6E82 20 00 
16104  6E84 4E 6F 77 20 _s66: .db "Now entering %s quadrant...\n\n", 0
16104  6E88 65 6E 74 65 
16104  6E8C 72 69 6E 67 
16104  6E90 20 25 73 20 
16104  6E94 71 75 61 64 
16104  6E98 72 61 6E 74 
16104  6E9C 2E 2E 2E 0A 
16104  6EA0 0A 00 
16105  6EA2 0A 59 6F 75 _s67: .db "\nYour mission begins with your starship located", 0
16105  6EA6 72 20 6D 69 
16105  6EAA 73 73 69 6F 
16105  6EAE 6E 20 62 65 
16105  6EB2 67 69 6E 73 
16105  6EB6 20 77 69 74 
16105  6EBA 68 20 79 6F 
16105  6EBE 75 72 20 73 
16105  6EC2 74 61 72 73 
16105  6EC6 68 69 70 20 
16105  6ECA 6C 6F 63 61 
16105  6ECE 74 65 64 00 
16106  6ED2 69 6E 20 74 _s68: .db "in the galactic quadrant %s.\n\n", 0
16106  6ED6 68 65 20 67 
16106  6EDA 61 6C 61 63 
16106  6EDE 74 69 63 20 
16106  6EE2 71 75 61 64 
16106  6EE6 72 61 6E 74 
16106  6EEA 20 25 73 2E 
16106  6EEE 0A 0A 00 
16107  6EF1 43 6F 6D 62 _s69: .db "Combat Area  Condition Red\n", 0
16107  6EF5 61 74 20 41 
16107  6EF9 72 65 61 20 
16107  6EFD 20 43 6F 6E 
16107  6F01 64 69 74 69 
16107  6F05 6F 6E 20 52 
16107  6F09 65 64 0A 00 
16108  6F0D 53 68 69 65 _s70: .db "Shields Dangerously Low\n", 0
16108  6F11 6C 64 73 20 
16108  6F15 44 61 6E 67 
16108  6F19 65 72 6F 75 
16108  6F1D 73 6C 79 20 
16108  6F21 4C 6F 77 0A 
16108  6F25 00 
16109  6F26 43 6F 75 72 _s71: .db "Course (0-9): ", 0
16109  6F2A 73 65 20 28 
16109  6F2E 30 2D 39 29 
16109  6F32 3A 20 00 
16110  6F35 4C 74 2E 20 _s72: .db "Lt. Sulu%s", 0
16110  6F39 53 75 6C 75 
16110  6F3D 25 73 00 
16111  6F40 30 2E 32 00 _s73: .db "0.2", 0
16112  6F44 57 61 72 70 _s74: .db "Warp Factor (0-%s): ", 0
16112  6F48 20 46 61 63 
16112  6F4C 74 6F 72 20 
16112  6F50 28 30 2D 25 
16112  6F54 73 29 3A 20 
16112  6F58 00 
16113  6F59 57 61 72 70 _s75: .db "Warp Engines are damaged. Maximum speed = Warp 0.2.\n\n", 0
16113  6F5D 20 45 6E 67 
16113  6F61 69 6E 65 73 
16113  6F65 20 61 72 65 
16113  6F69 20 64 61 6D 
16113  6F6D 61 67 65 64 
16113  6F71 2E 20 4D 61 
16113  6F75 78 69 6D 75 
16113  6F79 6D 20 73 70 
16113  6F7D 65 65 64 20 
16113  6F81 3D 20 57 61 
16113  6F85 72 70 20 30 
16113  6F89 2E 32 2E 0A 
16113  6F8D 0A 00 
16114  6F8F 43 68 69 65 _s76: .db "Chief Engineer Scott reports:\n  The engines wont take warp %s!\n\n", 0
16114  6F93 66 20 45 6E 
16114  6F97 67 69 6E 65 
16114  6F9B 65 72 20 53 
16114  6F9F 63 6F 74 74 
16114  6FA3 20 72 65 70 
16114  6FA7 6F 72 74 73 
16114  6FAB 3A 0A 20 20 
16114  6FAF 54 68 65 20 
16114  6FB3 65 6E 67 69 
16114  6FB7 6E 65 73 20 
16114  6FBB 77 6F 6E 74 
16114  6FBF 20 74 61 6B 
16114  6FC3 65 20 77 61 
16114  6FC7 72 70 20 25 
16114  6FCB 73 21 0A 0A 
16114  6FCF 00 
16115  6FD0 45 6E 67 69 _s77: .db "Engineering reports:\n  Insufficient energy available for maneuvering at warp %s!\n\n", 0
16115  6FD4 6E 65 65 72 
16115  6FD8 69 6E 67 20 
16115  6FDC 72 65 70 6F 
16115  6FE0 72 74 73 3A 
16115  6FE4 0A 20 20 49 
16115  6FE8 6E 73 75 66 
16115  6FEC 66 69 63 69 
16115  6FF0 65 6E 74 20 
16115  6FF4 65 6E 65 72 
16115  6FF8 67 79 20 61 
16115  6FFC 76 61 69 6C 
16115  7000 61 62 6C 65 
16115  7004 20 66 6F 72 
16115  7008 20 6D 61 6E 
16115  700C 65 75 76 65 
16115  7010 72 69 6E 67 
16115  7014 20 61 74 20 
16115  7018 77 61 72 70 
16115  701C 20 25 73 21 
16115  7020 0A 0A 00 
16116  7023 44 65 66 6C _s78: .db "Deflector Control Room acknowledges:\n  %d units of energy presently deployed to shields.\n", 0
16116  7027 65 63 74 6F 
16116  702B 72 20 43 6F 
16116  702F 6E 74 72 6F 
16116  7033 6C 20 52 6F 
16116  7037 6F 6D 20 61 
16116  703B 63 6B 6E 6F 
16116  703F 77 6C 65 64 
16116  7043 67 65 73 3A 
16116  7047 0A 20 20 25 
16116  704B 64 20 75 6E 
16116  704F 69 74 73 20 
16116  7053 6F 66 20 65 
16116  7057 6E 65 72 67 
16116  705B 79 20 70 72 
16116  705F 65 73 65 6E 
16116  7063 74 6C 79 20 
16116  7067 64 65 70 6C 
16116  706B 6F 79 65 64 
16116  706F 20 74 6F 20 
16116  7073 73 68 69 65 
16116  7077 6C 64 73 2E 
16116  707B 0A 00 
16117  707D 4C 54 2E 20 _s79: .db "LT. Uhura reports:\n Message from Starfleet Command:\n\n ", 0
16117  7081 55 68 75 72 
16117  7085 61 20 72 65 
16117  7089 70 6F 72 74 
16117  708D 73 3A 0A 20 
16117  7091 4D 65 73 73 
16117  7095 61 67 65 20 
16117  7099 66 72 6F 6D 
16117  709D 20 53 74 61 
16117  70A1 72 66 6C 65 
16117  70A5 65 74 20 43 
16117  70A9 6F 6D 6D 61 
16117  70AD 6E 64 3A 0A 
16117  70B1 0A 20 00 
16118  70B4 50 65 72 6D _s80: .db "Permission to attempt crossing of galactic perimeter\n is hereby *denied*. ", 0
16118  70B8 69 73 73 69 
16118  70BC 6F 6E 20 74 
16118  70C0 6F 20 61 74 
16118  70C4 74 65 6D 70 
16118  70C8 74 20 63 72 
16118  70CC 6F 73 73 69 
16118  70D0 6E 67 20 6F 
16118  70D4 66 20 67 61 
16118  70D8 6C 61 63 74 
16118  70DC 69 63 20 70 
16118  70E0 65 72 69 6D 
16118  70E4 65 74 65 72 
16118  70E8 0A 20 69 73 
16118  70EC 20 68 65 72 
16118  70F0 65 62 79 20 
16118  70F4 2A 64 65 6E 
16118  70F8 69 65 64 2A 
16118  70FC 2E 20 00 
16119  70FF 53 68 75 74 _s81: .db "Shut down your engines.\n\n Chief Engineer Scott reports:\n ", 0
16119  7103 20 64 6F 77 
16119  7107 6E 20 79 6F 
16119  710B 75 72 20 65 
16119  710F 6E 67 69 6E 
16119  7113 65 73 2E 0A 
16119  7117 0A 20 43 68 
16119  711B 69 65 66 20 
16119  711F 45 6E 67 69 
16119  7123 6E 65 65 72 
16119  7127 20 53 63 6F 
16119  712B 74 74 20 72 
16119  712F 65 70 6F 72 
16119  7133 74 73 3A 0A 
16119  7137 20 00 
16120  7139 57 61 72 70 _s82: .db "Warp Engines shut down at sector %d, %d of quadrant %d, %d.\n\n", 0
16120  713D 20 45 6E 67 
16120  7141 69 6E 65 73 
16120  7145 20 73 68 75 
16120  7149 74 20 64 6F 
16120  714D 77 6E 20 61 
16120  7151 74 20 73 65 
16120  7155 63 74 6F 72 
16120  7159 20 25 64 2C 
16120  715D 20 25 64 20 
16120  7161 6F 66 20 71 
16120  7165 75 61 64 72 
16120  7169 61 6E 74 20 
16120  716D 25 64 2C 20 
16120  7171 25 64 2E 0A 
16120  7175 0A 00 
16121  7177 57 61 72 70 _s83: .db "Warp Engines shut down at sector %d, %d due to bad navigation.\n\n", 0
16121  717B 20 45 6E 67 
16121  717F 69 6E 65 73 
16121  7183 20 73 68 75 
16121  7187 74 20 64 6F 
16121  718B 77 6E 20 61 
16121  718F 74 20 73 65 
16121  7193 63 74 6F 72 
16121  7197 20 25 64 2C 
16121  719B 20 25 64 20 
16121  719F 64 75 65 20 
16121  71A3 74 6F 20 62 
16121  71A7 61 64 20 6E 
16121  71AB 61 76 69 67 
16121  71AF 61 74 69 6F 
16121  71B3 6E 2E 0A 0A 
16121  71B7 00 
16122  71B8 53 68 69 65 _s84: .db "Shield Control supplies energy to complete maneuver.\n", 0
16122  71BC 6C 64 20 43 
16122  71C0 6F 6E 74 72 
16122  71C4 6F 6C 20 73 
16122  71C8 75 70 70 6C 
16122  71CC 69 65 73 20 
16122  71D0 65 6E 65 72 
16122  71D4 67 79 20 74 
16122  71D8 6F 20 63 6F 
16122  71DC 6D 70 6C 65 
16122  71E0 74 65 20 6D 
16122  71E4 61 6E 65 75 
16122  71E8 76 65 72 2E 
16122  71EC 0A 00 
16123  71EE 47 52 45 45 _s85: .db "GREEN", 0
16123  71F2 4E 00 
16124  71F4 59 45 4C 4C _s86: .db "YELLOW", 0
16124  71F8 4F 57 00 
16125  71FB 2A 52 45 44 _s87: .db "*RED*", 0
16125  71FF 2A 00 
16126  7201 44 4F 43 4B _s88: .db "DOCKED", 0
16126  7205 45 44 00 
16127  7208 53 68 69 65 _s89: .db "Shields dropped for docking purposes.", 0
16127  720C 6C 64 73 20 
16127  7210 64 72 6F 70 
16127  7214 70 65 64 20 
16127  7218 66 6F 72 20 
16127  721C 64 6F 63 6B 
16127  7220 69 6E 67 20 
16127  7224 70 75 72 70 
16127  7228 6F 73 65 73 
16127  722C 2E 00 
16128  722E 0A 2A 2A 2A _s90: .db "\n*** Short Range Sensors are out ***", 0
16128  7232 20 53 68 6F 
16128  7236 72 74 20 52 
16128  723A 61 6E 67 65 
16128  723E 20 53 65 6E 
16128  7242 73 6F 72 73 
16128  7246 20 61 72 65 
16128  724A 20 6F 75 74 
16128  724E 20 2A 2A 2A 
16128  7252 00 
16129  7253 20 20 20 20 _s91: .db "    Stardate            %d\n", 0
16129  7257 53 74 61 72 
16129  725B 64 61 74 65 
16129  725F 20 20 20 20 
16129  7263 20 20 20 20 
16129  7267 20 20 20 20 
16129  726B 25 64 0A 00 
16130  726F 20 20 20 20 _s92: .db "    Condition           %s\n", 0
16130  7273 43 6F 6E 64 
16130  7277 69 74 69 6F 
16130  727B 6E 20 20 20 
16130  727F 20 20 20 20 
16130  7283 20 20 20 20 
16130  7287 25 73 0A 00 
16131  728B 20 20 20 20 _s93: .db "    Quadrant            %d, %d\n", 0
16131  728F 51 75 61 64 
16131  7293 72 61 6E 74 
16131  7297 20 20 20 20 
16131  729B 20 20 20 20 
16131  729F 20 20 20 20 
16131  72A3 25 64 2C 20 
16131  72A7 25 64 0A 00 
16132  72AB 20 20 20 20 _s94: .db "    Sector              %d, %d\n", 0
16132  72AF 53 65 63 74 
16132  72B3 6F 72 20 20 
16132  72B7 20 20 20 20 
16132  72BB 20 20 20 20 
16132  72BF 20 20 20 20 
16132  72C3 25 64 2C 20 
16132  72C7 25 64 0A 00 
16133  72CB 20 20 20 20 _s95: .db "    Photon Torpedoes    %d\n", 0
16133  72CF 50 68 6F 74 
16133  72D3 6F 6E 20 54 
16133  72D7 6F 72 70 65 
16133  72DB 64 6F 65 73 
16133  72DF 20 20 20 20 
16133  72E3 25 64 0A 00 
16134  72E7 20 20 20 20 _s96: .db "    Total Energy        %d\n", 0
16134  72EB 54 6F 74 61 
16134  72EF 6C 20 45 6E 
16134  72F3 65 72 67 79 
16134  72F7 20 20 20 20 
16134  72FB 20 20 20 20 
16134  72FF 25 64 0A 00 
16135  7303 20 20 20 20 _s97: .db "    Shields             %d\n", 0
16135  7307 53 68 69 65 
16135  730B 6C 64 73 20 
16135  730F 20 20 20 20 
16135  7313 20 20 20 20 
16135  7317 20 20 20 20 
16135  731B 25 64 0A 00 
16136  731F 20 20 20 20 _s98: .db "    Klingons Remaining  %d\n", 0
16136  7323 4B 6C 69 6E 
16136  7327 67 6F 6E 73 
16136  732B 20 52 65 6D 
16136  732F 61 69 6E 69 
16136  7333 6E 67 20 20 
16136  7337 25 64 0A 00 
16137  733B 4C 6F 6E 67 _s99: .db "Long Range Scan for Quadrant %d, %d\n\n", 0
16137  733F 20 52 61 6E 
16137  7343 67 65 20 53 
16137  7347 63 61 6E 20 
16137  734B 66 6F 72 20 
16137  734F 51 75 61 64 
16137  7353 72 61 6E 74 
16137  7357 20 25 64 2C 
16137  735B 20 25 64 0A 
16137  735F 0A 00 
16138  7361 25 73 3A 00 _s100: .db "%s:", 0
16139  7365 2A 2A 2A 00 _s101: .db "***", 0
16140  7369 20 3A 00    _s102: .db " :", 0
16141  736C 25 73 0A 00 _s103: .db "%s\n", 0
16142  7370 53 63 69 65 _s104: .db "Science Officer Spock reports:\n  'Sensors show no enemy ships in this quadrant'\n", 0
16142  7374 6E 63 65 20 
16142  7378 4F 66 66 69 
16142  737C 63 65 72 20 
16142  7380 53 70 6F 63 
16142  7384 6B 20 72 65 
16142  7388 70 6F 72 74 
16142  738C 73 3A 0A 20 
16142  7390 20 27 53 65 
16142  7394 6E 73 6F 72 
16142  7398 73 20 73 68 
16142  739C 6F 77 20 6E 
16142  73A0 6F 20 65 6E 
16142  73A4 65 6D 79 20 
16142  73A8 73 68 69 70 
16142  73AC 73 20 69 6E 
16142  73B0 20 74 68 69 
16142  73B4 73 20 71 75 
16142  73B8 61 64 72 61 
16142  73BC 6E 74 27 0A 
16142  73C0 00 
16143  73C1 43 6F 6D 70 _s105: .db "Computer failure hampers accuracy.", 0
16143  73C5 75 74 65 72 
16143  73C9 20 66 61 69 
16143  73CD 6C 75 72 65 
16143  73D1 20 68 61 6D 
16143  73D5 70 65 72 73 
16143  73D9 20 61 63 63 
16143  73DD 75 72 61 63 
16143  73E1 79 2E 00 
16144  73E4 50 68 61 73 _s106: .db "Phasers locked on target;\n Energy available = %d units\n\n Number of units to fire: ", 0
16144  73E8 65 72 73 20 
16144  73EC 6C 6F 63 6B 
16144  73F0 65 64 20 6F 
16144  73F4 6E 20 74 61 
16144  73F8 72 67 65 74 
16144  73FC 3B 0A 20 45 
16144  7400 6E 65 72 67 
16144  7404 79 20 61 76 
16144  7408 61 69 6C 61 
16144  740C 62 6C 65 20 
16144  7410 3D 20 25 64 
16144  7414 20 75 6E 69 
16144  7418 74 73 0A 0A 
16144  741C 20 4E 75 6D 
16144  7420 62 65 72 20 
16144  7424 6F 66 20 75 
16144  7428 6E 69 74 73 
16144  742C 20 74 6F 20 
16144  7430 66 69 72 65 
16144  7434 3A 20 00 
16145  7437 4E 6F 74 20 _s107: .db "Not enough energy available.\n", 0
16145  743B 65 6E 6F 75 
16145  743F 67 68 20 65 
16145  7443 6E 65 72 67 
16145  7447 79 20 61 76 
16145  744B 61 69 6C 61 
16145  744F 62 6C 65 2E 
16145  7453 0A 00 
16146  7455 53 65 6E 73 _s108: .db "Sensors show no damage to enemy at %d, %d\n\n", 0
16146  7459 6F 72 73 20 
16146  745D 73 68 6F 77 
16146  7461 20 6E 6F 20 
16146  7465 64 61 6D 61 
16146  7469 67 65 20 74 
16146  746D 6F 20 65 6E 
16146  7471 65 6D 79 20 
16146  7475 61 74 20 25 
16146  7479 64 2C 20 25 
16146  747D 64 0A 0A 00 
16147  7481 25 64 20 75 _s109: .db "%d unit hit on Klingon at sector %d, %d\n", 0
16147  7485 6E 69 74 20 
16147  7489 68 69 74 20 
16147  748D 6F 6E 20 4B 
16147  7491 6C 69 6E 67 
16147  7495 6F 6E 20 61 
16147  7499 74 20 73 65 
16147  749D 63 74 6F 72 
16147  74A1 20 25 64 2C 
16147  74A5 20 25 64 0A 
16147  74A9 00 
16148  74AA 2A 2A 2A 20 _s110: .db "*** Klingon Destroyed ***\n", 0
16148  74AE 4B 6C 69 6E 
16148  74B2 67 6F 6E 20 
16148  74B6 44 65 73 74 
16148  74BA 72 6F 79 65 
16148  74BE 64 20 2A 2A 
16148  74C2 2A 0A 00 
16149  74C5 20 20 20 28 _s111: .db "   (Sensors show %d units remaining.)\n\n", 0
16149  74C9 53 65 6E 73 
16149  74CD 6F 72 73 20 
16149  74D1 73 68 6F 77 
16149  74D5 20 25 64 20 
16149  74D9 75 6E 69 74 
16149  74DD 73 20 72 65 
16149  74E1 6D 61 69 6E 
16149  74E5 69 6E 67 2E 
16149  74E9 29 0A 0A 00 
16150  74ED 41 6C 6C 20 _s112: .db "All photon torpedoes expended", 0
16150  74F1 70 68 6F 74 
16150  74F5 6F 6E 20 74 
16150  74F9 6F 72 70 65 
16150  74FD 64 6F 65 73 
16150  7501 20 65 78 70 
16150  7505 65 6E 64 65 
16150  7509 64 00 
16151  750B 45 6E 73 69 _s113: .db "Ensign Chekov%s", 0
16151  750F 67 6E 20 43 
16151  7513 68 65 6B 6F 
16151  7517 76 25 73 00 
16152  751B 54 6F 72 70 _s114: .db "Torpedo Track:", 0
16152  751F 65 64 6F 20 
16152  7523 54 72 61 63 
16152  7527 6B 3A 00 
16153  752A 20 20 20 20 _s115: .db "    %d, %d\n", 0
16153  752E 25 64 2C 20 
16153  7532 25 64 0A 00 
16154  7536 54 6F 72 70 _s116: .db "Torpedo Missed\n", 0
16154  753A 65 64 6F 20 
16154  753E 4D 69 73 73 
16154  7542 65 64 0A 00 
16155  7546 53 74 61 72 _s117: .db "Star at %d, %d absorbed torpedo energy.\n\n", 0
16155  754A 20 61 74 20 
16155  754E 25 64 2C 20 
16155  7552 25 64 20 61 
16155  7556 62 73 6F 72 
16155  755A 62 65 64 20 
16155  755E 74 6F 72 70 
16155  7562 65 64 6F 20 
16155  7566 65 6E 65 72 
16155  756A 67 79 2E 0A 
16155  756E 0A 00 
16156  7570 2A 2A 2A 20 _s118: .db "*** Starbase Destroyed ***", 0
16156  7574 53 74 61 72 
16156  7578 62 61 73 65 
16156  757C 20 44 65 73 
16156  7580 74 72 6F 79 
16156  7584 65 64 20 2A 
16156  7588 2A 2A 00 
16157  758B 54 68 61 74 _s119: .db "That does it, Captain!!", 0
16157  758F 20 64 6F 65 
16157  7593 73 20 69 74 
16157  7597 2C 20 43 61 
16157  759B 70 74 61 69 
16157  759F 6E 21 21 00 
16158  75A3 59 6F 75 20 _s120: .db "You are hereby relieved of command\n", 0
16158  75A7 61 72 65 20 
16158  75AB 68 65 72 65 
16158  75AF 62 79 20 72 
16158  75B3 65 6C 69 65 
16158  75B7 76 65 64 20 
16158  75BB 6F 66 20 63 
16158  75BF 6F 6D 6D 61 
16158  75C3 6E 64 0A 00 
16159  75C7 61 6E 64 20 _s121: .db "and sentenced to 99 stardates of hard", 0
16159  75CB 73 65 6E 74 
16159  75CF 65 6E 63 65 
16159  75D3 64 20 74 6F 
16159  75D7 20 39 39 20 
16159  75DB 73 74 61 72 
16159  75DF 64 61 74 65 
16159  75E3 73 20 6F 66 
16159  75E7 20 68 61 72 
16159  75EB 64 00 
16160  75ED 6C 61 62 6F _s122: .db "labor on Cygnus 12!!\n", 0
16160  75F1 72 20 6F 6E 
16160  75F5 20 43 79 67 
16160  75F9 6E 75 73 20 
16160  75FD 31 32 21 21 
16160  7601 0A 00 
16161  7603 53 74 61 72 _s123: .db "Starfleet Command reviewing your record to consider\n court martial!\n", 0
16161  7607 66 6C 65 65 
16161  760B 74 20 43 6F 
16161  760F 6D 6D 61 6E 
16161  7613 64 20 72 65 
16161  7617 76 69 65 77 
16161  761B 69 6E 67 20 
16161  761F 79 6F 75 72 
16161  7623 20 72 65 63 
16161  7627 6F 72 64 20 
16161  762B 74 6F 20 63 
16161  762F 6F 6E 73 69 
16161  7633 64 65 72 0A 
16161  7637 20 63 6F 75 
16161  763B 72 74 20 6D 
16161  763F 61 72 74 69 
16161  7643 61 6C 21 0A 
16161  7647 00 
16162  7648 44 61 6D 61 _s124: .db "Damage Control report not available.", 0
16162  764C 67 65 20 43 
16162  7650 6F 6E 74 72 
16162  7654 6F 6C 20 72 
16162  7658 65 70 6F 72 
16162  765C 74 20 6E 6F 
16162  7660 74 20 61 76 
16162  7664 61 69 6C 61 
16162  7668 62 6C 65 2E 
16162  766C 00 
16163  766D 0A 54 65 63 _s125: .db "\nTechnicians standing by to effect repairs to your ship;\n", 0
16163  7671 68 6E 69 63 
16163  7675 69 61 6E 73 
16163  7679 20 73 74 61 
16163  767D 6E 64 69 6E 
16163  7681 67 20 62 79 
16163  7685 20 74 6F 20 
16163  7689 65 66 66 65 
16163  768D 63 74 20 72 
16163  7691 65 70 61 69 
16163  7695 72 73 20 74 
16163  7699 6F 20 79 6F 
16163  769D 75 72 20 73 
16163  76A1 68 69 70 3B 
16163  76A5 0A 00 
16164  76A7 45 73 74 69 _s126: .db "Estimated time to repair: %s stardates.\n Will you authorize the repair order (y/N)? ", 0
16164  76AB 6D 61 74 65 
16164  76AF 64 20 74 69 
16164  76B3 6D 65 20 74 
16164  76B7 6F 20 72 65 
16164  76BB 70 61 69 72 
16164  76BF 3A 20 25 73 
16164  76C3 20 73 74 61 
16164  76C7 72 64 61 74 
16164  76CB 65 73 2E 0A 
16164  76CF 20 57 69 6C 
16164  76D3 6C 20 79 6F 
16164  76D7 75 20 61 75 
16164  76DB 74 68 6F 72 
16164  76DF 69 7A 65 20 
16164  76E3 74 68 65 20 
16164  76E7 72 65 70 61 
16164  76EB 69 72 20 6F 
16164  76EF 72 64 65 72 
16164  76F3 20 28 79 2F 
16164  76F7 4E 29 3F 20 
16164  76FB 00 
16165  76FC 44 65 76 69 _s127: .db "Device            State of Repair", 0
16165  7700 63 65 20 20 
16165  7704 20 20 20 20 
16165  7708 20 20 20 20 
16165  770C 20 20 53 74 
16165  7710 61 74 65 20 
16165  7714 6F 66 20 52 
16165  7718 65 70 61 69 
16165  771C 72 00 
16166  771E 25 2D 32 35 _s128: .db "%-25s%6s\n", 0
16166  7722 73 25 36 73 
16166  7726 0A 00 
16167  7728 0A 00       _s129: .db "\n", 0
16168  772A 45 6E 65 72 _s130: .db "Energy available = %d\n\n Input number of units to shields: ", 0
16168  772E 67 79 20 61 
16168  7732 76 61 69 6C 
16168  7736 61 62 6C 65 
16168  773A 20 3D 20 25 
16168  773E 64 0A 0A 20 
16168  7742 49 6E 70 75 
16168  7746 74 20 6E 75 
16168  774A 6D 62 65 72 
16168  774E 20 6F 66 20 
16168  7752 75 6E 69 74 
16168  7756 73 20 74 6F 
16168  775A 20 73 68 69 
16168  775E 65 6C 64 73 
16168  7762 3A 20 00 
16169  7765 3C 53 68 69 _s131: .db "<Shields Unchanged>\n", 0
16169  7769 65 6C 64 73 
16169  776D 20 55 6E 63 
16169  7771 68 61 6E 67 
16169  7775 65 64 3E 0A 
16169  7779 00 
16170  777A 53 68 69 65 _s132: .db "Shield Control Reports:\n  This is not the Federation Treasury.", 0
16170  777E 6C 64 20 43 
16170  7782 6F 6E 74 72 
16170  7786 6F 6C 20 52 
16170  778A 65 70 6F 72 
16170  778E 74 73 3A 0A 
16170  7792 20 20 54 68 
16170  7796 69 73 20 69 
16170  779A 73 20 6E 6F 
16170  779E 74 20 74 68 
16170  77A2 65 20 46 65 
16170  77A6 64 65 72 61 
16170  77AA 74 69 6F 6E 
16170  77AE 20 54 72 65 
16170  77B2 61 73 75 72 
16170  77B6 79 2E 00 
16171  77B9 44 65 66 6C _s133: .db "Deflector Control Room report:\n  Shields now at %d units per your command.\n\n", 0
16171  77BD 65 63 74 6F 
16171  77C1 72 20 43 6F 
16171  77C5 6E 74 72 6F 
16171  77C9 6C 20 52 6F 
16171  77CD 6F 6D 20 72 
16171  77D1 65 70 6F 72 
16171  77D5 74 3A 0A 20 
16171  77D9 20 53 68 69 
16171  77DD 65 6C 64 73 
16171  77E1 20 6E 6F 77 
16171  77E5 20 61 74 20 
16171  77E9 25 64 20 75 
16171  77ED 6E 69 74 73 
16171  77F1 20 70 65 72 
16171  77F5 20 79 6F 75 
16171  77F9 72 20 63 6F 
16171  77FD 6D 6D 61 6E 
16171  7801 64 2E 0A 0A 
16171  7805 00 
16172  7806 43 6F 6D 70 _s134: .db "Computer active and awating command: ", 0
16172  780A 75 74 65 72 
16172  780E 20 61 63 74 
16172  7812 69 76 65 20 
16172  7816 61 6E 64 20 
16172  781A 61 77 61 74 
16172  781E 69 6E 67 20 
16172  7822 63 6F 6D 6D 
16172  7826 61 6E 64 3A 
16172  782A 20 00 
16173  782C 46 75 6E 63 _s135: .db "Functions available from Library-Computer:\n\n", 0
16173  7830 74 69 6F 6E 
16173  7834 73 20 61 76 
16173  7838 61 69 6C 61 
16173  783C 62 6C 65 20 
16173  7840 66 72 6F 6D 
16173  7844 20 4C 69 62 
16173  7848 72 61 72 79 
16173  784C 2D 43 6F 6D 
16173  7850 70 75 74 65 
16173  7854 72 3A 0A 0A 
16173  7858 00 
16174  7859 20 20 20 30 _s136: .db "   0 = Cumulative Galactic Record\n", 0
16174  785D 20 3D 20 43 
16174  7861 75 6D 75 6C 
16174  7865 61 74 69 76 
16174  7869 65 20 47 61 
16174  786D 6C 61 63 74 
16174  7871 69 63 20 52 
16174  7875 65 63 6F 72 
16174  7879 64 0A 00 
16175  787C 20 20 20 31 _s137: .db "   1 = Status Report\n", 0
16175  7880 20 3D 20 53 
16175  7884 74 61 74 75 
16175  7888 73 20 52 65 
16175  788C 70 6F 72 74 
16175  7890 0A 00 
16176  7892 20 20 20 32 _s138: .db "   2 = Photon Torpedo Data\n", 0
16176  7896 20 3D 20 50 
16176  789A 68 6F 74 6F 
16176  789E 6E 20 54 6F 
16176  78A2 72 70 65 64 
16176  78A6 6F 20 44 61 
16176  78AA 74 61 0A 00 
16177  78AE 20 20 20 33 _s139: .db "   3 = Starbase Nav Data\n", 0
16177  78B2 20 3D 20 53 
16177  78B6 74 61 72 62 
16177  78BA 61 73 65 20 
16177  78BE 4E 61 76 20 
16177  78C2 44 61 74 61 
16177  78C6 0A 00 
16178  78C8 20 20 20 34 _s140: .db "   4 = Direction/Distance Calculator\n", 0
16178  78CC 20 3D 20 44 
16178  78D0 69 72 65 63 
16178  78D4 74 69 6F 6E 
16178  78D8 2F 44 69 73 
16178  78DC 74 61 6E 63 
16178  78E0 65 20 43 61 
16178  78E4 6C 63 75 6C 
16178  78E8 61 74 6F 72 
16178  78EC 0A 00 
16179  78EE 20 20 20 35 _s141: .db "   5 = Galaxy Region Name Map\n", 0
16179  78F2 20 3D 20 47 
16179  78F6 61 6C 61 78 
16179  78FA 79 20 52 65 
16179  78FE 67 69 6F 6E 
16179  7902 20 4E 61 6D 
16179  7906 65 20 4D 61 
16179  790A 70 0A 00 
16180  790D 0A 20 20 20 _s142: .db "\n     Computer Record of Galaxy for Quadrant %d,%d\n\n", 0
16180  7911 20 20 43 6F 
16180  7915 6D 70 75 74 
16180  7919 65 72 20 52 
16180  791D 65 63 6F 72 
16180  7921 64 20 6F 66 
16180  7925 20 47 61 6C 
16180  7929 61 78 79 20 
16180  792D 66 6F 72 20 
16180  7931 51 75 61 64 
16180  7935 72 61 6E 74 
16180  7939 20 25 64 2C 
16180  793D 25 64 0A 0A 
16180  7941 00 
16181  7942 20 20 20 20 _s143: .db "     1     2     3     4     5     6     7     8", 0
16181  7946 20 31 20 20 
16181  794A 20 20 20 32 
16181  794E 20 20 20 20 
16181  7952 20 33 20 20 
16181  7956 20 20 20 34 
16181  795A 20 20 20 20 
16181  795E 20 35 20 20 
16181  7962 20 20 20 36 
16181  7966 20 20 20 20 
16181  796A 20 37 20 20 
16181  796E 20 20 20 38 
16181  7972 00 
16182  7973 25 73 25 64 _s144: .db "%s%d", 0
16182  7977 00 
16183  7978 20 20 20 53 _s145: .db "   Status Report:\n", 0
16183  797C 74 61 74 75 
16183  7980 73 20 52 65 
16183  7984 70 6F 72 74 
16183  7988 3A 0A 00 
16184  798B 4B 6C 69 6E _s146: .db "Klingon%s Left: %d\n Mission must be completed in %d.%d stardates\n", 0
16184  798F 67 6F 6E 25 
16184  7993 73 20 4C 65 
16184  7997 66 74 3A 20 
16184  799B 25 64 0A 20 
16184  799F 4D 69 73 73 
16184  79A3 69 6F 6E 20 
16184  79A7 6D 75 73 74 
16184  79AB 20 62 65 20 
16184  79AF 63 6F 6D 70 
16184  79B3 6C 65 74 65 
16184  79B7 64 20 69 6E 
16184  79BB 20 25 64 2E 
16184  79BF 25 64 20 73 
16184  79C3 74 61 72 64 
16184  79C7 61 74 65 73 
16184  79CB 0A 00 
16185  79CD 59 6F 75 72 _s147: .db "Your stupidity has left you on your own in the galaxy\n -- you have no starbases left!\n", 0
16185  79D1 20 73 74 75 
16185  79D5 70 69 64 69 
16185  79D9 74 79 20 68 
16185  79DD 61 73 20 6C 
16185  79E1 65 66 74 20 
16185  79E5 79 6F 75 20 
16185  79E9 6F 6E 20 79 
16185  79ED 6F 75 72 20 
16185  79F1 6F 77 6E 20 
16185  79F5 69 6E 20 74 
16185  79F9 68 65 20 67 
16185  79FD 61 6C 61 78 
16185  7A01 79 0A 20 2D 
16185  7A05 2D 20 79 6F 
16185  7A09 75 20 68 61 
16185  7A0D 76 65 20 6E 
16185  7A11 6F 20 73 74 
16185  7A15 61 72 62 61 
16185  7A19 73 65 73 20 
16185  7A1D 6C 65 66 74 
16185  7A21 21 0A 00 
16186  7A24 54 68 65 20 _s148: .db "The Federation is maintaining %d starbase%s in the galaxy\n\n", 0
16186  7A28 46 65 64 65 
16186  7A2C 72 61 74 69 
16186  7A30 6F 6E 20 69 
16186  7A34 73 20 6D 61 
16186  7A38 69 6E 74 61 
16186  7A3C 69 6E 69 6E 
16186  7A40 67 20 25 64 
16186  7A44 20 73 74 61 
16186  7A48 72 62 61 73 
16186  7A4C 65 25 73 20 
16186  7A50 69 6E 20 74 
16186  7A54 68 65 20 67 
16186  7A58 61 6C 61 78 
16186  7A5C 79 0A 0A 00 
16187  7A60 46 72 6F 6D _s149: .db "From Enterprise to Klingon battlecriuser%s:\n\n", 0
16187  7A64 20 45 6E 74 
16187  7A68 65 72 70 72 
16187  7A6C 69 73 65 20 
16187  7A70 74 6F 20 4B 
16187  7A74 6C 69 6E 67 
16187  7A78 6F 6E 20 62 
16187  7A7C 61 74 74 6C 
16187  7A80 65 63 72 69 
16187  7A84 75 73 65 72 
16187  7A88 25 73 3A 0A 
16187  7A8C 0A 00 
16188  7A8E 4D 72 2E 20 _s150: .db "Mr. Spock reports,\n  Sensors show no starbases in this quadrant.\n", 0
16188  7A92 53 70 6F 63 
16188  7A96 6B 20 72 65 
16188  7A9A 70 6F 72 74 
16188  7A9E 73 2C 0A 20 
16188  7AA2 20 53 65 6E 
16188  7AA6 73 6F 72 73 
16188  7AAA 20 73 68 6F 
16188  7AAE 77 20 6E 6F 
16188  7AB2 20 73 74 61 
16188  7AB6 72 62 61 73 
16188  7ABA 65 73 20 69 
16188  7ABE 6E 20 74 68 
16188  7AC2 69 73 20 71 
16188  7AC6 75 61 64 72 
16188  7ACA 61 6E 74 2E 
16188  7ACE 0A 00 
16189  7AD0 44 69 72 65 _s151: .db "Direction/Distance Calculator\n You are at quadrant %d,%d sector %d,%d\n\n Please enter initial X coordinate: ", 0
16189  7AD4 63 74 69 6F 
16189  7AD8 6E 2F 44 69 
16189  7ADC 73 74 61 6E 
16189  7AE0 63 65 20 43 
16189  7AE4 61 6C 63 75 
16189  7AE8 6C 61 74 6F 
16189  7AEC 72 0A 20 59 
16189  7AF0 6F 75 20 61 
16189  7AF4 72 65 20 61 
16189  7AF8 74 20 71 75 
16189  7AFC 61 64 72 61 
16189  7B00 6E 74 20 25 
16189  7B04 64 2C 25 64 
16189  7B08 20 73 65 63 
16189  7B0C 74 6F 72 20 
16189  7B10 25 64 2C 25 
16189  7B14 64 0A 0A 20 
16189  7B18 50 6C 65 61 
16189  7B1C 73 65 20 65 
16189  7B20 6E 74 65 72 
16189  7B24 20 69 6E 69 
16189  7B28 74 69 61 6C 
16189  7B2C 20 58 20 63 
16189  7B30 6F 6F 72 64 
16189  7B34 69 6E 61 74 
16189  7B38 65 3A 20 00 
16190  7B3C 50 6C 65 61 _s152: .db "Please enter initial Y coordinate: ", 0
16190  7B40 73 65 20 65 
16190  7B44 6E 74 65 72 
16190  7B48 20 69 6E 69 
16190  7B4C 74 69 61 6C 
16190  7B50 20 59 20 63 
16190  7B54 6F 6F 72 64 
16190  7B58 69 6E 61 74 
16190  7B5C 65 3A 20 00 
16191  7B60 50 6C 65 61 _s153: .db "Please enter final X coordinate: ", 0
16191  7B64 73 65 20 65 
16191  7B68 6E 74 65 72 
16191  7B6C 20 66 69 6E 
16191  7B70 61 6C 20 58 
16191  7B74 20 63 6F 6F 
16191  7B78 72 64 69 6E 
16191  7B7C 61 74 65 3A 
16191  7B80 20 00 
16192  7B82 50 6C 65 61 _s154: .db "Please enter final Y coordinate: ", 0
16192  7B86 73 65 20 65 
16192  7B8A 6E 74 65 72 
16192  7B8E 20 66 69 6E 
16192  7B92 61 6C 20 59 
16192  7B96 20 63 6F 6F 
16192  7B9A 72 64 69 6E 
16192  7B9E 61 74 65 3A 
16192  7BA2 20 00 
16193  7BA4 0A 20 20 20 _s155: .db "\n                   The Galaxy\n\n", 0
16193  7BA8 20 20 20 20 
16193  7BAC 20 20 20 20 
16193  7BB0 20 20 20 20 
16193  7BB4 20 20 20 20 
16193  7BB8 54 68 65 20 
16193  7BBC 47 61 6C 61 
16193  7BC0 78 79 0A 0A 
16193  7BC4 00 
16194  7BC5 20 20 20 20 _s156: .db "    1     2     3     4     5     6     7     8\n", 0
16194  7BC9 31 20 20 20 
16194  7BCD 20 20 32 20 
16194  7BD1 20 20 20 20 
16194  7BD5 33 20 20 20 
16194  7BD9 20 20 34 20 
16194  7BDD 20 20 20 20 
16194  7BE1 35 20 20 20 
16194  7BE5 20 20 36 20 
16194  7BE9 20 20 20 20 
16194  7BED 37 20 20 20 
16194  7BF1 20 20 38 0A 
16194  7BF5 00 
16195  7BF6 25 73 25 64 _s157: .db "%s%d ", 0
16195  7BFA 20 00 
16196  7BFC 20 20 44 49 _s158: .db "  DIRECTION = ", 0
16196  7C00 52 45 43 54 
16196  7C04 49 4F 4E 20 
16196  7C08 3D 20 00 
16197  7C0B 25 73 00    _s159: .db "%s", 0
16198  7C0E 54 68 65 20 _s160: .db "The Enterprise has been destroyed. The Federation will be conquered.\n", 0
16198  7C12 45 6E 74 65 
16198  7C16 72 70 72 69 
16198  7C1A 73 65 20 68 
16198  7C1E 61 73 20 62 
16198  7C22 65 65 6E 20 
16198  7C26 64 65 73 74 
16198  7C2A 72 6F 79 65 
16198  7C2E 64 2E 20 54 
16198  7C32 68 65 20 46 
16198  7C36 65 64 65 72 
16198  7C3A 61 74 69 6F 
16198  7C3E 6E 20 77 69 
16198  7C42 6C 6C 20 62 
16198  7C46 65 20 63 6F 
16198  7C4A 6E 71 75 65 
16198  7C4E 72 65 64 2E 
16198  7C52 0A 00 
16199  7C54 49 74 20 69 _s161: .db "It is stardate %d.\n\n", 0
16199  7C58 73 20 73 74 
16199  7C5C 61 72 64 61 
16199  7C60 74 65 20 25 
16199  7C64 64 2E 0A 0A 
16199  7C68 00 
16200  7C69 54 68 65 72 _s162: .db "There were %d Klingon Battlecruisers left at the end of your mission.\n\n", 0
16200  7C6D 65 20 77 65 
16200  7C71 72 65 20 25 
16200  7C75 64 20 4B 6C 
16200  7C79 69 6E 67 6F 
16200  7C7D 6E 20 42 61 
16200  7C81 74 74 6C 65 
16200  7C85 63 72 75 69 
16200  7C89 73 65 72 73 
16200  7C8D 20 6C 65 66 
16200  7C91 74 20 61 74 
16200  7C95 20 74 68 65 
16200  7C99 20 65 6E 64 
16200  7C9D 20 6F 66 20 
16200  7CA1 79 6F 75 72 
16200  7CA5 20 6D 69 73 
16200  7CA9 73 69 6F 6E 
16200  7CAD 2E 0A 0A 00 
16201  7CB1 43 6F 6E 67 _s163: .db "Congratulations, Captain!  The last Klingon Battle Cruiser\n menacing the Federation has been destoyed.\n", 0
16201  7CB5 72 61 74 75 
16201  7CB9 6C 61 74 69 
16201  7CBD 6F 6E 73 2C 
16201  7CC1 20 43 61 70 
16201  7CC5 74 61 69 6E 
16201  7CC9 21 20 20 54 
16201  7CCD 68 65 20 6C 
16201  7CD1 61 73 74 20 
16201  7CD5 4B 6C 69 6E 
16201  7CD9 67 6F 6E 20 
16201  7CDD 42 61 74 74 
16201  7CE1 6C 65 20 43 
16201  7CE5 72 75 69 73 
16201  7CE9 65 72 0A 20 
16201  7CED 6D 65 6E 61 
16201  7CF1 63 69 6E 67 
16201  7CF5 20 74 68 65 
16201  7CF9 20 46 65 64 
16201  7CFD 65 72 61 74 
16201  7D01 69 6F 6E 20 
16201  7D05 68 61 73 20 
16201  7D09 62 65 65 6E 
16201  7D0D 20 64 65 73 
16201  7D11 74 6F 79 65 
16201  7D15 64 2E 0A 00 
16202  7D19 59 6F 75 72 _s164: .db "Your efficiency rating is %s\n", 0
16202  7D1D 20 65 66 66 
16202  7D21 69 63 69 65 
16202  7D25 6E 63 79 20 
16202  7D29 72 61 74 69 
16202  7D2D 6E 67 20 69 
16202  7D31 73 20 25 73 
16202  7D35 0A 00 
16203  7D37 54 68 65 20 _s165: .db "The Federation is in need of a new starship commander", 0
16203  7D3B 46 65 64 65 
16203  7D3F 72 61 74 69 
16203  7D43 6F 6E 20 69 
16203  7D47 73 20 69 6E 
16203  7D4B 20 6E 65 65 
16203  7D4F 64 20 6F 66 
16203  7D53 20 61 20 6E 
16203  7D57 65 77 20 73 
16203  7D5B 74 61 72 73 
16203  7D5F 68 69 70 20 
16203  7D63 63 6F 6D 6D 
16203  7D67 61 6E 64 65 
16203  7D6B 72 00 
16204  7D6D 20 66 6F 72 _s166: .db " for a similar mission.\n", 0
16204  7D71 20 61 20 73 
16204  7D75 69 6D 69 6C 
16204  7D79 61 72 20 6D 
16204  7D7D 69 73 73 69 
16204  7D81 6F 6E 2E 0A 
16204  7D85 00 
16205  7D86 49 66 20 74 _s167: .db "If there is a volunteer, let him step forward and", 0
16205  7D8A 68 65 72 65 
16205  7D8E 20 69 73 20 
16205  7D92 61 20 76 6F 
16205  7D96 6C 75 6E 74 
16205  7D9A 65 65 72 2C 
16205  7D9E 20 6C 65 74 
16205  7DA2 20 68 69 6D 
16205  7DA6 20 73 74 65 
16205  7DAA 70 20 66 6F 
16205  7DAE 72 77 61 72 
16205  7DB2 64 20 61 6E 
16205  7DB6 64 00 
16206  7DB8 20 65 6E 74 _s168: .db " enter aye: ", 0
16206  7DBC 65 72 20 61 
16206  7DC0 79 65 3A 20 
16206  7DC4 00 
16207  7DC5 61 79 65 00 _s169: .db "aye", 0
16208  7DC9 53 74 61 72 _s170: .db "Starbase shields protect the Enterprise\n", 0
16208  7DCD 62 61 73 65 
16208  7DD1 20 73 68 69 
16208  7DD5 65 6C 64 73 
16208  7DD9 20 70 72 6F 
16208  7DDD 74 65 63 74 
16208  7DE1 20 74 68 65 
16208  7DE5 20 45 6E 74 
16208  7DE9 65 72 70 72 
16208  7DED 69 73 65 0A 
16208  7DF1 00 
16209  7DF2 25 64 20 75 _s171: .db "%d unit hit on Enterprise from sector %d, %d\n", 0
16209  7DF6 6E 69 74 20 
16209  7DFA 68 69 74 20 
16209  7DFE 6F 6E 20 45 
16209  7E02 6E 74 65 72 
16209  7E06 70 72 69 73 
16209  7E0A 65 20 66 72 
16209  7E0E 6F 6D 20 73 
16209  7E12 65 63 74 6F 
16209  7E16 72 20 25 64 
16209  7E1A 2C 20 25 64 
16209  7E1E 0A 00 
16210  7E20 20 20 20 20 _s172: .db "    <Shields down to %d units>\n\n", 0
16210  7E24 3C 53 68 69 
16210  7E28 65 6C 64 73 
16210  7E2C 20 64 6F 77 
16210  7E30 6E 20 74 6F 
16210  7E34 20 25 64 20 
16210  7E38 75 6E 69 74 
16210  7E3C 73 3E 0A 0A 
16210  7E40 00 
16211  7E41 44 61 6D 61 _s173: .db "Damage Control reports\n%s damaged by hit\n\n", 0
16211  7E45 67 65 20 43 
16211  7E49 6F 6E 74 72 
16211  7E4D 6F 6C 20 72 
16211  7E51 65 70 6F 72 
16211  7E55 74 73 0A 25 
16211  7E59 73 20 64 61 
16211  7E5D 6D 61 67 65 
16211  7E61 64 20 62 79 
16211  7E65 20 68 69 74 
16211  7E69 0A 0A 00 
16212  7E6C 20 20 20 20 _s174: .db "    %s repair completed\n\n", 0
16212  7E70 25 73 20 72 
16212  7E74 65 70 61 69 
16212  7E78 72 20 63 6F 
16212  7E7C 6D 70 6C 65 
16212  7E80 74 65 64 0A 
16212  7E84 0A 00 
16213  7E86 20 20 20 20 _s175: .db "    %s damaged\n\n", 0
16213  7E8A 25 73 20 64 
16213  7E8E 61 6D 61 67 
16213  7E92 65 64 0A 0A 
16213  7E96 00 
16214  7E97 20 20 20 20 _s176: .db "    %s state of repair improved\n\n", 0
16214  7E9B 25 73 20 73 
16214  7E9F 74 61 74 65 
16214  7EA3 20 6F 66 20 
16214  7EA7 72 65 70 61 
16214  7EAB 69 72 20 69 
16214  7EAF 6D 70 72 6F 
16214  7EB3 76 65 64 0A 
16214  7EB7 0A 00 
16215  7EB9 20 49 00    _s177: .db " I", 0
16216  7EBC 20 49 49 00 _s178: .db " II", 0
16217  7EC0 20 49 49 49 _s179: .db " III", 0
16217  7EC4 00 
16218  7EC5 20 49 56 00 _s180: .db " IV", 0
16219  7EC9 55 6E 6B 6E _s181: .db "Unknown", 0
16219  7ECD 6F 77 6E 00 
16220  7ED1             
16221  7ED1 D3 7E       _heap_top: .dw _heap
16222  7ED3 00          _heap: .db 0
16223  7ED4             ; --- END DATA BLOCK
16224  7ED4             
16225  7ED4             .end
tasm: Number of errors = 0
