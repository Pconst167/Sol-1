0001   0000             ; --- FILENAME: games/startrek
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ;; intro(); 
0011   0408 07 BB 20      call intro
0012   040B             ;; new_game(); 
0013   040B 07 1C 21      call new_game
0014   040E             ;; return (0); 
0015   040E 26 00 00      mov b, $0
0016   0411 F9            leave
0017   0412 05 0B         syscall sys_terminate_proc
0018   0414             
0019   0414             strcpy:
0020   0414 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0021   0417             ; $psrc 
0022   0417             ; $pdest 
0023   0417 52 04 00      sub sp, 4
0024   041A             ;; psrc = src; 
0025   041A FA FF FF      lea d, [bp + -1] ; $psrc
0026   041D DA            push d
0027   041E FA 07 00      lea d, [bp + 7] ; $src
0028   0421 2A            mov b, [d]
0029   0422 E7            pop d
0030   0423 FD 43         mov [d], b
0031   0425             ;; pdest = dest; 
0032   0425 FA FD FF      lea d, [bp + -3] ; $pdest
0033   0428 DA            push d
0034   0429 FA 05 00      lea d, [bp + 5] ; $dest
0035   042C 2A            mov b, [d]
0036   042D E7            pop d
0037   042E FD 43         mov [d], b
0038   0430             ;; while(*psrc) *pdest++ = *psrc++; 
0039   0430             _while1_cond:
0040   0430 FA FF FF      lea d, [bp + -1] ; $psrc
0041   0433 2A            mov b, [d]
0042   0434 74            mov d, b
0043   0435 32            mov bl, [d]
0044   0436 A7 00         mov bh, 0
0045   0438 C0 00 00      cmp b, 0
0046   043B C6 63 04      je _while1_exit
0047   043E             _while1_block:
0048   043E             ;; *pdest++ = *psrc++; 
0049   043E FA FD FF      lea d, [bp + -3] ; $pdest
0050   0441 2A            mov b, [d]
0051   0442 D8            push b
0052   0443 FD 77         inc b
0053   0445 FA FD FF      lea d, [bp + -3] ; $pdest
0054   0448 FD 43         mov [d], b
0055   044A E5            pop b
0056   044B D8            push b
0057   044C FA FF FF      lea d, [bp + -1] ; $psrc
0058   044F 2A            mov b, [d]
0059   0450 D8            push b
0060   0451 FD 77         inc b
0061   0453 FA FF FF      lea d, [bp + -1] ; $psrc
0062   0456 FD 43         mov [d], b
0063   0458 E5            pop b
0064   0459 74            mov d, b
0065   045A 32            mov bl, [d]
0066   045B A7 00         mov bh, 0
0067   045D E7            pop d
0068   045E FD 3E         mov [d], bl
0069   0460 0A 30 04      jmp _while1_cond
0070   0463             _while1_exit:
0071   0463             ;; *pdest = '\0'; 
0072   0463 FA FD FF      lea d, [bp + -3] ; $pdest
0073   0466 2A            mov b, [d]
0074   0467 D8            push b
0075   0468 26 00 00      mov b, $0
0076   046B E7            pop d
0077   046C FD 3E         mov [d], bl
0078   046E F9            leave
0079   046F 09            ret
0080   0470             
0081   0470             strcmp:
0082   0470 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0083   0473             ;; while (*s1 && (*s1 == *s2)) { 
0084   0473             _while2_cond:
0085   0473 FA 05 00      lea d, [bp + 5] ; $s1
0086   0476 2A            mov b, [d]
0087   0477 74            mov d, b
0088   0478 32            mov bl, [d]
0089   0479 A7 00         mov bh, 0
0090   047B D7            push a
0091   047C 11            mov a, b
0092   047D FA 05 00      lea d, [bp + 5] ; $s1
0093   0480 2A            mov b, [d]
0094   0481 74            mov d, b
0095   0482 32            mov bl, [d]
0096   0483 A7 00         mov bh, 0
0097   0485             ; START RELATIONAL
0098   0485 D7            push a
0099   0486 11            mov a, b
0100   0487 FA 07 00      lea d, [bp + 7] ; $s2
0101   048A 2A            mov b, [d]
0102   048B 74            mov d, b
0103   048C 32            mov bl, [d]
0104   048D A7 00         mov bh, 0
0105   048F B0            cmp a, b
0106   0490 FD 71         seq ; ==
0107   0492 E4            pop a
0108   0493             ; END RELATIONAL
0109   0493 FD A7         sand a, b
0110   0495 E4            pop a
0111   0496 C0 00 00      cmp b, 0
0112   0499 C6 B9 04      je _while2_exit
0113   049C             _while2_block:
0114   049C             ;; s1++; 
0115   049C FA 05 00      lea d, [bp + 5] ; $s1
0116   049F 2A            mov b, [d]
0117   04A0 D8            push b
0118   04A1 FD 77         inc b
0119   04A3 FA 05 00      lea d, [bp + 5] ; $s1
0120   04A6 FD 43         mov [d], b
0121   04A8 E5            pop b
0122   04A9             ;; s2++; 
0123   04A9 FA 07 00      lea d, [bp + 7] ; $s2
0124   04AC 2A            mov b, [d]
0125   04AD D8            push b
0126   04AE FD 77         inc b
0127   04B0 FA 07 00      lea d, [bp + 7] ; $s2
0128   04B3 FD 43         mov [d], b
0129   04B5 E5            pop b
0130   04B6 0A 73 04      jmp _while2_cond
0131   04B9             _while2_exit:
0132   04B9             ;; return *s1 - *s2; 
0133   04B9 FA 05 00      lea d, [bp + 5] ; $s1
0134   04BC 2A            mov b, [d]
0135   04BD 74            mov d, b
0136   04BE 32            mov bl, [d]
0137   04BF A7 00         mov bh, 0
0138   04C1             ; START TERMS
0139   04C1 D7            push a
0140   04C2 11            mov a, b
0141   04C3 FA 07 00      lea d, [bp + 7] ; $s2
0142   04C6 2A            mov b, [d]
0143   04C7 74            mov d, b
0144   04C8 32            mov bl, [d]
0145   04C9 A7 00         mov bh, 0
0146   04CB 60            sub a, b
0147   04CC 27            mov b, a
0148   04CD E4            pop a
0149   04CE             ; END TERMS
0150   04CE F9            leave
0151   04CF 09            ret
0152   04D0             
0153   04D0             strncmp:
0154   04D0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0155   04D3 F9            leave
0156   04D4 09            ret
0157   04D5             
0158   04D5             strcat:
0159   04D5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0160   04D8             ; $dest_len 
0161   04D8             ; $i 
0162   04D8 52 04 00      sub sp, 4
0163   04DB             ;; dest_len = strlen(dest); 
0164   04DB FA FF FF      lea d, [bp + -1] ; $dest_len
0165   04DE DA            push d
0166   04DF FA 05 00      lea d, [bp + 5] ; $dest
0167   04E2 2A            mov b, [d]
0168   04E3 FD AB         swp b
0169   04E5 D8            push b
0170   04E6 07 88 05      call strlen
0171   04E9 51 02 00      add sp, 2
0172   04EC E7            pop d
0173   04ED FD 43         mov [d], b
0174   04EF             ;; for (i = 0; src[i] != 0; i=i+1) { 
0175   04EF             _for3_init:
0176   04EF FA FD FF      lea d, [bp + -3] ; $i
0177   04F2 DA            push d
0178   04F3 26 00 00      mov b, $0
0179   04F6 E7            pop d
0180   04F7 FD 43         mov [d], b
0181   04F9             _for3_cond:
0182   04F9 FA 07 00      lea d, [bp + 7] ; $src
0183   04FC FD 2A         mov d, [d]
0184   04FE D7            push a
0185   04FF DA            push d
0186   0500 FA FD FF      lea d, [bp + -3] ; $i
0187   0503 2A            mov b, [d]
0188   0504 E7            pop d
0189   0505 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0190   0509 E4            pop a
0191   050A 32            mov bl, [d]
0192   050B A7 00         mov bh, 0
0193   050D             ; START RELATIONAL
0194   050D D7            push a
0195   050E 11            mov a, b
0196   050F 26 00 00      mov b, $0
0197   0512 B0            cmp a, b
0198   0513 FD 72         sneq ; !=
0199   0515 E4            pop a
0200   0516             ; END RELATIONAL
0201   0516 C0 00 00      cmp b, 0
0202   0519 C6 62 05      je _for3_exit
0203   051C             _for3_block:
0204   051C             ;; dest[dest_len + i] = src[i]; 
0205   051C FA 05 00      lea d, [bp + 5] ; $dest
0206   051F FD 2A         mov d, [d]
0207   0521 D7            push a
0208   0522 DA            push d
0209   0523 FA FF FF      lea d, [bp + -1] ; $dest_len
0210   0526 2A            mov b, [d]
0211   0527             ; START TERMS
0212   0527 D7            push a
0213   0528 11            mov a, b
0214   0529 FA FD FF      lea d, [bp + -3] ; $i
0215   052C 2A            mov b, [d]
0216   052D 56            add b, a
0217   052E E4            pop a
0218   052F             ; END TERMS
0219   052F E7            pop d
0220   0530 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0221   0534 E4            pop a
0222   0535 DA            push d
0223   0536 FA 07 00      lea d, [bp + 7] ; $src
0224   0539 FD 2A         mov d, [d]
0225   053B D7            push a
0226   053C DA            push d
0227   053D FA FD FF      lea d, [bp + -3] ; $i
0228   0540 2A            mov b, [d]
0229   0541 E7            pop d
0230   0542 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0231   0546 E4            pop a
0232   0547 32            mov bl, [d]
0233   0548 A7 00         mov bh, 0
0234   054A E7            pop d
0235   054B FD 3E         mov [d], bl
0236   054D             _for3_update:
0237   054D FA FD FF      lea d, [bp + -3] ; $i
0238   0550 DA            push d
0239   0551 FA FD FF      lea d, [bp + -3] ; $i
0240   0554 2A            mov b, [d]
0241   0555             ; START TERMS
0242   0555 D7            push a
0243   0556 11            mov a, b
0244   0557 26 01 00      mov b, $1
0245   055A 56            add b, a
0246   055B E4            pop a
0247   055C             ; END TERMS
0248   055C E7            pop d
0249   055D FD 43         mov [d], b
0250   055F 0A F9 04      jmp _for3_cond
0251   0562             _for3_exit:
0252   0562             ;; dest[dest_len + i] = 0; 
0253   0562 FA 05 00      lea d, [bp + 5] ; $dest
0254   0565 FD 2A         mov d, [d]
0255   0567 D7            push a
0256   0568 DA            push d
0257   0569 FA FF FF      lea d, [bp + -1] ; $dest_len
0258   056C 2A            mov b, [d]
0259   056D             ; START TERMS
0260   056D D7            push a
0261   056E 11            mov a, b
0262   056F FA FD FF      lea d, [bp + -3] ; $i
0263   0572 2A            mov b, [d]
0264   0573 56            add b, a
0265   0574 E4            pop a
0266   0575             ; END TERMS
0267   0575 E7            pop d
0268   0576 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0269   057A E4            pop a
0270   057B DA            push d
0271   057C 26 00 00      mov b, $0
0272   057F E7            pop d
0273   0580 FD 3E         mov [d], bl
0274   0582             ;; return dest; 
0275   0582 FA 05 00      lea d, [bp + 5] ; $dest
0276   0585 2A            mov b, [d]
0277   0586 F9            leave
0278   0587 09            ret
0279   0588             
0280   0588             strlen:
0281   0588 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0282   058B             ; $length 
0283   058B 52 02 00      sub sp, 2
0284   058E             ;; length = 0; 
0285   058E FA FF FF      lea d, [bp + -1] ; $length
0286   0591 DA            push d
0287   0592 26 00 00      mov b, $0
0288   0595 E7            pop d
0289   0596 FD 43         mov [d], b
0290   0598             ;; while (str[length] != 0) { 
0291   0598             _while4_cond:
0292   0598 FA 05 00      lea d, [bp + 5] ; $str
0293   059B FD 2A         mov d, [d]
0294   059D D7            push a
0295   059E DA            push d
0296   059F FA FF FF      lea d, [bp + -1] ; $length
0297   05A2 2A            mov b, [d]
0298   05A3 E7            pop d
0299   05A4 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0300   05A8 E4            pop a
0301   05A9 32            mov bl, [d]
0302   05AA A7 00         mov bh, 0
0303   05AC             ; START RELATIONAL
0304   05AC D7            push a
0305   05AD 11            mov a, b
0306   05AE 26 00 00      mov b, $0
0307   05B1 B0            cmp a, b
0308   05B2 FD 72         sneq ; !=
0309   05B4 E4            pop a
0310   05B5             ; END RELATIONAL
0311   05B5 C0 00 00      cmp b, 0
0312   05B8 C6 CB 05      je _while4_exit
0313   05BB             _while4_block:
0314   05BB             ;; length++; 
0315   05BB FA FF FF      lea d, [bp + -1] ; $length
0316   05BE 2A            mov b, [d]
0317   05BF D8            push b
0318   05C0 FD 77         inc b
0319   05C2 FA FF FF      lea d, [bp + -1] ; $length
0320   05C5 FD 43         mov [d], b
0321   05C7 E5            pop b
0322   05C8 0A 98 05      jmp _while4_cond
0323   05CB             _while4_exit:
0324   05CB             ;; return length; 
0325   05CB FA FF FF      lea d, [bp + -1] ; $length
0326   05CE 2A            mov b, [d]
0327   05CF F9            leave
0328   05D0 09            ret
0329   05D1             
0330   05D1             printf:
0331   05D1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0332   05D4             ; $p 
0333   05D4             ; $format_p 
0334   05D4 52 04 00      sub sp, 4
0335   05D7             ;; format_p = format; 
0336   05D7 FA FD FF      lea d, [bp + -3] ; $format_p
0337   05DA DA            push d
0338   05DB FA 05 00      lea d, [bp + 5] ; $format
0339   05DE 2A            mov b, [d]
0340   05DF E7            pop d
0341   05E0 FD 43         mov [d], b
0342   05E2             ;; p = &format + 2; 
0343   05E2 FA FF FF      lea d, [bp + -1] ; $p
0344   05E5 DA            push d
0345   05E6 FA 05 00      lea d, [bp + 5] ; $format
0346   05E9 2D            mov b, d
0347   05EA             ; START TERMS
0348   05EA D7            push a
0349   05EB 11            mov a, b
0350   05EC 26 02 00      mov b, $2
0351   05EF 56            add b, a
0352   05F0 E4            pop a
0353   05F1             ; END TERMS
0354   05F1 E7            pop d
0355   05F2 FD 43         mov [d], b
0356   05F4             ;; for(;;){ 
0357   05F4             _for5_init:
0358   05F4             _for5_cond:
0359   05F4             _for5_block:
0360   05F4             ;; if(!*format_p) break; 
0361   05F4             _if6_cond:
0362   05F4 FA FD FF      lea d, [bp + -3] ; $format_p
0363   05F7 2A            mov b, [d]
0364   05F8 74            mov d, b
0365   05F9 32            mov bl, [d]
0366   05FA A7 00         mov bh, 0
0367   05FC C0 00 00      cmp b, 0
0368   05FF FD 71         seq ; !
0369   0601 C0 00 00      cmp b, 0
0370   0604 C6 0D 06      je _if6_else
0371   0607             _if6_true:
0372   0607             ;; break; 
0373   0607 0A 34 08      jmp _for5_exit ; for break
0374   060A 0A 31 08      jmp _if6_exit
0375   060D             _if6_else:
0376   060D             ;; if(*format_p == '%'){ 
0377   060D             _if7_cond:
0378   060D FA FD FF      lea d, [bp + -3] ; $format_p
0379   0610 2A            mov b, [d]
0380   0611 74            mov d, b
0381   0612 32            mov bl, [d]
0382   0613 A7 00         mov bh, 0
0383   0615             ; START RELATIONAL
0384   0615 D7            push a
0385   0616 11            mov a, b
0386   0617 26 25 00      mov b, $25
0387   061A B0            cmp a, b
0388   061B FD 71         seq ; ==
0389   061D E4            pop a
0390   061E             ; END RELATIONAL
0391   061E C0 00 00      cmp b, 0
0392   0621 C6 15 08      je _if7_else
0393   0624             _if7_true:
0394   0624             ;; format_p++; 
0395   0624 FA FD FF      lea d, [bp + -3] ; $format_p
0396   0627 2A            mov b, [d]
0397   0628 D8            push b
0398   0629 FD 77         inc b
0399   062B FA FD FF      lea d, [bp + -3] ; $format_p
0400   062E FD 43         mov [d], b
0401   0630 E5            pop b
0402   0631             ;; switch(*format_p){ 
0403   0631             _switch8_expr:
0404   0631 FA FD FF      lea d, [bp + -3] ; $format_p
0405   0634 2A            mov b, [d]
0406   0635 74            mov d, b
0407   0636 32            mov bl, [d]
0408   0637 A7 00         mov bh, 0
0409   0639             _switch8_comparisons:
0410   0639 C1 6C         cmp bl, $6c
0411   063B C6 67 06      je _switch8_case0
0412   063E C1 4C         cmp bl, $4c
0413   0640 C6 67 06      je _switch8_case1
0414   0643 C1 64         cmp bl, $64
0415   0645 C6 55 07      je _switch8_case2
0416   0648 C1 69         cmp bl, $69
0417   064A C6 55 07      je _switch8_case3
0418   064D C1 75         cmp bl, $75
0419   064F C6 79 07      je _switch8_case4
0420   0652 C1 78         cmp bl, $78
0421   0654 C6 9D 07      je _switch8_case5
0422   0657 C1 63         cmp bl, $63
0423   0659 C6 BB 07      je _switch8_case6
0424   065C C1 73         cmp bl, $73
0425   065E C6 DA 07      je _switch8_case7
0426   0661 0A F9 07      jmp _switch8_default
0427   0664 0A 05 08      jmp _switch8_exit
0428   0667             _switch8_case0:
0429   0667             _switch8_case1:
0430   0667             ;; format_p++; 
0431   0667 FA FD FF      lea d, [bp + -3] ; $format_p
0432   066A 2A            mov b, [d]
0433   066B D8            push b
0434   066C FD 77         inc b
0435   066E FA FD FF      lea d, [bp + -3] ; $format_p
0436   0671 FD 43         mov [d], b
0437   0673 E5            pop b
0438   0674             ;; if(*format_p == 'd' || *format_p == 'i') 
0439   0674             _if9_cond:
0440   0674 FA FD FF      lea d, [bp + -3] ; $format_p
0441   0677 2A            mov b, [d]
0442   0678 74            mov d, b
0443   0679 32            mov bl, [d]
0444   067A A7 00         mov bh, 0
0445   067C             ; START RELATIONAL
0446   067C D7            push a
0447   067D 11            mov a, b
0448   067E 26 64 00      mov b, $64
0449   0681 B0            cmp a, b
0450   0682 FD 71         seq ; ==
0451   0684 E4            pop a
0452   0685             ; END RELATIONAL
0453   0685 D7            push a
0454   0686 11            mov a, b
0455   0687 FA FD FF      lea d, [bp + -3] ; $format_p
0456   068A 2A            mov b, [d]
0457   068B 74            mov d, b
0458   068C 32            mov bl, [d]
0459   068D A7 00         mov bh, 0
0460   068F             ; START RELATIONAL
0461   068F D7            push a
0462   0690 11            mov a, b
0463   0691 26 69 00      mov b, $69
0464   0694 B0            cmp a, b
0465   0695 FD 71         seq ; ==
0466   0697 E4            pop a
0467   0698             ; END RELATIONAL
0468   0698 FD A8         sor a, b ; ||
0469   069A E4            pop a
0470   069B C0 00 00      cmp b, 0
0471   069E C6 C3 06      je _if9_else
0472   06A1             _if9_true:
0473   06A1             ;; print_signed_long(*(long *)p); 
0474   06A1 FA FF FF      lea d, [bp + -1] ; $p
0475   06A4 2A            mov b, [d]
0476   06A5 AB            snex b
0477   06A6 FD 39         mov c, b
0478   06A8 74            mov d, b
0479   06A9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0480   06AC FD 39         mov c, b ; And place it into C
0481   06AE 2A            mov b, [d] ; Lower Word in B
0482   06AF FD 79         mov g, b
0483   06B1 28            mov b, c
0484   06B2 FD AB         swp b
0485   06B4 D8            push b
0486   06B5 FD 27         mov b, g
0487   06B7 FD AB         swp b
0488   06B9 D8            push b
0489   06BA 07 FA 0C      call print_signed_long
0490   06BD 51 04 00      add sp, 4
0491   06C0 0A 40 07      jmp _if9_exit
0492   06C3             _if9_else:
0493   06C3             ;; if(*format_p == 'u') 
0494   06C3             _if10_cond:
0495   06C3 FA FD FF      lea d, [bp + -3] ; $format_p
0496   06C6 2A            mov b, [d]
0497   06C7 74            mov d, b
0498   06C8 32            mov bl, [d]
0499   06C9 A7 00         mov bh, 0
0500   06CB             ; START RELATIONAL
0501   06CB D7            push a
0502   06CC 11            mov a, b
0503   06CD 26 75 00      mov b, $75
0504   06D0 B0            cmp a, b
0505   06D1 FD 71         seq ; ==
0506   06D3 E4            pop a
0507   06D4             ; END RELATIONAL
0508   06D4 C0 00 00      cmp b, 0
0509   06D7 C6 FE 06      je _if10_else
0510   06DA             _if10_true:
0511   06DA             ;; print_unsigned_long(*(unsigned long *)p); 
0512   06DA FA FF FF      lea d, [bp + -1] ; $p
0513   06DD 2A            mov b, [d]
0514   06DE A7 00         mov bh, 0
0515   06E0 38 00 00      mov c, 0
0516   06E3 74            mov d, b
0517   06E4 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0518   06E7 FD 39         mov c, b ; And place it into C
0519   06E9 2A            mov b, [d] ; Lower Word in B
0520   06EA FD 79         mov g, b
0521   06EC 28            mov b, c
0522   06ED FD AB         swp b
0523   06EF D8            push b
0524   06F0 FD 27         mov b, g
0525   06F2 FD AB         swp b
0526   06F4 D8            push b
0527   06F5 07 33 10      call print_unsigned_long
0528   06F8 51 04 00      add sp, 4
0529   06FB 0A 40 07      jmp _if10_exit
0530   06FE             _if10_else:
0531   06FE             ;; if(*format_p == 'x') 
0532   06FE             _if11_cond:
0533   06FE FA FD FF      lea d, [bp + -3] ; $format_p
0534   0701 2A            mov b, [d]
0535   0702 74            mov d, b
0536   0703 32            mov bl, [d]
0537   0704 A7 00         mov bh, 0
0538   0706             ; START RELATIONAL
0539   0706 D7            push a
0540   0707 11            mov a, b
0541   0708 26 78 00      mov b, $78
0542   070B B0            cmp a, b
0543   070C FD 71         seq ; ==
0544   070E E4            pop a
0545   070F             ; END RELATIONAL
0546   070F C0 00 00      cmp b, 0
0547   0712 C6 34 07      je _if11_else
0548   0715             _if11_true:
0549   0715             ;; printx32(*(long int *)p); 
0550   0715 FA FF FF      lea d, [bp + -1] ; $p
0551   0718 2A            mov b, [d]
0552   0719 74            mov d, b
0553   071A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0554   071D FD 39         mov c, b ; And place it into C
0555   071F 2A            mov b, [d] ; Lower Word in B
0556   0720 FD 79         mov g, b
0557   0722 28            mov b, c
0558   0723 FD AB         swp b
0559   0725 D8            push b
0560   0726 FD 27         mov b, g
0561   0728 FD AB         swp b
0562   072A D8            push b
0563   072B 07 83 0A      call printx32
0564   072E 51 04 00      add sp, 4
0565   0731 0A 40 07      jmp _if11_exit
0566   0734             _if11_else:
0567   0734             ;; err("Unexpected format in printf."); 
0568   0734 26 11 64      mov b, __s29 ; "Unexpected format in printf."
0569   0737 FD AB         swp b
0570   0739 D8            push b
0571   073A 07 71 0A      call err
0572   073D 51 02 00      add sp, 2
0573   0740             _if11_exit:
0574   0740             _if10_exit:
0575   0740             _if9_exit:
0576   0740             ;; p = p + 4; 
0577   0740 FA FF FF      lea d, [bp + -1] ; $p
0578   0743 DA            push d
0579   0744 FA FF FF      lea d, [bp + -1] ; $p
0580   0747 2A            mov b, [d]
0581   0748             ; START TERMS
0582   0748 D7            push a
0583   0749 11            mov a, b
0584   074A 26 04 00      mov b, $4
0585   074D 56            add b, a
0586   074E E4            pop a
0587   074F             ; END TERMS
0588   074F E7            pop d
0589   0750 FD 43         mov [d], b
0590   0752             ;; break; 
0591   0752 0A 05 08      jmp _switch8_exit ; case break
0592   0755             _switch8_case2:
0593   0755             _switch8_case3:
0594   0755             ;; print_signed(*(int*)p); 
0595   0755 FA FF FF      lea d, [bp + -1] ; $p
0596   0758 2A            mov b, [d]
0597   0759 74            mov d, b
0598   075A 2A            mov b, [d]
0599   075B FD AB         swp b
0600   075D D8            push b
0601   075E 07 0A 0C      call print_signed
0602   0761 51 02 00      add sp, 2
0603   0764             ;; p = p + 2; 
0604   0764 FA FF FF      lea d, [bp + -1] ; $p
0605   0767 DA            push d
0606   0768 FA FF FF      lea d, [bp + -1] ; $p
0607   076B 2A            mov b, [d]
0608   076C             ; START TERMS
0609   076C D7            push a
0610   076D 11            mov a, b
0611   076E 26 02 00      mov b, $2
0612   0771 56            add b, a
0613   0772 E4            pop a
0614   0773             ; END TERMS
0615   0773 E7            pop d
0616   0774 FD 43         mov [d], b
0617   0776             ;; break; 
0618   0776 0A 05 08      jmp _switch8_exit ; case break
0619   0779             _switch8_case4:
0620   0779             ;; print_unsigned(*(unsigned int*)p); 
0621   0779 FA FF FF      lea d, [bp + -1] ; $p
0622   077C 2A            mov b, [d]
0623   077D 74            mov d, b
0624   077E 2A            mov b, [d]
0625   077F FD AB         swp b
0626   0781 D8            push b
0627   0782 07 2B 12      call print_unsigned
0628   0785 51 02 00      add sp, 2
0629   0788             ;; p = p + 2; 
0630   0788 FA FF FF      lea d, [bp + -1] ; $p
0631   078B DA            push d
0632   078C FA FF FF      lea d, [bp + -1] ; $p
0633   078F 2A            mov b, [d]
0634   0790             ; START TERMS
0635   0790 D7            push a
0636   0791 11            mov a, b
0637   0792 26 02 00      mov b, $2
0638   0795 56            add b, a
0639   0796 E4            pop a
0640   0797             ; END TERMS
0641   0797 E7            pop d
0642   0798 FD 43         mov [d], b
0643   079A             ;; break; 
0644   079A 0A 05 08      jmp _switch8_exit ; case break
0645   079D             _switch8_case5:
0646   079D             
0647   079D             ; --- BEGIN INLINE ASM BLOCK
0648   079D FA FF FF      lea d, [bp + -1] ; $p
0649   07A0 FD 2A         mov d, [d]
0650   07A2 2A            mov b, [d]
0651   07A3 07 2E 16      call print_u16x
0652   07A6             ; --- END INLINE ASM BLOCK
0653   07A6             
0654   07A6             ;; p = p + 2; 
0655   07A6 FA FF FF      lea d, [bp + -1] ; $p
0656   07A9 DA            push d
0657   07AA FA FF FF      lea d, [bp + -1] ; $p
0658   07AD 2A            mov b, [d]
0659   07AE             ; START TERMS
0660   07AE D7            push a
0661   07AF 11            mov a, b
0662   07B0 26 02 00      mov b, $2
0663   07B3 56            add b, a
0664   07B4 E4            pop a
0665   07B5             ; END TERMS
0666   07B5 E7            pop d
0667   07B6 FD 43         mov [d], b
0668   07B8             ;; break; 
0669   07B8 0A 05 08      jmp _switch8_exit ; case break
0670   07BB             _switch8_case6:
0671   07BB             
0672   07BB             ; --- BEGIN INLINE ASM BLOCK
0673   07BB FA FF FF      lea d, [bp + -1] ; $p
0674   07BE FD 2A         mov d, [d]
0675   07C0 1E            mov al, [d]
0676   07C1 23            mov ah, al
0677   07C2 07 8C 14      call _putchar
0678   07C5             ; --- END INLINE ASM BLOCK
0679   07C5             
0680   07C5             ;; p = p + 2; 
0681   07C5 FA FF FF      lea d, [bp + -1] ; $p
0682   07C8 DA            push d
0683   07C9 FA FF FF      lea d, [bp + -1] ; $p
0684   07CC 2A            mov b, [d]
0685   07CD             ; START TERMS
0686   07CD D7            push a
0687   07CE 11            mov a, b
0688   07CF 26 02 00      mov b, $2
0689   07D2 56            add b, a
0690   07D3 E4            pop a
0691   07D4             ; END TERMS
0692   07D4 E7            pop d
0693   07D5 FD 43         mov [d], b
0694   07D7             ;; break; 
0695   07D7 0A 05 08      jmp _switch8_exit ; case break
0696   07DA             _switch8_case7:
0697   07DA             
0698   07DA             ; --- BEGIN INLINE ASM BLOCK
0699   07DA FA FF FF      lea d, [bp + -1] ; $p
0700   07DD FD 2A         mov d, [d]
0701   07DF FD 2A         mov d, [d]
0702   07E1 07 D6 15      call _puts
0703   07E4             ; --- END INLINE ASM BLOCK
0704   07E4             
0705   07E4             ;; p = p + 2; 
0706   07E4 FA FF FF      lea d, [bp + -1] ; $p
0707   07E7 DA            push d
0708   07E8 FA FF FF      lea d, [bp + -1] ; $p
0709   07EB 2A            mov b, [d]
0710   07EC             ; START TERMS
0711   07EC D7            push a
0712   07ED 11            mov a, b
0713   07EE 26 02 00      mov b, $2
0714   07F1 56            add b, a
0715   07F2 E4            pop a
0716   07F3             ; END TERMS
0717   07F3 E7            pop d
0718   07F4 FD 43         mov [d], b
0719   07F6             ;; break; 
0720   07F6 0A 05 08      jmp _switch8_exit ; case break
0721   07F9             _switch8_default:
0722   07F9             ;; print("Error: Unknown argument type.\n"); 
0723   07F9 26 2E 64      mov b, __s30 ; "Error: Unknown argument type.\n"
0724   07FC FD AB         swp b
0725   07FE D8            push b
0726   07FF 07 43 13      call print
0727   0802 51 02 00      add sp, 2
0728   0805             _switch8_exit:
0729   0805             ;; format_p++; 
0730   0805 FA FD FF      lea d, [bp + -3] ; $format_p
0731   0808 2A            mov b, [d]
0732   0809 D8            push b
0733   080A FD 77         inc b
0734   080C FA FD FF      lea d, [bp + -3] ; $format_p
0735   080F FD 43         mov [d], b
0736   0811 E5            pop b
0737   0812 0A 31 08      jmp _if7_exit
0738   0815             _if7_else:
0739   0815             ;; putchar(*format_p); 
0740   0815 FA FD FF      lea d, [bp + -3] ; $format_p
0741   0818 2A            mov b, [d]
0742   0819 74            mov d, b
0743   081A 32            mov bl, [d]
0744   081B A7 00         mov bh, 0
0745   081D DD            push bl
0746   081E 07 FB 12      call putchar
0747   0821 51 01 00      add sp, 1
0748   0824             ;; format_p++; 
0749   0824 FA FD FF      lea d, [bp + -3] ; $format_p
0750   0827 2A            mov b, [d]
0751   0828 D8            push b
0752   0829 FD 77         inc b
0753   082B FA FD FF      lea d, [bp + -3] ; $format_p
0754   082E FD 43         mov [d], b
0755   0830 E5            pop b
0756   0831             _if7_exit:
0757   0831             _if6_exit:
0758   0831             _for5_update:
0759   0831 0A F4 05      jmp _for5_cond
0760   0834             _for5_exit:
0761   0834 F9            leave
0762   0835 09            ret
0763   0836             
0764   0836             scanf:
0765   0836 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0766   0839             ; $p 
0767   0839             ; $format_p 
0768   0839             ; $c 
0769   0839             ; $i 
0770   0839             ; $input_string 
0771   0839 52 07 02      sub sp, 519
0772   083C             ;; format_p = format; 
0773   083C FA FD FF      lea d, [bp + -3] ; $format_p
0774   083F DA            push d
0775   0840 FA 05 00      lea d, [bp + 5] ; $format
0776   0843 2A            mov b, [d]
0777   0844 E7            pop d
0778   0845 FD 43         mov [d], b
0779   0847             ;; p = &format + 2; 
0780   0847 FA FF FF      lea d, [bp + -1] ; $p
0781   084A DA            push d
0782   084B FA 05 00      lea d, [bp + 5] ; $format
0783   084E 2D            mov b, d
0784   084F             ; START TERMS
0785   084F D7            push a
0786   0850 11            mov a, b
0787   0851 26 02 00      mov b, $2
0788   0854 56            add b, a
0789   0855 E4            pop a
0790   0856             ; END TERMS
0791   0856 E7            pop d
0792   0857 FD 43         mov [d], b
0793   0859             ;; for(;;){ 
0794   0859             _for12_init:
0795   0859             _for12_cond:
0796   0859             _for12_block:
0797   0859             ;; if(!*format_p) break; 
0798   0859             _if13_cond:
0799   0859 FA FD FF      lea d, [bp + -3] ; $format_p
0800   085C 2A            mov b, [d]
0801   085D 74            mov d, b
0802   085E 32            mov bl, [d]
0803   085F A7 00         mov bh, 0
0804   0861 C0 00 00      cmp b, 0
0805   0864 FD 71         seq ; !
0806   0866 C0 00 00      cmp b, 0
0807   0869 C6 72 08      je _if13_else
0808   086C             _if13_true:
0809   086C             ;; break; 
0810   086C 0A 6F 0A      jmp _for12_exit ; for break
0811   086F 0A 6C 0A      jmp _if13_exit
0812   0872             _if13_else:
0813   0872             ;; if(*format_p == '%'){ 
0814   0872             _if14_cond:
0815   0872 FA FD FF      lea d, [bp + -3] ; $format_p
0816   0875 2A            mov b, [d]
0817   0876 74            mov d, b
0818   0877 32            mov bl, [d]
0819   0878 A7 00         mov bh, 0
0820   087A             ; START RELATIONAL
0821   087A D7            push a
0822   087B 11            mov a, b
0823   087C 26 25 00      mov b, $25
0824   087F B0            cmp a, b
0825   0880 FD 71         seq ; ==
0826   0882 E4            pop a
0827   0883             ; END RELATIONAL
0828   0883 C0 00 00      cmp b, 0
0829   0886 C6 50 0A      je _if14_else
0830   0889             _if14_true:
0831   0889             ;; format_p++; 
0832   0889 FA FD FF      lea d, [bp + -3] ; $format_p
0833   088C 2A            mov b, [d]
0834   088D D8            push b
0835   088E FD 77         inc b
0836   0890 FA FD FF      lea d, [bp + -3] ; $format_p
0837   0893 FD 43         mov [d], b
0838   0895 E5            pop b
0839   0896             ;; switch(*format_p){ 
0840   0896             _switch15_expr:
0841   0896 FA FD FF      lea d, [bp + -3] ; $format_p
0842   0899 2A            mov b, [d]
0843   089A 74            mov d, b
0844   089B 32            mov bl, [d]
0845   089C A7 00         mov bh, 0
0846   089E             _switch15_comparisons:
0847   089E C1 6C         cmp bl, $6c
0848   08A0 C6 CC 08      je _switch15_case0
0849   08A3 C1 4C         cmp bl, $4c
0850   08A5 C6 CC 08      je _switch15_case1
0851   08A8 C1 64         cmp bl, $64
0852   08AA C6 5E 09      je _switch15_case2
0853   08AD C1 69         cmp bl, $69
0854   08AF C6 5E 09      je _switch15_case3
0855   08B2 C1 75         cmp bl, $75
0856   08B4 C6 8B 09      je _switch15_case4
0857   08B7 C1 78         cmp bl, $78
0858   08B9 C6 B8 09      je _switch15_case5
0859   08BC C1 63         cmp bl, $63
0860   08BE C6 CD 09      je _switch15_case6
0861   08C1 C1 73         cmp bl, $73
0862   08C3 C6 FC 09      je _switch15_case7
0863   08C6 0A 34 0A      jmp _switch15_default
0864   08C9 0A 40 0A      jmp _switch15_exit
0865   08CC             _switch15_case0:
0866   08CC             _switch15_case1:
0867   08CC             ;; format_p++; 
0868   08CC FA FD FF      lea d, [bp + -3] ; $format_p
0869   08CF 2A            mov b, [d]
0870   08D0 D8            push b
0871   08D1 FD 77         inc b
0872   08D3 FA FD FF      lea d, [bp + -3] ; $format_p
0873   08D6 FD 43         mov [d], b
0874   08D8 E5            pop b
0875   08D9             ;; if(*format_p == 'd' || *format_p == 'i'); 
0876   08D9             _if16_cond:
0877   08D9 FA FD FF      lea d, [bp + -3] ; $format_p
0878   08DC 2A            mov b, [d]
0879   08DD 74            mov d, b
0880   08DE 32            mov bl, [d]
0881   08DF A7 00         mov bh, 0
0882   08E1             ; START RELATIONAL
0883   08E1 D7            push a
0884   08E2 11            mov a, b
0885   08E3 26 64 00      mov b, $64
0886   08E6 B0            cmp a, b
0887   08E7 FD 71         seq ; ==
0888   08E9 E4            pop a
0889   08EA             ; END RELATIONAL
0890   08EA D7            push a
0891   08EB 11            mov a, b
0892   08EC FA FD FF      lea d, [bp + -3] ; $format_p
0893   08EF 2A            mov b, [d]
0894   08F0 74            mov d, b
0895   08F1 32            mov bl, [d]
0896   08F2 A7 00         mov bh, 0
0897   08F4             ; START RELATIONAL
0898   08F4 D7            push a
0899   08F5 11            mov a, b
0900   08F6 26 69 00      mov b, $69
0901   08F9 B0            cmp a, b
0902   08FA FD 71         seq ; ==
0903   08FC E4            pop a
0904   08FD             ; END RELATIONAL
0905   08FD FD A8         sor a, b ; ||
0906   08FF E4            pop a
0907   0900 C0 00 00      cmp b, 0
0908   0903 C6 09 09      je _if16_else
0909   0906             _if16_true:
0910   0906             ;; ; 
0911   0906 0A 49 09      jmp _if16_exit
0912   0909             _if16_else:
0913   0909             ;; if(*format_p == 'u'); 
0914   0909             _if17_cond:
0915   0909 FA FD FF      lea d, [bp + -3] ; $format_p
0916   090C 2A            mov b, [d]
0917   090D 74            mov d, b
0918   090E 32            mov bl, [d]
0919   090F A7 00         mov bh, 0
0920   0911             ; START RELATIONAL
0921   0911 D7            push a
0922   0912 11            mov a, b
0923   0913 26 75 00      mov b, $75
0924   0916 B0            cmp a, b
0925   0917 FD 71         seq ; ==
0926   0919 E4            pop a
0927   091A             ; END RELATIONAL
0928   091A C0 00 00      cmp b, 0
0929   091D C6 23 09      je _if17_else
0930   0920             _if17_true:
0931   0920             ;; ; 
0932   0920 0A 49 09      jmp _if17_exit
0933   0923             _if17_else:
0934   0923             ;; if(*format_p == 'x'); 
0935   0923             _if18_cond:
0936   0923 FA FD FF      lea d, [bp + -3] ; $format_p
0937   0926 2A            mov b, [d]
0938   0927 74            mov d, b
0939   0928 32            mov bl, [d]
0940   0929 A7 00         mov bh, 0
0941   092B             ; START RELATIONAL
0942   092B D7            push a
0943   092C 11            mov a, b
0944   092D 26 78 00      mov b, $78
0945   0930 B0            cmp a, b
0946   0931 FD 71         seq ; ==
0947   0933 E4            pop a
0948   0934             ; END RELATIONAL
0949   0934 C0 00 00      cmp b, 0
0950   0937 C6 3D 09      je _if18_else
0951   093A             _if18_true:
0952   093A             ;; ; 
0953   093A 0A 49 09      jmp _if18_exit
0954   093D             _if18_else:
0955   093D             ;; err("Unexpected format in printf."); 
0956   093D 26 11 64      mov b, __s29 ; "Unexpected format in printf."
0957   0940 FD AB         swp b
0958   0942 D8            push b
0959   0943 07 71 0A      call err
0960   0946 51 02 00      add sp, 2
0961   0949             _if18_exit:
0962   0949             _if17_exit:
0963   0949             _if16_exit:
0964   0949             ;; p = p + 4; 
0965   0949 FA FF FF      lea d, [bp + -1] ; $p
0966   094C DA            push d
0967   094D FA FF FF      lea d, [bp + -1] ; $p
0968   0950 2A            mov b, [d]
0969   0951             ; START TERMS
0970   0951 D7            push a
0971   0952 11            mov a, b
0972   0953 26 04 00      mov b, $4
0973   0956 56            add b, a
0974   0957 E4            pop a
0975   0958             ; END TERMS
0976   0958 E7            pop d
0977   0959 FD 43         mov [d], b
0978   095B             ;; break; 
0979   095B 0A 40 0A      jmp _switch15_exit ; case break
0980   095E             _switch15_case2:
0981   095E             _switch15_case3:
0982   095E             ;; i = scann(); 
0983   095E FA FA FF      lea d, [bp + -6] ; $i
0984   0961 DA            push d
0985   0962 07 1E 13      call scann
0986   0965 E7            pop d
0987   0966 FD 43         mov [d], b
0988   0968             ;; **(int **)p = i; 
0989   0968 FA FF FF      lea d, [bp + -1] ; $p
0990   096B 2A            mov b, [d]
0991   096C 74            mov d, b
0992   096D 2A            mov b, [d]
0993   096E D8            push b
0994   096F FA FA FF      lea d, [bp + -6] ; $i
0995   0972 2A            mov b, [d]
0996   0973 E7            pop d
0997   0974 FD 43         mov [d], b
0998   0976             ;; p = p + 2; 
0999   0976 FA FF FF      lea d, [bp + -1] ; $p
1000   0979 DA            push d
1001   097A FA FF FF      lea d, [bp + -1] ; $p
1002   097D 2A            mov b, [d]
1003   097E             ; START TERMS
1004   097E D7            push a
1005   097F 11            mov a, b
1006   0980 26 02 00      mov b, $2
1007   0983 56            add b, a
1008   0984 E4            pop a
1009   0985             ; END TERMS
1010   0985 E7            pop d
1011   0986 FD 43         mov [d], b
1012   0988             ;; break; 
1013   0988 0A 40 0A      jmp _switch15_exit ; case break
1014   098B             _switch15_case4:
1015   098B             ;; i = scann(); 
1016   098B FA FA FF      lea d, [bp + -6] ; $i
1017   098E DA            push d
1018   098F 07 1E 13      call scann
1019   0992 E7            pop d
1020   0993 FD 43         mov [d], b
1021   0995             ;; **(int **)p = i; 
1022   0995 FA FF FF      lea d, [bp + -1] ; $p
1023   0998 2A            mov b, [d]
1024   0999 74            mov d, b
1025   099A 2A            mov b, [d]
1026   099B D8            push b
1027   099C FA FA FF      lea d, [bp + -6] ; $i
1028   099F 2A            mov b, [d]
1029   09A0 E7            pop d
1030   09A1 FD 43         mov [d], b
1031   09A3             ;; p = p + 2; 
1032   09A3 FA FF FF      lea d, [bp + -1] ; $p
1033   09A6 DA            push d
1034   09A7 FA FF FF      lea d, [bp + -1] ; $p
1035   09AA 2A            mov b, [d]
1036   09AB             ; START TERMS
1037   09AB D7            push a
1038   09AC 11            mov a, b
1039   09AD 26 02 00      mov b, $2
1040   09B0 56            add b, a
1041   09B1 E4            pop a
1042   09B2             ; END TERMS
1043   09B2 E7            pop d
1044   09B3 FD 43         mov [d], b
1045   09B5             ;; break; 
1046   09B5 0A 40 0A      jmp _switch15_exit ; case break
1047   09B8             _switch15_case5:
1048   09B8             ;; p = p + 2; 
1049   09B8 FA FF FF      lea d, [bp + -1] ; $p
1050   09BB DA            push d
1051   09BC FA FF FF      lea d, [bp + -1] ; $p
1052   09BF 2A            mov b, [d]
1053   09C0             ; START TERMS
1054   09C0 D7            push a
1055   09C1 11            mov a, b
1056   09C2 26 02 00      mov b, $2
1057   09C5 56            add b, a
1058   09C6 E4            pop a
1059   09C7             ; END TERMS
1060   09C7 E7            pop d
1061   09C8 FD 43         mov [d], b
1062   09CA             ;; break; 
1063   09CA 0A 40 0A      jmp _switch15_exit ; case break
1064   09CD             _switch15_case6:
1065   09CD             ;; c = getchar(); 
1066   09CD FA FC FF      lea d, [bp + -4] ; $c
1067   09D0 DA            push d
1068   09D1 07 08 13      call getchar
1069   09D4 E7            pop d
1070   09D5 FD 3E         mov [d], bl
1071   09D7             ;; **(char **)p = c; 
1072   09D7 FA FF FF      lea d, [bp + -1] ; $p
1073   09DA 2A            mov b, [d]
1074   09DB 74            mov d, b
1075   09DC 2A            mov b, [d]
1076   09DD D8            push b
1077   09DE FA FC FF      lea d, [bp + -4] ; $c
1078   09E1 32            mov bl, [d]
1079   09E2 A7 00         mov bh, 0
1080   09E4 E7            pop d
1081   09E5 FD 43         mov [d], b
1082   09E7             ;; p = p + 2; 
1083   09E7 FA FF FF      lea d, [bp + -1] ; $p
1084   09EA DA            push d
1085   09EB FA FF FF      lea d, [bp + -1] ; $p
1086   09EE 2A            mov b, [d]
1087   09EF             ; START TERMS
1088   09EF D7            push a
1089   09F0 11            mov a, b
1090   09F1 26 02 00      mov b, $2
1091   09F4 56            add b, a
1092   09F5 E4            pop a
1093   09F6             ; END TERMS
1094   09F6 E7            pop d
1095   09F7 FD 43         mov [d], b
1096   09F9             ;; break; 
1097   09F9 0A 40 0A      jmp _switch15_exit ; case break
1098   09FC             _switch15_case7:
1099   09FC             ;; gets(input_string); 
1100   09FC FA FA FD      lea d, [bp + -518] ; $input_string
1101   09FF 2D            mov b, d
1102   0A00 FD AB         swp b
1103   0A02 D8            push b
1104   0A03 07 F0 0B      call gets
1105   0A06 51 02 00      add sp, 2
1106   0A09             ;; strcpy(*(char **)p, input_string); 
1107   0A09 FA FA FD      lea d, [bp + -518] ; $input_string
1108   0A0C 2D            mov b, d
1109   0A0D FD AB         swp b
1110   0A0F D8            push b
1111   0A10 FA FF FF      lea d, [bp + -1] ; $p
1112   0A13 2A            mov b, [d]
1113   0A14 74            mov d, b
1114   0A15 2A            mov b, [d]
1115   0A16 FD AB         swp b
1116   0A18 D8            push b
1117   0A19 07 14 04      call strcpy
1118   0A1C 51 04 00      add sp, 4
1119   0A1F             ;; p = p + 2; 
1120   0A1F FA FF FF      lea d, [bp + -1] ; $p
1121   0A22 DA            push d
1122   0A23 FA FF FF      lea d, [bp + -1] ; $p
1123   0A26 2A            mov b, [d]
1124   0A27             ; START TERMS
1125   0A27 D7            push a
1126   0A28 11            mov a, b
1127   0A29 26 02 00      mov b, $2
1128   0A2C 56            add b, a
1129   0A2D E4            pop a
1130   0A2E             ; END TERMS
1131   0A2E E7            pop d
1132   0A2F FD 43         mov [d], b
1133   0A31             ;; break; 
1134   0A31 0A 40 0A      jmp _switch15_exit ; case break
1135   0A34             _switch15_default:
1136   0A34             ;; print("Error: Unknown argument type.\n"); 
1137   0A34 26 2E 64      mov b, __s30 ; "Error: Unknown argument type.\n"
1138   0A37 FD AB         swp b
1139   0A39 D8            push b
1140   0A3A 07 43 13      call print
1141   0A3D 51 02 00      add sp, 2
1142   0A40             _switch15_exit:
1143   0A40             ;; format_p++; 
1144   0A40 FA FD FF      lea d, [bp + -3] ; $format_p
1145   0A43 2A            mov b, [d]
1146   0A44 D8            push b
1147   0A45 FD 77         inc b
1148   0A47 FA FD FF      lea d, [bp + -3] ; $format_p
1149   0A4A FD 43         mov [d], b
1150   0A4C E5            pop b
1151   0A4D 0A 6C 0A      jmp _if14_exit
1152   0A50             _if14_else:
1153   0A50             ;; putchar(*format_p); 
1154   0A50 FA FD FF      lea d, [bp + -3] ; $format_p
1155   0A53 2A            mov b, [d]
1156   0A54 74            mov d, b
1157   0A55 32            mov bl, [d]
1158   0A56 A7 00         mov bh, 0
1159   0A58 DD            push bl
1160   0A59 07 FB 12      call putchar
1161   0A5C 51 01 00      add sp, 1
1162   0A5F             ;; format_p++; 
1163   0A5F FA FD FF      lea d, [bp + -3] ; $format_p
1164   0A62 2A            mov b, [d]
1165   0A63 D8            push b
1166   0A64 FD 77         inc b
1167   0A66 FA FD FF      lea d, [bp + -3] ; $format_p
1168   0A69 FD 43         mov [d], b
1169   0A6B E5            pop b
1170   0A6C             _if14_exit:
1171   0A6C             _if13_exit:
1172   0A6C             _for12_update:
1173   0A6C 0A 59 08      jmp _for12_cond
1174   0A6F             _for12_exit:
1175   0A6F F9            leave
1176   0A70 09            ret
1177   0A71             
1178   0A71             err:
1179   0A71 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1180   0A74             ;; print(e); 
1181   0A74 FA 05 00      lea d, [bp + 5] ; $e
1182   0A77 2A            mov b, [d]
1183   0A78 FD AB         swp b
1184   0A7A D8            push b
1185   0A7B 07 43 13      call print
1186   0A7E 51 02 00      add sp, 2
1187   0A81 F9            leave
1188   0A82 09            ret
1189   0A83             
1190   0A83             printx32:
1191   0A83 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1192   0A86             
1193   0A86             ; --- BEGIN INLINE ASM BLOCK
1194   0A86 FA 05 00      lea d, [bp + 5] ; $hex
1195   0A89 2B 02 00      mov b, [d+2]
1196   0A8C 07 2E 16      call print_u16x
1197   0A8F 2A            mov b, [d]
1198   0A90 07 2E 16      call print_u16x
1199   0A93             ; --- END INLINE ASM BLOCK
1200   0A93             
1201   0A93 F9            leave
1202   0A94 09            ret
1203   0A95             
1204   0A95             printx16:
1205   0A95 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1206   0A98             
1207   0A98             ; --- BEGIN INLINE ASM BLOCK
1208   0A98 FA 05 00      lea d, [bp + 5] ; $hex
1209   0A9B 2A            mov b, [d]
1210   0A9C 07 2E 16      call print_u16x
1211   0A9F             ; --- END INLINE ASM BLOCK
1212   0A9F             
1213   0A9F F9            leave
1214   0AA0 09            ret
1215   0AA1             
1216   0AA1             printx8:
1217   0AA1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1218   0AA4             
1219   0AA4             ; --- BEGIN INLINE ASM BLOCK
1220   0AA4 FA 05 00      lea d, [bp + 5] ; $hex
1221   0AA7 32            mov bl, [d]
1222   0AA8 07 72 16      call print_u8x
1223   0AAB             ; --- END INLINE ASM BLOCK
1224   0AAB             
1225   0AAB F9            leave
1226   0AAC 09            ret
1227   0AAD             
1228   0AAD             hex_str_to_int:
1229   0AAD F8 00 00      enter 0 ; (push bp; mov bp, sp)
1230   0AB0             ; $value 
1231   0AB0 10 00 00      mov a, $0
1232   0AB3 45 FF FF      mov [bp + -1], a
1233   0AB6             ; $i 
1234   0AB6             ; $hex_char 
1235   0AB6             ; $len 
1236   0AB6 52 07 00      sub sp, 7
1237   0AB9             ;; len = strlen(hex_string); 
1238   0AB9 FA FA FF      lea d, [bp + -6] ; $len
1239   0ABC DA            push d
1240   0ABD FA 05 00      lea d, [bp + 5] ; $hex_string
1241   0AC0 2A            mov b, [d]
1242   0AC1 FD AB         swp b
1243   0AC3 D8            push b
1244   0AC4 07 88 05      call strlen
1245   0AC7 51 02 00      add sp, 2
1246   0ACA E7            pop d
1247   0ACB FD 43         mov [d], b
1248   0ACD             ;; for (i = 0; i < len; i++) { 
1249   0ACD             _for19_init:
1250   0ACD FA FD FF      lea d, [bp + -3] ; $i
1251   0AD0 DA            push d
1252   0AD1 26 00 00      mov b, $0
1253   0AD4 E7            pop d
1254   0AD5 FD 43         mov [d], b
1255   0AD7             _for19_cond:
1256   0AD7 FA FD FF      lea d, [bp + -3] ; $i
1257   0ADA 2A            mov b, [d]
1258   0ADB             ; START RELATIONAL
1259   0ADB D7            push a
1260   0ADC 11            mov a, b
1261   0ADD FA FA FF      lea d, [bp + -6] ; $len
1262   0AE0 2A            mov b, [d]
1263   0AE1 B0            cmp a, b
1264   0AE2 FD 73         slt ; < (signed)
1265   0AE4 E4            pop a
1266   0AE5             ; END RELATIONAL
1267   0AE5 C0 00 00      cmp b, 0
1268   0AE8 C6 EA 0B      je _for19_exit
1269   0AEB             _for19_block:
1270   0AEB             ;; hex_char = hex_string[i]; 
1271   0AEB FA FC FF      lea d, [bp + -4] ; $hex_char
1272   0AEE DA            push d
1273   0AEF FA 05 00      lea d, [bp + 5] ; $hex_string
1274   0AF2 FD 2A         mov d, [d]
1275   0AF4 D7            push a
1276   0AF5 DA            push d
1277   0AF6 FA FD FF      lea d, [bp + -3] ; $i
1278   0AF9 2A            mov b, [d]
1279   0AFA E7            pop d
1280   0AFB FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1281   0AFF E4            pop a
1282   0B00 32            mov bl, [d]
1283   0B01 A7 00         mov bh, 0
1284   0B03 E7            pop d
1285   0B04 FD 3E         mov [d], bl
1286   0B06             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1287   0B06             _if20_cond:
1288   0B06 FA FC FF      lea d, [bp + -4] ; $hex_char
1289   0B09 32            mov bl, [d]
1290   0B0A A7 00         mov bh, 0
1291   0B0C             ; START RELATIONAL
1292   0B0C D7            push a
1293   0B0D 11            mov a, b
1294   0B0E 26 61 00      mov b, $61
1295   0B11 B0            cmp a, b
1296   0B12 FD 80         sge ; >=
1297   0B14 E4            pop a
1298   0B15             ; END RELATIONAL
1299   0B15 D7            push a
1300   0B16 11            mov a, b
1301   0B17 FA FC FF      lea d, [bp + -4] ; $hex_char
1302   0B1A 32            mov bl, [d]
1303   0B1B A7 00         mov bh, 0
1304   0B1D             ; START RELATIONAL
1305   0B1D D7            push a
1306   0B1E 11            mov a, b
1307   0B1F 26 66 00      mov b, $66
1308   0B22 B0            cmp a, b
1309   0B23 FD 73         slt ; <= (signed)
1310   0B25 E4            pop a
1311   0B26             ; END RELATIONAL
1312   0B26 FD A7         sand a, b
1313   0B28 E4            pop a
1314   0B29 C0 00 00      cmp b, 0
1315   0B2C C6 5D 0B      je _if20_else
1316   0B2F             _if20_true:
1317   0B2F             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1318   0B2F FA FF FF      lea d, [bp + -1] ; $value
1319   0B32 DA            push d
1320   0B33 FA FF FF      lea d, [bp + -1] ; $value
1321   0B36 2A            mov b, [d]
1322   0B37             ; START FACTORS
1323   0B37 D7            push a
1324   0B38 11            mov a, b
1325   0B39 26 10 00      mov b, $10
1326   0B3C AC            mul a, b ; *
1327   0B3D 11            mov a, b
1328   0B3E 27            mov b, a
1329   0B3F E4            pop a
1330   0B40             ; END FACTORS
1331   0B40             ; START TERMS
1332   0B40 D7            push a
1333   0B41 11            mov a, b
1334   0B42 FA FC FF      lea d, [bp + -4] ; $hex_char
1335   0B45 32            mov bl, [d]
1336   0B46 A7 00         mov bh, 0
1337   0B48             ; START TERMS
1338   0B48 D7            push a
1339   0B49 11            mov a, b
1340   0B4A 26 61 00      mov b, $61
1341   0B4D 60            sub a, b
1342   0B4E 27            mov b, a
1343   0B4F 11            mov a, b
1344   0B50 26 0A 00      mov b, $a
1345   0B53 56            add b, a
1346   0B54 E4            pop a
1347   0B55             ; END TERMS
1348   0B55 56            add b, a
1349   0B56 E4            pop a
1350   0B57             ; END TERMS
1351   0B57 E7            pop d
1352   0B58 FD 43         mov [d], b
1353   0B5A 0A DA 0B      jmp _if20_exit
1354   0B5D             _if20_else:
1355   0B5D             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1356   0B5D             _if21_cond:
1357   0B5D FA FC FF      lea d, [bp + -4] ; $hex_char
1358   0B60 32            mov bl, [d]
1359   0B61 A7 00         mov bh, 0
1360   0B63             ; START RELATIONAL
1361   0B63 D7            push a
1362   0B64 11            mov a, b
1363   0B65 26 41 00      mov b, $41
1364   0B68 B0            cmp a, b
1365   0B69 FD 80         sge ; >=
1366   0B6B E4            pop a
1367   0B6C             ; END RELATIONAL
1368   0B6C D7            push a
1369   0B6D 11            mov a, b
1370   0B6E FA FC FF      lea d, [bp + -4] ; $hex_char
1371   0B71 32            mov bl, [d]
1372   0B72 A7 00         mov bh, 0
1373   0B74             ; START RELATIONAL
1374   0B74 D7            push a
1375   0B75 11            mov a, b
1376   0B76 26 46 00      mov b, $46
1377   0B79 B0            cmp a, b
1378   0B7A FD 73         slt ; <= (signed)
1379   0B7C E4            pop a
1380   0B7D             ; END RELATIONAL
1381   0B7D FD A7         sand a, b
1382   0B7F E4            pop a
1383   0B80 C0 00 00      cmp b, 0
1384   0B83 C6 B4 0B      je _if21_else
1385   0B86             _if21_true:
1386   0B86             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1387   0B86 FA FF FF      lea d, [bp + -1] ; $value
1388   0B89 DA            push d
1389   0B8A FA FF FF      lea d, [bp + -1] ; $value
1390   0B8D 2A            mov b, [d]
1391   0B8E             ; START FACTORS
1392   0B8E D7            push a
1393   0B8F 11            mov a, b
1394   0B90 26 10 00      mov b, $10
1395   0B93 AC            mul a, b ; *
1396   0B94 11            mov a, b
1397   0B95 27            mov b, a
1398   0B96 E4            pop a
1399   0B97             ; END FACTORS
1400   0B97             ; START TERMS
1401   0B97 D7            push a
1402   0B98 11            mov a, b
1403   0B99 FA FC FF      lea d, [bp + -4] ; $hex_char
1404   0B9C 32            mov bl, [d]
1405   0B9D A7 00         mov bh, 0
1406   0B9F             ; START TERMS
1407   0B9F D7            push a
1408   0BA0 11            mov a, b
1409   0BA1 26 41 00      mov b, $41
1410   0BA4 60            sub a, b
1411   0BA5 27            mov b, a
1412   0BA6 11            mov a, b
1413   0BA7 26 0A 00      mov b, $a
1414   0BAA 56            add b, a
1415   0BAB E4            pop a
1416   0BAC             ; END TERMS
1417   0BAC 56            add b, a
1418   0BAD E4            pop a
1419   0BAE             ; END TERMS
1420   0BAE E7            pop d
1421   0BAF FD 43         mov [d], b
1422   0BB1 0A DA 0B      jmp _if21_exit
1423   0BB4             _if21_else:
1424   0BB4             ;; value = (value * 16) + (hex_char - '0'); 
1425   0BB4 FA FF FF      lea d, [bp + -1] ; $value
1426   0BB7 DA            push d
1427   0BB8 FA FF FF      lea d, [bp + -1] ; $value
1428   0BBB 2A            mov b, [d]
1429   0BBC             ; START FACTORS
1430   0BBC D7            push a
1431   0BBD 11            mov a, b
1432   0BBE 26 10 00      mov b, $10
1433   0BC1 AC            mul a, b ; *
1434   0BC2 11            mov a, b
1435   0BC3 27            mov b, a
1436   0BC4 E4            pop a
1437   0BC5             ; END FACTORS
1438   0BC5             ; START TERMS
1439   0BC5 D7            push a
1440   0BC6 11            mov a, b
1441   0BC7 FA FC FF      lea d, [bp + -4] ; $hex_char
1442   0BCA 32            mov bl, [d]
1443   0BCB A7 00         mov bh, 0
1444   0BCD             ; START TERMS
1445   0BCD D7            push a
1446   0BCE 11            mov a, b
1447   0BCF 26 30 00      mov b, $30
1448   0BD2 60            sub a, b
1449   0BD3 27            mov b, a
1450   0BD4 E4            pop a
1451   0BD5             ; END TERMS
1452   0BD5 56            add b, a
1453   0BD6 E4            pop a
1454   0BD7             ; END TERMS
1455   0BD7 E7            pop d
1456   0BD8 FD 43         mov [d], b
1457   0BDA             _if21_exit:
1458   0BDA             _if20_exit:
1459   0BDA             _for19_update:
1460   0BDA FA FD FF      lea d, [bp + -3] ; $i
1461   0BDD 2A            mov b, [d]
1462   0BDE D8            push b
1463   0BDF FD 77         inc b
1464   0BE1 FA FD FF      lea d, [bp + -3] ; $i
1465   0BE4 FD 43         mov [d], b
1466   0BE6 E5            pop b
1467   0BE7 0A D7 0A      jmp _for19_cond
1468   0BEA             _for19_exit:
1469   0BEA             ;; return value; 
1470   0BEA FA FF FF      lea d, [bp + -1] ; $value
1471   0BED 2A            mov b, [d]
1472   0BEE F9            leave
1473   0BEF 09            ret
1474   0BF0             
1475   0BF0             gets:
1476   0BF0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1477   0BF3             
1478   0BF3             ; --- BEGIN INLINE ASM BLOCK
1479   0BF3 FA 05 00      lea d, [bp + 5] ; $s
1480   0BF6 15            mov a, [d]
1481   0BF7 3C            mov d, a
1482   0BF8 07 93 14      call _gets
1483   0BFB             ; --- END INLINE ASM BLOCK
1484   0BFB             
1485   0BFB             ;; return strlen(s); 
1486   0BFB FA 05 00      lea d, [bp + 5] ; $s
1487   0BFE 2A            mov b, [d]
1488   0BFF FD AB         swp b
1489   0C01 D8            push b
1490   0C02 07 88 05      call strlen
1491   0C05 51 02 00      add sp, 2
1492   0C08 F9            leave
1493   0C09 09            ret
1494   0C0A             
1495   0C0A             print_signed:
1496   0C0A F8 00 00      enter 0 ; (push bp; mov bp, sp)
1497   0C0D             ; $digits 
1498   0C0D             ; $i 
1499   0C0D 10 00 00      mov a, $0
1500   0C10 45 FA FF      mov [bp + -6], a
1501   0C13 52 07 00      sub sp, 7
1502   0C16             ;; if (num < 0) { 
1503   0C16             _if22_cond:
1504   0C16 FA 05 00      lea d, [bp + 5] ; $num
1505   0C19 2A            mov b, [d]
1506   0C1A             ; START RELATIONAL
1507   0C1A D7            push a
1508   0C1B 11            mov a, b
1509   0C1C 26 00 00      mov b, $0
1510   0C1F B0            cmp a, b
1511   0C20 FD 73         slt ; < (signed)
1512   0C22 E4            pop a
1513   0C23             ; END RELATIONAL
1514   0C23 C0 00 00      cmp b, 0
1515   0C26 C6 43 0C      je _if22_else
1516   0C29             _if22_true:
1517   0C29             ;; putchar('-'); 
1518   0C29 26 2D 00      mov b, $2d
1519   0C2C DD            push bl
1520   0C2D 07 FB 12      call putchar
1521   0C30 51 01 00      add sp, 1
1522   0C33             ;; num = -num; 
1523   0C33 FA 05 00      lea d, [bp + 5] ; $num
1524   0C36 DA            push d
1525   0C37 FA 05 00      lea d, [bp + 5] ; $num
1526   0C3A 2A            mov b, [d]
1527   0C3B FD 97         neg b
1528   0C3D E7            pop d
1529   0C3E FD 43         mov [d], b
1530   0C40 0A 65 0C      jmp _if22_exit
1531   0C43             _if22_else:
1532   0C43             ;; if (num == 0) { 
1533   0C43             _if23_cond:
1534   0C43 FA 05 00      lea d, [bp + 5] ; $num
1535   0C46 2A            mov b, [d]
1536   0C47             ; START RELATIONAL
1537   0C47 D7            push a
1538   0C48 11            mov a, b
1539   0C49 26 00 00      mov b, $0
1540   0C4C B0            cmp a, b
1541   0C4D FD 71         seq ; ==
1542   0C4F E4            pop a
1543   0C50             ; END RELATIONAL
1544   0C50 C0 00 00      cmp b, 0
1545   0C53 C6 65 0C      je _if23_exit
1546   0C56             _if23_true:
1547   0C56             ;; putchar('0'); 
1548   0C56 26 30 00      mov b, $30
1549   0C59 DD            push bl
1550   0C5A 07 FB 12      call putchar
1551   0C5D 51 01 00      add sp, 1
1552   0C60             ;; return; 
1553   0C60 F9            leave
1554   0C61 09            ret
1555   0C62 0A 65 0C      jmp _if23_exit
1556   0C65             _if23_exit:
1557   0C65             _if22_exit:
1558   0C65             ;; while (num > 0) { 
1559   0C65             _while24_cond:
1560   0C65 FA 05 00      lea d, [bp + 5] ; $num
1561   0C68 2A            mov b, [d]
1562   0C69             ; START RELATIONAL
1563   0C69 D7            push a
1564   0C6A 11            mov a, b
1565   0C6B 26 00 00      mov b, $0
1566   0C6E B0            cmp a, b
1567   0C6F FD 7F         sgt ; >
1568   0C71 E4            pop a
1569   0C72             ; END RELATIONAL
1570   0C72 C0 00 00      cmp b, 0
1571   0C75 C6 BF 0C      je _while24_exit
1572   0C78             _while24_block:
1573   0C78             ;; digits[i] = '0' + (num % 10); 
1574   0C78 FA FC FF      lea d, [bp + -4] ; $digits
1575   0C7B D7            push a
1576   0C7C DA            push d
1577   0C7D FA FA FF      lea d, [bp + -6] ; $i
1578   0C80 2A            mov b, [d]
1579   0C81 E7            pop d
1580   0C82 5A            add d, b
1581   0C83 E4            pop a
1582   0C84 DA            push d
1583   0C85 26 30 00      mov b, $30
1584   0C88             ; START TERMS
1585   0C88 D7            push a
1586   0C89 11            mov a, b
1587   0C8A FA 05 00      lea d, [bp + 5] ; $num
1588   0C8D 2A            mov b, [d]
1589   0C8E             ; START FACTORS
1590   0C8E D7            push a
1591   0C8F 11            mov a, b
1592   0C90 26 0A 00      mov b, $a
1593   0C93 AE            div a, b ; 
1594   0C94 11            mov a, b
1595   0C95 27            mov b, a
1596   0C96 E4            pop a
1597   0C97             ; END FACTORS
1598   0C97 56            add b, a
1599   0C98 E4            pop a
1600   0C99             ; END TERMS
1601   0C99 E7            pop d
1602   0C9A FD 3E         mov [d], bl
1603   0C9C             ;; num = num / 10; 
1604   0C9C FA 05 00      lea d, [bp + 5] ; $num
1605   0C9F DA            push d
1606   0CA0 FA 05 00      lea d, [bp + 5] ; $num
1607   0CA3 2A            mov b, [d]
1608   0CA4             ; START FACTORS
1609   0CA4 D7            push a
1610   0CA5 11            mov a, b
1611   0CA6 26 0A 00      mov b, $a
1612   0CA9 AE            div a, b
1613   0CAA 27            mov b, a
1614   0CAB E4            pop a
1615   0CAC             ; END FACTORS
1616   0CAC E7            pop d
1617   0CAD FD 43         mov [d], b
1618   0CAF             ;; i++; 
1619   0CAF FA FA FF      lea d, [bp + -6] ; $i
1620   0CB2 2A            mov b, [d]
1621   0CB3 D8            push b
1622   0CB4 FD 77         inc b
1623   0CB6 FA FA FF      lea d, [bp + -6] ; $i
1624   0CB9 FD 43         mov [d], b
1625   0CBB E5            pop b
1626   0CBC 0A 65 0C      jmp _while24_cond
1627   0CBF             _while24_exit:
1628   0CBF             ;; while (i > 0) { 
1629   0CBF             _while25_cond:
1630   0CBF FA FA FF      lea d, [bp + -6] ; $i
1631   0CC2 2A            mov b, [d]
1632   0CC3             ; START RELATIONAL
1633   0CC3 D7            push a
1634   0CC4 11            mov a, b
1635   0CC5 26 00 00      mov b, $0
1636   0CC8 B0            cmp a, b
1637   0CC9 FD 7F         sgt ; >
1638   0CCB E4            pop a
1639   0CCC             ; END RELATIONAL
1640   0CCC C0 00 00      cmp b, 0
1641   0CCF C6 F8 0C      je _while25_exit
1642   0CD2             _while25_block:
1643   0CD2             ;; i--; 
1644   0CD2 FA FA FF      lea d, [bp + -6] ; $i
1645   0CD5 2A            mov b, [d]
1646   0CD6 D8            push b
1647   0CD7 FD 7D         dec b
1648   0CD9 FA FA FF      lea d, [bp + -6] ; $i
1649   0CDC FD 43         mov [d], b
1650   0CDE E5            pop b
1651   0CDF             ;; putchar(digits[i]); 
1652   0CDF FA FC FF      lea d, [bp + -4] ; $digits
1653   0CE2 D7            push a
1654   0CE3 DA            push d
1655   0CE4 FA FA FF      lea d, [bp + -6] ; $i
1656   0CE7 2A            mov b, [d]
1657   0CE8 E7            pop d
1658   0CE9 5A            add d, b
1659   0CEA E4            pop a
1660   0CEB 32            mov bl, [d]
1661   0CEC A7 00         mov bh, 0
1662   0CEE DD            push bl
1663   0CEF 07 FB 12      call putchar
1664   0CF2 51 01 00      add sp, 1
1665   0CF5 0A BF 0C      jmp _while25_cond
1666   0CF8             _while25_exit:
1667   0CF8 F9            leave
1668   0CF9 09            ret
1669   0CFA             
1670   0CFA             print_signed_long:
1671   0CFA F8 00 00      enter 0 ; (push bp; mov bp, sp)
1672   0CFD             ; $digits 
1673   0CFD             ; $i 
1674   0CFD 10 00 00      mov a, $0
1675   0D00 45 F5 FF      mov [bp + -11], a
1676   0D03 52 0C 00      sub sp, 12
1677   0D06             ;; if (num < 0) { 
1678   0D06             _if26_cond:
1679   0D06 FA 05 00      lea d, [bp + 5] ; $num
1680   0D09 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1681   0D0C FD 39         mov c, b ; And place it into C
1682   0D0E 2A            mov b, [d] ; Lower Word in B
1683   0D0F             ; START RELATIONAL
1684   0D0F D7            push a
1685   0D10 FD D8         push g
1686   0D12 11            mov a, b
1687   0D13 FD 7A         mov g, c
1688   0D15 26 00 00      mov b, $0
1689   0D18 38 00 00      mov c, 0
1690   0D1B FD AF 00 00   cmp32 ga, cb
1690   0D1F 00 00 00 00 
1690   0D23 00 00 00 00 
1690   0D27 00 00 00 00 
1690   0D2B 00 00 00 00 
1690   0D2F 00 00 00 00 
1690   0D33 00 00 00 00 
1690   0D37 00 00 00 00 
1690   0D3B 00 00 00 00 
1690   0D3F 00 00 00 00 
1690   0D43 00 00 00 00 
1690   0D47 00 00 00 00 
1690   0D4B 00 00 00 00 
1690   0D4F 00 00 00 00 
1690   0D53 00 00 00 00 
1690   0D57 00 00 00 00 
1690   0D5B 00 00 00 00 
1690   0D5F 00 00 00 00 
1690   0D63 00 00 00 00 
1690   0D67 00 00 00 00 
1690   0D6B 00 00 00 00 
1690   0D6F 00 00 00 00 
1690   0D73 00 00 00 00 
1690   0D77 00 00 00 00 
1690   0D7B 00 00 00 00 
1690   0D7F 00 00 00 00 
1690   0D83 00 00 00 00 
1690   0D87 00 00 00 00 
1690   0D8B 00 00 00 00 
1690   0D8F 00 00 00 00 
1690   0D93 00 00 00 00 
1690   0D97 00 00 00 00 
1690   0D9B 00 00 00 00 
1690   0D9F 00 00 00 00 
1690   0DA3 00 00 00 00 
1690   0DA7 00 00 00 00 
1690   0DAB 00 00 00 00 
1690   0DAF 00 00 00 00 
1690   0DB3 00 00 00 00 
1690   0DB7 00 00 00 00 
1690   0DBB 00 00 00 00 
1690   0DBF 00 00 00 00 
1690   0DC3 00 00 00 00 
1690   0DC7 00 00 00 00 
1690   0DCB 00 00 00 00 
1690   0DCF 00 00 00 00 
1690   0DD3 00 00 00 00 
1690   0DD7 00 00 00 00 
1690   0DDB 00 00 00 00 
1690   0DDF 00 00 00 00 
1690   0DE3 00 00 00 00 
1690   0DE7 00 00 00 00 
1690   0DEB 00 00 00 00 
1690   0DEF 00 00 00 00 
1690   0DF3 00 00 00 00 
1690   0DF7 00 00 00 00 
1690   0DFB 00 00 00 00 
1690   0DFF 00 00 00 00 
1690   0E03 00 00 00 00 
1690   0E07 00 00 00 00 
1690   0E0B 00 00 00 00 
1690   0E0F 00 00 00 00 
1690   0E13 00 00 00 00 
1690   0E17 00 00 00 00 
1690   0E1B 00 
1691   0E1C FD 73         slt ; <
1692   0E1E FD F1         pop g
1693   0E20 E4            pop a
1694   0E21             ; END RELATIONAL
1695   0E21 C0 00 00      cmp b, 0
1696   0E24 C6 4B 0E      je _if26_else
1697   0E27             _if26_true:
1698   0E27             ;; putchar('-'); 
1699   0E27 26 2D 00      mov b, $2d
1700   0E2A DD            push bl
1701   0E2B 07 FB 12      call putchar
1702   0E2E 51 01 00      add sp, 1
1703   0E31             ;; num = -num; 
1704   0E31 FA 05 00      lea d, [bp + 5] ; $num
1705   0E34 DA            push d
1706   0E35 FA 05 00      lea d, [bp + 5] ; $num
1707   0E38 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1708   0E3B FD 39         mov c, b ; And place it into C
1709   0E3D 2A            mov b, [d] ; Lower Word in B
1710   0E3E FD 97         neg b
1711   0E40 E7            pop d
1712   0E41 FD 43         mov [d], b
1713   0E43 28            mov b, c
1714   0E44 FD 44 02 00   mov [d + 2], b
1715   0E48 0A 7B 0F      jmp _if26_exit
1716   0E4B             _if26_else:
1717   0E4B             ;; if (num == 0) { 
1718   0E4B             _if27_cond:
1719   0E4B FA 05 00      lea d, [bp + 5] ; $num
1720   0E4E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1721   0E51 FD 39         mov c, b ; And place it into C
1722   0E53 2A            mov b, [d] ; Lower Word in B
1723   0E54             ; START RELATIONAL
1724   0E54 D7            push a
1725   0E55 FD D8         push g
1726   0E57 11            mov a, b
1727   0E58 FD 7A         mov g, c
1728   0E5A 26 00 00      mov b, $0
1729   0E5D 38 00 00      mov c, 0
1730   0E60 FD AF 00 00   cmp32 ga, cb
1730   0E64 00 00 00 00 
1730   0E68 00 00 00 00 
1730   0E6C 00 00 00 00 
1730   0E70 00 00 00 00 
1730   0E74 00 00 00 00 
1730   0E78 00 00 00 00 
1730   0E7C 00 00 00 00 
1730   0E80 00 00 00 00 
1730   0E84 00 00 00 00 
1730   0E88 00 00 00 00 
1730   0E8C 00 00 00 00 
1730   0E90 00 00 00 00 
1730   0E94 00 00 00 00 
1730   0E98 00 00 00 00 
1730   0E9C 00 00 00 00 
1730   0EA0 00 00 00 00 
1730   0EA4 00 00 00 00 
1730   0EA8 00 00 00 00 
1730   0EAC 00 00 00 00 
1730   0EB0 00 00 00 00 
1730   0EB4 00 00 00 00 
1730   0EB8 00 00 00 00 
1730   0EBC 00 00 00 00 
1730   0EC0 00 00 00 00 
1730   0EC4 00 00 00 00 
1730   0EC8 00 00 00 00 
1730   0ECC 00 00 00 00 
1730   0ED0 00 00 00 00 
1730   0ED4 00 00 00 00 
1730   0ED8 00 00 00 00 
1730   0EDC 00 00 00 00 
1730   0EE0 00 00 00 00 
1730   0EE4 00 00 00 00 
1730   0EE8 00 00 00 00 
1730   0EEC 00 00 00 00 
1730   0EF0 00 00 00 00 
1730   0EF4 00 00 00 00 
1730   0EF8 00 00 00 00 
1730   0EFC 00 00 00 00 
1730   0F00 00 00 00 00 
1730   0F04 00 00 00 00 
1730   0F08 00 00 00 00 
1730   0F0C 00 00 00 00 
1730   0F10 00 00 00 00 
1730   0F14 00 00 00 00 
1730   0F18 00 00 00 00 
1730   0F1C 00 00 00 00 
1730   0F20 00 00 00 00 
1730   0F24 00 00 00 00 
1730   0F28 00 00 00 00 
1730   0F2C 00 00 00 00 
1730   0F30 00 00 00 00 
1730   0F34 00 00 00 00 
1730   0F38 00 00 00 00 
1730   0F3C 00 00 00 00 
1730   0F40 00 00 00 00 
1730   0F44 00 00 00 00 
1730   0F48 00 00 00 00 
1730   0F4C 00 00 00 00 
1730   0F50 00 00 00 00 
1730   0F54 00 00 00 00 
1730   0F58 00 00 00 00 
1730   0F5C 00 00 00 00 
1730   0F60 00 
1731   0F61 FD 71         seq ; ==
1732   0F63 FD F1         pop g
1733   0F65 E4            pop a
1734   0F66             ; END RELATIONAL
1735   0F66 C0 00 00      cmp b, 0
1736   0F69 C6 7B 0F      je _if27_exit
1737   0F6C             _if27_true:
1738   0F6C             ;; putchar('0'); 
1739   0F6C 26 30 00      mov b, $30
1740   0F6F DD            push bl
1741   0F70 07 FB 12      call putchar
1742   0F73 51 01 00      add sp, 1
1743   0F76             ;; return; 
1744   0F76 F9            leave
1745   0F77 09            ret
1746   0F78 0A 7B 0F      jmp _if27_exit
1747   0F7B             _if27_exit:
1748   0F7B             _if26_exit:
1749   0F7B             ;; while (num > 0) { 
1750   0F7B             _while28_cond:
1751   0F7B FA 05 00      lea d, [bp + 5] ; $num
1752   0F7E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1753   0F81 FD 39         mov c, b ; And place it into C
1754   0F83 2A            mov b, [d] ; Lower Word in B
1755   0F84             ; START RELATIONAL
1756   0F84 D7            push a
1757   0F85 FD D8         push g
1758   0F87 11            mov a, b
1759   0F88 FD 7A         mov g, c
1760   0F8A 26 00 00      mov b, $0
1761   0F8D 38 00 00      mov c, 0
1762   0F90 FD 7F         sgt
1763   0F92 FD F1         pop g
1764   0F94 E4            pop a
1765   0F95             ; END RELATIONAL
1766   0F95 C0 00 00      cmp b, 0
1767   0F98 C6 F8 0F      je _while28_exit
1768   0F9B             _while28_block:
1769   0F9B             ;; digits[i] = '0' + (num % 10); 
1770   0F9B FA F7 FF      lea d, [bp + -9] ; $digits
1771   0F9E D7            push a
1772   0F9F DA            push d
1773   0FA0 FA F5 FF      lea d, [bp + -11] ; $i
1774   0FA3 2A            mov b, [d]
1775   0FA4 E7            pop d
1776   0FA5 5A            add d, b
1777   0FA6 E4            pop a
1778   0FA7 DA            push d
1779   0FA8 26 30 00      mov b, $30
1780   0FAB             ; START TERMS
1781   0FAB D7            push a
1782   0FAC 11            mov a, b
1783   0FAD FA 05 00      lea d, [bp + 5] ; $num
1784   0FB0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1785   0FB3 FD 39         mov c, b ; And place it into C
1786   0FB5 2A            mov b, [d] ; Lower Word in B
1787   0FB6             ; START FACTORS
1788   0FB6 D7            push a
1789   0FB7 11            mov a, b
1790   0FB8 26 0A 00      mov b, $a
1791   0FBB AE            div a, b ; 
1792   0FBC 11            mov a, b
1793   0FBD 27            mov b, a
1794   0FBE E4            pop a
1795   0FBF             ; END FACTORS
1796   0FBF 54            add a, b
1797   0FC0 D7            push a
1798   0FC1 FD 12         mov a, g
1799   0FC3 28            mov b, c
1800   0FC4 5C            adc a, b
1801   0FC5 39            mov c, a
1802   0FC6 E5            pop b
1803   0FC7 E4            pop a
1804   0FC8             ; END TERMS
1805   0FC8 E7            pop d
1806   0FC9 FD 3E         mov [d], bl
1807   0FCB             ;; num = num / 10; 
1808   0FCB FA 05 00      lea d, [bp + 5] ; $num
1809   0FCE DA            push d
1810   0FCF FA 05 00      lea d, [bp + 5] ; $num
1811   0FD2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1812   0FD5 FD 39         mov c, b ; And place it into C
1813   0FD7 2A            mov b, [d] ; Lower Word in B
1814   0FD8             ; START FACTORS
1815   0FD8 D7            push a
1816   0FD9 11            mov a, b
1817   0FDA 26 0A 00      mov b, $a
1818   0FDD AE            div a, b
1819   0FDE 27            mov b, a
1820   0FDF E4            pop a
1821   0FE0             ; END FACTORS
1822   0FE0 E7            pop d
1823   0FE1 FD 43         mov [d], b
1824   0FE3 28            mov b, c
1825   0FE4 FD 44 02 00   mov [d + 2], b
1826   0FE8             ;; i++; 
1827   0FE8 FA F5 FF      lea d, [bp + -11] ; $i
1828   0FEB 2A            mov b, [d]
1829   0FEC D8            push b
1830   0FED FD 77         inc b
1831   0FEF FA F5 FF      lea d, [bp + -11] ; $i
1832   0FF2 FD 43         mov [d], b
1833   0FF4 E5            pop b
1834   0FF5 0A 7B 0F      jmp _while28_cond
1835   0FF8             _while28_exit:
1836   0FF8             ;; while (i > 0) { 
1837   0FF8             _while29_cond:
1838   0FF8 FA F5 FF      lea d, [bp + -11] ; $i
1839   0FFB 2A            mov b, [d]
1840   0FFC             ; START RELATIONAL
1841   0FFC D7            push a
1842   0FFD 11            mov a, b
1843   0FFE 26 00 00      mov b, $0
1844   1001 B0            cmp a, b
1845   1002 FD 7F         sgt ; >
1846   1004 E4            pop a
1847   1005             ; END RELATIONAL
1848   1005 C0 00 00      cmp b, 0
1849   1008 C6 31 10      je _while29_exit
1850   100B             _while29_block:
1851   100B             ;; i--; 
1852   100B FA F5 FF      lea d, [bp + -11] ; $i
1853   100E 2A            mov b, [d]
1854   100F D8            push b
1855   1010 FD 7D         dec b
1856   1012 FA F5 FF      lea d, [bp + -11] ; $i
1857   1015 FD 43         mov [d], b
1858   1017 E5            pop b
1859   1018             ;; putchar(digits[i]); 
1860   1018 FA F7 FF      lea d, [bp + -9] ; $digits
1861   101B D7            push a
1862   101C DA            push d
1863   101D FA F5 FF      lea d, [bp + -11] ; $i
1864   1020 2A            mov b, [d]
1865   1021 E7            pop d
1866   1022 5A            add d, b
1867   1023 E4            pop a
1868   1024 32            mov bl, [d]
1869   1025 A7 00         mov bh, 0
1870   1027 DD            push bl
1871   1028 07 FB 12      call putchar
1872   102B 51 01 00      add sp, 1
1873   102E 0A F8 0F      jmp _while29_cond
1874   1031             _while29_exit:
1875   1031 F9            leave
1876   1032 09            ret
1877   1033             
1878   1033             print_unsigned_long:
1879   1033 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1880   1036             ; $digits 
1881   1036             ; $i 
1882   1036 52 0C 00      sub sp, 12
1883   1039             ;; i = 0; 
1884   1039 FA F5 FF      lea d, [bp + -11] ; $i
1885   103C DA            push d
1886   103D 26 00 00      mov b, $0
1887   1040 E7            pop d
1888   1041 FD 43         mov [d], b
1889   1043             ;; if(num == 0){ 
1890   1043             _if30_cond:
1891   1043 FA 05 00      lea d, [bp + 5] ; $num
1892   1046 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1893   1049 FD 39         mov c, b ; And place it into C
1894   104B 2A            mov b, [d] ; Lower Word in B
1895   104C             ; START RELATIONAL
1896   104C D7            push a
1897   104D FD D8         push g
1898   104F 11            mov a, b
1899   1050 FD 7A         mov g, c
1900   1052 26 00 00      mov b, $0
1901   1055 38 00 00      mov c, 0
1902   1058 FD AF 00 00   cmp32 ga, cb
1902   105C 00 00 00 00 
1902   1060 00 00 00 00 
1902   1064 00 00 00 00 
1902   1068 00 00 00 00 
1902   106C 00 00 00 00 
1902   1070 00 00 00 00 
1902   1074 00 00 00 00 
1902   1078 00 00 00 00 
1902   107C 00 00 00 00 
1902   1080 00 00 00 00 
1902   1084 00 00 00 00 
1902   1088 00 00 00 00 
1902   108C 00 00 00 00 
1902   1090 00 00 00 00 
1902   1094 00 00 00 00 
1902   1098 00 00 00 00 
1902   109C 00 00 00 00 
1902   10A0 00 00 00 00 
1902   10A4 00 00 00 00 
1902   10A8 00 00 00 00 
1902   10AC 00 00 00 00 
1902   10B0 00 00 00 00 
1902   10B4 00 00 00 00 
1902   10B8 00 00 00 00 
1902   10BC 00 00 00 00 
1902   10C0 00 00 00 00 
1902   10C4 00 00 00 00 
1902   10C8 00 00 00 00 
1902   10CC 00 00 00 00 
1902   10D0 00 00 00 00 
1902   10D4 00 00 00 00 
1902   10D8 00 00 00 00 
1902   10DC 00 00 00 00 
1902   10E0 00 00 00 00 
1902   10E4 00 00 00 00 
1902   10E8 00 00 00 00 
1902   10EC 00 00 00 00 
1902   10F0 00 00 00 00 
1902   10F4 00 00 00 00 
1902   10F8 00 00 00 00 
1902   10FC 00 00 00 00 
1902   1100 00 00 00 00 
1902   1104 00 00 00 00 
1902   1108 00 00 00 00 
1902   110C 00 00 00 00 
1902   1110 00 00 00 00 
1902   1114 00 00 00 00 
1902   1118 00 00 00 00 
1902   111C 00 00 00 00 
1902   1120 00 00 00 00 
1902   1124 00 00 00 00 
1902   1128 00 00 00 00 
1902   112C 00 00 00 00 
1902   1130 00 00 00 00 
1902   1134 00 00 00 00 
1902   1138 00 00 00 00 
1902   113C 00 00 00 00 
1902   1140 00 00 00 00 
1902   1144 00 00 00 00 
1902   1148 00 00 00 00 
1902   114C 00 00 00 00 
1902   1150 00 00 00 00 
1902   1154 00 00 00 00 
1902   1158 00 
1903   1159 FD 71         seq ; ==
1904   115B FD F1         pop g
1905   115D E4            pop a
1906   115E             ; END RELATIONAL
1907   115E C0 00 00      cmp b, 0
1908   1161 C6 73 11      je _if30_exit
1909   1164             _if30_true:
1910   1164             ;; putchar('0'); 
1911   1164 26 30 00      mov b, $30
1912   1167 DD            push bl
1913   1168 07 FB 12      call putchar
1914   116B 51 01 00      add sp, 1
1915   116E             ;; return; 
1916   116E F9            leave
1917   116F 09            ret
1918   1170 0A 73 11      jmp _if30_exit
1919   1173             _if30_exit:
1920   1173             ;; while (num > 0) { 
1921   1173             _while31_cond:
1922   1173 FA 05 00      lea d, [bp + 5] ; $num
1923   1176 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1924   1179 FD 39         mov c, b ; And place it into C
1925   117B 2A            mov b, [d] ; Lower Word in B
1926   117C             ; START RELATIONAL
1927   117C D7            push a
1928   117D FD D8         push g
1929   117F 11            mov a, b
1930   1180 FD 7A         mov g, c
1931   1182 26 00 00      mov b, $0
1932   1185 38 00 00      mov c, 0
1933   1188 FD 81         sgu
1934   118A FD F1         pop g
1935   118C E4            pop a
1936   118D             ; END RELATIONAL
1937   118D C0 00 00      cmp b, 0
1938   1190 C6 F0 11      je _while31_exit
1939   1193             _while31_block:
1940   1193             ;; digits[i] = '0' + (num % 10); 
1941   1193 FA F7 FF      lea d, [bp + -9] ; $digits
1942   1196 D7            push a
1943   1197 DA            push d
1944   1198 FA F5 FF      lea d, [bp + -11] ; $i
1945   119B 2A            mov b, [d]
1946   119C E7            pop d
1947   119D 5A            add d, b
1948   119E E4            pop a
1949   119F DA            push d
1950   11A0 26 30 00      mov b, $30
1951   11A3             ; START TERMS
1952   11A3 D7            push a
1953   11A4 11            mov a, b
1954   11A5 FA 05 00      lea d, [bp + 5] ; $num
1955   11A8 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1956   11AB FD 39         mov c, b ; And place it into C
1957   11AD 2A            mov b, [d] ; Lower Word in B
1958   11AE             ; START FACTORS
1959   11AE D7            push a
1960   11AF 11            mov a, b
1961   11B0 26 0A 00      mov b, $a
1962   11B3 AE            div a, b ; 
1963   11B4 11            mov a, b
1964   11B5 27            mov b, a
1965   11B6 E4            pop a
1966   11B7             ; END FACTORS
1967   11B7 54            add a, b
1968   11B8 D7            push a
1969   11B9 FD 12         mov a, g
1970   11BB 28            mov b, c
1971   11BC 5C            adc a, b
1972   11BD 39            mov c, a
1973   11BE E5            pop b
1974   11BF E4            pop a
1975   11C0             ; END TERMS
1976   11C0 E7            pop d
1977   11C1 FD 3E         mov [d], bl
1978   11C3             ;; num = num / 10; 
1979   11C3 FA 05 00      lea d, [bp + 5] ; $num
1980   11C6 DA            push d
1981   11C7 FA 05 00      lea d, [bp + 5] ; $num
1982   11CA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1983   11CD FD 39         mov c, b ; And place it into C
1984   11CF 2A            mov b, [d] ; Lower Word in B
1985   11D0             ; START FACTORS
1986   11D0 D7            push a
1987   11D1 11            mov a, b
1988   11D2 26 0A 00      mov b, $a
1989   11D5 AE            div a, b
1990   11D6 27            mov b, a
1991   11D7 E4            pop a
1992   11D8             ; END FACTORS
1993   11D8 E7            pop d
1994   11D9 FD 43         mov [d], b
1995   11DB 28            mov b, c
1996   11DC FD 44 02 00   mov [d + 2], b
1997   11E0             ;; i++; 
1998   11E0 FA F5 FF      lea d, [bp + -11] ; $i
1999   11E3 2A            mov b, [d]
2000   11E4 D8            push b
2001   11E5 FD 77         inc b
2002   11E7 FA F5 FF      lea d, [bp + -11] ; $i
2003   11EA FD 43         mov [d], b
2004   11EC E5            pop b
2005   11ED 0A 73 11      jmp _while31_cond
2006   11F0             _while31_exit:
2007   11F0             ;; while (i > 0) { 
2008   11F0             _while32_cond:
2009   11F0 FA F5 FF      lea d, [bp + -11] ; $i
2010   11F3 2A            mov b, [d]
2011   11F4             ; START RELATIONAL
2012   11F4 D7            push a
2013   11F5 11            mov a, b
2014   11F6 26 00 00      mov b, $0
2015   11F9 B0            cmp a, b
2016   11FA FD 7F         sgt ; >
2017   11FC E4            pop a
2018   11FD             ; END RELATIONAL
2019   11FD C0 00 00      cmp b, 0
2020   1200 C6 29 12      je _while32_exit
2021   1203             _while32_block:
2022   1203             ;; i--; 
2023   1203 FA F5 FF      lea d, [bp + -11] ; $i
2024   1206 2A            mov b, [d]
2025   1207 D8            push b
2026   1208 FD 7D         dec b
2027   120A FA F5 FF      lea d, [bp + -11] ; $i
2028   120D FD 43         mov [d], b
2029   120F E5            pop b
2030   1210             ;; putchar(digits[i]); 
2031   1210 FA F7 FF      lea d, [bp + -9] ; $digits
2032   1213 D7            push a
2033   1214 DA            push d
2034   1215 FA F5 FF      lea d, [bp + -11] ; $i
2035   1218 2A            mov b, [d]
2036   1219 E7            pop d
2037   121A 5A            add d, b
2038   121B E4            pop a
2039   121C 32            mov bl, [d]
2040   121D A7 00         mov bh, 0
2041   121F DD            push bl
2042   1220 07 FB 12      call putchar
2043   1223 51 01 00      add sp, 1
2044   1226 0A F0 11      jmp _while32_cond
2045   1229             _while32_exit:
2046   1229 F9            leave
2047   122A 09            ret
2048   122B             
2049   122B             print_unsigned:
2050   122B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2051   122E             ; $digits 
2052   122E             ; $i 
2053   122E 52 07 00      sub sp, 7
2054   1231             ;; i = 0; 
2055   1231 FA FA FF      lea d, [bp + -6] ; $i
2056   1234 DA            push d
2057   1235 26 00 00      mov b, $0
2058   1238 E7            pop d
2059   1239 FD 43         mov [d], b
2060   123B             ;; if(num == 0){ 
2061   123B             _if33_cond:
2062   123B FA 05 00      lea d, [bp + 5] ; $num
2063   123E 2A            mov b, [d]
2064   123F             ; START RELATIONAL
2065   123F D7            push a
2066   1240 11            mov a, b
2067   1241 26 00 00      mov b, $0
2068   1244 B0            cmp a, b
2069   1245 FD 71         seq ; ==
2070   1247 E4            pop a
2071   1248             ; END RELATIONAL
2072   1248 C0 00 00      cmp b, 0
2073   124B C6 5D 12      je _if33_exit
2074   124E             _if33_true:
2075   124E             ;; putchar('0'); 
2076   124E 26 30 00      mov b, $30
2077   1251 DD            push bl
2078   1252 07 FB 12      call putchar
2079   1255 51 01 00      add sp, 1
2080   1258             ;; return; 
2081   1258 F9            leave
2082   1259 09            ret
2083   125A 0A 5D 12      jmp _if33_exit
2084   125D             _if33_exit:
2085   125D             ;; while (num > 0) { 
2086   125D             _while34_cond:
2087   125D FA 05 00      lea d, [bp + 5] ; $num
2088   1260 2A            mov b, [d]
2089   1261             ; START RELATIONAL
2090   1261 D7            push a
2091   1262 11            mov a, b
2092   1263 26 00 00      mov b, $0
2093   1266 B0            cmp a, b
2094   1267 FD 81         sgu ; > (unsigned)
2095   1269 E4            pop a
2096   126A             ; END RELATIONAL
2097   126A C0 00 00      cmp b, 0
2098   126D C6 B7 12      je _while34_exit
2099   1270             _while34_block:
2100   1270             ;; digits[i] = '0' + (num % 10); 
2101   1270 FA FC FF      lea d, [bp + -4] ; $digits
2102   1273 D7            push a
2103   1274 DA            push d
2104   1275 FA FA FF      lea d, [bp + -6] ; $i
2105   1278 2A            mov b, [d]
2106   1279 E7            pop d
2107   127A 5A            add d, b
2108   127B E4            pop a
2109   127C DA            push d
2110   127D 26 30 00      mov b, $30
2111   1280             ; START TERMS
2112   1280 D7            push a
2113   1281 11            mov a, b
2114   1282 FA 05 00      lea d, [bp + 5] ; $num
2115   1285 2A            mov b, [d]
2116   1286             ; START FACTORS
2117   1286 D7            push a
2118   1287 11            mov a, b
2119   1288 26 0A 00      mov b, $a
2120   128B AE            div a, b ; 
2121   128C 11            mov a, b
2122   128D 27            mov b, a
2123   128E E4            pop a
2124   128F             ; END FACTORS
2125   128F 56            add b, a
2126   1290 E4            pop a
2127   1291             ; END TERMS
2128   1291 E7            pop d
2129   1292 FD 3E         mov [d], bl
2130   1294             ;; num = num / 10; 
2131   1294 FA 05 00      lea d, [bp + 5] ; $num
2132   1297 DA            push d
2133   1298 FA 05 00      lea d, [bp + 5] ; $num
2134   129B 2A            mov b, [d]
2135   129C             ; START FACTORS
2136   129C D7            push a
2137   129D 11            mov a, b
2138   129E 26 0A 00      mov b, $a
2139   12A1 AE            div a, b
2140   12A2 27            mov b, a
2141   12A3 E4            pop a
2142   12A4             ; END FACTORS
2143   12A4 E7            pop d
2144   12A5 FD 43         mov [d], b
2145   12A7             ;; i++; 
2146   12A7 FA FA FF      lea d, [bp + -6] ; $i
2147   12AA 2A            mov b, [d]
2148   12AB D8            push b
2149   12AC FD 77         inc b
2150   12AE FA FA FF      lea d, [bp + -6] ; $i
2151   12B1 FD 43         mov [d], b
2152   12B3 E5            pop b
2153   12B4 0A 5D 12      jmp _while34_cond
2154   12B7             _while34_exit:
2155   12B7             ;; while (i > 0) { 
2156   12B7             _while35_cond:
2157   12B7 FA FA FF      lea d, [bp + -6] ; $i
2158   12BA 2A            mov b, [d]
2159   12BB             ; START RELATIONAL
2160   12BB D7            push a
2161   12BC 11            mov a, b
2162   12BD 26 00 00      mov b, $0
2163   12C0 B0            cmp a, b
2164   12C1 FD 7F         sgt ; >
2165   12C3 E4            pop a
2166   12C4             ; END RELATIONAL
2167   12C4 C0 00 00      cmp b, 0
2168   12C7 C6 F0 12      je _while35_exit
2169   12CA             _while35_block:
2170   12CA             ;; i--; 
2171   12CA FA FA FF      lea d, [bp + -6] ; $i
2172   12CD 2A            mov b, [d]
2173   12CE D8            push b
2174   12CF FD 7D         dec b
2175   12D1 FA FA FF      lea d, [bp + -6] ; $i
2176   12D4 FD 43         mov [d], b
2177   12D6 E5            pop b
2178   12D7             ;; putchar(digits[i]); 
2179   12D7 FA FC FF      lea d, [bp + -4] ; $digits
2180   12DA D7            push a
2181   12DB DA            push d
2182   12DC FA FA FF      lea d, [bp + -6] ; $i
2183   12DF 2A            mov b, [d]
2184   12E0 E7            pop d
2185   12E1 5A            add d, b
2186   12E2 E4            pop a
2187   12E3 32            mov bl, [d]
2188   12E4 A7 00         mov bh, 0
2189   12E6 DD            push bl
2190   12E7 07 FB 12      call putchar
2191   12EA 51 01 00      add sp, 1
2192   12ED 0A B7 12      jmp _while35_cond
2193   12F0             _while35_exit:
2194   12F0 F9            leave
2195   12F1 09            ret
2196   12F2             
2197   12F2             date:
2198   12F2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2199   12F5             
2200   12F5             ; --- BEGIN INLINE ASM BLOCK
2201   12F5 19 00         mov al, 0 
2202   12F7 05 07         syscall sys_datetime
2203   12F9             ; --- END INLINE ASM BLOCK
2204   12F9             
2205   12F9 F9            leave
2206   12FA 09            ret
2207   12FB             
2208   12FB             putchar:
2209   12FB F8 00 00      enter 0 ; (push bp; mov bp, sp)
2210   12FE             
2211   12FE             ; --- BEGIN INLINE ASM BLOCK
2212   12FE FA 05 00      lea d, [bp + 5] ; $c
2213   1301 1E            mov al, [d]
2214   1302 23            mov ah, al
2215   1303 07 8C 14      call _putchar
2216   1306             ; --- END INLINE ASM BLOCK
2217   1306             
2218   1306 F9            leave
2219   1307 09            ret
2220   1308             
2221   1308             getchar:
2222   1308 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2223   130B             ; $c 
2224   130B 52 01 00      sub sp, 1
2225   130E             
2226   130E             ; --- BEGIN INLINE ASM BLOCK
2227   130E 07 85 14      call getch
2228   1311 1A            mov al, ah
2229   1312 FA 00 00      lea d, [bp + 0] ; $c
2230   1315 3E            mov [d], al
2231   1316             ; --- END INLINE ASM BLOCK
2232   1316             
2233   1316             ;; return c; 
2234   1316 FA 00 00      lea d, [bp + 0] ; $c
2235   1319 32            mov bl, [d]
2236   131A A7 00         mov bh, 0
2237   131C F9            leave
2238   131D 09            ret
2239   131E             
2240   131E             scann:
2241   131E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2242   1321             ; $m 
2243   1321 52 02 00      sub sp, 2
2244   1324             
2245   1324             ; --- BEGIN INLINE ASM BLOCK
2246   1324 07 D0 16      call scan_u16d
2247   1327 FA FF FF      lea d, [bp + -1] ; $m
2248   132A 43            mov [d], a
2249   132B             ; --- END INLINE ASM BLOCK
2250   132B             
2251   132B             ;; return m; 
2252   132B FA FF FF      lea d, [bp + -1] ; $m
2253   132E 2A            mov b, [d]
2254   132F F9            leave
2255   1330 09            ret
2256   1331             
2257   1331             puts:
2258   1331 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2259   1334             
2260   1334             ; --- BEGIN INLINE ASM BLOCK
2261   1334 FA 05 00      lea d, [bp + 5] ; $s
2262   1337 15            mov a, [d]
2263   1338 3C            mov d, a
2264   1339 07 D6 15      call _puts
2265   133C 10 00 0A      mov a, $0A00
2266   133F 05 03         syscall sys_io
2267   1341             ; --- END INLINE ASM BLOCK
2268   1341             
2269   1341 F9            leave
2270   1342 09            ret
2271   1343             
2272   1343             print:
2273   1343 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2274   1346             
2275   1346             ; --- BEGIN INLINE ASM BLOCK
2276   1346 FA 05 00      lea d, [bp + 5] ; $s
2277   1349 FD 2A         mov d, [d]
2278   134B 07 D6 15      call _puts
2279   134E             ; --- END INLINE ASM BLOCK
2280   134E             
2281   134E F9            leave
2282   134F 09            ret
2283   1350             
2284   1350             getparam:
2285   1350 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2286   1353             ; $data 
2287   1353 52 01 00      sub sp, 1
2288   1356             
2289   1356             ; --- BEGIN INLINE ASM BLOCK
2290   1356 19 04         mov al, 4
2291   1358 FA 05 00      lea d, [bp + 5] ; $address
2292   135B FD 2A         mov d, [d]
2293   135D 05 0C         syscall sys_system
2294   135F FA 00 00      lea d, [bp + 0] ; $data
2295   1362 FD 3E         mov [d], bl
2296   1364             ; --- END INLINE ASM BLOCK
2297   1364             
2298   1364             ;; return data; 
2299   1364 FA 00 00      lea d, [bp + 0] ; $data
2300   1367 32            mov bl, [d]
2301   1368 A7 00         mov bh, 0
2302   136A F9            leave
2303   136B 09            ret
2304   136C             
2305   136C             clear:
2306   136C F8 00 00      enter 0 ; (push bp; mov bp, sp)
2307   136F             ;; print("\033[2J\033[H"); 
2308   136F 26 4D 64      mov b, __s31 ; "\033[2J\033[H"
2309   1372 FD AB         swp b
2310   1374 D8            push b
2311   1375 07 43 13      call print
2312   1378 51 02 00      add sp, 2
2313   137B F9            leave
2314   137C 09            ret
2315   137D             
2316   137D             abs:
2317   137D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2318   1380             ;; return i < 0 ? -i : i; 
2319   1380             _ternary36_cond:
2320   1380 FA 05 00      lea d, [bp + 5] ; $i
2321   1383 2A            mov b, [d]
2322   1384             ; START RELATIONAL
2323   1384 D7            push a
2324   1385 11            mov a, b
2325   1386 26 00 00      mov b, $0
2326   1389 B0            cmp a, b
2327   138A FD 73         slt ; < (signed)
2328   138C E4            pop a
2329   138D             ; END RELATIONAL
2330   138D C0 00 00      cmp b, 0
2331   1390 C6 9C 13      je _ternary36_false
2332   1393             _ternary36_true:
2333   1393 FA 05 00      lea d, [bp + 5] ; $i
2334   1396 2A            mov b, [d]
2335   1397 FD 97         neg b
2336   1399 0A A0 13      jmp _ternary36_exit
2337   139C             _ternary36_false:
2338   139C FA 05 00      lea d, [bp + 5] ; $i
2339   139F 2A            mov b, [d]
2340   13A0             _ternary36_exit:
2341   13A0 F9            leave
2342   13A1 09            ret
2343   13A2             
2344   13A2             include_stdio_asm:
2345   13A2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2346   13A5             
2347   13A5             ; --- BEGIN INLINE ASM BLOCK
2348   13A5             .include "lib/asm/stdio.asm"
0001+  13A5             ;-----------------------------------------------------------------------------
0002+  13A5             ; stdio.s
0003+  13A5             ;-----------------------------------------------------------------------------
0004+  13A5             .include "lib/asm/string.asm"
0001++ 13A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 13A5             ; string.s
0003++ 13A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 13A5             
0005++ 13A5             
0006++ 13A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 13A5             ; _strrev
0008++ 13A5             ; reverse a string
0009++ 13A5             ; D = string address
0010++ 13A5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 13A5             ; 01234
0012++ 13A5             _strrev:
0013++ 13A5 4B          	pusha
0014++ 13A6 07 EC 13    	call _strlen	; length in C
0015++ 13A9 12          	mov a, c
0016++ 13AA AF 01 00    	cmp a, 1
0017++ 13AD D0 C7 13    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 13B0 7D          	dec a
0019++ 13B1 FD 4E       	mov si, d	; beginning of string
0020++ 13B3 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 13B5 59          	add d, a	; end of string
0022++ 13B6 12          	mov a, c
0023++ 13B7 FD 9B       	shr a		; divide by 2
0024++ 13B9 39          	mov c, a	; C now counts the steps
0025++ 13BA             _strrev_L0:
0026++ 13BA 32          	mov bl, [d]	; save load right-side char into BL
0027++ 13BB F6          	lodsb		; load left-side char into AL; increase SI
0028++ 13BC 3E          	mov [d], al	; store left char into right side
0029++ 13BD 1B          	mov al, bl
0030++ 13BE F7          	stosb		; store right-side char into left-side; increase DI
0031++ 13BF 7E          	dec c
0032++ 13C0 7F          	dec d
0033++ 13C1 C2 00 00    	cmp c, 0
0034++ 13C4 C7 BA 13    	jne _strrev_L0
0035++ 13C7             _strrev_end:
0036++ 13C7 4C          	popa
0037++ 13C8 09          	ret
0038++ 13C9             	
0039++ 13C9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 13C9             ; _strchr
0041++ 13C9             ; search string in D for char in AL
0042++ 13C9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 13C9             _strchr:
0044++ 13C9             _strchr_L0:
0045++ 13C9 32          	mov bl, [d]
0046++ 13CA C1 00       	cmp bl, 0
0047++ 13CC C6 D7 13    	je _strchr_end
0048++ 13CF BA          	cmp al, bl
0049++ 13D0 C6 D7 13    	je _strchr_end
0050++ 13D3 79          	inc d
0051++ 13D4 0A C9 13    	jmp _strchr_L0
0052++ 13D7             _strchr_end:
0053++ 13D7 1B          	mov al, bl
0054++ 13D8 09          	ret
0055++ 13D9             
0056++ 13D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 13D9             ; _strstr
0058++ 13D9             ; find sub-string
0059++ 13D9             ; str1 in SI
0060++ 13D9             ; str2 in DI
0061++ 13D9             ; SI points to end of source string
0062++ 13D9             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 13D9             _strstr:
0064++ 13D9 DB          	push al
0065++ 13DA DA          	push d
0066++ 13DB E3          	push di
0067++ 13DC             _strstr_loop:
0068++ 13DC F3          	cmpsb					; compare a byte of the strings
0069++ 13DD C7 E8 13    	jne _strstr_ret
0070++ 13E0 FC 00 00    	lea d, [di + 0]
0071++ 13E3 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 13E5 C7 DC 13    	jne _strstr_loop				; equal chars but not at end
0073++ 13E8             _strstr_ret:
0074++ 13E8 F0          	pop di
0075++ 13E9 E7          	pop d
0076++ 13EA E8          	pop al
0077++ 13EB 09          	ret
0078++ 13EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 13EC             ; length of null terminated string
0080++ 13EC             ; result in C
0081++ 13EC             ; pointer in D
0082++ 13EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 13EC             _strlen:
0084++ 13EC DA          	push d
0085++ 13ED 38 00 00    	mov c, 0
0086++ 13F0             _strlen_L1:
0087++ 13F0 BD 00       	cmp byte [d], 0
0088++ 13F2 C6 FA 13    	je _strlen_ret
0089++ 13F5 79          	inc d
0090++ 13F6 78          	inc c
0091++ 13F7 0A F0 13    	jmp _strlen_L1
0092++ 13FA             _strlen_ret:
0093++ 13FA E7          	pop d
0094++ 13FB 09          	ret
0095++ 13FC             
0096++ 13FC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 13FC             ; STRCMP
0098++ 13FC             ; compare two strings
0099++ 13FC             ; str1 in SI
0100++ 13FC             ; str2 in DI
0101++ 13FC             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 13FC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 13FC             _strcmp:
0104++ 13FC DB          	push al
0105++ 13FD DA          	push d
0106++ 13FE E3          	push di
0107++ 13FF E2          	push si
0108++ 1400             _strcmp_loop:
0109++ 1400 F3          	cmpsb					; compare a byte of the strings
0110++ 1401 C7 0C 14    	jne _strcmp_ret
0111++ 1404 FB FF FF    	lea d, [si +- 1]
0112++ 1407 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1409 C7 00 14    	jne _strcmp_loop				; equal chars but not at end
0114++ 140C             _strcmp_ret:
0115++ 140C EF          	pop si
0116++ 140D F0          	pop di
0117++ 140E E7          	pop d
0118++ 140F E8          	pop al
0119++ 1410 09          	ret
0120++ 1411             
0121++ 1411             
0122++ 1411             ; STRCPY
0123++ 1411             ; copy null terminated string from SI to DI
0124++ 1411             ; source in SI
0125++ 1411             ; destination in DI
0126++ 1411             _strcpy:
0127++ 1411 E2          	push si
0128++ 1412 E3          	push di
0129++ 1413 DB          	push al
0130++ 1414             _strcpy_L1:
0131++ 1414 F6          	lodsb
0132++ 1415 F7          	stosb
0133++ 1416 B9 00       	cmp al, 0
0134++ 1418 C7 14 14    	jne _strcpy_L1
0135++ 141B             _strcpy_end:
0136++ 141B E8          	pop al
0137++ 141C F0          	pop di
0138++ 141D EF          	pop si
0139++ 141E 09          	ret
0140++ 141F             
0141++ 141F             ; STRCAT
0142++ 141F             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 141F             ; source in SI
0144++ 141F             ; destination in DI
0145++ 141F             _strcat:
0146++ 141F E2          	push si
0147++ 1420 E3          	push di
0148++ 1421 D7          	push a
0149++ 1422 DA          	push d
0150++ 1423 50          	mov a, di
0151++ 1424 3C          	mov d, a
0152++ 1425             _strcat_goto_end_L1:
0153++ 1425 BD 00       	cmp byte[d], 0
0154++ 1427 C6 2E 14    	je _strcat_start
0155++ 142A 79          	inc d
0156++ 142B 0A 25 14    	jmp _strcat_goto_end_L1
0157++ 142E             _strcat_start:
0158++ 142E FD 50       	mov di, d
0159++ 1430             _strcat_L1:
0160++ 1430 F6          	lodsb
0161++ 1431 F7          	stosb
0162++ 1432 B9 00       	cmp al, 0
0163++ 1434 C7 30 14    	jne _strcat_L1
0164++ 1437             _strcat_end:
0165++ 1437 E7          	pop d
0166++ 1438 E4          	pop a
0167++ 1439 F0          	pop di
0168++ 143A EF          	pop si
0169++ 143B 09          	ret
0170++ 143C             
0171++ 143C             
0005+  143C             
0006+  143C             ;-----------------------------------------------------------------------------
0007+  143C             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  143C             ; ASCII in BL
0009+  143C             ; result in AL
0010+  143C             ; ascii for F = 0100 0110
0011+  143C             ; ascii for 9 = 0011 1001
0012+  143C             ;-----------------------------------------------------------------------------
0013+  143C             hex_ascii_encode:
0014+  143C 1B            mov al, bl
0015+  143D 93 40         test al, $40        ; test if letter or number
0016+  143F C7 45 14      jnz hex_letter
0017+  1442 87 0F         and al, $0F        ; get number
0018+  1444 09            ret
0019+  1445             hex_letter:
0020+  1445 87 0F         and al, $0F        ; get letter
0021+  1447 6A 09         add al, 9
0022+  1449 09            ret
0023+  144A             
0024+  144A             ;-----------------------------------------------------------------------------
0025+  144A             ; ATOI
0026+  144A             ; 2 letter hex string in B
0027+  144A             ; 8bit integer returned in AL
0028+  144A             ;-----------------------------------------------------------------------------
0029+  144A             _atoi:
0030+  144A D8            push b
0031+  144B 07 3C 14      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  144E 30            mov bl, bh
0033+  144F DB            push al          ; save a
0034+  1450 07 3C 14      call hex_ascii_encode
0035+  1453 EA            pop bl  
0036+  1454 FD 9E 04      shl al, 4
0037+  1457 8C            or al, bl
0038+  1458 E5            pop b
0039+  1459 09            ret  
0040+  145A             
0041+  145A             
0042+  145A             ;-----------------------------------------------------------------------------
0043+  145A             ; ITOA
0044+  145A             ; 8bit value in BL
0045+  145A             ; 2 byte ASCII result in A
0046+  145A             ;-----------------------------------------------------------------------------
0047+  145A             _itoa:
0048+  145A DA            push d
0049+  145B D8            push b
0050+  145C A7 00         mov bh, 0
0051+  145E FD A4 04      shr bl, 4  
0052+  1461 74            mov d, b
0053+  1462 1F 0A 17      mov al, [d + s_hex_digits]
0054+  1465 23            mov ah, al
0055+  1466               
0056+  1466 E5            pop b
0057+  1467 D8            push b
0058+  1468 A7 00         mov bh, 0
0059+  146A FD 87 0F      and bl, $0F
0060+  146D 74            mov d, b
0061+  146E 1F 0A 17      mov al, [d + s_hex_digits]
0062+  1471 E5            pop b
0063+  1472 E7            pop d
0064+  1473 09            ret
0065+  1474             
0066+  1474             ;-----------------------------------------------------------------------------
0067+  1474             ; HEX STRING TO BINARY
0068+  1474             ; di = destination address
0069+  1474             ; si = source
0070+  1474             ;-----------------------------------------------------------------------------
0071+  1474             _hex_to_int:
0072+  1474             _hex_to_int_L1:
0073+  1474 F6            lodsb          ; load from [SI] to AL
0074+  1475 B9 00         cmp al, 0        ; check if ASCII 0
0075+  1477 C6 84 14      jz _hex_to_int_ret
0076+  147A 36            mov bh, al
0077+  147B F6            lodsb
0078+  147C 2F            mov bl, al
0079+  147D 07 4A 14      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  1480 F7            stosb          ; store AL to [DI]
0081+  1481 0A 74 14      jmp _hex_to_int_L1
0082+  1484             _hex_to_int_ret:
0083+  1484 09            ret    
0084+  1485             
0085+  1485             ;-----------------------------------------------------------------------------
0086+  1485             ; GETCHAR
0087+  1485             ; char in ah
0088+  1485             ;-----------------------------------------------------------------------------
0089+  1485             getch:
0090+  1485 DB            push al
0091+  1486             getch_retry:
0092+  1486 19 01         mov al, 1
0093+  1488 05 03         syscall sys_io      ; receive in AH
0094+  148A E8            pop al
0095+  148B 09            ret
0096+  148C             
0097+  148C             ;-----------------------------------------------------------------------------
0098+  148C             ; PUTCHAR
0099+  148C             ; char in ah
0100+  148C             ;-----------------------------------------------------------------------------
0101+  148C             _putchar:
0102+  148C D7            push a
0103+  148D 19 00         mov al, 0
0104+  148F 05 03         syscall sys_io      ; char in AH
0105+  1491 E4            pop a
0106+  1492 09            ret
0107+  1493             
0108+  1493             ;-----------------------------------------------------------------------------
0109+  1493             ;; INPUT A STRING
0110+  1493             ;; terminates with null
0111+  1493             ;; pointer in D
0112+  1493             ;-----------------------------------------------------------------------------
0113+  1493             _gets:
0114+  1493 D7            push a
0115+  1494 DA            push d
0116+  1495             _gets_loop:
0117+  1495 19 01         mov al, 1
0118+  1497 05 03         syscall sys_io      ; receive in AH
0119+  1499 B9 00         cmp al, 0        ; check error code (AL)
0120+  149B C6 95 14      je _gets_loop      ; if no char received, retry
0121+  149E             
0122+  149E 76 1B         cmp ah, 27
0123+  14A0 C6 C1 14      je _gets_ansi_esc
0124+  14A3 76 0A         cmp ah, $0A        ; LF
0125+  14A5 C6 2C 15      je _gets_end
0126+  14A8 76 0D         cmp ah, $0D        ; CR
0127+  14AA C6 2C 15      je _gets_end
0128+  14AD 76 5C         cmp ah, $5C        ; '\\'
0129+  14AF C6 ED 14      je _gets_escape
0130+  14B2               
0131+  14B2 76 08         cmp ah, $08      ; check for backspace
0132+  14B4 C6 BD 14      je _gets_backspace
0133+  14B7             
0134+  14B7 1A            mov al, ah
0135+  14B8 3E            mov [d], al
0136+  14B9 79            inc d
0137+  14BA 0A 95 14      jmp _gets_loop
0138+  14BD             _gets_backspace:
0139+  14BD 7F            dec d
0140+  14BE 0A 95 14      jmp _gets_loop
0141+  14C1             _gets_ansi_esc:
0142+  14C1 19 01         mov al, 1
0143+  14C3 05 03         syscall sys_io        ; receive in AH without echo
0144+  14C5 B9 00         cmp al, 0          ; check error code (AL)
0145+  14C7 C6 C1 14      je _gets_ansi_esc    ; if no char received, retry
0146+  14CA 76 5B         cmp ah, '['
0147+  14CC C7 95 14      jne _gets_loop
0148+  14CF             _gets_ansi_esc_2:
0149+  14CF 19 01         mov al, 1
0150+  14D1 05 03         syscall sys_io          ; receive in AH without echo
0151+  14D3 B9 00         cmp al, 0            ; check error code (AL)
0152+  14D5 C6 CF 14      je _gets_ansi_esc_2  ; if no char received, retry
0153+  14D8 76 44         cmp ah, 'D'
0154+  14DA C6 E5 14      je _gets_left_arrow
0155+  14DD 76 43         cmp ah, 'C'
0156+  14DF C6 E9 14      je _gets_right_arrow
0157+  14E2 0A 95 14      jmp _gets_loop
0158+  14E5             _gets_left_arrow:
0159+  14E5 7F            dec d
0160+  14E6 0A 95 14      jmp _gets_loop
0161+  14E9             _gets_right_arrow:
0162+  14E9 79            inc d
0163+  14EA 0A 95 14      jmp _gets_loop
0164+  14ED             _gets_escape:
0165+  14ED 19 01         mov al, 1
0166+  14EF 05 03         syscall sys_io      ; receive in AH
0167+  14F1 B9 00         cmp al, 0        ; check error code (AL)
0168+  14F3 C6 ED 14      je _gets_escape      ; if no char received, retry
0169+  14F6 76 6E         cmp ah, 'n'
0170+  14F8 C6 17 15      je _gets_LF
0171+  14FB 76 72         cmp ah, 'r'
0172+  14FD C6 1E 15      je _gets_CR
0173+  1500 76 30         cmp ah, '0'
0174+  1502 C6 25 15      je _gets_NULL
0175+  1505 76 5C         cmp ah, $5C  ; '\'
0176+  1507 C6 10 15      je _gets_slash
0177+  150A 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  150B 3E            mov [d], al
0179+  150C 79            inc d
0180+  150D 0A 95 14      jmp _gets_loop
0181+  1510             _gets_slash:
0182+  1510 19 5C         mov al, $5C
0183+  1512 3E            mov [d], al
0184+  1513 79            inc d
0185+  1514 0A 95 14      jmp _gets_loop
0186+  1517             _gets_LF:
0187+  1517 19 0A         mov al, $0A
0188+  1519 3E            mov [d], al
0189+  151A 79            inc d
0190+  151B 0A 95 14      jmp _gets_loop
0191+  151E             _gets_CR:
0192+  151E 19 0D         mov al, $0D
0193+  1520 3E            mov [d], al
0194+  1521 79            inc d
0195+  1522 0A 95 14      jmp _gets_loop
0196+  1525             _gets_NULL:
0197+  1525 19 00         mov al, $00
0198+  1527 3E            mov [d], al
0199+  1528 79            inc d
0200+  1529 0A 95 14      jmp _gets_loop
0201+  152C             _gets_end:
0202+  152C 19 00         mov al, 0
0203+  152E 3E            mov [d], al        ; terminate string
0204+  152F E7            pop d
0205+  1530 E4            pop a
0206+  1531 09            ret
0207+  1532             
0208+  1532             ;-----------------------------------------------------------------------------
0209+  1532             ;; INPUT TEXT
0210+  1532             ;; terminated with CTRL+D
0211+  1532             ;; pointer in D
0212+  1532             ;-----------------------------------------------------------------------------
0213+  1532             _gettxt:
0214+  1532 D7            push a
0215+  1533 DA            push d
0216+  1534             _gettxt_loop:
0217+  1534 19 01         mov al, 1
0218+  1536 05 03         syscall sys_io      ; receive in AH
0219+  1538 B9 00         cmp al, 0        ; check error code (AL)
0220+  153A C6 34 15      je _gettxt_loop    ; if no char received, retry
0221+  153D 76 04         cmp ah, 4      ; EOT
0222+  153F C6 7D 15      je _gettxt_end
0223+  1542 76 08         cmp ah, $08      ; check for backspace
0224+  1544 C6 79 15      je _gettxt_backspace
0225+  1547 76 5C         cmp ah, $5C        ; '\'
0226+  1549 C6 52 15      je _gettxt_escape
0227+  154C 1A            mov al, ah
0228+  154D 3E            mov [d], al
0229+  154E 79            inc d
0230+  154F 0A 34 15      jmp _gettxt_loop
0231+  1552             _gettxt_escape:
0232+  1552 19 01         mov al, 1
0233+  1554 05 03         syscall sys_io      ; receive in AH
0234+  1556 B9 00         cmp al, 0        ; check error code (AL)
0235+  1558 C6 52 15      je _gettxt_escape    ; if no char received, retry
0236+  155B 76 6E         cmp ah, 'n'
0237+  155D C6 6B 15      je _gettxt_LF
0238+  1560 76 72         cmp ah, 'r'
0239+  1562 C6 72 15      je _gettxt_CR
0240+  1565 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  1566 3E            mov [d], al
0242+  1567 79            inc d
0243+  1568 0A 34 15      jmp _gettxt_loop
0244+  156B             _gettxt_LF:
0245+  156B 19 0A         mov al, $0A
0246+  156D 3E            mov [d], al
0247+  156E 79            inc d
0248+  156F 0A 34 15      jmp _gettxt_loop
0249+  1572             _gettxt_CR:
0250+  1572 19 0D         mov al, $0D
0251+  1574 3E            mov [d], al
0252+  1575 79            inc d
0253+  1576 0A 34 15      jmp _gettxt_loop
0254+  1579             _gettxt_backspace:
0255+  1579 7F            dec d
0256+  157A 0A 34 15      jmp _gettxt_loop
0257+  157D             _gettxt_end:
0258+  157D 19 00         mov al, 0
0259+  157F 3E            mov [d], al        ; terminate string
0260+  1580 E7            pop d
0261+  1581 E4            pop a
0262+  1582 09            ret
0263+  1583             
0264+  1583             ;-----------------------------------------------------------------------------
0265+  1583             ; PRINT NEW LINE
0266+  1583             ;-----------------------------------------------------------------------------
0267+  1583             printnl:
0268+  1583 D7            push a
0269+  1584 10 00 0A      mov a, $0A00
0270+  1587 05 03         syscall sys_io
0271+  1589 10 00 0D      mov a, $0D00
0272+  158C 05 03         syscall sys_io
0273+  158E E4            pop a
0274+  158F 09            ret
0275+  1590             
0276+  1590             ;-----------------------------------------------------------------------------
0277+  1590             ; _strtoint
0278+  1590             ; 4 digit hex string number in d
0279+  1590             ; integer returned in A
0280+  1590             ;-----------------------------------------------------------------------------
0281+  1590             _strtointx:
0282+  1590 D8            push b
0283+  1591 32            mov bl, [d]
0284+  1592 37            mov bh, bl
0285+  1593 33 01 00      mov bl, [d + 1]
0286+  1596 07 4A 14      call _atoi        ; convert to int in AL
0287+  1599 23            mov ah, al        ; move to AH
0288+  159A 33 02 00      mov bl, [d + 2]
0289+  159D 37            mov bh, bl
0290+  159E 33 03 00      mov bl, [d + 3]
0291+  15A1 07 4A 14      call _atoi        ; convert to int in AL
0292+  15A4 E5            pop b
0293+  15A5 09            ret
0294+  15A6             
0295+  15A6             ;-----------------------------------------------------------------------------
0296+  15A6             ; _strtoint
0297+  15A6             ; 5 digit base10 string number in d
0298+  15A6             ; integer returned in A
0299+  15A6             ;-----------------------------------------------------------------------------
0300+  15A6             _strtoint:
0301+  15A6 E2            push si
0302+  15A7 D8            push b
0303+  15A8 D9            push c
0304+  15A9 DA            push d
0305+  15AA 07 EC 13      call _strlen      ; get string length in C
0306+  15AD 7E            dec c
0307+  15AE FD 4E         mov si, d
0308+  15B0 12            mov a, c
0309+  15B1 FD 99         shl a
0310+  15B3 3B 22 17      mov d, table_power
0311+  15B6 59            add d, a
0312+  15B7 38 00 00      mov c, 0
0313+  15BA             _strtoint_L0:
0314+  15BA F6            lodsb      ; load ASCII to al
0315+  15BB B9 00         cmp al, 0
0316+  15BD C6 D0 15      je _strtoint_end
0317+  15C0 6F 30         sub al, $30    ; make into integer
0318+  15C2 22 00         mov ah, 0
0319+  15C4 2A            mov b, [d]
0320+  15C5 AC            mul a, b      ; result in B since it fits in 16bits
0321+  15C6 11            mov a, b
0322+  15C7 28            mov b, c
0323+  15C8 54            add a, b
0324+  15C9 39            mov c, a
0325+  15CA 63 02 00      sub d, 2
0326+  15CD 0A BA 15      jmp _strtoint_L0
0327+  15D0             _strtoint_end:
0328+  15D0 12            mov a, c
0329+  15D1 E7            pop d
0330+  15D2 E6            pop c
0331+  15D3 E5            pop b
0332+  15D4 EF            pop si
0333+  15D5 09            ret
0334+  15D6             
0335+  15D6             ;-----------------------------------------------------------------------------
0336+  15D6             ; PRINT NULL TERMINATED STRING
0337+  15D6             ; pointer in D
0338+  15D6             ;-----------------------------------------------------------------------------
0339+  15D6             _puts:
0340+  15D6 D7            push a
0341+  15D7 DA            push d
0342+  15D8             _puts_L1:
0343+  15D8 1E            mov al, [d]
0344+  15D9 B9 00         cmp al, 0
0345+  15DB C6 E7 15      jz _puts_END
0346+  15DE 23            mov ah, al
0347+  15DF 19 00         mov al, 0
0348+  15E1 05 03         syscall sys_io
0349+  15E3 79            inc d
0350+  15E4 0A D8 15      jmp _puts_L1
0351+  15E7             _puts_END:
0352+  15E7 E7            pop d
0353+  15E8 E4            pop a
0354+  15E9 09            ret
0355+  15EA             
0356+  15EA             ;-----------------------------------------------------------------------------
0357+  15EA             ; PRINT N SIZE STRING
0358+  15EA             ; pointer in D
0359+  15EA             ; size in C
0360+  15EA             ;-----------------------------------------------------------------------------
0361+  15EA             _putsn:
0362+  15EA DB            push al
0363+  15EB DA            push d
0364+  15EC D9            push c
0365+  15ED             _putsn_L0:
0366+  15ED 1E            mov al, [d]
0367+  15EE 23            mov ah, al
0368+  15EF 19 00         mov al, 0
0369+  15F1 05 03         syscall sys_io
0370+  15F3 79            inc d
0371+  15F4 7E            dec c  
0372+  15F5 C2 00 00      cmp c, 0
0373+  15F8 C7 ED 15      jne _putsn_L0
0374+  15FB             _putsn_end:
0375+  15FB E6            pop c
0376+  15FC E7            pop d
0377+  15FD E8            pop al
0378+  15FE 09            ret
0379+  15FF             
0380+  15FF             ;-----------------------------------------------------------------------------
0381+  15FF             ; print 16bit decimal number
0382+  15FF             ; input number in A
0383+  15FF             ;-----------------------------------------------------------------------------
0384+  15FF             print_u16d:
0385+  15FF D7            push a
0386+  1600 D8            push b
0387+  1601 26 10 27      mov b, 10000
0388+  1604 AE            div a, b      ; get 10000's coeff.
0389+  1605 07 27 16      call print_number
0390+  1608 11            mov a, b
0391+  1609 26 E8 03      mov b, 1000
0392+  160C AE            div a, b      ; get 1000's coeff.
0393+  160D 07 27 16      call print_number
0394+  1610 11            mov a, b
0395+  1611 26 64 00      mov b, 100
0396+  1614 AE            div a, b
0397+  1615 07 27 16      call print_number
0398+  1618 11            mov a, b
0399+  1619 26 0A 00      mov b, 10
0400+  161C AE            div a, b
0401+  161D 07 27 16      call print_number
0402+  1620 1B            mov al, bl      ; 1's coeff in bl
0403+  1621 07 27 16      call print_number
0404+  1624 E5            pop b
0405+  1625 E4            pop a
0406+  1626 09            ret
0407+  1627             
0408+  1627             ;-----------------------------------------------------------------------------
0409+  1627             ; print AL
0410+  1627             ;-----------------------------------------------------------------------------
0411+  1627             print_number:
0412+  1627 6A 30         add al, $30
0413+  1629 23            mov ah, al
0414+  162A 07 8C 14      call _putchar
0415+  162D 09            ret
0416+  162E             
0417+  162E             ;-----------------------------------------------------------------------------
0418+  162E             ; PRINT 16BIT HEX INTEGER
0419+  162E             ; integer value in reg B
0420+  162E             ;-----------------------------------------------------------------------------
0421+  162E             print_u16x:
0422+  162E D7            push a
0423+  162F D8            push b
0424+  1630 DD            push bl
0425+  1631 30            mov bl, bh
0426+  1632 07 5A 14      call _itoa        ; convert bh to char in A
0427+  1635 2F            mov bl, al        ; save al
0428+  1636 19 00         mov al, 0
0429+  1638 05 03         syscall sys_io        ; display AH
0430+  163A 24            mov ah, bl        ; retrieve al
0431+  163B 19 00         mov al, 0
0432+  163D 05 03         syscall sys_io        ; display AL
0433+  163F             
0434+  163F EA            pop bl
0435+  1640 07 5A 14      call _itoa        ; convert bh to char in A
0436+  1643 2F            mov bl, al        ; save al
0437+  1644 19 00         mov al, 0
0438+  1646 05 03         syscall sys_io        ; display AH
0439+  1648 24            mov ah, bl        ; retrieve al
0440+  1649 19 00         mov al, 0
0441+  164B 05 03         syscall sys_io        ; display AL
0442+  164D             
0443+  164D E5            pop b
0444+  164E E4            pop a
0445+  164F 09            ret
0446+  1650             
0447+  1650             ;-----------------------------------------------------------------------------
0448+  1650             ; INPUT 16BIT HEX INTEGER
0449+  1650             ; read 16bit integer into A
0450+  1650             ;-----------------------------------------------------------------------------
0451+  1650             scan_u16x:
0452+  1650 F8 10 00      enter 16
0453+  1653 D8            push b
0454+  1654 DA            push d
0455+  1655             
0456+  1655 FA F1 FF      lea d, [bp + -15]
0457+  1658 07 93 14      call _gets        ; get number
0458+  165B             
0459+  165B 32            mov bl, [d]
0460+  165C 37            mov bh, bl
0461+  165D 33 01 00      mov bl, [d + 1]
0462+  1660 07 4A 14      call _atoi        ; convert to int in AL
0463+  1663 23            mov ah, al        ; move to AH
0464+  1664             
0465+  1664 33 02 00      mov bl, [d + 2]
0466+  1667 37            mov bh, bl
0467+  1668 33 03 00      mov bl, [d + 3]
0468+  166B 07 4A 14      call _atoi        ; convert to int in AL
0469+  166E             
0470+  166E E7            pop d
0471+  166F E5            pop b
0472+  1670 F9            leave
0473+  1671 09            ret
0474+  1672             
0475+  1672             ;-----------------------------------------------------------------------------
0476+  1672             ; PRINT 8bit HEX INTEGER
0477+  1672             ; integer value in reg bl
0478+  1672             ;-----------------------------------------------------------------------------
0479+  1672             print_u8x:
0480+  1672 D7            push a
0481+  1673 DD            push bl
0482+  1674             
0483+  1674 07 5A 14      call _itoa        ; convert bl to char in A
0484+  1677 2F            mov bl, al        ; save al
0485+  1678 19 00         mov al, 0
0486+  167A 05 03         syscall sys_io        ; display AH
0487+  167C 24            mov ah, bl        ; retrieve al
0488+  167D 19 00         mov al, 0
0489+  167F 05 03         syscall sys_io        ; display AL
0490+  1681             
0491+  1681 EA            pop bl
0492+  1682 E4            pop a
0493+  1683 09            ret
0494+  1684             
0495+  1684             ;-----------------------------------------------------------------------------
0496+  1684             ; print 8bit decimal unsigned number
0497+  1684             ; input number in AL
0498+  1684             ;-----------------------------------------------------------------------------
0499+  1684             print_u8d:
0500+  1684 D7            push a
0501+  1685 D8            push b
0502+  1686             
0503+  1686 22 00         mov ah, 0
0504+  1688 26 64 00      mov b, 100
0505+  168B AE            div a, b
0506+  168C D8            push b      ; save remainder
0507+  168D B9 00         cmp al, 0
0508+  168F C6 99 16      je skip100
0509+  1692 6A 30         add al, $30
0510+  1694 23            mov ah, al
0511+  1695 19 00         mov al, 0
0512+  1697 05 03         syscall sys_io  ; print coeff
0513+  1699             skip100:
0514+  1699 E4            pop a
0515+  169A 22 00         mov ah, 0
0516+  169C 26 0A 00      mov b, 10
0517+  169F AE            div a, b
0518+  16A0 D8            push b      ; save remainder
0519+  16A1 B9 00         cmp al, 0
0520+  16A3 C6 AD 16      je skip10
0521+  16A6 6A 30         add al, $30
0522+  16A8 23            mov ah, al
0523+  16A9 19 00         mov al, 0
0524+  16AB 05 03         syscall sys_io  ; print coeff
0525+  16AD             skip10:
0526+  16AD E4            pop a
0527+  16AE 1B            mov al, bl
0528+  16AF 6A 30         add al, $30
0529+  16B1 23            mov ah, al
0530+  16B2 19 00         mov al, 0
0531+  16B4 05 03         syscall sys_io  ; print coeff
0532+  16B6 E5            pop b
0533+  16B7 E4            pop a
0534+  16B8 09            ret
0535+  16B9             
0536+  16B9             ;-----------------------------------------------------------------------------
0537+  16B9             ; INPUT 8BIT HEX INTEGER
0538+  16B9             ; read 8bit integer into AL
0539+  16B9             ;-----------------------------------------------------------------------------
0540+  16B9             scan_u8x:
0541+  16B9 F8 04 00      enter 4
0542+  16BC D8            push b
0543+  16BD DA            push d
0544+  16BE             
0545+  16BE FA FD FF      lea d, [bp + -3]
0546+  16C1 07 93 14      call _gets        ; get number
0547+  16C4             
0548+  16C4 32            mov bl, [d]
0549+  16C5 37            mov bh, bl
0550+  16C6 33 01 00      mov bl, [d + 1]
0551+  16C9 07 4A 14      call _atoi        ; convert to int in AL
0552+  16CC             
0553+  16CC E7            pop d
0554+  16CD E5            pop b
0555+  16CE F9            leave
0556+  16CF 09            ret
0557+  16D0             
0558+  16D0             ;-----------------------------------------------------------------------------
0559+  16D0             ; input decimal number
0560+  16D0             ; result in A
0561+  16D0             ; 655'\0'
0562+  16D0             ; low--------high
0563+  16D0             ;-----------------------------------------------------------------------------
0564+  16D0             scan_u16d:
0565+  16D0 F8 08 00      enter 8
0566+  16D3 E2            push si
0567+  16D4 D8            push b
0568+  16D5 D9            push c
0569+  16D6 DA            push d
0570+  16D7 FA F9 FF      lea d, [bp +- 7]
0571+  16DA 07 93 14      call _gets
0572+  16DD 07 EC 13      call _strlen      ; get string length in C
0573+  16E0 7E            dec c
0574+  16E1 FD 4E         mov si, d
0575+  16E3 12            mov a, c
0576+  16E4 FD 99         shl a
0577+  16E6 3B 22 17      mov d, table_power
0578+  16E9 59            add d, a
0579+  16EA 38 00 00      mov c, 0
0580+  16ED             mul_loop:
0581+  16ED F6            lodsb      ; load ASCII to al
0582+  16EE B9 00         cmp al, 0
0583+  16F0 C6 03 17      je mul_exit
0584+  16F3 6F 30         sub al, $30    ; make into integer
0585+  16F5 22 00         mov ah, 0
0586+  16F7 2A            mov b, [d]
0587+  16F8 AC            mul a, b      ; result in B since it fits in 16bits
0588+  16F9 11            mov a, b
0589+  16FA 28            mov b, c
0590+  16FB 54            add a, b
0591+  16FC 39            mov c, a
0592+  16FD 63 02 00      sub d, 2
0593+  1700 0A ED 16      jmp mul_loop
0594+  1703             mul_exit:
0595+  1703 12            mov a, c
0596+  1704 E7            pop d
0597+  1705 E6            pop c
0598+  1706 E5            pop b
0599+  1707 EF            pop si
0600+  1708 F9            leave
0601+  1709 09            ret
0602+  170A             
0603+  170A 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  170E 34 35 36 37 
0603+  1712 38 39 41 42 
0603+  1716 43 44 45 46 
0604+  171A 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  171E 1B 5B 48 00 
0605+  1722             
0606+  1722             table_power:
0607+  1722 01 00         .dw 1
0608+  1724 0A 00         .dw 10
0609+  1726 64 00         .dw 100
0610+  1728 E8 03         .dw 1000
0611+  172A 10 27         .dw 100002349   172C             ; --- END INLINE ASM BLOCK
2350   172C             
2351   172C F9            leave
2352   172D 09            ret
2353   172E             
2354   172E             exit:
2355   172E F8 00 00      enter 0 ; (push bp; mov bp, sp)
2356   1731             
2357   1731             ; --- BEGIN INLINE ASM BLOCK
2358   1731 05 0B         syscall sys_terminate_proc
2359   1733             ; --- END INLINE ASM BLOCK
2360   1733             
2361   1733 F9            leave
2362   1734 09            ret
2363   1735             
2364   1735             memset:
2365   1735 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2366   1738             ; $i 
2367   1738 52 02 00      sub sp, 2
2368   173B             ;; for(i = 0; i < size; i++){ 
2369   173B             _for37_init:
2370   173B FA FF FF      lea d, [bp + -1] ; $i
2371   173E DA            push d
2372   173F 26 00 00      mov b, $0
2373   1742 E7            pop d
2374   1743 FD 43         mov [d], b
2375   1745             _for37_cond:
2376   1745 FA FF FF      lea d, [bp + -1] ; $i
2377   1748 2A            mov b, [d]
2378   1749             ; START RELATIONAL
2379   1749 D7            push a
2380   174A 11            mov a, b
2381   174B FA 08 00      lea d, [bp + 8] ; $size
2382   174E 2A            mov b, [d]
2383   174F B0            cmp a, b
2384   1750 FD 73         slt ; < (signed)
2385   1752 E4            pop a
2386   1753             ; END RELATIONAL
2387   1753 C0 00 00      cmp b, 0
2388   1756 C6 7F 17      je _for37_exit
2389   1759             _for37_block:
2390   1759             ;; *(s+i) = c; 
2391   1759 FA 05 00      lea d, [bp + 5] ; $s
2392   175C 2A            mov b, [d]
2393   175D             ; START TERMS
2394   175D D7            push a
2395   175E 11            mov a, b
2396   175F FA FF FF      lea d, [bp + -1] ; $i
2397   1762 2A            mov b, [d]
2398   1763 56            add b, a
2399   1764 E4            pop a
2400   1765             ; END TERMS
2401   1765 D8            push b
2402   1766 FA 07 00      lea d, [bp + 7] ; $c
2403   1769 32            mov bl, [d]
2404   176A A7 00         mov bh, 0
2405   176C E7            pop d
2406   176D FD 3E         mov [d], bl
2407   176F             _for37_update:
2408   176F FA FF FF      lea d, [bp + -1] ; $i
2409   1772 2A            mov b, [d]
2410   1773 D8            push b
2411   1774 FD 77         inc b
2412   1776 FA FF FF      lea d, [bp + -1] ; $i
2413   1779 FD 43         mov [d], b
2414   177B E5            pop b
2415   177C 0A 45 17      jmp _for37_cond
2416   177F             _for37_exit:
2417   177F             ;; return s; 
2418   177F FA 05 00      lea d, [bp + 5] ; $s
2419   1782 2A            mov b, [d]
2420   1783 F9            leave
2421   1784 09            ret
2422   1785             
2423   1785             atoi:
2424   1785 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2425   1788             ; $result 
2426   1788 10 00 00      mov a, $0
2427   178B 45 FF FF      mov [bp + -1], a
2428   178E             ; $sign 
2429   178E 10 01 00      mov a, $1
2430   1791 45 FD FF      mov [bp + -3], a
2431   1794 52 04 00      sub sp, 4
2432   1797             ;; while (*str == ' ') str++; 
2433   1797             _while38_cond:
2434   1797 FA 05 00      lea d, [bp + 5] ; $str
2435   179A 2A            mov b, [d]
2436   179B 74            mov d, b
2437   179C 32            mov bl, [d]
2438   179D A7 00         mov bh, 0
2439   179F             ; START RELATIONAL
2440   179F D7            push a
2441   17A0 11            mov a, b
2442   17A1 26 20 00      mov b, $20
2443   17A4 B0            cmp a, b
2444   17A5 FD 71         seq ; ==
2445   17A7 E4            pop a
2446   17A8             ; END RELATIONAL
2447   17A8 C0 00 00      cmp b, 0
2448   17AB C6 BE 17      je _while38_exit
2449   17AE             _while38_block:
2450   17AE             ;; str++; 
2451   17AE FA 05 00      lea d, [bp + 5] ; $str
2452   17B1 2A            mov b, [d]
2453   17B2 D8            push b
2454   17B3 FD 77         inc b
2455   17B5 FA 05 00      lea d, [bp + 5] ; $str
2456   17B8 FD 43         mov [d], b
2457   17BA E5            pop b
2458   17BB 0A 97 17      jmp _while38_cond
2459   17BE             _while38_exit:
2460   17BE             ;; if (*str == '-' || *str == '+') { 
2461   17BE             _if39_cond:
2462   17BE FA 05 00      lea d, [bp + 5] ; $str
2463   17C1 2A            mov b, [d]
2464   17C2 74            mov d, b
2465   17C3 32            mov bl, [d]
2466   17C4 A7 00         mov bh, 0
2467   17C6             ; START RELATIONAL
2468   17C6 D7            push a
2469   17C7 11            mov a, b
2470   17C8 26 2D 00      mov b, $2d
2471   17CB B0            cmp a, b
2472   17CC FD 71         seq ; ==
2473   17CE E4            pop a
2474   17CF             ; END RELATIONAL
2475   17CF D7            push a
2476   17D0 11            mov a, b
2477   17D1 FA 05 00      lea d, [bp + 5] ; $str
2478   17D4 2A            mov b, [d]
2479   17D5 74            mov d, b
2480   17D6 32            mov bl, [d]
2481   17D7 A7 00         mov bh, 0
2482   17D9             ; START RELATIONAL
2483   17D9 D7            push a
2484   17DA 11            mov a, b
2485   17DB 26 2B 00      mov b, $2b
2486   17DE B0            cmp a, b
2487   17DF FD 71         seq ; ==
2488   17E1 E4            pop a
2489   17E2             ; END RELATIONAL
2490   17E2 FD A8         sor a, b ; ||
2491   17E4 E4            pop a
2492   17E5 C0 00 00      cmp b, 0
2493   17E8 C6 1F 18      je _if39_exit
2494   17EB             _if39_true:
2495   17EB             ;; if (*str == '-') sign = -1; 
2496   17EB             _if40_cond:
2497   17EB FA 05 00      lea d, [bp + 5] ; $str
2498   17EE 2A            mov b, [d]
2499   17EF 74            mov d, b
2500   17F0 32            mov bl, [d]
2501   17F1 A7 00         mov bh, 0
2502   17F3             ; START RELATIONAL
2503   17F3 D7            push a
2504   17F4 11            mov a, b
2505   17F5 26 2D 00      mov b, $2d
2506   17F8 B0            cmp a, b
2507   17F9 FD 71         seq ; ==
2508   17FB E4            pop a
2509   17FC             ; END RELATIONAL
2510   17FC C0 00 00      cmp b, 0
2511   17FF C6 0F 18      je _if40_exit
2512   1802             _if40_true:
2513   1802             ;; sign = -1; 
2514   1802 FA FD FF      lea d, [bp + -3] ; $sign
2515   1805 DA            push d
2516   1806 26 FF FF      mov b, $ffff
2517   1809 E7            pop d
2518   180A FD 43         mov [d], b
2519   180C 0A 0F 18      jmp _if40_exit
2520   180F             _if40_exit:
2521   180F             ;; str++; 
2522   180F FA 05 00      lea d, [bp + 5] ; $str
2523   1812 2A            mov b, [d]
2524   1813 D8            push b
2525   1814 FD 77         inc b
2526   1816 FA 05 00      lea d, [bp + 5] ; $str
2527   1819 FD 43         mov [d], b
2528   181B E5            pop b
2529   181C 0A 1F 18      jmp _if39_exit
2530   181F             _if39_exit:
2531   181F             ;; while (*str >= '0' && *str <= '9') { 
2532   181F             _while41_cond:
2533   181F FA 05 00      lea d, [bp + 5] ; $str
2534   1822 2A            mov b, [d]
2535   1823 74            mov d, b
2536   1824 32            mov bl, [d]
2537   1825 A7 00         mov bh, 0
2538   1827             ; START RELATIONAL
2539   1827 D7            push a
2540   1828 11            mov a, b
2541   1829 26 30 00      mov b, $30
2542   182C B0            cmp a, b
2543   182D FD 82         sgeu ; >= (unsigned)
2544   182F E4            pop a
2545   1830             ; END RELATIONAL
2546   1830 D7            push a
2547   1831 11            mov a, b
2548   1832 FA 05 00      lea d, [bp + 5] ; $str
2549   1835 2A            mov b, [d]
2550   1836 74            mov d, b
2551   1837 32            mov bl, [d]
2552   1838 A7 00         mov bh, 0
2553   183A             ; START RELATIONAL
2554   183A D7            push a
2555   183B 11            mov a, b
2556   183C 26 39 00      mov b, $39
2557   183F B0            cmp a, b
2558   1840 FD 75         slu ; <= (unsigned)
2559   1842 E4            pop a
2560   1843             ; END RELATIONAL
2561   1843 FD A7         sand a, b
2562   1845 E4            pop a
2563   1846 C0 00 00      cmp b, 0
2564   1849 C6 84 18      je _while41_exit
2565   184C             _while41_block:
2566   184C             ;; result = result * 10 + (*str - '0'); 
2567   184C FA FF FF      lea d, [bp + -1] ; $result
2568   184F DA            push d
2569   1850 FA FF FF      lea d, [bp + -1] ; $result
2570   1853 2A            mov b, [d]
2571   1854             ; START FACTORS
2572   1854 D7            push a
2573   1855 11            mov a, b
2574   1856 26 0A 00      mov b, $a
2575   1859 AC            mul a, b ; *
2576   185A 11            mov a, b
2577   185B 27            mov b, a
2578   185C E4            pop a
2579   185D             ; END FACTORS
2580   185D             ; START TERMS
2581   185D D7            push a
2582   185E 11            mov a, b
2583   185F FA 05 00      lea d, [bp + 5] ; $str
2584   1862 2A            mov b, [d]
2585   1863 74            mov d, b
2586   1864 32            mov bl, [d]
2587   1865 A7 00         mov bh, 0
2588   1867             ; START TERMS
2589   1867 D7            push a
2590   1868 11            mov a, b
2591   1869 26 30 00      mov b, $30
2592   186C 60            sub a, b
2593   186D 27            mov b, a
2594   186E E4            pop a
2595   186F             ; END TERMS
2596   186F 56            add b, a
2597   1870 E4            pop a
2598   1871             ; END TERMS
2599   1871 E7            pop d
2600   1872 FD 43         mov [d], b
2601   1874             ;; str++; 
2602   1874 FA 05 00      lea d, [bp + 5] ; $str
2603   1877 2A            mov b, [d]
2604   1878 D8            push b
2605   1879 FD 77         inc b
2606   187B FA 05 00      lea d, [bp + 5] ; $str
2607   187E FD 43         mov [d], b
2608   1880 E5            pop b
2609   1881 0A 1F 18      jmp _while41_cond
2610   1884             _while41_exit:
2611   1884             ;; return sign * result; 
2612   1884 FA FD FF      lea d, [bp + -3] ; $sign
2613   1887 2A            mov b, [d]
2614   1888             ; START FACTORS
2615   1888 D7            push a
2616   1889 11            mov a, b
2617   188A FA FF FF      lea d, [bp + -1] ; $result
2618   188D 2A            mov b, [d]
2619   188E AC            mul a, b ; *
2620   188F 11            mov a, b
2621   1890 27            mov b, a
2622   1891 E4            pop a
2623   1892             ; END FACTORS
2624   1892 F9            leave
2625   1893 09            ret
2626   1894             
2627   1894             rand:
2628   1894 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2629   1897             ; $sec 
2630   1897 52 02 00      sub sp, 2
2631   189A             
2632   189A             ; --- BEGIN INLINE ASM BLOCK
2633   189A 19 00         mov al, 0
2634   189C 05 01         syscall sys_rtc					
2635   189E 1A            mov al, ah
2636   189F FA FF FF      lea d, [bp + -1] ; $sec
2637   18A2 1E            mov al, [d]
2638   18A3 22 00         mov ah, 0
2639   18A5             ; --- END INLINE ASM BLOCK
2640   18A5             
2641   18A5             ;; return sec; 
2642   18A5 FA FF FF      lea d, [bp + -1] ; $sec
2643   18A8 2A            mov b, [d]
2644   18A9 F9            leave
2645   18AA 09            ret
2646   18AB             
2647   18AB             alloc:
2648   18AB F8 00 00      enter 0 ; (push bp; mov bp, sp)
2649   18AE             ;; heap_top = heap_top + bytes; 
out/startrek.asm line 2650: Label not found: (_heap_top)
out/startrek.asm line 2650: Unused data in MS byte of argument. (2)
2650   18AE 3B 00 00      mov d, _heap_top ; $heap_top
2651   18B1 DA            push d
out/startrek.asm line 2652: Label not found: (_heap_top)
out/startrek.asm line 2652: Unused data in MS byte of argument. (2)
2652   18B2 3B 00 00      mov d, _heap_top ; $heap_top
2653   18B5 2A            mov b, [d]
2654   18B6             ; START TERMS
2655   18B6 D7            push a
2656   18B7 11            mov a, b
2657   18B8 FA 05 00      lea d, [bp + 5] ; $bytes
2658   18BB 2A            mov b, [d]
2659   18BC 56            add b, a
2660   18BD E4            pop a
2661   18BE             ; END TERMS
2662   18BE E7            pop d
2663   18BF FD 43         mov [d], b
2664   18C1             ;; return heap_top - bytes; 
out/startrek.asm line 2665: Label not found: (_heap_top)
out/startrek.asm line 2665: Unused data in MS byte of argument. (2)
2665   18C1 3B 00 00      mov d, _heap_top ; $heap_top
2666   18C4 2A            mov b, [d]
2667   18C5             ; START TERMS
2668   18C5 D7            push a
2669   18C6 11            mov a, b
2670   18C7 FA 05 00      lea d, [bp + 5] ; $bytes
2671   18CA 2A            mov b, [d]
2672   18CB 60            sub a, b
2673   18CC 27            mov b, a
2674   18CD E4            pop a
2675   18CE             ; END TERMS
2676   18CE F9            leave
2677   18CF 09            ret
2678   18D0             
2679   18D0             free:
2680   18D0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2681   18D3             ;; return heap_top = heap_top - bytes; 
out/startrek.asm line 2682: Label not found: (_heap_top)
out/startrek.asm line 2682: Unused data in MS byte of argument. (2)
2682   18D3 3B 00 00      mov d, _heap_top ; $heap_top
2683   18D6 DA            push d
out/startrek.asm line 2684: Label not found: (_heap_top)
out/startrek.asm line 2684: Unused data in MS byte of argument. (2)
2684   18D7 3B 00 00      mov d, _heap_top ; $heap_top
2685   18DA 2A            mov b, [d]
2686   18DB             ; START TERMS
2687   18DB D7            push a
2688   18DC 11            mov a, b
2689   18DD FA 05 00      lea d, [bp + 5] ; $bytes
2690   18E0 2A            mov b, [d]
2691   18E1 60            sub a, b
2692   18E2 27            mov b, a
2693   18E3 E4            pop a
2694   18E4             ; END TERMS
2695   18E4 E7            pop d
2696   18E5 FD 43         mov [d], b
2697   18E7 F9            leave
2698   18E8 09            ret
2699   18E9             
2700   18E9             include_ctype_lib:
2701   18E9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2702   18EC             
2703   18EC             ; --- BEGIN INLINE ASM BLOCK
2704   18EC             .include "lib/asm/ctype.asm"
0001+  18EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  18EC             ; ctype.s
0003+  18EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  18EC             
0005+  18EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  18EC             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  18EC             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  18EC             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  18EC             ;; characters are supported.
0010+  18EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  18EC             ;; _isalnum 
0012+  18EC             ;; _isalpha 
0013+  18EC             ;; islower 
0014+  18EC             ;; isupper 
0015+  18EC             ;; _isdigit 
0016+  18EC             ;; isxdigit
0017+  18EC             ;; iscntrl 
0018+  18EC             ;; isgraph 
0019+  18EC             ;; _isspace 
0020+  18EC             ;; isblank 
0021+  18EC             ;; isprint 
0022+  18EC             ;; ispunct 
0023+  18EC             ;; tolower 
0024+  18EC             ;; toupper
0025+  18EC             
0026+  18EC             
0027+  18EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  18EC             ;; IS ALPHANUMERIC
0029+  18EC             ;; sets ZF according with result
0030+  18EC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  18EC             _isalnum:
0032+  18EC 07 09 19    	call _isalpha
0033+  18EF C6 F5 18    	je _isalnum_exit
0034+  18F2 07 F6 18    	call _isdigit
0035+  18F5             _isalnum_exit:
0036+  18F5 09          	ret	
0037+  18F6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  18F6             ;; IS DIGIT
0039+  18F6             ;; sets ZF according with result
0040+  18F6             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  18F6             _isdigit:
0042+  18F6 DB          	push al
0043+  18F7 B9 30       	cmp al, '0'
0044+  18F9 C8 05 19    	jlu _isdigit_false
0045+  18FC B9 39       	cmp al, '9'
0046+  18FE D1 05 19    	jgu _isdigit_false
0047+  1901 87 00       	and al, 0	; set ZF
0048+  1903 E8          	pop al
0049+  1904 09          	ret
0050+  1905             _isdigit_false:
0051+  1905 8B 01       	or al, 1	; clear ZF
0052+  1907 E8          	pop al
0053+  1908 09          	ret	
0054+  1909             	
0055+  1909             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  1909             ;; IS ALPHA
0057+  1909             ;; sets ZF according with result
0058+  1909             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  1909             _isalpha:
0060+  1909 DB          	push al
0061+  190A B9 5F       	cmp al, '_'
0062+  190C C6 2C 19    	je _isalpha_true
0063+  190F B9 2E       	cmp al, '.'
0064+  1911 C6 2C 19    	je _isalpha_true
0065+  1914 B9 41       	cmp al, 'A'
0066+  1916 C8 28 19    	jlu _isalpha_false
0067+  1919 B9 7A       	cmp al, 'z'
0068+  191B D1 28 19    	jgu _isalpha_false
0069+  191E B9 5A       	cmp al, 'Z'
0070+  1920 D0 2C 19    	jleu _isalpha_true
0071+  1923 B9 61       	cmp al, 'a'
0072+  1925 C9 2C 19    	jgeu _isalpha_true
0073+  1928             _isalpha_false:
0074+  1928 8B 01       	or al, 1	; clear ZF
0075+  192A E8          	pop al
0076+  192B 09          	ret
0077+  192C             _isalpha_true:
0078+  192C 87 00       	and al, 0	; set ZF
0079+  192E E8          	pop al
0080+  192F 09          	ret
0081+  1930             
0082+  1930             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  1930             ;; IS PATH-ALPHA
0084+  1930             ;; sets ZF according with result
0085+  1930             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  1930             ispath:
0087+  1930 DB          	push al
0088+  1931 07 F6 18    	call _isdigit
0089+  1934 C6 5E 19    	je ispath_true
0090+  1937 B9 5F       	cmp al, '_'
0091+  1939 C6 5E 19    	je ispath_true
0092+  193C B9 2F       	cmp al, '/'
0093+  193E C6 5E 19    	je ispath_true
0094+  1941 B9 2E       	cmp al, '.'
0095+  1943 C6 5E 19    	je ispath_true
0096+  1946 B9 41       	cmp al, 'A'
0097+  1948 C8 5A 19    	jlu ispath_false
0098+  194B B9 7A       	cmp al, 'z'
0099+  194D D1 5A 19    	jgu ispath_false
0100+  1950 B9 5A       	cmp al, 'Z'
0101+  1952 D0 5E 19    	jleu ispath_true
0102+  1955 B9 61       	cmp al, 'a'
0103+  1957 C9 5E 19    	jgeu ispath_true
0104+  195A             ispath_false:
0105+  195A 8B 01       	or al, 1	; clear ZF
0106+  195C E8          	pop al
0107+  195D 09          	ret
0108+  195E             ispath_true:
0109+  195E 87 00       	and al, 0	; set ZF
0110+  1960 E8          	pop al
0111+  1961 09          	ret
0112+  1962             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  1962             ;; IS SPACE
0114+  1962             ;; sets ZF according with result
0115+  1962             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  1962             _isspace:
0117+  1962 B9 20       	cmp al, $20		; ' '
0118+  1964 C6 78 19    	je _isspace_exit
0119+  1967 B9 09       	cmp al, $09		; '\t'
0120+  1969 C6 78 19    	je _isspace_exit
0121+  196C B9 0A       	cmp al, $0A		; '\n'
0122+  196E C6 78 19    	je _isspace_exit
0123+  1971 B9 0D       	cmp al, $0D		; '\r'
0124+  1973 C6 78 19    	je _isspace_exit
0125+  1976 B9 0B       	cmp al, $0B		; '\v'
0126+  1978             _isspace_exit:
0127+  1978 09          	ret	
0128+  1979             
0129+  1979             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  1979             ; TO LOWER
0131+  1979             ; input in AL
0132+  1979             ; output in AL
0133+  1979             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  1979             _to_lower:
0135+  1979 B9 5A       	cmp al, 'Z'
0136+  197B D1 80 19    	jgu _to_lower_ret
0137+  197E 6A 20       	add al, $20				; convert to lower case
0138+  1980             _to_lower_ret:
0139+  1980 09          	ret
0140+  1981             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  1981             ; TO UPPER
0142+  1981             ; input in AL
0143+  1981             ; output in AL
0144+  1981             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  1981             _to_upper:
0146+  1981 B9 61       	cmp al, 'a'
0147+  1983 C8 88 19    	jlu _to_upper_ret
0148+  1986 6F 20       	sub al, $20			; convert to upper case
0149+  1988             _to_upper_ret:
0150+  1988 09          	ret
0151+  1989             
2705   1989             ; --- END INLINE ASM BLOCK
2706   1989             
2707   1989 F9            leave
2708   198A 09            ret
2709   198B             
2710   198B             is_space:
2711   198B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2712   198E             ;; return c == ' ' || c == '\t' || c == '\n' || c == '\r'; 
2713   198E FA 05 00      lea d, [bp + 5] ; $c
2714   1991 32            mov bl, [d]
2715   1992 A7 00         mov bh, 0
2716   1994             ; START RELATIONAL
2717   1994 D7            push a
2718   1995 11            mov a, b
2719   1996 26 20 00      mov b, $20
2720   1999 B0            cmp a, b
2721   199A FD 71         seq ; ==
2722   199C E4            pop a
2723   199D             ; END RELATIONAL
2724   199D D7            push a
2725   199E 11            mov a, b
2726   199F FA 05 00      lea d, [bp + 5] ; $c
2727   19A2 32            mov bl, [d]
2728   19A3 A7 00         mov bh, 0
2729   19A5             ; START RELATIONAL
2730   19A5 D7            push a
2731   19A6 11            mov a, b
2732   19A7 26 09 00      mov b, $9
2733   19AA B0            cmp a, b
2734   19AB FD 71         seq ; ==
2735   19AD E4            pop a
2736   19AE             ; END RELATIONAL
2737   19AE FD A8         sor a, b ; ||
2738   19B0 11            mov a, b
2739   19B1 FA 05 00      lea d, [bp + 5] ; $c
2740   19B4 32            mov bl, [d]
2741   19B5 A7 00         mov bh, 0
2742   19B7             ; START RELATIONAL
2743   19B7 D7            push a
2744   19B8 11            mov a, b
2745   19B9 26 0A 00      mov b, $a
2746   19BC B0            cmp a, b
2747   19BD FD 71         seq ; ==
2748   19BF E4            pop a
2749   19C0             ; END RELATIONAL
2750   19C0 FD A8         sor a, b ; ||
2751   19C2 11            mov a, b
2752   19C3 FA 05 00      lea d, [bp + 5] ; $c
2753   19C6 32            mov bl, [d]
2754   19C7 A7 00         mov bh, 0
2755   19C9             ; START RELATIONAL
2756   19C9 D7            push a
2757   19CA 11            mov a, b
2758   19CB 26 0D 00      mov b, $d
2759   19CE B0            cmp a, b
2760   19CF FD 71         seq ; ==
2761   19D1 E4            pop a
2762   19D2             ; END RELATIONAL
2763   19D2 FD A8         sor a, b ; ||
2764   19D4 E4            pop a
2765   19D5 F9            leave
2766   19D6 09            ret
2767   19D7             
2768   19D7             is_digit:
2769   19D7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2770   19DA             ;; return c >= '0' && c <= '9'; 
2771   19DA FA 05 00      lea d, [bp + 5] ; $c
2772   19DD 32            mov bl, [d]
2773   19DE A7 00         mov bh, 0
2774   19E0             ; START RELATIONAL
2775   19E0 D7            push a
2776   19E1 11            mov a, b
2777   19E2 26 30 00      mov b, $30
2778   19E5 B0            cmp a, b
2779   19E6 FD 80         sge ; >=
2780   19E8 E4            pop a
2781   19E9             ; END RELATIONAL
2782   19E9 D7            push a
2783   19EA 11            mov a, b
2784   19EB FA 05 00      lea d, [bp + 5] ; $c
2785   19EE 32            mov bl, [d]
2786   19EF A7 00         mov bh, 0
2787   19F1             ; START RELATIONAL
2788   19F1 D7            push a
2789   19F2 11            mov a, b
2790   19F3 26 39 00      mov b, $39
2791   19F6 B0            cmp a, b
2792   19F7 FD 73         slt ; <= (signed)
2793   19F9 E4            pop a
2794   19FA             ; END RELATIONAL
2795   19FA FD A7         sand a, b
2796   19FC E4            pop a
2797   19FD F9            leave
2798   19FE 09            ret
2799   19FF             
2800   19FF             is_alpha:
2801   19FF F8 00 00      enter 0 ; (push bp; mov bp, sp)
2802   1A02             ;; return(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '_'); 
2803   1A02 FA 05 00      lea d, [bp + 5] ; $c
2804   1A05 32            mov bl, [d]
2805   1A06 A7 00         mov bh, 0
2806   1A08             ; START RELATIONAL
2807   1A08 D7            push a
2808   1A09 11            mov a, b
2809   1A0A 26 61 00      mov b, $61
2810   1A0D B0            cmp a, b
2811   1A0E FD 80         sge ; >=
2812   1A10 E4            pop a
2813   1A11             ; END RELATIONAL
2814   1A11 D7            push a
2815   1A12 11            mov a, b
2816   1A13 FA 05 00      lea d, [bp + 5] ; $c
2817   1A16 32            mov bl, [d]
2818   1A17 A7 00         mov bh, 0
2819   1A19             ; START RELATIONAL
2820   1A19 D7            push a
2821   1A1A 11            mov a, b
2822   1A1B 26 7A 00      mov b, $7a
2823   1A1E B0            cmp a, b
2824   1A1F FD 73         slt ; <= (signed)
2825   1A21 E4            pop a
2826   1A22             ; END RELATIONAL
2827   1A22 FD A7         sand a, b
2828   1A24 E4            pop a
2829   1A25 D7            push a
2830   1A26 11            mov a, b
2831   1A27 FA 05 00      lea d, [bp + 5] ; $c
2832   1A2A 32            mov bl, [d]
2833   1A2B A7 00         mov bh, 0
2834   1A2D             ; START RELATIONAL
2835   1A2D D7            push a
2836   1A2E 11            mov a, b
2837   1A2F 26 41 00      mov b, $41
2838   1A32 B0            cmp a, b
2839   1A33 FD 80         sge ; >=
2840   1A35 E4            pop a
2841   1A36             ; END RELATIONAL
2842   1A36 D7            push a
2843   1A37 11            mov a, b
2844   1A38 FA 05 00      lea d, [bp + 5] ; $c
2845   1A3B 32            mov bl, [d]
2846   1A3C A7 00         mov bh, 0
2847   1A3E             ; START RELATIONAL
2848   1A3E D7            push a
2849   1A3F 11            mov a, b
2850   1A40 26 5A 00      mov b, $5a
2851   1A43 B0            cmp a, b
2852   1A44 FD 73         slt ; <= (signed)
2853   1A46 E4            pop a
2854   1A47             ; END RELATIONAL
2855   1A47 FD A7         sand a, b
2856   1A49 E4            pop a
2857   1A4A FD A8         sor a, b ; ||
2858   1A4C 11            mov a, b
2859   1A4D FA 05 00      lea d, [bp + 5] ; $c
2860   1A50 32            mov bl, [d]
2861   1A51 A7 00         mov bh, 0
2862   1A53             ; START RELATIONAL
2863   1A53 D7            push a
2864   1A54 11            mov a, b
2865   1A55 26 5F 00      mov b, $5f
2866   1A58 B0            cmp a, b
2867   1A59 FD 71         seq ; ==
2868   1A5B E4            pop a
2869   1A5C             ; END RELATIONAL
2870   1A5C FD A8         sor a, b ; ||
2871   1A5E E4            pop a
2872   1A5F F9            leave
2873   1A60 09            ret
2874   1A61             
2875   1A61             tolower:
2876   1A61 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2877   1A64             ;; if (ch >= 'A' && ch <= 'Z')  
2878   1A64             _if42_cond:
2879   1A64 FA 05 00      lea d, [bp + 5] ; $ch
2880   1A67 32            mov bl, [d]
2881   1A68 A7 00         mov bh, 0
2882   1A6A             ; START RELATIONAL
2883   1A6A D7            push a
2884   1A6B 11            mov a, b
2885   1A6C 26 41 00      mov b, $41
2886   1A6F B0            cmp a, b
2887   1A70 FD 80         sge ; >=
2888   1A72 E4            pop a
2889   1A73             ; END RELATIONAL
2890   1A73 D7            push a
2891   1A74 11            mov a, b
2892   1A75 FA 05 00      lea d, [bp + 5] ; $ch
2893   1A78 32            mov bl, [d]
2894   1A79 A7 00         mov bh, 0
2895   1A7B             ; START RELATIONAL
2896   1A7B D7            push a
2897   1A7C 11            mov a, b
2898   1A7D 26 5A 00      mov b, $5a
2899   1A80 B0            cmp a, b
2900   1A81 FD 73         slt ; <= (signed)
2901   1A83 E4            pop a
2902   1A84             ; END RELATIONAL
2903   1A84 FD A7         sand a, b
2904   1A86 E4            pop a
2905   1A87 C0 00 00      cmp b, 0
2906   1A8A C6 A5 1A      je _if42_else
2907   1A8D             _if42_true:
2908   1A8D             ;; return ch - 'A' + 'a'; 
2909   1A8D FA 05 00      lea d, [bp + 5] ; $ch
2910   1A90 32            mov bl, [d]
2911   1A91 A7 00         mov bh, 0
2912   1A93             ; START TERMS
2913   1A93 D7            push a
2914   1A94 11            mov a, b
2915   1A95 26 41 00      mov b, $41
2916   1A98 60            sub a, b
2917   1A99 27            mov b, a
2918   1A9A 11            mov a, b
2919   1A9B 26 61 00      mov b, $61
2920   1A9E 56            add b, a
2921   1A9F E4            pop a
2922   1AA0             ; END TERMS
2923   1AA0 F9            leave
2924   1AA1 09            ret
2925   1AA2 0A AD 1A      jmp _if42_exit
2926   1AA5             _if42_else:
2927   1AA5             ;; return ch; 
2928   1AA5 FA 05 00      lea d, [bp + 5] ; $ch
2929   1AA8 32            mov bl, [d]
2930   1AA9 A7 00         mov bh, 0
2931   1AAB F9            leave
2932   1AAC 09            ret
2933   1AAD             _if42_exit:
2934   1AAD F9            leave
2935   1AAE 09            ret
2936   1AAF             
2937   1AAF             toupper:
2938   1AAF F8 00 00      enter 0 ; (push bp; mov bp, sp)
2939   1AB2             ;; if (ch >= 'a' && ch <= 'z')  
2940   1AB2             _if43_cond:
2941   1AB2 FA 05 00      lea d, [bp + 5] ; $ch
2942   1AB5 32            mov bl, [d]
2943   1AB6 A7 00         mov bh, 0
2944   1AB8             ; START RELATIONAL
2945   1AB8 D7            push a
2946   1AB9 11            mov a, b
2947   1ABA 26 61 00      mov b, $61
2948   1ABD B0            cmp a, b
2949   1ABE FD 80         sge ; >=
2950   1AC0 E4            pop a
2951   1AC1             ; END RELATIONAL
2952   1AC1 D7            push a
2953   1AC2 11            mov a, b
2954   1AC3 FA 05 00      lea d, [bp + 5] ; $ch
2955   1AC6 32            mov bl, [d]
2956   1AC7 A7 00         mov bh, 0
2957   1AC9             ; START RELATIONAL
2958   1AC9 D7            push a
2959   1ACA 11            mov a, b
2960   1ACB 26 7A 00      mov b, $7a
2961   1ACE B0            cmp a, b
2962   1ACF FD 73         slt ; <= (signed)
2963   1AD1 E4            pop a
2964   1AD2             ; END RELATIONAL
2965   1AD2 FD A7         sand a, b
2966   1AD4 E4            pop a
2967   1AD5 C0 00 00      cmp b, 0
2968   1AD8 C6 F3 1A      je _if43_else
2969   1ADB             _if43_true:
2970   1ADB             ;; return ch - 'a' + 'A'; 
2971   1ADB FA 05 00      lea d, [bp + 5] ; $ch
2972   1ADE 32            mov bl, [d]
2973   1ADF A7 00         mov bh, 0
2974   1AE1             ; START TERMS
2975   1AE1 D7            push a
2976   1AE2 11            mov a, b
2977   1AE3 26 61 00      mov b, $61
2978   1AE6 60            sub a, b
2979   1AE7 27            mov b, a
2980   1AE8 11            mov a, b
2981   1AE9 26 41 00      mov b, $41
2982   1AEC 56            add b, a
2983   1AED E4            pop a
2984   1AEE             ; END TERMS
2985   1AEE F9            leave
2986   1AEF 09            ret
2987   1AF0 0A FB 1A      jmp _if43_exit
2988   1AF3             _if43_else:
2989   1AF3             ;; return ch; 
2990   1AF3 FA 05 00      lea d, [bp + 5] ; $ch
2991   1AF6 32            mov bl, [d]
2992   1AF7 A7 00         mov bh, 0
2993   1AF9 F9            leave
2994   1AFA 09            ret
2995   1AFB             _if43_exit:
2996   1AFB F9            leave
2997   1AFC 09            ret
2998   1AFD             
2999   1AFD             is_delimiter:
3000   1AFD F8 00 00      enter 0 ; (push bp; mov bp, sp)
3001   1B00             ;; if( 
3002   1B00             _if44_cond:
3003   1B00 FA 05 00      lea d, [bp + 5] ; $c
3004   1B03 32            mov bl, [d]
3005   1B04 A7 00         mov bh, 0
3006   1B06             ; START RELATIONAL
3007   1B06 D7            push a
3008   1B07 11            mov a, b
3009   1B08 26 40 00      mov b, $40
3010   1B0B B0            cmp a, b
3011   1B0C FD 71         seq ; ==
3012   1B0E E4            pop a
3013   1B0F             ; END RELATIONAL
3014   1B0F D7            push a
3015   1B10 11            mov a, b
3016   1B11 FA 05 00      lea d, [bp + 5] ; $c
3017   1B14 32            mov bl, [d]
3018   1B15 A7 00         mov bh, 0
3019   1B17             ; START RELATIONAL
3020   1B17 D7            push a
3021   1B18 11            mov a, b
3022   1B19 26 23 00      mov b, $23
3023   1B1C B0            cmp a, b
3024   1B1D FD 71         seq ; ==
3025   1B1F E4            pop a
3026   1B20             ; END RELATIONAL
3027   1B20 FD A8         sor a, b ; ||
3028   1B22 11            mov a, b
3029   1B23 FA 05 00      lea d, [bp + 5] ; $c
3030   1B26 32            mov bl, [d]
3031   1B27 A7 00         mov bh, 0
3032   1B29             ; START RELATIONAL
3033   1B29 D7            push a
3034   1B2A 11            mov a, b
3035   1B2B 26 24 00      mov b, $24
3036   1B2E B0            cmp a, b
3037   1B2F FD 71         seq ; ==
3038   1B31 E4            pop a
3039   1B32             ; END RELATIONAL
3040   1B32 FD A8         sor a, b ; ||
3041   1B34 11            mov a, b
3042   1B35 FA 05 00      lea d, [bp + 5] ; $c
3043   1B38 32            mov bl, [d]
3044   1B39 A7 00         mov bh, 0
3045   1B3B             ; START RELATIONAL
3046   1B3B D7            push a
3047   1B3C 11            mov a, b
3048   1B3D 26 2B 00      mov b, $2b
3049   1B40 B0            cmp a, b
3050   1B41 FD 71         seq ; ==
3051   1B43 E4            pop a
3052   1B44             ; END RELATIONAL
3053   1B44 FD A8         sor a, b ; ||
3054   1B46 11            mov a, b
3055   1B47 FA 05 00      lea d, [bp + 5] ; $c
3056   1B4A 32            mov bl, [d]
3057   1B4B A7 00         mov bh, 0
3058   1B4D             ; START RELATIONAL
3059   1B4D D7            push a
3060   1B4E 11            mov a, b
3061   1B4F 26 2D 00      mov b, $2d
3062   1B52 B0            cmp a, b
3063   1B53 FD 71         seq ; ==
3064   1B55 E4            pop a
3065   1B56             ; END RELATIONAL
3066   1B56 FD A8         sor a, b ; ||
3067   1B58 11            mov a, b
3068   1B59 FA 05 00      lea d, [bp + 5] ; $c
3069   1B5C 32            mov bl, [d]
3070   1B5D A7 00         mov bh, 0
3071   1B5F             ; START RELATIONAL
3072   1B5F D7            push a
3073   1B60 11            mov a, b
3074   1B61 26 2A 00      mov b, $2a
3075   1B64 B0            cmp a, b
3076   1B65 FD 71         seq ; ==
3077   1B67 E4            pop a
3078   1B68             ; END RELATIONAL
3079   1B68 FD A8         sor a, b ; ||
3080   1B6A 11            mov a, b
3081   1B6B FA 05 00      lea d, [bp + 5] ; $c
3082   1B6E 32            mov bl, [d]
3083   1B6F A7 00         mov bh, 0
3084   1B71             ; START RELATIONAL
3085   1B71 D7            push a
3086   1B72 11            mov a, b
3087   1B73 26 2F 00      mov b, $2f
3088   1B76 B0            cmp a, b
3089   1B77 FD 71         seq ; ==
3090   1B79 E4            pop a
3091   1B7A             ; END RELATIONAL
3092   1B7A FD A8         sor a, b ; ||
3093   1B7C 11            mov a, b
3094   1B7D FA 05 00      lea d, [bp + 5] ; $c
3095   1B80 32            mov bl, [d]
3096   1B81 A7 00         mov bh, 0
3097   1B83             ; START RELATIONAL
3098   1B83 D7            push a
3099   1B84 11            mov a, b
3100   1B85 26 25 00      mov b, $25
3101   1B88 B0            cmp a, b
3102   1B89 FD 71         seq ; ==
3103   1B8B E4            pop a
3104   1B8C             ; END RELATIONAL
3105   1B8C FD A8         sor a, b ; ||
3106   1B8E 11            mov a, b
3107   1B8F FA 05 00      lea d, [bp + 5] ; $c
3108   1B92 32            mov bl, [d]
3109   1B93 A7 00         mov bh, 0
3110   1B95             ; START RELATIONAL
3111   1B95 D7            push a
3112   1B96 11            mov a, b
3113   1B97 26 5B 00      mov b, $5b
3114   1B9A B0            cmp a, b
3115   1B9B FD 71         seq ; ==
3116   1B9D E4            pop a
3117   1B9E             ; END RELATIONAL
3118   1B9E FD A8         sor a, b ; ||
3119   1BA0 11            mov a, b
3120   1BA1 FA 05 00      lea d, [bp + 5] ; $c
3121   1BA4 32            mov bl, [d]
3122   1BA5 A7 00         mov bh, 0
3123   1BA7             ; START RELATIONAL
3124   1BA7 D7            push a
3125   1BA8 11            mov a, b
3126   1BA9 26 5D 00      mov b, $5d
3127   1BAC B0            cmp a, b
3128   1BAD FD 71         seq ; ==
3129   1BAF E4            pop a
3130   1BB0             ; END RELATIONAL
3131   1BB0 FD A8         sor a, b ; ||
3132   1BB2 11            mov a, b
3133   1BB3 FA 05 00      lea d, [bp + 5] ; $c
3134   1BB6 32            mov bl, [d]
3135   1BB7 A7 00         mov bh, 0
3136   1BB9             ; START RELATIONAL
3137   1BB9 D7            push a
3138   1BBA 11            mov a, b
3139   1BBB 26 28 00      mov b, $28
3140   1BBE B0            cmp a, b
3141   1BBF FD 71         seq ; ==
3142   1BC1 E4            pop a
3143   1BC2             ; END RELATIONAL
3144   1BC2 FD A8         sor a, b ; ||
3145   1BC4 11            mov a, b
3146   1BC5 FA 05 00      lea d, [bp + 5] ; $c
3147   1BC8 32            mov bl, [d]
3148   1BC9 A7 00         mov bh, 0
3149   1BCB             ; START RELATIONAL
3150   1BCB D7            push a
3151   1BCC 11            mov a, b
3152   1BCD 26 29 00      mov b, $29
3153   1BD0 B0            cmp a, b
3154   1BD1 FD 71         seq ; ==
3155   1BD3 E4            pop a
3156   1BD4             ; END RELATIONAL
3157   1BD4 FD A8         sor a, b ; ||
3158   1BD6 11            mov a, b
3159   1BD7 FA 05 00      lea d, [bp + 5] ; $c
3160   1BDA 32            mov bl, [d]
3161   1BDB A7 00         mov bh, 0
3162   1BDD             ; START RELATIONAL
3163   1BDD D7            push a
3164   1BDE 11            mov a, b
3165   1BDF 26 7B 00      mov b, $7b
3166   1BE2 B0            cmp a, b
3167   1BE3 FD 71         seq ; ==
3168   1BE5 E4            pop a
3169   1BE6             ; END RELATIONAL
3170   1BE6 FD A8         sor a, b ; ||
3171   1BE8 11            mov a, b
3172   1BE9 FA 05 00      lea d, [bp + 5] ; $c
3173   1BEC 32            mov bl, [d]
3174   1BED A7 00         mov bh, 0
3175   1BEF             ; START RELATIONAL
3176   1BEF D7            push a
3177   1BF0 11            mov a, b
3178   1BF1 26 7D 00      mov b, $7d
3179   1BF4 B0            cmp a, b
3180   1BF5 FD 71         seq ; ==
3181   1BF7 E4            pop a
3182   1BF8             ; END RELATIONAL
3183   1BF8 FD A8         sor a, b ; ||
3184   1BFA 11            mov a, b
3185   1BFB FA 05 00      lea d, [bp + 5] ; $c
3186   1BFE 32            mov bl, [d]
3187   1BFF A7 00         mov bh, 0
3188   1C01             ; START RELATIONAL
3189   1C01 D7            push a
3190   1C02 11            mov a, b
3191   1C03 26 3A 00      mov b, $3a
3192   1C06 B0            cmp a, b
3193   1C07 FD 71         seq ; ==
3194   1C09 E4            pop a
3195   1C0A             ; END RELATIONAL
3196   1C0A FD A8         sor a, b ; ||
3197   1C0C 11            mov a, b
3198   1C0D FA 05 00      lea d, [bp + 5] ; $c
3199   1C10 32            mov bl, [d]
3200   1C11 A7 00         mov bh, 0
3201   1C13             ; START RELATIONAL
3202   1C13 D7            push a
3203   1C14 11            mov a, b
3204   1C15 26 3B 00      mov b, $3b
3205   1C18 B0            cmp a, b
3206   1C19 FD 71         seq ; ==
3207   1C1B E4            pop a
3208   1C1C             ; END RELATIONAL
3209   1C1C FD A8         sor a, b ; ||
3210   1C1E 11            mov a, b
3211   1C1F FA 05 00      lea d, [bp + 5] ; $c
3212   1C22 32            mov bl, [d]
3213   1C23 A7 00         mov bh, 0
3214   1C25             ; START RELATIONAL
3215   1C25 D7            push a
3216   1C26 11            mov a, b
3217   1C27 26 3C 00      mov b, $3c
3218   1C2A B0            cmp a, b
3219   1C2B FD 71         seq ; ==
3220   1C2D E4            pop a
3221   1C2E             ; END RELATIONAL
3222   1C2E FD A8         sor a, b ; ||
3223   1C30 11            mov a, b
3224   1C31 FA 05 00      lea d, [bp + 5] ; $c
3225   1C34 32            mov bl, [d]
3226   1C35 A7 00         mov bh, 0
3227   1C37             ; START RELATIONAL
3228   1C37 D7            push a
3229   1C38 11            mov a, b
3230   1C39 26 3E 00      mov b, $3e
3231   1C3C B0            cmp a, b
3232   1C3D FD 71         seq ; ==
3233   1C3F E4            pop a
3234   1C40             ; END RELATIONAL
3235   1C40 FD A8         sor a, b ; ||
3236   1C42 11            mov a, b
3237   1C43 FA 05 00      lea d, [bp + 5] ; $c
3238   1C46 32            mov bl, [d]
3239   1C47 A7 00         mov bh, 0
3240   1C49             ; START RELATIONAL
3241   1C49 D7            push a
3242   1C4A 11            mov a, b
3243   1C4B 26 3D 00      mov b, $3d
3244   1C4E B0            cmp a, b
3245   1C4F FD 71         seq ; ==
3246   1C51 E4            pop a
3247   1C52             ; END RELATIONAL
3248   1C52 FD A8         sor a, b ; ||
3249   1C54 11            mov a, b
3250   1C55 FA 05 00      lea d, [bp + 5] ; $c
3251   1C58 32            mov bl, [d]
3252   1C59 A7 00         mov bh, 0
3253   1C5B             ; START RELATIONAL
3254   1C5B D7            push a
3255   1C5C 11            mov a, b
3256   1C5D 26 21 00      mov b, $21
3257   1C60 B0            cmp a, b
3258   1C61 FD 71         seq ; ==
3259   1C63 E4            pop a
3260   1C64             ; END RELATIONAL
3261   1C64 FD A8         sor a, b ; ||
3262   1C66 11            mov a, b
3263   1C67 FA 05 00      lea d, [bp + 5] ; $c
3264   1C6A 32            mov bl, [d]
3265   1C6B A7 00         mov bh, 0
3266   1C6D             ; START RELATIONAL
3267   1C6D D7            push a
3268   1C6E 11            mov a, b
3269   1C6F 26 5E 00      mov b, $5e
3270   1C72 B0            cmp a, b
3271   1C73 FD 71         seq ; ==
3272   1C75 E4            pop a
3273   1C76             ; END RELATIONAL
3274   1C76 FD A8         sor a, b ; ||
3275   1C78 11            mov a, b
3276   1C79 FA 05 00      lea d, [bp + 5] ; $c
3277   1C7C 32            mov bl, [d]
3278   1C7D A7 00         mov bh, 0
3279   1C7F             ; START RELATIONAL
3280   1C7F D7            push a
3281   1C80 11            mov a, b
3282   1C81 26 26 00      mov b, $26
3283   1C84 B0            cmp a, b
3284   1C85 FD 71         seq ; ==
3285   1C87 E4            pop a
3286   1C88             ; END RELATIONAL
3287   1C88 FD A8         sor a, b ; ||
3288   1C8A 11            mov a, b
3289   1C8B FA 05 00      lea d, [bp + 5] ; $c
3290   1C8E 32            mov bl, [d]
3291   1C8F A7 00         mov bh, 0
3292   1C91             ; START RELATIONAL
3293   1C91 D7            push a
3294   1C92 11            mov a, b
3295   1C93 26 7C 00      mov b, $7c
3296   1C96 B0            cmp a, b
3297   1C97 FD 71         seq ; ==
3298   1C99 E4            pop a
3299   1C9A             ; END RELATIONAL
3300   1C9A FD A8         sor a, b ; ||
3301   1C9C 11            mov a, b
3302   1C9D FA 05 00      lea d, [bp + 5] ; $c
3303   1CA0 32            mov bl, [d]
3304   1CA1 A7 00         mov bh, 0
3305   1CA3             ; START RELATIONAL
3306   1CA3 D7            push a
3307   1CA4 11            mov a, b
3308   1CA5 26 7E 00      mov b, $7e
3309   1CA8 B0            cmp a, b
3310   1CA9 FD 71         seq ; ==
3311   1CAB E4            pop a
3312   1CAC             ; END RELATIONAL
3313   1CAC FD A8         sor a, b ; ||
3314   1CAE 11            mov a, b
3315   1CAF FA 05 00      lea d, [bp + 5] ; $c
3316   1CB2 32            mov bl, [d]
3317   1CB3 A7 00         mov bh, 0
3318   1CB5             ; START RELATIONAL
3319   1CB5 D7            push a
3320   1CB6 11            mov a, b
3321   1CB7 26 2E 00      mov b, $2e
3322   1CBA B0            cmp a, b
3323   1CBB FD 71         seq ; ==
3324   1CBD E4            pop a
3325   1CBE             ; END RELATIONAL
3326   1CBE FD A8         sor a, b ; ||
3327   1CC0 E4            pop a
3328   1CC1 C0 00 00      cmp b, 0
3329   1CC4 C6 CF 1C      je _if44_else
3330   1CC7             _if44_true:
3331   1CC7             ;; return 1; 
3332   1CC7 26 01 00      mov b, $1
3333   1CCA F9            leave
3334   1CCB 09            ret
3335   1CCC 0A D4 1C      jmp _if44_exit
3336   1CCF             _if44_else:
3337   1CCF             ;; return 0; 
3338   1CCF 26 00 00      mov b, $0
3339   1CD2 F9            leave
3340   1CD3 09            ret
3341   1CD4             _if44_exit:
3342   1CD4 F9            leave
3343   1CD5 09            ret
3344   1CD6             
3345   1CD6             TO_FIXED:
3346   1CD6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3347   1CD9             ;; return x * 10; 
3348   1CD9 FA 05 00      lea d, [bp + 5] ; $x
3349   1CDC 2A            mov b, [d]
3350   1CDD             ; START FACTORS
3351   1CDD D7            push a
3352   1CDE 11            mov a, b
3353   1CDF 26 0A 00      mov b, $a
3354   1CE2 AC            mul a, b ; *
3355   1CE3 11            mov a, b
3356   1CE4 27            mov b, a
3357   1CE5 E4            pop a
3358   1CE6             ; END FACTORS
3359   1CE6 F9            leave
3360   1CE7 09            ret
3361   1CE8             
3362   1CE8             FROM_FIXED:
3363   1CE8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3364   1CEB             ;; return x / 10; 
3365   1CEB FA 05 00      lea d, [bp + 5] ; $x
3366   1CEE 2A            mov b, [d]
3367   1CEF             ; START FACTORS
3368   1CEF D7            push a
3369   1CF0 11            mov a, b
3370   1CF1 26 0A 00      mov b, $a
3371   1CF4 AE            div a, b
3372   1CF5 27            mov b, a
3373   1CF6 E4            pop a
3374   1CF7             ; END FACTORS
3375   1CF7 F9            leave
3376   1CF8 09            ret
3377   1CF9             
3378   1CF9             TO_FIXED00:
3379   1CF9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3380   1CFC             ;; return x * 100; 
3381   1CFC FA 05 00      lea d, [bp + 5] ; $x
3382   1CFF 2A            mov b, [d]
3383   1D00             ; START FACTORS
3384   1D00 D7            push a
3385   1D01 11            mov a, b
3386   1D02 26 64 00      mov b, $64
3387   1D05 AC            mul a, b ; *
3388   1D06 11            mov a, b
3389   1D07 27            mov b, a
3390   1D08 E4            pop a
3391   1D09             ; END FACTORS
3392   1D09 F9            leave
3393   1D0A 09            ret
3394   1D0B             
3395   1D0B             FROM_FIXED00:
3396   1D0B F8 00 00      enter 0 ; (push bp; mov bp, sp)
3397   1D0E             ;; return x / 100; 
3398   1D0E FA 05 00      lea d, [bp + 5] ; $x
3399   1D11 2A            mov b, [d]
3400   1D12             ; START FACTORS
3401   1D12 D7            push a
3402   1D13 11            mov a, b
3403   1D14 26 64 00      mov b, $64
3404   1D17 AE            div a, b
3405   1D18 27            mov b, a
3406   1D19 E4            pop a
3407   1D1A             ; END FACTORS
3408   1D1A F9            leave
3409   1D1B 09            ret
3410   1D1C             
3411   1D1C             get_rand:
3412   1D1C F8 00 00      enter 0 ; (push bp; mov bp, sp)
3413   1D1F             ; $r 
3414   1D1F 52 02 00      sub sp, 2
3415   1D22             ;; r = rand(); 
3416   1D22 FA FF FF      lea d, [bp + -1] ; $r
3417   1D25 DA            push d
3418   1D26 07 94 18      call rand
3419   1D29 E7            pop d
3420   1D2A FD 43         mov [d], b
3421   1D2C             ;; r = (r >> 8) | (r << 8); 
3422   1D2C FA FF FF      lea d, [bp + -1] ; $r
3423   1D2F DA            push d
3424   1D30 FA FF FF      lea d, [bp + -1] ; $r
3425   1D33 2A            mov b, [d]
3426   1D34             ; START SHIFT
3427   1D34 D7            push a
3428   1D35 11            mov a, b
3429   1D36 26 08 00      mov b, $8
3430   1D39 FD 39         mov c, b
3431   1D3B A1            shr a, cl
3432   1D3C 27            mov b, a
3433   1D3D E4            pop a
3434   1D3E             ; END SHIFT
3435   1D3E D7            push a
3436   1D3F 11            mov a, b
3437   1D40 FA FF FF      lea d, [bp + -1] ; $r
3438   1D43 2A            mov b, [d]
3439   1D44             ; START SHIFT
3440   1D44 D7            push a
3441   1D45 11            mov a, b
3442   1D46 26 08 00      mov b, $8
3443   1D49 FD 39         mov c, b
3444   1D4B 9D            shl a, cl
3445   1D4C 27            mov b, a
3446   1D4D E4            pop a
3447   1D4E             ; END SHIFT
3448   1D4E FD 70         or b, a ; |
3449   1D50 E4            pop a
3450   1D51 E7            pop d
3451   1D52 FD 43         mov [d], b
3452   1D54             ;; return ((r % spread) + 1); 
3453   1D54 FA FF FF      lea d, [bp + -1] ; $r
3454   1D57 2A            mov b, [d]
3455   1D58             ; START FACTORS
3456   1D58 D7            push a
3457   1D59 11            mov a, b
3458   1D5A FA 05 00      lea d, [bp + 5] ; $spread
3459   1D5D 2A            mov b, [d]
3460   1D5E AE            div a, b ; 
3461   1D5F 11            mov a, b
3462   1D60 27            mov b, a
3463   1D61 E4            pop a
3464   1D62             ; END FACTORS
3465   1D62             ; START TERMS
3466   1D62 D7            push a
3467   1D63 11            mov a, b
3468   1D64 26 01 00      mov b, $1
3469   1D67 56            add b, a
3470   1D68 E4            pop a
3471   1D69             ; END TERMS
3472   1D69 F9            leave
3473   1D6A 09            ret
3474   1D6B             
3475   1D6B             rand8:
3476   1D6B F8 00 00      enter 0 ; (push bp; mov bp, sp)
3477   1D6E             ;; return (get_rand(8)); 
3478   1D6E 26 08 00      mov b, $8
3479   1D71 FD AB         swp b
3480   1D73 D8            push b
3481   1D74 07 1C 1D      call get_rand
3482   1D77 51 02 00      add sp, 2
3483   1D7A F9            leave
3484   1D7B 09            ret
3485   1D7C             
3486   1D7C             input:
3487   1D7C F8 00 00      enter 0 ; (push bp; mov bp, sp)
3488   1D7F             ; $c 
3489   1D7F 52 02 00      sub sp, 2
3490   1D82             ;; while((c = getchar()) != '\n') { 
3491   1D82             _while45_cond:
3492   1D82 FA FF FF      lea d, [bp + -1] ; $c
3493   1D85 DA            push d
3494   1D86 07 08 13      call getchar
3495   1D89 E7            pop d
3496   1D8A FD 43         mov [d], b
3497   1D8C             ; START RELATIONAL
3498   1D8C D7            push a
3499   1D8D 11            mov a, b
3500   1D8E 26 0A 00      mov b, $a
3501   1D91 B0            cmp a, b
3502   1D92 FD 72         sneq ; !=
3503   1D94 E4            pop a
3504   1D95             ; END RELATIONAL
3505   1D95 C0 00 00      cmp b, 0
3506   1D98 C6 F3 1D      je _while45_exit
3507   1D9B             _while45_block:
3508   1D9B             ;; if (c == -1) 
3509   1D9B             _if46_cond:
3510   1D9B FA FF FF      lea d, [bp + -1] ; $c
3511   1D9E 2A            mov b, [d]
3512   1D9F             ; START RELATIONAL
3513   1D9F D7            push a
3514   1DA0 11            mov a, b
3515   1DA1 26 FF FF      mov b, $ffff
3516   1DA4 B0            cmp a, b
3517   1DA5 FD 71         seq ; ==
3518   1DA7 E4            pop a
3519   1DA8             ; END RELATIONAL
3520   1DA8 C0 00 00      cmp b, 0
3521   1DAB C6 B4 1D      je _if46_exit
3522   1DAE             _if46_true:
3523   1DAE             ;; exit(); 
3524   1DAE 07 2E 17      call exit
3525   1DB1 0A B4 1D      jmp _if46_exit
3526   1DB4             _if46_exit:
3527   1DB4             ;; if (l > 1) { 
3528   1DB4             _if47_cond:
3529   1DB4 FA 07 00      lea d, [bp + 7] ; $l
3530   1DB7 32            mov bl, [d]
3531   1DB8 A7 00         mov bh, 0
3532   1DBA             ; START RELATIONAL
3533   1DBA D7            push a
3534   1DBB 11            mov a, b
3535   1DBC 26 01 00      mov b, $1
3536   1DBF B0            cmp a, b
3537   1DC0 FD 81         sgu ; > (unsigned)
3538   1DC2 E4            pop a
3539   1DC3             ; END RELATIONAL
3540   1DC3 C0 00 00      cmp b, 0
3541   1DC6 C6 F0 1D      je _if47_exit
3542   1DC9             _if47_true:
3543   1DC9             ;; *b++ = c; 
3544   1DC9 FA 05 00      lea d, [bp + 5] ; $b
3545   1DCC 2A            mov b, [d]
3546   1DCD D8            push b
3547   1DCE FD 77         inc b
3548   1DD0 FA 05 00      lea d, [bp + 5] ; $b
3549   1DD3 FD 43         mov [d], b
3550   1DD5 E5            pop b
3551   1DD6 D8            push b
3552   1DD7 FA FF FF      lea d, [bp + -1] ; $c
3553   1DDA 2A            mov b, [d]
3554   1DDB E7            pop d
3555   1DDC FD 3E         mov [d], bl
3556   1DDE             ;; l--; 
3557   1DDE FA 07 00      lea d, [bp + 7] ; $l
3558   1DE1 32            mov bl, [d]
3559   1DE2 A7 00         mov bh, 0
3560   1DE4 D8            push b
3561   1DE5 FD 7D         dec b
3562   1DE7 FA 07 00      lea d, [bp + 7] ; $l
3563   1DEA FD 43         mov [d], b
3564   1DEC E5            pop b
3565   1DED 0A F0 1D      jmp _if47_exit
3566   1DF0             _if47_exit:
3567   1DF0 0A 82 1D      jmp _while45_cond
3568   1DF3             _while45_exit:
3569   1DF3             ;; *b = 0; 
3570   1DF3 FA 05 00      lea d, [bp + 5] ; $b
3571   1DF6 2A            mov b, [d]
3572   1DF7 D8            push b
3573   1DF8 26 00 00      mov b, $0
3574   1DFB E7            pop d
3575   1DFC FD 3E         mov [d], bl
3576   1DFE F9            leave
3577   1DFF 09            ret
3578   1E00             
3579   1E00             yesno:
3580   1E00 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3581   1E03             ; $b 
3582   1E03 52 02 00      sub sp, 2
3583   1E06             ;; input(b,2); 
3584   1E06 26 02 00      mov b, $2
3585   1E09 DD            push bl
3586   1E0A FA FF FF      lea d, [bp + -1] ; $b
3587   1E0D 2D            mov b, d
3588   1E0E FD AB         swp b
3589   1E10 D8            push b
3590   1E11 07 7C 1D      call input
3591   1E14 51 03 00      add sp, 3
3592   1E17             ;; if (tolower(*b) == 'y') 
3593   1E17             _if48_cond:
3594   1E17 FA FF FF      lea d, [bp + -1] ; $b
3595   1E1A 2D            mov b, d
3596   1E1B 74            mov d, b
3597   1E1C 32            mov bl, [d]
3598   1E1D A7 00         mov bh, 0
3599   1E1F DD            push bl
3600   1E20 07 61 1A      call tolower
3601   1E23 51 01 00      add sp, 1
3602   1E26             ; START RELATIONAL
3603   1E26 D7            push a
3604   1E27 11            mov a, b
3605   1E28 26 79 00      mov b, $79
3606   1E2B B0            cmp a, b
3607   1E2C FD 71         seq ; ==
3608   1E2E E4            pop a
3609   1E2F             ; END RELATIONAL
3610   1E2F C0 00 00      cmp b, 0
3611   1E32 C6 3D 1E      je _if48_exit
3612   1E35             _if48_true:
3613   1E35             ;; return 1; 
3614   1E35 26 01 00      mov b, $1
3615   1E38 F9            leave
3616   1E39 09            ret
3617   1E3A 0A 3D 1E      jmp _if48_exit
3618   1E3D             _if48_exit:
3619   1E3D             ;; return 0; 
3620   1E3D 26 00 00      mov b, $0
3621   1E40 F9            leave
3622   1E41 09            ret
3623   1E42             
3624   1E42             input_f00:
3625   1E42 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3626   1E45             ; $v 
3627   1E45             ; $buf 
3628   1E45             ; $x 
3629   1E45 52 0C 00      sub sp, 12
3630   1E48             ;; input(buf, 8); 
3631   1E48 26 08 00      mov b, $8
3632   1E4B DD            push bl
3633   1E4C FA F7 FF      lea d, [bp + -9] ; $buf
3634   1E4F 2D            mov b, d
3635   1E50 FD AB         swp b
3636   1E52 D8            push b
3637   1E53 07 7C 1D      call input
3638   1E56 51 03 00      add sp, 3
3639   1E59             ;; x = buf; 
3640   1E59 FA F5 FF      lea d, [bp + -11] ; $x
3641   1E5C DA            push d
3642   1E5D FA F7 FF      lea d, [bp + -9] ; $buf
3643   1E60 2D            mov b, d
3644   1E61 E7            pop d
3645   1E62 FD 43         mov [d], b
3646   1E64             ;; if (!is_digit(*x)) 
3647   1E64             _if49_cond:
3648   1E64 FA F5 FF      lea d, [bp + -11] ; $x
3649   1E67 2A            mov b, [d]
3650   1E68 74            mov d, b
3651   1E69 32            mov bl, [d]
3652   1E6A A7 00         mov bh, 0
3653   1E6C DD            push bl
3654   1E6D 07 D7 19      call is_digit
3655   1E70 51 01 00      add sp, 1
3656   1E73 C0 00 00      cmp b, 0
3657   1E76 FD 71         seq ; !
3658   1E78 C0 00 00      cmp b, 0
3659   1E7B C6 86 1E      je _if49_exit
3660   1E7E             _if49_true:
3661   1E7E             ;; return -1; 
3662   1E7E 26 FF FF      mov b, $ffff
3663   1E81 F9            leave
3664   1E82 09            ret
3665   1E83 0A 86 1E      jmp _if49_exit
3666   1E86             _if49_exit:
3667   1E86             ;; v = 100 * (*x++ - '0'); 
3668   1E86 FA FF FF      lea d, [bp + -1] ; $v
3669   1E89 DA            push d
3670   1E8A 26 64 00      mov b, $64
3671   1E8D             ; START FACTORS
3672   1E8D D7            push a
3673   1E8E 11            mov a, b
3674   1E8F FA F5 FF      lea d, [bp + -11] ; $x
3675   1E92 2A            mov b, [d]
3676   1E93 D8            push b
3677   1E94 FD 77         inc b
3678   1E96 FA F5 FF      lea d, [bp + -11] ; $x
3679   1E99 FD 43         mov [d], b
3680   1E9B E5            pop b
3681   1E9C 74            mov d, b
3682   1E9D 32            mov bl, [d]
3683   1E9E A7 00         mov bh, 0
3684   1EA0             ; START TERMS
3685   1EA0 D7            push a
3686   1EA1 11            mov a, b
3687   1EA2 26 30 00      mov b, $30
3688   1EA5 60            sub a, b
3689   1EA6 27            mov b, a
3690   1EA7 E4            pop a
3691   1EA8             ; END TERMS
3692   1EA8 AC            mul a, b ; *
3693   1EA9 11            mov a, b
3694   1EAA 27            mov b, a
3695   1EAB E4            pop a
3696   1EAC             ; END FACTORS
3697   1EAC E7            pop d
3698   1EAD FD 43         mov [d], b
3699   1EAF             ;; if (*x == 0) 
3700   1EAF             _if50_cond:
3701   1EAF FA F5 FF      lea d, [bp + -11] ; $x
3702   1EB2 2A            mov b, [d]
3703   1EB3 74            mov d, b
3704   1EB4 32            mov bl, [d]
3705   1EB5 A7 00         mov bh, 0
3706   1EB7             ; START RELATIONAL
3707   1EB7 D7            push a
3708   1EB8 11            mov a, b
3709   1EB9 26 00 00      mov b, $0
3710   1EBC B0            cmp a, b
3711   1EBD FD 71         seq ; ==
3712   1EBF E4            pop a
3713   1EC0             ; END RELATIONAL
3714   1EC0 C0 00 00      cmp b, 0
3715   1EC3 C6 CF 1E      je _if50_exit
3716   1EC6             _if50_true:
3717   1EC6             ;; return v; 
3718   1EC6 FA FF FF      lea d, [bp + -1] ; $v
3719   1EC9 2A            mov b, [d]
3720   1ECA F9            leave
3721   1ECB 09            ret
3722   1ECC 0A CF 1E      jmp _if50_exit
3723   1ECF             _if50_exit:
3724   1ECF             ;; if (*x++ != '.') 
3725   1ECF             _if51_cond:
3726   1ECF FA F5 FF      lea d, [bp + -11] ; $x
3727   1ED2 2A            mov b, [d]
3728   1ED3 D8            push b
3729   1ED4 FD 77         inc b
3730   1ED6 FA F5 FF      lea d, [bp + -11] ; $x
3731   1ED9 FD 43         mov [d], b
3732   1EDB E5            pop b
3733   1EDC 74            mov d, b
3734   1EDD 32            mov bl, [d]
3735   1EDE A7 00         mov bh, 0
3736   1EE0             ; START RELATIONAL
3737   1EE0 D7            push a
3738   1EE1 11            mov a, b
3739   1EE2 26 2E 00      mov b, $2e
3740   1EE5 B0            cmp a, b
3741   1EE6 FD 72         sneq ; !=
3742   1EE8 E4            pop a
3743   1EE9             ; END RELATIONAL
3744   1EE9 C0 00 00      cmp b, 0
3745   1EEC C6 F7 1E      je _if51_exit
3746   1EEF             _if51_true:
3747   1EEF             ;; return -1; 
3748   1EEF 26 FF FF      mov b, $ffff
3749   1EF2 F9            leave
3750   1EF3 09            ret
3751   1EF4 0A F7 1E      jmp _if51_exit
3752   1EF7             _if51_exit:
3753   1EF7             ;; if (!is_digit(*x)) 
3754   1EF7             _if52_cond:
3755   1EF7 FA F5 FF      lea d, [bp + -11] ; $x
3756   1EFA 2A            mov b, [d]
3757   1EFB 74            mov d, b
3758   1EFC 32            mov bl, [d]
3759   1EFD A7 00         mov bh, 0
3760   1EFF DD            push bl
3761   1F00 07 D7 19      call is_digit
3762   1F03 51 01 00      add sp, 1
3763   1F06 C0 00 00      cmp b, 0
3764   1F09 FD 71         seq ; !
3765   1F0B C0 00 00      cmp b, 0
3766   1F0E C6 19 1F      je _if52_exit
3767   1F11             _if52_true:
3768   1F11             ;; return -1; 
3769   1F11 26 FF FF      mov b, $ffff
3770   1F14 F9            leave
3771   1F15 09            ret
3772   1F16 0A 19 1F      jmp _if52_exit
3773   1F19             _if52_exit:
3774   1F19             ;; v = v + 10 * (*x++ - '0'); 
3775   1F19 FA FF FF      lea d, [bp + -1] ; $v
3776   1F1C DA            push d
3777   1F1D FA FF FF      lea d, [bp + -1] ; $v
3778   1F20 2A            mov b, [d]
3779   1F21             ; START TERMS
3780   1F21 D7            push a
3781   1F22 11            mov a, b
3782   1F23 26 0A 00      mov b, $a
3783   1F26             ; START FACTORS
3784   1F26 D7            push a
3785   1F27 11            mov a, b
3786   1F28 FA F5 FF      lea d, [bp + -11] ; $x
3787   1F2B 2A            mov b, [d]
3788   1F2C D8            push b
3789   1F2D FD 77         inc b
3790   1F2F FA F5 FF      lea d, [bp + -11] ; $x
3791   1F32 FD 43         mov [d], b
3792   1F34 E5            pop b
3793   1F35 74            mov d, b
3794   1F36 32            mov bl, [d]
3795   1F37 A7 00         mov bh, 0
3796   1F39             ; START TERMS
3797   1F39 D7            push a
3798   1F3A 11            mov a, b
3799   1F3B 26 30 00      mov b, $30
3800   1F3E 60            sub a, b
3801   1F3F 27            mov b, a
3802   1F40 E4            pop a
3803   1F41             ; END TERMS
3804   1F41 AC            mul a, b ; *
3805   1F42 11            mov a, b
3806   1F43 27            mov b, a
3807   1F44 E4            pop a
3808   1F45             ; END FACTORS
3809   1F45 56            add b, a
3810   1F46 E4            pop a
3811   1F47             ; END TERMS
3812   1F47 E7            pop d
3813   1F48 FD 43         mov [d], b
3814   1F4A             ;; if (!*x) 
3815   1F4A             _if53_cond:
3816   1F4A FA F5 FF      lea d, [bp + -11] ; $x
3817   1F4D 2A            mov b, [d]
3818   1F4E 74            mov d, b
3819   1F4F 32            mov bl, [d]
3820   1F50 A7 00         mov bh, 0
3821   1F52 C0 00 00      cmp b, 0
3822   1F55 FD 71         seq ; !
3823   1F57 C0 00 00      cmp b, 0
3824   1F5A C6 66 1F      je _if53_exit
3825   1F5D             _if53_true:
3826   1F5D             ;; return v; 
3827   1F5D FA FF FF      lea d, [bp + -1] ; $v
3828   1F60 2A            mov b, [d]
3829   1F61 F9            leave
3830   1F62 09            ret
3831   1F63 0A 66 1F      jmp _if53_exit
3832   1F66             _if53_exit:
3833   1F66             ;; if (!is_digit(*x)) 
3834   1F66             _if54_cond:
3835   1F66 FA F5 FF      lea d, [bp + -11] ; $x
3836   1F69 2A            mov b, [d]
3837   1F6A 74            mov d, b
3838   1F6B 32            mov bl, [d]
3839   1F6C A7 00         mov bh, 0
3840   1F6E DD            push bl
3841   1F6F 07 D7 19      call is_digit
3842   1F72 51 01 00      add sp, 1
3843   1F75 C0 00 00      cmp b, 0
3844   1F78 FD 71         seq ; !
3845   1F7A C0 00 00      cmp b, 0
3846   1F7D C6 88 1F      je _if54_exit
3847   1F80             _if54_true:
3848   1F80             ;; return -1; 
3849   1F80 26 FF FF      mov b, $ffff
3850   1F83 F9            leave
3851   1F84 09            ret
3852   1F85 0A 88 1F      jmp _if54_exit
3853   1F88             _if54_exit:
3854   1F88             ;; v = v + *x++ - '0'; 
3855   1F88 FA FF FF      lea d, [bp + -1] ; $v
3856   1F8B DA            push d
3857   1F8C FA FF FF      lea d, [bp + -1] ; $v
3858   1F8F 2A            mov b, [d]
3859   1F90             ; START TERMS
3860   1F90 D7            push a
3861   1F91 11            mov a, b
3862   1F92 FA F5 FF      lea d, [bp + -11] ; $x
3863   1F95 2A            mov b, [d]
3864   1F96 D8            push b
3865   1F97 FD 77         inc b
3866   1F99 FA F5 FF      lea d, [bp + -11] ; $x
3867   1F9C FD 43         mov [d], b
3868   1F9E E5            pop b
3869   1F9F 74            mov d, b
3870   1FA0 32            mov bl, [d]
3871   1FA1 A7 00         mov bh, 0
3872   1FA3 56            add b, a
3873   1FA4 11            mov a, b
3874   1FA5 26 30 00      mov b, $30
3875   1FA8 60            sub a, b
3876   1FA9 27            mov b, a
3877   1FAA E4            pop a
3878   1FAB             ; END TERMS
3879   1FAB E7            pop d
3880   1FAC FD 43         mov [d], b
3881   1FAE             ;; return v; 
3882   1FAE FA FF FF      lea d, [bp + -1] ; $v
3883   1FB1 2A            mov b, [d]
3884   1FB2 F9            leave
3885   1FB3 09            ret
3886   1FB4             
3887   1FB4             input_int:
3888   1FB4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3889   1FB7             ; $x 
3890   1FB7 52 08 00      sub sp, 8
3891   1FBA             ;; input(x, 8); 
3892   1FBA 26 08 00      mov b, $8
3893   1FBD DD            push bl
3894   1FBE FA F9 FF      lea d, [bp + -7] ; $x
3895   1FC1 2D            mov b, d
3896   1FC2 FD AB         swp b
3897   1FC4 D8            push b
3898   1FC5 07 7C 1D      call input
3899   1FC8 51 03 00      add sp, 3
3900   1FCB             ;; if (!is_digit(*x)) 
3901   1FCB             _if55_cond:
3902   1FCB FA F9 FF      lea d, [bp + -7] ; $x
3903   1FCE 2D            mov b, d
3904   1FCF 74            mov d, b
3905   1FD0 32            mov bl, [d]
3906   1FD1 A7 00         mov bh, 0
3907   1FD3 DD            push bl
3908   1FD4 07 D7 19      call is_digit
3909   1FD7 51 01 00      add sp, 1
3910   1FDA C0 00 00      cmp b, 0
3911   1FDD FD 71         seq ; !
3912   1FDF C0 00 00      cmp b, 0
3913   1FE2 C6 ED 1F      je _if55_exit
3914   1FE5             _if55_true:
3915   1FE5             ;; return -1; 
3916   1FE5 26 FF FF      mov b, $ffff
3917   1FE8 F9            leave
3918   1FE9 09            ret
3919   1FEA 0A ED 1F      jmp _if55_exit
3920   1FED             _if55_exit:
3921   1FED             ;; return atoi(x); 
3922   1FED FA F9 FF      lea d, [bp + -7] ; $x
3923   1FF0 2D            mov b, d
3924   1FF1 FD AB         swp b
3925   1FF3 D8            push b
3926   1FF4 07 85 17      call atoi
3927   1FF7 51 02 00      add sp, 2
3928   1FFA F9            leave
3929   1FFB 09            ret
3930   1FFC             
3931   1FFC             print100:
3932   1FFC F8 00 00      enter 0 ; (push bp; mov bp, sp)
3933   1FFF             ; $p 
3934   1FFF 52 02 00      sub sp, 2
3935   2002             ;; *p = buf; 
3936   2002 FA FF FF      lea d, [bp + -1] ; $p
3937   2005 2A            mov b, [d]
3938   2006 D8            push b
3939   2007 3B D8 62      mov d, st_print100_buf_dt ; static buf
3940   200A 2D            mov b, d
3941   200B E7            pop d
3942   200C FD 3E         mov [d], bl
3943   200E             ;; if (v < 0) { 
3944   200E             _if56_cond:
3945   200E FA 05 00      lea d, [bp + 5] ; $v
3946   2011 2A            mov b, [d]
3947   2012             ; START RELATIONAL
3948   2012 D7            push a
3949   2013 11            mov a, b
3950   2014 26 00 00      mov b, $0
3951   2017 B0            cmp a, b
3952   2018 FD 73         slt ; < (signed)
3953   201A E4            pop a
3954   201B             ; END RELATIONAL
3955   201B C0 00 00      cmp b, 0
3956   201E C6 45 20      je _if56_exit
3957   2021             _if56_true:
3958   2021             ;; v = -v; 
3959   2021 FA 05 00      lea d, [bp + 5] ; $v
3960   2024 DA            push d
3961   2025 FA 05 00      lea d, [bp + 5] ; $v
3962   2028 2A            mov b, [d]
3963   2029 FD 97         neg b
3964   202B E7            pop d
3965   202C FD 43         mov [d], b
3966   202E             ;; *p++ = '-'; 
3967   202E FA FF FF      lea d, [bp + -1] ; $p
3968   2031 2A            mov b, [d]
3969   2032 D8            push b
3970   2033 FD 77         inc b
3971   2035 FA FF FF      lea d, [bp + -1] ; $p
3972   2038 FD 43         mov [d], b
3973   203A E5            pop b
3974   203B D8            push b
3975   203C 26 2D 00      mov b, $2d
3976   203F E7            pop d
3977   2040 FD 3E         mov [d], bl
3978   2042 0A 45 20      jmp _if56_exit
3979   2045             _if56_exit:
3980   2045             ;; return buf; 
3981   2045 3B D8 62      mov d, st_print100_buf_dt ; static buf
3982   2048 2D            mov b, d
3983   2049 F9            leave
3984   204A 09            ret
3985   204B             
3986   204B             inoperable:
3987   204B F8 00 00      enter 0 ; (push bp; mov bp, sp)
3988   204E             ;; if (damage[u] < 0) { 
3989   204E             _if57_cond:
3990   204E 3B F6 60      mov d, _damage_data ; $damage
3991   2051 D7            push a
3992   2052 DA            push d
3993   2053 FA 05 00      lea d, [bp + 5] ; $u
3994   2056 32            mov bl, [d]
3995   2057 A7 00         mov bh, 0
3996   2059 E7            pop d
3997   205A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3998   205E E4            pop a
3999   205F 2A            mov b, [d]
4000   2060             ; START RELATIONAL
4001   2060 D7            push a
4002   2061 11            mov a, b
4003   2062 26 00 00      mov b, $0
4004   2065 B0            cmp a, b
4005   2066 FD 73         slt ; < (signed)
4006   2068 E4            pop a
4007   2069             ; END RELATIONAL
4008   2069 C0 00 00      cmp b, 0
4009   206C C6 B6 20      je _if57_exit
4010   206F             _if57_true:
4011   206F             ;; printf("%s %s inoperable.\n", 
4012   206F             _ternary59_cond:
4013   206F FA 05 00      lea d, [bp + 5] ; $u
4014   2072 32            mov bl, [d]
4015   2073 A7 00         mov bh, 0
4016   2075             ; START RELATIONAL
4017   2075 D7            push a
4018   2076 11            mov a, b
4019   2077 26 05 00      mov b, $5
4020   207A B0            cmp a, b
4021   207B FD 71         seq ; ==
4022   207D E4            pop a
4023   207E             ; END RELATIONAL
4024   207E C0 00 00      cmp b, 0
4025   2081 C6 8A 20      je _ternary59_false
4026   2084             _ternary59_true:
4027   2084 26 55 64      mov b, __s32 ; "are"
4028   2087 0A 8D 20      jmp _ternary59_exit
4029   208A             _ternary59_false:
4030   208A 26 59 64      mov b, __s33 ; "is"
4031   208D             _ternary59_exit:
4032   208D FD AB         swp b
4033   208F D8            push b
4034   2090 FA 05 00      lea d, [bp + 5] ; $u
4035   2093 32            mov bl, [d]
4036   2094 A7 00         mov bh, 0
4037   2096 FD AB         swp b
4038   2098 D8            push b
4039   2099 07 B9 5C      call get_device_name
4040   209C 51 02 00      add sp, 2
4041   209F FD AB         swp b
4042   20A1 D8            push b
4043   20A2 26 5C 64      mov b, __s34 ; "%s %s inoperable.\n"
4044   20A5 FD AB         swp b
4045   20A7 D8            push b
4046   20A8 07 D1 05      call printf
4047   20AB 51 06 00      add sp, 6
4048   20AE             ;; return 1; 
4049   20AE 26 01 00      mov b, $1
4050   20B1 F9            leave
4051   20B2 09            ret
4052   20B3 0A B6 20      jmp _if57_exit
4053   20B6             _if57_exit:
4054   20B6             ;; return 0; 
4055   20B6 26 00 00      mov b, $0
4056   20B9 F9            leave
4057   20BA 09            ret
4058   20BB             
4059   20BB             intro:
4060   20BB F8 00 00      enter 0 ; (push bp; mov bp, sp)
4061   20BE             ;; showfile("startrek.intro"); 
4062   20BE 26 6F 64      mov b, __s35 ; "startrek.intro"
4063   20C1 FD AB         swp b
4064   20C3 D8            push b
4065   20C4 07 0B 60      call showfile
4066   20C7 51 02 00      add sp, 2
4067   20CA             ;; if (yesno()) 
4068   20CA             _if60_cond:
4069   20CA 07 00 1E      call yesno
4070   20CD C0 00 00      cmp b, 0
4071   20D0 C6 E2 20      je _if60_exit
4072   20D3             _if60_true:
4073   20D3             ;; showfile("startrek.doc"); 
4074   20D3 26 7E 64      mov b, __s36 ; "startrek.doc"
4075   20D6 FD AB         swp b
4076   20D8 D8            push b
4077   20D9 07 0B 60      call showfile
4078   20DC 51 02 00      add sp, 2
4079   20DF 0A E2 20      jmp _if60_exit
4080   20E2             _if60_exit:
4081   20E2             ;; showfile("startrek.logo"); 
4082   20E2 26 8B 64      mov b, __s37 ; "startrek.logo"
4083   20E5 FD AB         swp b
4084   20E7 D8            push b
4085   20E8 07 0B 60      call showfile
4086   20EB 51 02 00      add sp, 2
4087   20EE             ;; stardate = TO_FIXED((get_rand(20) + 20) * 100); 
4088   20EE 3B 0E 61      mov d, _stardate ; $stardate
4089   20F1 DA            push d
4090   20F2 26 14 00      mov b, $14
4091   20F5 FD AB         swp b
4092   20F7 D8            push b
4093   20F8 07 1C 1D      call get_rand
4094   20FB 51 02 00      add sp, 2
4095   20FE             ; START TERMS
4096   20FE D7            push a
4097   20FF 11            mov a, b
4098   2100 26 14 00      mov b, $14
4099   2103 56            add b, a
4100   2104 E4            pop a
4101   2105             ; END TERMS
4102   2105             ; START FACTORS
4103   2105 D7            push a
4104   2106 11            mov a, b
4105   2107 26 64 00      mov b, $64
4106   210A AC            mul a, b ; *
4107   210B 11            mov a, b
4108   210C 27            mov b, a
4109   210D E4            pop a
4110   210E             ; END FACTORS
4111   210E FD AB         swp b
4112   2110 D8            push b
4113   2111 07 D6 1C      call TO_FIXED
4114   2114 51 02 00      add sp, 2
4115   2117 E7            pop d
4116   2118 FD 43         mov [d], b
4117   211A F9            leave
4118   211B 09            ret
4119   211C             
4120   211C             new_game:
4121   211C F8 00 00      enter 0 ; (push bp; mov bp, sp)
4122   211F             ; $cmd 
4123   211F 52 04 00      sub sp, 4
4124   2122             ;; initialize(); 
4125   2122 07 AE 23      call initialize
4126   2125             ;; new_quadrant(); 
4127   2125 07 E9 27      call new_quadrant
4128   2128             ;; short_range_scan(); 
4129   2128 07 9F 34      call short_range_scan
4130   212B             ;; while (1) { 
4131   212B             _while61_cond:
4132   212B 26 01 00      mov b, $1
4133   212E C0 00 00      cmp b, 0
4134   2131 C6 AC 23      je _while61_exit
4135   2134             _while61_block:
4136   2134             ;; if (shield + energy <= 10 && (energy < 10 || damage[7] < 0)) { 
4137   2134             _if62_cond:
4138   2134 3B EF 60      mov d, _shield ; $shield
4139   2137 2A            mov b, [d]
4140   2138             ; START TERMS
4141   2138 D7            push a
4142   2139 11            mov a, b
4143   213A 3B 34 60      mov d, _energy ; $energy
4144   213D 2A            mov b, [d]
4145   213E 56            add b, a
4146   213F E4            pop a
4147   2140             ; END TERMS
4148   2140             ; START RELATIONAL
4149   2140 D7            push a
4150   2141 11            mov a, b
4151   2142 26 0A 00      mov b, $a
4152   2145 B0            cmp a, b
4153   2146 FD 73         slt ; <= (signed)
4154   2148 E4            pop a
4155   2149             ; END RELATIONAL
4156   2149 D7            push a
4157   214A 11            mov a, b
4158   214B 3B 34 60      mov d, _energy ; $energy
4159   214E 2A            mov b, [d]
4160   214F             ; START RELATIONAL
4161   214F D7            push a
4162   2150 11            mov a, b
4163   2151 26 0A 00      mov b, $a
4164   2154 B0            cmp a, b
4165   2155 FD 73         slt ; < (signed)
4166   2157 E4            pop a
4167   2158             ; END RELATIONAL
4168   2158 D7            push a
4169   2159 11            mov a, b
4170   215A 3B F6 60      mov d, _damage_data ; $damage
4171   215D D7            push a
4172   215E DA            push d
4173   215F 26 07 00      mov b, $7
4174   2162 E7            pop d
4175   2163 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4176   2167 E4            pop a
4177   2168 2A            mov b, [d]
4178   2169             ; START RELATIONAL
4179   2169 D7            push a
4180   216A 11            mov a, b
4181   216B 26 00 00      mov b, $0
4182   216E B0            cmp a, b
4183   216F FD 73         slt ; < (signed)
4184   2171 E4            pop a
4185   2172             ; END RELATIONAL
4186   2172 FD A8         sor a, b ; ||
4187   2174 E4            pop a
4188   2175 FD A7         sand a, b
4189   2177 E4            pop a
4190   2178 C0 00 00      cmp b, 0
4191   217B C6 90 21      je _if62_exit
4192   217E             _if62_true:
4193   217E             ;; showfile("startrek.fatal"); 
4194   217E 26 99 64      mov b, __s38 ; "startrek.fatal"
4195   2181 FD AB         swp b
4196   2183 D8            push b
4197   2184 07 0B 60      call showfile
4198   2187 51 02 00      add sp, 2
4199   218A             ;; end_of_time(); 
4200   218A 07 83 54      call end_of_time
4201   218D 0A 90 21      jmp _if62_exit
4202   2190             _if62_exit:
4203   2190             ;; puts("Command? "); 
4204   2190 26 A8 64      mov b, __s39 ; "Command? "
4205   2193 FD AB         swp b
4206   2195 D8            push b
4207   2196 07 31 13      call puts
4208   2199 51 02 00      add sp, 2
4209   219C             ;; input(cmd, 4); 
4210   219C 26 04 00      mov b, $4
4211   219F DD            push bl
4212   21A0 FA FD FF      lea d, [bp + -3] ; $cmd
4213   21A3 2D            mov b, d
4214   21A4 FD AB         swp b
4215   21A6 D8            push b
4216   21A7 07 7C 1D      call input
4217   21AA 51 03 00      add sp, 3
4218   21AD             ;; putchar('\n'); 
4219   21AD 26 0A 00      mov b, $a
4220   21B0 DD            push bl
4221   21B1 07 FB 12      call putchar
4222   21B4 51 01 00      add sp, 1
4223   21B7             ;; if (!strncmp(cmd, "nav", 3)) 
4224   21B7             _if63_cond:
4225   21B7 26 03 00      mov b, $3
4226   21BA FD AB         swp b
4227   21BC D8            push b
4228   21BD 26 B2 64      mov b, __s40 ; "nav"
4229   21C0 FD AB         swp b
4230   21C2 D8            push b
4231   21C3 FA FD FF      lea d, [bp + -3] ; $cmd
4232   21C6 2D            mov b, d
4233   21C7 FD AB         swp b
4234   21C9 D8            push b
4235   21CA 07 D0 04      call strncmp
4236   21CD 51 06 00      add sp, 6
4237   21D0 C0 00 00      cmp b, 0
4238   21D3 FD 71         seq ; !
4239   21D5 C0 00 00      cmp b, 0
4240   21D8 C6 E1 21      je _if63_else
4241   21DB             _if63_true:
4242   21DB             ;; course_control(); 
4243   21DB 07 76 2B      call course_control
4244   21DE 0A A9 23      jmp _if63_exit
4245   21E1             _if63_else:
4246   21E1             ;; if (!strncmp(cmd, "srs", 3)) 
4247   21E1             _if64_cond:
4248   21E1 26 03 00      mov b, $3
4249   21E4 FD AB         swp b
4250   21E6 D8            push b
4251   21E7 26 B6 64      mov b, __s41 ; "srs"
4252   21EA FD AB         swp b
4253   21EC D8            push b
4254   21ED FA FD FF      lea d, [bp + -3] ; $cmd
4255   21F0 2D            mov b, d
4256   21F1 FD AB         swp b
4257   21F3 D8            push b
4258   21F4 07 D0 04      call strncmp
4259   21F7 51 06 00      add sp, 6
4260   21FA C0 00 00      cmp b, 0
4261   21FD FD 71         seq ; !
4262   21FF C0 00 00      cmp b, 0
4263   2202 C6 0B 22      je _if64_else
4264   2205             _if64_true:
4265   2205             ;; short_range_scan(); 
4266   2205 07 9F 34      call short_range_scan
4267   2208 0A A9 23      jmp _if64_exit
4268   220B             _if64_else:
4269   220B             ;; if (!strncmp(cmd, "lrs", 3)) 
4270   220B             _if65_cond:
4271   220B 26 03 00      mov b, $3
4272   220E FD AB         swp b
4273   2210 D8            push b
4274   2211 26 BA 64      mov b, __s42 ; "lrs"
4275   2214 FD AB         swp b
4276   2216 D8            push b
4277   2217 FA FD FF      lea d, [bp + -3] ; $cmd
4278   221A 2D            mov b, d
4279   221B FD AB         swp b
4280   221D D8            push b
4281   221E 07 D0 04      call strncmp
4282   2221 51 06 00      add sp, 6
4283   2224 C0 00 00      cmp b, 0
4284   2227 FD 71         seq ; !
4285   2229 C0 00 00      cmp b, 0
4286   222C C6 35 22      je _if65_else
4287   222F             _if65_true:
4288   222F             ;; long_range_scan(); 
4289   222F 07 21 39      call long_range_scan
4290   2232 0A A9 23      jmp _if65_exit
4291   2235             _if65_else:
4292   2235             ;; if (!strncmp(cmd, "pha", 3)) 
4293   2235             _if66_cond:
4294   2235 26 03 00      mov b, $3
4295   2238 FD AB         swp b
4296   223A D8            push b
4297   223B 26 BE 64      mov b, __s43 ; "pha"
4298   223E FD AB         swp b
4299   2240 D8            push b
4300   2241 FA FD FF      lea d, [bp + -3] ; $cmd
4301   2244 2D            mov b, d
4302   2245 FD AB         swp b
4303   2247 D8            push b
4304   2248 07 D0 04      call strncmp
4305   224B 51 06 00      add sp, 6
4306   224E C0 00 00      cmp b, 0
4307   2251 FD 71         seq ; !
4308   2253 C0 00 00      cmp b, 0
4309   2256 C6 5F 22      je _if66_else
4310   2259             _if66_true:
4311   2259             ;; phaser_control(); 
4312   2259 07 3F 3B      call phaser_control
4313   225C 0A A9 23      jmp _if66_exit
4314   225F             _if66_else:
4315   225F             ;; if (!strncmp(cmd, "tor", 3)) 
4316   225F             _if67_cond:
4317   225F 26 03 00      mov b, $3
4318   2262 FD AB         swp b
4319   2264 D8            push b
4320   2265 26 C2 64      mov b, __s44 ; "tor"
4321   2268 FD AB         swp b
4322   226A D8            push b
4323   226B FA FD FF      lea d, [bp + -3] ; $cmd
4324   226E 2D            mov b, d
4325   226F FD AB         swp b
4326   2271 D8            push b
4327   2272 07 D0 04      call strncmp
4328   2275 51 06 00      add sp, 6
4329   2278 C0 00 00      cmp b, 0
4330   227B FD 71         seq ; !
4331   227D C0 00 00      cmp b, 0
4332   2280 C6 89 22      je _if67_else
4333   2283             _if67_true:
4334   2283             ;; photon_torpedoes(); 
4335   2283 07 FD 3F      call photon_torpedoes
4336   2286 0A A9 23      jmp _if67_exit
4337   2289             _if67_else:
4338   2289             ;; if (!strncmp(cmd, "shi", 3)) 
4339   2289             _if68_cond:
4340   2289 26 03 00      mov b, $3
4341   228C FD AB         swp b
4342   228E D8            push b
4343   228F 26 C6 64      mov b, __s45 ; "shi"
4344   2292 FD AB         swp b
4345   2294 D8            push b
4346   2295 FA FD FF      lea d, [bp + -3] ; $cmd
4347   2298 2D            mov b, d
4348   2299 FD AB         swp b
4349   229B D8            push b
4350   229C 07 D0 04      call strncmp
4351   229F 51 06 00      add sp, 6
4352   22A2 C0 00 00      cmp b, 0
4353   22A5 FD 71         seq ; !
4354   22A7 C0 00 00      cmp b, 0
4355   22AA C6 B3 22      je _if68_else
4356   22AD             _if68_true:
4357   22AD             ;; shield_control(); 
4358   22AD 07 68 48      call shield_control
4359   22B0 0A A9 23      jmp _if68_exit
4360   22B3             _if68_else:
4361   22B3             ;; if (!strncmp(cmd, "dam", 3)) 
4362   22B3             _if69_cond:
4363   22B3 26 03 00      mov b, $3
4364   22B6 FD AB         swp b
4365   22B8 D8            push b
4366   22B9 26 CA 64      mov b, __s46 ; "dam"
4367   22BC FD AB         swp b
4368   22BE D8            push b
4369   22BF FA FD FF      lea d, [bp + -3] ; $cmd
4370   22C2 2D            mov b, d
4371   22C3 FD AB         swp b
4372   22C5 D8            push b
4373   22C6 07 D0 04      call strncmp
4374   22C9 51 06 00      add sp, 6
4375   22CC C0 00 00      cmp b, 0
4376   22CF FD 71         seq ; !
4377   22D1 C0 00 00      cmp b, 0
4378   22D4 C6 DD 22      je _if69_else
4379   22D7             _if69_true:
4380   22D7             ;; damage_control(); 
4381   22D7 07 1D 46      call damage_control
4382   22DA 0A A9 23      jmp _if69_exit
4383   22DD             _if69_else:
4384   22DD             ;; if (!strncmp(cmd, "com", 3)) 
4385   22DD             _if70_cond:
4386   22DD 26 03 00      mov b, $3
4387   22E0 FD AB         swp b
4388   22E2 D8            push b
4389   22E3 26 CE 64      mov b, __s47 ; "com"
4390   22E6 FD AB         swp b
4391   22E8 D8            push b
4392   22E9 FA FD FF      lea d, [bp + -3] ; $cmd
4393   22EC 2D            mov b, d
4394   22ED FD AB         swp b
4395   22EF D8            push b
4396   22F0 07 D0 04      call strncmp
4397   22F3 51 06 00      add sp, 6
4398   22F6 C0 00 00      cmp b, 0
4399   22F9 FD 71         seq ; !
4400   22FB C0 00 00      cmp b, 0
4401   22FE C6 07 23      je _if70_else
4402   2301             _if70_true:
4403   2301             ;; library_computer(); 
4404   2301 07 44 49      call library_computer
4405   2304 0A A9 23      jmp _if70_exit
4406   2307             _if70_else:
4407   2307             ;; if (!strncmp(cmd, "xxx", 3)) 
4408   2307             _if71_cond:
4409   2307 26 03 00      mov b, $3
4410   230A FD AB         swp b
4411   230C D8            push b
4412   230D 26 D2 64      mov b, __s48 ; "xxx"
4413   2310 FD AB         swp b
4414   2312 D8            push b
4415   2313 FA FD FF      lea d, [bp + -3] ; $cmd
4416   2316 2D            mov b, d
4417   2317 FD AB         swp b
4418   2319 D8            push b
4419   231A 07 D0 04      call strncmp
4420   231D 51 06 00      add sp, 6
4421   2320 C0 00 00      cmp b, 0
4422   2323 FD 71         seq ; !
4423   2325 C0 00 00      cmp b, 0
4424   2328 C6 31 23      je _if71_else
4425   232B             _if71_true:
4426   232B             ;; resign_commision(); 
4427   232B 07 A7 54      call resign_commision
4428   232E 0A A9 23      jmp _if71_exit
4429   2331             _if71_else:
4430   2331             ;; puts("Enter one of the following:\n"); 
4431   2331 26 D6 64      mov b, __s49 ; "Enter one of the following:\n"
4432   2334 FD AB         swp b
4433   2336 D8            push b
4434   2337 07 31 13      call puts
4435   233A 51 02 00      add sp, 2
4436   233D             ;; puts("  nav - To Set Course"); 
4437   233D 26 F3 64      mov b, __s50 ; "  nav - To Set Course"
4438   2340 FD AB         swp b
4439   2342 D8            push b
4440   2343 07 31 13      call puts
4441   2346 51 02 00      add sp, 2
4442   2349             ;; puts("  srs - Short Range Sensors"); 
4443   2349 26 09 65      mov b, __s51 ; "  srs - Short Range Sensors"
4444   234C FD AB         swp b
4445   234E D8            push b
4446   234F 07 31 13      call puts
4447   2352 51 02 00      add sp, 2
4448   2355             ;; puts("  lrs - Long Range Sensors"); 
4449   2355 26 25 65      mov b, __s52 ; "  lrs - Long Range Sensors"
4450   2358 FD AB         swp b
4451   235A D8            push b
4452   235B 07 31 13      call puts
4453   235E 51 02 00      add sp, 2
4454   2361             ;; puts("  pha - Phasers"); 
4455   2361 26 40 65      mov b, __s53 ; "  pha - Phasers"
4456   2364 FD AB         swp b
4457   2366 D8            push b
4458   2367 07 31 13      call puts
4459   236A 51 02 00      add sp, 2
4460   236D             ;; puts("  tor - Photon Torpedoes"); 
4461   236D 26 50 65      mov b, __s54 ; "  tor - Photon Torpedoes"
4462   2370 FD AB         swp b
4463   2372 D8            push b
4464   2373 07 31 13      call puts
4465   2376 51 02 00      add sp, 2
4466   2379             ;; puts("  shi - Shield Control"); 
4467   2379 26 69 65      mov b, __s55 ; "  shi - Shield Control"
4468   237C FD AB         swp b
4469   237E D8            push b
4470   237F 07 31 13      call puts
4471   2382 51 02 00      add sp, 2
4472   2385             ;; puts("  dam - Damage Control"); 
4473   2385 26 80 65      mov b, __s56 ; "  dam - Damage Control"
4474   2388 FD AB         swp b
4475   238A D8            push b
4476   238B 07 31 13      call puts
4477   238E 51 02 00      add sp, 2
4478   2391             ;; puts("  com - Library Computer"); 
4479   2391 26 97 65      mov b, __s57 ; "  com - Library Computer"
4480   2394 FD AB         swp b
4481   2396 D8            push b
4482   2397 07 31 13      call puts
4483   239A 51 02 00      add sp, 2
4484   239D             ;; puts("  xxx - Resign Command\n"); 
4485   239D 26 B0 65      mov b, __s58 ; "  xxx - Resign Command\n"
4486   23A0 FD AB         swp b
4487   23A2 D8            push b
4488   23A3 07 31 13      call puts
4489   23A6 51 02 00      add sp, 2
4490   23A9             _if71_exit:
4491   23A9             _if70_exit:
4492   23A9             _if69_exit:
4493   23A9             _if68_exit:
4494   23A9             _if67_exit:
4495   23A9             _if66_exit:
4496   23A9             _if65_exit:
4497   23A9             _if64_exit:
4498   23A9             _if63_exit:
4499   23A9 0A 2B 21      jmp _while61_cond
4500   23AC             _while61_exit:
4501   23AC F9            leave
4502   23AD 09            ret
4503   23AE             
4504   23AE             initialize:
4505   23AE F8 00 00      enter 0 ; (push bp; mov bp, sp)
4506   23B1             ; $i 
4507   23B1             ; $j 
4508   23B1             ; $yp 
4509   23B1             ; $xp 
4510   23B1             ; $r 
4511   23B1 52 07 00      sub sp, 7
4512   23B4             ;; time_start = FROM_FIXED(stardate); 
4513   23B4 3B F2 60      mov d, _time_start ; $time_start
4514   23B7 DA            push d
4515   23B8 3B 0E 61      mov d, _stardate ; $stardate
4516   23BB 2A            mov b, [d]
4517   23BC FD AB         swp b
4518   23BE D8            push b
4519   23BF 07 E8 1C      call FROM_FIXED
4520   23C2 51 02 00      add sp, 2
4521   23C5 E7            pop d
4522   23C6 FD 43         mov [d], b
4523   23C8             ;; time_up = 25 + get_rand(10); 
4524   23C8 3B F4 60      mov d, _time_up ; $time_up
4525   23CB DA            push d
4526   23CC 26 19 00      mov b, $19
4527   23CF             ; START TERMS
4528   23CF D7            push a
4529   23D0 11            mov a, b
4530   23D1 26 0A 00      mov b, $a
4531   23D4 FD AB         swp b
4532   23D6 D8            push b
4533   23D7 07 1C 1D      call get_rand
4534   23DA 51 02 00      add sp, 2
4535   23DD 56            add b, a
4536   23DE E4            pop a
4537   23DF             ; END TERMS
4538   23DF E7            pop d
4539   23E0 FD 43         mov [d], b
4540   23E2             ;; docked = 0; 
4541   23E2 3B 33 60      mov d, _docked ; $docked
4542   23E5 DA            push d
4543   23E6 26 00 00      mov b, $0
4544   23E9 E7            pop d
4545   23EA FD 3E         mov [d], bl
4546   23EC             ;; energy = energy0; 
4547   23EC 3B 34 60      mov d, _energy ; $energy
4548   23EF DA            push d
4549   23F0 3B 36 60      mov d, _energy0 ; $energy0
4550   23F3 2A            mov b, [d]
4551   23F4 E7            pop d
4552   23F5 FD 43         mov [d], b
4553   23F7             ;; torps = torps0; 
4554   23F7 3B E9 60      mov d, _torps ; $torps
4555   23FA DA            push d
4556   23FB 3B EA 60      mov d, _torps0 ; $torps0
4557   23FE 32            mov bl, [d]
4558   23FF A7 00         mov bh, 0
4559   2401 E7            pop d
4560   2402 FD 3E         mov [d], bl
4561   2404             ;; shield = 0; 
4562   2404 3B EF 60      mov d, _shield ; $shield
4563   2407 DA            push d
4564   2408 26 00 00      mov b, $0
4565   240B E7            pop d
4566   240C FD 43         mov [d], b
4567   240E             ;; quad_y = rand8(); 
4568   240E 3B EB 60      mov d, _quad_y ; $quad_y
4569   2411 DA            push d
4570   2412 07 6B 1D      call rand8
4571   2415 E7            pop d
4572   2416 FD 43         mov [d], b
4573   2418             ;; quad_x = rand8(); 
4574   2418 3B ED 60      mov d, _quad_x ; $quad_x
4575   241B DA            push d
4576   241C 07 6B 1D      call rand8
4577   241F E7            pop d
4578   2420 FD 43         mov [d], b
4579   2422             ;; ship_y = TO_FIXED00(rand8()); 
4580   2422 3B 0A 61      mov d, _ship_y ; $ship_y
4581   2425 DA            push d
4582   2426 07 6B 1D      call rand8
4583   2429 FD AB         swp b
4584   242B D8            push b
4585   242C 07 F9 1C      call TO_FIXED00
4586   242F 51 02 00      add sp, 2
4587   2432 E7            pop d
4588   2433 FD 43         mov [d], b
4589   2435             ;; ship_x = TO_FIXED00(rand8()); 
4590   2435 3B 0C 61      mov d, _ship_x ; $ship_x
4591   2438 DA            push d
4592   2439 07 6B 1D      call rand8
4593   243C FD AB         swp b
4594   243E D8            push b
4595   243F 07 F9 1C      call TO_FIXED00
4596   2442 51 02 00      add sp, 2
4597   2445 E7            pop d
4598   2446 FD 43         mov [d], b
4599   2448             ;; for (i = 1; i <= 8; i++) 
4600   2448             _for72_init:
4601   2448 FA FF FF      lea d, [bp + -1] ; $i
4602   244B DA            push d
4603   244C 26 01 00      mov b, $1
4604   244F E7            pop d
4605   2450 FD 43         mov [d], b
4606   2452             _for72_cond:
4607   2452 FA FF FF      lea d, [bp + -1] ; $i
4608   2455 2A            mov b, [d]
4609   2456             ; START RELATIONAL
4610   2456 D7            push a
4611   2457 11            mov a, b
4612   2458 26 08 00      mov b, $8
4613   245B B0            cmp a, b
4614   245C FD 73         slt ; <= (signed)
4615   245E E4            pop a
4616   245F             ; END RELATIONAL
4617   245F C0 00 00      cmp b, 0
4618   2462 C6 8B 24      je _for72_exit
4619   2465             _for72_block:
4620   2465             ;; damage[i] = 0; 
4621   2465 3B F6 60      mov d, _damage_data ; $damage
4622   2468 D7            push a
4623   2469 DA            push d
4624   246A FA FF FF      lea d, [bp + -1] ; $i
4625   246D 2A            mov b, [d]
4626   246E E7            pop d
4627   246F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4628   2473 E4            pop a
4629   2474 DA            push d
4630   2475 26 00 00      mov b, $0
4631   2478 E7            pop d
4632   2479 FD 43         mov [d], b
4633   247B             _for72_update:
4634   247B FA FF FF      lea d, [bp + -1] ; $i
4635   247E 2A            mov b, [d]
4636   247F D8            push b
4637   2480 FD 77         inc b
4638   2482 FA FF FF      lea d, [bp + -1] ; $i
4639   2485 FD 43         mov [d], b
4640   2487 E5            pop b
4641   2488 0A 52 24      jmp _for72_cond
4642   248B             _for72_exit:
4643   248B             ;; for (i = 1; i <= 8; i++) { 
4644   248B             _for73_init:
4645   248B FA FF FF      lea d, [bp + -1] ; $i
4646   248E DA            push d
4647   248F 26 01 00      mov b, $1
4648   2492 E7            pop d
4649   2493 FD 43         mov [d], b
4650   2495             _for73_cond:
4651   2495 FA FF FF      lea d, [bp + -1] ; $i
4652   2498 2A            mov b, [d]
4653   2499             ; START RELATIONAL
4654   2499 D7            push a
4655   249A 11            mov a, b
4656   249B 26 08 00      mov b, $8
4657   249E B0            cmp a, b
4658   249F FD 73         slt ; <= (signed)
4659   24A1 E4            pop a
4660   24A2             ; END RELATIONAL
4661   24A2 C0 00 00      cmp b, 0
4662   24A5 C6 0E 26      je _for73_exit
4663   24A8             _for73_block:
4664   24A8             ;; for (j = 1; j <= 8; j++) { 
4665   24A8             _for74_init:
4666   24A8 FA FD FF      lea d, [bp + -3] ; $j
4667   24AB DA            push d
4668   24AC 26 01 00      mov b, $1
4669   24AF E7            pop d
4670   24B0 FD 43         mov [d], b
4671   24B2             _for74_cond:
4672   24B2 FA FD FF      lea d, [bp + -3] ; $j
4673   24B5 2A            mov b, [d]
4674   24B6             ; START RELATIONAL
4675   24B6 D7            push a
4676   24B7 11            mov a, b
4677   24B8 26 08 00      mov b, $8
4678   24BB B0            cmp a, b
4679   24BC FD 73         slt ; <= (signed)
4680   24BE E4            pop a
4681   24BF             ; END RELATIONAL
4682   24BF C0 00 00      cmp b, 0
4683   24C2 C6 FE 25      je _for74_exit
4684   24C5             _for74_block:
4685   24C5             ;; r = get_rand(100); 
4686   24C5 FA FA FF      lea d, [bp + -6] ; $r
4687   24C8 DA            push d
4688   24C9 26 64 00      mov b, $64
4689   24CC FD AB         swp b
4690   24CE D8            push b
4691   24CF 07 1C 1D      call get_rand
4692   24D2 51 02 00      add sp, 2
4693   24D5 E7            pop d
4694   24D6 FD 3E         mov [d], bl
4695   24D8             ;; klingons = 0; 
4696   24D8 3B E6 60      mov d, _klingons ; $klingons
4697   24DB DA            push d
4698   24DC 26 00 00      mov b, $0
4699   24DF E7            pop d
4700   24E0 FD 3E         mov [d], bl
4701   24E2             ;; if (r > 98) 
4702   24E2             _if75_cond:
4703   24E2 FA FA FF      lea d, [bp + -6] ; $r
4704   24E5 32            mov bl, [d]
4705   24E6 A7 00         mov bh, 0
4706   24E8             ; START RELATIONAL
4707   24E8 D7            push a
4708   24E9 11            mov a, b
4709   24EA 26 62 00      mov b, $62
4710   24ED B0            cmp a, b
4711   24EE FD 81         sgu ; > (unsigned)
4712   24F0 E4            pop a
4713   24F1             ; END RELATIONAL
4714   24F1 C0 00 00      cmp b, 0
4715   24F4 C6 04 25      je _if75_else
4716   24F7             _if75_true:
4717   24F7             ;; klingons = 3; 
4718   24F7 3B E6 60      mov d, _klingons ; $klingons
4719   24FA DA            push d
4720   24FB 26 03 00      mov b, $3
4721   24FE E7            pop d
4722   24FF FD 3E         mov [d], bl
4723   2501 0A 48 25      jmp _if75_exit
4724   2504             _if75_else:
4725   2504             ;; if (r > 95) 
4726   2504             _if76_cond:
4727   2504 FA FA FF      lea d, [bp + -6] ; $r
4728   2507 32            mov bl, [d]
4729   2508 A7 00         mov bh, 0
4730   250A             ; START RELATIONAL
4731   250A D7            push a
4732   250B 11            mov a, b
4733   250C 26 5F 00      mov b, $5f
4734   250F B0            cmp a, b
4735   2510 FD 81         sgu ; > (unsigned)
4736   2512 E4            pop a
4737   2513             ; END RELATIONAL
4738   2513 C0 00 00      cmp b, 0
4739   2516 C6 26 25      je _if76_else
4740   2519             _if76_true:
4741   2519             ;; klingons = 2; 
4742   2519 3B E6 60      mov d, _klingons ; $klingons
4743   251C DA            push d
4744   251D 26 02 00      mov b, $2
4745   2520 E7            pop d
4746   2521 FD 3E         mov [d], bl
4747   2523 0A 48 25      jmp _if76_exit
4748   2526             _if76_else:
4749   2526             ;; if (r > 80) 
4750   2526             _if77_cond:
4751   2526 FA FA FF      lea d, [bp + -6] ; $r
4752   2529 32            mov bl, [d]
4753   252A A7 00         mov bh, 0
4754   252C             ; START RELATIONAL
4755   252C D7            push a
4756   252D 11            mov a, b
4757   252E 26 50 00      mov b, $50
4758   2531 B0            cmp a, b
4759   2532 FD 81         sgu ; > (unsigned)
4760   2534 E4            pop a
4761   2535             ; END RELATIONAL
4762   2535 C0 00 00      cmp b, 0
4763   2538 C6 48 25      je _if77_exit
4764   253B             _if77_true:
4765   253B             ;; klingons = 1; 
4766   253B 3B E6 60      mov d, _klingons ; $klingons
4767   253E DA            push d
4768   253F 26 01 00      mov b, $1
4769   2542 E7            pop d
4770   2543 FD 3E         mov [d], bl
4771   2545 0A 48 25      jmp _if77_exit
4772   2548             _if77_exit:
4773   2548             _if76_exit:
4774   2548             _if75_exit:
4775   2548             ;; klingons_left = klingons_left + klingons; 
4776   2548 3B E8 60      mov d, _klingons_left ; $klingons_left
4777   254B DA            push d
4778   254C 3B E8 60      mov d, _klingons_left ; $klingons_left
4779   254F 32            mov bl, [d]
4780   2550 A7 00         mov bh, 0
4781   2552             ; START TERMS
4782   2552 D7            push a
4783   2553 11            mov a, b
4784   2554 3B E6 60      mov d, _klingons ; $klingons
4785   2557 32            mov bl, [d]
4786   2558 A7 00         mov bh, 0
4787   255A 56            add b, a
4788   255B E4            pop a
4789   255C             ; END TERMS
4790   255C E7            pop d
4791   255D FD 3E         mov [d], bl
4792   255F             ;; starbases = 0; 
4793   255F 3B 10 60      mov d, _starbases ; $starbases
4794   2562 DA            push d
4795   2563 26 00 00      mov b, $0
4796   2566 E7            pop d
4797   2567 FD 3E         mov [d], bl
4798   2569             ;; if (get_rand(100) > 96) 
4799   2569             _if78_cond:
4800   2569 26 64 00      mov b, $64
4801   256C FD AB         swp b
4802   256E D8            push b
4803   256F 07 1C 1D      call get_rand
4804   2572 51 02 00      add sp, 2
4805   2575             ; START RELATIONAL
4806   2575 D7            push a
4807   2576 11            mov a, b
4808   2577 26 60 00      mov b, $60
4809   257A B0            cmp a, b
4810   257B FD 7F         sgt ; >
4811   257D E4            pop a
4812   257E             ; END RELATIONAL
4813   257E C0 00 00      cmp b, 0
4814   2581 C6 91 25      je _if78_exit
4815   2584             _if78_true:
4816   2584             ;; starbases = 1; 
4817   2584 3B 10 60      mov d, _starbases ; $starbases
4818   2587 DA            push d
4819   2588 26 01 00      mov b, $1
4820   258B E7            pop d
4821   258C FD 3E         mov [d], bl
4822   258E 0A 91 25      jmp _if78_exit
4823   2591             _if78_exit:
4824   2591             ;; starbases_left = starbases_left + starbases; 
4825   2591 3B 13 60      mov d, _starbases_left ; $starbases_left
4826   2594 DA            push d
4827   2595 3B 13 60      mov d, _starbases_left ; $starbases_left
4828   2598 32            mov bl, [d]
4829   2599 A7 00         mov bh, 0
4830   259B             ; START TERMS
4831   259B D7            push a
4832   259C 11            mov a, b
4833   259D 3B 10 60      mov d, _starbases ; $starbases
4834   25A0 32            mov bl, [d]
4835   25A1 A7 00         mov bh, 0
4836   25A3 56            add b, a
4837   25A4 E4            pop a
4838   25A5             ; END TERMS
4839   25A5 E7            pop d
4840   25A6 FD 3E         mov [d], bl
4841   25A8             ;; map[i][j] = (klingons << 8) + (starbases << 4) + rand8(); 
4842   25A8 3B 38 60      mov d, _map_data ; $map
4843   25AB D7            push a
4844   25AC DA            push d
4845   25AD FA FF FF      lea d, [bp + -1] ; $i
4846   25B0 2A            mov b, [d]
4847   25B1 E7            pop d
4848   25B2 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
4849   25B6 DA            push d
4850   25B7 FA FD FF      lea d, [bp + -3] ; $j
4851   25BA 2A            mov b, [d]
4852   25BB E7            pop d
4853   25BC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4854   25C0 E4            pop a
4855   25C1 DA            push d
4856   25C2 3B E6 60      mov d, _klingons ; $klingons
4857   25C5 32            mov bl, [d]
4858   25C6 A7 00         mov bh, 0
4859   25C8             ; START SHIFT
4860   25C8 D7            push a
4861   25C9 11            mov a, b
4862   25CA 26 08 00      mov b, $8
4863   25CD FD 39         mov c, b
4864   25CF 9D            shl a, cl
4865   25D0 27            mov b, a
4866   25D1 E4            pop a
4867   25D2             ; END SHIFT
4868   25D2             ; START TERMS
4869   25D2 D7            push a
4870   25D3 11            mov a, b
4871   25D4 3B 10 60      mov d, _starbases ; $starbases
4872   25D7 32            mov bl, [d]
4873   25D8 A7 00         mov bh, 0
4874   25DA             ; START SHIFT
4875   25DA D7            push a
4876   25DB 11            mov a, b
4877   25DC 26 04 00      mov b, $4
4878   25DF FD 39         mov c, b
4879   25E1 9D            shl a, cl
4880   25E2 27            mov b, a
4881   25E3 E4            pop a
4882   25E4             ; END SHIFT
4883   25E4 56            add b, a
4884   25E5 11            mov a, b
4885   25E6 07 6B 1D      call rand8
4886   25E9 56            add b, a
4887   25EA E4            pop a
4888   25EB             ; END TERMS
4889   25EB E7            pop d
4890   25EC FD 43         mov [d], b
4891   25EE             _for74_update:
4892   25EE FA FD FF      lea d, [bp + -3] ; $j
4893   25F1 2A            mov b, [d]
4894   25F2 D8            push b
4895   25F3 FD 77         inc b
4896   25F5 FA FD FF      lea d, [bp + -3] ; $j
4897   25F8 FD 43         mov [d], b
4898   25FA E5            pop b
4899   25FB 0A B2 24      jmp _for74_cond
4900   25FE             _for74_exit:
4901   25FE             _for73_update:
4902   25FE FA FF FF      lea d, [bp + -1] ; $i
4903   2601 2A            mov b, [d]
4904   2602 D8            push b
4905   2603 FD 77         inc b
4906   2605 FA FF FF      lea d, [bp + -1] ; $i
4907   2608 FD 43         mov [d], b
4908   260A E5            pop b
4909   260B 0A 95 24      jmp _for73_cond
4910   260E             _for73_exit:
4911   260E             ;; if (klingons_left > time_up) 
4912   260E             _if79_cond:
4913   260E 3B E8 60      mov d, _klingons_left ; $klingons_left
4914   2611 32            mov bl, [d]
4915   2612 A7 00         mov bh, 0
4916   2614             ; START RELATIONAL
4917   2614 D7            push a
4918   2615 11            mov a, b
4919   2616 3B F4 60      mov d, _time_up ; $time_up
4920   2619 2A            mov b, [d]
4921   261A B0            cmp a, b
4922   261B FD 81         sgu ; > (unsigned)
4923   261D E4            pop a
4924   261E             ; END RELATIONAL
4925   261E C0 00 00      cmp b, 0
4926   2621 C6 3B 26      je _if79_exit
4927   2624             _if79_true:
4928   2624             ;; time_up = klingons_left + 1; 
4929   2624 3B F4 60      mov d, _time_up ; $time_up
4930   2627 DA            push d
4931   2628 3B E8 60      mov d, _klingons_left ; $klingons_left
4932   262B 32            mov bl, [d]
4933   262C A7 00         mov bh, 0
4934   262E             ; START TERMS
4935   262E D7            push a
4936   262F 11            mov a, b
4937   2630 26 01 00      mov b, $1
4938   2633 56            add b, a
4939   2634 E4            pop a
4940   2635             ; END TERMS
4941   2635 E7            pop d
4942   2636 FD 43         mov [d], b
4943   2638 0A 3B 26      jmp _if79_exit
4944   263B             _if79_exit:
4945   263B             ;; if (starbases_left == 0) { 
4946   263B             _if80_cond:
4947   263B 3B 13 60      mov d, _starbases_left ; $starbases_left
4948   263E 32            mov bl, [d]
4949   263F A7 00         mov bh, 0
4950   2641             ; START RELATIONAL
4951   2641 D7            push a
4952   2642 11            mov a, b
4953   2643 26 00 00      mov b, $0
4954   2646 B0            cmp a, b
4955   2647 FD 71         seq ; ==
4956   2649 E4            pop a
4957   264A             ; END RELATIONAL
4958   264A C0 00 00      cmp b, 0
4959   264D C6 55 27      je _if80_exit
4960   2650             _if80_true:
4961   2650             ;; yp = rand8(); 
4962   2650 FA FC FF      lea d, [bp + -4] ; $yp
4963   2653 DA            push d
4964   2654 07 6B 1D      call rand8
4965   2657 E7            pop d
4966   2658 FD 3E         mov [d], bl
4967   265A             ;; xp = rand8(); 
4968   265A FA FB FF      lea d, [bp + -5] ; $xp
4969   265D DA            push d
4970   265E 07 6B 1D      call rand8
4971   2661 E7            pop d
4972   2662 FD 3E         mov [d], bl
4973   2664             ;; if (map[yp][xp] < 0x200) { 
4974   2664             _if81_cond:
4975   2664 3B 38 60      mov d, _map_data ; $map
4976   2667 D7            push a
4977   2668 DA            push d
4978   2669 FA FC FF      lea d, [bp + -4] ; $yp
4979   266C 32            mov bl, [d]
4980   266D A7 00         mov bh, 0
4981   266F E7            pop d
4982   2670 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
4983   2674 DA            push d
4984   2675 FA FB FF      lea d, [bp + -5] ; $xp
4985   2678 32            mov bl, [d]
4986   2679 A7 00         mov bh, 0
4987   267B E7            pop d
4988   267C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4989   2680 E4            pop a
4990   2681 2A            mov b, [d]
4991   2682             ; START RELATIONAL
4992   2682 D7            push a
4993   2683 11            mov a, b
4994   2684 26 00 02      mov b, $200
4995   2687 B0            cmp a, b
4996   2688 FD 75         slu ; < (unsigned)
4997   268A E4            pop a
4998   268B             ; END RELATIONAL
4999   268B C0 00 00      cmp b, 0
5000   268E C6 F3 26      je _if81_exit
5001   2691             _if81_true:
5002   2691             ;; map[yp][xp] = map[yp][xp] + (1 << 8); 
5003   2691 3B 38 60      mov d, _map_data ; $map
5004   2694 D7            push a
5005   2695 DA            push d
5006   2696 FA FC FF      lea d, [bp + -4] ; $yp
5007   2699 32            mov bl, [d]
5008   269A A7 00         mov bh, 0
5009   269C E7            pop d
5010   269D FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5011   26A1 DA            push d
5012   26A2 FA FB FF      lea d, [bp + -5] ; $xp
5013   26A5 32            mov bl, [d]
5014   26A6 A7 00         mov bh, 0
5015   26A8 E7            pop d
5016   26A9 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5017   26AD E4            pop a
5018   26AE DA            push d
5019   26AF 3B 38 60      mov d, _map_data ; $map
5020   26B2 D7            push a
5021   26B3 DA            push d
5022   26B4 FA FC FF      lea d, [bp + -4] ; $yp
5023   26B7 32            mov bl, [d]
5024   26B8 A7 00         mov bh, 0
5025   26BA E7            pop d
5026   26BB FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5027   26BF DA            push d
5028   26C0 FA FB FF      lea d, [bp + -5] ; $xp
5029   26C3 32            mov bl, [d]
5030   26C4 A7 00         mov bh, 0
5031   26C6 E7            pop d
5032   26C7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5033   26CB E4            pop a
5034   26CC 2A            mov b, [d]
5035   26CD             ; START TERMS
5036   26CD D7            push a
5037   26CE 11            mov a, b
5038   26CF 26 01 00      mov b, $1
5039   26D2             ; START SHIFT
5040   26D2 D7            push a
5041   26D3 11            mov a, b
5042   26D4 26 08 00      mov b, $8
5043   26D7 FD 39         mov c, b
5044   26D9 9D            shl a, cl
5045   26DA 27            mov b, a
5046   26DB E4            pop a
5047   26DC             ; END SHIFT
5048   26DC 56            add b, a
5049   26DD E4            pop a
5050   26DE             ; END TERMS
5051   26DE E7            pop d
5052   26DF FD 43         mov [d], b
5053   26E1             ;; klingons_left++; 
5054   26E1 3B E8 60      mov d, _klingons_left ; $klingons_left
5055   26E4 32            mov bl, [d]
5056   26E5 A7 00         mov bh, 0
5057   26E7 D8            push b
5058   26E8 FD 77         inc b
5059   26EA 3B E8 60      mov d, _klingons_left ; $klingons_left
5060   26ED FD 43         mov [d], b
5061   26EF E5            pop b
5062   26F0 0A F3 26      jmp _if81_exit
5063   26F3             _if81_exit:
5064   26F3             ;; map[yp][xp] = map[yp][xp] + (1 << 4); 
5065   26F3 3B 38 60      mov d, _map_data ; $map
5066   26F6 D7            push a
5067   26F7 DA            push d
5068   26F8 FA FC FF      lea d, [bp + -4] ; $yp
5069   26FB 32            mov bl, [d]
5070   26FC A7 00         mov bh, 0
5071   26FE E7            pop d
5072   26FF FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5073   2703 DA            push d
5074   2704 FA FB FF      lea d, [bp + -5] ; $xp
5075   2707 32            mov bl, [d]
5076   2708 A7 00         mov bh, 0
5077   270A E7            pop d
5078   270B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5079   270F E4            pop a
5080   2710 DA            push d
5081   2711 3B 38 60      mov d, _map_data ; $map
5082   2714 D7            push a
5083   2715 DA            push d
5084   2716 FA FC FF      lea d, [bp + -4] ; $yp
5085   2719 32            mov bl, [d]
5086   271A A7 00         mov bh, 0
5087   271C E7            pop d
5088   271D FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5089   2721 DA            push d
5090   2722 FA FB FF      lea d, [bp + -5] ; $xp
5091   2725 32            mov bl, [d]
5092   2726 A7 00         mov bh, 0
5093   2728 E7            pop d
5094   2729 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5095   272D E4            pop a
5096   272E 2A            mov b, [d]
5097   272F             ; START TERMS
5098   272F D7            push a
5099   2730 11            mov a, b
5100   2731 26 01 00      mov b, $1
5101   2734             ; START SHIFT
5102   2734 D7            push a
5103   2735 11            mov a, b
5104   2736 26 04 00      mov b, $4
5105   2739 FD 39         mov c, b
5106   273B 9D            shl a, cl
5107   273C 27            mov b, a
5108   273D E4            pop a
5109   273E             ; END SHIFT
5110   273E 56            add b, a
5111   273F E4            pop a
5112   2740             ; END TERMS
5113   2740 E7            pop d
5114   2741 FD 43         mov [d], b
5115   2743             ;; starbases_left++; 
5116   2743 3B 13 60      mov d, _starbases_left ; $starbases_left
5117   2746 32            mov bl, [d]
5118   2747 A7 00         mov bh, 0
5119   2749 D8            push b
5120   274A FD 77         inc b
5121   274C 3B 13 60      mov d, _starbases_left ; $starbases_left
5122   274F FD 43         mov [d], b
5123   2751 E5            pop b
5124   2752 0A 55 27      jmp _if80_exit
5125   2755             _if80_exit:
5126   2755             ;; total_klingons = klingons_left; 
5127   2755 3B E7 60      mov d, _total_klingons ; $total_klingons
5128   2758 DA            push d
5129   2759 3B E8 60      mov d, _klingons_left ; $klingons_left
5130   275C 32            mov bl, [d]
5131   275D A7 00         mov bh, 0
5132   275F E7            pop d
5133   2760 FD 3E         mov [d], bl
5134   2762             ;; if (starbases_left != 1) { 
5135   2762             _if82_cond:
5136   2762 3B 13 60      mov d, _starbases_left ; $starbases_left
5137   2765 32            mov bl, [d]
5138   2766 A7 00         mov bh, 0
5139   2768             ; START RELATIONAL
5140   2768 D7            push a
5141   2769 11            mov a, b
5142   276A 26 01 00      mov b, $1
5143   276D B0            cmp a, b
5144   276E FD 72         sneq ; !=
5145   2770 E4            pop a
5146   2771             ; END RELATIONAL
5147   2771 C0 00 00      cmp b, 0
5148   2774 C6 A0 27      je _if82_exit
5149   2777             _if82_true:
5150   2777             ;; strcpy(plural_2, "s"); 
5151   2777 26 C8 65      mov b, __s59 ; "s"
5152   277A FD AB         swp b
5153   277C D8            push b
5154   277D 3B 07 62      mov d, _plural_2_data ; $plural_2
5155   2780 2D            mov b, d
5156   2781 FD AB         swp b
5157   2783 D8            push b
5158   2784 07 14 04      call strcpy
5159   2787 51 04 00      add sp, 4
5160   278A             ;; strcpy(plural, "are"); 
5161   278A 26 55 64      mov b, __s32 ; "are"
5162   278D FD AB         swp b
5163   278F D8            push b
5164   2790 3B 09 62      mov d, _plural_data ; $plural
5165   2793 2D            mov b, d
5166   2794 FD AB         swp b
5167   2796 D8            push b
5168   2797 07 14 04      call strcpy
5169   279A 51 04 00      add sp, 4
5170   279D 0A A0 27      jmp _if82_exit
5171   27A0             _if82_exit:
5172   27A0             ;; getchar(); 
5173   27A0 07 08 13      call getchar
5174   27A3 F9            leave
5175   27A4 09            ret
5176   27A5             
5177   27A5             place_ship:
5178   27A5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5179   27A8             ;; quad[FROM_FIXED00(ship_y) - 1][FROM_FIXED00(ship_x) - 1] =  		4     ; 
5180   27A8 3B 10 61      mov d, _quad_data ; $quad
5181   27AB D7            push a
5182   27AC DA            push d
5183   27AD 3B 0A 61      mov d, _ship_y ; $ship_y
5184   27B0 2A            mov b, [d]
5185   27B1 FD AB         swp b
5186   27B3 D8            push b
5187   27B4 07 0B 1D      call FROM_FIXED00
5188   27B7 51 02 00      add sp, 2
5189   27BA             ; START TERMS
5190   27BA D7            push a
5191   27BB 11            mov a, b
5192   27BC 26 01 00      mov b, $1
5193   27BF 60            sub a, b
5194   27C0 27            mov b, a
5195   27C1 E4            pop a
5196   27C2             ; END TERMS
5197   27C2 E7            pop d
5198   27C3 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
5199   27C7 DA            push d
5200   27C8 3B 0C 61      mov d, _ship_x ; $ship_x
5201   27CB 2A            mov b, [d]
5202   27CC FD AB         swp b
5203   27CE D8            push b
5204   27CF 07 0B 1D      call FROM_FIXED00
5205   27D2 51 02 00      add sp, 2
5206   27D5             ; START TERMS
5207   27D5 D7            push a
5208   27D6 11            mov a, b
5209   27D7 26 01 00      mov b, $1
5210   27DA 60            sub a, b
5211   27DB 27            mov b, a
5212   27DC E4            pop a
5213   27DD             ; END TERMS
5214   27DD E7            pop d
5215   27DE 5A            add d, b
5216   27DF E4            pop a
5217   27E0 DA            push d
5218   27E1 26 04 00      mov b, $4
5219   27E4 E7            pop d
5220   27E5 FD 3E         mov [d], bl
5221   27E7 F9            leave
5222   27E8 09            ret
5223   27E9             
5224   27E9             new_quadrant:
5225   27E9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5226   27EC             ; $i 
5227   27EC             ; $tmp 
5228   27EC             ; $k 
5229   27EC 52 06 00      sub sp, 6
5230   27EF             ;; k = &kdata; 
5231   27EF FA FB FF      lea d, [bp + -5] ; $k
5232   27F2 DA            push d
5233   27F3 3B DA 60      mov d, _kdata_data ; $kdata
5234   27F6 2D            mov b, d
5235   27F7 E7            pop d
5236   27F8 FD 43         mov [d], b
5237   27FA             ;; klingons = 0; 
5238   27FA 3B E6 60      mov d, _klingons ; $klingons
5239   27FD DA            push d
5240   27FE 26 00 00      mov b, $0
5241   2801 E7            pop d
5242   2802 FD 3E         mov [d], bl
5243   2804             ;; starbases = 0; 
5244   2804 3B 10 60      mov d, _starbases ; $starbases
5245   2807 DA            push d
5246   2808 26 00 00      mov b, $0
5247   280B E7            pop d
5248   280C FD 3E         mov [d], bl
5249   280E             ;; stars = 0; 
5250   280E 3B F1 60      mov d, _stars ; $stars
5251   2811 DA            push d
5252   2812 26 00 00      mov b, $0
5253   2815 E7            pop d
5254   2816 FD 3E         mov [d], bl
5255   2818             ;; d4 = get_rand(50) - 1; 
5256   2818 3B 08 61      mov d, _d4 ; $d4
5257   281B DA            push d
5258   281C 26 32 00      mov b, $32
5259   281F FD AB         swp b
5260   2821 D8            push b
5261   2822 07 1C 1D      call get_rand
5262   2825 51 02 00      add sp, 2
5263   2828             ; START TERMS
5264   2828 D7            push a
5265   2829 11            mov a, b
5266   282A 26 01 00      mov b, $1
5267   282D 60            sub a, b
5268   282E 27            mov b, a
5269   282F E4            pop a
5270   2830             ; END TERMS
5271   2830 E7            pop d
5272   2831 FD 43         mov [d], b
5273   2833             ;; map[quad_y][quad_x] = map[quad_y][quad_x] |   0x1000		/* Set if this sector was mapped */          ; 
5274   2833 3B 38 60      mov d, _map_data ; $map
5275   2836 D7            push a
5276   2837 DA            push d
5277   2838 3B EB 60      mov d, _quad_y ; $quad_y
5278   283B 2A            mov b, [d]
5279   283C E7            pop d
5280   283D FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5281   2841 DA            push d
5282   2842 3B ED 60      mov d, _quad_x ; $quad_x
5283   2845 2A            mov b, [d]
5284   2846 E7            pop d
5285   2847 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5286   284B E4            pop a
5287   284C DA            push d
5288   284D 3B 38 60      mov d, _map_data ; $map
5289   2850 D7            push a
5290   2851 DA            push d
5291   2852 3B EB 60      mov d, _quad_y ; $quad_y
5292   2855 2A            mov b, [d]
5293   2856 E7            pop d
5294   2857 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5295   285B DA            push d
5296   285C 3B ED 60      mov d, _quad_x ; $quad_x
5297   285F 2A            mov b, [d]
5298   2860 E7            pop d
5299   2861 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5300   2865 E4            pop a
5301   2866 2A            mov b, [d]
5302   2867 D7            push a
5303   2868 11            mov a, b
5304   2869 26 00 10      mov b, $1000
5305   286C FD 70         or b, a ; |
5306   286E E4            pop a
5307   286F E7            pop d
5308   2870 FD 43         mov [d], b
5309   2872             ;; if (quad_y >= 1 && quad_y <= 8 && quad_x >= 1 && quad_x <= 8) { 
5310   2872             _if83_cond:
5311   2872 3B EB 60      mov d, _quad_y ; $quad_y
5312   2875 2A            mov b, [d]
5313   2876             ; START RELATIONAL
5314   2876 D7            push a
5315   2877 11            mov a, b
5316   2878 26 01 00      mov b, $1
5317   287B B0            cmp a, b
5318   287C FD 80         sge ; >=
5319   287E E4            pop a
5320   287F             ; END RELATIONAL
5321   287F D7            push a
5322   2880 11            mov a, b
5323   2881 3B EB 60      mov d, _quad_y ; $quad_y
5324   2884 2A            mov b, [d]
5325   2885             ; START RELATIONAL
5326   2885 D7            push a
5327   2886 11            mov a, b
5328   2887 26 08 00      mov b, $8
5329   288A B0            cmp a, b
5330   288B FD 73         slt ; <= (signed)
5331   288D E4            pop a
5332   288E             ; END RELATIONAL
5333   288E FD A7         sand a, b
5334   2890 11            mov a, b
5335   2891 3B ED 60      mov d, _quad_x ; $quad_x
5336   2894 2A            mov b, [d]
5337   2895             ; START RELATIONAL
5338   2895 D7            push a
5339   2896 11            mov a, b
5340   2897 26 01 00      mov b, $1
5341   289A B0            cmp a, b
5342   289B FD 80         sge ; >=
5343   289D E4            pop a
5344   289E             ; END RELATIONAL
5345   289E FD A7         sand a, b
5346   28A0 11            mov a, b
5347   28A1 3B ED 60      mov d, _quad_x ; $quad_x
5348   28A4 2A            mov b, [d]
5349   28A5             ; START RELATIONAL
5350   28A5 D7            push a
5351   28A6 11            mov a, b
5352   28A7 26 08 00      mov b, $8
5353   28AA B0            cmp a, b
5354   28AB FD 73         slt ; <= (signed)
5355   28AD E4            pop a
5356   28AE             ; END RELATIONAL
5357   28AE FD A7         sand a, b
5358   28B0 E4            pop a
5359   28B1 C0 00 00      cmp b, 0
5360   28B4 C6 20 29      je _if83_exit
5361   28B7             _if83_true:
5362   28B7             ;; quadrant_name(0, quad_y, quad_x); 
5363   28B7 3B ED 60      mov d, _quad_x ; $quad_x
5364   28BA 2A            mov b, [d]
5365   28BB DD            push bl
5366   28BC 3B EB 60      mov d, _quad_y ; $quad_y
5367   28BF 2A            mov b, [d]
5368   28C0 DD            push bl
5369   28C1 26 00 00      mov b, $0
5370   28C4 DD            push bl
5371   28C5 07 00 5D      call quadrant_name
5372   28C8 51 03 00      add sp, 3
5373   28CB             ;; if (TO_FIXED(time_start) != stardate) 
5374   28CB             _if84_cond:
5375   28CB 3B F2 60      mov d, _time_start ; $time_start
5376   28CE 2A            mov b, [d]
5377   28CF FD AB         swp b
5378   28D1 D8            push b
5379   28D2 07 D6 1C      call TO_FIXED
5380   28D5 51 02 00      add sp, 2
5381   28D8             ; START RELATIONAL
5382   28D8 D7            push a
5383   28D9 11            mov a, b
5384   28DA 3B 0E 61      mov d, _stardate ; $stardate
5385   28DD 2A            mov b, [d]
5386   28DE B0            cmp a, b
5387   28DF FD 72         sneq ; !=
5388   28E1 E4            pop a
5389   28E2             ; END RELATIONAL
5390   28E2 C0 00 00      cmp b, 0
5391   28E5 C6 FE 28      je _if84_else
5392   28E8             _if84_true:
5393   28E8             ;; printf("Now entering %s quadrant...\n\n", quadname); 
5394   28E8 3B 50 61      mov d, _quadname_data ; $quadname
5395   28EB 2D            mov b, d
5396   28EC FD AB         swp b
5397   28EE D8            push b
5398   28EF 26 CA 65      mov b, __s60 ; "Now entering %s quadrant...\n\n"
5399   28F2 FD AB         swp b
5400   28F4 D8            push b
5401   28F5 07 D1 05      call printf
5402   28F8 51 04 00      add sp, 4
5403   28FB 0A 1D 29      jmp _if84_exit
5404   28FE             _if84_else:
5405   28FE             ;; puts("\nYour mission begins with your starship located"); 
5406   28FE 26 E8 65      mov b, __s61 ; "\nYour mission begins with your starship located"
5407   2901 FD AB         swp b
5408   2903 D8            push b
5409   2904 07 31 13      call puts
5410   2907 51 02 00      add sp, 2
5411   290A             ;; printf("in the galactic quadrant %s.\n\n", quadname); 
5412   290A 3B 50 61      mov d, _quadname_data ; $quadname
5413   290D 2D            mov b, d
5414   290E FD AB         swp b
5415   2910 D8            push b
5416   2911 26 18 66      mov b, __s62 ; "in the galactic quadrant %s.\n\n"
5417   2914 FD AB         swp b
5418   2916 D8            push b
5419   2917 07 D1 05      call printf
5420   291A 51 04 00      add sp, 4
5421   291D             _if84_exit:
5422   291D 0A 20 29      jmp _if83_exit
5423   2920             _if83_exit:
5424   2920             ;; tmp = map[quad_y][quad_x]; 
5425   2920 FA FD FF      lea d, [bp + -3] ; $tmp
5426   2923 DA            push d
5427   2924 3B 38 60      mov d, _map_data ; $map
5428   2927 D7            push a
5429   2928 DA            push d
5430   2929 3B EB 60      mov d, _quad_y ; $quad_y
5431   292C 2A            mov b, [d]
5432   292D E7            pop d
5433   292E FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5434   2932 DA            push d
5435   2933 3B ED 60      mov d, _quad_x ; $quad_x
5436   2936 2A            mov b, [d]
5437   2937 E7            pop d
5438   2938 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5439   293C E4            pop a
5440   293D 2A            mov b, [d]
5441   293E E7            pop d
5442   293F FD 43         mov [d], b
5443   2941             ;; klingons = (tmp >> 8) & 0x0F; 
5444   2941 3B E6 60      mov d, _klingons ; $klingons
5445   2944 DA            push d
5446   2945 FA FD FF      lea d, [bp + -3] ; $tmp
5447   2948 2A            mov b, [d]
5448   2949             ; START SHIFT
5449   2949 D7            push a
5450   294A 11            mov a, b
5451   294B 26 08 00      mov b, $8
5452   294E FD 39         mov c, b
5453   2950 A1            shr a, cl
5454   2951 27            mov b, a
5455   2952 E4            pop a
5456   2953             ; END SHIFT
5457   2953 D7            push a
5458   2954 11            mov a, b
5459   2955 26 0F 00      mov b, $f
5460   2958 FD 92         and b, a ; &
5461   295A E4            pop a
5462   295B E7            pop d
5463   295C FD 3E         mov [d], bl
5464   295E             ;; starbases = (tmp >> 4) & 0x0F; 
5465   295E 3B 10 60      mov d, _starbases ; $starbases
5466   2961 DA            push d
5467   2962 FA FD FF      lea d, [bp + -3] ; $tmp
5468   2965 2A            mov b, [d]
5469   2966             ; START SHIFT
5470   2966 D7            push a
5471   2967 11            mov a, b
5472   2968 26 04 00      mov b, $4
5473   296B FD 39         mov c, b
5474   296D A1            shr a, cl
5475   296E 27            mov b, a
5476   296F E4            pop a
5477   2970             ; END SHIFT
5478   2970 D7            push a
5479   2971 11            mov a, b
5480   2972 26 0F 00      mov b, $f
5481   2975 FD 92         and b, a ; &
5482   2977 E4            pop a
5483   2978 E7            pop d
5484   2979 FD 3E         mov [d], bl
5485   297B             ;; stars = tmp & 0x0F; 
5486   297B 3B F1 60      mov d, _stars ; $stars
5487   297E DA            push d
5488   297F FA FD FF      lea d, [bp + -3] ; $tmp
5489   2982 2A            mov b, [d]
5490   2983 D7            push a
5491   2984 11            mov a, b
5492   2985 26 0F 00      mov b, $f
5493   2988 FD 92         and b, a ; &
5494   298A E4            pop a
5495   298B E7            pop d
5496   298C FD 3E         mov [d], bl
5497   298E             ;; if (klingons > 0) { 
5498   298E             _if85_cond:
5499   298E 3B E6 60      mov d, _klingons ; $klingons
5500   2991 32            mov bl, [d]
5501   2992 A7 00         mov bh, 0
5502   2994             ; START RELATIONAL
5503   2994 D7            push a
5504   2995 11            mov a, b
5505   2996 26 00 00      mov b, $0
5506   2999 B0            cmp a, b
5507   299A FD 81         sgu ; > (unsigned)
5508   299C E4            pop a
5509   299D             ; END RELATIONAL
5510   299D C0 00 00      cmp b, 0
5511   29A0 C6 D4 29      je _if85_exit
5512   29A3             _if85_true:
5513   29A3             ;; printf("Combat Area  Condition Red\n"); 
5514   29A3 26 37 66      mov b, __s63 ; "Combat Area  Condition Red\n"
5515   29A6 FD AB         swp b
5516   29A8 D8            push b
5517   29A9 07 D1 05      call printf
5518   29AC 51 02 00      add sp, 2
5519   29AF             ;; if (shield < 200) 
5520   29AF             _if86_cond:
5521   29AF 3B EF 60      mov d, _shield ; $shield
5522   29B2 2A            mov b, [d]
5523   29B3             ; START RELATIONAL
5524   29B3 D7            push a
5525   29B4 11            mov a, b
5526   29B5 26 C8 00      mov b, $c8
5527   29B8 B0            cmp a, b
5528   29B9 FD 73         slt ; < (signed)
5529   29BB E4            pop a
5530   29BC             ; END RELATIONAL
5531   29BC C0 00 00      cmp b, 0
5532   29BF C6 D1 29      je _if86_exit
5533   29C2             _if86_true:
5534   29C2             ;; printf("Shields Dangerously Low\n"); 
5535   29C2 26 53 66      mov b, __s64 ; "Shields Dangerously Low\n"
5536   29C5 FD AB         swp b
5537   29C7 D8            push b
5538   29C8 07 D1 05      call printf
5539   29CB 51 02 00      add sp, 2
5540   29CE 0A D1 29      jmp _if86_exit
5541   29D1             _if86_exit:
5542   29D1 0A D4 29      jmp _if85_exit
5543   29D4             _if85_exit:
5544   29D4             ;; for (i = 1; i <= 3; i++) { 
5545   29D4             _for87_init:
5546   29D4 FA FF FF      lea d, [bp + -1] ; $i
5547   29D7 DA            push d
5548   29D8 26 01 00      mov b, $1
5549   29DB E7            pop d
5550   29DC FD 43         mov [d], b
5551   29DE             _for87_cond:
5552   29DE FA FF FF      lea d, [bp + -1] ; $i
5553   29E1 2A            mov b, [d]
5554   29E2             ; START RELATIONAL
5555   29E2 D7            push a
5556   29E3 11            mov a, b
5557   29E4 26 03 00      mov b, $3
5558   29E7 B0            cmp a, b
5559   29E8 FD 73         slt ; <= (signed)
5560   29EA E4            pop a
5561   29EB             ; END RELATIONAL
5562   29EB C0 00 00      cmp b, 0
5563   29EE C6 3D 2A      je _for87_exit
5564   29F1             _for87_block:
5565   29F1             ;; k->y = 0; 
5566   29F1 FA FB FF      lea d, [bp + -5] ; $k
5567   29F4 FD 2A         mov d, [d]
5568   29F6 58 00 00      add d, 0
5569   29F9 DA            push d
5570   29FA 26 00 00      mov b, $0
5571   29FD E7            pop d
5572   29FE FD 3E         mov [d], bl
5573   2A00             ;; k->x = 0; 
5574   2A00 FA FB FF      lea d, [bp + -5] ; $k
5575   2A03 FD 2A         mov d, [d]
5576   2A05 58 01 00      add d, 1
5577   2A08 DA            push d
5578   2A09 26 00 00      mov b, $0
5579   2A0C E7            pop d
5580   2A0D FD 3E         mov [d], bl
5581   2A0F             ;; k->energy = 0; 
5582   2A0F FA FB FF      lea d, [bp + -5] ; $k
5583   2A12 FD 2A         mov d, [d]
5584   2A14 58 02 00      add d, 2
5585   2A17 DA            push d
5586   2A18 26 00 00      mov b, $0
5587   2A1B E7            pop d
5588   2A1C FD 43         mov [d], b
5589   2A1E             ;; k++; 
5590   2A1E FA FB FF      lea d, [bp + -5] ; $k
5591   2A21 2A            mov b, [d]
5592   2A22 D8            push b
5593   2A23 FD 77         inc b
5594   2A25 FD 77         inc b
5595   2A27 FA FB FF      lea d, [bp + -5] ; $k
5596   2A2A FD 43         mov [d], b
5597   2A2C E5            pop b
5598   2A2D             _for87_update:
5599   2A2D FA FF FF      lea d, [bp + -1] ; $i
5600   2A30 2A            mov b, [d]
5601   2A31 D8            push b
5602   2A32 FD 77         inc b
5603   2A34 FA FF FF      lea d, [bp + -1] ; $i
5604   2A37 FD 43         mov [d], b
5605   2A39 E5            pop b
5606   2A3A 0A DE 29      jmp _for87_cond
5607   2A3D             _for87_exit:
5608   2A3D             ;; memset(quad,  		0      , 64); 
5609   2A3D 26 40 00      mov b, $40
5610   2A40 FD AB         swp b
5611   2A42 D8            push b
5612   2A43 26 00 00      mov b, $0
5613   2A46 DD            push bl
5614   2A47 3B 10 61      mov d, _quad_data ; $quad
5615   2A4A 2D            mov b, d
5616   2A4B FD AB         swp b
5617   2A4D D8            push b
5618   2A4E 07 35 17      call memset
5619   2A51 51 05 00      add sp, 5
5620   2A54             ;; place_ship(); 
5621   2A54 07 A5 27      call place_ship
5622   2A57             ;; if (klingons > 0) { 
5623   2A57             _if88_cond:
5624   2A57 3B E6 60      mov d, _klingons ; $klingons
5625   2A5A 32            mov bl, [d]
5626   2A5B A7 00         mov bh, 0
5627   2A5D             ; START RELATIONAL
5628   2A5D D7            push a
5629   2A5E 11            mov a, b
5630   2A5F 26 00 00      mov b, $0
5631   2A62 B0            cmp a, b
5632   2A63 FD 81         sgu ; > (unsigned)
5633   2A65 E4            pop a
5634   2A66             ; END RELATIONAL
5635   2A66 C0 00 00      cmp b, 0
5636   2A69 C6 FE 2A      je _if88_exit
5637   2A6C             _if88_true:
5638   2A6C             ;; k = kdata; 
5639   2A6C FA FB FF      lea d, [bp + -5] ; $k
5640   2A6F DA            push d
5641   2A70 3B DA 60      mov d, _kdata_data ; $kdata
5642   2A73 2D            mov b, d
5643   2A74 E7            pop d
5644   2A75 FD 43         mov [d], b
5645   2A77             ;; for (i = 0; i < klingons; i++) { 
5646   2A77             _for89_init:
5647   2A77 FA FF FF      lea d, [bp + -1] ; $i
5648   2A7A DA            push d
5649   2A7B 26 00 00      mov b, $0
5650   2A7E E7            pop d
5651   2A7F FD 43         mov [d], b
5652   2A81             _for89_cond:
5653   2A81 FA FF FF      lea d, [bp + -1] ; $i
5654   2A84 2A            mov b, [d]
5655   2A85             ; START RELATIONAL
5656   2A85 D7            push a
5657   2A86 11            mov a, b
5658   2A87 3B E6 60      mov d, _klingons ; $klingons
5659   2A8A 32            mov bl, [d]
5660   2A8B A7 00         mov bh, 0
5661   2A8D B0            cmp a, b
5662   2A8E FD 73         slt ; < (signed)
5663   2A90 E4            pop a
5664   2A91             ; END RELATIONAL
5665   2A91 C0 00 00      cmp b, 0
5666   2A94 C6 FB 2A      je _for89_exit
5667   2A97             _for89_block:
5668   2A97             ;; find_set_empty_place( 	3        , k->y, k->x); 
5669   2A97 FA FB FF      lea d, [bp + -5] ; $k
5670   2A9A FD 2A         mov d, [d]
5671   2A9C 58 01 00      add d, 1
5672   2A9F 32            mov bl, [d]
5673   2AA0 A7 00         mov bh, 0
5674   2AA2 FD AB         swp b
5675   2AA4 D8            push b
5676   2AA5 FA FB FF      lea d, [bp + -5] ; $k
5677   2AA8 FD 2A         mov d, [d]
5678   2AAA 58 00 00      add d, 0
5679   2AAD 32            mov bl, [d]
5680   2AAE A7 00         mov bh, 0
5681   2AB0 FD AB         swp b
5682   2AB2 D8            push b
5683   2AB3 26 03 00      mov b, $3
5684   2AB6 DD            push bl
5685   2AB7 07 FB 5B      call find_set_empty_place
5686   2ABA 51 05 00      add sp, 5
5687   2ABD             ;; k->energy = 100 + get_rand(200); 
5688   2ABD FA FB FF      lea d, [bp + -5] ; $k
5689   2AC0 FD 2A         mov d, [d]
5690   2AC2 58 02 00      add d, 2
5691   2AC5 DA            push d
5692   2AC6 26 64 00      mov b, $64
5693   2AC9             ; START TERMS
5694   2AC9 D7            push a
5695   2ACA 11            mov a, b
5696   2ACB 26 C8 00      mov b, $c8
5697   2ACE FD AB         swp b
5698   2AD0 D8            push b
5699   2AD1 07 1C 1D      call get_rand
5700   2AD4 51 02 00      add sp, 2
5701   2AD7 56            add b, a
5702   2AD8 E4            pop a
5703   2AD9             ; END TERMS
5704   2AD9 E7            pop d
5705   2ADA FD 43         mov [d], b
5706   2ADC             ;; k++; 
5707   2ADC FA FB FF      lea d, [bp + -5] ; $k
5708   2ADF 2A            mov b, [d]
5709   2AE0 D8            push b
5710   2AE1 FD 77         inc b
5711   2AE3 FD 77         inc b
5712   2AE5 FA FB FF      lea d, [bp + -5] ; $k
5713   2AE8 FD 43         mov [d], b
5714   2AEA E5            pop b
5715   2AEB             _for89_update:
5716   2AEB FA FF FF      lea d, [bp + -1] ; $i
5717   2AEE 2A            mov b, [d]
5718   2AEF D8            push b
5719   2AF0 FD 77         inc b
5720   2AF2 FA FF FF      lea d, [bp + -1] ; $i
5721   2AF5 FD 43         mov [d], b
5722   2AF7 E5            pop b
5723   2AF8 0A 81 2A      jmp _for89_cond
5724   2AFB             _for89_exit:
5725   2AFB 0A FE 2A      jmp _if88_exit
5726   2AFE             _if88_exit:
5727   2AFE             ;; if (starbases > 0) 
5728   2AFE             _if90_cond:
5729   2AFE 3B 10 60      mov d, _starbases ; $starbases
5730   2B01 32            mov bl, [d]
5731   2B02 A7 00         mov bh, 0
5732   2B04             ; START RELATIONAL
5733   2B04 D7            push a
5734   2B05 11            mov a, b
5735   2B06 26 00 00      mov b, $0
5736   2B09 B0            cmp a, b
5737   2B0A FD 7F         sgt ; >
5738   2B0C E4            pop a
5739   2B0D             ; END RELATIONAL
5740   2B0D C0 00 00      cmp b, 0
5741   2B10 C6 2E 2B      je _if90_exit
5742   2B13             _if90_true:
5743   2B13             ;; find_set_empty_place( 		2     , &base_y, &base_x); 
5744   2B13 3B 12 60      mov d, _base_x ; $base_x
5745   2B16 2D            mov b, d
5746   2B17 FD AB         swp b
5747   2B19 D8            push b
5748   2B1A 3B 11 60      mov d, _base_y ; $base_y
5749   2B1D 2D            mov b, d
5750   2B1E FD AB         swp b
5751   2B20 D8            push b
5752   2B21 26 02 00      mov b, $2
5753   2B24 DD            push bl
5754   2B25 07 FB 5B      call find_set_empty_place
5755   2B28 51 05 00      add sp, 5
5756   2B2B 0A 2E 2B      jmp _if90_exit
5757   2B2E             _if90_exit:
5758   2B2E             ;; for (i = 1; i <= stars; i++) 
5759   2B2E             _for91_init:
5760   2B2E FA FF FF      lea d, [bp + -1] ; $i
5761   2B31 DA            push d
5762   2B32 26 01 00      mov b, $1
5763   2B35 E7            pop d
5764   2B36 FD 43         mov [d], b
5765   2B38             _for91_cond:
5766   2B38 FA FF FF      lea d, [bp + -1] ; $i
5767   2B3B 2A            mov b, [d]
5768   2B3C             ; START RELATIONAL
5769   2B3C D7            push a
5770   2B3D 11            mov a, b
5771   2B3E 3B F1 60      mov d, _stars ; $stars
5772   2B41 32            mov bl, [d]
5773   2B42 A7 00         mov bh, 0
5774   2B44 B0            cmp a, b
5775   2B45 FD 73         slt ; <= (signed)
5776   2B47 E4            pop a
5777   2B48             ; END RELATIONAL
5778   2B48 C0 00 00      cmp b, 0
5779   2B4B C6 74 2B      je _for91_exit
5780   2B4E             _for91_block:
5781   2B4E             ;; find_set_empty_place( 		1     ,   0   ,   0   ); 
5782   2B4E 26 00 00      mov b, $0
5783   2B51 FD AB         swp b
5784   2B53 D8            push b
5785   2B54 26 00 00      mov b, $0
5786   2B57 FD AB         swp b
5787   2B59 D8            push b
5788   2B5A 26 01 00      mov b, $1
5789   2B5D DD            push bl
5790   2B5E 07 FB 5B      call find_set_empty_place
5791   2B61 51 05 00      add sp, 5
5792   2B64             _for91_update:
5793   2B64 FA FF FF      lea d, [bp + -1] ; $i
5794   2B67 2A            mov b, [d]
5795   2B68 D8            push b
5796   2B69 FD 77         inc b
5797   2B6B FA FF FF      lea d, [bp + -1] ; $i
5798   2B6E FD 43         mov [d], b
5799   2B70 E5            pop b
5800   2B71 0A 38 2B      jmp _for91_cond
5801   2B74             _for91_exit:
5802   2B74 F9            leave
5803   2B75 09            ret
5804   2B76             
5805   2B76             course_control:
5806   2B76 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5807   2B79             ; $i 
5808   2B79             ; $c1 
5809   2B79             ; $warp 
5810   2B79             ; $n 
5811   2B79             ; $c2 
5812   2B79             ; $c3 
5813   2B79             ; $c4 
5814   2B79             ; $z1 
5815   2B79             ; $z2 
5816   2B79             ; $x1 
5817   2B79             ; $x2 
5818   2B79             ; $x 
5819   2B79             ; $y 
5820   2B79             ; $outside 
5821   2B79 19 00         mov al, $0
5822   2B7B 40 E6 FF      mov [bp + -26], al
5823   2B7E             ; $quad_y_old 
5824   2B7E             ; $quad_x_old 
5825   2B7E 52 1D 00      sub sp, 29
5826   2B81             ;; puts("Course (0-9): " ); 
5827   2B81 26 6C 66      mov b, __s65 ; "Course (0-9): "
5828   2B84 FD AB         swp b
5829   2B86 D8            push b
5830   2B87 07 31 13      call puts
5831   2B8A 51 02 00      add sp, 2
5832   2B8D             ;; c1 = input_f00(); 
5833   2B8D FA FD FF      lea d, [bp + -3] ; $c1
5834   2B90 DA            push d
5835   2B91 07 42 1E      call input_f00
5836   2B94 E7            pop d
5837   2B95 FD 43         mov [d], b
5838   2B97             ;; if (c1 == 900) 
5839   2B97             _if92_cond:
5840   2B97 FA FD FF      lea d, [bp + -3] ; $c1
5841   2B9A 2A            mov b, [d]
5842   2B9B             ; START RELATIONAL
5843   2B9B D7            push a
5844   2B9C 11            mov a, b
5845   2B9D 26 84 03      mov b, $384
5846   2BA0 B0            cmp a, b
5847   2BA1 FD 71         seq ; ==
5848   2BA3 E4            pop a
5849   2BA4             ; END RELATIONAL
5850   2BA4 C0 00 00      cmp b, 0
5851   2BA7 C6 B7 2B      je _if92_exit
5852   2BAA             _if92_true:
5853   2BAA             ;; c1 = 100; 
5854   2BAA FA FD FF      lea d, [bp + -3] ; $c1
5855   2BAD DA            push d
5856   2BAE 26 64 00      mov b, $64
5857   2BB1 E7            pop d
5858   2BB2 FD 43         mov [d], b
5859   2BB4 0A B7 2B      jmp _if92_exit
5860   2BB7             _if92_exit:
5861   2BB7             ;; if (c1 < 0 || c1 > 900) { 
5862   2BB7             _if93_cond:
5863   2BB7 FA FD FF      lea d, [bp + -3] ; $c1
5864   2BBA 2A            mov b, [d]
5865   2BBB             ; START RELATIONAL
5866   2BBB D7            push a
5867   2BBC 11            mov a, b
5868   2BBD 26 00 00      mov b, $0
5869   2BC0 B0            cmp a, b
5870   2BC1 FD 73         slt ; < (signed)
5871   2BC3 E4            pop a
5872   2BC4             ; END RELATIONAL
5873   2BC4 D7            push a
5874   2BC5 11            mov a, b
5875   2BC6 FA FD FF      lea d, [bp + -3] ; $c1
5876   2BC9 2A            mov b, [d]
5877   2BCA             ; START RELATIONAL
5878   2BCA D7            push a
5879   2BCB 11            mov a, b
5880   2BCC 26 84 03      mov b, $384
5881   2BCF B0            cmp a, b
5882   2BD0 FD 7F         sgt ; >
5883   2BD2 E4            pop a
5884   2BD3             ; END RELATIONAL
5885   2BD3 FD A8         sor a, b ; ||
5886   2BD5 E4            pop a
5887   2BD6 C0 00 00      cmp b, 0
5888   2BD9 C6 F4 2B      je _if93_exit
5889   2BDC             _if93_true:
5890   2BDC             ;; printf("Lt. Sulu%s", inc_1); 
5891   2BDC 3B 84 61      mov d, _inc_1 ; $inc_1
5892   2BDF 2A            mov b, [d]
5893   2BE0 FD AB         swp b
5894   2BE2 D8            push b
5895   2BE3 26 7B 66      mov b, __s66 ; "Lt. Sulu%s"
5896   2BE6 FD AB         swp b
5897   2BE8 D8            push b
5898   2BE9 07 D1 05      call printf
5899   2BEC 51 04 00      add sp, 4
5900   2BEF             ;; return; 
5901   2BEF F9            leave
5902   2BF0 09            ret
5903   2BF1 0A F4 2B      jmp _if93_exit
5904   2BF4             _if93_exit:
5905   2BF4             ;; if (damage[1] < 0) 
5906   2BF4             _if94_cond:
5907   2BF4 3B F6 60      mov d, _damage_data ; $damage
5908   2BF7 D7            push a
5909   2BF8 DA            push d
5910   2BF9 26 01 00      mov b, $1
5911   2BFC E7            pop d
5912   2BFD FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5913   2C01 E4            pop a
5914   2C02 2A            mov b, [d]
5915   2C03             ; START RELATIONAL
5916   2C03 D7            push a
5917   2C04 11            mov a, b
5918   2C05 26 00 00      mov b, $0
5919   2C08 B0            cmp a, b
5920   2C09 FD 73         slt ; < (signed)
5921   2C0B E4            pop a
5922   2C0C             ; END RELATIONAL
5923   2C0C C0 00 00      cmp b, 0
5924   2C0F C6 28 2C      je _if94_exit
5925   2C12             _if94_true:
5926   2C12             ;; strcpy(warpmax, "0.2"); 
5927   2C12 26 86 66      mov b, __s67 ; "0.2"
5928   2C15 FD AB         swp b
5929   2C17 D8            push b
5930   2C18 3B 0D 62      mov d, _warpmax_data ; $warpmax
5931   2C1B 2D            mov b, d
5932   2C1C FD AB         swp b
5933   2C1E D8            push b
5934   2C1F 07 14 04      call strcpy
5935   2C22 51 04 00      add sp, 4
5936   2C25 0A 28 2C      jmp _if94_exit
5937   2C28             _if94_exit:
5938   2C28             ;; printf("Warp Factor (0-%s): ", warpmax); 
5939   2C28 3B 0D 62      mov d, _warpmax_data ; $warpmax
5940   2C2B 2D            mov b, d
5941   2C2C FD AB         swp b
5942   2C2E D8            push b
5943   2C2F 26 8A 66      mov b, __s68 ; "Warp Factor (0-%s): "
5944   2C32 FD AB         swp b
5945   2C34 D8            push b
5946   2C35 07 D1 05      call printf
5947   2C38 51 04 00      add sp, 4
5948   2C3B             ;; warp = input_f00(); 
5949   2C3B FA FB FF      lea d, [bp + -5] ; $warp
5950   2C3E DA            push d
5951   2C3F 07 42 1E      call input_f00
5952   2C42 E7            pop d
5953   2C43 FD 43         mov [d], b
5954   2C45             ;; if (damage[1] < 0 && warp > 20) { 
5955   2C45             _if95_cond:
5956   2C45 3B F6 60      mov d, _damage_data ; $damage
5957   2C48 D7            push a
5958   2C49 DA            push d
5959   2C4A 26 01 00      mov b, $1
5960   2C4D E7            pop d
5961   2C4E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5962   2C52 E4            pop a
5963   2C53 2A            mov b, [d]
5964   2C54             ; START RELATIONAL
5965   2C54 D7            push a
5966   2C55 11            mov a, b
5967   2C56 26 00 00      mov b, $0
5968   2C59 B0            cmp a, b
5969   2C5A FD 73         slt ; < (signed)
5970   2C5C E4            pop a
5971   2C5D             ; END RELATIONAL
5972   2C5D D7            push a
5973   2C5E 11            mov a, b
5974   2C5F FA FB FF      lea d, [bp + -5] ; $warp
5975   2C62 2A            mov b, [d]
5976   2C63             ; START RELATIONAL
5977   2C63 D7            push a
5978   2C64 11            mov a, b
5979   2C65 26 14 00      mov b, $14
5980   2C68 B0            cmp a, b
5981   2C69 FD 7F         sgt ; >
5982   2C6B E4            pop a
5983   2C6C             ; END RELATIONAL
5984   2C6C FD A7         sand a, b
5985   2C6E E4            pop a
5986   2C6F C0 00 00      cmp b, 0
5987   2C72 C6 86 2C      je _if95_exit
5988   2C75             _if95_true:
5989   2C75             ;; printf("Warp Engines are damaged. Maximum speed = Warp 0.2.\n\n"); 
5990   2C75 26 9F 66      mov b, __s69 ; "Warp Engines are damaged. Maximum speed = Warp 0.2.\n\n"
5991   2C78 FD AB         swp b
5992   2C7A D8            push b
5993   2C7B 07 D1 05      call printf
5994   2C7E 51 02 00      add sp, 2
5995   2C81             ;; return; 
5996   2C81 F9            leave
5997   2C82 09            ret
5998   2C83 0A 86 2C      jmp _if95_exit
5999   2C86             _if95_exit:
6000   2C86             ;; if (warp <= 0) 
6001   2C86             _if96_cond:
6002   2C86 FA FB FF      lea d, [bp + -5] ; $warp
6003   2C89 2A            mov b, [d]
6004   2C8A             ; START RELATIONAL
6005   2C8A D7            push a
6006   2C8B 11            mov a, b
6007   2C8C 26 00 00      mov b, $0
6008   2C8F B0            cmp a, b
6009   2C90 FD 73         slt ; <= (signed)
6010   2C92 E4            pop a
6011   2C93             ; END RELATIONAL
6012   2C93 C0 00 00      cmp b, 0
6013   2C96 C6 9E 2C      je _if96_exit
6014   2C99             _if96_true:
6015   2C99             ;; return; 
6016   2C99 F9            leave
6017   2C9A 09            ret
6018   2C9B 0A 9E 2C      jmp _if96_exit
6019   2C9E             _if96_exit:
6020   2C9E             ;; if (warp > 800) { 
6021   2C9E             _if97_cond:
6022   2C9E FA FB FF      lea d, [bp + -5] ; $warp
6023   2CA1 2A            mov b, [d]
6024   2CA2             ; START RELATIONAL
6025   2CA2 D7            push a
6026   2CA3 11            mov a, b
6027   2CA4 26 20 03      mov b, $320
6028   2CA7 B0            cmp a, b
6029   2CA8 FD 7F         sgt ; >
6030   2CAA E4            pop a
6031   2CAB             ; END RELATIONAL
6032   2CAB C0 00 00      cmp b, 0
6033   2CAE C6 D2 2C      je _if97_exit
6034   2CB1             _if97_true:
6035   2CB1             ;; printf("Chief Engineer Scott reports:\n  The engines wont take warp %s!\n\n", print100(warp)); 
6036   2CB1 FA FB FF      lea d, [bp + -5] ; $warp
6037   2CB4 2A            mov b, [d]
6038   2CB5 FD AB         swp b
6039   2CB7 D8            push b
6040   2CB8 07 FC 1F      call print100
6041   2CBB 51 02 00      add sp, 2
6042   2CBE FD AB         swp b
6043   2CC0 D8            push b
6044   2CC1 26 D5 66      mov b, __s70 ; "Chief Engineer Scott reports:\n  The engines wont take warp %s!\n\n"
6045   2CC4 FD AB         swp b
6046   2CC6 D8            push b
6047   2CC7 07 D1 05      call printf
6048   2CCA 51 04 00      add sp, 4
6049   2CCD             ;; return; 
6050   2CCD F9            leave
6051   2CCE 09            ret
6052   2CCF 0A D2 2C      jmp _if97_exit
6053   2CD2             _if97_exit:
6054   2CD2             ;; n = warp * 8; 
6055   2CD2 FA F9 FF      lea d, [bp + -7] ; $n
6056   2CD5 DA            push d
6057   2CD6 FA FB FF      lea d, [bp + -5] ; $warp
6058   2CD9 2A            mov b, [d]
6059   2CDA             ; START FACTORS
6060   2CDA D7            push a
6061   2CDB 11            mov a, b
6062   2CDC 26 08 00      mov b, $8
6063   2CDF AC            mul a, b ; *
6064   2CE0 11            mov a, b
6065   2CE1 27            mov b, a
6066   2CE2 E4            pop a
6067   2CE3             ; END FACTORS
6068   2CE3 E7            pop d
6069   2CE4 FD 43         mov [d], b
6070   2CE6             ;; n = cint100(n);	 
6071   2CE6 FA F9 FF      lea d, [bp + -7] ; $n
6072   2CE9 DA            push d
6073   2CEA FA F9 FF      lea d, [bp + -7] ; $n
6074   2CED 2A            mov b, [d]
6075   2CEE FD AB         swp b
6076   2CF0 D8            push b
6077   2CF1 07 F3 5F      call cint100
6078   2CF4 51 02 00      add sp, 2
6079   2CF7 E7            pop d
6080   2CF8 FD 43         mov [d], b
6081   2CFA             ;; if (energy - n < 0) { 
6082   2CFA             _if98_cond:
6083   2CFA 3B 34 60      mov d, _energy ; $energy
6084   2CFD 2A            mov b, [d]
6085   2CFE             ; START TERMS
6086   2CFE D7            push a
6087   2CFF 11            mov a, b
6088   2D00 FA F9 FF      lea d, [bp + -7] ; $n
6089   2D03 2A            mov b, [d]
6090   2D04 60            sub a, b
6091   2D05 27            mov b, a
6092   2D06 E4            pop a
6093   2D07             ; END TERMS
6094   2D07             ; START RELATIONAL
6095   2D07 D7            push a
6096   2D08 11            mov a, b
6097   2D09 26 00 00      mov b, $0
6098   2D0C B0            cmp a, b
6099   2D0D FD 75         slu ; < (unsigned)
6100   2D0F E4            pop a
6101   2D10             ; END RELATIONAL
6102   2D10 C0 00 00      cmp b, 0
6103   2D13 C6 7E 2D      je _if98_exit
6104   2D16             _if98_true:
6105   2D16             ;; printf("Engineering reports:\n  Insufficient energy available for maneuvering at warp %s!\n\n", print100(warp)); 
6106   2D16 FA FB FF      lea d, [bp + -5] ; $warp
6107   2D19 2A            mov b, [d]
6108   2D1A FD AB         swp b
6109   2D1C D8            push b
6110   2D1D 07 FC 1F      call print100
6111   2D20 51 02 00      add sp, 2
6112   2D23 FD AB         swp b
6113   2D25 D8            push b
out/startrek.asm line 6114: Label not found: (__s71)
out/startrek.asm line 6114: Unused data in MS byte of argument. (2)
6114   2D26 26 00 00      mov b, __s71 ; "Engineering reports:\n  Insufficient energy available for maneuvering at warp %s!\n\n"
6115   2D29 FD AB         swp b
6116   2D2B D8            push b
6117   2D2C 07 D1 05      call printf
6118   2D2F 51 04 00      add sp, 4
6119   2D32             ;; if (shield >= n && damage[7] >= 0) { 
6120   2D32             _if99_cond:
6121   2D32 3B EF 60      mov d, _shield ; $shield
6122   2D35 2A            mov b, [d]
6123   2D36             ; START RELATIONAL
6124   2D36 D7            push a
6125   2D37 11            mov a, b
6126   2D38 FA F9 FF      lea d, [bp + -7] ; $n
6127   2D3B 2A            mov b, [d]
6128   2D3C B0            cmp a, b
6129   2D3D FD 80         sge ; >=
6130   2D3F E4            pop a
6131   2D40             ; END RELATIONAL
6132   2D40 D7            push a
6133   2D41 11            mov a, b
6134   2D42 3B F6 60      mov d, _damage_data ; $damage
6135   2D45 D7            push a
6136   2D46 DA            push d
6137   2D47 26 07 00      mov b, $7
6138   2D4A E7            pop d
6139   2D4B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6140   2D4F E4            pop a
6141   2D50 2A            mov b, [d]
6142   2D51             ; START RELATIONAL
6143   2D51 D7            push a
6144   2D52 11            mov a, b
6145   2D53 26 00 00      mov b, $0
6146   2D56 B0            cmp a, b
6147   2D57 FD 80         sge ; >=
6148   2D59 E4            pop a
6149   2D5A             ; END RELATIONAL
6150   2D5A FD A7         sand a, b
6151   2D5C E4            pop a
6152   2D5D C0 00 00      cmp b, 0
6153   2D60 C6 79 2D      je _if99_exit
6154   2D63             _if99_true:
6155   2D63             ;; printf("Deflector Control Room acknowledges:\n  %d units of energy presently deployed to shields.\n", shield); 
6156   2D63 3B EF 60      mov d, _shield ; $shield
6157   2D66 2A            mov b, [d]
6158   2D67 FD AB         swp b
6159   2D69 D8            push b
out/startrek.asm line 6160: Label not found: (__s72)
out/startrek.asm line 6160: Unused data in MS byte of argument. (2)
6160   2D6A 26 00 00      mov b, __s72 ; "Deflector Control Room acknowledges:\n  %d units of energy presently deployed to shields.\n"
6161   2D6D FD AB         swp b
6162   2D6F D8            push b
6163   2D70 07 D1 05      call printf
6164   2D73 51 04 00      add sp, 4
6165   2D76 0A 79 2D      jmp _if99_exit
6166   2D79             _if99_exit:
6167   2D79             ;; return; 
6168   2D79 F9            leave
6169   2D7A 09            ret
6170   2D7B 0A 7E 2D      jmp _if98_exit
6171   2D7E             _if98_exit:
6172   2D7E             ;; klingons_move(); 
6173   2D7E 07 D7 55      call klingons_move
6174   2D81             ;; repair_damage(warp); 
6175   2D81 FA FB FF      lea d, [bp + -5] ; $warp
6176   2D84 2A            mov b, [d]
6177   2D85 FD AB         swp b
6178   2D87 D8            push b
6179   2D88 07 57 59      call repair_damage
6180   2D8B 51 02 00      add sp, 2
6181   2D8E             ;; z1 = FROM_FIXED00(ship_y); 
6182   2D8E FA F1 FF      lea d, [bp + -15] ; $z1
6183   2D91 DA            push d
6184   2D92 3B 0A 61      mov d, _ship_y ; $ship_y
6185   2D95 2A            mov b, [d]
6186   2D96 FD AB         swp b
6187   2D98 D8            push b
6188   2D99 07 0B 1D      call FROM_FIXED00
6189   2D9C 51 02 00      add sp, 2
6190   2D9F E7            pop d
6191   2DA0 FD 43         mov [d], b
6192   2DA2             ;; z2 = FROM_FIXED00(ship_x); 
6193   2DA2 FA EF FF      lea d, [bp + -17] ; $z2
6194   2DA5 DA            push d
6195   2DA6 3B 0C 61      mov d, _ship_x ; $ship_x
6196   2DA9 2A            mov b, [d]
6197   2DAA FD AB         swp b
6198   2DAC D8            push b
6199   2DAD 07 0B 1D      call FROM_FIXED00
6200   2DB0 51 02 00      add sp, 2
6201   2DB3 E7            pop d
6202   2DB4 FD 43         mov [d], b
6203   2DB6             ;; quad[z1+-1][z2+-1] =  		0      ; 
6204   2DB6 3B 10 61      mov d, _quad_data ; $quad
6205   2DB9 D7            push a
6206   2DBA DA            push d
6207   2DBB FA F1 FF      lea d, [bp + -15] ; $z1
6208   2DBE 2A            mov b, [d]
6209   2DBF             ; START TERMS
6210   2DBF D7            push a
6211   2DC0 11            mov a, b
6212   2DC1 26 FF FF      mov b, $ffff
6213   2DC4 56            add b, a
6214   2DC5 E4            pop a
6215   2DC6             ; END TERMS
6216   2DC6 E7            pop d
6217   2DC7 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
6218   2DCB DA            push d
6219   2DCC FA EF FF      lea d, [bp + -17] ; $z2
6220   2DCF 2A            mov b, [d]
6221   2DD0             ; START TERMS
6222   2DD0 D7            push a
6223   2DD1 11            mov a, b
6224   2DD2 26 FF FF      mov b, $ffff
6225   2DD5 56            add b, a
6226   2DD6 E4            pop a
6227   2DD7             ; END TERMS
6228   2DD7 E7            pop d
6229   2DD8 5A            add d, b
6230   2DD9 E4            pop a
6231   2DDA DA            push d
6232   2DDB 26 00 00      mov b, $0
6233   2DDE E7            pop d
6234   2DDF FD 3E         mov [d], bl
6235   2DE1             ;; c2 = FROM_FIXED00(c1);	/* Integer part */ 
6236   2DE1 FA F7 FF      lea d, [bp + -9] ; $c2
6237   2DE4 DA            push d
6238   2DE5 FA FD FF      lea d, [bp + -3] ; $c1
6239   2DE8 2A            mov b, [d]
6240   2DE9 FD AB         swp b
6241   2DEB D8            push b
6242   2DEC 07 0B 1D      call FROM_FIXED00
6243   2DEF 51 02 00      add sp, 2
6244   2DF2 E7            pop d
6245   2DF3 FD 43         mov [d], b
6246   2DF5             ;; c3 = c2 + 1;		/* Next integer part */ 
6247   2DF5 FA F5 FF      lea d, [bp + -11] ; $c3
6248   2DF8 DA            push d
6249   2DF9 FA F7 FF      lea d, [bp + -9] ; $c2
6250   2DFC 2A            mov b, [d]
6251   2DFD             ; START TERMS
6252   2DFD D7            push a
6253   2DFE 11            mov a, b
6254   2DFF 26 01 00      mov b, $1
6255   2E02 56            add b, a
6256   2E03 E4            pop a
6257   2E04             ; END TERMS
6258   2E04 E7            pop d
6259   2E05 FD 43         mov [d], b
6260   2E07             ;; c4 = (c1 - TO_FIXED00(c2));	/* Fractional element in fixed point */ 
6261   2E07 FA F3 FF      lea d, [bp + -13] ; $c4
6262   2E0A DA            push d
6263   2E0B FA FD FF      lea d, [bp + -3] ; $c1
6264   2E0E 2A            mov b, [d]
6265   2E0F             ; START TERMS
6266   2E0F D7            push a
6267   2E10 11            mov a, b
6268   2E11 FA F7 FF      lea d, [bp + -9] ; $c2
6269   2E14 2A            mov b, [d]
6270   2E15 FD AB         swp b
6271   2E17 D8            push b
6272   2E18 07 F9 1C      call TO_FIXED00
6273   2E1B 51 02 00      add sp, 2
6274   2E1E 60            sub a, b
6275   2E1F 27            mov b, a
6276   2E20 E4            pop a
6277   2E21             ; END TERMS
6278   2E21 E7            pop d
6279   2E22 FD 43         mov [d], b
6280   2E24             ;; x1 = 100 * c[1][c2] + (c[1][c3] - c[1][c2]) * c4; 
6281   2E24 FA ED FF      lea d, [bp + -19] ; $x1
6282   2E27 DA            push d
6283   2E28 26 64 00      mov b, $64
6284   2E2B             ; START FACTORS
6285   2E2B D7            push a
6286   2E2C 11            mov a, b
6287   2E2D 3B 14 60      mov d, _c_data ; $c
6288   2E30 D7            push a
6289   2E31 DA            push d
6290   2E32 26 01 00      mov b, $1
6291   2E35 E7            pop d
6292   2E36 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
6293   2E3A DA            push d
6294   2E3B FA F7 FF      lea d, [bp + -9] ; $c2
6295   2E3E 2A            mov b, [d]
6296   2E3F E7            pop d
6297   2E40 5A            add d, b
6298   2E41 E4            pop a
6299   2E42 32            mov bl, [d]
6300   2E43 A7 00         mov bh, 0
6301   2E45 AC            mul a, b ; *
6302   2E46 11            mov a, b
6303   2E47 27            mov b, a
6304   2E48 E4            pop a
6305   2E49             ; END FACTORS
6306   2E49             ; START TERMS
6307   2E49 D7            push a
6308   2E4A 11            mov a, b
6309   2E4B 3B 14 60      mov d, _c_data ; $c
6310   2E4E D7            push a
6311   2E4F DA            push d
6312   2E50 26 01 00      mov b, $1
6313   2E53 E7            pop d
6314   2E54 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
6315   2E58 DA            push d
6316   2E59 FA F5 FF      lea d, [bp + -11] ; $c3
6317   2E5C 2A            mov b, [d]
6318   2E5D E7            pop d
6319   2E5E 5A            add d, b
6320   2E5F E4            pop a
6321   2E60 32            mov bl, [d]
6322   2E61 A7 00         mov bh, 0
6323   2E63             ; START TERMS
6324   2E63 D7            push a
6325   2E64 11            mov a, b
6326   2E65 3B 14 60      mov d, _c_data ; $c
6327   2E68 D7            push a
6328   2E69 DA            push d
6329   2E6A 26 01 00      mov b, $1
6330   2E6D E7            pop d
6331   2E6E FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
6332   2E72 DA            push d
6333   2E73 FA F7 FF      lea d, [bp + -9] ; $c2
6334   2E76 2A            mov b, [d]
6335   2E77 E7            pop d
6336   2E78 5A            add d, b
6337   2E79 E4            pop a
6338   2E7A 32            mov bl, [d]
6339   2E7B A7 00         mov bh, 0
6340   2E7D 60            sub a, b
6341   2E7E 27            mov b, a
6342   2E7F E4            pop a
6343   2E80             ; END TERMS
6344   2E80             ; START FACTORS
6345   2E80 D7            push a
6346   2E81 11            mov a, b
6347   2E82 FA F3 FF      lea d, [bp + -13] ; $c4
6348   2E85 2A            mov b, [d]
6349   2E86 AC            mul a, b ; *
6350   2E87 11            mov a, b
6351   2E88 27            mov b, a
6352   2E89 E4            pop a
6353   2E8A             ; END FACTORS
6354   2E8A 56            add b, a
6355   2E8B E4            pop a
6356   2E8C             ; END TERMS
6357   2E8C E7            pop d
6358   2E8D FD 43         mov [d], b
6359   2E8F             ;; x2 = 100 * c[2][c2] + (c[2][c3] - c[2][c2]) * c4; 
6360   2E8F FA EB FF      lea d, [bp + -21] ; $x2
6361   2E92 DA            push d
6362   2E93 26 64 00      mov b, $64
6363   2E96             ; START FACTORS
6364   2E96 D7            push a
6365   2E97 11            mov a, b
6366   2E98 3B 14 60      mov d, _c_data ; $c
6367   2E9B D7            push a
6368   2E9C DA            push d
6369   2E9D 26 02 00      mov b, $2
6370   2EA0 E7            pop d
6371   2EA1 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
6372   2EA5 DA            push d
6373   2EA6 FA F7 FF      lea d, [bp + -9] ; $c2
6374   2EA9 2A            mov b, [d]
6375   2EAA E7            pop d
6376   2EAB 5A            add d, b
6377   2EAC E4            pop a
6378   2EAD 32            mov bl, [d]
6379   2EAE A7 00         mov bh, 0
6380   2EB0 AC            mul a, b ; *
6381   2EB1 11            mov a, b
6382   2EB2 27            mov b, a
6383   2EB3 E4            pop a
6384   2EB4             ; END FACTORS
6385   2EB4             ; START TERMS
6386   2EB4 D7            push a
6387   2EB5 11            mov a, b
6388   2EB6 3B 14 60      mov d, _c_data ; $c
6389   2EB9 D7            push a
6390   2EBA DA            push d
6391   2EBB 26 02 00      mov b, $2
6392   2EBE E7            pop d
6393   2EBF FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
6394   2EC3 DA            push d
6395   2EC4 FA F5 FF      lea d, [bp + -11] ; $c3
6396   2EC7 2A            mov b, [d]
6397   2EC8 E7            pop d
6398   2EC9 5A            add d, b
6399   2ECA E4            pop a
6400   2ECB 32            mov bl, [d]
6401   2ECC A7 00         mov bh, 0
6402   2ECE             ; START TERMS
6403   2ECE D7            push a
6404   2ECF 11            mov a, b
6405   2ED0 3B 14 60      mov d, _c_data ; $c
6406   2ED3 D7            push a
6407   2ED4 DA            push d
6408   2ED5 26 02 00      mov b, $2
6409   2ED8 E7            pop d
6410   2ED9 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
6411   2EDD DA            push d
6412   2EDE FA F7 FF      lea d, [bp + -9] ; $c2
6413   2EE1 2A            mov b, [d]
6414   2EE2 E7            pop d
6415   2EE3 5A            add d, b
6416   2EE4 E4            pop a
6417   2EE5 32            mov bl, [d]
6418   2EE6 A7 00         mov bh, 0
6419   2EE8 60            sub a, b
6420   2EE9 27            mov b, a
6421   2EEA E4            pop a
6422   2EEB             ; END TERMS
6423   2EEB             ; START FACTORS
6424   2EEB D7            push a
6425   2EEC 11            mov a, b
6426   2EED FA F3 FF      lea d, [bp + -13] ; $c4
6427   2EF0 2A            mov b, [d]
6428   2EF1 AC            mul a, b ; *
6429   2EF2 11            mov a, b
6430   2EF3 27            mov b, a
6431   2EF4 E4            pop a
6432   2EF5             ; END FACTORS
6433   2EF5 56            add b, a
6434   2EF6 E4            pop a
6435   2EF7             ; END TERMS
6436   2EF7 E7            pop d
6437   2EF8 FD 43         mov [d], b
6438   2EFA             ;; x = ship_y; 
6439   2EFA FA E9 FF      lea d, [bp + -23] ; $x
6440   2EFD DA            push d
6441   2EFE 3B 0A 61      mov d, _ship_y ; $ship_y
6442   2F01 2A            mov b, [d]
6443   2F02 E7            pop d
6444   2F03 FD 43         mov [d], b
6445   2F05             ;; y = ship_x; 
6446   2F05 FA E7 FF      lea d, [bp + -25] ; $y
6447   2F08 DA            push d
6448   2F09 3B 0C 61      mov d, _ship_x ; $ship_x
6449   2F0C 2A            mov b, [d]
6450   2F0D E7            pop d
6451   2F0E FD 43         mov [d], b
6452   2F10             ;; for (i = 1; i <= n; i++) { 
6453   2F10             _for100_init:
6454   2F10 FA FF FF      lea d, [bp + -1] ; $i
6455   2F13 DA            push d
6456   2F14 26 01 00      mov b, $1
6457   2F17 E7            pop d
6458   2F18 FD 43         mov [d], b
6459   2F1A             _for100_cond:
6460   2F1A FA FF FF      lea d, [bp + -1] ; $i
6461   2F1D 2A            mov b, [d]
6462   2F1E             ; START RELATIONAL
6463   2F1E D7            push a
6464   2F1F 11            mov a, b
6465   2F20 FA F9 FF      lea d, [bp + -7] ; $n
6466   2F23 2A            mov b, [d]
6467   2F24 B0            cmp a, b
6468   2F25 FD 73         slt ; <= (signed)
6469   2F27 E4            pop a
6470   2F28             ; END RELATIONAL
6471   2F28 C0 00 00      cmp b, 0
6472   2F2B C6 6B 33      je _for100_exit
6473   2F2E             _for100_block:
6474   2F2E             ;; ship_y = ship_y + x1; 
6475   2F2E 3B 0A 61      mov d, _ship_y ; $ship_y
6476   2F31 DA            push d
6477   2F32 3B 0A 61      mov d, _ship_y ; $ship_y
6478   2F35 2A            mov b, [d]
6479   2F36             ; START TERMS
6480   2F36 D7            push a
6481   2F37 11            mov a, b
6482   2F38 FA ED FF      lea d, [bp + -19] ; $x1
6483   2F3B 2A            mov b, [d]
6484   2F3C 56            add b, a
6485   2F3D E4            pop a
6486   2F3E             ; END TERMS
6487   2F3E E7            pop d
6488   2F3F FD 43         mov [d], b
6489   2F41             ;; ship_x = ship_x + x2; 
6490   2F41 3B 0C 61      mov d, _ship_x ; $ship_x
6491   2F44 DA            push d
6492   2F45 3B 0C 61      mov d, _ship_x ; $ship_x
6493   2F48 2A            mov b, [d]
6494   2F49             ; START TERMS
6495   2F49 D7            push a
6496   2F4A 11            mov a, b
6497   2F4B FA EB FF      lea d, [bp + -21] ; $x2
6498   2F4E 2A            mov b, [d]
6499   2F4F 56            add b, a
6500   2F50 E4            pop a
6501   2F51             ; END TERMS
6502   2F51 E7            pop d
6503   2F52 FD 43         mov [d], b
6504   2F54             ;; z1 = FROM_FIXED00(ship_y); 
6505   2F54 FA F1 FF      lea d, [bp + -15] ; $z1
6506   2F57 DA            push d
6507   2F58 3B 0A 61      mov d, _ship_y ; $ship_y
6508   2F5B 2A            mov b, [d]
6509   2F5C FD AB         swp b
6510   2F5E D8            push b
6511   2F5F 07 0B 1D      call FROM_FIXED00
6512   2F62 51 02 00      add sp, 2
6513   2F65 E7            pop d
6514   2F66 FD 43         mov [d], b
6515   2F68             ;; z2 = FROM_FIXED00(ship_x);	/* ?? cint100 ?? */ 
6516   2F68 FA EF FF      lea d, [bp + -17] ; $z2
6517   2F6B DA            push d
6518   2F6C 3B 0C 61      mov d, _ship_x ; $ship_x
6519   2F6F 2A            mov b, [d]
6520   2F70 FD AB         swp b
6521   2F72 D8            push b
6522   2F73 07 0B 1D      call FROM_FIXED00
6523   2F76 51 02 00      add sp, 2
6524   2F79 E7            pop d
6525   2F7A FD 43         mov [d], b
6526   2F7C             ;; if (z1 < 1 || z1 >= 9 || z2 < 1 || z2 >= 9) { 
6527   2F7C             _if101_cond:
6528   2F7C FA F1 FF      lea d, [bp + -15] ; $z1
6529   2F7F 2A            mov b, [d]
6530   2F80             ; START RELATIONAL
6531   2F80 D7            push a
6532   2F81 11            mov a, b
6533   2F82 26 01 00      mov b, $1
6534   2F85 B0            cmp a, b
6535   2F86 FD 73         slt ; < (signed)
6536   2F88 E4            pop a
6537   2F89             ; END RELATIONAL
6538   2F89 D7            push a
6539   2F8A 11            mov a, b
6540   2F8B FA F1 FF      lea d, [bp + -15] ; $z1
6541   2F8E 2A            mov b, [d]
6542   2F8F             ; START RELATIONAL
6543   2F8F D7            push a
6544   2F90 11            mov a, b
6545   2F91 26 09 00      mov b, $9
6546   2F94 B0            cmp a, b
6547   2F95 FD 80         sge ; >=
6548   2F97 E4            pop a
6549   2F98             ; END RELATIONAL
6550   2F98 FD A8         sor a, b ; ||
6551   2F9A 11            mov a, b
6552   2F9B FA EF FF      lea d, [bp + -17] ; $z2
6553   2F9E 2A            mov b, [d]
6554   2F9F             ; START RELATIONAL
6555   2F9F D7            push a
6556   2FA0 11            mov a, b
6557   2FA1 26 01 00      mov b, $1
6558   2FA4 B0            cmp a, b
6559   2FA5 FD 73         slt ; < (signed)
6560   2FA7 E4            pop a
6561   2FA8             ; END RELATIONAL
6562   2FA8 FD A8         sor a, b ; ||
6563   2FAA 11            mov a, b
6564   2FAB FA EF FF      lea d, [bp + -17] ; $z2
6565   2FAE 2A            mov b, [d]
6566   2FAF             ; START RELATIONAL
6567   2FAF D7            push a
6568   2FB0 11            mov a, b
6569   2FB1 26 09 00      mov b, $9
6570   2FB4 B0            cmp a, b
6571   2FB5 FD 80         sge ; >=
6572   2FB7 E4            pop a
6573   2FB8             ; END RELATIONAL
6574   2FB8 FD A8         sor a, b ; ||
6575   2FBA E4            pop a
6576   2FBB C0 00 00      cmp b, 0
6577   2FBE C6 CE 32      je _if101_exit
6578   2FC1             _if101_true:
6579   2FC1             ;; outside = 0;		/* Outside galaxy flag */ 
6580   2FC1 FA E6 FF      lea d, [bp + -26] ; $outside
6581   2FC4 DA            push d
6582   2FC5 26 00 00      mov b, $0
6583   2FC8 E7            pop d
6584   2FC9 FD 3E         mov [d], bl
6585   2FCB             ;; quad_y_old = quad_y; 
6586   2FCB FA E5 FF      lea d, [bp + -27] ; $quad_y_old
6587   2FCE DA            push d
6588   2FCF 3B EB 60      mov d, _quad_y ; $quad_y
6589   2FD2 2A            mov b, [d]
6590   2FD3 E7            pop d
6591   2FD4 FD 3E         mov [d], bl
6592   2FD6             ;; quad_x_old = quad_x; 
6593   2FD6 FA E4 FF      lea d, [bp + -28] ; $quad_x_old
6594   2FD9 DA            push d
6595   2FDA 3B ED 60      mov d, _quad_x ; $quad_x
6596   2FDD 2A            mov b, [d]
6597   2FDE E7            pop d
6598   2FDF FD 3E         mov [d], bl
6599   2FE1             ;; x = (800 * quad_y) + x + (n * x1); 
6600   2FE1 FA E9 FF      lea d, [bp + -23] ; $x
6601   2FE4 DA            push d
6602   2FE5 26 20 03      mov b, $320
6603   2FE8             ; START FACTORS
6604   2FE8 D7            push a
6605   2FE9 11            mov a, b
6606   2FEA 3B EB 60      mov d, _quad_y ; $quad_y
6607   2FED 2A            mov b, [d]
6608   2FEE AC            mul a, b ; *
6609   2FEF 11            mov a, b
6610   2FF0 27            mov b, a
6611   2FF1 E4            pop a
6612   2FF2             ; END FACTORS
6613   2FF2             ; START TERMS
6614   2FF2 D7            push a
6615   2FF3 11            mov a, b
6616   2FF4 FA E9 FF      lea d, [bp + -23] ; $x
6617   2FF7 2A            mov b, [d]
6618   2FF8 56            add b, a
6619   2FF9 11            mov a, b
6620   2FFA FA F9 FF      lea d, [bp + -7] ; $n
6621   2FFD 2A            mov b, [d]
6622   2FFE             ; START FACTORS
6623   2FFE D7            push a
6624   2FFF 11            mov a, b
6625   3000 FA ED FF      lea d, [bp + -19] ; $x1
6626   3003 2A            mov b, [d]
6627   3004 AC            mul a, b ; *
6628   3005 11            mov a, b
6629   3006 27            mov b, a
6630   3007 E4            pop a
6631   3008             ; END FACTORS
6632   3008 56            add b, a
6633   3009 E4            pop a
6634   300A             ; END TERMS
6635   300A E7            pop d
6636   300B FD 43         mov [d], b
6637   300D             ;; y = (800 * quad_x) + y + (n * x2); 
6638   300D FA E7 FF      lea d, [bp + -25] ; $y
6639   3010 DA            push d
6640   3011 26 20 03      mov b, $320
6641   3014             ; START FACTORS
6642   3014 D7            push a
6643   3015 11            mov a, b
6644   3016 3B ED 60      mov d, _quad_x ; $quad_x
6645   3019 2A            mov b, [d]
6646   301A AC            mul a, b ; *
6647   301B 11            mov a, b
6648   301C 27            mov b, a
6649   301D E4            pop a
6650   301E             ; END FACTORS
6651   301E             ; START TERMS
6652   301E D7            push a
6653   301F 11            mov a, b
6654   3020 FA E7 FF      lea d, [bp + -25] ; $y
6655   3023 2A            mov b, [d]
6656   3024 56            add b, a
6657   3025 11            mov a, b
6658   3026 FA F9 FF      lea d, [bp + -7] ; $n
6659   3029 2A            mov b, [d]
6660   302A             ; START FACTORS
6661   302A D7            push a
6662   302B 11            mov a, b
6663   302C FA EB FF      lea d, [bp + -21] ; $x2
6664   302F 2A            mov b, [d]
6665   3030 AC            mul a, b ; *
6666   3031 11            mov a, b
6667   3032 27            mov b, a
6668   3033 E4            pop a
6669   3034             ; END FACTORS
6670   3034 56            add b, a
6671   3035 E4            pop a
6672   3036             ; END TERMS
6673   3036 E7            pop d
6674   3037 FD 43         mov [d], b
6675   3039             ;; quad_y = x / 800;	/* Fixed point to int and divide by 8 */ 
6676   3039 3B EB 60      mov d, _quad_y ; $quad_y
6677   303C DA            push d
6678   303D FA E9 FF      lea d, [bp + -23] ; $x
6679   3040 2A            mov b, [d]
6680   3041             ; START FACTORS
6681   3041 D7            push a
6682   3042 11            mov a, b
6683   3043 26 20 03      mov b, $320
6684   3046 AE            div a, b
6685   3047 27            mov b, a
6686   3048 E4            pop a
6687   3049             ; END FACTORS
6688   3049 E7            pop d
6689   304A FD 43         mov [d], b
6690   304C             ;; quad_x = y / 800;	/* Ditto */ 
6691   304C 3B ED 60      mov d, _quad_x ; $quad_x
6692   304F DA            push d
6693   3050 FA E7 FF      lea d, [bp + -25] ; $y
6694   3053 2A            mov b, [d]
6695   3054             ; START FACTORS
6696   3054 D7            push a
6697   3055 11            mov a, b
6698   3056 26 20 03      mov b, $320
6699   3059 AE            div a, b
6700   305A 27            mov b, a
6701   305B E4            pop a
6702   305C             ; END FACTORS
6703   305C E7            pop d
6704   305D FD 43         mov [d], b
6705   305F             ;; ship_y = x - (quad_y * 800); 
6706   305F 3B 0A 61      mov d, _ship_y ; $ship_y
6707   3062 DA            push d
6708   3063 FA E9 FF      lea d, [bp + -23] ; $x
6709   3066 2A            mov b, [d]
6710   3067             ; START TERMS
6711   3067 D7            push a
6712   3068 11            mov a, b
6713   3069 3B EB 60      mov d, _quad_y ; $quad_y
6714   306C 2A            mov b, [d]
6715   306D             ; START FACTORS
6716   306D D7            push a
6717   306E 11            mov a, b
6718   306F 26 20 03      mov b, $320
6719   3072 AC            mul a, b ; *
6720   3073 11            mov a, b
6721   3074 27            mov b, a
6722   3075 E4            pop a
6723   3076             ; END FACTORS
6724   3076 60            sub a, b
6725   3077 27            mov b, a
6726   3078 E4            pop a
6727   3079             ; END TERMS
6728   3079 E7            pop d
6729   307A FD 43         mov [d], b
6730   307C             ;; ship_x = y - (quad_x * 800); 
6731   307C 3B 0C 61      mov d, _ship_x ; $ship_x
6732   307F DA            push d
6733   3080 FA E7 FF      lea d, [bp + -25] ; $y
6734   3083 2A            mov b, [d]
6735   3084             ; START TERMS
6736   3084 D7            push a
6737   3085 11            mov a, b
6738   3086 3B ED 60      mov d, _quad_x ; $quad_x
6739   3089 2A            mov b, [d]
6740   308A             ; START FACTORS
6741   308A D7            push a
6742   308B 11            mov a, b
6743   308C 26 20 03      mov b, $320
6744   308F AC            mul a, b ; *
6745   3090 11            mov a, b
6746   3091 27            mov b, a
6747   3092 E4            pop a
6748   3093             ; END FACTORS
6749   3093 60            sub a, b
6750   3094 27            mov b, a
6751   3095 E4            pop a
6752   3096             ; END TERMS
6753   3096 E7            pop d
6754   3097 FD 43         mov [d], b
6755   3099             ;; if (ship_y < 100) { 
6756   3099             _if102_cond:
6757   3099 3B 0A 61      mov d, _ship_y ; $ship_y
6758   309C 2A            mov b, [d]
6759   309D             ; START RELATIONAL
6760   309D D7            push a
6761   309E 11            mov a, b
6762   309F 26 64 00      mov b, $64
6763   30A2 B0            cmp a, b
6764   30A3 FD 73         slt ; < (signed)
6765   30A5 E4            pop a
6766   30A6             ; END RELATIONAL
6767   30A6 C0 00 00      cmp b, 0
6768   30A9 C6 D4 30      je _if102_exit
6769   30AC             _if102_true:
6770   30AC             ;; quad_y = quad_y - 1; 
6771   30AC 3B EB 60      mov d, _quad_y ; $quad_y
6772   30AF DA            push d
6773   30B0 3B EB 60      mov d, _quad_y ; $quad_y
6774   30B3 2A            mov b, [d]
6775   30B4             ; START TERMS
6776   30B4 D7            push a
6777   30B5 11            mov a, b
6778   30B6 26 01 00      mov b, $1
6779   30B9 60            sub a, b
6780   30BA 27            mov b, a
6781   30BB E4            pop a
6782   30BC             ; END TERMS
6783   30BC E7            pop d
6784   30BD FD 43         mov [d], b
6785   30BF             ;; ship_y = ship_y + 800; 
6786   30BF 3B 0A 61      mov d, _ship_y ; $ship_y
6787   30C2 DA            push d
6788   30C3 3B 0A 61      mov d, _ship_y ; $ship_y
6789   30C6 2A            mov b, [d]
6790   30C7             ; START TERMS
6791   30C7 D7            push a
6792   30C8 11            mov a, b
6793   30C9 26 20 03      mov b, $320
6794   30CC 56            add b, a
6795   30CD E4            pop a
6796   30CE             ; END TERMS
6797   30CE E7            pop d
6798   30CF FD 43         mov [d], b
6799   30D1 0A D4 30      jmp _if102_exit
6800   30D4             _if102_exit:
6801   30D4             ;; if (ship_x < 100) { 
6802   30D4             _if103_cond:
6803   30D4 3B 0C 61      mov d, _ship_x ; $ship_x
6804   30D7 2A            mov b, [d]
6805   30D8             ; START RELATIONAL
6806   30D8 D7            push a
6807   30D9 11            mov a, b
6808   30DA 26 64 00      mov b, $64
6809   30DD B0            cmp a, b
6810   30DE FD 73         slt ; < (signed)
6811   30E0 E4            pop a
6812   30E1             ; END RELATIONAL
6813   30E1 C0 00 00      cmp b, 0
6814   30E4 C6 0F 31      je _if103_exit
6815   30E7             _if103_true:
6816   30E7             ;; quad_x = quad_x - 1; 
6817   30E7 3B ED 60      mov d, _quad_x ; $quad_x
6818   30EA DA            push d
6819   30EB 3B ED 60      mov d, _quad_x ; $quad_x
6820   30EE 2A            mov b, [d]
6821   30EF             ; START TERMS
6822   30EF D7            push a
6823   30F0 11            mov a, b
6824   30F1 26 01 00      mov b, $1
6825   30F4 60            sub a, b
6826   30F5 27            mov b, a
6827   30F6 E4            pop a
6828   30F7             ; END TERMS
6829   30F7 E7            pop d
6830   30F8 FD 43         mov [d], b
6831   30FA             ;; ship_x = ship_x + 800; 
6832   30FA 3B 0C 61      mov d, _ship_x ; $ship_x
6833   30FD DA            push d
6834   30FE 3B 0C 61      mov d, _ship_x ; $ship_x
6835   3101 2A            mov b, [d]
6836   3102             ; START TERMS
6837   3102 D7            push a
6838   3103 11            mov a, b
6839   3104 26 20 03      mov b, $320
6840   3107 56            add b, a
6841   3108 E4            pop a
6842   3109             ; END TERMS
6843   3109 E7            pop d
6844   310A FD 43         mov [d], b
6845   310C 0A 0F 31      jmp _if103_exit
6846   310F             _if103_exit:
6847   310F             ;; if (quad_y < 1) { 
6848   310F             _if104_cond:
6849   310F 3B EB 60      mov d, _quad_y ; $quad_y
6850   3112 2A            mov b, [d]
6851   3113             ; START RELATIONAL
6852   3113 D7            push a
6853   3114 11            mov a, b
6854   3115 26 01 00      mov b, $1
6855   3118 B0            cmp a, b
6856   3119 FD 73         slt ; < (signed)
6857   311B E4            pop a
6858   311C             ; END RELATIONAL
6859   311C C0 00 00      cmp b, 0
6860   311F C6 43 31      je _if104_exit
6861   3122             _if104_true:
6862   3122             ;; outside = 1; 
6863   3122 FA E6 FF      lea d, [bp + -26] ; $outside
6864   3125 DA            push d
6865   3126 26 01 00      mov b, $1
6866   3129 E7            pop d
6867   312A FD 3E         mov [d], bl
6868   312C             ;; quad_y = 1; 
6869   312C 3B EB 60      mov d, _quad_y ; $quad_y
6870   312F DA            push d
6871   3130 26 01 00      mov b, $1
6872   3133 E7            pop d
6873   3134 FD 43         mov [d], b
6874   3136             ;; ship_y = 100; 
6875   3136 3B 0A 61      mov d, _ship_y ; $ship_y
6876   3139 DA            push d
6877   313A 26 64 00      mov b, $64
6878   313D E7            pop d
6879   313E FD 43         mov [d], b
6880   3140 0A 43 31      jmp _if104_exit
6881   3143             _if104_exit:
6882   3143             ;; if (quad_y > 8) { 
6883   3143             _if105_cond:
6884   3143 3B EB 60      mov d, _quad_y ; $quad_y
6885   3146 2A            mov b, [d]
6886   3147             ; START RELATIONAL
6887   3147 D7            push a
6888   3148 11            mov a, b
6889   3149 26 08 00      mov b, $8
6890   314C B0            cmp a, b
6891   314D FD 7F         sgt ; >
6892   314F E4            pop a
6893   3150             ; END RELATIONAL
6894   3150 C0 00 00      cmp b, 0
6895   3153 C6 77 31      je _if105_exit
6896   3156             _if105_true:
6897   3156             ;; outside = 1; 
6898   3156 FA E6 FF      lea d, [bp + -26] ; $outside
6899   3159 DA            push d
6900   315A 26 01 00      mov b, $1
6901   315D E7            pop d
6902   315E FD 3E         mov [d], bl
6903   3160             ;; quad_y = 8; 
6904   3160 3B EB 60      mov d, _quad_y ; $quad_y
6905   3163 DA            push d
6906   3164 26 08 00      mov b, $8
6907   3167 E7            pop d
6908   3168 FD 43         mov [d], b
6909   316A             ;; ship_y = 800; 
6910   316A 3B 0A 61      mov d, _ship_y ; $ship_y
6911   316D DA            push d
6912   316E 26 20 03      mov b, $320
6913   3171 E7            pop d
6914   3172 FD 43         mov [d], b
6915   3174 0A 77 31      jmp _if105_exit
6916   3177             _if105_exit:
6917   3177             ;; if (quad_x < 1) { 
6918   3177             _if106_cond:
6919   3177 3B ED 60      mov d, _quad_x ; $quad_x
6920   317A 2A            mov b, [d]
6921   317B             ; START RELATIONAL
6922   317B D7            push a
6923   317C 11            mov a, b
6924   317D 26 01 00      mov b, $1
6925   3180 B0            cmp a, b
6926   3181 FD 73         slt ; < (signed)
6927   3183 E4            pop a
6928   3184             ; END RELATIONAL
6929   3184 C0 00 00      cmp b, 0
6930   3187 C6 AB 31      je _if106_exit
6931   318A             _if106_true:
6932   318A             ;; outside = 1; 
6933   318A FA E6 FF      lea d, [bp + -26] ; $outside
6934   318D DA            push d
6935   318E 26 01 00      mov b, $1
6936   3191 E7            pop d
6937   3192 FD 3E         mov [d], bl
6938   3194             ;; quad_x = 1; 
6939   3194 3B ED 60      mov d, _quad_x ; $quad_x
6940   3197 DA            push d
6941   3198 26 01 00      mov b, $1
6942   319B E7            pop d
6943   319C FD 43         mov [d], b
6944   319E             ;; ship_x = 100; 
6945   319E 3B 0C 61      mov d, _ship_x ; $ship_x
6946   31A1 DA            push d
6947   31A2 26 64 00      mov b, $64
6948   31A5 E7            pop d
6949   31A6 FD 43         mov [d], b
6950   31A8 0A AB 31      jmp _if106_exit
6951   31AB             _if106_exit:
6952   31AB             ;; if (quad_x > 8) { 
6953   31AB             _if107_cond:
6954   31AB 3B ED 60      mov d, _quad_x ; $quad_x
6955   31AE 2A            mov b, [d]
6956   31AF             ; START RELATIONAL
6957   31AF D7            push a
6958   31B0 11            mov a, b
6959   31B1 26 08 00      mov b, $8
6960   31B4 B0            cmp a, b
6961   31B5 FD 7F         sgt ; >
6962   31B7 E4            pop a
6963   31B8             ; END RELATIONAL
6964   31B8 C0 00 00      cmp b, 0
6965   31BB C6 DF 31      je _if107_exit
6966   31BE             _if107_true:
6967   31BE             ;; outside = 1; 
6968   31BE FA E6 FF      lea d, [bp + -26] ; $outside
6969   31C1 DA            push d
6970   31C2 26 01 00      mov b, $1
6971   31C5 E7            pop d
6972   31C6 FD 3E         mov [d], bl
6973   31C8             ;; quad_x = 8; 
6974   31C8 3B ED 60      mov d, _quad_x ; $quad_x
6975   31CB DA            push d
6976   31CC 26 08 00      mov b, $8
6977   31CF E7            pop d
6978   31D0 FD 43         mov [d], b
6979   31D2             ;; ship_x = 800; 
6980   31D2 3B 0C 61      mov d, _ship_x ; $ship_x
6981   31D5 DA            push d
6982   31D6 26 20 03      mov b, $320
6983   31D9 E7            pop d
6984   31DA FD 43         mov [d], b
6985   31DC 0A DF 31      jmp _if107_exit
6986   31DF             _if107_exit:
6987   31DF             ;; if (outside == 1) { 
6988   31DF             _if108_cond:
6989   31DF FA E6 FF      lea d, [bp + -26] ; $outside
6990   31E2 32            mov bl, [d]
6991   31E3 A7 00         mov bh, 0
6992   31E5             ; START RELATIONAL
6993   31E5 D7            push a
6994   31E6 11            mov a, b
6995   31E7 26 01 00      mov b, $1
6996   31EA B0            cmp a, b
6997   31EB FD 71         seq ; ==
6998   31ED E4            pop a
6999   31EE             ; END RELATIONAL
7000   31EE C0 00 00      cmp b, 0
7001   31F1 C6 31 32      je _if108_exit
7002   31F4             _if108_true:
7003   31F4             ;; printf("LT. Uhura reports:\n Message from Starfleet Command:\n\n Permission to attempt crossing of galactic perimeter\n is hereby *denied*. Shut down your engines.\n\n Chief Engineer Scott reports:\n Warp Engines shut down at sector %d, %d of quadrant %d, %d.\n\n", FROM_FIXED00(ship_y), 
7004   31F4 3B ED 60      mov d, _quad_x ; $quad_x
7005   31F7 2A            mov b, [d]
7006   31F8 FD AB         swp b
7007   31FA D8            push b
7008   31FB 3B EB 60      mov d, _quad_y ; $quad_y
7009   31FE 2A            mov b, [d]
7010   31FF FD AB         swp b
7011   3201 D8            push b
7012   3202 3B 0C 61      mov d, _ship_x ; $ship_x
7013   3205 2A            mov b, [d]
7014   3206 FD AB         swp b
7015   3208 D8            push b
7016   3209 07 0B 1D      call FROM_FIXED00
7017   320C 51 02 00      add sp, 2
7018   320F FD AB         swp b
7019   3211 D8            push b
7020   3212 3B 0A 61      mov d, _ship_y ; $ship_y
7021   3215 2A            mov b, [d]
7022   3216 FD AB         swp b
7023   3218 D8            push b
7024   3219 07 0B 1D      call FROM_FIXED00
7025   321C 51 02 00      add sp, 2
7026   321F FD AB         swp b
7027   3221 D8            push b
out/startrek.asm line 7028: Label not found: (__s73)
out/startrek.asm line 7028: Unused data in MS byte of argument. (2)
7028   3222 26 00 00      mov b, __s73 ; "LT. Uhura reports:\n Message from Starfleet Command:\n\n Permission to attempt crossing of galactic perimeter\n is hereby *denied*. Shut down your engines.\n\n Chief Engineer Scott reports:\n Warp Engines shut down at sector %d, %d of quadrant %d, %d.\n\n"
7029   3225 FD AB         swp b
7030   3227 D8            push b
7031   3228 07 D1 05      call printf
7032   322B 51 0A 00      add sp, 10
7033   322E 0A 31 32      jmp _if108_exit
7034   3231             _if108_exit:
7035   3231             ;; maneuver_energy(n); 
7036   3231 FA F9 FF      lea d, [bp + -7] ; $n
7037   3234 2A            mov b, [d]
7038   3235 FD AB         swp b
7039   3237 D8            push b
7040   3238 07 20 34      call maneuver_energy
7041   323B 51 02 00      add sp, 2
7042   323E             ;; if (FROM_FIXED(stardate) > time_start + time_up) 
7043   323E             _if109_cond:
7044   323E 3B 0E 61      mov d, _stardate ; $stardate
7045   3241 2A            mov b, [d]
7046   3242 FD AB         swp b
7047   3244 D8            push b
7048   3245 07 E8 1C      call FROM_FIXED
7049   3248 51 02 00      add sp, 2
7050   324B             ; START RELATIONAL
7051   324B D7            push a
7052   324C 11            mov a, b
7053   324D 3B F2 60      mov d, _time_start ; $time_start
7054   3250 2A            mov b, [d]
7055   3251             ; START TERMS
7056   3251 D7            push a
7057   3252 11            mov a, b
7058   3253 3B F4 60      mov d, _time_up ; $time_up
7059   3256 2A            mov b, [d]
7060   3257 56            add b, a
7061   3258 E4            pop a
7062   3259             ; END TERMS
7063   3259 B0            cmp a, b
7064   325A FD 7F         sgt ; >
7065   325C E4            pop a
7066   325D             ; END RELATIONAL
7067   325D C0 00 00      cmp b, 0
7068   3260 C6 69 32      je _if109_exit
7069   3263             _if109_true:
7070   3263             ;; end_of_time(); 
7071   3263 07 83 54      call end_of_time
7072   3266 0A 69 32      jmp _if109_exit
7073   3269             _if109_exit:
7074   3269             ;; if (quad_y != quad_y_old || quad_x != quad_x_old) { 
7075   3269             _if110_cond:
7076   3269 3B EB 60      mov d, _quad_y ; $quad_y
7077   326C 2A            mov b, [d]
7078   326D             ; START RELATIONAL
7079   326D D7            push a
7080   326E 11            mov a, b
7081   326F FA E5 FF      lea d, [bp + -27] ; $quad_y_old
7082   3272 32            mov bl, [d]
7083   3273 A7 00         mov bh, 0
7084   3275 B0            cmp a, b
7085   3276 FD 72         sneq ; !=
7086   3278 E4            pop a
7087   3279             ; END RELATIONAL
7088   3279 D7            push a
7089   327A 11            mov a, b
7090   327B 3B ED 60      mov d, _quad_x ; $quad_x
7091   327E 2A            mov b, [d]
7092   327F             ; START RELATIONAL
7093   327F D7            push a
7094   3280 11            mov a, b
7095   3281 FA E4 FF      lea d, [bp + -28] ; $quad_x_old
7096   3284 32            mov bl, [d]
7097   3285 A7 00         mov bh, 0
7098   3287 B0            cmp a, b
7099   3288 FD 72         sneq ; !=
7100   328A E4            pop a
7101   328B             ; END RELATIONAL
7102   328B FD A8         sor a, b ; ||
7103   328D E4            pop a
7104   328E C0 00 00      cmp b, 0
7105   3291 C6 B5 32      je _if110_exit
7106   3294             _if110_true:
7107   3294             ;; stardate = stardate + TO_FIXED(1); 
7108   3294 3B 0E 61      mov d, _stardate ; $stardate
7109   3297 DA            push d
7110   3298 3B 0E 61      mov d, _stardate ; $stardate
7111   329B 2A            mov b, [d]
7112   329C             ; START TERMS
7113   329C D7            push a
7114   329D 11            mov a, b
7115   329E 26 01 00      mov b, $1
7116   32A1 FD AB         swp b
7117   32A3 D8            push b
7118   32A4 07 D6 1C      call TO_FIXED
7119   32A7 51 02 00      add sp, 2
7120   32AA 56            add b, a
7121   32AB E4            pop a
7122   32AC             ; END TERMS
7123   32AC E7            pop d
7124   32AD FD 43         mov [d], b
7125   32AF             ;; new_quadrant(); 
7126   32AF 07 E9 27      call new_quadrant
7127   32B2 0A B5 32      jmp _if110_exit
7128   32B5             _if110_exit:
7129   32B5             ;; complete_maneuver(warp, n); 
7130   32B5 FA F9 FF      lea d, [bp + -7] ; $n
7131   32B8 2A            mov b, [d]
7132   32B9 FD AB         swp b
7133   32BB D8            push b
7134   32BC FA FB FF      lea d, [bp + -5] ; $warp
7135   32BF 2A            mov b, [d]
7136   32C0 FD AB         swp b
7137   32C2 D8            push b
7138   32C3 07 81 33      call complete_maneuver
7139   32C6 51 04 00      add sp, 4
7140   32C9             ;; return; 
7141   32C9 F9            leave
7142   32CA 09            ret
7143   32CB 0A CE 32      jmp _if101_exit
7144   32CE             _if101_exit:
7145   32CE             ;; if (quad[z1+-1][z2+-1] !=  		0      ) {	/* Sector not empty */ 
7146   32CE             _if111_cond:
7147   32CE 3B 10 61      mov d, _quad_data ; $quad
7148   32D1 D7            push a
7149   32D2 DA            push d
7150   32D3 FA F1 FF      lea d, [bp + -15] ; $z1
7151   32D6 2A            mov b, [d]
7152   32D7             ; START TERMS
7153   32D7 D7            push a
7154   32D8 11            mov a, b
7155   32D9 26 FF FF      mov b, $ffff
7156   32DC 56            add b, a
7157   32DD E4            pop a
7158   32DE             ; END TERMS
7159   32DE E7            pop d
7160   32DF FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
7161   32E3 DA            push d
7162   32E4 FA EF FF      lea d, [bp + -17] ; $z2
7163   32E7 2A            mov b, [d]
7164   32E8             ; START TERMS
7165   32E8 D7            push a
7166   32E9 11            mov a, b
7167   32EA 26 FF FF      mov b, $ffff
7168   32ED 56            add b, a
7169   32EE E4            pop a
7170   32EF             ; END TERMS
7171   32EF E7            pop d
7172   32F0 5A            add d, b
7173   32F1 E4            pop a
7174   32F2 32            mov bl, [d]
7175   32F3 A7 00         mov bh, 0
7176   32F5             ; START RELATIONAL
7177   32F5 D7            push a
7178   32F6 11            mov a, b
7179   32F7 26 00 00      mov b, $0
7180   32FA B0            cmp a, b
7181   32FB FD 72         sneq ; !=
7182   32FD E4            pop a
7183   32FE             ; END RELATIONAL
7184   32FE C0 00 00      cmp b, 0
7185   3301 C6 5B 33      je _if111_exit
7186   3304             _if111_true:
7187   3304             ;; ship_y = ship_y - x1; 
7188   3304 3B 0A 61      mov d, _ship_y ; $ship_y
7189   3307 DA            push d
7190   3308 3B 0A 61      mov d, _ship_y ; $ship_y
7191   330B 2A            mov b, [d]
7192   330C             ; START TERMS
7193   330C D7            push a
7194   330D 11            mov a, b
7195   330E FA ED FF      lea d, [bp + -19] ; $x1
7196   3311 2A            mov b, [d]
7197   3312 60            sub a, b
7198   3313 27            mov b, a
7199   3314 E4            pop a
7200   3315             ; END TERMS
7201   3315 E7            pop d
7202   3316 FD 43         mov [d], b
7203   3318             ;; ship_x = ship_x - x2; 
7204   3318 3B 0C 61      mov d, _ship_x ; $ship_x
7205   331B DA            push d
7206   331C 3B 0C 61      mov d, _ship_x ; $ship_x
7207   331F 2A            mov b, [d]
7208   3320             ; START TERMS
7209   3320 D7            push a
7210   3321 11            mov a, b
7211   3322 FA EB FF      lea d, [bp + -21] ; $x2
7212   3325 2A            mov b, [d]
7213   3326 60            sub a, b
7214   3327 27            mov b, a
7215   3328 E4            pop a
7216   3329             ; END TERMS
7217   3329 E7            pop d
7218   332A FD 43         mov [d], b
7219   332C             ;; printf("Warp Engines shut down at sector %d, %d due to bad navigation.\n\n", z1, z2); 
7220   332C FA EF FF      lea d, [bp + -17] ; $z2
7221   332F 2A            mov b, [d]
7222   3330 FD AB         swp b
7223   3332 D8            push b
7224   3333 FA F1 FF      lea d, [bp + -15] ; $z1
7225   3336 2A            mov b, [d]
7226   3337 FD AB         swp b
7227   3339 D8            push b
out/startrek.asm line 7228: Label not found: (__s74)
out/startrek.asm line 7228: Unused data in MS byte of argument. (2)
7228   333A 26 00 00      mov b, __s74 ; "Warp Engines shut down at sector %d, %d due to bad navigation.\n\n"
7229   333D FD AB         swp b
7230   333F D8            push b
7231   3340 07 D1 05      call printf
7232   3343 51 06 00      add sp, 6
7233   3346             ;; i = n + 1; 
7234   3346 FA FF FF      lea d, [bp + -1] ; $i
7235   3349 DA            push d
7236   334A FA F9 FF      lea d, [bp + -7] ; $n
7237   334D 2A            mov b, [d]
7238   334E             ; START TERMS
7239   334E D7            push a
7240   334F 11            mov a, b
7241   3350 26 01 00      mov b, $1
7242   3353 56            add b, a
7243   3354 E4            pop a
7244   3355             ; END TERMS
7245   3355 E7            pop d
7246   3356 FD 43         mov [d], b
7247   3358 0A 5B 33      jmp _if111_exit
7248   335B             _if111_exit:
7249   335B             _for100_update:
7250   335B FA FF FF      lea d, [bp + -1] ; $i
7251   335E 2A            mov b, [d]
7252   335F D8            push b
7253   3360 FD 77         inc b
7254   3362 FA FF FF      lea d, [bp + -1] ; $i
7255   3365 FD 43         mov [d], b
7256   3367 E5            pop b
7257   3368 0A 1A 2F      jmp _for100_cond
7258   336B             _for100_exit:
7259   336B             ;; complete_maneuver(warp, n); 
7260   336B FA F9 FF      lea d, [bp + -7] ; $n
7261   336E 2A            mov b, [d]
7262   336F FD AB         swp b
7263   3371 D8            push b
7264   3372 FA FB FF      lea d, [bp + -5] ; $warp
7265   3375 2A            mov b, [d]
7266   3376 FD AB         swp b
7267   3378 D8            push b
7268   3379 07 81 33      call complete_maneuver
7269   337C 51 04 00      add sp, 4
7270   337F F9            leave
7271   3380 09            ret
7272   3381             
7273   3381             complete_maneuver:
7274   3381 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7275   3384             ; $time_used 
7276   3384 52 02 00      sub sp, 2
7277   3387             ;; place_ship(); 
7278   3387 07 A5 27      call place_ship
7279   338A             ;; maneuver_energy(n); 
7280   338A FA 07 00      lea d, [bp + 7] ; $n
7281   338D 2A            mov b, [d]
7282   338E FD AB         swp b
7283   3390 D8            push b
7284   3391 07 20 34      call maneuver_energy
7285   3394 51 02 00      add sp, 2
7286   3397             ;; time_used = TO_FIXED(1); 
7287   3397 FA FF FF      lea d, [bp + -1] ; $time_used
7288   339A DA            push d
7289   339B 26 01 00      mov b, $1
7290   339E FD AB         swp b
7291   33A0 D8            push b
7292   33A1 07 D6 1C      call TO_FIXED
7293   33A4 51 02 00      add sp, 2
7294   33A7 E7            pop d
7295   33A8 FD 43         mov [d], b
7296   33AA             ;; if (warp < 100) 
7297   33AA             _if112_cond:
7298   33AA FA 05 00      lea d, [bp + 5] ; $warp
7299   33AD 2A            mov b, [d]
7300   33AE             ; START RELATIONAL
7301   33AE D7            push a
7302   33AF 11            mov a, b
7303   33B0 26 64 00      mov b, $64
7304   33B3 B0            cmp a, b
7305   33B4 FD 75         slu ; < (unsigned)
7306   33B6 E4            pop a
7307   33B7             ; END RELATIONAL
7308   33B7 C0 00 00      cmp b, 0
7309   33BA C6 DD 33      je _if112_exit
7310   33BD             _if112_true:
7311   33BD             ;; time_used = TO_FIXED(FROM_FIXED00(warp)); 
7312   33BD FA FF FF      lea d, [bp + -1] ; $time_used
7313   33C0 DA            push d
7314   33C1 FA 05 00      lea d, [bp + 5] ; $warp
7315   33C4 2A            mov b, [d]
7316   33C5 FD AB         swp b
7317   33C7 D8            push b
7318   33C8 07 0B 1D      call FROM_FIXED00
7319   33CB 51 02 00      add sp, 2
7320   33CE FD AB         swp b
7321   33D0 D8            push b
7322   33D1 07 D6 1C      call TO_FIXED
7323   33D4 51 02 00      add sp, 2
7324   33D7 E7            pop d
7325   33D8 FD 43         mov [d], b
7326   33DA 0A DD 33      jmp _if112_exit
7327   33DD             _if112_exit:
7328   33DD             ;; stardate = stardate + time_used; 
7329   33DD 3B 0E 61      mov d, _stardate ; $stardate
7330   33E0 DA            push d
7331   33E1 3B 0E 61      mov d, _stardate ; $stardate
7332   33E4 2A            mov b, [d]
7333   33E5             ; START TERMS
7334   33E5 D7            push a
7335   33E6 11            mov a, b
7336   33E7 FA FF FF      lea d, [bp + -1] ; $time_used
7337   33EA 2A            mov b, [d]
7338   33EB 56            add b, a
7339   33EC E4            pop a
7340   33ED             ; END TERMS
7341   33ED E7            pop d
7342   33EE FD 43         mov [d], b
7343   33F0             ;; if (FROM_FIXED(stardate) > time_start + time_up) 
7344   33F0             _if113_cond:
7345   33F0 3B 0E 61      mov d, _stardate ; $stardate
7346   33F3 2A            mov b, [d]
7347   33F4 FD AB         swp b
7348   33F6 D8            push b
7349   33F7 07 E8 1C      call FROM_FIXED
7350   33FA 51 02 00      add sp, 2
7351   33FD             ; START RELATIONAL
7352   33FD D7            push a
7353   33FE 11            mov a, b
7354   33FF 3B F2 60      mov d, _time_start ; $time_start
7355   3402 2A            mov b, [d]
7356   3403             ; START TERMS
7357   3403 D7            push a
7358   3404 11            mov a, b
7359   3405 3B F4 60      mov d, _time_up ; $time_up
7360   3408 2A            mov b, [d]
7361   3409 56            add b, a
7362   340A E4            pop a
7363   340B             ; END TERMS
7364   340B B0            cmp a, b
7365   340C FD 7F         sgt ; >
7366   340E E4            pop a
7367   340F             ; END RELATIONAL
7368   340F C0 00 00      cmp b, 0
7369   3412 C6 1B 34      je _if113_exit
7370   3415             _if113_true:
7371   3415             ;; end_of_time(); 
7372   3415 07 83 54      call end_of_time
7373   3418 0A 1B 34      jmp _if113_exit
7374   341B             _if113_exit:
7375   341B             ;; short_range_scan(); 
7376   341B 07 9F 34      call short_range_scan
7377   341E F9            leave
7378   341F 09            ret
7379   3420             
7380   3420             maneuver_energy:
7381   3420 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7382   3423             ;; energy = energy - n + 10; 
7383   3423 3B 34 60      mov d, _energy ; $energy
7384   3426 DA            push d
7385   3427 3B 34 60      mov d, _energy ; $energy
7386   342A 2A            mov b, [d]
7387   342B             ; START TERMS
7388   342B D7            push a
7389   342C 11            mov a, b
7390   342D FA 05 00      lea d, [bp + 5] ; $n
7391   3430 2A            mov b, [d]
7392   3431 60            sub a, b
7393   3432 27            mov b, a
7394   3433 11            mov a, b
7395   3434 26 0A 00      mov b, $a
7396   3437 56            add b, a
7397   3438 E4            pop a
7398   3439             ; END TERMS
7399   3439 E7            pop d
7400   343A FD 43         mov [d], b
7401   343C             ;; if (energy >= 0) 
7402   343C             _if114_cond:
7403   343C 3B 34 60      mov d, _energy ; $energy
7404   343F 2A            mov b, [d]
7405   3440             ; START RELATIONAL
7406   3440 D7            push a
7407   3441 11            mov a, b
7408   3442 26 00 00      mov b, $0
7409   3445 B0            cmp a, b
7410   3446 FD 80         sge ; >=
7411   3448 E4            pop a
7412   3449             ; END RELATIONAL
7413   3449 C0 00 00      cmp b, 0
7414   344C C6 54 34      je _if114_exit
7415   344F             _if114_true:
7416   344F             ;; return; 
7417   344F F9            leave
7418   3450 09            ret
7419   3451 0A 54 34      jmp _if114_exit
7420   3454             _if114_exit:
7421   3454             ;; puts("Shield Control supplies energy to complete maneuver.\n"); 
out/startrek.asm line 7422: Label not found: (__s75)
out/startrek.asm line 7422: Unused data in MS byte of argument. (2)
7422   3454 26 00 00      mov b, __s75 ; "Shield Control supplies energy to complete maneuver.\n"
7423   3457 FD AB         swp b
7424   3459 D8            push b
7425   345A 07 31 13      call puts
7426   345D 51 02 00      add sp, 2
7427   3460             ;; shield = shield + energy; 
7428   3460 3B EF 60      mov d, _shield ; $shield
7429   3463 DA            push d
7430   3464 3B EF 60      mov d, _shield ; $shield
7431   3467 2A            mov b, [d]
7432   3468             ; START TERMS
7433   3468 D7            push a
7434   3469 11            mov a, b
7435   346A 3B 34 60      mov d, _energy ; $energy
7436   346D 2A            mov b, [d]
7437   346E 56            add b, a
7438   346F E4            pop a
7439   3470             ; END TERMS
7440   3470 E7            pop d
7441   3471 FD 43         mov [d], b
7442   3473             ;; energy = 0; 
7443   3473 3B 34 60      mov d, _energy ; $energy
7444   3476 DA            push d
7445   3477 26 00 00      mov b, $0
7446   347A E7            pop d
7447   347B FD 43         mov [d], b
7448   347D             ;; if (shield <= 0) 
7449   347D             _if115_cond:
7450   347D 3B EF 60      mov d, _shield ; $shield
7451   3480 2A            mov b, [d]
7452   3481             ; START RELATIONAL
7453   3481 D7            push a
7454   3482 11            mov a, b
7455   3483 26 00 00      mov b, $0
7456   3486 B0            cmp a, b
7457   3487 FD 73         slt ; <= (signed)
7458   3489 E4            pop a
7459   348A             ; END RELATIONAL
7460   348A C0 00 00      cmp b, 0
7461   348D C6 9D 34      je _if115_exit
7462   3490             _if115_true:
7463   3490             ;; shield = 0; 
7464   3490 3B EF 60      mov d, _shield ; $shield
7465   3493 DA            push d
7466   3494 26 00 00      mov b, $0
7467   3497 E7            pop d
7468   3498 FD 43         mov [d], b
7469   349A 0A 9D 34      jmp _if115_exit
7470   349D             _if115_exit:
7471   349D F9            leave
7472   349E 09            ret
7473   349F             
7474   349F             short_range_scan:
7475   349F F8 00 00      enter 0 ; (push bp; mov bp, sp)
7476   34A2             ; $i 
7477   34A2             ; $j 
7478   34A2             ; $sC 
7479   34A2 10 E8 62      mov a, _sC_data
7480   34A5 45 FB FF      mov [bp + -5], a
7481   34A8 52 06 00      sub sp, 6
7482   34AB             ;; if (energy < energy0 / 10) 
7483   34AB             _if116_cond:
7484   34AB 3B 34 60      mov d, _energy ; $energy
7485   34AE 2A            mov b, [d]
7486   34AF             ; START RELATIONAL
7487   34AF D7            push a
7488   34B0 11            mov a, b
7489   34B1 3B 36 60      mov d, _energy0 ; $energy0
7490   34B4 2A            mov b, [d]
7491   34B5             ; START FACTORS
7492   34B5 D7            push a
7493   34B6 11            mov a, b
7494   34B7 26 0A 00      mov b, $a
7495   34BA AE            div a, b
7496   34BB 27            mov b, a
7497   34BC E4            pop a
7498   34BD             ; END FACTORS
7499   34BD B0            cmp a, b
7500   34BE FD 73         slt ; < (signed)
7501   34C0 E4            pop a
7502   34C1             ; END RELATIONAL
7503   34C1 C0 00 00      cmp b, 0
7504   34C4 C6 D4 34      je _if116_exit
7505   34C7             _if116_true:
7506   34C7             ;; sC = "YELLOW"; 
7507   34C7 FA FB FF      lea d, [bp + -5] ; $sC
7508   34CA DA            push d
out/startrek.asm line 7509: Label not found: (__s76)
out/startrek.asm line 7509: Unused data in MS byte of argument. (2)
7509   34CB 26 00 00      mov b, __s76 ; "YELLOW"
7510   34CE E7            pop d
7511   34CF FD 43         mov [d], b
7512   34D1 0A D4 34      jmp _if116_exit
7513   34D4             _if116_exit:
7514   34D4             ;; if (klingons > 0) 
7515   34D4             _if117_cond:
7516   34D4 3B E6 60      mov d, _klingons ; $klingons
7517   34D7 32            mov bl, [d]
7518   34D8 A7 00         mov bh, 0
7519   34DA             ; START RELATIONAL
7520   34DA D7            push a
7521   34DB 11            mov a, b
7522   34DC 26 00 00      mov b, $0
7523   34DF B0            cmp a, b
7524   34E0 FD 81         sgu ; > (unsigned)
7525   34E2 E4            pop a
7526   34E3             ; END RELATIONAL
7527   34E3 C0 00 00      cmp b, 0
7528   34E6 C6 F6 34      je _if117_exit
7529   34E9             _if117_true:
7530   34E9             ;; sC = "*RED*"; 
7531   34E9 FA FB FF      lea d, [bp + -5] ; $sC
7532   34EC DA            push d
out/startrek.asm line 7533: Label not found: (__s77)
out/startrek.asm line 7533: Unused data in MS byte of argument. (2)
7533   34ED 26 00 00      mov b, __s77 ; "*RED*"
7534   34F0 E7            pop d
7535   34F1 FD 43         mov [d], b
7536   34F3 0A F6 34      jmp _if117_exit
7537   34F6             _if117_exit:
7538   34F6             ;; docked = 0; 
7539   34F6 3B 33 60      mov d, _docked ; $docked
7540   34F9 DA            push d
7541   34FA 26 00 00      mov b, $0
7542   34FD E7            pop d
7543   34FE FD 3E         mov [d], bl
7544   3500             ;; for (i = (int) (FROM_FIXED00(ship_y) - 1); i <= (int) (FROM_FIXED00(ship_y) + 1); i++) 
7545   3500             _for118_init:
7546   3500 FA FF FF      lea d, [bp + -1] ; $i
7547   3503 DA            push d
7548   3504 3B 0A 61      mov d, _ship_y ; $ship_y
7549   3507 2A            mov b, [d]
7550   3508 FD AB         swp b
7551   350A D8            push b
7552   350B 07 0B 1D      call FROM_FIXED00
7553   350E 51 02 00      add sp, 2
7554   3511             ; START TERMS
7555   3511 D7            push a
7556   3512 11            mov a, b
7557   3513 26 01 00      mov b, $1
7558   3516 60            sub a, b
7559   3517 27            mov b, a
7560   3518 E4            pop a
7561   3519             ; END TERMS
7562   3519 E7            pop d
7563   351A FD 43         mov [d], b
7564   351C             _for118_cond:
7565   351C FA FF FF      lea d, [bp + -1] ; $i
7566   351F 2A            mov b, [d]
7567   3520             ; START RELATIONAL
7568   3520 D7            push a
7569   3521 11            mov a, b
7570   3522 3B 0A 61      mov d, _ship_y ; $ship_y
7571   3525 2A            mov b, [d]
7572   3526 FD AB         swp b
7573   3528 D8            push b
7574   3529 07 0B 1D      call FROM_FIXED00
7575   352C 51 02 00      add sp, 2
7576   352F             ; START TERMS
7577   352F D7            push a
7578   3530 11            mov a, b
7579   3531 26 01 00      mov b, $1
7580   3534 56            add b, a
7581   3535 E4            pop a
7582   3536             ; END TERMS
7583   3536 B0            cmp a, b
7584   3537 FD 73         slt ; <= (signed)
7585   3539 E4            pop a
7586   353A             ; END RELATIONAL
7587   353A C0 00 00      cmp b, 0
7588   353D C6 63 36      je _for118_exit
7589   3540             _for118_block:
7590   3540             ;; for (j = (int) (FROM_FIXED00(ship_x) - 1); j <= (int) (FROM_FIXED00(ship_x) + 1); j++) 
7591   3540             _for119_init:
7592   3540 FA FD FF      lea d, [bp + -3] ; $j
7593   3543 DA            push d
7594   3544 3B 0C 61      mov d, _ship_x ; $ship_x
7595   3547 2A            mov b, [d]
7596   3548 FD AB         swp b
7597   354A D8            push b
7598   354B 07 0B 1D      call FROM_FIXED00
7599   354E 51 02 00      add sp, 2
7600   3551             ; START TERMS
7601   3551 D7            push a
7602   3552 11            mov a, b
7603   3553 26 01 00      mov b, $1
7604   3556 60            sub a, b
7605   3557 27            mov b, a
7606   3558 E4            pop a
7607   3559             ; END TERMS
7608   3559 E7            pop d
7609   355A FD 43         mov [d], b
7610   355C             _for119_cond:
7611   355C FA FD FF      lea d, [bp + -3] ; $j
7612   355F 2A            mov b, [d]
7613   3560             ; START RELATIONAL
7614   3560 D7            push a
7615   3561 11            mov a, b
7616   3562 3B 0C 61      mov d, _ship_x ; $ship_x
7617   3565 2A            mov b, [d]
7618   3566 FD AB         swp b
7619   3568 D8            push b
7620   3569 07 0B 1D      call FROM_FIXED00
7621   356C 51 02 00      add sp, 2
7622   356F             ; START TERMS
7623   356F D7            push a
7624   3570 11            mov a, b
7625   3571 26 01 00      mov b, $1
7626   3574 56            add b, a
7627   3575 E4            pop a
7628   3576             ; END TERMS
7629   3576 B0            cmp a, b
7630   3577 FD 73         slt ; <= (signed)
7631   3579 E4            pop a
7632   357A             ; END RELATIONAL
7633   357A C0 00 00      cmp b, 0
7634   357D C6 53 36      je _for119_exit
7635   3580             _for119_block:
7636   3580             ;; if (i >= 1 && i <= 8 && j >= 1 && j <= 8) { 
7637   3580             _if120_cond:
7638   3580 FA FF FF      lea d, [bp + -1] ; $i
7639   3583 2A            mov b, [d]
7640   3584             ; START RELATIONAL
7641   3584 D7            push a
7642   3585 11            mov a, b
7643   3586 26 01 00      mov b, $1
7644   3589 B0            cmp a, b
7645   358A FD 80         sge ; >=
7646   358C E4            pop a
7647   358D             ; END RELATIONAL
7648   358D D7            push a
7649   358E 11            mov a, b
7650   358F FA FF FF      lea d, [bp + -1] ; $i
7651   3592 2A            mov b, [d]
7652   3593             ; START RELATIONAL
7653   3593 D7            push a
7654   3594 11            mov a, b
7655   3595 26 08 00      mov b, $8
7656   3598 B0            cmp a, b
7657   3599 FD 73         slt ; <= (signed)
7658   359B E4            pop a
7659   359C             ; END RELATIONAL
7660   359C FD A7         sand a, b
7661   359E 11            mov a, b
7662   359F FA FD FF      lea d, [bp + -3] ; $j
7663   35A2 2A            mov b, [d]
7664   35A3             ; START RELATIONAL
7665   35A3 D7            push a
7666   35A4 11            mov a, b
7667   35A5 26 01 00      mov b, $1
7668   35A8 B0            cmp a, b
7669   35A9 FD 80         sge ; >=
7670   35AB E4            pop a
7671   35AC             ; END RELATIONAL
7672   35AC FD A7         sand a, b
7673   35AE 11            mov a, b
7674   35AF FA FD FF      lea d, [bp + -3] ; $j
7675   35B2 2A            mov b, [d]
7676   35B3             ; START RELATIONAL
7677   35B3 D7            push a
7678   35B4 11            mov a, b
7679   35B5 26 08 00      mov b, $8
7680   35B8 B0            cmp a, b
7681   35B9 FD 73         slt ; <= (signed)
7682   35BB E4            pop a
7683   35BC             ; END RELATIONAL
7684   35BC FD A7         sand a, b
7685   35BE E4            pop a
7686   35BF C0 00 00      cmp b, 0
7687   35C2 C6 43 36      je _if120_exit
7688   35C5             _if120_true:
7689   35C5             ;; if (quad[i+-1][j+-1] ==  		2     ) { 
7690   35C5             _if121_cond:
7691   35C5 3B 10 61      mov d, _quad_data ; $quad
7692   35C8 D7            push a
7693   35C9 DA            push d
7694   35CA FA FF FF      lea d, [bp + -1] ; $i
7695   35CD 2A            mov b, [d]
7696   35CE             ; START TERMS
7697   35CE D7            push a
7698   35CF 11            mov a, b
7699   35D0 26 FF FF      mov b, $ffff
7700   35D3 56            add b, a
7701   35D4 E4            pop a
7702   35D5             ; END TERMS
7703   35D5 E7            pop d
7704   35D6 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
7705   35DA DA            push d
7706   35DB FA FD FF      lea d, [bp + -3] ; $j
7707   35DE 2A            mov b, [d]
7708   35DF             ; START TERMS
7709   35DF D7            push a
7710   35E0 11            mov a, b
7711   35E1 26 FF FF      mov b, $ffff
7712   35E4 56            add b, a
7713   35E5 E4            pop a
7714   35E6             ; END TERMS
7715   35E6 E7            pop d
7716   35E7 5A            add d, b
7717   35E8 E4            pop a
7718   35E9 32            mov bl, [d]
7719   35EA A7 00         mov bh, 0
7720   35EC             ; START RELATIONAL
7721   35EC D7            push a
7722   35ED 11            mov a, b
7723   35EE 26 02 00      mov b, $2
7724   35F1 B0            cmp a, b
7725   35F2 FD 71         seq ; ==
7726   35F4 E4            pop a
7727   35F5             ; END RELATIONAL
7728   35F5 C0 00 00      cmp b, 0
7729   35F8 C6 40 36      je _if121_exit
7730   35FB             _if121_true:
7731   35FB             ;; docked = 1; 
7732   35FB 3B 33 60      mov d, _docked ; $docked
7733   35FE DA            push d
7734   35FF 26 01 00      mov b, $1
7735   3602 E7            pop d
7736   3603 FD 3E         mov [d], bl
7737   3605             ;; sC = "DOCKED"; 
7738   3605 FA FB FF      lea d, [bp + -5] ; $sC
7739   3608 DA            push d
out/startrek.asm line 7740: Label not found: (__s78)
out/startrek.asm line 7740: Unused data in MS byte of argument. (2)
7740   3609 26 00 00      mov b, __s78 ; "DOCKED"
7741   360C E7            pop d
7742   360D FD 43         mov [d], b
7743   360F             ;; energy = energy0; 
7744   360F 3B 34 60      mov d, _energy ; $energy
7745   3612 DA            push d
7746   3613 3B 36 60      mov d, _energy0 ; $energy0
7747   3616 2A            mov b, [d]
7748   3617 E7            pop d
7749   3618 FD 43         mov [d], b
7750   361A             ;; torps = torps0; 
7751   361A 3B E9 60      mov d, _torps ; $torps
7752   361D DA            push d
7753   361E 3B EA 60      mov d, _torps0 ; $torps0
7754   3621 32            mov bl, [d]
7755   3622 A7 00         mov bh, 0
7756   3624 E7            pop d
7757   3625 FD 3E         mov [d], bl
7758   3627             ;; puts("Shields dropped for docking purposes."); 
out/startrek.asm line 7759: Label not found: (__s79)
out/startrek.asm line 7759: Unused data in MS byte of argument. (2)
7759   3627 26 00 00      mov b, __s79 ; "Shields dropped for docking purposes."
7760   362A FD AB         swp b
7761   362C D8            push b
7762   362D 07 31 13      call puts
7763   3630 51 02 00      add sp, 2
7764   3633             ;; shield = 0; 
7765   3633 3B EF 60      mov d, _shield ; $shield
7766   3636 DA            push d
7767   3637 26 00 00      mov b, $0
7768   363A E7            pop d
7769   363B FD 43         mov [d], b
7770   363D 0A 40 36      jmp _if121_exit
7771   3640             _if121_exit:
7772   3640 0A 43 36      jmp _if120_exit
7773   3643             _if120_exit:
7774   3643             _for119_update:
7775   3643 FA FD FF      lea d, [bp + -3] ; $j
7776   3646 2A            mov b, [d]
7777   3647 D8            push b
7778   3648 FD 77         inc b
7779   364A FA FD FF      lea d, [bp + -3] ; $j
7780   364D FD 43         mov [d], b
7781   364F E5            pop b
7782   3650 0A 5C 35      jmp _for119_cond
7783   3653             _for119_exit:
7784   3653             _for118_update:
7785   3653 FA FF FF      lea d, [bp + -1] ; $i
7786   3656 2A            mov b, [d]
7787   3657 D8            push b
7788   3658 FD 77         inc b
7789   365A FA FF FF      lea d, [bp + -1] ; $i
7790   365D FD 43         mov [d], b
7791   365F E5            pop b
7792   3660 0A 1C 35      jmp _for118_cond
7793   3663             _for118_exit:
7794   3663             ;; if (damage[2] < 0) { 
7795   3663             _if122_cond:
7796   3663 3B F6 60      mov d, _damage_data ; $damage
7797   3666 D7            push a
7798   3667 DA            push d
7799   3668 26 02 00      mov b, $2
7800   366B E7            pop d
7801   366C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
7802   3670 E4            pop a
7803   3671 2A            mov b, [d]
7804   3672             ; START RELATIONAL
7805   3672 D7            push a
7806   3673 11            mov a, b
7807   3674 26 00 00      mov b, $0
7808   3677 B0            cmp a, b
7809   3678 FD 73         slt ; < (signed)
7810   367A E4            pop a
7811   367B             ; END RELATIONAL
7812   367B C0 00 00      cmp b, 0
7813   367E C6 92 36      je _if122_exit
7814   3681             _if122_true:
7815   3681             ;; puts("\n*** Short Range Sensors are out ***"); 
out/startrek.asm line 7816: Label not found: (__s80)
out/startrek.asm line 7816: Unused data in MS byte of argument. (2)
7816   3681 26 00 00      mov b, __s80 ; "\n*** Short Range Sensors are out ***"
7817   3684 FD AB         swp b
7818   3686 D8            push b
7819   3687 07 31 13      call puts
7820   368A 51 02 00      add sp, 2
7821   368D             ;; return; 
7822   368D F9            leave
7823   368E 09            ret
7824   368F 0A 92 36      jmp _if122_exit
7825   3692             _if122_exit:
7826   3692             ;; puts(srs_1); 
7827   3692 3B 2A 62      mov d, _srs_1 ; $srs_1
7828   3695 2A            mov b, [d]
7829   3696 FD AB         swp b
7830   3698 D8            push b
7831   3699 07 31 13      call puts
7832   369C 51 02 00      add sp, 2
7833   369F             ;; for (i = 0; i < 8; i++) { 
7834   369F             _for123_init:
7835   369F FA FF FF      lea d, [bp + -1] ; $i
7836   36A2 DA            push d
7837   36A3 26 00 00      mov b, $0
7838   36A6 E7            pop d
7839   36A7 FD 43         mov [d], b
7840   36A9             _for123_cond:
7841   36A9 FA FF FF      lea d, [bp + -1] ; $i
7842   36AC 2A            mov b, [d]
7843   36AD             ; START RELATIONAL
7844   36AD D7            push a
7845   36AE 11            mov a, b
7846   36AF 26 08 00      mov b, $8
7847   36B2 B0            cmp a, b
7848   36B3 FD 73         slt ; < (signed)
7849   36B5 E4            pop a
7850   36B6             ; END RELATIONAL
7851   36B6 C0 00 00      cmp b, 0
7852   36B9 C6 A0 38      je _for123_exit
7853   36BC             _for123_block:
7854   36BC             ;; for (j = 0; j < 8; j++) 
7855   36BC             _for124_init:
7856   36BC FA FD FF      lea d, [bp + -3] ; $j
7857   36BF DA            push d
7858   36C0 26 00 00      mov b, $0
7859   36C3 E7            pop d
7860   36C4 FD 43         mov [d], b
7861   36C6             _for124_cond:
7862   36C6 FA FD FF      lea d, [bp + -3] ; $j
7863   36C9 2A            mov b, [d]
7864   36CA             ; START RELATIONAL
7865   36CA D7            push a
7866   36CB 11            mov a, b
7867   36CC 26 08 00      mov b, $8
7868   36CF B0            cmp a, b
7869   36D0 FD 73         slt ; < (signed)
7870   36D2 E4            pop a
7871   36D3             ; END RELATIONAL
7872   36D3 C0 00 00      cmp b, 0
7873   36D6 C6 17 37      je _for124_exit
7874   36D9             _for124_block:
7875   36D9             ;; puts(tilestr[quad[i][j]]); 
7876   36D9 3B 2C 62      mov d, _tilestr_data ; $tilestr
7877   36DC D7            push a
7878   36DD DA            push d
7879   36DE 3B 10 61      mov d, _quad_data ; $quad
7880   36E1 D7            push a
7881   36E2 DA            push d
7882   36E3 FA FF FF      lea d, [bp + -1] ; $i
7883   36E6 2A            mov b, [d]
7884   36E7 E7            pop d
7885   36E8 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
7886   36EC DA            push d
7887   36ED FA FD FF      lea d, [bp + -3] ; $j
7888   36F0 2A            mov b, [d]
7889   36F1 E7            pop d
7890   36F2 5A            add d, b
7891   36F3 E4            pop a
7892   36F4 32            mov bl, [d]
7893   36F5 A7 00         mov bh, 0
7894   36F7 E7            pop d
7895   36F8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
7896   36FC E4            pop a
7897   36FD 2A            mov b, [d]
7898   36FE FD AB         swp b
7899   3700 D8            push b
7900   3701 07 31 13      call puts
7901   3704 51 02 00      add sp, 2
7902   3707             _for124_update:
7903   3707 FA FD FF      lea d, [bp + -3] ; $j
7904   370A 2A            mov b, [d]
7905   370B D8            push b
7906   370C FD 77         inc b
7907   370E FA FD FF      lea d, [bp + -3] ; $j
7908   3711 FD 43         mov [d], b
7909   3713 E5            pop b
7910   3714 0A C6 36      jmp _for124_cond
7911   3717             _for124_exit:
7912   3717             ;; if (i == 0) 
7913   3717             _if125_cond:
7914   3717 FA FF FF      lea d, [bp + -1] ; $i
7915   371A 2A            mov b, [d]
7916   371B             ; START RELATIONAL
7917   371B D7            push a
7918   371C 11            mov a, b
7919   371D 26 00 00      mov b, $0
7920   3720 B0            cmp a, b
7921   3721 FD 71         seq ; ==
7922   3723 E4            pop a
7923   3724             ; END RELATIONAL
7924   3724 C0 00 00      cmp b, 0
7925   3727 C6 49 37      je _if125_exit
7926   372A             _if125_true:
7927   372A             ;; printf("    Stardate            %d\n", FROM_FIXED(stardate)); 
7928   372A 3B 0E 61      mov d, _stardate ; $stardate
7929   372D 2A            mov b, [d]
7930   372E FD AB         swp b
7931   3730 D8            push b
7932   3731 07 E8 1C      call FROM_FIXED
7933   3734 51 02 00      add sp, 2
7934   3737 FD AB         swp b
7935   3739 D8            push b
out/startrek.asm line 7936: Label not found: (__s81)
out/startrek.asm line 7936: Unused data in MS byte of argument. (2)
7936   373A 26 00 00      mov b, __s81 ; "    Stardate            %d\n"
7937   373D FD AB         swp b
7938   373F D8            push b
7939   3740 07 D1 05      call printf
7940   3743 51 04 00      add sp, 4
7941   3746 0A 49 37      jmp _if125_exit
7942   3749             _if125_exit:
7943   3749             ;; if (i == 1) 
7944   3749             _if126_cond:
7945   3749 FA FF FF      lea d, [bp + -1] ; $i
7946   374C 2A            mov b, [d]
7947   374D             ; START RELATIONAL
7948   374D D7            push a
7949   374E 11            mov a, b
7950   374F 26 01 00      mov b, $1
7951   3752 B0            cmp a, b
7952   3753 FD 71         seq ; ==
7953   3755 E4            pop a
7954   3756             ; END RELATIONAL
7955   3756 C0 00 00      cmp b, 0
7956   3759 C6 72 37      je _if126_exit
7957   375C             _if126_true:
7958   375C             ;; printf("    Condition           %s\n", sC); 
7959   375C FA FB FF      lea d, [bp + -5] ; $sC
7960   375F 2A            mov b, [d]
7961   3760 FD AB         swp b
7962   3762 D8            push b
out/startrek.asm line 7963: Label not found: (__s82)
out/startrek.asm line 7963: Unused data in MS byte of argument. (2)
7963   3763 26 00 00      mov b, __s82 ; "    Condition           %s\n"
7964   3766 FD AB         swp b
7965   3768 D8            push b
7966   3769 07 D1 05      call printf
7967   376C 51 04 00      add sp, 4
7968   376F 0A 72 37      jmp _if126_exit
7969   3772             _if126_exit:
7970   3772             ;; if (i == 2) 
7971   3772             _if127_cond:
7972   3772 FA FF FF      lea d, [bp + -1] ; $i
7973   3775 2A            mov b, [d]
7974   3776             ; START RELATIONAL
7975   3776 D7            push a
7976   3777 11            mov a, b
7977   3778 26 02 00      mov b, $2
7978   377B B0            cmp a, b
7979   377C FD 71         seq ; ==
7980   377E E4            pop a
7981   377F             ; END RELATIONAL
7982   377F C0 00 00      cmp b, 0
7983   3782 C6 A2 37      je _if127_exit
7984   3785             _if127_true:
7985   3785             ;; printf("    Quadrant            %d, %d\n", quad_y, quad_x); 
7986   3785 3B ED 60      mov d, _quad_x ; $quad_x
7987   3788 2A            mov b, [d]
7988   3789 FD AB         swp b
7989   378B D8            push b
7990   378C 3B EB 60      mov d, _quad_y ; $quad_y
7991   378F 2A            mov b, [d]
7992   3790 FD AB         swp b
7993   3792 D8            push b
out/startrek.asm line 7994: Label not found: (__s83)
out/startrek.asm line 7994: Unused data in MS byte of argument. (2)
7994   3793 26 00 00      mov b, __s83 ; "    Quadrant            %d, %d\n"
7995   3796 FD AB         swp b
7996   3798 D8            push b
7997   3799 07 D1 05      call printf
7998   379C 51 06 00      add sp, 6
7999   379F 0A A2 37      jmp _if127_exit
8000   37A2             _if127_exit:
8001   37A2             ;; if (i == 3) 
8002   37A2             _if128_cond:
8003   37A2 FA FF FF      lea d, [bp + -1] ; $i
8004   37A5 2A            mov b, [d]
8005   37A6             ; START RELATIONAL
8006   37A6 D7            push a
8007   37A7 11            mov a, b
8008   37A8 26 03 00      mov b, $3
8009   37AB B0            cmp a, b
8010   37AC FD 71         seq ; ==
8011   37AE E4            pop a
8012   37AF             ; END RELATIONAL
8013   37AF C0 00 00      cmp b, 0
8014   37B2 C6 E4 37      je _if128_exit
8015   37B5             _if128_true:
8016   37B5             ;; printf("    Sector              %d, %d\n", FROM_FIXED00(ship_y), FROM_FIXED00(ship_x)); 
8017   37B5 3B 0C 61      mov d, _ship_x ; $ship_x
8018   37B8 2A            mov b, [d]
8019   37B9 FD AB         swp b
8020   37BB D8            push b
8021   37BC 07 0B 1D      call FROM_FIXED00
8022   37BF 51 02 00      add sp, 2
8023   37C2 FD AB         swp b
8024   37C4 D8            push b
8025   37C5 3B 0A 61      mov d, _ship_y ; $ship_y
8026   37C8 2A            mov b, [d]
8027   37C9 FD AB         swp b
8028   37CB D8            push b
8029   37CC 07 0B 1D      call FROM_FIXED00
8030   37CF 51 02 00      add sp, 2
8031   37D2 FD AB         swp b
8032   37D4 D8            push b
out/startrek.asm line 8033: Label not found: (__s84)
out/startrek.asm line 8033: Unused data in MS byte of argument. (2)
8033   37D5 26 00 00      mov b, __s84 ; "    Sector              %d, %d\n"
8034   37D8 FD AB         swp b
8035   37DA D8            push b
8036   37DB 07 D1 05      call printf
8037   37DE 51 06 00      add sp, 6
8038   37E1 0A E4 37      jmp _if128_exit
8039   37E4             _if128_exit:
8040   37E4             ;; if (i == 4) 
8041   37E4             _if129_cond:
8042   37E4 FA FF FF      lea d, [bp + -1] ; $i
8043   37E7 2A            mov b, [d]
8044   37E8             ; START RELATIONAL
8045   37E8 D7            push a
8046   37E9 11            mov a, b
8047   37EA 26 04 00      mov b, $4
8048   37ED B0            cmp a, b
8049   37EE FD 71         seq ; ==
8050   37F0 E4            pop a
8051   37F1             ; END RELATIONAL
8052   37F1 C0 00 00      cmp b, 0
8053   37F4 C6 0D 38      je _if129_exit
8054   37F7             _if129_true:
8055   37F7             ;; printf("    Photon Torpedoes    %d\n", torps); 
8056   37F7 3B E9 60      mov d, _torps ; $torps
8057   37FA 32            mov bl, [d]
8058   37FB A7 00         mov bh, 0
8059   37FD DD            push bl
out/startrek.asm line 8060: Label not found: (__s85)
out/startrek.asm line 8060: Unused data in MS byte of argument. (2)
8060   37FE 26 00 00      mov b, __s85 ; "    Photon Torpedoes    %d\n"
8061   3801 FD AB         swp b
8062   3803 D8            push b
8063   3804 07 D1 05      call printf
8064   3807 51 03 00      add sp, 3
8065   380A 0A 0D 38      jmp _if129_exit
8066   380D             _if129_exit:
8067   380D             ;; if (i == 5) 
8068   380D             _if130_cond:
8069   380D FA FF FF      lea d, [bp + -1] ; $i
8070   3810 2A            mov b, [d]
8071   3811             ; START RELATIONAL
8072   3811 D7            push a
8073   3812 11            mov a, b
8074   3813 26 05 00      mov b, $5
8075   3816 B0            cmp a, b
8076   3817 FD 71         seq ; ==
8077   3819 E4            pop a
8078   381A             ; END RELATIONAL
8079   381A C0 00 00      cmp b, 0
8080   381D C6 3E 38      je _if130_exit
8081   3820             _if130_true:
8082   3820             ;; printf("    Total Energy        %d\n", energy + shield); 
8083   3820 3B 34 60      mov d, _energy ; $energy
8084   3823 2A            mov b, [d]
8085   3824             ; START TERMS
8086   3824 D7            push a
8087   3825 11            mov a, b
8088   3826 3B EF 60      mov d, _shield ; $shield
8089   3829 2A            mov b, [d]
8090   382A 56            add b, a
8091   382B E4            pop a
8092   382C             ; END TERMS
8093   382C FD AB         swp b
8094   382E D8            push b
out/startrek.asm line 8095: Label not found: (__s86)
out/startrek.asm line 8095: Unused data in MS byte of argument. (2)
8095   382F 26 00 00      mov b, __s86 ; "    Total Energy        %d\n"
8096   3832 FD AB         swp b
8097   3834 D8            push b
8098   3835 07 D1 05      call printf
8099   3838 51 04 00      add sp, 4
8100   383B 0A 3E 38      jmp _if130_exit
8101   383E             _if130_exit:
8102   383E             ;; if (i == 6) 
8103   383E             _if131_cond:
8104   383E FA FF FF      lea d, [bp + -1] ; $i
8105   3841 2A            mov b, [d]
8106   3842             ; START RELATIONAL
8107   3842 D7            push a
8108   3843 11            mov a, b
8109   3844 26 06 00      mov b, $6
8110   3847 B0            cmp a, b
8111   3848 FD 71         seq ; ==
8112   384A E4            pop a
8113   384B             ; END RELATIONAL
8114   384B C0 00 00      cmp b, 0
8115   384E C6 67 38      je _if131_exit
8116   3851             _if131_true:
8117   3851             ;; printf("    Shields             %d\n", shield); 
8118   3851 3B EF 60      mov d, _shield ; $shield
8119   3854 2A            mov b, [d]
8120   3855 FD AB         swp b
8121   3857 D8            push b
out/startrek.asm line 8122: Label not found: (__s87)
out/startrek.asm line 8122: Unused data in MS byte of argument. (2)
8122   3858 26 00 00      mov b, __s87 ; "    Shields             %d\n"
8123   385B FD AB         swp b
8124   385D D8            push b
8125   385E 07 D1 05      call printf
8126   3861 51 04 00      add sp, 4
8127   3864 0A 67 38      jmp _if131_exit
8128   3867             _if131_exit:
8129   3867             ;; if (i == 7) 
8130   3867             _if132_cond:
8131   3867 FA FF FF      lea d, [bp + -1] ; $i
8132   386A 2A            mov b, [d]
8133   386B             ; START RELATIONAL
8134   386B D7            push a
8135   386C 11            mov a, b
8136   386D 26 07 00      mov b, $7
8137   3870 B0            cmp a, b
8138   3871 FD 71         seq ; ==
8139   3873 E4            pop a
8140   3874             ; END RELATIONAL
8141   3874 C0 00 00      cmp b, 0
8142   3877 C6 90 38      je _if132_exit
8143   387A             _if132_true:
8144   387A             ;; printf("    Klingons Remaining  %d\n", klingons_left); 
8145   387A 3B E8 60      mov d, _klingons_left ; $klingons_left
8146   387D 32            mov bl, [d]
8147   387E A7 00         mov bh, 0
8148   3880 DD            push bl
out/startrek.asm line 8149: Label not found: (__s88)
out/startrek.asm line 8149: Unused data in MS byte of argument. (2)
8149   3881 26 00 00      mov b, __s88 ; "    Klingons Remaining  %d\n"
8150   3884 FD AB         swp b
8151   3886 D8            push b
8152   3887 07 D1 05      call printf
8153   388A 51 03 00      add sp, 3
8154   388D 0A 90 38      jmp _if132_exit
8155   3890             _if132_exit:
8156   3890             _for123_update:
8157   3890 FA FF FF      lea d, [bp + -1] ; $i
8158   3893 2A            mov b, [d]
8159   3894 D8            push b
8160   3895 FD 77         inc b
8161   3897 FA FF FF      lea d, [bp + -1] ; $i
8162   389A FD 43         mov [d], b
8163   389C E5            pop b
8164   389D 0A A9 36      jmp _for123_cond
8165   38A0             _for123_exit:
8166   38A0             ;; puts(srs_1); 
8167   38A0 3B 2A 62      mov d, _srs_1 ; $srs_1
8168   38A3 2A            mov b, [d]
8169   38A4 FD AB         swp b
8170   38A6 D8            push b
8171   38A7 07 31 13      call puts
8172   38AA 51 02 00      add sp, 2
8173   38AD             ;; putchar('\n'); 
8174   38AD 26 0A 00      mov b, $a
8175   38B0 DD            push bl
8176   38B1 07 FB 12      call putchar
8177   38B4 51 01 00      add sp, 1
8178   38B7             ;; return; 
8179   38B7 F9            leave
8180   38B8 09            ret
8181   38B9             
8182   38B9             put1bcd:
8183   38B9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8184   38BC             ;; v = v & 0x0F; 
8185   38BC FA 05 00      lea d, [bp + 5] ; $v
8186   38BF DA            push d
8187   38C0 FA 05 00      lea d, [bp + 5] ; $v
8188   38C3 32            mov bl, [d]
8189   38C4 A7 00         mov bh, 0
8190   38C6 D7            push a
8191   38C7 11            mov a, b
8192   38C8 26 0F 00      mov b, $f
8193   38CB FD 92         and b, a ; &
8194   38CD E4            pop a
8195   38CE E7            pop d
8196   38CF FD 3E         mov [d], bl
8197   38D1             ;; putchar('0' + v); 
8198   38D1 26 30 00      mov b, $30
8199   38D4             ; START TERMS
8200   38D4 D7            push a
8201   38D5 11            mov a, b
8202   38D6 FA 05 00      lea d, [bp + 5] ; $v
8203   38D9 32            mov bl, [d]
8204   38DA A7 00         mov bh, 0
8205   38DC 56            add b, a
8206   38DD E4            pop a
8207   38DE             ; END TERMS
8208   38DE DD            push bl
8209   38DF 07 FB 12      call putchar
8210   38E2 51 01 00      add sp, 1
8211   38E5 F9            leave
8212   38E6 09            ret
8213   38E7             
8214   38E7             putbcd:
8215   38E7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8216   38EA             ;; put1bcd(x >> 8); 
8217   38EA FA 05 00      lea d, [bp + 5] ; $x
8218   38ED 2A            mov b, [d]
8219   38EE             ; START SHIFT
8220   38EE D7            push a
8221   38EF 11            mov a, b
8222   38F0 26 08 00      mov b, $8
8223   38F3 FD 39         mov c, b
8224   38F5 A1            shr a, cl
8225   38F6 27            mov b, a
8226   38F7 E4            pop a
8227   38F8             ; END SHIFT
8228   38F8 DD            push bl
8229   38F9 07 B9 38      call put1bcd
8230   38FC 51 01 00      add sp, 1
8231   38FF             ;; put1bcd(x >> 4); 
8232   38FF FA 05 00      lea d, [bp + 5] ; $x
8233   3902 2A            mov b, [d]
8234   3903             ; START SHIFT
8235   3903 D7            push a
8236   3904 11            mov a, b
8237   3905 26 04 00      mov b, $4
8238   3908 FD 39         mov c, b
8239   390A A1            shr a, cl
8240   390B 27            mov b, a
8241   390C E4            pop a
8242   390D             ; END SHIFT
8243   390D DD            push bl
8244   390E 07 B9 38      call put1bcd
8245   3911 51 01 00      add sp, 1
8246   3914             ;; put1bcd(x); 
8247   3914 FA 05 00      lea d, [bp + 5] ; $x
8248   3917 2A            mov b, [d]
8249   3918 DD            push bl
8250   3919 07 B9 38      call put1bcd
8251   391C 51 01 00      add sp, 1
8252   391F F9            leave
8253   3920 09            ret
8254   3921             
8255   3921             long_range_scan:
8256   3921 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8257   3924             ; $i 
8258   3924             ; $j 
8259   3924 52 04 00      sub sp, 4
8260   3927             ;; if (inoperable(3)) 
8261   3927             _if133_cond:
8262   3927 26 03 00      mov b, $3
8263   392A DD            push bl
8264   392B 07 4B 20      call inoperable
8265   392E 51 01 00      add sp, 1
8266   3931 C0 00 00      cmp b, 0
8267   3934 C6 3C 39      je _if133_exit
8268   3937             _if133_true:
8269   3937             ;; return; 
8270   3937 F9            leave
8271   3938 09            ret
8272   3939 0A 3C 39      jmp _if133_exit
8273   393C             _if133_exit:
8274   393C             ;; printf("Long Range Scan for Quadrant %d, %d\n\n", quad_y, quad_x); 
8275   393C 3B ED 60      mov d, _quad_x ; $quad_x
8276   393F 2A            mov b, [d]
8277   3940 FD AB         swp b
8278   3942 D8            push b
8279   3943 3B EB 60      mov d, _quad_y ; $quad_y
8280   3946 2A            mov b, [d]
8281   3947 FD AB         swp b
8282   3949 D8            push b
out/startrek.asm line 8283: Label not found: (__s89)
out/startrek.asm line 8283: Unused data in MS byte of argument. (2)
8283   394A 26 00 00      mov b, __s89 ; "Long Range Scan for Quadrant %d, %d\n\n"
8284   394D FD AB         swp b
8285   394F D8            push b
8286   3950 07 D1 05      call printf
8287   3953 51 06 00      add sp, 6
8288   3956             ;; for (i = quad_y - 1; i <= quad_y + 1; i++) { 
8289   3956             _for134_init:
8290   3956 FA FF FF      lea d, [bp + -1] ; $i
8291   3959 DA            push d
8292   395A 3B EB 60      mov d, _quad_y ; $quad_y
8293   395D 2A            mov b, [d]
8294   395E             ; START TERMS
8295   395E D7            push a
8296   395F 11            mov a, b
8297   3960 26 01 00      mov b, $1
8298   3963 60            sub a, b
8299   3964 27            mov b, a
8300   3965 E4            pop a
8301   3966             ; END TERMS
8302   3966 E7            pop d
8303   3967 FD 43         mov [d], b
8304   3969             _for134_cond:
8305   3969 FA FF FF      lea d, [bp + -1] ; $i
8306   396C 2A            mov b, [d]
8307   396D             ; START RELATIONAL
8308   396D D7            push a
8309   396E 11            mov a, b
8310   396F 3B EB 60      mov d, _quad_y ; $quad_y
8311   3972 2A            mov b, [d]
8312   3973             ; START TERMS
8313   3973 D7            push a
8314   3974 11            mov a, b
8315   3975 26 01 00      mov b, $1
8316   3978 56            add b, a
8317   3979 E4            pop a
8318   397A             ; END TERMS
8319   397A B0            cmp a, b
8320   397B FD 73         slt ; <= (signed)
8321   397D E4            pop a
8322   397E             ; END RELATIONAL
8323   397E C0 00 00      cmp b, 0
8324   3981 C6 BB 3A      je _for134_exit
8325   3984             _for134_block:
8326   3984             ;; printf("%s:", lrs_1); 
8327   3984 3B 55 62      mov d, _lrs_1 ; $lrs_1
8328   3987 2A            mov b, [d]
8329   3988 FD AB         swp b
8330   398A D8            push b
out/startrek.asm line 8331: Label not found: (__s90)
out/startrek.asm line 8331: Unused data in MS byte of argument. (2)
8331   398B 26 00 00      mov b, __s90 ; "%s:"
8332   398E FD AB         swp b
8333   3990 D8            push b
8334   3991 07 D1 05      call printf
8335   3994 51 04 00      add sp, 4
8336   3997             ;; for (j = quad_x - 1; j <= quad_x + 1; j++) { 
8337   3997             _for135_init:
8338   3997 FA FD FF      lea d, [bp + -3] ; $j
8339   399A DA            push d
8340   399B 3B ED 60      mov d, _quad_x ; $quad_x
8341   399E 2A            mov b, [d]
8342   399F             ; START TERMS
8343   399F D7            push a
8344   39A0 11            mov a, b
8345   39A1 26 01 00      mov b, $1
8346   39A4 60            sub a, b
8347   39A5 27            mov b, a
8348   39A6 E4            pop a
8349   39A7             ; END TERMS
8350   39A7 E7            pop d
8351   39A8 FD 43         mov [d], b
8352   39AA             _for135_cond:
8353   39AA FA FD FF      lea d, [bp + -3] ; $j
8354   39AD 2A            mov b, [d]
8355   39AE             ; START RELATIONAL
8356   39AE D7            push a
8357   39AF 11            mov a, b
8358   39B0 3B ED 60      mov d, _quad_x ; $quad_x
8359   39B3 2A            mov b, [d]
8360   39B4             ; START TERMS
8361   39B4 D7            push a
8362   39B5 11            mov a, b
8363   39B6 26 01 00      mov b, $1
8364   39B9 56            add b, a
8365   39BA E4            pop a
8366   39BB             ; END TERMS
8367   39BB B0            cmp a, b
8368   39BC FD 73         slt ; <= (signed)
8369   39BE E4            pop a
8370   39BF             ; END RELATIONAL
8371   39BF C0 00 00      cmp b, 0
8372   39C2 C6 A1 3A      je _for135_exit
8373   39C5             _for135_block:
8374   39C5             ;; putchar(' '); 
8375   39C5 26 20 00      mov b, $20
8376   39C8 DD            push bl
8377   39C9 07 FB 12      call putchar
8378   39CC 51 01 00      add sp, 1
8379   39CF             ;; if (i > 0 && i <= 8 && j > 0 && j <= 8) { 
8380   39CF             _if136_cond:
8381   39CF FA FF FF      lea d, [bp + -1] ; $i
8382   39D2 2A            mov b, [d]
8383   39D3             ; START RELATIONAL
8384   39D3 D7            push a
8385   39D4 11            mov a, b
8386   39D5 26 00 00      mov b, $0
8387   39D8 B0            cmp a, b
8388   39D9 FD 7F         sgt ; >
8389   39DB E4            pop a
8390   39DC             ; END RELATIONAL
8391   39DC D7            push a
8392   39DD 11            mov a, b
8393   39DE FA FF FF      lea d, [bp + -1] ; $i
8394   39E1 2A            mov b, [d]
8395   39E2             ; START RELATIONAL
8396   39E2 D7            push a
8397   39E3 11            mov a, b
8398   39E4 26 08 00      mov b, $8
8399   39E7 B0            cmp a, b
8400   39E8 FD 73         slt ; <= (signed)
8401   39EA E4            pop a
8402   39EB             ; END RELATIONAL
8403   39EB FD A7         sand a, b
8404   39ED 11            mov a, b
8405   39EE FA FD FF      lea d, [bp + -3] ; $j
8406   39F1 2A            mov b, [d]
8407   39F2             ; START RELATIONAL
8408   39F2 D7            push a
8409   39F3 11            mov a, b
8410   39F4 26 00 00      mov b, $0
8411   39F7 B0            cmp a, b
8412   39F8 FD 7F         sgt ; >
8413   39FA E4            pop a
8414   39FB             ; END RELATIONAL
8415   39FB FD A7         sand a, b
8416   39FD 11            mov a, b
8417   39FE FA FD FF      lea d, [bp + -3] ; $j
8418   3A01 2A            mov b, [d]
8419   3A02             ; START RELATIONAL
8420   3A02 D7            push a
8421   3A03 11            mov a, b
8422   3A04 26 08 00      mov b, $8
8423   3A07 B0            cmp a, b
8424   3A08 FD 73         slt ; <= (signed)
8425   3A0A E4            pop a
8426   3A0B             ; END RELATIONAL
8427   3A0B FD A7         sand a, b
8428   3A0D E4            pop a
8429   3A0E C0 00 00      cmp b, 0
8430   3A11 C6 79 3A      je _if136_else
8431   3A14             _if136_true:
8432   3A14             ;; map[i][j] = map[i][j] |   0x1000		/* Set if this sector was mapped */          ; 
8433   3A14 3B 38 60      mov d, _map_data ; $map
8434   3A17 D7            push a
8435   3A18 DA            push d
8436   3A19 FA FF FF      lea d, [bp + -1] ; $i
8437   3A1C 2A            mov b, [d]
8438   3A1D E7            pop d
8439   3A1E FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
8440   3A22 DA            push d
8441   3A23 FA FD FF      lea d, [bp + -3] ; $j
8442   3A26 2A            mov b, [d]
8443   3A27 E7            pop d
8444   3A28 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8445   3A2C E4            pop a
8446   3A2D DA            push d
8447   3A2E 3B 38 60      mov d, _map_data ; $map
8448   3A31 D7            push a
8449   3A32 DA            push d
8450   3A33 FA FF FF      lea d, [bp + -1] ; $i
8451   3A36 2A            mov b, [d]
8452   3A37 E7            pop d
8453   3A38 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
8454   3A3C DA            push d
8455   3A3D FA FD FF      lea d, [bp + -3] ; $j
8456   3A40 2A            mov b, [d]
8457   3A41 E7            pop d
8458   3A42 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8459   3A46 E4            pop a
8460   3A47 2A            mov b, [d]
8461   3A48 D7            push a
8462   3A49 11            mov a, b
8463   3A4A 26 00 10      mov b, $1000
8464   3A4D FD 70         or b, a ; |
8465   3A4F E4            pop a
8466   3A50 E7            pop d
8467   3A51 FD 43         mov [d], b
8468   3A53             ;; putbcd(map[i][j]); 
8469   3A53 3B 38 60      mov d, _map_data ; $map
8470   3A56 D7            push a
8471   3A57 DA            push d
8472   3A58 FA FF FF      lea d, [bp + -1] ; $i
8473   3A5B 2A            mov b, [d]
8474   3A5C E7            pop d
8475   3A5D FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
8476   3A61 DA            push d
8477   3A62 FA FD FF      lea d, [bp + -3] ; $j
8478   3A65 2A            mov b, [d]
8479   3A66 E7            pop d
8480   3A67 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8481   3A6B E4            pop a
8482   3A6C 2A            mov b, [d]
8483   3A6D FD AB         swp b
8484   3A6F D8            push b
8485   3A70 07 E7 38      call putbcd
8486   3A73 51 02 00      add sp, 2
8487   3A76 0A 85 3A      jmp _if136_exit
8488   3A79             _if136_else:
8489   3A79             ;; puts("***"); 
out/startrek.asm line 8490: Label not found: (__s91)
out/startrek.asm line 8490: Unused data in MS byte of argument. (2)
8490   3A79 26 00 00      mov b, __s91 ; "***"
8491   3A7C FD AB         swp b
8492   3A7E D8            push b
8493   3A7F 07 31 13      call puts
8494   3A82 51 02 00      add sp, 2
8495   3A85             _if136_exit:
8496   3A85             ;; puts(" :"); 
out/startrek.asm line 8497: Label not found: (__s92)
out/startrek.asm line 8497: Unused data in MS byte of argument. (2)
8497   3A85 26 00 00      mov b, __s92 ; " :"
8498   3A88 FD AB         swp b
8499   3A8A D8            push b
8500   3A8B 07 31 13      call puts
8501   3A8E 51 02 00      add sp, 2
8502   3A91             _for135_update:
8503   3A91 FA FD FF      lea d, [bp + -3] ; $j
8504   3A94 2A            mov b, [d]
8505   3A95 D8            push b
8506   3A96 FD 77         inc b
8507   3A98 FA FD FF      lea d, [bp + -3] ; $j
8508   3A9B FD 43         mov [d], b
8509   3A9D E5            pop b
8510   3A9E 0A AA 39      jmp _for135_cond
8511   3AA1             _for135_exit:
8512   3AA1             ;; putchar('\n'); 
8513   3AA1 26 0A 00      mov b, $a
8514   3AA4 DD            push bl
8515   3AA5 07 FB 12      call putchar
8516   3AA8 51 01 00      add sp, 1
8517   3AAB             _for134_update:
8518   3AAB FA FF FF      lea d, [bp + -1] ; $i
8519   3AAE 2A            mov b, [d]
8520   3AAF D8            push b
8521   3AB0 FD 77         inc b
8522   3AB2 FA FF FF      lea d, [bp + -1] ; $i
8523   3AB5 FD 43         mov [d], b
8524   3AB7 E5            pop b
8525   3AB8 0A 69 39      jmp _for134_cond
8526   3ABB             _for134_exit:
8527   3ABB             ;; printf("%s\n", lrs_1); 
8528   3ABB 3B 55 62      mov d, _lrs_1 ; $lrs_1
8529   3ABE 2A            mov b, [d]
8530   3ABF FD AB         swp b
8531   3AC1 D8            push b
out/startrek.asm line 8532: Label not found: (__s93)
out/startrek.asm line 8532: Unused data in MS byte of argument. (2)
8532   3AC2 26 00 00      mov b, __s93 ; "%s\n"
8533   3AC5 FD AB         swp b
8534   3AC7 D8            push b
8535   3AC8 07 D1 05      call printf
8536   3ACB 51 04 00      add sp, 4
8537   3ACE F9            leave
8538   3ACF 09            ret
8539   3AD0             
8540   3AD0             no_klingon:
8541   3AD0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8542   3AD3             ;; if (klingons <= 0) { 
8543   3AD3             _if137_cond:
8544   3AD3 3B E6 60      mov d, _klingons ; $klingons
8545   3AD6 32            mov bl, [d]
8546   3AD7 A7 00         mov bh, 0
8547   3AD9             ; START RELATIONAL
8548   3AD9 D7            push a
8549   3ADA 11            mov a, b
8550   3ADB 26 00 00      mov b, $0
8551   3ADE B0            cmp a, b
8552   3ADF FD 75         slu ; <= (unsigned)
8553   3AE1 E4            pop a
8554   3AE2             ; END RELATIONAL
8555   3AE2 C0 00 00      cmp b, 0
8556   3AE5 C6 FC 3A      je _if137_exit
8557   3AE8             _if137_true:
8558   3AE8             ;; puts("Science Officer Spock reports:\n  'Sensors show no enemy ships in this quadrant'\n"); 
out/startrek.asm line 8559: Label not found: (__s94)
out/startrek.asm line 8559: Unused data in MS byte of argument. (2)
8559   3AE8 26 00 00      mov b, __s94 ; "Science Officer Spock reports:\n  'Sensors show no enemy ships in this quadrant'\n"
8560   3AEB FD AB         swp b
8561   3AED D8            push b
8562   3AEE 07 31 13      call puts
8563   3AF1 51 02 00      add sp, 2
8564   3AF4             ;; return 1; 
8565   3AF4 26 01 00      mov b, $1
8566   3AF7 F9            leave
8567   3AF8 09            ret
8568   3AF9 0A FC 3A      jmp _if137_exit
8569   3AFC             _if137_exit:
8570   3AFC             ;; return 0; 
8571   3AFC 26 00 00      mov b, $0
8572   3AFF F9            leave
8573   3B00 09            ret
8574   3B01             
8575   3B01             wipe_klingon:
8576   3B01 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8577   3B04             ;; quad[k->y+-1][k->x+-1] =  		0      ; 
8578   3B04 3B 10 61      mov d, _quad_data ; $quad
8579   3B07 D7            push a
8580   3B08 DA            push d
8581   3B09 FA 05 00      lea d, [bp + 5] ; $k
8582   3B0C FD 2A         mov d, [d]
8583   3B0E 58 00 00      add d, 0
8584   3B11 32            mov bl, [d]
8585   3B12 A7 00         mov bh, 0
8586   3B14             ; START TERMS
8587   3B14 D7            push a
8588   3B15 11            mov a, b
8589   3B16 26 FF FF      mov b, $ffff
8590   3B19 56            add b, a
8591   3B1A E4            pop a
8592   3B1B             ; END TERMS
8593   3B1B E7            pop d
8594   3B1C FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
8595   3B20 DA            push d
8596   3B21 FA 05 00      lea d, [bp + 5] ; $k
8597   3B24 FD 2A         mov d, [d]
8598   3B26 58 01 00      add d, 1
8599   3B29 32            mov bl, [d]
8600   3B2A A7 00         mov bh, 0
8601   3B2C             ; START TERMS
8602   3B2C D7            push a
8603   3B2D 11            mov a, b
8604   3B2E 26 FF FF      mov b, $ffff
8605   3B31 56            add b, a
8606   3B32 E4            pop a
8607   3B33             ; END TERMS
8608   3B33 E7            pop d
8609   3B34 5A            add d, b
8610   3B35 E4            pop a
8611   3B36 DA            push d
8612   3B37 26 00 00      mov b, $0
8613   3B3A E7            pop d
8614   3B3B FD 3E         mov [d], bl
8615   3B3D F9            leave
8616   3B3E 09            ret
8617   3B3F             
8618   3B3F             phaser_control:
8619   3B3F F8 00 00      enter 0 ; (push bp; mov bp, sp)
8620   3B42             ; $i 
8621   3B42             ; $phaser_energy 
8622   3B42             ; $h1 
8623   3B42             ; $h 
8624   3B42             ; $k 
8625   3B42 52 0E 00      sub sp, 14
8626   3B45             ;; k = &kdata; 
8627   3B45 FA F3 FF      lea d, [bp + -13] ; $k
8628   3B48 DA            push d
8629   3B49 3B DA 60      mov d, _kdata_data ; $kdata
8630   3B4C 2D            mov b, d
8631   3B4D E7            pop d
8632   3B4E FD 43         mov [d], b
8633   3B50             ;; if (inoperable(4)) 
8634   3B50             _if138_cond:
8635   3B50 26 04 00      mov b, $4
8636   3B53 DD            push bl
8637   3B54 07 4B 20      call inoperable
8638   3B57 51 01 00      add sp, 1
8639   3B5A C0 00 00      cmp b, 0
8640   3B5D C6 65 3B      je _if138_exit
8641   3B60             _if138_true:
8642   3B60             ;; return; 
8643   3B60 F9            leave
8644   3B61 09            ret
8645   3B62 0A 65 3B      jmp _if138_exit
8646   3B65             _if138_exit:
8647   3B65             ;; if (no_klingon()) 
8648   3B65             _if139_cond:
8649   3B65 07 D0 3A      call no_klingon
8650   3B68 C0 00 00      cmp b, 0
8651   3B6B C6 73 3B      je _if139_exit
8652   3B6E             _if139_true:
8653   3B6E             ;; return; 
8654   3B6E F9            leave
8655   3B6F 09            ret
8656   3B70 0A 73 3B      jmp _if139_exit
8657   3B73             _if139_exit:
8658   3B73             ;; if (damage[8] < 0) 
8659   3B73             _if140_cond:
8660   3B73 3B F6 60      mov d, _damage_data ; $damage
8661   3B76 D7            push a
8662   3B77 DA            push d
8663   3B78 26 08 00      mov b, $8
8664   3B7B E7            pop d
8665   3B7C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8666   3B80 E4            pop a
8667   3B81 2A            mov b, [d]
8668   3B82             ; START RELATIONAL
8669   3B82 D7            push a
8670   3B83 11            mov a, b
8671   3B84 26 00 00      mov b, $0
8672   3B87 B0            cmp a, b
8673   3B88 FD 73         slt ; < (signed)
8674   3B8A E4            pop a
8675   3B8B             ; END RELATIONAL
8676   3B8B C0 00 00      cmp b, 0
8677   3B8E C6 A0 3B      je _if140_exit
8678   3B91             _if140_true:
8679   3B91             ;; puts("Computer failure hampers accuracy."); 
out/startrek.asm line 8680: Label not found: (__s95)
out/startrek.asm line 8680: Unused data in MS byte of argument. (2)
8680   3B91 26 00 00      mov b, __s95 ; "Computer failure hampers accuracy."
8681   3B94 FD AB         swp b
8682   3B96 D8            push b
8683   3B97 07 31 13      call puts
8684   3B9A 51 02 00      add sp, 2
8685   3B9D 0A A0 3B      jmp _if140_exit
8686   3BA0             _if140_exit:
8687   3BA0             ;; printf("Phasers locked on target;\n Energy available = %d units\n\n Number of units to fire: ", energy); 
8688   3BA0 3B 34 60      mov d, _energy ; $energy
8689   3BA3 2A            mov b, [d]
8690   3BA4 FD AB         swp b
8691   3BA6 D8            push b
out/startrek.asm line 8692: Label not found: (__s96)
out/startrek.asm line 8692: Unused data in MS byte of argument. (2)
8692   3BA7 26 00 00      mov b, __s96 ; "Phasers locked on target;\n Energy available = %d units\n\n Number of units to fire: "
8693   3BAA FD AB         swp b
8694   3BAC D8            push b
8695   3BAD 07 D1 05      call printf
8696   3BB0 51 04 00      add sp, 4
8697   3BB3             ;; phaser_energy = input_int(); 
8698   3BB3 FA FB FF      lea d, [bp + -5] ; $phaser_energy
8699   3BB6 DA            push d
8700   3BB7 07 B4 1F      call input_int
8701   3BBA E7            pop d
8702   3BBB FD 43         mov [d], b
8703   3BBD 28            mov b, c
8704   3BBE FD 44 02 00   mov [d + 2], b
8705   3BC2             ;; if (phaser_energy <= 0) 
8706   3BC2             _if141_cond:
8707   3BC2 FA FB FF      lea d, [bp + -5] ; $phaser_energy
8708   3BC5 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
8709   3BC8 FD 39         mov c, b ; And place it into C
8710   3BCA 2A            mov b, [d] ; Lower Word in B
8711   3BCB             ; START RELATIONAL
8712   3BCB D7            push a
8713   3BCC FD D8         push g
8714   3BCE 11            mov a, b
8715   3BCF FD 7A         mov g, c
8716   3BD1 26 00 00      mov b, $0
8717   3BD4 38 00 00      mov c, 0
8718   3BD7 FD 74         sle
8719   3BD9 FD F1         pop g
8720   3BDB E4            pop a
8721   3BDC             ; END RELATIONAL
8722   3BDC C0 00 00      cmp b, 0
8723   3BDF C6 E7 3B      je _if141_exit
8724   3BE2             _if141_true:
8725   3BE2             ;; return; 
8726   3BE2 F9            leave
8727   3BE3 09            ret
8728   3BE4 0A E7 3B      jmp _if141_exit
8729   3BE7             _if141_exit:
8730   3BE7             ;; if (energy - phaser_energy < 0) { 
8731   3BE7             _if142_cond:
8732   3BE7 3B 34 60      mov d, _energy ; $energy
8733   3BEA 2A            mov b, [d]
8734   3BEB             ; START TERMS
8735   3BEB D7            push a
8736   3BEC 11            mov a, b
8737   3BED FA FB FF      lea d, [bp + -5] ; $phaser_energy
8738   3BF0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
8739   3BF3 FD 39         mov c, b ; And place it into C
8740   3BF5 2A            mov b, [d] ; Lower Word in B
8741   3BF6 60            sub a, b
8742   3BF7 27            mov b, a
8743   3BF8 E4            pop a
8744   3BF9             ; END TERMS
8745   3BF9             ; START RELATIONAL
8746   3BF9 D7            push a
8747   3BFA FD D8         push g
8748   3BFC 11            mov a, b
8749   3BFD FD 7A         mov g, c
8750   3BFF 26 00 00      mov b, $0
8751   3C02 38 00 00      mov c, 0
8752   3C05 FD AF 00 00   cmp32 ga, cb
8752   3C09 00 00 00 00 
8752   3C0D 00 00 00 00 
8752   3C11 00 00 00 00 
8752   3C15 00 00 00 00 
8752   3C19 00 00 00 00 
8752   3C1D 00 00 00 00 
8752   3C21 00 00 00 00 
8752   3C25 00 00 00 00 
8752   3C29 00 00 00 00 
8752   3C2D 00 00 00 00 
8752   3C31 00 00 00 00 
8752   3C35 00 00 00 00 
8752   3C39 00 00 00 00 
8752   3C3D 00 00 00 00 
8752   3C41 00 00 00 00 
8752   3C45 00 00 00 00 
8752   3C49 00 00 00 00 
8752   3C4D 00 00 00 00 
8752   3C51 00 00 00 00 
8752   3C55 00 00 00 00 
8752   3C59 00 00 00 00 
8752   3C5D 00 00 00 00 
8752   3C61 00 00 00 00 
8752   3C65 00 00 00 00 
8752   3C69 00 00 00 00 
8752   3C6D 00 00 00 00 
8752   3C71 00 00 00 00 
8752   3C75 00 00 00 00 
8752   3C79 00 00 00 00 
8752   3C7D 00 00 00 00 
8752   3C81 00 00 00 00 
8752   3C85 00 00 00 00 
8752   3C89 00 00 00 00 
8752   3C8D 00 00 00 00 
8752   3C91 00 00 00 00 
8752   3C95 00 00 00 00 
8752   3C99 00 00 00 00 
8752   3C9D 00 00 00 00 
8752   3CA1 00 00 00 00 
8752   3CA5 00 00 00 00 
8752   3CA9 00 00 00 00 
8752   3CAD 00 00 00 00 
8752   3CB1 00 00 00 00 
8752   3CB5 00 00 00 00 
8752   3CB9 00 00 00 00 
8752   3CBD 00 00 00 00 
8752   3CC1 00 00 00 00 
8752   3CC5 00 00 00 00 
8752   3CC9 00 00 00 00 
8752   3CCD 00 00 00 00 
8752   3CD1 00 00 00 00 
8752   3CD5 00 00 00 00 
8752   3CD9 00 00 00 00 
8752   3CDD 00 00 00 00 
8752   3CE1 00 00 00 00 
8752   3CE5 00 00 00 00 
8752   3CE9 00 00 00 00 
8752   3CED 00 00 00 00 
8752   3CF1 00 00 00 00 
8752   3CF5 00 00 00 00 
8752   3CF9 00 00 00 00 
8752   3CFD 00 00 00 00 
8752   3D01 00 00 00 00 
8752   3D05 00 
8753   3D06 FD 73         slt ; <
8754   3D08 FD F1         pop g
8755   3D0A E4            pop a
8756   3D0B             ; END RELATIONAL
8757   3D0B C0 00 00      cmp b, 0
8758   3D0E C6 22 3D      je _if142_exit
8759   3D11             _if142_true:
8760   3D11             ;; puts("Not enough energy available.\n"); 
out/startrek.asm line 8761: Label not found: (__s97)
out/startrek.asm line 8761: Unused data in MS byte of argument. (2)
8761   3D11 26 00 00      mov b, __s97 ; "Not enough energy available.\n"
8762   3D14 FD AB         swp b
8763   3D16 D8            push b
8764   3D17 07 31 13      call puts
8765   3D1A 51 02 00      add sp, 2
8766   3D1D             ;; return; 
8767   3D1D F9            leave
8768   3D1E 09            ret
8769   3D1F 0A 22 3D      jmp _if142_exit
8770   3D22             _if142_exit:
8771   3D22             ;; energy = energy -  phaser_energy; 
8772   3D22 3B 34 60      mov d, _energy ; $energy
8773   3D25 DA            push d
8774   3D26 3B 34 60      mov d, _energy ; $energy
8775   3D29 2A            mov b, [d]
8776   3D2A             ; START TERMS
8777   3D2A D7            push a
8778   3D2B 11            mov a, b
8779   3D2C FA FB FF      lea d, [bp + -5] ; $phaser_energy
8780   3D2F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
8781   3D32 FD 39         mov c, b ; And place it into C
8782   3D34 2A            mov b, [d] ; Lower Word in B
8783   3D35 60            sub a, b
8784   3D36 27            mov b, a
8785   3D37 E4            pop a
8786   3D38             ; END TERMS
8787   3D38 E7            pop d
8788   3D39 FD 43         mov [d], b
8789   3D3B             ;; if (damage[8] < 0) 
8790   3D3B             _if143_cond:
8791   3D3B 3B F6 60      mov d, _damage_data ; $damage
8792   3D3E D7            push a
8793   3D3F DA            push d
8794   3D40 26 08 00      mov b, $8
8795   3D43 E7            pop d
8796   3D44 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8797   3D48 E4            pop a
8798   3D49 2A            mov b, [d]
8799   3D4A             ; START RELATIONAL
8800   3D4A D7            push a
8801   3D4B 11            mov a, b
8802   3D4C 26 00 00      mov b, $0
8803   3D4F B0            cmp a, b
8804   3D50 FD 73         slt ; < (signed)
8805   3D52 E4            pop a
8806   3D53             ; END RELATIONAL
8807   3D53 C0 00 00      cmp b, 0
8808   3D56 C6 83 3D      je _if143_else
8809   3D59             _if143_true:
8810   3D59             ;; phaser_energy =phaser_energy * get_rand(100); 
8811   3D59 FA FB FF      lea d, [bp + -5] ; $phaser_energy
8812   3D5C DA            push d
8813   3D5D FA FB FF      lea d, [bp + -5] ; $phaser_energy
8814   3D60 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
8815   3D63 FD 39         mov c, b ; And place it into C
8816   3D65 2A            mov b, [d] ; Lower Word in B
8817   3D66             ; START FACTORS
8818   3D66 D7            push a
8819   3D67 11            mov a, b
8820   3D68 26 64 00      mov b, $64
8821   3D6B FD AB         swp b
8822   3D6D D8            push b
8823   3D6E 07 1C 1D      call get_rand
8824   3D71 51 02 00      add sp, 2
8825   3D74 AC            mul a, b ; *
8826   3D75 11            mov a, b
8827   3D76 27            mov b, a
8828   3D77 E4            pop a
8829   3D78             ; END FACTORS
8830   3D78 E7            pop d
8831   3D79 FD 43         mov [d], b
8832   3D7B 28            mov b, c
8833   3D7C FD 44 02 00   mov [d + 2], b
8834   3D80 0A A1 3D      jmp _if143_exit
8835   3D83             _if143_else:
8836   3D83             ;; phaser_energy = phaser_energy* 100; 
8837   3D83 FA FB FF      lea d, [bp + -5] ; $phaser_energy
8838   3D86 DA            push d
8839   3D87 FA FB FF      lea d, [bp + -5] ; $phaser_energy
8840   3D8A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
8841   3D8D FD 39         mov c, b ; And place it into C
8842   3D8F 2A            mov b, [d] ; Lower Word in B
8843   3D90             ; START FACTORS
8844   3D90 D7            push a
8845   3D91 11            mov a, b
8846   3D92 26 64 00      mov b, $64
8847   3D95 AC            mul a, b ; *
8848   3D96 11            mov a, b
8849   3D97 27            mov b, a
8850   3D98 E4            pop a
8851   3D99             ; END FACTORS
8852   3D99 E7            pop d
8853   3D9A FD 43         mov [d], b
8854   3D9C 28            mov b, c
8855   3D9D FD 44 02 00   mov [d + 2], b
8856   3DA1             _if143_exit:
8857   3DA1             ;; h1 = phaser_energy / klingons; 
8858   3DA1 FA F7 FF      lea d, [bp + -9] ; $h1
8859   3DA4 DA            push d
8860   3DA5 FA FB FF      lea d, [bp + -5] ; $phaser_energy
8861   3DA8 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
8862   3DAB FD 39         mov c, b ; And place it into C
8863   3DAD 2A            mov b, [d] ; Lower Word in B
8864   3DAE             ; START FACTORS
8865   3DAE D7            push a
8866   3DAF 11            mov a, b
8867   3DB0 3B E6 60      mov d, _klingons ; $klingons
8868   3DB3 32            mov bl, [d]
8869   3DB4 A7 00         mov bh, 0
8870   3DB6 AE            div a, b
8871   3DB7 27            mov b, a
8872   3DB8 E4            pop a
8873   3DB9             ; END FACTORS
8874   3DB9 E7            pop d
8875   3DBA FD 43         mov [d], b
8876   3DBC 28            mov b, c
8877   3DBD FD 44 02 00   mov [d + 2], b
8878   3DC1             ;; for (i = 0; i <= 2; i++) { 
8879   3DC1             _for144_init:
8880   3DC1 FA FF FF      lea d, [bp + -1] ; $i
8881   3DC4 DA            push d
8882   3DC5 26 00 00      mov b, $0
8883   3DC8 E7            pop d
8884   3DC9 FD 43         mov [d], b
8885   3DCB             _for144_cond:
8886   3DCB FA FF FF      lea d, [bp + -1] ; $i
8887   3DCE 2A            mov b, [d]
8888   3DCF             ; START RELATIONAL
8889   3DCF D7            push a
8890   3DD0 11            mov a, b
8891   3DD1 26 02 00      mov b, $2
8892   3DD4 B0            cmp a, b
8893   3DD5 FD 73         slt ; <= (signed)
8894   3DD7 E4            pop a
8895   3DD8             ; END RELATIONAL
8896   3DD8 C0 00 00      cmp b, 0
8897   3DDB C6 F8 3F      je _for144_exit
8898   3DDE             _for144_block:
8899   3DDE             ;; if (k->energy > 0) { 
8900   3DDE             _if145_cond:
8901   3DDE FA F3 FF      lea d, [bp + -13] ; $k
8902   3DE1 FD 2A         mov d, [d]
8903   3DE3 58 02 00      add d, 2
8904   3DE6 2A            mov b, [d]
8905   3DE7             ; START RELATIONAL
8906   3DE7 D7            push a
8907   3DE8 11            mov a, b
8908   3DE9 26 00 00      mov b, $0
8909   3DEC B0            cmp a, b
8910   3DED FD 7F         sgt ; >
8911   3DEF E4            pop a
8912   3DF0             ; END RELATIONAL
8913   3DF0 C0 00 00      cmp b, 0
8914   3DF3 C6 D9 3F      je _if145_exit
8915   3DF6             _if145_true:
8916   3DF6             ;; h1 = h1 * (get_rand(100) + 200); 
8917   3DF6 FA F7 FF      lea d, [bp + -9] ; $h1
8918   3DF9 DA            push d
8919   3DFA FA F7 FF      lea d, [bp + -9] ; $h1
8920   3DFD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
8921   3E00 FD 39         mov c, b ; And place it into C
8922   3E02 2A            mov b, [d] ; Lower Word in B
8923   3E03             ; START FACTORS
8924   3E03 D7            push a
8925   3E04 11            mov a, b
8926   3E05 26 64 00      mov b, $64
8927   3E08 FD AB         swp b
8928   3E0A D8            push b
8929   3E0B 07 1C 1D      call get_rand
8930   3E0E 51 02 00      add sp, 2
8931   3E11             ; START TERMS
8932   3E11 D7            push a
8933   3E12 11            mov a, b
8934   3E13 26 C8 00      mov b, $c8
8935   3E16 56            add b, a
8936   3E17 E4            pop a
8937   3E18             ; END TERMS
8938   3E18 AC            mul a, b ; *
8939   3E19 11            mov a, b
8940   3E1A 27            mov b, a
8941   3E1B E4            pop a
8942   3E1C             ; END FACTORS
8943   3E1C E7            pop d
8944   3E1D FD 43         mov [d], b
8945   3E1F 28            mov b, c
8946   3E20 FD 44 02 00   mov [d + 2], b
8947   3E24             ;; h1 =h1/ distance_to(k); 
8948   3E24 FA F7 FF      lea d, [bp + -9] ; $h1
8949   3E27 DA            push d
8950   3E28 FA F7 FF      lea d, [bp + -9] ; $h1
8951   3E2B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
8952   3E2E FD 39         mov c, b ; And place it into C
8953   3E30 2A            mov b, [d] ; Lower Word in B
8954   3E31             ; START FACTORS
8955   3E31 D7            push a
8956   3E32 11            mov a, b
8957   3E33 FA F3 FF      lea d, [bp + -13] ; $k
8958   3E36 2A            mov b, [d]
8959   3E37 FD AB         swp b
8960   3E39 D8            push b
8961   3E3A 07 5D 5F      call distance_to
8962   3E3D 51 02 00      add sp, 2
8963   3E40 AE            div a, b
8964   3E41 27            mov b, a
8965   3E42 E4            pop a
8966   3E43             ; END FACTORS
8967   3E43 E7            pop d
8968   3E44 FD 43         mov [d], b
8969   3E46 28            mov b, c
8970   3E47 FD 44 02 00   mov [d + 2], b
8971   3E4B             ;; if (h1 <= 15 * k->energy) {	/* was 0.15 */ 
8972   3E4B             _if146_cond:
8973   3E4B FA F7 FF      lea d, [bp + -9] ; $h1
8974   3E4E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
8975   3E51 FD 39         mov c, b ; And place it into C
8976   3E53 2A            mov b, [d] ; Lower Word in B
8977   3E54             ; START RELATIONAL
8978   3E54 D7            push a
8979   3E55 FD D8         push g
8980   3E57 11            mov a, b
8981   3E58 FD 7A         mov g, c
8982   3E5A 26 0F 00      mov b, $f
8983   3E5D             ; START FACTORS
8984   3E5D D7            push a
8985   3E5E 11            mov a, b
8986   3E5F FA F3 FF      lea d, [bp + -13] ; $k
8987   3E62 FD 2A         mov d, [d]
8988   3E64 58 02 00      add d, 2
8989   3E67 2A            mov b, [d]
8990   3E68 AC            mul a, b ; *
8991   3E69 11            mov a, b
8992   3E6A 27            mov b, a
8993   3E6B E4            pop a
8994   3E6C             ; END FACTORS
8995   3E6C 38 00 00      mov c, 0
8996   3E6F FD 76         sleu
8997   3E71 FD F1         pop g
8998   3E73 E4            pop a
8999   3E74             ; END RELATIONAL
9000   3E74 C0 00 00      cmp b, 0
9001   3E77 C6 A1 3E      je _if146_else
9002   3E7A             _if146_true:
9003   3E7A             ;; printf("Sensors show no damage to enemy at %d, %d\n\n", k->y, k->x); 
9004   3E7A FA F3 FF      lea d, [bp + -13] ; $k
9005   3E7D FD 2A         mov d, [d]
9006   3E7F 58 01 00      add d, 1
9007   3E82 32            mov bl, [d]
9008   3E83 A7 00         mov bh, 0
9009   3E85 DD            push bl
9010   3E86 FA F3 FF      lea d, [bp + -13] ; $k
9011   3E89 FD 2A         mov d, [d]
9012   3E8B 58 00 00      add d, 0
9013   3E8E 32            mov bl, [d]
9014   3E8F A7 00         mov bh, 0
9015   3E91 DD            push bl
out/startrek.asm line 9016: Label not found: (__s98)
out/startrek.asm line 9016: Unused data in MS byte of argument. (2)
9016   3E92 26 00 00      mov b, __s98 ; "Sensors show no damage to enemy at %d, %d\n\n"
9017   3E95 FD AB         swp b
9018   3E97 D8            push b
9019   3E98 07 D1 05      call printf
9020   3E9B 51 04 00      add sp, 4
9021   3E9E 0A D6 3F      jmp _if146_exit
9022   3EA1             _if146_else:
9023   3EA1             ;; h = FROM_FIXED00(h1); 
9024   3EA1 FA F5 FF      lea d, [bp + -11] ; $h
9025   3EA4 DA            push d
9026   3EA5 FA F7 FF      lea d, [bp + -9] ; $h1
9027   3EA8 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9028   3EAB FD 39         mov c, b ; And place it into C
9029   3EAD 2A            mov b, [d] ; Lower Word in B
9030   3EAE FD AB         swp b
9031   3EB0 D8            push b
9032   3EB1 07 0B 1D      call FROM_FIXED00
9033   3EB4 51 02 00      add sp, 2
9034   3EB7 E7            pop d
9035   3EB8 FD 43         mov [d], b
9036   3EBA             ;; k->energy = k->energy - h; 
9037   3EBA FA F3 FF      lea d, [bp + -13] ; $k
9038   3EBD FD 2A         mov d, [d]
9039   3EBF 58 02 00      add d, 2
9040   3EC2 DA            push d
9041   3EC3 FA F3 FF      lea d, [bp + -13] ; $k
9042   3EC6 FD 2A         mov d, [d]
9043   3EC8 58 02 00      add d, 2
9044   3ECB 2A            mov b, [d]
9045   3ECC             ; START TERMS
9046   3ECC D7            push a
9047   3ECD 11            mov a, b
9048   3ECE FA F5 FF      lea d, [bp + -11] ; $h
9049   3ED1 2A            mov b, [d]
9050   3ED2 60            sub a, b
9051   3ED3 27            mov b, a
9052   3ED4 E4            pop a
9053   3ED5             ; END TERMS
9054   3ED5 E7            pop d
9055   3ED6 FD 43         mov [d], b
9056   3ED8             ;; printf("%d unit hit on Klingon at sector %d, %d\n", 
9057   3ED8 FA F3 FF      lea d, [bp + -13] ; $k
9058   3EDB FD 2A         mov d, [d]
9059   3EDD 58 01 00      add d, 1
9060   3EE0 32            mov bl, [d]
9061   3EE1 A7 00         mov bh, 0
9062   3EE3 DD            push bl
9063   3EE4 FA F3 FF      lea d, [bp + -13] ; $k
9064   3EE7 FD 2A         mov d, [d]
9065   3EE9 58 00 00      add d, 0
9066   3EEC 32            mov bl, [d]
9067   3EED A7 00         mov bh, 0
9068   3EEF DD            push bl
9069   3EF0 FA F5 FF      lea d, [bp + -11] ; $h
9070   3EF3 2A            mov b, [d]
9071   3EF4 FD AB         swp b
9072   3EF6 D8            push b
out/startrek.asm line 9073: Label not found: (__s99)
out/startrek.asm line 9073: Unused data in MS byte of argument. (2)
9073   3EF7 26 00 00      mov b, __s99 ; "%d unit hit on Klingon at sector %d, %d\n"
9074   3EFA FD AB         swp b
9075   3EFC D8            push b
9076   3EFD 07 D1 05      call printf
9077   3F00 51 06 00      add sp, 6
9078   3F03             ;; if (k->energy <= 0) { 
9079   3F03             _if147_cond:
9080   3F03 FA F3 FF      lea d, [bp + -13] ; $k
9081   3F06 FD 2A         mov d, [d]
9082   3F08 58 02 00      add d, 2
9083   3F0B 2A            mov b, [d]
9084   3F0C             ; START RELATIONAL
9085   3F0C D7            push a
9086   3F0D 11            mov a, b
9087   3F0E 26 00 00      mov b, $0
9088   3F11 B0            cmp a, b
9089   3F12 FD 73         slt ; <= (signed)
9090   3F14 E4            pop a
9091   3F15             ; END RELATIONAL
9092   3F15 C0 00 00      cmp b, 0
9093   3F18 C6 BE 3F      je _if147_else
9094   3F1B             _if147_true:
9095   3F1B             ;; puts("*** Klingon Destroyed ***\n"); 
out/startrek.asm line 9096: Label not found: (__s100)
out/startrek.asm line 9096: Unused data in MS byte of argument. (2)
9096   3F1B 26 00 00      mov b, __s100 ; "*** Klingon Destroyed ***\n"
9097   3F1E FD AB         swp b
9098   3F20 D8            push b
9099   3F21 07 31 13      call puts
9100   3F24 51 02 00      add sp, 2
9101   3F27             ;; klingons--; 
9102   3F27 3B E6 60      mov d, _klingons ; $klingons
9103   3F2A 32            mov bl, [d]
9104   3F2B A7 00         mov bh, 0
9105   3F2D D8            push b
9106   3F2E FD 7D         dec b
9107   3F30 3B E6 60      mov d, _klingons ; $klingons
9108   3F33 FD 43         mov [d], b
9109   3F35 E5            pop b
9110   3F36             ;; klingons_left--; 
9111   3F36 3B E8 60      mov d, _klingons_left ; $klingons_left
9112   3F39 32            mov bl, [d]
9113   3F3A A7 00         mov bh, 0
9114   3F3C D8            push b
9115   3F3D FD 7D         dec b
9116   3F3F 3B E8 60      mov d, _klingons_left ; $klingons_left
9117   3F42 FD 43         mov [d], b
9118   3F44 E5            pop b
9119   3F45             ;; wipe_klingon(k); 
9120   3F45 FA F3 FF      lea d, [bp + -13] ; $k
9121   3F48 2A            mov b, [d]
9122   3F49 FD AB         swp b
9123   3F4B D8            push b
9124   3F4C 07 01 3B      call wipe_klingon
9125   3F4F 51 02 00      add sp, 2
9126   3F52             ;; k->energy = 0; 
9127   3F52 FA F3 FF      lea d, [bp + -13] ; $k
9128   3F55 FD 2A         mov d, [d]
9129   3F57 58 02 00      add d, 2
9130   3F5A DA            push d
9131   3F5B 26 00 00      mov b, $0
9132   3F5E E7            pop d
9133   3F5F FD 43         mov [d], b
9134   3F61             ;; map[quad_y][quad_x] = map[quad_y][quad_x] - 0x100; 
9135   3F61 3B 38 60      mov d, _map_data ; $map
9136   3F64 D7            push a
9137   3F65 DA            push d
9138   3F66 3B EB 60      mov d, _quad_y ; $quad_y
9139   3F69 2A            mov b, [d]
9140   3F6A E7            pop d
9141   3F6B FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
9142   3F6F DA            push d
9143   3F70 3B ED 60      mov d, _quad_x ; $quad_x
9144   3F73 2A            mov b, [d]
9145   3F74 E7            pop d
9146   3F75 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9147   3F79 E4            pop a
9148   3F7A DA            push d
9149   3F7B 3B 38 60      mov d, _map_data ; $map
9150   3F7E D7            push a
9151   3F7F DA            push d
9152   3F80 3B EB 60      mov d, _quad_y ; $quad_y
9153   3F83 2A            mov b, [d]
9154   3F84 E7            pop d
9155   3F85 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
9156   3F89 DA            push d
9157   3F8A 3B ED 60      mov d, _quad_x ; $quad_x
9158   3F8D 2A            mov b, [d]
9159   3F8E E7            pop d
9160   3F8F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9161   3F93 E4            pop a
9162   3F94 2A            mov b, [d]
9163   3F95             ; START TERMS
9164   3F95 D7            push a
9165   3F96 11            mov a, b
9166   3F97 26 00 01      mov b, $100
9167   3F9A 60            sub a, b
9168   3F9B 27            mov b, a
9169   3F9C E4            pop a
9170   3F9D             ; END TERMS
9171   3F9D E7            pop d
9172   3F9E FD 43         mov [d], b
9173   3FA0             ;; if (klingons_left <= 0) 
9174   3FA0             _if148_cond:
9175   3FA0 3B E8 60      mov d, _klingons_left ; $klingons_left
9176   3FA3 32            mov bl, [d]
9177   3FA4 A7 00         mov bh, 0
9178   3FA6             ; START RELATIONAL
9179   3FA6 D7            push a
9180   3FA7 11            mov a, b
9181   3FA8 26 00 00      mov b, $0
9182   3FAB B0            cmp a, b
9183   3FAC FD 75         slu ; <= (unsigned)
9184   3FAE E4            pop a
9185   3FAF             ; END RELATIONAL
9186   3FAF C0 00 00      cmp b, 0
9187   3FB2 C6 BB 3F      je _if148_exit
9188   3FB5             _if148_true:
9189   3FB5             ;; won_game(); 
9190   3FB5 07 C2 54      call won_game
9191   3FB8 0A BB 3F      jmp _if148_exit
9192   3FBB             _if148_exit:
9193   3FBB 0A D6 3F      jmp _if147_exit
9194   3FBE             _if147_else:
9195   3FBE             ;; printf("   (Sensors show %d units remaining.)\n\n", k->energy); 
9196   3FBE FA F3 FF      lea d, [bp + -13] ; $k
9197   3FC1 FD 2A         mov d, [d]
9198   3FC3 58 02 00      add d, 2
9199   3FC6 2A            mov b, [d]
9200   3FC7 FD AB         swp b
9201   3FC9 D8            push b
out/startrek.asm line 9202: Label not found: (__s101)
out/startrek.asm line 9202: Unused data in MS byte of argument. (2)
9202   3FCA 26 00 00      mov b, __s101 ; "   (Sensors show %d units remaining.)\n\n"
9203   3FCD FD AB         swp b
9204   3FCF D8            push b
9205   3FD0 07 D1 05      call printf
9206   3FD3 51 04 00      add sp, 4
9207   3FD6             _if147_exit:
9208   3FD6             _if146_exit:
9209   3FD6 0A D9 3F      jmp _if145_exit
9210   3FD9             _if145_exit:
9211   3FD9             ;; k++; 
9212   3FD9 FA F3 FF      lea d, [bp + -13] ; $k
9213   3FDC 2A            mov b, [d]
9214   3FDD D8            push b
9215   3FDE FD 77         inc b
9216   3FE0 FD 77         inc b
9217   3FE2 FA F3 FF      lea d, [bp + -13] ; $k
9218   3FE5 FD 43         mov [d], b
9219   3FE7 E5            pop b
9220   3FE8             _for144_update:
9221   3FE8 FA FF FF      lea d, [bp + -1] ; $i
9222   3FEB 2A            mov b, [d]
9223   3FEC D8            push b
9224   3FED FD 77         inc b
9225   3FEF FA FF FF      lea d, [bp + -1] ; $i
9226   3FF2 FD 43         mov [d], b
9227   3FF4 E5            pop b
9228   3FF5 0A CB 3D      jmp _for144_cond
9229   3FF8             _for144_exit:
9230   3FF8             ;; klingons_shoot(); 
9231   3FF8 07 77 56      call klingons_shoot
9232   3FFB F9            leave
9233   3FFC 09            ret
9234   3FFD             
9235   3FFD             photon_torpedoes:
9236   3FFD F8 00 00      enter 0 ; (push bp; mov bp, sp)
9237   4000             ; $x3 
9238   4000             ; $y3 
9239   4000             ; $c1 
9240   4000             ; $c2 
9241   4000             ; $c3 
9242   4000             ; $c4 
9243   4000             ; $x 
9244   4000             ; $y 
9245   4000             ; $x1 
9246   4000             ; $x2 
9247   4000             ; $p 
9248   4000 52 15 00      sub sp, 21
9249   4003             ;; if (torps <= 0) { 
9250   4003             _if149_cond:
9251   4003 3B E9 60      mov d, _torps ; $torps
9252   4006 32            mov bl, [d]
9253   4007 A7 00         mov bh, 0
9254   4009             ; START RELATIONAL
9255   4009 D7            push a
9256   400A 11            mov a, b
9257   400B 26 00 00      mov b, $0
9258   400E B0            cmp a, b
9259   400F FD 75         slu ; <= (unsigned)
9260   4011 E4            pop a
9261   4012             ; END RELATIONAL
9262   4012 C0 00 00      cmp b, 0
9263   4015 C6 29 40      je _if149_exit
9264   4018             _if149_true:
9265   4018             ;; puts("All photon torpedoes expended"); 
out/startrek.asm line 9266: Label not found: (__s102)
out/startrek.asm line 9266: Unused data in MS byte of argument. (2)
9266   4018 26 00 00      mov b, __s102 ; "All photon torpedoes expended"
9267   401B FD AB         swp b
9268   401D D8            push b
9269   401E 07 31 13      call puts
9270   4021 51 02 00      add sp, 2
9271   4024             ;; return; 
9272   4024 F9            leave
9273   4025 09            ret
9274   4026 0A 29 40      jmp _if149_exit
9275   4029             _if149_exit:
9276   4029             ;; if (inoperable(5)) 
9277   4029             _if150_cond:
9278   4029 26 05 00      mov b, $5
9279   402C DD            push bl
9280   402D 07 4B 20      call inoperable
9281   4030 51 01 00      add sp, 1
9282   4033 C0 00 00      cmp b, 0
9283   4036 C6 3E 40      je _if150_exit
9284   4039             _if150_true:
9285   4039             ;; return; 
9286   4039 F9            leave
9287   403A 09            ret
9288   403B 0A 3E 40      jmp _if150_exit
9289   403E             _if150_exit:
9290   403E             ;; puts("Course (0-9): "); 
9291   403E 26 6C 66      mov b, __s65 ; "Course (0-9): "
9292   4041 FD AB         swp b
9293   4043 D8            push b
9294   4044 07 31 13      call puts
9295   4047 51 02 00      add sp, 2
9296   404A             ;; c1 = input_f00(); 
9297   404A FA FB FF      lea d, [bp + -5] ; $c1
9298   404D DA            push d
9299   404E 07 42 1E      call input_f00
9300   4051 E7            pop d
9301   4052 FD 43         mov [d], b
9302   4054             ;; if (c1 == 900) 
9303   4054             _if151_cond:
9304   4054 FA FB FF      lea d, [bp + -5] ; $c1
9305   4057 2A            mov b, [d]
9306   4058             ; START RELATIONAL
9307   4058 D7            push a
9308   4059 11            mov a, b
9309   405A 26 84 03      mov b, $384
9310   405D B0            cmp a, b
9311   405E FD 71         seq ; ==
9312   4060 E4            pop a
9313   4061             ; END RELATIONAL
9314   4061 C0 00 00      cmp b, 0
9315   4064 C6 74 40      je _if151_exit
9316   4067             _if151_true:
9317   4067             ;; c1 = 100; 
9318   4067 FA FB FF      lea d, [bp + -5] ; $c1
9319   406A DA            push d
9320   406B 26 64 00      mov b, $64
9321   406E E7            pop d
9322   406F FD 43         mov [d], b
9323   4071 0A 74 40      jmp _if151_exit
9324   4074             _if151_exit:
9325   4074             ;; if (c1 < 100 || c1 >= 900) { 
9326   4074             _if152_cond:
9327   4074 FA FB FF      lea d, [bp + -5] ; $c1
9328   4077 2A            mov b, [d]
9329   4078             ; START RELATIONAL
9330   4078 D7            push a
9331   4079 11            mov a, b
9332   407A 26 64 00      mov b, $64
9333   407D B0            cmp a, b
9334   407E FD 73         slt ; < (signed)
9335   4080 E4            pop a
9336   4081             ; END RELATIONAL
9337   4081 D7            push a
9338   4082 11            mov a, b
9339   4083 FA FB FF      lea d, [bp + -5] ; $c1
9340   4086 2A            mov b, [d]
9341   4087             ; START RELATIONAL
9342   4087 D7            push a
9343   4088 11            mov a, b
9344   4089 26 84 03      mov b, $384
9345   408C B0            cmp a, b
9346   408D FD 80         sge ; >=
9347   408F E4            pop a
9348   4090             ; END RELATIONAL
9349   4090 FD A8         sor a, b ; ||
9350   4092 E4            pop a
9351   4093 C0 00 00      cmp b, 0
9352   4096 C6 B1 40      je _if152_exit
9353   4099             _if152_true:
9354   4099             ;; printf("Ensign Chekov%s", inc_1); 
9355   4099 3B 84 61      mov d, _inc_1 ; $inc_1
9356   409C 2A            mov b, [d]
9357   409D FD AB         swp b
9358   409F D8            push b
out/startrek.asm line 9359: Label not found: (__s103)
out/startrek.asm line 9359: Unused data in MS byte of argument. (2)
9359   40A0 26 00 00      mov b, __s103 ; "Ensign Chekov%s"
9360   40A3 FD AB         swp b
9361   40A5 D8            push b
9362   40A6 07 D1 05      call printf
9363   40A9 51 04 00      add sp, 4
9364   40AC             ;; return; 
9365   40AC F9            leave
9366   40AD 09            ret
9367   40AE 0A B1 40      jmp _if152_exit
9368   40B1             _if152_exit:
9369   40B1             ;; energy = energy - 2; 
9370   40B1 3B 34 60      mov d, _energy ; $energy
9371   40B4 DA            push d
9372   40B5 3B 34 60      mov d, _energy ; $energy
9373   40B8 2A            mov b, [d]
9374   40B9             ; START TERMS
9375   40B9 D7            push a
9376   40BA 11            mov a, b
9377   40BB 26 02 00      mov b, $2
9378   40BE 60            sub a, b
9379   40BF 27            mov b, a
9380   40C0 E4            pop a
9381   40C1             ; END TERMS
9382   40C1 E7            pop d
9383   40C2 FD 43         mov [d], b
9384   40C4             ;; torps--; 
9385   40C4 3B E9 60      mov d, _torps ; $torps
9386   40C7 32            mov bl, [d]
9387   40C8 A7 00         mov bh, 0
9388   40CA D8            push b
9389   40CB FD 7D         dec b
9390   40CD 3B E9 60      mov d, _torps ; $torps
9391   40D0 FD 43         mov [d], b
9392   40D2 E5            pop b
9393   40D3             ;; c2 = FROM_FIXED00(c1);	/* Integer part */ 
9394   40D3 FA F9 FF      lea d, [bp + -7] ; $c2
9395   40D6 DA            push d
9396   40D7 FA FB FF      lea d, [bp + -5] ; $c1
9397   40DA 2A            mov b, [d]
9398   40DB FD AB         swp b
9399   40DD D8            push b
9400   40DE 07 0B 1D      call FROM_FIXED00
9401   40E1 51 02 00      add sp, 2
9402   40E4 E7            pop d
9403   40E5 FD 43         mov [d], b
9404   40E7             ;; c3 = c2 + 1;		/* Next integer part */ 
9405   40E7 FA F7 FF      lea d, [bp + -9] ; $c3
9406   40EA DA            push d
9407   40EB FA F9 FF      lea d, [bp + -7] ; $c2
9408   40EE 2A            mov b, [d]
9409   40EF             ; START TERMS
9410   40EF D7            push a
9411   40F0 11            mov a, b
9412   40F1 26 01 00      mov b, $1
9413   40F4 56            add b, a
9414   40F5 E4            pop a
9415   40F6             ; END TERMS
9416   40F6 E7            pop d
9417   40F7 FD 43         mov [d], b
9418   40F9             ;; c4 = (c1 - TO_FIXED00(c2));	/* Fractional element in fixed point */ 
9419   40F9 FA F5 FF      lea d, [bp + -11] ; $c4
9420   40FC DA            push d
9421   40FD FA FB FF      lea d, [bp + -5] ; $c1
9422   4100 2A            mov b, [d]
9423   4101             ; START TERMS
9424   4101 D7            push a
9425   4102 11            mov a, b
9426   4103 FA F9 FF      lea d, [bp + -7] ; $c2
9427   4106 2A            mov b, [d]
9428   4107 FD AB         swp b
9429   4109 D8            push b
9430   410A 07 F9 1C      call TO_FIXED00
9431   410D 51 02 00      add sp, 2
9432   4110 60            sub a, b
9433   4111 27            mov b, a
9434   4112 E4            pop a
9435   4113             ; END TERMS
9436   4113 E7            pop d
9437   4114 FD 43         mov [d], b
9438   4116             ;; x1 = 100 * c[1][c2] + (c[1][c3] - c[1][c2]) * c4; 
9439   4116 FA EF FF      lea d, [bp + -17] ; $x1
9440   4119 DA            push d
9441   411A 26 64 00      mov b, $64
9442   411D             ; START FACTORS
9443   411D D7            push a
9444   411E 11            mov a, b
9445   411F 3B 14 60      mov d, _c_data ; $c
9446   4122 D7            push a
9447   4123 DA            push d
9448   4124 26 01 00      mov b, $1
9449   4127 E7            pop d
9450   4128 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
9451   412C DA            push d
9452   412D FA F9 FF      lea d, [bp + -7] ; $c2
9453   4130 2A            mov b, [d]
9454   4131 E7            pop d
9455   4132 5A            add d, b
9456   4133 E4            pop a
9457   4134 32            mov bl, [d]
9458   4135 A7 00         mov bh, 0
9459   4137 AC            mul a, b ; *
9460   4138 11            mov a, b
9461   4139 27            mov b, a
9462   413A E4            pop a
9463   413B             ; END FACTORS
9464   413B             ; START TERMS
9465   413B D7            push a
9466   413C 11            mov a, b
9467   413D 3B 14 60      mov d, _c_data ; $c
9468   4140 D7            push a
9469   4141 DA            push d
9470   4142 26 01 00      mov b, $1
9471   4145 E7            pop d
9472   4146 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
9473   414A DA            push d
9474   414B FA F7 FF      lea d, [bp + -9] ; $c3
9475   414E 2A            mov b, [d]
9476   414F E7            pop d
9477   4150 5A            add d, b
9478   4151 E4            pop a
9479   4152 32            mov bl, [d]
9480   4153 A7 00         mov bh, 0
9481   4155             ; START TERMS
9482   4155 D7            push a
9483   4156 11            mov a, b
9484   4157 3B 14 60      mov d, _c_data ; $c
9485   415A D7            push a
9486   415B DA            push d
9487   415C 26 01 00      mov b, $1
9488   415F E7            pop d
9489   4160 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
9490   4164 DA            push d
9491   4165 FA F9 FF      lea d, [bp + -7] ; $c2
9492   4168 2A            mov b, [d]
9493   4169 E7            pop d
9494   416A 5A            add d, b
9495   416B E4            pop a
9496   416C 32            mov bl, [d]
9497   416D A7 00         mov bh, 0
9498   416F 60            sub a, b
9499   4170 27            mov b, a
9500   4171 E4            pop a
9501   4172             ; END TERMS
9502   4172             ; START FACTORS
9503   4172 D7            push a
9504   4173 11            mov a, b
9505   4174 FA F5 FF      lea d, [bp + -11] ; $c4
9506   4177 2A            mov b, [d]
9507   4178 AC            mul a, b ; *
9508   4179 11            mov a, b
9509   417A 27            mov b, a
9510   417B E4            pop a
9511   417C             ; END FACTORS
9512   417C 56            add b, a
9513   417D E4            pop a
9514   417E             ; END TERMS
9515   417E E7            pop d
9516   417F FD 43         mov [d], b
9517   4181             ;; x2 = 100 * c[2][c2] + (c[2][c3] - c[2][c2]) * c4; 
9518   4181 FA ED FF      lea d, [bp + -19] ; $x2
9519   4184 DA            push d
9520   4185 26 64 00      mov b, $64
9521   4188             ; START FACTORS
9522   4188 D7            push a
9523   4189 11            mov a, b
9524   418A 3B 14 60      mov d, _c_data ; $c
9525   418D D7            push a
9526   418E DA            push d
9527   418F 26 02 00      mov b, $2
9528   4192 E7            pop d
9529   4193 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
9530   4197 DA            push d
9531   4198 FA F9 FF      lea d, [bp + -7] ; $c2
9532   419B 2A            mov b, [d]
9533   419C E7            pop d
9534   419D 5A            add d, b
9535   419E E4            pop a
9536   419F 32            mov bl, [d]
9537   41A0 A7 00         mov bh, 0
9538   41A2 AC            mul a, b ; *
9539   41A3 11            mov a, b
9540   41A4 27            mov b, a
9541   41A5 E4            pop a
9542   41A6             ; END FACTORS
9543   41A6             ; START TERMS
9544   41A6 D7            push a
9545   41A7 11            mov a, b
9546   41A8 3B 14 60      mov d, _c_data ; $c
9547   41AB D7            push a
9548   41AC DA            push d
9549   41AD 26 02 00      mov b, $2
9550   41B0 E7            pop d
9551   41B1 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
9552   41B5 DA            push d
9553   41B6 FA F7 FF      lea d, [bp + -9] ; $c3
9554   41B9 2A            mov b, [d]
9555   41BA E7            pop d
9556   41BB 5A            add d, b
9557   41BC E4            pop a
9558   41BD 32            mov bl, [d]
9559   41BE A7 00         mov bh, 0
9560   41C0             ; START TERMS
9561   41C0 D7            push a
9562   41C1 11            mov a, b
9563   41C2 3B 14 60      mov d, _c_data ; $c
9564   41C5 D7            push a
9565   41C6 DA            push d
9566   41C7 26 02 00      mov b, $2
9567   41CA E7            pop d
9568   41CB FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
9569   41CF DA            push d
9570   41D0 FA F9 FF      lea d, [bp + -7] ; $c2
9571   41D3 2A            mov b, [d]
9572   41D4 E7            pop d
9573   41D5 5A            add d, b
9574   41D6 E4            pop a
9575   41D7 32            mov bl, [d]
9576   41D8 A7 00         mov bh, 0
9577   41DA 60            sub a, b
9578   41DB 27            mov b, a
9579   41DC E4            pop a
9580   41DD             ; END TERMS
9581   41DD             ; START FACTORS
9582   41DD D7            push a
9583   41DE 11            mov a, b
9584   41DF FA F5 FF      lea d, [bp + -11] ; $c4
9585   41E2 2A            mov b, [d]
9586   41E3 AC            mul a, b ; *
9587   41E4 11            mov a, b
9588   41E5 27            mov b, a
9589   41E6 E4            pop a
9590   41E7             ; END FACTORS
9591   41E7 56            add b, a
9592   41E8 E4            pop a
9593   41E9             ; END TERMS
9594   41E9 E7            pop d
9595   41EA FD 43         mov [d], b
9596   41EC             ;; x = ship_y + x1; 
9597   41EC FA F3 FF      lea d, [bp + -13] ; $x
9598   41EF DA            push d
9599   41F0 3B 0A 61      mov d, _ship_y ; $ship_y
9600   41F3 2A            mov b, [d]
9601   41F4             ; START TERMS
9602   41F4 D7            push a
9603   41F5 11            mov a, b
9604   41F6 FA EF FF      lea d, [bp + -17] ; $x1
9605   41F9 2A            mov b, [d]
9606   41FA 56            add b, a
9607   41FB E4            pop a
9608   41FC             ; END TERMS
9609   41FC E7            pop d
9610   41FD FD 43         mov [d], b
9611   41FF             ;; y = ship_x + x2; 
9612   41FF FA F1 FF      lea d, [bp + -15] ; $y
9613   4202 DA            push d
9614   4203 3B 0C 61      mov d, _ship_x ; $ship_x
9615   4206 2A            mov b, [d]
9616   4207             ; START TERMS
9617   4207 D7            push a
9618   4208 11            mov a, b
9619   4209 FA ED FF      lea d, [bp + -19] ; $x2
9620   420C 2A            mov b, [d]
9621   420D 56            add b, a
9622   420E E4            pop a
9623   420F             ; END TERMS
9624   420F E7            pop d
9625   4210 FD 43         mov [d], b
9626   4212             ;; x3 = FROM_FIXED00(x); 
9627   4212 FA FF FF      lea d, [bp + -1] ; $x3
9628   4215 DA            push d
9629   4216 FA F3 FF      lea d, [bp + -13] ; $x
9630   4219 2A            mov b, [d]
9631   421A FD AB         swp b
9632   421C D8            push b
9633   421D 07 0B 1D      call FROM_FIXED00
9634   4220 51 02 00      add sp, 2
9635   4223 E7            pop d
9636   4224 FD 43         mov [d], b
9637   4226             ;; y3 = FROM_FIXED00(y); 
9638   4226 FA FD FF      lea d, [bp + -3] ; $y3
9639   4229 DA            push d
9640   422A FA F1 FF      lea d, [bp + -15] ; $y
9641   422D 2A            mov b, [d]
9642   422E FD AB         swp b
9643   4230 D8            push b
9644   4231 07 0B 1D      call FROM_FIXED00
9645   4234 51 02 00      add sp, 2
9646   4237 E7            pop d
9647   4238 FD 43         mov [d], b
9648   423A             ;; puts("Torpedo Track:"); 
out/startrek.asm line 9649: Label not found: (__s104)
out/startrek.asm line 9649: Unused data in MS byte of argument. (2)
9649   423A 26 00 00      mov b, __s104 ; "Torpedo Track:"
9650   423D FD AB         swp b
9651   423F D8            push b
9652   4240 07 31 13      call puts
9653   4243 51 02 00      add sp, 2
9654   4246             ;; while (x3 >= 1 && x3 <= 8 && y3 >= 1 && y3 <= 8) { 
9655   4246             _while153_cond:
9656   4246 FA FF FF      lea d, [bp + -1] ; $x3
9657   4249 2A            mov b, [d]
9658   424A             ; START RELATIONAL
9659   424A D7            push a
9660   424B 11            mov a, b
9661   424C 26 01 00      mov b, $1
9662   424F B0            cmp a, b
9663   4250 FD 80         sge ; >=
9664   4252 E4            pop a
9665   4253             ; END RELATIONAL
9666   4253 D7            push a
9667   4254 11            mov a, b
9668   4255 FA FF FF      lea d, [bp + -1] ; $x3
9669   4258 2A            mov b, [d]
9670   4259             ; START RELATIONAL
9671   4259 D7            push a
9672   425A 11            mov a, b
9673   425B 26 08 00      mov b, $8
9674   425E B0            cmp a, b
9675   425F FD 73         slt ; <= (signed)
9676   4261 E4            pop a
9677   4262             ; END RELATIONAL
9678   4262 FD A7         sand a, b
9679   4264 11            mov a, b
9680   4265 FA FD FF      lea d, [bp + -3] ; $y3
9681   4268 2A            mov b, [d]
9682   4269             ; START RELATIONAL
9683   4269 D7            push a
9684   426A 11            mov a, b
9685   426B 26 01 00      mov b, $1
9686   426E B0            cmp a, b
9687   426F FD 80         sge ; >=
9688   4271 E4            pop a
9689   4272             ; END RELATIONAL
9690   4272 FD A7         sand a, b
9691   4274 11            mov a, b
9692   4275 FA FD FF      lea d, [bp + -3] ; $y3
9693   4278 2A            mov b, [d]
9694   4279             ; START RELATIONAL
9695   4279 D7            push a
9696   427A 11            mov a, b
9697   427B 26 08 00      mov b, $8
9698   427E B0            cmp a, b
9699   427F FD 73         slt ; <= (signed)
9700   4281 E4            pop a
9701   4282             ; END RELATIONAL
9702   4282 FD A7         sand a, b
9703   4284 E4            pop a
9704   4285 C0 00 00      cmp b, 0
9705   4288 C6 65 43      je _while153_exit
9706   428B             _while153_block:
9707   428B             ;; printf("    %d, %d\n", x3, y3); 
9708   428B FA FD FF      lea d, [bp + -3] ; $y3
9709   428E 2A            mov b, [d]
9710   428F FD AB         swp b
9711   4291 D8            push b
9712   4292 FA FF FF      lea d, [bp + -1] ; $x3
9713   4295 2A            mov b, [d]
9714   4296 FD AB         swp b
9715   4298 D8            push b
out/startrek.asm line 9716: Label not found: (__s105)
out/startrek.asm line 9716: Unused data in MS byte of argument. (2)
9716   4299 26 00 00      mov b, __s105 ; "    %d, %d\n"
9717   429C FD AB         swp b
9718   429E D8            push b
9719   429F 07 D1 05      call printf
9720   42A2 51 06 00      add sp, 6
9721   42A5             ;; p = quad[x3+-1][y3+-1]; 
9722   42A5 FA EC FF      lea d, [bp + -20] ; $p
9723   42A8 DA            push d
9724   42A9 3B 10 61      mov d, _quad_data ; $quad
9725   42AC D7            push a
9726   42AD DA            push d
9727   42AE FA FF FF      lea d, [bp + -1] ; $x3
9728   42B1 2A            mov b, [d]
9729   42B2             ; START TERMS
9730   42B2 D7            push a
9731   42B3 11            mov a, b
9732   42B4 26 FF FF      mov b, $ffff
9733   42B7 56            add b, a
9734   42B8 E4            pop a
9735   42B9             ; END TERMS
9736   42B9 E7            pop d
9737   42BA FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
9738   42BE DA            push d
9739   42BF FA FD FF      lea d, [bp + -3] ; $y3
9740   42C2 2A            mov b, [d]
9741   42C3             ; START TERMS
9742   42C3 D7            push a
9743   42C4 11            mov a, b
9744   42C5 26 FF FF      mov b, $ffff
9745   42C8 56            add b, a
9746   42C9 E4            pop a
9747   42CA             ; END TERMS
9748   42CA E7            pop d
9749   42CB 5A            add d, b
9750   42CC E4            pop a
9751   42CD 32            mov bl, [d]
9752   42CE A7 00         mov bh, 0
9753   42D0 E7            pop d
9754   42D1 FD 3E         mov [d], bl
9755   42D3             ;; if (p !=  		0       && p !=  		4     ) { 
9756   42D3             _if154_cond:
9757   42D3 FA EC FF      lea d, [bp + -20] ; $p
9758   42D6 32            mov bl, [d]
9759   42D7 A7 00         mov bh, 0
9760   42D9             ; START RELATIONAL
9761   42D9 D7            push a
9762   42DA 11            mov a, b
9763   42DB 26 00 00      mov b, $0
9764   42DE B0            cmp a, b
9765   42DF FD 72         sneq ; !=
9766   42E1 E4            pop a
9767   42E2             ; END RELATIONAL
9768   42E2 D7            push a
9769   42E3 11            mov a, b
9770   42E4 FA EC FF      lea d, [bp + -20] ; $p
9771   42E7 32            mov bl, [d]
9772   42E8 A7 00         mov bh, 0
9773   42EA             ; START RELATIONAL
9774   42EA D7            push a
9775   42EB 11            mov a, b
9776   42EC 26 04 00      mov b, $4
9777   42EF B0            cmp a, b
9778   42F0 FD 72         sneq ; !=
9779   42F2 E4            pop a
9780   42F3             ; END RELATIONAL
9781   42F3 FD A7         sand a, b
9782   42F5 E4            pop a
9783   42F6 C0 00 00      cmp b, 0
9784   42F9 C6 14 43      je _if154_exit
9785   42FC             _if154_true:
9786   42FC             ;; torpedo_hit(x3, y3); 
9787   42FC FA FD FF      lea d, [bp + -3] ; $y3
9788   42FF 2A            mov b, [d]
9789   4300 DD            push bl
9790   4301 FA FF FF      lea d, [bp + -1] ; $x3
9791   4304 2A            mov b, [d]
9792   4305 DD            push bl
9793   4306 07 76 43      call torpedo_hit
9794   4309 51 02 00      add sp, 2
9795   430C             ;; klingons_shoot(); 
9796   430C 07 77 56      call klingons_shoot
9797   430F             ;; return; 
9798   430F F9            leave
9799   4310 09            ret
9800   4311 0A 14 43      jmp _if154_exit
9801   4314             _if154_exit:
9802   4314             ;; x = x + x1; 
9803   4314 FA F3 FF      lea d, [bp + -13] ; $x
9804   4317 DA            push d
9805   4318 FA F3 FF      lea d, [bp + -13] ; $x
9806   431B 2A            mov b, [d]
9807   431C             ; START TERMS
9808   431C D7            push a
9809   431D 11            mov a, b
9810   431E FA EF FF      lea d, [bp + -17] ; $x1
9811   4321 2A            mov b, [d]
9812   4322 56            add b, a
9813   4323 E4            pop a
9814   4324             ; END TERMS
9815   4324 E7            pop d
9816   4325 FD 43         mov [d], b
9817   4327             ;; y = y + x2; 
9818   4327 FA F1 FF      lea d, [bp + -15] ; $y
9819   432A DA            push d
9820   432B FA F1 FF      lea d, [bp + -15] ; $y
9821   432E 2A            mov b, [d]
9822   432F             ; START TERMS
9823   432F D7            push a
9824   4330 11            mov a, b
9825   4331 FA ED FF      lea d, [bp + -19] ; $x2
9826   4334 2A            mov b, [d]
9827   4335 56            add b, a
9828   4336 E4            pop a
9829   4337             ; END TERMS
9830   4337 E7            pop d
9831   4338 FD 43         mov [d], b
9832   433A             ;; x3 = FROM_FIXED00(x); 
9833   433A FA FF FF      lea d, [bp + -1] ; $x3
9834   433D DA            push d
9835   433E FA F3 FF      lea d, [bp + -13] ; $x
9836   4341 2A            mov b, [d]
9837   4342 FD AB         swp b
9838   4344 D8            push b
9839   4345 07 0B 1D      call FROM_FIXED00
9840   4348 51 02 00      add sp, 2
9841   434B E7            pop d
9842   434C FD 43         mov [d], b
9843   434E             ;; y3 = FROM_FIXED00(y); 
9844   434E FA FD FF      lea d, [bp + -3] ; $y3
9845   4351 DA            push d
9846   4352 FA F1 FF      lea d, [bp + -15] ; $y
9847   4355 2A            mov b, [d]
9848   4356 FD AB         swp b
9849   4358 D8            push b
9850   4359 07 0B 1D      call FROM_FIXED00
9851   435C 51 02 00      add sp, 2
9852   435F E7            pop d
9853   4360 FD 43         mov [d], b
9854   4362 0A 46 42      jmp _while153_cond
9855   4365             _while153_exit:
9856   4365             ;; puts("Torpedo Missed\n"); 
out/startrek.asm line 9857: Label not found: (__s106)
out/startrek.asm line 9857: Unused data in MS byte of argument. (2)
9857   4365 26 00 00      mov b, __s106 ; "Torpedo Missed\n"
9858   4368 FD AB         swp b
9859   436A D8            push b
9860   436B 07 31 13      call puts
9861   436E 51 02 00      add sp, 2
9862   4371             ;; klingons_shoot(); 
9863   4371 07 77 56      call klingons_shoot
9864   4374 F9            leave
9865   4375 09            ret
9866   4376             
9867   4376             torpedo_hit:
9868   4376 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9869   4379             ; $i 
9870   4379             ; $k 
9871   4379 52 04 00      sub sp, 4
9872   437C             ;; switch(quad[yp+-1][xp+-1]) { 
9873   437C             _switch155_expr:
9874   437C 3B 10 61      mov d, _quad_data ; $quad
9875   437F D7            push a
9876   4380 DA            push d
9877   4381 FA 05 00      lea d, [bp + 5] ; $yp
9878   4384 32            mov bl, [d]
9879   4385 A7 00         mov bh, 0
9880   4387             ; START TERMS
9881   4387 D7            push a
9882   4388 11            mov a, b
9883   4389 26 FF FF      mov b, $ffff
9884   438C 56            add b, a
9885   438D E4            pop a
9886   438E             ; END TERMS
9887   438E E7            pop d
9888   438F FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
9889   4393 DA            push d
9890   4394 FA 06 00      lea d, [bp + 6] ; $xp
9891   4397 32            mov bl, [d]
9892   4398 A7 00         mov bh, 0
9893   439A             ; START TERMS
9894   439A D7            push a
9895   439B 11            mov a, b
9896   439C 26 FF FF      mov b, $ffff
9897   439F 56            add b, a
9898   43A0 E4            pop a
9899   43A1             ; END TERMS
9900   43A1 E7            pop d
9901   43A2 5A            add d, b
9902   43A3 E4            pop a
9903   43A4 32            mov bl, [d]
9904   43A5 A7 00         mov bh, 0
9905   43A7             _switch155_comparisons:
9906   43A7 C0 01 00      cmp b, 1
9907   43AA C6 BC 43      je _switch155_case0
9908   43AD C0 03 00      cmp b, 3
9909   43B0 C6 D8 43      je _switch155_case1
9910   43B3 C0 02 00      cmp b, 2
9911   43B6 C6 F1 44      je _switch155_case2
9912   43B9 0A EC 45      jmp _switch155_exit
9913   43BC             _switch155_case0:
9914   43BC             ;; printf("Star at %d, %d absorbed torpedo energy.\n\n", yp, xp); 
9915   43BC FA 06 00      lea d, [bp + 6] ; $xp
9916   43BF 32            mov bl, [d]
9917   43C0 A7 00         mov bh, 0
9918   43C2 DD            push bl
9919   43C3 FA 05 00      lea d, [bp + 5] ; $yp
9920   43C6 32            mov bl, [d]
9921   43C7 A7 00         mov bh, 0
9922   43C9 DD            push bl
out/startrek.asm line 9923: Label not found: (__s107)
out/startrek.asm line 9923: Unused data in MS byte of argument. (2)
9923   43CA 26 00 00      mov b, __s107 ; "Star at %d, %d absorbed torpedo energy.\n\n"
9924   43CD FD AB         swp b
9925   43CF D8            push b
9926   43D0 07 D1 05      call printf
9927   43D3 51 04 00      add sp, 4
9928   43D6             ;; return; 
9929   43D6 F9            leave
9930   43D7 09            ret
9931   43D8             _switch155_case1:
9932   43D8             ;; puts("*** Klingon Destroyed ***\n"); 
out/startrek.asm line 9933: Label not found: (__s100)
out/startrek.asm line 9933: Unused data in MS byte of argument. (2)
9933   43D8 26 00 00      mov b, __s100 ; "*** Klingon Destroyed ***\n"
9934   43DB FD AB         swp b
9935   43DD D8            push b
9936   43DE 07 31 13      call puts
9937   43E1 51 02 00      add sp, 2
9938   43E4             ;; klingons--; 
9939   43E4 3B E6 60      mov d, _klingons ; $klingons
9940   43E7 32            mov bl, [d]
9941   43E8 A7 00         mov bh, 0
9942   43EA D8            push b
9943   43EB FD 7D         dec b
9944   43ED 3B E6 60      mov d, _klingons ; $klingons
9945   43F0 FD 43         mov [d], b
9946   43F2 E5            pop b
9947   43F3             ;; klingons_left--; 
9948   43F3 3B E8 60      mov d, _klingons_left ; $klingons_left
9949   43F6 32            mov bl, [d]
9950   43F7 A7 00         mov bh, 0
9951   43F9 D8            push b
9952   43FA FD 7D         dec b
9953   43FC 3B E8 60      mov d, _klingons_left ; $klingons_left
9954   43FF FD 43         mov [d], b
9955   4401 E5            pop b
9956   4402             ;; if (klingons_left <= 0) 
9957   4402             _if156_cond:
9958   4402 3B E8 60      mov d, _klingons_left ; $klingons_left
9959   4405 32            mov bl, [d]
9960   4406 A7 00         mov bh, 0
9961   4408             ; START RELATIONAL
9962   4408 D7            push a
9963   4409 11            mov a, b
9964   440A 26 00 00      mov b, $0
9965   440D B0            cmp a, b
9966   440E FD 75         slu ; <= (unsigned)
9967   4410 E4            pop a
9968   4411             ; END RELATIONAL
9969   4411 C0 00 00      cmp b, 0
9970   4414 C6 1D 44      je _if156_exit
9971   4417             _if156_true:
9972   4417             ;; won_game(); 
9973   4417 07 C2 54      call won_game
9974   441A 0A 1D 44      jmp _if156_exit
9975   441D             _if156_exit:
9976   441D             ;; k = kdata; 
9977   441D FA FD FF      lea d, [bp + -3] ; $k
9978   4420 DA            push d
9979   4421 3B DA 60      mov d, _kdata_data ; $kdata
9980   4424 2D            mov b, d
9981   4425 E7            pop d
9982   4426 FD 43         mov [d], b
9983   4428             ;; for (i = 0; i <= 2; i++) { 
9984   4428             _for157_init:
9985   4428 FA FF FF      lea d, [bp + -1] ; $i
9986   442B DA            push d
9987   442C 26 00 00      mov b, $0
9988   442F E7            pop d
9989   4430 FD 43         mov [d], b
9990   4432             _for157_cond:
9991   4432 FA FF FF      lea d, [bp + -1] ; $i
9992   4435 2A            mov b, [d]
9993   4436             ; START RELATIONAL
9994   4436 D7            push a
9995   4437 11            mov a, b
9996   4438 26 02 00      mov b, $2
9997   443B B0            cmp a, b
9998   443C FD 73         slt ; <= (signed)
9999   443E E4            pop a
10000  443F             ; END RELATIONAL
10001  443F C0 00 00      cmp b, 0
10002  4442 C6 AF 44      je _for157_exit
10003  4445             _for157_block:
10004  4445             ;; if (yp == k->y && xp == k->x) 
10005  4445             _if158_cond:
10006  4445 FA 05 00      lea d, [bp + 5] ; $yp
10007  4448 32            mov bl, [d]
10008  4449 A7 00         mov bh, 0
10009  444B             ; START RELATIONAL
10010  444B D7            push a
10011  444C 11            mov a, b
10012  444D FA FD FF      lea d, [bp + -3] ; $k
10013  4450 FD 2A         mov d, [d]
10014  4452 58 00 00      add d, 0
10015  4455 32            mov bl, [d]
10016  4456 A7 00         mov bh, 0
10017  4458 B0            cmp a, b
10018  4459 FD 71         seq ; ==
10019  445B E4            pop a
10020  445C             ; END RELATIONAL
10021  445C D7            push a
10022  445D 11            mov a, b
10023  445E FA 06 00      lea d, [bp + 6] ; $xp
10024  4461 32            mov bl, [d]
10025  4462 A7 00         mov bh, 0
10026  4464             ; START RELATIONAL
10027  4464 D7            push a
10028  4465 11            mov a, b
10029  4466 FA FD FF      lea d, [bp + -3] ; $k
10030  4469 FD 2A         mov d, [d]
10031  446B 58 01 00      add d, 1
10032  446E 32            mov bl, [d]
10033  446F A7 00         mov bh, 0
10034  4471 B0            cmp a, b
10035  4472 FD 71         seq ; ==
10036  4474 E4            pop a
10037  4475             ; END RELATIONAL
10038  4475 FD A7         sand a, b
10039  4477 E4            pop a
10040  4478 C0 00 00      cmp b, 0
10041  447B C6 90 44      je _if158_exit
10042  447E             _if158_true:
10043  447E             ;; k->energy = 0; 
10044  447E FA FD FF      lea d, [bp + -3] ; $k
10045  4481 FD 2A         mov d, [d]
10046  4483 58 02 00      add d, 2
10047  4486 DA            push d
10048  4487 26 00 00      mov b, $0
10049  448A E7            pop d
10050  448B FD 43         mov [d], b
10051  448D 0A 90 44      jmp _if158_exit
10052  4490             _if158_exit:
10053  4490             ;; k++; 
10054  4490 FA FD FF      lea d, [bp + -3] ; $k
10055  4493 2A            mov b, [d]
10056  4494 D8            push b
10057  4495 FD 77         inc b
10058  4497 FD 77         inc b
10059  4499 FA FD FF      lea d, [bp + -3] ; $k
10060  449C FD 43         mov [d], b
10061  449E E5            pop b
10062  449F             _for157_update:
10063  449F FA FF FF      lea d, [bp + -1] ; $i
10064  44A2 2A            mov b, [d]
10065  44A3 D8            push b
10066  44A4 FD 77         inc b
10067  44A6 FA FF FF      lea d, [bp + -1] ; $i
10068  44A9 FD 43         mov [d], b
10069  44AB E5            pop b
10070  44AC 0A 32 44      jmp _for157_cond
10071  44AF             _for157_exit:
10072  44AF             ;; map[quad_y][quad_x] =map[quad_y][quad_x] - 0x100; 
10073  44AF 3B 38 60      mov d, _map_data ; $map
10074  44B2 D7            push a
10075  44B3 DA            push d
10076  44B4 3B EB 60      mov d, _quad_y ; $quad_y
10077  44B7 2A            mov b, [d]
10078  44B8 E7            pop d
10079  44B9 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
10080  44BD DA            push d
10081  44BE 3B ED 60      mov d, _quad_x ; $quad_x
10082  44C1 2A            mov b, [d]
10083  44C2 E7            pop d
10084  44C3 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10085  44C7 E4            pop a
10086  44C8 DA            push d
10087  44C9 3B 38 60      mov d, _map_data ; $map
10088  44CC D7            push a
10089  44CD DA            push d
10090  44CE 3B EB 60      mov d, _quad_y ; $quad_y
10091  44D1 2A            mov b, [d]
10092  44D2 E7            pop d
10093  44D3 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
10094  44D7 DA            push d
10095  44D8 3B ED 60      mov d, _quad_x ; $quad_x
10096  44DB 2A            mov b, [d]
10097  44DC E7            pop d
10098  44DD FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10099  44E1 E4            pop a
10100  44E2 2A            mov b, [d]
10101  44E3             ; START TERMS
10102  44E3 D7            push a
10103  44E4 11            mov a, b
10104  44E5 26 00 01      mov b, $100
10105  44E8 60            sub a, b
10106  44E9 27            mov b, a
10107  44EA E4            pop a
10108  44EB             ; END TERMS
10109  44EB E7            pop d
10110  44EC FD 43         mov [d], b
10111  44EE             ;; break; 
10112  44EE 0A EC 45      jmp _switch155_exit ; case break
10113  44F1             _switch155_case2:
10114  44F1             ;; puts("*** Starbase Destroyed ***"); 
out/startrek.asm line 10115: Label not found: (__s108)
out/startrek.asm line 10115: Unused data in MS byte of argument. (2)
10115  44F1 26 00 00      mov b, __s108 ; "*** Starbase Destroyed ***"
10116  44F4 FD AB         swp b
10117  44F6 D8            push b
10118  44F7 07 31 13      call puts
10119  44FA 51 02 00      add sp, 2
10120  44FD             ;; starbases--; 
10121  44FD 3B 10 60      mov d, _starbases ; $starbases
10122  4500 32            mov bl, [d]
10123  4501 A7 00         mov bh, 0
10124  4503 D8            push b
10125  4504 FD 7D         dec b
10126  4506 3B 10 60      mov d, _starbases ; $starbases
10127  4509 FD 43         mov [d], b
10128  450B E5            pop b
10129  450C             ;; starbases_left--; 
10130  450C 3B 13 60      mov d, _starbases_left ; $starbases_left
10131  450F 32            mov bl, [d]
10132  4510 A7 00         mov bh, 0
10133  4512 D8            push b
10134  4513 FD 7D         dec b
10135  4515 3B 13 60      mov d, _starbases_left ; $starbases_left
10136  4518 FD 43         mov [d], b
10137  451A E5            pop b
10138  451B             ;; if (starbases_left <= 0 && klingons_left <= FROM_FIXED(stardate) - time_start - time_up) { 
10139  451B             _if159_cond:
10140  451B 3B 13 60      mov d, _starbases_left ; $starbases_left
10141  451E 32            mov bl, [d]
10142  451F A7 00         mov bh, 0
10143  4521             ; START RELATIONAL
10144  4521 D7            push a
10145  4522 11            mov a, b
10146  4523 26 00 00      mov b, $0
10147  4526 B0            cmp a, b
10148  4527 FD 73         slt ; <= (signed)
10149  4529 E4            pop a
10150  452A             ; END RELATIONAL
10151  452A D7            push a
10152  452B 11            mov a, b
10153  452C 3B E8 60      mov d, _klingons_left ; $klingons_left
10154  452F 32            mov bl, [d]
10155  4530 A7 00         mov bh, 0
10156  4532             ; START RELATIONAL
10157  4532 D7            push a
10158  4533 11            mov a, b
10159  4534 3B 0E 61      mov d, _stardate ; $stardate
10160  4537 2A            mov b, [d]
10161  4538 FD AB         swp b
10162  453A D8            push b
10163  453B 07 E8 1C      call FROM_FIXED
10164  453E 51 02 00      add sp, 2
10165  4541             ; START TERMS
10166  4541 D7            push a
10167  4542 11            mov a, b
10168  4543 3B F2 60      mov d, _time_start ; $time_start
10169  4546 2A            mov b, [d]
10170  4547 60            sub a, b
10171  4548 27            mov b, a
10172  4549 11            mov a, b
10173  454A 3B F4 60      mov d, _time_up ; $time_up
10174  454D 2A            mov b, [d]
10175  454E 60            sub a, b
10176  454F 27            mov b, a
10177  4550 E4            pop a
10178  4551             ; END TERMS
10179  4551 B0            cmp a, b
10180  4552 FD 75         slu ; <= (unsigned)
10181  4554 E4            pop a
10182  4555             ; END RELATIONAL
10183  4555 FD A7         sand a, b
10184  4557 E4            pop a
10185  4558 C0 00 00      cmp b, 0
10186  455B C6 94 45      je _if159_exit
10187  455E             _if159_true:
10188  455E             ;; puts("That does it, Captain!!"); 
out/startrek.asm line 10189: Label not found: (__s109)
out/startrek.asm line 10189: Unused data in MS byte of argument. (2)
10189  455E 26 00 00      mov b, __s109 ; "That does it, Captain!!"
10190  4561 FD AB         swp b
10191  4563 D8            push b
10192  4564 07 31 13      call puts
10193  4567 51 02 00      add sp, 2
10194  456A             ;; puts("You are hereby relieved of command\n"); 
out/startrek.asm line 10195: Label not found: (__s110)
out/startrek.asm line 10195: Unused data in MS byte of argument. (2)
10195  456A 26 00 00      mov b, __s110 ; "You are hereby relieved of command\n"
10196  456D FD AB         swp b
10197  456F D8            push b
10198  4570 07 31 13      call puts
10199  4573 51 02 00      add sp, 2
10200  4576             ;; puts("and sentenced to 99 stardates of hard"); 
out/startrek.asm line 10201: Label not found: (__s111)
out/startrek.asm line 10201: Unused data in MS byte of argument. (2)
10201  4576 26 00 00      mov b, __s111 ; "and sentenced to 99 stardates of hard"
10202  4579 FD AB         swp b
10203  457B D8            push b
10204  457C 07 31 13      call puts
10205  457F 51 02 00      add sp, 2
10206  4582             ;; puts("labor on Cygnus 12!!\n"); 
out/startrek.asm line 10207: Label not found: (__s112)
out/startrek.asm line 10207: Unused data in MS byte of argument. (2)
10207  4582 26 00 00      mov b, __s112 ; "labor on Cygnus 12!!\n"
10208  4585 FD AB         swp b
10209  4587 D8            push b
10210  4588 07 31 13      call puts
10211  458B 51 02 00      add sp, 2
10212  458E             ;; resign_commision(); 
10213  458E 07 A7 54      call resign_commision
10214  4591 0A 94 45      jmp _if159_exit
10215  4594             _if159_exit:
10216  4594             ;; puts("Starfleet Command reviewing your record to consider\n court martial!\n"); 
out/startrek.asm line 10217: Label not found: (__s113)
out/startrek.asm line 10217: Unused data in MS byte of argument. (2)
10217  4594 26 00 00      mov b, __s113 ; "Starfleet Command reviewing your record to consider\n court martial!\n"
10218  4597 FD AB         swp b
10219  4599 D8            push b
10220  459A 07 31 13      call puts
10221  459D 51 02 00      add sp, 2
10222  45A0             ;; docked = 0;		/* Undock */ 
10223  45A0 3B 33 60      mov d, _docked ; $docked
10224  45A3 DA            push d
10225  45A4 26 00 00      mov b, $0
10226  45A7 E7            pop d
10227  45A8 FD 3E         mov [d], bl
10228  45AA             ;; map[quad_y][quad_x] =map[quad_y][quad_x] - 0x10; 
10229  45AA 3B 38 60      mov d, _map_data ; $map
10230  45AD D7            push a
10231  45AE DA            push d
10232  45AF 3B EB 60      mov d, _quad_y ; $quad_y
10233  45B2 2A            mov b, [d]
10234  45B3 E7            pop d
10235  45B4 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
10236  45B8 DA            push d
10237  45B9 3B ED 60      mov d, _quad_x ; $quad_x
10238  45BC 2A            mov b, [d]
10239  45BD E7            pop d
10240  45BE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10241  45C2 E4            pop a
10242  45C3 DA            push d
10243  45C4 3B 38 60      mov d, _map_data ; $map
10244  45C7 D7            push a
10245  45C8 DA            push d
10246  45C9 3B EB 60      mov d, _quad_y ; $quad_y
10247  45CC 2A            mov b, [d]
10248  45CD E7            pop d
10249  45CE FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
10250  45D2 DA            push d
10251  45D3 3B ED 60      mov d, _quad_x ; $quad_x
10252  45D6 2A            mov b, [d]
10253  45D7 E7            pop d
10254  45D8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10255  45DC E4            pop a
10256  45DD 2A            mov b, [d]
10257  45DE             ; START TERMS
10258  45DE D7            push a
10259  45DF 11            mov a, b
10260  45E0 26 10 00      mov b, $10
10261  45E3 60            sub a, b
10262  45E4 27            mov b, a
10263  45E5 E4            pop a
10264  45E6             ; END TERMS
10265  45E6 E7            pop d
10266  45E7 FD 43         mov [d], b
10267  45E9             ;; break; 
10268  45E9 0A EC 45      jmp _switch155_exit ; case break
10269  45EC             _switch155_exit:
10270  45EC             ;; quad[yp+-1][xp+-1] =  		0      ; 
10271  45EC 3B 10 61      mov d, _quad_data ; $quad
10272  45EF D7            push a
10273  45F0 DA            push d
10274  45F1 FA 05 00      lea d, [bp + 5] ; $yp
10275  45F4 32            mov bl, [d]
10276  45F5 A7 00         mov bh, 0
10277  45F7             ; START TERMS
10278  45F7 D7            push a
10279  45F8 11            mov a, b
10280  45F9 26 FF FF      mov b, $ffff
10281  45FC 56            add b, a
10282  45FD E4            pop a
10283  45FE             ; END TERMS
10284  45FE E7            pop d
10285  45FF FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
10286  4603 DA            push d
10287  4604 FA 06 00      lea d, [bp + 6] ; $xp
10288  4607 32            mov bl, [d]
10289  4608 A7 00         mov bh, 0
10290  460A             ; START TERMS
10291  460A D7            push a
10292  460B 11            mov a, b
10293  460C 26 FF FF      mov b, $ffff
10294  460F 56            add b, a
10295  4610 E4            pop a
10296  4611             ; END TERMS
10297  4611 E7            pop d
10298  4612 5A            add d, b
10299  4613 E4            pop a
10300  4614 DA            push d
10301  4615 26 00 00      mov b, $0
10302  4618 E7            pop d
10303  4619 FD 3E         mov [d], bl
10304  461B F9            leave
10305  461C 09            ret
10306  461D             
10307  461D             damage_control:
10308  461D F8 00 00      enter 0 ; (push bp; mov bp, sp)
10309  4620             ; $repair_cost 
10310  4620 10 00 00      mov a, $0
10311  4623 45 FF FF      mov [bp + -1], a
10312  4626             ; $i 
10313  4626 52 04 00      sub sp, 4
10314  4629             ;; if (damage[6] < 0) 
10315  4629             _if160_cond:
10316  4629 3B F6 60      mov d, _damage_data ; $damage
10317  462C D7            push a
10318  462D DA            push d
10319  462E 26 06 00      mov b, $6
10320  4631 E7            pop d
10321  4632 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10322  4636 E4            pop a
10323  4637 2A            mov b, [d]
10324  4638             ; START RELATIONAL
10325  4638 D7            push a
10326  4639 11            mov a, b
10327  463A 26 00 00      mov b, $0
10328  463D B0            cmp a, b
10329  463E FD 73         slt ; < (signed)
10330  4640 E4            pop a
10331  4641             ; END RELATIONAL
10332  4641 C0 00 00      cmp b, 0
10333  4644 C6 56 46      je _if160_exit
10334  4647             _if160_true:
10335  4647             ;; puts("Damage Control report not available."); 
out/startrek.asm line 10336: Label not found: (__s114)
out/startrek.asm line 10336: Unused data in MS byte of argument. (2)
10336  4647 26 00 00      mov b, __s114 ; "Damage Control report not available."
10337  464A FD AB         swp b
10338  464C D8            push b
10339  464D 07 31 13      call puts
10340  4650 51 02 00      add sp, 2
10341  4653 0A 56 46      jmp _if160_exit
10342  4656             _if160_exit:
10343  4656             ;; if (docked) { 
10344  4656             _if161_cond:
10345  4656 3B 33 60      mov d, _docked ; $docked
10346  4659 32            mov bl, [d]
10347  465A A7 00         mov bh, 0
10348  465C C0 00 00      cmp b, 0
10349  465F C6 C6 47      je _if161_exit
10350  4662             _if161_true:
10351  4662             ;; repair_cost = 0; 
10352  4662 FA FF FF      lea d, [bp + -1] ; $repair_cost
10353  4665 DA            push d
10354  4666 26 00 00      mov b, $0
10355  4669 E7            pop d
10356  466A FD 43         mov [d], b
10357  466C             ;; for (i = 1; i <= 8; i++) 
10358  466C             _for162_init:
10359  466C FA FD FF      lea d, [bp + -3] ; $i
10360  466F DA            push d
10361  4670 26 01 00      mov b, $1
10362  4673 E7            pop d
10363  4674 FD 43         mov [d], b
10364  4676             _for162_cond:
10365  4676 FA FD FF      lea d, [bp + -3] ; $i
10366  4679 2A            mov b, [d]
10367  467A             ; START RELATIONAL
10368  467A D7            push a
10369  467B 11            mov a, b
10370  467C 26 08 00      mov b, $8
10371  467F B0            cmp a, b
10372  4680 FD 73         slt ; <= (signed)
10373  4682 E4            pop a
10374  4683             ; END RELATIONAL
10375  4683 C0 00 00      cmp b, 0
10376  4686 C6 CD 46      je _for162_exit
10377  4689             _for162_block:
10378  4689             ;; if (damage[i] < 0) 
10379  4689             _if163_cond:
10380  4689 3B F6 60      mov d, _damage_data ; $damage
10381  468C D7            push a
10382  468D DA            push d
10383  468E FA FD FF      lea d, [bp + -3] ; $i
10384  4691 2A            mov b, [d]
10385  4692 E7            pop d
10386  4693 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10387  4697 E4            pop a
10388  4698 2A            mov b, [d]
10389  4699             ; START RELATIONAL
10390  4699 D7            push a
10391  469A 11            mov a, b
10392  469B 26 00 00      mov b, $0
10393  469E B0            cmp a, b
10394  469F FD 73         slt ; < (signed)
10395  46A1 E4            pop a
10396  46A2             ; END RELATIONAL
10397  46A2 C0 00 00      cmp b, 0
10398  46A5 C6 BD 46      je _if163_exit
10399  46A8             _if163_true:
10400  46A8             ;; repair_cost = repair_cost + 10; 
10401  46A8 FA FF FF      lea d, [bp + -1] ; $repair_cost
10402  46AB DA            push d
10403  46AC FA FF FF      lea d, [bp + -1] ; $repair_cost
10404  46AF 2A            mov b, [d]
10405  46B0             ; START TERMS
10406  46B0 D7            push a
10407  46B1 11            mov a, b
10408  46B2 26 0A 00      mov b, $a
10409  46B5 56            add b, a
10410  46B6 E4            pop a
10411  46B7             ; END TERMS
10412  46B7 E7            pop d
10413  46B8 FD 43         mov [d], b
10414  46BA 0A BD 46      jmp _if163_exit
10415  46BD             _if163_exit:
10416  46BD             _for162_update:
10417  46BD FA FD FF      lea d, [bp + -3] ; $i
10418  46C0 2A            mov b, [d]
10419  46C1 D8            push b
10420  46C2 FD 77         inc b
10421  46C4 FA FD FF      lea d, [bp + -3] ; $i
10422  46C7 FD 43         mov [d], b
10423  46C9 E5            pop b
10424  46CA 0A 76 46      jmp _for162_cond
10425  46CD             _for162_exit:
10426  46CD             ;; if (repair_cost) { 
10427  46CD             _if164_cond:
10428  46CD FA FF FF      lea d, [bp + -1] ; $repair_cost
10429  46D0 2A            mov b, [d]
10430  46D1 C0 00 00      cmp b, 0
10431  46D4 C6 C3 47      je _if164_exit
10432  46D7             _if164_true:
10433  46D7             ;; repair_cost = repair_cost + d4; 
10434  46D7 FA FF FF      lea d, [bp + -1] ; $repair_cost
10435  46DA DA            push d
10436  46DB FA FF FF      lea d, [bp + -1] ; $repair_cost
10437  46DE 2A            mov b, [d]
10438  46DF             ; START TERMS
10439  46DF D7            push a
10440  46E0 11            mov a, b
10441  46E1 3B 08 61      mov d, _d4 ; $d4
10442  46E4 2A            mov b, [d]
10443  46E5 56            add b, a
10444  46E6 E4            pop a
10445  46E7             ; END TERMS
10446  46E7 E7            pop d
10447  46E8 FD 43         mov [d], b
10448  46EA             ;; if (repair_cost >= 100) 
10449  46EA             _if165_cond:
10450  46EA FA FF FF      lea d, [bp + -1] ; $repair_cost
10451  46ED 2A            mov b, [d]
10452  46EE             ; START RELATIONAL
10453  46EE D7            push a
10454  46EF 11            mov a, b
10455  46F0 26 64 00      mov b, $64
10456  46F3 B0            cmp a, b
10457  46F4 FD 80         sge ; >=
10458  46F6 E4            pop a
10459  46F7             ; END RELATIONAL
10460  46F7 C0 00 00      cmp b, 0
10461  46FA C6 0A 47      je _if165_exit
10462  46FD             _if165_true:
10463  46FD             ;; repair_cost = 90;	/* 0.9 */ 
10464  46FD FA FF FF      lea d, [bp + -1] ; $repair_cost
10465  4700 DA            push d
10466  4701 26 5A 00      mov b, $5a
10467  4704 E7            pop d
10468  4705 FD 43         mov [d], b
10469  4707 0A 0A 47      jmp _if165_exit
10470  470A             _if165_exit:
10471  470A             ;; printf("\nTechnicians standing by to effect repairs to your ship;\nEstimated time to repair: %s stardates.\n Will you authorize the repair order (y/N)? ", print100(repair_cost)); 
10472  470A FA FF FF      lea d, [bp + -1] ; $repair_cost
10473  470D 2A            mov b, [d]
10474  470E FD AB         swp b
10475  4710 D8            push b
10476  4711 07 FC 1F      call print100
10477  4714 51 02 00      add sp, 2
10478  4717 FD AB         swp b
10479  4719 D8            push b
out/startrek.asm line 10480: Label not found: (__s115)
out/startrek.asm line 10480: Unused data in MS byte of argument. (2)
10480  471A 26 00 00      mov b, __s115 ; "\nTechnicians standing by to effect repairs to your ship;\nEstimated time to repair: %s stardates.\n Will you authorize the repair order (y/N)? "
10481  471D FD AB         swp b
10482  471F D8            push b
10483  4720 07 D1 05      call printf
10484  4723 51 04 00      add sp, 4
10485  4726             ;; if (yesno()) { 
10486  4726             _if166_cond:
10487  4726 07 00 1E      call yesno
10488  4729 C0 00 00      cmp b, 0
10489  472C C6 BE 47      je _if166_exit
10490  472F             _if166_true:
10491  472F             ;; for (i = 1; i <= 8; i++) 
10492  472F             _for167_init:
10493  472F FA FD FF      lea d, [bp + -3] ; $i
10494  4732 DA            push d
10495  4733 26 01 00      mov b, $1
10496  4736 E7            pop d
10497  4737 FD 43         mov [d], b
10498  4739             _for167_cond:
10499  4739 FA FD FF      lea d, [bp + -3] ; $i
10500  473C 2A            mov b, [d]
10501  473D             ; START RELATIONAL
10502  473D D7            push a
10503  473E 11            mov a, b
10504  473F 26 08 00      mov b, $8
10505  4742 B0            cmp a, b
10506  4743 FD 73         slt ; <= (signed)
10507  4745 E4            pop a
10508  4746             ; END RELATIONAL
10509  4746 C0 00 00      cmp b, 0
10510  4749 C6 94 47      je _for167_exit
10511  474C             _for167_block:
10512  474C             ;; if (damage[i] < 0) 
10513  474C             _if168_cond:
10514  474C 3B F6 60      mov d, _damage_data ; $damage
10515  474F D7            push a
10516  4750 DA            push d
10517  4751 FA FD FF      lea d, [bp + -3] ; $i
10518  4754 2A            mov b, [d]
10519  4755 E7            pop d
10520  4756 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10521  475A E4            pop a
10522  475B 2A            mov b, [d]
10523  475C             ; START RELATIONAL
10524  475C D7            push a
10525  475D 11            mov a, b
10526  475E 26 00 00      mov b, $0
10527  4761 B0            cmp a, b
10528  4762 FD 73         slt ; < (signed)
10529  4764 E4            pop a
10530  4765             ; END RELATIONAL
10531  4765 C0 00 00      cmp b, 0
10532  4768 C6 84 47      je _if168_exit
10533  476B             _if168_true:
10534  476B             ;; damage[i] = 0; 
10535  476B 3B F6 60      mov d, _damage_data ; $damage
10536  476E D7            push a
10537  476F DA            push d
10538  4770 FA FD FF      lea d, [bp + -3] ; $i
10539  4773 2A            mov b, [d]
10540  4774 E7            pop d
10541  4775 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10542  4779 E4            pop a
10543  477A DA            push d
10544  477B 26 00 00      mov b, $0
10545  477E E7            pop d
10546  477F FD 43         mov [d], b
10547  4781 0A 84 47      jmp _if168_exit
10548  4784             _if168_exit:
10549  4784             _for167_update:
10550  4784 FA FD FF      lea d, [bp + -3] ; $i
10551  4787 2A            mov b, [d]
10552  4788 D8            push b
10553  4789 FD 77         inc b
10554  478B FA FD FF      lea d, [bp + -3] ; $i
10555  478E FD 43         mov [d], b
10556  4790 E5            pop b
10557  4791 0A 39 47      jmp _for167_cond
10558  4794             _for167_exit:
10559  4794             ;; stardate = stardate + (repair_cost + 5)/10 + 1; 
10560  4794 3B 0E 61      mov d, _stardate ; $stardate
10561  4797 DA            push d
10562  4798 3B 0E 61      mov d, _stardate ; $stardate
10563  479B 2A            mov b, [d]
10564  479C             ; START TERMS
10565  479C D7            push a
10566  479D 11            mov a, b
10567  479E FA FF FF      lea d, [bp + -1] ; $repair_cost
10568  47A1 2A            mov b, [d]
10569  47A2             ; START TERMS
10570  47A2 D7            push a
10571  47A3 11            mov a, b
10572  47A4 26 05 00      mov b, $5
10573  47A7 56            add b, a
10574  47A8 E4            pop a
10575  47A9             ; END TERMS
10576  47A9             ; START FACTORS
10577  47A9 D7            push a
10578  47AA 11            mov a, b
10579  47AB 26 0A 00      mov b, $a
10580  47AE AE            div a, b
10581  47AF 27            mov b, a
10582  47B0 E4            pop a
10583  47B1             ; END FACTORS
10584  47B1 56            add b, a
10585  47B2 11            mov a, b
10586  47B3 26 01 00      mov b, $1
10587  47B6 56            add b, a
10588  47B7 E4            pop a
10589  47B8             ; END TERMS
10590  47B8 E7            pop d
10591  47B9 FD 43         mov [d], b
10592  47BB 0A BE 47      jmp _if166_exit
10593  47BE             _if166_exit:
10594  47BE             ;; return; 
10595  47BE F9            leave
10596  47BF 09            ret
10597  47C0 0A C3 47      jmp _if164_exit
10598  47C3             _if164_exit:
10599  47C3 0A C6 47      jmp _if161_exit
10600  47C6             _if161_exit:
10601  47C6             ;; if (damage[6] < 0) 
10602  47C6             _if169_cond:
10603  47C6 3B F6 60      mov d, _damage_data ; $damage
10604  47C9 D7            push a
10605  47CA DA            push d
10606  47CB 26 06 00      mov b, $6
10607  47CE E7            pop d
10608  47CF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10609  47D3 E4            pop a
10610  47D4 2A            mov b, [d]
10611  47D5             ; START RELATIONAL
10612  47D5 D7            push a
10613  47D6 11            mov a, b
10614  47D7 26 00 00      mov b, $0
10615  47DA B0            cmp a, b
10616  47DB FD 73         slt ; < (signed)
10617  47DD E4            pop a
10618  47DE             ; END RELATIONAL
10619  47DE C0 00 00      cmp b, 0
10620  47E1 C6 E9 47      je _if169_exit
10621  47E4             _if169_true:
10622  47E4             ;; return; 
10623  47E4 F9            leave
10624  47E5 09            ret
10625  47E6 0A E9 47      jmp _if169_exit
10626  47E9             _if169_exit:
10627  47E9             ;; puts("Device            State of Repair"); 
out/startrek.asm line 10628: Label not found: (__s116)
out/startrek.asm line 10628: Unused data in MS byte of argument. (2)
10628  47E9 26 00 00      mov b, __s116 ; "Device            State of Repair"
10629  47EC FD AB         swp b
10630  47EE D8            push b
10631  47EF 07 31 13      call puts
10632  47F2 51 02 00      add sp, 2
10633  47F5             ;; for (i = 1; i <= 8; i++) 
10634  47F5             _for170_init:
10635  47F5 FA FD FF      lea d, [bp + -3] ; $i
10636  47F8 DA            push d
10637  47F9 26 01 00      mov b, $1
10638  47FC E7            pop d
10639  47FD FD 43         mov [d], b
10640  47FF             _for170_cond:
10641  47FF FA FD FF      lea d, [bp + -3] ; $i
10642  4802 2A            mov b, [d]
10643  4803             ; START RELATIONAL
10644  4803 D7            push a
10645  4804 11            mov a, b
10646  4805 26 08 00      mov b, $8
10647  4808 B0            cmp a, b
10648  4809 FD 73         slt ; <= (signed)
10649  480B E4            pop a
10650  480C             ; END RELATIONAL
10651  480C C0 00 00      cmp b, 0
10652  480F C6 5A 48      je _for170_exit
10653  4812             _for170_block:
10654  4812             ;; printf("%-25s%6s\n", get_device_name(i), print100(damage[i])); 
10655  4812 3B F6 60      mov d, _damage_data ; $damage
10656  4815 D7            push a
10657  4816 DA            push d
10658  4817 FA FD FF      lea d, [bp + -3] ; $i
10659  481A 2A            mov b, [d]
10660  481B E7            pop d
10661  481C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10662  4820 E4            pop a
10663  4821 2A            mov b, [d]
10664  4822 FD AB         swp b
10665  4824 D8            push b
10666  4825 07 FC 1F      call print100
10667  4828 51 02 00      add sp, 2
10668  482B FD AB         swp b
10669  482D D8            push b
10670  482E FA FD FF      lea d, [bp + -3] ; $i
10671  4831 2A            mov b, [d]
10672  4832 FD AB         swp b
10673  4834 D8            push b
10674  4835 07 B9 5C      call get_device_name
10675  4838 51 02 00      add sp, 2
10676  483B FD AB         swp b
10677  483D D8            push b
out/startrek.asm line 10678: Label not found: (__s117)
out/startrek.asm line 10678: Unused data in MS byte of argument. (2)
10678  483E 26 00 00      mov b, __s117 ; "%-25s%6s\n"
10679  4841 FD AB         swp b
10680  4843 D8            push b
10681  4844 07 D1 05      call printf
10682  4847 51 06 00      add sp, 6
10683  484A             _for170_update:
10684  484A FA FD FF      lea d, [bp + -3] ; $i
10685  484D 2A            mov b, [d]
10686  484E D8            push b
10687  484F FD 77         inc b
10688  4851 FA FD FF      lea d, [bp + -3] ; $i
10689  4854 FD 43         mov [d], b
10690  4856 E5            pop b
10691  4857 0A FF 47      jmp _for170_cond
10692  485A             _for170_exit:
10693  485A             ;; printf("\n"); 
out/startrek.asm line 10694: Label not found: (__s118)
out/startrek.asm line 10694: Unused data in MS byte of argument. (2)
10694  485A 26 00 00      mov b, __s118 ; "\n"
10695  485D FD AB         swp b
10696  485F D8            push b
10697  4860 07 D1 05      call printf
10698  4863 51 02 00      add sp, 2
10699  4866 F9            leave
10700  4867 09            ret
10701  4868             
10702  4868             shield_control:
10703  4868 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10704  486B             ; $i 
10705  486B 52 02 00      sub sp, 2
10706  486E             ;; if (inoperable(7)) 
10707  486E             _if171_cond:
10708  486E 26 07 00      mov b, $7
10709  4871 DD            push bl
10710  4872 07 4B 20      call inoperable
10711  4875 51 01 00      add sp, 1
10712  4878 C0 00 00      cmp b, 0
10713  487B C6 83 48      je _if171_exit
10714  487E             _if171_true:
10715  487E             ;; return; 
10716  487E F9            leave
10717  487F 09            ret
10718  4880 0A 83 48      jmp _if171_exit
10719  4883             _if171_exit:
10720  4883             ;; printf("Energy available = %d\n\n Input number of units to shields: ", energy + shield); 
10721  4883 3B 34 60      mov d, _energy ; $energy
10722  4886 2A            mov b, [d]
10723  4887             ; START TERMS
10724  4887 D7            push a
10725  4888 11            mov a, b
10726  4889 3B EF 60      mov d, _shield ; $shield
10727  488C 2A            mov b, [d]
10728  488D 56            add b, a
10729  488E E4            pop a
10730  488F             ; END TERMS
10731  488F FD AB         swp b
10732  4891 D8            push b
out/startrek.asm line 10733: Label not found: (__s119)
out/startrek.asm line 10733: Unused data in MS byte of argument. (2)
10733  4892 26 00 00      mov b, __s119 ; "Energy available = %d\n\n Input number of units to shields: "
10734  4895 FD AB         swp b
10735  4897 D8            push b
10736  4898 07 D1 05      call printf
10737  489B 51 04 00      add sp, 4
10738  489E             ;; i = input_int(); 
10739  489E FA FF FF      lea d, [bp + -1] ; $i
10740  48A1 DA            push d
10741  48A2 07 B4 1F      call input_int
10742  48A5 E7            pop d
10743  48A6 FD 43         mov [d], b
10744  48A8             ;; if (i < 0 || shield == i) { 
10745  48A8             _if172_cond:
10746  48A8 FA FF FF      lea d, [bp + -1] ; $i
10747  48AB 2A            mov b, [d]
10748  48AC             ; START RELATIONAL
10749  48AC D7            push a
10750  48AD 11            mov a, b
10751  48AE 26 00 00      mov b, $0
10752  48B1 B0            cmp a, b
10753  48B2 FD 73         slt ; < (signed)
10754  48B4 E4            pop a
10755  48B5             ; END RELATIONAL
10756  48B5 D7            push a
10757  48B6 11            mov a, b
10758  48B7 3B EF 60      mov d, _shield ; $shield
10759  48BA 2A            mov b, [d]
10760  48BB             ; START RELATIONAL
10761  48BB D7            push a
10762  48BC 11            mov a, b
10763  48BD FA FF FF      lea d, [bp + -1] ; $i
10764  48C0 2A            mov b, [d]
10765  48C1 B0            cmp a, b
10766  48C2 FD 71         seq ; ==
10767  48C4 E4            pop a
10768  48C5             ; END RELATIONAL
10769  48C5 FD A8         sor a, b ; ||
10770  48C7 E4            pop a
10771  48C8 C0 00 00      cmp b, 0
10772  48CB C6 DF 48      je _if172_exit
10773  48CE             _if172_true:
10774  48CE             ;; puts("<Shields Unchanged>\n"); 
out/startrek.asm line 10775: Label not found: (__s120)
out/startrek.asm line 10775: Unused data in MS byte of argument. (2)
10775  48CE 26 00 00      mov b, __s120 ; "<Shields Unchanged>\n"
10776  48D1 FD AB         swp b
10777  48D3 D8            push b
10778  48D4 07 31 13      call puts
10779  48D7 51 02 00      add sp, 2
10780  48DA             ;; return; 
10781  48DA F9            leave
10782  48DB 09            ret
10783  48DC 0A DF 48      jmp _if172_exit
10784  48DF             _if172_exit:
10785  48DF             ;; if (i >= energy + shield) { 
10786  48DF             _if173_cond:
10787  48DF FA FF FF      lea d, [bp + -1] ; $i
10788  48E2 2A            mov b, [d]
10789  48E3             ; START RELATIONAL
10790  48E3 D7            push a
10791  48E4 11            mov a, b
10792  48E5 3B 34 60      mov d, _energy ; $energy
10793  48E8 2A            mov b, [d]
10794  48E9             ; START TERMS
10795  48E9 D7            push a
10796  48EA 11            mov a, b
10797  48EB 3B EF 60      mov d, _shield ; $shield
10798  48EE 2A            mov b, [d]
10799  48EF 56            add b, a
10800  48F0 E4            pop a
10801  48F1             ; END TERMS
10802  48F1 B0            cmp a, b
10803  48F2 FD 80         sge ; >=
10804  48F4 E4            pop a
10805  48F5             ; END RELATIONAL
10806  48F5 C0 00 00      cmp b, 0
10807  48F8 C6 0A 49      je _if173_exit
10808  48FB             _if173_true:
10809  48FB             ;; puts("Shield Control Reports:\n  This is not the Federation Treasury."); 
out/startrek.asm line 10810: Label not found: (__s121)
out/startrek.asm line 10810: Unused data in MS byte of argument. (2)
10810  48FB 26 00 00      mov b, __s121 ; "Shield Control Reports:\n  This is not the Federation Treasury."
10811  48FE FD AB         swp b
10812  4900 D8            push b
10813  4901 07 31 13      call puts
10814  4904 51 02 00      add sp, 2
10815  4907 0A 0A 49      jmp _if173_exit
10816  490A             _if173_exit:
10817  490A             ;; energy = energy + shield - i; 
10818  490A 3B 34 60      mov d, _energy ; $energy
10819  490D DA            push d
10820  490E 3B 34 60      mov d, _energy ; $energy
10821  4911 2A            mov b, [d]
10822  4912             ; START TERMS
10823  4912 D7            push a
10824  4913 11            mov a, b
10825  4914 3B EF 60      mov d, _shield ; $shield
10826  4917 2A            mov b, [d]
10827  4918 56            add b, a
10828  4919 11            mov a, b
10829  491A FA FF FF      lea d, [bp + -1] ; $i
10830  491D 2A            mov b, [d]
10831  491E 60            sub a, b
10832  491F 27            mov b, a
10833  4920 E4            pop a
10834  4921             ; END TERMS
10835  4921 E7            pop d
10836  4922 FD 43         mov [d], b
10837  4924             ;; shield = i; 
10838  4924 3B EF 60      mov d, _shield ; $shield
10839  4927 DA            push d
10840  4928 FA FF FF      lea d, [bp + -1] ; $i
10841  492B 2A            mov b, [d]
10842  492C E7            pop d
10843  492D FD 43         mov [d], b
10844  492F             ;; printf("Deflector Control Room report:\n  Shields now at %d units per your command.\n\n", shield); 
10845  492F 3B EF 60      mov d, _shield ; $shield
10846  4932 2A            mov b, [d]
10847  4933 FD AB         swp b
10848  4935 D8            push b
out/startrek.asm line 10849: Label not found: (__s122)
out/startrek.asm line 10849: Unused data in MS byte of argument. (2)
10849  4936 26 00 00      mov b, __s122 ; "Deflector Control Room report:\n  Shields now at %d units per your command.\n\n"
10850  4939 FD AB         swp b
10851  493B D8            push b
10852  493C 07 D1 05      call printf
10853  493F 51 04 00      add sp, 4
10854  4942 F9            leave
10855  4943 09            ret
10856  4944             
10857  4944             library_computer:
10858  4944 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10859  4947             ;; if (inoperable(8)) 
10860  4947             _if174_cond:
10861  4947 26 08 00      mov b, $8
10862  494A DD            push bl
10863  494B 07 4B 20      call inoperable
10864  494E 51 01 00      add sp, 1
10865  4951 C0 00 00      cmp b, 0
10866  4954 C6 5C 49      je _if174_exit
10867  4957             _if174_true:
10868  4957             ;; return; 
10869  4957 F9            leave
10870  4958 09            ret
10871  4959 0A 5C 49      jmp _if174_exit
10872  495C             _if174_exit:
10873  495C             ;; puts("Computer active and awating command: "); 
out/startrek.asm line 10874: Label not found: (__s123)
out/startrek.asm line 10874: Unused data in MS byte of argument. (2)
10874  495C 26 00 00      mov b, __s123 ; "Computer active and awating command: "
10875  495F FD AB         swp b
10876  4961 D8            push b
10877  4962 07 31 13      call puts
10878  4965 51 02 00      add sp, 2
10879  4968             ;; switch(input_int()) { 
10880  4968             _switch175_expr:
10881  4968 07 B4 1F      call input_int
10882  496B             _switch175_comparisons:
10883  496B C0 FF FF      cmp b, -1
10884  496E C6 9B 49      je _switch175_case0
10885  4971 C0 00 00      cmp b, 0
10886  4974 C6 9E 49      je _switch175_case1
10887  4977 C0 01 00      cmp b, 1
10888  497A C6 A4 49      je _switch175_case2
10889  497D C0 02 00      cmp b, 2
10890  4980 C6 AA 49      je _switch175_case3
10891  4983 C0 03 00      cmp b, 3
10892  4986 C6 B0 49      je _switch175_case4
10893  4989 C0 04 00      cmp b, 4
10894  498C C6 B6 49      je _switch175_case5
10895  498F C0 05 00      cmp b, 5
10896  4992 C6 BC 49      je _switch175_case6
10897  4995 0A C2 49      jmp _switch175_default
10898  4998 0A 16 4A      jmp _switch175_exit
10899  499B             _switch175_case0:
10900  499B             ;; break; 
10901  499B 0A 16 4A      jmp _switch175_exit ; case break
10902  499E             _switch175_case1:
10903  499E             ;; galactic_record(); 
10904  499E 07 18 4A      call galactic_record
10905  49A1             ;; break; 
10906  49A1 0A 16 4A      jmp _switch175_exit ; case break
10907  49A4             _switch175_case2:
10908  49A4             ;; status_report(); 
10909  49A4 07 3D 4B      call status_report
10910  49A7             ;; break; 
10911  49A7 0A 16 4A      jmp _switch175_exit ; case break
10912  49AA             _switch175_case3:
10913  49AA             ;; torpedo_data(); 
10914  49AA 07 53 4C      call torpedo_data
10915  49AD             ;; break; 
10916  49AD 0A 16 4A      jmp _switch175_exit ; case break
10917  49B0             _switch175_case4:
10918  49B0             ;; nav_data(); 
10919  49B0 07 57 4D      call nav_data
10920  49B3             ;; break; 
10921  49B3 0A 16 4A      jmp _switch175_exit ; case break
10922  49B6             _switch175_case5:
10923  49B6             ;; dirdist_calc(); 
10924  49B6 07 BA 4D      call dirdist_calc
10925  49B9             ;; break; 
10926  49B9 0A 16 4A      jmp _switch175_exit ; case break
10927  49BC             _switch175_case6:
10928  49BC             ;; galaxy_map(); 
10929  49BC 07 36 4F      call galaxy_map
10930  49BF             ;; break; 
10931  49BF 0A 16 4A      jmp _switch175_exit ; case break
10932  49C2             _switch175_default:
10933  49C2             ;; puts("Functions available from Library-Computer:\n\n"); 
out/startrek.asm line 10934: Label not found: (__s124)
out/startrek.asm line 10934: Unused data in MS byte of argument. (2)
10934  49C2 26 00 00      mov b, __s124 ; "Functions available from Library-Computer:\n\n"
10935  49C5 FD AB         swp b
10936  49C7 D8            push b
10937  49C8 07 31 13      call puts
10938  49CB 51 02 00      add sp, 2
10939  49CE             ;; puts("   0 = Cumulative Galactic Record\n"); 
out/startrek.asm line 10940: Label not found: (__s125)
out/startrek.asm line 10940: Unused data in MS byte of argument. (2)
10940  49CE 26 00 00      mov b, __s125 ; "   0 = Cumulative Galactic Record\n"
10941  49D1 FD AB         swp b
10942  49D3 D8            push b
10943  49D4 07 31 13      call puts
10944  49D7 51 02 00      add sp, 2
10945  49DA             ;; puts("   1 = Status Report\n"); 
out/startrek.asm line 10946: Label not found: (__s126)
out/startrek.asm line 10946: Unused data in MS byte of argument. (2)
10946  49DA 26 00 00      mov b, __s126 ; "   1 = Status Report\n"
10947  49DD FD AB         swp b
10948  49DF D8            push b
10949  49E0 07 31 13      call puts
10950  49E3 51 02 00      add sp, 2
10951  49E6             ;; puts("   2 = Photon Torpedo Data\n"); 
out/startrek.asm line 10952: Label not found: (__s127)
out/startrek.asm line 10952: Unused data in MS byte of argument. (2)
10952  49E6 26 00 00      mov b, __s127 ; "   2 = Photon Torpedo Data\n"
10953  49E9 FD AB         swp b
10954  49EB D8            push b
10955  49EC 07 31 13      call puts
10956  49EF 51 02 00      add sp, 2
10957  49F2             ;; puts("   3 = Starbase Nav Data\n"); 
out/startrek.asm line 10958: Label not found: (__s128)
out/startrek.asm line 10958: Unused data in MS byte of argument. (2)
10958  49F2 26 00 00      mov b, __s128 ; "   3 = Starbase Nav Data\n"
10959  49F5 FD AB         swp b
10960  49F7 D8            push b
10961  49F8 07 31 13      call puts
10962  49FB 51 02 00      add sp, 2
10963  49FE             ;; puts("   4 = Direction/Distance Calculator\n"); 
out/startrek.asm line 10964: Label not found: (__s129)
out/startrek.asm line 10964: Unused data in MS byte of argument. (2)
10964  49FE 26 00 00      mov b, __s129 ; "   4 = Direction/Distance Calculator\n"
10965  4A01 FD AB         swp b
10966  4A03 D8            push b
10967  4A04 07 31 13      call puts
10968  4A07 51 02 00      add sp, 2
10969  4A0A             ;; puts("   5 = Galaxy Region Name Map\n"); 
out/startrek.asm line 10970: Label not found: (__s130)
out/startrek.asm line 10970: Unused data in MS byte of argument. (2)
10970  4A0A 26 00 00      mov b, __s130 ; "   5 = Galaxy Region Name Map\n"
10971  4A0D FD AB         swp b
10972  4A0F D8            push b
10973  4A10 07 31 13      call puts
10974  4A13 51 02 00      add sp, 2
10975  4A16             _switch175_exit:
10976  4A16 F9            leave
10977  4A17 09            ret
10978  4A18             
10979  4A18             galactic_record:
10980  4A18 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10981  4A1B             ; $i 
10982  4A1B             ; $j 
10983  4A1B 52 04 00      sub sp, 4
10984  4A1E             ;; printf("\n     Computer Record of Galaxy for Quadrant %d,%d\n\n", quad_y, quad_x); 
10985  4A1E 3B ED 60      mov d, _quad_x ; $quad_x
10986  4A21 2A            mov b, [d]
10987  4A22 FD AB         swp b
10988  4A24 D8            push b
10989  4A25 3B EB 60      mov d, _quad_y ; $quad_y
10990  4A28 2A            mov b, [d]
10991  4A29 FD AB         swp b
10992  4A2B D8            push b
out/startrek.asm line 10993: Label not found: (__s131)
out/startrek.asm line 10993: Unused data in MS byte of argument. (2)
10993  4A2C 26 00 00      mov b, __s131 ; "\n     Computer Record of Galaxy for Quadrant %d,%d\n\n"
10994  4A2F FD AB         swp b
10995  4A31 D8            push b
10996  4A32 07 D1 05      call printf
10997  4A35 51 06 00      add sp, 6
10998  4A38             ;; puts("     1     2     3     4     5     6     7     8"); 
out/startrek.asm line 10999: Label not found: (__s132)
out/startrek.asm line 10999: Unused data in MS byte of argument. (2)
10999  4A38 26 00 00      mov b, __s132 ; "     1     2     3     4     5     6     7     8"
11000  4A3B FD AB         swp b
11001  4A3D D8            push b
11002  4A3E 07 31 13      call puts
11003  4A41 51 02 00      add sp, 2
11004  4A44             ;; for (i = 1; i <= 8; i++) { 
11005  4A44             _for176_init:
11006  4A44 FA FF FF      lea d, [bp + -1] ; $i
11007  4A47 DA            push d
11008  4A48 26 01 00      mov b, $1
11009  4A4B E7            pop d
11010  4A4C FD 43         mov [d], b
11011  4A4E             _for176_cond:
11012  4A4E FA FF FF      lea d, [bp + -1] ; $i
11013  4A51 2A            mov b, [d]
11014  4A52             ; START RELATIONAL
11015  4A52 D7            push a
11016  4A53 11            mov a, b
11017  4A54 26 08 00      mov b, $8
11018  4A57 B0            cmp a, b
11019  4A58 FD 73         slt ; <= (signed)
11020  4A5A E4            pop a
11021  4A5B             ; END RELATIONAL
11022  4A5B C0 00 00      cmp b, 0
11023  4A5E C6 28 4B      je _for176_exit
11024  4A61             _for176_block:
11025  4A61             ;; printf("%s%d", gr_1, i); 
11026  4A61 FA FF FF      lea d, [bp + -1] ; $i
11027  4A64 2A            mov b, [d]
11028  4A65 FD AB         swp b
11029  4A67 D8            push b
11030  4A68 3B 8B 62      mov d, _gr_1 ; $gr_1
11031  4A6B 2A            mov b, [d]
11032  4A6C FD AB         swp b
11033  4A6E D8            push b
out/startrek.asm line 11034: Label not found: (__s133)
out/startrek.asm line 11034: Unused data in MS byte of argument. (2)
11034  4A6F 26 00 00      mov b, __s133 ; "%s%d"
11035  4A72 FD AB         swp b
11036  4A74 D8            push b
11037  4A75 07 D1 05      call printf
11038  4A78 51 06 00      add sp, 6
11039  4A7B             ;; for (j = 1; j <= 8; j++) { 
11040  4A7B             _for177_init:
11041  4A7B FA FD FF      lea d, [bp + -3] ; $j
11042  4A7E DA            push d
11043  4A7F 26 01 00      mov b, $1
11044  4A82 E7            pop d
11045  4A83 FD 43         mov [d], b
11046  4A85             _for177_cond:
11047  4A85 FA FD FF      lea d, [bp + -3] ; $j
11048  4A88 2A            mov b, [d]
11049  4A89             ; START RELATIONAL
11050  4A89 D7            push a
11051  4A8A 11            mov a, b
11052  4A8B 26 08 00      mov b, $8
11053  4A8E B0            cmp a, b
11054  4A8F FD 73         slt ; <= (signed)
11055  4A91 E4            pop a
11056  4A92             ; END RELATIONAL
11057  4A92 C0 00 00      cmp b, 0
11058  4A95 C6 0E 4B      je _for177_exit
11059  4A98             _for177_block:
11060  4A98             ;; printf("   "); 
11061  4A98 26 FD 63      mov b, __s24 ; "   "
11062  4A9B FD AB         swp b
11063  4A9D D8            push b
11064  4A9E 07 D1 05      call printf
11065  4AA1 51 02 00      add sp, 2
11066  4AA4             ;; if (map[i][j] &   0x1000		/* Set if this sector was mapped */          ) 
11067  4AA4             _if178_cond:
11068  4AA4 3B 38 60      mov d, _map_data ; $map
11069  4AA7 D7            push a
11070  4AA8 DA            push d
11071  4AA9 FA FF FF      lea d, [bp + -1] ; $i
11072  4AAC 2A            mov b, [d]
11073  4AAD E7            pop d
11074  4AAE FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
11075  4AB2 DA            push d
11076  4AB3 FA FD FF      lea d, [bp + -3] ; $j
11077  4AB6 2A            mov b, [d]
11078  4AB7 E7            pop d
11079  4AB8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
11080  4ABC E4            pop a
11081  4ABD 2A            mov b, [d]
11082  4ABE D7            push a
11083  4ABF 11            mov a, b
11084  4AC0 26 00 10      mov b, $1000
11085  4AC3 FD 92         and b, a ; &
11086  4AC5 E4            pop a
11087  4AC6 C0 00 00      cmp b, 0
11088  4AC9 C6 F2 4A      je _if178_else
11089  4ACC             _if178_true:
11090  4ACC             ;; putbcd(map[i][j]); 
11091  4ACC 3B 38 60      mov d, _map_data ; $map
11092  4ACF D7            push a
11093  4AD0 DA            push d
11094  4AD1 FA FF FF      lea d, [bp + -1] ; $i
11095  4AD4 2A            mov b, [d]
11096  4AD5 E7            pop d
11097  4AD6 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
11098  4ADA DA            push d
11099  4ADB FA FD FF      lea d, [bp + -3] ; $j
11100  4ADE 2A            mov b, [d]
11101  4ADF E7            pop d
11102  4AE0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
11103  4AE4 E4            pop a
11104  4AE5 2A            mov b, [d]
11105  4AE6 FD AB         swp b
11106  4AE8 D8            push b
11107  4AE9 07 E7 38      call putbcd
11108  4AEC 51 02 00      add sp, 2
11109  4AEF 0A FE 4A      jmp _if178_exit
11110  4AF2             _if178_else:
11111  4AF2             ;; printf("***"); 
out/startrek.asm line 11112: Label not found: (__s91)
out/startrek.asm line 11112: Unused data in MS byte of argument. (2)
11112  4AF2 26 00 00      mov b, __s91 ; "***"
11113  4AF5 FD AB         swp b
11114  4AF7 D8            push b
11115  4AF8 07 D1 05      call printf
11116  4AFB 51 02 00      add sp, 2
11117  4AFE             _if178_exit:
11118  4AFE             _for177_update:
11119  4AFE FA FD FF      lea d, [bp + -3] ; $j
11120  4B01 2A            mov b, [d]
11121  4B02 D8            push b
11122  4B03 FD 77         inc b
11123  4B05 FA FD FF      lea d, [bp + -3] ; $j
11124  4B08 FD 43         mov [d], b
11125  4B0A E5            pop b
11126  4B0B 0A 85 4A      jmp _for177_cond
11127  4B0E             _for177_exit:
11128  4B0E             ;; putchar('\n'); 
11129  4B0E 26 0A 00      mov b, $a
11130  4B11 DD            push bl
11131  4B12 07 FB 12      call putchar
11132  4B15 51 01 00      add sp, 1
11133  4B18             _for176_update:
11134  4B18 FA FF FF      lea d, [bp + -1] ; $i
11135  4B1B 2A            mov b, [d]
11136  4B1C D8            push b
11137  4B1D FD 77         inc b
11138  4B1F FA FF FF      lea d, [bp + -1] ; $i
11139  4B22 FD 43         mov [d], b
11140  4B24 E5            pop b
11141  4B25 0A 4E 4A      jmp _for176_cond
11142  4B28             _for176_exit:
11143  4B28             ;; printf("%s\n", gr_1); 
11144  4B28 3B 8B 62      mov d, _gr_1 ; $gr_1
11145  4B2B 2A            mov b, [d]
11146  4B2C FD AB         swp b
11147  4B2E D8            push b
out/startrek.asm line 11148: Label not found: (__s93)
out/startrek.asm line 11148: Unused data in MS byte of argument. (2)
11148  4B2F 26 00 00      mov b, __s93 ; "%s\n"
11149  4B32 FD AB         swp b
11150  4B34 D8            push b
11151  4B35 07 D1 05      call printf
11152  4B38 51 04 00      add sp, 4
11153  4B3B F9            leave
11154  4B3C 09            ret
11155  4B3D             
11156  4B3D             status_report:
11157  4B3D F8 00 00      enter 0 ; (push bp; mov bp, sp)
11158  4B40             ; $plural 
11159  4B40             ; $left 
11160  4B40 52 04 00      sub sp, 4
11161  4B43             ;; plural = str_s + 1; 
11162  4B43 FA FF FF      lea d, [bp + -1] ; $plural
11163  4B46 DA            push d
11164  4B47 3B 8F 62      mov d, _str_s ; $str_s
11165  4B4A 2A            mov b, [d]
11166  4B4B             ; START TERMS
11167  4B4B D7            push a
11168  4B4C 11            mov a, b
11169  4B4D 26 01 00      mov b, $1
11170  4B50 56            add b, a
11171  4B51 E4            pop a
11172  4B52             ; END TERMS
11173  4B52 E7            pop d
11174  4B53 FD 43         mov [d], b
11175  4B55             ;; left = TO_FIXED(time_start + time_up) - stardate; 
11176  4B55 FA FD FF      lea d, [bp + -3] ; $left
11177  4B58 DA            push d
11178  4B59 3B F2 60      mov d, _time_start ; $time_start
11179  4B5C 2A            mov b, [d]
11180  4B5D             ; START TERMS
11181  4B5D D7            push a
11182  4B5E 11            mov a, b
11183  4B5F 3B F4 60      mov d, _time_up ; $time_up
11184  4B62 2A            mov b, [d]
11185  4B63 56            add b, a
11186  4B64 E4            pop a
11187  4B65             ; END TERMS
11188  4B65 FD AB         swp b
11189  4B67 D8            push b
11190  4B68 07 D6 1C      call TO_FIXED
11191  4B6B 51 02 00      add sp, 2
11192  4B6E             ; START TERMS
11193  4B6E D7            push a
11194  4B6F 11            mov a, b
11195  4B70 3B 0E 61      mov d, _stardate ; $stardate
11196  4B73 2A            mov b, [d]
11197  4B74 60            sub a, b
11198  4B75 27            mov b, a
11199  4B76 E4            pop a
11200  4B77             ; END TERMS
11201  4B77 E7            pop d
11202  4B78 FD 43         mov [d], b
11203  4B7A             ;; puts("   Status Report:\n"); 
out/startrek.asm line 11204: Label not found: (__s134)
out/startrek.asm line 11204: Unused data in MS byte of argument. (2)
11204  4B7A 26 00 00      mov b, __s134 ; "   Status Report:\n"
11205  4B7D FD AB         swp b
11206  4B7F D8            push b
11207  4B80 07 31 13      call puts
11208  4B83 51 02 00      add sp, 2
11209  4B86             ;; if (klingons_left > 1) 
11210  4B86             _if179_cond:
11211  4B86 3B E8 60      mov d, _klingons_left ; $klingons_left
11212  4B89 32            mov bl, [d]
11213  4B8A A7 00         mov bh, 0
11214  4B8C             ; START RELATIONAL
11215  4B8C D7            push a
11216  4B8D 11            mov a, b
11217  4B8E 26 01 00      mov b, $1
11218  4B91 B0            cmp a, b
11219  4B92 FD 81         sgu ; > (unsigned)
11220  4B94 E4            pop a
11221  4B95             ; END RELATIONAL
11222  4B95 C0 00 00      cmp b, 0
11223  4B98 C6 A9 4B      je _if179_exit
11224  4B9B             _if179_true:
11225  4B9B             ;; plural = str_s; 
11226  4B9B FA FF FF      lea d, [bp + -1] ; $plural
11227  4B9E DA            push d
11228  4B9F 3B 8F 62      mov d, _str_s ; $str_s
11229  4BA2 2A            mov b, [d]
11230  4BA3 E7            pop d
11231  4BA4 FD 43         mov [d], b
11232  4BA6 0A A9 4B      jmp _if179_exit
11233  4BA9             _if179_exit:
11234  4BA9             ;; printf("Klingon%s Left: %d\n Mission must be completed in %d.%d stardates\n", 
11235  4BA9 FA FD FF      lea d, [bp + -3] ; $left
11236  4BAC 2A            mov b, [d]
11237  4BAD             ; START FACTORS
11238  4BAD D7            push a
11239  4BAE 11            mov a, b
11240  4BAF 26 0A 00      mov b, $a
11241  4BB2 AE            div a, b ; 
11242  4BB3 11            mov a, b
11243  4BB4 27            mov b, a
11244  4BB5 E4            pop a
11245  4BB6             ; END FACTORS
11246  4BB6 FD AB         swp b
11247  4BB8 D8            push b
11248  4BB9 FA FD FF      lea d, [bp + -3] ; $left
11249  4BBC 2A            mov b, [d]
11250  4BBD FD AB         swp b
11251  4BBF D8            push b
11252  4BC0 07 E8 1C      call FROM_FIXED
11253  4BC3 51 02 00      add sp, 2
11254  4BC6 FD AB         swp b
11255  4BC8 D8            push b
11256  4BC9 3B E8 60      mov d, _klingons_left ; $klingons_left
11257  4BCC 32            mov bl, [d]
11258  4BCD A7 00         mov bh, 0
11259  4BCF DD            push bl
11260  4BD0 FA FF FF      lea d, [bp + -1] ; $plural
11261  4BD3 2A            mov b, [d]
11262  4BD4 FD AB         swp b
11263  4BD6 D8            push b
out/startrek.asm line 11264: Label not found: (__s135)
out/startrek.asm line 11264: Unused data in MS byte of argument. (2)
11264  4BD7 26 00 00      mov b, __s135 ; "Klingon%s Left: %d\n Mission must be completed in %d.%d stardates\n"
11265  4BDA FD AB         swp b
11266  4BDC D8            push b
11267  4BDD 07 D1 05      call printf
11268  4BE0 51 09 00      add sp, 9
11269  4BE3             ;; if (starbases_left < 1) { 
11270  4BE3             _if180_cond:
11271  4BE3 3B 13 60      mov d, _starbases_left ; $starbases_left
11272  4BE6 32            mov bl, [d]
11273  4BE7 A7 00         mov bh, 0
11274  4BE9             ; START RELATIONAL
11275  4BE9 D7            push a
11276  4BEA 11            mov a, b
11277  4BEB 26 01 00      mov b, $1
11278  4BEE B0            cmp a, b
11279  4BEF FD 73         slt ; < (signed)
11280  4BF1 E4            pop a
11281  4BF2             ; END RELATIONAL
11282  4BF2 C0 00 00      cmp b, 0
11283  4BF5 C6 07 4C      je _if180_else
11284  4BF8             _if180_true:
11285  4BF8             ;; puts("Your stupidity has left you on your own in the galaxy\n -- you have no starbases left!\n"); 
out/startrek.asm line 11286: Label not found: (__s136)
out/startrek.asm line 11286: Unused data in MS byte of argument. (2)
11286  4BF8 26 00 00      mov b, __s136 ; "Your stupidity has left you on your own in the galaxy\n -- you have no starbases left!\n"
11287  4BFB FD AB         swp b
11288  4BFD D8            push b
11289  4BFE 07 31 13      call puts
11290  4C01 51 02 00      add sp, 2
11291  4C04 0A 51 4C      jmp _if180_exit
11292  4C07             _if180_else:
11293  4C07             ;; plural = str_s; 
11294  4C07 FA FF FF      lea d, [bp + -1] ; $plural
11295  4C0A DA            push d
11296  4C0B 3B 8F 62      mov d, _str_s ; $str_s
11297  4C0E 2A            mov b, [d]
11298  4C0F E7            pop d
11299  4C10 FD 43         mov [d], b
11300  4C12             ;; if (starbases_left < 2) 
11301  4C12             _if181_cond:
11302  4C12 3B 13 60      mov d, _starbases_left ; $starbases_left
11303  4C15 32            mov bl, [d]
11304  4C16 A7 00         mov bh, 0
11305  4C18             ; START RELATIONAL
11306  4C18 D7            push a
11307  4C19 11            mov a, b
11308  4C1A 26 02 00      mov b, $2
11309  4C1D B0            cmp a, b
11310  4C1E FD 73         slt ; < (signed)
11311  4C20 E4            pop a
11312  4C21             ; END RELATIONAL
11313  4C21 C0 00 00      cmp b, 0
11314  4C24 C6 37 4C      je _if181_exit
11315  4C27             _if181_true:
11316  4C27             ;; plural++; 
11317  4C27 FA FF FF      lea d, [bp + -1] ; $plural
11318  4C2A 2A            mov b, [d]
11319  4C2B D8            push b
11320  4C2C FD 77         inc b
11321  4C2E FA FF FF      lea d, [bp + -1] ; $plural
11322  4C31 FD 43         mov [d], b
11323  4C33 E5            pop b
11324  4C34 0A 37 4C      jmp _if181_exit
11325  4C37             _if181_exit:
11326  4C37             ;; printf("The Federation is maintaining %d starbase%s in the galaxy\n\n", starbases_left, plural); 
11327  4C37 FA FF FF      lea d, [bp + -1] ; $plural
11328  4C3A 2A            mov b, [d]
11329  4C3B FD AB         swp b
11330  4C3D D8            push b
11331  4C3E 3B 13 60      mov d, _starbases_left ; $starbases_left
11332  4C41 32            mov bl, [d]
11333  4C42 A7 00         mov bh, 0
11334  4C44 DD            push bl
out/startrek.asm line 11335: Label not found: (__s137)
out/startrek.asm line 11335: Unused data in MS byte of argument. (2)
11335  4C45 26 00 00      mov b, __s137 ; "The Federation is maintaining %d starbase%s in the galaxy\n\n"
11336  4C48 FD AB         swp b
11337  4C4A D8            push b
11338  4C4B 07 D1 05      call printf
11339  4C4E 51 05 00      add sp, 5
11340  4C51             _if180_exit:
11341  4C51 F9            leave
11342  4C52 09            ret
11343  4C53             
11344  4C53             torpedo_data:
11345  4C53 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11346  4C56             ; $i 
11347  4C56             ; $plural 
11348  4C56             ; $k 
11349  4C56 52 06 00      sub sp, 6
11350  4C59             ;; plural = str_s + 1; 
11351  4C59 FA FD FF      lea d, [bp + -3] ; $plural
11352  4C5C DA            push d
11353  4C5D 3B 8F 62      mov d, _str_s ; $str_s
11354  4C60 2A            mov b, [d]
11355  4C61             ; START TERMS
11356  4C61 D7            push a
11357  4C62 11            mov a, b
11358  4C63 26 01 00      mov b, $1
11359  4C66 56            add b, a
11360  4C67 E4            pop a
11361  4C68             ; END TERMS
11362  4C68 E7            pop d
11363  4C69 FD 43         mov [d], b
11364  4C6B             ;; if (no_klingon()) 
11365  4C6B             _if182_cond:
11366  4C6B 07 D0 3A      call no_klingon
11367  4C6E C0 00 00      cmp b, 0
11368  4C71 C6 79 4C      je _if182_exit
11369  4C74             _if182_true:
11370  4C74             ;; return; 
11371  4C74 F9            leave
11372  4C75 09            ret
11373  4C76 0A 79 4C      jmp _if182_exit
11374  4C79             _if182_exit:
11375  4C79             ;; if (klingons > 1) 
11376  4C79             _if183_cond:
11377  4C79 3B E6 60      mov d, _klingons ; $klingons
11378  4C7C 32            mov bl, [d]
11379  4C7D A7 00         mov bh, 0
11380  4C7F             ; START RELATIONAL
11381  4C7F D7            push a
11382  4C80 11            mov a, b
11383  4C81 26 01 00      mov b, $1
11384  4C84 B0            cmp a, b
11385  4C85 FD 81         sgu ; > (unsigned)
11386  4C87 E4            pop a
11387  4C88             ; END RELATIONAL
11388  4C88 C0 00 00      cmp b, 0
11389  4C8B C6 9E 4C      je _if183_exit
11390  4C8E             _if183_true:
11391  4C8E             ;; plural--; 
11392  4C8E FA FD FF      lea d, [bp + -3] ; $plural
11393  4C91 2A            mov b, [d]
11394  4C92 D8            push b
11395  4C93 FD 7D         dec b
11396  4C95 FA FD FF      lea d, [bp + -3] ; $plural
11397  4C98 FD 43         mov [d], b
11398  4C9A E5            pop b
11399  4C9B 0A 9E 4C      jmp _if183_exit
11400  4C9E             _if183_exit:
11401  4C9E             ;; printf("From Enterprise to Klingon battlecriuser%s:\n\n", plural); 
11402  4C9E FA FD FF      lea d, [bp + -3] ; $plural
11403  4CA1 2A            mov b, [d]
11404  4CA2 FD AB         swp b
11405  4CA4 D8            push b
out/startrek.asm line 11406: Label not found: (__s138)
out/startrek.asm line 11406: Unused data in MS byte of argument. (2)
11406  4CA5 26 00 00      mov b, __s138 ; "From Enterprise to Klingon battlecriuser%s:\n\n"
11407  4CA8 FD AB         swp b
11408  4CAA D8            push b
11409  4CAB 07 D1 05      call printf
11410  4CAE 51 04 00      add sp, 4
11411  4CB1             ;; k = kdata; 
11412  4CB1 FA FB FF      lea d, [bp + -5] ; $k
11413  4CB4 DA            push d
11414  4CB5 3B DA 60      mov d, _kdata_data ; $kdata
11415  4CB8 2D            mov b, d
11416  4CB9 E7            pop d
11417  4CBA FD 43         mov [d], b
11418  4CBC             ;; for (i = 0; i <= 2; i++) { 
11419  4CBC             _for184_init:
11420  4CBC FA FF FF      lea d, [bp + -1] ; $i
11421  4CBF DA            push d
11422  4CC0 26 00 00      mov b, $0
11423  4CC3 E7            pop d
11424  4CC4 FD 43         mov [d], b
11425  4CC6             _for184_cond:
11426  4CC6 FA FF FF      lea d, [bp + -1] ; $i
11427  4CC9 2A            mov b, [d]
11428  4CCA             ; START RELATIONAL
11429  4CCA D7            push a
11430  4CCB 11            mov a, b
11431  4CCC 26 02 00      mov b, $2
11432  4CCF B0            cmp a, b
11433  4CD0 FD 73         slt ; <= (signed)
11434  4CD2 E4            pop a
11435  4CD3             ; END RELATIONAL
11436  4CD3 C0 00 00      cmp b, 0
11437  4CD6 C6 55 4D      je _for184_exit
11438  4CD9             _for184_block:
11439  4CD9             ;; if (k->energy > 0) { 
11440  4CD9             _if185_cond:
11441  4CD9 FA FB FF      lea d, [bp + -5] ; $k
11442  4CDC FD 2A         mov d, [d]
11443  4CDE 58 02 00      add d, 2
11444  4CE1 2A            mov b, [d]
11445  4CE2             ; START RELATIONAL
11446  4CE2 D7            push a
11447  4CE3 11            mov a, b
11448  4CE4 26 00 00      mov b, $0
11449  4CE7 B0            cmp a, b
11450  4CE8 FD 7F         sgt ; >
11451  4CEA E4            pop a
11452  4CEB             ; END RELATIONAL
11453  4CEB C0 00 00      cmp b, 0
11454  4CEE C6 36 4D      je _if185_exit
11455  4CF1             _if185_true:
11456  4CF1             ;; compute_vector(TO_FIXED00(k->y), 
11457  4CF1 3B 0C 61      mov d, _ship_x ; $ship_x
11458  4CF4 2A            mov b, [d]
11459  4CF5 FD AB         swp b
11460  4CF7 D8            push b
11461  4CF8 3B 0A 61      mov d, _ship_y ; $ship_y
11462  4CFB 2A            mov b, [d]
11463  4CFC FD AB         swp b
11464  4CFE D8            push b
11465  4CFF FA FB FF      lea d, [bp + -5] ; $k
11466  4D02 FD 2A         mov d, [d]
11467  4D04 58 01 00      add d, 1
11468  4D07 32            mov bl, [d]
11469  4D08 A7 00         mov bh, 0
11470  4D0A FD AB         swp b
11471  4D0C D8            push b
11472  4D0D 07 F9 1C      call TO_FIXED00
11473  4D10 51 02 00      add sp, 2
11474  4D13 FD AB         swp b
11475  4D15 D8            push b
11476  4D16 FA FB FF      lea d, [bp + -5] ; $k
11477  4D19 FD 2A         mov d, [d]
11478  4D1B 58 00 00      add d, 0
11479  4D1E 32            mov bl, [d]
11480  4D1F A7 00         mov bh, 0
11481  4D21 FD AB         swp b
11482  4D23 D8            push b
11483  4D24 07 F9 1C      call TO_FIXED00
11484  4D27 51 02 00      add sp, 2
11485  4D2A FD AB         swp b
11486  4D2C D8            push b
11487  4D2D 07 08 51      call compute_vector
11488  4D30 51 08 00      add sp, 8
11489  4D33 0A 36 4D      jmp _if185_exit
11490  4D36             _if185_exit:
11491  4D36             ;; k++; 
11492  4D36 FA FB FF      lea d, [bp + -5] ; $k
11493  4D39 2A            mov b, [d]
11494  4D3A D8            push b
11495  4D3B FD 77         inc b
11496  4D3D FD 77         inc b
11497  4D3F FA FB FF      lea d, [bp + -5] ; $k
11498  4D42 FD 43         mov [d], b
11499  4D44 E5            pop b
11500  4D45             _for184_update:
11501  4D45 FA FF FF      lea d, [bp + -1] ; $i
11502  4D48 2A            mov b, [d]
11503  4D49 D8            push b
11504  4D4A FD 77         inc b
11505  4D4C FA FF FF      lea d, [bp + -1] ; $i
11506  4D4F FD 43         mov [d], b
11507  4D51 E5            pop b
11508  4D52 0A C6 4C      jmp _for184_cond
11509  4D55             _for184_exit:
11510  4D55 F9            leave
11511  4D56 09            ret
11512  4D57             
11513  4D57             nav_data:
11514  4D57 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11515  4D5A             ;; if (starbases <= 0) { 
11516  4D5A             _if186_cond:
11517  4D5A 3B 10 60      mov d, _starbases ; $starbases
11518  4D5D 32            mov bl, [d]
11519  4D5E A7 00         mov bh, 0
11520  4D60             ; START RELATIONAL
11521  4D60 D7            push a
11522  4D61 11            mov a, b
11523  4D62 26 00 00      mov b, $0
11524  4D65 B0            cmp a, b
11525  4D66 FD 73         slt ; <= (signed)
11526  4D68 E4            pop a
11527  4D69             ; END RELATIONAL
11528  4D69 C0 00 00      cmp b, 0
11529  4D6C C6 80 4D      je _if186_exit
11530  4D6F             _if186_true:
11531  4D6F             ;; puts("Mr. Spock reports,\n  Sensors show no starbases in this quadrant.\n"); 
out/startrek.asm line 11532: Label not found: (__s139)
out/startrek.asm line 11532: Unused data in MS byte of argument. (2)
11532  4D6F 26 00 00      mov b, __s139 ; "Mr. Spock reports,\n  Sensors show no starbases in this quadrant.\n"
11533  4D72 FD AB         swp b
11534  4D74 D8            push b
11535  4D75 07 31 13      call puts
11536  4D78 51 02 00      add sp, 2
11537  4D7B             ;; return; 
11538  4D7B F9            leave
11539  4D7C 09            ret
11540  4D7D 0A 80 4D      jmp _if186_exit
11541  4D80             _if186_exit:
11542  4D80             ;; compute_vector(TO_FIXED00(base_y), TO_FIXED00(base_x), ship_y, ship_x); 
11543  4D80 3B 0C 61      mov d, _ship_x ; $ship_x
11544  4D83 2A            mov b, [d]
11545  4D84 FD AB         swp b
11546  4D86 D8            push b
11547  4D87 3B 0A 61      mov d, _ship_y ; $ship_y
11548  4D8A 2A            mov b, [d]
11549  4D8B FD AB         swp b
11550  4D8D D8            push b
11551  4D8E 3B 12 60      mov d, _base_x ; $base_x
11552  4D91 32            mov bl, [d]
11553  4D92 A7 00         mov bh, 0
11554  4D94 FD AB         swp b
11555  4D96 D8            push b
11556  4D97 07 F9 1C      call TO_FIXED00
11557  4D9A 51 02 00      add sp, 2
11558  4D9D FD AB         swp b
11559  4D9F D8            push b
11560  4DA0 3B 11 60      mov d, _base_y ; $base_y
11561  4DA3 32            mov bl, [d]
11562  4DA4 A7 00         mov bh, 0
11563  4DA6 FD AB         swp b
11564  4DA8 D8            push b
11565  4DA9 07 F9 1C      call TO_FIXED00
11566  4DAC 51 02 00      add sp, 2
11567  4DAF FD AB         swp b
11568  4DB1 D8            push b
11569  4DB2 07 08 51      call compute_vector
11570  4DB5 51 08 00      add sp, 8
11571  4DB8 F9            leave
11572  4DB9 09            ret
11573  4DBA             
11574  4DBA             dirdist_calc:
11575  4DBA F8 00 00      enter 0 ; (push bp; mov bp, sp)
11576  4DBD             ; $c1 
11577  4DBD             ; $a 
11578  4DBD             ; $w1 
11579  4DBD             ; $x 
11580  4DBD 52 08 00      sub sp, 8
11581  4DC0             ;; printf("Direction/Distance Calculator\n You are at quadrant %d,%d sector %d,%d\n\n Please enter initial X coordinate: ", 
11582  4DC0 3B 0C 61      mov d, _ship_x ; $ship_x
11583  4DC3 2A            mov b, [d]
11584  4DC4 FD AB         swp b
11585  4DC6 D8            push b
11586  4DC7 07 0B 1D      call FROM_FIXED00
11587  4DCA 51 02 00      add sp, 2
11588  4DCD FD AB         swp b
11589  4DCF D8            push b
11590  4DD0 3B 0A 61      mov d, _ship_y ; $ship_y
11591  4DD3 2A            mov b, [d]
11592  4DD4 FD AB         swp b
11593  4DD6 D8            push b
11594  4DD7 07 0B 1D      call FROM_FIXED00
11595  4DDA 51 02 00      add sp, 2
11596  4DDD FD AB         swp b
11597  4DDF D8            push b
11598  4DE0 3B ED 60      mov d, _quad_x ; $quad_x
11599  4DE3 2A            mov b, [d]
11600  4DE4 FD AB         swp b
11601  4DE6 D8            push b
11602  4DE7 3B EB 60      mov d, _quad_y ; $quad_y
11603  4DEA 2A            mov b, [d]
11604  4DEB FD AB         swp b
11605  4DED D8            push b
out/startrek.asm line 11606: Label not found: (__s140)
out/startrek.asm line 11606: Unused data in MS byte of argument. (2)
11606  4DEE 26 00 00      mov b, __s140 ; "Direction/Distance Calculator\n You are at quadrant %d,%d sector %d,%d\n\n Please enter initial X coordinate: "
11607  4DF1 FD AB         swp b
11608  4DF3 D8            push b
11609  4DF4 07 D1 05      call printf
11610  4DF7 51 0A 00      add sp, 10
11611  4DFA             ;; c1 = TO_FIXED00(input_int()); 
11612  4DFA FA FF FF      lea d, [bp + -1] ; $c1
11613  4DFD DA            push d
11614  4DFE 07 B4 1F      call input_int
11615  4E01 FD AB         swp b
11616  4E03 D8            push b
11617  4E04 07 F9 1C      call TO_FIXED00
11618  4E07 51 02 00      add sp, 2
11619  4E0A E7            pop d
11620  4E0B FD 43         mov [d], b
11621  4E0D             ;; if (c1 < 0 || c1 > 900 ) 
11622  4E0D             _if187_cond:
11623  4E0D FA FF FF      lea d, [bp + -1] ; $c1
11624  4E10 2A            mov b, [d]
11625  4E11             ; START RELATIONAL
11626  4E11 D7            push a
11627  4E12 11            mov a, b
11628  4E13 26 00 00      mov b, $0
11629  4E16 B0            cmp a, b
11630  4E17 FD 73         slt ; < (signed)
11631  4E19 E4            pop a
11632  4E1A             ; END RELATIONAL
11633  4E1A D7            push a
11634  4E1B 11            mov a, b
11635  4E1C FA FF FF      lea d, [bp + -1] ; $c1
11636  4E1F 2A            mov b, [d]
11637  4E20             ; START RELATIONAL
11638  4E20 D7            push a
11639  4E21 11            mov a, b
11640  4E22 26 84 03      mov b, $384
11641  4E25 B0            cmp a, b
11642  4E26 FD 7F         sgt ; >
11643  4E28 E4            pop a
11644  4E29             ; END RELATIONAL
11645  4E29 FD A8         sor a, b ; ||
11646  4E2B E4            pop a
11647  4E2C C0 00 00      cmp b, 0
11648  4E2F C6 37 4E      je _if187_exit
11649  4E32             _if187_true:
11650  4E32             ;; return; 
11651  4E32 F9            leave
11652  4E33 09            ret
11653  4E34 0A 37 4E      jmp _if187_exit
11654  4E37             _if187_exit:
11655  4E37             ;; puts("Please enter initial Y coordinate: "); 
out/startrek.asm line 11656: Label not found: (__s141)
out/startrek.asm line 11656: Unused data in MS byte of argument. (2)
11656  4E37 26 00 00      mov b, __s141 ; "Please enter initial Y coordinate: "
11657  4E3A FD AB         swp b
11658  4E3C D8            push b
11659  4E3D 07 31 13      call puts
11660  4E40 51 02 00      add sp, 2
11661  4E43             ;; a = TO_FIXED00(input_int()); 
11662  4E43 FA FD FF      lea d, [bp + -3] ; $a
11663  4E46 DA            push d
11664  4E47 07 B4 1F      call input_int
11665  4E4A FD AB         swp b
11666  4E4C D8            push b
11667  4E4D 07 F9 1C      call TO_FIXED00
11668  4E50 51 02 00      add sp, 2
11669  4E53 E7            pop d
11670  4E54 FD 43         mov [d], b
11671  4E56             ;; if (a < 0 || a > 900) 
11672  4E56             _if188_cond:
11673  4E56 FA FD FF      lea d, [bp + -3] ; $a
11674  4E59 2A            mov b, [d]
11675  4E5A             ; START RELATIONAL
11676  4E5A D7            push a
11677  4E5B 11            mov a, b
11678  4E5C 26 00 00      mov b, $0
11679  4E5F B0            cmp a, b
11680  4E60 FD 73         slt ; < (signed)
11681  4E62 E4            pop a
11682  4E63             ; END RELATIONAL
11683  4E63 D7            push a
11684  4E64 11            mov a, b
11685  4E65 FA FD FF      lea d, [bp + -3] ; $a
11686  4E68 2A            mov b, [d]
11687  4E69             ; START RELATIONAL
11688  4E69 D7            push a
11689  4E6A 11            mov a, b
11690  4E6B 26 84 03      mov b, $384
11691  4E6E B0            cmp a, b
11692  4E6F FD 7F         sgt ; >
11693  4E71 E4            pop a
11694  4E72             ; END RELATIONAL
11695  4E72 FD A8         sor a, b ; ||
11696  4E74 E4            pop a
11697  4E75 C0 00 00      cmp b, 0
11698  4E78 C6 80 4E      je _if188_exit
11699  4E7B             _if188_true:
11700  4E7B             ;; return; 
11701  4E7B F9            leave
11702  4E7C 09            ret
11703  4E7D 0A 80 4E      jmp _if188_exit
11704  4E80             _if188_exit:
11705  4E80             ;; puts("Please enter final X coordinate: "); 
out/startrek.asm line 11706: Label not found: (__s142)
out/startrek.asm line 11706: Unused data in MS byte of argument. (2)
11706  4E80 26 00 00      mov b, __s142 ; "Please enter final X coordinate: "
11707  4E83 FD AB         swp b
11708  4E85 D8            push b
11709  4E86 07 31 13      call puts
11710  4E89 51 02 00      add sp, 2
11711  4E8C             ;; w1 = TO_FIXED00(input_int()); 
11712  4E8C FA FB FF      lea d, [bp + -5] ; $w1
11713  4E8F DA            push d
11714  4E90 07 B4 1F      call input_int
11715  4E93 FD AB         swp b
11716  4E95 D8            push b
11717  4E96 07 F9 1C      call TO_FIXED00
11718  4E99 51 02 00      add sp, 2
11719  4E9C E7            pop d
11720  4E9D FD 43         mov [d], b
11721  4E9F             ;; if (w1 < 0 || w1 > 900) 
11722  4E9F             _if189_cond:
11723  4E9F FA FB FF      lea d, [bp + -5] ; $w1
11724  4EA2 2A            mov b, [d]
11725  4EA3             ; START RELATIONAL
11726  4EA3 D7            push a
11727  4EA4 11            mov a, b
11728  4EA5 26 00 00      mov b, $0
11729  4EA8 B0            cmp a, b
11730  4EA9 FD 73         slt ; < (signed)
11731  4EAB E4            pop a
11732  4EAC             ; END RELATIONAL
11733  4EAC D7            push a
11734  4EAD 11            mov a, b
11735  4EAE FA FB FF      lea d, [bp + -5] ; $w1
11736  4EB1 2A            mov b, [d]
11737  4EB2             ; START RELATIONAL
11738  4EB2 D7            push a
11739  4EB3 11            mov a, b
11740  4EB4 26 84 03      mov b, $384
11741  4EB7 B0            cmp a, b
11742  4EB8 FD 7F         sgt ; >
11743  4EBA E4            pop a
11744  4EBB             ; END RELATIONAL
11745  4EBB FD A8         sor a, b ; ||
11746  4EBD E4            pop a
11747  4EBE C0 00 00      cmp b, 0
11748  4EC1 C6 C9 4E      je _if189_exit
11749  4EC4             _if189_true:
11750  4EC4             ;; return; 
11751  4EC4 F9            leave
11752  4EC5 09            ret
11753  4EC6 0A C9 4E      jmp _if189_exit
11754  4EC9             _if189_exit:
11755  4EC9             ;; puts("Please enter final Y coordinate: "); 
out/startrek.asm line 11756: Label not found: (__s143)
out/startrek.asm line 11756: Unused data in MS byte of argument. (2)
11756  4EC9 26 00 00      mov b, __s143 ; "Please enter final Y coordinate: "
11757  4ECC FD AB         swp b
11758  4ECE D8            push b
11759  4ECF 07 31 13      call puts
11760  4ED2 51 02 00      add sp, 2
11761  4ED5             ;; x = TO_FIXED00(input_int()); 
11762  4ED5 FA F9 FF      lea d, [bp + -7] ; $x
11763  4ED8 DA            push d
11764  4ED9 07 B4 1F      call input_int
11765  4EDC FD AB         swp b
11766  4EDE D8            push b
11767  4EDF 07 F9 1C      call TO_FIXED00
11768  4EE2 51 02 00      add sp, 2
11769  4EE5 E7            pop d
11770  4EE6 FD 43         mov [d], b
11771  4EE8             ;; if (x < 0 || x > 900) 
11772  4EE8             _if190_cond:
11773  4EE8 FA F9 FF      lea d, [bp + -7] ; $x
11774  4EEB 2A            mov b, [d]
11775  4EEC             ; START RELATIONAL
11776  4EEC D7            push a
11777  4EED 11            mov a, b
11778  4EEE 26 00 00      mov b, $0
11779  4EF1 B0            cmp a, b
11780  4EF2 FD 73         slt ; < (signed)
11781  4EF4 E4            pop a
11782  4EF5             ; END RELATIONAL
11783  4EF5 D7            push a
11784  4EF6 11            mov a, b
11785  4EF7 FA F9 FF      lea d, [bp + -7] ; $x
11786  4EFA 2A            mov b, [d]
11787  4EFB             ; START RELATIONAL
11788  4EFB D7            push a
11789  4EFC 11            mov a, b
11790  4EFD 26 84 03      mov b, $384
11791  4F00 B0            cmp a, b
11792  4F01 FD 7F         sgt ; >
11793  4F03 E4            pop a
11794  4F04             ; END RELATIONAL
11795  4F04 FD A8         sor a, b ; ||
11796  4F06 E4            pop a
11797  4F07 C0 00 00      cmp b, 0
11798  4F0A C6 12 4F      je _if190_exit
11799  4F0D             _if190_true:
11800  4F0D             ;; return; 
11801  4F0D F9            leave
11802  4F0E 09            ret
11803  4F0F 0A 12 4F      jmp _if190_exit
11804  4F12             _if190_exit:
11805  4F12             ;; compute_vector(w1, x, c1, a); 
11806  4F12 FA FD FF      lea d, [bp + -3] ; $a
11807  4F15 2A            mov b, [d]
11808  4F16 FD AB         swp b
11809  4F18 D8            push b
11810  4F19 FA FF FF      lea d, [bp + -1] ; $c1
11811  4F1C 2A            mov b, [d]
11812  4F1D FD AB         swp b
11813  4F1F D8            push b
11814  4F20 FA F9 FF      lea d, [bp + -7] ; $x
11815  4F23 2A            mov b, [d]
11816  4F24 FD AB         swp b
11817  4F26 D8            push b
11818  4F27 FA FB FF      lea d, [bp + -5] ; $w1
11819  4F2A 2A            mov b, [d]
11820  4F2B FD AB         swp b
11821  4F2D D8            push b
11822  4F2E 07 08 51      call compute_vector
11823  4F31 51 08 00      add sp, 8
11824  4F34 F9            leave
11825  4F35 09            ret
11826  4F36             
11827  4F36             galaxy_map:
11828  4F36 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11829  4F39             ; $i 
11830  4F39             ; $j 
11831  4F39             ; $j0 
11832  4F39 52 06 00      sub sp, 6
11833  4F3C             ;; printf("\n                   The Galaxy\n\n"); 
out/startrek.asm line 11834: Label not found: (__s144)
out/startrek.asm line 11834: Unused data in MS byte of argument. (2)
11834  4F3C 26 00 00      mov b, __s144 ; "\n                   The Galaxy\n\n"
11835  4F3F FD AB         swp b
11836  4F41 D8            push b
11837  4F42 07 D1 05      call printf
11838  4F45 51 02 00      add sp, 2
11839  4F48             ;; printf("    1     2     3     4     5     6     7     8\n"); 
out/startrek.asm line 11840: Label not found: (__s145)
out/startrek.asm line 11840: Unused data in MS byte of argument. (2)
11840  4F48 26 00 00      mov b, __s145 ; "    1     2     3     4     5     6     7     8\n"
11841  4F4B FD AB         swp b
11842  4F4D D8            push b
11843  4F4E 07 D1 05      call printf
11844  4F51 51 02 00      add sp, 2
11845  4F54             ;; for (i = 1; i <= 8; i++) { 
11846  4F54             _for191_init:
11847  4F54 FA FF FF      lea d, [bp + -1] ; $i
11848  4F57 DA            push d
11849  4F58 26 01 00      mov b, $1
11850  4F5B E7            pop d
11851  4F5C FD 43         mov [d], b
11852  4F5E             _for191_cond:
11853  4F5E FA FF FF      lea d, [bp + -1] ; $i
11854  4F61 2A            mov b, [d]
11855  4F62             ; START RELATIONAL
11856  4F62 D7            push a
11857  4F63 11            mov a, b
11858  4F64 26 08 00      mov b, $8
11859  4F67 B0            cmp a, b
11860  4F68 FD 73         slt ; <= (signed)
11861  4F6A E4            pop a
11862  4F6B             ; END RELATIONAL
11863  4F6B C0 00 00      cmp b, 0
11864  4F6E C6 F9 50      je _for191_exit
11865  4F71             _for191_block:
11866  4F71             ;; printf("%s%d ", gm_1, i); 
11867  4F71 FA FF FF      lea d, [bp + -1] ; $i
11868  4F74 2A            mov b, [d]
11869  4F75 FD AB         swp b
11870  4F77 D8            push b
11871  4F78 3B C4 62      mov d, _gm_1 ; $gm_1
11872  4F7B 2A            mov b, [d]
11873  4F7C FD AB         swp b
11874  4F7E D8            push b
out/startrek.asm line 11875: Label not found: (__s146)
out/startrek.asm line 11875: Unused data in MS byte of argument. (2)
11875  4F7F 26 00 00      mov b, __s146 ; "%s%d "
11876  4F82 FD AB         swp b
11877  4F84 D8            push b
11878  4F85 07 D1 05      call printf
11879  4F88 51 06 00      add sp, 6
11880  4F8B             ;; quadrant_name(1, i, 1); 
11881  4F8B 26 01 00      mov b, $1
11882  4F8E DD            push bl
11883  4F8F FA FF FF      lea d, [bp + -1] ; $i
11884  4F92 2A            mov b, [d]
11885  4F93 DD            push bl
11886  4F94 26 01 00      mov b, $1
11887  4F97 DD            push bl
11888  4F98 07 00 5D      call quadrant_name
11889  4F9B 51 03 00      add sp, 3
11890  4F9E             ;; j0 = (int) (11 - (strlen(quadname) / 2)); 
11891  4F9E FA FB FF      lea d, [bp + -5] ; $j0
11892  4FA1 DA            push d
11893  4FA2 26 0B 00      mov b, $b
11894  4FA5             ; START TERMS
11895  4FA5 D7            push a
11896  4FA6 11            mov a, b
11897  4FA7 3B 50 61      mov d, _quadname_data ; $quadname
11898  4FAA 2D            mov b, d
11899  4FAB FD AB         swp b
11900  4FAD D8            push b
11901  4FAE 07 88 05      call strlen
11902  4FB1 51 02 00      add sp, 2
11903  4FB4             ; START FACTORS
11904  4FB4 D7            push a
11905  4FB5 11            mov a, b
11906  4FB6 26 02 00      mov b, $2
11907  4FB9 AE            div a, b
11908  4FBA 27            mov b, a
11909  4FBB E4            pop a
11910  4FBC             ; END FACTORS
11911  4FBC 60            sub a, b
11912  4FBD 27            mov b, a
11913  4FBE E4            pop a
11914  4FBF             ; END TERMS
11915  4FBF E7            pop d
11916  4FC0 FD 43         mov [d], b
11917  4FC2             ;; for (j = 0; j < j0; j++) 
11918  4FC2             _for192_init:
11919  4FC2 FA FD FF      lea d, [bp + -3] ; $j
11920  4FC5 DA            push d
11921  4FC6 26 00 00      mov b, $0
11922  4FC9 E7            pop d
11923  4FCA FD 43         mov [d], b
11924  4FCC             _for192_cond:
11925  4FCC FA FD FF      lea d, [bp + -3] ; $j
11926  4FCF 2A            mov b, [d]
11927  4FD0             ; START RELATIONAL
11928  4FD0 D7            push a
11929  4FD1 11            mov a, b
11930  4FD2 FA FB FF      lea d, [bp + -5] ; $j0
11931  4FD5 2A            mov b, [d]
11932  4FD6 B0            cmp a, b
11933  4FD7 FD 73         slt ; < (signed)
11934  4FD9 E4            pop a
11935  4FDA             ; END RELATIONAL
11936  4FDA C0 00 00      cmp b, 0
11937  4FDD C6 FA 4F      je _for192_exit
11938  4FE0             _for192_block:
11939  4FE0             ;; putchar(' '); 
11940  4FE0 26 20 00      mov b, $20
11941  4FE3 DD            push bl
11942  4FE4 07 FB 12      call putchar
11943  4FE7 51 01 00      add sp, 1
11944  4FEA             _for192_update:
11945  4FEA FA FD FF      lea d, [bp + -3] ; $j
11946  4FED 2A            mov b, [d]
11947  4FEE D8            push b
11948  4FEF FD 77         inc b
11949  4FF1 FA FD FF      lea d, [bp + -3] ; $j
11950  4FF4 FD 43         mov [d], b
11951  4FF6 E5            pop b
11952  4FF7 0A CC 4F      jmp _for192_cond
11953  4FFA             _for192_exit:
11954  4FFA             ;; puts(quadname); 
11955  4FFA 3B 50 61      mov d, _quadname_data ; $quadname
11956  4FFD 2D            mov b, d
11957  4FFE FD AB         swp b
11958  5000 D8            push b
11959  5001 07 31 13      call puts
11960  5004 51 02 00      add sp, 2
11961  5007             ;; for (j = 0; j < j0; j++) 
11962  5007             _for193_init:
11963  5007 FA FD FF      lea d, [bp + -3] ; $j
11964  500A DA            push d
11965  500B 26 00 00      mov b, $0
11966  500E E7            pop d
11967  500F FD 43         mov [d], b
11968  5011             _for193_cond:
11969  5011 FA FD FF      lea d, [bp + -3] ; $j
11970  5014 2A            mov b, [d]
11971  5015             ; START RELATIONAL
11972  5015 D7            push a
11973  5016 11            mov a, b
11974  5017 FA FB FF      lea d, [bp + -5] ; $j0
11975  501A 2A            mov b, [d]
11976  501B B0            cmp a, b
11977  501C FD 73         slt ; < (signed)
11978  501E E4            pop a
11979  501F             ; END RELATIONAL
11980  501F C0 00 00      cmp b, 0
11981  5022 C6 3F 50      je _for193_exit
11982  5025             _for193_block:
11983  5025             ;; putchar(' '); 
11984  5025 26 20 00      mov b, $20
11985  5028 DD            push bl
11986  5029 07 FB 12      call putchar
11987  502C 51 01 00      add sp, 1
11988  502F             _for193_update:
11989  502F FA FD FF      lea d, [bp + -3] ; $j
11990  5032 2A            mov b, [d]
11991  5033 D8            push b
11992  5034 FD 77         inc b
11993  5036 FA FD FF      lea d, [bp + -3] ; $j
11994  5039 FD 43         mov [d], b
11995  503B E5            pop b
11996  503C 0A 11 50      jmp _for193_cond
11997  503F             _for193_exit:
11998  503F             ;; if (!(strlen(quadname) % 2)) 
11999  503F             _if194_cond:
12000  503F 3B 50 61      mov d, _quadname_data ; $quadname
12001  5042 2D            mov b, d
12002  5043 FD AB         swp b
12003  5045 D8            push b
12004  5046 07 88 05      call strlen
12005  5049 51 02 00      add sp, 2
12006  504C             ; START FACTORS
12007  504C D7            push a
12008  504D 11            mov a, b
12009  504E 26 02 00      mov b, $2
12010  5051 AE            div a, b ; 
12011  5052 11            mov a, b
12012  5053 27            mov b, a
12013  5054 E4            pop a
12014  5055             ; END FACTORS
12015  5055 C0 00 00      cmp b, 0
12016  5058 FD 71         seq ; !
12017  505A C0 00 00      cmp b, 0
12018  505D C6 6D 50      je _if194_exit
12019  5060             _if194_true:
12020  5060             ;; putchar(' '); 
12021  5060 26 20 00      mov b, $20
12022  5063 DD            push bl
12023  5064 07 FB 12      call putchar
12024  5067 51 01 00      add sp, 1
12025  506A 0A 6D 50      jmp _if194_exit
12026  506D             _if194_exit:
12027  506D             ;; quadrant_name(1, i, 5); 
12028  506D 26 05 00      mov b, $5
12029  5070 DD            push bl
12030  5071 FA FF FF      lea d, [bp + -1] ; $i
12031  5074 2A            mov b, [d]
12032  5075 DD            push bl
12033  5076 26 01 00      mov b, $1
12034  5079 DD            push bl
12035  507A 07 00 5D      call quadrant_name
12036  507D 51 03 00      add sp, 3
12037  5080             ;; j0 = (int) (12 - (strlen(quadname) / 2)); 
12038  5080 FA FB FF      lea d, [bp + -5] ; $j0
12039  5083 DA            push d
12040  5084 26 0C 00      mov b, $c
12041  5087             ; START TERMS
12042  5087 D7            push a
12043  5088 11            mov a, b
12044  5089 3B 50 61      mov d, _quadname_data ; $quadname
12045  508C 2D            mov b, d
12046  508D FD AB         swp b
12047  508F D8            push b
12048  5090 07 88 05      call strlen
12049  5093 51 02 00      add sp, 2
12050  5096             ; START FACTORS
12051  5096 D7            push a
12052  5097 11            mov a, b
12053  5098 26 02 00      mov b, $2
12054  509B AE            div a, b
12055  509C 27            mov b, a
12056  509D E4            pop a
12057  509E             ; END FACTORS
12058  509E 60            sub a, b
12059  509F 27            mov b, a
12060  50A0 E4            pop a
12061  50A1             ; END TERMS
12062  50A1 E7            pop d
12063  50A2 FD 43         mov [d], b
12064  50A4             ;; for (j = 0; j < j0; j++) 
12065  50A4             _for195_init:
12066  50A4 FA FD FF      lea d, [bp + -3] ; $j
12067  50A7 DA            push d
12068  50A8 26 00 00      mov b, $0
12069  50AB E7            pop d
12070  50AC FD 43         mov [d], b
12071  50AE             _for195_cond:
12072  50AE FA FD FF      lea d, [bp + -3] ; $j
12073  50B1 2A            mov b, [d]
12074  50B2             ; START RELATIONAL
12075  50B2 D7            push a
12076  50B3 11            mov a, b
12077  50B4 FA FB FF      lea d, [bp + -5] ; $j0
12078  50B7 2A            mov b, [d]
12079  50B8 B0            cmp a, b
12080  50B9 FD 73         slt ; < (signed)
12081  50BB E4            pop a
12082  50BC             ; END RELATIONAL
12083  50BC C0 00 00      cmp b, 0
12084  50BF C6 DC 50      je _for195_exit
12085  50C2             _for195_block:
12086  50C2             ;; putchar(' '); 
12087  50C2 26 20 00      mov b, $20
12088  50C5 DD            push bl
12089  50C6 07 FB 12      call putchar
12090  50C9 51 01 00      add sp, 1
12091  50CC             _for195_update:
12092  50CC FA FD FF      lea d, [bp + -3] ; $j
12093  50CF 2A            mov b, [d]
12094  50D0 D8            push b
12095  50D1 FD 77         inc b
12096  50D3 FA FD FF      lea d, [bp + -3] ; $j
12097  50D6 FD 43         mov [d], b
12098  50D8 E5            pop b
12099  50D9 0A AE 50      jmp _for195_cond
12100  50DC             _for195_exit:
12101  50DC             ;; puts(quadname); 
12102  50DC 3B 50 61      mov d, _quadname_data ; $quadname
12103  50DF 2D            mov b, d
12104  50E0 FD AB         swp b
12105  50E2 D8            push b
12106  50E3 07 31 13      call puts
12107  50E6 51 02 00      add sp, 2
12108  50E9             _for191_update:
12109  50E9 FA FF FF      lea d, [bp + -1] ; $i
12110  50EC 2A            mov b, [d]
12111  50ED D8            push b
12112  50EE FD 77         inc b
12113  50F0 FA FF FF      lea d, [bp + -1] ; $i
12114  50F3 FD 43         mov [d], b
12115  50F5 E5            pop b
12116  50F6 0A 5E 4F      jmp _for191_cond
12117  50F9             _for191_exit:
12118  50F9             ;; puts(gm_1); 
12119  50F9 3B C4 62      mov d, _gm_1 ; $gm_1
12120  50FC 2A            mov b, [d]
12121  50FD FD AB         swp b
12122  50FF D8            push b
12123  5100 07 31 13      call puts
12124  5103 51 02 00      add sp, 2
12125  5106 F9            leave
12126  5107 09            ret
12127  5108             
12128  5108             compute_vector:
12129  5108 F8 00 00      enter 0 ; (push bp; mov bp, sp)
12130  510B             ; $xl 
12131  510B             ; $al 
12132  510B 52 08 00      sub sp, 8
12133  510E             ;; puts("  DIRECTION = "); 
out/startrek.asm line 12134: Label not found: (__s147)
out/startrek.asm line 12134: Unused data in MS byte of argument. (2)
12134  510E 26 00 00      mov b, __s147 ; "  DIRECTION = "
12135  5111 FD AB         swp b
12136  5113 D8            push b
12137  5114 07 31 13      call puts
12138  5117 51 02 00      add sp, 2
12139  511A             ;; x = x - a; 
12140  511A FA 07 00      lea d, [bp + 7] ; $x
12141  511D DA            push d
12142  511E FA 07 00      lea d, [bp + 7] ; $x
12143  5121 2A            mov b, [d]
12144  5122             ; START TERMS
12145  5122 D7            push a
12146  5123 11            mov a, b
12147  5124 FA 0B 00      lea d, [bp + 11] ; $a
12148  5127 2A            mov b, [d]
12149  5128 60            sub a, b
12150  5129 27            mov b, a
12151  512A E4            pop a
12152  512B             ; END TERMS
12153  512B E7            pop d
12154  512C FD 43         mov [d], b
12155  512E             ;; a = c1 - w1; 
12156  512E FA 0B 00      lea d, [bp + 11] ; $a
12157  5131 DA            push d
12158  5132 FA 09 00      lea d, [bp + 9] ; $c1
12159  5135 2A            mov b, [d]
12160  5136             ; START TERMS
12161  5136 D7            push a
12162  5137 11            mov a, b
12163  5138 FA 05 00      lea d, [bp + 5] ; $w1
12164  513B 2A            mov b, [d]
12165  513C 60            sub a, b
12166  513D 27            mov b, a
12167  513E E4            pop a
12168  513F             ; END TERMS
12169  513F E7            pop d
12170  5140 FD 43         mov [d], b
12171  5142             ;; xl = abs(x); 
12172  5142 FA FD FF      lea d, [bp + -3] ; $xl
12173  5145 DA            push d
12174  5146 FA 07 00      lea d, [bp + 7] ; $x
12175  5149 2A            mov b, [d]
12176  514A FD AB         swp b
12177  514C D8            push b
12178  514D 07 7D 13      call abs
12179  5150 51 02 00      add sp, 2
12180  5153 E7            pop d
12181  5154 FD 43         mov [d], b
12182  5156 28            mov b, c
12183  5157 FD 44 02 00   mov [d + 2], b
12184  515B             ;; al = abs(a); 
12185  515B FA F9 FF      lea d, [bp + -7] ; $al
12186  515E DA            push d
12187  515F FA 0B 00      lea d, [bp + 11] ; $a
12188  5162 2A            mov b, [d]
12189  5163 FD AB         swp b
12190  5165 D8            push b
12191  5166 07 7D 13      call abs
12192  5169 51 02 00      add sp, 2
12193  516C E7            pop d
12194  516D FD 43         mov [d], b
12195  516F 28            mov b, c
12196  5170 FD 44 02 00   mov [d + 2], b
12197  5174             ;; if (x < 0) { 
12198  5174             _if196_cond:
12199  5174 FA 07 00      lea d, [bp + 7] ; $x
12200  5177 2A            mov b, [d]
12201  5178             ; START RELATIONAL
12202  5178 D7            push a
12203  5179 11            mov a, b
12204  517A 26 00 00      mov b, $0
12205  517D B0            cmp a, b
12206  517E FD 73         slt ; < (signed)
12207  5180 E4            pop a
12208  5181             ; END RELATIONAL
12209  5181 C0 00 00      cmp b, 0
12210  5184 C6 E1 52      je _if196_else
12211  5187             _if196_true:
12212  5187             ;; if (a > 0) { 
12213  5187             _if197_cond:
12214  5187 FA 0B 00      lea d, [bp + 11] ; $a
12215  518A 2A            mov b, [d]
12216  518B             ; START RELATIONAL
12217  518B D7            push a
12218  518C 11            mov a, b
12219  518D 26 00 00      mov b, $0
12220  5190 B0            cmp a, b
12221  5191 FD 7F         sgt ; >
12222  5193 E4            pop a
12223  5194             ; END RELATIONAL
12224  5194 C0 00 00      cmp b, 0
12225  5197 C6 B2 52      je _if197_else
12226  519A             _if197_true:
12227  519A             ;; c1 = 300; 
12228  519A FA 09 00      lea d, [bp + 9] ; $c1
12229  519D DA            push d
12230  519E 26 2C 01      mov b, $12c
12231  51A1 E7            pop d
12232  51A2 FD 43         mov [d], b
12233  51A4             ;; if (al >= xl) 
12234  51A4             _if198_cond:
12235  51A4 FA F9 FF      lea d, [bp + -7] ; $al
12236  51A7 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12237  51AA FD 39         mov c, b ; And place it into C
12238  51AC 2A            mov b, [d] ; Lower Word in B
12239  51AD             ; START RELATIONAL
12240  51AD D7            push a
12241  51AE FD D8         push g
12242  51B0 11            mov a, b
12243  51B1 FD 7A         mov g, c
12244  51B3 FA FD FF      lea d, [bp + -3] ; $xl
12245  51B6 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12246  51B9 FD 39         mov c, b ; And place it into C
12247  51BB 2A            mov b, [d] ; Lower Word in B
12248  51BC FD 82         sgeu
12249  51BE FD F1         pop g
12250  51C0 E4            pop a
12251  51C1             ; END RELATIONAL
12252  51C1 C0 00 00      cmp b, 0
12253  51C4 C6 11 52      je _if198_else
12254  51C7             _if198_true:
12255  51C7             ;; printf("%s", print100(c1 + ((xl * 100) / al))); 
12256  51C7 FA 09 00      lea d, [bp + 9] ; $c1
12257  51CA 2A            mov b, [d]
12258  51CB             ; START TERMS
12259  51CB D7            push a
12260  51CC 11            mov a, b
12261  51CD FA FD FF      lea d, [bp + -3] ; $xl
12262  51D0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12263  51D3 FD 39         mov c, b ; And place it into C
12264  51D5 2A            mov b, [d] ; Lower Word in B
12265  51D6             ; START FACTORS
12266  51D6 D7            push a
12267  51D7 11            mov a, b
12268  51D8 26 64 00      mov b, $64
12269  51DB AC            mul a, b ; *
12270  51DC 11            mov a, b
12271  51DD 27            mov b, a
12272  51DE E4            pop a
12273  51DF             ; END FACTORS
12274  51DF             ; START FACTORS
12275  51DF D7            push a
12276  51E0 11            mov a, b
12277  51E1 FA F9 FF      lea d, [bp + -7] ; $al
12278  51E4 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12279  51E7 FD 39         mov c, b ; And place it into C
12280  51E9 2A            mov b, [d] ; Lower Word in B
12281  51EA AE            div a, b
12282  51EB 27            mov b, a
12283  51EC E4            pop a
12284  51ED             ; END FACTORS
12285  51ED 54            add a, b
12286  51EE D7            push a
12287  51EF FD 12         mov a, g
12288  51F1 28            mov b, c
12289  51F2 5C            adc a, b
12290  51F3 39            mov c, a
12291  51F4 E5            pop b
12292  51F5 E4            pop a
12293  51F6             ; END TERMS
12294  51F6 FD AB         swp b
12295  51F8 D8            push b
12296  51F9 07 FC 1F      call print100
12297  51FC 51 02 00      add sp, 2
12298  51FF FD AB         swp b
12299  5201 D8            push b
out/startrek.asm line 12300: Label not found: (__s148)
out/startrek.asm line 12300: Unused data in MS byte of argument. (2)
12300  5202 26 00 00      mov b, __s148 ; "%s"
12301  5205 FD AB         swp b
12302  5207 D8            push b
12303  5208 07 D1 05      call printf
12304  520B 51 04 00      add sp, 4
12305  520E 0A 75 52      jmp _if198_exit
12306  5211             _if198_else:
12307  5211             ;; printf("%s", print100(c1 + ((((xl * 2) - al) * 100)  / xl))); 
12308  5211 FA 09 00      lea d, [bp + 9] ; $c1
12309  5214 2A            mov b, [d]
12310  5215             ; START TERMS
12311  5215 D7            push a
12312  5216 11            mov a, b
12313  5217 FA FD FF      lea d, [bp + -3] ; $xl
12314  521A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12315  521D FD 39         mov c, b ; And place it into C
12316  521F 2A            mov b, [d] ; Lower Word in B
12317  5220             ; START FACTORS
12318  5220 D7            push a
12319  5221 11            mov a, b
12320  5222 26 02 00      mov b, $2
12321  5225 AC            mul a, b ; *
12322  5226 11            mov a, b
12323  5227 27            mov b, a
12324  5228 E4            pop a
12325  5229             ; END FACTORS
12326  5229             ; START TERMS
12327  5229 D7            push a
12328  522A FD D8         push g
12329  522C 11            mov a, b
12330  522D FD 7A         mov g, c
12331  522F FA F9 FF      lea d, [bp + -7] ; $al
12332  5232 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12333  5235 FD 39         mov c, b ; And place it into C
12334  5237 2A            mov b, [d] ; Lower Word in B
12335  5238 60            sub a, b
12336  5239 27            mov b, a
12337  523A FD F1         pop g
12338  523C E4            pop a
12339  523D             ; END TERMS
12340  523D             ; START FACTORS
12341  523D D7            push a
12342  523E 11            mov a, b
12343  523F 26 64 00      mov b, $64
12344  5242 AC            mul a, b ; *
12345  5243 11            mov a, b
12346  5244 27            mov b, a
12347  5245 E4            pop a
12348  5246             ; END FACTORS
12349  5246             ; START FACTORS
12350  5246 D7            push a
12351  5247 11            mov a, b
12352  5248 FA FD FF      lea d, [bp + -3] ; $xl
12353  524B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12354  524E FD 39         mov c, b ; And place it into C
12355  5250 2A            mov b, [d] ; Lower Word in B
12356  5251 AE            div a, b
12357  5252 27            mov b, a
12358  5253 E4            pop a
12359  5254             ; END FACTORS
12360  5254 54            add a, b
12361  5255 D7            push a
12362  5256 FD 12         mov a, g
12363  5258 28            mov b, c
12364  5259 5C            adc a, b
12365  525A 39            mov c, a
12366  525B E5            pop b
12367  525C E4            pop a
12368  525D             ; END TERMS
12369  525D FD AB         swp b
12370  525F D8            push b
12371  5260 07 FC 1F      call print100
12372  5263 51 02 00      add sp, 2
12373  5266 FD AB         swp b
12374  5268 D8            push b
out/startrek.asm line 12375: Label not found: (__s148)
out/startrek.asm line 12375: Unused data in MS byte of argument. (2)
12375  5269 26 00 00      mov b, __s148 ; "%s"
12376  526C FD AB         swp b
12377  526E D8            push b
12378  526F 07 D1 05      call printf
12379  5272 51 04 00      add sp, 4
12380  5275             _if198_exit:
12381  5275             ;; printf(dist_1, print100((x > a) ? x : a)); 
12382  5275             _ternary202_cond:
12383  5275 FA 07 00      lea d, [bp + 7] ; $x
12384  5278 2A            mov b, [d]
12385  5279             ; START RELATIONAL
12386  5279 D7            push a
12387  527A 11            mov a, b
12388  527B FA 0B 00      lea d, [bp + 11] ; $a
12389  527E 2A            mov b, [d]
12390  527F B0            cmp a, b
12391  5280 FD 7F         sgt ; >
12392  5282 E4            pop a
12393  5283             ; END RELATIONAL
12394  5283 C0 00 00      cmp b, 0
12395  5286 C6 90 52      je _ternary202_false
12396  5289             _ternary202_true:
12397  5289 FA 07 00      lea d, [bp + 7] ; $x
12398  528C 2A            mov b, [d]
12399  528D 0A 94 52      jmp _ternary202_exit
12400  5290             _ternary202_false:
12401  5290 FA 0B 00      lea d, [bp + 11] ; $a
12402  5293 2A            mov b, [d]
12403  5294             _ternary202_exit:
12404  5294 FD AB         swp b
12405  5296 D8            push b
12406  5297 07 FC 1F      call print100
12407  529A 51 02 00      add sp, 2
12408  529D FD AB         swp b
12409  529F D8            push b
12410  52A0 3B D6 62      mov d, _dist_1 ; $dist_1
12411  52A3 2A            mov b, [d]
12412  52A4 FD AB         swp b
12413  52A6 D8            push b
12414  52A7 07 D1 05      call printf
12415  52AA 51 04 00      add sp, 4
12416  52AD             ;; return; 
12417  52AD F9            leave
12418  52AE 09            ret
12419  52AF 0A DE 52      jmp _if197_exit
12420  52B2             _if197_else:
12421  52B2             ;; if (x != 0){ 
12422  52B2             _if203_cond:
12423  52B2 FA 07 00      lea d, [bp + 7] ; $x
12424  52B5 2A            mov b, [d]
12425  52B6             ; START RELATIONAL
12426  52B6 D7            push a
12427  52B7 11            mov a, b
12428  52B8 26 00 00      mov b, $0
12429  52BB B0            cmp a, b
12430  52BC FD 72         sneq ; !=
12431  52BE E4            pop a
12432  52BF             ; END RELATIONAL
12433  52BF C0 00 00      cmp b, 0
12434  52C2 C6 D4 52      je _if203_else
12435  52C5             _if203_true:
12436  52C5             ;; c1 = 500; 
12437  52C5 FA 09 00      lea d, [bp + 9] ; $c1
12438  52C8 DA            push d
12439  52C9 26 F4 01      mov b, $1f4
12440  52CC E7            pop d
12441  52CD FD 43         mov [d], b
12442  52CF             ;; return; 
12443  52CF F9            leave
12444  52D0 09            ret
12445  52D1 0A DE 52      jmp _if203_exit
12446  52D4             _if203_else:
12447  52D4             ;; c1 = 700; 
12448  52D4 FA 09 00      lea d, [bp + 9] ; $c1
12449  52D7 DA            push d
12450  52D8 26 BC 02      mov b, $2bc
12451  52DB E7            pop d
12452  52DC FD 43         mov [d], b
12453  52DE             _if203_exit:
12454  52DE             _if197_exit:
12455  52DE 0A 6D 54      jmp _if196_exit
12456  52E1             _if196_else:
12457  52E1             ;; if (a < 0) { 
12458  52E1             _if204_cond:
12459  52E1 FA 0B 00      lea d, [bp + 11] ; $a
12460  52E4 2A            mov b, [d]
12461  52E5             ; START RELATIONAL
12462  52E5 D7            push a
12463  52E6 11            mov a, b
12464  52E7 26 00 00      mov b, $0
12465  52EA B0            cmp a, b
12466  52EB FD 73         slt ; < (signed)
12467  52ED E4            pop a
12468  52EE             ; END RELATIONAL
12469  52EE C0 00 00      cmp b, 0
12470  52F1 C6 01 53      je _if204_else
12471  52F4             _if204_true:
12472  52F4             ;; c1 = 700; 
12473  52F4 FA 09 00      lea d, [bp + 9] ; $c1
12474  52F7 DA            push d
12475  52F8 26 BC 02      mov b, $2bc
12476  52FB E7            pop d
12477  52FC FD 43         mov [d], b
12478  52FE 0A 6D 54      jmp _if204_exit
12479  5301             _if204_else:
12480  5301             ;; if (x > 0) { 
12481  5301             _if205_cond:
12482  5301 FA 07 00      lea d, [bp + 7] ; $x
12483  5304 2A            mov b, [d]
12484  5305             ; START RELATIONAL
12485  5305 D7            push a
12486  5306 11            mov a, b
12487  5307 26 00 00      mov b, $0
12488  530A B0            cmp a, b
12489  530B FD 7F         sgt ; >
12490  530D E4            pop a
12491  530E             ; END RELATIONAL
12492  530E C0 00 00      cmp b, 0
12493  5311 C6 21 53      je _if205_else
12494  5314             _if205_true:
12495  5314             ;; c1 = 100; 
12496  5314 FA 09 00      lea d, [bp + 9] ; $c1
12497  5317 DA            push d
12498  5318 26 64 00      mov b, $64
12499  531B E7            pop d
12500  531C FD 43         mov [d], b
12501  531E 0A 6D 54      jmp _if205_exit
12502  5321             _if205_else:
12503  5321             ;; if (a == 0) { 
12504  5321             _if206_cond:
12505  5321 FA 0B 00      lea d, [bp + 11] ; $a
12506  5324 2A            mov b, [d]
12507  5325             ; START RELATIONAL
12508  5325 D7            push a
12509  5326 11            mov a, b
12510  5327 26 00 00      mov b, $0
12511  532A B0            cmp a, b
12512  532B FD 71         seq ; ==
12513  532D E4            pop a
12514  532E             ; END RELATIONAL
12515  532E C0 00 00      cmp b, 0
12516  5331 C6 41 53      je _if206_else
12517  5334             _if206_true:
12518  5334             ;; c1 = 500; 
12519  5334 FA 09 00      lea d, [bp + 9] ; $c1
12520  5337 DA            push d
12521  5338 26 F4 01      mov b, $1f4
12522  533B E7            pop d
12523  533C FD 43         mov [d], b
12524  533E 0A 6D 54      jmp _if206_exit
12525  5341             _if206_else:
12526  5341             ;; c1 = 100; 
12527  5341 FA 09 00      lea d, [bp + 9] ; $c1
12528  5344 DA            push d
12529  5345 26 64 00      mov b, $64
12530  5348 E7            pop d
12531  5349 FD 43         mov [d], b
12532  534B             ;; if (al <= xl) 
12533  534B             _if207_cond:
12534  534B FA F9 FF      lea d, [bp + -7] ; $al
12535  534E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12536  5351 FD 39         mov c, b ; And place it into C
12537  5353 2A            mov b, [d] ; Lower Word in B
12538  5354             ; START RELATIONAL
12539  5354 D7            push a
12540  5355 FD D8         push g
12541  5357 11            mov a, b
12542  5358 FD 7A         mov g, c
12543  535A FA FD FF      lea d, [bp + -3] ; $xl
12544  535D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12545  5360 FD 39         mov c, b ; And place it into C
12546  5362 2A            mov b, [d] ; Lower Word in B
12547  5363 FD 76         sleu
12548  5365 FD F1         pop g
12549  5367 E4            pop a
12550  5368             ; END RELATIONAL
12551  5368 C0 00 00      cmp b, 0
12552  536B C6 B8 53      je _if207_else
12553  536E             _if207_true:
12554  536E             ;; printf("%s", print100(c1 + ((al * 100) / xl))); 
12555  536E FA 09 00      lea d, [bp + 9] ; $c1
12556  5371 2A            mov b, [d]
12557  5372             ; START TERMS
12558  5372 D7            push a
12559  5373 11            mov a, b
12560  5374 FA F9 FF      lea d, [bp + -7] ; $al
12561  5377 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12562  537A FD 39         mov c, b ; And place it into C
12563  537C 2A            mov b, [d] ; Lower Word in B
12564  537D             ; START FACTORS
12565  537D D7            push a
12566  537E 11            mov a, b
12567  537F 26 64 00      mov b, $64
12568  5382 AC            mul a, b ; *
12569  5383 11            mov a, b
12570  5384 27            mov b, a
12571  5385 E4            pop a
12572  5386             ; END FACTORS
12573  5386             ; START FACTORS
12574  5386 D7            push a
12575  5387 11            mov a, b
12576  5388 FA FD FF      lea d, [bp + -3] ; $xl
12577  538B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12578  538E FD 39         mov c, b ; And place it into C
12579  5390 2A            mov b, [d] ; Lower Word in B
12580  5391 AE            div a, b
12581  5392 27            mov b, a
12582  5393 E4            pop a
12583  5394             ; END FACTORS
12584  5394 54            add a, b
12585  5395 D7            push a
12586  5396 FD 12         mov a, g
12587  5398 28            mov b, c
12588  5399 5C            adc a, b
12589  539A 39            mov c, a
12590  539B E5            pop b
12591  539C E4            pop a
12592  539D             ; END TERMS
12593  539D FD AB         swp b
12594  539F D8            push b
12595  53A0 07 FC 1F      call print100
12596  53A3 51 02 00      add sp, 2
12597  53A6 FD AB         swp b
12598  53A8 D8            push b
out/startrek.asm line 12599: Label not found: (__s148)
out/startrek.asm line 12599: Unused data in MS byte of argument. (2)
12599  53A9 26 00 00      mov b, __s148 ; "%s"
12600  53AC FD AB         swp b
12601  53AE D8            push b
12602  53AF 07 D1 05      call printf
12603  53B2 51 04 00      add sp, 4
12604  53B5 0A 1C 54      jmp _if207_exit
12605  53B8             _if207_else:
12606  53B8             ;; printf("%s", print100(c1 + ((((al * 2) - xl) * 100) / al))); 
12607  53B8 FA 09 00      lea d, [bp + 9] ; $c1
12608  53BB 2A            mov b, [d]
12609  53BC             ; START TERMS
12610  53BC D7            push a
12611  53BD 11            mov a, b
12612  53BE FA F9 FF      lea d, [bp + -7] ; $al
12613  53C1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12614  53C4 FD 39         mov c, b ; And place it into C
12615  53C6 2A            mov b, [d] ; Lower Word in B
12616  53C7             ; START FACTORS
12617  53C7 D7            push a
12618  53C8 11            mov a, b
12619  53C9 26 02 00      mov b, $2
12620  53CC AC            mul a, b ; *
12621  53CD 11            mov a, b
12622  53CE 27            mov b, a
12623  53CF E4            pop a
12624  53D0             ; END FACTORS
12625  53D0             ; START TERMS
12626  53D0 D7            push a
12627  53D1 FD D8         push g
12628  53D3 11            mov a, b
12629  53D4 FD 7A         mov g, c
12630  53D6 FA FD FF      lea d, [bp + -3] ; $xl
12631  53D9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12632  53DC FD 39         mov c, b ; And place it into C
12633  53DE 2A            mov b, [d] ; Lower Word in B
12634  53DF 60            sub a, b
12635  53E0 27            mov b, a
12636  53E1 FD F1         pop g
12637  53E3 E4            pop a
12638  53E4             ; END TERMS
12639  53E4             ; START FACTORS
12640  53E4 D7            push a
12641  53E5 11            mov a, b
12642  53E6 26 64 00      mov b, $64
12643  53E9 AC            mul a, b ; *
12644  53EA 11            mov a, b
12645  53EB 27            mov b, a
12646  53EC E4            pop a
12647  53ED             ; END FACTORS
12648  53ED             ; START FACTORS
12649  53ED D7            push a
12650  53EE 11            mov a, b
12651  53EF FA F9 FF      lea d, [bp + -7] ; $al
12652  53F2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12653  53F5 FD 39         mov c, b ; And place it into C
12654  53F7 2A            mov b, [d] ; Lower Word in B
12655  53F8 AE            div a, b
12656  53F9 27            mov b, a
12657  53FA E4            pop a
12658  53FB             ; END FACTORS
12659  53FB 54            add a, b
12660  53FC D7            push a
12661  53FD FD 12         mov a, g
12662  53FF 28            mov b, c
12663  5400 5C            adc a, b
12664  5401 39            mov c, a
12665  5402 E5            pop b
12666  5403 E4            pop a
12667  5404             ; END TERMS
12668  5404 FD AB         swp b
12669  5406 D8            push b
12670  5407 07 FC 1F      call print100
12671  540A 51 02 00      add sp, 2
12672  540D FD AB         swp b
12673  540F D8            push b
out/startrek.asm line 12674: Label not found: (__s148)
out/startrek.asm line 12674: Unused data in MS byte of argument. (2)
12674  5410 26 00 00      mov b, __s148 ; "%s"
12675  5413 FD AB         swp b
12676  5415 D8            push b
12677  5416 07 D1 05      call printf
12678  5419 51 04 00      add sp, 4
12679  541C             _if207_exit:
12680  541C             ;; printf(dist_1, print100((xl > al) ? xl : al)); 
12681  541C             _ternary211_cond:
12682  541C FA FD FF      lea d, [bp + -3] ; $xl
12683  541F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12684  5422 FD 39         mov c, b ; And place it into C
12685  5424 2A            mov b, [d] ; Lower Word in B
12686  5425             ; START RELATIONAL
12687  5425 D7            push a
12688  5426 FD D8         push g
12689  5428 11            mov a, b
12690  5429 FD 7A         mov g, c
12691  542B FA F9 FF      lea d, [bp + -7] ; $al
12692  542E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12693  5431 FD 39         mov c, b ; And place it into C
12694  5433 2A            mov b, [d] ; Lower Word in B
12695  5434 FD 81         sgu
12696  5436 FD F1         pop g
12697  5438 E4            pop a
12698  5439             ; END RELATIONAL
12699  5439 C0 00 00      cmp b, 0
12700  543C C6 4B 54      je _ternary211_false
12701  543F             _ternary211_true:
12702  543F FA FD FF      lea d, [bp + -3] ; $xl
12703  5442 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12704  5445 FD 39         mov c, b ; And place it into C
12705  5447 2A            mov b, [d] ; Lower Word in B
12706  5448 0A 54 54      jmp _ternary211_exit
12707  544B             _ternary211_false:
12708  544B FA F9 FF      lea d, [bp + -7] ; $al
12709  544E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12710  5451 FD 39         mov c, b ; And place it into C
12711  5453 2A            mov b, [d] ; Lower Word in B
12712  5454             _ternary211_exit:
12713  5454 FD AB         swp b
12714  5456 D8            push b
12715  5457 07 FC 1F      call print100
12716  545A 51 02 00      add sp, 2
12717  545D FD AB         swp b
12718  545F D8            push b
12719  5460 3B D6 62      mov d, _dist_1 ; $dist_1
12720  5463 2A            mov b, [d]
12721  5464 FD AB         swp b
12722  5466 D8            push b
12723  5467 07 D1 05      call printf
12724  546A 51 04 00      add sp, 4
12725  546D             _if206_exit:
12726  546D             _if205_exit:
12727  546D             _if204_exit:
12728  546D             _if196_exit:
12729  546D F9            leave
12730  546E 09            ret
12731  546F             
12732  546F             ship_destroyed:
12733  546F F8 00 00      enter 0 ; (push bp; mov bp, sp)
12734  5472             ;; puts("The Enterprise has been destroyed. The Federation will be conquered.\n"); 
out/startrek.asm line 12735: Label not found: (__s149)
out/startrek.asm line 12735: Unused data in MS byte of argument. (2)
12735  5472 26 00 00      mov b, __s149 ; "The Enterprise has been destroyed. The Federation will be conquered.\n"
12736  5475 FD AB         swp b
12737  5477 D8            push b
12738  5478 07 31 13      call puts
12739  547B 51 02 00      add sp, 2
12740  547E             ;; end_of_time(); 
12741  547E 07 83 54      call end_of_time
12742  5481 F9            leave
12743  5482 09            ret
12744  5483             
12745  5483             end_of_time:
12746  5483 F8 00 00      enter 0 ; (push bp; mov bp, sp)
12747  5486             ;; printf("It is stardate %d.\n\n",  FROM_FIXED(stardate)); 
12748  5486 3B 0E 61      mov d, _stardate ; $stardate
12749  5489 2A            mov b, [d]
12750  548A FD AB         swp b
12751  548C D8            push b
12752  548D 07 E8 1C      call FROM_FIXED
12753  5490 51 02 00      add sp, 2
12754  5493 FD AB         swp b
12755  5495 D8            push b
out/startrek.asm line 12756: Label not found: (__s150)
out/startrek.asm line 12756: Unused data in MS byte of argument. (2)
12756  5496 26 00 00      mov b, __s150 ; "It is stardate %d.\n\n"
12757  5499 FD AB         swp b
12758  549B D8            push b
12759  549C 07 D1 05      call printf
12760  549F 51 04 00      add sp, 4
12761  54A2             ;; resign_commision(); 
12762  54A2 07 A7 54      call resign_commision
12763  54A5 F9            leave
12764  54A6 09            ret
12765  54A7             
12766  54A7             resign_commision:
12767  54A7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
12768  54AA             ;; printf("There were %d Klingon Battlecruisers left at the end of your mission.\n\n", klingons_left); 
12769  54AA 3B E8 60      mov d, _klingons_left ; $klingons_left
12770  54AD 32            mov bl, [d]
12771  54AE A7 00         mov bh, 0
12772  54B0 DD            push bl
out/startrek.asm line 12773: Label not found: (__s151)
out/startrek.asm line 12773: Unused data in MS byte of argument. (2)
12773  54B1 26 00 00      mov b, __s151 ; "There were %d Klingon Battlecruisers left at the end of your mission.\n\n"
12774  54B4 FD AB         swp b
12775  54B6 D8            push b
12776  54B7 07 D1 05      call printf
12777  54BA 51 03 00      add sp, 3
12778  54BD             ;; end_of_game(); 
12779  54BD 07 49 55      call end_of_game
12780  54C0 F9            leave
12781  54C1 09            ret
12782  54C2             
12783  54C2             won_game:
12784  54C2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
12785  54C5             ;; puts("Congratulations, Captain!  The last Klingon Battle Cruiser\n menacing the Federation has been destoyed.\n"); 
out/startrek.asm line 12786: Label not found: (__s152)
out/startrek.asm line 12786: Unused data in MS byte of argument. (2)
12786  54C5 26 00 00      mov b, __s152 ; "Congratulations, Captain!  The last Klingon Battle Cruiser\n menacing the Federation has been destoyed.\n"
12787  54C8 FD AB         swp b
12788  54CA D8            push b
12789  54CB 07 31 13      call puts
12790  54CE 51 02 00      add sp, 2
12791  54D1             ;; if (FROM_FIXED(stardate) - time_start > 0) 
12792  54D1             _if212_cond:
12793  54D1 3B 0E 61      mov d, _stardate ; $stardate
12794  54D4 2A            mov b, [d]
12795  54D5 FD AB         swp b
12796  54D7 D8            push b
12797  54D8 07 E8 1C      call FROM_FIXED
12798  54DB 51 02 00      add sp, 2
12799  54DE             ; START TERMS
12800  54DE D7            push a
12801  54DF 11            mov a, b
12802  54E0 3B F2 60      mov d, _time_start ; $time_start
12803  54E3 2A            mov b, [d]
12804  54E4 60            sub a, b
12805  54E5 27            mov b, a
12806  54E6 E4            pop a
12807  54E7             ; END TERMS
12808  54E7             ; START RELATIONAL
12809  54E7 D7            push a
12810  54E8 11            mov a, b
12811  54E9 26 00 00      mov b, $0
12812  54EC B0            cmp a, b
12813  54ED FD 81         sgu ; > (unsigned)
12814  54EF E4            pop a
12815  54F0             ; END RELATIONAL
12816  54F0 C0 00 00      cmp b, 0
12817  54F3 C6 44 55      je _if212_exit
12818  54F6             _if212_true:
12819  54F6             ;; printf("Your efficiency rating is %s\n", 
12820  54F6 3B E7 60      mov d, _total_klingons ; $total_klingons
12821  54F9 32            mov bl, [d]
12822  54FA A7 00         mov bh, 0
12823  54FC FD AB         swp b
12824  54FE D8            push b
12825  54FF 07 F9 1C      call TO_FIXED00
12826  5502 51 02 00      add sp, 2
12827  5505             ; START FACTORS
12828  5505 D7            push a
12829  5506 11            mov a, b
12830  5507 3B 0E 61      mov d, _stardate ; $stardate
12831  550A 2A            mov b, [d]
12832  550B FD AB         swp b
12833  550D D8            push b
12834  550E 07 E8 1C      call FROM_FIXED
12835  5511 51 02 00      add sp, 2
12836  5514             ; START TERMS
12837  5514 D7            push a
12838  5515 11            mov a, b
12839  5516 3B F2 60      mov d, _time_start ; $time_start
12840  5519 2A            mov b, [d]
12841  551A 60            sub a, b
12842  551B 27            mov b, a
12843  551C E4            pop a
12844  551D             ; END TERMS
12845  551D AE            div a, b
12846  551E 27            mov b, a
12847  551F E4            pop a
12848  5520             ; END FACTORS
12849  5520 FD AB         swp b
12850  5522 D8            push b
12851  5523 07 E5 5E      call square00
12852  5526 51 02 00      add sp, 2
12853  5529 FD AB         swp b
12854  552B D8            push b
12855  552C 07 FC 1F      call print100
12856  552F 51 02 00      add sp, 2
12857  5532 FD AB         swp b
12858  5534 D8            push b
out/startrek.asm line 12859: Label not found: (__s153)
out/startrek.asm line 12859: Unused data in MS byte of argument. (2)
12859  5535 26 00 00      mov b, __s153 ; "Your efficiency rating is %s\n"
12860  5538 FD AB         swp b
12861  553A D8            push b
12862  553B 07 D1 05      call printf
12863  553E 51 04 00      add sp, 4
12864  5541 0A 44 55      jmp _if212_exit
12865  5544             _if212_exit:
12866  5544             ;; end_of_game(); 
12867  5544 07 49 55      call end_of_game
12868  5547 F9            leave
12869  5548 09            ret
12870  5549             
12871  5549             end_of_game:
12872  5549 F8 00 00      enter 0 ; (push bp; mov bp, sp)
12873  554C             ; $x 
12874  554C 52 04 00      sub sp, 4
12875  554F             ;; if (starbases_left > 0) { 
12876  554F             _if213_cond:
12877  554F 3B 13 60      mov d, _starbases_left ; $starbases_left
12878  5552 32            mov bl, [d]
12879  5553 A7 00         mov bh, 0
12880  5555             ; START RELATIONAL
12881  5555 D7            push a
12882  5556 11            mov a, b
12883  5557 26 00 00      mov b, $0
12884  555A B0            cmp a, b
12885  555B FD 7F         sgt ; >
12886  555D E4            pop a
12887  555E             ; END RELATIONAL
12888  555E C0 00 00      cmp b, 0
12889  5561 C6 D2 55      je _if213_exit
12890  5564             _if213_true:
12891  5564             ;; puts("The Federation is in need of a new starship commander"); 
out/startrek.asm line 12892: Label not found: (__s154)
out/startrek.asm line 12892: Unused data in MS byte of argument. (2)
12892  5564 26 00 00      mov b, __s154 ; "The Federation is in need of a new starship commander"
12893  5567 FD AB         swp b
12894  5569 D8            push b
12895  556A 07 31 13      call puts
12896  556D 51 02 00      add sp, 2
12897  5570             ;; puts(" for a similar mission.\n"); 
out/startrek.asm line 12898: Label not found: (__s155)
out/startrek.asm line 12898: Unused data in MS byte of argument. (2)
12898  5570 26 00 00      mov b, __s155 ; " for a similar mission.\n"
12899  5573 FD AB         swp b
12900  5575 D8            push b
12901  5576 07 31 13      call puts
12902  5579 51 02 00      add sp, 2
12903  557C             ;; puts("If there is a volunteer, let him step forward and"); 
out/startrek.asm line 12904: Label not found: (__s156)
out/startrek.asm line 12904: Unused data in MS byte of argument. (2)
12904  557C 26 00 00      mov b, __s156 ; "If there is a volunteer, let him step forward and"
12905  557F FD AB         swp b
12906  5581 D8            push b
12907  5582 07 31 13      call puts
12908  5585 51 02 00      add sp, 2
12909  5588             ;; puts(" enter aye: "); 
out/startrek.asm line 12910: Label not found: (__s157)
out/startrek.asm line 12910: Unused data in MS byte of argument. (2)
12910  5588 26 00 00      mov b, __s157 ; " enter aye: "
12911  558B FD AB         swp b
12912  558D D8            push b
12913  558E 07 31 13      call puts
12914  5591 51 02 00      add sp, 2
12915  5594             ;; input(x,4); 
12916  5594 26 04 00      mov b, $4
12917  5597 DD            push bl
12918  5598 FA FD FF      lea d, [bp + -3] ; $x
12919  559B 2D            mov b, d
12920  559C FD AB         swp b
12921  559E D8            push b
12922  559F 07 7C 1D      call input
12923  55A2 51 03 00      add sp, 3
12924  55A5             ;; if (!strncmp(x, "aye", 3)) 
12925  55A5             _if214_cond:
12926  55A5 26 03 00      mov b, $3
12927  55A8 FD AB         swp b
12928  55AA D8            push b
out/startrek.asm line 12929: Label not found: (__s158)
out/startrek.asm line 12929: Unused data in MS byte of argument. (2)
12929  55AB 26 00 00      mov b, __s158 ; "aye"
12930  55AE FD AB         swp b
12931  55B0 D8            push b
12932  55B1 FA FD FF      lea d, [bp + -3] ; $x
12933  55B4 2D            mov b, d
12934  55B5 FD AB         swp b
12935  55B7 D8            push b
12936  55B8 07 D0 04      call strncmp
12937  55BB 51 06 00      add sp, 6
12938  55BE C0 00 00      cmp b, 0
12939  55C1 FD 71         seq ; !
12940  55C3 C0 00 00      cmp b, 0
12941  55C6 C6 CF 55      je _if214_exit
12942  55C9             _if214_true:
12943  55C9             ;; new_game(); 
12944  55C9 07 1C 21      call new_game
12945  55CC 0A CF 55      jmp _if214_exit
12946  55CF             _if214_exit:
12947  55CF 0A D2 55      jmp _if213_exit
12948  55D2             _if213_exit:
12949  55D2             ;; exit(); 
12950  55D2 07 2E 17      call exit
12951  55D5 F9            leave
12952  55D6 09            ret
12953  55D7             
12954  55D7             klingons_move:
12955  55D7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
12956  55DA             ; $i 
12957  55DA             ; $k 
12958  55DA 52 04 00      sub sp, 4
12959  55DD             ;; k = &kdata; 
12960  55DD FA FD FF      lea d, [bp + -3] ; $k
12961  55E0 DA            push d
12962  55E1 3B DA 60      mov d, _kdata_data ; $kdata
12963  55E4 2D            mov b, d
12964  55E5 E7            pop d
12965  55E6 FD 43         mov [d], b
12966  55E8             ;; for (i = 0; i <= 2; i++) { 
12967  55E8             _for215_init:
12968  55E8 FA FF FF      lea d, [bp + -1] ; $i
12969  55EB DA            push d
12970  55EC 26 00 00      mov b, $0
12971  55EF E7            pop d
12972  55F0 FD 43         mov [d], b
12973  55F2             _for215_cond:
12974  55F2 FA FF FF      lea d, [bp + -1] ; $i
12975  55F5 2A            mov b, [d]
12976  55F6             ; START RELATIONAL
12977  55F6 D7            push a
12978  55F7 11            mov a, b
12979  55F8 26 02 00      mov b, $2
12980  55FB B0            cmp a, b
12981  55FC FD 73         slt ; <= (signed)
12982  55FE E4            pop a
12983  55FF             ; END RELATIONAL
12984  55FF C0 00 00      cmp b, 0
12985  5602 C6 72 56      je _for215_exit
12986  5605             _for215_block:
12987  5605             ;; if (k->energy > 0) { 
12988  5605             _if216_cond:
12989  5605 FA FD FF      lea d, [bp + -3] ; $k
12990  5608 FD 2A         mov d, [d]
12991  560A 58 02 00      add d, 2
12992  560D 2A            mov b, [d]
12993  560E             ; START RELATIONAL
12994  560E D7            push a
12995  560F 11            mov a, b
12996  5610 26 00 00      mov b, $0
12997  5613 B0            cmp a, b
12998  5614 FD 7F         sgt ; >
12999  5616 E4            pop a
13000  5617             ; END RELATIONAL
13001  5617 C0 00 00      cmp b, 0
13002  561A C6 53 56      je _if216_exit
13003  561D             _if216_true:
13004  561D             ;; wipe_klingon(k); 
13005  561D FA FD FF      lea d, [bp + -3] ; $k
13006  5620 2A            mov b, [d]
13007  5621 FD AB         swp b
13008  5623 D8            push b
13009  5624 07 01 3B      call wipe_klingon
13010  5627 51 02 00      add sp, 2
13011  562A             ;; find_set_empty_place( 	3        , k->y, k->x); 
13012  562A FA FD FF      lea d, [bp + -3] ; $k
13013  562D FD 2A         mov d, [d]
13014  562F 58 01 00      add d, 1
13015  5632 32            mov bl, [d]
13016  5633 A7 00         mov bh, 0
13017  5635 FD AB         swp b
13018  5637 D8            push b
13019  5638 FA FD FF      lea d, [bp + -3] ; $k
13020  563B FD 2A         mov d, [d]
13021  563D 58 00 00      add d, 0
13022  5640 32            mov bl, [d]
13023  5641 A7 00         mov bh, 0
13024  5643 FD AB         swp b
13025  5645 D8            push b
13026  5646 26 03 00      mov b, $3
13027  5649 DD            push bl
13028  564A 07 FB 5B      call find_set_empty_place
13029  564D 51 05 00      add sp, 5
13030  5650 0A 53 56      jmp _if216_exit
13031  5653             _if216_exit:
13032  5653             ;; k++; 
13033  5653 FA FD FF      lea d, [bp + -3] ; $k
13034  5656 2A            mov b, [d]
13035  5657 D8            push b
13036  5658 FD 77         inc b
13037  565A FD 77         inc b
13038  565C FA FD FF      lea d, [bp + -3] ; $k
13039  565F FD 43         mov [d], b
13040  5661 E5            pop b
13041  5662             _for215_update:
13042  5662 FA FF FF      lea d, [bp + -1] ; $i
13043  5665 2A            mov b, [d]
13044  5666 D8            push b
13045  5667 FD 77         inc b
13046  5669 FA FF FF      lea d, [bp + -1] ; $i
13047  566C FD 43         mov [d], b
13048  566E E5            pop b
13049  566F 0A F2 55      jmp _for215_cond
13050  5672             _for215_exit:
13051  5672             ;; klingons_shoot(); 
13052  5672 07 77 56      call klingons_shoot
13053  5675 F9            leave
13054  5676 09            ret
13055  5677             
13056  5677             klingons_shoot:
13057  5677 F8 00 00      enter 0 ; (push bp; mov bp, sp)
13058  567A             ; $r 
13059  567A             ; $h 
13060  567A             ; $i 
13061  567A             ; $k 
13062  567A             ; $ratio 
13063  567A 52 0C 00      sub sp, 12
13064  567D             ;; k = &kdata; 
13065  567D FA F9 FF      lea d, [bp + -7] ; $k
13066  5680 DA            push d
13067  5681 3B DA 60      mov d, _kdata_data ; $kdata
13068  5684 2D            mov b, d
13069  5685 E7            pop d
13070  5686 FD 43         mov [d], b
13071  5688             ;; if (klingons <= 0) 
13072  5688             _if217_cond:
13073  5688 3B E6 60      mov d, _klingons ; $klingons
13074  568B 32            mov bl, [d]
13075  568C A7 00         mov bh, 0
13076  568E             ; START RELATIONAL
13077  568E D7            push a
13078  568F 11            mov a, b
13079  5690 26 00 00      mov b, $0
13080  5693 B0            cmp a, b
13081  5694 FD 75         slu ; <= (unsigned)
13082  5696 E4            pop a
13083  5697             ; END RELATIONAL
13084  5697 C0 00 00      cmp b, 0
13085  569A C6 A2 56      je _if217_exit
13086  569D             _if217_true:
13087  569D             ;; return; 
13088  569D F9            leave
13089  569E 09            ret
13090  569F 0A A2 56      jmp _if217_exit
13091  56A2             _if217_exit:
13092  56A2             ;; if (docked) { 
13093  56A2             _if218_cond:
13094  56A2 3B 33 60      mov d, _docked ; $docked
13095  56A5 32            mov bl, [d]
13096  56A6 A7 00         mov bh, 0
13097  56A8 C0 00 00      cmp b, 0
13098  56AB C6 BF 56      je _if218_exit
13099  56AE             _if218_true:
13100  56AE             ;; puts("Starbase shields protect the Enterprise\n"); 
out/startrek.asm line 13101: Label not found: (__s159)
out/startrek.asm line 13101: Unused data in MS byte of argument. (2)
13101  56AE 26 00 00      mov b, __s159 ; "Starbase shields protect the Enterprise\n"
13102  56B1 FD AB         swp b
13103  56B3 D8            push b
13104  56B4 07 31 13      call puts
13105  56B7 51 02 00      add sp, 2
13106  56BA             ;; return; 
13107  56BA F9            leave
13108  56BB 09            ret
13109  56BC 0A BF 56      jmp _if218_exit
13110  56BF             _if218_exit:
13111  56BF             ;; for (i = 0; i <= 2; i++) { 
13112  56BF             _for219_init:
13113  56BF FA FB FF      lea d, [bp + -5] ; $i
13114  56C2 DA            push d
13115  56C3 26 00 00      mov b, $0
13116  56C6 E7            pop d
13117  56C7 FD 3E         mov [d], bl
13118  56C9             _for219_cond:
13119  56C9 FA FB FF      lea d, [bp + -5] ; $i
13120  56CC 32            mov bl, [d]
13121  56CD A7 00         mov bh, 0
13122  56CF             ; START RELATIONAL
13123  56CF D7            push a
13124  56D0 11            mov a, b
13125  56D1 26 02 00      mov b, $2
13126  56D4 B0            cmp a, b
13127  56D5 FD 75         slu ; <= (unsigned)
13128  56D7 E4            pop a
13129  56D8             ; END RELATIONAL
13130  56D8 C0 00 00      cmp b, 0
13131  56DB C6 55 59      je _for219_exit
13132  56DE             _for219_block:
13133  56DE             ;; if (k->energy > 0) { 
13134  56DE             _if220_cond:
13135  56DE FA F9 FF      lea d, [bp + -7] ; $k
13136  56E1 FD 2A         mov d, [d]
13137  56E3 58 02 00      add d, 2
13138  56E6 2A            mov b, [d]
13139  56E7             ; START RELATIONAL
13140  56E7 D7            push a
13141  56E8 11            mov a, b
13142  56E9 26 00 00      mov b, $0
13143  56EC B0            cmp a, b
13144  56ED FD 7F         sgt ; >
13145  56EF E4            pop a
13146  56F0             ; END RELATIONAL
13147  56F0 C0 00 00      cmp b, 0
13148  56F3 C6 34 59      je _if220_exit
13149  56F6             _if220_true:
13150  56F6             ;; h = k->energy * (200UL + get_rand(100)); 
13151  56F6 FA FC FF      lea d, [bp + -4] ; $h
13152  56F9 DA            push d
13153  56FA FA F9 FF      lea d, [bp + -7] ; $k
13154  56FD FD 2A         mov d, [d]
13155  56FF 58 02 00      add d, 2
13156  5702 2A            mov b, [d]
13157  5703             ; START FACTORS
13158  5703 D7            push a
13159  5704 11            mov a, b
13160  5705 26 C8 00      mov b, 200
13161  5708 38 00 00      mov c, 0
13162  570B             ; START TERMS
13163  570B D7            push a
13164  570C FD D8         push g
13165  570E 11            mov a, b
13166  570F FD 7A         mov g, c
13167  5711 26 64 00      mov b, $64
13168  5714 FD AB         swp b
13169  5716 D8            push b
13170  5717 07 1C 1D      call get_rand
13171  571A 51 02 00      add sp, 2
13172  571D 54            add a, b
13173  571E D7            push a
13174  571F FD 12         mov a, g
13175  5721 28            mov b, c
13176  5722 5C            adc a, b
13177  5723 39            mov c, a
13178  5724 E5            pop b
13179  5725 FD F1         pop g
13180  5727 E4            pop a
13181  5728             ; END TERMS
13182  5728 AC            mul a, b ; *
13183  5729 11            mov a, b
13184  572A 27            mov b, a
13185  572B E4            pop a
13186  572C             ; END FACTORS
13187  572C E7            pop d
13188  572D FD 43         mov [d], b
13189  572F 28            mov b, c
13190  5730 FD 44 02 00   mov [d + 2], b
13191  5734             ;; h =h* 100;	/* Ready for division in fixed */ 
13192  5734 FA FC FF      lea d, [bp + -4] ; $h
13193  5737 DA            push d
13194  5738 FA FC FF      lea d, [bp + -4] ; $h
13195  573B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13196  573E FD 39         mov c, b ; And place it into C
13197  5740 2A            mov b, [d] ; Lower Word in B
13198  5741             ; START FACTORS
13199  5741 D7            push a
13200  5742 11            mov a, b
13201  5743 26 64 00      mov b, $64
13202  5746 AC            mul a, b ; *
13203  5747 11            mov a, b
13204  5748 27            mov b, a
13205  5749 E4            pop a
13206  574A             ; END FACTORS
13207  574A E7            pop d
13208  574B FD 43         mov [d], b
13209  574D 28            mov b, c
13210  574E FD 44 02 00   mov [d + 2], b
13211  5752             ;; h =h/ distance_to(k); 
13212  5752 FA FC FF      lea d, [bp + -4] ; $h
13213  5755 DA            push d
13214  5756 FA FC FF      lea d, [bp + -4] ; $h
13215  5759 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13216  575C FD 39         mov c, b ; And place it into C
13217  575E 2A            mov b, [d] ; Lower Word in B
13218  575F             ; START FACTORS
13219  575F D7            push a
13220  5760 11            mov a, b
13221  5761 FA F9 FF      lea d, [bp + -7] ; $k
13222  5764 2A            mov b, [d]
13223  5765 FD AB         swp b
13224  5767 D8            push b
13225  5768 07 5D 5F      call distance_to
13226  576B 51 02 00      add sp, 2
13227  576E AE            div a, b
13228  576F 27            mov b, a
13229  5770 E4            pop a
13230  5771             ; END FACTORS
13231  5771 E7            pop d
13232  5772 FD 43         mov [d], b
13233  5774 28            mov b, c
13234  5775 FD 44 02 00   mov [d + 2], b
13235  5779             ;; shield = shield - FROM_FIXED00(h); 
13236  5779 3B EF 60      mov d, _shield ; $shield
13237  577C DA            push d
13238  577D 3B EF 60      mov d, _shield ; $shield
13239  5780 2A            mov b, [d]
13240  5781             ; START TERMS
13241  5781 D7            push a
13242  5782 11            mov a, b
13243  5783 FA FC FF      lea d, [bp + -4] ; $h
13244  5786 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13245  5789 FD 39         mov c, b ; And place it into C
13246  578B 2A            mov b, [d] ; Lower Word in B
13247  578C FD AB         swp b
13248  578E D8            push b
13249  578F 07 0B 1D      call FROM_FIXED00
13250  5792 51 02 00      add sp, 2
13251  5795 60            sub a, b
13252  5796 27            mov b, a
13253  5797 E4            pop a
13254  5798             ; END TERMS
13255  5798 E7            pop d
13256  5799 FD 43         mov [d], b
13257  579B             ;; k->energy = (k->energy * 100) / (300 + get_rand(100)); 
13258  579B FA F9 FF      lea d, [bp + -7] ; $k
13259  579E FD 2A         mov d, [d]
13260  57A0 58 02 00      add d, 2
13261  57A3 DA            push d
13262  57A4 FA F9 FF      lea d, [bp + -7] ; $k
13263  57A7 FD 2A         mov d, [d]
13264  57A9 58 02 00      add d, 2
13265  57AC 2A            mov b, [d]
13266  57AD             ; START FACTORS
13267  57AD D7            push a
13268  57AE 11            mov a, b
13269  57AF 26 64 00      mov b, $64
13270  57B2 AC            mul a, b ; *
13271  57B3 11            mov a, b
13272  57B4 27            mov b, a
13273  57B5 E4            pop a
13274  57B6             ; END FACTORS
13275  57B6             ; START FACTORS
13276  57B6 D7            push a
13277  57B7 11            mov a, b
13278  57B8 26 2C 01      mov b, $12c
13279  57BB             ; START TERMS
13280  57BB D7            push a
13281  57BC 11            mov a, b
13282  57BD 26 64 00      mov b, $64
13283  57C0 FD AB         swp b
13284  57C2 D8            push b
13285  57C3 07 1C 1D      call get_rand
13286  57C6 51 02 00      add sp, 2
13287  57C9 56            add b, a
13288  57CA E4            pop a
13289  57CB             ; END TERMS
13290  57CB AE            div a, b
13291  57CC 27            mov b, a
13292  57CD E4            pop a
13293  57CE             ; END FACTORS
13294  57CE E7            pop d
13295  57CF FD 43         mov [d], b
13296  57D1             ;; printf("%d unit hit on Enterprise from sector %d, %d\n", (unsigned)FROM_FIXED00(h), k->y, k->x); 
13297  57D1 FA F9 FF      lea d, [bp + -7] ; $k
13298  57D4 FD 2A         mov d, [d]
13299  57D6 58 01 00      add d, 1
13300  57D9 32            mov bl, [d]
13301  57DA A7 00         mov bh, 0
13302  57DC DD            push bl
13303  57DD FA F9 FF      lea d, [bp + -7] ; $k
13304  57E0 FD 2A         mov d, [d]
13305  57E2 58 00 00      add d, 0
13306  57E5 32            mov bl, [d]
13307  57E6 A7 00         mov bh, 0
13308  57E8 DD            push bl
13309  57E9 FA FC FF      lea d, [bp + -4] ; $h
13310  57EC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13311  57EF FD 39         mov c, b ; And place it into C
13312  57F1 2A            mov b, [d] ; Lower Word in B
13313  57F2 FD AB         swp b
13314  57F4 D8            push b
out/startrek.asm line 13315: Label not found: (__s160)
out/startrek.asm line 13315: Unused data in MS byte of argument. (2)
13315  57F5 26 00 00      mov b, __s160 ; "%d unit hit on Enterprise from sector %d, %d\n"
13316  57F8 FD AB         swp b
13317  57FA D8            push b
13318  57FB 07 D1 05      call printf
13319  57FE 51 06 00      add sp, 6
13320  5801             ;; if (shield <= 0) { 
13321  5801             _if221_cond:
13322  5801 3B EF 60      mov d, _shield ; $shield
13323  5804 2A            mov b, [d]
13324  5805             ; START RELATIONAL
13325  5805 D7            push a
13326  5806 11            mov a, b
13327  5807 26 00 00      mov b, $0
13328  580A B0            cmp a, b
13329  580B FD 73         slt ; <= (signed)
13330  580D E4            pop a
13331  580E             ; END RELATIONAL
13332  580E C0 00 00      cmp b, 0
13333  5811 C6 24 58      je _if221_exit
13334  5814             _if221_true:
13335  5814             ;; putchar('\n'); 
13336  5814 26 0A 00      mov b, $a
13337  5817 DD            push bl
13338  5818 07 FB 12      call putchar
13339  581B 51 01 00      add sp, 1
13340  581E             ;; ship_destroyed(); 
13341  581E 07 6F 54      call ship_destroyed
13342  5821 0A 24 58      jmp _if221_exit
13343  5824             _if221_exit:
13344  5824             ;; printf("    <Shields down to %d units>\n\n", shield); 
13345  5824 3B EF 60      mov d, _shield ; $shield
13346  5827 2A            mov b, [d]
13347  5828 FD AB         swp b
13348  582A D8            push b
out/startrek.asm line 13349: Label not found: (__s161)
out/startrek.asm line 13349: Unused data in MS byte of argument. (2)
13349  582B 26 00 00      mov b, __s161 ; "    <Shields down to %d units>\n\n"
13350  582E FD AB         swp b
13351  5830 D8            push b
13352  5831 07 D1 05      call printf
13353  5834 51 04 00      add sp, 4
13354  5837             ;; if (h >= 20) { 
13355  5837             _if222_cond:
13356  5837 FA FC FF      lea d, [bp + -4] ; $h
13357  583A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13358  583D FD 39         mov c, b ; And place it into C
13359  583F 2A            mov b, [d] ; Lower Word in B
13360  5840             ; START RELATIONAL
13361  5840 D7            push a
13362  5841 FD D8         push g
13363  5843 11            mov a, b
13364  5844 FD 7A         mov g, c
13365  5846 26 14 00      mov b, $14
13366  5849 38 00 00      mov c, 0
13367  584C FD 82         sgeu
13368  584E FD F1         pop g
13369  5850 E4            pop a
13370  5851             ; END RELATIONAL
13371  5851 C0 00 00      cmp b, 0
13372  5854 C6 31 59      je _if222_exit
13373  5857             _if222_true:
13374  5857             ;; ratio = ((int)h)/shield; 
13375  5857 FA F5 FF      lea d, [bp + -11] ; $ratio
13376  585A DA            push d
13377  585B FA FC FF      lea d, [bp + -4] ; $h
13378  585E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13379  5861 FD 39         mov c, b ; And place it into C
13380  5863 2A            mov b, [d] ; Lower Word in B
13381  5864             ; START FACTORS
13382  5864 D7            push a
13383  5865 11            mov a, b
13384  5866 3B EF 60      mov d, _shield ; $shield
13385  5869 2A            mov b, [d]
13386  586A AE            div a, b
13387  586B 27            mov b, a
13388  586C E4            pop a
13389  586D             ; END FACTORS
13390  586D E7            pop d
13391  586E FD 43         mov [d], b
13392  5870 28            mov b, c
13393  5871 FD 44 02 00   mov [d + 2], b
13394  5875             ;; if (get_rand(10) <= 6 && ratio > 2) { 
13395  5875             _if223_cond:
13396  5875 26 0A 00      mov b, $a
13397  5878 FD AB         swp b
13398  587A D8            push b
13399  587B 07 1C 1D      call get_rand
13400  587E 51 02 00      add sp, 2
13401  5881             ; START RELATIONAL
13402  5881 D7            push a
13403  5882 11            mov a, b
13404  5883 26 06 00      mov b, $6
13405  5886 B0            cmp a, b
13406  5887 FD 73         slt ; <= (signed)
13407  5889 E4            pop a
13408  588A             ; END RELATIONAL
13409  588A D7            push a
13410  588B 11            mov a, b
13411  588C FA F5 FF      lea d, [bp + -11] ; $ratio
13412  588F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13413  5892 FD 39         mov c, b ; And place it into C
13414  5894 2A            mov b, [d] ; Lower Word in B
13415  5895             ; START RELATIONAL
13416  5895 D7            push a
13417  5896 FD D8         push g
13418  5898 11            mov a, b
13419  5899 FD 7A         mov g, c
13420  589B 26 02 00      mov b, $2
13421  589E 38 00 00      mov c, 0
13422  58A1 FD 81         sgu
13423  58A3 FD F1         pop g
13424  58A5 E4            pop a
13425  58A6             ; END RELATIONAL
13426  58A6 FD 22 00 00   mov g, 0
13427  58AA FD B1 00 00   sand32 ga, cb
13427  58AE 00 00 
13428  58B0 E4            pop a
13429  58B1 C0 00 00      cmp b, 0
13430  58B4 C6 2E 59      je _if223_exit
13431  58B7             _if223_true:
13432  58B7             ;; r = rand8(); 
13433  58B7 FA 00 00      lea d, [bp + 0] ; $r
13434  58BA DA            push d
13435  58BB 07 6B 1D      call rand8
13436  58BE E7            pop d
13437  58BF FD 3E         mov [d], bl
13438  58C1             ;; damage[r] =damage[r] - ratio + get_rand(50); 
13439  58C1 3B F6 60      mov d, _damage_data ; $damage
13440  58C4 D7            push a
13441  58C5 DA            push d
13442  58C6 FA 00 00      lea d, [bp + 0] ; $r
13443  58C9 32            mov bl, [d]
13444  58CA A7 00         mov bh, 0
13445  58CC E7            pop d
13446  58CD FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13447  58D1 E4            pop a
13448  58D2 DA            push d
13449  58D3 3B F6 60      mov d, _damage_data ; $damage
13450  58D6 D7            push a
13451  58D7 DA            push d
13452  58D8 FA 00 00      lea d, [bp + 0] ; $r
13453  58DB 32            mov bl, [d]
13454  58DC A7 00         mov bh, 0
13455  58DE E7            pop d
13456  58DF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13457  58E3 E4            pop a
13458  58E4 2A            mov b, [d]
13459  58E5             ; START TERMS
13460  58E5 D7            push a
13461  58E6 11            mov a, b
13462  58E7 FA F5 FF      lea d, [bp + -11] ; $ratio
13463  58EA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13464  58ED FD 39         mov c, b ; And place it into C
13465  58EF 2A            mov b, [d] ; Lower Word in B
13466  58F0 60            sub a, b
13467  58F1 27            mov b, a
13468  58F2 11            mov a, b
13469  58F3 FD 7A         mov g, c
13470  58F5 26 32 00      mov b, $32
13471  58F8 FD AB         swp b
13472  58FA D8            push b
13473  58FB 07 1C 1D      call get_rand
13474  58FE 51 02 00      add sp, 2
13475  5901 54            add a, b
13476  5902 D7            push a
13477  5903 FD 12         mov a, g
13478  5905 28            mov b, c
13479  5906 5C            adc a, b
13480  5907 39            mov c, a
13481  5908 E5            pop b
13482  5909 E4            pop a
13483  590A             ; END TERMS
13484  590A E7            pop d
13485  590B FD 43         mov [d], b
13486  590D             ;; printf("Damage Control reports\n%s damaged by hit\n\n", get_device_name(r)); 
13487  590D FA 00 00      lea d, [bp + 0] ; $r
13488  5910 32            mov bl, [d]
13489  5911 A7 00         mov bh, 0
13490  5913 FD AB         swp b
13491  5915 D8            push b
13492  5916 07 B9 5C      call get_device_name
13493  5919 51 02 00      add sp, 2
13494  591C FD AB         swp b
13495  591E D8            push b
out/startrek.asm line 13496: Label not found: (__s162)
out/startrek.asm line 13496: Unused data in MS byte of argument. (2)
13496  591F 26 00 00      mov b, __s162 ; "Damage Control reports\n%s damaged by hit\n\n"
13497  5922 FD AB         swp b
13498  5924 D8            push b
13499  5925 07 D1 05      call printf
13500  5928 51 04 00      add sp, 4
13501  592B 0A 2E 59      jmp _if223_exit
13502  592E             _if223_exit:
13503  592E 0A 31 59      jmp _if222_exit
13504  5931             _if222_exit:
13505  5931 0A 34 59      jmp _if220_exit
13506  5934             _if220_exit:
13507  5934             ;; k++; 
13508  5934 FA F9 FF      lea d, [bp + -7] ; $k
13509  5937 2A            mov b, [d]
13510  5938 D8            push b
13511  5939 FD 77         inc b
13512  593B FD 77         inc b
13513  593D FA F9 FF      lea d, [bp + -7] ; $k
13514  5940 FD 43         mov [d], b
13515  5942 E5            pop b
13516  5943             _for219_update:
13517  5943 FA FB FF      lea d, [bp + -5] ; $i
13518  5946 32            mov bl, [d]
13519  5947 A7 00         mov bh, 0
13520  5949 D8            push b
13521  594A FD 77         inc b
13522  594C FA FB FF      lea d, [bp + -5] ; $i
13523  594F FD 43         mov [d], b
13524  5951 E5            pop b
13525  5952 0A C9 56      jmp _for219_cond
13526  5955             _for219_exit:
13527  5955 F9            leave
13528  5956 09            ret
13529  5957             
13530  5957             repair_damage:
13531  5957 F8 00 00      enter 0 ; (push bp; mov bp, sp)
13532  595A             ; $i 
13533  595A             ; $d1 
13534  595A             ; $repair_factor 
13535  595A             ; $r 
13536  595A 52 07 00      sub sp, 7
13537  595D             ;; repair_factor = warp; 
13538  595D FA FB FF      lea d, [bp + -5] ; $repair_factor
13539  5960 DA            push d
13540  5961 FA 05 00      lea d, [bp + 5] ; $warp
13541  5964 2A            mov b, [d]
13542  5965 E7            pop d
13543  5966 FD 43         mov [d], b
13544  5968             ;; if (warp >= 100) 
13545  5968             _if224_cond:
13546  5968 FA 05 00      lea d, [bp + 5] ; $warp
13547  596B 2A            mov b, [d]
13548  596C             ; START RELATIONAL
13549  596C D7            push a
13550  596D 11            mov a, b
13551  596E 26 64 00      mov b, $64
13552  5971 B0            cmp a, b
13553  5972 FD 82         sgeu ; >= (unsigned)
13554  5974 E4            pop a
13555  5975             ; END RELATIONAL
13556  5975 C0 00 00      cmp b, 0
13557  5978 C6 91 59      je _if224_exit
13558  597B             _if224_true:
13559  597B             ;; repair_factor = TO_FIXED00(1); 
13560  597B FA FB FF      lea d, [bp + -5] ; $repair_factor
13561  597E DA            push d
13562  597F 26 01 00      mov b, $1
13563  5982 FD AB         swp b
13564  5984 D8            push b
13565  5985 07 F9 1C      call TO_FIXED00
13566  5988 51 02 00      add sp, 2
13567  598B E7            pop d
13568  598C FD 43         mov [d], b
13569  598E 0A 91 59      jmp _if224_exit
13570  5991             _if224_exit:
13571  5991             ;; for (i = 1; i <= 8; i++) { 
13572  5991             _for225_init:
13573  5991 FA FF FF      lea d, [bp + -1] ; $i
13574  5994 DA            push d
13575  5995 26 01 00      mov b, $1
13576  5998 E7            pop d
13577  5999 FD 43         mov [d], b
13578  599B             _for225_cond:
13579  599B FA FF FF      lea d, [bp + -1] ; $i
13580  599E 2A            mov b, [d]
13581  599F             ; START RELATIONAL
13582  599F D7            push a
13583  59A0 11            mov a, b
13584  59A1 26 08 00      mov b, $8
13585  59A4 B0            cmp a, b
13586  59A5 FD 73         slt ; <= (signed)
13587  59A7 E4            pop a
13588  59A8             ; END RELATIONAL
13589  59A8 C0 00 00      cmp b, 0
13590  59AB C6 E2 5A      je _for225_exit
13591  59AE             _for225_block:
13592  59AE             ;; if (damage[i] < 0) { 
13593  59AE             _if226_cond:
13594  59AE 3B F6 60      mov d, _damage_data ; $damage
13595  59B1 D7            push a
13596  59B2 DA            push d
13597  59B3 FA FF FF      lea d, [bp + -1] ; $i
13598  59B6 2A            mov b, [d]
13599  59B7 E7            pop d
13600  59B8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13601  59BC E4            pop a
13602  59BD 2A            mov b, [d]
13603  59BE             ; START RELATIONAL
13604  59BE D7            push a
13605  59BF 11            mov a, b
13606  59C0 26 00 00      mov b, $0
13607  59C3 B0            cmp a, b
13608  59C4 FD 73         slt ; < (signed)
13609  59C6 E4            pop a
13610  59C7             ; END RELATIONAL
13611  59C7 C0 00 00      cmp b, 0
13612  59CA C6 D2 5A      je _if226_exit
13613  59CD             _if226_true:
13614  59CD             ;; damage[i] = damage[i] + repair_factor; 
13615  59CD 3B F6 60      mov d, _damage_data ; $damage
13616  59D0 D7            push a
13617  59D1 DA            push d
13618  59D2 FA FF FF      lea d, [bp + -1] ; $i
13619  59D5 2A            mov b, [d]
13620  59D6 E7            pop d
13621  59D7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13622  59DB E4            pop a
13623  59DC DA            push d
13624  59DD 3B F6 60      mov d, _damage_data ; $damage
13625  59E0 D7            push a
13626  59E1 DA            push d
13627  59E2 FA FF FF      lea d, [bp + -1] ; $i
13628  59E5 2A            mov b, [d]
13629  59E6 E7            pop d
13630  59E7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13631  59EB E4            pop a
13632  59EC 2A            mov b, [d]
13633  59ED             ; START TERMS
13634  59ED D7            push a
13635  59EE 11            mov a, b
13636  59EF FA FB FF      lea d, [bp + -5] ; $repair_factor
13637  59F2 2A            mov b, [d]
13638  59F3 56            add b, a
13639  59F4 E4            pop a
13640  59F5             ; END TERMS
13641  59F5 E7            pop d
13642  59F6 FD 43         mov [d], b
13643  59F8             ;; if (damage[i] > -10 && damage[i] < 0)	/* -0.1 */ 
13644  59F8             _if227_cond:
13645  59F8 3B F6 60      mov d, _damage_data ; $damage
13646  59FB D7            push a
13647  59FC DA            push d
13648  59FD FA FF FF      lea d, [bp + -1] ; $i
13649  5A00 2A            mov b, [d]
13650  5A01 E7            pop d
13651  5A02 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13652  5A06 E4            pop a
13653  5A07 2A            mov b, [d]
13654  5A08             ; START RELATIONAL
13655  5A08 D7            push a
13656  5A09 11            mov a, b
13657  5A0A 26 F6 FF      mov b, $fff6
13658  5A0D B0            cmp a, b
13659  5A0E FD 7F         sgt ; >
13660  5A10 E4            pop a
13661  5A11             ; END RELATIONAL
13662  5A11 D7            push a
13663  5A12 11            mov a, b
13664  5A13 3B F6 60      mov d, _damage_data ; $damage
13665  5A16 D7            push a
13666  5A17 DA            push d
13667  5A18 FA FF FF      lea d, [bp + -1] ; $i
13668  5A1B 2A            mov b, [d]
13669  5A1C E7            pop d
13670  5A1D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13671  5A21 E4            pop a
13672  5A22 2A            mov b, [d]
13673  5A23             ; START RELATIONAL
13674  5A23 D7            push a
13675  5A24 11            mov a, b
13676  5A25 26 00 00      mov b, $0
13677  5A28 B0            cmp a, b
13678  5A29 FD 73         slt ; < (signed)
13679  5A2B E4            pop a
13680  5A2C             ; END RELATIONAL
13681  5A2C FD A7         sand a, b
13682  5A2E E4            pop a
13683  5A2F C0 00 00      cmp b, 0
13684  5A32 C6 4E 5A      je _if227_else
13685  5A35             _if227_true:
13686  5A35             ;; damage[i] = -10; 
13687  5A35 3B F6 60      mov d, _damage_data ; $damage
13688  5A38 D7            push a
13689  5A39 DA            push d
13690  5A3A FA FF FF      lea d, [bp + -1] ; $i
13691  5A3D 2A            mov b, [d]
13692  5A3E E7            pop d
13693  5A3F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13694  5A43 E4            pop a
13695  5A44 DA            push d
13696  5A45 26 F6 FF      mov b, $fff6
13697  5A48 E7            pop d
13698  5A49 FD 43         mov [d], b
13699  5A4B 0A CF 5A      jmp _if227_exit
13700  5A4E             _if227_else:
13701  5A4E             ;; if (damage[i] >= 0) { 
13702  5A4E             _if228_cond:
13703  5A4E 3B F6 60      mov d, _damage_data ; $damage
13704  5A51 D7            push a
13705  5A52 DA            push d
13706  5A53 FA FF FF      lea d, [bp + -1] ; $i
13707  5A56 2A            mov b, [d]
13708  5A57 E7            pop d
13709  5A58 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13710  5A5C E4            pop a
13711  5A5D 2A            mov b, [d]
13712  5A5E             ; START RELATIONAL
13713  5A5E D7            push a
13714  5A5F 11            mov a, b
13715  5A60 26 00 00      mov b, $0
13716  5A63 B0            cmp a, b
13717  5A64 FD 80         sge ; >=
13718  5A66 E4            pop a
13719  5A67             ; END RELATIONAL
13720  5A67 C0 00 00      cmp b, 0
13721  5A6A C6 CF 5A      je _if228_exit
13722  5A6D             _if228_true:
13723  5A6D             ;; if (d1 != 1) { 
13724  5A6D             _if229_cond:
13725  5A6D FA FD FF      lea d, [bp + -3] ; $d1
13726  5A70 2A            mov b, [d]
13727  5A71             ; START RELATIONAL
13728  5A71 D7            push a
13729  5A72 11            mov a, b
13730  5A73 26 01 00      mov b, $1
13731  5A76 B0            cmp a, b
13732  5A77 FD 72         sneq ; !=
13733  5A79 E4            pop a
13734  5A7A             ; END RELATIONAL
13735  5A7A C0 00 00      cmp b, 0
13736  5A7D C6 9A 5A      je _if229_exit
13737  5A80             _if229_true:
13738  5A80             ;; d1 = 1; 
13739  5A80 FA FD FF      lea d, [bp + -3] ; $d1
13740  5A83 DA            push d
13741  5A84 26 01 00      mov b, $1
13742  5A87 E7            pop d
13743  5A88 FD 43         mov [d], b
13744  5A8A             ;; puts(dcr_1); 
13745  5A8A 3B 05 62      mov d, _dcr_1 ; $dcr_1
13746  5A8D 2A            mov b, [d]
13747  5A8E FD AB         swp b
13748  5A90 D8            push b
13749  5A91 07 31 13      call puts
13750  5A94 51 02 00      add sp, 2
13751  5A97 0A 9A 5A      jmp _if229_exit
13752  5A9A             _if229_exit:
13753  5A9A             ;; printf("    %s repair completed\n\n", 
13754  5A9A FA FF FF      lea d, [bp + -1] ; $i
13755  5A9D 2A            mov b, [d]
13756  5A9E FD AB         swp b
13757  5AA0 D8            push b
13758  5AA1 07 B9 5C      call get_device_name
13759  5AA4 51 02 00      add sp, 2
13760  5AA7 FD AB         swp b
13761  5AA9 D8            push b
out/startrek.asm line 13762: Label not found: (__s163)
out/startrek.asm line 13762: Unused data in MS byte of argument. (2)
13762  5AAA 26 00 00      mov b, __s163 ; "    %s repair completed\n\n"
13763  5AAD FD AB         swp b
13764  5AAF D8            push b
13765  5AB0 07 D1 05      call printf
13766  5AB3 51 04 00      add sp, 4
13767  5AB6             ;; damage[i] = 0; 
13768  5AB6 3B F6 60      mov d, _damage_data ; $damage
13769  5AB9 D7            push a
13770  5ABA DA            push d
13771  5ABB FA FF FF      lea d, [bp + -1] ; $i
13772  5ABE 2A            mov b, [d]
13773  5ABF E7            pop d
13774  5AC0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13775  5AC4 E4            pop a
13776  5AC5 DA            push d
13777  5AC6 26 00 00      mov b, $0
13778  5AC9 E7            pop d
13779  5ACA FD 43         mov [d], b
13780  5ACC 0A CF 5A      jmp _if228_exit
13781  5ACF             _if228_exit:
13782  5ACF             _if227_exit:
13783  5ACF 0A D2 5A      jmp _if226_exit
13784  5AD2             _if226_exit:
13785  5AD2             _for225_update:
13786  5AD2 FA FF FF      lea d, [bp + -1] ; $i
13787  5AD5 2A            mov b, [d]
13788  5AD6 D8            push b
13789  5AD7 FD 77         inc b
13790  5AD9 FA FF FF      lea d, [bp + -1] ; $i
13791  5ADC FD 43         mov [d], b
13792  5ADE E5            pop b
13793  5ADF 0A 9B 59      jmp _for225_cond
13794  5AE2             _for225_exit:
13795  5AE2             ;; if (get_rand(10) <= 2) { 
13796  5AE2             _if230_cond:
13797  5AE2 26 0A 00      mov b, $a
13798  5AE5 FD AB         swp b
13799  5AE7 D8            push b
13800  5AE8 07 1C 1D      call get_rand
13801  5AEB 51 02 00      add sp, 2
13802  5AEE             ; START RELATIONAL
13803  5AEE D7            push a
13804  5AEF 11            mov a, b
13805  5AF0 26 02 00      mov b, $2
13806  5AF3 B0            cmp a, b
13807  5AF4 FD 73         slt ; <= (signed)
13808  5AF6 E4            pop a
13809  5AF7             ; END RELATIONAL
13810  5AF7 C0 00 00      cmp b, 0
13811  5AFA C6 F9 5B      je _if230_exit
13812  5AFD             _if230_true:
13813  5AFD             ;; r = rand8(); 
13814  5AFD FA FA FF      lea d, [bp + -6] ; $r
13815  5B00 DA            push d
13816  5B01 07 6B 1D      call rand8
13817  5B04 E7            pop d
13818  5B05 FD 3E         mov [d], bl
13819  5B07             ;; if (get_rand(10) < 6) { 
13820  5B07             _if231_cond:
13821  5B07 26 0A 00      mov b, $a
13822  5B0A FD AB         swp b
13823  5B0C D8            push b
13824  5B0D 07 1C 1D      call get_rand
13825  5B10 51 02 00      add sp, 2
13826  5B13             ; START RELATIONAL
13827  5B13 D7            push a
13828  5B14 11            mov a, b
13829  5B15 26 06 00      mov b, $6
13830  5B18 B0            cmp a, b
13831  5B19 FD 73         slt ; < (signed)
13832  5B1B E4            pop a
13833  5B1C             ; END RELATIONAL
13834  5B1C C0 00 00      cmp b, 0
13835  5B1F C6 8F 5B      je _if231_else
13836  5B22             _if231_true:
13837  5B22             ;; damage[r] =damage[r]- (get_rand(500) + 100); 
13838  5B22 3B F6 60      mov d, _damage_data ; $damage
13839  5B25 D7            push a
13840  5B26 DA            push d
13841  5B27 FA FA FF      lea d, [bp + -6] ; $r
13842  5B2A 32            mov bl, [d]
13843  5B2B A7 00         mov bh, 0
13844  5B2D E7            pop d
13845  5B2E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13846  5B32 E4            pop a
13847  5B33 DA            push d
13848  5B34 3B F6 60      mov d, _damage_data ; $damage
13849  5B37 D7            push a
13850  5B38 DA            push d
13851  5B39 FA FA FF      lea d, [bp + -6] ; $r
13852  5B3C 32            mov bl, [d]
13853  5B3D A7 00         mov bh, 0
13854  5B3F E7            pop d
13855  5B40 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13856  5B44 E4            pop a
13857  5B45 2A            mov b, [d]
13858  5B46             ; START TERMS
13859  5B46 D7            push a
13860  5B47 11            mov a, b
13861  5B48 26 F4 01      mov b, $1f4
13862  5B4B FD AB         swp b
13863  5B4D D8            push b
13864  5B4E 07 1C 1D      call get_rand
13865  5B51 51 02 00      add sp, 2
13866  5B54             ; START TERMS
13867  5B54 D7            push a
13868  5B55 11            mov a, b
13869  5B56 26 64 00      mov b, $64
13870  5B59 56            add b, a
13871  5B5A E4            pop a
13872  5B5B             ; END TERMS
13873  5B5B 60            sub a, b
13874  5B5C 27            mov b, a
13875  5B5D E4            pop a
13876  5B5E             ; END TERMS
13877  5B5E E7            pop d
13878  5B5F FD 43         mov [d], b
13879  5B61             ;; puts(dcr_1); 
13880  5B61 3B 05 62      mov d, _dcr_1 ; $dcr_1
13881  5B64 2A            mov b, [d]
13882  5B65 FD AB         swp b
13883  5B67 D8            push b
13884  5B68 07 31 13      call puts
13885  5B6B 51 02 00      add sp, 2
13886  5B6E             ;; printf("    %s damaged\n\n", get_device_name(r)); 
13887  5B6E FA FA FF      lea d, [bp + -6] ; $r
13888  5B71 32            mov bl, [d]
13889  5B72 A7 00         mov bh, 0
13890  5B74 FD AB         swp b
13891  5B76 D8            push b
13892  5B77 07 B9 5C      call get_device_name
13893  5B7A 51 02 00      add sp, 2
13894  5B7D FD AB         swp b
13895  5B7F D8            push b
out/startrek.asm line 13896: Label not found: (__s164)
out/startrek.asm line 13896: Unused data in MS byte of argument. (2)
13896  5B80 26 00 00      mov b, __s164 ; "    %s damaged\n\n"
13897  5B83 FD AB         swp b
13898  5B85 D8            push b
13899  5B86 07 D1 05      call printf
13900  5B89 51 04 00      add sp, 4
13901  5B8C 0A F6 5B      jmp _if231_exit
13902  5B8F             _if231_else:
13903  5B8F             ;; damage[r] = damage[r] + get_rand(300) + 100; 
13904  5B8F 3B F6 60      mov d, _damage_data ; $damage
13905  5B92 D7            push a
13906  5B93 DA            push d
13907  5B94 FA FA FF      lea d, [bp + -6] ; $r
13908  5B97 32            mov bl, [d]
13909  5B98 A7 00         mov bh, 0
13910  5B9A E7            pop d
13911  5B9B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13912  5B9F E4            pop a
13913  5BA0 DA            push d
13914  5BA1 3B F6 60      mov d, _damage_data ; $damage
13915  5BA4 D7            push a
13916  5BA5 DA            push d
13917  5BA6 FA FA FF      lea d, [bp + -6] ; $r
13918  5BA9 32            mov bl, [d]
13919  5BAA A7 00         mov bh, 0
13920  5BAC E7            pop d
13921  5BAD FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13922  5BB1 E4            pop a
13923  5BB2 2A            mov b, [d]
13924  5BB3             ; START TERMS
13925  5BB3 D7            push a
13926  5BB4 11            mov a, b
13927  5BB5 26 2C 01      mov b, $12c
13928  5BB8 FD AB         swp b
13929  5BBA D8            push b
13930  5BBB 07 1C 1D      call get_rand
13931  5BBE 51 02 00      add sp, 2
13932  5BC1 56            add b, a
13933  5BC2 11            mov a, b
13934  5BC3 26 64 00      mov b, $64
13935  5BC6 56            add b, a
13936  5BC7 E4            pop a
13937  5BC8             ; END TERMS
13938  5BC8 E7            pop d
13939  5BC9 FD 43         mov [d], b
13940  5BCB             ;; puts(dcr_1); 
13941  5BCB 3B 05 62      mov d, _dcr_1 ; $dcr_1
13942  5BCE 2A            mov b, [d]
13943  5BCF FD AB         swp b
13944  5BD1 D8            push b
13945  5BD2 07 31 13      call puts
13946  5BD5 51 02 00      add sp, 2
13947  5BD8             ;; printf("    %s state of repair improved\n\n", 
13948  5BD8 FA FA FF      lea d, [bp + -6] ; $r
13949  5BDB 32            mov bl, [d]
13950  5BDC A7 00         mov bh, 0
13951  5BDE FD AB         swp b
13952  5BE0 D8            push b
13953  5BE1 07 B9 5C      call get_device_name
13954  5BE4 51 02 00      add sp, 2
13955  5BE7 FD AB         swp b
13956  5BE9 D8            push b
out/startrek.asm line 13957: Label not found: (__s165)
out/startrek.asm line 13957: Unused data in MS byte of argument. (2)
13957  5BEA 26 00 00      mov b, __s165 ; "    %s state of repair improved\n\n"
13958  5BED FD AB         swp b
13959  5BEF D8            push b
13960  5BF0 07 D1 05      call printf
13961  5BF3 51 04 00      add sp, 4
13962  5BF6             _if231_exit:
13963  5BF6 0A F9 5B      jmp _if230_exit
13964  5BF9             _if230_exit:
13965  5BF9 F9            leave
13966  5BFA 09            ret
13967  5BFB             
13968  5BFB             find_set_empty_place:
13969  5BFB F8 00 00      enter 0 ; (push bp; mov bp, sp)
13970  5BFE             ; $r1 
13971  5BFE             ; $r2 
13972  5BFE 52 02 00      sub sp, 2
13973  5C01             ;; do { 
13974  5C01             _do232_block:
13975  5C01             ;; r1 = rand8(); 
13976  5C01 FA 00 00      lea d, [bp + 0] ; $r1
13977  5C04 DA            push d
13978  5C05 07 6B 1D      call rand8
13979  5C08 E7            pop d
13980  5C09 FD 3E         mov [d], bl
13981  5C0B             ;; r2 = rand8(); 
13982  5C0B FA FF FF      lea d, [bp + -1] ; $r2
13983  5C0E DA            push d
13984  5C0F 07 6B 1D      call rand8
13985  5C12 E7            pop d
13986  5C13 FD 3E         mov [d], bl
13987  5C15             ;; } while (quad[r1+-1][r2+-1] !=  		0       ); 
13988  5C15             _do232_cond:
13989  5C15 3B 10 61      mov d, _quad_data ; $quad
13990  5C18 D7            push a
13991  5C19 DA            push d
13992  5C1A FA 00 00      lea d, [bp + 0] ; $r1
13993  5C1D 32            mov bl, [d]
13994  5C1E A7 00         mov bh, 0
13995  5C20             ; START TERMS
13996  5C20 D7            push a
13997  5C21 11            mov a, b
13998  5C22 26 FF FF      mov b, $ffff
13999  5C25 56            add b, a
14000  5C26 E4            pop a
14001  5C27             ; END TERMS
14002  5C27 E7            pop d
14003  5C28 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
14004  5C2C DA            push d
14005  5C2D FA FF FF      lea d, [bp + -1] ; $r2
14006  5C30 32            mov bl, [d]
14007  5C31 A7 00         mov bh, 0
14008  5C33             ; START TERMS
14009  5C33 D7            push a
14010  5C34 11            mov a, b
14011  5C35 26 FF FF      mov b, $ffff
14012  5C38 56            add b, a
14013  5C39 E4            pop a
14014  5C3A             ; END TERMS
14015  5C3A E7            pop d
14016  5C3B 5A            add d, b
14017  5C3C E4            pop a
14018  5C3D 32            mov bl, [d]
14019  5C3E A7 00         mov bh, 0
14020  5C40             ; START RELATIONAL
14021  5C40 D7            push a
14022  5C41 11            mov a, b
14023  5C42 26 00 00      mov b, $0
14024  5C45 B0            cmp a, b
14025  5C46 FD 72         sneq ; !=
14026  5C48 E4            pop a
14027  5C49             ; END RELATIONAL
14028  5C49 C0 01 00      cmp b, 1
14029  5C4C C6 01 5C      je _do232_block
14030  5C4F             _do232_exit:
14031  5C4F             ;; quad[r1+-1][r2+-1] = t; 
14032  5C4F 3B 10 61      mov d, _quad_data ; $quad
14033  5C52 D7            push a
14034  5C53 DA            push d
14035  5C54 FA 00 00      lea d, [bp + 0] ; $r1
14036  5C57 32            mov bl, [d]
14037  5C58 A7 00         mov bh, 0
14038  5C5A             ; START TERMS
14039  5C5A D7            push a
14040  5C5B 11            mov a, b
14041  5C5C 26 FF FF      mov b, $ffff
14042  5C5F 56            add b, a
14043  5C60 E4            pop a
14044  5C61             ; END TERMS
14045  5C61 E7            pop d
14046  5C62 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
14047  5C66 DA            push d
14048  5C67 FA FF FF      lea d, [bp + -1] ; $r2
14049  5C6A 32            mov bl, [d]
14050  5C6B A7 00         mov bh, 0
14051  5C6D             ; START TERMS
14052  5C6D D7            push a
14053  5C6E 11            mov a, b
14054  5C6F 26 FF FF      mov b, $ffff
14055  5C72 56            add b, a
14056  5C73 E4            pop a
14057  5C74             ; END TERMS
14058  5C74 E7            pop d
14059  5C75 5A            add d, b
14060  5C76 E4            pop a
14061  5C77 DA            push d
14062  5C78 FA 05 00      lea d, [bp + 5] ; $t
14063  5C7B 32            mov bl, [d]
14064  5C7C A7 00         mov bh, 0
14065  5C7E E7            pop d
14066  5C7F FD 3E         mov [d], bl
14067  5C81             ;; if (z1) 
14068  5C81             _if233_cond:
14069  5C81 FA 06 00      lea d, [bp + 6] ; $z1
14070  5C84 2A            mov b, [d]
14071  5C85 C0 00 00      cmp b, 0
14072  5C88 C6 9C 5C      je _if233_exit
14073  5C8B             _if233_true:
14074  5C8B             ;; *z1 = r1; 
14075  5C8B FA 06 00      lea d, [bp + 6] ; $z1
14076  5C8E 2A            mov b, [d]
14077  5C8F D8            push b
14078  5C90 FA 00 00      lea d, [bp + 0] ; $r1
14079  5C93 32            mov bl, [d]
14080  5C94 A7 00         mov bh, 0
14081  5C96 E7            pop d
14082  5C97 FD 3E         mov [d], bl
14083  5C99 0A 9C 5C      jmp _if233_exit
14084  5C9C             _if233_exit:
14085  5C9C             ;; if (z2) 
14086  5C9C             _if234_cond:
14087  5C9C FA 08 00      lea d, [bp + 8] ; $z2
14088  5C9F 2A            mov b, [d]
14089  5CA0 C0 00 00      cmp b, 0
14090  5CA3 C6 B7 5C      je _if234_exit
14091  5CA6             _if234_true:
14092  5CA6             ;; *z2 = r2; 
14093  5CA6 FA 08 00      lea d, [bp + 8] ; $z2
14094  5CA9 2A            mov b, [d]
14095  5CAA D8            push b
14096  5CAB FA FF FF      lea d, [bp + -1] ; $r2
14097  5CAE 32            mov bl, [d]
14098  5CAF A7 00         mov bh, 0
14099  5CB1 E7            pop d
14100  5CB2 FD 3E         mov [d], bl
14101  5CB4 0A B7 5C      jmp _if234_exit
14102  5CB7             _if234_exit:
14103  5CB7 F9            leave
14104  5CB8 09            ret
14105  5CB9             
14106  5CB9             get_device_name:
14107  5CB9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14108  5CBC             ;; if (n < 0 || n > 8) 
14109  5CBC             _if235_cond:
14110  5CBC FA 05 00      lea d, [bp + 5] ; $n
14111  5CBF 2A            mov b, [d]
14112  5CC0             ; START RELATIONAL
14113  5CC0 D7            push a
14114  5CC1 11            mov a, b
14115  5CC2 26 00 00      mov b, $0
14116  5CC5 B0            cmp a, b
14117  5CC6 FD 73         slt ; < (signed)
14118  5CC8 E4            pop a
14119  5CC9             ; END RELATIONAL
14120  5CC9 D7            push a
14121  5CCA 11            mov a, b
14122  5CCB FA 05 00      lea d, [bp + 5] ; $n
14123  5CCE 2A            mov b, [d]
14124  5CCF             ; START RELATIONAL
14125  5CCF D7            push a
14126  5CD0 11            mov a, b
14127  5CD1 26 08 00      mov b, $8
14128  5CD4 B0            cmp a, b
14129  5CD5 FD 7F         sgt ; >
14130  5CD7 E4            pop a
14131  5CD8             ; END RELATIONAL
14132  5CD8 FD A8         sor a, b ; ||
14133  5CDA E4            pop a
14134  5CDB C0 00 00      cmp b, 0
14135  5CDE C6 EE 5C      je _if235_exit
14136  5CE1             _if235_true:
14137  5CE1             ;; n = 0; 
14138  5CE1 FA 05 00      lea d, [bp + 5] ; $n
14139  5CE4 DA            push d
14140  5CE5 26 00 00      mov b, $0
14141  5CE8 E7            pop d
14142  5CE9 FD 43         mov [d], b
14143  5CEB 0A EE 5C      jmp _if235_exit
14144  5CEE             _if235_exit:
14145  5CEE             ;; return device_name[n]; 
14146  5CEE 3B CA 61      mov d, _device_name_data ; $device_name
14147  5CF1 D7            push a
14148  5CF2 DA            push d
14149  5CF3 FA 05 00      lea d, [bp + 5] ; $n
14150  5CF6 2A            mov b, [d]
14151  5CF7 E7            pop d
14152  5CF8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14153  5CFC E4            pop a
14154  5CFD 2A            mov b, [d]
14155  5CFE F9            leave
14156  5CFF 09            ret
14157  5D00             
14158  5D00             quadrant_name:
14159  5D00 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14160  5D03             ;; if (y < 1 || y > 8 || x < 1 || x > 8) 
14161  5D03             _if236_cond:
14162  5D03 FA 06 00      lea d, [bp + 6] ; $y
14163  5D06 32            mov bl, [d]
14164  5D07 A7 00         mov bh, 0
14165  5D09             ; START RELATIONAL
14166  5D09 D7            push a
14167  5D0A 11            mov a, b
14168  5D0B 26 01 00      mov b, $1
14169  5D0E B0            cmp a, b
14170  5D0F FD 75         slu ; < (unsigned)
14171  5D11 E4            pop a
14172  5D12             ; END RELATIONAL
14173  5D12 D7            push a
14174  5D13 11            mov a, b
14175  5D14 FA 06 00      lea d, [bp + 6] ; $y
14176  5D17 32            mov bl, [d]
14177  5D18 A7 00         mov bh, 0
14178  5D1A             ; START RELATIONAL
14179  5D1A D7            push a
14180  5D1B 11            mov a, b
14181  5D1C 26 08 00      mov b, $8
14182  5D1F B0            cmp a, b
14183  5D20 FD 81         sgu ; > (unsigned)
14184  5D22 E4            pop a
14185  5D23             ; END RELATIONAL
14186  5D23 FD A8         sor a, b ; ||
14187  5D25 11            mov a, b
14188  5D26 FA 07 00      lea d, [bp + 7] ; $x
14189  5D29 32            mov bl, [d]
14190  5D2A A7 00         mov bh, 0
14191  5D2C             ; START RELATIONAL
14192  5D2C D7            push a
14193  5D2D 11            mov a, b
14194  5D2E 26 01 00      mov b, $1
14195  5D31 B0            cmp a, b
14196  5D32 FD 75         slu ; < (unsigned)
14197  5D34 E4            pop a
14198  5D35             ; END RELATIONAL
14199  5D35 FD A8         sor a, b ; ||
14200  5D37 11            mov a, b
14201  5D38 FA 07 00      lea d, [bp + 7] ; $x
14202  5D3B 32            mov bl, [d]
14203  5D3C A7 00         mov bh, 0
14204  5D3E             ; START RELATIONAL
14205  5D3E D7            push a
14206  5D3F 11            mov a, b
14207  5D40 26 08 00      mov b, $8
14208  5D43 B0            cmp a, b
14209  5D44 FD 81         sgu ; > (unsigned)
14210  5D46 E4            pop a
14211  5D47             ; END RELATIONAL
14212  5D47 FD A8         sor a, b ; ||
14213  5D49 E4            pop a
14214  5D4A C0 00 00      cmp b, 0
14215  5D4D C6 66 5D      je _if236_exit
14216  5D50             _if236_true:
14217  5D50             ;; strcpy(quadname, "Unknown"); 
out/startrek.asm line 14218: Label not found: (__s170)
out/startrek.asm line 14218: Unused data in MS byte of argument. (2)
14218  5D50 26 00 00      mov b, __s170 ; "Unknown"
14219  5D53 FD AB         swp b
14220  5D55 D8            push b
14221  5D56 3B 50 61      mov d, _quadname_data ; $quadname
14222  5D59 2D            mov b, d
14223  5D5A FD AB         swp b
14224  5D5C D8            push b
14225  5D5D 07 14 04      call strcpy
14226  5D60 51 04 00      add sp, 4
14227  5D63 0A 66 5D      jmp _if236_exit
14228  5D66             _if236_exit:
14229  5D66             ;; if (x <= 4) 
14230  5D66             _if237_cond:
14231  5D66 FA 07 00      lea d, [bp + 7] ; $x
14232  5D69 32            mov bl, [d]
14233  5D6A A7 00         mov bh, 0
14234  5D6C             ; START RELATIONAL
14235  5D6C D7            push a
14236  5D6D 11            mov a, b
14237  5D6E 26 04 00      mov b, $4
14238  5D71 B0            cmp a, b
14239  5D72 FD 75         slu ; <= (unsigned)
14240  5D74 E4            pop a
14241  5D75             ; END RELATIONAL
14242  5D75 C0 00 00      cmp b, 0
14243  5D78 C6 A0 5D      je _if237_else
14244  5D7B             _if237_true:
14245  5D7B             ;; strcpy(quadname, quad_name[y]); 
14246  5D7B 3B 86 61      mov d, _quad_name_data ; $quad_name
14247  5D7E D7            push a
14248  5D7F DA            push d
14249  5D80 FA 06 00      lea d, [bp + 6] ; $y
14250  5D83 32            mov bl, [d]
14251  5D84 A7 00         mov bh, 0
14252  5D86 E7            pop d
14253  5D87 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14254  5D8B E4            pop a
14255  5D8C 2A            mov b, [d]
14256  5D8D FD AB         swp b
14257  5D8F D8            push b
14258  5D90 3B 50 61      mov d, _quadname_data ; $quadname
14259  5D93 2D            mov b, d
14260  5D94 FD AB         swp b
14261  5D96 D8            push b
14262  5D97 07 14 04      call strcpy
14263  5D9A 51 04 00      add sp, 4
14264  5D9D 0A C9 5D      jmp _if237_exit
14265  5DA0             _if237_else:
14266  5DA0             ;; strcpy(quadname, quad_name[y + 8]); 
14267  5DA0 3B 86 61      mov d, _quad_name_data ; $quad_name
14268  5DA3 D7            push a
14269  5DA4 DA            push d
14270  5DA5 FA 06 00      lea d, [bp + 6] ; $y
14271  5DA8 32            mov bl, [d]
14272  5DA9 A7 00         mov bh, 0
14273  5DAB             ; START TERMS
14274  5DAB D7            push a
14275  5DAC 11            mov a, b
14276  5DAD 26 08 00      mov b, $8
14277  5DB0 56            add b, a
14278  5DB1 E4            pop a
14279  5DB2             ; END TERMS
14280  5DB2 E7            pop d
14281  5DB3 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14282  5DB7 E4            pop a
14283  5DB8 2A            mov b, [d]
14284  5DB9 FD AB         swp b
14285  5DBB D8            push b
14286  5DBC 3B 50 61      mov d, _quadname_data ; $quadname
14287  5DBF 2D            mov b, d
14288  5DC0 FD AB         swp b
14289  5DC2 D8            push b
14290  5DC3 07 14 04      call strcpy
14291  5DC6 51 04 00      add sp, 4
14292  5DC9             _if237_exit:
14293  5DC9             ;; if (small != 1) { 
14294  5DC9             _if238_cond:
14295  5DC9 FA 05 00      lea d, [bp + 5] ; $small
14296  5DCC 32            mov bl, [d]
14297  5DCD A7 00         mov bh, 0
14298  5DCF             ; START RELATIONAL
14299  5DCF D7            push a
14300  5DD0 11            mov a, b
14301  5DD1 26 01 00      mov b, $1
14302  5DD4 B0            cmp a, b
14303  5DD5 FD 72         sneq ; !=
14304  5DD7 E4            pop a
14305  5DD8             ; END RELATIONAL
14306  5DD8 C0 00 00      cmp b, 0
14307  5DDB C6 30 5E      je _if238_exit
14308  5DDE             _if238_true:
14309  5DDE             ;; if (x > 4) 
14310  5DDE             _if239_cond:
14311  5DDE FA 07 00      lea d, [bp + 7] ; $x
14312  5DE1 32            mov bl, [d]
14313  5DE2 A7 00         mov bh, 0
14314  5DE4             ; START RELATIONAL
14315  5DE4 D7            push a
14316  5DE5 11            mov a, b
14317  5DE6 26 04 00      mov b, $4
14318  5DE9 B0            cmp a, b
14319  5DEA FD 81         sgu ; > (unsigned)
14320  5DEC E4            pop a
14321  5DED             ; END RELATIONAL
14322  5DED C0 00 00      cmp b, 0
14323  5DF0 C6 0B 5E      je _if239_exit
14324  5DF3             _if239_true:
14325  5DF3             ;; x = x - 4; 
14326  5DF3 FA 07 00      lea d, [bp + 7] ; $x
14327  5DF6 DA            push d
14328  5DF7 FA 07 00      lea d, [bp + 7] ; $x
14329  5DFA 32            mov bl, [d]
14330  5DFB A7 00         mov bh, 0
14331  5DFD             ; START TERMS
14332  5DFD D7            push a
14333  5DFE 11            mov a, b
14334  5DFF 26 04 00      mov b, $4
14335  5E02 60            sub a, b
14336  5E03 27            mov b, a
14337  5E04 E4            pop a
14338  5E05             ; END TERMS
14339  5E05 E7            pop d
14340  5E06 FD 3E         mov [d], bl
14341  5E08 0A 0B 5E      jmp _if239_exit
14342  5E0B             _if239_exit:
14343  5E0B             ;; strcat(quadname, sect_name[x]); 
14344  5E0B 3B F0 62      mov d, st_quadrant_name_sect_name_dt ; static sect_name
14345  5E0E D7            push a
14346  5E0F DA            push d
14347  5E10 FA 07 00      lea d, [bp + 7] ; $x
14348  5E13 32            mov bl, [d]
14349  5E14 A7 00         mov bh, 0
14350  5E16 E7            pop d
14351  5E17 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14352  5E1B E4            pop a
14353  5E1C 2A            mov b, [d]
14354  5E1D FD AB         swp b
14355  5E1F D8            push b
14356  5E20 3B 50 61      mov d, _quadname_data ; $quadname
14357  5E23 2D            mov b, d
14358  5E24 FD AB         swp b
14359  5E26 D8            push b
14360  5E27 07 D5 04      call strcat
14361  5E2A 51 04 00      add sp, 4
14362  5E2D 0A 30 5E      jmp _if238_exit
14363  5E30             _if238_exit:
14364  5E30             ;; return; 
14365  5E30 F9            leave
14366  5E31 09            ret
14367  5E32             
14368  5E32             isqrt:
14369  5E32 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14370  5E35             ; $b 
14371  5E35             ; $q 
14372  5E35             ; $r 
14373  5E35             ; $t 
14374  5E35 52 08 00      sub sp, 8
14375  5E38             ;; b = 0x4000; 
14376  5E38 FA FF FF      lea d, [bp + -1] ; $b
14377  5E3B DA            push d
14378  5E3C 26 00 40      mov b, $4000
14379  5E3F E7            pop d
14380  5E40 FD 43         mov [d], b
14381  5E42             ;; q = 0; 
14382  5E42 FA FD FF      lea d, [bp + -3] ; $q
14383  5E45 DA            push d
14384  5E46 26 00 00      mov b, $0
14385  5E49 E7            pop d
14386  5E4A FD 43         mov [d], b
14387  5E4C             ;; r = i; 
14388  5E4C FA FB FF      lea d, [bp + -5] ; $r
14389  5E4F DA            push d
14390  5E50 FA 05 00      lea d, [bp + 5] ; $i
14391  5E53 2A            mov b, [d]
14392  5E54 E7            pop d
14393  5E55 FD 43         mov [d], b
14394  5E57             ;; while (b) { 
14395  5E57             _while240_cond:
14396  5E57 FA FF FF      lea d, [bp + -1] ; $b
14397  5E5A 2A            mov b, [d]
14398  5E5B C0 00 00      cmp b, 0
14399  5E5E C6 DF 5E      je _while240_exit
14400  5E61             _while240_block:
14401  5E61             ;; t = q + b; 
14402  5E61 FA F9 FF      lea d, [bp + -7] ; $t
14403  5E64 DA            push d
14404  5E65 FA FD FF      lea d, [bp + -3] ; $q
14405  5E68 2A            mov b, [d]
14406  5E69             ; START TERMS
14407  5E69 D7            push a
14408  5E6A 11            mov a, b
14409  5E6B FA FF FF      lea d, [bp + -1] ; $b
14410  5E6E 2A            mov b, [d]
14411  5E6F 56            add b, a
14412  5E70 E4            pop a
14413  5E71             ; END TERMS
14414  5E71 E7            pop d
14415  5E72 FD 43         mov [d], b
14416  5E74             ;; q =q>> 1; 
14417  5E74 FA FD FF      lea d, [bp + -3] ; $q
14418  5E77 DA            push d
14419  5E78 FA FD FF      lea d, [bp + -3] ; $q
14420  5E7B 2A            mov b, [d]
14421  5E7C             ; START SHIFT
14422  5E7C D7            push a
14423  5E7D 11            mov a, b
14424  5E7E 26 01 00      mov b, $1
14425  5E81 FD 39         mov c, b
14426  5E83 A1            shr a, cl
14427  5E84 27            mov b, a
14428  5E85 E4            pop a
14429  5E86             ; END SHIFT
14430  5E86 E7            pop d
14431  5E87 FD 43         mov [d], b
14432  5E89             ;; if (r >= t) { 
14433  5E89             _if241_cond:
14434  5E89 FA FB FF      lea d, [bp + -5] ; $r
14435  5E8C 2A            mov b, [d]
14436  5E8D             ; START RELATIONAL
14437  5E8D D7            push a
14438  5E8E 11            mov a, b
14439  5E8F FA F9 FF      lea d, [bp + -7] ; $t
14440  5E92 2A            mov b, [d]
14441  5E93 B0            cmp a, b
14442  5E94 FD 82         sgeu ; >= (unsigned)
14443  5E96 E4            pop a
14444  5E97             ; END RELATIONAL
14445  5E97 C0 00 00      cmp b, 0
14446  5E9A C6 C7 5E      je _if241_exit
14447  5E9D             _if241_true:
14448  5E9D             ;; r =r- t; 
14449  5E9D FA FB FF      lea d, [bp + -5] ; $r
14450  5EA0 DA            push d
14451  5EA1 FA FB FF      lea d, [bp + -5] ; $r
14452  5EA4 2A            mov b, [d]
14453  5EA5             ; START TERMS
14454  5EA5 D7            push a
14455  5EA6 11            mov a, b
14456  5EA7 FA F9 FF      lea d, [bp + -7] ; $t
14457  5EAA 2A            mov b, [d]
14458  5EAB 60            sub a, b
14459  5EAC 27            mov b, a
14460  5EAD E4            pop a
14461  5EAE             ; END TERMS
14462  5EAE E7            pop d
14463  5EAF FD 43         mov [d], b
14464  5EB1             ;; q = q + b; 
14465  5EB1 FA FD FF      lea d, [bp + -3] ; $q
14466  5EB4 DA            push d
14467  5EB5 FA FD FF      lea d, [bp + -3] ; $q
14468  5EB8 2A            mov b, [d]
14469  5EB9             ; START TERMS
14470  5EB9 D7            push a
14471  5EBA 11            mov a, b
14472  5EBB FA FF FF      lea d, [bp + -1] ; $b
14473  5EBE 2A            mov b, [d]
14474  5EBF 56            add b, a
14475  5EC0 E4            pop a
14476  5EC1             ; END TERMS
14477  5EC1 E7            pop d
14478  5EC2 FD 43         mov [d], b
14479  5EC4 0A C7 5E      jmp _if241_exit
14480  5EC7             _if241_exit:
14481  5EC7             ;; b =b>> 2; 
14482  5EC7 FA FF FF      lea d, [bp + -1] ; $b
14483  5ECA DA            push d
14484  5ECB FA FF FF      lea d, [bp + -1] ; $b
14485  5ECE 2A            mov b, [d]
14486  5ECF             ; START SHIFT
14487  5ECF D7            push a
14488  5ED0 11            mov a, b
14489  5ED1 26 02 00      mov b, $2
14490  5ED4 FD 39         mov c, b
14491  5ED6 A1            shr a, cl
14492  5ED7 27            mov b, a
14493  5ED8 E4            pop a
14494  5ED9             ; END SHIFT
14495  5ED9 E7            pop d
14496  5EDA FD 43         mov [d], b
14497  5EDC 0A 57 5E      jmp _while240_cond
14498  5EDF             _while240_exit:
14499  5EDF             ;; return q; 
14500  5EDF FA FD FF      lea d, [bp + -3] ; $q
14501  5EE2 2A            mov b, [d]
14502  5EE3 F9            leave
14503  5EE4 09            ret
14504  5EE5             
14505  5EE5             square00:
14506  5EE5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14507  5EE8             ;; if (abs(t) > 181) { 
14508  5EE8             _if242_cond:
14509  5EE8 FA 05 00      lea d, [bp + 5] ; $t
14510  5EEB 2A            mov b, [d]
14511  5EEC FD AB         swp b
14512  5EEE D8            push b
14513  5EEF 07 7D 13      call abs
14514  5EF2 51 02 00      add sp, 2
14515  5EF5             ; START RELATIONAL
14516  5EF5 D7            push a
14517  5EF6 11            mov a, b
14518  5EF7 26 B5 00      mov b, $b5
14519  5EFA B0            cmp a, b
14520  5EFB FD 7F         sgt ; >
14521  5EFD E4            pop a
14522  5EFE             ; END RELATIONAL
14523  5EFE C0 00 00      cmp b, 0
14524  5F01 C6 2F 5F      je _if242_else
14525  5F04             _if242_true:
14526  5F04             ;; t =t/ 10; 
14527  5F04 FA 05 00      lea d, [bp + 5] ; $t
14528  5F07 DA            push d
14529  5F08 FA 05 00      lea d, [bp + 5] ; $t
14530  5F0B 2A            mov b, [d]
14531  5F0C             ; START FACTORS
14532  5F0C D7            push a
14533  5F0D 11            mov a, b
14534  5F0E 26 0A 00      mov b, $a
14535  5F11 AE            div a, b
14536  5F12 27            mov b, a
14537  5F13 E4            pop a
14538  5F14             ; END FACTORS
14539  5F14 E7            pop d
14540  5F15 FD 43         mov [d], b
14541  5F17             ;; t =t* t; 
14542  5F17 FA 05 00      lea d, [bp + 5] ; $t
14543  5F1A DA            push d
14544  5F1B FA 05 00      lea d, [bp + 5] ; $t
14545  5F1E 2A            mov b, [d]
14546  5F1F             ; START FACTORS
14547  5F1F D7            push a
14548  5F20 11            mov a, b
14549  5F21 FA 05 00      lea d, [bp + 5] ; $t
14550  5F24 2A            mov b, [d]
14551  5F25 AC            mul a, b ; *
14552  5F26 11            mov a, b
14553  5F27 27            mov b, a
14554  5F28 E4            pop a
14555  5F29             ; END FACTORS
14556  5F29 E7            pop d
14557  5F2A FD 43         mov [d], b
14558  5F2C 0A 57 5F      jmp _if242_exit
14559  5F2F             _if242_else:
14560  5F2F             ;; t =t* t; 
14561  5F2F FA 05 00      lea d, [bp + 5] ; $t
14562  5F32 DA            push d
14563  5F33 FA 05 00      lea d, [bp + 5] ; $t
14564  5F36 2A            mov b, [d]
14565  5F37             ; START FACTORS
14566  5F37 D7            push a
14567  5F38 11            mov a, b
14568  5F39 FA 05 00      lea d, [bp + 5] ; $t
14569  5F3C 2A            mov b, [d]
14570  5F3D AC            mul a, b ; *
14571  5F3E 11            mov a, b
14572  5F3F 27            mov b, a
14573  5F40 E4            pop a
14574  5F41             ; END FACTORS
14575  5F41 E7            pop d
14576  5F42 FD 43         mov [d], b
14577  5F44             ;; t =t/ 100; 
14578  5F44 FA 05 00      lea d, [bp + 5] ; $t
14579  5F47 DA            push d
14580  5F48 FA 05 00      lea d, [bp + 5] ; $t
14581  5F4B 2A            mov b, [d]
14582  5F4C             ; START FACTORS
14583  5F4C D7            push a
14584  5F4D 11            mov a, b
14585  5F4E 26 64 00      mov b, $64
14586  5F51 AE            div a, b
14587  5F52 27            mov b, a
14588  5F53 E4            pop a
14589  5F54             ; END FACTORS
14590  5F54 E7            pop d
14591  5F55 FD 43         mov [d], b
14592  5F57             _if242_exit:
14593  5F57             ;; return t; 
14594  5F57 FA 05 00      lea d, [bp + 5] ; $t
14595  5F5A 2A            mov b, [d]
14596  5F5B F9            leave
14597  5F5C 09            ret
14598  5F5D             
14599  5F5D             distance_to:
14600  5F5D F8 00 00      enter 0 ; (push bp; mov bp, sp)
14601  5F60             ; $j 
14602  5F60 52 02 00      sub sp, 2
14603  5F63             ;; j = square00(TO_FIXED00(k->y) - ship_y); 
14604  5F63 FA FF FF      lea d, [bp + -1] ; $j
14605  5F66 DA            push d
14606  5F67 FA 05 00      lea d, [bp + 5] ; $k
14607  5F6A FD 2A         mov d, [d]
14608  5F6C 58 00 00      add d, 0
14609  5F6F 32            mov bl, [d]
14610  5F70 A7 00         mov bh, 0
14611  5F72 FD AB         swp b
14612  5F74 D8            push b
14613  5F75 07 F9 1C      call TO_FIXED00
14614  5F78 51 02 00      add sp, 2
14615  5F7B             ; START TERMS
14616  5F7B D7            push a
14617  5F7C 11            mov a, b
14618  5F7D 3B 0A 61      mov d, _ship_y ; $ship_y
14619  5F80 2A            mov b, [d]
14620  5F81 60            sub a, b
14621  5F82 27            mov b, a
14622  5F83 E4            pop a
14623  5F84             ; END TERMS
14624  5F84 FD AB         swp b
14625  5F86 D8            push b
14626  5F87 07 E5 5E      call square00
14627  5F8A 51 02 00      add sp, 2
14628  5F8D E7            pop d
14629  5F8E FD 43         mov [d], b
14630  5F90             ;; j = j + square00(TO_FIXED00(k->x) - ship_x); 
14631  5F90 FA FF FF      lea d, [bp + -1] ; $j
14632  5F93 DA            push d
14633  5F94 FA FF FF      lea d, [bp + -1] ; $j
14634  5F97 2A            mov b, [d]
14635  5F98             ; START TERMS
14636  5F98 D7            push a
14637  5F99 11            mov a, b
14638  5F9A FA 05 00      lea d, [bp + 5] ; $k
14639  5F9D FD 2A         mov d, [d]
14640  5F9F 58 01 00      add d, 1
14641  5FA2 32            mov bl, [d]
14642  5FA3 A7 00         mov bh, 0
14643  5FA5 FD AB         swp b
14644  5FA7 D8            push b
14645  5FA8 07 F9 1C      call TO_FIXED00
14646  5FAB 51 02 00      add sp, 2
14647  5FAE             ; START TERMS
14648  5FAE D7            push a
14649  5FAF 11            mov a, b
14650  5FB0 3B 0C 61      mov d, _ship_x ; $ship_x
14651  5FB3 2A            mov b, [d]
14652  5FB4 60            sub a, b
14653  5FB5 27            mov b, a
14654  5FB6 E4            pop a
14655  5FB7             ; END TERMS
14656  5FB7 FD AB         swp b
14657  5FB9 D8            push b
14658  5FBA 07 E5 5E      call square00
14659  5FBD 51 02 00      add sp, 2
14660  5FC0 56            add b, a
14661  5FC1 E4            pop a
14662  5FC2             ; END TERMS
14663  5FC2 E7            pop d
14664  5FC3 FD 43         mov [d], b
14665  5FC5             ;; j = isqrt(j); 
14666  5FC5 FA FF FF      lea d, [bp + -1] ; $j
14667  5FC8 DA            push d
14668  5FC9 FA FF FF      lea d, [bp + -1] ; $j
14669  5FCC 2A            mov b, [d]
14670  5FCD FD AB         swp b
14671  5FCF D8            push b
14672  5FD0 07 32 5E      call isqrt
14673  5FD3 51 02 00      add sp, 2
14674  5FD6 E7            pop d
14675  5FD7 FD 43         mov [d], b
14676  5FD9             ;; j =j* 10; 
14677  5FD9 FA FF FF      lea d, [bp + -1] ; $j
14678  5FDC DA            push d
14679  5FDD FA FF FF      lea d, [bp + -1] ; $j
14680  5FE0 2A            mov b, [d]
14681  5FE1             ; START FACTORS
14682  5FE1 D7            push a
14683  5FE2 11            mov a, b
14684  5FE3 26 0A 00      mov b, $a
14685  5FE6 AC            mul a, b ; *
14686  5FE7 11            mov a, b
14687  5FE8 27            mov b, a
14688  5FE9 E4            pop a
14689  5FEA             ; END FACTORS
14690  5FEA E7            pop d
14691  5FEB FD 43         mov [d], b
14692  5FED             ;; return j; 
14693  5FED FA FF FF      lea d, [bp + -1] ; $j
14694  5FF0 2A            mov b, [d]
14695  5FF1 F9            leave
14696  5FF2 09            ret
14697  5FF3             
14698  5FF3             cint100:
14699  5FF3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14700  5FF6             ;; return (d + 50) / 100; 
14701  5FF6 FA 05 00      lea d, [bp + 5] ; $d
14702  5FF9 2A            mov b, [d]
14703  5FFA             ; START TERMS
14704  5FFA D7            push a
14705  5FFB 11            mov a, b
14706  5FFC 26 32 00      mov b, $32
14707  5FFF 56            add b, a
14708  6000 E4            pop a
14709  6001             ; END TERMS
14710  6001             ; START FACTORS
14711  6001 D7            push a
14712  6002 11            mov a, b
14713  6003 26 64 00      mov b, $64
14714  6006 AE            div a, b
14715  6007 27            mov b, a
14716  6008 E4            pop a
14717  6009             ; END FACTORS
14718  6009 F9            leave
14719  600A 09            ret
14720  600B             
14721  600B             showfile:
14722  600B F8 00 00      enter 0 ; (push bp; mov bp, sp)
14723  600E F9            leave
14724  600F 09            ret
14725  6010             ; --- END TEXT BLOCK
14726  6010             
14727  6010             ; --- BEGIN DATA BLOCK
14728  6010 00          _starbases: .fill 1, 0
14729  6011 00          _base_y: .fill 1, 0
14730  6012 00          _base_x: .fill 1, 0
14731  6013 00          _starbases_left: .fill 1, 0
14732  6014             _c_data: 
14733  6014 00          .db 
14734  6015 00 00 00 FF .db $0,$0,$0,$ffff,$ffff,$ffff,$0,$1,$1,$1,$0,$1,$1,$1,$0,$ffff,$ffff,$ffff,$0,$1,$1,
14734  6019 FF FF 00 01 
14734  601D 01 01 00 01 
14734  6021 01 01 00 FF 
14734  6025 FF FF 00 01 
14734  6029 01 
14735  602A 00 00 00 00 .fill 9, 0
14735  602E 00 00 00 00 
14735  6032 00 
14736  6033 00          _docked: .fill 1, 0
14737  6034 00 00       _energy: .fill 2, 0
14738  6036 B8 0B       _energy0: .dw 3000
14739  6038 00 00 00 00 _map_data: .fill 162, 0
14739  603C 00 00 00 00 
14739  6040 00 00 00 00 
14739  6044 00 00 00 00 
14739  6048 00 00 00 00 
14739  604C 00 00 00 00 
14739  6050 00 00 00 00 
14739  6054 00 00 00 00 
14739  6058 00 00 00 00 
14739  605C 00 00 00 00 
14739  6060 00 00 00 00 
14739  6064 00 00 00 00 
14739  6068 00 00 00 00 
14739  606C 00 00 00 00 
14739  6070 00 00 00 00 
14739  6074 00 00 00 00 
14739  6078 00 00 00 00 
14739  607C 00 00 00 00 
14739  6080 00 00 00 00 
14739  6084 00 00 00 00 
14739  6088 00 00 00 00 
14739  608C 00 00 00 00 
14739  6090 00 00 00 00 
14739  6094 00 00 00 00 
14739  6098 00 00 00 00 
14739  609C 00 00 00 00 
14739  60A0 00 00 00 00 
14739  60A4 00 00 00 00 
14739  60A8 00 00 00 00 
14739  60AC 00 00 00 00 
14739  60B0 00 00 00 00 
14739  60B4 00 00 00 00 
14739  60B8 00 00 00 00 
14739  60BC 00 00 00 00 
14739  60C0 00 00 00 00 
14739  60C4 00 00 00 00 
14739  60C8 00 00 00 00 
14739  60CC 00 00 00 00 
14739  60D0 00 00 00 00 
14739  60D4 00 00 00 00 
14739  60D8 00 00 
14740  60DA 00 00 00 00 _kdata_data: .fill 12, 0
14740  60DE 00 00 00 00 
14740  60E2 00 00 00 00 
14741  60E6 00          _klingons: .fill 1, 0
14742  60E7 00          _total_klingons: .fill 1, 0
14743  60E8 00          _klingons_left: .fill 1, 0
14744  60E9 00          _torps: .fill 1, 0
14745  60EA 0A          _torps0: .db 10
14746  60EB 00 00       _quad_y: .fill 2, 0
14747  60ED 00 00       _quad_x: .fill 2, 0
14748  60EF 00 00       _shield: .fill 2, 0
14749  60F1 00          _stars: .fill 1, 0
14750  60F2 00 00       _time_start: .fill 2, 0
14751  60F4 00 00       _time_up: .fill 2, 0
14752  60F6 00 00 00 00 _damage_data: .fill 18, 0
14752  60FA 00 00 00 00 
14752  60FE 00 00 00 00 
14752  6102 00 00 00 00 
14752  6106 00 00 
14753  6108 00 00       _d4: .fill 2, 0
14754  610A 00 00       _ship_y: .fill 2, 0
14755  610C 00 00       _ship_x: .fill 2, 0
14756  610E 00 00       _stardate: .fill 2, 0
14757  6110 00 00 00 00 _quad_data: .fill 64, 0
14757  6114 00 00 00 00 
14757  6118 00 00 00 00 
14757  611C 00 00 00 00 
14757  6120 00 00 00 00 
14757  6124 00 00 00 00 
14757  6128 00 00 00 00 
14757  612C 00 00 00 00 
14757  6130 00 00 00 00 
14757  6134 00 00 00 00 
14757  6138 00 00 00 00 
14757  613C 00 00 00 00 
14757  6140 00 00 00 00 
14757  6144 00 00 00 00 
14757  6148 00 00 00 00 
14757  614C 00 00 00 00 
14758  6150 00 00 00 00 _quadname_data: .fill 12, 0
14758  6154 00 00 00 00 
14758  6158 00 00 00 00 
14759  615C 72 65 70 6F _inc_1_data: .db "reports:\n  Incorrect course data, sir!\n", 0
14759  6160 72 74 73 3A 
14759  6164 0A 20 20 49 
14759  6168 6E 63 6F 72 
14759  616C 72 65 63 74 
14759  6170 20 63 6F 75 
14759  6174 72 73 65 20 
14759  6178 64 61 74 61 
14759  617C 2C 20 73 69 
14759  6180 72 21 0A 00 
14760  6184 5C 61       _inc_1: .dw _inc_1_data
14761  6186             _quad_name_data: 
14762  6186 00 63 00 63 .dw __s0, __s0, __s1, __s2, __s3, __s4, __s5, __s6, __s7, __s8, __s9, __s10, __s11, __s12, __s13, __s14, __s15, 
14762  618A 08 63 0E 63 
14762  618E 16 63 1B 63 
14762  6192 23 63 2A 63 
14762  6196 36 63 3D 63 
14762  619A 44 63 4A 63 
14762  619E 52 63 5D 63 
14762  61A2 67 63 6F 63 
14762  61A6 78 63 
14763  61A8 00 00 00 00 .fill 34, 0
14763  61AC 00 00 00 00 
14763  61B0 00 00 00 00 
14763  61B4 00 00 00 00 
14763  61B8 00 00 00 00 
14763  61BC 00 00 00 00 
14763  61C0 00 00 00 00 
14763  61C4 00 00 00 00 
14763  61C8 00 00 
14764  61CA             _device_name_data: 
14765  61CA 7E 63 7E 63 .dw __s16, __s16, __s17, __s18, __s19, __s20, __s21, __s22, __s23, 
14765  61CE 8B 63 9F 63 
14765  61D2 B2 63 C1 63 
14765  61D6 CE 63 DD 63 
14765  61DA EC 63 
14766  61DC 00 00 00 00 .fill 18, 0
14766  61E0 00 00 00 00 
14766  61E4 00 00 00 00 
14766  61E8 00 00 00 00 
14766  61EC 00 00 
14767  61EE 44 61 6D 61 _dcr_1_data: .db "Damage Control report:", 0
14767  61F2 67 65 20 43 
14767  61F6 6F 6E 74 72 
14767  61FA 6F 6C 20 72 
14767  61FE 65 70 6F 72 
14767  6202 74 3A 00 
14768  6205 EE 61       _dcr_1: .dw _dcr_1_data
14769  6207             _plural_2_data: 
14770  6207 00 00       .db $0,$0,
14771  6209             _plural_data: 
14772  6209 69 73 00    .db $69,$73,$0,
14773  620C 00          .fill 1, 0
14774  620D             _warpmax_data: 
14775  620D 08          .db $8,
14776  620E 00 00 00    .fill 3, 0
14777  6211 2D 2D 2D 2D _srs_1_data: .db "------------------------", 0
14777  6215 2D 2D 2D 2D 
14777  6219 2D 2D 2D 2D 
14777  621D 2D 2D 2D 2D 
14777  6221 2D 2D 2D 2D 
14777  6225 2D 2D 2D 2D 
14777  6229 00 
14778  622A 11 62       _srs_1: .dw _srs_1_data
14779  622C             _tilestr_data: 
14780  622C FD 63 01 64 .dw __s24, __s25, __s26, __s27, __s28, 
14780  6230 05 64 09 64 
14780  6234 0D 64 
14781  6236 00 00 00 00 .fill 10, 0
14781  623A 00 00 00 00 
14781  623E 00 00 
14782  6240 2D 2D 2D 2D _lrs_1_data: .db "-------------------\n", 0
14782  6244 2D 2D 2D 2D 
14782  6248 2D 2D 2D 2D 
14782  624C 2D 2D 2D 2D 
14782  6250 2D 2D 2D 0A 
14782  6254 00 
14783  6255 40 62       _lrs_1: .dw _lrs_1_data
14784  6257 20 20 20 2D _gr_1_data: .db "   ----- ----- ----- ----- ----- ----- ----- -----\n", 0
14784  625B 2D 2D 2D 2D 
14784  625F 20 2D 2D 2D 
14784  6263 2D 2D 20 2D 
14784  6267 2D 2D 2D 2D 
14784  626B 20 2D 2D 2D 
14784  626F 2D 2D 20 2D 
14784  6273 2D 2D 2D 2D 
14784  6277 20 2D 2D 2D 
14784  627B 2D 2D 20 2D 
14784  627F 2D 2D 2D 2D 
14784  6283 20 2D 2D 2D 
14784  6287 2D 2D 0A 00 
14785  628B 57 62       _gr_1: .dw _gr_1_data
14786  628D 73 00       _str_s_data: .db "s", 0
14787  628F 8D 62       _str_s: .dw _str_s_data
14788  6291 20 20 2D 2D _gm_1_data: .db "  ----- ----- ----- ----- ----- ----- ----- -----\n", 0
14788  6295 2D 2D 2D 20 
14788  6299 2D 2D 2D 2D 
14788  629D 2D 20 2D 2D 
14788  62A1 2D 2D 2D 20 
14788  62A5 2D 2D 2D 2D 
14788  62A9 2D 20 2D 2D 
14788  62AD 2D 2D 2D 20 
14788  62B1 2D 2D 2D 2D 
14788  62B5 2D 20 2D 2D 
14788  62B9 2D 2D 2D 20 
14788  62BD 2D 2D 2D 2D 
14788  62C1 2D 0A 00 
14789  62C4 91 62       _gm_1: .dw _gm_1_data
14790  62C6 20 20 44 49 _dist_1_data: .db "  DISTANCE = \n\n", 0
14790  62CA 53 54 41 4E 
14790  62CE 43 45 20 3D 
14790  62D2 20 0A 0A 00 
14791  62D6 C6 62       _dist_1: .dw _dist_1_data
14792  62D8 00 00 00 00 st_print100_buf_dt: .fill 16, 0
14792  62DC 00 00 00 00 
14792  62E0 00 00 00 00 
14792  62E4 00 00 00 00 
14793  62E8 47 52 45 45 _sC_data: .db "GREEN", 0
14793  62EC 4E 00 
14794  62EE E8 62       _sC: .dw _sC_data
14795  62F0             st_quadrant_name_sect_name_dt: 
out/startrek.asm line 14796: Label not found: (__s166)
out/startrek.asm line 14796: Label not found: (__s166)
out/startrek.asm line 14796: Label not found: (__s166)
out/startrek.asm line 14796: Label not found: (__s166)
out/startrek.asm line 14796: Label not found: (__s167)
out/startrek.asm line 14796: Label not found: (__s167)
out/startrek.asm line 14796: Label not found: (__s168)
out/startrek.asm line 14796: Label not found: (__s168)
out/startrek.asm line 14796: Label not found: (__s169)
out/startrek.asm line 14796: Label not found: (__s169)
out/startrek.asm line 14796: Unknown token: (.)
out/startrek.asm line 14796: Unknown token.    
out/startrek.asm line 14796: Label not found: (fill10)
out/startrek.asm line 14796: Unknown token: (.)
out/startrek.asm line 14796: Unknown token.    
out/startrek.asm line 14796: Label not found: (fill10)
14796  62F0 00 00 00 00 .dw __s166, __s166, __s167, __s168, __s169, .fill 10, 0
14796  62F4 00 00 00 00 
14796  62F8 00 00 00 00 
14796  62FC 00 00 
out/startrek.asm line 14797: Label not found: (st_sect_name_sect_name_dt)
out/startrek.asm line 14797: Label not found: (st_sect_name_sect_name_dt)
14797  62FE 00 00       st_quadrant_name: .dw st_sect_name_sect_name_dt
14798  6300 41 6E 74 61 __s0: .db "Antares", 0
14798  6304 72 65 73 00 
14799  6308 52 69 67 65 __s1: .db "Rigel", 0
14799  630C 6C 00 
14800  630E 50 72 6F 63 __s2: .db "Procyon", 0
14800  6312 79 6F 6E 00 
14801  6316 56 65 67 61 __s3: .db "Vega", 0
14801  631A 00 
14802  631B 43 61 6E 6F __s4: .db "Canopus", 0
14802  631F 70 75 73 00 
14803  6323 41 6C 74 61 __s5: .db "Altair", 0
14803  6327 69 72 00 
14804  632A 53 61 67 69 __s6: .db "Sagittarius", 0
14804  632E 74 74 61 72 
14804  6332 69 75 73 00 
14805  6336 50 6F 6C 6C __s7: .db "Pollux", 0
14805  633A 75 78 00 
14806  633D 53 69 72 69 __s8: .db "Sirius", 0
14806  6341 75 73 00 
14807  6344 44 65 6E 65 __s9: .db "Deneb", 0
14807  6348 62 00 
14808  634A 43 61 70 65 __s10: .db "Capella", 0
14808  634E 6C 6C 61 00 
14809  6352 42 65 74 65 __s11: .db "Betelgeuse", 0
14809  6356 6C 67 65 75 
14809  635A 73 65 00 
14810  635D 41 6C 64 65 __s12: .db "Aldebaran", 0
14810  6361 62 61 72 61 
14810  6365 6E 00 
14811  6367 52 65 67 75 __s13: .db "Regulus", 0
14811  636B 6C 75 73 00 
14812  636F 41 72 63 74 __s14: .db "Arcturus", 0
14812  6373 75 72 75 73 
14812  6377 00 
14813  6378 53 70 69 63 __s15: .db "Spica", 0
14813  637C 61 00 
14814  637E 57 61 72 70 __s16: .db "Warp engines", 0
14814  6382 20 65 6E 67 
14814  6386 69 6E 65 73 
14814  638A 00 
14815  638B 53 68 6F 72 __s17: .db "Short range sensors", 0
14815  638F 74 20 72 61 
14815  6393 6E 67 65 20 
14815  6397 73 65 6E 73 
14815  639B 6F 72 73 00 
14816  639F 4C 6F 6E 67 __s18: .db "Long range sensors", 0
14816  63A3 20 72 61 6E 
14816  63A7 67 65 20 73 
14816  63AB 65 6E 73 6F 
14816  63AF 72 73 00 
14817  63B2 50 68 61 73 __s19: .db "Phaser control", 0
14817  63B6 65 72 20 63 
14817  63BA 6F 6E 74 72 
14817  63BE 6F 6C 00 
14818  63C1 50 68 6F 74 __s20: .db "Photon tubes", 0
14818  63C5 6F 6E 20 74 
14818  63C9 75 62 65 73 
14818  63CD 00 
14819  63CE 44 61 6D 61 __s21: .db "Damage control", 0
14819  63D2 67 65 20 63 
14819  63D6 6F 6E 74 72 
14819  63DA 6F 6C 00 
14820  63DD 53 68 69 65 __s22: .db "Shield control", 0
14820  63E1 6C 64 20 63 
14820  63E5 6F 6E 74 72 
14820  63E9 6F 6C 00 
14821  63EC 4C 69 62 72 __s23: .db "Library computer", 0
14821  63F0 61 72 79 20 
14821  63F4 63 6F 6D 70 
14821  63F8 75 74 65 72 
14821  63FC 00 
14822  63FD 20 20 20 00 __s24: .db "   ", 0
14823  6401 20 2A 20 00 __s25: .db " * ", 0
14824  6405 3E 21 3C 00 __s26: .db ">!<", 0
14825  6409 2B 4B 2B 00 __s27: .db "+K+", 0
14826  640D 3C 2A 3E 00 __s28: .db "<*>", 0
14827  6411 55 6E 65 78 __s29: .db "Unexpected format in printf.", 0
14827  6415 70 65 63 74 
14827  6419 65 64 20 66 
14827  641D 6F 72 6D 61 
14827  6421 74 20 69 6E 
14827  6425 20 70 72 69 
14827  6429 6E 74 66 2E 
14827  642D 00 
14828  642E 45 72 72 6F __s30: .db "Error: Unknown argument type.\n", 0
14828  6432 72 3A 20 55 
14828  6436 6E 6B 6E 6F 
14828  643A 77 6E 20 61 
14828  643E 72 67 75 6D 
14828  6442 65 6E 74 20 
14828  6446 74 79 70 65 
14828  644A 2E 0A 00 
14829  644D 1B 5B 32 4A __s31: .db "\033[2J\033[H", 0
14829  6451 1B 5B 48 00 
14830  6455 61 72 65 00 __s32: .db "are", 0
14831  6459 69 73 00    __s33: .db "is", 0
14832  645C 25 73 20 25 __s34: .db "%s %s inoperable.\n", 0
14832  6460 73 20 69 6E 
14832  6464 6F 70 65 72 
14832  6468 61 62 6C 65 
14832  646C 2E 0A 00 
14833  646F 73 74 61 72 __s35: .db "startrek.intro", 0
14833  6473 74 72 65 6B 
14833  6477 2E 69 6E 74 
14833  647B 72 6F 00 
14834  647E 73 74 61 72 __s36: .db "startrek.doc", 0
14834  6482 74 72 65 6B 
14834  6486 2E 64 6F 63 
14834  648A 00 
14835  648B 73 74 61 72 __s37: .db "startrek.logo", 0
14835  648F 74 72 65 6B 
14835  6493 2E 6C 6F 67 
14835  6497 6F 00 
14836  6499 73 74 61 72 __s38: .db "startrek.fatal", 0
14836  649D 74 72 65 6B 
14836  64A1 2E 66 61 74 
14836  64A5 61 6C 00 
14837  64A8 43 6F 6D 6D __s39: .db "Command? ", 0
14837  64AC 61 6E 64 3F 
14837  64B0 20 00 
14838  64B2 6E 61 76 00 __s40: .db "nav", 0
14839  64B6 73 72 73 00 __s41: .db "srs", 0
14840  64BA 6C 72 73 00 __s42: .db "lrs", 0
14841  64BE 70 68 61 00 __s43: .db "pha", 0
14842  64C2 74 6F 72 00 __s44: .db "tor", 0
14843  64C6 73 68 69 00 __s45: .db "shi", 0
14844  64CA 64 61 6D 00 __s46: .db "dam", 0
14845  64CE 63 6F 6D 00 __s47: .db "com", 0
14846  64D2 78 78 78 00 __s48: .db "xxx", 0
14847  64D6 45 6E 74 65 __s49: .db "Enter one of the following:\n", 0
14847  64DA 72 20 6F 6E 
14847  64DE 65 20 6F 66 
14847  64E2 20 74 68 65 
14847  64E6 20 66 6F 6C 
14847  64EA 6C 6F 77 69 
14847  64EE 6E 67 3A 0A 
14847  64F2 00 
14848  64F3 20 20 6E 61 __s50: .db "  nav - To Set Course", 0
14848  64F7 76 20 2D 20 
14848  64FB 54 6F 20 53 
14848  64FF 65 74 20 43 
14848  6503 6F 75 72 73 
14848  6507 65 00 
14849  6509 20 20 73 72 __s51: .db "  srs - Short Range Sensors", 0
14849  650D 73 20 2D 20 
14849  6511 53 68 6F 72 
14849  6515 74 20 52 61 
14849  6519 6E 67 65 20 
14849  651D 53 65 6E 73 
14849  6521 6F 72 73 00 
14850  6525 20 20 6C 72 __s52: .db "  lrs - Long Range Sensors", 0
14850  6529 73 20 2D 20 
14850  652D 4C 6F 6E 67 
14850  6531 20 52 61 6E 
14850  6535 67 65 20 53 
14850  6539 65 6E 73 6F 
14850  653D 72 73 00 
14851  6540 20 20 70 68 __s53: .db "  pha - Phasers", 0
14851  6544 61 20 2D 20 
14851  6548 50 68 61 73 
14851  654C 65 72 73 00 
14852  6550 20 20 74 6F __s54: .db "  tor - Photon Torpedoes", 0
14852  6554 72 20 2D 20 
14852  6558 50 68 6F 74 
14852  655C 6F 6E 20 54 
14852  6560 6F 72 70 65 
14852  6564 64 6F 65 73 
14852  6568 00 
14853  6569 20 20 73 68 __s55: .db "  shi - Shield Control", 0
14853  656D 69 20 2D 20 
14853  6571 53 68 69 65 
14853  6575 6C 64 20 43 
14853  6579 6F 6E 74 72 
14853  657D 6F 6C 00 
14854  6580 20 20 64 61 __s56: .db "  dam - Damage Control", 0
14854  6584 6D 20 2D 20 
14854  6588 44 61 6D 61 
14854  658C 67 65 20 43 
14854  6590 6F 6E 74 72 
14854  6594 6F 6C 00 
14855  6597 20 20 63 6F __s57: .db "  com - Library Computer", 0
14855  659B 6D 20 2D 20 
14855  659F 4C 69 62 72 
14855  65A3 61 72 79 20 
14855  65A7 43 6F 6D 70 
14855  65AB 75 74 65 72 
14855  65AF 00 
14856  65B0 20 20 78 78 __s58: .db "  xxx - Resign Command\n", 0
14856  65B4 78 20 2D 20 
14856  65B8 52 65 73 69 
14856  65BC 67 6E 20 43 
14856  65C0 6F 6D 6D 61 
14856  65C4 6E 64 0A 00 
14857  65C8 73 00       __s59: .db "s", 0
14858  65CA 4E 6F 77 20 __s60: .db "Now entering %s quadrant...\n\n", 0
14858  65CE 65 6E 74 65 
14858  65D2 72 69 6E 67 
14858  65D6 20 25 73 20 
14858  65DA 71 75 61 64 
14858  65DE 72 61 6E 74 
14858  65E2 2E 2E 2E 0A 
14858  65E6 0A 00 
14859  65E8 0A 59 6F 75 __s61: .db "\nYour mission begins with your starship located", 0
14859  65EC 72 20 6D 69 
14859  65F0 73 73 69 6F 
14859  65F4 6E 20 62 65 
14859  65F8 67 69 6E 73 
14859  65FC 20 77 69 74 
14859  6600 68 20 79 6F 
14859  6604 75 72 20 73 
14859  6608 74 61 72 73 
14859  660C 68 69 70 20 
14859  6610 6C 6F 63 61 
14859  6614 74 65 64 00 
14860  6618 69 6E 20 74 __s62: .db "in the galactic quadrant %s.\n\n", 0
14860  661C 68 65 20 67 
14860  6620 61 6C 61 63 
14860  6624 74 69 63 20 
14860  6628 71 75 61 64 
14860  662C 72 61 6E 74 
14860  6630 20 25 73 2E 
14860  6634 0A 0A 00 
14861  6637 43 6F 6D 62 __s63: .db "Combat Area  Condition Red\n", 0
14861  663B 61 74 20 41 
14861  663F 72 65 61 20 
14861  6643 20 43 6F 6E 
14861  6647 64 69 74 69 
14861  664B 6F 6E 20 52 
14861  664F 65 64 0A 00 
14862  6653 53 68 69 65 __s64: .db "Shields Dangerously Low\n", 0
14862  6657 6C 64 73 20 
14862  665B 44 61 6E 67 
14862  665F 65 72 6F 75 
14862  6663 73 6C 79 20 
14862  6667 4C 6F 77 0A 
14862  666B 00 
14863  666C 43 6F 75 72 __s65: .db "Course (0-9): ", 0
14863  6670 73 65 20 28 
14863  6674 30 2D 39 29 
14863  6678 3A 20 00 
14864  667B 4C 74 2E 20 __s66: .db "Lt. Sulu%s", 0
14864  667F 53 75 6C 75 
14864  6683 25 73 00 
14865  6686 30 2E 32 00 __s67: .db "0.2", 0
14866  668A 57 61 72 70 __s68: .db "Warp Factor (0-%s): ", 0
14866  668E 20 46 61 63 
14866  6692 74 6F 72 20 
14866  6696 28 30 2D 25 
14866  669A 73 29 3A 20 
14866  669E 00 
14867  669F 57 61 72 70 __s69: .db "Warp Engines are damaged. Maximum speed = Warp 0.2.\n\n", 0
14867  66A3 20 45 6E 67 
14867  66A7 69 6E 65 73 
14867  66AB 20 61 72 65 
14867  66AF 20 64 61 6D 
14867  66B3 61 67 65 64 
14867  66B7 2E 20 4D 61 
14867  66BB 78 69 6D 75 
14867  66BF 6D 20 73 70 
14867  66C3 65 65 64 20 
14867  66C7 3D 20 57 61 
14867  66CB 72 70 20 30 
14867  66CF 2E 32 2E 0A 
14867  66D3 0A 00 
out/startrek.asm line 14868: No terminating quote: ("Chief Engineer Scott reports:\n  The engi; --- END DATA BLOCK)
14868  66D5 43 68 69 65 __s70: .db "Chief Engineer Scott reports:\n  The engi; --- END DATA BLOCK
14868  66D9 66 20 45 6E 
14868  66DD 67 69 6E 65 
14868  66E1 65 72 20 53 
14868  66E5 63 6F 74 74 
14868  66E9 20 72 65 70 
14868  66ED 6F 72 74 73 
14868  66F1 3A 0A 20 20 
14868  66F5 54 68 65 20 
14868  66F9 65 6E 67 69 
14868  66FD 3B 20 2D 2D 
14868  6701 2D 20 45 4E 
14868  6705 44 20 44 41 
14868  6709 54 41 20 42 
14868  670D 4C 4F 43 4B 
14869  6711             
14870  6711             .end
tasm: Number of errors = 233
