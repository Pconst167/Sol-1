0001   0000             ; --- FILENAME: games/startrek
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ;; intro(); 
0011   0408 07 20 21      call intro
0012   040B             ;; new_game(); 
0013   040B 07 81 21      call new_game
0014   040E             ;; return (0); 
0015   040E 26 00 00      mov b, $0
0016   0411 F9            leave
0017   0412 05 0B         syscall sys_terminate_proc
0018   0414             
0019   0414             strcpy:
0020   0414 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0021   0417             ;; char *psrc; 
0022   0417 52 02 00      sub sp, 2 ; psrc
0023   041A             ;; char *pdest; 
0024   041A 52 02 00      sub sp, 2 ; pdest
0025   041D             ;; psrc = src; 
0026   041D FA FF FF      lea d, [bp + -1] ; $psrc
0027   0420 DA            push d
0028   0421 FA 07 00      lea d, [bp + 7] ; $src
0029   0424 2A            mov b, [d]
0030   0425 E7            pop d
0031   0426 FD 43         mov [d], b
0032   0428             ;; pdest = dest; 
0033   0428 FA FD FF      lea d, [bp + -3] ; $pdest
0034   042B DA            push d
0035   042C FA 05 00      lea d, [bp + 5] ; $dest
0036   042F 2A            mov b, [d]
0037   0430 E7            pop d
0038   0431 FD 43         mov [d], b
0039   0433             ;; while(*psrc) *pdest++ = *psrc++; 
0040   0433             _while1_cond:
0041   0433 FA FF FF      lea d, [bp + -1] ; $psrc
0042   0436 2A            mov b, [d]
0043   0437 74            mov d, b
0044   0438 32            mov bl, [d]
0045   0439 A7 00         mov bh, 0
0046   043B C0 00 00      cmp b, 0
0047   043E C6 66 04      je _while1_exit
0048   0441             _while1_block:
0049   0441             ;; *pdest++ = *psrc++; 
0050   0441 FA FD FF      lea d, [bp + -3] ; $pdest
0051   0444 2A            mov b, [d]
0052   0445 D8            push b
0053   0446 FD 77         inc b
0054   0448 FA FD FF      lea d, [bp + -3] ; $pdest
0055   044B FD 43         mov [d], b
0056   044D E5            pop b
0057   044E D8            push b
0058   044F FA FF FF      lea d, [bp + -1] ; $psrc
0059   0452 2A            mov b, [d]
0060   0453 D8            push b
0061   0454 FD 77         inc b
0062   0456 FA FF FF      lea d, [bp + -1] ; $psrc
0063   0459 FD 43         mov [d], b
0064   045B E5            pop b
0065   045C 74            mov d, b
0066   045D 32            mov bl, [d]
0067   045E A7 00         mov bh, 0
0068   0460 E7            pop d
0069   0461 FD 3E         mov [d], bl
0070   0463 0A 33 04      jmp _while1_cond
0071   0466             _while1_exit:
0072   0466             ;; *pdest = '\0'; 
0073   0466 FA FD FF      lea d, [bp + -3] ; $pdest
0074   0469 2A            mov b, [d]
0075   046A D8            push b
0076   046B 26 00 00      mov b, $0
0077   046E E7            pop d
0078   046F FD 3E         mov [d], bl
0079   0471 F9            leave
0080   0472 09            ret
0081   0473             
0082   0473             strcmp:
0083   0473 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0084   0476             ;; while (*s1 && (*s1 == *s2)) { 
0085   0476             _while2_cond:
0086   0476 FA 05 00      lea d, [bp + 5] ; $s1
0087   0479 2A            mov b, [d]
0088   047A 74            mov d, b
0089   047B 32            mov bl, [d]
0090   047C A7 00         mov bh, 0
0091   047E D7            push a
0092   047F 11            mov a, b
0093   0480 FA 05 00      lea d, [bp + 5] ; $s1
0094   0483 2A            mov b, [d]
0095   0484 74            mov d, b
0096   0485 32            mov bl, [d]
0097   0486 A7 00         mov bh, 0
0098   0488             ; START RELATIONAL
0099   0488 D7            push a
0100   0489 11            mov a, b
0101   048A FA 07 00      lea d, [bp + 7] ; $s2
0102   048D 2A            mov b, [d]
0103   048E 74            mov d, b
0104   048F 32            mov bl, [d]
0105   0490 A7 00         mov bh, 0
0106   0492 B0            cmp a, b
0107   0493 FD 71         seq ; ==
0108   0495 E4            pop a
0109   0496             ; END RELATIONAL
0110   0496 FD A7         sand a, b
0111   0498 E4            pop a
0112   0499 C0 00 00      cmp b, 0
0113   049C C6 BC 04      je _while2_exit
0114   049F             _while2_block:
0115   049F             ;; s1++; 
0116   049F FA 05 00      lea d, [bp + 5] ; $s1
0117   04A2 2A            mov b, [d]
0118   04A3 D8            push b
0119   04A4 FD 77         inc b
0120   04A6 FA 05 00      lea d, [bp + 5] ; $s1
0121   04A9 FD 43         mov [d], b
0122   04AB E5            pop b
0123   04AC             ;; s2++; 
0124   04AC FA 07 00      lea d, [bp + 7] ; $s2
0125   04AF 2A            mov b, [d]
0126   04B0 D8            push b
0127   04B1 FD 77         inc b
0128   04B3 FA 07 00      lea d, [bp + 7] ; $s2
0129   04B6 FD 43         mov [d], b
0130   04B8 E5            pop b
0131   04B9 0A 76 04      jmp _while2_cond
0132   04BC             _while2_exit:
0133   04BC             ;; return *s1 - *s2; 
0134   04BC FA 05 00      lea d, [bp + 5] ; $s1
0135   04BF 2A            mov b, [d]
0136   04C0 74            mov d, b
0137   04C1 32            mov bl, [d]
0138   04C2 A7 00         mov bh, 0
0139   04C4             ; START TERMS
0140   04C4 D7            push a
0141   04C5 11            mov a, b
0142   04C6 FA 07 00      lea d, [bp + 7] ; $s2
0143   04C9 2A            mov b, [d]
0144   04CA 74            mov d, b
0145   04CB 32            mov bl, [d]
0146   04CC A7 00         mov bh, 0
0147   04CE 60            sub a, b
0148   04CF 27            mov b, a
0149   04D0 E4            pop a
0150   04D1             ; END TERMS
0151   04D1 F9            leave
0152   04D2 09            ret
0153   04D3             
0154   04D3             strncmp:
0155   04D3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0156   04D6 F9            leave
0157   04D7 09            ret
0158   04D8             
0159   04D8             strcat:
0160   04D8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0161   04DB             ;; int dest_len; 
0162   04DB 52 02 00      sub sp, 2 ; dest_len
0163   04DE             ;; int i; 
0164   04DE 52 02 00      sub sp, 2 ; i
0165   04E1             ;; dest_len = strlen(dest); 
0166   04E1 FA FF FF      lea d, [bp + -1] ; $dest_len
0167   04E4 DA            push d
0168   04E5 FA 05 00      lea d, [bp + 5] ; $dest
0169   04E8 2A            mov b, [d]
0170   04E9 FD AB         swp b
0171   04EB D8            push b
0172   04EC 07 8E 05      call strlen
0173   04EF 51 02 00      add sp, 2
0174   04F2 E7            pop d
0175   04F3 FD 43         mov [d], b
0176   04F5             ;; for (i = 0; src[i] != 0; i=i+1) { 
0177   04F5             _for3_init:
0178   04F5 FA FD FF      lea d, [bp + -3] ; $i
0179   04F8 DA            push d
0180   04F9 26 00 00      mov b, $0
0181   04FC E7            pop d
0182   04FD FD 43         mov [d], b
0183   04FF             _for3_cond:
0184   04FF FA 07 00      lea d, [bp + 7] ; $src
0185   0502 FD 2A         mov d, [d]
0186   0504 D7            push a
0187   0505 DA            push d
0188   0506 FA FD FF      lea d, [bp + -3] ; $i
0189   0509 2A            mov b, [d]
0190   050A E7            pop d
0191   050B FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0192   050F E4            pop a
0193   0510 32            mov bl, [d]
0194   0511 A7 00         mov bh, 0
0195   0513             ; START RELATIONAL
0196   0513 D7            push a
0197   0514 11            mov a, b
0198   0515 26 00 00      mov b, $0
0199   0518 B0            cmp a, b
0200   0519 FD 72         sneq ; !=
0201   051B E4            pop a
0202   051C             ; END RELATIONAL
0203   051C C0 00 00      cmp b, 0
0204   051F C6 68 05      je _for3_exit
0205   0522             _for3_block:
0206   0522             ;; dest[dest_len + i] = src[i]; 
0207   0522 FA 05 00      lea d, [bp + 5] ; $dest
0208   0525 FD 2A         mov d, [d]
0209   0527 D7            push a
0210   0528 DA            push d
0211   0529 FA FF FF      lea d, [bp + -1] ; $dest_len
0212   052C 2A            mov b, [d]
0213   052D             ; START TERMS
0214   052D D7            push a
0215   052E 11            mov a, b
0216   052F FA FD FF      lea d, [bp + -3] ; $i
0217   0532 2A            mov b, [d]
0218   0533 56            add b, a
0219   0534 E4            pop a
0220   0535             ; END TERMS
0221   0535 E7            pop d
0222   0536 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0223   053A E4            pop a
0224   053B DA            push d
0225   053C FA 07 00      lea d, [bp + 7] ; $src
0226   053F FD 2A         mov d, [d]
0227   0541 D7            push a
0228   0542 DA            push d
0229   0543 FA FD FF      lea d, [bp + -3] ; $i
0230   0546 2A            mov b, [d]
0231   0547 E7            pop d
0232   0548 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0233   054C E4            pop a
0234   054D 32            mov bl, [d]
0235   054E A7 00         mov bh, 0
0236   0550 E7            pop d
0237   0551 FD 3E         mov [d], bl
0238   0553             _for3_update:
0239   0553 FA FD FF      lea d, [bp + -3] ; $i
0240   0556 DA            push d
0241   0557 FA FD FF      lea d, [bp + -3] ; $i
0242   055A 2A            mov b, [d]
0243   055B             ; START TERMS
0244   055B D7            push a
0245   055C 11            mov a, b
0246   055D 26 01 00      mov b, $1
0247   0560 56            add b, a
0248   0561 E4            pop a
0249   0562             ; END TERMS
0250   0562 E7            pop d
0251   0563 FD 43         mov [d], b
0252   0565 0A FF 04      jmp _for3_cond
0253   0568             _for3_exit:
0254   0568             ;; dest[dest_len + i] = 0; 
0255   0568 FA 05 00      lea d, [bp + 5] ; $dest
0256   056B FD 2A         mov d, [d]
0257   056D D7            push a
0258   056E DA            push d
0259   056F FA FF FF      lea d, [bp + -1] ; $dest_len
0260   0572 2A            mov b, [d]
0261   0573             ; START TERMS
0262   0573 D7            push a
0263   0574 11            mov a, b
0264   0575 FA FD FF      lea d, [bp + -3] ; $i
0265   0578 2A            mov b, [d]
0266   0579 56            add b, a
0267   057A E4            pop a
0268   057B             ; END TERMS
0269   057B E7            pop d
0270   057C FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0271   0580 E4            pop a
0272   0581 DA            push d
0273   0582 26 00 00      mov b, $0
0274   0585 E7            pop d
0275   0586 FD 3E         mov [d], bl
0276   0588             ;; return dest; 
0277   0588 FA 05 00      lea d, [bp + 5] ; $dest
0278   058B 2A            mov b, [d]
0279   058C F9            leave
0280   058D 09            ret
0281   058E             
0282   058E             strlen:
0283   058E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0284   0591             ;; int length; 
0285   0591 52 02 00      sub sp, 2 ; length
0286   0594             ;; length = 0; 
0287   0594 FA FF FF      lea d, [bp + -1] ; $length
0288   0597 DA            push d
0289   0598 26 00 00      mov b, $0
0290   059B E7            pop d
0291   059C FD 43         mov [d], b
0292   059E             ;; while (str[length] != 0) { 
0293   059E             _while4_cond:
0294   059E FA 05 00      lea d, [bp + 5] ; $str
0295   05A1 FD 2A         mov d, [d]
0296   05A3 D7            push a
0297   05A4 DA            push d
0298   05A5 FA FF FF      lea d, [bp + -1] ; $length
0299   05A8 2A            mov b, [d]
0300   05A9 E7            pop d
0301   05AA FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0302   05AE E4            pop a
0303   05AF 32            mov bl, [d]
0304   05B0 A7 00         mov bh, 0
0305   05B2             ; START RELATIONAL
0306   05B2 D7            push a
0307   05B3 11            mov a, b
0308   05B4 26 00 00      mov b, $0
0309   05B7 B0            cmp a, b
0310   05B8 FD 72         sneq ; !=
0311   05BA E4            pop a
0312   05BB             ; END RELATIONAL
0313   05BB C0 00 00      cmp b, 0
0314   05BE C6 D1 05      je _while4_exit
0315   05C1             _while4_block:
0316   05C1             ;; length++; 
0317   05C1 FA FF FF      lea d, [bp + -1] ; $length
0318   05C4 2A            mov b, [d]
0319   05C5 D8            push b
0320   05C6 FD 77         inc b
0321   05C8 FA FF FF      lea d, [bp + -1] ; $length
0322   05CB FD 43         mov [d], b
0323   05CD E5            pop b
0324   05CE 0A 9E 05      jmp _while4_cond
0325   05D1             _while4_exit:
0326   05D1             ;; return length; 
0327   05D1 FA FF FF      lea d, [bp + -1] ; $length
0328   05D4 2A            mov b, [d]
0329   05D5 F9            leave
0330   05D6 09            ret
0331   05D7             
0332   05D7             exit:
0333   05D7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0334   05DA             
0335   05DA             ; --- BEGIN INLINE ASM BLOCK
0336   05DA 05 0B         syscall sys_terminate_proc
0337   05DC             ; --- END INLINE ASM BLOCK
0338   05DC             
0339   05DC F9            leave
0340   05DD 09            ret
0341   05DE             
0342   05DE             memset:
0343   05DE F8 00 00      enter 0 ; (push bp; mov bp, sp)
0344   05E1             ;; int i; 
0345   05E1 52 02 00      sub sp, 2 ; i
0346   05E4             ;; for(i = 0; i < size; i++){ 
0347   05E4             _for5_init:
0348   05E4 FA FF FF      lea d, [bp + -1] ; $i
0349   05E7 DA            push d
0350   05E8 26 00 00      mov b, $0
0351   05EB E7            pop d
0352   05EC FD 43         mov [d], b
0353   05EE             _for5_cond:
0354   05EE FA FF FF      lea d, [bp + -1] ; $i
0355   05F1 2A            mov b, [d]
0356   05F2             ; START RELATIONAL
0357   05F2 D7            push a
0358   05F3 11            mov a, b
0359   05F4 FA 08 00      lea d, [bp + 8] ; $size
0360   05F7 2A            mov b, [d]
0361   05F8 B0            cmp a, b
0362   05F9 FD 73         slt ; < (signed)
0363   05FB E4            pop a
0364   05FC             ; END RELATIONAL
0365   05FC C0 00 00      cmp b, 0
0366   05FF C6 28 06      je _for5_exit
0367   0602             _for5_block:
0368   0602             ;; *(s+i) = c; 
0369   0602 FA 05 00      lea d, [bp + 5] ; $s
0370   0605 2A            mov b, [d]
0371   0606             ; START TERMS
0372   0606 D7            push a
0373   0607 11            mov a, b
0374   0608 FA FF FF      lea d, [bp + -1] ; $i
0375   060B 2A            mov b, [d]
0376   060C 56            add b, a
0377   060D E4            pop a
0378   060E             ; END TERMS
0379   060E D8            push b
0380   060F FA 07 00      lea d, [bp + 7] ; $c
0381   0612 32            mov bl, [d]
0382   0613 A7 00         mov bh, 0
0383   0615 E7            pop d
0384   0616 FD 3E         mov [d], bl
0385   0618             _for5_update:
0386   0618 FA FF FF      lea d, [bp + -1] ; $i
0387   061B 2A            mov b, [d]
0388   061C D8            push b
0389   061D FD 77         inc b
0390   061F FA FF FF      lea d, [bp + -1] ; $i
0391   0622 FD 43         mov [d], b
0392   0624 E5            pop b
0393   0625 0A EE 05      jmp _for5_cond
0394   0628             _for5_exit:
0395   0628             ;; return s; 
0396   0628 FA 05 00      lea d, [bp + 5] ; $s
0397   062B 2A            mov b, [d]
0398   062C F9            leave
0399   062D 09            ret
0400   062E             
0401   062E             atoi:
0402   062E F8 00 00      enter 0 ; (push bp; mov bp, sp)
0403   0631             ;; int result = 0;  // Initialize result 
0404   0631 52 02 00      sub sp, 2 ; result
0405   0634             ; --- START LOCAL VAR INITIALIZATION
0406   0634 FA FF FF      lea d, [bp + -1] ; $result
0407   0637 DA            push d
0408   0638 26 00 00      mov b, $0
0409   063B E7            pop d
0410   063C FD 43         mov [d], b
0411   063E             ; --- END LOCAL VAR INITIALIZATION
0412   063E             ;; int sign = 1;    // Initialize sign as positive 
0413   063E 52 02 00      sub sp, 2 ; sign
0414   0641             ; --- START LOCAL VAR INITIALIZATION
0415   0641 FA FD FF      lea d, [bp + -3] ; $sign
0416   0644 DA            push d
0417   0645 26 01 00      mov b, $1
0418   0648 E7            pop d
0419   0649 FD 43         mov [d], b
0420   064B             ; --- END LOCAL VAR INITIALIZATION
0421   064B             ;; while (*str == ' ') str++; 
0422   064B             _while6_cond:
0423   064B FA 05 00      lea d, [bp + 5] ; $str
0424   064E 2A            mov b, [d]
0425   064F 74            mov d, b
0426   0650 32            mov bl, [d]
0427   0651 A7 00         mov bh, 0
0428   0653             ; START RELATIONAL
0429   0653 D7            push a
0430   0654 11            mov a, b
0431   0655 26 20 00      mov b, $20
0432   0658 B0            cmp a, b
0433   0659 FD 71         seq ; ==
0434   065B E4            pop a
0435   065C             ; END RELATIONAL
0436   065C C0 00 00      cmp b, 0
0437   065F C6 72 06      je _while6_exit
0438   0662             _while6_block:
0439   0662             ;; str++; 
0440   0662 FA 05 00      lea d, [bp + 5] ; $str
0441   0665 2A            mov b, [d]
0442   0666 D8            push b
0443   0667 FD 77         inc b
0444   0669 FA 05 00      lea d, [bp + 5] ; $str
0445   066C FD 43         mov [d], b
0446   066E E5            pop b
0447   066F 0A 4B 06      jmp _while6_cond
0448   0672             _while6_exit:
0449   0672             ;; if (*str == '-' || *str == '+') { 
0450   0672             _if7_cond:
0451   0672 FA 05 00      lea d, [bp + 5] ; $str
0452   0675 2A            mov b, [d]
0453   0676 74            mov d, b
0454   0677 32            mov bl, [d]
0455   0678 A7 00         mov bh, 0
0456   067A             ; START RELATIONAL
0457   067A D7            push a
0458   067B 11            mov a, b
0459   067C 26 2D 00      mov b, $2d
0460   067F B0            cmp a, b
0461   0680 FD 71         seq ; ==
0462   0682 E4            pop a
0463   0683             ; END RELATIONAL
0464   0683 D7            push a
0465   0684 11            mov a, b
0466   0685 FA 05 00      lea d, [bp + 5] ; $str
0467   0688 2A            mov b, [d]
0468   0689 74            mov d, b
0469   068A 32            mov bl, [d]
0470   068B A7 00         mov bh, 0
0471   068D             ; START RELATIONAL
0472   068D D7            push a
0473   068E 11            mov a, b
0474   068F 26 2B 00      mov b, $2b
0475   0692 B0            cmp a, b
0476   0693 FD 71         seq ; ==
0477   0695 E4            pop a
0478   0696             ; END RELATIONAL
0479   0696 FD A8         sor a, b ; ||
0480   0698 E4            pop a
0481   0699 C0 00 00      cmp b, 0
0482   069C C6 D3 06      je _if7_exit
0483   069F             _if7_true:
0484   069F             ;; if (*str == '-') sign = -1; 
0485   069F             _if8_cond:
0486   069F FA 05 00      lea d, [bp + 5] ; $str
0487   06A2 2A            mov b, [d]
0488   06A3 74            mov d, b
0489   06A4 32            mov bl, [d]
0490   06A5 A7 00         mov bh, 0
0491   06A7             ; START RELATIONAL
0492   06A7 D7            push a
0493   06A8 11            mov a, b
0494   06A9 26 2D 00      mov b, $2d
0495   06AC B0            cmp a, b
0496   06AD FD 71         seq ; ==
0497   06AF E4            pop a
0498   06B0             ; END RELATIONAL
0499   06B0 C0 00 00      cmp b, 0
0500   06B3 C6 C3 06      je _if8_exit
0501   06B6             _if8_true:
0502   06B6             ;; sign = -1; 
0503   06B6 FA FD FF      lea d, [bp + -3] ; $sign
0504   06B9 DA            push d
0505   06BA 26 FF FF      mov b, $ffff
0506   06BD E7            pop d
0507   06BE FD 43         mov [d], b
0508   06C0 0A C3 06      jmp _if8_exit
0509   06C3             _if8_exit:
0510   06C3             ;; str++; 
0511   06C3 FA 05 00      lea d, [bp + 5] ; $str
0512   06C6 2A            mov b, [d]
0513   06C7 D8            push b
0514   06C8 FD 77         inc b
0515   06CA FA 05 00      lea d, [bp + 5] ; $str
0516   06CD FD 43         mov [d], b
0517   06CF E5            pop b
0518   06D0 0A D3 06      jmp _if7_exit
0519   06D3             _if7_exit:
0520   06D3             ;; while (*str >= '0' && *str <= '9') { 
0521   06D3             _while9_cond:
0522   06D3 FA 05 00      lea d, [bp + 5] ; $str
0523   06D6 2A            mov b, [d]
0524   06D7 74            mov d, b
0525   06D8 32            mov bl, [d]
0526   06D9 A7 00         mov bh, 0
0527   06DB             ; START RELATIONAL
0528   06DB D7            push a
0529   06DC 11            mov a, b
0530   06DD 26 30 00      mov b, $30
0531   06E0 B0            cmp a, b
0532   06E1 FD 82         sgeu ; >= (unsigned)
0533   06E3 E4            pop a
0534   06E4             ; END RELATIONAL
0535   06E4 D7            push a
0536   06E5 11            mov a, b
0537   06E6 FA 05 00      lea d, [bp + 5] ; $str
0538   06E9 2A            mov b, [d]
0539   06EA 74            mov d, b
0540   06EB 32            mov bl, [d]
0541   06EC A7 00         mov bh, 0
0542   06EE             ; START RELATIONAL
0543   06EE D7            push a
0544   06EF 11            mov a, b
0545   06F0 26 39 00      mov b, $39
0546   06F3 B0            cmp a, b
0547   06F4 FD 75         slu ; <= (unsigned)
0548   06F6 E4            pop a
0549   06F7             ; END RELATIONAL
0550   06F7 FD A7         sand a, b
0551   06F9 E4            pop a
0552   06FA C0 00 00      cmp b, 0
0553   06FD C6 38 07      je _while9_exit
0554   0700             _while9_block:
0555   0700             ;; result = result * 10 + (*str - '0'); 
0556   0700 FA FF FF      lea d, [bp + -1] ; $result
0557   0703 DA            push d
0558   0704 FA FF FF      lea d, [bp + -1] ; $result
0559   0707 2A            mov b, [d]
0560   0708             ; START FACTORS
0561   0708 D7            push a
0562   0709 11            mov a, b
0563   070A 26 0A 00      mov b, $a
0564   070D AC            mul a, b ; *
0565   070E 11            mov a, b
0566   070F 27            mov b, a
0567   0710 E4            pop a
0568   0711             ; END FACTORS
0569   0711             ; START TERMS
0570   0711 D7            push a
0571   0712 11            mov a, b
0572   0713 FA 05 00      lea d, [bp + 5] ; $str
0573   0716 2A            mov b, [d]
0574   0717 74            mov d, b
0575   0718 32            mov bl, [d]
0576   0719 A7 00         mov bh, 0
0577   071B             ; START TERMS
0578   071B D7            push a
0579   071C 11            mov a, b
0580   071D 26 30 00      mov b, $30
0581   0720 60            sub a, b
0582   0721 27            mov b, a
0583   0722 E4            pop a
0584   0723             ; END TERMS
0585   0723 56            add b, a
0586   0724 E4            pop a
0587   0725             ; END TERMS
0588   0725 E7            pop d
0589   0726 FD 43         mov [d], b
0590   0728             ;; str++; 
0591   0728 FA 05 00      lea d, [bp + 5] ; $str
0592   072B 2A            mov b, [d]
0593   072C D8            push b
0594   072D FD 77         inc b
0595   072F FA 05 00      lea d, [bp + 5] ; $str
0596   0732 FD 43         mov [d], b
0597   0734 E5            pop b
0598   0735 0A D3 06      jmp _while9_cond
0599   0738             _while9_exit:
0600   0738             ;; return sign * result; 
0601   0738 FA FD FF      lea d, [bp + -3] ; $sign
0602   073B 2A            mov b, [d]
0603   073C             ; START FACTORS
0604   073C D7            push a
0605   073D 11            mov a, b
0606   073E FA FF FF      lea d, [bp + -1] ; $result
0607   0741 2A            mov b, [d]
0608   0742 AC            mul a, b ; *
0609   0743 11            mov a, b
0610   0744 27            mov b, a
0611   0745 E4            pop a
0612   0746             ; END FACTORS
0613   0746 F9            leave
0614   0747 09            ret
0615   0748             
0616   0748             rand:
0617   0748 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0618   074B             ;; int  sec; 
0619   074B 52 02 00      sub sp, 2 ; sec
0620   074E             
0621   074E             ; --- BEGIN INLINE ASM BLOCK
0622   074E 19 00         mov al, 0
0623   0750 05 01         syscall sys_rtc					
0624   0752 1A            mov al, ah
0625   0753 FA FF FF      lea d, [bp + -1] ; $sec
0626   0756 1E            mov al, [d]
0627   0757 22 00         mov ah, 0
0628   0759             ; --- END INLINE ASM BLOCK
0629   0759             
0630   0759             ;; return sec; 
0631   0759 FA FF FF      lea d, [bp + -1] ; $sec
0632   075C 2A            mov b, [d]
0633   075D F9            leave
0634   075E 09            ret
0635   075F             
0636   075F             alloc:
0637   075F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0638   0762             ;; heap_top = heap_top + bytes; 
0639   0762 3B BB 78      mov d, _heap_top ; $heap_top
0640   0765 DA            push d
0641   0766 3B BB 78      mov d, _heap_top ; $heap_top
0642   0769 2A            mov b, [d]
0643   076A             ; START TERMS
0644   076A D7            push a
0645   076B 11            mov a, b
0646   076C FA 05 00      lea d, [bp + 5] ; $bytes
0647   076F 2A            mov b, [d]
0648   0770 56            add b, a
0649   0771 E4            pop a
0650   0772             ; END TERMS
0651   0772 E7            pop d
0652   0773 FD 43         mov [d], b
0653   0775             ;; return heap_top - bytes; 
0654   0775 3B BB 78      mov d, _heap_top ; $heap_top
0655   0778 2A            mov b, [d]
0656   0779             ; START TERMS
0657   0779 D7            push a
0658   077A 11            mov a, b
0659   077B FA 05 00      lea d, [bp + 5] ; $bytes
0660   077E 2A            mov b, [d]
0661   077F 60            sub a, b
0662   0780 27            mov b, a
0663   0781 E4            pop a
0664   0782             ; END TERMS
0665   0782 F9            leave
0666   0783 09            ret
0667   0784             
0668   0784             free:
0669   0784 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0670   0787             ;; return heap_top = heap_top - bytes; 
0671   0787 3B BB 78      mov d, _heap_top ; $heap_top
0672   078A DA            push d
0673   078B 3B BB 78      mov d, _heap_top ; $heap_top
0674   078E 2A            mov b, [d]
0675   078F             ; START TERMS
0676   078F D7            push a
0677   0790 11            mov a, b
0678   0791 FA 05 00      lea d, [bp + 5] ; $bytes
0679   0794 2A            mov b, [d]
0680   0795 60            sub a, b
0681   0796 27            mov b, a
0682   0797 E4            pop a
0683   0798             ; END TERMS
0684   0798 E7            pop d
0685   0799 FD 43         mov [d], b
0686   079B F9            leave
0687   079C 09            ret
0688   079D             
0689   079D             fopen:
0690   079D F8 00 00      enter 0 ; (push bp; mov bp, sp)
0691   07A0             ;; FILE *fp; 
0692   07A0 52 02 00      sub sp, 2 ; fp
0693   07A3             ;; fp = alloc(sizeof(int)); 
0694   07A3 FA FF FF      lea d, [bp + -1] ; $fp
0695   07A6 DA            push d
0696   07A7 26 02 00      mov b, 2
0697   07AA FD AB         swp b
0698   07AC D8            push b
0699   07AD 07 5F 07      call alloc
0700   07B0 51 02 00      add sp, 2
0701   07B3 E7            pop d
0702   07B4 FD 43         mov [d], b
0703   07B6 F9            leave
0704   07B7 09            ret
0705   07B8             
0706   07B8             printf:
0707   07B8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0708   07BB             ;; char *p, *format_p; 
0709   07BB 52 02 00      sub sp, 2 ; p
0710   07BE 52 02 00      sub sp, 2 ; format_p
0711   07C1             ;; format_p = format; 
0712   07C1 FA FD FF      lea d, [bp + -3] ; $format_p
0713   07C4 DA            push d
0714   07C5 FA 05 00      lea d, [bp + 5] ; $format
0715   07C8 2A            mov b, [d]
0716   07C9 E7            pop d
0717   07CA FD 43         mov [d], b
0718   07CC             ;; p = &format + 2; 
0719   07CC FA FF FF      lea d, [bp + -1] ; $p
0720   07CF DA            push d
0721   07D0 FA 05 00      lea d, [bp + 5] ; $format
0722   07D3 2D            mov b, d
0723   07D4             ; START TERMS
0724   07D4 D7            push a
0725   07D5 11            mov a, b
0726   07D6 26 02 00      mov b, $2
0727   07D9 56            add b, a
0728   07DA E4            pop a
0729   07DB             ; END TERMS
0730   07DB E7            pop d
0731   07DC FD 43         mov [d], b
0732   07DE             ;; for(;;){ 
0733   07DE             _for10_init:
0734   07DE             _for10_cond:
0735   07DE             _for10_block:
0736   07DE             ;; if(!*format_p) break; 
0737   07DE             _if11_cond:
0738   07DE FA FD FF      lea d, [bp + -3] ; $format_p
0739   07E1 2A            mov b, [d]
0740   07E2 74            mov d, b
0741   07E3 32            mov bl, [d]
0742   07E4 A7 00         mov bh, 0
0743   07E6 C0 00 00      cmp b, 0
0744   07E9 FD 71         seq ; !
0745   07EB C0 00 00      cmp b, 0
0746   07EE C6 F7 07      je _if11_else
0747   07F1             _if11_true:
0748   07F1             ;; break; 
0749   07F1 0A 1E 0A      jmp _for10_exit ; for break
0750   07F4 0A 1B 0A      jmp _if11_exit
0751   07F7             _if11_else:
0752   07F7             ;; if(*format_p == '%'){ 
0753   07F7             _if12_cond:
0754   07F7 FA FD FF      lea d, [bp + -3] ; $format_p
0755   07FA 2A            mov b, [d]
0756   07FB 74            mov d, b
0757   07FC 32            mov bl, [d]
0758   07FD A7 00         mov bh, 0
0759   07FF             ; START RELATIONAL
0760   07FF D7            push a
0761   0800 11            mov a, b
0762   0801 26 25 00      mov b, $25
0763   0804 B0            cmp a, b
0764   0805 FD 71         seq ; ==
0765   0807 E4            pop a
0766   0808             ; END RELATIONAL
0767   0808 C0 00 00      cmp b, 0
0768   080B C6 FF 09      je _if12_else
0769   080E             _if12_true:
0770   080E             ;; format_p++; 
0771   080E FA FD FF      lea d, [bp + -3] ; $format_p
0772   0811 2A            mov b, [d]
0773   0812 D8            push b
0774   0813 FD 77         inc b
0775   0815 FA FD FF      lea d, [bp + -3] ; $format_p
0776   0818 FD 43         mov [d], b
0777   081A E5            pop b
0778   081B             ;; switch(*format_p){ 
0779   081B             _switch13_expr:
0780   081B FA FD FF      lea d, [bp + -3] ; $format_p
0781   081E 2A            mov b, [d]
0782   081F 74            mov d, b
0783   0820 32            mov bl, [d]
0784   0821 A7 00         mov bh, 0
0785   0823             _switch13_comparisons:
0786   0823 C1 6C         cmp bl, $6c
0787   0825 C6 51 08      je _switch13_case0
0788   0828 C1 4C         cmp bl, $4c
0789   082A C6 51 08      je _switch13_case1
0790   082D C1 64         cmp bl, $64
0791   082F C6 3F 09      je _switch13_case2
0792   0832 C1 69         cmp bl, $69
0793   0834 C6 3F 09      je _switch13_case3
0794   0837 C1 75         cmp bl, $75
0795   0839 C6 63 09      je _switch13_case4
0796   083C C1 78         cmp bl, $78
0797   083E C6 87 09      je _switch13_case5
0798   0841 C1 63         cmp bl, $63
0799   0843 C6 A5 09      je _switch13_case6
0800   0846 C1 73         cmp bl, $73
0801   0848 C6 C4 09      je _switch13_case7
0802   084B 0A E3 09      jmp _switch13_default
0803   084E 0A EF 09      jmp _switch13_exit
0804   0851             _switch13_case0:
0805   0851             _switch13_case1:
0806   0851             ;; format_p++; 
0807   0851 FA FD FF      lea d, [bp + -3] ; $format_p
0808   0854 2A            mov b, [d]
0809   0855 D8            push b
0810   0856 FD 77         inc b
0811   0858 FA FD FF      lea d, [bp + -3] ; $format_p
0812   085B FD 43         mov [d], b
0813   085D E5            pop b
0814   085E             ;; if(*format_p == 'd' || *format_p == 'i') 
0815   085E             _if14_cond:
0816   085E FA FD FF      lea d, [bp + -3] ; $format_p
0817   0861 2A            mov b, [d]
0818   0862 74            mov d, b
0819   0863 32            mov bl, [d]
0820   0864 A7 00         mov bh, 0
0821   0866             ; START RELATIONAL
0822   0866 D7            push a
0823   0867 11            mov a, b
0824   0868 26 64 00      mov b, $64
0825   086B B0            cmp a, b
0826   086C FD 71         seq ; ==
0827   086E E4            pop a
0828   086F             ; END RELATIONAL
0829   086F D7            push a
0830   0870 11            mov a, b
0831   0871 FA FD FF      lea d, [bp + -3] ; $format_p
0832   0874 2A            mov b, [d]
0833   0875 74            mov d, b
0834   0876 32            mov bl, [d]
0835   0877 A7 00         mov bh, 0
0836   0879             ; START RELATIONAL
0837   0879 D7            push a
0838   087A 11            mov a, b
0839   087B 26 69 00      mov b, $69
0840   087E B0            cmp a, b
0841   087F FD 71         seq ; ==
0842   0881 E4            pop a
0843   0882             ; END RELATIONAL
0844   0882 FD A8         sor a, b ; ||
0845   0884 E4            pop a
0846   0885 C0 00 00      cmp b, 0
0847   0888 C6 AD 08      je _if14_else
0848   088B             _if14_true:
0849   088B             ;; print_signed_long(*(long *)p); 
0850   088B FA FF FF      lea d, [bp + -1] ; $p
0851   088E 2A            mov b, [d]
0852   088F AB            snex b
0853   0890 FD 39         mov c, b
0854   0892 74            mov d, b
0855   0893 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0856   0896 FD 39         mov c, b ; And place it into C
0857   0898 2A            mov b, [d] ; Lower Word in B
0858   0899 FD 79         mov g, b
0859   089B 28            mov b, c
0860   089C FD AB         swp b
0861   089E D8            push b
0862   089F FD 27         mov b, g
0863   08A1 FD AB         swp b
0864   08A3 D8            push b
0865   08A4 07 04 0F      call print_signed_long
0866   08A7 51 04 00      add sp, 4
0867   08AA 0A 2A 09      jmp _if14_exit
0868   08AD             _if14_else:
0869   08AD             ;; if(*format_p == 'u') 
0870   08AD             _if15_cond:
0871   08AD FA FD FF      lea d, [bp + -3] ; $format_p
0872   08B0 2A            mov b, [d]
0873   08B1 74            mov d, b
0874   08B2 32            mov bl, [d]
0875   08B3 A7 00         mov bh, 0
0876   08B5             ; START RELATIONAL
0877   08B5 D7            push a
0878   08B6 11            mov a, b
0879   08B7 26 75 00      mov b, $75
0880   08BA B0            cmp a, b
0881   08BB FD 71         seq ; ==
0882   08BD E4            pop a
0883   08BE             ; END RELATIONAL
0884   08BE C0 00 00      cmp b, 0
0885   08C1 C6 E8 08      je _if15_else
0886   08C4             _if15_true:
0887   08C4             ;; print_unsigned_long(*(unsigned long *)p); 
0888   08C4 FA FF FF      lea d, [bp + -1] ; $p
0889   08C7 2A            mov b, [d]
0890   08C8 A7 00         mov bh, 0
0891   08CA 38 00 00      mov c, 0
0892   08CD 74            mov d, b
0893   08CE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0894   08D1 FD 39         mov c, b ; And place it into C
0895   08D3 2A            mov b, [d] ; Lower Word in B
0896   08D4 FD 79         mov g, b
0897   08D6 28            mov b, c
0898   08D7 FD AB         swp b
0899   08D9 D8            push b
0900   08DA FD 27         mov b, g
0901   08DC FD AB         swp b
0902   08DE D8            push b
0903   08DF 07 44 12      call print_unsigned_long
0904   08E2 51 04 00      add sp, 4
0905   08E5 0A 2A 09      jmp _if15_exit
0906   08E8             _if15_else:
0907   08E8             ;; if(*format_p == 'x') 
0908   08E8             _if16_cond:
0909   08E8 FA FD FF      lea d, [bp + -3] ; $format_p
0910   08EB 2A            mov b, [d]
0911   08EC 74            mov d, b
0912   08ED 32            mov bl, [d]
0913   08EE A7 00         mov bh, 0
0914   08F0             ; START RELATIONAL
0915   08F0 D7            push a
0916   08F1 11            mov a, b
0917   08F2 26 78 00      mov b, $78
0918   08F5 B0            cmp a, b
0919   08F6 FD 71         seq ; ==
0920   08F8 E4            pop a
0921   08F9             ; END RELATIONAL
0922   08F9 C0 00 00      cmp b, 0
0923   08FC C6 1E 09      je _if16_else
0924   08FF             _if16_true:
0925   08FF             ;; printx32(*(long int *)p); 
0926   08FF FA FF FF      lea d, [bp + -1] ; $p
0927   0902 2A            mov b, [d]
0928   0903 74            mov d, b
0929   0904 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0930   0907 FD 39         mov c, b ; And place it into C
0931   0909 2A            mov b, [d] ; Lower Word in B
0932   090A FD 79         mov g, b
0933   090C 28            mov b, c
0934   090D FD AB         swp b
0935   090F D8            push b
0936   0910 FD 27         mov b, g
0937   0912 FD AB         swp b
0938   0914 D8            push b
0939   0915 07 79 0C      call printx32
0940   0918 51 04 00      add sp, 4
0941   091B 0A 2A 09      jmp _if16_exit
0942   091E             _if16_else:
0943   091E             ;; err("Unexpected format in printf."); 
0944   091E 26 A1 65      mov b, _s30 ; "Unexpected format in printf."
0945   0921 FD AB         swp b
0946   0923 D8            push b
0947   0924 07 67 0C      call err
0948   0927 51 02 00      add sp, 2
0949   092A             _if16_exit:
0950   092A             _if15_exit:
0951   092A             _if14_exit:
0952   092A             ;; p = p + 4; 
0953   092A FA FF FF      lea d, [bp + -1] ; $p
0954   092D DA            push d
0955   092E FA FF FF      lea d, [bp + -1] ; $p
0956   0931 2A            mov b, [d]
0957   0932             ; START TERMS
0958   0932 D7            push a
0959   0933 11            mov a, b
0960   0934 26 04 00      mov b, $4
0961   0937 56            add b, a
0962   0938 E4            pop a
0963   0939             ; END TERMS
0964   0939 E7            pop d
0965   093A FD 43         mov [d], b
0966   093C             ;; break; 
0967   093C 0A EF 09      jmp _switch13_exit ; case break
0968   093F             _switch13_case2:
0969   093F             _switch13_case3:
0970   093F             ;; print_signed(*(int*)p); 
0971   093F FA FF FF      lea d, [bp + -1] ; $p
0972   0942 2A            mov b, [d]
0973   0943 74            mov d, b
0974   0944 2A            mov b, [d]
0975   0945 FD AB         swp b
0976   0947 D8            push b
0977   0948 07 0D 0E      call print_signed
0978   094B 51 02 00      add sp, 2
0979   094E             ;; p = p + 2; 
0980   094E FA FF FF      lea d, [bp + -1] ; $p
0981   0951 DA            push d
0982   0952 FA FF FF      lea d, [bp + -1] ; $p
0983   0955 2A            mov b, [d]
0984   0956             ; START TERMS
0985   0956 D7            push a
0986   0957 11            mov a, b
0987   0958 26 02 00      mov b, $2
0988   095B 56            add b, a
0989   095C E4            pop a
0990   095D             ; END TERMS
0991   095D E7            pop d
0992   095E FD 43         mov [d], b
0993   0960             ;; break; 
0994   0960 0A EF 09      jmp _switch13_exit ; case break
0995   0963             _switch13_case4:
0996   0963             ;; print_unsigned(*(unsigned int*)p); 
0997   0963 FA FF FF      lea d, [bp + -1] ; $p
0998   0966 2A            mov b, [d]
0999   0967 74            mov d, b
1000   0968 2A            mov b, [d]
1001   0969 FD AB         swp b
1002   096B D8            push b
1003   096C 07 3F 14      call print_unsigned
1004   096F 51 02 00      add sp, 2
1005   0972             ;; p = p + 2; 
1006   0972 FA FF FF      lea d, [bp + -1] ; $p
1007   0975 DA            push d
1008   0976 FA FF FF      lea d, [bp + -1] ; $p
1009   0979 2A            mov b, [d]
1010   097A             ; START TERMS
1011   097A D7            push a
1012   097B 11            mov a, b
1013   097C 26 02 00      mov b, $2
1014   097F 56            add b, a
1015   0980 E4            pop a
1016   0981             ; END TERMS
1017   0981 E7            pop d
1018   0982 FD 43         mov [d], b
1019   0984             ;; break; 
1020   0984 0A EF 09      jmp _switch13_exit ; case break
1021   0987             _switch13_case5:
1022   0987             
1023   0987             ; --- BEGIN INLINE ASM BLOCK
1024   0987 FA FF FF      lea d, [bp + -1] ; $p
1025   098A FD 2A         mov d, [d]
1026   098C 2A            mov b, [d]
1027   098D 07 45 18      call print_u16x
1028   0990             ; --- END INLINE ASM BLOCK
1029   0990             
1030   0990             ;; p = p + 2; 
1031   0990 FA FF FF      lea d, [bp + -1] ; $p
1032   0993 DA            push d
1033   0994 FA FF FF      lea d, [bp + -1] ; $p
1034   0997 2A            mov b, [d]
1035   0998             ; START TERMS
1036   0998 D7            push a
1037   0999 11            mov a, b
1038   099A 26 02 00      mov b, $2
1039   099D 56            add b, a
1040   099E E4            pop a
1041   099F             ; END TERMS
1042   099F E7            pop d
1043   09A0 FD 43         mov [d], b
1044   09A2             ;; break; 
1045   09A2 0A EF 09      jmp _switch13_exit ; case break
1046   09A5             _switch13_case6:
1047   09A5             
1048   09A5             ; --- BEGIN INLINE ASM BLOCK
1049   09A5 FA FF FF      lea d, [bp + -1] ; $p
1050   09A8 FD 2A         mov d, [d]
1051   09AA 1E            mov al, [d]
1052   09AB 23            mov ah, al
1053   09AC 07 A3 16      call _putchar
1054   09AF             ; --- END INLINE ASM BLOCK
1055   09AF             
1056   09AF             ;; p = p + 2; 
1057   09AF FA FF FF      lea d, [bp + -1] ; $p
1058   09B2 DA            push d
1059   09B3 FA FF FF      lea d, [bp + -1] ; $p
1060   09B6 2A            mov b, [d]
1061   09B7             ; START TERMS
1062   09B7 D7            push a
1063   09B8 11            mov a, b
1064   09B9 26 02 00      mov b, $2
1065   09BC 56            add b, a
1066   09BD E4            pop a
1067   09BE             ; END TERMS
1068   09BE E7            pop d
1069   09BF FD 43         mov [d], b
1070   09C1             ;; break; 
1071   09C1 0A EF 09      jmp _switch13_exit ; case break
1072   09C4             _switch13_case7:
1073   09C4             
1074   09C4             ; --- BEGIN INLINE ASM BLOCK
1075   09C4 FA FF FF      lea d, [bp + -1] ; $p
1076   09C7 FD 2A         mov d, [d]
1077   09C9 FD 2A         mov d, [d]
1078   09CB 07 ED 17      call _puts
1079   09CE             ; --- END INLINE ASM BLOCK
1080   09CE             
1081   09CE             ;; p = p + 2; 
1082   09CE FA FF FF      lea d, [bp + -1] ; $p
1083   09D1 DA            push d
1084   09D2 FA FF FF      lea d, [bp + -1] ; $p
1085   09D5 2A            mov b, [d]
1086   09D6             ; START TERMS
1087   09D6 D7            push a
1088   09D7 11            mov a, b
1089   09D8 26 02 00      mov b, $2
1090   09DB 56            add b, a
1091   09DC E4            pop a
1092   09DD             ; END TERMS
1093   09DD E7            pop d
1094   09DE FD 43         mov [d], b
1095   09E0             ;; break; 
1096   09E0 0A EF 09      jmp _switch13_exit ; case break
1097   09E3             _switch13_default:
1098   09E3             ;; print("Error: Unknown argument type.\n"); 
1099   09E3 26 BE 65      mov b, _s31 ; "Error: Unknown argument type.\n"
1100   09E6 FD AB         swp b
1101   09E8 D8            push b
1102   09E9 07 5A 15      call print
1103   09EC 51 02 00      add sp, 2
1104   09EF             _switch13_exit:
1105   09EF             ;; format_p++; 
1106   09EF FA FD FF      lea d, [bp + -3] ; $format_p
1107   09F2 2A            mov b, [d]
1108   09F3 D8            push b
1109   09F4 FD 77         inc b
1110   09F6 FA FD FF      lea d, [bp + -3] ; $format_p
1111   09F9 FD 43         mov [d], b
1112   09FB E5            pop b
1113   09FC 0A 1B 0A      jmp _if12_exit
1114   09FF             _if12_else:
1115   09FF             ;; putchar(*format_p); 
1116   09FF FA FD FF      lea d, [bp + -3] ; $format_p
1117   0A02 2A            mov b, [d]
1118   0A03 74            mov d, b
1119   0A04 32            mov bl, [d]
1120   0A05 A7 00         mov bh, 0
1121   0A07 DD            push bl
1122   0A08 07 12 15      call putchar
1123   0A0B 51 01 00      add sp, 1
1124   0A0E             ;; format_p++; 
1125   0A0E FA FD FF      lea d, [bp + -3] ; $format_p
1126   0A11 2A            mov b, [d]
1127   0A12 D8            push b
1128   0A13 FD 77         inc b
1129   0A15 FA FD FF      lea d, [bp + -3] ; $format_p
1130   0A18 FD 43         mov [d], b
1131   0A1A E5            pop b
1132   0A1B             _if12_exit:
1133   0A1B             _if11_exit:
1134   0A1B             _for10_update:
1135   0A1B 0A DE 07      jmp _for10_cond
1136   0A1E             _for10_exit:
1137   0A1E F9            leave
1138   0A1F 09            ret
1139   0A20             
1140   0A20             scanf:
1141   0A20 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1142   0A23             ;; char *p, *format_p; 
1143   0A23 52 02 00      sub sp, 2 ; p
1144   0A26 52 02 00      sub sp, 2 ; format_p
1145   0A29             ;; char c; 
1146   0A29 52 01 00      sub sp, 1 ; c
1147   0A2C             ;; int i; 
1148   0A2C 52 02 00      sub sp, 2 ; i
1149   0A2F             ;; char input_string[  512                    ]; 
1150   0A2F 52 00 02      sub sp, 512 ; input_string
1151   0A32             ;; format_p = format; 
1152   0A32 FA FD FF      lea d, [bp + -3] ; $format_p
1153   0A35 DA            push d
1154   0A36 FA 05 00      lea d, [bp + 5] ; $format
1155   0A39 2A            mov b, [d]
1156   0A3A E7            pop d
1157   0A3B FD 43         mov [d], b
1158   0A3D             ;; p = &format + 2; 
1159   0A3D FA FF FF      lea d, [bp + -1] ; $p
1160   0A40 DA            push d
1161   0A41 FA 05 00      lea d, [bp + 5] ; $format
1162   0A44 2D            mov b, d
1163   0A45             ; START TERMS
1164   0A45 D7            push a
1165   0A46 11            mov a, b
1166   0A47 26 02 00      mov b, $2
1167   0A4A 56            add b, a
1168   0A4B E4            pop a
1169   0A4C             ; END TERMS
1170   0A4C E7            pop d
1171   0A4D FD 43         mov [d], b
1172   0A4F             ;; for(;;){ 
1173   0A4F             _for17_init:
1174   0A4F             _for17_cond:
1175   0A4F             _for17_block:
1176   0A4F             ;; if(!*format_p) break; 
1177   0A4F             _if18_cond:
1178   0A4F FA FD FF      lea d, [bp + -3] ; $format_p
1179   0A52 2A            mov b, [d]
1180   0A53 74            mov d, b
1181   0A54 32            mov bl, [d]
1182   0A55 A7 00         mov bh, 0
1183   0A57 C0 00 00      cmp b, 0
1184   0A5A FD 71         seq ; !
1185   0A5C C0 00 00      cmp b, 0
1186   0A5F C6 68 0A      je _if18_else
1187   0A62             _if18_true:
1188   0A62             ;; break; 
1189   0A62 0A 65 0C      jmp _for17_exit ; for break
1190   0A65 0A 62 0C      jmp _if18_exit
1191   0A68             _if18_else:
1192   0A68             ;; if(*format_p == '%'){ 
1193   0A68             _if19_cond:
1194   0A68 FA FD FF      lea d, [bp + -3] ; $format_p
1195   0A6B 2A            mov b, [d]
1196   0A6C 74            mov d, b
1197   0A6D 32            mov bl, [d]
1198   0A6E A7 00         mov bh, 0
1199   0A70             ; START RELATIONAL
1200   0A70 D7            push a
1201   0A71 11            mov a, b
1202   0A72 26 25 00      mov b, $25
1203   0A75 B0            cmp a, b
1204   0A76 FD 71         seq ; ==
1205   0A78 E4            pop a
1206   0A79             ; END RELATIONAL
1207   0A79 C0 00 00      cmp b, 0
1208   0A7C C6 46 0C      je _if19_else
1209   0A7F             _if19_true:
1210   0A7F             ;; format_p++; 
1211   0A7F FA FD FF      lea d, [bp + -3] ; $format_p
1212   0A82 2A            mov b, [d]
1213   0A83 D8            push b
1214   0A84 FD 77         inc b
1215   0A86 FA FD FF      lea d, [bp + -3] ; $format_p
1216   0A89 FD 43         mov [d], b
1217   0A8B E5            pop b
1218   0A8C             ;; switch(*format_p){ 
1219   0A8C             _switch20_expr:
1220   0A8C FA FD FF      lea d, [bp + -3] ; $format_p
1221   0A8F 2A            mov b, [d]
1222   0A90 74            mov d, b
1223   0A91 32            mov bl, [d]
1224   0A92 A7 00         mov bh, 0
1225   0A94             _switch20_comparisons:
1226   0A94 C1 6C         cmp bl, $6c
1227   0A96 C6 C2 0A      je _switch20_case0
1228   0A99 C1 4C         cmp bl, $4c
1229   0A9B C6 C2 0A      je _switch20_case1
1230   0A9E C1 64         cmp bl, $64
1231   0AA0 C6 54 0B      je _switch20_case2
1232   0AA3 C1 69         cmp bl, $69
1233   0AA5 C6 54 0B      je _switch20_case3
1234   0AA8 C1 75         cmp bl, $75
1235   0AAA C6 81 0B      je _switch20_case4
1236   0AAD C1 78         cmp bl, $78
1237   0AAF C6 AE 0B      je _switch20_case5
1238   0AB2 C1 63         cmp bl, $63
1239   0AB4 C6 C3 0B      je _switch20_case6
1240   0AB7 C1 73         cmp bl, $73
1241   0AB9 C6 F2 0B      je _switch20_case7
1242   0ABC 0A 2A 0C      jmp _switch20_default
1243   0ABF 0A 36 0C      jmp _switch20_exit
1244   0AC2             _switch20_case0:
1245   0AC2             _switch20_case1:
1246   0AC2             ;; format_p++; 
1247   0AC2 FA FD FF      lea d, [bp + -3] ; $format_p
1248   0AC5 2A            mov b, [d]
1249   0AC6 D8            push b
1250   0AC7 FD 77         inc b
1251   0AC9 FA FD FF      lea d, [bp + -3] ; $format_p
1252   0ACC FD 43         mov [d], b
1253   0ACE E5            pop b
1254   0ACF             ;; if(*format_p == 'd' || *format_p == 'i'); 
1255   0ACF             _if21_cond:
1256   0ACF FA FD FF      lea d, [bp + -3] ; $format_p
1257   0AD2 2A            mov b, [d]
1258   0AD3 74            mov d, b
1259   0AD4 32            mov bl, [d]
1260   0AD5 A7 00         mov bh, 0
1261   0AD7             ; START RELATIONAL
1262   0AD7 D7            push a
1263   0AD8 11            mov a, b
1264   0AD9 26 64 00      mov b, $64
1265   0ADC B0            cmp a, b
1266   0ADD FD 71         seq ; ==
1267   0ADF E4            pop a
1268   0AE0             ; END RELATIONAL
1269   0AE0 D7            push a
1270   0AE1 11            mov a, b
1271   0AE2 FA FD FF      lea d, [bp + -3] ; $format_p
1272   0AE5 2A            mov b, [d]
1273   0AE6 74            mov d, b
1274   0AE7 32            mov bl, [d]
1275   0AE8 A7 00         mov bh, 0
1276   0AEA             ; START RELATIONAL
1277   0AEA D7            push a
1278   0AEB 11            mov a, b
1279   0AEC 26 69 00      mov b, $69
1280   0AEF B0            cmp a, b
1281   0AF0 FD 71         seq ; ==
1282   0AF2 E4            pop a
1283   0AF3             ; END RELATIONAL
1284   0AF3 FD A8         sor a, b ; ||
1285   0AF5 E4            pop a
1286   0AF6 C0 00 00      cmp b, 0
1287   0AF9 C6 FF 0A      je _if21_else
1288   0AFC             _if21_true:
1289   0AFC             ;; ; 
1290   0AFC 0A 3F 0B      jmp _if21_exit
1291   0AFF             _if21_else:
1292   0AFF             ;; if(*format_p == 'u'); 
1293   0AFF             _if22_cond:
1294   0AFF FA FD FF      lea d, [bp + -3] ; $format_p
1295   0B02 2A            mov b, [d]
1296   0B03 74            mov d, b
1297   0B04 32            mov bl, [d]
1298   0B05 A7 00         mov bh, 0
1299   0B07             ; START RELATIONAL
1300   0B07 D7            push a
1301   0B08 11            mov a, b
1302   0B09 26 75 00      mov b, $75
1303   0B0C B0            cmp a, b
1304   0B0D FD 71         seq ; ==
1305   0B0F E4            pop a
1306   0B10             ; END RELATIONAL
1307   0B10 C0 00 00      cmp b, 0
1308   0B13 C6 19 0B      je _if22_else
1309   0B16             _if22_true:
1310   0B16             ;; ; 
1311   0B16 0A 3F 0B      jmp _if22_exit
1312   0B19             _if22_else:
1313   0B19             ;; if(*format_p == 'x'); 
1314   0B19             _if23_cond:
1315   0B19 FA FD FF      lea d, [bp + -3] ; $format_p
1316   0B1C 2A            mov b, [d]
1317   0B1D 74            mov d, b
1318   0B1E 32            mov bl, [d]
1319   0B1F A7 00         mov bh, 0
1320   0B21             ; START RELATIONAL
1321   0B21 D7            push a
1322   0B22 11            mov a, b
1323   0B23 26 78 00      mov b, $78
1324   0B26 B0            cmp a, b
1325   0B27 FD 71         seq ; ==
1326   0B29 E4            pop a
1327   0B2A             ; END RELATIONAL
1328   0B2A C0 00 00      cmp b, 0
1329   0B2D C6 33 0B      je _if23_else
1330   0B30             _if23_true:
1331   0B30             ;; ; 
1332   0B30 0A 3F 0B      jmp _if23_exit
1333   0B33             _if23_else:
1334   0B33             ;; err("Unexpected format in printf."); 
1335   0B33 26 A1 65      mov b, _s30 ; "Unexpected format in printf."
1336   0B36 FD AB         swp b
1337   0B38 D8            push b
1338   0B39 07 67 0C      call err
1339   0B3C 51 02 00      add sp, 2
1340   0B3F             _if23_exit:
1341   0B3F             _if22_exit:
1342   0B3F             _if21_exit:
1343   0B3F             ;; p = p + 4; 
1344   0B3F FA FF FF      lea d, [bp + -1] ; $p
1345   0B42 DA            push d
1346   0B43 FA FF FF      lea d, [bp + -1] ; $p
1347   0B46 2A            mov b, [d]
1348   0B47             ; START TERMS
1349   0B47 D7            push a
1350   0B48 11            mov a, b
1351   0B49 26 04 00      mov b, $4
1352   0B4C 56            add b, a
1353   0B4D E4            pop a
1354   0B4E             ; END TERMS
1355   0B4E E7            pop d
1356   0B4F FD 43         mov [d], b
1357   0B51             ;; break; 
1358   0B51 0A 36 0C      jmp _switch20_exit ; case break
1359   0B54             _switch20_case2:
1360   0B54             _switch20_case3:
1361   0B54             ;; i = scann(); 
1362   0B54 FA FA FF      lea d, [bp + -6] ; $i
1363   0B57 DA            push d
1364   0B58 07 35 15      call scann
1365   0B5B E7            pop d
1366   0B5C FD 43         mov [d], b
1367   0B5E             ;; **(int **)p = i; 
1368   0B5E FA FF FF      lea d, [bp + -1] ; $p
1369   0B61 2A            mov b, [d]
1370   0B62 74            mov d, b
1371   0B63 2A            mov b, [d]
1372   0B64 D8            push b
1373   0B65 FA FA FF      lea d, [bp + -6] ; $i
1374   0B68 2A            mov b, [d]
1375   0B69 E7            pop d
1376   0B6A FD 43         mov [d], b
1377   0B6C             ;; p = p + 2; 
1378   0B6C FA FF FF      lea d, [bp + -1] ; $p
1379   0B6F DA            push d
1380   0B70 FA FF FF      lea d, [bp + -1] ; $p
1381   0B73 2A            mov b, [d]
1382   0B74             ; START TERMS
1383   0B74 D7            push a
1384   0B75 11            mov a, b
1385   0B76 26 02 00      mov b, $2
1386   0B79 56            add b, a
1387   0B7A E4            pop a
1388   0B7B             ; END TERMS
1389   0B7B E7            pop d
1390   0B7C FD 43         mov [d], b
1391   0B7E             ;; break; 
1392   0B7E 0A 36 0C      jmp _switch20_exit ; case break
1393   0B81             _switch20_case4:
1394   0B81             ;; i = scann(); 
1395   0B81 FA FA FF      lea d, [bp + -6] ; $i
1396   0B84 DA            push d
1397   0B85 07 35 15      call scann
1398   0B88 E7            pop d
1399   0B89 FD 43         mov [d], b
1400   0B8B             ;; **(int **)p = i; 
1401   0B8B FA FF FF      lea d, [bp + -1] ; $p
1402   0B8E 2A            mov b, [d]
1403   0B8F 74            mov d, b
1404   0B90 2A            mov b, [d]
1405   0B91 D8            push b
1406   0B92 FA FA FF      lea d, [bp + -6] ; $i
1407   0B95 2A            mov b, [d]
1408   0B96 E7            pop d
1409   0B97 FD 43         mov [d], b
1410   0B99             ;; p = p + 2; 
1411   0B99 FA FF FF      lea d, [bp + -1] ; $p
1412   0B9C DA            push d
1413   0B9D FA FF FF      lea d, [bp + -1] ; $p
1414   0BA0 2A            mov b, [d]
1415   0BA1             ; START TERMS
1416   0BA1 D7            push a
1417   0BA2 11            mov a, b
1418   0BA3 26 02 00      mov b, $2
1419   0BA6 56            add b, a
1420   0BA7 E4            pop a
1421   0BA8             ; END TERMS
1422   0BA8 E7            pop d
1423   0BA9 FD 43         mov [d], b
1424   0BAB             ;; break; 
1425   0BAB 0A 36 0C      jmp _switch20_exit ; case break
1426   0BAE             _switch20_case5:
1427   0BAE             ;; p = p + 2; 
1428   0BAE FA FF FF      lea d, [bp + -1] ; $p
1429   0BB1 DA            push d
1430   0BB2 FA FF FF      lea d, [bp + -1] ; $p
1431   0BB5 2A            mov b, [d]
1432   0BB6             ; START TERMS
1433   0BB6 D7            push a
1434   0BB7 11            mov a, b
1435   0BB8 26 02 00      mov b, $2
1436   0BBB 56            add b, a
1437   0BBC E4            pop a
1438   0BBD             ; END TERMS
1439   0BBD E7            pop d
1440   0BBE FD 43         mov [d], b
1441   0BC0             ;; break; 
1442   0BC0 0A 36 0C      jmp _switch20_exit ; case break
1443   0BC3             _switch20_case6:
1444   0BC3             ;; c = getchar(); 
1445   0BC3 FA FC FF      lea d, [bp + -4] ; $c
1446   0BC6 DA            push d
1447   0BC7 07 1F 15      call getchar
1448   0BCA E7            pop d
1449   0BCB FD 3E         mov [d], bl
1450   0BCD             ;; **(char **)p = c; 
1451   0BCD FA FF FF      lea d, [bp + -1] ; $p
1452   0BD0 2A            mov b, [d]
1453   0BD1 74            mov d, b
1454   0BD2 2A            mov b, [d]
1455   0BD3 D8            push b
1456   0BD4 FA FC FF      lea d, [bp + -4] ; $c
1457   0BD7 32            mov bl, [d]
1458   0BD8 A7 00         mov bh, 0
1459   0BDA E7            pop d
1460   0BDB FD 43         mov [d], b
1461   0BDD             ;; p = p + 2; 
1462   0BDD FA FF FF      lea d, [bp + -1] ; $p
1463   0BE0 DA            push d
1464   0BE1 FA FF FF      lea d, [bp + -1] ; $p
1465   0BE4 2A            mov b, [d]
1466   0BE5             ; START TERMS
1467   0BE5 D7            push a
1468   0BE6 11            mov a, b
1469   0BE7 26 02 00      mov b, $2
1470   0BEA 56            add b, a
1471   0BEB E4            pop a
1472   0BEC             ; END TERMS
1473   0BEC E7            pop d
1474   0BED FD 43         mov [d], b
1475   0BEF             ;; break; 
1476   0BEF 0A 36 0C      jmp _switch20_exit ; case break
1477   0BF2             _switch20_case7:
1478   0BF2             ;; gets(input_string); 
1479   0BF2 FA FA FD      lea d, [bp + -518] ; $input_string
1480   0BF5 2D            mov b, d
1481   0BF6 FD AB         swp b
1482   0BF8 D8            push b
1483   0BF9 07 F3 0D      call gets
1484   0BFC 51 02 00      add sp, 2
1485   0BFF             ;; strcpy(*(char **)p, input_string); 
1486   0BFF FA FA FD      lea d, [bp + -518] ; $input_string
1487   0C02 2D            mov b, d
1488   0C03 FD AB         swp b
1489   0C05 D8            push b
1490   0C06 FA FF FF      lea d, [bp + -1] ; $p
1491   0C09 2A            mov b, [d]
1492   0C0A 74            mov d, b
1493   0C0B 2A            mov b, [d]
1494   0C0C FD AB         swp b
1495   0C0E D8            push b
1496   0C0F 07 14 04      call strcpy
1497   0C12 51 04 00      add sp, 4
1498   0C15             ;; p = p + 2; 
1499   0C15 FA FF FF      lea d, [bp + -1] ; $p
1500   0C18 DA            push d
1501   0C19 FA FF FF      lea d, [bp + -1] ; $p
1502   0C1C 2A            mov b, [d]
1503   0C1D             ; START TERMS
1504   0C1D D7            push a
1505   0C1E 11            mov a, b
1506   0C1F 26 02 00      mov b, $2
1507   0C22 56            add b, a
1508   0C23 E4            pop a
1509   0C24             ; END TERMS
1510   0C24 E7            pop d
1511   0C25 FD 43         mov [d], b
1512   0C27             ;; break; 
1513   0C27 0A 36 0C      jmp _switch20_exit ; case break
1514   0C2A             _switch20_default:
1515   0C2A             ;; print("Error: Unknown argument type.\n"); 
1516   0C2A 26 BE 65      mov b, _s31 ; "Error: Unknown argument type.\n"
1517   0C2D FD AB         swp b
1518   0C2F D8            push b
1519   0C30 07 5A 15      call print
1520   0C33 51 02 00      add sp, 2
1521   0C36             _switch20_exit:
1522   0C36             ;; format_p++; 
1523   0C36 FA FD FF      lea d, [bp + -3] ; $format_p
1524   0C39 2A            mov b, [d]
1525   0C3A D8            push b
1526   0C3B FD 77         inc b
1527   0C3D FA FD FF      lea d, [bp + -3] ; $format_p
1528   0C40 FD 43         mov [d], b
1529   0C42 E5            pop b
1530   0C43 0A 62 0C      jmp _if19_exit
1531   0C46             _if19_else:
1532   0C46             ;; putchar(*format_p); 
1533   0C46 FA FD FF      lea d, [bp + -3] ; $format_p
1534   0C49 2A            mov b, [d]
1535   0C4A 74            mov d, b
1536   0C4B 32            mov bl, [d]
1537   0C4C A7 00         mov bh, 0
1538   0C4E DD            push bl
1539   0C4F 07 12 15      call putchar
1540   0C52 51 01 00      add sp, 1
1541   0C55             ;; format_p++; 
1542   0C55 FA FD FF      lea d, [bp + -3] ; $format_p
1543   0C58 2A            mov b, [d]
1544   0C59 D8            push b
1545   0C5A FD 77         inc b
1546   0C5C FA FD FF      lea d, [bp + -3] ; $format_p
1547   0C5F FD 43         mov [d], b
1548   0C61 E5            pop b
1549   0C62             _if19_exit:
1550   0C62             _if18_exit:
1551   0C62             _for17_update:
1552   0C62 0A 4F 0A      jmp _for17_cond
1553   0C65             _for17_exit:
1554   0C65 F9            leave
1555   0C66 09            ret
1556   0C67             
1557   0C67             err:
1558   0C67 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1559   0C6A             ;; print(e); 
1560   0C6A FA 05 00      lea d, [bp + 5] ; $e
1561   0C6D 2A            mov b, [d]
1562   0C6E FD AB         swp b
1563   0C70 D8            push b
1564   0C71 07 5A 15      call print
1565   0C74 51 02 00      add sp, 2
1566   0C77 F9            leave
1567   0C78 09            ret
1568   0C79             
1569   0C79             printx32:
1570   0C79 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1571   0C7C             
1572   0C7C             ; --- BEGIN INLINE ASM BLOCK
1573   0C7C FA 05 00      lea d, [bp + 5] ; $hex
1574   0C7F 2B 02 00      mov b, [d+2]
1575   0C82 07 45 18      call print_u16x
1576   0C85 2A            mov b, [d]
1577   0C86 07 45 18      call print_u16x
1578   0C89             ; --- END INLINE ASM BLOCK
1579   0C89             
1580   0C89 F9            leave
1581   0C8A 09            ret
1582   0C8B             
1583   0C8B             printx16:
1584   0C8B F8 00 00      enter 0 ; (push bp; mov bp, sp)
1585   0C8E             
1586   0C8E             ; --- BEGIN INLINE ASM BLOCK
1587   0C8E FA 05 00      lea d, [bp + 5] ; $hex
1588   0C91 2A            mov b, [d]
1589   0C92 07 45 18      call print_u16x
1590   0C95             ; --- END INLINE ASM BLOCK
1591   0C95             
1592   0C95 F9            leave
1593   0C96 09            ret
1594   0C97             
1595   0C97             printx8:
1596   0C97 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1597   0C9A             
1598   0C9A             ; --- BEGIN INLINE ASM BLOCK
1599   0C9A FA 05 00      lea d, [bp + 5] ; $hex
1600   0C9D 32            mov bl, [d]
1601   0C9E 07 89 18      call print_u8x
1602   0CA1             ; --- END INLINE ASM BLOCK
1603   0CA1             
1604   0CA1 F9            leave
1605   0CA2 09            ret
1606   0CA3             
1607   0CA3             hex_str_to_int:
1608   0CA3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1609   0CA6             ;; int value = 0; 
1610   0CA6 52 02 00      sub sp, 2 ; value
1611   0CA9             ; --- START LOCAL VAR INITIALIZATION
1612   0CA9 FA FF FF      lea d, [bp + -1] ; $value
1613   0CAC DA            push d
1614   0CAD 26 00 00      mov b, $0
1615   0CB0 E7            pop d
1616   0CB1 FD 43         mov [d], b
1617   0CB3             ; --- END LOCAL VAR INITIALIZATION
1618   0CB3             ;; int i; 
1619   0CB3 52 02 00      sub sp, 2 ; i
1620   0CB6             ;; char hex_char; 
1621   0CB6 52 01 00      sub sp, 1 ; hex_char
1622   0CB9             ;; int len; 
1623   0CB9 52 02 00      sub sp, 2 ; len
1624   0CBC             ;; len = strlen(hex_string); 
1625   0CBC FA FA FF      lea d, [bp + -6] ; $len
1626   0CBF DA            push d
1627   0CC0 FA 05 00      lea d, [bp + 5] ; $hex_string
1628   0CC3 2A            mov b, [d]
1629   0CC4 FD AB         swp b
1630   0CC6 D8            push b
1631   0CC7 07 8E 05      call strlen
1632   0CCA 51 02 00      add sp, 2
1633   0CCD E7            pop d
1634   0CCE FD 43         mov [d], b
1635   0CD0             ;; for (i = 0; i < len; i++) { 
1636   0CD0             _for24_init:
1637   0CD0 FA FD FF      lea d, [bp + -3] ; $i
1638   0CD3 DA            push d
1639   0CD4 26 00 00      mov b, $0
1640   0CD7 E7            pop d
1641   0CD8 FD 43         mov [d], b
1642   0CDA             _for24_cond:
1643   0CDA FA FD FF      lea d, [bp + -3] ; $i
1644   0CDD 2A            mov b, [d]
1645   0CDE             ; START RELATIONAL
1646   0CDE D7            push a
1647   0CDF 11            mov a, b
1648   0CE0 FA FA FF      lea d, [bp + -6] ; $len
1649   0CE3 2A            mov b, [d]
1650   0CE4 B0            cmp a, b
1651   0CE5 FD 73         slt ; < (signed)
1652   0CE7 E4            pop a
1653   0CE8             ; END RELATIONAL
1654   0CE8 C0 00 00      cmp b, 0
1655   0CEB C6 ED 0D      je _for24_exit
1656   0CEE             _for24_block:
1657   0CEE             ;; hex_char = hex_string[i]; 
1658   0CEE FA FC FF      lea d, [bp + -4] ; $hex_char
1659   0CF1 DA            push d
1660   0CF2 FA 05 00      lea d, [bp + 5] ; $hex_string
1661   0CF5 FD 2A         mov d, [d]
1662   0CF7 D7            push a
1663   0CF8 DA            push d
1664   0CF9 FA FD FF      lea d, [bp + -3] ; $i
1665   0CFC 2A            mov b, [d]
1666   0CFD E7            pop d
1667   0CFE FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1668   0D02 E4            pop a
1669   0D03 32            mov bl, [d]
1670   0D04 A7 00         mov bh, 0
1671   0D06 E7            pop d
1672   0D07 FD 3E         mov [d], bl
1673   0D09             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1674   0D09             _if25_cond:
1675   0D09 FA FC FF      lea d, [bp + -4] ; $hex_char
1676   0D0C 32            mov bl, [d]
1677   0D0D A7 00         mov bh, 0
1678   0D0F             ; START RELATIONAL
1679   0D0F D7            push a
1680   0D10 11            mov a, b
1681   0D11 26 61 00      mov b, $61
1682   0D14 B0            cmp a, b
1683   0D15 FD 80         sge ; >=
1684   0D17 E4            pop a
1685   0D18             ; END RELATIONAL
1686   0D18 D7            push a
1687   0D19 11            mov a, b
1688   0D1A FA FC FF      lea d, [bp + -4] ; $hex_char
1689   0D1D 32            mov bl, [d]
1690   0D1E A7 00         mov bh, 0
1691   0D20             ; START RELATIONAL
1692   0D20 D7            push a
1693   0D21 11            mov a, b
1694   0D22 26 66 00      mov b, $66
1695   0D25 B0            cmp a, b
1696   0D26 FD 73         slt ; <= (signed)
1697   0D28 E4            pop a
1698   0D29             ; END RELATIONAL
1699   0D29 FD A7         sand a, b
1700   0D2B E4            pop a
1701   0D2C C0 00 00      cmp b, 0
1702   0D2F C6 60 0D      je _if25_else
1703   0D32             _if25_true:
1704   0D32             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1705   0D32 FA FF FF      lea d, [bp + -1] ; $value
1706   0D35 DA            push d
1707   0D36 FA FF FF      lea d, [bp + -1] ; $value
1708   0D39 2A            mov b, [d]
1709   0D3A             ; START FACTORS
1710   0D3A D7            push a
1711   0D3B 11            mov a, b
1712   0D3C 26 10 00      mov b, $10
1713   0D3F AC            mul a, b ; *
1714   0D40 11            mov a, b
1715   0D41 27            mov b, a
1716   0D42 E4            pop a
1717   0D43             ; END FACTORS
1718   0D43             ; START TERMS
1719   0D43 D7            push a
1720   0D44 11            mov a, b
1721   0D45 FA FC FF      lea d, [bp + -4] ; $hex_char
1722   0D48 32            mov bl, [d]
1723   0D49 A7 00         mov bh, 0
1724   0D4B             ; START TERMS
1725   0D4B D7            push a
1726   0D4C 11            mov a, b
1727   0D4D 26 61 00      mov b, $61
1728   0D50 60            sub a, b
1729   0D51 27            mov b, a
1730   0D52 11            mov a, b
1731   0D53 26 0A 00      mov b, $a
1732   0D56 56            add b, a
1733   0D57 E4            pop a
1734   0D58             ; END TERMS
1735   0D58 56            add b, a
1736   0D59 E4            pop a
1737   0D5A             ; END TERMS
1738   0D5A E7            pop d
1739   0D5B FD 43         mov [d], b
1740   0D5D 0A DD 0D      jmp _if25_exit
1741   0D60             _if25_else:
1742   0D60             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1743   0D60             _if26_cond:
1744   0D60 FA FC FF      lea d, [bp + -4] ; $hex_char
1745   0D63 32            mov bl, [d]
1746   0D64 A7 00         mov bh, 0
1747   0D66             ; START RELATIONAL
1748   0D66 D7            push a
1749   0D67 11            mov a, b
1750   0D68 26 41 00      mov b, $41
1751   0D6B B0            cmp a, b
1752   0D6C FD 80         sge ; >=
1753   0D6E E4            pop a
1754   0D6F             ; END RELATIONAL
1755   0D6F D7            push a
1756   0D70 11            mov a, b
1757   0D71 FA FC FF      lea d, [bp + -4] ; $hex_char
1758   0D74 32            mov bl, [d]
1759   0D75 A7 00         mov bh, 0
1760   0D77             ; START RELATIONAL
1761   0D77 D7            push a
1762   0D78 11            mov a, b
1763   0D79 26 46 00      mov b, $46
1764   0D7C B0            cmp a, b
1765   0D7D FD 73         slt ; <= (signed)
1766   0D7F E4            pop a
1767   0D80             ; END RELATIONAL
1768   0D80 FD A7         sand a, b
1769   0D82 E4            pop a
1770   0D83 C0 00 00      cmp b, 0
1771   0D86 C6 B7 0D      je _if26_else
1772   0D89             _if26_true:
1773   0D89             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1774   0D89 FA FF FF      lea d, [bp + -1] ; $value
1775   0D8C DA            push d
1776   0D8D FA FF FF      lea d, [bp + -1] ; $value
1777   0D90 2A            mov b, [d]
1778   0D91             ; START FACTORS
1779   0D91 D7            push a
1780   0D92 11            mov a, b
1781   0D93 26 10 00      mov b, $10
1782   0D96 AC            mul a, b ; *
1783   0D97 11            mov a, b
1784   0D98 27            mov b, a
1785   0D99 E4            pop a
1786   0D9A             ; END FACTORS
1787   0D9A             ; START TERMS
1788   0D9A D7            push a
1789   0D9B 11            mov a, b
1790   0D9C FA FC FF      lea d, [bp + -4] ; $hex_char
1791   0D9F 32            mov bl, [d]
1792   0DA0 A7 00         mov bh, 0
1793   0DA2             ; START TERMS
1794   0DA2 D7            push a
1795   0DA3 11            mov a, b
1796   0DA4 26 41 00      mov b, $41
1797   0DA7 60            sub a, b
1798   0DA8 27            mov b, a
1799   0DA9 11            mov a, b
1800   0DAA 26 0A 00      mov b, $a
1801   0DAD 56            add b, a
1802   0DAE E4            pop a
1803   0DAF             ; END TERMS
1804   0DAF 56            add b, a
1805   0DB0 E4            pop a
1806   0DB1             ; END TERMS
1807   0DB1 E7            pop d
1808   0DB2 FD 43         mov [d], b
1809   0DB4 0A DD 0D      jmp _if26_exit
1810   0DB7             _if26_else:
1811   0DB7             ;; value = (value * 16) + (hex_char - '0'); 
1812   0DB7 FA FF FF      lea d, [bp + -1] ; $value
1813   0DBA DA            push d
1814   0DBB FA FF FF      lea d, [bp + -1] ; $value
1815   0DBE 2A            mov b, [d]
1816   0DBF             ; START FACTORS
1817   0DBF D7            push a
1818   0DC0 11            mov a, b
1819   0DC1 26 10 00      mov b, $10
1820   0DC4 AC            mul a, b ; *
1821   0DC5 11            mov a, b
1822   0DC6 27            mov b, a
1823   0DC7 E4            pop a
1824   0DC8             ; END FACTORS
1825   0DC8             ; START TERMS
1826   0DC8 D7            push a
1827   0DC9 11            mov a, b
1828   0DCA FA FC FF      lea d, [bp + -4] ; $hex_char
1829   0DCD 32            mov bl, [d]
1830   0DCE A7 00         mov bh, 0
1831   0DD0             ; START TERMS
1832   0DD0 D7            push a
1833   0DD1 11            mov a, b
1834   0DD2 26 30 00      mov b, $30
1835   0DD5 60            sub a, b
1836   0DD6 27            mov b, a
1837   0DD7 E4            pop a
1838   0DD8             ; END TERMS
1839   0DD8 56            add b, a
1840   0DD9 E4            pop a
1841   0DDA             ; END TERMS
1842   0DDA E7            pop d
1843   0DDB FD 43         mov [d], b
1844   0DDD             _if26_exit:
1845   0DDD             _if25_exit:
1846   0DDD             _for24_update:
1847   0DDD FA FD FF      lea d, [bp + -3] ; $i
1848   0DE0 2A            mov b, [d]
1849   0DE1 D8            push b
1850   0DE2 FD 77         inc b
1851   0DE4 FA FD FF      lea d, [bp + -3] ; $i
1852   0DE7 FD 43         mov [d], b
1853   0DE9 E5            pop b
1854   0DEA 0A DA 0C      jmp _for24_cond
1855   0DED             _for24_exit:
1856   0DED             ;; return value; 
1857   0DED FA FF FF      lea d, [bp + -1] ; $value
1858   0DF0 2A            mov b, [d]
1859   0DF1 F9            leave
1860   0DF2 09            ret
1861   0DF3             
1862   0DF3             gets:
1863   0DF3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1864   0DF6             
1865   0DF6             ; --- BEGIN INLINE ASM BLOCK
1866   0DF6 FA 05 00      lea d, [bp + 5] ; $s
1867   0DF9 15            mov a, [d]
1868   0DFA 3C            mov d, a
1869   0DFB 07 AA 16      call _gets
1870   0DFE             ; --- END INLINE ASM BLOCK
1871   0DFE             
1872   0DFE             ;; return strlen(s); 
1873   0DFE FA 05 00      lea d, [bp + 5] ; $s
1874   0E01 2A            mov b, [d]
1875   0E02 FD AB         swp b
1876   0E04 D8            push b
1877   0E05 07 8E 05      call strlen
1878   0E08 51 02 00      add sp, 2
1879   0E0B F9            leave
1880   0E0C 09            ret
1881   0E0D             
1882   0E0D             print_signed:
1883   0E0D F8 00 00      enter 0 ; (push bp; mov bp, sp)
1884   0E10             ;; char digits[5]; 
1885   0E10 52 05 00      sub sp, 5 ; digits
1886   0E13             ;; int i = 0; 
1887   0E13 52 02 00      sub sp, 2 ; i
1888   0E16             ; --- START LOCAL VAR INITIALIZATION
1889   0E16 FA FA FF      lea d, [bp + -6] ; $i
1890   0E19 DA            push d
1891   0E1A 26 00 00      mov b, $0
1892   0E1D E7            pop d
1893   0E1E FD 43         mov [d], b
1894   0E20             ; --- END LOCAL VAR INITIALIZATION
1895   0E20             ;; if (num < 0) { 
1896   0E20             _if27_cond:
1897   0E20 FA 05 00      lea d, [bp + 5] ; $num
1898   0E23 2A            mov b, [d]
1899   0E24             ; START RELATIONAL
1900   0E24 D7            push a
1901   0E25 11            mov a, b
1902   0E26 26 00 00      mov b, $0
1903   0E29 B0            cmp a, b
1904   0E2A FD 73         slt ; < (signed)
1905   0E2C E4            pop a
1906   0E2D             ; END RELATIONAL
1907   0E2D C0 00 00      cmp b, 0
1908   0E30 C6 4D 0E      je _if27_else
1909   0E33             _if27_true:
1910   0E33             ;; putchar('-'); 
1911   0E33 26 2D 00      mov b, $2d
1912   0E36 DD            push bl
1913   0E37 07 12 15      call putchar
1914   0E3A 51 01 00      add sp, 1
1915   0E3D             ;; num = -num; 
1916   0E3D FA 05 00      lea d, [bp + 5] ; $num
1917   0E40 DA            push d
1918   0E41 FA 05 00      lea d, [bp + 5] ; $num
1919   0E44 2A            mov b, [d]
1920   0E45 FD 97         neg b
1921   0E47 E7            pop d
1922   0E48 FD 43         mov [d], b
1923   0E4A 0A 6F 0E      jmp _if27_exit
1924   0E4D             _if27_else:
1925   0E4D             ;; if (num == 0) { 
1926   0E4D             _if28_cond:
1927   0E4D FA 05 00      lea d, [bp + 5] ; $num
1928   0E50 2A            mov b, [d]
1929   0E51             ; START RELATIONAL
1930   0E51 D7            push a
1931   0E52 11            mov a, b
1932   0E53 26 00 00      mov b, $0
1933   0E56 B0            cmp a, b
1934   0E57 FD 71         seq ; ==
1935   0E59 E4            pop a
1936   0E5A             ; END RELATIONAL
1937   0E5A C0 00 00      cmp b, 0
1938   0E5D C6 6F 0E      je _if28_exit
1939   0E60             _if28_true:
1940   0E60             ;; putchar('0'); 
1941   0E60 26 30 00      mov b, $30
1942   0E63 DD            push bl
1943   0E64 07 12 15      call putchar
1944   0E67 51 01 00      add sp, 1
1945   0E6A             ;; return; 
1946   0E6A F9            leave
1947   0E6B 09            ret
1948   0E6C 0A 6F 0E      jmp _if28_exit
1949   0E6F             _if28_exit:
1950   0E6F             _if27_exit:
1951   0E6F             ;; while (num > 0) { 
1952   0E6F             _while29_cond:
1953   0E6F FA 05 00      lea d, [bp + 5] ; $num
1954   0E72 2A            mov b, [d]
1955   0E73             ; START RELATIONAL
1956   0E73 D7            push a
1957   0E74 11            mov a, b
1958   0E75 26 00 00      mov b, $0
1959   0E78 B0            cmp a, b
1960   0E79 FD 7F         sgt ; >
1961   0E7B E4            pop a
1962   0E7C             ; END RELATIONAL
1963   0E7C C0 00 00      cmp b, 0
1964   0E7F C6 C9 0E      je _while29_exit
1965   0E82             _while29_block:
1966   0E82             ;; digits[i] = '0' + (num % 10); 
1967   0E82 FA FC FF      lea d, [bp + -4] ; $digits
1968   0E85 D7            push a
1969   0E86 DA            push d
1970   0E87 FA FA FF      lea d, [bp + -6] ; $i
1971   0E8A 2A            mov b, [d]
1972   0E8B E7            pop d
1973   0E8C 5A            add d, b
1974   0E8D E4            pop a
1975   0E8E DA            push d
1976   0E8F 26 30 00      mov b, $30
1977   0E92             ; START TERMS
1978   0E92 D7            push a
1979   0E93 11            mov a, b
1980   0E94 FA 05 00      lea d, [bp + 5] ; $num
1981   0E97 2A            mov b, [d]
1982   0E98             ; START FACTORS
1983   0E98 D7            push a
1984   0E99 11            mov a, b
1985   0E9A 26 0A 00      mov b, $a
1986   0E9D AE            div a, b ; 
1987   0E9E 11            mov a, b
1988   0E9F 27            mov b, a
1989   0EA0 E4            pop a
1990   0EA1             ; END FACTORS
1991   0EA1 56            add b, a
1992   0EA2 E4            pop a
1993   0EA3             ; END TERMS
1994   0EA3 E7            pop d
1995   0EA4 FD 3E         mov [d], bl
1996   0EA6             ;; num = num / 10; 
1997   0EA6 FA 05 00      lea d, [bp + 5] ; $num
1998   0EA9 DA            push d
1999   0EAA FA 05 00      lea d, [bp + 5] ; $num
2000   0EAD 2A            mov b, [d]
2001   0EAE             ; START FACTORS
2002   0EAE D7            push a
2003   0EAF 11            mov a, b
2004   0EB0 26 0A 00      mov b, $a
2005   0EB3 AE            div a, b
2006   0EB4 27            mov b, a
2007   0EB5 E4            pop a
2008   0EB6             ; END FACTORS
2009   0EB6 E7            pop d
2010   0EB7 FD 43         mov [d], b
2011   0EB9             ;; i++; 
2012   0EB9 FA FA FF      lea d, [bp + -6] ; $i
2013   0EBC 2A            mov b, [d]
2014   0EBD D8            push b
2015   0EBE FD 77         inc b
2016   0EC0 FA FA FF      lea d, [bp + -6] ; $i
2017   0EC3 FD 43         mov [d], b
2018   0EC5 E5            pop b
2019   0EC6 0A 6F 0E      jmp _while29_cond
2020   0EC9             _while29_exit:
2021   0EC9             ;; while (i > 0) { 
2022   0EC9             _while30_cond:
2023   0EC9 FA FA FF      lea d, [bp + -6] ; $i
2024   0ECC 2A            mov b, [d]
2025   0ECD             ; START RELATIONAL
2026   0ECD D7            push a
2027   0ECE 11            mov a, b
2028   0ECF 26 00 00      mov b, $0
2029   0ED2 B0            cmp a, b
2030   0ED3 FD 7F         sgt ; >
2031   0ED5 E4            pop a
2032   0ED6             ; END RELATIONAL
2033   0ED6 C0 00 00      cmp b, 0
2034   0ED9 C6 02 0F      je _while30_exit
2035   0EDC             _while30_block:
2036   0EDC             ;; i--; 
2037   0EDC FA FA FF      lea d, [bp + -6] ; $i
2038   0EDF 2A            mov b, [d]
2039   0EE0 D8            push b
2040   0EE1 FD 7D         dec b
2041   0EE3 FA FA FF      lea d, [bp + -6] ; $i
2042   0EE6 FD 43         mov [d], b
2043   0EE8 E5            pop b
2044   0EE9             ;; putchar(digits[i]); 
2045   0EE9 FA FC FF      lea d, [bp + -4] ; $digits
2046   0EEC D7            push a
2047   0EED DA            push d
2048   0EEE FA FA FF      lea d, [bp + -6] ; $i
2049   0EF1 2A            mov b, [d]
2050   0EF2 E7            pop d
2051   0EF3 5A            add d, b
2052   0EF4 E4            pop a
2053   0EF5 32            mov bl, [d]
2054   0EF6 A7 00         mov bh, 0
2055   0EF8 DD            push bl
2056   0EF9 07 12 15      call putchar
2057   0EFC 51 01 00      add sp, 1
2058   0EFF 0A C9 0E      jmp _while30_cond
2059   0F02             _while30_exit:
2060   0F02 F9            leave
2061   0F03 09            ret
2062   0F04             
2063   0F04             print_signed_long:
2064   0F04 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2065   0F07             ;; char digits[10]; 
2066   0F07 52 0A 00      sub sp, 10 ; digits
2067   0F0A             ;; int i = 0; 
2068   0F0A 52 02 00      sub sp, 2 ; i
2069   0F0D             ; --- START LOCAL VAR INITIALIZATION
2070   0F0D FA F5 FF      lea d, [bp + -11] ; $i
2071   0F10 DA            push d
2072   0F11 26 00 00      mov b, $0
2073   0F14 E7            pop d
2074   0F15 FD 43         mov [d], b
2075   0F17             ; --- END LOCAL VAR INITIALIZATION
2076   0F17             ;; if (num < 0) { 
2077   0F17             _if31_cond:
2078   0F17 FA 05 00      lea d, [bp + 5] ; $num
2079   0F1A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2080   0F1D FD 39         mov c, b ; And place it into C
2081   0F1F 2A            mov b, [d] ; Lower Word in B
2082   0F20             ; START RELATIONAL
2083   0F20 D7            push a
2084   0F21 FD D8         push g
2085   0F23 11            mov a, b
2086   0F24 FD 7A         mov g, c
2087   0F26 26 00 00      mov b, $0
2088   0F29 38 00 00      mov c, 0
2089   0F2C FD AF 00 00   cmp32 ga, cb
2089   0F30 00 00 00 00 
2089   0F34 00 00 00 00 
2089   0F38 00 00 00 00 
2089   0F3C 00 00 00 00 
2089   0F40 00 00 00 00 
2089   0F44 00 00 00 00 
2089   0F48 00 00 00 00 
2089   0F4C 00 00 00 00 
2089   0F50 00 00 00 00 
2089   0F54 00 00 00 00 
2089   0F58 00 00 00 00 
2089   0F5C 00 00 00 00 
2089   0F60 00 00 00 00 
2089   0F64 00 00 00 00 
2089   0F68 00 00 00 00 
2089   0F6C 00 00 00 00 
2089   0F70 00 00 00 00 
2089   0F74 00 00 00 00 
2089   0F78 00 00 00 00 
2089   0F7C 00 00 00 00 
2089   0F80 00 00 00 00 
2089   0F84 00 00 00 00 
2089   0F88 00 00 00 00 
2089   0F8C 00 00 00 00 
2089   0F90 00 00 00 00 
2089   0F94 00 00 00 00 
2089   0F98 00 00 00 00 
2089   0F9C 00 00 00 00 
2089   0FA0 00 00 00 00 
2089   0FA4 00 00 00 00 
2089   0FA8 00 00 00 00 
2089   0FAC 00 00 00 00 
2089   0FB0 00 00 00 00 
2089   0FB4 00 00 00 00 
2089   0FB8 00 00 00 00 
2089   0FBC 00 00 00 00 
2089   0FC0 00 00 00 00 
2089   0FC4 00 00 00 00 
2089   0FC8 00 00 00 00 
2089   0FCC 00 00 00 00 
2089   0FD0 00 00 00 00 
2089   0FD4 00 00 00 00 
2089   0FD8 00 00 00 00 
2089   0FDC 00 00 00 00 
2089   0FE0 00 00 00 00 
2089   0FE4 00 00 00 00 
2089   0FE8 00 00 00 00 
2089   0FEC 00 00 00 00 
2089   0FF0 00 00 00 00 
2089   0FF4 00 00 00 00 
2089   0FF8 00 00 00 00 
2089   0FFC 00 00 00 00 
2089   1000 00 00 00 00 
2089   1004 00 00 00 00 
2089   1008 00 00 00 00 
2089   100C 00 00 00 00 
2089   1010 00 00 00 00 
2089   1014 00 00 00 00 
2089   1018 00 00 00 00 
2089   101C 00 00 00 00 
2089   1020 00 00 00 00 
2089   1024 00 00 00 00 
2089   1028 00 00 00 00 
2089   102C 00 
2090   102D FD 73         slt ; <
2091   102F FD F1         pop g
2092   1031 E4            pop a
2093   1032             ; END RELATIONAL
2094   1032 C0 00 00      cmp b, 0
2095   1035 C6 5C 10      je _if31_else
2096   1038             _if31_true:
2097   1038             ;; putchar('-'); 
2098   1038 26 2D 00      mov b, $2d
2099   103B DD            push bl
2100   103C 07 12 15      call putchar
2101   103F 51 01 00      add sp, 1
2102   1042             ;; num = -num; 
2103   1042 FA 05 00      lea d, [bp + 5] ; $num
2104   1045 DA            push d
2105   1046 FA 05 00      lea d, [bp + 5] ; $num
2106   1049 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2107   104C FD 39         mov c, b ; And place it into C
2108   104E 2A            mov b, [d] ; Lower Word in B
2109   104F FD 97         neg b
2110   1051 E7            pop d
2111   1052 FD 43         mov [d], b
2112   1054 28            mov b, c
2113   1055 FD 44 02 00   mov [d + 2], b
2114   1059 0A 8C 11      jmp _if31_exit
2115   105C             _if31_else:
2116   105C             ;; if (num == 0) { 
2117   105C             _if32_cond:
2118   105C FA 05 00      lea d, [bp + 5] ; $num
2119   105F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2120   1062 FD 39         mov c, b ; And place it into C
2121   1064 2A            mov b, [d] ; Lower Word in B
2122   1065             ; START RELATIONAL
2123   1065 D7            push a
2124   1066 FD D8         push g
2125   1068 11            mov a, b
2126   1069 FD 7A         mov g, c
2127   106B 26 00 00      mov b, $0
2128   106E 38 00 00      mov c, 0
2129   1071 FD AF 00 00   cmp32 ga, cb
2129   1075 00 00 00 00 
2129   1079 00 00 00 00 
2129   107D 00 00 00 00 
2129   1081 00 00 00 00 
2129   1085 00 00 00 00 
2129   1089 00 00 00 00 
2129   108D 00 00 00 00 
2129   1091 00 00 00 00 
2129   1095 00 00 00 00 
2129   1099 00 00 00 00 
2129   109D 00 00 00 00 
2129   10A1 00 00 00 00 
2129   10A5 00 00 00 00 
2129   10A9 00 00 00 00 
2129   10AD 00 00 00 00 
2129   10B1 00 00 00 00 
2129   10B5 00 00 00 00 
2129   10B9 00 00 00 00 
2129   10BD 00 00 00 00 
2129   10C1 00 00 00 00 
2129   10C5 00 00 00 00 
2129   10C9 00 00 00 00 
2129   10CD 00 00 00 00 
2129   10D1 00 00 00 00 
2129   10D5 00 00 00 00 
2129   10D9 00 00 00 00 
2129   10DD 00 00 00 00 
2129   10E1 00 00 00 00 
2129   10E5 00 00 00 00 
2129   10E9 00 00 00 00 
2129   10ED 00 00 00 00 
2129   10F1 00 00 00 00 
2129   10F5 00 00 00 00 
2129   10F9 00 00 00 00 
2129   10FD 00 00 00 00 
2129   1101 00 00 00 00 
2129   1105 00 00 00 00 
2129   1109 00 00 00 00 
2129   110D 00 00 00 00 
2129   1111 00 00 00 00 
2129   1115 00 00 00 00 
2129   1119 00 00 00 00 
2129   111D 00 00 00 00 
2129   1121 00 00 00 00 
2129   1125 00 00 00 00 
2129   1129 00 00 00 00 
2129   112D 00 00 00 00 
2129   1131 00 00 00 00 
2129   1135 00 00 00 00 
2129   1139 00 00 00 00 
2129   113D 00 00 00 00 
2129   1141 00 00 00 00 
2129   1145 00 00 00 00 
2129   1149 00 00 00 00 
2129   114D 00 00 00 00 
2129   1151 00 00 00 00 
2129   1155 00 00 00 00 
2129   1159 00 00 00 00 
2129   115D 00 00 00 00 
2129   1161 00 00 00 00 
2129   1165 00 00 00 00 
2129   1169 00 00 00 00 
2129   116D 00 00 00 00 
2129   1171 00 
2130   1172 FD 71         seq ; ==
2131   1174 FD F1         pop g
2132   1176 E4            pop a
2133   1177             ; END RELATIONAL
2134   1177 C0 00 00      cmp b, 0
2135   117A C6 8C 11      je _if32_exit
2136   117D             _if32_true:
2137   117D             ;; putchar('0'); 
2138   117D 26 30 00      mov b, $30
2139   1180 DD            push bl
2140   1181 07 12 15      call putchar
2141   1184 51 01 00      add sp, 1
2142   1187             ;; return; 
2143   1187 F9            leave
2144   1188 09            ret
2145   1189 0A 8C 11      jmp _if32_exit
2146   118C             _if32_exit:
2147   118C             _if31_exit:
2148   118C             ;; while (num > 0) { 
2149   118C             _while33_cond:
2150   118C FA 05 00      lea d, [bp + 5] ; $num
2151   118F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2152   1192 FD 39         mov c, b ; And place it into C
2153   1194 2A            mov b, [d] ; Lower Word in B
2154   1195             ; START RELATIONAL
2155   1195 D7            push a
2156   1196 FD D8         push g
2157   1198 11            mov a, b
2158   1199 FD 7A         mov g, c
2159   119B 26 00 00      mov b, $0
2160   119E 38 00 00      mov c, 0
2161   11A1 FD 7F         sgt
2162   11A3 FD F1         pop g
2163   11A5 E4            pop a
2164   11A6             ; END RELATIONAL
2165   11A6 C0 00 00      cmp b, 0
2166   11A9 C6 09 12      je _while33_exit
2167   11AC             _while33_block:
2168   11AC             ;; digits[i] = '0' + (num % 10); 
2169   11AC FA F7 FF      lea d, [bp + -9] ; $digits
2170   11AF D7            push a
2171   11B0 DA            push d
2172   11B1 FA F5 FF      lea d, [bp + -11] ; $i
2173   11B4 2A            mov b, [d]
2174   11B5 E7            pop d
2175   11B6 5A            add d, b
2176   11B7 E4            pop a
2177   11B8 DA            push d
2178   11B9 26 30 00      mov b, $30
2179   11BC             ; START TERMS
2180   11BC D7            push a
2181   11BD 11            mov a, b
2182   11BE FA 05 00      lea d, [bp + 5] ; $num
2183   11C1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2184   11C4 FD 39         mov c, b ; And place it into C
2185   11C6 2A            mov b, [d] ; Lower Word in B
2186   11C7             ; START FACTORS
2187   11C7 D7            push a
2188   11C8 11            mov a, b
2189   11C9 26 0A 00      mov b, $a
2190   11CC AE            div a, b ; 
2191   11CD 11            mov a, b
2192   11CE 27            mov b, a
2193   11CF E4            pop a
2194   11D0             ; END FACTORS
2195   11D0 54            add a, b
2196   11D1 D7            push a
2197   11D2 FD 12         mov a, g
2198   11D4 28            mov b, c
2199   11D5 5C            adc a, b
2200   11D6 39            mov c, a
2201   11D7 E5            pop b
2202   11D8 E4            pop a
2203   11D9             ; END TERMS
2204   11D9 E7            pop d
2205   11DA FD 3E         mov [d], bl
2206   11DC             ;; num = num / 10; 
2207   11DC FA 05 00      lea d, [bp + 5] ; $num
2208   11DF DA            push d
2209   11E0 FA 05 00      lea d, [bp + 5] ; $num
2210   11E3 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2211   11E6 FD 39         mov c, b ; And place it into C
2212   11E8 2A            mov b, [d] ; Lower Word in B
2213   11E9             ; START FACTORS
2214   11E9 D7            push a
2215   11EA 11            mov a, b
2216   11EB 26 0A 00      mov b, $a
2217   11EE AE            div a, b
2218   11EF 27            mov b, a
2219   11F0 E4            pop a
2220   11F1             ; END FACTORS
2221   11F1 E7            pop d
2222   11F2 FD 43         mov [d], b
2223   11F4 28            mov b, c
2224   11F5 FD 44 02 00   mov [d + 2], b
2225   11F9             ;; i++; 
2226   11F9 FA F5 FF      lea d, [bp + -11] ; $i
2227   11FC 2A            mov b, [d]
2228   11FD D8            push b
2229   11FE FD 77         inc b
2230   1200 FA F5 FF      lea d, [bp + -11] ; $i
2231   1203 FD 43         mov [d], b
2232   1205 E5            pop b
2233   1206 0A 8C 11      jmp _while33_cond
2234   1209             _while33_exit:
2235   1209             ;; while (i > 0) { 
2236   1209             _while34_cond:
2237   1209 FA F5 FF      lea d, [bp + -11] ; $i
2238   120C 2A            mov b, [d]
2239   120D             ; START RELATIONAL
2240   120D D7            push a
2241   120E 11            mov a, b
2242   120F 26 00 00      mov b, $0
2243   1212 B0            cmp a, b
2244   1213 FD 7F         sgt ; >
2245   1215 E4            pop a
2246   1216             ; END RELATIONAL
2247   1216 C0 00 00      cmp b, 0
2248   1219 C6 42 12      je _while34_exit
2249   121C             _while34_block:
2250   121C             ;; i--; 
2251   121C FA F5 FF      lea d, [bp + -11] ; $i
2252   121F 2A            mov b, [d]
2253   1220 D8            push b
2254   1221 FD 7D         dec b
2255   1223 FA F5 FF      lea d, [bp + -11] ; $i
2256   1226 FD 43         mov [d], b
2257   1228 E5            pop b
2258   1229             ;; putchar(digits[i]); 
2259   1229 FA F7 FF      lea d, [bp + -9] ; $digits
2260   122C D7            push a
2261   122D DA            push d
2262   122E FA F5 FF      lea d, [bp + -11] ; $i
2263   1231 2A            mov b, [d]
2264   1232 E7            pop d
2265   1233 5A            add d, b
2266   1234 E4            pop a
2267   1235 32            mov bl, [d]
2268   1236 A7 00         mov bh, 0
2269   1238 DD            push bl
2270   1239 07 12 15      call putchar
2271   123C 51 01 00      add sp, 1
2272   123F 0A 09 12      jmp _while34_cond
2273   1242             _while34_exit:
2274   1242 F9            leave
2275   1243 09            ret
2276   1244             
2277   1244             print_unsigned_long:
2278   1244 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2279   1247             ;; char digits[10]; 
2280   1247 52 0A 00      sub sp, 10 ; digits
2281   124A             ;; int i; 
2282   124A 52 02 00      sub sp, 2 ; i
2283   124D             ;; i = 0; 
2284   124D FA F5 FF      lea d, [bp + -11] ; $i
2285   1250 DA            push d
2286   1251 26 00 00      mov b, $0
2287   1254 E7            pop d
2288   1255 FD 43         mov [d], b
2289   1257             ;; if(num == 0){ 
2290   1257             _if35_cond:
2291   1257 FA 05 00      lea d, [bp + 5] ; $num
2292   125A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2293   125D FD 39         mov c, b ; And place it into C
2294   125F 2A            mov b, [d] ; Lower Word in B
2295   1260             ; START RELATIONAL
2296   1260 D7            push a
2297   1261 FD D8         push g
2298   1263 11            mov a, b
2299   1264 FD 7A         mov g, c
2300   1266 26 00 00      mov b, $0
2301   1269 38 00 00      mov c, 0
2302   126C FD AF 00 00   cmp32 ga, cb
2302   1270 00 00 00 00 
2302   1274 00 00 00 00 
2302   1278 00 00 00 00 
2302   127C 00 00 00 00 
2302   1280 00 00 00 00 
2302   1284 00 00 00 00 
2302   1288 00 00 00 00 
2302   128C 00 00 00 00 
2302   1290 00 00 00 00 
2302   1294 00 00 00 00 
2302   1298 00 00 00 00 
2302   129C 00 00 00 00 
2302   12A0 00 00 00 00 
2302   12A4 00 00 00 00 
2302   12A8 00 00 00 00 
2302   12AC 00 00 00 00 
2302   12B0 00 00 00 00 
2302   12B4 00 00 00 00 
2302   12B8 00 00 00 00 
2302   12BC 00 00 00 00 
2302   12C0 00 00 00 00 
2302   12C4 00 00 00 00 
2302   12C8 00 00 00 00 
2302   12CC 00 00 00 00 
2302   12D0 00 00 00 00 
2302   12D4 00 00 00 00 
2302   12D8 00 00 00 00 
2302   12DC 00 00 00 00 
2302   12E0 00 00 00 00 
2302   12E4 00 00 00 00 
2302   12E8 00 00 00 00 
2302   12EC 00 00 00 00 
2302   12F0 00 00 00 00 
2302   12F4 00 00 00 00 
2302   12F8 00 00 00 00 
2302   12FC 00 00 00 00 
2302   1300 00 00 00 00 
2302   1304 00 00 00 00 
2302   1308 00 00 00 00 
2302   130C 00 00 00 00 
2302   1310 00 00 00 00 
2302   1314 00 00 00 00 
2302   1318 00 00 00 00 
2302   131C 00 00 00 00 
2302   1320 00 00 00 00 
2302   1324 00 00 00 00 
2302   1328 00 00 00 00 
2302   132C 00 00 00 00 
2302   1330 00 00 00 00 
2302   1334 00 00 00 00 
2302   1338 00 00 00 00 
2302   133C 00 00 00 00 
2302   1340 00 00 00 00 
2302   1344 00 00 00 00 
2302   1348 00 00 00 00 
2302   134C 00 00 00 00 
2302   1350 00 00 00 00 
2302   1354 00 00 00 00 
2302   1358 00 00 00 00 
2302   135C 00 00 00 00 
2302   1360 00 00 00 00 
2302   1364 00 00 00 00 
2302   1368 00 00 00 00 
2302   136C 00 
2303   136D FD 71         seq ; ==
2304   136F FD F1         pop g
2305   1371 E4            pop a
2306   1372             ; END RELATIONAL
2307   1372 C0 00 00      cmp b, 0
2308   1375 C6 87 13      je _if35_exit
2309   1378             _if35_true:
2310   1378             ;; putchar('0'); 
2311   1378 26 30 00      mov b, $30
2312   137B DD            push bl
2313   137C 07 12 15      call putchar
2314   137F 51 01 00      add sp, 1
2315   1382             ;; return; 
2316   1382 F9            leave
2317   1383 09            ret
2318   1384 0A 87 13      jmp _if35_exit
2319   1387             _if35_exit:
2320   1387             ;; while (num > 0) { 
2321   1387             _while36_cond:
2322   1387 FA 05 00      lea d, [bp + 5] ; $num
2323   138A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2324   138D FD 39         mov c, b ; And place it into C
2325   138F 2A            mov b, [d] ; Lower Word in B
2326   1390             ; START RELATIONAL
2327   1390 D7            push a
2328   1391 FD D8         push g
2329   1393 11            mov a, b
2330   1394 FD 7A         mov g, c
2331   1396 26 00 00      mov b, $0
2332   1399 38 00 00      mov c, 0
2333   139C FD 81         sgu
2334   139E FD F1         pop g
2335   13A0 E4            pop a
2336   13A1             ; END RELATIONAL
2337   13A1 C0 00 00      cmp b, 0
2338   13A4 C6 04 14      je _while36_exit
2339   13A7             _while36_block:
2340   13A7             ;; digits[i] = '0' + (num % 10); 
2341   13A7 FA F7 FF      lea d, [bp + -9] ; $digits
2342   13AA D7            push a
2343   13AB DA            push d
2344   13AC FA F5 FF      lea d, [bp + -11] ; $i
2345   13AF 2A            mov b, [d]
2346   13B0 E7            pop d
2347   13B1 5A            add d, b
2348   13B2 E4            pop a
2349   13B3 DA            push d
2350   13B4 26 30 00      mov b, $30
2351   13B7             ; START TERMS
2352   13B7 D7            push a
2353   13B8 11            mov a, b
2354   13B9 FA 05 00      lea d, [bp + 5] ; $num
2355   13BC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2356   13BF FD 39         mov c, b ; And place it into C
2357   13C1 2A            mov b, [d] ; Lower Word in B
2358   13C2             ; START FACTORS
2359   13C2 D7            push a
2360   13C3 11            mov a, b
2361   13C4 26 0A 00      mov b, $a
2362   13C7 AE            div a, b ; 
2363   13C8 11            mov a, b
2364   13C9 27            mov b, a
2365   13CA E4            pop a
2366   13CB             ; END FACTORS
2367   13CB 54            add a, b
2368   13CC D7            push a
2369   13CD FD 12         mov a, g
2370   13CF 28            mov b, c
2371   13D0 5C            adc a, b
2372   13D1 39            mov c, a
2373   13D2 E5            pop b
2374   13D3 E4            pop a
2375   13D4             ; END TERMS
2376   13D4 E7            pop d
2377   13D5 FD 3E         mov [d], bl
2378   13D7             ;; num = num / 10; 
2379   13D7 FA 05 00      lea d, [bp + 5] ; $num
2380   13DA DA            push d
2381   13DB FA 05 00      lea d, [bp + 5] ; $num
2382   13DE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
2383   13E1 FD 39         mov c, b ; And place it into C
2384   13E3 2A            mov b, [d] ; Lower Word in B
2385   13E4             ; START FACTORS
2386   13E4 D7            push a
2387   13E5 11            mov a, b
2388   13E6 26 0A 00      mov b, $a
2389   13E9 AE            div a, b
2390   13EA 27            mov b, a
2391   13EB E4            pop a
2392   13EC             ; END FACTORS
2393   13EC E7            pop d
2394   13ED FD 43         mov [d], b
2395   13EF 28            mov b, c
2396   13F0 FD 44 02 00   mov [d + 2], b
2397   13F4             ;; i++; 
2398   13F4 FA F5 FF      lea d, [bp + -11] ; $i
2399   13F7 2A            mov b, [d]
2400   13F8 D8            push b
2401   13F9 FD 77         inc b
2402   13FB FA F5 FF      lea d, [bp + -11] ; $i
2403   13FE FD 43         mov [d], b
2404   1400 E5            pop b
2405   1401 0A 87 13      jmp _while36_cond
2406   1404             _while36_exit:
2407   1404             ;; while (i > 0) { 
2408   1404             _while37_cond:
2409   1404 FA F5 FF      lea d, [bp + -11] ; $i
2410   1407 2A            mov b, [d]
2411   1408             ; START RELATIONAL
2412   1408 D7            push a
2413   1409 11            mov a, b
2414   140A 26 00 00      mov b, $0
2415   140D B0            cmp a, b
2416   140E FD 7F         sgt ; >
2417   1410 E4            pop a
2418   1411             ; END RELATIONAL
2419   1411 C0 00 00      cmp b, 0
2420   1414 C6 3D 14      je _while37_exit
2421   1417             _while37_block:
2422   1417             ;; i--; 
2423   1417 FA F5 FF      lea d, [bp + -11] ; $i
2424   141A 2A            mov b, [d]
2425   141B D8            push b
2426   141C FD 7D         dec b
2427   141E FA F5 FF      lea d, [bp + -11] ; $i
2428   1421 FD 43         mov [d], b
2429   1423 E5            pop b
2430   1424             ;; putchar(digits[i]); 
2431   1424 FA F7 FF      lea d, [bp + -9] ; $digits
2432   1427 D7            push a
2433   1428 DA            push d
2434   1429 FA F5 FF      lea d, [bp + -11] ; $i
2435   142C 2A            mov b, [d]
2436   142D E7            pop d
2437   142E 5A            add d, b
2438   142F E4            pop a
2439   1430 32            mov bl, [d]
2440   1431 A7 00         mov bh, 0
2441   1433 DD            push bl
2442   1434 07 12 15      call putchar
2443   1437 51 01 00      add sp, 1
2444   143A 0A 04 14      jmp _while37_cond
2445   143D             _while37_exit:
2446   143D F9            leave
2447   143E 09            ret
2448   143F             
2449   143F             print_unsigned:
2450   143F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2451   1442             ;; char digits[5]; 
2452   1442 52 05 00      sub sp, 5 ; digits
2453   1445             ;; int i; 
2454   1445 52 02 00      sub sp, 2 ; i
2455   1448             ;; i = 0; 
2456   1448 FA FA FF      lea d, [bp + -6] ; $i
2457   144B DA            push d
2458   144C 26 00 00      mov b, $0
2459   144F E7            pop d
2460   1450 FD 43         mov [d], b
2461   1452             ;; if(num == 0){ 
2462   1452             _if38_cond:
2463   1452 FA 05 00      lea d, [bp + 5] ; $num
2464   1455 2A            mov b, [d]
2465   1456             ; START RELATIONAL
2466   1456 D7            push a
2467   1457 11            mov a, b
2468   1458 26 00 00      mov b, $0
2469   145B B0            cmp a, b
2470   145C FD 71         seq ; ==
2471   145E E4            pop a
2472   145F             ; END RELATIONAL
2473   145F C0 00 00      cmp b, 0
2474   1462 C6 74 14      je _if38_exit
2475   1465             _if38_true:
2476   1465             ;; putchar('0'); 
2477   1465 26 30 00      mov b, $30
2478   1468 DD            push bl
2479   1469 07 12 15      call putchar
2480   146C 51 01 00      add sp, 1
2481   146F             ;; return; 
2482   146F F9            leave
2483   1470 09            ret
2484   1471 0A 74 14      jmp _if38_exit
2485   1474             _if38_exit:
2486   1474             ;; while (num > 0) { 
2487   1474             _while39_cond:
2488   1474 FA 05 00      lea d, [bp + 5] ; $num
2489   1477 2A            mov b, [d]
2490   1478             ; START RELATIONAL
2491   1478 D7            push a
2492   1479 11            mov a, b
2493   147A 26 00 00      mov b, $0
2494   147D B0            cmp a, b
2495   147E FD 81         sgu ; > (unsigned)
2496   1480 E4            pop a
2497   1481             ; END RELATIONAL
2498   1481 C0 00 00      cmp b, 0
2499   1484 C6 CE 14      je _while39_exit
2500   1487             _while39_block:
2501   1487             ;; digits[i] = '0' + (num % 10); 
2502   1487 FA FC FF      lea d, [bp + -4] ; $digits
2503   148A D7            push a
2504   148B DA            push d
2505   148C FA FA FF      lea d, [bp + -6] ; $i
2506   148F 2A            mov b, [d]
2507   1490 E7            pop d
2508   1491 5A            add d, b
2509   1492 E4            pop a
2510   1493 DA            push d
2511   1494 26 30 00      mov b, $30
2512   1497             ; START TERMS
2513   1497 D7            push a
2514   1498 11            mov a, b
2515   1499 FA 05 00      lea d, [bp + 5] ; $num
2516   149C 2A            mov b, [d]
2517   149D             ; START FACTORS
2518   149D D7            push a
2519   149E 11            mov a, b
2520   149F 26 0A 00      mov b, $a
2521   14A2 AE            div a, b ; 
2522   14A3 11            mov a, b
2523   14A4 27            mov b, a
2524   14A5 E4            pop a
2525   14A6             ; END FACTORS
2526   14A6 56            add b, a
2527   14A7 E4            pop a
2528   14A8             ; END TERMS
2529   14A8 E7            pop d
2530   14A9 FD 3E         mov [d], bl
2531   14AB             ;; num = num / 10; 
2532   14AB FA 05 00      lea d, [bp + 5] ; $num
2533   14AE DA            push d
2534   14AF FA 05 00      lea d, [bp + 5] ; $num
2535   14B2 2A            mov b, [d]
2536   14B3             ; START FACTORS
2537   14B3 D7            push a
2538   14B4 11            mov a, b
2539   14B5 26 0A 00      mov b, $a
2540   14B8 AE            div a, b
2541   14B9 27            mov b, a
2542   14BA E4            pop a
2543   14BB             ; END FACTORS
2544   14BB E7            pop d
2545   14BC FD 43         mov [d], b
2546   14BE             ;; i++; 
2547   14BE FA FA FF      lea d, [bp + -6] ; $i
2548   14C1 2A            mov b, [d]
2549   14C2 D8            push b
2550   14C3 FD 77         inc b
2551   14C5 FA FA FF      lea d, [bp + -6] ; $i
2552   14C8 FD 43         mov [d], b
2553   14CA E5            pop b
2554   14CB 0A 74 14      jmp _while39_cond
2555   14CE             _while39_exit:
2556   14CE             ;; while (i > 0) { 
2557   14CE             _while40_cond:
2558   14CE FA FA FF      lea d, [bp + -6] ; $i
2559   14D1 2A            mov b, [d]
2560   14D2             ; START RELATIONAL
2561   14D2 D7            push a
2562   14D3 11            mov a, b
2563   14D4 26 00 00      mov b, $0
2564   14D7 B0            cmp a, b
2565   14D8 FD 7F         sgt ; >
2566   14DA E4            pop a
2567   14DB             ; END RELATIONAL
2568   14DB C0 00 00      cmp b, 0
2569   14DE C6 07 15      je _while40_exit
2570   14E1             _while40_block:
2571   14E1             ;; i--; 
2572   14E1 FA FA FF      lea d, [bp + -6] ; $i
2573   14E4 2A            mov b, [d]
2574   14E5 D8            push b
2575   14E6 FD 7D         dec b
2576   14E8 FA FA FF      lea d, [bp + -6] ; $i
2577   14EB FD 43         mov [d], b
2578   14ED E5            pop b
2579   14EE             ;; putchar(digits[i]); 
2580   14EE FA FC FF      lea d, [bp + -4] ; $digits
2581   14F1 D7            push a
2582   14F2 DA            push d
2583   14F3 FA FA FF      lea d, [bp + -6] ; $i
2584   14F6 2A            mov b, [d]
2585   14F7 E7            pop d
2586   14F8 5A            add d, b
2587   14F9 E4            pop a
2588   14FA 32            mov bl, [d]
2589   14FB A7 00         mov bh, 0
2590   14FD DD            push bl
2591   14FE 07 12 15      call putchar
2592   1501 51 01 00      add sp, 1
2593   1504 0A CE 14      jmp _while40_cond
2594   1507             _while40_exit:
2595   1507 F9            leave
2596   1508 09            ret
2597   1509             
2598   1509             date:
2599   1509 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2600   150C             
2601   150C             ; --- BEGIN INLINE ASM BLOCK
2602   150C 19 00         mov al, 0 
2603   150E 05 07         syscall sys_datetime
2604   1510             ; --- END INLINE ASM BLOCK
2605   1510             
2606   1510 F9            leave
2607   1511 09            ret
2608   1512             
2609   1512             putchar:
2610   1512 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2611   1515             
2612   1515             ; --- BEGIN INLINE ASM BLOCK
2613   1515 FA 05 00      lea d, [bp + 5] ; $c
2614   1518 1E            mov al, [d]
2615   1519 23            mov ah, al
2616   151A 07 A3 16      call _putchar
2617   151D             ; --- END INLINE ASM BLOCK
2618   151D             
2619   151D F9            leave
2620   151E 09            ret
2621   151F             
2622   151F             getchar:
2623   151F F8 00 00      enter 0 ; (push bp; mov bp, sp)
2624   1522             ;; char c; 
2625   1522 52 01 00      sub sp, 1 ; c
2626   1525             
2627   1525             ; --- BEGIN INLINE ASM BLOCK
2628   1525 07 9C 16      call getch
2629   1528 1A            mov al, ah
2630   1529 FA 00 00      lea d, [bp + 0] ; $c
2631   152C 3E            mov [d], al
2632   152D             ; --- END INLINE ASM BLOCK
2633   152D             
2634   152D             ;; return c; 
2635   152D FA 00 00      lea d, [bp + 0] ; $c
2636   1530 32            mov bl, [d]
2637   1531 A7 00         mov bh, 0
2638   1533 F9            leave
2639   1534 09            ret
2640   1535             
2641   1535             scann:
2642   1535 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2643   1538             ;; int m; 
2644   1538 52 02 00      sub sp, 2 ; m
2645   153B             
2646   153B             ; --- BEGIN INLINE ASM BLOCK
2647   153B 07 E7 18      call scan_u16d
2648   153E FA FF FF      lea d, [bp + -1] ; $m
2649   1541 43            mov [d], a
2650   1542             ; --- END INLINE ASM BLOCK
2651   1542             
2652   1542             ;; return m; 
2653   1542 FA FF FF      lea d, [bp + -1] ; $m
2654   1545 2A            mov b, [d]
2655   1546 F9            leave
2656   1547 09            ret
2657   1548             
2658   1548             puts:
2659   1548 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2660   154B             
2661   154B             ; --- BEGIN INLINE ASM BLOCK
2662   154B FA 05 00      lea d, [bp + 5] ; $s
2663   154E 15            mov a, [d]
2664   154F 3C            mov d, a
2665   1550 07 ED 17      call _puts
2666   1553 10 00 0A      mov a, $0A00
2667   1556 05 03         syscall sys_io
2668   1558             ; --- END INLINE ASM BLOCK
2669   1558             
2670   1558 F9            leave
2671   1559 09            ret
2672   155A             
2673   155A             print:
2674   155A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2675   155D             
2676   155D             ; --- BEGIN INLINE ASM BLOCK
2677   155D FA 05 00      lea d, [bp + 5] ; $s
2678   1560 FD 2A         mov d, [d]
2679   1562 07 ED 17      call _puts
2680   1565             ; --- END INLINE ASM BLOCK
2681   1565             
2682   1565 F9            leave
2683   1566 09            ret
2684   1567             
2685   1567             getparam:
2686   1567 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2687   156A             ;; char data; 
2688   156A 52 01 00      sub sp, 1 ; data
2689   156D             
2690   156D             ; --- BEGIN INLINE ASM BLOCK
2691   156D 19 04         mov al, 4
2692   156F FA 05 00      lea d, [bp + 5] ; $address
2693   1572 FD 2A         mov d, [d]
2694   1574 05 0C         syscall sys_system
2695   1576 FA 00 00      lea d, [bp + 0] ; $data
2696   1579 FD 3E         mov [d], bl
2697   157B             ; --- END INLINE ASM BLOCK
2698   157B             
2699   157B             ;; return data; 
2700   157B FA 00 00      lea d, [bp + 0] ; $data
2701   157E 32            mov bl, [d]
2702   157F A7 00         mov bh, 0
2703   1581 F9            leave
2704   1582 09            ret
2705   1583             
2706   1583             clear:
2707   1583 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2708   1586             ;; print("\033[2J\033[H"); 
2709   1586 26 DD 65      mov b, _s32 ; "\033[2J\033[H"
2710   1589 FD AB         swp b
2711   158B D8            push b
2712   158C 07 5A 15      call print
2713   158F 51 02 00      add sp, 2
2714   1592 F9            leave
2715   1593 09            ret
2716   1594             
2717   1594             abs:
2718   1594 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2719   1597             ;; return i < 0 ? -i : i; 
2720   1597             _ternary41_cond:
2721   1597 FA 05 00      lea d, [bp + 5] ; $i
2722   159A 2A            mov b, [d]
2723   159B             ; START RELATIONAL
2724   159B D7            push a
2725   159C 11            mov a, b
2726   159D 26 00 00      mov b, $0
2727   15A0 B0            cmp a, b
2728   15A1 FD 73         slt ; < (signed)
2729   15A3 E4            pop a
2730   15A4             ; END RELATIONAL
2731   15A4 C0 00 00      cmp b, 0
2732   15A7 C6 B3 15      je _ternary41_false
2733   15AA             _ternary41_true:
2734   15AA FA 05 00      lea d, [bp + 5] ; $i
2735   15AD 2A            mov b, [d]
2736   15AE FD 97         neg b
2737   15B0 0A B7 15      jmp _ternary41_exit
2738   15B3             _ternary41_false:
2739   15B3 FA 05 00      lea d, [bp + 5] ; $i
2740   15B6 2A            mov b, [d]
2741   15B7             _ternary41_exit:
2742   15B7 F9            leave
2743   15B8 09            ret
2744   15B9             
2745   15B9             include_stdio_asm:
2746   15B9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2747   15BC             
2748   15BC             ; --- BEGIN INLINE ASM BLOCK
2749   15BC             .include "lib/asm/stdio.asm"
0001+  15BC             ;-----------------------------------------------------------------------------
0002+  15BC             ; stdio.s
0003+  15BC             ;-----------------------------------------------------------------------------
0004+  15BC             .include "lib/asm/string.asm"
0001++ 15BC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 15BC             ; string.s
0003++ 15BC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 15BC             
0005++ 15BC             
0006++ 15BC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 15BC             ; _strrev
0008++ 15BC             ; reverse a string
0009++ 15BC             ; D = string address
0010++ 15BC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 15BC             ; 01234
0012++ 15BC             _strrev:
0013++ 15BC 4B          	pusha
0014++ 15BD 07 03 16    	call _strlen	; length in C
0015++ 15C0 12          	mov a, c
0016++ 15C1 AF 01 00    	cmp a, 1
0017++ 15C4 D0 DE 15    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 15C7 7D          	dec a
0019++ 15C8 FD 4E       	mov si, d	; beginning of string
0020++ 15CA FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 15CC 59          	add d, a	; end of string
0022++ 15CD 12          	mov a, c
0023++ 15CE FD 9B       	shr a		; divide by 2
0024++ 15D0 39          	mov c, a	; C now counts the steps
0025++ 15D1             _strrev_L0:
0026++ 15D1 32          	mov bl, [d]	; save load right-side char into BL
0027++ 15D2 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 15D3 3E          	mov [d], al	; store left char into right side
0029++ 15D4 1B          	mov al, bl
0030++ 15D5 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 15D6 7E          	dec c
0032++ 15D7 7F          	dec d
0033++ 15D8 C2 00 00    	cmp c, 0
0034++ 15DB C7 D1 15    	jne _strrev_L0
0035++ 15DE             _strrev_end:
0036++ 15DE 4C          	popa
0037++ 15DF 09          	ret
0038++ 15E0             	
0039++ 15E0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 15E0             ; _strchr
0041++ 15E0             ; search string in D for char in AL
0042++ 15E0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 15E0             _strchr:
0044++ 15E0             _strchr_L0:
0045++ 15E0 32          	mov bl, [d]
0046++ 15E1 C1 00       	cmp bl, 0
0047++ 15E3 C6 EE 15    	je _strchr_end
0048++ 15E6 BA          	cmp al, bl
0049++ 15E7 C6 EE 15    	je _strchr_end
0050++ 15EA 79          	inc d
0051++ 15EB 0A E0 15    	jmp _strchr_L0
0052++ 15EE             _strchr_end:
0053++ 15EE 1B          	mov al, bl
0054++ 15EF 09          	ret
0055++ 15F0             
0056++ 15F0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 15F0             ; _strstr
0058++ 15F0             ; find sub-string
0059++ 15F0             ; str1 in SI
0060++ 15F0             ; str2 in DI
0061++ 15F0             ; SI points to end of source string
0062++ 15F0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 15F0             _strstr:
0064++ 15F0 DB          	push al
0065++ 15F1 DA          	push d
0066++ 15F2 E3          	push di
0067++ 15F3             _strstr_loop:
0068++ 15F3 F3          	cmpsb					; compare a byte of the strings
0069++ 15F4 C7 FF 15    	jne _strstr_ret
0070++ 15F7 FC 00 00    	lea d, [di + 0]
0071++ 15FA BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 15FC C7 F3 15    	jne _strstr_loop				; equal chars but not at end
0073++ 15FF             _strstr_ret:
0074++ 15FF F0          	pop di
0075++ 1600 E7          	pop d
0076++ 1601 E8          	pop al
0077++ 1602 09          	ret
0078++ 1603             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 1603             ; length of null terminated string
0080++ 1603             ; result in C
0081++ 1603             ; pointer in D
0082++ 1603             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 1603             _strlen:
0084++ 1603 DA          	push d
0085++ 1604 38 00 00    	mov c, 0
0086++ 1607             _strlen_L1:
0087++ 1607 BD 00       	cmp byte [d], 0
0088++ 1609 C6 11 16    	je _strlen_ret
0089++ 160C 79          	inc d
0090++ 160D 78          	inc c
0091++ 160E 0A 07 16    	jmp _strlen_L1
0092++ 1611             _strlen_ret:
0093++ 1611 E7          	pop d
0094++ 1612 09          	ret
0095++ 1613             
0096++ 1613             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1613             ; STRCMP
0098++ 1613             ; compare two strings
0099++ 1613             ; str1 in SI
0100++ 1613             ; str2 in DI
0101++ 1613             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1613             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1613             _strcmp:
0104++ 1613 DB          	push al
0105++ 1614 DA          	push d
0106++ 1615 E3          	push di
0107++ 1616 E2          	push si
0108++ 1617             _strcmp_loop:
0109++ 1617 F3          	cmpsb					; compare a byte of the strings
0110++ 1618 C7 23 16    	jne _strcmp_ret
0111++ 161B FB FF FF    	lea d, [si +- 1]
0112++ 161E BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 1620 C7 17 16    	jne _strcmp_loop				; equal chars but not at end
0114++ 1623             _strcmp_ret:
0115++ 1623 EF          	pop si
0116++ 1624 F0          	pop di
0117++ 1625 E7          	pop d
0118++ 1626 E8          	pop al
0119++ 1627 09          	ret
0120++ 1628             
0121++ 1628             
0122++ 1628             ; STRCPY
0123++ 1628             ; copy null terminated string from SI to DI
0124++ 1628             ; source in SI
0125++ 1628             ; destination in DI
0126++ 1628             _strcpy:
0127++ 1628 E2          	push si
0128++ 1629 E3          	push di
0129++ 162A DB          	push al
0130++ 162B             _strcpy_L1:
0131++ 162B F6          	lodsb
0132++ 162C F7          	stosb
0133++ 162D B9 00       	cmp al, 0
0134++ 162F C7 2B 16    	jne _strcpy_L1
0135++ 1632             _strcpy_end:
0136++ 1632 E8          	pop al
0137++ 1633 F0          	pop di
0138++ 1634 EF          	pop si
0139++ 1635 09          	ret
0140++ 1636             
0141++ 1636             ; STRCAT
0142++ 1636             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1636             ; source in SI
0144++ 1636             ; destination in DI
0145++ 1636             _strcat:
0146++ 1636 E2          	push si
0147++ 1637 E3          	push di
0148++ 1638 D7          	push a
0149++ 1639 DA          	push d
0150++ 163A 50          	mov a, di
0151++ 163B 3C          	mov d, a
0152++ 163C             _strcat_goto_end_L1:
0153++ 163C BD 00       	cmp byte[d], 0
0154++ 163E C6 45 16    	je _strcat_start
0155++ 1641 79          	inc d
0156++ 1642 0A 3C 16    	jmp _strcat_goto_end_L1
0157++ 1645             _strcat_start:
0158++ 1645 FD 50       	mov di, d
0159++ 1647             _strcat_L1:
0160++ 1647 F6          	lodsb
0161++ 1648 F7          	stosb
0162++ 1649 B9 00       	cmp al, 0
0163++ 164B C7 47 16    	jne _strcat_L1
0164++ 164E             _strcat_end:
0165++ 164E E7          	pop d
0166++ 164F E4          	pop a
0167++ 1650 F0          	pop di
0168++ 1651 EF          	pop si
0169++ 1652 09          	ret
0170++ 1653             
0171++ 1653             
0005+  1653             
0006+  1653             ;-----------------------------------------------------------------------------
0007+  1653             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  1653             ; ASCII in BL
0009+  1653             ; result in AL
0010+  1653             ; ascii for F = 0100 0110
0011+  1653             ; ascii for 9 = 0011 1001
0012+  1653             ;-----------------------------------------------------------------------------
0013+  1653             hex_ascii_encode:
0014+  1653 1B            mov al, bl
0015+  1654 93 40         test al, $40        ; test if letter or number
0016+  1656 C7 5C 16      jnz hex_letter
0017+  1659 87 0F         and al, $0F        ; get number
0018+  165B 09            ret
0019+  165C             hex_letter:
0020+  165C 87 0F         and al, $0F        ; get letter
0021+  165E 6A 09         add al, 9
0022+  1660 09            ret
0023+  1661             
0024+  1661             ;-----------------------------------------------------------------------------
0025+  1661             ; ATOI
0026+  1661             ; 2 letter hex string in B
0027+  1661             ; 8bit integer returned in AL
0028+  1661             ;-----------------------------------------------------------------------------
0029+  1661             _atoi:
0030+  1661 D8            push b
0031+  1662 07 53 16      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  1665 30            mov bl, bh
0033+  1666 DB            push al          ; save a
0034+  1667 07 53 16      call hex_ascii_encode
0035+  166A EA            pop bl  
0036+  166B FD 9E 04      shl al, 4
0037+  166E 8C            or al, bl
0038+  166F E5            pop b
0039+  1670 09            ret  
0040+  1671             
0041+  1671             
0042+  1671             ;-----------------------------------------------------------------------------
0043+  1671             ; ITOA
0044+  1671             ; 8bit value in BL
0045+  1671             ; 2 byte ASCII result in A
0046+  1671             ;-----------------------------------------------------------------------------
0047+  1671             _itoa:
0048+  1671 DA            push d
0049+  1672 D8            push b
0050+  1673 A7 00         mov bh, 0
0051+  1675 FD A4 04      shr bl, 4  
0052+  1678 74            mov d, b
0053+  1679 1F 21 19      mov al, [d + s_hex_digits]
0054+  167C 23            mov ah, al
0055+  167D               
0056+  167D E5            pop b
0057+  167E D8            push b
0058+  167F A7 00         mov bh, 0
0059+  1681 FD 87 0F      and bl, $0F
0060+  1684 74            mov d, b
0061+  1685 1F 21 19      mov al, [d + s_hex_digits]
0062+  1688 E5            pop b
0063+  1689 E7            pop d
0064+  168A 09            ret
0065+  168B             
0066+  168B             ;-----------------------------------------------------------------------------
0067+  168B             ; HEX STRING TO BINARY
0068+  168B             ; di = destination address
0069+  168B             ; si = source
0070+  168B             ;-----------------------------------------------------------------------------
0071+  168B             _hex_to_int:
0072+  168B             _hex_to_int_L1:
0073+  168B F6            lodsb          ; load from [SI] to AL
0074+  168C B9 00         cmp al, 0        ; check if ASCII 0
0075+  168E C6 9B 16      jz _hex_to_int_ret
0076+  1691 36            mov bh, al
0077+  1692 F6            lodsb
0078+  1693 2F            mov bl, al
0079+  1694 07 61 16      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  1697 F7            stosb          ; store AL to [DI]
0081+  1698 0A 8B 16      jmp _hex_to_int_L1
0082+  169B             _hex_to_int_ret:
0083+  169B 09            ret    
0084+  169C             
0085+  169C             ;-----------------------------------------------------------------------------
0086+  169C             ; GETCHAR
0087+  169C             ; char in ah
0088+  169C             ;-----------------------------------------------------------------------------
0089+  169C             getch:
0090+  169C DB            push al
0091+  169D             getch_retry:
0092+  169D 19 01         mov al, 1
0093+  169F 05 03         syscall sys_io      ; receive in AH
0094+  16A1 E8            pop al
0095+  16A2 09            ret
0096+  16A3             
0097+  16A3             ;-----------------------------------------------------------------------------
0098+  16A3             ; PUTCHAR
0099+  16A3             ; char in ah
0100+  16A3             ;-----------------------------------------------------------------------------
0101+  16A3             _putchar:
0102+  16A3 D7            push a
0103+  16A4 19 00         mov al, 0
0104+  16A6 05 03         syscall sys_io      ; char in AH
0105+  16A8 E4            pop a
0106+  16A9 09            ret
0107+  16AA             
0108+  16AA             ;-----------------------------------------------------------------------------
0109+  16AA             ;; INPUT A STRING
0110+  16AA             ;; terminates with null
0111+  16AA             ;; pointer in D
0112+  16AA             ;-----------------------------------------------------------------------------
0113+  16AA             _gets:
0114+  16AA D7            push a
0115+  16AB DA            push d
0116+  16AC             _gets_loop:
0117+  16AC 19 01         mov al, 1
0118+  16AE 05 03         syscall sys_io      ; receive in AH
0119+  16B0 B9 00         cmp al, 0        ; check error code (AL)
0120+  16B2 C6 AC 16      je _gets_loop      ; if no char received, retry
0121+  16B5             
0122+  16B5 76 1B         cmp ah, 27
0123+  16B7 C6 D8 16      je _gets_ansi_esc
0124+  16BA 76 0A         cmp ah, $0A        ; LF
0125+  16BC C6 43 17      je _gets_end
0126+  16BF 76 0D         cmp ah, $0D        ; CR
0127+  16C1 C6 43 17      je _gets_end
0128+  16C4 76 5C         cmp ah, $5C        ; '\\'
0129+  16C6 C6 04 17      je _gets_escape
0130+  16C9               
0131+  16C9 76 08         cmp ah, $08      ; check for backspace
0132+  16CB C6 D4 16      je _gets_backspace
0133+  16CE             
0134+  16CE 1A            mov al, ah
0135+  16CF 3E            mov [d], al
0136+  16D0 79            inc d
0137+  16D1 0A AC 16      jmp _gets_loop
0138+  16D4             _gets_backspace:
0139+  16D4 7F            dec d
0140+  16D5 0A AC 16      jmp _gets_loop
0141+  16D8             _gets_ansi_esc:
0142+  16D8 19 01         mov al, 1
0143+  16DA 05 03         syscall sys_io        ; receive in AH without echo
0144+  16DC B9 00         cmp al, 0          ; check error code (AL)
0145+  16DE C6 D8 16      je _gets_ansi_esc    ; if no char received, retry
0146+  16E1 76 5B         cmp ah, '['
0147+  16E3 C7 AC 16      jne _gets_loop
0148+  16E6             _gets_ansi_esc_2:
0149+  16E6 19 01         mov al, 1
0150+  16E8 05 03         syscall sys_io          ; receive in AH without echo
0151+  16EA B9 00         cmp al, 0            ; check error code (AL)
0152+  16EC C6 E6 16      je _gets_ansi_esc_2  ; if no char received, retry
0153+  16EF 76 44         cmp ah, 'D'
0154+  16F1 C6 FC 16      je _gets_left_arrow
0155+  16F4 76 43         cmp ah, 'C'
0156+  16F6 C6 00 17      je _gets_right_arrow
0157+  16F9 0A AC 16      jmp _gets_loop
0158+  16FC             _gets_left_arrow:
0159+  16FC 7F            dec d
0160+  16FD 0A AC 16      jmp _gets_loop
0161+  1700             _gets_right_arrow:
0162+  1700 79            inc d
0163+  1701 0A AC 16      jmp _gets_loop
0164+  1704             _gets_escape:
0165+  1704 19 01         mov al, 1
0166+  1706 05 03         syscall sys_io      ; receive in AH
0167+  1708 B9 00         cmp al, 0        ; check error code (AL)
0168+  170A C6 04 17      je _gets_escape      ; if no char received, retry
0169+  170D 76 6E         cmp ah, 'n'
0170+  170F C6 2E 17      je _gets_LF
0171+  1712 76 72         cmp ah, 'r'
0172+  1714 C6 35 17      je _gets_CR
0173+  1717 76 30         cmp ah, '0'
0174+  1719 C6 3C 17      je _gets_NULL
0175+  171C 76 5C         cmp ah, $5C  ; '\'
0176+  171E C6 27 17      je _gets_slash
0177+  1721 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  1722 3E            mov [d], al
0179+  1723 79            inc d
0180+  1724 0A AC 16      jmp _gets_loop
0181+  1727             _gets_slash:
0182+  1727 19 5C         mov al, $5C
0183+  1729 3E            mov [d], al
0184+  172A 79            inc d
0185+  172B 0A AC 16      jmp _gets_loop
0186+  172E             _gets_LF:
0187+  172E 19 0A         mov al, $0A
0188+  1730 3E            mov [d], al
0189+  1731 79            inc d
0190+  1732 0A AC 16      jmp _gets_loop
0191+  1735             _gets_CR:
0192+  1735 19 0D         mov al, $0D
0193+  1737 3E            mov [d], al
0194+  1738 79            inc d
0195+  1739 0A AC 16      jmp _gets_loop
0196+  173C             _gets_NULL:
0197+  173C 19 00         mov al, $00
0198+  173E 3E            mov [d], al
0199+  173F 79            inc d
0200+  1740 0A AC 16      jmp _gets_loop
0201+  1743             _gets_end:
0202+  1743 19 00         mov al, 0
0203+  1745 3E            mov [d], al        ; terminate string
0204+  1746 E7            pop d
0205+  1747 E4            pop a
0206+  1748 09            ret
0207+  1749             
0208+  1749             ;-----------------------------------------------------------------------------
0209+  1749             ;; INPUT TEXT
0210+  1749             ;; terminated with CTRL+D
0211+  1749             ;; pointer in D
0212+  1749             ;-----------------------------------------------------------------------------
0213+  1749             _gettxt:
0214+  1749 D7            push a
0215+  174A DA            push d
0216+  174B             _gettxt_loop:
0217+  174B 19 01         mov al, 1
0218+  174D 05 03         syscall sys_io      ; receive in AH
0219+  174F B9 00         cmp al, 0        ; check error code (AL)
0220+  1751 C6 4B 17      je _gettxt_loop    ; if no char received, retry
0221+  1754 76 04         cmp ah, 4      ; EOT
0222+  1756 C6 94 17      je _gettxt_end
0223+  1759 76 08         cmp ah, $08      ; check for backspace
0224+  175B C6 90 17      je _gettxt_backspace
0225+  175E 76 5C         cmp ah, $5C        ; '\'
0226+  1760 C6 69 17      je _gettxt_escape
0227+  1763 1A            mov al, ah
0228+  1764 3E            mov [d], al
0229+  1765 79            inc d
0230+  1766 0A 4B 17      jmp _gettxt_loop
0231+  1769             _gettxt_escape:
0232+  1769 19 01         mov al, 1
0233+  176B 05 03         syscall sys_io      ; receive in AH
0234+  176D B9 00         cmp al, 0        ; check error code (AL)
0235+  176F C6 69 17      je _gettxt_escape    ; if no char received, retry
0236+  1772 76 6E         cmp ah, 'n'
0237+  1774 C6 82 17      je _gettxt_LF
0238+  1777 76 72         cmp ah, 'r'
0239+  1779 C6 89 17      je _gettxt_CR
0240+  177C 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  177D 3E            mov [d], al
0242+  177E 79            inc d
0243+  177F 0A 4B 17      jmp _gettxt_loop
0244+  1782             _gettxt_LF:
0245+  1782 19 0A         mov al, $0A
0246+  1784 3E            mov [d], al
0247+  1785 79            inc d
0248+  1786 0A 4B 17      jmp _gettxt_loop
0249+  1789             _gettxt_CR:
0250+  1789 19 0D         mov al, $0D
0251+  178B 3E            mov [d], al
0252+  178C 79            inc d
0253+  178D 0A 4B 17      jmp _gettxt_loop
0254+  1790             _gettxt_backspace:
0255+  1790 7F            dec d
0256+  1791 0A 4B 17      jmp _gettxt_loop
0257+  1794             _gettxt_end:
0258+  1794 19 00         mov al, 0
0259+  1796 3E            mov [d], al        ; terminate string
0260+  1797 E7            pop d
0261+  1798 E4            pop a
0262+  1799 09            ret
0263+  179A             
0264+  179A             ;-----------------------------------------------------------------------------
0265+  179A             ; PRINT NEW LINE
0266+  179A             ;-----------------------------------------------------------------------------
0267+  179A             printnl:
0268+  179A D7            push a
0269+  179B 10 00 0A      mov a, $0A00
0270+  179E 05 03         syscall sys_io
0271+  17A0 10 00 0D      mov a, $0D00
0272+  17A3 05 03         syscall sys_io
0273+  17A5 E4            pop a
0274+  17A6 09            ret
0275+  17A7             
0276+  17A7             ;-----------------------------------------------------------------------------
0277+  17A7             ; _strtoint
0278+  17A7             ; 4 digit hex string number in d
0279+  17A7             ; integer returned in A
0280+  17A7             ;-----------------------------------------------------------------------------
0281+  17A7             _strtointx:
0282+  17A7 D8            push b
0283+  17A8 32            mov bl, [d]
0284+  17A9 37            mov bh, bl
0285+  17AA 33 01 00      mov bl, [d + 1]
0286+  17AD 07 61 16      call _atoi        ; convert to int in AL
0287+  17B0 23            mov ah, al        ; move to AH
0288+  17B1 33 02 00      mov bl, [d + 2]
0289+  17B4 37            mov bh, bl
0290+  17B5 33 03 00      mov bl, [d + 3]
0291+  17B8 07 61 16      call _atoi        ; convert to int in AL
0292+  17BB E5            pop b
0293+  17BC 09            ret
0294+  17BD             
0295+  17BD             ;-----------------------------------------------------------------------------
0296+  17BD             ; _strtoint
0297+  17BD             ; 5 digit base10 string number in d
0298+  17BD             ; integer returned in A
0299+  17BD             ;-----------------------------------------------------------------------------
0300+  17BD             _strtoint:
0301+  17BD E2            push si
0302+  17BE D8            push b
0303+  17BF D9            push c
0304+  17C0 DA            push d
0305+  17C1 07 03 16      call _strlen      ; get string length in C
0306+  17C4 7E            dec c
0307+  17C5 FD 4E         mov si, d
0308+  17C7 12            mov a, c
0309+  17C8 FD 99         shl a
0310+  17CA 3B 39 19      mov d, table_power
0311+  17CD 59            add d, a
0312+  17CE 38 00 00      mov c, 0
0313+  17D1             _strtoint_L0:
0314+  17D1 F6            lodsb      ; load ASCII to al
0315+  17D2 B9 00         cmp al, 0
0316+  17D4 C6 E7 17      je _strtoint_end
0317+  17D7 6F 30         sub al, $30    ; make into integer
0318+  17D9 22 00         mov ah, 0
0319+  17DB 2A            mov b, [d]
0320+  17DC AC            mul a, b      ; result in B since it fits in 16bits
0321+  17DD 11            mov a, b
0322+  17DE 28            mov b, c
0323+  17DF 54            add a, b
0324+  17E0 39            mov c, a
0325+  17E1 63 02 00      sub d, 2
0326+  17E4 0A D1 17      jmp _strtoint_L0
0327+  17E7             _strtoint_end:
0328+  17E7 12            mov a, c
0329+  17E8 E7            pop d
0330+  17E9 E6            pop c
0331+  17EA E5            pop b
0332+  17EB EF            pop si
0333+  17EC 09            ret
0334+  17ED             
0335+  17ED             ;-----------------------------------------------------------------------------
0336+  17ED             ; PRINT NULL TERMINATED STRING
0337+  17ED             ; pointer in D
0338+  17ED             ;-----------------------------------------------------------------------------
0339+  17ED             _puts:
0340+  17ED D7            push a
0341+  17EE DA            push d
0342+  17EF             _puts_L1:
0343+  17EF 1E            mov al, [d]
0344+  17F0 B9 00         cmp al, 0
0345+  17F2 C6 FE 17      jz _puts_END
0346+  17F5 23            mov ah, al
0347+  17F6 19 00         mov al, 0
0348+  17F8 05 03         syscall sys_io
0349+  17FA 79            inc d
0350+  17FB 0A EF 17      jmp _puts_L1
0351+  17FE             _puts_END:
0352+  17FE E7            pop d
0353+  17FF E4            pop a
0354+  1800 09            ret
0355+  1801             
0356+  1801             ;-----------------------------------------------------------------------------
0357+  1801             ; PRINT N SIZE STRING
0358+  1801             ; pointer in D
0359+  1801             ; size in C
0360+  1801             ;-----------------------------------------------------------------------------
0361+  1801             _putsn:
0362+  1801 DB            push al
0363+  1802 DA            push d
0364+  1803 D9            push c
0365+  1804             _putsn_L0:
0366+  1804 1E            mov al, [d]
0367+  1805 23            mov ah, al
0368+  1806 19 00         mov al, 0
0369+  1808 05 03         syscall sys_io
0370+  180A 79            inc d
0371+  180B 7E            dec c  
0372+  180C C2 00 00      cmp c, 0
0373+  180F C7 04 18      jne _putsn_L0
0374+  1812             _putsn_end:
0375+  1812 E6            pop c
0376+  1813 E7            pop d
0377+  1814 E8            pop al
0378+  1815 09            ret
0379+  1816             
0380+  1816             ;-----------------------------------------------------------------------------
0381+  1816             ; print 16bit decimal number
0382+  1816             ; input number in A
0383+  1816             ;-----------------------------------------------------------------------------
0384+  1816             print_u16d:
0385+  1816 D7            push a
0386+  1817 D8            push b
0387+  1818 26 10 27      mov b, 10000
0388+  181B AE            div a, b      ; get 10000's coeff.
0389+  181C 07 3E 18      call print_number
0390+  181F 11            mov a, b
0391+  1820 26 E8 03      mov b, 1000
0392+  1823 AE            div a, b      ; get 1000's coeff.
0393+  1824 07 3E 18      call print_number
0394+  1827 11            mov a, b
0395+  1828 26 64 00      mov b, 100
0396+  182B AE            div a, b
0397+  182C 07 3E 18      call print_number
0398+  182F 11            mov a, b
0399+  1830 26 0A 00      mov b, 10
0400+  1833 AE            div a, b
0401+  1834 07 3E 18      call print_number
0402+  1837 1B            mov al, bl      ; 1's coeff in bl
0403+  1838 07 3E 18      call print_number
0404+  183B E5            pop b
0405+  183C E4            pop a
0406+  183D 09            ret
0407+  183E             
0408+  183E             ;-----------------------------------------------------------------------------
0409+  183E             ; print AL
0410+  183E             ;-----------------------------------------------------------------------------
0411+  183E             print_number:
0412+  183E 6A 30         add al, $30
0413+  1840 23            mov ah, al
0414+  1841 07 A3 16      call _putchar
0415+  1844 09            ret
0416+  1845             
0417+  1845             ;-----------------------------------------------------------------------------
0418+  1845             ; PRINT 16BIT HEX INTEGER
0419+  1845             ; integer value in reg B
0420+  1845             ;-----------------------------------------------------------------------------
0421+  1845             print_u16x:
0422+  1845 D7            push a
0423+  1846 D8            push b
0424+  1847 DD            push bl
0425+  1848 30            mov bl, bh
0426+  1849 07 71 16      call _itoa        ; convert bh to char in A
0427+  184C 2F            mov bl, al        ; save al
0428+  184D 19 00         mov al, 0
0429+  184F 05 03         syscall sys_io        ; display AH
0430+  1851 24            mov ah, bl        ; retrieve al
0431+  1852 19 00         mov al, 0
0432+  1854 05 03         syscall sys_io        ; display AL
0433+  1856             
0434+  1856 EA            pop bl
0435+  1857 07 71 16      call _itoa        ; convert bh to char in A
0436+  185A 2F            mov bl, al        ; save al
0437+  185B 19 00         mov al, 0
0438+  185D 05 03         syscall sys_io        ; display AH
0439+  185F 24            mov ah, bl        ; retrieve al
0440+  1860 19 00         mov al, 0
0441+  1862 05 03         syscall sys_io        ; display AL
0442+  1864             
0443+  1864 E5            pop b
0444+  1865 E4            pop a
0445+  1866 09            ret
0446+  1867             
0447+  1867             ;-----------------------------------------------------------------------------
0448+  1867             ; INPUT 16BIT HEX INTEGER
0449+  1867             ; read 16bit integer into A
0450+  1867             ;-----------------------------------------------------------------------------
0451+  1867             scan_u16x:
0452+  1867 F8 10 00      enter 16
0453+  186A D8            push b
0454+  186B DA            push d
0455+  186C             
0456+  186C FA F1 FF      lea d, [bp + -15]
0457+  186F 07 AA 16      call _gets        ; get number
0458+  1872             
0459+  1872 32            mov bl, [d]
0460+  1873 37            mov bh, bl
0461+  1874 33 01 00      mov bl, [d + 1]
0462+  1877 07 61 16      call _atoi        ; convert to int in AL
0463+  187A 23            mov ah, al        ; move to AH
0464+  187B             
0465+  187B 33 02 00      mov bl, [d + 2]
0466+  187E 37            mov bh, bl
0467+  187F 33 03 00      mov bl, [d + 3]
0468+  1882 07 61 16      call _atoi        ; convert to int in AL
0469+  1885             
0470+  1885 E7            pop d
0471+  1886 E5            pop b
0472+  1887 F9            leave
0473+  1888 09            ret
0474+  1889             
0475+  1889             ;-----------------------------------------------------------------------------
0476+  1889             ; PRINT 8bit HEX INTEGER
0477+  1889             ; integer value in reg bl
0478+  1889             ;-----------------------------------------------------------------------------
0479+  1889             print_u8x:
0480+  1889 D7            push a
0481+  188A DD            push bl
0482+  188B             
0483+  188B 07 71 16      call _itoa        ; convert bl to char in A
0484+  188E 2F            mov bl, al        ; save al
0485+  188F 19 00         mov al, 0
0486+  1891 05 03         syscall sys_io        ; display AH
0487+  1893 24            mov ah, bl        ; retrieve al
0488+  1894 19 00         mov al, 0
0489+  1896 05 03         syscall sys_io        ; display AL
0490+  1898             
0491+  1898 EA            pop bl
0492+  1899 E4            pop a
0493+  189A 09            ret
0494+  189B             
0495+  189B             ;-----------------------------------------------------------------------------
0496+  189B             ; print 8bit decimal unsigned number
0497+  189B             ; input number in AL
0498+  189B             ;-----------------------------------------------------------------------------
0499+  189B             print_u8d:
0500+  189B D7            push a
0501+  189C D8            push b
0502+  189D             
0503+  189D 22 00         mov ah, 0
0504+  189F 26 64 00      mov b, 100
0505+  18A2 AE            div a, b
0506+  18A3 D8            push b      ; save remainder
0507+  18A4 B9 00         cmp al, 0
0508+  18A6 C6 B0 18      je skip100
0509+  18A9 6A 30         add al, $30
0510+  18AB 23            mov ah, al
0511+  18AC 19 00         mov al, 0
0512+  18AE 05 03         syscall sys_io  ; print coeff
0513+  18B0             skip100:
0514+  18B0 E4            pop a
0515+  18B1 22 00         mov ah, 0
0516+  18B3 26 0A 00      mov b, 10
0517+  18B6 AE            div a, b
0518+  18B7 D8            push b      ; save remainder
0519+  18B8 B9 00         cmp al, 0
0520+  18BA C6 C4 18      je skip10
0521+  18BD 6A 30         add al, $30
0522+  18BF 23            mov ah, al
0523+  18C0 19 00         mov al, 0
0524+  18C2 05 03         syscall sys_io  ; print coeff
0525+  18C4             skip10:
0526+  18C4 E4            pop a
0527+  18C5 1B            mov al, bl
0528+  18C6 6A 30         add al, $30
0529+  18C8 23            mov ah, al
0530+  18C9 19 00         mov al, 0
0531+  18CB 05 03         syscall sys_io  ; print coeff
0532+  18CD E5            pop b
0533+  18CE E4            pop a
0534+  18CF 09            ret
0535+  18D0             
0536+  18D0             ;-----------------------------------------------------------------------------
0537+  18D0             ; INPUT 8BIT HEX INTEGER
0538+  18D0             ; read 8bit integer into AL
0539+  18D0             ;-----------------------------------------------------------------------------
0540+  18D0             scan_u8x:
0541+  18D0 F8 04 00      enter 4
0542+  18D3 D8            push b
0543+  18D4 DA            push d
0544+  18D5             
0545+  18D5 FA FD FF      lea d, [bp + -3]
0546+  18D8 07 AA 16      call _gets        ; get number
0547+  18DB             
0548+  18DB 32            mov bl, [d]
0549+  18DC 37            mov bh, bl
0550+  18DD 33 01 00      mov bl, [d + 1]
0551+  18E0 07 61 16      call _atoi        ; convert to int in AL
0552+  18E3             
0553+  18E3 E7            pop d
0554+  18E4 E5            pop b
0555+  18E5 F9            leave
0556+  18E6 09            ret
0557+  18E7             
0558+  18E7             ;-----------------------------------------------------------------------------
0559+  18E7             ; input decimal number
0560+  18E7             ; result in A
0561+  18E7             ; 655'\0'
0562+  18E7             ; low--------high
0563+  18E7             ;-----------------------------------------------------------------------------
0564+  18E7             scan_u16d:
0565+  18E7 F8 08 00      enter 8
0566+  18EA E2            push si
0567+  18EB D8            push b
0568+  18EC D9            push c
0569+  18ED DA            push d
0570+  18EE FA F9 FF      lea d, [bp +- 7]
0571+  18F1 07 AA 16      call _gets
0572+  18F4 07 03 16      call _strlen      ; get string length in C
0573+  18F7 7E            dec c
0574+  18F8 FD 4E         mov si, d
0575+  18FA 12            mov a, c
0576+  18FB FD 99         shl a
0577+  18FD 3B 39 19      mov d, table_power
0578+  1900 59            add d, a
0579+  1901 38 00 00      mov c, 0
0580+  1904             mul_loop:
0581+  1904 F6            lodsb      ; load ASCII to al
0582+  1905 B9 00         cmp al, 0
0583+  1907 C6 1A 19      je mul_exit
0584+  190A 6F 30         sub al, $30    ; make into integer
0585+  190C 22 00         mov ah, 0
0586+  190E 2A            mov b, [d]
0587+  190F AC            mul a, b      ; result in B since it fits in 16bits
0588+  1910 11            mov a, b
0589+  1911 28            mov b, c
0590+  1912 54            add a, b
0591+  1913 39            mov c, a
0592+  1914 63 02 00      sub d, 2
0593+  1917 0A 04 19      jmp mul_loop
0594+  191A             mul_exit:
0595+  191A 12            mov a, c
0596+  191B E7            pop d
0597+  191C E6            pop c
0598+  191D E5            pop b
0599+  191E EF            pop si
0600+  191F F9            leave
0601+  1920 09            ret
0602+  1921             
0603+  1921 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  1925 34 35 36 37 
0603+  1929 38 39 41 42 
0603+  192D 43 44 45 46 
0604+  1931 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  1935 1B 5B 48 00 
0605+  1939             
0606+  1939             table_power:
0607+  1939 01 00         .dw 1
0608+  193B 0A 00         .dw 10
0609+  193D 64 00         .dw 100
0610+  193F E8 03         .dw 1000
0611+  1941 10 27         .dw 100002750   1943             ; --- END INLINE ASM BLOCK
2751   1943             
2752   1943 F9            leave
2753   1944 09            ret
2754   1945             
2755   1945             include_ctype_lib:
2756   1945 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2757   1948             
2758   1948             ; --- BEGIN INLINE ASM BLOCK
2759   1948             .include "lib/asm/ctype.asm"
0001+  1948             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  1948             ; ctype.s
0003+  1948             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  1948             
0005+  1948             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  1948             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  1948             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  1948             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  1948             ;; characters are supported.
0010+  1948             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  1948             ;; _isalnum 
0012+  1948             ;; _isalpha 
0013+  1948             ;; islower 
0014+  1948             ;; isupper 
0015+  1948             ;; _isdigit 
0016+  1948             ;; isxdigit
0017+  1948             ;; iscntrl 
0018+  1948             ;; isgraph 
0019+  1948             ;; _isspace 
0020+  1948             ;; isblank 
0021+  1948             ;; isprint 
0022+  1948             ;; ispunct 
0023+  1948             ;; tolower 
0024+  1948             ;; toupper
0025+  1948             
0026+  1948             
0027+  1948             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  1948             ;; IS ALPHANUMERIC
0029+  1948             ;; sets ZF according with result
0030+  1948             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  1948             _isalnum:
0032+  1948 07 65 19    	call _isalpha
0033+  194B C6 51 19    	je _isalnum_exit
0034+  194E 07 52 19    	call _isdigit
0035+  1951             _isalnum_exit:
0036+  1951 09          	ret	
0037+  1952             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  1952             ;; IS DIGIT
0039+  1952             ;; sets ZF according with result
0040+  1952             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  1952             _isdigit:
0042+  1952 DB          	push al
0043+  1953 B9 30       	cmp al, '0'
0044+  1955 C8 61 19    	jlu _isdigit_false
0045+  1958 B9 39       	cmp al, '9'
0046+  195A D1 61 19    	jgu _isdigit_false
0047+  195D 87 00       	and al, 0	; set ZF
0048+  195F E8          	pop al
0049+  1960 09          	ret
0050+  1961             _isdigit_false:
0051+  1961 8B 01       	or al, 1	; clear ZF
0052+  1963 E8          	pop al
0053+  1964 09          	ret	
0054+  1965             	
0055+  1965             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  1965             ;; IS ALPHA
0057+  1965             ;; sets ZF according with result
0058+  1965             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  1965             _isalpha:
0060+  1965 DB          	push al
0061+  1966 B9 5F       	cmp al, '_'
0062+  1968 C6 88 19    	je _isalpha_true
0063+  196B B9 2E       	cmp al, '.'
0064+  196D C6 88 19    	je _isalpha_true
0065+  1970 B9 41       	cmp al, 'A'
0066+  1972 C8 84 19    	jlu _isalpha_false
0067+  1975 B9 7A       	cmp al, 'z'
0068+  1977 D1 84 19    	jgu _isalpha_false
0069+  197A B9 5A       	cmp al, 'Z'
0070+  197C D0 88 19    	jleu _isalpha_true
0071+  197F B9 61       	cmp al, 'a'
0072+  1981 C9 88 19    	jgeu _isalpha_true
0073+  1984             _isalpha_false:
0074+  1984 8B 01       	or al, 1	; clear ZF
0075+  1986 E8          	pop al
0076+  1987 09          	ret
0077+  1988             _isalpha_true:
0078+  1988 87 00       	and al, 0	; set ZF
0079+  198A E8          	pop al
0080+  198B 09          	ret
0081+  198C             
0082+  198C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  198C             ;; IS PATH-ALPHA
0084+  198C             ;; sets ZF according with result
0085+  198C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  198C             ispath:
0087+  198C DB          	push al
0088+  198D 07 52 19    	call _isdigit
0089+  1990 C6 BA 19    	je ispath_true
0090+  1993 B9 5F       	cmp al, '_'
0091+  1995 C6 BA 19    	je ispath_true
0092+  1998 B9 2F       	cmp al, '/'
0093+  199A C6 BA 19    	je ispath_true
0094+  199D B9 2E       	cmp al, '.'
0095+  199F C6 BA 19    	je ispath_true
0096+  19A2 B9 41       	cmp al, 'A'
0097+  19A4 C8 B6 19    	jlu ispath_false
0098+  19A7 B9 7A       	cmp al, 'z'
0099+  19A9 D1 B6 19    	jgu ispath_false
0100+  19AC B9 5A       	cmp al, 'Z'
0101+  19AE D0 BA 19    	jleu ispath_true
0102+  19B1 B9 61       	cmp al, 'a'
0103+  19B3 C9 BA 19    	jgeu ispath_true
0104+  19B6             ispath_false:
0105+  19B6 8B 01       	or al, 1	; clear ZF
0106+  19B8 E8          	pop al
0107+  19B9 09          	ret
0108+  19BA             ispath_true:
0109+  19BA 87 00       	and al, 0	; set ZF
0110+  19BC E8          	pop al
0111+  19BD 09          	ret
0112+  19BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  19BE             ;; IS SPACE
0114+  19BE             ;; sets ZF according with result
0115+  19BE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  19BE             _isspace:
0117+  19BE B9 20       	cmp al, $20		; ' '
0118+  19C0 C6 D4 19    	je _isspace_exit
0119+  19C3 B9 09       	cmp al, $09		; '\t'
0120+  19C5 C6 D4 19    	je _isspace_exit
0121+  19C8 B9 0A       	cmp al, $0A		; '\n'
0122+  19CA C6 D4 19    	je _isspace_exit
0123+  19CD B9 0D       	cmp al, $0D		; '\r'
0124+  19CF C6 D4 19    	je _isspace_exit
0125+  19D2 B9 0B       	cmp al, $0B		; '\v'
0126+  19D4             _isspace_exit:
0127+  19D4 09          	ret	
0128+  19D5             
0129+  19D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  19D5             ; TO LOWER
0131+  19D5             ; input in AL
0132+  19D5             ; output in AL
0133+  19D5             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  19D5             _to_lower:
0135+  19D5 B9 5A       	cmp al, 'Z'
0136+  19D7 D1 DC 19    	jgu _to_lower_ret
0137+  19DA 6A 20       	add al, $20				; convert to lower case
0138+  19DC             _to_lower_ret:
0139+  19DC 09          	ret
0140+  19DD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  19DD             ; TO UPPER
0142+  19DD             ; input in AL
0143+  19DD             ; output in AL
0144+  19DD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  19DD             _to_upper:
0146+  19DD B9 61       	cmp al, 'a'
0147+  19DF C8 E4 19    	jlu _to_upper_ret
0148+  19E2 6F 20       	sub al, $20			; convert to upper case
0149+  19E4             _to_upper_ret:
0150+  19E4 09          	ret
0151+  19E5             
2760   19E5             ; --- END INLINE ASM BLOCK
2761   19E5             
2762   19E5 F9            leave
2763   19E6 09            ret
2764   19E7             
2765   19E7             is_space:
2766   19E7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2767   19EA             ;; return c == ' ' || c == '\t' || c == '\n' || c == '\r'; 
2768   19EA FA 05 00      lea d, [bp + 5] ; $c
2769   19ED 32            mov bl, [d]
2770   19EE A7 00         mov bh, 0
2771   19F0             ; START RELATIONAL
2772   19F0 D7            push a
2773   19F1 11            mov a, b
2774   19F2 26 20 00      mov b, $20
2775   19F5 B0            cmp a, b
2776   19F6 FD 71         seq ; ==
2777   19F8 E4            pop a
2778   19F9             ; END RELATIONAL
2779   19F9 D7            push a
2780   19FA 11            mov a, b
2781   19FB FA 05 00      lea d, [bp + 5] ; $c
2782   19FE 32            mov bl, [d]
2783   19FF A7 00         mov bh, 0
2784   1A01             ; START RELATIONAL
2785   1A01 D7            push a
2786   1A02 11            mov a, b
2787   1A03 26 09 00      mov b, $9
2788   1A06 B0            cmp a, b
2789   1A07 FD 71         seq ; ==
2790   1A09 E4            pop a
2791   1A0A             ; END RELATIONAL
2792   1A0A FD A8         sor a, b ; ||
2793   1A0C 11            mov a, b
2794   1A0D FA 05 00      lea d, [bp + 5] ; $c
2795   1A10 32            mov bl, [d]
2796   1A11 A7 00         mov bh, 0
2797   1A13             ; START RELATIONAL
2798   1A13 D7            push a
2799   1A14 11            mov a, b
2800   1A15 26 0A 00      mov b, $a
2801   1A18 B0            cmp a, b
2802   1A19 FD 71         seq ; ==
2803   1A1B E4            pop a
2804   1A1C             ; END RELATIONAL
2805   1A1C FD A8         sor a, b ; ||
2806   1A1E 11            mov a, b
2807   1A1F FA 05 00      lea d, [bp + 5] ; $c
2808   1A22 32            mov bl, [d]
2809   1A23 A7 00         mov bh, 0
2810   1A25             ; START RELATIONAL
2811   1A25 D7            push a
2812   1A26 11            mov a, b
2813   1A27 26 0D 00      mov b, $d
2814   1A2A B0            cmp a, b
2815   1A2B FD 71         seq ; ==
2816   1A2D E4            pop a
2817   1A2E             ; END RELATIONAL
2818   1A2E FD A8         sor a, b ; ||
2819   1A30 E4            pop a
2820   1A31 F9            leave
2821   1A32 09            ret
2822   1A33             
2823   1A33             is_digit:
2824   1A33 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2825   1A36             ;; return c >= '0' && c <= '9'; 
2826   1A36 FA 05 00      lea d, [bp + 5] ; $c
2827   1A39 32            mov bl, [d]
2828   1A3A A7 00         mov bh, 0
2829   1A3C             ; START RELATIONAL
2830   1A3C D7            push a
2831   1A3D 11            mov a, b
2832   1A3E 26 30 00      mov b, $30
2833   1A41 B0            cmp a, b
2834   1A42 FD 80         sge ; >=
2835   1A44 E4            pop a
2836   1A45             ; END RELATIONAL
2837   1A45 D7            push a
2838   1A46 11            mov a, b
2839   1A47 FA 05 00      lea d, [bp + 5] ; $c
2840   1A4A 32            mov bl, [d]
2841   1A4B A7 00         mov bh, 0
2842   1A4D             ; START RELATIONAL
2843   1A4D D7            push a
2844   1A4E 11            mov a, b
2845   1A4F 26 39 00      mov b, $39
2846   1A52 B0            cmp a, b
2847   1A53 FD 73         slt ; <= (signed)
2848   1A55 E4            pop a
2849   1A56             ; END RELATIONAL
2850   1A56 FD A7         sand a, b
2851   1A58 E4            pop a
2852   1A59 F9            leave
2853   1A5A 09            ret
2854   1A5B             
2855   1A5B             is_alpha:
2856   1A5B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2857   1A5E             ;; return(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '_'); 
2858   1A5E FA 05 00      lea d, [bp + 5] ; $c
2859   1A61 32            mov bl, [d]
2860   1A62 A7 00         mov bh, 0
2861   1A64             ; START RELATIONAL
2862   1A64 D7            push a
2863   1A65 11            mov a, b
2864   1A66 26 61 00      mov b, $61
2865   1A69 B0            cmp a, b
2866   1A6A FD 80         sge ; >=
2867   1A6C E4            pop a
2868   1A6D             ; END RELATIONAL
2869   1A6D D7            push a
2870   1A6E 11            mov a, b
2871   1A6F FA 05 00      lea d, [bp + 5] ; $c
2872   1A72 32            mov bl, [d]
2873   1A73 A7 00         mov bh, 0
2874   1A75             ; START RELATIONAL
2875   1A75 D7            push a
2876   1A76 11            mov a, b
2877   1A77 26 7A 00      mov b, $7a
2878   1A7A B0            cmp a, b
2879   1A7B FD 73         slt ; <= (signed)
2880   1A7D E4            pop a
2881   1A7E             ; END RELATIONAL
2882   1A7E FD A7         sand a, b
2883   1A80 E4            pop a
2884   1A81 D7            push a
2885   1A82 11            mov a, b
2886   1A83 FA 05 00      lea d, [bp + 5] ; $c
2887   1A86 32            mov bl, [d]
2888   1A87 A7 00         mov bh, 0
2889   1A89             ; START RELATIONAL
2890   1A89 D7            push a
2891   1A8A 11            mov a, b
2892   1A8B 26 41 00      mov b, $41
2893   1A8E B0            cmp a, b
2894   1A8F FD 80         sge ; >=
2895   1A91 E4            pop a
2896   1A92             ; END RELATIONAL
2897   1A92 D7            push a
2898   1A93 11            mov a, b
2899   1A94 FA 05 00      lea d, [bp + 5] ; $c
2900   1A97 32            mov bl, [d]
2901   1A98 A7 00         mov bh, 0
2902   1A9A             ; START RELATIONAL
2903   1A9A D7            push a
2904   1A9B 11            mov a, b
2905   1A9C 26 5A 00      mov b, $5a
2906   1A9F B0            cmp a, b
2907   1AA0 FD 73         slt ; <= (signed)
2908   1AA2 E4            pop a
2909   1AA3             ; END RELATIONAL
2910   1AA3 FD A7         sand a, b
2911   1AA5 E4            pop a
2912   1AA6 FD A8         sor a, b ; ||
2913   1AA8 11            mov a, b
2914   1AA9 FA 05 00      lea d, [bp + 5] ; $c
2915   1AAC 32            mov bl, [d]
2916   1AAD A7 00         mov bh, 0
2917   1AAF             ; START RELATIONAL
2918   1AAF D7            push a
2919   1AB0 11            mov a, b
2920   1AB1 26 5F 00      mov b, $5f
2921   1AB4 B0            cmp a, b
2922   1AB5 FD 71         seq ; ==
2923   1AB7 E4            pop a
2924   1AB8             ; END RELATIONAL
2925   1AB8 FD A8         sor a, b ; ||
2926   1ABA E4            pop a
2927   1ABB F9            leave
2928   1ABC 09            ret
2929   1ABD             
2930   1ABD             tolower:
2931   1ABD F8 00 00      enter 0 ; (push bp; mov bp, sp)
2932   1AC0             ;; if (ch >= 'A' && ch <= 'Z')  
2933   1AC0             _if42_cond:
2934   1AC0 FA 05 00      lea d, [bp + 5] ; $ch
2935   1AC3 32            mov bl, [d]
2936   1AC4 A7 00         mov bh, 0
2937   1AC6             ; START RELATIONAL
2938   1AC6 D7            push a
2939   1AC7 11            mov a, b
2940   1AC8 26 41 00      mov b, $41
2941   1ACB B0            cmp a, b
2942   1ACC FD 80         sge ; >=
2943   1ACE E4            pop a
2944   1ACF             ; END RELATIONAL
2945   1ACF D7            push a
2946   1AD0 11            mov a, b
2947   1AD1 FA 05 00      lea d, [bp + 5] ; $ch
2948   1AD4 32            mov bl, [d]
2949   1AD5 A7 00         mov bh, 0
2950   1AD7             ; START RELATIONAL
2951   1AD7 D7            push a
2952   1AD8 11            mov a, b
2953   1AD9 26 5A 00      mov b, $5a
2954   1ADC B0            cmp a, b
2955   1ADD FD 73         slt ; <= (signed)
2956   1ADF E4            pop a
2957   1AE0             ; END RELATIONAL
2958   1AE0 FD A7         sand a, b
2959   1AE2 E4            pop a
2960   1AE3 C0 00 00      cmp b, 0
2961   1AE6 C6 01 1B      je _if42_else
2962   1AE9             _if42_true:
2963   1AE9             ;; return ch - 'A' + 'a'; 
2964   1AE9 FA 05 00      lea d, [bp + 5] ; $ch
2965   1AEC 32            mov bl, [d]
2966   1AED A7 00         mov bh, 0
2967   1AEF             ; START TERMS
2968   1AEF D7            push a
2969   1AF0 11            mov a, b
2970   1AF1 26 41 00      mov b, $41
2971   1AF4 60            sub a, b
2972   1AF5 27            mov b, a
2973   1AF6 11            mov a, b
2974   1AF7 26 61 00      mov b, $61
2975   1AFA 56            add b, a
2976   1AFB E4            pop a
2977   1AFC             ; END TERMS
2978   1AFC F9            leave
2979   1AFD 09            ret
2980   1AFE 0A 09 1B      jmp _if42_exit
2981   1B01             _if42_else:
2982   1B01             ;; return ch; 
2983   1B01 FA 05 00      lea d, [bp + 5] ; $ch
2984   1B04 32            mov bl, [d]
2985   1B05 A7 00         mov bh, 0
2986   1B07 F9            leave
2987   1B08 09            ret
2988   1B09             _if42_exit:
2989   1B09 F9            leave
2990   1B0A 09            ret
2991   1B0B             
2992   1B0B             toupper:
2993   1B0B F8 00 00      enter 0 ; (push bp; mov bp, sp)
2994   1B0E             ;; if (ch >= 'a' && ch <= 'z')  
2995   1B0E             _if43_cond:
2996   1B0E FA 05 00      lea d, [bp + 5] ; $ch
2997   1B11 32            mov bl, [d]
2998   1B12 A7 00         mov bh, 0
2999   1B14             ; START RELATIONAL
3000   1B14 D7            push a
3001   1B15 11            mov a, b
3002   1B16 26 61 00      mov b, $61
3003   1B19 B0            cmp a, b
3004   1B1A FD 80         sge ; >=
3005   1B1C E4            pop a
3006   1B1D             ; END RELATIONAL
3007   1B1D D7            push a
3008   1B1E 11            mov a, b
3009   1B1F FA 05 00      lea d, [bp + 5] ; $ch
3010   1B22 32            mov bl, [d]
3011   1B23 A7 00         mov bh, 0
3012   1B25             ; START RELATIONAL
3013   1B25 D7            push a
3014   1B26 11            mov a, b
3015   1B27 26 7A 00      mov b, $7a
3016   1B2A B0            cmp a, b
3017   1B2B FD 73         slt ; <= (signed)
3018   1B2D E4            pop a
3019   1B2E             ; END RELATIONAL
3020   1B2E FD A7         sand a, b
3021   1B30 E4            pop a
3022   1B31 C0 00 00      cmp b, 0
3023   1B34 C6 4F 1B      je _if43_else
3024   1B37             _if43_true:
3025   1B37             ;; return ch - 'a' + 'A'; 
3026   1B37 FA 05 00      lea d, [bp + 5] ; $ch
3027   1B3A 32            mov bl, [d]
3028   1B3B A7 00         mov bh, 0
3029   1B3D             ; START TERMS
3030   1B3D D7            push a
3031   1B3E 11            mov a, b
3032   1B3F 26 61 00      mov b, $61
3033   1B42 60            sub a, b
3034   1B43 27            mov b, a
3035   1B44 11            mov a, b
3036   1B45 26 41 00      mov b, $41
3037   1B48 56            add b, a
3038   1B49 E4            pop a
3039   1B4A             ; END TERMS
3040   1B4A F9            leave
3041   1B4B 09            ret
3042   1B4C 0A 57 1B      jmp _if43_exit
3043   1B4F             _if43_else:
3044   1B4F             ;; return ch; 
3045   1B4F FA 05 00      lea d, [bp + 5] ; $ch
3046   1B52 32            mov bl, [d]
3047   1B53 A7 00         mov bh, 0
3048   1B55 F9            leave
3049   1B56 09            ret
3050   1B57             _if43_exit:
3051   1B57 F9            leave
3052   1B58 09            ret
3053   1B59             
3054   1B59             is_delimiter:
3055   1B59 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3056   1B5C             ;; if( 
3057   1B5C             _if44_cond:
3058   1B5C FA 05 00      lea d, [bp + 5] ; $c
3059   1B5F 32            mov bl, [d]
3060   1B60 A7 00         mov bh, 0
3061   1B62             ; START RELATIONAL
3062   1B62 D7            push a
3063   1B63 11            mov a, b
3064   1B64 26 40 00      mov b, $40
3065   1B67 B0            cmp a, b
3066   1B68 FD 71         seq ; ==
3067   1B6A E4            pop a
3068   1B6B             ; END RELATIONAL
3069   1B6B D7            push a
3070   1B6C 11            mov a, b
3071   1B6D FA 05 00      lea d, [bp + 5] ; $c
3072   1B70 32            mov bl, [d]
3073   1B71 A7 00         mov bh, 0
3074   1B73             ; START RELATIONAL
3075   1B73 D7            push a
3076   1B74 11            mov a, b
3077   1B75 26 23 00      mov b, $23
3078   1B78 B0            cmp a, b
3079   1B79 FD 71         seq ; ==
3080   1B7B E4            pop a
3081   1B7C             ; END RELATIONAL
3082   1B7C FD A8         sor a, b ; ||
3083   1B7E 11            mov a, b
3084   1B7F FA 05 00      lea d, [bp + 5] ; $c
3085   1B82 32            mov bl, [d]
3086   1B83 A7 00         mov bh, 0
3087   1B85             ; START RELATIONAL
3088   1B85 D7            push a
3089   1B86 11            mov a, b
3090   1B87 26 24 00      mov b, $24
3091   1B8A B0            cmp a, b
3092   1B8B FD 71         seq ; ==
3093   1B8D E4            pop a
3094   1B8E             ; END RELATIONAL
3095   1B8E FD A8         sor a, b ; ||
3096   1B90 11            mov a, b
3097   1B91 FA 05 00      lea d, [bp + 5] ; $c
3098   1B94 32            mov bl, [d]
3099   1B95 A7 00         mov bh, 0
3100   1B97             ; START RELATIONAL
3101   1B97 D7            push a
3102   1B98 11            mov a, b
3103   1B99 26 2B 00      mov b, $2b
3104   1B9C B0            cmp a, b
3105   1B9D FD 71         seq ; ==
3106   1B9F E4            pop a
3107   1BA0             ; END RELATIONAL
3108   1BA0 FD A8         sor a, b ; ||
3109   1BA2 11            mov a, b
3110   1BA3 FA 05 00      lea d, [bp + 5] ; $c
3111   1BA6 32            mov bl, [d]
3112   1BA7 A7 00         mov bh, 0
3113   1BA9             ; START RELATIONAL
3114   1BA9 D7            push a
3115   1BAA 11            mov a, b
3116   1BAB 26 2D 00      mov b, $2d
3117   1BAE B0            cmp a, b
3118   1BAF FD 71         seq ; ==
3119   1BB1 E4            pop a
3120   1BB2             ; END RELATIONAL
3121   1BB2 FD A8         sor a, b ; ||
3122   1BB4 11            mov a, b
3123   1BB5 FA 05 00      lea d, [bp + 5] ; $c
3124   1BB8 32            mov bl, [d]
3125   1BB9 A7 00         mov bh, 0
3126   1BBB             ; START RELATIONAL
3127   1BBB D7            push a
3128   1BBC 11            mov a, b
3129   1BBD 26 2A 00      mov b, $2a
3130   1BC0 B0            cmp a, b
3131   1BC1 FD 71         seq ; ==
3132   1BC3 E4            pop a
3133   1BC4             ; END RELATIONAL
3134   1BC4 FD A8         sor a, b ; ||
3135   1BC6 11            mov a, b
3136   1BC7 FA 05 00      lea d, [bp + 5] ; $c
3137   1BCA 32            mov bl, [d]
3138   1BCB A7 00         mov bh, 0
3139   1BCD             ; START RELATIONAL
3140   1BCD D7            push a
3141   1BCE 11            mov a, b
3142   1BCF 26 2F 00      mov b, $2f
3143   1BD2 B0            cmp a, b
3144   1BD3 FD 71         seq ; ==
3145   1BD5 E4            pop a
3146   1BD6             ; END RELATIONAL
3147   1BD6 FD A8         sor a, b ; ||
3148   1BD8 11            mov a, b
3149   1BD9 FA 05 00      lea d, [bp + 5] ; $c
3150   1BDC 32            mov bl, [d]
3151   1BDD A7 00         mov bh, 0
3152   1BDF             ; START RELATIONAL
3153   1BDF D7            push a
3154   1BE0 11            mov a, b
3155   1BE1 26 25 00      mov b, $25
3156   1BE4 B0            cmp a, b
3157   1BE5 FD 71         seq ; ==
3158   1BE7 E4            pop a
3159   1BE8             ; END RELATIONAL
3160   1BE8 FD A8         sor a, b ; ||
3161   1BEA 11            mov a, b
3162   1BEB FA 05 00      lea d, [bp + 5] ; $c
3163   1BEE 32            mov bl, [d]
3164   1BEF A7 00         mov bh, 0
3165   1BF1             ; START RELATIONAL
3166   1BF1 D7            push a
3167   1BF2 11            mov a, b
3168   1BF3 26 5B 00      mov b, $5b
3169   1BF6 B0            cmp a, b
3170   1BF7 FD 71         seq ; ==
3171   1BF9 E4            pop a
3172   1BFA             ; END RELATIONAL
3173   1BFA FD A8         sor a, b ; ||
3174   1BFC 11            mov a, b
3175   1BFD FA 05 00      lea d, [bp + 5] ; $c
3176   1C00 32            mov bl, [d]
3177   1C01 A7 00         mov bh, 0
3178   1C03             ; START RELATIONAL
3179   1C03 D7            push a
3180   1C04 11            mov a, b
3181   1C05 26 5D 00      mov b, $5d
3182   1C08 B0            cmp a, b
3183   1C09 FD 71         seq ; ==
3184   1C0B E4            pop a
3185   1C0C             ; END RELATIONAL
3186   1C0C FD A8         sor a, b ; ||
3187   1C0E 11            mov a, b
3188   1C0F FA 05 00      lea d, [bp + 5] ; $c
3189   1C12 32            mov bl, [d]
3190   1C13 A7 00         mov bh, 0
3191   1C15             ; START RELATIONAL
3192   1C15 D7            push a
3193   1C16 11            mov a, b
3194   1C17 26 28 00      mov b, $28
3195   1C1A B0            cmp a, b
3196   1C1B FD 71         seq ; ==
3197   1C1D E4            pop a
3198   1C1E             ; END RELATIONAL
3199   1C1E FD A8         sor a, b ; ||
3200   1C20 11            mov a, b
3201   1C21 FA 05 00      lea d, [bp + 5] ; $c
3202   1C24 32            mov bl, [d]
3203   1C25 A7 00         mov bh, 0
3204   1C27             ; START RELATIONAL
3205   1C27 D7            push a
3206   1C28 11            mov a, b
3207   1C29 26 29 00      mov b, $29
3208   1C2C B0            cmp a, b
3209   1C2D FD 71         seq ; ==
3210   1C2F E4            pop a
3211   1C30             ; END RELATIONAL
3212   1C30 FD A8         sor a, b ; ||
3213   1C32 11            mov a, b
3214   1C33 FA 05 00      lea d, [bp + 5] ; $c
3215   1C36 32            mov bl, [d]
3216   1C37 A7 00         mov bh, 0
3217   1C39             ; START RELATIONAL
3218   1C39 D7            push a
3219   1C3A 11            mov a, b
3220   1C3B 26 7B 00      mov b, $7b
3221   1C3E B0            cmp a, b
3222   1C3F FD 71         seq ; ==
3223   1C41 E4            pop a
3224   1C42             ; END RELATIONAL
3225   1C42 FD A8         sor a, b ; ||
3226   1C44 11            mov a, b
3227   1C45 FA 05 00      lea d, [bp + 5] ; $c
3228   1C48 32            mov bl, [d]
3229   1C49 A7 00         mov bh, 0
3230   1C4B             ; START RELATIONAL
3231   1C4B D7            push a
3232   1C4C 11            mov a, b
3233   1C4D 26 7D 00      mov b, $7d
3234   1C50 B0            cmp a, b
3235   1C51 FD 71         seq ; ==
3236   1C53 E4            pop a
3237   1C54             ; END RELATIONAL
3238   1C54 FD A8         sor a, b ; ||
3239   1C56 11            mov a, b
3240   1C57 FA 05 00      lea d, [bp + 5] ; $c
3241   1C5A 32            mov bl, [d]
3242   1C5B A7 00         mov bh, 0
3243   1C5D             ; START RELATIONAL
3244   1C5D D7            push a
3245   1C5E 11            mov a, b
3246   1C5F 26 3A 00      mov b, $3a
3247   1C62 B0            cmp a, b
3248   1C63 FD 71         seq ; ==
3249   1C65 E4            pop a
3250   1C66             ; END RELATIONAL
3251   1C66 FD A8         sor a, b ; ||
3252   1C68 11            mov a, b
3253   1C69 FA 05 00      lea d, [bp + 5] ; $c
3254   1C6C 32            mov bl, [d]
3255   1C6D A7 00         mov bh, 0
3256   1C6F             ; START RELATIONAL
3257   1C6F D7            push a
3258   1C70 11            mov a, b
3259   1C71 26 3B 00      mov b, $3b
3260   1C74 B0            cmp a, b
3261   1C75 FD 71         seq ; ==
3262   1C77 E4            pop a
3263   1C78             ; END RELATIONAL
3264   1C78 FD A8         sor a, b ; ||
3265   1C7A 11            mov a, b
3266   1C7B FA 05 00      lea d, [bp + 5] ; $c
3267   1C7E 32            mov bl, [d]
3268   1C7F A7 00         mov bh, 0
3269   1C81             ; START RELATIONAL
3270   1C81 D7            push a
3271   1C82 11            mov a, b
3272   1C83 26 3C 00      mov b, $3c
3273   1C86 B0            cmp a, b
3274   1C87 FD 71         seq ; ==
3275   1C89 E4            pop a
3276   1C8A             ; END RELATIONAL
3277   1C8A FD A8         sor a, b ; ||
3278   1C8C 11            mov a, b
3279   1C8D FA 05 00      lea d, [bp + 5] ; $c
3280   1C90 32            mov bl, [d]
3281   1C91 A7 00         mov bh, 0
3282   1C93             ; START RELATIONAL
3283   1C93 D7            push a
3284   1C94 11            mov a, b
3285   1C95 26 3E 00      mov b, $3e
3286   1C98 B0            cmp a, b
3287   1C99 FD 71         seq ; ==
3288   1C9B E4            pop a
3289   1C9C             ; END RELATIONAL
3290   1C9C FD A8         sor a, b ; ||
3291   1C9E 11            mov a, b
3292   1C9F FA 05 00      lea d, [bp + 5] ; $c
3293   1CA2 32            mov bl, [d]
3294   1CA3 A7 00         mov bh, 0
3295   1CA5             ; START RELATIONAL
3296   1CA5 D7            push a
3297   1CA6 11            mov a, b
3298   1CA7 26 3D 00      mov b, $3d
3299   1CAA B0            cmp a, b
3300   1CAB FD 71         seq ; ==
3301   1CAD E4            pop a
3302   1CAE             ; END RELATIONAL
3303   1CAE FD A8         sor a, b ; ||
3304   1CB0 11            mov a, b
3305   1CB1 FA 05 00      lea d, [bp + 5] ; $c
3306   1CB4 32            mov bl, [d]
3307   1CB5 A7 00         mov bh, 0
3308   1CB7             ; START RELATIONAL
3309   1CB7 D7            push a
3310   1CB8 11            mov a, b
3311   1CB9 26 21 00      mov b, $21
3312   1CBC B0            cmp a, b
3313   1CBD FD 71         seq ; ==
3314   1CBF E4            pop a
3315   1CC0             ; END RELATIONAL
3316   1CC0 FD A8         sor a, b ; ||
3317   1CC2 11            mov a, b
3318   1CC3 FA 05 00      lea d, [bp + 5] ; $c
3319   1CC6 32            mov bl, [d]
3320   1CC7 A7 00         mov bh, 0
3321   1CC9             ; START RELATIONAL
3322   1CC9 D7            push a
3323   1CCA 11            mov a, b
3324   1CCB 26 5E 00      mov b, $5e
3325   1CCE B0            cmp a, b
3326   1CCF FD 71         seq ; ==
3327   1CD1 E4            pop a
3328   1CD2             ; END RELATIONAL
3329   1CD2 FD A8         sor a, b ; ||
3330   1CD4 11            mov a, b
3331   1CD5 FA 05 00      lea d, [bp + 5] ; $c
3332   1CD8 32            mov bl, [d]
3333   1CD9 A7 00         mov bh, 0
3334   1CDB             ; START RELATIONAL
3335   1CDB D7            push a
3336   1CDC 11            mov a, b
3337   1CDD 26 26 00      mov b, $26
3338   1CE0 B0            cmp a, b
3339   1CE1 FD 71         seq ; ==
3340   1CE3 E4            pop a
3341   1CE4             ; END RELATIONAL
3342   1CE4 FD A8         sor a, b ; ||
3343   1CE6 11            mov a, b
3344   1CE7 FA 05 00      lea d, [bp + 5] ; $c
3345   1CEA 32            mov bl, [d]
3346   1CEB A7 00         mov bh, 0
3347   1CED             ; START RELATIONAL
3348   1CED D7            push a
3349   1CEE 11            mov a, b
3350   1CEF 26 7C 00      mov b, $7c
3351   1CF2 B0            cmp a, b
3352   1CF3 FD 71         seq ; ==
3353   1CF5 E4            pop a
3354   1CF6             ; END RELATIONAL
3355   1CF6 FD A8         sor a, b ; ||
3356   1CF8 11            mov a, b
3357   1CF9 FA 05 00      lea d, [bp + 5] ; $c
3358   1CFC 32            mov bl, [d]
3359   1CFD A7 00         mov bh, 0
3360   1CFF             ; START RELATIONAL
3361   1CFF D7            push a
3362   1D00 11            mov a, b
3363   1D01 26 7E 00      mov b, $7e
3364   1D04 B0            cmp a, b
3365   1D05 FD 71         seq ; ==
3366   1D07 E4            pop a
3367   1D08             ; END RELATIONAL
3368   1D08 FD A8         sor a, b ; ||
3369   1D0A 11            mov a, b
3370   1D0B FA 05 00      lea d, [bp + 5] ; $c
3371   1D0E 32            mov bl, [d]
3372   1D0F A7 00         mov bh, 0
3373   1D11             ; START RELATIONAL
3374   1D11 D7            push a
3375   1D12 11            mov a, b
3376   1D13 26 2E 00      mov b, $2e
3377   1D16 B0            cmp a, b
3378   1D17 FD 71         seq ; ==
3379   1D19 E4            pop a
3380   1D1A             ; END RELATIONAL
3381   1D1A FD A8         sor a, b ; ||
3382   1D1C E4            pop a
3383   1D1D C0 00 00      cmp b, 0
3384   1D20 C6 2B 1D      je _if44_else
3385   1D23             _if44_true:
3386   1D23             ;; return 1; 
3387   1D23 26 01 00      mov b, $1
3388   1D26 F9            leave
3389   1D27 09            ret
3390   1D28 0A 30 1D      jmp _if44_exit
3391   1D2B             _if44_else:
3392   1D2B             ;; return 0; 
3393   1D2B 26 00 00      mov b, $0
3394   1D2E F9            leave
3395   1D2F 09            ret
3396   1D30             _if44_exit:
3397   1D30 F9            leave
3398   1D31 09            ret
3399   1D32             
3400   1D32             TO_FIXED:
3401   1D32 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3402   1D35             ;; return x * 10; 
3403   1D35 FA 05 00      lea d, [bp + 5] ; $x
3404   1D38 2A            mov b, [d]
3405   1D39             ; START FACTORS
3406   1D39 D7            push a
3407   1D3A 11            mov a, b
3408   1D3B 26 0A 00      mov b, $a
3409   1D3E AC            mul a, b ; *
3410   1D3F 11            mov a, b
3411   1D40 27            mov b, a
3412   1D41 E4            pop a
3413   1D42             ; END FACTORS
3414   1D42 F9            leave
3415   1D43 09            ret
3416   1D44             
3417   1D44             FROM_FIXED:
3418   1D44 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3419   1D47             ;; return x / 10; 
3420   1D47 FA 05 00      lea d, [bp + 5] ; $x
3421   1D4A 2A            mov b, [d]
3422   1D4B             ; START FACTORS
3423   1D4B D7            push a
3424   1D4C 11            mov a, b
3425   1D4D 26 0A 00      mov b, $a
3426   1D50 AE            div a, b
3427   1D51 27            mov b, a
3428   1D52 E4            pop a
3429   1D53             ; END FACTORS
3430   1D53 F9            leave
3431   1D54 09            ret
3432   1D55             
3433   1D55             TO_FIXED00:
3434   1D55 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3435   1D58             ;; return x * 100; 
3436   1D58 FA 05 00      lea d, [bp + 5] ; $x
3437   1D5B 2A            mov b, [d]
3438   1D5C             ; START FACTORS
3439   1D5C D7            push a
3440   1D5D 11            mov a, b
3441   1D5E 26 64 00      mov b, $64
3442   1D61 AC            mul a, b ; *
3443   1D62 11            mov a, b
3444   1D63 27            mov b, a
3445   1D64 E4            pop a
3446   1D65             ; END FACTORS
3447   1D65 F9            leave
3448   1D66 09            ret
3449   1D67             
3450   1D67             FROM_FIXED00:
3451   1D67 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3452   1D6A             ;; return x / 100; 
3453   1D6A FA 05 00      lea d, [bp + 5] ; $x
3454   1D6D 2A            mov b, [d]
3455   1D6E             ; START FACTORS
3456   1D6E D7            push a
3457   1D6F 11            mov a, b
3458   1D70 26 64 00      mov b, $64
3459   1D73 AE            div a, b
3460   1D74 27            mov b, a
3461   1D75 E4            pop a
3462   1D76             ; END FACTORS
3463   1D76 F9            leave
3464   1D77 09            ret
3465   1D78             
3466   1D78             get_rand:
3467   1D78 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3468   1D7B             ;; unsigned int        r ; 
3469   1D7B 52 02 00      sub sp, 2 ; r
3470   1D7E             ;; r = rand(); 
3471   1D7E FA FF FF      lea d, [bp + -1] ; $r
3472   1D81 DA            push d
3473   1D82 07 48 07      call rand
3474   1D85 E7            pop d
3475   1D86 FD 43         mov [d], b
3476   1D88             ;; r = (r >> 8) | (r << 8); 
3477   1D88 FA FF FF      lea d, [bp + -1] ; $r
3478   1D8B DA            push d
3479   1D8C FA FF FF      lea d, [bp + -1] ; $r
3480   1D8F 2A            mov b, [d]
3481   1D90             ; START SHIFT
3482   1D90 D7            push a
3483   1D91 11            mov a, b
3484   1D92 26 08 00      mov b, $8
3485   1D95 FD 39         mov c, b
3486   1D97 A1            shr a, cl
3487   1D98 27            mov b, a
3488   1D99 E4            pop a
3489   1D9A             ; END SHIFT
3490   1D9A D7            push a
3491   1D9B 11            mov a, b
3492   1D9C FA FF FF      lea d, [bp + -1] ; $r
3493   1D9F 2A            mov b, [d]
3494   1DA0             ; START SHIFT
3495   1DA0 D7            push a
3496   1DA1 11            mov a, b
3497   1DA2 26 08 00      mov b, $8
3498   1DA5 FD 39         mov c, b
3499   1DA7 9D            shl a, cl
3500   1DA8 27            mov b, a
3501   1DA9 E4            pop a
3502   1DAA             ; END SHIFT
3503   1DAA FD 70         or b, a ; |
3504   1DAC E4            pop a
3505   1DAD E7            pop d
3506   1DAE FD 43         mov [d], b
3507   1DB0             ;; return ((r % spread) + 1); 
3508   1DB0 FA FF FF      lea d, [bp + -1] ; $r
3509   1DB3 2A            mov b, [d]
3510   1DB4             ; START FACTORS
3511   1DB4 D7            push a
3512   1DB5 11            mov a, b
3513   1DB6 FA 05 00      lea d, [bp + 5] ; $spread
3514   1DB9 2A            mov b, [d]
3515   1DBA AE            div a, b ; 
3516   1DBB 11            mov a, b
3517   1DBC 27            mov b, a
3518   1DBD E4            pop a
3519   1DBE             ; END FACTORS
3520   1DBE             ; START TERMS
3521   1DBE D7            push a
3522   1DBF 11            mov a, b
3523   1DC0 26 01 00      mov b, $1
3524   1DC3 56            add b, a
3525   1DC4 E4            pop a
3526   1DC5             ; END TERMS
3527   1DC5 F9            leave
3528   1DC6 09            ret
3529   1DC7             
3530   1DC7             rand8:
3531   1DC7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3532   1DCA             ;; return (get_rand(8)); 
3533   1DCA 26 08 00      mov b, $8
3534   1DCD FD AB         swp b
3535   1DCF D8            push b
3536   1DD0 07 78 1D      call get_rand
3537   1DD3 51 02 00      add sp, 2
3538   1DD6 F9            leave
3539   1DD7 09            ret
3540   1DD8             
3541   1DD8             input:
3542   1DD8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3543   1DDB             ;; int c; 
3544   1DDB 52 02 00      sub sp, 2 ; c
3545   1DDE             ;; while((c = getchar()) != '\n') { 
3546   1DDE             _while45_cond:
3547   1DDE FA FF FF      lea d, [bp + -1] ; $c
3548   1DE1 DA            push d
3549   1DE2 07 1F 15      call getchar
3550   1DE5 E7            pop d
3551   1DE6 FD 43         mov [d], b
3552   1DE8             ; START RELATIONAL
3553   1DE8 D7            push a
3554   1DE9 11            mov a, b
3555   1DEA 26 0A 00      mov b, $a
3556   1DED B0            cmp a, b
3557   1DEE FD 72         sneq ; !=
3558   1DF0 E4            pop a
3559   1DF1             ; END RELATIONAL
3560   1DF1 C0 00 00      cmp b, 0
3561   1DF4 C6 4F 1E      je _while45_exit
3562   1DF7             _while45_block:
3563   1DF7             ;; if (c == -1) 
3564   1DF7             _if46_cond:
3565   1DF7 FA FF FF      lea d, [bp + -1] ; $c
3566   1DFA 2A            mov b, [d]
3567   1DFB             ; START RELATIONAL
3568   1DFB D7            push a
3569   1DFC 11            mov a, b
3570   1DFD 26 FF FF      mov b, $ffff
3571   1E00 B0            cmp a, b
3572   1E01 FD 71         seq ; ==
3573   1E03 E4            pop a
3574   1E04             ; END RELATIONAL
3575   1E04 C0 00 00      cmp b, 0
3576   1E07 C6 10 1E      je _if46_exit
3577   1E0A             _if46_true:
3578   1E0A             ;; exit(); 
3579   1E0A 07 D7 05      call exit
3580   1E0D 0A 10 1E      jmp _if46_exit
3581   1E10             _if46_exit:
3582   1E10             ;; if (l > 1) { 
3583   1E10             _if47_cond:
3584   1E10 FA 07 00      lea d, [bp + 7] ; $l
3585   1E13 32            mov bl, [d]
3586   1E14 A7 00         mov bh, 0
3587   1E16             ; START RELATIONAL
3588   1E16 D7            push a
3589   1E17 11            mov a, b
3590   1E18 26 01 00      mov b, $1
3591   1E1B B0            cmp a, b
3592   1E1C FD 81         sgu ; > (unsigned)
3593   1E1E E4            pop a
3594   1E1F             ; END RELATIONAL
3595   1E1F C0 00 00      cmp b, 0
3596   1E22 C6 4C 1E      je _if47_exit
3597   1E25             _if47_true:
3598   1E25             ;; *b++ = c; 
3599   1E25 FA 05 00      lea d, [bp + 5] ; $b
3600   1E28 2A            mov b, [d]
3601   1E29 D8            push b
3602   1E2A FD 77         inc b
3603   1E2C FA 05 00      lea d, [bp + 5] ; $b
3604   1E2F FD 43         mov [d], b
3605   1E31 E5            pop b
3606   1E32 D8            push b
3607   1E33 FA FF FF      lea d, [bp + -1] ; $c
3608   1E36 2A            mov b, [d]
3609   1E37 E7            pop d
3610   1E38 FD 3E         mov [d], bl
3611   1E3A             ;; l--; 
3612   1E3A FA 07 00      lea d, [bp + 7] ; $l
3613   1E3D 32            mov bl, [d]
3614   1E3E A7 00         mov bh, 0
3615   1E40 D8            push b
3616   1E41 FD 7D         dec b
3617   1E43 FA 07 00      lea d, [bp + 7] ; $l
3618   1E46 FD 43         mov [d], b
3619   1E48 E5            pop b
3620   1E49 0A 4C 1E      jmp _if47_exit
3621   1E4C             _if47_exit:
3622   1E4C 0A DE 1D      jmp _while45_cond
3623   1E4F             _while45_exit:
3624   1E4F             ;; *b = 0; 
3625   1E4F FA 05 00      lea d, [bp + 5] ; $b
3626   1E52 2A            mov b, [d]
3627   1E53 D8            push b
3628   1E54 26 00 00      mov b, $0
3629   1E57 E7            pop d
3630   1E58 FD 3E         mov [d], bl
3631   1E5A F9            leave
3632   1E5B 09            ret
3633   1E5C             
3634   1E5C             yesno:
3635   1E5C F8 00 00      enter 0 ; (push bp; mov bp, sp)
3636   1E5F             ;; char b[2]; 
3637   1E5F 52 02 00      sub sp, 2 ; b
3638   1E62             ;; input(b,2); 
3639   1E62 26 02 00      mov b, $2
3640   1E65 DD            push bl
3641   1E66 FA FF FF      lea d, [bp + -1] ; $b
3642   1E69 2D            mov b, d
3643   1E6A FD AB         swp b
3644   1E6C D8            push b
3645   1E6D 07 D8 1D      call input
3646   1E70 51 03 00      add sp, 3
3647   1E73             ;; if (tolower(*b) == 'y') 
3648   1E73             _if48_cond:
3649   1E73 FA FF FF      lea d, [bp + -1] ; $b
3650   1E76 2D            mov b, d
3651   1E77 74            mov d, b
3652   1E78 32            mov bl, [d]
3653   1E79 A7 00         mov bh, 0
3654   1E7B DD            push bl
3655   1E7C 07 BD 1A      call tolower
3656   1E7F 51 01 00      add sp, 1
3657   1E82             ; START RELATIONAL
3658   1E82 D7            push a
3659   1E83 11            mov a, b
3660   1E84 26 79 00      mov b, $79
3661   1E87 B0            cmp a, b
3662   1E88 FD 71         seq ; ==
3663   1E8A E4            pop a
3664   1E8B             ; END RELATIONAL
3665   1E8B C0 00 00      cmp b, 0
3666   1E8E C6 99 1E      je _if48_exit
3667   1E91             _if48_true:
3668   1E91             ;; return 1; 
3669   1E91 26 01 00      mov b, $1
3670   1E94 F9            leave
3671   1E95 09            ret
3672   1E96 0A 99 1E      jmp _if48_exit
3673   1E99             _if48_exit:
3674   1E99             ;; return 0; 
3675   1E99 26 00 00      mov b, $0
3676   1E9C F9            leave
3677   1E9D 09            ret
3678   1E9E             
3679   1E9E             input_f00:
3680   1E9E F8 00 00      enter 0 ; (push bp; mov bp, sp)
3681   1EA1             ;; int       v; 
3682   1EA1 52 02 00      sub sp, 2 ; v
3683   1EA4             ;; char buf[8]; 
3684   1EA4 52 08 00      sub sp, 8 ; buf
3685   1EA7             ;; char *x; 
3686   1EA7 52 02 00      sub sp, 2 ; x
3687   1EAA             ;; input(buf, 8); 
3688   1EAA 26 08 00      mov b, $8
3689   1EAD DD            push bl
3690   1EAE FA F7 FF      lea d, [bp + -9] ; $buf
3691   1EB1 2D            mov b, d
3692   1EB2 FD AB         swp b
3693   1EB4 D8            push b
3694   1EB5 07 D8 1D      call input
3695   1EB8 51 03 00      add sp, 3
3696   1EBB             ;; x = buf; 
3697   1EBB FA F5 FF      lea d, [bp + -11] ; $x
3698   1EBE DA            push d
3699   1EBF FA F7 FF      lea d, [bp + -9] ; $buf
3700   1EC2 2D            mov b, d
3701   1EC3 E7            pop d
3702   1EC4 FD 43         mov [d], b
3703   1EC6             ;; if (!is_digit(*x)) 
3704   1EC6             _if49_cond:
3705   1EC6 FA F5 FF      lea d, [bp + -11] ; $x
3706   1EC9 2A            mov b, [d]
3707   1ECA 74            mov d, b
3708   1ECB 32            mov bl, [d]
3709   1ECC A7 00         mov bh, 0
3710   1ECE DD            push bl
3711   1ECF 07 33 1A      call is_digit
3712   1ED2 51 01 00      add sp, 1
3713   1ED5 C0 00 00      cmp b, 0
3714   1ED8 FD 71         seq ; !
3715   1EDA C0 00 00      cmp b, 0
3716   1EDD C6 E8 1E      je _if49_exit
3717   1EE0             _if49_true:
3718   1EE0             ;; return -1; 
3719   1EE0 26 FF FF      mov b, $ffff
3720   1EE3 F9            leave
3721   1EE4 09            ret
3722   1EE5 0A E8 1E      jmp _if49_exit
3723   1EE8             _if49_exit:
3724   1EE8             ;; v = 100 * (*x++ - '0'); 
3725   1EE8 FA FF FF      lea d, [bp + -1] ; $v
3726   1EEB DA            push d
3727   1EEC 26 64 00      mov b, $64
3728   1EEF             ; START FACTORS
3729   1EEF D7            push a
3730   1EF0 11            mov a, b
3731   1EF1 FA F5 FF      lea d, [bp + -11] ; $x
3732   1EF4 2A            mov b, [d]
3733   1EF5 D8            push b
3734   1EF6 FD 77         inc b
3735   1EF8 FA F5 FF      lea d, [bp + -11] ; $x
3736   1EFB FD 43         mov [d], b
3737   1EFD E5            pop b
3738   1EFE 74            mov d, b
3739   1EFF 32            mov bl, [d]
3740   1F00 A7 00         mov bh, 0
3741   1F02             ; START TERMS
3742   1F02 D7            push a
3743   1F03 11            mov a, b
3744   1F04 26 30 00      mov b, $30
3745   1F07 60            sub a, b
3746   1F08 27            mov b, a
3747   1F09 E4            pop a
3748   1F0A             ; END TERMS
3749   1F0A AC            mul a, b ; *
3750   1F0B 11            mov a, b
3751   1F0C 27            mov b, a
3752   1F0D E4            pop a
3753   1F0E             ; END FACTORS
3754   1F0E E7            pop d
3755   1F0F FD 43         mov [d], b
3756   1F11             ;; if (*x == 0) 
3757   1F11             _if50_cond:
3758   1F11 FA F5 FF      lea d, [bp + -11] ; $x
3759   1F14 2A            mov b, [d]
3760   1F15 74            mov d, b
3761   1F16 32            mov bl, [d]
3762   1F17 A7 00         mov bh, 0
3763   1F19             ; START RELATIONAL
3764   1F19 D7            push a
3765   1F1A 11            mov a, b
3766   1F1B 26 00 00      mov b, $0
3767   1F1E B0            cmp a, b
3768   1F1F FD 71         seq ; ==
3769   1F21 E4            pop a
3770   1F22             ; END RELATIONAL
3771   1F22 C0 00 00      cmp b, 0
3772   1F25 C6 31 1F      je _if50_exit
3773   1F28             _if50_true:
3774   1F28             ;; return v; 
3775   1F28 FA FF FF      lea d, [bp + -1] ; $v
3776   1F2B 2A            mov b, [d]
3777   1F2C F9            leave
3778   1F2D 09            ret
3779   1F2E 0A 31 1F      jmp _if50_exit
3780   1F31             _if50_exit:
3781   1F31             ;; if (*x++ != '.') 
3782   1F31             _if51_cond:
3783   1F31 FA F5 FF      lea d, [bp + -11] ; $x
3784   1F34 2A            mov b, [d]
3785   1F35 D8            push b
3786   1F36 FD 77         inc b
3787   1F38 FA F5 FF      lea d, [bp + -11] ; $x
3788   1F3B FD 43         mov [d], b
3789   1F3D E5            pop b
3790   1F3E 74            mov d, b
3791   1F3F 32            mov bl, [d]
3792   1F40 A7 00         mov bh, 0
3793   1F42             ; START RELATIONAL
3794   1F42 D7            push a
3795   1F43 11            mov a, b
3796   1F44 26 2E 00      mov b, $2e
3797   1F47 B0            cmp a, b
3798   1F48 FD 72         sneq ; !=
3799   1F4A E4            pop a
3800   1F4B             ; END RELATIONAL
3801   1F4B C0 00 00      cmp b, 0
3802   1F4E C6 59 1F      je _if51_exit
3803   1F51             _if51_true:
3804   1F51             ;; return -1; 
3805   1F51 26 FF FF      mov b, $ffff
3806   1F54 F9            leave
3807   1F55 09            ret
3808   1F56 0A 59 1F      jmp _if51_exit
3809   1F59             _if51_exit:
3810   1F59             ;; if (!is_digit(*x)) 
3811   1F59             _if52_cond:
3812   1F59 FA F5 FF      lea d, [bp + -11] ; $x
3813   1F5C 2A            mov b, [d]
3814   1F5D 74            mov d, b
3815   1F5E 32            mov bl, [d]
3816   1F5F A7 00         mov bh, 0
3817   1F61 DD            push bl
3818   1F62 07 33 1A      call is_digit
3819   1F65 51 01 00      add sp, 1
3820   1F68 C0 00 00      cmp b, 0
3821   1F6B FD 71         seq ; !
3822   1F6D C0 00 00      cmp b, 0
3823   1F70 C6 7B 1F      je _if52_exit
3824   1F73             _if52_true:
3825   1F73             ;; return -1; 
3826   1F73 26 FF FF      mov b, $ffff
3827   1F76 F9            leave
3828   1F77 09            ret
3829   1F78 0A 7B 1F      jmp _if52_exit
3830   1F7B             _if52_exit:
3831   1F7B             ;; v = v + 10 * (*x++ - '0'); 
3832   1F7B FA FF FF      lea d, [bp + -1] ; $v
3833   1F7E DA            push d
3834   1F7F FA FF FF      lea d, [bp + -1] ; $v
3835   1F82 2A            mov b, [d]
3836   1F83             ; START TERMS
3837   1F83 D7            push a
3838   1F84 11            mov a, b
3839   1F85 26 0A 00      mov b, $a
3840   1F88             ; START FACTORS
3841   1F88 D7            push a
3842   1F89 11            mov a, b
3843   1F8A FA F5 FF      lea d, [bp + -11] ; $x
3844   1F8D 2A            mov b, [d]
3845   1F8E D8            push b
3846   1F8F FD 77         inc b
3847   1F91 FA F5 FF      lea d, [bp + -11] ; $x
3848   1F94 FD 43         mov [d], b
3849   1F96 E5            pop b
3850   1F97 74            mov d, b
3851   1F98 32            mov bl, [d]
3852   1F99 A7 00         mov bh, 0
3853   1F9B             ; START TERMS
3854   1F9B D7            push a
3855   1F9C 11            mov a, b
3856   1F9D 26 30 00      mov b, $30
3857   1FA0 60            sub a, b
3858   1FA1 27            mov b, a
3859   1FA2 E4            pop a
3860   1FA3             ; END TERMS
3861   1FA3 AC            mul a, b ; *
3862   1FA4 11            mov a, b
3863   1FA5 27            mov b, a
3864   1FA6 E4            pop a
3865   1FA7             ; END FACTORS
3866   1FA7 56            add b, a
3867   1FA8 E4            pop a
3868   1FA9             ; END TERMS
3869   1FA9 E7            pop d
3870   1FAA FD 43         mov [d], b
3871   1FAC             ;; if (!*x) 
3872   1FAC             _if53_cond:
3873   1FAC FA F5 FF      lea d, [bp + -11] ; $x
3874   1FAF 2A            mov b, [d]
3875   1FB0 74            mov d, b
3876   1FB1 32            mov bl, [d]
3877   1FB2 A7 00         mov bh, 0
3878   1FB4 C0 00 00      cmp b, 0
3879   1FB7 FD 71         seq ; !
3880   1FB9 C0 00 00      cmp b, 0
3881   1FBC C6 C8 1F      je _if53_exit
3882   1FBF             _if53_true:
3883   1FBF             ;; return v; 
3884   1FBF FA FF FF      lea d, [bp + -1] ; $v
3885   1FC2 2A            mov b, [d]
3886   1FC3 F9            leave
3887   1FC4 09            ret
3888   1FC5 0A C8 1F      jmp _if53_exit
3889   1FC8             _if53_exit:
3890   1FC8             ;; if (!is_digit(*x)) 
3891   1FC8             _if54_cond:
3892   1FC8 FA F5 FF      lea d, [bp + -11] ; $x
3893   1FCB 2A            mov b, [d]
3894   1FCC 74            mov d, b
3895   1FCD 32            mov bl, [d]
3896   1FCE A7 00         mov bh, 0
3897   1FD0 DD            push bl
3898   1FD1 07 33 1A      call is_digit
3899   1FD4 51 01 00      add sp, 1
3900   1FD7 C0 00 00      cmp b, 0
3901   1FDA FD 71         seq ; !
3902   1FDC C0 00 00      cmp b, 0
3903   1FDF C6 EA 1F      je _if54_exit
3904   1FE2             _if54_true:
3905   1FE2             ;; return -1; 
3906   1FE2 26 FF FF      mov b, $ffff
3907   1FE5 F9            leave
3908   1FE6 09            ret
3909   1FE7 0A EA 1F      jmp _if54_exit
3910   1FEA             _if54_exit:
3911   1FEA             ;; v = v + *x++ - '0'; 
3912   1FEA FA FF FF      lea d, [bp + -1] ; $v
3913   1FED DA            push d
3914   1FEE FA FF FF      lea d, [bp + -1] ; $v
3915   1FF1 2A            mov b, [d]
3916   1FF2             ; START TERMS
3917   1FF2 D7            push a
3918   1FF3 11            mov a, b
3919   1FF4 FA F5 FF      lea d, [bp + -11] ; $x
3920   1FF7 2A            mov b, [d]
3921   1FF8 D8            push b
3922   1FF9 FD 77         inc b
3923   1FFB FA F5 FF      lea d, [bp + -11] ; $x
3924   1FFE FD 43         mov [d], b
3925   2000 E5            pop b
3926   2001 74            mov d, b
3927   2002 32            mov bl, [d]
3928   2003 A7 00         mov bh, 0
3929   2005 56            add b, a
3930   2006 11            mov a, b
3931   2007 26 30 00      mov b, $30
3932   200A 60            sub a, b
3933   200B 27            mov b, a
3934   200C E4            pop a
3935   200D             ; END TERMS
3936   200D E7            pop d
3937   200E FD 43         mov [d], b
3938   2010             ;; return v; 
3939   2010 FA FF FF      lea d, [bp + -1] ; $v
3940   2013 2A            mov b, [d]
3941   2014 F9            leave
3942   2015 09            ret
3943   2016             
3944   2016             input_int:
3945   2016 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3946   2019             ;; char x[8]; 
3947   2019 52 08 00      sub sp, 8 ; x
3948   201C             ;; input(x, 8); 
3949   201C 26 08 00      mov b, $8
3950   201F DD            push bl
3951   2020 FA F9 FF      lea d, [bp + -7] ; $x
3952   2023 2D            mov b, d
3953   2024 FD AB         swp b
3954   2026 D8            push b
3955   2027 07 D8 1D      call input
3956   202A 51 03 00      add sp, 3
3957   202D             ;; if (!is_digit(*x)) 
3958   202D             _if55_cond:
3959   202D FA F9 FF      lea d, [bp + -7] ; $x
3960   2030 2D            mov b, d
3961   2031 74            mov d, b
3962   2032 32            mov bl, [d]
3963   2033 A7 00         mov bh, 0
3964   2035 DD            push bl
3965   2036 07 33 1A      call is_digit
3966   2039 51 01 00      add sp, 1
3967   203C C0 00 00      cmp b, 0
3968   203F FD 71         seq ; !
3969   2041 C0 00 00      cmp b, 0
3970   2044 C6 4F 20      je _if55_exit
3971   2047             _if55_true:
3972   2047             ;; return -1; 
3973   2047 26 FF FF      mov b, $ffff
3974   204A F9            leave
3975   204B 09            ret
3976   204C 0A 4F 20      jmp _if55_exit
3977   204F             _if55_exit:
3978   204F             ;; return atoi(x); 
3979   204F FA F9 FF      lea d, [bp + -7] ; $x
3980   2052 2D            mov b, d
3981   2053 FD AB         swp b
3982   2055 D8            push b
3983   2056 07 2E 06      call atoi
3984   2059 51 02 00      add sp, 2
3985   205C F9            leave
3986   205D 09            ret
3987   205E             
3988   205E             print100:
3989   205E F8 00 00      enter 0 ; (push bp; mov bp, sp)
3990   2061             ;; static char buf[16]; 
3991   2061 52 10 00      sub sp, 16 ; buf
3992   2064             ;; char *p; 
3993   2064 52 02 00      sub sp, 2 ; p
3994   2067             ;; *p = buf; 
3995   2067 FA FF FF      lea d, [bp + -1] ; $p
3996   206A 2A            mov b, [d]
3997   206B D8            push b
3998   206C 3B 69 64      mov d, st_print100_buf_dt ; static buf
3999   206F 2D            mov b, d
4000   2070 E7            pop d
4001   2071 FD 3E         mov [d], bl
4002   2073             ;; if (v < 0) { 
4003   2073             _if56_cond:
4004   2073 FA 05 00      lea d, [bp + 5] ; $v
4005   2076 2A            mov b, [d]
4006   2077             ; START RELATIONAL
4007   2077 D7            push a
4008   2078 11            mov a, b
4009   2079 26 00 00      mov b, $0
4010   207C B0            cmp a, b
4011   207D FD 73         slt ; < (signed)
4012   207F E4            pop a
4013   2080             ; END RELATIONAL
4014   2080 C0 00 00      cmp b, 0
4015   2083 C6 AA 20      je _if56_exit
4016   2086             _if56_true:
4017   2086             ;; v = -v; 
4018   2086 FA 05 00      lea d, [bp + 5] ; $v
4019   2089 DA            push d
4020   208A FA 05 00      lea d, [bp + 5] ; $v
4021   208D 2A            mov b, [d]
4022   208E FD 97         neg b
4023   2090 E7            pop d
4024   2091 FD 43         mov [d], b
4025   2093             ;; *p++ = '-'; 
4026   2093 FA FF FF      lea d, [bp + -1] ; $p
4027   2096 2A            mov b, [d]
4028   2097 D8            push b
4029   2098 FD 77         inc b
4030   209A FA FF FF      lea d, [bp + -1] ; $p
4031   209D FD 43         mov [d], b
4032   209F E5            pop b
4033   20A0 D8            push b
4034   20A1 26 2D 00      mov b, $2d
4035   20A4 E7            pop d
4036   20A5 FD 3E         mov [d], bl
4037   20A7 0A AA 20      jmp _if56_exit
4038   20AA             _if56_exit:
4039   20AA             ;; return buf; 
4040   20AA 3B 69 64      mov d, st_print100_buf_dt ; static buf
4041   20AD 2D            mov b, d
4042   20AE F9            leave
4043   20AF 09            ret
4044   20B0             
4045   20B0             inoperable:
4046   20B0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4047   20B3             ;; if (damage[u] < 0) { 
4048   20B3             _if57_cond:
4049   20B3 3B 87 62      mov d, _damage_data ; $damage
4050   20B6 D7            push a
4051   20B7 DA            push d
4052   20B8 FA 05 00      lea d, [bp + 5] ; $u
4053   20BB 32            mov bl, [d]
4054   20BC A7 00         mov bh, 0
4055   20BE E7            pop d
4056   20BF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4057   20C3 E4            pop a
4058   20C4 2A            mov b, [d]
4059   20C5             ; START RELATIONAL
4060   20C5 D7            push a
4061   20C6 11            mov a, b
4062   20C7 26 00 00      mov b, $0
4063   20CA B0            cmp a, b
4064   20CB FD 73         slt ; < (signed)
4065   20CD E4            pop a
4066   20CE             ; END RELATIONAL
4067   20CE C0 00 00      cmp b, 0
4068   20D1 C6 1B 21      je _if57_exit
4069   20D4             _if57_true:
4070   20D4             ;; printf("%s %s inoperable.\n", 
4071   20D4             _ternary59_cond:
4072   20D4 FA 05 00      lea d, [bp + 5] ; $u
4073   20D7 32            mov bl, [d]
4074   20D8 A7 00         mov bh, 0
4075   20DA             ; START RELATIONAL
4076   20DA D7            push a
4077   20DB 11            mov a, b
4078   20DC 26 05 00      mov b, $5
4079   20DF B0            cmp a, b
4080   20E0 FD 71         seq ; ==
4081   20E2 E4            pop a
4082   20E3             ; END RELATIONAL
4083   20E3 C0 00 00      cmp b, 0
4084   20E6 C6 EF 20      je _ternary59_false
4085   20E9             _ternary59_true:
4086   20E9 26 E5 65      mov b, _s33 ; "are"
4087   20EC 0A F2 20      jmp _ternary59_exit
4088   20EF             _ternary59_false:
4089   20EF 26 E9 65      mov b, _s34 ; "is"
4090   20F2             _ternary59_exit:
4091   20F2 FD AB         swp b
4092   20F4 D8            push b
4093   20F5 FA 05 00      lea d, [bp + 5] ; $u
4094   20F8 32            mov bl, [d]
4095   20F9 A7 00         mov bh, 0
4096   20FB FD AB         swp b
4097   20FD D8            push b
4098   20FE 07 3E 5E      call get_device_name
4099   2101 51 02 00      add sp, 2
4100   2104 FD AB         swp b
4101   2106 D8            push b
4102   2107 26 EC 65      mov b, _s35 ; "%s %s inoperable.\n"
4103   210A FD AB         swp b
4104   210C D8            push b
4105   210D 07 B8 07      call printf
4106   2110 51 06 00      add sp, 6
4107   2113             ;; return 1; 
4108   2113 26 01 00      mov b, $1
4109   2116 F9            leave
4110   2117 09            ret
4111   2118 0A 1B 21      jmp _if57_exit
4112   211B             _if57_exit:
4113   211B             ;; return 0; 
4114   211B 26 00 00      mov b, $0
4115   211E F9            leave
4116   211F 09            ret
4117   2120             
4118   2120             intro:
4119   2120 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4120   2123             ;; showfile("startrek.intro"); 
4121   2123 26 FF 65      mov b, _s36 ; "startrek.intro"
4122   2126 FD AB         swp b
4123   2128 D8            push b
4124   2129 07 9C 61      call showfile
4125   212C 51 02 00      add sp, 2
4126   212F             ;; if (yesno()) 
4127   212F             _if60_cond:
4128   212F 07 5C 1E      call yesno
4129   2132 C0 00 00      cmp b, 0
4130   2135 C6 47 21      je _if60_exit
4131   2138             _if60_true:
4132   2138             ;; showfile("startrek.doc"); 
4133   2138 26 0E 66      mov b, _s37 ; "startrek.doc"
4134   213B FD AB         swp b
4135   213D D8            push b
4136   213E 07 9C 61      call showfile
4137   2141 51 02 00      add sp, 2
4138   2144 0A 47 21      jmp _if60_exit
4139   2147             _if60_exit:
4140   2147             ;; showfile("startrek.logo"); 
4141   2147 26 1B 66      mov b, _s38 ; "startrek.logo"
4142   214A FD AB         swp b
4143   214C D8            push b
4144   214D 07 9C 61      call showfile
4145   2150 51 02 00      add sp, 2
4146   2153             ;; stardate = TO_FIXED((get_rand(20) + 20) * 100); 
4147   2153 3B 9F 62      mov d, _stardate ; $stardate
4148   2156 DA            push d
4149   2157 26 14 00      mov b, $14
4150   215A FD AB         swp b
4151   215C D8            push b
4152   215D 07 78 1D      call get_rand
4153   2160 51 02 00      add sp, 2
4154   2163             ; START TERMS
4155   2163 D7            push a
4156   2164 11            mov a, b
4157   2165 26 14 00      mov b, $14
4158   2168 56            add b, a
4159   2169 E4            pop a
4160   216A             ; END TERMS
4161   216A             ; START FACTORS
4162   216A D7            push a
4163   216B 11            mov a, b
4164   216C 26 64 00      mov b, $64
4165   216F AC            mul a, b ; *
4166   2170 11            mov a, b
4167   2171 27            mov b, a
4168   2172 E4            pop a
4169   2173             ; END FACTORS
4170   2173 FD AB         swp b
4171   2175 D8            push b
4172   2176 07 32 1D      call TO_FIXED
4173   2179 51 02 00      add sp, 2
4174   217C E7            pop d
4175   217D FD 43         mov [d], b
4176   217F F9            leave
4177   2180 09            ret
4178   2181             
4179   2181             new_game:
4180   2181 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4181   2184             ;; char cmd[4]; 
4182   2184 52 04 00      sub sp, 4 ; cmd
4183   2187             ;; initialize(); 
4184   2187 07 13 24      call initialize
4185   218A             ;; new_quadrant(); 
4186   218A 07 BC 28      call new_quadrant
4187   218D             ;; short_range_scan(); 
4188   218D 07 AA 35      call short_range_scan
4189   2190             ;; while (1) { 
4190   2190             _while61_cond:
4191   2190 26 01 00      mov b, $1
4192   2193 C0 00 00      cmp b, 0
4193   2196 C6 11 24      je _while61_exit
4194   2199             _while61_block:
4195   2199             ;; if (shield + energy <= 10 && (energy < 10 || damage[7] < 0)) { 
4196   2199             _if62_cond:
4197   2199 3B 80 62      mov d, _shield ; $shield
4198   219C 2A            mov b, [d]
4199   219D             ; START TERMS
4200   219D D7            push a
4201   219E 11            mov a, b
4202   219F 3B C5 61      mov d, _energy ; $energy
4203   21A2 2A            mov b, [d]
4204   21A3 56            add b, a
4205   21A4 E4            pop a
4206   21A5             ; END TERMS
4207   21A5             ; START RELATIONAL
4208   21A5 D7            push a
4209   21A6 11            mov a, b
4210   21A7 26 0A 00      mov b, $a
4211   21AA B0            cmp a, b
4212   21AB FD 73         slt ; <= (signed)
4213   21AD E4            pop a
4214   21AE             ; END RELATIONAL
4215   21AE D7            push a
4216   21AF 11            mov a, b
4217   21B0 3B C5 61      mov d, _energy ; $energy
4218   21B3 2A            mov b, [d]
4219   21B4             ; START RELATIONAL
4220   21B4 D7            push a
4221   21B5 11            mov a, b
4222   21B6 26 0A 00      mov b, $a
4223   21B9 B0            cmp a, b
4224   21BA FD 73         slt ; < (signed)
4225   21BC E4            pop a
4226   21BD             ; END RELATIONAL
4227   21BD D7            push a
4228   21BE 11            mov a, b
4229   21BF 3B 87 62      mov d, _damage_data ; $damage
4230   21C2 D7            push a
4231   21C3 DA            push d
4232   21C4 26 07 00      mov b, $7
4233   21C7 E7            pop d
4234   21C8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4235   21CC E4            pop a
4236   21CD 2A            mov b, [d]
4237   21CE             ; START RELATIONAL
4238   21CE D7            push a
4239   21CF 11            mov a, b
4240   21D0 26 00 00      mov b, $0
4241   21D3 B0            cmp a, b
4242   21D4 FD 73         slt ; < (signed)
4243   21D6 E4            pop a
4244   21D7             ; END RELATIONAL
4245   21D7 FD A8         sor a, b ; ||
4246   21D9 E4            pop a
4247   21DA FD A7         sand a, b
4248   21DC E4            pop a
4249   21DD C0 00 00      cmp b, 0
4250   21E0 C6 F5 21      je _if62_exit
4251   21E3             _if62_true:
4252   21E3             ;; showfile("startrek.fatal"); 
4253   21E3 26 29 66      mov b, _s39 ; "startrek.fatal"
4254   21E6 FD AB         swp b
4255   21E8 D8            push b
4256   21E9 07 9C 61      call showfile
4257   21EC 51 02 00      add sp, 2
4258   21EF             ;; end_of_time(); 
4259   21EF 07 ED 55      call end_of_time
4260   21F2 0A F5 21      jmp _if62_exit
4261   21F5             _if62_exit:
4262   21F5             ;; puts("Command? "); 
4263   21F5 26 38 66      mov b, _s40 ; "Command? "
4264   21F8 FD AB         swp b
4265   21FA D8            push b
4266   21FB 07 48 15      call puts
4267   21FE 51 02 00      add sp, 2
4268   2201             ;; input(cmd, 4); 
4269   2201 26 04 00      mov b, $4
4270   2204 DD            push bl
4271   2205 FA FD FF      lea d, [bp + -3] ; $cmd
4272   2208 2D            mov b, d
4273   2209 FD AB         swp b
4274   220B D8            push b
4275   220C 07 D8 1D      call input
4276   220F 51 03 00      add sp, 3
4277   2212             ;; putchar('\n'); 
4278   2212 26 0A 00      mov b, $a
4279   2215 DD            push bl
4280   2216 07 12 15      call putchar
4281   2219 51 01 00      add sp, 1
4282   221C             ;; if (!strncmp(cmd, "nav", 3)) 
4283   221C             _if63_cond:
4284   221C 26 03 00      mov b, $3
4285   221F FD AB         swp b
4286   2221 D8            push b
4287   2222 26 42 66      mov b, _s41 ; "nav"
4288   2225 FD AB         swp b
4289   2227 D8            push b
4290   2228 FA FD FF      lea d, [bp + -3] ; $cmd
4291   222B 2D            mov b, d
4292   222C FD AB         swp b
4293   222E D8            push b
4294   222F 07 D3 04      call strncmp
4295   2232 51 06 00      add sp, 6
4296   2235 C0 00 00      cmp b, 0
4297   2238 FD 71         seq ; !
4298   223A C0 00 00      cmp b, 0
4299   223D C6 46 22      je _if63_else
4300   2240             _if63_true:
4301   2240             ;; course_control(); 
4302   2240 07 4F 2C      call course_control
4303   2243 0A 0E 24      jmp _if63_exit
4304   2246             _if63_else:
4305   2246             ;; if (!strncmp(cmd, "srs", 3)) 
4306   2246             _if64_cond:
4307   2246 26 03 00      mov b, $3
4308   2249 FD AB         swp b
4309   224B D8            push b
4310   224C 26 46 66      mov b, _s42 ; "srs"
4311   224F FD AB         swp b
4312   2251 D8            push b
4313   2252 FA FD FF      lea d, [bp + -3] ; $cmd
4314   2255 2D            mov b, d
4315   2256 FD AB         swp b
4316   2258 D8            push b
4317   2259 07 D3 04      call strncmp
4318   225C 51 06 00      add sp, 6
4319   225F C0 00 00      cmp b, 0
4320   2262 FD 71         seq ; !
4321   2264 C0 00 00      cmp b, 0
4322   2267 C6 70 22      je _if64_else
4323   226A             _if64_true:
4324   226A             ;; short_range_scan(); 
4325   226A 07 AA 35      call short_range_scan
4326   226D 0A 0E 24      jmp _if64_exit
4327   2270             _if64_else:
4328   2270             ;; if (!strncmp(cmd, "lrs", 3)) 
4329   2270             _if65_cond:
4330   2270 26 03 00      mov b, $3
4331   2273 FD AB         swp b
4332   2275 D8            push b
4333   2276 26 4A 66      mov b, _s43 ; "lrs"
4334   2279 FD AB         swp b
4335   227B D8            push b
4336   227C FA FD FF      lea d, [bp + -3] ; $cmd
4337   227F 2D            mov b, d
4338   2280 FD AB         swp b
4339   2282 D8            push b
4340   2283 07 D3 04      call strncmp
4341   2286 51 06 00      add sp, 6
4342   2289 C0 00 00      cmp b, 0
4343   228C FD 71         seq ; !
4344   228E C0 00 00      cmp b, 0
4345   2291 C6 9A 22      je _if65_else
4346   2294             _if65_true:
4347   2294             ;; long_range_scan(); 
4348   2294 07 36 3A      call long_range_scan
4349   2297 0A 0E 24      jmp _if65_exit
4350   229A             _if65_else:
4351   229A             ;; if (!strncmp(cmd, "pha", 3)) 
4352   229A             _if66_cond:
4353   229A 26 03 00      mov b, $3
4354   229D FD AB         swp b
4355   229F D8            push b
4356   22A0 26 4E 66      mov b, _s44 ; "pha"
4357   22A3 FD AB         swp b
4358   22A5 D8            push b
4359   22A6 FA FD FF      lea d, [bp + -3] ; $cmd
4360   22A9 2D            mov b, d
4361   22AA FD AB         swp b
4362   22AC D8            push b
4363   22AD 07 D3 04      call strncmp
4364   22B0 51 06 00      add sp, 6
4365   22B3 C0 00 00      cmp b, 0
4366   22B6 FD 71         seq ; !
4367   22B8 C0 00 00      cmp b, 0
4368   22BB C6 C4 22      je _if66_else
4369   22BE             _if66_true:
4370   22BE             ;; phaser_control(); 
4371   22BE 07 57 3C      call phaser_control
4372   22C1 0A 0E 24      jmp _if66_exit
4373   22C4             _if66_else:
4374   22C4             ;; if (!strncmp(cmd, "tor", 3)) 
4375   22C4             _if67_cond:
4376   22C4 26 03 00      mov b, $3
4377   22C7 FD AB         swp b
4378   22C9 D8            push b
4379   22CA 26 52 66      mov b, _s45 ; "tor"
4380   22CD FD AB         swp b
4381   22CF D8            push b
4382   22D0 FA FD FF      lea d, [bp + -3] ; $cmd
4383   22D3 2D            mov b, d
4384   22D4 FD AB         swp b
4385   22D6 D8            push b
4386   22D7 07 D3 04      call strncmp
4387   22DA 51 06 00      add sp, 6
4388   22DD C0 00 00      cmp b, 0
4389   22E0 FD 71         seq ; !
4390   22E2 C0 00 00      cmp b, 0
4391   22E5 C6 EE 22      je _if67_else
4392   22E8             _if67_true:
4393   22E8             ;; photon_torpedoes(); 
4394   22E8 07 21 41      call photon_torpedoes
4395   22EB 0A 0E 24      jmp _if67_exit
4396   22EE             _if67_else:
4397   22EE             ;; if (!strncmp(cmd, "shi", 3)) 
4398   22EE             _if68_cond:
4399   22EE 26 03 00      mov b, $3
4400   22F1 FD AB         swp b
4401   22F3 D8            push b
4402   22F4 26 56 66      mov b, _s46 ; "shi"
4403   22F7 FD AB         swp b
4404   22F9 D8            push b
4405   22FA FA FD FF      lea d, [bp + -3] ; $cmd
4406   22FD 2D            mov b, d
4407   22FE FD AB         swp b
4408   2300 D8            push b
4409   2301 07 D3 04      call strncmp
4410   2304 51 06 00      add sp, 6
4411   2307 C0 00 00      cmp b, 0
4412   230A FD 71         seq ; !
4413   230C C0 00 00      cmp b, 0
4414   230F C6 18 23      je _if68_else
4415   2312             _if68_true:
4416   2312             ;; shield_control(); 
4417   2312 07 B4 49      call shield_control
4418   2315 0A 0E 24      jmp _if68_exit
4419   2318             _if68_else:
4420   2318             ;; if (!strncmp(cmd, "dam", 3)) 
4421   2318             _if69_cond:
4422   2318 26 03 00      mov b, $3
4423   231B FD AB         swp b
4424   231D D8            push b
4425   231E 26 5A 66      mov b, _s47 ; "dam"
4426   2321 FD AB         swp b
4427   2323 D8            push b
4428   2324 FA FD FF      lea d, [bp + -3] ; $cmd
4429   2327 2D            mov b, d
4430   2328 FD AB         swp b
4431   232A D8            push b
4432   232B 07 D3 04      call strncmp
4433   232E 51 06 00      add sp, 6
4434   2331 C0 00 00      cmp b, 0
4435   2334 FD 71         seq ; !
4436   2336 C0 00 00      cmp b, 0
4437   2339 C6 42 23      je _if69_else
4438   233C             _if69_true:
4439   233C             ;; damage_control(); 
4440   233C 07 62 47      call damage_control
4441   233F 0A 0E 24      jmp _if69_exit
4442   2342             _if69_else:
4443   2342             ;; if (!strncmp(cmd, "com", 3)) 
4444   2342             _if70_cond:
4445   2342 26 03 00      mov b, $3
4446   2345 FD AB         swp b
4447   2347 D8            push b
4448   2348 26 5E 66      mov b, _s48 ; "com"
4449   234B FD AB         swp b
4450   234D D8            push b
4451   234E FA FD FF      lea d, [bp + -3] ; $cmd
4452   2351 2D            mov b, d
4453   2352 FD AB         swp b
4454   2354 D8            push b
4455   2355 07 D3 04      call strncmp
4456   2358 51 06 00      add sp, 6
4457   235B C0 00 00      cmp b, 0
4458   235E FD 71         seq ; !
4459   2360 C0 00 00      cmp b, 0
4460   2363 C6 6C 23      je _if70_else
4461   2366             _if70_true:
4462   2366             ;; library_computer(); 
4463   2366 07 90 4A      call library_computer
4464   2369 0A 0E 24      jmp _if70_exit
4465   236C             _if70_else:
4466   236C             ;; if (!strncmp(cmd, "xxx", 3)) 
4467   236C             _if71_cond:
4468   236C 26 03 00      mov b, $3
4469   236F FD AB         swp b
4470   2371 D8            push b
4471   2372 26 62 66      mov b, _s49 ; "xxx"
4472   2375 FD AB         swp b
4473   2377 D8            push b
4474   2378 FA FD FF      lea d, [bp + -3] ; $cmd
4475   237B 2D            mov b, d
4476   237C FD AB         swp b
4477   237E D8            push b
4478   237F 07 D3 04      call strncmp
4479   2382 51 06 00      add sp, 6
4480   2385 C0 00 00      cmp b, 0
4481   2388 FD 71         seq ; !
4482   238A C0 00 00      cmp b, 0
4483   238D C6 96 23      je _if71_else
4484   2390             _if71_true:
4485   2390             ;; resign_commision(); 
4486   2390 07 11 56      call resign_commision
4487   2393 0A 0E 24      jmp _if71_exit
4488   2396             _if71_else:
4489   2396             ;; puts("Enter one of the following:\n"); 
4490   2396 26 66 66      mov b, _s50 ; "Enter one of the following:\n"
4491   2399 FD AB         swp b
4492   239B D8            push b
4493   239C 07 48 15      call puts
4494   239F 51 02 00      add sp, 2
4495   23A2             ;; puts("  nav - To Set Course"); 
4496   23A2 26 83 66      mov b, _s51 ; "  nav - To Set Course"
4497   23A5 FD AB         swp b
4498   23A7 D8            push b
4499   23A8 07 48 15      call puts
4500   23AB 51 02 00      add sp, 2
4501   23AE             ;; puts("  srs - Short Range Sensors"); 
4502   23AE 26 99 66      mov b, _s52 ; "  srs - Short Range Sensors"
4503   23B1 FD AB         swp b
4504   23B3 D8            push b
4505   23B4 07 48 15      call puts
4506   23B7 51 02 00      add sp, 2
4507   23BA             ;; puts("  lrs - Long Range Sensors"); 
4508   23BA 26 B5 66      mov b, _s53 ; "  lrs - Long Range Sensors"
4509   23BD FD AB         swp b
4510   23BF D8            push b
4511   23C0 07 48 15      call puts
4512   23C3 51 02 00      add sp, 2
4513   23C6             ;; puts("  pha - Phasers"); 
4514   23C6 26 D0 66      mov b, _s54 ; "  pha - Phasers"
4515   23C9 FD AB         swp b
4516   23CB D8            push b
4517   23CC 07 48 15      call puts
4518   23CF 51 02 00      add sp, 2
4519   23D2             ;; puts("  tor - Photon Torpedoes"); 
4520   23D2 26 E0 66      mov b, _s55 ; "  tor - Photon Torpedoes"
4521   23D5 FD AB         swp b
4522   23D7 D8            push b
4523   23D8 07 48 15      call puts
4524   23DB 51 02 00      add sp, 2
4525   23DE             ;; puts("  shi - Shield Control"); 
4526   23DE 26 F9 66      mov b, _s56 ; "  shi - Shield Control"
4527   23E1 FD AB         swp b
4528   23E3 D8            push b
4529   23E4 07 48 15      call puts
4530   23E7 51 02 00      add sp, 2
4531   23EA             ;; puts("  dam - Damage Control"); 
4532   23EA 26 10 67      mov b, _s57 ; "  dam - Damage Control"
4533   23ED FD AB         swp b
4534   23EF D8            push b
4535   23F0 07 48 15      call puts
4536   23F3 51 02 00      add sp, 2
4537   23F6             ;; puts("  com - Library Computer"); 
4538   23F6 26 27 67      mov b, _s58 ; "  com - Library Computer"
4539   23F9 FD AB         swp b
4540   23FB D8            push b
4541   23FC 07 48 15      call puts
4542   23FF 51 02 00      add sp, 2
4543   2402             ;; puts("  xxx - Resign Command\n"); 
4544   2402 26 40 67      mov b, _s59 ; "  xxx - Resign Command\n"
4545   2405 FD AB         swp b
4546   2407 D8            push b
4547   2408 07 48 15      call puts
4548   240B 51 02 00      add sp, 2
4549   240E             _if71_exit:
4550   240E             _if70_exit:
4551   240E             _if69_exit:
4552   240E             _if68_exit:
4553   240E             _if67_exit:
4554   240E             _if66_exit:
4555   240E             _if65_exit:
4556   240E             _if64_exit:
4557   240E             _if63_exit:
4558   240E 0A 90 21      jmp _while61_cond
4559   2411             _while61_exit:
4560   2411 F9            leave
4561   2412 09            ret
4562   2413             
4563   2413             initialize:
4564   2413 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4565   2416             ;; int i, j; 
4566   2416 52 02 00      sub sp, 2 ; i
4567   2419 52 02 00      sub sp, 2 ; j
4568   241C             ;; unsigned char                         yp, xp; 
4569   241C 52 01 00      sub sp, 1 ; yp
4570   241F 52 01 00      sub sp, 1 ; xp
4571   2422             ;; unsigned char                         r; 
4572   2422 52 01 00      sub sp, 1 ; r
4573   2425             ;; time_start = FROM_FIXED(stardate); 
4574   2425 3B 83 62      mov d, _time_start ; $time_start
4575   2428 DA            push d
4576   2429 3B 9F 62      mov d, _stardate ; $stardate
4577   242C 2A            mov b, [d]
4578   242D FD AB         swp b
4579   242F D8            push b
4580   2430 07 44 1D      call FROM_FIXED
4581   2433 51 02 00      add sp, 2
4582   2436 E7            pop d
4583   2437 FD 43         mov [d], b
4584   2439             ;; time_up = 25 + get_rand(10); 
4585   2439 3B 85 62      mov d, _time_up ; $time_up
4586   243C DA            push d
4587   243D 26 19 00      mov b, $19
4588   2440             ; START TERMS
4589   2440 D7            push a
4590   2441 11            mov a, b
4591   2442 26 0A 00      mov b, $a
4592   2445 FD AB         swp b
4593   2447 D8            push b
4594   2448 07 78 1D      call get_rand
4595   244B 51 02 00      add sp, 2
4596   244E 56            add b, a
4597   244F E4            pop a
4598   2450             ; END TERMS
4599   2450 E7            pop d
4600   2451 FD 43         mov [d], b
4601   2453             ;; docked = 0; 
4602   2453 3B C4 61      mov d, _docked ; $docked
4603   2456 DA            push d
4604   2457 26 00 00      mov b, $0
4605   245A E7            pop d
4606   245B FD 3E         mov [d], bl
4607   245D             ;; energy = energy0; 
4608   245D 3B C5 61      mov d, _energy ; $energy
4609   2460 DA            push d
4610   2461 3B C7 61      mov d, _energy0 ; $energy0
4611   2464 2A            mov b, [d]
4612   2465 E7            pop d
4613   2466 FD 43         mov [d], b
4614   2468             ;; torps = torps0; 
4615   2468 3B 7A 62      mov d, _torps ; $torps
4616   246B DA            push d
4617   246C 3B 7B 62      mov d, _torps0 ; $torps0
4618   246F 32            mov bl, [d]
4619   2470 A7 00         mov bh, 0
4620   2472 E7            pop d
4621   2473 FD 3E         mov [d], bl
4622   2475             ;; shield = 0; 
4623   2475 3B 80 62      mov d, _shield ; $shield
4624   2478 DA            push d
4625   2479 26 00 00      mov b, $0
4626   247C E7            pop d
4627   247D FD 43         mov [d], b
4628   247F             ;; quad_y = rand8(); 
4629   247F 3B 7C 62      mov d, _quad_y ; $quad_y
4630   2482 DA            push d
4631   2483 07 C7 1D      call rand8
4632   2486 E7            pop d
4633   2487 FD 43         mov [d], b
4634   2489             ;; quad_x = rand8(); 
4635   2489 3B 7E 62      mov d, _quad_x ; $quad_x
4636   248C DA            push d
4637   248D 07 C7 1D      call rand8
4638   2490 E7            pop d
4639   2491 FD 43         mov [d], b
4640   2493             ;; ship_y = TO_FIXED00(rand8()); 
4641   2493 3B 9B 62      mov d, _ship_y ; $ship_y
4642   2496 DA            push d
4643   2497 07 C7 1D      call rand8
4644   249A FD AB         swp b
4645   249C D8            push b
4646   249D 07 55 1D      call TO_FIXED00
4647   24A0 51 02 00      add sp, 2
4648   24A3 E7            pop d
4649   24A4 FD 43         mov [d], b
4650   24A6             ;; ship_x = TO_FIXED00(rand8()); 
4651   24A6 3B 9D 62      mov d, _ship_x ; $ship_x
4652   24A9 DA            push d
4653   24AA 07 C7 1D      call rand8
4654   24AD FD AB         swp b
4655   24AF D8            push b
4656   24B0 07 55 1D      call TO_FIXED00
4657   24B3 51 02 00      add sp, 2
4658   24B6 E7            pop d
4659   24B7 FD 43         mov [d], b
4660   24B9             ;; for (i = 1; i <= 8; i++) 
4661   24B9             _for72_init:
4662   24B9 FA FF FF      lea d, [bp + -1] ; $i
4663   24BC DA            push d
4664   24BD 26 01 00      mov b, $1
4665   24C0 E7            pop d
4666   24C1 FD 43         mov [d], b
4667   24C3             _for72_cond:
4668   24C3 FA FF FF      lea d, [bp + -1] ; $i
4669   24C6 2A            mov b, [d]
4670   24C7             ; START RELATIONAL
4671   24C7 D7            push a
4672   24C8 11            mov a, b
4673   24C9 26 08 00      mov b, $8
4674   24CC B0            cmp a, b
4675   24CD FD 73         slt ; <= (signed)
4676   24CF E4            pop a
4677   24D0             ; END RELATIONAL
4678   24D0 C0 00 00      cmp b, 0
4679   24D3 C6 FC 24      je _for72_exit
4680   24D6             _for72_block:
4681   24D6             ;; damage[i] = 0; 
4682   24D6 3B 87 62      mov d, _damage_data ; $damage
4683   24D9 D7            push a
4684   24DA DA            push d
4685   24DB FA FF FF      lea d, [bp + -1] ; $i
4686   24DE 2A            mov b, [d]
4687   24DF E7            pop d
4688   24E0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4689   24E4 E4            pop a
4690   24E5 DA            push d
4691   24E6 26 00 00      mov b, $0
4692   24E9 E7            pop d
4693   24EA FD 43         mov [d], b
4694   24EC             _for72_update:
4695   24EC FA FF FF      lea d, [bp + -1] ; $i
4696   24EF 2A            mov b, [d]
4697   24F0 D8            push b
4698   24F1 FD 77         inc b
4699   24F3 FA FF FF      lea d, [bp + -1] ; $i
4700   24F6 FD 43         mov [d], b
4701   24F8 E5            pop b
4702   24F9 0A C3 24      jmp _for72_cond
4703   24FC             _for72_exit:
4704   24FC             ;; for (i = 1; i <= 8; i++) { 
4705   24FC             _for73_init:
4706   24FC FA FF FF      lea d, [bp + -1] ; $i
4707   24FF DA            push d
4708   2500 26 01 00      mov b, $1
4709   2503 E7            pop d
4710   2504 FD 43         mov [d], b
4711   2506             _for73_cond:
4712   2506 FA FF FF      lea d, [bp + -1] ; $i
4713   2509 2A            mov b, [d]
4714   250A             ; START RELATIONAL
4715   250A D7            push a
4716   250B 11            mov a, b
4717   250C 26 08 00      mov b, $8
4718   250F B0            cmp a, b
4719   2510 FD 73         slt ; <= (signed)
4720   2512 E4            pop a
4721   2513             ; END RELATIONAL
4722   2513 C0 00 00      cmp b, 0
4723   2516 C6 7F 26      je _for73_exit
4724   2519             _for73_block:
4725   2519             ;; for (j = 1; j <= 8; j++) { 
4726   2519             _for74_init:
4727   2519 FA FD FF      lea d, [bp + -3] ; $j
4728   251C DA            push d
4729   251D 26 01 00      mov b, $1
4730   2520 E7            pop d
4731   2521 FD 43         mov [d], b
4732   2523             _for74_cond:
4733   2523 FA FD FF      lea d, [bp + -3] ; $j
4734   2526 2A            mov b, [d]
4735   2527             ; START RELATIONAL
4736   2527 D7            push a
4737   2528 11            mov a, b
4738   2529 26 08 00      mov b, $8
4739   252C B0            cmp a, b
4740   252D FD 73         slt ; <= (signed)
4741   252F E4            pop a
4742   2530             ; END RELATIONAL
4743   2530 C0 00 00      cmp b, 0
4744   2533 C6 6F 26      je _for74_exit
4745   2536             _for74_block:
4746   2536             ;; r = get_rand(100); 
4747   2536 FA FA FF      lea d, [bp + -6] ; $r
4748   2539 DA            push d
4749   253A 26 64 00      mov b, $64
4750   253D FD AB         swp b
4751   253F D8            push b
4752   2540 07 78 1D      call get_rand
4753   2543 51 02 00      add sp, 2
4754   2546 E7            pop d
4755   2547 FD 3E         mov [d], bl
4756   2549             ;; klingons = 0; 
4757   2549 3B 77 62      mov d, _klingons ; $klingons
4758   254C DA            push d
4759   254D 26 00 00      mov b, $0
4760   2550 E7            pop d
4761   2551 FD 3E         mov [d], bl
4762   2553             ;; if (r > 98) 
4763   2553             _if75_cond:
4764   2553 FA FA FF      lea d, [bp + -6] ; $r
4765   2556 32            mov bl, [d]
4766   2557 A7 00         mov bh, 0
4767   2559             ; START RELATIONAL
4768   2559 D7            push a
4769   255A 11            mov a, b
4770   255B 26 62 00      mov b, $62
4771   255E B0            cmp a, b
4772   255F FD 81         sgu ; > (unsigned)
4773   2561 E4            pop a
4774   2562             ; END RELATIONAL
4775   2562 C0 00 00      cmp b, 0
4776   2565 C6 75 25      je _if75_else
4777   2568             _if75_true:
4778   2568             ;; klingons = 3; 
4779   2568 3B 77 62      mov d, _klingons ; $klingons
4780   256B DA            push d
4781   256C 26 03 00      mov b, $3
4782   256F E7            pop d
4783   2570 FD 3E         mov [d], bl
4784   2572 0A B9 25      jmp _if75_exit
4785   2575             _if75_else:
4786   2575             ;; if (r > 95) 
4787   2575             _if76_cond:
4788   2575 FA FA FF      lea d, [bp + -6] ; $r
4789   2578 32            mov bl, [d]
4790   2579 A7 00         mov bh, 0
4791   257B             ; START RELATIONAL
4792   257B D7            push a
4793   257C 11            mov a, b
4794   257D 26 5F 00      mov b, $5f
4795   2580 B0            cmp a, b
4796   2581 FD 81         sgu ; > (unsigned)
4797   2583 E4            pop a
4798   2584             ; END RELATIONAL
4799   2584 C0 00 00      cmp b, 0
4800   2587 C6 97 25      je _if76_else
4801   258A             _if76_true:
4802   258A             ;; klingons = 2; 
4803   258A 3B 77 62      mov d, _klingons ; $klingons
4804   258D DA            push d
4805   258E 26 02 00      mov b, $2
4806   2591 E7            pop d
4807   2592 FD 3E         mov [d], bl
4808   2594 0A B9 25      jmp _if76_exit
4809   2597             _if76_else:
4810   2597             ;; if (r > 80) 
4811   2597             _if77_cond:
4812   2597 FA FA FF      lea d, [bp + -6] ; $r
4813   259A 32            mov bl, [d]
4814   259B A7 00         mov bh, 0
4815   259D             ; START RELATIONAL
4816   259D D7            push a
4817   259E 11            mov a, b
4818   259F 26 50 00      mov b, $50
4819   25A2 B0            cmp a, b
4820   25A3 FD 81         sgu ; > (unsigned)
4821   25A5 E4            pop a
4822   25A6             ; END RELATIONAL
4823   25A6 C0 00 00      cmp b, 0
4824   25A9 C6 B9 25      je _if77_exit
4825   25AC             _if77_true:
4826   25AC             ;; klingons = 1; 
4827   25AC 3B 77 62      mov d, _klingons ; $klingons
4828   25AF DA            push d
4829   25B0 26 01 00      mov b, $1
4830   25B3 E7            pop d
4831   25B4 FD 3E         mov [d], bl
4832   25B6 0A B9 25      jmp _if77_exit
4833   25B9             _if77_exit:
4834   25B9             _if76_exit:
4835   25B9             _if75_exit:
4836   25B9             ;; klingons_left = klingons_left + klingons; 
4837   25B9 3B 79 62      mov d, _klingons_left ; $klingons_left
4838   25BC DA            push d
4839   25BD 3B 79 62      mov d, _klingons_left ; $klingons_left
4840   25C0 32            mov bl, [d]
4841   25C1 A7 00         mov bh, 0
4842   25C3             ; START TERMS
4843   25C3 D7            push a
4844   25C4 11            mov a, b
4845   25C5 3B 77 62      mov d, _klingons ; $klingons
4846   25C8 32            mov bl, [d]
4847   25C9 A7 00         mov bh, 0
4848   25CB 56            add b, a
4849   25CC E4            pop a
4850   25CD             ; END TERMS
4851   25CD E7            pop d
4852   25CE FD 3E         mov [d], bl
4853   25D0             ;; starbases = 0; 
4854   25D0 3B A1 61      mov d, _starbases ; $starbases
4855   25D3 DA            push d
4856   25D4 26 00 00      mov b, $0
4857   25D7 E7            pop d
4858   25D8 FD 3E         mov [d], bl
4859   25DA             ;; if (get_rand(100) > 96) 
4860   25DA             _if78_cond:
4861   25DA 26 64 00      mov b, $64
4862   25DD FD AB         swp b
4863   25DF D8            push b
4864   25E0 07 78 1D      call get_rand
4865   25E3 51 02 00      add sp, 2
4866   25E6             ; START RELATIONAL
4867   25E6 D7            push a
4868   25E7 11            mov a, b
4869   25E8 26 60 00      mov b, $60
4870   25EB B0            cmp a, b
4871   25EC FD 7F         sgt ; >
4872   25EE E4            pop a
4873   25EF             ; END RELATIONAL
4874   25EF C0 00 00      cmp b, 0
4875   25F2 C6 02 26      je _if78_exit
4876   25F5             _if78_true:
4877   25F5             ;; starbases = 1; 
4878   25F5 3B A1 61      mov d, _starbases ; $starbases
4879   25F8 DA            push d
4880   25F9 26 01 00      mov b, $1
4881   25FC E7            pop d
4882   25FD FD 3E         mov [d], bl
4883   25FF 0A 02 26      jmp _if78_exit
4884   2602             _if78_exit:
4885   2602             ;; starbases_left = starbases_left + starbases; 
4886   2602 3B A4 61      mov d, _starbases_left ; $starbases_left
4887   2605 DA            push d
4888   2606 3B A4 61      mov d, _starbases_left ; $starbases_left
4889   2609 32            mov bl, [d]
4890   260A A7 00         mov bh, 0
4891   260C             ; START TERMS
4892   260C D7            push a
4893   260D 11            mov a, b
4894   260E 3B A1 61      mov d, _starbases ; $starbases
4895   2611 32            mov bl, [d]
4896   2612 A7 00         mov bh, 0
4897   2614 56            add b, a
4898   2615 E4            pop a
4899   2616             ; END TERMS
4900   2616 E7            pop d
4901   2617 FD 3E         mov [d], bl
4902   2619             ;; map[i][j] = (klingons << 8) + (starbases << 4) + rand8(); 
4903   2619 3B C9 61      mov d, _map_data ; $map
4904   261C D7            push a
4905   261D DA            push d
4906   261E FA FF FF      lea d, [bp + -1] ; $i
4907   2621 2A            mov b, [d]
4908   2622 E7            pop d
4909   2623 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
4910   2627 DA            push d
4911   2628 FA FD FF      lea d, [bp + -3] ; $j
4912   262B 2A            mov b, [d]
4913   262C E7            pop d
4914   262D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4915   2631 E4            pop a
4916   2632 DA            push d
4917   2633 3B 77 62      mov d, _klingons ; $klingons
4918   2636 32            mov bl, [d]
4919   2637 A7 00         mov bh, 0
4920   2639             ; START SHIFT
4921   2639 D7            push a
4922   263A 11            mov a, b
4923   263B 26 08 00      mov b, $8
4924   263E FD 39         mov c, b
4925   2640 9D            shl a, cl
4926   2641 27            mov b, a
4927   2642 E4            pop a
4928   2643             ; END SHIFT
4929   2643             ; START TERMS
4930   2643 D7            push a
4931   2644 11            mov a, b
4932   2645 3B A1 61      mov d, _starbases ; $starbases
4933   2648 32            mov bl, [d]
4934   2649 A7 00         mov bh, 0
4935   264B             ; START SHIFT
4936   264B D7            push a
4937   264C 11            mov a, b
4938   264D 26 04 00      mov b, $4
4939   2650 FD 39         mov c, b
4940   2652 9D            shl a, cl
4941   2653 27            mov b, a
4942   2654 E4            pop a
4943   2655             ; END SHIFT
4944   2655 56            add b, a
4945   2656 11            mov a, b
4946   2657 07 C7 1D      call rand8
4947   265A 56            add b, a
4948   265B E4            pop a
4949   265C             ; END TERMS
4950   265C E7            pop d
4951   265D FD 43         mov [d], b
4952   265F             _for74_update:
4953   265F FA FD FF      lea d, [bp + -3] ; $j
4954   2662 2A            mov b, [d]
4955   2663 D8            push b
4956   2664 FD 77         inc b
4957   2666 FA FD FF      lea d, [bp + -3] ; $j
4958   2669 FD 43         mov [d], b
4959   266B E5            pop b
4960   266C 0A 23 25      jmp _for74_cond
4961   266F             _for74_exit:
4962   266F             _for73_update:
4963   266F FA FF FF      lea d, [bp + -1] ; $i
4964   2672 2A            mov b, [d]
4965   2673 D8            push b
4966   2674 FD 77         inc b
4967   2676 FA FF FF      lea d, [bp + -1] ; $i
4968   2679 FD 43         mov [d], b
4969   267B E5            pop b
4970   267C 0A 06 25      jmp _for73_cond
4971   267F             _for73_exit:
4972   267F             ;; if (klingons_left > time_up) 
4973   267F             _if79_cond:
4974   267F 3B 79 62      mov d, _klingons_left ; $klingons_left
4975   2682 32            mov bl, [d]
4976   2683 A7 00         mov bh, 0
4977   2685             ; START RELATIONAL
4978   2685 D7            push a
4979   2686 11            mov a, b
4980   2687 3B 85 62      mov d, _time_up ; $time_up
4981   268A 2A            mov b, [d]
4982   268B B0            cmp a, b
4983   268C FD 81         sgu ; > (unsigned)
4984   268E E4            pop a
4985   268F             ; END RELATIONAL
4986   268F C0 00 00      cmp b, 0
4987   2692 C6 AC 26      je _if79_exit
4988   2695             _if79_true:
4989   2695             ;; time_up = klingons_left + 1; 
4990   2695 3B 85 62      mov d, _time_up ; $time_up
4991   2698 DA            push d
4992   2699 3B 79 62      mov d, _klingons_left ; $klingons_left
4993   269C 32            mov bl, [d]
4994   269D A7 00         mov bh, 0
4995   269F             ; START TERMS
4996   269F D7            push a
4997   26A0 11            mov a, b
4998   26A1 26 01 00      mov b, $1
4999   26A4 56            add b, a
5000   26A5 E4            pop a
5001   26A6             ; END TERMS
5002   26A6 E7            pop d
5003   26A7 FD 43         mov [d], b
5004   26A9 0A AC 26      jmp _if79_exit
5005   26AC             _if79_exit:
5006   26AC             ;; if (starbases_left == 0) { 
5007   26AC             _if80_cond:
5008   26AC 3B A4 61      mov d, _starbases_left ; $starbases_left
5009   26AF 32            mov bl, [d]
5010   26B0 A7 00         mov bh, 0
5011   26B2             ; START RELATIONAL
5012   26B2 D7            push a
5013   26B3 11            mov a, b
5014   26B4 26 00 00      mov b, $0
5015   26B7 B0            cmp a, b
5016   26B8 FD 71         seq ; ==
5017   26BA E4            pop a
5018   26BB             ; END RELATIONAL
5019   26BB C0 00 00      cmp b, 0
5020   26BE C6 C6 27      je _if80_exit
5021   26C1             _if80_true:
5022   26C1             ;; yp = rand8(); 
5023   26C1 FA FC FF      lea d, [bp + -4] ; $yp
5024   26C4 DA            push d
5025   26C5 07 C7 1D      call rand8
5026   26C8 E7            pop d
5027   26C9 FD 3E         mov [d], bl
5028   26CB             ;; xp = rand8(); 
5029   26CB FA FB FF      lea d, [bp + -5] ; $xp
5030   26CE DA            push d
5031   26CF 07 C7 1D      call rand8
5032   26D2 E7            pop d
5033   26D3 FD 3E         mov [d], bl
5034   26D5             ;; if (map[yp][xp] < 0x200) { 
5035   26D5             _if81_cond:
5036   26D5 3B C9 61      mov d, _map_data ; $map
5037   26D8 D7            push a
5038   26D9 DA            push d
5039   26DA FA FC FF      lea d, [bp + -4] ; $yp
5040   26DD 32            mov bl, [d]
5041   26DE A7 00         mov bh, 0
5042   26E0 E7            pop d
5043   26E1 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5044   26E5 DA            push d
5045   26E6 FA FB FF      lea d, [bp + -5] ; $xp
5046   26E9 32            mov bl, [d]
5047   26EA A7 00         mov bh, 0
5048   26EC E7            pop d
5049   26ED FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5050   26F1 E4            pop a
5051   26F2 2A            mov b, [d]
5052   26F3             ; START RELATIONAL
5053   26F3 D7            push a
5054   26F4 11            mov a, b
5055   26F5 26 00 02      mov b, $200
5056   26F8 B0            cmp a, b
5057   26F9 FD 75         slu ; < (unsigned)
5058   26FB E4            pop a
5059   26FC             ; END RELATIONAL
5060   26FC C0 00 00      cmp b, 0
5061   26FF C6 64 27      je _if81_exit
5062   2702             _if81_true:
5063   2702             ;; map[yp][xp] = map[yp][xp] + (1 << 8); 
5064   2702 3B C9 61      mov d, _map_data ; $map
5065   2705 D7            push a
5066   2706 DA            push d
5067   2707 FA FC FF      lea d, [bp + -4] ; $yp
5068   270A 32            mov bl, [d]
5069   270B A7 00         mov bh, 0
5070   270D E7            pop d
5071   270E FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5072   2712 DA            push d
5073   2713 FA FB FF      lea d, [bp + -5] ; $xp
5074   2716 32            mov bl, [d]
5075   2717 A7 00         mov bh, 0
5076   2719 E7            pop d
5077   271A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5078   271E E4            pop a
5079   271F DA            push d
5080   2720 3B C9 61      mov d, _map_data ; $map
5081   2723 D7            push a
5082   2724 DA            push d
5083   2725 FA FC FF      lea d, [bp + -4] ; $yp
5084   2728 32            mov bl, [d]
5085   2729 A7 00         mov bh, 0
5086   272B E7            pop d
5087   272C FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5088   2730 DA            push d
5089   2731 FA FB FF      lea d, [bp + -5] ; $xp
5090   2734 32            mov bl, [d]
5091   2735 A7 00         mov bh, 0
5092   2737 E7            pop d
5093   2738 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5094   273C E4            pop a
5095   273D 2A            mov b, [d]
5096   273E             ; START TERMS
5097   273E D7            push a
5098   273F 11            mov a, b
5099   2740 26 01 00      mov b, $1
5100   2743             ; START SHIFT
5101   2743 D7            push a
5102   2744 11            mov a, b
5103   2745 26 08 00      mov b, $8
5104   2748 FD 39         mov c, b
5105   274A 9D            shl a, cl
5106   274B 27            mov b, a
5107   274C E4            pop a
5108   274D             ; END SHIFT
5109   274D 56            add b, a
5110   274E E4            pop a
5111   274F             ; END TERMS
5112   274F E7            pop d
5113   2750 FD 43         mov [d], b
5114   2752             ;; klingons_left++; 
5115   2752 3B 79 62      mov d, _klingons_left ; $klingons_left
5116   2755 32            mov bl, [d]
5117   2756 A7 00         mov bh, 0
5118   2758 D8            push b
5119   2759 FD 77         inc b
5120   275B 3B 79 62      mov d, _klingons_left ; $klingons_left
5121   275E FD 43         mov [d], b
5122   2760 E5            pop b
5123   2761 0A 64 27      jmp _if81_exit
5124   2764             _if81_exit:
5125   2764             ;; map[yp][xp] = map[yp][xp] + (1 << 4); 
5126   2764 3B C9 61      mov d, _map_data ; $map
5127   2767 D7            push a
5128   2768 DA            push d
5129   2769 FA FC FF      lea d, [bp + -4] ; $yp
5130   276C 32            mov bl, [d]
5131   276D A7 00         mov bh, 0
5132   276F E7            pop d
5133   2770 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5134   2774 DA            push d
5135   2775 FA FB FF      lea d, [bp + -5] ; $xp
5136   2778 32            mov bl, [d]
5137   2779 A7 00         mov bh, 0
5138   277B E7            pop d
5139   277C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5140   2780 E4            pop a
5141   2781 DA            push d
5142   2782 3B C9 61      mov d, _map_data ; $map
5143   2785 D7            push a
5144   2786 DA            push d
5145   2787 FA FC FF      lea d, [bp + -4] ; $yp
5146   278A 32            mov bl, [d]
5147   278B A7 00         mov bh, 0
5148   278D E7            pop d
5149   278E FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5150   2792 DA            push d
5151   2793 FA FB FF      lea d, [bp + -5] ; $xp
5152   2796 32            mov bl, [d]
5153   2797 A7 00         mov bh, 0
5154   2799 E7            pop d
5155   279A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5156   279E E4            pop a
5157   279F 2A            mov b, [d]
5158   27A0             ; START TERMS
5159   27A0 D7            push a
5160   27A1 11            mov a, b
5161   27A2 26 01 00      mov b, $1
5162   27A5             ; START SHIFT
5163   27A5 D7            push a
5164   27A6 11            mov a, b
5165   27A7 26 04 00      mov b, $4
5166   27AA FD 39         mov c, b
5167   27AC 9D            shl a, cl
5168   27AD 27            mov b, a
5169   27AE E4            pop a
5170   27AF             ; END SHIFT
5171   27AF 56            add b, a
5172   27B0 E4            pop a
5173   27B1             ; END TERMS
5174   27B1 E7            pop d
5175   27B2 FD 43         mov [d], b
5176   27B4             ;; starbases_left++; 
5177   27B4 3B A4 61      mov d, _starbases_left ; $starbases_left
5178   27B7 32            mov bl, [d]
5179   27B8 A7 00         mov bh, 0
5180   27BA D8            push b
5181   27BB FD 77         inc b
5182   27BD 3B A4 61      mov d, _starbases_left ; $starbases_left
5183   27C0 FD 43         mov [d], b
5184   27C2 E5            pop b
5185   27C3 0A C6 27      jmp _if80_exit
5186   27C6             _if80_exit:
5187   27C6             ;; total_klingons = klingons_left; 
5188   27C6 3B 78 62      mov d, _total_klingons ; $total_klingons
5189   27C9 DA            push d
5190   27CA 3B 79 62      mov d, _klingons_left ; $klingons_left
5191   27CD 32            mov bl, [d]
5192   27CE A7 00         mov bh, 0
5193   27D0 E7            pop d
5194   27D1 FD 3E         mov [d], bl
5195   27D3             ;; if (starbases_left != 1) { 
5196   27D3             _if82_cond:
5197   27D3 3B A4 61      mov d, _starbases_left ; $starbases_left
5198   27D6 32            mov bl, [d]
5199   27D7 A7 00         mov bh, 0
5200   27D9             ; START RELATIONAL
5201   27D9 D7            push a
5202   27DA 11            mov a, b
5203   27DB 26 01 00      mov b, $1
5204   27DE B0            cmp a, b
5205   27DF FD 72         sneq ; !=
5206   27E1 E4            pop a
5207   27E2             ; END RELATIONAL
5208   27E2 C0 00 00      cmp b, 0
5209   27E5 C6 11 28      je _if82_exit
5210   27E8             _if82_true:
5211   27E8             ;; strcpy(plural_2, "s"); 
5212   27E8 26 58 67      mov b, _s60 ; "s"
5213   27EB FD AB         swp b
5214   27ED D8            push b
5215   27EE 3B 98 63      mov d, _plural_2_data ; $plural_2
5216   27F1 2D            mov b, d
5217   27F2 FD AB         swp b
5218   27F4 D8            push b
5219   27F5 07 14 04      call strcpy
5220   27F8 51 04 00      add sp, 4
5221   27FB             ;; strcpy(plural, "are"); 
5222   27FB 26 E5 65      mov b, _s33 ; "are"
5223   27FE FD AB         swp b
5224   2800 D8            push b
5225   2801 3B 9A 63      mov d, _plural_data ; $plural
5226   2804 2D            mov b, d
5227   2805 FD AB         swp b
5228   2807 D8            push b
5229   2808 07 14 04      call strcpy
5230   280B 51 04 00      add sp, 4
5231   280E 0A 11 28      jmp _if82_exit
5232   2811             _if82_exit:
5233   2811             ;; printf("Your orders are as follows:\nDestroy the %d Klingon warships which have",klingons_left); 
5234   2811 3B 79 62      mov d, _klingons_left ; $klingons_left
5235   2814 32            mov bl, [d]
5236   2815 A7 00         mov bh, 0
5237   2817 DD            push bl
5238   2818 26 5A 67      mov b, _s61 ; "Your orders are as follows:\nDestroy the %d Klingon warships which have"
5239   281B FD AB         swp b
5240   281D D8            push b
5241   281E 07 B8 07      call printf
5242   2821 51 03 00      add sp, 3
5243   2824             ;; printf("invaded\n the galaxy before they can attack Federation Headquarters\n"); 
5244   2824 26 A1 67      mov b, _s62 ; "invaded\n the galaxy before they can attack Federation Headquarters\n"
5245   2827 FD AB         swp b
5246   2829 D8            push b
5247   282A 07 B8 07      call printf
5248   282D 51 02 00      add sp, 2
5249   2830             ;; printf(" on stardate %u. This gives you %d days. There %s\n %d starbase%s in the galaxy",  
5250   2830 3B 98 63      mov d, _plural_2_data ; $plural_2
5251   2833 2D            mov b, d
5252   2834 FD AB         swp b
5253   2836 D8            push b
5254   2837 3B A4 61      mov d, _starbases_left ; $starbases_left
5255   283A 32            mov bl, [d]
5256   283B A7 00         mov bh, 0
5257   283D DD            push bl
5258   283E 3B 9A 63      mov d, _plural_data ; $plural
5259   2841 2D            mov b, d
5260   2842 FD AB         swp b
5261   2844 D8            push b
5262   2845 3B 85 62      mov d, _time_up ; $time_up
5263   2848 2A            mov b, [d]
5264   2849 FD AB         swp b
5265   284B D8            push b
5266   284C 3B 83 62      mov d, _time_start ; $time_start
5267   284F 2A            mov b, [d]
5268   2850             ; START TERMS
5269   2850 D7            push a
5270   2851 11            mov a, b
5271   2852 3B 85 62      mov d, _time_up ; $time_up
5272   2855 2A            mov b, [d]
5273   2856 56            add b, a
5274   2857 E4            pop a
5275   2858             ; END TERMS
5276   2858 FD AB         swp b
5277   285A D8            push b
5278   285B 26 E5 67      mov b, _s63 ; " on stardate %u. This gives you %d days. There %s\n %d starbase%s in the galaxy"
5279   285E FD AB         swp b
5280   2860 D8            push b
5281   2861 07 B8 07      call printf
5282   2864 51 0B 00      add sp, 11
5283   2867             ;; printf(" for resupplying your ship.\n\n Hit any key to accept command. "); 
5284   2867 26 34 68      mov b, _s64 ; " for resupplying your ship.\n\n Hit any key to accept command. "
5285   286A FD AB         swp b
5286   286C D8            push b
5287   286D 07 B8 07      call printf
5288   2870 51 02 00      add sp, 2
5289   2873             ;; getchar(); 
5290   2873 07 1F 15      call getchar
5291   2876 F9            leave
5292   2877 09            ret
5293   2878             
5294   2878             place_ship:
5295   2878 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5296   287B             ;; quad[FROM_FIXED00(ship_y) - 1][FROM_FIXED00(ship_x) - 1] =  		4     ; 
5297   287B 3B A1 62      mov d, _quad_data ; $quad
5298   287E D7            push a
5299   287F DA            push d
5300   2880 3B 9B 62      mov d, _ship_y ; $ship_y
5301   2883 2A            mov b, [d]
5302   2884 FD AB         swp b
5303   2886 D8            push b
5304   2887 07 67 1D      call FROM_FIXED00
5305   288A 51 02 00      add sp, 2
5306   288D             ; START TERMS
5307   288D D7            push a
5308   288E 11            mov a, b
5309   288F 26 01 00      mov b, $1
5310   2892 60            sub a, b
5311   2893 27            mov b, a
5312   2894 E4            pop a
5313   2895             ; END TERMS
5314   2895 E7            pop d
5315   2896 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
5316   289A DA            push d
5317   289B 3B 9D 62      mov d, _ship_x ; $ship_x
5318   289E 2A            mov b, [d]
5319   289F FD AB         swp b
5320   28A1 D8            push b
5321   28A2 07 67 1D      call FROM_FIXED00
5322   28A5 51 02 00      add sp, 2
5323   28A8             ; START TERMS
5324   28A8 D7            push a
5325   28A9 11            mov a, b
5326   28AA 26 01 00      mov b, $1
5327   28AD 60            sub a, b
5328   28AE 27            mov b, a
5329   28AF E4            pop a
5330   28B0             ; END TERMS
5331   28B0 E7            pop d
5332   28B1 5A            add d, b
5333   28B2 E4            pop a
5334   28B3 DA            push d
5335   28B4 26 04 00      mov b, $4
5336   28B7 E7            pop d
5337   28B8 FD 3E         mov [d], bl
5338   28BA F9            leave
5339   28BB 09            ret
5340   28BC             
5341   28BC             new_quadrant:
5342   28BC F8 00 00      enter 0 ; (push bp; mov bp, sp)
5343   28BF             ;; int i; 
5344   28BF 52 02 00      sub sp, 2 ; i
5345   28C2             ;; unsigned int        tmp; 
5346   28C2 52 02 00      sub sp, 2 ; tmp
5347   28C5             ;; struct klingon *k; 
5348   28C5 52 02 00      sub sp, 2 ; k
5349   28C8             ;; k = &kdata; 
5350   28C8 FA FB FF      lea d, [bp + -5] ; $k
5351   28CB DA            push d
5352   28CC 3B 6B 62      mov d, _kdata_data ; $kdata
5353   28CF 2D            mov b, d
5354   28D0 E7            pop d
5355   28D1 FD 43         mov [d], b
5356   28D3             ;; klingons = 0; 
5357   28D3 3B 77 62      mov d, _klingons ; $klingons
5358   28D6 DA            push d
5359   28D7 26 00 00      mov b, $0
5360   28DA E7            pop d
5361   28DB FD 3E         mov [d], bl
5362   28DD             ;; starbases = 0; 
5363   28DD 3B A1 61      mov d, _starbases ; $starbases
5364   28E0 DA            push d
5365   28E1 26 00 00      mov b, $0
5366   28E4 E7            pop d
5367   28E5 FD 3E         mov [d], bl
5368   28E7             ;; stars = 0; 
5369   28E7 3B 82 62      mov d, _stars ; $stars
5370   28EA DA            push d
5371   28EB 26 00 00      mov b, $0
5372   28EE E7            pop d
5373   28EF FD 3E         mov [d], bl
5374   28F1             ;; d4 = get_rand(50) - 1; 
5375   28F1 3B 99 62      mov d, _d4 ; $d4
5376   28F4 DA            push d
5377   28F5 26 32 00      mov b, $32
5378   28F8 FD AB         swp b
5379   28FA D8            push b
5380   28FB 07 78 1D      call get_rand
5381   28FE 51 02 00      add sp, 2
5382   2901             ; START TERMS
5383   2901 D7            push a
5384   2902 11            mov a, b
5385   2903 26 01 00      mov b, $1
5386   2906 60            sub a, b
5387   2907 27            mov b, a
5388   2908 E4            pop a
5389   2909             ; END TERMS
5390   2909 E7            pop d
5391   290A FD 43         mov [d], b
5392   290C             ;; map[quad_y][quad_x] = map[quad_y][quad_x] |   0x1000		/* Set if this sector was mapped */          ; 
5393   290C 3B C9 61      mov d, _map_data ; $map
5394   290F D7            push a
5395   2910 DA            push d
5396   2911 3B 7C 62      mov d, _quad_y ; $quad_y
5397   2914 2A            mov b, [d]
5398   2915 E7            pop d
5399   2916 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5400   291A DA            push d
5401   291B 3B 7E 62      mov d, _quad_x ; $quad_x
5402   291E 2A            mov b, [d]
5403   291F E7            pop d
5404   2920 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5405   2924 E4            pop a
5406   2925 DA            push d
5407   2926 3B C9 61      mov d, _map_data ; $map
5408   2929 D7            push a
5409   292A DA            push d
5410   292B 3B 7C 62      mov d, _quad_y ; $quad_y
5411   292E 2A            mov b, [d]
5412   292F E7            pop d
5413   2930 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5414   2934 DA            push d
5415   2935 3B 7E 62      mov d, _quad_x ; $quad_x
5416   2938 2A            mov b, [d]
5417   2939 E7            pop d
5418   293A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5419   293E E4            pop a
5420   293F 2A            mov b, [d]
5421   2940 D7            push a
5422   2941 11            mov a, b
5423   2942 26 00 10      mov b, $1000
5424   2945 FD 70         or b, a ; |
5425   2947 E4            pop a
5426   2948 E7            pop d
5427   2949 FD 43         mov [d], b
5428   294B             ;; if (quad_y >= 1 && quad_y <= 8 && quad_x >= 1 && quad_x <= 8) { 
5429   294B             _if83_cond:
5430   294B 3B 7C 62      mov d, _quad_y ; $quad_y
5431   294E 2A            mov b, [d]
5432   294F             ; START RELATIONAL
5433   294F D7            push a
5434   2950 11            mov a, b
5435   2951 26 01 00      mov b, $1
5436   2954 B0            cmp a, b
5437   2955 FD 80         sge ; >=
5438   2957 E4            pop a
5439   2958             ; END RELATIONAL
5440   2958 D7            push a
5441   2959 11            mov a, b
5442   295A 3B 7C 62      mov d, _quad_y ; $quad_y
5443   295D 2A            mov b, [d]
5444   295E             ; START RELATIONAL
5445   295E D7            push a
5446   295F 11            mov a, b
5447   2960 26 08 00      mov b, $8
5448   2963 B0            cmp a, b
5449   2964 FD 73         slt ; <= (signed)
5450   2966 E4            pop a
5451   2967             ; END RELATIONAL
5452   2967 FD A7         sand a, b
5453   2969 11            mov a, b
5454   296A 3B 7E 62      mov d, _quad_x ; $quad_x
5455   296D 2A            mov b, [d]
5456   296E             ; START RELATIONAL
5457   296E D7            push a
5458   296F 11            mov a, b
5459   2970 26 01 00      mov b, $1
5460   2973 B0            cmp a, b
5461   2974 FD 80         sge ; >=
5462   2976 E4            pop a
5463   2977             ; END RELATIONAL
5464   2977 FD A7         sand a, b
5465   2979 11            mov a, b
5466   297A 3B 7E 62      mov d, _quad_x ; $quad_x
5467   297D 2A            mov b, [d]
5468   297E             ; START RELATIONAL
5469   297E D7            push a
5470   297F 11            mov a, b
5471   2980 26 08 00      mov b, $8
5472   2983 B0            cmp a, b
5473   2984 FD 73         slt ; <= (signed)
5474   2986 E4            pop a
5475   2987             ; END RELATIONAL
5476   2987 FD A7         sand a, b
5477   2989 E4            pop a
5478   298A C0 00 00      cmp b, 0
5479   298D C6 F9 29      je _if83_exit
5480   2990             _if83_true:
5481   2990             ;; quadrant_name(0, quad_y, quad_x); 
5482   2990 3B 7E 62      mov d, _quad_x ; $quad_x
5483   2993 2A            mov b, [d]
5484   2994 DD            push bl
5485   2995 3B 7C 62      mov d, _quad_y ; $quad_y
5486   2998 2A            mov b, [d]
5487   2999 DD            push bl
5488   299A 26 00 00      mov b, $0
5489   299D DD            push bl
5490   299E 07 85 5E      call quadrant_name
5491   29A1 51 03 00      add sp, 3
5492   29A4             ;; if (TO_FIXED(time_start) != stardate) 
5493   29A4             _if84_cond:
5494   29A4 3B 83 62      mov d, _time_start ; $time_start
5495   29A7 2A            mov b, [d]
5496   29A8 FD AB         swp b
5497   29AA D8            push b
5498   29AB 07 32 1D      call TO_FIXED
5499   29AE 51 02 00      add sp, 2
5500   29B1             ; START RELATIONAL
5501   29B1 D7            push a
5502   29B2 11            mov a, b
5503   29B3 3B 9F 62      mov d, _stardate ; $stardate
5504   29B6 2A            mov b, [d]
5505   29B7 B0            cmp a, b
5506   29B8 FD 72         sneq ; !=
5507   29BA E4            pop a
5508   29BB             ; END RELATIONAL
5509   29BB C0 00 00      cmp b, 0
5510   29BE C6 D7 29      je _if84_else
5511   29C1             _if84_true:
5512   29C1             ;; printf("Now entering %s quadrant...\n\n", quadname); 
5513   29C1 3B E1 62      mov d, _quadname_data ; $quadname
5514   29C4 2D            mov b, d
5515   29C5 FD AB         swp b
5516   29C7 D8            push b
5517   29C8 26 72 68      mov b, _s65 ; "Now entering %s quadrant...\n\n"
5518   29CB FD AB         swp b
5519   29CD D8            push b
5520   29CE 07 B8 07      call printf
5521   29D1 51 04 00      add sp, 4
5522   29D4 0A F6 29      jmp _if84_exit
5523   29D7             _if84_else:
5524   29D7             ;; puts("\nYour mission begins with your starship located"); 
5525   29D7 26 90 68      mov b, _s66 ; "\nYour mission begins with your starship located"
5526   29DA FD AB         swp b
5527   29DC D8            push b
5528   29DD 07 48 15      call puts
5529   29E0 51 02 00      add sp, 2
5530   29E3             ;; printf("in the galactic quadrant %s.\n\n", quadname); 
5531   29E3 3B E1 62      mov d, _quadname_data ; $quadname
5532   29E6 2D            mov b, d
5533   29E7 FD AB         swp b
5534   29E9 D8            push b
5535   29EA 26 C0 68      mov b, _s67 ; "in the galactic quadrant %s.\n\n"
5536   29ED FD AB         swp b
5537   29EF D8            push b
5538   29F0 07 B8 07      call printf
5539   29F3 51 04 00      add sp, 4
5540   29F6             _if84_exit:
5541   29F6 0A F9 29      jmp _if83_exit
5542   29F9             _if83_exit:
5543   29F9             ;; tmp = map[quad_y][quad_x]; 
5544   29F9 FA FD FF      lea d, [bp + -3] ; $tmp
5545   29FC DA            push d
5546   29FD 3B C9 61      mov d, _map_data ; $map
5547   2A00 D7            push a
5548   2A01 DA            push d
5549   2A02 3B 7C 62      mov d, _quad_y ; $quad_y
5550   2A05 2A            mov b, [d]
5551   2A06 E7            pop d
5552   2A07 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5553   2A0B DA            push d
5554   2A0C 3B 7E 62      mov d, _quad_x ; $quad_x
5555   2A0F 2A            mov b, [d]
5556   2A10 E7            pop d
5557   2A11 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5558   2A15 E4            pop a
5559   2A16 2A            mov b, [d]
5560   2A17 E7            pop d
5561   2A18 FD 43         mov [d], b
5562   2A1A             ;; klingons = (tmp >> 8) & 0x0F; 
5563   2A1A 3B 77 62      mov d, _klingons ; $klingons
5564   2A1D DA            push d
5565   2A1E FA FD FF      lea d, [bp + -3] ; $tmp
5566   2A21 2A            mov b, [d]
5567   2A22             ; START SHIFT
5568   2A22 D7            push a
5569   2A23 11            mov a, b
5570   2A24 26 08 00      mov b, $8
5571   2A27 FD 39         mov c, b
5572   2A29 A1            shr a, cl
5573   2A2A 27            mov b, a
5574   2A2B E4            pop a
5575   2A2C             ; END SHIFT
5576   2A2C D7            push a
5577   2A2D 11            mov a, b
5578   2A2E 26 0F 00      mov b, $f
5579   2A31 FD 92         and b, a ; &
5580   2A33 E4            pop a
5581   2A34 E7            pop d
5582   2A35 FD 3E         mov [d], bl
5583   2A37             ;; starbases = (tmp >> 4) & 0x0F; 
5584   2A37 3B A1 61      mov d, _starbases ; $starbases
5585   2A3A DA            push d
5586   2A3B FA FD FF      lea d, [bp + -3] ; $tmp
5587   2A3E 2A            mov b, [d]
5588   2A3F             ; START SHIFT
5589   2A3F D7            push a
5590   2A40 11            mov a, b
5591   2A41 26 04 00      mov b, $4
5592   2A44 FD 39         mov c, b
5593   2A46 A1            shr a, cl
5594   2A47 27            mov b, a
5595   2A48 E4            pop a
5596   2A49             ; END SHIFT
5597   2A49 D7            push a
5598   2A4A 11            mov a, b
5599   2A4B 26 0F 00      mov b, $f
5600   2A4E FD 92         and b, a ; &
5601   2A50 E4            pop a
5602   2A51 E7            pop d
5603   2A52 FD 3E         mov [d], bl
5604   2A54             ;; stars = tmp & 0x0F; 
5605   2A54 3B 82 62      mov d, _stars ; $stars
5606   2A57 DA            push d
5607   2A58 FA FD FF      lea d, [bp + -3] ; $tmp
5608   2A5B 2A            mov b, [d]
5609   2A5C D7            push a
5610   2A5D 11            mov a, b
5611   2A5E 26 0F 00      mov b, $f
5612   2A61 FD 92         and b, a ; &
5613   2A63 E4            pop a
5614   2A64 E7            pop d
5615   2A65 FD 3E         mov [d], bl
5616   2A67             ;; if (klingons > 0) { 
5617   2A67             _if85_cond:
5618   2A67 3B 77 62      mov d, _klingons ; $klingons
5619   2A6A 32            mov bl, [d]
5620   2A6B A7 00         mov bh, 0
5621   2A6D             ; START RELATIONAL
5622   2A6D D7            push a
5623   2A6E 11            mov a, b
5624   2A6F 26 00 00      mov b, $0
5625   2A72 B0            cmp a, b
5626   2A73 FD 81         sgu ; > (unsigned)
5627   2A75 E4            pop a
5628   2A76             ; END RELATIONAL
5629   2A76 C0 00 00      cmp b, 0
5630   2A79 C6 AD 2A      je _if85_exit
5631   2A7C             _if85_true:
5632   2A7C             ;; printf("Combat Area  Condition Red\n"); 
5633   2A7C 26 DF 68      mov b, _s68 ; "Combat Area  Condition Red\n"
5634   2A7F FD AB         swp b
5635   2A81 D8            push b
5636   2A82 07 B8 07      call printf
5637   2A85 51 02 00      add sp, 2
5638   2A88             ;; if (shield < 200) 
5639   2A88             _if86_cond:
5640   2A88 3B 80 62      mov d, _shield ; $shield
5641   2A8B 2A            mov b, [d]
5642   2A8C             ; START RELATIONAL
5643   2A8C D7            push a
5644   2A8D 11            mov a, b
5645   2A8E 26 C8 00      mov b, $c8
5646   2A91 B0            cmp a, b
5647   2A92 FD 73         slt ; < (signed)
5648   2A94 E4            pop a
5649   2A95             ; END RELATIONAL
5650   2A95 C0 00 00      cmp b, 0
5651   2A98 C6 AA 2A      je _if86_exit
5652   2A9B             _if86_true:
5653   2A9B             ;; printf("Shields Dangerously Low\n"); 
5654   2A9B 26 FB 68      mov b, _s69 ; "Shields Dangerously Low\n"
5655   2A9E FD AB         swp b
5656   2AA0 D8            push b
5657   2AA1 07 B8 07      call printf
5658   2AA4 51 02 00      add sp, 2
5659   2AA7 0A AA 2A      jmp _if86_exit
5660   2AAA             _if86_exit:
5661   2AAA 0A AD 2A      jmp _if85_exit
5662   2AAD             _if85_exit:
5663   2AAD             ;; for (i = 1; i <= 3; i++) { 
5664   2AAD             _for87_init:
5665   2AAD FA FF FF      lea d, [bp + -1] ; $i
5666   2AB0 DA            push d
5667   2AB1 26 01 00      mov b, $1
5668   2AB4 E7            pop d
5669   2AB5 FD 43         mov [d], b
5670   2AB7             _for87_cond:
5671   2AB7 FA FF FF      lea d, [bp + -1] ; $i
5672   2ABA 2A            mov b, [d]
5673   2ABB             ; START RELATIONAL
5674   2ABB D7            push a
5675   2ABC 11            mov a, b
5676   2ABD 26 03 00      mov b, $3
5677   2AC0 B0            cmp a, b
5678   2AC1 FD 73         slt ; <= (signed)
5679   2AC3 E4            pop a
5680   2AC4             ; END RELATIONAL
5681   2AC4 C0 00 00      cmp b, 0
5682   2AC7 C6 16 2B      je _for87_exit
5683   2ACA             _for87_block:
5684   2ACA             ;; k->y = 0; 
5685   2ACA FA FB FF      lea d, [bp + -5] ; $k
5686   2ACD FD 2A         mov d, [d]
5687   2ACF 58 00 00      add d, 0
5688   2AD2 DA            push d
5689   2AD3 26 00 00      mov b, $0
5690   2AD6 E7            pop d
5691   2AD7 FD 3E         mov [d], bl
5692   2AD9             ;; k->x = 0; 
5693   2AD9 FA FB FF      lea d, [bp + -5] ; $k
5694   2ADC FD 2A         mov d, [d]
5695   2ADE 58 01 00      add d, 1
5696   2AE1 DA            push d
5697   2AE2 26 00 00      mov b, $0
5698   2AE5 E7            pop d
5699   2AE6 FD 3E         mov [d], bl
5700   2AE8             ;; k->energy = 0; 
5701   2AE8 FA FB FF      lea d, [bp + -5] ; $k
5702   2AEB FD 2A         mov d, [d]
5703   2AED 58 02 00      add d, 2
5704   2AF0 DA            push d
5705   2AF1 26 00 00      mov b, $0
5706   2AF4 E7            pop d
5707   2AF5 FD 43         mov [d], b
5708   2AF7             ;; k++; 
5709   2AF7 FA FB FF      lea d, [bp + -5] ; $k
5710   2AFA 2A            mov b, [d]
5711   2AFB D8            push b
5712   2AFC FD 77         inc b
5713   2AFE FD 77         inc b
5714   2B00 FA FB FF      lea d, [bp + -5] ; $k
5715   2B03 FD 43         mov [d], b
5716   2B05 E5            pop b
5717   2B06             _for87_update:
5718   2B06 FA FF FF      lea d, [bp + -1] ; $i
5719   2B09 2A            mov b, [d]
5720   2B0A D8            push b
5721   2B0B FD 77         inc b
5722   2B0D FA FF FF      lea d, [bp + -1] ; $i
5723   2B10 FD 43         mov [d], b
5724   2B12 E5            pop b
5725   2B13 0A B7 2A      jmp _for87_cond
5726   2B16             _for87_exit:
5727   2B16             ;; memset(quad,  		0      , 64); 
5728   2B16 26 40 00      mov b, $40
5729   2B19 FD AB         swp b
5730   2B1B D8            push b
5731   2B1C 26 00 00      mov b, $0
5732   2B1F DD            push bl
5733   2B20 3B A1 62      mov d, _quad_data ; $quad
5734   2B23 2D            mov b, d
5735   2B24 FD AB         swp b
5736   2B26 D8            push b
5737   2B27 07 DE 05      call memset
5738   2B2A 51 05 00      add sp, 5
5739   2B2D             ;; place_ship(); 
5740   2B2D 07 78 28      call place_ship
5741   2B30             ;; if (klingons > 0) { 
5742   2B30             _if88_cond:
5743   2B30 3B 77 62      mov d, _klingons ; $klingons
5744   2B33 32            mov bl, [d]
5745   2B34 A7 00         mov bh, 0
5746   2B36             ; START RELATIONAL
5747   2B36 D7            push a
5748   2B37 11            mov a, b
5749   2B38 26 00 00      mov b, $0
5750   2B3B B0            cmp a, b
5751   2B3C FD 81         sgu ; > (unsigned)
5752   2B3E E4            pop a
5753   2B3F             ; END RELATIONAL
5754   2B3F C0 00 00      cmp b, 0
5755   2B42 C6 D7 2B      je _if88_exit
5756   2B45             _if88_true:
5757   2B45             ;; k = kdata; 
5758   2B45 FA FB FF      lea d, [bp + -5] ; $k
5759   2B48 DA            push d
5760   2B49 3B 6B 62      mov d, _kdata_data ; $kdata
5761   2B4C 2D            mov b, d
5762   2B4D E7            pop d
5763   2B4E FD 43         mov [d], b
5764   2B50             ;; for (i = 0; i < klingons; i++) { 
5765   2B50             _for89_init:
5766   2B50 FA FF FF      lea d, [bp + -1] ; $i
5767   2B53 DA            push d
5768   2B54 26 00 00      mov b, $0
5769   2B57 E7            pop d
5770   2B58 FD 43         mov [d], b
5771   2B5A             _for89_cond:
5772   2B5A FA FF FF      lea d, [bp + -1] ; $i
5773   2B5D 2A            mov b, [d]
5774   2B5E             ; START RELATIONAL
5775   2B5E D7            push a
5776   2B5F 11            mov a, b
5777   2B60 3B 77 62      mov d, _klingons ; $klingons
5778   2B63 32            mov bl, [d]
5779   2B64 A7 00         mov bh, 0
5780   2B66 B0            cmp a, b
5781   2B67 FD 73         slt ; < (signed)
5782   2B69 E4            pop a
5783   2B6A             ; END RELATIONAL
5784   2B6A C0 00 00      cmp b, 0
5785   2B6D C6 D4 2B      je _for89_exit
5786   2B70             _for89_block:
5787   2B70             ;; find_set_empty_place( 	3        , k->y, k->x); 
5788   2B70 FA FB FF      lea d, [bp + -5] ; $k
5789   2B73 FD 2A         mov d, [d]
5790   2B75 58 01 00      add d, 1
5791   2B78 32            mov bl, [d]
5792   2B79 A7 00         mov bh, 0
5793   2B7B FD AB         swp b
5794   2B7D D8            push b
5795   2B7E FA FB FF      lea d, [bp + -5] ; $k
5796   2B81 FD 2A         mov d, [d]
5797   2B83 58 00 00      add d, 0
5798   2B86 32            mov bl, [d]
5799   2B87 A7 00         mov bh, 0
5800   2B89 FD AB         swp b
5801   2B8B D8            push b
5802   2B8C 26 03 00      mov b, $3
5803   2B8F DD            push bl
5804   2B90 07 7D 5D      call find_set_empty_place
5805   2B93 51 05 00      add sp, 5
5806   2B96             ;; k->energy = 100 + get_rand(200); 
5807   2B96 FA FB FF      lea d, [bp + -5] ; $k
5808   2B99 FD 2A         mov d, [d]
5809   2B9B 58 02 00      add d, 2
5810   2B9E DA            push d
5811   2B9F 26 64 00      mov b, $64
5812   2BA2             ; START TERMS
5813   2BA2 D7            push a
5814   2BA3 11            mov a, b
5815   2BA4 26 C8 00      mov b, $c8
5816   2BA7 FD AB         swp b
5817   2BA9 D8            push b
5818   2BAA 07 78 1D      call get_rand
5819   2BAD 51 02 00      add sp, 2
5820   2BB0 56            add b, a
5821   2BB1 E4            pop a
5822   2BB2             ; END TERMS
5823   2BB2 E7            pop d
5824   2BB3 FD 43         mov [d], b
5825   2BB5             ;; k++; 
5826   2BB5 FA FB FF      lea d, [bp + -5] ; $k
5827   2BB8 2A            mov b, [d]
5828   2BB9 D8            push b
5829   2BBA FD 77         inc b
5830   2BBC FD 77         inc b
5831   2BBE FA FB FF      lea d, [bp + -5] ; $k
5832   2BC1 FD 43         mov [d], b
5833   2BC3 E5            pop b
5834   2BC4             _for89_update:
5835   2BC4 FA FF FF      lea d, [bp + -1] ; $i
5836   2BC7 2A            mov b, [d]
5837   2BC8 D8            push b
5838   2BC9 FD 77         inc b
5839   2BCB FA FF FF      lea d, [bp + -1] ; $i
5840   2BCE FD 43         mov [d], b
5841   2BD0 E5            pop b
5842   2BD1 0A 5A 2B      jmp _for89_cond
5843   2BD4             _for89_exit:
5844   2BD4 0A D7 2B      jmp _if88_exit
5845   2BD7             _if88_exit:
5846   2BD7             ;; if (starbases > 0) 
5847   2BD7             _if90_cond:
5848   2BD7 3B A1 61      mov d, _starbases ; $starbases
5849   2BDA 32            mov bl, [d]
5850   2BDB A7 00         mov bh, 0
5851   2BDD             ; START RELATIONAL
5852   2BDD D7            push a
5853   2BDE 11            mov a, b
5854   2BDF 26 00 00      mov b, $0
5855   2BE2 B0            cmp a, b
5856   2BE3 FD 7F         sgt ; >
5857   2BE5 E4            pop a
5858   2BE6             ; END RELATIONAL
5859   2BE6 C0 00 00      cmp b, 0
5860   2BE9 C6 07 2C      je _if90_exit
5861   2BEC             _if90_true:
5862   2BEC             ;; find_set_empty_place( 		2     , &base_y, &base_x); 
5863   2BEC 3B A3 61      mov d, _base_x ; $base_x
5864   2BEF 2D            mov b, d
5865   2BF0 FD AB         swp b
5866   2BF2 D8            push b
5867   2BF3 3B A2 61      mov d, _base_y ; $base_y
5868   2BF6 2D            mov b, d
5869   2BF7 FD AB         swp b
5870   2BF9 D8            push b
5871   2BFA 26 02 00      mov b, $2
5872   2BFD DD            push bl
5873   2BFE 07 7D 5D      call find_set_empty_place
5874   2C01 51 05 00      add sp, 5
5875   2C04 0A 07 2C      jmp _if90_exit
5876   2C07             _if90_exit:
5877   2C07             ;; for (i = 1; i <= stars; i++) 
5878   2C07             _for91_init:
5879   2C07 FA FF FF      lea d, [bp + -1] ; $i
5880   2C0A DA            push d
5881   2C0B 26 01 00      mov b, $1
5882   2C0E E7            pop d
5883   2C0F FD 43         mov [d], b
5884   2C11             _for91_cond:
5885   2C11 FA FF FF      lea d, [bp + -1] ; $i
5886   2C14 2A            mov b, [d]
5887   2C15             ; START RELATIONAL
5888   2C15 D7            push a
5889   2C16 11            mov a, b
5890   2C17 3B 82 62      mov d, _stars ; $stars
5891   2C1A 32            mov bl, [d]
5892   2C1B A7 00         mov bh, 0
5893   2C1D B0            cmp a, b
5894   2C1E FD 73         slt ; <= (signed)
5895   2C20 E4            pop a
5896   2C21             ; END RELATIONAL
5897   2C21 C0 00 00      cmp b, 0
5898   2C24 C6 4D 2C      je _for91_exit
5899   2C27             _for91_block:
5900   2C27             ;; find_set_empty_place( 		1     ,   0   ,   0   ); 
5901   2C27 26 00 00      mov b, $0
5902   2C2A FD AB         swp b
5903   2C2C D8            push b
5904   2C2D 26 00 00      mov b, $0
5905   2C30 FD AB         swp b
5906   2C32 D8            push b
5907   2C33 26 01 00      mov b, $1
5908   2C36 DD            push bl
5909   2C37 07 7D 5D      call find_set_empty_place
5910   2C3A 51 05 00      add sp, 5
5911   2C3D             _for91_update:
5912   2C3D FA FF FF      lea d, [bp + -1] ; $i
5913   2C40 2A            mov b, [d]
5914   2C41 D8            push b
5915   2C42 FD 77         inc b
5916   2C44 FA FF FF      lea d, [bp + -1] ; $i
5917   2C47 FD 43         mov [d], b
5918   2C49 E5            pop b
5919   2C4A 0A 11 2C      jmp _for91_cond
5920   2C4D             _for91_exit:
5921   2C4D F9            leave
5922   2C4E 09            ret
5923   2C4F             
5924   2C4F             course_control:
5925   2C4F F8 00 00      enter 0 ; (push bp; mov bp, sp)
5926   2C52             ;; int i; 
5927   2C52 52 02 00      sub sp, 2 ; i
5928   2C55             ;; int       c1; 
5929   2C55 52 02 00      sub sp, 2 ; c1
5930   2C58             ;; int       warp; 
5931   2C58 52 02 00      sub sp, 2 ; warp
5932   2C5B             ;; unsigned int        n; 
5933   2C5B 52 02 00      sub sp, 2 ; n
5934   2C5E             ;; int c2, c3, c4; 
5935   2C5E 52 02 00      sub sp, 2 ; c2
5936   2C61 52 02 00      sub sp, 2 ; c3
5937   2C64 52 02 00      sub sp, 2 ; c4
5938   2C67             ;; int       z1, z2; 
5939   2C67 52 02 00      sub sp, 2 ; z1
5940   2C6A 52 02 00      sub sp, 2 ; z2
5941   2C6D             ;; int       x1, x2; 
5942   2C6D 52 02 00      sub sp, 2 ; x1
5943   2C70 52 02 00      sub sp, 2 ; x2
5944   2C73             ;; int       x, y; 
5945   2C73 52 02 00      sub sp, 2 ; x
5946   2C76 52 02 00      sub sp, 2 ; y
5947   2C79             ;; unsigned char                         outside = 0;		/* Outside galaxy flag */ 
5948   2C79 52 01 00      sub sp, 1 ; outside
5949   2C7C             ; --- START LOCAL VAR INITIALIZATION
5950   2C7C FA E6 FF      lea d, [bp + -26] ; $outside
5951   2C7F DA            push d
5952   2C80 26 00 00      mov b, $0
5953   2C83 E7            pop d
5954   2C84 FD 43         mov [d], b
5955   2C86             ; --- END LOCAL VAR INITIALIZATION
5956   2C86             ;; unsigned char                         quad_y_old; 
5957   2C86 52 01 00      sub sp, 1 ; quad_y_old
5958   2C89             ;; unsigned char                         quad_x_old; 
5959   2C89 52 01 00      sub sp, 1 ; quad_x_old
5960   2C8C             ;; puts("Course (0-9): " ); 
5961   2C8C 26 14 69      mov b, _s70 ; "Course (0-9): "
5962   2C8F FD AB         swp b
5963   2C91 D8            push b
5964   2C92 07 48 15      call puts
5965   2C95 51 02 00      add sp, 2
5966   2C98             ;; c1 = input_f00(); 
5967   2C98 FA FD FF      lea d, [bp + -3] ; $c1
5968   2C9B DA            push d
5969   2C9C 07 9E 1E      call input_f00
5970   2C9F E7            pop d
5971   2CA0 FD 43         mov [d], b
5972   2CA2             ;; if (c1 == 900) 
5973   2CA2             _if92_cond:
5974   2CA2 FA FD FF      lea d, [bp + -3] ; $c1
5975   2CA5 2A            mov b, [d]
5976   2CA6             ; START RELATIONAL
5977   2CA6 D7            push a
5978   2CA7 11            mov a, b
5979   2CA8 26 84 03      mov b, $384
5980   2CAB B0            cmp a, b
5981   2CAC FD 71         seq ; ==
5982   2CAE E4            pop a
5983   2CAF             ; END RELATIONAL
5984   2CAF C0 00 00      cmp b, 0
5985   2CB2 C6 C2 2C      je _if92_exit
5986   2CB5             _if92_true:
5987   2CB5             ;; c1 = 100; 
5988   2CB5 FA FD FF      lea d, [bp + -3] ; $c1
5989   2CB8 DA            push d
5990   2CB9 26 64 00      mov b, $64
5991   2CBC E7            pop d
5992   2CBD FD 43         mov [d], b
5993   2CBF 0A C2 2C      jmp _if92_exit
5994   2CC2             _if92_exit:
5995   2CC2             ;; if (c1 < 0 || c1 > 900) { 
5996   2CC2             _if93_cond:
5997   2CC2 FA FD FF      lea d, [bp + -3] ; $c1
5998   2CC5 2A            mov b, [d]
5999   2CC6             ; START RELATIONAL
6000   2CC6 D7            push a
6001   2CC7 11            mov a, b
6002   2CC8 26 00 00      mov b, $0
6003   2CCB B0            cmp a, b
6004   2CCC FD 73         slt ; < (signed)
6005   2CCE E4            pop a
6006   2CCF             ; END RELATIONAL
6007   2CCF D7            push a
6008   2CD0 11            mov a, b
6009   2CD1 FA FD FF      lea d, [bp + -3] ; $c1
6010   2CD4 2A            mov b, [d]
6011   2CD5             ; START RELATIONAL
6012   2CD5 D7            push a
6013   2CD6 11            mov a, b
6014   2CD7 26 84 03      mov b, $384
6015   2CDA B0            cmp a, b
6016   2CDB FD 7F         sgt ; >
6017   2CDD E4            pop a
6018   2CDE             ; END RELATIONAL
6019   2CDE FD A8         sor a, b ; ||
6020   2CE0 E4            pop a
6021   2CE1 C0 00 00      cmp b, 0
6022   2CE4 C6 FF 2C      je _if93_exit
6023   2CE7             _if93_true:
6024   2CE7             ;; printf("Lt. Sulu%s", inc_1); 
6025   2CE7 3B 15 63      mov d, _inc_1 ; $inc_1
6026   2CEA 2A            mov b, [d]
6027   2CEB FD AB         swp b
6028   2CED D8            push b
6029   2CEE 26 23 69      mov b, _s71 ; "Lt. Sulu%s"
6030   2CF1 FD AB         swp b
6031   2CF3 D8            push b
6032   2CF4 07 B8 07      call printf
6033   2CF7 51 04 00      add sp, 4
6034   2CFA             ;; return; 
6035   2CFA F9            leave
6036   2CFB 09            ret
6037   2CFC 0A FF 2C      jmp _if93_exit
6038   2CFF             _if93_exit:
6039   2CFF             ;; if (damage[1] < 0) 
6040   2CFF             _if94_cond:
6041   2CFF 3B 87 62      mov d, _damage_data ; $damage
6042   2D02 D7            push a
6043   2D03 DA            push d
6044   2D04 26 01 00      mov b, $1
6045   2D07 E7            pop d
6046   2D08 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6047   2D0C E4            pop a
6048   2D0D 2A            mov b, [d]
6049   2D0E             ; START RELATIONAL
6050   2D0E D7            push a
6051   2D0F 11            mov a, b
6052   2D10 26 00 00      mov b, $0
6053   2D13 B0            cmp a, b
6054   2D14 FD 73         slt ; < (signed)
6055   2D16 E4            pop a
6056   2D17             ; END RELATIONAL
6057   2D17 C0 00 00      cmp b, 0
6058   2D1A C6 33 2D      je _if94_exit
6059   2D1D             _if94_true:
6060   2D1D             ;; strcpy(warpmax, "0.2"); 
6061   2D1D 26 2E 69      mov b, _s72 ; "0.2"
6062   2D20 FD AB         swp b
6063   2D22 D8            push b
6064   2D23 3B 9E 63      mov d, _warpmax_data ; $warpmax
6065   2D26 2D            mov b, d
6066   2D27 FD AB         swp b
6067   2D29 D8            push b
6068   2D2A 07 14 04      call strcpy
6069   2D2D 51 04 00      add sp, 4
6070   2D30 0A 33 2D      jmp _if94_exit
6071   2D33             _if94_exit:
6072   2D33             ;; printf("Warp Factor (0-%s): ", warpmax); 
6073   2D33 3B 9E 63      mov d, _warpmax_data ; $warpmax
6074   2D36 2D            mov b, d
6075   2D37 FD AB         swp b
6076   2D39 D8            push b
6077   2D3A 26 32 69      mov b, _s73 ; "Warp Factor (0-%s): "
6078   2D3D FD AB         swp b
6079   2D3F D8            push b
6080   2D40 07 B8 07      call printf
6081   2D43 51 04 00      add sp, 4
6082   2D46             ;; warp = input_f00(); 
6083   2D46 FA FB FF      lea d, [bp + -5] ; $warp
6084   2D49 DA            push d
6085   2D4A 07 9E 1E      call input_f00
6086   2D4D E7            pop d
6087   2D4E FD 43         mov [d], b
6088   2D50             ;; if (damage[1] < 0 && warp > 20) { 
6089   2D50             _if95_cond:
6090   2D50 3B 87 62      mov d, _damage_data ; $damage
6091   2D53 D7            push a
6092   2D54 DA            push d
6093   2D55 26 01 00      mov b, $1
6094   2D58 E7            pop d
6095   2D59 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6096   2D5D E4            pop a
6097   2D5E 2A            mov b, [d]
6098   2D5F             ; START RELATIONAL
6099   2D5F D7            push a
6100   2D60 11            mov a, b
6101   2D61 26 00 00      mov b, $0
6102   2D64 B0            cmp a, b
6103   2D65 FD 73         slt ; < (signed)
6104   2D67 E4            pop a
6105   2D68             ; END RELATIONAL
6106   2D68 D7            push a
6107   2D69 11            mov a, b
6108   2D6A FA FB FF      lea d, [bp + -5] ; $warp
6109   2D6D 2A            mov b, [d]
6110   2D6E             ; START RELATIONAL
6111   2D6E D7            push a
6112   2D6F 11            mov a, b
6113   2D70 26 14 00      mov b, $14
6114   2D73 B0            cmp a, b
6115   2D74 FD 7F         sgt ; >
6116   2D76 E4            pop a
6117   2D77             ; END RELATIONAL
6118   2D77 FD A7         sand a, b
6119   2D79 E4            pop a
6120   2D7A C0 00 00      cmp b, 0
6121   2D7D C6 91 2D      je _if95_exit
6122   2D80             _if95_true:
6123   2D80             ;; printf("Warp Engines are damaged. Maximum speed = Warp 0.2.\n\n"); 
6124   2D80 26 47 69      mov b, _s74 ; "Warp Engines are damaged. Maximum speed = Warp 0.2.\n\n"
6125   2D83 FD AB         swp b
6126   2D85 D8            push b
6127   2D86 07 B8 07      call printf
6128   2D89 51 02 00      add sp, 2
6129   2D8C             ;; return; 
6130   2D8C F9            leave
6131   2D8D 09            ret
6132   2D8E 0A 91 2D      jmp _if95_exit
6133   2D91             _if95_exit:
6134   2D91             ;; if (warp <= 0) 
6135   2D91             _if96_cond:
6136   2D91 FA FB FF      lea d, [bp + -5] ; $warp
6137   2D94 2A            mov b, [d]
6138   2D95             ; START RELATIONAL
6139   2D95 D7            push a
6140   2D96 11            mov a, b
6141   2D97 26 00 00      mov b, $0
6142   2D9A B0            cmp a, b
6143   2D9B FD 73         slt ; <= (signed)
6144   2D9D E4            pop a
6145   2D9E             ; END RELATIONAL
6146   2D9E C0 00 00      cmp b, 0
6147   2DA1 C6 A9 2D      je _if96_exit
6148   2DA4             _if96_true:
6149   2DA4             ;; return; 
6150   2DA4 F9            leave
6151   2DA5 09            ret
6152   2DA6 0A A9 2D      jmp _if96_exit
6153   2DA9             _if96_exit:
6154   2DA9             ;; if (warp > 800) { 
6155   2DA9             _if97_cond:
6156   2DA9 FA FB FF      lea d, [bp + -5] ; $warp
6157   2DAC 2A            mov b, [d]
6158   2DAD             ; START RELATIONAL
6159   2DAD D7            push a
6160   2DAE 11            mov a, b
6161   2DAF 26 20 03      mov b, $320
6162   2DB2 B0            cmp a, b
6163   2DB3 FD 7F         sgt ; >
6164   2DB5 E4            pop a
6165   2DB6             ; END RELATIONAL
6166   2DB6 C0 00 00      cmp b, 0
6167   2DB9 C6 DD 2D      je _if97_exit
6168   2DBC             _if97_true:
6169   2DBC             ;; printf("Chief Engineer Scott reports:\n  The engines wont take warp %s!\n\n", print100(warp)); 
6170   2DBC FA FB FF      lea d, [bp + -5] ; $warp
6171   2DBF 2A            mov b, [d]
6172   2DC0 FD AB         swp b
6173   2DC2 D8            push b
6174   2DC3 07 5E 20      call print100
6175   2DC6 51 02 00      add sp, 2
6176   2DC9 FD AB         swp b
6177   2DCB D8            push b
6178   2DCC 26 7D 69      mov b, _s75 ; "Chief Engineer Scott reports:\n  The engines wont take warp %s!\n\n"
6179   2DCF FD AB         swp b
6180   2DD1 D8            push b
6181   2DD2 07 B8 07      call printf
6182   2DD5 51 04 00      add sp, 4
6183   2DD8             ;; return; 
6184   2DD8 F9            leave
6185   2DD9 09            ret
6186   2DDA 0A DD 2D      jmp _if97_exit
6187   2DDD             _if97_exit:
6188   2DDD             ;; n = warp * 8; 
6189   2DDD FA F9 FF      lea d, [bp + -7] ; $n
6190   2DE0 DA            push d
6191   2DE1 FA FB FF      lea d, [bp + -5] ; $warp
6192   2DE4 2A            mov b, [d]
6193   2DE5             ; START FACTORS
6194   2DE5 D7            push a
6195   2DE6 11            mov a, b
6196   2DE7 26 08 00      mov b, $8
6197   2DEA AC            mul a, b ; *
6198   2DEB 11            mov a, b
6199   2DEC 27            mov b, a
6200   2DED E4            pop a
6201   2DEE             ; END FACTORS
6202   2DEE E7            pop d
6203   2DEF FD 43         mov [d], b
6204   2DF1             ;; n = cint100(n);	 
6205   2DF1 FA F9 FF      lea d, [bp + -7] ; $n
6206   2DF4 DA            push d
6207   2DF5 FA F9 FF      lea d, [bp + -7] ; $n
6208   2DF8 2A            mov b, [d]
6209   2DF9 FD AB         swp b
6210   2DFB D8            push b
6211   2DFC 07 84 61      call cint100
6212   2DFF 51 02 00      add sp, 2
6213   2E02 E7            pop d
6214   2E03 FD 43         mov [d], b
6215   2E05             ;; if (energy - n < 0) { 
6216   2E05             _if98_cond:
6217   2E05 3B C5 61      mov d, _energy ; $energy
6218   2E08 2A            mov b, [d]
6219   2E09             ; START TERMS
6220   2E09 D7            push a
6221   2E0A 11            mov a, b
6222   2E0B FA F9 FF      lea d, [bp + -7] ; $n
6223   2E0E 2A            mov b, [d]
6224   2E0F 60            sub a, b
6225   2E10 27            mov b, a
6226   2E11 E4            pop a
6227   2E12             ; END TERMS
6228   2E12             ; START RELATIONAL
6229   2E12 D7            push a
6230   2E13 11            mov a, b
6231   2E14 26 00 00      mov b, $0
6232   2E17 B0            cmp a, b
6233   2E18 FD 75         slu ; < (unsigned)
6234   2E1A E4            pop a
6235   2E1B             ; END RELATIONAL
6236   2E1B C0 00 00      cmp b, 0
6237   2E1E C6 89 2E      je _if98_exit
6238   2E21             _if98_true:
6239   2E21             ;; printf("Engineering reports:\n  Insufficient energy available for maneuvering at warp %s!\n\n", print100(warp)); 
6240   2E21 FA FB FF      lea d, [bp + -5] ; $warp
6241   2E24 2A            mov b, [d]
6242   2E25 FD AB         swp b
6243   2E27 D8            push b
6244   2E28 07 5E 20      call print100
6245   2E2B 51 02 00      add sp, 2
6246   2E2E FD AB         swp b
6247   2E30 D8            push b
6248   2E31 26 BE 69      mov b, _s76 ; "Engineering reports:\n  Insufficient energy available for maneuvering at warp %s!\n\n"
6249   2E34 FD AB         swp b
6250   2E36 D8            push b
6251   2E37 07 B8 07      call printf
6252   2E3A 51 04 00      add sp, 4
6253   2E3D             ;; if (shield >= n && damage[7] >= 0) { 
6254   2E3D             _if99_cond:
6255   2E3D 3B 80 62      mov d, _shield ; $shield
6256   2E40 2A            mov b, [d]
6257   2E41             ; START RELATIONAL
6258   2E41 D7            push a
6259   2E42 11            mov a, b
6260   2E43 FA F9 FF      lea d, [bp + -7] ; $n
6261   2E46 2A            mov b, [d]
6262   2E47 B0            cmp a, b
6263   2E48 FD 80         sge ; >=
6264   2E4A E4            pop a
6265   2E4B             ; END RELATIONAL
6266   2E4B D7            push a
6267   2E4C 11            mov a, b
6268   2E4D 3B 87 62      mov d, _damage_data ; $damage
6269   2E50 D7            push a
6270   2E51 DA            push d
6271   2E52 26 07 00      mov b, $7
6272   2E55 E7            pop d
6273   2E56 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6274   2E5A E4            pop a
6275   2E5B 2A            mov b, [d]
6276   2E5C             ; START RELATIONAL
6277   2E5C D7            push a
6278   2E5D 11            mov a, b
6279   2E5E 26 00 00      mov b, $0
6280   2E61 B0            cmp a, b
6281   2E62 FD 80         sge ; >=
6282   2E64 E4            pop a
6283   2E65             ; END RELATIONAL
6284   2E65 FD A7         sand a, b
6285   2E67 E4            pop a
6286   2E68 C0 00 00      cmp b, 0
6287   2E6B C6 84 2E      je _if99_exit
6288   2E6E             _if99_true:
6289   2E6E             ;; printf("Deflector Control Room acknowledges:\n  %d units of energy presently deployed to shields.\n", shield); 
6290   2E6E 3B 80 62      mov d, _shield ; $shield
6291   2E71 2A            mov b, [d]
6292   2E72 FD AB         swp b
6293   2E74 D8            push b
6294   2E75 26 11 6A      mov b, _s77 ; "Deflector Control Room acknowledges:\n  %d units of energy presently deployed to shields.\n"
6295   2E78 FD AB         swp b
6296   2E7A D8            push b
6297   2E7B 07 B8 07      call printf
6298   2E7E 51 04 00      add sp, 4
6299   2E81 0A 84 2E      jmp _if99_exit
6300   2E84             _if99_exit:
6301   2E84             ;; return; 
6302   2E84 F9            leave
6303   2E85 09            ret
6304   2E86 0A 89 2E      jmp _if98_exit
6305   2E89             _if98_exit:
6306   2E89             ;; klingons_move(); 
6307   2E89 07 41 57      call klingons_move
6308   2E8C             ;; repair_damage(warp); 
6309   2E8C FA FB FF      lea d, [bp + -5] ; $warp
6310   2E8F 2A            mov b, [d]
6311   2E90 FD AB         swp b
6312   2E92 D8            push b
6313   2E93 07 D0 5A      call repair_damage
6314   2E96 51 02 00      add sp, 2
6315   2E99             ;; z1 = FROM_FIXED00(ship_y); 
6316   2E99 FA F1 FF      lea d, [bp + -15] ; $z1
6317   2E9C DA            push d
6318   2E9D 3B 9B 62      mov d, _ship_y ; $ship_y
6319   2EA0 2A            mov b, [d]
6320   2EA1 FD AB         swp b
6321   2EA3 D8            push b
6322   2EA4 07 67 1D      call FROM_FIXED00
6323   2EA7 51 02 00      add sp, 2
6324   2EAA E7            pop d
6325   2EAB FD 43         mov [d], b
6326   2EAD             ;; z2 = FROM_FIXED00(ship_x); 
6327   2EAD FA EF FF      lea d, [bp + -17] ; $z2
6328   2EB0 DA            push d
6329   2EB1 3B 9D 62      mov d, _ship_x ; $ship_x
6330   2EB4 2A            mov b, [d]
6331   2EB5 FD AB         swp b
6332   2EB7 D8            push b
6333   2EB8 07 67 1D      call FROM_FIXED00
6334   2EBB 51 02 00      add sp, 2
6335   2EBE E7            pop d
6336   2EBF FD 43         mov [d], b
6337   2EC1             ;; quad[z1+-1][z2+-1] =  		0      ; 
6338   2EC1 3B A1 62      mov d, _quad_data ; $quad
6339   2EC4 D7            push a
6340   2EC5 DA            push d
6341   2EC6 FA F1 FF      lea d, [bp + -15] ; $z1
6342   2EC9 2A            mov b, [d]
6343   2ECA             ; START TERMS
6344   2ECA D7            push a
6345   2ECB 11            mov a, b
6346   2ECC 26 FF FF      mov b, $ffff
6347   2ECF 56            add b, a
6348   2ED0 E4            pop a
6349   2ED1             ; END TERMS
6350   2ED1 E7            pop d
6351   2ED2 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
6352   2ED6 DA            push d
6353   2ED7 FA EF FF      lea d, [bp + -17] ; $z2
6354   2EDA 2A            mov b, [d]
6355   2EDB             ; START TERMS
6356   2EDB D7            push a
6357   2EDC 11            mov a, b
6358   2EDD 26 FF FF      mov b, $ffff
6359   2EE0 56            add b, a
6360   2EE1 E4            pop a
6361   2EE2             ; END TERMS
6362   2EE2 E7            pop d
6363   2EE3 5A            add d, b
6364   2EE4 E4            pop a
6365   2EE5 DA            push d
6366   2EE6 26 00 00      mov b, $0
6367   2EE9 E7            pop d
6368   2EEA FD 3E         mov [d], bl
6369   2EEC             ;; c2 = FROM_FIXED00(c1);	/* Integer part */ 
6370   2EEC FA F7 FF      lea d, [bp + -9] ; $c2
6371   2EEF DA            push d
6372   2EF0 FA FD FF      lea d, [bp + -3] ; $c1
6373   2EF3 2A            mov b, [d]
6374   2EF4 FD AB         swp b
6375   2EF6 D8            push b
6376   2EF7 07 67 1D      call FROM_FIXED00
6377   2EFA 51 02 00      add sp, 2
6378   2EFD E7            pop d
6379   2EFE FD 43         mov [d], b
6380   2F00             ;; c3 = c2 + 1;		/* Next integer part */ 
6381   2F00 FA F5 FF      lea d, [bp + -11] ; $c3
6382   2F03 DA            push d
6383   2F04 FA F7 FF      lea d, [bp + -9] ; $c2
6384   2F07 2A            mov b, [d]
6385   2F08             ; START TERMS
6386   2F08 D7            push a
6387   2F09 11            mov a, b
6388   2F0A 26 01 00      mov b, $1
6389   2F0D 56            add b, a
6390   2F0E E4            pop a
6391   2F0F             ; END TERMS
6392   2F0F E7            pop d
6393   2F10 FD 43         mov [d], b
6394   2F12             ;; c4 = (c1 - TO_FIXED00(c2));	/* Fractional element in fixed point */ 
6395   2F12 FA F3 FF      lea d, [bp + -13] ; $c4
6396   2F15 DA            push d
6397   2F16 FA FD FF      lea d, [bp + -3] ; $c1
6398   2F19 2A            mov b, [d]
6399   2F1A             ; START TERMS
6400   2F1A D7            push a
6401   2F1B 11            mov a, b
6402   2F1C FA F7 FF      lea d, [bp + -9] ; $c2
6403   2F1F 2A            mov b, [d]
6404   2F20 FD AB         swp b
6405   2F22 D8            push b
6406   2F23 07 55 1D      call TO_FIXED00
6407   2F26 51 02 00      add sp, 2
6408   2F29 60            sub a, b
6409   2F2A 27            mov b, a
6410   2F2B E4            pop a
6411   2F2C             ; END TERMS
6412   2F2C E7            pop d
6413   2F2D FD 43         mov [d], b
6414   2F2F             ;; x1 = 100 * c[1][c2] + (c[1][c3] - c[1][c2]) * c4; 
6415   2F2F FA ED FF      lea d, [bp + -19] ; $x1
6416   2F32 DA            push d
6417   2F33 26 64 00      mov b, $64
6418   2F36             ; START FACTORS
6419   2F36 D7            push a
6420   2F37 11            mov a, b
6421   2F38 3B A5 61      mov d, _c_data ; $c
6422   2F3B D7            push a
6423   2F3C DA            push d
6424   2F3D 26 01 00      mov b, $1
6425   2F40 E7            pop d
6426   2F41 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
6427   2F45 DA            push d
6428   2F46 FA F7 FF      lea d, [bp + -9] ; $c2
6429   2F49 2A            mov b, [d]
6430   2F4A E7            pop d
6431   2F4B 5A            add d, b
6432   2F4C E4            pop a
6433   2F4D 32            mov bl, [d]
6434   2F4E A7 00         mov bh, 0
6435   2F50 AC            mul a, b ; *
6436   2F51 11            mov a, b
6437   2F52 27            mov b, a
6438   2F53 E4            pop a
6439   2F54             ; END FACTORS
6440   2F54             ; START TERMS
6441   2F54 D7            push a
6442   2F55 11            mov a, b
6443   2F56 3B A5 61      mov d, _c_data ; $c
6444   2F59 D7            push a
6445   2F5A DA            push d
6446   2F5B 26 01 00      mov b, $1
6447   2F5E E7            pop d
6448   2F5F FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
6449   2F63 DA            push d
6450   2F64 FA F5 FF      lea d, [bp + -11] ; $c3
6451   2F67 2A            mov b, [d]
6452   2F68 E7            pop d
6453   2F69 5A            add d, b
6454   2F6A E4            pop a
6455   2F6B 32            mov bl, [d]
6456   2F6C A7 00         mov bh, 0
6457   2F6E             ; START TERMS
6458   2F6E D7            push a
6459   2F6F 11            mov a, b
6460   2F70 3B A5 61      mov d, _c_data ; $c
6461   2F73 D7            push a
6462   2F74 DA            push d
6463   2F75 26 01 00      mov b, $1
6464   2F78 E7            pop d
6465   2F79 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
6466   2F7D DA            push d
6467   2F7E FA F7 FF      lea d, [bp + -9] ; $c2
6468   2F81 2A            mov b, [d]
6469   2F82 E7            pop d
6470   2F83 5A            add d, b
6471   2F84 E4            pop a
6472   2F85 32            mov bl, [d]
6473   2F86 A7 00         mov bh, 0
6474   2F88 60            sub a, b
6475   2F89 27            mov b, a
6476   2F8A E4            pop a
6477   2F8B             ; END TERMS
6478   2F8B             ; START FACTORS
6479   2F8B D7            push a
6480   2F8C 11            mov a, b
6481   2F8D FA F3 FF      lea d, [bp + -13] ; $c4
6482   2F90 2A            mov b, [d]
6483   2F91 AC            mul a, b ; *
6484   2F92 11            mov a, b
6485   2F93 27            mov b, a
6486   2F94 E4            pop a
6487   2F95             ; END FACTORS
6488   2F95 56            add b, a
6489   2F96 E4            pop a
6490   2F97             ; END TERMS
6491   2F97 E7            pop d
6492   2F98 FD 43         mov [d], b
6493   2F9A             ;; x2 = 100 * c[2][c2] + (c[2][c3] - c[2][c2]) * c4; 
6494   2F9A FA EB FF      lea d, [bp + -21] ; $x2
6495   2F9D DA            push d
6496   2F9E 26 64 00      mov b, $64
6497   2FA1             ; START FACTORS
6498   2FA1 D7            push a
6499   2FA2 11            mov a, b
6500   2FA3 3B A5 61      mov d, _c_data ; $c
6501   2FA6 D7            push a
6502   2FA7 DA            push d
6503   2FA8 26 02 00      mov b, $2
6504   2FAB E7            pop d
6505   2FAC FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
6506   2FB0 DA            push d
6507   2FB1 FA F7 FF      lea d, [bp + -9] ; $c2
6508   2FB4 2A            mov b, [d]
6509   2FB5 E7            pop d
6510   2FB6 5A            add d, b
6511   2FB7 E4            pop a
6512   2FB8 32            mov bl, [d]
6513   2FB9 A7 00         mov bh, 0
6514   2FBB AC            mul a, b ; *
6515   2FBC 11            mov a, b
6516   2FBD 27            mov b, a
6517   2FBE E4            pop a
6518   2FBF             ; END FACTORS
6519   2FBF             ; START TERMS
6520   2FBF D7            push a
6521   2FC0 11            mov a, b
6522   2FC1 3B A5 61      mov d, _c_data ; $c
6523   2FC4 D7            push a
6524   2FC5 DA            push d
6525   2FC6 26 02 00      mov b, $2
6526   2FC9 E7            pop d
6527   2FCA FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
6528   2FCE DA            push d
6529   2FCF FA F5 FF      lea d, [bp + -11] ; $c3
6530   2FD2 2A            mov b, [d]
6531   2FD3 E7            pop d
6532   2FD4 5A            add d, b
6533   2FD5 E4            pop a
6534   2FD6 32            mov bl, [d]
6535   2FD7 A7 00         mov bh, 0
6536   2FD9             ; START TERMS
6537   2FD9 D7            push a
6538   2FDA 11            mov a, b
6539   2FDB 3B A5 61      mov d, _c_data ; $c
6540   2FDE D7            push a
6541   2FDF DA            push d
6542   2FE0 26 02 00      mov b, $2
6543   2FE3 E7            pop d
6544   2FE4 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
6545   2FE8 DA            push d
6546   2FE9 FA F7 FF      lea d, [bp + -9] ; $c2
6547   2FEC 2A            mov b, [d]
6548   2FED E7            pop d
6549   2FEE 5A            add d, b
6550   2FEF E4            pop a
6551   2FF0 32            mov bl, [d]
6552   2FF1 A7 00         mov bh, 0
6553   2FF3 60            sub a, b
6554   2FF4 27            mov b, a
6555   2FF5 E4            pop a
6556   2FF6             ; END TERMS
6557   2FF6             ; START FACTORS
6558   2FF6 D7            push a
6559   2FF7 11            mov a, b
6560   2FF8 FA F3 FF      lea d, [bp + -13] ; $c4
6561   2FFB 2A            mov b, [d]
6562   2FFC AC            mul a, b ; *
6563   2FFD 11            mov a, b
6564   2FFE 27            mov b, a
6565   2FFF E4            pop a
6566   3000             ; END FACTORS
6567   3000 56            add b, a
6568   3001 E4            pop a
6569   3002             ; END TERMS
6570   3002 E7            pop d
6571   3003 FD 43         mov [d], b
6572   3005             ;; x = ship_y; 
6573   3005 FA E9 FF      lea d, [bp + -23] ; $x
6574   3008 DA            push d
6575   3009 3B 9B 62      mov d, _ship_y ; $ship_y
6576   300C 2A            mov b, [d]
6577   300D E7            pop d
6578   300E FD 43         mov [d], b
6579   3010             ;; y = ship_x; 
6580   3010 FA E7 FF      lea d, [bp + -25] ; $y
6581   3013 DA            push d
6582   3014 3B 9D 62      mov d, _ship_x ; $ship_x
6583   3017 2A            mov b, [d]
6584   3018 E7            pop d
6585   3019 FD 43         mov [d], b
6586   301B             ;; for (i = 1; i <= n; i++) { 
6587   301B             _for100_init:
6588   301B FA FF FF      lea d, [bp + -1] ; $i
6589   301E DA            push d
6590   301F 26 01 00      mov b, $1
6591   3022 E7            pop d
6592   3023 FD 43         mov [d], b
6593   3025             _for100_cond:
6594   3025 FA FF FF      lea d, [bp + -1] ; $i
6595   3028 2A            mov b, [d]
6596   3029             ; START RELATIONAL
6597   3029 D7            push a
6598   302A 11            mov a, b
6599   302B FA F9 FF      lea d, [bp + -7] ; $n
6600   302E 2A            mov b, [d]
6601   302F B0            cmp a, b
6602   3030 FD 73         slt ; <= (signed)
6603   3032 E4            pop a
6604   3033             ; END RELATIONAL
6605   3033 C0 00 00      cmp b, 0
6606   3036 C6 76 34      je _for100_exit
6607   3039             _for100_block:
6608   3039             ;; ship_y = ship_y + x1; 
6609   3039 3B 9B 62      mov d, _ship_y ; $ship_y
6610   303C DA            push d
6611   303D 3B 9B 62      mov d, _ship_y ; $ship_y
6612   3040 2A            mov b, [d]
6613   3041             ; START TERMS
6614   3041 D7            push a
6615   3042 11            mov a, b
6616   3043 FA ED FF      lea d, [bp + -19] ; $x1
6617   3046 2A            mov b, [d]
6618   3047 56            add b, a
6619   3048 E4            pop a
6620   3049             ; END TERMS
6621   3049 E7            pop d
6622   304A FD 43         mov [d], b
6623   304C             ;; ship_x = ship_x + x2; 
6624   304C 3B 9D 62      mov d, _ship_x ; $ship_x
6625   304F DA            push d
6626   3050 3B 9D 62      mov d, _ship_x ; $ship_x
6627   3053 2A            mov b, [d]
6628   3054             ; START TERMS
6629   3054 D7            push a
6630   3055 11            mov a, b
6631   3056 FA EB FF      lea d, [bp + -21] ; $x2
6632   3059 2A            mov b, [d]
6633   305A 56            add b, a
6634   305B E4            pop a
6635   305C             ; END TERMS
6636   305C E7            pop d
6637   305D FD 43         mov [d], b
6638   305F             ;; z1 = FROM_FIXED00(ship_y); 
6639   305F FA F1 FF      lea d, [bp + -15] ; $z1
6640   3062 DA            push d
6641   3063 3B 9B 62      mov d, _ship_y ; $ship_y
6642   3066 2A            mov b, [d]
6643   3067 FD AB         swp b
6644   3069 D8            push b
6645   306A 07 67 1D      call FROM_FIXED00
6646   306D 51 02 00      add sp, 2
6647   3070 E7            pop d
6648   3071 FD 43         mov [d], b
6649   3073             ;; z2 = FROM_FIXED00(ship_x);	/* ?? cint100 ?? */ 
6650   3073 FA EF FF      lea d, [bp + -17] ; $z2
6651   3076 DA            push d
6652   3077 3B 9D 62      mov d, _ship_x ; $ship_x
6653   307A 2A            mov b, [d]
6654   307B FD AB         swp b
6655   307D D8            push b
6656   307E 07 67 1D      call FROM_FIXED00
6657   3081 51 02 00      add sp, 2
6658   3084 E7            pop d
6659   3085 FD 43         mov [d], b
6660   3087             ;; if (z1 < 1 || z1 >= 9 || z2 < 1 || z2 >= 9) { 
6661   3087             _if101_cond:
6662   3087 FA F1 FF      lea d, [bp + -15] ; $z1
6663   308A 2A            mov b, [d]
6664   308B             ; START RELATIONAL
6665   308B D7            push a
6666   308C 11            mov a, b
6667   308D 26 01 00      mov b, $1
6668   3090 B0            cmp a, b
6669   3091 FD 73         slt ; < (signed)
6670   3093 E4            pop a
6671   3094             ; END RELATIONAL
6672   3094 D7            push a
6673   3095 11            mov a, b
6674   3096 FA F1 FF      lea d, [bp + -15] ; $z1
6675   3099 2A            mov b, [d]
6676   309A             ; START RELATIONAL
6677   309A D7            push a
6678   309B 11            mov a, b
6679   309C 26 09 00      mov b, $9
6680   309F B0            cmp a, b
6681   30A0 FD 80         sge ; >=
6682   30A2 E4            pop a
6683   30A3             ; END RELATIONAL
6684   30A3 FD A8         sor a, b ; ||
6685   30A5 11            mov a, b
6686   30A6 FA EF FF      lea d, [bp + -17] ; $z2
6687   30A9 2A            mov b, [d]
6688   30AA             ; START RELATIONAL
6689   30AA D7            push a
6690   30AB 11            mov a, b
6691   30AC 26 01 00      mov b, $1
6692   30AF B0            cmp a, b
6693   30B0 FD 73         slt ; < (signed)
6694   30B2 E4            pop a
6695   30B3             ; END RELATIONAL
6696   30B3 FD A8         sor a, b ; ||
6697   30B5 11            mov a, b
6698   30B6 FA EF FF      lea d, [bp + -17] ; $z2
6699   30B9 2A            mov b, [d]
6700   30BA             ; START RELATIONAL
6701   30BA D7            push a
6702   30BB 11            mov a, b
6703   30BC 26 09 00      mov b, $9
6704   30BF B0            cmp a, b
6705   30C0 FD 80         sge ; >=
6706   30C2 E4            pop a
6707   30C3             ; END RELATIONAL
6708   30C3 FD A8         sor a, b ; ||
6709   30C5 E4            pop a
6710   30C6 C0 00 00      cmp b, 0
6711   30C9 C6 D9 33      je _if101_exit
6712   30CC             _if101_true:
6713   30CC             ;; outside = 0;		/* Outside galaxy flag */ 
6714   30CC FA E6 FF      lea d, [bp + -26] ; $outside
6715   30CF DA            push d
6716   30D0 26 00 00      mov b, $0
6717   30D3 E7            pop d
6718   30D4 FD 3E         mov [d], bl
6719   30D6             ;; quad_y_old = quad_y; 
6720   30D6 FA E5 FF      lea d, [bp + -27] ; $quad_y_old
6721   30D9 DA            push d
6722   30DA 3B 7C 62      mov d, _quad_y ; $quad_y
6723   30DD 2A            mov b, [d]
6724   30DE E7            pop d
6725   30DF FD 3E         mov [d], bl
6726   30E1             ;; quad_x_old = quad_x; 
6727   30E1 FA E4 FF      lea d, [bp + -28] ; $quad_x_old
6728   30E4 DA            push d
6729   30E5 3B 7E 62      mov d, _quad_x ; $quad_x
6730   30E8 2A            mov b, [d]
6731   30E9 E7            pop d
6732   30EA FD 3E         mov [d], bl
6733   30EC             ;; x = (800 * quad_y) + x + (n * x1); 
6734   30EC FA E9 FF      lea d, [bp + -23] ; $x
6735   30EF DA            push d
6736   30F0 26 20 03      mov b, $320
6737   30F3             ; START FACTORS
6738   30F3 D7            push a
6739   30F4 11            mov a, b
6740   30F5 3B 7C 62      mov d, _quad_y ; $quad_y
6741   30F8 2A            mov b, [d]
6742   30F9 AC            mul a, b ; *
6743   30FA 11            mov a, b
6744   30FB 27            mov b, a
6745   30FC E4            pop a
6746   30FD             ; END FACTORS
6747   30FD             ; START TERMS
6748   30FD D7            push a
6749   30FE 11            mov a, b
6750   30FF FA E9 FF      lea d, [bp + -23] ; $x
6751   3102 2A            mov b, [d]
6752   3103 56            add b, a
6753   3104 11            mov a, b
6754   3105 FA F9 FF      lea d, [bp + -7] ; $n
6755   3108 2A            mov b, [d]
6756   3109             ; START FACTORS
6757   3109 D7            push a
6758   310A 11            mov a, b
6759   310B FA ED FF      lea d, [bp + -19] ; $x1
6760   310E 2A            mov b, [d]
6761   310F AC            mul a, b ; *
6762   3110 11            mov a, b
6763   3111 27            mov b, a
6764   3112 E4            pop a
6765   3113             ; END FACTORS
6766   3113 56            add b, a
6767   3114 E4            pop a
6768   3115             ; END TERMS
6769   3115 E7            pop d
6770   3116 FD 43         mov [d], b
6771   3118             ;; y = (800 * quad_x) + y + (n * x2); 
6772   3118 FA E7 FF      lea d, [bp + -25] ; $y
6773   311B DA            push d
6774   311C 26 20 03      mov b, $320
6775   311F             ; START FACTORS
6776   311F D7            push a
6777   3120 11            mov a, b
6778   3121 3B 7E 62      mov d, _quad_x ; $quad_x
6779   3124 2A            mov b, [d]
6780   3125 AC            mul a, b ; *
6781   3126 11            mov a, b
6782   3127 27            mov b, a
6783   3128 E4            pop a
6784   3129             ; END FACTORS
6785   3129             ; START TERMS
6786   3129 D7            push a
6787   312A 11            mov a, b
6788   312B FA E7 FF      lea d, [bp + -25] ; $y
6789   312E 2A            mov b, [d]
6790   312F 56            add b, a
6791   3130 11            mov a, b
6792   3131 FA F9 FF      lea d, [bp + -7] ; $n
6793   3134 2A            mov b, [d]
6794   3135             ; START FACTORS
6795   3135 D7            push a
6796   3136 11            mov a, b
6797   3137 FA EB FF      lea d, [bp + -21] ; $x2
6798   313A 2A            mov b, [d]
6799   313B AC            mul a, b ; *
6800   313C 11            mov a, b
6801   313D 27            mov b, a
6802   313E E4            pop a
6803   313F             ; END FACTORS
6804   313F 56            add b, a
6805   3140 E4            pop a
6806   3141             ; END TERMS
6807   3141 E7            pop d
6808   3142 FD 43         mov [d], b
6809   3144             ;; quad_y = x / 800;	/* Fixed point to int and divide by 8 */ 
6810   3144 3B 7C 62      mov d, _quad_y ; $quad_y
6811   3147 DA            push d
6812   3148 FA E9 FF      lea d, [bp + -23] ; $x
6813   314B 2A            mov b, [d]
6814   314C             ; START FACTORS
6815   314C D7            push a
6816   314D 11            mov a, b
6817   314E 26 20 03      mov b, $320
6818   3151 AE            div a, b
6819   3152 27            mov b, a
6820   3153 E4            pop a
6821   3154             ; END FACTORS
6822   3154 E7            pop d
6823   3155 FD 43         mov [d], b
6824   3157             ;; quad_x = y / 800;	/* Ditto */ 
6825   3157 3B 7E 62      mov d, _quad_x ; $quad_x
6826   315A DA            push d
6827   315B FA E7 FF      lea d, [bp + -25] ; $y
6828   315E 2A            mov b, [d]
6829   315F             ; START FACTORS
6830   315F D7            push a
6831   3160 11            mov a, b
6832   3161 26 20 03      mov b, $320
6833   3164 AE            div a, b
6834   3165 27            mov b, a
6835   3166 E4            pop a
6836   3167             ; END FACTORS
6837   3167 E7            pop d
6838   3168 FD 43         mov [d], b
6839   316A             ;; ship_y = x - (quad_y * 800); 
6840   316A 3B 9B 62      mov d, _ship_y ; $ship_y
6841   316D DA            push d
6842   316E FA E9 FF      lea d, [bp + -23] ; $x
6843   3171 2A            mov b, [d]
6844   3172             ; START TERMS
6845   3172 D7            push a
6846   3173 11            mov a, b
6847   3174 3B 7C 62      mov d, _quad_y ; $quad_y
6848   3177 2A            mov b, [d]
6849   3178             ; START FACTORS
6850   3178 D7            push a
6851   3179 11            mov a, b
6852   317A 26 20 03      mov b, $320
6853   317D AC            mul a, b ; *
6854   317E 11            mov a, b
6855   317F 27            mov b, a
6856   3180 E4            pop a
6857   3181             ; END FACTORS
6858   3181 60            sub a, b
6859   3182 27            mov b, a
6860   3183 E4            pop a
6861   3184             ; END TERMS
6862   3184 E7            pop d
6863   3185 FD 43         mov [d], b
6864   3187             ;; ship_x = y - (quad_x * 800); 
6865   3187 3B 9D 62      mov d, _ship_x ; $ship_x
6866   318A DA            push d
6867   318B FA E7 FF      lea d, [bp + -25] ; $y
6868   318E 2A            mov b, [d]
6869   318F             ; START TERMS
6870   318F D7            push a
6871   3190 11            mov a, b
6872   3191 3B 7E 62      mov d, _quad_x ; $quad_x
6873   3194 2A            mov b, [d]
6874   3195             ; START FACTORS
6875   3195 D7            push a
6876   3196 11            mov a, b
6877   3197 26 20 03      mov b, $320
6878   319A AC            mul a, b ; *
6879   319B 11            mov a, b
6880   319C 27            mov b, a
6881   319D E4            pop a
6882   319E             ; END FACTORS
6883   319E 60            sub a, b
6884   319F 27            mov b, a
6885   31A0 E4            pop a
6886   31A1             ; END TERMS
6887   31A1 E7            pop d
6888   31A2 FD 43         mov [d], b
6889   31A4             ;; if (ship_y < 100) { 
6890   31A4             _if102_cond:
6891   31A4 3B 9B 62      mov d, _ship_y ; $ship_y
6892   31A7 2A            mov b, [d]
6893   31A8             ; START RELATIONAL
6894   31A8 D7            push a
6895   31A9 11            mov a, b
6896   31AA 26 64 00      mov b, $64
6897   31AD B0            cmp a, b
6898   31AE FD 73         slt ; < (signed)
6899   31B0 E4            pop a
6900   31B1             ; END RELATIONAL
6901   31B1 C0 00 00      cmp b, 0
6902   31B4 C6 DF 31      je _if102_exit
6903   31B7             _if102_true:
6904   31B7             ;; quad_y = quad_y - 1; 
6905   31B7 3B 7C 62      mov d, _quad_y ; $quad_y
6906   31BA DA            push d
6907   31BB 3B 7C 62      mov d, _quad_y ; $quad_y
6908   31BE 2A            mov b, [d]
6909   31BF             ; START TERMS
6910   31BF D7            push a
6911   31C0 11            mov a, b
6912   31C1 26 01 00      mov b, $1
6913   31C4 60            sub a, b
6914   31C5 27            mov b, a
6915   31C6 E4            pop a
6916   31C7             ; END TERMS
6917   31C7 E7            pop d
6918   31C8 FD 43         mov [d], b
6919   31CA             ;; ship_y = ship_y + 800; 
6920   31CA 3B 9B 62      mov d, _ship_y ; $ship_y
6921   31CD DA            push d
6922   31CE 3B 9B 62      mov d, _ship_y ; $ship_y
6923   31D1 2A            mov b, [d]
6924   31D2             ; START TERMS
6925   31D2 D7            push a
6926   31D3 11            mov a, b
6927   31D4 26 20 03      mov b, $320
6928   31D7 56            add b, a
6929   31D8 E4            pop a
6930   31D9             ; END TERMS
6931   31D9 E7            pop d
6932   31DA FD 43         mov [d], b
6933   31DC 0A DF 31      jmp _if102_exit
6934   31DF             _if102_exit:
6935   31DF             ;; if (ship_x < 100) { 
6936   31DF             _if103_cond:
6937   31DF 3B 9D 62      mov d, _ship_x ; $ship_x
6938   31E2 2A            mov b, [d]
6939   31E3             ; START RELATIONAL
6940   31E3 D7            push a
6941   31E4 11            mov a, b
6942   31E5 26 64 00      mov b, $64
6943   31E8 B0            cmp a, b
6944   31E9 FD 73         slt ; < (signed)
6945   31EB E4            pop a
6946   31EC             ; END RELATIONAL
6947   31EC C0 00 00      cmp b, 0
6948   31EF C6 1A 32      je _if103_exit
6949   31F2             _if103_true:
6950   31F2             ;; quad_x = quad_x - 1; 
6951   31F2 3B 7E 62      mov d, _quad_x ; $quad_x
6952   31F5 DA            push d
6953   31F6 3B 7E 62      mov d, _quad_x ; $quad_x
6954   31F9 2A            mov b, [d]
6955   31FA             ; START TERMS
6956   31FA D7            push a
6957   31FB 11            mov a, b
6958   31FC 26 01 00      mov b, $1
6959   31FF 60            sub a, b
6960   3200 27            mov b, a
6961   3201 E4            pop a
6962   3202             ; END TERMS
6963   3202 E7            pop d
6964   3203 FD 43         mov [d], b
6965   3205             ;; ship_x = ship_x + 800; 
6966   3205 3B 9D 62      mov d, _ship_x ; $ship_x
6967   3208 DA            push d
6968   3209 3B 9D 62      mov d, _ship_x ; $ship_x
6969   320C 2A            mov b, [d]
6970   320D             ; START TERMS
6971   320D D7            push a
6972   320E 11            mov a, b
6973   320F 26 20 03      mov b, $320
6974   3212 56            add b, a
6975   3213 E4            pop a
6976   3214             ; END TERMS
6977   3214 E7            pop d
6978   3215 FD 43         mov [d], b
6979   3217 0A 1A 32      jmp _if103_exit
6980   321A             _if103_exit:
6981   321A             ;; if (quad_y < 1) { 
6982   321A             _if104_cond:
6983   321A 3B 7C 62      mov d, _quad_y ; $quad_y
6984   321D 2A            mov b, [d]
6985   321E             ; START RELATIONAL
6986   321E D7            push a
6987   321F 11            mov a, b
6988   3220 26 01 00      mov b, $1
6989   3223 B0            cmp a, b
6990   3224 FD 73         slt ; < (signed)
6991   3226 E4            pop a
6992   3227             ; END RELATIONAL
6993   3227 C0 00 00      cmp b, 0
6994   322A C6 4E 32      je _if104_exit
6995   322D             _if104_true:
6996   322D             ;; outside = 1; 
6997   322D FA E6 FF      lea d, [bp + -26] ; $outside
6998   3230 DA            push d
6999   3231 26 01 00      mov b, $1
7000   3234 E7            pop d
7001   3235 FD 3E         mov [d], bl
7002   3237             ;; quad_y = 1; 
7003   3237 3B 7C 62      mov d, _quad_y ; $quad_y
7004   323A DA            push d
7005   323B 26 01 00      mov b, $1
7006   323E E7            pop d
7007   323F FD 43         mov [d], b
7008   3241             ;; ship_y = 100; 
7009   3241 3B 9B 62      mov d, _ship_y ; $ship_y
7010   3244 DA            push d
7011   3245 26 64 00      mov b, $64
7012   3248 E7            pop d
7013   3249 FD 43         mov [d], b
7014   324B 0A 4E 32      jmp _if104_exit
7015   324E             _if104_exit:
7016   324E             ;; if (quad_y > 8) { 
7017   324E             _if105_cond:
7018   324E 3B 7C 62      mov d, _quad_y ; $quad_y
7019   3251 2A            mov b, [d]
7020   3252             ; START RELATIONAL
7021   3252 D7            push a
7022   3253 11            mov a, b
7023   3254 26 08 00      mov b, $8
7024   3257 B0            cmp a, b
7025   3258 FD 7F         sgt ; >
7026   325A E4            pop a
7027   325B             ; END RELATIONAL
7028   325B C0 00 00      cmp b, 0
7029   325E C6 82 32      je _if105_exit
7030   3261             _if105_true:
7031   3261             ;; outside = 1; 
7032   3261 FA E6 FF      lea d, [bp + -26] ; $outside
7033   3264 DA            push d
7034   3265 26 01 00      mov b, $1
7035   3268 E7            pop d
7036   3269 FD 3E         mov [d], bl
7037   326B             ;; quad_y = 8; 
7038   326B 3B 7C 62      mov d, _quad_y ; $quad_y
7039   326E DA            push d
7040   326F 26 08 00      mov b, $8
7041   3272 E7            pop d
7042   3273 FD 43         mov [d], b
7043   3275             ;; ship_y = 800; 
7044   3275 3B 9B 62      mov d, _ship_y ; $ship_y
7045   3278 DA            push d
7046   3279 26 20 03      mov b, $320
7047   327C E7            pop d
7048   327D FD 43         mov [d], b
7049   327F 0A 82 32      jmp _if105_exit
7050   3282             _if105_exit:
7051   3282             ;; if (quad_x < 1) { 
7052   3282             _if106_cond:
7053   3282 3B 7E 62      mov d, _quad_x ; $quad_x
7054   3285 2A            mov b, [d]
7055   3286             ; START RELATIONAL
7056   3286 D7            push a
7057   3287 11            mov a, b
7058   3288 26 01 00      mov b, $1
7059   328B B0            cmp a, b
7060   328C FD 73         slt ; < (signed)
7061   328E E4            pop a
7062   328F             ; END RELATIONAL
7063   328F C0 00 00      cmp b, 0
7064   3292 C6 B6 32      je _if106_exit
7065   3295             _if106_true:
7066   3295             ;; outside = 1; 
7067   3295 FA E6 FF      lea d, [bp + -26] ; $outside
7068   3298 DA            push d
7069   3299 26 01 00      mov b, $1
7070   329C E7            pop d
7071   329D FD 3E         mov [d], bl
7072   329F             ;; quad_x = 1; 
7073   329F 3B 7E 62      mov d, _quad_x ; $quad_x
7074   32A2 DA            push d
7075   32A3 26 01 00      mov b, $1
7076   32A6 E7            pop d
7077   32A7 FD 43         mov [d], b
7078   32A9             ;; ship_x = 100; 
7079   32A9 3B 9D 62      mov d, _ship_x ; $ship_x
7080   32AC DA            push d
7081   32AD 26 64 00      mov b, $64
7082   32B0 E7            pop d
7083   32B1 FD 43         mov [d], b
7084   32B3 0A B6 32      jmp _if106_exit
7085   32B6             _if106_exit:
7086   32B6             ;; if (quad_x > 8) { 
7087   32B6             _if107_cond:
7088   32B6 3B 7E 62      mov d, _quad_x ; $quad_x
7089   32B9 2A            mov b, [d]
7090   32BA             ; START RELATIONAL
7091   32BA D7            push a
7092   32BB 11            mov a, b
7093   32BC 26 08 00      mov b, $8
7094   32BF B0            cmp a, b
7095   32C0 FD 7F         sgt ; >
7096   32C2 E4            pop a
7097   32C3             ; END RELATIONAL
7098   32C3 C0 00 00      cmp b, 0
7099   32C6 C6 EA 32      je _if107_exit
7100   32C9             _if107_true:
7101   32C9             ;; outside = 1; 
7102   32C9 FA E6 FF      lea d, [bp + -26] ; $outside
7103   32CC DA            push d
7104   32CD 26 01 00      mov b, $1
7105   32D0 E7            pop d
7106   32D1 FD 3E         mov [d], bl
7107   32D3             ;; quad_x = 8; 
7108   32D3 3B 7E 62      mov d, _quad_x ; $quad_x
7109   32D6 DA            push d
7110   32D7 26 08 00      mov b, $8
7111   32DA E7            pop d
7112   32DB FD 43         mov [d], b
7113   32DD             ;; ship_x = 800; 
7114   32DD 3B 9D 62      mov d, _ship_x ; $ship_x
7115   32E0 DA            push d
7116   32E1 26 20 03      mov b, $320
7117   32E4 E7            pop d
7118   32E5 FD 43         mov [d], b
7119   32E7 0A EA 32      jmp _if107_exit
7120   32EA             _if107_exit:
7121   32EA             ;; if (outside == 1) { 
7122   32EA             _if108_cond:
7123   32EA FA E6 FF      lea d, [bp + -26] ; $outside
7124   32ED 32            mov bl, [d]
7125   32EE A7 00         mov bh, 0
7126   32F0             ; START RELATIONAL
7127   32F0 D7            push a
7128   32F1 11            mov a, b
7129   32F2 26 01 00      mov b, $1
7130   32F5 B0            cmp a, b
7131   32F6 FD 71         seq ; ==
7132   32F8 E4            pop a
7133   32F9             ; END RELATIONAL
7134   32F9 C0 00 00      cmp b, 0
7135   32FC C6 3C 33      je _if108_exit
7136   32FF             _if108_true:
7137   32FF             ;; printf("LT. Uhura reports:\n Message from Starfleet Command:\n\n Permission to attempt crossing of galactic perimeter\n is hereby *denied*. Shut down your engines.\n\n Chief Engineer Scott reports:\n Warp Engines shut down at sector %d, %d of quadrant %d, %d.\n\n", FROM_FIXED00(ship_y), 
7138   32FF 3B 7E 62      mov d, _quad_x ; $quad_x
7139   3302 2A            mov b, [d]
7140   3303 FD AB         swp b
7141   3305 D8            push b
7142   3306 3B 7C 62      mov d, _quad_y ; $quad_y
7143   3309 2A            mov b, [d]
7144   330A FD AB         swp b
7145   330C D8            push b
7146   330D 3B 9D 62      mov d, _ship_x ; $ship_x
7147   3310 2A            mov b, [d]
7148   3311 FD AB         swp b
7149   3313 D8            push b
7150   3314 07 67 1D      call FROM_FIXED00
7151   3317 51 02 00      add sp, 2
7152   331A FD AB         swp b
7153   331C D8            push b
7154   331D 3B 9B 62      mov d, _ship_y ; $ship_y
7155   3320 2A            mov b, [d]
7156   3321 FD AB         swp b
7157   3323 D8            push b
7158   3324 07 67 1D      call FROM_FIXED00
7159   3327 51 02 00      add sp, 2
7160   332A FD AB         swp b
7161   332C D8            push b
7162   332D 26 6B 6A      mov b, _s78 ; "LT. Uhura reports:\n Message from Starfleet Command:\n\n Permission to attempt crossing of galactic perimeter\n is hereby *denied*. Shut down your engines.\n\n Chief Engineer Scott reports:\n Warp Engines shut down at sector %d, %d of quadrant %d, %d.\n\n"
7163   3330 FD AB         swp b
7164   3332 D8            push b
7165   3333 07 B8 07      call printf
7166   3336 51 0A 00      add sp, 10
7167   3339 0A 3C 33      jmp _if108_exit
7168   333C             _if108_exit:
7169   333C             ;; maneuver_energy(n); 
7170   333C FA F9 FF      lea d, [bp + -7] ; $n
7171   333F 2A            mov b, [d]
7172   3340 FD AB         swp b
7173   3342 D8            push b
7174   3343 07 2B 35      call maneuver_energy
7175   3346 51 02 00      add sp, 2
7176   3349             ;; if (FROM_FIXED(stardate) > time_start + time_up) 
7177   3349             _if109_cond:
7178   3349 3B 9F 62      mov d, _stardate ; $stardate
7179   334C 2A            mov b, [d]
7180   334D FD AB         swp b
7181   334F D8            push b
7182   3350 07 44 1D      call FROM_FIXED
7183   3353 51 02 00      add sp, 2
7184   3356             ; START RELATIONAL
7185   3356 D7            push a
7186   3357 11            mov a, b
7187   3358 3B 83 62      mov d, _time_start ; $time_start
7188   335B 2A            mov b, [d]
7189   335C             ; START TERMS
7190   335C D7            push a
7191   335D 11            mov a, b
7192   335E 3B 85 62      mov d, _time_up ; $time_up
7193   3361 2A            mov b, [d]
7194   3362 56            add b, a
7195   3363 E4            pop a
7196   3364             ; END TERMS
7197   3364 B0            cmp a, b
7198   3365 FD 7F         sgt ; >
7199   3367 E4            pop a
7200   3368             ; END RELATIONAL
7201   3368 C0 00 00      cmp b, 0
7202   336B C6 74 33      je _if109_exit
7203   336E             _if109_true:
7204   336E             ;; end_of_time(); 
7205   336E 07 ED 55      call end_of_time
7206   3371 0A 74 33      jmp _if109_exit
7207   3374             _if109_exit:
7208   3374             ;; if (quad_y != quad_y_old || quad_x != quad_x_old) { 
7209   3374             _if110_cond:
7210   3374 3B 7C 62      mov d, _quad_y ; $quad_y
7211   3377 2A            mov b, [d]
7212   3378             ; START RELATIONAL
7213   3378 D7            push a
7214   3379 11            mov a, b
7215   337A FA E5 FF      lea d, [bp + -27] ; $quad_y_old
7216   337D 32            mov bl, [d]
7217   337E A7 00         mov bh, 0
7218   3380 B0            cmp a, b
7219   3381 FD 72         sneq ; !=
7220   3383 E4            pop a
7221   3384             ; END RELATIONAL
7222   3384 D7            push a
7223   3385 11            mov a, b
7224   3386 3B 7E 62      mov d, _quad_x ; $quad_x
7225   3389 2A            mov b, [d]
7226   338A             ; START RELATIONAL
7227   338A D7            push a
7228   338B 11            mov a, b
7229   338C FA E4 FF      lea d, [bp + -28] ; $quad_x_old
7230   338F 32            mov bl, [d]
7231   3390 A7 00         mov bh, 0
7232   3392 B0            cmp a, b
7233   3393 FD 72         sneq ; !=
7234   3395 E4            pop a
7235   3396             ; END RELATIONAL
7236   3396 FD A8         sor a, b ; ||
7237   3398 E4            pop a
7238   3399 C0 00 00      cmp b, 0
7239   339C C6 C0 33      je _if110_exit
7240   339F             _if110_true:
7241   339F             ;; stardate = stardate + TO_FIXED(1); 
7242   339F 3B 9F 62      mov d, _stardate ; $stardate
7243   33A2 DA            push d
7244   33A3 3B 9F 62      mov d, _stardate ; $stardate
7245   33A6 2A            mov b, [d]
7246   33A7             ; START TERMS
7247   33A7 D7            push a
7248   33A8 11            mov a, b
7249   33A9 26 01 00      mov b, $1
7250   33AC FD AB         swp b
7251   33AE D8            push b
7252   33AF 07 32 1D      call TO_FIXED
7253   33B2 51 02 00      add sp, 2
7254   33B5 56            add b, a
7255   33B6 E4            pop a
7256   33B7             ; END TERMS
7257   33B7 E7            pop d
7258   33B8 FD 43         mov [d], b
7259   33BA             ;; new_quadrant(); 
7260   33BA 07 BC 28      call new_quadrant
7261   33BD 0A C0 33      jmp _if110_exit
7262   33C0             _if110_exit:
7263   33C0             ;; complete_maneuver(warp, n); 
7264   33C0 FA F9 FF      lea d, [bp + -7] ; $n
7265   33C3 2A            mov b, [d]
7266   33C4 FD AB         swp b
7267   33C6 D8            push b
7268   33C7 FA FB FF      lea d, [bp + -5] ; $warp
7269   33CA 2A            mov b, [d]
7270   33CB FD AB         swp b
7271   33CD D8            push b
7272   33CE 07 8C 34      call complete_maneuver
7273   33D1 51 04 00      add sp, 4
7274   33D4             ;; return; 
7275   33D4 F9            leave
7276   33D5 09            ret
7277   33D6 0A D9 33      jmp _if101_exit
7278   33D9             _if101_exit:
7279   33D9             ;; if (quad[z1+-1][z2+-1] !=  		0      ) {	/* Sector not empty */ 
7280   33D9             _if111_cond:
7281   33D9 3B A1 62      mov d, _quad_data ; $quad
7282   33DC D7            push a
7283   33DD DA            push d
7284   33DE FA F1 FF      lea d, [bp + -15] ; $z1
7285   33E1 2A            mov b, [d]
7286   33E2             ; START TERMS
7287   33E2 D7            push a
7288   33E3 11            mov a, b
7289   33E4 26 FF FF      mov b, $ffff
7290   33E7 56            add b, a
7291   33E8 E4            pop a
7292   33E9             ; END TERMS
7293   33E9 E7            pop d
7294   33EA FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
7295   33EE DA            push d
7296   33EF FA EF FF      lea d, [bp + -17] ; $z2
7297   33F2 2A            mov b, [d]
7298   33F3             ; START TERMS
7299   33F3 D7            push a
7300   33F4 11            mov a, b
7301   33F5 26 FF FF      mov b, $ffff
7302   33F8 56            add b, a
7303   33F9 E4            pop a
7304   33FA             ; END TERMS
7305   33FA E7            pop d
7306   33FB 5A            add d, b
7307   33FC E4            pop a
7308   33FD 32            mov bl, [d]
7309   33FE A7 00         mov bh, 0
7310   3400             ; START RELATIONAL
7311   3400 D7            push a
7312   3401 11            mov a, b
7313   3402 26 00 00      mov b, $0
7314   3405 B0            cmp a, b
7315   3406 FD 72         sneq ; !=
7316   3408 E4            pop a
7317   3409             ; END RELATIONAL
7318   3409 C0 00 00      cmp b, 0
7319   340C C6 66 34      je _if111_exit
7320   340F             _if111_true:
7321   340F             ;; ship_y = ship_y - x1; 
7322   340F 3B 9B 62      mov d, _ship_y ; $ship_y
7323   3412 DA            push d
7324   3413 3B 9B 62      mov d, _ship_y ; $ship_y
7325   3416 2A            mov b, [d]
7326   3417             ; START TERMS
7327   3417 D7            push a
7328   3418 11            mov a, b
7329   3419 FA ED FF      lea d, [bp + -19] ; $x1
7330   341C 2A            mov b, [d]
7331   341D 60            sub a, b
7332   341E 27            mov b, a
7333   341F E4            pop a
7334   3420             ; END TERMS
7335   3420 E7            pop d
7336   3421 FD 43         mov [d], b
7337   3423             ;; ship_x = ship_x - x2; 
7338   3423 3B 9D 62      mov d, _ship_x ; $ship_x
7339   3426 DA            push d
7340   3427 3B 9D 62      mov d, _ship_x ; $ship_x
7341   342A 2A            mov b, [d]
7342   342B             ; START TERMS
7343   342B D7            push a
7344   342C 11            mov a, b
7345   342D FA EB FF      lea d, [bp + -21] ; $x2
7346   3430 2A            mov b, [d]
7347   3431 60            sub a, b
7348   3432 27            mov b, a
7349   3433 E4            pop a
7350   3434             ; END TERMS
7351   3434 E7            pop d
7352   3435 FD 43         mov [d], b
7353   3437             ;; printf("Warp Engines shut down at sector %d, %d due to bad navigation.\n\n", z1, z2); 
7354   3437 FA EF FF      lea d, [bp + -17] ; $z2
7355   343A 2A            mov b, [d]
7356   343B FD AB         swp b
7357   343D D8            push b
7358   343E FA F1 FF      lea d, [bp + -15] ; $z1
7359   3441 2A            mov b, [d]
7360   3442 FD AB         swp b
7361   3444 D8            push b
7362   3445 26 62 6B      mov b, _s79 ; "Warp Engines shut down at sector %d, %d due to bad navigation.\n\n"
7363   3448 FD AB         swp b
7364   344A D8            push b
7365   344B 07 B8 07      call printf
7366   344E 51 06 00      add sp, 6
7367   3451             ;; i = n + 1; 
7368   3451 FA FF FF      lea d, [bp + -1] ; $i
7369   3454 DA            push d
7370   3455 FA F9 FF      lea d, [bp + -7] ; $n
7371   3458 2A            mov b, [d]
7372   3459             ; START TERMS
7373   3459 D7            push a
7374   345A 11            mov a, b
7375   345B 26 01 00      mov b, $1
7376   345E 56            add b, a
7377   345F E4            pop a
7378   3460             ; END TERMS
7379   3460 E7            pop d
7380   3461 FD 43         mov [d], b
7381   3463 0A 66 34      jmp _if111_exit
7382   3466             _if111_exit:
7383   3466             _for100_update:
7384   3466 FA FF FF      lea d, [bp + -1] ; $i
7385   3469 2A            mov b, [d]
7386   346A D8            push b
7387   346B FD 77         inc b
7388   346D FA FF FF      lea d, [bp + -1] ; $i
7389   3470 FD 43         mov [d], b
7390   3472 E5            pop b
7391   3473 0A 25 30      jmp _for100_cond
7392   3476             _for100_exit:
7393   3476             ;; complete_maneuver(warp, n); 
7394   3476 FA F9 FF      lea d, [bp + -7] ; $n
7395   3479 2A            mov b, [d]
7396   347A FD AB         swp b
7397   347C D8            push b
7398   347D FA FB FF      lea d, [bp + -5] ; $warp
7399   3480 2A            mov b, [d]
7400   3481 FD AB         swp b
7401   3483 D8            push b
7402   3484 07 8C 34      call complete_maneuver
7403   3487 51 04 00      add sp, 4
7404   348A F9            leave
7405   348B 09            ret
7406   348C             
7407   348C             complete_maneuver:
7408   348C F8 00 00      enter 0 ; (push bp; mov bp, sp)
7409   348F             ;; unsigned int        time_used; 
7410   348F 52 02 00      sub sp, 2 ; time_used
7411   3492             ;; place_ship(); 
7412   3492 07 78 28      call place_ship
7413   3495             ;; maneuver_energy(n); 
7414   3495 FA 07 00      lea d, [bp + 7] ; $n
7415   3498 2A            mov b, [d]
7416   3499 FD AB         swp b
7417   349B D8            push b
7418   349C 07 2B 35      call maneuver_energy
7419   349F 51 02 00      add sp, 2
7420   34A2             ;; time_used = TO_FIXED(1); 
7421   34A2 FA FF FF      lea d, [bp + -1] ; $time_used
7422   34A5 DA            push d
7423   34A6 26 01 00      mov b, $1
7424   34A9 FD AB         swp b
7425   34AB D8            push b
7426   34AC 07 32 1D      call TO_FIXED
7427   34AF 51 02 00      add sp, 2
7428   34B2 E7            pop d
7429   34B3 FD 43         mov [d], b
7430   34B5             ;; if (warp < 100) 
7431   34B5             _if112_cond:
7432   34B5 FA 05 00      lea d, [bp + 5] ; $warp
7433   34B8 2A            mov b, [d]
7434   34B9             ; START RELATIONAL
7435   34B9 D7            push a
7436   34BA 11            mov a, b
7437   34BB 26 64 00      mov b, $64
7438   34BE B0            cmp a, b
7439   34BF FD 75         slu ; < (unsigned)
7440   34C1 E4            pop a
7441   34C2             ; END RELATIONAL
7442   34C2 C0 00 00      cmp b, 0
7443   34C5 C6 E8 34      je _if112_exit
7444   34C8             _if112_true:
7445   34C8             ;; time_used = TO_FIXED(FROM_FIXED00(warp)); 
7446   34C8 FA FF FF      lea d, [bp + -1] ; $time_used
7447   34CB DA            push d
7448   34CC FA 05 00      lea d, [bp + 5] ; $warp
7449   34CF 2A            mov b, [d]
7450   34D0 FD AB         swp b
7451   34D2 D8            push b
7452   34D3 07 67 1D      call FROM_FIXED00
7453   34D6 51 02 00      add sp, 2
7454   34D9 FD AB         swp b
7455   34DB D8            push b
7456   34DC 07 32 1D      call TO_FIXED
7457   34DF 51 02 00      add sp, 2
7458   34E2 E7            pop d
7459   34E3 FD 43         mov [d], b
7460   34E5 0A E8 34      jmp _if112_exit
7461   34E8             _if112_exit:
7462   34E8             ;; stardate = stardate + time_used; 
7463   34E8 3B 9F 62      mov d, _stardate ; $stardate
7464   34EB DA            push d
7465   34EC 3B 9F 62      mov d, _stardate ; $stardate
7466   34EF 2A            mov b, [d]
7467   34F0             ; START TERMS
7468   34F0 D7            push a
7469   34F1 11            mov a, b
7470   34F2 FA FF FF      lea d, [bp + -1] ; $time_used
7471   34F5 2A            mov b, [d]
7472   34F6 56            add b, a
7473   34F7 E4            pop a
7474   34F8             ; END TERMS
7475   34F8 E7            pop d
7476   34F9 FD 43         mov [d], b
7477   34FB             ;; if (FROM_FIXED(stardate) > time_start + time_up) 
7478   34FB             _if113_cond:
7479   34FB 3B 9F 62      mov d, _stardate ; $stardate
7480   34FE 2A            mov b, [d]
7481   34FF FD AB         swp b
7482   3501 D8            push b
7483   3502 07 44 1D      call FROM_FIXED
7484   3505 51 02 00      add sp, 2
7485   3508             ; START RELATIONAL
7486   3508 D7            push a
7487   3509 11            mov a, b
7488   350A 3B 83 62      mov d, _time_start ; $time_start
7489   350D 2A            mov b, [d]
7490   350E             ; START TERMS
7491   350E D7            push a
7492   350F 11            mov a, b
7493   3510 3B 85 62      mov d, _time_up ; $time_up
7494   3513 2A            mov b, [d]
7495   3514 56            add b, a
7496   3515 E4            pop a
7497   3516             ; END TERMS
7498   3516 B0            cmp a, b
7499   3517 FD 7F         sgt ; >
7500   3519 E4            pop a
7501   351A             ; END RELATIONAL
7502   351A C0 00 00      cmp b, 0
7503   351D C6 26 35      je _if113_exit
7504   3520             _if113_true:
7505   3520             ;; end_of_time(); 
7506   3520 07 ED 55      call end_of_time
7507   3523 0A 26 35      jmp _if113_exit
7508   3526             _if113_exit:
7509   3526             ;; short_range_scan(); 
7510   3526 07 AA 35      call short_range_scan
7511   3529 F9            leave
7512   352A 09            ret
7513   352B             
7514   352B             maneuver_energy:
7515   352B F8 00 00      enter 0 ; (push bp; mov bp, sp)
7516   352E             ;; energy = energy - n + 10; 
7517   352E 3B C5 61      mov d, _energy ; $energy
7518   3531 DA            push d
7519   3532 3B C5 61      mov d, _energy ; $energy
7520   3535 2A            mov b, [d]
7521   3536             ; START TERMS
7522   3536 D7            push a
7523   3537 11            mov a, b
7524   3538 FA 05 00      lea d, [bp + 5] ; $n
7525   353B 2A            mov b, [d]
7526   353C 60            sub a, b
7527   353D 27            mov b, a
7528   353E 11            mov a, b
7529   353F 26 0A 00      mov b, $a
7530   3542 56            add b, a
7531   3543 E4            pop a
7532   3544             ; END TERMS
7533   3544 E7            pop d
7534   3545 FD 43         mov [d], b
7535   3547             ;; if (energy >= 0) 
7536   3547             _if114_cond:
7537   3547 3B C5 61      mov d, _energy ; $energy
7538   354A 2A            mov b, [d]
7539   354B             ; START RELATIONAL
7540   354B D7            push a
7541   354C 11            mov a, b
7542   354D 26 00 00      mov b, $0
7543   3550 B0            cmp a, b
7544   3551 FD 80         sge ; >=
7545   3553 E4            pop a
7546   3554             ; END RELATIONAL
7547   3554 C0 00 00      cmp b, 0
7548   3557 C6 5F 35      je _if114_exit
7549   355A             _if114_true:
7550   355A             ;; return; 
7551   355A F9            leave
7552   355B 09            ret
7553   355C 0A 5F 35      jmp _if114_exit
7554   355F             _if114_exit:
7555   355F             ;; puts("Shield Control supplies energy to complete maneuver.\n"); 
7556   355F 26 A3 6B      mov b, _s80 ; "Shield Control supplies energy to complete maneuver.\n"
7557   3562 FD AB         swp b
7558   3564 D8            push b
7559   3565 07 48 15      call puts
7560   3568 51 02 00      add sp, 2
7561   356B             ;; shield = shield + energy; 
7562   356B 3B 80 62      mov d, _shield ; $shield
7563   356E DA            push d
7564   356F 3B 80 62      mov d, _shield ; $shield
7565   3572 2A            mov b, [d]
7566   3573             ; START TERMS
7567   3573 D7            push a
7568   3574 11            mov a, b
7569   3575 3B C5 61      mov d, _energy ; $energy
7570   3578 2A            mov b, [d]
7571   3579 56            add b, a
7572   357A E4            pop a
7573   357B             ; END TERMS
7574   357B E7            pop d
7575   357C FD 43         mov [d], b
7576   357E             ;; energy = 0; 
7577   357E 3B C5 61      mov d, _energy ; $energy
7578   3581 DA            push d
7579   3582 26 00 00      mov b, $0
7580   3585 E7            pop d
7581   3586 FD 43         mov [d], b
7582   3588             ;; if (shield <= 0) 
7583   3588             _if115_cond:
7584   3588 3B 80 62      mov d, _shield ; $shield
7585   358B 2A            mov b, [d]
7586   358C             ; START RELATIONAL
7587   358C D7            push a
7588   358D 11            mov a, b
7589   358E 26 00 00      mov b, $0
7590   3591 B0            cmp a, b
7591   3592 FD 73         slt ; <= (signed)
7592   3594 E4            pop a
7593   3595             ; END RELATIONAL
7594   3595 C0 00 00      cmp b, 0
7595   3598 C6 A8 35      je _if115_exit
7596   359B             _if115_true:
7597   359B             ;; shield = 0; 
7598   359B 3B 80 62      mov d, _shield ; $shield
7599   359E DA            push d
7600   359F 26 00 00      mov b, $0
7601   35A2 E7            pop d
7602   35A3 FD 43         mov [d], b
7603   35A5 0A A8 35      jmp _if115_exit
7604   35A8             _if115_exit:
7605   35A8 F9            leave
7606   35A9 09            ret
7607   35AA             
7608   35AA             short_range_scan:
7609   35AA F8 00 00      enter 0 ; (push bp; mov bp, sp)
7610   35AD             ;; int i, j; 
7611   35AD 52 02 00      sub sp, 2 ; i
7612   35B0 52 02 00      sub sp, 2 ; j
7613   35B3             ;; char *sC = "GREEN"; 
7614   35B3 52 02 00      sub sp, 2 ; sC
7615   35B6             ; --- START LOCAL VAR INITIALIZATION
7616   35B6 FA FB FF      lea d, [bp + -5] ; $sC
7617   35B9 DA            push d
7618   35BA 26 D9 6B      mov b, _s81 ; "GREEN"
7619   35BD E7            pop d
7620   35BE FD 43         mov [d], b
7621   35C0             ; --- END LOCAL VAR INITIALIZATION
7622   35C0             ;; if (energy < energy0 / 10) 
7623   35C0             _if116_cond:
7624   35C0 3B C5 61      mov d, _energy ; $energy
7625   35C3 2A            mov b, [d]
7626   35C4             ; START RELATIONAL
7627   35C4 D7            push a
7628   35C5 11            mov a, b
7629   35C6 3B C7 61      mov d, _energy0 ; $energy0
7630   35C9 2A            mov b, [d]
7631   35CA             ; START FACTORS
7632   35CA D7            push a
7633   35CB 11            mov a, b
7634   35CC 26 0A 00      mov b, $a
7635   35CF AE            div a, b
7636   35D0 27            mov b, a
7637   35D1 E4            pop a
7638   35D2             ; END FACTORS
7639   35D2 B0            cmp a, b
7640   35D3 FD 73         slt ; < (signed)
7641   35D5 E4            pop a
7642   35D6             ; END RELATIONAL
7643   35D6 C0 00 00      cmp b, 0
7644   35D9 C6 E9 35      je _if116_exit
7645   35DC             _if116_true:
7646   35DC             ;; sC = "YELLOW"; 
7647   35DC FA FB FF      lea d, [bp + -5] ; $sC
7648   35DF DA            push d
7649   35E0 26 DF 6B      mov b, _s82 ; "YELLOW"
7650   35E3 E7            pop d
7651   35E4 FD 43         mov [d], b
7652   35E6 0A E9 35      jmp _if116_exit
7653   35E9             _if116_exit:
7654   35E9             ;; if (klingons > 0) 
7655   35E9             _if117_cond:
7656   35E9 3B 77 62      mov d, _klingons ; $klingons
7657   35EC 32            mov bl, [d]
7658   35ED A7 00         mov bh, 0
7659   35EF             ; START RELATIONAL
7660   35EF D7            push a
7661   35F0 11            mov a, b
7662   35F1 26 00 00      mov b, $0
7663   35F4 B0            cmp a, b
7664   35F5 FD 81         sgu ; > (unsigned)
7665   35F7 E4            pop a
7666   35F8             ; END RELATIONAL
7667   35F8 C0 00 00      cmp b, 0
7668   35FB C6 0B 36      je _if117_exit
7669   35FE             _if117_true:
7670   35FE             ;; sC = "*RED*"; 
7671   35FE FA FB FF      lea d, [bp + -5] ; $sC
7672   3601 DA            push d
7673   3602 26 E6 6B      mov b, _s83 ; "*RED*"
7674   3605 E7            pop d
7675   3606 FD 43         mov [d], b
7676   3608 0A 0B 36      jmp _if117_exit
7677   360B             _if117_exit:
7678   360B             ;; docked = 0; 
7679   360B 3B C4 61      mov d, _docked ; $docked
7680   360E DA            push d
7681   360F 26 00 00      mov b, $0
7682   3612 E7            pop d
7683   3613 FD 3E         mov [d], bl
7684   3615             ;; for (i = (int) (FROM_FIXED00(ship_y) - 1); i <= (int) (FROM_FIXED00(ship_y) + 1); i++) 
7685   3615             _for118_init:
7686   3615 FA FF FF      lea d, [bp + -1] ; $i
7687   3618 DA            push d
7688   3619 3B 9B 62      mov d, _ship_y ; $ship_y
7689   361C 2A            mov b, [d]
7690   361D FD AB         swp b
7691   361F D8            push b
7692   3620 07 67 1D      call FROM_FIXED00
7693   3623 51 02 00      add sp, 2
7694   3626             ; START TERMS
7695   3626 D7            push a
7696   3627 11            mov a, b
7697   3628 26 01 00      mov b, $1
7698   362B 60            sub a, b
7699   362C 27            mov b, a
7700   362D E4            pop a
7701   362E             ; END TERMS
7702   362E E7            pop d
7703   362F FD 43         mov [d], b
7704   3631             _for118_cond:
7705   3631 FA FF FF      lea d, [bp + -1] ; $i
7706   3634 2A            mov b, [d]
7707   3635             ; START RELATIONAL
7708   3635 D7            push a
7709   3636 11            mov a, b
7710   3637 3B 9B 62      mov d, _ship_y ; $ship_y
7711   363A 2A            mov b, [d]
7712   363B FD AB         swp b
7713   363D D8            push b
7714   363E 07 67 1D      call FROM_FIXED00
7715   3641 51 02 00      add sp, 2
7716   3644             ; START TERMS
7717   3644 D7            push a
7718   3645 11            mov a, b
7719   3646 26 01 00      mov b, $1
7720   3649 56            add b, a
7721   364A E4            pop a
7722   364B             ; END TERMS
7723   364B B0            cmp a, b
7724   364C FD 73         slt ; <= (signed)
7725   364E E4            pop a
7726   364F             ; END RELATIONAL
7727   364F C0 00 00      cmp b, 0
7728   3652 C6 78 37      je _for118_exit
7729   3655             _for118_block:
7730   3655             ;; for (j = (int) (FROM_FIXED00(ship_x) - 1); j <= (int) (FROM_FIXED00(ship_x) + 1); j++) 
7731   3655             _for119_init:
7732   3655 FA FD FF      lea d, [bp + -3] ; $j
7733   3658 DA            push d
7734   3659 3B 9D 62      mov d, _ship_x ; $ship_x
7735   365C 2A            mov b, [d]
7736   365D FD AB         swp b
7737   365F D8            push b
7738   3660 07 67 1D      call FROM_FIXED00
7739   3663 51 02 00      add sp, 2
7740   3666             ; START TERMS
7741   3666 D7            push a
7742   3667 11            mov a, b
7743   3668 26 01 00      mov b, $1
7744   366B 60            sub a, b
7745   366C 27            mov b, a
7746   366D E4            pop a
7747   366E             ; END TERMS
7748   366E E7            pop d
7749   366F FD 43         mov [d], b
7750   3671             _for119_cond:
7751   3671 FA FD FF      lea d, [bp + -3] ; $j
7752   3674 2A            mov b, [d]
7753   3675             ; START RELATIONAL
7754   3675 D7            push a
7755   3676 11            mov a, b
7756   3677 3B 9D 62      mov d, _ship_x ; $ship_x
7757   367A 2A            mov b, [d]
7758   367B FD AB         swp b
7759   367D D8            push b
7760   367E 07 67 1D      call FROM_FIXED00
7761   3681 51 02 00      add sp, 2
7762   3684             ; START TERMS
7763   3684 D7            push a
7764   3685 11            mov a, b
7765   3686 26 01 00      mov b, $1
7766   3689 56            add b, a
7767   368A E4            pop a
7768   368B             ; END TERMS
7769   368B B0            cmp a, b
7770   368C FD 73         slt ; <= (signed)
7771   368E E4            pop a
7772   368F             ; END RELATIONAL
7773   368F C0 00 00      cmp b, 0
7774   3692 C6 68 37      je _for119_exit
7775   3695             _for119_block:
7776   3695             ;; if (i >= 1 && i <= 8 && j >= 1 && j <= 8) { 
7777   3695             _if120_cond:
7778   3695 FA FF FF      lea d, [bp + -1] ; $i
7779   3698 2A            mov b, [d]
7780   3699             ; START RELATIONAL
7781   3699 D7            push a
7782   369A 11            mov a, b
7783   369B 26 01 00      mov b, $1
7784   369E B0            cmp a, b
7785   369F FD 80         sge ; >=
7786   36A1 E4            pop a
7787   36A2             ; END RELATIONAL
7788   36A2 D7            push a
7789   36A3 11            mov a, b
7790   36A4 FA FF FF      lea d, [bp + -1] ; $i
7791   36A7 2A            mov b, [d]
7792   36A8             ; START RELATIONAL
7793   36A8 D7            push a
7794   36A9 11            mov a, b
7795   36AA 26 08 00      mov b, $8
7796   36AD B0            cmp a, b
7797   36AE FD 73         slt ; <= (signed)
7798   36B0 E4            pop a
7799   36B1             ; END RELATIONAL
7800   36B1 FD A7         sand a, b
7801   36B3 11            mov a, b
7802   36B4 FA FD FF      lea d, [bp + -3] ; $j
7803   36B7 2A            mov b, [d]
7804   36B8             ; START RELATIONAL
7805   36B8 D7            push a
7806   36B9 11            mov a, b
7807   36BA 26 01 00      mov b, $1
7808   36BD B0            cmp a, b
7809   36BE FD 80         sge ; >=
7810   36C0 E4            pop a
7811   36C1             ; END RELATIONAL
7812   36C1 FD A7         sand a, b
7813   36C3 11            mov a, b
7814   36C4 FA FD FF      lea d, [bp + -3] ; $j
7815   36C7 2A            mov b, [d]
7816   36C8             ; START RELATIONAL
7817   36C8 D7            push a
7818   36C9 11            mov a, b
7819   36CA 26 08 00      mov b, $8
7820   36CD B0            cmp a, b
7821   36CE FD 73         slt ; <= (signed)
7822   36D0 E4            pop a
7823   36D1             ; END RELATIONAL
7824   36D1 FD A7         sand a, b
7825   36D3 E4            pop a
7826   36D4 C0 00 00      cmp b, 0
7827   36D7 C6 58 37      je _if120_exit
7828   36DA             _if120_true:
7829   36DA             ;; if (quad[i+-1][j+-1] ==  		2     ) { 
7830   36DA             _if121_cond:
7831   36DA 3B A1 62      mov d, _quad_data ; $quad
7832   36DD D7            push a
7833   36DE DA            push d
7834   36DF FA FF FF      lea d, [bp + -1] ; $i
7835   36E2 2A            mov b, [d]
7836   36E3             ; START TERMS
7837   36E3 D7            push a
7838   36E4 11            mov a, b
7839   36E5 26 FF FF      mov b, $ffff
7840   36E8 56            add b, a
7841   36E9 E4            pop a
7842   36EA             ; END TERMS
7843   36EA E7            pop d
7844   36EB FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
7845   36EF DA            push d
7846   36F0 FA FD FF      lea d, [bp + -3] ; $j
7847   36F3 2A            mov b, [d]
7848   36F4             ; START TERMS
7849   36F4 D7            push a
7850   36F5 11            mov a, b
7851   36F6 26 FF FF      mov b, $ffff
7852   36F9 56            add b, a
7853   36FA E4            pop a
7854   36FB             ; END TERMS
7855   36FB E7            pop d
7856   36FC 5A            add d, b
7857   36FD E4            pop a
7858   36FE 32            mov bl, [d]
7859   36FF A7 00         mov bh, 0
7860   3701             ; START RELATIONAL
7861   3701 D7            push a
7862   3702 11            mov a, b
7863   3703 26 02 00      mov b, $2
7864   3706 B0            cmp a, b
7865   3707 FD 71         seq ; ==
7866   3709 E4            pop a
7867   370A             ; END RELATIONAL
7868   370A C0 00 00      cmp b, 0
7869   370D C6 55 37      je _if121_exit
7870   3710             _if121_true:
7871   3710             ;; docked = 1; 
7872   3710 3B C4 61      mov d, _docked ; $docked
7873   3713 DA            push d
7874   3714 26 01 00      mov b, $1
7875   3717 E7            pop d
7876   3718 FD 3E         mov [d], bl
7877   371A             ;; sC = "DOCKED"; 
7878   371A FA FB FF      lea d, [bp + -5] ; $sC
7879   371D DA            push d
7880   371E 26 EC 6B      mov b, _s84 ; "DOCKED"
7881   3721 E7            pop d
7882   3722 FD 43         mov [d], b
7883   3724             ;; energy = energy0; 
7884   3724 3B C5 61      mov d, _energy ; $energy
7885   3727 DA            push d
7886   3728 3B C7 61      mov d, _energy0 ; $energy0
7887   372B 2A            mov b, [d]
7888   372C E7            pop d
7889   372D FD 43         mov [d], b
7890   372F             ;; torps = torps0; 
7891   372F 3B 7A 62      mov d, _torps ; $torps
7892   3732 DA            push d
7893   3733 3B 7B 62      mov d, _torps0 ; $torps0
7894   3736 32            mov bl, [d]
7895   3737 A7 00         mov bh, 0
7896   3739 E7            pop d
7897   373A FD 3E         mov [d], bl
7898   373C             ;; puts("Shields dropped for docking purposes."); 
7899   373C 26 F3 6B      mov b, _s85 ; "Shields dropped for docking purposes."
7900   373F FD AB         swp b
7901   3741 D8            push b
7902   3742 07 48 15      call puts
7903   3745 51 02 00      add sp, 2
7904   3748             ;; shield = 0; 
7905   3748 3B 80 62      mov d, _shield ; $shield
7906   374B DA            push d
7907   374C 26 00 00      mov b, $0
7908   374F E7            pop d
7909   3750 FD 43         mov [d], b
7910   3752 0A 55 37      jmp _if121_exit
7911   3755             _if121_exit:
7912   3755 0A 58 37      jmp _if120_exit
7913   3758             _if120_exit:
7914   3758             _for119_update:
7915   3758 FA FD FF      lea d, [bp + -3] ; $j
7916   375B 2A            mov b, [d]
7917   375C D8            push b
7918   375D FD 77         inc b
7919   375F FA FD FF      lea d, [bp + -3] ; $j
7920   3762 FD 43         mov [d], b
7921   3764 E5            pop b
7922   3765 0A 71 36      jmp _for119_cond
7923   3768             _for119_exit:
7924   3768             _for118_update:
7925   3768 FA FF FF      lea d, [bp + -1] ; $i
7926   376B 2A            mov b, [d]
7927   376C D8            push b
7928   376D FD 77         inc b
7929   376F FA FF FF      lea d, [bp + -1] ; $i
7930   3772 FD 43         mov [d], b
7931   3774 E5            pop b
7932   3775 0A 31 36      jmp _for118_cond
7933   3778             _for118_exit:
7934   3778             ;; if (damage[2] < 0) { 
7935   3778             _if122_cond:
7936   3778 3B 87 62      mov d, _damage_data ; $damage
7937   377B D7            push a
7938   377C DA            push d
7939   377D 26 02 00      mov b, $2
7940   3780 E7            pop d
7941   3781 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
7942   3785 E4            pop a
7943   3786 2A            mov b, [d]
7944   3787             ; START RELATIONAL
7945   3787 D7            push a
7946   3788 11            mov a, b
7947   3789 26 00 00      mov b, $0
7948   378C B0            cmp a, b
7949   378D FD 73         slt ; < (signed)
7950   378F E4            pop a
7951   3790             ; END RELATIONAL
7952   3790 C0 00 00      cmp b, 0
7953   3793 C6 A7 37      je _if122_exit
7954   3796             _if122_true:
7955   3796             ;; puts("\n*** Short Range Sensors are out ***"); 
7956   3796 26 19 6C      mov b, _s86 ; "\n*** Short Range Sensors are out ***"
7957   3799 FD AB         swp b
7958   379B D8            push b
7959   379C 07 48 15      call puts
7960   379F 51 02 00      add sp, 2
7961   37A2             ;; return; 
7962   37A2 F9            leave
7963   37A3 09            ret
7964   37A4 0A A7 37      jmp _if122_exit
7965   37A7             _if122_exit:
7966   37A7             ;; puts(srs_1); 
7967   37A7 3B BB 63      mov d, _srs_1 ; $srs_1
7968   37AA 2A            mov b, [d]
7969   37AB FD AB         swp b
7970   37AD D8            push b
7971   37AE 07 48 15      call puts
7972   37B1 51 02 00      add sp, 2
7973   37B4             ;; for (i = 0; i < 8; i++) { 
7974   37B4             _for123_init:
7975   37B4 FA FF FF      lea d, [bp + -1] ; $i
7976   37B7 DA            push d
7977   37B8 26 00 00      mov b, $0
7978   37BB E7            pop d
7979   37BC FD 43         mov [d], b
7980   37BE             _for123_cond:
7981   37BE FA FF FF      lea d, [bp + -1] ; $i
7982   37C1 2A            mov b, [d]
7983   37C2             ; START RELATIONAL
7984   37C2 D7            push a
7985   37C3 11            mov a, b
7986   37C4 26 08 00      mov b, $8
7987   37C7 B0            cmp a, b
7988   37C8 FD 73         slt ; < (signed)
7989   37CA E4            pop a
7990   37CB             ; END RELATIONAL
7991   37CB C0 00 00      cmp b, 0
7992   37CE C6 B5 39      je _for123_exit
7993   37D1             _for123_block:
7994   37D1             ;; for (j = 0; j < 8; j++) 
7995   37D1             _for124_init:
7996   37D1 FA FD FF      lea d, [bp + -3] ; $j
7997   37D4 DA            push d
7998   37D5 26 00 00      mov b, $0
7999   37D8 E7            pop d
8000   37D9 FD 43         mov [d], b
8001   37DB             _for124_cond:
8002   37DB FA FD FF      lea d, [bp + -3] ; $j
8003   37DE 2A            mov b, [d]
8004   37DF             ; START RELATIONAL
8005   37DF D7            push a
8006   37E0 11            mov a, b
8007   37E1 26 08 00      mov b, $8
8008   37E4 B0            cmp a, b
8009   37E5 FD 73         slt ; < (signed)
8010   37E7 E4            pop a
8011   37E8             ; END RELATIONAL
8012   37E8 C0 00 00      cmp b, 0
8013   37EB C6 2C 38      je _for124_exit
8014   37EE             _for124_block:
8015   37EE             ;; puts(tilestr[quad[i][j]]); 
8016   37EE 3B BD 63      mov d, _tilestr_data ; $tilestr
8017   37F1 D7            push a
8018   37F2 DA            push d
8019   37F3 3B A1 62      mov d, _quad_data ; $quad
8020   37F6 D7            push a
8021   37F7 DA            push d
8022   37F8 FA FF FF      lea d, [bp + -1] ; $i
8023   37FB 2A            mov b, [d]
8024   37FC E7            pop d
8025   37FD FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
8026   3801 DA            push d
8027   3802 FA FD FF      lea d, [bp + -3] ; $j
8028   3805 2A            mov b, [d]
8029   3806 E7            pop d
8030   3807 5A            add d, b
8031   3808 E4            pop a
8032   3809 32            mov bl, [d]
8033   380A A7 00         mov bh, 0
8034   380C E7            pop d
8035   380D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8036   3811 E4            pop a
8037   3812 2A            mov b, [d]
8038   3813 FD AB         swp b
8039   3815 D8            push b
8040   3816 07 48 15      call puts
8041   3819 51 02 00      add sp, 2
8042   381C             _for124_update:
8043   381C FA FD FF      lea d, [bp + -3] ; $j
8044   381F 2A            mov b, [d]
8045   3820 D8            push b
8046   3821 FD 77         inc b
8047   3823 FA FD FF      lea d, [bp + -3] ; $j
8048   3826 FD 43         mov [d], b
8049   3828 E5            pop b
8050   3829 0A DB 37      jmp _for124_cond
8051   382C             _for124_exit:
8052   382C             ;; if (i == 0) 
8053   382C             _if125_cond:
8054   382C FA FF FF      lea d, [bp + -1] ; $i
8055   382F 2A            mov b, [d]
8056   3830             ; START RELATIONAL
8057   3830 D7            push a
8058   3831 11            mov a, b
8059   3832 26 00 00      mov b, $0
8060   3835 B0            cmp a, b
8061   3836 FD 71         seq ; ==
8062   3838 E4            pop a
8063   3839             ; END RELATIONAL
8064   3839 C0 00 00      cmp b, 0
8065   383C C6 5E 38      je _if125_exit
8066   383F             _if125_true:
8067   383F             ;; printf("    Stardate            %d\n", FROM_FIXED(stardate)); 
8068   383F 3B 9F 62      mov d, _stardate ; $stardate
8069   3842 2A            mov b, [d]
8070   3843 FD AB         swp b
8071   3845 D8            push b
8072   3846 07 44 1D      call FROM_FIXED
8073   3849 51 02 00      add sp, 2
8074   384C FD AB         swp b
8075   384E D8            push b
8076   384F 26 3E 6C      mov b, _s87 ; "    Stardate            %d\n"
8077   3852 FD AB         swp b
8078   3854 D8            push b
8079   3855 07 B8 07      call printf
8080   3858 51 04 00      add sp, 4
8081   385B 0A 5E 38      jmp _if125_exit
8082   385E             _if125_exit:
8083   385E             ;; if (i == 1) 
8084   385E             _if126_cond:
8085   385E FA FF FF      lea d, [bp + -1] ; $i
8086   3861 2A            mov b, [d]
8087   3862             ; START RELATIONAL
8088   3862 D7            push a
8089   3863 11            mov a, b
8090   3864 26 01 00      mov b, $1
8091   3867 B0            cmp a, b
8092   3868 FD 71         seq ; ==
8093   386A E4            pop a
8094   386B             ; END RELATIONAL
8095   386B C0 00 00      cmp b, 0
8096   386E C6 87 38      je _if126_exit
8097   3871             _if126_true:
8098   3871             ;; printf("    Condition           %s\n", sC); 
8099   3871 FA FB FF      lea d, [bp + -5] ; $sC
8100   3874 2A            mov b, [d]
8101   3875 FD AB         swp b
8102   3877 D8            push b
8103   3878 26 5A 6C      mov b, _s88 ; "    Condition           %s\n"
8104   387B FD AB         swp b
8105   387D D8            push b
8106   387E 07 B8 07      call printf
8107   3881 51 04 00      add sp, 4
8108   3884 0A 87 38      jmp _if126_exit
8109   3887             _if126_exit:
8110   3887             ;; if (i == 2) 
8111   3887             _if127_cond:
8112   3887 FA FF FF      lea d, [bp + -1] ; $i
8113   388A 2A            mov b, [d]
8114   388B             ; START RELATIONAL
8115   388B D7            push a
8116   388C 11            mov a, b
8117   388D 26 02 00      mov b, $2
8118   3890 B0            cmp a, b
8119   3891 FD 71         seq ; ==
8120   3893 E4            pop a
8121   3894             ; END RELATIONAL
8122   3894 C0 00 00      cmp b, 0
8123   3897 C6 B7 38      je _if127_exit
8124   389A             _if127_true:
8125   389A             ;; printf("    Quadrant            %d, %d\n", quad_y, quad_x); 
8126   389A 3B 7E 62      mov d, _quad_x ; $quad_x
8127   389D 2A            mov b, [d]
8128   389E FD AB         swp b
8129   38A0 D8            push b
8130   38A1 3B 7C 62      mov d, _quad_y ; $quad_y
8131   38A4 2A            mov b, [d]
8132   38A5 FD AB         swp b
8133   38A7 D8            push b
8134   38A8 26 76 6C      mov b, _s89 ; "    Quadrant            %d, %d\n"
8135   38AB FD AB         swp b
8136   38AD D8            push b
8137   38AE 07 B8 07      call printf
8138   38B1 51 06 00      add sp, 6
8139   38B4 0A B7 38      jmp _if127_exit
8140   38B7             _if127_exit:
8141   38B7             ;; if (i == 3) 
8142   38B7             _if128_cond:
8143   38B7 FA FF FF      lea d, [bp + -1] ; $i
8144   38BA 2A            mov b, [d]
8145   38BB             ; START RELATIONAL
8146   38BB D7            push a
8147   38BC 11            mov a, b
8148   38BD 26 03 00      mov b, $3
8149   38C0 B0            cmp a, b
8150   38C1 FD 71         seq ; ==
8151   38C3 E4            pop a
8152   38C4             ; END RELATIONAL
8153   38C4 C0 00 00      cmp b, 0
8154   38C7 C6 F9 38      je _if128_exit
8155   38CA             _if128_true:
8156   38CA             ;; printf("    Sector              %d, %d\n", FROM_FIXED00(ship_y), FROM_FIXED00(ship_x)); 
8157   38CA 3B 9D 62      mov d, _ship_x ; $ship_x
8158   38CD 2A            mov b, [d]
8159   38CE FD AB         swp b
8160   38D0 D8            push b
8161   38D1 07 67 1D      call FROM_FIXED00
8162   38D4 51 02 00      add sp, 2
8163   38D7 FD AB         swp b
8164   38D9 D8            push b
8165   38DA 3B 9B 62      mov d, _ship_y ; $ship_y
8166   38DD 2A            mov b, [d]
8167   38DE FD AB         swp b
8168   38E0 D8            push b
8169   38E1 07 67 1D      call FROM_FIXED00
8170   38E4 51 02 00      add sp, 2
8171   38E7 FD AB         swp b
8172   38E9 D8            push b
8173   38EA 26 96 6C      mov b, _s90 ; "    Sector              %d, %d\n"
8174   38ED FD AB         swp b
8175   38EF D8            push b
8176   38F0 07 B8 07      call printf
8177   38F3 51 06 00      add sp, 6
8178   38F6 0A F9 38      jmp _if128_exit
8179   38F9             _if128_exit:
8180   38F9             ;; if (i == 4) 
8181   38F9             _if129_cond:
8182   38F9 FA FF FF      lea d, [bp + -1] ; $i
8183   38FC 2A            mov b, [d]
8184   38FD             ; START RELATIONAL
8185   38FD D7            push a
8186   38FE 11            mov a, b
8187   38FF 26 04 00      mov b, $4
8188   3902 B0            cmp a, b
8189   3903 FD 71         seq ; ==
8190   3905 E4            pop a
8191   3906             ; END RELATIONAL
8192   3906 C0 00 00      cmp b, 0
8193   3909 C6 22 39      je _if129_exit
8194   390C             _if129_true:
8195   390C             ;; printf("    Photon Torpedoes    %d\n", torps); 
8196   390C 3B 7A 62      mov d, _torps ; $torps
8197   390F 32            mov bl, [d]
8198   3910 A7 00         mov bh, 0
8199   3912 DD            push bl
8200   3913 26 B6 6C      mov b, _s91 ; "    Photon Torpedoes    %d\n"
8201   3916 FD AB         swp b
8202   3918 D8            push b
8203   3919 07 B8 07      call printf
8204   391C 51 03 00      add sp, 3
8205   391F 0A 22 39      jmp _if129_exit
8206   3922             _if129_exit:
8207   3922             ;; if (i == 5) 
8208   3922             _if130_cond:
8209   3922 FA FF FF      lea d, [bp + -1] ; $i
8210   3925 2A            mov b, [d]
8211   3926             ; START RELATIONAL
8212   3926 D7            push a
8213   3927 11            mov a, b
8214   3928 26 05 00      mov b, $5
8215   392B B0            cmp a, b
8216   392C FD 71         seq ; ==
8217   392E E4            pop a
8218   392F             ; END RELATIONAL
8219   392F C0 00 00      cmp b, 0
8220   3932 C6 53 39      je _if130_exit
8221   3935             _if130_true:
8222   3935             ;; printf("    Total Energy        %d\n", energy + shield); 
8223   3935 3B C5 61      mov d, _energy ; $energy
8224   3938 2A            mov b, [d]
8225   3939             ; START TERMS
8226   3939 D7            push a
8227   393A 11            mov a, b
8228   393B 3B 80 62      mov d, _shield ; $shield
8229   393E 2A            mov b, [d]
8230   393F 56            add b, a
8231   3940 E4            pop a
8232   3941             ; END TERMS
8233   3941 FD AB         swp b
8234   3943 D8            push b
8235   3944 26 D2 6C      mov b, _s92 ; "    Total Energy        %d\n"
8236   3947 FD AB         swp b
8237   3949 D8            push b
8238   394A 07 B8 07      call printf
8239   394D 51 04 00      add sp, 4
8240   3950 0A 53 39      jmp _if130_exit
8241   3953             _if130_exit:
8242   3953             ;; if (i == 6) 
8243   3953             _if131_cond:
8244   3953 FA FF FF      lea d, [bp + -1] ; $i
8245   3956 2A            mov b, [d]
8246   3957             ; START RELATIONAL
8247   3957 D7            push a
8248   3958 11            mov a, b
8249   3959 26 06 00      mov b, $6
8250   395C B0            cmp a, b
8251   395D FD 71         seq ; ==
8252   395F E4            pop a
8253   3960             ; END RELATIONAL
8254   3960 C0 00 00      cmp b, 0
8255   3963 C6 7C 39      je _if131_exit
8256   3966             _if131_true:
8257   3966             ;; printf("    Shields             %d\n", shield); 
8258   3966 3B 80 62      mov d, _shield ; $shield
8259   3969 2A            mov b, [d]
8260   396A FD AB         swp b
8261   396C D8            push b
8262   396D 26 EE 6C      mov b, _s93 ; "    Shields             %d\n"
8263   3970 FD AB         swp b
8264   3972 D8            push b
8265   3973 07 B8 07      call printf
8266   3976 51 04 00      add sp, 4
8267   3979 0A 7C 39      jmp _if131_exit
8268   397C             _if131_exit:
8269   397C             ;; if (i == 7) 
8270   397C             _if132_cond:
8271   397C FA FF FF      lea d, [bp + -1] ; $i
8272   397F 2A            mov b, [d]
8273   3980             ; START RELATIONAL
8274   3980 D7            push a
8275   3981 11            mov a, b
8276   3982 26 07 00      mov b, $7
8277   3985 B0            cmp a, b
8278   3986 FD 71         seq ; ==
8279   3988 E4            pop a
8280   3989             ; END RELATIONAL
8281   3989 C0 00 00      cmp b, 0
8282   398C C6 A5 39      je _if132_exit
8283   398F             _if132_true:
8284   398F             ;; printf("    Klingons Remaining  %d\n", klingons_left); 
8285   398F 3B 79 62      mov d, _klingons_left ; $klingons_left
8286   3992 32            mov bl, [d]
8287   3993 A7 00         mov bh, 0
8288   3995 DD            push bl
8289   3996 26 0A 6D      mov b, _s94 ; "    Klingons Remaining  %d\n"
8290   3999 FD AB         swp b
8291   399B D8            push b
8292   399C 07 B8 07      call printf
8293   399F 51 03 00      add sp, 3
8294   39A2 0A A5 39      jmp _if132_exit
8295   39A5             _if132_exit:
8296   39A5             _for123_update:
8297   39A5 FA FF FF      lea d, [bp + -1] ; $i
8298   39A8 2A            mov b, [d]
8299   39A9 D8            push b
8300   39AA FD 77         inc b
8301   39AC FA FF FF      lea d, [bp + -1] ; $i
8302   39AF FD 43         mov [d], b
8303   39B1 E5            pop b
8304   39B2 0A BE 37      jmp _for123_cond
8305   39B5             _for123_exit:
8306   39B5             ;; puts(srs_1); 
8307   39B5 3B BB 63      mov d, _srs_1 ; $srs_1
8308   39B8 2A            mov b, [d]
8309   39B9 FD AB         swp b
8310   39BB D8            push b
8311   39BC 07 48 15      call puts
8312   39BF 51 02 00      add sp, 2
8313   39C2             ;; putchar('\n'); 
8314   39C2 26 0A 00      mov b, $a
8315   39C5 DD            push bl
8316   39C6 07 12 15      call putchar
8317   39C9 51 01 00      add sp, 1
8318   39CC             ;; return; 
8319   39CC F9            leave
8320   39CD 09            ret
8321   39CE             
8322   39CE             put1bcd:
8323   39CE F8 00 00      enter 0 ; (push bp; mov bp, sp)
8324   39D1             ;; v = v & 0x0F; 
8325   39D1 FA 05 00      lea d, [bp + 5] ; $v
8326   39D4 DA            push d
8327   39D5 FA 05 00      lea d, [bp + 5] ; $v
8328   39D8 32            mov bl, [d]
8329   39D9 A7 00         mov bh, 0
8330   39DB D7            push a
8331   39DC 11            mov a, b
8332   39DD 26 0F 00      mov b, $f
8333   39E0 FD 92         and b, a ; &
8334   39E2 E4            pop a
8335   39E3 E7            pop d
8336   39E4 FD 3E         mov [d], bl
8337   39E6             ;; putchar('0' + v); 
8338   39E6 26 30 00      mov b, $30
8339   39E9             ; START TERMS
8340   39E9 D7            push a
8341   39EA 11            mov a, b
8342   39EB FA 05 00      lea d, [bp + 5] ; $v
8343   39EE 32            mov bl, [d]
8344   39EF A7 00         mov bh, 0
8345   39F1 56            add b, a
8346   39F2 E4            pop a
8347   39F3             ; END TERMS
8348   39F3 DD            push bl
8349   39F4 07 12 15      call putchar
8350   39F7 51 01 00      add sp, 1
8351   39FA F9            leave
8352   39FB 09            ret
8353   39FC             
8354   39FC             putbcd:
8355   39FC F8 00 00      enter 0 ; (push bp; mov bp, sp)
8356   39FF             ;; put1bcd(x >> 8); 
8357   39FF FA 05 00      lea d, [bp + 5] ; $x
8358   3A02 2A            mov b, [d]
8359   3A03             ; START SHIFT
8360   3A03 D7            push a
8361   3A04 11            mov a, b
8362   3A05 26 08 00      mov b, $8
8363   3A08 FD 39         mov c, b
8364   3A0A A1            shr a, cl
8365   3A0B 27            mov b, a
8366   3A0C E4            pop a
8367   3A0D             ; END SHIFT
8368   3A0D DD            push bl
8369   3A0E 07 CE 39      call put1bcd
8370   3A11 51 01 00      add sp, 1
8371   3A14             ;; put1bcd(x >> 4); 
8372   3A14 FA 05 00      lea d, [bp + 5] ; $x
8373   3A17 2A            mov b, [d]
8374   3A18             ; START SHIFT
8375   3A18 D7            push a
8376   3A19 11            mov a, b
8377   3A1A 26 04 00      mov b, $4
8378   3A1D FD 39         mov c, b
8379   3A1F A1            shr a, cl
8380   3A20 27            mov b, a
8381   3A21 E4            pop a
8382   3A22             ; END SHIFT
8383   3A22 DD            push bl
8384   3A23 07 CE 39      call put1bcd
8385   3A26 51 01 00      add sp, 1
8386   3A29             ;; put1bcd(x); 
8387   3A29 FA 05 00      lea d, [bp + 5] ; $x
8388   3A2C 2A            mov b, [d]
8389   3A2D DD            push bl
8390   3A2E 07 CE 39      call put1bcd
8391   3A31 51 01 00      add sp, 1
8392   3A34 F9            leave
8393   3A35 09            ret
8394   3A36             
8395   3A36             long_range_scan:
8396   3A36 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8397   3A39             ;; int i, j; 
8398   3A39 52 02 00      sub sp, 2 ; i
8399   3A3C 52 02 00      sub sp, 2 ; j
8400   3A3F             ;; if (inoperable(3)) 
8401   3A3F             _if133_cond:
8402   3A3F 26 03 00      mov b, $3
8403   3A42 DD            push bl
8404   3A43 07 B0 20      call inoperable
8405   3A46 51 01 00      add sp, 1
8406   3A49 C0 00 00      cmp b, 0
8407   3A4C C6 54 3A      je _if133_exit
8408   3A4F             _if133_true:
8409   3A4F             ;; return; 
8410   3A4F F9            leave
8411   3A50 09            ret
8412   3A51 0A 54 3A      jmp _if133_exit
8413   3A54             _if133_exit:
8414   3A54             ;; printf("Long Range Scan for Quadrant %d, %d\n\n", quad_y, quad_x); 
8415   3A54 3B 7E 62      mov d, _quad_x ; $quad_x
8416   3A57 2A            mov b, [d]
8417   3A58 FD AB         swp b
8418   3A5A D8            push b
8419   3A5B 3B 7C 62      mov d, _quad_y ; $quad_y
8420   3A5E 2A            mov b, [d]
8421   3A5F FD AB         swp b
8422   3A61 D8            push b
8423   3A62 26 26 6D      mov b, _s95 ; "Long Range Scan for Quadrant %d, %d\n\n"
8424   3A65 FD AB         swp b
8425   3A67 D8            push b
8426   3A68 07 B8 07      call printf
8427   3A6B 51 06 00      add sp, 6
8428   3A6E             ;; for (i = quad_y - 1; i <= quad_y + 1; i++) { 
8429   3A6E             _for134_init:
8430   3A6E FA FF FF      lea d, [bp + -1] ; $i
8431   3A71 DA            push d
8432   3A72 3B 7C 62      mov d, _quad_y ; $quad_y
8433   3A75 2A            mov b, [d]
8434   3A76             ; START TERMS
8435   3A76 D7            push a
8436   3A77 11            mov a, b
8437   3A78 26 01 00      mov b, $1
8438   3A7B 60            sub a, b
8439   3A7C 27            mov b, a
8440   3A7D E4            pop a
8441   3A7E             ; END TERMS
8442   3A7E E7            pop d
8443   3A7F FD 43         mov [d], b
8444   3A81             _for134_cond:
8445   3A81 FA FF FF      lea d, [bp + -1] ; $i
8446   3A84 2A            mov b, [d]
8447   3A85             ; START RELATIONAL
8448   3A85 D7            push a
8449   3A86 11            mov a, b
8450   3A87 3B 7C 62      mov d, _quad_y ; $quad_y
8451   3A8A 2A            mov b, [d]
8452   3A8B             ; START TERMS
8453   3A8B D7            push a
8454   3A8C 11            mov a, b
8455   3A8D 26 01 00      mov b, $1
8456   3A90 56            add b, a
8457   3A91 E4            pop a
8458   3A92             ; END TERMS
8459   3A92 B0            cmp a, b
8460   3A93 FD 73         slt ; <= (signed)
8461   3A95 E4            pop a
8462   3A96             ; END RELATIONAL
8463   3A96 C0 00 00      cmp b, 0
8464   3A99 C6 D3 3B      je _for134_exit
8465   3A9C             _for134_block:
8466   3A9C             ;; printf("%s:", lrs_1); 
8467   3A9C 3B E6 63      mov d, _lrs_1 ; $lrs_1
8468   3A9F 2A            mov b, [d]
8469   3AA0 FD AB         swp b
8470   3AA2 D8            push b
8471   3AA3 26 4C 6D      mov b, _s96 ; "%s:"
8472   3AA6 FD AB         swp b
8473   3AA8 D8            push b
8474   3AA9 07 B8 07      call printf
8475   3AAC 51 04 00      add sp, 4
8476   3AAF             ;; for (j = quad_x - 1; j <= quad_x + 1; j++) { 
8477   3AAF             _for135_init:
8478   3AAF FA FD FF      lea d, [bp + -3] ; $j
8479   3AB2 DA            push d
8480   3AB3 3B 7E 62      mov d, _quad_x ; $quad_x
8481   3AB6 2A            mov b, [d]
8482   3AB7             ; START TERMS
8483   3AB7 D7            push a
8484   3AB8 11            mov a, b
8485   3AB9 26 01 00      mov b, $1
8486   3ABC 60            sub a, b
8487   3ABD 27            mov b, a
8488   3ABE E4            pop a
8489   3ABF             ; END TERMS
8490   3ABF E7            pop d
8491   3AC0 FD 43         mov [d], b
8492   3AC2             _for135_cond:
8493   3AC2 FA FD FF      lea d, [bp + -3] ; $j
8494   3AC5 2A            mov b, [d]
8495   3AC6             ; START RELATIONAL
8496   3AC6 D7            push a
8497   3AC7 11            mov a, b
8498   3AC8 3B 7E 62      mov d, _quad_x ; $quad_x
8499   3ACB 2A            mov b, [d]
8500   3ACC             ; START TERMS
8501   3ACC D7            push a
8502   3ACD 11            mov a, b
8503   3ACE 26 01 00      mov b, $1
8504   3AD1 56            add b, a
8505   3AD2 E4            pop a
8506   3AD3             ; END TERMS
8507   3AD3 B0            cmp a, b
8508   3AD4 FD 73         slt ; <= (signed)
8509   3AD6 E4            pop a
8510   3AD7             ; END RELATIONAL
8511   3AD7 C0 00 00      cmp b, 0
8512   3ADA C6 B9 3B      je _for135_exit
8513   3ADD             _for135_block:
8514   3ADD             ;; putchar(' '); 
8515   3ADD 26 20 00      mov b, $20
8516   3AE0 DD            push bl
8517   3AE1 07 12 15      call putchar
8518   3AE4 51 01 00      add sp, 1
8519   3AE7             ;; if (i > 0 && i <= 8 && j > 0 && j <= 8) { 
8520   3AE7             _if136_cond:
8521   3AE7 FA FF FF      lea d, [bp + -1] ; $i
8522   3AEA 2A            mov b, [d]
8523   3AEB             ; START RELATIONAL
8524   3AEB D7            push a
8525   3AEC 11            mov a, b
8526   3AED 26 00 00      mov b, $0
8527   3AF0 B0            cmp a, b
8528   3AF1 FD 7F         sgt ; >
8529   3AF3 E4            pop a
8530   3AF4             ; END RELATIONAL
8531   3AF4 D7            push a
8532   3AF5 11            mov a, b
8533   3AF6 FA FF FF      lea d, [bp + -1] ; $i
8534   3AF9 2A            mov b, [d]
8535   3AFA             ; START RELATIONAL
8536   3AFA D7            push a
8537   3AFB 11            mov a, b
8538   3AFC 26 08 00      mov b, $8
8539   3AFF B0            cmp a, b
8540   3B00 FD 73         slt ; <= (signed)
8541   3B02 E4            pop a
8542   3B03             ; END RELATIONAL
8543   3B03 FD A7         sand a, b
8544   3B05 11            mov a, b
8545   3B06 FA FD FF      lea d, [bp + -3] ; $j
8546   3B09 2A            mov b, [d]
8547   3B0A             ; START RELATIONAL
8548   3B0A D7            push a
8549   3B0B 11            mov a, b
8550   3B0C 26 00 00      mov b, $0
8551   3B0F B0            cmp a, b
8552   3B10 FD 7F         sgt ; >
8553   3B12 E4            pop a
8554   3B13             ; END RELATIONAL
8555   3B13 FD A7         sand a, b
8556   3B15 11            mov a, b
8557   3B16 FA FD FF      lea d, [bp + -3] ; $j
8558   3B19 2A            mov b, [d]
8559   3B1A             ; START RELATIONAL
8560   3B1A D7            push a
8561   3B1B 11            mov a, b
8562   3B1C 26 08 00      mov b, $8
8563   3B1F B0            cmp a, b
8564   3B20 FD 73         slt ; <= (signed)
8565   3B22 E4            pop a
8566   3B23             ; END RELATIONAL
8567   3B23 FD A7         sand a, b
8568   3B25 E4            pop a
8569   3B26 C0 00 00      cmp b, 0
8570   3B29 C6 91 3B      je _if136_else
8571   3B2C             _if136_true:
8572   3B2C             ;; map[i][j] = map[i][j] |   0x1000		/* Set if this sector was mapped */          ; 
8573   3B2C 3B C9 61      mov d, _map_data ; $map
8574   3B2F D7            push a
8575   3B30 DA            push d
8576   3B31 FA FF FF      lea d, [bp + -1] ; $i
8577   3B34 2A            mov b, [d]
8578   3B35 E7            pop d
8579   3B36 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
8580   3B3A DA            push d
8581   3B3B FA FD FF      lea d, [bp + -3] ; $j
8582   3B3E 2A            mov b, [d]
8583   3B3F E7            pop d
8584   3B40 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8585   3B44 E4            pop a
8586   3B45 DA            push d
8587   3B46 3B C9 61      mov d, _map_data ; $map
8588   3B49 D7            push a
8589   3B4A DA            push d
8590   3B4B FA FF FF      lea d, [bp + -1] ; $i
8591   3B4E 2A            mov b, [d]
8592   3B4F E7            pop d
8593   3B50 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
8594   3B54 DA            push d
8595   3B55 FA FD FF      lea d, [bp + -3] ; $j
8596   3B58 2A            mov b, [d]
8597   3B59 E7            pop d
8598   3B5A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8599   3B5E E4            pop a
8600   3B5F 2A            mov b, [d]
8601   3B60 D7            push a
8602   3B61 11            mov a, b
8603   3B62 26 00 10      mov b, $1000
8604   3B65 FD 70         or b, a ; |
8605   3B67 E4            pop a
8606   3B68 E7            pop d
8607   3B69 FD 43         mov [d], b
8608   3B6B             ;; putbcd(map[i][j]); 
8609   3B6B 3B C9 61      mov d, _map_data ; $map
8610   3B6E D7            push a
8611   3B6F DA            push d
8612   3B70 FA FF FF      lea d, [bp + -1] ; $i
8613   3B73 2A            mov b, [d]
8614   3B74 E7            pop d
8615   3B75 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
8616   3B79 DA            push d
8617   3B7A FA FD FF      lea d, [bp + -3] ; $j
8618   3B7D 2A            mov b, [d]
8619   3B7E E7            pop d
8620   3B7F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8621   3B83 E4            pop a
8622   3B84 2A            mov b, [d]
8623   3B85 FD AB         swp b
8624   3B87 D8            push b
8625   3B88 07 FC 39      call putbcd
8626   3B8B 51 02 00      add sp, 2
8627   3B8E 0A 9D 3B      jmp _if136_exit
8628   3B91             _if136_else:
8629   3B91             ;; puts("***"); 
8630   3B91 26 50 6D      mov b, _s97 ; "***"
8631   3B94 FD AB         swp b
8632   3B96 D8            push b
8633   3B97 07 48 15      call puts
8634   3B9A 51 02 00      add sp, 2
8635   3B9D             _if136_exit:
8636   3B9D             ;; puts(" :"); 
8637   3B9D 26 54 6D      mov b, _s98 ; " :"
8638   3BA0 FD AB         swp b
8639   3BA2 D8            push b
8640   3BA3 07 48 15      call puts
8641   3BA6 51 02 00      add sp, 2
8642   3BA9             _for135_update:
8643   3BA9 FA FD FF      lea d, [bp + -3] ; $j
8644   3BAC 2A            mov b, [d]
8645   3BAD D8            push b
8646   3BAE FD 77         inc b
8647   3BB0 FA FD FF      lea d, [bp + -3] ; $j
8648   3BB3 FD 43         mov [d], b
8649   3BB5 E5            pop b
8650   3BB6 0A C2 3A      jmp _for135_cond
8651   3BB9             _for135_exit:
8652   3BB9             ;; putchar('\n'); 
8653   3BB9 26 0A 00      mov b, $a
8654   3BBC DD            push bl
8655   3BBD 07 12 15      call putchar
8656   3BC0 51 01 00      add sp, 1
8657   3BC3             _for134_update:
8658   3BC3 FA FF FF      lea d, [bp + -1] ; $i
8659   3BC6 2A            mov b, [d]
8660   3BC7 D8            push b
8661   3BC8 FD 77         inc b
8662   3BCA FA FF FF      lea d, [bp + -1] ; $i
8663   3BCD FD 43         mov [d], b
8664   3BCF E5            pop b
8665   3BD0 0A 81 3A      jmp _for134_cond
8666   3BD3             _for134_exit:
8667   3BD3             ;; printf("%s\n", lrs_1); 
8668   3BD3 3B E6 63      mov d, _lrs_1 ; $lrs_1
8669   3BD6 2A            mov b, [d]
8670   3BD7 FD AB         swp b
8671   3BD9 D8            push b
8672   3BDA 26 57 6D      mov b, _s99 ; "%s\n"
8673   3BDD FD AB         swp b
8674   3BDF D8            push b
8675   3BE0 07 B8 07      call printf
8676   3BE3 51 04 00      add sp, 4
8677   3BE6 F9            leave
8678   3BE7 09            ret
8679   3BE8             
8680   3BE8             no_klingon:
8681   3BE8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8682   3BEB             ;; if (klingons <= 0) { 
8683   3BEB             _if137_cond:
8684   3BEB 3B 77 62      mov d, _klingons ; $klingons
8685   3BEE 32            mov bl, [d]
8686   3BEF A7 00         mov bh, 0
8687   3BF1             ; START RELATIONAL
8688   3BF1 D7            push a
8689   3BF2 11            mov a, b
8690   3BF3 26 00 00      mov b, $0
8691   3BF6 B0            cmp a, b
8692   3BF7 FD 75         slu ; <= (unsigned)
8693   3BF9 E4            pop a
8694   3BFA             ; END RELATIONAL
8695   3BFA C0 00 00      cmp b, 0
8696   3BFD C6 14 3C      je _if137_exit
8697   3C00             _if137_true:
8698   3C00             ;; puts("Science Officer Spock reports:\n  'Sensors show no enemy ships in this quadrant'\n"); 
8699   3C00 26 5B 6D      mov b, _s100 ; "Science Officer Spock reports:\n  'Sensors show no enemy ships in this quadrant'\n"
8700   3C03 FD AB         swp b
8701   3C05 D8            push b
8702   3C06 07 48 15      call puts
8703   3C09 51 02 00      add sp, 2
8704   3C0C             ;; return 1; 
8705   3C0C 26 01 00      mov b, $1
8706   3C0F F9            leave
8707   3C10 09            ret
8708   3C11 0A 14 3C      jmp _if137_exit
8709   3C14             _if137_exit:
8710   3C14             ;; return 0; 
8711   3C14 26 00 00      mov b, $0
8712   3C17 F9            leave
8713   3C18 09            ret
8714   3C19             
8715   3C19             wipe_klingon:
8716   3C19 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8717   3C1C             ;; quad[k->y+-1][k->x+-1] =  		0      ; 
8718   3C1C 3B A1 62      mov d, _quad_data ; $quad
8719   3C1F D7            push a
8720   3C20 DA            push d
8721   3C21 FA 05 00      lea d, [bp + 5] ; $k
8722   3C24 FD 2A         mov d, [d]
8723   3C26 58 00 00      add d, 0
8724   3C29 32            mov bl, [d]
8725   3C2A A7 00         mov bh, 0
8726   3C2C             ; START TERMS
8727   3C2C D7            push a
8728   3C2D 11            mov a, b
8729   3C2E 26 FF FF      mov b, $ffff
8730   3C31 56            add b, a
8731   3C32 E4            pop a
8732   3C33             ; END TERMS
8733   3C33 E7            pop d
8734   3C34 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
8735   3C38 DA            push d
8736   3C39 FA 05 00      lea d, [bp + 5] ; $k
8737   3C3C FD 2A         mov d, [d]
8738   3C3E 58 01 00      add d, 1
8739   3C41 32            mov bl, [d]
8740   3C42 A7 00         mov bh, 0
8741   3C44             ; START TERMS
8742   3C44 D7            push a
8743   3C45 11            mov a, b
8744   3C46 26 FF FF      mov b, $ffff
8745   3C49 56            add b, a
8746   3C4A E4            pop a
8747   3C4B             ; END TERMS
8748   3C4B E7            pop d
8749   3C4C 5A            add d, b
8750   3C4D E4            pop a
8751   3C4E DA            push d
8752   3C4F 26 00 00      mov b, $0
8753   3C52 E7            pop d
8754   3C53 FD 3E         mov [d], bl
8755   3C55 F9            leave
8756   3C56 09            ret
8757   3C57             
8758   3C57             phaser_control:
8759   3C57 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8760   3C5A             ;; int i; 
8761   3C5A 52 02 00      sub sp, 2 ; i
8762   3C5D             ;; long int       phaser_energy; 
8763   3C5D 52 04 00      sub sp, 4 ; phaser_energy
8764   3C60             ;; long unsigned int        h1; 
8765   3C60 52 04 00      sub sp, 4 ; h1
8766   3C63             ;; int h; 
8767   3C63 52 02 00      sub sp, 2 ; h
8768   3C66             ;; struct klingon *k; 
8769   3C66 52 02 00      sub sp, 2 ; k
8770   3C69             ;; k = &kdata; 
8771   3C69 FA F3 FF      lea d, [bp + -13] ; $k
8772   3C6C DA            push d
8773   3C6D 3B 6B 62      mov d, _kdata_data ; $kdata
8774   3C70 2D            mov b, d
8775   3C71 E7            pop d
8776   3C72 FD 43         mov [d], b
8777   3C74             ;; if (inoperable(4)) 
8778   3C74             _if138_cond:
8779   3C74 26 04 00      mov b, $4
8780   3C77 DD            push bl
8781   3C78 07 B0 20      call inoperable
8782   3C7B 51 01 00      add sp, 1
8783   3C7E C0 00 00      cmp b, 0
8784   3C81 C6 89 3C      je _if138_exit
8785   3C84             _if138_true:
8786   3C84             ;; return; 
8787   3C84 F9            leave
8788   3C85 09            ret
8789   3C86 0A 89 3C      jmp _if138_exit
8790   3C89             _if138_exit:
8791   3C89             ;; if (no_klingon()) 
8792   3C89             _if139_cond:
8793   3C89 07 E8 3B      call no_klingon
8794   3C8C C0 00 00      cmp b, 0
8795   3C8F C6 97 3C      je _if139_exit
8796   3C92             _if139_true:
8797   3C92             ;; return; 
8798   3C92 F9            leave
8799   3C93 09            ret
8800   3C94 0A 97 3C      jmp _if139_exit
8801   3C97             _if139_exit:
8802   3C97             ;; if (damage[8] < 0) 
8803   3C97             _if140_cond:
8804   3C97 3B 87 62      mov d, _damage_data ; $damage
8805   3C9A D7            push a
8806   3C9B DA            push d
8807   3C9C 26 08 00      mov b, $8
8808   3C9F E7            pop d
8809   3CA0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8810   3CA4 E4            pop a
8811   3CA5 2A            mov b, [d]
8812   3CA6             ; START RELATIONAL
8813   3CA6 D7            push a
8814   3CA7 11            mov a, b
8815   3CA8 26 00 00      mov b, $0
8816   3CAB B0            cmp a, b
8817   3CAC FD 73         slt ; < (signed)
8818   3CAE E4            pop a
8819   3CAF             ; END RELATIONAL
8820   3CAF C0 00 00      cmp b, 0
8821   3CB2 C6 C4 3C      je _if140_exit
8822   3CB5             _if140_true:
8823   3CB5             ;; puts("Computer failure hampers accuracy."); 
8824   3CB5 26 AC 6D      mov b, _s101 ; "Computer failure hampers accuracy."
8825   3CB8 FD AB         swp b
8826   3CBA D8            push b
8827   3CBB 07 48 15      call puts
8828   3CBE 51 02 00      add sp, 2
8829   3CC1 0A C4 3C      jmp _if140_exit
8830   3CC4             _if140_exit:
8831   3CC4             ;; printf("Phasers locked on target;\n Energy available = %d units\n\n Number of units to fire: ", energy); 
8832   3CC4 3B C5 61      mov d, _energy ; $energy
8833   3CC7 2A            mov b, [d]
8834   3CC8 FD AB         swp b
8835   3CCA D8            push b
8836   3CCB 26 CF 6D      mov b, _s102 ; "Phasers locked on target;\n Energy available = %d units\n\n Number of units to fire: "
8837   3CCE FD AB         swp b
8838   3CD0 D8            push b
8839   3CD1 07 B8 07      call printf
8840   3CD4 51 04 00      add sp, 4
8841   3CD7             ;; phaser_energy = input_int(); 
8842   3CD7 FA FB FF      lea d, [bp + -5] ; $phaser_energy
8843   3CDA DA            push d
8844   3CDB 07 16 20      call input_int
8845   3CDE E7            pop d
8846   3CDF FD 43         mov [d], b
8847   3CE1 28            mov b, c
8848   3CE2 FD 44 02 00   mov [d + 2], b
8849   3CE6             ;; if (phaser_energy <= 0) 
8850   3CE6             _if141_cond:
8851   3CE6 FA FB FF      lea d, [bp + -5] ; $phaser_energy
8852   3CE9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
8853   3CEC FD 39         mov c, b ; And place it into C
8854   3CEE 2A            mov b, [d] ; Lower Word in B
8855   3CEF             ; START RELATIONAL
8856   3CEF D7            push a
8857   3CF0 FD D8         push g
8858   3CF2 11            mov a, b
8859   3CF3 FD 7A         mov g, c
8860   3CF5 26 00 00      mov b, $0
8861   3CF8 38 00 00      mov c, 0
8862   3CFB FD 74         sle
8863   3CFD FD F1         pop g
8864   3CFF E4            pop a
8865   3D00             ; END RELATIONAL
8866   3D00 C0 00 00      cmp b, 0
8867   3D03 C6 0B 3D      je _if141_exit
8868   3D06             _if141_true:
8869   3D06             ;; return; 
8870   3D06 F9            leave
8871   3D07 09            ret
8872   3D08 0A 0B 3D      jmp _if141_exit
8873   3D0B             _if141_exit:
8874   3D0B             ;; if (energy - phaser_energy < 0) { 
8875   3D0B             _if142_cond:
8876   3D0B 3B C5 61      mov d, _energy ; $energy
8877   3D0E 2A            mov b, [d]
8878   3D0F             ; START TERMS
8879   3D0F D7            push a
8880   3D10 11            mov a, b
8881   3D11 FA FB FF      lea d, [bp + -5] ; $phaser_energy
8882   3D14 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
8883   3D17 FD 39         mov c, b ; And place it into C
8884   3D19 2A            mov b, [d] ; Lower Word in B
8885   3D1A 60            sub a, b
8886   3D1B 27            mov b, a
8887   3D1C E4            pop a
8888   3D1D             ; END TERMS
8889   3D1D             ; START RELATIONAL
8890   3D1D D7            push a
8891   3D1E FD D8         push g
8892   3D20 11            mov a, b
8893   3D21 FD 7A         mov g, c
8894   3D23 26 00 00      mov b, $0
8895   3D26 38 00 00      mov c, 0
8896   3D29 FD AF 00 00   cmp32 ga, cb
8896   3D2D 00 00 00 00 
8896   3D31 00 00 00 00 
8896   3D35 00 00 00 00 
8896   3D39 00 00 00 00 
8896   3D3D 00 00 00 00 
8896   3D41 00 00 00 00 
8896   3D45 00 00 00 00 
8896   3D49 00 00 00 00 
8896   3D4D 00 00 00 00 
8896   3D51 00 00 00 00 
8896   3D55 00 00 00 00 
8896   3D59 00 00 00 00 
8896   3D5D 00 00 00 00 
8896   3D61 00 00 00 00 
8896   3D65 00 00 00 00 
8896   3D69 00 00 00 00 
8896   3D6D 00 00 00 00 
8896   3D71 00 00 00 00 
8896   3D75 00 00 00 00 
8896   3D79 00 00 00 00 
8896   3D7D 00 00 00 00 
8896   3D81 00 00 00 00 
8896   3D85 00 00 00 00 
8896   3D89 00 00 00 00 
8896   3D8D 00 00 00 00 
8896   3D91 00 00 00 00 
8896   3D95 00 00 00 00 
8896   3D99 00 00 00 00 
8896   3D9D 00 00 00 00 
8896   3DA1 00 00 00 00 
8896   3DA5 00 00 00 00 
8896   3DA9 00 00 00 00 
8896   3DAD 00 00 00 00 
8896   3DB1 00 00 00 00 
8896   3DB5 00 00 00 00 
8896   3DB9 00 00 00 00 
8896   3DBD 00 00 00 00 
8896   3DC1 00 00 00 00 
8896   3DC5 00 00 00 00 
8896   3DC9 00 00 00 00 
8896   3DCD 00 00 00 00 
8896   3DD1 00 00 00 00 
8896   3DD5 00 00 00 00 
8896   3DD9 00 00 00 00 
8896   3DDD 00 00 00 00 
8896   3DE1 00 00 00 00 
8896   3DE5 00 00 00 00 
8896   3DE9 00 00 00 00 
8896   3DED 00 00 00 00 
8896   3DF1 00 00 00 00 
8896   3DF5 00 00 00 00 
8896   3DF9 00 00 00 00 
8896   3DFD 00 00 00 00 
8896   3E01 00 00 00 00 
8896   3E05 00 00 00 00 
8896   3E09 00 00 00 00 
8896   3E0D 00 00 00 00 
8896   3E11 00 00 00 00 
8896   3E15 00 00 00 00 
8896   3E19 00 00 00 00 
8896   3E1D 00 00 00 00 
8896   3E21 00 00 00 00 
8896   3E25 00 00 00 00 
8896   3E29 00 
8897   3E2A FD 73         slt ; <
8898   3E2C FD F1         pop g
8899   3E2E E4            pop a
8900   3E2F             ; END RELATIONAL
8901   3E2F C0 00 00      cmp b, 0
8902   3E32 C6 46 3E      je _if142_exit
8903   3E35             _if142_true:
8904   3E35             ;; puts("Not enough energy available.\n"); 
8905   3E35 26 22 6E      mov b, _s103 ; "Not enough energy available.\n"
8906   3E38 FD AB         swp b
8907   3E3A D8            push b
8908   3E3B 07 48 15      call puts
8909   3E3E 51 02 00      add sp, 2
8910   3E41             ;; return; 
8911   3E41 F9            leave
8912   3E42 09            ret
8913   3E43 0A 46 3E      jmp _if142_exit
8914   3E46             _if142_exit:
8915   3E46             ;; energy = energy -  phaser_energy; 
8916   3E46 3B C5 61      mov d, _energy ; $energy
8917   3E49 DA            push d
8918   3E4A 3B C5 61      mov d, _energy ; $energy
8919   3E4D 2A            mov b, [d]
8920   3E4E             ; START TERMS
8921   3E4E D7            push a
8922   3E4F 11            mov a, b
8923   3E50 FA FB FF      lea d, [bp + -5] ; $phaser_energy
8924   3E53 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
8925   3E56 FD 39         mov c, b ; And place it into C
8926   3E58 2A            mov b, [d] ; Lower Word in B
8927   3E59 60            sub a, b
8928   3E5A 27            mov b, a
8929   3E5B E4            pop a
8930   3E5C             ; END TERMS
8931   3E5C E7            pop d
8932   3E5D FD 43         mov [d], b
8933   3E5F             ;; if (damage[8] < 0) 
8934   3E5F             _if143_cond:
8935   3E5F 3B 87 62      mov d, _damage_data ; $damage
8936   3E62 D7            push a
8937   3E63 DA            push d
8938   3E64 26 08 00      mov b, $8
8939   3E67 E7            pop d
8940   3E68 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8941   3E6C E4            pop a
8942   3E6D 2A            mov b, [d]
8943   3E6E             ; START RELATIONAL
8944   3E6E D7            push a
8945   3E6F 11            mov a, b
8946   3E70 26 00 00      mov b, $0
8947   3E73 B0            cmp a, b
8948   3E74 FD 73         slt ; < (signed)
8949   3E76 E4            pop a
8950   3E77             ; END RELATIONAL
8951   3E77 C0 00 00      cmp b, 0
8952   3E7A C6 A7 3E      je _if143_else
8953   3E7D             _if143_true:
8954   3E7D             ;; phaser_energy =phaser_energy * get_rand(100); 
8955   3E7D FA FB FF      lea d, [bp + -5] ; $phaser_energy
8956   3E80 DA            push d
8957   3E81 FA FB FF      lea d, [bp + -5] ; $phaser_energy
8958   3E84 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
8959   3E87 FD 39         mov c, b ; And place it into C
8960   3E89 2A            mov b, [d] ; Lower Word in B
8961   3E8A             ; START FACTORS
8962   3E8A D7            push a
8963   3E8B 11            mov a, b
8964   3E8C 26 64 00      mov b, $64
8965   3E8F FD AB         swp b
8966   3E91 D8            push b
8967   3E92 07 78 1D      call get_rand
8968   3E95 51 02 00      add sp, 2
8969   3E98 AC            mul a, b ; *
8970   3E99 11            mov a, b
8971   3E9A 27            mov b, a
8972   3E9B E4            pop a
8973   3E9C             ; END FACTORS
8974   3E9C E7            pop d
8975   3E9D FD 43         mov [d], b
8976   3E9F 28            mov b, c
8977   3EA0 FD 44 02 00   mov [d + 2], b
8978   3EA4 0A C5 3E      jmp _if143_exit
8979   3EA7             _if143_else:
8980   3EA7             ;; phaser_energy = phaser_energy* 100; 
8981   3EA7 FA FB FF      lea d, [bp + -5] ; $phaser_energy
8982   3EAA DA            push d
8983   3EAB FA FB FF      lea d, [bp + -5] ; $phaser_energy
8984   3EAE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
8985   3EB1 FD 39         mov c, b ; And place it into C
8986   3EB3 2A            mov b, [d] ; Lower Word in B
8987   3EB4             ; START FACTORS
8988   3EB4 D7            push a
8989   3EB5 11            mov a, b
8990   3EB6 26 64 00      mov b, $64
8991   3EB9 AC            mul a, b ; *
8992   3EBA 11            mov a, b
8993   3EBB 27            mov b, a
8994   3EBC E4            pop a
8995   3EBD             ; END FACTORS
8996   3EBD E7            pop d
8997   3EBE FD 43         mov [d], b
8998   3EC0 28            mov b, c
8999   3EC1 FD 44 02 00   mov [d + 2], b
9000   3EC5             _if143_exit:
9001   3EC5             ;; h1 = phaser_energy / klingons; 
9002   3EC5 FA F7 FF      lea d, [bp + -9] ; $h1
9003   3EC8 DA            push d
9004   3EC9 FA FB FF      lea d, [bp + -5] ; $phaser_energy
9005   3ECC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9006   3ECF FD 39         mov c, b ; And place it into C
9007   3ED1 2A            mov b, [d] ; Lower Word in B
9008   3ED2             ; START FACTORS
9009   3ED2 D7            push a
9010   3ED3 11            mov a, b
9011   3ED4 3B 77 62      mov d, _klingons ; $klingons
9012   3ED7 32            mov bl, [d]
9013   3ED8 A7 00         mov bh, 0
9014   3EDA AE            div a, b
9015   3EDB 27            mov b, a
9016   3EDC E4            pop a
9017   3EDD             ; END FACTORS
9018   3EDD E7            pop d
9019   3EDE FD 43         mov [d], b
9020   3EE0 28            mov b, c
9021   3EE1 FD 44 02 00   mov [d + 2], b
9022   3EE5             ;; for (i = 0; i <= 2; i++) { 
9023   3EE5             _for144_init:
9024   3EE5 FA FF FF      lea d, [bp + -1] ; $i
9025   3EE8 DA            push d
9026   3EE9 26 00 00      mov b, $0
9027   3EEC E7            pop d
9028   3EED FD 43         mov [d], b
9029   3EEF             _for144_cond:
9030   3EEF FA FF FF      lea d, [bp + -1] ; $i
9031   3EF2 2A            mov b, [d]
9032   3EF3             ; START RELATIONAL
9033   3EF3 D7            push a
9034   3EF4 11            mov a, b
9035   3EF5 26 02 00      mov b, $2
9036   3EF8 B0            cmp a, b
9037   3EF9 FD 73         slt ; <= (signed)
9038   3EFB E4            pop a
9039   3EFC             ; END RELATIONAL
9040   3EFC C0 00 00      cmp b, 0
9041   3EFF C6 1C 41      je _for144_exit
9042   3F02             _for144_block:
9043   3F02             ;; if (k->energy > 0) { 
9044   3F02             _if145_cond:
9045   3F02 FA F3 FF      lea d, [bp + -13] ; $k
9046   3F05 FD 2A         mov d, [d]
9047   3F07 58 02 00      add d, 2
9048   3F0A 2A            mov b, [d]
9049   3F0B             ; START RELATIONAL
9050   3F0B D7            push a
9051   3F0C 11            mov a, b
9052   3F0D 26 00 00      mov b, $0
9053   3F10 B0            cmp a, b
9054   3F11 FD 7F         sgt ; >
9055   3F13 E4            pop a
9056   3F14             ; END RELATIONAL
9057   3F14 C0 00 00      cmp b, 0
9058   3F17 C6 FD 40      je _if145_exit
9059   3F1A             _if145_true:
9060   3F1A             ;; h1 = h1 * (get_rand(100) + 200); 
9061   3F1A FA F7 FF      lea d, [bp + -9] ; $h1
9062   3F1D DA            push d
9063   3F1E FA F7 FF      lea d, [bp + -9] ; $h1
9064   3F21 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9065   3F24 FD 39         mov c, b ; And place it into C
9066   3F26 2A            mov b, [d] ; Lower Word in B
9067   3F27             ; START FACTORS
9068   3F27 D7            push a
9069   3F28 11            mov a, b
9070   3F29 26 64 00      mov b, $64
9071   3F2C FD AB         swp b
9072   3F2E D8            push b
9073   3F2F 07 78 1D      call get_rand
9074   3F32 51 02 00      add sp, 2
9075   3F35             ; START TERMS
9076   3F35 D7            push a
9077   3F36 11            mov a, b
9078   3F37 26 C8 00      mov b, $c8
9079   3F3A 56            add b, a
9080   3F3B E4            pop a
9081   3F3C             ; END TERMS
9082   3F3C AC            mul a, b ; *
9083   3F3D 11            mov a, b
9084   3F3E 27            mov b, a
9085   3F3F E4            pop a
9086   3F40             ; END FACTORS
9087   3F40 E7            pop d
9088   3F41 FD 43         mov [d], b
9089   3F43 28            mov b, c
9090   3F44 FD 44 02 00   mov [d + 2], b
9091   3F48             ;; h1 =h1/ distance_to(k); 
9092   3F48 FA F7 FF      lea d, [bp + -9] ; $h1
9093   3F4B DA            push d
9094   3F4C FA F7 FF      lea d, [bp + -9] ; $h1
9095   3F4F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9096   3F52 FD 39         mov c, b ; And place it into C
9097   3F54 2A            mov b, [d] ; Lower Word in B
9098   3F55             ; START FACTORS
9099   3F55 D7            push a
9100   3F56 11            mov a, b
9101   3F57 FA F3 FF      lea d, [bp + -13] ; $k
9102   3F5A 2A            mov b, [d]
9103   3F5B FD AB         swp b
9104   3F5D D8            push b
9105   3F5E 07 EE 60      call distance_to
9106   3F61 51 02 00      add sp, 2
9107   3F64 AE            div a, b
9108   3F65 27            mov b, a
9109   3F66 E4            pop a
9110   3F67             ; END FACTORS
9111   3F67 E7            pop d
9112   3F68 FD 43         mov [d], b
9113   3F6A 28            mov b, c
9114   3F6B FD 44 02 00   mov [d + 2], b
9115   3F6F             ;; if (h1 <= 15 * k->energy) {	/* was 0.15 */ 
9116   3F6F             _if146_cond:
9117   3F6F FA F7 FF      lea d, [bp + -9] ; $h1
9118   3F72 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9119   3F75 FD 39         mov c, b ; And place it into C
9120   3F77 2A            mov b, [d] ; Lower Word in B
9121   3F78             ; START RELATIONAL
9122   3F78 D7            push a
9123   3F79 FD D8         push g
9124   3F7B 11            mov a, b
9125   3F7C FD 7A         mov g, c
9126   3F7E 26 0F 00      mov b, $f
9127   3F81             ; START FACTORS
9128   3F81 D7            push a
9129   3F82 11            mov a, b
9130   3F83 FA F3 FF      lea d, [bp + -13] ; $k
9131   3F86 FD 2A         mov d, [d]
9132   3F88 58 02 00      add d, 2
9133   3F8B 2A            mov b, [d]
9134   3F8C AC            mul a, b ; *
9135   3F8D 11            mov a, b
9136   3F8E 27            mov b, a
9137   3F8F E4            pop a
9138   3F90             ; END FACTORS
9139   3F90 38 00 00      mov c, 0
9140   3F93 FD 76         sleu
9141   3F95 FD F1         pop g
9142   3F97 E4            pop a
9143   3F98             ; END RELATIONAL
9144   3F98 C0 00 00      cmp b, 0
9145   3F9B C6 C5 3F      je _if146_else
9146   3F9E             _if146_true:
9147   3F9E             ;; printf("Sensors show no damage to enemy at %d, %d\n\n", k->y, k->x); 
9148   3F9E FA F3 FF      lea d, [bp + -13] ; $k
9149   3FA1 FD 2A         mov d, [d]
9150   3FA3 58 01 00      add d, 1
9151   3FA6 32            mov bl, [d]
9152   3FA7 A7 00         mov bh, 0
9153   3FA9 DD            push bl
9154   3FAA FA F3 FF      lea d, [bp + -13] ; $k
9155   3FAD FD 2A         mov d, [d]
9156   3FAF 58 00 00      add d, 0
9157   3FB2 32            mov bl, [d]
9158   3FB3 A7 00         mov bh, 0
9159   3FB5 DD            push bl
9160   3FB6 26 40 6E      mov b, _s104 ; "Sensors show no damage to enemy at %d, %d\n\n"
9161   3FB9 FD AB         swp b
9162   3FBB D8            push b
9163   3FBC 07 B8 07      call printf
9164   3FBF 51 04 00      add sp, 4
9165   3FC2 0A FA 40      jmp _if146_exit
9166   3FC5             _if146_else:
9167   3FC5             ;; h = FROM_FIXED00(h1); 
9168   3FC5 FA F5 FF      lea d, [bp + -11] ; $h
9169   3FC8 DA            push d
9170   3FC9 FA F7 FF      lea d, [bp + -9] ; $h1
9171   3FCC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9172   3FCF FD 39         mov c, b ; And place it into C
9173   3FD1 2A            mov b, [d] ; Lower Word in B
9174   3FD2 FD AB         swp b
9175   3FD4 D8            push b
9176   3FD5 07 67 1D      call FROM_FIXED00
9177   3FD8 51 02 00      add sp, 2
9178   3FDB E7            pop d
9179   3FDC FD 43         mov [d], b
9180   3FDE             ;; k->energy = k->energy - h; 
9181   3FDE FA F3 FF      lea d, [bp + -13] ; $k
9182   3FE1 FD 2A         mov d, [d]
9183   3FE3 58 02 00      add d, 2
9184   3FE6 DA            push d
9185   3FE7 FA F3 FF      lea d, [bp + -13] ; $k
9186   3FEA FD 2A         mov d, [d]
9187   3FEC 58 02 00      add d, 2
9188   3FEF 2A            mov b, [d]
9189   3FF0             ; START TERMS
9190   3FF0 D7            push a
9191   3FF1 11            mov a, b
9192   3FF2 FA F5 FF      lea d, [bp + -11] ; $h
9193   3FF5 2A            mov b, [d]
9194   3FF6 60            sub a, b
9195   3FF7 27            mov b, a
9196   3FF8 E4            pop a
9197   3FF9             ; END TERMS
9198   3FF9 E7            pop d
9199   3FFA FD 43         mov [d], b
9200   3FFC             ;; printf("%d unit hit on Klingon at sector %d, %d\n", 
9201   3FFC FA F3 FF      lea d, [bp + -13] ; $k
9202   3FFF FD 2A         mov d, [d]
9203   4001 58 01 00      add d, 1
9204   4004 32            mov bl, [d]
9205   4005 A7 00         mov bh, 0
9206   4007 DD            push bl
9207   4008 FA F3 FF      lea d, [bp + -13] ; $k
9208   400B FD 2A         mov d, [d]
9209   400D 58 00 00      add d, 0
9210   4010 32            mov bl, [d]
9211   4011 A7 00         mov bh, 0
9212   4013 DD            push bl
9213   4014 FA F5 FF      lea d, [bp + -11] ; $h
9214   4017 2A            mov b, [d]
9215   4018 FD AB         swp b
9216   401A D8            push b
9217   401B 26 6C 6E      mov b, _s105 ; "%d unit hit on Klingon at sector %d, %d\n"
9218   401E FD AB         swp b
9219   4020 D8            push b
9220   4021 07 B8 07      call printf
9221   4024 51 06 00      add sp, 6
9222   4027             ;; if (k->energy <= 0) { 
9223   4027             _if147_cond:
9224   4027 FA F3 FF      lea d, [bp + -13] ; $k
9225   402A FD 2A         mov d, [d]
9226   402C 58 02 00      add d, 2
9227   402F 2A            mov b, [d]
9228   4030             ; START RELATIONAL
9229   4030 D7            push a
9230   4031 11            mov a, b
9231   4032 26 00 00      mov b, $0
9232   4035 B0            cmp a, b
9233   4036 FD 73         slt ; <= (signed)
9234   4038 E4            pop a
9235   4039             ; END RELATIONAL
9236   4039 C0 00 00      cmp b, 0
9237   403C C6 E2 40      je _if147_else
9238   403F             _if147_true:
9239   403F             ;; puts("*** Klingon Destroyed ***\n"); 
9240   403F 26 95 6E      mov b, _s106 ; "*** Klingon Destroyed ***\n"
9241   4042 FD AB         swp b
9242   4044 D8            push b
9243   4045 07 48 15      call puts
9244   4048 51 02 00      add sp, 2
9245   404B             ;; klingons--; 
9246   404B 3B 77 62      mov d, _klingons ; $klingons
9247   404E 32            mov bl, [d]
9248   404F A7 00         mov bh, 0
9249   4051 D8            push b
9250   4052 FD 7D         dec b
9251   4054 3B 77 62      mov d, _klingons ; $klingons
9252   4057 FD 43         mov [d], b
9253   4059 E5            pop b
9254   405A             ;; klingons_left--; 
9255   405A 3B 79 62      mov d, _klingons_left ; $klingons_left
9256   405D 32            mov bl, [d]
9257   405E A7 00         mov bh, 0
9258   4060 D8            push b
9259   4061 FD 7D         dec b
9260   4063 3B 79 62      mov d, _klingons_left ; $klingons_left
9261   4066 FD 43         mov [d], b
9262   4068 E5            pop b
9263   4069             ;; wipe_klingon(k); 
9264   4069 FA F3 FF      lea d, [bp + -13] ; $k
9265   406C 2A            mov b, [d]
9266   406D FD AB         swp b
9267   406F D8            push b
9268   4070 07 19 3C      call wipe_klingon
9269   4073 51 02 00      add sp, 2
9270   4076             ;; k->energy = 0; 
9271   4076 FA F3 FF      lea d, [bp + -13] ; $k
9272   4079 FD 2A         mov d, [d]
9273   407B 58 02 00      add d, 2
9274   407E DA            push d
9275   407F 26 00 00      mov b, $0
9276   4082 E7            pop d
9277   4083 FD 43         mov [d], b
9278   4085             ;; map[quad_y][quad_x] = map[quad_y][quad_x] - 0x100; 
9279   4085 3B C9 61      mov d, _map_data ; $map
9280   4088 D7            push a
9281   4089 DA            push d
9282   408A 3B 7C 62      mov d, _quad_y ; $quad_y
9283   408D 2A            mov b, [d]
9284   408E E7            pop d
9285   408F FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
9286   4093 DA            push d
9287   4094 3B 7E 62      mov d, _quad_x ; $quad_x
9288   4097 2A            mov b, [d]
9289   4098 E7            pop d
9290   4099 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9291   409D E4            pop a
9292   409E DA            push d
9293   409F 3B C9 61      mov d, _map_data ; $map
9294   40A2 D7            push a
9295   40A3 DA            push d
9296   40A4 3B 7C 62      mov d, _quad_y ; $quad_y
9297   40A7 2A            mov b, [d]
9298   40A8 E7            pop d
9299   40A9 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
9300   40AD DA            push d
9301   40AE 3B 7E 62      mov d, _quad_x ; $quad_x
9302   40B1 2A            mov b, [d]
9303   40B2 E7            pop d
9304   40B3 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9305   40B7 E4            pop a
9306   40B8 2A            mov b, [d]
9307   40B9             ; START TERMS
9308   40B9 D7            push a
9309   40BA 11            mov a, b
9310   40BB 26 00 01      mov b, $100
9311   40BE 60            sub a, b
9312   40BF 27            mov b, a
9313   40C0 E4            pop a
9314   40C1             ; END TERMS
9315   40C1 E7            pop d
9316   40C2 FD 43         mov [d], b
9317   40C4             ;; if (klingons_left <= 0) 
9318   40C4             _if148_cond:
9319   40C4 3B 79 62      mov d, _klingons_left ; $klingons_left
9320   40C7 32            mov bl, [d]
9321   40C8 A7 00         mov bh, 0
9322   40CA             ; START RELATIONAL
9323   40CA D7            push a
9324   40CB 11            mov a, b
9325   40CC 26 00 00      mov b, $0
9326   40CF B0            cmp a, b
9327   40D0 FD 75         slu ; <= (unsigned)
9328   40D2 E4            pop a
9329   40D3             ; END RELATIONAL
9330   40D3 C0 00 00      cmp b, 0
9331   40D6 C6 DF 40      je _if148_exit
9332   40D9             _if148_true:
9333   40D9             ;; won_game(); 
9334   40D9 07 2C 56      call won_game
9335   40DC 0A DF 40      jmp _if148_exit
9336   40DF             _if148_exit:
9337   40DF 0A FA 40      jmp _if147_exit
9338   40E2             _if147_else:
9339   40E2             ;; printf("   (Sensors show %d units remaining.)\n\n", k->energy); 
9340   40E2 FA F3 FF      lea d, [bp + -13] ; $k
9341   40E5 FD 2A         mov d, [d]
9342   40E7 58 02 00      add d, 2
9343   40EA 2A            mov b, [d]
9344   40EB FD AB         swp b
9345   40ED D8            push b
9346   40EE 26 B0 6E      mov b, _s107 ; "   (Sensors show %d units remaining.)\n\n"
9347   40F1 FD AB         swp b
9348   40F3 D8            push b
9349   40F4 07 B8 07      call printf
9350   40F7 51 04 00      add sp, 4
9351   40FA             _if147_exit:
9352   40FA             _if146_exit:
9353   40FA 0A FD 40      jmp _if145_exit
9354   40FD             _if145_exit:
9355   40FD             ;; k++; 
9356   40FD FA F3 FF      lea d, [bp + -13] ; $k
9357   4100 2A            mov b, [d]
9358   4101 D8            push b
9359   4102 FD 77         inc b
9360   4104 FD 77         inc b
9361   4106 FA F3 FF      lea d, [bp + -13] ; $k
9362   4109 FD 43         mov [d], b
9363   410B E5            pop b
9364   410C             _for144_update:
9365   410C FA FF FF      lea d, [bp + -1] ; $i
9366   410F 2A            mov b, [d]
9367   4110 D8            push b
9368   4111 FD 77         inc b
9369   4113 FA FF FF      lea d, [bp + -1] ; $i
9370   4116 FD 43         mov [d], b
9371   4118 E5            pop b
9372   4119 0A EF 3E      jmp _for144_cond
9373   411C             _for144_exit:
9374   411C             ;; klingons_shoot(); 
9375   411C 07 E4 57      call klingons_shoot
9376   411F F9            leave
9377   4120 09            ret
9378   4121             
9379   4121             photon_torpedoes:
9380   4121 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9381   4124             ;; int x3, y3; 
9382   4124 52 02 00      sub sp, 2 ; x3
9383   4127 52 02 00      sub sp, 2 ; y3
9384   412A             ;; int       c1; 
9385   412A 52 02 00      sub sp, 2 ; c1
9386   412D             ;; int c2, c3, c4; 
9387   412D 52 02 00      sub sp, 2 ; c2
9388   4130 52 02 00      sub sp, 2 ; c3
9389   4133 52 02 00      sub sp, 2 ; c4
9390   4136             ;; int       x, y, x1, x2; 
9391   4136 52 02 00      sub sp, 2 ; x
9392   4139 52 02 00      sub sp, 2 ; y
9393   413C 52 02 00      sub sp, 2 ; x1
9394   413F 52 02 00      sub sp, 2 ; x2
9395   4142             ;; if (torps <= 0) { 
9396   4142             _if149_cond:
9397   4142 3B 7A 62      mov d, _torps ; $torps
9398   4145 32            mov bl, [d]
9399   4146 A7 00         mov bh, 0
9400   4148             ; START RELATIONAL
9401   4148 D7            push a
9402   4149 11            mov a, b
9403   414A 26 00 00      mov b, $0
9404   414D B0            cmp a, b
9405   414E FD 75         slu ; <= (unsigned)
9406   4150 E4            pop a
9407   4151             ; END RELATIONAL
9408   4151 C0 00 00      cmp b, 0
9409   4154 C6 68 41      je _if149_exit
9410   4157             _if149_true:
9411   4157             ;; puts("All photon torpedoes expended"); 
9412   4157 26 D8 6E      mov b, _s108 ; "All photon torpedoes expended"
9413   415A FD AB         swp b
9414   415C D8            push b
9415   415D 07 48 15      call puts
9416   4160 51 02 00      add sp, 2
9417   4163             ;; return; 
9418   4163 F9            leave
9419   4164 09            ret
9420   4165 0A 68 41      jmp _if149_exit
9421   4168             _if149_exit:
9422   4168             ;; if (inoperable(5)) 
9423   4168             _if150_cond:
9424   4168 26 05 00      mov b, $5
9425   416B DD            push bl
9426   416C 07 B0 20      call inoperable
9427   416F 51 01 00      add sp, 1
9428   4172 C0 00 00      cmp b, 0
9429   4175 C6 7D 41      je _if150_exit
9430   4178             _if150_true:
9431   4178             ;; return; 
9432   4178 F9            leave
9433   4179 09            ret
9434   417A 0A 7D 41      jmp _if150_exit
9435   417D             _if150_exit:
9436   417D             ;; puts("Course (0-9): "); 
9437   417D 26 14 69      mov b, _s70 ; "Course (0-9): "
9438   4180 FD AB         swp b
9439   4182 D8            push b
9440   4183 07 48 15      call puts
9441   4186 51 02 00      add sp, 2
9442   4189             ;; c1 = input_f00(); 
9443   4189 FA FB FF      lea d, [bp + -5] ; $c1
9444   418C DA            push d
9445   418D 07 9E 1E      call input_f00
9446   4190 E7            pop d
9447   4191 FD 43         mov [d], b
9448   4193             ;; if (c1 == 900) 
9449   4193             _if151_cond:
9450   4193 FA FB FF      lea d, [bp + -5] ; $c1
9451   4196 2A            mov b, [d]
9452   4197             ; START RELATIONAL
9453   4197 D7            push a
9454   4198 11            mov a, b
9455   4199 26 84 03      mov b, $384
9456   419C B0            cmp a, b
9457   419D FD 71         seq ; ==
9458   419F E4            pop a
9459   41A0             ; END RELATIONAL
9460   41A0 C0 00 00      cmp b, 0
9461   41A3 C6 B3 41      je _if151_exit
9462   41A6             _if151_true:
9463   41A6             ;; c1 = 100; 
9464   41A6 FA FB FF      lea d, [bp + -5] ; $c1
9465   41A9 DA            push d
9466   41AA 26 64 00      mov b, $64
9467   41AD E7            pop d
9468   41AE FD 43         mov [d], b
9469   41B0 0A B3 41      jmp _if151_exit
9470   41B3             _if151_exit:
9471   41B3             ;; if (c1 < 100 || c1 >= 900) { 
9472   41B3             _if152_cond:
9473   41B3 FA FB FF      lea d, [bp + -5] ; $c1
9474   41B6 2A            mov b, [d]
9475   41B7             ; START RELATIONAL
9476   41B7 D7            push a
9477   41B8 11            mov a, b
9478   41B9 26 64 00      mov b, $64
9479   41BC B0            cmp a, b
9480   41BD FD 73         slt ; < (signed)
9481   41BF E4            pop a
9482   41C0             ; END RELATIONAL
9483   41C0 D7            push a
9484   41C1 11            mov a, b
9485   41C2 FA FB FF      lea d, [bp + -5] ; $c1
9486   41C5 2A            mov b, [d]
9487   41C6             ; START RELATIONAL
9488   41C6 D7            push a
9489   41C7 11            mov a, b
9490   41C8 26 84 03      mov b, $384
9491   41CB B0            cmp a, b
9492   41CC FD 80         sge ; >=
9493   41CE E4            pop a
9494   41CF             ; END RELATIONAL
9495   41CF FD A8         sor a, b ; ||
9496   41D1 E4            pop a
9497   41D2 C0 00 00      cmp b, 0
9498   41D5 C6 F0 41      je _if152_exit
9499   41D8             _if152_true:
9500   41D8             ;; printf("Ensign Chekov%s", inc_1); 
9501   41D8 3B 15 63      mov d, _inc_1 ; $inc_1
9502   41DB 2A            mov b, [d]
9503   41DC FD AB         swp b
9504   41DE D8            push b
9505   41DF 26 F6 6E      mov b, _s109 ; "Ensign Chekov%s"
9506   41E2 FD AB         swp b
9507   41E4 D8            push b
9508   41E5 07 B8 07      call printf
9509   41E8 51 04 00      add sp, 4
9510   41EB             ;; return; 
9511   41EB F9            leave
9512   41EC 09            ret
9513   41ED 0A F0 41      jmp _if152_exit
9514   41F0             _if152_exit:
9515   41F0             ;; energy = energy - 2; 
9516   41F0 3B C5 61      mov d, _energy ; $energy
9517   41F3 DA            push d
9518   41F4 3B C5 61      mov d, _energy ; $energy
9519   41F7 2A            mov b, [d]
9520   41F8             ; START TERMS
9521   41F8 D7            push a
9522   41F9 11            mov a, b
9523   41FA 26 02 00      mov b, $2
9524   41FD 60            sub a, b
9525   41FE 27            mov b, a
9526   41FF E4            pop a
9527   4200             ; END TERMS
9528   4200 E7            pop d
9529   4201 FD 43         mov [d], b
9530   4203             ;; torps--; 
9531   4203 3B 7A 62      mov d, _torps ; $torps
9532   4206 32            mov bl, [d]
9533   4207 A7 00         mov bh, 0
9534   4209 D8            push b
9535   420A FD 7D         dec b
9536   420C 3B 7A 62      mov d, _torps ; $torps
9537   420F FD 43         mov [d], b
9538   4211 E5            pop b
9539   4212             ;; c2 = FROM_FIXED00(c1);	/* Integer part */ 
9540   4212 FA F9 FF      lea d, [bp + -7] ; $c2
9541   4215 DA            push d
9542   4216 FA FB FF      lea d, [bp + -5] ; $c1
9543   4219 2A            mov b, [d]
9544   421A FD AB         swp b
9545   421C D8            push b
9546   421D 07 67 1D      call FROM_FIXED00
9547   4220 51 02 00      add sp, 2
9548   4223 E7            pop d
9549   4224 FD 43         mov [d], b
9550   4226             ;; c3 = c2 + 1;		/* Next integer part */ 
9551   4226 FA F7 FF      lea d, [bp + -9] ; $c3
9552   4229 DA            push d
9553   422A FA F9 FF      lea d, [bp + -7] ; $c2
9554   422D 2A            mov b, [d]
9555   422E             ; START TERMS
9556   422E D7            push a
9557   422F 11            mov a, b
9558   4230 26 01 00      mov b, $1
9559   4233 56            add b, a
9560   4234 E4            pop a
9561   4235             ; END TERMS
9562   4235 E7            pop d
9563   4236 FD 43         mov [d], b
9564   4238             ;; c4 = (c1 - TO_FIXED00(c2));	/* Fractional element in fixed point */ 
9565   4238 FA F5 FF      lea d, [bp + -11] ; $c4
9566   423B DA            push d
9567   423C FA FB FF      lea d, [bp + -5] ; $c1
9568   423F 2A            mov b, [d]
9569   4240             ; START TERMS
9570   4240 D7            push a
9571   4241 11            mov a, b
9572   4242 FA F9 FF      lea d, [bp + -7] ; $c2
9573   4245 2A            mov b, [d]
9574   4246 FD AB         swp b
9575   4248 D8            push b
9576   4249 07 55 1D      call TO_FIXED00
9577   424C 51 02 00      add sp, 2
9578   424F 60            sub a, b
9579   4250 27            mov b, a
9580   4251 E4            pop a
9581   4252             ; END TERMS
9582   4252 E7            pop d
9583   4253 FD 43         mov [d], b
9584   4255             ;; x1 = 100 * c[1][c2] + (c[1][c3] - c[1][c2]) * c4; 
9585   4255 FA EF FF      lea d, [bp + -17] ; $x1
9586   4258 DA            push d
9587   4259 26 64 00      mov b, $64
9588   425C             ; START FACTORS
9589   425C D7            push a
9590   425D 11            mov a, b
9591   425E 3B A5 61      mov d, _c_data ; $c
9592   4261 D7            push a
9593   4262 DA            push d
9594   4263 26 01 00      mov b, $1
9595   4266 E7            pop d
9596   4267 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
9597   426B DA            push d
9598   426C FA F9 FF      lea d, [bp + -7] ; $c2
9599   426F 2A            mov b, [d]
9600   4270 E7            pop d
9601   4271 5A            add d, b
9602   4272 E4            pop a
9603   4273 32            mov bl, [d]
9604   4274 A7 00         mov bh, 0
9605   4276 AC            mul a, b ; *
9606   4277 11            mov a, b
9607   4278 27            mov b, a
9608   4279 E4            pop a
9609   427A             ; END FACTORS
9610   427A             ; START TERMS
9611   427A D7            push a
9612   427B 11            mov a, b
9613   427C 3B A5 61      mov d, _c_data ; $c
9614   427F D7            push a
9615   4280 DA            push d
9616   4281 26 01 00      mov b, $1
9617   4284 E7            pop d
9618   4285 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
9619   4289 DA            push d
9620   428A FA F7 FF      lea d, [bp + -9] ; $c3
9621   428D 2A            mov b, [d]
9622   428E E7            pop d
9623   428F 5A            add d, b
9624   4290 E4            pop a
9625   4291 32            mov bl, [d]
9626   4292 A7 00         mov bh, 0
9627   4294             ; START TERMS
9628   4294 D7            push a
9629   4295 11            mov a, b
9630   4296 3B A5 61      mov d, _c_data ; $c
9631   4299 D7            push a
9632   429A DA            push d
9633   429B 26 01 00      mov b, $1
9634   429E E7            pop d
9635   429F FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
9636   42A3 DA            push d
9637   42A4 FA F9 FF      lea d, [bp + -7] ; $c2
9638   42A7 2A            mov b, [d]
9639   42A8 E7            pop d
9640   42A9 5A            add d, b
9641   42AA E4            pop a
9642   42AB 32            mov bl, [d]
9643   42AC A7 00         mov bh, 0
9644   42AE 60            sub a, b
9645   42AF 27            mov b, a
9646   42B0 E4            pop a
9647   42B1             ; END TERMS
9648   42B1             ; START FACTORS
9649   42B1 D7            push a
9650   42B2 11            mov a, b
9651   42B3 FA F5 FF      lea d, [bp + -11] ; $c4
9652   42B6 2A            mov b, [d]
9653   42B7 AC            mul a, b ; *
9654   42B8 11            mov a, b
9655   42B9 27            mov b, a
9656   42BA E4            pop a
9657   42BB             ; END FACTORS
9658   42BB 56            add b, a
9659   42BC E4            pop a
9660   42BD             ; END TERMS
9661   42BD E7            pop d
9662   42BE FD 43         mov [d], b
9663   42C0             ;; x2 = 100 * c[2][c2] + (c[2][c3] - c[2][c2]) * c4; 
9664   42C0 FA ED FF      lea d, [bp + -19] ; $x2
9665   42C3 DA            push d
9666   42C4 26 64 00      mov b, $64
9667   42C7             ; START FACTORS
9668   42C7 D7            push a
9669   42C8 11            mov a, b
9670   42C9 3B A5 61      mov d, _c_data ; $c
9671   42CC D7            push a
9672   42CD DA            push d
9673   42CE 26 02 00      mov b, $2
9674   42D1 E7            pop d
9675   42D2 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
9676   42D6 DA            push d
9677   42D7 FA F9 FF      lea d, [bp + -7] ; $c2
9678   42DA 2A            mov b, [d]
9679   42DB E7            pop d
9680   42DC 5A            add d, b
9681   42DD E4            pop a
9682   42DE 32            mov bl, [d]
9683   42DF A7 00         mov bh, 0
9684   42E1 AC            mul a, b ; *
9685   42E2 11            mov a, b
9686   42E3 27            mov b, a
9687   42E4 E4            pop a
9688   42E5             ; END FACTORS
9689   42E5             ; START TERMS
9690   42E5 D7            push a
9691   42E6 11            mov a, b
9692   42E7 3B A5 61      mov d, _c_data ; $c
9693   42EA D7            push a
9694   42EB DA            push d
9695   42EC 26 02 00      mov b, $2
9696   42EF E7            pop d
9697   42F0 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
9698   42F4 DA            push d
9699   42F5 FA F7 FF      lea d, [bp + -9] ; $c3
9700   42F8 2A            mov b, [d]
9701   42F9 E7            pop d
9702   42FA 5A            add d, b
9703   42FB E4            pop a
9704   42FC 32            mov bl, [d]
9705   42FD A7 00         mov bh, 0
9706   42FF             ; START TERMS
9707   42FF D7            push a
9708   4300 11            mov a, b
9709   4301 3B A5 61      mov d, _c_data ; $c
9710   4304 D7            push a
9711   4305 DA            push d
9712   4306 26 02 00      mov b, $2
9713   4309 E7            pop d
9714   430A FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
9715   430E DA            push d
9716   430F FA F9 FF      lea d, [bp + -7] ; $c2
9717   4312 2A            mov b, [d]
9718   4313 E7            pop d
9719   4314 5A            add d, b
9720   4315 E4            pop a
9721   4316 32            mov bl, [d]
9722   4317 A7 00         mov bh, 0
9723   4319 60            sub a, b
9724   431A 27            mov b, a
9725   431B E4            pop a
9726   431C             ; END TERMS
9727   431C             ; START FACTORS
9728   431C D7            push a
9729   431D 11            mov a, b
9730   431E FA F5 FF      lea d, [bp + -11] ; $c4
9731   4321 2A            mov b, [d]
9732   4322 AC            mul a, b ; *
9733   4323 11            mov a, b
9734   4324 27            mov b, a
9735   4325 E4            pop a
9736   4326             ; END FACTORS
9737   4326 56            add b, a
9738   4327 E4            pop a
9739   4328             ; END TERMS
9740   4328 E7            pop d
9741   4329 FD 43         mov [d], b
9742   432B             ;; x = ship_y + x1; 
9743   432B FA F3 FF      lea d, [bp + -13] ; $x
9744   432E DA            push d
9745   432F 3B 9B 62      mov d, _ship_y ; $ship_y
9746   4332 2A            mov b, [d]
9747   4333             ; START TERMS
9748   4333 D7            push a
9749   4334 11            mov a, b
9750   4335 FA EF FF      lea d, [bp + -17] ; $x1
9751   4338 2A            mov b, [d]
9752   4339 56            add b, a
9753   433A E4            pop a
9754   433B             ; END TERMS
9755   433B E7            pop d
9756   433C FD 43         mov [d], b
9757   433E             ;; y = ship_x + x2; 
9758   433E FA F1 FF      lea d, [bp + -15] ; $y
9759   4341 DA            push d
9760   4342 3B 9D 62      mov d, _ship_x ; $ship_x
9761   4345 2A            mov b, [d]
9762   4346             ; START TERMS
9763   4346 D7            push a
9764   4347 11            mov a, b
9765   4348 FA ED FF      lea d, [bp + -19] ; $x2
9766   434B 2A            mov b, [d]
9767   434C 56            add b, a
9768   434D E4            pop a
9769   434E             ; END TERMS
9770   434E E7            pop d
9771   434F FD 43         mov [d], b
9772   4351             ;; x3 = FROM_FIXED00(x); 
9773   4351 FA FF FF      lea d, [bp + -1] ; $x3
9774   4354 DA            push d
9775   4355 FA F3 FF      lea d, [bp + -13] ; $x
9776   4358 2A            mov b, [d]
9777   4359 FD AB         swp b
9778   435B D8            push b
9779   435C 07 67 1D      call FROM_FIXED00
9780   435F 51 02 00      add sp, 2
9781   4362 E7            pop d
9782   4363 FD 43         mov [d], b
9783   4365             ;; y3 = FROM_FIXED00(y); 
9784   4365 FA FD FF      lea d, [bp + -3] ; $y3
9785   4368 DA            push d
9786   4369 FA F1 FF      lea d, [bp + -15] ; $y
9787   436C 2A            mov b, [d]
9788   436D FD AB         swp b
9789   436F D8            push b
9790   4370 07 67 1D      call FROM_FIXED00
9791   4373 51 02 00      add sp, 2
9792   4376 E7            pop d
9793   4377 FD 43         mov [d], b
9794   4379             ;; puts("Torpedo Track:"); 
9795   4379 26 06 6F      mov b, _s110 ; "Torpedo Track:"
9796   437C FD AB         swp b
9797   437E D8            push b
9798   437F 07 48 15      call puts
9799   4382 51 02 00      add sp, 2
9800   4385             ;; while (x3 >= 1 && x3 <= 8 && y3 >= 1 && y3 <= 8) { 
9801   4385             _while153_cond:
9802   4385 FA FF FF      lea d, [bp + -1] ; $x3
9803   4388 2A            mov b, [d]
9804   4389             ; START RELATIONAL
9805   4389 D7            push a
9806   438A 11            mov a, b
9807   438B 26 01 00      mov b, $1
9808   438E B0            cmp a, b
9809   438F FD 80         sge ; >=
9810   4391 E4            pop a
9811   4392             ; END RELATIONAL
9812   4392 D7            push a
9813   4393 11            mov a, b
9814   4394 FA FF FF      lea d, [bp + -1] ; $x3
9815   4397 2A            mov b, [d]
9816   4398             ; START RELATIONAL
9817   4398 D7            push a
9818   4399 11            mov a, b
9819   439A 26 08 00      mov b, $8
9820   439D B0            cmp a, b
9821   439E FD 73         slt ; <= (signed)
9822   43A0 E4            pop a
9823   43A1             ; END RELATIONAL
9824   43A1 FD A7         sand a, b
9825   43A3 11            mov a, b
9826   43A4 FA FD FF      lea d, [bp + -3] ; $y3
9827   43A7 2A            mov b, [d]
9828   43A8             ; START RELATIONAL
9829   43A8 D7            push a
9830   43A9 11            mov a, b
9831   43AA 26 01 00      mov b, $1
9832   43AD B0            cmp a, b
9833   43AE FD 80         sge ; >=
9834   43B0 E4            pop a
9835   43B1             ; END RELATIONAL
9836   43B1 FD A7         sand a, b
9837   43B3 11            mov a, b
9838   43B4 FA FD FF      lea d, [bp + -3] ; $y3
9839   43B7 2A            mov b, [d]
9840   43B8             ; START RELATIONAL
9841   43B8 D7            push a
9842   43B9 11            mov a, b
9843   43BA 26 08 00      mov b, $8
9844   43BD B0            cmp a, b
9845   43BE FD 73         slt ; <= (signed)
9846   43C0 E4            pop a
9847   43C1             ; END RELATIONAL
9848   43C1 FD A7         sand a, b
9849   43C3 E4            pop a
9850   43C4 C0 00 00      cmp b, 0
9851   43C7 C6 A7 44      je _while153_exit
9852   43CA             _while153_block:
9853   43CA             ;; unsigned char                         p; 
9854   43CA 52 01 00      sub sp, 1 ; p
9855   43CD             ;; printf("    %d, %d\n", x3, y3); 
9856   43CD FA FD FF      lea d, [bp + -3] ; $y3
9857   43D0 2A            mov b, [d]
9858   43D1 FD AB         swp b
9859   43D3 D8            push b
9860   43D4 FA FF FF      lea d, [bp + -1] ; $x3
9861   43D7 2A            mov b, [d]
9862   43D8 FD AB         swp b
9863   43DA D8            push b
9864   43DB 26 15 6F      mov b, _s111 ; "    %d, %d\n"
9865   43DE FD AB         swp b
9866   43E0 D8            push b
9867   43E1 07 B8 07      call printf
9868   43E4 51 06 00      add sp, 6
9869   43E7             ;; p = quad[x3+-1][y3+-1]; 
9870   43E7 FA EC FF      lea d, [bp + -20] ; $p
9871   43EA DA            push d
9872   43EB 3B A1 62      mov d, _quad_data ; $quad
9873   43EE D7            push a
9874   43EF DA            push d
9875   43F0 FA FF FF      lea d, [bp + -1] ; $x3
9876   43F3 2A            mov b, [d]
9877   43F4             ; START TERMS
9878   43F4 D7            push a
9879   43F5 11            mov a, b
9880   43F6 26 FF FF      mov b, $ffff
9881   43F9 56            add b, a
9882   43FA E4            pop a
9883   43FB             ; END TERMS
9884   43FB E7            pop d
9885   43FC FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
9886   4400 DA            push d
9887   4401 FA FD FF      lea d, [bp + -3] ; $y3
9888   4404 2A            mov b, [d]
9889   4405             ; START TERMS
9890   4405 D7            push a
9891   4406 11            mov a, b
9892   4407 26 FF FF      mov b, $ffff
9893   440A 56            add b, a
9894   440B E4            pop a
9895   440C             ; END TERMS
9896   440C E7            pop d
9897   440D 5A            add d, b
9898   440E E4            pop a
9899   440F 32            mov bl, [d]
9900   4410 A7 00         mov bh, 0
9901   4412 E7            pop d
9902   4413 FD 3E         mov [d], bl
9903   4415             ;; if (p !=  		0       && p !=  		4     ) { 
9904   4415             _if154_cond:
9905   4415 FA EC FF      lea d, [bp + -20] ; $p
9906   4418 32            mov bl, [d]
9907   4419 A7 00         mov bh, 0
9908   441B             ; START RELATIONAL
9909   441B D7            push a
9910   441C 11            mov a, b
9911   441D 26 00 00      mov b, $0
9912   4420 B0            cmp a, b
9913   4421 FD 72         sneq ; !=
9914   4423 E4            pop a
9915   4424             ; END RELATIONAL
9916   4424 D7            push a
9917   4425 11            mov a, b
9918   4426 FA EC FF      lea d, [bp + -20] ; $p
9919   4429 32            mov bl, [d]
9920   442A A7 00         mov bh, 0
9921   442C             ; START RELATIONAL
9922   442C D7            push a
9923   442D 11            mov a, b
9924   442E 26 04 00      mov b, $4
9925   4431 B0            cmp a, b
9926   4432 FD 72         sneq ; !=
9927   4434 E4            pop a
9928   4435             ; END RELATIONAL
9929   4435 FD A7         sand a, b
9930   4437 E4            pop a
9931   4438 C0 00 00      cmp b, 0
9932   443B C6 56 44      je _if154_exit
9933   443E             _if154_true:
9934   443E             ;; torpedo_hit(x3, y3); 
9935   443E FA FD FF      lea d, [bp + -3] ; $y3
9936   4441 2A            mov b, [d]
9937   4442 DD            push bl
9938   4443 FA FF FF      lea d, [bp + -1] ; $x3
9939   4446 2A            mov b, [d]
9940   4447 DD            push bl
9941   4448 07 B8 44      call torpedo_hit
9942   444B 51 02 00      add sp, 2
9943   444E             ;; klingons_shoot(); 
9944   444E 07 E4 57      call klingons_shoot
9945   4451             ;; return; 
9946   4451 F9            leave
9947   4452 09            ret
9948   4453 0A 56 44      jmp _if154_exit
9949   4456             _if154_exit:
9950   4456             ;; x = x + x1; 
9951   4456 FA F3 FF      lea d, [bp + -13] ; $x
9952   4459 DA            push d
9953   445A FA F3 FF      lea d, [bp + -13] ; $x
9954   445D 2A            mov b, [d]
9955   445E             ; START TERMS
9956   445E D7            push a
9957   445F 11            mov a, b
9958   4460 FA EF FF      lea d, [bp + -17] ; $x1
9959   4463 2A            mov b, [d]
9960   4464 56            add b, a
9961   4465 E4            pop a
9962   4466             ; END TERMS
9963   4466 E7            pop d
9964   4467 FD 43         mov [d], b
9965   4469             ;; y = y + x2; 
9966   4469 FA F1 FF      lea d, [bp + -15] ; $y
9967   446C DA            push d
9968   446D FA F1 FF      lea d, [bp + -15] ; $y
9969   4470 2A            mov b, [d]
9970   4471             ; START TERMS
9971   4471 D7            push a
9972   4472 11            mov a, b
9973   4473 FA ED FF      lea d, [bp + -19] ; $x2
9974   4476 2A            mov b, [d]
9975   4477 56            add b, a
9976   4478 E4            pop a
9977   4479             ; END TERMS
9978   4479 E7            pop d
9979   447A FD 43         mov [d], b
9980   447C             ;; x3 = FROM_FIXED00(x); 
9981   447C FA FF FF      lea d, [bp + -1] ; $x3
9982   447F DA            push d
9983   4480 FA F3 FF      lea d, [bp + -13] ; $x
9984   4483 2A            mov b, [d]
9985   4484 FD AB         swp b
9986   4486 D8            push b
9987   4487 07 67 1D      call FROM_FIXED00
9988   448A 51 02 00      add sp, 2
9989   448D E7            pop d
9990   448E FD 43         mov [d], b
9991   4490             ;; y3 = FROM_FIXED00(y); 
9992   4490 FA FD FF      lea d, [bp + -3] ; $y3
9993   4493 DA            push d
9994   4494 FA F1 FF      lea d, [bp + -15] ; $y
9995   4497 2A            mov b, [d]
9996   4498 FD AB         swp b
9997   449A D8            push b
9998   449B 07 67 1D      call FROM_FIXED00
9999   449E 51 02 00      add sp, 2
10000  44A1 E7            pop d
10001  44A2 FD 43         mov [d], b
10002  44A4 0A 85 43      jmp _while153_cond
10003  44A7             _while153_exit:
10004  44A7             ;; puts("Torpedo Missed\n"); 
10005  44A7 26 21 6F      mov b, _s112 ; "Torpedo Missed\n"
10006  44AA FD AB         swp b
10007  44AC D8            push b
10008  44AD 07 48 15      call puts
10009  44B0 51 02 00      add sp, 2
10010  44B3             ;; klingons_shoot(); 
10011  44B3 07 E4 57      call klingons_shoot
10012  44B6 F9            leave
10013  44B7 09            ret
10014  44B8             
10015  44B8             torpedo_hit:
10016  44B8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10017  44BB             ;; int i; 
10018  44BB 52 02 00      sub sp, 2 ; i
10019  44BE             ;; struct klingon *k; 
10020  44BE 52 02 00      sub sp, 2 ; k
10021  44C1             ;; switch(quad[yp+-1][xp+-1]) { 
10022  44C1             _switch155_expr:
10023  44C1 3B A1 62      mov d, _quad_data ; $quad
10024  44C4 D7            push a
10025  44C5 DA            push d
10026  44C6 FA 05 00      lea d, [bp + 5] ; $yp
10027  44C9 32            mov bl, [d]
10028  44CA A7 00         mov bh, 0
10029  44CC             ; START TERMS
10030  44CC D7            push a
10031  44CD 11            mov a, b
10032  44CE 26 FF FF      mov b, $ffff
10033  44D1 56            add b, a
10034  44D2 E4            pop a
10035  44D3             ; END TERMS
10036  44D3 E7            pop d
10037  44D4 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
10038  44D8 DA            push d
10039  44D9 FA 06 00      lea d, [bp + 6] ; $xp
10040  44DC 32            mov bl, [d]
10041  44DD A7 00         mov bh, 0
10042  44DF             ; START TERMS
10043  44DF D7            push a
10044  44E0 11            mov a, b
10045  44E1 26 FF FF      mov b, $ffff
10046  44E4 56            add b, a
10047  44E5 E4            pop a
10048  44E6             ; END TERMS
10049  44E6 E7            pop d
10050  44E7 5A            add d, b
10051  44E8 E4            pop a
10052  44E9 32            mov bl, [d]
10053  44EA A7 00         mov bh, 0
10054  44EC             _switch155_comparisons:
10055  44EC C0 01 00      cmp b, 1
10056  44EF C6 01 45      je _switch155_case0
10057  44F2 C0 03 00      cmp b, 3
10058  44F5 C6 1D 45      je _switch155_case1
10059  44F8 C0 02 00      cmp b, 2
10060  44FB C6 36 46      je _switch155_case2
10061  44FE 0A 31 47      jmp _switch155_exit
10062  4501             _switch155_case0:
10063  4501             ;; printf("Star at %d, %d absorbed torpedo energy.\n\n", yp, xp); 
10064  4501 FA 06 00      lea d, [bp + 6] ; $xp
10065  4504 32            mov bl, [d]
10066  4505 A7 00         mov bh, 0
10067  4507 DD            push bl
10068  4508 FA 05 00      lea d, [bp + 5] ; $yp
10069  450B 32            mov bl, [d]
10070  450C A7 00         mov bh, 0
10071  450E DD            push bl
10072  450F 26 31 6F      mov b, _s113 ; "Star at %d, %d absorbed torpedo energy.\n\n"
10073  4512 FD AB         swp b
10074  4514 D8            push b
10075  4515 07 B8 07      call printf
10076  4518 51 04 00      add sp, 4
10077  451B             ;; return; 
10078  451B F9            leave
10079  451C 09            ret
10080  451D             _switch155_case1:
10081  451D             ;; puts("*** Klingon Destroyed ***\n"); 
10082  451D 26 95 6E      mov b, _s106 ; "*** Klingon Destroyed ***\n"
10083  4520 FD AB         swp b
10084  4522 D8            push b
10085  4523 07 48 15      call puts
10086  4526 51 02 00      add sp, 2
10087  4529             ;; klingons--; 
10088  4529 3B 77 62      mov d, _klingons ; $klingons
10089  452C 32            mov bl, [d]
10090  452D A7 00         mov bh, 0
10091  452F D8            push b
10092  4530 FD 7D         dec b
10093  4532 3B 77 62      mov d, _klingons ; $klingons
10094  4535 FD 43         mov [d], b
10095  4537 E5            pop b
10096  4538             ;; klingons_left--; 
10097  4538 3B 79 62      mov d, _klingons_left ; $klingons_left
10098  453B 32            mov bl, [d]
10099  453C A7 00         mov bh, 0
10100  453E D8            push b
10101  453F FD 7D         dec b
10102  4541 3B 79 62      mov d, _klingons_left ; $klingons_left
10103  4544 FD 43         mov [d], b
10104  4546 E5            pop b
10105  4547             ;; if (klingons_left <= 0) 
10106  4547             _if156_cond:
10107  4547 3B 79 62      mov d, _klingons_left ; $klingons_left
10108  454A 32            mov bl, [d]
10109  454B A7 00         mov bh, 0
10110  454D             ; START RELATIONAL
10111  454D D7            push a
10112  454E 11            mov a, b
10113  454F 26 00 00      mov b, $0
10114  4552 B0            cmp a, b
10115  4553 FD 75         slu ; <= (unsigned)
10116  4555 E4            pop a
10117  4556             ; END RELATIONAL
10118  4556 C0 00 00      cmp b, 0
10119  4559 C6 62 45      je _if156_exit
10120  455C             _if156_true:
10121  455C             ;; won_game(); 
10122  455C 07 2C 56      call won_game
10123  455F 0A 62 45      jmp _if156_exit
10124  4562             _if156_exit:
10125  4562             ;; k = kdata; 
10126  4562 FA FD FF      lea d, [bp + -3] ; $k
10127  4565 DA            push d
10128  4566 3B 6B 62      mov d, _kdata_data ; $kdata
10129  4569 2D            mov b, d
10130  456A E7            pop d
10131  456B FD 43         mov [d], b
10132  456D             ;; for (i = 0; i <= 2; i++) { 
10133  456D             _for157_init:
10134  456D FA FF FF      lea d, [bp + -1] ; $i
10135  4570 DA            push d
10136  4571 26 00 00      mov b, $0
10137  4574 E7            pop d
10138  4575 FD 43         mov [d], b
10139  4577             _for157_cond:
10140  4577 FA FF FF      lea d, [bp + -1] ; $i
10141  457A 2A            mov b, [d]
10142  457B             ; START RELATIONAL
10143  457B D7            push a
10144  457C 11            mov a, b
10145  457D 26 02 00      mov b, $2
10146  4580 B0            cmp a, b
10147  4581 FD 73         slt ; <= (signed)
10148  4583 E4            pop a
10149  4584             ; END RELATIONAL
10150  4584 C0 00 00      cmp b, 0
10151  4587 C6 F4 45      je _for157_exit
10152  458A             _for157_block:
10153  458A             ;; if (yp == k->y && xp == k->x) 
10154  458A             _if158_cond:
10155  458A FA 05 00      lea d, [bp + 5] ; $yp
10156  458D 32            mov bl, [d]
10157  458E A7 00         mov bh, 0
10158  4590             ; START RELATIONAL
10159  4590 D7            push a
10160  4591 11            mov a, b
10161  4592 FA FD FF      lea d, [bp + -3] ; $k
10162  4595 FD 2A         mov d, [d]
10163  4597 58 00 00      add d, 0
10164  459A 32            mov bl, [d]
10165  459B A7 00         mov bh, 0
10166  459D B0            cmp a, b
10167  459E FD 71         seq ; ==
10168  45A0 E4            pop a
10169  45A1             ; END RELATIONAL
10170  45A1 D7            push a
10171  45A2 11            mov a, b
10172  45A3 FA 06 00      lea d, [bp + 6] ; $xp
10173  45A6 32            mov bl, [d]
10174  45A7 A7 00         mov bh, 0
10175  45A9             ; START RELATIONAL
10176  45A9 D7            push a
10177  45AA 11            mov a, b
10178  45AB FA FD FF      lea d, [bp + -3] ; $k
10179  45AE FD 2A         mov d, [d]
10180  45B0 58 01 00      add d, 1
10181  45B3 32            mov bl, [d]
10182  45B4 A7 00         mov bh, 0
10183  45B6 B0            cmp a, b
10184  45B7 FD 71         seq ; ==
10185  45B9 E4            pop a
10186  45BA             ; END RELATIONAL
10187  45BA FD A7         sand a, b
10188  45BC E4            pop a
10189  45BD C0 00 00      cmp b, 0
10190  45C0 C6 D5 45      je _if158_exit
10191  45C3             _if158_true:
10192  45C3             ;; k->energy = 0; 
10193  45C3 FA FD FF      lea d, [bp + -3] ; $k
10194  45C6 FD 2A         mov d, [d]
10195  45C8 58 02 00      add d, 2
10196  45CB DA            push d
10197  45CC 26 00 00      mov b, $0
10198  45CF E7            pop d
10199  45D0 FD 43         mov [d], b
10200  45D2 0A D5 45      jmp _if158_exit
10201  45D5             _if158_exit:
10202  45D5             ;; k++; 
10203  45D5 FA FD FF      lea d, [bp + -3] ; $k
10204  45D8 2A            mov b, [d]
10205  45D9 D8            push b
10206  45DA FD 77         inc b
10207  45DC FD 77         inc b
10208  45DE FA FD FF      lea d, [bp + -3] ; $k
10209  45E1 FD 43         mov [d], b
10210  45E3 E5            pop b
10211  45E4             _for157_update:
10212  45E4 FA FF FF      lea d, [bp + -1] ; $i
10213  45E7 2A            mov b, [d]
10214  45E8 D8            push b
10215  45E9 FD 77         inc b
10216  45EB FA FF FF      lea d, [bp + -1] ; $i
10217  45EE FD 43         mov [d], b
10218  45F0 E5            pop b
10219  45F1 0A 77 45      jmp _for157_cond
10220  45F4             _for157_exit:
10221  45F4             ;; map[quad_y][quad_x] =map[quad_y][quad_x] - 0x100; 
10222  45F4 3B C9 61      mov d, _map_data ; $map
10223  45F7 D7            push a
10224  45F8 DA            push d
10225  45F9 3B 7C 62      mov d, _quad_y ; $quad_y
10226  45FC 2A            mov b, [d]
10227  45FD E7            pop d
10228  45FE FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
10229  4602 DA            push d
10230  4603 3B 7E 62      mov d, _quad_x ; $quad_x
10231  4606 2A            mov b, [d]
10232  4607 E7            pop d
10233  4608 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10234  460C E4            pop a
10235  460D DA            push d
10236  460E 3B C9 61      mov d, _map_data ; $map
10237  4611 D7            push a
10238  4612 DA            push d
10239  4613 3B 7C 62      mov d, _quad_y ; $quad_y
10240  4616 2A            mov b, [d]
10241  4617 E7            pop d
10242  4618 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
10243  461C DA            push d
10244  461D 3B 7E 62      mov d, _quad_x ; $quad_x
10245  4620 2A            mov b, [d]
10246  4621 E7            pop d
10247  4622 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10248  4626 E4            pop a
10249  4627 2A            mov b, [d]
10250  4628             ; START TERMS
10251  4628 D7            push a
10252  4629 11            mov a, b
10253  462A 26 00 01      mov b, $100
10254  462D 60            sub a, b
10255  462E 27            mov b, a
10256  462F E4            pop a
10257  4630             ; END TERMS
10258  4630 E7            pop d
10259  4631 FD 43         mov [d], b
10260  4633             ;; break; 
10261  4633 0A 31 47      jmp _switch155_exit ; case break
10262  4636             _switch155_case2:
10263  4636             ;; puts("*** Starbase Destroyed ***"); 
10264  4636 26 5B 6F      mov b, _s114 ; "*** Starbase Destroyed ***"
10265  4639 FD AB         swp b
10266  463B D8            push b
10267  463C 07 48 15      call puts
10268  463F 51 02 00      add sp, 2
10269  4642             ;; starbases--; 
10270  4642 3B A1 61      mov d, _starbases ; $starbases
10271  4645 32            mov bl, [d]
10272  4646 A7 00         mov bh, 0
10273  4648 D8            push b
10274  4649 FD 7D         dec b
10275  464B 3B A1 61      mov d, _starbases ; $starbases
10276  464E FD 43         mov [d], b
10277  4650 E5            pop b
10278  4651             ;; starbases_left--; 
10279  4651 3B A4 61      mov d, _starbases_left ; $starbases_left
10280  4654 32            mov bl, [d]
10281  4655 A7 00         mov bh, 0
10282  4657 D8            push b
10283  4658 FD 7D         dec b
10284  465A 3B A4 61      mov d, _starbases_left ; $starbases_left
10285  465D FD 43         mov [d], b
10286  465F E5            pop b
10287  4660             ;; if (starbases_left <= 0 && klingons_left <= FROM_FIXED(stardate) - time_start - time_up) { 
10288  4660             _if159_cond:
10289  4660 3B A4 61      mov d, _starbases_left ; $starbases_left
10290  4663 32            mov bl, [d]
10291  4664 A7 00         mov bh, 0
10292  4666             ; START RELATIONAL
10293  4666 D7            push a
10294  4667 11            mov a, b
10295  4668 26 00 00      mov b, $0
10296  466B B0            cmp a, b
10297  466C FD 73         slt ; <= (signed)
10298  466E E4            pop a
10299  466F             ; END RELATIONAL
10300  466F D7            push a
10301  4670 11            mov a, b
10302  4671 3B 79 62      mov d, _klingons_left ; $klingons_left
10303  4674 32            mov bl, [d]
10304  4675 A7 00         mov bh, 0
10305  4677             ; START RELATIONAL
10306  4677 D7            push a
10307  4678 11            mov a, b
10308  4679 3B 9F 62      mov d, _stardate ; $stardate
10309  467C 2A            mov b, [d]
10310  467D FD AB         swp b
10311  467F D8            push b
10312  4680 07 44 1D      call FROM_FIXED
10313  4683 51 02 00      add sp, 2
10314  4686             ; START TERMS
10315  4686 D7            push a
10316  4687 11            mov a, b
10317  4688 3B 83 62      mov d, _time_start ; $time_start
10318  468B 2A            mov b, [d]
10319  468C 60            sub a, b
10320  468D 27            mov b, a
10321  468E 11            mov a, b
10322  468F 3B 85 62      mov d, _time_up ; $time_up
10323  4692 2A            mov b, [d]
10324  4693 60            sub a, b
10325  4694 27            mov b, a
10326  4695 E4            pop a
10327  4696             ; END TERMS
10328  4696 B0            cmp a, b
10329  4697 FD 75         slu ; <= (unsigned)
10330  4699 E4            pop a
10331  469A             ; END RELATIONAL
10332  469A FD A7         sand a, b
10333  469C E4            pop a
10334  469D C0 00 00      cmp b, 0
10335  46A0 C6 D9 46      je _if159_exit
10336  46A3             _if159_true:
10337  46A3             ;; puts("That does it, Captain!!"); 
10338  46A3 26 76 6F      mov b, _s115 ; "That does it, Captain!!"
10339  46A6 FD AB         swp b
10340  46A8 D8            push b
10341  46A9 07 48 15      call puts
10342  46AC 51 02 00      add sp, 2
10343  46AF             ;; puts("You are hereby relieved of command\n"); 
10344  46AF 26 8E 6F      mov b, _s116 ; "You are hereby relieved of command\n"
10345  46B2 FD AB         swp b
10346  46B4 D8            push b
10347  46B5 07 48 15      call puts
10348  46B8 51 02 00      add sp, 2
10349  46BB             ;; puts("and sentenced to 99 stardates of hard"); 
10350  46BB 26 B2 6F      mov b, _s117 ; "and sentenced to 99 stardates of hard"
10351  46BE FD AB         swp b
10352  46C0 D8            push b
10353  46C1 07 48 15      call puts
10354  46C4 51 02 00      add sp, 2
10355  46C7             ;; puts("labor on Cygnus 12!!\n"); 
10356  46C7 26 D8 6F      mov b, _s118 ; "labor on Cygnus 12!!\n"
10357  46CA FD AB         swp b
10358  46CC D8            push b
10359  46CD 07 48 15      call puts
10360  46D0 51 02 00      add sp, 2
10361  46D3             ;; resign_commision(); 
10362  46D3 07 11 56      call resign_commision
10363  46D6 0A D9 46      jmp _if159_exit
10364  46D9             _if159_exit:
10365  46D9             ;; puts("Starfleet Command reviewing your record to consider\n court martial!\n"); 
10366  46D9 26 EE 6F      mov b, _s119 ; "Starfleet Command reviewing your record to consider\n court martial!\n"
10367  46DC FD AB         swp b
10368  46DE D8            push b
10369  46DF 07 48 15      call puts
10370  46E2 51 02 00      add sp, 2
10371  46E5             ;; docked = 0;		/* Undock */ 
10372  46E5 3B C4 61      mov d, _docked ; $docked
10373  46E8 DA            push d
10374  46E9 26 00 00      mov b, $0
10375  46EC E7            pop d
10376  46ED FD 3E         mov [d], bl
10377  46EF             ;; map[quad_y][quad_x] =map[quad_y][quad_x] - 0x10; 
10378  46EF 3B C9 61      mov d, _map_data ; $map
10379  46F2 D7            push a
10380  46F3 DA            push d
10381  46F4 3B 7C 62      mov d, _quad_y ; $quad_y
10382  46F7 2A            mov b, [d]
10383  46F8 E7            pop d
10384  46F9 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
10385  46FD DA            push d
10386  46FE 3B 7E 62      mov d, _quad_x ; $quad_x
10387  4701 2A            mov b, [d]
10388  4702 E7            pop d
10389  4703 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10390  4707 E4            pop a
10391  4708 DA            push d
10392  4709 3B C9 61      mov d, _map_data ; $map
10393  470C D7            push a
10394  470D DA            push d
10395  470E 3B 7C 62      mov d, _quad_y ; $quad_y
10396  4711 2A            mov b, [d]
10397  4712 E7            pop d
10398  4713 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
10399  4717 DA            push d
10400  4718 3B 7E 62      mov d, _quad_x ; $quad_x
10401  471B 2A            mov b, [d]
10402  471C E7            pop d
10403  471D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10404  4721 E4            pop a
10405  4722 2A            mov b, [d]
10406  4723             ; START TERMS
10407  4723 D7            push a
10408  4724 11            mov a, b
10409  4725 26 10 00      mov b, $10
10410  4728 60            sub a, b
10411  4729 27            mov b, a
10412  472A E4            pop a
10413  472B             ; END TERMS
10414  472B E7            pop d
10415  472C FD 43         mov [d], b
10416  472E             ;; break; 
10417  472E 0A 31 47      jmp _switch155_exit ; case break
10418  4731             _switch155_exit:
10419  4731             ;; quad[yp+-1][xp+-1] =  		0      ; 
10420  4731 3B A1 62      mov d, _quad_data ; $quad
10421  4734 D7            push a
10422  4735 DA            push d
10423  4736 FA 05 00      lea d, [bp + 5] ; $yp
10424  4739 32            mov bl, [d]
10425  473A A7 00         mov bh, 0
10426  473C             ; START TERMS
10427  473C D7            push a
10428  473D 11            mov a, b
10429  473E 26 FF FF      mov b, $ffff
10430  4741 56            add b, a
10431  4742 E4            pop a
10432  4743             ; END TERMS
10433  4743 E7            pop d
10434  4744 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
10435  4748 DA            push d
10436  4749 FA 06 00      lea d, [bp + 6] ; $xp
10437  474C 32            mov bl, [d]
10438  474D A7 00         mov bh, 0
10439  474F             ; START TERMS
10440  474F D7            push a
10441  4750 11            mov a, b
10442  4751 26 FF FF      mov b, $ffff
10443  4754 56            add b, a
10444  4755 E4            pop a
10445  4756             ; END TERMS
10446  4756 E7            pop d
10447  4757 5A            add d, b
10448  4758 E4            pop a
10449  4759 DA            push d
10450  475A 26 00 00      mov b, $0
10451  475D E7            pop d
10452  475E FD 3E         mov [d], bl
10453  4760 F9            leave
10454  4761 09            ret
10455  4762             
10456  4762             damage_control:
10457  4762 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10458  4765             ;; int       repair_cost = 0; 
10459  4765 52 02 00      sub sp, 2 ; repair_cost
10460  4768             ; --- START LOCAL VAR INITIALIZATION
10461  4768 FA FF FF      lea d, [bp + -1] ; $repair_cost
10462  476B DA            push d
10463  476C 26 00 00      mov b, $0
10464  476F E7            pop d
10465  4770 FD 43         mov [d], b
10466  4772             ; --- END LOCAL VAR INITIALIZATION
10467  4772             ;; int i; 
10468  4772 52 02 00      sub sp, 2 ; i
10469  4775             ;; if (damage[6] < 0) 
10470  4775             _if160_cond:
10471  4775 3B 87 62      mov d, _damage_data ; $damage
10472  4778 D7            push a
10473  4779 DA            push d
10474  477A 26 06 00      mov b, $6
10475  477D E7            pop d
10476  477E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10477  4782 E4            pop a
10478  4783 2A            mov b, [d]
10479  4784             ; START RELATIONAL
10480  4784 D7            push a
10481  4785 11            mov a, b
10482  4786 26 00 00      mov b, $0
10483  4789 B0            cmp a, b
10484  478A FD 73         slt ; < (signed)
10485  478C E4            pop a
10486  478D             ; END RELATIONAL
10487  478D C0 00 00      cmp b, 0
10488  4790 C6 A2 47      je _if160_exit
10489  4793             _if160_true:
10490  4793             ;; puts("Damage Control report not available."); 
10491  4793 26 33 70      mov b, _s120 ; "Damage Control report not available."
10492  4796 FD AB         swp b
10493  4798 D8            push b
10494  4799 07 48 15      call puts
10495  479C 51 02 00      add sp, 2
10496  479F 0A A2 47      jmp _if160_exit
10497  47A2             _if160_exit:
10498  47A2             ;; if (docked) { 
10499  47A2             _if161_cond:
10500  47A2 3B C4 61      mov d, _docked ; $docked
10501  47A5 32            mov bl, [d]
10502  47A6 A7 00         mov bh, 0
10503  47A8 C0 00 00      cmp b, 0
10504  47AB C6 12 49      je _if161_exit
10505  47AE             _if161_true:
10506  47AE             ;; repair_cost = 0; 
10507  47AE FA FF FF      lea d, [bp + -1] ; $repair_cost
10508  47B1 DA            push d
10509  47B2 26 00 00      mov b, $0
10510  47B5 E7            pop d
10511  47B6 FD 43         mov [d], b
10512  47B8             ;; for (i = 1; i <= 8; i++) 
10513  47B8             _for162_init:
10514  47B8 FA FD FF      lea d, [bp + -3] ; $i
10515  47BB DA            push d
10516  47BC 26 01 00      mov b, $1
10517  47BF E7            pop d
10518  47C0 FD 43         mov [d], b
10519  47C2             _for162_cond:
10520  47C2 FA FD FF      lea d, [bp + -3] ; $i
10521  47C5 2A            mov b, [d]
10522  47C6             ; START RELATIONAL
10523  47C6 D7            push a
10524  47C7 11            mov a, b
10525  47C8 26 08 00      mov b, $8
10526  47CB B0            cmp a, b
10527  47CC FD 73         slt ; <= (signed)
10528  47CE E4            pop a
10529  47CF             ; END RELATIONAL
10530  47CF C0 00 00      cmp b, 0
10531  47D2 C6 19 48      je _for162_exit
10532  47D5             _for162_block:
10533  47D5             ;; if (damage[i] < 0) 
10534  47D5             _if163_cond:
10535  47D5 3B 87 62      mov d, _damage_data ; $damage
10536  47D8 D7            push a
10537  47D9 DA            push d
10538  47DA FA FD FF      lea d, [bp + -3] ; $i
10539  47DD 2A            mov b, [d]
10540  47DE E7            pop d
10541  47DF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10542  47E3 E4            pop a
10543  47E4 2A            mov b, [d]
10544  47E5             ; START RELATIONAL
10545  47E5 D7            push a
10546  47E6 11            mov a, b
10547  47E7 26 00 00      mov b, $0
10548  47EA B0            cmp a, b
10549  47EB FD 73         slt ; < (signed)
10550  47ED E4            pop a
10551  47EE             ; END RELATIONAL
10552  47EE C0 00 00      cmp b, 0
10553  47F1 C6 09 48      je _if163_exit
10554  47F4             _if163_true:
10555  47F4             ;; repair_cost = repair_cost + 10; 
10556  47F4 FA FF FF      lea d, [bp + -1] ; $repair_cost
10557  47F7 DA            push d
10558  47F8 FA FF FF      lea d, [bp + -1] ; $repair_cost
10559  47FB 2A            mov b, [d]
10560  47FC             ; START TERMS
10561  47FC D7            push a
10562  47FD 11            mov a, b
10563  47FE 26 0A 00      mov b, $a
10564  4801 56            add b, a
10565  4802 E4            pop a
10566  4803             ; END TERMS
10567  4803 E7            pop d
10568  4804 FD 43         mov [d], b
10569  4806 0A 09 48      jmp _if163_exit
10570  4809             _if163_exit:
10571  4809             _for162_update:
10572  4809 FA FD FF      lea d, [bp + -3] ; $i
10573  480C 2A            mov b, [d]
10574  480D D8            push b
10575  480E FD 77         inc b
10576  4810 FA FD FF      lea d, [bp + -3] ; $i
10577  4813 FD 43         mov [d], b
10578  4815 E5            pop b
10579  4816 0A C2 47      jmp _for162_cond
10580  4819             _for162_exit:
10581  4819             ;; if (repair_cost) { 
10582  4819             _if164_cond:
10583  4819 FA FF FF      lea d, [bp + -1] ; $repair_cost
10584  481C 2A            mov b, [d]
10585  481D C0 00 00      cmp b, 0
10586  4820 C6 0F 49      je _if164_exit
10587  4823             _if164_true:
10588  4823             ;; repair_cost = repair_cost + d4; 
10589  4823 FA FF FF      lea d, [bp + -1] ; $repair_cost
10590  4826 DA            push d
10591  4827 FA FF FF      lea d, [bp + -1] ; $repair_cost
10592  482A 2A            mov b, [d]
10593  482B             ; START TERMS
10594  482B D7            push a
10595  482C 11            mov a, b
10596  482D 3B 99 62      mov d, _d4 ; $d4
10597  4830 2A            mov b, [d]
10598  4831 56            add b, a
10599  4832 E4            pop a
10600  4833             ; END TERMS
10601  4833 E7            pop d
10602  4834 FD 43         mov [d], b
10603  4836             ;; if (repair_cost >= 100) 
10604  4836             _if165_cond:
10605  4836 FA FF FF      lea d, [bp + -1] ; $repair_cost
10606  4839 2A            mov b, [d]
10607  483A             ; START RELATIONAL
10608  483A D7            push a
10609  483B 11            mov a, b
10610  483C 26 64 00      mov b, $64
10611  483F B0            cmp a, b
10612  4840 FD 80         sge ; >=
10613  4842 E4            pop a
10614  4843             ; END RELATIONAL
10615  4843 C0 00 00      cmp b, 0
10616  4846 C6 56 48      je _if165_exit
10617  4849             _if165_true:
10618  4849             ;; repair_cost = 90;	/* 0.9 */ 
10619  4849 FA FF FF      lea d, [bp + -1] ; $repair_cost
10620  484C DA            push d
10621  484D 26 5A 00      mov b, $5a
10622  4850 E7            pop d
10623  4851 FD 43         mov [d], b
10624  4853 0A 56 48      jmp _if165_exit
10625  4856             _if165_exit:
10626  4856             ;; printf("\nTechnicians standing by to effect repairs to your ship;\nEstimated time to repair: %s stardates.\n Will you authorize the repair order (y/N)? ", print100(repair_cost)); 
10627  4856 FA FF FF      lea d, [bp + -1] ; $repair_cost
10628  4859 2A            mov b, [d]
10629  485A FD AB         swp b
10630  485C D8            push b
10631  485D 07 5E 20      call print100
10632  4860 51 02 00      add sp, 2
10633  4863 FD AB         swp b
10634  4865 D8            push b
10635  4866 26 58 70      mov b, _s121 ; "\nTechnicians standing by to effect repairs to your ship;\nEstimated time to repair: %s stardates.\n Will you authorize the repair order (y/N)? "
10636  4869 FD AB         swp b
10637  486B D8            push b
10638  486C 07 B8 07      call printf
10639  486F 51 04 00      add sp, 4
10640  4872             ;; if (yesno()) { 
10641  4872             _if166_cond:
10642  4872 07 5C 1E      call yesno
10643  4875 C0 00 00      cmp b, 0
10644  4878 C6 0A 49      je _if166_exit
10645  487B             _if166_true:
10646  487B             ;; for (i = 1; i <= 8; i++) 
10647  487B             _for167_init:
10648  487B FA FD FF      lea d, [bp + -3] ; $i
10649  487E DA            push d
10650  487F 26 01 00      mov b, $1
10651  4882 E7            pop d
10652  4883 FD 43         mov [d], b
10653  4885             _for167_cond:
10654  4885 FA FD FF      lea d, [bp + -3] ; $i
10655  4888 2A            mov b, [d]
10656  4889             ; START RELATIONAL
10657  4889 D7            push a
10658  488A 11            mov a, b
10659  488B 26 08 00      mov b, $8
10660  488E B0            cmp a, b
10661  488F FD 73         slt ; <= (signed)
10662  4891 E4            pop a
10663  4892             ; END RELATIONAL
10664  4892 C0 00 00      cmp b, 0
10665  4895 C6 E0 48      je _for167_exit
10666  4898             _for167_block:
10667  4898             ;; if (damage[i] < 0) 
10668  4898             _if168_cond:
10669  4898 3B 87 62      mov d, _damage_data ; $damage
10670  489B D7            push a
10671  489C DA            push d
10672  489D FA FD FF      lea d, [bp + -3] ; $i
10673  48A0 2A            mov b, [d]
10674  48A1 E7            pop d
10675  48A2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10676  48A6 E4            pop a
10677  48A7 2A            mov b, [d]
10678  48A8             ; START RELATIONAL
10679  48A8 D7            push a
10680  48A9 11            mov a, b
10681  48AA 26 00 00      mov b, $0
10682  48AD B0            cmp a, b
10683  48AE FD 73         slt ; < (signed)
10684  48B0 E4            pop a
10685  48B1             ; END RELATIONAL
10686  48B1 C0 00 00      cmp b, 0
10687  48B4 C6 D0 48      je _if168_exit
10688  48B7             _if168_true:
10689  48B7             ;; damage[i] = 0; 
10690  48B7 3B 87 62      mov d, _damage_data ; $damage
10691  48BA D7            push a
10692  48BB DA            push d
10693  48BC FA FD FF      lea d, [bp + -3] ; $i
10694  48BF 2A            mov b, [d]
10695  48C0 E7            pop d
10696  48C1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10697  48C5 E4            pop a
10698  48C6 DA            push d
10699  48C7 26 00 00      mov b, $0
10700  48CA E7            pop d
10701  48CB FD 43         mov [d], b
10702  48CD 0A D0 48      jmp _if168_exit
10703  48D0             _if168_exit:
10704  48D0             _for167_update:
10705  48D0 FA FD FF      lea d, [bp + -3] ; $i
10706  48D3 2A            mov b, [d]
10707  48D4 D8            push b
10708  48D5 FD 77         inc b
10709  48D7 FA FD FF      lea d, [bp + -3] ; $i
10710  48DA FD 43         mov [d], b
10711  48DC E5            pop b
10712  48DD 0A 85 48      jmp _for167_cond
10713  48E0             _for167_exit:
10714  48E0             ;; stardate = stardate + (repair_cost + 5)/10 + 1; 
10715  48E0 3B 9F 62      mov d, _stardate ; $stardate
10716  48E3 DA            push d
10717  48E4 3B 9F 62      mov d, _stardate ; $stardate
10718  48E7 2A            mov b, [d]
10719  48E8             ; START TERMS
10720  48E8 D7            push a
10721  48E9 11            mov a, b
10722  48EA FA FF FF      lea d, [bp + -1] ; $repair_cost
10723  48ED 2A            mov b, [d]
10724  48EE             ; START TERMS
10725  48EE D7            push a
10726  48EF 11            mov a, b
10727  48F0 26 05 00      mov b, $5
10728  48F3 56            add b, a
10729  48F4 E4            pop a
10730  48F5             ; END TERMS
10731  48F5             ; START FACTORS
10732  48F5 D7            push a
10733  48F6 11            mov a, b
10734  48F7 26 0A 00      mov b, $a
10735  48FA AE            div a, b
10736  48FB 27            mov b, a
10737  48FC E4            pop a
10738  48FD             ; END FACTORS
10739  48FD 56            add b, a
10740  48FE 11            mov a, b
10741  48FF 26 01 00      mov b, $1
10742  4902 56            add b, a
10743  4903 E4            pop a
10744  4904             ; END TERMS
10745  4904 E7            pop d
10746  4905 FD 43         mov [d], b
10747  4907 0A 0A 49      jmp _if166_exit
10748  490A             _if166_exit:
10749  490A             ;; return; 
10750  490A F9            leave
10751  490B 09            ret
10752  490C 0A 0F 49      jmp _if164_exit
10753  490F             _if164_exit:
10754  490F 0A 12 49      jmp _if161_exit
10755  4912             _if161_exit:
10756  4912             ;; if (damage[6] < 0) 
10757  4912             _if169_cond:
10758  4912 3B 87 62      mov d, _damage_data ; $damage
10759  4915 D7            push a
10760  4916 DA            push d
10761  4917 26 06 00      mov b, $6
10762  491A E7            pop d
10763  491B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10764  491F E4            pop a
10765  4920 2A            mov b, [d]
10766  4921             ; START RELATIONAL
10767  4921 D7            push a
10768  4922 11            mov a, b
10769  4923 26 00 00      mov b, $0
10770  4926 B0            cmp a, b
10771  4927 FD 73         slt ; < (signed)
10772  4929 E4            pop a
10773  492A             ; END RELATIONAL
10774  492A C0 00 00      cmp b, 0
10775  492D C6 35 49      je _if169_exit
10776  4930             _if169_true:
10777  4930             ;; return; 
10778  4930 F9            leave
10779  4931 09            ret
10780  4932 0A 35 49      jmp _if169_exit
10781  4935             _if169_exit:
10782  4935             ;; puts("Device            State of Repair"); 
10783  4935 26 E6 70      mov b, _s122 ; "Device            State of Repair"
10784  4938 FD AB         swp b
10785  493A D8            push b
10786  493B 07 48 15      call puts
10787  493E 51 02 00      add sp, 2
10788  4941             ;; for (i = 1; i <= 8; i++) 
10789  4941             _for170_init:
10790  4941 FA FD FF      lea d, [bp + -3] ; $i
10791  4944 DA            push d
10792  4945 26 01 00      mov b, $1
10793  4948 E7            pop d
10794  4949 FD 43         mov [d], b
10795  494B             _for170_cond:
10796  494B FA FD FF      lea d, [bp + -3] ; $i
10797  494E 2A            mov b, [d]
10798  494F             ; START RELATIONAL
10799  494F D7            push a
10800  4950 11            mov a, b
10801  4951 26 08 00      mov b, $8
10802  4954 B0            cmp a, b
10803  4955 FD 73         slt ; <= (signed)
10804  4957 E4            pop a
10805  4958             ; END RELATIONAL
10806  4958 C0 00 00      cmp b, 0
10807  495B C6 A6 49      je _for170_exit
10808  495E             _for170_block:
10809  495E             ;; printf("%-25s%6s\n", get_device_name(i), print100(damage[i])); 
10810  495E 3B 87 62      mov d, _damage_data ; $damage
10811  4961 D7            push a
10812  4962 DA            push d
10813  4963 FA FD FF      lea d, [bp + -3] ; $i
10814  4966 2A            mov b, [d]
10815  4967 E7            pop d
10816  4968 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10817  496C E4            pop a
10818  496D 2A            mov b, [d]
10819  496E FD AB         swp b
10820  4970 D8            push b
10821  4971 07 5E 20      call print100
10822  4974 51 02 00      add sp, 2
10823  4977 FD AB         swp b
10824  4979 D8            push b
10825  497A FA FD FF      lea d, [bp + -3] ; $i
10826  497D 2A            mov b, [d]
10827  497E FD AB         swp b
10828  4980 D8            push b
10829  4981 07 3E 5E      call get_device_name
10830  4984 51 02 00      add sp, 2
10831  4987 FD AB         swp b
10832  4989 D8            push b
10833  498A 26 08 71      mov b, _s123 ; "%-25s%6s\n"
10834  498D FD AB         swp b
10835  498F D8            push b
10836  4990 07 B8 07      call printf
10837  4993 51 06 00      add sp, 6
10838  4996             _for170_update:
10839  4996 FA FD FF      lea d, [bp + -3] ; $i
10840  4999 2A            mov b, [d]
10841  499A D8            push b
10842  499B FD 77         inc b
10843  499D FA FD FF      lea d, [bp + -3] ; $i
10844  49A0 FD 43         mov [d], b
10845  49A2 E5            pop b
10846  49A3 0A 4B 49      jmp _for170_cond
10847  49A6             _for170_exit:
10848  49A6             ;; printf("\n"); 
10849  49A6 26 12 71      mov b, _s124 ; "\n"
10850  49A9 FD AB         swp b
10851  49AB D8            push b
10852  49AC 07 B8 07      call printf
10853  49AF 51 02 00      add sp, 2
10854  49B2 F9            leave
10855  49B3 09            ret
10856  49B4             
10857  49B4             shield_control:
10858  49B4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10859  49B7             ;; int i; 
10860  49B7 52 02 00      sub sp, 2 ; i
10861  49BA             ;; if (inoperable(7)) 
10862  49BA             _if171_cond:
10863  49BA 26 07 00      mov b, $7
10864  49BD DD            push bl
10865  49BE 07 B0 20      call inoperable
10866  49C1 51 01 00      add sp, 1
10867  49C4 C0 00 00      cmp b, 0
10868  49C7 C6 CF 49      je _if171_exit
10869  49CA             _if171_true:
10870  49CA             ;; return; 
10871  49CA F9            leave
10872  49CB 09            ret
10873  49CC 0A CF 49      jmp _if171_exit
10874  49CF             _if171_exit:
10875  49CF             ;; printf("Energy available = %d\n\n Input number of units to shields: ", energy + shield); 
10876  49CF 3B C5 61      mov d, _energy ; $energy
10877  49D2 2A            mov b, [d]
10878  49D3             ; START TERMS
10879  49D3 D7            push a
10880  49D4 11            mov a, b
10881  49D5 3B 80 62      mov d, _shield ; $shield
10882  49D8 2A            mov b, [d]
10883  49D9 56            add b, a
10884  49DA E4            pop a
10885  49DB             ; END TERMS
10886  49DB FD AB         swp b
10887  49DD D8            push b
10888  49DE 26 14 71      mov b, _s125 ; "Energy available = %d\n\n Input number of units to shields: "
10889  49E1 FD AB         swp b
10890  49E3 D8            push b
10891  49E4 07 B8 07      call printf
10892  49E7 51 04 00      add sp, 4
10893  49EA             ;; i = input_int(); 
10894  49EA FA FF FF      lea d, [bp + -1] ; $i
10895  49ED DA            push d
10896  49EE 07 16 20      call input_int
10897  49F1 E7            pop d
10898  49F2 FD 43         mov [d], b
10899  49F4             ;; if (i < 0 || shield == i) { 
10900  49F4             _if172_cond:
10901  49F4 FA FF FF      lea d, [bp + -1] ; $i
10902  49F7 2A            mov b, [d]
10903  49F8             ; START RELATIONAL
10904  49F8 D7            push a
10905  49F9 11            mov a, b
10906  49FA 26 00 00      mov b, $0
10907  49FD B0            cmp a, b
10908  49FE FD 73         slt ; < (signed)
10909  4A00 E4            pop a
10910  4A01             ; END RELATIONAL
10911  4A01 D7            push a
10912  4A02 11            mov a, b
10913  4A03 3B 80 62      mov d, _shield ; $shield
10914  4A06 2A            mov b, [d]
10915  4A07             ; START RELATIONAL
10916  4A07 D7            push a
10917  4A08 11            mov a, b
10918  4A09 FA FF FF      lea d, [bp + -1] ; $i
10919  4A0C 2A            mov b, [d]
10920  4A0D B0            cmp a, b
10921  4A0E FD 71         seq ; ==
10922  4A10 E4            pop a
10923  4A11             ; END RELATIONAL
10924  4A11 FD A8         sor a, b ; ||
10925  4A13 E4            pop a
10926  4A14 C0 00 00      cmp b, 0
10927  4A17 C6 2B 4A      je _if172_exit
10928  4A1A             _if172_true:
10929  4A1A             ;; puts("<Shields Unchanged>\n"); 
10930  4A1A 26 4F 71      mov b, _s126 ; "<Shields Unchanged>\n"
10931  4A1D FD AB         swp b
10932  4A1F D8            push b
10933  4A20 07 48 15      call puts
10934  4A23 51 02 00      add sp, 2
10935  4A26             ;; return; 
10936  4A26 F9            leave
10937  4A27 09            ret
10938  4A28 0A 2B 4A      jmp _if172_exit
10939  4A2B             _if172_exit:
10940  4A2B             ;; if (i >= energy + shield) { 
10941  4A2B             _if173_cond:
10942  4A2B FA FF FF      lea d, [bp + -1] ; $i
10943  4A2E 2A            mov b, [d]
10944  4A2F             ; START RELATIONAL
10945  4A2F D7            push a
10946  4A30 11            mov a, b
10947  4A31 3B C5 61      mov d, _energy ; $energy
10948  4A34 2A            mov b, [d]
10949  4A35             ; START TERMS
10950  4A35 D7            push a
10951  4A36 11            mov a, b
10952  4A37 3B 80 62      mov d, _shield ; $shield
10953  4A3A 2A            mov b, [d]
10954  4A3B 56            add b, a
10955  4A3C E4            pop a
10956  4A3D             ; END TERMS
10957  4A3D B0            cmp a, b
10958  4A3E FD 80         sge ; >=
10959  4A40 E4            pop a
10960  4A41             ; END RELATIONAL
10961  4A41 C0 00 00      cmp b, 0
10962  4A44 C6 56 4A      je _if173_exit
10963  4A47             _if173_true:
10964  4A47             ;; puts("Shield Control Reports:\n  This is not the Federation Treasury."); 
10965  4A47 26 64 71      mov b, _s127 ; "Shield Control Reports:\n  This is not the Federation Treasury."
10966  4A4A FD AB         swp b
10967  4A4C D8            push b
10968  4A4D 07 48 15      call puts
10969  4A50 51 02 00      add sp, 2
10970  4A53 0A 56 4A      jmp _if173_exit
10971  4A56             _if173_exit:
10972  4A56             ;; energy = energy + shield - i; 
10973  4A56 3B C5 61      mov d, _energy ; $energy
10974  4A59 DA            push d
10975  4A5A 3B C5 61      mov d, _energy ; $energy
10976  4A5D 2A            mov b, [d]
10977  4A5E             ; START TERMS
10978  4A5E D7            push a
10979  4A5F 11            mov a, b
10980  4A60 3B 80 62      mov d, _shield ; $shield
10981  4A63 2A            mov b, [d]
10982  4A64 56            add b, a
10983  4A65 11            mov a, b
10984  4A66 FA FF FF      lea d, [bp + -1] ; $i
10985  4A69 2A            mov b, [d]
10986  4A6A 60            sub a, b
10987  4A6B 27            mov b, a
10988  4A6C E4            pop a
10989  4A6D             ; END TERMS
10990  4A6D E7            pop d
10991  4A6E FD 43         mov [d], b
10992  4A70             ;; shield = i; 
10993  4A70 3B 80 62      mov d, _shield ; $shield
10994  4A73 DA            push d
10995  4A74 FA FF FF      lea d, [bp + -1] ; $i
10996  4A77 2A            mov b, [d]
10997  4A78 E7            pop d
10998  4A79 FD 43         mov [d], b
10999  4A7B             ;; printf("Deflector Control Room report:\n  Shields now at %d units per your command.\n\n", shield); 
11000  4A7B 3B 80 62      mov d, _shield ; $shield
11001  4A7E 2A            mov b, [d]
11002  4A7F FD AB         swp b
11003  4A81 D8            push b
11004  4A82 26 A3 71      mov b, _s128 ; "Deflector Control Room report:\n  Shields now at %d units per your command.\n\n"
11005  4A85 FD AB         swp b
11006  4A87 D8            push b
11007  4A88 07 B8 07      call printf
11008  4A8B 51 04 00      add sp, 4
11009  4A8E F9            leave
11010  4A8F 09            ret
11011  4A90             
11012  4A90             library_computer:
11013  4A90 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11014  4A93             ;; if (inoperable(8)) 
11015  4A93             _if174_cond:
11016  4A93 26 08 00      mov b, $8
11017  4A96 DD            push bl
11018  4A97 07 B0 20      call inoperable
11019  4A9A 51 01 00      add sp, 1
11020  4A9D C0 00 00      cmp b, 0
11021  4AA0 C6 A8 4A      je _if174_exit
11022  4AA3             _if174_true:
11023  4AA3             ;; return; 
11024  4AA3 F9            leave
11025  4AA4 09            ret
11026  4AA5 0A A8 4A      jmp _if174_exit
11027  4AA8             _if174_exit:
11028  4AA8             ;; puts("Computer active and awating command: "); 
11029  4AA8 26 F0 71      mov b, _s129 ; "Computer active and awating command: "
11030  4AAB FD AB         swp b
11031  4AAD D8            push b
11032  4AAE 07 48 15      call puts
11033  4AB1 51 02 00      add sp, 2
11034  4AB4             ;; switch(input_int()) { 
11035  4AB4             _switch175_expr:
11036  4AB4 07 16 20      call input_int
11037  4AB7             _switch175_comparisons:
11038  4AB7 C0 FF FF      cmp b, -1
11039  4ABA C6 E7 4A      je _switch175_case0
11040  4ABD C0 00 00      cmp b, 0
11041  4AC0 C6 EA 4A      je _switch175_case1
11042  4AC3 C0 01 00      cmp b, 1
11043  4AC6 C6 F0 4A      je _switch175_case2
11044  4AC9 C0 02 00      cmp b, 2
11045  4ACC C6 F6 4A      je _switch175_case3
11046  4ACF C0 03 00      cmp b, 3
11047  4AD2 C6 FC 4A      je _switch175_case4
11048  4AD5 C0 04 00      cmp b, 4
11049  4AD8 C6 02 4B      je _switch175_case5
11050  4ADB C0 05 00      cmp b, 5
11051  4ADE C6 08 4B      je _switch175_case6
11052  4AE1 0A 0E 4B      jmp _switch175_default
11053  4AE4 0A 62 4B      jmp _switch175_exit
11054  4AE7             _switch175_case0:
11055  4AE7             ;; break; 
11056  4AE7 0A 62 4B      jmp _switch175_exit ; case break
11057  4AEA             _switch175_case1:
11058  4AEA             ;; galactic_record(); 
11059  4AEA 07 64 4B      call galactic_record
11060  4AED             ;; break; 
11061  4AED 0A 62 4B      jmp _switch175_exit ; case break
11062  4AF0             _switch175_case2:
11063  4AF0             ;; status_report(); 
11064  4AF0 07 8C 4C      call status_report
11065  4AF3             ;; break; 
11066  4AF3 0A 62 4B      jmp _switch175_exit ; case break
11067  4AF6             _switch175_case3:
11068  4AF6             ;; torpedo_data(); 
11069  4AF6 07 A5 4D      call torpedo_data
11070  4AF9             ;; break; 
11071  4AF9 0A 62 4B      jmp _switch175_exit ; case break
11072  4AFC             _switch175_case4:
11073  4AFC             ;; nav_data(); 
11074  4AFC 07 AF 4E      call nav_data
11075  4AFF             ;; break; 
11076  4AFF 0A 62 4B      jmp _switch175_exit ; case break
11077  4B02             _switch175_case5:
11078  4B02             ;; dirdist_calc(); 
11079  4B02 07 12 4F      call dirdist_calc
11080  4B05             ;; break; 
11081  4B05 0A 62 4B      jmp _switch175_exit ; case break
11082  4B08             _switch175_case6:
11083  4B08             ;; galaxy_map(); 
11084  4B08 07 97 50      call galaxy_map
11085  4B0B             ;; break; 
11086  4B0B 0A 62 4B      jmp _switch175_exit ; case break
11087  4B0E             _switch175_default:
11088  4B0E             ;; puts("Functions available from Library-Computer:\n\n"); 
11089  4B0E 26 16 72      mov b, _s130 ; "Functions available from Library-Computer:\n\n"
11090  4B11 FD AB         swp b
11091  4B13 D8            push b
11092  4B14 07 48 15      call puts
11093  4B17 51 02 00      add sp, 2
11094  4B1A             ;; puts("   0 = Cumulative Galactic Record\n"); 
11095  4B1A 26 43 72      mov b, _s131 ; "   0 = Cumulative Galactic Record\n"
11096  4B1D FD AB         swp b
11097  4B1F D8            push b
11098  4B20 07 48 15      call puts
11099  4B23 51 02 00      add sp, 2
11100  4B26             ;; puts("   1 = Status Report\n"); 
11101  4B26 26 66 72      mov b, _s132 ; "   1 = Status Report\n"
11102  4B29 FD AB         swp b
11103  4B2B D8            push b
11104  4B2C 07 48 15      call puts
11105  4B2F 51 02 00      add sp, 2
11106  4B32             ;; puts("   2 = Photon Torpedo Data\n"); 
11107  4B32 26 7C 72      mov b, _s133 ; "   2 = Photon Torpedo Data\n"
11108  4B35 FD AB         swp b
11109  4B37 D8            push b
11110  4B38 07 48 15      call puts
11111  4B3B 51 02 00      add sp, 2
11112  4B3E             ;; puts("   3 = Starbase Nav Data\n"); 
11113  4B3E 26 98 72      mov b, _s134 ; "   3 = Starbase Nav Data\n"
11114  4B41 FD AB         swp b
11115  4B43 D8            push b
11116  4B44 07 48 15      call puts
11117  4B47 51 02 00      add sp, 2
11118  4B4A             ;; puts("   4 = Direction/Distance Calculator\n"); 
11119  4B4A 26 B2 72      mov b, _s135 ; "   4 = Direction/Distance Calculator\n"
11120  4B4D FD AB         swp b
11121  4B4F D8            push b
11122  4B50 07 48 15      call puts
11123  4B53 51 02 00      add sp, 2
11124  4B56             ;; puts("   5 = Galaxy Region Name Map\n"); 
11125  4B56 26 D8 72      mov b, _s136 ; "   5 = Galaxy Region Name Map\n"
11126  4B59 FD AB         swp b
11127  4B5B D8            push b
11128  4B5C 07 48 15      call puts
11129  4B5F 51 02 00      add sp, 2
11130  4B62             _switch175_exit:
11131  4B62 F9            leave
11132  4B63 09            ret
11133  4B64             
11134  4B64             galactic_record:
11135  4B64 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11136  4B67             ;; int i, j; 
11137  4B67 52 02 00      sub sp, 2 ; i
11138  4B6A 52 02 00      sub sp, 2 ; j
11139  4B6D             ;; printf("\n     Computer Record of Galaxy for Quadrant %d,%d\n\n", quad_y, quad_x); 
11140  4B6D 3B 7E 62      mov d, _quad_x ; $quad_x
11141  4B70 2A            mov b, [d]
11142  4B71 FD AB         swp b
11143  4B73 D8            push b
11144  4B74 3B 7C 62      mov d, _quad_y ; $quad_y
11145  4B77 2A            mov b, [d]
11146  4B78 FD AB         swp b
11147  4B7A D8            push b
11148  4B7B 26 F7 72      mov b, _s137 ; "\n     Computer Record of Galaxy for Quadrant %d,%d\n\n"
11149  4B7E FD AB         swp b
11150  4B80 D8            push b
11151  4B81 07 B8 07      call printf
11152  4B84 51 06 00      add sp, 6
11153  4B87             ;; puts("     1     2     3     4     5     6     7     8"); 
11154  4B87 26 2C 73      mov b, _s138 ; "     1     2     3     4     5     6     7     8"
11155  4B8A FD AB         swp b
11156  4B8C D8            push b
11157  4B8D 07 48 15      call puts
11158  4B90 51 02 00      add sp, 2
11159  4B93             ;; for (i = 1; i <= 8; i++) { 
11160  4B93             _for176_init:
11161  4B93 FA FF FF      lea d, [bp + -1] ; $i
11162  4B96 DA            push d
11163  4B97 26 01 00      mov b, $1
11164  4B9A E7            pop d
11165  4B9B FD 43         mov [d], b
11166  4B9D             _for176_cond:
11167  4B9D FA FF FF      lea d, [bp + -1] ; $i
11168  4BA0 2A            mov b, [d]
11169  4BA1             ; START RELATIONAL
11170  4BA1 D7            push a
11171  4BA2 11            mov a, b
11172  4BA3 26 08 00      mov b, $8
11173  4BA6 B0            cmp a, b
11174  4BA7 FD 73         slt ; <= (signed)
11175  4BA9 E4            pop a
11176  4BAA             ; END RELATIONAL
11177  4BAA C0 00 00      cmp b, 0
11178  4BAD C6 77 4C      je _for176_exit
11179  4BB0             _for176_block:
11180  4BB0             ;; printf("%s%d", gr_1, i); 
11181  4BB0 FA FF FF      lea d, [bp + -1] ; $i
11182  4BB3 2A            mov b, [d]
11183  4BB4 FD AB         swp b
11184  4BB6 D8            push b
11185  4BB7 3B 1C 64      mov d, _gr_1 ; $gr_1
11186  4BBA 2A            mov b, [d]
11187  4BBB FD AB         swp b
11188  4BBD D8            push b
11189  4BBE 26 5D 73      mov b, _s139 ; "%s%d"
11190  4BC1 FD AB         swp b
11191  4BC3 D8            push b
11192  4BC4 07 B8 07      call printf
11193  4BC7 51 06 00      add sp, 6
11194  4BCA             ;; for (j = 1; j <= 8; j++) { 
11195  4BCA             _for177_init:
11196  4BCA FA FD FF      lea d, [bp + -3] ; $j
11197  4BCD DA            push d
11198  4BCE 26 01 00      mov b, $1
11199  4BD1 E7            pop d
11200  4BD2 FD 43         mov [d], b
11201  4BD4             _for177_cond:
11202  4BD4 FA FD FF      lea d, [bp + -3] ; $j
11203  4BD7 2A            mov b, [d]
11204  4BD8             ; START RELATIONAL
11205  4BD8 D7            push a
11206  4BD9 11            mov a, b
11207  4BDA 26 08 00      mov b, $8
11208  4BDD B0            cmp a, b
11209  4BDE FD 73         slt ; <= (signed)
11210  4BE0 E4            pop a
11211  4BE1             ; END RELATIONAL
11212  4BE1 C0 00 00      cmp b, 0
11213  4BE4 C6 5D 4C      je _for177_exit
11214  4BE7             _for177_block:
11215  4BE7             ;; printf("   "); 
11216  4BE7 26 8D 65      mov b, _s25 ; "   "
11217  4BEA FD AB         swp b
11218  4BEC D8            push b
11219  4BED 07 B8 07      call printf
11220  4BF0 51 02 00      add sp, 2
11221  4BF3             ;; if (map[i][j] &   0x1000		/* Set if this sector was mapped */          ) 
11222  4BF3             _if178_cond:
11223  4BF3 3B C9 61      mov d, _map_data ; $map
11224  4BF6 D7            push a
11225  4BF7 DA            push d
11226  4BF8 FA FF FF      lea d, [bp + -1] ; $i
11227  4BFB 2A            mov b, [d]
11228  4BFC E7            pop d
11229  4BFD FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
11230  4C01 DA            push d
11231  4C02 FA FD FF      lea d, [bp + -3] ; $j
11232  4C05 2A            mov b, [d]
11233  4C06 E7            pop d
11234  4C07 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
11235  4C0B E4            pop a
11236  4C0C 2A            mov b, [d]
11237  4C0D D7            push a
11238  4C0E 11            mov a, b
11239  4C0F 26 00 10      mov b, $1000
11240  4C12 FD 92         and b, a ; &
11241  4C14 E4            pop a
11242  4C15 C0 00 00      cmp b, 0
11243  4C18 C6 41 4C      je _if178_else
11244  4C1B             _if178_true:
11245  4C1B             ;; putbcd(map[i][j]); 
11246  4C1B 3B C9 61      mov d, _map_data ; $map
11247  4C1E D7            push a
11248  4C1F DA            push d
11249  4C20 FA FF FF      lea d, [bp + -1] ; $i
11250  4C23 2A            mov b, [d]
11251  4C24 E7            pop d
11252  4C25 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
11253  4C29 DA            push d
11254  4C2A FA FD FF      lea d, [bp + -3] ; $j
11255  4C2D 2A            mov b, [d]
11256  4C2E E7            pop d
11257  4C2F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
11258  4C33 E4            pop a
11259  4C34 2A            mov b, [d]
11260  4C35 FD AB         swp b
11261  4C37 D8            push b
11262  4C38 07 FC 39      call putbcd
11263  4C3B 51 02 00      add sp, 2
11264  4C3E 0A 4D 4C      jmp _if178_exit
11265  4C41             _if178_else:
11266  4C41             ;; printf("***"); 
11267  4C41 26 50 6D      mov b, _s97 ; "***"
11268  4C44 FD AB         swp b
11269  4C46 D8            push b
11270  4C47 07 B8 07      call printf
11271  4C4A 51 02 00      add sp, 2
11272  4C4D             _if178_exit:
11273  4C4D             _for177_update:
11274  4C4D FA FD FF      lea d, [bp + -3] ; $j
11275  4C50 2A            mov b, [d]
11276  4C51 D8            push b
11277  4C52 FD 77         inc b
11278  4C54 FA FD FF      lea d, [bp + -3] ; $j
11279  4C57 FD 43         mov [d], b
11280  4C59 E5            pop b
11281  4C5A 0A D4 4B      jmp _for177_cond
11282  4C5D             _for177_exit:
11283  4C5D             ;; putchar('\n'); 
11284  4C5D 26 0A 00      mov b, $a
11285  4C60 DD            push bl
11286  4C61 07 12 15      call putchar
11287  4C64 51 01 00      add sp, 1
11288  4C67             _for176_update:
11289  4C67 FA FF FF      lea d, [bp + -1] ; $i
11290  4C6A 2A            mov b, [d]
11291  4C6B D8            push b
11292  4C6C FD 77         inc b
11293  4C6E FA FF FF      lea d, [bp + -1] ; $i
11294  4C71 FD 43         mov [d], b
11295  4C73 E5            pop b
11296  4C74 0A 9D 4B      jmp _for176_cond
11297  4C77             _for176_exit:
11298  4C77             ;; printf("%s\n", gr_1); 
11299  4C77 3B 1C 64      mov d, _gr_1 ; $gr_1
11300  4C7A 2A            mov b, [d]
11301  4C7B FD AB         swp b
11302  4C7D D8            push b
11303  4C7E 26 57 6D      mov b, _s99 ; "%s\n"
11304  4C81 FD AB         swp b
11305  4C83 D8            push b
11306  4C84 07 B8 07      call printf
11307  4C87 51 04 00      add sp, 4
11308  4C8A F9            leave
11309  4C8B 09            ret
11310  4C8C             
11311  4C8C             status_report:
11312  4C8C F8 00 00      enter 0 ; (push bp; mov bp, sp)
11313  4C8F             ;; char *plural; 
11314  4C8F 52 02 00      sub sp, 2 ; plural
11315  4C92             ;; plural = str_s + 1; 
11316  4C92 FA FF FF      lea d, [bp + -1] ; $plural
11317  4C95 DA            push d
11318  4C96 3B 20 64      mov d, _str_s ; $str_s
11319  4C99 2A            mov b, [d]
11320  4C9A             ; START TERMS
11321  4C9A D7            push a
11322  4C9B 11            mov a, b
11323  4C9C 26 01 00      mov b, $1
11324  4C9F 56            add b, a
11325  4CA0 E4            pop a
11326  4CA1             ; END TERMS
11327  4CA1 E7            pop d
11328  4CA2 FD 43         mov [d], b
11329  4CA4             ;; unsigned int        left; 
11330  4CA4 52 02 00      sub sp, 2 ; left
11331  4CA7             ;; left = TO_FIXED(time_start + time_up) - stardate; 
11332  4CA7 FA FD FF      lea d, [bp + -3] ; $left
11333  4CAA DA            push d
11334  4CAB 3B 83 62      mov d, _time_start ; $time_start
11335  4CAE 2A            mov b, [d]
11336  4CAF             ; START TERMS
11337  4CAF D7            push a
11338  4CB0 11            mov a, b
11339  4CB1 3B 85 62      mov d, _time_up ; $time_up
11340  4CB4 2A            mov b, [d]
11341  4CB5 56            add b, a
11342  4CB6 E4            pop a
11343  4CB7             ; END TERMS
11344  4CB7 FD AB         swp b
11345  4CB9 D8            push b
11346  4CBA 07 32 1D      call TO_FIXED
11347  4CBD 51 02 00      add sp, 2
11348  4CC0             ; START TERMS
11349  4CC0 D7            push a
11350  4CC1 11            mov a, b
11351  4CC2 3B 9F 62      mov d, _stardate ; $stardate
11352  4CC5 2A            mov b, [d]
11353  4CC6 60            sub a, b
11354  4CC7 27            mov b, a
11355  4CC8 E4            pop a
11356  4CC9             ; END TERMS
11357  4CC9 E7            pop d
11358  4CCA FD 43         mov [d], b
11359  4CCC             ;; puts("   Status Report:\n"); 
11360  4CCC 26 62 73      mov b, _s140 ; "   Status Report:\n"
11361  4CCF FD AB         swp b
11362  4CD1 D8            push b
11363  4CD2 07 48 15      call puts
11364  4CD5 51 02 00      add sp, 2
11365  4CD8             ;; if (klingons_left > 1) 
11366  4CD8             _if179_cond:
11367  4CD8 3B 79 62      mov d, _klingons_left ; $klingons_left
11368  4CDB 32            mov bl, [d]
11369  4CDC A7 00         mov bh, 0
11370  4CDE             ; START RELATIONAL
11371  4CDE D7            push a
11372  4CDF 11            mov a, b
11373  4CE0 26 01 00      mov b, $1
11374  4CE3 B0            cmp a, b
11375  4CE4 FD 81         sgu ; > (unsigned)
11376  4CE6 E4            pop a
11377  4CE7             ; END RELATIONAL
11378  4CE7 C0 00 00      cmp b, 0
11379  4CEA C6 FB 4C      je _if179_exit
11380  4CED             _if179_true:
11381  4CED             ;; plural = str_s; 
11382  4CED FA FF FF      lea d, [bp + -1] ; $plural
11383  4CF0 DA            push d
11384  4CF1 3B 20 64      mov d, _str_s ; $str_s
11385  4CF4 2A            mov b, [d]
11386  4CF5 E7            pop d
11387  4CF6 FD 43         mov [d], b
11388  4CF8 0A FB 4C      jmp _if179_exit
11389  4CFB             _if179_exit:
11390  4CFB             ;; printf("Klingon%s Left: %d\n Mission must be completed in %d.%d stardates\n", 
11391  4CFB FA FD FF      lea d, [bp + -3] ; $left
11392  4CFE 2A            mov b, [d]
11393  4CFF             ; START FACTORS
11394  4CFF D7            push a
11395  4D00 11            mov a, b
11396  4D01 26 0A 00      mov b, $a
11397  4D04 AE            div a, b ; 
11398  4D05 11            mov a, b
11399  4D06 27            mov b, a
11400  4D07 E4            pop a
11401  4D08             ; END FACTORS
11402  4D08 FD AB         swp b
11403  4D0A D8            push b
11404  4D0B FA FD FF      lea d, [bp + -3] ; $left
11405  4D0E 2A            mov b, [d]
11406  4D0F FD AB         swp b
11407  4D11 D8            push b
11408  4D12 07 44 1D      call FROM_FIXED
11409  4D15 51 02 00      add sp, 2
11410  4D18 FD AB         swp b
11411  4D1A D8            push b
11412  4D1B 3B 79 62      mov d, _klingons_left ; $klingons_left
11413  4D1E 32            mov bl, [d]
11414  4D1F A7 00         mov bh, 0
11415  4D21 DD            push bl
11416  4D22 FA FF FF      lea d, [bp + -1] ; $plural
11417  4D25 2A            mov b, [d]
11418  4D26 FD AB         swp b
11419  4D28 D8            push b
11420  4D29 26 75 73      mov b, _s141 ; "Klingon%s Left: %d\n Mission must be completed in %d.%d stardates\n"
11421  4D2C FD AB         swp b
11422  4D2E D8            push b
11423  4D2F 07 B8 07      call printf
11424  4D32 51 09 00      add sp, 9
11425  4D35             ;; if (starbases_left < 1) { 
11426  4D35             _if180_cond:
11427  4D35 3B A4 61      mov d, _starbases_left ; $starbases_left
11428  4D38 32            mov bl, [d]
11429  4D39 A7 00         mov bh, 0
11430  4D3B             ; START RELATIONAL
11431  4D3B D7            push a
11432  4D3C 11            mov a, b
11433  4D3D 26 01 00      mov b, $1
11434  4D40 B0            cmp a, b
11435  4D41 FD 73         slt ; < (signed)
11436  4D43 E4            pop a
11437  4D44             ; END RELATIONAL
11438  4D44 C0 00 00      cmp b, 0
11439  4D47 C6 59 4D      je _if180_else
11440  4D4A             _if180_true:
11441  4D4A             ;; puts("Your stupidity has left you on your own in the galaxy\n -- you have no starbases left!\n"); 
11442  4D4A 26 B7 73      mov b, _s142 ; "Your stupidity has left you on your own in the galaxy\n -- you have no starbases left!\n"
11443  4D4D FD AB         swp b
11444  4D4F D8            push b
11445  4D50 07 48 15      call puts
11446  4D53 51 02 00      add sp, 2
11447  4D56 0A A3 4D      jmp _if180_exit
11448  4D59             _if180_else:
11449  4D59             ;; plural = str_s; 
11450  4D59 FA FF FF      lea d, [bp + -1] ; $plural
11451  4D5C DA            push d
11452  4D5D 3B 20 64      mov d, _str_s ; $str_s
11453  4D60 2A            mov b, [d]
11454  4D61 E7            pop d
11455  4D62 FD 43         mov [d], b
11456  4D64             ;; if (starbases_left < 2) 
11457  4D64             _if181_cond:
11458  4D64 3B A4 61      mov d, _starbases_left ; $starbases_left
11459  4D67 32            mov bl, [d]
11460  4D68 A7 00         mov bh, 0
11461  4D6A             ; START RELATIONAL
11462  4D6A D7            push a
11463  4D6B 11            mov a, b
11464  4D6C 26 02 00      mov b, $2
11465  4D6F B0            cmp a, b
11466  4D70 FD 73         slt ; < (signed)
11467  4D72 E4            pop a
11468  4D73             ; END RELATIONAL
11469  4D73 C0 00 00      cmp b, 0
11470  4D76 C6 89 4D      je _if181_exit
11471  4D79             _if181_true:
11472  4D79             ;; plural++; 
11473  4D79 FA FF FF      lea d, [bp + -1] ; $plural
11474  4D7C 2A            mov b, [d]
11475  4D7D D8            push b
11476  4D7E FD 77         inc b
11477  4D80 FA FF FF      lea d, [bp + -1] ; $plural
11478  4D83 FD 43         mov [d], b
11479  4D85 E5            pop b
11480  4D86 0A 89 4D      jmp _if181_exit
11481  4D89             _if181_exit:
11482  4D89             ;; printf("The Federation is maintaining %d starbase%s in the galaxy\n\n", starbases_left, plural); 
11483  4D89 FA FF FF      lea d, [bp + -1] ; $plural
11484  4D8C 2A            mov b, [d]
11485  4D8D FD AB         swp b
11486  4D8F D8            push b
11487  4D90 3B A4 61      mov d, _starbases_left ; $starbases_left
11488  4D93 32            mov bl, [d]
11489  4D94 A7 00         mov bh, 0
11490  4D96 DD            push bl
11491  4D97 26 0E 74      mov b, _s143 ; "The Federation is maintaining %d starbase%s in the galaxy\n\n"
11492  4D9A FD AB         swp b
11493  4D9C D8            push b
11494  4D9D 07 B8 07      call printf
11495  4DA0 51 05 00      add sp, 5
11496  4DA3             _if180_exit:
11497  4DA3 F9            leave
11498  4DA4 09            ret
11499  4DA5             
11500  4DA5             torpedo_data:
11501  4DA5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11502  4DA8             ;; int i; 
11503  4DA8 52 02 00      sub sp, 2 ; i
11504  4DAB             ;; char *plural; 
11505  4DAB 52 02 00      sub sp, 2 ; plural
11506  4DAE             ;; plural = str_s + 1; 
11507  4DAE FA FD FF      lea d, [bp + -3] ; $plural
11508  4DB1 DA            push d
11509  4DB2 3B 20 64      mov d, _str_s ; $str_s
11510  4DB5 2A            mov b, [d]
11511  4DB6             ; START TERMS
11512  4DB6 D7            push a
11513  4DB7 11            mov a, b
11514  4DB8 26 01 00      mov b, $1
11515  4DBB 56            add b, a
11516  4DBC E4            pop a
11517  4DBD             ; END TERMS
11518  4DBD E7            pop d
11519  4DBE FD 43         mov [d], b
11520  4DC0             ;; struct klingon *k; 
11521  4DC0 52 02 00      sub sp, 2 ; k
11522  4DC3             ;; if (no_klingon()) 
11523  4DC3             _if182_cond:
11524  4DC3 07 E8 3B      call no_klingon
11525  4DC6 C0 00 00      cmp b, 0
11526  4DC9 C6 D1 4D      je _if182_exit
11527  4DCC             _if182_true:
11528  4DCC             ;; return; 
11529  4DCC F9            leave
11530  4DCD 09            ret
11531  4DCE 0A D1 4D      jmp _if182_exit
11532  4DD1             _if182_exit:
11533  4DD1             ;; if (klingons > 1) 
11534  4DD1             _if183_cond:
11535  4DD1 3B 77 62      mov d, _klingons ; $klingons
11536  4DD4 32            mov bl, [d]
11537  4DD5 A7 00         mov bh, 0
11538  4DD7             ; START RELATIONAL
11539  4DD7 D7            push a
11540  4DD8 11            mov a, b
11541  4DD9 26 01 00      mov b, $1
11542  4DDC B0            cmp a, b
11543  4DDD FD 81         sgu ; > (unsigned)
11544  4DDF E4            pop a
11545  4DE0             ; END RELATIONAL
11546  4DE0 C0 00 00      cmp b, 0
11547  4DE3 C6 F6 4D      je _if183_exit
11548  4DE6             _if183_true:
11549  4DE6             ;; plural--; 
11550  4DE6 FA FD FF      lea d, [bp + -3] ; $plural
11551  4DE9 2A            mov b, [d]
11552  4DEA D8            push b
11553  4DEB FD 7D         dec b
11554  4DED FA FD FF      lea d, [bp + -3] ; $plural
11555  4DF0 FD 43         mov [d], b
11556  4DF2 E5            pop b
11557  4DF3 0A F6 4D      jmp _if183_exit
11558  4DF6             _if183_exit:
11559  4DF6             ;; printf("From Enterprise to Klingon battlecriuser%s:\n\n", plural); 
11560  4DF6 FA FD FF      lea d, [bp + -3] ; $plural
11561  4DF9 2A            mov b, [d]
11562  4DFA FD AB         swp b
11563  4DFC D8            push b
11564  4DFD 26 4A 74      mov b, _s144 ; "From Enterprise to Klingon battlecriuser%s:\n\n"
11565  4E00 FD AB         swp b
11566  4E02 D8            push b
11567  4E03 07 B8 07      call printf
11568  4E06 51 04 00      add sp, 4
11569  4E09             ;; k = kdata; 
11570  4E09 FA FB FF      lea d, [bp + -5] ; $k
11571  4E0C DA            push d
11572  4E0D 3B 6B 62      mov d, _kdata_data ; $kdata
11573  4E10 2D            mov b, d
11574  4E11 E7            pop d
11575  4E12 FD 43         mov [d], b
11576  4E14             ;; for (i = 0; i <= 2; i++) { 
11577  4E14             _for184_init:
11578  4E14 FA FF FF      lea d, [bp + -1] ; $i
11579  4E17 DA            push d
11580  4E18 26 00 00      mov b, $0
11581  4E1B E7            pop d
11582  4E1C FD 43         mov [d], b
11583  4E1E             _for184_cond:
11584  4E1E FA FF FF      lea d, [bp + -1] ; $i
11585  4E21 2A            mov b, [d]
11586  4E22             ; START RELATIONAL
11587  4E22 D7            push a
11588  4E23 11            mov a, b
11589  4E24 26 02 00      mov b, $2
11590  4E27 B0            cmp a, b
11591  4E28 FD 73         slt ; <= (signed)
11592  4E2A E4            pop a
11593  4E2B             ; END RELATIONAL
11594  4E2B C0 00 00      cmp b, 0
11595  4E2E C6 AD 4E      je _for184_exit
11596  4E31             _for184_block:
11597  4E31             ;; if (k->energy > 0) { 
11598  4E31             _if185_cond:
11599  4E31 FA FB FF      lea d, [bp + -5] ; $k
11600  4E34 FD 2A         mov d, [d]
11601  4E36 58 02 00      add d, 2
11602  4E39 2A            mov b, [d]
11603  4E3A             ; START RELATIONAL
11604  4E3A D7            push a
11605  4E3B 11            mov a, b
11606  4E3C 26 00 00      mov b, $0
11607  4E3F B0            cmp a, b
11608  4E40 FD 7F         sgt ; >
11609  4E42 E4            pop a
11610  4E43             ; END RELATIONAL
11611  4E43 C0 00 00      cmp b, 0
11612  4E46 C6 8E 4E      je _if185_exit
11613  4E49             _if185_true:
11614  4E49             ;; compute_vector(TO_FIXED00(k->y), 
11615  4E49 3B 9D 62      mov d, _ship_x ; $ship_x
11616  4E4C 2A            mov b, [d]
11617  4E4D FD AB         swp b
11618  4E4F D8            push b
11619  4E50 3B 9B 62      mov d, _ship_y ; $ship_y
11620  4E53 2A            mov b, [d]
11621  4E54 FD AB         swp b
11622  4E56 D8            push b
11623  4E57 FA FB FF      lea d, [bp + -5] ; $k
11624  4E5A FD 2A         mov d, [d]
11625  4E5C 58 01 00      add d, 1
11626  4E5F 32            mov bl, [d]
11627  4E60 A7 00         mov bh, 0
11628  4E62 FD AB         swp b
11629  4E64 D8            push b
11630  4E65 07 55 1D      call TO_FIXED00
11631  4E68 51 02 00      add sp, 2
11632  4E6B FD AB         swp b
11633  4E6D D8            push b
11634  4E6E FA FB FF      lea d, [bp + -5] ; $k
11635  4E71 FD 2A         mov d, [d]
11636  4E73 58 00 00      add d, 0
11637  4E76 32            mov bl, [d]
11638  4E77 A7 00         mov bh, 0
11639  4E79 FD AB         swp b
11640  4E7B D8            push b
11641  4E7C 07 55 1D      call TO_FIXED00
11642  4E7F 51 02 00      add sp, 2
11643  4E82 FD AB         swp b
11644  4E84 D8            push b
11645  4E85 07 6F 52      call compute_vector
11646  4E88 51 08 00      add sp, 8
11647  4E8B 0A 8E 4E      jmp _if185_exit
11648  4E8E             _if185_exit:
11649  4E8E             ;; k++; 
11650  4E8E FA FB FF      lea d, [bp + -5] ; $k
11651  4E91 2A            mov b, [d]
11652  4E92 D8            push b
11653  4E93 FD 77         inc b
11654  4E95 FD 77         inc b
11655  4E97 FA FB FF      lea d, [bp + -5] ; $k
11656  4E9A FD 43         mov [d], b
11657  4E9C E5            pop b
11658  4E9D             _for184_update:
11659  4E9D FA FF FF      lea d, [bp + -1] ; $i
11660  4EA0 2A            mov b, [d]
11661  4EA1 D8            push b
11662  4EA2 FD 77         inc b
11663  4EA4 FA FF FF      lea d, [bp + -1] ; $i
11664  4EA7 FD 43         mov [d], b
11665  4EA9 E5            pop b
11666  4EAA 0A 1E 4E      jmp _for184_cond
11667  4EAD             _for184_exit:
11668  4EAD F9            leave
11669  4EAE 09            ret
11670  4EAF             
11671  4EAF             nav_data:
11672  4EAF F8 00 00      enter 0 ; (push bp; mov bp, sp)
11673  4EB2             ;; if (starbases <= 0) { 
11674  4EB2             _if186_cond:
11675  4EB2 3B A1 61      mov d, _starbases ; $starbases
11676  4EB5 32            mov bl, [d]
11677  4EB6 A7 00         mov bh, 0
11678  4EB8             ; START RELATIONAL
11679  4EB8 D7            push a
11680  4EB9 11            mov a, b
11681  4EBA 26 00 00      mov b, $0
11682  4EBD B0            cmp a, b
11683  4EBE FD 73         slt ; <= (signed)
11684  4EC0 E4            pop a
11685  4EC1             ; END RELATIONAL
11686  4EC1 C0 00 00      cmp b, 0
11687  4EC4 C6 D8 4E      je _if186_exit
11688  4EC7             _if186_true:
11689  4EC7             ;; puts("Mr. Spock reports,\n  Sensors show no starbases in this quadrant.\n"); 
11690  4EC7 26 78 74      mov b, _s145 ; "Mr. Spock reports,\n  Sensors show no starbases in this quadrant.\n"
11691  4ECA FD AB         swp b
11692  4ECC D8            push b
11693  4ECD 07 48 15      call puts
11694  4ED0 51 02 00      add sp, 2
11695  4ED3             ;; return; 
11696  4ED3 F9            leave
11697  4ED4 09            ret
11698  4ED5 0A D8 4E      jmp _if186_exit
11699  4ED8             _if186_exit:
11700  4ED8             ;; compute_vector(TO_FIXED00(base_y), TO_FIXED00(base_x), ship_y, ship_x); 
11701  4ED8 3B 9D 62      mov d, _ship_x ; $ship_x
11702  4EDB 2A            mov b, [d]
11703  4EDC FD AB         swp b
11704  4EDE D8            push b
11705  4EDF 3B 9B 62      mov d, _ship_y ; $ship_y
11706  4EE2 2A            mov b, [d]
11707  4EE3 FD AB         swp b
11708  4EE5 D8            push b
11709  4EE6 3B A3 61      mov d, _base_x ; $base_x
11710  4EE9 32            mov bl, [d]
11711  4EEA A7 00         mov bh, 0
11712  4EEC FD AB         swp b
11713  4EEE D8            push b
11714  4EEF 07 55 1D      call TO_FIXED00
11715  4EF2 51 02 00      add sp, 2
11716  4EF5 FD AB         swp b
11717  4EF7 D8            push b
11718  4EF8 3B A2 61      mov d, _base_y ; $base_y
11719  4EFB 32            mov bl, [d]
11720  4EFC A7 00         mov bh, 0
11721  4EFE FD AB         swp b
11722  4F00 D8            push b
11723  4F01 07 55 1D      call TO_FIXED00
11724  4F04 51 02 00      add sp, 2
11725  4F07 FD AB         swp b
11726  4F09 D8            push b
11727  4F0A 07 6F 52      call compute_vector
11728  4F0D 51 08 00      add sp, 8
11729  4F10 F9            leave
11730  4F11 09            ret
11731  4F12             
11732  4F12             dirdist_calc:
11733  4F12 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11734  4F15             ;; int       c1, a, w1, x; 
11735  4F15 52 02 00      sub sp, 2 ; c1
11736  4F18 52 02 00      sub sp, 2 ; a
11737  4F1B 52 02 00      sub sp, 2 ; w1
11738  4F1E 52 02 00      sub sp, 2 ; x
11739  4F21             ;; printf("Direction/Distance Calculator\n You are at quadrant %d,%d sector %d,%d\n\n Please enter initial X coordinate: ", 
11740  4F21 3B 9D 62      mov d, _ship_x ; $ship_x
11741  4F24 2A            mov b, [d]
11742  4F25 FD AB         swp b
11743  4F27 D8            push b
11744  4F28 07 67 1D      call FROM_FIXED00
11745  4F2B 51 02 00      add sp, 2
11746  4F2E FD AB         swp b
11747  4F30 D8            push b
11748  4F31 3B 9B 62      mov d, _ship_y ; $ship_y
11749  4F34 2A            mov b, [d]
11750  4F35 FD AB         swp b
11751  4F37 D8            push b
11752  4F38 07 67 1D      call FROM_FIXED00
11753  4F3B 51 02 00      add sp, 2
11754  4F3E FD AB         swp b
11755  4F40 D8            push b
11756  4F41 3B 7E 62      mov d, _quad_x ; $quad_x
11757  4F44 2A            mov b, [d]
11758  4F45 FD AB         swp b
11759  4F47 D8            push b
11760  4F48 3B 7C 62      mov d, _quad_y ; $quad_y
11761  4F4B 2A            mov b, [d]
11762  4F4C FD AB         swp b
11763  4F4E D8            push b
11764  4F4F 26 BA 74      mov b, _s146 ; "Direction/Distance Calculator\n You are at quadrant %d,%d sector %d,%d\n\n Please enter initial X coordinate: "
11765  4F52 FD AB         swp b
11766  4F54 D8            push b
11767  4F55 07 B8 07      call printf
11768  4F58 51 0A 00      add sp, 10
11769  4F5B             ;; c1 = TO_FIXED00(input_int()); 
11770  4F5B FA FF FF      lea d, [bp + -1] ; $c1
11771  4F5E DA            push d
11772  4F5F 07 16 20      call input_int
11773  4F62 FD AB         swp b
11774  4F64 D8            push b
11775  4F65 07 55 1D      call TO_FIXED00
11776  4F68 51 02 00      add sp, 2
11777  4F6B E7            pop d
11778  4F6C FD 43         mov [d], b
11779  4F6E             ;; if (c1 < 0 || c1 > 900 ) 
11780  4F6E             _if187_cond:
11781  4F6E FA FF FF      lea d, [bp + -1] ; $c1
11782  4F71 2A            mov b, [d]
11783  4F72             ; START RELATIONAL
11784  4F72 D7            push a
11785  4F73 11            mov a, b
11786  4F74 26 00 00      mov b, $0
11787  4F77 B0            cmp a, b
11788  4F78 FD 73         slt ; < (signed)
11789  4F7A E4            pop a
11790  4F7B             ; END RELATIONAL
11791  4F7B D7            push a
11792  4F7C 11            mov a, b
11793  4F7D FA FF FF      lea d, [bp + -1] ; $c1
11794  4F80 2A            mov b, [d]
11795  4F81             ; START RELATIONAL
11796  4F81 D7            push a
11797  4F82 11            mov a, b
11798  4F83 26 84 03      mov b, $384
11799  4F86 B0            cmp a, b
11800  4F87 FD 7F         sgt ; >
11801  4F89 E4            pop a
11802  4F8A             ; END RELATIONAL
11803  4F8A FD A8         sor a, b ; ||
11804  4F8C E4            pop a
11805  4F8D C0 00 00      cmp b, 0
11806  4F90 C6 98 4F      je _if187_exit
11807  4F93             _if187_true:
11808  4F93             ;; return; 
11809  4F93 F9            leave
11810  4F94 09            ret
11811  4F95 0A 98 4F      jmp _if187_exit
11812  4F98             _if187_exit:
11813  4F98             ;; puts("Please enter initial Y coordinate: "); 
11814  4F98 26 26 75      mov b, _s147 ; "Please enter initial Y coordinate: "
11815  4F9B FD AB         swp b
11816  4F9D D8            push b
11817  4F9E 07 48 15      call puts
11818  4FA1 51 02 00      add sp, 2
11819  4FA4             ;; a = TO_FIXED00(input_int()); 
11820  4FA4 FA FD FF      lea d, [bp + -3] ; $a
11821  4FA7 DA            push d
11822  4FA8 07 16 20      call input_int
11823  4FAB FD AB         swp b
11824  4FAD D8            push b
11825  4FAE 07 55 1D      call TO_FIXED00
11826  4FB1 51 02 00      add sp, 2
11827  4FB4 E7            pop d
11828  4FB5 FD 43         mov [d], b
11829  4FB7             ;; if (a < 0 || a > 900) 
11830  4FB7             _if188_cond:
11831  4FB7 FA FD FF      lea d, [bp + -3] ; $a
11832  4FBA 2A            mov b, [d]
11833  4FBB             ; START RELATIONAL
11834  4FBB D7            push a
11835  4FBC 11            mov a, b
11836  4FBD 26 00 00      mov b, $0
11837  4FC0 B0            cmp a, b
11838  4FC1 FD 73         slt ; < (signed)
11839  4FC3 E4            pop a
11840  4FC4             ; END RELATIONAL
11841  4FC4 D7            push a
11842  4FC5 11            mov a, b
11843  4FC6 FA FD FF      lea d, [bp + -3] ; $a
11844  4FC9 2A            mov b, [d]
11845  4FCA             ; START RELATIONAL
11846  4FCA D7            push a
11847  4FCB 11            mov a, b
11848  4FCC 26 84 03      mov b, $384
11849  4FCF B0            cmp a, b
11850  4FD0 FD 7F         sgt ; >
11851  4FD2 E4            pop a
11852  4FD3             ; END RELATIONAL
11853  4FD3 FD A8         sor a, b ; ||
11854  4FD5 E4            pop a
11855  4FD6 C0 00 00      cmp b, 0
11856  4FD9 C6 E1 4F      je _if188_exit
11857  4FDC             _if188_true:
11858  4FDC             ;; return; 
11859  4FDC F9            leave
11860  4FDD 09            ret
11861  4FDE 0A E1 4F      jmp _if188_exit
11862  4FE1             _if188_exit:
11863  4FE1             ;; puts("Please enter final X coordinate: "); 
11864  4FE1 26 4A 75      mov b, _s148 ; "Please enter final X coordinate: "
11865  4FE4 FD AB         swp b
11866  4FE6 D8            push b
11867  4FE7 07 48 15      call puts
11868  4FEA 51 02 00      add sp, 2
11869  4FED             ;; w1 = TO_FIXED00(input_int()); 
11870  4FED FA FB FF      lea d, [bp + -5] ; $w1
11871  4FF0 DA            push d
11872  4FF1 07 16 20      call input_int
11873  4FF4 FD AB         swp b
11874  4FF6 D8            push b
11875  4FF7 07 55 1D      call TO_FIXED00
11876  4FFA 51 02 00      add sp, 2
11877  4FFD E7            pop d
11878  4FFE FD 43         mov [d], b
11879  5000             ;; if (w1 < 0 || w1 > 900) 
11880  5000             _if189_cond:
11881  5000 FA FB FF      lea d, [bp + -5] ; $w1
11882  5003 2A            mov b, [d]
11883  5004             ; START RELATIONAL
11884  5004 D7            push a
11885  5005 11            mov a, b
11886  5006 26 00 00      mov b, $0
11887  5009 B0            cmp a, b
11888  500A FD 73         slt ; < (signed)
11889  500C E4            pop a
11890  500D             ; END RELATIONAL
11891  500D D7            push a
11892  500E 11            mov a, b
11893  500F FA FB FF      lea d, [bp + -5] ; $w1
11894  5012 2A            mov b, [d]
11895  5013             ; START RELATIONAL
11896  5013 D7            push a
11897  5014 11            mov a, b
11898  5015 26 84 03      mov b, $384
11899  5018 B0            cmp a, b
11900  5019 FD 7F         sgt ; >
11901  501B E4            pop a
11902  501C             ; END RELATIONAL
11903  501C FD A8         sor a, b ; ||
11904  501E E4            pop a
11905  501F C0 00 00      cmp b, 0
11906  5022 C6 2A 50      je _if189_exit
11907  5025             _if189_true:
11908  5025             ;; return; 
11909  5025 F9            leave
11910  5026 09            ret
11911  5027 0A 2A 50      jmp _if189_exit
11912  502A             _if189_exit:
11913  502A             ;; puts("Please enter final Y coordinate: "); 
11914  502A 26 6C 75      mov b, _s149 ; "Please enter final Y coordinate: "
11915  502D FD AB         swp b
11916  502F D8            push b
11917  5030 07 48 15      call puts
11918  5033 51 02 00      add sp, 2
11919  5036             ;; x = TO_FIXED00(input_int()); 
11920  5036 FA F9 FF      lea d, [bp + -7] ; $x
11921  5039 DA            push d
11922  503A 07 16 20      call input_int
11923  503D FD AB         swp b
11924  503F D8            push b
11925  5040 07 55 1D      call TO_FIXED00
11926  5043 51 02 00      add sp, 2
11927  5046 E7            pop d
11928  5047 FD 43         mov [d], b
11929  5049             ;; if (x < 0 || x > 900) 
11930  5049             _if190_cond:
11931  5049 FA F9 FF      lea d, [bp + -7] ; $x
11932  504C 2A            mov b, [d]
11933  504D             ; START RELATIONAL
11934  504D D7            push a
11935  504E 11            mov a, b
11936  504F 26 00 00      mov b, $0
11937  5052 B0            cmp a, b
11938  5053 FD 73         slt ; < (signed)
11939  5055 E4            pop a
11940  5056             ; END RELATIONAL
11941  5056 D7            push a
11942  5057 11            mov a, b
11943  5058 FA F9 FF      lea d, [bp + -7] ; $x
11944  505B 2A            mov b, [d]
11945  505C             ; START RELATIONAL
11946  505C D7            push a
11947  505D 11            mov a, b
11948  505E 26 84 03      mov b, $384
11949  5061 B0            cmp a, b
11950  5062 FD 7F         sgt ; >
11951  5064 E4            pop a
11952  5065             ; END RELATIONAL
11953  5065 FD A8         sor a, b ; ||
11954  5067 E4            pop a
11955  5068 C0 00 00      cmp b, 0
11956  506B C6 73 50      je _if190_exit
11957  506E             _if190_true:
11958  506E             ;; return; 
11959  506E F9            leave
11960  506F 09            ret
11961  5070 0A 73 50      jmp _if190_exit
11962  5073             _if190_exit:
11963  5073             ;; compute_vector(w1, x, c1, a); 
11964  5073 FA FD FF      lea d, [bp + -3] ; $a
11965  5076 2A            mov b, [d]
11966  5077 FD AB         swp b
11967  5079 D8            push b
11968  507A FA FF FF      lea d, [bp + -1] ; $c1
11969  507D 2A            mov b, [d]
11970  507E FD AB         swp b
11971  5080 D8            push b
11972  5081 FA F9 FF      lea d, [bp + -7] ; $x
11973  5084 2A            mov b, [d]
11974  5085 FD AB         swp b
11975  5087 D8            push b
11976  5088 FA FB FF      lea d, [bp + -5] ; $w1
11977  508B 2A            mov b, [d]
11978  508C FD AB         swp b
11979  508E D8            push b
11980  508F 07 6F 52      call compute_vector
11981  5092 51 08 00      add sp, 8
11982  5095 F9            leave
11983  5096 09            ret
11984  5097             
11985  5097             galaxy_map:
11986  5097 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11987  509A             ;; int i, j, j0; 
11988  509A 52 02 00      sub sp, 2 ; i
11989  509D 52 02 00      sub sp, 2 ; j
11990  50A0 52 02 00      sub sp, 2 ; j0
11991  50A3             ;; printf("\n                   The Galaxy\n\n"); 
11992  50A3 26 8E 75      mov b, _s150 ; "\n                   The Galaxy\n\n"
11993  50A6 FD AB         swp b
11994  50A8 D8            push b
11995  50A9 07 B8 07      call printf
11996  50AC 51 02 00      add sp, 2
11997  50AF             ;; printf("    1     2     3     4     5     6     7     8\n"); 
11998  50AF 26 AF 75      mov b, _s151 ; "    1     2     3     4     5     6     7     8\n"
11999  50B2 FD AB         swp b
12000  50B4 D8            push b
12001  50B5 07 B8 07      call printf
12002  50B8 51 02 00      add sp, 2
12003  50BB             ;; for (i = 1; i <= 8; i++) { 
12004  50BB             _for191_init:
12005  50BB FA FF FF      lea d, [bp + -1] ; $i
12006  50BE DA            push d
12007  50BF 26 01 00      mov b, $1
12008  50C2 E7            pop d
12009  50C3 FD 43         mov [d], b
12010  50C5             _for191_cond:
12011  50C5 FA FF FF      lea d, [bp + -1] ; $i
12012  50C8 2A            mov b, [d]
12013  50C9             ; START RELATIONAL
12014  50C9 D7            push a
12015  50CA 11            mov a, b
12016  50CB 26 08 00      mov b, $8
12017  50CE B0            cmp a, b
12018  50CF FD 73         slt ; <= (signed)
12019  50D1 E4            pop a
12020  50D2             ; END RELATIONAL
12021  50D2 C0 00 00      cmp b, 0
12022  50D5 C6 60 52      je _for191_exit
12023  50D8             _for191_block:
12024  50D8             ;; printf("%s%d ", gm_1, i); 
12025  50D8 FA FF FF      lea d, [bp + -1] ; $i
12026  50DB 2A            mov b, [d]
12027  50DC FD AB         swp b
12028  50DE D8            push b
12029  50DF 3B 55 64      mov d, _gm_1 ; $gm_1
12030  50E2 2A            mov b, [d]
12031  50E3 FD AB         swp b
12032  50E5 D8            push b
12033  50E6 26 E0 75      mov b, _s152 ; "%s%d "
12034  50E9 FD AB         swp b
12035  50EB D8            push b
12036  50EC 07 B8 07      call printf
12037  50EF 51 06 00      add sp, 6
12038  50F2             ;; quadrant_name(1, i, 1); 
12039  50F2 26 01 00      mov b, $1
12040  50F5 DD            push bl
12041  50F6 FA FF FF      lea d, [bp + -1] ; $i
12042  50F9 2A            mov b, [d]
12043  50FA DD            push bl
12044  50FB 26 01 00      mov b, $1
12045  50FE DD            push bl
12046  50FF 07 85 5E      call quadrant_name
12047  5102 51 03 00      add sp, 3
12048  5105             ;; j0 = (int) (11 - (strlen(quadname) / 2)); 
12049  5105 FA FB FF      lea d, [bp + -5] ; $j0
12050  5108 DA            push d
12051  5109 26 0B 00      mov b, $b
12052  510C             ; START TERMS
12053  510C D7            push a
12054  510D 11            mov a, b
12055  510E 3B E1 62      mov d, _quadname_data ; $quadname
12056  5111 2D            mov b, d
12057  5112 FD AB         swp b
12058  5114 D8            push b
12059  5115 07 8E 05      call strlen
12060  5118 51 02 00      add sp, 2
12061  511B             ; START FACTORS
12062  511B D7            push a
12063  511C 11            mov a, b
12064  511D 26 02 00      mov b, $2
12065  5120 AE            div a, b
12066  5121 27            mov b, a
12067  5122 E4            pop a
12068  5123             ; END FACTORS
12069  5123 60            sub a, b
12070  5124 27            mov b, a
12071  5125 E4            pop a
12072  5126             ; END TERMS
12073  5126 E7            pop d
12074  5127 FD 43         mov [d], b
12075  5129             ;; for (j = 0; j < j0; j++) 
12076  5129             _for192_init:
12077  5129 FA FD FF      lea d, [bp + -3] ; $j
12078  512C DA            push d
12079  512D 26 00 00      mov b, $0
12080  5130 E7            pop d
12081  5131 FD 43         mov [d], b
12082  5133             _for192_cond:
12083  5133 FA FD FF      lea d, [bp + -3] ; $j
12084  5136 2A            mov b, [d]
12085  5137             ; START RELATIONAL
12086  5137 D7            push a
12087  5138 11            mov a, b
12088  5139 FA FB FF      lea d, [bp + -5] ; $j0
12089  513C 2A            mov b, [d]
12090  513D B0            cmp a, b
12091  513E FD 73         slt ; < (signed)
12092  5140 E4            pop a
12093  5141             ; END RELATIONAL
12094  5141 C0 00 00      cmp b, 0
12095  5144 C6 61 51      je _for192_exit
12096  5147             _for192_block:
12097  5147             ;; putchar(' '); 
12098  5147 26 20 00      mov b, $20
12099  514A DD            push bl
12100  514B 07 12 15      call putchar
12101  514E 51 01 00      add sp, 1
12102  5151             _for192_update:
12103  5151 FA FD FF      lea d, [bp + -3] ; $j
12104  5154 2A            mov b, [d]
12105  5155 D8            push b
12106  5156 FD 77         inc b
12107  5158 FA FD FF      lea d, [bp + -3] ; $j
12108  515B FD 43         mov [d], b
12109  515D E5            pop b
12110  515E 0A 33 51      jmp _for192_cond
12111  5161             _for192_exit:
12112  5161             ;; puts(quadname); 
12113  5161 3B E1 62      mov d, _quadname_data ; $quadname
12114  5164 2D            mov b, d
12115  5165 FD AB         swp b
12116  5167 D8            push b
12117  5168 07 48 15      call puts
12118  516B 51 02 00      add sp, 2
12119  516E             ;; for (j = 0; j < j0; j++) 
12120  516E             _for193_init:
12121  516E FA FD FF      lea d, [bp + -3] ; $j
12122  5171 DA            push d
12123  5172 26 00 00      mov b, $0
12124  5175 E7            pop d
12125  5176 FD 43         mov [d], b
12126  5178             _for193_cond:
12127  5178 FA FD FF      lea d, [bp + -3] ; $j
12128  517B 2A            mov b, [d]
12129  517C             ; START RELATIONAL
12130  517C D7            push a
12131  517D 11            mov a, b
12132  517E FA FB FF      lea d, [bp + -5] ; $j0
12133  5181 2A            mov b, [d]
12134  5182 B0            cmp a, b
12135  5183 FD 73         slt ; < (signed)
12136  5185 E4            pop a
12137  5186             ; END RELATIONAL
12138  5186 C0 00 00      cmp b, 0
12139  5189 C6 A6 51      je _for193_exit
12140  518C             _for193_block:
12141  518C             ;; putchar(' '); 
12142  518C 26 20 00      mov b, $20
12143  518F DD            push bl
12144  5190 07 12 15      call putchar
12145  5193 51 01 00      add sp, 1
12146  5196             _for193_update:
12147  5196 FA FD FF      lea d, [bp + -3] ; $j
12148  5199 2A            mov b, [d]
12149  519A D8            push b
12150  519B FD 77         inc b
12151  519D FA FD FF      lea d, [bp + -3] ; $j
12152  51A0 FD 43         mov [d], b
12153  51A2 E5            pop b
12154  51A3 0A 78 51      jmp _for193_cond
12155  51A6             _for193_exit:
12156  51A6             ;; if (!(strlen(quadname) % 2)) 
12157  51A6             _if194_cond:
12158  51A6 3B E1 62      mov d, _quadname_data ; $quadname
12159  51A9 2D            mov b, d
12160  51AA FD AB         swp b
12161  51AC D8            push b
12162  51AD 07 8E 05      call strlen
12163  51B0 51 02 00      add sp, 2
12164  51B3             ; START FACTORS
12165  51B3 D7            push a
12166  51B4 11            mov a, b
12167  51B5 26 02 00      mov b, $2
12168  51B8 AE            div a, b ; 
12169  51B9 11            mov a, b
12170  51BA 27            mov b, a
12171  51BB E4            pop a
12172  51BC             ; END FACTORS
12173  51BC C0 00 00      cmp b, 0
12174  51BF FD 71         seq ; !
12175  51C1 C0 00 00      cmp b, 0
12176  51C4 C6 D4 51      je _if194_exit
12177  51C7             _if194_true:
12178  51C7             ;; putchar(' '); 
12179  51C7 26 20 00      mov b, $20
12180  51CA DD            push bl
12181  51CB 07 12 15      call putchar
12182  51CE 51 01 00      add sp, 1
12183  51D1 0A D4 51      jmp _if194_exit
12184  51D4             _if194_exit:
12185  51D4             ;; quadrant_name(1, i, 5); 
12186  51D4 26 05 00      mov b, $5
12187  51D7 DD            push bl
12188  51D8 FA FF FF      lea d, [bp + -1] ; $i
12189  51DB 2A            mov b, [d]
12190  51DC DD            push bl
12191  51DD 26 01 00      mov b, $1
12192  51E0 DD            push bl
12193  51E1 07 85 5E      call quadrant_name
12194  51E4 51 03 00      add sp, 3
12195  51E7             ;; j0 = (int) (12 - (strlen(quadname) / 2)); 
12196  51E7 FA FB FF      lea d, [bp + -5] ; $j0
12197  51EA DA            push d
12198  51EB 26 0C 00      mov b, $c
12199  51EE             ; START TERMS
12200  51EE D7            push a
12201  51EF 11            mov a, b
12202  51F0 3B E1 62      mov d, _quadname_data ; $quadname
12203  51F3 2D            mov b, d
12204  51F4 FD AB         swp b
12205  51F6 D8            push b
12206  51F7 07 8E 05      call strlen
12207  51FA 51 02 00      add sp, 2
12208  51FD             ; START FACTORS
12209  51FD D7            push a
12210  51FE 11            mov a, b
12211  51FF 26 02 00      mov b, $2
12212  5202 AE            div a, b
12213  5203 27            mov b, a
12214  5204 E4            pop a
12215  5205             ; END FACTORS
12216  5205 60            sub a, b
12217  5206 27            mov b, a
12218  5207 E4            pop a
12219  5208             ; END TERMS
12220  5208 E7            pop d
12221  5209 FD 43         mov [d], b
12222  520B             ;; for (j = 0; j < j0; j++) 
12223  520B             _for195_init:
12224  520B FA FD FF      lea d, [bp + -3] ; $j
12225  520E DA            push d
12226  520F 26 00 00      mov b, $0
12227  5212 E7            pop d
12228  5213 FD 43         mov [d], b
12229  5215             _for195_cond:
12230  5215 FA FD FF      lea d, [bp + -3] ; $j
12231  5218 2A            mov b, [d]
12232  5219             ; START RELATIONAL
12233  5219 D7            push a
12234  521A 11            mov a, b
12235  521B FA FB FF      lea d, [bp + -5] ; $j0
12236  521E 2A            mov b, [d]
12237  521F B0            cmp a, b
12238  5220 FD 73         slt ; < (signed)
12239  5222 E4            pop a
12240  5223             ; END RELATIONAL
12241  5223 C0 00 00      cmp b, 0
12242  5226 C6 43 52      je _for195_exit
12243  5229             _for195_block:
12244  5229             ;; putchar(' '); 
12245  5229 26 20 00      mov b, $20
12246  522C DD            push bl
12247  522D 07 12 15      call putchar
12248  5230 51 01 00      add sp, 1
12249  5233             _for195_update:
12250  5233 FA FD FF      lea d, [bp + -3] ; $j
12251  5236 2A            mov b, [d]
12252  5237 D8            push b
12253  5238 FD 77         inc b
12254  523A FA FD FF      lea d, [bp + -3] ; $j
12255  523D FD 43         mov [d], b
12256  523F E5            pop b
12257  5240 0A 15 52      jmp _for195_cond
12258  5243             _for195_exit:
12259  5243             ;; puts(quadname); 
12260  5243 3B E1 62      mov d, _quadname_data ; $quadname
12261  5246 2D            mov b, d
12262  5247 FD AB         swp b
12263  5249 D8            push b
12264  524A 07 48 15      call puts
12265  524D 51 02 00      add sp, 2
12266  5250             _for191_update:
12267  5250 FA FF FF      lea d, [bp + -1] ; $i
12268  5253 2A            mov b, [d]
12269  5254 D8            push b
12270  5255 FD 77         inc b
12271  5257 FA FF FF      lea d, [bp + -1] ; $i
12272  525A FD 43         mov [d], b
12273  525C E5            pop b
12274  525D 0A C5 50      jmp _for191_cond
12275  5260             _for191_exit:
12276  5260             ;; puts(gm_1); 
12277  5260 3B 55 64      mov d, _gm_1 ; $gm_1
12278  5263 2A            mov b, [d]
12279  5264 FD AB         swp b
12280  5266 D8            push b
12281  5267 07 48 15      call puts
12282  526A 51 02 00      add sp, 2
12283  526D F9            leave
12284  526E 09            ret
12285  526F             
12286  526F             compute_vector:
12287  526F F8 00 00      enter 0 ; (push bp; mov bp, sp)
12288  5272             ;; long unsigned int        xl, al; 
12289  5272 52 04 00      sub sp, 4 ; xl
12290  5275 52 04 00      sub sp, 4 ; al
12291  5278             ;; puts("  DIRECTION = "); 
12292  5278 26 E6 75      mov b, _s153 ; "  DIRECTION = "
12293  527B FD AB         swp b
12294  527D D8            push b
12295  527E 07 48 15      call puts
12296  5281 51 02 00      add sp, 2
12297  5284             ;; x = x - a; 
12298  5284 FA 07 00      lea d, [bp + 7] ; $x
12299  5287 DA            push d
12300  5288 FA 07 00      lea d, [bp + 7] ; $x
12301  528B 2A            mov b, [d]
12302  528C             ; START TERMS
12303  528C D7            push a
12304  528D 11            mov a, b
12305  528E FA 0B 00      lea d, [bp + 11] ; $a
12306  5291 2A            mov b, [d]
12307  5292 60            sub a, b
12308  5293 27            mov b, a
12309  5294 E4            pop a
12310  5295             ; END TERMS
12311  5295 E7            pop d
12312  5296 FD 43         mov [d], b
12313  5298             ;; a = c1 - w1; 
12314  5298 FA 0B 00      lea d, [bp + 11] ; $a
12315  529B DA            push d
12316  529C FA 09 00      lea d, [bp + 9] ; $c1
12317  529F 2A            mov b, [d]
12318  52A0             ; START TERMS
12319  52A0 D7            push a
12320  52A1 11            mov a, b
12321  52A2 FA 05 00      lea d, [bp + 5] ; $w1
12322  52A5 2A            mov b, [d]
12323  52A6 60            sub a, b
12324  52A7 27            mov b, a
12325  52A8 E4            pop a
12326  52A9             ; END TERMS
12327  52A9 E7            pop d
12328  52AA FD 43         mov [d], b
12329  52AC             ;; xl = abs(x); 
12330  52AC FA FD FF      lea d, [bp + -3] ; $xl
12331  52AF DA            push d
12332  52B0 FA 07 00      lea d, [bp + 7] ; $x
12333  52B3 2A            mov b, [d]
12334  52B4 FD AB         swp b
12335  52B6 D8            push b
12336  52B7 07 94 15      call abs
12337  52BA 51 02 00      add sp, 2
12338  52BD E7            pop d
12339  52BE FD 43         mov [d], b
12340  52C0 28            mov b, c
12341  52C1 FD 44 02 00   mov [d + 2], b
12342  52C5             ;; al = abs(a); 
12343  52C5 FA F9 FF      lea d, [bp + -7] ; $al
12344  52C8 DA            push d
12345  52C9 FA 0B 00      lea d, [bp + 11] ; $a
12346  52CC 2A            mov b, [d]
12347  52CD FD AB         swp b
12348  52CF D8            push b
12349  52D0 07 94 15      call abs
12350  52D3 51 02 00      add sp, 2
12351  52D6 E7            pop d
12352  52D7 FD 43         mov [d], b
12353  52D9 28            mov b, c
12354  52DA FD 44 02 00   mov [d + 2], b
12355  52DE             ;; if (x < 0) { 
12356  52DE             _if196_cond:
12357  52DE FA 07 00      lea d, [bp + 7] ; $x
12358  52E1 2A            mov b, [d]
12359  52E2             ; START RELATIONAL
12360  52E2 D7            push a
12361  52E3 11            mov a, b
12362  52E4 26 00 00      mov b, $0
12363  52E7 B0            cmp a, b
12364  52E8 FD 73         slt ; < (signed)
12365  52EA E4            pop a
12366  52EB             ; END RELATIONAL
12367  52EB C0 00 00      cmp b, 0
12368  52EE C6 4B 54      je _if196_else
12369  52F1             _if196_true:
12370  52F1             ;; if (a > 0) { 
12371  52F1             _if197_cond:
12372  52F1 FA 0B 00      lea d, [bp + 11] ; $a
12373  52F4 2A            mov b, [d]
12374  52F5             ; START RELATIONAL
12375  52F5 D7            push a
12376  52F6 11            mov a, b
12377  52F7 26 00 00      mov b, $0
12378  52FA B0            cmp a, b
12379  52FB FD 7F         sgt ; >
12380  52FD E4            pop a
12381  52FE             ; END RELATIONAL
12382  52FE C0 00 00      cmp b, 0
12383  5301 C6 1C 54      je _if197_else
12384  5304             _if197_true:
12385  5304             ;; c1 = 300; 
12386  5304 FA 09 00      lea d, [bp + 9] ; $c1
12387  5307 DA            push d
12388  5308 26 2C 01      mov b, $12c
12389  530B E7            pop d
12390  530C FD 43         mov [d], b
12391  530E             ;; if (al >= xl) 
12392  530E             _if198_cond:
12393  530E FA F9 FF      lea d, [bp + -7] ; $al
12394  5311 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12395  5314 FD 39         mov c, b ; And place it into C
12396  5316 2A            mov b, [d] ; Lower Word in B
12397  5317             ; START RELATIONAL
12398  5317 D7            push a
12399  5318 FD D8         push g
12400  531A 11            mov a, b
12401  531B FD 7A         mov g, c
12402  531D FA FD FF      lea d, [bp + -3] ; $xl
12403  5320 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12404  5323 FD 39         mov c, b ; And place it into C
12405  5325 2A            mov b, [d] ; Lower Word in B
12406  5326 FD 82         sgeu
12407  5328 FD F1         pop g
12408  532A E4            pop a
12409  532B             ; END RELATIONAL
12410  532B C0 00 00      cmp b, 0
12411  532E C6 7B 53      je _if198_else
12412  5331             _if198_true:
12413  5331             ;; printf("%s", print100(c1 + ((xl * 100) / al))); 
12414  5331 FA 09 00      lea d, [bp + 9] ; $c1
12415  5334 2A            mov b, [d]
12416  5335             ; START TERMS
12417  5335 D7            push a
12418  5336 11            mov a, b
12419  5337 FA FD FF      lea d, [bp + -3] ; $xl
12420  533A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12421  533D FD 39         mov c, b ; And place it into C
12422  533F 2A            mov b, [d] ; Lower Word in B
12423  5340             ; START FACTORS
12424  5340 D7            push a
12425  5341 11            mov a, b
12426  5342 26 64 00      mov b, $64
12427  5345 AC            mul a, b ; *
12428  5346 11            mov a, b
12429  5347 27            mov b, a
12430  5348 E4            pop a
12431  5349             ; END FACTORS
12432  5349             ; START FACTORS
12433  5349 D7            push a
12434  534A 11            mov a, b
12435  534B FA F9 FF      lea d, [bp + -7] ; $al
12436  534E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12437  5351 FD 39         mov c, b ; And place it into C
12438  5353 2A            mov b, [d] ; Lower Word in B
12439  5354 AE            div a, b
12440  5355 27            mov b, a
12441  5356 E4            pop a
12442  5357             ; END FACTORS
12443  5357 54            add a, b
12444  5358 D7            push a
12445  5359 FD 12         mov a, g
12446  535B 28            mov b, c
12447  535C 5C            adc a, b
12448  535D 39            mov c, a
12449  535E E5            pop b
12450  535F E4            pop a
12451  5360             ; END TERMS
12452  5360 FD AB         swp b
12453  5362 D8            push b
12454  5363 07 5E 20      call print100
12455  5366 51 02 00      add sp, 2
12456  5369 FD AB         swp b
12457  536B D8            push b
12458  536C 26 F5 75      mov b, _s154 ; "%s"
12459  536F FD AB         swp b
12460  5371 D8            push b
12461  5372 07 B8 07      call printf
12462  5375 51 04 00      add sp, 4
12463  5378 0A DF 53      jmp _if198_exit
12464  537B             _if198_else:
12465  537B             ;; printf("%s", print100(c1 + ((((xl * 2) - al) * 100)  / xl))); 
12466  537B FA 09 00      lea d, [bp + 9] ; $c1
12467  537E 2A            mov b, [d]
12468  537F             ; START TERMS
12469  537F D7            push a
12470  5380 11            mov a, b
12471  5381 FA FD FF      lea d, [bp + -3] ; $xl
12472  5384 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12473  5387 FD 39         mov c, b ; And place it into C
12474  5389 2A            mov b, [d] ; Lower Word in B
12475  538A             ; START FACTORS
12476  538A D7            push a
12477  538B 11            mov a, b
12478  538C 26 02 00      mov b, $2
12479  538F AC            mul a, b ; *
12480  5390 11            mov a, b
12481  5391 27            mov b, a
12482  5392 E4            pop a
12483  5393             ; END FACTORS
12484  5393             ; START TERMS
12485  5393 D7            push a
12486  5394 FD D8         push g
12487  5396 11            mov a, b
12488  5397 FD 7A         mov g, c
12489  5399 FA F9 FF      lea d, [bp + -7] ; $al
12490  539C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12491  539F FD 39         mov c, b ; And place it into C
12492  53A1 2A            mov b, [d] ; Lower Word in B
12493  53A2 60            sub a, b
12494  53A3 27            mov b, a
12495  53A4 FD F1         pop g
12496  53A6 E4            pop a
12497  53A7             ; END TERMS
12498  53A7             ; START FACTORS
12499  53A7 D7            push a
12500  53A8 11            mov a, b
12501  53A9 26 64 00      mov b, $64
12502  53AC AC            mul a, b ; *
12503  53AD 11            mov a, b
12504  53AE 27            mov b, a
12505  53AF E4            pop a
12506  53B0             ; END FACTORS
12507  53B0             ; START FACTORS
12508  53B0 D7            push a
12509  53B1 11            mov a, b
12510  53B2 FA FD FF      lea d, [bp + -3] ; $xl
12511  53B5 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12512  53B8 FD 39         mov c, b ; And place it into C
12513  53BA 2A            mov b, [d] ; Lower Word in B
12514  53BB AE            div a, b
12515  53BC 27            mov b, a
12516  53BD E4            pop a
12517  53BE             ; END FACTORS
12518  53BE 54            add a, b
12519  53BF D7            push a
12520  53C0 FD 12         mov a, g
12521  53C2 28            mov b, c
12522  53C3 5C            adc a, b
12523  53C4 39            mov c, a
12524  53C5 E5            pop b
12525  53C6 E4            pop a
12526  53C7             ; END TERMS
12527  53C7 FD AB         swp b
12528  53C9 D8            push b
12529  53CA 07 5E 20      call print100
12530  53CD 51 02 00      add sp, 2
12531  53D0 FD AB         swp b
12532  53D2 D8            push b
12533  53D3 26 F5 75      mov b, _s154 ; "%s"
12534  53D6 FD AB         swp b
12535  53D8 D8            push b
12536  53D9 07 B8 07      call printf
12537  53DC 51 04 00      add sp, 4
12538  53DF             _if198_exit:
12539  53DF             ;; printf(dist_1, print100((x > a) ? x : a)); 
12540  53DF             _ternary202_cond:
12541  53DF FA 07 00      lea d, [bp + 7] ; $x
12542  53E2 2A            mov b, [d]
12543  53E3             ; START RELATIONAL
12544  53E3 D7            push a
12545  53E4 11            mov a, b
12546  53E5 FA 0B 00      lea d, [bp + 11] ; $a
12547  53E8 2A            mov b, [d]
12548  53E9 B0            cmp a, b
12549  53EA FD 7F         sgt ; >
12550  53EC E4            pop a
12551  53ED             ; END RELATIONAL
12552  53ED C0 00 00      cmp b, 0
12553  53F0 C6 FA 53      je _ternary202_false
12554  53F3             _ternary202_true:
12555  53F3 FA 07 00      lea d, [bp + 7] ; $x
12556  53F6 2A            mov b, [d]
12557  53F7 0A FE 53      jmp _ternary202_exit
12558  53FA             _ternary202_false:
12559  53FA FA 0B 00      lea d, [bp + 11] ; $a
12560  53FD 2A            mov b, [d]
12561  53FE             _ternary202_exit:
12562  53FE FD AB         swp b
12563  5400 D8            push b
12564  5401 07 5E 20      call print100
12565  5404 51 02 00      add sp, 2
12566  5407 FD AB         swp b
12567  5409 D8            push b
12568  540A 3B 67 64      mov d, _dist_1 ; $dist_1
12569  540D 2A            mov b, [d]
12570  540E FD AB         swp b
12571  5410 D8            push b
12572  5411 07 B8 07      call printf
12573  5414 51 04 00      add sp, 4
12574  5417             ;; return; 
12575  5417 F9            leave
12576  5418 09            ret
12577  5419 0A 48 54      jmp _if197_exit
12578  541C             _if197_else:
12579  541C             ;; if (x != 0){ 
12580  541C             _if203_cond:
12581  541C FA 07 00      lea d, [bp + 7] ; $x
12582  541F 2A            mov b, [d]
12583  5420             ; START RELATIONAL
12584  5420 D7            push a
12585  5421 11            mov a, b
12586  5422 26 00 00      mov b, $0
12587  5425 B0            cmp a, b
12588  5426 FD 72         sneq ; !=
12589  5428 E4            pop a
12590  5429             ; END RELATIONAL
12591  5429 C0 00 00      cmp b, 0
12592  542C C6 3E 54      je _if203_else
12593  542F             _if203_true:
12594  542F             ;; c1 = 500; 
12595  542F FA 09 00      lea d, [bp + 9] ; $c1
12596  5432 DA            push d
12597  5433 26 F4 01      mov b, $1f4
12598  5436 E7            pop d
12599  5437 FD 43         mov [d], b
12600  5439             ;; return; 
12601  5439 F9            leave
12602  543A 09            ret
12603  543B 0A 48 54      jmp _if203_exit
12604  543E             _if203_else:
12605  543E             ;; c1 = 700; 
12606  543E FA 09 00      lea d, [bp + 9] ; $c1
12607  5441 DA            push d
12608  5442 26 BC 02      mov b, $2bc
12609  5445 E7            pop d
12610  5446 FD 43         mov [d], b
12611  5448             _if203_exit:
12612  5448             _if197_exit:
12613  5448 0A D7 55      jmp _if196_exit
12614  544B             _if196_else:
12615  544B             ;; if (a < 0) { 
12616  544B             _if204_cond:
12617  544B FA 0B 00      lea d, [bp + 11] ; $a
12618  544E 2A            mov b, [d]
12619  544F             ; START RELATIONAL
12620  544F D7            push a
12621  5450 11            mov a, b
12622  5451 26 00 00      mov b, $0
12623  5454 B0            cmp a, b
12624  5455 FD 73         slt ; < (signed)
12625  5457 E4            pop a
12626  5458             ; END RELATIONAL
12627  5458 C0 00 00      cmp b, 0
12628  545B C6 6B 54      je _if204_else
12629  545E             _if204_true:
12630  545E             ;; c1 = 700; 
12631  545E FA 09 00      lea d, [bp + 9] ; $c1
12632  5461 DA            push d
12633  5462 26 BC 02      mov b, $2bc
12634  5465 E7            pop d
12635  5466 FD 43         mov [d], b
12636  5468 0A D7 55      jmp _if204_exit
12637  546B             _if204_else:
12638  546B             ;; if (x > 0) { 
12639  546B             _if205_cond:
12640  546B FA 07 00      lea d, [bp + 7] ; $x
12641  546E 2A            mov b, [d]
12642  546F             ; START RELATIONAL
12643  546F D7            push a
12644  5470 11            mov a, b
12645  5471 26 00 00      mov b, $0
12646  5474 B0            cmp a, b
12647  5475 FD 7F         sgt ; >
12648  5477 E4            pop a
12649  5478             ; END RELATIONAL
12650  5478 C0 00 00      cmp b, 0
12651  547B C6 8B 54      je _if205_else
12652  547E             _if205_true:
12653  547E             ;; c1 = 100; 
12654  547E FA 09 00      lea d, [bp + 9] ; $c1
12655  5481 DA            push d
12656  5482 26 64 00      mov b, $64
12657  5485 E7            pop d
12658  5486 FD 43         mov [d], b
12659  5488 0A D7 55      jmp _if205_exit
12660  548B             _if205_else:
12661  548B             ;; if (a == 0) { 
12662  548B             _if206_cond:
12663  548B FA 0B 00      lea d, [bp + 11] ; $a
12664  548E 2A            mov b, [d]
12665  548F             ; START RELATIONAL
12666  548F D7            push a
12667  5490 11            mov a, b
12668  5491 26 00 00      mov b, $0
12669  5494 B0            cmp a, b
12670  5495 FD 71         seq ; ==
12671  5497 E4            pop a
12672  5498             ; END RELATIONAL
12673  5498 C0 00 00      cmp b, 0
12674  549B C6 AB 54      je _if206_else
12675  549E             _if206_true:
12676  549E             ;; c1 = 500; 
12677  549E FA 09 00      lea d, [bp + 9] ; $c1
12678  54A1 DA            push d
12679  54A2 26 F4 01      mov b, $1f4
12680  54A5 E7            pop d
12681  54A6 FD 43         mov [d], b
12682  54A8 0A D7 55      jmp _if206_exit
12683  54AB             _if206_else:
12684  54AB             ;; c1 = 100; 
12685  54AB FA 09 00      lea d, [bp + 9] ; $c1
12686  54AE DA            push d
12687  54AF 26 64 00      mov b, $64
12688  54B2 E7            pop d
12689  54B3 FD 43         mov [d], b
12690  54B5             ;; if (al <= xl) 
12691  54B5             _if207_cond:
12692  54B5 FA F9 FF      lea d, [bp + -7] ; $al
12693  54B8 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12694  54BB FD 39         mov c, b ; And place it into C
12695  54BD 2A            mov b, [d] ; Lower Word in B
12696  54BE             ; START RELATIONAL
12697  54BE D7            push a
12698  54BF FD D8         push g
12699  54C1 11            mov a, b
12700  54C2 FD 7A         mov g, c
12701  54C4 FA FD FF      lea d, [bp + -3] ; $xl
12702  54C7 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12703  54CA FD 39         mov c, b ; And place it into C
12704  54CC 2A            mov b, [d] ; Lower Word in B
12705  54CD FD 76         sleu
12706  54CF FD F1         pop g
12707  54D1 E4            pop a
12708  54D2             ; END RELATIONAL
12709  54D2 C0 00 00      cmp b, 0
12710  54D5 C6 22 55      je _if207_else
12711  54D8             _if207_true:
12712  54D8             ;; printf("%s", print100(c1 + ((al * 100) / xl))); 
12713  54D8 FA 09 00      lea d, [bp + 9] ; $c1
12714  54DB 2A            mov b, [d]
12715  54DC             ; START TERMS
12716  54DC D7            push a
12717  54DD 11            mov a, b
12718  54DE FA F9 FF      lea d, [bp + -7] ; $al
12719  54E1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12720  54E4 FD 39         mov c, b ; And place it into C
12721  54E6 2A            mov b, [d] ; Lower Word in B
12722  54E7             ; START FACTORS
12723  54E7 D7            push a
12724  54E8 11            mov a, b
12725  54E9 26 64 00      mov b, $64
12726  54EC AC            mul a, b ; *
12727  54ED 11            mov a, b
12728  54EE 27            mov b, a
12729  54EF E4            pop a
12730  54F0             ; END FACTORS
12731  54F0             ; START FACTORS
12732  54F0 D7            push a
12733  54F1 11            mov a, b
12734  54F2 FA FD FF      lea d, [bp + -3] ; $xl
12735  54F5 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12736  54F8 FD 39         mov c, b ; And place it into C
12737  54FA 2A            mov b, [d] ; Lower Word in B
12738  54FB AE            div a, b
12739  54FC 27            mov b, a
12740  54FD E4            pop a
12741  54FE             ; END FACTORS
12742  54FE 54            add a, b
12743  54FF D7            push a
12744  5500 FD 12         mov a, g
12745  5502 28            mov b, c
12746  5503 5C            adc a, b
12747  5504 39            mov c, a
12748  5505 E5            pop b
12749  5506 E4            pop a
12750  5507             ; END TERMS
12751  5507 FD AB         swp b
12752  5509 D8            push b
12753  550A 07 5E 20      call print100
12754  550D 51 02 00      add sp, 2
12755  5510 FD AB         swp b
12756  5512 D8            push b
12757  5513 26 F5 75      mov b, _s154 ; "%s"
12758  5516 FD AB         swp b
12759  5518 D8            push b
12760  5519 07 B8 07      call printf
12761  551C 51 04 00      add sp, 4
12762  551F 0A 86 55      jmp _if207_exit
12763  5522             _if207_else:
12764  5522             ;; printf("%s", print100(c1 + ((((al * 2) - xl) * 100) / al))); 
12765  5522 FA 09 00      lea d, [bp + 9] ; $c1
12766  5525 2A            mov b, [d]
12767  5526             ; START TERMS
12768  5526 D7            push a
12769  5527 11            mov a, b
12770  5528 FA F9 FF      lea d, [bp + -7] ; $al
12771  552B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12772  552E FD 39         mov c, b ; And place it into C
12773  5530 2A            mov b, [d] ; Lower Word in B
12774  5531             ; START FACTORS
12775  5531 D7            push a
12776  5532 11            mov a, b
12777  5533 26 02 00      mov b, $2
12778  5536 AC            mul a, b ; *
12779  5537 11            mov a, b
12780  5538 27            mov b, a
12781  5539 E4            pop a
12782  553A             ; END FACTORS
12783  553A             ; START TERMS
12784  553A D7            push a
12785  553B FD D8         push g
12786  553D 11            mov a, b
12787  553E FD 7A         mov g, c
12788  5540 FA FD FF      lea d, [bp + -3] ; $xl
12789  5543 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12790  5546 FD 39         mov c, b ; And place it into C
12791  5548 2A            mov b, [d] ; Lower Word in B
12792  5549 60            sub a, b
12793  554A 27            mov b, a
12794  554B FD F1         pop g
12795  554D E4            pop a
12796  554E             ; END TERMS
12797  554E             ; START FACTORS
12798  554E D7            push a
12799  554F 11            mov a, b
12800  5550 26 64 00      mov b, $64
12801  5553 AC            mul a, b ; *
12802  5554 11            mov a, b
12803  5555 27            mov b, a
12804  5556 E4            pop a
12805  5557             ; END FACTORS
12806  5557             ; START FACTORS
12807  5557 D7            push a
12808  5558 11            mov a, b
12809  5559 FA F9 FF      lea d, [bp + -7] ; $al
12810  555C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12811  555F FD 39         mov c, b ; And place it into C
12812  5561 2A            mov b, [d] ; Lower Word in B
12813  5562 AE            div a, b
12814  5563 27            mov b, a
12815  5564 E4            pop a
12816  5565             ; END FACTORS
12817  5565 54            add a, b
12818  5566 D7            push a
12819  5567 FD 12         mov a, g
12820  5569 28            mov b, c
12821  556A 5C            adc a, b
12822  556B 39            mov c, a
12823  556C E5            pop b
12824  556D E4            pop a
12825  556E             ; END TERMS
12826  556E FD AB         swp b
12827  5570 D8            push b
12828  5571 07 5E 20      call print100
12829  5574 51 02 00      add sp, 2
12830  5577 FD AB         swp b
12831  5579 D8            push b
12832  557A 26 F5 75      mov b, _s154 ; "%s"
12833  557D FD AB         swp b
12834  557F D8            push b
12835  5580 07 B8 07      call printf
12836  5583 51 04 00      add sp, 4
12837  5586             _if207_exit:
12838  5586             ;; printf(dist_1, print100((xl > al) ? xl : al)); 
12839  5586             _ternary211_cond:
12840  5586 FA FD FF      lea d, [bp + -3] ; $xl
12841  5589 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12842  558C FD 39         mov c, b ; And place it into C
12843  558E 2A            mov b, [d] ; Lower Word in B
12844  558F             ; START RELATIONAL
12845  558F D7            push a
12846  5590 FD D8         push g
12847  5592 11            mov a, b
12848  5593 FD 7A         mov g, c
12849  5595 FA F9 FF      lea d, [bp + -7] ; $al
12850  5598 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12851  559B FD 39         mov c, b ; And place it into C
12852  559D 2A            mov b, [d] ; Lower Word in B
12853  559E FD 81         sgu
12854  55A0 FD F1         pop g
12855  55A2 E4            pop a
12856  55A3             ; END RELATIONAL
12857  55A3 C0 00 00      cmp b, 0
12858  55A6 C6 B5 55      je _ternary211_false
12859  55A9             _ternary211_true:
12860  55A9 FA FD FF      lea d, [bp + -3] ; $xl
12861  55AC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12862  55AF FD 39         mov c, b ; And place it into C
12863  55B1 2A            mov b, [d] ; Lower Word in B
12864  55B2 0A BE 55      jmp _ternary211_exit
12865  55B5             _ternary211_false:
12866  55B5 FA F9 FF      lea d, [bp + -7] ; $al
12867  55B8 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12868  55BB FD 39         mov c, b ; And place it into C
12869  55BD 2A            mov b, [d] ; Lower Word in B
12870  55BE             _ternary211_exit:
12871  55BE FD AB         swp b
12872  55C0 D8            push b
12873  55C1 07 5E 20      call print100
12874  55C4 51 02 00      add sp, 2
12875  55C7 FD AB         swp b
12876  55C9 D8            push b
12877  55CA 3B 67 64      mov d, _dist_1 ; $dist_1
12878  55CD 2A            mov b, [d]
12879  55CE FD AB         swp b
12880  55D0 D8            push b
12881  55D1 07 B8 07      call printf
12882  55D4 51 04 00      add sp, 4
12883  55D7             _if206_exit:
12884  55D7             _if205_exit:
12885  55D7             _if204_exit:
12886  55D7             _if196_exit:
12887  55D7 F9            leave
12888  55D8 09            ret
12889  55D9             
12890  55D9             ship_destroyed:
12891  55D9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
12892  55DC             ;; puts("The Enterprise has been destroyed. The Federation will be conquered.\n"); 
12893  55DC 26 F8 75      mov b, _s155 ; "The Enterprise has been destroyed. The Federation will be conquered.\n"
12894  55DF FD AB         swp b
12895  55E1 D8            push b
12896  55E2 07 48 15      call puts
12897  55E5 51 02 00      add sp, 2
12898  55E8             ;; end_of_time(); 
12899  55E8 07 ED 55      call end_of_time
12900  55EB F9            leave
12901  55EC 09            ret
12902  55ED             
12903  55ED             end_of_time:
12904  55ED F8 00 00      enter 0 ; (push bp; mov bp, sp)
12905  55F0             ;; printf("It is stardate %d.\n\n",  FROM_FIXED(stardate)); 
12906  55F0 3B 9F 62      mov d, _stardate ; $stardate
12907  55F3 2A            mov b, [d]
12908  55F4 FD AB         swp b
12909  55F6 D8            push b
12910  55F7 07 44 1D      call FROM_FIXED
12911  55FA 51 02 00      add sp, 2
12912  55FD FD AB         swp b
12913  55FF D8            push b
12914  5600 26 3E 76      mov b, _s156 ; "It is stardate %d.\n\n"
12915  5603 FD AB         swp b
12916  5605 D8            push b
12917  5606 07 B8 07      call printf
12918  5609 51 04 00      add sp, 4
12919  560C             ;; resign_commision(); 
12920  560C 07 11 56      call resign_commision
12921  560F F9            leave
12922  5610 09            ret
12923  5611             
12924  5611             resign_commision:
12925  5611 F8 00 00      enter 0 ; (push bp; mov bp, sp)
12926  5614             ;; printf("There were %d Klingon Battlecruisers left at the end of your mission.\n\n", klingons_left); 
12927  5614 3B 79 62      mov d, _klingons_left ; $klingons_left
12928  5617 32            mov bl, [d]
12929  5618 A7 00         mov bh, 0
12930  561A DD            push bl
12931  561B 26 53 76      mov b, _s157 ; "There were %d Klingon Battlecruisers left at the end of your mission.\n\n"
12932  561E FD AB         swp b
12933  5620 D8            push b
12934  5621 07 B8 07      call printf
12935  5624 51 03 00      add sp, 3
12936  5627             ;; end_of_game(); 
12937  5627 07 B3 56      call end_of_game
12938  562A F9            leave
12939  562B 09            ret
12940  562C             
12941  562C             won_game:
12942  562C F8 00 00      enter 0 ; (push bp; mov bp, sp)
12943  562F             ;; puts("Congratulations, Captain!  The last Klingon Battle Cruiser\n menacing the Federation has been destoyed.\n"); 
12944  562F 26 9B 76      mov b, _s158 ; "Congratulations, Captain!  The last Klingon Battle Cruiser\n menacing the Federation has been destoyed.\n"
12945  5632 FD AB         swp b
12946  5634 D8            push b
12947  5635 07 48 15      call puts
12948  5638 51 02 00      add sp, 2
12949  563B             ;; if (FROM_FIXED(stardate) - time_start > 0) 
12950  563B             _if212_cond:
12951  563B 3B 9F 62      mov d, _stardate ; $stardate
12952  563E 2A            mov b, [d]
12953  563F FD AB         swp b
12954  5641 D8            push b
12955  5642 07 44 1D      call FROM_FIXED
12956  5645 51 02 00      add sp, 2
12957  5648             ; START TERMS
12958  5648 D7            push a
12959  5649 11            mov a, b
12960  564A 3B 83 62      mov d, _time_start ; $time_start
12961  564D 2A            mov b, [d]
12962  564E 60            sub a, b
12963  564F 27            mov b, a
12964  5650 E4            pop a
12965  5651             ; END TERMS
12966  5651             ; START RELATIONAL
12967  5651 D7            push a
12968  5652 11            mov a, b
12969  5653 26 00 00      mov b, $0
12970  5656 B0            cmp a, b
12971  5657 FD 81         sgu ; > (unsigned)
12972  5659 E4            pop a
12973  565A             ; END RELATIONAL
12974  565A C0 00 00      cmp b, 0
12975  565D C6 AE 56      je _if212_exit
12976  5660             _if212_true:
12977  5660             ;; printf("Your efficiency rating is %s\n", 
12978  5660 3B 78 62      mov d, _total_klingons ; $total_klingons
12979  5663 32            mov bl, [d]
12980  5664 A7 00         mov bh, 0
12981  5666 FD AB         swp b
12982  5668 D8            push b
12983  5669 07 55 1D      call TO_FIXED00
12984  566C 51 02 00      add sp, 2
12985  566F             ; START FACTORS
12986  566F D7            push a
12987  5670 11            mov a, b
12988  5671 3B 9F 62      mov d, _stardate ; $stardate
12989  5674 2A            mov b, [d]
12990  5675 FD AB         swp b
12991  5677 D8            push b
12992  5678 07 44 1D      call FROM_FIXED
12993  567B 51 02 00      add sp, 2
12994  567E             ; START TERMS
12995  567E D7            push a
12996  567F 11            mov a, b
12997  5680 3B 83 62      mov d, _time_start ; $time_start
12998  5683 2A            mov b, [d]
12999  5684 60            sub a, b
13000  5685 27            mov b, a
13001  5686 E4            pop a
13002  5687             ; END TERMS
13003  5687 AE            div a, b
13004  5688 27            mov b, a
13005  5689 E4            pop a
13006  568A             ; END FACTORS
13007  568A FD AB         swp b
13008  568C D8            push b
13009  568D 07 76 60      call square00
13010  5690 51 02 00      add sp, 2
13011  5693 FD AB         swp b
13012  5695 D8            push b
13013  5696 07 5E 20      call print100
13014  5699 51 02 00      add sp, 2
13015  569C FD AB         swp b
13016  569E D8            push b
13017  569F 26 03 77      mov b, _s159 ; "Your efficiency rating is %s\n"
13018  56A2 FD AB         swp b
13019  56A4 D8            push b
13020  56A5 07 B8 07      call printf
13021  56A8 51 04 00      add sp, 4
13022  56AB 0A AE 56      jmp _if212_exit
13023  56AE             _if212_exit:
13024  56AE             ;; end_of_game(); 
13025  56AE 07 B3 56      call end_of_game
13026  56B1 F9            leave
13027  56B2 09            ret
13028  56B3             
13029  56B3             end_of_game:
13030  56B3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
13031  56B6             ;; char x[4]; 
13032  56B6 52 04 00      sub sp, 4 ; x
13033  56B9             ;; if (starbases_left > 0) { 
13034  56B9             _if213_cond:
13035  56B9 3B A4 61      mov d, _starbases_left ; $starbases_left
13036  56BC 32            mov bl, [d]
13037  56BD A7 00         mov bh, 0
13038  56BF             ; START RELATIONAL
13039  56BF D7            push a
13040  56C0 11            mov a, b
13041  56C1 26 00 00      mov b, $0
13042  56C4 B0            cmp a, b
13043  56C5 FD 7F         sgt ; >
13044  56C7 E4            pop a
13045  56C8             ; END RELATIONAL
13046  56C8 C0 00 00      cmp b, 0
13047  56CB C6 3C 57      je _if213_exit
13048  56CE             _if213_true:
13049  56CE             ;; puts("The Federation is in need of a new starship commander"); 
13050  56CE 26 21 77      mov b, _s160 ; "The Federation is in need of a new starship commander"
13051  56D1 FD AB         swp b
13052  56D3 D8            push b
13053  56D4 07 48 15      call puts
13054  56D7 51 02 00      add sp, 2
13055  56DA             ;; puts(" for a similar mission.\n"); 
13056  56DA 26 57 77      mov b, _s161 ; " for a similar mission.\n"
13057  56DD FD AB         swp b
13058  56DF D8            push b
13059  56E0 07 48 15      call puts
13060  56E3 51 02 00      add sp, 2
13061  56E6             ;; puts("If there is a volunteer, let him step forward and"); 
13062  56E6 26 70 77      mov b, _s162 ; "If there is a volunteer, let him step forward and"
13063  56E9 FD AB         swp b
13064  56EB D8            push b
13065  56EC 07 48 15      call puts
13066  56EF 51 02 00      add sp, 2
13067  56F2             ;; puts(" enter aye: "); 
13068  56F2 26 A2 77      mov b, _s163 ; " enter aye: "
13069  56F5 FD AB         swp b
13070  56F7 D8            push b
13071  56F8 07 48 15      call puts
13072  56FB 51 02 00      add sp, 2
13073  56FE             ;; input(x,4); 
13074  56FE 26 04 00      mov b, $4
13075  5701 DD            push bl
13076  5702 FA FD FF      lea d, [bp + -3] ; $x
13077  5705 2D            mov b, d
13078  5706 FD AB         swp b
13079  5708 D8            push b
13080  5709 07 D8 1D      call input
13081  570C 51 03 00      add sp, 3
13082  570F             ;; if (!strncmp(x, "aye", 3)) 
13083  570F             _if214_cond:
13084  570F 26 03 00      mov b, $3
13085  5712 FD AB         swp b
13086  5714 D8            push b
13087  5715 26 AF 77      mov b, _s164 ; "aye"
13088  5718 FD AB         swp b
13089  571A D8            push b
13090  571B FA FD FF      lea d, [bp + -3] ; $x
13091  571E 2D            mov b, d
13092  571F FD AB         swp b
13093  5721 D8            push b
13094  5722 07 D3 04      call strncmp
13095  5725 51 06 00      add sp, 6
13096  5728 C0 00 00      cmp b, 0
13097  572B FD 71         seq ; !
13098  572D C0 00 00      cmp b, 0
13099  5730 C6 39 57      je _if214_exit
13100  5733             _if214_true:
13101  5733             ;; new_game(); 
13102  5733 07 81 21      call new_game
13103  5736 0A 39 57      jmp _if214_exit
13104  5739             _if214_exit:
13105  5739 0A 3C 57      jmp _if213_exit
13106  573C             _if213_exit:
13107  573C             ;; exit(); 
13108  573C 07 D7 05      call exit
13109  573F F9            leave
13110  5740 09            ret
13111  5741             
13112  5741             klingons_move:
13113  5741 F8 00 00      enter 0 ; (push bp; mov bp, sp)
13114  5744             ;; int i; 
13115  5744 52 02 00      sub sp, 2 ; i
13116  5747             ;; struct klingon *k; 
13117  5747 52 02 00      sub sp, 2 ; k
13118  574A             ;; k = &kdata; 
13119  574A FA FD FF      lea d, [bp + -3] ; $k
13120  574D DA            push d
13121  574E 3B 6B 62      mov d, _kdata_data ; $kdata
13122  5751 2D            mov b, d
13123  5752 E7            pop d
13124  5753 FD 43         mov [d], b
13125  5755             ;; for (i = 0; i <= 2; i++) { 
13126  5755             _for215_init:
13127  5755 FA FF FF      lea d, [bp + -1] ; $i
13128  5758 DA            push d
13129  5759 26 00 00      mov b, $0
13130  575C E7            pop d
13131  575D FD 43         mov [d], b
13132  575F             _for215_cond:
13133  575F FA FF FF      lea d, [bp + -1] ; $i
13134  5762 2A            mov b, [d]
13135  5763             ; START RELATIONAL
13136  5763 D7            push a
13137  5764 11            mov a, b
13138  5765 26 02 00      mov b, $2
13139  5768 B0            cmp a, b
13140  5769 FD 73         slt ; <= (signed)
13141  576B E4            pop a
13142  576C             ; END RELATIONAL
13143  576C C0 00 00      cmp b, 0
13144  576F C6 DF 57      je _for215_exit
13145  5772             _for215_block:
13146  5772             ;; if (k->energy > 0) { 
13147  5772             _if216_cond:
13148  5772 FA FD FF      lea d, [bp + -3] ; $k
13149  5775 FD 2A         mov d, [d]
13150  5777 58 02 00      add d, 2
13151  577A 2A            mov b, [d]
13152  577B             ; START RELATIONAL
13153  577B D7            push a
13154  577C 11            mov a, b
13155  577D 26 00 00      mov b, $0
13156  5780 B0            cmp a, b
13157  5781 FD 7F         sgt ; >
13158  5783 E4            pop a
13159  5784             ; END RELATIONAL
13160  5784 C0 00 00      cmp b, 0
13161  5787 C6 C0 57      je _if216_exit
13162  578A             _if216_true:
13163  578A             ;; wipe_klingon(k); 
13164  578A FA FD FF      lea d, [bp + -3] ; $k
13165  578D 2A            mov b, [d]
13166  578E FD AB         swp b
13167  5790 D8            push b
13168  5791 07 19 3C      call wipe_klingon
13169  5794 51 02 00      add sp, 2
13170  5797             ;; find_set_empty_place( 	3        , k->y, k->x); 
13171  5797 FA FD FF      lea d, [bp + -3] ; $k
13172  579A FD 2A         mov d, [d]
13173  579C 58 01 00      add d, 1
13174  579F 32            mov bl, [d]
13175  57A0 A7 00         mov bh, 0
13176  57A2 FD AB         swp b
13177  57A4 D8            push b
13178  57A5 FA FD FF      lea d, [bp + -3] ; $k
13179  57A8 FD 2A         mov d, [d]
13180  57AA 58 00 00      add d, 0
13181  57AD 32            mov bl, [d]
13182  57AE A7 00         mov bh, 0
13183  57B0 FD AB         swp b
13184  57B2 D8            push b
13185  57B3 26 03 00      mov b, $3
13186  57B6 DD            push bl
13187  57B7 07 7D 5D      call find_set_empty_place
13188  57BA 51 05 00      add sp, 5
13189  57BD 0A C0 57      jmp _if216_exit
13190  57C0             _if216_exit:
13191  57C0             ;; k++; 
13192  57C0 FA FD FF      lea d, [bp + -3] ; $k
13193  57C3 2A            mov b, [d]
13194  57C4 D8            push b
13195  57C5 FD 77         inc b
13196  57C7 FD 77         inc b
13197  57C9 FA FD FF      lea d, [bp + -3] ; $k
13198  57CC FD 43         mov [d], b
13199  57CE E5            pop b
13200  57CF             _for215_update:
13201  57CF FA FF FF      lea d, [bp + -1] ; $i
13202  57D2 2A            mov b, [d]
13203  57D3 D8            push b
13204  57D4 FD 77         inc b
13205  57D6 FA FF FF      lea d, [bp + -1] ; $i
13206  57D9 FD 43         mov [d], b
13207  57DB E5            pop b
13208  57DC 0A 5F 57      jmp _for215_cond
13209  57DF             _for215_exit:
13210  57DF             ;; klingons_shoot(); 
13211  57DF 07 E4 57      call klingons_shoot
13212  57E2 F9            leave
13213  57E3 09            ret
13214  57E4             
13215  57E4             klingons_shoot:
13216  57E4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
13217  57E7             ;; unsigned char                         r; 
13218  57E7 52 01 00      sub sp, 1 ; r
13219  57EA             ;; long unsigned int        h; 
13220  57EA 52 04 00      sub sp, 4 ; h
13221  57ED             ;; unsigned char                         i; 
13222  57ED 52 01 00      sub sp, 1 ; i
13223  57F0             ;; struct klingon *k; 
13224  57F0 52 02 00      sub sp, 2 ; k
13225  57F3             ;; long unsigned int        ratio; 
13226  57F3 52 04 00      sub sp, 4 ; ratio
13227  57F6             ;; k = &kdata; 
13228  57F6 FA F9 FF      lea d, [bp + -7] ; $k
13229  57F9 DA            push d
13230  57FA 3B 6B 62      mov d, _kdata_data ; $kdata
13231  57FD 2D            mov b, d
13232  57FE E7            pop d
13233  57FF FD 43         mov [d], b
13234  5801             ;; if (klingons <= 0) 
13235  5801             _if217_cond:
13236  5801 3B 77 62      mov d, _klingons ; $klingons
13237  5804 32            mov bl, [d]
13238  5805 A7 00         mov bh, 0
13239  5807             ; START RELATIONAL
13240  5807 D7            push a
13241  5808 11            mov a, b
13242  5809 26 00 00      mov b, $0
13243  580C B0            cmp a, b
13244  580D FD 75         slu ; <= (unsigned)
13245  580F E4            pop a
13246  5810             ; END RELATIONAL
13247  5810 C0 00 00      cmp b, 0
13248  5813 C6 1B 58      je _if217_exit
13249  5816             _if217_true:
13250  5816             ;; return; 
13251  5816 F9            leave
13252  5817 09            ret
13253  5818 0A 1B 58      jmp _if217_exit
13254  581B             _if217_exit:
13255  581B             ;; if (docked) { 
13256  581B             _if218_cond:
13257  581B 3B C4 61      mov d, _docked ; $docked
13258  581E 32            mov bl, [d]
13259  581F A7 00         mov bh, 0
13260  5821 C0 00 00      cmp b, 0
13261  5824 C6 38 58      je _if218_exit
13262  5827             _if218_true:
13263  5827             ;; puts("Starbase shields protect the Enterprise\n"); 
13264  5827 26 B3 77      mov b, _s165 ; "Starbase shields protect the Enterprise\n"
13265  582A FD AB         swp b
13266  582C D8            push b
13267  582D 07 48 15      call puts
13268  5830 51 02 00      add sp, 2
13269  5833             ;; return; 
13270  5833 F9            leave
13271  5834 09            ret
13272  5835 0A 38 58      jmp _if218_exit
13273  5838             _if218_exit:
13274  5838             ;; for (i = 0; i <= 2; i++) { 
13275  5838             _for219_init:
13276  5838 FA FB FF      lea d, [bp + -5] ; $i
13277  583B DA            push d
13278  583C 26 00 00      mov b, $0
13279  583F E7            pop d
13280  5840 FD 3E         mov [d], bl
13281  5842             _for219_cond:
13282  5842 FA FB FF      lea d, [bp + -5] ; $i
13283  5845 32            mov bl, [d]
13284  5846 A7 00         mov bh, 0
13285  5848             ; START RELATIONAL
13286  5848 D7            push a
13287  5849 11            mov a, b
13288  584A 26 02 00      mov b, $2
13289  584D B0            cmp a, b
13290  584E FD 75         slu ; <= (unsigned)
13291  5850 E4            pop a
13292  5851             ; END RELATIONAL
13293  5851 C0 00 00      cmp b, 0
13294  5854 C6 CE 5A      je _for219_exit
13295  5857             _for219_block:
13296  5857             ;; if (k->energy > 0) { 
13297  5857             _if220_cond:
13298  5857 FA F9 FF      lea d, [bp + -7] ; $k
13299  585A FD 2A         mov d, [d]
13300  585C 58 02 00      add d, 2
13301  585F 2A            mov b, [d]
13302  5860             ; START RELATIONAL
13303  5860 D7            push a
13304  5861 11            mov a, b
13305  5862 26 00 00      mov b, $0
13306  5865 B0            cmp a, b
13307  5866 FD 7F         sgt ; >
13308  5868 E4            pop a
13309  5869             ; END RELATIONAL
13310  5869 C0 00 00      cmp b, 0
13311  586C C6 AD 5A      je _if220_exit
13312  586F             _if220_true:
13313  586F             ;; h = k->energy * (200UL + get_rand(100)); 
13314  586F FA FC FF      lea d, [bp + -4] ; $h
13315  5872 DA            push d
13316  5873 FA F9 FF      lea d, [bp + -7] ; $k
13317  5876 FD 2A         mov d, [d]
13318  5878 58 02 00      add d, 2
13319  587B 2A            mov b, [d]
13320  587C             ; START FACTORS
13321  587C D7            push a
13322  587D 11            mov a, b
13323  587E 26 C8 00      mov b, 200
13324  5881 38 00 00      mov c, 0
13325  5884             ; START TERMS
13326  5884 D7            push a
13327  5885 FD D8         push g
13328  5887 11            mov a, b
13329  5888 FD 7A         mov g, c
13330  588A 26 64 00      mov b, $64
13331  588D FD AB         swp b
13332  588F D8            push b
13333  5890 07 78 1D      call get_rand
13334  5893 51 02 00      add sp, 2
13335  5896 54            add a, b
13336  5897 D7            push a
13337  5898 FD 12         mov a, g
13338  589A 28            mov b, c
13339  589B 5C            adc a, b
13340  589C 39            mov c, a
13341  589D E5            pop b
13342  589E FD F1         pop g
13343  58A0 E4            pop a
13344  58A1             ; END TERMS
13345  58A1 AC            mul a, b ; *
13346  58A2 11            mov a, b
13347  58A3 27            mov b, a
13348  58A4 E4            pop a
13349  58A5             ; END FACTORS
13350  58A5 E7            pop d
13351  58A6 FD 43         mov [d], b
13352  58A8 28            mov b, c
13353  58A9 FD 44 02 00   mov [d + 2], b
13354  58AD             ;; h =h* 100;	/* Ready for division in fixed */ 
13355  58AD FA FC FF      lea d, [bp + -4] ; $h
13356  58B0 DA            push d
13357  58B1 FA FC FF      lea d, [bp + -4] ; $h
13358  58B4 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13359  58B7 FD 39         mov c, b ; And place it into C
13360  58B9 2A            mov b, [d] ; Lower Word in B
13361  58BA             ; START FACTORS
13362  58BA D7            push a
13363  58BB 11            mov a, b
13364  58BC 26 64 00      mov b, $64
13365  58BF AC            mul a, b ; *
13366  58C0 11            mov a, b
13367  58C1 27            mov b, a
13368  58C2 E4            pop a
13369  58C3             ; END FACTORS
13370  58C3 E7            pop d
13371  58C4 FD 43         mov [d], b
13372  58C6 28            mov b, c
13373  58C7 FD 44 02 00   mov [d + 2], b
13374  58CB             ;; h =h/ distance_to(k); 
13375  58CB FA FC FF      lea d, [bp + -4] ; $h
13376  58CE DA            push d
13377  58CF FA FC FF      lea d, [bp + -4] ; $h
13378  58D2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13379  58D5 FD 39         mov c, b ; And place it into C
13380  58D7 2A            mov b, [d] ; Lower Word in B
13381  58D8             ; START FACTORS
13382  58D8 D7            push a
13383  58D9 11            mov a, b
13384  58DA FA F9 FF      lea d, [bp + -7] ; $k
13385  58DD 2A            mov b, [d]
13386  58DE FD AB         swp b
13387  58E0 D8            push b
13388  58E1 07 EE 60      call distance_to
13389  58E4 51 02 00      add sp, 2
13390  58E7 AE            div a, b
13391  58E8 27            mov b, a
13392  58E9 E4            pop a
13393  58EA             ; END FACTORS
13394  58EA E7            pop d
13395  58EB FD 43         mov [d], b
13396  58ED 28            mov b, c
13397  58EE FD 44 02 00   mov [d + 2], b
13398  58F2             ;; shield = shield - FROM_FIXED00(h); 
13399  58F2 3B 80 62      mov d, _shield ; $shield
13400  58F5 DA            push d
13401  58F6 3B 80 62      mov d, _shield ; $shield
13402  58F9 2A            mov b, [d]
13403  58FA             ; START TERMS
13404  58FA D7            push a
13405  58FB 11            mov a, b
13406  58FC FA FC FF      lea d, [bp + -4] ; $h
13407  58FF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13408  5902 FD 39         mov c, b ; And place it into C
13409  5904 2A            mov b, [d] ; Lower Word in B
13410  5905 FD AB         swp b
13411  5907 D8            push b
13412  5908 07 67 1D      call FROM_FIXED00
13413  590B 51 02 00      add sp, 2
13414  590E 60            sub a, b
13415  590F 27            mov b, a
13416  5910 E4            pop a
13417  5911             ; END TERMS
13418  5911 E7            pop d
13419  5912 FD 43         mov [d], b
13420  5914             ;; k->energy = (k->energy * 100) / (300 + get_rand(100)); 
13421  5914 FA F9 FF      lea d, [bp + -7] ; $k
13422  5917 FD 2A         mov d, [d]
13423  5919 58 02 00      add d, 2
13424  591C DA            push d
13425  591D FA F9 FF      lea d, [bp + -7] ; $k
13426  5920 FD 2A         mov d, [d]
13427  5922 58 02 00      add d, 2
13428  5925 2A            mov b, [d]
13429  5926             ; START FACTORS
13430  5926 D7            push a
13431  5927 11            mov a, b
13432  5928 26 64 00      mov b, $64
13433  592B AC            mul a, b ; *
13434  592C 11            mov a, b
13435  592D 27            mov b, a
13436  592E E4            pop a
13437  592F             ; END FACTORS
13438  592F             ; START FACTORS
13439  592F D7            push a
13440  5930 11            mov a, b
13441  5931 26 2C 01      mov b, $12c
13442  5934             ; START TERMS
13443  5934 D7            push a
13444  5935 11            mov a, b
13445  5936 26 64 00      mov b, $64
13446  5939 FD AB         swp b
13447  593B D8            push b
13448  593C 07 78 1D      call get_rand
13449  593F 51 02 00      add sp, 2
13450  5942 56            add b, a
13451  5943 E4            pop a
13452  5944             ; END TERMS
13453  5944 AE            div a, b
13454  5945 27            mov b, a
13455  5946 E4            pop a
13456  5947             ; END FACTORS
13457  5947 E7            pop d
13458  5948 FD 43         mov [d], b
13459  594A             ;; printf("%d unit hit on Enterprise from sector %d, %d\n", (unsigned)FROM_FIXED00(h), k->y, k->x); 
13460  594A FA F9 FF      lea d, [bp + -7] ; $k
13461  594D FD 2A         mov d, [d]
13462  594F 58 01 00      add d, 1
13463  5952 32            mov bl, [d]
13464  5953 A7 00         mov bh, 0
13465  5955 DD            push bl
13466  5956 FA F9 FF      lea d, [bp + -7] ; $k
13467  5959 FD 2A         mov d, [d]
13468  595B 58 00 00      add d, 0
13469  595E 32            mov bl, [d]
13470  595F A7 00         mov bh, 0
13471  5961 DD            push bl
13472  5962 FA FC FF      lea d, [bp + -4] ; $h
13473  5965 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13474  5968 FD 39         mov c, b ; And place it into C
13475  596A 2A            mov b, [d] ; Lower Word in B
13476  596B FD AB         swp b
13477  596D D8            push b
13478  596E 26 DC 77      mov b, _s166 ; "%d unit hit on Enterprise from sector %d, %d\n"
13479  5971 FD AB         swp b
13480  5973 D8            push b
13481  5974 07 B8 07      call printf
13482  5977 51 06 00      add sp, 6
13483  597A             ;; if (shield <= 0) { 
13484  597A             _if221_cond:
13485  597A 3B 80 62      mov d, _shield ; $shield
13486  597D 2A            mov b, [d]
13487  597E             ; START RELATIONAL
13488  597E D7            push a
13489  597F 11            mov a, b
13490  5980 26 00 00      mov b, $0
13491  5983 B0            cmp a, b
13492  5984 FD 73         slt ; <= (signed)
13493  5986 E4            pop a
13494  5987             ; END RELATIONAL
13495  5987 C0 00 00      cmp b, 0
13496  598A C6 9D 59      je _if221_exit
13497  598D             _if221_true:
13498  598D             ;; putchar('\n'); 
13499  598D 26 0A 00      mov b, $a
13500  5990 DD            push bl
13501  5991 07 12 15      call putchar
13502  5994 51 01 00      add sp, 1
13503  5997             ;; ship_destroyed(); 
13504  5997 07 D9 55      call ship_destroyed
13505  599A 0A 9D 59      jmp _if221_exit
13506  599D             _if221_exit:
13507  599D             ;; printf("    <Shields down to %d units>\n\n", shield); 
13508  599D 3B 80 62      mov d, _shield ; $shield
13509  59A0 2A            mov b, [d]
13510  59A1 FD AB         swp b
13511  59A3 D8            push b
13512  59A4 26 0A 78      mov b, _s167 ; "    <Shields down to %d units>\n\n"
13513  59A7 FD AB         swp b
13514  59A9 D8            push b
13515  59AA 07 B8 07      call printf
13516  59AD 51 04 00      add sp, 4
13517  59B0             ;; if (h >= 20) { 
13518  59B0             _if222_cond:
13519  59B0 FA FC FF      lea d, [bp + -4] ; $h
13520  59B3 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13521  59B6 FD 39         mov c, b ; And place it into C
13522  59B8 2A            mov b, [d] ; Lower Word in B
13523  59B9             ; START RELATIONAL
13524  59B9 D7            push a
13525  59BA FD D8         push g
13526  59BC 11            mov a, b
13527  59BD FD 7A         mov g, c
13528  59BF 26 14 00      mov b, $14
13529  59C2 38 00 00      mov c, 0
13530  59C5 FD 82         sgeu
13531  59C7 FD F1         pop g
13532  59C9 E4            pop a
13533  59CA             ; END RELATIONAL
13534  59CA C0 00 00      cmp b, 0
13535  59CD C6 AA 5A      je _if222_exit
13536  59D0             _if222_true:
13537  59D0             ;; ratio = ((int)h)/shield; 
13538  59D0 FA F5 FF      lea d, [bp + -11] ; $ratio
13539  59D3 DA            push d
13540  59D4 FA FC FF      lea d, [bp + -4] ; $h
13541  59D7 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13542  59DA FD 39         mov c, b ; And place it into C
13543  59DC 2A            mov b, [d] ; Lower Word in B
13544  59DD             ; START FACTORS
13545  59DD D7            push a
13546  59DE 11            mov a, b
13547  59DF 3B 80 62      mov d, _shield ; $shield
13548  59E2 2A            mov b, [d]
13549  59E3 AE            div a, b
13550  59E4 27            mov b, a
13551  59E5 E4            pop a
13552  59E6             ; END FACTORS
13553  59E6 E7            pop d
13554  59E7 FD 43         mov [d], b
13555  59E9 28            mov b, c
13556  59EA FD 44 02 00   mov [d + 2], b
13557  59EE             ;; if (get_rand(10) <= 6 && ratio > 2) { 
13558  59EE             _if223_cond:
13559  59EE 26 0A 00      mov b, $a
13560  59F1 FD AB         swp b
13561  59F3 D8            push b
13562  59F4 07 78 1D      call get_rand
13563  59F7 51 02 00      add sp, 2
13564  59FA             ; START RELATIONAL
13565  59FA D7            push a
13566  59FB 11            mov a, b
13567  59FC 26 06 00      mov b, $6
13568  59FF B0            cmp a, b
13569  5A00 FD 73         slt ; <= (signed)
13570  5A02 E4            pop a
13571  5A03             ; END RELATIONAL
13572  5A03 D7            push a
13573  5A04 11            mov a, b
13574  5A05 FA F5 FF      lea d, [bp + -11] ; $ratio
13575  5A08 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13576  5A0B FD 39         mov c, b ; And place it into C
13577  5A0D 2A            mov b, [d] ; Lower Word in B
13578  5A0E             ; START RELATIONAL
13579  5A0E D7            push a
13580  5A0F FD D8         push g
13581  5A11 11            mov a, b
13582  5A12 FD 7A         mov g, c
13583  5A14 26 02 00      mov b, $2
13584  5A17 38 00 00      mov c, 0
13585  5A1A FD 81         sgu
13586  5A1C FD F1         pop g
13587  5A1E E4            pop a
13588  5A1F             ; END RELATIONAL
13589  5A1F FD 22 00 00   mov g, 0
13590  5A23 FD B1 00 00   sand32 ga, cb
13590  5A27 00 00 
13591  5A29 E4            pop a
13592  5A2A C0 00 00      cmp b, 0
13593  5A2D C6 A7 5A      je _if223_exit
13594  5A30             _if223_true:
13595  5A30             ;; r = rand8(); 
13596  5A30 FA 00 00      lea d, [bp + 0] ; $r
13597  5A33 DA            push d
13598  5A34 07 C7 1D      call rand8
13599  5A37 E7            pop d
13600  5A38 FD 3E         mov [d], bl
13601  5A3A             ;; damage[r] =damage[r] - ratio + get_rand(50); 
13602  5A3A 3B 87 62      mov d, _damage_data ; $damage
13603  5A3D D7            push a
13604  5A3E DA            push d
13605  5A3F FA 00 00      lea d, [bp + 0] ; $r
13606  5A42 32            mov bl, [d]
13607  5A43 A7 00         mov bh, 0
13608  5A45 E7            pop d
13609  5A46 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13610  5A4A E4            pop a
13611  5A4B DA            push d
13612  5A4C 3B 87 62      mov d, _damage_data ; $damage
13613  5A4F D7            push a
13614  5A50 DA            push d
13615  5A51 FA 00 00      lea d, [bp + 0] ; $r
13616  5A54 32            mov bl, [d]
13617  5A55 A7 00         mov bh, 0
13618  5A57 E7            pop d
13619  5A58 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13620  5A5C E4            pop a
13621  5A5D 2A            mov b, [d]
13622  5A5E             ; START TERMS
13623  5A5E D7            push a
13624  5A5F 11            mov a, b
13625  5A60 FA F5 FF      lea d, [bp + -11] ; $ratio
13626  5A63 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13627  5A66 FD 39         mov c, b ; And place it into C
13628  5A68 2A            mov b, [d] ; Lower Word in B
13629  5A69 60            sub a, b
13630  5A6A 27            mov b, a
13631  5A6B 11            mov a, b
13632  5A6C FD 7A         mov g, c
13633  5A6E 26 32 00      mov b, $32
13634  5A71 FD AB         swp b
13635  5A73 D8            push b
13636  5A74 07 78 1D      call get_rand
13637  5A77 51 02 00      add sp, 2
13638  5A7A 54            add a, b
13639  5A7B D7            push a
13640  5A7C FD 12         mov a, g
13641  5A7E 28            mov b, c
13642  5A7F 5C            adc a, b
13643  5A80 39            mov c, a
13644  5A81 E5            pop b
13645  5A82 E4            pop a
13646  5A83             ; END TERMS
13647  5A83 E7            pop d
13648  5A84 FD 43         mov [d], b
13649  5A86             ;; printf("Damage Control reports\n%s damaged by hit\n\n", get_device_name(r)); 
13650  5A86 FA 00 00      lea d, [bp + 0] ; $r
13651  5A89 32            mov bl, [d]
13652  5A8A A7 00         mov bh, 0
13653  5A8C FD AB         swp b
13654  5A8E D8            push b
13655  5A8F 07 3E 5E      call get_device_name
13656  5A92 51 02 00      add sp, 2
13657  5A95 FD AB         swp b
13658  5A97 D8            push b
13659  5A98 26 2B 78      mov b, _s168 ; "Damage Control reports\n%s damaged by hit\n\n"
13660  5A9B FD AB         swp b
13661  5A9D D8            push b
13662  5A9E 07 B8 07      call printf
13663  5AA1 51 04 00      add sp, 4
13664  5AA4 0A A7 5A      jmp _if223_exit
13665  5AA7             _if223_exit:
13666  5AA7 0A AA 5A      jmp _if222_exit
13667  5AAA             _if222_exit:
13668  5AAA 0A AD 5A      jmp _if220_exit
13669  5AAD             _if220_exit:
13670  5AAD             ;; k++; 
13671  5AAD FA F9 FF      lea d, [bp + -7] ; $k
13672  5AB0 2A            mov b, [d]
13673  5AB1 D8            push b
13674  5AB2 FD 77         inc b
13675  5AB4 FD 77         inc b
13676  5AB6 FA F9 FF      lea d, [bp + -7] ; $k
13677  5AB9 FD 43         mov [d], b
13678  5ABB E5            pop b
13679  5ABC             _for219_update:
13680  5ABC FA FB FF      lea d, [bp + -5] ; $i
13681  5ABF 32            mov bl, [d]
13682  5AC0 A7 00         mov bh, 0
13683  5AC2 D8            push b
13684  5AC3 FD 77         inc b
13685  5AC5 FA FB FF      lea d, [bp + -5] ; $i
13686  5AC8 FD 43         mov [d], b
13687  5ACA E5            pop b
13688  5ACB 0A 42 58      jmp _for219_cond
13689  5ACE             _for219_exit:
13690  5ACE F9            leave
13691  5ACF 09            ret
13692  5AD0             
13693  5AD0             repair_damage:
13694  5AD0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
13695  5AD3             ;; int i; 
13696  5AD3 52 02 00      sub sp, 2 ; i
13697  5AD6             ;; int d1; 
13698  5AD6 52 02 00      sub sp, 2 ; d1
13699  5AD9             ;; unsigned int        repair_factor;		/* Repair Factor */ 
13700  5AD9 52 02 00      sub sp, 2 ; repair_factor
13701  5ADC             ;; repair_factor = warp; 
13702  5ADC FA FB FF      lea d, [bp + -5] ; $repair_factor
13703  5ADF DA            push d
13704  5AE0 FA 05 00      lea d, [bp + 5] ; $warp
13705  5AE3 2A            mov b, [d]
13706  5AE4 E7            pop d
13707  5AE5 FD 43         mov [d], b
13708  5AE7             ;; if (warp >= 100) 
13709  5AE7             _if224_cond:
13710  5AE7 FA 05 00      lea d, [bp + 5] ; $warp
13711  5AEA 2A            mov b, [d]
13712  5AEB             ; START RELATIONAL
13713  5AEB D7            push a
13714  5AEC 11            mov a, b
13715  5AED 26 64 00      mov b, $64
13716  5AF0 B0            cmp a, b
13717  5AF1 FD 82         sgeu ; >= (unsigned)
13718  5AF3 E4            pop a
13719  5AF4             ; END RELATIONAL
13720  5AF4 C0 00 00      cmp b, 0
13721  5AF7 C6 10 5B      je _if224_exit
13722  5AFA             _if224_true:
13723  5AFA             ;; repair_factor = TO_FIXED00(1); 
13724  5AFA FA FB FF      lea d, [bp + -5] ; $repair_factor
13725  5AFD DA            push d
13726  5AFE 26 01 00      mov b, $1
13727  5B01 FD AB         swp b
13728  5B03 D8            push b
13729  5B04 07 55 1D      call TO_FIXED00
13730  5B07 51 02 00      add sp, 2
13731  5B0A E7            pop d
13732  5B0B FD 43         mov [d], b
13733  5B0D 0A 10 5B      jmp _if224_exit
13734  5B10             _if224_exit:
13735  5B10             ;; for (i = 1; i <= 8; i++) { 
13736  5B10             _for225_init:
13737  5B10 FA FF FF      lea d, [bp + -1] ; $i
13738  5B13 DA            push d
13739  5B14 26 01 00      mov b, $1
13740  5B17 E7            pop d
13741  5B18 FD 43         mov [d], b
13742  5B1A             _for225_cond:
13743  5B1A FA FF FF      lea d, [bp + -1] ; $i
13744  5B1D 2A            mov b, [d]
13745  5B1E             ; START RELATIONAL
13746  5B1E D7            push a
13747  5B1F 11            mov a, b
13748  5B20 26 08 00      mov b, $8
13749  5B23 B0            cmp a, b
13750  5B24 FD 73         slt ; <= (signed)
13751  5B26 E4            pop a
13752  5B27             ; END RELATIONAL
13753  5B27 C0 00 00      cmp b, 0
13754  5B2A C6 61 5C      je _for225_exit
13755  5B2D             _for225_block:
13756  5B2D             ;; if (damage[i] < 0) { 
13757  5B2D             _if226_cond:
13758  5B2D 3B 87 62      mov d, _damage_data ; $damage
13759  5B30 D7            push a
13760  5B31 DA            push d
13761  5B32 FA FF FF      lea d, [bp + -1] ; $i
13762  5B35 2A            mov b, [d]
13763  5B36 E7            pop d
13764  5B37 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13765  5B3B E4            pop a
13766  5B3C 2A            mov b, [d]
13767  5B3D             ; START RELATIONAL
13768  5B3D D7            push a
13769  5B3E 11            mov a, b
13770  5B3F 26 00 00      mov b, $0
13771  5B42 B0            cmp a, b
13772  5B43 FD 73         slt ; < (signed)
13773  5B45 E4            pop a
13774  5B46             ; END RELATIONAL
13775  5B46 C0 00 00      cmp b, 0
13776  5B49 C6 51 5C      je _if226_exit
13777  5B4C             _if226_true:
13778  5B4C             ;; damage[i] = damage[i] + repair_factor; 
13779  5B4C 3B 87 62      mov d, _damage_data ; $damage
13780  5B4F D7            push a
13781  5B50 DA            push d
13782  5B51 FA FF FF      lea d, [bp + -1] ; $i
13783  5B54 2A            mov b, [d]
13784  5B55 E7            pop d
13785  5B56 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13786  5B5A E4            pop a
13787  5B5B DA            push d
13788  5B5C 3B 87 62      mov d, _damage_data ; $damage
13789  5B5F D7            push a
13790  5B60 DA            push d
13791  5B61 FA FF FF      lea d, [bp + -1] ; $i
13792  5B64 2A            mov b, [d]
13793  5B65 E7            pop d
13794  5B66 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13795  5B6A E4            pop a
13796  5B6B 2A            mov b, [d]
13797  5B6C             ; START TERMS
13798  5B6C D7            push a
13799  5B6D 11            mov a, b
13800  5B6E FA FB FF      lea d, [bp + -5] ; $repair_factor
13801  5B71 2A            mov b, [d]
13802  5B72 56            add b, a
13803  5B73 E4            pop a
13804  5B74             ; END TERMS
13805  5B74 E7            pop d
13806  5B75 FD 43         mov [d], b
13807  5B77             ;; if (damage[i] > -10 && damage[i] < 0)	/* -0.1 */ 
13808  5B77             _if227_cond:
13809  5B77 3B 87 62      mov d, _damage_data ; $damage
13810  5B7A D7            push a
13811  5B7B DA            push d
13812  5B7C FA FF FF      lea d, [bp + -1] ; $i
13813  5B7F 2A            mov b, [d]
13814  5B80 E7            pop d
13815  5B81 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13816  5B85 E4            pop a
13817  5B86 2A            mov b, [d]
13818  5B87             ; START RELATIONAL
13819  5B87 D7            push a
13820  5B88 11            mov a, b
13821  5B89 26 F6 FF      mov b, $fff6
13822  5B8C B0            cmp a, b
13823  5B8D FD 7F         sgt ; >
13824  5B8F E4            pop a
13825  5B90             ; END RELATIONAL
13826  5B90 D7            push a
13827  5B91 11            mov a, b
13828  5B92 3B 87 62      mov d, _damage_data ; $damage
13829  5B95 D7            push a
13830  5B96 DA            push d
13831  5B97 FA FF FF      lea d, [bp + -1] ; $i
13832  5B9A 2A            mov b, [d]
13833  5B9B E7            pop d
13834  5B9C FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13835  5BA0 E4            pop a
13836  5BA1 2A            mov b, [d]
13837  5BA2             ; START RELATIONAL
13838  5BA2 D7            push a
13839  5BA3 11            mov a, b
13840  5BA4 26 00 00      mov b, $0
13841  5BA7 B0            cmp a, b
13842  5BA8 FD 73         slt ; < (signed)
13843  5BAA E4            pop a
13844  5BAB             ; END RELATIONAL
13845  5BAB FD A7         sand a, b
13846  5BAD E4            pop a
13847  5BAE C0 00 00      cmp b, 0
13848  5BB1 C6 CD 5B      je _if227_else
13849  5BB4             _if227_true:
13850  5BB4             ;; damage[i] = -10; 
13851  5BB4 3B 87 62      mov d, _damage_data ; $damage
13852  5BB7 D7            push a
13853  5BB8 DA            push d
13854  5BB9 FA FF FF      lea d, [bp + -1] ; $i
13855  5BBC 2A            mov b, [d]
13856  5BBD E7            pop d
13857  5BBE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13858  5BC2 E4            pop a
13859  5BC3 DA            push d
13860  5BC4 26 F6 FF      mov b, $fff6
13861  5BC7 E7            pop d
13862  5BC8 FD 43         mov [d], b
13863  5BCA 0A 4E 5C      jmp _if227_exit
13864  5BCD             _if227_else:
13865  5BCD             ;; if (damage[i] >= 0) { 
13866  5BCD             _if228_cond:
13867  5BCD 3B 87 62      mov d, _damage_data ; $damage
13868  5BD0 D7            push a
13869  5BD1 DA            push d
13870  5BD2 FA FF FF      lea d, [bp + -1] ; $i
13871  5BD5 2A            mov b, [d]
13872  5BD6 E7            pop d
13873  5BD7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13874  5BDB E4            pop a
13875  5BDC 2A            mov b, [d]
13876  5BDD             ; START RELATIONAL
13877  5BDD D7            push a
13878  5BDE 11            mov a, b
13879  5BDF 26 00 00      mov b, $0
13880  5BE2 B0            cmp a, b
13881  5BE3 FD 80         sge ; >=
13882  5BE5 E4            pop a
13883  5BE6             ; END RELATIONAL
13884  5BE6 C0 00 00      cmp b, 0
13885  5BE9 C6 4E 5C      je _if228_exit
13886  5BEC             _if228_true:
13887  5BEC             ;; if (d1 != 1) { 
13888  5BEC             _if229_cond:
13889  5BEC FA FD FF      lea d, [bp + -3] ; $d1
13890  5BEF 2A            mov b, [d]
13891  5BF0             ; START RELATIONAL
13892  5BF0 D7            push a
13893  5BF1 11            mov a, b
13894  5BF2 26 01 00      mov b, $1
13895  5BF5 B0            cmp a, b
13896  5BF6 FD 72         sneq ; !=
13897  5BF8 E4            pop a
13898  5BF9             ; END RELATIONAL
13899  5BF9 C0 00 00      cmp b, 0
13900  5BFC C6 19 5C      je _if229_exit
13901  5BFF             _if229_true:
13902  5BFF             ;; d1 = 1; 
13903  5BFF FA FD FF      lea d, [bp + -3] ; $d1
13904  5C02 DA            push d
13905  5C03 26 01 00      mov b, $1
13906  5C06 E7            pop d
13907  5C07 FD 43         mov [d], b
13908  5C09             ;; puts(dcr_1); 
13909  5C09 3B 96 63      mov d, _dcr_1 ; $dcr_1
13910  5C0C 2A            mov b, [d]
13911  5C0D FD AB         swp b
13912  5C0F D8            push b
13913  5C10 07 48 15      call puts
13914  5C13 51 02 00      add sp, 2
13915  5C16 0A 19 5C      jmp _if229_exit
13916  5C19             _if229_exit:
13917  5C19             ;; printf("    %s repair completed\n\n", 
13918  5C19 FA FF FF      lea d, [bp + -1] ; $i
13919  5C1C 2A            mov b, [d]
13920  5C1D FD AB         swp b
13921  5C1F D8            push b
13922  5C20 07 3E 5E      call get_device_name
13923  5C23 51 02 00      add sp, 2
13924  5C26 FD AB         swp b
13925  5C28 D8            push b
13926  5C29 26 56 78      mov b, _s169 ; "    %s repair completed\n\n"
13927  5C2C FD AB         swp b
13928  5C2E D8            push b
13929  5C2F 07 B8 07      call printf
13930  5C32 51 04 00      add sp, 4
13931  5C35             ;; damage[i] = 0; 
13932  5C35 3B 87 62      mov d, _damage_data ; $damage
13933  5C38 D7            push a
13934  5C39 DA            push d
13935  5C3A FA FF FF      lea d, [bp + -1] ; $i
13936  5C3D 2A            mov b, [d]
13937  5C3E E7            pop d
13938  5C3F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13939  5C43 E4            pop a
13940  5C44 DA            push d
13941  5C45 26 00 00      mov b, $0
13942  5C48 E7            pop d
13943  5C49 FD 43         mov [d], b
13944  5C4B 0A 4E 5C      jmp _if228_exit
13945  5C4E             _if228_exit:
13946  5C4E             _if227_exit:
13947  5C4E 0A 51 5C      jmp _if226_exit
13948  5C51             _if226_exit:
13949  5C51             _for225_update:
13950  5C51 FA FF FF      lea d, [bp + -1] ; $i
13951  5C54 2A            mov b, [d]
13952  5C55 D8            push b
13953  5C56 FD 77         inc b
13954  5C58 FA FF FF      lea d, [bp + -1] ; $i
13955  5C5B FD 43         mov [d], b
13956  5C5D E5            pop b
13957  5C5E 0A 1A 5B      jmp _for225_cond
13958  5C61             _for225_exit:
13959  5C61             ;; unsigned char                         r; 
13960  5C61 52 01 00      sub sp, 1 ; r
13961  5C64             ;; if (get_rand(10) <= 2) { 
13962  5C64             _if230_cond:
13963  5C64 26 0A 00      mov b, $a
13964  5C67 FD AB         swp b
13965  5C69 D8            push b
13966  5C6A 07 78 1D      call get_rand
13967  5C6D 51 02 00      add sp, 2
13968  5C70             ; START RELATIONAL
13969  5C70 D7            push a
13970  5C71 11            mov a, b
13971  5C72 26 02 00      mov b, $2
13972  5C75 B0            cmp a, b
13973  5C76 FD 73         slt ; <= (signed)
13974  5C78 E4            pop a
13975  5C79             ; END RELATIONAL
13976  5C79 C0 00 00      cmp b, 0
13977  5C7C C6 7B 5D      je _if230_exit
13978  5C7F             _if230_true:
13979  5C7F             ;; r = rand8(); 
13980  5C7F FA FA FF      lea d, [bp + -6] ; $r
13981  5C82 DA            push d
13982  5C83 07 C7 1D      call rand8
13983  5C86 E7            pop d
13984  5C87 FD 3E         mov [d], bl
13985  5C89             ;; if (get_rand(10) < 6) { 
13986  5C89             _if231_cond:
13987  5C89 26 0A 00      mov b, $a
13988  5C8C FD AB         swp b
13989  5C8E D8            push b
13990  5C8F 07 78 1D      call get_rand
13991  5C92 51 02 00      add sp, 2
13992  5C95             ; START RELATIONAL
13993  5C95 D7            push a
13994  5C96 11            mov a, b
13995  5C97 26 06 00      mov b, $6
13996  5C9A B0            cmp a, b
13997  5C9B FD 73         slt ; < (signed)
13998  5C9D E4            pop a
13999  5C9E             ; END RELATIONAL
14000  5C9E C0 00 00      cmp b, 0
14001  5CA1 C6 11 5D      je _if231_else
14002  5CA4             _if231_true:
14003  5CA4             ;; damage[r] =damage[r]- (get_rand(500) + 100); 
14004  5CA4 3B 87 62      mov d, _damage_data ; $damage
14005  5CA7 D7            push a
14006  5CA8 DA            push d
14007  5CA9 FA FA FF      lea d, [bp + -6] ; $r
14008  5CAC 32            mov bl, [d]
14009  5CAD A7 00         mov bh, 0
14010  5CAF E7            pop d
14011  5CB0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14012  5CB4 E4            pop a
14013  5CB5 DA            push d
14014  5CB6 3B 87 62      mov d, _damage_data ; $damage
14015  5CB9 D7            push a
14016  5CBA DA            push d
14017  5CBB FA FA FF      lea d, [bp + -6] ; $r
14018  5CBE 32            mov bl, [d]
14019  5CBF A7 00         mov bh, 0
14020  5CC1 E7            pop d
14021  5CC2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14022  5CC6 E4            pop a
14023  5CC7 2A            mov b, [d]
14024  5CC8             ; START TERMS
14025  5CC8 D7            push a
14026  5CC9 11            mov a, b
14027  5CCA 26 F4 01      mov b, $1f4
14028  5CCD FD AB         swp b
14029  5CCF D8            push b
14030  5CD0 07 78 1D      call get_rand
14031  5CD3 51 02 00      add sp, 2
14032  5CD6             ; START TERMS
14033  5CD6 D7            push a
14034  5CD7 11            mov a, b
14035  5CD8 26 64 00      mov b, $64
14036  5CDB 56            add b, a
14037  5CDC E4            pop a
14038  5CDD             ; END TERMS
14039  5CDD 60            sub a, b
14040  5CDE 27            mov b, a
14041  5CDF E4            pop a
14042  5CE0             ; END TERMS
14043  5CE0 E7            pop d
14044  5CE1 FD 43         mov [d], b
14045  5CE3             ;; puts(dcr_1); 
14046  5CE3 3B 96 63      mov d, _dcr_1 ; $dcr_1
14047  5CE6 2A            mov b, [d]
14048  5CE7 FD AB         swp b
14049  5CE9 D8            push b
14050  5CEA 07 48 15      call puts
14051  5CED 51 02 00      add sp, 2
14052  5CF0             ;; printf("    %s damaged\n\n", get_device_name(r)); 
14053  5CF0 FA FA FF      lea d, [bp + -6] ; $r
14054  5CF3 32            mov bl, [d]
14055  5CF4 A7 00         mov bh, 0
14056  5CF6 FD AB         swp b
14057  5CF8 D8            push b
14058  5CF9 07 3E 5E      call get_device_name
14059  5CFC 51 02 00      add sp, 2
14060  5CFF FD AB         swp b
14061  5D01 D8            push b
14062  5D02 26 70 78      mov b, _s170 ; "    %s damaged\n\n"
14063  5D05 FD AB         swp b
14064  5D07 D8            push b
14065  5D08 07 B8 07      call printf
14066  5D0B 51 04 00      add sp, 4
14067  5D0E 0A 78 5D      jmp _if231_exit
14068  5D11             _if231_else:
14069  5D11             ;; damage[r] = damage[r] + get_rand(300) + 100; 
14070  5D11 3B 87 62      mov d, _damage_data ; $damage
14071  5D14 D7            push a
14072  5D15 DA            push d
14073  5D16 FA FA FF      lea d, [bp + -6] ; $r
14074  5D19 32            mov bl, [d]
14075  5D1A A7 00         mov bh, 0
14076  5D1C E7            pop d
14077  5D1D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14078  5D21 E4            pop a
14079  5D22 DA            push d
14080  5D23 3B 87 62      mov d, _damage_data ; $damage
14081  5D26 D7            push a
14082  5D27 DA            push d
14083  5D28 FA FA FF      lea d, [bp + -6] ; $r
14084  5D2B 32            mov bl, [d]
14085  5D2C A7 00         mov bh, 0
14086  5D2E E7            pop d
14087  5D2F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14088  5D33 E4            pop a
14089  5D34 2A            mov b, [d]
14090  5D35             ; START TERMS
14091  5D35 D7            push a
14092  5D36 11            mov a, b
14093  5D37 26 2C 01      mov b, $12c
14094  5D3A FD AB         swp b
14095  5D3C D8            push b
14096  5D3D 07 78 1D      call get_rand
14097  5D40 51 02 00      add sp, 2
14098  5D43 56            add b, a
14099  5D44 11            mov a, b
14100  5D45 26 64 00      mov b, $64
14101  5D48 56            add b, a
14102  5D49 E4            pop a
14103  5D4A             ; END TERMS
14104  5D4A E7            pop d
14105  5D4B FD 43         mov [d], b
14106  5D4D             ;; puts(dcr_1); 
14107  5D4D 3B 96 63      mov d, _dcr_1 ; $dcr_1
14108  5D50 2A            mov b, [d]
14109  5D51 FD AB         swp b
14110  5D53 D8            push b
14111  5D54 07 48 15      call puts
14112  5D57 51 02 00      add sp, 2
14113  5D5A             ;; printf("    %s state of repair improved\n\n", 
14114  5D5A FA FA FF      lea d, [bp + -6] ; $r
14115  5D5D 32            mov bl, [d]
14116  5D5E A7 00         mov bh, 0
14117  5D60 FD AB         swp b
14118  5D62 D8            push b
14119  5D63 07 3E 5E      call get_device_name
14120  5D66 51 02 00      add sp, 2
14121  5D69 FD AB         swp b
14122  5D6B D8            push b
14123  5D6C 26 81 78      mov b, _s171 ; "    %s state of repair improved\n\n"
14124  5D6F FD AB         swp b
14125  5D71 D8            push b
14126  5D72 07 B8 07      call printf
14127  5D75 51 04 00      add sp, 4
14128  5D78             _if231_exit:
14129  5D78 0A 7B 5D      jmp _if230_exit
14130  5D7B             _if230_exit:
14131  5D7B F9            leave
14132  5D7C 09            ret
14133  5D7D             
14134  5D7D             find_set_empty_place:
14135  5D7D F8 00 00      enter 0 ; (push bp; mov bp, sp)
14136  5D80             ;; unsigned char                         r1, r2; 
14137  5D80 52 01 00      sub sp, 1 ; r1
14138  5D83 52 01 00      sub sp, 1 ; r2
14139  5D86             ;; do { 
14140  5D86             _do232_block:
14141  5D86             ;; r1 = rand8(); 
14142  5D86 FA 00 00      lea d, [bp + 0] ; $r1
14143  5D89 DA            push d
14144  5D8A 07 C7 1D      call rand8
14145  5D8D E7            pop d
14146  5D8E FD 3E         mov [d], bl
14147  5D90             ;; r2 = rand8(); 
14148  5D90 FA FF FF      lea d, [bp + -1] ; $r2
14149  5D93 DA            push d
14150  5D94 07 C7 1D      call rand8
14151  5D97 E7            pop d
14152  5D98 FD 3E         mov [d], bl
14153  5D9A             ;; } while (quad[r1+-1][r2+-1] !=  		0       ); 
14154  5D9A             _do232_cond:
14155  5D9A 3B A1 62      mov d, _quad_data ; $quad
14156  5D9D D7            push a
14157  5D9E DA            push d
14158  5D9F FA 00 00      lea d, [bp + 0] ; $r1
14159  5DA2 32            mov bl, [d]
14160  5DA3 A7 00         mov bh, 0
14161  5DA5             ; START TERMS
14162  5DA5 D7            push a
14163  5DA6 11            mov a, b
14164  5DA7 26 FF FF      mov b, $ffff
14165  5DAA 56            add b, a
14166  5DAB E4            pop a
14167  5DAC             ; END TERMS
14168  5DAC E7            pop d
14169  5DAD FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
14170  5DB1 DA            push d
14171  5DB2 FA FF FF      lea d, [bp + -1] ; $r2
14172  5DB5 32            mov bl, [d]
14173  5DB6 A7 00         mov bh, 0
14174  5DB8             ; START TERMS
14175  5DB8 D7            push a
14176  5DB9 11            mov a, b
14177  5DBA 26 FF FF      mov b, $ffff
14178  5DBD 56            add b, a
14179  5DBE E4            pop a
14180  5DBF             ; END TERMS
14181  5DBF E7            pop d
14182  5DC0 5A            add d, b
14183  5DC1 E4            pop a
14184  5DC2 32            mov bl, [d]
14185  5DC3 A7 00         mov bh, 0
14186  5DC5             ; START RELATIONAL
14187  5DC5 D7            push a
14188  5DC6 11            mov a, b
14189  5DC7 26 00 00      mov b, $0
14190  5DCA B0            cmp a, b
14191  5DCB FD 72         sneq ; !=
14192  5DCD E4            pop a
14193  5DCE             ; END RELATIONAL
14194  5DCE C0 01 00      cmp b, 1
14195  5DD1 C6 86 5D      je _do232_block
14196  5DD4             _do232_exit:
14197  5DD4             ;; quad[r1+-1][r2+-1] = t; 
14198  5DD4 3B A1 62      mov d, _quad_data ; $quad
14199  5DD7 D7            push a
14200  5DD8 DA            push d
14201  5DD9 FA 00 00      lea d, [bp + 0] ; $r1
14202  5DDC 32            mov bl, [d]
14203  5DDD A7 00         mov bh, 0
14204  5DDF             ; START TERMS
14205  5DDF D7            push a
14206  5DE0 11            mov a, b
14207  5DE1 26 FF FF      mov b, $ffff
14208  5DE4 56            add b, a
14209  5DE5 E4            pop a
14210  5DE6             ; END TERMS
14211  5DE6 E7            pop d
14212  5DE7 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
14213  5DEB DA            push d
14214  5DEC FA FF FF      lea d, [bp + -1] ; $r2
14215  5DEF 32            mov bl, [d]
14216  5DF0 A7 00         mov bh, 0
14217  5DF2             ; START TERMS
14218  5DF2 D7            push a
14219  5DF3 11            mov a, b
14220  5DF4 26 FF FF      mov b, $ffff
14221  5DF7 56            add b, a
14222  5DF8 E4            pop a
14223  5DF9             ; END TERMS
14224  5DF9 E7            pop d
14225  5DFA 5A            add d, b
14226  5DFB E4            pop a
14227  5DFC DA            push d
14228  5DFD FA 05 00      lea d, [bp + 5] ; $t
14229  5E00 32            mov bl, [d]
14230  5E01 A7 00         mov bh, 0
14231  5E03 E7            pop d
14232  5E04 FD 3E         mov [d], bl
14233  5E06             ;; if (z1) 
14234  5E06             _if233_cond:
14235  5E06 FA 06 00      lea d, [bp + 6] ; $z1
14236  5E09 2A            mov b, [d]
14237  5E0A C0 00 00      cmp b, 0
14238  5E0D C6 21 5E      je _if233_exit
14239  5E10             _if233_true:
14240  5E10             ;; *z1 = r1; 
14241  5E10 FA 06 00      lea d, [bp + 6] ; $z1
14242  5E13 2A            mov b, [d]
14243  5E14 D8            push b
14244  5E15 FA 00 00      lea d, [bp + 0] ; $r1
14245  5E18 32            mov bl, [d]
14246  5E19 A7 00         mov bh, 0
14247  5E1B E7            pop d
14248  5E1C FD 3E         mov [d], bl
14249  5E1E 0A 21 5E      jmp _if233_exit
14250  5E21             _if233_exit:
14251  5E21             ;; if (z2) 
14252  5E21             _if234_cond:
14253  5E21 FA 08 00      lea d, [bp + 8] ; $z2
14254  5E24 2A            mov b, [d]
14255  5E25 C0 00 00      cmp b, 0
14256  5E28 C6 3C 5E      je _if234_exit
14257  5E2B             _if234_true:
14258  5E2B             ;; *z2 = r2; 
14259  5E2B FA 08 00      lea d, [bp + 8] ; $z2
14260  5E2E 2A            mov b, [d]
14261  5E2F D8            push b
14262  5E30 FA FF FF      lea d, [bp + -1] ; $r2
14263  5E33 32            mov bl, [d]
14264  5E34 A7 00         mov bh, 0
14265  5E36 E7            pop d
14266  5E37 FD 3E         mov [d], bl
14267  5E39 0A 3C 5E      jmp _if234_exit
14268  5E3C             _if234_exit:
14269  5E3C F9            leave
14270  5E3D 09            ret
14271  5E3E             
14272  5E3E             get_device_name:
14273  5E3E F8 00 00      enter 0 ; (push bp; mov bp, sp)
14274  5E41             ;; if (n < 0 || n > 8) 
14275  5E41             _if235_cond:
14276  5E41 FA 05 00      lea d, [bp + 5] ; $n
14277  5E44 2A            mov b, [d]
14278  5E45             ; START RELATIONAL
14279  5E45 D7            push a
14280  5E46 11            mov a, b
14281  5E47 26 00 00      mov b, $0
14282  5E4A B0            cmp a, b
14283  5E4B FD 73         slt ; < (signed)
14284  5E4D E4            pop a
14285  5E4E             ; END RELATIONAL
14286  5E4E D7            push a
14287  5E4F 11            mov a, b
14288  5E50 FA 05 00      lea d, [bp + 5] ; $n
14289  5E53 2A            mov b, [d]
14290  5E54             ; START RELATIONAL
14291  5E54 D7            push a
14292  5E55 11            mov a, b
14293  5E56 26 08 00      mov b, $8
14294  5E59 B0            cmp a, b
14295  5E5A FD 7F         sgt ; >
14296  5E5C E4            pop a
14297  5E5D             ; END RELATIONAL
14298  5E5D FD A8         sor a, b ; ||
14299  5E5F E4            pop a
14300  5E60 C0 00 00      cmp b, 0
14301  5E63 C6 73 5E      je _if235_exit
14302  5E66             _if235_true:
14303  5E66             ;; n = 0; 
14304  5E66 FA 05 00      lea d, [bp + 5] ; $n
14305  5E69 DA            push d
14306  5E6A 26 00 00      mov b, $0
14307  5E6D E7            pop d
14308  5E6E FD 43         mov [d], b
14309  5E70 0A 73 5E      jmp _if235_exit
14310  5E73             _if235_exit:
14311  5E73             ;; return device_name[n]; 
14312  5E73 3B 5B 63      mov d, _device_name_data ; $device_name
14313  5E76 D7            push a
14314  5E77 DA            push d
14315  5E78 FA 05 00      lea d, [bp + 5] ; $n
14316  5E7B 2A            mov b, [d]
14317  5E7C E7            pop d
14318  5E7D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14319  5E81 E4            pop a
14320  5E82 2A            mov b, [d]
14321  5E83 F9            leave
14322  5E84 09            ret
14323  5E85             
14324  5E85             quadrant_name:
14325  5E85 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14326  5E88             ;; static char *sect_name[] = { "", " I", " II", " III", " IV" }; 
14327  5E88 52 14 00      sub sp, 20 ; sect_name
14328  5E8B             ;; if (y < 1 || y > 8 || x < 1 || x > 8) 
14329  5E8B             _if236_cond:
14330  5E8B FA 06 00      lea d, [bp + 6] ; $y
14331  5E8E 32            mov bl, [d]
14332  5E8F A7 00         mov bh, 0
14333  5E91             ; START RELATIONAL
14334  5E91 D7            push a
14335  5E92 11            mov a, b
14336  5E93 26 01 00      mov b, $1
14337  5E96 B0            cmp a, b
14338  5E97 FD 75         slu ; < (unsigned)
14339  5E99 E4            pop a
14340  5E9A             ; END RELATIONAL
14341  5E9A D7            push a
14342  5E9B 11            mov a, b
14343  5E9C FA 06 00      lea d, [bp + 6] ; $y
14344  5E9F 32            mov bl, [d]
14345  5EA0 A7 00         mov bh, 0
14346  5EA2             ; START RELATIONAL
14347  5EA2 D7            push a
14348  5EA3 11            mov a, b
14349  5EA4 26 08 00      mov b, $8
14350  5EA7 B0            cmp a, b
14351  5EA8 FD 81         sgu ; > (unsigned)
14352  5EAA E4            pop a
14353  5EAB             ; END RELATIONAL
14354  5EAB FD A8         sor a, b ; ||
14355  5EAD 11            mov a, b
14356  5EAE FA 07 00      lea d, [bp + 7] ; $x
14357  5EB1 32            mov bl, [d]
14358  5EB2 A7 00         mov bh, 0
14359  5EB4             ; START RELATIONAL
14360  5EB4 D7            push a
14361  5EB5 11            mov a, b
14362  5EB6 26 01 00      mov b, $1
14363  5EB9 B0            cmp a, b
14364  5EBA FD 75         slu ; < (unsigned)
14365  5EBC E4            pop a
14366  5EBD             ; END RELATIONAL
14367  5EBD FD A8         sor a, b ; ||
14368  5EBF 11            mov a, b
14369  5EC0 FA 07 00      lea d, [bp + 7] ; $x
14370  5EC3 32            mov bl, [d]
14371  5EC4 A7 00         mov bh, 0
14372  5EC6             ; START RELATIONAL
14373  5EC6 D7            push a
14374  5EC7 11            mov a, b
14375  5EC8 26 08 00      mov b, $8
14376  5ECB B0            cmp a, b
14377  5ECC FD 81         sgu ; > (unsigned)
14378  5ECE E4            pop a
14379  5ECF             ; END RELATIONAL
14380  5ECF FD A8         sor a, b ; ||
14381  5ED1 E4            pop a
14382  5ED2 C0 00 00      cmp b, 0
14383  5ED5 C6 EE 5E      je _if236_exit
14384  5ED8             _if236_true:
14385  5ED8             ;; strcpy(quadname, "Unknown"); 
14386  5ED8 26 B3 78      mov b, _s176 ; "Unknown"
14387  5EDB FD AB         swp b
14388  5EDD D8            push b
14389  5EDE 3B E1 62      mov d, _quadname_data ; $quadname
14390  5EE1 2D            mov b, d
14391  5EE2 FD AB         swp b
14392  5EE4 D8            push b
14393  5EE5 07 14 04      call strcpy
14394  5EE8 51 04 00      add sp, 4
14395  5EEB 0A EE 5E      jmp _if236_exit
14396  5EEE             _if236_exit:
14397  5EEE             ;; if (x <= 4) 
14398  5EEE             _if237_cond:
14399  5EEE FA 07 00      lea d, [bp + 7] ; $x
14400  5EF1 32            mov bl, [d]
14401  5EF2 A7 00         mov bh, 0
14402  5EF4             ; START RELATIONAL
14403  5EF4 D7            push a
14404  5EF5 11            mov a, b
14405  5EF6 26 04 00      mov b, $4
14406  5EF9 B0            cmp a, b
14407  5EFA FD 75         slu ; <= (unsigned)
14408  5EFC E4            pop a
14409  5EFD             ; END RELATIONAL
14410  5EFD C0 00 00      cmp b, 0
14411  5F00 C6 28 5F      je _if237_else
14412  5F03             _if237_true:
14413  5F03             ;; strcpy(quadname, quad_name[y]); 
14414  5F03 3B 17 63      mov d, _quad_name_data ; $quad_name
14415  5F06 D7            push a
14416  5F07 DA            push d
14417  5F08 FA 06 00      lea d, [bp + 6] ; $y
14418  5F0B 32            mov bl, [d]
14419  5F0C A7 00         mov bh, 0
14420  5F0E E7            pop d
14421  5F0F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14422  5F13 E4            pop a
14423  5F14 2A            mov b, [d]
14424  5F15 FD AB         swp b
14425  5F17 D8            push b
14426  5F18 3B E1 62      mov d, _quadname_data ; $quadname
14427  5F1B 2D            mov b, d
14428  5F1C FD AB         swp b
14429  5F1E D8            push b
14430  5F1F 07 14 04      call strcpy
14431  5F22 51 04 00      add sp, 4
14432  5F25 0A 51 5F      jmp _if237_exit
14433  5F28             _if237_else:
14434  5F28             ;; strcpy(quadname, quad_name[y + 8]); 
14435  5F28 3B 17 63      mov d, _quad_name_data ; $quad_name
14436  5F2B D7            push a
14437  5F2C DA            push d
14438  5F2D FA 06 00      lea d, [bp + 6] ; $y
14439  5F30 32            mov bl, [d]
14440  5F31 A7 00         mov bh, 0
14441  5F33             ; START TERMS
14442  5F33 D7            push a
14443  5F34 11            mov a, b
14444  5F35 26 08 00      mov b, $8
14445  5F38 56            add b, a
14446  5F39 E4            pop a
14447  5F3A             ; END TERMS
14448  5F3A E7            pop d
14449  5F3B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14450  5F3F E4            pop a
14451  5F40 2A            mov b, [d]
14452  5F41 FD AB         swp b
14453  5F43 D8            push b
14454  5F44 3B E1 62      mov d, _quadname_data ; $quadname
14455  5F47 2D            mov b, d
14456  5F48 FD AB         swp b
14457  5F4A D8            push b
14458  5F4B 07 14 04      call strcpy
14459  5F4E 51 04 00      add sp, 4
14460  5F51             _if237_exit:
14461  5F51             ;; if (small != 1) { 
14462  5F51             _if238_cond:
14463  5F51 FA 05 00      lea d, [bp + 5] ; $small
14464  5F54 32            mov bl, [d]
14465  5F55 A7 00         mov bh, 0
14466  5F57             ; START RELATIONAL
14467  5F57 D7            push a
14468  5F58 11            mov a, b
14469  5F59 26 01 00      mov b, $1
14470  5F5C B0            cmp a, b
14471  5F5D FD 72         sneq ; !=
14472  5F5F E4            pop a
14473  5F60             ; END RELATIONAL
14474  5F60 C0 00 00      cmp b, 0
14475  5F63 C6 B8 5F      je _if238_exit
14476  5F66             _if238_true:
14477  5F66             ;; if (x > 4) 
14478  5F66             _if239_cond:
14479  5F66 FA 07 00      lea d, [bp + 7] ; $x
14480  5F69 32            mov bl, [d]
14481  5F6A A7 00         mov bh, 0
14482  5F6C             ; START RELATIONAL
14483  5F6C D7            push a
14484  5F6D 11            mov a, b
14485  5F6E 26 04 00      mov b, $4
14486  5F71 B0            cmp a, b
14487  5F72 FD 81         sgu ; > (unsigned)
14488  5F74 E4            pop a
14489  5F75             ; END RELATIONAL
14490  5F75 C0 00 00      cmp b, 0
14491  5F78 C6 93 5F      je _if239_exit
14492  5F7B             _if239_true:
14493  5F7B             ;; x = x - 4; 
14494  5F7B FA 07 00      lea d, [bp + 7] ; $x
14495  5F7E DA            push d
14496  5F7F FA 07 00      lea d, [bp + 7] ; $x
14497  5F82 32            mov bl, [d]
14498  5F83 A7 00         mov bh, 0
14499  5F85             ; START TERMS
14500  5F85 D7            push a
14501  5F86 11            mov a, b
14502  5F87 26 04 00      mov b, $4
14503  5F8A 60            sub a, b
14504  5F8B 27            mov b, a
14505  5F8C E4            pop a
14506  5F8D             ; END TERMS
14507  5F8D E7            pop d
14508  5F8E FD 3E         mov [d], bl
14509  5F90 0A 93 5F      jmp _if239_exit
14510  5F93             _if239_exit:
14511  5F93             ;; strcat(quadname, sect_name[x]); 
14512  5F93 3B 79 64      mov d, st_quadrant_name_sect_name_dt ; static sect_name
14513  5F96 D7            push a
14514  5F97 DA            push d
14515  5F98 FA 07 00      lea d, [bp + 7] ; $x
14516  5F9B 32            mov bl, [d]
14517  5F9C A7 00         mov bh, 0
14518  5F9E E7            pop d
14519  5F9F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14520  5FA3 E4            pop a
14521  5FA4 2A            mov b, [d]
14522  5FA5 FD AB         swp b
14523  5FA7 D8            push b
14524  5FA8 3B E1 62      mov d, _quadname_data ; $quadname
14525  5FAB 2D            mov b, d
14526  5FAC FD AB         swp b
14527  5FAE D8            push b
14528  5FAF 07 D8 04      call strcat
14529  5FB2 51 04 00      add sp, 4
14530  5FB5 0A B8 5F      jmp _if238_exit
14531  5FB8             _if238_exit:
14532  5FB8             ;; return; 
14533  5FB8 F9            leave
14534  5FB9 09            ret
14535  5FBA             
14536  5FBA             isqrt:
14537  5FBA F8 00 00      enter 0 ; (push bp; mov bp, sp)
14538  5FBD             ;; unsigned int        b, q, r, t; 
14539  5FBD 52 02 00      sub sp, 2 ; b
14540  5FC0 52 02 00      sub sp, 2 ; q
14541  5FC3 52 02 00      sub sp, 2 ; r
14542  5FC6 52 02 00      sub sp, 2 ; t
14543  5FC9             ;; b = 0x4000; 
14544  5FC9 FA FF FF      lea d, [bp + -1] ; $b
14545  5FCC DA            push d
14546  5FCD 26 00 40      mov b, $4000
14547  5FD0 E7            pop d
14548  5FD1 FD 43         mov [d], b
14549  5FD3             ;; q = 0; 
14550  5FD3 FA FD FF      lea d, [bp + -3] ; $q
14551  5FD6 DA            push d
14552  5FD7 26 00 00      mov b, $0
14553  5FDA E7            pop d
14554  5FDB FD 43         mov [d], b
14555  5FDD             ;; r = i; 
14556  5FDD FA FB FF      lea d, [bp + -5] ; $r
14557  5FE0 DA            push d
14558  5FE1 FA 05 00      lea d, [bp + 5] ; $i
14559  5FE4 2A            mov b, [d]
14560  5FE5 E7            pop d
14561  5FE6 FD 43         mov [d], b
14562  5FE8             ;; while (b) { 
14563  5FE8             _while240_cond:
14564  5FE8 FA FF FF      lea d, [bp + -1] ; $b
14565  5FEB 2A            mov b, [d]
14566  5FEC C0 00 00      cmp b, 0
14567  5FEF C6 70 60      je _while240_exit
14568  5FF2             _while240_block:
14569  5FF2             ;; t = q + b; 
14570  5FF2 FA F9 FF      lea d, [bp + -7] ; $t
14571  5FF5 DA            push d
14572  5FF6 FA FD FF      lea d, [bp + -3] ; $q
14573  5FF9 2A            mov b, [d]
14574  5FFA             ; START TERMS
14575  5FFA D7            push a
14576  5FFB 11            mov a, b
14577  5FFC FA FF FF      lea d, [bp + -1] ; $b
14578  5FFF 2A            mov b, [d]
14579  6000 56            add b, a
14580  6001 E4            pop a
14581  6002             ; END TERMS
14582  6002 E7            pop d
14583  6003 FD 43         mov [d], b
14584  6005             ;; q =q>> 1; 
14585  6005 FA FD FF      lea d, [bp + -3] ; $q
14586  6008 DA            push d
14587  6009 FA FD FF      lea d, [bp + -3] ; $q
14588  600C 2A            mov b, [d]
14589  600D             ; START SHIFT
14590  600D D7            push a
14591  600E 11            mov a, b
14592  600F 26 01 00      mov b, $1
14593  6012 FD 39         mov c, b
14594  6014 A1            shr a, cl
14595  6015 27            mov b, a
14596  6016 E4            pop a
14597  6017             ; END SHIFT
14598  6017 E7            pop d
14599  6018 FD 43         mov [d], b
14600  601A             ;; if (r >= t) { 
14601  601A             _if241_cond:
14602  601A FA FB FF      lea d, [bp + -5] ; $r
14603  601D 2A            mov b, [d]
14604  601E             ; START RELATIONAL
14605  601E D7            push a
14606  601F 11            mov a, b
14607  6020 FA F9 FF      lea d, [bp + -7] ; $t
14608  6023 2A            mov b, [d]
14609  6024 B0            cmp a, b
14610  6025 FD 82         sgeu ; >= (unsigned)
14611  6027 E4            pop a
14612  6028             ; END RELATIONAL
14613  6028 C0 00 00      cmp b, 0
14614  602B C6 58 60      je _if241_exit
14615  602E             _if241_true:
14616  602E             ;; r =r- t; 
14617  602E FA FB FF      lea d, [bp + -5] ; $r
14618  6031 DA            push d
14619  6032 FA FB FF      lea d, [bp + -5] ; $r
14620  6035 2A            mov b, [d]
14621  6036             ; START TERMS
14622  6036 D7            push a
14623  6037 11            mov a, b
14624  6038 FA F9 FF      lea d, [bp + -7] ; $t
14625  603B 2A            mov b, [d]
14626  603C 60            sub a, b
14627  603D 27            mov b, a
14628  603E E4            pop a
14629  603F             ; END TERMS
14630  603F E7            pop d
14631  6040 FD 43         mov [d], b
14632  6042             ;; q = q + b; 
14633  6042 FA FD FF      lea d, [bp + -3] ; $q
14634  6045 DA            push d
14635  6046 FA FD FF      lea d, [bp + -3] ; $q
14636  6049 2A            mov b, [d]
14637  604A             ; START TERMS
14638  604A D7            push a
14639  604B 11            mov a, b
14640  604C FA FF FF      lea d, [bp + -1] ; $b
14641  604F 2A            mov b, [d]
14642  6050 56            add b, a
14643  6051 E4            pop a
14644  6052             ; END TERMS
14645  6052 E7            pop d
14646  6053 FD 43         mov [d], b
14647  6055 0A 58 60      jmp _if241_exit
14648  6058             _if241_exit:
14649  6058             ;; b =b>> 2; 
14650  6058 FA FF FF      lea d, [bp + -1] ; $b
14651  605B DA            push d
14652  605C FA FF FF      lea d, [bp + -1] ; $b
14653  605F 2A            mov b, [d]
14654  6060             ; START SHIFT
14655  6060 D7            push a
14656  6061 11            mov a, b
14657  6062 26 02 00      mov b, $2
14658  6065 FD 39         mov c, b
14659  6067 A1            shr a, cl
14660  6068 27            mov b, a
14661  6069 E4            pop a
14662  606A             ; END SHIFT
14663  606A E7            pop d
14664  606B FD 43         mov [d], b
14665  606D 0A E8 5F      jmp _while240_cond
14666  6070             _while240_exit:
14667  6070             ;; return q; 
14668  6070 FA FD FF      lea d, [bp + -3] ; $q
14669  6073 2A            mov b, [d]
14670  6074 F9            leave
14671  6075 09            ret
14672  6076             
14673  6076             square00:
14674  6076 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14675  6079             ;; if (abs(t) > 181) { 
14676  6079             _if242_cond:
14677  6079 FA 05 00      lea d, [bp + 5] ; $t
14678  607C 2A            mov b, [d]
14679  607D FD AB         swp b
14680  607F D8            push b
14681  6080 07 94 15      call abs
14682  6083 51 02 00      add sp, 2
14683  6086             ; START RELATIONAL
14684  6086 D7            push a
14685  6087 11            mov a, b
14686  6088 26 B5 00      mov b, $b5
14687  608B B0            cmp a, b
14688  608C FD 7F         sgt ; >
14689  608E E4            pop a
14690  608F             ; END RELATIONAL
14691  608F C0 00 00      cmp b, 0
14692  6092 C6 C0 60      je _if242_else
14693  6095             _if242_true:
14694  6095             ;; t =t/ 10; 
14695  6095 FA 05 00      lea d, [bp + 5] ; $t
14696  6098 DA            push d
14697  6099 FA 05 00      lea d, [bp + 5] ; $t
14698  609C 2A            mov b, [d]
14699  609D             ; START FACTORS
14700  609D D7            push a
14701  609E 11            mov a, b
14702  609F 26 0A 00      mov b, $a
14703  60A2 AE            div a, b
14704  60A3 27            mov b, a
14705  60A4 E4            pop a
14706  60A5             ; END FACTORS
14707  60A5 E7            pop d
14708  60A6 FD 43         mov [d], b
14709  60A8             ;; t =t* t; 
14710  60A8 FA 05 00      lea d, [bp + 5] ; $t
14711  60AB DA            push d
14712  60AC FA 05 00      lea d, [bp + 5] ; $t
14713  60AF 2A            mov b, [d]
14714  60B0             ; START FACTORS
14715  60B0 D7            push a
14716  60B1 11            mov a, b
14717  60B2 FA 05 00      lea d, [bp + 5] ; $t
14718  60B5 2A            mov b, [d]
14719  60B6 AC            mul a, b ; *
14720  60B7 11            mov a, b
14721  60B8 27            mov b, a
14722  60B9 E4            pop a
14723  60BA             ; END FACTORS
14724  60BA E7            pop d
14725  60BB FD 43         mov [d], b
14726  60BD 0A E8 60      jmp _if242_exit
14727  60C0             _if242_else:
14728  60C0             ;; t =t* t; 
14729  60C0 FA 05 00      lea d, [bp + 5] ; $t
14730  60C3 DA            push d
14731  60C4 FA 05 00      lea d, [bp + 5] ; $t
14732  60C7 2A            mov b, [d]
14733  60C8             ; START FACTORS
14734  60C8 D7            push a
14735  60C9 11            mov a, b
14736  60CA FA 05 00      lea d, [bp + 5] ; $t
14737  60CD 2A            mov b, [d]
14738  60CE AC            mul a, b ; *
14739  60CF 11            mov a, b
14740  60D0 27            mov b, a
14741  60D1 E4            pop a
14742  60D2             ; END FACTORS
14743  60D2 E7            pop d
14744  60D3 FD 43         mov [d], b
14745  60D5             ;; t =t/ 100; 
14746  60D5 FA 05 00      lea d, [bp + 5] ; $t
14747  60D8 DA            push d
14748  60D9 FA 05 00      lea d, [bp + 5] ; $t
14749  60DC 2A            mov b, [d]
14750  60DD             ; START FACTORS
14751  60DD D7            push a
14752  60DE 11            mov a, b
14753  60DF 26 64 00      mov b, $64
14754  60E2 AE            div a, b
14755  60E3 27            mov b, a
14756  60E4 E4            pop a
14757  60E5             ; END FACTORS
14758  60E5 E7            pop d
14759  60E6 FD 43         mov [d], b
14760  60E8             _if242_exit:
14761  60E8             ;; return t; 
14762  60E8 FA 05 00      lea d, [bp + 5] ; $t
14763  60EB 2A            mov b, [d]
14764  60EC F9            leave
14765  60ED 09            ret
14766  60EE             
14767  60EE             distance_to:
14768  60EE F8 00 00      enter 0 ; (push bp; mov bp, sp)
14769  60F1             ;; unsigned int        j; 
14770  60F1 52 02 00      sub sp, 2 ; j
14771  60F4             ;; j = square00(TO_FIXED00(k->y) - ship_y); 
14772  60F4 FA FF FF      lea d, [bp + -1] ; $j
14773  60F7 DA            push d
14774  60F8 FA 05 00      lea d, [bp + 5] ; $k
14775  60FB FD 2A         mov d, [d]
14776  60FD 58 00 00      add d, 0
14777  6100 32            mov bl, [d]
14778  6101 A7 00         mov bh, 0
14779  6103 FD AB         swp b
14780  6105 D8            push b
14781  6106 07 55 1D      call TO_FIXED00
14782  6109 51 02 00      add sp, 2
14783  610C             ; START TERMS
14784  610C D7            push a
14785  610D 11            mov a, b
14786  610E 3B 9B 62      mov d, _ship_y ; $ship_y
14787  6111 2A            mov b, [d]
14788  6112 60            sub a, b
14789  6113 27            mov b, a
14790  6114 E4            pop a
14791  6115             ; END TERMS
14792  6115 FD AB         swp b
14793  6117 D8            push b
14794  6118 07 76 60      call square00
14795  611B 51 02 00      add sp, 2
14796  611E E7            pop d
14797  611F FD 43         mov [d], b
14798  6121             ;; j = j + square00(TO_FIXED00(k->x) - ship_x); 
14799  6121 FA FF FF      lea d, [bp + -1] ; $j
14800  6124 DA            push d
14801  6125 FA FF FF      lea d, [bp + -1] ; $j
14802  6128 2A            mov b, [d]
14803  6129             ; START TERMS
14804  6129 D7            push a
14805  612A 11            mov a, b
14806  612B FA 05 00      lea d, [bp + 5] ; $k
14807  612E FD 2A         mov d, [d]
14808  6130 58 01 00      add d, 1
14809  6133 32            mov bl, [d]
14810  6134 A7 00         mov bh, 0
14811  6136 FD AB         swp b
14812  6138 D8            push b
14813  6139 07 55 1D      call TO_FIXED00
14814  613C 51 02 00      add sp, 2
14815  613F             ; START TERMS
14816  613F D7            push a
14817  6140 11            mov a, b
14818  6141 3B 9D 62      mov d, _ship_x ; $ship_x
14819  6144 2A            mov b, [d]
14820  6145 60            sub a, b
14821  6146 27            mov b, a
14822  6147 E4            pop a
14823  6148             ; END TERMS
14824  6148 FD AB         swp b
14825  614A D8            push b
14826  614B 07 76 60      call square00
14827  614E 51 02 00      add sp, 2
14828  6151 56            add b, a
14829  6152 E4            pop a
14830  6153             ; END TERMS
14831  6153 E7            pop d
14832  6154 FD 43         mov [d], b
14833  6156             ;; j = isqrt(j); 
14834  6156 FA FF FF      lea d, [bp + -1] ; $j
14835  6159 DA            push d
14836  615A FA FF FF      lea d, [bp + -1] ; $j
14837  615D 2A            mov b, [d]
14838  615E FD AB         swp b
14839  6160 D8            push b
14840  6161 07 BA 5F      call isqrt
14841  6164 51 02 00      add sp, 2
14842  6167 E7            pop d
14843  6168 FD 43         mov [d], b
14844  616A             ;; j =j* 10; 
14845  616A FA FF FF      lea d, [bp + -1] ; $j
14846  616D DA            push d
14847  616E FA FF FF      lea d, [bp + -1] ; $j
14848  6171 2A            mov b, [d]
14849  6172             ; START FACTORS
14850  6172 D7            push a
14851  6173 11            mov a, b
14852  6174 26 0A 00      mov b, $a
14853  6177 AC            mul a, b ; *
14854  6178 11            mov a, b
14855  6179 27            mov b, a
14856  617A E4            pop a
14857  617B             ; END FACTORS
14858  617B E7            pop d
14859  617C FD 43         mov [d], b
14860  617E             ;; return j; 
14861  617E FA FF FF      lea d, [bp + -1] ; $j
14862  6181 2A            mov b, [d]
14863  6182 F9            leave
14864  6183 09            ret
14865  6184             
14866  6184             cint100:
14867  6184 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14868  6187             ;; return (d + 50) / 100; 
14869  6187 FA 05 00      lea d, [bp + 5] ; $d
14870  618A 2A            mov b, [d]
14871  618B             ; START TERMS
14872  618B D7            push a
14873  618C 11            mov a, b
14874  618D 26 32 00      mov b, $32
14875  6190 56            add b, a
14876  6191 E4            pop a
14877  6192             ; END TERMS
14878  6192             ; START FACTORS
14879  6192 D7            push a
14880  6193 11            mov a, b
14881  6194 26 64 00      mov b, $64
14882  6197 AE            div a, b
14883  6198 27            mov b, a
14884  6199 E4            pop a
14885  619A             ; END FACTORS
14886  619A F9            leave
14887  619B 09            ret
14888  619C             
14889  619C             showfile:
14890  619C F8 00 00      enter 0 ; (push bp; mov bp, sp)
14891  619F F9            leave
14892  61A0 09            ret
14893  61A1             ; --- END TEXT BLOCK
14894  61A1             
14895  61A1             ; --- BEGIN DATA BLOCK
14896  61A1 00          _starbases: .fill 1, 0
14897  61A2 00          _base_y: .fill 1, 0
14898  61A3 00          _base_x: .fill 1, 0
14899  61A4 00          _starbases_left: .fill 1, 0
14900  61A5             _c_data: 
14901  61A5 00          .db 
14902  61A6 00 00 00 FF .db $0,$0,$0,$ffff,$ffff,$ffff,$0,$1,$1,$1,$0,$1,$1,$1,$0,$ffff,$ffff,$ffff,$0,$1,$1,
14902  61AA FF FF 00 01 
14902  61AE 01 01 00 01 
14902  61B2 01 01 00 FF 
14902  61B6 FF FF 00 01 
14902  61BA 01 
14903  61BB 00 00 00 00 .fill 9, 0
14903  61BF 00 00 00 00 
14903  61C3 00 
14904  61C4 00          _docked: .fill 1, 0
14905  61C5 00 00       _energy: .fill 2, 0
14906  61C7 B8 0B       _energy0: .dw 3000
14907  61C9 00 00 00 00 _map_data: .fill 162, 0
14907  61CD 00 00 00 00 
14907  61D1 00 00 00 00 
14907  61D5 00 00 00 00 
14907  61D9 00 00 00 00 
14907  61DD 00 00 00 00 
14907  61E1 00 00 00 00 
14907  61E5 00 00 00 00 
14907  61E9 00 00 00 00 
14907  61ED 00 00 00 00 
14907  61F1 00 00 00 00 
14907  61F5 00 00 00 00 
14907  61F9 00 00 00 00 
14907  61FD 00 00 00 00 
14907  6201 00 00 00 00 
14907  6205 00 00 00 00 
14907  6209 00 00 00 00 
14907  620D 00 00 00 00 
14907  6211 00 00 00 00 
14907  6215 00 00 00 00 
14907  6219 00 00 00 00 
14907  621D 00 00 00 00 
14907  6221 00 00 00 00 
14907  6225 00 00 00 00 
14907  6229 00 00 00 00 
14907  622D 00 00 00 00 
14907  6231 00 00 00 00 
14907  6235 00 00 00 00 
14907  6239 00 00 00 00 
14907  623D 00 00 00 00 
14907  6241 00 00 00 00 
14907  6245 00 00 00 00 
14907  6249 00 00 00 00 
14907  624D 00 00 00 00 
14907  6251 00 00 00 00 
14907  6255 00 00 00 00 
14907  6259 00 00 00 00 
14907  625D 00 00 00 00 
14907  6261 00 00 00 00 
14907  6265 00 00 00 00 
14907  6269 00 00 
14908  626B 00 00 00 00 _kdata_data: .fill 12, 0
14908  626F 00 00 00 00 
14908  6273 00 00 00 00 
14909  6277 00          _klingons: .fill 1, 0
14910  6278 00          _total_klingons: .fill 1, 0
14911  6279 00          _klingons_left: .fill 1, 0
14912  627A 00          _torps: .fill 1, 0
14913  627B 0A          _torps0: .db 10
14914  627C 00 00       _quad_y: .fill 2, 0
14915  627E 00 00       _quad_x: .fill 2, 0
14916  6280 00 00       _shield: .fill 2, 0
14917  6282 00          _stars: .fill 1, 0
14918  6283 00 00       _time_start: .fill 2, 0
14919  6285 00 00       _time_up: .fill 2, 0
14920  6287 00 00 00 00 _damage_data: .fill 18, 0
14920  628B 00 00 00 00 
14920  628F 00 00 00 00 
14920  6293 00 00 00 00 
14920  6297 00 00 
14921  6299 00 00       _d4: .fill 2, 0
14922  629B 00 00       _ship_y: .fill 2, 0
14923  629D 00 00       _ship_x: .fill 2, 0
14924  629F 00 00       _stardate: .fill 2, 0
14925  62A1 00 00 00 00 _quad_data: .fill 64, 0
14925  62A5 00 00 00 00 
14925  62A9 00 00 00 00 
14925  62AD 00 00 00 00 
14925  62B1 00 00 00 00 
14925  62B5 00 00 00 00 
14925  62B9 00 00 00 00 
14925  62BD 00 00 00 00 
14925  62C1 00 00 00 00 
14925  62C5 00 00 00 00 
14925  62C9 00 00 00 00 
14925  62CD 00 00 00 00 
14925  62D1 00 00 00 00 
14925  62D5 00 00 00 00 
14925  62D9 00 00 00 00 
14925  62DD 00 00 00 00 
14926  62E1 00 00 00 00 _quadname_data: .fill 12, 0
14926  62E5 00 00 00 00 
14926  62E9 00 00 00 00 
14927  62ED 72 65 70 6F _inc_1_data: .db "reports:\n  Incorrect course data, sir!\n", 0
14927  62F1 72 74 73 3A 
14927  62F5 0A 20 20 49 
14927  62F9 6E 63 6F 72 
14927  62FD 72 65 63 74 
14927  6301 20 63 6F 75 
14927  6305 72 73 65 20 
14927  6309 64 61 74 61 
14927  630D 2C 20 73 69 
14927  6311 72 21 0A 00 
14928  6315 ED 62       _inc_1: .dw _inc_1_data
14929  6317             _quad_name_data: 
14930  6317 8F 64 90 64 .dw _s0, _s1, _s2, _s3, _s4, _s5, _s6, _s7, _s8, _s9, _s10, _s11, _s12, _s13, _s14, _s15, _s16, 
14930  631B 98 64 9E 64 
14930  631F A6 64 AB 64 
14930  6323 B3 64 BA 64 
14930  6327 C6 64 CD 64 
14930  632B D4 64 DA 64 
14930  632F E2 64 ED 64 
14930  6333 F7 64 FF 64 
14930  6337 08 65 
14931  6339 00 00 00 00 .fill 34, 0
14931  633D 00 00 00 00 
14931  6341 00 00 00 00 
14931  6345 00 00 00 00 
14931  6349 00 00 00 00 
14931  634D 00 00 00 00 
14931  6351 00 00 00 00 
14931  6355 00 00 00 00 
14931  6359 00 00 
14932  635B             _device_name_data: 
14933  635B 8F 64 0E 65 .dw _s0, _s17, _s18, _s19, _s20, _s21, _s22, _s23, _s24, 
14933  635F 1B 65 2F 65 
14933  6363 42 65 51 65 
14933  6367 5E 65 6D 65 
14933  636B 7C 65 
14934  636D 00 00 00 00 .fill 18, 0
14934  6371 00 00 00 00 
14934  6375 00 00 00 00 
14934  6379 00 00 00 00 
14934  637D 00 00 
14935  637F 44 61 6D 61 _dcr_1_data: .db "Damage Control report:", 0
14935  6383 67 65 20 43 
14935  6387 6F 6E 74 72 
14935  638B 6F 6C 20 72 
14935  638F 65 70 6F 72 
14935  6393 74 3A 00 
14936  6396 7F 63       _dcr_1: .dw _dcr_1_data
14937  6398             _plural_2_data: 
14938  6398 00 00       .db $0,$0,
14939  639A             _plural_data: 
14940  639A 69 73 00    .db $69,$73,$0,
14941  639D 00          .fill 1, 0
14942  639E             _warpmax_data: 
14943  639E 08          .db $8,
14944  639F 00 00 00    .fill 3, 0
14945  63A2 2D 2D 2D 2D _srs_1_data: .db "------------------------", 0
14945  63A6 2D 2D 2D 2D 
14945  63AA 2D 2D 2D 2D 
14945  63AE 2D 2D 2D 2D 
14945  63B2 2D 2D 2D 2D 
14945  63B6 2D 2D 2D 2D 
14945  63BA 00 
14946  63BB A2 63       _srs_1: .dw _srs_1_data
14947  63BD             _tilestr_data: 
14948  63BD 8D 65 91 65 .dw _s25, _s26, _s27, _s28, _s29, 
14948  63C1 95 65 99 65 
14948  63C5 9D 65 
14949  63C7 00 00 00 00 .fill 10, 0
14949  63CB 00 00 00 00 
14949  63CF 00 00 
14950  63D1 2D 2D 2D 2D _lrs_1_data: .db "-------------------\n", 0
14950  63D5 2D 2D 2D 2D 
14950  63D9 2D 2D 2D 2D 
14950  63DD 2D 2D 2D 2D 
14950  63E1 2D 2D 2D 0A 
14950  63E5 00 
14951  63E6 D1 63       _lrs_1: .dw _lrs_1_data
14952  63E8 20 20 20 2D _gr_1_data: .db "   ----- ----- ----- ----- ----- ----- ----- -----\n", 0
14952  63EC 2D 2D 2D 2D 
14952  63F0 20 2D 2D 2D 
14952  63F4 2D 2D 20 2D 
14952  63F8 2D 2D 2D 2D 
14952  63FC 20 2D 2D 2D 
14952  6400 2D 2D 20 2D 
14952  6404 2D 2D 2D 2D 
14952  6408 20 2D 2D 2D 
14952  640C 2D 2D 20 2D 
14952  6410 2D 2D 2D 2D 
14952  6414 20 2D 2D 2D 
14952  6418 2D 2D 0A 00 
14953  641C E8 63       _gr_1: .dw _gr_1_data
14954  641E 73 00       _str_s_data: .db "s", 0
14955  6420 1E 64       _str_s: .dw _str_s_data
14956  6422 20 20 2D 2D _gm_1_data: .db "  ----- ----- ----- ----- ----- ----- ----- -----\n", 0
14956  6426 2D 2D 2D 20 
14956  642A 2D 2D 2D 2D 
14956  642E 2D 20 2D 2D 
14956  6432 2D 2D 2D 20 
14956  6436 2D 2D 2D 2D 
14956  643A 2D 20 2D 2D 
14956  643E 2D 2D 2D 20 
14956  6442 2D 2D 2D 2D 
14956  6446 2D 20 2D 2D 
14956  644A 2D 2D 2D 20 
14956  644E 2D 2D 2D 2D 
14956  6452 2D 0A 00 
14957  6455 22 64       _gm_1: .dw _gm_1_data
14958  6457 20 20 44 49 _dist_1_data: .db "  DISTANCE = \n\n", 0
14958  645B 53 54 41 4E 
14958  645F 43 45 20 3D 
14958  6463 20 0A 0A 00 
14959  6467 57 64       _dist_1: .dw _dist_1_data
14960  6469 00 00 00 00 st_print100_buf_dt: .fill 16, 0
14960  646D 00 00 00 00 
14960  6471 00 00 00 00 
14960  6475 00 00 00 00 
14961  6479             st_quadrant_name_sect_name_dt: 
14962  6479 8F 64 A3 78 .dw _s0, _s172, _s173, _s174, _s175, 
14962  647D A6 78 AA 78 
14962  6481 AF 78 
14963  6483 00 00 00 00 .fill 10, 0
14963  6487 00 00 00 00 
14963  648B 00 00 
14964  648D 79 64       st_quadrant_name_sect_name: .dw st_quadrant_name_sect_name_dt
14965  648F 00          _s0: .db "", 0
14966  6490 41 6E 74 61 _s1: .db "Antares", 0
14966  6494 72 65 73 00 
14967  6498 52 69 67 65 _s2: .db "Rigel", 0
14967  649C 6C 00 
14968  649E 50 72 6F 63 _s3: .db "Procyon", 0
14968  64A2 79 6F 6E 00 
14969  64A6 56 65 67 61 _s4: .db "Vega", 0
14969  64AA 00 
14970  64AB 43 61 6E 6F _s5: .db "Canopus", 0
14970  64AF 70 75 73 00 
14971  64B3 41 6C 74 61 _s6: .db "Altair", 0
14971  64B7 69 72 00 
14972  64BA 53 61 67 69 _s7: .db "Sagittarius", 0
14972  64BE 74 74 61 72 
14972  64C2 69 75 73 00 
14973  64C6 50 6F 6C 6C _s8: .db "Pollux", 0
14973  64CA 75 78 00 
14974  64CD 53 69 72 69 _s9: .db "Sirius", 0
14974  64D1 75 73 00 
14975  64D4 44 65 6E 65 _s10: .db "Deneb", 0
14975  64D8 62 00 
14976  64DA 43 61 70 65 _s11: .db "Capella", 0
14976  64DE 6C 6C 61 00 
14977  64E2 42 65 74 65 _s12: .db "Betelgeuse", 0
14977  64E6 6C 67 65 75 
14977  64EA 73 65 00 
14978  64ED 41 6C 64 65 _s13: .db "Aldebaran", 0
14978  64F1 62 61 72 61 
14978  64F5 6E 00 
14979  64F7 52 65 67 75 _s14: .db "Regulus", 0
14979  64FB 6C 75 73 00 
14980  64FF 41 72 63 74 _s15: .db "Arcturus", 0
14980  6503 75 72 75 73 
14980  6507 00 
14981  6508 53 70 69 63 _s16: .db "Spica", 0
14981  650C 61 00 
14982  650E 57 61 72 70 _s17: .db "Warp engines", 0
14982  6512 20 65 6E 67 
14982  6516 69 6E 65 73 
14982  651A 00 
14983  651B 53 68 6F 72 _s18: .db "Short range sensors", 0
14983  651F 74 20 72 61 
14983  6523 6E 67 65 20 
14983  6527 73 65 6E 73 
14983  652B 6F 72 73 00 
14984  652F 4C 6F 6E 67 _s19: .db "Long range sensors", 0
14984  6533 20 72 61 6E 
14984  6537 67 65 20 73 
14984  653B 65 6E 73 6F 
14984  653F 72 73 00 
14985  6542 50 68 61 73 _s20: .db "Phaser control", 0
14985  6546 65 72 20 63 
14985  654A 6F 6E 74 72 
14985  654E 6F 6C 00 
14986  6551 50 68 6F 74 _s21: .db "Photon tubes", 0
14986  6555 6F 6E 20 74 
14986  6559 75 62 65 73 
14986  655D 00 
14987  655E 44 61 6D 61 _s22: .db "Damage control", 0
14987  6562 67 65 20 63 
14987  6566 6F 6E 74 72 
14987  656A 6F 6C 00 
14988  656D 53 68 69 65 _s23: .db "Shield control", 0
14988  6571 6C 64 20 63 
14988  6575 6F 6E 74 72 
14988  6579 6F 6C 00 
14989  657C 4C 69 62 72 _s24: .db "Library computer", 0
14989  6580 61 72 79 20 
14989  6584 63 6F 6D 70 
14989  6588 75 74 65 72 
14989  658C 00 
14990  658D 20 20 20 00 _s25: .db "   ", 0
14991  6591 20 2A 20 00 _s26: .db " * ", 0
14992  6595 3E 21 3C 00 _s27: .db ">!<", 0
14993  6599 2B 4B 2B 00 _s28: .db "+K+", 0
14994  659D 3C 2A 3E 00 _s29: .db "<*>", 0
14995  65A1 55 6E 65 78 _s30: .db "Unexpected format in printf.", 0
14995  65A5 70 65 63 74 
14995  65A9 65 64 20 66 
14995  65AD 6F 72 6D 61 
14995  65B1 74 20 69 6E 
14995  65B5 20 70 72 69 
14995  65B9 6E 74 66 2E 
14995  65BD 00 
14996  65BE 45 72 72 6F _s31: .db "Error: Unknown argument type.\n", 0
14996  65C2 72 3A 20 55 
14996  65C6 6E 6B 6E 6F 
14996  65CA 77 6E 20 61 
14996  65CE 72 67 75 6D 
14996  65D2 65 6E 74 20 
14996  65D6 74 79 70 65 
14996  65DA 2E 0A 00 
14997  65DD 1B 5B 32 4A _s32: .db "\033[2J\033[H", 0
14997  65E1 1B 5B 48 00 
14998  65E5 61 72 65 00 _s33: .db "are", 0
14999  65E9 69 73 00    _s34: .db "is", 0
15000  65EC 25 73 20 25 _s35: .db "%s %s inoperable.\n", 0
15000  65F0 73 20 69 6E 
15000  65F4 6F 70 65 72 
15000  65F8 61 62 6C 65 
15000  65FC 2E 0A 00 
15001  65FF 73 74 61 72 _s36: .db "startrek.intro", 0
15001  6603 74 72 65 6B 
15001  6607 2E 69 6E 74 
15001  660B 72 6F 00 
15002  660E 73 74 61 72 _s37: .db "startrek.doc", 0
15002  6612 74 72 65 6B 
15002  6616 2E 64 6F 63 
15002  661A 00 
15003  661B 73 74 61 72 _s38: .db "startrek.logo", 0
15003  661F 74 72 65 6B 
15003  6623 2E 6C 6F 67 
15003  6627 6F 00 
15004  6629 73 74 61 72 _s39: .db "startrek.fatal", 0
15004  662D 74 72 65 6B 
15004  6631 2E 66 61 74 
15004  6635 61 6C 00 
15005  6638 43 6F 6D 6D _s40: .db "Command? ", 0
15005  663C 61 6E 64 3F 
15005  6640 20 00 
15006  6642 6E 61 76 00 _s41: .db "nav", 0
15007  6646 73 72 73 00 _s42: .db "srs", 0
15008  664A 6C 72 73 00 _s43: .db "lrs", 0
15009  664E 70 68 61 00 _s44: .db "pha", 0
15010  6652 74 6F 72 00 _s45: .db "tor", 0
15011  6656 73 68 69 00 _s46: .db "shi", 0
15012  665A 64 61 6D 00 _s47: .db "dam", 0
15013  665E 63 6F 6D 00 _s48: .db "com", 0
15014  6662 78 78 78 00 _s49: .db "xxx", 0
15015  6666 45 6E 74 65 _s50: .db "Enter one of the following:\n", 0
15015  666A 72 20 6F 6E 
15015  666E 65 20 6F 66 
15015  6672 20 74 68 65 
15015  6676 20 66 6F 6C 
15015  667A 6C 6F 77 69 
15015  667E 6E 67 3A 0A 
15015  6682 00 
15016  6683 20 20 6E 61 _s51: .db "  nav - To Set Course", 0
15016  6687 76 20 2D 20 
15016  668B 54 6F 20 53 
15016  668F 65 74 20 43 
15016  6693 6F 75 72 73 
15016  6697 65 00 
15017  6699 20 20 73 72 _s52: .db "  srs - Short Range Sensors", 0
15017  669D 73 20 2D 20 
15017  66A1 53 68 6F 72 
15017  66A5 74 20 52 61 
15017  66A9 6E 67 65 20 
15017  66AD 53 65 6E 73 
15017  66B1 6F 72 73 00 
15018  66B5 20 20 6C 72 _s53: .db "  lrs - Long Range Sensors", 0
15018  66B9 73 20 2D 20 
15018  66BD 4C 6F 6E 67 
15018  66C1 20 52 61 6E 
15018  66C5 67 65 20 53 
15018  66C9 65 6E 73 6F 
15018  66CD 72 73 00 
15019  66D0 20 20 70 68 _s54: .db "  pha - Phasers", 0
15019  66D4 61 20 2D 20 
15019  66D8 50 68 61 73 
15019  66DC 65 72 73 00 
15020  66E0 20 20 74 6F _s55: .db "  tor - Photon Torpedoes", 0
15020  66E4 72 20 2D 20 
15020  66E8 50 68 6F 74 
15020  66EC 6F 6E 20 54 
15020  66F0 6F 72 70 65 
15020  66F4 64 6F 65 73 
15020  66F8 00 
15021  66F9 20 20 73 68 _s56: .db "  shi - Shield Control", 0
15021  66FD 69 20 2D 20 
15021  6701 53 68 69 65 
15021  6705 6C 64 20 43 
15021  6709 6F 6E 74 72 
15021  670D 6F 6C 00 
15022  6710 20 20 64 61 _s57: .db "  dam - Damage Control", 0
15022  6714 6D 20 2D 20 
15022  6718 44 61 6D 61 
15022  671C 67 65 20 43 
15022  6720 6F 6E 74 72 
15022  6724 6F 6C 00 
15023  6727 20 20 63 6F _s58: .db "  com - Library Computer", 0
15023  672B 6D 20 2D 20 
15023  672F 4C 69 62 72 
15023  6733 61 72 79 20 
15023  6737 43 6F 6D 70 
15023  673B 75 74 65 72 
15023  673F 00 
15024  6740 20 20 78 78 _s59: .db "  xxx - Resign Command\n", 0
15024  6744 78 20 2D 20 
15024  6748 52 65 73 69 
15024  674C 67 6E 20 43 
15024  6750 6F 6D 6D 61 
15024  6754 6E 64 0A 00 
15025  6758 73 00       _s60: .db "s", 0
15026  675A 59 6F 75 72 _s61: .db "Your orders are as follows:\nDestroy the %d Klingon warships which have", 0
15026  675E 20 6F 72 64 
15026  6762 65 72 73 20 
15026  6766 61 72 65 20 
15026  676A 61 73 20 66 
15026  676E 6F 6C 6C 6F 
15026  6772 77 73 3A 0A 
15026  6776 44 65 73 74 
15026  677A 72 6F 79 20 
15026  677E 74 68 65 20 
15026  6782 25 64 20 4B 
15026  6786 6C 69 6E 67 
15026  678A 6F 6E 20 77 
15026  678E 61 72 73 68 
15026  6792 69 70 73 20 
15026  6796 77 68 69 63 
15026  679A 68 20 68 61 
15026  679E 76 65 00 
15027  67A1 69 6E 76 61 _s62: .db "invaded\n the galaxy before they can attack Federation Headquarters\n", 0
15027  67A5 64 65 64 0A 
15027  67A9 20 74 68 65 
15027  67AD 20 67 61 6C 
15027  67B1 61 78 79 20 
15027  67B5 62 65 66 6F 
15027  67B9 72 65 20 74 
15027  67BD 68 65 79 20 
15027  67C1 63 61 6E 20 
15027  67C5 61 74 74 61 
15027  67C9 63 6B 20 46 
15027  67CD 65 64 65 72 
15027  67D1 61 74 69 6F 
15027  67D5 6E 20 48 65 
15027  67D9 61 64 71 75 
15027  67DD 61 72 74 65 
15027  67E1 72 73 0A 00 
15028  67E5 20 6F 6E 20 _s63: .db " on stardate %u. This gives you %d days. There %s\n %d starbase%s in the galaxy", 0
15028  67E9 73 74 61 72 
15028  67ED 64 61 74 65 
15028  67F1 20 25 75 2E 
15028  67F5 20 54 68 69 
15028  67F9 73 20 67 69 
15028  67FD 76 65 73 20 
15028  6801 79 6F 75 20 
15028  6805 25 64 20 64 
15028  6809 61 79 73 2E 
15028  680D 20 54 68 65 
15028  6811 72 65 20 25 
15028  6815 73 0A 20 25 
15028  6819 64 20 73 74 
15028  681D 61 72 62 61 
15028  6821 73 65 25 73 
15028  6825 20 69 6E 20 
15028  6829 74 68 65 20 
15028  682D 67 61 6C 61 
15028  6831 78 79 00 
15029  6834 20 66 6F 72 _s64: .db " for resupplying your ship.\n\n Hit any key to accept command. ", 0
15029  6838 20 72 65 73 
15029  683C 75 70 70 6C 
15029  6840 79 69 6E 67 
15029  6844 20 79 6F 75 
15029  6848 72 20 73 68 
15029  684C 69 70 2E 0A 
15029  6850 0A 20 48 69 
15029  6854 74 20 61 6E 
15029  6858 79 20 6B 65 
15029  685C 79 20 74 6F 
15029  6860 20 61 63 63 
15029  6864 65 70 74 20 
15029  6868 63 6F 6D 6D 
15029  686C 61 6E 64 2E 
15029  6870 20 00 
15030  6872 4E 6F 77 20 _s65: .db "Now entering %s quadrant...\n\n", 0
15030  6876 65 6E 74 65 
15030  687A 72 69 6E 67 
15030  687E 20 25 73 20 
15030  6882 71 75 61 64 
15030  6886 72 61 6E 74 
15030  688A 2E 2E 2E 0A 
15030  688E 0A 00 
15031  6890 0A 59 6F 75 _s66: .db "\nYour mission begins with your starship located", 0
15031  6894 72 20 6D 69 
15031  6898 73 73 69 6F 
15031  689C 6E 20 62 65 
15031  68A0 67 69 6E 73 
15031  68A4 20 77 69 74 
15031  68A8 68 20 79 6F 
15031  68AC 75 72 20 73 
15031  68B0 74 61 72 73 
15031  68B4 68 69 70 20 
15031  68B8 6C 6F 63 61 
15031  68BC 74 65 64 00 
15032  68C0 69 6E 20 74 _s67: .db "in the galactic quadrant %s.\n\n", 0
15032  68C4 68 65 20 67 
15032  68C8 61 6C 61 63 
15032  68CC 74 69 63 20 
15032  68D0 71 75 61 64 
15032  68D4 72 61 6E 74 
15032  68D8 20 25 73 2E 
15032  68DC 0A 0A 00 
15033  68DF 43 6F 6D 62 _s68: .db "Combat Area  Condition Red\n", 0
15033  68E3 61 74 20 41 
15033  68E7 72 65 61 20 
15033  68EB 20 43 6F 6E 
15033  68EF 64 69 74 69 
15033  68F3 6F 6E 20 52 
15033  68F7 65 64 0A 00 
15034  68FB 53 68 69 65 _s69: .db "Shields Dangerously Low\n", 0
15034  68FF 6C 64 73 20 
15034  6903 44 61 6E 67 
15034  6907 65 72 6F 75 
15034  690B 73 6C 79 20 
15034  690F 4C 6F 77 0A 
15034  6913 00 
15035  6914 43 6F 75 72 _s70: .db "Course (0-9): ", 0
15035  6918 73 65 20 28 
15035  691C 30 2D 39 29 
15035  6920 3A 20 00 
15036  6923 4C 74 2E 20 _s71: .db "Lt. Sulu%s", 0
15036  6927 53 75 6C 75 
15036  692B 25 73 00 
15037  692E 30 2E 32 00 _s72: .db "0.2", 0
15038  6932 57 61 72 70 _s73: .db "Warp Factor (0-%s): ", 0
15038  6936 20 46 61 63 
15038  693A 74 6F 72 20 
15038  693E 28 30 2D 25 
15038  6942 73 29 3A 20 
15038  6946 00 
15039  6947 57 61 72 70 _s74: .db "Warp Engines are damaged. Maximum speed = Warp 0.2.\n\n", 0
15039  694B 20 45 6E 67 
15039  694F 69 6E 65 73 
15039  6953 20 61 72 65 
15039  6957 20 64 61 6D 
15039  695B 61 67 65 64 
15039  695F 2E 20 4D 61 
15039  6963 78 69 6D 75 
15039  6967 6D 20 73 70 
15039  696B 65 65 64 20 
15039  696F 3D 20 57 61 
15039  6973 72 70 20 30 
15039  6977 2E 32 2E 0A 
15039  697B 0A 00 
15040  697D 43 68 69 65 _s75: .db "Chief Engineer Scott reports:\n  The engines wont take warp %s!\n\n", 0
15040  6981 66 20 45 6E 
15040  6985 67 69 6E 65 
15040  6989 65 72 20 53 
15040  698D 63 6F 74 74 
15040  6991 20 72 65 70 
15040  6995 6F 72 74 73 
15040  6999 3A 0A 20 20 
15040  699D 54 68 65 20 
15040  69A1 65 6E 67 69 
15040  69A5 6E 65 73 20 
15040  69A9 77 6F 6E 74 
15040  69AD 20 74 61 6B 
15040  69B1 65 20 77 61 
15040  69B5 72 70 20 25 
15040  69B9 73 21 0A 0A 
15040  69BD 00 
15041  69BE 45 6E 67 69 _s76: .db "Engineering reports:\n  Insufficient energy available for maneuvering at warp %s!\n\n", 0
15041  69C2 6E 65 65 72 
15041  69C6 69 6E 67 20 
15041  69CA 72 65 70 6F 
15041  69CE 72 74 73 3A 
15041  69D2 0A 20 20 49 
15041  69D6 6E 73 75 66 
15041  69DA 66 69 63 69 
15041  69DE 65 6E 74 20 
15041  69E2 65 6E 65 72 
15041  69E6 67 79 20 61 
15041  69EA 76 61 69 6C 
15041  69EE 61 62 6C 65 
15041  69F2 20 66 6F 72 
15041  69F6 20 6D 61 6E 
15041  69FA 65 75 76 65 
15041  69FE 72 69 6E 67 
15041  6A02 20 61 74 20 
15041  6A06 77 61 72 70 
15041  6A0A 20 25 73 21 
15041  6A0E 0A 0A 00 
15042  6A11 44 65 66 6C _s77: .db "Deflector Control Room acknowledges:\n  %d units of energy presently deployed to shields.\n", 0
15042  6A15 65 63 74 6F 
15042  6A19 72 20 43 6F 
15042  6A1D 6E 74 72 6F 
15042  6A21 6C 20 52 6F 
15042  6A25 6F 6D 20 61 
15042  6A29 63 6B 6E 6F 
15042  6A2D 77 6C 65 64 
15042  6A31 67 65 73 3A 
15042  6A35 0A 20 20 25 
15042  6A39 64 20 75 6E 
15042  6A3D 69 74 73 20 
15042  6A41 6F 66 20 65 
15042  6A45 6E 65 72 67 
15042  6A49 79 20 70 72 
15042  6A4D 65 73 65 6E 
15042  6A51 74 6C 79 20 
15042  6A55 64 65 70 6C 
15042  6A59 6F 79 65 64 
15042  6A5D 20 74 6F 20 
15042  6A61 73 68 69 65 
15042  6A65 6C 64 73 2E 
15042  6A69 0A 00 
15043  6A6B 4C 54 2E 20 _s78: .db "LT. Uhura reports:\n Message from Starfleet Command:\n\n Permission to attempt crossing of galactic perimeter\n is hereby *denie"
15043  6A6F 55 68 75 72 
15043  6A73 61 20 72 65 
15043  6A77 70 6F 72 74 
15043  6A7B 73 3A 0A 20 
15043  6A7F 4D 65 73 73 
15043  6A83 61 67 65 20 
15043  6A87 66 72 6F 6D 
15043  6A8B 20 53 74 61 
15043  6A8F 72 66 6C 65 
15043  6A93 65 74 20 43 
15043  6A97 6F 6D 6D 61 
15043  6A9B 6E 64 3A 0A 
15043  6A9F 0A 20 50 65 
15043  6AA3 72 6D 69 73 
15043  6AA7 73 69 6F 6E 
15043  6AAB 20 74 6F 20 
15043  6AAF 61 74 74 65 
15043  6AB3 6D 70 74 20 
15043  6AB7 63 72 6F 73 
15043  6ABB 73 69 6E 67 
15043  6ABF 20 6F 66 20 
15043  6AC3 67 61 6C 61 
15043  6AC7 63 74 69 63 
15043  6ACB 20 70 65 72 
15043  6ACF 69 6D 65 74 
15043  6AD3 65 72 0A 20 
15043  6AD7 69 73 20 68 
15043  6ADB 65 72 65 62 
15043  6ADF 79 20 2A 64 
15043  6AE3 65 6E 69 65 
15044  6AE7 64 2A 2E 20 .db "d*. Shut down your engines.\n\n Chief Engineer Scott reports:\n Warp Engines shut down at sector %d, %d of quadrant %d, %d.\n\n", 0
15044  6AEB 53 68 75 74 
15044  6AEF 20 64 6F 77 
15044  6AF3 6E 20 79 6F 
15044  6AF7 75 72 20 65 
15044  6AFB 6E 67 69 6E 
15044  6AFF 65 73 2E 0A 
15044  6B03 0A 20 43 68 
15044  6B07 69 65 66 20 
15044  6B0B 45 6E 67 69 
15044  6B0F 6E 65 65 72 
15044  6B13 20 53 63 6F 
15044  6B17 74 74 20 72 
15044  6B1B 65 70 6F 72 
15044  6B1F 74 73 3A 0A 
15044  6B23 20 57 61 72 
15044  6B27 70 20 45 6E 
15044  6B2B 67 69 6E 65 
15044  6B2F 73 20 73 68 
15044  6B33 75 74 20 64 
15044  6B37 6F 77 6E 20 
15044  6B3B 61 74 20 73 
15044  6B3F 65 63 74 6F 
15044  6B43 72 20 25 64 
15044  6B47 2C 20 25 64 
15044  6B4B 20 6F 66 20 
15044  6B4F 71 75 61 64 
15044  6B53 72 61 6E 74 
15044  6B57 20 25 64 2C 
15044  6B5B 20 25 64 2E 
15044  6B5F 0A 0A 00 
15045  6B62 57 61 72 70 _s79: .db "Warp Engines shut down at sector %d, %d due to bad navigation.\n\n", 0
15045  6B66 20 45 6E 67 
15045  6B6A 69 6E 65 73 
15045  6B6E 20 73 68 75 
15045  6B72 74 20 64 6F 
15045  6B76 77 6E 20 61 
15045  6B7A 74 20 73 65 
15045  6B7E 63 74 6F 72 
15045  6B82 20 25 64 2C 
15045  6B86 20 25 64 20 
15045  6B8A 64 75 65 20 
15045  6B8E 74 6F 20 62 
15045  6B92 61 64 20 6E 
15045  6B96 61 76 69 67 
15045  6B9A 61 74 69 6F 
15045  6B9E 6E 2E 0A 0A 
15045  6BA2 00 
15046  6BA3 53 68 69 65 _s80: .db "Shield Control supplies energy to complete maneuver.\n", 0
15046  6BA7 6C 64 20 43 
15046  6BAB 6F 6E 74 72 
15046  6BAF 6F 6C 20 73 
15046  6BB3 75 70 70 6C 
15046  6BB7 69 65 73 20 
15046  6BBB 65 6E 65 72 
15046  6BBF 67 79 20 74 
15046  6BC3 6F 20 63 6F 
15046  6BC7 6D 70 6C 65 
15046  6BCB 74 65 20 6D 
15046  6BCF 61 6E 65 75 
15046  6BD3 76 65 72 2E 
15046  6BD7 0A 00 
15047  6BD9 47 52 45 45 _s81: .db "GREEN", 0
15047  6BDD 4E 00 
15048  6BDF 59 45 4C 4C _s82: .db "YELLOW", 0
15048  6BE3 4F 57 00 
15049  6BE6 2A 52 45 44 _s83: .db "*RED*", 0
15049  6BEA 2A 00 
15050  6BEC 44 4F 43 4B _s84: .db "DOCKED", 0
15050  6BF0 45 44 00 
15051  6BF3 53 68 69 65 _s85: .db "Shields dropped for docking purposes.", 0
15051  6BF7 6C 64 73 20 
15051  6BFB 64 72 6F 70 
15051  6BFF 70 65 64 20 
15051  6C03 66 6F 72 20 
15051  6C07 64 6F 63 6B 
15051  6C0B 69 6E 67 20 
15051  6C0F 70 75 72 70 
15051  6C13 6F 73 65 73 
15051  6C17 2E 00 
15052  6C19 0A 2A 2A 2A _s86: .db "\n*** Short Range Sensors are out ***", 0
15052  6C1D 20 53 68 6F 
15052  6C21 72 74 20 52 
15052  6C25 61 6E 67 65 
15052  6C29 20 53 65 6E 
15052  6C2D 73 6F 72 73 
15052  6C31 20 61 72 65 
15052  6C35 20 6F 75 74 
15052  6C39 20 2A 2A 2A 
15052  6C3D 00 
15053  6C3E 20 20 20 20 _s87: .db "    Stardate            %d\n", 0
15053  6C42 53 74 61 72 
15053  6C46 64 61 74 65 
15053  6C4A 20 20 20 20 
15053  6C4E 20 20 20 20 
15053  6C52 20 20 20 20 
15053  6C56 25 64 0A 00 
15054  6C5A 20 20 20 20 _s88: .db "    Condition           %s\n", 0
15054  6C5E 43 6F 6E 64 
15054  6C62 69 74 69 6F 
15054  6C66 6E 20 20 20 
15054  6C6A 20 20 20 20 
15054  6C6E 20 20 20 20 
15054  6C72 25 73 0A 00 
15055  6C76 20 20 20 20 _s89: .db "    Quadrant            %d, %d\n", 0
15055  6C7A 51 75 61 64 
15055  6C7E 72 61 6E 74 
15055  6C82 20 20 20 20 
15055  6C86 20 20 20 20 
15055  6C8A 20 20 20 20 
15055  6C8E 25 64 2C 20 
15055  6C92 25 64 0A 00 
15056  6C96 20 20 20 20 _s90: .db "    Sector              %d, %d\n", 0
15056  6C9A 53 65 63 74 
15056  6C9E 6F 72 20 20 
15056  6CA2 20 20 20 20 
15056  6CA6 20 20 20 20 
15056  6CAA 20 20 20 20 
15056  6CAE 25 64 2C 20 
15056  6CB2 25 64 0A 00 
15057  6CB6 20 20 20 20 _s91: .db "    Photon Torpedoes    %d\n", 0
15057  6CBA 50 68 6F 74 
15057  6CBE 6F 6E 20 54 
15057  6CC2 6F 72 70 65 
15057  6CC6 64 6F 65 73 
15057  6CCA 20 20 20 20 
15057  6CCE 25 64 0A 00 
15058  6CD2 20 20 20 20 _s92: .db "    Total Energy        %d\n", 0
15058  6CD6 54 6F 74 61 
15058  6CDA 6C 20 45 6E 
15058  6CDE 65 72 67 79 
15058  6CE2 20 20 20 20 
15058  6CE6 20 20 20 20 
15058  6CEA 25 64 0A 00 
15059  6CEE 20 20 20 20 _s93: .db "    Shields             %d\n", 0
15059  6CF2 53 68 69 65 
15059  6CF6 6C 64 73 20 
15059  6CFA 20 20 20 20 
15059  6CFE 20 20 20 20 
15059  6D02 20 20 20 20 
15059  6D06 25 64 0A 00 
15060  6D0A 20 20 20 20 _s94: .db "    Klingons Remaining  %d\n", 0
15060  6D0E 4B 6C 69 6E 
15060  6D12 67 6F 6E 73 
15060  6D16 20 52 65 6D 
15060  6D1A 61 69 6E 69 
15060  6D1E 6E 67 20 20 
15060  6D22 25 64 0A 00 
15061  6D26 4C 6F 6E 67 _s95: .db "Long Range Scan for Quadrant %d, %d\n\n", 0
15061  6D2A 20 52 61 6E 
15061  6D2E 67 65 20 53 
15061  6D32 63 61 6E 20 
15061  6D36 66 6F 72 20 
15061  6D3A 51 75 61 64 
15061  6D3E 72 61 6E 74 
15061  6D42 20 25 64 2C 
15061  6D46 20 25 64 0A 
15061  6D4A 0A 00 
15062  6D4C 25 73 3A 00 _s96: .db "%s:", 0
15063  6D50 2A 2A 2A 00 _s97: .db "***", 0
15064  6D54 20 3A 00    _s98: .db " :", 0
15065  6D57 25 73 0A 00 _s99: .db "%s\n", 0
15066  6D5B 53 63 69 65 _s100: .db "Science Officer Spock reports:\n  'Sensors show no enemy ships in this quadrant'\n", 0
15066  6D5F 6E 63 65 20 
15066  6D63 4F 66 66 69 
15066  6D67 63 65 72 20 
15066  6D6B 53 70 6F 63 
15066  6D6F 6B 20 72 65 
15066  6D73 70 6F 72 74 
15066  6D77 73 3A 0A 20 
15066  6D7B 20 27 53 65 
15066  6D7F 6E 73 6F 72 
15066  6D83 73 20 73 68 
15066  6D87 6F 77 20 6E 
15066  6D8B 6F 20 65 6E 
15066  6D8F 65 6D 79 20 
15066  6D93 73 68 69 70 
15066  6D97 73 20 69 6E 
15066  6D9B 20 74 68 69 
15066  6D9F 73 20 71 75 
15066  6DA3 61 64 72 61 
15066  6DA7 6E 74 27 0A 
15066  6DAB 00 
15067  6DAC 43 6F 6D 70 _s101: .db "Computer failure hampers accuracy.", 0
15067  6DB0 75 74 65 72 
15067  6DB4 20 66 61 69 
15067  6DB8 6C 75 72 65 
15067  6DBC 20 68 61 6D 
15067  6DC0 70 65 72 73 
15067  6DC4 20 61 63 63 
15067  6DC8 75 72 61 63 
15067  6DCC 79 2E 00 
15068  6DCF 50 68 61 73 _s102: .db "Phasers locked on target;\n Energy available = %d units\n\n Number of units to fire: ", 0
15068  6DD3 65 72 73 20 
15068  6DD7 6C 6F 63 6B 
15068  6DDB 65 64 20 6F 
15068  6DDF 6E 20 74 61 
15068  6DE3 72 67 65 74 
15068  6DE7 3B 0A 20 45 
15068  6DEB 6E 65 72 67 
15068  6DEF 79 20 61 76 
15068  6DF3 61 69 6C 61 
15068  6DF7 62 6C 65 20 
15068  6DFB 3D 20 25 64 
15068  6DFF 20 75 6E 69 
15068  6E03 74 73 0A 0A 
15068  6E07 20 4E 75 6D 
15068  6E0B 62 65 72 20 
15068  6E0F 6F 66 20 75 
15068  6E13 6E 69 74 73 
15068  6E17 20 74 6F 20 
15068  6E1B 66 69 72 65 
15068  6E1F 3A 20 00 
15069  6E22 4E 6F 74 20 _s103: .db "Not enough energy available.\n", 0
15069  6E26 65 6E 6F 75 
15069  6E2A 67 68 20 65 
15069  6E2E 6E 65 72 67 
15069  6E32 79 20 61 76 
15069  6E36 61 69 6C 61 
15069  6E3A 62 6C 65 2E 
15069  6E3E 0A 00 
15070  6E40 53 65 6E 73 _s104: .db "Sensors show no damage to enemy at %d, %d\n\n", 0
15070  6E44 6F 72 73 20 
15070  6E48 73 68 6F 77 
15070  6E4C 20 6E 6F 20 
15070  6E50 64 61 6D 61 
15070  6E54 67 65 20 74 
15070  6E58 6F 20 65 6E 
15070  6E5C 65 6D 79 20 
15070  6E60 61 74 20 25 
15070  6E64 64 2C 20 25 
15070  6E68 64 0A 0A 00 
15071  6E6C 25 64 20 75 _s105: .db "%d unit hit on Klingon at sector %d, %d\n", 0
15071  6E70 6E 69 74 20 
15071  6E74 68 69 74 20 
15071  6E78 6F 6E 20 4B 
15071  6E7C 6C 69 6E 67 
15071  6E80 6F 6E 20 61 
15071  6E84 74 20 73 65 
15071  6E88 63 74 6F 72 
15071  6E8C 20 25 64 2C 
15071  6E90 20 25 64 0A 
15071  6E94 00 
15072  6E95 2A 2A 2A 20 _s106: .db "*** Klingon Destroyed ***\n", 0
15072  6E99 4B 6C 69 6E 
15072  6E9D 67 6F 6E 20 
15072  6EA1 44 65 73 74 
15072  6EA5 72 6F 79 65 
15072  6EA9 64 20 2A 2A 
15072  6EAD 2A 0A 00 
15073  6EB0 20 20 20 28 _s107: .db "   (Sensors show %d units remaining.)\n\n", 0
15073  6EB4 53 65 6E 73 
15073  6EB8 6F 72 73 20 
15073  6EBC 73 68 6F 77 
15073  6EC0 20 25 64 20 
15073  6EC4 75 6E 69 74 
15073  6EC8 73 20 72 65 
15073  6ECC 6D 61 69 6E 
15073  6ED0 69 6E 67 2E 
15073  6ED4 29 0A 0A 00 
15074  6ED8 41 6C 6C 20 _s108: .db "All photon torpedoes expended", 0
15074  6EDC 70 68 6F 74 
15074  6EE0 6F 6E 20 74 
15074  6EE4 6F 72 70 65 
15074  6EE8 64 6F 65 73 
15074  6EEC 20 65 78 70 
15074  6EF0 65 6E 64 65 
15074  6EF4 64 00 
15075  6EF6 45 6E 73 69 _s109: .db "Ensign Chekov%s", 0
15075  6EFA 67 6E 20 43 
15075  6EFE 68 65 6B 6F 
15075  6F02 76 25 73 00 
15076  6F06 54 6F 72 70 _s110: .db "Torpedo Track:", 0
15076  6F0A 65 64 6F 20 
15076  6F0E 54 72 61 63 
15076  6F12 6B 3A 00 
15077  6F15 20 20 20 20 _s111: .db "    %d, %d\n", 0
15077  6F19 25 64 2C 20 
15077  6F1D 25 64 0A 00 
15078  6F21 54 6F 72 70 _s112: .db "Torpedo Missed\n", 0
15078  6F25 65 64 6F 20 
15078  6F29 4D 69 73 73 
15078  6F2D 65 64 0A 00 
15079  6F31 53 74 61 72 _s113: .db "Star at %d, %d absorbed torpedo energy.\n\n", 0
15079  6F35 20 61 74 20 
15079  6F39 25 64 2C 20 
15079  6F3D 25 64 20 61 
15079  6F41 62 73 6F 72 
15079  6F45 62 65 64 20 
15079  6F49 74 6F 72 70 
15079  6F4D 65 64 6F 20 
15079  6F51 65 6E 65 72 
15079  6F55 67 79 2E 0A 
15079  6F59 0A 00 
15080  6F5B 2A 2A 2A 20 _s114: .db "*** Starbase Destroyed ***", 0
15080  6F5F 53 74 61 72 
15080  6F63 62 61 73 65 
15080  6F67 20 44 65 73 
15080  6F6B 74 72 6F 79 
15080  6F6F 65 64 20 2A 
15080  6F73 2A 2A 00 
15081  6F76 54 68 61 74 _s115: .db "That does it, Captain!!", 0
15081  6F7A 20 64 6F 65 
15081  6F7E 73 20 69 74 
15081  6F82 2C 20 43 61 
15081  6F86 70 74 61 69 
15081  6F8A 6E 21 21 00 
15082  6F8E 59 6F 75 20 _s116: .db "You are hereby relieved of command\n", 0
15082  6F92 61 72 65 20 
15082  6F96 68 65 72 65 
15082  6F9A 62 79 20 72 
15082  6F9E 65 6C 69 65 
15082  6FA2 76 65 64 20 
15082  6FA6 6F 66 20 63 
15082  6FAA 6F 6D 6D 61 
15082  6FAE 6E 64 0A 00 
15083  6FB2 61 6E 64 20 _s117: .db "and sentenced to 99 stardates of hard", 0
15083  6FB6 73 65 6E 74 
15083  6FBA 65 6E 63 65 
15083  6FBE 64 20 74 6F 
15083  6FC2 20 39 39 20 
15083  6FC6 73 74 61 72 
15083  6FCA 64 61 74 65 
15083  6FCE 73 20 6F 66 
15083  6FD2 20 68 61 72 
15083  6FD6 64 00 
15084  6FD8 6C 61 62 6F _s118: .db "labor on Cygnus 12!!\n", 0
15084  6FDC 72 20 6F 6E 
15084  6FE0 20 43 79 67 
15084  6FE4 6E 75 73 20 
15084  6FE8 31 32 21 21 
15084  6FEC 0A 00 
15085  6FEE 53 74 61 72 _s119: .db "Starfleet Command reviewing your record to consider\n court martial!\n", 0
15085  6FF2 66 6C 65 65 
15085  6FF6 74 20 43 6F 
15085  6FFA 6D 6D 61 6E 
15085  6FFE 64 20 72 65 
15085  7002 76 69 65 77 
15085  7006 69 6E 67 20 
15085  700A 79 6F 75 72 
15085  700E 20 72 65 63 
15085  7012 6F 72 64 20 
15085  7016 74 6F 20 63 
15085  701A 6F 6E 73 69 
15085  701E 64 65 72 0A 
15085  7022 20 63 6F 75 
15085  7026 72 74 20 6D 
15085  702A 61 72 74 69 
15085  702E 61 6C 21 0A 
15085  7032 00 
15086  7033 44 61 6D 61 _s120: .db "Damage Control report not available.", 0
15086  7037 67 65 20 43 
15086  703B 6F 6E 74 72 
15086  703F 6F 6C 20 72 
15086  7043 65 70 6F 72 
15086  7047 74 20 6E 6F 
15086  704B 74 20 61 76 
15086  704F 61 69 6C 61 
15086  7053 62 6C 65 2E 
15086  7057 00 
15087  7058 0A 54 65 63 _s121: .db "\nTechnicians standing by to effect repairs to your ship;\nEstimated time to repair: %s stardates.\n Will you authorize the repa"
15087  705C 68 6E 69 63 
15087  7060 69 61 6E 73 
15087  7064 20 73 74 61 
15087  7068 6E 64 69 6E 
15087  706C 67 20 62 79 
15087  7070 20 74 6F 20 
15087  7074 65 66 66 65 
15087  7078 63 74 20 72 
15087  707C 65 70 61 69 
15087  7080 72 73 20 74 
15087  7084 6F 20 79 6F 
15087  7088 75 72 20 73 
15087  708C 68 69 70 3B 
15087  7090 0A 45 73 74 
15087  7094 69 6D 61 74 
15087  7098 65 64 20 74 
15087  709C 69 6D 65 20 
15087  70A0 74 6F 20 72 
15087  70A4 65 70 61 69 
15087  70A8 72 3A 20 25 
15087  70AC 73 20 73 74 
15087  70B0 61 72 64 61 
15087  70B4 74 65 73 2E 
15087  70B8 0A 20 57 69 
15087  70BC 6C 6C 20 79 
15087  70C0 6F 75 20 61 
15087  70C4 75 74 68 6F 
15087  70C8 72 69 7A 65 
15087  70CC 20 74 68 65 
15087  70D0 20 72 65 70 
15087  70D4 61 
15088  70D5 69 72 20 6F .db "ir order (y/N)? ", 0
15088  70D9 72 64 65 72 
15088  70DD 20 28 79 2F 
15088  70E1 4E 29 3F 20 
15088  70E5 00 
15089  70E6 44 65 76 69 _s122: .db "Device            State of Repair", 0
15089  70EA 63 65 20 20 
15089  70EE 20 20 20 20 
15089  70F2 20 20 20 20 
15089  70F6 20 20 53 74 
15089  70FA 61 74 65 20 
15089  70FE 6F 66 20 52 
15089  7102 65 70 61 69 
15089  7106 72 00 
15090  7108 25 2D 32 35 _s123: .db "%-25s%6s\n", 0
15090  710C 73 25 36 73 
15090  7110 0A 00 
15091  7112 0A 00       _s124: .db "\n", 0
15092  7114 45 6E 65 72 _s125: .db "Energy available = %d\n\n Input number of units to shields: ", 0
15092  7118 67 79 20 61 
15092  711C 76 61 69 6C 
15092  7120 61 62 6C 65 
15092  7124 20 3D 20 25 
15092  7128 64 0A 0A 20 
15092  712C 49 6E 70 75 
15092  7130 74 20 6E 75 
15092  7134 6D 62 65 72 
15092  7138 20 6F 66 20 
15092  713C 75 6E 69 74 
15092  7140 73 20 74 6F 
15092  7144 20 73 68 69 
15092  7148 65 6C 64 73 
15092  714C 3A 20 00 
15093  714F 3C 53 68 69 _s126: .db "<Shields Unchanged>\n", 0
15093  7153 65 6C 64 73 
15093  7157 20 55 6E 63 
15093  715B 68 61 6E 67 
15093  715F 65 64 3E 0A 
15093  7163 00 
15094  7164 53 68 69 65 _s127: .db "Shield Control Reports:\n  This is not the Federation Treasury.", 0
15094  7168 6C 64 20 43 
15094  716C 6F 6E 74 72 
15094  7170 6F 6C 20 52 
15094  7174 65 70 6F 72 
15094  7178 74 73 3A 0A 
15094  717C 20 20 54 68 
15094  7180 69 73 20 69 
15094  7184 73 20 6E 6F 
15094  7188 74 20 74 68 
15094  718C 65 20 46 65 
15094  7190 64 65 72 61 
15094  7194 74 69 6F 6E 
15094  7198 20 54 72 65 
15094  719C 61 73 75 72 
15094  71A0 79 2E 00 
15095  71A3 44 65 66 6C _s128: .db "Deflector Control Room report:\n  Shields now at %d units per your command.\n\n", 0
15095  71A7 65 63 74 6F 
15095  71AB 72 20 43 6F 
15095  71AF 6E 74 72 6F 
15095  71B3 6C 20 52 6F 
15095  71B7 6F 6D 20 72 
15095  71BB 65 70 6F 72 
15095  71BF 74 3A 0A 20 
15095  71C3 20 53 68 69 
15095  71C7 65 6C 64 73 
15095  71CB 20 6E 6F 77 
15095  71CF 20 61 74 20 
15095  71D3 25 64 20 75 
15095  71D7 6E 69 74 73 
15095  71DB 20 70 65 72 
15095  71DF 20 79 6F 75 
15095  71E3 72 20 63 6F 
15095  71E7 6D 6D 61 6E 
15095  71EB 64 2E 0A 0A 
15095  71EF 00 
15096  71F0 43 6F 6D 70 _s129: .db "Computer active and awating command: ", 0
15096  71F4 75 74 65 72 
15096  71F8 20 61 63 74 
15096  71FC 69 76 65 20 
15096  7200 61 6E 64 20 
15096  7204 61 77 61 74 
15096  7208 69 6E 67 20 
15096  720C 63 6F 6D 6D 
15096  7210 61 6E 64 3A 
15096  7214 20 00 
15097  7216 46 75 6E 63 _s130: .db "Functions available from Library-Computer:\n\n", 0
15097  721A 74 69 6F 6E 
15097  721E 73 20 61 76 
15097  7222 61 69 6C 61 
15097  7226 62 6C 65 20 
15097  722A 66 72 6F 6D 
15097  722E 20 4C 69 62 
15097  7232 72 61 72 79 
15097  7236 2D 43 6F 6D 
15097  723A 70 75 74 65 
15097  723E 72 3A 0A 0A 
15097  7242 00 
15098  7243 20 20 20 30 _s131: .db "   0 = Cumulative Galactic Record\n", 0
15098  7247 20 3D 20 43 
15098  724B 75 6D 75 6C 
15098  724F 61 74 69 76 
15098  7253 65 20 47 61 
15098  7257 6C 61 63 74 
15098  725B 69 63 20 52 
15098  725F 65 63 6F 72 
15098  7263 64 0A 00 
15099  7266 20 20 20 31 _s132: .db "   1 = Status Report\n", 0
15099  726A 20 3D 20 53 
15099  726E 74 61 74 75 
15099  7272 73 20 52 65 
15099  7276 70 6F 72 74 
15099  727A 0A 00 
15100  727C 20 20 20 32 _s133: .db "   2 = Photon Torpedo Data\n", 0
15100  7280 20 3D 20 50 
15100  7284 68 6F 74 6F 
15100  7288 6E 20 54 6F 
15100  728C 72 70 65 64 
15100  7290 6F 20 44 61 
15100  7294 74 61 0A 00 
15101  7298 20 20 20 33 _s134: .db "   3 = Starbase Nav Data\n", 0
15101  729C 20 3D 20 53 
15101  72A0 74 61 72 62 
15101  72A4 61 73 65 20 
15101  72A8 4E 61 76 20 
15101  72AC 44 61 74 61 
15101  72B0 0A 00 
15102  72B2 20 20 20 34 _s135: .db "   4 = Direction/Distance Calculator\n", 0
15102  72B6 20 3D 20 44 
15102  72BA 69 72 65 63 
15102  72BE 74 69 6F 6E 
15102  72C2 2F 44 69 73 
15102  72C6 74 61 6E 63 
15102  72CA 65 20 43 61 
15102  72CE 6C 63 75 6C 
15102  72D2 61 74 6F 72 
15102  72D6 0A 00 
15103  72D8 20 20 20 35 _s136: .db "   5 = Galaxy Region Name Map\n", 0
15103  72DC 20 3D 20 47 
15103  72E0 61 6C 61 78 
15103  72E4 79 20 52 65 
15103  72E8 67 69 6F 6E 
15103  72EC 20 4E 61 6D 
15103  72F0 65 20 4D 61 
15103  72F4 70 0A 00 
15104  72F7 0A 20 20 20 _s137: .db "\n     Computer Record of Galaxy for Quadrant %d,%d\n\n", 0
15104  72FB 20 20 43 6F 
15104  72FF 6D 70 75 74 
15104  7303 65 72 20 52 
15104  7307 65 63 6F 72 
15104  730B 64 20 6F 66 
15104  730F 20 47 61 6C 
15104  7313 61 78 79 20 
15104  7317 66 6F 72 20 
15104  731B 51 75 61 64 
15104  731F 72 61 6E 74 
15104  7323 20 25 64 2C 
15104  7327 25 64 0A 0A 
15104  732B 00 
15105  732C 20 20 20 20 _s138: .db "     1     2     3     4     5     6     7     8", 0
15105  7330 20 31 20 20 
15105  7334 20 20 20 32 
15105  7338 20 20 20 20 
15105  733C 20 33 20 20 
15105  7340 20 20 20 34 
15105  7344 20 20 20 20 
15105  7348 20 35 20 20 
15105  734C 20 20 20 36 
15105  7350 20 20 20 20 
15105  7354 20 37 20 20 
15105  7358 20 20 20 38 
15105  735C 00 
15106  735D 25 73 25 64 _s139: .db "%s%d", 0
15106  7361 00 
15107  7362 20 20 20 53 _s140: .db "   Status Report:\n", 0
15107  7366 74 61 74 75 
15107  736A 73 20 52 65 
15107  736E 70 6F 72 74 
15107  7372 3A 0A 00 
15108  7375 4B 6C 69 6E _s141: .db "Klingon%s Left: %d\n Mission must be completed in %d.%d stardates\n", 0
15108  7379 67 6F 6E 25 
15108  737D 73 20 4C 65 
15108  7381 66 74 3A 20 
15108  7385 25 64 0A 20 
15108  7389 4D 69 73 73 
15108  738D 69 6F 6E 20 
15108  7391 6D 75 73 74 
15108  7395 20 62 65 20 
15108  7399 63 6F 6D 70 
15108  739D 6C 65 74 65 
15108  73A1 64 20 69 6E 
15108  73A5 20 25 64 2E 
15108  73A9 25 64 20 73 
15108  73AD 74 61 72 64 
15108  73B1 61 74 65 73 
15108  73B5 0A 00 
15109  73B7 59 6F 75 72 _s142: .db "Your stupidity has left you on your own in the galaxy\n -- you have no starbases left!\n", 0
15109  73BB 20 73 74 75 
15109  73BF 70 69 64 69 
15109  73C3 74 79 20 68 
15109  73C7 61 73 20 6C 
15109  73CB 65 66 74 20 
15109  73CF 79 6F 75 20 
15109  73D3 6F 6E 20 79 
15109  73D7 6F 75 72 20 
15109  73DB 6F 77 6E 20 
15109  73DF 69 6E 20 74 
15109  73E3 68 65 20 67 
15109  73E7 61 6C 61 78 
15109  73EB 79 0A 20 2D 
15109  73EF 2D 20 79 6F 
15109  73F3 75 20 68 61 
15109  73F7 76 65 20 6E 
15109  73FB 6F 20 73 74 
15109  73FF 61 72 62 61 
15109  7403 73 65 73 20 
15109  7407 6C 65 66 74 
15109  740B 21 0A 00 
15110  740E 54 68 65 20 _s143: .db "The Federation is maintaining %d starbase%s in the galaxy\n\n", 0
15110  7412 46 65 64 65 
15110  7416 72 61 74 69 
15110  741A 6F 6E 20 69 
15110  741E 73 20 6D 61 
15110  7422 69 6E 74 61 
15110  7426 69 6E 69 6E 
15110  742A 67 20 25 64 
15110  742E 20 73 74 61 
15110  7432 72 62 61 73 
15110  7436 65 25 73 20 
15110  743A 69 6E 20 74 
15110  743E 68 65 20 67 
15110  7442 61 6C 61 78 
15110  7446 79 0A 0A 00 
15111  744A 46 72 6F 6D _s144: .db "From Enterprise to Klingon battlecriuser%s:\n\n", 0
15111  744E 20 45 6E 74 
15111  7452 65 72 70 72 
15111  7456 69 73 65 20 
15111  745A 74 6F 20 4B 
15111  745E 6C 69 6E 67 
15111  7462 6F 6E 20 62 
15111  7466 61 74 74 6C 
15111  746A 65 63 72 69 
15111  746E 75 73 65 72 
15111  7472 25 73 3A 0A 
15111  7476 0A 00 
15112  7478 4D 72 2E 20 _s145: .db "Mr. Spock reports,\n  Sensors show no starbases in this quadrant.\n", 0
15112  747C 53 70 6F 63 
15112  7480 6B 20 72 65 
15112  7484 70 6F 72 74 
15112  7488 73 2C 0A 20 
15112  748C 20 53 65 6E 
15112  7490 73 6F 72 73 
15112  7494 20 73 68 6F 
15112  7498 77 20 6E 6F 
15112  749C 20 73 74 61 
15112  74A0 72 62 61 73 
15112  74A4 65 73 20 69 
15112  74A8 6E 20 74 68 
15112  74AC 69 73 20 71 
15112  74B0 75 61 64 72 
15112  74B4 61 6E 74 2E 
15112  74B8 0A 00 
15113  74BA 44 69 72 65 _s146: .db "Direction/Distance Calculator\n You are at quadrant %d,%d sector %d,%d\n\n Please enter initial X coordinate: ", 0
15113  74BE 63 74 69 6F 
15113  74C2 6E 2F 44 69 
15113  74C6 73 74 61 6E 
15113  74CA 63 65 20 43 
15113  74CE 61 6C 63 75 
15113  74D2 6C 61 74 6F 
15113  74D6 72 0A 20 59 
15113  74DA 6F 75 20 61 
15113  74DE 72 65 20 61 
15113  74E2 74 20 71 75 
15113  74E6 61 64 72 61 
15113  74EA 6E 74 20 25 
15113  74EE 64 2C 25 64 
15113  74F2 20 73 65 63 
15113  74F6 74 6F 72 20 
15113  74FA 25 64 2C 25 
15113  74FE 64 0A 0A 20 
15113  7502 50 6C 65 61 
15113  7506 73 65 20 65 
15113  750A 6E 74 65 72 
15113  750E 20 69 6E 69 
15113  7512 74 69 61 6C 
15113  7516 20 58 20 63 
15113  751A 6F 6F 72 64 
15113  751E 69 6E 61 74 
15113  7522 65 3A 20 00 
15114  7526 50 6C 65 61 _s147: .db "Please enter initial Y coordinate: ", 0
15114  752A 73 65 20 65 
15114  752E 6E 74 65 72 
15114  7532 20 69 6E 69 
15114  7536 74 69 61 6C 
15114  753A 20 59 20 63 
15114  753E 6F 6F 72 64 
15114  7542 69 6E 61 74 
15114  7546 65 3A 20 00 
15115  754A 50 6C 65 61 _s148: .db "Please enter final X coordinate: ", 0
15115  754E 73 65 20 65 
15115  7552 6E 74 65 72 
15115  7556 20 66 69 6E 
15115  755A 61 6C 20 58 
15115  755E 20 63 6F 6F 
15115  7562 72 64 69 6E 
15115  7566 61 74 65 3A 
15115  756A 20 00 
15116  756C 50 6C 65 61 _s149: .db "Please enter final Y coordinate: ", 0
15116  7570 73 65 20 65 
15116  7574 6E 74 65 72 
15116  7578 20 66 69 6E 
15116  757C 61 6C 20 59 
15116  7580 20 63 6F 6F 
15116  7584 72 64 69 6E 
15116  7588 61 74 65 3A 
15116  758C 20 00 
15117  758E 0A 20 20 20 _s150: .db "\n                   The Galaxy\n\n", 0
15117  7592 20 20 20 20 
15117  7596 20 20 20 20 
15117  759A 20 20 20 20 
15117  759E 20 20 20 20 
15117  75A2 54 68 65 20 
15117  75A6 47 61 6C 61 
15117  75AA 78 79 0A 0A 
15117  75AE 00 
15118  75AF 20 20 20 20 _s151: .db "    1     2     3     4     5     6     7     8\n", 0
15118  75B3 31 20 20 20 
15118  75B7 20 20 32 20 
15118  75BB 20 20 20 20 
15118  75BF 33 20 20 20 
15118  75C3 20 20 34 20 
15118  75C7 20 20 20 20 
15118  75CB 35 20 20 20 
15118  75CF 20 20 36 20 
15118  75D3 20 20 20 20 
15118  75D7 37 20 20 20 
15118  75DB 20 20 38 0A 
15118  75DF 00 
15119  75E0 25 73 25 64 _s152: .db "%s%d ", 0
15119  75E4 20 00 
15120  75E6 20 20 44 49 _s153: .db "  DIRECTION = ", 0
15120  75EA 52 45 43 54 
15120  75EE 49 4F 4E 20 
15120  75F2 3D 20 00 
15121  75F5 25 73 00    _s154: .db "%s", 0
15122  75F8 54 68 65 20 _s155: .db "The Enterprise has been destroyed. The Federation will be conquered.\n", 0
15122  75FC 45 6E 74 65 
15122  7600 72 70 72 69 
15122  7604 73 65 20 68 
15122  7608 61 73 20 62 
15122  760C 65 65 6E 20 
15122  7610 64 65 73 74 
15122  7614 72 6F 79 65 
15122  7618 64 2E 20 54 
15122  761C 68 65 20 46 
15122  7620 65 64 65 72 
15122  7624 61 74 69 6F 
15122  7628 6E 20 77 69 
15122  762C 6C 6C 20 62 
15122  7630 65 20 63 6F 
15122  7634 6E 71 75 65 
15122  7638 72 65 64 2E 
15122  763C 0A 00 
15123  763E 49 74 20 69 _s156: .db "It is stardate %d.\n\n", 0
15123  7642 73 20 73 74 
15123  7646 61 72 64 61 
15123  764A 74 65 20 25 
15123  764E 64 2E 0A 0A 
15123  7652 00 
15124  7653 54 68 65 72 _s157: .db "There were %d Klingon Battlecruisers left at the end of your mission.\n\n", 0
15124  7657 65 20 77 65 
15124  765B 72 65 20 25 
15124  765F 64 20 4B 6C 
15124  7663 69 6E 67 6F 
15124  7667 6E 20 42 61 
15124  766B 74 74 6C 65 
15124  766F 63 72 75 69 
15124  7673 73 65 72 73 
15124  7677 20 6C 65 66 
15124  767B 74 20 61 74 
15124  767F 20 74 68 65 
15124  7683 20 65 6E 64 
15124  7687 20 6F 66 20 
15124  768B 79 6F 75 72 
15124  768F 20 6D 69 73 
15124  7693 73 69 6F 6E 
15124  7697 2E 0A 0A 00 
15125  769B 43 6F 6E 67 _s158: .db "Congratulations, Captain!  The last Klingon Battle Cruiser\n menacing the Federation has been destoyed.\n", 0
15125  769F 72 61 74 75 
15125  76A3 6C 61 74 69 
15125  76A7 6F 6E 73 2C 
15125  76AB 20 43 61 70 
15125  76AF 74 61 69 6E 
15125  76B3 21 20 20 54 
15125  76B7 68 65 20 6C 
15125  76BB 61 73 74 20 
15125  76BF 4B 6C 69 6E 
15125  76C3 67 6F 6E 20 
15125  76C7 42 61 74 74 
15125  76CB 6C 65 20 43 
15125  76CF 72 75 69 73 
15125  76D3 65 72 0A 20 
15125  76D7 6D 65 6E 61 
15125  76DB 63 69 6E 67 
15125  76DF 20 74 68 65 
15125  76E3 20 46 65 64 
15125  76E7 65 72 61 74 
15125  76EB 69 6F 6E 20 
15125  76EF 68 61 73 20 
15125  76F3 62 65 65 6E 
15125  76F7 20 64 65 73 
15125  76FB 74 6F 79 65 
15125  76FF 64 2E 0A 00 
15126  7703 59 6F 75 72 _s159: .db "Your efficiency rating is %s\n", 0
15126  7707 20 65 66 66 
15126  770B 69 63 69 65 
15126  770F 6E 63 79 20 
15126  7713 72 61 74 69 
15126  7717 6E 67 20 69 
15126  771B 73 20 25 73 
15126  771F 0A 00 
15127  7721 54 68 65 20 _s160: .db "The Federation is in need of a new starship commander", 0
15127  7725 46 65 64 65 
15127  7729 72 61 74 69 
15127  772D 6F 6E 20 69 
15127  7731 73 20 69 6E 
15127  7735 20 6E 65 65 
15127  7739 64 20 6F 66 
15127  773D 20 61 20 6E 
15127  7741 65 77 20 73 
15127  7745 74 61 72 73 
15127  7749 68 69 70 20 
15127  774D 63 6F 6D 6D 
15127  7751 61 6E 64 65 
15127  7755 72 00 
15128  7757 20 66 6F 72 _s161: .db " for a similar mission.\n", 0
15128  775B 20 61 20 73 
15128  775F 69 6D 69 6C 
15128  7763 61 72 20 6D 
15128  7767 69 73 73 69 
15128  776B 6F 6E 2E 0A 
15128  776F 00 
15129  7770 49 66 20 74 _s162: .db "If there is a volunteer, let him step forward and", 0
15129  7774 68 65 72 65 
15129  7778 20 69 73 20 
15129  777C 61 20 76 6F 
15129  7780 6C 75 6E 74 
15129  7784 65 65 72 2C 
15129  7788 20 6C 65 74 
15129  778C 20 68 69 6D 
15129  7790 20 73 74 65 
15129  7794 70 20 66 6F 
15129  7798 72 77 61 72 
15129  779C 64 20 61 6E 
15129  77A0 64 00 
15130  77A2 20 65 6E 74 _s163: .db " enter aye: ", 0
15130  77A6 65 72 20 61 
15130  77AA 79 65 3A 20 
15130  77AE 00 
15131  77AF 61 79 65 00 _s164: .db "aye", 0
15132  77B3 53 74 61 72 _s165: .db "Starbase shields protect the Enterprise\n", 0
15132  77B7 62 61 73 65 
15132  77BB 20 73 68 69 
15132  77BF 65 6C 64 73 
15132  77C3 20 70 72 6F 
15132  77C7 74 65 63 74 
15132  77CB 20 74 68 65 
15132  77CF 20 45 6E 74 
15132  77D3 65 72 70 72 
15132  77D7 69 73 65 0A 
15132  77DB 00 
15133  77DC 25 64 20 75 _s166: .db "%d unit hit on Enterprise from sector %d, %d\n", 0
15133  77E0 6E 69 74 20 
15133  77E4 68 69 74 20 
15133  77E8 6F 6E 20 45 
15133  77EC 6E 74 65 72 
15133  77F0 70 72 69 73 
15133  77F4 65 20 66 72 
15133  77F8 6F 6D 20 73 
15133  77FC 65 63 74 6F 
15133  7800 72 20 25 64 
15133  7804 2C 20 25 64 
15133  7808 0A 00 
15134  780A 20 20 20 20 _s167: .db "    <Shields down to %d units>\n\n", 0
15134  780E 3C 53 68 69 
15134  7812 65 6C 64 73 
15134  7816 20 64 6F 77 
15134  781A 6E 20 74 6F 
15134  781E 20 25 64 20 
15134  7822 75 6E 69 74 
15134  7826 73 3E 0A 0A 
15134  782A 00 
15135  782B 44 61 6D 61 _s168: .db "Damage Control reports\n%s damaged by hit\n\n", 0
15135  782F 67 65 20 43 
15135  7833 6F 6E 74 72 
15135  7837 6F 6C 20 72 
15135  783B 65 70 6F 72 
15135  783F 74 73 0A 25 
15135  7843 73 20 64 61 
15135  7847 6D 61 67 65 
15135  784B 64 20 62 79 
15135  784F 20 68 69 74 
15135  7853 0A 0A 00 
15136  7856 20 20 20 20 _s169: .db "    %s repair completed\n\n", 0
15136  785A 25 73 20 72 
15136  785E 65 70 61 69 
15136  7862 72 20 63 6F 
15136  7866 6D 70 6C 65 
15136  786A 74 65 64 0A 
15136  786E 0A 00 
15137  7870 20 20 20 20 _s170: .db "    %s damaged\n\n", 0
15137  7874 25 73 20 64 
15137  7878 61 6D 61 67 
15137  787C 65 64 0A 0A 
15137  7880 00 
15138  7881 20 20 20 20 _s171: .db "    %s state of repair improved\n\n", 0
15138  7885 25 73 20 73 
15138  7889 74 61 74 65 
15138  788D 20 6F 66 20 
15138  7891 72 65 70 61 
15138  7895 69 72 20 69 
15138  7899 6D 70 72 6F 
15138  789D 76 65 64 0A 
15138  78A1 0A 00 
15139  78A3 20 49 00    _s172: .db " I", 0
15140  78A6 20 49 49 00 _s173: .db " II", 0
15141  78AA 20 49 49 49 _s174: .db " III", 0
15141  78AE 00 
15142  78AF 20 49 56 00 _s175: .db " IV", 0
15143  78B3 55 6E 6B 6E _s176: .db "Unknown", 0
15143  78B7 6F 77 6E 00 
15144  78BB             
15145  78BB BD 78       _heap_top: .dw _heap
15146  78BD 00          _heap: .db 0
15147  78BE             ; --- END DATA BLOCK
15148  78BE             
15149  78BE             .end
tasm: Number of errors = 0
