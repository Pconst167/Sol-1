0001   0000             ; --- FILENAME: games/startrek
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT BLOCK
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ;; intro(); 
0011   0408 07 C0 20      call intro
0012   040B             ;; new_game(); 
0013   040B 07 21 21      call new_game
0014   040E             ;; return (0); 
0015   040E 26 00 00      mov b, $0
0016   0411 F9            leave
0017   0412 05 0B         syscall sys_terminate_proc
0018   0414             
0019   0414             strcpy:
0020   0414 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0021   0417             ; $psrc 
0022   0417             ; $pdest 
0023   0417 52 04 00      sub sp, 4
0024   041A             ;; psrc = src; 
0025   041A FA FF FF      lea d, [bp + -1] ; $psrc
0026   041D DA            push d
0027   041E FA 07 00      lea d, [bp + 7] ; $src
0028   0421 2A            mov b, [d]
0029   0422 E7            pop d
0030   0423 FD 43         mov [d], b
0031   0425             ;; pdest = dest; 
0032   0425 FA FD FF      lea d, [bp + -3] ; $pdest
0033   0428 DA            push d
0034   0429 FA 05 00      lea d, [bp + 5] ; $dest
0035   042C 2A            mov b, [d]
0036   042D E7            pop d
0037   042E FD 43         mov [d], b
0038   0430             ;; while(*psrc) *pdest++ = *psrc++; 
0039   0430             _while1_cond:
0040   0430 FA FF FF      lea d, [bp + -1] ; $psrc
0041   0433 2A            mov b, [d]
0042   0434 74            mov d, b
0043   0435 32            mov bl, [d]
0044   0436 A7 00         mov bh, 0
0045   0438 C0 00 00      cmp b, 0
0046   043B C6 63 04      je _while1_exit
0047   043E             _while1_block:
0048   043E             ;; *pdest++ = *psrc++; 
0049   043E FA FD FF      lea d, [bp + -3] ; $pdest
0050   0441 2A            mov b, [d]
0051   0442 D8            push b
0052   0443 FD 77         inc b
0053   0445 FA FD FF      lea d, [bp + -3] ; $pdest
0054   0448 FD 43         mov [d], b
0055   044A E5            pop b
0056   044B D8            push b
0057   044C FA FF FF      lea d, [bp + -1] ; $psrc
0058   044F 2A            mov b, [d]
0059   0450 D8            push b
0060   0451 FD 77         inc b
0061   0453 FA FF FF      lea d, [bp + -1] ; $psrc
0062   0456 FD 43         mov [d], b
0063   0458 E5            pop b
0064   0459 74            mov d, b
0065   045A 32            mov bl, [d]
0066   045B A7 00         mov bh, 0
0067   045D E7            pop d
0068   045E FD 3E         mov [d], bl
0069   0460 0A 30 04      jmp _while1_cond
0070   0463             _while1_exit:
0071   0463             ;; *pdest = '\0'; 
0072   0463 FA FD FF      lea d, [bp + -3] ; $pdest
0073   0466 2A            mov b, [d]
0074   0467 D8            push b
0075   0468 26 00 00      mov b, $0
0076   046B E7            pop d
0077   046C FD 3E         mov [d], bl
0078   046E F9            leave
0079   046F 09            ret
0080   0470             
0081   0470             strcmp:
0082   0470 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0083   0473             ;; while (*s1 && (*s1 == *s2)) { 
0084   0473             _while2_cond:
0085   0473 FA 05 00      lea d, [bp + 5] ; $s1
0086   0476 2A            mov b, [d]
0087   0477 74            mov d, b
0088   0478 32            mov bl, [d]
0089   0479 A7 00         mov bh, 0
0090   047B D7            push a
0091   047C 11            mov a, b
0092   047D FA 05 00      lea d, [bp + 5] ; $s1
0093   0480 2A            mov b, [d]
0094   0481 74            mov d, b
0095   0482 32            mov bl, [d]
0096   0483 A7 00         mov bh, 0
0097   0485             ; START RELATIONAL
0098   0485 D7            push a
0099   0486 11            mov a, b
0100   0487 FA 07 00      lea d, [bp + 7] ; $s2
0101   048A 2A            mov b, [d]
0102   048B 74            mov d, b
0103   048C 32            mov bl, [d]
0104   048D A7 00         mov bh, 0
0105   048F B0            cmp a, b
0106   0490 FD 71         seq ; ==
0107   0492 E4            pop a
0108   0493             ; END RELATIONAL
0109   0493 FD A7         sand a, b
0110   0495 E4            pop a
0111   0496 C0 00 00      cmp b, 0
0112   0499 C6 B9 04      je _while2_exit
0113   049C             _while2_block:
0114   049C             ;; s1++; 
0115   049C FA 05 00      lea d, [bp + 5] ; $s1
0116   049F 2A            mov b, [d]
0117   04A0 D8            push b
0118   04A1 FD 77         inc b
0119   04A3 FA 05 00      lea d, [bp + 5] ; $s1
0120   04A6 FD 43         mov [d], b
0121   04A8 E5            pop b
0122   04A9             ;; s2++; 
0123   04A9 FA 07 00      lea d, [bp + 7] ; $s2
0124   04AC 2A            mov b, [d]
0125   04AD D8            push b
0126   04AE FD 77         inc b
0127   04B0 FA 07 00      lea d, [bp + 7] ; $s2
0128   04B3 FD 43         mov [d], b
0129   04B5 E5            pop b
0130   04B6 0A 73 04      jmp _while2_cond
0131   04B9             _while2_exit:
0132   04B9             ;; return *s1 - *s2; 
0133   04B9 FA 05 00      lea d, [bp + 5] ; $s1
0134   04BC 2A            mov b, [d]
0135   04BD 74            mov d, b
0136   04BE 32            mov bl, [d]
0137   04BF A7 00         mov bh, 0
0138   04C1             ; START TERMS
0139   04C1 D7            push a
0140   04C2 11            mov a, b
0141   04C3 FA 07 00      lea d, [bp + 7] ; $s2
0142   04C6 2A            mov b, [d]
0143   04C7 74            mov d, b
0144   04C8 32            mov bl, [d]
0145   04C9 A7 00         mov bh, 0
0146   04CB 60            sub a, b
0147   04CC 27            mov b, a
0148   04CD E4            pop a
0149   04CE             ; END TERMS
0150   04CE F9            leave
0151   04CF 09            ret
0152   04D0             
0153   04D0             strncmp:
0154   04D0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0155   04D3 F9            leave
0156   04D4 09            ret
0157   04D5             
0158   04D5             strcat:
0159   04D5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0160   04D8             ; $dest_len 
0161   04D8             ; $i 
0162   04D8 52 04 00      sub sp, 4
0163   04DB             ;; dest_len = strlen(dest); 
0164   04DB FA FF FF      lea d, [bp + -1] ; $dest_len
0165   04DE DA            push d
0166   04DF FA 05 00      lea d, [bp + 5] ; $dest
0167   04E2 2A            mov b, [d]
0168   04E3 FD AB         swp b
0169   04E5 D8            push b
0170   04E6 07 88 05      call strlen
0171   04E9 51 02 00      add sp, 2
0172   04EC E7            pop d
0173   04ED FD 43         mov [d], b
0174   04EF             ;; for (i = 0; src[i] != 0; i=i+1) { 
0175   04EF             _for3_init:
0176   04EF FA FD FF      lea d, [bp + -3] ; $i
0177   04F2 DA            push d
0178   04F3 26 00 00      mov b, $0
0179   04F6 E7            pop d
0180   04F7 FD 43         mov [d], b
0181   04F9             _for3_cond:
0182   04F9 FA 07 00      lea d, [bp + 7] ; $src
0183   04FC FD 2A         mov d, [d]
0184   04FE D7            push a
0185   04FF DA            push d
0186   0500 FA FD FF      lea d, [bp + -3] ; $i
0187   0503 2A            mov b, [d]
0188   0504 E7            pop d
0189   0505 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0190   0509 E4            pop a
0191   050A 32            mov bl, [d]
0192   050B A7 00         mov bh, 0
0193   050D             ; START RELATIONAL
0194   050D D7            push a
0195   050E 11            mov a, b
0196   050F 26 00 00      mov b, $0
0197   0512 B0            cmp a, b
0198   0513 FD 72         sneq ; !=
0199   0515 E4            pop a
0200   0516             ; END RELATIONAL
0201   0516 C0 00 00      cmp b, 0
0202   0519 C6 62 05      je _for3_exit
0203   051C             _for3_block:
0204   051C             ;; dest[dest_len + i] = src[i]; 
0205   051C FA 05 00      lea d, [bp + 5] ; $dest
0206   051F FD 2A         mov d, [d]
0207   0521 D7            push a
0208   0522 DA            push d
0209   0523 FA FF FF      lea d, [bp + -1] ; $dest_len
0210   0526 2A            mov b, [d]
0211   0527             ; START TERMS
0212   0527 D7            push a
0213   0528 11            mov a, b
0214   0529 FA FD FF      lea d, [bp + -3] ; $i
0215   052C 2A            mov b, [d]
0216   052D 56            add b, a
0217   052E E4            pop a
0218   052F             ; END TERMS
0219   052F E7            pop d
0220   0530 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0221   0534 E4            pop a
0222   0535 DA            push d
0223   0536 FA 07 00      lea d, [bp + 7] ; $src
0224   0539 FD 2A         mov d, [d]
0225   053B D7            push a
0226   053C DA            push d
0227   053D FA FD FF      lea d, [bp + -3] ; $i
0228   0540 2A            mov b, [d]
0229   0541 E7            pop d
0230   0542 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0231   0546 E4            pop a
0232   0547 32            mov bl, [d]
0233   0548 A7 00         mov bh, 0
0234   054A E7            pop d
0235   054B FD 3E         mov [d], bl
0236   054D             _for3_update:
0237   054D FA FD FF      lea d, [bp + -3] ; $i
0238   0550 DA            push d
0239   0551 FA FD FF      lea d, [bp + -3] ; $i
0240   0554 2A            mov b, [d]
0241   0555             ; START TERMS
0242   0555 D7            push a
0243   0556 11            mov a, b
0244   0557 26 01 00      mov b, $1
0245   055A 56            add b, a
0246   055B E4            pop a
0247   055C             ; END TERMS
0248   055C E7            pop d
0249   055D FD 43         mov [d], b
0250   055F 0A F9 04      jmp _for3_cond
0251   0562             _for3_exit:
0252   0562             ;; dest[dest_len + i] = 0; 
0253   0562 FA 05 00      lea d, [bp + 5] ; $dest
0254   0565 FD 2A         mov d, [d]
0255   0567 D7            push a
0256   0568 DA            push d
0257   0569 FA FF FF      lea d, [bp + -1] ; $dest_len
0258   056C 2A            mov b, [d]
0259   056D             ; START TERMS
0260   056D D7            push a
0261   056E 11            mov a, b
0262   056F FA FD FF      lea d, [bp + -3] ; $i
0263   0572 2A            mov b, [d]
0264   0573 56            add b, a
0265   0574 E4            pop a
0266   0575             ; END TERMS
0267   0575 E7            pop d
0268   0576 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0269   057A E4            pop a
0270   057B DA            push d
0271   057C 26 00 00      mov b, $0
0272   057F E7            pop d
0273   0580 FD 3E         mov [d], bl
0274   0582             ;; return dest; 
0275   0582 FA 05 00      lea d, [bp + 5] ; $dest
0276   0585 2A            mov b, [d]
0277   0586 F9            leave
0278   0587 09            ret
0279   0588             
0280   0588             strlen:
0281   0588 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0282   058B             ; $length 
0283   058B 52 02 00      sub sp, 2
0284   058E             ;; length = 0; 
0285   058E FA FF FF      lea d, [bp + -1] ; $length
0286   0591 DA            push d
0287   0592 26 00 00      mov b, $0
0288   0595 E7            pop d
0289   0596 FD 43         mov [d], b
0290   0598             ;; while (str[length] != 0) { 
0291   0598             _while4_cond:
0292   0598 FA 05 00      lea d, [bp + 5] ; $str
0293   059B FD 2A         mov d, [d]
0294   059D D7            push a
0295   059E DA            push d
0296   059F FA FF FF      lea d, [bp + -1] ; $length
0297   05A2 2A            mov b, [d]
0298   05A3 E7            pop d
0299   05A4 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
0300   05A8 E4            pop a
0301   05A9 32            mov bl, [d]
0302   05AA A7 00         mov bh, 0
0303   05AC             ; START RELATIONAL
0304   05AC D7            push a
0305   05AD 11            mov a, b
0306   05AE 26 00 00      mov b, $0
0307   05B1 B0            cmp a, b
0308   05B2 FD 72         sneq ; !=
0309   05B4 E4            pop a
0310   05B5             ; END RELATIONAL
0311   05B5 C0 00 00      cmp b, 0
0312   05B8 C6 CB 05      je _while4_exit
0313   05BB             _while4_block:
0314   05BB             ;; length++; 
0315   05BB FA FF FF      lea d, [bp + -1] ; $length
0316   05BE 2A            mov b, [d]
0317   05BF D8            push b
0318   05C0 FD 77         inc b
0319   05C2 FA FF FF      lea d, [bp + -1] ; $length
0320   05C5 FD 43         mov [d], b
0321   05C7 E5            pop b
0322   05C8 0A 98 05      jmp _while4_cond
0323   05CB             _while4_exit:
0324   05CB             ;; return length; 
0325   05CB FA FF FF      lea d, [bp + -1] ; $length
0326   05CE 2A            mov b, [d]
0327   05CF F9            leave
0328   05D0 09            ret
0329   05D1             
0330   05D1             fopen:
0331   05D1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0332   05D4 F9            leave
0333   05D5 09            ret
0334   05D6             
0335   05D6             printf:
0336   05D6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0337   05D9             ; $p 
0338   05D9             ; $format_p 
0339   05D9 52 04 00      sub sp, 4
0340   05DC             ;; format_p = format; 
0341   05DC FA FD FF      lea d, [bp + -3] ; $format_p
0342   05DF DA            push d
0343   05E0 FA 05 00      lea d, [bp + 5] ; $format
0344   05E3 2A            mov b, [d]
0345   05E4 E7            pop d
0346   05E5 FD 43         mov [d], b
0347   05E7             ;; p = &format + 2; 
0348   05E7 FA FF FF      lea d, [bp + -1] ; $p
0349   05EA DA            push d
0350   05EB FA 05 00      lea d, [bp + 5] ; $format
0351   05EE 2D            mov b, d
0352   05EF             ; START TERMS
0353   05EF D7            push a
0354   05F0 11            mov a, b
0355   05F1 26 02 00      mov b, $2
0356   05F4 56            add b, a
0357   05F5 E4            pop a
0358   05F6             ; END TERMS
0359   05F6 E7            pop d
0360   05F7 FD 43         mov [d], b
0361   05F9             ;; for(;;){ 
0362   05F9             _for5_init:
0363   05F9             _for5_cond:
0364   05F9             _for5_block:
0365   05F9             ;; if(!*format_p) break; 
0366   05F9             _if6_cond:
0367   05F9 FA FD FF      lea d, [bp + -3] ; $format_p
0368   05FC 2A            mov b, [d]
0369   05FD 74            mov d, b
0370   05FE 32            mov bl, [d]
0371   05FF A7 00         mov bh, 0
0372   0601 C0 00 00      cmp b, 0
0373   0604 FD 71         seq ; !
0374   0606 C0 00 00      cmp b, 0
0375   0609 C6 12 06      je _if6_else
0376   060C             _if6_true:
0377   060C             ;; break; 
0378   060C 0A 39 08      jmp _for5_exit ; for break
0379   060F 0A 36 08      jmp _if6_exit
0380   0612             _if6_else:
0381   0612             ;; if(*format_p == '%'){ 
0382   0612             _if7_cond:
0383   0612 FA FD FF      lea d, [bp + -3] ; $format_p
0384   0615 2A            mov b, [d]
0385   0616 74            mov d, b
0386   0617 32            mov bl, [d]
0387   0618 A7 00         mov bh, 0
0388   061A             ; START RELATIONAL
0389   061A D7            push a
0390   061B 11            mov a, b
0391   061C 26 25 00      mov b, $25
0392   061F B0            cmp a, b
0393   0620 FD 71         seq ; ==
0394   0622 E4            pop a
0395   0623             ; END RELATIONAL
0396   0623 C0 00 00      cmp b, 0
0397   0626 C6 1A 08      je _if7_else
0398   0629             _if7_true:
0399   0629             ;; format_p++; 
0400   0629 FA FD FF      lea d, [bp + -3] ; $format_p
0401   062C 2A            mov b, [d]
0402   062D D8            push b
0403   062E FD 77         inc b
0404   0630 FA FD FF      lea d, [bp + -3] ; $format_p
0405   0633 FD 43         mov [d], b
0406   0635 E5            pop b
0407   0636             ;; switch(*format_p){ 
0408   0636             _switch8_expr:
0409   0636 FA FD FF      lea d, [bp + -3] ; $format_p
0410   0639 2A            mov b, [d]
0411   063A 74            mov d, b
0412   063B 32            mov bl, [d]
0413   063C A7 00         mov bh, 0
0414   063E             _switch8_comparisons:
0415   063E C1 6C         cmp bl, $6c
0416   0640 C6 6C 06      je _switch8_case0
0417   0643 C1 4C         cmp bl, $4c
0418   0645 C6 6C 06      je _switch8_case1
0419   0648 C1 64         cmp bl, $64
0420   064A C6 5A 07      je _switch8_case2
0421   064D C1 69         cmp bl, $69
0422   064F C6 5A 07      je _switch8_case3
0423   0652 C1 75         cmp bl, $75
0424   0654 C6 7E 07      je _switch8_case4
0425   0657 C1 78         cmp bl, $78
0426   0659 C6 A2 07      je _switch8_case5
0427   065C C1 63         cmp bl, $63
0428   065E C6 C0 07      je _switch8_case6
0429   0661 C1 73         cmp bl, $73
0430   0663 C6 DF 07      je _switch8_case7
0431   0666 0A FE 07      jmp _switch8_default
0432   0669 0A 0A 08      jmp _switch8_exit
0433   066C             _switch8_case0:
0434   066C             _switch8_case1:
0435   066C             ;; format_p++; 
0436   066C FA FD FF      lea d, [bp + -3] ; $format_p
0437   066F 2A            mov b, [d]
0438   0670 D8            push b
0439   0671 FD 77         inc b
0440   0673 FA FD FF      lea d, [bp + -3] ; $format_p
0441   0676 FD 43         mov [d], b
0442   0678 E5            pop b
0443   0679             ;; if(*format_p == 'd' || *format_p == 'i') 
0444   0679             _if9_cond:
0445   0679 FA FD FF      lea d, [bp + -3] ; $format_p
0446   067C 2A            mov b, [d]
0447   067D 74            mov d, b
0448   067E 32            mov bl, [d]
0449   067F A7 00         mov bh, 0
0450   0681             ; START RELATIONAL
0451   0681 D7            push a
0452   0682 11            mov a, b
0453   0683 26 64 00      mov b, $64
0454   0686 B0            cmp a, b
0455   0687 FD 71         seq ; ==
0456   0689 E4            pop a
0457   068A             ; END RELATIONAL
0458   068A D7            push a
0459   068B 11            mov a, b
0460   068C FA FD FF      lea d, [bp + -3] ; $format_p
0461   068F 2A            mov b, [d]
0462   0690 74            mov d, b
0463   0691 32            mov bl, [d]
0464   0692 A7 00         mov bh, 0
0465   0694             ; START RELATIONAL
0466   0694 D7            push a
0467   0695 11            mov a, b
0468   0696 26 69 00      mov b, $69
0469   0699 B0            cmp a, b
0470   069A FD 71         seq ; ==
0471   069C E4            pop a
0472   069D             ; END RELATIONAL
0473   069D FD A8         sor a, b ; ||
0474   069F E4            pop a
0475   06A0 C0 00 00      cmp b, 0
0476   06A3 C6 C8 06      je _if9_else
0477   06A6             _if9_true:
0478   06A6             ;; print_signed_long(*(long *)p); 
0479   06A6 FA FF FF      lea d, [bp + -1] ; $p
0480   06A9 2A            mov b, [d]
0481   06AA AB            snex b
0482   06AB FD 39         mov c, b
0483   06AD 74            mov d, b
0484   06AE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0485   06B1 FD 39         mov c, b ; And place it into C
0486   06B3 2A            mov b, [d] ; Lower Word in B
0487   06B4 FD 79         mov g, b
0488   06B6 28            mov b, c
0489   06B7 FD AB         swp b
0490   06B9 D8            push b
0491   06BA FD 27         mov b, g
0492   06BC FD AB         swp b
0493   06BE D8            push b
0494   06BF 07 FF 0C      call print_signed_long
0495   06C2 51 04 00      add sp, 4
0496   06C5 0A 45 07      jmp _if9_exit
0497   06C8             _if9_else:
0498   06C8             ;; if(*format_p == 'u') 
0499   06C8             _if10_cond:
0500   06C8 FA FD FF      lea d, [bp + -3] ; $format_p
0501   06CB 2A            mov b, [d]
0502   06CC 74            mov d, b
0503   06CD 32            mov bl, [d]
0504   06CE A7 00         mov bh, 0
0505   06D0             ; START RELATIONAL
0506   06D0 D7            push a
0507   06D1 11            mov a, b
0508   06D2 26 75 00      mov b, $75
0509   06D5 B0            cmp a, b
0510   06D6 FD 71         seq ; ==
0511   06D8 E4            pop a
0512   06D9             ; END RELATIONAL
0513   06D9 C0 00 00      cmp b, 0
0514   06DC C6 03 07      je _if10_else
0515   06DF             _if10_true:
0516   06DF             ;; print_unsigned_long(*(unsigned long *)p); 
0517   06DF FA FF FF      lea d, [bp + -1] ; $p
0518   06E2 2A            mov b, [d]
0519   06E3 A7 00         mov bh, 0
0520   06E5 38 00 00      mov c, 0
0521   06E8 74            mov d, b
0522   06E9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0523   06EC FD 39         mov c, b ; And place it into C
0524   06EE 2A            mov b, [d] ; Lower Word in B
0525   06EF FD 79         mov g, b
0526   06F1 28            mov b, c
0527   06F2 FD AB         swp b
0528   06F4 D8            push b
0529   06F5 FD 27         mov b, g
0530   06F7 FD AB         swp b
0531   06F9 D8            push b
0532   06FA 07 38 10      call print_unsigned_long
0533   06FD 51 04 00      add sp, 4
0534   0700 0A 45 07      jmp _if10_exit
0535   0703             _if10_else:
0536   0703             ;; if(*format_p == 'x') 
0537   0703             _if11_cond:
0538   0703 FA FD FF      lea d, [bp + -3] ; $format_p
0539   0706 2A            mov b, [d]
0540   0707 74            mov d, b
0541   0708 32            mov bl, [d]
0542   0709 A7 00         mov bh, 0
0543   070B             ; START RELATIONAL
0544   070B D7            push a
0545   070C 11            mov a, b
0546   070D 26 78 00      mov b, $78
0547   0710 B0            cmp a, b
0548   0711 FD 71         seq ; ==
0549   0713 E4            pop a
0550   0714             ; END RELATIONAL
0551   0714 C0 00 00      cmp b, 0
0552   0717 C6 39 07      je _if11_else
0553   071A             _if11_true:
0554   071A             ;; printx32(*(long int *)p); 
0555   071A FA FF FF      lea d, [bp + -1] ; $p
0556   071D 2A            mov b, [d]
0557   071E 74            mov d, b
0558   071F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
0559   0722 FD 39         mov c, b ; And place it into C
0560   0724 2A            mov b, [d] ; Lower Word in B
0561   0725 FD 79         mov g, b
0562   0727 28            mov b, c
0563   0728 FD AB         swp b
0564   072A D8            push b
0565   072B FD 27         mov b, g
0566   072D FD AB         swp b
0567   072F D8            push b
0568   0730 07 88 0A      call printx32
0569   0733 51 04 00      add sp, 4
0570   0736 0A 45 07      jmp _if11_exit
0571   0739             _if11_else:
0572   0739             ;; err("Unexpected format in printf."); 
0573   0739 26 7F 64      mov b, _s30 ; "Unexpected format in printf."
0574   073C FD AB         swp b
0575   073E D8            push b
0576   073F 07 76 0A      call err
0577   0742 51 02 00      add sp, 2
0578   0745             _if11_exit:
0579   0745             _if10_exit:
0580   0745             _if9_exit:
0581   0745             ;; p = p + 4; 
0582   0745 FA FF FF      lea d, [bp + -1] ; $p
0583   0748 DA            push d
0584   0749 FA FF FF      lea d, [bp + -1] ; $p
0585   074C 2A            mov b, [d]
0586   074D             ; START TERMS
0587   074D D7            push a
0588   074E 11            mov a, b
0589   074F 26 04 00      mov b, $4
0590   0752 56            add b, a
0591   0753 E4            pop a
0592   0754             ; END TERMS
0593   0754 E7            pop d
0594   0755 FD 43         mov [d], b
0595   0757             ;; break; 
0596   0757 0A 0A 08      jmp _switch8_exit ; case break
0597   075A             _switch8_case2:
0598   075A             _switch8_case3:
0599   075A             ;; print_signed(*(int*)p); 
0600   075A FA FF FF      lea d, [bp + -1] ; $p
0601   075D 2A            mov b, [d]
0602   075E 74            mov d, b
0603   075F 2A            mov b, [d]
0604   0760 FD AB         swp b
0605   0762 D8            push b
0606   0763 07 0F 0C      call print_signed
0607   0766 51 02 00      add sp, 2
0608   0769             ;; p = p + 2; 
0609   0769 FA FF FF      lea d, [bp + -1] ; $p
0610   076C DA            push d
0611   076D FA FF FF      lea d, [bp + -1] ; $p
0612   0770 2A            mov b, [d]
0613   0771             ; START TERMS
0614   0771 D7            push a
0615   0772 11            mov a, b
0616   0773 26 02 00      mov b, $2
0617   0776 56            add b, a
0618   0777 E4            pop a
0619   0778             ; END TERMS
0620   0778 E7            pop d
0621   0779 FD 43         mov [d], b
0622   077B             ;; break; 
0623   077B 0A 0A 08      jmp _switch8_exit ; case break
0624   077E             _switch8_case4:
0625   077E             ;; print_unsigned(*(unsigned int*)p); 
0626   077E FA FF FF      lea d, [bp + -1] ; $p
0627   0781 2A            mov b, [d]
0628   0782 74            mov d, b
0629   0783 2A            mov b, [d]
0630   0784 FD AB         swp b
0631   0786 D8            push b
0632   0787 07 30 12      call print_unsigned
0633   078A 51 02 00      add sp, 2
0634   078D             ;; p = p + 2; 
0635   078D FA FF FF      lea d, [bp + -1] ; $p
0636   0790 DA            push d
0637   0791 FA FF FF      lea d, [bp + -1] ; $p
0638   0794 2A            mov b, [d]
0639   0795             ; START TERMS
0640   0795 D7            push a
0641   0796 11            mov a, b
0642   0797 26 02 00      mov b, $2
0643   079A 56            add b, a
0644   079B E4            pop a
0645   079C             ; END TERMS
0646   079C E7            pop d
0647   079D FD 43         mov [d], b
0648   079F             ;; break; 
0649   079F 0A 0A 08      jmp _switch8_exit ; case break
0650   07A2             _switch8_case5:
0651   07A2             
0652   07A2             ; --- BEGIN INLINE ASM BLOCK
0653   07A2 FA FF FF      lea d, [bp + -1] ; $p
0654   07A5 FD 2A         mov d, [d]
0655   07A7 2A            mov b, [d]
0656   07A8 07 33 16      call print_u16x
0657   07AB             ; --- END INLINE ASM BLOCK
0658   07AB             
0659   07AB             ;; p = p + 2; 
0660   07AB FA FF FF      lea d, [bp + -1] ; $p
0661   07AE DA            push d
0662   07AF FA FF FF      lea d, [bp + -1] ; $p
0663   07B2 2A            mov b, [d]
0664   07B3             ; START TERMS
0665   07B3 D7            push a
0666   07B4 11            mov a, b
0667   07B5 26 02 00      mov b, $2
0668   07B8 56            add b, a
0669   07B9 E4            pop a
0670   07BA             ; END TERMS
0671   07BA E7            pop d
0672   07BB FD 43         mov [d], b
0673   07BD             ;; break; 
0674   07BD 0A 0A 08      jmp _switch8_exit ; case break
0675   07C0             _switch8_case6:
0676   07C0             
0677   07C0             ; --- BEGIN INLINE ASM BLOCK
0678   07C0 FA FF FF      lea d, [bp + -1] ; $p
0679   07C3 FD 2A         mov d, [d]
0680   07C5 1E            mov al, [d]
0681   07C6 23            mov ah, al
0682   07C7 07 91 14      call _putchar
0683   07CA             ; --- END INLINE ASM BLOCK
0684   07CA             
0685   07CA             ;; p = p + 2; 
0686   07CA FA FF FF      lea d, [bp + -1] ; $p
0687   07CD DA            push d
0688   07CE FA FF FF      lea d, [bp + -1] ; $p
0689   07D1 2A            mov b, [d]
0690   07D2             ; START TERMS
0691   07D2 D7            push a
0692   07D3 11            mov a, b
0693   07D4 26 02 00      mov b, $2
0694   07D7 56            add b, a
0695   07D8 E4            pop a
0696   07D9             ; END TERMS
0697   07D9 E7            pop d
0698   07DA FD 43         mov [d], b
0699   07DC             ;; break; 
0700   07DC 0A 0A 08      jmp _switch8_exit ; case break
0701   07DF             _switch8_case7:
0702   07DF             
0703   07DF             ; --- BEGIN INLINE ASM BLOCK
0704   07DF FA FF FF      lea d, [bp + -1] ; $p
0705   07E2 FD 2A         mov d, [d]
0706   07E4 FD 2A         mov d, [d]
0707   07E6 07 DB 15      call _puts
0708   07E9             ; --- END INLINE ASM BLOCK
0709   07E9             
0710   07E9             ;; p = p + 2; 
0711   07E9 FA FF FF      lea d, [bp + -1] ; $p
0712   07EC DA            push d
0713   07ED FA FF FF      lea d, [bp + -1] ; $p
0714   07F0 2A            mov b, [d]
0715   07F1             ; START TERMS
0716   07F1 D7            push a
0717   07F2 11            mov a, b
0718   07F3 26 02 00      mov b, $2
0719   07F6 56            add b, a
0720   07F7 E4            pop a
0721   07F8             ; END TERMS
0722   07F8 E7            pop d
0723   07F9 FD 43         mov [d], b
0724   07FB             ;; break; 
0725   07FB 0A 0A 08      jmp _switch8_exit ; case break
0726   07FE             _switch8_default:
0727   07FE             ;; print("Error: Unknown argument type.\n"); 
0728   07FE 26 9C 64      mov b, _s31 ; "Error: Unknown argument type.\n"
0729   0801 FD AB         swp b
0730   0803 D8            push b
0731   0804 07 48 13      call print
0732   0807 51 02 00      add sp, 2
0733   080A             _switch8_exit:
0734   080A             ;; format_p++; 
0735   080A FA FD FF      lea d, [bp + -3] ; $format_p
0736   080D 2A            mov b, [d]
0737   080E D8            push b
0738   080F FD 77         inc b
0739   0811 FA FD FF      lea d, [bp + -3] ; $format_p
0740   0814 FD 43         mov [d], b
0741   0816 E5            pop b
0742   0817 0A 36 08      jmp _if7_exit
0743   081A             _if7_else:
0744   081A             ;; putchar(*format_p); 
0745   081A FA FD FF      lea d, [bp + -3] ; $format_p
0746   081D 2A            mov b, [d]
0747   081E 74            mov d, b
0748   081F 32            mov bl, [d]
0749   0820 A7 00         mov bh, 0
0750   0822 DD            push bl
0751   0823 07 00 13      call putchar
0752   0826 51 01 00      add sp, 1
0753   0829             ;; format_p++; 
0754   0829 FA FD FF      lea d, [bp + -3] ; $format_p
0755   082C 2A            mov b, [d]
0756   082D D8            push b
0757   082E FD 77         inc b
0758   0830 FA FD FF      lea d, [bp + -3] ; $format_p
0759   0833 FD 43         mov [d], b
0760   0835 E5            pop b
0761   0836             _if7_exit:
0762   0836             _if6_exit:
0763   0836             _for5_update:
0764   0836 0A F9 05      jmp _for5_cond
0765   0839             _for5_exit:
0766   0839 F9            leave
0767   083A 09            ret
0768   083B             
0769   083B             scanf:
0770   083B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0771   083E             ; $p 
0772   083E             ; $format_p 
0773   083E             ; $c 
0774   083E             ; $i 
0775   083E             ; $input_string 
0776   083E 52 07 02      sub sp, 519
0777   0841             ;; format_p = format; 
0778   0841 FA FD FF      lea d, [bp + -3] ; $format_p
0779   0844 DA            push d
0780   0845 FA 05 00      lea d, [bp + 5] ; $format
0781   0848 2A            mov b, [d]
0782   0849 E7            pop d
0783   084A FD 43         mov [d], b
0784   084C             ;; p = &format + 2; 
0785   084C FA FF FF      lea d, [bp + -1] ; $p
0786   084F DA            push d
0787   0850 FA 05 00      lea d, [bp + 5] ; $format
0788   0853 2D            mov b, d
0789   0854             ; START TERMS
0790   0854 D7            push a
0791   0855 11            mov a, b
0792   0856 26 02 00      mov b, $2
0793   0859 56            add b, a
0794   085A E4            pop a
0795   085B             ; END TERMS
0796   085B E7            pop d
0797   085C FD 43         mov [d], b
0798   085E             ;; for(;;){ 
0799   085E             _for12_init:
0800   085E             _for12_cond:
0801   085E             _for12_block:
0802   085E             ;; if(!*format_p) break; 
0803   085E             _if13_cond:
0804   085E FA FD FF      lea d, [bp + -3] ; $format_p
0805   0861 2A            mov b, [d]
0806   0862 74            mov d, b
0807   0863 32            mov bl, [d]
0808   0864 A7 00         mov bh, 0
0809   0866 C0 00 00      cmp b, 0
0810   0869 FD 71         seq ; !
0811   086B C0 00 00      cmp b, 0
0812   086E C6 77 08      je _if13_else
0813   0871             _if13_true:
0814   0871             ;; break; 
0815   0871 0A 74 0A      jmp _for12_exit ; for break
0816   0874 0A 71 0A      jmp _if13_exit
0817   0877             _if13_else:
0818   0877             ;; if(*format_p == '%'){ 
0819   0877             _if14_cond:
0820   0877 FA FD FF      lea d, [bp + -3] ; $format_p
0821   087A 2A            mov b, [d]
0822   087B 74            mov d, b
0823   087C 32            mov bl, [d]
0824   087D A7 00         mov bh, 0
0825   087F             ; START RELATIONAL
0826   087F D7            push a
0827   0880 11            mov a, b
0828   0881 26 25 00      mov b, $25
0829   0884 B0            cmp a, b
0830   0885 FD 71         seq ; ==
0831   0887 E4            pop a
0832   0888             ; END RELATIONAL
0833   0888 C0 00 00      cmp b, 0
0834   088B C6 55 0A      je _if14_else
0835   088E             _if14_true:
0836   088E             ;; format_p++; 
0837   088E FA FD FF      lea d, [bp + -3] ; $format_p
0838   0891 2A            mov b, [d]
0839   0892 D8            push b
0840   0893 FD 77         inc b
0841   0895 FA FD FF      lea d, [bp + -3] ; $format_p
0842   0898 FD 43         mov [d], b
0843   089A E5            pop b
0844   089B             ;; switch(*format_p){ 
0845   089B             _switch15_expr:
0846   089B FA FD FF      lea d, [bp + -3] ; $format_p
0847   089E 2A            mov b, [d]
0848   089F 74            mov d, b
0849   08A0 32            mov bl, [d]
0850   08A1 A7 00         mov bh, 0
0851   08A3             _switch15_comparisons:
0852   08A3 C1 6C         cmp bl, $6c
0853   08A5 C6 D1 08      je _switch15_case0
0854   08A8 C1 4C         cmp bl, $4c
0855   08AA C6 D1 08      je _switch15_case1
0856   08AD C1 64         cmp bl, $64
0857   08AF C6 63 09      je _switch15_case2
0858   08B2 C1 69         cmp bl, $69
0859   08B4 C6 63 09      je _switch15_case3
0860   08B7 C1 75         cmp bl, $75
0861   08B9 C6 90 09      je _switch15_case4
0862   08BC C1 78         cmp bl, $78
0863   08BE C6 BD 09      je _switch15_case5
0864   08C1 C1 63         cmp bl, $63
0865   08C3 C6 D2 09      je _switch15_case6
0866   08C6 C1 73         cmp bl, $73
0867   08C8 C6 01 0A      je _switch15_case7
0868   08CB 0A 39 0A      jmp _switch15_default
0869   08CE 0A 45 0A      jmp _switch15_exit
0870   08D1             _switch15_case0:
0871   08D1             _switch15_case1:
0872   08D1             ;; format_p++; 
0873   08D1 FA FD FF      lea d, [bp + -3] ; $format_p
0874   08D4 2A            mov b, [d]
0875   08D5 D8            push b
0876   08D6 FD 77         inc b
0877   08D8 FA FD FF      lea d, [bp + -3] ; $format_p
0878   08DB FD 43         mov [d], b
0879   08DD E5            pop b
0880   08DE             ;; if(*format_p == 'd' || *format_p == 'i'); 
0881   08DE             _if16_cond:
0882   08DE FA FD FF      lea d, [bp + -3] ; $format_p
0883   08E1 2A            mov b, [d]
0884   08E2 74            mov d, b
0885   08E3 32            mov bl, [d]
0886   08E4 A7 00         mov bh, 0
0887   08E6             ; START RELATIONAL
0888   08E6 D7            push a
0889   08E7 11            mov a, b
0890   08E8 26 64 00      mov b, $64
0891   08EB B0            cmp a, b
0892   08EC FD 71         seq ; ==
0893   08EE E4            pop a
0894   08EF             ; END RELATIONAL
0895   08EF D7            push a
0896   08F0 11            mov a, b
0897   08F1 FA FD FF      lea d, [bp + -3] ; $format_p
0898   08F4 2A            mov b, [d]
0899   08F5 74            mov d, b
0900   08F6 32            mov bl, [d]
0901   08F7 A7 00         mov bh, 0
0902   08F9             ; START RELATIONAL
0903   08F9 D7            push a
0904   08FA 11            mov a, b
0905   08FB 26 69 00      mov b, $69
0906   08FE B0            cmp a, b
0907   08FF FD 71         seq ; ==
0908   0901 E4            pop a
0909   0902             ; END RELATIONAL
0910   0902 FD A8         sor a, b ; ||
0911   0904 E4            pop a
0912   0905 C0 00 00      cmp b, 0
0913   0908 C6 0E 09      je _if16_else
0914   090B             _if16_true:
0915   090B             ;; ; 
0916   090B 0A 4E 09      jmp _if16_exit
0917   090E             _if16_else:
0918   090E             ;; if(*format_p == 'u'); 
0919   090E             _if17_cond:
0920   090E FA FD FF      lea d, [bp + -3] ; $format_p
0921   0911 2A            mov b, [d]
0922   0912 74            mov d, b
0923   0913 32            mov bl, [d]
0924   0914 A7 00         mov bh, 0
0925   0916             ; START RELATIONAL
0926   0916 D7            push a
0927   0917 11            mov a, b
0928   0918 26 75 00      mov b, $75
0929   091B B0            cmp a, b
0930   091C FD 71         seq ; ==
0931   091E E4            pop a
0932   091F             ; END RELATIONAL
0933   091F C0 00 00      cmp b, 0
0934   0922 C6 28 09      je _if17_else
0935   0925             _if17_true:
0936   0925             ;; ; 
0937   0925 0A 4E 09      jmp _if17_exit
0938   0928             _if17_else:
0939   0928             ;; if(*format_p == 'x'); 
0940   0928             _if18_cond:
0941   0928 FA FD FF      lea d, [bp + -3] ; $format_p
0942   092B 2A            mov b, [d]
0943   092C 74            mov d, b
0944   092D 32            mov bl, [d]
0945   092E A7 00         mov bh, 0
0946   0930             ; START RELATIONAL
0947   0930 D7            push a
0948   0931 11            mov a, b
0949   0932 26 78 00      mov b, $78
0950   0935 B0            cmp a, b
0951   0936 FD 71         seq ; ==
0952   0938 E4            pop a
0953   0939             ; END RELATIONAL
0954   0939 C0 00 00      cmp b, 0
0955   093C C6 42 09      je _if18_else
0956   093F             _if18_true:
0957   093F             ;; ; 
0958   093F 0A 4E 09      jmp _if18_exit
0959   0942             _if18_else:
0960   0942             ;; err("Unexpected format in printf."); 
0961   0942 26 7F 64      mov b, _s30 ; "Unexpected format in printf."
0962   0945 FD AB         swp b
0963   0947 D8            push b
0964   0948 07 76 0A      call err
0965   094B 51 02 00      add sp, 2
0966   094E             _if18_exit:
0967   094E             _if17_exit:
0968   094E             _if16_exit:
0969   094E             ;; p = p + 4; 
0970   094E FA FF FF      lea d, [bp + -1] ; $p
0971   0951 DA            push d
0972   0952 FA FF FF      lea d, [bp + -1] ; $p
0973   0955 2A            mov b, [d]
0974   0956             ; START TERMS
0975   0956 D7            push a
0976   0957 11            mov a, b
0977   0958 26 04 00      mov b, $4
0978   095B 56            add b, a
0979   095C E4            pop a
0980   095D             ; END TERMS
0981   095D E7            pop d
0982   095E FD 43         mov [d], b
0983   0960             ;; break; 
0984   0960 0A 45 0A      jmp _switch15_exit ; case break
0985   0963             _switch15_case2:
0986   0963             _switch15_case3:
0987   0963             ;; i = scann(); 
0988   0963 FA FA FF      lea d, [bp + -6] ; $i
0989   0966 DA            push d
0990   0967 07 23 13      call scann
0991   096A E7            pop d
0992   096B FD 43         mov [d], b
0993   096D             ;; **(int **)p = i; 
0994   096D FA FF FF      lea d, [bp + -1] ; $p
0995   0970 2A            mov b, [d]
0996   0971 74            mov d, b
0997   0972 2A            mov b, [d]
0998   0973 D8            push b
0999   0974 FA FA FF      lea d, [bp + -6] ; $i
1000   0977 2A            mov b, [d]
1001   0978 E7            pop d
1002   0979 FD 43         mov [d], b
1003   097B             ;; p = p + 2; 
1004   097B FA FF FF      lea d, [bp + -1] ; $p
1005   097E DA            push d
1006   097F FA FF FF      lea d, [bp + -1] ; $p
1007   0982 2A            mov b, [d]
1008   0983             ; START TERMS
1009   0983 D7            push a
1010   0984 11            mov a, b
1011   0985 26 02 00      mov b, $2
1012   0988 56            add b, a
1013   0989 E4            pop a
1014   098A             ; END TERMS
1015   098A E7            pop d
1016   098B FD 43         mov [d], b
1017   098D             ;; break; 
1018   098D 0A 45 0A      jmp _switch15_exit ; case break
1019   0990             _switch15_case4:
1020   0990             ;; i = scann(); 
1021   0990 FA FA FF      lea d, [bp + -6] ; $i
1022   0993 DA            push d
1023   0994 07 23 13      call scann
1024   0997 E7            pop d
1025   0998 FD 43         mov [d], b
1026   099A             ;; **(int **)p = i; 
1027   099A FA FF FF      lea d, [bp + -1] ; $p
1028   099D 2A            mov b, [d]
1029   099E 74            mov d, b
1030   099F 2A            mov b, [d]
1031   09A0 D8            push b
1032   09A1 FA FA FF      lea d, [bp + -6] ; $i
1033   09A4 2A            mov b, [d]
1034   09A5 E7            pop d
1035   09A6 FD 43         mov [d], b
1036   09A8             ;; p = p + 2; 
1037   09A8 FA FF FF      lea d, [bp + -1] ; $p
1038   09AB DA            push d
1039   09AC FA FF FF      lea d, [bp + -1] ; $p
1040   09AF 2A            mov b, [d]
1041   09B0             ; START TERMS
1042   09B0 D7            push a
1043   09B1 11            mov a, b
1044   09B2 26 02 00      mov b, $2
1045   09B5 56            add b, a
1046   09B6 E4            pop a
1047   09B7             ; END TERMS
1048   09B7 E7            pop d
1049   09B8 FD 43         mov [d], b
1050   09BA             ;; break; 
1051   09BA 0A 45 0A      jmp _switch15_exit ; case break
1052   09BD             _switch15_case5:
1053   09BD             ;; p = p + 2; 
1054   09BD FA FF FF      lea d, [bp + -1] ; $p
1055   09C0 DA            push d
1056   09C1 FA FF FF      lea d, [bp + -1] ; $p
1057   09C4 2A            mov b, [d]
1058   09C5             ; START TERMS
1059   09C5 D7            push a
1060   09C6 11            mov a, b
1061   09C7 26 02 00      mov b, $2
1062   09CA 56            add b, a
1063   09CB E4            pop a
1064   09CC             ; END TERMS
1065   09CC E7            pop d
1066   09CD FD 43         mov [d], b
1067   09CF             ;; break; 
1068   09CF 0A 45 0A      jmp _switch15_exit ; case break
1069   09D2             _switch15_case6:
1070   09D2             ;; c = getchar(); 
1071   09D2 FA FC FF      lea d, [bp + -4] ; $c
1072   09D5 DA            push d
1073   09D6 07 0D 13      call getchar
1074   09D9 E7            pop d
1075   09DA FD 3E         mov [d], bl
1076   09DC             ;; **(char **)p = c; 
1077   09DC FA FF FF      lea d, [bp + -1] ; $p
1078   09DF 2A            mov b, [d]
1079   09E0 74            mov d, b
1080   09E1 2A            mov b, [d]
1081   09E2 D8            push b
1082   09E3 FA FC FF      lea d, [bp + -4] ; $c
1083   09E6 32            mov bl, [d]
1084   09E7 A7 00         mov bh, 0
1085   09E9 E7            pop d
1086   09EA FD 43         mov [d], b
1087   09EC             ;; p = p + 2; 
1088   09EC FA FF FF      lea d, [bp + -1] ; $p
1089   09EF DA            push d
1090   09F0 FA FF FF      lea d, [bp + -1] ; $p
1091   09F3 2A            mov b, [d]
1092   09F4             ; START TERMS
1093   09F4 D7            push a
1094   09F5 11            mov a, b
1095   09F6 26 02 00      mov b, $2
1096   09F9 56            add b, a
1097   09FA E4            pop a
1098   09FB             ; END TERMS
1099   09FB E7            pop d
1100   09FC FD 43         mov [d], b
1101   09FE             ;; break; 
1102   09FE 0A 45 0A      jmp _switch15_exit ; case break
1103   0A01             _switch15_case7:
1104   0A01             ;; gets(input_string); 
1105   0A01 FA FA FD      lea d, [bp + -518] ; $input_string
1106   0A04 2D            mov b, d
1107   0A05 FD AB         swp b
1108   0A07 D8            push b
1109   0A08 07 F5 0B      call gets
1110   0A0B 51 02 00      add sp, 2
1111   0A0E             ;; strcpy(*(char **)p, input_string); 
1112   0A0E FA FA FD      lea d, [bp + -518] ; $input_string
1113   0A11 2D            mov b, d
1114   0A12 FD AB         swp b
1115   0A14 D8            push b
1116   0A15 FA FF FF      lea d, [bp + -1] ; $p
1117   0A18 2A            mov b, [d]
1118   0A19 74            mov d, b
1119   0A1A 2A            mov b, [d]
1120   0A1B FD AB         swp b
1121   0A1D D8            push b
1122   0A1E 07 14 04      call strcpy
1123   0A21 51 04 00      add sp, 4
1124   0A24             ;; p = p + 2; 
1125   0A24 FA FF FF      lea d, [bp + -1] ; $p
1126   0A27 DA            push d
1127   0A28 FA FF FF      lea d, [bp + -1] ; $p
1128   0A2B 2A            mov b, [d]
1129   0A2C             ; START TERMS
1130   0A2C D7            push a
1131   0A2D 11            mov a, b
1132   0A2E 26 02 00      mov b, $2
1133   0A31 56            add b, a
1134   0A32 E4            pop a
1135   0A33             ; END TERMS
1136   0A33 E7            pop d
1137   0A34 FD 43         mov [d], b
1138   0A36             ;; break; 
1139   0A36 0A 45 0A      jmp _switch15_exit ; case break
1140   0A39             _switch15_default:
1141   0A39             ;; print("Error: Unknown argument type.\n"); 
1142   0A39 26 9C 64      mov b, _s31 ; "Error: Unknown argument type.\n"
1143   0A3C FD AB         swp b
1144   0A3E D8            push b
1145   0A3F 07 48 13      call print
1146   0A42 51 02 00      add sp, 2
1147   0A45             _switch15_exit:
1148   0A45             ;; format_p++; 
1149   0A45 FA FD FF      lea d, [bp + -3] ; $format_p
1150   0A48 2A            mov b, [d]
1151   0A49 D8            push b
1152   0A4A FD 77         inc b
1153   0A4C FA FD FF      lea d, [bp + -3] ; $format_p
1154   0A4F FD 43         mov [d], b
1155   0A51 E5            pop b
1156   0A52 0A 71 0A      jmp _if14_exit
1157   0A55             _if14_else:
1158   0A55             ;; putchar(*format_p); 
1159   0A55 FA FD FF      lea d, [bp + -3] ; $format_p
1160   0A58 2A            mov b, [d]
1161   0A59 74            mov d, b
1162   0A5A 32            mov bl, [d]
1163   0A5B A7 00         mov bh, 0
1164   0A5D DD            push bl
1165   0A5E 07 00 13      call putchar
1166   0A61 51 01 00      add sp, 1
1167   0A64             ;; format_p++; 
1168   0A64 FA FD FF      lea d, [bp + -3] ; $format_p
1169   0A67 2A            mov b, [d]
1170   0A68 D8            push b
1171   0A69 FD 77         inc b
1172   0A6B FA FD FF      lea d, [bp + -3] ; $format_p
1173   0A6E FD 43         mov [d], b
1174   0A70 E5            pop b
1175   0A71             _if14_exit:
1176   0A71             _if13_exit:
1177   0A71             _for12_update:
1178   0A71 0A 5E 08      jmp _for12_cond
1179   0A74             _for12_exit:
1180   0A74 F9            leave
1181   0A75 09            ret
1182   0A76             
1183   0A76             err:
1184   0A76 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1185   0A79             ;; print(e); 
1186   0A79 FA 05 00      lea d, [bp + 5] ; $e
1187   0A7C 2A            mov b, [d]
1188   0A7D FD AB         swp b
1189   0A7F D8            push b
1190   0A80 07 48 13      call print
1191   0A83 51 02 00      add sp, 2
1192   0A86 F9            leave
1193   0A87 09            ret
1194   0A88             
1195   0A88             printx32:
1196   0A88 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1197   0A8B             
1198   0A8B             ; --- BEGIN INLINE ASM BLOCK
1199   0A8B FA 05 00      lea d, [bp + 5] ; $hex
1200   0A8E 2B 02 00      mov b, [d+2]
1201   0A91 07 33 16      call print_u16x
1202   0A94 2A            mov b, [d]
1203   0A95 07 33 16      call print_u16x
1204   0A98             ; --- END INLINE ASM BLOCK
1205   0A98             
1206   0A98 F9            leave
1207   0A99 09            ret
1208   0A9A             
1209   0A9A             printx16:
1210   0A9A F8 00 00      enter 0 ; (push bp; mov bp, sp)
1211   0A9D             
1212   0A9D             ; --- BEGIN INLINE ASM BLOCK
1213   0A9D FA 05 00      lea d, [bp + 5] ; $hex
1214   0AA0 2A            mov b, [d]
1215   0AA1 07 33 16      call print_u16x
1216   0AA4             ; --- END INLINE ASM BLOCK
1217   0AA4             
1218   0AA4 F9            leave
1219   0AA5 09            ret
1220   0AA6             
1221   0AA6             printx8:
1222   0AA6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1223   0AA9             
1224   0AA9             ; --- BEGIN INLINE ASM BLOCK
1225   0AA9 FA 05 00      lea d, [bp + 5] ; $hex
1226   0AAC 32            mov bl, [d]
1227   0AAD 07 77 16      call print_u8x
1228   0AB0             ; --- END INLINE ASM BLOCK
1229   0AB0             
1230   0AB0 F9            leave
1231   0AB1 09            ret
1232   0AB2             
1233   0AB2             hex_str_to_int:
1234   0AB2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1235   0AB5             ; $value 
1236   0AB5 10 00 00      mov a, $0
1237   0AB8 45 FF FF      mov [bp + -1], a
1238   0ABB             ; $i 
1239   0ABB             ; $hex_char 
1240   0ABB             ; $len 
1241   0ABB 52 07 00      sub sp, 7
1242   0ABE             ;; len = strlen(hex_string); 
1243   0ABE FA FA FF      lea d, [bp + -6] ; $len
1244   0AC1 DA            push d
1245   0AC2 FA 05 00      lea d, [bp + 5] ; $hex_string
1246   0AC5 2A            mov b, [d]
1247   0AC6 FD AB         swp b
1248   0AC8 D8            push b
1249   0AC9 07 88 05      call strlen
1250   0ACC 51 02 00      add sp, 2
1251   0ACF E7            pop d
1252   0AD0 FD 43         mov [d], b
1253   0AD2             ;; for (i = 0; i < len; i++) { 
1254   0AD2             _for19_init:
1255   0AD2 FA FD FF      lea d, [bp + -3] ; $i
1256   0AD5 DA            push d
1257   0AD6 26 00 00      mov b, $0
1258   0AD9 E7            pop d
1259   0ADA FD 43         mov [d], b
1260   0ADC             _for19_cond:
1261   0ADC FA FD FF      lea d, [bp + -3] ; $i
1262   0ADF 2A            mov b, [d]
1263   0AE0             ; START RELATIONAL
1264   0AE0 D7            push a
1265   0AE1 11            mov a, b
1266   0AE2 FA FA FF      lea d, [bp + -6] ; $len
1267   0AE5 2A            mov b, [d]
1268   0AE6 B0            cmp a, b
1269   0AE7 FD 73         slt ; < (signed)
1270   0AE9 E4            pop a
1271   0AEA             ; END RELATIONAL
1272   0AEA C0 00 00      cmp b, 0
1273   0AED C6 EF 0B      je _for19_exit
1274   0AF0             _for19_block:
1275   0AF0             ;; hex_char = hex_string[i]; 
1276   0AF0 FA FC FF      lea d, [bp + -4] ; $hex_char
1277   0AF3 DA            push d
1278   0AF4 FA 05 00      lea d, [bp + 5] ; $hex_string
1279   0AF7 FD 2A         mov d, [d]
1280   0AF9 D7            push a
1281   0AFA DA            push d
1282   0AFB FA FD FF      lea d, [bp + -3] ; $i
1283   0AFE 2A            mov b, [d]
1284   0AFF E7            pop d
1285   0B00 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
1286   0B04 E4            pop a
1287   0B05 32            mov bl, [d]
1288   0B06 A7 00         mov bh, 0
1289   0B08 E7            pop d
1290   0B09 FD 3E         mov [d], bl
1291   0B0B             ;; if (hex_char >= 'a' && hex_char <= 'f')  
1292   0B0B             _if20_cond:
1293   0B0B FA FC FF      lea d, [bp + -4] ; $hex_char
1294   0B0E 32            mov bl, [d]
1295   0B0F A7 00         mov bh, 0
1296   0B11             ; START RELATIONAL
1297   0B11 D7            push a
1298   0B12 11            mov a, b
1299   0B13 26 61 00      mov b, $61
1300   0B16 B0            cmp a, b
1301   0B17 FD 80         sge ; >=
1302   0B19 E4            pop a
1303   0B1A             ; END RELATIONAL
1304   0B1A D7            push a
1305   0B1B 11            mov a, b
1306   0B1C FA FC FF      lea d, [bp + -4] ; $hex_char
1307   0B1F 32            mov bl, [d]
1308   0B20 A7 00         mov bh, 0
1309   0B22             ; START RELATIONAL
1310   0B22 D7            push a
1311   0B23 11            mov a, b
1312   0B24 26 66 00      mov b, $66
1313   0B27 B0            cmp a, b
1314   0B28 FD 73         slt ; <= (signed)
1315   0B2A E4            pop a
1316   0B2B             ; END RELATIONAL
1317   0B2B FD A7         sand a, b
1318   0B2D E4            pop a
1319   0B2E C0 00 00      cmp b, 0
1320   0B31 C6 62 0B      je _if20_else
1321   0B34             _if20_true:
1322   0B34             ;; value = (value * 16) + (hex_char - 'a' + 10); 
1323   0B34 FA FF FF      lea d, [bp + -1] ; $value
1324   0B37 DA            push d
1325   0B38 FA FF FF      lea d, [bp + -1] ; $value
1326   0B3B 2A            mov b, [d]
1327   0B3C             ; START FACTORS
1328   0B3C D7            push a
1329   0B3D 11            mov a, b
1330   0B3E 26 10 00      mov b, $10
1331   0B41 AC            mul a, b ; *
1332   0B42 11            mov a, b
1333   0B43 27            mov b, a
1334   0B44 E4            pop a
1335   0B45             ; END FACTORS
1336   0B45             ; START TERMS
1337   0B45 D7            push a
1338   0B46 11            mov a, b
1339   0B47 FA FC FF      lea d, [bp + -4] ; $hex_char
1340   0B4A 32            mov bl, [d]
1341   0B4B A7 00         mov bh, 0
1342   0B4D             ; START TERMS
1343   0B4D D7            push a
1344   0B4E 11            mov a, b
1345   0B4F 26 61 00      mov b, $61
1346   0B52 60            sub a, b
1347   0B53 27            mov b, a
1348   0B54 11            mov a, b
1349   0B55 26 0A 00      mov b, $a
1350   0B58 56            add b, a
1351   0B59 E4            pop a
1352   0B5A             ; END TERMS
1353   0B5A 56            add b, a
1354   0B5B E4            pop a
1355   0B5C             ; END TERMS
1356   0B5C E7            pop d
1357   0B5D FD 43         mov [d], b
1358   0B5F 0A DF 0B      jmp _if20_exit
1359   0B62             _if20_else:
1360   0B62             ;; if (hex_char >= 'A' && hex_char <= 'F')  
1361   0B62             _if21_cond:
1362   0B62 FA FC FF      lea d, [bp + -4] ; $hex_char
1363   0B65 32            mov bl, [d]
1364   0B66 A7 00         mov bh, 0
1365   0B68             ; START RELATIONAL
1366   0B68 D7            push a
1367   0B69 11            mov a, b
1368   0B6A 26 41 00      mov b, $41
1369   0B6D B0            cmp a, b
1370   0B6E FD 80         sge ; >=
1371   0B70 E4            pop a
1372   0B71             ; END RELATIONAL
1373   0B71 D7            push a
1374   0B72 11            mov a, b
1375   0B73 FA FC FF      lea d, [bp + -4] ; $hex_char
1376   0B76 32            mov bl, [d]
1377   0B77 A7 00         mov bh, 0
1378   0B79             ; START RELATIONAL
1379   0B79 D7            push a
1380   0B7A 11            mov a, b
1381   0B7B 26 46 00      mov b, $46
1382   0B7E B0            cmp a, b
1383   0B7F FD 73         slt ; <= (signed)
1384   0B81 E4            pop a
1385   0B82             ; END RELATIONAL
1386   0B82 FD A7         sand a, b
1387   0B84 E4            pop a
1388   0B85 C0 00 00      cmp b, 0
1389   0B88 C6 B9 0B      je _if21_else
1390   0B8B             _if21_true:
1391   0B8B             ;; value = (value * 16) + (hex_char - 'A' + 10); 
1392   0B8B FA FF FF      lea d, [bp + -1] ; $value
1393   0B8E DA            push d
1394   0B8F FA FF FF      lea d, [bp + -1] ; $value
1395   0B92 2A            mov b, [d]
1396   0B93             ; START FACTORS
1397   0B93 D7            push a
1398   0B94 11            mov a, b
1399   0B95 26 10 00      mov b, $10
1400   0B98 AC            mul a, b ; *
1401   0B99 11            mov a, b
1402   0B9A 27            mov b, a
1403   0B9B E4            pop a
1404   0B9C             ; END FACTORS
1405   0B9C             ; START TERMS
1406   0B9C D7            push a
1407   0B9D 11            mov a, b
1408   0B9E FA FC FF      lea d, [bp + -4] ; $hex_char
1409   0BA1 32            mov bl, [d]
1410   0BA2 A7 00         mov bh, 0
1411   0BA4             ; START TERMS
1412   0BA4 D7            push a
1413   0BA5 11            mov a, b
1414   0BA6 26 41 00      mov b, $41
1415   0BA9 60            sub a, b
1416   0BAA 27            mov b, a
1417   0BAB 11            mov a, b
1418   0BAC 26 0A 00      mov b, $a
1419   0BAF 56            add b, a
1420   0BB0 E4            pop a
1421   0BB1             ; END TERMS
1422   0BB1 56            add b, a
1423   0BB2 E4            pop a
1424   0BB3             ; END TERMS
1425   0BB3 E7            pop d
1426   0BB4 FD 43         mov [d], b
1427   0BB6 0A DF 0B      jmp _if21_exit
1428   0BB9             _if21_else:
1429   0BB9             ;; value = (value * 16) + (hex_char - '0'); 
1430   0BB9 FA FF FF      lea d, [bp + -1] ; $value
1431   0BBC DA            push d
1432   0BBD FA FF FF      lea d, [bp + -1] ; $value
1433   0BC0 2A            mov b, [d]
1434   0BC1             ; START FACTORS
1435   0BC1 D7            push a
1436   0BC2 11            mov a, b
1437   0BC3 26 10 00      mov b, $10
1438   0BC6 AC            mul a, b ; *
1439   0BC7 11            mov a, b
1440   0BC8 27            mov b, a
1441   0BC9 E4            pop a
1442   0BCA             ; END FACTORS
1443   0BCA             ; START TERMS
1444   0BCA D7            push a
1445   0BCB 11            mov a, b
1446   0BCC FA FC FF      lea d, [bp + -4] ; $hex_char
1447   0BCF 32            mov bl, [d]
1448   0BD0 A7 00         mov bh, 0
1449   0BD2             ; START TERMS
1450   0BD2 D7            push a
1451   0BD3 11            mov a, b
1452   0BD4 26 30 00      mov b, $30
1453   0BD7 60            sub a, b
1454   0BD8 27            mov b, a
1455   0BD9 E4            pop a
1456   0BDA             ; END TERMS
1457   0BDA 56            add b, a
1458   0BDB E4            pop a
1459   0BDC             ; END TERMS
1460   0BDC E7            pop d
1461   0BDD FD 43         mov [d], b
1462   0BDF             _if21_exit:
1463   0BDF             _if20_exit:
1464   0BDF             _for19_update:
1465   0BDF FA FD FF      lea d, [bp + -3] ; $i
1466   0BE2 2A            mov b, [d]
1467   0BE3 D8            push b
1468   0BE4 FD 77         inc b
1469   0BE6 FA FD FF      lea d, [bp + -3] ; $i
1470   0BE9 FD 43         mov [d], b
1471   0BEB E5            pop b
1472   0BEC 0A DC 0A      jmp _for19_cond
1473   0BEF             _for19_exit:
1474   0BEF             ;; return value; 
1475   0BEF FA FF FF      lea d, [bp + -1] ; $value
1476   0BF2 2A            mov b, [d]
1477   0BF3 F9            leave
1478   0BF4 09            ret
1479   0BF5             
1480   0BF5             gets:
1481   0BF5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1482   0BF8             
1483   0BF8             ; --- BEGIN INLINE ASM BLOCK
1484   0BF8 FA 05 00      lea d, [bp + 5] ; $s
1485   0BFB 15            mov a, [d]
1486   0BFC 3C            mov d, a
1487   0BFD 07 98 14      call _gets
1488   0C00             ; --- END INLINE ASM BLOCK
1489   0C00             
1490   0C00             ;; return strlen(s); 
1491   0C00 FA 05 00      lea d, [bp + 5] ; $s
1492   0C03 2A            mov b, [d]
1493   0C04 FD AB         swp b
1494   0C06 D8            push b
1495   0C07 07 88 05      call strlen
1496   0C0A 51 02 00      add sp, 2
1497   0C0D F9            leave
1498   0C0E 09            ret
1499   0C0F             
1500   0C0F             print_signed:
1501   0C0F F8 00 00      enter 0 ; (push bp; mov bp, sp)
1502   0C12             ; $digits 
1503   0C12             ; $i 
1504   0C12 10 00 00      mov a, $0
1505   0C15 45 FA FF      mov [bp + -6], a
1506   0C18 52 07 00      sub sp, 7
1507   0C1B             ;; if (num < 0) { 
1508   0C1B             _if22_cond:
1509   0C1B FA 05 00      lea d, [bp + 5] ; $num
1510   0C1E 2A            mov b, [d]
1511   0C1F             ; START RELATIONAL
1512   0C1F D7            push a
1513   0C20 11            mov a, b
1514   0C21 26 00 00      mov b, $0
1515   0C24 B0            cmp a, b
1516   0C25 FD 73         slt ; < (signed)
1517   0C27 E4            pop a
1518   0C28             ; END RELATIONAL
1519   0C28 C0 00 00      cmp b, 0
1520   0C2B C6 48 0C      je _if22_else
1521   0C2E             _if22_true:
1522   0C2E             ;; putchar('-'); 
1523   0C2E 26 2D 00      mov b, $2d
1524   0C31 DD            push bl
1525   0C32 07 00 13      call putchar
1526   0C35 51 01 00      add sp, 1
1527   0C38             ;; num = -num; 
1528   0C38 FA 05 00      lea d, [bp + 5] ; $num
1529   0C3B DA            push d
1530   0C3C FA 05 00      lea d, [bp + 5] ; $num
1531   0C3F 2A            mov b, [d]
1532   0C40 FD 97         neg b
1533   0C42 E7            pop d
1534   0C43 FD 43         mov [d], b
1535   0C45 0A 6A 0C      jmp _if22_exit
1536   0C48             _if22_else:
1537   0C48             ;; if (num == 0) { 
1538   0C48             _if23_cond:
1539   0C48 FA 05 00      lea d, [bp + 5] ; $num
1540   0C4B 2A            mov b, [d]
1541   0C4C             ; START RELATIONAL
1542   0C4C D7            push a
1543   0C4D 11            mov a, b
1544   0C4E 26 00 00      mov b, $0
1545   0C51 B0            cmp a, b
1546   0C52 FD 71         seq ; ==
1547   0C54 E4            pop a
1548   0C55             ; END RELATIONAL
1549   0C55 C0 00 00      cmp b, 0
1550   0C58 C6 6A 0C      je _if23_exit
1551   0C5B             _if23_true:
1552   0C5B             ;; putchar('0'); 
1553   0C5B 26 30 00      mov b, $30
1554   0C5E DD            push bl
1555   0C5F 07 00 13      call putchar
1556   0C62 51 01 00      add sp, 1
1557   0C65             ;; return; 
1558   0C65 F9            leave
1559   0C66 09            ret
1560   0C67 0A 6A 0C      jmp _if23_exit
1561   0C6A             _if23_exit:
1562   0C6A             _if22_exit:
1563   0C6A             ;; while (num > 0) { 
1564   0C6A             _while24_cond:
1565   0C6A FA 05 00      lea d, [bp + 5] ; $num
1566   0C6D 2A            mov b, [d]
1567   0C6E             ; START RELATIONAL
1568   0C6E D7            push a
1569   0C6F 11            mov a, b
1570   0C70 26 00 00      mov b, $0
1571   0C73 B0            cmp a, b
1572   0C74 FD 7F         sgt ; >
1573   0C76 E4            pop a
1574   0C77             ; END RELATIONAL
1575   0C77 C0 00 00      cmp b, 0
1576   0C7A C6 C4 0C      je _while24_exit
1577   0C7D             _while24_block:
1578   0C7D             ;; digits[i] = '0' + (num % 10); 
1579   0C7D FA FC FF      lea d, [bp + -4] ; $digits
1580   0C80 D7            push a
1581   0C81 DA            push d
1582   0C82 FA FA FF      lea d, [bp + -6] ; $i
1583   0C85 2A            mov b, [d]
1584   0C86 E7            pop d
1585   0C87 5A            add d, b
1586   0C88 E4            pop a
1587   0C89 DA            push d
1588   0C8A 26 30 00      mov b, $30
1589   0C8D             ; START TERMS
1590   0C8D D7            push a
1591   0C8E 11            mov a, b
1592   0C8F FA 05 00      lea d, [bp + 5] ; $num
1593   0C92 2A            mov b, [d]
1594   0C93             ; START FACTORS
1595   0C93 D7            push a
1596   0C94 11            mov a, b
1597   0C95 26 0A 00      mov b, $a
1598   0C98 AE            div a, b ; 
1599   0C99 11            mov a, b
1600   0C9A 27            mov b, a
1601   0C9B E4            pop a
1602   0C9C             ; END FACTORS
1603   0C9C 56            add b, a
1604   0C9D E4            pop a
1605   0C9E             ; END TERMS
1606   0C9E E7            pop d
1607   0C9F FD 3E         mov [d], bl
1608   0CA1             ;; num = num / 10; 
1609   0CA1 FA 05 00      lea d, [bp + 5] ; $num
1610   0CA4 DA            push d
1611   0CA5 FA 05 00      lea d, [bp + 5] ; $num
1612   0CA8 2A            mov b, [d]
1613   0CA9             ; START FACTORS
1614   0CA9 D7            push a
1615   0CAA 11            mov a, b
1616   0CAB 26 0A 00      mov b, $a
1617   0CAE AE            div a, b
1618   0CAF 27            mov b, a
1619   0CB0 E4            pop a
1620   0CB1             ; END FACTORS
1621   0CB1 E7            pop d
1622   0CB2 FD 43         mov [d], b
1623   0CB4             ;; i++; 
1624   0CB4 FA FA FF      lea d, [bp + -6] ; $i
1625   0CB7 2A            mov b, [d]
1626   0CB8 D8            push b
1627   0CB9 FD 77         inc b
1628   0CBB FA FA FF      lea d, [bp + -6] ; $i
1629   0CBE FD 43         mov [d], b
1630   0CC0 E5            pop b
1631   0CC1 0A 6A 0C      jmp _while24_cond
1632   0CC4             _while24_exit:
1633   0CC4             ;; while (i > 0) { 
1634   0CC4             _while25_cond:
1635   0CC4 FA FA FF      lea d, [bp + -6] ; $i
1636   0CC7 2A            mov b, [d]
1637   0CC8             ; START RELATIONAL
1638   0CC8 D7            push a
1639   0CC9 11            mov a, b
1640   0CCA 26 00 00      mov b, $0
1641   0CCD B0            cmp a, b
1642   0CCE FD 7F         sgt ; >
1643   0CD0 E4            pop a
1644   0CD1             ; END RELATIONAL
1645   0CD1 C0 00 00      cmp b, 0
1646   0CD4 C6 FD 0C      je _while25_exit
1647   0CD7             _while25_block:
1648   0CD7             ;; i--; 
1649   0CD7 FA FA FF      lea d, [bp + -6] ; $i
1650   0CDA 2A            mov b, [d]
1651   0CDB D8            push b
1652   0CDC FD 7D         dec b
1653   0CDE FA FA FF      lea d, [bp + -6] ; $i
1654   0CE1 FD 43         mov [d], b
1655   0CE3 E5            pop b
1656   0CE4             ;; putchar(digits[i]); 
1657   0CE4 FA FC FF      lea d, [bp + -4] ; $digits
1658   0CE7 D7            push a
1659   0CE8 DA            push d
1660   0CE9 FA FA FF      lea d, [bp + -6] ; $i
1661   0CEC 2A            mov b, [d]
1662   0CED E7            pop d
1663   0CEE 5A            add d, b
1664   0CEF E4            pop a
1665   0CF0 32            mov bl, [d]
1666   0CF1 A7 00         mov bh, 0
1667   0CF3 DD            push bl
1668   0CF4 07 00 13      call putchar
1669   0CF7 51 01 00      add sp, 1
1670   0CFA 0A C4 0C      jmp _while25_cond
1671   0CFD             _while25_exit:
1672   0CFD F9            leave
1673   0CFE 09            ret
1674   0CFF             
1675   0CFF             print_signed_long:
1676   0CFF F8 00 00      enter 0 ; (push bp; mov bp, sp)
1677   0D02             ; $digits 
1678   0D02             ; $i 
1679   0D02 10 00 00      mov a, $0
1680   0D05 45 F5 FF      mov [bp + -11], a
1681   0D08 52 0C 00      sub sp, 12
1682   0D0B             ;; if (num < 0) { 
1683   0D0B             _if26_cond:
1684   0D0B FA 05 00      lea d, [bp + 5] ; $num
1685   0D0E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1686   0D11 FD 39         mov c, b ; And place it into C
1687   0D13 2A            mov b, [d] ; Lower Word in B
1688   0D14             ; START RELATIONAL
1689   0D14 D7            push a
1690   0D15 FD D8         push g
1691   0D17 11            mov a, b
1692   0D18 FD 7A         mov g, c
1693   0D1A 26 00 00      mov b, $0
1694   0D1D 38 00 00      mov c, 0
1695   0D20 FD AF 00 00   cmp32 ga, cb
1695   0D24 00 00 00 00 
1695   0D28 00 00 00 00 
1695   0D2C 00 00 00 00 
1695   0D30 00 00 00 00 
1695   0D34 00 00 00 00 
1695   0D38 00 00 00 00 
1695   0D3C 00 00 00 00 
1695   0D40 00 00 00 00 
1695   0D44 00 00 00 00 
1695   0D48 00 00 00 00 
1695   0D4C 00 00 00 00 
1695   0D50 00 00 00 00 
1695   0D54 00 00 00 00 
1695   0D58 00 00 00 00 
1695   0D5C 00 00 00 00 
1695   0D60 00 00 00 00 
1695   0D64 00 00 00 00 
1695   0D68 00 00 00 00 
1695   0D6C 00 00 00 00 
1695   0D70 00 00 00 00 
1695   0D74 00 00 00 00 
1695   0D78 00 00 00 00 
1695   0D7C 00 00 00 00 
1695   0D80 00 00 00 00 
1695   0D84 00 00 00 00 
1695   0D88 00 00 00 00 
1695   0D8C 00 00 00 00 
1695   0D90 00 00 00 00 
1695   0D94 00 00 00 00 
1695   0D98 00 00 00 00 
1695   0D9C 00 00 00 00 
1695   0DA0 00 00 00 00 
1695   0DA4 00 00 00 00 
1695   0DA8 00 00 00 00 
1695   0DAC 00 00 00 00 
1695   0DB0 00 00 00 00 
1695   0DB4 00 00 00 00 
1695   0DB8 00 00 00 00 
1695   0DBC 00 00 00 00 
1695   0DC0 00 00 00 00 
1695   0DC4 00 00 00 00 
1695   0DC8 00 00 00 00 
1695   0DCC 00 00 00 00 
1695   0DD0 00 00 00 00 
1695   0DD4 00 00 00 00 
1695   0DD8 00 00 00 00 
1695   0DDC 00 00 00 00 
1695   0DE0 00 00 00 00 
1695   0DE4 00 00 00 00 
1695   0DE8 00 00 00 00 
1695   0DEC 00 00 00 00 
1695   0DF0 00 00 00 00 
1695   0DF4 00 00 00 00 
1695   0DF8 00 00 00 00 
1695   0DFC 00 00 00 00 
1695   0E00 00 00 00 00 
1695   0E04 00 00 00 00 
1695   0E08 00 00 00 00 
1695   0E0C 00 00 00 00 
1695   0E10 00 00 00 00 
1695   0E14 00 00 00 00 
1695   0E18 00 00 00 00 
1695   0E1C 00 00 00 00 
1695   0E20 00 
1696   0E21 FD 73         slt ; <
1697   0E23 FD F1         pop g
1698   0E25 E4            pop a
1699   0E26             ; END RELATIONAL
1700   0E26 C0 00 00      cmp b, 0
1701   0E29 C6 50 0E      je _if26_else
1702   0E2C             _if26_true:
1703   0E2C             ;; putchar('-'); 
1704   0E2C 26 2D 00      mov b, $2d
1705   0E2F DD            push bl
1706   0E30 07 00 13      call putchar
1707   0E33 51 01 00      add sp, 1
1708   0E36             ;; num = -num; 
1709   0E36 FA 05 00      lea d, [bp + 5] ; $num
1710   0E39 DA            push d
1711   0E3A FA 05 00      lea d, [bp + 5] ; $num
1712   0E3D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1713   0E40 FD 39         mov c, b ; And place it into C
1714   0E42 2A            mov b, [d] ; Lower Word in B
1715   0E43 FD 97         neg b
1716   0E45 E7            pop d
1717   0E46 FD 43         mov [d], b
1718   0E48 28            mov b, c
1719   0E49 FD 44 02 00   mov [d + 2], b
1720   0E4D 0A 80 0F      jmp _if26_exit
1721   0E50             _if26_else:
1722   0E50             ;; if (num == 0) { 
1723   0E50             _if27_cond:
1724   0E50 FA 05 00      lea d, [bp + 5] ; $num
1725   0E53 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1726   0E56 FD 39         mov c, b ; And place it into C
1727   0E58 2A            mov b, [d] ; Lower Word in B
1728   0E59             ; START RELATIONAL
1729   0E59 D7            push a
1730   0E5A FD D8         push g
1731   0E5C 11            mov a, b
1732   0E5D FD 7A         mov g, c
1733   0E5F 26 00 00      mov b, $0
1734   0E62 38 00 00      mov c, 0
1735   0E65 FD AF 00 00   cmp32 ga, cb
1735   0E69 00 00 00 00 
1735   0E6D 00 00 00 00 
1735   0E71 00 00 00 00 
1735   0E75 00 00 00 00 
1735   0E79 00 00 00 00 
1735   0E7D 00 00 00 00 
1735   0E81 00 00 00 00 
1735   0E85 00 00 00 00 
1735   0E89 00 00 00 00 
1735   0E8D 00 00 00 00 
1735   0E91 00 00 00 00 
1735   0E95 00 00 00 00 
1735   0E99 00 00 00 00 
1735   0E9D 00 00 00 00 
1735   0EA1 00 00 00 00 
1735   0EA5 00 00 00 00 
1735   0EA9 00 00 00 00 
1735   0EAD 00 00 00 00 
1735   0EB1 00 00 00 00 
1735   0EB5 00 00 00 00 
1735   0EB9 00 00 00 00 
1735   0EBD 00 00 00 00 
1735   0EC1 00 00 00 00 
1735   0EC5 00 00 00 00 
1735   0EC9 00 00 00 00 
1735   0ECD 00 00 00 00 
1735   0ED1 00 00 00 00 
1735   0ED5 00 00 00 00 
1735   0ED9 00 00 00 00 
1735   0EDD 00 00 00 00 
1735   0EE1 00 00 00 00 
1735   0EE5 00 00 00 00 
1735   0EE9 00 00 00 00 
1735   0EED 00 00 00 00 
1735   0EF1 00 00 00 00 
1735   0EF5 00 00 00 00 
1735   0EF9 00 00 00 00 
1735   0EFD 00 00 00 00 
1735   0F01 00 00 00 00 
1735   0F05 00 00 00 00 
1735   0F09 00 00 00 00 
1735   0F0D 00 00 00 00 
1735   0F11 00 00 00 00 
1735   0F15 00 00 00 00 
1735   0F19 00 00 00 00 
1735   0F1D 00 00 00 00 
1735   0F21 00 00 00 00 
1735   0F25 00 00 00 00 
1735   0F29 00 00 00 00 
1735   0F2D 00 00 00 00 
1735   0F31 00 00 00 00 
1735   0F35 00 00 00 00 
1735   0F39 00 00 00 00 
1735   0F3D 00 00 00 00 
1735   0F41 00 00 00 00 
1735   0F45 00 00 00 00 
1735   0F49 00 00 00 00 
1735   0F4D 00 00 00 00 
1735   0F51 00 00 00 00 
1735   0F55 00 00 00 00 
1735   0F59 00 00 00 00 
1735   0F5D 00 00 00 00 
1735   0F61 00 00 00 00 
1735   0F65 00 
1736   0F66 FD 71         seq ; ==
1737   0F68 FD F1         pop g
1738   0F6A E4            pop a
1739   0F6B             ; END RELATIONAL
1740   0F6B C0 00 00      cmp b, 0
1741   0F6E C6 80 0F      je _if27_exit
1742   0F71             _if27_true:
1743   0F71             ;; putchar('0'); 
1744   0F71 26 30 00      mov b, $30
1745   0F74 DD            push bl
1746   0F75 07 00 13      call putchar
1747   0F78 51 01 00      add sp, 1
1748   0F7B             ;; return; 
1749   0F7B F9            leave
1750   0F7C 09            ret
1751   0F7D 0A 80 0F      jmp _if27_exit
1752   0F80             _if27_exit:
1753   0F80             _if26_exit:
1754   0F80             ;; while (num > 0) { 
1755   0F80             _while28_cond:
1756   0F80 FA 05 00      lea d, [bp + 5] ; $num
1757   0F83 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1758   0F86 FD 39         mov c, b ; And place it into C
1759   0F88 2A            mov b, [d] ; Lower Word in B
1760   0F89             ; START RELATIONAL
1761   0F89 D7            push a
1762   0F8A FD D8         push g
1763   0F8C 11            mov a, b
1764   0F8D FD 7A         mov g, c
1765   0F8F 26 00 00      mov b, $0
1766   0F92 38 00 00      mov c, 0
1767   0F95 FD 7F         sgt
1768   0F97 FD F1         pop g
1769   0F99 E4            pop a
1770   0F9A             ; END RELATIONAL
1771   0F9A C0 00 00      cmp b, 0
1772   0F9D C6 FD 0F      je _while28_exit
1773   0FA0             _while28_block:
1774   0FA0             ;; digits[i] = '0' + (num % 10); 
1775   0FA0 FA F7 FF      lea d, [bp + -9] ; $digits
1776   0FA3 D7            push a
1777   0FA4 DA            push d
1778   0FA5 FA F5 FF      lea d, [bp + -11] ; $i
1779   0FA8 2A            mov b, [d]
1780   0FA9 E7            pop d
1781   0FAA 5A            add d, b
1782   0FAB E4            pop a
1783   0FAC DA            push d
1784   0FAD 26 30 00      mov b, $30
1785   0FB0             ; START TERMS
1786   0FB0 D7            push a
1787   0FB1 11            mov a, b
1788   0FB2 FA 05 00      lea d, [bp + 5] ; $num
1789   0FB5 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1790   0FB8 FD 39         mov c, b ; And place it into C
1791   0FBA 2A            mov b, [d] ; Lower Word in B
1792   0FBB             ; START FACTORS
1793   0FBB D7            push a
1794   0FBC 11            mov a, b
1795   0FBD 26 0A 00      mov b, $a
1796   0FC0 AE            div a, b ; 
1797   0FC1 11            mov a, b
1798   0FC2 27            mov b, a
1799   0FC3 E4            pop a
1800   0FC4             ; END FACTORS
1801   0FC4 54            add a, b
1802   0FC5 D7            push a
1803   0FC6 FD 12         mov a, g
1804   0FC8 28            mov b, c
1805   0FC9 5C            adc a, b
1806   0FCA 39            mov c, a
1807   0FCB E5            pop b
1808   0FCC E4            pop a
1809   0FCD             ; END TERMS
1810   0FCD E7            pop d
1811   0FCE FD 3E         mov [d], bl
1812   0FD0             ;; num = num / 10; 
1813   0FD0 FA 05 00      lea d, [bp + 5] ; $num
1814   0FD3 DA            push d
1815   0FD4 FA 05 00      lea d, [bp + 5] ; $num
1816   0FD7 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1817   0FDA FD 39         mov c, b ; And place it into C
1818   0FDC 2A            mov b, [d] ; Lower Word in B
1819   0FDD             ; START FACTORS
1820   0FDD D7            push a
1821   0FDE 11            mov a, b
1822   0FDF 26 0A 00      mov b, $a
1823   0FE2 AE            div a, b
1824   0FE3 27            mov b, a
1825   0FE4 E4            pop a
1826   0FE5             ; END FACTORS
1827   0FE5 E7            pop d
1828   0FE6 FD 43         mov [d], b
1829   0FE8 28            mov b, c
1830   0FE9 FD 44 02 00   mov [d + 2], b
1831   0FED             ;; i++; 
1832   0FED FA F5 FF      lea d, [bp + -11] ; $i
1833   0FF0 2A            mov b, [d]
1834   0FF1 D8            push b
1835   0FF2 FD 77         inc b
1836   0FF4 FA F5 FF      lea d, [bp + -11] ; $i
1837   0FF7 FD 43         mov [d], b
1838   0FF9 E5            pop b
1839   0FFA 0A 80 0F      jmp _while28_cond
1840   0FFD             _while28_exit:
1841   0FFD             ;; while (i > 0) { 
1842   0FFD             _while29_cond:
1843   0FFD FA F5 FF      lea d, [bp + -11] ; $i
1844   1000 2A            mov b, [d]
1845   1001             ; START RELATIONAL
1846   1001 D7            push a
1847   1002 11            mov a, b
1848   1003 26 00 00      mov b, $0
1849   1006 B0            cmp a, b
1850   1007 FD 7F         sgt ; >
1851   1009 E4            pop a
1852   100A             ; END RELATIONAL
1853   100A C0 00 00      cmp b, 0
1854   100D C6 36 10      je _while29_exit
1855   1010             _while29_block:
1856   1010             ;; i--; 
1857   1010 FA F5 FF      lea d, [bp + -11] ; $i
1858   1013 2A            mov b, [d]
1859   1014 D8            push b
1860   1015 FD 7D         dec b
1861   1017 FA F5 FF      lea d, [bp + -11] ; $i
1862   101A FD 43         mov [d], b
1863   101C E5            pop b
1864   101D             ;; putchar(digits[i]); 
1865   101D FA F7 FF      lea d, [bp + -9] ; $digits
1866   1020 D7            push a
1867   1021 DA            push d
1868   1022 FA F5 FF      lea d, [bp + -11] ; $i
1869   1025 2A            mov b, [d]
1870   1026 E7            pop d
1871   1027 5A            add d, b
1872   1028 E4            pop a
1873   1029 32            mov bl, [d]
1874   102A A7 00         mov bh, 0
1875   102C DD            push bl
1876   102D 07 00 13      call putchar
1877   1030 51 01 00      add sp, 1
1878   1033 0A FD 0F      jmp _while29_cond
1879   1036             _while29_exit:
1880   1036 F9            leave
1881   1037 09            ret
1882   1038             
1883   1038             print_unsigned_long:
1884   1038 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1885   103B             ; $digits 
1886   103B             ; $i 
1887   103B 52 0C 00      sub sp, 12
1888   103E             ;; i = 0; 
1889   103E FA F5 FF      lea d, [bp + -11] ; $i
1890   1041 DA            push d
1891   1042 26 00 00      mov b, $0
1892   1045 E7            pop d
1893   1046 FD 43         mov [d], b
1894   1048             ;; if(num == 0){ 
1895   1048             _if30_cond:
1896   1048 FA 05 00      lea d, [bp + 5] ; $num
1897   104B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1898   104E FD 39         mov c, b ; And place it into C
1899   1050 2A            mov b, [d] ; Lower Word in B
1900   1051             ; START RELATIONAL
1901   1051 D7            push a
1902   1052 FD D8         push g
1903   1054 11            mov a, b
1904   1055 FD 7A         mov g, c
1905   1057 26 00 00      mov b, $0
1906   105A 38 00 00      mov c, 0
1907   105D FD AF 00 00   cmp32 ga, cb
1907   1061 00 00 00 00 
1907   1065 00 00 00 00 
1907   1069 00 00 00 00 
1907   106D 00 00 00 00 
1907   1071 00 00 00 00 
1907   1075 00 00 00 00 
1907   1079 00 00 00 00 
1907   107D 00 00 00 00 
1907   1081 00 00 00 00 
1907   1085 00 00 00 00 
1907   1089 00 00 00 00 
1907   108D 00 00 00 00 
1907   1091 00 00 00 00 
1907   1095 00 00 00 00 
1907   1099 00 00 00 00 
1907   109D 00 00 00 00 
1907   10A1 00 00 00 00 
1907   10A5 00 00 00 00 
1907   10A9 00 00 00 00 
1907   10AD 00 00 00 00 
1907   10B1 00 00 00 00 
1907   10B5 00 00 00 00 
1907   10B9 00 00 00 00 
1907   10BD 00 00 00 00 
1907   10C1 00 00 00 00 
1907   10C5 00 00 00 00 
1907   10C9 00 00 00 00 
1907   10CD 00 00 00 00 
1907   10D1 00 00 00 00 
1907   10D5 00 00 00 00 
1907   10D9 00 00 00 00 
1907   10DD 00 00 00 00 
1907   10E1 00 00 00 00 
1907   10E5 00 00 00 00 
1907   10E9 00 00 00 00 
1907   10ED 00 00 00 00 
1907   10F1 00 00 00 00 
1907   10F5 00 00 00 00 
1907   10F9 00 00 00 00 
1907   10FD 00 00 00 00 
1907   1101 00 00 00 00 
1907   1105 00 00 00 00 
1907   1109 00 00 00 00 
1907   110D 00 00 00 00 
1907   1111 00 00 00 00 
1907   1115 00 00 00 00 
1907   1119 00 00 00 00 
1907   111D 00 00 00 00 
1907   1121 00 00 00 00 
1907   1125 00 00 00 00 
1907   1129 00 00 00 00 
1907   112D 00 00 00 00 
1907   1131 00 00 00 00 
1907   1135 00 00 00 00 
1907   1139 00 00 00 00 
1907   113D 00 00 00 00 
1907   1141 00 00 00 00 
1907   1145 00 00 00 00 
1907   1149 00 00 00 00 
1907   114D 00 00 00 00 
1907   1151 00 00 00 00 
1907   1155 00 00 00 00 
1907   1159 00 00 00 00 
1907   115D 00 
1908   115E FD 71         seq ; ==
1909   1160 FD F1         pop g
1910   1162 E4            pop a
1911   1163             ; END RELATIONAL
1912   1163 C0 00 00      cmp b, 0
1913   1166 C6 78 11      je _if30_exit
1914   1169             _if30_true:
1915   1169             ;; putchar('0'); 
1916   1169 26 30 00      mov b, $30
1917   116C DD            push bl
1918   116D 07 00 13      call putchar
1919   1170 51 01 00      add sp, 1
1920   1173             ;; return; 
1921   1173 F9            leave
1922   1174 09            ret
1923   1175 0A 78 11      jmp _if30_exit
1924   1178             _if30_exit:
1925   1178             ;; while (num > 0) { 
1926   1178             _while31_cond:
1927   1178 FA 05 00      lea d, [bp + 5] ; $num
1928   117B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1929   117E FD 39         mov c, b ; And place it into C
1930   1180 2A            mov b, [d] ; Lower Word in B
1931   1181             ; START RELATIONAL
1932   1181 D7            push a
1933   1182 FD D8         push g
1934   1184 11            mov a, b
1935   1185 FD 7A         mov g, c
1936   1187 26 00 00      mov b, $0
1937   118A 38 00 00      mov c, 0
1938   118D FD 81         sgu
1939   118F FD F1         pop g
1940   1191 E4            pop a
1941   1192             ; END RELATIONAL
1942   1192 C0 00 00      cmp b, 0
1943   1195 C6 F5 11      je _while31_exit
1944   1198             _while31_block:
1945   1198             ;; digits[i] = '0' + (num % 10); 
1946   1198 FA F7 FF      lea d, [bp + -9] ; $digits
1947   119B D7            push a
1948   119C DA            push d
1949   119D FA F5 FF      lea d, [bp + -11] ; $i
1950   11A0 2A            mov b, [d]
1951   11A1 E7            pop d
1952   11A2 5A            add d, b
1953   11A3 E4            pop a
1954   11A4 DA            push d
1955   11A5 26 30 00      mov b, $30
1956   11A8             ; START TERMS
1957   11A8 D7            push a
1958   11A9 11            mov a, b
1959   11AA FA 05 00      lea d, [bp + 5] ; $num
1960   11AD 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1961   11B0 FD 39         mov c, b ; And place it into C
1962   11B2 2A            mov b, [d] ; Lower Word in B
1963   11B3             ; START FACTORS
1964   11B3 D7            push a
1965   11B4 11            mov a, b
1966   11B5 26 0A 00      mov b, $a
1967   11B8 AE            div a, b ; 
1968   11B9 11            mov a, b
1969   11BA 27            mov b, a
1970   11BB E4            pop a
1971   11BC             ; END FACTORS
1972   11BC 54            add a, b
1973   11BD D7            push a
1974   11BE FD 12         mov a, g
1975   11C0 28            mov b, c
1976   11C1 5C            adc a, b
1977   11C2 39            mov c, a
1978   11C3 E5            pop b
1979   11C4 E4            pop a
1980   11C5             ; END TERMS
1981   11C5 E7            pop d
1982   11C6 FD 3E         mov [d], bl
1983   11C8             ;; num = num / 10; 
1984   11C8 FA 05 00      lea d, [bp + 5] ; $num
1985   11CB DA            push d
1986   11CC FA 05 00      lea d, [bp + 5] ; $num
1987   11CF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
1988   11D2 FD 39         mov c, b ; And place it into C
1989   11D4 2A            mov b, [d] ; Lower Word in B
1990   11D5             ; START FACTORS
1991   11D5 D7            push a
1992   11D6 11            mov a, b
1993   11D7 26 0A 00      mov b, $a
1994   11DA AE            div a, b
1995   11DB 27            mov b, a
1996   11DC E4            pop a
1997   11DD             ; END FACTORS
1998   11DD E7            pop d
1999   11DE FD 43         mov [d], b
2000   11E0 28            mov b, c
2001   11E1 FD 44 02 00   mov [d + 2], b
2002   11E5             ;; i++; 
2003   11E5 FA F5 FF      lea d, [bp + -11] ; $i
2004   11E8 2A            mov b, [d]
2005   11E9 D8            push b
2006   11EA FD 77         inc b
2007   11EC FA F5 FF      lea d, [bp + -11] ; $i
2008   11EF FD 43         mov [d], b
2009   11F1 E5            pop b
2010   11F2 0A 78 11      jmp _while31_cond
2011   11F5             _while31_exit:
2012   11F5             ;; while (i > 0) { 
2013   11F5             _while32_cond:
2014   11F5 FA F5 FF      lea d, [bp + -11] ; $i
2015   11F8 2A            mov b, [d]
2016   11F9             ; START RELATIONAL
2017   11F9 D7            push a
2018   11FA 11            mov a, b
2019   11FB 26 00 00      mov b, $0
2020   11FE B0            cmp a, b
2021   11FF FD 7F         sgt ; >
2022   1201 E4            pop a
2023   1202             ; END RELATIONAL
2024   1202 C0 00 00      cmp b, 0
2025   1205 C6 2E 12      je _while32_exit
2026   1208             _while32_block:
2027   1208             ;; i--; 
2028   1208 FA F5 FF      lea d, [bp + -11] ; $i
2029   120B 2A            mov b, [d]
2030   120C D8            push b
2031   120D FD 7D         dec b
2032   120F FA F5 FF      lea d, [bp + -11] ; $i
2033   1212 FD 43         mov [d], b
2034   1214 E5            pop b
2035   1215             ;; putchar(digits[i]); 
2036   1215 FA F7 FF      lea d, [bp + -9] ; $digits
2037   1218 D7            push a
2038   1219 DA            push d
2039   121A FA F5 FF      lea d, [bp + -11] ; $i
2040   121D 2A            mov b, [d]
2041   121E E7            pop d
2042   121F 5A            add d, b
2043   1220 E4            pop a
2044   1221 32            mov bl, [d]
2045   1222 A7 00         mov bh, 0
2046   1224 DD            push bl
2047   1225 07 00 13      call putchar
2048   1228 51 01 00      add sp, 1
2049   122B 0A F5 11      jmp _while32_cond
2050   122E             _while32_exit:
2051   122E F9            leave
2052   122F 09            ret
2053   1230             
2054   1230             print_unsigned:
2055   1230 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2056   1233             ; $digits 
2057   1233             ; $i 
2058   1233 52 07 00      sub sp, 7
2059   1236             ;; i = 0; 
2060   1236 FA FA FF      lea d, [bp + -6] ; $i
2061   1239 DA            push d
2062   123A 26 00 00      mov b, $0
2063   123D E7            pop d
2064   123E FD 43         mov [d], b
2065   1240             ;; if(num == 0){ 
2066   1240             _if33_cond:
2067   1240 FA 05 00      lea d, [bp + 5] ; $num
2068   1243 2A            mov b, [d]
2069   1244             ; START RELATIONAL
2070   1244 D7            push a
2071   1245 11            mov a, b
2072   1246 26 00 00      mov b, $0
2073   1249 B0            cmp a, b
2074   124A FD 71         seq ; ==
2075   124C E4            pop a
2076   124D             ; END RELATIONAL
2077   124D C0 00 00      cmp b, 0
2078   1250 C6 62 12      je _if33_exit
2079   1253             _if33_true:
2080   1253             ;; putchar('0'); 
2081   1253 26 30 00      mov b, $30
2082   1256 DD            push bl
2083   1257 07 00 13      call putchar
2084   125A 51 01 00      add sp, 1
2085   125D             ;; return; 
2086   125D F9            leave
2087   125E 09            ret
2088   125F 0A 62 12      jmp _if33_exit
2089   1262             _if33_exit:
2090   1262             ;; while (num > 0) { 
2091   1262             _while34_cond:
2092   1262 FA 05 00      lea d, [bp + 5] ; $num
2093   1265 2A            mov b, [d]
2094   1266             ; START RELATIONAL
2095   1266 D7            push a
2096   1267 11            mov a, b
2097   1268 26 00 00      mov b, $0
2098   126B B0            cmp a, b
2099   126C FD 81         sgu ; > (unsigned)
2100   126E E4            pop a
2101   126F             ; END RELATIONAL
2102   126F C0 00 00      cmp b, 0
2103   1272 C6 BC 12      je _while34_exit
2104   1275             _while34_block:
2105   1275             ;; digits[i] = '0' + (num % 10); 
2106   1275 FA FC FF      lea d, [bp + -4] ; $digits
2107   1278 D7            push a
2108   1279 DA            push d
2109   127A FA FA FF      lea d, [bp + -6] ; $i
2110   127D 2A            mov b, [d]
2111   127E E7            pop d
2112   127F 5A            add d, b
2113   1280 E4            pop a
2114   1281 DA            push d
2115   1282 26 30 00      mov b, $30
2116   1285             ; START TERMS
2117   1285 D7            push a
2118   1286 11            mov a, b
2119   1287 FA 05 00      lea d, [bp + 5] ; $num
2120   128A 2A            mov b, [d]
2121   128B             ; START FACTORS
2122   128B D7            push a
2123   128C 11            mov a, b
2124   128D 26 0A 00      mov b, $a
2125   1290 AE            div a, b ; 
2126   1291 11            mov a, b
2127   1292 27            mov b, a
2128   1293 E4            pop a
2129   1294             ; END FACTORS
2130   1294 56            add b, a
2131   1295 E4            pop a
2132   1296             ; END TERMS
2133   1296 E7            pop d
2134   1297 FD 3E         mov [d], bl
2135   1299             ;; num = num / 10; 
2136   1299 FA 05 00      lea d, [bp + 5] ; $num
2137   129C DA            push d
2138   129D FA 05 00      lea d, [bp + 5] ; $num
2139   12A0 2A            mov b, [d]
2140   12A1             ; START FACTORS
2141   12A1 D7            push a
2142   12A2 11            mov a, b
2143   12A3 26 0A 00      mov b, $a
2144   12A6 AE            div a, b
2145   12A7 27            mov b, a
2146   12A8 E4            pop a
2147   12A9             ; END FACTORS
2148   12A9 E7            pop d
2149   12AA FD 43         mov [d], b
2150   12AC             ;; i++; 
2151   12AC FA FA FF      lea d, [bp + -6] ; $i
2152   12AF 2A            mov b, [d]
2153   12B0 D8            push b
2154   12B1 FD 77         inc b
2155   12B3 FA FA FF      lea d, [bp + -6] ; $i
2156   12B6 FD 43         mov [d], b
2157   12B8 E5            pop b
2158   12B9 0A 62 12      jmp _while34_cond
2159   12BC             _while34_exit:
2160   12BC             ;; while (i > 0) { 
2161   12BC             _while35_cond:
2162   12BC FA FA FF      lea d, [bp + -6] ; $i
2163   12BF 2A            mov b, [d]
2164   12C0             ; START RELATIONAL
2165   12C0 D7            push a
2166   12C1 11            mov a, b
2167   12C2 26 00 00      mov b, $0
2168   12C5 B0            cmp a, b
2169   12C6 FD 7F         sgt ; >
2170   12C8 E4            pop a
2171   12C9             ; END RELATIONAL
2172   12C9 C0 00 00      cmp b, 0
2173   12CC C6 F5 12      je _while35_exit
2174   12CF             _while35_block:
2175   12CF             ;; i--; 
2176   12CF FA FA FF      lea d, [bp + -6] ; $i
2177   12D2 2A            mov b, [d]
2178   12D3 D8            push b
2179   12D4 FD 7D         dec b
2180   12D6 FA FA FF      lea d, [bp + -6] ; $i
2181   12D9 FD 43         mov [d], b
2182   12DB E5            pop b
2183   12DC             ;; putchar(digits[i]); 
2184   12DC FA FC FF      lea d, [bp + -4] ; $digits
2185   12DF D7            push a
2186   12E0 DA            push d
2187   12E1 FA FA FF      lea d, [bp + -6] ; $i
2188   12E4 2A            mov b, [d]
2189   12E5 E7            pop d
2190   12E6 5A            add d, b
2191   12E7 E4            pop a
2192   12E8 32            mov bl, [d]
2193   12E9 A7 00         mov bh, 0
2194   12EB DD            push bl
2195   12EC 07 00 13      call putchar
2196   12EF 51 01 00      add sp, 1
2197   12F2 0A BC 12      jmp _while35_cond
2198   12F5             _while35_exit:
2199   12F5 F9            leave
2200   12F6 09            ret
2201   12F7             
2202   12F7             date:
2203   12F7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2204   12FA             
2205   12FA             ; --- BEGIN INLINE ASM BLOCK
2206   12FA 19 00         mov al, 0 
2207   12FC 05 07         syscall sys_datetime
2208   12FE             ; --- END INLINE ASM BLOCK
2209   12FE             
2210   12FE F9            leave
2211   12FF 09            ret
2212   1300             
2213   1300             putchar:
2214   1300 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2215   1303             
2216   1303             ; --- BEGIN INLINE ASM BLOCK
2217   1303 FA 05 00      lea d, [bp + 5] ; $c
2218   1306 1E            mov al, [d]
2219   1307 23            mov ah, al
2220   1308 07 91 14      call _putchar
2221   130B             ; --- END INLINE ASM BLOCK
2222   130B             
2223   130B F9            leave
2224   130C 09            ret
2225   130D             
2226   130D             getchar:
2227   130D F8 00 00      enter 0 ; (push bp; mov bp, sp)
2228   1310             ; $c 
2229   1310 52 01 00      sub sp, 1
2230   1313             
2231   1313             ; --- BEGIN INLINE ASM BLOCK
2232   1313 07 8A 14      call getch
2233   1316 1A            mov al, ah
2234   1317 FA 00 00      lea d, [bp + 0] ; $c
2235   131A 3E            mov [d], al
2236   131B             ; --- END INLINE ASM BLOCK
2237   131B             
2238   131B             ;; return c; 
2239   131B FA 00 00      lea d, [bp + 0] ; $c
2240   131E 32            mov bl, [d]
2241   131F A7 00         mov bh, 0
2242   1321 F9            leave
2243   1322 09            ret
2244   1323             
2245   1323             scann:
2246   1323 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2247   1326             ; $m 
2248   1326 52 02 00      sub sp, 2
2249   1329             
2250   1329             ; --- BEGIN INLINE ASM BLOCK
2251   1329 07 D5 16      call scan_u16d
2252   132C FA FF FF      lea d, [bp + -1] ; $m
2253   132F 43            mov [d], a
2254   1330             ; --- END INLINE ASM BLOCK
2255   1330             
2256   1330             ;; return m; 
2257   1330 FA FF FF      lea d, [bp + -1] ; $m
2258   1333 2A            mov b, [d]
2259   1334 F9            leave
2260   1335 09            ret
2261   1336             
2262   1336             puts:
2263   1336 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2264   1339             
2265   1339             ; --- BEGIN INLINE ASM BLOCK
2266   1339 FA 05 00      lea d, [bp + 5] ; $s
2267   133C 15            mov a, [d]
2268   133D 3C            mov d, a
2269   133E 07 DB 15      call _puts
2270   1341 10 00 0A      mov a, $0A00
2271   1344 05 03         syscall sys_io
2272   1346             ; --- END INLINE ASM BLOCK
2273   1346             
2274   1346 F9            leave
2275   1347 09            ret
2276   1348             
2277   1348             print:
2278   1348 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2279   134B             
2280   134B             ; --- BEGIN INLINE ASM BLOCK
2281   134B FA 05 00      lea d, [bp + 5] ; $s
2282   134E FD 2A         mov d, [d]
2283   1350 07 DB 15      call _puts
2284   1353             ; --- END INLINE ASM BLOCK
2285   1353             
2286   1353 F9            leave
2287   1354 09            ret
2288   1355             
2289   1355             getparam:
2290   1355 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2291   1358             ; $data 
2292   1358 52 01 00      sub sp, 1
2293   135B             
2294   135B             ; --- BEGIN INLINE ASM BLOCK
2295   135B 19 04         mov al, 4
2296   135D FA 05 00      lea d, [bp + 5] ; $address
2297   1360 FD 2A         mov d, [d]
2298   1362 05 0C         syscall sys_system
2299   1364 FA 00 00      lea d, [bp + 0] ; $data
2300   1367 FD 3E         mov [d], bl
2301   1369             ; --- END INLINE ASM BLOCK
2302   1369             
2303   1369             ;; return data; 
2304   1369 FA 00 00      lea d, [bp + 0] ; $data
2305   136C 32            mov bl, [d]
2306   136D A7 00         mov bh, 0
2307   136F F9            leave
2308   1370 09            ret
2309   1371             
2310   1371             clear:
2311   1371 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2312   1374             ;; print("\033[2J\033[H"); 
2313   1374 26 BB 64      mov b, _s32 ; "\033[2J\033[H"
2314   1377 FD AB         swp b
2315   1379 D8            push b
2316   137A 07 48 13      call print
2317   137D 51 02 00      add sp, 2
2318   1380 F9            leave
2319   1381 09            ret
2320   1382             
2321   1382             abs:
2322   1382 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2323   1385             ;; return i < 0 ? -i : i; 
2324   1385             _ternary36_cond:
2325   1385 FA 05 00      lea d, [bp + 5] ; $i
2326   1388 2A            mov b, [d]
2327   1389             ; START RELATIONAL
2328   1389 D7            push a
2329   138A 11            mov a, b
2330   138B 26 00 00      mov b, $0
2331   138E B0            cmp a, b
2332   138F FD 73         slt ; < (signed)
2333   1391 E4            pop a
2334   1392             ; END RELATIONAL
2335   1392 C0 00 00      cmp b, 0
2336   1395 C6 A1 13      je _ternary36_false
2337   1398             _ternary36_true:
2338   1398 FA 05 00      lea d, [bp + 5] ; $i
2339   139B 2A            mov b, [d]
2340   139C FD 97         neg b
2341   139E 0A A5 13      jmp _ternary36_exit
2342   13A1             _ternary36_false:
2343   13A1 FA 05 00      lea d, [bp + 5] ; $i
2344   13A4 2A            mov b, [d]
2345   13A5             _ternary36_exit:
2346   13A5 F9            leave
2347   13A6 09            ret
2348   13A7             
2349   13A7             include_stdio_asm:
2350   13A7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2351   13AA             
2352   13AA             ; --- BEGIN INLINE ASM BLOCK
2353   13AA             .include "lib/asm/stdio.asm"
0001+  13AA             ;-----------------------------------------------------------------------------
0002+  13AA             ; stdio.s
0003+  13AA             ;-----------------------------------------------------------------------------
0004+  13AA             .include "lib/asm/string.asm"
0001++ 13AA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002++ 13AA             ; string.s
0003++ 13AA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004++ 13AA             
0005++ 13AA             
0006++ 13AA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0007++ 13AA             ; _strrev
0008++ 13AA             ; reverse a string
0009++ 13AA             ; D = string address
0010++ 13AA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011++ 13AA             ; 01234
0012++ 13AA             _strrev:
0013++ 13AA 4B          	pusha
0014++ 13AB 07 F1 13    	call _strlen	; length in C
0015++ 13AE 12          	mov a, c
0016++ 13AF AF 01 00    	cmp a, 1
0017++ 13B2 D0 CC 13    	jleu _strrev_end	; check string length. string len must be > 1
0018++ 13B5 7D          	dec a
0019++ 13B6 FD 4E       	mov si, d	; beginning of string
0020++ 13B8 FD 50       	mov di, d	; beginning of string (for destinations)
0021++ 13BA 59          	add d, a	; end of string
0022++ 13BB 12          	mov a, c
0023++ 13BC FD 9B       	shr a		; divide by 2
0024++ 13BE 39          	mov c, a	; C now counts the steps
0025++ 13BF             _strrev_L0:
0026++ 13BF 32          	mov bl, [d]	; save load right-side char into BL
0027++ 13C0 F6          	lodsb		; load left-side char into AL; increase SI
0028++ 13C1 3E          	mov [d], al	; store left char into right side
0029++ 13C2 1B          	mov al, bl
0030++ 13C3 F7          	stosb		; store right-side char into left-side; increase DI
0031++ 13C4 7E          	dec c
0032++ 13C5 7F          	dec d
0033++ 13C6 C2 00 00    	cmp c, 0
0034++ 13C9 C7 BF 13    	jne _strrev_L0
0035++ 13CC             _strrev_end:
0036++ 13CC 4C          	popa
0037++ 13CD 09          	ret
0038++ 13CE             	
0039++ 13CE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0040++ 13CE             ; _strchr
0041++ 13CE             ; search string in D for char in AL
0042++ 13CE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0043++ 13CE             _strchr:
0044++ 13CE             _strchr_L0:
0045++ 13CE 32          	mov bl, [d]
0046++ 13CF C1 00       	cmp bl, 0
0047++ 13D1 C6 DC 13    	je _strchr_end
0048++ 13D4 BA          	cmp al, bl
0049++ 13D5 C6 DC 13    	je _strchr_end
0050++ 13D8 79          	inc d
0051++ 13D9 0A CE 13    	jmp _strchr_L0
0052++ 13DC             _strchr_end:
0053++ 13DC 1B          	mov al, bl
0054++ 13DD 09          	ret
0055++ 13DE             
0056++ 13DE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0057++ 13DE             ; _strstr
0058++ 13DE             ; find sub-string
0059++ 13DE             ; str1 in SI
0060++ 13DE             ; str2 in DI
0061++ 13DE             ; SI points to end of source string
0062++ 13DE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0063++ 13DE             _strstr:
0064++ 13DE DB          	push al
0065++ 13DF DA          	push d
0066++ 13E0 E3          	push di
0067++ 13E1             _strstr_loop:
0068++ 13E1 F3          	cmpsb					; compare a byte of the strings
0069++ 13E2 C7 ED 13    	jne _strstr_ret
0070++ 13E5 FC 00 00    	lea d, [di + 0]
0071++ 13E8 BD 00       	cmp byte[d], 0				; check if at end of string (null)
0072++ 13EA C7 E1 13    	jne _strstr_loop				; equal chars but not at end
0073++ 13ED             _strstr_ret:
0074++ 13ED F0          	pop di
0075++ 13EE E7          	pop d
0076++ 13EF E8          	pop al
0077++ 13F0 09          	ret
0078++ 13F1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0079++ 13F1             ; length of null terminated string
0080++ 13F1             ; result in C
0081++ 13F1             ; pointer in D
0082++ 13F1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083++ 13F1             _strlen:
0084++ 13F1 DA          	push d
0085++ 13F2 38 00 00    	mov c, 0
0086++ 13F5             _strlen_L1:
0087++ 13F5 BD 00       	cmp byte [d], 0
0088++ 13F7 C6 FF 13    	je _strlen_ret
0089++ 13FA 79          	inc d
0090++ 13FB 78          	inc c
0091++ 13FC 0A F5 13    	jmp _strlen_L1
0092++ 13FF             _strlen_ret:
0093++ 13FF E7          	pop d
0094++ 1400 09          	ret
0095++ 1401             
0096++ 1401             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0097++ 1401             ; STRCMP
0098++ 1401             ; compare two strings
0099++ 1401             ; str1 in SI
0100++ 1401             ; str2 in DI
0101++ 1401             ; CREATE A STRING COMPAIRON INSTRUCION ?????
0102++ 1401             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0103++ 1401             _strcmp:
0104++ 1401 DB          	push al
0105++ 1402 DA          	push d
0106++ 1403 E3          	push di
0107++ 1404 E2          	push si
0108++ 1405             _strcmp_loop:
0109++ 1405 F3          	cmpsb					; compare a byte of the strings
0110++ 1406 C7 11 14    	jne _strcmp_ret
0111++ 1409 FB FF FF    	lea d, [si +- 1]
0112++ 140C BD 00       	cmp byte[d], 0				; check if at end of string (null)
0113++ 140E C7 05 14    	jne _strcmp_loop				; equal chars but not at end
0114++ 1411             _strcmp_ret:
0115++ 1411 EF          	pop si
0116++ 1412 F0          	pop di
0117++ 1413 E7          	pop d
0118++ 1414 E8          	pop al
0119++ 1415 09          	ret
0120++ 1416             
0121++ 1416             
0122++ 1416             ; STRCPY
0123++ 1416             ; copy null terminated string from SI to DI
0124++ 1416             ; source in SI
0125++ 1416             ; destination in DI
0126++ 1416             _strcpy:
0127++ 1416 E2          	push si
0128++ 1417 E3          	push di
0129++ 1418 DB          	push al
0130++ 1419             _strcpy_L1:
0131++ 1419 F6          	lodsb
0132++ 141A F7          	stosb
0133++ 141B B9 00       	cmp al, 0
0134++ 141D C7 19 14    	jne _strcpy_L1
0135++ 1420             _strcpy_end:
0136++ 1420 E8          	pop al
0137++ 1421 F0          	pop di
0138++ 1422 EF          	pop si
0139++ 1423 09          	ret
0140++ 1424             
0141++ 1424             ; STRCAT
0142++ 1424             ; concatenate a NULL terminated string into string at DI, from string at SI
0143++ 1424             ; source in SI
0144++ 1424             ; destination in DI
0145++ 1424             _strcat:
0146++ 1424 E2          	push si
0147++ 1425 E3          	push di
0148++ 1426 D7          	push a
0149++ 1427 DA          	push d
0150++ 1428 50          	mov a, di
0151++ 1429 3C          	mov d, a
0152++ 142A             _strcat_goto_end_L1:
0153++ 142A BD 00       	cmp byte[d], 0
0154++ 142C C6 33 14    	je _strcat_start
0155++ 142F 79          	inc d
0156++ 1430 0A 2A 14    	jmp _strcat_goto_end_L1
0157++ 1433             _strcat_start:
0158++ 1433 FD 50       	mov di, d
0159++ 1435             _strcat_L1:
0160++ 1435 F6          	lodsb
0161++ 1436 F7          	stosb
0162++ 1437 B9 00       	cmp al, 0
0163++ 1439 C7 35 14    	jne _strcat_L1
0164++ 143C             _strcat_end:
0165++ 143C E7          	pop d
0166++ 143D E4          	pop a
0167++ 143E F0          	pop di
0168++ 143F EF          	pop si
0169++ 1440 09          	ret
0170++ 1441             
0171++ 1441             
0005+  1441             
0006+  1441             ;-----------------------------------------------------------------------------
0007+  1441             ; CONVERT ASCII 'O'..'F' TO INTEGER 0..15
0008+  1441             ; ASCII in BL
0009+  1441             ; result in AL
0010+  1441             ; ascii for F = 0100 0110
0011+  1441             ; ascii for 9 = 0011 1001
0012+  1441             ;-----------------------------------------------------------------------------
0013+  1441             hex_ascii_encode:
0014+  1441 1B            mov al, bl
0015+  1442 93 40         test al, $40        ; test if letter or number
0016+  1444 C7 4A 14      jnz hex_letter
0017+  1447 87 0F         and al, $0F        ; get number
0018+  1449 09            ret
0019+  144A             hex_letter:
0020+  144A 87 0F         and al, $0F        ; get letter
0021+  144C 6A 09         add al, 9
0022+  144E 09            ret
0023+  144F             
0024+  144F             ;-----------------------------------------------------------------------------
0025+  144F             ; ATOI
0026+  144F             ; 2 letter hex string in B
0027+  144F             ; 8bit integer returned in AL
0028+  144F             ;-----------------------------------------------------------------------------
0029+  144F             _atoi:
0030+  144F D8            push b
0031+  1450 07 41 14      call hex_ascii_encode      ; convert BL to 4bit code in AL
0032+  1453 30            mov bl, bh
0033+  1454 DB            push al          ; save a
0034+  1455 07 41 14      call hex_ascii_encode
0035+  1458 EA            pop bl  
0036+  1459 FD 9E 04      shl al, 4
0037+  145C 8C            or al, bl
0038+  145D E5            pop b
0039+  145E 09            ret  
0040+  145F             
0041+  145F             
0042+  145F             ;-----------------------------------------------------------------------------
0043+  145F             ; ITOA
0044+  145F             ; 8bit value in BL
0045+  145F             ; 2 byte ASCII result in A
0046+  145F             ;-----------------------------------------------------------------------------
0047+  145F             _itoa:
0048+  145F DA            push d
0049+  1460 D8            push b
0050+  1461 A7 00         mov bh, 0
0051+  1463 FD A4 04      shr bl, 4  
0052+  1466 74            mov d, b
0053+  1467 1F 0F 17      mov al, [d + s_hex_digits]
0054+  146A 23            mov ah, al
0055+  146B               
0056+  146B E5            pop b
0057+  146C D8            push b
0058+  146D A7 00         mov bh, 0
0059+  146F FD 87 0F      and bl, $0F
0060+  1472 74            mov d, b
0061+  1473 1F 0F 17      mov al, [d + s_hex_digits]
0062+  1476 E5            pop b
0063+  1477 E7            pop d
0064+  1478 09            ret
0065+  1479             
0066+  1479             ;-----------------------------------------------------------------------------
0067+  1479             ; HEX STRING TO BINARY
0068+  1479             ; di = destination address
0069+  1479             ; si = source
0070+  1479             ;-----------------------------------------------------------------------------
0071+  1479             _hex_to_int:
0072+  1479             _hex_to_int_L1:
0073+  1479 F6            lodsb          ; load from [SI] to AL
0074+  147A B9 00         cmp al, 0        ; check if ASCII 0
0075+  147C C6 89 14      jz _hex_to_int_ret
0076+  147F 36            mov bh, al
0077+  1480 F6            lodsb
0078+  1481 2F            mov bl, al
0079+  1482 07 4F 14      call _atoi        ; convert ASCII byte in B to int (to AL)
0080+  1485 F7            stosb          ; store AL to [DI]
0081+  1486 0A 79 14      jmp _hex_to_int_L1
0082+  1489             _hex_to_int_ret:
0083+  1489 09            ret    
0084+  148A             
0085+  148A             ;-----------------------------------------------------------------------------
0086+  148A             ; GETCHAR
0087+  148A             ; char in ah
0088+  148A             ;-----------------------------------------------------------------------------
0089+  148A             getch:
0090+  148A DB            push al
0091+  148B             getch_retry:
0092+  148B 19 01         mov al, 1
0093+  148D 05 03         syscall sys_io      ; receive in AH
0094+  148F E8            pop al
0095+  1490 09            ret
0096+  1491             
0097+  1491             ;-----------------------------------------------------------------------------
0098+  1491             ; PUTCHAR
0099+  1491             ; char in ah
0100+  1491             ;-----------------------------------------------------------------------------
0101+  1491             _putchar:
0102+  1491 D7            push a
0103+  1492 19 00         mov al, 0
0104+  1494 05 03         syscall sys_io      ; char in AH
0105+  1496 E4            pop a
0106+  1497 09            ret
0107+  1498             
0108+  1498             ;-----------------------------------------------------------------------------
0109+  1498             ;; INPUT A STRING
0110+  1498             ;; terminates with null
0111+  1498             ;; pointer in D
0112+  1498             ;-----------------------------------------------------------------------------
0113+  1498             _gets:
0114+  1498 D7            push a
0115+  1499 DA            push d
0116+  149A             _gets_loop:
0117+  149A 19 01         mov al, 1
0118+  149C 05 03         syscall sys_io      ; receive in AH
0119+  149E B9 00         cmp al, 0        ; check error code (AL)
0120+  14A0 C6 9A 14      je _gets_loop      ; if no char received, retry
0121+  14A3             
0122+  14A3 76 1B         cmp ah, 27
0123+  14A5 C6 C6 14      je _gets_ansi_esc
0124+  14A8 76 0A         cmp ah, $0A        ; LF
0125+  14AA C6 31 15      je _gets_end
0126+  14AD 76 0D         cmp ah, $0D        ; CR
0127+  14AF C6 31 15      je _gets_end
0128+  14B2 76 5C         cmp ah, $5C        ; '\\'
0129+  14B4 C6 F2 14      je _gets_escape
0130+  14B7               
0131+  14B7 76 08         cmp ah, $08      ; check for backspace
0132+  14B9 C6 C2 14      je _gets_backspace
0133+  14BC             
0134+  14BC 1A            mov al, ah
0135+  14BD 3E            mov [d], al
0136+  14BE 79            inc d
0137+  14BF 0A 9A 14      jmp _gets_loop
0138+  14C2             _gets_backspace:
0139+  14C2 7F            dec d
0140+  14C3 0A 9A 14      jmp _gets_loop
0141+  14C6             _gets_ansi_esc:
0142+  14C6 19 01         mov al, 1
0143+  14C8 05 03         syscall sys_io        ; receive in AH without echo
0144+  14CA B9 00         cmp al, 0          ; check error code (AL)
0145+  14CC C6 C6 14      je _gets_ansi_esc    ; if no char received, retry
0146+  14CF 76 5B         cmp ah, '['
0147+  14D1 C7 9A 14      jne _gets_loop
0148+  14D4             _gets_ansi_esc_2:
0149+  14D4 19 01         mov al, 1
0150+  14D6 05 03         syscall sys_io          ; receive in AH without echo
0151+  14D8 B9 00         cmp al, 0            ; check error code (AL)
0152+  14DA C6 D4 14      je _gets_ansi_esc_2  ; if no char received, retry
0153+  14DD 76 44         cmp ah, 'D'
0154+  14DF C6 EA 14      je _gets_left_arrow
0155+  14E2 76 43         cmp ah, 'C'
0156+  14E4 C6 EE 14      je _gets_right_arrow
0157+  14E7 0A 9A 14      jmp _gets_loop
0158+  14EA             _gets_left_arrow:
0159+  14EA 7F            dec d
0160+  14EB 0A 9A 14      jmp _gets_loop
0161+  14EE             _gets_right_arrow:
0162+  14EE 79            inc d
0163+  14EF 0A 9A 14      jmp _gets_loop
0164+  14F2             _gets_escape:
0165+  14F2 19 01         mov al, 1
0166+  14F4 05 03         syscall sys_io      ; receive in AH
0167+  14F6 B9 00         cmp al, 0        ; check error code (AL)
0168+  14F8 C6 F2 14      je _gets_escape      ; if no char received, retry
0169+  14FB 76 6E         cmp ah, 'n'
0170+  14FD C6 1C 15      je _gets_LF
0171+  1500 76 72         cmp ah, 'r'
0172+  1502 C6 23 15      je _gets_CR
0173+  1505 76 30         cmp ah, '0'
0174+  1507 C6 2A 15      je _gets_NULL
0175+  150A 76 5C         cmp ah, $5C  ; '\'
0176+  150C C6 15 15      je _gets_slash
0177+  150F 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0178+  1510 3E            mov [d], al
0179+  1511 79            inc d
0180+  1512 0A 9A 14      jmp _gets_loop
0181+  1515             _gets_slash:
0182+  1515 19 5C         mov al, $5C
0183+  1517 3E            mov [d], al
0184+  1518 79            inc d
0185+  1519 0A 9A 14      jmp _gets_loop
0186+  151C             _gets_LF:
0187+  151C 19 0A         mov al, $0A
0188+  151E 3E            mov [d], al
0189+  151F 79            inc d
0190+  1520 0A 9A 14      jmp _gets_loop
0191+  1523             _gets_CR:
0192+  1523 19 0D         mov al, $0D
0193+  1525 3E            mov [d], al
0194+  1526 79            inc d
0195+  1527 0A 9A 14      jmp _gets_loop
0196+  152A             _gets_NULL:
0197+  152A 19 00         mov al, $00
0198+  152C 3E            mov [d], al
0199+  152D 79            inc d
0200+  152E 0A 9A 14      jmp _gets_loop
0201+  1531             _gets_end:
0202+  1531 19 00         mov al, 0
0203+  1533 3E            mov [d], al        ; terminate string
0204+  1534 E7            pop d
0205+  1535 E4            pop a
0206+  1536 09            ret
0207+  1537             
0208+  1537             ;-----------------------------------------------------------------------------
0209+  1537             ;; INPUT TEXT
0210+  1537             ;; terminated with CTRL+D
0211+  1537             ;; pointer in D
0212+  1537             ;-----------------------------------------------------------------------------
0213+  1537             _gettxt:
0214+  1537 D7            push a
0215+  1538 DA            push d
0216+  1539             _gettxt_loop:
0217+  1539 19 01         mov al, 1
0218+  153B 05 03         syscall sys_io      ; receive in AH
0219+  153D B9 00         cmp al, 0        ; check error code (AL)
0220+  153F C6 39 15      je _gettxt_loop    ; if no char received, retry
0221+  1542 76 04         cmp ah, 4      ; EOT
0222+  1544 C6 82 15      je _gettxt_end
0223+  1547 76 08         cmp ah, $08      ; check for backspace
0224+  1549 C6 7E 15      je _gettxt_backspace
0225+  154C 76 5C         cmp ah, $5C        ; '\'
0226+  154E C6 57 15      je _gettxt_escape
0227+  1551 1A            mov al, ah
0228+  1552 3E            mov [d], al
0229+  1553 79            inc d
0230+  1554 0A 39 15      jmp _gettxt_loop
0231+  1557             _gettxt_escape:
0232+  1557 19 01         mov al, 1
0233+  1559 05 03         syscall sys_io      ; receive in AH
0234+  155B B9 00         cmp al, 0        ; check error code (AL)
0235+  155D C6 57 15      je _gettxt_escape    ; if no char received, retry
0236+  1560 76 6E         cmp ah, 'n'
0237+  1562 C6 70 15      je _gettxt_LF
0238+  1565 76 72         cmp ah, 'r'
0239+  1567 C6 77 15      je _gettxt_CR
0240+  156A 1A            mov al, ah        ; if not a known escape, it is just a normal letter
0241+  156B 3E            mov [d], al
0242+  156C 79            inc d
0243+  156D 0A 39 15      jmp _gettxt_loop
0244+  1570             _gettxt_LF:
0245+  1570 19 0A         mov al, $0A
0246+  1572 3E            mov [d], al
0247+  1573 79            inc d
0248+  1574 0A 39 15      jmp _gettxt_loop
0249+  1577             _gettxt_CR:
0250+  1577 19 0D         mov al, $0D
0251+  1579 3E            mov [d], al
0252+  157A 79            inc d
0253+  157B 0A 39 15      jmp _gettxt_loop
0254+  157E             _gettxt_backspace:
0255+  157E 7F            dec d
0256+  157F 0A 39 15      jmp _gettxt_loop
0257+  1582             _gettxt_end:
0258+  1582 19 00         mov al, 0
0259+  1584 3E            mov [d], al        ; terminate string
0260+  1585 E7            pop d
0261+  1586 E4            pop a
0262+  1587 09            ret
0263+  1588             
0264+  1588             ;-----------------------------------------------------------------------------
0265+  1588             ; PRINT NEW LINE
0266+  1588             ;-----------------------------------------------------------------------------
0267+  1588             printnl:
0268+  1588 D7            push a
0269+  1589 10 00 0A      mov a, $0A00
0270+  158C 05 03         syscall sys_io
0271+  158E 10 00 0D      mov a, $0D00
0272+  1591 05 03         syscall sys_io
0273+  1593 E4            pop a
0274+  1594 09            ret
0275+  1595             
0276+  1595             ;-----------------------------------------------------------------------------
0277+  1595             ; _strtoint
0278+  1595             ; 4 digit hex string number in d
0279+  1595             ; integer returned in A
0280+  1595             ;-----------------------------------------------------------------------------
0281+  1595             _strtointx:
0282+  1595 D8            push b
0283+  1596 32            mov bl, [d]
0284+  1597 37            mov bh, bl
0285+  1598 33 01 00      mov bl, [d + 1]
0286+  159B 07 4F 14      call _atoi        ; convert to int in AL
0287+  159E 23            mov ah, al        ; move to AH
0288+  159F 33 02 00      mov bl, [d + 2]
0289+  15A2 37            mov bh, bl
0290+  15A3 33 03 00      mov bl, [d + 3]
0291+  15A6 07 4F 14      call _atoi        ; convert to int in AL
0292+  15A9 E5            pop b
0293+  15AA 09            ret
0294+  15AB             
0295+  15AB             ;-----------------------------------------------------------------------------
0296+  15AB             ; _strtoint
0297+  15AB             ; 5 digit base10 string number in d
0298+  15AB             ; integer returned in A
0299+  15AB             ;-----------------------------------------------------------------------------
0300+  15AB             _strtoint:
0301+  15AB E2            push si
0302+  15AC D8            push b
0303+  15AD D9            push c
0304+  15AE DA            push d
0305+  15AF 07 F1 13      call _strlen      ; get string length in C
0306+  15B2 7E            dec c
0307+  15B3 FD 4E         mov si, d
0308+  15B5 12            mov a, c
0309+  15B6 FD 99         shl a
0310+  15B8 3B 27 17      mov d, table_power
0311+  15BB 59            add d, a
0312+  15BC 38 00 00      mov c, 0
0313+  15BF             _strtoint_L0:
0314+  15BF F6            lodsb      ; load ASCII to al
0315+  15C0 B9 00         cmp al, 0
0316+  15C2 C6 D5 15      je _strtoint_end
0317+  15C5 6F 30         sub al, $30    ; make into integer
0318+  15C7 22 00         mov ah, 0
0319+  15C9 2A            mov b, [d]
0320+  15CA AC            mul a, b      ; result in B since it fits in 16bits
0321+  15CB 11            mov a, b
0322+  15CC 28            mov b, c
0323+  15CD 54            add a, b
0324+  15CE 39            mov c, a
0325+  15CF 63 02 00      sub d, 2
0326+  15D2 0A BF 15      jmp _strtoint_L0
0327+  15D5             _strtoint_end:
0328+  15D5 12            mov a, c
0329+  15D6 E7            pop d
0330+  15D7 E6            pop c
0331+  15D8 E5            pop b
0332+  15D9 EF            pop si
0333+  15DA 09            ret
0334+  15DB             
0335+  15DB             ;-----------------------------------------------------------------------------
0336+  15DB             ; PRINT NULL TERMINATED STRING
0337+  15DB             ; pointer in D
0338+  15DB             ;-----------------------------------------------------------------------------
0339+  15DB             _puts:
0340+  15DB D7            push a
0341+  15DC DA            push d
0342+  15DD             _puts_L1:
0343+  15DD 1E            mov al, [d]
0344+  15DE B9 00         cmp al, 0
0345+  15E0 C6 EC 15      jz _puts_END
0346+  15E3 23            mov ah, al
0347+  15E4 19 00         mov al, 0
0348+  15E6 05 03         syscall sys_io
0349+  15E8 79            inc d
0350+  15E9 0A DD 15      jmp _puts_L1
0351+  15EC             _puts_END:
0352+  15EC E7            pop d
0353+  15ED E4            pop a
0354+  15EE 09            ret
0355+  15EF             
0356+  15EF             ;-----------------------------------------------------------------------------
0357+  15EF             ; PRINT N SIZE STRING
0358+  15EF             ; pointer in D
0359+  15EF             ; size in C
0360+  15EF             ;-----------------------------------------------------------------------------
0361+  15EF             _putsn:
0362+  15EF DB            push al
0363+  15F0 DA            push d
0364+  15F1 D9            push c
0365+  15F2             _putsn_L0:
0366+  15F2 1E            mov al, [d]
0367+  15F3 23            mov ah, al
0368+  15F4 19 00         mov al, 0
0369+  15F6 05 03         syscall sys_io
0370+  15F8 79            inc d
0371+  15F9 7E            dec c  
0372+  15FA C2 00 00      cmp c, 0
0373+  15FD C7 F2 15      jne _putsn_L0
0374+  1600             _putsn_end:
0375+  1600 E6            pop c
0376+  1601 E7            pop d
0377+  1602 E8            pop al
0378+  1603 09            ret
0379+  1604             
0380+  1604             ;-----------------------------------------------------------------------------
0381+  1604             ; print 16bit decimal number
0382+  1604             ; input number in A
0383+  1604             ;-----------------------------------------------------------------------------
0384+  1604             print_u16d:
0385+  1604 D7            push a
0386+  1605 D8            push b
0387+  1606 26 10 27      mov b, 10000
0388+  1609 AE            div a, b      ; get 10000's coeff.
0389+  160A 07 2C 16      call print_number
0390+  160D 11            mov a, b
0391+  160E 26 E8 03      mov b, 1000
0392+  1611 AE            div a, b      ; get 1000's coeff.
0393+  1612 07 2C 16      call print_number
0394+  1615 11            mov a, b
0395+  1616 26 64 00      mov b, 100
0396+  1619 AE            div a, b
0397+  161A 07 2C 16      call print_number
0398+  161D 11            mov a, b
0399+  161E 26 0A 00      mov b, 10
0400+  1621 AE            div a, b
0401+  1622 07 2C 16      call print_number
0402+  1625 1B            mov al, bl      ; 1's coeff in bl
0403+  1626 07 2C 16      call print_number
0404+  1629 E5            pop b
0405+  162A E4            pop a
0406+  162B 09            ret
0407+  162C             
0408+  162C             ;-----------------------------------------------------------------------------
0409+  162C             ; print AL
0410+  162C             ;-----------------------------------------------------------------------------
0411+  162C             print_number:
0412+  162C 6A 30         add al, $30
0413+  162E 23            mov ah, al
0414+  162F 07 91 14      call _putchar
0415+  1632 09            ret
0416+  1633             
0417+  1633             ;-----------------------------------------------------------------------------
0418+  1633             ; PRINT 16BIT HEX INTEGER
0419+  1633             ; integer value in reg B
0420+  1633             ;-----------------------------------------------------------------------------
0421+  1633             print_u16x:
0422+  1633 D7            push a
0423+  1634 D8            push b
0424+  1635 DD            push bl
0425+  1636 30            mov bl, bh
0426+  1637 07 5F 14      call _itoa        ; convert bh to char in A
0427+  163A 2F            mov bl, al        ; save al
0428+  163B 19 00         mov al, 0
0429+  163D 05 03         syscall sys_io        ; display AH
0430+  163F 24            mov ah, bl        ; retrieve al
0431+  1640 19 00         mov al, 0
0432+  1642 05 03         syscall sys_io        ; display AL
0433+  1644             
0434+  1644 EA            pop bl
0435+  1645 07 5F 14      call _itoa        ; convert bh to char in A
0436+  1648 2F            mov bl, al        ; save al
0437+  1649 19 00         mov al, 0
0438+  164B 05 03         syscall sys_io        ; display AH
0439+  164D 24            mov ah, bl        ; retrieve al
0440+  164E 19 00         mov al, 0
0441+  1650 05 03         syscall sys_io        ; display AL
0442+  1652             
0443+  1652 E5            pop b
0444+  1653 E4            pop a
0445+  1654 09            ret
0446+  1655             
0447+  1655             ;-----------------------------------------------------------------------------
0448+  1655             ; INPUT 16BIT HEX INTEGER
0449+  1655             ; read 16bit integer into A
0450+  1655             ;-----------------------------------------------------------------------------
0451+  1655             scan_u16x:
0452+  1655 F8 10 00      enter 16
0453+  1658 D8            push b
0454+  1659 DA            push d
0455+  165A             
0456+  165A FA F1 FF      lea d, [bp + -15]
0457+  165D 07 98 14      call _gets        ; get number
0458+  1660             
0459+  1660 32            mov bl, [d]
0460+  1661 37            mov bh, bl
0461+  1662 33 01 00      mov bl, [d + 1]
0462+  1665 07 4F 14      call _atoi        ; convert to int in AL
0463+  1668 23            mov ah, al        ; move to AH
0464+  1669             
0465+  1669 33 02 00      mov bl, [d + 2]
0466+  166C 37            mov bh, bl
0467+  166D 33 03 00      mov bl, [d + 3]
0468+  1670 07 4F 14      call _atoi        ; convert to int in AL
0469+  1673             
0470+  1673 E7            pop d
0471+  1674 E5            pop b
0472+  1675 F9            leave
0473+  1676 09            ret
0474+  1677             
0475+  1677             ;-----------------------------------------------------------------------------
0476+  1677             ; PRINT 8bit HEX INTEGER
0477+  1677             ; integer value in reg bl
0478+  1677             ;-----------------------------------------------------------------------------
0479+  1677             print_u8x:
0480+  1677 D7            push a
0481+  1678 DD            push bl
0482+  1679             
0483+  1679 07 5F 14      call _itoa        ; convert bl to char in A
0484+  167C 2F            mov bl, al        ; save al
0485+  167D 19 00         mov al, 0
0486+  167F 05 03         syscall sys_io        ; display AH
0487+  1681 24            mov ah, bl        ; retrieve al
0488+  1682 19 00         mov al, 0
0489+  1684 05 03         syscall sys_io        ; display AL
0490+  1686             
0491+  1686 EA            pop bl
0492+  1687 E4            pop a
0493+  1688 09            ret
0494+  1689             
0495+  1689             ;-----------------------------------------------------------------------------
0496+  1689             ; print 8bit decimal unsigned number
0497+  1689             ; input number in AL
0498+  1689             ;-----------------------------------------------------------------------------
0499+  1689             print_u8d:
0500+  1689 D7            push a
0501+  168A D8            push b
0502+  168B             
0503+  168B 22 00         mov ah, 0
0504+  168D 26 64 00      mov b, 100
0505+  1690 AE            div a, b
0506+  1691 D8            push b      ; save remainder
0507+  1692 B9 00         cmp al, 0
0508+  1694 C6 9E 16      je skip100
0509+  1697 6A 30         add al, $30
0510+  1699 23            mov ah, al
0511+  169A 19 00         mov al, 0
0512+  169C 05 03         syscall sys_io  ; print coeff
0513+  169E             skip100:
0514+  169E E4            pop a
0515+  169F 22 00         mov ah, 0
0516+  16A1 26 0A 00      mov b, 10
0517+  16A4 AE            div a, b
0518+  16A5 D8            push b      ; save remainder
0519+  16A6 B9 00         cmp al, 0
0520+  16A8 C6 B2 16      je skip10
0521+  16AB 6A 30         add al, $30
0522+  16AD 23            mov ah, al
0523+  16AE 19 00         mov al, 0
0524+  16B0 05 03         syscall sys_io  ; print coeff
0525+  16B2             skip10:
0526+  16B2 E4            pop a
0527+  16B3 1B            mov al, bl
0528+  16B4 6A 30         add al, $30
0529+  16B6 23            mov ah, al
0530+  16B7 19 00         mov al, 0
0531+  16B9 05 03         syscall sys_io  ; print coeff
0532+  16BB E5            pop b
0533+  16BC E4            pop a
0534+  16BD 09            ret
0535+  16BE             
0536+  16BE             ;-----------------------------------------------------------------------------
0537+  16BE             ; INPUT 8BIT HEX INTEGER
0538+  16BE             ; read 8bit integer into AL
0539+  16BE             ;-----------------------------------------------------------------------------
0540+  16BE             scan_u8x:
0541+  16BE F8 04 00      enter 4
0542+  16C1 D8            push b
0543+  16C2 DA            push d
0544+  16C3             
0545+  16C3 FA FD FF      lea d, [bp + -3]
0546+  16C6 07 98 14      call _gets        ; get number
0547+  16C9             
0548+  16C9 32            mov bl, [d]
0549+  16CA 37            mov bh, bl
0550+  16CB 33 01 00      mov bl, [d + 1]
0551+  16CE 07 4F 14      call _atoi        ; convert to int in AL
0552+  16D1             
0553+  16D1 E7            pop d
0554+  16D2 E5            pop b
0555+  16D3 F9            leave
0556+  16D4 09            ret
0557+  16D5             
0558+  16D5             ;-----------------------------------------------------------------------------
0559+  16D5             ; input decimal number
0560+  16D5             ; result in A
0561+  16D5             ; 655'\0'
0562+  16D5             ; low--------high
0563+  16D5             ;-----------------------------------------------------------------------------
0564+  16D5             scan_u16d:
0565+  16D5 F8 08 00      enter 8
0566+  16D8 E2            push si
0567+  16D9 D8            push b
0568+  16DA D9            push c
0569+  16DB DA            push d
0570+  16DC FA F9 FF      lea d, [bp +- 7]
0571+  16DF 07 98 14      call _gets
0572+  16E2 07 F1 13      call _strlen      ; get string length in C
0573+  16E5 7E            dec c
0574+  16E6 FD 4E         mov si, d
0575+  16E8 12            mov a, c
0576+  16E9 FD 99         shl a
0577+  16EB 3B 27 17      mov d, table_power
0578+  16EE 59            add d, a
0579+  16EF 38 00 00      mov c, 0
0580+  16F2             mul_loop:
0581+  16F2 F6            lodsb      ; load ASCII to al
0582+  16F3 B9 00         cmp al, 0
0583+  16F5 C6 08 17      je mul_exit
0584+  16F8 6F 30         sub al, $30    ; make into integer
0585+  16FA 22 00         mov ah, 0
0586+  16FC 2A            mov b, [d]
0587+  16FD AC            mul a, b      ; result in B since it fits in 16bits
0588+  16FE 11            mov a, b
0589+  16FF 28            mov b, c
0590+  1700 54            add a, b
0591+  1701 39            mov c, a
0592+  1702 63 02 00      sub d, 2
0593+  1705 0A F2 16      jmp mul_loop
0594+  1708             mul_exit:
0595+  1708 12            mov a, c
0596+  1709 E7            pop d
0597+  170A E6            pop c
0598+  170B E5            pop b
0599+  170C EF            pop si
0600+  170D F9            leave
0601+  170E 09            ret
0602+  170F             
0603+  170F 30 31 32 33 s_hex_digits:    .db "0123456789ABCDEF"  
0603+  1713 34 35 36 37 
0603+  1717 38 39 41 42 
0603+  171B 43 44 45 46 
0604+  171F 1B 5B 32 4A s_telnet_clear:  .db "\033[2J\033[H", 0
0604+  1723 1B 5B 48 00 
0605+  1727             
0606+  1727             table_power:
0607+  1727 01 00         .dw 1
0608+  1729 0A 00         .dw 10
0609+  172B 64 00         .dw 100
0610+  172D E8 03         .dw 1000
0611+  172F 10 27         .dw 100002354   1731             ; --- END INLINE ASM BLOCK
2355   1731             
2356   1731 F9            leave
2357   1732 09            ret
2358   1733             
2359   1733             exit:
2360   1733 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2361   1736             
2362   1736             ; --- BEGIN INLINE ASM BLOCK
2363   1736 05 0B         syscall sys_terminate_proc
2364   1738             ; --- END INLINE ASM BLOCK
2365   1738             
2366   1738 F9            leave
2367   1739 09            ret
2368   173A             
2369   173A             memset:
2370   173A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2371   173D             ; $i 
2372   173D 52 02 00      sub sp, 2
2373   1740             ;; for(i = 0; i < size; i++){ 
2374   1740             _for37_init:
2375   1740 FA FF FF      lea d, [bp + -1] ; $i
2376   1743 DA            push d
2377   1744 26 00 00      mov b, $0
2378   1747 E7            pop d
2379   1748 FD 43         mov [d], b
2380   174A             _for37_cond:
2381   174A FA FF FF      lea d, [bp + -1] ; $i
2382   174D 2A            mov b, [d]
2383   174E             ; START RELATIONAL
2384   174E D7            push a
2385   174F 11            mov a, b
2386   1750 FA 08 00      lea d, [bp + 8] ; $size
2387   1753 2A            mov b, [d]
2388   1754 B0            cmp a, b
2389   1755 FD 73         slt ; < (signed)
2390   1757 E4            pop a
2391   1758             ; END RELATIONAL
2392   1758 C0 00 00      cmp b, 0
2393   175B C6 84 17      je _for37_exit
2394   175E             _for37_block:
2395   175E             ;; *(s+i) = c; 
2396   175E FA 05 00      lea d, [bp + 5] ; $s
2397   1761 2A            mov b, [d]
2398   1762             ; START TERMS
2399   1762 D7            push a
2400   1763 11            mov a, b
2401   1764 FA FF FF      lea d, [bp + -1] ; $i
2402   1767 2A            mov b, [d]
2403   1768 56            add b, a
2404   1769 E4            pop a
2405   176A             ; END TERMS
2406   176A D8            push b
2407   176B FA 07 00      lea d, [bp + 7] ; $c
2408   176E 32            mov bl, [d]
2409   176F A7 00         mov bh, 0
2410   1771 E7            pop d
2411   1772 FD 3E         mov [d], bl
2412   1774             _for37_update:
2413   1774 FA FF FF      lea d, [bp + -1] ; $i
2414   1777 2A            mov b, [d]
2415   1778 D8            push b
2416   1779 FD 77         inc b
2417   177B FA FF FF      lea d, [bp + -1] ; $i
2418   177E FD 43         mov [d], b
2419   1780 E5            pop b
2420   1781 0A 4A 17      jmp _for37_cond
2421   1784             _for37_exit:
2422   1784             ;; return s; 
2423   1784 FA 05 00      lea d, [bp + 5] ; $s
2424   1787 2A            mov b, [d]
2425   1788 F9            leave
2426   1789 09            ret
2427   178A             
2428   178A             atoi:
2429   178A F8 00 00      enter 0 ; (push bp; mov bp, sp)
2430   178D             ; $result 
2431   178D 10 00 00      mov a, $0
2432   1790 45 FF FF      mov [bp + -1], a
2433   1793             ; $sign 
2434   1793 10 01 00      mov a, $1
2435   1796 45 FD FF      mov [bp + -3], a
2436   1799 52 04 00      sub sp, 4
2437   179C             ;; while (*str == ' ') str++; 
2438   179C             _while38_cond:
2439   179C FA 05 00      lea d, [bp + 5] ; $str
2440   179F 2A            mov b, [d]
2441   17A0 74            mov d, b
2442   17A1 32            mov bl, [d]
2443   17A2 A7 00         mov bh, 0
2444   17A4             ; START RELATIONAL
2445   17A4 D7            push a
2446   17A5 11            mov a, b
2447   17A6 26 20 00      mov b, $20
2448   17A9 B0            cmp a, b
2449   17AA FD 71         seq ; ==
2450   17AC E4            pop a
2451   17AD             ; END RELATIONAL
2452   17AD C0 00 00      cmp b, 0
2453   17B0 C6 C3 17      je _while38_exit
2454   17B3             _while38_block:
2455   17B3             ;; str++; 
2456   17B3 FA 05 00      lea d, [bp + 5] ; $str
2457   17B6 2A            mov b, [d]
2458   17B7 D8            push b
2459   17B8 FD 77         inc b
2460   17BA FA 05 00      lea d, [bp + 5] ; $str
2461   17BD FD 43         mov [d], b
2462   17BF E5            pop b
2463   17C0 0A 9C 17      jmp _while38_cond
2464   17C3             _while38_exit:
2465   17C3             ;; if (*str == '-' || *str == '+') { 
2466   17C3             _if39_cond:
2467   17C3 FA 05 00      lea d, [bp + 5] ; $str
2468   17C6 2A            mov b, [d]
2469   17C7 74            mov d, b
2470   17C8 32            mov bl, [d]
2471   17C9 A7 00         mov bh, 0
2472   17CB             ; START RELATIONAL
2473   17CB D7            push a
2474   17CC 11            mov a, b
2475   17CD 26 2D 00      mov b, $2d
2476   17D0 B0            cmp a, b
2477   17D1 FD 71         seq ; ==
2478   17D3 E4            pop a
2479   17D4             ; END RELATIONAL
2480   17D4 D7            push a
2481   17D5 11            mov a, b
2482   17D6 FA 05 00      lea d, [bp + 5] ; $str
2483   17D9 2A            mov b, [d]
2484   17DA 74            mov d, b
2485   17DB 32            mov bl, [d]
2486   17DC A7 00         mov bh, 0
2487   17DE             ; START RELATIONAL
2488   17DE D7            push a
2489   17DF 11            mov a, b
2490   17E0 26 2B 00      mov b, $2b
2491   17E3 B0            cmp a, b
2492   17E4 FD 71         seq ; ==
2493   17E6 E4            pop a
2494   17E7             ; END RELATIONAL
2495   17E7 FD A8         sor a, b ; ||
2496   17E9 E4            pop a
2497   17EA C0 00 00      cmp b, 0
2498   17ED C6 24 18      je _if39_exit
2499   17F0             _if39_true:
2500   17F0             ;; if (*str == '-') sign = -1; 
2501   17F0             _if40_cond:
2502   17F0 FA 05 00      lea d, [bp + 5] ; $str
2503   17F3 2A            mov b, [d]
2504   17F4 74            mov d, b
2505   17F5 32            mov bl, [d]
2506   17F6 A7 00         mov bh, 0
2507   17F8             ; START RELATIONAL
2508   17F8 D7            push a
2509   17F9 11            mov a, b
2510   17FA 26 2D 00      mov b, $2d
2511   17FD B0            cmp a, b
2512   17FE FD 71         seq ; ==
2513   1800 E4            pop a
2514   1801             ; END RELATIONAL
2515   1801 C0 00 00      cmp b, 0
2516   1804 C6 14 18      je _if40_exit
2517   1807             _if40_true:
2518   1807             ;; sign = -1; 
2519   1807 FA FD FF      lea d, [bp + -3] ; $sign
2520   180A DA            push d
2521   180B 26 FF FF      mov b, $ffff
2522   180E E7            pop d
2523   180F FD 43         mov [d], b
2524   1811 0A 14 18      jmp _if40_exit
2525   1814             _if40_exit:
2526   1814             ;; str++; 
2527   1814 FA 05 00      lea d, [bp + 5] ; $str
2528   1817 2A            mov b, [d]
2529   1818 D8            push b
2530   1819 FD 77         inc b
2531   181B FA 05 00      lea d, [bp + 5] ; $str
2532   181E FD 43         mov [d], b
2533   1820 E5            pop b
2534   1821 0A 24 18      jmp _if39_exit
2535   1824             _if39_exit:
2536   1824             ;; while (*str >= '0' && *str <= '9') { 
2537   1824             _while41_cond:
2538   1824 FA 05 00      lea d, [bp + 5] ; $str
2539   1827 2A            mov b, [d]
2540   1828 74            mov d, b
2541   1829 32            mov bl, [d]
2542   182A A7 00         mov bh, 0
2543   182C             ; START RELATIONAL
2544   182C D7            push a
2545   182D 11            mov a, b
2546   182E 26 30 00      mov b, $30
2547   1831 B0            cmp a, b
2548   1832 FD 82         sgeu ; >= (unsigned)
2549   1834 E4            pop a
2550   1835             ; END RELATIONAL
2551   1835 D7            push a
2552   1836 11            mov a, b
2553   1837 FA 05 00      lea d, [bp + 5] ; $str
2554   183A 2A            mov b, [d]
2555   183B 74            mov d, b
2556   183C 32            mov bl, [d]
2557   183D A7 00         mov bh, 0
2558   183F             ; START RELATIONAL
2559   183F D7            push a
2560   1840 11            mov a, b
2561   1841 26 39 00      mov b, $39
2562   1844 B0            cmp a, b
2563   1845 FD 75         slu ; <= (unsigned)
2564   1847 E4            pop a
2565   1848             ; END RELATIONAL
2566   1848 FD A7         sand a, b
2567   184A E4            pop a
2568   184B C0 00 00      cmp b, 0
2569   184E C6 89 18      je _while41_exit
2570   1851             _while41_block:
2571   1851             ;; result = result * 10 + (*str - '0'); 
2572   1851 FA FF FF      lea d, [bp + -1] ; $result
2573   1854 DA            push d
2574   1855 FA FF FF      lea d, [bp + -1] ; $result
2575   1858 2A            mov b, [d]
2576   1859             ; START FACTORS
2577   1859 D7            push a
2578   185A 11            mov a, b
2579   185B 26 0A 00      mov b, $a
2580   185E AC            mul a, b ; *
2581   185F 11            mov a, b
2582   1860 27            mov b, a
2583   1861 E4            pop a
2584   1862             ; END FACTORS
2585   1862             ; START TERMS
2586   1862 D7            push a
2587   1863 11            mov a, b
2588   1864 FA 05 00      lea d, [bp + 5] ; $str
2589   1867 2A            mov b, [d]
2590   1868 74            mov d, b
2591   1869 32            mov bl, [d]
2592   186A A7 00         mov bh, 0
2593   186C             ; START TERMS
2594   186C D7            push a
2595   186D 11            mov a, b
2596   186E 26 30 00      mov b, $30
2597   1871 60            sub a, b
2598   1872 27            mov b, a
2599   1873 E4            pop a
2600   1874             ; END TERMS
2601   1874 56            add b, a
2602   1875 E4            pop a
2603   1876             ; END TERMS
2604   1876 E7            pop d
2605   1877 FD 43         mov [d], b
2606   1879             ;; str++; 
2607   1879 FA 05 00      lea d, [bp + 5] ; $str
2608   187C 2A            mov b, [d]
2609   187D D8            push b
2610   187E FD 77         inc b
2611   1880 FA 05 00      lea d, [bp + 5] ; $str
2612   1883 FD 43         mov [d], b
2613   1885 E5            pop b
2614   1886 0A 24 18      jmp _while41_cond
2615   1889             _while41_exit:
2616   1889             ;; return sign * result; 
2617   1889 FA FD FF      lea d, [bp + -3] ; $sign
2618   188C 2A            mov b, [d]
2619   188D             ; START FACTORS
2620   188D D7            push a
2621   188E 11            mov a, b
2622   188F FA FF FF      lea d, [bp + -1] ; $result
2623   1892 2A            mov b, [d]
2624   1893 AC            mul a, b ; *
2625   1894 11            mov a, b
2626   1895 27            mov b, a
2627   1896 E4            pop a
2628   1897             ; END FACTORS
2629   1897 F9            leave
2630   1898 09            ret
2631   1899             
2632   1899             rand:
2633   1899 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2634   189C             ; $sec 
2635   189C 52 02 00      sub sp, 2
2636   189F             
2637   189F             ; --- BEGIN INLINE ASM BLOCK
2638   189F 19 00         mov al, 0
2639   18A1 05 01         syscall sys_rtc					
2640   18A3 1A            mov al, ah
2641   18A4 FA FF FF      lea d, [bp + -1] ; $sec
2642   18A7 1E            mov al, [d]
2643   18A8 22 00         mov ah, 0
2644   18AA             ; --- END INLINE ASM BLOCK
2645   18AA             
2646   18AA             ;; return sec; 
2647   18AA FA FF FF      lea d, [bp + -1] ; $sec
2648   18AD 2A            mov b, [d]
2649   18AE F9            leave
2650   18AF 09            ret
2651   18B0             
2652   18B0             alloc:
2653   18B0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2654   18B3             ;; heap_top = heap_top + bytes; 
2655   18B3 3B 93 77      mov d, _heap_top ; $heap_top
2656   18B6 DA            push d
2657   18B7 3B 93 77      mov d, _heap_top ; $heap_top
2658   18BA 2A            mov b, [d]
2659   18BB             ; START TERMS
2660   18BB D7            push a
2661   18BC 11            mov a, b
2662   18BD FA 05 00      lea d, [bp + 5] ; $bytes
2663   18C0 2A            mov b, [d]
2664   18C1 56            add b, a
2665   18C2 E4            pop a
2666   18C3             ; END TERMS
2667   18C3 E7            pop d
2668   18C4 FD 43         mov [d], b
2669   18C6             ;; return heap_top - bytes; 
2670   18C6 3B 93 77      mov d, _heap_top ; $heap_top
2671   18C9 2A            mov b, [d]
2672   18CA             ; START TERMS
2673   18CA D7            push a
2674   18CB 11            mov a, b
2675   18CC FA 05 00      lea d, [bp + 5] ; $bytes
2676   18CF 2A            mov b, [d]
2677   18D0 60            sub a, b
2678   18D1 27            mov b, a
2679   18D2 E4            pop a
2680   18D3             ; END TERMS
2681   18D3 F9            leave
2682   18D4 09            ret
2683   18D5             
2684   18D5             free:
2685   18D5 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2686   18D8             ;; return heap_top = heap_top - bytes; 
2687   18D8 3B 93 77      mov d, _heap_top ; $heap_top
2688   18DB DA            push d
2689   18DC 3B 93 77      mov d, _heap_top ; $heap_top
2690   18DF 2A            mov b, [d]
2691   18E0             ; START TERMS
2692   18E0 D7            push a
2693   18E1 11            mov a, b
2694   18E2 FA 05 00      lea d, [bp + 5] ; $bytes
2695   18E5 2A            mov b, [d]
2696   18E6 60            sub a, b
2697   18E7 27            mov b, a
2698   18E8 E4            pop a
2699   18E9             ; END TERMS
2700   18E9 E7            pop d
2701   18EA FD 43         mov [d], b
2702   18EC F9            leave
2703   18ED 09            ret
2704   18EE             
2705   18EE             include_ctype_lib:
2706   18EE F8 00 00      enter 0 ; (push bp; mov bp, sp)
2707   18F1             
2708   18F1             ; --- BEGIN INLINE ASM BLOCK
2709   18F1             .include "lib/asm/ctype.asm"
0001+  18F1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0002+  18F1             ; ctype.s
0003+  18F1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0004+  18F1             
0005+  18F1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0006+  18F1             ;; C character classification is an operation provided by a group of functions in the ANSI C Standard Library
0007+  18F1             ;; for the C programming language. These functions are used to test characters for membership in a particular
0008+  18F1             ;; class of characters, such as alphabetic characters, control characters, etc. Both single-byte, and wide
0009+  18F1             ;; characters are supported.
0010+  18F1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0011+  18F1             ;; _isalnum 
0012+  18F1             ;; _isalpha 
0013+  18F1             ;; islower 
0014+  18F1             ;; isupper 
0015+  18F1             ;; _isdigit 
0016+  18F1             ;; isxdigit
0017+  18F1             ;; iscntrl 
0018+  18F1             ;; isgraph 
0019+  18F1             ;; _isspace 
0020+  18F1             ;; isblank 
0021+  18F1             ;; isprint 
0022+  18F1             ;; ispunct 
0023+  18F1             ;; tolower 
0024+  18F1             ;; toupper
0025+  18F1             
0026+  18F1             
0027+  18F1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0028+  18F1             ;; IS ALPHANUMERIC
0029+  18F1             ;; sets ZF according with result
0030+  18F1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0031+  18F1             _isalnum:
0032+  18F1 07 0E 19    	call _isalpha
0033+  18F4 C6 FA 18    	je _isalnum_exit
0034+  18F7 07 FB 18    	call _isdigit
0035+  18FA             _isalnum_exit:
0036+  18FA 09          	ret	
0037+  18FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0038+  18FB             ;; IS DIGIT
0039+  18FB             ;; sets ZF according with result
0040+  18FB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0041+  18FB             _isdigit:
0042+  18FB DB          	push al
0043+  18FC B9 30       	cmp al, '0'
0044+  18FE C8 0A 19    	jlu _isdigit_false
0045+  1901 B9 39       	cmp al, '9'
0046+  1903 D1 0A 19    	jgu _isdigit_false
0047+  1906 87 00       	and al, 0	; set ZF
0048+  1908 E8          	pop al
0049+  1909 09          	ret
0050+  190A             _isdigit_false:
0051+  190A 8B 01       	or al, 1	; clear ZF
0052+  190C E8          	pop al
0053+  190D 09          	ret	
0054+  190E             	
0055+  190E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0056+  190E             ;; IS ALPHA
0057+  190E             ;; sets ZF according with result
0058+  190E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0059+  190E             _isalpha:
0060+  190E DB          	push al
0061+  190F B9 5F       	cmp al, '_'
0062+  1911 C6 31 19    	je _isalpha_true
0063+  1914 B9 2E       	cmp al, '.'
0064+  1916 C6 31 19    	je _isalpha_true
0065+  1919 B9 41       	cmp al, 'A'
0066+  191B C8 2D 19    	jlu _isalpha_false
0067+  191E B9 7A       	cmp al, 'z'
0068+  1920 D1 2D 19    	jgu _isalpha_false
0069+  1923 B9 5A       	cmp al, 'Z'
0070+  1925 D0 31 19    	jleu _isalpha_true
0071+  1928 B9 61       	cmp al, 'a'
0072+  192A C9 31 19    	jgeu _isalpha_true
0073+  192D             _isalpha_false:
0074+  192D 8B 01       	or al, 1	; clear ZF
0075+  192F E8          	pop al
0076+  1930 09          	ret
0077+  1931             _isalpha_true:
0078+  1931 87 00       	and al, 0	; set ZF
0079+  1933 E8          	pop al
0080+  1934 09          	ret
0081+  1935             
0082+  1935             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0083+  1935             ;; IS PATH-ALPHA
0084+  1935             ;; sets ZF according with result
0085+  1935             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0086+  1935             ispath:
0087+  1935 DB          	push al
0088+  1936 07 FB 18    	call _isdigit
0089+  1939 C6 63 19    	je ispath_true
0090+  193C B9 5F       	cmp al, '_'
0091+  193E C6 63 19    	je ispath_true
0092+  1941 B9 2F       	cmp al, '/'
0093+  1943 C6 63 19    	je ispath_true
0094+  1946 B9 2E       	cmp al, '.'
0095+  1948 C6 63 19    	je ispath_true
0096+  194B B9 41       	cmp al, 'A'
0097+  194D C8 5F 19    	jlu ispath_false
0098+  1950 B9 7A       	cmp al, 'z'
0099+  1952 D1 5F 19    	jgu ispath_false
0100+  1955 B9 5A       	cmp al, 'Z'
0101+  1957 D0 63 19    	jleu ispath_true
0102+  195A B9 61       	cmp al, 'a'
0103+  195C C9 63 19    	jgeu ispath_true
0104+  195F             ispath_false:
0105+  195F 8B 01       	or al, 1	; clear ZF
0106+  1961 E8          	pop al
0107+  1962 09          	ret
0108+  1963             ispath_true:
0109+  1963 87 00       	and al, 0	; set ZF
0110+  1965 E8          	pop al
0111+  1966 09          	ret
0112+  1967             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0113+  1967             ;; IS SPACE
0114+  1967             ;; sets ZF according with result
0115+  1967             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0116+  1967             _isspace:
0117+  1967 B9 20       	cmp al, $20		; ' '
0118+  1969 C6 7D 19    	je _isspace_exit
0119+  196C B9 09       	cmp al, $09		; '\t'
0120+  196E C6 7D 19    	je _isspace_exit
0121+  1971 B9 0A       	cmp al, $0A		; '\n'
0122+  1973 C6 7D 19    	je _isspace_exit
0123+  1976 B9 0D       	cmp al, $0D		; '\r'
0124+  1978 C6 7D 19    	je _isspace_exit
0125+  197B B9 0B       	cmp al, $0B		; '\v'
0126+  197D             _isspace_exit:
0127+  197D 09          	ret	
0128+  197E             
0129+  197E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0130+  197E             ; TO LOWER
0131+  197E             ; input in AL
0132+  197E             ; output in AL
0133+  197E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0134+  197E             _to_lower:
0135+  197E B9 5A       	cmp al, 'Z'
0136+  1980 D1 85 19    	jgu _to_lower_ret
0137+  1983 6A 20       	add al, $20				; convert to lower case
0138+  1985             _to_lower_ret:
0139+  1985 09          	ret
0140+  1986             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0141+  1986             ; TO UPPER
0142+  1986             ; input in AL
0143+  1986             ; output in AL
0144+  1986             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0145+  1986             _to_upper:
0146+  1986 B9 61       	cmp al, 'a'
0147+  1988 C8 8D 19    	jlu _to_upper_ret
0148+  198B 6F 20       	sub al, $20			; convert to upper case
0149+  198D             _to_upper_ret:
0150+  198D 09          	ret
0151+  198E             
2710   198E             ; --- END INLINE ASM BLOCK
2711   198E             
2712   198E F9            leave
2713   198F 09            ret
2714   1990             
2715   1990             is_space:
2716   1990 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2717   1993             ;; return c == ' ' || c == '\t' || c == '\n' || c == '\r'; 
2718   1993 FA 05 00      lea d, [bp + 5] ; $c
2719   1996 32            mov bl, [d]
2720   1997 A7 00         mov bh, 0
2721   1999             ; START RELATIONAL
2722   1999 D7            push a
2723   199A 11            mov a, b
2724   199B 26 20 00      mov b, $20
2725   199E B0            cmp a, b
2726   199F FD 71         seq ; ==
2727   19A1 E4            pop a
2728   19A2             ; END RELATIONAL
2729   19A2 D7            push a
2730   19A3 11            mov a, b
2731   19A4 FA 05 00      lea d, [bp + 5] ; $c
2732   19A7 32            mov bl, [d]
2733   19A8 A7 00         mov bh, 0
2734   19AA             ; START RELATIONAL
2735   19AA D7            push a
2736   19AB 11            mov a, b
2737   19AC 26 09 00      mov b, $9
2738   19AF B0            cmp a, b
2739   19B0 FD 71         seq ; ==
2740   19B2 E4            pop a
2741   19B3             ; END RELATIONAL
2742   19B3 FD A8         sor a, b ; ||
2743   19B5 11            mov a, b
2744   19B6 FA 05 00      lea d, [bp + 5] ; $c
2745   19B9 32            mov bl, [d]
2746   19BA A7 00         mov bh, 0
2747   19BC             ; START RELATIONAL
2748   19BC D7            push a
2749   19BD 11            mov a, b
2750   19BE 26 0A 00      mov b, $a
2751   19C1 B0            cmp a, b
2752   19C2 FD 71         seq ; ==
2753   19C4 E4            pop a
2754   19C5             ; END RELATIONAL
2755   19C5 FD A8         sor a, b ; ||
2756   19C7 11            mov a, b
2757   19C8 FA 05 00      lea d, [bp + 5] ; $c
2758   19CB 32            mov bl, [d]
2759   19CC A7 00         mov bh, 0
2760   19CE             ; START RELATIONAL
2761   19CE D7            push a
2762   19CF 11            mov a, b
2763   19D0 26 0D 00      mov b, $d
2764   19D3 B0            cmp a, b
2765   19D4 FD 71         seq ; ==
2766   19D6 E4            pop a
2767   19D7             ; END RELATIONAL
2768   19D7 FD A8         sor a, b ; ||
2769   19D9 E4            pop a
2770   19DA F9            leave
2771   19DB 09            ret
2772   19DC             
2773   19DC             is_digit:
2774   19DC F8 00 00      enter 0 ; (push bp; mov bp, sp)
2775   19DF             ;; return c >= '0' && c <= '9'; 
2776   19DF FA 05 00      lea d, [bp + 5] ; $c
2777   19E2 32            mov bl, [d]
2778   19E3 A7 00         mov bh, 0
2779   19E5             ; START RELATIONAL
2780   19E5 D7            push a
2781   19E6 11            mov a, b
2782   19E7 26 30 00      mov b, $30
2783   19EA B0            cmp a, b
2784   19EB FD 80         sge ; >=
2785   19ED E4            pop a
2786   19EE             ; END RELATIONAL
2787   19EE D7            push a
2788   19EF 11            mov a, b
2789   19F0 FA 05 00      lea d, [bp + 5] ; $c
2790   19F3 32            mov bl, [d]
2791   19F4 A7 00         mov bh, 0
2792   19F6             ; START RELATIONAL
2793   19F6 D7            push a
2794   19F7 11            mov a, b
2795   19F8 26 39 00      mov b, $39
2796   19FB B0            cmp a, b
2797   19FC FD 73         slt ; <= (signed)
2798   19FE E4            pop a
2799   19FF             ; END RELATIONAL
2800   19FF FD A7         sand a, b
2801   1A01 E4            pop a
2802   1A02 F9            leave
2803   1A03 09            ret
2804   1A04             
2805   1A04             is_alpha:
2806   1A04 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2807   1A07             ;; return(c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c == '_'); 
2808   1A07 FA 05 00      lea d, [bp + 5] ; $c
2809   1A0A 32            mov bl, [d]
2810   1A0B A7 00         mov bh, 0
2811   1A0D             ; START RELATIONAL
2812   1A0D D7            push a
2813   1A0E 11            mov a, b
2814   1A0F 26 61 00      mov b, $61
2815   1A12 B0            cmp a, b
2816   1A13 FD 80         sge ; >=
2817   1A15 E4            pop a
2818   1A16             ; END RELATIONAL
2819   1A16 D7            push a
2820   1A17 11            mov a, b
2821   1A18 FA 05 00      lea d, [bp + 5] ; $c
2822   1A1B 32            mov bl, [d]
2823   1A1C A7 00         mov bh, 0
2824   1A1E             ; START RELATIONAL
2825   1A1E D7            push a
2826   1A1F 11            mov a, b
2827   1A20 26 7A 00      mov b, $7a
2828   1A23 B0            cmp a, b
2829   1A24 FD 73         slt ; <= (signed)
2830   1A26 E4            pop a
2831   1A27             ; END RELATIONAL
2832   1A27 FD A7         sand a, b
2833   1A29 E4            pop a
2834   1A2A D7            push a
2835   1A2B 11            mov a, b
2836   1A2C FA 05 00      lea d, [bp + 5] ; $c
2837   1A2F 32            mov bl, [d]
2838   1A30 A7 00         mov bh, 0
2839   1A32             ; START RELATIONAL
2840   1A32 D7            push a
2841   1A33 11            mov a, b
2842   1A34 26 41 00      mov b, $41
2843   1A37 B0            cmp a, b
2844   1A38 FD 80         sge ; >=
2845   1A3A E4            pop a
2846   1A3B             ; END RELATIONAL
2847   1A3B D7            push a
2848   1A3C 11            mov a, b
2849   1A3D FA 05 00      lea d, [bp + 5] ; $c
2850   1A40 32            mov bl, [d]
2851   1A41 A7 00         mov bh, 0
2852   1A43             ; START RELATIONAL
2853   1A43 D7            push a
2854   1A44 11            mov a, b
2855   1A45 26 5A 00      mov b, $5a
2856   1A48 B0            cmp a, b
2857   1A49 FD 73         slt ; <= (signed)
2858   1A4B E4            pop a
2859   1A4C             ; END RELATIONAL
2860   1A4C FD A7         sand a, b
2861   1A4E E4            pop a
2862   1A4F FD A8         sor a, b ; ||
2863   1A51 11            mov a, b
2864   1A52 FA 05 00      lea d, [bp + 5] ; $c
2865   1A55 32            mov bl, [d]
2866   1A56 A7 00         mov bh, 0
2867   1A58             ; START RELATIONAL
2868   1A58 D7            push a
2869   1A59 11            mov a, b
2870   1A5A 26 5F 00      mov b, $5f
2871   1A5D B0            cmp a, b
2872   1A5E FD 71         seq ; ==
2873   1A60 E4            pop a
2874   1A61             ; END RELATIONAL
2875   1A61 FD A8         sor a, b ; ||
2876   1A63 E4            pop a
2877   1A64 F9            leave
2878   1A65 09            ret
2879   1A66             
2880   1A66             tolower:
2881   1A66 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2882   1A69             ;; if (ch >= 'A' && ch <= 'Z')  
2883   1A69             _if42_cond:
2884   1A69 FA 05 00      lea d, [bp + 5] ; $ch
2885   1A6C 32            mov bl, [d]
2886   1A6D A7 00         mov bh, 0
2887   1A6F             ; START RELATIONAL
2888   1A6F D7            push a
2889   1A70 11            mov a, b
2890   1A71 26 41 00      mov b, $41
2891   1A74 B0            cmp a, b
2892   1A75 FD 80         sge ; >=
2893   1A77 E4            pop a
2894   1A78             ; END RELATIONAL
2895   1A78 D7            push a
2896   1A79 11            mov a, b
2897   1A7A FA 05 00      lea d, [bp + 5] ; $ch
2898   1A7D 32            mov bl, [d]
2899   1A7E A7 00         mov bh, 0
2900   1A80             ; START RELATIONAL
2901   1A80 D7            push a
2902   1A81 11            mov a, b
2903   1A82 26 5A 00      mov b, $5a
2904   1A85 B0            cmp a, b
2905   1A86 FD 73         slt ; <= (signed)
2906   1A88 E4            pop a
2907   1A89             ; END RELATIONAL
2908   1A89 FD A7         sand a, b
2909   1A8B E4            pop a
2910   1A8C C0 00 00      cmp b, 0
2911   1A8F C6 AA 1A      je _if42_else
2912   1A92             _if42_true:
2913   1A92             ;; return ch - 'A' + 'a'; 
2914   1A92 FA 05 00      lea d, [bp + 5] ; $ch
2915   1A95 32            mov bl, [d]
2916   1A96 A7 00         mov bh, 0
2917   1A98             ; START TERMS
2918   1A98 D7            push a
2919   1A99 11            mov a, b
2920   1A9A 26 41 00      mov b, $41
2921   1A9D 60            sub a, b
2922   1A9E 27            mov b, a
2923   1A9F 11            mov a, b
2924   1AA0 26 61 00      mov b, $61
2925   1AA3 56            add b, a
2926   1AA4 E4            pop a
2927   1AA5             ; END TERMS
2928   1AA5 F9            leave
2929   1AA6 09            ret
2930   1AA7 0A B2 1A      jmp _if42_exit
2931   1AAA             _if42_else:
2932   1AAA             ;; return ch; 
2933   1AAA FA 05 00      lea d, [bp + 5] ; $ch
2934   1AAD 32            mov bl, [d]
2935   1AAE A7 00         mov bh, 0
2936   1AB0 F9            leave
2937   1AB1 09            ret
2938   1AB2             _if42_exit:
2939   1AB2 F9            leave
2940   1AB3 09            ret
2941   1AB4             
2942   1AB4             toupper:
2943   1AB4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2944   1AB7             ;; if (ch >= 'a' && ch <= 'z')  
2945   1AB7             _if43_cond:
2946   1AB7 FA 05 00      lea d, [bp + 5] ; $ch
2947   1ABA 32            mov bl, [d]
2948   1ABB A7 00         mov bh, 0
2949   1ABD             ; START RELATIONAL
2950   1ABD D7            push a
2951   1ABE 11            mov a, b
2952   1ABF 26 61 00      mov b, $61
2953   1AC2 B0            cmp a, b
2954   1AC3 FD 80         sge ; >=
2955   1AC5 E4            pop a
2956   1AC6             ; END RELATIONAL
2957   1AC6 D7            push a
2958   1AC7 11            mov a, b
2959   1AC8 FA 05 00      lea d, [bp + 5] ; $ch
2960   1ACB 32            mov bl, [d]
2961   1ACC A7 00         mov bh, 0
2962   1ACE             ; START RELATIONAL
2963   1ACE D7            push a
2964   1ACF 11            mov a, b
2965   1AD0 26 7A 00      mov b, $7a
2966   1AD3 B0            cmp a, b
2967   1AD4 FD 73         slt ; <= (signed)
2968   1AD6 E4            pop a
2969   1AD7             ; END RELATIONAL
2970   1AD7 FD A7         sand a, b
2971   1AD9 E4            pop a
2972   1ADA C0 00 00      cmp b, 0
2973   1ADD C6 F8 1A      je _if43_else
2974   1AE0             _if43_true:
2975   1AE0             ;; return ch - 'a' + 'A'; 
2976   1AE0 FA 05 00      lea d, [bp + 5] ; $ch
2977   1AE3 32            mov bl, [d]
2978   1AE4 A7 00         mov bh, 0
2979   1AE6             ; START TERMS
2980   1AE6 D7            push a
2981   1AE7 11            mov a, b
2982   1AE8 26 61 00      mov b, $61
2983   1AEB 60            sub a, b
2984   1AEC 27            mov b, a
2985   1AED 11            mov a, b
2986   1AEE 26 41 00      mov b, $41
2987   1AF1 56            add b, a
2988   1AF2 E4            pop a
2989   1AF3             ; END TERMS
2990   1AF3 F9            leave
2991   1AF4 09            ret
2992   1AF5 0A 00 1B      jmp _if43_exit
2993   1AF8             _if43_else:
2994   1AF8             ;; return ch; 
2995   1AF8 FA 05 00      lea d, [bp + 5] ; $ch
2996   1AFB 32            mov bl, [d]
2997   1AFC A7 00         mov bh, 0
2998   1AFE F9            leave
2999   1AFF 09            ret
3000   1B00             _if43_exit:
3001   1B00 F9            leave
3002   1B01 09            ret
3003   1B02             
3004   1B02             is_delimiter:
3005   1B02 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3006   1B05             ;; if( 
3007   1B05             _if44_cond:
3008   1B05 FA 05 00      lea d, [bp + 5] ; $c
3009   1B08 32            mov bl, [d]
3010   1B09 A7 00         mov bh, 0
3011   1B0B             ; START RELATIONAL
3012   1B0B D7            push a
3013   1B0C 11            mov a, b
3014   1B0D 26 40 00      mov b, $40
3015   1B10 B0            cmp a, b
3016   1B11 FD 71         seq ; ==
3017   1B13 E4            pop a
3018   1B14             ; END RELATIONAL
3019   1B14 D7            push a
3020   1B15 11            mov a, b
3021   1B16 FA 05 00      lea d, [bp + 5] ; $c
3022   1B19 32            mov bl, [d]
3023   1B1A A7 00         mov bh, 0
3024   1B1C             ; START RELATIONAL
3025   1B1C D7            push a
3026   1B1D 11            mov a, b
3027   1B1E 26 23 00      mov b, $23
3028   1B21 B0            cmp a, b
3029   1B22 FD 71         seq ; ==
3030   1B24 E4            pop a
3031   1B25             ; END RELATIONAL
3032   1B25 FD A8         sor a, b ; ||
3033   1B27 11            mov a, b
3034   1B28 FA 05 00      lea d, [bp + 5] ; $c
3035   1B2B 32            mov bl, [d]
3036   1B2C A7 00         mov bh, 0
3037   1B2E             ; START RELATIONAL
3038   1B2E D7            push a
3039   1B2F 11            mov a, b
3040   1B30 26 24 00      mov b, $24
3041   1B33 B0            cmp a, b
3042   1B34 FD 71         seq ; ==
3043   1B36 E4            pop a
3044   1B37             ; END RELATIONAL
3045   1B37 FD A8         sor a, b ; ||
3046   1B39 11            mov a, b
3047   1B3A FA 05 00      lea d, [bp + 5] ; $c
3048   1B3D 32            mov bl, [d]
3049   1B3E A7 00         mov bh, 0
3050   1B40             ; START RELATIONAL
3051   1B40 D7            push a
3052   1B41 11            mov a, b
3053   1B42 26 2B 00      mov b, $2b
3054   1B45 B0            cmp a, b
3055   1B46 FD 71         seq ; ==
3056   1B48 E4            pop a
3057   1B49             ; END RELATIONAL
3058   1B49 FD A8         sor a, b ; ||
3059   1B4B 11            mov a, b
3060   1B4C FA 05 00      lea d, [bp + 5] ; $c
3061   1B4F 32            mov bl, [d]
3062   1B50 A7 00         mov bh, 0
3063   1B52             ; START RELATIONAL
3064   1B52 D7            push a
3065   1B53 11            mov a, b
3066   1B54 26 2D 00      mov b, $2d
3067   1B57 B0            cmp a, b
3068   1B58 FD 71         seq ; ==
3069   1B5A E4            pop a
3070   1B5B             ; END RELATIONAL
3071   1B5B FD A8         sor a, b ; ||
3072   1B5D 11            mov a, b
3073   1B5E FA 05 00      lea d, [bp + 5] ; $c
3074   1B61 32            mov bl, [d]
3075   1B62 A7 00         mov bh, 0
3076   1B64             ; START RELATIONAL
3077   1B64 D7            push a
3078   1B65 11            mov a, b
3079   1B66 26 2A 00      mov b, $2a
3080   1B69 B0            cmp a, b
3081   1B6A FD 71         seq ; ==
3082   1B6C E4            pop a
3083   1B6D             ; END RELATIONAL
3084   1B6D FD A8         sor a, b ; ||
3085   1B6F 11            mov a, b
3086   1B70 FA 05 00      lea d, [bp + 5] ; $c
3087   1B73 32            mov bl, [d]
3088   1B74 A7 00         mov bh, 0
3089   1B76             ; START RELATIONAL
3090   1B76 D7            push a
3091   1B77 11            mov a, b
3092   1B78 26 2F 00      mov b, $2f
3093   1B7B B0            cmp a, b
3094   1B7C FD 71         seq ; ==
3095   1B7E E4            pop a
3096   1B7F             ; END RELATIONAL
3097   1B7F FD A8         sor a, b ; ||
3098   1B81 11            mov a, b
3099   1B82 FA 05 00      lea d, [bp + 5] ; $c
3100   1B85 32            mov bl, [d]
3101   1B86 A7 00         mov bh, 0
3102   1B88             ; START RELATIONAL
3103   1B88 D7            push a
3104   1B89 11            mov a, b
3105   1B8A 26 25 00      mov b, $25
3106   1B8D B0            cmp a, b
3107   1B8E FD 71         seq ; ==
3108   1B90 E4            pop a
3109   1B91             ; END RELATIONAL
3110   1B91 FD A8         sor a, b ; ||
3111   1B93 11            mov a, b
3112   1B94 FA 05 00      lea d, [bp + 5] ; $c
3113   1B97 32            mov bl, [d]
3114   1B98 A7 00         mov bh, 0
3115   1B9A             ; START RELATIONAL
3116   1B9A D7            push a
3117   1B9B 11            mov a, b
3118   1B9C 26 5B 00      mov b, $5b
3119   1B9F B0            cmp a, b
3120   1BA0 FD 71         seq ; ==
3121   1BA2 E4            pop a
3122   1BA3             ; END RELATIONAL
3123   1BA3 FD A8         sor a, b ; ||
3124   1BA5 11            mov a, b
3125   1BA6 FA 05 00      lea d, [bp + 5] ; $c
3126   1BA9 32            mov bl, [d]
3127   1BAA A7 00         mov bh, 0
3128   1BAC             ; START RELATIONAL
3129   1BAC D7            push a
3130   1BAD 11            mov a, b
3131   1BAE 26 5D 00      mov b, $5d
3132   1BB1 B0            cmp a, b
3133   1BB2 FD 71         seq ; ==
3134   1BB4 E4            pop a
3135   1BB5             ; END RELATIONAL
3136   1BB5 FD A8         sor a, b ; ||
3137   1BB7 11            mov a, b
3138   1BB8 FA 05 00      lea d, [bp + 5] ; $c
3139   1BBB 32            mov bl, [d]
3140   1BBC A7 00         mov bh, 0
3141   1BBE             ; START RELATIONAL
3142   1BBE D7            push a
3143   1BBF 11            mov a, b
3144   1BC0 26 28 00      mov b, $28
3145   1BC3 B0            cmp a, b
3146   1BC4 FD 71         seq ; ==
3147   1BC6 E4            pop a
3148   1BC7             ; END RELATIONAL
3149   1BC7 FD A8         sor a, b ; ||
3150   1BC9 11            mov a, b
3151   1BCA FA 05 00      lea d, [bp + 5] ; $c
3152   1BCD 32            mov bl, [d]
3153   1BCE A7 00         mov bh, 0
3154   1BD0             ; START RELATIONAL
3155   1BD0 D7            push a
3156   1BD1 11            mov a, b
3157   1BD2 26 29 00      mov b, $29
3158   1BD5 B0            cmp a, b
3159   1BD6 FD 71         seq ; ==
3160   1BD8 E4            pop a
3161   1BD9             ; END RELATIONAL
3162   1BD9 FD A8         sor a, b ; ||
3163   1BDB 11            mov a, b
3164   1BDC FA 05 00      lea d, [bp + 5] ; $c
3165   1BDF 32            mov bl, [d]
3166   1BE0 A7 00         mov bh, 0
3167   1BE2             ; START RELATIONAL
3168   1BE2 D7            push a
3169   1BE3 11            mov a, b
3170   1BE4 26 7B 00      mov b, $7b
3171   1BE7 B0            cmp a, b
3172   1BE8 FD 71         seq ; ==
3173   1BEA E4            pop a
3174   1BEB             ; END RELATIONAL
3175   1BEB FD A8         sor a, b ; ||
3176   1BED 11            mov a, b
3177   1BEE FA 05 00      lea d, [bp + 5] ; $c
3178   1BF1 32            mov bl, [d]
3179   1BF2 A7 00         mov bh, 0
3180   1BF4             ; START RELATIONAL
3181   1BF4 D7            push a
3182   1BF5 11            mov a, b
3183   1BF6 26 7D 00      mov b, $7d
3184   1BF9 B0            cmp a, b
3185   1BFA FD 71         seq ; ==
3186   1BFC E4            pop a
3187   1BFD             ; END RELATIONAL
3188   1BFD FD A8         sor a, b ; ||
3189   1BFF 11            mov a, b
3190   1C00 FA 05 00      lea d, [bp + 5] ; $c
3191   1C03 32            mov bl, [d]
3192   1C04 A7 00         mov bh, 0
3193   1C06             ; START RELATIONAL
3194   1C06 D7            push a
3195   1C07 11            mov a, b
3196   1C08 26 3A 00      mov b, $3a
3197   1C0B B0            cmp a, b
3198   1C0C FD 71         seq ; ==
3199   1C0E E4            pop a
3200   1C0F             ; END RELATIONAL
3201   1C0F FD A8         sor a, b ; ||
3202   1C11 11            mov a, b
3203   1C12 FA 05 00      lea d, [bp + 5] ; $c
3204   1C15 32            mov bl, [d]
3205   1C16 A7 00         mov bh, 0
3206   1C18             ; START RELATIONAL
3207   1C18 D7            push a
3208   1C19 11            mov a, b
3209   1C1A 26 3B 00      mov b, $3b
3210   1C1D B0            cmp a, b
3211   1C1E FD 71         seq ; ==
3212   1C20 E4            pop a
3213   1C21             ; END RELATIONAL
3214   1C21 FD A8         sor a, b ; ||
3215   1C23 11            mov a, b
3216   1C24 FA 05 00      lea d, [bp + 5] ; $c
3217   1C27 32            mov bl, [d]
3218   1C28 A7 00         mov bh, 0
3219   1C2A             ; START RELATIONAL
3220   1C2A D7            push a
3221   1C2B 11            mov a, b
3222   1C2C 26 3C 00      mov b, $3c
3223   1C2F B0            cmp a, b
3224   1C30 FD 71         seq ; ==
3225   1C32 E4            pop a
3226   1C33             ; END RELATIONAL
3227   1C33 FD A8         sor a, b ; ||
3228   1C35 11            mov a, b
3229   1C36 FA 05 00      lea d, [bp + 5] ; $c
3230   1C39 32            mov bl, [d]
3231   1C3A A7 00         mov bh, 0
3232   1C3C             ; START RELATIONAL
3233   1C3C D7            push a
3234   1C3D 11            mov a, b
3235   1C3E 26 3E 00      mov b, $3e
3236   1C41 B0            cmp a, b
3237   1C42 FD 71         seq ; ==
3238   1C44 E4            pop a
3239   1C45             ; END RELATIONAL
3240   1C45 FD A8         sor a, b ; ||
3241   1C47 11            mov a, b
3242   1C48 FA 05 00      lea d, [bp + 5] ; $c
3243   1C4B 32            mov bl, [d]
3244   1C4C A7 00         mov bh, 0
3245   1C4E             ; START RELATIONAL
3246   1C4E D7            push a
3247   1C4F 11            mov a, b
3248   1C50 26 3D 00      mov b, $3d
3249   1C53 B0            cmp a, b
3250   1C54 FD 71         seq ; ==
3251   1C56 E4            pop a
3252   1C57             ; END RELATIONAL
3253   1C57 FD A8         sor a, b ; ||
3254   1C59 11            mov a, b
3255   1C5A FA 05 00      lea d, [bp + 5] ; $c
3256   1C5D 32            mov bl, [d]
3257   1C5E A7 00         mov bh, 0
3258   1C60             ; START RELATIONAL
3259   1C60 D7            push a
3260   1C61 11            mov a, b
3261   1C62 26 21 00      mov b, $21
3262   1C65 B0            cmp a, b
3263   1C66 FD 71         seq ; ==
3264   1C68 E4            pop a
3265   1C69             ; END RELATIONAL
3266   1C69 FD A8         sor a, b ; ||
3267   1C6B 11            mov a, b
3268   1C6C FA 05 00      lea d, [bp + 5] ; $c
3269   1C6F 32            mov bl, [d]
3270   1C70 A7 00         mov bh, 0
3271   1C72             ; START RELATIONAL
3272   1C72 D7            push a
3273   1C73 11            mov a, b
3274   1C74 26 5E 00      mov b, $5e
3275   1C77 B0            cmp a, b
3276   1C78 FD 71         seq ; ==
3277   1C7A E4            pop a
3278   1C7B             ; END RELATIONAL
3279   1C7B FD A8         sor a, b ; ||
3280   1C7D 11            mov a, b
3281   1C7E FA 05 00      lea d, [bp + 5] ; $c
3282   1C81 32            mov bl, [d]
3283   1C82 A7 00         mov bh, 0
3284   1C84             ; START RELATIONAL
3285   1C84 D7            push a
3286   1C85 11            mov a, b
3287   1C86 26 26 00      mov b, $26
3288   1C89 B0            cmp a, b
3289   1C8A FD 71         seq ; ==
3290   1C8C E4            pop a
3291   1C8D             ; END RELATIONAL
3292   1C8D FD A8         sor a, b ; ||
3293   1C8F 11            mov a, b
3294   1C90 FA 05 00      lea d, [bp + 5] ; $c
3295   1C93 32            mov bl, [d]
3296   1C94 A7 00         mov bh, 0
3297   1C96             ; START RELATIONAL
3298   1C96 D7            push a
3299   1C97 11            mov a, b
3300   1C98 26 7C 00      mov b, $7c
3301   1C9B B0            cmp a, b
3302   1C9C FD 71         seq ; ==
3303   1C9E E4            pop a
3304   1C9F             ; END RELATIONAL
3305   1C9F FD A8         sor a, b ; ||
3306   1CA1 11            mov a, b
3307   1CA2 FA 05 00      lea d, [bp + 5] ; $c
3308   1CA5 32            mov bl, [d]
3309   1CA6 A7 00         mov bh, 0
3310   1CA8             ; START RELATIONAL
3311   1CA8 D7            push a
3312   1CA9 11            mov a, b
3313   1CAA 26 7E 00      mov b, $7e
3314   1CAD B0            cmp a, b
3315   1CAE FD 71         seq ; ==
3316   1CB0 E4            pop a
3317   1CB1             ; END RELATIONAL
3318   1CB1 FD A8         sor a, b ; ||
3319   1CB3 11            mov a, b
3320   1CB4 FA 05 00      lea d, [bp + 5] ; $c
3321   1CB7 32            mov bl, [d]
3322   1CB8 A7 00         mov bh, 0
3323   1CBA             ; START RELATIONAL
3324   1CBA D7            push a
3325   1CBB 11            mov a, b
3326   1CBC 26 2E 00      mov b, $2e
3327   1CBF B0            cmp a, b
3328   1CC0 FD 71         seq ; ==
3329   1CC2 E4            pop a
3330   1CC3             ; END RELATIONAL
3331   1CC3 FD A8         sor a, b ; ||
3332   1CC5 E4            pop a
3333   1CC6 C0 00 00      cmp b, 0
3334   1CC9 C6 D4 1C      je _if44_else
3335   1CCC             _if44_true:
3336   1CCC             ;; return 1; 
3337   1CCC 26 01 00      mov b, $1
3338   1CCF F9            leave
3339   1CD0 09            ret
3340   1CD1 0A D9 1C      jmp _if44_exit
3341   1CD4             _if44_else:
3342   1CD4             ;; return 0; 
3343   1CD4 26 00 00      mov b, $0
3344   1CD7 F9            leave
3345   1CD8 09            ret
3346   1CD9             _if44_exit:
3347   1CD9 F9            leave
3348   1CDA 09            ret
3349   1CDB             
3350   1CDB             TO_FIXED:
3351   1CDB F8 00 00      enter 0 ; (push bp; mov bp, sp)
3352   1CDE             ;; return x * 10; 
3353   1CDE FA 05 00      lea d, [bp + 5] ; $x
3354   1CE1 2A            mov b, [d]
3355   1CE2             ; START FACTORS
3356   1CE2 D7            push a
3357   1CE3 11            mov a, b
3358   1CE4 26 0A 00      mov b, $a
3359   1CE7 AC            mul a, b ; *
3360   1CE8 11            mov a, b
3361   1CE9 27            mov b, a
3362   1CEA E4            pop a
3363   1CEB             ; END FACTORS
3364   1CEB F9            leave
3365   1CEC 09            ret
3366   1CED             
3367   1CED             FROM_FIXED:
3368   1CED F8 00 00      enter 0 ; (push bp; mov bp, sp)
3369   1CF0             ;; return x / 10; 
3370   1CF0 FA 05 00      lea d, [bp + 5] ; $x
3371   1CF3 2A            mov b, [d]
3372   1CF4             ; START FACTORS
3373   1CF4 D7            push a
3374   1CF5 11            mov a, b
3375   1CF6 26 0A 00      mov b, $a
3376   1CF9 AE            div a, b
3377   1CFA 27            mov b, a
3378   1CFB E4            pop a
3379   1CFC             ; END FACTORS
3380   1CFC F9            leave
3381   1CFD 09            ret
3382   1CFE             
3383   1CFE             TO_FIXED00:
3384   1CFE F8 00 00      enter 0 ; (push bp; mov bp, sp)
3385   1D01             ;; return x * 100; 
3386   1D01 FA 05 00      lea d, [bp + 5] ; $x
3387   1D04 2A            mov b, [d]
3388   1D05             ; START FACTORS
3389   1D05 D7            push a
3390   1D06 11            mov a, b
3391   1D07 26 64 00      mov b, $64
3392   1D0A AC            mul a, b ; *
3393   1D0B 11            mov a, b
3394   1D0C 27            mov b, a
3395   1D0D E4            pop a
3396   1D0E             ; END FACTORS
3397   1D0E F9            leave
3398   1D0F 09            ret
3399   1D10             
3400   1D10             FROM_FIXED00:
3401   1D10 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3402   1D13             ;; return x / 100; 
3403   1D13 FA 05 00      lea d, [bp + 5] ; $x
3404   1D16 2A            mov b, [d]
3405   1D17             ; START FACTORS
3406   1D17 D7            push a
3407   1D18 11            mov a, b
3408   1D19 26 64 00      mov b, $64
3409   1D1C AE            div a, b
3410   1D1D 27            mov b, a
3411   1D1E E4            pop a
3412   1D1F             ; END FACTORS
3413   1D1F F9            leave
3414   1D20 09            ret
3415   1D21             
3416   1D21             get_rand:
3417   1D21 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3418   1D24             ; $r 
3419   1D24 52 02 00      sub sp, 2
3420   1D27             ;; r = rand(); 
3421   1D27 FA FF FF      lea d, [bp + -1] ; $r
3422   1D2A DA            push d
3423   1D2B 07 99 18      call rand
3424   1D2E E7            pop d
3425   1D2F FD 43         mov [d], b
3426   1D31             ;; r = (r >> 8) | (r << 8); 
3427   1D31 FA FF FF      lea d, [bp + -1] ; $r
3428   1D34 DA            push d
3429   1D35 FA FF FF      lea d, [bp + -1] ; $r
3430   1D38 2A            mov b, [d]
3431   1D39             ; START SHIFT
3432   1D39 D7            push a
3433   1D3A 11            mov a, b
3434   1D3B 26 08 00      mov b, $8
3435   1D3E FD 39         mov c, b
3436   1D40 A1            shr a, cl
3437   1D41 27            mov b, a
3438   1D42 E4            pop a
3439   1D43             ; END SHIFT
3440   1D43 D7            push a
3441   1D44 11            mov a, b
3442   1D45 FA FF FF      lea d, [bp + -1] ; $r
3443   1D48 2A            mov b, [d]
3444   1D49             ; START SHIFT
3445   1D49 D7            push a
3446   1D4A 11            mov a, b
3447   1D4B 26 08 00      mov b, $8
3448   1D4E FD 39         mov c, b
3449   1D50 9D            shl a, cl
3450   1D51 27            mov b, a
3451   1D52 E4            pop a
3452   1D53             ; END SHIFT
3453   1D53 FD 70         or b, a ; |
3454   1D55 E4            pop a
3455   1D56 E7            pop d
3456   1D57 FD 43         mov [d], b
3457   1D59             ;; return ((r % spread) + 1); 
3458   1D59 FA FF FF      lea d, [bp + -1] ; $r
3459   1D5C 2A            mov b, [d]
3460   1D5D             ; START FACTORS
3461   1D5D D7            push a
3462   1D5E 11            mov a, b
3463   1D5F FA 05 00      lea d, [bp + 5] ; $spread
3464   1D62 2A            mov b, [d]
3465   1D63 AE            div a, b ; 
3466   1D64 11            mov a, b
3467   1D65 27            mov b, a
3468   1D66 E4            pop a
3469   1D67             ; END FACTORS
3470   1D67             ; START TERMS
3471   1D67 D7            push a
3472   1D68 11            mov a, b
3473   1D69 26 01 00      mov b, $1
3474   1D6C 56            add b, a
3475   1D6D E4            pop a
3476   1D6E             ; END TERMS
3477   1D6E F9            leave
3478   1D6F 09            ret
3479   1D70             
3480   1D70             rand8:
3481   1D70 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3482   1D73             ;; return (get_rand(8)); 
3483   1D73 26 08 00      mov b, $8
3484   1D76 FD AB         swp b
3485   1D78 D8            push b
3486   1D79 07 21 1D      call get_rand
3487   1D7C 51 02 00      add sp, 2
3488   1D7F F9            leave
3489   1D80 09            ret
3490   1D81             
3491   1D81             input:
3492   1D81 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3493   1D84             ; $c 
3494   1D84 52 02 00      sub sp, 2
3495   1D87             ;; while((c = getchar()) != '\n') { 
3496   1D87             _while45_cond:
3497   1D87 FA FF FF      lea d, [bp + -1] ; $c
3498   1D8A DA            push d
3499   1D8B 07 0D 13      call getchar
3500   1D8E E7            pop d
3501   1D8F FD 43         mov [d], b
3502   1D91             ; START RELATIONAL
3503   1D91 D7            push a
3504   1D92 11            mov a, b
3505   1D93 26 0A 00      mov b, $a
3506   1D96 B0            cmp a, b
3507   1D97 FD 72         sneq ; !=
3508   1D99 E4            pop a
3509   1D9A             ; END RELATIONAL
3510   1D9A C0 00 00      cmp b, 0
3511   1D9D C6 F8 1D      je _while45_exit
3512   1DA0             _while45_block:
3513   1DA0             ;; if (c == -1) 
3514   1DA0             _if46_cond:
3515   1DA0 FA FF FF      lea d, [bp + -1] ; $c
3516   1DA3 2A            mov b, [d]
3517   1DA4             ; START RELATIONAL
3518   1DA4 D7            push a
3519   1DA5 11            mov a, b
3520   1DA6 26 FF FF      mov b, $ffff
3521   1DA9 B0            cmp a, b
3522   1DAA FD 71         seq ; ==
3523   1DAC E4            pop a
3524   1DAD             ; END RELATIONAL
3525   1DAD C0 00 00      cmp b, 0
3526   1DB0 C6 B9 1D      je _if46_exit
3527   1DB3             _if46_true:
3528   1DB3             ;; exit(); 
3529   1DB3 07 33 17      call exit
3530   1DB6 0A B9 1D      jmp _if46_exit
3531   1DB9             _if46_exit:
3532   1DB9             ;; if (l > 1) { 
3533   1DB9             _if47_cond:
3534   1DB9 FA 07 00      lea d, [bp + 7] ; $l
3535   1DBC 32            mov bl, [d]
3536   1DBD A7 00         mov bh, 0
3537   1DBF             ; START RELATIONAL
3538   1DBF D7            push a
3539   1DC0 11            mov a, b
3540   1DC1 26 01 00      mov b, $1
3541   1DC4 B0            cmp a, b
3542   1DC5 FD 81         sgu ; > (unsigned)
3543   1DC7 E4            pop a
3544   1DC8             ; END RELATIONAL
3545   1DC8 C0 00 00      cmp b, 0
3546   1DCB C6 F5 1D      je _if47_exit
3547   1DCE             _if47_true:
3548   1DCE             ;; *b++ = c; 
3549   1DCE FA 05 00      lea d, [bp + 5] ; $b
3550   1DD1 2A            mov b, [d]
3551   1DD2 D8            push b
3552   1DD3 FD 77         inc b
3553   1DD5 FA 05 00      lea d, [bp + 5] ; $b
3554   1DD8 FD 43         mov [d], b
3555   1DDA E5            pop b
3556   1DDB D8            push b
3557   1DDC FA FF FF      lea d, [bp + -1] ; $c
3558   1DDF 2A            mov b, [d]
3559   1DE0 E7            pop d
3560   1DE1 FD 3E         mov [d], bl
3561   1DE3             ;; l--; 
3562   1DE3 FA 07 00      lea d, [bp + 7] ; $l
3563   1DE6 32            mov bl, [d]
3564   1DE7 A7 00         mov bh, 0
3565   1DE9 D8            push b
3566   1DEA FD 7D         dec b
3567   1DEC FA 07 00      lea d, [bp + 7] ; $l
3568   1DEF FD 43         mov [d], b
3569   1DF1 E5            pop b
3570   1DF2 0A F5 1D      jmp _if47_exit
3571   1DF5             _if47_exit:
3572   1DF5 0A 87 1D      jmp _while45_cond
3573   1DF8             _while45_exit:
3574   1DF8             ;; *b = 0; 
3575   1DF8 FA 05 00      lea d, [bp + 5] ; $b
3576   1DFB 2A            mov b, [d]
3577   1DFC D8            push b
3578   1DFD 26 00 00      mov b, $0
3579   1E00 E7            pop d
3580   1E01 FD 3E         mov [d], bl
3581   1E03 F9            leave
3582   1E04 09            ret
3583   1E05             
3584   1E05             yesno:
3585   1E05 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3586   1E08             ; $b 
3587   1E08 52 02 00      sub sp, 2
3588   1E0B             ;; input(b,2); 
3589   1E0B 26 02 00      mov b, $2
3590   1E0E DD            push bl
3591   1E0F FA FF FF      lea d, [bp + -1] ; $b
3592   1E12 2D            mov b, d
3593   1E13 FD AB         swp b
3594   1E15 D8            push b
3595   1E16 07 81 1D      call input
3596   1E19 51 03 00      add sp, 3
3597   1E1C             ;; if (tolower(*b) == 'y') 
3598   1E1C             _if48_cond:
3599   1E1C FA FF FF      lea d, [bp + -1] ; $b
3600   1E1F 2D            mov b, d
3601   1E20 74            mov d, b
3602   1E21 32            mov bl, [d]
3603   1E22 A7 00         mov bh, 0
3604   1E24 DD            push bl
3605   1E25 07 66 1A      call tolower
3606   1E28 51 01 00      add sp, 1
3607   1E2B             ; START RELATIONAL
3608   1E2B D7            push a
3609   1E2C 11            mov a, b
3610   1E2D 26 79 00      mov b, $79
3611   1E30 B0            cmp a, b
3612   1E31 FD 71         seq ; ==
3613   1E33 E4            pop a
3614   1E34             ; END RELATIONAL
3615   1E34 C0 00 00      cmp b, 0
3616   1E37 C6 42 1E      je _if48_exit
3617   1E3A             _if48_true:
3618   1E3A             ;; return 1; 
3619   1E3A 26 01 00      mov b, $1
3620   1E3D F9            leave
3621   1E3E 09            ret
3622   1E3F 0A 42 1E      jmp _if48_exit
3623   1E42             _if48_exit:
3624   1E42             ;; return 0; 
3625   1E42 26 00 00      mov b, $0
3626   1E45 F9            leave
3627   1E46 09            ret
3628   1E47             
3629   1E47             input_f00:
3630   1E47 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3631   1E4A             ; $v 
3632   1E4A             ; $buf 
3633   1E4A             ; $x 
3634   1E4A 52 0C 00      sub sp, 12
3635   1E4D             ;; input(buf, 8); 
3636   1E4D 26 08 00      mov b, $8
3637   1E50 DD            push bl
3638   1E51 FA F7 FF      lea d, [bp + -9] ; $buf
3639   1E54 2D            mov b, d
3640   1E55 FD AB         swp b
3641   1E57 D8            push b
3642   1E58 07 81 1D      call input
3643   1E5B 51 03 00      add sp, 3
3644   1E5E             ;; x = buf; 
3645   1E5E FA F5 FF      lea d, [bp + -11] ; $x
3646   1E61 DA            push d
3647   1E62 FA F7 FF      lea d, [bp + -9] ; $buf
3648   1E65 2D            mov b, d
3649   1E66 E7            pop d
3650   1E67 FD 43         mov [d], b
3651   1E69             ;; if (!is_digit(*x)) 
3652   1E69             _if49_cond:
3653   1E69 FA F5 FF      lea d, [bp + -11] ; $x
3654   1E6C 2A            mov b, [d]
3655   1E6D 74            mov d, b
3656   1E6E 32            mov bl, [d]
3657   1E6F A7 00         mov bh, 0
3658   1E71 DD            push bl
3659   1E72 07 DC 19      call is_digit
3660   1E75 51 01 00      add sp, 1
3661   1E78 C0 00 00      cmp b, 0
3662   1E7B FD 71         seq ; !
3663   1E7D C0 00 00      cmp b, 0
3664   1E80 C6 8B 1E      je _if49_exit
3665   1E83             _if49_true:
3666   1E83             ;; return -1; 
3667   1E83 26 FF FF      mov b, $ffff
3668   1E86 F9            leave
3669   1E87 09            ret
3670   1E88 0A 8B 1E      jmp _if49_exit
3671   1E8B             _if49_exit:
3672   1E8B             ;; v = 100 * (*x++ - '0'); 
3673   1E8B FA FF FF      lea d, [bp + -1] ; $v
3674   1E8E DA            push d
3675   1E8F 26 64 00      mov b, $64
3676   1E92             ; START FACTORS
3677   1E92 D7            push a
3678   1E93 11            mov a, b
3679   1E94 FA F5 FF      lea d, [bp + -11] ; $x
3680   1E97 2A            mov b, [d]
3681   1E98 D8            push b
3682   1E99 FD 77         inc b
3683   1E9B FA F5 FF      lea d, [bp + -11] ; $x
3684   1E9E FD 43         mov [d], b
3685   1EA0 E5            pop b
3686   1EA1 74            mov d, b
3687   1EA2 32            mov bl, [d]
3688   1EA3 A7 00         mov bh, 0
3689   1EA5             ; START TERMS
3690   1EA5 D7            push a
3691   1EA6 11            mov a, b
3692   1EA7 26 30 00      mov b, $30
3693   1EAA 60            sub a, b
3694   1EAB 27            mov b, a
3695   1EAC E4            pop a
3696   1EAD             ; END TERMS
3697   1EAD AC            mul a, b ; *
3698   1EAE 11            mov a, b
3699   1EAF 27            mov b, a
3700   1EB0 E4            pop a
3701   1EB1             ; END FACTORS
3702   1EB1 E7            pop d
3703   1EB2 FD 43         mov [d], b
3704   1EB4             ;; if (*x == 0) 
3705   1EB4             _if50_cond:
3706   1EB4 FA F5 FF      lea d, [bp + -11] ; $x
3707   1EB7 2A            mov b, [d]
3708   1EB8 74            mov d, b
3709   1EB9 32            mov bl, [d]
3710   1EBA A7 00         mov bh, 0
3711   1EBC             ; START RELATIONAL
3712   1EBC D7            push a
3713   1EBD 11            mov a, b
3714   1EBE 26 00 00      mov b, $0
3715   1EC1 B0            cmp a, b
3716   1EC2 FD 71         seq ; ==
3717   1EC4 E4            pop a
3718   1EC5             ; END RELATIONAL
3719   1EC5 C0 00 00      cmp b, 0
3720   1EC8 C6 D4 1E      je _if50_exit
3721   1ECB             _if50_true:
3722   1ECB             ;; return v; 
3723   1ECB FA FF FF      lea d, [bp + -1] ; $v
3724   1ECE 2A            mov b, [d]
3725   1ECF F9            leave
3726   1ED0 09            ret
3727   1ED1 0A D4 1E      jmp _if50_exit
3728   1ED4             _if50_exit:
3729   1ED4             ;; if (*x++ != '.') 
3730   1ED4             _if51_cond:
3731   1ED4 FA F5 FF      lea d, [bp + -11] ; $x
3732   1ED7 2A            mov b, [d]
3733   1ED8 D8            push b
3734   1ED9 FD 77         inc b
3735   1EDB FA F5 FF      lea d, [bp + -11] ; $x
3736   1EDE FD 43         mov [d], b
3737   1EE0 E5            pop b
3738   1EE1 74            mov d, b
3739   1EE2 32            mov bl, [d]
3740   1EE3 A7 00         mov bh, 0
3741   1EE5             ; START RELATIONAL
3742   1EE5 D7            push a
3743   1EE6 11            mov a, b
3744   1EE7 26 2E 00      mov b, $2e
3745   1EEA B0            cmp a, b
3746   1EEB FD 72         sneq ; !=
3747   1EED E4            pop a
3748   1EEE             ; END RELATIONAL
3749   1EEE C0 00 00      cmp b, 0
3750   1EF1 C6 FC 1E      je _if51_exit
3751   1EF4             _if51_true:
3752   1EF4             ;; return -1; 
3753   1EF4 26 FF FF      mov b, $ffff
3754   1EF7 F9            leave
3755   1EF8 09            ret
3756   1EF9 0A FC 1E      jmp _if51_exit
3757   1EFC             _if51_exit:
3758   1EFC             ;; if (!is_digit(*x)) 
3759   1EFC             _if52_cond:
3760   1EFC FA F5 FF      lea d, [bp + -11] ; $x
3761   1EFF 2A            mov b, [d]
3762   1F00 74            mov d, b
3763   1F01 32            mov bl, [d]
3764   1F02 A7 00         mov bh, 0
3765   1F04 DD            push bl
3766   1F05 07 DC 19      call is_digit
3767   1F08 51 01 00      add sp, 1
3768   1F0B C0 00 00      cmp b, 0
3769   1F0E FD 71         seq ; !
3770   1F10 C0 00 00      cmp b, 0
3771   1F13 C6 1E 1F      je _if52_exit
3772   1F16             _if52_true:
3773   1F16             ;; return -1; 
3774   1F16 26 FF FF      mov b, $ffff
3775   1F19 F9            leave
3776   1F1A 09            ret
3777   1F1B 0A 1E 1F      jmp _if52_exit
3778   1F1E             _if52_exit:
3779   1F1E             ;; v = v + 10 * (*x++ - '0'); 
3780   1F1E FA FF FF      lea d, [bp + -1] ; $v
3781   1F21 DA            push d
3782   1F22 FA FF FF      lea d, [bp + -1] ; $v
3783   1F25 2A            mov b, [d]
3784   1F26             ; START TERMS
3785   1F26 D7            push a
3786   1F27 11            mov a, b
3787   1F28 26 0A 00      mov b, $a
3788   1F2B             ; START FACTORS
3789   1F2B D7            push a
3790   1F2C 11            mov a, b
3791   1F2D FA F5 FF      lea d, [bp + -11] ; $x
3792   1F30 2A            mov b, [d]
3793   1F31 D8            push b
3794   1F32 FD 77         inc b
3795   1F34 FA F5 FF      lea d, [bp + -11] ; $x
3796   1F37 FD 43         mov [d], b
3797   1F39 E5            pop b
3798   1F3A 74            mov d, b
3799   1F3B 32            mov bl, [d]
3800   1F3C A7 00         mov bh, 0
3801   1F3E             ; START TERMS
3802   1F3E D7            push a
3803   1F3F 11            mov a, b
3804   1F40 26 30 00      mov b, $30
3805   1F43 60            sub a, b
3806   1F44 27            mov b, a
3807   1F45 E4            pop a
3808   1F46             ; END TERMS
3809   1F46 AC            mul a, b ; *
3810   1F47 11            mov a, b
3811   1F48 27            mov b, a
3812   1F49 E4            pop a
3813   1F4A             ; END FACTORS
3814   1F4A 56            add b, a
3815   1F4B E4            pop a
3816   1F4C             ; END TERMS
3817   1F4C E7            pop d
3818   1F4D FD 43         mov [d], b
3819   1F4F             ;; if (!*x) 
3820   1F4F             _if53_cond:
3821   1F4F FA F5 FF      lea d, [bp + -11] ; $x
3822   1F52 2A            mov b, [d]
3823   1F53 74            mov d, b
3824   1F54 32            mov bl, [d]
3825   1F55 A7 00         mov bh, 0
3826   1F57 C0 00 00      cmp b, 0
3827   1F5A FD 71         seq ; !
3828   1F5C C0 00 00      cmp b, 0
3829   1F5F C6 6B 1F      je _if53_exit
3830   1F62             _if53_true:
3831   1F62             ;; return v; 
3832   1F62 FA FF FF      lea d, [bp + -1] ; $v
3833   1F65 2A            mov b, [d]
3834   1F66 F9            leave
3835   1F67 09            ret
3836   1F68 0A 6B 1F      jmp _if53_exit
3837   1F6B             _if53_exit:
3838   1F6B             ;; if (!is_digit(*x)) 
3839   1F6B             _if54_cond:
3840   1F6B FA F5 FF      lea d, [bp + -11] ; $x
3841   1F6E 2A            mov b, [d]
3842   1F6F 74            mov d, b
3843   1F70 32            mov bl, [d]
3844   1F71 A7 00         mov bh, 0
3845   1F73 DD            push bl
3846   1F74 07 DC 19      call is_digit
3847   1F77 51 01 00      add sp, 1
3848   1F7A C0 00 00      cmp b, 0
3849   1F7D FD 71         seq ; !
3850   1F7F C0 00 00      cmp b, 0
3851   1F82 C6 8D 1F      je _if54_exit
3852   1F85             _if54_true:
3853   1F85             ;; return -1; 
3854   1F85 26 FF FF      mov b, $ffff
3855   1F88 F9            leave
3856   1F89 09            ret
3857   1F8A 0A 8D 1F      jmp _if54_exit
3858   1F8D             _if54_exit:
3859   1F8D             ;; v = v + *x++ - '0'; 
3860   1F8D FA FF FF      lea d, [bp + -1] ; $v
3861   1F90 DA            push d
3862   1F91 FA FF FF      lea d, [bp + -1] ; $v
3863   1F94 2A            mov b, [d]
3864   1F95             ; START TERMS
3865   1F95 D7            push a
3866   1F96 11            mov a, b
3867   1F97 FA F5 FF      lea d, [bp + -11] ; $x
3868   1F9A 2A            mov b, [d]
3869   1F9B D8            push b
3870   1F9C FD 77         inc b
3871   1F9E FA F5 FF      lea d, [bp + -11] ; $x
3872   1FA1 FD 43         mov [d], b
3873   1FA3 E5            pop b
3874   1FA4 74            mov d, b
3875   1FA5 32            mov bl, [d]
3876   1FA6 A7 00         mov bh, 0
3877   1FA8 56            add b, a
3878   1FA9 11            mov a, b
3879   1FAA 26 30 00      mov b, $30
3880   1FAD 60            sub a, b
3881   1FAE 27            mov b, a
3882   1FAF E4            pop a
3883   1FB0             ; END TERMS
3884   1FB0 E7            pop d
3885   1FB1 FD 43         mov [d], b
3886   1FB3             ;; return v; 
3887   1FB3 FA FF FF      lea d, [bp + -1] ; $v
3888   1FB6 2A            mov b, [d]
3889   1FB7 F9            leave
3890   1FB8 09            ret
3891   1FB9             
3892   1FB9             input_int:
3893   1FB9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3894   1FBC             ; $x 
3895   1FBC 52 08 00      sub sp, 8
3896   1FBF             ;; input(x, 8); 
3897   1FBF 26 08 00      mov b, $8
3898   1FC2 DD            push bl
3899   1FC3 FA F9 FF      lea d, [bp + -7] ; $x
3900   1FC6 2D            mov b, d
3901   1FC7 FD AB         swp b
3902   1FC9 D8            push b
3903   1FCA 07 81 1D      call input
3904   1FCD 51 03 00      add sp, 3
3905   1FD0             ;; if (!is_digit(*x)) 
3906   1FD0             _if55_cond:
3907   1FD0 FA F9 FF      lea d, [bp + -7] ; $x
3908   1FD3 2D            mov b, d
3909   1FD4 74            mov d, b
3910   1FD5 32            mov bl, [d]
3911   1FD6 A7 00         mov bh, 0
3912   1FD8 DD            push bl
3913   1FD9 07 DC 19      call is_digit
3914   1FDC 51 01 00      add sp, 1
3915   1FDF C0 00 00      cmp b, 0
3916   1FE2 FD 71         seq ; !
3917   1FE4 C0 00 00      cmp b, 0
3918   1FE7 C6 F2 1F      je _if55_exit
3919   1FEA             _if55_true:
3920   1FEA             ;; return -1; 
3921   1FEA 26 FF FF      mov b, $ffff
3922   1FED F9            leave
3923   1FEE 09            ret
3924   1FEF 0A F2 1F      jmp _if55_exit
3925   1FF2             _if55_exit:
3926   1FF2             ;; return atoi(x); 
3927   1FF2 FA F9 FF      lea d, [bp + -7] ; $x
3928   1FF5 2D            mov b, d
3929   1FF6 FD AB         swp b
3930   1FF8 D8            push b
3931   1FF9 07 8A 17      call atoi
3932   1FFC 51 02 00      add sp, 2
3933   1FFF F9            leave
3934   2000 09            ret
3935   2001             
3936   2001             print100:
3937   2001 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3938   2004             ; $p 
3939   2004 52 02 00      sub sp, 2
3940   2007             ;; *p = buf; 
3941   2007 FA FF FF      lea d, [bp + -1] ; $p
3942   200A 2A            mov b, [d]
3943   200B D8            push b
3944   200C 3B 3F 63      mov d, st_print100_buf_dt ; static buf
3945   200F 2D            mov b, d
3946   2010 E7            pop d
3947   2011 FD 3E         mov [d], bl
3948   2013             ;; if (v < 0) { 
3949   2013             _if56_cond:
3950   2013 FA 05 00      lea d, [bp + 5] ; $v
3951   2016 2A            mov b, [d]
3952   2017             ; START RELATIONAL
3953   2017 D7            push a
3954   2018 11            mov a, b
3955   2019 26 00 00      mov b, $0
3956   201C B0            cmp a, b
3957   201D FD 73         slt ; < (signed)
3958   201F E4            pop a
3959   2020             ; END RELATIONAL
3960   2020 C0 00 00      cmp b, 0
3961   2023 C6 4A 20      je _if56_exit
3962   2026             _if56_true:
3963   2026             ;; v = -v; 
3964   2026 FA 05 00      lea d, [bp + 5] ; $v
3965   2029 DA            push d
3966   202A FA 05 00      lea d, [bp + 5] ; $v
3967   202D 2A            mov b, [d]
3968   202E FD 97         neg b
3969   2030 E7            pop d
3970   2031 FD 43         mov [d], b
3971   2033             ;; *p++ = '-'; 
3972   2033 FA FF FF      lea d, [bp + -1] ; $p
3973   2036 2A            mov b, [d]
3974   2037 D8            push b
3975   2038 FD 77         inc b
3976   203A FA FF FF      lea d, [bp + -1] ; $p
3977   203D FD 43         mov [d], b
3978   203F E5            pop b
3979   2040 D8            push b
3980   2041 26 2D 00      mov b, $2d
3981   2044 E7            pop d
3982   2045 FD 3E         mov [d], bl
3983   2047 0A 4A 20      jmp _if56_exit
3984   204A             _if56_exit:
3985   204A             ;; return buf; 
3986   204A 3B 3F 63      mov d, st_print100_buf_dt ; static buf
3987   204D 2D            mov b, d
3988   204E F9            leave
3989   204F 09            ret
3990   2050             
3991   2050             inoperable:
3992   2050 F8 00 00      enter 0 ; (push bp; mov bp, sp)
3993   2053             ;; if (damage[u] < 0) { 
3994   2053             _if57_cond:
3995   2053 3B 5D 61      mov d, _damage_data ; $damage
3996   2056 D7            push a
3997   2057 DA            push d
3998   2058 FA 05 00      lea d, [bp + 5] ; $u
3999   205B 32            mov bl, [d]
4000   205C A7 00         mov bh, 0
4001   205E E7            pop d
4002   205F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4003   2063 E4            pop a
4004   2064 2A            mov b, [d]
4005   2065             ; START RELATIONAL
4006   2065 D7            push a
4007   2066 11            mov a, b
4008   2067 26 00 00      mov b, $0
4009   206A B0            cmp a, b
4010   206B FD 73         slt ; < (signed)
4011   206D E4            pop a
4012   206E             ; END RELATIONAL
4013   206E C0 00 00      cmp b, 0
4014   2071 C6 BB 20      je _if57_exit
4015   2074             _if57_true:
4016   2074             ;; printf("%s %s inoperable.\n", 
4017   2074             _ternary59_cond:
4018   2074 FA 05 00      lea d, [bp + 5] ; $u
4019   2077 32            mov bl, [d]
4020   2078 A7 00         mov bh, 0
4021   207A             ; START RELATIONAL
4022   207A D7            push a
4023   207B 11            mov a, b
4024   207C 26 05 00      mov b, $5
4025   207F B0            cmp a, b
4026   2080 FD 71         seq ; ==
4027   2082 E4            pop a
4028   2083             ; END RELATIONAL
4029   2083 C0 00 00      cmp b, 0
4030   2086 C6 8F 20      je _ternary59_false
4031   2089             _ternary59_true:
4032   2089 26 C3 64      mov b, _s33 ; "are"
4033   208C 0A 92 20      jmp _ternary59_exit
4034   208F             _ternary59_false:
4035   208F 26 C7 64      mov b, _s34 ; "is"
4036   2092             _ternary59_exit:
4037   2092 FD AB         swp b
4038   2094 D8            push b
4039   2095 FA 05 00      lea d, [bp + 5] ; $u
4040   2098 32            mov bl, [d]
4041   2099 A7 00         mov bh, 0
4042   209B FD AB         swp b
4043   209D D8            push b
4044   209E 07 20 5D      call get_device_name
4045   20A1 51 02 00      add sp, 2
4046   20A4 FD AB         swp b
4047   20A6 D8            push b
4048   20A7 26 CA 64      mov b, _s35 ; "%s %s inoperable.\n"
4049   20AA FD AB         swp b
4050   20AC D8            push b
4051   20AD 07 D6 05      call printf
4052   20B0 51 06 00      add sp, 6
4053   20B3             ;; return 1; 
4054   20B3 26 01 00      mov b, $1
4055   20B6 F9            leave
4056   20B7 09            ret
4057   20B8 0A BB 20      jmp _if57_exit
4058   20BB             _if57_exit:
4059   20BB             ;; return 0; 
4060   20BB 26 00 00      mov b, $0
4061   20BE F9            leave
4062   20BF 09            ret
4063   20C0             
4064   20C0             intro:
4065   20C0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4066   20C3             ;; showfile("startrek.intro"); 
4067   20C3 26 DD 64      mov b, _s36 ; "startrek.intro"
4068   20C6 FD AB         swp b
4069   20C8 D8            push b
4070   20C9 07 72 60      call showfile
4071   20CC 51 02 00      add sp, 2
4072   20CF             ;; if (yesno()) 
4073   20CF             _if60_cond:
4074   20CF 07 05 1E      call yesno
4075   20D2 C0 00 00      cmp b, 0
4076   20D5 C6 E7 20      je _if60_exit
4077   20D8             _if60_true:
4078   20D8             ;; showfile("startrek.doc"); 
4079   20D8 26 EC 64      mov b, _s37 ; "startrek.doc"
4080   20DB FD AB         swp b
4081   20DD D8            push b
4082   20DE 07 72 60      call showfile
4083   20E1 51 02 00      add sp, 2
4084   20E4 0A E7 20      jmp _if60_exit
4085   20E7             _if60_exit:
4086   20E7             ;; showfile("startrek.logo"); 
4087   20E7 26 F9 64      mov b, _s38 ; "startrek.logo"
4088   20EA FD AB         swp b
4089   20EC D8            push b
4090   20ED 07 72 60      call showfile
4091   20F0 51 02 00      add sp, 2
4092   20F3             ;; stardate = TO_FIXED((get_rand(20) + 20) * 100); 
4093   20F3 3B 75 61      mov d, _stardate ; $stardate
4094   20F6 DA            push d
4095   20F7 26 14 00      mov b, $14
4096   20FA FD AB         swp b
4097   20FC D8            push b
4098   20FD 07 21 1D      call get_rand
4099   2100 51 02 00      add sp, 2
4100   2103             ; START TERMS
4101   2103 D7            push a
4102   2104 11            mov a, b
4103   2105 26 14 00      mov b, $14
4104   2108 56            add b, a
4105   2109 E4            pop a
4106   210A             ; END TERMS
4107   210A             ; START FACTORS
4108   210A D7            push a
4109   210B 11            mov a, b
4110   210C 26 64 00      mov b, $64
4111   210F AC            mul a, b ; *
4112   2110 11            mov a, b
4113   2111 27            mov b, a
4114   2112 E4            pop a
4115   2113             ; END FACTORS
4116   2113 FD AB         swp b
4117   2115 D8            push b
4118   2116 07 DB 1C      call TO_FIXED
4119   2119 51 02 00      add sp, 2
4120   211C E7            pop d
4121   211D FD 43         mov [d], b
4122   211F F9            leave
4123   2120 09            ret
4124   2121             
4125   2121             new_game:
4126   2121 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4127   2124             ; $cmd 
4128   2124 52 04 00      sub sp, 4
4129   2127             ;; initialize(); 
4130   2127 07 B3 23      call initialize
4131   212A             ;; new_quadrant(); 
4132   212A 07 50 28      call new_quadrant
4133   212D             ;; short_range_scan(); 
4134   212D 07 06 35      call short_range_scan
4135   2130             ;; while (1) { 
4136   2130             _while61_cond:
4137   2130 26 01 00      mov b, $1
4138   2133 C0 00 00      cmp b, 0
4139   2136 C6 B1 23      je _while61_exit
4140   2139             _while61_block:
4141   2139             ;; if (shield + energy <= 10 && (energy < 10 || damage[7] < 0)) { 
4142   2139             _if62_cond:
4143   2139 3B 56 61      mov d, _shield ; $shield
4144   213C 2A            mov b, [d]
4145   213D             ; START TERMS
4146   213D D7            push a
4147   213E 11            mov a, b
4148   213F 3B 9B 60      mov d, _energy ; $energy
4149   2142 2A            mov b, [d]
4150   2143 56            add b, a
4151   2144 E4            pop a
4152   2145             ; END TERMS
4153   2145             ; START RELATIONAL
4154   2145 D7            push a
4155   2146 11            mov a, b
4156   2147 26 0A 00      mov b, $a
4157   214A B0            cmp a, b
4158   214B FD 73         slt ; <= (signed)
4159   214D E4            pop a
4160   214E             ; END RELATIONAL
4161   214E D7            push a
4162   214F 11            mov a, b
4163   2150 3B 9B 60      mov d, _energy ; $energy
4164   2153 2A            mov b, [d]
4165   2154             ; START RELATIONAL
4166   2154 D7            push a
4167   2155 11            mov a, b
4168   2156 26 0A 00      mov b, $a
4169   2159 B0            cmp a, b
4170   215A FD 73         slt ; < (signed)
4171   215C E4            pop a
4172   215D             ; END RELATIONAL
4173   215D D7            push a
4174   215E 11            mov a, b
4175   215F 3B 5D 61      mov d, _damage_data ; $damage
4176   2162 D7            push a
4177   2163 DA            push d
4178   2164 26 07 00      mov b, $7
4179   2167 E7            pop d
4180   2168 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4181   216C E4            pop a
4182   216D 2A            mov b, [d]
4183   216E             ; START RELATIONAL
4184   216E D7            push a
4185   216F 11            mov a, b
4186   2170 26 00 00      mov b, $0
4187   2173 B0            cmp a, b
4188   2174 FD 73         slt ; < (signed)
4189   2176 E4            pop a
4190   2177             ; END RELATIONAL
4191   2177 FD A8         sor a, b ; ||
4192   2179 E4            pop a
4193   217A FD A7         sand a, b
4194   217C E4            pop a
4195   217D C0 00 00      cmp b, 0
4196   2180 C6 95 21      je _if62_exit
4197   2183             _if62_true:
4198   2183             ;; showfile("startrek.fatal"); 
4199   2183 26 07 65      mov b, _s39 ; "startrek.fatal"
4200   2186 FD AB         swp b
4201   2188 D8            push b
4202   2189 07 72 60      call showfile
4203   218C 51 02 00      add sp, 2
4204   218F             ;; end_of_time(); 
4205   218F 07 EA 54      call end_of_time
4206   2192 0A 95 21      jmp _if62_exit
4207   2195             _if62_exit:
4208   2195             ;; puts("Command? "); 
4209   2195 26 16 65      mov b, _s40 ; "Command? "
4210   2198 FD AB         swp b
4211   219A D8            push b
4212   219B 07 36 13      call puts
4213   219E 51 02 00      add sp, 2
4214   21A1             ;; input(cmd, 4); 
4215   21A1 26 04 00      mov b, $4
4216   21A4 DD            push bl
4217   21A5 FA FD FF      lea d, [bp + -3] ; $cmd
4218   21A8 2D            mov b, d
4219   21A9 FD AB         swp b
4220   21AB D8            push b
4221   21AC 07 81 1D      call input
4222   21AF 51 03 00      add sp, 3
4223   21B2             ;; putchar('\n'); 
4224   21B2 26 0A 00      mov b, $a
4225   21B5 DD            push bl
4226   21B6 07 00 13      call putchar
4227   21B9 51 01 00      add sp, 1
4228   21BC             ;; if (!strncmp(cmd, "nav", 3)) 
4229   21BC             _if63_cond:
4230   21BC 26 03 00      mov b, $3
4231   21BF FD AB         swp b
4232   21C1 D8            push b
4233   21C2 26 20 65      mov b, _s41 ; "nav"
4234   21C5 FD AB         swp b
4235   21C7 D8            push b
4236   21C8 FA FD FF      lea d, [bp + -3] ; $cmd
4237   21CB 2D            mov b, d
4238   21CC FD AB         swp b
4239   21CE D8            push b
4240   21CF 07 D0 04      call strncmp
4241   21D2 51 06 00      add sp, 6
4242   21D5 C0 00 00      cmp b, 0
4243   21D8 FD 71         seq ; !
4244   21DA C0 00 00      cmp b, 0
4245   21DD C6 E6 21      je _if63_else
4246   21E0             _if63_true:
4247   21E0             ;; course_control(); 
4248   21E0 07 DD 2B      call course_control
4249   21E3 0A AE 23      jmp _if63_exit
4250   21E6             _if63_else:
4251   21E6             ;; if (!strncmp(cmd, "srs", 3)) 
4252   21E6             _if64_cond:
4253   21E6 26 03 00      mov b, $3
4254   21E9 FD AB         swp b
4255   21EB D8            push b
4256   21EC 26 24 65      mov b, _s42 ; "srs"
4257   21EF FD AB         swp b
4258   21F1 D8            push b
4259   21F2 FA FD FF      lea d, [bp + -3] ; $cmd
4260   21F5 2D            mov b, d
4261   21F6 FD AB         swp b
4262   21F8 D8            push b
4263   21F9 07 D0 04      call strncmp
4264   21FC 51 06 00      add sp, 6
4265   21FF C0 00 00      cmp b, 0
4266   2202 FD 71         seq ; !
4267   2204 C0 00 00      cmp b, 0
4268   2207 C6 10 22      je _if64_else
4269   220A             _if64_true:
4270   220A             ;; short_range_scan(); 
4271   220A 07 06 35      call short_range_scan
4272   220D 0A AE 23      jmp _if64_exit
4273   2210             _if64_else:
4274   2210             ;; if (!strncmp(cmd, "lrs", 3)) 
4275   2210             _if65_cond:
4276   2210 26 03 00      mov b, $3
4277   2213 FD AB         swp b
4278   2215 D8            push b
4279   2216 26 28 65      mov b, _s43 ; "lrs"
4280   2219 FD AB         swp b
4281   221B D8            push b
4282   221C FA FD FF      lea d, [bp + -3] ; $cmd
4283   221F 2D            mov b, d
4284   2220 FD AB         swp b
4285   2222 D8            push b
4286   2223 07 D0 04      call strncmp
4287   2226 51 06 00      add sp, 6
4288   2229 C0 00 00      cmp b, 0
4289   222C FD 71         seq ; !
4290   222E C0 00 00      cmp b, 0
4291   2231 C6 3A 22      je _if65_else
4292   2234             _if65_true:
4293   2234             ;; long_range_scan(); 
4294   2234 07 88 39      call long_range_scan
4295   2237 0A AE 23      jmp _if65_exit
4296   223A             _if65_else:
4297   223A             ;; if (!strncmp(cmd, "pha", 3)) 
4298   223A             _if66_cond:
4299   223A 26 03 00      mov b, $3
4300   223D FD AB         swp b
4301   223F D8            push b
4302   2240 26 2C 65      mov b, _s44 ; "pha"
4303   2243 FD AB         swp b
4304   2245 D8            push b
4305   2246 FA FD FF      lea d, [bp + -3] ; $cmd
4306   2249 2D            mov b, d
4307   224A FD AB         swp b
4308   224C D8            push b
4309   224D 07 D0 04      call strncmp
4310   2250 51 06 00      add sp, 6
4311   2253 C0 00 00      cmp b, 0
4312   2256 FD 71         seq ; !
4313   2258 C0 00 00      cmp b, 0
4314   225B C6 64 22      je _if66_else
4315   225E             _if66_true:
4316   225E             ;; phaser_control(); 
4317   225E 07 A6 3B      call phaser_control
4318   2261 0A AE 23      jmp _if66_exit
4319   2264             _if66_else:
4320   2264             ;; if (!strncmp(cmd, "tor", 3)) 
4321   2264             _if67_cond:
4322   2264 26 03 00      mov b, $3
4323   2267 FD AB         swp b
4324   2269 D8            push b
4325   226A 26 30 65      mov b, _s45 ; "tor"
4326   226D FD AB         swp b
4327   226F D8            push b
4328   2270 FA FD FF      lea d, [bp + -3] ; $cmd
4329   2273 2D            mov b, d
4330   2274 FD AB         swp b
4331   2276 D8            push b
4332   2277 07 D0 04      call strncmp
4333   227A 51 06 00      add sp, 6
4334   227D C0 00 00      cmp b, 0
4335   2280 FD 71         seq ; !
4336   2282 C0 00 00      cmp b, 0
4337   2285 C6 8E 22      je _if67_else
4338   2288             _if67_true:
4339   2288             ;; photon_torpedoes(); 
4340   2288 07 64 40      call photon_torpedoes
4341   228B 0A AE 23      jmp _if67_exit
4342   228E             _if67_else:
4343   228E             ;; if (!strncmp(cmd, "shi", 3)) 
4344   228E             _if68_cond:
4345   228E 26 03 00      mov b, $3
4346   2291 FD AB         swp b
4347   2293 D8            push b
4348   2294 26 34 65      mov b, _s46 ; "shi"
4349   2297 FD AB         swp b
4350   2299 D8            push b
4351   229A FA FD FF      lea d, [bp + -3] ; $cmd
4352   229D 2D            mov b, d
4353   229E FD AB         swp b
4354   22A0 D8            push b
4355   22A1 07 D0 04      call strncmp
4356   22A4 51 06 00      add sp, 6
4357   22A7 C0 00 00      cmp b, 0
4358   22AA FD 71         seq ; !
4359   22AC C0 00 00      cmp b, 0
4360   22AF C6 B8 22      je _if68_else
4361   22B2             _if68_true:
4362   22B2             ;; shield_control(); 
4363   22B2 07 CF 48      call shield_control
4364   22B5 0A AE 23      jmp _if68_exit
4365   22B8             _if68_else:
4366   22B8             ;; if (!strncmp(cmd, "dam", 3)) 
4367   22B8             _if69_cond:
4368   22B8 26 03 00      mov b, $3
4369   22BB FD AB         swp b
4370   22BD D8            push b
4371   22BE 26 38 65      mov b, _s47 ; "dam"
4372   22C1 FD AB         swp b
4373   22C3 D8            push b
4374   22C4 FA FD FF      lea d, [bp + -3] ; $cmd
4375   22C7 2D            mov b, d
4376   22C8 FD AB         swp b
4377   22CA D8            push b
4378   22CB 07 D0 04      call strncmp
4379   22CE 51 06 00      add sp, 6
4380   22D1 C0 00 00      cmp b, 0
4381   22D4 FD 71         seq ; !
4382   22D6 C0 00 00      cmp b, 0
4383   22D9 C6 E2 22      je _if69_else
4384   22DC             _if69_true:
4385   22DC             ;; damage_control(); 
4386   22DC 07 84 46      call damage_control
4387   22DF 0A AE 23      jmp _if69_exit
4388   22E2             _if69_else:
4389   22E2             ;; if (!strncmp(cmd, "com", 3)) 
4390   22E2             _if70_cond:
4391   22E2 26 03 00      mov b, $3
4392   22E5 FD AB         swp b
4393   22E7 D8            push b
4394   22E8 26 3C 65      mov b, _s48 ; "com"
4395   22EB FD AB         swp b
4396   22ED D8            push b
4397   22EE FA FD FF      lea d, [bp + -3] ; $cmd
4398   22F1 2D            mov b, d
4399   22F2 FD AB         swp b
4400   22F4 D8            push b
4401   22F5 07 D0 04      call strncmp
4402   22F8 51 06 00      add sp, 6
4403   22FB C0 00 00      cmp b, 0
4404   22FE FD 71         seq ; !
4405   2300 C0 00 00      cmp b, 0
4406   2303 C6 0C 23      je _if70_else
4407   2306             _if70_true:
4408   2306             ;; library_computer(); 
4409   2306 07 AB 49      call library_computer
4410   2309 0A AE 23      jmp _if70_exit
4411   230C             _if70_else:
4412   230C             ;; if (!strncmp(cmd, "xxx", 3)) 
4413   230C             _if71_cond:
4414   230C 26 03 00      mov b, $3
4415   230F FD AB         swp b
4416   2311 D8            push b
4417   2312 26 40 65      mov b, _s49 ; "xxx"
4418   2315 FD AB         swp b
4419   2317 D8            push b
4420   2318 FA FD FF      lea d, [bp + -3] ; $cmd
4421   231B 2D            mov b, d
4422   231C FD AB         swp b
4423   231E D8            push b
4424   231F 07 D0 04      call strncmp
4425   2322 51 06 00      add sp, 6
4426   2325 C0 00 00      cmp b, 0
4427   2328 FD 71         seq ; !
4428   232A C0 00 00      cmp b, 0
4429   232D C6 36 23      je _if71_else
4430   2330             _if71_true:
4431   2330             ;; resign_commision(); 
4432   2330 07 0E 55      call resign_commision
4433   2333 0A AE 23      jmp _if71_exit
4434   2336             _if71_else:
4435   2336             ;; puts("Enter one of the following:\n"); 
4436   2336 26 44 65      mov b, _s50 ; "Enter one of the following:\n"
4437   2339 FD AB         swp b
4438   233B D8            push b
4439   233C 07 36 13      call puts
4440   233F 51 02 00      add sp, 2
4441   2342             ;; puts("  nav - To Set Course"); 
4442   2342 26 61 65      mov b, _s51 ; "  nav - To Set Course"
4443   2345 FD AB         swp b
4444   2347 D8            push b
4445   2348 07 36 13      call puts
4446   234B 51 02 00      add sp, 2
4447   234E             ;; puts("  srs - Short Range Sensors"); 
4448   234E 26 77 65      mov b, _s52 ; "  srs - Short Range Sensors"
4449   2351 FD AB         swp b
4450   2353 D8            push b
4451   2354 07 36 13      call puts
4452   2357 51 02 00      add sp, 2
4453   235A             ;; puts("  lrs - Long Range Sensors"); 
4454   235A 26 93 65      mov b, _s53 ; "  lrs - Long Range Sensors"
4455   235D FD AB         swp b
4456   235F D8            push b
4457   2360 07 36 13      call puts
4458   2363 51 02 00      add sp, 2
4459   2366             ;; puts("  pha - Phasers"); 
4460   2366 26 AE 65      mov b, _s54 ; "  pha - Phasers"
4461   2369 FD AB         swp b
4462   236B D8            push b
4463   236C 07 36 13      call puts
4464   236F 51 02 00      add sp, 2
4465   2372             ;; puts("  tor - Photon Torpedoes"); 
4466   2372 26 BE 65      mov b, _s55 ; "  tor - Photon Torpedoes"
4467   2375 FD AB         swp b
4468   2377 D8            push b
4469   2378 07 36 13      call puts
4470   237B 51 02 00      add sp, 2
4471   237E             ;; puts("  shi - Shield Control"); 
4472   237E 26 D7 65      mov b, _s56 ; "  shi - Shield Control"
4473   2381 FD AB         swp b
4474   2383 D8            push b
4475   2384 07 36 13      call puts
4476   2387 51 02 00      add sp, 2
4477   238A             ;; puts("  dam - Damage Control"); 
4478   238A 26 EE 65      mov b, _s57 ; "  dam - Damage Control"
4479   238D FD AB         swp b
4480   238F D8            push b
4481   2390 07 36 13      call puts
4482   2393 51 02 00      add sp, 2
4483   2396             ;; puts("  com - Library Computer"); 
4484   2396 26 05 66      mov b, _s58 ; "  com - Library Computer"
4485   2399 FD AB         swp b
4486   239B D8            push b
4487   239C 07 36 13      call puts
4488   239F 51 02 00      add sp, 2
4489   23A2             ;; puts("  xxx - Resign Command\n"); 
4490   23A2 26 1E 66      mov b, _s59 ; "  xxx - Resign Command\n"
4491   23A5 FD AB         swp b
4492   23A7 D8            push b
4493   23A8 07 36 13      call puts
4494   23AB 51 02 00      add sp, 2
4495   23AE             _if71_exit:
4496   23AE             _if70_exit:
4497   23AE             _if69_exit:
4498   23AE             _if68_exit:
4499   23AE             _if67_exit:
4500   23AE             _if66_exit:
4501   23AE             _if65_exit:
4502   23AE             _if64_exit:
4503   23AE             _if63_exit:
4504   23AE 0A 30 21      jmp _while61_cond
4505   23B1             _while61_exit:
4506   23B1 F9            leave
4507   23B2 09            ret
4508   23B3             
4509   23B3             initialize:
4510   23B3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
4511   23B6             ; $i 
4512   23B6             ; $j 
4513   23B6             ; $yp 
4514   23B6             ; $xp 
4515   23B6             ; $r 
4516   23B6 52 07 00      sub sp, 7
4517   23B9             ;; time_start = FROM_FIXED(stardate); 
4518   23B9 3B 59 61      mov d, _time_start ; $time_start
4519   23BC DA            push d
4520   23BD 3B 75 61      mov d, _stardate ; $stardate
4521   23C0 2A            mov b, [d]
4522   23C1 FD AB         swp b
4523   23C3 D8            push b
4524   23C4 07 ED 1C      call FROM_FIXED
4525   23C7 51 02 00      add sp, 2
4526   23CA E7            pop d
4527   23CB FD 43         mov [d], b
4528   23CD             ;; time_up = 25 + get_rand(10); 
4529   23CD 3B 5B 61      mov d, _time_up ; $time_up
4530   23D0 DA            push d
4531   23D1 26 19 00      mov b, $19
4532   23D4             ; START TERMS
4533   23D4 D7            push a
4534   23D5 11            mov a, b
4535   23D6 26 0A 00      mov b, $a
4536   23D9 FD AB         swp b
4537   23DB D8            push b
4538   23DC 07 21 1D      call get_rand
4539   23DF 51 02 00      add sp, 2
4540   23E2 56            add b, a
4541   23E3 E4            pop a
4542   23E4             ; END TERMS
4543   23E4 E7            pop d
4544   23E5 FD 43         mov [d], b
4545   23E7             ;; docked = 0; 
4546   23E7 3B 9A 60      mov d, _docked ; $docked
4547   23EA DA            push d
4548   23EB 26 00 00      mov b, $0
4549   23EE E7            pop d
4550   23EF FD 3E         mov [d], bl
4551   23F1             ;; energy = energy0; 
4552   23F1 3B 9B 60      mov d, _energy ; $energy
4553   23F4 DA            push d
4554   23F5 3B 9D 60      mov d, _energy0 ; $energy0
4555   23F8 2A            mov b, [d]
4556   23F9 E7            pop d
4557   23FA FD 43         mov [d], b
4558   23FC             ;; torps = torps0; 
4559   23FC 3B 50 61      mov d, _torps ; $torps
4560   23FF DA            push d
4561   2400 3B 51 61      mov d, _torps0 ; $torps0
4562   2403 32            mov bl, [d]
4563   2404 A7 00         mov bh, 0
4564   2406 E7            pop d
4565   2407 FD 3E         mov [d], bl
4566   2409             ;; shield = 0; 
4567   2409 3B 56 61      mov d, _shield ; $shield
4568   240C DA            push d
4569   240D 26 00 00      mov b, $0
4570   2410 E7            pop d
4571   2411 FD 43         mov [d], b
4572   2413             ;; quad_y = rand8(); 
4573   2413 3B 52 61      mov d, _quad_y ; $quad_y
4574   2416 DA            push d
4575   2417 07 70 1D      call rand8
4576   241A E7            pop d
4577   241B FD 43         mov [d], b
4578   241D             ;; quad_x = rand8(); 
4579   241D 3B 54 61      mov d, _quad_x ; $quad_x
4580   2420 DA            push d
4581   2421 07 70 1D      call rand8
4582   2424 E7            pop d
4583   2425 FD 43         mov [d], b
4584   2427             ;; ship_y = TO_FIXED00(rand8()); 
4585   2427 3B 71 61      mov d, _ship_y ; $ship_y
4586   242A DA            push d
4587   242B 07 70 1D      call rand8
4588   242E FD AB         swp b
4589   2430 D8            push b
4590   2431 07 FE 1C      call TO_FIXED00
4591   2434 51 02 00      add sp, 2
4592   2437 E7            pop d
4593   2438 FD 43         mov [d], b
4594   243A             ;; ship_x = TO_FIXED00(rand8()); 
4595   243A 3B 73 61      mov d, _ship_x ; $ship_x
4596   243D DA            push d
4597   243E 07 70 1D      call rand8
4598   2441 FD AB         swp b
4599   2443 D8            push b
4600   2444 07 FE 1C      call TO_FIXED00
4601   2447 51 02 00      add sp, 2
4602   244A E7            pop d
4603   244B FD 43         mov [d], b
4604   244D             ;; for (i = 1; i <= 8; i++) 
4605   244D             _for72_init:
4606   244D FA FF FF      lea d, [bp + -1] ; $i
4607   2450 DA            push d
4608   2451 26 01 00      mov b, $1
4609   2454 E7            pop d
4610   2455 FD 43         mov [d], b
4611   2457             _for72_cond:
4612   2457 FA FF FF      lea d, [bp + -1] ; $i
4613   245A 2A            mov b, [d]
4614   245B             ; START RELATIONAL
4615   245B D7            push a
4616   245C 11            mov a, b
4617   245D 26 08 00      mov b, $8
4618   2460 B0            cmp a, b
4619   2461 FD 73         slt ; <= (signed)
4620   2463 E4            pop a
4621   2464             ; END RELATIONAL
4622   2464 C0 00 00      cmp b, 0
4623   2467 C6 90 24      je _for72_exit
4624   246A             _for72_block:
4625   246A             ;; damage[i] = 0; 
4626   246A 3B 5D 61      mov d, _damage_data ; $damage
4627   246D D7            push a
4628   246E DA            push d
4629   246F FA FF FF      lea d, [bp + -1] ; $i
4630   2472 2A            mov b, [d]
4631   2473 E7            pop d
4632   2474 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4633   2478 E4            pop a
4634   2479 DA            push d
4635   247A 26 00 00      mov b, $0
4636   247D E7            pop d
4637   247E FD 43         mov [d], b
4638   2480             _for72_update:
4639   2480 FA FF FF      lea d, [bp + -1] ; $i
4640   2483 2A            mov b, [d]
4641   2484 D8            push b
4642   2485 FD 77         inc b
4643   2487 FA FF FF      lea d, [bp + -1] ; $i
4644   248A FD 43         mov [d], b
4645   248C E5            pop b
4646   248D 0A 57 24      jmp _for72_cond
4647   2490             _for72_exit:
4648   2490             ;; for (i = 1; i <= 8; i++) { 
4649   2490             _for73_init:
4650   2490 FA FF FF      lea d, [bp + -1] ; $i
4651   2493 DA            push d
4652   2494 26 01 00      mov b, $1
4653   2497 E7            pop d
4654   2498 FD 43         mov [d], b
4655   249A             _for73_cond:
4656   249A FA FF FF      lea d, [bp + -1] ; $i
4657   249D 2A            mov b, [d]
4658   249E             ; START RELATIONAL
4659   249E D7            push a
4660   249F 11            mov a, b
4661   24A0 26 08 00      mov b, $8
4662   24A3 B0            cmp a, b
4663   24A4 FD 73         slt ; <= (signed)
4664   24A6 E4            pop a
4665   24A7             ; END RELATIONAL
4666   24A7 C0 00 00      cmp b, 0
4667   24AA C6 13 26      je _for73_exit
4668   24AD             _for73_block:
4669   24AD             ;; for (j = 1; j <= 8; j++) { 
4670   24AD             _for74_init:
4671   24AD FA FD FF      lea d, [bp + -3] ; $j
4672   24B0 DA            push d
4673   24B1 26 01 00      mov b, $1
4674   24B4 E7            pop d
4675   24B5 FD 43         mov [d], b
4676   24B7             _for74_cond:
4677   24B7 FA FD FF      lea d, [bp + -3] ; $j
4678   24BA 2A            mov b, [d]
4679   24BB             ; START RELATIONAL
4680   24BB D7            push a
4681   24BC 11            mov a, b
4682   24BD 26 08 00      mov b, $8
4683   24C0 B0            cmp a, b
4684   24C1 FD 73         slt ; <= (signed)
4685   24C3 E4            pop a
4686   24C4             ; END RELATIONAL
4687   24C4 C0 00 00      cmp b, 0
4688   24C7 C6 03 26      je _for74_exit
4689   24CA             _for74_block:
4690   24CA             ;; r = get_rand(100); 
4691   24CA FA FA FF      lea d, [bp + -6] ; $r
4692   24CD DA            push d
4693   24CE 26 64 00      mov b, $64
4694   24D1 FD AB         swp b
4695   24D3 D8            push b
4696   24D4 07 21 1D      call get_rand
4697   24D7 51 02 00      add sp, 2
4698   24DA E7            pop d
4699   24DB FD 3E         mov [d], bl
4700   24DD             ;; klingons = 0; 
4701   24DD 3B 4D 61      mov d, _klingons ; $klingons
4702   24E0 DA            push d
4703   24E1 26 00 00      mov b, $0
4704   24E4 E7            pop d
4705   24E5 FD 3E         mov [d], bl
4706   24E7             ;; if (r > 98) 
4707   24E7             _if75_cond:
4708   24E7 FA FA FF      lea d, [bp + -6] ; $r
4709   24EA 32            mov bl, [d]
4710   24EB A7 00         mov bh, 0
4711   24ED             ; START RELATIONAL
4712   24ED D7            push a
4713   24EE 11            mov a, b
4714   24EF 26 62 00      mov b, $62
4715   24F2 B0            cmp a, b
4716   24F3 FD 81         sgu ; > (unsigned)
4717   24F5 E4            pop a
4718   24F6             ; END RELATIONAL
4719   24F6 C0 00 00      cmp b, 0
4720   24F9 C6 09 25      je _if75_else
4721   24FC             _if75_true:
4722   24FC             ;; klingons = 3; 
4723   24FC 3B 4D 61      mov d, _klingons ; $klingons
4724   24FF DA            push d
4725   2500 26 03 00      mov b, $3
4726   2503 E7            pop d
4727   2504 FD 3E         mov [d], bl
4728   2506 0A 4D 25      jmp _if75_exit
4729   2509             _if75_else:
4730   2509             ;; if (r > 95) 
4731   2509             _if76_cond:
4732   2509 FA FA FF      lea d, [bp + -6] ; $r
4733   250C 32            mov bl, [d]
4734   250D A7 00         mov bh, 0
4735   250F             ; START RELATIONAL
4736   250F D7            push a
4737   2510 11            mov a, b
4738   2511 26 5F 00      mov b, $5f
4739   2514 B0            cmp a, b
4740   2515 FD 81         sgu ; > (unsigned)
4741   2517 E4            pop a
4742   2518             ; END RELATIONAL
4743   2518 C0 00 00      cmp b, 0
4744   251B C6 2B 25      je _if76_else
4745   251E             _if76_true:
4746   251E             ;; klingons = 2; 
4747   251E 3B 4D 61      mov d, _klingons ; $klingons
4748   2521 DA            push d
4749   2522 26 02 00      mov b, $2
4750   2525 E7            pop d
4751   2526 FD 3E         mov [d], bl
4752   2528 0A 4D 25      jmp _if76_exit
4753   252B             _if76_else:
4754   252B             ;; if (r > 80) 
4755   252B             _if77_cond:
4756   252B FA FA FF      lea d, [bp + -6] ; $r
4757   252E 32            mov bl, [d]
4758   252F A7 00         mov bh, 0
4759   2531             ; START RELATIONAL
4760   2531 D7            push a
4761   2532 11            mov a, b
4762   2533 26 50 00      mov b, $50
4763   2536 B0            cmp a, b
4764   2537 FD 81         sgu ; > (unsigned)
4765   2539 E4            pop a
4766   253A             ; END RELATIONAL
4767   253A C0 00 00      cmp b, 0
4768   253D C6 4D 25      je _if77_exit
4769   2540             _if77_true:
4770   2540             ;; klingons = 1; 
4771   2540 3B 4D 61      mov d, _klingons ; $klingons
4772   2543 DA            push d
4773   2544 26 01 00      mov b, $1
4774   2547 E7            pop d
4775   2548 FD 3E         mov [d], bl
4776   254A 0A 4D 25      jmp _if77_exit
4777   254D             _if77_exit:
4778   254D             _if76_exit:
4779   254D             _if75_exit:
4780   254D             ;; klingons_left = klingons_left + klingons; 
4781   254D 3B 4F 61      mov d, _klingons_left ; $klingons_left
4782   2550 DA            push d
4783   2551 3B 4F 61      mov d, _klingons_left ; $klingons_left
4784   2554 32            mov bl, [d]
4785   2555 A7 00         mov bh, 0
4786   2557             ; START TERMS
4787   2557 D7            push a
4788   2558 11            mov a, b
4789   2559 3B 4D 61      mov d, _klingons ; $klingons
4790   255C 32            mov bl, [d]
4791   255D A7 00         mov bh, 0
4792   255F 56            add b, a
4793   2560 E4            pop a
4794   2561             ; END TERMS
4795   2561 E7            pop d
4796   2562 FD 3E         mov [d], bl
4797   2564             ;; starbases = 0; 
4798   2564 3B 77 60      mov d, _starbases ; $starbases
4799   2567 DA            push d
4800   2568 26 00 00      mov b, $0
4801   256B E7            pop d
4802   256C FD 3E         mov [d], bl
4803   256E             ;; if (get_rand(100) > 96) 
4804   256E             _if78_cond:
4805   256E 26 64 00      mov b, $64
4806   2571 FD AB         swp b
4807   2573 D8            push b
4808   2574 07 21 1D      call get_rand
4809   2577 51 02 00      add sp, 2
4810   257A             ; START RELATIONAL
4811   257A D7            push a
4812   257B 11            mov a, b
4813   257C 26 60 00      mov b, $60
4814   257F B0            cmp a, b
4815   2580 FD 7F         sgt ; >
4816   2582 E4            pop a
4817   2583             ; END RELATIONAL
4818   2583 C0 00 00      cmp b, 0
4819   2586 C6 96 25      je _if78_exit
4820   2589             _if78_true:
4821   2589             ;; starbases = 1; 
4822   2589 3B 77 60      mov d, _starbases ; $starbases
4823   258C DA            push d
4824   258D 26 01 00      mov b, $1
4825   2590 E7            pop d
4826   2591 FD 3E         mov [d], bl
4827   2593 0A 96 25      jmp _if78_exit
4828   2596             _if78_exit:
4829   2596             ;; starbases_left = starbases_left + starbases; 
4830   2596 3B 7A 60      mov d, _starbases_left ; $starbases_left
4831   2599 DA            push d
4832   259A 3B 7A 60      mov d, _starbases_left ; $starbases_left
4833   259D 32            mov bl, [d]
4834   259E A7 00         mov bh, 0
4835   25A0             ; START TERMS
4836   25A0 D7            push a
4837   25A1 11            mov a, b
4838   25A2 3B 77 60      mov d, _starbases ; $starbases
4839   25A5 32            mov bl, [d]
4840   25A6 A7 00         mov bh, 0
4841   25A8 56            add b, a
4842   25A9 E4            pop a
4843   25AA             ; END TERMS
4844   25AA E7            pop d
4845   25AB FD 3E         mov [d], bl
4846   25AD             ;; map[i][j] = (klingons << 8) + (starbases << 4) + rand8(); 
4847   25AD 3B 9F 60      mov d, _map_data ; $map
4848   25B0 D7            push a
4849   25B1 DA            push d
4850   25B2 FA FF FF      lea d, [bp + -1] ; $i
4851   25B5 2A            mov b, [d]
4852   25B6 E7            pop d
4853   25B7 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
4854   25BB DA            push d
4855   25BC FA FD FF      lea d, [bp + -3] ; $j
4856   25BF 2A            mov b, [d]
4857   25C0 E7            pop d
4858   25C1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4859   25C5 E4            pop a
4860   25C6 DA            push d
4861   25C7 3B 4D 61      mov d, _klingons ; $klingons
4862   25CA 32            mov bl, [d]
4863   25CB A7 00         mov bh, 0
4864   25CD             ; START SHIFT
4865   25CD D7            push a
4866   25CE 11            mov a, b
4867   25CF 26 08 00      mov b, $8
4868   25D2 FD 39         mov c, b
4869   25D4 9D            shl a, cl
4870   25D5 27            mov b, a
4871   25D6 E4            pop a
4872   25D7             ; END SHIFT
4873   25D7             ; START TERMS
4874   25D7 D7            push a
4875   25D8 11            mov a, b
4876   25D9 3B 77 60      mov d, _starbases ; $starbases
4877   25DC 32            mov bl, [d]
4878   25DD A7 00         mov bh, 0
4879   25DF             ; START SHIFT
4880   25DF D7            push a
4881   25E0 11            mov a, b
4882   25E1 26 04 00      mov b, $4
4883   25E4 FD 39         mov c, b
4884   25E6 9D            shl a, cl
4885   25E7 27            mov b, a
4886   25E8 E4            pop a
4887   25E9             ; END SHIFT
4888   25E9 56            add b, a
4889   25EA 11            mov a, b
4890   25EB 07 70 1D      call rand8
4891   25EE 56            add b, a
4892   25EF E4            pop a
4893   25F0             ; END TERMS
4894   25F0 E7            pop d
4895   25F1 FD 43         mov [d], b
4896   25F3             _for74_update:
4897   25F3 FA FD FF      lea d, [bp + -3] ; $j
4898   25F6 2A            mov b, [d]
4899   25F7 D8            push b
4900   25F8 FD 77         inc b
4901   25FA FA FD FF      lea d, [bp + -3] ; $j
4902   25FD FD 43         mov [d], b
4903   25FF E5            pop b
4904   2600 0A B7 24      jmp _for74_cond
4905   2603             _for74_exit:
4906   2603             _for73_update:
4907   2603 FA FF FF      lea d, [bp + -1] ; $i
4908   2606 2A            mov b, [d]
4909   2607 D8            push b
4910   2608 FD 77         inc b
4911   260A FA FF FF      lea d, [bp + -1] ; $i
4912   260D FD 43         mov [d], b
4913   260F E5            pop b
4914   2610 0A 9A 24      jmp _for73_cond
4915   2613             _for73_exit:
4916   2613             ;; if (klingons_left > time_up) 
4917   2613             _if79_cond:
4918   2613 3B 4F 61      mov d, _klingons_left ; $klingons_left
4919   2616 32            mov bl, [d]
4920   2617 A7 00         mov bh, 0
4921   2619             ; START RELATIONAL
4922   2619 D7            push a
4923   261A 11            mov a, b
4924   261B 3B 5B 61      mov d, _time_up ; $time_up
4925   261E 2A            mov b, [d]
4926   261F B0            cmp a, b
4927   2620 FD 81         sgu ; > (unsigned)
4928   2622 E4            pop a
4929   2623             ; END RELATIONAL
4930   2623 C0 00 00      cmp b, 0
4931   2626 C6 40 26      je _if79_exit
4932   2629             _if79_true:
4933   2629             ;; time_up = klingons_left + 1; 
4934   2629 3B 5B 61      mov d, _time_up ; $time_up
4935   262C DA            push d
4936   262D 3B 4F 61      mov d, _klingons_left ; $klingons_left
4937   2630 32            mov bl, [d]
4938   2631 A7 00         mov bh, 0
4939   2633             ; START TERMS
4940   2633 D7            push a
4941   2634 11            mov a, b
4942   2635 26 01 00      mov b, $1
4943   2638 56            add b, a
4944   2639 E4            pop a
4945   263A             ; END TERMS
4946   263A E7            pop d
4947   263B FD 43         mov [d], b
4948   263D 0A 40 26      jmp _if79_exit
4949   2640             _if79_exit:
4950   2640             ;; if (starbases_left == 0) { 
4951   2640             _if80_cond:
4952   2640 3B 7A 60      mov d, _starbases_left ; $starbases_left
4953   2643 32            mov bl, [d]
4954   2644 A7 00         mov bh, 0
4955   2646             ; START RELATIONAL
4956   2646 D7            push a
4957   2647 11            mov a, b
4958   2648 26 00 00      mov b, $0
4959   264B B0            cmp a, b
4960   264C FD 71         seq ; ==
4961   264E E4            pop a
4962   264F             ; END RELATIONAL
4963   264F C0 00 00      cmp b, 0
4964   2652 C6 5A 27      je _if80_exit
4965   2655             _if80_true:
4966   2655             ;; yp = rand8(); 
4967   2655 FA FC FF      lea d, [bp + -4] ; $yp
4968   2658 DA            push d
4969   2659 07 70 1D      call rand8
4970   265C E7            pop d
4971   265D FD 3E         mov [d], bl
4972   265F             ;; xp = rand8(); 
4973   265F FA FB FF      lea d, [bp + -5] ; $xp
4974   2662 DA            push d
4975   2663 07 70 1D      call rand8
4976   2666 E7            pop d
4977   2667 FD 3E         mov [d], bl
4978   2669             ;; if (map[yp][xp] < 0x200) { 
4979   2669             _if81_cond:
4980   2669 3B 9F 60      mov d, _map_data ; $map
4981   266C D7            push a
4982   266D DA            push d
4983   266E FA FC FF      lea d, [bp + -4] ; $yp
4984   2671 32            mov bl, [d]
4985   2672 A7 00         mov bh, 0
4986   2674 E7            pop d
4987   2675 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
4988   2679 DA            push d
4989   267A FA FB FF      lea d, [bp + -5] ; $xp
4990   267D 32            mov bl, [d]
4991   267E A7 00         mov bh, 0
4992   2680 E7            pop d
4993   2681 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
4994   2685 E4            pop a
4995   2686 2A            mov b, [d]
4996   2687             ; START RELATIONAL
4997   2687 D7            push a
4998   2688 11            mov a, b
4999   2689 26 00 02      mov b, $200
5000   268C B0            cmp a, b
5001   268D FD 75         slu ; < (unsigned)
5002   268F E4            pop a
5003   2690             ; END RELATIONAL
5004   2690 C0 00 00      cmp b, 0
5005   2693 C6 F8 26      je _if81_exit
5006   2696             _if81_true:
5007   2696             ;; map[yp][xp] = map[yp][xp] + (1 << 8); 
5008   2696 3B 9F 60      mov d, _map_data ; $map
5009   2699 D7            push a
5010   269A DA            push d
5011   269B FA FC FF      lea d, [bp + -4] ; $yp
5012   269E 32            mov bl, [d]
5013   269F A7 00         mov bh, 0
5014   26A1 E7            pop d
5015   26A2 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5016   26A6 DA            push d
5017   26A7 FA FB FF      lea d, [bp + -5] ; $xp
5018   26AA 32            mov bl, [d]
5019   26AB A7 00         mov bh, 0
5020   26AD E7            pop d
5021   26AE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5022   26B2 E4            pop a
5023   26B3 DA            push d
5024   26B4 3B 9F 60      mov d, _map_data ; $map
5025   26B7 D7            push a
5026   26B8 DA            push d
5027   26B9 FA FC FF      lea d, [bp + -4] ; $yp
5028   26BC 32            mov bl, [d]
5029   26BD A7 00         mov bh, 0
5030   26BF E7            pop d
5031   26C0 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5032   26C4 DA            push d
5033   26C5 FA FB FF      lea d, [bp + -5] ; $xp
5034   26C8 32            mov bl, [d]
5035   26C9 A7 00         mov bh, 0
5036   26CB E7            pop d
5037   26CC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5038   26D0 E4            pop a
5039   26D1 2A            mov b, [d]
5040   26D2             ; START TERMS
5041   26D2 D7            push a
5042   26D3 11            mov a, b
5043   26D4 26 01 00      mov b, $1
5044   26D7             ; START SHIFT
5045   26D7 D7            push a
5046   26D8 11            mov a, b
5047   26D9 26 08 00      mov b, $8
5048   26DC FD 39         mov c, b
5049   26DE 9D            shl a, cl
5050   26DF 27            mov b, a
5051   26E0 E4            pop a
5052   26E1             ; END SHIFT
5053   26E1 56            add b, a
5054   26E2 E4            pop a
5055   26E3             ; END TERMS
5056   26E3 E7            pop d
5057   26E4 FD 43         mov [d], b
5058   26E6             ;; klingons_left++; 
5059   26E6 3B 4F 61      mov d, _klingons_left ; $klingons_left
5060   26E9 32            mov bl, [d]
5061   26EA A7 00         mov bh, 0
5062   26EC D8            push b
5063   26ED FD 77         inc b
5064   26EF 3B 4F 61      mov d, _klingons_left ; $klingons_left
5065   26F2 FD 43         mov [d], b
5066   26F4 E5            pop b
5067   26F5 0A F8 26      jmp _if81_exit
5068   26F8             _if81_exit:
5069   26F8             ;; map[yp][xp] = map[yp][xp] + (1 << 4); 
5070   26F8 3B 9F 60      mov d, _map_data ; $map
5071   26FB D7            push a
5072   26FC DA            push d
5073   26FD FA FC FF      lea d, [bp + -4] ; $yp
5074   2700 32            mov bl, [d]
5075   2701 A7 00         mov bh, 0
5076   2703 E7            pop d
5077   2704 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5078   2708 DA            push d
5079   2709 FA FB FF      lea d, [bp + -5] ; $xp
5080   270C 32            mov bl, [d]
5081   270D A7 00         mov bh, 0
5082   270F E7            pop d
5083   2710 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5084   2714 E4            pop a
5085   2715 DA            push d
5086   2716 3B 9F 60      mov d, _map_data ; $map
5087   2719 D7            push a
5088   271A DA            push d
5089   271B FA FC FF      lea d, [bp + -4] ; $yp
5090   271E 32            mov bl, [d]
5091   271F A7 00         mov bh, 0
5092   2721 E7            pop d
5093   2722 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5094   2726 DA            push d
5095   2727 FA FB FF      lea d, [bp + -5] ; $xp
5096   272A 32            mov bl, [d]
5097   272B A7 00         mov bh, 0
5098   272D E7            pop d
5099   272E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5100   2732 E4            pop a
5101   2733 2A            mov b, [d]
5102   2734             ; START TERMS
5103   2734 D7            push a
5104   2735 11            mov a, b
5105   2736 26 01 00      mov b, $1
5106   2739             ; START SHIFT
5107   2739 D7            push a
5108   273A 11            mov a, b
5109   273B 26 04 00      mov b, $4
5110   273E FD 39         mov c, b
5111   2740 9D            shl a, cl
5112   2741 27            mov b, a
5113   2742 E4            pop a
5114   2743             ; END SHIFT
5115   2743 56            add b, a
5116   2744 E4            pop a
5117   2745             ; END TERMS
5118   2745 E7            pop d
5119   2746 FD 43         mov [d], b
5120   2748             ;; starbases_left++; 
5121   2748 3B 7A 60      mov d, _starbases_left ; $starbases_left
5122   274B 32            mov bl, [d]
5123   274C A7 00         mov bh, 0
5124   274E D8            push b
5125   274F FD 77         inc b
5126   2751 3B 7A 60      mov d, _starbases_left ; $starbases_left
5127   2754 FD 43         mov [d], b
5128   2756 E5            pop b
5129   2757 0A 5A 27      jmp _if80_exit
5130   275A             _if80_exit:
5131   275A             ;; total_klingons = klingons_left; 
5132   275A 3B 4E 61      mov d, _total_klingons ; $total_klingons
5133   275D DA            push d
5134   275E 3B 4F 61      mov d, _klingons_left ; $klingons_left
5135   2761 32            mov bl, [d]
5136   2762 A7 00         mov bh, 0
5137   2764 E7            pop d
5138   2765 FD 3E         mov [d], bl
5139   2767             ;; if (starbases_left != 1) { 
5140   2767             _if82_cond:
5141   2767 3B 7A 60      mov d, _starbases_left ; $starbases_left
5142   276A 32            mov bl, [d]
5143   276B A7 00         mov bh, 0
5144   276D             ; START RELATIONAL
5145   276D D7            push a
5146   276E 11            mov a, b
5147   276F 26 01 00      mov b, $1
5148   2772 B0            cmp a, b
5149   2773 FD 72         sneq ; !=
5150   2775 E4            pop a
5151   2776             ; END RELATIONAL
5152   2776 C0 00 00      cmp b, 0
5153   2779 C6 A5 27      je _if82_exit
5154   277C             _if82_true:
5155   277C             ;; strcpy(plural_2, "s"); 
5156   277C 26 36 66      mov b, _s60 ; "s"
5157   277F FD AB         swp b
5158   2781 D8            push b
5159   2782 3B 6E 62      mov d, _plural_2_data ; $plural_2
5160   2785 2D            mov b, d
5161   2786 FD AB         swp b
5162   2788 D8            push b
5163   2789 07 14 04      call strcpy
5164   278C 51 04 00      add sp, 4
5165   278F             ;; strcpy(plural, "are"); 
5166   278F 26 C3 64      mov b, _s33 ; "are"
5167   2792 FD AB         swp b
5168   2794 D8            push b
5169   2795 3B 70 62      mov d, _plural_data ; $plural
5170   2798 2D            mov b, d
5171   2799 FD AB         swp b
5172   279B D8            push b
5173   279C 07 14 04      call strcpy
5174   279F 51 04 00      add sp, 4
5175   27A2 0A A5 27      jmp _if82_exit
5176   27A5             _if82_exit:
5177   27A5             ;; printf("Your orders are as follows:\nDestroy the %d Klingon warships which have",klingons_left); 
5178   27A5 3B 4F 61      mov d, _klingons_left ; $klingons_left
5179   27A8 32            mov bl, [d]
5180   27A9 A7 00         mov bh, 0
5181   27AB DD            push bl
5182   27AC 26 38 66      mov b, _s61 ; "Your orders are as follows:\nDestroy the %d Klingon warships which have"
5183   27AF FD AB         swp b
5184   27B1 D8            push b
5185   27B2 07 D6 05      call printf
5186   27B5 51 03 00      add sp, 3
5187   27B8             ;; printf("invaded\n the galaxy before they can attack Federation Headquarters\n"); 
5188   27B8 26 7F 66      mov b, _s62 ; "invaded\n the galaxy before they can attack Federation Headquarters\n"
5189   27BB FD AB         swp b
5190   27BD D8            push b
5191   27BE 07 D6 05      call printf
5192   27C1 51 02 00      add sp, 2
5193   27C4             ;; printf(" on stardate %u. This gives you %d days. There %s\n %d starbase%s in the galaxy",  
5194   27C4 3B 6E 62      mov d, _plural_2_data ; $plural_2
5195   27C7 2D            mov b, d
5196   27C8 FD AB         swp b
5197   27CA D8            push b
5198   27CB 3B 7A 60      mov d, _starbases_left ; $starbases_left
5199   27CE 32            mov bl, [d]
5200   27CF A7 00         mov bh, 0
5201   27D1 DD            push bl
5202   27D2 3B 70 62      mov d, _plural_data ; $plural
5203   27D5 2D            mov b, d
5204   27D6 FD AB         swp b
5205   27D8 D8            push b
5206   27D9 3B 5B 61      mov d, _time_up ; $time_up
5207   27DC 2A            mov b, [d]
5208   27DD FD AB         swp b
5209   27DF D8            push b
5210   27E0 3B 59 61      mov d, _time_start ; $time_start
5211   27E3 2A            mov b, [d]
5212   27E4             ; START TERMS
5213   27E4 D7            push a
5214   27E5 11            mov a, b
5215   27E6 3B 5B 61      mov d, _time_up ; $time_up
5216   27E9 2A            mov b, [d]
5217   27EA 56            add b, a
5218   27EB E4            pop a
5219   27EC             ; END TERMS
5220   27EC FD AB         swp b
5221   27EE D8            push b
5222   27EF 26 C3 66      mov b, _s63 ; " on stardate %u. This gives you %d days. There %s\n %d starbase%s in the galaxy"
5223   27F2 FD AB         swp b
5224   27F4 D8            push b
5225   27F5 07 D6 05      call printf
5226   27F8 51 0B 00      add sp, 11
5227   27FB             ;; printf(" for resupplying your ship.\n\n Hit any key to accept command. "); 
5228   27FB 26 12 67      mov b, _s64 ; " for resupplying your ship.\n\n Hit any key to accept command. "
5229   27FE FD AB         swp b
5230   2800 D8            push b
5231   2801 07 D6 05      call printf
5232   2804 51 02 00      add sp, 2
5233   2807             ;; getchar(); 
5234   2807 07 0D 13      call getchar
5235   280A F9            leave
5236   280B 09            ret
5237   280C             
5238   280C             place_ship:
5239   280C F8 00 00      enter 0 ; (push bp; mov bp, sp)
5240   280F             ;; quad[FROM_FIXED00(ship_y) - 1][FROM_FIXED00(ship_x) - 1] =  		4     ; 
5241   280F 3B 77 61      mov d, _quad_data ; $quad
5242   2812 D7            push a
5243   2813 DA            push d
5244   2814 3B 71 61      mov d, _ship_y ; $ship_y
5245   2817 2A            mov b, [d]
5246   2818 FD AB         swp b
5247   281A D8            push b
5248   281B 07 10 1D      call FROM_FIXED00
5249   281E 51 02 00      add sp, 2
5250   2821             ; START TERMS
5251   2821 D7            push a
5252   2822 11            mov a, b
5253   2823 26 01 00      mov b, $1
5254   2826 60            sub a, b
5255   2827 27            mov b, a
5256   2828 E4            pop a
5257   2829             ; END TERMS
5258   2829 E7            pop d
5259   282A FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
5260   282E DA            push d
5261   282F 3B 73 61      mov d, _ship_x ; $ship_x
5262   2832 2A            mov b, [d]
5263   2833 FD AB         swp b
5264   2835 D8            push b
5265   2836 07 10 1D      call FROM_FIXED00
5266   2839 51 02 00      add sp, 2
5267   283C             ; START TERMS
5268   283C D7            push a
5269   283D 11            mov a, b
5270   283E 26 01 00      mov b, $1
5271   2841 60            sub a, b
5272   2842 27            mov b, a
5273   2843 E4            pop a
5274   2844             ; END TERMS
5275   2844 E7            pop d
5276   2845 5A            add d, b
5277   2846 E4            pop a
5278   2847 DA            push d
5279   2848 26 04 00      mov b, $4
5280   284B E7            pop d
5281   284C FD 3E         mov [d], bl
5282   284E F9            leave
5283   284F 09            ret
5284   2850             
5285   2850             new_quadrant:
5286   2850 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5287   2853             ; $i 
5288   2853             ; $tmp 
5289   2853             ; $k 
5290   2853 52 06 00      sub sp, 6
5291   2856             ;; k = &kdata; 
5292   2856 FA FB FF      lea d, [bp + -5] ; $k
5293   2859 DA            push d
5294   285A 3B 41 61      mov d, _kdata_data ; $kdata
5295   285D 2D            mov b, d
5296   285E E7            pop d
5297   285F FD 43         mov [d], b
5298   2861             ;; klingons = 0; 
5299   2861 3B 4D 61      mov d, _klingons ; $klingons
5300   2864 DA            push d
5301   2865 26 00 00      mov b, $0
5302   2868 E7            pop d
5303   2869 FD 3E         mov [d], bl
5304   286B             ;; starbases = 0; 
5305   286B 3B 77 60      mov d, _starbases ; $starbases
5306   286E DA            push d
5307   286F 26 00 00      mov b, $0
5308   2872 E7            pop d
5309   2873 FD 3E         mov [d], bl
5310   2875             ;; stars = 0; 
5311   2875 3B 58 61      mov d, _stars ; $stars
5312   2878 DA            push d
5313   2879 26 00 00      mov b, $0
5314   287C E7            pop d
5315   287D FD 3E         mov [d], bl
5316   287F             ;; d4 = get_rand(50) - 1; 
5317   287F 3B 6F 61      mov d, _d4 ; $d4
5318   2882 DA            push d
5319   2883 26 32 00      mov b, $32
5320   2886 FD AB         swp b
5321   2888 D8            push b
5322   2889 07 21 1D      call get_rand
5323   288C 51 02 00      add sp, 2
5324   288F             ; START TERMS
5325   288F D7            push a
5326   2890 11            mov a, b
5327   2891 26 01 00      mov b, $1
5328   2894 60            sub a, b
5329   2895 27            mov b, a
5330   2896 E4            pop a
5331   2897             ; END TERMS
5332   2897 E7            pop d
5333   2898 FD 43         mov [d], b
5334   289A             ;; map[quad_y][quad_x] = map[quad_y][quad_x] |   0x1000		/* Set if this sector was mapped */          ; 
5335   289A 3B 9F 60      mov d, _map_data ; $map
5336   289D D7            push a
5337   289E DA            push d
5338   289F 3B 52 61      mov d, _quad_y ; $quad_y
5339   28A2 2A            mov b, [d]
5340   28A3 E7            pop d
5341   28A4 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5342   28A8 DA            push d
5343   28A9 3B 54 61      mov d, _quad_x ; $quad_x
5344   28AC 2A            mov b, [d]
5345   28AD E7            pop d
5346   28AE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5347   28B2 E4            pop a
5348   28B3 DA            push d
5349   28B4 3B 9F 60      mov d, _map_data ; $map
5350   28B7 D7            push a
5351   28B8 DA            push d
5352   28B9 3B 52 61      mov d, _quad_y ; $quad_y
5353   28BC 2A            mov b, [d]
5354   28BD E7            pop d
5355   28BE FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5356   28C2 DA            push d
5357   28C3 3B 54 61      mov d, _quad_x ; $quad_x
5358   28C6 2A            mov b, [d]
5359   28C7 E7            pop d
5360   28C8 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5361   28CC E4            pop a
5362   28CD 2A            mov b, [d]
5363   28CE D7            push a
5364   28CF 11            mov a, b
5365   28D0 26 00 10      mov b, $1000
5366   28D3 FD 70         or b, a ; |
5367   28D5 E4            pop a
5368   28D6 E7            pop d
5369   28D7 FD 43         mov [d], b
5370   28D9             ;; if (quad_y >= 1 && quad_y <= 8 && quad_x >= 1 && quad_x <= 8) { 
5371   28D9             _if83_cond:
5372   28D9 3B 52 61      mov d, _quad_y ; $quad_y
5373   28DC 2A            mov b, [d]
5374   28DD             ; START RELATIONAL
5375   28DD D7            push a
5376   28DE 11            mov a, b
5377   28DF 26 01 00      mov b, $1
5378   28E2 B0            cmp a, b
5379   28E3 FD 80         sge ; >=
5380   28E5 E4            pop a
5381   28E6             ; END RELATIONAL
5382   28E6 D7            push a
5383   28E7 11            mov a, b
5384   28E8 3B 52 61      mov d, _quad_y ; $quad_y
5385   28EB 2A            mov b, [d]
5386   28EC             ; START RELATIONAL
5387   28EC D7            push a
5388   28ED 11            mov a, b
5389   28EE 26 08 00      mov b, $8
5390   28F1 B0            cmp a, b
5391   28F2 FD 73         slt ; <= (signed)
5392   28F4 E4            pop a
5393   28F5             ; END RELATIONAL
5394   28F5 FD A7         sand a, b
5395   28F7 11            mov a, b
5396   28F8 3B 54 61      mov d, _quad_x ; $quad_x
5397   28FB 2A            mov b, [d]
5398   28FC             ; START RELATIONAL
5399   28FC D7            push a
5400   28FD 11            mov a, b
5401   28FE 26 01 00      mov b, $1
5402   2901 B0            cmp a, b
5403   2902 FD 80         sge ; >=
5404   2904 E4            pop a
5405   2905             ; END RELATIONAL
5406   2905 FD A7         sand a, b
5407   2907 11            mov a, b
5408   2908 3B 54 61      mov d, _quad_x ; $quad_x
5409   290B 2A            mov b, [d]
5410   290C             ; START RELATIONAL
5411   290C D7            push a
5412   290D 11            mov a, b
5413   290E 26 08 00      mov b, $8
5414   2911 B0            cmp a, b
5415   2912 FD 73         slt ; <= (signed)
5416   2914 E4            pop a
5417   2915             ; END RELATIONAL
5418   2915 FD A7         sand a, b
5419   2917 E4            pop a
5420   2918 C0 00 00      cmp b, 0
5421   291B C6 87 29      je _if83_exit
5422   291E             _if83_true:
5423   291E             ;; quadrant_name(0, quad_y, quad_x); 
5424   291E 3B 54 61      mov d, _quad_x ; $quad_x
5425   2921 2A            mov b, [d]
5426   2922 DD            push bl
5427   2923 3B 52 61      mov d, _quad_y ; $quad_y
5428   2926 2A            mov b, [d]
5429   2927 DD            push bl
5430   2928 26 00 00      mov b, $0
5431   292B DD            push bl
5432   292C 07 67 5D      call quadrant_name
5433   292F 51 03 00      add sp, 3
5434   2932             ;; if (TO_FIXED(time_start) != stardate) 
5435   2932             _if84_cond:
5436   2932 3B 59 61      mov d, _time_start ; $time_start
5437   2935 2A            mov b, [d]
5438   2936 FD AB         swp b
5439   2938 D8            push b
5440   2939 07 DB 1C      call TO_FIXED
5441   293C 51 02 00      add sp, 2
5442   293F             ; START RELATIONAL
5443   293F D7            push a
5444   2940 11            mov a, b
5445   2941 3B 75 61      mov d, _stardate ; $stardate
5446   2944 2A            mov b, [d]
5447   2945 B0            cmp a, b
5448   2946 FD 72         sneq ; !=
5449   2948 E4            pop a
5450   2949             ; END RELATIONAL
5451   2949 C0 00 00      cmp b, 0
5452   294C C6 65 29      je _if84_else
5453   294F             _if84_true:
5454   294F             ;; printf("Now entering %s quadrant...\n\n", quadname); 
5455   294F 3B B7 61      mov d, _quadname_data ; $quadname
5456   2952 2D            mov b, d
5457   2953 FD AB         swp b
5458   2955 D8            push b
5459   2956 26 50 67      mov b, _s65 ; "Now entering %s quadrant...\n\n"
5460   2959 FD AB         swp b
5461   295B D8            push b
5462   295C 07 D6 05      call printf
5463   295F 51 04 00      add sp, 4
5464   2962 0A 84 29      jmp _if84_exit
5465   2965             _if84_else:
5466   2965             ;; puts("\nYour mission begins with your starship located"); 
5467   2965 26 6E 67      mov b, _s66 ; "\nYour mission begins with your starship located"
5468   2968 FD AB         swp b
5469   296A D8            push b
5470   296B 07 36 13      call puts
5471   296E 51 02 00      add sp, 2
5472   2971             ;; printf("in the galactic quadrant %s.\n\n", quadname); 
5473   2971 3B B7 61      mov d, _quadname_data ; $quadname
5474   2974 2D            mov b, d
5475   2975 FD AB         swp b
5476   2977 D8            push b
5477   2978 26 9E 67      mov b, _s67 ; "in the galactic quadrant %s.\n\n"
5478   297B FD AB         swp b
5479   297D D8            push b
5480   297E 07 D6 05      call printf
5481   2981 51 04 00      add sp, 4
5482   2984             _if84_exit:
5483   2984 0A 87 29      jmp _if83_exit
5484   2987             _if83_exit:
5485   2987             ;; tmp = map[quad_y][quad_x]; 
5486   2987 FA FD FF      lea d, [bp + -3] ; $tmp
5487   298A DA            push d
5488   298B 3B 9F 60      mov d, _map_data ; $map
5489   298E D7            push a
5490   298F DA            push d
5491   2990 3B 52 61      mov d, _quad_y ; $quad_y
5492   2993 2A            mov b, [d]
5493   2994 E7            pop d
5494   2995 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
5495   2999 DA            push d
5496   299A 3B 54 61      mov d, _quad_x ; $quad_x
5497   299D 2A            mov b, [d]
5498   299E E7            pop d
5499   299F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5500   29A3 E4            pop a
5501   29A4 2A            mov b, [d]
5502   29A5 E7            pop d
5503   29A6 FD 43         mov [d], b
5504   29A8             ;; klingons = (tmp >> 8) & 0x0F; 
5505   29A8 3B 4D 61      mov d, _klingons ; $klingons
5506   29AB DA            push d
5507   29AC FA FD FF      lea d, [bp + -3] ; $tmp
5508   29AF 2A            mov b, [d]
5509   29B0             ; START SHIFT
5510   29B0 D7            push a
5511   29B1 11            mov a, b
5512   29B2 26 08 00      mov b, $8
5513   29B5 FD 39         mov c, b
5514   29B7 A1            shr a, cl
5515   29B8 27            mov b, a
5516   29B9 E4            pop a
5517   29BA             ; END SHIFT
5518   29BA D7            push a
5519   29BB 11            mov a, b
5520   29BC 26 0F 00      mov b, $f
5521   29BF FD 92         and b, a ; &
5522   29C1 E4            pop a
5523   29C2 E7            pop d
5524   29C3 FD 3E         mov [d], bl
5525   29C5             ;; starbases = (tmp >> 4) & 0x0F; 
5526   29C5 3B 77 60      mov d, _starbases ; $starbases
5527   29C8 DA            push d
5528   29C9 FA FD FF      lea d, [bp + -3] ; $tmp
5529   29CC 2A            mov b, [d]
5530   29CD             ; START SHIFT
5531   29CD D7            push a
5532   29CE 11            mov a, b
5533   29CF 26 04 00      mov b, $4
5534   29D2 FD 39         mov c, b
5535   29D4 A1            shr a, cl
5536   29D5 27            mov b, a
5537   29D6 E4            pop a
5538   29D7             ; END SHIFT
5539   29D7 D7            push a
5540   29D8 11            mov a, b
5541   29D9 26 0F 00      mov b, $f
5542   29DC FD 92         and b, a ; &
5543   29DE E4            pop a
5544   29DF E7            pop d
5545   29E0 FD 3E         mov [d], bl
5546   29E2             ;; stars = tmp & 0x0F; 
5547   29E2 3B 58 61      mov d, _stars ; $stars
5548   29E5 DA            push d
5549   29E6 FA FD FF      lea d, [bp + -3] ; $tmp
5550   29E9 2A            mov b, [d]
5551   29EA D7            push a
5552   29EB 11            mov a, b
5553   29EC 26 0F 00      mov b, $f
5554   29EF FD 92         and b, a ; &
5555   29F1 E4            pop a
5556   29F2 E7            pop d
5557   29F3 FD 3E         mov [d], bl
5558   29F5             ;; if (klingons > 0) { 
5559   29F5             _if85_cond:
5560   29F5 3B 4D 61      mov d, _klingons ; $klingons
5561   29F8 32            mov bl, [d]
5562   29F9 A7 00         mov bh, 0
5563   29FB             ; START RELATIONAL
5564   29FB D7            push a
5565   29FC 11            mov a, b
5566   29FD 26 00 00      mov b, $0
5567   2A00 B0            cmp a, b
5568   2A01 FD 81         sgu ; > (unsigned)
5569   2A03 E4            pop a
5570   2A04             ; END RELATIONAL
5571   2A04 C0 00 00      cmp b, 0
5572   2A07 C6 3B 2A      je _if85_exit
5573   2A0A             _if85_true:
5574   2A0A             ;; printf("Combat Area  Condition Red\n"); 
5575   2A0A 26 BD 67      mov b, _s68 ; "Combat Area  Condition Red\n"
5576   2A0D FD AB         swp b
5577   2A0F D8            push b
5578   2A10 07 D6 05      call printf
5579   2A13 51 02 00      add sp, 2
5580   2A16             ;; if (shield < 200) 
5581   2A16             _if86_cond:
5582   2A16 3B 56 61      mov d, _shield ; $shield
5583   2A19 2A            mov b, [d]
5584   2A1A             ; START RELATIONAL
5585   2A1A D7            push a
5586   2A1B 11            mov a, b
5587   2A1C 26 C8 00      mov b, $c8
5588   2A1F B0            cmp a, b
5589   2A20 FD 73         slt ; < (signed)
5590   2A22 E4            pop a
5591   2A23             ; END RELATIONAL
5592   2A23 C0 00 00      cmp b, 0
5593   2A26 C6 38 2A      je _if86_exit
5594   2A29             _if86_true:
5595   2A29             ;; printf("Shields Dangerously Low\n"); 
5596   2A29 26 D9 67      mov b, _s69 ; "Shields Dangerously Low\n"
5597   2A2C FD AB         swp b
5598   2A2E D8            push b
5599   2A2F 07 D6 05      call printf
5600   2A32 51 02 00      add sp, 2
5601   2A35 0A 38 2A      jmp _if86_exit
5602   2A38             _if86_exit:
5603   2A38 0A 3B 2A      jmp _if85_exit
5604   2A3B             _if85_exit:
5605   2A3B             ;; for (i = 1; i <= 3; i++) { 
5606   2A3B             _for87_init:
5607   2A3B FA FF FF      lea d, [bp + -1] ; $i
5608   2A3E DA            push d
5609   2A3F 26 01 00      mov b, $1
5610   2A42 E7            pop d
5611   2A43 FD 43         mov [d], b
5612   2A45             _for87_cond:
5613   2A45 FA FF FF      lea d, [bp + -1] ; $i
5614   2A48 2A            mov b, [d]
5615   2A49             ; START RELATIONAL
5616   2A49 D7            push a
5617   2A4A 11            mov a, b
5618   2A4B 26 03 00      mov b, $3
5619   2A4E B0            cmp a, b
5620   2A4F FD 73         slt ; <= (signed)
5621   2A51 E4            pop a
5622   2A52             ; END RELATIONAL
5623   2A52 C0 00 00      cmp b, 0
5624   2A55 C6 A4 2A      je _for87_exit
5625   2A58             _for87_block:
5626   2A58             ;; k->y = 0; 
5627   2A58 FA FB FF      lea d, [bp + -5] ; $k
5628   2A5B FD 2A         mov d, [d]
5629   2A5D 58 00 00      add d, 0
5630   2A60 DA            push d
5631   2A61 26 00 00      mov b, $0
5632   2A64 E7            pop d
5633   2A65 FD 3E         mov [d], bl
5634   2A67             ;; k->x = 0; 
5635   2A67 FA FB FF      lea d, [bp + -5] ; $k
5636   2A6A FD 2A         mov d, [d]
5637   2A6C 58 01 00      add d, 1
5638   2A6F DA            push d
5639   2A70 26 00 00      mov b, $0
5640   2A73 E7            pop d
5641   2A74 FD 3E         mov [d], bl
5642   2A76             ;; k->energy = 0; 
5643   2A76 FA FB FF      lea d, [bp + -5] ; $k
5644   2A79 FD 2A         mov d, [d]
5645   2A7B 58 02 00      add d, 2
5646   2A7E DA            push d
5647   2A7F 26 00 00      mov b, $0
5648   2A82 E7            pop d
5649   2A83 FD 43         mov [d], b
5650   2A85             ;; k++; 
5651   2A85 FA FB FF      lea d, [bp + -5] ; $k
5652   2A88 2A            mov b, [d]
5653   2A89 D8            push b
5654   2A8A FD 77         inc b
5655   2A8C FD 77         inc b
5656   2A8E FA FB FF      lea d, [bp + -5] ; $k
5657   2A91 FD 43         mov [d], b
5658   2A93 E5            pop b
5659   2A94             _for87_update:
5660   2A94 FA FF FF      lea d, [bp + -1] ; $i
5661   2A97 2A            mov b, [d]
5662   2A98 D8            push b
5663   2A99 FD 77         inc b
5664   2A9B FA FF FF      lea d, [bp + -1] ; $i
5665   2A9E FD 43         mov [d], b
5666   2AA0 E5            pop b
5667   2AA1 0A 45 2A      jmp _for87_cond
5668   2AA4             _for87_exit:
5669   2AA4             ;; memset(quad,  		0      , 64); 
5670   2AA4 26 40 00      mov b, $40
5671   2AA7 FD AB         swp b
5672   2AA9 D8            push b
5673   2AAA 26 00 00      mov b, $0
5674   2AAD DD            push bl
5675   2AAE 3B 77 61      mov d, _quad_data ; $quad
5676   2AB1 2D            mov b, d
5677   2AB2 FD AB         swp b
5678   2AB4 D8            push b
5679   2AB5 07 3A 17      call memset
5680   2AB8 51 05 00      add sp, 5
5681   2ABB             ;; place_ship(); 
5682   2ABB 07 0C 28      call place_ship
5683   2ABE             ;; if (klingons > 0) { 
5684   2ABE             _if88_cond:
5685   2ABE 3B 4D 61      mov d, _klingons ; $klingons
5686   2AC1 32            mov bl, [d]
5687   2AC2 A7 00         mov bh, 0
5688   2AC4             ; START RELATIONAL
5689   2AC4 D7            push a
5690   2AC5 11            mov a, b
5691   2AC6 26 00 00      mov b, $0
5692   2AC9 B0            cmp a, b
5693   2ACA FD 81         sgu ; > (unsigned)
5694   2ACC E4            pop a
5695   2ACD             ; END RELATIONAL
5696   2ACD C0 00 00      cmp b, 0
5697   2AD0 C6 65 2B      je _if88_exit
5698   2AD3             _if88_true:
5699   2AD3             ;; k = kdata; 
5700   2AD3 FA FB FF      lea d, [bp + -5] ; $k
5701   2AD6 DA            push d
5702   2AD7 3B 41 61      mov d, _kdata_data ; $kdata
5703   2ADA 2D            mov b, d
5704   2ADB E7            pop d
5705   2ADC FD 43         mov [d], b
5706   2ADE             ;; for (i = 0; i < klingons; i++) { 
5707   2ADE             _for89_init:
5708   2ADE FA FF FF      lea d, [bp + -1] ; $i
5709   2AE1 DA            push d
5710   2AE2 26 00 00      mov b, $0
5711   2AE5 E7            pop d
5712   2AE6 FD 43         mov [d], b
5713   2AE8             _for89_cond:
5714   2AE8 FA FF FF      lea d, [bp + -1] ; $i
5715   2AEB 2A            mov b, [d]
5716   2AEC             ; START RELATIONAL
5717   2AEC D7            push a
5718   2AED 11            mov a, b
5719   2AEE 3B 4D 61      mov d, _klingons ; $klingons
5720   2AF1 32            mov bl, [d]
5721   2AF2 A7 00         mov bh, 0
5722   2AF4 B0            cmp a, b
5723   2AF5 FD 73         slt ; < (signed)
5724   2AF7 E4            pop a
5725   2AF8             ; END RELATIONAL
5726   2AF8 C0 00 00      cmp b, 0
5727   2AFB C6 62 2B      je _for89_exit
5728   2AFE             _for89_block:
5729   2AFE             ;; find_set_empty_place( 	3        , k->y, k->x); 
5730   2AFE FA FB FF      lea d, [bp + -5] ; $k
5731   2B01 FD 2A         mov d, [d]
5732   2B03 58 01 00      add d, 1
5733   2B06 32            mov bl, [d]
5734   2B07 A7 00         mov bh, 0
5735   2B09 FD AB         swp b
5736   2B0B D8            push b
5737   2B0C FA FB FF      lea d, [bp + -5] ; $k
5738   2B0F FD 2A         mov d, [d]
5739   2B11 58 00 00      add d, 0
5740   2B14 32            mov bl, [d]
5741   2B15 A7 00         mov bh, 0
5742   2B17 FD AB         swp b
5743   2B19 D8            push b
5744   2B1A 26 03 00      mov b, $3
5745   2B1D DD            push bl
5746   2B1E 07 62 5C      call find_set_empty_place
5747   2B21 51 05 00      add sp, 5
5748   2B24             ;; k->energy = 100 + get_rand(200); 
5749   2B24 FA FB FF      lea d, [bp + -5] ; $k
5750   2B27 FD 2A         mov d, [d]
5751   2B29 58 02 00      add d, 2
5752   2B2C DA            push d
5753   2B2D 26 64 00      mov b, $64
5754   2B30             ; START TERMS
5755   2B30 D7            push a
5756   2B31 11            mov a, b
5757   2B32 26 C8 00      mov b, $c8
5758   2B35 FD AB         swp b
5759   2B37 D8            push b
5760   2B38 07 21 1D      call get_rand
5761   2B3B 51 02 00      add sp, 2
5762   2B3E 56            add b, a
5763   2B3F E4            pop a
5764   2B40             ; END TERMS
5765   2B40 E7            pop d
5766   2B41 FD 43         mov [d], b
5767   2B43             ;; k++; 
5768   2B43 FA FB FF      lea d, [bp + -5] ; $k
5769   2B46 2A            mov b, [d]
5770   2B47 D8            push b
5771   2B48 FD 77         inc b
5772   2B4A FD 77         inc b
5773   2B4C FA FB FF      lea d, [bp + -5] ; $k
5774   2B4F FD 43         mov [d], b
5775   2B51 E5            pop b
5776   2B52             _for89_update:
5777   2B52 FA FF FF      lea d, [bp + -1] ; $i
5778   2B55 2A            mov b, [d]
5779   2B56 D8            push b
5780   2B57 FD 77         inc b
5781   2B59 FA FF FF      lea d, [bp + -1] ; $i
5782   2B5C FD 43         mov [d], b
5783   2B5E E5            pop b
5784   2B5F 0A E8 2A      jmp _for89_cond
5785   2B62             _for89_exit:
5786   2B62 0A 65 2B      jmp _if88_exit
5787   2B65             _if88_exit:
5788   2B65             ;; if (starbases > 0) 
5789   2B65             _if90_cond:
5790   2B65 3B 77 60      mov d, _starbases ; $starbases
5791   2B68 32            mov bl, [d]
5792   2B69 A7 00         mov bh, 0
5793   2B6B             ; START RELATIONAL
5794   2B6B D7            push a
5795   2B6C 11            mov a, b
5796   2B6D 26 00 00      mov b, $0
5797   2B70 B0            cmp a, b
5798   2B71 FD 7F         sgt ; >
5799   2B73 E4            pop a
5800   2B74             ; END RELATIONAL
5801   2B74 C0 00 00      cmp b, 0
5802   2B77 C6 95 2B      je _if90_exit
5803   2B7A             _if90_true:
5804   2B7A             ;; find_set_empty_place( 		2     , &base_y, &base_x); 
5805   2B7A 3B 79 60      mov d, _base_x ; $base_x
5806   2B7D 2D            mov b, d
5807   2B7E FD AB         swp b
5808   2B80 D8            push b
5809   2B81 3B 78 60      mov d, _base_y ; $base_y
5810   2B84 2D            mov b, d
5811   2B85 FD AB         swp b
5812   2B87 D8            push b
5813   2B88 26 02 00      mov b, $2
5814   2B8B DD            push bl
5815   2B8C 07 62 5C      call find_set_empty_place
5816   2B8F 51 05 00      add sp, 5
5817   2B92 0A 95 2B      jmp _if90_exit
5818   2B95             _if90_exit:
5819   2B95             ;; for (i = 1; i <= stars; i++) 
5820   2B95             _for91_init:
5821   2B95 FA FF FF      lea d, [bp + -1] ; $i
5822   2B98 DA            push d
5823   2B99 26 01 00      mov b, $1
5824   2B9C E7            pop d
5825   2B9D FD 43         mov [d], b
5826   2B9F             _for91_cond:
5827   2B9F FA FF FF      lea d, [bp + -1] ; $i
5828   2BA2 2A            mov b, [d]
5829   2BA3             ; START RELATIONAL
5830   2BA3 D7            push a
5831   2BA4 11            mov a, b
5832   2BA5 3B 58 61      mov d, _stars ; $stars
5833   2BA8 32            mov bl, [d]
5834   2BA9 A7 00         mov bh, 0
5835   2BAB B0            cmp a, b
5836   2BAC FD 73         slt ; <= (signed)
5837   2BAE E4            pop a
5838   2BAF             ; END RELATIONAL
5839   2BAF C0 00 00      cmp b, 0
5840   2BB2 C6 DB 2B      je _for91_exit
5841   2BB5             _for91_block:
5842   2BB5             ;; find_set_empty_place( 		1     ,   0   ,   0   ); 
5843   2BB5 26 00 00      mov b, $0
5844   2BB8 FD AB         swp b
5845   2BBA D8            push b
5846   2BBB 26 00 00      mov b, $0
5847   2BBE FD AB         swp b
5848   2BC0 D8            push b
5849   2BC1 26 01 00      mov b, $1
5850   2BC4 DD            push bl
5851   2BC5 07 62 5C      call find_set_empty_place
5852   2BC8 51 05 00      add sp, 5
5853   2BCB             _for91_update:
5854   2BCB FA FF FF      lea d, [bp + -1] ; $i
5855   2BCE 2A            mov b, [d]
5856   2BCF D8            push b
5857   2BD0 FD 77         inc b
5858   2BD2 FA FF FF      lea d, [bp + -1] ; $i
5859   2BD5 FD 43         mov [d], b
5860   2BD7 E5            pop b
5861   2BD8 0A 9F 2B      jmp _for91_cond
5862   2BDB             _for91_exit:
5863   2BDB F9            leave
5864   2BDC 09            ret
5865   2BDD             
5866   2BDD             course_control:
5867   2BDD F8 00 00      enter 0 ; (push bp; mov bp, sp)
5868   2BE0             ; $i 
5869   2BE0             ; $c1 
5870   2BE0             ; $warp 
5871   2BE0             ; $n 
5872   2BE0             ; $c2 
5873   2BE0             ; $c3 
5874   2BE0             ; $c4 
5875   2BE0             ; $z1 
5876   2BE0             ; $z2 
5877   2BE0             ; $x1 
5878   2BE0             ; $x2 
5879   2BE0             ; $x 
5880   2BE0             ; $y 
5881   2BE0             ; $outside 
5882   2BE0 19 00         mov al, $0
5883   2BE2 40 E6 FF      mov [bp + -26], al
5884   2BE5             ; $quad_y_old 
5885   2BE5             ; $quad_x_old 
5886   2BE5 52 1D 00      sub sp, 29
5887   2BE8             ;; puts("Course (0-9): " ); 
5888   2BE8 26 F2 67      mov b, _s70 ; "Course (0-9): "
5889   2BEB FD AB         swp b
5890   2BED D8            push b
5891   2BEE 07 36 13      call puts
5892   2BF1 51 02 00      add sp, 2
5893   2BF4             ;; c1 = input_f00(); 
5894   2BF4 FA FD FF      lea d, [bp + -3] ; $c1
5895   2BF7 DA            push d
5896   2BF8 07 47 1E      call input_f00
5897   2BFB E7            pop d
5898   2BFC FD 43         mov [d], b
5899   2BFE             ;; if (c1 == 900) 
5900   2BFE             _if92_cond:
5901   2BFE FA FD FF      lea d, [bp + -3] ; $c1
5902   2C01 2A            mov b, [d]
5903   2C02             ; START RELATIONAL
5904   2C02 D7            push a
5905   2C03 11            mov a, b
5906   2C04 26 84 03      mov b, $384
5907   2C07 B0            cmp a, b
5908   2C08 FD 71         seq ; ==
5909   2C0A E4            pop a
5910   2C0B             ; END RELATIONAL
5911   2C0B C0 00 00      cmp b, 0
5912   2C0E C6 1E 2C      je _if92_exit
5913   2C11             _if92_true:
5914   2C11             ;; c1 = 100; 
5915   2C11 FA FD FF      lea d, [bp + -3] ; $c1
5916   2C14 DA            push d
5917   2C15 26 64 00      mov b, $64
5918   2C18 E7            pop d
5919   2C19 FD 43         mov [d], b
5920   2C1B 0A 1E 2C      jmp _if92_exit
5921   2C1E             _if92_exit:
5922   2C1E             ;; if (c1 < 0 || c1 > 900) { 
5923   2C1E             _if93_cond:
5924   2C1E FA FD FF      lea d, [bp + -3] ; $c1
5925   2C21 2A            mov b, [d]
5926   2C22             ; START RELATIONAL
5927   2C22 D7            push a
5928   2C23 11            mov a, b
5929   2C24 26 00 00      mov b, $0
5930   2C27 B0            cmp a, b
5931   2C28 FD 73         slt ; < (signed)
5932   2C2A E4            pop a
5933   2C2B             ; END RELATIONAL
5934   2C2B D7            push a
5935   2C2C 11            mov a, b
5936   2C2D FA FD FF      lea d, [bp + -3] ; $c1
5937   2C30 2A            mov b, [d]
5938   2C31             ; START RELATIONAL
5939   2C31 D7            push a
5940   2C32 11            mov a, b
5941   2C33 26 84 03      mov b, $384
5942   2C36 B0            cmp a, b
5943   2C37 FD 7F         sgt ; >
5944   2C39 E4            pop a
5945   2C3A             ; END RELATIONAL
5946   2C3A FD A8         sor a, b ; ||
5947   2C3C E4            pop a
5948   2C3D C0 00 00      cmp b, 0
5949   2C40 C6 5B 2C      je _if93_exit
5950   2C43             _if93_true:
5951   2C43             ;; printf("Lt. Sulu%s", inc_1); 
5952   2C43 3B EB 61      mov d, _inc_1 ; $inc_1
5953   2C46 2A            mov b, [d]
5954   2C47 FD AB         swp b
5955   2C49 D8            push b
5956   2C4A 26 01 68      mov b, _s71 ; "Lt. Sulu%s"
5957   2C4D FD AB         swp b
5958   2C4F D8            push b
5959   2C50 07 D6 05      call printf
5960   2C53 51 04 00      add sp, 4
5961   2C56             ;; return; 
5962   2C56 F9            leave
5963   2C57 09            ret
5964   2C58 0A 5B 2C      jmp _if93_exit
5965   2C5B             _if93_exit:
5966   2C5B             ;; if (damage[1] < 0) 
5967   2C5B             _if94_cond:
5968   2C5B 3B 5D 61      mov d, _damage_data ; $damage
5969   2C5E D7            push a
5970   2C5F DA            push d
5971   2C60 26 01 00      mov b, $1
5972   2C63 E7            pop d
5973   2C64 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
5974   2C68 E4            pop a
5975   2C69 2A            mov b, [d]
5976   2C6A             ; START RELATIONAL
5977   2C6A D7            push a
5978   2C6B 11            mov a, b
5979   2C6C 26 00 00      mov b, $0
5980   2C6F B0            cmp a, b
5981   2C70 FD 73         slt ; < (signed)
5982   2C72 E4            pop a
5983   2C73             ; END RELATIONAL
5984   2C73 C0 00 00      cmp b, 0
5985   2C76 C6 8F 2C      je _if94_exit
5986   2C79             _if94_true:
5987   2C79             ;; strcpy(warpmax, "0.2"); 
5988   2C79 26 0C 68      mov b, _s72 ; "0.2"
5989   2C7C FD AB         swp b
5990   2C7E D8            push b
5991   2C7F 3B 74 62      mov d, _warpmax_data ; $warpmax
5992   2C82 2D            mov b, d
5993   2C83 FD AB         swp b
5994   2C85 D8            push b
5995   2C86 07 14 04      call strcpy
5996   2C89 51 04 00      add sp, 4
5997   2C8C 0A 8F 2C      jmp _if94_exit
5998   2C8F             _if94_exit:
5999   2C8F             ;; printf("Warp Factor (0-%s): ", warpmax); 
6000   2C8F 3B 74 62      mov d, _warpmax_data ; $warpmax
6001   2C92 2D            mov b, d
6002   2C93 FD AB         swp b
6003   2C95 D8            push b
6004   2C96 26 10 68      mov b, _s73 ; "Warp Factor (0-%s): "
6005   2C99 FD AB         swp b
6006   2C9B D8            push b
6007   2C9C 07 D6 05      call printf
6008   2C9F 51 04 00      add sp, 4
6009   2CA2             ;; warp = input_f00(); 
6010   2CA2 FA FB FF      lea d, [bp + -5] ; $warp
6011   2CA5 DA            push d
6012   2CA6 07 47 1E      call input_f00
6013   2CA9 E7            pop d
6014   2CAA FD 43         mov [d], b
6015   2CAC             ;; if (damage[1] < 0 && warp > 20) { 
6016   2CAC             _if95_cond:
6017   2CAC 3B 5D 61      mov d, _damage_data ; $damage
6018   2CAF D7            push a
6019   2CB0 DA            push d
6020   2CB1 26 01 00      mov b, $1
6021   2CB4 E7            pop d
6022   2CB5 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6023   2CB9 E4            pop a
6024   2CBA 2A            mov b, [d]
6025   2CBB             ; START RELATIONAL
6026   2CBB D7            push a
6027   2CBC 11            mov a, b
6028   2CBD 26 00 00      mov b, $0
6029   2CC0 B0            cmp a, b
6030   2CC1 FD 73         slt ; < (signed)
6031   2CC3 E4            pop a
6032   2CC4             ; END RELATIONAL
6033   2CC4 D7            push a
6034   2CC5 11            mov a, b
6035   2CC6 FA FB FF      lea d, [bp + -5] ; $warp
6036   2CC9 2A            mov b, [d]
6037   2CCA             ; START RELATIONAL
6038   2CCA D7            push a
6039   2CCB 11            mov a, b
6040   2CCC 26 14 00      mov b, $14
6041   2CCF B0            cmp a, b
6042   2CD0 FD 7F         sgt ; >
6043   2CD2 E4            pop a
6044   2CD3             ; END RELATIONAL
6045   2CD3 FD A7         sand a, b
6046   2CD5 E4            pop a
6047   2CD6 C0 00 00      cmp b, 0
6048   2CD9 C6 ED 2C      je _if95_exit
6049   2CDC             _if95_true:
6050   2CDC             ;; printf("Warp Engines are damaged. Maximum speed = Warp 0.2.\n\n"); 
6051   2CDC 26 25 68      mov b, _s74 ; "Warp Engines are damaged. Maximum speed = Warp 0.2.\n\n"
6052   2CDF FD AB         swp b
6053   2CE1 D8            push b
6054   2CE2 07 D6 05      call printf
6055   2CE5 51 02 00      add sp, 2
6056   2CE8             ;; return; 
6057   2CE8 F9            leave
6058   2CE9 09            ret
6059   2CEA 0A ED 2C      jmp _if95_exit
6060   2CED             _if95_exit:
6061   2CED             ;; if (warp <= 0) 
6062   2CED             _if96_cond:
6063   2CED FA FB FF      lea d, [bp + -5] ; $warp
6064   2CF0 2A            mov b, [d]
6065   2CF1             ; START RELATIONAL
6066   2CF1 D7            push a
6067   2CF2 11            mov a, b
6068   2CF3 26 00 00      mov b, $0
6069   2CF6 B0            cmp a, b
6070   2CF7 FD 73         slt ; <= (signed)
6071   2CF9 E4            pop a
6072   2CFA             ; END RELATIONAL
6073   2CFA C0 00 00      cmp b, 0
6074   2CFD C6 05 2D      je _if96_exit
6075   2D00             _if96_true:
6076   2D00             ;; return; 
6077   2D00 F9            leave
6078   2D01 09            ret
6079   2D02 0A 05 2D      jmp _if96_exit
6080   2D05             _if96_exit:
6081   2D05             ;; if (warp > 800) { 
6082   2D05             _if97_cond:
6083   2D05 FA FB FF      lea d, [bp + -5] ; $warp
6084   2D08 2A            mov b, [d]
6085   2D09             ; START RELATIONAL
6086   2D09 D7            push a
6087   2D0A 11            mov a, b
6088   2D0B 26 20 03      mov b, $320
6089   2D0E B0            cmp a, b
6090   2D0F FD 7F         sgt ; >
6091   2D11 E4            pop a
6092   2D12             ; END RELATIONAL
6093   2D12 C0 00 00      cmp b, 0
6094   2D15 C6 39 2D      je _if97_exit
6095   2D18             _if97_true:
6096   2D18             ;; printf("Chief Engineer Scott reports:\n  The engines wont take warp %s!\n\n", print100(warp)); 
6097   2D18 FA FB FF      lea d, [bp + -5] ; $warp
6098   2D1B 2A            mov b, [d]
6099   2D1C FD AB         swp b
6100   2D1E D8            push b
6101   2D1F 07 01 20      call print100
6102   2D22 51 02 00      add sp, 2
6103   2D25 FD AB         swp b
6104   2D27 D8            push b
6105   2D28 26 5B 68      mov b, _s75 ; "Chief Engineer Scott reports:\n  The engines wont take warp %s!\n\n"
6106   2D2B FD AB         swp b
6107   2D2D D8            push b
6108   2D2E 07 D6 05      call printf
6109   2D31 51 04 00      add sp, 4
6110   2D34             ;; return; 
6111   2D34 F9            leave
6112   2D35 09            ret
6113   2D36 0A 39 2D      jmp _if97_exit
6114   2D39             _if97_exit:
6115   2D39             ;; n = warp * 8; 
6116   2D39 FA F9 FF      lea d, [bp + -7] ; $n
6117   2D3C DA            push d
6118   2D3D FA FB FF      lea d, [bp + -5] ; $warp
6119   2D40 2A            mov b, [d]
6120   2D41             ; START FACTORS
6121   2D41 D7            push a
6122   2D42 11            mov a, b
6123   2D43 26 08 00      mov b, $8
6124   2D46 AC            mul a, b ; *
6125   2D47 11            mov a, b
6126   2D48 27            mov b, a
6127   2D49 E4            pop a
6128   2D4A             ; END FACTORS
6129   2D4A E7            pop d
6130   2D4B FD 43         mov [d], b
6131   2D4D             ;; n = cint100(n);	 
6132   2D4D FA F9 FF      lea d, [bp + -7] ; $n
6133   2D50 DA            push d
6134   2D51 FA F9 FF      lea d, [bp + -7] ; $n
6135   2D54 2A            mov b, [d]
6136   2D55 FD AB         swp b
6137   2D57 D8            push b
6138   2D58 07 5A 60      call cint100
6139   2D5B 51 02 00      add sp, 2
6140   2D5E E7            pop d
6141   2D5F FD 43         mov [d], b
6142   2D61             ;; if (energy - n < 0) { 
6143   2D61             _if98_cond:
6144   2D61 3B 9B 60      mov d, _energy ; $energy
6145   2D64 2A            mov b, [d]
6146   2D65             ; START TERMS
6147   2D65 D7            push a
6148   2D66 11            mov a, b
6149   2D67 FA F9 FF      lea d, [bp + -7] ; $n
6150   2D6A 2A            mov b, [d]
6151   2D6B 60            sub a, b
6152   2D6C 27            mov b, a
6153   2D6D E4            pop a
6154   2D6E             ; END TERMS
6155   2D6E             ; START RELATIONAL
6156   2D6E D7            push a
6157   2D6F 11            mov a, b
6158   2D70 26 00 00      mov b, $0
6159   2D73 B0            cmp a, b
6160   2D74 FD 75         slu ; < (unsigned)
6161   2D76 E4            pop a
6162   2D77             ; END RELATIONAL
6163   2D77 C0 00 00      cmp b, 0
6164   2D7A C6 E5 2D      je _if98_exit
6165   2D7D             _if98_true:
6166   2D7D             ;; printf("Engineering reports:\n  Insufficient energy available for maneuvering at warp %s!\n\n", print100(warp)); 
6167   2D7D FA FB FF      lea d, [bp + -5] ; $warp
6168   2D80 2A            mov b, [d]
6169   2D81 FD AB         swp b
6170   2D83 D8            push b
6171   2D84 07 01 20      call print100
6172   2D87 51 02 00      add sp, 2
6173   2D8A FD AB         swp b
6174   2D8C D8            push b
6175   2D8D 26 9C 68      mov b, _s76 ; "Engineering reports:\n  Insufficient energy available for maneuvering at warp %s!\n\n"
6176   2D90 FD AB         swp b
6177   2D92 D8            push b
6178   2D93 07 D6 05      call printf
6179   2D96 51 04 00      add sp, 4
6180   2D99             ;; if (shield >= n && damage[7] >= 0) { 
6181   2D99             _if99_cond:
6182   2D99 3B 56 61      mov d, _shield ; $shield
6183   2D9C 2A            mov b, [d]
6184   2D9D             ; START RELATIONAL
6185   2D9D D7            push a
6186   2D9E 11            mov a, b
6187   2D9F FA F9 FF      lea d, [bp + -7] ; $n
6188   2DA2 2A            mov b, [d]
6189   2DA3 B0            cmp a, b
6190   2DA4 FD 80         sge ; >=
6191   2DA6 E4            pop a
6192   2DA7             ; END RELATIONAL
6193   2DA7 D7            push a
6194   2DA8 11            mov a, b
6195   2DA9 3B 5D 61      mov d, _damage_data ; $damage
6196   2DAC D7            push a
6197   2DAD DA            push d
6198   2DAE 26 07 00      mov b, $7
6199   2DB1 E7            pop d
6200   2DB2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6201   2DB6 E4            pop a
6202   2DB7 2A            mov b, [d]
6203   2DB8             ; START RELATIONAL
6204   2DB8 D7            push a
6205   2DB9 11            mov a, b
6206   2DBA 26 00 00      mov b, $0
6207   2DBD B0            cmp a, b
6208   2DBE FD 80         sge ; >=
6209   2DC0 E4            pop a
6210   2DC1             ; END RELATIONAL
6211   2DC1 FD A7         sand a, b
6212   2DC3 E4            pop a
6213   2DC4 C0 00 00      cmp b, 0
6214   2DC7 C6 E0 2D      je _if99_exit
6215   2DCA             _if99_true:
6216   2DCA             ;; printf("Deflector Control Room acknowledges:\n  %d units of energy presently deployed to shields.\n", shield); 
6217   2DCA 3B 56 61      mov d, _shield ; $shield
6218   2DCD 2A            mov b, [d]
6219   2DCE FD AB         swp b
6220   2DD0 D8            push b
6221   2DD1 26 EF 68      mov b, _s77 ; "Deflector Control Room acknowledges:\n  %d units of energy presently deployed to shields.\n"
6222   2DD4 FD AB         swp b
6223   2DD6 D8            push b
6224   2DD7 07 D6 05      call printf
6225   2DDA 51 04 00      add sp, 4
6226   2DDD 0A E0 2D      jmp _if99_exit
6227   2DE0             _if99_exit:
6228   2DE0             ;; return; 
6229   2DE0 F9            leave
6230   2DE1 09            ret
6231   2DE2 0A E5 2D      jmp _if98_exit
6232   2DE5             _if98_exit:
6233   2DE5             ;; klingons_move(); 
6234   2DE5 07 3E 56      call klingons_move
6235   2DE8             ;; repair_damage(warp); 
6236   2DE8 FA FB FF      lea d, [bp + -5] ; $warp
6237   2DEB 2A            mov b, [d]
6238   2DEC FD AB         swp b
6239   2DEE D8            push b
6240   2DEF 07 BE 59      call repair_damage
6241   2DF2 51 02 00      add sp, 2
6242   2DF5             ;; z1 = FROM_FIXED00(ship_y); 
6243   2DF5 FA F1 FF      lea d, [bp + -15] ; $z1
6244   2DF8 DA            push d
6245   2DF9 3B 71 61      mov d, _ship_y ; $ship_y
6246   2DFC 2A            mov b, [d]
6247   2DFD FD AB         swp b
6248   2DFF D8            push b
6249   2E00 07 10 1D      call FROM_FIXED00
6250   2E03 51 02 00      add sp, 2
6251   2E06 E7            pop d
6252   2E07 FD 43         mov [d], b
6253   2E09             ;; z2 = FROM_FIXED00(ship_x); 
6254   2E09 FA EF FF      lea d, [bp + -17] ; $z2
6255   2E0C DA            push d
6256   2E0D 3B 73 61      mov d, _ship_x ; $ship_x
6257   2E10 2A            mov b, [d]
6258   2E11 FD AB         swp b
6259   2E13 D8            push b
6260   2E14 07 10 1D      call FROM_FIXED00
6261   2E17 51 02 00      add sp, 2
6262   2E1A E7            pop d
6263   2E1B FD 43         mov [d], b
6264   2E1D             ;; quad[z1+-1][z2+-1] =  		0      ; 
6265   2E1D 3B 77 61      mov d, _quad_data ; $quad
6266   2E20 D7            push a
6267   2E21 DA            push d
6268   2E22 FA F1 FF      lea d, [bp + -15] ; $z1
6269   2E25 2A            mov b, [d]
6270   2E26             ; START TERMS
6271   2E26 D7            push a
6272   2E27 11            mov a, b
6273   2E28 26 FF FF      mov b, $ffff
6274   2E2B 56            add b, a
6275   2E2C E4            pop a
6276   2E2D             ; END TERMS
6277   2E2D E7            pop d
6278   2E2E FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
6279   2E32 DA            push d
6280   2E33 FA EF FF      lea d, [bp + -17] ; $z2
6281   2E36 2A            mov b, [d]
6282   2E37             ; START TERMS
6283   2E37 D7            push a
6284   2E38 11            mov a, b
6285   2E39 26 FF FF      mov b, $ffff
6286   2E3C 56            add b, a
6287   2E3D E4            pop a
6288   2E3E             ; END TERMS
6289   2E3E E7            pop d
6290   2E3F 5A            add d, b
6291   2E40 E4            pop a
6292   2E41 DA            push d
6293   2E42 26 00 00      mov b, $0
6294   2E45 E7            pop d
6295   2E46 FD 3E         mov [d], bl
6296   2E48             ;; c2 = FROM_FIXED00(c1);	/* Integer part */ 
6297   2E48 FA F7 FF      lea d, [bp + -9] ; $c2
6298   2E4B DA            push d
6299   2E4C FA FD FF      lea d, [bp + -3] ; $c1
6300   2E4F 2A            mov b, [d]
6301   2E50 FD AB         swp b
6302   2E52 D8            push b
6303   2E53 07 10 1D      call FROM_FIXED00
6304   2E56 51 02 00      add sp, 2
6305   2E59 E7            pop d
6306   2E5A FD 43         mov [d], b
6307   2E5C             ;; c3 = c2 + 1;		/* Next integer part */ 
6308   2E5C FA F5 FF      lea d, [bp + -11] ; $c3
6309   2E5F DA            push d
6310   2E60 FA F7 FF      lea d, [bp + -9] ; $c2
6311   2E63 2A            mov b, [d]
6312   2E64             ; START TERMS
6313   2E64 D7            push a
6314   2E65 11            mov a, b
6315   2E66 26 01 00      mov b, $1
6316   2E69 56            add b, a
6317   2E6A E4            pop a
6318   2E6B             ; END TERMS
6319   2E6B E7            pop d
6320   2E6C FD 43         mov [d], b
6321   2E6E             ;; c4 = (c1 - TO_FIXED00(c2));	/* Fractional element in fixed point */ 
6322   2E6E FA F3 FF      lea d, [bp + -13] ; $c4
6323   2E71 DA            push d
6324   2E72 FA FD FF      lea d, [bp + -3] ; $c1
6325   2E75 2A            mov b, [d]
6326   2E76             ; START TERMS
6327   2E76 D7            push a
6328   2E77 11            mov a, b
6329   2E78 FA F7 FF      lea d, [bp + -9] ; $c2
6330   2E7B 2A            mov b, [d]
6331   2E7C FD AB         swp b
6332   2E7E D8            push b
6333   2E7F 07 FE 1C      call TO_FIXED00
6334   2E82 51 02 00      add sp, 2
6335   2E85 60            sub a, b
6336   2E86 27            mov b, a
6337   2E87 E4            pop a
6338   2E88             ; END TERMS
6339   2E88 E7            pop d
6340   2E89 FD 43         mov [d], b
6341   2E8B             ;; x1 = 100 * c[1][c2] + (c[1][c3] - c[1][c2]) * c4; 
6342   2E8B FA ED FF      lea d, [bp + -19] ; $x1
6343   2E8E DA            push d
6344   2E8F 26 64 00      mov b, $64
6345   2E92             ; START FACTORS
6346   2E92 D7            push a
6347   2E93 11            mov a, b
6348   2E94 3B 7B 60      mov d, _c_data ; $c
6349   2E97 D7            push a
6350   2E98 DA            push d
6351   2E99 26 01 00      mov b, $1
6352   2E9C E7            pop d
6353   2E9D FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
6354   2EA1 DA            push d
6355   2EA2 FA F7 FF      lea d, [bp + -9] ; $c2
6356   2EA5 2A            mov b, [d]
6357   2EA6 E7            pop d
6358   2EA7 5A            add d, b
6359   2EA8 E4            pop a
6360   2EA9 32            mov bl, [d]
6361   2EAA A7 00         mov bh, 0
6362   2EAC AC            mul a, b ; *
6363   2EAD 11            mov a, b
6364   2EAE 27            mov b, a
6365   2EAF E4            pop a
6366   2EB0             ; END FACTORS
6367   2EB0             ; START TERMS
6368   2EB0 D7            push a
6369   2EB1 11            mov a, b
6370   2EB2 3B 7B 60      mov d, _c_data ; $c
6371   2EB5 D7            push a
6372   2EB6 DA            push d
6373   2EB7 26 01 00      mov b, $1
6374   2EBA E7            pop d
6375   2EBB FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
6376   2EBF DA            push d
6377   2EC0 FA F5 FF      lea d, [bp + -11] ; $c3
6378   2EC3 2A            mov b, [d]
6379   2EC4 E7            pop d
6380   2EC5 5A            add d, b
6381   2EC6 E4            pop a
6382   2EC7 32            mov bl, [d]
6383   2EC8 A7 00         mov bh, 0
6384   2ECA             ; START TERMS
6385   2ECA D7            push a
6386   2ECB 11            mov a, b
6387   2ECC 3B 7B 60      mov d, _c_data ; $c
6388   2ECF D7            push a
6389   2ED0 DA            push d
6390   2ED1 26 01 00      mov b, $1
6391   2ED4 E7            pop d
6392   2ED5 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
6393   2ED9 DA            push d
6394   2EDA FA F7 FF      lea d, [bp + -9] ; $c2
6395   2EDD 2A            mov b, [d]
6396   2EDE E7            pop d
6397   2EDF 5A            add d, b
6398   2EE0 E4            pop a
6399   2EE1 32            mov bl, [d]
6400   2EE2 A7 00         mov bh, 0
6401   2EE4 60            sub a, b
6402   2EE5 27            mov b, a
6403   2EE6 E4            pop a
6404   2EE7             ; END TERMS
6405   2EE7             ; START FACTORS
6406   2EE7 D7            push a
6407   2EE8 11            mov a, b
6408   2EE9 FA F3 FF      lea d, [bp + -13] ; $c4
6409   2EEC 2A            mov b, [d]
6410   2EED AC            mul a, b ; *
6411   2EEE 11            mov a, b
6412   2EEF 27            mov b, a
6413   2EF0 E4            pop a
6414   2EF1             ; END FACTORS
6415   2EF1 56            add b, a
6416   2EF2 E4            pop a
6417   2EF3             ; END TERMS
6418   2EF3 E7            pop d
6419   2EF4 FD 43         mov [d], b
6420   2EF6             ;; x2 = 100 * c[2][c2] + (c[2][c3] - c[2][c2]) * c4; 
6421   2EF6 FA EB FF      lea d, [bp + -21] ; $x2
6422   2EF9 DA            push d
6423   2EFA 26 64 00      mov b, $64
6424   2EFD             ; START FACTORS
6425   2EFD D7            push a
6426   2EFE 11            mov a, b
6427   2EFF 3B 7B 60      mov d, _c_data ; $c
6428   2F02 D7            push a
6429   2F03 DA            push d
6430   2F04 26 02 00      mov b, $2
6431   2F07 E7            pop d
6432   2F08 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
6433   2F0C DA            push d
6434   2F0D FA F7 FF      lea d, [bp + -9] ; $c2
6435   2F10 2A            mov b, [d]
6436   2F11 E7            pop d
6437   2F12 5A            add d, b
6438   2F13 E4            pop a
6439   2F14 32            mov bl, [d]
6440   2F15 A7 00         mov bh, 0
6441   2F17 AC            mul a, b ; *
6442   2F18 11            mov a, b
6443   2F19 27            mov b, a
6444   2F1A E4            pop a
6445   2F1B             ; END FACTORS
6446   2F1B             ; START TERMS
6447   2F1B D7            push a
6448   2F1C 11            mov a, b
6449   2F1D 3B 7B 60      mov d, _c_data ; $c
6450   2F20 D7            push a
6451   2F21 DA            push d
6452   2F22 26 02 00      mov b, $2
6453   2F25 E7            pop d
6454   2F26 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
6455   2F2A DA            push d
6456   2F2B FA F5 FF      lea d, [bp + -11] ; $c3
6457   2F2E 2A            mov b, [d]
6458   2F2F E7            pop d
6459   2F30 5A            add d, b
6460   2F31 E4            pop a
6461   2F32 32            mov bl, [d]
6462   2F33 A7 00         mov bh, 0
6463   2F35             ; START TERMS
6464   2F35 D7            push a
6465   2F36 11            mov a, b
6466   2F37 3B 7B 60      mov d, _c_data ; $c
6467   2F3A D7            push a
6468   2F3B DA            push d
6469   2F3C 26 02 00      mov b, $2
6470   2F3F E7            pop d
6471   2F40 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
6472   2F44 DA            push d
6473   2F45 FA F7 FF      lea d, [bp + -9] ; $c2
6474   2F48 2A            mov b, [d]
6475   2F49 E7            pop d
6476   2F4A 5A            add d, b
6477   2F4B E4            pop a
6478   2F4C 32            mov bl, [d]
6479   2F4D A7 00         mov bh, 0
6480   2F4F 60            sub a, b
6481   2F50 27            mov b, a
6482   2F51 E4            pop a
6483   2F52             ; END TERMS
6484   2F52             ; START FACTORS
6485   2F52 D7            push a
6486   2F53 11            mov a, b
6487   2F54 FA F3 FF      lea d, [bp + -13] ; $c4
6488   2F57 2A            mov b, [d]
6489   2F58 AC            mul a, b ; *
6490   2F59 11            mov a, b
6491   2F5A 27            mov b, a
6492   2F5B E4            pop a
6493   2F5C             ; END FACTORS
6494   2F5C 56            add b, a
6495   2F5D E4            pop a
6496   2F5E             ; END TERMS
6497   2F5E E7            pop d
6498   2F5F FD 43         mov [d], b
6499   2F61             ;; x = ship_y; 
6500   2F61 FA E9 FF      lea d, [bp + -23] ; $x
6501   2F64 DA            push d
6502   2F65 3B 71 61      mov d, _ship_y ; $ship_y
6503   2F68 2A            mov b, [d]
6504   2F69 E7            pop d
6505   2F6A FD 43         mov [d], b
6506   2F6C             ;; y = ship_x; 
6507   2F6C FA E7 FF      lea d, [bp + -25] ; $y
6508   2F6F DA            push d
6509   2F70 3B 73 61      mov d, _ship_x ; $ship_x
6510   2F73 2A            mov b, [d]
6511   2F74 E7            pop d
6512   2F75 FD 43         mov [d], b
6513   2F77             ;; for (i = 1; i <= n; i++) { 
6514   2F77             _for100_init:
6515   2F77 FA FF FF      lea d, [bp + -1] ; $i
6516   2F7A DA            push d
6517   2F7B 26 01 00      mov b, $1
6518   2F7E E7            pop d
6519   2F7F FD 43         mov [d], b
6520   2F81             _for100_cond:
6521   2F81 FA FF FF      lea d, [bp + -1] ; $i
6522   2F84 2A            mov b, [d]
6523   2F85             ; START RELATIONAL
6524   2F85 D7            push a
6525   2F86 11            mov a, b
6526   2F87 FA F9 FF      lea d, [bp + -7] ; $n
6527   2F8A 2A            mov b, [d]
6528   2F8B B0            cmp a, b
6529   2F8C FD 73         slt ; <= (signed)
6530   2F8E E4            pop a
6531   2F8F             ; END RELATIONAL
6532   2F8F C0 00 00      cmp b, 0
6533   2F92 C6 D2 33      je _for100_exit
6534   2F95             _for100_block:
6535   2F95             ;; ship_y = ship_y + x1; 
6536   2F95 3B 71 61      mov d, _ship_y ; $ship_y
6537   2F98 DA            push d
6538   2F99 3B 71 61      mov d, _ship_y ; $ship_y
6539   2F9C 2A            mov b, [d]
6540   2F9D             ; START TERMS
6541   2F9D D7            push a
6542   2F9E 11            mov a, b
6543   2F9F FA ED FF      lea d, [bp + -19] ; $x1
6544   2FA2 2A            mov b, [d]
6545   2FA3 56            add b, a
6546   2FA4 E4            pop a
6547   2FA5             ; END TERMS
6548   2FA5 E7            pop d
6549   2FA6 FD 43         mov [d], b
6550   2FA8             ;; ship_x = ship_x + x2; 
6551   2FA8 3B 73 61      mov d, _ship_x ; $ship_x
6552   2FAB DA            push d
6553   2FAC 3B 73 61      mov d, _ship_x ; $ship_x
6554   2FAF 2A            mov b, [d]
6555   2FB0             ; START TERMS
6556   2FB0 D7            push a
6557   2FB1 11            mov a, b
6558   2FB2 FA EB FF      lea d, [bp + -21] ; $x2
6559   2FB5 2A            mov b, [d]
6560   2FB6 56            add b, a
6561   2FB7 E4            pop a
6562   2FB8             ; END TERMS
6563   2FB8 E7            pop d
6564   2FB9 FD 43         mov [d], b
6565   2FBB             ;; z1 = FROM_FIXED00(ship_y); 
6566   2FBB FA F1 FF      lea d, [bp + -15] ; $z1
6567   2FBE DA            push d
6568   2FBF 3B 71 61      mov d, _ship_y ; $ship_y
6569   2FC2 2A            mov b, [d]
6570   2FC3 FD AB         swp b
6571   2FC5 D8            push b
6572   2FC6 07 10 1D      call FROM_FIXED00
6573   2FC9 51 02 00      add sp, 2
6574   2FCC E7            pop d
6575   2FCD FD 43         mov [d], b
6576   2FCF             ;; z2 = FROM_FIXED00(ship_x);	/* ?? cint100 ?? */ 
6577   2FCF FA EF FF      lea d, [bp + -17] ; $z2
6578   2FD2 DA            push d
6579   2FD3 3B 73 61      mov d, _ship_x ; $ship_x
6580   2FD6 2A            mov b, [d]
6581   2FD7 FD AB         swp b
6582   2FD9 D8            push b
6583   2FDA 07 10 1D      call FROM_FIXED00
6584   2FDD 51 02 00      add sp, 2
6585   2FE0 E7            pop d
6586   2FE1 FD 43         mov [d], b
6587   2FE3             ;; if (z1 < 1 || z1 >= 9 || z2 < 1 || z2 >= 9) { 
6588   2FE3             _if101_cond:
6589   2FE3 FA F1 FF      lea d, [bp + -15] ; $z1
6590   2FE6 2A            mov b, [d]
6591   2FE7             ; START RELATIONAL
6592   2FE7 D7            push a
6593   2FE8 11            mov a, b
6594   2FE9 26 01 00      mov b, $1
6595   2FEC B0            cmp a, b
6596   2FED FD 73         slt ; < (signed)
6597   2FEF E4            pop a
6598   2FF0             ; END RELATIONAL
6599   2FF0 D7            push a
6600   2FF1 11            mov a, b
6601   2FF2 FA F1 FF      lea d, [bp + -15] ; $z1
6602   2FF5 2A            mov b, [d]
6603   2FF6             ; START RELATIONAL
6604   2FF6 D7            push a
6605   2FF7 11            mov a, b
6606   2FF8 26 09 00      mov b, $9
6607   2FFB B0            cmp a, b
6608   2FFC FD 80         sge ; >=
6609   2FFE E4            pop a
6610   2FFF             ; END RELATIONAL
6611   2FFF FD A8         sor a, b ; ||
6612   3001 11            mov a, b
6613   3002 FA EF FF      lea d, [bp + -17] ; $z2
6614   3005 2A            mov b, [d]
6615   3006             ; START RELATIONAL
6616   3006 D7            push a
6617   3007 11            mov a, b
6618   3008 26 01 00      mov b, $1
6619   300B B0            cmp a, b
6620   300C FD 73         slt ; < (signed)
6621   300E E4            pop a
6622   300F             ; END RELATIONAL
6623   300F FD A8         sor a, b ; ||
6624   3011 11            mov a, b
6625   3012 FA EF FF      lea d, [bp + -17] ; $z2
6626   3015 2A            mov b, [d]
6627   3016             ; START RELATIONAL
6628   3016 D7            push a
6629   3017 11            mov a, b
6630   3018 26 09 00      mov b, $9
6631   301B B0            cmp a, b
6632   301C FD 80         sge ; >=
6633   301E E4            pop a
6634   301F             ; END RELATIONAL
6635   301F FD A8         sor a, b ; ||
6636   3021 E4            pop a
6637   3022 C0 00 00      cmp b, 0
6638   3025 C6 35 33      je _if101_exit
6639   3028             _if101_true:
6640   3028             ;; outside = 0;		/* Outside galaxy flag */ 
6641   3028 FA E6 FF      lea d, [bp + -26] ; $outside
6642   302B DA            push d
6643   302C 26 00 00      mov b, $0
6644   302F E7            pop d
6645   3030 FD 3E         mov [d], bl
6646   3032             ;; quad_y_old = quad_y; 
6647   3032 FA E5 FF      lea d, [bp + -27] ; $quad_y_old
6648   3035 DA            push d
6649   3036 3B 52 61      mov d, _quad_y ; $quad_y
6650   3039 2A            mov b, [d]
6651   303A E7            pop d
6652   303B FD 3E         mov [d], bl
6653   303D             ;; quad_x_old = quad_x; 
6654   303D FA E4 FF      lea d, [bp + -28] ; $quad_x_old
6655   3040 DA            push d
6656   3041 3B 54 61      mov d, _quad_x ; $quad_x
6657   3044 2A            mov b, [d]
6658   3045 E7            pop d
6659   3046 FD 3E         mov [d], bl
6660   3048             ;; x = (800 * quad_y) + x + (n * x1); 
6661   3048 FA E9 FF      lea d, [bp + -23] ; $x
6662   304B DA            push d
6663   304C 26 20 03      mov b, $320
6664   304F             ; START FACTORS
6665   304F D7            push a
6666   3050 11            mov a, b
6667   3051 3B 52 61      mov d, _quad_y ; $quad_y
6668   3054 2A            mov b, [d]
6669   3055 AC            mul a, b ; *
6670   3056 11            mov a, b
6671   3057 27            mov b, a
6672   3058 E4            pop a
6673   3059             ; END FACTORS
6674   3059             ; START TERMS
6675   3059 D7            push a
6676   305A 11            mov a, b
6677   305B FA E9 FF      lea d, [bp + -23] ; $x
6678   305E 2A            mov b, [d]
6679   305F 56            add b, a
6680   3060 11            mov a, b
6681   3061 FA F9 FF      lea d, [bp + -7] ; $n
6682   3064 2A            mov b, [d]
6683   3065             ; START FACTORS
6684   3065 D7            push a
6685   3066 11            mov a, b
6686   3067 FA ED FF      lea d, [bp + -19] ; $x1
6687   306A 2A            mov b, [d]
6688   306B AC            mul a, b ; *
6689   306C 11            mov a, b
6690   306D 27            mov b, a
6691   306E E4            pop a
6692   306F             ; END FACTORS
6693   306F 56            add b, a
6694   3070 E4            pop a
6695   3071             ; END TERMS
6696   3071 E7            pop d
6697   3072 FD 43         mov [d], b
6698   3074             ;; y = (800 * quad_x) + y + (n * x2); 
6699   3074 FA E7 FF      lea d, [bp + -25] ; $y
6700   3077 DA            push d
6701   3078 26 20 03      mov b, $320
6702   307B             ; START FACTORS
6703   307B D7            push a
6704   307C 11            mov a, b
6705   307D 3B 54 61      mov d, _quad_x ; $quad_x
6706   3080 2A            mov b, [d]
6707   3081 AC            mul a, b ; *
6708   3082 11            mov a, b
6709   3083 27            mov b, a
6710   3084 E4            pop a
6711   3085             ; END FACTORS
6712   3085             ; START TERMS
6713   3085 D7            push a
6714   3086 11            mov a, b
6715   3087 FA E7 FF      lea d, [bp + -25] ; $y
6716   308A 2A            mov b, [d]
6717   308B 56            add b, a
6718   308C 11            mov a, b
6719   308D FA F9 FF      lea d, [bp + -7] ; $n
6720   3090 2A            mov b, [d]
6721   3091             ; START FACTORS
6722   3091 D7            push a
6723   3092 11            mov a, b
6724   3093 FA EB FF      lea d, [bp + -21] ; $x2
6725   3096 2A            mov b, [d]
6726   3097 AC            mul a, b ; *
6727   3098 11            mov a, b
6728   3099 27            mov b, a
6729   309A E4            pop a
6730   309B             ; END FACTORS
6731   309B 56            add b, a
6732   309C E4            pop a
6733   309D             ; END TERMS
6734   309D E7            pop d
6735   309E FD 43         mov [d], b
6736   30A0             ;; quad_y = x / 800;	/* Fixed point to int and divide by 8 */ 
6737   30A0 3B 52 61      mov d, _quad_y ; $quad_y
6738   30A3 DA            push d
6739   30A4 FA E9 FF      lea d, [bp + -23] ; $x
6740   30A7 2A            mov b, [d]
6741   30A8             ; START FACTORS
6742   30A8 D7            push a
6743   30A9 11            mov a, b
6744   30AA 26 20 03      mov b, $320
6745   30AD AE            div a, b
6746   30AE 27            mov b, a
6747   30AF E4            pop a
6748   30B0             ; END FACTORS
6749   30B0 E7            pop d
6750   30B1 FD 43         mov [d], b
6751   30B3             ;; quad_x = y / 800;	/* Ditto */ 
6752   30B3 3B 54 61      mov d, _quad_x ; $quad_x
6753   30B6 DA            push d
6754   30B7 FA E7 FF      lea d, [bp + -25] ; $y
6755   30BA 2A            mov b, [d]
6756   30BB             ; START FACTORS
6757   30BB D7            push a
6758   30BC 11            mov a, b
6759   30BD 26 20 03      mov b, $320
6760   30C0 AE            div a, b
6761   30C1 27            mov b, a
6762   30C2 E4            pop a
6763   30C3             ; END FACTORS
6764   30C3 E7            pop d
6765   30C4 FD 43         mov [d], b
6766   30C6             ;; ship_y = x - (quad_y * 800); 
6767   30C6 3B 71 61      mov d, _ship_y ; $ship_y
6768   30C9 DA            push d
6769   30CA FA E9 FF      lea d, [bp + -23] ; $x
6770   30CD 2A            mov b, [d]
6771   30CE             ; START TERMS
6772   30CE D7            push a
6773   30CF 11            mov a, b
6774   30D0 3B 52 61      mov d, _quad_y ; $quad_y
6775   30D3 2A            mov b, [d]
6776   30D4             ; START FACTORS
6777   30D4 D7            push a
6778   30D5 11            mov a, b
6779   30D6 26 20 03      mov b, $320
6780   30D9 AC            mul a, b ; *
6781   30DA 11            mov a, b
6782   30DB 27            mov b, a
6783   30DC E4            pop a
6784   30DD             ; END FACTORS
6785   30DD 60            sub a, b
6786   30DE 27            mov b, a
6787   30DF E4            pop a
6788   30E0             ; END TERMS
6789   30E0 E7            pop d
6790   30E1 FD 43         mov [d], b
6791   30E3             ;; ship_x = y - (quad_x * 800); 
6792   30E3 3B 73 61      mov d, _ship_x ; $ship_x
6793   30E6 DA            push d
6794   30E7 FA E7 FF      lea d, [bp + -25] ; $y
6795   30EA 2A            mov b, [d]
6796   30EB             ; START TERMS
6797   30EB D7            push a
6798   30EC 11            mov a, b
6799   30ED 3B 54 61      mov d, _quad_x ; $quad_x
6800   30F0 2A            mov b, [d]
6801   30F1             ; START FACTORS
6802   30F1 D7            push a
6803   30F2 11            mov a, b
6804   30F3 26 20 03      mov b, $320
6805   30F6 AC            mul a, b ; *
6806   30F7 11            mov a, b
6807   30F8 27            mov b, a
6808   30F9 E4            pop a
6809   30FA             ; END FACTORS
6810   30FA 60            sub a, b
6811   30FB 27            mov b, a
6812   30FC E4            pop a
6813   30FD             ; END TERMS
6814   30FD E7            pop d
6815   30FE FD 43         mov [d], b
6816   3100             ;; if (ship_y < 100) { 
6817   3100             _if102_cond:
6818   3100 3B 71 61      mov d, _ship_y ; $ship_y
6819   3103 2A            mov b, [d]
6820   3104             ; START RELATIONAL
6821   3104 D7            push a
6822   3105 11            mov a, b
6823   3106 26 64 00      mov b, $64
6824   3109 B0            cmp a, b
6825   310A FD 73         slt ; < (signed)
6826   310C E4            pop a
6827   310D             ; END RELATIONAL
6828   310D C0 00 00      cmp b, 0
6829   3110 C6 3B 31      je _if102_exit
6830   3113             _if102_true:
6831   3113             ;; quad_y = quad_y - 1; 
6832   3113 3B 52 61      mov d, _quad_y ; $quad_y
6833   3116 DA            push d
6834   3117 3B 52 61      mov d, _quad_y ; $quad_y
6835   311A 2A            mov b, [d]
6836   311B             ; START TERMS
6837   311B D7            push a
6838   311C 11            mov a, b
6839   311D 26 01 00      mov b, $1
6840   3120 60            sub a, b
6841   3121 27            mov b, a
6842   3122 E4            pop a
6843   3123             ; END TERMS
6844   3123 E7            pop d
6845   3124 FD 43         mov [d], b
6846   3126             ;; ship_y = ship_y + 800; 
6847   3126 3B 71 61      mov d, _ship_y ; $ship_y
6848   3129 DA            push d
6849   312A 3B 71 61      mov d, _ship_y ; $ship_y
6850   312D 2A            mov b, [d]
6851   312E             ; START TERMS
6852   312E D7            push a
6853   312F 11            mov a, b
6854   3130 26 20 03      mov b, $320
6855   3133 56            add b, a
6856   3134 E4            pop a
6857   3135             ; END TERMS
6858   3135 E7            pop d
6859   3136 FD 43         mov [d], b
6860   3138 0A 3B 31      jmp _if102_exit
6861   313B             _if102_exit:
6862   313B             ;; if (ship_x < 100) { 
6863   313B             _if103_cond:
6864   313B 3B 73 61      mov d, _ship_x ; $ship_x
6865   313E 2A            mov b, [d]
6866   313F             ; START RELATIONAL
6867   313F D7            push a
6868   3140 11            mov a, b
6869   3141 26 64 00      mov b, $64
6870   3144 B0            cmp a, b
6871   3145 FD 73         slt ; < (signed)
6872   3147 E4            pop a
6873   3148             ; END RELATIONAL
6874   3148 C0 00 00      cmp b, 0
6875   314B C6 76 31      je _if103_exit
6876   314E             _if103_true:
6877   314E             ;; quad_x = quad_x - 1; 
6878   314E 3B 54 61      mov d, _quad_x ; $quad_x
6879   3151 DA            push d
6880   3152 3B 54 61      mov d, _quad_x ; $quad_x
6881   3155 2A            mov b, [d]
6882   3156             ; START TERMS
6883   3156 D7            push a
6884   3157 11            mov a, b
6885   3158 26 01 00      mov b, $1
6886   315B 60            sub a, b
6887   315C 27            mov b, a
6888   315D E4            pop a
6889   315E             ; END TERMS
6890   315E E7            pop d
6891   315F FD 43         mov [d], b
6892   3161             ;; ship_x = ship_x + 800; 
6893   3161 3B 73 61      mov d, _ship_x ; $ship_x
6894   3164 DA            push d
6895   3165 3B 73 61      mov d, _ship_x ; $ship_x
6896   3168 2A            mov b, [d]
6897   3169             ; START TERMS
6898   3169 D7            push a
6899   316A 11            mov a, b
6900   316B 26 20 03      mov b, $320
6901   316E 56            add b, a
6902   316F E4            pop a
6903   3170             ; END TERMS
6904   3170 E7            pop d
6905   3171 FD 43         mov [d], b
6906   3173 0A 76 31      jmp _if103_exit
6907   3176             _if103_exit:
6908   3176             ;; if (quad_y < 1) { 
6909   3176             _if104_cond:
6910   3176 3B 52 61      mov d, _quad_y ; $quad_y
6911   3179 2A            mov b, [d]
6912   317A             ; START RELATIONAL
6913   317A D7            push a
6914   317B 11            mov a, b
6915   317C 26 01 00      mov b, $1
6916   317F B0            cmp a, b
6917   3180 FD 73         slt ; < (signed)
6918   3182 E4            pop a
6919   3183             ; END RELATIONAL
6920   3183 C0 00 00      cmp b, 0
6921   3186 C6 AA 31      je _if104_exit
6922   3189             _if104_true:
6923   3189             ;; outside = 1; 
6924   3189 FA E6 FF      lea d, [bp + -26] ; $outside
6925   318C DA            push d
6926   318D 26 01 00      mov b, $1
6927   3190 E7            pop d
6928   3191 FD 3E         mov [d], bl
6929   3193             ;; quad_y = 1; 
6930   3193 3B 52 61      mov d, _quad_y ; $quad_y
6931   3196 DA            push d
6932   3197 26 01 00      mov b, $1
6933   319A E7            pop d
6934   319B FD 43         mov [d], b
6935   319D             ;; ship_y = 100; 
6936   319D 3B 71 61      mov d, _ship_y ; $ship_y
6937   31A0 DA            push d
6938   31A1 26 64 00      mov b, $64
6939   31A4 E7            pop d
6940   31A5 FD 43         mov [d], b
6941   31A7 0A AA 31      jmp _if104_exit
6942   31AA             _if104_exit:
6943   31AA             ;; if (quad_y > 8) { 
6944   31AA             _if105_cond:
6945   31AA 3B 52 61      mov d, _quad_y ; $quad_y
6946   31AD 2A            mov b, [d]
6947   31AE             ; START RELATIONAL
6948   31AE D7            push a
6949   31AF 11            mov a, b
6950   31B0 26 08 00      mov b, $8
6951   31B3 B0            cmp a, b
6952   31B4 FD 7F         sgt ; >
6953   31B6 E4            pop a
6954   31B7             ; END RELATIONAL
6955   31B7 C0 00 00      cmp b, 0
6956   31BA C6 DE 31      je _if105_exit
6957   31BD             _if105_true:
6958   31BD             ;; outside = 1; 
6959   31BD FA E6 FF      lea d, [bp + -26] ; $outside
6960   31C0 DA            push d
6961   31C1 26 01 00      mov b, $1
6962   31C4 E7            pop d
6963   31C5 FD 3E         mov [d], bl
6964   31C7             ;; quad_y = 8; 
6965   31C7 3B 52 61      mov d, _quad_y ; $quad_y
6966   31CA DA            push d
6967   31CB 26 08 00      mov b, $8
6968   31CE E7            pop d
6969   31CF FD 43         mov [d], b
6970   31D1             ;; ship_y = 800; 
6971   31D1 3B 71 61      mov d, _ship_y ; $ship_y
6972   31D4 DA            push d
6973   31D5 26 20 03      mov b, $320
6974   31D8 E7            pop d
6975   31D9 FD 43         mov [d], b
6976   31DB 0A DE 31      jmp _if105_exit
6977   31DE             _if105_exit:
6978   31DE             ;; if (quad_x < 1) { 
6979   31DE             _if106_cond:
6980   31DE 3B 54 61      mov d, _quad_x ; $quad_x
6981   31E1 2A            mov b, [d]
6982   31E2             ; START RELATIONAL
6983   31E2 D7            push a
6984   31E3 11            mov a, b
6985   31E4 26 01 00      mov b, $1
6986   31E7 B0            cmp a, b
6987   31E8 FD 73         slt ; < (signed)
6988   31EA E4            pop a
6989   31EB             ; END RELATIONAL
6990   31EB C0 00 00      cmp b, 0
6991   31EE C6 12 32      je _if106_exit
6992   31F1             _if106_true:
6993   31F1             ;; outside = 1; 
6994   31F1 FA E6 FF      lea d, [bp + -26] ; $outside
6995   31F4 DA            push d
6996   31F5 26 01 00      mov b, $1
6997   31F8 E7            pop d
6998   31F9 FD 3E         mov [d], bl
6999   31FB             ;; quad_x = 1; 
7000   31FB 3B 54 61      mov d, _quad_x ; $quad_x
7001   31FE DA            push d
7002   31FF 26 01 00      mov b, $1
7003   3202 E7            pop d
7004   3203 FD 43         mov [d], b
7005   3205             ;; ship_x = 100; 
7006   3205 3B 73 61      mov d, _ship_x ; $ship_x
7007   3208 DA            push d
7008   3209 26 64 00      mov b, $64
7009   320C E7            pop d
7010   320D FD 43         mov [d], b
7011   320F 0A 12 32      jmp _if106_exit
7012   3212             _if106_exit:
7013   3212             ;; if (quad_x > 8) { 
7014   3212             _if107_cond:
7015   3212 3B 54 61      mov d, _quad_x ; $quad_x
7016   3215 2A            mov b, [d]
7017   3216             ; START RELATIONAL
7018   3216 D7            push a
7019   3217 11            mov a, b
7020   3218 26 08 00      mov b, $8
7021   321B B0            cmp a, b
7022   321C FD 7F         sgt ; >
7023   321E E4            pop a
7024   321F             ; END RELATIONAL
7025   321F C0 00 00      cmp b, 0
7026   3222 C6 46 32      je _if107_exit
7027   3225             _if107_true:
7028   3225             ;; outside = 1; 
7029   3225 FA E6 FF      lea d, [bp + -26] ; $outside
7030   3228 DA            push d
7031   3229 26 01 00      mov b, $1
7032   322C E7            pop d
7033   322D FD 3E         mov [d], bl
7034   322F             ;; quad_x = 8; 
7035   322F 3B 54 61      mov d, _quad_x ; $quad_x
7036   3232 DA            push d
7037   3233 26 08 00      mov b, $8
7038   3236 E7            pop d
7039   3237 FD 43         mov [d], b
7040   3239             ;; ship_x = 800; 
7041   3239 3B 73 61      mov d, _ship_x ; $ship_x
7042   323C DA            push d
7043   323D 26 20 03      mov b, $320
7044   3240 E7            pop d
7045   3241 FD 43         mov [d], b
7046   3243 0A 46 32      jmp _if107_exit
7047   3246             _if107_exit:
7048   3246             ;; if (outside == 1) { 
7049   3246             _if108_cond:
7050   3246 FA E6 FF      lea d, [bp + -26] ; $outside
7051   3249 32            mov bl, [d]
7052   324A A7 00         mov bh, 0
7053   324C             ; START RELATIONAL
7054   324C D7            push a
7055   324D 11            mov a, b
7056   324E 26 01 00      mov b, $1
7057   3251 B0            cmp a, b
7058   3252 FD 71         seq ; ==
7059   3254 E4            pop a
7060   3255             ; END RELATIONAL
7061   3255 C0 00 00      cmp b, 0
7062   3258 C6 98 32      je _if108_exit
7063   325B             _if108_true:
7064   325B             ;; printf("LT. Uhura reports:\n Message from Starfleet Command:\n\n Permission to attempt crossing of galactic perimeter\n is hereby *denied*. Shut down your engines.\n\n Chief Engineer Scott reports:\n Warp Engines shut down at sector %d, %d of quadrant %d, %d.\n\n", FROM_FIXED00(ship_y), 
7065   325B 3B 54 61      mov d, _quad_x ; $quad_x
7066   325E 2A            mov b, [d]
7067   325F FD AB         swp b
7068   3261 D8            push b
7069   3262 3B 52 61      mov d, _quad_y ; $quad_y
7070   3265 2A            mov b, [d]
7071   3266 FD AB         swp b
7072   3268 D8            push b
7073   3269 3B 73 61      mov d, _ship_x ; $ship_x
7074   326C 2A            mov b, [d]
7075   326D FD AB         swp b
7076   326F D8            push b
7077   3270 07 10 1D      call FROM_FIXED00
7078   3273 51 02 00      add sp, 2
7079   3276 FD AB         swp b
7080   3278 D8            push b
7081   3279 3B 71 61      mov d, _ship_y ; $ship_y
7082   327C 2A            mov b, [d]
7083   327D FD AB         swp b
7084   327F D8            push b
7085   3280 07 10 1D      call FROM_FIXED00
7086   3283 51 02 00      add sp, 2
7087   3286 FD AB         swp b
7088   3288 D8            push b
7089   3289 26 49 69      mov b, _s78 ; "LT. Uhura reports:\n Message from Starfleet Command:\n\n Permission to attempt crossing of galactic perimeter\n is hereby *denied*. Shut down your engines.\n\n Chief Engineer Scott reports:\n Warp Engines shut down at sector %d, %d of quadrant %d, %d.\n\n"
7090   328C FD AB         swp b
7091   328E D8            push b
7092   328F 07 D6 05      call printf
7093   3292 51 0A 00      add sp, 10
7094   3295 0A 98 32      jmp _if108_exit
7095   3298             _if108_exit:
7096   3298             ;; maneuver_energy(n); 
7097   3298 FA F9 FF      lea d, [bp + -7] ; $n
7098   329B 2A            mov b, [d]
7099   329C FD AB         swp b
7100   329E D8            push b
7101   329F 07 87 34      call maneuver_energy
7102   32A2 51 02 00      add sp, 2
7103   32A5             ;; if (FROM_FIXED(stardate) > time_start + time_up) 
7104   32A5             _if109_cond:
7105   32A5 3B 75 61      mov d, _stardate ; $stardate
7106   32A8 2A            mov b, [d]
7107   32A9 FD AB         swp b
7108   32AB D8            push b
7109   32AC 07 ED 1C      call FROM_FIXED
7110   32AF 51 02 00      add sp, 2
7111   32B2             ; START RELATIONAL
7112   32B2 D7            push a
7113   32B3 11            mov a, b
7114   32B4 3B 59 61      mov d, _time_start ; $time_start
7115   32B7 2A            mov b, [d]
7116   32B8             ; START TERMS
7117   32B8 D7            push a
7118   32B9 11            mov a, b
7119   32BA 3B 5B 61      mov d, _time_up ; $time_up
7120   32BD 2A            mov b, [d]
7121   32BE 56            add b, a
7122   32BF E4            pop a
7123   32C0             ; END TERMS
7124   32C0 B0            cmp a, b
7125   32C1 FD 7F         sgt ; >
7126   32C3 E4            pop a
7127   32C4             ; END RELATIONAL
7128   32C4 C0 00 00      cmp b, 0
7129   32C7 C6 D0 32      je _if109_exit
7130   32CA             _if109_true:
7131   32CA             ;; end_of_time(); 
7132   32CA 07 EA 54      call end_of_time
7133   32CD 0A D0 32      jmp _if109_exit
7134   32D0             _if109_exit:
7135   32D0             ;; if (quad_y != quad_y_old || quad_x != quad_x_old) { 
7136   32D0             _if110_cond:
7137   32D0 3B 52 61      mov d, _quad_y ; $quad_y
7138   32D3 2A            mov b, [d]
7139   32D4             ; START RELATIONAL
7140   32D4 D7            push a
7141   32D5 11            mov a, b
7142   32D6 FA E5 FF      lea d, [bp + -27] ; $quad_y_old
7143   32D9 32            mov bl, [d]
7144   32DA A7 00         mov bh, 0
7145   32DC B0            cmp a, b
7146   32DD FD 72         sneq ; !=
7147   32DF E4            pop a
7148   32E0             ; END RELATIONAL
7149   32E0 D7            push a
7150   32E1 11            mov a, b
7151   32E2 3B 54 61      mov d, _quad_x ; $quad_x
7152   32E5 2A            mov b, [d]
7153   32E6             ; START RELATIONAL
7154   32E6 D7            push a
7155   32E7 11            mov a, b
7156   32E8 FA E4 FF      lea d, [bp + -28] ; $quad_x_old
7157   32EB 32            mov bl, [d]
7158   32EC A7 00         mov bh, 0
7159   32EE B0            cmp a, b
7160   32EF FD 72         sneq ; !=
7161   32F1 E4            pop a
7162   32F2             ; END RELATIONAL
7163   32F2 FD A8         sor a, b ; ||
7164   32F4 E4            pop a
7165   32F5 C0 00 00      cmp b, 0
7166   32F8 C6 1C 33      je _if110_exit
7167   32FB             _if110_true:
7168   32FB             ;; stardate = stardate + TO_FIXED(1); 
7169   32FB 3B 75 61      mov d, _stardate ; $stardate
7170   32FE DA            push d
7171   32FF 3B 75 61      mov d, _stardate ; $stardate
7172   3302 2A            mov b, [d]
7173   3303             ; START TERMS
7174   3303 D7            push a
7175   3304 11            mov a, b
7176   3305 26 01 00      mov b, $1
7177   3308 FD AB         swp b
7178   330A D8            push b
7179   330B 07 DB 1C      call TO_FIXED
7180   330E 51 02 00      add sp, 2
7181   3311 56            add b, a
7182   3312 E4            pop a
7183   3313             ; END TERMS
7184   3313 E7            pop d
7185   3314 FD 43         mov [d], b
7186   3316             ;; new_quadrant(); 
7187   3316 07 50 28      call new_quadrant
7188   3319 0A 1C 33      jmp _if110_exit
7189   331C             _if110_exit:
7190   331C             ;; complete_maneuver(warp, n); 
7191   331C FA F9 FF      lea d, [bp + -7] ; $n
7192   331F 2A            mov b, [d]
7193   3320 FD AB         swp b
7194   3322 D8            push b
7195   3323 FA FB FF      lea d, [bp + -5] ; $warp
7196   3326 2A            mov b, [d]
7197   3327 FD AB         swp b
7198   3329 D8            push b
7199   332A 07 E8 33      call complete_maneuver
7200   332D 51 04 00      add sp, 4
7201   3330             ;; return; 
7202   3330 F9            leave
7203   3331 09            ret
7204   3332 0A 35 33      jmp _if101_exit
7205   3335             _if101_exit:
7206   3335             ;; if (quad[z1+-1][z2+-1] !=  		0      ) {	/* Sector not empty */ 
7207   3335             _if111_cond:
7208   3335 3B 77 61      mov d, _quad_data ; $quad
7209   3338 D7            push a
7210   3339 DA            push d
7211   333A FA F1 FF      lea d, [bp + -15] ; $z1
7212   333D 2A            mov b, [d]
7213   333E             ; START TERMS
7214   333E D7            push a
7215   333F 11            mov a, b
7216   3340 26 FF FF      mov b, $ffff
7217   3343 56            add b, a
7218   3344 E4            pop a
7219   3345             ; END TERMS
7220   3345 E7            pop d
7221   3346 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
7222   334A DA            push d
7223   334B FA EF FF      lea d, [bp + -17] ; $z2
7224   334E 2A            mov b, [d]
7225   334F             ; START TERMS
7226   334F D7            push a
7227   3350 11            mov a, b
7228   3351 26 FF FF      mov b, $ffff
7229   3354 56            add b, a
7230   3355 E4            pop a
7231   3356             ; END TERMS
7232   3356 E7            pop d
7233   3357 5A            add d, b
7234   3358 E4            pop a
7235   3359 32            mov bl, [d]
7236   335A A7 00         mov bh, 0
7237   335C             ; START RELATIONAL
7238   335C D7            push a
7239   335D 11            mov a, b
7240   335E 26 00 00      mov b, $0
7241   3361 B0            cmp a, b
7242   3362 FD 72         sneq ; !=
7243   3364 E4            pop a
7244   3365             ; END RELATIONAL
7245   3365 C0 00 00      cmp b, 0
7246   3368 C6 C2 33      je _if111_exit
7247   336B             _if111_true:
7248   336B             ;; ship_y = ship_y - x1; 
7249   336B 3B 71 61      mov d, _ship_y ; $ship_y
7250   336E DA            push d
7251   336F 3B 71 61      mov d, _ship_y ; $ship_y
7252   3372 2A            mov b, [d]
7253   3373             ; START TERMS
7254   3373 D7            push a
7255   3374 11            mov a, b
7256   3375 FA ED FF      lea d, [bp + -19] ; $x1
7257   3378 2A            mov b, [d]
7258   3379 60            sub a, b
7259   337A 27            mov b, a
7260   337B E4            pop a
7261   337C             ; END TERMS
7262   337C E7            pop d
7263   337D FD 43         mov [d], b
7264   337F             ;; ship_x = ship_x - x2; 
7265   337F 3B 73 61      mov d, _ship_x ; $ship_x
7266   3382 DA            push d
7267   3383 3B 73 61      mov d, _ship_x ; $ship_x
7268   3386 2A            mov b, [d]
7269   3387             ; START TERMS
7270   3387 D7            push a
7271   3388 11            mov a, b
7272   3389 FA EB FF      lea d, [bp + -21] ; $x2
7273   338C 2A            mov b, [d]
7274   338D 60            sub a, b
7275   338E 27            mov b, a
7276   338F E4            pop a
7277   3390             ; END TERMS
7278   3390 E7            pop d
7279   3391 FD 43         mov [d], b
7280   3393             ;; printf("Warp Engines shut down at sector %d, %d due to bad navigation.\n\n", z1, z2); 
7281   3393 FA EF FF      lea d, [bp + -17] ; $z2
7282   3396 2A            mov b, [d]
7283   3397 FD AB         swp b
7284   3399 D8            push b
7285   339A FA F1 FF      lea d, [bp + -15] ; $z1
7286   339D 2A            mov b, [d]
7287   339E FD AB         swp b
7288   33A0 D8            push b
7289   33A1 26 40 6A      mov b, _s79 ; "Warp Engines shut down at sector %d, %d due to bad navigation.\n\n"
7290   33A4 FD AB         swp b
7291   33A6 D8            push b
7292   33A7 07 D6 05      call printf
7293   33AA 51 06 00      add sp, 6
7294   33AD             ;; i = n + 1; 
7295   33AD FA FF FF      lea d, [bp + -1] ; $i
7296   33B0 DA            push d
7297   33B1 FA F9 FF      lea d, [bp + -7] ; $n
7298   33B4 2A            mov b, [d]
7299   33B5             ; START TERMS
7300   33B5 D7            push a
7301   33B6 11            mov a, b
7302   33B7 26 01 00      mov b, $1
7303   33BA 56            add b, a
7304   33BB E4            pop a
7305   33BC             ; END TERMS
7306   33BC E7            pop d
7307   33BD FD 43         mov [d], b
7308   33BF 0A C2 33      jmp _if111_exit
7309   33C2             _if111_exit:
7310   33C2             _for100_update:
7311   33C2 FA FF FF      lea d, [bp + -1] ; $i
7312   33C5 2A            mov b, [d]
7313   33C6 D8            push b
7314   33C7 FD 77         inc b
7315   33C9 FA FF FF      lea d, [bp + -1] ; $i
7316   33CC FD 43         mov [d], b
7317   33CE E5            pop b
7318   33CF 0A 81 2F      jmp _for100_cond
7319   33D2             _for100_exit:
7320   33D2             ;; complete_maneuver(warp, n); 
7321   33D2 FA F9 FF      lea d, [bp + -7] ; $n
7322   33D5 2A            mov b, [d]
7323   33D6 FD AB         swp b
7324   33D8 D8            push b
7325   33D9 FA FB FF      lea d, [bp + -5] ; $warp
7326   33DC 2A            mov b, [d]
7327   33DD FD AB         swp b
7328   33DF D8            push b
7329   33E0 07 E8 33      call complete_maneuver
7330   33E3 51 04 00      add sp, 4
7331   33E6 F9            leave
7332   33E7 09            ret
7333   33E8             
7334   33E8             complete_maneuver:
7335   33E8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7336   33EB             ; $time_used 
7337   33EB 52 02 00      sub sp, 2
7338   33EE             ;; place_ship(); 
7339   33EE 07 0C 28      call place_ship
7340   33F1             ;; maneuver_energy(n); 
7341   33F1 FA 07 00      lea d, [bp + 7] ; $n
7342   33F4 2A            mov b, [d]
7343   33F5 FD AB         swp b
7344   33F7 D8            push b
7345   33F8 07 87 34      call maneuver_energy
7346   33FB 51 02 00      add sp, 2
7347   33FE             ;; time_used = TO_FIXED(1); 
7348   33FE FA FF FF      lea d, [bp + -1] ; $time_used
7349   3401 DA            push d
7350   3402 26 01 00      mov b, $1
7351   3405 FD AB         swp b
7352   3407 D8            push b
7353   3408 07 DB 1C      call TO_FIXED
7354   340B 51 02 00      add sp, 2
7355   340E E7            pop d
7356   340F FD 43         mov [d], b
7357   3411             ;; if (warp < 100) 
7358   3411             _if112_cond:
7359   3411 FA 05 00      lea d, [bp + 5] ; $warp
7360   3414 2A            mov b, [d]
7361   3415             ; START RELATIONAL
7362   3415 D7            push a
7363   3416 11            mov a, b
7364   3417 26 64 00      mov b, $64
7365   341A B0            cmp a, b
7366   341B FD 75         slu ; < (unsigned)
7367   341D E4            pop a
7368   341E             ; END RELATIONAL
7369   341E C0 00 00      cmp b, 0
7370   3421 C6 44 34      je _if112_exit
7371   3424             _if112_true:
7372   3424             ;; time_used = TO_FIXED(FROM_FIXED00(warp)); 
7373   3424 FA FF FF      lea d, [bp + -1] ; $time_used
7374   3427 DA            push d
7375   3428 FA 05 00      lea d, [bp + 5] ; $warp
7376   342B 2A            mov b, [d]
7377   342C FD AB         swp b
7378   342E D8            push b
7379   342F 07 10 1D      call FROM_FIXED00
7380   3432 51 02 00      add sp, 2
7381   3435 FD AB         swp b
7382   3437 D8            push b
7383   3438 07 DB 1C      call TO_FIXED
7384   343B 51 02 00      add sp, 2
7385   343E E7            pop d
7386   343F FD 43         mov [d], b
7387   3441 0A 44 34      jmp _if112_exit
7388   3444             _if112_exit:
7389   3444             ;; stardate = stardate + time_used; 
7390   3444 3B 75 61      mov d, _stardate ; $stardate
7391   3447 DA            push d
7392   3448 3B 75 61      mov d, _stardate ; $stardate
7393   344B 2A            mov b, [d]
7394   344C             ; START TERMS
7395   344C D7            push a
7396   344D 11            mov a, b
7397   344E FA FF FF      lea d, [bp + -1] ; $time_used
7398   3451 2A            mov b, [d]
7399   3452 56            add b, a
7400   3453 E4            pop a
7401   3454             ; END TERMS
7402   3454 E7            pop d
7403   3455 FD 43         mov [d], b
7404   3457             ;; if (FROM_FIXED(stardate) > time_start + time_up) 
7405   3457             _if113_cond:
7406   3457 3B 75 61      mov d, _stardate ; $stardate
7407   345A 2A            mov b, [d]
7408   345B FD AB         swp b
7409   345D D8            push b
7410   345E 07 ED 1C      call FROM_FIXED
7411   3461 51 02 00      add sp, 2
7412   3464             ; START RELATIONAL
7413   3464 D7            push a
7414   3465 11            mov a, b
7415   3466 3B 59 61      mov d, _time_start ; $time_start
7416   3469 2A            mov b, [d]
7417   346A             ; START TERMS
7418   346A D7            push a
7419   346B 11            mov a, b
7420   346C 3B 5B 61      mov d, _time_up ; $time_up
7421   346F 2A            mov b, [d]
7422   3470 56            add b, a
7423   3471 E4            pop a
7424   3472             ; END TERMS
7425   3472 B0            cmp a, b
7426   3473 FD 7F         sgt ; >
7427   3475 E4            pop a
7428   3476             ; END RELATIONAL
7429   3476 C0 00 00      cmp b, 0
7430   3479 C6 82 34      je _if113_exit
7431   347C             _if113_true:
7432   347C             ;; end_of_time(); 
7433   347C 07 EA 54      call end_of_time
7434   347F 0A 82 34      jmp _if113_exit
7435   3482             _if113_exit:
7436   3482             ;; short_range_scan(); 
7437   3482 07 06 35      call short_range_scan
7438   3485 F9            leave
7439   3486 09            ret
7440   3487             
7441   3487             maneuver_energy:
7442   3487 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7443   348A             ;; energy = energy - n + 10; 
7444   348A 3B 9B 60      mov d, _energy ; $energy
7445   348D DA            push d
7446   348E 3B 9B 60      mov d, _energy ; $energy
7447   3491 2A            mov b, [d]
7448   3492             ; START TERMS
7449   3492 D7            push a
7450   3493 11            mov a, b
7451   3494 FA 05 00      lea d, [bp + 5] ; $n
7452   3497 2A            mov b, [d]
7453   3498 60            sub a, b
7454   3499 27            mov b, a
7455   349A 11            mov a, b
7456   349B 26 0A 00      mov b, $a
7457   349E 56            add b, a
7458   349F E4            pop a
7459   34A0             ; END TERMS
7460   34A0 E7            pop d
7461   34A1 FD 43         mov [d], b
7462   34A3             ;; if (energy >= 0) 
7463   34A3             _if114_cond:
7464   34A3 3B 9B 60      mov d, _energy ; $energy
7465   34A6 2A            mov b, [d]
7466   34A7             ; START RELATIONAL
7467   34A7 D7            push a
7468   34A8 11            mov a, b
7469   34A9 26 00 00      mov b, $0
7470   34AC B0            cmp a, b
7471   34AD FD 80         sge ; >=
7472   34AF E4            pop a
7473   34B0             ; END RELATIONAL
7474   34B0 C0 00 00      cmp b, 0
7475   34B3 C6 BB 34      je _if114_exit
7476   34B6             _if114_true:
7477   34B6             ;; return; 
7478   34B6 F9            leave
7479   34B7 09            ret
7480   34B8 0A BB 34      jmp _if114_exit
7481   34BB             _if114_exit:
7482   34BB             ;; puts("Shield Control supplies energy to complete maneuver.\n"); 
7483   34BB 26 81 6A      mov b, _s80 ; "Shield Control supplies energy to complete maneuver.\n"
7484   34BE FD AB         swp b
7485   34C0 D8            push b
7486   34C1 07 36 13      call puts
7487   34C4 51 02 00      add sp, 2
7488   34C7             ;; shield = shield + energy; 
7489   34C7 3B 56 61      mov d, _shield ; $shield
7490   34CA DA            push d
7491   34CB 3B 56 61      mov d, _shield ; $shield
7492   34CE 2A            mov b, [d]
7493   34CF             ; START TERMS
7494   34CF D7            push a
7495   34D0 11            mov a, b
7496   34D1 3B 9B 60      mov d, _energy ; $energy
7497   34D4 2A            mov b, [d]
7498   34D5 56            add b, a
7499   34D6 E4            pop a
7500   34D7             ; END TERMS
7501   34D7 E7            pop d
7502   34D8 FD 43         mov [d], b
7503   34DA             ;; energy = 0; 
7504   34DA 3B 9B 60      mov d, _energy ; $energy
7505   34DD DA            push d
7506   34DE 26 00 00      mov b, $0
7507   34E1 E7            pop d
7508   34E2 FD 43         mov [d], b
7509   34E4             ;; if (shield <= 0) 
7510   34E4             _if115_cond:
7511   34E4 3B 56 61      mov d, _shield ; $shield
7512   34E7 2A            mov b, [d]
7513   34E8             ; START RELATIONAL
7514   34E8 D7            push a
7515   34E9 11            mov a, b
7516   34EA 26 00 00      mov b, $0
7517   34ED B0            cmp a, b
7518   34EE FD 73         slt ; <= (signed)
7519   34F0 E4            pop a
7520   34F1             ; END RELATIONAL
7521   34F1 C0 00 00      cmp b, 0
7522   34F4 C6 04 35      je _if115_exit
7523   34F7             _if115_true:
7524   34F7             ;; shield = 0; 
7525   34F7 3B 56 61      mov d, _shield ; $shield
7526   34FA DA            push d
7527   34FB 26 00 00      mov b, $0
7528   34FE E7            pop d
7529   34FF FD 43         mov [d], b
7530   3501 0A 04 35      jmp _if115_exit
7531   3504             _if115_exit:
7532   3504 F9            leave
7533   3505 09            ret
7534   3506             
7535   3506             short_range_scan:
7536   3506 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7537   3509             ; $i 
7538   3509             ; $j 
7539   3509             ; $sC 
7540   3509 10 4F 63      mov a, _sC_data
7541   350C 45 FB FF      mov [bp + -5], a
7542   350F 52 06 00      sub sp, 6
7543   3512             ;; if (energy < energy0 / 10) 
7544   3512             _if116_cond:
7545   3512 3B 9B 60      mov d, _energy ; $energy
7546   3515 2A            mov b, [d]
7547   3516             ; START RELATIONAL
7548   3516 D7            push a
7549   3517 11            mov a, b
7550   3518 3B 9D 60      mov d, _energy0 ; $energy0
7551   351B 2A            mov b, [d]
7552   351C             ; START FACTORS
7553   351C D7            push a
7554   351D 11            mov a, b
7555   351E 26 0A 00      mov b, $a
7556   3521 AE            div a, b
7557   3522 27            mov b, a
7558   3523 E4            pop a
7559   3524             ; END FACTORS
7560   3524 B0            cmp a, b
7561   3525 FD 73         slt ; < (signed)
7562   3527 E4            pop a
7563   3528             ; END RELATIONAL
7564   3528 C0 00 00      cmp b, 0
7565   352B C6 3B 35      je _if116_exit
7566   352E             _if116_true:
7567   352E             ;; sC = "YELLOW"; 
7568   352E FA FB FF      lea d, [bp + -5] ; $sC
7569   3531 DA            push d
7570   3532 26 B7 6A      mov b, _s81 ; "YELLOW"
7571   3535 E7            pop d
7572   3536 FD 43         mov [d], b
7573   3538 0A 3B 35      jmp _if116_exit
7574   353B             _if116_exit:
7575   353B             ;; if (klingons > 0) 
7576   353B             _if117_cond:
7577   353B 3B 4D 61      mov d, _klingons ; $klingons
7578   353E 32            mov bl, [d]
7579   353F A7 00         mov bh, 0
7580   3541             ; START RELATIONAL
7581   3541 D7            push a
7582   3542 11            mov a, b
7583   3543 26 00 00      mov b, $0
7584   3546 B0            cmp a, b
7585   3547 FD 81         sgu ; > (unsigned)
7586   3549 E4            pop a
7587   354A             ; END RELATIONAL
7588   354A C0 00 00      cmp b, 0
7589   354D C6 5D 35      je _if117_exit
7590   3550             _if117_true:
7591   3550             ;; sC = "*RED*"; 
7592   3550 FA FB FF      lea d, [bp + -5] ; $sC
7593   3553 DA            push d
7594   3554 26 BE 6A      mov b, _s82 ; "*RED*"
7595   3557 E7            pop d
7596   3558 FD 43         mov [d], b
7597   355A 0A 5D 35      jmp _if117_exit
7598   355D             _if117_exit:
7599   355D             ;; docked = 0; 
7600   355D 3B 9A 60      mov d, _docked ; $docked
7601   3560 DA            push d
7602   3561 26 00 00      mov b, $0
7603   3564 E7            pop d
7604   3565 FD 3E         mov [d], bl
7605   3567             ;; for (i = (int) (FROM_FIXED00(ship_y) - 1); i <= (int) (FROM_FIXED00(ship_y) + 1); i++) 
7606   3567             _for118_init:
7607   3567 FA FF FF      lea d, [bp + -1] ; $i
7608   356A DA            push d
7609   356B 3B 71 61      mov d, _ship_y ; $ship_y
7610   356E 2A            mov b, [d]
7611   356F FD AB         swp b
7612   3571 D8            push b
7613   3572 07 10 1D      call FROM_FIXED00
7614   3575 51 02 00      add sp, 2
7615   3578             ; START TERMS
7616   3578 D7            push a
7617   3579 11            mov a, b
7618   357A 26 01 00      mov b, $1
7619   357D 60            sub a, b
7620   357E 27            mov b, a
7621   357F E4            pop a
7622   3580             ; END TERMS
7623   3580 E7            pop d
7624   3581 FD 43         mov [d], b
7625   3583             _for118_cond:
7626   3583 FA FF FF      lea d, [bp + -1] ; $i
7627   3586 2A            mov b, [d]
7628   3587             ; START RELATIONAL
7629   3587 D7            push a
7630   3588 11            mov a, b
7631   3589 3B 71 61      mov d, _ship_y ; $ship_y
7632   358C 2A            mov b, [d]
7633   358D FD AB         swp b
7634   358F D8            push b
7635   3590 07 10 1D      call FROM_FIXED00
7636   3593 51 02 00      add sp, 2
7637   3596             ; START TERMS
7638   3596 D7            push a
7639   3597 11            mov a, b
7640   3598 26 01 00      mov b, $1
7641   359B 56            add b, a
7642   359C E4            pop a
7643   359D             ; END TERMS
7644   359D B0            cmp a, b
7645   359E FD 73         slt ; <= (signed)
7646   35A0 E4            pop a
7647   35A1             ; END RELATIONAL
7648   35A1 C0 00 00      cmp b, 0
7649   35A4 C6 CA 36      je _for118_exit
7650   35A7             _for118_block:
7651   35A7             ;; for (j = (int) (FROM_FIXED00(ship_x) - 1); j <= (int) (FROM_FIXED00(ship_x) + 1); j++) 
7652   35A7             _for119_init:
7653   35A7 FA FD FF      lea d, [bp + -3] ; $j
7654   35AA DA            push d
7655   35AB 3B 73 61      mov d, _ship_x ; $ship_x
7656   35AE 2A            mov b, [d]
7657   35AF FD AB         swp b
7658   35B1 D8            push b
7659   35B2 07 10 1D      call FROM_FIXED00
7660   35B5 51 02 00      add sp, 2
7661   35B8             ; START TERMS
7662   35B8 D7            push a
7663   35B9 11            mov a, b
7664   35BA 26 01 00      mov b, $1
7665   35BD 60            sub a, b
7666   35BE 27            mov b, a
7667   35BF E4            pop a
7668   35C0             ; END TERMS
7669   35C0 E7            pop d
7670   35C1 FD 43         mov [d], b
7671   35C3             _for119_cond:
7672   35C3 FA FD FF      lea d, [bp + -3] ; $j
7673   35C6 2A            mov b, [d]
7674   35C7             ; START RELATIONAL
7675   35C7 D7            push a
7676   35C8 11            mov a, b
7677   35C9 3B 73 61      mov d, _ship_x ; $ship_x
7678   35CC 2A            mov b, [d]
7679   35CD FD AB         swp b
7680   35CF D8            push b
7681   35D0 07 10 1D      call FROM_FIXED00
7682   35D3 51 02 00      add sp, 2
7683   35D6             ; START TERMS
7684   35D6 D7            push a
7685   35D7 11            mov a, b
7686   35D8 26 01 00      mov b, $1
7687   35DB 56            add b, a
7688   35DC E4            pop a
7689   35DD             ; END TERMS
7690   35DD B0            cmp a, b
7691   35DE FD 73         slt ; <= (signed)
7692   35E0 E4            pop a
7693   35E1             ; END RELATIONAL
7694   35E1 C0 00 00      cmp b, 0
7695   35E4 C6 BA 36      je _for119_exit
7696   35E7             _for119_block:
7697   35E7             ;; if (i >= 1 && i <= 8 && j >= 1 && j <= 8) { 
7698   35E7             _if120_cond:
7699   35E7 FA FF FF      lea d, [bp + -1] ; $i
7700   35EA 2A            mov b, [d]
7701   35EB             ; START RELATIONAL
7702   35EB D7            push a
7703   35EC 11            mov a, b
7704   35ED 26 01 00      mov b, $1
7705   35F0 B0            cmp a, b
7706   35F1 FD 80         sge ; >=
7707   35F3 E4            pop a
7708   35F4             ; END RELATIONAL
7709   35F4 D7            push a
7710   35F5 11            mov a, b
7711   35F6 FA FF FF      lea d, [bp + -1] ; $i
7712   35F9 2A            mov b, [d]
7713   35FA             ; START RELATIONAL
7714   35FA D7            push a
7715   35FB 11            mov a, b
7716   35FC 26 08 00      mov b, $8
7717   35FF B0            cmp a, b
7718   3600 FD 73         slt ; <= (signed)
7719   3602 E4            pop a
7720   3603             ; END RELATIONAL
7721   3603 FD A7         sand a, b
7722   3605 11            mov a, b
7723   3606 FA FD FF      lea d, [bp + -3] ; $j
7724   3609 2A            mov b, [d]
7725   360A             ; START RELATIONAL
7726   360A D7            push a
7727   360B 11            mov a, b
7728   360C 26 01 00      mov b, $1
7729   360F B0            cmp a, b
7730   3610 FD 80         sge ; >=
7731   3612 E4            pop a
7732   3613             ; END RELATIONAL
7733   3613 FD A7         sand a, b
7734   3615 11            mov a, b
7735   3616 FA FD FF      lea d, [bp + -3] ; $j
7736   3619 2A            mov b, [d]
7737   361A             ; START RELATIONAL
7738   361A D7            push a
7739   361B 11            mov a, b
7740   361C 26 08 00      mov b, $8
7741   361F B0            cmp a, b
7742   3620 FD 73         slt ; <= (signed)
7743   3622 E4            pop a
7744   3623             ; END RELATIONAL
7745   3623 FD A7         sand a, b
7746   3625 E4            pop a
7747   3626 C0 00 00      cmp b, 0
7748   3629 C6 AA 36      je _if120_exit
7749   362C             _if120_true:
7750   362C             ;; if (quad[i+-1][j+-1] ==  		2     ) { 
7751   362C             _if121_cond:
7752   362C 3B 77 61      mov d, _quad_data ; $quad
7753   362F D7            push a
7754   3630 DA            push d
7755   3631 FA FF FF      lea d, [bp + -1] ; $i
7756   3634 2A            mov b, [d]
7757   3635             ; START TERMS
7758   3635 D7            push a
7759   3636 11            mov a, b
7760   3637 26 FF FF      mov b, $ffff
7761   363A 56            add b, a
7762   363B E4            pop a
7763   363C             ; END TERMS
7764   363C E7            pop d
7765   363D FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
7766   3641 DA            push d
7767   3642 FA FD FF      lea d, [bp + -3] ; $j
7768   3645 2A            mov b, [d]
7769   3646             ; START TERMS
7770   3646 D7            push a
7771   3647 11            mov a, b
7772   3648 26 FF FF      mov b, $ffff
7773   364B 56            add b, a
7774   364C E4            pop a
7775   364D             ; END TERMS
7776   364D E7            pop d
7777   364E 5A            add d, b
7778   364F E4            pop a
7779   3650 32            mov bl, [d]
7780   3651 A7 00         mov bh, 0
7781   3653             ; START RELATIONAL
7782   3653 D7            push a
7783   3654 11            mov a, b
7784   3655 26 02 00      mov b, $2
7785   3658 B0            cmp a, b
7786   3659 FD 71         seq ; ==
7787   365B E4            pop a
7788   365C             ; END RELATIONAL
7789   365C C0 00 00      cmp b, 0
7790   365F C6 A7 36      je _if121_exit
7791   3662             _if121_true:
7792   3662             ;; docked = 1; 
7793   3662 3B 9A 60      mov d, _docked ; $docked
7794   3665 DA            push d
7795   3666 26 01 00      mov b, $1
7796   3669 E7            pop d
7797   366A FD 3E         mov [d], bl
7798   366C             ;; sC = "DOCKED"; 
7799   366C FA FB FF      lea d, [bp + -5] ; $sC
7800   366F DA            push d
7801   3670 26 C4 6A      mov b, _s83 ; "DOCKED"
7802   3673 E7            pop d
7803   3674 FD 43         mov [d], b
7804   3676             ;; energy = energy0; 
7805   3676 3B 9B 60      mov d, _energy ; $energy
7806   3679 DA            push d
7807   367A 3B 9D 60      mov d, _energy0 ; $energy0
7808   367D 2A            mov b, [d]
7809   367E E7            pop d
7810   367F FD 43         mov [d], b
7811   3681             ;; torps = torps0; 
7812   3681 3B 50 61      mov d, _torps ; $torps
7813   3684 DA            push d
7814   3685 3B 51 61      mov d, _torps0 ; $torps0
7815   3688 32            mov bl, [d]
7816   3689 A7 00         mov bh, 0
7817   368B E7            pop d
7818   368C FD 3E         mov [d], bl
7819   368E             ;; puts("Shields dropped for docking purposes."); 
7820   368E 26 CB 6A      mov b, _s84 ; "Shields dropped for docking purposes."
7821   3691 FD AB         swp b
7822   3693 D8            push b
7823   3694 07 36 13      call puts
7824   3697 51 02 00      add sp, 2
7825   369A             ;; shield = 0; 
7826   369A 3B 56 61      mov d, _shield ; $shield
7827   369D DA            push d
7828   369E 26 00 00      mov b, $0
7829   36A1 E7            pop d
7830   36A2 FD 43         mov [d], b
7831   36A4 0A A7 36      jmp _if121_exit
7832   36A7             _if121_exit:
7833   36A7 0A AA 36      jmp _if120_exit
7834   36AA             _if120_exit:
7835   36AA             _for119_update:
7836   36AA FA FD FF      lea d, [bp + -3] ; $j
7837   36AD 2A            mov b, [d]
7838   36AE D8            push b
7839   36AF FD 77         inc b
7840   36B1 FA FD FF      lea d, [bp + -3] ; $j
7841   36B4 FD 43         mov [d], b
7842   36B6 E5            pop b
7843   36B7 0A C3 35      jmp _for119_cond
7844   36BA             _for119_exit:
7845   36BA             _for118_update:
7846   36BA FA FF FF      lea d, [bp + -1] ; $i
7847   36BD 2A            mov b, [d]
7848   36BE D8            push b
7849   36BF FD 77         inc b
7850   36C1 FA FF FF      lea d, [bp + -1] ; $i
7851   36C4 FD 43         mov [d], b
7852   36C6 E5            pop b
7853   36C7 0A 83 35      jmp _for118_cond
7854   36CA             _for118_exit:
7855   36CA             ;; if (damage[2] < 0) { 
7856   36CA             _if122_cond:
7857   36CA 3B 5D 61      mov d, _damage_data ; $damage
7858   36CD D7            push a
7859   36CE DA            push d
7860   36CF 26 02 00      mov b, $2
7861   36D2 E7            pop d
7862   36D3 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
7863   36D7 E4            pop a
7864   36D8 2A            mov b, [d]
7865   36D9             ; START RELATIONAL
7866   36D9 D7            push a
7867   36DA 11            mov a, b
7868   36DB 26 00 00      mov b, $0
7869   36DE B0            cmp a, b
7870   36DF FD 73         slt ; < (signed)
7871   36E1 E4            pop a
7872   36E2             ; END RELATIONAL
7873   36E2 C0 00 00      cmp b, 0
7874   36E5 C6 F9 36      je _if122_exit
7875   36E8             _if122_true:
7876   36E8             ;; puts("\n*** Short Range Sensors are out ***"); 
7877   36E8 26 F1 6A      mov b, _s85 ; "\n*** Short Range Sensors are out ***"
7878   36EB FD AB         swp b
7879   36ED D8            push b
7880   36EE 07 36 13      call puts
7881   36F1 51 02 00      add sp, 2
7882   36F4             ;; return; 
7883   36F4 F9            leave
7884   36F5 09            ret
7885   36F6 0A F9 36      jmp _if122_exit
7886   36F9             _if122_exit:
7887   36F9             ;; puts(srs_1); 
7888   36F9 3B 91 62      mov d, _srs_1 ; $srs_1
7889   36FC 2A            mov b, [d]
7890   36FD FD AB         swp b
7891   36FF D8            push b
7892   3700 07 36 13      call puts
7893   3703 51 02 00      add sp, 2
7894   3706             ;; for (i = 0; i < 8; i++) { 
7895   3706             _for123_init:
7896   3706 FA FF FF      lea d, [bp + -1] ; $i
7897   3709 DA            push d
7898   370A 26 00 00      mov b, $0
7899   370D E7            pop d
7900   370E FD 43         mov [d], b
7901   3710             _for123_cond:
7902   3710 FA FF FF      lea d, [bp + -1] ; $i
7903   3713 2A            mov b, [d]
7904   3714             ; START RELATIONAL
7905   3714 D7            push a
7906   3715 11            mov a, b
7907   3716 26 08 00      mov b, $8
7908   3719 B0            cmp a, b
7909   371A FD 73         slt ; < (signed)
7910   371C E4            pop a
7911   371D             ; END RELATIONAL
7912   371D C0 00 00      cmp b, 0
7913   3720 C6 07 39      je _for123_exit
7914   3723             _for123_block:
7915   3723             ;; for (j = 0; j < 8; j++) 
7916   3723             _for124_init:
7917   3723 FA FD FF      lea d, [bp + -3] ; $j
7918   3726 DA            push d
7919   3727 26 00 00      mov b, $0
7920   372A E7            pop d
7921   372B FD 43         mov [d], b
7922   372D             _for124_cond:
7923   372D FA FD FF      lea d, [bp + -3] ; $j
7924   3730 2A            mov b, [d]
7925   3731             ; START RELATIONAL
7926   3731 D7            push a
7927   3732 11            mov a, b
7928   3733 26 08 00      mov b, $8
7929   3736 B0            cmp a, b
7930   3737 FD 73         slt ; < (signed)
7931   3739 E4            pop a
7932   373A             ; END RELATIONAL
7933   373A C0 00 00      cmp b, 0
7934   373D C6 7E 37      je _for124_exit
7935   3740             _for124_block:
7936   3740             ;; puts(tilestr[quad[i][j]]); 
7937   3740 3B 93 62      mov d, _tilestr_data ; $tilestr
7938   3743 D7            push a
7939   3744 DA            push d
7940   3745 3B 77 61      mov d, _quad_data ; $quad
7941   3748 D7            push a
7942   3749 DA            push d
7943   374A FA FF FF      lea d, [bp + -1] ; $i
7944   374D 2A            mov b, [d]
7945   374E E7            pop d
7946   374F FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
7947   3753 DA            push d
7948   3754 FA FD FF      lea d, [bp + -3] ; $j
7949   3757 2A            mov b, [d]
7950   3758 E7            pop d
7951   3759 5A            add d, b
7952   375A E4            pop a
7953   375B 32            mov bl, [d]
7954   375C A7 00         mov bh, 0
7955   375E E7            pop d
7956   375F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
7957   3763 E4            pop a
7958   3764 2A            mov b, [d]
7959   3765 FD AB         swp b
7960   3767 D8            push b
7961   3768 07 36 13      call puts
7962   376B 51 02 00      add sp, 2
7963   376E             _for124_update:
7964   376E FA FD FF      lea d, [bp + -3] ; $j
7965   3771 2A            mov b, [d]
7966   3772 D8            push b
7967   3773 FD 77         inc b
7968   3775 FA FD FF      lea d, [bp + -3] ; $j
7969   3778 FD 43         mov [d], b
7970   377A E5            pop b
7971   377B 0A 2D 37      jmp _for124_cond
7972   377E             _for124_exit:
7973   377E             ;; if (i == 0) 
7974   377E             _if125_cond:
7975   377E FA FF FF      lea d, [bp + -1] ; $i
7976   3781 2A            mov b, [d]
7977   3782             ; START RELATIONAL
7978   3782 D7            push a
7979   3783 11            mov a, b
7980   3784 26 00 00      mov b, $0
7981   3787 B0            cmp a, b
7982   3788 FD 71         seq ; ==
7983   378A E4            pop a
7984   378B             ; END RELATIONAL
7985   378B C0 00 00      cmp b, 0
7986   378E C6 B0 37      je _if125_exit
7987   3791             _if125_true:
7988   3791             ;; printf("    Stardate            %d\n", FROM_FIXED(stardate)); 
7989   3791 3B 75 61      mov d, _stardate ; $stardate
7990   3794 2A            mov b, [d]
7991   3795 FD AB         swp b
7992   3797 D8            push b
7993   3798 07 ED 1C      call FROM_FIXED
7994   379B 51 02 00      add sp, 2
7995   379E FD AB         swp b
7996   37A0 D8            push b
7997   37A1 26 16 6B      mov b, _s86 ; "    Stardate            %d\n"
7998   37A4 FD AB         swp b
7999   37A6 D8            push b
8000   37A7 07 D6 05      call printf
8001   37AA 51 04 00      add sp, 4
8002   37AD 0A B0 37      jmp _if125_exit
8003   37B0             _if125_exit:
8004   37B0             ;; if (i == 1) 
8005   37B0             _if126_cond:
8006   37B0 FA FF FF      lea d, [bp + -1] ; $i
8007   37B3 2A            mov b, [d]
8008   37B4             ; START RELATIONAL
8009   37B4 D7            push a
8010   37B5 11            mov a, b
8011   37B6 26 01 00      mov b, $1
8012   37B9 B0            cmp a, b
8013   37BA FD 71         seq ; ==
8014   37BC E4            pop a
8015   37BD             ; END RELATIONAL
8016   37BD C0 00 00      cmp b, 0
8017   37C0 C6 D9 37      je _if126_exit
8018   37C3             _if126_true:
8019   37C3             ;; printf("    Condition           %s\n", sC); 
8020   37C3 FA FB FF      lea d, [bp + -5] ; $sC
8021   37C6 2A            mov b, [d]
8022   37C7 FD AB         swp b
8023   37C9 D8            push b
8024   37CA 26 32 6B      mov b, _s87 ; "    Condition           %s\n"
8025   37CD FD AB         swp b
8026   37CF D8            push b
8027   37D0 07 D6 05      call printf
8028   37D3 51 04 00      add sp, 4
8029   37D6 0A D9 37      jmp _if126_exit
8030   37D9             _if126_exit:
8031   37D9             ;; if (i == 2) 
8032   37D9             _if127_cond:
8033   37D9 FA FF FF      lea d, [bp + -1] ; $i
8034   37DC 2A            mov b, [d]
8035   37DD             ; START RELATIONAL
8036   37DD D7            push a
8037   37DE 11            mov a, b
8038   37DF 26 02 00      mov b, $2
8039   37E2 B0            cmp a, b
8040   37E3 FD 71         seq ; ==
8041   37E5 E4            pop a
8042   37E6             ; END RELATIONAL
8043   37E6 C0 00 00      cmp b, 0
8044   37E9 C6 09 38      je _if127_exit
8045   37EC             _if127_true:
8046   37EC             ;; printf("    Quadrant            %d, %d\n", quad_y, quad_x); 
8047   37EC 3B 54 61      mov d, _quad_x ; $quad_x
8048   37EF 2A            mov b, [d]
8049   37F0 FD AB         swp b
8050   37F2 D8            push b
8051   37F3 3B 52 61      mov d, _quad_y ; $quad_y
8052   37F6 2A            mov b, [d]
8053   37F7 FD AB         swp b
8054   37F9 D8            push b
8055   37FA 26 4E 6B      mov b, _s88 ; "    Quadrant            %d, %d\n"
8056   37FD FD AB         swp b
8057   37FF D8            push b
8058   3800 07 D6 05      call printf
8059   3803 51 06 00      add sp, 6
8060   3806 0A 09 38      jmp _if127_exit
8061   3809             _if127_exit:
8062   3809             ;; if (i == 3) 
8063   3809             _if128_cond:
8064   3809 FA FF FF      lea d, [bp + -1] ; $i
8065   380C 2A            mov b, [d]
8066   380D             ; START RELATIONAL
8067   380D D7            push a
8068   380E 11            mov a, b
8069   380F 26 03 00      mov b, $3
8070   3812 B0            cmp a, b
8071   3813 FD 71         seq ; ==
8072   3815 E4            pop a
8073   3816             ; END RELATIONAL
8074   3816 C0 00 00      cmp b, 0
8075   3819 C6 4B 38      je _if128_exit
8076   381C             _if128_true:
8077   381C             ;; printf("    Sector              %d, %d\n", FROM_FIXED00(ship_y), FROM_FIXED00(ship_x)); 
8078   381C 3B 73 61      mov d, _ship_x ; $ship_x
8079   381F 2A            mov b, [d]
8080   3820 FD AB         swp b
8081   3822 D8            push b
8082   3823 07 10 1D      call FROM_FIXED00
8083   3826 51 02 00      add sp, 2
8084   3829 FD AB         swp b
8085   382B D8            push b
8086   382C 3B 71 61      mov d, _ship_y ; $ship_y
8087   382F 2A            mov b, [d]
8088   3830 FD AB         swp b
8089   3832 D8            push b
8090   3833 07 10 1D      call FROM_FIXED00
8091   3836 51 02 00      add sp, 2
8092   3839 FD AB         swp b
8093   383B D8            push b
8094   383C 26 6E 6B      mov b, _s89 ; "    Sector              %d, %d\n"
8095   383F FD AB         swp b
8096   3841 D8            push b
8097   3842 07 D6 05      call printf
8098   3845 51 06 00      add sp, 6
8099   3848 0A 4B 38      jmp _if128_exit
8100   384B             _if128_exit:
8101   384B             ;; if (i == 4) 
8102   384B             _if129_cond:
8103   384B FA FF FF      lea d, [bp + -1] ; $i
8104   384E 2A            mov b, [d]
8105   384F             ; START RELATIONAL
8106   384F D7            push a
8107   3850 11            mov a, b
8108   3851 26 04 00      mov b, $4
8109   3854 B0            cmp a, b
8110   3855 FD 71         seq ; ==
8111   3857 E4            pop a
8112   3858             ; END RELATIONAL
8113   3858 C0 00 00      cmp b, 0
8114   385B C6 74 38      je _if129_exit
8115   385E             _if129_true:
8116   385E             ;; printf("    Photon Torpedoes    %d\n", torps); 
8117   385E 3B 50 61      mov d, _torps ; $torps
8118   3861 32            mov bl, [d]
8119   3862 A7 00         mov bh, 0
8120   3864 DD            push bl
8121   3865 26 8E 6B      mov b, _s90 ; "    Photon Torpedoes    %d\n"
8122   3868 FD AB         swp b
8123   386A D8            push b
8124   386B 07 D6 05      call printf
8125   386E 51 03 00      add sp, 3
8126   3871 0A 74 38      jmp _if129_exit
8127   3874             _if129_exit:
8128   3874             ;; if (i == 5) 
8129   3874             _if130_cond:
8130   3874 FA FF FF      lea d, [bp + -1] ; $i
8131   3877 2A            mov b, [d]
8132   3878             ; START RELATIONAL
8133   3878 D7            push a
8134   3879 11            mov a, b
8135   387A 26 05 00      mov b, $5
8136   387D B0            cmp a, b
8137   387E FD 71         seq ; ==
8138   3880 E4            pop a
8139   3881             ; END RELATIONAL
8140   3881 C0 00 00      cmp b, 0
8141   3884 C6 A5 38      je _if130_exit
8142   3887             _if130_true:
8143   3887             ;; printf("    Total Energy        %d\n", energy + shield); 
8144   3887 3B 9B 60      mov d, _energy ; $energy
8145   388A 2A            mov b, [d]
8146   388B             ; START TERMS
8147   388B D7            push a
8148   388C 11            mov a, b
8149   388D 3B 56 61      mov d, _shield ; $shield
8150   3890 2A            mov b, [d]
8151   3891 56            add b, a
8152   3892 E4            pop a
8153   3893             ; END TERMS
8154   3893 FD AB         swp b
8155   3895 D8            push b
8156   3896 26 AA 6B      mov b, _s91 ; "    Total Energy        %d\n"
8157   3899 FD AB         swp b
8158   389B D8            push b
8159   389C 07 D6 05      call printf
8160   389F 51 04 00      add sp, 4
8161   38A2 0A A5 38      jmp _if130_exit
8162   38A5             _if130_exit:
8163   38A5             ;; if (i == 6) 
8164   38A5             _if131_cond:
8165   38A5 FA FF FF      lea d, [bp + -1] ; $i
8166   38A8 2A            mov b, [d]
8167   38A9             ; START RELATIONAL
8168   38A9 D7            push a
8169   38AA 11            mov a, b
8170   38AB 26 06 00      mov b, $6
8171   38AE B0            cmp a, b
8172   38AF FD 71         seq ; ==
8173   38B1 E4            pop a
8174   38B2             ; END RELATIONAL
8175   38B2 C0 00 00      cmp b, 0
8176   38B5 C6 CE 38      je _if131_exit
8177   38B8             _if131_true:
8178   38B8             ;; printf("    Shields             %d\n", shield); 
8179   38B8 3B 56 61      mov d, _shield ; $shield
8180   38BB 2A            mov b, [d]
8181   38BC FD AB         swp b
8182   38BE D8            push b
8183   38BF 26 C6 6B      mov b, _s92 ; "    Shields             %d\n"
8184   38C2 FD AB         swp b
8185   38C4 D8            push b
8186   38C5 07 D6 05      call printf
8187   38C8 51 04 00      add sp, 4
8188   38CB 0A CE 38      jmp _if131_exit
8189   38CE             _if131_exit:
8190   38CE             ;; if (i == 7) 
8191   38CE             _if132_cond:
8192   38CE FA FF FF      lea d, [bp + -1] ; $i
8193   38D1 2A            mov b, [d]
8194   38D2             ; START RELATIONAL
8195   38D2 D7            push a
8196   38D3 11            mov a, b
8197   38D4 26 07 00      mov b, $7
8198   38D7 B0            cmp a, b
8199   38D8 FD 71         seq ; ==
8200   38DA E4            pop a
8201   38DB             ; END RELATIONAL
8202   38DB C0 00 00      cmp b, 0
8203   38DE C6 F7 38      je _if132_exit
8204   38E1             _if132_true:
8205   38E1             ;; printf("    Klingons Remaining  %d\n", klingons_left); 
8206   38E1 3B 4F 61      mov d, _klingons_left ; $klingons_left
8207   38E4 32            mov bl, [d]
8208   38E5 A7 00         mov bh, 0
8209   38E7 DD            push bl
8210   38E8 26 E2 6B      mov b, _s93 ; "    Klingons Remaining  %d\n"
8211   38EB FD AB         swp b
8212   38ED D8            push b
8213   38EE 07 D6 05      call printf
8214   38F1 51 03 00      add sp, 3
8215   38F4 0A F7 38      jmp _if132_exit
8216   38F7             _if132_exit:
8217   38F7             _for123_update:
8218   38F7 FA FF FF      lea d, [bp + -1] ; $i
8219   38FA 2A            mov b, [d]
8220   38FB D8            push b
8221   38FC FD 77         inc b
8222   38FE FA FF FF      lea d, [bp + -1] ; $i
8223   3901 FD 43         mov [d], b
8224   3903 E5            pop b
8225   3904 0A 10 37      jmp _for123_cond
8226   3907             _for123_exit:
8227   3907             ;; puts(srs_1); 
8228   3907 3B 91 62      mov d, _srs_1 ; $srs_1
8229   390A 2A            mov b, [d]
8230   390B FD AB         swp b
8231   390D D8            push b
8232   390E 07 36 13      call puts
8233   3911 51 02 00      add sp, 2
8234   3914             ;; putchar('\n'); 
8235   3914 26 0A 00      mov b, $a
8236   3917 DD            push bl
8237   3918 07 00 13      call putchar
8238   391B 51 01 00      add sp, 1
8239   391E             ;; return; 
8240   391E F9            leave
8241   391F 09            ret
8242   3920             
8243   3920             put1bcd:
8244   3920 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8245   3923             ;; v = v & 0x0F; 
8246   3923 FA 05 00      lea d, [bp + 5] ; $v
8247   3926 DA            push d
8248   3927 FA 05 00      lea d, [bp + 5] ; $v
8249   392A 32            mov bl, [d]
8250   392B A7 00         mov bh, 0
8251   392D D7            push a
8252   392E 11            mov a, b
8253   392F 26 0F 00      mov b, $f
8254   3932 FD 92         and b, a ; &
8255   3934 E4            pop a
8256   3935 E7            pop d
8257   3936 FD 3E         mov [d], bl
8258   3938             ;; putchar('0' + v); 
8259   3938 26 30 00      mov b, $30
8260   393B             ; START TERMS
8261   393B D7            push a
8262   393C 11            mov a, b
8263   393D FA 05 00      lea d, [bp + 5] ; $v
8264   3940 32            mov bl, [d]
8265   3941 A7 00         mov bh, 0
8266   3943 56            add b, a
8267   3944 E4            pop a
8268   3945             ; END TERMS
8269   3945 DD            push bl
8270   3946 07 00 13      call putchar
8271   3949 51 01 00      add sp, 1
8272   394C F9            leave
8273   394D 09            ret
8274   394E             
8275   394E             putbcd:
8276   394E F8 00 00      enter 0 ; (push bp; mov bp, sp)
8277   3951             ;; put1bcd(x >> 8); 
8278   3951 FA 05 00      lea d, [bp + 5] ; $x
8279   3954 2A            mov b, [d]
8280   3955             ; START SHIFT
8281   3955 D7            push a
8282   3956 11            mov a, b
8283   3957 26 08 00      mov b, $8
8284   395A FD 39         mov c, b
8285   395C A1            shr a, cl
8286   395D 27            mov b, a
8287   395E E4            pop a
8288   395F             ; END SHIFT
8289   395F DD            push bl
8290   3960 07 20 39      call put1bcd
8291   3963 51 01 00      add sp, 1
8292   3966             ;; put1bcd(x >> 4); 
8293   3966 FA 05 00      lea d, [bp + 5] ; $x
8294   3969 2A            mov b, [d]
8295   396A             ; START SHIFT
8296   396A D7            push a
8297   396B 11            mov a, b
8298   396C 26 04 00      mov b, $4
8299   396F FD 39         mov c, b
8300   3971 A1            shr a, cl
8301   3972 27            mov b, a
8302   3973 E4            pop a
8303   3974             ; END SHIFT
8304   3974 DD            push bl
8305   3975 07 20 39      call put1bcd
8306   3978 51 01 00      add sp, 1
8307   397B             ;; put1bcd(x); 
8308   397B FA 05 00      lea d, [bp + 5] ; $x
8309   397E 2A            mov b, [d]
8310   397F DD            push bl
8311   3980 07 20 39      call put1bcd
8312   3983 51 01 00      add sp, 1
8313   3986 F9            leave
8314   3987 09            ret
8315   3988             
8316   3988             long_range_scan:
8317   3988 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8318   398B             ; $i 
8319   398B             ; $j 
8320   398B 52 04 00      sub sp, 4
8321   398E             ;; if (inoperable(3)) 
8322   398E             _if133_cond:
8323   398E 26 03 00      mov b, $3
8324   3991 DD            push bl
8325   3992 07 50 20      call inoperable
8326   3995 51 01 00      add sp, 1
8327   3998 C0 00 00      cmp b, 0
8328   399B C6 A3 39      je _if133_exit
8329   399E             _if133_true:
8330   399E             ;; return; 
8331   399E F9            leave
8332   399F 09            ret
8333   39A0 0A A3 39      jmp _if133_exit
8334   39A3             _if133_exit:
8335   39A3             ;; printf("Long Range Scan for Quadrant %d, %d\n\n", quad_y, quad_x); 
8336   39A3 3B 54 61      mov d, _quad_x ; $quad_x
8337   39A6 2A            mov b, [d]
8338   39A7 FD AB         swp b
8339   39A9 D8            push b
8340   39AA 3B 52 61      mov d, _quad_y ; $quad_y
8341   39AD 2A            mov b, [d]
8342   39AE FD AB         swp b
8343   39B0 D8            push b
8344   39B1 26 FE 6B      mov b, _s94 ; "Long Range Scan for Quadrant %d, %d\n\n"
8345   39B4 FD AB         swp b
8346   39B6 D8            push b
8347   39B7 07 D6 05      call printf
8348   39BA 51 06 00      add sp, 6
8349   39BD             ;; for (i = quad_y - 1; i <= quad_y + 1; i++) { 
8350   39BD             _for134_init:
8351   39BD FA FF FF      lea d, [bp + -1] ; $i
8352   39C0 DA            push d
8353   39C1 3B 52 61      mov d, _quad_y ; $quad_y
8354   39C4 2A            mov b, [d]
8355   39C5             ; START TERMS
8356   39C5 D7            push a
8357   39C6 11            mov a, b
8358   39C7 26 01 00      mov b, $1
8359   39CA 60            sub a, b
8360   39CB 27            mov b, a
8361   39CC E4            pop a
8362   39CD             ; END TERMS
8363   39CD E7            pop d
8364   39CE FD 43         mov [d], b
8365   39D0             _for134_cond:
8366   39D0 FA FF FF      lea d, [bp + -1] ; $i
8367   39D3 2A            mov b, [d]
8368   39D4             ; START RELATIONAL
8369   39D4 D7            push a
8370   39D5 11            mov a, b
8371   39D6 3B 52 61      mov d, _quad_y ; $quad_y
8372   39D9 2A            mov b, [d]
8373   39DA             ; START TERMS
8374   39DA D7            push a
8375   39DB 11            mov a, b
8376   39DC 26 01 00      mov b, $1
8377   39DF 56            add b, a
8378   39E0 E4            pop a
8379   39E1             ; END TERMS
8380   39E1 B0            cmp a, b
8381   39E2 FD 73         slt ; <= (signed)
8382   39E4 E4            pop a
8383   39E5             ; END RELATIONAL
8384   39E5 C0 00 00      cmp b, 0
8385   39E8 C6 22 3B      je _for134_exit
8386   39EB             _for134_block:
8387   39EB             ;; printf("%s:", lrs_1); 
8388   39EB 3B BC 62      mov d, _lrs_1 ; $lrs_1
8389   39EE 2A            mov b, [d]
8390   39EF FD AB         swp b
8391   39F1 D8            push b
8392   39F2 26 24 6C      mov b, _s95 ; "%s:"
8393   39F5 FD AB         swp b
8394   39F7 D8            push b
8395   39F8 07 D6 05      call printf
8396   39FB 51 04 00      add sp, 4
8397   39FE             ;; for (j = quad_x - 1; j <= quad_x + 1; j++) { 
8398   39FE             _for135_init:
8399   39FE FA FD FF      lea d, [bp + -3] ; $j
8400   3A01 DA            push d
8401   3A02 3B 54 61      mov d, _quad_x ; $quad_x
8402   3A05 2A            mov b, [d]
8403   3A06             ; START TERMS
8404   3A06 D7            push a
8405   3A07 11            mov a, b
8406   3A08 26 01 00      mov b, $1
8407   3A0B 60            sub a, b
8408   3A0C 27            mov b, a
8409   3A0D E4            pop a
8410   3A0E             ; END TERMS
8411   3A0E E7            pop d
8412   3A0F FD 43         mov [d], b
8413   3A11             _for135_cond:
8414   3A11 FA FD FF      lea d, [bp + -3] ; $j
8415   3A14 2A            mov b, [d]
8416   3A15             ; START RELATIONAL
8417   3A15 D7            push a
8418   3A16 11            mov a, b
8419   3A17 3B 54 61      mov d, _quad_x ; $quad_x
8420   3A1A 2A            mov b, [d]
8421   3A1B             ; START TERMS
8422   3A1B D7            push a
8423   3A1C 11            mov a, b
8424   3A1D 26 01 00      mov b, $1
8425   3A20 56            add b, a
8426   3A21 E4            pop a
8427   3A22             ; END TERMS
8428   3A22 B0            cmp a, b
8429   3A23 FD 73         slt ; <= (signed)
8430   3A25 E4            pop a
8431   3A26             ; END RELATIONAL
8432   3A26 C0 00 00      cmp b, 0
8433   3A29 C6 08 3B      je _for135_exit
8434   3A2C             _for135_block:
8435   3A2C             ;; putchar(' '); 
8436   3A2C 26 20 00      mov b, $20
8437   3A2F DD            push bl
8438   3A30 07 00 13      call putchar
8439   3A33 51 01 00      add sp, 1
8440   3A36             ;; if (i > 0 && i <= 8 && j > 0 && j <= 8) { 
8441   3A36             _if136_cond:
8442   3A36 FA FF FF      lea d, [bp + -1] ; $i
8443   3A39 2A            mov b, [d]
8444   3A3A             ; START RELATIONAL
8445   3A3A D7            push a
8446   3A3B 11            mov a, b
8447   3A3C 26 00 00      mov b, $0
8448   3A3F B0            cmp a, b
8449   3A40 FD 7F         sgt ; >
8450   3A42 E4            pop a
8451   3A43             ; END RELATIONAL
8452   3A43 D7            push a
8453   3A44 11            mov a, b
8454   3A45 FA FF FF      lea d, [bp + -1] ; $i
8455   3A48 2A            mov b, [d]
8456   3A49             ; START RELATIONAL
8457   3A49 D7            push a
8458   3A4A 11            mov a, b
8459   3A4B 26 08 00      mov b, $8
8460   3A4E B0            cmp a, b
8461   3A4F FD 73         slt ; <= (signed)
8462   3A51 E4            pop a
8463   3A52             ; END RELATIONAL
8464   3A52 FD A7         sand a, b
8465   3A54 11            mov a, b
8466   3A55 FA FD FF      lea d, [bp + -3] ; $j
8467   3A58 2A            mov b, [d]
8468   3A59             ; START RELATIONAL
8469   3A59 D7            push a
8470   3A5A 11            mov a, b
8471   3A5B 26 00 00      mov b, $0
8472   3A5E B0            cmp a, b
8473   3A5F FD 7F         sgt ; >
8474   3A61 E4            pop a
8475   3A62             ; END RELATIONAL
8476   3A62 FD A7         sand a, b
8477   3A64 11            mov a, b
8478   3A65 FA FD FF      lea d, [bp + -3] ; $j
8479   3A68 2A            mov b, [d]
8480   3A69             ; START RELATIONAL
8481   3A69 D7            push a
8482   3A6A 11            mov a, b
8483   3A6B 26 08 00      mov b, $8
8484   3A6E B0            cmp a, b
8485   3A6F FD 73         slt ; <= (signed)
8486   3A71 E4            pop a
8487   3A72             ; END RELATIONAL
8488   3A72 FD A7         sand a, b
8489   3A74 E4            pop a
8490   3A75 C0 00 00      cmp b, 0
8491   3A78 C6 E0 3A      je _if136_else
8492   3A7B             _if136_true:
8493   3A7B             ;; map[i][j] = map[i][j] |   0x1000		/* Set if this sector was mapped */          ; 
8494   3A7B 3B 9F 60      mov d, _map_data ; $map
8495   3A7E D7            push a
8496   3A7F DA            push d
8497   3A80 FA FF FF      lea d, [bp + -1] ; $i
8498   3A83 2A            mov b, [d]
8499   3A84 E7            pop d
8500   3A85 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
8501   3A89 DA            push d
8502   3A8A FA FD FF      lea d, [bp + -3] ; $j
8503   3A8D 2A            mov b, [d]
8504   3A8E E7            pop d
8505   3A8F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8506   3A93 E4            pop a
8507   3A94 DA            push d
8508   3A95 3B 9F 60      mov d, _map_data ; $map
8509   3A98 D7            push a
8510   3A99 DA            push d
8511   3A9A FA FF FF      lea d, [bp + -1] ; $i
8512   3A9D 2A            mov b, [d]
8513   3A9E E7            pop d
8514   3A9F FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
8515   3AA3 DA            push d
8516   3AA4 FA FD FF      lea d, [bp + -3] ; $j
8517   3AA7 2A            mov b, [d]
8518   3AA8 E7            pop d
8519   3AA9 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8520   3AAD E4            pop a
8521   3AAE 2A            mov b, [d]
8522   3AAF D7            push a
8523   3AB0 11            mov a, b
8524   3AB1 26 00 10      mov b, $1000
8525   3AB4 FD 70         or b, a ; |
8526   3AB6 E4            pop a
8527   3AB7 E7            pop d
8528   3AB8 FD 43         mov [d], b
8529   3ABA             ;; putbcd(map[i][j]); 
8530   3ABA 3B 9F 60      mov d, _map_data ; $map
8531   3ABD D7            push a
8532   3ABE DA            push d
8533   3ABF FA FF FF      lea d, [bp + -1] ; $i
8534   3AC2 2A            mov b, [d]
8535   3AC3 E7            pop d
8536   3AC4 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
8537   3AC8 DA            push d
8538   3AC9 FA FD FF      lea d, [bp + -3] ; $j
8539   3ACC 2A            mov b, [d]
8540   3ACD E7            pop d
8541   3ACE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8542   3AD2 E4            pop a
8543   3AD3 2A            mov b, [d]
8544   3AD4 FD AB         swp b
8545   3AD6 D8            push b
8546   3AD7 07 4E 39      call putbcd
8547   3ADA 51 02 00      add sp, 2
8548   3ADD 0A EC 3A      jmp _if136_exit
8549   3AE0             _if136_else:
8550   3AE0             ;; puts("***"); 
8551   3AE0 26 28 6C      mov b, _s96 ; "***"
8552   3AE3 FD AB         swp b
8553   3AE5 D8            push b
8554   3AE6 07 36 13      call puts
8555   3AE9 51 02 00      add sp, 2
8556   3AEC             _if136_exit:
8557   3AEC             ;; puts(" :"); 
8558   3AEC 26 2C 6C      mov b, _s97 ; " :"
8559   3AEF FD AB         swp b
8560   3AF1 D8            push b
8561   3AF2 07 36 13      call puts
8562   3AF5 51 02 00      add sp, 2
8563   3AF8             _for135_update:
8564   3AF8 FA FD FF      lea d, [bp + -3] ; $j
8565   3AFB 2A            mov b, [d]
8566   3AFC D8            push b
8567   3AFD FD 77         inc b
8568   3AFF FA FD FF      lea d, [bp + -3] ; $j
8569   3B02 FD 43         mov [d], b
8570   3B04 E5            pop b
8571   3B05 0A 11 3A      jmp _for135_cond
8572   3B08             _for135_exit:
8573   3B08             ;; putchar('\n'); 
8574   3B08 26 0A 00      mov b, $a
8575   3B0B DD            push bl
8576   3B0C 07 00 13      call putchar
8577   3B0F 51 01 00      add sp, 1
8578   3B12             _for134_update:
8579   3B12 FA FF FF      lea d, [bp + -1] ; $i
8580   3B15 2A            mov b, [d]
8581   3B16 D8            push b
8582   3B17 FD 77         inc b
8583   3B19 FA FF FF      lea d, [bp + -1] ; $i
8584   3B1C FD 43         mov [d], b
8585   3B1E E5            pop b
8586   3B1F 0A D0 39      jmp _for134_cond
8587   3B22             _for134_exit:
8588   3B22             ;; printf("%s\n", lrs_1); 
8589   3B22 3B BC 62      mov d, _lrs_1 ; $lrs_1
8590   3B25 2A            mov b, [d]
8591   3B26 FD AB         swp b
8592   3B28 D8            push b
8593   3B29 26 2F 6C      mov b, _s98 ; "%s\n"
8594   3B2C FD AB         swp b
8595   3B2E D8            push b
8596   3B2F 07 D6 05      call printf
8597   3B32 51 04 00      add sp, 4
8598   3B35 F9            leave
8599   3B36 09            ret
8600   3B37             
8601   3B37             no_klingon:
8602   3B37 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8603   3B3A             ;; if (klingons <= 0) { 
8604   3B3A             _if137_cond:
8605   3B3A 3B 4D 61      mov d, _klingons ; $klingons
8606   3B3D 32            mov bl, [d]
8607   3B3E A7 00         mov bh, 0
8608   3B40             ; START RELATIONAL
8609   3B40 D7            push a
8610   3B41 11            mov a, b
8611   3B42 26 00 00      mov b, $0
8612   3B45 B0            cmp a, b
8613   3B46 FD 75         slu ; <= (unsigned)
8614   3B48 E4            pop a
8615   3B49             ; END RELATIONAL
8616   3B49 C0 00 00      cmp b, 0
8617   3B4C C6 63 3B      je _if137_exit
8618   3B4F             _if137_true:
8619   3B4F             ;; puts("Science Officer Spock reports:\n  'Sensors show no enemy ships in this quadrant'\n"); 
8620   3B4F 26 33 6C      mov b, _s99 ; "Science Officer Spock reports:\n  'Sensors show no enemy ships in this quadrant'\n"
8621   3B52 FD AB         swp b
8622   3B54 D8            push b
8623   3B55 07 36 13      call puts
8624   3B58 51 02 00      add sp, 2
8625   3B5B             ;; return 1; 
8626   3B5B 26 01 00      mov b, $1
8627   3B5E F9            leave
8628   3B5F 09            ret
8629   3B60 0A 63 3B      jmp _if137_exit
8630   3B63             _if137_exit:
8631   3B63             ;; return 0; 
8632   3B63 26 00 00      mov b, $0
8633   3B66 F9            leave
8634   3B67 09            ret
8635   3B68             
8636   3B68             wipe_klingon:
8637   3B68 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8638   3B6B             ;; quad[k->y+-1][k->x+-1] =  		0      ; 
8639   3B6B 3B 77 61      mov d, _quad_data ; $quad
8640   3B6E D7            push a
8641   3B6F DA            push d
8642   3B70 FA 05 00      lea d, [bp + 5] ; $k
8643   3B73 FD 2A         mov d, [d]
8644   3B75 58 00 00      add d, 0
8645   3B78 32            mov bl, [d]
8646   3B79 A7 00         mov bh, 0
8647   3B7B             ; START TERMS
8648   3B7B D7            push a
8649   3B7C 11            mov a, b
8650   3B7D 26 FF FF      mov b, $ffff
8651   3B80 56            add b, a
8652   3B81 E4            pop a
8653   3B82             ; END TERMS
8654   3B82 E7            pop d
8655   3B83 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
8656   3B87 DA            push d
8657   3B88 FA 05 00      lea d, [bp + 5] ; $k
8658   3B8B FD 2A         mov d, [d]
8659   3B8D 58 01 00      add d, 1
8660   3B90 32            mov bl, [d]
8661   3B91 A7 00         mov bh, 0
8662   3B93             ; START TERMS
8663   3B93 D7            push a
8664   3B94 11            mov a, b
8665   3B95 26 FF FF      mov b, $ffff
8666   3B98 56            add b, a
8667   3B99 E4            pop a
8668   3B9A             ; END TERMS
8669   3B9A E7            pop d
8670   3B9B 5A            add d, b
8671   3B9C E4            pop a
8672   3B9D DA            push d
8673   3B9E 26 00 00      mov b, $0
8674   3BA1 E7            pop d
8675   3BA2 FD 3E         mov [d], bl
8676   3BA4 F9            leave
8677   3BA5 09            ret
8678   3BA6             
8679   3BA6             phaser_control:
8680   3BA6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
8681   3BA9             ; $i 
8682   3BA9             ; $phaser_energy 
8683   3BA9             ; $h1 
8684   3BA9             ; $h 
8685   3BA9             ; $k 
8686   3BA9 52 0E 00      sub sp, 14
8687   3BAC             ;; k = &kdata; 
8688   3BAC FA F3 FF      lea d, [bp + -13] ; $k
8689   3BAF DA            push d
8690   3BB0 3B 41 61      mov d, _kdata_data ; $kdata
8691   3BB3 2D            mov b, d
8692   3BB4 E7            pop d
8693   3BB5 FD 43         mov [d], b
8694   3BB7             ;; if (inoperable(4)) 
8695   3BB7             _if138_cond:
8696   3BB7 26 04 00      mov b, $4
8697   3BBA DD            push bl
8698   3BBB 07 50 20      call inoperable
8699   3BBE 51 01 00      add sp, 1
8700   3BC1 C0 00 00      cmp b, 0
8701   3BC4 C6 CC 3B      je _if138_exit
8702   3BC7             _if138_true:
8703   3BC7             ;; return; 
8704   3BC7 F9            leave
8705   3BC8 09            ret
8706   3BC9 0A CC 3B      jmp _if138_exit
8707   3BCC             _if138_exit:
8708   3BCC             ;; if (no_klingon()) 
8709   3BCC             _if139_cond:
8710   3BCC 07 37 3B      call no_klingon
8711   3BCF C0 00 00      cmp b, 0
8712   3BD2 C6 DA 3B      je _if139_exit
8713   3BD5             _if139_true:
8714   3BD5             ;; return; 
8715   3BD5 F9            leave
8716   3BD6 09            ret
8717   3BD7 0A DA 3B      jmp _if139_exit
8718   3BDA             _if139_exit:
8719   3BDA             ;; if (damage[8] < 0) 
8720   3BDA             _if140_cond:
8721   3BDA 3B 5D 61      mov d, _damage_data ; $damage
8722   3BDD D7            push a
8723   3BDE DA            push d
8724   3BDF 26 08 00      mov b, $8
8725   3BE2 E7            pop d
8726   3BE3 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8727   3BE7 E4            pop a
8728   3BE8 2A            mov b, [d]
8729   3BE9             ; START RELATIONAL
8730   3BE9 D7            push a
8731   3BEA 11            mov a, b
8732   3BEB 26 00 00      mov b, $0
8733   3BEE B0            cmp a, b
8734   3BEF FD 73         slt ; < (signed)
8735   3BF1 E4            pop a
8736   3BF2             ; END RELATIONAL
8737   3BF2 C0 00 00      cmp b, 0
8738   3BF5 C6 07 3C      je _if140_exit
8739   3BF8             _if140_true:
8740   3BF8             ;; puts("Computer failure hampers accuracy."); 
8741   3BF8 26 84 6C      mov b, _s100 ; "Computer failure hampers accuracy."
8742   3BFB FD AB         swp b
8743   3BFD D8            push b
8744   3BFE 07 36 13      call puts
8745   3C01 51 02 00      add sp, 2
8746   3C04 0A 07 3C      jmp _if140_exit
8747   3C07             _if140_exit:
8748   3C07             ;; printf("Phasers locked on target;\n Energy available = %d units\n\n Number of units to fire: ", energy); 
8749   3C07 3B 9B 60      mov d, _energy ; $energy
8750   3C0A 2A            mov b, [d]
8751   3C0B FD AB         swp b
8752   3C0D D8            push b
8753   3C0E 26 A7 6C      mov b, _s101 ; "Phasers locked on target;\n Energy available = %d units\n\n Number of units to fire: "
8754   3C11 FD AB         swp b
8755   3C13 D8            push b
8756   3C14 07 D6 05      call printf
8757   3C17 51 04 00      add sp, 4
8758   3C1A             ;; phaser_energy = input_int(); 
8759   3C1A FA FB FF      lea d, [bp + -5] ; $phaser_energy
8760   3C1D DA            push d
8761   3C1E 07 B9 1F      call input_int
8762   3C21 E7            pop d
8763   3C22 FD 43         mov [d], b
8764   3C24 28            mov b, c
8765   3C25 FD 44 02 00   mov [d + 2], b
8766   3C29             ;; if (phaser_energy <= 0) 
8767   3C29             _if141_cond:
8768   3C29 FA FB FF      lea d, [bp + -5] ; $phaser_energy
8769   3C2C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
8770   3C2F FD 39         mov c, b ; And place it into C
8771   3C31 2A            mov b, [d] ; Lower Word in B
8772   3C32             ; START RELATIONAL
8773   3C32 D7            push a
8774   3C33 FD D8         push g
8775   3C35 11            mov a, b
8776   3C36 FD 7A         mov g, c
8777   3C38 26 00 00      mov b, $0
8778   3C3B 38 00 00      mov c, 0
8779   3C3E FD 74         sle
8780   3C40 FD F1         pop g
8781   3C42 E4            pop a
8782   3C43             ; END RELATIONAL
8783   3C43 C0 00 00      cmp b, 0
8784   3C46 C6 4E 3C      je _if141_exit
8785   3C49             _if141_true:
8786   3C49             ;; return; 
8787   3C49 F9            leave
8788   3C4A 09            ret
8789   3C4B 0A 4E 3C      jmp _if141_exit
8790   3C4E             _if141_exit:
8791   3C4E             ;; if (energy - phaser_energy < 0) { 
8792   3C4E             _if142_cond:
8793   3C4E 3B 9B 60      mov d, _energy ; $energy
8794   3C51 2A            mov b, [d]
8795   3C52             ; START TERMS
8796   3C52 D7            push a
8797   3C53 11            mov a, b
8798   3C54 FA FB FF      lea d, [bp + -5] ; $phaser_energy
8799   3C57 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
8800   3C5A FD 39         mov c, b ; And place it into C
8801   3C5C 2A            mov b, [d] ; Lower Word in B
8802   3C5D 60            sub a, b
8803   3C5E 27            mov b, a
8804   3C5F E4            pop a
8805   3C60             ; END TERMS
8806   3C60             ; START RELATIONAL
8807   3C60 D7            push a
8808   3C61 FD D8         push g
8809   3C63 11            mov a, b
8810   3C64 FD 7A         mov g, c
8811   3C66 26 00 00      mov b, $0
8812   3C69 38 00 00      mov c, 0
8813   3C6C FD AF 00 00   cmp32 ga, cb
8813   3C70 00 00 00 00 
8813   3C74 00 00 00 00 
8813   3C78 00 00 00 00 
8813   3C7C 00 00 00 00 
8813   3C80 00 00 00 00 
8813   3C84 00 00 00 00 
8813   3C88 00 00 00 00 
8813   3C8C 00 00 00 00 
8813   3C90 00 00 00 00 
8813   3C94 00 00 00 00 
8813   3C98 00 00 00 00 
8813   3C9C 00 00 00 00 
8813   3CA0 00 00 00 00 
8813   3CA4 00 00 00 00 
8813   3CA8 00 00 00 00 
8813   3CAC 00 00 00 00 
8813   3CB0 00 00 00 00 
8813   3CB4 00 00 00 00 
8813   3CB8 00 00 00 00 
8813   3CBC 00 00 00 00 
8813   3CC0 00 00 00 00 
8813   3CC4 00 00 00 00 
8813   3CC8 00 00 00 00 
8813   3CCC 00 00 00 00 
8813   3CD0 00 00 00 00 
8813   3CD4 00 00 00 00 
8813   3CD8 00 00 00 00 
8813   3CDC 00 00 00 00 
8813   3CE0 00 00 00 00 
8813   3CE4 00 00 00 00 
8813   3CE8 00 00 00 00 
8813   3CEC 00 00 00 00 
8813   3CF0 00 00 00 00 
8813   3CF4 00 00 00 00 
8813   3CF8 00 00 00 00 
8813   3CFC 00 00 00 00 
8813   3D00 00 00 00 00 
8813   3D04 00 00 00 00 
8813   3D08 00 00 00 00 
8813   3D0C 00 00 00 00 
8813   3D10 00 00 00 00 
8813   3D14 00 00 00 00 
8813   3D18 00 00 00 00 
8813   3D1C 00 00 00 00 
8813   3D20 00 00 00 00 
8813   3D24 00 00 00 00 
8813   3D28 00 00 00 00 
8813   3D2C 00 00 00 00 
8813   3D30 00 00 00 00 
8813   3D34 00 00 00 00 
8813   3D38 00 00 00 00 
8813   3D3C 00 00 00 00 
8813   3D40 00 00 00 00 
8813   3D44 00 00 00 00 
8813   3D48 00 00 00 00 
8813   3D4C 00 00 00 00 
8813   3D50 00 00 00 00 
8813   3D54 00 00 00 00 
8813   3D58 00 00 00 00 
8813   3D5C 00 00 00 00 
8813   3D60 00 00 00 00 
8813   3D64 00 00 00 00 
8813   3D68 00 00 00 00 
8813   3D6C 00 
8814   3D6D FD 73         slt ; <
8815   3D6F FD F1         pop g
8816   3D71 E4            pop a
8817   3D72             ; END RELATIONAL
8818   3D72 C0 00 00      cmp b, 0
8819   3D75 C6 89 3D      je _if142_exit
8820   3D78             _if142_true:
8821   3D78             ;; puts("Not enough energy available.\n"); 
8822   3D78 26 FA 6C      mov b, _s102 ; "Not enough energy available.\n"
8823   3D7B FD AB         swp b
8824   3D7D D8            push b
8825   3D7E 07 36 13      call puts
8826   3D81 51 02 00      add sp, 2
8827   3D84             ;; return; 
8828   3D84 F9            leave
8829   3D85 09            ret
8830   3D86 0A 89 3D      jmp _if142_exit
8831   3D89             _if142_exit:
8832   3D89             ;; energy = energy -  phaser_energy; 
8833   3D89 3B 9B 60      mov d, _energy ; $energy
8834   3D8C DA            push d
8835   3D8D 3B 9B 60      mov d, _energy ; $energy
8836   3D90 2A            mov b, [d]
8837   3D91             ; START TERMS
8838   3D91 D7            push a
8839   3D92 11            mov a, b
8840   3D93 FA FB FF      lea d, [bp + -5] ; $phaser_energy
8841   3D96 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
8842   3D99 FD 39         mov c, b ; And place it into C
8843   3D9B 2A            mov b, [d] ; Lower Word in B
8844   3D9C 60            sub a, b
8845   3D9D 27            mov b, a
8846   3D9E E4            pop a
8847   3D9F             ; END TERMS
8848   3D9F E7            pop d
8849   3DA0 FD 43         mov [d], b
8850   3DA2             ;; if (damage[8] < 0) 
8851   3DA2             _if143_cond:
8852   3DA2 3B 5D 61      mov d, _damage_data ; $damage
8853   3DA5 D7            push a
8854   3DA6 DA            push d
8855   3DA7 26 08 00      mov b, $8
8856   3DAA E7            pop d
8857   3DAB FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
8858   3DAF E4            pop a
8859   3DB0 2A            mov b, [d]
8860   3DB1             ; START RELATIONAL
8861   3DB1 D7            push a
8862   3DB2 11            mov a, b
8863   3DB3 26 00 00      mov b, $0
8864   3DB6 B0            cmp a, b
8865   3DB7 FD 73         slt ; < (signed)
8866   3DB9 E4            pop a
8867   3DBA             ; END RELATIONAL
8868   3DBA C0 00 00      cmp b, 0
8869   3DBD C6 EA 3D      je _if143_else
8870   3DC0             _if143_true:
8871   3DC0             ;; phaser_energy =phaser_energy * get_rand(100); 
8872   3DC0 FA FB FF      lea d, [bp + -5] ; $phaser_energy
8873   3DC3 DA            push d
8874   3DC4 FA FB FF      lea d, [bp + -5] ; $phaser_energy
8875   3DC7 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
8876   3DCA FD 39         mov c, b ; And place it into C
8877   3DCC 2A            mov b, [d] ; Lower Word in B
8878   3DCD             ; START FACTORS
8879   3DCD D7            push a
8880   3DCE 11            mov a, b
8881   3DCF 26 64 00      mov b, $64
8882   3DD2 FD AB         swp b
8883   3DD4 D8            push b
8884   3DD5 07 21 1D      call get_rand
8885   3DD8 51 02 00      add sp, 2
8886   3DDB AC            mul a, b ; *
8887   3DDC 11            mov a, b
8888   3DDD 27            mov b, a
8889   3DDE E4            pop a
8890   3DDF             ; END FACTORS
8891   3DDF E7            pop d
8892   3DE0 FD 43         mov [d], b
8893   3DE2 28            mov b, c
8894   3DE3 FD 44 02 00   mov [d + 2], b
8895   3DE7 0A 08 3E      jmp _if143_exit
8896   3DEA             _if143_else:
8897   3DEA             ;; phaser_energy = phaser_energy* 100; 
8898   3DEA FA FB FF      lea d, [bp + -5] ; $phaser_energy
8899   3DED DA            push d
8900   3DEE FA FB FF      lea d, [bp + -5] ; $phaser_energy
8901   3DF1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
8902   3DF4 FD 39         mov c, b ; And place it into C
8903   3DF6 2A            mov b, [d] ; Lower Word in B
8904   3DF7             ; START FACTORS
8905   3DF7 D7            push a
8906   3DF8 11            mov a, b
8907   3DF9 26 64 00      mov b, $64
8908   3DFC AC            mul a, b ; *
8909   3DFD 11            mov a, b
8910   3DFE 27            mov b, a
8911   3DFF E4            pop a
8912   3E00             ; END FACTORS
8913   3E00 E7            pop d
8914   3E01 FD 43         mov [d], b
8915   3E03 28            mov b, c
8916   3E04 FD 44 02 00   mov [d + 2], b
8917   3E08             _if143_exit:
8918   3E08             ;; h1 = phaser_energy / klingons; 
8919   3E08 FA F7 FF      lea d, [bp + -9] ; $h1
8920   3E0B DA            push d
8921   3E0C FA FB FF      lea d, [bp + -5] ; $phaser_energy
8922   3E0F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
8923   3E12 FD 39         mov c, b ; And place it into C
8924   3E14 2A            mov b, [d] ; Lower Word in B
8925   3E15             ; START FACTORS
8926   3E15 D7            push a
8927   3E16 11            mov a, b
8928   3E17 3B 4D 61      mov d, _klingons ; $klingons
8929   3E1A 32            mov bl, [d]
8930   3E1B A7 00         mov bh, 0
8931   3E1D AE            div a, b
8932   3E1E 27            mov b, a
8933   3E1F E4            pop a
8934   3E20             ; END FACTORS
8935   3E20 E7            pop d
8936   3E21 FD 43         mov [d], b
8937   3E23 28            mov b, c
8938   3E24 FD 44 02 00   mov [d + 2], b
8939   3E28             ;; for (i = 0; i <= 2; i++) { 
8940   3E28             _for144_init:
8941   3E28 FA FF FF      lea d, [bp + -1] ; $i
8942   3E2B DA            push d
8943   3E2C 26 00 00      mov b, $0
8944   3E2F E7            pop d
8945   3E30 FD 43         mov [d], b
8946   3E32             _for144_cond:
8947   3E32 FA FF FF      lea d, [bp + -1] ; $i
8948   3E35 2A            mov b, [d]
8949   3E36             ; START RELATIONAL
8950   3E36 D7            push a
8951   3E37 11            mov a, b
8952   3E38 26 02 00      mov b, $2
8953   3E3B B0            cmp a, b
8954   3E3C FD 73         slt ; <= (signed)
8955   3E3E E4            pop a
8956   3E3F             ; END RELATIONAL
8957   3E3F C0 00 00      cmp b, 0
8958   3E42 C6 5F 40      je _for144_exit
8959   3E45             _for144_block:
8960   3E45             ;; if (k->energy > 0) { 
8961   3E45             _if145_cond:
8962   3E45 FA F3 FF      lea d, [bp + -13] ; $k
8963   3E48 FD 2A         mov d, [d]
8964   3E4A 58 02 00      add d, 2
8965   3E4D 2A            mov b, [d]
8966   3E4E             ; START RELATIONAL
8967   3E4E D7            push a
8968   3E4F 11            mov a, b
8969   3E50 26 00 00      mov b, $0
8970   3E53 B0            cmp a, b
8971   3E54 FD 7F         sgt ; >
8972   3E56 E4            pop a
8973   3E57             ; END RELATIONAL
8974   3E57 C0 00 00      cmp b, 0
8975   3E5A C6 40 40      je _if145_exit
8976   3E5D             _if145_true:
8977   3E5D             ;; h1 = h1 * (get_rand(100) + 200); 
8978   3E5D FA F7 FF      lea d, [bp + -9] ; $h1
8979   3E60 DA            push d
8980   3E61 FA F7 FF      lea d, [bp + -9] ; $h1
8981   3E64 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
8982   3E67 FD 39         mov c, b ; And place it into C
8983   3E69 2A            mov b, [d] ; Lower Word in B
8984   3E6A             ; START FACTORS
8985   3E6A D7            push a
8986   3E6B 11            mov a, b
8987   3E6C 26 64 00      mov b, $64
8988   3E6F FD AB         swp b
8989   3E71 D8            push b
8990   3E72 07 21 1D      call get_rand
8991   3E75 51 02 00      add sp, 2
8992   3E78             ; START TERMS
8993   3E78 D7            push a
8994   3E79 11            mov a, b
8995   3E7A 26 C8 00      mov b, $c8
8996   3E7D 56            add b, a
8997   3E7E E4            pop a
8998   3E7F             ; END TERMS
8999   3E7F AC            mul a, b ; *
9000   3E80 11            mov a, b
9001   3E81 27            mov b, a
9002   3E82 E4            pop a
9003   3E83             ; END FACTORS
9004   3E83 E7            pop d
9005   3E84 FD 43         mov [d], b
9006   3E86 28            mov b, c
9007   3E87 FD 44 02 00   mov [d + 2], b
9008   3E8B             ;; h1 =h1/ distance_to(k); 
9009   3E8B FA F7 FF      lea d, [bp + -9] ; $h1
9010   3E8E DA            push d
9011   3E8F FA F7 FF      lea d, [bp + -9] ; $h1
9012   3E92 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9013   3E95 FD 39         mov c, b ; And place it into C
9014   3E97 2A            mov b, [d] ; Lower Word in B
9015   3E98             ; START FACTORS
9016   3E98 D7            push a
9017   3E99 11            mov a, b
9018   3E9A FA F3 FF      lea d, [bp + -13] ; $k
9019   3E9D 2A            mov b, [d]
9020   3E9E FD AB         swp b
9021   3EA0 D8            push b
9022   3EA1 07 C4 5F      call distance_to
9023   3EA4 51 02 00      add sp, 2
9024   3EA7 AE            div a, b
9025   3EA8 27            mov b, a
9026   3EA9 E4            pop a
9027   3EAA             ; END FACTORS
9028   3EAA E7            pop d
9029   3EAB FD 43         mov [d], b
9030   3EAD 28            mov b, c
9031   3EAE FD 44 02 00   mov [d + 2], b
9032   3EB2             ;; if (h1 <= 15 * k->energy) {	/* was 0.15 */ 
9033   3EB2             _if146_cond:
9034   3EB2 FA F7 FF      lea d, [bp + -9] ; $h1
9035   3EB5 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9036   3EB8 FD 39         mov c, b ; And place it into C
9037   3EBA 2A            mov b, [d] ; Lower Word in B
9038   3EBB             ; START RELATIONAL
9039   3EBB D7            push a
9040   3EBC FD D8         push g
9041   3EBE 11            mov a, b
9042   3EBF FD 7A         mov g, c
9043   3EC1 26 0F 00      mov b, $f
9044   3EC4             ; START FACTORS
9045   3EC4 D7            push a
9046   3EC5 11            mov a, b
9047   3EC6 FA F3 FF      lea d, [bp + -13] ; $k
9048   3EC9 FD 2A         mov d, [d]
9049   3ECB 58 02 00      add d, 2
9050   3ECE 2A            mov b, [d]
9051   3ECF AC            mul a, b ; *
9052   3ED0 11            mov a, b
9053   3ED1 27            mov b, a
9054   3ED2 E4            pop a
9055   3ED3             ; END FACTORS
9056   3ED3 38 00 00      mov c, 0
9057   3ED6 FD 76         sleu
9058   3ED8 FD F1         pop g
9059   3EDA E4            pop a
9060   3EDB             ; END RELATIONAL
9061   3EDB C0 00 00      cmp b, 0
9062   3EDE C6 08 3F      je _if146_else
9063   3EE1             _if146_true:
9064   3EE1             ;; printf("Sensors show no damage to enemy at %d, %d\n\n", k->y, k->x); 
9065   3EE1 FA F3 FF      lea d, [bp + -13] ; $k
9066   3EE4 FD 2A         mov d, [d]
9067   3EE6 58 01 00      add d, 1
9068   3EE9 32            mov bl, [d]
9069   3EEA A7 00         mov bh, 0
9070   3EEC DD            push bl
9071   3EED FA F3 FF      lea d, [bp + -13] ; $k
9072   3EF0 FD 2A         mov d, [d]
9073   3EF2 58 00 00      add d, 0
9074   3EF5 32            mov bl, [d]
9075   3EF6 A7 00         mov bh, 0
9076   3EF8 DD            push bl
9077   3EF9 26 18 6D      mov b, _s103 ; "Sensors show no damage to enemy at %d, %d\n\n"
9078   3EFC FD AB         swp b
9079   3EFE D8            push b
9080   3EFF 07 D6 05      call printf
9081   3F02 51 04 00      add sp, 4
9082   3F05 0A 3D 40      jmp _if146_exit
9083   3F08             _if146_else:
9084   3F08             ;; h = FROM_FIXED00(h1); 
9085   3F08 FA F5 FF      lea d, [bp + -11] ; $h
9086   3F0B DA            push d
9087   3F0C FA F7 FF      lea d, [bp + -9] ; $h1
9088   3F0F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
9089   3F12 FD 39         mov c, b ; And place it into C
9090   3F14 2A            mov b, [d] ; Lower Word in B
9091   3F15 FD AB         swp b
9092   3F17 D8            push b
9093   3F18 07 10 1D      call FROM_FIXED00
9094   3F1B 51 02 00      add sp, 2
9095   3F1E E7            pop d
9096   3F1F FD 43         mov [d], b
9097   3F21             ;; k->energy = k->energy - h; 
9098   3F21 FA F3 FF      lea d, [bp + -13] ; $k
9099   3F24 FD 2A         mov d, [d]
9100   3F26 58 02 00      add d, 2
9101   3F29 DA            push d
9102   3F2A FA F3 FF      lea d, [bp + -13] ; $k
9103   3F2D FD 2A         mov d, [d]
9104   3F2F 58 02 00      add d, 2
9105   3F32 2A            mov b, [d]
9106   3F33             ; START TERMS
9107   3F33 D7            push a
9108   3F34 11            mov a, b
9109   3F35 FA F5 FF      lea d, [bp + -11] ; $h
9110   3F38 2A            mov b, [d]
9111   3F39 60            sub a, b
9112   3F3A 27            mov b, a
9113   3F3B E4            pop a
9114   3F3C             ; END TERMS
9115   3F3C E7            pop d
9116   3F3D FD 43         mov [d], b
9117   3F3F             ;; printf("%d unit hit on Klingon at sector %d, %d\n", 
9118   3F3F FA F3 FF      lea d, [bp + -13] ; $k
9119   3F42 FD 2A         mov d, [d]
9120   3F44 58 01 00      add d, 1
9121   3F47 32            mov bl, [d]
9122   3F48 A7 00         mov bh, 0
9123   3F4A DD            push bl
9124   3F4B FA F3 FF      lea d, [bp + -13] ; $k
9125   3F4E FD 2A         mov d, [d]
9126   3F50 58 00 00      add d, 0
9127   3F53 32            mov bl, [d]
9128   3F54 A7 00         mov bh, 0
9129   3F56 DD            push bl
9130   3F57 FA F5 FF      lea d, [bp + -11] ; $h
9131   3F5A 2A            mov b, [d]
9132   3F5B FD AB         swp b
9133   3F5D D8            push b
9134   3F5E 26 44 6D      mov b, _s104 ; "%d unit hit on Klingon at sector %d, %d\n"
9135   3F61 FD AB         swp b
9136   3F63 D8            push b
9137   3F64 07 D6 05      call printf
9138   3F67 51 06 00      add sp, 6
9139   3F6A             ;; if (k->energy <= 0) { 
9140   3F6A             _if147_cond:
9141   3F6A FA F3 FF      lea d, [bp + -13] ; $k
9142   3F6D FD 2A         mov d, [d]
9143   3F6F 58 02 00      add d, 2
9144   3F72 2A            mov b, [d]
9145   3F73             ; START RELATIONAL
9146   3F73 D7            push a
9147   3F74 11            mov a, b
9148   3F75 26 00 00      mov b, $0
9149   3F78 B0            cmp a, b
9150   3F79 FD 73         slt ; <= (signed)
9151   3F7B E4            pop a
9152   3F7C             ; END RELATIONAL
9153   3F7C C0 00 00      cmp b, 0
9154   3F7F C6 25 40      je _if147_else
9155   3F82             _if147_true:
9156   3F82             ;; puts("*** Klingon Destroyed ***\n"); 
9157   3F82 26 6D 6D      mov b, _s105 ; "*** Klingon Destroyed ***\n"
9158   3F85 FD AB         swp b
9159   3F87 D8            push b
9160   3F88 07 36 13      call puts
9161   3F8B 51 02 00      add sp, 2
9162   3F8E             ;; klingons--; 
9163   3F8E 3B 4D 61      mov d, _klingons ; $klingons
9164   3F91 32            mov bl, [d]
9165   3F92 A7 00         mov bh, 0
9166   3F94 D8            push b
9167   3F95 FD 7D         dec b
9168   3F97 3B 4D 61      mov d, _klingons ; $klingons
9169   3F9A FD 43         mov [d], b
9170   3F9C E5            pop b
9171   3F9D             ;; klingons_left--; 
9172   3F9D 3B 4F 61      mov d, _klingons_left ; $klingons_left
9173   3FA0 32            mov bl, [d]
9174   3FA1 A7 00         mov bh, 0
9175   3FA3 D8            push b
9176   3FA4 FD 7D         dec b
9177   3FA6 3B 4F 61      mov d, _klingons_left ; $klingons_left
9178   3FA9 FD 43         mov [d], b
9179   3FAB E5            pop b
9180   3FAC             ;; wipe_klingon(k); 
9181   3FAC FA F3 FF      lea d, [bp + -13] ; $k
9182   3FAF 2A            mov b, [d]
9183   3FB0 FD AB         swp b
9184   3FB2 D8            push b
9185   3FB3 07 68 3B      call wipe_klingon
9186   3FB6 51 02 00      add sp, 2
9187   3FB9             ;; k->energy = 0; 
9188   3FB9 FA F3 FF      lea d, [bp + -13] ; $k
9189   3FBC FD 2A         mov d, [d]
9190   3FBE 58 02 00      add d, 2
9191   3FC1 DA            push d
9192   3FC2 26 00 00      mov b, $0
9193   3FC5 E7            pop d
9194   3FC6 FD 43         mov [d], b
9195   3FC8             ;; map[quad_y][quad_x] = map[quad_y][quad_x] - 0x100; 
9196   3FC8 3B 9F 60      mov d, _map_data ; $map
9197   3FCB D7            push a
9198   3FCC DA            push d
9199   3FCD 3B 52 61      mov d, _quad_y ; $quad_y
9200   3FD0 2A            mov b, [d]
9201   3FD1 E7            pop d
9202   3FD2 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
9203   3FD6 DA            push d
9204   3FD7 3B 54 61      mov d, _quad_x ; $quad_x
9205   3FDA 2A            mov b, [d]
9206   3FDB E7            pop d
9207   3FDC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9208   3FE0 E4            pop a
9209   3FE1 DA            push d
9210   3FE2 3B 9F 60      mov d, _map_data ; $map
9211   3FE5 D7            push a
9212   3FE6 DA            push d
9213   3FE7 3B 52 61      mov d, _quad_y ; $quad_y
9214   3FEA 2A            mov b, [d]
9215   3FEB E7            pop d
9216   3FEC FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
9217   3FF0 DA            push d
9218   3FF1 3B 54 61      mov d, _quad_x ; $quad_x
9219   3FF4 2A            mov b, [d]
9220   3FF5 E7            pop d
9221   3FF6 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9222   3FFA E4            pop a
9223   3FFB 2A            mov b, [d]
9224   3FFC             ; START TERMS
9225   3FFC D7            push a
9226   3FFD 11            mov a, b
9227   3FFE 26 00 01      mov b, $100
9228   4001 60            sub a, b
9229   4002 27            mov b, a
9230   4003 E4            pop a
9231   4004             ; END TERMS
9232   4004 E7            pop d
9233   4005 FD 43         mov [d], b
9234   4007             ;; if (klingons_left <= 0) 
9235   4007             _if148_cond:
9236   4007 3B 4F 61      mov d, _klingons_left ; $klingons_left
9237   400A 32            mov bl, [d]
9238   400B A7 00         mov bh, 0
9239   400D             ; START RELATIONAL
9240   400D D7            push a
9241   400E 11            mov a, b
9242   400F 26 00 00      mov b, $0
9243   4012 B0            cmp a, b
9244   4013 FD 75         slu ; <= (unsigned)
9245   4015 E4            pop a
9246   4016             ; END RELATIONAL
9247   4016 C0 00 00      cmp b, 0
9248   4019 C6 22 40      je _if148_exit
9249   401C             _if148_true:
9250   401C             ;; won_game(); 
9251   401C 07 29 55      call won_game
9252   401F 0A 22 40      jmp _if148_exit
9253   4022             _if148_exit:
9254   4022 0A 3D 40      jmp _if147_exit
9255   4025             _if147_else:
9256   4025             ;; printf("   (Sensors show %d units remaining.)\n\n", k->energy); 
9257   4025 FA F3 FF      lea d, [bp + -13] ; $k
9258   4028 FD 2A         mov d, [d]
9259   402A 58 02 00      add d, 2
9260   402D 2A            mov b, [d]
9261   402E FD AB         swp b
9262   4030 D8            push b
9263   4031 26 88 6D      mov b, _s106 ; "   (Sensors show %d units remaining.)\n\n"
9264   4034 FD AB         swp b
9265   4036 D8            push b
9266   4037 07 D6 05      call printf
9267   403A 51 04 00      add sp, 4
9268   403D             _if147_exit:
9269   403D             _if146_exit:
9270   403D 0A 40 40      jmp _if145_exit
9271   4040             _if145_exit:
9272   4040             ;; k++; 
9273   4040 FA F3 FF      lea d, [bp + -13] ; $k
9274   4043 2A            mov b, [d]
9275   4044 D8            push b
9276   4045 FD 77         inc b
9277   4047 FD 77         inc b
9278   4049 FA F3 FF      lea d, [bp + -13] ; $k
9279   404C FD 43         mov [d], b
9280   404E E5            pop b
9281   404F             _for144_update:
9282   404F FA FF FF      lea d, [bp + -1] ; $i
9283   4052 2A            mov b, [d]
9284   4053 D8            push b
9285   4054 FD 77         inc b
9286   4056 FA FF FF      lea d, [bp + -1] ; $i
9287   4059 FD 43         mov [d], b
9288   405B E5            pop b
9289   405C 0A 32 3E      jmp _for144_cond
9290   405F             _for144_exit:
9291   405F             ;; klingons_shoot(); 
9292   405F 07 DE 56      call klingons_shoot
9293   4062 F9            leave
9294   4063 09            ret
9295   4064             
9296   4064             photon_torpedoes:
9297   4064 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9298   4067             ; $x3 
9299   4067             ; $y3 
9300   4067             ; $c1 
9301   4067             ; $c2 
9302   4067             ; $c3 
9303   4067             ; $c4 
9304   4067             ; $x 
9305   4067             ; $y 
9306   4067             ; $x1 
9307   4067             ; $x2 
9308   4067             ; $p 
9309   4067 52 15 00      sub sp, 21
9310   406A             ;; if (torps <= 0) { 
9311   406A             _if149_cond:
9312   406A 3B 50 61      mov d, _torps ; $torps
9313   406D 32            mov bl, [d]
9314   406E A7 00         mov bh, 0
9315   4070             ; START RELATIONAL
9316   4070 D7            push a
9317   4071 11            mov a, b
9318   4072 26 00 00      mov b, $0
9319   4075 B0            cmp a, b
9320   4076 FD 75         slu ; <= (unsigned)
9321   4078 E4            pop a
9322   4079             ; END RELATIONAL
9323   4079 C0 00 00      cmp b, 0
9324   407C C6 90 40      je _if149_exit
9325   407F             _if149_true:
9326   407F             ;; puts("All photon torpedoes expended"); 
9327   407F 26 B0 6D      mov b, _s107 ; "All photon torpedoes expended"
9328   4082 FD AB         swp b
9329   4084 D8            push b
9330   4085 07 36 13      call puts
9331   4088 51 02 00      add sp, 2
9332   408B             ;; return; 
9333   408B F9            leave
9334   408C 09            ret
9335   408D 0A 90 40      jmp _if149_exit
9336   4090             _if149_exit:
9337   4090             ;; if (inoperable(5)) 
9338   4090             _if150_cond:
9339   4090 26 05 00      mov b, $5
9340   4093 DD            push bl
9341   4094 07 50 20      call inoperable
9342   4097 51 01 00      add sp, 1
9343   409A C0 00 00      cmp b, 0
9344   409D C6 A5 40      je _if150_exit
9345   40A0             _if150_true:
9346   40A0             ;; return; 
9347   40A0 F9            leave
9348   40A1 09            ret
9349   40A2 0A A5 40      jmp _if150_exit
9350   40A5             _if150_exit:
9351   40A5             ;; puts("Course (0-9): "); 
9352   40A5 26 F2 67      mov b, _s70 ; "Course (0-9): "
9353   40A8 FD AB         swp b
9354   40AA D8            push b
9355   40AB 07 36 13      call puts
9356   40AE 51 02 00      add sp, 2
9357   40B1             ;; c1 = input_f00(); 
9358   40B1 FA FB FF      lea d, [bp + -5] ; $c1
9359   40B4 DA            push d
9360   40B5 07 47 1E      call input_f00
9361   40B8 E7            pop d
9362   40B9 FD 43         mov [d], b
9363   40BB             ;; if (c1 == 900) 
9364   40BB             _if151_cond:
9365   40BB FA FB FF      lea d, [bp + -5] ; $c1
9366   40BE 2A            mov b, [d]
9367   40BF             ; START RELATIONAL
9368   40BF D7            push a
9369   40C0 11            mov a, b
9370   40C1 26 84 03      mov b, $384
9371   40C4 B0            cmp a, b
9372   40C5 FD 71         seq ; ==
9373   40C7 E4            pop a
9374   40C8             ; END RELATIONAL
9375   40C8 C0 00 00      cmp b, 0
9376   40CB C6 DB 40      je _if151_exit
9377   40CE             _if151_true:
9378   40CE             ;; c1 = 100; 
9379   40CE FA FB FF      lea d, [bp + -5] ; $c1
9380   40D1 DA            push d
9381   40D2 26 64 00      mov b, $64
9382   40D5 E7            pop d
9383   40D6 FD 43         mov [d], b
9384   40D8 0A DB 40      jmp _if151_exit
9385   40DB             _if151_exit:
9386   40DB             ;; if (c1 < 100 || c1 >= 900) { 
9387   40DB             _if152_cond:
9388   40DB FA FB FF      lea d, [bp + -5] ; $c1
9389   40DE 2A            mov b, [d]
9390   40DF             ; START RELATIONAL
9391   40DF D7            push a
9392   40E0 11            mov a, b
9393   40E1 26 64 00      mov b, $64
9394   40E4 B0            cmp a, b
9395   40E5 FD 73         slt ; < (signed)
9396   40E7 E4            pop a
9397   40E8             ; END RELATIONAL
9398   40E8 D7            push a
9399   40E9 11            mov a, b
9400   40EA FA FB FF      lea d, [bp + -5] ; $c1
9401   40ED 2A            mov b, [d]
9402   40EE             ; START RELATIONAL
9403   40EE D7            push a
9404   40EF 11            mov a, b
9405   40F0 26 84 03      mov b, $384
9406   40F3 B0            cmp a, b
9407   40F4 FD 80         sge ; >=
9408   40F6 E4            pop a
9409   40F7             ; END RELATIONAL
9410   40F7 FD A8         sor a, b ; ||
9411   40F9 E4            pop a
9412   40FA C0 00 00      cmp b, 0
9413   40FD C6 18 41      je _if152_exit
9414   4100             _if152_true:
9415   4100             ;; printf("Ensign Chekov%s", inc_1); 
9416   4100 3B EB 61      mov d, _inc_1 ; $inc_1
9417   4103 2A            mov b, [d]
9418   4104 FD AB         swp b
9419   4106 D8            push b
9420   4107 26 CE 6D      mov b, _s108 ; "Ensign Chekov%s"
9421   410A FD AB         swp b
9422   410C D8            push b
9423   410D 07 D6 05      call printf
9424   4110 51 04 00      add sp, 4
9425   4113             ;; return; 
9426   4113 F9            leave
9427   4114 09            ret
9428   4115 0A 18 41      jmp _if152_exit
9429   4118             _if152_exit:
9430   4118             ;; energy = energy - 2; 
9431   4118 3B 9B 60      mov d, _energy ; $energy
9432   411B DA            push d
9433   411C 3B 9B 60      mov d, _energy ; $energy
9434   411F 2A            mov b, [d]
9435   4120             ; START TERMS
9436   4120 D7            push a
9437   4121 11            mov a, b
9438   4122 26 02 00      mov b, $2
9439   4125 60            sub a, b
9440   4126 27            mov b, a
9441   4127 E4            pop a
9442   4128             ; END TERMS
9443   4128 E7            pop d
9444   4129 FD 43         mov [d], b
9445   412B             ;; torps--; 
9446   412B 3B 50 61      mov d, _torps ; $torps
9447   412E 32            mov bl, [d]
9448   412F A7 00         mov bh, 0
9449   4131 D8            push b
9450   4132 FD 7D         dec b
9451   4134 3B 50 61      mov d, _torps ; $torps
9452   4137 FD 43         mov [d], b
9453   4139 E5            pop b
9454   413A             ;; c2 = FROM_FIXED00(c1);	/* Integer part */ 
9455   413A FA F9 FF      lea d, [bp + -7] ; $c2
9456   413D DA            push d
9457   413E FA FB FF      lea d, [bp + -5] ; $c1
9458   4141 2A            mov b, [d]
9459   4142 FD AB         swp b
9460   4144 D8            push b
9461   4145 07 10 1D      call FROM_FIXED00
9462   4148 51 02 00      add sp, 2
9463   414B E7            pop d
9464   414C FD 43         mov [d], b
9465   414E             ;; c3 = c2 + 1;		/* Next integer part */ 
9466   414E FA F7 FF      lea d, [bp + -9] ; $c3
9467   4151 DA            push d
9468   4152 FA F9 FF      lea d, [bp + -7] ; $c2
9469   4155 2A            mov b, [d]
9470   4156             ; START TERMS
9471   4156 D7            push a
9472   4157 11            mov a, b
9473   4158 26 01 00      mov b, $1
9474   415B 56            add b, a
9475   415C E4            pop a
9476   415D             ; END TERMS
9477   415D E7            pop d
9478   415E FD 43         mov [d], b
9479   4160             ;; c4 = (c1 - TO_FIXED00(c2));	/* Fractional element in fixed point */ 
9480   4160 FA F5 FF      lea d, [bp + -11] ; $c4
9481   4163 DA            push d
9482   4164 FA FB FF      lea d, [bp + -5] ; $c1
9483   4167 2A            mov b, [d]
9484   4168             ; START TERMS
9485   4168 D7            push a
9486   4169 11            mov a, b
9487   416A FA F9 FF      lea d, [bp + -7] ; $c2
9488   416D 2A            mov b, [d]
9489   416E FD AB         swp b
9490   4170 D8            push b
9491   4171 07 FE 1C      call TO_FIXED00
9492   4174 51 02 00      add sp, 2
9493   4177 60            sub a, b
9494   4178 27            mov b, a
9495   4179 E4            pop a
9496   417A             ; END TERMS
9497   417A E7            pop d
9498   417B FD 43         mov [d], b
9499   417D             ;; x1 = 100 * c[1][c2] + (c[1][c3] - c[1][c2]) * c4; 
9500   417D FA EF FF      lea d, [bp + -17] ; $x1
9501   4180 DA            push d
9502   4181 26 64 00      mov b, $64
9503   4184             ; START FACTORS
9504   4184 D7            push a
9505   4185 11            mov a, b
9506   4186 3B 7B 60      mov d, _c_data ; $c
9507   4189 D7            push a
9508   418A DA            push d
9509   418B 26 01 00      mov b, $1
9510   418E E7            pop d
9511   418F FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
9512   4193 DA            push d
9513   4194 FA F9 FF      lea d, [bp + -7] ; $c2
9514   4197 2A            mov b, [d]
9515   4198 E7            pop d
9516   4199 5A            add d, b
9517   419A E4            pop a
9518   419B 32            mov bl, [d]
9519   419C A7 00         mov bh, 0
9520   419E AC            mul a, b ; *
9521   419F 11            mov a, b
9522   41A0 27            mov b, a
9523   41A1 E4            pop a
9524   41A2             ; END FACTORS
9525   41A2             ; START TERMS
9526   41A2 D7            push a
9527   41A3 11            mov a, b
9528   41A4 3B 7B 60      mov d, _c_data ; $c
9529   41A7 D7            push a
9530   41A8 DA            push d
9531   41A9 26 01 00      mov b, $1
9532   41AC E7            pop d
9533   41AD FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
9534   41B1 DA            push d
9535   41B2 FA F7 FF      lea d, [bp + -9] ; $c3
9536   41B5 2A            mov b, [d]
9537   41B6 E7            pop d
9538   41B7 5A            add d, b
9539   41B8 E4            pop a
9540   41B9 32            mov bl, [d]
9541   41BA A7 00         mov bh, 0
9542   41BC             ; START TERMS
9543   41BC D7            push a
9544   41BD 11            mov a, b
9545   41BE 3B 7B 60      mov d, _c_data ; $c
9546   41C1 D7            push a
9547   41C2 DA            push d
9548   41C3 26 01 00      mov b, $1
9549   41C6 E7            pop d
9550   41C7 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
9551   41CB DA            push d
9552   41CC FA F9 FF      lea d, [bp + -7] ; $c2
9553   41CF 2A            mov b, [d]
9554   41D0 E7            pop d
9555   41D1 5A            add d, b
9556   41D2 E4            pop a
9557   41D3 32            mov bl, [d]
9558   41D4 A7 00         mov bh, 0
9559   41D6 60            sub a, b
9560   41D7 27            mov b, a
9561   41D8 E4            pop a
9562   41D9             ; END TERMS
9563   41D9             ; START FACTORS
9564   41D9 D7            push a
9565   41DA 11            mov a, b
9566   41DB FA F5 FF      lea d, [bp + -11] ; $c4
9567   41DE 2A            mov b, [d]
9568   41DF AC            mul a, b ; *
9569   41E0 11            mov a, b
9570   41E1 27            mov b, a
9571   41E2 E4            pop a
9572   41E3             ; END FACTORS
9573   41E3 56            add b, a
9574   41E4 E4            pop a
9575   41E5             ; END TERMS
9576   41E5 E7            pop d
9577   41E6 FD 43         mov [d], b
9578   41E8             ;; x2 = 100 * c[2][c2] + (c[2][c3] - c[2][c2]) * c4; 
9579   41E8 FA ED FF      lea d, [bp + -19] ; $x2
9580   41EB DA            push d
9581   41EC 26 64 00      mov b, $64
9582   41EF             ; START FACTORS
9583   41EF D7            push a
9584   41F0 11            mov a, b
9585   41F1 3B 7B 60      mov d, _c_data ; $c
9586   41F4 D7            push a
9587   41F5 DA            push d
9588   41F6 26 02 00      mov b, $2
9589   41F9 E7            pop d
9590   41FA FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
9591   41FE DA            push d
9592   41FF FA F9 FF      lea d, [bp + -7] ; $c2
9593   4202 2A            mov b, [d]
9594   4203 E7            pop d
9595   4204 5A            add d, b
9596   4205 E4            pop a
9597   4206 32            mov bl, [d]
9598   4207 A7 00         mov bh, 0
9599   4209 AC            mul a, b ; *
9600   420A 11            mov a, b
9601   420B 27            mov b, a
9602   420C E4            pop a
9603   420D             ; END FACTORS
9604   420D             ; START TERMS
9605   420D D7            push a
9606   420E 11            mov a, b
9607   420F 3B 7B 60      mov d, _c_data ; $c
9608   4212 D7            push a
9609   4213 DA            push d
9610   4214 26 02 00      mov b, $2
9611   4217 E7            pop d
9612   4218 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
9613   421C DA            push d
9614   421D FA F7 FF      lea d, [bp + -9] ; $c3
9615   4220 2A            mov b, [d]
9616   4221 E7            pop d
9617   4222 5A            add d, b
9618   4223 E4            pop a
9619   4224 32            mov bl, [d]
9620   4225 A7 00         mov bh, 0
9621   4227             ; START TERMS
9622   4227 D7            push a
9623   4228 11            mov a, b
9624   4229 3B 7B 60      mov d, _c_data ; $c
9625   422C D7            push a
9626   422D DA            push d
9627   422E 26 02 00      mov b, $2
9628   4231 E7            pop d
9629   4232 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
9630   4236 DA            push d
9631   4237 FA F9 FF      lea d, [bp + -7] ; $c2
9632   423A 2A            mov b, [d]
9633   423B E7            pop d
9634   423C 5A            add d, b
9635   423D E4            pop a
9636   423E 32            mov bl, [d]
9637   423F A7 00         mov bh, 0
9638   4241 60            sub a, b
9639   4242 27            mov b, a
9640   4243 E4            pop a
9641   4244             ; END TERMS
9642   4244             ; START FACTORS
9643   4244 D7            push a
9644   4245 11            mov a, b
9645   4246 FA F5 FF      lea d, [bp + -11] ; $c4
9646   4249 2A            mov b, [d]
9647   424A AC            mul a, b ; *
9648   424B 11            mov a, b
9649   424C 27            mov b, a
9650   424D E4            pop a
9651   424E             ; END FACTORS
9652   424E 56            add b, a
9653   424F E4            pop a
9654   4250             ; END TERMS
9655   4250 E7            pop d
9656   4251 FD 43         mov [d], b
9657   4253             ;; x = ship_y + x1; 
9658   4253 FA F3 FF      lea d, [bp + -13] ; $x
9659   4256 DA            push d
9660   4257 3B 71 61      mov d, _ship_y ; $ship_y
9661   425A 2A            mov b, [d]
9662   425B             ; START TERMS
9663   425B D7            push a
9664   425C 11            mov a, b
9665   425D FA EF FF      lea d, [bp + -17] ; $x1
9666   4260 2A            mov b, [d]
9667   4261 56            add b, a
9668   4262 E4            pop a
9669   4263             ; END TERMS
9670   4263 E7            pop d
9671   4264 FD 43         mov [d], b
9672   4266             ;; y = ship_x + x2; 
9673   4266 FA F1 FF      lea d, [bp + -15] ; $y
9674   4269 DA            push d
9675   426A 3B 73 61      mov d, _ship_x ; $ship_x
9676   426D 2A            mov b, [d]
9677   426E             ; START TERMS
9678   426E D7            push a
9679   426F 11            mov a, b
9680   4270 FA ED FF      lea d, [bp + -19] ; $x2
9681   4273 2A            mov b, [d]
9682   4274 56            add b, a
9683   4275 E4            pop a
9684   4276             ; END TERMS
9685   4276 E7            pop d
9686   4277 FD 43         mov [d], b
9687   4279             ;; x3 = FROM_FIXED00(x); 
9688   4279 FA FF FF      lea d, [bp + -1] ; $x3
9689   427C DA            push d
9690   427D FA F3 FF      lea d, [bp + -13] ; $x
9691   4280 2A            mov b, [d]
9692   4281 FD AB         swp b
9693   4283 D8            push b
9694   4284 07 10 1D      call FROM_FIXED00
9695   4287 51 02 00      add sp, 2
9696   428A E7            pop d
9697   428B FD 43         mov [d], b
9698   428D             ;; y3 = FROM_FIXED00(y); 
9699   428D FA FD FF      lea d, [bp + -3] ; $y3
9700   4290 DA            push d
9701   4291 FA F1 FF      lea d, [bp + -15] ; $y
9702   4294 2A            mov b, [d]
9703   4295 FD AB         swp b
9704   4297 D8            push b
9705   4298 07 10 1D      call FROM_FIXED00
9706   429B 51 02 00      add sp, 2
9707   429E E7            pop d
9708   429F FD 43         mov [d], b
9709   42A1             ;; puts("Torpedo Track:"); 
9710   42A1 26 DE 6D      mov b, _s109 ; "Torpedo Track:"
9711   42A4 FD AB         swp b
9712   42A6 D8            push b
9713   42A7 07 36 13      call puts
9714   42AA 51 02 00      add sp, 2
9715   42AD             ;; while (x3 >= 1 && x3 <= 8 && y3 >= 1 && y3 <= 8) { 
9716   42AD             _while153_cond:
9717   42AD FA FF FF      lea d, [bp + -1] ; $x3
9718   42B0 2A            mov b, [d]
9719   42B1             ; START RELATIONAL
9720   42B1 D7            push a
9721   42B2 11            mov a, b
9722   42B3 26 01 00      mov b, $1
9723   42B6 B0            cmp a, b
9724   42B7 FD 80         sge ; >=
9725   42B9 E4            pop a
9726   42BA             ; END RELATIONAL
9727   42BA D7            push a
9728   42BB 11            mov a, b
9729   42BC FA FF FF      lea d, [bp + -1] ; $x3
9730   42BF 2A            mov b, [d]
9731   42C0             ; START RELATIONAL
9732   42C0 D7            push a
9733   42C1 11            mov a, b
9734   42C2 26 08 00      mov b, $8
9735   42C5 B0            cmp a, b
9736   42C6 FD 73         slt ; <= (signed)
9737   42C8 E4            pop a
9738   42C9             ; END RELATIONAL
9739   42C9 FD A7         sand a, b
9740   42CB 11            mov a, b
9741   42CC FA FD FF      lea d, [bp + -3] ; $y3
9742   42CF 2A            mov b, [d]
9743   42D0             ; START RELATIONAL
9744   42D0 D7            push a
9745   42D1 11            mov a, b
9746   42D2 26 01 00      mov b, $1
9747   42D5 B0            cmp a, b
9748   42D6 FD 80         sge ; >=
9749   42D8 E4            pop a
9750   42D9             ; END RELATIONAL
9751   42D9 FD A7         sand a, b
9752   42DB 11            mov a, b
9753   42DC FA FD FF      lea d, [bp + -3] ; $y3
9754   42DF 2A            mov b, [d]
9755   42E0             ; START RELATIONAL
9756   42E0 D7            push a
9757   42E1 11            mov a, b
9758   42E2 26 08 00      mov b, $8
9759   42E5 B0            cmp a, b
9760   42E6 FD 73         slt ; <= (signed)
9761   42E8 E4            pop a
9762   42E9             ; END RELATIONAL
9763   42E9 FD A7         sand a, b
9764   42EB E4            pop a
9765   42EC C0 00 00      cmp b, 0
9766   42EF C6 CC 43      je _while153_exit
9767   42F2             _while153_block:
9768   42F2             ;; printf("    %d, %d\n", x3, y3); 
9769   42F2 FA FD FF      lea d, [bp + -3] ; $y3
9770   42F5 2A            mov b, [d]
9771   42F6 FD AB         swp b
9772   42F8 D8            push b
9773   42F9 FA FF FF      lea d, [bp + -1] ; $x3
9774   42FC 2A            mov b, [d]
9775   42FD FD AB         swp b
9776   42FF D8            push b
9777   4300 26 ED 6D      mov b, _s110 ; "    %d, %d\n"
9778   4303 FD AB         swp b
9779   4305 D8            push b
9780   4306 07 D6 05      call printf
9781   4309 51 06 00      add sp, 6
9782   430C             ;; p = quad[x3+-1][y3+-1]; 
9783   430C FA EC FF      lea d, [bp + -20] ; $p
9784   430F DA            push d
9785   4310 3B 77 61      mov d, _quad_data ; $quad
9786   4313 D7            push a
9787   4314 DA            push d
9788   4315 FA FF FF      lea d, [bp + -1] ; $x3
9789   4318 2A            mov b, [d]
9790   4319             ; START TERMS
9791   4319 D7            push a
9792   431A 11            mov a, b
9793   431B 26 FF FF      mov b, $ffff
9794   431E 56            add b, a
9795   431F E4            pop a
9796   4320             ; END TERMS
9797   4320 E7            pop d
9798   4321 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
9799   4325 DA            push d
9800   4326 FA FD FF      lea d, [bp + -3] ; $y3
9801   4329 2A            mov b, [d]
9802   432A             ; START TERMS
9803   432A D7            push a
9804   432B 11            mov a, b
9805   432C 26 FF FF      mov b, $ffff
9806   432F 56            add b, a
9807   4330 E4            pop a
9808   4331             ; END TERMS
9809   4331 E7            pop d
9810   4332 5A            add d, b
9811   4333 E4            pop a
9812   4334 32            mov bl, [d]
9813   4335 A7 00         mov bh, 0
9814   4337 E7            pop d
9815   4338 FD 3E         mov [d], bl
9816   433A             ;; if (p !=  		0       && p !=  		4     ) { 
9817   433A             _if154_cond:
9818   433A FA EC FF      lea d, [bp + -20] ; $p
9819   433D 32            mov bl, [d]
9820   433E A7 00         mov bh, 0
9821   4340             ; START RELATIONAL
9822   4340 D7            push a
9823   4341 11            mov a, b
9824   4342 26 00 00      mov b, $0
9825   4345 B0            cmp a, b
9826   4346 FD 72         sneq ; !=
9827   4348 E4            pop a
9828   4349             ; END RELATIONAL
9829   4349 D7            push a
9830   434A 11            mov a, b
9831   434B FA EC FF      lea d, [bp + -20] ; $p
9832   434E 32            mov bl, [d]
9833   434F A7 00         mov bh, 0
9834   4351             ; START RELATIONAL
9835   4351 D7            push a
9836   4352 11            mov a, b
9837   4353 26 04 00      mov b, $4
9838   4356 B0            cmp a, b
9839   4357 FD 72         sneq ; !=
9840   4359 E4            pop a
9841   435A             ; END RELATIONAL
9842   435A FD A7         sand a, b
9843   435C E4            pop a
9844   435D C0 00 00      cmp b, 0
9845   4360 C6 7B 43      je _if154_exit
9846   4363             _if154_true:
9847   4363             ;; torpedo_hit(x3, y3); 
9848   4363 FA FD FF      lea d, [bp + -3] ; $y3
9849   4366 2A            mov b, [d]
9850   4367 DD            push bl
9851   4368 FA FF FF      lea d, [bp + -1] ; $x3
9852   436B 2A            mov b, [d]
9853   436C DD            push bl
9854   436D 07 DD 43      call torpedo_hit
9855   4370 51 02 00      add sp, 2
9856   4373             ;; klingons_shoot(); 
9857   4373 07 DE 56      call klingons_shoot
9858   4376             ;; return; 
9859   4376 F9            leave
9860   4377 09            ret
9861   4378 0A 7B 43      jmp _if154_exit
9862   437B             _if154_exit:
9863   437B             ;; x = x + x1; 
9864   437B FA F3 FF      lea d, [bp + -13] ; $x
9865   437E DA            push d
9866   437F FA F3 FF      lea d, [bp + -13] ; $x
9867   4382 2A            mov b, [d]
9868   4383             ; START TERMS
9869   4383 D7            push a
9870   4384 11            mov a, b
9871   4385 FA EF FF      lea d, [bp + -17] ; $x1
9872   4388 2A            mov b, [d]
9873   4389 56            add b, a
9874   438A E4            pop a
9875   438B             ; END TERMS
9876   438B E7            pop d
9877   438C FD 43         mov [d], b
9878   438E             ;; y = y + x2; 
9879   438E FA F1 FF      lea d, [bp + -15] ; $y
9880   4391 DA            push d
9881   4392 FA F1 FF      lea d, [bp + -15] ; $y
9882   4395 2A            mov b, [d]
9883   4396             ; START TERMS
9884   4396 D7            push a
9885   4397 11            mov a, b
9886   4398 FA ED FF      lea d, [bp + -19] ; $x2
9887   439B 2A            mov b, [d]
9888   439C 56            add b, a
9889   439D E4            pop a
9890   439E             ; END TERMS
9891   439E E7            pop d
9892   439F FD 43         mov [d], b
9893   43A1             ;; x3 = FROM_FIXED00(x); 
9894   43A1 FA FF FF      lea d, [bp + -1] ; $x3
9895   43A4 DA            push d
9896   43A5 FA F3 FF      lea d, [bp + -13] ; $x
9897   43A8 2A            mov b, [d]
9898   43A9 FD AB         swp b
9899   43AB D8            push b
9900   43AC 07 10 1D      call FROM_FIXED00
9901   43AF 51 02 00      add sp, 2
9902   43B2 E7            pop d
9903   43B3 FD 43         mov [d], b
9904   43B5             ;; y3 = FROM_FIXED00(y); 
9905   43B5 FA FD FF      lea d, [bp + -3] ; $y3
9906   43B8 DA            push d
9907   43B9 FA F1 FF      lea d, [bp + -15] ; $y
9908   43BC 2A            mov b, [d]
9909   43BD FD AB         swp b
9910   43BF D8            push b
9911   43C0 07 10 1D      call FROM_FIXED00
9912   43C3 51 02 00      add sp, 2
9913   43C6 E7            pop d
9914   43C7 FD 43         mov [d], b
9915   43C9 0A AD 42      jmp _while153_cond
9916   43CC             _while153_exit:
9917   43CC             ;; puts("Torpedo Missed\n"); 
9918   43CC 26 F9 6D      mov b, _s111 ; "Torpedo Missed\n"
9919   43CF FD AB         swp b
9920   43D1 D8            push b
9921   43D2 07 36 13      call puts
9922   43D5 51 02 00      add sp, 2
9923   43D8             ;; klingons_shoot(); 
9924   43D8 07 DE 56      call klingons_shoot
9925   43DB F9            leave
9926   43DC 09            ret
9927   43DD             
9928   43DD             torpedo_hit:
9929   43DD F8 00 00      enter 0 ; (push bp; mov bp, sp)
9930   43E0             ; $i 
9931   43E0             ; $k 
9932   43E0 52 04 00      sub sp, 4
9933   43E3             ;; switch(quad[yp+-1][xp+-1]) { 
9934   43E3             _switch155_expr:
9935   43E3 3B 77 61      mov d, _quad_data ; $quad
9936   43E6 D7            push a
9937   43E7 DA            push d
9938   43E8 FA 05 00      lea d, [bp + 5] ; $yp
9939   43EB 32            mov bl, [d]
9940   43EC A7 00         mov bh, 0
9941   43EE             ; START TERMS
9942   43EE D7            push a
9943   43EF 11            mov a, b
9944   43F0 26 FF FF      mov b, $ffff
9945   43F3 56            add b, a
9946   43F4 E4            pop a
9947   43F5             ; END TERMS
9948   43F5 E7            pop d
9949   43F6 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
9950   43FA DA            push d
9951   43FB FA 06 00      lea d, [bp + 6] ; $xp
9952   43FE 32            mov bl, [d]
9953   43FF A7 00         mov bh, 0
9954   4401             ; START TERMS
9955   4401 D7            push a
9956   4402 11            mov a, b
9957   4403 26 FF FF      mov b, $ffff
9958   4406 56            add b, a
9959   4407 E4            pop a
9960   4408             ; END TERMS
9961   4408 E7            pop d
9962   4409 5A            add d, b
9963   440A E4            pop a
9964   440B 32            mov bl, [d]
9965   440C A7 00         mov bh, 0
9966   440E             _switch155_comparisons:
9967   440E C0 01 00      cmp b, 1
9968   4411 C6 23 44      je _switch155_case0
9969   4414 C0 03 00      cmp b, 3
9970   4417 C6 3F 44      je _switch155_case1
9971   441A C0 02 00      cmp b, 2
9972   441D C6 58 45      je _switch155_case2
9973   4420 0A 53 46      jmp _switch155_exit
9974   4423             _switch155_case0:
9975   4423             ;; printf("Star at %d, %d absorbed torpedo energy.\n\n", yp, xp); 
9976   4423 FA 06 00      lea d, [bp + 6] ; $xp
9977   4426 32            mov bl, [d]
9978   4427 A7 00         mov bh, 0
9979   4429 DD            push bl
9980   442A FA 05 00      lea d, [bp + 5] ; $yp
9981   442D 32            mov bl, [d]
9982   442E A7 00         mov bh, 0
9983   4430 DD            push bl
9984   4431 26 09 6E      mov b, _s112 ; "Star at %d, %d absorbed torpedo energy.\n\n"
9985   4434 FD AB         swp b
9986   4436 D8            push b
9987   4437 07 D6 05      call printf
9988   443A 51 04 00      add sp, 4
9989   443D             ;; return; 
9990   443D F9            leave
9991   443E 09            ret
9992   443F             _switch155_case1:
9993   443F             ;; puts("*** Klingon Destroyed ***\n"); 
9994   443F 26 6D 6D      mov b, _s105 ; "*** Klingon Destroyed ***\n"
9995   4442 FD AB         swp b
9996   4444 D8            push b
9997   4445 07 36 13      call puts
9998   4448 51 02 00      add sp, 2
9999   444B             ;; klingons--; 
10000  444B 3B 4D 61      mov d, _klingons ; $klingons
10001  444E 32            mov bl, [d]
10002  444F A7 00         mov bh, 0
10003  4451 D8            push b
10004  4452 FD 7D         dec b
10005  4454 3B 4D 61      mov d, _klingons ; $klingons
10006  4457 FD 43         mov [d], b
10007  4459 E5            pop b
10008  445A             ;; klingons_left--; 
10009  445A 3B 4F 61      mov d, _klingons_left ; $klingons_left
10010  445D 32            mov bl, [d]
10011  445E A7 00         mov bh, 0
10012  4460 D8            push b
10013  4461 FD 7D         dec b
10014  4463 3B 4F 61      mov d, _klingons_left ; $klingons_left
10015  4466 FD 43         mov [d], b
10016  4468 E5            pop b
10017  4469             ;; if (klingons_left <= 0) 
10018  4469             _if156_cond:
10019  4469 3B 4F 61      mov d, _klingons_left ; $klingons_left
10020  446C 32            mov bl, [d]
10021  446D A7 00         mov bh, 0
10022  446F             ; START RELATIONAL
10023  446F D7            push a
10024  4470 11            mov a, b
10025  4471 26 00 00      mov b, $0
10026  4474 B0            cmp a, b
10027  4475 FD 75         slu ; <= (unsigned)
10028  4477 E4            pop a
10029  4478             ; END RELATIONAL
10030  4478 C0 00 00      cmp b, 0
10031  447B C6 84 44      je _if156_exit
10032  447E             _if156_true:
10033  447E             ;; won_game(); 
10034  447E 07 29 55      call won_game
10035  4481 0A 84 44      jmp _if156_exit
10036  4484             _if156_exit:
10037  4484             ;; k = kdata; 
10038  4484 FA FD FF      lea d, [bp + -3] ; $k
10039  4487 DA            push d
10040  4488 3B 41 61      mov d, _kdata_data ; $kdata
10041  448B 2D            mov b, d
10042  448C E7            pop d
10043  448D FD 43         mov [d], b
10044  448F             ;; for (i = 0; i <= 2; i++) { 
10045  448F             _for157_init:
10046  448F FA FF FF      lea d, [bp + -1] ; $i
10047  4492 DA            push d
10048  4493 26 00 00      mov b, $0
10049  4496 E7            pop d
10050  4497 FD 43         mov [d], b
10051  4499             _for157_cond:
10052  4499 FA FF FF      lea d, [bp + -1] ; $i
10053  449C 2A            mov b, [d]
10054  449D             ; START RELATIONAL
10055  449D D7            push a
10056  449E 11            mov a, b
10057  449F 26 02 00      mov b, $2
10058  44A2 B0            cmp a, b
10059  44A3 FD 73         slt ; <= (signed)
10060  44A5 E4            pop a
10061  44A6             ; END RELATIONAL
10062  44A6 C0 00 00      cmp b, 0
10063  44A9 C6 16 45      je _for157_exit
10064  44AC             _for157_block:
10065  44AC             ;; if (yp == k->y && xp == k->x) 
10066  44AC             _if158_cond:
10067  44AC FA 05 00      lea d, [bp + 5] ; $yp
10068  44AF 32            mov bl, [d]
10069  44B0 A7 00         mov bh, 0
10070  44B2             ; START RELATIONAL
10071  44B2 D7            push a
10072  44B3 11            mov a, b
10073  44B4 FA FD FF      lea d, [bp + -3] ; $k
10074  44B7 FD 2A         mov d, [d]
10075  44B9 58 00 00      add d, 0
10076  44BC 32            mov bl, [d]
10077  44BD A7 00         mov bh, 0
10078  44BF B0            cmp a, b
10079  44C0 FD 71         seq ; ==
10080  44C2 E4            pop a
10081  44C3             ; END RELATIONAL
10082  44C3 D7            push a
10083  44C4 11            mov a, b
10084  44C5 FA 06 00      lea d, [bp + 6] ; $xp
10085  44C8 32            mov bl, [d]
10086  44C9 A7 00         mov bh, 0
10087  44CB             ; START RELATIONAL
10088  44CB D7            push a
10089  44CC 11            mov a, b
10090  44CD FA FD FF      lea d, [bp + -3] ; $k
10091  44D0 FD 2A         mov d, [d]
10092  44D2 58 01 00      add d, 1
10093  44D5 32            mov bl, [d]
10094  44D6 A7 00         mov bh, 0
10095  44D8 B0            cmp a, b
10096  44D9 FD 71         seq ; ==
10097  44DB E4            pop a
10098  44DC             ; END RELATIONAL
10099  44DC FD A7         sand a, b
10100  44DE E4            pop a
10101  44DF C0 00 00      cmp b, 0
10102  44E2 C6 F7 44      je _if158_exit
10103  44E5             _if158_true:
10104  44E5             ;; k->energy = 0; 
10105  44E5 FA FD FF      lea d, [bp + -3] ; $k
10106  44E8 FD 2A         mov d, [d]
10107  44EA 58 02 00      add d, 2
10108  44ED DA            push d
10109  44EE 26 00 00      mov b, $0
10110  44F1 E7            pop d
10111  44F2 FD 43         mov [d], b
10112  44F4 0A F7 44      jmp _if158_exit
10113  44F7             _if158_exit:
10114  44F7             ;; k++; 
10115  44F7 FA FD FF      lea d, [bp + -3] ; $k
10116  44FA 2A            mov b, [d]
10117  44FB D8            push b
10118  44FC FD 77         inc b
10119  44FE FD 77         inc b
10120  4500 FA FD FF      lea d, [bp + -3] ; $k
10121  4503 FD 43         mov [d], b
10122  4505 E5            pop b
10123  4506             _for157_update:
10124  4506 FA FF FF      lea d, [bp + -1] ; $i
10125  4509 2A            mov b, [d]
10126  450A D8            push b
10127  450B FD 77         inc b
10128  450D FA FF FF      lea d, [bp + -1] ; $i
10129  4510 FD 43         mov [d], b
10130  4512 E5            pop b
10131  4513 0A 99 44      jmp _for157_cond
10132  4516             _for157_exit:
10133  4516             ;; map[quad_y][quad_x] =map[quad_y][quad_x] - 0x100; 
10134  4516 3B 9F 60      mov d, _map_data ; $map
10135  4519 D7            push a
10136  451A DA            push d
10137  451B 3B 52 61      mov d, _quad_y ; $quad_y
10138  451E 2A            mov b, [d]
10139  451F E7            pop d
10140  4520 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
10141  4524 DA            push d
10142  4525 3B 54 61      mov d, _quad_x ; $quad_x
10143  4528 2A            mov b, [d]
10144  4529 E7            pop d
10145  452A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10146  452E E4            pop a
10147  452F DA            push d
10148  4530 3B 9F 60      mov d, _map_data ; $map
10149  4533 D7            push a
10150  4534 DA            push d
10151  4535 3B 52 61      mov d, _quad_y ; $quad_y
10152  4538 2A            mov b, [d]
10153  4539 E7            pop d
10154  453A FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
10155  453E DA            push d
10156  453F 3B 54 61      mov d, _quad_x ; $quad_x
10157  4542 2A            mov b, [d]
10158  4543 E7            pop d
10159  4544 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10160  4548 E4            pop a
10161  4549 2A            mov b, [d]
10162  454A             ; START TERMS
10163  454A D7            push a
10164  454B 11            mov a, b
10165  454C 26 00 01      mov b, $100
10166  454F 60            sub a, b
10167  4550 27            mov b, a
10168  4551 E4            pop a
10169  4552             ; END TERMS
10170  4552 E7            pop d
10171  4553 FD 43         mov [d], b
10172  4555             ;; break; 
10173  4555 0A 53 46      jmp _switch155_exit ; case break
10174  4558             _switch155_case2:
10175  4558             ;; puts("*** Starbase Destroyed ***"); 
10176  4558 26 33 6E      mov b, _s113 ; "*** Starbase Destroyed ***"
10177  455B FD AB         swp b
10178  455D D8            push b
10179  455E 07 36 13      call puts
10180  4561 51 02 00      add sp, 2
10181  4564             ;; starbases--; 
10182  4564 3B 77 60      mov d, _starbases ; $starbases
10183  4567 32            mov bl, [d]
10184  4568 A7 00         mov bh, 0
10185  456A D8            push b
10186  456B FD 7D         dec b
10187  456D 3B 77 60      mov d, _starbases ; $starbases
10188  4570 FD 43         mov [d], b
10189  4572 E5            pop b
10190  4573             ;; starbases_left--; 
10191  4573 3B 7A 60      mov d, _starbases_left ; $starbases_left
10192  4576 32            mov bl, [d]
10193  4577 A7 00         mov bh, 0
10194  4579 D8            push b
10195  457A FD 7D         dec b
10196  457C 3B 7A 60      mov d, _starbases_left ; $starbases_left
10197  457F FD 43         mov [d], b
10198  4581 E5            pop b
10199  4582             ;; if (starbases_left <= 0 && klingons_left <= FROM_FIXED(stardate) - time_start - time_up) { 
10200  4582             _if159_cond:
10201  4582 3B 7A 60      mov d, _starbases_left ; $starbases_left
10202  4585 32            mov bl, [d]
10203  4586 A7 00         mov bh, 0
10204  4588             ; START RELATIONAL
10205  4588 D7            push a
10206  4589 11            mov a, b
10207  458A 26 00 00      mov b, $0
10208  458D B0            cmp a, b
10209  458E FD 73         slt ; <= (signed)
10210  4590 E4            pop a
10211  4591             ; END RELATIONAL
10212  4591 D7            push a
10213  4592 11            mov a, b
10214  4593 3B 4F 61      mov d, _klingons_left ; $klingons_left
10215  4596 32            mov bl, [d]
10216  4597 A7 00         mov bh, 0
10217  4599             ; START RELATIONAL
10218  4599 D7            push a
10219  459A 11            mov a, b
10220  459B 3B 75 61      mov d, _stardate ; $stardate
10221  459E 2A            mov b, [d]
10222  459F FD AB         swp b
10223  45A1 D8            push b
10224  45A2 07 ED 1C      call FROM_FIXED
10225  45A5 51 02 00      add sp, 2
10226  45A8             ; START TERMS
10227  45A8 D7            push a
10228  45A9 11            mov a, b
10229  45AA 3B 59 61      mov d, _time_start ; $time_start
10230  45AD 2A            mov b, [d]
10231  45AE 60            sub a, b
10232  45AF 27            mov b, a
10233  45B0 11            mov a, b
10234  45B1 3B 5B 61      mov d, _time_up ; $time_up
10235  45B4 2A            mov b, [d]
10236  45B5 60            sub a, b
10237  45B6 27            mov b, a
10238  45B7 E4            pop a
10239  45B8             ; END TERMS
10240  45B8 B0            cmp a, b
10241  45B9 FD 75         slu ; <= (unsigned)
10242  45BB E4            pop a
10243  45BC             ; END RELATIONAL
10244  45BC FD A7         sand a, b
10245  45BE E4            pop a
10246  45BF C0 00 00      cmp b, 0
10247  45C2 C6 FB 45      je _if159_exit
10248  45C5             _if159_true:
10249  45C5             ;; puts("That does it, Captain!!"); 
10250  45C5 26 4E 6E      mov b, _s114 ; "That does it, Captain!!"
10251  45C8 FD AB         swp b
10252  45CA D8            push b
10253  45CB 07 36 13      call puts
10254  45CE 51 02 00      add sp, 2
10255  45D1             ;; puts("You are hereby relieved of command\n"); 
10256  45D1 26 66 6E      mov b, _s115 ; "You are hereby relieved of command\n"
10257  45D4 FD AB         swp b
10258  45D6 D8            push b
10259  45D7 07 36 13      call puts
10260  45DA 51 02 00      add sp, 2
10261  45DD             ;; puts("and sentenced to 99 stardates of hard"); 
10262  45DD 26 8A 6E      mov b, _s116 ; "and sentenced to 99 stardates of hard"
10263  45E0 FD AB         swp b
10264  45E2 D8            push b
10265  45E3 07 36 13      call puts
10266  45E6 51 02 00      add sp, 2
10267  45E9             ;; puts("labor on Cygnus 12!!\n"); 
10268  45E9 26 B0 6E      mov b, _s117 ; "labor on Cygnus 12!!\n"
10269  45EC FD AB         swp b
10270  45EE D8            push b
10271  45EF 07 36 13      call puts
10272  45F2 51 02 00      add sp, 2
10273  45F5             ;; resign_commision(); 
10274  45F5 07 0E 55      call resign_commision
10275  45F8 0A FB 45      jmp _if159_exit
10276  45FB             _if159_exit:
10277  45FB             ;; puts("Starfleet Command reviewing your record to consider\n court martial!\n"); 
10278  45FB 26 C6 6E      mov b, _s118 ; "Starfleet Command reviewing your record to consider\n court martial!\n"
10279  45FE FD AB         swp b
10280  4600 D8            push b
10281  4601 07 36 13      call puts
10282  4604 51 02 00      add sp, 2
10283  4607             ;; docked = 0;		/* Undock */ 
10284  4607 3B 9A 60      mov d, _docked ; $docked
10285  460A DA            push d
10286  460B 26 00 00      mov b, $0
10287  460E E7            pop d
10288  460F FD 3E         mov [d], bl
10289  4611             ;; map[quad_y][quad_x] =map[quad_y][quad_x] - 0x10; 
10290  4611 3B 9F 60      mov d, _map_data ; $map
10291  4614 D7            push a
10292  4615 DA            push d
10293  4616 3B 52 61      mov d, _quad_y ; $quad_y
10294  4619 2A            mov b, [d]
10295  461A E7            pop d
10296  461B FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
10297  461F DA            push d
10298  4620 3B 54 61      mov d, _quad_x ; $quad_x
10299  4623 2A            mov b, [d]
10300  4624 E7            pop d
10301  4625 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10302  4629 E4            pop a
10303  462A DA            push d
10304  462B 3B 9F 60      mov d, _map_data ; $map
10305  462E D7            push a
10306  462F DA            push d
10307  4630 3B 52 61      mov d, _quad_y ; $quad_y
10308  4633 2A            mov b, [d]
10309  4634 E7            pop d
10310  4635 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
10311  4639 DA            push d
10312  463A 3B 54 61      mov d, _quad_x ; $quad_x
10313  463D 2A            mov b, [d]
10314  463E E7            pop d
10315  463F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10316  4643 E4            pop a
10317  4644 2A            mov b, [d]
10318  4645             ; START TERMS
10319  4645 D7            push a
10320  4646 11            mov a, b
10321  4647 26 10 00      mov b, $10
10322  464A 60            sub a, b
10323  464B 27            mov b, a
10324  464C E4            pop a
10325  464D             ; END TERMS
10326  464D E7            pop d
10327  464E FD 43         mov [d], b
10328  4650             ;; break; 
10329  4650 0A 53 46      jmp _switch155_exit ; case break
10330  4653             _switch155_exit:
10331  4653             ;; quad[yp+-1][xp+-1] =  		0      ; 
10332  4653 3B 77 61      mov d, _quad_data ; $quad
10333  4656 D7            push a
10334  4657 DA            push d
10335  4658 FA 05 00      lea d, [bp + 5] ; $yp
10336  465B 32            mov bl, [d]
10337  465C A7 00         mov bh, 0
10338  465E             ; START TERMS
10339  465E D7            push a
10340  465F 11            mov a, b
10341  4660 26 FF FF      mov b, $ffff
10342  4663 56            add b, a
10343  4664 E4            pop a
10344  4665             ; END TERMS
10345  4665 E7            pop d
10346  4666 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
10347  466A DA            push d
10348  466B FA 06 00      lea d, [bp + 6] ; $xp
10349  466E 32            mov bl, [d]
10350  466F A7 00         mov bh, 0
10351  4671             ; START TERMS
10352  4671 D7            push a
10353  4672 11            mov a, b
10354  4673 26 FF FF      mov b, $ffff
10355  4676 56            add b, a
10356  4677 E4            pop a
10357  4678             ; END TERMS
10358  4678 E7            pop d
10359  4679 5A            add d, b
10360  467A E4            pop a
10361  467B DA            push d
10362  467C 26 00 00      mov b, $0
10363  467F E7            pop d
10364  4680 FD 3E         mov [d], bl
10365  4682 F9            leave
10366  4683 09            ret
10367  4684             
10368  4684             damage_control:
10369  4684 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10370  4687             ; $repair_cost 
10371  4687 10 00 00      mov a, $0
10372  468A 45 FF FF      mov [bp + -1], a
10373  468D             ; $i 
10374  468D 52 04 00      sub sp, 4
10375  4690             ;; if (damage[6] < 0) 
10376  4690             _if160_cond:
10377  4690 3B 5D 61      mov d, _damage_data ; $damage
10378  4693 D7            push a
10379  4694 DA            push d
10380  4695 26 06 00      mov b, $6
10381  4698 E7            pop d
10382  4699 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10383  469D E4            pop a
10384  469E 2A            mov b, [d]
10385  469F             ; START RELATIONAL
10386  469F D7            push a
10387  46A0 11            mov a, b
10388  46A1 26 00 00      mov b, $0
10389  46A4 B0            cmp a, b
10390  46A5 FD 73         slt ; < (signed)
10391  46A7 E4            pop a
10392  46A8             ; END RELATIONAL
10393  46A8 C0 00 00      cmp b, 0
10394  46AB C6 BD 46      je _if160_exit
10395  46AE             _if160_true:
10396  46AE             ;; puts("Damage Control report not available."); 
10397  46AE 26 0B 6F      mov b, _s119 ; "Damage Control report not available."
10398  46B1 FD AB         swp b
10399  46B3 D8            push b
10400  46B4 07 36 13      call puts
10401  46B7 51 02 00      add sp, 2
10402  46BA 0A BD 46      jmp _if160_exit
10403  46BD             _if160_exit:
10404  46BD             ;; if (docked) { 
10405  46BD             _if161_cond:
10406  46BD 3B 9A 60      mov d, _docked ; $docked
10407  46C0 32            mov bl, [d]
10408  46C1 A7 00         mov bh, 0
10409  46C3 C0 00 00      cmp b, 0
10410  46C6 C6 2D 48      je _if161_exit
10411  46C9             _if161_true:
10412  46C9             ;; repair_cost = 0; 
10413  46C9 FA FF FF      lea d, [bp + -1] ; $repair_cost
10414  46CC DA            push d
10415  46CD 26 00 00      mov b, $0
10416  46D0 E7            pop d
10417  46D1 FD 43         mov [d], b
10418  46D3             ;; for (i = 1; i <= 8; i++) 
10419  46D3             _for162_init:
10420  46D3 FA FD FF      lea d, [bp + -3] ; $i
10421  46D6 DA            push d
10422  46D7 26 01 00      mov b, $1
10423  46DA E7            pop d
10424  46DB FD 43         mov [d], b
10425  46DD             _for162_cond:
10426  46DD FA FD FF      lea d, [bp + -3] ; $i
10427  46E0 2A            mov b, [d]
10428  46E1             ; START RELATIONAL
10429  46E1 D7            push a
10430  46E2 11            mov a, b
10431  46E3 26 08 00      mov b, $8
10432  46E6 B0            cmp a, b
10433  46E7 FD 73         slt ; <= (signed)
10434  46E9 E4            pop a
10435  46EA             ; END RELATIONAL
10436  46EA C0 00 00      cmp b, 0
10437  46ED C6 34 47      je _for162_exit
10438  46F0             _for162_block:
10439  46F0             ;; if (damage[i] < 0) 
10440  46F0             _if163_cond:
10441  46F0 3B 5D 61      mov d, _damage_data ; $damage
10442  46F3 D7            push a
10443  46F4 DA            push d
10444  46F5 FA FD FF      lea d, [bp + -3] ; $i
10445  46F8 2A            mov b, [d]
10446  46F9 E7            pop d
10447  46FA FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10448  46FE E4            pop a
10449  46FF 2A            mov b, [d]
10450  4700             ; START RELATIONAL
10451  4700 D7            push a
10452  4701 11            mov a, b
10453  4702 26 00 00      mov b, $0
10454  4705 B0            cmp a, b
10455  4706 FD 73         slt ; < (signed)
10456  4708 E4            pop a
10457  4709             ; END RELATIONAL
10458  4709 C0 00 00      cmp b, 0
10459  470C C6 24 47      je _if163_exit
10460  470F             _if163_true:
10461  470F             ;; repair_cost = repair_cost + 10; 
10462  470F FA FF FF      lea d, [bp + -1] ; $repair_cost
10463  4712 DA            push d
10464  4713 FA FF FF      lea d, [bp + -1] ; $repair_cost
10465  4716 2A            mov b, [d]
10466  4717             ; START TERMS
10467  4717 D7            push a
10468  4718 11            mov a, b
10469  4719 26 0A 00      mov b, $a
10470  471C 56            add b, a
10471  471D E4            pop a
10472  471E             ; END TERMS
10473  471E E7            pop d
10474  471F FD 43         mov [d], b
10475  4721 0A 24 47      jmp _if163_exit
10476  4724             _if163_exit:
10477  4724             _for162_update:
10478  4724 FA FD FF      lea d, [bp + -3] ; $i
10479  4727 2A            mov b, [d]
10480  4728 D8            push b
10481  4729 FD 77         inc b
10482  472B FA FD FF      lea d, [bp + -3] ; $i
10483  472E FD 43         mov [d], b
10484  4730 E5            pop b
10485  4731 0A DD 46      jmp _for162_cond
10486  4734             _for162_exit:
10487  4734             ;; if (repair_cost) { 
10488  4734             _if164_cond:
10489  4734 FA FF FF      lea d, [bp + -1] ; $repair_cost
10490  4737 2A            mov b, [d]
10491  4738 C0 00 00      cmp b, 0
10492  473B C6 2A 48      je _if164_exit
10493  473E             _if164_true:
10494  473E             ;; repair_cost = repair_cost + d4; 
10495  473E FA FF FF      lea d, [bp + -1] ; $repair_cost
10496  4741 DA            push d
10497  4742 FA FF FF      lea d, [bp + -1] ; $repair_cost
10498  4745 2A            mov b, [d]
10499  4746             ; START TERMS
10500  4746 D7            push a
10501  4747 11            mov a, b
10502  4748 3B 6F 61      mov d, _d4 ; $d4
10503  474B 2A            mov b, [d]
10504  474C 56            add b, a
10505  474D E4            pop a
10506  474E             ; END TERMS
10507  474E E7            pop d
10508  474F FD 43         mov [d], b
10509  4751             ;; if (repair_cost >= 100) 
10510  4751             _if165_cond:
10511  4751 FA FF FF      lea d, [bp + -1] ; $repair_cost
10512  4754 2A            mov b, [d]
10513  4755             ; START RELATIONAL
10514  4755 D7            push a
10515  4756 11            mov a, b
10516  4757 26 64 00      mov b, $64
10517  475A B0            cmp a, b
10518  475B FD 80         sge ; >=
10519  475D E4            pop a
10520  475E             ; END RELATIONAL
10521  475E C0 00 00      cmp b, 0
10522  4761 C6 71 47      je _if165_exit
10523  4764             _if165_true:
10524  4764             ;; repair_cost = 90;	/* 0.9 */ 
10525  4764 FA FF FF      lea d, [bp + -1] ; $repair_cost
10526  4767 DA            push d
10527  4768 26 5A 00      mov b, $5a
10528  476B E7            pop d
10529  476C FD 43         mov [d], b
10530  476E 0A 71 47      jmp _if165_exit
10531  4771             _if165_exit:
10532  4771             ;; printf("\nTechnicians standing by to effect repairs to your ship;\nEstimated time to repair: %s stardates.\n Will you authorize the repair order (y/N)? ", print100(repair_cost)); 
10533  4771 FA FF FF      lea d, [bp + -1] ; $repair_cost
10534  4774 2A            mov b, [d]
10535  4775 FD AB         swp b
10536  4777 D8            push b
10537  4778 07 01 20      call print100
10538  477B 51 02 00      add sp, 2
10539  477E FD AB         swp b
10540  4780 D8            push b
10541  4781 26 30 6F      mov b, _s120 ; "\nTechnicians standing by to effect repairs to your ship;\nEstimated time to repair: %s stardates.\n Will you authorize the repair order (y/N)? "
10542  4784 FD AB         swp b
10543  4786 D8            push b
10544  4787 07 D6 05      call printf
10545  478A 51 04 00      add sp, 4
10546  478D             ;; if (yesno()) { 
10547  478D             _if166_cond:
10548  478D 07 05 1E      call yesno
10549  4790 C0 00 00      cmp b, 0
10550  4793 C6 25 48      je _if166_exit
10551  4796             _if166_true:
10552  4796             ;; for (i = 1; i <= 8; i++) 
10553  4796             _for167_init:
10554  4796 FA FD FF      lea d, [bp + -3] ; $i
10555  4799 DA            push d
10556  479A 26 01 00      mov b, $1
10557  479D E7            pop d
10558  479E FD 43         mov [d], b
10559  47A0             _for167_cond:
10560  47A0 FA FD FF      lea d, [bp + -3] ; $i
10561  47A3 2A            mov b, [d]
10562  47A4             ; START RELATIONAL
10563  47A4 D7            push a
10564  47A5 11            mov a, b
10565  47A6 26 08 00      mov b, $8
10566  47A9 B0            cmp a, b
10567  47AA FD 73         slt ; <= (signed)
10568  47AC E4            pop a
10569  47AD             ; END RELATIONAL
10570  47AD C0 00 00      cmp b, 0
10571  47B0 C6 FB 47      je _for167_exit
10572  47B3             _for167_block:
10573  47B3             ;; if (damage[i] < 0) 
10574  47B3             _if168_cond:
10575  47B3 3B 5D 61      mov d, _damage_data ; $damage
10576  47B6 D7            push a
10577  47B7 DA            push d
10578  47B8 FA FD FF      lea d, [bp + -3] ; $i
10579  47BB 2A            mov b, [d]
10580  47BC E7            pop d
10581  47BD FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10582  47C1 E4            pop a
10583  47C2 2A            mov b, [d]
10584  47C3             ; START RELATIONAL
10585  47C3 D7            push a
10586  47C4 11            mov a, b
10587  47C5 26 00 00      mov b, $0
10588  47C8 B0            cmp a, b
10589  47C9 FD 73         slt ; < (signed)
10590  47CB E4            pop a
10591  47CC             ; END RELATIONAL
10592  47CC C0 00 00      cmp b, 0
10593  47CF C6 EB 47      je _if168_exit
10594  47D2             _if168_true:
10595  47D2             ;; damage[i] = 0; 
10596  47D2 3B 5D 61      mov d, _damage_data ; $damage
10597  47D5 D7            push a
10598  47D6 DA            push d
10599  47D7 FA FD FF      lea d, [bp + -3] ; $i
10600  47DA 2A            mov b, [d]
10601  47DB E7            pop d
10602  47DC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10603  47E0 E4            pop a
10604  47E1 DA            push d
10605  47E2 26 00 00      mov b, $0
10606  47E5 E7            pop d
10607  47E6 FD 43         mov [d], b
10608  47E8 0A EB 47      jmp _if168_exit
10609  47EB             _if168_exit:
10610  47EB             _for167_update:
10611  47EB FA FD FF      lea d, [bp + -3] ; $i
10612  47EE 2A            mov b, [d]
10613  47EF D8            push b
10614  47F0 FD 77         inc b
10615  47F2 FA FD FF      lea d, [bp + -3] ; $i
10616  47F5 FD 43         mov [d], b
10617  47F7 E5            pop b
10618  47F8 0A A0 47      jmp _for167_cond
10619  47FB             _for167_exit:
10620  47FB             ;; stardate = stardate + (repair_cost + 5)/10 + 1; 
10621  47FB 3B 75 61      mov d, _stardate ; $stardate
10622  47FE DA            push d
10623  47FF 3B 75 61      mov d, _stardate ; $stardate
10624  4802 2A            mov b, [d]
10625  4803             ; START TERMS
10626  4803 D7            push a
10627  4804 11            mov a, b
10628  4805 FA FF FF      lea d, [bp + -1] ; $repair_cost
10629  4808 2A            mov b, [d]
10630  4809             ; START TERMS
10631  4809 D7            push a
10632  480A 11            mov a, b
10633  480B 26 05 00      mov b, $5
10634  480E 56            add b, a
10635  480F E4            pop a
10636  4810             ; END TERMS
10637  4810             ; START FACTORS
10638  4810 D7            push a
10639  4811 11            mov a, b
10640  4812 26 0A 00      mov b, $a
10641  4815 AE            div a, b
10642  4816 27            mov b, a
10643  4817 E4            pop a
10644  4818             ; END FACTORS
10645  4818 56            add b, a
10646  4819 11            mov a, b
10647  481A 26 01 00      mov b, $1
10648  481D 56            add b, a
10649  481E E4            pop a
10650  481F             ; END TERMS
10651  481F E7            pop d
10652  4820 FD 43         mov [d], b
10653  4822 0A 25 48      jmp _if166_exit
10654  4825             _if166_exit:
10655  4825             ;; return; 
10656  4825 F9            leave
10657  4826 09            ret
10658  4827 0A 2A 48      jmp _if164_exit
10659  482A             _if164_exit:
10660  482A 0A 2D 48      jmp _if161_exit
10661  482D             _if161_exit:
10662  482D             ;; if (damage[6] < 0) 
10663  482D             _if169_cond:
10664  482D 3B 5D 61      mov d, _damage_data ; $damage
10665  4830 D7            push a
10666  4831 DA            push d
10667  4832 26 06 00      mov b, $6
10668  4835 E7            pop d
10669  4836 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10670  483A E4            pop a
10671  483B 2A            mov b, [d]
10672  483C             ; START RELATIONAL
10673  483C D7            push a
10674  483D 11            mov a, b
10675  483E 26 00 00      mov b, $0
10676  4841 B0            cmp a, b
10677  4842 FD 73         slt ; < (signed)
10678  4844 E4            pop a
10679  4845             ; END RELATIONAL
10680  4845 C0 00 00      cmp b, 0
10681  4848 C6 50 48      je _if169_exit
10682  484B             _if169_true:
10683  484B             ;; return; 
10684  484B F9            leave
10685  484C 09            ret
10686  484D 0A 50 48      jmp _if169_exit
10687  4850             _if169_exit:
10688  4850             ;; puts("Device            State of Repair"); 
10689  4850 26 BE 6F      mov b, _s121 ; "Device            State of Repair"
10690  4853 FD AB         swp b
10691  4855 D8            push b
10692  4856 07 36 13      call puts
10693  4859 51 02 00      add sp, 2
10694  485C             ;; for (i = 1; i <= 8; i++) 
10695  485C             _for170_init:
10696  485C FA FD FF      lea d, [bp + -3] ; $i
10697  485F DA            push d
10698  4860 26 01 00      mov b, $1
10699  4863 E7            pop d
10700  4864 FD 43         mov [d], b
10701  4866             _for170_cond:
10702  4866 FA FD FF      lea d, [bp + -3] ; $i
10703  4869 2A            mov b, [d]
10704  486A             ; START RELATIONAL
10705  486A D7            push a
10706  486B 11            mov a, b
10707  486C 26 08 00      mov b, $8
10708  486F B0            cmp a, b
10709  4870 FD 73         slt ; <= (signed)
10710  4872 E4            pop a
10711  4873             ; END RELATIONAL
10712  4873 C0 00 00      cmp b, 0
10713  4876 C6 C1 48      je _for170_exit
10714  4879             _for170_block:
10715  4879             ;; printf("%-25s%6s\n", get_device_name(i), print100(damage[i])); 
10716  4879 3B 5D 61      mov d, _damage_data ; $damage
10717  487C D7            push a
10718  487D DA            push d
10719  487E FA FD FF      lea d, [bp + -3] ; $i
10720  4881 2A            mov b, [d]
10721  4882 E7            pop d
10722  4883 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10723  4887 E4            pop a
10724  4888 2A            mov b, [d]
10725  4889 FD AB         swp b
10726  488B D8            push b
10727  488C 07 01 20      call print100
10728  488F 51 02 00      add sp, 2
10729  4892 FD AB         swp b
10730  4894 D8            push b
10731  4895 FA FD FF      lea d, [bp + -3] ; $i
10732  4898 2A            mov b, [d]
10733  4899 FD AB         swp b
10734  489B D8            push b
10735  489C 07 20 5D      call get_device_name
10736  489F 51 02 00      add sp, 2
10737  48A2 FD AB         swp b
10738  48A4 D8            push b
10739  48A5 26 E0 6F      mov b, _s122 ; "%-25s%6s\n"
10740  48A8 FD AB         swp b
10741  48AA D8            push b
10742  48AB 07 D6 05      call printf
10743  48AE 51 06 00      add sp, 6
10744  48B1             _for170_update:
10745  48B1 FA FD FF      lea d, [bp + -3] ; $i
10746  48B4 2A            mov b, [d]
10747  48B5 D8            push b
10748  48B6 FD 77         inc b
10749  48B8 FA FD FF      lea d, [bp + -3] ; $i
10750  48BB FD 43         mov [d], b
10751  48BD E5            pop b
10752  48BE 0A 66 48      jmp _for170_cond
10753  48C1             _for170_exit:
10754  48C1             ;; printf("\n"); 
10755  48C1 26 EA 6F      mov b, _s123 ; "\n"
10756  48C4 FD AB         swp b
10757  48C6 D8            push b
10758  48C7 07 D6 05      call printf
10759  48CA 51 02 00      add sp, 2
10760  48CD F9            leave
10761  48CE 09            ret
10762  48CF             
10763  48CF             shield_control:
10764  48CF F8 00 00      enter 0 ; (push bp; mov bp, sp)
10765  48D2             ; $i 
10766  48D2 52 02 00      sub sp, 2
10767  48D5             ;; if (inoperable(7)) 
10768  48D5             _if171_cond:
10769  48D5 26 07 00      mov b, $7
10770  48D8 DD            push bl
10771  48D9 07 50 20      call inoperable
10772  48DC 51 01 00      add sp, 1
10773  48DF C0 00 00      cmp b, 0
10774  48E2 C6 EA 48      je _if171_exit
10775  48E5             _if171_true:
10776  48E5             ;; return; 
10777  48E5 F9            leave
10778  48E6 09            ret
10779  48E7 0A EA 48      jmp _if171_exit
10780  48EA             _if171_exit:
10781  48EA             ;; printf("Energy available = %d\n\n Input number of units to shields: ", energy + shield); 
10782  48EA 3B 9B 60      mov d, _energy ; $energy
10783  48ED 2A            mov b, [d]
10784  48EE             ; START TERMS
10785  48EE D7            push a
10786  48EF 11            mov a, b
10787  48F0 3B 56 61      mov d, _shield ; $shield
10788  48F3 2A            mov b, [d]
10789  48F4 56            add b, a
10790  48F5 E4            pop a
10791  48F6             ; END TERMS
10792  48F6 FD AB         swp b
10793  48F8 D8            push b
10794  48F9 26 EC 6F      mov b, _s124 ; "Energy available = %d\n\n Input number of units to shields: "
10795  48FC FD AB         swp b
10796  48FE D8            push b
10797  48FF 07 D6 05      call printf
10798  4902 51 04 00      add sp, 4
10799  4905             ;; i = input_int(); 
10800  4905 FA FF FF      lea d, [bp + -1] ; $i
10801  4908 DA            push d
10802  4909 07 B9 1F      call input_int
10803  490C E7            pop d
10804  490D FD 43         mov [d], b
10805  490F             ;; if (i < 0 || shield == i) { 
10806  490F             _if172_cond:
10807  490F FA FF FF      lea d, [bp + -1] ; $i
10808  4912 2A            mov b, [d]
10809  4913             ; START RELATIONAL
10810  4913 D7            push a
10811  4914 11            mov a, b
10812  4915 26 00 00      mov b, $0
10813  4918 B0            cmp a, b
10814  4919 FD 73         slt ; < (signed)
10815  491B E4            pop a
10816  491C             ; END RELATIONAL
10817  491C D7            push a
10818  491D 11            mov a, b
10819  491E 3B 56 61      mov d, _shield ; $shield
10820  4921 2A            mov b, [d]
10821  4922             ; START RELATIONAL
10822  4922 D7            push a
10823  4923 11            mov a, b
10824  4924 FA FF FF      lea d, [bp + -1] ; $i
10825  4927 2A            mov b, [d]
10826  4928 B0            cmp a, b
10827  4929 FD 71         seq ; ==
10828  492B E4            pop a
10829  492C             ; END RELATIONAL
10830  492C FD A8         sor a, b ; ||
10831  492E E4            pop a
10832  492F C0 00 00      cmp b, 0
10833  4932 C6 46 49      je _if172_exit
10834  4935             _if172_true:
10835  4935             ;; puts("<Shields Unchanged>\n"); 
10836  4935 26 27 70      mov b, _s125 ; "<Shields Unchanged>\n"
10837  4938 FD AB         swp b
10838  493A D8            push b
10839  493B 07 36 13      call puts
10840  493E 51 02 00      add sp, 2
10841  4941             ;; return; 
10842  4941 F9            leave
10843  4942 09            ret
10844  4943 0A 46 49      jmp _if172_exit
10845  4946             _if172_exit:
10846  4946             ;; if (i >= energy + shield) { 
10847  4946             _if173_cond:
10848  4946 FA FF FF      lea d, [bp + -1] ; $i
10849  4949 2A            mov b, [d]
10850  494A             ; START RELATIONAL
10851  494A D7            push a
10852  494B 11            mov a, b
10853  494C 3B 9B 60      mov d, _energy ; $energy
10854  494F 2A            mov b, [d]
10855  4950             ; START TERMS
10856  4950 D7            push a
10857  4951 11            mov a, b
10858  4952 3B 56 61      mov d, _shield ; $shield
10859  4955 2A            mov b, [d]
10860  4956 56            add b, a
10861  4957 E4            pop a
10862  4958             ; END TERMS
10863  4958 B0            cmp a, b
10864  4959 FD 80         sge ; >=
10865  495B E4            pop a
10866  495C             ; END RELATIONAL
10867  495C C0 00 00      cmp b, 0
10868  495F C6 71 49      je _if173_exit
10869  4962             _if173_true:
10870  4962             ;; puts("Shield Control Reports:\n  This is not the Federation Treasury."); 
10871  4962 26 3C 70      mov b, _s126 ; "Shield Control Reports:\n  This is not the Federation Treasury."
10872  4965 FD AB         swp b
10873  4967 D8            push b
10874  4968 07 36 13      call puts
10875  496B 51 02 00      add sp, 2
10876  496E 0A 71 49      jmp _if173_exit
10877  4971             _if173_exit:
10878  4971             ;; energy = energy + shield - i; 
10879  4971 3B 9B 60      mov d, _energy ; $energy
10880  4974 DA            push d
10881  4975 3B 9B 60      mov d, _energy ; $energy
10882  4978 2A            mov b, [d]
10883  4979             ; START TERMS
10884  4979 D7            push a
10885  497A 11            mov a, b
10886  497B 3B 56 61      mov d, _shield ; $shield
10887  497E 2A            mov b, [d]
10888  497F 56            add b, a
10889  4980 11            mov a, b
10890  4981 FA FF FF      lea d, [bp + -1] ; $i
10891  4984 2A            mov b, [d]
10892  4985 60            sub a, b
10893  4986 27            mov b, a
10894  4987 E4            pop a
10895  4988             ; END TERMS
10896  4988 E7            pop d
10897  4989 FD 43         mov [d], b
10898  498B             ;; shield = i; 
10899  498B 3B 56 61      mov d, _shield ; $shield
10900  498E DA            push d
10901  498F FA FF FF      lea d, [bp + -1] ; $i
10902  4992 2A            mov b, [d]
10903  4993 E7            pop d
10904  4994 FD 43         mov [d], b
10905  4996             ;; printf("Deflector Control Room report:\n  Shields now at %d units per your command.\n\n", shield); 
10906  4996 3B 56 61      mov d, _shield ; $shield
10907  4999 2A            mov b, [d]
10908  499A FD AB         swp b
10909  499C D8            push b
10910  499D 26 7B 70      mov b, _s127 ; "Deflector Control Room report:\n  Shields now at %d units per your command.\n\n"
10911  49A0 FD AB         swp b
10912  49A2 D8            push b
10913  49A3 07 D6 05      call printf
10914  49A6 51 04 00      add sp, 4
10915  49A9 F9            leave
10916  49AA 09            ret
10917  49AB             
10918  49AB             library_computer:
10919  49AB F8 00 00      enter 0 ; (push bp; mov bp, sp)
10920  49AE             ;; if (inoperable(8)) 
10921  49AE             _if174_cond:
10922  49AE 26 08 00      mov b, $8
10923  49B1 DD            push bl
10924  49B2 07 50 20      call inoperable
10925  49B5 51 01 00      add sp, 1
10926  49B8 C0 00 00      cmp b, 0
10927  49BB C6 C3 49      je _if174_exit
10928  49BE             _if174_true:
10929  49BE             ;; return; 
10930  49BE F9            leave
10931  49BF 09            ret
10932  49C0 0A C3 49      jmp _if174_exit
10933  49C3             _if174_exit:
10934  49C3             ;; puts("Computer active and awating command: "); 
10935  49C3 26 C8 70      mov b, _s128 ; "Computer active and awating command: "
10936  49C6 FD AB         swp b
10937  49C8 D8            push b
10938  49C9 07 36 13      call puts
10939  49CC 51 02 00      add sp, 2
10940  49CF             ;; switch(input_int()) { 
10941  49CF             _switch175_expr:
10942  49CF 07 B9 1F      call input_int
10943  49D2             _switch175_comparisons:
10944  49D2 C0 FF FF      cmp b, -1
10945  49D5 C6 02 4A      je _switch175_case0
10946  49D8 C0 00 00      cmp b, 0
10947  49DB C6 05 4A      je _switch175_case1
10948  49DE C0 01 00      cmp b, 1
10949  49E1 C6 0B 4A      je _switch175_case2
10950  49E4 C0 02 00      cmp b, 2
10951  49E7 C6 11 4A      je _switch175_case3
10952  49EA C0 03 00      cmp b, 3
10953  49ED C6 17 4A      je _switch175_case4
10954  49F0 C0 04 00      cmp b, 4
10955  49F3 C6 1D 4A      je _switch175_case5
10956  49F6 C0 05 00      cmp b, 5
10957  49F9 C6 23 4A      je _switch175_case6
10958  49FC 0A 29 4A      jmp _switch175_default
10959  49FF 0A 7D 4A      jmp _switch175_exit
10960  4A02             _switch175_case0:
10961  4A02             ;; break; 
10962  4A02 0A 7D 4A      jmp _switch175_exit ; case break
10963  4A05             _switch175_case1:
10964  4A05             ;; galactic_record(); 
10965  4A05 07 7F 4A      call galactic_record
10966  4A08             ;; break; 
10967  4A08 0A 7D 4A      jmp _switch175_exit ; case break
10968  4A0B             _switch175_case2:
10969  4A0B             ;; status_report(); 
10970  4A0B 07 A4 4B      call status_report
10971  4A0E             ;; break; 
10972  4A0E 0A 7D 4A      jmp _switch175_exit ; case break
10973  4A11             _switch175_case3:
10974  4A11             ;; torpedo_data(); 
10975  4A11 07 BA 4C      call torpedo_data
10976  4A14             ;; break; 
10977  4A14 0A 7D 4A      jmp _switch175_exit ; case break
10978  4A17             _switch175_case4:
10979  4A17             ;; nav_data(); 
10980  4A17 07 BE 4D      call nav_data
10981  4A1A             ;; break; 
10982  4A1A 0A 7D 4A      jmp _switch175_exit ; case break
10983  4A1D             _switch175_case5:
10984  4A1D             ;; dirdist_calc(); 
10985  4A1D 07 21 4E      call dirdist_calc
10986  4A20             ;; break; 
10987  4A20 0A 7D 4A      jmp _switch175_exit ; case break
10988  4A23             _switch175_case6:
10989  4A23             ;; galaxy_map(); 
10990  4A23 07 9D 4F      call galaxy_map
10991  4A26             ;; break; 
10992  4A26 0A 7D 4A      jmp _switch175_exit ; case break
10993  4A29             _switch175_default:
10994  4A29             ;; puts("Functions available from Library-Computer:\n\n"); 
10995  4A29 26 EE 70      mov b, _s129 ; "Functions available from Library-Computer:\n\n"
10996  4A2C FD AB         swp b
10997  4A2E D8            push b
10998  4A2F 07 36 13      call puts
10999  4A32 51 02 00      add sp, 2
11000  4A35             ;; puts("   0 = Cumulative Galactic Record\n"); 
11001  4A35 26 1B 71      mov b, _s130 ; "   0 = Cumulative Galactic Record\n"
11002  4A38 FD AB         swp b
11003  4A3A D8            push b
11004  4A3B 07 36 13      call puts
11005  4A3E 51 02 00      add sp, 2
11006  4A41             ;; puts("   1 = Status Report\n"); 
11007  4A41 26 3E 71      mov b, _s131 ; "   1 = Status Report\n"
11008  4A44 FD AB         swp b
11009  4A46 D8            push b
11010  4A47 07 36 13      call puts
11011  4A4A 51 02 00      add sp, 2
11012  4A4D             ;; puts("   2 = Photon Torpedo Data\n"); 
11013  4A4D 26 54 71      mov b, _s132 ; "   2 = Photon Torpedo Data\n"
11014  4A50 FD AB         swp b
11015  4A52 D8            push b
11016  4A53 07 36 13      call puts
11017  4A56 51 02 00      add sp, 2
11018  4A59             ;; puts("   3 = Starbase Nav Data\n"); 
11019  4A59 26 70 71      mov b, _s133 ; "   3 = Starbase Nav Data\n"
11020  4A5C FD AB         swp b
11021  4A5E D8            push b
11022  4A5F 07 36 13      call puts
11023  4A62 51 02 00      add sp, 2
11024  4A65             ;; puts("   4 = Direction/Distance Calculator\n"); 
11025  4A65 26 8A 71      mov b, _s134 ; "   4 = Direction/Distance Calculator\n"
11026  4A68 FD AB         swp b
11027  4A6A D8            push b
11028  4A6B 07 36 13      call puts
11029  4A6E 51 02 00      add sp, 2
11030  4A71             ;; puts("   5 = Galaxy Region Name Map\n"); 
11031  4A71 26 B0 71      mov b, _s135 ; "   5 = Galaxy Region Name Map\n"
11032  4A74 FD AB         swp b
11033  4A76 D8            push b
11034  4A77 07 36 13      call puts
11035  4A7A 51 02 00      add sp, 2
11036  4A7D             _switch175_exit:
11037  4A7D F9            leave
11038  4A7E 09            ret
11039  4A7F             
11040  4A7F             galactic_record:
11041  4A7F F8 00 00      enter 0 ; (push bp; mov bp, sp)
11042  4A82             ; $i 
11043  4A82             ; $j 
11044  4A82 52 04 00      sub sp, 4
11045  4A85             ;; printf("\n     Computer Record of Galaxy for Quadrant %d,%d\n\n", quad_y, quad_x); 
11046  4A85 3B 54 61      mov d, _quad_x ; $quad_x
11047  4A88 2A            mov b, [d]
11048  4A89 FD AB         swp b
11049  4A8B D8            push b
11050  4A8C 3B 52 61      mov d, _quad_y ; $quad_y
11051  4A8F 2A            mov b, [d]
11052  4A90 FD AB         swp b
11053  4A92 D8            push b
11054  4A93 26 CF 71      mov b, _s136 ; "\n     Computer Record of Galaxy for Quadrant %d,%d\n\n"
11055  4A96 FD AB         swp b
11056  4A98 D8            push b
11057  4A99 07 D6 05      call printf
11058  4A9C 51 06 00      add sp, 6
11059  4A9F             ;; puts("     1     2     3     4     5     6     7     8"); 
11060  4A9F 26 04 72      mov b, _s137 ; "     1     2     3     4     5     6     7     8"
11061  4AA2 FD AB         swp b
11062  4AA4 D8            push b
11063  4AA5 07 36 13      call puts
11064  4AA8 51 02 00      add sp, 2
11065  4AAB             ;; for (i = 1; i <= 8; i++) { 
11066  4AAB             _for176_init:
11067  4AAB FA FF FF      lea d, [bp + -1] ; $i
11068  4AAE DA            push d
11069  4AAF 26 01 00      mov b, $1
11070  4AB2 E7            pop d
11071  4AB3 FD 43         mov [d], b
11072  4AB5             _for176_cond:
11073  4AB5 FA FF FF      lea d, [bp + -1] ; $i
11074  4AB8 2A            mov b, [d]
11075  4AB9             ; START RELATIONAL
11076  4AB9 D7            push a
11077  4ABA 11            mov a, b
11078  4ABB 26 08 00      mov b, $8
11079  4ABE B0            cmp a, b
11080  4ABF FD 73         slt ; <= (signed)
11081  4AC1 E4            pop a
11082  4AC2             ; END RELATIONAL
11083  4AC2 C0 00 00      cmp b, 0
11084  4AC5 C6 8F 4B      je _for176_exit
11085  4AC8             _for176_block:
11086  4AC8             ;; printf("%s%d", gr_1, i); 
11087  4AC8 FA FF FF      lea d, [bp + -1] ; $i
11088  4ACB 2A            mov b, [d]
11089  4ACC FD AB         swp b
11090  4ACE D8            push b
11091  4ACF 3B F2 62      mov d, _gr_1 ; $gr_1
11092  4AD2 2A            mov b, [d]
11093  4AD3 FD AB         swp b
11094  4AD5 D8            push b
11095  4AD6 26 35 72      mov b, _s138 ; "%s%d"
11096  4AD9 FD AB         swp b
11097  4ADB D8            push b
11098  4ADC 07 D6 05      call printf
11099  4ADF 51 06 00      add sp, 6
11100  4AE2             ;; for (j = 1; j <= 8; j++) { 
11101  4AE2             _for177_init:
11102  4AE2 FA FD FF      lea d, [bp + -3] ; $j
11103  4AE5 DA            push d
11104  4AE6 26 01 00      mov b, $1
11105  4AE9 E7            pop d
11106  4AEA FD 43         mov [d], b
11107  4AEC             _for177_cond:
11108  4AEC FA FD FF      lea d, [bp + -3] ; $j
11109  4AEF 2A            mov b, [d]
11110  4AF0             ; START RELATIONAL
11111  4AF0 D7            push a
11112  4AF1 11            mov a, b
11113  4AF2 26 08 00      mov b, $8
11114  4AF5 B0            cmp a, b
11115  4AF6 FD 73         slt ; <= (signed)
11116  4AF8 E4            pop a
11117  4AF9             ; END RELATIONAL
11118  4AF9 C0 00 00      cmp b, 0
11119  4AFC C6 75 4B      je _for177_exit
11120  4AFF             _for177_block:
11121  4AFF             ;; printf("   "); 
11122  4AFF 26 6B 64      mov b, _s25 ; "   "
11123  4B02 FD AB         swp b
11124  4B04 D8            push b
11125  4B05 07 D6 05      call printf
11126  4B08 51 02 00      add sp, 2
11127  4B0B             ;; if (map[i][j] &   0x1000		/* Set if this sector was mapped */          ) 
11128  4B0B             _if178_cond:
11129  4B0B 3B 9F 60      mov d, _map_data ; $map
11130  4B0E D7            push a
11131  4B0F DA            push d
11132  4B10 FA FF FF      lea d, [bp + -1] ; $i
11133  4B13 2A            mov b, [d]
11134  4B14 E7            pop d
11135  4B15 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
11136  4B19 DA            push d
11137  4B1A FA FD FF      lea d, [bp + -3] ; $j
11138  4B1D 2A            mov b, [d]
11139  4B1E E7            pop d
11140  4B1F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
11141  4B23 E4            pop a
11142  4B24 2A            mov b, [d]
11143  4B25 D7            push a
11144  4B26 11            mov a, b
11145  4B27 26 00 10      mov b, $1000
11146  4B2A FD 92         and b, a ; &
11147  4B2C E4            pop a
11148  4B2D C0 00 00      cmp b, 0
11149  4B30 C6 59 4B      je _if178_else
11150  4B33             _if178_true:
11151  4B33             ;; putbcd(map[i][j]); 
11152  4B33 3B 9F 60      mov d, _map_data ; $map
11153  4B36 D7            push a
11154  4B37 DA            push d
11155  4B38 FA FF FF      lea d, [bp + -1] ; $i
11156  4B3B 2A            mov b, [d]
11157  4B3C E7            pop d
11158  4B3D FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
11159  4B41 DA            push d
11160  4B42 FA FD FF      lea d, [bp + -3] ; $j
11161  4B45 2A            mov b, [d]
11162  4B46 E7            pop d
11163  4B47 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
11164  4B4B E4            pop a
11165  4B4C 2A            mov b, [d]
11166  4B4D FD AB         swp b
11167  4B4F D8            push b
11168  4B50 07 4E 39      call putbcd
11169  4B53 51 02 00      add sp, 2
11170  4B56 0A 65 4B      jmp _if178_exit
11171  4B59             _if178_else:
11172  4B59             ;; printf("***"); 
11173  4B59 26 28 6C      mov b, _s96 ; "***"
11174  4B5C FD AB         swp b
11175  4B5E D8            push b
11176  4B5F 07 D6 05      call printf
11177  4B62 51 02 00      add sp, 2
11178  4B65             _if178_exit:
11179  4B65             _for177_update:
11180  4B65 FA FD FF      lea d, [bp + -3] ; $j
11181  4B68 2A            mov b, [d]
11182  4B69 D8            push b
11183  4B6A FD 77         inc b
11184  4B6C FA FD FF      lea d, [bp + -3] ; $j
11185  4B6F FD 43         mov [d], b
11186  4B71 E5            pop b
11187  4B72 0A EC 4A      jmp _for177_cond
11188  4B75             _for177_exit:
11189  4B75             ;; putchar('\n'); 
11190  4B75 26 0A 00      mov b, $a
11191  4B78 DD            push bl
11192  4B79 07 00 13      call putchar
11193  4B7C 51 01 00      add sp, 1
11194  4B7F             _for176_update:
11195  4B7F FA FF FF      lea d, [bp + -1] ; $i
11196  4B82 2A            mov b, [d]
11197  4B83 D8            push b
11198  4B84 FD 77         inc b
11199  4B86 FA FF FF      lea d, [bp + -1] ; $i
11200  4B89 FD 43         mov [d], b
11201  4B8B E5            pop b
11202  4B8C 0A B5 4A      jmp _for176_cond
11203  4B8F             _for176_exit:
11204  4B8F             ;; printf("%s\n", gr_1); 
11205  4B8F 3B F2 62      mov d, _gr_1 ; $gr_1
11206  4B92 2A            mov b, [d]
11207  4B93 FD AB         swp b
11208  4B95 D8            push b
11209  4B96 26 2F 6C      mov b, _s98 ; "%s\n"
11210  4B99 FD AB         swp b
11211  4B9B D8            push b
11212  4B9C 07 D6 05      call printf
11213  4B9F 51 04 00      add sp, 4
11214  4BA2 F9            leave
11215  4BA3 09            ret
11216  4BA4             
11217  4BA4             status_report:
11218  4BA4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11219  4BA7             ; $plural 
11220  4BA7             ; $left 
11221  4BA7 52 04 00      sub sp, 4
11222  4BAA             ;; plural = str_s + 1; 
11223  4BAA FA FF FF      lea d, [bp + -1] ; $plural
11224  4BAD DA            push d
11225  4BAE 3B F6 62      mov d, _str_s ; $str_s
11226  4BB1 2A            mov b, [d]
11227  4BB2             ; START TERMS
11228  4BB2 D7            push a
11229  4BB3 11            mov a, b
11230  4BB4 26 01 00      mov b, $1
11231  4BB7 56            add b, a
11232  4BB8 E4            pop a
11233  4BB9             ; END TERMS
11234  4BB9 E7            pop d
11235  4BBA FD 43         mov [d], b
11236  4BBC             ;; left = TO_FIXED(time_start + time_up) - stardate; 
11237  4BBC FA FD FF      lea d, [bp + -3] ; $left
11238  4BBF DA            push d
11239  4BC0 3B 59 61      mov d, _time_start ; $time_start
11240  4BC3 2A            mov b, [d]
11241  4BC4             ; START TERMS
11242  4BC4 D7            push a
11243  4BC5 11            mov a, b
11244  4BC6 3B 5B 61      mov d, _time_up ; $time_up
11245  4BC9 2A            mov b, [d]
11246  4BCA 56            add b, a
11247  4BCB E4            pop a
11248  4BCC             ; END TERMS
11249  4BCC FD AB         swp b
11250  4BCE D8            push b
11251  4BCF 07 DB 1C      call TO_FIXED
11252  4BD2 51 02 00      add sp, 2
11253  4BD5             ; START TERMS
11254  4BD5 D7            push a
11255  4BD6 11            mov a, b
11256  4BD7 3B 75 61      mov d, _stardate ; $stardate
11257  4BDA 2A            mov b, [d]
11258  4BDB 60            sub a, b
11259  4BDC 27            mov b, a
11260  4BDD E4            pop a
11261  4BDE             ; END TERMS
11262  4BDE E7            pop d
11263  4BDF FD 43         mov [d], b
11264  4BE1             ;; puts("   Status Report:\n"); 
11265  4BE1 26 3A 72      mov b, _s139 ; "   Status Report:\n"
11266  4BE4 FD AB         swp b
11267  4BE6 D8            push b
11268  4BE7 07 36 13      call puts
11269  4BEA 51 02 00      add sp, 2
11270  4BED             ;; if (klingons_left > 1) 
11271  4BED             _if179_cond:
11272  4BED 3B 4F 61      mov d, _klingons_left ; $klingons_left
11273  4BF0 32            mov bl, [d]
11274  4BF1 A7 00         mov bh, 0
11275  4BF3             ; START RELATIONAL
11276  4BF3 D7            push a
11277  4BF4 11            mov a, b
11278  4BF5 26 01 00      mov b, $1
11279  4BF8 B0            cmp a, b
11280  4BF9 FD 81         sgu ; > (unsigned)
11281  4BFB E4            pop a
11282  4BFC             ; END RELATIONAL
11283  4BFC C0 00 00      cmp b, 0
11284  4BFF C6 10 4C      je _if179_exit
11285  4C02             _if179_true:
11286  4C02             ;; plural = str_s; 
11287  4C02 FA FF FF      lea d, [bp + -1] ; $plural
11288  4C05 DA            push d
11289  4C06 3B F6 62      mov d, _str_s ; $str_s
11290  4C09 2A            mov b, [d]
11291  4C0A E7            pop d
11292  4C0B FD 43         mov [d], b
11293  4C0D 0A 10 4C      jmp _if179_exit
11294  4C10             _if179_exit:
11295  4C10             ;; printf("Klingon%s Left: %d\n Mission must be completed in %d.%d stardates\n", 
11296  4C10 FA FD FF      lea d, [bp + -3] ; $left
11297  4C13 2A            mov b, [d]
11298  4C14             ; START FACTORS
11299  4C14 D7            push a
11300  4C15 11            mov a, b
11301  4C16 26 0A 00      mov b, $a
11302  4C19 AE            div a, b ; 
11303  4C1A 11            mov a, b
11304  4C1B 27            mov b, a
11305  4C1C E4            pop a
11306  4C1D             ; END FACTORS
11307  4C1D FD AB         swp b
11308  4C1F D8            push b
11309  4C20 FA FD FF      lea d, [bp + -3] ; $left
11310  4C23 2A            mov b, [d]
11311  4C24 FD AB         swp b
11312  4C26 D8            push b
11313  4C27 07 ED 1C      call FROM_FIXED
11314  4C2A 51 02 00      add sp, 2
11315  4C2D FD AB         swp b
11316  4C2F D8            push b
11317  4C30 3B 4F 61      mov d, _klingons_left ; $klingons_left
11318  4C33 32            mov bl, [d]
11319  4C34 A7 00         mov bh, 0
11320  4C36 DD            push bl
11321  4C37 FA FF FF      lea d, [bp + -1] ; $plural
11322  4C3A 2A            mov b, [d]
11323  4C3B FD AB         swp b
11324  4C3D D8            push b
11325  4C3E 26 4D 72      mov b, _s140 ; "Klingon%s Left: %d\n Mission must be completed in %d.%d stardates\n"
11326  4C41 FD AB         swp b
11327  4C43 D8            push b
11328  4C44 07 D6 05      call printf
11329  4C47 51 09 00      add sp, 9
11330  4C4A             ;; if (starbases_left < 1) { 
11331  4C4A             _if180_cond:
11332  4C4A 3B 7A 60      mov d, _starbases_left ; $starbases_left
11333  4C4D 32            mov bl, [d]
11334  4C4E A7 00         mov bh, 0
11335  4C50             ; START RELATIONAL
11336  4C50 D7            push a
11337  4C51 11            mov a, b
11338  4C52 26 01 00      mov b, $1
11339  4C55 B0            cmp a, b
11340  4C56 FD 73         slt ; < (signed)
11341  4C58 E4            pop a
11342  4C59             ; END RELATIONAL
11343  4C59 C0 00 00      cmp b, 0
11344  4C5C C6 6E 4C      je _if180_else
11345  4C5F             _if180_true:
11346  4C5F             ;; puts("Your stupidity has left you on your own in the galaxy\n -- you have no starbases left!\n"); 
11347  4C5F 26 8F 72      mov b, _s141 ; "Your stupidity has left you on your own in the galaxy\n -- you have no starbases left!\n"
11348  4C62 FD AB         swp b
11349  4C64 D8            push b
11350  4C65 07 36 13      call puts
11351  4C68 51 02 00      add sp, 2
11352  4C6B 0A B8 4C      jmp _if180_exit
11353  4C6E             _if180_else:
11354  4C6E             ;; plural = str_s; 
11355  4C6E FA FF FF      lea d, [bp + -1] ; $plural
11356  4C71 DA            push d
11357  4C72 3B F6 62      mov d, _str_s ; $str_s
11358  4C75 2A            mov b, [d]
11359  4C76 E7            pop d
11360  4C77 FD 43         mov [d], b
11361  4C79             ;; if (starbases_left < 2) 
11362  4C79             _if181_cond:
11363  4C79 3B 7A 60      mov d, _starbases_left ; $starbases_left
11364  4C7C 32            mov bl, [d]
11365  4C7D A7 00         mov bh, 0
11366  4C7F             ; START RELATIONAL
11367  4C7F D7            push a
11368  4C80 11            mov a, b
11369  4C81 26 02 00      mov b, $2
11370  4C84 B0            cmp a, b
11371  4C85 FD 73         slt ; < (signed)
11372  4C87 E4            pop a
11373  4C88             ; END RELATIONAL
11374  4C88 C0 00 00      cmp b, 0
11375  4C8B C6 9E 4C      je _if181_exit
11376  4C8E             _if181_true:
11377  4C8E             ;; plural++; 
11378  4C8E FA FF FF      lea d, [bp + -1] ; $plural
11379  4C91 2A            mov b, [d]
11380  4C92 D8            push b
11381  4C93 FD 77         inc b
11382  4C95 FA FF FF      lea d, [bp + -1] ; $plural
11383  4C98 FD 43         mov [d], b
11384  4C9A E5            pop b
11385  4C9B 0A 9E 4C      jmp _if181_exit
11386  4C9E             _if181_exit:
11387  4C9E             ;; printf("The Federation is maintaining %d starbase%s in the galaxy\n\n", starbases_left, plural); 
11388  4C9E FA FF FF      lea d, [bp + -1] ; $plural
11389  4CA1 2A            mov b, [d]
11390  4CA2 FD AB         swp b
11391  4CA4 D8            push b
11392  4CA5 3B 7A 60      mov d, _starbases_left ; $starbases_left
11393  4CA8 32            mov bl, [d]
11394  4CA9 A7 00         mov bh, 0
11395  4CAB DD            push bl
11396  4CAC 26 E6 72      mov b, _s142 ; "The Federation is maintaining %d starbase%s in the galaxy\n\n"
11397  4CAF FD AB         swp b
11398  4CB1 D8            push b
11399  4CB2 07 D6 05      call printf
11400  4CB5 51 05 00      add sp, 5
11401  4CB8             _if180_exit:
11402  4CB8 F9            leave
11403  4CB9 09            ret
11404  4CBA             
11405  4CBA             torpedo_data:
11406  4CBA F8 00 00      enter 0 ; (push bp; mov bp, sp)
11407  4CBD             ; $i 
11408  4CBD             ; $plural 
11409  4CBD             ; $k 
11410  4CBD 52 06 00      sub sp, 6
11411  4CC0             ;; plural = str_s + 1; 
11412  4CC0 FA FD FF      lea d, [bp + -3] ; $plural
11413  4CC3 DA            push d
11414  4CC4 3B F6 62      mov d, _str_s ; $str_s
11415  4CC7 2A            mov b, [d]
11416  4CC8             ; START TERMS
11417  4CC8 D7            push a
11418  4CC9 11            mov a, b
11419  4CCA 26 01 00      mov b, $1
11420  4CCD 56            add b, a
11421  4CCE E4            pop a
11422  4CCF             ; END TERMS
11423  4CCF E7            pop d
11424  4CD0 FD 43         mov [d], b
11425  4CD2             ;; if (no_klingon()) 
11426  4CD2             _if182_cond:
11427  4CD2 07 37 3B      call no_klingon
11428  4CD5 C0 00 00      cmp b, 0
11429  4CD8 C6 E0 4C      je _if182_exit
11430  4CDB             _if182_true:
11431  4CDB             ;; return; 
11432  4CDB F9            leave
11433  4CDC 09            ret
11434  4CDD 0A E0 4C      jmp _if182_exit
11435  4CE0             _if182_exit:
11436  4CE0             ;; if (klingons > 1) 
11437  4CE0             _if183_cond:
11438  4CE0 3B 4D 61      mov d, _klingons ; $klingons
11439  4CE3 32            mov bl, [d]
11440  4CE4 A7 00         mov bh, 0
11441  4CE6             ; START RELATIONAL
11442  4CE6 D7            push a
11443  4CE7 11            mov a, b
11444  4CE8 26 01 00      mov b, $1
11445  4CEB B0            cmp a, b
11446  4CEC FD 81         sgu ; > (unsigned)
11447  4CEE E4            pop a
11448  4CEF             ; END RELATIONAL
11449  4CEF C0 00 00      cmp b, 0
11450  4CF2 C6 05 4D      je _if183_exit
11451  4CF5             _if183_true:
11452  4CF5             ;; plural--; 
11453  4CF5 FA FD FF      lea d, [bp + -3] ; $plural
11454  4CF8 2A            mov b, [d]
11455  4CF9 D8            push b
11456  4CFA FD 7D         dec b
11457  4CFC FA FD FF      lea d, [bp + -3] ; $plural
11458  4CFF FD 43         mov [d], b
11459  4D01 E5            pop b
11460  4D02 0A 05 4D      jmp _if183_exit
11461  4D05             _if183_exit:
11462  4D05             ;; printf("From Enterprise to Klingon battlecriuser%s:\n\n", plural); 
11463  4D05 FA FD FF      lea d, [bp + -3] ; $plural
11464  4D08 2A            mov b, [d]
11465  4D09 FD AB         swp b
11466  4D0B D8            push b
11467  4D0C 26 22 73      mov b, _s143 ; "From Enterprise to Klingon battlecriuser%s:\n\n"
11468  4D0F FD AB         swp b
11469  4D11 D8            push b
11470  4D12 07 D6 05      call printf
11471  4D15 51 04 00      add sp, 4
11472  4D18             ;; k = kdata; 
11473  4D18 FA FB FF      lea d, [bp + -5] ; $k
11474  4D1B DA            push d
11475  4D1C 3B 41 61      mov d, _kdata_data ; $kdata
11476  4D1F 2D            mov b, d
11477  4D20 E7            pop d
11478  4D21 FD 43         mov [d], b
11479  4D23             ;; for (i = 0; i <= 2; i++) { 
11480  4D23             _for184_init:
11481  4D23 FA FF FF      lea d, [bp + -1] ; $i
11482  4D26 DA            push d
11483  4D27 26 00 00      mov b, $0
11484  4D2A E7            pop d
11485  4D2B FD 43         mov [d], b
11486  4D2D             _for184_cond:
11487  4D2D FA FF FF      lea d, [bp + -1] ; $i
11488  4D30 2A            mov b, [d]
11489  4D31             ; START RELATIONAL
11490  4D31 D7            push a
11491  4D32 11            mov a, b
11492  4D33 26 02 00      mov b, $2
11493  4D36 B0            cmp a, b
11494  4D37 FD 73         slt ; <= (signed)
11495  4D39 E4            pop a
11496  4D3A             ; END RELATIONAL
11497  4D3A C0 00 00      cmp b, 0
11498  4D3D C6 BC 4D      je _for184_exit
11499  4D40             _for184_block:
11500  4D40             ;; if (k->energy > 0) { 
11501  4D40             _if185_cond:
11502  4D40 FA FB FF      lea d, [bp + -5] ; $k
11503  4D43 FD 2A         mov d, [d]
11504  4D45 58 02 00      add d, 2
11505  4D48 2A            mov b, [d]
11506  4D49             ; START RELATIONAL
11507  4D49 D7            push a
11508  4D4A 11            mov a, b
11509  4D4B 26 00 00      mov b, $0
11510  4D4E B0            cmp a, b
11511  4D4F FD 7F         sgt ; >
11512  4D51 E4            pop a
11513  4D52             ; END RELATIONAL
11514  4D52 C0 00 00      cmp b, 0
11515  4D55 C6 9D 4D      je _if185_exit
11516  4D58             _if185_true:
11517  4D58             ;; compute_vector(TO_FIXED00(k->y), 
11518  4D58 3B 73 61      mov d, _ship_x ; $ship_x
11519  4D5B 2A            mov b, [d]
11520  4D5C FD AB         swp b
11521  4D5E D8            push b
11522  4D5F 3B 71 61      mov d, _ship_y ; $ship_y
11523  4D62 2A            mov b, [d]
11524  4D63 FD AB         swp b
11525  4D65 D8            push b
11526  4D66 FA FB FF      lea d, [bp + -5] ; $k
11527  4D69 FD 2A         mov d, [d]
11528  4D6B 58 01 00      add d, 1
11529  4D6E 32            mov bl, [d]
11530  4D6F A7 00         mov bh, 0
11531  4D71 FD AB         swp b
11532  4D73 D8            push b
11533  4D74 07 FE 1C      call TO_FIXED00
11534  4D77 51 02 00      add sp, 2
11535  4D7A FD AB         swp b
11536  4D7C D8            push b
11537  4D7D FA FB FF      lea d, [bp + -5] ; $k
11538  4D80 FD 2A         mov d, [d]
11539  4D82 58 00 00      add d, 0
11540  4D85 32            mov bl, [d]
11541  4D86 A7 00         mov bh, 0
11542  4D88 FD AB         swp b
11543  4D8A D8            push b
11544  4D8B 07 FE 1C      call TO_FIXED00
11545  4D8E 51 02 00      add sp, 2
11546  4D91 FD AB         swp b
11547  4D93 D8            push b
11548  4D94 07 6F 51      call compute_vector
11549  4D97 51 08 00      add sp, 8
11550  4D9A 0A 9D 4D      jmp _if185_exit
11551  4D9D             _if185_exit:
11552  4D9D             ;; k++; 
11553  4D9D FA FB FF      lea d, [bp + -5] ; $k
11554  4DA0 2A            mov b, [d]
11555  4DA1 D8            push b
11556  4DA2 FD 77         inc b
11557  4DA4 FD 77         inc b
11558  4DA6 FA FB FF      lea d, [bp + -5] ; $k
11559  4DA9 FD 43         mov [d], b
11560  4DAB E5            pop b
11561  4DAC             _for184_update:
11562  4DAC FA FF FF      lea d, [bp + -1] ; $i
11563  4DAF 2A            mov b, [d]
11564  4DB0 D8            push b
11565  4DB1 FD 77         inc b
11566  4DB3 FA FF FF      lea d, [bp + -1] ; $i
11567  4DB6 FD 43         mov [d], b
11568  4DB8 E5            pop b
11569  4DB9 0A 2D 4D      jmp _for184_cond
11570  4DBC             _for184_exit:
11571  4DBC F9            leave
11572  4DBD 09            ret
11573  4DBE             
11574  4DBE             nav_data:
11575  4DBE F8 00 00      enter 0 ; (push bp; mov bp, sp)
11576  4DC1             ;; if (starbases <= 0) { 
11577  4DC1             _if186_cond:
11578  4DC1 3B 77 60      mov d, _starbases ; $starbases
11579  4DC4 32            mov bl, [d]
11580  4DC5 A7 00         mov bh, 0
11581  4DC7             ; START RELATIONAL
11582  4DC7 D7            push a
11583  4DC8 11            mov a, b
11584  4DC9 26 00 00      mov b, $0
11585  4DCC B0            cmp a, b
11586  4DCD FD 73         slt ; <= (signed)
11587  4DCF E4            pop a
11588  4DD0             ; END RELATIONAL
11589  4DD0 C0 00 00      cmp b, 0
11590  4DD3 C6 E7 4D      je _if186_exit
11591  4DD6             _if186_true:
11592  4DD6             ;; puts("Mr. Spock reports,\n  Sensors show no starbases in this quadrant.\n"); 
11593  4DD6 26 50 73      mov b, _s144 ; "Mr. Spock reports,\n  Sensors show no starbases in this quadrant.\n"
11594  4DD9 FD AB         swp b
11595  4DDB D8            push b
11596  4DDC 07 36 13      call puts
11597  4DDF 51 02 00      add sp, 2
11598  4DE2             ;; return; 
11599  4DE2 F9            leave
11600  4DE3 09            ret
11601  4DE4 0A E7 4D      jmp _if186_exit
11602  4DE7             _if186_exit:
11603  4DE7             ;; compute_vector(TO_FIXED00(base_y), TO_FIXED00(base_x), ship_y, ship_x); 
11604  4DE7 3B 73 61      mov d, _ship_x ; $ship_x
11605  4DEA 2A            mov b, [d]
11606  4DEB FD AB         swp b
11607  4DED D8            push b
11608  4DEE 3B 71 61      mov d, _ship_y ; $ship_y
11609  4DF1 2A            mov b, [d]
11610  4DF2 FD AB         swp b
11611  4DF4 D8            push b
11612  4DF5 3B 79 60      mov d, _base_x ; $base_x
11613  4DF8 32            mov bl, [d]
11614  4DF9 A7 00         mov bh, 0
11615  4DFB FD AB         swp b
11616  4DFD D8            push b
11617  4DFE 07 FE 1C      call TO_FIXED00
11618  4E01 51 02 00      add sp, 2
11619  4E04 FD AB         swp b
11620  4E06 D8            push b
11621  4E07 3B 78 60      mov d, _base_y ; $base_y
11622  4E0A 32            mov bl, [d]
11623  4E0B A7 00         mov bh, 0
11624  4E0D FD AB         swp b
11625  4E0F D8            push b
11626  4E10 07 FE 1C      call TO_FIXED00
11627  4E13 51 02 00      add sp, 2
11628  4E16 FD AB         swp b
11629  4E18 D8            push b
11630  4E19 07 6F 51      call compute_vector
11631  4E1C 51 08 00      add sp, 8
11632  4E1F F9            leave
11633  4E20 09            ret
11634  4E21             
11635  4E21             dirdist_calc:
11636  4E21 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11637  4E24             ; $c1 
11638  4E24             ; $a 
11639  4E24             ; $w1 
11640  4E24             ; $x 
11641  4E24 52 08 00      sub sp, 8
11642  4E27             ;; printf("Direction/Distance Calculator\n You are at quadrant %d,%d sector %d,%d\n\n Please enter initial X coordinate: ", 
11643  4E27 3B 73 61      mov d, _ship_x ; $ship_x
11644  4E2A 2A            mov b, [d]
11645  4E2B FD AB         swp b
11646  4E2D D8            push b
11647  4E2E 07 10 1D      call FROM_FIXED00
11648  4E31 51 02 00      add sp, 2
11649  4E34 FD AB         swp b
11650  4E36 D8            push b
11651  4E37 3B 71 61      mov d, _ship_y ; $ship_y
11652  4E3A 2A            mov b, [d]
11653  4E3B FD AB         swp b
11654  4E3D D8            push b
11655  4E3E 07 10 1D      call FROM_FIXED00
11656  4E41 51 02 00      add sp, 2
11657  4E44 FD AB         swp b
11658  4E46 D8            push b
11659  4E47 3B 54 61      mov d, _quad_x ; $quad_x
11660  4E4A 2A            mov b, [d]
11661  4E4B FD AB         swp b
11662  4E4D D8            push b
11663  4E4E 3B 52 61      mov d, _quad_y ; $quad_y
11664  4E51 2A            mov b, [d]
11665  4E52 FD AB         swp b
11666  4E54 D8            push b
11667  4E55 26 92 73      mov b, _s145 ; "Direction/Distance Calculator\n You are at quadrant %d,%d sector %d,%d\n\n Please enter initial X coordinate: "
11668  4E58 FD AB         swp b
11669  4E5A D8            push b
11670  4E5B 07 D6 05      call printf
11671  4E5E 51 0A 00      add sp, 10
11672  4E61             ;; c1 = TO_FIXED00(input_int()); 
11673  4E61 FA FF FF      lea d, [bp + -1] ; $c1
11674  4E64 DA            push d
11675  4E65 07 B9 1F      call input_int
11676  4E68 FD AB         swp b
11677  4E6A D8            push b
11678  4E6B 07 FE 1C      call TO_FIXED00
11679  4E6E 51 02 00      add sp, 2
11680  4E71 E7            pop d
11681  4E72 FD 43         mov [d], b
11682  4E74             ;; if (c1 < 0 || c1 > 900 ) 
11683  4E74             _if187_cond:
11684  4E74 FA FF FF      lea d, [bp + -1] ; $c1
11685  4E77 2A            mov b, [d]
11686  4E78             ; START RELATIONAL
11687  4E78 D7            push a
11688  4E79 11            mov a, b
11689  4E7A 26 00 00      mov b, $0
11690  4E7D B0            cmp a, b
11691  4E7E FD 73         slt ; < (signed)
11692  4E80 E4            pop a
11693  4E81             ; END RELATIONAL
11694  4E81 D7            push a
11695  4E82 11            mov a, b
11696  4E83 FA FF FF      lea d, [bp + -1] ; $c1
11697  4E86 2A            mov b, [d]
11698  4E87             ; START RELATIONAL
11699  4E87 D7            push a
11700  4E88 11            mov a, b
11701  4E89 26 84 03      mov b, $384
11702  4E8C B0            cmp a, b
11703  4E8D FD 7F         sgt ; >
11704  4E8F E4            pop a
11705  4E90             ; END RELATIONAL
11706  4E90 FD A8         sor a, b ; ||
11707  4E92 E4            pop a
11708  4E93 C0 00 00      cmp b, 0
11709  4E96 C6 9E 4E      je _if187_exit
11710  4E99             _if187_true:
11711  4E99             ;; return; 
11712  4E99 F9            leave
11713  4E9A 09            ret
11714  4E9B 0A 9E 4E      jmp _if187_exit
11715  4E9E             _if187_exit:
11716  4E9E             ;; puts("Please enter initial Y coordinate: "); 
11717  4E9E 26 FE 73      mov b, _s146 ; "Please enter initial Y coordinate: "
11718  4EA1 FD AB         swp b
11719  4EA3 D8            push b
11720  4EA4 07 36 13      call puts
11721  4EA7 51 02 00      add sp, 2
11722  4EAA             ;; a = TO_FIXED00(input_int()); 
11723  4EAA FA FD FF      lea d, [bp + -3] ; $a
11724  4EAD DA            push d
11725  4EAE 07 B9 1F      call input_int
11726  4EB1 FD AB         swp b
11727  4EB3 D8            push b
11728  4EB4 07 FE 1C      call TO_FIXED00
11729  4EB7 51 02 00      add sp, 2
11730  4EBA E7            pop d
11731  4EBB FD 43         mov [d], b
11732  4EBD             ;; if (a < 0 || a > 900) 
11733  4EBD             _if188_cond:
11734  4EBD FA FD FF      lea d, [bp + -3] ; $a
11735  4EC0 2A            mov b, [d]
11736  4EC1             ; START RELATIONAL
11737  4EC1 D7            push a
11738  4EC2 11            mov a, b
11739  4EC3 26 00 00      mov b, $0
11740  4EC6 B0            cmp a, b
11741  4EC7 FD 73         slt ; < (signed)
11742  4EC9 E4            pop a
11743  4ECA             ; END RELATIONAL
11744  4ECA D7            push a
11745  4ECB 11            mov a, b
11746  4ECC FA FD FF      lea d, [bp + -3] ; $a
11747  4ECF 2A            mov b, [d]
11748  4ED0             ; START RELATIONAL
11749  4ED0 D7            push a
11750  4ED1 11            mov a, b
11751  4ED2 26 84 03      mov b, $384
11752  4ED5 B0            cmp a, b
11753  4ED6 FD 7F         sgt ; >
11754  4ED8 E4            pop a
11755  4ED9             ; END RELATIONAL
11756  4ED9 FD A8         sor a, b ; ||
11757  4EDB E4            pop a
11758  4EDC C0 00 00      cmp b, 0
11759  4EDF C6 E7 4E      je _if188_exit
11760  4EE2             _if188_true:
11761  4EE2             ;; return; 
11762  4EE2 F9            leave
11763  4EE3 09            ret
11764  4EE4 0A E7 4E      jmp _if188_exit
11765  4EE7             _if188_exit:
11766  4EE7             ;; puts("Please enter final X coordinate: "); 
11767  4EE7 26 22 74      mov b, _s147 ; "Please enter final X coordinate: "
11768  4EEA FD AB         swp b
11769  4EEC D8            push b
11770  4EED 07 36 13      call puts
11771  4EF0 51 02 00      add sp, 2
11772  4EF3             ;; w1 = TO_FIXED00(input_int()); 
11773  4EF3 FA FB FF      lea d, [bp + -5] ; $w1
11774  4EF6 DA            push d
11775  4EF7 07 B9 1F      call input_int
11776  4EFA FD AB         swp b
11777  4EFC D8            push b
11778  4EFD 07 FE 1C      call TO_FIXED00
11779  4F00 51 02 00      add sp, 2
11780  4F03 E7            pop d
11781  4F04 FD 43         mov [d], b
11782  4F06             ;; if (w1 < 0 || w1 > 900) 
11783  4F06             _if189_cond:
11784  4F06 FA FB FF      lea d, [bp + -5] ; $w1
11785  4F09 2A            mov b, [d]
11786  4F0A             ; START RELATIONAL
11787  4F0A D7            push a
11788  4F0B 11            mov a, b
11789  4F0C 26 00 00      mov b, $0
11790  4F0F B0            cmp a, b
11791  4F10 FD 73         slt ; < (signed)
11792  4F12 E4            pop a
11793  4F13             ; END RELATIONAL
11794  4F13 D7            push a
11795  4F14 11            mov a, b
11796  4F15 FA FB FF      lea d, [bp + -5] ; $w1
11797  4F18 2A            mov b, [d]
11798  4F19             ; START RELATIONAL
11799  4F19 D7            push a
11800  4F1A 11            mov a, b
11801  4F1B 26 84 03      mov b, $384
11802  4F1E B0            cmp a, b
11803  4F1F FD 7F         sgt ; >
11804  4F21 E4            pop a
11805  4F22             ; END RELATIONAL
11806  4F22 FD A8         sor a, b ; ||
11807  4F24 E4            pop a
11808  4F25 C0 00 00      cmp b, 0
11809  4F28 C6 30 4F      je _if189_exit
11810  4F2B             _if189_true:
11811  4F2B             ;; return; 
11812  4F2B F9            leave
11813  4F2C 09            ret
11814  4F2D 0A 30 4F      jmp _if189_exit
11815  4F30             _if189_exit:
11816  4F30             ;; puts("Please enter final Y coordinate: "); 
11817  4F30 26 44 74      mov b, _s148 ; "Please enter final Y coordinate: "
11818  4F33 FD AB         swp b
11819  4F35 D8            push b
11820  4F36 07 36 13      call puts
11821  4F39 51 02 00      add sp, 2
11822  4F3C             ;; x = TO_FIXED00(input_int()); 
11823  4F3C FA F9 FF      lea d, [bp + -7] ; $x
11824  4F3F DA            push d
11825  4F40 07 B9 1F      call input_int
11826  4F43 FD AB         swp b
11827  4F45 D8            push b
11828  4F46 07 FE 1C      call TO_FIXED00
11829  4F49 51 02 00      add sp, 2
11830  4F4C E7            pop d
11831  4F4D FD 43         mov [d], b
11832  4F4F             ;; if (x < 0 || x > 900) 
11833  4F4F             _if190_cond:
11834  4F4F FA F9 FF      lea d, [bp + -7] ; $x
11835  4F52 2A            mov b, [d]
11836  4F53             ; START RELATIONAL
11837  4F53 D7            push a
11838  4F54 11            mov a, b
11839  4F55 26 00 00      mov b, $0
11840  4F58 B0            cmp a, b
11841  4F59 FD 73         slt ; < (signed)
11842  4F5B E4            pop a
11843  4F5C             ; END RELATIONAL
11844  4F5C D7            push a
11845  4F5D 11            mov a, b
11846  4F5E FA F9 FF      lea d, [bp + -7] ; $x
11847  4F61 2A            mov b, [d]
11848  4F62             ; START RELATIONAL
11849  4F62 D7            push a
11850  4F63 11            mov a, b
11851  4F64 26 84 03      mov b, $384
11852  4F67 B0            cmp a, b
11853  4F68 FD 7F         sgt ; >
11854  4F6A E4            pop a
11855  4F6B             ; END RELATIONAL
11856  4F6B FD A8         sor a, b ; ||
11857  4F6D E4            pop a
11858  4F6E C0 00 00      cmp b, 0
11859  4F71 C6 79 4F      je _if190_exit
11860  4F74             _if190_true:
11861  4F74             ;; return; 
11862  4F74 F9            leave
11863  4F75 09            ret
11864  4F76 0A 79 4F      jmp _if190_exit
11865  4F79             _if190_exit:
11866  4F79             ;; compute_vector(w1, x, c1, a); 
11867  4F79 FA FD FF      lea d, [bp + -3] ; $a
11868  4F7C 2A            mov b, [d]
11869  4F7D FD AB         swp b
11870  4F7F D8            push b
11871  4F80 FA FF FF      lea d, [bp + -1] ; $c1
11872  4F83 2A            mov b, [d]
11873  4F84 FD AB         swp b
11874  4F86 D8            push b
11875  4F87 FA F9 FF      lea d, [bp + -7] ; $x
11876  4F8A 2A            mov b, [d]
11877  4F8B FD AB         swp b
11878  4F8D D8            push b
11879  4F8E FA FB FF      lea d, [bp + -5] ; $w1
11880  4F91 2A            mov b, [d]
11881  4F92 FD AB         swp b
11882  4F94 D8            push b
11883  4F95 07 6F 51      call compute_vector
11884  4F98 51 08 00      add sp, 8
11885  4F9B F9            leave
11886  4F9C 09            ret
11887  4F9D             
11888  4F9D             galaxy_map:
11889  4F9D F8 00 00      enter 0 ; (push bp; mov bp, sp)
11890  4FA0             ; $i 
11891  4FA0             ; $j 
11892  4FA0             ; $j0 
11893  4FA0 52 06 00      sub sp, 6
11894  4FA3             ;; printf("\n                   The Galaxy\n\n"); 
11895  4FA3 26 66 74      mov b, _s149 ; "\n                   The Galaxy\n\n"
11896  4FA6 FD AB         swp b
11897  4FA8 D8            push b
11898  4FA9 07 D6 05      call printf
11899  4FAC 51 02 00      add sp, 2
11900  4FAF             ;; printf("    1     2     3     4     5     6     7     8\n"); 
11901  4FAF 26 87 74      mov b, _s150 ; "    1     2     3     4     5     6     7     8\n"
11902  4FB2 FD AB         swp b
11903  4FB4 D8            push b
11904  4FB5 07 D6 05      call printf
11905  4FB8 51 02 00      add sp, 2
11906  4FBB             ;; for (i = 1; i <= 8; i++) { 
11907  4FBB             _for191_init:
11908  4FBB FA FF FF      lea d, [bp + -1] ; $i
11909  4FBE DA            push d
11910  4FBF 26 01 00      mov b, $1
11911  4FC2 E7            pop d
11912  4FC3 FD 43         mov [d], b
11913  4FC5             _for191_cond:
11914  4FC5 FA FF FF      lea d, [bp + -1] ; $i
11915  4FC8 2A            mov b, [d]
11916  4FC9             ; START RELATIONAL
11917  4FC9 D7            push a
11918  4FCA 11            mov a, b
11919  4FCB 26 08 00      mov b, $8
11920  4FCE B0            cmp a, b
11921  4FCF FD 73         slt ; <= (signed)
11922  4FD1 E4            pop a
11923  4FD2             ; END RELATIONAL
11924  4FD2 C0 00 00      cmp b, 0
11925  4FD5 C6 60 51      je _for191_exit
11926  4FD8             _for191_block:
11927  4FD8             ;; printf("%s%d ", gm_1, i); 
11928  4FD8 FA FF FF      lea d, [bp + -1] ; $i
11929  4FDB 2A            mov b, [d]
11930  4FDC FD AB         swp b
11931  4FDE D8            push b
11932  4FDF 3B 2B 63      mov d, _gm_1 ; $gm_1
11933  4FE2 2A            mov b, [d]
11934  4FE3 FD AB         swp b
11935  4FE5 D8            push b
11936  4FE6 26 B8 74      mov b, _s151 ; "%s%d "
11937  4FE9 FD AB         swp b
11938  4FEB D8            push b
11939  4FEC 07 D6 05      call printf
11940  4FEF 51 06 00      add sp, 6
11941  4FF2             ;; quadrant_name(1, i, 1); 
11942  4FF2 26 01 00      mov b, $1
11943  4FF5 DD            push bl
11944  4FF6 FA FF FF      lea d, [bp + -1] ; $i
11945  4FF9 2A            mov b, [d]
11946  4FFA DD            push bl
11947  4FFB 26 01 00      mov b, $1
11948  4FFE DD            push bl
11949  4FFF 07 67 5D      call quadrant_name
11950  5002 51 03 00      add sp, 3
11951  5005             ;; j0 = (int) (11 - (strlen(quadname) / 2)); 
11952  5005 FA FB FF      lea d, [bp + -5] ; $j0
11953  5008 DA            push d
11954  5009 26 0B 00      mov b, $b
11955  500C             ; START TERMS
11956  500C D7            push a
11957  500D 11            mov a, b
11958  500E 3B B7 61      mov d, _quadname_data ; $quadname
11959  5011 2D            mov b, d
11960  5012 FD AB         swp b
11961  5014 D8            push b
11962  5015 07 88 05      call strlen
11963  5018 51 02 00      add sp, 2
11964  501B             ; START FACTORS
11965  501B D7            push a
11966  501C 11            mov a, b
11967  501D 26 02 00      mov b, $2
11968  5020 AE            div a, b
11969  5021 27            mov b, a
11970  5022 E4            pop a
11971  5023             ; END FACTORS
11972  5023 60            sub a, b
11973  5024 27            mov b, a
11974  5025 E4            pop a
11975  5026             ; END TERMS
11976  5026 E7            pop d
11977  5027 FD 43         mov [d], b
11978  5029             ;; for (j = 0; j < j0; j++) 
11979  5029             _for192_init:
11980  5029 FA FD FF      lea d, [bp + -3] ; $j
11981  502C DA            push d
11982  502D 26 00 00      mov b, $0
11983  5030 E7            pop d
11984  5031 FD 43         mov [d], b
11985  5033             _for192_cond:
11986  5033 FA FD FF      lea d, [bp + -3] ; $j
11987  5036 2A            mov b, [d]
11988  5037             ; START RELATIONAL
11989  5037 D7            push a
11990  5038 11            mov a, b
11991  5039 FA FB FF      lea d, [bp + -5] ; $j0
11992  503C 2A            mov b, [d]
11993  503D B0            cmp a, b
11994  503E FD 73         slt ; < (signed)
11995  5040 E4            pop a
11996  5041             ; END RELATIONAL
11997  5041 C0 00 00      cmp b, 0
11998  5044 C6 61 50      je _for192_exit
11999  5047             _for192_block:
12000  5047             ;; putchar(' '); 
12001  5047 26 20 00      mov b, $20
12002  504A DD            push bl
12003  504B 07 00 13      call putchar
12004  504E 51 01 00      add sp, 1
12005  5051             _for192_update:
12006  5051 FA FD FF      lea d, [bp + -3] ; $j
12007  5054 2A            mov b, [d]
12008  5055 D8            push b
12009  5056 FD 77         inc b
12010  5058 FA FD FF      lea d, [bp + -3] ; $j
12011  505B FD 43         mov [d], b
12012  505D E5            pop b
12013  505E 0A 33 50      jmp _for192_cond
12014  5061             _for192_exit:
12015  5061             ;; puts(quadname); 
12016  5061 3B B7 61      mov d, _quadname_data ; $quadname
12017  5064 2D            mov b, d
12018  5065 FD AB         swp b
12019  5067 D8            push b
12020  5068 07 36 13      call puts
12021  506B 51 02 00      add sp, 2
12022  506E             ;; for (j = 0; j < j0; j++) 
12023  506E             _for193_init:
12024  506E FA FD FF      lea d, [bp + -3] ; $j
12025  5071 DA            push d
12026  5072 26 00 00      mov b, $0
12027  5075 E7            pop d
12028  5076 FD 43         mov [d], b
12029  5078             _for193_cond:
12030  5078 FA FD FF      lea d, [bp + -3] ; $j
12031  507B 2A            mov b, [d]
12032  507C             ; START RELATIONAL
12033  507C D7            push a
12034  507D 11            mov a, b
12035  507E FA FB FF      lea d, [bp + -5] ; $j0
12036  5081 2A            mov b, [d]
12037  5082 B0            cmp a, b
12038  5083 FD 73         slt ; < (signed)
12039  5085 E4            pop a
12040  5086             ; END RELATIONAL
12041  5086 C0 00 00      cmp b, 0
12042  5089 C6 A6 50      je _for193_exit
12043  508C             _for193_block:
12044  508C             ;; putchar(' '); 
12045  508C 26 20 00      mov b, $20
12046  508F DD            push bl
12047  5090 07 00 13      call putchar
12048  5093 51 01 00      add sp, 1
12049  5096             _for193_update:
12050  5096 FA FD FF      lea d, [bp + -3] ; $j
12051  5099 2A            mov b, [d]
12052  509A D8            push b
12053  509B FD 77         inc b
12054  509D FA FD FF      lea d, [bp + -3] ; $j
12055  50A0 FD 43         mov [d], b
12056  50A2 E5            pop b
12057  50A3 0A 78 50      jmp _for193_cond
12058  50A6             _for193_exit:
12059  50A6             ;; if (!(strlen(quadname) % 2)) 
12060  50A6             _if194_cond:
12061  50A6 3B B7 61      mov d, _quadname_data ; $quadname
12062  50A9 2D            mov b, d
12063  50AA FD AB         swp b
12064  50AC D8            push b
12065  50AD 07 88 05      call strlen
12066  50B0 51 02 00      add sp, 2
12067  50B3             ; START FACTORS
12068  50B3 D7            push a
12069  50B4 11            mov a, b
12070  50B5 26 02 00      mov b, $2
12071  50B8 AE            div a, b ; 
12072  50B9 11            mov a, b
12073  50BA 27            mov b, a
12074  50BB E4            pop a
12075  50BC             ; END FACTORS
12076  50BC C0 00 00      cmp b, 0
12077  50BF FD 71         seq ; !
12078  50C1 C0 00 00      cmp b, 0
12079  50C4 C6 D4 50      je _if194_exit
12080  50C7             _if194_true:
12081  50C7             ;; putchar(' '); 
12082  50C7 26 20 00      mov b, $20
12083  50CA DD            push bl
12084  50CB 07 00 13      call putchar
12085  50CE 51 01 00      add sp, 1
12086  50D1 0A D4 50      jmp _if194_exit
12087  50D4             _if194_exit:
12088  50D4             ;; quadrant_name(1, i, 5); 
12089  50D4 26 05 00      mov b, $5
12090  50D7 DD            push bl
12091  50D8 FA FF FF      lea d, [bp + -1] ; $i
12092  50DB 2A            mov b, [d]
12093  50DC DD            push bl
12094  50DD 26 01 00      mov b, $1
12095  50E0 DD            push bl
12096  50E1 07 67 5D      call quadrant_name
12097  50E4 51 03 00      add sp, 3
12098  50E7             ;; j0 = (int) (12 - (strlen(quadname) / 2)); 
12099  50E7 FA FB FF      lea d, [bp + -5] ; $j0
12100  50EA DA            push d
12101  50EB 26 0C 00      mov b, $c
12102  50EE             ; START TERMS
12103  50EE D7            push a
12104  50EF 11            mov a, b
12105  50F0 3B B7 61      mov d, _quadname_data ; $quadname
12106  50F3 2D            mov b, d
12107  50F4 FD AB         swp b
12108  50F6 D8            push b
12109  50F7 07 88 05      call strlen
12110  50FA 51 02 00      add sp, 2
12111  50FD             ; START FACTORS
12112  50FD D7            push a
12113  50FE 11            mov a, b
12114  50FF 26 02 00      mov b, $2
12115  5102 AE            div a, b
12116  5103 27            mov b, a
12117  5104 E4            pop a
12118  5105             ; END FACTORS
12119  5105 60            sub a, b
12120  5106 27            mov b, a
12121  5107 E4            pop a
12122  5108             ; END TERMS
12123  5108 E7            pop d
12124  5109 FD 43         mov [d], b
12125  510B             ;; for (j = 0; j < j0; j++) 
12126  510B             _for195_init:
12127  510B FA FD FF      lea d, [bp + -3] ; $j
12128  510E DA            push d
12129  510F 26 00 00      mov b, $0
12130  5112 E7            pop d
12131  5113 FD 43         mov [d], b
12132  5115             _for195_cond:
12133  5115 FA FD FF      lea d, [bp + -3] ; $j
12134  5118 2A            mov b, [d]
12135  5119             ; START RELATIONAL
12136  5119 D7            push a
12137  511A 11            mov a, b
12138  511B FA FB FF      lea d, [bp + -5] ; $j0
12139  511E 2A            mov b, [d]
12140  511F B0            cmp a, b
12141  5120 FD 73         slt ; < (signed)
12142  5122 E4            pop a
12143  5123             ; END RELATIONAL
12144  5123 C0 00 00      cmp b, 0
12145  5126 C6 43 51      je _for195_exit
12146  5129             _for195_block:
12147  5129             ;; putchar(' '); 
12148  5129 26 20 00      mov b, $20
12149  512C DD            push bl
12150  512D 07 00 13      call putchar
12151  5130 51 01 00      add sp, 1
12152  5133             _for195_update:
12153  5133 FA FD FF      lea d, [bp + -3] ; $j
12154  5136 2A            mov b, [d]
12155  5137 D8            push b
12156  5138 FD 77         inc b
12157  513A FA FD FF      lea d, [bp + -3] ; $j
12158  513D FD 43         mov [d], b
12159  513F E5            pop b
12160  5140 0A 15 51      jmp _for195_cond
12161  5143             _for195_exit:
12162  5143             ;; puts(quadname); 
12163  5143 3B B7 61      mov d, _quadname_data ; $quadname
12164  5146 2D            mov b, d
12165  5147 FD AB         swp b
12166  5149 D8            push b
12167  514A 07 36 13      call puts
12168  514D 51 02 00      add sp, 2
12169  5150             _for191_update:
12170  5150 FA FF FF      lea d, [bp + -1] ; $i
12171  5153 2A            mov b, [d]
12172  5154 D8            push b
12173  5155 FD 77         inc b
12174  5157 FA FF FF      lea d, [bp + -1] ; $i
12175  515A FD 43         mov [d], b
12176  515C E5            pop b
12177  515D 0A C5 4F      jmp _for191_cond
12178  5160             _for191_exit:
12179  5160             ;; puts(gm_1); 
12180  5160 3B 2B 63      mov d, _gm_1 ; $gm_1
12181  5163 2A            mov b, [d]
12182  5164 FD AB         swp b
12183  5166 D8            push b
12184  5167 07 36 13      call puts
12185  516A 51 02 00      add sp, 2
12186  516D F9            leave
12187  516E 09            ret
12188  516F             
12189  516F             compute_vector:
12190  516F F8 00 00      enter 0 ; (push bp; mov bp, sp)
12191  5172             ; $xl 
12192  5172             ; $al 
12193  5172 52 08 00      sub sp, 8
12194  5175             ;; puts("  DIRECTION = "); 
12195  5175 26 BE 74      mov b, _s152 ; "  DIRECTION = "
12196  5178 FD AB         swp b
12197  517A D8            push b
12198  517B 07 36 13      call puts
12199  517E 51 02 00      add sp, 2
12200  5181             ;; x = x - a; 
12201  5181 FA 07 00      lea d, [bp + 7] ; $x
12202  5184 DA            push d
12203  5185 FA 07 00      lea d, [bp + 7] ; $x
12204  5188 2A            mov b, [d]
12205  5189             ; START TERMS
12206  5189 D7            push a
12207  518A 11            mov a, b
12208  518B FA 0B 00      lea d, [bp + 11] ; $a
12209  518E 2A            mov b, [d]
12210  518F 60            sub a, b
12211  5190 27            mov b, a
12212  5191 E4            pop a
12213  5192             ; END TERMS
12214  5192 E7            pop d
12215  5193 FD 43         mov [d], b
12216  5195             ;; a = c1 - w1; 
12217  5195 FA 0B 00      lea d, [bp + 11] ; $a
12218  5198 DA            push d
12219  5199 FA 09 00      lea d, [bp + 9] ; $c1
12220  519C 2A            mov b, [d]
12221  519D             ; START TERMS
12222  519D D7            push a
12223  519E 11            mov a, b
12224  519F FA 05 00      lea d, [bp + 5] ; $w1
12225  51A2 2A            mov b, [d]
12226  51A3 60            sub a, b
12227  51A4 27            mov b, a
12228  51A5 E4            pop a
12229  51A6             ; END TERMS
12230  51A6 E7            pop d
12231  51A7 FD 43         mov [d], b
12232  51A9             ;; xl = abs(x); 
12233  51A9 FA FD FF      lea d, [bp + -3] ; $xl
12234  51AC DA            push d
12235  51AD FA 07 00      lea d, [bp + 7] ; $x
12236  51B0 2A            mov b, [d]
12237  51B1 FD AB         swp b
12238  51B3 D8            push b
12239  51B4 07 82 13      call abs
12240  51B7 51 02 00      add sp, 2
12241  51BA E7            pop d
12242  51BB FD 43         mov [d], b
12243  51BD 28            mov b, c
12244  51BE FD 44 02 00   mov [d + 2], b
12245  51C2             ;; al = abs(a); 
12246  51C2 FA F9 FF      lea d, [bp + -7] ; $al
12247  51C5 DA            push d
12248  51C6 FA 0B 00      lea d, [bp + 11] ; $a
12249  51C9 2A            mov b, [d]
12250  51CA FD AB         swp b
12251  51CC D8            push b
12252  51CD 07 82 13      call abs
12253  51D0 51 02 00      add sp, 2
12254  51D3 E7            pop d
12255  51D4 FD 43         mov [d], b
12256  51D6 28            mov b, c
12257  51D7 FD 44 02 00   mov [d + 2], b
12258  51DB             ;; if (x < 0) { 
12259  51DB             _if196_cond:
12260  51DB FA 07 00      lea d, [bp + 7] ; $x
12261  51DE 2A            mov b, [d]
12262  51DF             ; START RELATIONAL
12263  51DF D7            push a
12264  51E0 11            mov a, b
12265  51E1 26 00 00      mov b, $0
12266  51E4 B0            cmp a, b
12267  51E5 FD 73         slt ; < (signed)
12268  51E7 E4            pop a
12269  51E8             ; END RELATIONAL
12270  51E8 C0 00 00      cmp b, 0
12271  51EB C6 48 53      je _if196_else
12272  51EE             _if196_true:
12273  51EE             ;; if (a > 0) { 
12274  51EE             _if197_cond:
12275  51EE FA 0B 00      lea d, [bp + 11] ; $a
12276  51F1 2A            mov b, [d]
12277  51F2             ; START RELATIONAL
12278  51F2 D7            push a
12279  51F3 11            mov a, b
12280  51F4 26 00 00      mov b, $0
12281  51F7 B0            cmp a, b
12282  51F8 FD 7F         sgt ; >
12283  51FA E4            pop a
12284  51FB             ; END RELATIONAL
12285  51FB C0 00 00      cmp b, 0
12286  51FE C6 19 53      je _if197_else
12287  5201             _if197_true:
12288  5201             ;; c1 = 300; 
12289  5201 FA 09 00      lea d, [bp + 9] ; $c1
12290  5204 DA            push d
12291  5205 26 2C 01      mov b, $12c
12292  5208 E7            pop d
12293  5209 FD 43         mov [d], b
12294  520B             ;; if (al >= xl) 
12295  520B             _if198_cond:
12296  520B FA F9 FF      lea d, [bp + -7] ; $al
12297  520E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12298  5211 FD 39         mov c, b ; And place it into C
12299  5213 2A            mov b, [d] ; Lower Word in B
12300  5214             ; START RELATIONAL
12301  5214 D7            push a
12302  5215 FD D8         push g
12303  5217 11            mov a, b
12304  5218 FD 7A         mov g, c
12305  521A FA FD FF      lea d, [bp + -3] ; $xl
12306  521D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12307  5220 FD 39         mov c, b ; And place it into C
12308  5222 2A            mov b, [d] ; Lower Word in B
12309  5223 FD 82         sgeu
12310  5225 FD F1         pop g
12311  5227 E4            pop a
12312  5228             ; END RELATIONAL
12313  5228 C0 00 00      cmp b, 0
12314  522B C6 78 52      je _if198_else
12315  522E             _if198_true:
12316  522E             ;; printf("%s", print100(c1 + ((xl * 100) / al))); 
12317  522E FA 09 00      lea d, [bp + 9] ; $c1
12318  5231 2A            mov b, [d]
12319  5232             ; START TERMS
12320  5232 D7            push a
12321  5233 11            mov a, b
12322  5234 FA FD FF      lea d, [bp + -3] ; $xl
12323  5237 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12324  523A FD 39         mov c, b ; And place it into C
12325  523C 2A            mov b, [d] ; Lower Word in B
12326  523D             ; START FACTORS
12327  523D D7            push a
12328  523E 11            mov a, b
12329  523F 26 64 00      mov b, $64
12330  5242 AC            mul a, b ; *
12331  5243 11            mov a, b
12332  5244 27            mov b, a
12333  5245 E4            pop a
12334  5246             ; END FACTORS
12335  5246             ; START FACTORS
12336  5246 D7            push a
12337  5247 11            mov a, b
12338  5248 FA F9 FF      lea d, [bp + -7] ; $al
12339  524B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12340  524E FD 39         mov c, b ; And place it into C
12341  5250 2A            mov b, [d] ; Lower Word in B
12342  5251 AE            div a, b
12343  5252 27            mov b, a
12344  5253 E4            pop a
12345  5254             ; END FACTORS
12346  5254 54            add a, b
12347  5255 D7            push a
12348  5256 FD 12         mov a, g
12349  5258 28            mov b, c
12350  5259 5C            adc a, b
12351  525A 39            mov c, a
12352  525B E5            pop b
12353  525C E4            pop a
12354  525D             ; END TERMS
12355  525D FD AB         swp b
12356  525F D8            push b
12357  5260 07 01 20      call print100
12358  5263 51 02 00      add sp, 2
12359  5266 FD AB         swp b
12360  5268 D8            push b
12361  5269 26 CD 74      mov b, _s153 ; "%s"
12362  526C FD AB         swp b
12363  526E D8            push b
12364  526F 07 D6 05      call printf
12365  5272 51 04 00      add sp, 4
12366  5275 0A DC 52      jmp _if198_exit
12367  5278             _if198_else:
12368  5278             ;; printf("%s", print100(c1 + ((((xl * 2) - al) * 100)  / xl))); 
12369  5278 FA 09 00      lea d, [bp + 9] ; $c1
12370  527B 2A            mov b, [d]
12371  527C             ; START TERMS
12372  527C D7            push a
12373  527D 11            mov a, b
12374  527E FA FD FF      lea d, [bp + -3] ; $xl
12375  5281 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12376  5284 FD 39         mov c, b ; And place it into C
12377  5286 2A            mov b, [d] ; Lower Word in B
12378  5287             ; START FACTORS
12379  5287 D7            push a
12380  5288 11            mov a, b
12381  5289 26 02 00      mov b, $2
12382  528C AC            mul a, b ; *
12383  528D 11            mov a, b
12384  528E 27            mov b, a
12385  528F E4            pop a
12386  5290             ; END FACTORS
12387  5290             ; START TERMS
12388  5290 D7            push a
12389  5291 FD D8         push g
12390  5293 11            mov a, b
12391  5294 FD 7A         mov g, c
12392  5296 FA F9 FF      lea d, [bp + -7] ; $al
12393  5299 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12394  529C FD 39         mov c, b ; And place it into C
12395  529E 2A            mov b, [d] ; Lower Word in B
12396  529F 60            sub a, b
12397  52A0 27            mov b, a
12398  52A1 FD F1         pop g
12399  52A3 E4            pop a
12400  52A4             ; END TERMS
12401  52A4             ; START FACTORS
12402  52A4 D7            push a
12403  52A5 11            mov a, b
12404  52A6 26 64 00      mov b, $64
12405  52A9 AC            mul a, b ; *
12406  52AA 11            mov a, b
12407  52AB 27            mov b, a
12408  52AC E4            pop a
12409  52AD             ; END FACTORS
12410  52AD             ; START FACTORS
12411  52AD D7            push a
12412  52AE 11            mov a, b
12413  52AF FA FD FF      lea d, [bp + -3] ; $xl
12414  52B2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12415  52B5 FD 39         mov c, b ; And place it into C
12416  52B7 2A            mov b, [d] ; Lower Word in B
12417  52B8 AE            div a, b
12418  52B9 27            mov b, a
12419  52BA E4            pop a
12420  52BB             ; END FACTORS
12421  52BB 54            add a, b
12422  52BC D7            push a
12423  52BD FD 12         mov a, g
12424  52BF 28            mov b, c
12425  52C0 5C            adc a, b
12426  52C1 39            mov c, a
12427  52C2 E5            pop b
12428  52C3 E4            pop a
12429  52C4             ; END TERMS
12430  52C4 FD AB         swp b
12431  52C6 D8            push b
12432  52C7 07 01 20      call print100
12433  52CA 51 02 00      add sp, 2
12434  52CD FD AB         swp b
12435  52CF D8            push b
12436  52D0 26 CD 74      mov b, _s153 ; "%s"
12437  52D3 FD AB         swp b
12438  52D5 D8            push b
12439  52D6 07 D6 05      call printf
12440  52D9 51 04 00      add sp, 4
12441  52DC             _if198_exit:
12442  52DC             ;; printf(dist_1, print100((x > a) ? x : a)); 
12443  52DC             _ternary202_cond:
12444  52DC FA 07 00      lea d, [bp + 7] ; $x
12445  52DF 2A            mov b, [d]
12446  52E0             ; START RELATIONAL
12447  52E0 D7            push a
12448  52E1 11            mov a, b
12449  52E2 FA 0B 00      lea d, [bp + 11] ; $a
12450  52E5 2A            mov b, [d]
12451  52E6 B0            cmp a, b
12452  52E7 FD 7F         sgt ; >
12453  52E9 E4            pop a
12454  52EA             ; END RELATIONAL
12455  52EA C0 00 00      cmp b, 0
12456  52ED C6 F7 52      je _ternary202_false
12457  52F0             _ternary202_true:
12458  52F0 FA 07 00      lea d, [bp + 7] ; $x
12459  52F3 2A            mov b, [d]
12460  52F4 0A FB 52      jmp _ternary202_exit
12461  52F7             _ternary202_false:
12462  52F7 FA 0B 00      lea d, [bp + 11] ; $a
12463  52FA 2A            mov b, [d]
12464  52FB             _ternary202_exit:
12465  52FB FD AB         swp b
12466  52FD D8            push b
12467  52FE 07 01 20      call print100
12468  5301 51 02 00      add sp, 2
12469  5304 FD AB         swp b
12470  5306 D8            push b
12471  5307 3B 3D 63      mov d, _dist_1 ; $dist_1
12472  530A 2A            mov b, [d]
12473  530B FD AB         swp b
12474  530D D8            push b
12475  530E 07 D6 05      call printf
12476  5311 51 04 00      add sp, 4
12477  5314             ;; return; 
12478  5314 F9            leave
12479  5315 09            ret
12480  5316 0A 45 53      jmp _if197_exit
12481  5319             _if197_else:
12482  5319             ;; if (x != 0){ 
12483  5319             _if203_cond:
12484  5319 FA 07 00      lea d, [bp + 7] ; $x
12485  531C 2A            mov b, [d]
12486  531D             ; START RELATIONAL
12487  531D D7            push a
12488  531E 11            mov a, b
12489  531F 26 00 00      mov b, $0
12490  5322 B0            cmp a, b
12491  5323 FD 72         sneq ; !=
12492  5325 E4            pop a
12493  5326             ; END RELATIONAL
12494  5326 C0 00 00      cmp b, 0
12495  5329 C6 3B 53      je _if203_else
12496  532C             _if203_true:
12497  532C             ;; c1 = 500; 
12498  532C FA 09 00      lea d, [bp + 9] ; $c1
12499  532F DA            push d
12500  5330 26 F4 01      mov b, $1f4
12501  5333 E7            pop d
12502  5334 FD 43         mov [d], b
12503  5336             ;; return; 
12504  5336 F9            leave
12505  5337 09            ret
12506  5338 0A 45 53      jmp _if203_exit
12507  533B             _if203_else:
12508  533B             ;; c1 = 700; 
12509  533B FA 09 00      lea d, [bp + 9] ; $c1
12510  533E DA            push d
12511  533F 26 BC 02      mov b, $2bc
12512  5342 E7            pop d
12513  5343 FD 43         mov [d], b
12514  5345             _if203_exit:
12515  5345             _if197_exit:
12516  5345 0A D4 54      jmp _if196_exit
12517  5348             _if196_else:
12518  5348             ;; if (a < 0) { 
12519  5348             _if204_cond:
12520  5348 FA 0B 00      lea d, [bp + 11] ; $a
12521  534B 2A            mov b, [d]
12522  534C             ; START RELATIONAL
12523  534C D7            push a
12524  534D 11            mov a, b
12525  534E 26 00 00      mov b, $0
12526  5351 B0            cmp a, b
12527  5352 FD 73         slt ; < (signed)
12528  5354 E4            pop a
12529  5355             ; END RELATIONAL
12530  5355 C0 00 00      cmp b, 0
12531  5358 C6 68 53      je _if204_else
12532  535B             _if204_true:
12533  535B             ;; c1 = 700; 
12534  535B FA 09 00      lea d, [bp + 9] ; $c1
12535  535E DA            push d
12536  535F 26 BC 02      mov b, $2bc
12537  5362 E7            pop d
12538  5363 FD 43         mov [d], b
12539  5365 0A D4 54      jmp _if204_exit
12540  5368             _if204_else:
12541  5368             ;; if (x > 0) { 
12542  5368             _if205_cond:
12543  5368 FA 07 00      lea d, [bp + 7] ; $x
12544  536B 2A            mov b, [d]
12545  536C             ; START RELATIONAL
12546  536C D7            push a
12547  536D 11            mov a, b
12548  536E 26 00 00      mov b, $0
12549  5371 B0            cmp a, b
12550  5372 FD 7F         sgt ; >
12551  5374 E4            pop a
12552  5375             ; END RELATIONAL
12553  5375 C0 00 00      cmp b, 0
12554  5378 C6 88 53      je _if205_else
12555  537B             _if205_true:
12556  537B             ;; c1 = 100; 
12557  537B FA 09 00      lea d, [bp + 9] ; $c1
12558  537E DA            push d
12559  537F 26 64 00      mov b, $64
12560  5382 E7            pop d
12561  5383 FD 43         mov [d], b
12562  5385 0A D4 54      jmp _if205_exit
12563  5388             _if205_else:
12564  5388             ;; if (a == 0) { 
12565  5388             _if206_cond:
12566  5388 FA 0B 00      lea d, [bp + 11] ; $a
12567  538B 2A            mov b, [d]
12568  538C             ; START RELATIONAL
12569  538C D7            push a
12570  538D 11            mov a, b
12571  538E 26 00 00      mov b, $0
12572  5391 B0            cmp a, b
12573  5392 FD 71         seq ; ==
12574  5394 E4            pop a
12575  5395             ; END RELATIONAL
12576  5395 C0 00 00      cmp b, 0
12577  5398 C6 A8 53      je _if206_else
12578  539B             _if206_true:
12579  539B             ;; c1 = 500; 
12580  539B FA 09 00      lea d, [bp + 9] ; $c1
12581  539E DA            push d
12582  539F 26 F4 01      mov b, $1f4
12583  53A2 E7            pop d
12584  53A3 FD 43         mov [d], b
12585  53A5 0A D4 54      jmp _if206_exit
12586  53A8             _if206_else:
12587  53A8             ;; c1 = 100; 
12588  53A8 FA 09 00      lea d, [bp + 9] ; $c1
12589  53AB DA            push d
12590  53AC 26 64 00      mov b, $64
12591  53AF E7            pop d
12592  53B0 FD 43         mov [d], b
12593  53B2             ;; if (al <= xl) 
12594  53B2             _if207_cond:
12595  53B2 FA F9 FF      lea d, [bp + -7] ; $al
12596  53B5 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12597  53B8 FD 39         mov c, b ; And place it into C
12598  53BA 2A            mov b, [d] ; Lower Word in B
12599  53BB             ; START RELATIONAL
12600  53BB D7            push a
12601  53BC FD D8         push g
12602  53BE 11            mov a, b
12603  53BF FD 7A         mov g, c
12604  53C1 FA FD FF      lea d, [bp + -3] ; $xl
12605  53C4 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12606  53C7 FD 39         mov c, b ; And place it into C
12607  53C9 2A            mov b, [d] ; Lower Word in B
12608  53CA FD 76         sleu
12609  53CC FD F1         pop g
12610  53CE E4            pop a
12611  53CF             ; END RELATIONAL
12612  53CF C0 00 00      cmp b, 0
12613  53D2 C6 1F 54      je _if207_else
12614  53D5             _if207_true:
12615  53D5             ;; printf("%s", print100(c1 + ((al * 100) / xl))); 
12616  53D5 FA 09 00      lea d, [bp + 9] ; $c1
12617  53D8 2A            mov b, [d]
12618  53D9             ; START TERMS
12619  53D9 D7            push a
12620  53DA 11            mov a, b
12621  53DB FA F9 FF      lea d, [bp + -7] ; $al
12622  53DE 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12623  53E1 FD 39         mov c, b ; And place it into C
12624  53E3 2A            mov b, [d] ; Lower Word in B
12625  53E4             ; START FACTORS
12626  53E4 D7            push a
12627  53E5 11            mov a, b
12628  53E6 26 64 00      mov b, $64
12629  53E9 AC            mul a, b ; *
12630  53EA 11            mov a, b
12631  53EB 27            mov b, a
12632  53EC E4            pop a
12633  53ED             ; END FACTORS
12634  53ED             ; START FACTORS
12635  53ED D7            push a
12636  53EE 11            mov a, b
12637  53EF FA FD FF      lea d, [bp + -3] ; $xl
12638  53F2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12639  53F5 FD 39         mov c, b ; And place it into C
12640  53F7 2A            mov b, [d] ; Lower Word in B
12641  53F8 AE            div a, b
12642  53F9 27            mov b, a
12643  53FA E4            pop a
12644  53FB             ; END FACTORS
12645  53FB 54            add a, b
12646  53FC D7            push a
12647  53FD FD 12         mov a, g
12648  53FF 28            mov b, c
12649  5400 5C            adc a, b
12650  5401 39            mov c, a
12651  5402 E5            pop b
12652  5403 E4            pop a
12653  5404             ; END TERMS
12654  5404 FD AB         swp b
12655  5406 D8            push b
12656  5407 07 01 20      call print100
12657  540A 51 02 00      add sp, 2
12658  540D FD AB         swp b
12659  540F D8            push b
12660  5410 26 CD 74      mov b, _s153 ; "%s"
12661  5413 FD AB         swp b
12662  5415 D8            push b
12663  5416 07 D6 05      call printf
12664  5419 51 04 00      add sp, 4
12665  541C 0A 83 54      jmp _if207_exit
12666  541F             _if207_else:
12667  541F             ;; printf("%s", print100(c1 + ((((al * 2) - xl) * 100) / al))); 
12668  541F FA 09 00      lea d, [bp + 9] ; $c1
12669  5422 2A            mov b, [d]
12670  5423             ; START TERMS
12671  5423 D7            push a
12672  5424 11            mov a, b
12673  5425 FA F9 FF      lea d, [bp + -7] ; $al
12674  5428 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12675  542B FD 39         mov c, b ; And place it into C
12676  542D 2A            mov b, [d] ; Lower Word in B
12677  542E             ; START FACTORS
12678  542E D7            push a
12679  542F 11            mov a, b
12680  5430 26 02 00      mov b, $2
12681  5433 AC            mul a, b ; *
12682  5434 11            mov a, b
12683  5435 27            mov b, a
12684  5436 E4            pop a
12685  5437             ; END FACTORS
12686  5437             ; START TERMS
12687  5437 D7            push a
12688  5438 FD D8         push g
12689  543A 11            mov a, b
12690  543B FD 7A         mov g, c
12691  543D FA FD FF      lea d, [bp + -3] ; $xl
12692  5440 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12693  5443 FD 39         mov c, b ; And place it into C
12694  5445 2A            mov b, [d] ; Lower Word in B
12695  5446 60            sub a, b
12696  5447 27            mov b, a
12697  5448 FD F1         pop g
12698  544A E4            pop a
12699  544B             ; END TERMS
12700  544B             ; START FACTORS
12701  544B D7            push a
12702  544C 11            mov a, b
12703  544D 26 64 00      mov b, $64
12704  5450 AC            mul a, b ; *
12705  5451 11            mov a, b
12706  5452 27            mov b, a
12707  5453 E4            pop a
12708  5454             ; END FACTORS
12709  5454             ; START FACTORS
12710  5454 D7            push a
12711  5455 11            mov a, b
12712  5456 FA F9 FF      lea d, [bp + -7] ; $al
12713  5459 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12714  545C FD 39         mov c, b ; And place it into C
12715  545E 2A            mov b, [d] ; Lower Word in B
12716  545F AE            div a, b
12717  5460 27            mov b, a
12718  5461 E4            pop a
12719  5462             ; END FACTORS
12720  5462 54            add a, b
12721  5463 D7            push a
12722  5464 FD 12         mov a, g
12723  5466 28            mov b, c
12724  5467 5C            adc a, b
12725  5468 39            mov c, a
12726  5469 E5            pop b
12727  546A E4            pop a
12728  546B             ; END TERMS
12729  546B FD AB         swp b
12730  546D D8            push b
12731  546E 07 01 20      call print100
12732  5471 51 02 00      add sp, 2
12733  5474 FD AB         swp b
12734  5476 D8            push b
12735  5477 26 CD 74      mov b, _s153 ; "%s"
12736  547A FD AB         swp b
12737  547C D8            push b
12738  547D 07 D6 05      call printf
12739  5480 51 04 00      add sp, 4
12740  5483             _if207_exit:
12741  5483             ;; printf(dist_1, print100((xl > al) ? xl : al)); 
12742  5483             _ternary211_cond:
12743  5483 FA FD FF      lea d, [bp + -3] ; $xl
12744  5486 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12745  5489 FD 39         mov c, b ; And place it into C
12746  548B 2A            mov b, [d] ; Lower Word in B
12747  548C             ; START RELATIONAL
12748  548C D7            push a
12749  548D FD D8         push g
12750  548F 11            mov a, b
12751  5490 FD 7A         mov g, c
12752  5492 FA F9 FF      lea d, [bp + -7] ; $al
12753  5495 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12754  5498 FD 39         mov c, b ; And place it into C
12755  549A 2A            mov b, [d] ; Lower Word in B
12756  549B FD 81         sgu
12757  549D FD F1         pop g
12758  549F E4            pop a
12759  54A0             ; END RELATIONAL
12760  54A0 C0 00 00      cmp b, 0
12761  54A3 C6 B2 54      je _ternary211_false
12762  54A6             _ternary211_true:
12763  54A6 FA FD FF      lea d, [bp + -3] ; $xl
12764  54A9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12765  54AC FD 39         mov c, b ; And place it into C
12766  54AE 2A            mov b, [d] ; Lower Word in B
12767  54AF 0A BB 54      jmp _ternary211_exit
12768  54B2             _ternary211_false:
12769  54B2 FA F9 FF      lea d, [bp + -7] ; $al
12770  54B5 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12771  54B8 FD 39         mov c, b ; And place it into C
12772  54BA 2A            mov b, [d] ; Lower Word in B
12773  54BB             _ternary211_exit:
12774  54BB FD AB         swp b
12775  54BD D8            push b
12776  54BE 07 01 20      call print100
12777  54C1 51 02 00      add sp, 2
12778  54C4 FD AB         swp b
12779  54C6 D8            push b
12780  54C7 3B 3D 63      mov d, _dist_1 ; $dist_1
12781  54CA 2A            mov b, [d]
12782  54CB FD AB         swp b
12783  54CD D8            push b
12784  54CE 07 D6 05      call printf
12785  54D1 51 04 00      add sp, 4
12786  54D4             _if206_exit:
12787  54D4             _if205_exit:
12788  54D4             _if204_exit:
12789  54D4             _if196_exit:
12790  54D4 F9            leave
12791  54D5 09            ret
12792  54D6             
12793  54D6             ship_destroyed:
12794  54D6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
12795  54D9             ;; puts("The Enterprise has been destroyed. The Federation will be conquered.\n"); 
12796  54D9 26 D0 74      mov b, _s154 ; "The Enterprise has been destroyed. The Federation will be conquered.\n"
12797  54DC FD AB         swp b
12798  54DE D8            push b
12799  54DF 07 36 13      call puts
12800  54E2 51 02 00      add sp, 2
12801  54E5             ;; end_of_time(); 
12802  54E5 07 EA 54      call end_of_time
12803  54E8 F9            leave
12804  54E9 09            ret
12805  54EA             
12806  54EA             end_of_time:
12807  54EA F8 00 00      enter 0 ; (push bp; mov bp, sp)
12808  54ED             ;; printf("It is stardate %d.\n\n",  FROM_FIXED(stardate)); 
12809  54ED 3B 75 61      mov d, _stardate ; $stardate
12810  54F0 2A            mov b, [d]
12811  54F1 FD AB         swp b
12812  54F3 D8            push b
12813  54F4 07 ED 1C      call FROM_FIXED
12814  54F7 51 02 00      add sp, 2
12815  54FA FD AB         swp b
12816  54FC D8            push b
12817  54FD 26 16 75      mov b, _s155 ; "It is stardate %d.\n\n"
12818  5500 FD AB         swp b
12819  5502 D8            push b
12820  5503 07 D6 05      call printf
12821  5506 51 04 00      add sp, 4
12822  5509             ;; resign_commision(); 
12823  5509 07 0E 55      call resign_commision
12824  550C F9            leave
12825  550D 09            ret
12826  550E             
12827  550E             resign_commision:
12828  550E F8 00 00      enter 0 ; (push bp; mov bp, sp)
12829  5511             ;; printf("There were %d Klingon Battlecruisers left at the end of your mission.\n\n", klingons_left); 
12830  5511 3B 4F 61      mov d, _klingons_left ; $klingons_left
12831  5514 32            mov bl, [d]
12832  5515 A7 00         mov bh, 0
12833  5517 DD            push bl
12834  5518 26 2B 75      mov b, _s156 ; "There were %d Klingon Battlecruisers left at the end of your mission.\n\n"
12835  551B FD AB         swp b
12836  551D D8            push b
12837  551E 07 D6 05      call printf
12838  5521 51 03 00      add sp, 3
12839  5524             ;; end_of_game(); 
12840  5524 07 B0 55      call end_of_game
12841  5527 F9            leave
12842  5528 09            ret
12843  5529             
12844  5529             won_game:
12845  5529 F8 00 00      enter 0 ; (push bp; mov bp, sp)
12846  552C             ;; puts("Congratulations, Captain!  The last Klingon Battle Cruiser\n menacing the Federation has been destoyed.\n"); 
12847  552C 26 73 75      mov b, _s157 ; "Congratulations, Captain!  The last Klingon Battle Cruiser\n menacing the Federation has been destoyed.\n"
12848  552F FD AB         swp b
12849  5531 D8            push b
12850  5532 07 36 13      call puts
12851  5535 51 02 00      add sp, 2
12852  5538             ;; if (FROM_FIXED(stardate) - time_start > 0) 
12853  5538             _if212_cond:
12854  5538 3B 75 61      mov d, _stardate ; $stardate
12855  553B 2A            mov b, [d]
12856  553C FD AB         swp b
12857  553E D8            push b
12858  553F 07 ED 1C      call FROM_FIXED
12859  5542 51 02 00      add sp, 2
12860  5545             ; START TERMS
12861  5545 D7            push a
12862  5546 11            mov a, b
12863  5547 3B 59 61      mov d, _time_start ; $time_start
12864  554A 2A            mov b, [d]
12865  554B 60            sub a, b
12866  554C 27            mov b, a
12867  554D E4            pop a
12868  554E             ; END TERMS
12869  554E             ; START RELATIONAL
12870  554E D7            push a
12871  554F 11            mov a, b
12872  5550 26 00 00      mov b, $0
12873  5553 B0            cmp a, b
12874  5554 FD 81         sgu ; > (unsigned)
12875  5556 E4            pop a
12876  5557             ; END RELATIONAL
12877  5557 C0 00 00      cmp b, 0
12878  555A C6 AB 55      je _if212_exit
12879  555D             _if212_true:
12880  555D             ;; printf("Your efficiency rating is %s\n", 
12881  555D 3B 4E 61      mov d, _total_klingons ; $total_klingons
12882  5560 32            mov bl, [d]
12883  5561 A7 00         mov bh, 0
12884  5563 FD AB         swp b
12885  5565 D8            push b
12886  5566 07 FE 1C      call TO_FIXED00
12887  5569 51 02 00      add sp, 2
12888  556C             ; START FACTORS
12889  556C D7            push a
12890  556D 11            mov a, b
12891  556E 3B 75 61      mov d, _stardate ; $stardate
12892  5571 2A            mov b, [d]
12893  5572 FD AB         swp b
12894  5574 D8            push b
12895  5575 07 ED 1C      call FROM_FIXED
12896  5578 51 02 00      add sp, 2
12897  557B             ; START TERMS
12898  557B D7            push a
12899  557C 11            mov a, b
12900  557D 3B 59 61      mov d, _time_start ; $time_start
12901  5580 2A            mov b, [d]
12902  5581 60            sub a, b
12903  5582 27            mov b, a
12904  5583 E4            pop a
12905  5584             ; END TERMS
12906  5584 AE            div a, b
12907  5585 27            mov b, a
12908  5586 E4            pop a
12909  5587             ; END FACTORS
12910  5587 FD AB         swp b
12911  5589 D8            push b
12912  558A 07 4C 5F      call square00
12913  558D 51 02 00      add sp, 2
12914  5590 FD AB         swp b
12915  5592 D8            push b
12916  5593 07 01 20      call print100
12917  5596 51 02 00      add sp, 2
12918  5599 FD AB         swp b
12919  559B D8            push b
12920  559C 26 DB 75      mov b, _s158 ; "Your efficiency rating is %s\n"
12921  559F FD AB         swp b
12922  55A1 D8            push b
12923  55A2 07 D6 05      call printf
12924  55A5 51 04 00      add sp, 4
12925  55A8 0A AB 55      jmp _if212_exit
12926  55AB             _if212_exit:
12927  55AB             ;; end_of_game(); 
12928  55AB 07 B0 55      call end_of_game
12929  55AE F9            leave
12930  55AF 09            ret
12931  55B0             
12932  55B0             end_of_game:
12933  55B0 F8 00 00      enter 0 ; (push bp; mov bp, sp)
12934  55B3             ; $x 
12935  55B3 52 04 00      sub sp, 4
12936  55B6             ;; if (starbases_left > 0) { 
12937  55B6             _if213_cond:
12938  55B6 3B 7A 60      mov d, _starbases_left ; $starbases_left
12939  55B9 32            mov bl, [d]
12940  55BA A7 00         mov bh, 0
12941  55BC             ; START RELATIONAL
12942  55BC D7            push a
12943  55BD 11            mov a, b
12944  55BE 26 00 00      mov b, $0
12945  55C1 B0            cmp a, b
12946  55C2 FD 7F         sgt ; >
12947  55C4 E4            pop a
12948  55C5             ; END RELATIONAL
12949  55C5 C0 00 00      cmp b, 0
12950  55C8 C6 39 56      je _if213_exit
12951  55CB             _if213_true:
12952  55CB             ;; puts("The Federation is in need of a new starship commander"); 
12953  55CB 26 F9 75      mov b, _s159 ; "The Federation is in need of a new starship commander"
12954  55CE FD AB         swp b
12955  55D0 D8            push b
12956  55D1 07 36 13      call puts
12957  55D4 51 02 00      add sp, 2
12958  55D7             ;; puts(" for a similar mission.\n"); 
12959  55D7 26 2F 76      mov b, _s160 ; " for a similar mission.\n"
12960  55DA FD AB         swp b
12961  55DC D8            push b
12962  55DD 07 36 13      call puts
12963  55E0 51 02 00      add sp, 2
12964  55E3             ;; puts("If there is a volunteer, let him step forward and"); 
12965  55E3 26 48 76      mov b, _s161 ; "If there is a volunteer, let him step forward and"
12966  55E6 FD AB         swp b
12967  55E8 D8            push b
12968  55E9 07 36 13      call puts
12969  55EC 51 02 00      add sp, 2
12970  55EF             ;; puts(" enter aye: "); 
12971  55EF 26 7A 76      mov b, _s162 ; " enter aye: "
12972  55F2 FD AB         swp b
12973  55F4 D8            push b
12974  55F5 07 36 13      call puts
12975  55F8 51 02 00      add sp, 2
12976  55FB             ;; input(x,4); 
12977  55FB 26 04 00      mov b, $4
12978  55FE DD            push bl
12979  55FF FA FD FF      lea d, [bp + -3] ; $x
12980  5602 2D            mov b, d
12981  5603 FD AB         swp b
12982  5605 D8            push b
12983  5606 07 81 1D      call input
12984  5609 51 03 00      add sp, 3
12985  560C             ;; if (!strncmp(x, "aye", 3)) 
12986  560C             _if214_cond:
12987  560C 26 03 00      mov b, $3
12988  560F FD AB         swp b
12989  5611 D8            push b
12990  5612 26 87 76      mov b, _s163 ; "aye"
12991  5615 FD AB         swp b
12992  5617 D8            push b
12993  5618 FA FD FF      lea d, [bp + -3] ; $x
12994  561B 2D            mov b, d
12995  561C FD AB         swp b
12996  561E D8            push b
12997  561F 07 D0 04      call strncmp
12998  5622 51 06 00      add sp, 6
12999  5625 C0 00 00      cmp b, 0
13000  5628 FD 71         seq ; !
13001  562A C0 00 00      cmp b, 0
13002  562D C6 36 56      je _if214_exit
13003  5630             _if214_true:
13004  5630             ;; new_game(); 
13005  5630 07 21 21      call new_game
13006  5633 0A 36 56      jmp _if214_exit
13007  5636             _if214_exit:
13008  5636 0A 39 56      jmp _if213_exit
13009  5639             _if213_exit:
13010  5639             ;; exit(); 
13011  5639 07 33 17      call exit
13012  563C F9            leave
13013  563D 09            ret
13014  563E             
13015  563E             klingons_move:
13016  563E F8 00 00      enter 0 ; (push bp; mov bp, sp)
13017  5641             ; $i 
13018  5641             ; $k 
13019  5641 52 04 00      sub sp, 4
13020  5644             ;; k = &kdata; 
13021  5644 FA FD FF      lea d, [bp + -3] ; $k
13022  5647 DA            push d
13023  5648 3B 41 61      mov d, _kdata_data ; $kdata
13024  564B 2D            mov b, d
13025  564C E7            pop d
13026  564D FD 43         mov [d], b
13027  564F             ;; for (i = 0; i <= 2; i++) { 
13028  564F             _for215_init:
13029  564F FA FF FF      lea d, [bp + -1] ; $i
13030  5652 DA            push d
13031  5653 26 00 00      mov b, $0
13032  5656 E7            pop d
13033  5657 FD 43         mov [d], b
13034  5659             _for215_cond:
13035  5659 FA FF FF      lea d, [bp + -1] ; $i
13036  565C 2A            mov b, [d]
13037  565D             ; START RELATIONAL
13038  565D D7            push a
13039  565E 11            mov a, b
13040  565F 26 02 00      mov b, $2
13041  5662 B0            cmp a, b
13042  5663 FD 73         slt ; <= (signed)
13043  5665 E4            pop a
13044  5666             ; END RELATIONAL
13045  5666 C0 00 00      cmp b, 0
13046  5669 C6 D9 56      je _for215_exit
13047  566C             _for215_block:
13048  566C             ;; if (k->energy > 0) { 
13049  566C             _if216_cond:
13050  566C FA FD FF      lea d, [bp + -3] ; $k
13051  566F FD 2A         mov d, [d]
13052  5671 58 02 00      add d, 2
13053  5674 2A            mov b, [d]
13054  5675             ; START RELATIONAL
13055  5675 D7            push a
13056  5676 11            mov a, b
13057  5677 26 00 00      mov b, $0
13058  567A B0            cmp a, b
13059  567B FD 7F         sgt ; >
13060  567D E4            pop a
13061  567E             ; END RELATIONAL
13062  567E C0 00 00      cmp b, 0
13063  5681 C6 BA 56      je _if216_exit
13064  5684             _if216_true:
13065  5684             ;; wipe_klingon(k); 
13066  5684 FA FD FF      lea d, [bp + -3] ; $k
13067  5687 2A            mov b, [d]
13068  5688 FD AB         swp b
13069  568A D8            push b
13070  568B 07 68 3B      call wipe_klingon
13071  568E 51 02 00      add sp, 2
13072  5691             ;; find_set_empty_place( 	3        , k->y, k->x); 
13073  5691 FA FD FF      lea d, [bp + -3] ; $k
13074  5694 FD 2A         mov d, [d]
13075  5696 58 01 00      add d, 1
13076  5699 32            mov bl, [d]
13077  569A A7 00         mov bh, 0
13078  569C FD AB         swp b
13079  569E D8            push b
13080  569F FA FD FF      lea d, [bp + -3] ; $k
13081  56A2 FD 2A         mov d, [d]
13082  56A4 58 00 00      add d, 0
13083  56A7 32            mov bl, [d]
13084  56A8 A7 00         mov bh, 0
13085  56AA FD AB         swp b
13086  56AC D8            push b
13087  56AD 26 03 00      mov b, $3
13088  56B0 DD            push bl
13089  56B1 07 62 5C      call find_set_empty_place
13090  56B4 51 05 00      add sp, 5
13091  56B7 0A BA 56      jmp _if216_exit
13092  56BA             _if216_exit:
13093  56BA             ;; k++; 
13094  56BA FA FD FF      lea d, [bp + -3] ; $k
13095  56BD 2A            mov b, [d]
13096  56BE D8            push b
13097  56BF FD 77         inc b
13098  56C1 FD 77         inc b
13099  56C3 FA FD FF      lea d, [bp + -3] ; $k
13100  56C6 FD 43         mov [d], b
13101  56C8 E5            pop b
13102  56C9             _for215_update:
13103  56C9 FA FF FF      lea d, [bp + -1] ; $i
13104  56CC 2A            mov b, [d]
13105  56CD D8            push b
13106  56CE FD 77         inc b
13107  56D0 FA FF FF      lea d, [bp + -1] ; $i
13108  56D3 FD 43         mov [d], b
13109  56D5 E5            pop b
13110  56D6 0A 59 56      jmp _for215_cond
13111  56D9             _for215_exit:
13112  56D9             ;; klingons_shoot(); 
13113  56D9 07 DE 56      call klingons_shoot
13114  56DC F9            leave
13115  56DD 09            ret
13116  56DE             
13117  56DE             klingons_shoot:
13118  56DE F8 00 00      enter 0 ; (push bp; mov bp, sp)
13119  56E1             ; $r 
13120  56E1             ; $h 
13121  56E1             ; $i 
13122  56E1             ; $k 
13123  56E1             ; $ratio 
13124  56E1 52 0C 00      sub sp, 12
13125  56E4             ;; k = &kdata; 
13126  56E4 FA F9 FF      lea d, [bp + -7] ; $k
13127  56E7 DA            push d
13128  56E8 3B 41 61      mov d, _kdata_data ; $kdata
13129  56EB 2D            mov b, d
13130  56EC E7            pop d
13131  56ED FD 43         mov [d], b
13132  56EF             ;; if (klingons <= 0) 
13133  56EF             _if217_cond:
13134  56EF 3B 4D 61      mov d, _klingons ; $klingons
13135  56F2 32            mov bl, [d]
13136  56F3 A7 00         mov bh, 0
13137  56F5             ; START RELATIONAL
13138  56F5 D7            push a
13139  56F6 11            mov a, b
13140  56F7 26 00 00      mov b, $0
13141  56FA B0            cmp a, b
13142  56FB FD 75         slu ; <= (unsigned)
13143  56FD E4            pop a
13144  56FE             ; END RELATIONAL
13145  56FE C0 00 00      cmp b, 0
13146  5701 C6 09 57      je _if217_exit
13147  5704             _if217_true:
13148  5704             ;; return; 
13149  5704 F9            leave
13150  5705 09            ret
13151  5706 0A 09 57      jmp _if217_exit
13152  5709             _if217_exit:
13153  5709             ;; if (docked) { 
13154  5709             _if218_cond:
13155  5709 3B 9A 60      mov d, _docked ; $docked
13156  570C 32            mov bl, [d]
13157  570D A7 00         mov bh, 0
13158  570F C0 00 00      cmp b, 0
13159  5712 C6 26 57      je _if218_exit
13160  5715             _if218_true:
13161  5715             ;; puts("Starbase shields protect the Enterprise\n"); 
13162  5715 26 8B 76      mov b, _s164 ; "Starbase shields protect the Enterprise\n"
13163  5718 FD AB         swp b
13164  571A D8            push b
13165  571B 07 36 13      call puts
13166  571E 51 02 00      add sp, 2
13167  5721             ;; return; 
13168  5721 F9            leave
13169  5722 09            ret
13170  5723 0A 26 57      jmp _if218_exit
13171  5726             _if218_exit:
13172  5726             ;; for (i = 0; i <= 2; i++) { 
13173  5726             _for219_init:
13174  5726 FA FB FF      lea d, [bp + -5] ; $i
13175  5729 DA            push d
13176  572A 26 00 00      mov b, $0
13177  572D E7            pop d
13178  572E FD 3E         mov [d], bl
13179  5730             _for219_cond:
13180  5730 FA FB FF      lea d, [bp + -5] ; $i
13181  5733 32            mov bl, [d]
13182  5734 A7 00         mov bh, 0
13183  5736             ; START RELATIONAL
13184  5736 D7            push a
13185  5737 11            mov a, b
13186  5738 26 02 00      mov b, $2
13187  573B B0            cmp a, b
13188  573C FD 75         slu ; <= (unsigned)
13189  573E E4            pop a
13190  573F             ; END RELATIONAL
13191  573F C0 00 00      cmp b, 0
13192  5742 C6 BC 59      je _for219_exit
13193  5745             _for219_block:
13194  5745             ;; if (k->energy > 0) { 
13195  5745             _if220_cond:
13196  5745 FA F9 FF      lea d, [bp + -7] ; $k
13197  5748 FD 2A         mov d, [d]
13198  574A 58 02 00      add d, 2
13199  574D 2A            mov b, [d]
13200  574E             ; START RELATIONAL
13201  574E D7            push a
13202  574F 11            mov a, b
13203  5750 26 00 00      mov b, $0
13204  5753 B0            cmp a, b
13205  5754 FD 7F         sgt ; >
13206  5756 E4            pop a
13207  5757             ; END RELATIONAL
13208  5757 C0 00 00      cmp b, 0
13209  575A C6 9B 59      je _if220_exit
13210  575D             _if220_true:
13211  575D             ;; h = k->energy * (200UL + get_rand(100)); 
13212  575D FA FC FF      lea d, [bp + -4] ; $h
13213  5760 DA            push d
13214  5761 FA F9 FF      lea d, [bp + -7] ; $k
13215  5764 FD 2A         mov d, [d]
13216  5766 58 02 00      add d, 2
13217  5769 2A            mov b, [d]
13218  576A             ; START FACTORS
13219  576A D7            push a
13220  576B 11            mov a, b
13221  576C 26 C8 00      mov b, 200
13222  576F 38 00 00      mov c, 0
13223  5772             ; START TERMS
13224  5772 D7            push a
13225  5773 FD D8         push g
13226  5775 11            mov a, b
13227  5776 FD 7A         mov g, c
13228  5778 26 64 00      mov b, $64
13229  577B FD AB         swp b
13230  577D D8            push b
13231  577E 07 21 1D      call get_rand
13232  5781 51 02 00      add sp, 2
13233  5784 54            add a, b
13234  5785 D7            push a
13235  5786 FD 12         mov a, g
13236  5788 28            mov b, c
13237  5789 5C            adc a, b
13238  578A 39            mov c, a
13239  578B E5            pop b
13240  578C FD F1         pop g
13241  578E E4            pop a
13242  578F             ; END TERMS
13243  578F AC            mul a, b ; *
13244  5790 11            mov a, b
13245  5791 27            mov b, a
13246  5792 E4            pop a
13247  5793             ; END FACTORS
13248  5793 E7            pop d
13249  5794 FD 43         mov [d], b
13250  5796 28            mov b, c
13251  5797 FD 44 02 00   mov [d + 2], b
13252  579B             ;; h =h* 100;	/* Ready for division in fixed */ 
13253  579B FA FC FF      lea d, [bp + -4] ; $h
13254  579E DA            push d
13255  579F FA FC FF      lea d, [bp + -4] ; $h
13256  57A2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13257  57A5 FD 39         mov c, b ; And place it into C
13258  57A7 2A            mov b, [d] ; Lower Word in B
13259  57A8             ; START FACTORS
13260  57A8 D7            push a
13261  57A9 11            mov a, b
13262  57AA 26 64 00      mov b, $64
13263  57AD AC            mul a, b ; *
13264  57AE 11            mov a, b
13265  57AF 27            mov b, a
13266  57B0 E4            pop a
13267  57B1             ; END FACTORS
13268  57B1 E7            pop d
13269  57B2 FD 43         mov [d], b
13270  57B4 28            mov b, c
13271  57B5 FD 44 02 00   mov [d + 2], b
13272  57B9             ;; h =h/ distance_to(k); 
13273  57B9 FA FC FF      lea d, [bp + -4] ; $h
13274  57BC DA            push d
13275  57BD FA FC FF      lea d, [bp + -4] ; $h
13276  57C0 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13277  57C3 FD 39         mov c, b ; And place it into C
13278  57C5 2A            mov b, [d] ; Lower Word in B
13279  57C6             ; START FACTORS
13280  57C6 D7            push a
13281  57C7 11            mov a, b
13282  57C8 FA F9 FF      lea d, [bp + -7] ; $k
13283  57CB 2A            mov b, [d]
13284  57CC FD AB         swp b
13285  57CE D8            push b
13286  57CF 07 C4 5F      call distance_to
13287  57D2 51 02 00      add sp, 2
13288  57D5 AE            div a, b
13289  57D6 27            mov b, a
13290  57D7 E4            pop a
13291  57D8             ; END FACTORS
13292  57D8 E7            pop d
13293  57D9 FD 43         mov [d], b
13294  57DB 28            mov b, c
13295  57DC FD 44 02 00   mov [d + 2], b
13296  57E0             ;; shield = shield - FROM_FIXED00(h); 
13297  57E0 3B 56 61      mov d, _shield ; $shield
13298  57E3 DA            push d
13299  57E4 3B 56 61      mov d, _shield ; $shield
13300  57E7 2A            mov b, [d]
13301  57E8             ; START TERMS
13302  57E8 D7            push a
13303  57E9 11            mov a, b
13304  57EA FA FC FF      lea d, [bp + -4] ; $h
13305  57ED 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13306  57F0 FD 39         mov c, b ; And place it into C
13307  57F2 2A            mov b, [d] ; Lower Word in B
13308  57F3 FD AB         swp b
13309  57F5 D8            push b
13310  57F6 07 10 1D      call FROM_FIXED00
13311  57F9 51 02 00      add sp, 2
13312  57FC 60            sub a, b
13313  57FD 27            mov b, a
13314  57FE E4            pop a
13315  57FF             ; END TERMS
13316  57FF E7            pop d
13317  5800 FD 43         mov [d], b
13318  5802             ;; k->energy = (k->energy * 100) / (300 + get_rand(100)); 
13319  5802 FA F9 FF      lea d, [bp + -7] ; $k
13320  5805 FD 2A         mov d, [d]
13321  5807 58 02 00      add d, 2
13322  580A DA            push d
13323  580B FA F9 FF      lea d, [bp + -7] ; $k
13324  580E FD 2A         mov d, [d]
13325  5810 58 02 00      add d, 2
13326  5813 2A            mov b, [d]
13327  5814             ; START FACTORS
13328  5814 D7            push a
13329  5815 11            mov a, b
13330  5816 26 64 00      mov b, $64
13331  5819 AC            mul a, b ; *
13332  581A 11            mov a, b
13333  581B 27            mov b, a
13334  581C E4            pop a
13335  581D             ; END FACTORS
13336  581D             ; START FACTORS
13337  581D D7            push a
13338  581E 11            mov a, b
13339  581F 26 2C 01      mov b, $12c
13340  5822             ; START TERMS
13341  5822 D7            push a
13342  5823 11            mov a, b
13343  5824 26 64 00      mov b, $64
13344  5827 FD AB         swp b
13345  5829 D8            push b
13346  582A 07 21 1D      call get_rand
13347  582D 51 02 00      add sp, 2
13348  5830 56            add b, a
13349  5831 E4            pop a
13350  5832             ; END TERMS
13351  5832 AE            div a, b
13352  5833 27            mov b, a
13353  5834 E4            pop a
13354  5835             ; END FACTORS
13355  5835 E7            pop d
13356  5836 FD 43         mov [d], b
13357  5838             ;; printf("%d unit hit on Enterprise from sector %d, %d\n", (unsigned)FROM_FIXED00(h), k->y, k->x); 
13358  5838 FA F9 FF      lea d, [bp + -7] ; $k
13359  583B FD 2A         mov d, [d]
13360  583D 58 01 00      add d, 1
13361  5840 32            mov bl, [d]
13362  5841 A7 00         mov bh, 0
13363  5843 DD            push bl
13364  5844 FA F9 FF      lea d, [bp + -7] ; $k
13365  5847 FD 2A         mov d, [d]
13366  5849 58 00 00      add d, 0
13367  584C 32            mov bl, [d]
13368  584D A7 00         mov bh, 0
13369  584F DD            push bl
13370  5850 FA FC FF      lea d, [bp + -4] ; $h
13371  5853 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13372  5856 FD 39         mov c, b ; And place it into C
13373  5858 2A            mov b, [d] ; Lower Word in B
13374  5859 FD AB         swp b
13375  585B D8            push b
13376  585C 26 B4 76      mov b, _s165 ; "%d unit hit on Enterprise from sector %d, %d\n"
13377  585F FD AB         swp b
13378  5861 D8            push b
13379  5862 07 D6 05      call printf
13380  5865 51 06 00      add sp, 6
13381  5868             ;; if (shield <= 0) { 
13382  5868             _if221_cond:
13383  5868 3B 56 61      mov d, _shield ; $shield
13384  586B 2A            mov b, [d]
13385  586C             ; START RELATIONAL
13386  586C D7            push a
13387  586D 11            mov a, b
13388  586E 26 00 00      mov b, $0
13389  5871 B0            cmp a, b
13390  5872 FD 73         slt ; <= (signed)
13391  5874 E4            pop a
13392  5875             ; END RELATIONAL
13393  5875 C0 00 00      cmp b, 0
13394  5878 C6 8B 58      je _if221_exit
13395  587B             _if221_true:
13396  587B             ;; putchar('\n'); 
13397  587B 26 0A 00      mov b, $a
13398  587E DD            push bl
13399  587F 07 00 13      call putchar
13400  5882 51 01 00      add sp, 1
13401  5885             ;; ship_destroyed(); 
13402  5885 07 D6 54      call ship_destroyed
13403  5888 0A 8B 58      jmp _if221_exit
13404  588B             _if221_exit:
13405  588B             ;; printf("    <Shields down to %d units>\n\n", shield); 
13406  588B 3B 56 61      mov d, _shield ; $shield
13407  588E 2A            mov b, [d]
13408  588F FD AB         swp b
13409  5891 D8            push b
13410  5892 26 E2 76      mov b, _s166 ; "    <Shields down to %d units>\n\n"
13411  5895 FD AB         swp b
13412  5897 D8            push b
13413  5898 07 D6 05      call printf
13414  589B 51 04 00      add sp, 4
13415  589E             ;; if (h >= 20) { 
13416  589E             _if222_cond:
13417  589E FA FC FF      lea d, [bp + -4] ; $h
13418  58A1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13419  58A4 FD 39         mov c, b ; And place it into C
13420  58A6 2A            mov b, [d] ; Lower Word in B
13421  58A7             ; START RELATIONAL
13422  58A7 D7            push a
13423  58A8 FD D8         push g
13424  58AA 11            mov a, b
13425  58AB FD 7A         mov g, c
13426  58AD 26 14 00      mov b, $14
13427  58B0 38 00 00      mov c, 0
13428  58B3 FD 82         sgeu
13429  58B5 FD F1         pop g
13430  58B7 E4            pop a
13431  58B8             ; END RELATIONAL
13432  58B8 C0 00 00      cmp b, 0
13433  58BB C6 98 59      je _if222_exit
13434  58BE             _if222_true:
13435  58BE             ;; ratio = ((int)h)/shield; 
13436  58BE FA F5 FF      lea d, [bp + -11] ; $ratio
13437  58C1 DA            push d
13438  58C2 FA FC FF      lea d, [bp + -4] ; $h
13439  58C5 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13440  58C8 FD 39         mov c, b ; And place it into C
13441  58CA 2A            mov b, [d] ; Lower Word in B
13442  58CB             ; START FACTORS
13443  58CB D7            push a
13444  58CC 11            mov a, b
13445  58CD 3B 56 61      mov d, _shield ; $shield
13446  58D0 2A            mov b, [d]
13447  58D1 AE            div a, b
13448  58D2 27            mov b, a
13449  58D3 E4            pop a
13450  58D4             ; END FACTORS
13451  58D4 E7            pop d
13452  58D5 FD 43         mov [d], b
13453  58D7 28            mov b, c
13454  58D8 FD 44 02 00   mov [d + 2], b
13455  58DC             ;; if (get_rand(10) <= 6 && ratio > 2) { 
13456  58DC             _if223_cond:
13457  58DC 26 0A 00      mov b, $a
13458  58DF FD AB         swp b
13459  58E1 D8            push b
13460  58E2 07 21 1D      call get_rand
13461  58E5 51 02 00      add sp, 2
13462  58E8             ; START RELATIONAL
13463  58E8 D7            push a
13464  58E9 11            mov a, b
13465  58EA 26 06 00      mov b, $6
13466  58ED B0            cmp a, b
13467  58EE FD 73         slt ; <= (signed)
13468  58F0 E4            pop a
13469  58F1             ; END RELATIONAL
13470  58F1 D7            push a
13471  58F2 11            mov a, b
13472  58F3 FA F5 FF      lea d, [bp + -11] ; $ratio
13473  58F6 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13474  58F9 FD 39         mov c, b ; And place it into C
13475  58FB 2A            mov b, [d] ; Lower Word in B
13476  58FC             ; START RELATIONAL
13477  58FC D7            push a
13478  58FD FD D8         push g
13479  58FF 11            mov a, b
13480  5900 FD 7A         mov g, c
13481  5902 26 02 00      mov b, $2
13482  5905 38 00 00      mov c, 0
13483  5908 FD 81         sgu
13484  590A FD F1         pop g
13485  590C E4            pop a
13486  590D             ; END RELATIONAL
13487  590D FD 22 00 00   mov g, 0
13488  5911 FD B1 00 00   sand32 ga, cb
13488  5915 00 00 
13489  5917 E4            pop a
13490  5918 C0 00 00      cmp b, 0
13491  591B C6 95 59      je _if223_exit
13492  591E             _if223_true:
13493  591E             ;; r = rand8(); 
13494  591E FA 00 00      lea d, [bp + 0] ; $r
13495  5921 DA            push d
13496  5922 07 70 1D      call rand8
13497  5925 E7            pop d
13498  5926 FD 3E         mov [d], bl
13499  5928             ;; damage[r] =damage[r] - ratio + get_rand(50); 
13500  5928 3B 5D 61      mov d, _damage_data ; $damage
13501  592B D7            push a
13502  592C DA            push d
13503  592D FA 00 00      lea d, [bp + 0] ; $r
13504  5930 32            mov bl, [d]
13505  5931 A7 00         mov bh, 0
13506  5933 E7            pop d
13507  5934 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13508  5938 E4            pop a
13509  5939 DA            push d
13510  593A 3B 5D 61      mov d, _damage_data ; $damage
13511  593D D7            push a
13512  593E DA            push d
13513  593F FA 00 00      lea d, [bp + 0] ; $r
13514  5942 32            mov bl, [d]
13515  5943 A7 00         mov bh, 0
13516  5945 E7            pop d
13517  5946 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13518  594A E4            pop a
13519  594B 2A            mov b, [d]
13520  594C             ; START TERMS
13521  594C D7            push a
13522  594D 11            mov a, b
13523  594E FA F5 FF      lea d, [bp + -11] ; $ratio
13524  5951 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13525  5954 FD 39         mov c, b ; And place it into C
13526  5956 2A            mov b, [d] ; Lower Word in B
13527  5957 60            sub a, b
13528  5958 27            mov b, a
13529  5959 11            mov a, b
13530  595A FD 7A         mov g, c
13531  595C 26 32 00      mov b, $32
13532  595F FD AB         swp b
13533  5961 D8            push b
13534  5962 07 21 1D      call get_rand
13535  5965 51 02 00      add sp, 2
13536  5968 54            add a, b
13537  5969 D7            push a
13538  596A FD 12         mov a, g
13539  596C 28            mov b, c
13540  596D 5C            adc a, b
13541  596E 39            mov c, a
13542  596F E5            pop b
13543  5970 E4            pop a
13544  5971             ; END TERMS
13545  5971 E7            pop d
13546  5972 FD 43         mov [d], b
13547  5974             ;; printf("Damage Control reports\n%s damaged by hit\n\n", get_device_name(r)); 
13548  5974 FA 00 00      lea d, [bp + 0] ; $r
13549  5977 32            mov bl, [d]
13550  5978 A7 00         mov bh, 0
13551  597A FD AB         swp b
13552  597C D8            push b
13553  597D 07 20 5D      call get_device_name
13554  5980 51 02 00      add sp, 2
13555  5983 FD AB         swp b
13556  5985 D8            push b
13557  5986 26 03 77      mov b, _s167 ; "Damage Control reports\n%s damaged by hit\n\n"
13558  5989 FD AB         swp b
13559  598B D8            push b
13560  598C 07 D6 05      call printf
13561  598F 51 04 00      add sp, 4
13562  5992 0A 95 59      jmp _if223_exit
13563  5995             _if223_exit:
13564  5995 0A 98 59      jmp _if222_exit
13565  5998             _if222_exit:
13566  5998 0A 9B 59      jmp _if220_exit
13567  599B             _if220_exit:
13568  599B             ;; k++; 
13569  599B FA F9 FF      lea d, [bp + -7] ; $k
13570  599E 2A            mov b, [d]
13571  599F D8            push b
13572  59A0 FD 77         inc b
13573  59A2 FD 77         inc b
13574  59A4 FA F9 FF      lea d, [bp + -7] ; $k
13575  59A7 FD 43         mov [d], b
13576  59A9 E5            pop b
13577  59AA             _for219_update:
13578  59AA FA FB FF      lea d, [bp + -5] ; $i
13579  59AD 32            mov bl, [d]
13580  59AE A7 00         mov bh, 0
13581  59B0 D8            push b
13582  59B1 FD 77         inc b
13583  59B3 FA FB FF      lea d, [bp + -5] ; $i
13584  59B6 FD 43         mov [d], b
13585  59B8 E5            pop b
13586  59B9 0A 30 57      jmp _for219_cond
13587  59BC             _for219_exit:
13588  59BC F9            leave
13589  59BD 09            ret
13590  59BE             
13591  59BE             repair_damage:
13592  59BE F8 00 00      enter 0 ; (push bp; mov bp, sp)
13593  59C1             ; $i 
13594  59C1             ; $d1 
13595  59C1             ; $repair_factor 
13596  59C1             ; $r 
13597  59C1 52 07 00      sub sp, 7
13598  59C4             ;; repair_factor = warp; 
13599  59C4 FA FB FF      lea d, [bp + -5] ; $repair_factor
13600  59C7 DA            push d
13601  59C8 FA 05 00      lea d, [bp + 5] ; $warp
13602  59CB 2A            mov b, [d]
13603  59CC E7            pop d
13604  59CD FD 43         mov [d], b
13605  59CF             ;; if (warp >= 100) 
13606  59CF             _if224_cond:
13607  59CF FA 05 00      lea d, [bp + 5] ; $warp
13608  59D2 2A            mov b, [d]
13609  59D3             ; START RELATIONAL
13610  59D3 D7            push a
13611  59D4 11            mov a, b
13612  59D5 26 64 00      mov b, $64
13613  59D8 B0            cmp a, b
13614  59D9 FD 82         sgeu ; >= (unsigned)
13615  59DB E4            pop a
13616  59DC             ; END RELATIONAL
13617  59DC C0 00 00      cmp b, 0
13618  59DF C6 F8 59      je _if224_exit
13619  59E2             _if224_true:
13620  59E2             ;; repair_factor = TO_FIXED00(1); 
13621  59E2 FA FB FF      lea d, [bp + -5] ; $repair_factor
13622  59E5 DA            push d
13623  59E6 26 01 00      mov b, $1
13624  59E9 FD AB         swp b
13625  59EB D8            push b
13626  59EC 07 FE 1C      call TO_FIXED00
13627  59EF 51 02 00      add sp, 2
13628  59F2 E7            pop d
13629  59F3 FD 43         mov [d], b
13630  59F5 0A F8 59      jmp _if224_exit
13631  59F8             _if224_exit:
13632  59F8             ;; for (i = 1; i <= 8; i++) { 
13633  59F8             _for225_init:
13634  59F8 FA FF FF      lea d, [bp + -1] ; $i
13635  59FB DA            push d
13636  59FC 26 01 00      mov b, $1
13637  59FF E7            pop d
13638  5A00 FD 43         mov [d], b
13639  5A02             _for225_cond:
13640  5A02 FA FF FF      lea d, [bp + -1] ; $i
13641  5A05 2A            mov b, [d]
13642  5A06             ; START RELATIONAL
13643  5A06 D7            push a
13644  5A07 11            mov a, b
13645  5A08 26 08 00      mov b, $8
13646  5A0B B0            cmp a, b
13647  5A0C FD 73         slt ; <= (signed)
13648  5A0E E4            pop a
13649  5A0F             ; END RELATIONAL
13650  5A0F C0 00 00      cmp b, 0
13651  5A12 C6 49 5B      je _for225_exit
13652  5A15             _for225_block:
13653  5A15             ;; if (damage[i] < 0) { 
13654  5A15             _if226_cond:
13655  5A15 3B 5D 61      mov d, _damage_data ; $damage
13656  5A18 D7            push a
13657  5A19 DA            push d
13658  5A1A FA FF FF      lea d, [bp + -1] ; $i
13659  5A1D 2A            mov b, [d]
13660  5A1E E7            pop d
13661  5A1F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13662  5A23 E4            pop a
13663  5A24 2A            mov b, [d]
13664  5A25             ; START RELATIONAL
13665  5A25 D7            push a
13666  5A26 11            mov a, b
13667  5A27 26 00 00      mov b, $0
13668  5A2A B0            cmp a, b
13669  5A2B FD 73         slt ; < (signed)
13670  5A2D E4            pop a
13671  5A2E             ; END RELATIONAL
13672  5A2E C0 00 00      cmp b, 0
13673  5A31 C6 39 5B      je _if226_exit
13674  5A34             _if226_true:
13675  5A34             ;; damage[i] = damage[i] + repair_factor; 
13676  5A34 3B 5D 61      mov d, _damage_data ; $damage
13677  5A37 D7            push a
13678  5A38 DA            push d
13679  5A39 FA FF FF      lea d, [bp + -1] ; $i
13680  5A3C 2A            mov b, [d]
13681  5A3D E7            pop d
13682  5A3E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13683  5A42 E4            pop a
13684  5A43 DA            push d
13685  5A44 3B 5D 61      mov d, _damage_data ; $damage
13686  5A47 D7            push a
13687  5A48 DA            push d
13688  5A49 FA FF FF      lea d, [bp + -1] ; $i
13689  5A4C 2A            mov b, [d]
13690  5A4D E7            pop d
13691  5A4E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13692  5A52 E4            pop a
13693  5A53 2A            mov b, [d]
13694  5A54             ; START TERMS
13695  5A54 D7            push a
13696  5A55 11            mov a, b
13697  5A56 FA FB FF      lea d, [bp + -5] ; $repair_factor
13698  5A59 2A            mov b, [d]
13699  5A5A 56            add b, a
13700  5A5B E4            pop a
13701  5A5C             ; END TERMS
13702  5A5C E7            pop d
13703  5A5D FD 43         mov [d], b
13704  5A5F             ;; if (damage[i] > -10 && damage[i] < 0)	/* -0.1 */ 
13705  5A5F             _if227_cond:
13706  5A5F 3B 5D 61      mov d, _damage_data ; $damage
13707  5A62 D7            push a
13708  5A63 DA            push d
13709  5A64 FA FF FF      lea d, [bp + -1] ; $i
13710  5A67 2A            mov b, [d]
13711  5A68 E7            pop d
13712  5A69 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13713  5A6D E4            pop a
13714  5A6E 2A            mov b, [d]
13715  5A6F             ; START RELATIONAL
13716  5A6F D7            push a
13717  5A70 11            mov a, b
13718  5A71 26 F6 FF      mov b, $fff6
13719  5A74 B0            cmp a, b
13720  5A75 FD 7F         sgt ; >
13721  5A77 E4            pop a
13722  5A78             ; END RELATIONAL
13723  5A78 D7            push a
13724  5A79 11            mov a, b
13725  5A7A 3B 5D 61      mov d, _damage_data ; $damage
13726  5A7D D7            push a
13727  5A7E DA            push d
13728  5A7F FA FF FF      lea d, [bp + -1] ; $i
13729  5A82 2A            mov b, [d]
13730  5A83 E7            pop d
13731  5A84 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13732  5A88 E4            pop a
13733  5A89 2A            mov b, [d]
13734  5A8A             ; START RELATIONAL
13735  5A8A D7            push a
13736  5A8B 11            mov a, b
13737  5A8C 26 00 00      mov b, $0
13738  5A8F B0            cmp a, b
13739  5A90 FD 73         slt ; < (signed)
13740  5A92 E4            pop a
13741  5A93             ; END RELATIONAL
13742  5A93 FD A7         sand a, b
13743  5A95 E4            pop a
13744  5A96 C0 00 00      cmp b, 0
13745  5A99 C6 B5 5A      je _if227_else
13746  5A9C             _if227_true:
13747  5A9C             ;; damage[i] = -10; 
13748  5A9C 3B 5D 61      mov d, _damage_data ; $damage
13749  5A9F D7            push a
13750  5AA0 DA            push d
13751  5AA1 FA FF FF      lea d, [bp + -1] ; $i
13752  5AA4 2A            mov b, [d]
13753  5AA5 E7            pop d
13754  5AA6 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13755  5AAA E4            pop a
13756  5AAB DA            push d
13757  5AAC 26 F6 FF      mov b, $fff6
13758  5AAF E7            pop d
13759  5AB0 FD 43         mov [d], b
13760  5AB2 0A 36 5B      jmp _if227_exit
13761  5AB5             _if227_else:
13762  5AB5             ;; if (damage[i] >= 0) { 
13763  5AB5             _if228_cond:
13764  5AB5 3B 5D 61      mov d, _damage_data ; $damage
13765  5AB8 D7            push a
13766  5AB9 DA            push d
13767  5ABA FA FF FF      lea d, [bp + -1] ; $i
13768  5ABD 2A            mov b, [d]
13769  5ABE E7            pop d
13770  5ABF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13771  5AC3 E4            pop a
13772  5AC4 2A            mov b, [d]
13773  5AC5             ; START RELATIONAL
13774  5AC5 D7            push a
13775  5AC6 11            mov a, b
13776  5AC7 26 00 00      mov b, $0
13777  5ACA B0            cmp a, b
13778  5ACB FD 80         sge ; >=
13779  5ACD E4            pop a
13780  5ACE             ; END RELATIONAL
13781  5ACE C0 00 00      cmp b, 0
13782  5AD1 C6 36 5B      je _if228_exit
13783  5AD4             _if228_true:
13784  5AD4             ;; if (d1 != 1) { 
13785  5AD4             _if229_cond:
13786  5AD4 FA FD FF      lea d, [bp + -3] ; $d1
13787  5AD7 2A            mov b, [d]
13788  5AD8             ; START RELATIONAL
13789  5AD8 D7            push a
13790  5AD9 11            mov a, b
13791  5ADA 26 01 00      mov b, $1
13792  5ADD B0            cmp a, b
13793  5ADE FD 72         sneq ; !=
13794  5AE0 E4            pop a
13795  5AE1             ; END RELATIONAL
13796  5AE1 C0 00 00      cmp b, 0
13797  5AE4 C6 01 5B      je _if229_exit
13798  5AE7             _if229_true:
13799  5AE7             ;; d1 = 1; 
13800  5AE7 FA FD FF      lea d, [bp + -3] ; $d1
13801  5AEA DA            push d
13802  5AEB 26 01 00      mov b, $1
13803  5AEE E7            pop d
13804  5AEF FD 43         mov [d], b
13805  5AF1             ;; puts(dcr_1); 
13806  5AF1 3B 6C 62      mov d, _dcr_1 ; $dcr_1
13807  5AF4 2A            mov b, [d]
13808  5AF5 FD AB         swp b
13809  5AF7 D8            push b
13810  5AF8 07 36 13      call puts
13811  5AFB 51 02 00      add sp, 2
13812  5AFE 0A 01 5B      jmp _if229_exit
13813  5B01             _if229_exit:
13814  5B01             ;; printf("    %s repair completed\n\n", 
13815  5B01 FA FF FF      lea d, [bp + -1] ; $i
13816  5B04 2A            mov b, [d]
13817  5B05 FD AB         swp b
13818  5B07 D8            push b
13819  5B08 07 20 5D      call get_device_name
13820  5B0B 51 02 00      add sp, 2
13821  5B0E FD AB         swp b
13822  5B10 D8            push b
13823  5B11 26 2E 77      mov b, _s168 ; "    %s repair completed\n\n"
13824  5B14 FD AB         swp b
13825  5B16 D8            push b
13826  5B17 07 D6 05      call printf
13827  5B1A 51 04 00      add sp, 4
13828  5B1D             ;; damage[i] = 0; 
13829  5B1D 3B 5D 61      mov d, _damage_data ; $damage
13830  5B20 D7            push a
13831  5B21 DA            push d
13832  5B22 FA FF FF      lea d, [bp + -1] ; $i
13833  5B25 2A            mov b, [d]
13834  5B26 E7            pop d
13835  5B27 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13836  5B2B E4            pop a
13837  5B2C DA            push d
13838  5B2D 26 00 00      mov b, $0
13839  5B30 E7            pop d
13840  5B31 FD 43         mov [d], b
13841  5B33 0A 36 5B      jmp _if228_exit
13842  5B36             _if228_exit:
13843  5B36             _if227_exit:
13844  5B36 0A 39 5B      jmp _if226_exit
13845  5B39             _if226_exit:
13846  5B39             _for225_update:
13847  5B39 FA FF FF      lea d, [bp + -1] ; $i
13848  5B3C 2A            mov b, [d]
13849  5B3D D8            push b
13850  5B3E FD 77         inc b
13851  5B40 FA FF FF      lea d, [bp + -1] ; $i
13852  5B43 FD 43         mov [d], b
13853  5B45 E5            pop b
13854  5B46 0A 02 5A      jmp _for225_cond
13855  5B49             _for225_exit:
13856  5B49             ;; if (get_rand(10) <= 2) { 
13857  5B49             _if230_cond:
13858  5B49 26 0A 00      mov b, $a
13859  5B4C FD AB         swp b
13860  5B4E D8            push b
13861  5B4F 07 21 1D      call get_rand
13862  5B52 51 02 00      add sp, 2
13863  5B55             ; START RELATIONAL
13864  5B55 D7            push a
13865  5B56 11            mov a, b
13866  5B57 26 02 00      mov b, $2
13867  5B5A B0            cmp a, b
13868  5B5B FD 73         slt ; <= (signed)
13869  5B5D E4            pop a
13870  5B5E             ; END RELATIONAL
13871  5B5E C0 00 00      cmp b, 0
13872  5B61 C6 60 5C      je _if230_exit
13873  5B64             _if230_true:
13874  5B64             ;; r = rand8(); 
13875  5B64 FA FA FF      lea d, [bp + -6] ; $r
13876  5B67 DA            push d
13877  5B68 07 70 1D      call rand8
13878  5B6B E7            pop d
13879  5B6C FD 3E         mov [d], bl
13880  5B6E             ;; if (get_rand(10) < 6) { 
13881  5B6E             _if231_cond:
13882  5B6E 26 0A 00      mov b, $a
13883  5B71 FD AB         swp b
13884  5B73 D8            push b
13885  5B74 07 21 1D      call get_rand
13886  5B77 51 02 00      add sp, 2
13887  5B7A             ; START RELATIONAL
13888  5B7A D7            push a
13889  5B7B 11            mov a, b
13890  5B7C 26 06 00      mov b, $6
13891  5B7F B0            cmp a, b
13892  5B80 FD 73         slt ; < (signed)
13893  5B82 E4            pop a
13894  5B83             ; END RELATIONAL
13895  5B83 C0 00 00      cmp b, 0
13896  5B86 C6 F6 5B      je _if231_else
13897  5B89             _if231_true:
13898  5B89             ;; damage[r] =damage[r]- (get_rand(500) + 100); 
13899  5B89 3B 5D 61      mov d, _damage_data ; $damage
13900  5B8C D7            push a
13901  5B8D DA            push d
13902  5B8E FA FA FF      lea d, [bp + -6] ; $r
13903  5B91 32            mov bl, [d]
13904  5B92 A7 00         mov bh, 0
13905  5B94 E7            pop d
13906  5B95 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13907  5B99 E4            pop a
13908  5B9A DA            push d
13909  5B9B 3B 5D 61      mov d, _damage_data ; $damage
13910  5B9E D7            push a
13911  5B9F DA            push d
13912  5BA0 FA FA FF      lea d, [bp + -6] ; $r
13913  5BA3 32            mov bl, [d]
13914  5BA4 A7 00         mov bh, 0
13915  5BA6 E7            pop d
13916  5BA7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13917  5BAB E4            pop a
13918  5BAC 2A            mov b, [d]
13919  5BAD             ; START TERMS
13920  5BAD D7            push a
13921  5BAE 11            mov a, b
13922  5BAF 26 F4 01      mov b, $1f4
13923  5BB2 FD AB         swp b
13924  5BB4 D8            push b
13925  5BB5 07 21 1D      call get_rand
13926  5BB8 51 02 00      add sp, 2
13927  5BBB             ; START TERMS
13928  5BBB D7            push a
13929  5BBC 11            mov a, b
13930  5BBD 26 64 00      mov b, $64
13931  5BC0 56            add b, a
13932  5BC1 E4            pop a
13933  5BC2             ; END TERMS
13934  5BC2 60            sub a, b
13935  5BC3 27            mov b, a
13936  5BC4 E4            pop a
13937  5BC5             ; END TERMS
13938  5BC5 E7            pop d
13939  5BC6 FD 43         mov [d], b
13940  5BC8             ;; puts(dcr_1); 
13941  5BC8 3B 6C 62      mov d, _dcr_1 ; $dcr_1
13942  5BCB 2A            mov b, [d]
13943  5BCC FD AB         swp b
13944  5BCE D8            push b
13945  5BCF 07 36 13      call puts
13946  5BD2 51 02 00      add sp, 2
13947  5BD5             ;; printf("    %s damaged\n\n", get_device_name(r)); 
13948  5BD5 FA FA FF      lea d, [bp + -6] ; $r
13949  5BD8 32            mov bl, [d]
13950  5BD9 A7 00         mov bh, 0
13951  5BDB FD AB         swp b
13952  5BDD D8            push b
13953  5BDE 07 20 5D      call get_device_name
13954  5BE1 51 02 00      add sp, 2
13955  5BE4 FD AB         swp b
13956  5BE6 D8            push b
13957  5BE7 26 48 77      mov b, _s169 ; "    %s damaged\n\n"
13958  5BEA FD AB         swp b
13959  5BEC D8            push b
13960  5BED 07 D6 05      call printf
13961  5BF0 51 04 00      add sp, 4
13962  5BF3 0A 5D 5C      jmp _if231_exit
13963  5BF6             _if231_else:
13964  5BF6             ;; damage[r] = damage[r] + get_rand(300) + 100; 
13965  5BF6 3B 5D 61      mov d, _damage_data ; $damage
13966  5BF9 D7            push a
13967  5BFA DA            push d
13968  5BFB FA FA FF      lea d, [bp + -6] ; $r
13969  5BFE 32            mov bl, [d]
13970  5BFF A7 00         mov bh, 0
13971  5C01 E7            pop d
13972  5C02 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13973  5C06 E4            pop a
13974  5C07 DA            push d
13975  5C08 3B 5D 61      mov d, _damage_data ; $damage
13976  5C0B D7            push a
13977  5C0C DA            push d
13978  5C0D FA FA FF      lea d, [bp + -6] ; $r
13979  5C10 32            mov bl, [d]
13980  5C11 A7 00         mov bh, 0
13981  5C13 E7            pop d
13982  5C14 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13983  5C18 E4            pop a
13984  5C19 2A            mov b, [d]
13985  5C1A             ; START TERMS
13986  5C1A D7            push a
13987  5C1B 11            mov a, b
13988  5C1C 26 2C 01      mov b, $12c
13989  5C1F FD AB         swp b
13990  5C21 D8            push b
13991  5C22 07 21 1D      call get_rand
13992  5C25 51 02 00      add sp, 2
13993  5C28 56            add b, a
13994  5C29 11            mov a, b
13995  5C2A 26 64 00      mov b, $64
13996  5C2D 56            add b, a
13997  5C2E E4            pop a
13998  5C2F             ; END TERMS
13999  5C2F E7            pop d
14000  5C30 FD 43         mov [d], b
14001  5C32             ;; puts(dcr_1); 
14002  5C32 3B 6C 62      mov d, _dcr_1 ; $dcr_1
14003  5C35 2A            mov b, [d]
14004  5C36 FD AB         swp b
14005  5C38 D8            push b
14006  5C39 07 36 13      call puts
14007  5C3C 51 02 00      add sp, 2
14008  5C3F             ;; printf("    %s state of repair improved\n\n", 
14009  5C3F FA FA FF      lea d, [bp + -6] ; $r
14010  5C42 32            mov bl, [d]
14011  5C43 A7 00         mov bh, 0
14012  5C45 FD AB         swp b
14013  5C47 D8            push b
14014  5C48 07 20 5D      call get_device_name
14015  5C4B 51 02 00      add sp, 2
14016  5C4E FD AB         swp b
14017  5C50 D8            push b
14018  5C51 26 59 77      mov b, _s170 ; "    %s state of repair improved\n\n"
14019  5C54 FD AB         swp b
14020  5C56 D8            push b
14021  5C57 07 D6 05      call printf
14022  5C5A 51 04 00      add sp, 4
14023  5C5D             _if231_exit:
14024  5C5D 0A 60 5C      jmp _if230_exit
14025  5C60             _if230_exit:
14026  5C60 F9            leave
14027  5C61 09            ret
14028  5C62             
14029  5C62             find_set_empty_place:
14030  5C62 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14031  5C65             ; $r1 
14032  5C65             ; $r2 
14033  5C65 52 02 00      sub sp, 2
14034  5C68             ;; do { 
14035  5C68             _do232_block:
14036  5C68             ;; r1 = rand8(); 
14037  5C68 FA 00 00      lea d, [bp + 0] ; $r1
14038  5C6B DA            push d
14039  5C6C 07 70 1D      call rand8
14040  5C6F E7            pop d
14041  5C70 FD 3E         mov [d], bl
14042  5C72             ;; r2 = rand8(); 
14043  5C72 FA FF FF      lea d, [bp + -1] ; $r2
14044  5C75 DA            push d
14045  5C76 07 70 1D      call rand8
14046  5C79 E7            pop d
14047  5C7A FD 3E         mov [d], bl
14048  5C7C             ;; } while (quad[r1+-1][r2+-1] !=  		0       ); 
14049  5C7C             _do232_cond:
14050  5C7C 3B 77 61      mov d, _quad_data ; $quad
14051  5C7F D7            push a
14052  5C80 DA            push d
14053  5C81 FA 00 00      lea d, [bp + 0] ; $r1
14054  5C84 32            mov bl, [d]
14055  5C85 A7 00         mov bh, 0
14056  5C87             ; START TERMS
14057  5C87 D7            push a
14058  5C88 11            mov a, b
14059  5C89 26 FF FF      mov b, $ffff
14060  5C8C 56            add b, a
14061  5C8D E4            pop a
14062  5C8E             ; END TERMS
14063  5C8E E7            pop d
14064  5C8F FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
14065  5C93 DA            push d
14066  5C94 FA FF FF      lea d, [bp + -1] ; $r2
14067  5C97 32            mov bl, [d]
14068  5C98 A7 00         mov bh, 0
14069  5C9A             ; START TERMS
14070  5C9A D7            push a
14071  5C9B 11            mov a, b
14072  5C9C 26 FF FF      mov b, $ffff
14073  5C9F 56            add b, a
14074  5CA0 E4            pop a
14075  5CA1             ; END TERMS
14076  5CA1 E7            pop d
14077  5CA2 5A            add d, b
14078  5CA3 E4            pop a
14079  5CA4 32            mov bl, [d]
14080  5CA5 A7 00         mov bh, 0
14081  5CA7             ; START RELATIONAL
14082  5CA7 D7            push a
14083  5CA8 11            mov a, b
14084  5CA9 26 00 00      mov b, $0
14085  5CAC B0            cmp a, b
14086  5CAD FD 72         sneq ; !=
14087  5CAF E4            pop a
14088  5CB0             ; END RELATIONAL
14089  5CB0 C0 01 00      cmp b, 1
14090  5CB3 C6 68 5C      je _do232_block
14091  5CB6             _do232_exit:
14092  5CB6             ;; quad[r1+-1][r2+-1] = t; 
14093  5CB6 3B 77 61      mov d, _quad_data ; $quad
14094  5CB9 D7            push a
14095  5CBA DA            push d
14096  5CBB FA 00 00      lea d, [bp + 0] ; $r1
14097  5CBE 32            mov bl, [d]
14098  5CBF A7 00         mov bh, 0
14099  5CC1             ; START TERMS
14100  5CC1 D7            push a
14101  5CC2 11            mov a, b
14102  5CC3 26 FF FF      mov b, $ffff
14103  5CC6 56            add b, a
14104  5CC7 E4            pop a
14105  5CC8             ; END TERMS
14106  5CC8 E7            pop d
14107  5CC9 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
14108  5CCD DA            push d
14109  5CCE FA FF FF      lea d, [bp + -1] ; $r2
14110  5CD1 32            mov bl, [d]
14111  5CD2 A7 00         mov bh, 0
14112  5CD4             ; START TERMS
14113  5CD4 D7            push a
14114  5CD5 11            mov a, b
14115  5CD6 26 FF FF      mov b, $ffff
14116  5CD9 56            add b, a
14117  5CDA E4            pop a
14118  5CDB             ; END TERMS
14119  5CDB E7            pop d
14120  5CDC 5A            add d, b
14121  5CDD E4            pop a
14122  5CDE DA            push d
14123  5CDF FA 05 00      lea d, [bp + 5] ; $t
14124  5CE2 32            mov bl, [d]
14125  5CE3 A7 00         mov bh, 0
14126  5CE5 E7            pop d
14127  5CE6 FD 3E         mov [d], bl
14128  5CE8             ;; if (z1) 
14129  5CE8             _if233_cond:
14130  5CE8 FA 06 00      lea d, [bp + 6] ; $z1
14131  5CEB 2A            mov b, [d]
14132  5CEC C0 00 00      cmp b, 0
14133  5CEF C6 03 5D      je _if233_exit
14134  5CF2             _if233_true:
14135  5CF2             ;; *z1 = r1; 
14136  5CF2 FA 06 00      lea d, [bp + 6] ; $z1
14137  5CF5 2A            mov b, [d]
14138  5CF6 D8            push b
14139  5CF7 FA 00 00      lea d, [bp + 0] ; $r1
14140  5CFA 32            mov bl, [d]
14141  5CFB A7 00         mov bh, 0
14142  5CFD E7            pop d
14143  5CFE FD 3E         mov [d], bl
14144  5D00 0A 03 5D      jmp _if233_exit
14145  5D03             _if233_exit:
14146  5D03             ;; if (z2) 
14147  5D03             _if234_cond:
14148  5D03 FA 08 00      lea d, [bp + 8] ; $z2
14149  5D06 2A            mov b, [d]
14150  5D07 C0 00 00      cmp b, 0
14151  5D0A C6 1E 5D      je _if234_exit
14152  5D0D             _if234_true:
14153  5D0D             ;; *z2 = r2; 
14154  5D0D FA 08 00      lea d, [bp + 8] ; $z2
14155  5D10 2A            mov b, [d]
14156  5D11 D8            push b
14157  5D12 FA FF FF      lea d, [bp + -1] ; $r2
14158  5D15 32            mov bl, [d]
14159  5D16 A7 00         mov bh, 0
14160  5D18 E7            pop d
14161  5D19 FD 3E         mov [d], bl
14162  5D1B 0A 1E 5D      jmp _if234_exit
14163  5D1E             _if234_exit:
14164  5D1E F9            leave
14165  5D1F 09            ret
14166  5D20             
14167  5D20             get_device_name:
14168  5D20 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14169  5D23             ;; if (n < 0 || n > 8) 
14170  5D23             _if235_cond:
14171  5D23 FA 05 00      lea d, [bp + 5] ; $n
14172  5D26 2A            mov b, [d]
14173  5D27             ; START RELATIONAL
14174  5D27 D7            push a
14175  5D28 11            mov a, b
14176  5D29 26 00 00      mov b, $0
14177  5D2C B0            cmp a, b
14178  5D2D FD 73         slt ; < (signed)
14179  5D2F E4            pop a
14180  5D30             ; END RELATIONAL
14181  5D30 D7            push a
14182  5D31 11            mov a, b
14183  5D32 FA 05 00      lea d, [bp + 5] ; $n
14184  5D35 2A            mov b, [d]
14185  5D36             ; START RELATIONAL
14186  5D36 D7            push a
14187  5D37 11            mov a, b
14188  5D38 26 08 00      mov b, $8
14189  5D3B B0            cmp a, b
14190  5D3C FD 7F         sgt ; >
14191  5D3E E4            pop a
14192  5D3F             ; END RELATIONAL
14193  5D3F FD A8         sor a, b ; ||
14194  5D41 E4            pop a
14195  5D42 C0 00 00      cmp b, 0
14196  5D45 C6 55 5D      je _if235_exit
14197  5D48             _if235_true:
14198  5D48             ;; n = 0; 
14199  5D48 FA 05 00      lea d, [bp + 5] ; $n
14200  5D4B DA            push d
14201  5D4C 26 00 00      mov b, $0
14202  5D4F E7            pop d
14203  5D50 FD 43         mov [d], b
14204  5D52 0A 55 5D      jmp _if235_exit
14205  5D55             _if235_exit:
14206  5D55             ;; return device_name[n]; 
14207  5D55 3B 31 62      mov d, _device_name_data ; $device_name
14208  5D58 D7            push a
14209  5D59 DA            push d
14210  5D5A FA 05 00      lea d, [bp + 5] ; $n
14211  5D5D 2A            mov b, [d]
14212  5D5E E7            pop d
14213  5D5F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14214  5D63 E4            pop a
14215  5D64 2A            mov b, [d]
14216  5D65 F9            leave
14217  5D66 09            ret
14218  5D67             
14219  5D67             quadrant_name:
14220  5D67 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14221  5D6A             ;; if (y < 1 || y > 8 || x < 1 || x > 8) 
14222  5D6A             _if236_cond:
14223  5D6A FA 06 00      lea d, [bp + 6] ; $y
14224  5D6D 32            mov bl, [d]
14225  5D6E A7 00         mov bh, 0
14226  5D70             ; START RELATIONAL
14227  5D70 D7            push a
14228  5D71 11            mov a, b
14229  5D72 26 01 00      mov b, $1
14230  5D75 B0            cmp a, b
14231  5D76 FD 75         slu ; < (unsigned)
14232  5D78 E4            pop a
14233  5D79             ; END RELATIONAL
14234  5D79 D7            push a
14235  5D7A 11            mov a, b
14236  5D7B FA 06 00      lea d, [bp + 6] ; $y
14237  5D7E 32            mov bl, [d]
14238  5D7F A7 00         mov bh, 0
14239  5D81             ; START RELATIONAL
14240  5D81 D7            push a
14241  5D82 11            mov a, b
14242  5D83 26 08 00      mov b, $8
14243  5D86 B0            cmp a, b
14244  5D87 FD 81         sgu ; > (unsigned)
14245  5D89 E4            pop a
14246  5D8A             ; END RELATIONAL
14247  5D8A FD A8         sor a, b ; ||
14248  5D8C 11            mov a, b
14249  5D8D FA 07 00      lea d, [bp + 7] ; $x
14250  5D90 32            mov bl, [d]
14251  5D91 A7 00         mov bh, 0
14252  5D93             ; START RELATIONAL
14253  5D93 D7            push a
14254  5D94 11            mov a, b
14255  5D95 26 01 00      mov b, $1
14256  5D98 B0            cmp a, b
14257  5D99 FD 75         slu ; < (unsigned)
14258  5D9B E4            pop a
14259  5D9C             ; END RELATIONAL
14260  5D9C FD A8         sor a, b ; ||
14261  5D9E 11            mov a, b
14262  5D9F FA 07 00      lea d, [bp + 7] ; $x
14263  5DA2 32            mov bl, [d]
14264  5DA3 A7 00         mov bh, 0
14265  5DA5             ; START RELATIONAL
14266  5DA5 D7            push a
14267  5DA6 11            mov a, b
14268  5DA7 26 08 00      mov b, $8
14269  5DAA B0            cmp a, b
14270  5DAB FD 81         sgu ; > (unsigned)
14271  5DAD E4            pop a
14272  5DAE             ; END RELATIONAL
14273  5DAE FD A8         sor a, b ; ||
14274  5DB0 E4            pop a
14275  5DB1 C0 00 00      cmp b, 0
14276  5DB4 C6 CD 5D      je _if236_exit
14277  5DB7             _if236_true:
14278  5DB7             ;; strcpy(quadname, "Unknown"); 
14279  5DB7 26 8B 77      mov b, _s175 ; "Unknown"
14280  5DBA FD AB         swp b
14281  5DBC D8            push b
14282  5DBD 3B B7 61      mov d, _quadname_data ; $quadname
14283  5DC0 2D            mov b, d
14284  5DC1 FD AB         swp b
14285  5DC3 D8            push b
14286  5DC4 07 14 04      call strcpy
14287  5DC7 51 04 00      add sp, 4
14288  5DCA 0A CD 5D      jmp _if236_exit
14289  5DCD             _if236_exit:
14290  5DCD             ;; if (x <= 4) 
14291  5DCD             _if237_cond:
14292  5DCD FA 07 00      lea d, [bp + 7] ; $x
14293  5DD0 32            mov bl, [d]
14294  5DD1 A7 00         mov bh, 0
14295  5DD3             ; START RELATIONAL
14296  5DD3 D7            push a
14297  5DD4 11            mov a, b
14298  5DD5 26 04 00      mov b, $4
14299  5DD8 B0            cmp a, b
14300  5DD9 FD 75         slu ; <= (unsigned)
14301  5DDB E4            pop a
14302  5DDC             ; END RELATIONAL
14303  5DDC C0 00 00      cmp b, 0
14304  5DDF C6 07 5E      je _if237_else
14305  5DE2             _if237_true:
14306  5DE2             ;; strcpy(quadname, quad_name[y]); 
14307  5DE2 3B ED 61      mov d, _quad_name_data ; $quad_name
14308  5DE5 D7            push a
14309  5DE6 DA            push d
14310  5DE7 FA 06 00      lea d, [bp + 6] ; $y
14311  5DEA 32            mov bl, [d]
14312  5DEB A7 00         mov bh, 0
14313  5DED E7            pop d
14314  5DEE FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14315  5DF2 E4            pop a
14316  5DF3 2A            mov b, [d]
14317  5DF4 FD AB         swp b
14318  5DF6 D8            push b
14319  5DF7 3B B7 61      mov d, _quadname_data ; $quadname
14320  5DFA 2D            mov b, d
14321  5DFB FD AB         swp b
14322  5DFD D8            push b
14323  5DFE 07 14 04      call strcpy
14324  5E01 51 04 00      add sp, 4
14325  5E04 0A 30 5E      jmp _if237_exit
14326  5E07             _if237_else:
14327  5E07             ;; strcpy(quadname, quad_name[y + 8]); 
14328  5E07 3B ED 61      mov d, _quad_name_data ; $quad_name
14329  5E0A D7            push a
14330  5E0B DA            push d
14331  5E0C FA 06 00      lea d, [bp + 6] ; $y
14332  5E0F 32            mov bl, [d]
14333  5E10 A7 00         mov bh, 0
14334  5E12             ; START TERMS
14335  5E12 D7            push a
14336  5E13 11            mov a, b
14337  5E14 26 08 00      mov b, $8
14338  5E17 56            add b, a
14339  5E18 E4            pop a
14340  5E19             ; END TERMS
14341  5E19 E7            pop d
14342  5E1A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14343  5E1E E4            pop a
14344  5E1F 2A            mov b, [d]
14345  5E20 FD AB         swp b
14346  5E22 D8            push b
14347  5E23 3B B7 61      mov d, _quadname_data ; $quadname
14348  5E26 2D            mov b, d
14349  5E27 FD AB         swp b
14350  5E29 D8            push b
14351  5E2A 07 14 04      call strcpy
14352  5E2D 51 04 00      add sp, 4
14353  5E30             _if237_exit:
14354  5E30             ;; if (small != 1) { 
14355  5E30             _if238_cond:
14356  5E30 FA 05 00      lea d, [bp + 5] ; $small
14357  5E33 32            mov bl, [d]
14358  5E34 A7 00         mov bh, 0
14359  5E36             ; START RELATIONAL
14360  5E36 D7            push a
14361  5E37 11            mov a, b
14362  5E38 26 01 00      mov b, $1
14363  5E3B B0            cmp a, b
14364  5E3C FD 72         sneq ; !=
14365  5E3E E4            pop a
14366  5E3F             ; END RELATIONAL
14367  5E3F C0 00 00      cmp b, 0
14368  5E42 C6 97 5E      je _if238_exit
14369  5E45             _if238_true:
14370  5E45             ;; if (x > 4) 
14371  5E45             _if239_cond:
14372  5E45 FA 07 00      lea d, [bp + 7] ; $x
14373  5E48 32            mov bl, [d]
14374  5E49 A7 00         mov bh, 0
14375  5E4B             ; START RELATIONAL
14376  5E4B D7            push a
14377  5E4C 11            mov a, b
14378  5E4D 26 04 00      mov b, $4
14379  5E50 B0            cmp a, b
14380  5E51 FD 81         sgu ; > (unsigned)
14381  5E53 E4            pop a
14382  5E54             ; END RELATIONAL
14383  5E54 C0 00 00      cmp b, 0
14384  5E57 C6 72 5E      je _if239_exit
14385  5E5A             _if239_true:
14386  5E5A             ;; x = x - 4; 
14387  5E5A FA 07 00      lea d, [bp + 7] ; $x
14388  5E5D DA            push d
14389  5E5E FA 07 00      lea d, [bp + 7] ; $x
14390  5E61 32            mov bl, [d]
14391  5E62 A7 00         mov bh, 0
14392  5E64             ; START TERMS
14393  5E64 D7            push a
14394  5E65 11            mov a, b
14395  5E66 26 04 00      mov b, $4
14396  5E69 60            sub a, b
14397  5E6A 27            mov b, a
14398  5E6B E4            pop a
14399  5E6C             ; END TERMS
14400  5E6C E7            pop d
14401  5E6D FD 3E         mov [d], bl
14402  5E6F 0A 72 5E      jmp _if239_exit
14403  5E72             _if239_exit:
14404  5E72             ;; strcat(quadname, sect_name[x]); 
14405  5E72 3B 57 63      mov d, st_quadrant_name_sect_name_dt ; static sect_name
14406  5E75 D7            push a
14407  5E76 DA            push d
14408  5E77 FA 07 00      lea d, [bp + 7] ; $x
14409  5E7A 32            mov bl, [d]
14410  5E7B A7 00         mov bh, 0
14411  5E7D E7            pop d
14412  5E7E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14413  5E82 E4            pop a
14414  5E83 2A            mov b, [d]
14415  5E84 FD AB         swp b
14416  5E86 D8            push b
14417  5E87 3B B7 61      mov d, _quadname_data ; $quadname
14418  5E8A 2D            mov b, d
14419  5E8B FD AB         swp b
14420  5E8D D8            push b
14421  5E8E 07 D5 04      call strcat
14422  5E91 51 04 00      add sp, 4
14423  5E94 0A 97 5E      jmp _if238_exit
14424  5E97             _if238_exit:
14425  5E97             ;; return; 
14426  5E97 F9            leave
14427  5E98 09            ret
14428  5E99             
14429  5E99             isqrt:
14430  5E99 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14431  5E9C             ; $b 
14432  5E9C             ; $q 
14433  5E9C             ; $r 
14434  5E9C             ; $t 
14435  5E9C 52 08 00      sub sp, 8
14436  5E9F             ;; b = 0x4000; 
14437  5E9F FA FF FF      lea d, [bp + -1] ; $b
14438  5EA2 DA            push d
14439  5EA3 26 00 40      mov b, $4000
14440  5EA6 E7            pop d
14441  5EA7 FD 43         mov [d], b
14442  5EA9             ;; q = 0; 
14443  5EA9 FA FD FF      lea d, [bp + -3] ; $q
14444  5EAC DA            push d
14445  5EAD 26 00 00      mov b, $0
14446  5EB0 E7            pop d
14447  5EB1 FD 43         mov [d], b
14448  5EB3             ;; r = i; 
14449  5EB3 FA FB FF      lea d, [bp + -5] ; $r
14450  5EB6 DA            push d
14451  5EB7 FA 05 00      lea d, [bp + 5] ; $i
14452  5EBA 2A            mov b, [d]
14453  5EBB E7            pop d
14454  5EBC FD 43         mov [d], b
14455  5EBE             ;; while (b) { 
14456  5EBE             _while240_cond:
14457  5EBE FA FF FF      lea d, [bp + -1] ; $b
14458  5EC1 2A            mov b, [d]
14459  5EC2 C0 00 00      cmp b, 0
14460  5EC5 C6 46 5F      je _while240_exit
14461  5EC8             _while240_block:
14462  5EC8             ;; t = q + b; 
14463  5EC8 FA F9 FF      lea d, [bp + -7] ; $t
14464  5ECB DA            push d
14465  5ECC FA FD FF      lea d, [bp + -3] ; $q
14466  5ECF 2A            mov b, [d]
14467  5ED0             ; START TERMS
14468  5ED0 D7            push a
14469  5ED1 11            mov a, b
14470  5ED2 FA FF FF      lea d, [bp + -1] ; $b
14471  5ED5 2A            mov b, [d]
14472  5ED6 56            add b, a
14473  5ED7 E4            pop a
14474  5ED8             ; END TERMS
14475  5ED8 E7            pop d
14476  5ED9 FD 43         mov [d], b
14477  5EDB             ;; q =q>> 1; 
14478  5EDB FA FD FF      lea d, [bp + -3] ; $q
14479  5EDE DA            push d
14480  5EDF FA FD FF      lea d, [bp + -3] ; $q
14481  5EE2 2A            mov b, [d]
14482  5EE3             ; START SHIFT
14483  5EE3 D7            push a
14484  5EE4 11            mov a, b
14485  5EE5 26 01 00      mov b, $1
14486  5EE8 FD 39         mov c, b
14487  5EEA A1            shr a, cl
14488  5EEB 27            mov b, a
14489  5EEC E4            pop a
14490  5EED             ; END SHIFT
14491  5EED E7            pop d
14492  5EEE FD 43         mov [d], b
14493  5EF0             ;; if (r >= t) { 
14494  5EF0             _if241_cond:
14495  5EF0 FA FB FF      lea d, [bp + -5] ; $r
14496  5EF3 2A            mov b, [d]
14497  5EF4             ; START RELATIONAL
14498  5EF4 D7            push a
14499  5EF5 11            mov a, b
14500  5EF6 FA F9 FF      lea d, [bp + -7] ; $t
14501  5EF9 2A            mov b, [d]
14502  5EFA B0            cmp a, b
14503  5EFB FD 82         sgeu ; >= (unsigned)
14504  5EFD E4            pop a
14505  5EFE             ; END RELATIONAL
14506  5EFE C0 00 00      cmp b, 0
14507  5F01 C6 2E 5F      je _if241_exit
14508  5F04             _if241_true:
14509  5F04             ;; r =r- t; 
14510  5F04 FA FB FF      lea d, [bp + -5] ; $r
14511  5F07 DA            push d
14512  5F08 FA FB FF      lea d, [bp + -5] ; $r
14513  5F0B 2A            mov b, [d]
14514  5F0C             ; START TERMS
14515  5F0C D7            push a
14516  5F0D 11            mov a, b
14517  5F0E FA F9 FF      lea d, [bp + -7] ; $t
14518  5F11 2A            mov b, [d]
14519  5F12 60            sub a, b
14520  5F13 27            mov b, a
14521  5F14 E4            pop a
14522  5F15             ; END TERMS
14523  5F15 E7            pop d
14524  5F16 FD 43         mov [d], b
14525  5F18             ;; q = q + b; 
14526  5F18 FA FD FF      lea d, [bp + -3] ; $q
14527  5F1B DA            push d
14528  5F1C FA FD FF      lea d, [bp + -3] ; $q
14529  5F1F 2A            mov b, [d]
14530  5F20             ; START TERMS
14531  5F20 D7            push a
14532  5F21 11            mov a, b
14533  5F22 FA FF FF      lea d, [bp + -1] ; $b
14534  5F25 2A            mov b, [d]
14535  5F26 56            add b, a
14536  5F27 E4            pop a
14537  5F28             ; END TERMS
14538  5F28 E7            pop d
14539  5F29 FD 43         mov [d], b
14540  5F2B 0A 2E 5F      jmp _if241_exit
14541  5F2E             _if241_exit:
14542  5F2E             ;; b =b>> 2; 
14543  5F2E FA FF FF      lea d, [bp + -1] ; $b
14544  5F31 DA            push d
14545  5F32 FA FF FF      lea d, [bp + -1] ; $b
14546  5F35 2A            mov b, [d]
14547  5F36             ; START SHIFT
14548  5F36 D7            push a
14549  5F37 11            mov a, b
14550  5F38 26 02 00      mov b, $2
14551  5F3B FD 39         mov c, b
14552  5F3D A1            shr a, cl
14553  5F3E 27            mov b, a
14554  5F3F E4            pop a
14555  5F40             ; END SHIFT
14556  5F40 E7            pop d
14557  5F41 FD 43         mov [d], b
14558  5F43 0A BE 5E      jmp _while240_cond
14559  5F46             _while240_exit:
14560  5F46             ;; return q; 
14561  5F46 FA FD FF      lea d, [bp + -3] ; $q
14562  5F49 2A            mov b, [d]
14563  5F4A F9            leave
14564  5F4B 09            ret
14565  5F4C             
14566  5F4C             square00:
14567  5F4C F8 00 00      enter 0 ; (push bp; mov bp, sp)
14568  5F4F             ;; if (abs(t) > 181) { 
14569  5F4F             _if242_cond:
14570  5F4F FA 05 00      lea d, [bp + 5] ; $t
14571  5F52 2A            mov b, [d]
14572  5F53 FD AB         swp b
14573  5F55 D8            push b
14574  5F56 07 82 13      call abs
14575  5F59 51 02 00      add sp, 2
14576  5F5C             ; START RELATIONAL
14577  5F5C D7            push a
14578  5F5D 11            mov a, b
14579  5F5E 26 B5 00      mov b, $b5
14580  5F61 B0            cmp a, b
14581  5F62 FD 7F         sgt ; >
14582  5F64 E4            pop a
14583  5F65             ; END RELATIONAL
14584  5F65 C0 00 00      cmp b, 0
14585  5F68 C6 96 5F      je _if242_else
14586  5F6B             _if242_true:
14587  5F6B             ;; t =t/ 10; 
14588  5F6B FA 05 00      lea d, [bp + 5] ; $t
14589  5F6E DA            push d
14590  5F6F FA 05 00      lea d, [bp + 5] ; $t
14591  5F72 2A            mov b, [d]
14592  5F73             ; START FACTORS
14593  5F73 D7            push a
14594  5F74 11            mov a, b
14595  5F75 26 0A 00      mov b, $a
14596  5F78 AE            div a, b
14597  5F79 27            mov b, a
14598  5F7A E4            pop a
14599  5F7B             ; END FACTORS
14600  5F7B E7            pop d
14601  5F7C FD 43         mov [d], b
14602  5F7E             ;; t =t* t; 
14603  5F7E FA 05 00      lea d, [bp + 5] ; $t
14604  5F81 DA            push d
14605  5F82 FA 05 00      lea d, [bp + 5] ; $t
14606  5F85 2A            mov b, [d]
14607  5F86             ; START FACTORS
14608  5F86 D7            push a
14609  5F87 11            mov a, b
14610  5F88 FA 05 00      lea d, [bp + 5] ; $t
14611  5F8B 2A            mov b, [d]
14612  5F8C AC            mul a, b ; *
14613  5F8D 11            mov a, b
14614  5F8E 27            mov b, a
14615  5F8F E4            pop a
14616  5F90             ; END FACTORS
14617  5F90 E7            pop d
14618  5F91 FD 43         mov [d], b
14619  5F93 0A BE 5F      jmp _if242_exit
14620  5F96             _if242_else:
14621  5F96             ;; t =t* t; 
14622  5F96 FA 05 00      lea d, [bp + 5] ; $t
14623  5F99 DA            push d
14624  5F9A FA 05 00      lea d, [bp + 5] ; $t
14625  5F9D 2A            mov b, [d]
14626  5F9E             ; START FACTORS
14627  5F9E D7            push a
14628  5F9F 11            mov a, b
14629  5FA0 FA 05 00      lea d, [bp + 5] ; $t
14630  5FA3 2A            mov b, [d]
14631  5FA4 AC            mul a, b ; *
14632  5FA5 11            mov a, b
14633  5FA6 27            mov b, a
14634  5FA7 E4            pop a
14635  5FA8             ; END FACTORS
14636  5FA8 E7            pop d
14637  5FA9 FD 43         mov [d], b
14638  5FAB             ;; t =t/ 100; 
14639  5FAB FA 05 00      lea d, [bp + 5] ; $t
14640  5FAE DA            push d
14641  5FAF FA 05 00      lea d, [bp + 5] ; $t
14642  5FB2 2A            mov b, [d]
14643  5FB3             ; START FACTORS
14644  5FB3 D7            push a
14645  5FB4 11            mov a, b
14646  5FB5 26 64 00      mov b, $64
14647  5FB8 AE            div a, b
14648  5FB9 27            mov b, a
14649  5FBA E4            pop a
14650  5FBB             ; END FACTORS
14651  5FBB E7            pop d
14652  5FBC FD 43         mov [d], b
14653  5FBE             _if242_exit:
14654  5FBE             ;; return t; 
14655  5FBE FA 05 00      lea d, [bp + 5] ; $t
14656  5FC1 2A            mov b, [d]
14657  5FC2 F9            leave
14658  5FC3 09            ret
14659  5FC4             
14660  5FC4             distance_to:
14661  5FC4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14662  5FC7             ; $j 
14663  5FC7 52 02 00      sub sp, 2
14664  5FCA             ;; j = square00(TO_FIXED00(k->y) - ship_y); 
14665  5FCA FA FF FF      lea d, [bp + -1] ; $j
14666  5FCD DA            push d
14667  5FCE FA 05 00      lea d, [bp + 5] ; $k
14668  5FD1 FD 2A         mov d, [d]
14669  5FD3 58 00 00      add d, 0
14670  5FD6 32            mov bl, [d]
14671  5FD7 A7 00         mov bh, 0
14672  5FD9 FD AB         swp b
14673  5FDB D8            push b
14674  5FDC 07 FE 1C      call TO_FIXED00
14675  5FDF 51 02 00      add sp, 2
14676  5FE2             ; START TERMS
14677  5FE2 D7            push a
14678  5FE3 11            mov a, b
14679  5FE4 3B 71 61      mov d, _ship_y ; $ship_y
14680  5FE7 2A            mov b, [d]
14681  5FE8 60            sub a, b
14682  5FE9 27            mov b, a
14683  5FEA E4            pop a
14684  5FEB             ; END TERMS
14685  5FEB FD AB         swp b
14686  5FED D8            push b
14687  5FEE 07 4C 5F      call square00
14688  5FF1 51 02 00      add sp, 2
14689  5FF4 E7            pop d
14690  5FF5 FD 43         mov [d], b
14691  5FF7             ;; j = j + square00(TO_FIXED00(k->x) - ship_x); 
14692  5FF7 FA FF FF      lea d, [bp + -1] ; $j
14693  5FFA DA            push d
14694  5FFB FA FF FF      lea d, [bp + -1] ; $j
14695  5FFE 2A            mov b, [d]
14696  5FFF             ; START TERMS
14697  5FFF D7            push a
14698  6000 11            mov a, b
14699  6001 FA 05 00      lea d, [bp + 5] ; $k
14700  6004 FD 2A         mov d, [d]
14701  6006 58 01 00      add d, 1
14702  6009 32            mov bl, [d]
14703  600A A7 00         mov bh, 0
14704  600C FD AB         swp b
14705  600E D8            push b
14706  600F 07 FE 1C      call TO_FIXED00
14707  6012 51 02 00      add sp, 2
14708  6015             ; START TERMS
14709  6015 D7            push a
14710  6016 11            mov a, b
14711  6017 3B 73 61      mov d, _ship_x ; $ship_x
14712  601A 2A            mov b, [d]
14713  601B 60            sub a, b
14714  601C 27            mov b, a
14715  601D E4            pop a
14716  601E             ; END TERMS
14717  601E FD AB         swp b
14718  6020 D8            push b
14719  6021 07 4C 5F      call square00
14720  6024 51 02 00      add sp, 2
14721  6027 56            add b, a
14722  6028 E4            pop a
14723  6029             ; END TERMS
14724  6029 E7            pop d
14725  602A FD 43         mov [d], b
14726  602C             ;; j = isqrt(j); 
14727  602C FA FF FF      lea d, [bp + -1] ; $j
14728  602F DA            push d
14729  6030 FA FF FF      lea d, [bp + -1] ; $j
14730  6033 2A            mov b, [d]
14731  6034 FD AB         swp b
14732  6036 D8            push b
14733  6037 07 99 5E      call isqrt
14734  603A 51 02 00      add sp, 2
14735  603D E7            pop d
14736  603E FD 43         mov [d], b
14737  6040             ;; j =j* 10; 
14738  6040 FA FF FF      lea d, [bp + -1] ; $j
14739  6043 DA            push d
14740  6044 FA FF FF      lea d, [bp + -1] ; $j
14741  6047 2A            mov b, [d]
14742  6048             ; START FACTORS
14743  6048 D7            push a
14744  6049 11            mov a, b
14745  604A 26 0A 00      mov b, $a
14746  604D AC            mul a, b ; *
14747  604E 11            mov a, b
14748  604F 27            mov b, a
14749  6050 E4            pop a
14750  6051             ; END FACTORS
14751  6051 E7            pop d
14752  6052 FD 43         mov [d], b
14753  6054             ;; return j; 
14754  6054 FA FF FF      lea d, [bp + -1] ; $j
14755  6057 2A            mov b, [d]
14756  6058 F9            leave
14757  6059 09            ret
14758  605A             
14759  605A             cint100:
14760  605A F8 00 00      enter 0 ; (push bp; mov bp, sp)
14761  605D             ;; return (d + 50) / 100; 
14762  605D FA 05 00      lea d, [bp + 5] ; $d
14763  6060 2A            mov b, [d]
14764  6061             ; START TERMS
14765  6061 D7            push a
14766  6062 11            mov a, b
14767  6063 26 32 00      mov b, $32
14768  6066 56            add b, a
14769  6067 E4            pop a
14770  6068             ; END TERMS
14771  6068             ; START FACTORS
14772  6068 D7            push a
14773  6069 11            mov a, b
14774  606A 26 64 00      mov b, $64
14775  606D AE            div a, b
14776  606E 27            mov b, a
14777  606F E4            pop a
14778  6070             ; END FACTORS
14779  6070 F9            leave
14780  6071 09            ret
14781  6072             
14782  6072             showfile:
14783  6072 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14784  6075 F9            leave
14785  6076 09            ret
14786  6077             ; --- END TEXT BLOCK
14787  6077             
14788  6077             ; --- BEGIN DATA BLOCK
14789  6077 00          _starbases: .fill 1, 0
14790  6078 00          _base_y: .fill 1, 0
14791  6079 00          _base_x: .fill 1, 0
14792  607A 00          _starbases_left: .fill 1, 0
14793  607B             _c_data: 
14794  607B 00          .db 
14795  607C 00 00 00 FF .db $0,$0,$0,$ffff,$ffff,$ffff,$0,$1,$1,$1,$0,$1,$1,$1,$0,$ffff,$ffff,$ffff,$0,$1,$1,
14795  6080 FF FF 00 01 
14795  6084 01 01 00 01 
14795  6088 01 01 00 FF 
14795  608C FF FF 00 01 
14795  6090 01 
14796  6091 00 00 00 00 .fill 9, 0
14796  6095 00 00 00 00 
14796  6099 00 
14797  609A 00          _docked: .fill 1, 0
14798  609B 00 00       _energy: .fill 2, 0
14799  609D B8 0B       _energy0: .dw 3000
14800  609F 00 00 00 00 _map_data: .fill 162, 0
14800  60A3 00 00 00 00 
14800  60A7 00 00 00 00 
14800  60AB 00 00 00 00 
14800  60AF 00 00 00 00 
14800  60B3 00 00 00 00 
14800  60B7 00 00 00 00 
14800  60BB 00 00 00 00 
14800  60BF 00 00 00 00 
14800  60C3 00 00 00 00 
14800  60C7 00 00 00 00 
14800  60CB 00 00 00 00 
14800  60CF 00 00 00 00 
14800  60D3 00 00 00 00 
14800  60D7 00 00 00 00 
14800  60DB 00 00 00 00 
14800  60DF 00 00 00 00 
14800  60E3 00 00 00 00 
14800  60E7 00 00 00 00 
14800  60EB 00 00 00 00 
14800  60EF 00 00 00 00 
14800  60F3 00 00 00 00 
14800  60F7 00 00 00 00 
14800  60FB 00 00 00 00 
14800  60FF 00 00 00 00 
14800  6103 00 00 00 00 
14800  6107 00 00 00 00 
14800  610B 00 00 00 00 
14800  610F 00 00 00 00 
14800  6113 00 00 00 00 
14800  6117 00 00 00 00 
14800  611B 00 00 00 00 
14800  611F 00 00 00 00 
14800  6123 00 00 00 00 
14800  6127 00 00 00 00 
14800  612B 00 00 00 00 
14800  612F 00 00 00 00 
14800  6133 00 00 00 00 
14800  6137 00 00 00 00 
14800  613B 00 00 00 00 
14800  613F 00 00 
14801  6141 00 00 00 00 _kdata_data: .fill 12, 0
14801  6145 00 00 00 00 
14801  6149 00 00 00 00 
14802  614D 00          _klingons: .fill 1, 0
14803  614E 00          _total_klingons: .fill 1, 0
14804  614F 00          _klingons_left: .fill 1, 0
14805  6150 00          _torps: .fill 1, 0
14806  6151 0A          _torps0: .db 10
14807  6152 00 00       _quad_y: .fill 2, 0
14808  6154 00 00       _quad_x: .fill 2, 0
14809  6156 00 00       _shield: .fill 2, 0
14810  6158 00          _stars: .fill 1, 0
14811  6159 00 00       _time_start: .fill 2, 0
14812  615B 00 00       _time_up: .fill 2, 0
14813  615D 00 00 00 00 _damage_data: .fill 18, 0
14813  6161 00 00 00 00 
14813  6165 00 00 00 00 
14813  6169 00 00 00 00 
14813  616D 00 00 
14814  616F 00 00       _d4: .fill 2, 0
14815  6171 00 00       _ship_y: .fill 2, 0
14816  6173 00 00       _ship_x: .fill 2, 0
14817  6175 00 00       _stardate: .fill 2, 0
14818  6177 00 00 00 00 _quad_data: .fill 64, 0
14818  617B 00 00 00 00 
14818  617F 00 00 00 00 
14818  6183 00 00 00 00 
14818  6187 00 00 00 00 
14818  618B 00 00 00 00 
14818  618F 00 00 00 00 
14818  6193 00 00 00 00 
14818  6197 00 00 00 00 
14818  619B 00 00 00 00 
14818  619F 00 00 00 00 
14818  61A3 00 00 00 00 
14818  61A7 00 00 00 00 
14818  61AB 00 00 00 00 
14818  61AF 00 00 00 00 
14818  61B3 00 00 00 00 
14819  61B7 00 00 00 00 _quadname_data: .fill 12, 0
14819  61BB 00 00 00 00 
14819  61BF 00 00 00 00 
14820  61C3 72 65 70 6F _inc_1_data: .db "reports:\n  Incorrect course data, sir!\n", 0
14820  61C7 72 74 73 3A 
14820  61CB 0A 20 20 49 
14820  61CF 6E 63 6F 72 
14820  61D3 72 65 63 74 
14820  61D7 20 63 6F 75 
14820  61DB 72 73 65 20 
14820  61DF 64 61 74 61 
14820  61E3 2C 20 73 69 
14820  61E7 72 21 0A 00 
14821  61EB C3 61       _inc_1: .dw _inc_1_data
14822  61ED             _quad_name_data: 
14823  61ED 6D 63 6E 63 .dw _s0, _s1, _s2, _s3, _s4, _s5, _s6, _s7, _s8, _s9, _s10, _s11, _s12, _s13, _s14, _s15, _s16, 
14823  61F1 76 63 7C 63 
14823  61F5 84 63 89 63 
14823  61F9 91 63 98 63 
14823  61FD A4 63 AB 63 
14823  6201 B2 63 B8 63 
14823  6205 C0 63 CB 63 
14823  6209 D5 63 DD 63 
14823  620D E6 63 
14824  620F 00 00 00 00 .fill 34, 0
14824  6213 00 00 00 00 
14824  6217 00 00 00 00 
14824  621B 00 00 00 00 
14824  621F 00 00 00 00 
14824  6223 00 00 00 00 
14824  6227 00 00 00 00 
14824  622B 00 00 00 00 
14824  622F 00 00 
14825  6231             _device_name_data: 
14826  6231 6D 63 EC 63 .dw _s0, _s17, _s18, _s19, _s20, _s21, _s22, _s23, _s24, 
14826  6235 F9 63 0D 64 
14826  6239 20 64 2F 64 
14826  623D 3C 64 4B 64 
14826  6241 5A 64 
14827  6243 00 00 00 00 .fill 18, 0
14827  6247 00 00 00 00 
14827  624B 00 00 00 00 
14827  624F 00 00 00 00 
14827  6253 00 00 
14828  6255 44 61 6D 61 _dcr_1_data: .db "Damage Control report:", 0
14828  6259 67 65 20 43 
14828  625D 6F 6E 74 72 
14828  6261 6F 6C 20 72 
14828  6265 65 70 6F 72 
14828  6269 74 3A 00 
14829  626C 55 62       _dcr_1: .dw _dcr_1_data
14830  626E             _plural_2_data: 
14831  626E 00 00       .db $0,$0,
14832  6270             _plural_data: 
14833  6270 69 73 00    .db $69,$73,$0,
14834  6273 00          .fill 1, 0
14835  6274             _warpmax_data: 
14836  6274 08          .db $8,
14837  6275 00 00 00    .fill 3, 0
14838  6278 2D 2D 2D 2D _srs_1_data: .db "------------------------", 0
14838  627C 2D 2D 2D 2D 
14838  6280 2D 2D 2D 2D 
14838  6284 2D 2D 2D 2D 
14838  6288 2D 2D 2D 2D 
14838  628C 2D 2D 2D 2D 
14838  6290 00 
14839  6291 78 62       _srs_1: .dw _srs_1_data
14840  6293             _tilestr_data: 
14841  6293 6B 64 6F 64 .dw _s25, _s26, _s27, _s28, _s29, 
14841  6297 73 64 77 64 
14841  629B 7B 64 
14842  629D 00 00 00 00 .fill 10, 0
14842  62A1 00 00 00 00 
14842  62A5 00 00 
14843  62A7 2D 2D 2D 2D _lrs_1_data: .db "-------------------\n", 0
14843  62AB 2D 2D 2D 2D 
14843  62AF 2D 2D 2D 2D 
14843  62B3 2D 2D 2D 2D 
14843  62B7 2D 2D 2D 0A 
14843  62BB 00 
14844  62BC A7 62       _lrs_1: .dw _lrs_1_data
14845  62BE 20 20 20 2D _gr_1_data: .db "   ----- ----- ----- ----- ----- ----- ----- -----\n", 0
14845  62C2 2D 2D 2D 2D 
14845  62C6 20 2D 2D 2D 
14845  62CA 2D 2D 20 2D 
14845  62CE 2D 2D 2D 2D 
14845  62D2 20 2D 2D 2D 
14845  62D6 2D 2D 20 2D 
14845  62DA 2D 2D 2D 2D 
14845  62DE 20 2D 2D 2D 
14845  62E2 2D 2D 20 2D 
14845  62E6 2D 2D 2D 2D 
14845  62EA 20 2D 2D 2D 
14845  62EE 2D 2D 0A 00 
14846  62F2 BE 62       _gr_1: .dw _gr_1_data
14847  62F4 73 00       _str_s_data: .db "s", 0
14848  62F6 F4 62       _str_s: .dw _str_s_data
14849  62F8 20 20 2D 2D _gm_1_data: .db "  ----- ----- ----- ----- ----- ----- ----- -----\n", 0
14849  62FC 2D 2D 2D 20 
14849  6300 2D 2D 2D 2D 
14849  6304 2D 20 2D 2D 
14849  6308 2D 2D 2D 20 
14849  630C 2D 2D 2D 2D 
14849  6310 2D 20 2D 2D 
14849  6314 2D 2D 2D 20 
14849  6318 2D 2D 2D 2D 
14849  631C 2D 20 2D 2D 
14849  6320 2D 2D 2D 20 
14849  6324 2D 2D 2D 2D 
14849  6328 2D 0A 00 
14850  632B F8 62       _gm_1: .dw _gm_1_data
14851  632D 20 20 44 49 _dist_1_data: .db "  DISTANCE = \n\n", 0
14851  6331 53 54 41 4E 
14851  6335 43 45 20 3D 
14851  6339 20 0A 0A 00 
14852  633D 2D 63       _dist_1: .dw _dist_1_data
14853  633F 00 00 00 00 st_print100_buf_dt: .fill 16, 0
14853  6343 00 00 00 00 
14853  6347 00 00 00 00 
14853  634B 00 00 00 00 
14854  634F 47 52 45 45 _sC_data: .db "GREEN", 0
14854  6353 4E 00 
14855  6355 4F 63       _sC: .dw _sC_data
14856  6357             st_quadrant_name_sect_name_dt: 
14857  6357 6D 63 7B 77 .dw _s0, _s171, _s172, _s173, _s174, 
14857  635B 7E 77 82 77 
14857  635F 87 77 
14858  6361 00 00 00 00 .fill 10, 0
14858  6365 00 00 00 00 
14858  6369 00 00 
14859  636B 57 63       st_quadrant_name_sect_name: .dw st_quadrant_name_sect_name_dt
14860  636D 00          _s0: .db "", 0
14861  636E 41 6E 74 61 _s1: .db "Antares", 0
14861  6372 72 65 73 00 
14862  6376 52 69 67 65 _s2: .db "Rigel", 0
14862  637A 6C 00 
14863  637C 50 72 6F 63 _s3: .db "Procyon", 0
14863  6380 79 6F 6E 00 
14864  6384 56 65 67 61 _s4: .db "Vega", 0
14864  6388 00 
14865  6389 43 61 6E 6F _s5: .db "Canopus", 0
14865  638D 70 75 73 00 
14866  6391 41 6C 74 61 _s6: .db "Altair", 0
14866  6395 69 72 00 
14867  6398 53 61 67 69 _s7: .db "Sagittarius", 0
14867  639C 74 74 61 72 
14867  63A0 69 75 73 00 
14868  63A4 50 6F 6C 6C _s8: .db "Pollux", 0
14868  63A8 75 78 00 
14869  63AB 53 69 72 69 _s9: .db "Sirius", 0
14869  63AF 75 73 00 
14870  63B2 44 65 6E 65 _s10: .db "Deneb", 0
14870  63B6 62 00 
14871  63B8 43 61 70 65 _s11: .db "Capella", 0
14871  63BC 6C 6C 61 00 
14872  63C0 42 65 74 65 _s12: .db "Betelgeuse", 0
14872  63C4 6C 67 65 75 
14872  63C8 73 65 00 
14873  63CB 41 6C 64 65 _s13: .db "Aldebaran", 0
14873  63CF 62 61 72 61 
14873  63D3 6E 00 
14874  63D5 52 65 67 75 _s14: .db "Regulus", 0
14874  63D9 6C 75 73 00 
14875  63DD 41 72 63 74 _s15: .db "Arcturus", 0
14875  63E1 75 72 75 73 
14875  63E5 00 
14876  63E6 53 70 69 63 _s16: .db "Spica", 0
14876  63EA 61 00 
14877  63EC 57 61 72 70 _s17: .db "Warp engines", 0
14877  63F0 20 65 6E 67 
14877  63F4 69 6E 65 73 
14877  63F8 00 
14878  63F9 53 68 6F 72 _s18: .db "Short range sensors", 0
14878  63FD 74 20 72 61 
14878  6401 6E 67 65 20 
14878  6405 73 65 6E 73 
14878  6409 6F 72 73 00 
14879  640D 4C 6F 6E 67 _s19: .db "Long range sensors", 0
14879  6411 20 72 61 6E 
14879  6415 67 65 20 73 
14879  6419 65 6E 73 6F 
14879  641D 72 73 00 
14880  6420 50 68 61 73 _s20: .db "Phaser control", 0
14880  6424 65 72 20 63 
14880  6428 6F 6E 74 72 
14880  642C 6F 6C 00 
14881  642F 50 68 6F 74 _s21: .db "Photon tubes", 0
14881  6433 6F 6E 20 74 
14881  6437 75 62 65 73 
14881  643B 00 
14882  643C 44 61 6D 61 _s22: .db "Damage control", 0
14882  6440 67 65 20 63 
14882  6444 6F 6E 74 72 
14882  6448 6F 6C 00 
14883  644B 53 68 69 65 _s23: .db "Shield control", 0
14883  644F 6C 64 20 63 
14883  6453 6F 6E 74 72 
14883  6457 6F 6C 00 
14884  645A 4C 69 62 72 _s24: .db "Library computer", 0
14884  645E 61 72 79 20 
14884  6462 63 6F 6D 70 
14884  6466 75 74 65 72 
14884  646A 00 
14885  646B 20 20 20 00 _s25: .db "   ", 0
14886  646F 20 2A 20 00 _s26: .db " * ", 0
14887  6473 3E 21 3C 00 _s27: .db ">!<", 0
14888  6477 2B 4B 2B 00 _s28: .db "+K+", 0
14889  647B 3C 2A 3E 00 _s29: .db "<*>", 0
14890  647F 55 6E 65 78 _s30: .db "Unexpected format in printf.", 0
14890  6483 70 65 63 74 
14890  6487 65 64 20 66 
14890  648B 6F 72 6D 61 
14890  648F 74 20 69 6E 
14890  6493 20 70 72 69 
14890  6497 6E 74 66 2E 
14890  649B 00 
14891  649C 45 72 72 6F _s31: .db "Error: Unknown argument type.\n", 0
14891  64A0 72 3A 20 55 
14891  64A4 6E 6B 6E 6F 
14891  64A8 77 6E 20 61 
14891  64AC 72 67 75 6D 
14891  64B0 65 6E 74 20 
14891  64B4 74 79 70 65 
14891  64B8 2E 0A 00 
14892  64BB 1B 5B 32 4A _s32: .db "\033[2J\033[H", 0
14892  64BF 1B 5B 48 00 
14893  64C3 61 72 65 00 _s33: .db "are", 0
14894  64C7 69 73 00    _s34: .db "is", 0
14895  64CA 25 73 20 25 _s35: .db "%s %s inoperable.\n", 0
14895  64CE 73 20 69 6E 
14895  64D2 6F 70 65 72 
14895  64D6 61 62 6C 65 
14895  64DA 2E 0A 00 
14896  64DD 73 74 61 72 _s36: .db "startrek.intro", 0
14896  64E1 74 72 65 6B 
14896  64E5 2E 69 6E 74 
14896  64E9 72 6F 00 
14897  64EC 73 74 61 72 _s37: .db "startrek.doc", 0
14897  64F0 74 72 65 6B 
14897  64F4 2E 64 6F 63 
14897  64F8 00 
14898  64F9 73 74 61 72 _s38: .db "startrek.logo", 0
14898  64FD 74 72 65 6B 
14898  6501 2E 6C 6F 67 
14898  6505 6F 00 
14899  6507 73 74 61 72 _s39: .db "startrek.fatal", 0
14899  650B 74 72 65 6B 
14899  650F 2E 66 61 74 
14899  6513 61 6C 00 
14900  6516 43 6F 6D 6D _s40: .db "Command? ", 0
14900  651A 61 6E 64 3F 
14900  651E 20 00 
14901  6520 6E 61 76 00 _s41: .db "nav", 0
14902  6524 73 72 73 00 _s42: .db "srs", 0
14903  6528 6C 72 73 00 _s43: .db "lrs", 0
14904  652C 70 68 61 00 _s44: .db "pha", 0
14905  6530 74 6F 72 00 _s45: .db "tor", 0
14906  6534 73 68 69 00 _s46: .db "shi", 0
14907  6538 64 61 6D 00 _s47: .db "dam", 0
14908  653C 63 6F 6D 00 _s48: .db "com", 0
14909  6540 78 78 78 00 _s49: .db "xxx", 0
14910  6544 45 6E 74 65 _s50: .db "Enter one of the following:\n", 0
14910  6548 72 20 6F 6E 
14910  654C 65 20 6F 66 
14910  6550 20 74 68 65 
14910  6554 20 66 6F 6C 
14910  6558 6C 6F 77 69 
14910  655C 6E 67 3A 0A 
14910  6560 00 
14911  6561 20 20 6E 61 _s51: .db "  nav - To Set Course", 0
14911  6565 76 20 2D 20 
14911  6569 54 6F 20 53 
14911  656D 65 74 20 43 
14911  6571 6F 75 72 73 
14911  6575 65 00 
14912  6577 20 20 73 72 _s52: .db "  srs - Short Range Sensors", 0
14912  657B 73 20 2D 20 
14912  657F 53 68 6F 72 
14912  6583 74 20 52 61 
14912  6587 6E 67 65 20 
14912  658B 53 65 6E 73 
14912  658F 6F 72 73 00 
14913  6593 20 20 6C 72 _s53: .db "  lrs - Long Range Sensors", 0
14913  6597 73 20 2D 20 
14913  659B 4C 6F 6E 67 
14913  659F 20 52 61 6E 
14913  65A3 67 65 20 53 
14913  65A7 65 6E 73 6F 
14913  65AB 72 73 00 
14914  65AE 20 20 70 68 _s54: .db "  pha - Phasers", 0
14914  65B2 61 20 2D 20 
14914  65B6 50 68 61 73 
14914  65BA 65 72 73 00 
14915  65BE 20 20 74 6F _s55: .db "  tor - Photon Torpedoes", 0
14915  65C2 72 20 2D 20 
14915  65C6 50 68 6F 74 
14915  65CA 6F 6E 20 54 
14915  65CE 6F 72 70 65 
14915  65D2 64 6F 65 73 
14915  65D6 00 
14916  65D7 20 20 73 68 _s56: .db "  shi - Shield Control", 0
14916  65DB 69 20 2D 20 
14916  65DF 53 68 69 65 
14916  65E3 6C 64 20 43 
14916  65E7 6F 6E 74 72 
14916  65EB 6F 6C 00 
14917  65EE 20 20 64 61 _s57: .db "  dam - Damage Control", 0
14917  65F2 6D 20 2D 20 
14917  65F6 44 61 6D 61 
14917  65FA 67 65 20 43 
14917  65FE 6F 6E 74 72 
14917  6602 6F 6C 00 
14918  6605 20 20 63 6F _s58: .db "  com - Library Computer", 0
14918  6609 6D 20 2D 20 
14918  660D 4C 69 62 72 
14918  6611 61 72 79 20 
14918  6615 43 6F 6D 70 
14918  6619 75 74 65 72 
14918  661D 00 
14919  661E 20 20 78 78 _s59: .db "  xxx - Resign Command\n", 0
14919  6622 78 20 2D 20 
14919  6626 52 65 73 69 
14919  662A 67 6E 20 43 
14919  662E 6F 6D 6D 61 
14919  6632 6E 64 0A 00 
14920  6636 73 00       _s60: .db "s", 0
14921  6638 59 6F 75 72 _s61: .db "Your orders are as follows:\nDestroy the %d Klingon warships which have", 0
14921  663C 20 6F 72 64 
14921  6640 65 72 73 20 
14921  6644 61 72 65 20 
14921  6648 61 73 20 66 
14921  664C 6F 6C 6C 6F 
14921  6650 77 73 3A 0A 
14921  6654 44 65 73 74 
14921  6658 72 6F 79 20 
14921  665C 74 68 65 20 
14921  6660 25 64 20 4B 
14921  6664 6C 69 6E 67 
14921  6668 6F 6E 20 77 
14921  666C 61 72 73 68 
14921  6670 69 70 73 20 
14921  6674 77 68 69 63 
14921  6678 68 20 68 61 
14921  667C 76 65 00 
14922  667F 69 6E 76 61 _s62: .db "invaded\n the galaxy before they can attack Federation Headquarters\n", 0
14922  6683 64 65 64 0A 
14922  6687 20 74 68 65 
14922  668B 20 67 61 6C 
14922  668F 61 78 79 20 
14922  6693 62 65 66 6F 
14922  6697 72 65 20 74 
14922  669B 68 65 79 20 
14922  669F 63 61 6E 20 
14922  66A3 61 74 74 61 
14922  66A7 63 6B 20 46 
14922  66AB 65 64 65 72 
14922  66AF 61 74 69 6F 
14922  66B3 6E 20 48 65 
14922  66B7 61 64 71 75 
14922  66BB 61 72 74 65 
14922  66BF 72 73 0A 00 
14923  66C3 20 6F 6E 20 _s63: .db " on stardate %u. This gives you %d days. There %s\n %d starbase%s in the galaxy", 0
14923  66C7 73 74 61 72 
14923  66CB 64 61 74 65 
14923  66CF 20 25 75 2E 
14923  66D3 20 54 68 69 
14923  66D7 73 20 67 69 
14923  66DB 76 65 73 20 
14923  66DF 79 6F 75 20 
14923  66E3 25 64 20 64 
14923  66E7 61 79 73 2E 
14923  66EB 20 54 68 65 
14923  66EF 72 65 20 25 
14923  66F3 73 0A 20 25 
14923  66F7 64 20 73 74 
14923  66FB 61 72 62 61 
14923  66FF 73 65 25 73 
14923  6703 20 69 6E 20 
14923  6707 74 68 65 20 
14923  670B 67 61 6C 61 
14923  670F 78 79 00 
14924  6712 20 66 6F 72 _s64: .db " for resupplying your ship.\n\n Hit any key to accept command. ", 0
14924  6716 20 72 65 73 
14924  671A 75 70 70 6C 
14924  671E 79 69 6E 67 
14924  6722 20 79 6F 75 
14924  6726 72 20 73 68 
14924  672A 69 70 2E 0A 
14924  672E 0A 20 48 69 
14924  6732 74 20 61 6E 
14924  6736 79 20 6B 65 
14924  673A 79 20 74 6F 
14924  673E 20 61 63 63 
14924  6742 65 70 74 20 
14924  6746 63 6F 6D 6D 
14924  674A 61 6E 64 2E 
14924  674E 20 00 
14925  6750 4E 6F 77 20 _s65: .db "Now entering %s quadrant...\n\n", 0
14925  6754 65 6E 74 65 
14925  6758 72 69 6E 67 
14925  675C 20 25 73 20 
14925  6760 71 75 61 64 
14925  6764 72 61 6E 74 
14925  6768 2E 2E 2E 0A 
14925  676C 0A 00 
14926  676E 0A 59 6F 75 _s66: .db "\nYour mission begins with your starship located", 0
14926  6772 72 20 6D 69 
14926  6776 73 73 69 6F 
14926  677A 6E 20 62 65 
14926  677E 67 69 6E 73 
14926  6782 20 77 69 74 
14926  6786 68 20 79 6F 
14926  678A 75 72 20 73 
14926  678E 74 61 72 73 
14926  6792 68 69 70 20 
14926  6796 6C 6F 63 61 
14926  679A 74 65 64 00 
14927  679E 69 6E 20 74 _s67: .db "in the galactic quadrant %s.\n\n", 0
14927  67A2 68 65 20 67 
14927  67A6 61 6C 61 63 
14927  67AA 74 69 63 20 
14927  67AE 71 75 61 64 
14927  67B2 72 61 6E 74 
14927  67B6 20 25 73 2E 
14927  67BA 0A 0A 00 
14928  67BD 43 6F 6D 62 _s68: .db "Combat Area  Condition Red\n", 0
14928  67C1 61 74 20 41 
14928  67C5 72 65 61 20 
14928  67C9 20 43 6F 6E 
14928  67CD 64 69 74 69 
14928  67D1 6F 6E 20 52 
14928  67D5 65 64 0A 00 
14929  67D9 53 68 69 65 _s69: .db "Shields Dangerously Low\n", 0
14929  67DD 6C 64 73 20 
14929  67E1 44 61 6E 67 
14929  67E5 65 72 6F 75 
14929  67E9 73 6C 79 20 
14929  67ED 4C 6F 77 0A 
14929  67F1 00 
14930  67F2 43 6F 75 72 _s70: .db "Course (0-9): ", 0
14930  67F6 73 65 20 28 
14930  67FA 30 2D 39 29 
14930  67FE 3A 20 00 
14931  6801 4C 74 2E 20 _s71: .db "Lt. Sulu%s", 0
14931  6805 53 75 6C 75 
14931  6809 25 73 00 
14932  680C 30 2E 32 00 _s72: .db "0.2", 0
14933  6810 57 61 72 70 _s73: .db "Warp Factor (0-%s): ", 0
14933  6814 20 46 61 63 
14933  6818 74 6F 72 20 
14933  681C 28 30 2D 25 
14933  6820 73 29 3A 20 
14933  6824 00 
14934  6825 57 61 72 70 _s74: .db "Warp Engines are damaged. Maximum speed = Warp 0.2.\n\n", 0
14934  6829 20 45 6E 67 
14934  682D 69 6E 65 73 
14934  6831 20 61 72 65 
14934  6835 20 64 61 6D 
14934  6839 61 67 65 64 
14934  683D 2E 20 4D 61 
14934  6841 78 69 6D 75 
14934  6845 6D 20 73 70 
14934  6849 65 65 64 20 
14934  684D 3D 20 57 61 
14934  6851 72 70 20 30 
14934  6855 2E 32 2E 0A 
14934  6859 0A 00 
14935  685B 43 68 69 65 _s75: .db "Chief Engineer Scott reports:\n  The engines wont take warp %s!\n\n", 0
14935  685F 66 20 45 6E 
14935  6863 67 69 6E 65 
14935  6867 65 72 20 53 
14935  686B 63 6F 74 74 
14935  686F 20 72 65 70 
14935  6873 6F 72 74 73 
14935  6877 3A 0A 20 20 
14935  687B 54 68 65 20 
14935  687F 65 6E 67 69 
14935  6883 6E 65 73 20 
14935  6887 77 6F 6E 74 
14935  688B 20 74 61 6B 
14935  688F 65 20 77 61 
14935  6893 72 70 20 25 
14935  6897 73 21 0A 0A 
14935  689B 00 
14936  689C 45 6E 67 69 _s76: .db "Engineering reports:\n  Insufficient energy available for maneuvering at warp %s!\n\n", 0
14936  68A0 6E 65 65 72 
14936  68A4 69 6E 67 20 
14936  68A8 72 65 70 6F 
14936  68AC 72 74 73 3A 
14936  68B0 0A 20 20 49 
14936  68B4 6E 73 75 66 
14936  68B8 66 69 63 69 
14936  68BC 65 6E 74 20 
14936  68C0 65 6E 65 72 
14936  68C4 67 79 20 61 
14936  68C8 76 61 69 6C 
14936  68CC 61 62 6C 65 
14936  68D0 20 66 6F 72 
14936  68D4 20 6D 61 6E 
14936  68D8 65 75 76 65 
14936  68DC 72 69 6E 67 
14936  68E0 20 61 74 20 
14936  68E4 77 61 72 70 
14936  68E8 20 25 73 21 
14936  68EC 0A 0A 00 
14937  68EF 44 65 66 6C _s77: .db "Deflector Control Room acknowledges:\n  %d units of energy presently deployed to shields.\n", 0
14937  68F3 65 63 74 6F 
14937  68F7 72 20 43 6F 
14937  68FB 6E 74 72 6F 
14937  68FF 6C 20 52 6F 
14937  6903 6F 6D 20 61 
14937  6907 63 6B 6E 6F 
14937  690B 77 6C 65 64 
14937  690F 67 65 73 3A 
14937  6913 0A 20 20 25 
14937  6917 64 20 75 6E 
14937  691B 69 74 73 20 
14937  691F 6F 66 20 65 
14937  6923 6E 65 72 67 
14937  6927 79 20 70 72 
14937  692B 65 73 65 6E 
14937  692F 74 6C 79 20 
14937  6933 64 65 70 6C 
14937  6937 6F 79 65 64 
14937  693B 20 74 6F 20 
14937  693F 73 68 69 65 
14937  6943 6C 64 73 2E 
14937  6947 0A 00 
14938  6949 4C 54 2E 20 _s78: .db "LT. Uhura reports:\n Message from Starfleet Command:\n\n Permission to attempt crossing of galactic perimeter\n is hereby *denie"
14938  694D 55 68 75 72 
14938  6951 61 20 72 65 
14938  6955 70 6F 72 74 
14938  6959 73 3A 0A 20 
14938  695D 4D 65 73 73 
14938  6961 61 67 65 20 
14938  6965 66 72 6F 6D 
14938  6969 20 53 74 61 
14938  696D 72 66 6C 65 
14938  6971 65 74 20 43 
14938  6975 6F 6D 6D 61 
14938  6979 6E 64 3A 0A 
14938  697D 0A 20 50 65 
14938  6981 72 6D 69 73 
14938  6985 73 69 6F 6E 
14938  6989 20 74 6F 20 
14938  698D 61 74 74 65 
14938  6991 6D 70 74 20 
14938  6995 63 72 6F 73 
14938  6999 73 69 6E 67 
14938  699D 20 6F 66 20 
14938  69A1 67 61 6C 61 
14938  69A5 63 74 69 63 
14938  69A9 20 70 65 72 
14938  69AD 69 6D 65 74 
14938  69B1 65 72 0A 20 
14938  69B5 69 73 20 68 
14938  69B9 65 72 65 62 
14938  69BD 79 20 2A 64 
14938  69C1 65 6E 69 65 
14939  69C5 64 2A 2E 20 .db "d*. Shut down your engines.\n\n Chief Engineer Scott reports:\n Warp Engines shut down at sector %d, %d of quadrant %d, %d.\n\n", 0
14939  69C9 53 68 75 74 
14939  69CD 20 64 6F 77 
14939  69D1 6E 20 79 6F 
14939  69D5 75 72 20 65 
14939  69D9 6E 67 69 6E 
14939  69DD 65 73 2E 0A 
14939  69E1 0A 20 43 68 
14939  69E5 69 65 66 20 
14939  69E9 45 6E 67 69 
14939  69ED 6E 65 65 72 
14939  69F1 20 53 63 6F 
14939  69F5 74 74 20 72 
14939  69F9 65 70 6F 72 
14939  69FD 74 73 3A 0A 
14939  6A01 20 57 61 72 
14939  6A05 70 20 45 6E 
14939  6A09 67 69 6E 65 
14939  6A0D 73 20 73 68 
14939  6A11 75 74 20 64 
14939  6A15 6F 77 6E 20 
14939  6A19 61 74 20 73 
14939  6A1D 65 63 74 6F 
14939  6A21 72 20 25 64 
14939  6A25 2C 20 25 64 
14939  6A29 20 6F 66 20 
14939  6A2D 71 75 61 64 
14939  6A31 72 61 6E 74 
14939  6A35 20 25 64 2C 
14939  6A39 20 25 64 2E 
14939  6A3D 0A 0A 00 
14940  6A40 57 61 72 70 _s79: .db "Warp Engines shut down at sector %d, %d due to bad navigation.\n\n", 0
14940  6A44 20 45 6E 67 
14940  6A48 69 6E 65 73 
14940  6A4C 20 73 68 75 
14940  6A50 74 20 64 6F 
14940  6A54 77 6E 20 61 
14940  6A58 74 20 73 65 
14940  6A5C 63 74 6F 72 
14940  6A60 20 25 64 2C 
14940  6A64 20 25 64 20 
14940  6A68 64 75 65 20 
14940  6A6C 74 6F 20 62 
14940  6A70 61 64 20 6E 
14940  6A74 61 76 69 67 
14940  6A78 61 74 69 6F 
14940  6A7C 6E 2E 0A 0A 
14940  6A80 00 
14941  6A81 53 68 69 65 _s80: .db "Shield Control supplies energy to complete maneuver.\n", 0
14941  6A85 6C 64 20 43 
14941  6A89 6F 6E 74 72 
14941  6A8D 6F 6C 20 73 
14941  6A91 75 70 70 6C 
14941  6A95 69 65 73 20 
14941  6A99 65 6E 65 72 
14941  6A9D 67 79 20 74 
14941  6AA1 6F 20 63 6F 
14941  6AA5 6D 70 6C 65 
14941  6AA9 74 65 20 6D 
14941  6AAD 61 6E 65 75 
14941  6AB1 76 65 72 2E 
14941  6AB5 0A 00 
14942  6AB7 59 45 4C 4C _s81: .db "YELLOW", 0
14942  6ABB 4F 57 00 
14943  6ABE 2A 52 45 44 _s82: .db "*RED*", 0
14943  6AC2 2A 00 
14944  6AC4 44 4F 43 4B _s83: .db "DOCKED", 0
14944  6AC8 45 44 00 
14945  6ACB 53 68 69 65 _s84: .db "Shields dropped for docking purposes.", 0
14945  6ACF 6C 64 73 20 
14945  6AD3 64 72 6F 70 
14945  6AD7 70 65 64 20 
14945  6ADB 66 6F 72 20 
14945  6ADF 64 6F 63 6B 
14945  6AE3 69 6E 67 20 
14945  6AE7 70 75 72 70 
14945  6AEB 6F 73 65 73 
14945  6AEF 2E 00 
14946  6AF1 0A 2A 2A 2A _s85: .db "\n*** Short Range Sensors are out ***", 0
14946  6AF5 20 53 68 6F 
14946  6AF9 72 74 20 52 
14946  6AFD 61 6E 67 65 
14946  6B01 20 53 65 6E 
14946  6B05 73 6F 72 73 
14946  6B09 20 61 72 65 
14946  6B0D 20 6F 75 74 
14946  6B11 20 2A 2A 2A 
14946  6B15 00 
14947  6B16 20 20 20 20 _s86: .db "    Stardate            %d\n", 0
14947  6B1A 53 74 61 72 
14947  6B1E 64 61 74 65 
14947  6B22 20 20 20 20 
14947  6B26 20 20 20 20 
14947  6B2A 20 20 20 20 
14947  6B2E 25 64 0A 00 
14948  6B32 20 20 20 20 _s87: .db "    Condition           %s\n", 0
14948  6B36 43 6F 6E 64 
14948  6B3A 69 74 69 6F 
14948  6B3E 6E 20 20 20 
14948  6B42 20 20 20 20 
14948  6B46 20 20 20 20 
14948  6B4A 25 73 0A 00 
14949  6B4E 20 20 20 20 _s88: .db "    Quadrant            %d, %d\n", 0
14949  6B52 51 75 61 64 
14949  6B56 72 61 6E 74 
14949  6B5A 20 20 20 20 
14949  6B5E 20 20 20 20 
14949  6B62 20 20 20 20 
14949  6B66 25 64 2C 20 
14949  6B6A 25 64 0A 00 
14950  6B6E 20 20 20 20 _s89: .db "    Sector              %d, %d\n", 0
14950  6B72 53 65 63 74 
14950  6B76 6F 72 20 20 
14950  6B7A 20 20 20 20 
14950  6B7E 20 20 20 20 
14950  6B82 20 20 20 20 
14950  6B86 25 64 2C 20 
14950  6B8A 25 64 0A 00 
14951  6B8E 20 20 20 20 _s90: .db "    Photon Torpedoes    %d\n", 0
14951  6B92 50 68 6F 74 
14951  6B96 6F 6E 20 54 
14951  6B9A 6F 72 70 65 
14951  6B9E 64 6F 65 73 
14951  6BA2 20 20 20 20 
14951  6BA6 25 64 0A 00 
14952  6BAA 20 20 20 20 _s91: .db "    Total Energy        %d\n", 0
14952  6BAE 54 6F 74 61 
14952  6BB2 6C 20 45 6E 
14952  6BB6 65 72 67 79 
14952  6BBA 20 20 20 20 
14952  6BBE 20 20 20 20 
14952  6BC2 25 64 0A 00 
14953  6BC6 20 20 20 20 _s92: .db "    Shields             %d\n", 0
14953  6BCA 53 68 69 65 
14953  6BCE 6C 64 73 20 
14953  6BD2 20 20 20 20 
14953  6BD6 20 20 20 20 
14953  6BDA 20 20 20 20 
14953  6BDE 25 64 0A 00 
14954  6BE2 20 20 20 20 _s93: .db "    Klingons Remaining  %d\n", 0
14954  6BE6 4B 6C 69 6E 
14954  6BEA 67 6F 6E 73 
14954  6BEE 20 52 65 6D 
14954  6BF2 61 69 6E 69 
14954  6BF6 6E 67 20 20 
14954  6BFA 25 64 0A 00 
14955  6BFE 4C 6F 6E 67 _s94: .db "Long Range Scan for Quadrant %d, %d\n\n", 0
14955  6C02 20 52 61 6E 
14955  6C06 67 65 20 53 
14955  6C0A 63 61 6E 20 
14955  6C0E 66 6F 72 20 
14955  6C12 51 75 61 64 
14955  6C16 72 61 6E 74 
14955  6C1A 20 25 64 2C 
14955  6C1E 20 25 64 0A 
14955  6C22 0A 00 
14956  6C24 25 73 3A 00 _s95: .db "%s:", 0
14957  6C28 2A 2A 2A 00 _s96: .db "***", 0
14958  6C2C 20 3A 00    _s97: .db " :", 0
14959  6C2F 25 73 0A 00 _s98: .db "%s\n", 0
14960  6C33 53 63 69 65 _s99: .db "Science Officer Spock reports:\n  'Sensors show no enemy ships in this quadrant'\n", 0
14960  6C37 6E 63 65 20 
14960  6C3B 4F 66 66 69 
14960  6C3F 63 65 72 20 
14960  6C43 53 70 6F 63 
14960  6C47 6B 20 72 65 
14960  6C4B 70 6F 72 74 
14960  6C4F 73 3A 0A 20 
14960  6C53 20 27 53 65 
14960  6C57 6E 73 6F 72 
14960  6C5B 73 20 73 68 
14960  6C5F 6F 77 20 6E 
14960  6C63 6F 20 65 6E 
14960  6C67 65 6D 79 20 
14960  6C6B 73 68 69 70 
14960  6C6F 73 20 69 6E 
14960  6C73 20 74 68 69 
14960  6C77 73 20 71 75 
14960  6C7B 61 64 72 61 
14960  6C7F 6E 74 27 0A 
14960  6C83 00 
14961  6C84 43 6F 6D 70 _s100: .db "Computer failure hampers accuracy.", 0
14961  6C88 75 74 65 72 
14961  6C8C 20 66 61 69 
14961  6C90 6C 75 72 65 
14961  6C94 20 68 61 6D 
14961  6C98 70 65 72 73 
14961  6C9C 20 61 63 63 
14961  6CA0 75 72 61 63 
14961  6CA4 79 2E 00 
14962  6CA7 50 68 61 73 _s101: .db "Phasers locked on target;\n Energy available = %d units\n\n Number of units to fire: ", 0
14962  6CAB 65 72 73 20 
14962  6CAF 6C 6F 63 6B 
14962  6CB3 65 64 20 6F 
14962  6CB7 6E 20 74 61 
14962  6CBB 72 67 65 74 
14962  6CBF 3B 0A 20 45 
14962  6CC3 6E 65 72 67 
14962  6CC7 79 20 61 76 
14962  6CCB 61 69 6C 61 
14962  6CCF 62 6C 65 20 
14962  6CD3 3D 20 25 64 
14962  6CD7 20 75 6E 69 
14962  6CDB 74 73 0A 0A 
14962  6CDF 20 4E 75 6D 
14962  6CE3 62 65 72 20 
14962  6CE7 6F 66 20 75 
14962  6CEB 6E 69 74 73 
14962  6CEF 20 74 6F 20 
14962  6CF3 66 69 72 65 
14962  6CF7 3A 20 00 
14963  6CFA 4E 6F 74 20 _s102: .db "Not enough energy available.\n", 0
14963  6CFE 65 6E 6F 75 
14963  6D02 67 68 20 65 
14963  6D06 6E 65 72 67 
14963  6D0A 79 20 61 76 
14963  6D0E 61 69 6C 61 
14963  6D12 62 6C 65 2E 
14963  6D16 0A 00 
14964  6D18 53 65 6E 73 _s103: .db "Sensors show no damage to enemy at %d, %d\n\n", 0
14964  6D1C 6F 72 73 20 
14964  6D20 73 68 6F 77 
14964  6D24 20 6E 6F 20 
14964  6D28 64 61 6D 61 
14964  6D2C 67 65 20 74 
14964  6D30 6F 20 65 6E 
14964  6D34 65 6D 79 20 
14964  6D38 61 74 20 25 
14964  6D3C 64 2C 20 25 
14964  6D40 64 0A 0A 00 
14965  6D44 25 64 20 75 _s104: .db "%d unit hit on Klingon at sector %d, %d\n", 0
14965  6D48 6E 69 74 20 
14965  6D4C 68 69 74 20 
14965  6D50 6F 6E 20 4B 
14965  6D54 6C 69 6E 67 
14965  6D58 6F 6E 20 61 
14965  6D5C 74 20 73 65 
14965  6D60 63 74 6F 72 
14965  6D64 20 25 64 2C 
14965  6D68 20 25 64 0A 
14965  6D6C 00 
14966  6D6D 2A 2A 2A 20 _s105: .db "*** Klingon Destroyed ***\n", 0
14966  6D71 4B 6C 69 6E 
14966  6D75 67 6F 6E 20 
14966  6D79 44 65 73 74 
14966  6D7D 72 6F 79 65 
14966  6D81 64 20 2A 2A 
14966  6D85 2A 0A 00 
14967  6D88 20 20 20 28 _s106: .db "   (Sensors show %d units remaining.)\n\n", 0
14967  6D8C 53 65 6E 73 
14967  6D90 6F 72 73 20 
14967  6D94 73 68 6F 77 
14967  6D98 20 25 64 20 
14967  6D9C 75 6E 69 74 
14967  6DA0 73 20 72 65 
14967  6DA4 6D 61 69 6E 
14967  6DA8 69 6E 67 2E 
14967  6DAC 29 0A 0A 00 
14968  6DB0 41 6C 6C 20 _s107: .db "All photon torpedoes expended", 0
14968  6DB4 70 68 6F 74 
14968  6DB8 6F 6E 20 74 
14968  6DBC 6F 72 70 65 
14968  6DC0 64 6F 65 73 
14968  6DC4 20 65 78 70 
14968  6DC8 65 6E 64 65 
14968  6DCC 64 00 
14969  6DCE 45 6E 73 69 _s108: .db "Ensign Chekov%s", 0
14969  6DD2 67 6E 20 43 
14969  6DD6 68 65 6B 6F 
14969  6DDA 76 25 73 00 
14970  6DDE 54 6F 72 70 _s109: .db "Torpedo Track:", 0
14970  6DE2 65 64 6F 20 
14970  6DE6 54 72 61 63 
14970  6DEA 6B 3A 00 
14971  6DED 20 20 20 20 _s110: .db "    %d, %d\n", 0
14971  6DF1 25 64 2C 20 
14971  6DF5 25 64 0A 00 
14972  6DF9 54 6F 72 70 _s111: .db "Torpedo Missed\n", 0
14972  6DFD 65 64 6F 20 
14972  6E01 4D 69 73 73 
14972  6E05 65 64 0A 00 
14973  6E09 53 74 61 72 _s112: .db "Star at %d, %d absorbed torpedo energy.\n\n", 0
14973  6E0D 20 61 74 20 
14973  6E11 25 64 2C 20 
14973  6E15 25 64 20 61 
14973  6E19 62 73 6F 72 
14973  6E1D 62 65 64 20 
14973  6E21 74 6F 72 70 
14973  6E25 65 64 6F 20 
14973  6E29 65 6E 65 72 
14973  6E2D 67 79 2E 0A 
14973  6E31 0A 00 
14974  6E33 2A 2A 2A 20 _s113: .db "*** Starbase Destroyed ***", 0
14974  6E37 53 74 61 72 
14974  6E3B 62 61 73 65 
14974  6E3F 20 44 65 73 
14974  6E43 74 72 6F 79 
14974  6E47 65 64 20 2A 
14974  6E4B 2A 2A 00 
14975  6E4E 54 68 61 74 _s114: .db "That does it, Captain!!", 0
14975  6E52 20 64 6F 65 
14975  6E56 73 20 69 74 
14975  6E5A 2C 20 43 61 
14975  6E5E 70 74 61 69 
14975  6E62 6E 21 21 00 
14976  6E66 59 6F 75 20 _s115: .db "You are hereby relieved of command\n", 0
14976  6E6A 61 72 65 20 
14976  6E6E 68 65 72 65 
14976  6E72 62 79 20 72 
14976  6E76 65 6C 69 65 
14976  6E7A 76 65 64 20 
14976  6E7E 6F 66 20 63 
14976  6E82 6F 6D 6D 61 
14976  6E86 6E 64 0A 00 
14977  6E8A 61 6E 64 20 _s116: .db "and sentenced to 99 stardates of hard", 0
14977  6E8E 73 65 6E 74 
14977  6E92 65 6E 63 65 
14977  6E96 64 20 74 6F 
14977  6E9A 20 39 39 20 
14977  6E9E 73 74 61 72 
14977  6EA2 64 61 74 65 
14977  6EA6 73 20 6F 66 
14977  6EAA 20 68 61 72 
14977  6EAE 64 00 
14978  6EB0 6C 61 62 6F _s117: .db "labor on Cygnus 12!!\n", 0
14978  6EB4 72 20 6F 6E 
14978  6EB8 20 43 79 67 
14978  6EBC 6E 75 73 20 
14978  6EC0 31 32 21 21 
14978  6EC4 0A 00 
14979  6EC6 53 74 61 72 _s118: .db "Starfleet Command reviewing your record to consider\n court martial!\n", 0
14979  6ECA 66 6C 65 65 
14979  6ECE 74 20 43 6F 
14979  6ED2 6D 6D 61 6E 
14979  6ED6 64 20 72 65 
14979  6EDA 76 69 65 77 
14979  6EDE 69 6E 67 20 
14979  6EE2 79 6F 75 72 
14979  6EE6 20 72 65 63 
14979  6EEA 6F 72 64 20 
14979  6EEE 74 6F 20 63 
14979  6EF2 6F 6E 73 69 
14979  6EF6 64 65 72 0A 
14979  6EFA 20 63 6F 75 
14979  6EFE 72 74 20 6D 
14979  6F02 61 72 74 69 
14979  6F06 61 6C 21 0A 
14979  6F0A 00 
14980  6F0B 44 61 6D 61 _s119: .db "Damage Control report not available.", 0
14980  6F0F 67 65 20 43 
14980  6F13 6F 6E 74 72 
14980  6F17 6F 6C 20 72 
14980  6F1B 65 70 6F 72 
14980  6F1F 74 20 6E 6F 
14980  6F23 74 20 61 76 
14980  6F27 61 69 6C 61 
14980  6F2B 62 6C 65 2E 
14980  6F2F 00 
14981  6F30 0A 54 65 63 _s120: .db "\nTechnicians standing by to effect repairs to your ship;\nEstimated time to repair: %s stardates.\n Will you authorize the repa"
14981  6F34 68 6E 69 63 
14981  6F38 69 61 6E 73 
14981  6F3C 20 73 74 61 
14981  6F40 6E 64 69 6E 
14981  6F44 67 20 62 79 
14981  6F48 20 74 6F 20 
14981  6F4C 65 66 66 65 
14981  6F50 63 74 20 72 
14981  6F54 65 70 61 69 
14981  6F58 72 73 20 74 
14981  6F5C 6F 20 79 6F 
14981  6F60 75 72 20 73 
14981  6F64 68 69 70 3B 
14981  6F68 0A 45 73 74 
14981  6F6C 69 6D 61 74 
14981  6F70 65 64 20 74 
14981  6F74 69 6D 65 20 
14981  6F78 74 6F 20 72 
14981  6F7C 65 70 61 69 
14981  6F80 72 3A 20 25 
14981  6F84 73 20 73 74 
14981  6F88 61 72 64 61 
14981  6F8C 74 65 73 2E 
14981  6F90 0A 20 57 69 
14981  6F94 6C 6C 20 79 
14981  6F98 6F 75 20 61 
14981  6F9C 75 74 68 6F 
14981  6FA0 72 69 7A 65 
14981  6FA4 20 74 68 65 
14981  6FA8 20 72 65 70 
14981  6FAC 61 
14982  6FAD 69 72 20 6F .db "ir order (y/N)? ", 0
14982  6FB1 72 64 65 72 
14982  6FB5 20 28 79 2F 
14982  6FB9 4E 29 3F 20 
14982  6FBD 00 
14983  6FBE 44 65 76 69 _s121: .db "Device            State of Repair", 0
14983  6FC2 63 65 20 20 
14983  6FC6 20 20 20 20 
14983  6FCA 20 20 20 20 
14983  6FCE 20 20 53 74 
14983  6FD2 61 74 65 20 
14983  6FD6 6F 66 20 52 
14983  6FDA 65 70 61 69 
14983  6FDE 72 00 
14984  6FE0 25 2D 32 35 _s122: .db "%-25s%6s\n", 0
14984  6FE4 73 25 36 73 
14984  6FE8 0A 00 
14985  6FEA 0A 00       _s123: .db "\n", 0
14986  6FEC 45 6E 65 72 _s124: .db "Energy available = %d\n\n Input number of units to shields: ", 0
14986  6FF0 67 79 20 61 
14986  6FF4 76 61 69 6C 
14986  6FF8 61 62 6C 65 
14986  6FFC 20 3D 20 25 
14986  7000 64 0A 0A 20 
14986  7004 49 6E 70 75 
14986  7008 74 20 6E 75 
14986  700C 6D 62 65 72 
14986  7010 20 6F 66 20 
14986  7014 75 6E 69 74 
14986  7018 73 20 74 6F 
14986  701C 20 73 68 69 
14986  7020 65 6C 64 73 
14986  7024 3A 20 00 
14987  7027 3C 53 68 69 _s125: .db "<Shields Unchanged>\n", 0
14987  702B 65 6C 64 73 
14987  702F 20 55 6E 63 
14987  7033 68 61 6E 67 
14987  7037 65 64 3E 0A 
14987  703B 00 
14988  703C 53 68 69 65 _s126: .db "Shield Control Reports:\n  This is not the Federation Treasury.", 0
14988  7040 6C 64 20 43 
14988  7044 6F 6E 74 72 
14988  7048 6F 6C 20 52 
14988  704C 65 70 6F 72 
14988  7050 74 73 3A 0A 
14988  7054 20 20 54 68 
14988  7058 69 73 20 69 
14988  705C 73 20 6E 6F 
14988  7060 74 20 74 68 
14988  7064 65 20 46 65 
14988  7068 64 65 72 61 
14988  706C 74 69 6F 6E 
14988  7070 20 54 72 65 
14988  7074 61 73 75 72 
14988  7078 79 2E 00 
14989  707B 44 65 66 6C _s127: .db "Deflector Control Room report:\n  Shields now at %d units per your command.\n\n", 0
14989  707F 65 63 74 6F 
14989  7083 72 20 43 6F 
14989  7087 6E 74 72 6F 
14989  708B 6C 20 52 6F 
14989  708F 6F 6D 20 72 
14989  7093 65 70 6F 72 
14989  7097 74 3A 0A 20 
14989  709B 20 53 68 69 
14989  709F 65 6C 64 73 
14989  70A3 20 6E 6F 77 
14989  70A7 20 61 74 20 
14989  70AB 25 64 20 75 
14989  70AF 6E 69 74 73 
14989  70B3 20 70 65 72 
14989  70B7 20 79 6F 75 
14989  70BB 72 20 63 6F 
14989  70BF 6D 6D 61 6E 
14989  70C3 64 2E 0A 0A 
14989  70C7 00 
14990  70C8 43 6F 6D 70 _s128: .db "Computer active and awating command: ", 0
14990  70CC 75 74 65 72 
14990  70D0 20 61 63 74 
14990  70D4 69 76 65 20 
14990  70D8 61 6E 64 20 
14990  70DC 61 77 61 74 
14990  70E0 69 6E 67 20 
14990  70E4 63 6F 6D 6D 
14990  70E8 61 6E 64 3A 
14990  70EC 20 00 
14991  70EE 46 75 6E 63 _s129: .db "Functions available from Library-Computer:\n\n", 0
14991  70F2 74 69 6F 6E 
14991  70F6 73 20 61 76 
14991  70FA 61 69 6C 61 
14991  70FE 62 6C 65 20 
14991  7102 66 72 6F 6D 
14991  7106 20 4C 69 62 
14991  710A 72 61 72 79 
14991  710E 2D 43 6F 6D 
14991  7112 70 75 74 65 
14991  7116 72 3A 0A 0A 
14991  711A 00 
14992  711B 20 20 20 30 _s130: .db "   0 = Cumulative Galactic Record\n", 0
14992  711F 20 3D 20 43 
14992  7123 75 6D 75 6C 
14992  7127 61 74 69 76 
14992  712B 65 20 47 61 
14992  712F 6C 61 63 74 
14992  7133 69 63 20 52 
14992  7137 65 63 6F 72 
14992  713B 64 0A 00 
14993  713E 20 20 20 31 _s131: .db "   1 = Status Report\n", 0
14993  7142 20 3D 20 53 
14993  7146 74 61 74 75 
14993  714A 73 20 52 65 
14993  714E 70 6F 72 74 
14993  7152 0A 00 
14994  7154 20 20 20 32 _s132: .db "   2 = Photon Torpedo Data\n", 0
14994  7158 20 3D 20 50 
14994  715C 68 6F 74 6F 
14994  7160 6E 20 54 6F 
14994  7164 72 70 65 64 
14994  7168 6F 20 44 61 
14994  716C 74 61 0A 00 
14995  7170 20 20 20 33 _s133: .db "   3 = Starbase Nav Data\n", 0
14995  7174 20 3D 20 53 
14995  7178 74 61 72 62 
14995  717C 61 73 65 20 
14995  7180 4E 61 76 20 
14995  7184 44 61 74 61 
14995  7188 0A 00 
14996  718A 20 20 20 34 _s134: .db "   4 = Direction/Distance Calculator\n", 0
14996  718E 20 3D 20 44 
14996  7192 69 72 65 63 
14996  7196 74 69 6F 6E 
14996  719A 2F 44 69 73 
14996  719E 74 61 6E 63 
14996  71A2 65 20 43 61 
14996  71A6 6C 63 75 6C 
14996  71AA 61 74 6F 72 
14996  71AE 0A 00 
14997  71B0 20 20 20 35 _s135: .db "   5 = Galaxy Region Name Map\n", 0
14997  71B4 20 3D 20 47 
14997  71B8 61 6C 61 78 
14997  71BC 79 20 52 65 
14997  71C0 67 69 6F 6E 
14997  71C4 20 4E 61 6D 
14997  71C8 65 20 4D 61 
14997  71CC 70 0A 00 
14998  71CF 0A 20 20 20 _s136: .db "\n     Computer Record of Galaxy for Quadrant %d,%d\n\n", 0
14998  71D3 20 20 43 6F 
14998  71D7 6D 70 75 74 
14998  71DB 65 72 20 52 
14998  71DF 65 63 6F 72 
14998  71E3 64 20 6F 66 
14998  71E7 20 47 61 6C 
14998  71EB 61 78 79 20 
14998  71EF 66 6F 72 20 
14998  71F3 51 75 61 64 
14998  71F7 72 61 6E 74 
14998  71FB 20 25 64 2C 
14998  71FF 25 64 0A 0A 
14998  7203 00 
14999  7204 20 20 20 20 _s137: .db "     1     2     3     4     5     6     7     8", 0
14999  7208 20 31 20 20 
14999  720C 20 20 20 32 
14999  7210 20 20 20 20 
14999  7214 20 33 20 20 
14999  7218 20 20 20 34 
14999  721C 20 20 20 20 
14999  7220 20 35 20 20 
14999  7224 20 20 20 36 
14999  7228 20 20 20 20 
14999  722C 20 37 20 20 
14999  7230 20 20 20 38 
14999  7234 00 
15000  7235 25 73 25 64 _s138: .db "%s%d", 0
15000  7239 00 
15001  723A 20 20 20 53 _s139: .db "   Status Report:\n", 0
15001  723E 74 61 74 75 
15001  7242 73 20 52 65 
15001  7246 70 6F 72 74 
15001  724A 3A 0A 00 
15002  724D 4B 6C 69 6E _s140: .db "Klingon%s Left: %d\n Mission must be completed in %d.%d stardates\n", 0
15002  7251 67 6F 6E 25 
15002  7255 73 20 4C 65 
15002  7259 66 74 3A 20 
15002  725D 25 64 0A 20 
15002  7261 4D 69 73 73 
15002  7265 69 6F 6E 20 
15002  7269 6D 75 73 74 
15002  726D 20 62 65 20 
15002  7271 63 6F 6D 70 
15002  7275 6C 65 74 65 
15002  7279 64 20 69 6E 
15002  727D 20 25 64 2E 
15002  7281 25 64 20 73 
15002  7285 74 61 72 64 
15002  7289 61 74 65 73 
15002  728D 0A 00 
15003  728F 59 6F 75 72 _s141: .db "Your stupidity has left you on your own in the galaxy\n -- you have no starbases left!\n", 0
15003  7293 20 73 74 75 
15003  7297 70 69 64 69 
15003  729B 74 79 20 68 
15003  729F 61 73 20 6C 
15003  72A3 65 66 74 20 
15003  72A7 79 6F 75 20 
15003  72AB 6F 6E 20 79 
15003  72AF 6F 75 72 20 
15003  72B3 6F 77 6E 20 
15003  72B7 69 6E 20 74 
15003  72BB 68 65 20 67 
15003  72BF 61 6C 61 78 
15003  72C3 79 0A 20 2D 
15003  72C7 2D 20 79 6F 
15003  72CB 75 20 68 61 
15003  72CF 76 65 20 6E 
15003  72D3 6F 20 73 74 
15003  72D7 61 72 62 61 
15003  72DB 73 65 73 20 
15003  72DF 6C 65 66 74 
15003  72E3 21 0A 00 
15004  72E6 54 68 65 20 _s142: .db "The Federation is maintaining %d starbase%s in the galaxy\n\n", 0
15004  72EA 46 65 64 65 
15004  72EE 72 61 74 69 
15004  72F2 6F 6E 20 69 
15004  72F6 73 20 6D 61 
15004  72FA 69 6E 74 61 
15004  72FE 69 6E 69 6E 
15004  7302 67 20 25 64 
15004  7306 20 73 74 61 
15004  730A 72 62 61 73 
15004  730E 65 25 73 20 
15004  7312 69 6E 20 74 
15004  7316 68 65 20 67 
15004  731A 61 6C 61 78 
15004  731E 79 0A 0A 00 
15005  7322 46 72 6F 6D _s143: .db "From Enterprise to Klingon battlecriuser%s:\n\n", 0
15005  7326 20 45 6E 74 
15005  732A 65 72 70 72 
15005  732E 69 73 65 20 
15005  7332 74 6F 20 4B 
15005  7336 6C 69 6E 67 
15005  733A 6F 6E 20 62 
15005  733E 61 74 74 6C 
15005  7342 65 63 72 69 
15005  7346 75 73 65 72 
15005  734A 25 73 3A 0A 
15005  734E 0A 00 
15006  7350 4D 72 2E 20 _s144: .db "Mr. Spock reports,\n  Sensors show no starbases in this quadrant.\n", 0
15006  7354 53 70 6F 63 
15006  7358 6B 20 72 65 
15006  735C 70 6F 72 74 
15006  7360 73 2C 0A 20 
15006  7364 20 53 65 6E 
15006  7368 73 6F 72 73 
15006  736C 20 73 68 6F 
15006  7370 77 20 6E 6F 
15006  7374 20 73 74 61 
15006  7378 72 62 61 73 
15006  737C 65 73 20 69 
15006  7380 6E 20 74 68 
15006  7384 69 73 20 71 
15006  7388 75 61 64 72 
15006  738C 61 6E 74 2E 
15006  7390 0A 00 
15007  7392 44 69 72 65 _s145: .db "Direction/Distance Calculator\n You are at quadrant %d,%d sector %d,%d\n\n Please enter initial X coordinate: ", 0
15007  7396 63 74 69 6F 
15007  739A 6E 2F 44 69 
15007  739E 73 74 61 6E 
15007  73A2 63 65 20 43 
15007  73A6 61 6C 63 75 
15007  73AA 6C 61 74 6F 
15007  73AE 72 0A 20 59 
15007  73B2 6F 75 20 61 
15007  73B6 72 65 20 61 
15007  73BA 74 20 71 75 
15007  73BE 61 64 72 61 
15007  73C2 6E 74 20 25 
15007  73C6 64 2C 25 64 
15007  73CA 20 73 65 63 
15007  73CE 74 6F 72 20 
15007  73D2 25 64 2C 25 
15007  73D6 64 0A 0A 20 
15007  73DA 50 6C 65 61 
15007  73DE 73 65 20 65 
15007  73E2 6E 74 65 72 
15007  73E6 20 69 6E 69 
15007  73EA 74 69 61 6C 
15007  73EE 20 58 20 63 
15007  73F2 6F 6F 72 64 
15007  73F6 69 6E 61 74 
15007  73FA 65 3A 20 00 
15008  73FE 50 6C 65 61 _s146: .db "Please enter initial Y coordinate: ", 0
15008  7402 73 65 20 65 
15008  7406 6E 74 65 72 
15008  740A 20 69 6E 69 
15008  740E 74 69 61 6C 
15008  7412 20 59 20 63 
15008  7416 6F 6F 72 64 
15008  741A 69 6E 61 74 
15008  741E 65 3A 20 00 
15009  7422 50 6C 65 61 _s147: .db "Please enter final X coordinate: ", 0
15009  7426 73 65 20 65 
15009  742A 6E 74 65 72 
15009  742E 20 66 69 6E 
15009  7432 61 6C 20 58 
15009  7436 20 63 6F 6F 
15009  743A 72 64 69 6E 
15009  743E 61 74 65 3A 
15009  7442 20 00 
15010  7444 50 6C 65 61 _s148: .db "Please enter final Y coordinate: ", 0
15010  7448 73 65 20 65 
15010  744C 6E 74 65 72 
15010  7450 20 66 69 6E 
15010  7454 61 6C 20 59 
15010  7458 20 63 6F 6F 
15010  745C 72 64 69 6E 
15010  7460 61 74 65 3A 
15010  7464 20 00 
15011  7466 0A 20 20 20 _s149: .db "\n                   The Galaxy\n\n", 0
15011  746A 20 20 20 20 
15011  746E 20 20 20 20 
15011  7472 20 20 20 20 
15011  7476 20 20 20 20 
15011  747A 54 68 65 20 
15011  747E 47 61 6C 61 
15011  7482 78 79 0A 0A 
15011  7486 00 
15012  7487 20 20 20 20 _s150: .db "    1     2     3     4     5     6     7     8\n", 0
15012  748B 31 20 20 20 
15012  748F 20 20 32 20 
15012  7493 20 20 20 20 
15012  7497 33 20 20 20 
15012  749B 20 20 34 20 
15012  749F 20 20 20 20 
15012  74A3 35 20 20 20 
15012  74A7 20 20 36 20 
15012  74AB 20 20 20 20 
15012  74AF 37 20 20 20 
15012  74B3 20 20 38 0A 
15012  74B7 00 
15013  74B8 25 73 25 64 _s151: .db "%s%d ", 0
15013  74BC 20 00 
15014  74BE 20 20 44 49 _s152: .db "  DIRECTION = ", 0
15014  74C2 52 45 43 54 
15014  74C6 49 4F 4E 20 
15014  74CA 3D 20 00 
15015  74CD 25 73 00    _s153: .db "%s", 0
15016  74D0 54 68 65 20 _s154: .db "The Enterprise has been destroyed. The Federation will be conquered.\n", 0
15016  74D4 45 6E 74 65 
15016  74D8 72 70 72 69 
15016  74DC 73 65 20 68 
15016  74E0 61 73 20 62 
15016  74E4 65 65 6E 20 
15016  74E8 64 65 73 74 
15016  74EC 72 6F 79 65 
15016  74F0 64 2E 20 54 
15016  74F4 68 65 20 46 
15016  74F8 65 64 65 72 
15016  74FC 61 74 69 6F 
15016  7500 6E 20 77 69 
15016  7504 6C 6C 20 62 
15016  7508 65 20 63 6F 
15016  750C 6E 71 75 65 
15016  7510 72 65 64 2E 
15016  7514 0A 00 
15017  7516 49 74 20 69 _s155: .db "It is stardate %d.\n\n", 0
15017  751A 73 20 73 74 
15017  751E 61 72 64 61 
15017  7522 74 65 20 25 
15017  7526 64 2E 0A 0A 
15017  752A 00 
15018  752B 54 68 65 72 _s156: .db "There were %d Klingon Battlecruisers left at the end of your mission.\n\n", 0
15018  752F 65 20 77 65 
15018  7533 72 65 20 25 
15018  7537 64 20 4B 6C 
15018  753B 69 6E 67 6F 
15018  753F 6E 20 42 61 
15018  7543 74 74 6C 65 
15018  7547 63 72 75 69 
15018  754B 73 65 72 73 
15018  754F 20 6C 65 66 
15018  7553 74 20 61 74 
15018  7557 20 74 68 65 
15018  755B 20 65 6E 64 
15018  755F 20 6F 66 20 
15018  7563 79 6F 75 72 
15018  7567 20 6D 69 73 
15018  756B 73 69 6F 6E 
15018  756F 2E 0A 0A 00 
15019  7573 43 6F 6E 67 _s157: .db "Congratulations, Captain!  The last Klingon Battle Cruiser\n menacing the Federation has been destoyed.\n", 0
15019  7577 72 61 74 75 
15019  757B 6C 61 74 69 
15019  757F 6F 6E 73 2C 
15019  7583 20 43 61 70 
15019  7587 74 61 69 6E 
15019  758B 21 20 20 54 
15019  758F 68 65 20 6C 
15019  7593 61 73 74 20 
15019  7597 4B 6C 69 6E 
15019  759B 67 6F 6E 20 
15019  759F 42 61 74 74 
15019  75A3 6C 65 20 43 
15019  75A7 72 75 69 73 
15019  75AB 65 72 0A 20 
15019  75AF 6D 65 6E 61 
15019  75B3 63 69 6E 67 
15019  75B7 20 74 68 65 
15019  75BB 20 46 65 64 
15019  75BF 65 72 61 74 
15019  75C3 69 6F 6E 20 
15019  75C7 68 61 73 20 
15019  75CB 62 65 65 6E 
15019  75CF 20 64 65 73 
15019  75D3 74 6F 79 65 
15019  75D7 64 2E 0A 00 
15020  75DB 59 6F 75 72 _s158: .db "Your efficiency rating is %s\n", 0
15020  75DF 20 65 66 66 
15020  75E3 69 63 69 65 
15020  75E7 6E 63 79 20 
15020  75EB 72 61 74 69 
15020  75EF 6E 67 20 69 
15020  75F3 73 20 25 73 
15020  75F7 0A 00 
15021  75F9 54 68 65 20 _s159: .db "The Federation is in need of a new starship commander", 0
15021  75FD 46 65 64 65 
15021  7601 72 61 74 69 
15021  7605 6F 6E 20 69 
15021  7609 73 20 69 6E 
15021  760D 20 6E 65 65 
15021  7611 64 20 6F 66 
15021  7615 20 61 20 6E 
15021  7619 65 77 20 73 
15021  761D 74 61 72 73 
15021  7621 68 69 70 20 
15021  7625 63 6F 6D 6D 
15021  7629 61 6E 64 65 
15021  762D 72 00 
15022  762F 20 66 6F 72 _s160: .db " for a similar mission.\n", 0
15022  7633 20 61 20 73 
15022  7637 69 6D 69 6C 
15022  763B 61 72 20 6D 
15022  763F 69 73 73 69 
15022  7643 6F 6E 2E 0A 
15022  7647 00 
15023  7648 49 66 20 74 _s161: .db "If there is a volunteer, let him step forward and", 0
15023  764C 68 65 72 65 
15023  7650 20 69 73 20 
15023  7654 61 20 76 6F 
15023  7658 6C 75 6E 74 
15023  765C 65 65 72 2C 
15023  7660 20 6C 65 74 
15023  7664 20 68 69 6D 
15023  7668 20 73 74 65 
15023  766C 70 20 66 6F 
15023  7670 72 77 61 72 
15023  7674 64 20 61 6E 
15023  7678 64 00 
15024  767A 20 65 6E 74 _s162: .db " enter aye: ", 0
15024  767E 65 72 20 61 
15024  7682 79 65 3A 20 
15024  7686 00 
15025  7687 61 79 65 00 _s163: .db "aye", 0
15026  768B 53 74 61 72 _s164: .db "Starbase shields protect the Enterprise\n", 0
15026  768F 62 61 73 65 
15026  7693 20 73 68 69 
15026  7697 65 6C 64 73 
15026  769B 20 70 72 6F 
15026  769F 74 65 63 74 
15026  76A3 20 74 68 65 
15026  76A7 20 45 6E 74 
15026  76AB 65 72 70 72 
15026  76AF 69 73 65 0A 
15026  76B3 00 
15027  76B4 25 64 20 75 _s165: .db "%d unit hit on Enterprise from sector %d, %d\n", 0
15027  76B8 6E 69 74 20 
15027  76BC 68 69 74 20 
15027  76C0 6F 6E 20 45 
15027  76C4 6E 74 65 72 
15027  76C8 70 72 69 73 
15027  76CC 65 20 66 72 
15027  76D0 6F 6D 20 73 
15027  76D4 65 63 74 6F 
15027  76D8 72 20 25 64 
15027  76DC 2C 20 25 64 
15027  76E0 0A 00 
15028  76E2 20 20 20 20 _s166: .db "    <Shields down to %d units>\n\n", 0
15028  76E6 3C 53 68 69 
15028  76EA 65 6C 64 73 
15028  76EE 20 64 6F 77 
15028  76F2 6E 20 74 6F 
15028  76F6 20 25 64 20 
15028  76FA 75 6E 69 74 
15028  76FE 73 3E 0A 0A 
15028  7702 00 
15029  7703 44 61 6D 61 _s167: .db "Damage Control reports\n%s damaged by hit\n\n", 0
15029  7707 67 65 20 43 
15029  770B 6F 6E 74 72 
15029  770F 6F 6C 20 72 
15029  7713 65 70 6F 72 
15029  7717 74 73 0A 25 
15029  771B 73 20 64 61 
15029  771F 6D 61 67 65 
15029  7723 64 20 62 79 
15029  7727 20 68 69 74 
15029  772B 0A 0A 00 
15030  772E 20 20 20 20 _s168: .db "    %s repair completed\n\n", 0
15030  7732 25 73 20 72 
15030  7736 65 70 61 69 
15030  773A 72 20 63 6F 
15030  773E 6D 70 6C 65 
15030  7742 74 65 64 0A 
15030  7746 0A 00 
15031  7748 20 20 20 20 _s169: .db "    %s damaged\n\n", 0
15031  774C 25 73 20 64 
15031  7750 61 6D 61 67 
15031  7754 65 64 0A 0A 
15031  7758 00 
15032  7759 20 20 20 20 _s170: .db "    %s state of repair improved\n\n", 0
15032  775D 25 73 20 73 
15032  7761 74 61 74 65 
15032  7765 20 6F 66 20 
15032  7769 72 65 70 61 
15032  776D 69 72 20 69 
15032  7771 6D 70 72 6F 
15032  7775 76 65 64 0A 
15032  7779 0A 00 
15033  777B 20 49 00    _s171: .db " I", 0
15034  777E 20 49 49 00 _s172: .db " II", 0
15035  7782 20 49 49 49 _s173: .db " III", 0
15035  7786 00 
15036  7787 20 49 56 00 _s174: .db " IV", 0
15037  778B 55 6E 6B 6E _s175: .db "Unknown", 0
15037  778F 6F 77 6E 00 
15038  7793             
15039  7793 95 77       _heap_top: .dw _heap
15040  7795 00          _heap: .db 0
15041  7796             ; --- END DATA BLOCK
15042  7796             
15043  7796             .end
tasm: Number of errors = 0
