0001   0000             ; --- FILENAME: games/startrek.c
0002   0000             .include "lib/asm/kernel.exp"
0001+  0000             text_org    .EQU  $0400
0002+  0000             sys_bkpt         .EQU  $0000
0003+  0000             sys_rtc          .EQU  $0001
0004+  0000             sys_ide          .EQU  $0002
0005+  0000             sys_io           .EQU  $0003
0006+  0000             sys_filesystem   .EQU  $0004
0007+  0000             sys_spawn_proc   .EQU  $0005
0008+  0000             sys_list         .EQU  $0006
0009+  0000             sys_datetime     .EQU  $0007
0010+  0000             sys_reboot       .EQU  $0008
0011+  0000             sys_pause_proc   .EQU  $0009
0012+  0000             sys_resume_proc  .EQU  $000a
0013+  0000             sys_terminate_proc .EQU  $000b
0014+  0000             sys_system       .EQU  $000c
0015+  0000             sys_boot_install .EQU  $000d
0003   0000             .include "lib/asm/bios.exp"
0001+  0000             BIOS_RESET_VECTOR .EQU  $01c0
0002+  0000             IDE_buffer       .EQU  $8204
0003+  0000             boot_origin      .EQU  $8004
0004+  0000             bios_uart        .EQU  $0002
0005+  0000             bios_ide         .EQU  $0003
0004   0400             .org text_org
0005   0400             
0006   0400             ; --- BEGIN TEXT SEGMENT
0007   0400             main:
0008   0400 FD 49 E0 FF   mov bp, $FFE0 ;
0009   0404 FD 47 E0 FF   mov sp, $FFE0 ; Make space for argc(2 bytes) and for 10 pointers in argv (local variables)
0010   0408             ; intro(); 
0011   0408                            
0012   0408             ; --- START FUNCTION CALL
0013   0408 07 F8 09      call intro
0014   040B             ; new_game(); 
0015   040B                            
0016   040B             ; --- START FUNCTION CALL
0017   040B 07 9B 0A      call new_game
0018   040E             ; return 0; 
0019   040E                            
0020   040E FD 2E 00 00   mov32 cb, $00000000
0020   0412 00 00 
0021   0414 F9            leave
0022   0415 05 0B         syscall sys_terminate_proc
0023   0417             
0024   0417             TO_FIXED:
0025   0417 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0026   041A             ; return x * 10; 
0027   041A                            
0028   041A FA 05 00      lea d, [bp + 5] ; $x
0029   041D 2A            mov b, [d]
0030   041E 38 00 00      mov c, 0
0031   0421             ; --- START FACTORS
0032   0421 D7            push a
0033   0422 FD D8         push g
0034   0424 11            mov a, b
0035   0425 FD 7A         mov g, c
0036   0427 FD 2E 0A 00   mov32 cb, $0000000a
0036   042B 00 00 
0037   042D D7            push a     ; save left operand
0038   042E 8E            xor a, b   ; xor sign bits
0039   042F FD AA         swp a      ; swap bytes
0040   0431 83            mov cl, al ; save result of xor into 'dl'
0041   0432 E4            pop a      ; restore left side operator
0042   0433 DF            push cl    ; save result of xor above
0043   0434 FD AA         swp a  
0044   0436 93 80         test al, $80  
0045   0438 FD AA         swp a  
0046   043A C6 3F 04      jz skip_invert_a_1  
0047   043D FD 95         neg a 
0048   043F             skip_invert_a_1:   
0049   043F FD AB         swp b
0050   0441 FD 93 80      test bl, $80  
0051   0444 FD AB         swp b
0052   0446 C6 4B 04      jz skip_invert_b_1  
0053   0449 FD 97         neg b 
0054   044B             skip_invert_b_1:   
0055   044B AC            mul a, b ; *
0056   044C FD 78         mov g, a
0057   044E 11            mov a, b
0058   044F EA            pop bl
0059   0450 FD 93 80      test bl, $80
0060   0453 C6 60 04      jz _same_signs_1
0061   0456 2F            mov bl, al
0062   0457 95            not a
0063   0458 FD 97         neg b
0064   045A 5B 00 00      adc a, 0
0065   045D FD 78         mov g, a
0066   045F 11            mov a, b
0067   0460             _same_signs_1:
0068   0460 FD 38         mov c, g
0069   0462 27            mov b, a
0070   0463 FD F1         pop g
0071   0465 E4            pop a
0072   0466             ; --- END FACTORS
0073   0466 F9            leave
0074   0467 09            ret
0075   0468             
0076   0468             FROM_FIXED:
0077   0468 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0078   046B             ; return x / 10; 
0079   046B                            
0080   046B FA 05 00      lea d, [bp + 5] ; $x
0081   046E 2A            mov b, [d]
0082   046F 38 00 00      mov c, 0
0083   0472             ; --- START FACTORS
0084   0472 D7            push a
0085   0473 FD D8         push g
0086   0475 11            mov a, b
0087   0476 FD 7A         mov g, c
0088   0478 FD 2E 0A 00   mov32 cb, $0000000a
0088   047C 00 00 
0089   047E FD D8         push g ; save 'g' as the div instruction uses it
0090   0480 AE            div a, b ; /, a: quotient, b: remainder
0091   0481 FD F1         pop g
0092   0483 FD 38         mov c, g
0093   0485 27            mov b, a
0094   0486 FD F1         pop g
0095   0488 E4            pop a
0096   0489             ; --- END FACTORS
0097   0489 F9            leave
0098   048A 09            ret
0099   048B             
0100   048B             TO_FIXED00:
0101   048B F8 00 00      enter 0 ; (push bp; mov bp, sp)
0102   048E             ; return x * 100; 
0103   048E                            
0104   048E FA 05 00      lea d, [bp + 5] ; $x
0105   0491 2A            mov b, [d]
0106   0492 38 00 00      mov c, 0
0107   0495             ; --- START FACTORS
0108   0495 D7            push a
0109   0496 FD D8         push g
0110   0498 11            mov a, b
0111   0499 FD 7A         mov g, c
0112   049B FD 2E 64 00   mov32 cb, $00000064
0112   049F 00 00 
0113   04A1 D7            push a     ; save left operand
0114   04A2 8E            xor a, b   ; xor sign bits
0115   04A3 FD AA         swp a      ; swap bytes
0116   04A5 83            mov cl, al ; save result of xor into 'dl'
0117   04A6 E4            pop a      ; restore left side operator
0118   04A7 DF            push cl    ; save result of xor above
0119   04A8 FD AA         swp a  
0120   04AA 93 80         test al, $80  
0121   04AC FD AA         swp a  
0122   04AE C6 B3 04      jz skip_invert_a_3  
0123   04B1 FD 95         neg a 
0124   04B3             skip_invert_a_3:   
0125   04B3 FD AB         swp b
0126   04B5 FD 93 80      test bl, $80  
0127   04B8 FD AB         swp b
0128   04BA C6 BF 04      jz skip_invert_b_3  
0129   04BD FD 97         neg b 
0130   04BF             skip_invert_b_3:   
0131   04BF AC            mul a, b ; *
0132   04C0 FD 78         mov g, a
0133   04C2 11            mov a, b
0134   04C3 EA            pop bl
0135   04C4 FD 93 80      test bl, $80
0136   04C7 C6 D4 04      jz _same_signs_3
0137   04CA 2F            mov bl, al
0138   04CB 95            not a
0139   04CC FD 97         neg b
0140   04CE 5B 00 00      adc a, 0
0141   04D1 FD 78         mov g, a
0142   04D3 11            mov a, b
0143   04D4             _same_signs_3:
0144   04D4 FD 38         mov c, g
0145   04D6 27            mov b, a
0146   04D7 FD F1         pop g
0147   04D9 E4            pop a
0148   04DA             ; --- END FACTORS
0149   04DA F9            leave
0150   04DB 09            ret
0151   04DC             
0152   04DC             FROM_FIXED00:
0153   04DC F8 00 00      enter 0 ; (push bp; mov bp, sp)
0154   04DF             ; return x / 100; 
0155   04DF                            
0156   04DF FA 05 00      lea d, [bp + 5] ; $x
0157   04E2 2A            mov b, [d]
0158   04E3 38 00 00      mov c, 0
0159   04E6             ; --- START FACTORS
0160   04E6 D7            push a
0161   04E7 FD D8         push g
0162   04E9 11            mov a, b
0163   04EA FD 7A         mov g, c
0164   04EC FD 2E 64 00   mov32 cb, $00000064
0164   04F0 00 00 
0165   04F2 FD D8         push g ; save 'g' as the div instruction uses it
0166   04F4 AE            div a, b ; /, a: quotient, b: remainder
0167   04F5 FD F1         pop g
0168   04F7 FD 38         mov c, g
0169   04F9 27            mov b, a
0170   04FA FD F1         pop g
0171   04FC E4            pop a
0172   04FD             ; --- END FACTORS
0173   04FD F9            leave
0174   04FE 09            ret
0175   04FF             
0176   04FF             get_rand:
0177   04FF F8 00 00      enter 0 ; (push bp; mov bp, sp)
0178   0502             ; unsigned int r ; 
0179   0502 52 02 00      sub sp, 2
0180   0505             ; r = rand(); 
0181   0505 FA FF FF      lea d, [bp + -1] ; $r
0182   0508 DA            push d
0183   0509                            
0184   0509             ; --- START FUNCTION CALL
0185   0509 07 7D 5E      call rand
0186   050C E7            pop d
0187   050D FD 43         mov [d], b
0188   050F             ; r = (r >> 8) | (r << 8); 
0189   050F FA FF FF      lea d, [bp + -1] ; $r
0190   0512 DA            push d
0191   0513                            
0192   0513                            
0193   0513 FA FF FF      lea d, [bp + -1] ; $r
0194   0516 2A            mov b, [d]
0195   0517 38 00 00      mov c, 0
0196   051A             ; --- START SHIFT
0197   051A D7            push a
0198   051B 11            mov a, b
0199   051C FD 2E 08 00   mov32 cb, $00000008
0199   0520 00 00 
0200   0522 FD 39         mov c, b
0201   0524 A1            shr a, cl
0202   0525 27            mov b, a
0203   0526 E4            pop a
0204   0527             ; --- END SHIFT
0205   0527 D7            push a
0206   0528 11            mov a, b
0207   0529                            
0208   0529 FA FF FF      lea d, [bp + -1] ; $r
0209   052C 2A            mov b, [d]
0210   052D 38 00 00      mov c, 0
0211   0530             ; --- START SHIFT
0212   0530 D7            push a
0213   0531 11            mov a, b
0214   0532 FD 2E 08 00   mov32 cb, $00000008
0214   0536 00 00 
0215   0538 FD 39         mov c, b
0216   053A 9D            shl a, cl
0217   053B 27            mov b, a
0218   053C E4            pop a
0219   053D             ; --- END SHIFT
0220   053D FD 70         or b, a ; |
0221   053F E4            pop a
0222   0540 E7            pop d
0223   0541 FD 43         mov [d], b
0224   0543             ; return ((r % spread) + 1); 
0225   0543                            
0226   0543                            
0227   0543                            
0228   0543 FA FF FF      lea d, [bp + -1] ; $r
0229   0546 2A            mov b, [d]
0230   0547 38 00 00      mov c, 0
0231   054A             ; --- START FACTORS
0232   054A D7            push a
0233   054B FD D8         push g
0234   054D 11            mov a, b
0235   054E FD 7A         mov g, c
0236   0550 FA 05 00      lea d, [bp + 5] ; $spread
0237   0553 2A            mov b, [d]
0238   0554 38 00 00      mov c, 0
0239   0557 FD D8         push g ; save 'g' as the div instruction uses it
0240   0559 AE            div a, b ; %, a: quotient, b: remainder
0241   055A 11            mov a, b
0242   055B FD F1         pop g
0243   055D FD 38         mov c, g
0244   055F 27            mov b, a
0245   0560 FD F1         pop g
0246   0562 E4            pop a
0247   0563             ; --- END FACTORS
0248   0563             ; --- START TERMS
0249   0563 D7            push a
0250   0564 11            mov a, b
0251   0565 FD 2E 01 00   mov32 cb, $00000001
0251   0569 00 00 
0252   056B 56            add b, a
0253   056C E4            pop a
0254   056D             ; --- END TERMS
0255   056D F9            leave
0256   056E 09            ret
0257   056F             
0258   056F             rand8:
0259   056F F8 00 00      enter 0 ; (push bp; mov bp, sp)
0260   0572             ; return (get_rand(8)); 
0261   0572                            
0262   0572                            
0263   0572             ; --- START FUNCTION CALL
0264   0572                            
0265   0572 FD 2E 08 00   mov32 cb, $00000008
0265   0576 00 00 
0266   0578 FD AB         swp b
0267   057A D8            push b
0268   057B 07 FF 04      call get_rand
0269   057E 51 02 00      add sp, 2
0270   0581             ; --- END FUNCTION CALL
0271   0581 F9            leave
0272   0582 09            ret
0273   0583             
0274   0583             input:
0275   0583 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0276   0586             ; int c; 
0277   0586 52 02 00      sub sp, 2
0278   0589             ; while((c = getchar()) != '\n') { 
0279   0589             _while6_cond:
0280   0589                            
0281   0589 FA FF FF      lea d, [bp + -1] ; $c
0282   058C DA            push d
0283   058D                            
0284   058D             ; --- START FUNCTION CALL
0285   058D 07 F6 5D      call getchar
0286   0590 E7            pop d
0287   0591 FD 43         mov [d], b
0288   0593             ; --- START RELATIONAL
0289   0593 D7            push a
0290   0594 11            mov a, b
0291   0595 FD 2E 0A 00   mov32 cb, $0000000a
0291   0599 00 00 
0292   059B B0            cmp a, b
0293   059C FD 72         sneq ; !=
0294   059E E4            pop a
0295   059F             ; --- END RELATIONAL
0296   059F C0 00 00      cmp b, 0
0297   05A2 C6 12 06      je _while6_exit
0298   05A5             _while6_block:
0299   05A5             ; if (c == -1) 
0300   05A5             _if7_cond:
0301   05A5                            
0302   05A5 FA FF FF      lea d, [bp + -1] ; $c
0303   05A8 2A            mov b, [d]
0304   05A9 38 00 00      mov c, 0
0305   05AC             ; --- START RELATIONAL
0306   05AC D7            push a
0307   05AD 11            mov a, b
0308   05AE FD 2E FF FF   mov32 cb, $ffffffff
0308   05B2 FF FF 
0309   05B4 B0            cmp a, b
0310   05B5 FD 71         seq ; ==
0311   05B7 E4            pop a
0312   05B8             ; --- END RELATIONAL
0313   05B8 C0 00 00      cmp b, 0
0314   05BB C6 C4 05      je _if7_exit
0315   05BE             _if7_TRUE:
0316   05BE             ; exit(); 
0317   05BE                            
0318   05BE             ; --- START FUNCTION CALL
0319   05BE 07 10 5E      call exit
0320   05C1 0A C4 05      jmp _if7_exit
0321   05C4             _if7_exit:
0322   05C4             ; if (l > 1) { 
0323   05C4             _if8_cond:
0324   05C4                            
0325   05C4 FA 07 00      lea d, [bp + 7] ; $l
0326   05C7 32            mov bl, [d]
0327   05C8 A7 00         mov bh, 0
0328   05CA 38 00 00      mov c, 0
0329   05CD             ; --- START RELATIONAL
0330   05CD D7            push a
0331   05CE 11            mov a, b
0332   05CF FD 2E 01 00   mov32 cb, $00000001
0332   05D3 00 00 
0333   05D5 B0            cmp a, b
0334   05D6 FD 81         sgu ; > (unsigned)
0335   05D8 E4            pop a
0336   05D9             ; --- END RELATIONAL
0337   05D9 C0 00 00      cmp b, 0
0338   05DC C6 0F 06      je _if8_exit
0339   05DF             _if8_TRUE:
0340   05DF             ; *b++ = c; 
0341   05DF FA 05 00      lea d, [bp + 5] ; $b
0342   05E2 2A            mov b, [d]
0343   05E3 38 00 00      mov c, 0
0344   05E6 FD 77         inc b
0345   05E8 FA 05 00      lea d, [bp + 5] ; $b
0346   05EB FD 43         mov [d], b
0347   05ED FD 7D         dec b
0348   05EF D8            push b
0349   05F0                            
0350   05F0 FA FF FF      lea d, [bp + -1] ; $c
0351   05F3 2A            mov b, [d]
0352   05F4 38 00 00      mov c, 0
0353   05F7 E7            pop d
0354   05F8 FD 3E         mov [d], bl
0355   05FA             ; l--; 
0356   05FA                            
0357   05FA FA 07 00      lea d, [bp + 7] ; $l
0358   05FD 32            mov bl, [d]
0359   05FE A7 00         mov bh, 0
0360   0600 38 00 00      mov c, 0
0361   0603 FD 7D         dec b
0362   0605 FA 07 00      lea d, [bp + 7] ; $l
0363   0608 FD 3E         mov [d], bl
0364   060A FD 77         inc b
0365   060C 0A 0F 06      jmp _if8_exit
0366   060F             _if8_exit:
0367   060F 0A 89 05      jmp _while6_cond
0368   0612             _while6_exit:
0369   0612             ; *b = 0; 
0370   0612 FA 05 00      lea d, [bp + 5] ; $b
0371   0615 2A            mov b, [d]
0372   0616 38 00 00      mov c, 0
0373   0619 D8            push b
0374   061A                            
0375   061A FD 2E 00 00   mov32 cb, $00000000
0375   061E 00 00 
0376   0620 E7            pop d
0377   0621 FD 3E         mov [d], bl
0378   0623 F9            leave
0379   0624 09            ret
0380   0625             
0381   0625             yesno:
0382   0625 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0383   0628             ; char b[2]; 
0384   0628 52 02 00      sub sp, 2
0385   062B             ; input(b,2); 
0386   062B                            
0387   062B             ; --- START FUNCTION CALL
0388   062B                            
0389   062B FD 2E 02 00   mov32 cb, $00000002
0389   062F 00 00 
0390   0631 DD            push bl
0391   0632                            
0392   0632 FA FF FF      lea d, [bp + -1] ; $b
0393   0635 2D            mov b, d
0394   0636 38 00 00      mov c, 0
0395   0639 FD AB         swp b
0396   063B D8            push b
0397   063C 07 83 05      call input
0398   063F 51 03 00      add sp, 3
0399   0642             ; --- END FUNCTION CALL
0400   0642             ; tolower(*b); 
0401   0642                            
0402   0642             ; --- START FUNCTION CALL
0403   0642                            
0404   0642 FA FF FF      lea d, [bp + -1] ; $b
0405   0645 2D            mov b, d
0406   0646 38 00 00      mov c, 0
0407   0649 74            mov d, b
0408   064A 32            mov bl, [d]
0409   064B A7 00         mov bh, 0
0410   064D 38 00 00      mov c, 0
0411   0650 DD            push bl
0412   0651 07 17 5E      call tolower
0413   0654 51 01 00      add sp, 1
0414   0657             ; --- END FUNCTION CALL
0415   0657             ; return 1; 
0416   0657                            
0417   0657 FD 2E 01 00   mov32 cb, $00000001
0417   065B 00 00 
0418   065D F9            leave
0419   065E 09            ret
0420   065F             ; return 0; 
0421   065F                            
0422   065F FD 2E 00 00   mov32 cb, $00000000
0422   0663 00 00 
0423   0665 F9            leave
0424   0666 09            ret
0425   0667             
0426   0667             input_f00:
0427   0667 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0428   066A             ; int v; 
0429   066A 52 02 00      sub sp, 2
0430   066D             ; char buf[8]; 
0431   066D 52 08 00      sub sp, 8
0432   0670             ; char *x; 
0433   0670 52 02 00      sub sp, 2
0434   0673             ; input(buf, 8); 
0435   0673                            
0436   0673             ; --- START FUNCTION CALL
0437   0673                            
0438   0673 FD 2E 08 00   mov32 cb, $00000008
0438   0677 00 00 
0439   0679 DD            push bl
0440   067A                            
0441   067A FA F7 FF      lea d, [bp + -9] ; $buf
0442   067D 2D            mov b, d
0443   067E 38 00 00      mov c, 0
0444   0681 FD AB         swp b
0445   0683 D8            push b
0446   0684 07 83 05      call input
0447   0687 51 03 00      add sp, 3
0448   068A             ; --- END FUNCTION CALL
0449   068A             ; x = buf; 
0450   068A FA F5 FF      lea d, [bp + -11] ; $x
0451   068D DA            push d
0452   068E                            
0453   068E FA F7 FF      lea d, [bp + -9] ; $buf
0454   0691 2D            mov b, d
0455   0692 38 00 00      mov c, 0
0456   0695 E7            pop d
0457   0696 FD 43         mov [d], b
0458   0698             ; if (!is_digit(*x)) 
0459   0698             _if9_cond:
0460   0698                             
0461   0698             ; --- START FUNCTION CALL
0462   0698                             
0463   0698 FA F5 FF      lea d, [bp + -11] ; $x
0464   069B 2A            mov b, [d]
0465   069C 38 00 00      mov c, 0
0466   069F 74            mov d, b
0467   06A0 32            mov bl, [d]
0468   06A1 A7 00         mov bh, 0
0469   06A3 38 00 00      mov c, 0
0470   06A6 DD            push bl
0471   06A7 07 09 6B      call is_digit
0472   06AA 51 01 00      add sp, 1
0473   06AD             ; --- END FUNCTION CALL
0474   06AD C0 00 00      cmp b, 0
0475   06B0 C6 BE 06      je _if9_exit
0476   06B3             _if9_TRUE:
0477   06B3             ; return -1; 
0478   06B3                             
0479   06B3 FD 2E FF FF   mov32 cb, $ffffffff
0479   06B7 FF FF 
0480   06B9 F9            leave
0481   06BA 09            ret
0482   06BB 0A BE 06      jmp _if9_exit
0483   06BE             _if9_exit:
0484   06BE             ; v = 100 * (*x++ - '0'); 
0485   06BE FA FF FF      lea d, [bp + -1] ; $v
0486   06C1 DA            push d
0487   06C2                             
0488   06C2 FD 2E 64 00   mov32 cb, $00000064
0488   06C6 00 00 
0489   06C8             ; --- START FACTORS
0490   06C8 D7            push a
0491   06C9 FD D8         push g
0492   06CB 11            mov a, b
0493   06CC FD 7A         mov g, c
0494   06CE                             
0495   06CE FA F5 FF      lea d, [bp + -11] ; $x
0496   06D1 2A            mov b, [d]
0497   06D2 38 00 00      mov c, 0
0498   06D5 FD 77         inc b
0499   06D7 FA F5 FF      lea d, [bp + -11] ; $x
0500   06DA FD 43         mov [d], b
0501   06DC FD 7D         dec b
0502   06DE 74            mov d, b
0503   06DF 32            mov bl, [d]
0504   06E0 A7 00         mov bh, 0
0505   06E2 38 00 00      mov c, 0
0506   06E5             ; --- START TERMS
0507   06E5 D7            push a
0508   06E6 11            mov a, b
0509   06E7 FD 2E 30 00   mov32 cb, $00000030
0509   06EB 00 00 
0510   06ED 60            sub a, b
0511   06EE 27            mov b, a
0512   06EF E4            pop a
0513   06F0             ; --- END TERMS
0514   06F0 D7            push a     ; save left operand
0515   06F1 8E            xor a, b   ; xor sign bits
0516   06F2 FD AA         swp a      ; swap bytes
0517   06F4 83            mov cl, al ; save result of xor into 'dl'
0518   06F5 E4            pop a      ; restore left side operator
0519   06F6 DF            push cl    ; save result of xor above
0520   06F7 FD AA         swp a  
0521   06F9 93 80         test al, $80  
0522   06FB FD AA         swp a  
0523   06FD C6 02 07      jz skip_invert_a_10  
0524   0700 FD 95         neg a 
0525   0702             skip_invert_a_10:   
0526   0702 FD AB         swp b
0527   0704 FD 93 80      test bl, $80  
0528   0707 FD AB         swp b
0529   0709 C6 0E 07      jz skip_invert_b_10  
0530   070C FD 97         neg b 
0531   070E             skip_invert_b_10:   
0532   070E AC            mul a, b ; *
0533   070F FD 78         mov g, a
0534   0711 11            mov a, b
0535   0712 EA            pop bl
0536   0713 FD 93 80      test bl, $80
0537   0716 C6 23 07      jz _same_signs_10
0538   0719 2F            mov bl, al
0539   071A 95            not a
0540   071B FD 97         neg b
0541   071D 5B 00 00      adc a, 0
0542   0720 FD 78         mov g, a
0543   0722 11            mov a, b
0544   0723             _same_signs_10:
0545   0723 FD 38         mov c, g
0546   0725 27            mov b, a
0547   0726 FD F1         pop g
0548   0728 E4            pop a
0549   0729             ; --- END FACTORS
0550   0729 E7            pop d
0551   072A FD 43         mov [d], b
0552   072C             ; if (*x == 0) 
0553   072C             _if11_cond:
0554   072C                             
0555   072C FA F5 FF      lea d, [bp + -11] ; $x
0556   072F 2A            mov b, [d]
0557   0730 38 00 00      mov c, 0
0558   0733 74            mov d, b
0559   0734 32            mov bl, [d]
0560   0735 A7 00         mov bh, 0
0561   0737 38 00 00      mov c, 0
0562   073A             ; --- START RELATIONAL
0563   073A D7            push a
0564   073B 11            mov a, b
0565   073C FD 2E 00 00   mov32 cb, $00000000
0565   0740 00 00 
0566   0742 B0            cmp a, b
0567   0743 FD 71         seq ; ==
0568   0745 E4            pop a
0569   0746             ; --- END RELATIONAL
0570   0746 C0 00 00      cmp b, 0
0571   0749 C6 58 07      je _if11_exit
0572   074C             _if11_TRUE:
0573   074C             ; return v; 
0574   074C                             
0575   074C FA FF FF      lea d, [bp + -1] ; $v
0576   074F 2A            mov b, [d]
0577   0750 38 00 00      mov c, 0
0578   0753 F9            leave
0579   0754 09            ret
0580   0755 0A 58 07      jmp _if11_exit
0581   0758             _if11_exit:
0582   0758             ; if (*x++ != '.') 
0583   0758             _if12_cond:
0584   0758                             
0585   0758 FA F5 FF      lea d, [bp + -11] ; $x
0586   075B 2A            mov b, [d]
0587   075C 38 00 00      mov c, 0
0588   075F FD 77         inc b
0589   0761 FA F5 FF      lea d, [bp + -11] ; $x
0590   0764 FD 43         mov [d], b
0591   0766 FD 7D         dec b
0592   0768 74            mov d, b
0593   0769 32            mov bl, [d]
0594   076A A7 00         mov bh, 0
0595   076C 38 00 00      mov c, 0
0596   076F             ; --- START RELATIONAL
0597   076F D7            push a
0598   0770 11            mov a, b
0599   0771 FD 2E 2E 00   mov32 cb, $0000002e
0599   0775 00 00 
0600   0777 B0            cmp a, b
0601   0778 FD 72         sneq ; !=
0602   077A E4            pop a
0603   077B             ; --- END RELATIONAL
0604   077B C0 00 00      cmp b, 0
0605   077E C6 8C 07      je _if12_exit
0606   0781             _if12_TRUE:
0607   0781             ; return -1; 
0608   0781                             
0609   0781 FD 2E FF FF   mov32 cb, $ffffffff
0609   0785 FF FF 
0610   0787 F9            leave
0611   0788 09            ret
0612   0789 0A 8C 07      jmp _if12_exit
0613   078C             _if12_exit:
0614   078C             ; if (!is_digit(*x)) 
0615   078C             _if13_cond:
0616   078C                             
0617   078C             ; --- START FUNCTION CALL
0618   078C                             
0619   078C FA F5 FF      lea d, [bp + -11] ; $x
0620   078F 2A            mov b, [d]
0621   0790 38 00 00      mov c, 0
0622   0793 74            mov d, b
0623   0794 32            mov bl, [d]
0624   0795 A7 00         mov bh, 0
0625   0797 38 00 00      mov c, 0
0626   079A DD            push bl
0627   079B 07 09 6B      call is_digit
0628   079E 51 01 00      add sp, 1
0629   07A1             ; --- END FUNCTION CALL
0630   07A1 C0 00 00      cmp b, 0
0631   07A4 C6 B2 07      je _if13_exit
0632   07A7             _if13_TRUE:
0633   07A7             ; return -1; 
0634   07A7                             
0635   07A7 FD 2E FF FF   mov32 cb, $ffffffff
0635   07AB FF FF 
0636   07AD F9            leave
0637   07AE 09            ret
0638   07AF 0A B2 07      jmp _if13_exit
0639   07B2             _if13_exit:
0640   07B2             ; v = v + 10 * (*x++ - '0'); 
0641   07B2 FA FF FF      lea d, [bp + -1] ; $v
0642   07B5 DA            push d
0643   07B6                             
0644   07B6 FA FF FF      lea d, [bp + -1] ; $v
0645   07B9 2A            mov b, [d]
0646   07BA 38 00 00      mov c, 0
0647   07BD             ; --- START TERMS
0648   07BD D7            push a
0649   07BE 11            mov a, b
0650   07BF FD 2E 0A 00   mov32 cb, $0000000a
0650   07C3 00 00 
0651   07C5             ; --- START FACTORS
0652   07C5 D7            push a
0653   07C6 FD D8         push g
0654   07C8 11            mov a, b
0655   07C9 FD 7A         mov g, c
0656   07CB                             
0657   07CB FA F5 FF      lea d, [bp + -11] ; $x
0658   07CE 2A            mov b, [d]
0659   07CF 38 00 00      mov c, 0
0660   07D2 FD 77         inc b
0661   07D4 FA F5 FF      lea d, [bp + -11] ; $x
0662   07D7 FD 43         mov [d], b
0663   07D9 FD 7D         dec b
0664   07DB 74            mov d, b
0665   07DC 32            mov bl, [d]
0666   07DD A7 00         mov bh, 0
0667   07DF 38 00 00      mov c, 0
0668   07E2             ; --- START TERMS
0669   07E2 D7            push a
0670   07E3 11            mov a, b
0671   07E4 FD 2E 30 00   mov32 cb, $00000030
0671   07E8 00 00 
0672   07EA 60            sub a, b
0673   07EB 27            mov b, a
0674   07EC E4            pop a
0675   07ED             ; --- END TERMS
0676   07ED D7            push a     ; save left operand
0677   07EE 8E            xor a, b   ; xor sign bits
0678   07EF FD AA         swp a      ; swap bytes
0679   07F1 83            mov cl, al ; save result of xor into 'dl'
0680   07F2 E4            pop a      ; restore left side operator
0681   07F3 DF            push cl    ; save result of xor above
0682   07F4 FD AA         swp a  
0683   07F6 93 80         test al, $80  
0684   07F8 FD AA         swp a  
0685   07FA C6 FF 07      jz skip_invert_a_14  
0686   07FD FD 95         neg a 
0687   07FF             skip_invert_a_14:   
0688   07FF FD AB         swp b
0689   0801 FD 93 80      test bl, $80  
0690   0804 FD AB         swp b
0691   0806 C6 0B 08      jz skip_invert_b_14  
0692   0809 FD 97         neg b 
0693   080B             skip_invert_b_14:   
0694   080B AC            mul a, b ; *
0695   080C FD 78         mov g, a
0696   080E 11            mov a, b
0697   080F EA            pop bl
0698   0810 FD 93 80      test bl, $80
0699   0813 C6 20 08      jz _same_signs_14
0700   0816 2F            mov bl, al
0701   0817 95            not a
0702   0818 FD 97         neg b
0703   081A 5B 00 00      adc a, 0
0704   081D FD 78         mov g, a
0705   081F 11            mov a, b
0706   0820             _same_signs_14:
0707   0820 FD 38         mov c, g
0708   0822 27            mov b, a
0709   0823 FD F1         pop g
0710   0825 E4            pop a
0711   0826             ; --- END FACTORS
0712   0826 56            add b, a
0713   0827 E4            pop a
0714   0828             ; --- END TERMS
0715   0828 E7            pop d
0716   0829 FD 43         mov [d], b
0717   082B             ; if (!*x) 
0718   082B             _if15_cond:
0719   082B                             
0720   082B FA F5 FF      lea d, [bp + -11] ; $x
0721   082E 2A            mov b, [d]
0722   082F 38 00 00      mov c, 0
0723   0832 74            mov d, b
0724   0833 32            mov bl, [d]
0725   0834 A7 00         mov bh, 0
0726   0836 38 00 00      mov c, 0
0727   0839 C0 00 00      cmp b, 0
0728   083C FD 71         seq ; !
0729   083E C0 00 00      cmp b, 0
0730   0841 C6 50 08      je _if15_exit
0731   0844             _if15_TRUE:
0732   0844             ; return v; 
0733   0844                             
0734   0844 FA FF FF      lea d, [bp + -1] ; $v
0735   0847 2A            mov b, [d]
0736   0848 38 00 00      mov c, 0
0737   084B F9            leave
0738   084C 09            ret
0739   084D 0A 50 08      jmp _if15_exit
0740   0850             _if15_exit:
0741   0850             ; if (!is_digit(*x)) 
0742   0850             _if16_cond:
0743   0850                             
0744   0850             ; --- START FUNCTION CALL
0745   0850                             
0746   0850 FA F5 FF      lea d, [bp + -11] ; $x
0747   0853 2A            mov b, [d]
0748   0854 38 00 00      mov c, 0
0749   0857 74            mov d, b
0750   0858 32            mov bl, [d]
0751   0859 A7 00         mov bh, 0
0752   085B 38 00 00      mov c, 0
0753   085E DD            push bl
0754   085F 07 09 6B      call is_digit
0755   0862 51 01 00      add sp, 1
0756   0865             ; --- END FUNCTION CALL
0757   0865 C0 00 00      cmp b, 0
0758   0868 C6 76 08      je _if16_exit
0759   086B             _if16_TRUE:
0760   086B             ; return -1; 
0761   086B                             
0762   086B FD 2E FF FF   mov32 cb, $ffffffff
0762   086F FF FF 
0763   0871 F9            leave
0764   0872 09            ret
0765   0873 0A 76 08      jmp _if16_exit
0766   0876             _if16_exit:
0767   0876             ; v = v + *x++ - '0'; 
0768   0876 FA FF FF      lea d, [bp + -1] ; $v
0769   0879 DA            push d
0770   087A                             
0771   087A FA FF FF      lea d, [bp + -1] ; $v
0772   087D 2A            mov b, [d]
0773   087E 38 00 00      mov c, 0
0774   0881             ; --- START TERMS
0775   0881 D7            push a
0776   0882 11            mov a, b
0777   0883 FA F5 FF      lea d, [bp + -11] ; $x
0778   0886 2A            mov b, [d]
0779   0887 38 00 00      mov c, 0
0780   088A FD 77         inc b
0781   088C FA F5 FF      lea d, [bp + -11] ; $x
0782   088F FD 43         mov [d], b
0783   0891 FD 7D         dec b
0784   0893 74            mov d, b
0785   0894 32            mov bl, [d]
0786   0895 A7 00         mov bh, 0
0787   0897 38 00 00      mov c, 0
0788   089A 56            add b, a
0789   089B 11            mov a, b
0790   089C FD 2E 30 00   mov32 cb, $00000030
0790   08A0 00 00 
0791   08A2 60            sub a, b
0792   08A3 27            mov b, a
0793   08A4 E4            pop a
0794   08A5             ; --- END TERMS
0795   08A5 E7            pop d
0796   08A6 FD 43         mov [d], b
0797   08A8             ; return v; 
0798   08A8                             
0799   08A8 FA FF FF      lea d, [bp + -1] ; $v
0800   08AB 2A            mov b, [d]
0801   08AC 38 00 00      mov c, 0
0802   08AF F9            leave
0803   08B0 09            ret
0804   08B1             
0805   08B1             input_int:
0806   08B1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0807   08B4             ; char x[8]; 
0808   08B4 52 08 00      sub sp, 8
0809   08B7             ; input(x, 8); 
0810   08B7                             
0811   08B7             ; --- START FUNCTION CALL
0812   08B7                             
0813   08B7 FD 2E 08 00   mov32 cb, $00000008
0813   08BB 00 00 
0814   08BD DD            push bl
0815   08BE                             
0816   08BE FA F9 FF      lea d, [bp + -7] ; $x
0817   08C1 2D            mov b, d
0818   08C2 38 00 00      mov c, 0
0819   08C5 FD AB         swp b
0820   08C7 D8            push b
0821   08C8 07 83 05      call input
0822   08CB 51 03 00      add sp, 3
0823   08CE             ; --- END FUNCTION CALL
0824   08CE             ; if (!is_digit(*x)) 
0825   08CE             _if17_cond:
0826   08CE                             
0827   08CE             ; --- START FUNCTION CALL
0828   08CE                             
0829   08CE FA F9 FF      lea d, [bp + -7] ; $x
0830   08D1 2D            mov b, d
0831   08D2 38 00 00      mov c, 0
0832   08D5 74            mov d, b
0833   08D6 32            mov bl, [d]
0834   08D7 A7 00         mov bh, 0
0835   08D9 38 00 00      mov c, 0
0836   08DC DD            push bl
0837   08DD 07 09 6B      call is_digit
0838   08E0 51 01 00      add sp, 1
0839   08E3             ; --- END FUNCTION CALL
0840   08E3 C0 00 00      cmp b, 0
0841   08E6 C6 F4 08      je _if17_exit
0842   08E9             _if17_TRUE:
0843   08E9             ; return -1; 
0844   08E9                             
0845   08E9 FD 2E FF FF   mov32 cb, $ffffffff
0845   08ED FF FF 
0846   08EF F9            leave
0847   08F0 09            ret
0848   08F1 0A F4 08      jmp _if17_exit
0849   08F4             _if17_exit:
0850   08F4             ; return atoi(x); 
0851   08F4                             
0852   08F4             ; --- START FUNCTION CALL
0853   08F4                             
0854   08F4 FA F9 FF      lea d, [bp + -7] ; $x
0855   08F7 2D            mov b, d
0856   08F8 38 00 00      mov c, 0
0857   08FB FD AB         swp b
0858   08FD D8            push b
0859   08FE 07 6E 6B      call atoi
0860   0901 51 02 00      add sp, 2
0861   0904             ; --- END FUNCTION CALL
0862   0904 F9            leave
0863   0905 09            ret
0864   0906             
0865   0906             print100:
0866   0906 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0867   0909             ; static char buf[16]; 
0868   0909 52 10 00      sub sp, 16
0869   090C             ; char *p; 
0870   090C 52 02 00      sub sp, 2
0871   090F             ; *p = buf; 
0872   090F FA FF FF      lea d, [bp + -1] ; $p
0873   0912 2A            mov b, [d]
0874   0913 38 00 00      mov c, 0
0875   0916 D8            push b
0876   0917                             
0877   0917 3B 31 70      mov d, st_print100_buf_dt ; static buf
0878   091A 2D            mov b, d
0879   091B 38 00 00      mov c, 0
0880   091E E7            pop d
0881   091F FD 3E         mov [d], bl
0882   0921             ; if (v < 0) { 
0883   0921             _if18_cond:
0884   0921                             
0885   0921 FA 05 00      lea d, [bp + 5] ; $v
0886   0924 2A            mov b, [d]
0887   0925 38 00 00      mov c, 0
0888   0928             ; --- START RELATIONAL
0889   0928 D7            push a
0890   0929 11            mov a, b
0891   092A FD 2E 00 00   mov32 cb, $00000000
0891   092E 00 00 
0892   0930 B0            cmp a, b
0893   0931 FD 73         slt ; < (signed)
0894   0933 E4            pop a
0895   0934             ; --- END RELATIONAL
0896   0934 C0 00 00      cmp b, 0
0897   0937 C6 67 09      je _if18_exit
0898   093A             _if18_TRUE:
0899   093A             ; v = -v; 
0900   093A FA 05 00      lea d, [bp + 5] ; $v
0901   093D DA            push d
0902   093E                             
0903   093E FA 05 00      lea d, [bp + 5] ; $v
0904   0941 2A            mov b, [d]
0905   0942 38 00 00      mov c, 0
0906   0945 FD 97         neg b
0907   0947 E7            pop d
0908   0948 FD 43         mov [d], b
0909   094A             ; *p++ = '-'; 
0910   094A FA FF FF      lea d, [bp + -1] ; $p
0911   094D 2A            mov b, [d]
0912   094E 38 00 00      mov c, 0
0913   0951 FD 77         inc b
0914   0953 FA FF FF      lea d, [bp + -1] ; $p
0915   0956 FD 43         mov [d], b
0916   0958 FD 7D         dec b
0917   095A D8            push b
0918   095B                             
0919   095B FD 2E 2D 00   mov32 cb, $0000002d
0919   095F 00 00 
0920   0961 E7            pop d
0921   0962 FD 3E         mov [d], bl
0922   0964 0A 67 09      jmp _if18_exit
0923   0967             _if18_exit:
0924   0967             ; return buf; 
0925   0967                             
0926   0967 3B 31 70      mov d, st_print100_buf_dt ; static buf
0927   096A 2D            mov b, d
0928   096B 38 00 00      mov c, 0
0929   096E F9            leave
0930   096F 09            ret
0931   0970             
0932   0970             inoperable:
0933   0970 F8 00 00      enter 0 ; (push bp; mov bp, sp)
0934   0973             ; if (damage[u] < 0) { 
0935   0973             _if19_cond:
0936   0973                             
0937   0973 3B 44 6E      mov d, _damage_data ; $damage
0938   0976 D7            push a
0939   0977 DA            push d
0940   0978                             
0941   0978 FA 05 00      lea d, [bp + 5] ; $u
0942   097B 32            mov bl, [d]
0943   097C A7 00         mov bh, 0
0944   097E 38 00 00      mov c, 0
0945   0981 E7            pop d
0946   0982 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
0947   0986 E4            pop a
0948   0987 2A            mov b, [d]
0949   0988 38 00 00      mov c, 0
0950   098B             ; --- START RELATIONAL
0951   098B D7            push a
0952   098C 11            mov a, b
0953   098D FD 2E 00 00   mov32 cb, $00000000
0953   0991 00 00 
0954   0993 B0            cmp a, b
0955   0994 FD 73         slt ; < (signed)
0956   0996 E4            pop a
0957   0997             ; --- END RELATIONAL
0958   0997 C0 00 00      cmp b, 0
0959   099A C6 F0 09      je _if19_exit
0960   099D             _if19_TRUE:
0961   099D             ; printf("%s %s inoperable.\n", 
0962   099D                             
0963   099D             ; --- START FUNCTION CALL
0964   099D             _ternary20_cond:
0965   099D FA 05 00      lea d, [bp + 5] ; $u
0966   09A0 32            mov bl, [d]
0967   09A1 A7 00         mov bh, 0
0968   09A3 38 00 00      mov c, 0
0969   09A6             ; --- START RELATIONAL
0970   09A6 D7            push a
0971   09A7 11            mov a, b
0972   09A8 FD 2E 05 00   mov32 cb, $00000005
0972   09AC 00 00 
0973   09AE B0            cmp a, b
0974   09AF FD 71         seq ; ==
0975   09B1 E4            pop a
0976   09B2             ; --- END RELATIONAL
0977   09B2 C0 00 00      cmp b, 0
0978   09B5 C6 BE 09      je _ternary20_FALSE
0979   09B8             _ternary20_TRUE:
0980   09B8                             
0981   09B8 26 69 71      mov b, _s30 ; "are"
0982   09BB 0A C1 09      jmp _ternary20_exit
0983   09BE             _ternary20_FALSE:
0984   09BE                             
0985   09BE 26 6D 71      mov b, _s31 ; "is"
0986   09C1             _ternary20_exit:
0987   09C1 FD AB         swp b
0988   09C3 D8            push b
0989   09C4                             
0990   09C4             ; --- START FUNCTION CALL
0991   09C4                             
0992   09C4 FA 05 00      lea d, [bp + 5] ; $u
0993   09C7 32            mov bl, [d]
0994   09C8 A7 00         mov bh, 0
0995   09CA 38 00 00      mov c, 0
0996   09CD FD AB         swp b
0997   09CF D8            push b
0998   09D0 07 40 59      call get_device_name
0999   09D3 51 02 00      add sp, 2
1000   09D6             ; --- END FUNCTION CALL
1001   09D6 FD AB         swp b
1002   09D8 D8            push b
1003   09D9                             
1004   09D9 26 70 71      mov b, _s32 ; "%s %s inoperable.\n"
1005   09DC FD AB         swp b
1006   09DE D8            push b
1007   09DF 07 4F 60      call printf
1008   09E2 51 06 00      add sp, 6
1009   09E5             ; --- END FUNCTION CALL
1010   09E5             ; return 1; 
1011   09E5                             
1012   09E5 FD 2E 01 00   mov32 cb, $00000001
1012   09E9 00 00 
1013   09EB F9            leave
1014   09EC 09            ret
1015   09ED 0A F0 09      jmp _if19_exit
1016   09F0             _if19_exit:
1017   09F0             ; return 0; 
1018   09F0                             
1019   09F0 FD 2E 00 00   mov32 cb, $00000000
1019   09F4 00 00 
1020   09F6 F9            leave
1021   09F7 09            ret
1022   09F8             
1023   09F8             intro:
1024   09F8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
1025   09FB             ; showfile("startrek.intro"); 
1026   09FB                             
1027   09FB             ; --- START FUNCTION CALL
1028   09FB                             
1029   09FB 26 83 71      mov b, _s33 ; "startrek.intro"
1030   09FE FD AB         swp b
1031   0A00 D8            push b
1032   0A01 07 F1 5D      call showfile
1033   0A04 51 02 00      add sp, 2
1034   0A07             ; --- END FUNCTION CALL
1035   0A07             ; if (yesno()) 
1036   0A07             _if21_cond:
1037   0A07                             
1038   0A07             ; --- START FUNCTION CALL
1039   0A07 07 25 06      call yesno
1040   0A0A C0 00 00      cmp b, 0
1041   0A0D C6 1F 0A      je _if21_exit
1042   0A10             _if21_TRUE:
1043   0A10             ; showfile("startrek.doc"); 
1044   0A10                             
1045   0A10             ; --- START FUNCTION CALL
1046   0A10                             
1047   0A10 26 92 71      mov b, _s34 ; "startrek.doc"
1048   0A13 FD AB         swp b
1049   0A15 D8            push b
1050   0A16 07 F1 5D      call showfile
1051   0A19 51 02 00      add sp, 2
1052   0A1C             ; --- END FUNCTION CALL
1053   0A1C 0A 1F 0A      jmp _if21_exit
1054   0A1F             _if21_exit:
1055   0A1F             ; showfile("startrek.logo"); 
1056   0A1F                             
1057   0A1F             ; --- START FUNCTION CALL
1058   0A1F                             
1059   0A1F 26 9F 71      mov b, _s35 ; "startrek.logo"
1060   0A22 FD AB         swp b
1061   0A24 D8            push b
1062   0A25 07 F1 5D      call showfile
1063   0A28 51 02 00      add sp, 2
1064   0A2B             ; --- END FUNCTION CALL
1065   0A2B             ; stardate = TO_FIXED((get_rand(20) + 20) * 100); 
1066   0A2B 3B 5C 6E      mov d, _stardate ; $stardate
1067   0A2E DA            push d
1068   0A2F                             
1069   0A2F             ; --- START FUNCTION CALL
1070   0A2F                             
1071   0A2F                             
1072   0A2F             ; --- START FUNCTION CALL
1073   0A2F                             
1074   0A2F FD 2E 14 00   mov32 cb, $00000014
1074   0A33 00 00 
1075   0A35 FD AB         swp b
1076   0A37 D8            push b
1077   0A38 07 FF 04      call get_rand
1078   0A3B 51 02 00      add sp, 2
1079   0A3E             ; --- END FUNCTION CALL
1080   0A3E             ; --- START TERMS
1081   0A3E D7            push a
1082   0A3F 11            mov a, b
1083   0A40 FD 2E 14 00   mov32 cb, $00000014
1083   0A44 00 00 
1084   0A46 56            add b, a
1085   0A47 E4            pop a
1086   0A48             ; --- END TERMS
1087   0A48             ; --- START FACTORS
1088   0A48 D7            push a
1089   0A49 FD D8         push g
1090   0A4B 11            mov a, b
1091   0A4C FD 7A         mov g, c
1092   0A4E FD 2E 64 00   mov32 cb, $00000064
1092   0A52 00 00 
1093   0A54 D7            push a     ; save left operand
1094   0A55 8E            xor a, b   ; xor sign bits
1095   0A56 FD AA         swp a      ; swap bytes
1096   0A58 83            mov cl, al ; save result of xor into 'dl'
1097   0A59 E4            pop a      ; restore left side operator
1098   0A5A DF            push cl    ; save result of xor above
1099   0A5B FD AA         swp a  
1100   0A5D 93 80         test al, $80  
1101   0A5F FD AA         swp a  
1102   0A61 C6 66 0A      jz skip_invert_a_22  
1103   0A64 FD 95         neg a 
1104   0A66             skip_invert_a_22:   
1105   0A66 FD AB         swp b
1106   0A68 FD 93 80      test bl, $80  
1107   0A6B FD AB         swp b
1108   0A6D C6 72 0A      jz skip_invert_b_22  
1109   0A70 FD 97         neg b 
1110   0A72             skip_invert_b_22:   
1111   0A72 AC            mul a, b ; *
1112   0A73 FD 78         mov g, a
1113   0A75 11            mov a, b
1114   0A76 EA            pop bl
1115   0A77 FD 93 80      test bl, $80
1116   0A7A C6 87 0A      jz _same_signs_22
1117   0A7D 2F            mov bl, al
1118   0A7E 95            not a
1119   0A7F FD 97         neg b
1120   0A81 5B 00 00      adc a, 0
1121   0A84 FD 78         mov g, a
1122   0A86 11            mov a, b
1123   0A87             _same_signs_22:
1124   0A87 FD 38         mov c, g
1125   0A89 27            mov b, a
1126   0A8A FD F1         pop g
1127   0A8C E4            pop a
1128   0A8D             ; --- END FACTORS
1129   0A8D FD AB         swp b
1130   0A8F D8            push b
1131   0A90 07 17 04      call TO_FIXED
1132   0A93 51 02 00      add sp, 2
1133   0A96             ; --- END FUNCTION CALL
1134   0A96 E7            pop d
1135   0A97 FD 43         mov [d], b
1136   0A99 F9            leave
1137   0A9A 09            ret
1138   0A9B             
1139   0A9B             new_game:
1140   0A9B F8 00 00      enter 0 ; (push bp; mov bp, sp)
1141   0A9E             ; char cmd[4]; 
1142   0A9E 52 04 00      sub sp, 4
1143   0AA1             ; initialize(); 
1144   0AA1                             
1145   0AA1             ; --- START FUNCTION CALL
1146   0AA1 07 5A 0D      call initialize
1147   0AA4             ; new_quadrant(); 
1148   0AA4                             
1149   0AA4             ; --- START FUNCTION CALL
1150   0AA4 07 97 12      call new_quadrant
1151   0AA7             ; short_range_scan(); 
1152   0AA7                             
1153   0AA7             ; --- START FUNCTION CALL
1154   0AA7 07 77 25      call short_range_scan
1155   0AAA             ; while (1) { 
1156   0AAA             _while23_cond:
1157   0AAA                             
1158   0AAA FD 2E 01 00   mov32 cb, $00000001
1158   0AAE 00 00 
1159   0AB0 C0 00 00      cmp b, 0
1160   0AB3 C6 58 0D      je _while23_exit
1161   0AB6             _while23_block:
1162   0AB6             ; if (shield + energy <= 10 && (energy < 10 || damage[7] < 0)) { 
1163   0AB6             _if24_cond:
1164   0AB6                             
1165   0AB6 3B 3D 6E      mov d, _shield ; $shield
1166   0AB9 2A            mov b, [d]
1167   0ABA 38 00 00      mov c, 0
1168   0ABD             ; --- START TERMS
1169   0ABD D7            push a
1170   0ABE 11            mov a, b
1171   0ABF 3B 82 6D      mov d, _energy ; $energy
1172   0AC2 2A            mov b, [d]
1173   0AC3 38 00 00      mov c, 0
1174   0AC6 56            add b, a
1175   0AC7 E4            pop a
1176   0AC8             ; --- END TERMS
1177   0AC8             ; --- START RELATIONAL
1178   0AC8 D7            push a
1179   0AC9 11            mov a, b
1180   0ACA FD 2E 0A 00   mov32 cb, $0000000a
1180   0ACE 00 00 
1181   0AD0 B0            cmp a, b
1182   0AD1 FD 74         sle ; <= (signed)
1183   0AD3 E4            pop a
1184   0AD4             ; --- END RELATIONAL
1185   0AD4             ; --- START LOGICAL AND
1186   0AD4 D7            push a
1187   0AD5 11            mov a, b
1188   0AD6                             
1189   0AD6 3B 82 6D      mov d, _energy ; $energy
1190   0AD9 2A            mov b, [d]
1191   0ADA 38 00 00      mov c, 0
1192   0ADD             ; --- START RELATIONAL
1193   0ADD D7            push a
1194   0ADE 11            mov a, b
1195   0ADF FD 2E 0A 00   mov32 cb, $0000000a
1195   0AE3 00 00 
1196   0AE5 B0            cmp a, b
1197   0AE6 FD 73         slt ; < (signed)
1198   0AE8 E4            pop a
1199   0AE9             ; --- END RELATIONAL
1200   0AE9             ; --- START LOGICAL OR
1201   0AE9 D7            push a
1202   0AEA 11            mov a, b
1203   0AEB 3B 44 6E      mov d, _damage_data ; $damage
1204   0AEE D7            push a
1205   0AEF DA            push d
1206   0AF0                             
1207   0AF0 FD 2E 07 00   mov32 cb, $00000007
1207   0AF4 00 00 
1208   0AF6 E7            pop d
1209   0AF7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1210   0AFB E4            pop a
1211   0AFC 2A            mov b, [d]
1212   0AFD 38 00 00      mov c, 0
1213   0B00             ; --- START RELATIONAL
1214   0B00 D7            push a
1215   0B01 11            mov a, b
1216   0B02 FD 2E 00 00   mov32 cb, $00000000
1216   0B06 00 00 
1217   0B08 B0            cmp a, b
1218   0B09 FD 73         slt ; < (signed)
1219   0B0B E4            pop a
1220   0B0C             ; --- END RELATIONAL
1221   0B0C FD A8         sor a, b ; ||
1222   0B0E E4            pop a
1223   0B0F             ; --- END LOGICAL OR
1224   0B0F FD A7         sand a, b
1225   0B11 E4            pop a
1226   0B12             ; --- END LOGICAL AND
1227   0B12 C0 00 00      cmp b, 0
1228   0B15 C6 2A 0B      je _if24_exit
1229   0B18             _if24_TRUE:
1230   0B18             ; showfile("startrek.fatal"); 
1231   0B18                             
1232   0B18             ; --- START FUNCTION CALL
1233   0B18                             
1234   0B18 26 AD 71      mov b, _s36 ; "startrek.fatal"
1235   0B1B FD AB         swp b
1236   0B1D D8            push b
1237   0B1E 07 F1 5D      call showfile
1238   0B21 51 02 00      add sp, 2
1239   0B24             ; --- END FUNCTION CALL
1240   0B24             ; end_of_time(); 
1241   0B24                             
1242   0B24             ; --- START FUNCTION CALL
1243   0B24 07 CF 4E      call end_of_time
1244   0B27 0A 2A 0B      jmp _if24_exit
1245   0B2A             _if24_exit:
1246   0B2A             ; puts("Command? "); 
1247   0B2A                             
1248   0B2A             ; --- START FUNCTION CALL
1249   0B2A                             
1250   0B2A 26 BC 71      mov b, _s37 ; "Command? "
1251   0B2D FD AB         swp b
1252   0B2F D8            push b
1253   0B30 07 5C 69      call puts
1254   0B33 51 02 00      add sp, 2
1255   0B36             ; --- END FUNCTION CALL
1256   0B36             ; input(cmd, 4); 
1257   0B36                             
1258   0B36             ; --- START FUNCTION CALL
1259   0B36                             
1260   0B36 FD 2E 04 00   mov32 cb, $00000004
1260   0B3A 00 00 
1261   0B3C DD            push bl
1262   0B3D                             
1263   0B3D FA FD FF      lea d, [bp + -3] ; $cmd
1264   0B40 2D            mov b, d
1265   0B41 38 00 00      mov c, 0
1266   0B44 FD AB         swp b
1267   0B46 D8            push b
1268   0B47 07 83 05      call input
1269   0B4A 51 03 00      add sp, 3
1270   0B4D             ; --- END FUNCTION CALL
1271   0B4D             ; putchar('\n'); 
1272   0B4D                             
1273   0B4D             ; --- START FUNCTION CALL
1274   0B4D                             
1275   0B4D FD 2E 0A 00   mov32 cb, $0000000a
1275   0B51 00 00 
1276   0B53 DD            push bl
1277   0B54 07 D1 64      call putchar
1278   0B57 51 01 00      add sp, 1
1279   0B5A             ; --- END FUNCTION CALL
1280   0B5A             ; if (!strncmp(cmd, "nav", 3)) 
1281   0B5A             _if25_cond:
1282   0B5A                             
1283   0B5A             ; --- START FUNCTION CALL
1284   0B5A                             
1285   0B5A FD 2E 03 00   mov32 cb, $00000003
1285   0B5E 00 00 
1286   0B60 FD AB         swp b
1287   0B62 D8            push b
1288   0B63                             
1289   0B63 26 C6 71      mov b, _s38 ; "nav"
1290   0B66 FD AB         swp b
1291   0B68 D8            push b
1292   0B69                             
1293   0B69 FA FD FF      lea d, [bp + -3] ; $cmd
1294   0B6C 2D            mov b, d
1295   0B6D 38 00 00      mov c, 0
1296   0B70 FD AB         swp b
1297   0B72 D8            push b
1298   0B73 07 E2 69      call strncmp
1299   0B76 51 06 00      add sp, 6
1300   0B79             ; --- END FUNCTION CALL
1301   0B79 C0 00 00      cmp b, 0
1302   0B7C C6 85 0B      je _if25_else
1303   0B7F             _if25_TRUE:
1304   0B7F             ; course_control(); 
1305   0B7F                             
1306   0B7F             ; --- START FUNCTION CALL
1307   0B7F 07 0B 17      call course_control
1308   0B82 0A 55 0D      jmp _if25_exit
1309   0B85             _if25_else:
1310   0B85             ; if (!strncmp(cmd, "srs", 3)) 
1311   0B85             _if26_cond:
1312   0B85                             
1313   0B85             ; --- START FUNCTION CALL
1314   0B85                             
1315   0B85 FD 2E 03 00   mov32 cb, $00000003
1315   0B89 00 00 
1316   0B8B FD AB         swp b
1317   0B8D D8            push b
1318   0B8E                             
1319   0B8E 26 CA 71      mov b, _s39 ; "srs"
1320   0B91 FD AB         swp b
1321   0B93 D8            push b
1322   0B94                             
1323   0B94 FA FD FF      lea d, [bp + -3] ; $cmd
1324   0B97 2D            mov b, d
1325   0B98 38 00 00      mov c, 0
1326   0B9B FD AB         swp b
1327   0B9D D8            push b
1328   0B9E 07 E2 69      call strncmp
1329   0BA1 51 06 00      add sp, 6
1330   0BA4             ; --- END FUNCTION CALL
1331   0BA4 C0 00 00      cmp b, 0
1332   0BA7 C6 B0 0B      je _if26_else
1333   0BAA             _if26_TRUE:
1334   0BAA             ; short_range_scan(); 
1335   0BAA                             
1336   0BAA             ; --- START FUNCTION CALL
1337   0BAA 07 77 25      call short_range_scan
1338   0BAD 0A 55 0D      jmp _if26_exit
1339   0BB0             _if26_else:
1340   0BB0             ; if (!strncmp(cmd, "lrs", 3)) 
1341   0BB0             _if27_cond:
1342   0BB0                             
1343   0BB0             ; --- START FUNCTION CALL
1344   0BB0                             
1345   0BB0 FD 2E 03 00   mov32 cb, $00000003
1345   0BB4 00 00 
1346   0BB6 FD AB         swp b
1347   0BB8 D8            push b
1348   0BB9                             
1349   0BB9 26 CE 71      mov b, _s40 ; "lrs"
1350   0BBC FD AB         swp b
1351   0BBE D8            push b
1352   0BBF                             
1353   0BBF FA FD FF      lea d, [bp + -3] ; $cmd
1354   0BC2 2D            mov b, d
1355   0BC3 38 00 00      mov c, 0
1356   0BC6 FD AB         swp b
1357   0BC8 D8            push b
1358   0BC9 07 E2 69      call strncmp
1359   0BCC 51 06 00      add sp, 6
1360   0BCF             ; --- END FUNCTION CALL
1361   0BCF C0 00 00      cmp b, 0
1362   0BD2 C6 DB 0B      je _if27_else
1363   0BD5             _if27_TRUE:
1364   0BD5             ; long_range_scan(); 
1365   0BD5                             
1366   0BD5             ; --- START FUNCTION CALL
1367   0BD5 07 21 2B      call long_range_scan
1368   0BD8 0A 55 0D      jmp _if27_exit
1369   0BDB             _if27_else:
1370   0BDB             ; if (!strncmp(cmd, "pha", 3)) 
1371   0BDB             _if28_cond:
1372   0BDB                             
1373   0BDB             ; --- START FUNCTION CALL
1374   0BDB                             
1375   0BDB FD 2E 03 00   mov32 cb, $00000003
1375   0BDF 00 00 
1376   0BE1 FD AB         swp b
1377   0BE3 D8            push b
1378   0BE4                             
1379   0BE4 26 D2 71      mov b, _s41 ; "pha"
1380   0BE7 FD AB         swp b
1381   0BE9 D8            push b
1382   0BEA                             
1383   0BEA FA FD FF      lea d, [bp + -3] ; $cmd
1384   0BED 2D            mov b, d
1385   0BEE 38 00 00      mov c, 0
1386   0BF1 FD AB         swp b
1387   0BF3 D8            push b
1388   0BF4 07 E2 69      call strncmp
1389   0BF7 51 06 00      add sp, 6
1390   0BFA             ; --- END FUNCTION CALL
1391   0BFA C0 00 00      cmp b, 0
1392   0BFD C6 06 0C      je _if28_else
1393   0C00             _if28_TRUE:
1394   0C00             ; phaser_control(); 
1395   0C00                             
1396   0C00             ; --- START FUNCTION CALL
1397   0C00 07 C9 2D      call phaser_control
1398   0C03 0A 55 0D      jmp _if28_exit
1399   0C06             _if28_else:
1400   0C06             ; if (!strncmp(cmd, "tor", 3)) 
1401   0C06             _if29_cond:
1402   0C06                             
1403   0C06             ; --- START FUNCTION CALL
1404   0C06                             
1405   0C06 FD 2E 03 00   mov32 cb, $00000003
1405   0C0A 00 00 
1406   0C0C FD AB         swp b
1407   0C0E D8            push b
1408   0C0F                             
1409   0C0F 26 D6 71      mov b, _s42 ; "tor"
1410   0C12 FD AB         swp b
1411   0C14 D8            push b
1412   0C15                             
1413   0C15 FA FD FF      lea d, [bp + -3] ; $cmd
1414   0C18 2D            mov b, d
1415   0C19 38 00 00      mov c, 0
1416   0C1C FD AB         swp b
1417   0C1E D8            push b
1418   0C1F 07 E2 69      call strncmp
1419   0C22 51 06 00      add sp, 6
1420   0C25             ; --- END FUNCTION CALL
1421   0C25 C0 00 00      cmp b, 0
1422   0C28 C6 31 0C      je _if29_else
1423   0C2B             _if29_TRUE:
1424   0C2B             ; photon_torpedoes(); 
1425   0C2B                             
1426   0C2B             ; --- START FUNCTION CALL
1427   0C2B 07 2E 33      call photon_torpedoes
1428   0C2E 0A 55 0D      jmp _if29_exit
1429   0C31             _if29_else:
1430   0C31             ; if (!strncmp(cmd, "shi", 3)) 
1431   0C31             _if30_cond:
1432   0C31                             
1433   0C31             ; --- START FUNCTION CALL
1434   0C31                             
1435   0C31 FD 2E 03 00   mov32 cb, $00000003
1435   0C35 00 00 
1436   0C37 FD AB         swp b
1437   0C39 D8            push b
1438   0C3A                             
1439   0C3A 26 DA 71      mov b, _s43 ; "shi"
1440   0C3D FD AB         swp b
1441   0C3F D8            push b
1442   0C40                             
1443   0C40 FA FD FF      lea d, [bp + -3] ; $cmd
1444   0C43 2D            mov b, d
1445   0C44 38 00 00      mov c, 0
1446   0C47 FD AB         swp b
1447   0C49 D8            push b
1448   0C4A 07 E2 69      call strncmp
1449   0C4D 51 06 00      add sp, 6
1450   0C50             ; --- END FUNCTION CALL
1451   0C50 C0 00 00      cmp b, 0
1452   0C53 C6 5C 0C      je _if30_else
1453   0C56             _if30_TRUE:
1454   0C56             ; shield_control(); 
1455   0C56                             
1456   0C56             ; --- START FUNCTION CALL
1457   0C56 07 BB 3E      call shield_control
1458   0C59 0A 55 0D      jmp _if30_exit
1459   0C5C             _if30_else:
1460   0C5C             ; if (!strncmp(cmd, "dam", 3)) 
1461   0C5C             _if31_cond:
1462   0C5C                             
1463   0C5C             ; --- START FUNCTION CALL
1464   0C5C                             
1465   0C5C FD 2E 03 00   mov32 cb, $00000003
1465   0C60 00 00 
1466   0C62 FD AB         swp b
1467   0C64 D8            push b
1468   0C65                             
1469   0C65 26 DE 71      mov b, _s44 ; "dam"
1470   0C68 FD AB         swp b
1471   0C6A D8            push b
1472   0C6B                             
1473   0C6B FA FD FF      lea d, [bp + -3] ; $cmd
1474   0C6E 2D            mov b, d
1475   0C6F 38 00 00      mov c, 0
1476   0C72 FD AB         swp b
1477   0C74 D8            push b
1478   0C75 07 E2 69      call strncmp
1479   0C78 51 06 00      add sp, 6
1480   0C7B             ; --- END FUNCTION CALL
1481   0C7B C0 00 00      cmp b, 0
1482   0C7E C6 87 0C      je _if31_else
1483   0C81             _if31_TRUE:
1484   0C81             ; damage_control(); 
1485   0C81                             
1486   0C81             ; --- START FUNCTION CALL
1487   0C81 07 D3 3B      call damage_control
1488   0C84 0A 55 0D      jmp _if31_exit
1489   0C87             _if31_else:
1490   0C87             ; if (!strncmp(cmd, "com", 3)) 
1491   0C87             _if32_cond:
1492   0C87                             
1493   0C87             ; --- START FUNCTION CALL
1494   0C87                             
1495   0C87 FD 2E 03 00   mov32 cb, $00000003
1495   0C8B 00 00 
1496   0C8D FD AB         swp b
1497   0C8F D8            push b
1498   0C90                             
1499   0C90 26 E2 71      mov b, _s45 ; "com"
1500   0C93 FD AB         swp b
1501   0C95 D8            push b
1502   0C96                             
1503   0C96 FA FD FF      lea d, [bp + -3] ; $cmd
1504   0C99 2D            mov b, d
1505   0C9A 38 00 00      mov c, 0
1506   0C9D FD AB         swp b
1507   0C9F D8            push b
1508   0CA0 07 E2 69      call strncmp
1509   0CA3 51 06 00      add sp, 6
1510   0CA6             ; --- END FUNCTION CALL
1511   0CA6 C0 00 00      cmp b, 0
1512   0CA9 C6 B2 0C      je _if32_else
1513   0CAC             _if32_TRUE:
1514   0CAC             ; library_computer(); 
1515   0CAC                             
1516   0CAC             ; --- START FUNCTION CALL
1517   0CAC 07 C4 3F      call library_computer
1518   0CAF 0A 55 0D      jmp _if32_exit
1519   0CB2             _if32_else:
1520   0CB2             ; if (!strncmp(cmd, "xxx", 3)) 
1521   0CB2             _if33_cond:
1522   0CB2                             
1523   0CB2             ; --- START FUNCTION CALL
1524   0CB2                             
1525   0CB2 FD 2E 03 00   mov32 cb, $00000003
1525   0CB6 00 00 
1526   0CB8 FD AB         swp b
1527   0CBA D8            push b
1528   0CBB                             
1529   0CBB 26 E6 71      mov b, _s46 ; "xxx"
1530   0CBE FD AB         swp b
1531   0CC0 D8            push b
1532   0CC1                             
1533   0CC1 FA FD FF      lea d, [bp + -3] ; $cmd
1534   0CC4 2D            mov b, d
1535   0CC5 38 00 00      mov c, 0
1536   0CC8 FD AB         swp b
1537   0CCA D8            push b
1538   0CCB 07 E2 69      call strncmp
1539   0CCE 51 06 00      add sp, 6
1540   0CD1             ; --- END FUNCTION CALL
1541   0CD1 C0 00 00      cmp b, 0
1542   0CD4 C6 DD 0C      je _if33_else
1543   0CD7             _if33_TRUE:
1544   0CD7             ; resign_commision(); 
1545   0CD7                             
1546   0CD7             ; --- START FUNCTION CALL
1547   0CD7 07 F6 4E      call resign_commision
1548   0CDA 0A 55 0D      jmp _if33_exit
1549   0CDD             _if33_else:
1550   0CDD             ; puts("Enter one of the following:\n"); 
1551   0CDD                             
1552   0CDD             ; --- START FUNCTION CALL
1553   0CDD                             
1554   0CDD 26 EA 71      mov b, _s47 ; "Enter one of the following:\n"
1555   0CE0 FD AB         swp b
1556   0CE2 D8            push b
1557   0CE3 07 5C 69      call puts
1558   0CE6 51 02 00      add sp, 2
1559   0CE9             ; --- END FUNCTION CALL
1560   0CE9             ; puts("  nav - To Set Course"); 
1561   0CE9                             
1562   0CE9             ; --- START FUNCTION CALL
1563   0CE9                             
1564   0CE9 26 07 72      mov b, _s48 ; "  nav - To Set Course"
1565   0CEC FD AB         swp b
1566   0CEE D8            push b
1567   0CEF 07 5C 69      call puts
1568   0CF2 51 02 00      add sp, 2
1569   0CF5             ; --- END FUNCTION CALL
1570   0CF5             ; puts("  srs - Short Range Sensors"); 
1571   0CF5                             
1572   0CF5             ; --- START FUNCTION CALL
1573   0CF5                             
1574   0CF5 26 1D 72      mov b, _s49 ; "  srs - Short Range Sensors"
1575   0CF8 FD AB         swp b
1576   0CFA D8            push b
1577   0CFB 07 5C 69      call puts
1578   0CFE 51 02 00      add sp, 2
1579   0D01             ; --- END FUNCTION CALL
1580   0D01             ; puts("  lrs - Long Range Sensors"); 
1581   0D01                             
1582   0D01             ; --- START FUNCTION CALL
1583   0D01                             
1584   0D01 26 39 72      mov b, _s50 ; "  lrs - Long Range Sensors"
1585   0D04 FD AB         swp b
1586   0D06 D8            push b
1587   0D07 07 5C 69      call puts
1588   0D0A 51 02 00      add sp, 2
1589   0D0D             ; --- END FUNCTION CALL
1590   0D0D             ; puts("  pha - Phasers"); 
1591   0D0D                             
1592   0D0D             ; --- START FUNCTION CALL
1593   0D0D                             
1594   0D0D 26 54 72      mov b, _s51 ; "  pha - Phasers"
1595   0D10 FD AB         swp b
1596   0D12 D8            push b
1597   0D13 07 5C 69      call puts
1598   0D16 51 02 00      add sp, 2
1599   0D19             ; --- END FUNCTION CALL
1600   0D19             ; puts("  tor - Photon Torpedoes"); 
1601   0D19                             
1602   0D19             ; --- START FUNCTION CALL
1603   0D19                             
1604   0D19 26 64 72      mov b, _s52 ; "  tor - Photon Torpedoes"
1605   0D1C FD AB         swp b
1606   0D1E D8            push b
1607   0D1F 07 5C 69      call puts
1608   0D22 51 02 00      add sp, 2
1609   0D25             ; --- END FUNCTION CALL
1610   0D25             ; puts("  shi - Shield Control"); 
1611   0D25                             
1612   0D25             ; --- START FUNCTION CALL
1613   0D25                             
1614   0D25 26 7D 72      mov b, _s53 ; "  shi - Shield Control"
1615   0D28 FD AB         swp b
1616   0D2A D8            push b
1617   0D2B 07 5C 69      call puts
1618   0D2E 51 02 00      add sp, 2
1619   0D31             ; --- END FUNCTION CALL
1620   0D31             ; puts("  dam - Damage Control"); 
1621   0D31                             
1622   0D31             ; --- START FUNCTION CALL
1623   0D31                             
1624   0D31 26 94 72      mov b, _s54 ; "  dam - Damage Control"
1625   0D34 FD AB         swp b
1626   0D36 D8            push b
1627   0D37 07 5C 69      call puts
1628   0D3A 51 02 00      add sp, 2
1629   0D3D             ; --- END FUNCTION CALL
1630   0D3D             ; puts("  com - Library Computer"); 
1631   0D3D                             
1632   0D3D             ; --- START FUNCTION CALL
1633   0D3D                             
1634   0D3D 26 AB 72      mov b, _s55 ; "  com - Library Computer"
1635   0D40 FD AB         swp b
1636   0D42 D8            push b
1637   0D43 07 5C 69      call puts
1638   0D46 51 02 00      add sp, 2
1639   0D49             ; --- END FUNCTION CALL
1640   0D49             ; puts("  xxx - Resign Command\n"); 
1641   0D49                             
1642   0D49             ; --- START FUNCTION CALL
1643   0D49                             
1644   0D49 26 C4 72      mov b, _s56 ; "  xxx - Resign Command\n"
1645   0D4C FD AB         swp b
1646   0D4E D8            push b
1647   0D4F 07 5C 69      call puts
1648   0D52 51 02 00      add sp, 2
1649   0D55             ; --- END FUNCTION CALL
1650   0D55             _if33_exit:
1651   0D55             _if32_exit:
1652   0D55             _if31_exit:
1653   0D55             _if30_exit:
1654   0D55             _if29_exit:
1655   0D55             _if28_exit:
1656   0D55             _if27_exit:
1657   0D55             _if26_exit:
1658   0D55             _if25_exit:
1659   0D55 0A AA 0A      jmp _while23_cond
1660   0D58             _while23_exit:
1661   0D58 F9            leave
1662   0D59 09            ret
1663   0D5A             
1664   0D5A             initialize:
1665   0D5A F8 00 00      enter 0 ; (push bp; mov bp, sp)
1666   0D5D             ; int i, j; 
1667   0D5D 52 02 00      sub sp, 2
1668   0D60 52 02 00      sub sp, 2
1669   0D63             ; unsigned char yp, xp; 
1670   0D63 52 01 00      sub sp, 1
1671   0D66 52 01 00      sub sp, 1
1672   0D69             ; unsigned char r; 
1673   0D69 52 01 00      sub sp, 1
1674   0D6C             ; time_start = FROM_FIXED(stardate); 
1675   0D6C 3B 40 6E      mov d, _time_start ; $time_start
1676   0D6F DA            push d
1677   0D70                             
1678   0D70             ; --- START FUNCTION CALL
1679   0D70                             
1680   0D70 3B 5C 6E      mov d, _stardate ; $stardate
1681   0D73 2A            mov b, [d]
1682   0D74 38 00 00      mov c, 0
1683   0D77 FD AB         swp b
1684   0D79 D8            push b
1685   0D7A 07 68 04      call FROM_FIXED
1686   0D7D 51 02 00      add sp, 2
1687   0D80             ; --- END FUNCTION CALL
1688   0D80 E7            pop d
1689   0D81 FD 43         mov [d], b
1690   0D83             ; time_up = 25 + get_rand(10); 
1691   0D83 3B 42 6E      mov d, _time_up ; $time_up
1692   0D86 DA            push d
1693   0D87                             
1694   0D87 FD 2E 19 00   mov32 cb, $00000019
1694   0D8B 00 00 
1695   0D8D             ; --- START TERMS
1696   0D8D D7            push a
1697   0D8E 11            mov a, b
1698   0D8F             ; --- START FUNCTION CALL
1699   0D8F                             
1700   0D8F FD 2E 0A 00   mov32 cb, $0000000a
1700   0D93 00 00 
1701   0D95 FD AB         swp b
1702   0D97 D8            push b
1703   0D98 07 FF 04      call get_rand
1704   0D9B 51 02 00      add sp, 2
1705   0D9E             ; --- END FUNCTION CALL
1706   0D9E 56            add b, a
1707   0D9F E4            pop a
1708   0DA0             ; --- END TERMS
1709   0DA0 E7            pop d
1710   0DA1 FD 43         mov [d], b
1711   0DA3             ; docked = 0; 
1712   0DA3 3B 81 6D      mov d, _docked ; $docked
1713   0DA6 DA            push d
1714   0DA7                             
1715   0DA7 FD 2E 00 00   mov32 cb, $00000000
1715   0DAB 00 00 
1716   0DAD E7            pop d
1717   0DAE FD 3E         mov [d], bl
1718   0DB0             ; energy = energy0; 
1719   0DB0 3B 82 6D      mov d, _energy ; $energy
1720   0DB3 DA            push d
1721   0DB4                             
1722   0DB4 3B 84 6D      mov d, _energy0 ; $energy0
1723   0DB7 2A            mov b, [d]
1724   0DB8 38 00 00      mov c, 0
1725   0DBB E7            pop d
1726   0DBC FD 43         mov [d], b
1727   0DBE             ; torps = torps0; 
1728   0DBE 3B 37 6E      mov d, _torps ; $torps
1729   0DC1 DA            push d
1730   0DC2                             
1731   0DC2 3B 38 6E      mov d, _torps0 ; $torps0
1732   0DC5 32            mov bl, [d]
1733   0DC6 A7 00         mov bh, 0
1734   0DC8 38 00 00      mov c, 0
1735   0DCB E7            pop d
1736   0DCC FD 3E         mov [d], bl
1737   0DCE             ; shield = 0; 
1738   0DCE 3B 3D 6E      mov d, _shield ; $shield
1739   0DD1 DA            push d
1740   0DD2                             
1741   0DD2 FD 2E 00 00   mov32 cb, $00000000
1741   0DD6 00 00 
1742   0DD8 E7            pop d
1743   0DD9 FD 43         mov [d], b
1744   0DDB             ; quad_y = rand8(); 
1745   0DDB 3B 39 6E      mov d, _quad_y ; $quad_y
1746   0DDE DA            push d
1747   0DDF                             
1748   0DDF             ; --- START FUNCTION CALL
1749   0DDF 07 6F 05      call rand8
1750   0DE2 E7            pop d
1751   0DE3 FD 43         mov [d], b
1752   0DE5             ; quad_x = rand8(); 
1753   0DE5 3B 3B 6E      mov d, _quad_x ; $quad_x
1754   0DE8 DA            push d
1755   0DE9                             
1756   0DE9             ; --- START FUNCTION CALL
1757   0DE9 07 6F 05      call rand8
1758   0DEC E7            pop d
1759   0DED FD 43         mov [d], b
1760   0DEF             ; ship_y = TO_FIXED00(rand8()); 
1761   0DEF 3B 58 6E      mov d, _ship_y ; $ship_y
1762   0DF2 DA            push d
1763   0DF3                             
1764   0DF3             ; --- START FUNCTION CALL
1765   0DF3                             
1766   0DF3             ; --- START FUNCTION CALL
1767   0DF3 07 6F 05      call rand8
1768   0DF6 FD AB         swp b
1769   0DF8 D8            push b
1770   0DF9 07 8B 04      call TO_FIXED00
1771   0DFC 51 02 00      add sp, 2
1772   0DFF             ; --- END FUNCTION CALL
1773   0DFF E7            pop d
1774   0E00 FD 43         mov [d], b
1775   0E02             ; ship_x = TO_FIXED00(rand8()); 
1776   0E02 3B 5A 6E      mov d, _ship_x ; $ship_x
1777   0E05 DA            push d
1778   0E06                             
1779   0E06             ; --- START FUNCTION CALL
1780   0E06                             
1781   0E06             ; --- START FUNCTION CALL
1782   0E06 07 6F 05      call rand8
1783   0E09 FD AB         swp b
1784   0E0B D8            push b
1785   0E0C 07 8B 04      call TO_FIXED00
1786   0E0F 51 02 00      add sp, 2
1787   0E12             ; --- END FUNCTION CALL
1788   0E12 E7            pop d
1789   0E13 FD 43         mov [d], b
1790   0E15             ; for (i = 1; i <= 8; i++) 
1791   0E15             _for34_init:
1792   0E15 FA FF FF      lea d, [bp + -1] ; $i
1793   0E18 DA            push d
1794   0E19                             
1795   0E19 FD 2E 01 00   mov32 cb, $00000001
1795   0E1D 00 00 
1796   0E1F E7            pop d
1797   0E20 FD 43         mov [d], b
1798   0E22             _for34_cond:
1799   0E22                             
1800   0E22 FA FF FF      lea d, [bp + -1] ; $i
1801   0E25 2A            mov b, [d]
1802   0E26 38 00 00      mov c, 0
1803   0E29             ; --- START RELATIONAL
1804   0E29 D7            push a
1805   0E2A 11            mov a, b
1806   0E2B FD 2E 08 00   mov32 cb, $00000008
1806   0E2F 00 00 
1807   0E31 B0            cmp a, b
1808   0E32 FD 74         sle ; <= (signed)
1809   0E34 E4            pop a
1810   0E35             ; --- END RELATIONAL
1811   0E35 C0 00 00      cmp b, 0
1812   0E38 C6 6A 0E      je _for34_exit
1813   0E3B             _for34_block:
1814   0E3B             ; damage[i] = 0; 
1815   0E3B 3B 44 6E      mov d, _damage_data ; $damage
1816   0E3E D7            push a
1817   0E3F DA            push d
1818   0E40                             
1819   0E40 FA FF FF      lea d, [bp + -1] ; $i
1820   0E43 2A            mov b, [d]
1821   0E44 38 00 00      mov c, 0
1822   0E47 E7            pop d
1823   0E48 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
1824   0E4C E4            pop a
1825   0E4D DA            push d
1826   0E4E                             
1827   0E4E FD 2E 00 00   mov32 cb, $00000000
1827   0E52 00 00 
1828   0E54 E7            pop d
1829   0E55 FD 43         mov [d], b
1830   0E57             _for34_update:
1831   0E57                             
1832   0E57 FA FF FF      lea d, [bp + -1] ; $i
1833   0E5A 2A            mov b, [d]
1834   0E5B 38 00 00      mov c, 0
1835   0E5E 11            mov a, b
1836   0E5F FD 77         inc b
1837   0E61 FA FF FF      lea d, [bp + -1] ; $i
1838   0E64 FD 43         mov [d], b
1839   0E66 27            mov b, a
1840   0E67 0A 22 0E      jmp _for34_cond
1841   0E6A             _for34_exit:
1842   0E6A             ; for (i = 1; i <= 8; i++) { 
1843   0E6A             _for35_init:
1844   0E6A FA FF FF      lea d, [bp + -1] ; $i
1845   0E6D DA            push d
1846   0E6E                             
1847   0E6E FD 2E 01 00   mov32 cb, $00000001
1847   0E72 00 00 
1848   0E74 E7            pop d
1849   0E75 FD 43         mov [d], b
1850   0E77             _for35_cond:
1851   0E77                             
1852   0E77 FA FF FF      lea d, [bp + -1] ; $i
1853   0E7A 2A            mov b, [d]
1854   0E7B 38 00 00      mov c, 0
1855   0E7E             ; --- START RELATIONAL
1856   0E7E D7            push a
1857   0E7F 11            mov a, b
1858   0E80 FD 2E 08 00   mov32 cb, $00000008
1858   0E84 00 00 
1859   0E86 B0            cmp a, b
1860   0E87 FD 74         sle ; <= (signed)
1861   0E89 E4            pop a
1862   0E8A             ; --- END RELATIONAL
1863   0E8A C0 00 00      cmp b, 0
1864   0E8D C6 50 10      je _for35_exit
1865   0E90             _for35_block:
1866   0E90             ; for (j = 1; j <= 8; j++) { 
1867   0E90             _for36_init:
1868   0E90 FA FD FF      lea d, [bp + -3] ; $j
1869   0E93 DA            push d
1870   0E94                             
1871   0E94 FD 2E 01 00   mov32 cb, $00000001
1871   0E98 00 00 
1872   0E9A E7            pop d
1873   0E9B FD 43         mov [d], b
1874   0E9D             _for36_cond:
1875   0E9D                             
1876   0E9D FA FD FF      lea d, [bp + -3] ; $j
1877   0EA0 2A            mov b, [d]
1878   0EA1 38 00 00      mov c, 0
1879   0EA4             ; --- START RELATIONAL
1880   0EA4 D7            push a
1881   0EA5 11            mov a, b
1882   0EA6 FD 2E 08 00   mov32 cb, $00000008
1882   0EAA 00 00 
1883   0EAC B0            cmp a, b
1884   0EAD FD 74         sle ; <= (signed)
1885   0EAF E4            pop a
1886   0EB0             ; --- END RELATIONAL
1887   0EB0 C0 00 00      cmp b, 0
1888   0EB3 C6 3D 10      je _for36_exit
1889   0EB6             _for36_block:
1890   0EB6             ; r = get_rand(100); 
1891   0EB6 FA FA FF      lea d, [bp + -6] ; $r
1892   0EB9 DA            push d
1893   0EBA                             
1894   0EBA             ; --- START FUNCTION CALL
1895   0EBA                             
1896   0EBA FD 2E 64 00   mov32 cb, $00000064
1896   0EBE 00 00 
1897   0EC0 FD AB         swp b
1898   0EC2 D8            push b
1899   0EC3 07 FF 04      call get_rand
1900   0EC6 51 02 00      add sp, 2
1901   0EC9             ; --- END FUNCTION CALL
1902   0EC9 E7            pop d
1903   0ECA FD 3E         mov [d], bl
1904   0ECC             ; klingons = 0; 
1905   0ECC 3B 34 6E      mov d, _klingons ; $klingons
1906   0ECF DA            push d
1907   0ED0                             
1908   0ED0 FD 2E 00 00   mov32 cb, $00000000
1908   0ED4 00 00 
1909   0ED6 E7            pop d
1910   0ED7 FD 3E         mov [d], bl
1911   0ED9             ; if (r > 98) 
1912   0ED9             _if37_cond:
1913   0ED9                             
1914   0ED9 FA FA FF      lea d, [bp + -6] ; $r
1915   0EDC 32            mov bl, [d]
1916   0EDD A7 00         mov bh, 0
1917   0EDF 38 00 00      mov c, 0
1918   0EE2             ; --- START RELATIONAL
1919   0EE2 D7            push a
1920   0EE3 11            mov a, b
1921   0EE4 FD 2E 62 00   mov32 cb, $00000062
1921   0EE8 00 00 
1922   0EEA B0            cmp a, b
1923   0EEB FD 81         sgu ; > (unsigned)
1924   0EED E4            pop a
1925   0EEE             ; --- END RELATIONAL
1926   0EEE C0 00 00      cmp b, 0
1927   0EF1 C6 04 0F      je _if37_else
1928   0EF4             _if37_TRUE:
1929   0EF4             ; klingons = 3; 
1930   0EF4 3B 34 6E      mov d, _klingons ; $klingons
1931   0EF7 DA            push d
1932   0EF8                             
1933   0EF8 FD 2E 03 00   mov32 cb, $00000003
1933   0EFC 00 00 
1934   0EFE E7            pop d
1935   0EFF FD 3E         mov [d], bl
1936   0F01 0A 5A 0F      jmp _if37_exit
1937   0F04             _if37_else:
1938   0F04             ; if (r > 95) 
1939   0F04             _if38_cond:
1940   0F04                             
1941   0F04 FA FA FF      lea d, [bp + -6] ; $r
1942   0F07 32            mov bl, [d]
1943   0F08 A7 00         mov bh, 0
1944   0F0A 38 00 00      mov c, 0
1945   0F0D             ; --- START RELATIONAL
1946   0F0D D7            push a
1947   0F0E 11            mov a, b
1948   0F0F FD 2E 5F 00   mov32 cb, $0000005f
1948   0F13 00 00 
1949   0F15 B0            cmp a, b
1950   0F16 FD 81         sgu ; > (unsigned)
1951   0F18 E4            pop a
1952   0F19             ; --- END RELATIONAL
1953   0F19 C0 00 00      cmp b, 0
1954   0F1C C6 2F 0F      je _if38_else
1955   0F1F             _if38_TRUE:
1956   0F1F             ; klingons = 2; 
1957   0F1F 3B 34 6E      mov d, _klingons ; $klingons
1958   0F22 DA            push d
1959   0F23                             
1960   0F23 FD 2E 02 00   mov32 cb, $00000002
1960   0F27 00 00 
1961   0F29 E7            pop d
1962   0F2A FD 3E         mov [d], bl
1963   0F2C 0A 5A 0F      jmp _if38_exit
1964   0F2F             _if38_else:
1965   0F2F             ; if (r > 80) 
1966   0F2F             _if39_cond:
1967   0F2F                             
1968   0F2F FA FA FF      lea d, [bp + -6] ; $r
1969   0F32 32            mov bl, [d]
1970   0F33 A7 00         mov bh, 0
1971   0F35 38 00 00      mov c, 0
1972   0F38             ; --- START RELATIONAL
1973   0F38 D7            push a
1974   0F39 11            mov a, b
1975   0F3A FD 2E 50 00   mov32 cb, $00000050
1975   0F3E 00 00 
1976   0F40 B0            cmp a, b
1977   0F41 FD 81         sgu ; > (unsigned)
1978   0F43 E4            pop a
1979   0F44             ; --- END RELATIONAL
1980   0F44 C0 00 00      cmp b, 0
1981   0F47 C6 5A 0F      je _if39_exit
1982   0F4A             _if39_TRUE:
1983   0F4A             ; klingons = 1; 
1984   0F4A 3B 34 6E      mov d, _klingons ; $klingons
1985   0F4D DA            push d
1986   0F4E                             
1987   0F4E FD 2E 01 00   mov32 cb, $00000001
1987   0F52 00 00 
1988   0F54 E7            pop d
1989   0F55 FD 3E         mov [d], bl
1990   0F57 0A 5A 0F      jmp _if39_exit
1991   0F5A             _if39_exit:
1992   0F5A             _if38_exit:
1993   0F5A             _if37_exit:
1994   0F5A             ; klingons_left = klingons_left + klingons; 
1995   0F5A 3B 36 6E      mov d, _klingons_left ; $klingons_left
1996   0F5D DA            push d
1997   0F5E                             
1998   0F5E 3B 36 6E      mov d, _klingons_left ; $klingons_left
1999   0F61 32            mov bl, [d]
2000   0F62 A7 00         mov bh, 0
2001   0F64 38 00 00      mov c, 0
2002   0F67             ; --- START TERMS
2003   0F67 D7            push a
2004   0F68 11            mov a, b
2005   0F69 3B 34 6E      mov d, _klingons ; $klingons
2006   0F6C 32            mov bl, [d]
2007   0F6D A7 00         mov bh, 0
2008   0F6F 38 00 00      mov c, 0
2009   0F72 56            add b, a
2010   0F73 E4            pop a
2011   0F74             ; --- END TERMS
2012   0F74 E7            pop d
2013   0F75 FD 3E         mov [d], bl
2014   0F77             ; starbases = 0; 
2015   0F77 3B 5D 6D      mov d, _starbases ; $starbases
2016   0F7A DA            push d
2017   0F7B                             
2018   0F7B FD 2E 00 00   mov32 cb, $00000000
2018   0F7F 00 00 
2019   0F81 E7            pop d
2020   0F82 FD 3E         mov [d], bl
2021   0F84             ; if (get_rand(100) > 96) 
2022   0F84             _if40_cond:
2023   0F84                             
2024   0F84             ; --- START FUNCTION CALL
2025   0F84                             
2026   0F84 FD 2E 64 00   mov32 cb, $00000064
2026   0F88 00 00 
2027   0F8A FD AB         swp b
2028   0F8C D8            push b
2029   0F8D 07 FF 04      call get_rand
2030   0F90 51 02 00      add sp, 2
2031   0F93             ; --- END FUNCTION CALL
2032   0F93             ; --- START RELATIONAL
2033   0F93 D7            push a
2034   0F94 11            mov a, b
2035   0F95 FD 2E 60 00   mov32 cb, $00000060
2035   0F99 00 00 
2036   0F9B B0            cmp a, b
2037   0F9C FD 7F         sgt ; >
2038   0F9E E4            pop a
2039   0F9F             ; --- END RELATIONAL
2040   0F9F C0 00 00      cmp b, 0
2041   0FA2 C6 B5 0F      je _if40_exit
2042   0FA5             _if40_TRUE:
2043   0FA5             ; starbases = 1; 
2044   0FA5 3B 5D 6D      mov d, _starbases ; $starbases
2045   0FA8 DA            push d
2046   0FA9                             
2047   0FA9 FD 2E 01 00   mov32 cb, $00000001
2047   0FAD 00 00 
2048   0FAF E7            pop d
2049   0FB0 FD 3E         mov [d], bl
2050   0FB2 0A B5 0F      jmp _if40_exit
2051   0FB5             _if40_exit:
2052   0FB5             ; starbases_left = starbases_left + starbases; 
2053   0FB5 3B 60 6D      mov d, _starbases_left ; $starbases_left
2054   0FB8 DA            push d
2055   0FB9                             
2056   0FB9 3B 60 6D      mov d, _starbases_left ; $starbases_left
2057   0FBC 32            mov bl, [d]
2058   0FBD A7 00         mov bh, 0
2059   0FBF 38 00 00      mov c, 0
2060   0FC2             ; --- START TERMS
2061   0FC2 D7            push a
2062   0FC3 11            mov a, b
2063   0FC4 3B 5D 6D      mov d, _starbases ; $starbases
2064   0FC7 32            mov bl, [d]
2065   0FC8 A7 00         mov bh, 0
2066   0FCA 38 00 00      mov c, 0
2067   0FCD 56            add b, a
2068   0FCE E4            pop a
2069   0FCF             ; --- END TERMS
2070   0FCF E7            pop d
2071   0FD0 FD 3E         mov [d], bl
2072   0FD2             ; map[i][j] = (klingons << 8) + (starbases << 4) + rand8(); 
2073   0FD2 3B 86 6D      mov d, _map_data ; $map
2074   0FD5 D7            push a
2075   0FD6 DA            push d
2076   0FD7                             
2077   0FD7 FA FF FF      lea d, [bp + -1] ; $i
2078   0FDA 2A            mov b, [d]
2079   0FDB 38 00 00      mov c, 0
2080   0FDE E7            pop d
2081   0FDF FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
2082   0FE3 DA            push d
2083   0FE4                             
2084   0FE4 FA FD FF      lea d, [bp + -3] ; $j
2085   0FE7 2A            mov b, [d]
2086   0FE8 38 00 00      mov c, 0
2087   0FEB E7            pop d
2088   0FEC FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2089   0FF0 E4            pop a
2090   0FF1 DA            push d
2091   0FF2                             
2092   0FF2                             
2093   0FF2 3B 34 6E      mov d, _klingons ; $klingons
2094   0FF5 32            mov bl, [d]
2095   0FF6 A7 00         mov bh, 0
2096   0FF8 38 00 00      mov c, 0
2097   0FFB             ; --- START SHIFT
2098   0FFB D7            push a
2099   0FFC 11            mov a, b
2100   0FFD FD 2E 08 00   mov32 cb, $00000008
2100   1001 00 00 
2101   1003 FD 39         mov c, b
2102   1005 9D            shl a, cl
2103   1006 27            mov b, a
2104   1007 E4            pop a
2105   1008             ; --- END SHIFT
2106   1008             ; --- START TERMS
2107   1008 D7            push a
2108   1009 11            mov a, b
2109   100A                             
2110   100A 3B 5D 6D      mov d, _starbases ; $starbases
2111   100D 32            mov bl, [d]
2112   100E A7 00         mov bh, 0
2113   1010 38 00 00      mov c, 0
2114   1013             ; --- START SHIFT
2115   1013 D7            push a
2116   1014 11            mov a, b
2117   1015 FD 2E 04 00   mov32 cb, $00000004
2117   1019 00 00 
2118   101B FD 39         mov c, b
2119   101D 9D            shl a, cl
2120   101E 27            mov b, a
2121   101F E4            pop a
2122   1020             ; --- END SHIFT
2123   1020 56            add b, a
2124   1021 11            mov a, b
2125   1022             ; --- START FUNCTION CALL
2126   1022 07 6F 05      call rand8
2127   1025 56            add b, a
2128   1026 E4            pop a
2129   1027             ; --- END TERMS
2130   1027 E7            pop d
2131   1028 FD 43         mov [d], b
2132   102A             _for36_update:
2133   102A                             
2134   102A FA FD FF      lea d, [bp + -3] ; $j
2135   102D 2A            mov b, [d]
2136   102E 38 00 00      mov c, 0
2137   1031 11            mov a, b
2138   1032 FD 77         inc b
2139   1034 FA FD FF      lea d, [bp + -3] ; $j
2140   1037 FD 43         mov [d], b
2141   1039 27            mov b, a
2142   103A 0A 9D 0E      jmp _for36_cond
2143   103D             _for36_exit:
2144   103D             _for35_update:
2145   103D                             
2146   103D FA FF FF      lea d, [bp + -1] ; $i
2147   1040 2A            mov b, [d]
2148   1041 38 00 00      mov c, 0
2149   1044 11            mov a, b
2150   1045 FD 77         inc b
2151   1047 FA FF FF      lea d, [bp + -1] ; $i
2152   104A FD 43         mov [d], b
2153   104C 27            mov b, a
2154   104D 0A 77 0E      jmp _for35_cond
2155   1050             _for35_exit:
2156   1050             ; if (klingons_left > time_up) 
2157   1050             _if41_cond:
2158   1050                             
2159   1050 3B 36 6E      mov d, _klingons_left ; $klingons_left
2160   1053 32            mov bl, [d]
2161   1054 A7 00         mov bh, 0
2162   1056 38 00 00      mov c, 0
2163   1059             ; --- START RELATIONAL
2164   1059 D7            push a
2165   105A 11            mov a, b
2166   105B 3B 42 6E      mov d, _time_up ; $time_up
2167   105E 2A            mov b, [d]
2168   105F 38 00 00      mov c, 0
2169   1062 B0            cmp a, b
2170   1063 FD 81         sgu ; > (unsigned)
2171   1065 E4            pop a
2172   1066             ; --- END RELATIONAL
2173   1066 C0 00 00      cmp b, 0
2174   1069 C6 89 10      je _if41_exit
2175   106C             _if41_TRUE:
2176   106C             ; time_up = klingons_left + 1; 
2177   106C 3B 42 6E      mov d, _time_up ; $time_up
2178   106F DA            push d
2179   1070                             
2180   1070 3B 36 6E      mov d, _klingons_left ; $klingons_left
2181   1073 32            mov bl, [d]
2182   1074 A7 00         mov bh, 0
2183   1076 38 00 00      mov c, 0
2184   1079             ; --- START TERMS
2185   1079 D7            push a
2186   107A 11            mov a, b
2187   107B FD 2E 01 00   mov32 cb, $00000001
2187   107F 00 00 
2188   1081 56            add b, a
2189   1082 E4            pop a
2190   1083             ; --- END TERMS
2191   1083 E7            pop d
2192   1084 FD 43         mov [d], b
2193   1086 0A 89 10      jmp _if41_exit
2194   1089             _if41_exit:
2195   1089             ; if (starbases_left == 0) { 
2196   1089             _if42_cond:
2197   1089                             
2198   1089 3B 60 6D      mov d, _starbases_left ; $starbases_left
2199   108C 32            mov bl, [d]
2200   108D A7 00         mov bh, 0
2201   108F 38 00 00      mov c, 0
2202   1092             ; --- START RELATIONAL
2203   1092 D7            push a
2204   1093 11            mov a, b
2205   1094 FD 2E 00 00   mov32 cb, $00000000
2205   1098 00 00 
2206   109A B0            cmp a, b
2207   109B FD 71         seq ; ==
2208   109D E4            pop a
2209   109E             ; --- END RELATIONAL
2210   109E C0 00 00      cmp b, 0
2211   10A1 C6 E5 11      je _if42_exit
2212   10A4             _if42_TRUE:
2213   10A4             ; yp = rand8(); 
2214   10A4 FA FC FF      lea d, [bp + -4] ; $yp
2215   10A7 DA            push d
2216   10A8                             
2217   10A8             ; --- START FUNCTION CALL
2218   10A8 07 6F 05      call rand8
2219   10AB E7            pop d
2220   10AC FD 3E         mov [d], bl
2221   10AE             ; xp = rand8(); 
2222   10AE FA FB FF      lea d, [bp + -5] ; $xp
2223   10B1 DA            push d
2224   10B2                             
2225   10B2             ; --- START FUNCTION CALL
2226   10B2 07 6F 05      call rand8
2227   10B5 E7            pop d
2228   10B6 FD 3E         mov [d], bl
2229   10B8             ; if (map[yp][xp] < 0x200) { 
2230   10B8             _if43_cond:
2231   10B8                             
2232   10B8 3B 86 6D      mov d, _map_data ; $map
2233   10BB D7            push a
2234   10BC DA            push d
2235   10BD                             
2236   10BD FA FC FF      lea d, [bp + -4] ; $yp
2237   10C0 32            mov bl, [d]
2238   10C1 A7 00         mov bh, 0
2239   10C3 38 00 00      mov c, 0
2240   10C6 E7            pop d
2241   10C7 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
2242   10CB DA            push d
2243   10CC                             
2244   10CC FA FB FF      lea d, [bp + -5] ; $xp
2245   10CF 32            mov bl, [d]
2246   10D0 A7 00         mov bh, 0
2247   10D2 38 00 00      mov c, 0
2248   10D5 E7            pop d
2249   10D6 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2250   10DA E4            pop a
2251   10DB 2A            mov b, [d]
2252   10DC 38 00 00      mov c, 0
2253   10DF             ; --- START RELATIONAL
2254   10DF D7            push a
2255   10E0 11            mov a, b
2256   10E1 FD 2E 00 02   mov32 cb, $00000200
2256   10E5 00 00 
2257   10E7 B0            cmp a, b
2258   10E8 FD 75         slu ; < (unsigned)
2259   10EA E4            pop a
2260   10EB             ; --- END RELATIONAL
2261   10EB C0 00 00      cmp b, 0
2262   10EE C6 6B 11      je _if43_exit
2263   10F1             _if43_TRUE:
2264   10F1             ; map[yp][xp] = map[yp][xp] + (1 << 8); 
2265   10F1 3B 86 6D      mov d, _map_data ; $map
2266   10F4 D7            push a
2267   10F5 DA            push d
2268   10F6                             
2269   10F6 FA FC FF      lea d, [bp + -4] ; $yp
2270   10F9 32            mov bl, [d]
2271   10FA A7 00         mov bh, 0
2272   10FC 38 00 00      mov c, 0
2273   10FF E7            pop d
2274   1100 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
2275   1104 DA            push d
2276   1105                             
2277   1105 FA FB FF      lea d, [bp + -5] ; $xp
2278   1108 32            mov bl, [d]
2279   1109 A7 00         mov bh, 0
2280   110B 38 00 00      mov c, 0
2281   110E E7            pop d
2282   110F FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2283   1113 E4            pop a
2284   1114 DA            push d
2285   1115                             
2286   1115 3B 86 6D      mov d, _map_data ; $map
2287   1118 D7            push a
2288   1119 DA            push d
2289   111A                             
2290   111A FA FC FF      lea d, [bp + -4] ; $yp
2291   111D 32            mov bl, [d]
2292   111E A7 00         mov bh, 0
2293   1120 38 00 00      mov c, 0
2294   1123 E7            pop d
2295   1124 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
2296   1128 DA            push d
2297   1129                             
2298   1129 FA FB FF      lea d, [bp + -5] ; $xp
2299   112C 32            mov bl, [d]
2300   112D A7 00         mov bh, 0
2301   112F 38 00 00      mov c, 0
2302   1132 E7            pop d
2303   1133 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2304   1137 E4            pop a
2305   1138 2A            mov b, [d]
2306   1139 38 00 00      mov c, 0
2307   113C             ; --- START TERMS
2308   113C D7            push a
2309   113D 11            mov a, b
2310   113E                             
2311   113E FD 2E 01 00   mov32 cb, $00000001
2311   1142 00 00 
2312   1144             ; --- START SHIFT
2313   1144 D7            push a
2314   1145 11            mov a, b
2315   1146 FD 2E 08 00   mov32 cb, $00000008
2315   114A 00 00 
2316   114C FD 39         mov c, b
2317   114E 9D            shl a, cl
2318   114F 27            mov b, a
2319   1150 E4            pop a
2320   1151             ; --- END SHIFT
2321   1151 56            add b, a
2322   1152 E4            pop a
2323   1153             ; --- END TERMS
2324   1153 E7            pop d
2325   1154 FD 43         mov [d], b
2326   1156             ; klingons_left++; 
2327   1156                             
2328   1156 3B 36 6E      mov d, _klingons_left ; $klingons_left
2329   1159 32            mov bl, [d]
2330   115A A7 00         mov bh, 0
2331   115C 38 00 00      mov c, 0
2332   115F FD 77         inc b
2333   1161 3B 36 6E      mov d, _klingons_left ; $klingons_left
2334   1164 FD 3E         mov [d], bl
2335   1166 FD 7D         dec b
2336   1168 0A 6B 11      jmp _if43_exit
2337   116B             _if43_exit:
2338   116B             ; map[yp][xp] = map[yp][xp] + (1 << 4); 
2339   116B 3B 86 6D      mov d, _map_data ; $map
2340   116E D7            push a
2341   116F DA            push d
2342   1170                             
2343   1170 FA FC FF      lea d, [bp + -4] ; $yp
2344   1173 32            mov bl, [d]
2345   1174 A7 00         mov bh, 0
2346   1176 38 00 00      mov c, 0
2347   1179 E7            pop d
2348   117A FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
2349   117E DA            push d
2350   117F                             
2351   117F FA FB FF      lea d, [bp + -5] ; $xp
2352   1182 32            mov bl, [d]
2353   1183 A7 00         mov bh, 0
2354   1185 38 00 00      mov c, 0
2355   1188 E7            pop d
2356   1189 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2357   118D E4            pop a
2358   118E DA            push d
2359   118F                             
2360   118F 3B 86 6D      mov d, _map_data ; $map
2361   1192 D7            push a
2362   1193 DA            push d
2363   1194                             
2364   1194 FA FC FF      lea d, [bp + -4] ; $yp
2365   1197 32            mov bl, [d]
2366   1198 A7 00         mov bh, 0
2367   119A 38 00 00      mov c, 0
2368   119D E7            pop d
2369   119E FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
2370   11A2 DA            push d
2371   11A3                             
2372   11A3 FA FB FF      lea d, [bp + -5] ; $xp
2373   11A6 32            mov bl, [d]
2374   11A7 A7 00         mov bh, 0
2375   11A9 38 00 00      mov c, 0
2376   11AC E7            pop d
2377   11AD FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2378   11B1 E4            pop a
2379   11B2 2A            mov b, [d]
2380   11B3 38 00 00      mov c, 0
2381   11B6             ; --- START TERMS
2382   11B6 D7            push a
2383   11B7 11            mov a, b
2384   11B8                             
2385   11B8 FD 2E 01 00   mov32 cb, $00000001
2385   11BC 00 00 
2386   11BE             ; --- START SHIFT
2387   11BE D7            push a
2388   11BF 11            mov a, b
2389   11C0 FD 2E 04 00   mov32 cb, $00000004
2389   11C4 00 00 
2390   11C6 FD 39         mov c, b
2391   11C8 9D            shl a, cl
2392   11C9 27            mov b, a
2393   11CA E4            pop a
2394   11CB             ; --- END SHIFT
2395   11CB 56            add b, a
2396   11CC E4            pop a
2397   11CD             ; --- END TERMS
2398   11CD E7            pop d
2399   11CE FD 43         mov [d], b
2400   11D0             ; starbases_left++; 
2401   11D0                             
2402   11D0 3B 60 6D      mov d, _starbases_left ; $starbases_left
2403   11D3 32            mov bl, [d]
2404   11D4 A7 00         mov bh, 0
2405   11D6 38 00 00      mov c, 0
2406   11D9 FD 77         inc b
2407   11DB 3B 60 6D      mov d, _starbases_left ; $starbases_left
2408   11DE FD 3E         mov [d], bl
2409   11E0 FD 7D         dec b
2410   11E2 0A E5 11      jmp _if42_exit
2411   11E5             _if42_exit:
2412   11E5             ; total_klingons = klingons_left; 
2413   11E5 3B 35 6E      mov d, _total_klingons ; $total_klingons
2414   11E8 DA            push d
2415   11E9                             
2416   11E9 3B 36 6E      mov d, _klingons_left ; $klingons_left
2417   11EC 32            mov bl, [d]
2418   11ED A7 00         mov bh, 0
2419   11EF 38 00 00      mov c, 0
2420   11F2 E7            pop d
2421   11F3 FD 3E         mov [d], bl
2422   11F5             ; if (starbases_left != 1) { 
2423   11F5             _if44_cond:
2424   11F5                             
2425   11F5 3B 60 6D      mov d, _starbases_left ; $starbases_left
2426   11F8 32            mov bl, [d]
2427   11F9 A7 00         mov bh, 0
2428   11FB 38 00 00      mov c, 0
2429   11FE             ; --- START RELATIONAL
2430   11FE D7            push a
2431   11FF 11            mov a, b
2432   1200 FD 2E 01 00   mov32 cb, $00000001
2432   1204 00 00 
2433   1206 B0            cmp a, b
2434   1207 FD 72         sneq ; !=
2435   1209 E4            pop a
2436   120A             ; --- END RELATIONAL
2437   120A C0 00 00      cmp b, 0
2438   120D C6 3F 12      je _if44_exit
2439   1210             _if44_TRUE:
2440   1210             ; strcpy(plural_2, "s"); 
2441   1210                             
2442   1210             ; --- START FUNCTION CALL
2443   1210                             
2444   1210 26 DC 72      mov b, _s57 ; "s"
2445   1213 FD AB         swp b
2446   1215 D8            push b
2447   1216                             
2448   1216 3B 59 6F      mov d, _plural_2_data ; $plural_2
2449   1219 2D            mov b, d
2450   121A 38 00 00      mov c, 0
2451   121D FD AB         swp b
2452   121F D8            push b
2453   1220 07 97 5E      call strcpy
2454   1223 51 04 00      add sp, 4
2455   1226             ; --- END FUNCTION CALL
2456   1226             ; strcpy(plural, "are"); 
2457   1226                             
2458   1226             ; --- START FUNCTION CALL
2459   1226                             
2460   1226 26 69 71      mov b, _s30 ; "are"
2461   1229 FD AB         swp b
2462   122B D8            push b
2463   122C                             
2464   122C 3B 5C 6F      mov d, _plural_data ; $plural
2465   122F 2D            mov b, d
2466   1230 38 00 00      mov c, 0
2467   1233 FD AB         swp b
2468   1235 D8            push b
2469   1236 07 97 5E      call strcpy
2470   1239 51 04 00      add sp, 4
2471   123C             ; --- END FUNCTION CALL
2472   123C 0A 3F 12      jmp _if44_exit
2473   123F             _if44_exit:
2474   123F             ; getchar(); 
2475   123F                             
2476   123F             ; --- START FUNCTION CALL
2477   123F 07 F6 5D      call getchar
2478   1242 F9            leave
2479   1243 09            ret
2480   1244             
2481   1244             place_ship:
2482   1244 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2483   1247             ; quad[FROM_FIXED00(ship_y) - 1][FROM_FIXED00(ship_x) - 1] = 		4; 
2484   1247 3B 5E 6E      mov d, _quad_data ; $quad
2485   124A D7            push a
2486   124B DA            push d
2487   124C                             
2488   124C             ; --- START FUNCTION CALL
2489   124C                             
2490   124C 3B 58 6E      mov d, _ship_y ; $ship_y
2491   124F 2A            mov b, [d]
2492   1250 38 00 00      mov c, 0
2493   1253 FD AB         swp b
2494   1255 D8            push b
2495   1256 07 DC 04      call FROM_FIXED00
2496   1259 51 02 00      add sp, 2
2497   125C             ; --- END FUNCTION CALL
2498   125C             ; --- START TERMS
2499   125C D7            push a
2500   125D 11            mov a, b
2501   125E FD 2E 01 00   mov32 cb, $00000001
2501   1262 00 00 
2502   1264 60            sub a, b
2503   1265 27            mov b, a
2504   1266 E4            pop a
2505   1267             ; --- END TERMS
2506   1267 E7            pop d
2507   1268 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
2508   126C DA            push d
2509   126D                             
2510   126D             ; --- START FUNCTION CALL
2511   126D                             
2512   126D 3B 5A 6E      mov d, _ship_x ; $ship_x
2513   1270 2A            mov b, [d]
2514   1271 38 00 00      mov c, 0
2515   1274 FD AB         swp b
2516   1276 D8            push b
2517   1277 07 DC 04      call FROM_FIXED00
2518   127A 51 02 00      add sp, 2
2519   127D             ; --- END FUNCTION CALL
2520   127D             ; --- START TERMS
2521   127D D7            push a
2522   127E 11            mov a, b
2523   127F FD 2E 01 00   mov32 cb, $00000001
2523   1283 00 00 
2524   1285 60            sub a, b
2525   1286 27            mov b, a
2526   1287 E4            pop a
2527   1288             ; --- END TERMS
2528   1288 E7            pop d
2529   1289 5A            add d, b
2530   128A E4            pop a
2531   128B DA            push d
2532   128C                             
2533   128C FD 2E 04 00   mov32 cb, $00000004
2533   1290 00 00 
2534   1292 E7            pop d
2535   1293 FD 3E         mov [d], bl
2536   1295 F9            leave
2537   1296 09            ret
2538   1297             
2539   1297             new_quadrant:
2540   1297 F8 00 00      enter 0 ; (push bp; mov bp, sp)
2541   129A             ; int i; 
2542   129A 52 02 00      sub sp, 2
2543   129D             ; unsigned int tmp; 
2544   129D 52 02 00      sub sp, 2
2545   12A0             ; struct klingon *k; 
2546   12A0 52 02 00      sub sp, 2
2547   12A3             ; k = &kdata; 
2548   12A3 FA FB FF      lea d, [bp + -5] ; $k
2549   12A6 DA            push d
2550   12A7                             
2551   12A7 3B 28 6E      mov d, _kdata_data ; $kdata
2552   12AA 2D            mov b, d
2553   12AB E7            pop d
2554   12AC FD 43         mov [d], b
2555   12AE             ; klingons = 0; 
2556   12AE 3B 34 6E      mov d, _klingons ; $klingons
2557   12B1 DA            push d
2558   12B2                             
2559   12B2 FD 2E 00 00   mov32 cb, $00000000
2559   12B6 00 00 
2560   12B8 E7            pop d
2561   12B9 FD 3E         mov [d], bl
2562   12BB             ; starbases = 0; 
2563   12BB 3B 5D 6D      mov d, _starbases ; $starbases
2564   12BE DA            push d
2565   12BF                             
2566   12BF FD 2E 00 00   mov32 cb, $00000000
2566   12C3 00 00 
2567   12C5 E7            pop d
2568   12C6 FD 3E         mov [d], bl
2569   12C8             ; stars = 0; 
2570   12C8 3B 3F 6E      mov d, _stars ; $stars
2571   12CB DA            push d
2572   12CC                             
2573   12CC FD 2E 00 00   mov32 cb, $00000000
2573   12D0 00 00 
2574   12D2 E7            pop d
2575   12D3 FD 3E         mov [d], bl
2576   12D5             ; d4 = get_rand(50) - 1; 
2577   12D5 3B 56 6E      mov d, _d4 ; $d4
2578   12D8 DA            push d
2579   12D9                             
2580   12D9             ; --- START FUNCTION CALL
2581   12D9                             
2582   12D9 FD 2E 32 00   mov32 cb, $00000032
2582   12DD 00 00 
2583   12DF FD AB         swp b
2584   12E1 D8            push b
2585   12E2 07 FF 04      call get_rand
2586   12E5 51 02 00      add sp, 2
2587   12E8             ; --- END FUNCTION CALL
2588   12E8             ; --- START TERMS
2589   12E8 D7            push a
2590   12E9 11            mov a, b
2591   12EA FD 2E 01 00   mov32 cb, $00000001
2591   12EE 00 00 
2592   12F0 60            sub a, b
2593   12F1 27            mov b, a
2594   12F2 E4            pop a
2595   12F3             ; --- END TERMS
2596   12F3 E7            pop d
2597   12F4 FD 43         mov [d], b
2598   12F6             ; map[quad_y][quad_x] = map[quad_y][quad_x] |  0x1000		/* Set if this sector was mapped */; 
2599   12F6 3B 86 6D      mov d, _map_data ; $map
2600   12F9 D7            push a
2601   12FA DA            push d
2602   12FB                             
2603   12FB 3B 39 6E      mov d, _quad_y ; $quad_y
2604   12FE 2A            mov b, [d]
2605   12FF 38 00 00      mov c, 0
2606   1302 E7            pop d
2607   1303 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
2608   1307 DA            push d
2609   1308                             
2610   1308 3B 3B 6E      mov d, _quad_x ; $quad_x
2611   130B 2A            mov b, [d]
2612   130C 38 00 00      mov c, 0
2613   130F E7            pop d
2614   1310 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2615   1314 E4            pop a
2616   1315 DA            push d
2617   1316                             
2618   1316 3B 86 6D      mov d, _map_data ; $map
2619   1319 D7            push a
2620   131A DA            push d
2621   131B                             
2622   131B 3B 39 6E      mov d, _quad_y ; $quad_y
2623   131E 2A            mov b, [d]
2624   131F 38 00 00      mov c, 0
2625   1322 E7            pop d
2626   1323 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
2627   1327 DA            push d
2628   1328                             
2629   1328 3B 3B 6E      mov d, _quad_x ; $quad_x
2630   132B 2A            mov b, [d]
2631   132C 38 00 00      mov c, 0
2632   132F E7            pop d
2633   1330 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2634   1334 E4            pop a
2635   1335 2A            mov b, [d]
2636   1336 38 00 00      mov c, 0
2637   1339 D7            push a
2638   133A 11            mov a, b
2639   133B FD 2E 00 10   mov32 cb, $00001000
2639   133F 00 00 
2640   1341 FD 70         or b, a ; |
2641   1343 E4            pop a
2642   1344 E7            pop d
2643   1345 FD 43         mov [d], b
2644   1347             ; if (quad_y >= 1 && quad_y <= 8 && quad_x >= 1 && quad_x <= 8) { 
2645   1347             _if45_cond:
2646   1347                             
2647   1347 3B 39 6E      mov d, _quad_y ; $quad_y
2648   134A 2A            mov b, [d]
2649   134B 38 00 00      mov c, 0
2650   134E             ; --- START RELATIONAL
2651   134E D7            push a
2652   134F 11            mov a, b
2653   1350 FD 2E 01 00   mov32 cb, $00000001
2653   1354 00 00 
2654   1356 B0            cmp a, b
2655   1357 FD 80         sge ; >=
2656   1359 E4            pop a
2657   135A             ; --- END RELATIONAL
2658   135A             ; --- START LOGICAL AND
2659   135A D7            push a
2660   135B 11            mov a, b
2661   135C 3B 39 6E      mov d, _quad_y ; $quad_y
2662   135F 2A            mov b, [d]
2663   1360 38 00 00      mov c, 0
2664   1363             ; --- START RELATIONAL
2665   1363 D7            push a
2666   1364 11            mov a, b
2667   1365 FD 2E 08 00   mov32 cb, $00000008
2667   1369 00 00 
2668   136B B0            cmp a, b
2669   136C FD 74         sle ; <= (signed)
2670   136E E4            pop a
2671   136F             ; --- END RELATIONAL
2672   136F FD A7         sand a, b
2673   1371 11            mov a, b
2674   1372 3B 3B 6E      mov d, _quad_x ; $quad_x
2675   1375 2A            mov b, [d]
2676   1376 38 00 00      mov c, 0
2677   1379             ; --- START RELATIONAL
2678   1379 D7            push a
2679   137A 11            mov a, b
2680   137B FD 2E 01 00   mov32 cb, $00000001
2680   137F 00 00 
2681   1381 B0            cmp a, b
2682   1382 FD 80         sge ; >=
2683   1384 E4            pop a
2684   1385             ; --- END RELATIONAL
2685   1385 FD A7         sand a, b
2686   1387 11            mov a, b
2687   1388 3B 3B 6E      mov d, _quad_x ; $quad_x
2688   138B 2A            mov b, [d]
2689   138C 38 00 00      mov c, 0
2690   138F             ; --- START RELATIONAL
2691   138F D7            push a
2692   1390 11            mov a, b
2693   1391 FD 2E 08 00   mov32 cb, $00000008
2693   1395 00 00 
2694   1397 B0            cmp a, b
2695   1398 FD 74         sle ; <= (signed)
2696   139A E4            pop a
2697   139B             ; --- END RELATIONAL
2698   139B FD A7         sand a, b
2699   139D E4            pop a
2700   139E             ; --- END LOGICAL AND
2701   139E C0 00 00      cmp b, 0
2702   13A1 C6 22 14      je _if45_exit
2703   13A4             _if45_TRUE:
2704   13A4             ; quadrant_name(0, quad_y, quad_x); 
2705   13A4                             
2706   13A4             ; --- START FUNCTION CALL
2707   13A4                             
2708   13A4 3B 3B 6E      mov d, _quad_x ; $quad_x
2709   13A7 2A            mov b, [d]
2710   13A8 38 00 00      mov c, 0
2711   13AB DD            push bl
2712   13AC                             
2713   13AC 3B 39 6E      mov d, _quad_y ; $quad_y
2714   13AF 2A            mov b, [d]
2715   13B0 38 00 00      mov c, 0
2716   13B3 DD            push bl
2717   13B4                             
2718   13B4 FD 2E 00 00   mov32 cb, $00000000
2718   13B8 00 00 
2719   13BA DD            push bl
2720   13BB 07 9C 59      call quadrant_name
2721   13BE 51 03 00      add sp, 3
2722   13C1             ; --- END FUNCTION CALL
2723   13C1             ; if (TO_FIXED(time_start) != stardate) 
2724   13C1             _if46_cond:
2725   13C1                             
2726   13C1             ; --- START FUNCTION CALL
2727   13C1                             
2728   13C1 3B 40 6E      mov d, _time_start ; $time_start
2729   13C4 2A            mov b, [d]
2730   13C5 38 00 00      mov c, 0
2731   13C8 FD AB         swp b
2732   13CA D8            push b
2733   13CB 07 17 04      call TO_FIXED
2734   13CE 51 02 00      add sp, 2
2735   13D1             ; --- END FUNCTION CALL
2736   13D1             ; --- START RELATIONAL
2737   13D1 D7            push a
2738   13D2 11            mov a, b
2739   13D3 3B 5C 6E      mov d, _stardate ; $stardate
2740   13D6 2A            mov b, [d]
2741   13D7 38 00 00      mov c, 0
2742   13DA B0            cmp a, b
2743   13DB FD 72         sneq ; !=
2744   13DD E4            pop a
2745   13DE             ; --- END RELATIONAL
2746   13DE C0 00 00      cmp b, 0
2747   13E1 C6 FD 13      je _if46_else
2748   13E4             _if46_TRUE:
2749   13E4             ; printf("Now entering %s quadrant...\n\n", quadname); 
2750   13E4                             
2751   13E4             ; --- START FUNCTION CALL
2752   13E4                             
2753   13E4 3B 9E 6E      mov d, _quadname_data ; $quadname
2754   13E7 2D            mov b, d
2755   13E8 38 00 00      mov c, 0
2756   13EB FD AB         swp b
2757   13ED D8            push b
2758   13EE                             
2759   13EE 26 DE 72      mov b, _s58 ; "Now entering %s quadrant...\n\n"
2760   13F1 FD AB         swp b
2761   13F3 D8            push b
2762   13F4 07 4F 60      call printf
2763   13F7 51 04 00      add sp, 4
2764   13FA             ; --- END FUNCTION CALL
2765   13FA 0A 1F 14      jmp _if46_exit
2766   13FD             _if46_else:
2767   13FD             ; puts("\nYour mission begins with your starship located"); 
2768   13FD                             
2769   13FD             ; --- START FUNCTION CALL
2770   13FD                             
2771   13FD 26 FC 72      mov b, _s59 ; "\nYour mission begins with your starship located"
2772   1400 FD AB         swp b
2773   1402 D8            push b
2774   1403 07 5C 69      call puts
2775   1406 51 02 00      add sp, 2
2776   1409             ; --- END FUNCTION CALL
2777   1409             ; printf("in the galactic quadrant %s.\n\n", quadname); 
2778   1409                             
2779   1409             ; --- START FUNCTION CALL
2780   1409                             
2781   1409 3B 9E 6E      mov d, _quadname_data ; $quadname
2782   140C 2D            mov b, d
2783   140D 38 00 00      mov c, 0
2784   1410 FD AB         swp b
2785   1412 D8            push b
2786   1413                             
2787   1413 26 2C 73      mov b, _s60 ; "in the galactic quadrant %s.\n\n"
2788   1416 FD AB         swp b
2789   1418 D8            push b
2790   1419 07 4F 60      call printf
2791   141C 51 04 00      add sp, 4
2792   141F             ; --- END FUNCTION CALL
2793   141F             _if46_exit:
2794   141F 0A 22 14      jmp _if45_exit
2795   1422             _if45_exit:
2796   1422             ; tmp = map[quad_y][quad_x]; 
2797   1422 FA FD FF      lea d, [bp + -3] ; $tmp
2798   1425 DA            push d
2799   1426                             
2800   1426 3B 86 6D      mov d, _map_data ; $map
2801   1429 D7            push a
2802   142A DA            push d
2803   142B                             
2804   142B 3B 39 6E      mov d, _quad_y ; $quad_y
2805   142E 2A            mov b, [d]
2806   142F 38 00 00      mov c, 0
2807   1432 E7            pop d
2808   1433 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
2809   1437 DA            push d
2810   1438                             
2811   1438 3B 3B 6E      mov d, _quad_x ; $quad_x
2812   143B 2A            mov b, [d]
2813   143C 38 00 00      mov c, 0
2814   143F E7            pop d
2815   1440 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
2816   1444 E4            pop a
2817   1445 2A            mov b, [d]
2818   1446 38 00 00      mov c, 0
2819   1449 E7            pop d
2820   144A FD 43         mov [d], b
2821   144C             ; klingons = (tmp >> 8) & 0x0F; 
2822   144C 3B 34 6E      mov d, _klingons ; $klingons
2823   144F DA            push d
2824   1450                             
2825   1450                             
2826   1450 FA FD FF      lea d, [bp + -3] ; $tmp
2827   1453 2A            mov b, [d]
2828   1454 38 00 00      mov c, 0
2829   1457             ; --- START SHIFT
2830   1457 D7            push a
2831   1458 11            mov a, b
2832   1459 FD 2E 08 00   mov32 cb, $00000008
2832   145D 00 00 
2833   145F FD 39         mov c, b
2834   1461 A1            shr a, cl
2835   1462 27            mov b, a
2836   1463 E4            pop a
2837   1464             ; --- END SHIFT
2838   1464 D7            push a
2839   1465 11            mov a, b
2840   1466 FD 2E 0F 00   mov32 cb, $0000000f
2840   146A 00 00 
2841   146C FD 92         and b, a ; &
2842   146E E4            pop a
2843   146F E7            pop d
2844   1470 FD 3E         mov [d], bl
2845   1472             ; starbases = (tmp >> 4) & 0x0F; 
2846   1472 3B 5D 6D      mov d, _starbases ; $starbases
2847   1475 DA            push d
2848   1476                             
2849   1476                             
2850   1476 FA FD FF      lea d, [bp + -3] ; $tmp
2851   1479 2A            mov b, [d]
2852   147A 38 00 00      mov c, 0
2853   147D             ; --- START SHIFT
2854   147D D7            push a
2855   147E 11            mov a, b
2856   147F FD 2E 04 00   mov32 cb, $00000004
2856   1483 00 00 
2857   1485 FD 39         mov c, b
2858   1487 A1            shr a, cl
2859   1488 27            mov b, a
2860   1489 E4            pop a
2861   148A             ; --- END SHIFT
2862   148A D7            push a
2863   148B 11            mov a, b
2864   148C FD 2E 0F 00   mov32 cb, $0000000f
2864   1490 00 00 
2865   1492 FD 92         and b, a ; &
2866   1494 E4            pop a
2867   1495 E7            pop d
2868   1496 FD 3E         mov [d], bl
2869   1498             ; stars = tmp & 0x0F; 
2870   1498 3B 3F 6E      mov d, _stars ; $stars
2871   149B DA            push d
2872   149C                             
2873   149C FA FD FF      lea d, [bp + -3] ; $tmp
2874   149F 2A            mov b, [d]
2875   14A0 38 00 00      mov c, 0
2876   14A3 D7            push a
2877   14A4 11            mov a, b
2878   14A5 FD 2E 0F 00   mov32 cb, $0000000f
2878   14A9 00 00 
2879   14AB FD 92         and b, a ; &
2880   14AD E4            pop a
2881   14AE E7            pop d
2882   14AF FD 3E         mov [d], bl
2883   14B1             ; if (klingons > 0) { 
2884   14B1             _if47_cond:
2885   14B1                             
2886   14B1 3B 34 6E      mov d, _klingons ; $klingons
2887   14B4 32            mov bl, [d]
2888   14B5 A7 00         mov bh, 0
2889   14B7 38 00 00      mov c, 0
2890   14BA             ; --- START RELATIONAL
2891   14BA D7            push a
2892   14BB 11            mov a, b
2893   14BC FD 2E 00 00   mov32 cb, $00000000
2893   14C0 00 00 
2894   14C2 B0            cmp a, b
2895   14C3 FD 81         sgu ; > (unsigned)
2896   14C5 E4            pop a
2897   14C6             ; --- END RELATIONAL
2898   14C6 C0 00 00      cmp b, 0
2899   14C9 C6 03 15      je _if47_exit
2900   14CC             _if47_TRUE:
2901   14CC             ; printf("Combat Area  Condition Red\n"); 
2902   14CC                             
2903   14CC             ; --- START FUNCTION CALL
2904   14CC                             
2905   14CC 26 4B 73      mov b, _s61 ; "Combat Area  Condition Red\n"
2906   14CF FD AB         swp b
2907   14D1 D8            push b
2908   14D2 07 4F 60      call printf
2909   14D5 51 02 00      add sp, 2
2910   14D8             ; --- END FUNCTION CALL
2911   14D8             ; if (shield < 200) 
2912   14D8             _if48_cond:
2913   14D8                             
2914   14D8 3B 3D 6E      mov d, _shield ; $shield
2915   14DB 2A            mov b, [d]
2916   14DC 38 00 00      mov c, 0
2917   14DF             ; --- START RELATIONAL
2918   14DF D7            push a
2919   14E0 11            mov a, b
2920   14E1 FD 2E C8 00   mov32 cb, $000000c8
2920   14E5 00 00 
2921   14E7 B0            cmp a, b
2922   14E8 FD 73         slt ; < (signed)
2923   14EA E4            pop a
2924   14EB             ; --- END RELATIONAL
2925   14EB C0 00 00      cmp b, 0
2926   14EE C6 00 15      je _if48_exit
2927   14F1             _if48_TRUE:
2928   14F1             ; printf("Shields Dangerously Low\n"); 
2929   14F1                             
2930   14F1             ; --- START FUNCTION CALL
2931   14F1                             
2932   14F1 26 67 73      mov b, _s62 ; "Shields Dangerously Low\n"
2933   14F4 FD AB         swp b
2934   14F6 D8            push b
2935   14F7 07 4F 60      call printf
2936   14FA 51 02 00      add sp, 2
2937   14FD             ; --- END FUNCTION CALL
2938   14FD 0A 00 15      jmp _if48_exit
2939   1500             _if48_exit:
2940   1500 0A 03 15      jmp _if47_exit
2941   1503             _if47_exit:
2942   1503             ; for (i = 1; i <= 3; i++) { 
2943   1503             _for49_init:
2944   1503 FA FF FF      lea d, [bp + -1] ; $i
2945   1506 DA            push d
2946   1507                             
2947   1507 FD 2E 01 00   mov32 cb, $00000001
2947   150B 00 00 
2948   150D E7            pop d
2949   150E FD 43         mov [d], b
2950   1510             _for49_cond:
2951   1510                             
2952   1510 FA FF FF      lea d, [bp + -1] ; $i
2953   1513 2A            mov b, [d]
2954   1514 38 00 00      mov c, 0
2955   1517             ; --- START RELATIONAL
2956   1517 D7            push a
2957   1518 11            mov a, b
2958   1519 FD 2E 03 00   mov32 cb, $00000003
2958   151D 00 00 
2959   151F B0            cmp a, b
2960   1520 FD 74         sle ; <= (signed)
2961   1522 E4            pop a
2962   1523             ; --- END RELATIONAL
2963   1523 C0 00 00      cmp b, 0
2964   1526 C6 84 15      je _for49_exit
2965   1529             _for49_block:
2966   1529             ; k->y = 0; 
2967   1529 FA FB FF      lea d, [bp + -5] ; $k
2968   152C FD 2A         mov d, [d]
2969   152E 58 00 00      add d, 0
2970   1531 DA            push d
2971   1532                             
2972   1532 FD 2E 00 00   mov32 cb, $00000000
2972   1536 00 00 
2973   1538 E7            pop d
2974   1539 FD 3E         mov [d], bl
2975   153B             ; k->x = 0; 
2976   153B FA FB FF      lea d, [bp + -5] ; $k
2977   153E FD 2A         mov d, [d]
2978   1540 58 01 00      add d, 1
2979   1543 DA            push d
2980   1544                             
2981   1544 FD 2E 00 00   mov32 cb, $00000000
2981   1548 00 00 
2982   154A E7            pop d
2983   154B FD 3E         mov [d], bl
2984   154D             ; k->energy = 0; 
2985   154D FA FB FF      lea d, [bp + -5] ; $k
2986   1550 FD 2A         mov d, [d]
2987   1552 58 02 00      add d, 2
2988   1555 DA            push d
2989   1556                             
2990   1556 FD 2E 00 00   mov32 cb, $00000000
2990   155A 00 00 
2991   155C E7            pop d
2992   155D FD 43         mov [d], b
2993   155F             ; k++; 
2994   155F                             
2995   155F FA FB FF      lea d, [bp + -5] ; $k
2996   1562 2A            mov b, [d]
2997   1563 38 00 00      mov c, 0
2998   1566 11            mov a, b
2999   1567 FD 77         inc b
3000   1569 FD 77         inc b
3001   156B FA FB FF      lea d, [bp + -5] ; $k
3002   156E FD 43         mov [d], b
3003   1570 27            mov b, a
3004   1571             _for49_update:
3005   1571                             
3006   1571 FA FF FF      lea d, [bp + -1] ; $i
3007   1574 2A            mov b, [d]
3008   1575 38 00 00      mov c, 0
3009   1578 11            mov a, b
3010   1579 FD 77         inc b
3011   157B FA FF FF      lea d, [bp + -1] ; $i
3012   157E FD 43         mov [d], b
3013   1580 27            mov b, a
3014   1581 0A 10 15      jmp _for49_cond
3015   1584             _for49_exit:
3016   1584             ; memset(quad, 		0, 64); 
3017   1584                             
3018   1584             ; --- START FUNCTION CALL
3019   1584                             
3020   1584 FD 2E 40 00   mov32 cb, $00000040
3020   1588 00 00 
3021   158A FD AB         swp b
3022   158C D8            push b
3023   158D                             
3024   158D FD 2E 00 00   mov32 cb, $00000000
3024   1591 00 00 
3025   1593 DD            push bl
3026   1594                             
3027   1594 3B 5E 6E      mov d, _quad_data ; $quad
3028   1597 2D            mov b, d
3029   1598 38 00 00      mov c, 0
3030   159B FD AB         swp b
3031   159D D8            push b
3032   159E 07 7A 69      call memset
3033   15A1 51 05 00      add sp, 5
3034   15A4             ; --- END FUNCTION CALL
3035   15A4             ; place_ship(); 
3036   15A4                             
3037   15A4             ; --- START FUNCTION CALL
3038   15A4 07 44 12      call place_ship
3039   15A7             ; if (klingons > 0) { 
3040   15A7             _if50_cond:
3041   15A7                             
3042   15A7 3B 34 6E      mov d, _klingons ; $klingons
3043   15AA 32            mov bl, [d]
3044   15AB A7 00         mov bh, 0
3045   15AD 38 00 00      mov c, 0
3046   15B0             ; --- START RELATIONAL
3047   15B0 D7            push a
3048   15B1 11            mov a, b
3049   15B2 FD 2E 00 00   mov32 cb, $00000000
3049   15B6 00 00 
3050   15B8 B0            cmp a, b
3051   15B9 FD 81         sgu ; > (unsigned)
3052   15BB E4            pop a
3053   15BC             ; --- END RELATIONAL
3054   15BC C0 00 00      cmp b, 0
3055   15BF C6 75 16      je _if50_exit
3056   15C2             _if50_TRUE:
3057   15C2             ; k = kdata; 
3058   15C2 FA FB FF      lea d, [bp + -5] ; $k
3059   15C5 DA            push d
3060   15C6                             
3061   15C6 3B 28 6E      mov d, _kdata_data ; $kdata
3062   15C9 2D            mov b, d
3063   15CA 38 00 00      mov c, 0
3064   15CD E7            pop d
3065   15CE FD 43         mov [d], b
3066   15D0             ; for (i = 0; i < klingons; i++) { 
3067   15D0             _for51_init:
3068   15D0 FA FF FF      lea d, [bp + -1] ; $i
3069   15D3 DA            push d
3070   15D4                             
3071   15D4 FD 2E 00 00   mov32 cb, $00000000
3071   15D8 00 00 
3072   15DA E7            pop d
3073   15DB FD 43         mov [d], b
3074   15DD             _for51_cond:
3075   15DD                             
3076   15DD FA FF FF      lea d, [bp + -1] ; $i
3077   15E0 2A            mov b, [d]
3078   15E1 38 00 00      mov c, 0
3079   15E4             ; --- START RELATIONAL
3080   15E4 D7            push a
3081   15E5 11            mov a, b
3082   15E6 3B 34 6E      mov d, _klingons ; $klingons
3083   15E9 32            mov bl, [d]
3084   15EA A7 00         mov bh, 0
3085   15EC 38 00 00      mov c, 0
3086   15EF B0            cmp a, b
3087   15F0 FD 73         slt ; < (signed)
3088   15F2 E4            pop a
3089   15F3             ; --- END RELATIONAL
3090   15F3 C0 00 00      cmp b, 0
3091   15F6 C6 72 16      je _for51_exit
3092   15F9             _for51_block:
3093   15F9             ; find_set_empty_place(	3, k->y, k->x); 
3094   15F9                             
3095   15F9             ; --- START FUNCTION CALL
3096   15F9                             
3097   15F9 FA FB FF      lea d, [bp + -5] ; $k
3098   15FC FD 2A         mov d, [d]
3099   15FE 58 01 00      add d, 1
3100   1601 32            mov bl, [d]
3101   1602 A7 00         mov bh, 0
3102   1604 38 00 00      mov c, 0
3103   1607 FD AB         swp b
3104   1609 D8            push b
3105   160A                             
3106   160A FA FB FF      lea d, [bp + -5] ; $k
3107   160D FD 2A         mov d, [d]
3108   160F 58 00 00      add d, 0
3109   1612 32            mov bl, [d]
3110   1613 A7 00         mov bh, 0
3111   1615 38 00 00      mov c, 0
3112   1618 FD AB         swp b
3113   161A D8            push b
3114   161B                             
3115   161B FD 2E 03 00   mov32 cb, $00000003
3115   161F 00 00 
3116   1621 DD            push bl
3117   1622 07 4C 58      call find_set_empty_place
3118   1625 51 05 00      add sp, 5
3119   1628             ; --- END FUNCTION CALL
3120   1628             ; k->energy = 100 + get_rand(200); 
3121   1628 FA FB FF      lea d, [bp + -5] ; $k
3122   162B FD 2A         mov d, [d]
3123   162D 58 02 00      add d, 2
3124   1630 DA            push d
3125   1631                             
3126   1631 FD 2E 64 00   mov32 cb, $00000064
3126   1635 00 00 
3127   1637             ; --- START TERMS
3128   1637 D7            push a
3129   1638 11            mov a, b
3130   1639             ; --- START FUNCTION CALL
3131   1639                             
3132   1639 FD 2E C8 00   mov32 cb, $000000c8
3132   163D 00 00 
3133   163F FD AB         swp b
3134   1641 D8            push b
3135   1642 07 FF 04      call get_rand
3136   1645 51 02 00      add sp, 2
3137   1648             ; --- END FUNCTION CALL
3138   1648 56            add b, a
3139   1649 E4            pop a
3140   164A             ; --- END TERMS
3141   164A E7            pop d
3142   164B FD 43         mov [d], b
3143   164D             ; k++; 
3144   164D                             
3145   164D FA FB FF      lea d, [bp + -5] ; $k
3146   1650 2A            mov b, [d]
3147   1651 38 00 00      mov c, 0
3148   1654 11            mov a, b
3149   1655 FD 77         inc b
3150   1657 FD 77         inc b
3151   1659 FA FB FF      lea d, [bp + -5] ; $k
3152   165C FD 43         mov [d], b
3153   165E 27            mov b, a
3154   165F             _for51_update:
3155   165F                             
3156   165F FA FF FF      lea d, [bp + -1] ; $i
3157   1662 2A            mov b, [d]
3158   1663 38 00 00      mov c, 0
3159   1666 11            mov a, b
3160   1667 FD 77         inc b
3161   1669 FA FF FF      lea d, [bp + -1] ; $i
3162   166C FD 43         mov [d], b
3163   166E 27            mov b, a
3164   166F 0A DD 15      jmp _for51_cond
3165   1672             _for51_exit:
3166   1672 0A 75 16      jmp _if50_exit
3167   1675             _if50_exit:
3168   1675             ; if (starbases > 0) 
3169   1675             _if52_cond:
3170   1675                             
3171   1675 3B 5D 6D      mov d, _starbases ; $starbases
3172   1678 32            mov bl, [d]
3173   1679 A7 00         mov bh, 0
3174   167B 38 00 00      mov c, 0
3175   167E             ; --- START RELATIONAL
3176   167E D7            push a
3177   167F 11            mov a, b
3178   1680 FD 2E 00 00   mov32 cb, $00000000
3178   1684 00 00 
3179   1686 B0            cmp a, b
3180   1687 FD 7F         sgt ; >
3181   1689 E4            pop a
3182   168A             ; --- END RELATIONAL
3183   168A C0 00 00      cmp b, 0
3184   168D C6 AE 16      je _if52_exit
3185   1690             _if52_TRUE:
3186   1690             ; find_set_empty_place(		2, &base_y, &base_x); 
3187   1690                             
3188   1690             ; --- START FUNCTION CALL
3189   1690                             
3190   1690 3B 5F 6D      mov d, _base_x ; $base_x
3191   1693 2D            mov b, d
3192   1694 FD AB         swp b
3193   1696 D8            push b
3194   1697                             
3195   1697 3B 5E 6D      mov d, _base_y ; $base_y
3196   169A 2D            mov b, d
3197   169B FD AB         swp b
3198   169D D8            push b
3199   169E                             
3200   169E FD 2E 02 00   mov32 cb, $00000002
3200   16A2 00 00 
3201   16A4 DD            push bl
3202   16A5 07 4C 58      call find_set_empty_place
3203   16A8 51 05 00      add sp, 5
3204   16AB             ; --- END FUNCTION CALL
3205   16AB 0A AE 16      jmp _if52_exit
3206   16AE             _if52_exit:
3207   16AE             ; for (i = 1; i <= stars; i++) 
3208   16AE             _for53_init:
3209   16AE FA FF FF      lea d, [bp + -1] ; $i
3210   16B1 DA            push d
3211   16B2                             
3212   16B2 FD 2E 01 00   mov32 cb, $00000001
3212   16B6 00 00 
3213   16B8 E7            pop d
3214   16B9 FD 43         mov [d], b
3215   16BB             _for53_cond:
3216   16BB                             
3217   16BB FA FF FF      lea d, [bp + -1] ; $i
3218   16BE 2A            mov b, [d]
3219   16BF 38 00 00      mov c, 0
3220   16C2             ; --- START RELATIONAL
3221   16C2 D7            push a
3222   16C3 11            mov a, b
3223   16C4 3B 3F 6E      mov d, _stars ; $stars
3224   16C7 32            mov bl, [d]
3225   16C8 A7 00         mov bh, 0
3226   16CA 38 00 00      mov c, 0
3227   16CD B0            cmp a, b
3228   16CE FD 74         sle ; <= (signed)
3229   16D0 E4            pop a
3230   16D1             ; --- END RELATIONAL
3231   16D1 C0 00 00      cmp b, 0
3232   16D4 C6 09 17      je _for53_exit
3233   16D7             _for53_block:
3234   16D7             ; find_set_empty_place(		1,  0,  0); 
3235   16D7                             
3236   16D7             ; --- START FUNCTION CALL
3237   16D7                             
3238   16D7 FD 2E 00 00   mov32 cb, $00000000
3238   16DB 00 00 
3239   16DD FD AB         swp b
3240   16DF D8            push b
3241   16E0                             
3242   16E0 FD 2E 00 00   mov32 cb, $00000000
3242   16E4 00 00 
3243   16E6 FD AB         swp b
3244   16E8 D8            push b
3245   16E9                             
3246   16E9 FD 2E 01 00   mov32 cb, $00000001
3246   16ED 00 00 
3247   16EF DD            push bl
3248   16F0 07 4C 58      call find_set_empty_place
3249   16F3 51 05 00      add sp, 5
3250   16F6             ; --- END FUNCTION CALL
3251   16F6             _for53_update:
3252   16F6                             
3253   16F6 FA FF FF      lea d, [bp + -1] ; $i
3254   16F9 2A            mov b, [d]
3255   16FA 38 00 00      mov c, 0
3256   16FD 11            mov a, b
3257   16FE FD 77         inc b
3258   1700 FA FF FF      lea d, [bp + -1] ; $i
3259   1703 FD 43         mov [d], b
3260   1705 27            mov b, a
3261   1706 0A BB 16      jmp _for53_cond
3262   1709             _for53_exit:
3263   1709 F9            leave
3264   170A 09            ret
3265   170B             
3266   170B             course_control:
3267   170B F8 00 00      enter 0 ; (push bp; mov bp, sp)
3268   170E             ; int i; 
3269   170E 52 02 00      sub sp, 2
3270   1711             ; int c1; 
3271   1711 52 02 00      sub sp, 2
3272   1714             ; int warp; 
3273   1714 52 02 00      sub sp, 2
3274   1717             ; unsigned int n; 
3275   1717 52 02 00      sub sp, 2
3276   171A             ; int c2, c3, c4; 
3277   171A 52 02 00      sub sp, 2
3278   171D 52 02 00      sub sp, 2
3279   1720 52 02 00      sub sp, 2
3280   1723             ; int z1, z2; 
3281   1723 52 02 00      sub sp, 2
3282   1726 52 02 00      sub sp, 2
3283   1729             ; int x1, x2; 
3284   1729 52 02 00      sub sp, 2
3285   172C 52 02 00      sub sp, 2
3286   172F             ; int x, y; 
3287   172F 52 02 00      sub sp, 2
3288   1732 52 02 00      sub sp, 2
3289   1735             ; unsigned char outside = 0;		/* Outside galaxy flag */ 
3290   1735 52 01 00      sub sp, 1
3291   1738             ; --- START LOCAL VAR INITIALIZATION
3292   1738 FA E6 FF      lea d, [bp + -26] ; $outside
3293   173B DA            push d
3294   173C                             
3295   173C FD 2E 00 00   mov32 cb, $00000000
3295   1740 00 00 
3296   1742 E7            pop d
3297   1743 FD 3E         mov [d], bl
3298   1745             ; --- END LOCAL VAR INITIALIZATION
3299   1745             ; unsigned char quad_y_old; 
3300   1745 52 01 00      sub sp, 1
3301   1748             ; unsigned char quad_x_old; 
3302   1748 52 01 00      sub sp, 1
3303   174B             ; puts("Course (0-9): " ); 
3304   174B                             
3305   174B             ; --- START FUNCTION CALL
3306   174B                             
3307   174B 26 80 73      mov b, _s63 ; "Course (0-9): "
3308   174E FD AB         swp b
3309   1750 D8            push b
3310   1751 07 5C 69      call puts
3311   1754 51 02 00      add sp, 2
3312   1757             ; --- END FUNCTION CALL
3313   1757             ; c1 = input_f00(); 
3314   1757 FA FD FF      lea d, [bp + -3] ; $c1
3315   175A DA            push d
3316   175B                             
3317   175B             ; --- START FUNCTION CALL
3318   175B 07 67 06      call input_f00
3319   175E E7            pop d
3320   175F FD 43         mov [d], b
3321   1761             ; if (c1 == 900) 
3322   1761             _if54_cond:
3323   1761                             
3324   1761 FA FD FF      lea d, [bp + -3] ; $c1
3325   1764 2A            mov b, [d]
3326   1765 38 00 00      mov c, 0
3327   1768             ; --- START RELATIONAL
3328   1768 D7            push a
3329   1769 11            mov a, b
3330   176A FD 2E 84 03   mov32 cb, $00000384
3330   176E 00 00 
3331   1770 B0            cmp a, b
3332   1771 FD 71         seq ; ==
3333   1773 E4            pop a
3334   1774             ; --- END RELATIONAL
3335   1774 C0 00 00      cmp b, 0
3336   1777 C6 8A 17      je _if54_exit
3337   177A             _if54_TRUE:
3338   177A             ; c1 = 100; 
3339   177A FA FD FF      lea d, [bp + -3] ; $c1
3340   177D DA            push d
3341   177E                             
3342   177E FD 2E 64 00   mov32 cb, $00000064
3342   1782 00 00 
3343   1784 E7            pop d
3344   1785 FD 43         mov [d], b
3345   1787 0A 8A 17      jmp _if54_exit
3346   178A             _if54_exit:
3347   178A             ; if (c1 < 0 || c1 > 900) { 
3348   178A             _if55_cond:
3349   178A                             
3350   178A FA FD FF      lea d, [bp + -3] ; $c1
3351   178D 2A            mov b, [d]
3352   178E 38 00 00      mov c, 0
3353   1791             ; --- START RELATIONAL
3354   1791 D7            push a
3355   1792 11            mov a, b
3356   1793 FD 2E 00 00   mov32 cb, $00000000
3356   1797 00 00 
3357   1799 B0            cmp a, b
3358   179A FD 73         slt ; < (signed)
3359   179C E4            pop a
3360   179D             ; --- END RELATIONAL
3361   179D             ; --- START LOGICAL OR
3362   179D D7            push a
3363   179E 11            mov a, b
3364   179F FA FD FF      lea d, [bp + -3] ; $c1
3365   17A2 2A            mov b, [d]
3366   17A3 38 00 00      mov c, 0
3367   17A6             ; --- START RELATIONAL
3368   17A6 D7            push a
3369   17A7 11            mov a, b
3370   17A8 FD 2E 84 03   mov32 cb, $00000384
3370   17AC 00 00 
3371   17AE B0            cmp a, b
3372   17AF FD 7F         sgt ; >
3373   17B1 E4            pop a
3374   17B2             ; --- END RELATIONAL
3375   17B2 FD A8         sor a, b ; ||
3376   17B4 E4            pop a
3377   17B5             ; --- END LOGICAL OR
3378   17B5 C0 00 00      cmp b, 0
3379   17B8 C6 D6 17      je _if55_exit
3380   17BB             _if55_TRUE:
3381   17BB             ; printf("Lt. Sulu%s", inc_1); 
3382   17BB                             
3383   17BB             ; --- START FUNCTION CALL
3384   17BB                             
3385   17BB 3B D2 6E      mov d, _inc_1 ; $inc_1
3386   17BE 2A            mov b, [d]
3387   17BF 38 00 00      mov c, 0
3388   17C2 FD AB         swp b
3389   17C4 D8            push b
3390   17C5                             
3391   17C5 26 8F 73      mov b, _s64 ; "Lt. Sulu%s"
3392   17C8 FD AB         swp b
3393   17CA D8            push b
3394   17CB 07 4F 60      call printf
3395   17CE 51 04 00      add sp, 4
3396   17D1             ; --- END FUNCTION CALL
3397   17D1             ; return; 
3398   17D1 F9            leave
3399   17D2 09            ret
3400   17D3 0A D6 17      jmp _if55_exit
3401   17D6             _if55_exit:
3402   17D6             ; if (damage[1] < 0) 
3403   17D6             _if56_cond:
3404   17D6                             
3405   17D6 3B 44 6E      mov d, _damage_data ; $damage
3406   17D9 D7            push a
3407   17DA DA            push d
3408   17DB                             
3409   17DB FD 2E 01 00   mov32 cb, $00000001
3409   17DF 00 00 
3410   17E1 E7            pop d
3411   17E2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3412   17E6 E4            pop a
3413   17E7 2A            mov b, [d]
3414   17E8 38 00 00      mov c, 0
3415   17EB             ; --- START RELATIONAL
3416   17EB D7            push a
3417   17EC 11            mov a, b
3418   17ED FD 2E 00 00   mov32 cb, $00000000
3418   17F1 00 00 
3419   17F3 B0            cmp a, b
3420   17F4 FD 73         slt ; < (signed)
3421   17F6 E4            pop a
3422   17F7             ; --- END RELATIONAL
3423   17F7 C0 00 00      cmp b, 0
3424   17FA C6 16 18      je _if56_exit
3425   17FD             _if56_TRUE:
3426   17FD             ; strcpy(warpmax, "0.2"); 
3427   17FD                             
3428   17FD             ; --- START FUNCTION CALL
3429   17FD                             
3430   17FD 26 9A 73      mov b, _s65 ; "0.2"
3431   1800 FD AB         swp b
3432   1802 D8            push b
3433   1803                             
3434   1803 3B 61 6F      mov d, _warpmax_data ; $warpmax
3435   1806 2D            mov b, d
3436   1807 38 00 00      mov c, 0
3437   180A FD AB         swp b
3438   180C D8            push b
3439   180D 07 97 5E      call strcpy
3440   1810 51 04 00      add sp, 4
3441   1813             ; --- END FUNCTION CALL
3442   1813 0A 16 18      jmp _if56_exit
3443   1816             _if56_exit:
3444   1816             ; printf("Warp Factor (0-%s): ", warpmax); 
3445   1816                             
3446   1816             ; --- START FUNCTION CALL
3447   1816                             
3448   1816 3B 61 6F      mov d, _warpmax_data ; $warpmax
3449   1819 2D            mov b, d
3450   181A 38 00 00      mov c, 0
3451   181D FD AB         swp b
3452   181F D8            push b
3453   1820                             
3454   1820 26 9E 73      mov b, _s66 ; "Warp Factor (0-%s): "
3455   1823 FD AB         swp b
3456   1825 D8            push b
3457   1826 07 4F 60      call printf
3458   1829 51 04 00      add sp, 4
3459   182C             ; --- END FUNCTION CALL
3460   182C             ; warp = input_f00(); 
3461   182C FA FB FF      lea d, [bp + -5] ; $warp
3462   182F DA            push d
3463   1830                             
3464   1830             ; --- START FUNCTION CALL
3465   1830 07 67 06      call input_f00
3466   1833 E7            pop d
3467   1834 FD 43         mov [d], b
3468   1836             ; if (damage[1] < 0 && warp > 20) { 
3469   1836             _if57_cond:
3470   1836                             
3471   1836 3B 44 6E      mov d, _damage_data ; $damage
3472   1839 D7            push a
3473   183A DA            push d
3474   183B                             
3475   183B FD 2E 01 00   mov32 cb, $00000001
3475   183F 00 00 
3476   1841 E7            pop d
3477   1842 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3478   1846 E4            pop a
3479   1847 2A            mov b, [d]
3480   1848 38 00 00      mov c, 0
3481   184B             ; --- START RELATIONAL
3482   184B D7            push a
3483   184C 11            mov a, b
3484   184D FD 2E 00 00   mov32 cb, $00000000
3484   1851 00 00 
3485   1853 B0            cmp a, b
3486   1854 FD 73         slt ; < (signed)
3487   1856 E4            pop a
3488   1857             ; --- END RELATIONAL
3489   1857             ; --- START LOGICAL AND
3490   1857 D7            push a
3491   1858 11            mov a, b
3492   1859 FA FB FF      lea d, [bp + -5] ; $warp
3493   185C 2A            mov b, [d]
3494   185D 38 00 00      mov c, 0
3495   1860             ; --- START RELATIONAL
3496   1860 D7            push a
3497   1861 11            mov a, b
3498   1862 FD 2E 14 00   mov32 cb, $00000014
3498   1866 00 00 
3499   1868 B0            cmp a, b
3500   1869 FD 7F         sgt ; >
3501   186B E4            pop a
3502   186C             ; --- END RELATIONAL
3503   186C FD A7         sand a, b
3504   186E E4            pop a
3505   186F             ; --- END LOGICAL AND
3506   186F C0 00 00      cmp b, 0
3507   1872 C6 86 18      je _if57_exit
3508   1875             _if57_TRUE:
3509   1875             ; printf("Warp Engines are damaged. Maximum speed = Warp 0.2.\n\n"); 
3510   1875                             
3511   1875             ; --- START FUNCTION CALL
3512   1875                             
3513   1875 26 B3 73      mov b, _s67 ; "Warp Engines are damaged. Maximum speed = Warp 0.2.\n\n"
3514   1878 FD AB         swp b
3515   187A D8            push b
3516   187B 07 4F 60      call printf
3517   187E 51 02 00      add sp, 2
3518   1881             ; --- END FUNCTION CALL
3519   1881             ; return; 
3520   1881 F9            leave
3521   1882 09            ret
3522   1883 0A 86 18      jmp _if57_exit
3523   1886             _if57_exit:
3524   1886             ; if (warp <= 0) 
3525   1886             _if58_cond:
3526   1886                             
3527   1886 FA FB FF      lea d, [bp + -5] ; $warp
3528   1889 2A            mov b, [d]
3529   188A 38 00 00      mov c, 0
3530   188D             ; --- START RELATIONAL
3531   188D D7            push a
3532   188E 11            mov a, b
3533   188F FD 2E 00 00   mov32 cb, $00000000
3533   1893 00 00 
3534   1895 B0            cmp a, b
3535   1896 FD 74         sle ; <= (signed)
3536   1898 E4            pop a
3537   1899             ; --- END RELATIONAL
3538   1899 C0 00 00      cmp b, 0
3539   189C C6 A4 18      je _if58_exit
3540   189F             _if58_TRUE:
3541   189F             ; return; 
3542   189F F9            leave
3543   18A0 09            ret
3544   18A1 0A A4 18      jmp _if58_exit
3545   18A4             _if58_exit:
3546   18A4             ; if (warp > 800) { 
3547   18A4             _if59_cond:
3548   18A4                             
3549   18A4 FA FB FF      lea d, [bp + -5] ; $warp
3550   18A7 2A            mov b, [d]
3551   18A8 38 00 00      mov c, 0
3552   18AB             ; --- START RELATIONAL
3553   18AB D7            push a
3554   18AC 11            mov a, b
3555   18AD FD 2E 20 03   mov32 cb, $00000320
3555   18B1 00 00 
3556   18B3 B0            cmp a, b
3557   18B4 FD 7F         sgt ; >
3558   18B6 E4            pop a
3559   18B7             ; --- END RELATIONAL
3560   18B7 C0 00 00      cmp b, 0
3561   18BA C6 E1 18      je _if59_exit
3562   18BD             _if59_TRUE:
3563   18BD             ; printf("Chief Engineer Scott reports:\n  The engines won't take warp %s!\n\n", print100(warp)); 
3564   18BD                             
3565   18BD             ; --- START FUNCTION CALL
3566   18BD                             
3567   18BD             ; --- START FUNCTION CALL
3568   18BD                             
3569   18BD FA FB FF      lea d, [bp + -5] ; $warp
3570   18C0 2A            mov b, [d]
3571   18C1 38 00 00      mov c, 0
3572   18C4 FD AB         swp b
3573   18C6 D8            push b
3574   18C7 07 06 09      call print100
3575   18CA 51 02 00      add sp, 2
3576   18CD             ; --- END FUNCTION CALL
3577   18CD FD AB         swp b
3578   18CF D8            push b
3579   18D0                             
3580   18D0 26 E9 73      mov b, _s68 ; "Chief Engineer Scott reports:\n  The engines won't take warp %s!\n\n"
3581   18D3 FD AB         swp b
3582   18D5 D8            push b
3583   18D6 07 4F 60      call printf
3584   18D9 51 04 00      add sp, 4
3585   18DC             ; --- END FUNCTION CALL
3586   18DC             ; return; 
3587   18DC F9            leave
3588   18DD 09            ret
3589   18DE 0A E1 18      jmp _if59_exit
3590   18E1             _if59_exit:
3591   18E1             ; n = warp * 8; 
3592   18E1 FA F9 FF      lea d, [bp + -7] ; $n
3593   18E4 DA            push d
3594   18E5                             
3595   18E5 FA FB FF      lea d, [bp + -5] ; $warp
3596   18E8 2A            mov b, [d]
3597   18E9 38 00 00      mov c, 0
3598   18EC             ; --- START FACTORS
3599   18EC D7            push a
3600   18ED FD D8         push g
3601   18EF 11            mov a, b
3602   18F0 FD 7A         mov g, c
3603   18F2 FD 2E 08 00   mov32 cb, $00000008
3603   18F6 00 00 
3604   18F8 D7            push a     ; save left operand
3605   18F9 8E            xor a, b   ; xor sign bits
3606   18FA FD AA         swp a      ; swap bytes
3607   18FC 83            mov cl, al ; save result of xor into 'dl'
3608   18FD E4            pop a      ; restore left side operator
3609   18FE DF            push cl    ; save result of xor above
3610   18FF FD AA         swp a  
3611   1901 93 80         test al, $80  
3612   1903 FD AA         swp a  
3613   1905 C6 0A 19      jz skip_invert_a_60  
3614   1908 FD 95         neg a 
3615   190A             skip_invert_a_60:   
3616   190A FD AB         swp b
3617   190C FD 93 80      test bl, $80  
3618   190F FD AB         swp b
3619   1911 C6 16 19      jz skip_invert_b_60  
3620   1914 FD 97         neg b 
3621   1916             skip_invert_b_60:   
3622   1916 AC            mul a, b ; *
3623   1917 FD 78         mov g, a
3624   1919 11            mov a, b
3625   191A EA            pop bl
3626   191B FD 93 80      test bl, $80
3627   191E C6 2B 19      jz _same_signs_60
3628   1921 2F            mov bl, al
3629   1922 95            not a
3630   1923 FD 97         neg b
3631   1925 5B 00 00      adc a, 0
3632   1928 FD 78         mov g, a
3633   192A 11            mov a, b
3634   192B             _same_signs_60:
3635   192B FD 38         mov c, g
3636   192D 27            mov b, a
3637   192E FD F1         pop g
3638   1930 E4            pop a
3639   1931             ; --- END FACTORS
3640   1931 E7            pop d
3641   1932 FD 43         mov [d], b
3642   1934             ; n = cint100(n);	 
3643   1934 FA F9 FF      lea d, [bp + -7] ; $n
3644   1937 DA            push d
3645   1938                             
3646   1938             ; --- START FUNCTION CALL
3647   1938                             
3648   1938 FA F9 FF      lea d, [bp + -7] ; $n
3649   193B 2A            mov b, [d]
3650   193C 38 00 00      mov c, 0
3651   193F FD AB         swp b
3652   1941 D8            push b
3653   1942 07 C4 5D      call cint100
3654   1945 51 02 00      add sp, 2
3655   1948             ; --- END FUNCTION CALL
3656   1948 E7            pop d
3657   1949 FD 43         mov [d], b
3658   194B             ; if (energy - n < 0) { 
3659   194B             _if61_cond:
3660   194B                             
3661   194B 3B 82 6D      mov d, _energy ; $energy
3662   194E 2A            mov b, [d]
3663   194F 38 00 00      mov c, 0
3664   1952             ; --- START TERMS
3665   1952 D7            push a
3666   1953 11            mov a, b
3667   1954 FA F9 FF      lea d, [bp + -7] ; $n
3668   1957 2A            mov b, [d]
3669   1958 38 00 00      mov c, 0
3670   195B 60            sub a, b
3671   195C 27            mov b, a
3672   195D E4            pop a
3673   195E             ; --- END TERMS
3674   195E             ; --- START RELATIONAL
3675   195E D7            push a
3676   195F 11            mov a, b
3677   1960 FD 2E 00 00   mov32 cb, $00000000
3677   1964 00 00 
3678   1966 B0            cmp a, b
3679   1967 FD 75         slu ; < (unsigned)
3680   1969 E4            pop a
3681   196A             ; --- END RELATIONAL
3682   196A C0 00 00      cmp b, 0
3683   196D C6 ED 19      je _if61_exit
3684   1970             _if61_TRUE:
3685   1970             ; printf("Engineering reports:\n  Insufficient energy available for maneuvering at warp %s!\n\n", print100(warp)); 
3686   1970                             
3687   1970             ; --- START FUNCTION CALL
3688   1970                             
3689   1970             ; --- START FUNCTION CALL
3690   1970                             
3691   1970 FA FB FF      lea d, [bp + -5] ; $warp
3692   1973 2A            mov b, [d]
3693   1974 38 00 00      mov c, 0
3694   1977 FD AB         swp b
3695   1979 D8            push b
3696   197A 07 06 09      call print100
3697   197D 51 02 00      add sp, 2
3698   1980             ; --- END FUNCTION CALL
3699   1980 FD AB         swp b
3700   1982 D8            push b
3701   1983                             
3702   1983 26 2A 74      mov b, _s69 ; "Engineering reports:\n  Insufficient energy available for maneuvering at warp %s!\n\n"
3703   1986 FD AB         swp b
3704   1988 D8            push b
3705   1989 07 4F 60      call printf
3706   198C 51 04 00      add sp, 4
3707   198F             ; --- END FUNCTION CALL
3708   198F             ; if (shield >= n && damage[7] >= 0) { 
3709   198F             _if62_cond:
3710   198F                             
3711   198F 3B 3D 6E      mov d, _shield ; $shield
3712   1992 2A            mov b, [d]
3713   1993 38 00 00      mov c, 0
3714   1996             ; --- START RELATIONAL
3715   1996 D7            push a
3716   1997 11            mov a, b
3717   1998 FA F9 FF      lea d, [bp + -7] ; $n
3718   199B 2A            mov b, [d]
3719   199C 38 00 00      mov c, 0
3720   199F B0            cmp a, b
3721   19A0 FD 80         sge ; >=
3722   19A2 E4            pop a
3723   19A3             ; --- END RELATIONAL
3724   19A3             ; --- START LOGICAL AND
3725   19A3 D7            push a
3726   19A4 11            mov a, b
3727   19A5 3B 44 6E      mov d, _damage_data ; $damage
3728   19A8 D7            push a
3729   19A9 DA            push d
3730   19AA                             
3731   19AA FD 2E 07 00   mov32 cb, $00000007
3731   19AE 00 00 
3732   19B0 E7            pop d
3733   19B1 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
3734   19B5 E4            pop a
3735   19B6 2A            mov b, [d]
3736   19B7 38 00 00      mov c, 0
3737   19BA             ; --- START RELATIONAL
3738   19BA D7            push a
3739   19BB 11            mov a, b
3740   19BC FD 2E 00 00   mov32 cb, $00000000
3740   19C0 00 00 
3741   19C2 B0            cmp a, b
3742   19C3 FD 80         sge ; >=
3743   19C5 E4            pop a
3744   19C6             ; --- END RELATIONAL
3745   19C6 FD A7         sand a, b
3746   19C8 E4            pop a
3747   19C9             ; --- END LOGICAL AND
3748   19C9 C0 00 00      cmp b, 0
3749   19CC C6 E8 19      je _if62_exit
3750   19CF             _if62_TRUE:
3751   19CF             ; printf("Deflector Control Room acknowledges:\n  %d units of energy presently deployed to shields.\n", shield); 
3752   19CF                             
3753   19CF             ; --- START FUNCTION CALL
3754   19CF                             
3755   19CF 3B 3D 6E      mov d, _shield ; $shield
3756   19D2 2A            mov b, [d]
3757   19D3 38 00 00      mov c, 0
3758   19D6 FD AB         swp b
3759   19D8 D8            push b
3760   19D9                             
3761   19D9 26 7D 74      mov b, _s70 ; "Deflector Control Room acknowledges:\n  %d units of energy presently deployed to shields.\n"
3762   19DC FD AB         swp b
3763   19DE D8            push b
3764   19DF 07 4F 60      call printf
3765   19E2 51 04 00      add sp, 4
3766   19E5             ; --- END FUNCTION CALL
3767   19E5 0A E8 19      jmp _if62_exit
3768   19E8             _if62_exit:
3769   19E8             ; return; 
3770   19E8 F9            leave
3771   19E9 09            ret
3772   19EA 0A ED 19      jmp _if61_exit
3773   19ED             _if61_exit:
3774   19ED             ; klingons_move(); 
3775   19ED                             
3776   19ED             ; --- START FUNCTION CALL
3777   19ED 07 2B 50      call klingons_move
3778   19F0             ; repair_damage(warp); 
3779   19F0                             
3780   19F0             ; --- START FUNCTION CALL
3781   19F0                             
3782   19F0 FA FB FF      lea d, [bp + -5] ; $warp
3783   19F3 2A            mov b, [d]
3784   19F4 38 00 00      mov c, 0
3785   19F7 FD AB         swp b
3786   19F9 D8            push b
3787   19FA 07 06 55      call repair_damage
3788   19FD 51 02 00      add sp, 2
3789   1A00             ; --- END FUNCTION CALL
3790   1A00             ; z1 = FROM_FIXED00(ship_y); 
3791   1A00 FA F1 FF      lea d, [bp + -15] ; $z1
3792   1A03 DA            push d
3793   1A04                             
3794   1A04             ; --- START FUNCTION CALL
3795   1A04                             
3796   1A04 3B 58 6E      mov d, _ship_y ; $ship_y
3797   1A07 2A            mov b, [d]
3798   1A08 38 00 00      mov c, 0
3799   1A0B FD AB         swp b
3800   1A0D D8            push b
3801   1A0E 07 DC 04      call FROM_FIXED00
3802   1A11 51 02 00      add sp, 2
3803   1A14             ; --- END FUNCTION CALL
3804   1A14 E7            pop d
3805   1A15 FD 43         mov [d], b
3806   1A17             ; z2 = FROM_FIXED00(ship_x); 
3807   1A17 FA EF FF      lea d, [bp + -17] ; $z2
3808   1A1A DA            push d
3809   1A1B                             
3810   1A1B             ; --- START FUNCTION CALL
3811   1A1B                             
3812   1A1B 3B 5A 6E      mov d, _ship_x ; $ship_x
3813   1A1E 2A            mov b, [d]
3814   1A1F 38 00 00      mov c, 0
3815   1A22 FD AB         swp b
3816   1A24 D8            push b
3817   1A25 07 DC 04      call FROM_FIXED00
3818   1A28 51 02 00      add sp, 2
3819   1A2B             ; --- END FUNCTION CALL
3820   1A2B E7            pop d
3821   1A2C FD 43         mov [d], b
3822   1A2E             ; quad[z1+-1][z2+-1] = 		0; 
3823   1A2E 3B 5E 6E      mov d, _quad_data ; $quad
3824   1A31 D7            push a
3825   1A32 DA            push d
3826   1A33                             
3827   1A33 FA F1 FF      lea d, [bp + -15] ; $z1
3828   1A36 2A            mov b, [d]
3829   1A37 38 00 00      mov c, 0
3830   1A3A             ; --- START TERMS
3831   1A3A D7            push a
3832   1A3B 11            mov a, b
3833   1A3C FD 2E FF FF   mov32 cb, $ffffffff
3833   1A40 FF FF 
3834   1A42 56            add b, a
3835   1A43 E4            pop a
3836   1A44             ; --- END TERMS
3837   1A44 E7            pop d
3838   1A45 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
3839   1A49 DA            push d
3840   1A4A                             
3841   1A4A FA EF FF      lea d, [bp + -17] ; $z2
3842   1A4D 2A            mov b, [d]
3843   1A4E 38 00 00      mov c, 0
3844   1A51             ; --- START TERMS
3845   1A51 D7            push a
3846   1A52 11            mov a, b
3847   1A53 FD 2E FF FF   mov32 cb, $ffffffff
3847   1A57 FF FF 
3848   1A59 56            add b, a
3849   1A5A E4            pop a
3850   1A5B             ; --- END TERMS
3851   1A5B E7            pop d
3852   1A5C 5A            add d, b
3853   1A5D E4            pop a
3854   1A5E DA            push d
3855   1A5F                             
3856   1A5F FD 2E 00 00   mov32 cb, $00000000
3856   1A63 00 00 
3857   1A65 E7            pop d
3858   1A66 FD 3E         mov [d], bl
3859   1A68             ; c2 = FROM_FIXED00(c1);	/* Integer part */ 
3860   1A68 FA F7 FF      lea d, [bp + -9] ; $c2
3861   1A6B DA            push d
3862   1A6C                             
3863   1A6C             ; --- START FUNCTION CALL
3864   1A6C                             
3865   1A6C FA FD FF      lea d, [bp + -3] ; $c1
3866   1A6F 2A            mov b, [d]
3867   1A70 38 00 00      mov c, 0
3868   1A73 FD AB         swp b
3869   1A75 D8            push b
3870   1A76 07 DC 04      call FROM_FIXED00
3871   1A79 51 02 00      add sp, 2
3872   1A7C             ; --- END FUNCTION CALL
3873   1A7C E7            pop d
3874   1A7D FD 43         mov [d], b
3875   1A7F             ; c3 = c2 + 1;		/* Next integer part */ 
3876   1A7F FA F5 FF      lea d, [bp + -11] ; $c3
3877   1A82 DA            push d
3878   1A83                             
3879   1A83 FA F7 FF      lea d, [bp + -9] ; $c2
3880   1A86 2A            mov b, [d]
3881   1A87 38 00 00      mov c, 0
3882   1A8A             ; --- START TERMS
3883   1A8A D7            push a
3884   1A8B 11            mov a, b
3885   1A8C FD 2E 01 00   mov32 cb, $00000001
3885   1A90 00 00 
3886   1A92 56            add b, a
3887   1A93 E4            pop a
3888   1A94             ; --- END TERMS
3889   1A94 E7            pop d
3890   1A95 FD 43         mov [d], b
3891   1A97             ; c4 = (c1 - TO_FIXED00(c2));	/* Fractional element in fixed point */ 
3892   1A97 FA F3 FF      lea d, [bp + -13] ; $c4
3893   1A9A DA            push d
3894   1A9B                             
3895   1A9B                             
3896   1A9B FA FD FF      lea d, [bp + -3] ; $c1
3897   1A9E 2A            mov b, [d]
3898   1A9F 38 00 00      mov c, 0
3899   1AA2             ; --- START TERMS
3900   1AA2 D7            push a
3901   1AA3 11            mov a, b
3902   1AA4             ; --- START FUNCTION CALL
3903   1AA4                             
3904   1AA4 FA F7 FF      lea d, [bp + -9] ; $c2
3905   1AA7 2A            mov b, [d]
3906   1AA8 38 00 00      mov c, 0
3907   1AAB FD AB         swp b
3908   1AAD D8            push b
3909   1AAE 07 8B 04      call TO_FIXED00
3910   1AB1 51 02 00      add sp, 2
3911   1AB4             ; --- END FUNCTION CALL
3912   1AB4 60            sub a, b
3913   1AB5 27            mov b, a
3914   1AB6 E4            pop a
3915   1AB7             ; --- END TERMS
3916   1AB7 E7            pop d
3917   1AB8 FD 43         mov [d], b
3918   1ABA             ; x1 = 100 * c[1][c2] + (c[1][c3] - c[1][c2]) * c4; 
3919   1ABA FA ED FF      lea d, [bp + -19] ; $x1
3920   1ABD DA            push d
3921   1ABE                             
3922   1ABE FD 2E 64 00   mov32 cb, $00000064
3922   1AC2 00 00 
3923   1AC4             ; --- START FACTORS
3924   1AC4 D7            push a
3925   1AC5 FD D8         push g
3926   1AC7 11            mov a, b
3927   1AC8 FD 7A         mov g, c
3928   1ACA 3B 61 6D      mov d, _c_data ; $c
3929   1ACD D7            push a
3930   1ACE DA            push d
3931   1ACF                             
3932   1ACF FD 2E 01 00   mov32 cb, $00000001
3932   1AD3 00 00 
3933   1AD5 E7            pop d
3934   1AD6 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
3935   1ADA DA            push d
3936   1ADB                             
3937   1ADB FA F7 FF      lea d, [bp + -9] ; $c2
3938   1ADE 2A            mov b, [d]
3939   1ADF 38 00 00      mov c, 0
3940   1AE2 E7            pop d
3941   1AE3 5A            add d, b
3942   1AE4 E4            pop a
3943   1AE5 32            mov bl, [d]
3944   1AE6 A7 00         mov bh, 0
3945   1AE8 38 00 00      mov c, 0
3946   1AEB D7            push a     ; save left operand
3947   1AEC 8E            xor a, b   ; xor sign bits
3948   1AED FD AA         swp a      ; swap bytes
3949   1AEF 83            mov cl, al ; save result of xor into 'dl'
3950   1AF0 E4            pop a      ; restore left side operator
3951   1AF1 DF            push cl    ; save result of xor above
3952   1AF2 FD AA         swp a  
3953   1AF4 93 80         test al, $80  
3954   1AF6 FD AA         swp a  
3955   1AF8 C6 FD 1A      jz skip_invert_a_63  
3956   1AFB FD 95         neg a 
3957   1AFD             skip_invert_a_63:   
3958   1AFD FD AB         swp b
3959   1AFF FD 93 80      test bl, $80  
3960   1B02 FD AB         swp b
3961   1B04 C6 09 1B      jz skip_invert_b_63  
3962   1B07 FD 97         neg b 
3963   1B09             skip_invert_b_63:   
3964   1B09 AC            mul a, b ; *
3965   1B0A FD 78         mov g, a
3966   1B0C 11            mov a, b
3967   1B0D EA            pop bl
3968   1B0E FD 93 80      test bl, $80
3969   1B11 C6 1E 1B      jz _same_signs_63
3970   1B14 2F            mov bl, al
3971   1B15 95            not a
3972   1B16 FD 97         neg b
3973   1B18 5B 00 00      adc a, 0
3974   1B1B FD 78         mov g, a
3975   1B1D 11            mov a, b
3976   1B1E             _same_signs_63:
3977   1B1E FD 38         mov c, g
3978   1B20 27            mov b, a
3979   1B21 FD F1         pop g
3980   1B23 E4            pop a
3981   1B24             ; --- END FACTORS
3982   1B24             ; --- START TERMS
3983   1B24 D7            push a
3984   1B25 FD D8         push g
3985   1B27 11            mov a, b
3986   1B28 FD 7A         mov g, c
3987   1B2A                             
3988   1B2A 3B 61 6D      mov d, _c_data ; $c
3989   1B2D D7            push a
3990   1B2E DA            push d
3991   1B2F                             
3992   1B2F FD 2E 01 00   mov32 cb, $00000001
3992   1B33 00 00 
3993   1B35 E7            pop d
3994   1B36 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
3995   1B3A DA            push d
3996   1B3B                             
3997   1B3B FA F5 FF      lea d, [bp + -11] ; $c3
3998   1B3E 2A            mov b, [d]
3999   1B3F 38 00 00      mov c, 0
4000   1B42 E7            pop d
4001   1B43 5A            add d, b
4002   1B44 E4            pop a
4003   1B45 32            mov bl, [d]
4004   1B46 A7 00         mov bh, 0
4005   1B48 38 00 00      mov c, 0
4006   1B4B             ; --- START TERMS
4007   1B4B D7            push a
4008   1B4C 11            mov a, b
4009   1B4D 3B 61 6D      mov d, _c_data ; $c
4010   1B50 D7            push a
4011   1B51 DA            push d
4012   1B52                             
4013   1B52 FD 2E 01 00   mov32 cb, $00000001
4013   1B56 00 00 
4014   1B58 E7            pop d
4015   1B59 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
4016   1B5D DA            push d
4017   1B5E                             
4018   1B5E FA F7 FF      lea d, [bp + -9] ; $c2
4019   1B61 2A            mov b, [d]
4020   1B62 38 00 00      mov c, 0
4021   1B65 E7            pop d
4022   1B66 5A            add d, b
4023   1B67 E4            pop a
4024   1B68 32            mov bl, [d]
4025   1B69 A7 00         mov bh, 0
4026   1B6B 38 00 00      mov c, 0
4027   1B6E 60            sub a, b
4028   1B6F 27            mov b, a
4029   1B70 E4            pop a
4030   1B71             ; --- END TERMS
4031   1B71             ; --- START FACTORS
4032   1B71 D7            push a
4033   1B72 FD D8         push g
4034   1B74 11            mov a, b
4035   1B75 FD 7A         mov g, c
4036   1B77 FA F3 FF      lea d, [bp + -13] ; $c4
4037   1B7A 2A            mov b, [d]
4038   1B7B 38 00 00      mov c, 0
4039   1B7E D7            push a     ; save left operand
4040   1B7F 8E            xor a, b   ; xor sign bits
4041   1B80 FD AA         swp a      ; swap bytes
4042   1B82 83            mov cl, al ; save result of xor into 'dl'
4043   1B83 E4            pop a      ; restore left side operator
4044   1B84 DF            push cl    ; save result of xor above
4045   1B85 FD AA         swp a  
4046   1B87 93 80         test al, $80  
4047   1B89 FD AA         swp a  
4048   1B8B C6 90 1B      jz skip_invert_a_64  
4049   1B8E FD 95         neg a 
4050   1B90             skip_invert_a_64:   
4051   1B90 FD AB         swp b
4052   1B92 FD 93 80      test bl, $80  
4053   1B95 FD AB         swp b
4054   1B97 C6 9C 1B      jz skip_invert_b_64  
4055   1B9A FD 97         neg b 
4056   1B9C             skip_invert_b_64:   
4057   1B9C AC            mul a, b ; *
4058   1B9D FD 78         mov g, a
4059   1B9F 11            mov a, b
4060   1BA0 EA            pop bl
4061   1BA1 FD 93 80      test bl, $80
4062   1BA4 C6 B1 1B      jz _same_signs_64
4063   1BA7 2F            mov bl, al
4064   1BA8 95            not a
4065   1BA9 FD 97         neg b
4066   1BAB 5B 00 00      adc a, 0
4067   1BAE FD 78         mov g, a
4068   1BB0 11            mov a, b
4069   1BB1             _same_signs_64:
4070   1BB1 FD 38         mov c, g
4071   1BB3 27            mov b, a
4072   1BB4 FD F1         pop g
4073   1BB6 E4            pop a
4074   1BB7             ; --- END FACTORS
4075   1BB7 FD 15         add32 cb, ga
4076   1BB9 FD F1         pop g
4077   1BBB E4            pop a
4078   1BBC             ; --- END TERMS
4079   1BBC E7            pop d
4080   1BBD FD 43         mov [d], b
4081   1BBF             ; x2 = 100 * c[2][c2] + (c[2][c3] - c[2][c2]) * c4; 
4082   1BBF FA EB FF      lea d, [bp + -21] ; $x2
4083   1BC2 DA            push d
4084   1BC3                             
4085   1BC3 FD 2E 64 00   mov32 cb, $00000064
4085   1BC7 00 00 
4086   1BC9             ; --- START FACTORS
4087   1BC9 D7            push a
4088   1BCA FD D8         push g
4089   1BCC 11            mov a, b
4090   1BCD FD 7A         mov g, c
4091   1BCF 3B 61 6D      mov d, _c_data ; $c
4092   1BD2 D7            push a
4093   1BD3 DA            push d
4094   1BD4                             
4095   1BD4 FD 2E 02 00   mov32 cb, $00000002
4095   1BD8 00 00 
4096   1BDA E7            pop d
4097   1BDB FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
4098   1BDF DA            push d
4099   1BE0                             
4100   1BE0 FA F7 FF      lea d, [bp + -9] ; $c2
4101   1BE3 2A            mov b, [d]
4102   1BE4 38 00 00      mov c, 0
4103   1BE7 E7            pop d
4104   1BE8 5A            add d, b
4105   1BE9 E4            pop a
4106   1BEA 32            mov bl, [d]
4107   1BEB A7 00         mov bh, 0
4108   1BED 38 00 00      mov c, 0
4109   1BF0 D7            push a     ; save left operand
4110   1BF1 8E            xor a, b   ; xor sign bits
4111   1BF2 FD AA         swp a      ; swap bytes
4112   1BF4 83            mov cl, al ; save result of xor into 'dl'
4113   1BF5 E4            pop a      ; restore left side operator
4114   1BF6 DF            push cl    ; save result of xor above
4115   1BF7 FD AA         swp a  
4116   1BF9 93 80         test al, $80  
4117   1BFB FD AA         swp a  
4118   1BFD C6 02 1C      jz skip_invert_a_65  
4119   1C00 FD 95         neg a 
4120   1C02             skip_invert_a_65:   
4121   1C02 FD AB         swp b
4122   1C04 FD 93 80      test bl, $80  
4123   1C07 FD AB         swp b
4124   1C09 C6 0E 1C      jz skip_invert_b_65  
4125   1C0C FD 97         neg b 
4126   1C0E             skip_invert_b_65:   
4127   1C0E AC            mul a, b ; *
4128   1C0F FD 78         mov g, a
4129   1C11 11            mov a, b
4130   1C12 EA            pop bl
4131   1C13 FD 93 80      test bl, $80
4132   1C16 C6 23 1C      jz _same_signs_65
4133   1C19 2F            mov bl, al
4134   1C1A 95            not a
4135   1C1B FD 97         neg b
4136   1C1D 5B 00 00      adc a, 0
4137   1C20 FD 78         mov g, a
4138   1C22 11            mov a, b
4139   1C23             _same_signs_65:
4140   1C23 FD 38         mov c, g
4141   1C25 27            mov b, a
4142   1C26 FD F1         pop g
4143   1C28 E4            pop a
4144   1C29             ; --- END FACTORS
4145   1C29             ; --- START TERMS
4146   1C29 D7            push a
4147   1C2A FD D8         push g
4148   1C2C 11            mov a, b
4149   1C2D FD 7A         mov g, c
4150   1C2F                             
4151   1C2F 3B 61 6D      mov d, _c_data ; $c
4152   1C32 D7            push a
4153   1C33 DA            push d
4154   1C34                             
4155   1C34 FD 2E 02 00   mov32 cb, $00000002
4155   1C38 00 00 
4156   1C3A E7            pop d
4157   1C3B FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
4158   1C3F DA            push d
4159   1C40                             
4160   1C40 FA F5 FF      lea d, [bp + -11] ; $c3
4161   1C43 2A            mov b, [d]
4162   1C44 38 00 00      mov c, 0
4163   1C47 E7            pop d
4164   1C48 5A            add d, b
4165   1C49 E4            pop a
4166   1C4A 32            mov bl, [d]
4167   1C4B A7 00         mov bh, 0
4168   1C4D 38 00 00      mov c, 0
4169   1C50             ; --- START TERMS
4170   1C50 D7            push a
4171   1C51 11            mov a, b
4172   1C52 3B 61 6D      mov d, _c_data ; $c
4173   1C55 D7            push a
4174   1C56 DA            push d
4175   1C57                             
4176   1C57 FD 2E 02 00   mov32 cb, $00000002
4176   1C5B 00 00 
4177   1C5D E7            pop d
4178   1C5E FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
4179   1C62 DA            push d
4180   1C63                             
4181   1C63 FA F7 FF      lea d, [bp + -9] ; $c2
4182   1C66 2A            mov b, [d]
4183   1C67 38 00 00      mov c, 0
4184   1C6A E7            pop d
4185   1C6B 5A            add d, b
4186   1C6C E4            pop a
4187   1C6D 32            mov bl, [d]
4188   1C6E A7 00         mov bh, 0
4189   1C70 38 00 00      mov c, 0
4190   1C73 60            sub a, b
4191   1C74 27            mov b, a
4192   1C75 E4            pop a
4193   1C76             ; --- END TERMS
4194   1C76             ; --- START FACTORS
4195   1C76 D7            push a
4196   1C77 FD D8         push g
4197   1C79 11            mov a, b
4198   1C7A FD 7A         mov g, c
4199   1C7C FA F3 FF      lea d, [bp + -13] ; $c4
4200   1C7F 2A            mov b, [d]
4201   1C80 38 00 00      mov c, 0
4202   1C83 D7            push a     ; save left operand
4203   1C84 8E            xor a, b   ; xor sign bits
4204   1C85 FD AA         swp a      ; swap bytes
4205   1C87 83            mov cl, al ; save result of xor into 'dl'
4206   1C88 E4            pop a      ; restore left side operator
4207   1C89 DF            push cl    ; save result of xor above
4208   1C8A FD AA         swp a  
4209   1C8C 93 80         test al, $80  
4210   1C8E FD AA         swp a  
4211   1C90 C6 95 1C      jz skip_invert_a_66  
4212   1C93 FD 95         neg a 
4213   1C95             skip_invert_a_66:   
4214   1C95 FD AB         swp b
4215   1C97 FD 93 80      test bl, $80  
4216   1C9A FD AB         swp b
4217   1C9C C6 A1 1C      jz skip_invert_b_66  
4218   1C9F FD 97         neg b 
4219   1CA1             skip_invert_b_66:   
4220   1CA1 AC            mul a, b ; *
4221   1CA2 FD 78         mov g, a
4222   1CA4 11            mov a, b
4223   1CA5 EA            pop bl
4224   1CA6 FD 93 80      test bl, $80
4225   1CA9 C6 B6 1C      jz _same_signs_66
4226   1CAC 2F            mov bl, al
4227   1CAD 95            not a
4228   1CAE FD 97         neg b
4229   1CB0 5B 00 00      adc a, 0
4230   1CB3 FD 78         mov g, a
4231   1CB5 11            mov a, b
4232   1CB6             _same_signs_66:
4233   1CB6 FD 38         mov c, g
4234   1CB8 27            mov b, a
4235   1CB9 FD F1         pop g
4236   1CBB E4            pop a
4237   1CBC             ; --- END FACTORS
4238   1CBC FD 15         add32 cb, ga
4239   1CBE FD F1         pop g
4240   1CC0 E4            pop a
4241   1CC1             ; --- END TERMS
4242   1CC1 E7            pop d
4243   1CC2 FD 43         mov [d], b
4244   1CC4             ; x = ship_y; 
4245   1CC4 FA E9 FF      lea d, [bp + -23] ; $x
4246   1CC7 DA            push d
4247   1CC8                             
4248   1CC8 3B 58 6E      mov d, _ship_y ; $ship_y
4249   1CCB 2A            mov b, [d]
4250   1CCC 38 00 00      mov c, 0
4251   1CCF E7            pop d
4252   1CD0 FD 43         mov [d], b
4253   1CD2             ; y = ship_x; 
4254   1CD2 FA E7 FF      lea d, [bp + -25] ; $y
4255   1CD5 DA            push d
4256   1CD6                             
4257   1CD6 3B 5A 6E      mov d, _ship_x ; $ship_x
4258   1CD9 2A            mov b, [d]
4259   1CDA 38 00 00      mov c, 0
4260   1CDD E7            pop d
4261   1CDE FD 43         mov [d], b
4262   1CE0             ; for (i = 1; i <= n; i++) { 
4263   1CE0             _for67_init:
4264   1CE0 FA FF FF      lea d, [bp + -1] ; $i
4265   1CE3 DA            push d
4266   1CE4                             
4267   1CE4 FD 2E 01 00   mov32 cb, $00000001
4267   1CE8 00 00 
4268   1CEA E7            pop d
4269   1CEB FD 43         mov [d], b
4270   1CED             _for67_cond:
4271   1CED                             
4272   1CED FA FF FF      lea d, [bp + -1] ; $i
4273   1CF0 2A            mov b, [d]
4274   1CF1 38 00 00      mov c, 0
4275   1CF4             ; --- START RELATIONAL
4276   1CF4 D7            push a
4277   1CF5 11            mov a, b
4278   1CF6 FA F9 FF      lea d, [bp + -7] ; $n
4279   1CF9 2A            mov b, [d]
4280   1CFA 38 00 00      mov c, 0
4281   1CFD B0            cmp a, b
4282   1CFE FD 74         sle ; <= (signed)
4283   1D00 E4            pop a
4284   1D01             ; --- END RELATIONAL
4285   1D01 C0 00 00      cmp b, 0
4286   1D04 C6 FE 23      je _for67_exit
4287   1D07             _for67_block:
4288   1D07             ; ship_y = ship_y + x1; 
4289   1D07 3B 58 6E      mov d, _ship_y ; $ship_y
4290   1D0A DA            push d
4291   1D0B                             
4292   1D0B 3B 58 6E      mov d, _ship_y ; $ship_y
4293   1D0E 2A            mov b, [d]
4294   1D0F 38 00 00      mov c, 0
4295   1D12             ; --- START TERMS
4296   1D12 D7            push a
4297   1D13 11            mov a, b
4298   1D14 FA ED FF      lea d, [bp + -19] ; $x1
4299   1D17 2A            mov b, [d]
4300   1D18 38 00 00      mov c, 0
4301   1D1B 56            add b, a
4302   1D1C E4            pop a
4303   1D1D             ; --- END TERMS
4304   1D1D E7            pop d
4305   1D1E FD 43         mov [d], b
4306   1D20             ; ship_x = ship_x + x2; 
4307   1D20 3B 5A 6E      mov d, _ship_x ; $ship_x
4308   1D23 DA            push d
4309   1D24                             
4310   1D24 3B 5A 6E      mov d, _ship_x ; $ship_x
4311   1D27 2A            mov b, [d]
4312   1D28 38 00 00      mov c, 0
4313   1D2B             ; --- START TERMS
4314   1D2B D7            push a
4315   1D2C 11            mov a, b
4316   1D2D FA EB FF      lea d, [bp + -21] ; $x2
4317   1D30 2A            mov b, [d]
4318   1D31 38 00 00      mov c, 0
4319   1D34 56            add b, a
4320   1D35 E4            pop a
4321   1D36             ; --- END TERMS
4322   1D36 E7            pop d
4323   1D37 FD 43         mov [d], b
4324   1D39             ; z1 = FROM_FIXED00(ship_y); 
4325   1D39 FA F1 FF      lea d, [bp + -15] ; $z1
4326   1D3C DA            push d
4327   1D3D                             
4328   1D3D             ; --- START FUNCTION CALL
4329   1D3D                             
4330   1D3D 3B 58 6E      mov d, _ship_y ; $ship_y
4331   1D40 2A            mov b, [d]
4332   1D41 38 00 00      mov c, 0
4333   1D44 FD AB         swp b
4334   1D46 D8            push b
4335   1D47 07 DC 04      call FROM_FIXED00
4336   1D4A 51 02 00      add sp, 2
4337   1D4D             ; --- END FUNCTION CALL
4338   1D4D E7            pop d
4339   1D4E FD 43         mov [d], b
4340   1D50             ; z2 = FROM_FIXED00(ship_x);	/* ?? cint100 ?? */ 
4341   1D50 FA EF FF      lea d, [bp + -17] ; $z2
4342   1D53 DA            push d
4343   1D54                             
4344   1D54             ; --- START FUNCTION CALL
4345   1D54                             
4346   1D54 3B 5A 6E      mov d, _ship_x ; $ship_x
4347   1D57 2A            mov b, [d]
4348   1D58 38 00 00      mov c, 0
4349   1D5B FD AB         swp b
4350   1D5D D8            push b
4351   1D5E 07 DC 04      call FROM_FIXED00
4352   1D61 51 02 00      add sp, 2
4353   1D64             ; --- END FUNCTION CALL
4354   1D64 E7            pop d
4355   1D65 FD 43         mov [d], b
4356   1D67             ; if (z1 < 1 || z1 >= 9 || z2 < 1 || z2 >= 9) { 
4357   1D67             _if68_cond:
4358   1D67                             
4359   1D67 FA F1 FF      lea d, [bp + -15] ; $z1
4360   1D6A 2A            mov b, [d]
4361   1D6B 38 00 00      mov c, 0
4362   1D6E             ; --- START RELATIONAL
4363   1D6E D7            push a
4364   1D6F 11            mov a, b
4365   1D70 FD 2E 01 00   mov32 cb, $00000001
4365   1D74 00 00 
4366   1D76 B0            cmp a, b
4367   1D77 FD 73         slt ; < (signed)
4368   1D79 E4            pop a
4369   1D7A             ; --- END RELATIONAL
4370   1D7A             ; --- START LOGICAL OR
4371   1D7A D7            push a
4372   1D7B 11            mov a, b
4373   1D7C FA F1 FF      lea d, [bp + -15] ; $z1
4374   1D7F 2A            mov b, [d]
4375   1D80 38 00 00      mov c, 0
4376   1D83             ; --- START RELATIONAL
4377   1D83 D7            push a
4378   1D84 11            mov a, b
4379   1D85 FD 2E 09 00   mov32 cb, $00000009
4379   1D89 00 00 
4380   1D8B B0            cmp a, b
4381   1D8C FD 80         sge ; >=
4382   1D8E E4            pop a
4383   1D8F             ; --- END RELATIONAL
4384   1D8F FD A8         sor a, b ; ||
4385   1D91 11            mov a, b
4386   1D92 FA EF FF      lea d, [bp + -17] ; $z2
4387   1D95 2A            mov b, [d]
4388   1D96 38 00 00      mov c, 0
4389   1D99             ; --- START RELATIONAL
4390   1D99 D7            push a
4391   1D9A 11            mov a, b
4392   1D9B FD 2E 01 00   mov32 cb, $00000001
4392   1D9F 00 00 
4393   1DA1 B0            cmp a, b
4394   1DA2 FD 73         slt ; < (signed)
4395   1DA4 E4            pop a
4396   1DA5             ; --- END RELATIONAL
4397   1DA5 FD A8         sor a, b ; ||
4398   1DA7 11            mov a, b
4399   1DA8 FA EF FF      lea d, [bp + -17] ; $z2
4400   1DAB 2A            mov b, [d]
4401   1DAC 38 00 00      mov c, 0
4402   1DAF             ; --- START RELATIONAL
4403   1DAF D7            push a
4404   1DB0 11            mov a, b
4405   1DB1 FD 2E 09 00   mov32 cb, $00000009
4405   1DB5 00 00 
4406   1DB7 B0            cmp a, b
4407   1DB8 FD 80         sge ; >=
4408   1DBA E4            pop a
4409   1DBB             ; --- END RELATIONAL
4410   1DBB FD A8         sor a, b ; ||
4411   1DBD E4            pop a
4412   1DBE             ; --- END LOGICAL OR
4413   1DBE C0 00 00      cmp b, 0
4414   1DC1 C6 34 23      je _if68_exit
4415   1DC4             _if68_TRUE:
4416   1DC4             ; outside = 0;		/* Outside galaxy flag */ 
4417   1DC4 FA E6 FF      lea d, [bp + -26] ; $outside
4418   1DC7 DA            push d
4419   1DC8                             
4420   1DC8 FD 2E 00 00   mov32 cb, $00000000
4420   1DCC 00 00 
4421   1DCE E7            pop d
4422   1DCF FD 3E         mov [d], bl
4423   1DD1             ; quad_y_old = quad_y; 
4424   1DD1 FA E5 FF      lea d, [bp + -27] ; $quad_y_old
4425   1DD4 DA            push d
4426   1DD5                             
4427   1DD5 3B 39 6E      mov d, _quad_y ; $quad_y
4428   1DD8 2A            mov b, [d]
4429   1DD9 38 00 00      mov c, 0
4430   1DDC E7            pop d
4431   1DDD FD 3E         mov [d], bl
4432   1DDF             ; quad_x_old = quad_x; 
4433   1DDF FA E4 FF      lea d, [bp + -28] ; $quad_x_old
4434   1DE2 DA            push d
4435   1DE3                             
4436   1DE3 3B 3B 6E      mov d, _quad_x ; $quad_x
4437   1DE6 2A            mov b, [d]
4438   1DE7 38 00 00      mov c, 0
4439   1DEA E7            pop d
4440   1DEB FD 3E         mov [d], bl
4441   1DED             ; x = (800 * quad_y) + x + (n * x1); 
4442   1DED FA E9 FF      lea d, [bp + -23] ; $x
4443   1DF0 DA            push d
4444   1DF1                             
4445   1DF1                             
4446   1DF1 FD 2E 20 03   mov32 cb, $00000320
4446   1DF5 00 00 
4447   1DF7             ; --- START FACTORS
4448   1DF7 D7            push a
4449   1DF8 FD D8         push g
4450   1DFA 11            mov a, b
4451   1DFB FD 7A         mov g, c
4452   1DFD 3B 39 6E      mov d, _quad_y ; $quad_y
4453   1E00 2A            mov b, [d]
4454   1E01 38 00 00      mov c, 0
4455   1E04 D7            push a     ; save left operand
4456   1E05 8E            xor a, b   ; xor sign bits
4457   1E06 FD AA         swp a      ; swap bytes
4458   1E08 83            mov cl, al ; save result of xor into 'dl'
4459   1E09 E4            pop a      ; restore left side operator
4460   1E0A DF            push cl    ; save result of xor above
4461   1E0B FD AA         swp a  
4462   1E0D 93 80         test al, $80  
4463   1E0F FD AA         swp a  
4464   1E11 C6 16 1E      jz skip_invert_a_69  
4465   1E14 FD 95         neg a 
4466   1E16             skip_invert_a_69:   
4467   1E16 FD AB         swp b
4468   1E18 FD 93 80      test bl, $80  
4469   1E1B FD AB         swp b
4470   1E1D C6 22 1E      jz skip_invert_b_69  
4471   1E20 FD 97         neg b 
4472   1E22             skip_invert_b_69:   
4473   1E22 AC            mul a, b ; *
4474   1E23 FD 78         mov g, a
4475   1E25 11            mov a, b
4476   1E26 EA            pop bl
4477   1E27 FD 93 80      test bl, $80
4478   1E2A C6 37 1E      jz _same_signs_69
4479   1E2D 2F            mov bl, al
4480   1E2E 95            not a
4481   1E2F FD 97         neg b
4482   1E31 5B 00 00      adc a, 0
4483   1E34 FD 78         mov g, a
4484   1E36 11            mov a, b
4485   1E37             _same_signs_69:
4486   1E37 FD 38         mov c, g
4487   1E39 27            mov b, a
4488   1E3A FD F1         pop g
4489   1E3C E4            pop a
4490   1E3D             ; --- END FACTORS
4491   1E3D             ; --- START TERMS
4492   1E3D D7            push a
4493   1E3E FD D8         push g
4494   1E40 11            mov a, b
4495   1E41 FD 7A         mov g, c
4496   1E43 FA E9 FF      lea d, [bp + -23] ; $x
4497   1E46 2A            mov b, [d]
4498   1E47 38 00 00      mov c, 0
4499   1E4A FD 15         add32 cb, ga
4500   1E4C 11            mov a, b
4501   1E4D FD 7A         mov g, c
4502   1E4F                             
4503   1E4F FA F9 FF      lea d, [bp + -7] ; $n
4504   1E52 2A            mov b, [d]
4505   1E53 38 00 00      mov c, 0
4506   1E56             ; --- START FACTORS
4507   1E56 D7            push a
4508   1E57 FD D8         push g
4509   1E59 11            mov a, b
4510   1E5A FD 7A         mov g, c
4511   1E5C FA ED FF      lea d, [bp + -19] ; $x1
4512   1E5F 2A            mov b, [d]
4513   1E60 38 00 00      mov c, 0
4514   1E63 D7            push a     ; save left operand
4515   1E64 8E            xor a, b   ; xor sign bits
4516   1E65 FD AA         swp a      ; swap bytes
4517   1E67 83            mov cl, al ; save result of xor into 'dl'
4518   1E68 E4            pop a      ; restore left side operator
4519   1E69 DF            push cl    ; save result of xor above
4520   1E6A FD AA         swp a  
4521   1E6C 93 80         test al, $80  
4522   1E6E FD AA         swp a  
4523   1E70 C6 75 1E      jz skip_invert_a_70  
4524   1E73 FD 95         neg a 
4525   1E75             skip_invert_a_70:   
4526   1E75 FD AB         swp b
4527   1E77 FD 93 80      test bl, $80  
4528   1E7A FD AB         swp b
4529   1E7C C6 81 1E      jz skip_invert_b_70  
4530   1E7F FD 97         neg b 
4531   1E81             skip_invert_b_70:   
4532   1E81 AC            mul a, b ; *
4533   1E82 FD 78         mov g, a
4534   1E84 11            mov a, b
4535   1E85 EA            pop bl
4536   1E86 FD 93 80      test bl, $80
4537   1E89 C6 96 1E      jz _same_signs_70
4538   1E8C 2F            mov bl, al
4539   1E8D 95            not a
4540   1E8E FD 97         neg b
4541   1E90 5B 00 00      adc a, 0
4542   1E93 FD 78         mov g, a
4543   1E95 11            mov a, b
4544   1E96             _same_signs_70:
4545   1E96 FD 38         mov c, g
4546   1E98 27            mov b, a
4547   1E99 FD F1         pop g
4548   1E9B E4            pop a
4549   1E9C             ; --- END FACTORS
4550   1E9C FD 15         add32 cb, ga
4551   1E9E FD F1         pop g
4552   1EA0 E4            pop a
4553   1EA1             ; --- END TERMS
4554   1EA1 E7            pop d
4555   1EA2 FD 43         mov [d], b
4556   1EA4             ; y = (800 * quad_x) + y + (n * x2); 
4557   1EA4 FA E7 FF      lea d, [bp + -25] ; $y
4558   1EA7 DA            push d
4559   1EA8                             
4560   1EA8                             
4561   1EA8 FD 2E 20 03   mov32 cb, $00000320
4561   1EAC 00 00 
4562   1EAE             ; --- START FACTORS
4563   1EAE D7            push a
4564   1EAF FD D8         push g
4565   1EB1 11            mov a, b
4566   1EB2 FD 7A         mov g, c
4567   1EB4 3B 3B 6E      mov d, _quad_x ; $quad_x
4568   1EB7 2A            mov b, [d]
4569   1EB8 38 00 00      mov c, 0
4570   1EBB D7            push a     ; save left operand
4571   1EBC 8E            xor a, b   ; xor sign bits
4572   1EBD FD AA         swp a      ; swap bytes
4573   1EBF 83            mov cl, al ; save result of xor into 'dl'
4574   1EC0 E4            pop a      ; restore left side operator
4575   1EC1 DF            push cl    ; save result of xor above
4576   1EC2 FD AA         swp a  
4577   1EC4 93 80         test al, $80  
4578   1EC6 FD AA         swp a  
4579   1EC8 C6 CD 1E      jz skip_invert_a_71  
4580   1ECB FD 95         neg a 
4581   1ECD             skip_invert_a_71:   
4582   1ECD FD AB         swp b
4583   1ECF FD 93 80      test bl, $80  
4584   1ED2 FD AB         swp b
4585   1ED4 C6 D9 1E      jz skip_invert_b_71  
4586   1ED7 FD 97         neg b 
4587   1ED9             skip_invert_b_71:   
4588   1ED9 AC            mul a, b ; *
4589   1EDA FD 78         mov g, a
4590   1EDC 11            mov a, b
4591   1EDD EA            pop bl
4592   1EDE FD 93 80      test bl, $80
4593   1EE1 C6 EE 1E      jz _same_signs_71
4594   1EE4 2F            mov bl, al
4595   1EE5 95            not a
4596   1EE6 FD 97         neg b
4597   1EE8 5B 00 00      adc a, 0
4598   1EEB FD 78         mov g, a
4599   1EED 11            mov a, b
4600   1EEE             _same_signs_71:
4601   1EEE FD 38         mov c, g
4602   1EF0 27            mov b, a
4603   1EF1 FD F1         pop g
4604   1EF3 E4            pop a
4605   1EF4             ; --- END FACTORS
4606   1EF4             ; --- START TERMS
4607   1EF4 D7            push a
4608   1EF5 FD D8         push g
4609   1EF7 11            mov a, b
4610   1EF8 FD 7A         mov g, c
4611   1EFA FA E7 FF      lea d, [bp + -25] ; $y
4612   1EFD 2A            mov b, [d]
4613   1EFE 38 00 00      mov c, 0
4614   1F01 FD 15         add32 cb, ga
4615   1F03 11            mov a, b
4616   1F04 FD 7A         mov g, c
4617   1F06                             
4618   1F06 FA F9 FF      lea d, [bp + -7] ; $n
4619   1F09 2A            mov b, [d]
4620   1F0A 38 00 00      mov c, 0
4621   1F0D             ; --- START FACTORS
4622   1F0D D7            push a
4623   1F0E FD D8         push g
4624   1F10 11            mov a, b
4625   1F11 FD 7A         mov g, c
4626   1F13 FA EB FF      lea d, [bp + -21] ; $x2
4627   1F16 2A            mov b, [d]
4628   1F17 38 00 00      mov c, 0
4629   1F1A D7            push a     ; save left operand
4630   1F1B 8E            xor a, b   ; xor sign bits
4631   1F1C FD AA         swp a      ; swap bytes
4632   1F1E 83            mov cl, al ; save result of xor into 'dl'
4633   1F1F E4            pop a      ; restore left side operator
4634   1F20 DF            push cl    ; save result of xor above
4635   1F21 FD AA         swp a  
4636   1F23 93 80         test al, $80  
4637   1F25 FD AA         swp a  
4638   1F27 C6 2C 1F      jz skip_invert_a_72  
4639   1F2A FD 95         neg a 
4640   1F2C             skip_invert_a_72:   
4641   1F2C FD AB         swp b
4642   1F2E FD 93 80      test bl, $80  
4643   1F31 FD AB         swp b
4644   1F33 C6 38 1F      jz skip_invert_b_72  
4645   1F36 FD 97         neg b 
4646   1F38             skip_invert_b_72:   
4647   1F38 AC            mul a, b ; *
4648   1F39 FD 78         mov g, a
4649   1F3B 11            mov a, b
4650   1F3C EA            pop bl
4651   1F3D FD 93 80      test bl, $80
4652   1F40 C6 4D 1F      jz _same_signs_72
4653   1F43 2F            mov bl, al
4654   1F44 95            not a
4655   1F45 FD 97         neg b
4656   1F47 5B 00 00      adc a, 0
4657   1F4A FD 78         mov g, a
4658   1F4C 11            mov a, b
4659   1F4D             _same_signs_72:
4660   1F4D FD 38         mov c, g
4661   1F4F 27            mov b, a
4662   1F50 FD F1         pop g
4663   1F52 E4            pop a
4664   1F53             ; --- END FACTORS
4665   1F53 FD 15         add32 cb, ga
4666   1F55 FD F1         pop g
4667   1F57 E4            pop a
4668   1F58             ; --- END TERMS
4669   1F58 E7            pop d
4670   1F59 FD 43         mov [d], b
4671   1F5B             ; quad_y = x / 800;	/* Fixed point to int and divide by 8 */ 
4672   1F5B 3B 39 6E      mov d, _quad_y ; $quad_y
4673   1F5E DA            push d
4674   1F5F                             
4675   1F5F FA E9 FF      lea d, [bp + -23] ; $x
4676   1F62 2A            mov b, [d]
4677   1F63 38 00 00      mov c, 0
4678   1F66             ; --- START FACTORS
4679   1F66 D7            push a
4680   1F67 FD D8         push g
4681   1F69 11            mov a, b
4682   1F6A FD 7A         mov g, c
4683   1F6C FD 2E 20 03   mov32 cb, $00000320
4683   1F70 00 00 
4684   1F72 FD D8         push g ; save 'g' as the div instruction uses it
4685   1F74 AE            div a, b ; /, a: quotient, b: remainder
4686   1F75 FD F1         pop g
4687   1F77 FD 38         mov c, g
4688   1F79 27            mov b, a
4689   1F7A FD F1         pop g
4690   1F7C E4            pop a
4691   1F7D             ; --- END FACTORS
4692   1F7D E7            pop d
4693   1F7E FD 43         mov [d], b
4694   1F80             ; quad_x = y / 800;	/* Ditto */ 
4695   1F80 3B 3B 6E      mov d, _quad_x ; $quad_x
4696   1F83 DA            push d
4697   1F84                             
4698   1F84 FA E7 FF      lea d, [bp + -25] ; $y
4699   1F87 2A            mov b, [d]
4700   1F88 38 00 00      mov c, 0
4701   1F8B             ; --- START FACTORS
4702   1F8B D7            push a
4703   1F8C FD D8         push g
4704   1F8E 11            mov a, b
4705   1F8F FD 7A         mov g, c
4706   1F91 FD 2E 20 03   mov32 cb, $00000320
4706   1F95 00 00 
4707   1F97 FD D8         push g ; save 'g' as the div instruction uses it
4708   1F99 AE            div a, b ; /, a: quotient, b: remainder
4709   1F9A FD F1         pop g
4710   1F9C FD 38         mov c, g
4711   1F9E 27            mov b, a
4712   1F9F FD F1         pop g
4713   1FA1 E4            pop a
4714   1FA2             ; --- END FACTORS
4715   1FA2 E7            pop d
4716   1FA3 FD 43         mov [d], b
4717   1FA5             ; ship_y = x - (quad_y * 800); 
4718   1FA5 3B 58 6E      mov d, _ship_y ; $ship_y
4719   1FA8 DA            push d
4720   1FA9                             
4721   1FA9 FA E9 FF      lea d, [bp + -23] ; $x
4722   1FAC 2A            mov b, [d]
4723   1FAD 38 00 00      mov c, 0
4724   1FB0             ; --- START TERMS
4725   1FB0 D7            push a
4726   1FB1 11            mov a, b
4727   1FB2                             
4728   1FB2 3B 39 6E      mov d, _quad_y ; $quad_y
4729   1FB5 2A            mov b, [d]
4730   1FB6 38 00 00      mov c, 0
4731   1FB9             ; --- START FACTORS
4732   1FB9 D7            push a
4733   1FBA FD D8         push g
4734   1FBC 11            mov a, b
4735   1FBD FD 7A         mov g, c
4736   1FBF FD 2E 20 03   mov32 cb, $00000320
4736   1FC3 00 00 
4737   1FC5 D7            push a     ; save left operand
4738   1FC6 8E            xor a, b   ; xor sign bits
4739   1FC7 FD AA         swp a      ; swap bytes
4740   1FC9 83            mov cl, al ; save result of xor into 'dl'
4741   1FCA E4            pop a      ; restore left side operator
4742   1FCB DF            push cl    ; save result of xor above
4743   1FCC FD AA         swp a  
4744   1FCE 93 80         test al, $80  
4745   1FD0 FD AA         swp a  
4746   1FD2 C6 D7 1F      jz skip_invert_a_75  
4747   1FD5 FD 95         neg a 
4748   1FD7             skip_invert_a_75:   
4749   1FD7 FD AB         swp b
4750   1FD9 FD 93 80      test bl, $80  
4751   1FDC FD AB         swp b
4752   1FDE C6 E3 1F      jz skip_invert_b_75  
4753   1FE1 FD 97         neg b 
4754   1FE3             skip_invert_b_75:   
4755   1FE3 AC            mul a, b ; *
4756   1FE4 FD 78         mov g, a
4757   1FE6 11            mov a, b
4758   1FE7 EA            pop bl
4759   1FE8 FD 93 80      test bl, $80
4760   1FEB C6 F8 1F      jz _same_signs_75
4761   1FEE 2F            mov bl, al
4762   1FEF 95            not a
4763   1FF0 FD 97         neg b
4764   1FF2 5B 00 00      adc a, 0
4765   1FF5 FD 78         mov g, a
4766   1FF7 11            mov a, b
4767   1FF8             _same_signs_75:
4768   1FF8 FD 38         mov c, g
4769   1FFA 27            mov b, a
4770   1FFB FD F1         pop g
4771   1FFD E4            pop a
4772   1FFE             ; --- END FACTORS
4773   1FFE FD 1C         sub32 ga, cb
4774   2000 27            mov b, a
4775   2001 FD 38         mov c, g
4776   2003 E4            pop a
4777   2004             ; --- END TERMS
4778   2004 E7            pop d
4779   2005 FD 43         mov [d], b
4780   2007             ; ship_x = y - (quad_x * 800); 
4781   2007 3B 5A 6E      mov d, _ship_x ; $ship_x
4782   200A DA            push d
4783   200B                             
4784   200B FA E7 FF      lea d, [bp + -25] ; $y
4785   200E 2A            mov b, [d]
4786   200F 38 00 00      mov c, 0
4787   2012             ; --- START TERMS
4788   2012 D7            push a
4789   2013 11            mov a, b
4790   2014                             
4791   2014 3B 3B 6E      mov d, _quad_x ; $quad_x
4792   2017 2A            mov b, [d]
4793   2018 38 00 00      mov c, 0
4794   201B             ; --- START FACTORS
4795   201B D7            push a
4796   201C FD D8         push g
4797   201E 11            mov a, b
4798   201F FD 7A         mov g, c
4799   2021 FD 2E 20 03   mov32 cb, $00000320
4799   2025 00 00 
4800   2027 D7            push a     ; save left operand
4801   2028 8E            xor a, b   ; xor sign bits
4802   2029 FD AA         swp a      ; swap bytes
4803   202B 83            mov cl, al ; save result of xor into 'dl'
4804   202C E4            pop a      ; restore left side operator
4805   202D DF            push cl    ; save result of xor above
4806   202E FD AA         swp a  
4807   2030 93 80         test al, $80  
4808   2032 FD AA         swp a  
4809   2034 C6 39 20      jz skip_invert_a_76  
4810   2037 FD 95         neg a 
4811   2039             skip_invert_a_76:   
4812   2039 FD AB         swp b
4813   203B FD 93 80      test bl, $80  
4814   203E FD AB         swp b
4815   2040 C6 45 20      jz skip_invert_b_76  
4816   2043 FD 97         neg b 
4817   2045             skip_invert_b_76:   
4818   2045 AC            mul a, b ; *
4819   2046 FD 78         mov g, a
4820   2048 11            mov a, b
4821   2049 EA            pop bl
4822   204A FD 93 80      test bl, $80
4823   204D C6 5A 20      jz _same_signs_76
4824   2050 2F            mov bl, al
4825   2051 95            not a
4826   2052 FD 97         neg b
4827   2054 5B 00 00      adc a, 0
4828   2057 FD 78         mov g, a
4829   2059 11            mov a, b
4830   205A             _same_signs_76:
4831   205A FD 38         mov c, g
4832   205C 27            mov b, a
4833   205D FD F1         pop g
4834   205F E4            pop a
4835   2060             ; --- END FACTORS
4836   2060 FD 1C         sub32 ga, cb
4837   2062 27            mov b, a
4838   2063 FD 38         mov c, g
4839   2065 E4            pop a
4840   2066             ; --- END TERMS
4841   2066 E7            pop d
4842   2067 FD 43         mov [d], b
4843   2069             ; if (ship_y < 100) { 
4844   2069             _if77_cond:
4845   2069                             
4846   2069 3B 58 6E      mov d, _ship_y ; $ship_y
4847   206C 2A            mov b, [d]
4848   206D 38 00 00      mov c, 0
4849   2070             ; --- START RELATIONAL
4850   2070 D7            push a
4851   2071 11            mov a, b
4852   2072 FD 2E 64 00   mov32 cb, $00000064
4852   2076 00 00 
4853   2078 B0            cmp a, b
4854   2079 FD 73         slt ; < (signed)
4855   207B E4            pop a
4856   207C             ; --- END RELATIONAL
4857   207C C0 00 00      cmp b, 0
4858   207F C6 B6 20      je _if77_exit
4859   2082             _if77_TRUE:
4860   2082             ; quad_y = quad_y - 1; 
4861   2082 3B 39 6E      mov d, _quad_y ; $quad_y
4862   2085 DA            push d
4863   2086                             
4864   2086 3B 39 6E      mov d, _quad_y ; $quad_y
4865   2089 2A            mov b, [d]
4866   208A 38 00 00      mov c, 0
4867   208D             ; --- START TERMS
4868   208D D7            push a
4869   208E 11            mov a, b
4870   208F FD 2E 01 00   mov32 cb, $00000001
4870   2093 00 00 
4871   2095 60            sub a, b
4872   2096 27            mov b, a
4873   2097 E4            pop a
4874   2098             ; --- END TERMS
4875   2098 E7            pop d
4876   2099 FD 43         mov [d], b
4877   209B             ; ship_y = ship_y + 800; 
4878   209B 3B 58 6E      mov d, _ship_y ; $ship_y
4879   209E DA            push d
4880   209F                             
4881   209F 3B 58 6E      mov d, _ship_y ; $ship_y
4882   20A2 2A            mov b, [d]
4883   20A3 38 00 00      mov c, 0
4884   20A6             ; --- START TERMS
4885   20A6 D7            push a
4886   20A7 11            mov a, b
4887   20A8 FD 2E 20 03   mov32 cb, $00000320
4887   20AC 00 00 
4888   20AE 56            add b, a
4889   20AF E4            pop a
4890   20B0             ; --- END TERMS
4891   20B0 E7            pop d
4892   20B1 FD 43         mov [d], b
4893   20B3 0A B6 20      jmp _if77_exit
4894   20B6             _if77_exit:
4895   20B6             ; if (ship_x < 100) { 
4896   20B6             _if78_cond:
4897   20B6                             
4898   20B6 3B 5A 6E      mov d, _ship_x ; $ship_x
4899   20B9 2A            mov b, [d]
4900   20BA 38 00 00      mov c, 0
4901   20BD             ; --- START RELATIONAL
4902   20BD D7            push a
4903   20BE 11            mov a, b
4904   20BF FD 2E 64 00   mov32 cb, $00000064
4904   20C3 00 00 
4905   20C5 B0            cmp a, b
4906   20C6 FD 73         slt ; < (signed)
4907   20C8 E4            pop a
4908   20C9             ; --- END RELATIONAL
4909   20C9 C0 00 00      cmp b, 0
4910   20CC C6 03 21      je _if78_exit
4911   20CF             _if78_TRUE:
4912   20CF             ; quad_x = quad_x - 1; 
4913   20CF 3B 3B 6E      mov d, _quad_x ; $quad_x
4914   20D2 DA            push d
4915   20D3                             
4916   20D3 3B 3B 6E      mov d, _quad_x ; $quad_x
4917   20D6 2A            mov b, [d]
4918   20D7 38 00 00      mov c, 0
4919   20DA             ; --- START TERMS
4920   20DA D7            push a
4921   20DB 11            mov a, b
4922   20DC FD 2E 01 00   mov32 cb, $00000001
4922   20E0 00 00 
4923   20E2 60            sub a, b
4924   20E3 27            mov b, a
4925   20E4 E4            pop a
4926   20E5             ; --- END TERMS
4927   20E5 E7            pop d
4928   20E6 FD 43         mov [d], b
4929   20E8             ; ship_x = ship_x + 800; 
4930   20E8 3B 5A 6E      mov d, _ship_x ; $ship_x
4931   20EB DA            push d
4932   20EC                             
4933   20EC 3B 5A 6E      mov d, _ship_x ; $ship_x
4934   20EF 2A            mov b, [d]
4935   20F0 38 00 00      mov c, 0
4936   20F3             ; --- START TERMS
4937   20F3 D7            push a
4938   20F4 11            mov a, b
4939   20F5 FD 2E 20 03   mov32 cb, $00000320
4939   20F9 00 00 
4940   20FB 56            add b, a
4941   20FC E4            pop a
4942   20FD             ; --- END TERMS
4943   20FD E7            pop d
4944   20FE FD 43         mov [d], b
4945   2100 0A 03 21      jmp _if78_exit
4946   2103             _if78_exit:
4947   2103             ; if (quad_y < 1) { 
4948   2103             _if79_cond:
4949   2103                             
4950   2103 3B 39 6E      mov d, _quad_y ; $quad_y
4951   2106 2A            mov b, [d]
4952   2107 38 00 00      mov c, 0
4953   210A             ; --- START RELATIONAL
4954   210A D7            push a
4955   210B 11            mov a, b
4956   210C FD 2E 01 00   mov32 cb, $00000001
4956   2110 00 00 
4957   2112 B0            cmp a, b
4958   2113 FD 73         slt ; < (signed)
4959   2115 E4            pop a
4960   2116             ; --- END RELATIONAL
4961   2116 C0 00 00      cmp b, 0
4962   2119 C6 46 21      je _if79_exit
4963   211C             _if79_TRUE:
4964   211C             ; outside = 1; 
4965   211C FA E6 FF      lea d, [bp + -26] ; $outside
4966   211F DA            push d
4967   2120                             
4968   2120 FD 2E 01 00   mov32 cb, $00000001
4968   2124 00 00 
4969   2126 E7            pop d
4970   2127 FD 3E         mov [d], bl
4971   2129             ; quad_y = 1; 
4972   2129 3B 39 6E      mov d, _quad_y ; $quad_y
4973   212C DA            push d
4974   212D                             
4975   212D FD 2E 01 00   mov32 cb, $00000001
4975   2131 00 00 
4976   2133 E7            pop d
4977   2134 FD 43         mov [d], b
4978   2136             ; ship_y = 100; 
4979   2136 3B 58 6E      mov d, _ship_y ; $ship_y
4980   2139 DA            push d
4981   213A                             
4982   213A FD 2E 64 00   mov32 cb, $00000064
4982   213E 00 00 
4983   2140 E7            pop d
4984   2141 FD 43         mov [d], b
4985   2143 0A 46 21      jmp _if79_exit
4986   2146             _if79_exit:
4987   2146             ; if (quad_y > 8) { 
4988   2146             _if80_cond:
4989   2146                             
4990   2146 3B 39 6E      mov d, _quad_y ; $quad_y
4991   2149 2A            mov b, [d]
4992   214A 38 00 00      mov c, 0
4993   214D             ; --- START RELATIONAL
4994   214D D7            push a
4995   214E 11            mov a, b
4996   214F FD 2E 08 00   mov32 cb, $00000008
4996   2153 00 00 
4997   2155 B0            cmp a, b
4998   2156 FD 7F         sgt ; >
4999   2158 E4            pop a
5000   2159             ; --- END RELATIONAL
5001   2159 C0 00 00      cmp b, 0
5002   215C C6 89 21      je _if80_exit
5003   215F             _if80_TRUE:
5004   215F             ; outside = 1; 
5005   215F FA E6 FF      lea d, [bp + -26] ; $outside
5006   2162 DA            push d
5007   2163                             
5008   2163 FD 2E 01 00   mov32 cb, $00000001
5008   2167 00 00 
5009   2169 E7            pop d
5010   216A FD 3E         mov [d], bl
5011   216C             ; quad_y = 8; 
5012   216C 3B 39 6E      mov d, _quad_y ; $quad_y
5013   216F DA            push d
5014   2170                             
5015   2170 FD 2E 08 00   mov32 cb, $00000008
5015   2174 00 00 
5016   2176 E7            pop d
5017   2177 FD 43         mov [d], b
5018   2179             ; ship_y = 800; 
5019   2179 3B 58 6E      mov d, _ship_y ; $ship_y
5020   217C DA            push d
5021   217D                             
5022   217D FD 2E 20 03   mov32 cb, $00000320
5022   2181 00 00 
5023   2183 E7            pop d
5024   2184 FD 43         mov [d], b
5025   2186 0A 89 21      jmp _if80_exit
5026   2189             _if80_exit:
5027   2189             ; if (quad_x < 1) { 
5028   2189             _if81_cond:
5029   2189                             
5030   2189 3B 3B 6E      mov d, _quad_x ; $quad_x
5031   218C 2A            mov b, [d]
5032   218D 38 00 00      mov c, 0
5033   2190             ; --- START RELATIONAL
5034   2190 D7            push a
5035   2191 11            mov a, b
5036   2192 FD 2E 01 00   mov32 cb, $00000001
5036   2196 00 00 
5037   2198 B0            cmp a, b
5038   2199 FD 73         slt ; < (signed)
5039   219B E4            pop a
5040   219C             ; --- END RELATIONAL
5041   219C C0 00 00      cmp b, 0
5042   219F C6 CC 21      je _if81_exit
5043   21A2             _if81_TRUE:
5044   21A2             ; outside = 1; 
5045   21A2 FA E6 FF      lea d, [bp + -26] ; $outside
5046   21A5 DA            push d
5047   21A6                             
5048   21A6 FD 2E 01 00   mov32 cb, $00000001
5048   21AA 00 00 
5049   21AC E7            pop d
5050   21AD FD 3E         mov [d], bl
5051   21AF             ; quad_x = 1; 
5052   21AF 3B 3B 6E      mov d, _quad_x ; $quad_x
5053   21B2 DA            push d
5054   21B3                             
5055   21B3 FD 2E 01 00   mov32 cb, $00000001
5055   21B7 00 00 
5056   21B9 E7            pop d
5057   21BA FD 43         mov [d], b
5058   21BC             ; ship_x = 100; 
5059   21BC 3B 5A 6E      mov d, _ship_x ; $ship_x
5060   21BF DA            push d
5061   21C0                             
5062   21C0 FD 2E 64 00   mov32 cb, $00000064
5062   21C4 00 00 
5063   21C6 E7            pop d
5064   21C7 FD 43         mov [d], b
5065   21C9 0A CC 21      jmp _if81_exit
5066   21CC             _if81_exit:
5067   21CC             ; if (quad_x > 8) { 
5068   21CC             _if82_cond:
5069   21CC                             
5070   21CC 3B 3B 6E      mov d, _quad_x ; $quad_x
5071   21CF 2A            mov b, [d]
5072   21D0 38 00 00      mov c, 0
5073   21D3             ; --- START RELATIONAL
5074   21D3 D7            push a
5075   21D4 11            mov a, b
5076   21D5 FD 2E 08 00   mov32 cb, $00000008
5076   21D9 00 00 
5077   21DB B0            cmp a, b
5078   21DC FD 7F         sgt ; >
5079   21DE E4            pop a
5080   21DF             ; --- END RELATIONAL
5081   21DF C0 00 00      cmp b, 0
5082   21E2 C6 0F 22      je _if82_exit
5083   21E5             _if82_TRUE:
5084   21E5             ; outside = 1; 
5085   21E5 FA E6 FF      lea d, [bp + -26] ; $outside
5086   21E8 DA            push d
5087   21E9                             
5088   21E9 FD 2E 01 00   mov32 cb, $00000001
5088   21ED 00 00 
5089   21EF E7            pop d
5090   21F0 FD 3E         mov [d], bl
5091   21F2             ; quad_x = 8; 
5092   21F2 3B 3B 6E      mov d, _quad_x ; $quad_x
5093   21F5 DA            push d
5094   21F6                             
5095   21F6 FD 2E 08 00   mov32 cb, $00000008
5095   21FA 00 00 
5096   21FC E7            pop d
5097   21FD FD 43         mov [d], b
5098   21FF             ; ship_x = 800; 
5099   21FF 3B 5A 6E      mov d, _ship_x ; $ship_x
5100   2202 DA            push d
5101   2203                             
5102   2203 FD 2E 20 03   mov32 cb, $00000320
5102   2207 00 00 
5103   2209 E7            pop d
5104   220A FD 43         mov [d], b
5105   220C 0A 0F 22      jmp _if82_exit
5106   220F             _if82_exit:
5107   220F             ; if (outside == 1) { 
5108   220F             _if83_cond:
5109   220F                             
5110   220F FA E6 FF      lea d, [bp + -26] ; $outside
5111   2212 32            mov bl, [d]
5112   2213 A7 00         mov bh, 0
5113   2215 38 00 00      mov c, 0
5114   2218             ; --- START RELATIONAL
5115   2218 D7            push a
5116   2219 11            mov a, b
5117   221A FD 2E 01 00   mov32 cb, $00000001
5117   221E 00 00 
5118   2220 B0            cmp a, b
5119   2221 FD 71         seq ; ==
5120   2223 E4            pop a
5121   2224             ; --- END RELATIONAL
5122   2224 C0 00 00      cmp b, 0
5123   2227 C6 73 22      je _if83_exit
5124   222A             _if83_TRUE:
5125   222A             ; printf("LT. Uhura reports:\n Message from Starfleet Command:\n\n Permission to attempt crossing of galactic perimeter\n is hereby *denied*. Shut down your engines.\n\n Chief Engineer Scott reports:\n Warp Engines shut down at sector %d, %d of quadrant %d, %d.\n\n", FROM_FIXED00(ship_y), 
5126   222A                             
5127   222A             ; --- START FUNCTION CALL
5128   222A                             
5129   222A 3B 3B 6E      mov d, _quad_x ; $quad_x
5130   222D 2A            mov b, [d]
5131   222E 38 00 00      mov c, 0
5132   2231 FD AB         swp b
5133   2233 D8            push b
5134   2234                             
5135   2234 3B 39 6E      mov d, _quad_y ; $quad_y
5136   2237 2A            mov b, [d]
5137   2238 38 00 00      mov c, 0
5138   223B FD AB         swp b
5139   223D D8            push b
5140   223E                             
5141   223E             ; --- START FUNCTION CALL
5142   223E                             
5143   223E 3B 5A 6E      mov d, _ship_x ; $ship_x
5144   2241 2A            mov b, [d]
5145   2242 38 00 00      mov c, 0
5146   2245 FD AB         swp b
5147   2247 D8            push b
5148   2248 07 DC 04      call FROM_FIXED00
5149   224B 51 02 00      add sp, 2
5150   224E             ; --- END FUNCTION CALL
5151   224E FD AB         swp b
5152   2250 D8            push b
5153   2251                             
5154   2251             ; --- START FUNCTION CALL
5155   2251                             
5156   2251 3B 58 6E      mov d, _ship_y ; $ship_y
5157   2254 2A            mov b, [d]
5158   2255 38 00 00      mov c, 0
5159   2258 FD AB         swp b
5160   225A D8            push b
5161   225B 07 DC 04      call FROM_FIXED00
5162   225E 51 02 00      add sp, 2
5163   2261             ; --- END FUNCTION CALL
5164   2261 FD AB         swp b
5165   2263 D8            push b
5166   2264                             
5167   2264 26 D7 74      mov b, _s71 ; "LT. Uhura reports:\n Message from Starfleet Command:\n\n Permission to attempt crossing of galactic perimeter\n is hereby *denied*. Shut down your engines.\n\n Chief Engineer Scott reports:\n Warp Engines shut down at sector %d, %d of quadrant %d, %d.\n\n"
5168   2267 FD AB         swp b
5169   2269 D8            push b
5170   226A 07 4F 60      call printf
5171   226D 51 0A 00      add sp, 10
5172   2270             ; --- END FUNCTION CALL
5173   2270 0A 73 22      jmp _if83_exit
5174   2273             _if83_exit:
5175   2273             ; maneuver_energy(n); 
5176   2273                             
5177   2273             ; --- START FUNCTION CALL
5178   2273                             
5179   2273 FA F9 FF      lea d, [bp + -7] ; $n
5180   2276 2A            mov b, [d]
5181   2277 38 00 00      mov c, 0
5182   227A FD AB         swp b
5183   227C D8            push b
5184   227D 07 D7 24      call maneuver_energy
5185   2280 51 02 00      add sp, 2
5186   2283             ; --- END FUNCTION CALL
5187   2283             ; if (FROM_FIXED(stardate) > time_start + time_up) 
5188   2283             _if84_cond:
5189   2283                             
5190   2283             ; --- START FUNCTION CALL
5191   2283                             
5192   2283 3B 5C 6E      mov d, _stardate ; $stardate
5193   2286 2A            mov b, [d]
5194   2287 38 00 00      mov c, 0
5195   228A FD AB         swp b
5196   228C D8            push b
5197   228D 07 68 04      call FROM_FIXED
5198   2290 51 02 00      add sp, 2
5199   2293             ; --- END FUNCTION CALL
5200   2293             ; --- START RELATIONAL
5201   2293 D7            push a
5202   2294 11            mov a, b
5203   2295 3B 40 6E      mov d, _time_start ; $time_start
5204   2298 2A            mov b, [d]
5205   2299 38 00 00      mov c, 0
5206   229C             ; --- START TERMS
5207   229C D7            push a
5208   229D 11            mov a, b
5209   229E 3B 42 6E      mov d, _time_up ; $time_up
5210   22A1 2A            mov b, [d]
5211   22A2 38 00 00      mov c, 0
5212   22A5 56            add b, a
5213   22A6 E4            pop a
5214   22A7             ; --- END TERMS
5215   22A7 B0            cmp a, b
5216   22A8 FD 7F         sgt ; >
5217   22AA E4            pop a
5218   22AB             ; --- END RELATIONAL
5219   22AB C0 00 00      cmp b, 0
5220   22AE C6 B7 22      je _if84_exit
5221   22B1             _if84_TRUE:
5222   22B1             ; end_of_time(); 
5223   22B1                             
5224   22B1             ; --- START FUNCTION CALL
5225   22B1 07 CF 4E      call end_of_time
5226   22B4 0A B7 22      jmp _if84_exit
5227   22B7             _if84_exit:
5228   22B7             ; if (quad_y != quad_y_old || quad_x != quad_x_old) { 
5229   22B7             _if85_cond:
5230   22B7                             
5231   22B7 3B 39 6E      mov d, _quad_y ; $quad_y
5232   22BA 2A            mov b, [d]
5233   22BB 38 00 00      mov c, 0
5234   22BE             ; --- START RELATIONAL
5235   22BE D7            push a
5236   22BF 11            mov a, b
5237   22C0 FA E5 FF      lea d, [bp + -27] ; $quad_y_old
5238   22C3 32            mov bl, [d]
5239   22C4 A7 00         mov bh, 0
5240   22C6 38 00 00      mov c, 0
5241   22C9 B0            cmp a, b
5242   22CA FD 72         sneq ; !=
5243   22CC E4            pop a
5244   22CD             ; --- END RELATIONAL
5245   22CD             ; --- START LOGICAL OR
5246   22CD D7            push a
5247   22CE 11            mov a, b
5248   22CF 3B 3B 6E      mov d, _quad_x ; $quad_x
5249   22D2 2A            mov b, [d]
5250   22D3 38 00 00      mov c, 0
5251   22D6             ; --- START RELATIONAL
5252   22D6 D7            push a
5253   22D7 11            mov a, b
5254   22D8 FA E4 FF      lea d, [bp + -28] ; $quad_x_old
5255   22DB 32            mov bl, [d]
5256   22DC A7 00         mov bh, 0
5257   22DE 38 00 00      mov c, 0
5258   22E1 B0            cmp a, b
5259   22E2 FD 72         sneq ; !=
5260   22E4 E4            pop a
5261   22E5             ; --- END RELATIONAL
5262   22E5 FD A8         sor a, b ; ||
5263   22E7 E4            pop a
5264   22E8             ; --- END LOGICAL OR
5265   22E8 C0 00 00      cmp b, 0
5266   22EB C6 15 23      je _if85_exit
5267   22EE             _if85_TRUE:
5268   22EE             ; stardate = stardate + TO_FIXED(1); 
5269   22EE 3B 5C 6E      mov d, _stardate ; $stardate
5270   22F1 DA            push d
5271   22F2                             
5272   22F2 3B 5C 6E      mov d, _stardate ; $stardate
5273   22F5 2A            mov b, [d]
5274   22F6 38 00 00      mov c, 0
5275   22F9             ; --- START TERMS
5276   22F9 D7            push a
5277   22FA 11            mov a, b
5278   22FB             ; --- START FUNCTION CALL
5279   22FB                             
5280   22FB FD 2E 01 00   mov32 cb, $00000001
5280   22FF 00 00 
5281   2301 FD AB         swp b
5282   2303 D8            push b
5283   2304 07 17 04      call TO_FIXED
5284   2307 51 02 00      add sp, 2
5285   230A             ; --- END FUNCTION CALL
5286   230A 56            add b, a
5287   230B E4            pop a
5288   230C             ; --- END TERMS
5289   230C E7            pop d
5290   230D FD 43         mov [d], b
5291   230F             ; new_quadrant(); 
5292   230F                             
5293   230F             ; --- START FUNCTION CALL
5294   230F 07 97 12      call new_quadrant
5295   2312 0A 15 23      jmp _if85_exit
5296   2315             _if85_exit:
5297   2315             ; complete_maneuver(warp, n); 
5298   2315                             
5299   2315             ; --- START FUNCTION CALL
5300   2315                             
5301   2315 FA F9 FF      lea d, [bp + -7] ; $n
5302   2318 2A            mov b, [d]
5303   2319 38 00 00      mov c, 0
5304   231C FD AB         swp b
5305   231E D8            push b
5306   231F                             
5307   231F FA FB FF      lea d, [bp + -5] ; $warp
5308   2322 2A            mov b, [d]
5309   2323 38 00 00      mov c, 0
5310   2326 FD AB         swp b
5311   2328 D8            push b
5312   2329 07 1A 24      call complete_maneuver
5313   232C 51 04 00      add sp, 4
5314   232F             ; --- END FUNCTION CALL
5315   232F             ; return; 
5316   232F F9            leave
5317   2330 09            ret
5318   2331 0A 34 23      jmp _if68_exit
5319   2334             _if68_exit:
5320   2334             ; if (quad[z1+-1][z2+-1] != 		0) {	/* Sector not empty */ 
5321   2334             _if86_cond:
5322   2334                             
5323   2334 3B 5E 6E      mov d, _quad_data ; $quad
5324   2337 D7            push a
5325   2338 DA            push d
5326   2339                             
5327   2339 FA F1 FF      lea d, [bp + -15] ; $z1
5328   233C 2A            mov b, [d]
5329   233D 38 00 00      mov c, 0
5330   2340             ; --- START TERMS
5331   2340 D7            push a
5332   2341 11            mov a, b
5333   2342 FD 2E FF FF   mov32 cb, $ffffffff
5333   2346 FF FF 
5334   2348 56            add b, a
5335   2349 E4            pop a
5336   234A             ; --- END TERMS
5337   234A E7            pop d
5338   234B FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
5339   234F DA            push d
5340   2350                             
5341   2350 FA EF FF      lea d, [bp + -17] ; $z2
5342   2353 2A            mov b, [d]
5343   2354 38 00 00      mov c, 0
5344   2357             ; --- START TERMS
5345   2357 D7            push a
5346   2358 11            mov a, b
5347   2359 FD 2E FF FF   mov32 cb, $ffffffff
5347   235D FF FF 
5348   235F 56            add b, a
5349   2360 E4            pop a
5350   2361             ; --- END TERMS
5351   2361 E7            pop d
5352   2362 5A            add d, b
5353   2363 E4            pop a
5354   2364 32            mov bl, [d]
5355   2365 A7 00         mov bh, 0
5356   2367 38 00 00      mov c, 0
5357   236A             ; --- START RELATIONAL
5358   236A D7            push a
5359   236B 11            mov a, b
5360   236C FD 2E 00 00   mov32 cb, $00000000
5360   2370 00 00 
5361   2372 B0            cmp a, b
5362   2373 FD 72         sneq ; !=
5363   2375 E4            pop a
5364   2376             ; --- END RELATIONAL
5365   2376 C0 00 00      cmp b, 0
5366   2379 C6 EB 23      je _if86_exit
5367   237C             _if86_TRUE:
5368   237C             ; ship_y = ship_y - x1; 
5369   237C 3B 58 6E      mov d, _ship_y ; $ship_y
5370   237F DA            push d
5371   2380                             
5372   2380 3B 58 6E      mov d, _ship_y ; $ship_y
5373   2383 2A            mov b, [d]
5374   2384 38 00 00      mov c, 0
5375   2387             ; --- START TERMS
5376   2387 D7            push a
5377   2388 11            mov a, b
5378   2389 FA ED FF      lea d, [bp + -19] ; $x1
5379   238C 2A            mov b, [d]
5380   238D 38 00 00      mov c, 0
5381   2390 60            sub a, b
5382   2391 27            mov b, a
5383   2392 E4            pop a
5384   2393             ; --- END TERMS
5385   2393 E7            pop d
5386   2394 FD 43         mov [d], b
5387   2396             ; ship_x = ship_x - x2; 
5388   2396 3B 5A 6E      mov d, _ship_x ; $ship_x
5389   2399 DA            push d
5390   239A                             
5391   239A 3B 5A 6E      mov d, _ship_x ; $ship_x
5392   239D 2A            mov b, [d]
5393   239E 38 00 00      mov c, 0
5394   23A1             ; --- START TERMS
5395   23A1 D7            push a
5396   23A2 11            mov a, b
5397   23A3 FA EB FF      lea d, [bp + -21] ; $x2
5398   23A6 2A            mov b, [d]
5399   23A7 38 00 00      mov c, 0
5400   23AA 60            sub a, b
5401   23AB 27            mov b, a
5402   23AC E4            pop a
5403   23AD             ; --- END TERMS
5404   23AD E7            pop d
5405   23AE FD 43         mov [d], b
5406   23B0             ; printf("Warp Engines shut down at sector %d, %d due to bad navigation.\n\n", z1, z2); 
5407   23B0                             
5408   23B0             ; --- START FUNCTION CALL
5409   23B0                             
5410   23B0 FA EF FF      lea d, [bp + -17] ; $z2
5411   23B3 2A            mov b, [d]
5412   23B4 38 00 00      mov c, 0
5413   23B7 FD AB         swp b
5414   23B9 D8            push b
5415   23BA                             
5416   23BA FA F1 FF      lea d, [bp + -15] ; $z1
5417   23BD 2A            mov b, [d]
5418   23BE 38 00 00      mov c, 0
5419   23C1 FD AB         swp b
5420   23C3 D8            push b
5421   23C4                             
5422   23C4 26 CE 75      mov b, _s72 ; "Warp Engines shut down at sector %d, %d due to bad navigation.\n\n"
5423   23C7 FD AB         swp b
5424   23C9 D8            push b
5425   23CA 07 4F 60      call printf
5426   23CD 51 06 00      add sp, 6
5427   23D0             ; --- END FUNCTION CALL
5428   23D0             ; i = n + 1; 
5429   23D0 FA FF FF      lea d, [bp + -1] ; $i
5430   23D3 DA            push d
5431   23D4                             
5432   23D4 FA F9 FF      lea d, [bp + -7] ; $n
5433   23D7 2A            mov b, [d]
5434   23D8 38 00 00      mov c, 0
5435   23DB             ; --- START TERMS
5436   23DB D7            push a
5437   23DC 11            mov a, b
5438   23DD FD 2E 01 00   mov32 cb, $00000001
5438   23E1 00 00 
5439   23E3 56            add b, a
5440   23E4 E4            pop a
5441   23E5             ; --- END TERMS
5442   23E5 E7            pop d
5443   23E6 FD 43         mov [d], b
5444   23E8 0A EB 23      jmp _if86_exit
5445   23EB             _if86_exit:
5446   23EB             _for67_update:
5447   23EB                             
5448   23EB FA FF FF      lea d, [bp + -1] ; $i
5449   23EE 2A            mov b, [d]
5450   23EF 38 00 00      mov c, 0
5451   23F2 11            mov a, b
5452   23F3 FD 77         inc b
5453   23F5 FA FF FF      lea d, [bp + -1] ; $i
5454   23F8 FD 43         mov [d], b
5455   23FA 27            mov b, a
5456   23FB 0A ED 1C      jmp _for67_cond
5457   23FE             _for67_exit:
5458   23FE             ; complete_maneuver(warp, n); 
5459   23FE                             
5460   23FE             ; --- START FUNCTION CALL
5461   23FE                             
5462   23FE FA F9 FF      lea d, [bp + -7] ; $n
5463   2401 2A            mov b, [d]
5464   2402 38 00 00      mov c, 0
5465   2405 FD AB         swp b
5466   2407 D8            push b
5467   2408                             
5468   2408 FA FB FF      lea d, [bp + -5] ; $warp
5469   240B 2A            mov b, [d]
5470   240C 38 00 00      mov c, 0
5471   240F FD AB         swp b
5472   2411 D8            push b
5473   2412 07 1A 24      call complete_maneuver
5474   2415 51 04 00      add sp, 4
5475   2418             ; --- END FUNCTION CALL
5476   2418 F9            leave
5477   2419 09            ret
5478   241A             
5479   241A             complete_maneuver:
5480   241A F8 00 00      enter 0 ; (push bp; mov bp, sp)
5481   241D             ; unsigned int time_used; 
5482   241D 52 02 00      sub sp, 2
5483   2420             ; place_ship(); 
5484   2420                             
5485   2420             ; --- START FUNCTION CALL
5486   2420 07 44 12      call place_ship
5487   2423             ; maneuver_energy(n); 
5488   2423                             
5489   2423             ; --- START FUNCTION CALL
5490   2423                             
5491   2423 FA 07 00      lea d, [bp + 7] ; $n
5492   2426 2A            mov b, [d]
5493   2427 38 00 00      mov c, 0
5494   242A FD AB         swp b
5495   242C D8            push b
5496   242D 07 D7 24      call maneuver_energy
5497   2430 51 02 00      add sp, 2
5498   2433             ; --- END FUNCTION CALL
5499   2433             ; time_used = TO_FIXED(1); 
5500   2433 FA FF FF      lea d, [bp + -1] ; $time_used
5501   2436 DA            push d
5502   2437                             
5503   2437             ; --- START FUNCTION CALL
5504   2437                             
5505   2437 FD 2E 01 00   mov32 cb, $00000001
5505   243B 00 00 
5506   243D FD AB         swp b
5507   243F D8            push b
5508   2440 07 17 04      call TO_FIXED
5509   2443 51 02 00      add sp, 2
5510   2446             ; --- END FUNCTION CALL
5511   2446 E7            pop d
5512   2447 FD 43         mov [d], b
5513   2449             ; if (warp < 100) 
5514   2449             _if87_cond:
5515   2449                             
5516   2449 FA 05 00      lea d, [bp + 5] ; $warp
5517   244C 2A            mov b, [d]
5518   244D 38 00 00      mov c, 0
5519   2450             ; --- START RELATIONAL
5520   2450 D7            push a
5521   2451 11            mov a, b
5522   2452 FD 2E 64 00   mov32 cb, $00000064
5522   2456 00 00 
5523   2458 B0            cmp a, b
5524   2459 FD 75         slu ; < (unsigned)
5525   245B E4            pop a
5526   245C             ; --- END RELATIONAL
5527   245C C0 00 00      cmp b, 0
5528   245F C6 85 24      je _if87_exit
5529   2462             _if87_TRUE:
5530   2462             ; time_used = TO_FIXED(FROM_FIXED00(warp)); 
5531   2462 FA FF FF      lea d, [bp + -1] ; $time_used
5532   2465 DA            push d
5533   2466                             
5534   2466             ; --- START FUNCTION CALL
5535   2466                             
5536   2466             ; --- START FUNCTION CALL
5537   2466                             
5538   2466 FA 05 00      lea d, [bp + 5] ; $warp
5539   2469 2A            mov b, [d]
5540   246A 38 00 00      mov c, 0
5541   246D FD AB         swp b
5542   246F D8            push b
5543   2470 07 DC 04      call FROM_FIXED00
5544   2473 51 02 00      add sp, 2
5545   2476             ; --- END FUNCTION CALL
5546   2476 FD AB         swp b
5547   2478 D8            push b
5548   2479 07 17 04      call TO_FIXED
5549   247C 51 02 00      add sp, 2
5550   247F             ; --- END FUNCTION CALL
5551   247F E7            pop d
5552   2480 FD 43         mov [d], b
5553   2482 0A 85 24      jmp _if87_exit
5554   2485             _if87_exit:
5555   2485             ; stardate = stardate + time_used; 
5556   2485 3B 5C 6E      mov d, _stardate ; $stardate
5557   2488 DA            push d
5558   2489                             
5559   2489 3B 5C 6E      mov d, _stardate ; $stardate
5560   248C 2A            mov b, [d]
5561   248D 38 00 00      mov c, 0
5562   2490             ; --- START TERMS
5563   2490 D7            push a
5564   2491 11            mov a, b
5565   2492 FA FF FF      lea d, [bp + -1] ; $time_used
5566   2495 2A            mov b, [d]
5567   2496 38 00 00      mov c, 0
5568   2499 56            add b, a
5569   249A E4            pop a
5570   249B             ; --- END TERMS
5571   249B E7            pop d
5572   249C FD 43         mov [d], b
5573   249E             ; if (FROM_FIXED(stardate) > time_start + time_up) 
5574   249E             _if88_cond:
5575   249E                             
5576   249E             ; --- START FUNCTION CALL
5577   249E                             
5578   249E 3B 5C 6E      mov d, _stardate ; $stardate
5579   24A1 2A            mov b, [d]
5580   24A2 38 00 00      mov c, 0
5581   24A5 FD AB         swp b
5582   24A7 D8            push b
5583   24A8 07 68 04      call FROM_FIXED
5584   24AB 51 02 00      add sp, 2
5585   24AE             ; --- END FUNCTION CALL
5586   24AE             ; --- START RELATIONAL
5587   24AE D7            push a
5588   24AF 11            mov a, b
5589   24B0 3B 40 6E      mov d, _time_start ; $time_start
5590   24B3 2A            mov b, [d]
5591   24B4 38 00 00      mov c, 0
5592   24B7             ; --- START TERMS
5593   24B7 D7            push a
5594   24B8 11            mov a, b
5595   24B9 3B 42 6E      mov d, _time_up ; $time_up
5596   24BC 2A            mov b, [d]
5597   24BD 38 00 00      mov c, 0
5598   24C0 56            add b, a
5599   24C1 E4            pop a
5600   24C2             ; --- END TERMS
5601   24C2 B0            cmp a, b
5602   24C3 FD 7F         sgt ; >
5603   24C5 E4            pop a
5604   24C6             ; --- END RELATIONAL
5605   24C6 C0 00 00      cmp b, 0
5606   24C9 C6 D2 24      je _if88_exit
5607   24CC             _if88_TRUE:
5608   24CC             ; end_of_time(); 
5609   24CC                             
5610   24CC             ; --- START FUNCTION CALL
5611   24CC 07 CF 4E      call end_of_time
5612   24CF 0A D2 24      jmp _if88_exit
5613   24D2             _if88_exit:
5614   24D2             ; short_range_scan(); 
5615   24D2                             
5616   24D2             ; --- START FUNCTION CALL
5617   24D2 07 77 25      call short_range_scan
5618   24D5 F9            leave
5619   24D6 09            ret
5620   24D7             
5621   24D7             maneuver_energy:
5622   24D7 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5623   24DA             ; energy = energy - n + 10; 
5624   24DA 3B 82 6D      mov d, _energy ; $energy
5625   24DD DA            push d
5626   24DE                             
5627   24DE 3B 82 6D      mov d, _energy ; $energy
5628   24E1 2A            mov b, [d]
5629   24E2 38 00 00      mov c, 0
5630   24E5             ; --- START TERMS
5631   24E5 D7            push a
5632   24E6 11            mov a, b
5633   24E7 FA 05 00      lea d, [bp + 5] ; $n
5634   24EA 2A            mov b, [d]
5635   24EB 38 00 00      mov c, 0
5636   24EE 60            sub a, b
5637   24EF 27            mov b, a
5638   24F0 11            mov a, b
5639   24F1 FD 2E 0A 00   mov32 cb, $0000000a
5639   24F5 00 00 
5640   24F7 56            add b, a
5641   24F8 E4            pop a
5642   24F9             ; --- END TERMS
5643   24F9 E7            pop d
5644   24FA FD 43         mov [d], b
5645   24FC             ; if (energy >= 0) 
5646   24FC             _if89_cond:
5647   24FC                             
5648   24FC 3B 82 6D      mov d, _energy ; $energy
5649   24FF 2A            mov b, [d]
5650   2500 38 00 00      mov c, 0
5651   2503             ; --- START RELATIONAL
5652   2503 D7            push a
5653   2504 11            mov a, b
5654   2505 FD 2E 00 00   mov32 cb, $00000000
5654   2509 00 00 
5655   250B B0            cmp a, b
5656   250C FD 80         sge ; >=
5657   250E E4            pop a
5658   250F             ; --- END RELATIONAL
5659   250F C0 00 00      cmp b, 0
5660   2512 C6 1A 25      je _if89_exit
5661   2515             _if89_TRUE:
5662   2515             ; return; 
5663   2515 F9            leave
5664   2516 09            ret
5665   2517 0A 1A 25      jmp _if89_exit
5666   251A             _if89_exit:
5667   251A             ; puts("Shield Control supplies energy to complete maneuver.\n"); 
5668   251A                             
5669   251A             ; --- START FUNCTION CALL
5670   251A                             
5671   251A 26 0F 76      mov b, _s73 ; "Shield Control supplies energy to complete maneuver.\n"
5672   251D FD AB         swp b
5673   251F D8            push b
5674   2520 07 5C 69      call puts
5675   2523 51 02 00      add sp, 2
5676   2526             ; --- END FUNCTION CALL
5677   2526             ; shield = shield + energy; 
5678   2526 3B 3D 6E      mov d, _shield ; $shield
5679   2529 DA            push d
5680   252A                             
5681   252A 3B 3D 6E      mov d, _shield ; $shield
5682   252D 2A            mov b, [d]
5683   252E 38 00 00      mov c, 0
5684   2531             ; --- START TERMS
5685   2531 D7            push a
5686   2532 11            mov a, b
5687   2533 3B 82 6D      mov d, _energy ; $energy
5688   2536 2A            mov b, [d]
5689   2537 38 00 00      mov c, 0
5690   253A 56            add b, a
5691   253B E4            pop a
5692   253C             ; --- END TERMS
5693   253C E7            pop d
5694   253D FD 43         mov [d], b
5695   253F             ; energy = 0; 
5696   253F 3B 82 6D      mov d, _energy ; $energy
5697   2542 DA            push d
5698   2543                             
5699   2543 FD 2E 00 00   mov32 cb, $00000000
5699   2547 00 00 
5700   2549 E7            pop d
5701   254A FD 43         mov [d], b
5702   254C             ; if (shield <= 0) 
5703   254C             _if90_cond:
5704   254C                             
5705   254C 3B 3D 6E      mov d, _shield ; $shield
5706   254F 2A            mov b, [d]
5707   2550 38 00 00      mov c, 0
5708   2553             ; --- START RELATIONAL
5709   2553 D7            push a
5710   2554 11            mov a, b
5711   2555 FD 2E 00 00   mov32 cb, $00000000
5711   2559 00 00 
5712   255B B0            cmp a, b
5713   255C FD 74         sle ; <= (signed)
5714   255E E4            pop a
5715   255F             ; --- END RELATIONAL
5716   255F C0 00 00      cmp b, 0
5717   2562 C6 75 25      je _if90_exit
5718   2565             _if90_TRUE:
5719   2565             ; shield = 0; 
5720   2565 3B 3D 6E      mov d, _shield ; $shield
5721   2568 DA            push d
5722   2569                             
5723   2569 FD 2E 00 00   mov32 cb, $00000000
5723   256D 00 00 
5724   256F E7            pop d
5725   2570 FD 43         mov [d], b
5726   2572 0A 75 25      jmp _if90_exit
5727   2575             _if90_exit:
5728   2575 F9            leave
5729   2576 09            ret
5730   2577             
5731   2577             short_range_scan:
5732   2577 F8 00 00      enter 0 ; (push bp; mov bp, sp)
5733   257A             ; int i, j; 
5734   257A 52 02 00      sub sp, 2
5735   257D 52 02 00      sub sp, 2
5736   2580             ; char *sC = "GREEN"; 
5737   2580 52 02 00      sub sp, 2
5738   2583             ; --- START LOCAL VAR INITIALIZATION
5739   2583 FA FB FF      lea d, [bp + -5] ; $sC
5740   2586 DA            push d
5741   2587                             
5742   2587 26 45 76      mov b, _s74 ; "GREEN"
5743   258A E7            pop d
5744   258B FD 43         mov [d], b
5745   258D             ; --- END LOCAL VAR INITIALIZATION
5746   258D             ; if (energy < energy0 / 10) 
5747   258D             _if91_cond:
5748   258D                             
5749   258D 3B 82 6D      mov d, _energy ; $energy
5750   2590 2A            mov b, [d]
5751   2591 38 00 00      mov c, 0
5752   2594             ; --- START RELATIONAL
5753   2594 D7            push a
5754   2595 11            mov a, b
5755   2596 3B 84 6D      mov d, _energy0 ; $energy0
5756   2599 2A            mov b, [d]
5757   259A 38 00 00      mov c, 0
5758   259D             ; --- START FACTORS
5759   259D D7            push a
5760   259E FD D8         push g
5761   25A0 11            mov a, b
5762   25A1 FD 7A         mov g, c
5763   25A3 FD 2E 0A 00   mov32 cb, $0000000a
5763   25A7 00 00 
5764   25A9 FD D8         push g ; save 'g' as the div instruction uses it
5765   25AB AE            div a, b ; /, a: quotient, b: remainder
5766   25AC FD F1         pop g
5767   25AE FD 38         mov c, g
5768   25B0 27            mov b, a
5769   25B1 FD F1         pop g
5770   25B3 E4            pop a
5771   25B4             ; --- END FACTORS
5772   25B4 B0            cmp a, b
5773   25B5 FD 73         slt ; < (signed)
5774   25B7 E4            pop a
5775   25B8             ; --- END RELATIONAL
5776   25B8 C0 00 00      cmp b, 0
5777   25BB C6 CB 25      je _if91_exit
5778   25BE             _if91_TRUE:
5779   25BE             ; sC = "YELLOW"; 
5780   25BE FA FB FF      lea d, [bp + -5] ; $sC
5781   25C1 DA            push d
5782   25C2                             
5783   25C2 26 4B 76      mov b, _s75 ; "YELLOW"
5784   25C5 E7            pop d
5785   25C6 FD 43         mov [d], b
5786   25C8 0A CB 25      jmp _if91_exit
5787   25CB             _if91_exit:
5788   25CB             ; if (klingons > 0) 
5789   25CB             _if93_cond:
5790   25CB                             
5791   25CB 3B 34 6E      mov d, _klingons ; $klingons
5792   25CE 32            mov bl, [d]
5793   25CF A7 00         mov bh, 0
5794   25D1 38 00 00      mov c, 0
5795   25D4             ; --- START RELATIONAL
5796   25D4 D7            push a
5797   25D5 11            mov a, b
5798   25D6 FD 2E 00 00   mov32 cb, $00000000
5798   25DA 00 00 
5799   25DC B0            cmp a, b
5800   25DD FD 81         sgu ; > (unsigned)
5801   25DF E4            pop a
5802   25E0             ; --- END RELATIONAL
5803   25E0 C0 00 00      cmp b, 0
5804   25E3 C6 F3 25      je _if93_exit
5805   25E6             _if93_TRUE:
5806   25E6             ; sC = "*RED*"; 
5807   25E6 FA FB FF      lea d, [bp + -5] ; $sC
5808   25E9 DA            push d
5809   25EA                             
5810   25EA 26 52 76      mov b, _s76 ; "*RED*"
5811   25ED E7            pop d
5812   25EE FD 43         mov [d], b
5813   25F0 0A F3 25      jmp _if93_exit
5814   25F3             _if93_exit:
5815   25F3             ; docked = 0; 
5816   25F3 3B 81 6D      mov d, _docked ; $docked
5817   25F6 DA            push d
5818   25F7                             
5819   25F7 FD 2E 00 00   mov32 cb, $00000000
5819   25FB 00 00 
5820   25FD E7            pop d
5821   25FE FD 3E         mov [d], bl
5822   2600             ; for (i = (int) (FROM_FIXED00(ship_y) - 1); i <= (int) (FROM_FIXED00(ship_y) + 1); i++) 
5823   2600             _for94_init:
5824   2600 FA FF FF      lea d, [bp + -1] ; $i
5825   2603 DA            push d
5826   2604                             
5827   2604                             
5828   2604             ; --- START FUNCTION CALL
5829   2604                             
5830   2604 3B 58 6E      mov d, _ship_y ; $ship_y
5831   2607 2A            mov b, [d]
5832   2608 38 00 00      mov c, 0
5833   260B FD AB         swp b
5834   260D D8            push b
5835   260E 07 DC 04      call FROM_FIXED00
5836   2611 51 02 00      add sp, 2
5837   2614             ; --- END FUNCTION CALL
5838   2614             ; --- START TERMS
5839   2614 D7            push a
5840   2615 11            mov a, b
5841   2616 FD 2E 01 00   mov32 cb, $00000001
5841   261A 00 00 
5842   261C 60            sub a, b
5843   261D 27            mov b, a
5844   261E E4            pop a
5845   261F             ; --- END TERMS
5846   261F E7            pop d
5847   2620 FD 43         mov [d], b
5848   2622             _for94_cond:
5849   2622                             
5850   2622 FA FF FF      lea d, [bp + -1] ; $i
5851   2625 2A            mov b, [d]
5852   2626 38 00 00      mov c, 0
5853   2629             ; --- START RELATIONAL
5854   2629 D7            push a
5855   262A 11            mov a, b
5856   262B                             
5857   262B             ; --- START FUNCTION CALL
5858   262B                             
5859   262B 3B 58 6E      mov d, _ship_y ; $ship_y
5860   262E 2A            mov b, [d]
5861   262F 38 00 00      mov c, 0
5862   2632 FD AB         swp b
5863   2634 D8            push b
5864   2635 07 DC 04      call FROM_FIXED00
5865   2638 51 02 00      add sp, 2
5866   263B             ; --- END FUNCTION CALL
5867   263B             ; --- START TERMS
5868   263B D7            push a
5869   263C 11            mov a, b
5870   263D FD 2E 01 00   mov32 cb, $00000001
5870   2641 00 00 
5871   2643 56            add b, a
5872   2644 E4            pop a
5873   2645             ; --- END TERMS
5874   2645 B0            cmp a, b
5875   2646 FD 74         sle ; <= (signed)
5876   2648 E4            pop a
5877   2649             ; --- END RELATIONAL
5878   2649 C0 00 00      cmp b, 0
5879   264C C6 BD 27      je _for94_exit
5880   264F             _for94_block:
5881   264F             ; for (j = (int) (FROM_FIXED00(ship_x) - 1); j <= (int) (FROM_FIXED00(ship_x) + 1); j++) 
5882   264F             _for95_init:
5883   264F FA FD FF      lea d, [bp + -3] ; $j
5884   2652 DA            push d
5885   2653                             
5886   2653                             
5887   2653             ; --- START FUNCTION CALL
5888   2653                             
5889   2653 3B 5A 6E      mov d, _ship_x ; $ship_x
5890   2656 2A            mov b, [d]
5891   2657 38 00 00      mov c, 0
5892   265A FD AB         swp b
5893   265C D8            push b
5894   265D 07 DC 04      call FROM_FIXED00
5895   2660 51 02 00      add sp, 2
5896   2663             ; --- END FUNCTION CALL
5897   2663             ; --- START TERMS
5898   2663 D7            push a
5899   2664 11            mov a, b
5900   2665 FD 2E 01 00   mov32 cb, $00000001
5900   2669 00 00 
5901   266B 60            sub a, b
5902   266C 27            mov b, a
5903   266D E4            pop a
5904   266E             ; --- END TERMS
5905   266E E7            pop d
5906   266F FD 43         mov [d], b
5907   2671             _for95_cond:
5908   2671                             
5909   2671 FA FD FF      lea d, [bp + -3] ; $j
5910   2674 2A            mov b, [d]
5911   2675 38 00 00      mov c, 0
5912   2678             ; --- START RELATIONAL
5913   2678 D7            push a
5914   2679 11            mov a, b
5915   267A                             
5916   267A             ; --- START FUNCTION CALL
5917   267A                             
5918   267A 3B 5A 6E      mov d, _ship_x ; $ship_x
5919   267D 2A            mov b, [d]
5920   267E 38 00 00      mov c, 0
5921   2681 FD AB         swp b
5922   2683 D8            push b
5923   2684 07 DC 04      call FROM_FIXED00
5924   2687 51 02 00      add sp, 2
5925   268A             ; --- END FUNCTION CALL
5926   268A             ; --- START TERMS
5927   268A D7            push a
5928   268B 11            mov a, b
5929   268C FD 2E 01 00   mov32 cb, $00000001
5929   2690 00 00 
5930   2692 56            add b, a
5931   2693 E4            pop a
5932   2694             ; --- END TERMS
5933   2694 B0            cmp a, b
5934   2695 FD 74         sle ; <= (signed)
5935   2697 E4            pop a
5936   2698             ; --- END RELATIONAL
5937   2698 C0 00 00      cmp b, 0
5938   269B C6 AA 27      je _for95_exit
5939   269E             _for95_block:
5940   269E             ; if (i >= 1 && i <= 8 && j >= 1 && j <= 8) { 
5941   269E             _if96_cond:
5942   269E                             
5943   269E FA FF FF      lea d, [bp + -1] ; $i
5944   26A1 2A            mov b, [d]
5945   26A2 38 00 00      mov c, 0
5946   26A5             ; --- START RELATIONAL
5947   26A5 D7            push a
5948   26A6 11            mov a, b
5949   26A7 FD 2E 01 00   mov32 cb, $00000001
5949   26AB 00 00 
5950   26AD B0            cmp a, b
5951   26AE FD 80         sge ; >=
5952   26B0 E4            pop a
5953   26B1             ; --- END RELATIONAL
5954   26B1             ; --- START LOGICAL AND
5955   26B1 D7            push a
5956   26B2 11            mov a, b
5957   26B3 FA FF FF      lea d, [bp + -1] ; $i
5958   26B6 2A            mov b, [d]
5959   26B7 38 00 00      mov c, 0
5960   26BA             ; --- START RELATIONAL
5961   26BA D7            push a
5962   26BB 11            mov a, b
5963   26BC FD 2E 08 00   mov32 cb, $00000008
5963   26C0 00 00 
5964   26C2 B0            cmp a, b
5965   26C3 FD 74         sle ; <= (signed)
5966   26C5 E4            pop a
5967   26C6             ; --- END RELATIONAL
5968   26C6 FD A7         sand a, b
5969   26C8 11            mov a, b
5970   26C9 FA FD FF      lea d, [bp + -3] ; $j
5971   26CC 2A            mov b, [d]
5972   26CD 38 00 00      mov c, 0
5973   26D0             ; --- START RELATIONAL
5974   26D0 D7            push a
5975   26D1 11            mov a, b
5976   26D2 FD 2E 01 00   mov32 cb, $00000001
5976   26D6 00 00 
5977   26D8 B0            cmp a, b
5978   26D9 FD 80         sge ; >=
5979   26DB E4            pop a
5980   26DC             ; --- END RELATIONAL
5981   26DC FD A7         sand a, b
5982   26DE 11            mov a, b
5983   26DF FA FD FF      lea d, [bp + -3] ; $j
5984   26E2 2A            mov b, [d]
5985   26E3 38 00 00      mov c, 0
5986   26E6             ; --- START RELATIONAL
5987   26E6 D7            push a
5988   26E7 11            mov a, b
5989   26E8 FD 2E 08 00   mov32 cb, $00000008
5989   26EC 00 00 
5990   26EE B0            cmp a, b
5991   26EF FD 74         sle ; <= (signed)
5992   26F1 E4            pop a
5993   26F2             ; --- END RELATIONAL
5994   26F2 FD A7         sand a, b
5995   26F4 E4            pop a
5996   26F5             ; --- END LOGICAL AND
5997   26F5 C0 00 00      cmp b, 0
5998   26F8 C6 97 27      je _if96_exit
5999   26FB             _if96_TRUE:
6000   26FB             ; if (quad[i+-1][j+-1] == 		2) { 
6001   26FB             _if97_cond:
6002   26FB                             
6003   26FB 3B 5E 6E      mov d, _quad_data ; $quad
6004   26FE D7            push a
6005   26FF DA            push d
6006   2700                             
6007   2700 FA FF FF      lea d, [bp + -1] ; $i
6008   2703 2A            mov b, [d]
6009   2704 38 00 00      mov c, 0
6010   2707             ; --- START TERMS
6011   2707 D7            push a
6012   2708 11            mov a, b
6013   2709 FD 2E FF FF   mov32 cb, $ffffffff
6013   270D FF FF 
6014   270F 56            add b, a
6015   2710 E4            pop a
6016   2711             ; --- END TERMS
6017   2711 E7            pop d
6018   2712 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
6019   2716 DA            push d
6020   2717                             
6021   2717 FA FD FF      lea d, [bp + -3] ; $j
6022   271A 2A            mov b, [d]
6023   271B 38 00 00      mov c, 0
6024   271E             ; --- START TERMS
6025   271E D7            push a
6026   271F 11            mov a, b
6027   2720 FD 2E FF FF   mov32 cb, $ffffffff
6027   2724 FF FF 
6028   2726 56            add b, a
6029   2727 E4            pop a
6030   2728             ; --- END TERMS
6031   2728 E7            pop d
6032   2729 5A            add d, b
6033   272A E4            pop a
6034   272B 32            mov bl, [d]
6035   272C A7 00         mov bh, 0
6036   272E 38 00 00      mov c, 0
6037   2731             ; --- START RELATIONAL
6038   2731 D7            push a
6039   2732 11            mov a, b
6040   2733 FD 2E 02 00   mov32 cb, $00000002
6040   2737 00 00 
6041   2739 B0            cmp a, b
6042   273A FD 71         seq ; ==
6043   273C E4            pop a
6044   273D             ; --- END RELATIONAL
6045   273D C0 00 00      cmp b, 0
6046   2740 C6 94 27      je _if97_exit
6047   2743             _if97_TRUE:
6048   2743             ; docked = 1; 
6049   2743 3B 81 6D      mov d, _docked ; $docked
6050   2746 DA            push d
6051   2747                             
6052   2747 FD 2E 01 00   mov32 cb, $00000001
6052   274B 00 00 
6053   274D E7            pop d
6054   274E FD 3E         mov [d], bl
6055   2750             ; sC = "DOCKED"; 
6056   2750 FA FB FF      lea d, [bp + -5] ; $sC
6057   2753 DA            push d
6058   2754                             
6059   2754 26 58 76      mov b, _s77 ; "DOCKED"
6060   2757 E7            pop d
6061   2758 FD 43         mov [d], b
6062   275A             ; energy = energy0; 
6063   275A 3B 82 6D      mov d, _energy ; $energy
6064   275D DA            push d
6065   275E                             
6066   275E 3B 84 6D      mov d, _energy0 ; $energy0
6067   2761 2A            mov b, [d]
6068   2762 38 00 00      mov c, 0
6069   2765 E7            pop d
6070   2766 FD 43         mov [d], b
6071   2768             ; torps = torps0; 
6072   2768 3B 37 6E      mov d, _torps ; $torps
6073   276B DA            push d
6074   276C                             
6075   276C 3B 38 6E      mov d, _torps0 ; $torps0
6076   276F 32            mov bl, [d]
6077   2770 A7 00         mov bh, 0
6078   2772 38 00 00      mov c, 0
6079   2775 E7            pop d
6080   2776 FD 3E         mov [d], bl
6081   2778             ; puts("Shields dropped for docking purposes."); 
6082   2778                             
6083   2778             ; --- START FUNCTION CALL
6084   2778                             
6085   2778 26 5F 76      mov b, _s78 ; "Shields dropped for docking purposes."
6086   277B FD AB         swp b
6087   277D D8            push b
6088   277E 07 5C 69      call puts
6089   2781 51 02 00      add sp, 2
6090   2784             ; --- END FUNCTION CALL
6091   2784             ; shield = 0; 
6092   2784 3B 3D 6E      mov d, _shield ; $shield
6093   2787 DA            push d
6094   2788                             
6095   2788 FD 2E 00 00   mov32 cb, $00000000
6095   278C 00 00 
6096   278E E7            pop d
6097   278F FD 43         mov [d], b
6098   2791 0A 94 27      jmp _if97_exit
6099   2794             _if97_exit:
6100   2794 0A 97 27      jmp _if96_exit
6101   2797             _if96_exit:
6102   2797             _for95_update:
6103   2797                             
6104   2797 FA FD FF      lea d, [bp + -3] ; $j
6105   279A 2A            mov b, [d]
6106   279B 38 00 00      mov c, 0
6107   279E 11            mov a, b
6108   279F FD 77         inc b
6109   27A1 FA FD FF      lea d, [bp + -3] ; $j
6110   27A4 FD 43         mov [d], b
6111   27A6 27            mov b, a
6112   27A7 0A 71 26      jmp _for95_cond
6113   27AA             _for95_exit:
6114   27AA             _for94_update:
6115   27AA                             
6116   27AA FA FF FF      lea d, [bp + -1] ; $i
6117   27AD 2A            mov b, [d]
6118   27AE 38 00 00      mov c, 0
6119   27B1 11            mov a, b
6120   27B2 FD 77         inc b
6121   27B4 FA FF FF      lea d, [bp + -1] ; $i
6122   27B7 FD 43         mov [d], b
6123   27B9 27            mov b, a
6124   27BA 0A 22 26      jmp _for94_cond
6125   27BD             _for94_exit:
6126   27BD             ; if (damage[2] < 0) { 
6127   27BD             _if98_cond:
6128   27BD                             
6129   27BD 3B 44 6E      mov d, _damage_data ; $damage
6130   27C0 D7            push a
6131   27C1 DA            push d
6132   27C2                             
6133   27C2 FD 2E 02 00   mov32 cb, $00000002
6133   27C6 00 00 
6134   27C8 E7            pop d
6135   27C9 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6136   27CD E4            pop a
6137   27CE 2A            mov b, [d]
6138   27CF 38 00 00      mov c, 0
6139   27D2             ; --- START RELATIONAL
6140   27D2 D7            push a
6141   27D3 11            mov a, b
6142   27D4 FD 2E 00 00   mov32 cb, $00000000
6142   27D8 00 00 
6143   27DA B0            cmp a, b
6144   27DB FD 73         slt ; < (signed)
6145   27DD E4            pop a
6146   27DE             ; --- END RELATIONAL
6147   27DE C0 00 00      cmp b, 0
6148   27E1 C6 F5 27      je _if98_exit
6149   27E4             _if98_TRUE:
6150   27E4             ; puts("\n*** Short Range Sensors are out ***"); 
6151   27E4                             
6152   27E4             ; --- START FUNCTION CALL
6153   27E4                             
6154   27E4 26 85 76      mov b, _s79 ; "\n*** Short Range Sensors are out ***"
6155   27E7 FD AB         swp b
6156   27E9 D8            push b
6157   27EA 07 5C 69      call puts
6158   27ED 51 02 00      add sp, 2
6159   27F0             ; --- END FUNCTION CALL
6160   27F0             ; return; 
6161   27F0 F9            leave
6162   27F1 09            ret
6163   27F2 0A F5 27      jmp _if98_exit
6164   27F5             _if98_exit:
6165   27F5             ; puts(srs_1); 
6166   27F5                             
6167   27F5             ; --- START FUNCTION CALL
6168   27F5                             
6169   27F5 3B 7F 6F      mov d, _srs_1 ; $srs_1
6170   27F8 2A            mov b, [d]
6171   27F9 38 00 00      mov c, 0
6172   27FC FD AB         swp b
6173   27FE D8            push b
6174   27FF 07 5C 69      call puts
6175   2802 51 02 00      add sp, 2
6176   2805             ; --- END FUNCTION CALL
6177   2805             ; for (i = 0; i < 8; i++) { 
6178   2805             _for99_init:
6179   2805 FA FF FF      lea d, [bp + -1] ; $i
6180   2808 DA            push d
6181   2809                              
6182   2809 FD 2E 00 00   mov32 cb, $00000000
6182   280D 00 00 
6183   280F E7            pop d
6184   2810 FD 43         mov [d], b
6185   2812             _for99_cond:
6186   2812                              
6187   2812 FA FF FF      lea d, [bp + -1] ; $i
6188   2815 2A            mov b, [d]
6189   2816 38 00 00      mov c, 0
6190   2819             ; --- START RELATIONAL
6191   2819 D7            push a
6192   281A 11            mov a, b
6193   281B FD 2E 08 00   mov32 cb, $00000008
6193   281F 00 00 
6194   2821 B0            cmp a, b
6195   2822 FD 73         slt ; < (signed)
6196   2824 E4            pop a
6197   2825             ; --- END RELATIONAL
6198   2825 C0 00 00      cmp b, 0
6199   2828 C6 7F 2A      je _for99_exit
6200   282B             _for99_block:
6201   282B             ; for (j = 0; j < 8; j++) 
6202   282B             _for100_init:
6203   282B FA FD FF      lea d, [bp + -3] ; $j
6204   282E DA            push d
6205   282F                              
6206   282F FD 2E 00 00   mov32 cb, $00000000
6206   2833 00 00 
6207   2835 E7            pop d
6208   2836 FD 43         mov [d], b
6209   2838             _for100_cond:
6210   2838                              
6211   2838 FA FD FF      lea d, [bp + -3] ; $j
6212   283B 2A            mov b, [d]
6213   283C 38 00 00      mov c, 0
6214   283F             ; --- START RELATIONAL
6215   283F D7            push a
6216   2840 11            mov a, b
6217   2841 FD 2E 08 00   mov32 cb, $00000008
6217   2845 00 00 
6218   2847 B0            cmp a, b
6219   2848 FD 73         slt ; < (signed)
6220   284A E4            pop a
6221   284B             ; --- END RELATIONAL
6222   284B C0 00 00      cmp b, 0
6223   284E C6 9E 28      je _for100_exit
6224   2851             _for100_block:
6225   2851             ; puts(tilestr[quad[i][j]]); 
6226   2851                              
6227   2851             ; --- START FUNCTION CALL
6228   2851                              
6229   2851 3B 81 6F      mov d, _tilestr_data ; $tilestr
6230   2854 D7            push a
6231   2855 DA            push d
6232   2856                              
6233   2856 3B 5E 6E      mov d, _quad_data ; $quad
6234   2859 D7            push a
6235   285A DA            push d
6236   285B                              
6237   285B FA FF FF      lea d, [bp + -1] ; $i
6238   285E 2A            mov b, [d]
6239   285F 38 00 00      mov c, 0
6240   2862 E7            pop d
6241   2863 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
6242   2867 DA            push d
6243   2868                              
6244   2868 FA FD FF      lea d, [bp + -3] ; $j
6245   286B 2A            mov b, [d]
6246   286C 38 00 00      mov c, 0
6247   286F E7            pop d
6248   2870 5A            add d, b
6249   2871 E4            pop a
6250   2872 32            mov bl, [d]
6251   2873 A7 00         mov bh, 0
6252   2875 38 00 00      mov c, 0
6253   2878 E7            pop d
6254   2879 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6255   287D E4            pop a
6256   287E 2A            mov b, [d]
6257   287F 38 00 00      mov c, 0
6258   2882 FD AB         swp b
6259   2884 D8            push b
6260   2885 07 5C 69      call puts
6261   2888 51 02 00      add sp, 2
6262   288B             ; --- END FUNCTION CALL
6263   288B             _for100_update:
6264   288B                              
6265   288B FA FD FF      lea d, [bp + -3] ; $j
6266   288E 2A            mov b, [d]
6267   288F 38 00 00      mov c, 0
6268   2892 11            mov a, b
6269   2893 FD 77         inc b
6270   2895 FA FD FF      lea d, [bp + -3] ; $j
6271   2898 FD 43         mov [d], b
6272   289A 27            mov b, a
6273   289B 0A 38 28      jmp _for100_cond
6274   289E             _for100_exit:
6275   289E             ; if (i == 0) 
6276   289E             _if101_cond:
6277   289E                              
6278   289E FA FF FF      lea d, [bp + -1] ; $i
6279   28A1 2A            mov b, [d]
6280   28A2 38 00 00      mov c, 0
6281   28A5             ; --- START RELATIONAL
6282   28A5 D7            push a
6283   28A6 11            mov a, b
6284   28A7 FD 2E 00 00   mov32 cb, $00000000
6284   28AB 00 00 
6285   28AD B0            cmp a, b
6286   28AE FD 71         seq ; ==
6287   28B0 E4            pop a
6288   28B1             ; --- END RELATIONAL
6289   28B1 C0 00 00      cmp b, 0
6290   28B4 C6 D9 28      je _if101_exit
6291   28B7             _if101_TRUE:
6292   28B7             ; printf("    Stardate            %d\n", FROM_FIXED(stardate)); 
6293   28B7                              
6294   28B7             ; --- START FUNCTION CALL
6295   28B7                              
6296   28B7             ; --- START FUNCTION CALL
6297   28B7                              
6298   28B7 3B 5C 6E      mov d, _stardate ; $stardate
6299   28BA 2A            mov b, [d]
6300   28BB 38 00 00      mov c, 0
6301   28BE FD AB         swp b
6302   28C0 D8            push b
6303   28C1 07 68 04      call FROM_FIXED
6304   28C4 51 02 00      add sp, 2
6305   28C7             ; --- END FUNCTION CALL
6306   28C7 FD AB         swp b
6307   28C9 D8            push b
6308   28CA                              
6309   28CA 26 AA 76      mov b, _s80 ; "    Stardate            %d\n"
6310   28CD FD AB         swp b
6311   28CF D8            push b
6312   28D0 07 4F 60      call printf
6313   28D3 51 04 00      add sp, 4
6314   28D6             ; --- END FUNCTION CALL
6315   28D6 0A D9 28      jmp _if101_exit
6316   28D9             _if101_exit:
6317   28D9             ; if (i == 1) 
6318   28D9             _if102_cond:
6319   28D9                              
6320   28D9 FA FF FF      lea d, [bp + -1] ; $i
6321   28DC 2A            mov b, [d]
6322   28DD 38 00 00      mov c, 0
6323   28E0             ; --- START RELATIONAL
6324   28E0 D7            push a
6325   28E1 11            mov a, b
6326   28E2 FD 2E 01 00   mov32 cb, $00000001
6326   28E6 00 00 
6327   28E8 B0            cmp a, b
6328   28E9 FD 71         seq ; ==
6329   28EB E4            pop a
6330   28EC             ; --- END RELATIONAL
6331   28EC C0 00 00      cmp b, 0
6332   28EF C6 0B 29      je _if102_exit
6333   28F2             _if102_TRUE:
6334   28F2             ; printf("    Condition           %s\n", sC); 
6335   28F2                              
6336   28F2             ; --- START FUNCTION CALL
6337   28F2                              
6338   28F2 FA FB FF      lea d, [bp + -5] ; $sC
6339   28F5 2A            mov b, [d]
6340   28F6 38 00 00      mov c, 0
6341   28F9 FD AB         swp b
6342   28FB D8            push b
6343   28FC                              
6344   28FC 26 C6 76      mov b, _s81 ; "    Condition           %s\n"
6345   28FF FD AB         swp b
6346   2901 D8            push b
6347   2902 07 4F 60      call printf
6348   2905 51 04 00      add sp, 4
6349   2908             ; --- END FUNCTION CALL
6350   2908 0A 0B 29      jmp _if102_exit
6351   290B             _if102_exit:
6352   290B             ; if (i == 2) 
6353   290B             _if103_cond:
6354   290B                              
6355   290B FA FF FF      lea d, [bp + -1] ; $i
6356   290E 2A            mov b, [d]
6357   290F 38 00 00      mov c, 0
6358   2912             ; --- START RELATIONAL
6359   2912 D7            push a
6360   2913 11            mov a, b
6361   2914 FD 2E 02 00   mov32 cb, $00000002
6361   2918 00 00 
6362   291A B0            cmp a, b
6363   291B FD 71         seq ; ==
6364   291D E4            pop a
6365   291E             ; --- END RELATIONAL
6366   291E C0 00 00      cmp b, 0
6367   2921 C6 47 29      je _if103_exit
6368   2924             _if103_TRUE:
6369   2924             ; printf("    Quadrant            %d, %d\n", quad_y, quad_x); 
6370   2924                              
6371   2924             ; --- START FUNCTION CALL
6372   2924                              
6373   2924 3B 3B 6E      mov d, _quad_x ; $quad_x
6374   2927 2A            mov b, [d]
6375   2928 38 00 00      mov c, 0
6376   292B FD AB         swp b
6377   292D D8            push b
6378   292E                              
6379   292E 3B 39 6E      mov d, _quad_y ; $quad_y
6380   2931 2A            mov b, [d]
6381   2932 38 00 00      mov c, 0
6382   2935 FD AB         swp b
6383   2937 D8            push b
6384   2938                              
6385   2938 26 E2 76      mov b, _s82 ; "    Quadrant            %d, %d\n"
6386   293B FD AB         swp b
6387   293D D8            push b
6388   293E 07 4F 60      call printf
6389   2941 51 06 00      add sp, 6
6390   2944             ; --- END FUNCTION CALL
6391   2944 0A 47 29      jmp _if103_exit
6392   2947             _if103_exit:
6393   2947             ; if (i == 3) 
6394   2947             _if104_cond:
6395   2947                              
6396   2947 FA FF FF      lea d, [bp + -1] ; $i
6397   294A 2A            mov b, [d]
6398   294B 38 00 00      mov c, 0
6399   294E             ; --- START RELATIONAL
6400   294E D7            push a
6401   294F 11            mov a, b
6402   2950 FD 2E 03 00   mov32 cb, $00000003
6402   2954 00 00 
6403   2956 B0            cmp a, b
6404   2957 FD 71         seq ; ==
6405   2959 E4            pop a
6406   295A             ; --- END RELATIONAL
6407   295A C0 00 00      cmp b, 0
6408   295D C6 95 29      je _if104_exit
6409   2960             _if104_TRUE:
6410   2960             ; printf("    Sector              %d, %d\n", FROM_FIXED00(ship_y), FROM_FIXED00(ship_x)); 
6411   2960                              
6412   2960             ; --- START FUNCTION CALL
6413   2960                              
6414   2960             ; --- START FUNCTION CALL
6415   2960                              
6416   2960 3B 5A 6E      mov d, _ship_x ; $ship_x
6417   2963 2A            mov b, [d]
6418   2964 38 00 00      mov c, 0
6419   2967 FD AB         swp b
6420   2969 D8            push b
6421   296A 07 DC 04      call FROM_FIXED00
6422   296D 51 02 00      add sp, 2
6423   2970             ; --- END FUNCTION CALL
6424   2970 FD AB         swp b
6425   2972 D8            push b
6426   2973                              
6427   2973             ; --- START FUNCTION CALL
6428   2973                              
6429   2973 3B 58 6E      mov d, _ship_y ; $ship_y
6430   2976 2A            mov b, [d]
6431   2977 38 00 00      mov c, 0
6432   297A FD AB         swp b
6433   297C D8            push b
6434   297D 07 DC 04      call FROM_FIXED00
6435   2980 51 02 00      add sp, 2
6436   2983             ; --- END FUNCTION CALL
6437   2983 FD AB         swp b
6438   2985 D8            push b
6439   2986                              
6440   2986 26 02 77      mov b, _s83 ; "    Sector              %d, %d\n"
6441   2989 FD AB         swp b
6442   298B D8            push b
6443   298C 07 4F 60      call printf
6444   298F 51 06 00      add sp, 6
6445   2992             ; --- END FUNCTION CALL
6446   2992 0A 95 29      jmp _if104_exit
6447   2995             _if104_exit:
6448   2995             ; if (i == 4) 
6449   2995             _if105_cond:
6450   2995                              
6451   2995 FA FF FF      lea d, [bp + -1] ; $i
6452   2998 2A            mov b, [d]
6453   2999 38 00 00      mov c, 0
6454   299C             ; --- START RELATIONAL
6455   299C D7            push a
6456   299D 11            mov a, b
6457   299E FD 2E 04 00   mov32 cb, $00000004
6457   29A2 00 00 
6458   29A4 B0            cmp a, b
6459   29A5 FD 71         seq ; ==
6460   29A7 E4            pop a
6461   29A8             ; --- END RELATIONAL
6462   29A8 C0 00 00      cmp b, 0
6463   29AB C6 C9 29      je _if105_exit
6464   29AE             _if105_TRUE:
6465   29AE             ; printf("    Photon Torpedoes    %d\n", torps); 
6466   29AE                              
6467   29AE             ; --- START FUNCTION CALL
6468   29AE                              
6469   29AE 3B 37 6E      mov d, _torps ; $torps
6470   29B1 32            mov bl, [d]
6471   29B2 A7 00         mov bh, 0
6472   29B4 38 00 00      mov c, 0
6473   29B7 FD AA         swp a
6474   29B9 D8            push b
6475   29BA                              
6476   29BA 26 22 77      mov b, _s84 ; "    Photon Torpedoes    %d\n"
6477   29BD FD AB         swp b
6478   29BF D8            push b
6479   29C0 07 4F 60      call printf
6480   29C3 51 03 00      add sp, 3
6481   29C6             ; --- END FUNCTION CALL
6482   29C6 0A C9 29      jmp _if105_exit
6483   29C9             _if105_exit:
6484   29C9             ; if (i == 5) 
6485   29C9             _if106_cond:
6486   29C9                              
6487   29C9 FA FF FF      lea d, [bp + -1] ; $i
6488   29CC 2A            mov b, [d]
6489   29CD 38 00 00      mov c, 0
6490   29D0             ; --- START RELATIONAL
6491   29D0 D7            push a
6492   29D1 11            mov a, b
6493   29D2 FD 2E 05 00   mov32 cb, $00000005
6493   29D6 00 00 
6494   29D8 B0            cmp a, b
6495   29D9 FD 71         seq ; ==
6496   29DB E4            pop a
6497   29DC             ; --- END RELATIONAL
6498   29DC C0 00 00      cmp b, 0
6499   29DF C6 06 2A      je _if106_exit
6500   29E2             _if106_TRUE:
6501   29E2             ; printf("    Total Energy        %d\n", energy + shield); 
6502   29E2                              
6503   29E2             ; --- START FUNCTION CALL
6504   29E2                              
6505   29E2 3B 82 6D      mov d, _energy ; $energy
6506   29E5 2A            mov b, [d]
6507   29E6 38 00 00      mov c, 0
6508   29E9             ; --- START TERMS
6509   29E9 D7            push a
6510   29EA 11            mov a, b
6511   29EB 3B 3D 6E      mov d, _shield ; $shield
6512   29EE 2A            mov b, [d]
6513   29EF 38 00 00      mov c, 0
6514   29F2 56            add b, a
6515   29F3 E4            pop a
6516   29F4             ; --- END TERMS
6517   29F4 FD AB         swp b
6518   29F6 D8            push b
6519   29F7                              
6520   29F7 26 3E 77      mov b, _s85 ; "    Total Energy        %d\n"
6521   29FA FD AB         swp b
6522   29FC D8            push b
6523   29FD 07 4F 60      call printf
6524   2A00 51 04 00      add sp, 4
6525   2A03             ; --- END FUNCTION CALL
6526   2A03 0A 06 2A      jmp _if106_exit
6527   2A06             _if106_exit:
6528   2A06             ; if (i == 6) 
6529   2A06             _if107_cond:
6530   2A06                              
6531   2A06 FA FF FF      lea d, [bp + -1] ; $i
6532   2A09 2A            mov b, [d]
6533   2A0A 38 00 00      mov c, 0
6534   2A0D             ; --- START RELATIONAL
6535   2A0D D7            push a
6536   2A0E 11            mov a, b
6537   2A0F FD 2E 06 00   mov32 cb, $00000006
6537   2A13 00 00 
6538   2A15 B0            cmp a, b
6539   2A16 FD 71         seq ; ==
6540   2A18 E4            pop a
6541   2A19             ; --- END RELATIONAL
6542   2A19 C0 00 00      cmp b, 0
6543   2A1C C6 38 2A      je _if107_exit
6544   2A1F             _if107_TRUE:
6545   2A1F             ; printf("    Shields             %d\n", shield); 
6546   2A1F                              
6547   2A1F             ; --- START FUNCTION CALL
6548   2A1F                              
6549   2A1F 3B 3D 6E      mov d, _shield ; $shield
6550   2A22 2A            mov b, [d]
6551   2A23 38 00 00      mov c, 0
6552   2A26 FD AB         swp b
6553   2A28 D8            push b
6554   2A29                              
6555   2A29 26 5A 77      mov b, _s86 ; "    Shields             %d\n"
6556   2A2C FD AB         swp b
6557   2A2E D8            push b
6558   2A2F 07 4F 60      call printf
6559   2A32 51 04 00      add sp, 4
6560   2A35             ; --- END FUNCTION CALL
6561   2A35 0A 38 2A      jmp _if107_exit
6562   2A38             _if107_exit:
6563   2A38             ; if (i == 7) 
6564   2A38             _if108_cond:
6565   2A38                              
6566   2A38 FA FF FF      lea d, [bp + -1] ; $i
6567   2A3B 2A            mov b, [d]
6568   2A3C 38 00 00      mov c, 0
6569   2A3F             ; --- START RELATIONAL
6570   2A3F D7            push a
6571   2A40 11            mov a, b
6572   2A41 FD 2E 07 00   mov32 cb, $00000007
6572   2A45 00 00 
6573   2A47 B0            cmp a, b
6574   2A48 FD 71         seq ; ==
6575   2A4A E4            pop a
6576   2A4B             ; --- END RELATIONAL
6577   2A4B C0 00 00      cmp b, 0
6578   2A4E C6 6C 2A      je _if108_exit
6579   2A51             _if108_TRUE:
6580   2A51             ; printf("    Klingons Remaining  %d\n", klingons_left); 
6581   2A51                              
6582   2A51             ; --- START FUNCTION CALL
6583   2A51                              
6584   2A51 3B 36 6E      mov d, _klingons_left ; $klingons_left
6585   2A54 32            mov bl, [d]
6586   2A55 A7 00         mov bh, 0
6587   2A57 38 00 00      mov c, 0
6588   2A5A FD AA         swp a
6589   2A5C D8            push b
6590   2A5D                              
6591   2A5D 26 76 77      mov b, _s87 ; "    Klingons Remaining  %d\n"
6592   2A60 FD AB         swp b
6593   2A62 D8            push b
6594   2A63 07 4F 60      call printf
6595   2A66 51 03 00      add sp, 3
6596   2A69             ; --- END FUNCTION CALL
6597   2A69 0A 6C 2A      jmp _if108_exit
6598   2A6C             _if108_exit:
6599   2A6C             _for99_update:
6600   2A6C                              
6601   2A6C FA FF FF      lea d, [bp + -1] ; $i
6602   2A6F 2A            mov b, [d]
6603   2A70 38 00 00      mov c, 0
6604   2A73 11            mov a, b
6605   2A74 FD 77         inc b
6606   2A76 FA FF FF      lea d, [bp + -1] ; $i
6607   2A79 FD 43         mov [d], b
6608   2A7B 27            mov b, a
6609   2A7C 0A 12 28      jmp _for99_cond
6610   2A7F             _for99_exit:
6611   2A7F             ; puts(srs_1); 
6612   2A7F                              
6613   2A7F             ; --- START FUNCTION CALL
6614   2A7F                              
6615   2A7F 3B 7F 6F      mov d, _srs_1 ; $srs_1
6616   2A82 2A            mov b, [d]
6617   2A83 38 00 00      mov c, 0
6618   2A86 FD AB         swp b
6619   2A88 D8            push b
6620   2A89 07 5C 69      call puts
6621   2A8C 51 02 00      add sp, 2
6622   2A8F             ; --- END FUNCTION CALL
6623   2A8F             ; putchar('\n'); 
6624   2A8F                              
6625   2A8F             ; --- START FUNCTION CALL
6626   2A8F                              
6627   2A8F FD 2E 0A 00   mov32 cb, $0000000a
6627   2A93 00 00 
6628   2A95 DD            push bl
6629   2A96 07 D1 64      call putchar
6630   2A99 51 01 00      add sp, 1
6631   2A9C             ; --- END FUNCTION CALL
6632   2A9C             ; return; 
6633   2A9C F9            leave
6634   2A9D 09            ret
6635   2A9E             
6636   2A9E             put1bcd:
6637   2A9E F8 00 00      enter 0 ; (push bp; mov bp, sp)
6638   2AA1             ; v = v & 0x0F; 
6639   2AA1 FA 05 00      lea d, [bp + 5] ; $v
6640   2AA4 DA            push d
6641   2AA5                              
6642   2AA5 FA 05 00      lea d, [bp + 5] ; $v
6643   2AA8 32            mov bl, [d]
6644   2AA9 A7 00         mov bh, 0
6645   2AAB 38 00 00      mov c, 0
6646   2AAE D7            push a
6647   2AAF 11            mov a, b
6648   2AB0 FD 2E 0F 00   mov32 cb, $0000000f
6648   2AB4 00 00 
6649   2AB6 FD 92         and b, a ; &
6650   2AB8 E4            pop a
6651   2AB9 E7            pop d
6652   2ABA FD 3E         mov [d], bl
6653   2ABC             ; putchar('0' + v); 
6654   2ABC                              
6655   2ABC             ; --- START FUNCTION CALL
6656   2ABC                              
6657   2ABC FD 2E 30 00   mov32 cb, $00000030
6657   2AC0 00 00 
6658   2AC2             ; --- START TERMS
6659   2AC2 D7            push a
6660   2AC3 11            mov a, b
6661   2AC4 FA 05 00      lea d, [bp + 5] ; $v
6662   2AC7 32            mov bl, [d]
6663   2AC8 A7 00         mov bh, 0
6664   2ACA 38 00 00      mov c, 0
6665   2ACD 56            add b, a
6666   2ACE E4            pop a
6667   2ACF             ; --- END TERMS
6668   2ACF DD            push bl
6669   2AD0 07 D1 64      call putchar
6670   2AD3 51 01 00      add sp, 1
6671   2AD6             ; --- END FUNCTION CALL
6672   2AD6 F9            leave
6673   2AD7 09            ret
6674   2AD8             
6675   2AD8             putbcd:
6676   2AD8 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6677   2ADB             ; put1bcd(x >> 8); 
6678   2ADB                              
6679   2ADB             ; --- START FUNCTION CALL
6680   2ADB                              
6681   2ADB FA 05 00      lea d, [bp + 5] ; $x
6682   2ADE 2A            mov b, [d]
6683   2ADF 38 00 00      mov c, 0
6684   2AE2             ; --- START SHIFT
6685   2AE2 D7            push a
6686   2AE3 11            mov a, b
6687   2AE4 FD 2E 08 00   mov32 cb, $00000008
6687   2AE8 00 00 
6688   2AEA FD 39         mov c, b
6689   2AEC A1            shr a, cl
6690   2AED 27            mov b, a
6691   2AEE E4            pop a
6692   2AEF             ; --- END SHIFT
6693   2AEF DD            push bl
6694   2AF0 07 9E 2A      call put1bcd
6695   2AF3 51 01 00      add sp, 1
6696   2AF6             ; --- END FUNCTION CALL
6697   2AF6             ; put1bcd(x >> 4); 
6698   2AF6                              
6699   2AF6             ; --- START FUNCTION CALL
6700   2AF6                              
6701   2AF6 FA 05 00      lea d, [bp + 5] ; $x
6702   2AF9 2A            mov b, [d]
6703   2AFA 38 00 00      mov c, 0
6704   2AFD             ; --- START SHIFT
6705   2AFD D7            push a
6706   2AFE 11            mov a, b
6707   2AFF FD 2E 04 00   mov32 cb, $00000004
6707   2B03 00 00 
6708   2B05 FD 39         mov c, b
6709   2B07 A1            shr a, cl
6710   2B08 27            mov b, a
6711   2B09 E4            pop a
6712   2B0A             ; --- END SHIFT
6713   2B0A DD            push bl
6714   2B0B 07 9E 2A      call put1bcd
6715   2B0E 51 01 00      add sp, 1
6716   2B11             ; --- END FUNCTION CALL
6717   2B11             ; put1bcd(x); 
6718   2B11                              
6719   2B11             ; --- START FUNCTION CALL
6720   2B11                              
6721   2B11 FA 05 00      lea d, [bp + 5] ; $x
6722   2B14 2A            mov b, [d]
6723   2B15 38 00 00      mov c, 0
6724   2B18 DD            push bl
6725   2B19 07 9E 2A      call put1bcd
6726   2B1C 51 01 00      add sp, 1
6727   2B1F             ; --- END FUNCTION CALL
6728   2B1F F9            leave
6729   2B20 09            ret
6730   2B21             
6731   2B21             long_range_scan:
6732   2B21 F8 00 00      enter 0 ; (push bp; mov bp, sp)
6733   2B24             ; int i, j; 
6734   2B24 52 02 00      sub sp, 2
6735   2B27 52 02 00      sub sp, 2
6736   2B2A             ; if (inoperable(3)) 
6737   2B2A             _if109_cond:
6738   2B2A                              
6739   2B2A             ; --- START FUNCTION CALL
6740   2B2A                              
6741   2B2A FD 2E 03 00   mov32 cb, $00000003
6741   2B2E 00 00 
6742   2B30 DD            push bl
6743   2B31 07 70 09      call inoperable
6744   2B34 51 01 00      add sp, 1
6745   2B37             ; --- END FUNCTION CALL
6746   2B37 C0 00 00      cmp b, 0
6747   2B3A C6 42 2B      je _if109_exit
6748   2B3D             _if109_TRUE:
6749   2B3D             ; return; 
6750   2B3D F9            leave
6751   2B3E 09            ret
6752   2B3F 0A 42 2B      jmp _if109_exit
6753   2B42             _if109_exit:
6754   2B42             ; printf("Long Range Scan for Quadrant %d, %d\n\n", quad_y, quad_x); 
6755   2B42                              
6756   2B42             ; --- START FUNCTION CALL
6757   2B42                              
6758   2B42 3B 3B 6E      mov d, _quad_x ; $quad_x
6759   2B45 2A            mov b, [d]
6760   2B46 38 00 00      mov c, 0
6761   2B49 FD AB         swp b
6762   2B4B D8            push b
6763   2B4C                              
6764   2B4C 3B 39 6E      mov d, _quad_y ; $quad_y
6765   2B4F 2A            mov b, [d]
6766   2B50 38 00 00      mov c, 0
6767   2B53 FD AB         swp b
6768   2B55 D8            push b
6769   2B56                              
6770   2B56 26 92 77      mov b, _s88 ; "Long Range Scan for Quadrant %d, %d\n\n"
6771   2B59 FD AB         swp b
6772   2B5B D8            push b
6773   2B5C 07 4F 60      call printf
6774   2B5F 51 06 00      add sp, 6
6775   2B62             ; --- END FUNCTION CALL
6776   2B62             ; for (i = quad_y - 1; i <= quad_y + 1; i++) { 
6777   2B62             _for110_init:
6778   2B62 FA FF FF      lea d, [bp + -1] ; $i
6779   2B65 DA            push d
6780   2B66                              
6781   2B66 3B 39 6E      mov d, _quad_y ; $quad_y
6782   2B69 2A            mov b, [d]
6783   2B6A 38 00 00      mov c, 0
6784   2B6D             ; --- START TERMS
6785   2B6D D7            push a
6786   2B6E 11            mov a, b
6787   2B6F FD 2E 01 00   mov32 cb, $00000001
6787   2B73 00 00 
6788   2B75 60            sub a, b
6789   2B76 27            mov b, a
6790   2B77 E4            pop a
6791   2B78             ; --- END TERMS
6792   2B78 E7            pop d
6793   2B79 FD 43         mov [d], b
6794   2B7B             _for110_cond:
6795   2B7B                              
6796   2B7B FA FF FF      lea d, [bp + -1] ; $i
6797   2B7E 2A            mov b, [d]
6798   2B7F 38 00 00      mov c, 0
6799   2B82             ; --- START RELATIONAL
6800   2B82 D7            push a
6801   2B83 11            mov a, b
6802   2B84 3B 39 6E      mov d, _quad_y ; $quad_y
6803   2B87 2A            mov b, [d]
6804   2B88 38 00 00      mov c, 0
6805   2B8B             ; --- START TERMS
6806   2B8B D7            push a
6807   2B8C 11            mov a, b
6808   2B8D FD 2E 01 00   mov32 cb, $00000001
6808   2B91 00 00 
6809   2B93 56            add b, a
6810   2B94 E4            pop a
6811   2B95             ; --- END TERMS
6812   2B95 B0            cmp a, b
6813   2B96 FD 74         sle ; <= (signed)
6814   2B98 E4            pop a
6815   2B99             ; --- END RELATIONAL
6816   2B99 C0 00 00      cmp b, 0
6817   2B9C C6 27 2D      je _for110_exit
6818   2B9F             _for110_block:
6819   2B9F             ; printf("%s:", lrs_1); 
6820   2B9F                              
6821   2B9F             ; --- START FUNCTION CALL
6822   2B9F                              
6823   2B9F 3B AC 6F      mov d, _lrs_1 ; $lrs_1
6824   2BA2 2A            mov b, [d]
6825   2BA3 38 00 00      mov c, 0
6826   2BA6 FD AB         swp b
6827   2BA8 D8            push b
6828   2BA9                              
6829   2BA9 26 B8 77      mov b, _s89 ; "%s:"
6830   2BAC FD AB         swp b
6831   2BAE D8            push b
6832   2BAF 07 4F 60      call printf
6833   2BB2 51 04 00      add sp, 4
6834   2BB5             ; --- END FUNCTION CALL
6835   2BB5             ; for (j = quad_x - 1; j <= quad_x + 1; j++) { 
6836   2BB5             _for111_init:
6837   2BB5 FA FD FF      lea d, [bp + -3] ; $j
6838   2BB8 DA            push d
6839   2BB9                              
6840   2BB9 3B 3B 6E      mov d, _quad_x ; $quad_x
6841   2BBC 2A            mov b, [d]
6842   2BBD 38 00 00      mov c, 0
6843   2BC0             ; --- START TERMS
6844   2BC0 D7            push a
6845   2BC1 11            mov a, b
6846   2BC2 FD 2E 01 00   mov32 cb, $00000001
6846   2BC6 00 00 
6847   2BC8 60            sub a, b
6848   2BC9 27            mov b, a
6849   2BCA E4            pop a
6850   2BCB             ; --- END TERMS
6851   2BCB E7            pop d
6852   2BCC FD 43         mov [d], b
6853   2BCE             _for111_cond:
6854   2BCE                              
6855   2BCE FA FD FF      lea d, [bp + -3] ; $j
6856   2BD1 2A            mov b, [d]
6857   2BD2 38 00 00      mov c, 0
6858   2BD5             ; --- START RELATIONAL
6859   2BD5 D7            push a
6860   2BD6 11            mov a, b
6861   2BD7 3B 3B 6E      mov d, _quad_x ; $quad_x
6862   2BDA 2A            mov b, [d]
6863   2BDB 38 00 00      mov c, 0
6864   2BDE             ; --- START TERMS
6865   2BDE D7            push a
6866   2BDF 11            mov a, b
6867   2BE0 FD 2E 01 00   mov32 cb, $00000001
6867   2BE4 00 00 
6868   2BE6 56            add b, a
6869   2BE7 E4            pop a
6870   2BE8             ; --- END TERMS
6871   2BE8 B0            cmp a, b
6872   2BE9 FD 74         sle ; <= (signed)
6873   2BEB E4            pop a
6874   2BEC             ; --- END RELATIONAL
6875   2BEC C0 00 00      cmp b, 0
6876   2BEF C6 07 2D      je _for111_exit
6877   2BF2             _for111_block:
6878   2BF2             ; putchar(' '); 
6879   2BF2                              
6880   2BF2             ; --- START FUNCTION CALL
6881   2BF2                              
6882   2BF2 FD 2E 20 00   mov32 cb, $00000020
6882   2BF6 00 00 
6883   2BF8 DD            push bl
6884   2BF9 07 D1 64      call putchar
6885   2BFC 51 01 00      add sp, 1
6886   2BFF             ; --- END FUNCTION CALL
6887   2BFF             ; if (i > 0 && i <= 8 && j > 0 && j <= 8) { 
6888   2BFF             _if112_cond:
6889   2BFF                              
6890   2BFF FA FF FF      lea d, [bp + -1] ; $i
6891   2C02 2A            mov b, [d]
6892   2C03 38 00 00      mov c, 0
6893   2C06             ; --- START RELATIONAL
6894   2C06 D7            push a
6895   2C07 11            mov a, b
6896   2C08 FD 2E 00 00   mov32 cb, $00000000
6896   2C0C 00 00 
6897   2C0E B0            cmp a, b
6898   2C0F FD 7F         sgt ; >
6899   2C11 E4            pop a
6900   2C12             ; --- END RELATIONAL
6901   2C12             ; --- START LOGICAL AND
6902   2C12 D7            push a
6903   2C13 11            mov a, b
6904   2C14 FA FF FF      lea d, [bp + -1] ; $i
6905   2C17 2A            mov b, [d]
6906   2C18 38 00 00      mov c, 0
6907   2C1B             ; --- START RELATIONAL
6908   2C1B D7            push a
6909   2C1C 11            mov a, b
6910   2C1D FD 2E 08 00   mov32 cb, $00000008
6910   2C21 00 00 
6911   2C23 B0            cmp a, b
6912   2C24 FD 74         sle ; <= (signed)
6913   2C26 E4            pop a
6914   2C27             ; --- END RELATIONAL
6915   2C27 FD A7         sand a, b
6916   2C29 11            mov a, b
6917   2C2A FA FD FF      lea d, [bp + -3] ; $j
6918   2C2D 2A            mov b, [d]
6919   2C2E 38 00 00      mov c, 0
6920   2C31             ; --- START RELATIONAL
6921   2C31 D7            push a
6922   2C32 11            mov a, b
6923   2C33 FD 2E 00 00   mov32 cb, $00000000
6923   2C37 00 00 
6924   2C39 B0            cmp a, b
6925   2C3A FD 7F         sgt ; >
6926   2C3C E4            pop a
6927   2C3D             ; --- END RELATIONAL
6928   2C3D FD A7         sand a, b
6929   2C3F 11            mov a, b
6930   2C40 FA FD FF      lea d, [bp + -3] ; $j
6931   2C43 2A            mov b, [d]
6932   2C44 38 00 00      mov c, 0
6933   2C47             ; --- START RELATIONAL
6934   2C47 D7            push a
6935   2C48 11            mov a, b
6936   2C49 FD 2E 08 00   mov32 cb, $00000008
6936   2C4D 00 00 
6937   2C4F B0            cmp a, b
6938   2C50 FD 74         sle ; <= (signed)
6939   2C52 E4            pop a
6940   2C53             ; --- END RELATIONAL
6941   2C53 FD A7         sand a, b
6942   2C55 E4            pop a
6943   2C56             ; --- END LOGICAL AND
6944   2C56 C0 00 00      cmp b, 0
6945   2C59 C6 DC 2C      je _if112_else
6946   2C5C             _if112_TRUE:
6947   2C5C             ; map[i][j] = map[i][j] |  0x1000		/* Set if this sector was mapped */; 
6948   2C5C 3B 86 6D      mov d, _map_data ; $map
6949   2C5F D7            push a
6950   2C60 DA            push d
6951   2C61                              
6952   2C61 FA FF FF      lea d, [bp + -1] ; $i
6953   2C64 2A            mov b, [d]
6954   2C65 38 00 00      mov c, 0
6955   2C68 E7            pop d
6956   2C69 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
6957   2C6D DA            push d
6958   2C6E                              
6959   2C6E FA FD FF      lea d, [bp + -3] ; $j
6960   2C71 2A            mov b, [d]
6961   2C72 38 00 00      mov c, 0
6962   2C75 E7            pop d
6963   2C76 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6964   2C7A E4            pop a
6965   2C7B DA            push d
6966   2C7C                              
6967   2C7C 3B 86 6D      mov d, _map_data ; $map
6968   2C7F D7            push a
6969   2C80 DA            push d
6970   2C81                              
6971   2C81 FA FF FF      lea d, [bp + -1] ; $i
6972   2C84 2A            mov b, [d]
6973   2C85 38 00 00      mov c, 0
6974   2C88 E7            pop d
6975   2C89 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
6976   2C8D DA            push d
6977   2C8E                              
6978   2C8E FA FD FF      lea d, [bp + -3] ; $j
6979   2C91 2A            mov b, [d]
6980   2C92 38 00 00      mov c, 0
6981   2C95 E7            pop d
6982   2C96 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
6983   2C9A E4            pop a
6984   2C9B 2A            mov b, [d]
6985   2C9C 38 00 00      mov c, 0
6986   2C9F D7            push a
6987   2CA0 11            mov a, b
6988   2CA1 FD 2E 00 10   mov32 cb, $00001000
6988   2CA5 00 00 
6989   2CA7 FD 70         or b, a ; |
6990   2CA9 E4            pop a
6991   2CAA E7            pop d
6992   2CAB FD 43         mov [d], b
6993   2CAD             ; putbcd(map[i][j]); 
6994   2CAD                              
6995   2CAD             ; --- START FUNCTION CALL
6996   2CAD                              
6997   2CAD 3B 86 6D      mov d, _map_data ; $map
6998   2CB0 D7            push a
6999   2CB1 DA            push d
7000   2CB2                              
7001   2CB2 FA FF FF      lea d, [bp + -1] ; $i
7002   2CB5 2A            mov b, [d]
7003   2CB6 38 00 00      mov c, 0
7004   2CB9 E7            pop d
7005   2CBA FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
7006   2CBE DA            push d
7007   2CBF                              
7008   2CBF FA FD FF      lea d, [bp + -3] ; $j
7009   2CC2 2A            mov b, [d]
7010   2CC3 38 00 00      mov c, 0
7011   2CC6 E7            pop d
7012   2CC7 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
7013   2CCB E4            pop a
7014   2CCC 2A            mov b, [d]
7015   2CCD 38 00 00      mov c, 0
7016   2CD0 FD AB         swp b
7017   2CD2 D8            push b
7018   2CD3 07 D8 2A      call putbcd
7019   2CD6 51 02 00      add sp, 2
7020   2CD9             ; --- END FUNCTION CALL
7021   2CD9 0A E8 2C      jmp _if112_exit
7022   2CDC             _if112_else:
7023   2CDC             ; puts("***"); 
7024   2CDC                              
7025   2CDC             ; --- START FUNCTION CALL
7026   2CDC                              
7027   2CDC 26 BC 77      mov b, _s90 ; "***"
7028   2CDF FD AB         swp b
7029   2CE1 D8            push b
7030   2CE2 07 5C 69      call puts
7031   2CE5 51 02 00      add sp, 2
7032   2CE8             ; --- END FUNCTION CALL
7033   2CE8             _if112_exit:
7034   2CE8             ; puts(" :"); 
7035   2CE8                              
7036   2CE8             ; --- START FUNCTION CALL
7037   2CE8                              
7038   2CE8 26 C0 77      mov b, _s91 ; " :"
7039   2CEB FD AB         swp b
7040   2CED D8            push b
7041   2CEE 07 5C 69      call puts
7042   2CF1 51 02 00      add sp, 2
7043   2CF4             ; --- END FUNCTION CALL
7044   2CF4             _for111_update:
7045   2CF4                              
7046   2CF4 FA FD FF      lea d, [bp + -3] ; $j
7047   2CF7 2A            mov b, [d]
7048   2CF8 38 00 00      mov c, 0
7049   2CFB 11            mov a, b
7050   2CFC FD 77         inc b
7051   2CFE FA FD FF      lea d, [bp + -3] ; $j
7052   2D01 FD 43         mov [d], b
7053   2D03 27            mov b, a
7054   2D04 0A CE 2B      jmp _for111_cond
7055   2D07             _for111_exit:
7056   2D07             ; putchar('\n'); 
7057   2D07                              
7058   2D07             ; --- START FUNCTION CALL
7059   2D07                              
7060   2D07 FD 2E 0A 00   mov32 cb, $0000000a
7060   2D0B 00 00 
7061   2D0D DD            push bl
7062   2D0E 07 D1 64      call putchar
7063   2D11 51 01 00      add sp, 1
7064   2D14             ; --- END FUNCTION CALL
7065   2D14             _for110_update:
7066   2D14                              
7067   2D14 FA FF FF      lea d, [bp + -1] ; $i
7068   2D17 2A            mov b, [d]
7069   2D18 38 00 00      mov c, 0
7070   2D1B 11            mov a, b
7071   2D1C FD 77         inc b
7072   2D1E FA FF FF      lea d, [bp + -1] ; $i
7073   2D21 FD 43         mov [d], b
7074   2D23 27            mov b, a
7075   2D24 0A 7B 2B      jmp _for110_cond
7076   2D27             _for110_exit:
7077   2D27             ; printf("%s\n", lrs_1); 
7078   2D27                              
7079   2D27             ; --- START FUNCTION CALL
7080   2D27                              
7081   2D27 3B AC 6F      mov d, _lrs_1 ; $lrs_1
7082   2D2A 2A            mov b, [d]
7083   2D2B 38 00 00      mov c, 0
7084   2D2E FD AB         swp b
7085   2D30 D8            push b
7086   2D31                              
7087   2D31 26 C3 77      mov b, _s92 ; "%s\n"
7088   2D34 FD AB         swp b
7089   2D36 D8            push b
7090   2D37 07 4F 60      call printf
7091   2D3A 51 04 00      add sp, 4
7092   2D3D             ; --- END FUNCTION CALL
7093   2D3D F9            leave
7094   2D3E 09            ret
7095   2D3F             
7096   2D3F             no_klingon:
7097   2D3F F8 00 00      enter 0 ; (push bp; mov bp, sp)
7098   2D42             ; if (klingons <= 0) { 
7099   2D42             _if113_cond:
7100   2D42                              
7101   2D42 3B 34 6E      mov d, _klingons ; $klingons
7102   2D45 32            mov bl, [d]
7103   2D46 A7 00         mov bh, 0
7104   2D48 38 00 00      mov c, 0
7105   2D4B             ; --- START RELATIONAL
7106   2D4B D7            push a
7107   2D4C 11            mov a, b
7108   2D4D FD 2E 00 00   mov32 cb, $00000000
7108   2D51 00 00 
7109   2D53 B0            cmp a, b
7110   2D54 FD 76         sleu ; <= (unsigned)
7111   2D56 E4            pop a
7112   2D57             ; --- END RELATIONAL
7113   2D57 C0 00 00      cmp b, 0
7114   2D5A C6 74 2D      je _if113_exit
7115   2D5D             _if113_TRUE:
7116   2D5D             ; puts("Science Officer Spock reports:\n  'Sensors show no enemy ships in this quadrant'\n"); 
7117   2D5D                              
7118   2D5D             ; --- START FUNCTION CALL
7119   2D5D                              
7120   2D5D 26 C7 77      mov b, _s93 ; "Science Officer Spock reports:\n  'Sensors show no enemy ships in this quadrant'\n"
7121   2D60 FD AB         swp b
7122   2D62 D8            push b
7123   2D63 07 5C 69      call puts
7124   2D66 51 02 00      add sp, 2
7125   2D69             ; --- END FUNCTION CALL
7126   2D69             ; return 1; 
7127   2D69                              
7128   2D69 FD 2E 01 00   mov32 cb, $00000001
7128   2D6D 00 00 
7129   2D6F F9            leave
7130   2D70 09            ret
7131   2D71 0A 74 2D      jmp _if113_exit
7132   2D74             _if113_exit:
7133   2D74             ; return 0; 
7134   2D74                              
7135   2D74 FD 2E 00 00   mov32 cb, $00000000
7135   2D78 00 00 
7136   2D7A F9            leave
7137   2D7B 09            ret
7138   2D7C             
7139   2D7C             wipe_klingon:
7140   2D7C F8 00 00      enter 0 ; (push bp; mov bp, sp)
7141   2D7F             ; quad[k->y+-1][k->x+-1] = 		0; 
7142   2D7F 3B 5E 6E      mov d, _quad_data ; $quad
7143   2D82 D7            push a
7144   2D83 DA            push d
7145   2D84                              
7146   2D84 FA 05 00      lea d, [bp + 5] ; $k
7147   2D87 FD 2A         mov d, [d]
7148   2D89 58 00 00      add d, 0
7149   2D8C 32            mov bl, [d]
7150   2D8D A7 00         mov bh, 0
7151   2D8F 38 00 00      mov c, 0
7152   2D92             ; --- START TERMS
7153   2D92 D7            push a
7154   2D93 11            mov a, b
7155   2D94 FD 2E FF FF   mov32 cb, $ffffffff
7155   2D98 FF FF 
7156   2D9A 56            add b, a
7157   2D9B E4            pop a
7158   2D9C             ; --- END TERMS
7159   2D9C E7            pop d
7160   2D9D FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
7161   2DA1 DA            push d
7162   2DA2                              
7163   2DA2 FA 05 00      lea d, [bp + 5] ; $k
7164   2DA5 FD 2A         mov d, [d]
7165   2DA7 58 01 00      add d, 1
7166   2DAA 32            mov bl, [d]
7167   2DAB A7 00         mov bh, 0
7168   2DAD 38 00 00      mov c, 0
7169   2DB0             ; --- START TERMS
7170   2DB0 D7            push a
7171   2DB1 11            mov a, b
7172   2DB2 FD 2E FF FF   mov32 cb, $ffffffff
7172   2DB6 FF FF 
7173   2DB8 56            add b, a
7174   2DB9 E4            pop a
7175   2DBA             ; --- END TERMS
7176   2DBA E7            pop d
7177   2DBB 5A            add d, b
7178   2DBC E4            pop a
7179   2DBD DA            push d
7180   2DBE                              
7181   2DBE FD 2E 00 00   mov32 cb, $00000000
7181   2DC2 00 00 
7182   2DC4 E7            pop d
7183   2DC5 FD 3E         mov [d], bl
7184   2DC7 F9            leave
7185   2DC8 09            ret
7186   2DC9             
7187   2DC9             phaser_control:
7188   2DC9 F8 00 00      enter 0 ; (push bp; mov bp, sp)
7189   2DCC             ; int i; 
7190   2DCC 52 02 00      sub sp, 2
7191   2DCF             ; long int phaser_energy; 
7192   2DCF 52 04 00      sub sp, 4
7193   2DD2             ; long unsigned int h1; 
7194   2DD2 52 04 00      sub sp, 4
7195   2DD5             ; int h; 
7196   2DD5 52 02 00      sub sp, 2
7197   2DD8             ; struct klingon *k; 
7198   2DD8 52 02 00      sub sp, 2
7199   2DDB             ; k = &kdata; 
7200   2DDB FA F3 FF      lea d, [bp + -13] ; $k
7201   2DDE DA            push d
7202   2DDF                              
7203   2DDF 3B 28 6E      mov d, _kdata_data ; $kdata
7204   2DE2 2D            mov b, d
7205   2DE3 E7            pop d
7206   2DE4 FD 43         mov [d], b
7207   2DE6             ; if (inoperable(4)) 
7208   2DE6             _if114_cond:
7209   2DE6                              
7210   2DE6             ; --- START FUNCTION CALL
7211   2DE6                              
7212   2DE6 FD 2E 04 00   mov32 cb, $00000004
7212   2DEA 00 00 
7213   2DEC DD            push bl
7214   2DED 07 70 09      call inoperable
7215   2DF0 51 01 00      add sp, 1
7216   2DF3             ; --- END FUNCTION CALL
7217   2DF3 C0 00 00      cmp b, 0
7218   2DF6 C6 FE 2D      je _if114_exit
7219   2DF9             _if114_TRUE:
7220   2DF9             ; return; 
7221   2DF9 F9            leave
7222   2DFA 09            ret
7223   2DFB 0A FE 2D      jmp _if114_exit
7224   2DFE             _if114_exit:
7225   2DFE             ; if (no_klingon()) 
7226   2DFE             _if115_cond:
7227   2DFE                              
7228   2DFE             ; --- START FUNCTION CALL
7229   2DFE 07 3F 2D      call no_klingon
7230   2E01 C0 00 00      cmp b, 0
7231   2E04 C6 0C 2E      je _if115_exit
7232   2E07             _if115_TRUE:
7233   2E07             ; return; 
7234   2E07 F9            leave
7235   2E08 09            ret
7236   2E09 0A 0C 2E      jmp _if115_exit
7237   2E0C             _if115_exit:
7238   2E0C             ; if (damage[8] < 0) 
7239   2E0C             _if116_cond:
7240   2E0C                              
7241   2E0C 3B 44 6E      mov d, _damage_data ; $damage
7242   2E0F D7            push a
7243   2E10 DA            push d
7244   2E11                              
7245   2E11 FD 2E 08 00   mov32 cb, $00000008
7245   2E15 00 00 
7246   2E17 E7            pop d
7247   2E18 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
7248   2E1C E4            pop a
7249   2E1D 2A            mov b, [d]
7250   2E1E 38 00 00      mov c, 0
7251   2E21             ; --- START RELATIONAL
7252   2E21 D7            push a
7253   2E22 11            mov a, b
7254   2E23 FD 2E 00 00   mov32 cb, $00000000
7254   2E27 00 00 
7255   2E29 B0            cmp a, b
7256   2E2A FD 73         slt ; < (signed)
7257   2E2C E4            pop a
7258   2E2D             ; --- END RELATIONAL
7259   2E2D C0 00 00      cmp b, 0
7260   2E30 C6 42 2E      je _if116_exit
7261   2E33             _if116_TRUE:
7262   2E33             ; puts("Computer failure hampers accuracy."); 
7263   2E33                              
7264   2E33             ; --- START FUNCTION CALL
7265   2E33                              
7266   2E33 26 18 78      mov b, _s94 ; "Computer failure hampers accuracy."
7267   2E36 FD AB         swp b
7268   2E38 D8            push b
7269   2E39 07 5C 69      call puts
7270   2E3C 51 02 00      add sp, 2
7271   2E3F             ; --- END FUNCTION CALL
7272   2E3F 0A 42 2E      jmp _if116_exit
7273   2E42             _if116_exit:
7274   2E42             ; printf("Phasers locked on target;\n Energy available = %d units\n\n Number of units to fire: ", energy); 
7275   2E42                              
7276   2E42             ; --- START FUNCTION CALL
7277   2E42                              
7278   2E42 3B 82 6D      mov d, _energy ; $energy
7279   2E45 2A            mov b, [d]
7280   2E46 38 00 00      mov c, 0
7281   2E49 FD AB         swp b
7282   2E4B D8            push b
7283   2E4C                              
7284   2E4C 26 3B 78      mov b, _s95 ; "Phasers locked on target;\n Energy available = %d units\n\n Number of units to fire: "
7285   2E4F FD AB         swp b
7286   2E51 D8            push b
7287   2E52 07 4F 60      call printf
7288   2E55 51 04 00      add sp, 4
7289   2E58             ; --- END FUNCTION CALL
7290   2E58             ; phaser_energy = input_int(); 
7291   2E58 FA FB FF      lea d, [bp + -5] ; $phaser_energy
7292   2E5B DA            push d
7293   2E5C                              
7294   2E5C             ; --- START FUNCTION CALL
7295   2E5C 07 B1 08      call input_int
7296   2E5F E7            pop d
7297   2E60 FD 43         mov [d], b
7298   2E62 26 00 00      mov b, 0
7299   2E65 FD 44 02 00   mov [d + 2], b
7300   2E69             ; if (phaser_energy <= 0) 
7301   2E69             _if117_cond:
7302   2E69                              
7303   2E69 FA FB FF      lea d, [bp + -5] ; $phaser_energy
7304   2E6C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
7305   2E6F FD 39         mov c, b ; And place it into C
7306   2E71 2A            mov b, [d] ; Lower Word in B
7307   2E72             ; --- START RELATIONAL
7308   2E72 D7            push a
7309   2E73 FD D8         push g
7310   2E75 11            mov a, b
7311   2E76 FD 7A         mov g, c
7312   2E78 FD 2E 00 00   mov32 cb, $00000000
7312   2E7C 00 00 
7313   2E7E FD AF         cmp32 ga, cb
7314   2E80 FD 74         sle
7315   2E82 FD F1         pop g
7316   2E84 E4            pop a
7317   2E85             ; --- END RELATIONAL
7318   2E85 C0 00 00      cmp b, 0
7319   2E88 C6 90 2E      je _if117_exit
7320   2E8B             _if117_TRUE:
7321   2E8B             ; return; 
7322   2E8B F9            leave
7323   2E8C 09            ret
7324   2E8D 0A 90 2E      jmp _if117_exit
7325   2E90             _if117_exit:
7326   2E90             ; if (energy - phaser_energy < 0) { 
7327   2E90             _if118_cond:
7328   2E90                              
7329   2E90 3B 82 6D      mov d, _energy ; $energy
7330   2E93 2A            mov b, [d]
7331   2E94 38 00 00      mov c, 0
7332   2E97             ; --- START TERMS
7333   2E97 D7            push a
7334   2E98 11            mov a, b
7335   2E99 FA FB FF      lea d, [bp + -5] ; $phaser_energy
7336   2E9C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
7337   2E9F FD 39         mov c, b ; And place it into C
7338   2EA1 2A            mov b, [d] ; Lower Word in B
7339   2EA2 FD 1C         sub32 ga, cb
7340   2EA4 27            mov b, a
7341   2EA5 FD 38         mov c, g
7342   2EA7 E4            pop a
7343   2EA8             ; --- END TERMS
7344   2EA8             ; --- START RELATIONAL
7345   2EA8 D7            push a
7346   2EA9 FD D8         push g
7347   2EAB 11            mov a, b
7348   2EAC FD 7A         mov g, c
7349   2EAE FD 2E 00 00   mov32 cb, $00000000
7349   2EB2 00 00 
7350   2EB4 FD AF         cmp32 ga, cb
7351   2EB6 FD 73         slt ; <
7352   2EB8 FD F1         pop g
7353   2EBA E4            pop a
7354   2EBB             ; --- END RELATIONAL
7355   2EBB C0 00 00      cmp b, 0
7356   2EBE C6 D2 2E      je _if118_exit
7357   2EC1             _if118_TRUE:
7358   2EC1             ; puts("Not enough energy available.\n"); 
7359   2EC1                              
7360   2EC1             ; --- START FUNCTION CALL
7361   2EC1                              
7362   2EC1 26 8E 78      mov b, _s96 ; "Not enough energy available.\n"
7363   2EC4 FD AB         swp b
7364   2EC6 D8            push b
7365   2EC7 07 5C 69      call puts
7366   2ECA 51 02 00      add sp, 2
7367   2ECD             ; --- END FUNCTION CALL
7368   2ECD             ; return; 
7369   2ECD F9            leave
7370   2ECE 09            ret
7371   2ECF 0A D2 2E      jmp _if118_exit
7372   2ED2             _if118_exit:
7373   2ED2             ; energy = energy -  phaser_energy; 
7374   2ED2 3B 82 6D      mov d, _energy ; $energy
7375   2ED5 DA            push d
7376   2ED6                              
7377   2ED6 3B 82 6D      mov d, _energy ; $energy
7378   2ED9 2A            mov b, [d]
7379   2EDA 38 00 00      mov c, 0
7380   2EDD             ; --- START TERMS
7381   2EDD D7            push a
7382   2EDE 11            mov a, b
7383   2EDF FA FB FF      lea d, [bp + -5] ; $phaser_energy
7384   2EE2 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
7385   2EE5 FD 39         mov c, b ; And place it into C
7386   2EE7 2A            mov b, [d] ; Lower Word in B
7387   2EE8 FD 1C         sub32 ga, cb
7388   2EEA 27            mov b, a
7389   2EEB FD 38         mov c, g
7390   2EED E4            pop a
7391   2EEE             ; --- END TERMS
7392   2EEE E7            pop d
7393   2EEF FD 43         mov [d], b
7394   2EF1             ; if (damage[8] < 0) 
7395   2EF1             _if119_cond:
7396   2EF1                              
7397   2EF1 3B 44 6E      mov d, _damage_data ; $damage
7398   2EF4 D7            push a
7399   2EF5 DA            push d
7400   2EF6                              
7401   2EF6 FD 2E 08 00   mov32 cb, $00000008
7401   2EFA 00 00 
7402   2EFC E7            pop d
7403   2EFD FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
7404   2F01 E4            pop a
7405   2F02 2A            mov b, [d]
7406   2F03 38 00 00      mov c, 0
7407   2F06             ; --- START RELATIONAL
7408   2F06 D7            push a
7409   2F07 11            mov a, b
7410   2F08 FD 2E 00 00   mov32 cb, $00000000
7410   2F0C 00 00 
7411   2F0E B0            cmp a, b
7412   2F0F FD 73         slt ; < (signed)
7413   2F11 E4            pop a
7414   2F12             ; --- END RELATIONAL
7415   2F12 C0 00 00      cmp b, 0
7416   2F15 C6 7E 2F      je _if119_else
7417   2F18             _if119_TRUE:
7418   2F18             ; phaser_energy =phaser_energy * get_rand(100); 
7419   2F18 FA FB FF      lea d, [bp + -5] ; $phaser_energy
7420   2F1B DA            push d
7421   2F1C                              
7422   2F1C FA FB FF      lea d, [bp + -5] ; $phaser_energy
7423   2F1F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
7424   2F22 FD 39         mov c, b ; And place it into C
7425   2F24 2A            mov b, [d] ; Lower Word in B
7426   2F25             ; --- START FACTORS
7427   2F25 D7            push a
7428   2F26 FD D8         push g
7429   2F28 11            mov a, b
7430   2F29 FD 7A         mov g, c
7431   2F2B             ; --- START FUNCTION CALL
7432   2F2B                              
7433   2F2B FD 2E 64 00   mov32 cb, $00000064
7433   2F2F 00 00 
7434   2F31 FD AB         swp b
7435   2F33 D8            push b
7436   2F34 07 FF 04      call get_rand
7437   2F37 51 02 00      add sp, 2
7438   2F3A             ; --- END FUNCTION CALL
7439   2F3A D7            push a     ; save left operand
7440   2F3B 8E            xor a, b   ; xor sign bits
7441   2F3C FD AA         swp a      ; swap bytes
7442   2F3E 83            mov cl, al ; save result of xor into 'dl'
7443   2F3F E4            pop a      ; restore left side operator
7444   2F40 DF            push cl    ; save result of xor above
7445   2F41 FD AA         swp a  
7446   2F43 93 80         test al, $80  
7447   2F45 FD AA         swp a  
7448   2F47 C6 4C 2F      jz skip_invert_a_120  
7449   2F4A FD 95         neg a 
7450   2F4C             skip_invert_a_120:   
7451   2F4C FD AB         swp b
7452   2F4E FD 93 80      test bl, $80  
7453   2F51 FD AB         swp b
7454   2F53 C6 58 2F      jz skip_invert_b_120  
7455   2F56 FD 97         neg b 
7456   2F58             skip_invert_b_120:   
7457   2F58 AC            mul a, b ; *
7458   2F59 FD 78         mov g, a
7459   2F5B 11            mov a, b
7460   2F5C EA            pop bl
7461   2F5D FD 93 80      test bl, $80
7462   2F60 C6 6D 2F      jz _same_signs_120
7463   2F63 2F            mov bl, al
7464   2F64 95            not a
7465   2F65 FD 97         neg b
7466   2F67 5B 00 00      adc a, 0
7467   2F6A FD 78         mov g, a
7468   2F6C 11            mov a, b
7469   2F6D             _same_signs_120:
7470   2F6D FD 38         mov c, g
7471   2F6F 27            mov b, a
7472   2F70 FD F1         pop g
7473   2F72 E4            pop a
7474   2F73             ; --- END FACTORS
7475   2F73 E7            pop d
7476   2F74 FD 43         mov [d], b
7477   2F76 28            mov b, c
7478   2F77 FD 44 02 00   mov [d + 2], b
7479   2F7B 0A D8 2F      jmp _if119_exit
7480   2F7E             _if119_else:
7481   2F7E             ; phaser_energy = phaser_energy* 100; 
7482   2F7E FA FB FF      lea d, [bp + -5] ; $phaser_energy
7483   2F81 DA            push d
7484   2F82                              
7485   2F82 FA FB FF      lea d, [bp + -5] ; $phaser_energy
7486   2F85 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
7487   2F88 FD 39         mov c, b ; And place it into C
7488   2F8A 2A            mov b, [d] ; Lower Word in B
7489   2F8B             ; --- START FACTORS
7490   2F8B D7            push a
7491   2F8C FD D8         push g
7492   2F8E 11            mov a, b
7493   2F8F FD 7A         mov g, c
7494   2F91 FD 2E 64 00   mov32 cb, $00000064
7494   2F95 00 00 
7495   2F97 D7            push a     ; save left operand
7496   2F98 8E            xor a, b   ; xor sign bits
7497   2F99 FD AA         swp a      ; swap bytes
7498   2F9B 83            mov cl, al ; save result of xor into 'dl'
7499   2F9C E4            pop a      ; restore left side operator
7500   2F9D DF            push cl    ; save result of xor above
7501   2F9E FD AA         swp a  
7502   2FA0 93 80         test al, $80  
7503   2FA2 FD AA         swp a  
7504   2FA4 C6 A9 2F      jz skip_invert_a_121  
7505   2FA7 FD 95         neg a 
7506   2FA9             skip_invert_a_121:   
7507   2FA9 FD AB         swp b
7508   2FAB FD 93 80      test bl, $80  
7509   2FAE FD AB         swp b
7510   2FB0 C6 B5 2F      jz skip_invert_b_121  
7511   2FB3 FD 97         neg b 
7512   2FB5             skip_invert_b_121:   
7513   2FB5 AC            mul a, b ; *
7514   2FB6 FD 78         mov g, a
7515   2FB8 11            mov a, b
7516   2FB9 EA            pop bl
7517   2FBA FD 93 80      test bl, $80
7518   2FBD C6 CA 2F      jz _same_signs_121
7519   2FC0 2F            mov bl, al
7520   2FC1 95            not a
7521   2FC2 FD 97         neg b
7522   2FC4 5B 00 00      adc a, 0
7523   2FC7 FD 78         mov g, a
7524   2FC9 11            mov a, b
7525   2FCA             _same_signs_121:
7526   2FCA FD 38         mov c, g
7527   2FCC 27            mov b, a
7528   2FCD FD F1         pop g
7529   2FCF E4            pop a
7530   2FD0             ; --- END FACTORS
7531   2FD0 E7            pop d
7532   2FD1 FD 43         mov [d], b
7533   2FD3 28            mov b, c
7534   2FD4 FD 44 02 00   mov [d + 2], b
7535   2FD8             _if119_exit:
7536   2FD8             ; h1 = phaser_energy / klingons; 
7537   2FD8 FA F7 FF      lea d, [bp + -9] ; $h1
7538   2FDB DA            push d
7539   2FDC                              
7540   2FDC FA FB FF      lea d, [bp + -5] ; $phaser_energy
7541   2FDF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
7542   2FE2 FD 39         mov c, b ; And place it into C
7543   2FE4 2A            mov b, [d] ; Lower Word in B
7544   2FE5             ; --- START FACTORS
7545   2FE5 D7            push a
7546   2FE6 FD D8         push g
7547   2FE8 11            mov a, b
7548   2FE9 FD 7A         mov g, c
7549   2FEB 3B 34 6E      mov d, _klingons ; $klingons
7550   2FEE 32            mov bl, [d]
7551   2FEF A7 00         mov bh, 0
7552   2FF1 38 00 00      mov c, 0
7553   2FF4 FD D8         push g ; save 'g' as the div instruction uses it
7554   2FF6 AE            div a, b ; /, a: quotient, b: remainder
7555   2FF7 FD F1         pop g
7556   2FF9 FD 38         mov c, g
7557   2FFB 27            mov b, a
7558   2FFC FD F1         pop g
7559   2FFE E4            pop a
7560   2FFF             ; --- END FACTORS
7561   2FFF E7            pop d
7562   3000 FD 43         mov [d], b
7563   3002 28            mov b, c
7564   3003 FD 44 02 00   mov [d + 2], b
7565   3007             ; for (i = 0; i <= 2; i++) { 
7566   3007             _for123_init:
7567   3007 FA FF FF      lea d, [bp + -1] ; $i
7568   300A DA            push d
7569   300B                              
7570   300B FD 2E 00 00   mov32 cb, $00000000
7570   300F 00 00 
7571   3011 E7            pop d
7572   3012 FD 43         mov [d], b
7573   3014             _for123_cond:
7574   3014                              
7575   3014 FA FF FF      lea d, [bp + -1] ; $i
7576   3017 2A            mov b, [d]
7577   3018 38 00 00      mov c, 0
7578   301B             ; --- START RELATIONAL
7579   301B D7            push a
7580   301C 11            mov a, b
7581   301D FD 2E 02 00   mov32 cb, $00000002
7581   3021 00 00 
7582   3023 B0            cmp a, b
7583   3024 FD 74         sle ; <= (signed)
7584   3026 E4            pop a
7585   3027             ; --- END RELATIONAL
7586   3027 C0 00 00      cmp b, 0
7587   302A C6 29 33      je _for123_exit
7588   302D             _for123_block:
7589   302D             ; if (k->energy > 0) { 
7590   302D             _if124_cond:
7591   302D                              
7592   302D FA F3 FF      lea d, [bp + -13] ; $k
7593   3030 FD 2A         mov d, [d]
7594   3032 58 02 00      add d, 2
7595   3035 2A            mov b, [d]
7596   3036 38 00 00      mov c, 0
7597   3039             ; --- START RELATIONAL
7598   3039 D7            push a
7599   303A 11            mov a, b
7600   303B FD 2E 00 00   mov32 cb, $00000000
7600   303F 00 00 
7601   3041 B0            cmp a, b
7602   3042 FD 7F         sgt ; >
7603   3044 E4            pop a
7604   3045             ; --- END RELATIONAL
7605   3045 C0 00 00      cmp b, 0
7606   3048 C6 04 33      je _if124_exit
7607   304B             _if124_TRUE:
7608   304B             ; h1 = h1 * (get_rand(100) + 200); 
7609   304B FA F7 FF      lea d, [bp + -9] ; $h1
7610   304E DA            push d
7611   304F                              
7612   304F FA F7 FF      lea d, [bp + -9] ; $h1
7613   3052 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
7614   3055 FD 39         mov c, b ; And place it into C
7615   3057 2A            mov b, [d] ; Lower Word in B
7616   3058             ; --- START FACTORS
7617   3058 D7            push a
7618   3059 FD D8         push g
7619   305B 11            mov a, b
7620   305C FD 7A         mov g, c
7621   305E                              
7622   305E             ; --- START FUNCTION CALL
7623   305E                              
7624   305E FD 2E 64 00   mov32 cb, $00000064
7624   3062 00 00 
7625   3064 FD AB         swp b
7626   3066 D8            push b
7627   3067 07 FF 04      call get_rand
7628   306A 51 02 00      add sp, 2
7629   306D             ; --- END FUNCTION CALL
7630   306D             ; --- START TERMS
7631   306D D7            push a
7632   306E 11            mov a, b
7633   306F FD 2E C8 00   mov32 cb, $000000c8
7633   3073 00 00 
7634   3075 56            add b, a
7635   3076 E4            pop a
7636   3077             ; --- END TERMS
7637   3077 D7            push a     ; save left operand
7638   3078 8E            xor a, b   ; xor sign bits
7639   3079 FD AA         swp a      ; swap bytes
7640   307B 83            mov cl, al ; save result of xor into 'dl'
7641   307C E4            pop a      ; restore left side operator
7642   307D DF            push cl    ; save result of xor above
7643   307E FD AA         swp a  
7644   3080 93 80         test al, $80  
7645   3082 FD AA         swp a  
7646   3084 C6 89 30      jz skip_invert_a_125  
7647   3087 FD 95         neg a 
7648   3089             skip_invert_a_125:   
7649   3089 FD AB         swp b
7650   308B FD 93 80      test bl, $80  
7651   308E FD AB         swp b
7652   3090 C6 95 30      jz skip_invert_b_125  
7653   3093 FD 97         neg b 
7654   3095             skip_invert_b_125:   
7655   3095 AC            mul a, b ; *
7656   3096 FD 78         mov g, a
7657   3098 11            mov a, b
7658   3099 EA            pop bl
7659   309A FD 93 80      test bl, $80
7660   309D C6 AA 30      jz _same_signs_125
7661   30A0 2F            mov bl, al
7662   30A1 95            not a
7663   30A2 FD 97         neg b
7664   30A4 5B 00 00      adc a, 0
7665   30A7 FD 78         mov g, a
7666   30A9 11            mov a, b
7667   30AA             _same_signs_125:
7668   30AA FD 38         mov c, g
7669   30AC 27            mov b, a
7670   30AD FD F1         pop g
7671   30AF E4            pop a
7672   30B0             ; --- END FACTORS
7673   30B0 E7            pop d
7674   30B1 FD 43         mov [d], b
7675   30B3 28            mov b, c
7676   30B4 FD 44 02 00   mov [d + 2], b
7677   30B8             ; h1 =h1/ distance_to(k); 
7678   30B8 FA F7 FF      lea d, [bp + -9] ; $h1
7679   30BB DA            push d
7680   30BC                              
7681   30BC FA F7 FF      lea d, [bp + -9] ; $h1
7682   30BF 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
7683   30C2 FD 39         mov c, b ; And place it into C
7684   30C4 2A            mov b, [d] ; Lower Word in B
7685   30C5             ; --- START FACTORS
7686   30C5 D7            push a
7687   30C6 FD D8         push g
7688   30C8 11            mov a, b
7689   30C9 FD 7A         mov g, c
7690   30CB             ; --- START FUNCTION CALL
7691   30CB                              
7692   30CB FA F3 FF      lea d, [bp + -13] ; $k
7693   30CE 2A            mov b, [d]
7694   30CF 38 00 00      mov c, 0
7695   30D2 FD AB         swp b
7696   30D4 D8            push b
7697   30D5 07 34 5D      call distance_to
7698   30D8 51 02 00      add sp, 2
7699   30DB             ; --- END FUNCTION CALL
7700   30DB FD D8         push g ; save 'g' as the div instruction uses it
7701   30DD AE            div a, b ; /, a: quotient, b: remainder
7702   30DE FD F1         pop g
7703   30E0 FD 38         mov c, g
7704   30E2 27            mov b, a
7705   30E3 FD F1         pop g
7706   30E5 E4            pop a
7707   30E6             ; --- END FACTORS
7708   30E6 E7            pop d
7709   30E7 FD 43         mov [d], b
7710   30E9 28            mov b, c
7711   30EA FD 44 02 00   mov [d + 2], b
7712   30EE             ; if (h1 <= 15 * k->energy) {	/* was 0.15 */ 
7713   30EE             _if127_cond:
7714   30EE                              
7715   30EE FA F7 FF      lea d, [bp + -9] ; $h1
7716   30F1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
7717   30F4 FD 39         mov c, b ; And place it into C
7718   30F6 2A            mov b, [d] ; Lower Word in B
7719   30F7             ; --- START RELATIONAL
7720   30F7 D7            push a
7721   30F8 FD D8         push g
7722   30FA 11            mov a, b
7723   30FB FD 7A         mov g, c
7724   30FD FD 2E 0F 00   mov32 cb, $0000000f
7724   3101 00 00 
7725   3103             ; --- START FACTORS
7726   3103 D7            push a
7727   3104 FD D8         push g
7728   3106 11            mov a, b
7729   3107 FD 7A         mov g, c
7730   3109 FA F3 FF      lea d, [bp + -13] ; $k
7731   310C FD 2A         mov d, [d]
7732   310E 58 02 00      add d, 2
7733   3111 2A            mov b, [d]
7734   3112 38 00 00      mov c, 0
7735   3115 D7            push a     ; save left operand
7736   3116 8E            xor a, b   ; xor sign bits
7737   3117 FD AA         swp a      ; swap bytes
7738   3119 83            mov cl, al ; save result of xor into 'dl'
7739   311A E4            pop a      ; restore left side operator
7740   311B DF            push cl    ; save result of xor above
7741   311C FD AA         swp a  
7742   311E 93 80         test al, $80  
7743   3120 FD AA         swp a  
7744   3122 C6 27 31      jz skip_invert_a_128  
7745   3125 FD 95         neg a 
7746   3127             skip_invert_a_128:   
7747   3127 FD AB         swp b
7748   3129 FD 93 80      test bl, $80  
7749   312C FD AB         swp b
7750   312E C6 33 31      jz skip_invert_b_128  
7751   3131 FD 97         neg b 
7752   3133             skip_invert_b_128:   
7753   3133 AC            mul a, b ; *
7754   3134 FD 78         mov g, a
7755   3136 11            mov a, b
7756   3137 EA            pop bl
7757   3138 FD 93 80      test bl, $80
7758   313B C6 48 31      jz _same_signs_128
7759   313E 2F            mov bl, al
7760   313F 95            not a
7761   3140 FD 97         neg b
7762   3142 5B 00 00      adc a, 0
7763   3145 FD 78         mov g, a
7764   3147 11            mov a, b
7765   3148             _same_signs_128:
7766   3148 FD 38         mov c, g
7767   314A 27            mov b, a
7768   314B FD F1         pop g
7769   314D E4            pop a
7770   314E             ; --- END FACTORS
7771   314E FD AF         cmp32 ga, cb
7772   3150 FD 76         sleu
7773   3152 FD F1         pop g
7774   3154 E4            pop a
7775   3155             ; --- END RELATIONAL
7776   3155 C0 00 00      cmp b, 0
7777   3158 C6 8C 31      je _if127_else
7778   315B             _if127_TRUE:
7779   315B             ; printf("Sensors show no damage to enemy at %d, %d\n\n", k->y, k->x); 
7780   315B                              
7781   315B             ; --- START FUNCTION CALL
7782   315B                              
7783   315B FA F3 FF      lea d, [bp + -13] ; $k
7784   315E FD 2A         mov d, [d]
7785   3160 58 01 00      add d, 1
7786   3163 32            mov bl, [d]
7787   3164 A7 00         mov bh, 0
7788   3166 38 00 00      mov c, 0
7789   3169 FD AA         swp a
7790   316B D8            push b
7791   316C                              
7792   316C FA F3 FF      lea d, [bp + -13] ; $k
7793   316F FD 2A         mov d, [d]
7794   3171 58 00 00      add d, 0
7795   3174 32            mov bl, [d]
7796   3175 A7 00         mov bh, 0
7797   3177 38 00 00      mov c, 0
7798   317A FD AA         swp a
7799   317C D8            push b
7800   317D                              
7801   317D 26 AC 78      mov b, _s97 ; "Sensors show no damage to enemy at %d, %d\n\n"
7802   3180 FD AB         swp b
7803   3182 D8            push b
7804   3183 07 4F 60      call printf
7805   3186 51 04 00      add sp, 4
7806   3189             ; --- END FUNCTION CALL
7807   3189 0A 01 33      jmp _if127_exit
7808   318C             _if127_else:
7809   318C             ; h = FROM_FIXED00(h1); 
7810   318C FA F5 FF      lea d, [bp + -11] ; $h
7811   318F DA            push d
7812   3190                              
7813   3190             ; --- START FUNCTION CALL
7814   3190                              
7815   3190 FA F7 FF      lea d, [bp + -9] ; $h1
7816   3193 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
7817   3196 FD 39         mov c, b ; And place it into C
7818   3198 2A            mov b, [d] ; Lower Word in B
7819   3199 FD AB         swp b
7820   319B D8            push b
7821   319C 07 DC 04      call FROM_FIXED00
7822   319F 51 02 00      add sp, 2
7823   31A2             ; --- END FUNCTION CALL
7824   31A2 E7            pop d
7825   31A3 FD 43         mov [d], b
7826   31A5             ; k->energy = k->energy - h; 
7827   31A5 FA F3 FF      lea d, [bp + -13] ; $k
7828   31A8 FD 2A         mov d, [d]
7829   31AA 58 02 00      add d, 2
7830   31AD DA            push d
7831   31AE                              
7832   31AE FA F3 FF      lea d, [bp + -13] ; $k
7833   31B1 FD 2A         mov d, [d]
7834   31B3 58 02 00      add d, 2
7835   31B6 2A            mov b, [d]
7836   31B7 38 00 00      mov c, 0
7837   31BA             ; --- START TERMS
7838   31BA D7            push a
7839   31BB 11            mov a, b
7840   31BC FA F5 FF      lea d, [bp + -11] ; $h
7841   31BF 2A            mov b, [d]
7842   31C0 38 00 00      mov c, 0
7843   31C3 60            sub a, b
7844   31C4 27            mov b, a
7845   31C5 E4            pop a
7846   31C6             ; --- END TERMS
7847   31C6 E7            pop d
7848   31C7 FD 43         mov [d], b
7849   31C9             ; printf("%d unit hit on Klingon at sector %d, %d\n", 
7850   31C9                              
7851   31C9             ; --- START FUNCTION CALL
7852   31C9                              
7853   31C9 FA F3 FF      lea d, [bp + -13] ; $k
7854   31CC FD 2A         mov d, [d]
7855   31CE 58 01 00      add d, 1
7856   31D1 32            mov bl, [d]
7857   31D2 A7 00         mov bh, 0
7858   31D4 38 00 00      mov c, 0
7859   31D7 FD AA         swp a
7860   31D9 D8            push b
7861   31DA                              
7862   31DA FA F3 FF      lea d, [bp + -13] ; $k
7863   31DD FD 2A         mov d, [d]
7864   31DF 58 00 00      add d, 0
7865   31E2 32            mov bl, [d]
7866   31E3 A7 00         mov bh, 0
7867   31E5 38 00 00      mov c, 0
7868   31E8 FD AA         swp a
7869   31EA D8            push b
7870   31EB                              
7871   31EB FA F5 FF      lea d, [bp + -11] ; $h
7872   31EE 2A            mov b, [d]
7873   31EF 38 00 00      mov c, 0
7874   31F2 FD AB         swp b
7875   31F4 D8            push b
7876   31F5                              
7877   31F5 26 D8 78      mov b, _s98 ; "%d unit hit on Klingon at sector %d, %d\n"
7878   31F8 FD AB         swp b
7879   31FA D8            push b
7880   31FB 07 4F 60      call printf
7881   31FE 51 06 00      add sp, 6
7882   3201             ; --- END FUNCTION CALL
7883   3201             ; if (k->energy <= 0) { 
7884   3201             _if129_cond:
7885   3201                              
7886   3201 FA F3 FF      lea d, [bp + -13] ; $k
7887   3204 FD 2A         mov d, [d]
7888   3206 58 02 00      add d, 2
7889   3209 2A            mov b, [d]
7890   320A 38 00 00      mov c, 0
7891   320D             ; --- START RELATIONAL
7892   320D D7            push a
7893   320E 11            mov a, b
7894   320F FD 2E 00 00   mov32 cb, $00000000
7894   3213 00 00 
7895   3215 B0            cmp a, b
7896   3216 FD 74         sle ; <= (signed)
7897   3218 E4            pop a
7898   3219             ; --- END RELATIONAL
7899   3219 C0 00 00      cmp b, 0
7900   321C C6 E6 32      je _if129_else
7901   321F             _if129_TRUE:
7902   321F             ; puts("*** Klingon Destroyed ***\n"); 
7903   321F                              
7904   321F             ; --- START FUNCTION CALL
7905   321F                              
7906   321F 26 01 79      mov b, _s99 ; "*** Klingon Destroyed ***\n"
7907   3222 FD AB         swp b
7908   3224 D8            push b
7909   3225 07 5C 69      call puts
7910   3228 51 02 00      add sp, 2
7911   322B             ; --- END FUNCTION CALL
7912   322B             ; klingons--; 
7913   322B                              
7914   322B 3B 34 6E      mov d, _klingons ; $klingons
7915   322E 32            mov bl, [d]
7916   322F A7 00         mov bh, 0
7917   3231 38 00 00      mov c, 0
7918   3234 FD 7D         dec b
7919   3236 3B 34 6E      mov d, _klingons ; $klingons
7920   3239 FD 3E         mov [d], bl
7921   323B FD 77         inc b
7922   323D             ; klingons_left--; 
7923   323D                              
7924   323D 3B 36 6E      mov d, _klingons_left ; $klingons_left
7925   3240 32            mov bl, [d]
7926   3241 A7 00         mov bh, 0
7927   3243 38 00 00      mov c, 0
7928   3246 FD 7D         dec b
7929   3248 3B 36 6E      mov d, _klingons_left ; $klingons_left
7930   324B FD 3E         mov [d], bl
7931   324D FD 77         inc b
7932   324F             ; wipe_klingon(k); 
7933   324F                              
7934   324F             ; --- START FUNCTION CALL
7935   324F                              
7936   324F FA F3 FF      lea d, [bp + -13] ; $k
7937   3252 2A            mov b, [d]
7938   3253 38 00 00      mov c, 0
7939   3256 FD AB         swp b
7940   3258 D8            push b
7941   3259 07 7C 2D      call wipe_klingon
7942   325C 51 02 00      add sp, 2
7943   325F             ; --- END FUNCTION CALL
7944   325F             ; k->energy = 0; 
7945   325F FA F3 FF      lea d, [bp + -13] ; $k
7946   3262 FD 2A         mov d, [d]
7947   3264 58 02 00      add d, 2
7948   3267 DA            push d
7949   3268                              
7950   3268 FD 2E 00 00   mov32 cb, $00000000
7950   326C 00 00 
7951   326E E7            pop d
7952   326F FD 43         mov [d], b
7953   3271             ; map[quad_y][quad_x] = map[quad_y][quad_x] - 0x100; 
7954   3271 3B 86 6D      mov d, _map_data ; $map
7955   3274 D7            push a
7956   3275 DA            push d
7957   3276                              
7958   3276 3B 39 6E      mov d, _quad_y ; $quad_y
7959   3279 2A            mov b, [d]
7960   327A 38 00 00      mov c, 0
7961   327D E7            pop d
7962   327E FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
7963   3282 DA            push d
7964   3283                              
7965   3283 3B 3B 6E      mov d, _quad_x ; $quad_x
7966   3286 2A            mov b, [d]
7967   3287 38 00 00      mov c, 0
7968   328A E7            pop d
7969   328B FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
7970   328F E4            pop a
7971   3290 DA            push d
7972   3291                              
7973   3291 3B 86 6D      mov d, _map_data ; $map
7974   3294 D7            push a
7975   3295 DA            push d
7976   3296                              
7977   3296 3B 39 6E      mov d, _quad_y ; $quad_y
7978   3299 2A            mov b, [d]
7979   329A 38 00 00      mov c, 0
7980   329D E7            pop d
7981   329E FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
7982   32A2 DA            push d
7983   32A3                              
7984   32A3 3B 3B 6E      mov d, _quad_x ; $quad_x
7985   32A6 2A            mov b, [d]
7986   32A7 38 00 00      mov c, 0
7987   32AA E7            pop d
7988   32AB FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
7989   32AF E4            pop a
7990   32B0 2A            mov b, [d]
7991   32B1 38 00 00      mov c, 0
7992   32B4             ; --- START TERMS
7993   32B4 D7            push a
7994   32B5 11            mov a, b
7995   32B6 FD 2E 00 01   mov32 cb, $00000100
7995   32BA 00 00 
7996   32BC 60            sub a, b
7997   32BD 27            mov b, a
7998   32BE E4            pop a
7999   32BF             ; --- END TERMS
8000   32BF E7            pop d
8001   32C0 FD 43         mov [d], b
8002   32C2             ; if (klingons_left <= 0) 
8003   32C2             _if130_cond:
8004   32C2                              
8005   32C2 3B 36 6E      mov d, _klingons_left ; $klingons_left
8006   32C5 32            mov bl, [d]
8007   32C6 A7 00         mov bh, 0
8008   32C8 38 00 00      mov c, 0
8009   32CB             ; --- START RELATIONAL
8010   32CB D7            push a
8011   32CC 11            mov a, b
8012   32CD FD 2E 00 00   mov32 cb, $00000000
8012   32D1 00 00 
8013   32D3 B0            cmp a, b
8014   32D4 FD 76         sleu ; <= (unsigned)
8015   32D6 E4            pop a
8016   32D7             ; --- END RELATIONAL
8017   32D7 C0 00 00      cmp b, 0
8018   32DA C6 E3 32      je _if130_exit
8019   32DD             _if130_TRUE:
8020   32DD             ; won_game(); 
8021   32DD                              
8022   32DD             ; --- START FUNCTION CALL
8023   32DD 07 16 4F      call won_game
8024   32E0 0A E3 32      jmp _if130_exit
8025   32E3             _if130_exit:
8026   32E3 0A 01 33      jmp _if129_exit
8027   32E6             _if129_else:
8028   32E6             ; printf("   (Sensors show %d units remaining.)\n\n", k->energy); 
8029   32E6                              
8030   32E6             ; --- START FUNCTION CALL
8031   32E6                              
8032   32E6 FA F3 FF      lea d, [bp + -13] ; $k
8033   32E9 FD 2A         mov d, [d]
8034   32EB 58 02 00      add d, 2
8035   32EE 2A            mov b, [d]
8036   32EF 38 00 00      mov c, 0
8037   32F2 FD AB         swp b
8038   32F4 D8            push b
8039   32F5                              
8040   32F5 26 1C 79      mov b, _s100 ; "   (Sensors show %d units remaining.)\n\n"
8041   32F8 FD AB         swp b
8042   32FA D8            push b
8043   32FB 07 4F 60      call printf
8044   32FE 51 04 00      add sp, 4
8045   3301             ; --- END FUNCTION CALL
8046   3301             _if129_exit:
8047   3301             _if127_exit:
8048   3301 0A 04 33      jmp _if124_exit
8049   3304             _if124_exit:
8050   3304             ; k++; 
8051   3304                              
8052   3304 FA F3 FF      lea d, [bp + -13] ; $k
8053   3307 2A            mov b, [d]
8054   3308 38 00 00      mov c, 0
8055   330B 11            mov a, b
8056   330C FD 77         inc b
8057   330E FD 77         inc b
8058   3310 FA F3 FF      lea d, [bp + -13] ; $k
8059   3313 FD 43         mov [d], b
8060   3315 27            mov b, a
8061   3316             _for123_update:
8062   3316                              
8063   3316 FA FF FF      lea d, [bp + -1] ; $i
8064   3319 2A            mov b, [d]
8065   331A 38 00 00      mov c, 0
8066   331D 11            mov a, b
8067   331E FD 77         inc b
8068   3320 FA FF FF      lea d, [bp + -1] ; $i
8069   3323 FD 43         mov [d], b
8070   3325 27            mov b, a
8071   3326 0A 14 30      jmp _for123_cond
8072   3329             _for123_exit:
8073   3329             ; klingons_shoot(); 
8074   3329                              
8075   3329             ; --- START FUNCTION CALL
8076   3329 07 EF 50      call klingons_shoot
8077   332C F9            leave
8078   332D 09            ret
8079   332E             
8080   332E             photon_torpedoes:
8081   332E F8 00 00      enter 0 ; (push bp; mov bp, sp)
8082   3331             ; int x3, y3; 
8083   3331 52 02 00      sub sp, 2
8084   3334 52 02 00      sub sp, 2
8085   3337             ; int c1; 
8086   3337 52 02 00      sub sp, 2
8087   333A             ; int c2, c3, c4; 
8088   333A 52 02 00      sub sp, 2
8089   333D 52 02 00      sub sp, 2
8090   3340 52 02 00      sub sp, 2
8091   3343             ; int x, y, x1, x2; 
8092   3343 52 02 00      sub sp, 2
8093   3346 52 02 00      sub sp, 2
8094   3349 52 02 00      sub sp, 2
8095   334C 52 02 00      sub sp, 2
8096   334F             ; if (torps <= 0) { 
8097   334F             _if131_cond:
8098   334F                              
8099   334F 3B 37 6E      mov d, _torps ; $torps
8100   3352 32            mov bl, [d]
8101   3353 A7 00         mov bh, 0
8102   3355 38 00 00      mov c, 0
8103   3358             ; --- START RELATIONAL
8104   3358 D7            push a
8105   3359 11            mov a, b
8106   335A FD 2E 00 00   mov32 cb, $00000000
8106   335E 00 00 
8107   3360 B0            cmp a, b
8108   3361 FD 76         sleu ; <= (unsigned)
8109   3363 E4            pop a
8110   3364             ; --- END RELATIONAL
8111   3364 C0 00 00      cmp b, 0
8112   3367 C6 7B 33      je _if131_exit
8113   336A             _if131_TRUE:
8114   336A             ; puts("All photon torpedoes expended"); 
8115   336A                              
8116   336A             ; --- START FUNCTION CALL
8117   336A                              
8118   336A 26 44 79      mov b, _s101 ; "All photon torpedoes expended"
8119   336D FD AB         swp b
8120   336F D8            push b
8121   3370 07 5C 69      call puts
8122   3373 51 02 00      add sp, 2
8123   3376             ; --- END FUNCTION CALL
8124   3376             ; return; 
8125   3376 F9            leave
8126   3377 09            ret
8127   3378 0A 7B 33      jmp _if131_exit
8128   337B             _if131_exit:
8129   337B             ; if (inoperable(5)) 
8130   337B             _if132_cond:
8131   337B                              
8132   337B             ; --- START FUNCTION CALL
8133   337B                              
8134   337B FD 2E 05 00   mov32 cb, $00000005
8134   337F 00 00 
8135   3381 DD            push bl
8136   3382 07 70 09      call inoperable
8137   3385 51 01 00      add sp, 1
8138   3388             ; --- END FUNCTION CALL
8139   3388 C0 00 00      cmp b, 0
8140   338B C6 93 33      je _if132_exit
8141   338E             _if132_TRUE:
8142   338E             ; return; 
8143   338E F9            leave
8144   338F 09            ret
8145   3390 0A 93 33      jmp _if132_exit
8146   3393             _if132_exit:
8147   3393             ; puts("Course (0-9): "); 
8148   3393                              
8149   3393             ; --- START FUNCTION CALL
8150   3393                              
8151   3393 26 80 73      mov b, _s63 ; "Course (0-9): "
8152   3396 FD AB         swp b
8153   3398 D8            push b
8154   3399 07 5C 69      call puts
8155   339C 51 02 00      add sp, 2
8156   339F             ; --- END FUNCTION CALL
8157   339F             ; c1 = input_f00(); 
8158   339F FA FB FF      lea d, [bp + -5] ; $c1
8159   33A2 DA            push d
8160   33A3                              
8161   33A3             ; --- START FUNCTION CALL
8162   33A3 07 67 06      call input_f00
8163   33A6 E7            pop d
8164   33A7 FD 43         mov [d], b
8165   33A9             ; if (c1 == 900) 
8166   33A9             _if133_cond:
8167   33A9                              
8168   33A9 FA FB FF      lea d, [bp + -5] ; $c1
8169   33AC 2A            mov b, [d]
8170   33AD 38 00 00      mov c, 0
8171   33B0             ; --- START RELATIONAL
8172   33B0 D7            push a
8173   33B1 11            mov a, b
8174   33B2 FD 2E 84 03   mov32 cb, $00000384
8174   33B6 00 00 
8175   33B8 B0            cmp a, b
8176   33B9 FD 71         seq ; ==
8177   33BB E4            pop a
8178   33BC             ; --- END RELATIONAL
8179   33BC C0 00 00      cmp b, 0
8180   33BF C6 D2 33      je _if133_exit
8181   33C2             _if133_TRUE:
8182   33C2             ; c1 = 100; 
8183   33C2 FA FB FF      lea d, [bp + -5] ; $c1
8184   33C5 DA            push d
8185   33C6                              
8186   33C6 FD 2E 64 00   mov32 cb, $00000064
8186   33CA 00 00 
8187   33CC E7            pop d
8188   33CD FD 43         mov [d], b
8189   33CF 0A D2 33      jmp _if133_exit
8190   33D2             _if133_exit:
8191   33D2             ; if (c1 < 100 || c1 >= 900) { 
8192   33D2             _if134_cond:
8193   33D2                              
8194   33D2 FA FB FF      lea d, [bp + -5] ; $c1
8195   33D5 2A            mov b, [d]
8196   33D6 38 00 00      mov c, 0
8197   33D9             ; --- START RELATIONAL
8198   33D9 D7            push a
8199   33DA 11            mov a, b
8200   33DB FD 2E 64 00   mov32 cb, $00000064
8200   33DF 00 00 
8201   33E1 B0            cmp a, b
8202   33E2 FD 73         slt ; < (signed)
8203   33E4 E4            pop a
8204   33E5             ; --- END RELATIONAL
8205   33E5             ; --- START LOGICAL OR
8206   33E5 D7            push a
8207   33E6 11            mov a, b
8208   33E7 FA FB FF      lea d, [bp + -5] ; $c1
8209   33EA 2A            mov b, [d]
8210   33EB 38 00 00      mov c, 0
8211   33EE             ; --- START RELATIONAL
8212   33EE D7            push a
8213   33EF 11            mov a, b
8214   33F0 FD 2E 84 03   mov32 cb, $00000384
8214   33F4 00 00 
8215   33F6 B0            cmp a, b
8216   33F7 FD 80         sge ; >=
8217   33F9 E4            pop a
8218   33FA             ; --- END RELATIONAL
8219   33FA FD A8         sor a, b ; ||
8220   33FC E4            pop a
8221   33FD             ; --- END LOGICAL OR
8222   33FD C0 00 00      cmp b, 0
8223   3400 C6 1E 34      je _if134_exit
8224   3403             _if134_TRUE:
8225   3403             ; printf("Ensign Chekov%s", inc_1); 
8226   3403                              
8227   3403             ; --- START FUNCTION CALL
8228   3403                              
8229   3403 3B D2 6E      mov d, _inc_1 ; $inc_1
8230   3406 2A            mov b, [d]
8231   3407 38 00 00      mov c, 0
8232   340A FD AB         swp b
8233   340C D8            push b
8234   340D                              
8235   340D 26 62 79      mov b, _s102 ; "Ensign Chekov%s"
8236   3410 FD AB         swp b
8237   3412 D8            push b
8238   3413 07 4F 60      call printf
8239   3416 51 04 00      add sp, 4
8240   3419             ; --- END FUNCTION CALL
8241   3419             ; return; 
8242   3419 F9            leave
8243   341A 09            ret
8244   341B 0A 1E 34      jmp _if134_exit
8245   341E             _if134_exit:
8246   341E             ; energy = energy - 2; 
8247   341E 3B 82 6D      mov d, _energy ; $energy
8248   3421 DA            push d
8249   3422                              
8250   3422 3B 82 6D      mov d, _energy ; $energy
8251   3425 2A            mov b, [d]
8252   3426 38 00 00      mov c, 0
8253   3429             ; --- START TERMS
8254   3429 D7            push a
8255   342A 11            mov a, b
8256   342B FD 2E 02 00   mov32 cb, $00000002
8256   342F 00 00 
8257   3431 60            sub a, b
8258   3432 27            mov b, a
8259   3433 E4            pop a
8260   3434             ; --- END TERMS
8261   3434 E7            pop d
8262   3435 FD 43         mov [d], b
8263   3437             ; torps--; 
8264   3437                              
8265   3437 3B 37 6E      mov d, _torps ; $torps
8266   343A 32            mov bl, [d]
8267   343B A7 00         mov bh, 0
8268   343D 38 00 00      mov c, 0
8269   3440 FD 7D         dec b
8270   3442 3B 37 6E      mov d, _torps ; $torps
8271   3445 FD 3E         mov [d], bl
8272   3447 FD 77         inc b
8273   3449             ; c2 = FROM_FIXED00(c1);	/* Integer part */ 
8274   3449 FA F9 FF      lea d, [bp + -7] ; $c2
8275   344C DA            push d
8276   344D                              
8277   344D             ; --- START FUNCTION CALL
8278   344D                              
8279   344D FA FB FF      lea d, [bp + -5] ; $c1
8280   3450 2A            mov b, [d]
8281   3451 38 00 00      mov c, 0
8282   3454 FD AB         swp b
8283   3456 D8            push b
8284   3457 07 DC 04      call FROM_FIXED00
8285   345A 51 02 00      add sp, 2
8286   345D             ; --- END FUNCTION CALL
8287   345D E7            pop d
8288   345E FD 43         mov [d], b
8289   3460             ; c3 = c2 + 1;		/* Next integer part */ 
8290   3460 FA F7 FF      lea d, [bp + -9] ; $c3
8291   3463 DA            push d
8292   3464                              
8293   3464 FA F9 FF      lea d, [bp + -7] ; $c2
8294   3467 2A            mov b, [d]
8295   3468 38 00 00      mov c, 0
8296   346B             ; --- START TERMS
8297   346B D7            push a
8298   346C 11            mov a, b
8299   346D FD 2E 01 00   mov32 cb, $00000001
8299   3471 00 00 
8300   3473 56            add b, a
8301   3474 E4            pop a
8302   3475             ; --- END TERMS
8303   3475 E7            pop d
8304   3476 FD 43         mov [d], b
8305   3478             ; c4 = (c1 - TO_FIXED00(c2));	/* Fractional element in fixed point */ 
8306   3478 FA F5 FF      lea d, [bp + -11] ; $c4
8307   347B DA            push d
8308   347C                              
8309   347C                              
8310   347C FA FB FF      lea d, [bp + -5] ; $c1
8311   347F 2A            mov b, [d]
8312   3480 38 00 00      mov c, 0
8313   3483             ; --- START TERMS
8314   3483 D7            push a
8315   3484 11            mov a, b
8316   3485             ; --- START FUNCTION CALL
8317   3485                              
8318   3485 FA F9 FF      lea d, [bp + -7] ; $c2
8319   3488 2A            mov b, [d]
8320   3489 38 00 00      mov c, 0
8321   348C FD AB         swp b
8322   348E D8            push b
8323   348F 07 8B 04      call TO_FIXED00
8324   3492 51 02 00      add sp, 2
8325   3495             ; --- END FUNCTION CALL
8326   3495 60            sub a, b
8327   3496 27            mov b, a
8328   3497 E4            pop a
8329   3498             ; --- END TERMS
8330   3498 E7            pop d
8331   3499 FD 43         mov [d], b
8332   349B             ; x1 = 100 * c[1][c2] + (c[1][c3] - c[1][c2]) * c4; 
8333   349B FA EF FF      lea d, [bp + -17] ; $x1
8334   349E DA            push d
8335   349F                              
8336   349F FD 2E 64 00   mov32 cb, $00000064
8336   34A3 00 00 
8337   34A5             ; --- START FACTORS
8338   34A5 D7            push a
8339   34A6 FD D8         push g
8340   34A8 11            mov a, b
8341   34A9 FD 7A         mov g, c
8342   34AB 3B 61 6D      mov d, _c_data ; $c
8343   34AE D7            push a
8344   34AF DA            push d
8345   34B0                              
8346   34B0 FD 2E 01 00   mov32 cb, $00000001
8346   34B4 00 00 
8347   34B6 E7            pop d
8348   34B7 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
8349   34BB DA            push d
8350   34BC                              
8351   34BC FA F9 FF      lea d, [bp + -7] ; $c2
8352   34BF 2A            mov b, [d]
8353   34C0 38 00 00      mov c, 0
8354   34C3 E7            pop d
8355   34C4 5A            add d, b
8356   34C5 E4            pop a
8357   34C6 32            mov bl, [d]
8358   34C7 A7 00         mov bh, 0
8359   34C9 38 00 00      mov c, 0
8360   34CC D7            push a     ; save left operand
8361   34CD 8E            xor a, b   ; xor sign bits
8362   34CE FD AA         swp a      ; swap bytes
8363   34D0 83            mov cl, al ; save result of xor into 'dl'
8364   34D1 E4            pop a      ; restore left side operator
8365   34D2 DF            push cl    ; save result of xor above
8366   34D3 FD AA         swp a  
8367   34D5 93 80         test al, $80  
8368   34D7 FD AA         swp a  
8369   34D9 C6 DE 34      jz skip_invert_a_135  
8370   34DC FD 95         neg a 
8371   34DE             skip_invert_a_135:   
8372   34DE FD AB         swp b
8373   34E0 FD 93 80      test bl, $80  
8374   34E3 FD AB         swp b
8375   34E5 C6 EA 34      jz skip_invert_b_135  
8376   34E8 FD 97         neg b 
8377   34EA             skip_invert_b_135:   
8378   34EA AC            mul a, b ; *
8379   34EB FD 78         mov g, a
8380   34ED 11            mov a, b
8381   34EE EA            pop bl
8382   34EF FD 93 80      test bl, $80
8383   34F2 C6 FF 34      jz _same_signs_135
8384   34F5 2F            mov bl, al
8385   34F6 95            not a
8386   34F7 FD 97         neg b
8387   34F9 5B 00 00      adc a, 0
8388   34FC FD 78         mov g, a
8389   34FE 11            mov a, b
8390   34FF             _same_signs_135:
8391   34FF FD 38         mov c, g
8392   3501 27            mov b, a
8393   3502 FD F1         pop g
8394   3504 E4            pop a
8395   3505             ; --- END FACTORS
8396   3505             ; --- START TERMS
8397   3505 D7            push a
8398   3506 FD D8         push g
8399   3508 11            mov a, b
8400   3509 FD 7A         mov g, c
8401   350B                              
8402   350B 3B 61 6D      mov d, _c_data ; $c
8403   350E D7            push a
8404   350F DA            push d
8405   3510                              
8406   3510 FD 2E 01 00   mov32 cb, $00000001
8406   3514 00 00 
8407   3516 E7            pop d
8408   3517 FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
8409   351B DA            push d
8410   351C                              
8411   351C FA F7 FF      lea d, [bp + -9] ; $c3
8412   351F 2A            mov b, [d]
8413   3520 38 00 00      mov c, 0
8414   3523 E7            pop d
8415   3524 5A            add d, b
8416   3525 E4            pop a
8417   3526 32            mov bl, [d]
8418   3527 A7 00         mov bh, 0
8419   3529 38 00 00      mov c, 0
8420   352C             ; --- START TERMS
8421   352C D7            push a
8422   352D 11            mov a, b
8423   352E 3B 61 6D      mov d, _c_data ; $c
8424   3531 D7            push a
8425   3532 DA            push d
8426   3533                              
8427   3533 FD 2E 01 00   mov32 cb, $00000001
8427   3537 00 00 
8428   3539 E7            pop d
8429   353A FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
8430   353E DA            push d
8431   353F                              
8432   353F FA F9 FF      lea d, [bp + -7] ; $c2
8433   3542 2A            mov b, [d]
8434   3543 38 00 00      mov c, 0
8435   3546 E7            pop d
8436   3547 5A            add d, b
8437   3548 E4            pop a
8438   3549 32            mov bl, [d]
8439   354A A7 00         mov bh, 0
8440   354C 38 00 00      mov c, 0
8441   354F 60            sub a, b
8442   3550 27            mov b, a
8443   3551 E4            pop a
8444   3552             ; --- END TERMS
8445   3552             ; --- START FACTORS
8446   3552 D7            push a
8447   3553 FD D8         push g
8448   3555 11            mov a, b
8449   3556 FD 7A         mov g, c
8450   3558 FA F5 FF      lea d, [bp + -11] ; $c4
8451   355B 2A            mov b, [d]
8452   355C 38 00 00      mov c, 0
8453   355F D7            push a     ; save left operand
8454   3560 8E            xor a, b   ; xor sign bits
8455   3561 FD AA         swp a      ; swap bytes
8456   3563 83            mov cl, al ; save result of xor into 'dl'
8457   3564 E4            pop a      ; restore left side operator
8458   3565 DF            push cl    ; save result of xor above
8459   3566 FD AA         swp a  
8460   3568 93 80         test al, $80  
8461   356A FD AA         swp a  
8462   356C C6 71 35      jz skip_invert_a_136  
8463   356F FD 95         neg a 
8464   3571             skip_invert_a_136:   
8465   3571 FD AB         swp b
8466   3573 FD 93 80      test bl, $80  
8467   3576 FD AB         swp b
8468   3578 C6 7D 35      jz skip_invert_b_136  
8469   357B FD 97         neg b 
8470   357D             skip_invert_b_136:   
8471   357D AC            mul a, b ; *
8472   357E FD 78         mov g, a
8473   3580 11            mov a, b
8474   3581 EA            pop bl
8475   3582 FD 93 80      test bl, $80
8476   3585 C6 92 35      jz _same_signs_136
8477   3588 2F            mov bl, al
8478   3589 95            not a
8479   358A FD 97         neg b
8480   358C 5B 00 00      adc a, 0
8481   358F FD 78         mov g, a
8482   3591 11            mov a, b
8483   3592             _same_signs_136:
8484   3592 FD 38         mov c, g
8485   3594 27            mov b, a
8486   3595 FD F1         pop g
8487   3597 E4            pop a
8488   3598             ; --- END FACTORS
8489   3598 FD 15         add32 cb, ga
8490   359A FD F1         pop g
8491   359C E4            pop a
8492   359D             ; --- END TERMS
8493   359D E7            pop d
8494   359E FD 43         mov [d], b
8495   35A0             ; x2 = 100 * c[2][c2] + (c[2][c3] - c[2][c2]) * c4; 
8496   35A0 FA ED FF      lea d, [bp + -19] ; $x2
8497   35A3 DA            push d
8498   35A4                              
8499   35A4 FD 2E 64 00   mov32 cb, $00000064
8499   35A8 00 00 
8500   35AA             ; --- START FACTORS
8501   35AA D7            push a
8502   35AB FD D8         push g
8503   35AD 11            mov a, b
8504   35AE FD 7A         mov g, c
8505   35B0 3B 61 6D      mov d, _c_data ; $c
8506   35B3 D7            push a
8507   35B4 DA            push d
8508   35B5                              
8509   35B5 FD 2E 02 00   mov32 cb, $00000002
8509   35B9 00 00 
8510   35BB E7            pop d
8511   35BC FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
8512   35C0 DA            push d
8513   35C1                              
8514   35C1 FA F9 FF      lea d, [bp + -7] ; $c2
8515   35C4 2A            mov b, [d]
8516   35C5 38 00 00      mov c, 0
8517   35C8 E7            pop d
8518   35C9 5A            add d, b
8519   35CA E4            pop a
8520   35CB 32            mov bl, [d]
8521   35CC A7 00         mov bh, 0
8522   35CE 38 00 00      mov c, 0
8523   35D1 D7            push a     ; save left operand
8524   35D2 8E            xor a, b   ; xor sign bits
8525   35D3 FD AA         swp a      ; swap bytes
8526   35D5 83            mov cl, al ; save result of xor into 'dl'
8527   35D6 E4            pop a      ; restore left side operator
8528   35D7 DF            push cl    ; save result of xor above
8529   35D8 FD AA         swp a  
8530   35DA 93 80         test al, $80  
8531   35DC FD AA         swp a  
8532   35DE C6 E3 35      jz skip_invert_a_137  
8533   35E1 FD 95         neg a 
8534   35E3             skip_invert_a_137:   
8535   35E3 FD AB         swp b
8536   35E5 FD 93 80      test bl, $80  
8537   35E8 FD AB         swp b
8538   35EA C6 EF 35      jz skip_invert_b_137  
8539   35ED FD 97         neg b 
8540   35EF             skip_invert_b_137:   
8541   35EF AC            mul a, b ; *
8542   35F0 FD 78         mov g, a
8543   35F2 11            mov a, b
8544   35F3 EA            pop bl
8545   35F4 FD 93 80      test bl, $80
8546   35F7 C6 04 36      jz _same_signs_137
8547   35FA 2F            mov bl, al
8548   35FB 95            not a
8549   35FC FD 97         neg b
8550   35FE 5B 00 00      adc a, 0
8551   3601 FD 78         mov g, a
8552   3603 11            mov a, b
8553   3604             _same_signs_137:
8554   3604 FD 38         mov c, g
8555   3606 27            mov b, a
8556   3607 FD F1         pop g
8557   3609 E4            pop a
8558   360A             ; --- END FACTORS
8559   360A             ; --- START TERMS
8560   360A D7            push a
8561   360B FD D8         push g
8562   360D 11            mov a, b
8563   360E FD 7A         mov g, c
8564   3610                              
8565   3610 3B 61 6D      mov d, _c_data ; $c
8566   3613 D7            push a
8567   3614 DA            push d
8568   3615                              
8569   3615 FD 2E 02 00   mov32 cb, $00000002
8569   3619 00 00 
8570   361B E7            pop d
8571   361C FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
8572   3620 DA            push d
8573   3621                              
8574   3621 FA F7 FF      lea d, [bp + -9] ; $c3
8575   3624 2A            mov b, [d]
8576   3625 38 00 00      mov c, 0
8577   3628 E7            pop d
8578   3629 5A            add d, b
8579   362A E4            pop a
8580   362B 32            mov bl, [d]
8581   362C A7 00         mov bh, 0
8582   362E 38 00 00      mov c, 0
8583   3631             ; --- START TERMS
8584   3631 D7            push a
8585   3632 11            mov a, b
8586   3633 3B 61 6D      mov d, _c_data ; $c
8587   3636 D7            push a
8588   3637 DA            push d
8589   3638                              
8590   3638 FD 2E 02 00   mov32 cb, $00000002
8590   363C 00 00 
8591   363E E7            pop d
8592   363F FD 13 0A 00   mma 10 ; mov a, 10; mul a, b; add d, b
8593   3643 DA            push d
8594   3644                              
8595   3644 FA F9 FF      lea d, [bp + -7] ; $c2
8596   3647 2A            mov b, [d]
8597   3648 38 00 00      mov c, 0
8598   364B E7            pop d
8599   364C 5A            add d, b
8600   364D E4            pop a
8601   364E 32            mov bl, [d]
8602   364F A7 00         mov bh, 0
8603   3651 38 00 00      mov c, 0
8604   3654 60            sub a, b
8605   3655 27            mov b, a
8606   3656 E4            pop a
8607   3657             ; --- END TERMS
8608   3657             ; --- START FACTORS
8609   3657 D7            push a
8610   3658 FD D8         push g
8611   365A 11            mov a, b
8612   365B FD 7A         mov g, c
8613   365D FA F5 FF      lea d, [bp + -11] ; $c4
8614   3660 2A            mov b, [d]
8615   3661 38 00 00      mov c, 0
8616   3664 D7            push a     ; save left operand
8617   3665 8E            xor a, b   ; xor sign bits
8618   3666 FD AA         swp a      ; swap bytes
8619   3668 83            mov cl, al ; save result of xor into 'dl'
8620   3669 E4            pop a      ; restore left side operator
8621   366A DF            push cl    ; save result of xor above
8622   366B FD AA         swp a  
8623   366D 93 80         test al, $80  
8624   366F FD AA         swp a  
8625   3671 C6 76 36      jz skip_invert_a_138  
8626   3674 FD 95         neg a 
8627   3676             skip_invert_a_138:   
8628   3676 FD AB         swp b
8629   3678 FD 93 80      test bl, $80  
8630   367B FD AB         swp b
8631   367D C6 82 36      jz skip_invert_b_138  
8632   3680 FD 97         neg b 
8633   3682             skip_invert_b_138:   
8634   3682 AC            mul a, b ; *
8635   3683 FD 78         mov g, a
8636   3685 11            mov a, b
8637   3686 EA            pop bl
8638   3687 FD 93 80      test bl, $80
8639   368A C6 97 36      jz _same_signs_138
8640   368D 2F            mov bl, al
8641   368E 95            not a
8642   368F FD 97         neg b
8643   3691 5B 00 00      adc a, 0
8644   3694 FD 78         mov g, a
8645   3696 11            mov a, b
8646   3697             _same_signs_138:
8647   3697 FD 38         mov c, g
8648   3699 27            mov b, a
8649   369A FD F1         pop g
8650   369C E4            pop a
8651   369D             ; --- END FACTORS
8652   369D FD 15         add32 cb, ga
8653   369F FD F1         pop g
8654   36A1 E4            pop a
8655   36A2             ; --- END TERMS
8656   36A2 E7            pop d
8657   36A3 FD 43         mov [d], b
8658   36A5             ; x = ship_y + x1; 
8659   36A5 FA F3 FF      lea d, [bp + -13] ; $x
8660   36A8 DA            push d
8661   36A9                              
8662   36A9 3B 58 6E      mov d, _ship_y ; $ship_y
8663   36AC 2A            mov b, [d]
8664   36AD 38 00 00      mov c, 0
8665   36B0             ; --- START TERMS
8666   36B0 D7            push a
8667   36B1 11            mov a, b
8668   36B2 FA EF FF      lea d, [bp + -17] ; $x1
8669   36B5 2A            mov b, [d]
8670   36B6 38 00 00      mov c, 0
8671   36B9 56            add b, a
8672   36BA E4            pop a
8673   36BB             ; --- END TERMS
8674   36BB E7            pop d
8675   36BC FD 43         mov [d], b
8676   36BE             ; y = ship_x + x2; 
8677   36BE FA F1 FF      lea d, [bp + -15] ; $y
8678   36C1 DA            push d
8679   36C2                              
8680   36C2 3B 5A 6E      mov d, _ship_x ; $ship_x
8681   36C5 2A            mov b, [d]
8682   36C6 38 00 00      mov c, 0
8683   36C9             ; --- START TERMS
8684   36C9 D7            push a
8685   36CA 11            mov a, b
8686   36CB FA ED FF      lea d, [bp + -19] ; $x2
8687   36CE 2A            mov b, [d]
8688   36CF 38 00 00      mov c, 0
8689   36D2 56            add b, a
8690   36D3 E4            pop a
8691   36D4             ; --- END TERMS
8692   36D4 E7            pop d
8693   36D5 FD 43         mov [d], b
8694   36D7             ; x3 = FROM_FIXED00(x); 
8695   36D7 FA FF FF      lea d, [bp + -1] ; $x3
8696   36DA DA            push d
8697   36DB                              
8698   36DB             ; --- START FUNCTION CALL
8699   36DB                              
8700   36DB FA F3 FF      lea d, [bp + -13] ; $x
8701   36DE 2A            mov b, [d]
8702   36DF 38 00 00      mov c, 0
8703   36E2 FD AB         swp b
8704   36E4 D8            push b
8705   36E5 07 DC 04      call FROM_FIXED00
8706   36E8 51 02 00      add sp, 2
8707   36EB             ; --- END FUNCTION CALL
8708   36EB E7            pop d
8709   36EC FD 43         mov [d], b
8710   36EE             ; y3 = FROM_FIXED00(y); 
8711   36EE FA FD FF      lea d, [bp + -3] ; $y3
8712   36F1 DA            push d
8713   36F2                              
8714   36F2             ; --- START FUNCTION CALL
8715   36F2                              
8716   36F2 FA F1 FF      lea d, [bp + -15] ; $y
8717   36F5 2A            mov b, [d]
8718   36F6 38 00 00      mov c, 0
8719   36F9 FD AB         swp b
8720   36FB D8            push b
8721   36FC 07 DC 04      call FROM_FIXED00
8722   36FF 51 02 00      add sp, 2
8723   3702             ; --- END FUNCTION CALL
8724   3702 E7            pop d
8725   3703 FD 43         mov [d], b
8726   3705             ; puts("Torpedo Track:"); 
8727   3705                              
8728   3705             ; --- START FUNCTION CALL
8729   3705                              
8730   3705 26 72 79      mov b, _s103 ; "Torpedo Track:"
8731   3708 FD AB         swp b
8732   370A D8            push b
8733   370B 07 5C 69      call puts
8734   370E 51 02 00      add sp, 2
8735   3711             ; --- END FUNCTION CALL
8736   3711             ; while (x3 >= 1 && x3 <= 8 && y3 >= 1 && y3 <= 8) { 
8737   3711             _while139_cond:
8738   3711                              
8739   3711 FA FF FF      lea d, [bp + -1] ; $x3
8740   3714 2A            mov b, [d]
8741   3715 38 00 00      mov c, 0
8742   3718             ; --- START RELATIONAL
8743   3718 D7            push a
8744   3719 11            mov a, b
8745   371A FD 2E 01 00   mov32 cb, $00000001
8745   371E 00 00 
8746   3720 B0            cmp a, b
8747   3721 FD 80         sge ; >=
8748   3723 E4            pop a
8749   3724             ; --- END RELATIONAL
8750   3724             ; --- START LOGICAL AND
8751   3724 D7            push a
8752   3725 11            mov a, b
8753   3726 FA FF FF      lea d, [bp + -1] ; $x3
8754   3729 2A            mov b, [d]
8755   372A 38 00 00      mov c, 0
8756   372D             ; --- START RELATIONAL
8757   372D D7            push a
8758   372E 11            mov a, b
8759   372F FD 2E 08 00   mov32 cb, $00000008
8759   3733 00 00 
8760   3735 B0            cmp a, b
8761   3736 FD 74         sle ; <= (signed)
8762   3738 E4            pop a
8763   3739             ; --- END RELATIONAL
8764   3739 FD A7         sand a, b
8765   373B 11            mov a, b
8766   373C FA FD FF      lea d, [bp + -3] ; $y3
8767   373F 2A            mov b, [d]
8768   3740 38 00 00      mov c, 0
8769   3743             ; --- START RELATIONAL
8770   3743 D7            push a
8771   3744 11            mov a, b
8772   3745 FD 2E 01 00   mov32 cb, $00000001
8772   3749 00 00 
8773   374B B0            cmp a, b
8774   374C FD 80         sge ; >=
8775   374E E4            pop a
8776   374F             ; --- END RELATIONAL
8777   374F FD A7         sand a, b
8778   3751 11            mov a, b
8779   3752 FA FD FF      lea d, [bp + -3] ; $y3
8780   3755 2A            mov b, [d]
8781   3756 38 00 00      mov c, 0
8782   3759             ; --- START RELATIONAL
8783   3759 D7            push a
8784   375A 11            mov a, b
8785   375B FD 2E 08 00   mov32 cb, $00000008
8785   375F 00 00 
8786   3761 B0            cmp a, b
8787   3762 FD 74         sle ; <= (signed)
8788   3764 E4            pop a
8789   3765             ; --- END RELATIONAL
8790   3765 FD A7         sand a, b
8791   3767 E4            pop a
8792   3768             ; --- END LOGICAL AND
8793   3768 C0 00 00      cmp b, 0
8794   376B C6 84 38      je _while139_exit
8795   376E             _while139_block:
8796   376E             ; unsigned char p; 
8797   376E 52 01 00      sub sp, 1
8798   3771             ; printf("    %d, %d\n", x3, y3); 
8799   3771                              
8800   3771             ; --- START FUNCTION CALL
8801   3771                              
8802   3771 FA FD FF      lea d, [bp + -3] ; $y3
8803   3774 2A            mov b, [d]
8804   3775 38 00 00      mov c, 0
8805   3778 FD AB         swp b
8806   377A D8            push b
8807   377B                              
8808   377B FA FF FF      lea d, [bp + -1] ; $x3
8809   377E 2A            mov b, [d]
8810   377F 38 00 00      mov c, 0
8811   3782 FD AB         swp b
8812   3784 D8            push b
8813   3785                              
8814   3785 26 81 79      mov b, _s104 ; "    %d, %d\n"
8815   3788 FD AB         swp b
8816   378A D8            push b
8817   378B 07 4F 60      call printf
8818   378E 51 06 00      add sp, 6
8819   3791             ; --- END FUNCTION CALL
8820   3791             ; p = quad[x3+-1][y3+-1]; 
8821   3791 FA EC FF      lea d, [bp + -20] ; $p
8822   3794 DA            push d
8823   3795                              
8824   3795 3B 5E 6E      mov d, _quad_data ; $quad
8825   3798 D7            push a
8826   3799 DA            push d
8827   379A                              
8828   379A FA FF FF      lea d, [bp + -1] ; $x3
8829   379D 2A            mov b, [d]
8830   379E 38 00 00      mov c, 0
8831   37A1             ; --- START TERMS
8832   37A1 D7            push a
8833   37A2 11            mov a, b
8834   37A3 FD 2E FF FF   mov32 cb, $ffffffff
8834   37A7 FF FF 
8835   37A9 56            add b, a
8836   37AA E4            pop a
8837   37AB             ; --- END TERMS
8838   37AB E7            pop d
8839   37AC FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
8840   37B0 DA            push d
8841   37B1                              
8842   37B1 FA FD FF      lea d, [bp + -3] ; $y3
8843   37B4 2A            mov b, [d]
8844   37B5 38 00 00      mov c, 0
8845   37B8             ; --- START TERMS
8846   37B8 D7            push a
8847   37B9 11            mov a, b
8848   37BA FD 2E FF FF   mov32 cb, $ffffffff
8848   37BE FF FF 
8849   37C0 56            add b, a
8850   37C1 E4            pop a
8851   37C2             ; --- END TERMS
8852   37C2 E7            pop d
8853   37C3 5A            add d, b
8854   37C4 E4            pop a
8855   37C5 32            mov bl, [d]
8856   37C6 A7 00         mov bh, 0
8857   37C8 38 00 00      mov c, 0
8858   37CB E7            pop d
8859   37CC FD 3E         mov [d], bl
8860   37CE             ; if (p != 		0 && p != 		4) { 
8861   37CE             _if140_cond:
8862   37CE                              
8863   37CE FA EC FF      lea d, [bp + -20] ; $p
8864   37D1 32            mov bl, [d]
8865   37D2 A7 00         mov bh, 0
8866   37D4 38 00 00      mov c, 0
8867   37D7             ; --- START RELATIONAL
8868   37D7 D7            push a
8869   37D8 11            mov a, b
8870   37D9 FD 2E 00 00   mov32 cb, $00000000
8870   37DD 00 00 
8871   37DF B0            cmp a, b
8872   37E0 FD 72         sneq ; !=
8873   37E2 E4            pop a
8874   37E3             ; --- END RELATIONAL
8875   37E3             ; --- START LOGICAL AND
8876   37E3 D7            push a
8877   37E4 11            mov a, b
8878   37E5 FA EC FF      lea d, [bp + -20] ; $p
8879   37E8 32            mov bl, [d]
8880   37E9 A7 00         mov bh, 0
8881   37EB 38 00 00      mov c, 0
8882   37EE             ; --- START RELATIONAL
8883   37EE D7            push a
8884   37EF 11            mov a, b
8885   37F0 FD 2E 04 00   mov32 cb, $00000004
8885   37F4 00 00 
8886   37F6 B0            cmp a, b
8887   37F7 FD 72         sneq ; !=
8888   37F9 E4            pop a
8889   37FA             ; --- END RELATIONAL
8890   37FA FD A7         sand a, b
8891   37FC E4            pop a
8892   37FD             ; --- END LOGICAL AND
8893   37FD C0 00 00      cmp b, 0
8894   3800 C6 21 38      je _if140_exit
8895   3803             _if140_TRUE:
8896   3803             ; torpedo_hit(x3, y3); 
8897   3803                              
8898   3803             ; --- START FUNCTION CALL
8899   3803                              
8900   3803 FA FD FF      lea d, [bp + -3] ; $y3
8901   3806 2A            mov b, [d]
8902   3807 38 00 00      mov c, 0
8903   380A DD            push bl
8904   380B                              
8905   380B FA FF FF      lea d, [bp + -1] ; $x3
8906   380E 2A            mov b, [d]
8907   380F 38 00 00      mov c, 0
8908   3812 DD            push bl
8909   3813 07 95 38      call torpedo_hit
8910   3816 51 02 00      add sp, 2
8911   3819             ; --- END FUNCTION CALL
8912   3819             ; klingons_shoot(); 
8913   3819                              
8914   3819             ; --- START FUNCTION CALL
8915   3819 07 EF 50      call klingons_shoot
8916   381C             ; return; 
8917   381C F9            leave
8918   381D 09            ret
8919   381E 0A 21 38      jmp _if140_exit
8920   3821             _if140_exit:
8921   3821             ; x = x + x1; 
8922   3821 FA F3 FF      lea d, [bp + -13] ; $x
8923   3824 DA            push d
8924   3825                              
8925   3825 FA F3 FF      lea d, [bp + -13] ; $x
8926   3828 2A            mov b, [d]
8927   3829 38 00 00      mov c, 0
8928   382C             ; --- START TERMS
8929   382C D7            push a
8930   382D 11            mov a, b
8931   382E FA EF FF      lea d, [bp + -17] ; $x1
8932   3831 2A            mov b, [d]
8933   3832 38 00 00      mov c, 0
8934   3835 56            add b, a
8935   3836 E4            pop a
8936   3837             ; --- END TERMS
8937   3837 E7            pop d
8938   3838 FD 43         mov [d], b
8939   383A             ; y = y + x2; 
8940   383A FA F1 FF      lea d, [bp + -15] ; $y
8941   383D DA            push d
8942   383E                              
8943   383E FA F1 FF      lea d, [bp + -15] ; $y
8944   3841 2A            mov b, [d]
8945   3842 38 00 00      mov c, 0
8946   3845             ; --- START TERMS
8947   3845 D7            push a
8948   3846 11            mov a, b
8949   3847 FA ED FF      lea d, [bp + -19] ; $x2
8950   384A 2A            mov b, [d]
8951   384B 38 00 00      mov c, 0
8952   384E 56            add b, a
8953   384F E4            pop a
8954   3850             ; --- END TERMS
8955   3850 E7            pop d
8956   3851 FD 43         mov [d], b
8957   3853             ; x3 = FROM_FIXED00(x); 
8958   3853 FA FF FF      lea d, [bp + -1] ; $x3
8959   3856 DA            push d
8960   3857                              
8961   3857             ; --- START FUNCTION CALL
8962   3857                              
8963   3857 FA F3 FF      lea d, [bp + -13] ; $x
8964   385A 2A            mov b, [d]
8965   385B 38 00 00      mov c, 0
8966   385E FD AB         swp b
8967   3860 D8            push b
8968   3861 07 DC 04      call FROM_FIXED00
8969   3864 51 02 00      add sp, 2
8970   3867             ; --- END FUNCTION CALL
8971   3867 E7            pop d
8972   3868 FD 43         mov [d], b
8973   386A             ; y3 = FROM_FIXED00(y); 
8974   386A FA FD FF      lea d, [bp + -3] ; $y3
8975   386D DA            push d
8976   386E                              
8977   386E             ; --- START FUNCTION CALL
8978   386E                              
8979   386E FA F1 FF      lea d, [bp + -15] ; $y
8980   3871 2A            mov b, [d]
8981   3872 38 00 00      mov c, 0
8982   3875 FD AB         swp b
8983   3877 D8            push b
8984   3878 07 DC 04      call FROM_FIXED00
8985   387B 51 02 00      add sp, 2
8986   387E             ; --- END FUNCTION CALL
8987   387E E7            pop d
8988   387F FD 43         mov [d], b
8989   3881 0A 11 37      jmp _while139_cond
8990   3884             _while139_exit:
8991   3884             ; puts("Torpedo Missed\n"); 
8992   3884                              
8993   3884             ; --- START FUNCTION CALL
8994   3884                              
8995   3884 26 8D 79      mov b, _s105 ; "Torpedo Missed\n"
8996   3887 FD AB         swp b
8997   3889 D8            push b
8998   388A 07 5C 69      call puts
8999   388D 51 02 00      add sp, 2
9000   3890             ; --- END FUNCTION CALL
9001   3890             ; klingons_shoot(); 
9002   3890                              
9003   3890             ; --- START FUNCTION CALL
9004   3890 07 EF 50      call klingons_shoot
9005   3893 F9            leave
9006   3894 09            ret
9007   3895             
9008   3895             torpedo_hit:
9009   3895 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9010   3898             ; int i; 
9011   3898 52 02 00      sub sp, 2
9012   389B             ; struct klingon *k; 
9013   389B 52 02 00      sub sp, 2
9014   389E             ; switch(quad[yp+-1][xp+-1]) { 
9015   389E             _switch141_expr:
9016   389E                              
9017   389E 3B 5E 6E      mov d, _quad_data ; $quad
9018   38A1 D7            push a
9019   38A2 DA            push d
9020   38A3                              
9021   38A3 FA 05 00      lea d, [bp + 5] ; $yp
9022   38A6 32            mov bl, [d]
9023   38A7 A7 00         mov bh, 0
9024   38A9 38 00 00      mov c, 0
9025   38AC             ; --- START TERMS
9026   38AC D7            push a
9027   38AD 11            mov a, b
9028   38AE FD 2E FF FF   mov32 cb, $ffffffff
9028   38B2 FF FF 
9029   38B4 56            add b, a
9030   38B5 E4            pop a
9031   38B6             ; --- END TERMS
9032   38B6 E7            pop d
9033   38B7 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
9034   38BB DA            push d
9035   38BC                              
9036   38BC FA 06 00      lea d, [bp + 6] ; $xp
9037   38BF 32            mov bl, [d]
9038   38C0 A7 00         mov bh, 0
9039   38C2 38 00 00      mov c, 0
9040   38C5             ; --- START TERMS
9041   38C5 D7            push a
9042   38C6 11            mov a, b
9043   38C7 FD 2E FF FF   mov32 cb, $ffffffff
9043   38CB FF FF 
9044   38CD 56            add b, a
9045   38CE E4            pop a
9046   38CF             ; --- END TERMS
9047   38CF E7            pop d
9048   38D0 5A            add d, b
9049   38D1 E4            pop a
9050   38D2 32            mov bl, [d]
9051   38D3 A7 00         mov bh, 0
9052   38D5 38 00 00      mov c, 0
9053   38D8             _switch141_comparisons:
9054   38D8 C0 01 00      cmp b, 1
9055   38DB C6 ED 38      je _switch141_case0
9056   38DE C0 03 00      cmp b, 3
9057   38E1 C6 13 39      je _switch141_case1
9058   38E4 C0 02 00      cmp b, 2
9059   38E7 C6 6B 3A      je _switch141_case2
9060   38EA 0A 93 3B      jmp _switch141_exit
9061   38ED             _switch141_case0:
9062   38ED             ; printf("Star at %d, %d absorbed torpedo energy.\n\n", yp, xp); 
9063   38ED                              
9064   38ED             ; --- START FUNCTION CALL
9065   38ED                              
9066   38ED FA 06 00      lea d, [bp + 6] ; $xp
9067   38F0 32            mov bl, [d]
9068   38F1 A7 00         mov bh, 0
9069   38F3 38 00 00      mov c, 0
9070   38F6 FD AA         swp a
9071   38F8 D8            push b
9072   38F9                              
9073   38F9 FA 05 00      lea d, [bp + 5] ; $yp
9074   38FC 32            mov bl, [d]
9075   38FD A7 00         mov bh, 0
9076   38FF 38 00 00      mov c, 0
9077   3902 FD AA         swp a
9078   3904 D8            push b
9079   3905                              
9080   3905 26 9D 79      mov b, _s106 ; "Star at %d, %d absorbed torpedo energy.\n\n"
9081   3908 FD AB         swp b
9082   390A D8            push b
9083   390B 07 4F 60      call printf
9084   390E 51 04 00      add sp, 4
9085   3911             ; --- END FUNCTION CALL
9086   3911             ; return; 
9087   3911 F9            leave
9088   3912 09            ret
9089   3913             _switch141_case1:
9090   3913             ; puts("*** Klingon Destroyed ***\n"); 
9091   3913                              
9092   3913             ; --- START FUNCTION CALL
9093   3913                              
9094   3913 26 01 79      mov b, _s99 ; "*** Klingon Destroyed ***\n"
9095   3916 FD AB         swp b
9096   3918 D8            push b
9097   3919 07 5C 69      call puts
9098   391C 51 02 00      add sp, 2
9099   391F             ; --- END FUNCTION CALL
9100   391F             ; klingons--; 
9101   391F                              
9102   391F 3B 34 6E      mov d, _klingons ; $klingons
9103   3922 32            mov bl, [d]
9104   3923 A7 00         mov bh, 0
9105   3925 38 00 00      mov c, 0
9106   3928 FD 7D         dec b
9107   392A 3B 34 6E      mov d, _klingons ; $klingons
9108   392D FD 3E         mov [d], bl
9109   392F FD 77         inc b
9110   3931             ; klingons_left--; 
9111   3931                              
9112   3931 3B 36 6E      mov d, _klingons_left ; $klingons_left
9113   3934 32            mov bl, [d]
9114   3935 A7 00         mov bh, 0
9115   3937 38 00 00      mov c, 0
9116   393A FD 7D         dec b
9117   393C 3B 36 6E      mov d, _klingons_left ; $klingons_left
9118   393F FD 3E         mov [d], bl
9119   3941 FD 77         inc b
9120   3943             ; if (klingons_left <= 0) 
9121   3943             _if142_cond:
9122   3943                              
9123   3943 3B 36 6E      mov d, _klingons_left ; $klingons_left
9124   3946 32            mov bl, [d]
9125   3947 A7 00         mov bh, 0
9126   3949 38 00 00      mov c, 0
9127   394C             ; --- START RELATIONAL
9128   394C D7            push a
9129   394D 11            mov a, b
9130   394E FD 2E 00 00   mov32 cb, $00000000
9130   3952 00 00 
9131   3954 B0            cmp a, b
9132   3955 FD 76         sleu ; <= (unsigned)
9133   3957 E4            pop a
9134   3958             ; --- END RELATIONAL
9135   3958 C0 00 00      cmp b, 0
9136   395B C6 64 39      je _if142_exit
9137   395E             _if142_TRUE:
9138   395E             ; won_game(); 
9139   395E                              
9140   395E             ; --- START FUNCTION CALL
9141   395E 07 16 4F      call won_game
9142   3961 0A 64 39      jmp _if142_exit
9143   3964             _if142_exit:
9144   3964             ; k = kdata; 
9145   3964 FA FD FF      lea d, [bp + -3] ; $k
9146   3967 DA            push d
9147   3968                              
9148   3968 3B 28 6E      mov d, _kdata_data ; $kdata
9149   396B 2D            mov b, d
9150   396C 38 00 00      mov c, 0
9151   396F E7            pop d
9152   3970 FD 43         mov [d], b
9153   3972             ; for (i = 0; i <= 2; i++) { 
9154   3972             _for143_init:
9155   3972 FA FF FF      lea d, [bp + -1] ; $i
9156   3975 DA            push d
9157   3976                              
9158   3976 FD 2E 00 00   mov32 cb, $00000000
9158   397A 00 00 
9159   397C E7            pop d
9160   397D FD 43         mov [d], b
9161   397F             _for143_cond:
9162   397F                              
9163   397F FA FF FF      lea d, [bp + -1] ; $i
9164   3982 2A            mov b, [d]
9165   3983 38 00 00      mov c, 0
9166   3986             ; --- START RELATIONAL
9167   3986 D7            push a
9168   3987 11            mov a, b
9169   3988 FD 2E 02 00   mov32 cb, $00000002
9169   398C 00 00 
9170   398E B0            cmp a, b
9171   398F FD 74         sle ; <= (signed)
9172   3991 E4            pop a
9173   3992             ; --- END RELATIONAL
9174   3992 C0 00 00      cmp b, 0
9175   3995 C6 17 3A      je _for143_exit
9176   3998             _for143_block:
9177   3998             ; if (yp == k->y && xp == k->x) 
9178   3998             _if144_cond:
9179   3998                              
9180   3998 FA 05 00      lea d, [bp + 5] ; $yp
9181   399B 32            mov bl, [d]
9182   399C A7 00         mov bh, 0
9183   399E 38 00 00      mov c, 0
9184   39A1             ; --- START RELATIONAL
9185   39A1 D7            push a
9186   39A2 11            mov a, b
9187   39A3 FA FD FF      lea d, [bp + -3] ; $k
9188   39A6 FD 2A         mov d, [d]
9189   39A8 58 00 00      add d, 0
9190   39AB 32            mov bl, [d]
9191   39AC A7 00         mov bh, 0
9192   39AE 38 00 00      mov c, 0
9193   39B1 B0            cmp a, b
9194   39B2 FD 71         seq ; ==
9195   39B4 E4            pop a
9196   39B5             ; --- END RELATIONAL
9197   39B5             ; --- START LOGICAL AND
9198   39B5 D7            push a
9199   39B6 11            mov a, b
9200   39B7 FA 06 00      lea d, [bp + 6] ; $xp
9201   39BA 32            mov bl, [d]
9202   39BB A7 00         mov bh, 0
9203   39BD 38 00 00      mov c, 0
9204   39C0             ; --- START RELATIONAL
9205   39C0 D7            push a
9206   39C1 11            mov a, b
9207   39C2 FA FD FF      lea d, [bp + -3] ; $k
9208   39C5 FD 2A         mov d, [d]
9209   39C7 58 01 00      add d, 1
9210   39CA 32            mov bl, [d]
9211   39CB A7 00         mov bh, 0
9212   39CD 38 00 00      mov c, 0
9213   39D0 B0            cmp a, b
9214   39D1 FD 71         seq ; ==
9215   39D3 E4            pop a
9216   39D4             ; --- END RELATIONAL
9217   39D4 FD A7         sand a, b
9218   39D6 E4            pop a
9219   39D7             ; --- END LOGICAL AND
9220   39D7 C0 00 00      cmp b, 0
9221   39DA C6 F2 39      je _if144_exit
9222   39DD             _if144_TRUE:
9223   39DD             ; k->energy = 0; 
9224   39DD FA FD FF      lea d, [bp + -3] ; $k
9225   39E0 FD 2A         mov d, [d]
9226   39E2 58 02 00      add d, 2
9227   39E5 DA            push d
9228   39E6                              
9229   39E6 FD 2E 00 00   mov32 cb, $00000000
9229   39EA 00 00 
9230   39EC E7            pop d
9231   39ED FD 43         mov [d], b
9232   39EF 0A F2 39      jmp _if144_exit
9233   39F2             _if144_exit:
9234   39F2             ; k++; 
9235   39F2                              
9236   39F2 FA FD FF      lea d, [bp + -3] ; $k
9237   39F5 2A            mov b, [d]
9238   39F6 38 00 00      mov c, 0
9239   39F9 11            mov a, b
9240   39FA FD 77         inc b
9241   39FC FD 77         inc b
9242   39FE FA FD FF      lea d, [bp + -3] ; $k
9243   3A01 FD 43         mov [d], b
9244   3A03 27            mov b, a
9245   3A04             _for143_update:
9246   3A04                              
9247   3A04 FA FF FF      lea d, [bp + -1] ; $i
9248   3A07 2A            mov b, [d]
9249   3A08 38 00 00      mov c, 0
9250   3A0B 11            mov a, b
9251   3A0C FD 77         inc b
9252   3A0E FA FF FF      lea d, [bp + -1] ; $i
9253   3A11 FD 43         mov [d], b
9254   3A13 27            mov b, a
9255   3A14 0A 7F 39      jmp _for143_cond
9256   3A17             _for143_exit:
9257   3A17             ; map[quad_y][quad_x] =map[quad_y][quad_x] - 0x100; 
9258   3A17 3B 86 6D      mov d, _map_data ; $map
9259   3A1A D7            push a
9260   3A1B DA            push d
9261   3A1C                              
9262   3A1C 3B 39 6E      mov d, _quad_y ; $quad_y
9263   3A1F 2A            mov b, [d]
9264   3A20 38 00 00      mov c, 0
9265   3A23 E7            pop d
9266   3A24 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
9267   3A28 DA            push d
9268   3A29                              
9269   3A29 3B 3B 6E      mov d, _quad_x ; $quad_x
9270   3A2C 2A            mov b, [d]
9271   3A2D 38 00 00      mov c, 0
9272   3A30 E7            pop d
9273   3A31 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9274   3A35 E4            pop a
9275   3A36 DA            push d
9276   3A37                              
9277   3A37 3B 86 6D      mov d, _map_data ; $map
9278   3A3A D7            push a
9279   3A3B DA            push d
9280   3A3C                              
9281   3A3C 3B 39 6E      mov d, _quad_y ; $quad_y
9282   3A3F 2A            mov b, [d]
9283   3A40 38 00 00      mov c, 0
9284   3A43 E7            pop d
9285   3A44 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
9286   3A48 DA            push d
9287   3A49                              
9288   3A49 3B 3B 6E      mov d, _quad_x ; $quad_x
9289   3A4C 2A            mov b, [d]
9290   3A4D 38 00 00      mov c, 0
9291   3A50 E7            pop d
9292   3A51 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9293   3A55 E4            pop a
9294   3A56 2A            mov b, [d]
9295   3A57 38 00 00      mov c, 0
9296   3A5A             ; --- START TERMS
9297   3A5A D7            push a
9298   3A5B 11            mov a, b
9299   3A5C FD 2E 00 01   mov32 cb, $00000100
9299   3A60 00 00 
9300   3A62 60            sub a, b
9301   3A63 27            mov b, a
9302   3A64 E4            pop a
9303   3A65             ; --- END TERMS
9304   3A65 E7            pop d
9305   3A66 FD 43         mov [d], b
9306   3A68             ; break; 
9307   3A68 0A 93 3B      jmp _switch141_exit ; case break
9308   3A6B             _switch141_case2:
9309   3A6B             ; puts("*** Starbase Destroyed ***"); 
9310   3A6B                              
9311   3A6B             ; --- START FUNCTION CALL
9312   3A6B                              
9313   3A6B 26 C7 79      mov b, _s107 ; "*** Starbase Destroyed ***"
9314   3A6E FD AB         swp b
9315   3A70 D8            push b
9316   3A71 07 5C 69      call puts
9317   3A74 51 02 00      add sp, 2
9318   3A77             ; --- END FUNCTION CALL
9319   3A77             ; starbases--; 
9320   3A77                              
9321   3A77 3B 5D 6D      mov d, _starbases ; $starbases
9322   3A7A 32            mov bl, [d]
9323   3A7B A7 00         mov bh, 0
9324   3A7D 38 00 00      mov c, 0
9325   3A80 FD 7D         dec b
9326   3A82 3B 5D 6D      mov d, _starbases ; $starbases
9327   3A85 FD 3E         mov [d], bl
9328   3A87 FD 77         inc b
9329   3A89             ; starbases_left--; 
9330   3A89                              
9331   3A89 3B 60 6D      mov d, _starbases_left ; $starbases_left
9332   3A8C 32            mov bl, [d]
9333   3A8D A7 00         mov bh, 0
9334   3A8F 38 00 00      mov c, 0
9335   3A92 FD 7D         dec b
9336   3A94 3B 60 6D      mov d, _starbases_left ; $starbases_left
9337   3A97 FD 3E         mov [d], bl
9338   3A99 FD 77         inc b
9339   3A9B             ; if (starbases_left <= 0 && klingons_left <= FROM_FIXED(stardate) - time_start - time_up) { 
9340   3A9B             _if145_cond:
9341   3A9B                              
9342   3A9B 3B 60 6D      mov d, _starbases_left ; $starbases_left
9343   3A9E 32            mov bl, [d]
9344   3A9F A7 00         mov bh, 0
9345   3AA1 38 00 00      mov c, 0
9346   3AA4             ; --- START RELATIONAL
9347   3AA4 D7            push a
9348   3AA5 11            mov a, b
9349   3AA6 FD 2E 00 00   mov32 cb, $00000000
9349   3AAA 00 00 
9350   3AAC B0            cmp a, b
9351   3AAD FD 74         sle ; <= (signed)
9352   3AAF E4            pop a
9353   3AB0             ; --- END RELATIONAL
9354   3AB0             ; --- START LOGICAL AND
9355   3AB0 D7            push a
9356   3AB1 11            mov a, b
9357   3AB2 3B 36 6E      mov d, _klingons_left ; $klingons_left
9358   3AB5 32            mov bl, [d]
9359   3AB6 A7 00         mov bh, 0
9360   3AB8 38 00 00      mov c, 0
9361   3ABB             ; --- START RELATIONAL
9362   3ABB D7            push a
9363   3ABC 11            mov a, b
9364   3ABD             ; --- START FUNCTION CALL
9365   3ABD                              
9366   3ABD 3B 5C 6E      mov d, _stardate ; $stardate
9367   3AC0 2A            mov b, [d]
9368   3AC1 38 00 00      mov c, 0
9369   3AC4 FD AB         swp b
9370   3AC6 D8            push b
9371   3AC7 07 68 04      call FROM_FIXED
9372   3ACA 51 02 00      add sp, 2
9373   3ACD             ; --- END FUNCTION CALL
9374   3ACD             ; --- START TERMS
9375   3ACD D7            push a
9376   3ACE 11            mov a, b
9377   3ACF 3B 40 6E      mov d, _time_start ; $time_start
9378   3AD2 2A            mov b, [d]
9379   3AD3 38 00 00      mov c, 0
9380   3AD6 60            sub a, b
9381   3AD7 27            mov b, a
9382   3AD8 11            mov a, b
9383   3AD9 3B 42 6E      mov d, _time_up ; $time_up
9384   3ADC 2A            mov b, [d]
9385   3ADD 38 00 00      mov c, 0
9386   3AE0 60            sub a, b
9387   3AE1 27            mov b, a
9388   3AE2 E4            pop a
9389   3AE3             ; --- END TERMS
9390   3AE3 B0            cmp a, b
9391   3AE4 FD 76         sleu ; <= (unsigned)
9392   3AE6 E4            pop a
9393   3AE7             ; --- END RELATIONAL
9394   3AE7 FD A7         sand a, b
9395   3AE9 E4            pop a
9396   3AEA             ; --- END LOGICAL AND
9397   3AEA C0 00 00      cmp b, 0
9398   3AED C6 26 3B      je _if145_exit
9399   3AF0             _if145_TRUE:
9400   3AF0             ; puts("That does it, Captain!!"); 
9401   3AF0                              
9402   3AF0             ; --- START FUNCTION CALL
9403   3AF0                              
9404   3AF0 26 E2 79      mov b, _s108 ; "That does it, Captain!!"
9405   3AF3 FD AB         swp b
9406   3AF5 D8            push b
9407   3AF6 07 5C 69      call puts
9408   3AF9 51 02 00      add sp, 2
9409   3AFC             ; --- END FUNCTION CALL
9410   3AFC             ; puts("You are hereby relieved of command\n"); 
9411   3AFC                              
9412   3AFC             ; --- START FUNCTION CALL
9413   3AFC                              
9414   3AFC 26 FA 79      mov b, _s109 ; "You are hereby relieved of command\n"
9415   3AFF FD AB         swp b
9416   3B01 D8            push b
9417   3B02 07 5C 69      call puts
9418   3B05 51 02 00      add sp, 2
9419   3B08             ; --- END FUNCTION CALL
9420   3B08             ; puts("and sentenced to 99 stardates of hard"); 
9421   3B08                              
9422   3B08             ; --- START FUNCTION CALL
9423   3B08                              
9424   3B08 26 1E 7A      mov b, _s110 ; "and sentenced to 99 stardates of hard"
9425   3B0B FD AB         swp b
9426   3B0D D8            push b
9427   3B0E 07 5C 69      call puts
9428   3B11 51 02 00      add sp, 2
9429   3B14             ; --- END FUNCTION CALL
9430   3B14             ; puts("labor on Cygnus 12!!\n"); 
9431   3B14                              
9432   3B14             ; --- START FUNCTION CALL
9433   3B14                              
9434   3B14 26 44 7A      mov b, _s111 ; "labor on Cygnus 12!!\n"
9435   3B17 FD AB         swp b
9436   3B19 D8            push b
9437   3B1A 07 5C 69      call puts
9438   3B1D 51 02 00      add sp, 2
9439   3B20             ; --- END FUNCTION CALL
9440   3B20             ; resign_commision(); 
9441   3B20                              
9442   3B20             ; --- START FUNCTION CALL
9443   3B20 07 F6 4E      call resign_commision
9444   3B23 0A 26 3B      jmp _if145_exit
9445   3B26             _if145_exit:
9446   3B26             ; puts("Starfleet Command reviewing your record to consider\n court martial!\n"); 
9447   3B26                              
9448   3B26             ; --- START FUNCTION CALL
9449   3B26                              
9450   3B26 26 5A 7A      mov b, _s112 ; "Starfleet Command reviewing your record to consider\n court martial!\n"
9451   3B29 FD AB         swp b
9452   3B2B D8            push b
9453   3B2C 07 5C 69      call puts
9454   3B2F 51 02 00      add sp, 2
9455   3B32             ; --- END FUNCTION CALL
9456   3B32             ; docked = 0;		/* Undock */ 
9457   3B32 3B 81 6D      mov d, _docked ; $docked
9458   3B35 DA            push d
9459   3B36                              
9460   3B36 FD 2E 00 00   mov32 cb, $00000000
9460   3B3A 00 00 
9461   3B3C E7            pop d
9462   3B3D FD 3E         mov [d], bl
9463   3B3F             ; map[quad_y][quad_x] =map[quad_y][quad_x] - 0x10; 
9464   3B3F 3B 86 6D      mov d, _map_data ; $map
9465   3B42 D7            push a
9466   3B43 DA            push d
9467   3B44                              
9468   3B44 3B 39 6E      mov d, _quad_y ; $quad_y
9469   3B47 2A            mov b, [d]
9470   3B48 38 00 00      mov c, 0
9471   3B4B E7            pop d
9472   3B4C FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
9473   3B50 DA            push d
9474   3B51                              
9475   3B51 3B 3B 6E      mov d, _quad_x ; $quad_x
9476   3B54 2A            mov b, [d]
9477   3B55 38 00 00      mov c, 0
9478   3B58 E7            pop d
9479   3B59 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9480   3B5D E4            pop a
9481   3B5E DA            push d
9482   3B5F                              
9483   3B5F 3B 86 6D      mov d, _map_data ; $map
9484   3B62 D7            push a
9485   3B63 DA            push d
9486   3B64                              
9487   3B64 3B 39 6E      mov d, _quad_y ; $quad_y
9488   3B67 2A            mov b, [d]
9489   3B68 38 00 00      mov c, 0
9490   3B6B E7            pop d
9491   3B6C FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
9492   3B70 DA            push d
9493   3B71                              
9494   3B71 3B 3B 6E      mov d, _quad_x ; $quad_x
9495   3B74 2A            mov b, [d]
9496   3B75 38 00 00      mov c, 0
9497   3B78 E7            pop d
9498   3B79 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9499   3B7D E4            pop a
9500   3B7E 2A            mov b, [d]
9501   3B7F 38 00 00      mov c, 0
9502   3B82             ; --- START TERMS
9503   3B82 D7            push a
9504   3B83 11            mov a, b
9505   3B84 FD 2E 10 00   mov32 cb, $00000010
9505   3B88 00 00 
9506   3B8A 60            sub a, b
9507   3B8B 27            mov b, a
9508   3B8C E4            pop a
9509   3B8D             ; --- END TERMS
9510   3B8D E7            pop d
9511   3B8E FD 43         mov [d], b
9512   3B90             ; break; 
9513   3B90 0A 93 3B      jmp _switch141_exit ; case break
9514   3B93             _switch141_exit:
9515   3B93             ; quad[yp+-1][xp+-1] = 		0; 
9516   3B93 3B 5E 6E      mov d, _quad_data ; $quad
9517   3B96 D7            push a
9518   3B97 DA            push d
9519   3B98                              
9520   3B98 FA 05 00      lea d, [bp + 5] ; $yp
9521   3B9B 32            mov bl, [d]
9522   3B9C A7 00         mov bh, 0
9523   3B9E 38 00 00      mov c, 0
9524   3BA1             ; --- START TERMS
9525   3BA1 D7            push a
9526   3BA2 11            mov a, b
9527   3BA3 FD 2E FF FF   mov32 cb, $ffffffff
9527   3BA7 FF FF 
9528   3BA9 56            add b, a
9529   3BAA E4            pop a
9530   3BAB             ; --- END TERMS
9531   3BAB E7            pop d
9532   3BAC FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
9533   3BB0 DA            push d
9534   3BB1                              
9535   3BB1 FA 06 00      lea d, [bp + 6] ; $xp
9536   3BB4 32            mov bl, [d]
9537   3BB5 A7 00         mov bh, 0
9538   3BB7 38 00 00      mov c, 0
9539   3BBA             ; --- START TERMS
9540   3BBA D7            push a
9541   3BBB 11            mov a, b
9542   3BBC FD 2E FF FF   mov32 cb, $ffffffff
9542   3BC0 FF FF 
9543   3BC2 56            add b, a
9544   3BC3 E4            pop a
9545   3BC4             ; --- END TERMS
9546   3BC4 E7            pop d
9547   3BC5 5A            add d, b
9548   3BC6 E4            pop a
9549   3BC7 DA            push d
9550   3BC8                              
9551   3BC8 FD 2E 00 00   mov32 cb, $00000000
9551   3BCC 00 00 
9552   3BCE E7            pop d
9553   3BCF FD 3E         mov [d], bl
9554   3BD1 F9            leave
9555   3BD2 09            ret
9556   3BD3             
9557   3BD3             damage_control:
9558   3BD3 F8 00 00      enter 0 ; (push bp; mov bp, sp)
9559   3BD6             ; int repair_cost = 0; 
9560   3BD6 52 02 00      sub sp, 2
9561   3BD9             ; --- START LOCAL VAR INITIALIZATION
9562   3BD9 FA FF FF      lea d, [bp + -1] ; $repair_cost
9563   3BDC DA            push d
9564   3BDD                              
9565   3BDD FD 2E 00 00   mov32 cb, $00000000
9565   3BE1 00 00 
9566   3BE3 E7            pop d
9567   3BE4 FD 43         mov [d], b
9568   3BE6             ; --- END LOCAL VAR INITIALIZATION
9569   3BE6             ; int i; 
9570   3BE6 52 02 00      sub sp, 2
9571   3BE9             ; if (damage[6] < 0) 
9572   3BE9             _if146_cond:
9573   3BE9                              
9574   3BE9 3B 44 6E      mov d, _damage_data ; $damage
9575   3BEC D7            push a
9576   3BED DA            push d
9577   3BEE                              
9578   3BEE FD 2E 06 00   mov32 cb, $00000006
9578   3BF2 00 00 
9579   3BF4 E7            pop d
9580   3BF5 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9581   3BF9 E4            pop a
9582   3BFA 2A            mov b, [d]
9583   3BFB 38 00 00      mov c, 0
9584   3BFE             ; --- START RELATIONAL
9585   3BFE D7            push a
9586   3BFF 11            mov a, b
9587   3C00 FD 2E 00 00   mov32 cb, $00000000
9587   3C04 00 00 
9588   3C06 B0            cmp a, b
9589   3C07 FD 73         slt ; < (signed)
9590   3C09 E4            pop a
9591   3C0A             ; --- END RELATIONAL
9592   3C0A C0 00 00      cmp b, 0
9593   3C0D C6 1F 3C      je _if146_exit
9594   3C10             _if146_TRUE:
9595   3C10             ; puts("Damage Control report not available."); 
9596   3C10                              
9597   3C10             ; --- START FUNCTION CALL
9598   3C10                              
9599   3C10 26 9F 7A      mov b, _s113 ; "Damage Control report not available."
9600   3C13 FD AB         swp b
9601   3C15 D8            push b
9602   3C16 07 5C 69      call puts
9603   3C19 51 02 00      add sp, 2
9604   3C1C             ; --- END FUNCTION CALL
9605   3C1C 0A 1F 3C      jmp _if146_exit
9606   3C1F             _if146_exit:
9607   3C1F             ; if (docked) { 
9608   3C1F             _if147_cond:
9609   3C1F                              
9610   3C1F 3B 81 6D      mov d, _docked ; $docked
9611   3C22 32            mov bl, [d]
9612   3C23 A7 00         mov bh, 0
9613   3C25 38 00 00      mov c, 0
9614   3C28 C0 00 00      cmp b, 0
9615   3C2B C6 FB 3D      je _if147_exit
9616   3C2E             _if147_TRUE:
9617   3C2E             ; repair_cost = 0; 
9618   3C2E FA FF FF      lea d, [bp + -1] ; $repair_cost
9619   3C31 DA            push d
9620   3C32                              
9621   3C32 FD 2E 00 00   mov32 cb, $00000000
9621   3C36 00 00 
9622   3C38 E7            pop d
9623   3C39 FD 43         mov [d], b
9624   3C3B             ; for (i = 1; i <= 8; i++) 
9625   3C3B             _for148_init:
9626   3C3B FA FD FF      lea d, [bp + -3] ; $i
9627   3C3E DA            push d
9628   3C3F                              
9629   3C3F FD 2E 01 00   mov32 cb, $00000001
9629   3C43 00 00 
9630   3C45 E7            pop d
9631   3C46 FD 43         mov [d], b
9632   3C48             _for148_cond:
9633   3C48                              
9634   3C48 FA FD FF      lea d, [bp + -3] ; $i
9635   3C4B 2A            mov b, [d]
9636   3C4C 38 00 00      mov c, 0
9637   3C4F             ; --- START RELATIONAL
9638   3C4F D7            push a
9639   3C50 11            mov a, b
9640   3C51 FD 2E 08 00   mov32 cb, $00000008
9640   3C55 00 00 
9641   3C57 B0            cmp a, b
9642   3C58 FD 74         sle ; <= (signed)
9643   3C5A E4            pop a
9644   3C5B             ; --- END RELATIONAL
9645   3C5B C0 00 00      cmp b, 0
9646   3C5E C6 B7 3C      je _for148_exit
9647   3C61             _for148_block:
9648   3C61             ; if (damage[i] < 0) 
9649   3C61             _if149_cond:
9650   3C61                              
9651   3C61 3B 44 6E      mov d, _damage_data ; $damage
9652   3C64 D7            push a
9653   3C65 DA            push d
9654   3C66                              
9655   3C66 FA FD FF      lea d, [bp + -3] ; $i
9656   3C69 2A            mov b, [d]
9657   3C6A 38 00 00      mov c, 0
9658   3C6D E7            pop d
9659   3C6E FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9660   3C72 E4            pop a
9661   3C73 2A            mov b, [d]
9662   3C74 38 00 00      mov c, 0
9663   3C77             ; --- START RELATIONAL
9664   3C77 D7            push a
9665   3C78 11            mov a, b
9666   3C79 FD 2E 00 00   mov32 cb, $00000000
9666   3C7D 00 00 
9667   3C7F B0            cmp a, b
9668   3C80 FD 73         slt ; < (signed)
9669   3C82 E4            pop a
9670   3C83             ; --- END RELATIONAL
9671   3C83 C0 00 00      cmp b, 0
9672   3C86 C6 A4 3C      je _if149_exit
9673   3C89             _if149_TRUE:
9674   3C89             ; repair_cost = repair_cost + 10; 
9675   3C89 FA FF FF      lea d, [bp + -1] ; $repair_cost
9676   3C8C DA            push d
9677   3C8D                              
9678   3C8D FA FF FF      lea d, [bp + -1] ; $repair_cost
9679   3C90 2A            mov b, [d]
9680   3C91 38 00 00      mov c, 0
9681   3C94             ; --- START TERMS
9682   3C94 D7            push a
9683   3C95 11            mov a, b
9684   3C96 FD 2E 0A 00   mov32 cb, $0000000a
9684   3C9A 00 00 
9685   3C9C 56            add b, a
9686   3C9D E4            pop a
9687   3C9E             ; --- END TERMS
9688   3C9E E7            pop d
9689   3C9F FD 43         mov [d], b
9690   3CA1 0A A4 3C      jmp _if149_exit
9691   3CA4             _if149_exit:
9692   3CA4             _for148_update:
9693   3CA4                              
9694   3CA4 FA FD FF      lea d, [bp + -3] ; $i
9695   3CA7 2A            mov b, [d]
9696   3CA8 38 00 00      mov c, 0
9697   3CAB 11            mov a, b
9698   3CAC FD 77         inc b
9699   3CAE FA FD FF      lea d, [bp + -3] ; $i
9700   3CB1 FD 43         mov [d], b
9701   3CB3 27            mov b, a
9702   3CB4 0A 48 3C      jmp _for148_cond
9703   3CB7             _for148_exit:
9704   3CB7             ; if (repair_cost) { 
9705   3CB7             _if150_cond:
9706   3CB7                              
9707   3CB7 FA FF FF      lea d, [bp + -1] ; $repair_cost
9708   3CBA 2A            mov b, [d]
9709   3CBB 38 00 00      mov c, 0
9710   3CBE C0 00 00      cmp b, 0
9711   3CC1 C6 F8 3D      je _if150_exit
9712   3CC4             _if150_TRUE:
9713   3CC4             ; repair_cost = repair_cost + d4; 
9714   3CC4 FA FF FF      lea d, [bp + -1] ; $repair_cost
9715   3CC7 DA            push d
9716   3CC8                              
9717   3CC8 FA FF FF      lea d, [bp + -1] ; $repair_cost
9718   3CCB 2A            mov b, [d]
9719   3CCC 38 00 00      mov c, 0
9720   3CCF             ; --- START TERMS
9721   3CCF D7            push a
9722   3CD0 11            mov a, b
9723   3CD1 3B 56 6E      mov d, _d4 ; $d4
9724   3CD4 2A            mov b, [d]
9725   3CD5 38 00 00      mov c, 0
9726   3CD8 56            add b, a
9727   3CD9 E4            pop a
9728   3CDA             ; --- END TERMS
9729   3CDA E7            pop d
9730   3CDB FD 43         mov [d], b
9731   3CDD             ; if (repair_cost >= 100) 
9732   3CDD             _if151_cond:
9733   3CDD                              
9734   3CDD FA FF FF      lea d, [bp + -1] ; $repair_cost
9735   3CE0 2A            mov b, [d]
9736   3CE1 38 00 00      mov c, 0
9737   3CE4             ; --- START RELATIONAL
9738   3CE4 D7            push a
9739   3CE5 11            mov a, b
9740   3CE6 FD 2E 64 00   mov32 cb, $00000064
9740   3CEA 00 00 
9741   3CEC B0            cmp a, b
9742   3CED FD 80         sge ; >=
9743   3CEF E4            pop a
9744   3CF0             ; --- END RELATIONAL
9745   3CF0 C0 00 00      cmp b, 0
9746   3CF3 C6 06 3D      je _if151_exit
9747   3CF6             _if151_TRUE:
9748   3CF6             ; repair_cost = 90;	/* 0.9 */ 
9749   3CF6 FA FF FF      lea d, [bp + -1] ; $repair_cost
9750   3CF9 DA            push d
9751   3CFA                              
9752   3CFA FD 2E 5A 00   mov32 cb, $0000005a
9752   3CFE 00 00 
9753   3D00 E7            pop d
9754   3D01 FD 43         mov [d], b
9755   3D03 0A 06 3D      jmp _if151_exit
9756   3D06             _if151_exit:
9757   3D06             ; printf("\nTechnicians standing by to effect repairs to your ship;\nEstimated time to repair: %s stardates.\n Will you authorize the repair order (y/N)? ", print100(repair_cost)); 
9758   3D06                              
9759   3D06             ; --- START FUNCTION CALL
9760   3D06                              
9761   3D06             ; --- START FUNCTION CALL
9762   3D06                              
9763   3D06 FA FF FF      lea d, [bp + -1] ; $repair_cost
9764   3D09 2A            mov b, [d]
9765   3D0A 38 00 00      mov c, 0
9766   3D0D FD AB         swp b
9767   3D0F D8            push b
9768   3D10 07 06 09      call print100
9769   3D13 51 02 00      add sp, 2
9770   3D16             ; --- END FUNCTION CALL
9771   3D16 FD AB         swp b
9772   3D18 D8            push b
9773   3D19                              
9774   3D19 26 C4 7A      mov b, _s114 ; "\nTechnicians standing by to effect repairs to your ship;\nEstimated time to repair: %s stardates.\n Will you authorize the repair order (y/N)? "
9775   3D1C FD AB         swp b
9776   3D1E D8            push b
9777   3D1F 07 4F 60      call printf
9778   3D22 51 04 00      add sp, 4
9779   3D25             ; --- END FUNCTION CALL
9780   3D25             ; if (yesno()) { 
9781   3D25             _if152_cond:
9782   3D25                              
9783   3D25             ; --- START FUNCTION CALL
9784   3D25 07 25 06      call yesno
9785   3D28 C0 00 00      cmp b, 0
9786   3D2B C6 F3 3D      je _if152_exit
9787   3D2E             _if152_TRUE:
9788   3D2E             ; for (i = 1; i <= 8; i++) 
9789   3D2E             _for153_init:
9790   3D2E FA FD FF      lea d, [bp + -3] ; $i
9791   3D31 DA            push d
9792   3D32                              
9793   3D32 FD 2E 01 00   mov32 cb, $00000001
9793   3D36 00 00 
9794   3D38 E7            pop d
9795   3D39 FD 43         mov [d], b
9796   3D3B             _for153_cond:
9797   3D3B                              
9798   3D3B FA FD FF      lea d, [bp + -3] ; $i
9799   3D3E 2A            mov b, [d]
9800   3D3F 38 00 00      mov c, 0
9801   3D42             ; --- START RELATIONAL
9802   3D42 D7            push a
9803   3D43 11            mov a, b
9804   3D44 FD 2E 08 00   mov32 cb, $00000008
9804   3D48 00 00 
9805   3D4A B0            cmp a, b
9806   3D4B FD 74         sle ; <= (signed)
9807   3D4D E4            pop a
9808   3D4E             ; --- END RELATIONAL
9809   3D4E C0 00 00      cmp b, 0
9810   3D51 C6 AE 3D      je _for153_exit
9811   3D54             _for153_block:
9812   3D54             ; if (damage[i] < 0) 
9813   3D54             _if154_cond:
9814   3D54                              
9815   3D54 3B 44 6E      mov d, _damage_data ; $damage
9816   3D57 D7            push a
9817   3D58 DA            push d
9818   3D59                              
9819   3D59 FA FD FF      lea d, [bp + -3] ; $i
9820   3D5C 2A            mov b, [d]
9821   3D5D 38 00 00      mov c, 0
9822   3D60 E7            pop d
9823   3D61 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9824   3D65 E4            pop a
9825   3D66 2A            mov b, [d]
9826   3D67 38 00 00      mov c, 0
9827   3D6A             ; --- START RELATIONAL
9828   3D6A D7            push a
9829   3D6B 11            mov a, b
9830   3D6C FD 2E 00 00   mov32 cb, $00000000
9830   3D70 00 00 
9831   3D72 B0            cmp a, b
9832   3D73 FD 73         slt ; < (signed)
9833   3D75 E4            pop a
9834   3D76             ; --- END RELATIONAL
9835   3D76 C0 00 00      cmp b, 0
9836   3D79 C6 9B 3D      je _if154_exit
9837   3D7C             _if154_TRUE:
9838   3D7C             ; damage[i] = 0; 
9839   3D7C 3B 44 6E      mov d, _damage_data ; $damage
9840   3D7F D7            push a
9841   3D80 DA            push d
9842   3D81                              
9843   3D81 FA FD FF      lea d, [bp + -3] ; $i
9844   3D84 2A            mov b, [d]
9845   3D85 38 00 00      mov c, 0
9846   3D88 E7            pop d
9847   3D89 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9848   3D8D E4            pop a
9849   3D8E DA            push d
9850   3D8F                              
9851   3D8F FD 2E 00 00   mov32 cb, $00000000
9851   3D93 00 00 
9852   3D95 E7            pop d
9853   3D96 FD 43         mov [d], b
9854   3D98 0A 9B 3D      jmp _if154_exit
9855   3D9B             _if154_exit:
9856   3D9B             _for153_update:
9857   3D9B                              
9858   3D9B FA FD FF      lea d, [bp + -3] ; $i
9859   3D9E 2A            mov b, [d]
9860   3D9F 38 00 00      mov c, 0
9861   3DA2 11            mov a, b
9862   3DA3 FD 77         inc b
9863   3DA5 FA FD FF      lea d, [bp + -3] ; $i
9864   3DA8 FD 43         mov [d], b
9865   3DAA 27            mov b, a
9866   3DAB 0A 3B 3D      jmp _for153_cond
9867   3DAE             _for153_exit:
9868   3DAE             ; stardate = stardate + (repair_cost + 5)/10 + 1; 
9869   3DAE 3B 5C 6E      mov d, _stardate ; $stardate
9870   3DB1 DA            push d
9871   3DB2                              
9872   3DB2 3B 5C 6E      mov d, _stardate ; $stardate
9873   3DB5 2A            mov b, [d]
9874   3DB6 38 00 00      mov c, 0
9875   3DB9             ; --- START TERMS
9876   3DB9 D7            push a
9877   3DBA 11            mov a, b
9878   3DBB                              
9879   3DBB FA FF FF      lea d, [bp + -1] ; $repair_cost
9880   3DBE 2A            mov b, [d]
9881   3DBF 38 00 00      mov c, 0
9882   3DC2             ; --- START TERMS
9883   3DC2 D7            push a
9884   3DC3 11            mov a, b
9885   3DC4 FD 2E 05 00   mov32 cb, $00000005
9885   3DC8 00 00 
9886   3DCA 56            add b, a
9887   3DCB E4            pop a
9888   3DCC             ; --- END TERMS
9889   3DCC             ; --- START FACTORS
9890   3DCC D7            push a
9891   3DCD FD D8         push g
9892   3DCF 11            mov a, b
9893   3DD0 FD 7A         mov g, c
9894   3DD2 FD 2E 0A 00   mov32 cb, $0000000a
9894   3DD6 00 00 
9895   3DD8 FD D8         push g ; save 'g' as the div instruction uses it
9896   3DDA AE            div a, b ; /, a: quotient, b: remainder
9897   3DDB FD F1         pop g
9898   3DDD FD 38         mov c, g
9899   3DDF 27            mov b, a
9900   3DE0 FD F1         pop g
9901   3DE2 E4            pop a
9902   3DE3             ; --- END FACTORS
9903   3DE3 56            add b, a
9904   3DE4 11            mov a, b
9905   3DE5 FD 2E 01 00   mov32 cb, $00000001
9905   3DE9 00 00 
9906   3DEB 56            add b, a
9907   3DEC E4            pop a
9908   3DED             ; --- END TERMS
9909   3DED E7            pop d
9910   3DEE FD 43         mov [d], b
9911   3DF0 0A F3 3D      jmp _if152_exit
9912   3DF3             _if152_exit:
9913   3DF3             ; return; 
9914   3DF3 F9            leave
9915   3DF4 09            ret
9916   3DF5 0A F8 3D      jmp _if150_exit
9917   3DF8             _if150_exit:
9918   3DF8 0A FB 3D      jmp _if147_exit
9919   3DFB             _if147_exit:
9920   3DFB             ; if (damage[6] < 0) 
9921   3DFB             _if156_cond:
9922   3DFB                              
9923   3DFB 3B 44 6E      mov d, _damage_data ; $damage
9924   3DFE D7            push a
9925   3DFF DA            push d
9926   3E00                              
9927   3E00 FD 2E 06 00   mov32 cb, $00000006
9927   3E04 00 00 
9928   3E06 E7            pop d
9929   3E07 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9930   3E0B E4            pop a
9931   3E0C 2A            mov b, [d]
9932   3E0D 38 00 00      mov c, 0
9933   3E10             ; --- START RELATIONAL
9934   3E10 D7            push a
9935   3E11 11            mov a, b
9936   3E12 FD 2E 00 00   mov32 cb, $00000000
9936   3E16 00 00 
9937   3E18 B0            cmp a, b
9938   3E19 FD 73         slt ; < (signed)
9939   3E1B E4            pop a
9940   3E1C             ; --- END RELATIONAL
9941   3E1C C0 00 00      cmp b, 0
9942   3E1F C6 27 3E      je _if156_exit
9943   3E22             _if156_TRUE:
9944   3E22             ; return; 
9945   3E22 F9            leave
9946   3E23 09            ret
9947   3E24 0A 27 3E      jmp _if156_exit
9948   3E27             _if156_exit:
9949   3E27             ; puts("Device            State of Repair"); 
9950   3E27                              
9951   3E27             ; --- START FUNCTION CALL
9952   3E27                              
9953   3E27 26 52 7B      mov b, _s115 ; "Device            State of Repair"
9954   3E2A FD AB         swp b
9955   3E2C D8            push b
9956   3E2D 07 5C 69      call puts
9957   3E30 51 02 00      add sp, 2
9958   3E33             ; --- END FUNCTION CALL
9959   3E33             ; for (i = 1; i <= 8; i++) 
9960   3E33             _for157_init:
9961   3E33 FA FD FF      lea d, [bp + -3] ; $i
9962   3E36 DA            push d
9963   3E37                              
9964   3E37 FD 2E 01 00   mov32 cb, $00000001
9964   3E3B 00 00 
9965   3E3D E7            pop d
9966   3E3E FD 43         mov [d], b
9967   3E40             _for157_cond:
9968   3E40                              
9969   3E40 FA FD FF      lea d, [bp + -3] ; $i
9970   3E43 2A            mov b, [d]
9971   3E44 38 00 00      mov c, 0
9972   3E47             ; --- START RELATIONAL
9973   3E47 D7            push a
9974   3E48 11            mov a, b
9975   3E49 FD 2E 08 00   mov32 cb, $00000008
9975   3E4D 00 00 
9976   3E4F B0            cmp a, b
9977   3E50 FD 74         sle ; <= (signed)
9978   3E52 E4            pop a
9979   3E53             ; --- END RELATIONAL
9980   3E53 C0 00 00      cmp b, 0
9981   3E56 C6 AD 3E      je _for157_exit
9982   3E59             _for157_block:
9983   3E59             ; printf("%-25s%6s\n", get_device_name(i), print100(damage[i])); 
9984   3E59                              
9985   3E59             ; --- START FUNCTION CALL
9986   3E59                              
9987   3E59             ; --- START FUNCTION CALL
9988   3E59                              
9989   3E59 3B 44 6E      mov d, _damage_data ; $damage
9990   3E5C D7            push a
9991   3E5D DA            push d
9992   3E5E                              
9993   3E5E FA FD FF      lea d, [bp + -3] ; $i
9994   3E61 2A            mov b, [d]
9995   3E62 38 00 00      mov c, 0
9996   3E65 E7            pop d
9997   3E66 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
9998   3E6A E4            pop a
9999   3E6B 2A            mov b, [d]
10000  3E6C 38 00 00      mov c, 0
10001  3E6F FD AB         swp b
10002  3E71 D8            push b
10003  3E72 07 06 09      call print100
10004  3E75 51 02 00      add sp, 2
10005  3E78             ; --- END FUNCTION CALL
10006  3E78 FD AB         swp b
10007  3E7A D8            push b
10008  3E7B                              
10009  3E7B             ; --- START FUNCTION CALL
10010  3E7B                              
10011  3E7B FA FD FF      lea d, [bp + -3] ; $i
10012  3E7E 2A            mov b, [d]
10013  3E7F 38 00 00      mov c, 0
10014  3E82 FD AB         swp b
10015  3E84 D8            push b
10016  3E85 07 40 59      call get_device_name
10017  3E88 51 02 00      add sp, 2
10018  3E8B             ; --- END FUNCTION CALL
10019  3E8B FD AB         swp b
10020  3E8D D8            push b
10021  3E8E                              
10022  3E8E 26 74 7B      mov b, _s116 ; "%-25s%6s\n"
10023  3E91 FD AB         swp b
10024  3E93 D8            push b
10025  3E94 07 4F 60      call printf
10026  3E97 51 06 00      add sp, 6
10027  3E9A             ; --- END FUNCTION CALL
10028  3E9A             _for157_update:
10029  3E9A                              
10030  3E9A FA FD FF      lea d, [bp + -3] ; $i
10031  3E9D 2A            mov b, [d]
10032  3E9E 38 00 00      mov c, 0
10033  3EA1 11            mov a, b
10034  3EA2 FD 77         inc b
10035  3EA4 FA FD FF      lea d, [bp + -3] ; $i
10036  3EA7 FD 43         mov [d], b
10037  3EA9 27            mov b, a
10038  3EAA 0A 40 3E      jmp _for157_cond
10039  3EAD             _for157_exit:
10040  3EAD             ; printf("\n"); 
10041  3EAD                              
10042  3EAD             ; --- START FUNCTION CALL
10043  3EAD                              
10044  3EAD 26 7E 7B      mov b, _s117 ; "\n"
10045  3EB0 FD AB         swp b
10046  3EB2 D8            push b
10047  3EB3 07 4F 60      call printf
10048  3EB6 51 02 00      add sp, 2
10049  3EB9             ; --- END FUNCTION CALL
10050  3EB9 F9            leave
10051  3EBA 09            ret
10052  3EBB             
10053  3EBB             shield_control:
10054  3EBB F8 00 00      enter 0 ; (push bp; mov bp, sp)
10055  3EBE             ; int i; 
10056  3EBE 52 02 00      sub sp, 2
10057  3EC1             ; if (inoperable(7)) 
10058  3EC1             _if158_cond:
10059  3EC1                              
10060  3EC1             ; --- START FUNCTION CALL
10061  3EC1                              
10062  3EC1 FD 2E 07 00   mov32 cb, $00000007
10062  3EC5 00 00 
10063  3EC7 DD            push bl
10064  3EC8 07 70 09      call inoperable
10065  3ECB 51 01 00      add sp, 1
10066  3ECE             ; --- END FUNCTION CALL
10067  3ECE C0 00 00      cmp b, 0
10068  3ED1 C6 D9 3E      je _if158_exit
10069  3ED4             _if158_TRUE:
10070  3ED4             ; return; 
10071  3ED4 F9            leave
10072  3ED5 09            ret
10073  3ED6 0A D9 3E      jmp _if158_exit
10074  3ED9             _if158_exit:
10075  3ED9             ; printf("Energy available = %d\n\n Input number of units to shields: ", energy + shield); 
10076  3ED9                              
10077  3ED9             ; --- START FUNCTION CALL
10078  3ED9                              
10079  3ED9 3B 82 6D      mov d, _energy ; $energy
10080  3EDC 2A            mov b, [d]
10081  3EDD 38 00 00      mov c, 0
10082  3EE0             ; --- START TERMS
10083  3EE0 D7            push a
10084  3EE1 11            mov a, b
10085  3EE2 3B 3D 6E      mov d, _shield ; $shield
10086  3EE5 2A            mov b, [d]
10087  3EE6 38 00 00      mov c, 0
10088  3EE9 56            add b, a
10089  3EEA E4            pop a
10090  3EEB             ; --- END TERMS
10091  3EEB FD AB         swp b
10092  3EED D8            push b
10093  3EEE                              
10094  3EEE 26 80 7B      mov b, _s118 ; "Energy available = %d\n\n Input number of units to shields: "
10095  3EF1 FD AB         swp b
10096  3EF3 D8            push b
10097  3EF4 07 4F 60      call printf
10098  3EF7 51 04 00      add sp, 4
10099  3EFA             ; --- END FUNCTION CALL
10100  3EFA             ; i = input_int(); 
10101  3EFA FA FF FF      lea d, [bp + -1] ; $i
10102  3EFD DA            push d
10103  3EFE                              
10104  3EFE             ; --- START FUNCTION CALL
10105  3EFE 07 B1 08      call input_int
10106  3F01 E7            pop d
10107  3F02 FD 43         mov [d], b
10108  3F04             ; if (i < 0 || shield == i) { 
10109  3F04             _if159_cond:
10110  3F04                              
10111  3F04 FA FF FF      lea d, [bp + -1] ; $i
10112  3F07 2A            mov b, [d]
10113  3F08 38 00 00      mov c, 0
10114  3F0B             ; --- START RELATIONAL
10115  3F0B D7            push a
10116  3F0C 11            mov a, b
10117  3F0D FD 2E 00 00   mov32 cb, $00000000
10117  3F11 00 00 
10118  3F13 B0            cmp a, b
10119  3F14 FD 73         slt ; < (signed)
10120  3F16 E4            pop a
10121  3F17             ; --- END RELATIONAL
10122  3F17             ; --- START LOGICAL OR
10123  3F17 D7            push a
10124  3F18 11            mov a, b
10125  3F19 3B 3D 6E      mov d, _shield ; $shield
10126  3F1C 2A            mov b, [d]
10127  3F1D 38 00 00      mov c, 0
10128  3F20             ; --- START RELATIONAL
10129  3F20 D7            push a
10130  3F21 11            mov a, b
10131  3F22 FA FF FF      lea d, [bp + -1] ; $i
10132  3F25 2A            mov b, [d]
10133  3F26 38 00 00      mov c, 0
10134  3F29 B0            cmp a, b
10135  3F2A FD 71         seq ; ==
10136  3F2C E4            pop a
10137  3F2D             ; --- END RELATIONAL
10138  3F2D FD A8         sor a, b ; ||
10139  3F2F E4            pop a
10140  3F30             ; --- END LOGICAL OR
10141  3F30 C0 00 00      cmp b, 0
10142  3F33 C6 47 3F      je _if159_exit
10143  3F36             _if159_TRUE:
10144  3F36             ; puts("<Shields Unchanged>\n"); 
10145  3F36                              
10146  3F36             ; --- START FUNCTION CALL
10147  3F36                              
10148  3F36 26 BB 7B      mov b, _s119 ; "<Shields Unchanged>\n"
10149  3F39 FD AB         swp b
10150  3F3B D8            push b
10151  3F3C 07 5C 69      call puts
10152  3F3F 51 02 00      add sp, 2
10153  3F42             ; --- END FUNCTION CALL
10154  3F42             ; return; 
10155  3F42 F9            leave
10156  3F43 09            ret
10157  3F44 0A 47 3F      jmp _if159_exit
10158  3F47             _if159_exit:
10159  3F47             ; if (i >= energy + shield) { 
10160  3F47             _if160_cond:
10161  3F47                              
10162  3F47 FA FF FF      lea d, [bp + -1] ; $i
10163  3F4A 2A            mov b, [d]
10164  3F4B 38 00 00      mov c, 0
10165  3F4E             ; --- START RELATIONAL
10166  3F4E D7            push a
10167  3F4F 11            mov a, b
10168  3F50 3B 82 6D      mov d, _energy ; $energy
10169  3F53 2A            mov b, [d]
10170  3F54 38 00 00      mov c, 0
10171  3F57             ; --- START TERMS
10172  3F57 D7            push a
10173  3F58 11            mov a, b
10174  3F59 3B 3D 6E      mov d, _shield ; $shield
10175  3F5C 2A            mov b, [d]
10176  3F5D 38 00 00      mov c, 0
10177  3F60 56            add b, a
10178  3F61 E4            pop a
10179  3F62             ; --- END TERMS
10180  3F62 B0            cmp a, b
10181  3F63 FD 80         sge ; >=
10182  3F65 E4            pop a
10183  3F66             ; --- END RELATIONAL
10184  3F66 C0 00 00      cmp b, 0
10185  3F69 C6 7B 3F      je _if160_exit
10186  3F6C             _if160_TRUE:
10187  3F6C             ; puts("Shield Control Reports:\n  'This is not the Federation Treasury.'"); 
10188  3F6C                              
10189  3F6C             ; --- START FUNCTION CALL
10190  3F6C                              
10191  3F6C 26 D0 7B      mov b, _s120 ; "Shield Control Reports:\n  'This is not the Federation Treasury.'"
10192  3F6F FD AB         swp b
10193  3F71 D8            push b
10194  3F72 07 5C 69      call puts
10195  3F75 51 02 00      add sp, 2
10196  3F78             ; --- END FUNCTION CALL
10197  3F78 0A 7B 3F      jmp _if160_exit
10198  3F7B             _if160_exit:
10199  3F7B             ; energy = energy + shield - i; 
10200  3F7B 3B 82 6D      mov d, _energy ; $energy
10201  3F7E DA            push d
10202  3F7F                              
10203  3F7F 3B 82 6D      mov d, _energy ; $energy
10204  3F82 2A            mov b, [d]
10205  3F83 38 00 00      mov c, 0
10206  3F86             ; --- START TERMS
10207  3F86 D7            push a
10208  3F87 11            mov a, b
10209  3F88 3B 3D 6E      mov d, _shield ; $shield
10210  3F8B 2A            mov b, [d]
10211  3F8C 38 00 00      mov c, 0
10212  3F8F 56            add b, a
10213  3F90 11            mov a, b
10214  3F91 FA FF FF      lea d, [bp + -1] ; $i
10215  3F94 2A            mov b, [d]
10216  3F95 38 00 00      mov c, 0
10217  3F98 60            sub a, b
10218  3F99 27            mov b, a
10219  3F9A E4            pop a
10220  3F9B             ; --- END TERMS
10221  3F9B E7            pop d
10222  3F9C FD 43         mov [d], b
10223  3F9E             ; shield = i; 
10224  3F9E 3B 3D 6E      mov d, _shield ; $shield
10225  3FA1 DA            push d
10226  3FA2                              
10227  3FA2 FA FF FF      lea d, [bp + -1] ; $i
10228  3FA5 2A            mov b, [d]
10229  3FA6 38 00 00      mov c, 0
10230  3FA9 E7            pop d
10231  3FAA FD 43         mov [d], b
10232  3FAC             ; printf("Deflector Control Room report:\n  'Shields now at %d units per your command.'\n\n", shield); 
10233  3FAC                              
10234  3FAC             ; --- START FUNCTION CALL
10235  3FAC                              
10236  3FAC 3B 3D 6E      mov d, _shield ; $shield
10237  3FAF 2A            mov b, [d]
10238  3FB0 38 00 00      mov c, 0
10239  3FB3 FD AB         swp b
10240  3FB5 D8            push b
10241  3FB6                              
10242  3FB6 26 11 7C      mov b, _s121 ; "Deflector Control Room report:\n  'Shields now at %d units per your command.'\n\n"
10243  3FB9 FD AB         swp b
10244  3FBB D8            push b
10245  3FBC 07 4F 60      call printf
10246  3FBF 51 04 00      add sp, 4
10247  3FC2             ; --- END FUNCTION CALL
10248  3FC2 F9            leave
10249  3FC3 09            ret
10250  3FC4             
10251  3FC4             library_computer:
10252  3FC4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10253  3FC7             ; if (inoperable(8)) 
10254  3FC7             _if161_cond:
10255  3FC7                              
10256  3FC7             ; --- START FUNCTION CALL
10257  3FC7                              
10258  3FC7 FD 2E 08 00   mov32 cb, $00000008
10258  3FCB 00 00 
10259  3FCD DD            push bl
10260  3FCE 07 70 09      call inoperable
10261  3FD1 51 01 00      add sp, 1
10262  3FD4             ; --- END FUNCTION CALL
10263  3FD4 C0 00 00      cmp b, 0
10264  3FD7 C6 DF 3F      je _if161_exit
10265  3FDA             _if161_TRUE:
10266  3FDA             ; return; 
10267  3FDA F9            leave
10268  3FDB 09            ret
10269  3FDC 0A DF 3F      jmp _if161_exit
10270  3FDF             _if161_exit:
10271  3FDF             ; puts("Computer active and awating command: "); 
10272  3FDF                              
10273  3FDF             ; --- START FUNCTION CALL
10274  3FDF                              
10275  3FDF 26 60 7C      mov b, _s122 ; "Computer active and awating command: "
10276  3FE2 FD AB         swp b
10277  3FE4 D8            push b
10278  3FE5 07 5C 69      call puts
10279  3FE8 51 02 00      add sp, 2
10280  3FEB             ; --- END FUNCTION CALL
10281  3FEB             ; switch(input_int()) { 
10282  3FEB             _switch162_expr:
10283  3FEB                              
10284  3FEB             ; --- START FUNCTION CALL
10285  3FEB 07 B1 08      call input_int
10286  3FEE             _switch162_comparisons:
10287  3FEE C0 FF FF      cmp b, -1
10288  3FF1 C6 1E 40      je _switch162_case0
10289  3FF4 C0 00 00      cmp b, 0
10290  3FF7 C6 21 40      je _switch162_case1
10291  3FFA C0 01 00      cmp b, 1
10292  3FFD C6 27 40      je _switch162_case2
10293  4000 C0 02 00      cmp b, 2
10294  4003 C6 2D 40      je _switch162_case3
10295  4006 C0 03 00      cmp b, 3
10296  4009 C6 33 40      je _switch162_case4
10297  400C C0 04 00      cmp b, 4
10298  400F C6 39 40      je _switch162_case5
10299  4012 C0 05 00      cmp b, 5
10300  4015 C6 3F 40      je _switch162_case6
10301  4018 0A 45 40      jmp _switch162_default
10302  401B 0A 99 40      jmp _switch162_exit
10303  401E             _switch162_case0:
10304  401E             ; break; 
10305  401E 0A 99 40      jmp _switch162_exit ; case break
10306  4021             _switch162_case1:
10307  4021             ; galactic_record(); 
10308  4021                              
10309  4021             ; --- START FUNCTION CALL
10310  4021 07 9B 40      call galactic_record
10311  4024             ; break; 
10312  4024 0A 99 40      jmp _switch162_exit ; case break
10313  4027             _switch162_case2:
10314  4027             ; status_report(); 
10315  4027                              
10316  4027             ; --- START FUNCTION CALL
10317  4027 07 02 42      call status_report
10318  402A             ; break; 
10319  402A 0A 99 40      jmp _switch162_exit ; case break
10320  402D             _switch162_case3:
10321  402D             ; torpedo_data(); 
10322  402D                              
10323  402D             ; --- START FUNCTION CALL
10324  402D 07 6A 43      call torpedo_data
10325  4030             ; break; 
10326  4030 0A 99 40      jmp _switch162_exit ; case break
10327  4033             _switch162_case4:
10328  4033             ; nav_data(); 
10329  4033                              
10330  4033             ; --- START FUNCTION CALL
10331  4033 07 AA 44      call nav_data
10332  4036             ; break; 
10333  4036 0A 99 40      jmp _switch162_exit ; case break
10334  4039             _switch162_case5:
10335  4039             ; dirdist_calc(); 
10336  4039                              
10337  4039             ; --- START FUNCTION CALL
10338  4039 07 1F 45      call dirdist_calc
10339  403C             ; break; 
10340  403C 0A 99 40      jmp _switch162_exit ; case break
10341  403F             _switch162_case6:
10342  403F             ; galaxy_map(); 
10343  403F                              
10344  403F             ; --- START FUNCTION CALL
10345  403F 07 EC 46      call galaxy_map
10346  4042             ; break; 
10347  4042 0A 99 40      jmp _switch162_exit ; case break
10348  4045             _switch162_default:
10349  4045             ; puts("Functions available from Library-Computer:\n\n"); 
10350  4045                              
10351  4045             ; --- START FUNCTION CALL
10352  4045                              
10353  4045 26 86 7C      mov b, _s123 ; "Functions available from Library-Computer:\n\n"
10354  4048 FD AB         swp b
10355  404A D8            push b
10356  404B 07 5C 69      call puts
10357  404E 51 02 00      add sp, 2
10358  4051             ; --- END FUNCTION CALL
10359  4051             ; puts("   0 = Cumulative Galactic Record\n"); 
10360  4051                              
10361  4051             ; --- START FUNCTION CALL
10362  4051                              
10363  4051 26 B3 7C      mov b, _s124 ; "   0 = Cumulative Galactic Record\n"
10364  4054 FD AB         swp b
10365  4056 D8            push b
10366  4057 07 5C 69      call puts
10367  405A 51 02 00      add sp, 2
10368  405D             ; --- END FUNCTION CALL
10369  405D             ; puts("   1 = Status Report\n"); 
10370  405D                              
10371  405D             ; --- START FUNCTION CALL
10372  405D                              
10373  405D 26 D6 7C      mov b, _s125 ; "   1 = Status Report\n"
10374  4060 FD AB         swp b
10375  4062 D8            push b
10376  4063 07 5C 69      call puts
10377  4066 51 02 00      add sp, 2
10378  4069             ; --- END FUNCTION CALL
10379  4069             ; puts("   2 = Photon Torpedo Data\n"); 
10380  4069                              
10381  4069             ; --- START FUNCTION CALL
10382  4069                              
10383  4069 26 EC 7C      mov b, _s126 ; "   2 = Photon Torpedo Data\n"
10384  406C FD AB         swp b
10385  406E D8            push b
10386  406F 07 5C 69      call puts
10387  4072 51 02 00      add sp, 2
10388  4075             ; --- END FUNCTION CALL
10389  4075             ; puts("   3 = Starbase Nav Data\n"); 
10390  4075                              
10391  4075             ; --- START FUNCTION CALL
10392  4075                              
10393  4075 26 08 7D      mov b, _s127 ; "   3 = Starbase Nav Data\n"
10394  4078 FD AB         swp b
10395  407A D8            push b
10396  407B 07 5C 69      call puts
10397  407E 51 02 00      add sp, 2
10398  4081             ; --- END FUNCTION CALL
10399  4081             ; puts("   4 = Direction/Distance Calculator\n"); 
10400  4081                              
10401  4081             ; --- START FUNCTION CALL
10402  4081                              
10403  4081 26 22 7D      mov b, _s128 ; "   4 = Direction/Distance Calculator\n"
10404  4084 FD AB         swp b
10405  4086 D8            push b
10406  4087 07 5C 69      call puts
10407  408A 51 02 00      add sp, 2
10408  408D             ; --- END FUNCTION CALL
10409  408D             ; puts("   5 = Galaxy 'Region Name' Map\n"); 
10410  408D                              
10411  408D             ; --- START FUNCTION CALL
10412  408D                              
10413  408D 26 48 7D      mov b, _s129 ; "   5 = Galaxy 'Region Name' Map\n"
10414  4090 FD AB         swp b
10415  4092 D8            push b
10416  4093 07 5C 69      call puts
10417  4096 51 02 00      add sp, 2
10418  4099             ; --- END FUNCTION CALL
10419  4099             _switch162_exit:
10420  4099 F9            leave
10421  409A 09            ret
10422  409B             
10423  409B             galactic_record:
10424  409B F8 00 00      enter 0 ; (push bp; mov bp, sp)
10425  409E             ; int i, j; 
10426  409E 52 02 00      sub sp, 2
10427  40A1 52 02 00      sub sp, 2
10428  40A4             ; printf("\n     Computer Record of Galaxy for Quadrant %d,%d\n\n", quad_y, quad_x); 
10429  40A4                              
10430  40A4             ; --- START FUNCTION CALL
10431  40A4                              
10432  40A4 3B 3B 6E      mov d, _quad_x ; $quad_x
10433  40A7 2A            mov b, [d]
10434  40A8 38 00 00      mov c, 0
10435  40AB FD AB         swp b
10436  40AD D8            push b
10437  40AE                              
10438  40AE 3B 39 6E      mov d, _quad_y ; $quad_y
10439  40B1 2A            mov b, [d]
10440  40B2 38 00 00      mov c, 0
10441  40B5 FD AB         swp b
10442  40B7 D8            push b
10443  40B8                              
10444  40B8 26 69 7D      mov b, _s130 ; "\n     Computer Record of Galaxy for Quadrant %d,%d\n\n"
10445  40BB FD AB         swp b
10446  40BD D8            push b
10447  40BE 07 4F 60      call printf
10448  40C1 51 06 00      add sp, 6
10449  40C4             ; --- END FUNCTION CALL
10450  40C4             ; puts("     1     2     3     4     5     6     7     8"); 
10451  40C4                              
10452  40C4             ; --- START FUNCTION CALL
10453  40C4                              
10454  40C4 26 9E 7D      mov b, _s131 ; "     1     2     3     4     5     6     7     8"
10455  40C7 FD AB         swp b
10456  40C9 D8            push b
10457  40CA 07 5C 69      call puts
10458  40CD 51 02 00      add sp, 2
10459  40D0             ; --- END FUNCTION CALL
10460  40D0             ; for (i = 1; i <= 8; i++) { 
10461  40D0             _for163_init:
10462  40D0 FA FF FF      lea d, [bp + -1] ; $i
10463  40D3 DA            push d
10464  40D4                              
10465  40D4 FD 2E 01 00   mov32 cb, $00000001
10465  40D8 00 00 
10466  40DA E7            pop d
10467  40DB FD 43         mov [d], b
10468  40DD             _for163_cond:
10469  40DD                              
10470  40DD FA FF FF      lea d, [bp + -1] ; $i
10471  40E0 2A            mov b, [d]
10472  40E1 38 00 00      mov c, 0
10473  40E4             ; --- START RELATIONAL
10474  40E4 D7            push a
10475  40E5 11            mov a, b
10476  40E6 FD 2E 08 00   mov32 cb, $00000008
10476  40EA 00 00 
10477  40EC B0            cmp a, b
10478  40ED FD 74         sle ; <= (signed)
10479  40EF E4            pop a
10480  40F0             ; --- END RELATIONAL
10481  40F0 C0 00 00      cmp b, 0
10482  40F3 C6 EA 41      je _for163_exit
10483  40F6             _for163_block:
10484  40F6             ; printf("%s%d", gr_1, i); 
10485  40F6                              
10486  40F6             ; --- START FUNCTION CALL
10487  40F6                              
10488  40F6 FA FF FF      lea d, [bp + -1] ; $i
10489  40F9 2A            mov b, [d]
10490  40FA 38 00 00      mov c, 0
10491  40FD FD AB         swp b
10492  40FF D8            push b
10493  4100                              
10494  4100 3B E2 6F      mov d, _gr_1 ; $gr_1
10495  4103 2A            mov b, [d]
10496  4104 38 00 00      mov c, 0
10497  4107 FD AB         swp b
10498  4109 D8            push b
10499  410A                              
10500  410A 26 CF 7D      mov b, _s132 ; "%s%d"
10501  410D FD AB         swp b
10502  410F D8            push b
10503  4110 07 4F 60      call printf
10504  4113 51 06 00      add sp, 6
10505  4116             ; --- END FUNCTION CALL
10506  4116             ; for (j = 1; j <= 8; j++) { 
10507  4116             _for164_init:
10508  4116 FA FD FF      lea d, [bp + -3] ; $j
10509  4119 DA            push d
10510  411A                              
10511  411A FD 2E 01 00   mov32 cb, $00000001
10511  411E 00 00 
10512  4120 E7            pop d
10513  4121 FD 43         mov [d], b
10514  4123             _for164_cond:
10515  4123                              
10516  4123 FA FD FF      lea d, [bp + -3] ; $j
10517  4126 2A            mov b, [d]
10518  4127 38 00 00      mov c, 0
10519  412A             ; --- START RELATIONAL
10520  412A D7            push a
10521  412B 11            mov a, b
10522  412C FD 2E 08 00   mov32 cb, $00000008
10522  4130 00 00 
10523  4132 B0            cmp a, b
10524  4133 FD 74         sle ; <= (signed)
10525  4135 E4            pop a
10526  4136             ; --- END RELATIONAL
10527  4136 C0 00 00      cmp b, 0
10528  4139 C6 CA 41      je _for164_exit
10529  413C             _for164_block:
10530  413C             ; printf("   "); 
10531  413C                              
10532  413C             ; --- START FUNCTION CALL
10533  413C                              
10534  413C 26 55 71      mov b, _s25 ; "   "
10535  413F FD AB         swp b
10536  4141 D8            push b
10537  4142 07 4F 60      call printf
10538  4145 51 02 00      add sp, 2
10539  4148             ; --- END FUNCTION CALL
10540  4148             ; if (map[i][j] &  0x1000		/* Set if this sector was mapped */) 
10541  4148             _if165_cond:
10542  4148                              
10543  4148 3B 86 6D      mov d, _map_data ; $map
10544  414B D7            push a
10545  414C DA            push d
10546  414D                              
10547  414D FA FF FF      lea d, [bp + -1] ; $i
10548  4150 2A            mov b, [d]
10549  4151 38 00 00      mov c, 0
10550  4154 E7            pop d
10551  4155 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
10552  4159 DA            push d
10553  415A                              
10554  415A FA FD FF      lea d, [bp + -3] ; $j
10555  415D 2A            mov b, [d]
10556  415E 38 00 00      mov c, 0
10557  4161 E7            pop d
10558  4162 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10559  4166 E4            pop a
10560  4167 2A            mov b, [d]
10561  4168 38 00 00      mov c, 0
10562  416B D7            push a
10563  416C 11            mov a, b
10564  416D FD 2E 00 10   mov32 cb, $00001000
10564  4171 00 00 
10565  4173 FD 92         and b, a ; &
10566  4175 E4            pop a
10567  4176 C0 00 00      cmp b, 0
10568  4179 C6 AB 41      je _if165_else
10569  417C             _if165_TRUE:
10570  417C             ; putbcd(map[i][j]); 
10571  417C                              
10572  417C             ; --- START FUNCTION CALL
10573  417C                              
10574  417C 3B 86 6D      mov d, _map_data ; $map
10575  417F D7            push a
10576  4180 DA            push d
10577  4181                              
10578  4181 FA FF FF      lea d, [bp + -1] ; $i
10579  4184 2A            mov b, [d]
10580  4185 38 00 00      mov c, 0
10581  4188 E7            pop d
10582  4189 FD 13 12 00   mma 18 ; mov a, 18; mul a, b; add d, b
10583  418D DA            push d
10584  418E                              
10585  418E FA FD FF      lea d, [bp + -3] ; $j
10586  4191 2A            mov b, [d]
10587  4192 38 00 00      mov c, 0
10588  4195 E7            pop d
10589  4196 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
10590  419A E4            pop a
10591  419B 2A            mov b, [d]
10592  419C 38 00 00      mov c, 0
10593  419F FD AB         swp b
10594  41A1 D8            push b
10595  41A2 07 D8 2A      call putbcd
10596  41A5 51 02 00      add sp, 2
10597  41A8             ; --- END FUNCTION CALL
10598  41A8 0A B7 41      jmp _if165_exit
10599  41AB             _if165_else:
10600  41AB             ; printf("***"); 
10601  41AB                              
10602  41AB             ; --- START FUNCTION CALL
10603  41AB                              
10604  41AB 26 BC 77      mov b, _s90 ; "***"
10605  41AE FD AB         swp b
10606  41B0 D8            push b
10607  41B1 07 4F 60      call printf
10608  41B4 51 02 00      add sp, 2
10609  41B7             ; --- END FUNCTION CALL
10610  41B7             _if165_exit:
10611  41B7             _for164_update:
10612  41B7                              
10613  41B7 FA FD FF      lea d, [bp + -3] ; $j
10614  41BA 2A            mov b, [d]
10615  41BB 38 00 00      mov c, 0
10616  41BE 11            mov a, b
10617  41BF FD 77         inc b
10618  41C1 FA FD FF      lea d, [bp + -3] ; $j
10619  41C4 FD 43         mov [d], b
10620  41C6 27            mov b, a
10621  41C7 0A 23 41      jmp _for164_cond
10622  41CA             _for164_exit:
10623  41CA             ; putchar('\n'); 
10624  41CA                              
10625  41CA             ; --- START FUNCTION CALL
10626  41CA                              
10627  41CA FD 2E 0A 00   mov32 cb, $0000000a
10627  41CE 00 00 
10628  41D0 DD            push bl
10629  41D1 07 D1 64      call putchar
10630  41D4 51 01 00      add sp, 1
10631  41D7             ; --- END FUNCTION CALL
10632  41D7             _for163_update:
10633  41D7                              
10634  41D7 FA FF FF      lea d, [bp + -1] ; $i
10635  41DA 2A            mov b, [d]
10636  41DB 38 00 00      mov c, 0
10637  41DE 11            mov a, b
10638  41DF FD 77         inc b
10639  41E1 FA FF FF      lea d, [bp + -1] ; $i
10640  41E4 FD 43         mov [d], b
10641  41E6 27            mov b, a
10642  41E7 0A DD 40      jmp _for163_cond
10643  41EA             _for163_exit:
10644  41EA             ; printf("%s\n", gr_1); 
10645  41EA                              
10646  41EA             ; --- START FUNCTION CALL
10647  41EA                              
10648  41EA 3B E2 6F      mov d, _gr_1 ; $gr_1
10649  41ED 2A            mov b, [d]
10650  41EE 38 00 00      mov c, 0
10651  41F1 FD AB         swp b
10652  41F3 D8            push b
10653  41F4                              
10654  41F4 26 C3 77      mov b, _s92 ; "%s\n"
10655  41F7 FD AB         swp b
10656  41F9 D8            push b
10657  41FA 07 4F 60      call printf
10658  41FD 51 04 00      add sp, 4
10659  4200             ; --- END FUNCTION CALL
10660  4200 F9            leave
10661  4201 09            ret
10662  4202             
10663  4202             status_report:
10664  4202 F8 00 00      enter 0 ; (push bp; mov bp, sp)
10665  4205             ; char *plural; 
10666  4205 52 02 00      sub sp, 2
10667  4208             ; plural = str_s + 1; 
10668  4208 FA FF FF      lea d, [bp + -1] ; $plural
10669  420B DA            push d
10670  420C                              
10671  420C 3B E6 6F      mov d, _str_s ; $str_s
10672  420F 2A            mov b, [d]
10673  4210 38 00 00      mov c, 0
10674  4213             ; --- START TERMS
10675  4213 D7            push a
10676  4214 11            mov a, b
10677  4215 FD 2E 01 00   mov32 cb, $00000001
10677  4219 00 00 
10678  421B 56            add b, a
10679  421C E4            pop a
10680  421D             ; --- END TERMS
10681  421D E7            pop d
10682  421E FD 43         mov [d], b
10683  4220             ; unsigned int left; 
10684  4220 52 02 00      sub sp, 2
10685  4223             ; left = TO_FIXED(time_start + time_up) - stardate; 
10686  4223 FA FD FF      lea d, [bp + -3] ; $left
10687  4226 DA            push d
10688  4227                              
10689  4227             ; --- START FUNCTION CALL
10690  4227                              
10691  4227 3B 40 6E      mov d, _time_start ; $time_start
10692  422A 2A            mov b, [d]
10693  422B 38 00 00      mov c, 0
10694  422E             ; --- START TERMS
10695  422E D7            push a
10696  422F 11            mov a, b
10697  4230 3B 42 6E      mov d, _time_up ; $time_up
10698  4233 2A            mov b, [d]
10699  4234 38 00 00      mov c, 0
10700  4237 56            add b, a
10701  4238 E4            pop a
10702  4239             ; --- END TERMS
10703  4239 FD AB         swp b
10704  423B D8            push b
10705  423C 07 17 04      call TO_FIXED
10706  423F 51 02 00      add sp, 2
10707  4242             ; --- END FUNCTION CALL
10708  4242             ; --- START TERMS
10709  4242 D7            push a
10710  4243 11            mov a, b
10711  4244 3B 5C 6E      mov d, _stardate ; $stardate
10712  4247 2A            mov b, [d]
10713  4248 38 00 00      mov c, 0
10714  424B 60            sub a, b
10715  424C 27            mov b, a
10716  424D E4            pop a
10717  424E             ; --- END TERMS
10718  424E E7            pop d
10719  424F FD 43         mov [d], b
10720  4251             ; puts("   Status Report:\n"); 
10721  4251                              
10722  4251             ; --- START FUNCTION CALL
10723  4251                              
10724  4251 26 D4 7D      mov b, _s133 ; "   Status Report:\n"
10725  4254 FD AB         swp b
10726  4256 D8            push b
10727  4257 07 5C 69      call puts
10728  425A 51 02 00      add sp, 2
10729  425D             ; --- END FUNCTION CALL
10730  425D             ; if (klingons_left > 1) 
10731  425D             _if166_cond:
10732  425D                              
10733  425D 3B 36 6E      mov d, _klingons_left ; $klingons_left
10734  4260 32            mov bl, [d]
10735  4261 A7 00         mov bh, 0
10736  4263 38 00 00      mov c, 0
10737  4266             ; --- START RELATIONAL
10738  4266 D7            push a
10739  4267 11            mov a, b
10740  4268 FD 2E 01 00   mov32 cb, $00000001
10740  426C 00 00 
10741  426E B0            cmp a, b
10742  426F FD 81         sgu ; > (unsigned)
10743  4271 E4            pop a
10744  4272             ; --- END RELATIONAL
10745  4272 C0 00 00      cmp b, 0
10746  4275 C6 89 42      je _if166_exit
10747  4278             _if166_TRUE:
10748  4278             ; plural = str_s; 
10749  4278 FA FF FF      lea d, [bp + -1] ; $plural
10750  427B DA            push d
10751  427C                              
10752  427C 3B E6 6F      mov d, _str_s ; $str_s
10753  427F 2A            mov b, [d]
10754  4280 38 00 00      mov c, 0
10755  4283 E7            pop d
10756  4284 FD 43         mov [d], b
10757  4286 0A 89 42      jmp _if166_exit
10758  4289             _if166_exit:
10759  4289             ; printf("Klingon%s Left: %d\n Mission must be completed in %d.%d stardates\n", 
10760  4289                              
10761  4289             ; --- START FUNCTION CALL
10762  4289                              
10763  4289 FA FD FF      lea d, [bp + -3] ; $left
10764  428C 2A            mov b, [d]
10765  428D 38 00 00      mov c, 0
10766  4290             ; --- START FACTORS
10767  4290 D7            push a
10768  4291 FD D8         push g
10769  4293 11            mov a, b
10770  4294 FD 7A         mov g, c
10771  4296 FD 2E 0A 00   mov32 cb, $0000000a
10771  429A 00 00 
10772  429C FD D8         push g ; save 'g' as the div instruction uses it
10773  429E AE            div a, b ; %, a: quotient, b: remainder
10774  429F 11            mov a, b
10775  42A0 FD F1         pop g
10776  42A2 FD 38         mov c, g
10777  42A4 27            mov b, a
10778  42A5 FD F1         pop g
10779  42A7 E4            pop a
10780  42A8             ; --- END FACTORS
10781  42A8 FD AB         swp b
10782  42AA D8            push b
10783  42AB                              
10784  42AB             ; --- START FUNCTION CALL
10785  42AB                              
10786  42AB FA FD FF      lea d, [bp + -3] ; $left
10787  42AE 2A            mov b, [d]
10788  42AF 38 00 00      mov c, 0
10789  42B2 FD AB         swp b
10790  42B4 D8            push b
10791  42B5 07 68 04      call FROM_FIXED
10792  42B8 51 02 00      add sp, 2
10793  42BB             ; --- END FUNCTION CALL
10794  42BB FD AB         swp b
10795  42BD D8            push b
10796  42BE                              
10797  42BE 3B 36 6E      mov d, _klingons_left ; $klingons_left
10798  42C1 32            mov bl, [d]
10799  42C2 A7 00         mov bh, 0
10800  42C4 38 00 00      mov c, 0
10801  42C7 FD AA         swp a
10802  42C9 D8            push b
10803  42CA                              
10804  42CA FA FF FF      lea d, [bp + -1] ; $plural
10805  42CD 2A            mov b, [d]
10806  42CE 38 00 00      mov c, 0
10807  42D1 FD AB         swp b
10808  42D3 D8            push b
10809  42D4                              
10810  42D4 26 E7 7D      mov b, _s134 ; "Klingon%s Left: %d\n Mission must be completed in %d.%d stardates\n"
10811  42D7 FD AB         swp b
10812  42D9 D8            push b
10813  42DA 07 4F 60      call printf
10814  42DD 51 09 00      add sp, 9
10815  42E0             ; --- END FUNCTION CALL
10816  42E0             ; if (starbases_left < 1) { 
10817  42E0             _if168_cond:
10818  42E0                              
10819  42E0 3B 60 6D      mov d, _starbases_left ; $starbases_left
10820  42E3 32            mov bl, [d]
10821  42E4 A7 00         mov bh, 0
10822  42E6 38 00 00      mov c, 0
10823  42E9             ; --- START RELATIONAL
10824  42E9 D7            push a
10825  42EA 11            mov a, b
10826  42EB FD 2E 01 00   mov32 cb, $00000001
10826  42EF 00 00 
10827  42F1 B0            cmp a, b
10828  42F2 FD 73         slt ; < (signed)
10829  42F4 E4            pop a
10830  42F5             ; --- END RELATIONAL
10831  42F5 C0 00 00      cmp b, 0
10832  42F8 C6 0A 43      je _if168_else
10833  42FB             _if168_TRUE:
10834  42FB             ; puts("Your stupidity has left you on your own in the galaxy\n -- you have no starbases left!\n"); 
10835  42FB                              
10836  42FB             ; --- START FUNCTION CALL
10837  42FB                              
10838  42FB 26 29 7E      mov b, _s135 ; "Your stupidity has left you on your own in the galaxy\n -- you have no starbases left!\n"
10839  42FE FD AB         swp b
10840  4300 D8            push b
10841  4301 07 5C 69      call puts
10842  4304 51 02 00      add sp, 2
10843  4307             ; --- END FUNCTION CALL
10844  4307 0A 68 43      jmp _if168_exit
10845  430A             _if168_else:
10846  430A             ; plural = str_s; 
10847  430A FA FF FF      lea d, [bp + -1] ; $plural
10848  430D DA            push d
10849  430E                              
10850  430E 3B E6 6F      mov d, _str_s ; $str_s
10851  4311 2A            mov b, [d]
10852  4312 38 00 00      mov c, 0
10853  4315 E7            pop d
10854  4316 FD 43         mov [d], b
10855  4318             ; if (starbases_left < 2) 
10856  4318             _if169_cond:
10857  4318                              
10858  4318 3B 60 6D      mov d, _starbases_left ; $starbases_left
10859  431B 32            mov bl, [d]
10860  431C A7 00         mov bh, 0
10861  431E 38 00 00      mov c, 0
10862  4321             ; --- START RELATIONAL
10863  4321 D7            push a
10864  4322 11            mov a, b
10865  4323 FD 2E 02 00   mov32 cb, $00000002
10865  4327 00 00 
10866  4329 B0            cmp a, b
10867  432A FD 73         slt ; < (signed)
10868  432C E4            pop a
10869  432D             ; --- END RELATIONAL
10870  432D C0 00 00      cmp b, 0
10871  4330 C6 46 43      je _if169_exit
10872  4333             _if169_TRUE:
10873  4333             ; plural++; 
10874  4333                              
10875  4333 FA FF FF      lea d, [bp + -1] ; $plural
10876  4336 2A            mov b, [d]
10877  4337 38 00 00      mov c, 0
10878  433A FD 77         inc b
10879  433C FA FF FF      lea d, [bp + -1] ; $plural
10880  433F FD 43         mov [d], b
10881  4341 FD 7D         dec b
10882  4343 0A 46 43      jmp _if169_exit
10883  4346             _if169_exit:
10884  4346             ; printf("The Federation is maintaining %d starbase%s in the galaxy\n\n", starbases_left, plural); 
10885  4346                              
10886  4346             ; --- START FUNCTION CALL
10887  4346                              
10888  4346 FA FF FF      lea d, [bp + -1] ; $plural
10889  4349 2A            mov b, [d]
10890  434A 38 00 00      mov c, 0
10891  434D FD AB         swp b
10892  434F D8            push b
10893  4350                              
10894  4350 3B 60 6D      mov d, _starbases_left ; $starbases_left
10895  4353 32            mov bl, [d]
10896  4354 A7 00         mov bh, 0
10897  4356 38 00 00      mov c, 0
10898  4359 FD AA         swp a
10899  435B D8            push b
10900  435C                              
10901  435C 26 80 7E      mov b, _s136 ; "The Federation is maintaining %d starbase%s in the galaxy\n\n"
10902  435F FD AB         swp b
10903  4361 D8            push b
10904  4362 07 4F 60      call printf
10905  4365 51 05 00      add sp, 5
10906  4368             ; --- END FUNCTION CALL
10907  4368             _if168_exit:
10908  4368 F9            leave
10909  4369 09            ret
10910  436A             
10911  436A             torpedo_data:
10912  436A F8 00 00      enter 0 ; (push bp; mov bp, sp)
10913  436D             ; int i; 
10914  436D 52 02 00      sub sp, 2
10915  4370             ; char *plural; 
10916  4370 52 02 00      sub sp, 2
10917  4373             ; plural = str_s + 1; 
10918  4373 FA FD FF      lea d, [bp + -3] ; $plural
10919  4376 DA            push d
10920  4377                              
10921  4377 3B E6 6F      mov d, _str_s ; $str_s
10922  437A 2A            mov b, [d]
10923  437B 38 00 00      mov c, 0
10924  437E             ; --- START TERMS
10925  437E D7            push a
10926  437F 11            mov a, b
10927  4380 FD 2E 01 00   mov32 cb, $00000001
10927  4384 00 00 
10928  4386 56            add b, a
10929  4387 E4            pop a
10930  4388             ; --- END TERMS
10931  4388 E7            pop d
10932  4389 FD 43         mov [d], b
10933  438B             ; struct klingon *k; 
10934  438B 52 02 00      sub sp, 2
10935  438E             ; if (no_klingon()) 
10936  438E             _if170_cond:
10937  438E                              
10938  438E             ; --- START FUNCTION CALL
10939  438E 07 3F 2D      call no_klingon
10940  4391 C0 00 00      cmp b, 0
10941  4394 C6 9C 43      je _if170_exit
10942  4397             _if170_TRUE:
10943  4397             ; return; 
10944  4397 F9            leave
10945  4398 09            ret
10946  4399 0A 9C 43      jmp _if170_exit
10947  439C             _if170_exit:
10948  439C             ; if (klingons > 1) 
10949  439C             _if171_cond:
10950  439C                              
10951  439C 3B 34 6E      mov d, _klingons ; $klingons
10952  439F 32            mov bl, [d]
10953  43A0 A7 00         mov bh, 0
10954  43A2 38 00 00      mov c, 0
10955  43A5             ; --- START RELATIONAL
10956  43A5 D7            push a
10957  43A6 11            mov a, b
10958  43A7 FD 2E 01 00   mov32 cb, $00000001
10958  43AB 00 00 
10959  43AD B0            cmp a, b
10960  43AE FD 81         sgu ; > (unsigned)
10961  43B0 E4            pop a
10962  43B1             ; --- END RELATIONAL
10963  43B1 C0 00 00      cmp b, 0
10964  43B4 C6 CA 43      je _if171_exit
10965  43B7             _if171_TRUE:
10966  43B7             ; plural--; 
10967  43B7                              
10968  43B7 FA FD FF      lea d, [bp + -3] ; $plural
10969  43BA 2A            mov b, [d]
10970  43BB 38 00 00      mov c, 0
10971  43BE FD 7D         dec b
10972  43C0 FA FD FF      lea d, [bp + -3] ; $plural
10973  43C3 FD 43         mov [d], b
10974  43C5 FD 77         inc b
10975  43C7 0A CA 43      jmp _if171_exit
10976  43CA             _if171_exit:
10977  43CA             ; printf("From Enterprise to Klingon battlecriuser%s:\n\n", plural); 
10978  43CA                              
10979  43CA             ; --- START FUNCTION CALL
10980  43CA                              
10981  43CA FA FD FF      lea d, [bp + -3] ; $plural
10982  43CD 2A            mov b, [d]
10983  43CE 38 00 00      mov c, 0
10984  43D1 FD AB         swp b
10985  43D3 D8            push b
10986  43D4                              
10987  43D4 26 BC 7E      mov b, _s137 ; "From Enterprise to Klingon battlecriuser%s:\n\n"
10988  43D7 FD AB         swp b
10989  43D9 D8            push b
10990  43DA 07 4F 60      call printf
10991  43DD 51 04 00      add sp, 4
10992  43E0             ; --- END FUNCTION CALL
10993  43E0             ; k = kdata; 
10994  43E0 FA FB FF      lea d, [bp + -5] ; $k
10995  43E3 DA            push d
10996  43E4                              
10997  43E4 3B 28 6E      mov d, _kdata_data ; $kdata
10998  43E7 2D            mov b, d
10999  43E8 38 00 00      mov c, 0
11000  43EB E7            pop d
11001  43EC FD 43         mov [d], b
11002  43EE             ; for (i = 0; i <= 2; i++) { 
11003  43EE             _for172_init:
11004  43EE FA FF FF      lea d, [bp + -1] ; $i
11005  43F1 DA            push d
11006  43F2                              
11007  43F2 FD 2E 00 00   mov32 cb, $00000000
11007  43F6 00 00 
11008  43F8 E7            pop d
11009  43F9 FD 43         mov [d], b
11010  43FB             _for172_cond:
11011  43FB                              
11012  43FB FA FF FF      lea d, [bp + -1] ; $i
11013  43FE 2A            mov b, [d]
11014  43FF 38 00 00      mov c, 0
11015  4402             ; --- START RELATIONAL
11016  4402 D7            push a
11017  4403 11            mov a, b
11018  4404 FD 2E 02 00   mov32 cb, $00000002
11018  4408 00 00 
11019  440A B0            cmp a, b
11020  440B FD 74         sle ; <= (signed)
11021  440D E4            pop a
11022  440E             ; --- END RELATIONAL
11023  440E C0 00 00      cmp b, 0
11024  4411 C6 A8 44      je _for172_exit
11025  4414             _for172_block:
11026  4414             ; if (k->energy > 0) { 
11027  4414             _if173_cond:
11028  4414                              
11029  4414 FA FB FF      lea d, [bp + -5] ; $k
11030  4417 FD 2A         mov d, [d]
11031  4419 58 02 00      add d, 2
11032  441C 2A            mov b, [d]
11033  441D 38 00 00      mov c, 0
11034  4420             ; --- START RELATIONAL
11035  4420 D7            push a
11036  4421 11            mov a, b
11037  4422 FD 2E 00 00   mov32 cb, $00000000
11037  4426 00 00 
11038  4428 B0            cmp a, b
11039  4429 FD 7F         sgt ; >
11040  442B E4            pop a
11041  442C             ; --- END RELATIONAL
11042  442C C0 00 00      cmp b, 0
11043  442F C6 83 44      je _if173_exit
11044  4432             _if173_TRUE:
11045  4432             ; compute_vector(TO_FIXED00(k->y), 
11046  4432                              
11047  4432             ; --- START FUNCTION CALL
11048  4432                              
11049  4432 3B 5A 6E      mov d, _ship_x ; $ship_x
11050  4435 2A            mov b, [d]
11051  4436 38 00 00      mov c, 0
11052  4439 FD AB         swp b
11053  443B D8            push b
11054  443C                              
11055  443C 3B 58 6E      mov d, _ship_y ; $ship_y
11056  443F 2A            mov b, [d]
11057  4440 38 00 00      mov c, 0
11058  4443 FD AB         swp b
11059  4445 D8            push b
11060  4446                              
11061  4446             ; --- START FUNCTION CALL
11062  4446                              
11063  4446 FA FB FF      lea d, [bp + -5] ; $k
11064  4449 FD 2A         mov d, [d]
11065  444B 58 01 00      add d, 1
11066  444E 32            mov bl, [d]
11067  444F A7 00         mov bh, 0
11068  4451 38 00 00      mov c, 0
11069  4454 FD AB         swp b
11070  4456 D8            push b
11071  4457 07 8B 04      call TO_FIXED00
11072  445A 51 02 00      add sp, 2
11073  445D             ; --- END FUNCTION CALL
11074  445D FD AB         swp b
11075  445F D8            push b
11076  4460                              
11077  4460             ; --- START FUNCTION CALL
11078  4460                              
11079  4460 FA FB FF      lea d, [bp + -5] ; $k
11080  4463 FD 2A         mov d, [d]
11081  4465 58 00 00      add d, 0
11082  4468 32            mov bl, [d]
11083  4469 A7 00         mov bh, 0
11084  446B 38 00 00      mov c, 0
11085  446E FD AB         swp b
11086  4470 D8            push b
11087  4471 07 8B 04      call TO_FIXED00
11088  4474 51 02 00      add sp, 2
11089  4477             ; --- END FUNCTION CALL
11090  4477 FD AB         swp b
11091  4479 D8            push b
11092  447A 07 58 49      call compute_vector
11093  447D 51 08 00      add sp, 8
11094  4480             ; --- END FUNCTION CALL
11095  4480 0A 83 44      jmp _if173_exit
11096  4483             _if173_exit:
11097  4483             ; k++; 
11098  4483                              
11099  4483 FA FB FF      lea d, [bp + -5] ; $k
11100  4486 2A            mov b, [d]
11101  4487 38 00 00      mov c, 0
11102  448A 11            mov a, b
11103  448B FD 77         inc b
11104  448D FD 77         inc b
11105  448F FA FB FF      lea d, [bp + -5] ; $k
11106  4492 FD 43         mov [d], b
11107  4494 27            mov b, a
11108  4495             _for172_update:
11109  4495                              
11110  4495 FA FF FF      lea d, [bp + -1] ; $i
11111  4498 2A            mov b, [d]
11112  4499 38 00 00      mov c, 0
11113  449C 11            mov a, b
11114  449D FD 77         inc b
11115  449F FA FF FF      lea d, [bp + -1] ; $i
11116  44A2 FD 43         mov [d], b
11117  44A4 27            mov b, a
11118  44A5 0A FB 43      jmp _for172_cond
11119  44A8             _for172_exit:
11120  44A8 F9            leave
11121  44A9 09            ret
11122  44AA             
11123  44AA             nav_data:
11124  44AA F8 00 00      enter 0 ; (push bp; mov bp, sp)
11125  44AD             ; if (starbases <= 0) { 
11126  44AD             _if174_cond:
11127  44AD                              
11128  44AD 3B 5D 6D      mov d, _starbases ; $starbases
11129  44B0 32            mov bl, [d]
11130  44B1 A7 00         mov bh, 0
11131  44B3 38 00 00      mov c, 0
11132  44B6             ; --- START RELATIONAL
11133  44B6 D7            push a
11134  44B7 11            mov a, b
11135  44B8 FD 2E 00 00   mov32 cb, $00000000
11135  44BC 00 00 
11136  44BE B0            cmp a, b
11137  44BF FD 74         sle ; <= (signed)
11138  44C1 E4            pop a
11139  44C2             ; --- END RELATIONAL
11140  44C2 C0 00 00      cmp b, 0
11141  44C5 C6 D9 44      je _if174_exit
11142  44C8             _if174_TRUE:
11143  44C8             ; puts("Mr. Spock reports,\n  'Sensors show no starbases in this quadrant.'\n"); 
11144  44C8                              
11145  44C8             ; --- START FUNCTION CALL
11146  44C8                              
11147  44C8 26 EA 7E      mov b, _s138 ; "Mr. Spock reports,\n  'Sensors show no starbases in this quadrant.'\n"
11148  44CB FD AB         swp b
11149  44CD D8            push b
11150  44CE 07 5C 69      call puts
11151  44D1 51 02 00      add sp, 2
11152  44D4             ; --- END FUNCTION CALL
11153  44D4             ; return; 
11154  44D4 F9            leave
11155  44D5 09            ret
11156  44D6 0A D9 44      jmp _if174_exit
11157  44D9             _if174_exit:
11158  44D9             ; compute_vector(TO_FIXED00(base_y), TO_FIXED00(base_x), ship_y, ship_x); 
11159  44D9                              
11160  44D9             ; --- START FUNCTION CALL
11161  44D9                              
11162  44D9 3B 5A 6E      mov d, _ship_x ; $ship_x
11163  44DC 2A            mov b, [d]
11164  44DD 38 00 00      mov c, 0
11165  44E0 FD AB         swp b
11166  44E2 D8            push b
11167  44E3                              
11168  44E3 3B 58 6E      mov d, _ship_y ; $ship_y
11169  44E6 2A            mov b, [d]
11170  44E7 38 00 00      mov c, 0
11171  44EA FD AB         swp b
11172  44EC D8            push b
11173  44ED                              
11174  44ED             ; --- START FUNCTION CALL
11175  44ED                              
11176  44ED 3B 5F 6D      mov d, _base_x ; $base_x
11177  44F0 32            mov bl, [d]
11178  44F1 A7 00         mov bh, 0
11179  44F3 38 00 00      mov c, 0
11180  44F6 FD AB         swp b
11181  44F8 D8            push b
11182  44F9 07 8B 04      call TO_FIXED00
11183  44FC 51 02 00      add sp, 2
11184  44FF             ; --- END FUNCTION CALL
11185  44FF FD AB         swp b
11186  4501 D8            push b
11187  4502                              
11188  4502             ; --- START FUNCTION CALL
11189  4502                              
11190  4502 3B 5E 6D      mov d, _base_y ; $base_y
11191  4505 32            mov bl, [d]
11192  4506 A7 00         mov bh, 0
11193  4508 38 00 00      mov c, 0
11194  450B FD AB         swp b
11195  450D D8            push b
11196  450E 07 8B 04      call TO_FIXED00
11197  4511 51 02 00      add sp, 2
11198  4514             ; --- END FUNCTION CALL
11199  4514 FD AB         swp b
11200  4516 D8            push b
11201  4517 07 58 49      call compute_vector
11202  451A 51 08 00      add sp, 8
11203  451D             ; --- END FUNCTION CALL
11204  451D F9            leave
11205  451E 09            ret
11206  451F             
11207  451F             dirdist_calc:
11208  451F F8 00 00      enter 0 ; (push bp; mov bp, sp)
11209  4522             ; int c1, a, w1, x; 
11210  4522 52 02 00      sub sp, 2
11211  4525 52 02 00      sub sp, 2
11212  4528 52 02 00      sub sp, 2
11213  452B 52 02 00      sub sp, 2
11214  452E             ; printf("Direction/Distance Calculator\n You are at quadrant %d,%d sector %d,%d\n\n Please enter initial X coordinate: ", 
11215  452E                              
11216  452E             ; --- START FUNCTION CALL
11217  452E                              
11218  452E             ; --- START FUNCTION CALL
11219  452E                              
11220  452E 3B 5A 6E      mov d, _ship_x ; $ship_x
11221  4531 2A            mov b, [d]
11222  4532 38 00 00      mov c, 0
11223  4535 FD AB         swp b
11224  4537 D8            push b
11225  4538 07 DC 04      call FROM_FIXED00
11226  453B 51 02 00      add sp, 2
11227  453E             ; --- END FUNCTION CALL
11228  453E FD AB         swp b
11229  4540 D8            push b
11230  4541                              
11231  4541             ; --- START FUNCTION CALL
11232  4541                              
11233  4541 3B 58 6E      mov d, _ship_y ; $ship_y
11234  4544 2A            mov b, [d]
11235  4545 38 00 00      mov c, 0
11236  4548 FD AB         swp b
11237  454A D8            push b
11238  454B 07 DC 04      call FROM_FIXED00
11239  454E 51 02 00      add sp, 2
11240  4551             ; --- END FUNCTION CALL
11241  4551 FD AB         swp b
11242  4553 D8            push b
11243  4554                              
11244  4554 3B 3B 6E      mov d, _quad_x ; $quad_x
11245  4557 2A            mov b, [d]
11246  4558 38 00 00      mov c, 0
11247  455B FD AB         swp b
11248  455D D8            push b
11249  455E                              
11250  455E 3B 39 6E      mov d, _quad_y ; $quad_y
11251  4561 2A            mov b, [d]
11252  4562 38 00 00      mov c, 0
11253  4565 FD AB         swp b
11254  4567 D8            push b
11255  4568                              
11256  4568 26 2E 7F      mov b, _s139 ; "Direction/Distance Calculator\n You are at quadrant %d,%d sector %d,%d\n\n Please enter initial X coordinate: "
11257  456B FD AB         swp b
11258  456D D8            push b
11259  456E 07 4F 60      call printf
11260  4571 51 0A 00      add sp, 10
11261  4574             ; --- END FUNCTION CALL
11262  4574             ; c1 = TO_FIXED00(input_int()); 
11263  4574 FA FF FF      lea d, [bp + -1] ; $c1
11264  4577 DA            push d
11265  4578                              
11266  4578             ; --- START FUNCTION CALL
11267  4578                              
11268  4578             ; --- START FUNCTION CALL
11269  4578 07 B1 08      call input_int
11270  457B FD AB         swp b
11271  457D D8            push b
11272  457E 07 8B 04      call TO_FIXED00
11273  4581 51 02 00      add sp, 2
11274  4584             ; --- END FUNCTION CALL
11275  4584 E7            pop d
11276  4585 FD 43         mov [d], b
11277  4587             ; if (c1 < 0 || c1 > 900 ) 
11278  4587             _if175_cond:
11279  4587                              
11280  4587 FA FF FF      lea d, [bp + -1] ; $c1
11281  458A 2A            mov b, [d]
11282  458B 38 00 00      mov c, 0
11283  458E             ; --- START RELATIONAL
11284  458E D7            push a
11285  458F 11            mov a, b
11286  4590 FD 2E 00 00   mov32 cb, $00000000
11286  4594 00 00 
11287  4596 B0            cmp a, b
11288  4597 FD 73         slt ; < (signed)
11289  4599 E4            pop a
11290  459A             ; --- END RELATIONAL
11291  459A             ; --- START LOGICAL OR
11292  459A D7            push a
11293  459B 11            mov a, b
11294  459C FA FF FF      lea d, [bp + -1] ; $c1
11295  459F 2A            mov b, [d]
11296  45A0 38 00 00      mov c, 0
11297  45A3             ; --- START RELATIONAL
11298  45A3 D7            push a
11299  45A4 11            mov a, b
11300  45A5 FD 2E 84 03   mov32 cb, $00000384
11300  45A9 00 00 
11301  45AB B0            cmp a, b
11302  45AC FD 7F         sgt ; >
11303  45AE E4            pop a
11304  45AF             ; --- END RELATIONAL
11305  45AF FD A8         sor a, b ; ||
11306  45B1 E4            pop a
11307  45B2             ; --- END LOGICAL OR
11308  45B2 C0 00 00      cmp b, 0
11309  45B5 C6 BD 45      je _if175_exit
11310  45B8             _if175_TRUE:
11311  45B8             ; return; 
11312  45B8 F9            leave
11313  45B9 09            ret
11314  45BA 0A BD 45      jmp _if175_exit
11315  45BD             _if175_exit:
11316  45BD             ; puts("Please enter initial Y coordinate: "); 
11317  45BD                              
11318  45BD             ; --- START FUNCTION CALL
11319  45BD                              
11320  45BD 26 9A 7F      mov b, _s140 ; "Please enter initial Y coordinate: "
11321  45C0 FD AB         swp b
11322  45C2 D8            push b
11323  45C3 07 5C 69      call puts
11324  45C6 51 02 00      add sp, 2
11325  45C9             ; --- END FUNCTION CALL
11326  45C9             ; a = TO_FIXED00(input_int()); 
11327  45C9 FA FD FF      lea d, [bp + -3] ; $a
11328  45CC DA            push d
11329  45CD                              
11330  45CD             ; --- START FUNCTION CALL
11331  45CD                              
11332  45CD             ; --- START FUNCTION CALL
11333  45CD 07 B1 08      call input_int
11334  45D0 FD AB         swp b
11335  45D2 D8            push b
11336  45D3 07 8B 04      call TO_FIXED00
11337  45D6 51 02 00      add sp, 2
11338  45D9             ; --- END FUNCTION CALL
11339  45D9 E7            pop d
11340  45DA FD 43         mov [d], b
11341  45DC             ; if (a < 0 || a > 900) 
11342  45DC             _if176_cond:
11343  45DC                              
11344  45DC FA FD FF      lea d, [bp + -3] ; $a
11345  45DF 2A            mov b, [d]
11346  45E0 38 00 00      mov c, 0
11347  45E3             ; --- START RELATIONAL
11348  45E3 D7            push a
11349  45E4 11            mov a, b
11350  45E5 FD 2E 00 00   mov32 cb, $00000000
11350  45E9 00 00 
11351  45EB B0            cmp a, b
11352  45EC FD 73         slt ; < (signed)
11353  45EE E4            pop a
11354  45EF             ; --- END RELATIONAL
11355  45EF             ; --- START LOGICAL OR
11356  45EF D7            push a
11357  45F0 11            mov a, b
11358  45F1 FA FD FF      lea d, [bp + -3] ; $a
11359  45F4 2A            mov b, [d]
11360  45F5 38 00 00      mov c, 0
11361  45F8             ; --- START RELATIONAL
11362  45F8 D7            push a
11363  45F9 11            mov a, b
11364  45FA FD 2E 84 03   mov32 cb, $00000384
11364  45FE 00 00 
11365  4600 B0            cmp a, b
11366  4601 FD 7F         sgt ; >
11367  4603 E4            pop a
11368  4604             ; --- END RELATIONAL
11369  4604 FD A8         sor a, b ; ||
11370  4606 E4            pop a
11371  4607             ; --- END LOGICAL OR
11372  4607 C0 00 00      cmp b, 0
11373  460A C6 12 46      je _if176_exit
11374  460D             _if176_TRUE:
11375  460D             ; return; 
11376  460D F9            leave
11377  460E 09            ret
11378  460F 0A 12 46      jmp _if176_exit
11379  4612             _if176_exit:
11380  4612             ; puts("Please enter final X coordinate: "); 
11381  4612                              
11382  4612             ; --- START FUNCTION CALL
11383  4612                              
11384  4612 26 BE 7F      mov b, _s141 ; "Please enter final X coordinate: "
11385  4615 FD AB         swp b
11386  4617 D8            push b
11387  4618 07 5C 69      call puts
11388  461B 51 02 00      add sp, 2
11389  461E             ; --- END FUNCTION CALL
11390  461E             ; w1 = TO_FIXED00(input_int()); 
11391  461E FA FB FF      lea d, [bp + -5] ; $w1
11392  4621 DA            push d
11393  4622                              
11394  4622             ; --- START FUNCTION CALL
11395  4622                              
11396  4622             ; --- START FUNCTION CALL
11397  4622 07 B1 08      call input_int
11398  4625 FD AB         swp b
11399  4627 D8            push b
11400  4628 07 8B 04      call TO_FIXED00
11401  462B 51 02 00      add sp, 2
11402  462E             ; --- END FUNCTION CALL
11403  462E E7            pop d
11404  462F FD 43         mov [d], b
11405  4631             ; if (w1 < 0 || w1 > 900) 
11406  4631             _if177_cond:
11407  4631                              
11408  4631 FA FB FF      lea d, [bp + -5] ; $w1
11409  4634 2A            mov b, [d]
11410  4635 38 00 00      mov c, 0
11411  4638             ; --- START RELATIONAL
11412  4638 D7            push a
11413  4639 11            mov a, b
11414  463A FD 2E 00 00   mov32 cb, $00000000
11414  463E 00 00 
11415  4640 B0            cmp a, b
11416  4641 FD 73         slt ; < (signed)
11417  4643 E4            pop a
11418  4644             ; --- END RELATIONAL
11419  4644             ; --- START LOGICAL OR
11420  4644 D7            push a
11421  4645 11            mov a, b
11422  4646 FA FB FF      lea d, [bp + -5] ; $w1
11423  4649 2A            mov b, [d]
11424  464A 38 00 00      mov c, 0
11425  464D             ; --- START RELATIONAL
11426  464D D7            push a
11427  464E 11            mov a, b
11428  464F FD 2E 84 03   mov32 cb, $00000384
11428  4653 00 00 
11429  4655 B0            cmp a, b
11430  4656 FD 7F         sgt ; >
11431  4658 E4            pop a
11432  4659             ; --- END RELATIONAL
11433  4659 FD A8         sor a, b ; ||
11434  465B E4            pop a
11435  465C             ; --- END LOGICAL OR
11436  465C C0 00 00      cmp b, 0
11437  465F C6 67 46      je _if177_exit
11438  4662             _if177_TRUE:
11439  4662             ; return; 
11440  4662 F9            leave
11441  4663 09            ret
11442  4664 0A 67 46      jmp _if177_exit
11443  4667             _if177_exit:
11444  4667             ; puts("Please enter final Y coordinate: "); 
11445  4667                              
11446  4667             ; --- START FUNCTION CALL
11447  4667                              
11448  4667 26 E0 7F      mov b, _s142 ; "Please enter final Y coordinate: "
11449  466A FD AB         swp b
11450  466C D8            push b
11451  466D 07 5C 69      call puts
11452  4670 51 02 00      add sp, 2
11453  4673             ; --- END FUNCTION CALL
11454  4673             ; x = TO_FIXED00(input_int()); 
11455  4673 FA F9 FF      lea d, [bp + -7] ; $x
11456  4676 DA            push d
11457  4677                              
11458  4677             ; --- START FUNCTION CALL
11459  4677                              
11460  4677             ; --- START FUNCTION CALL
11461  4677 07 B1 08      call input_int
11462  467A FD AB         swp b
11463  467C D8            push b
11464  467D 07 8B 04      call TO_FIXED00
11465  4680 51 02 00      add sp, 2
11466  4683             ; --- END FUNCTION CALL
11467  4683 E7            pop d
11468  4684 FD 43         mov [d], b
11469  4686             ; if (x < 0 || x > 900) 
11470  4686             _if178_cond:
11471  4686                              
11472  4686 FA F9 FF      lea d, [bp + -7] ; $x
11473  4689 2A            mov b, [d]
11474  468A 38 00 00      mov c, 0
11475  468D             ; --- START RELATIONAL
11476  468D D7            push a
11477  468E 11            mov a, b
11478  468F FD 2E 00 00   mov32 cb, $00000000
11478  4693 00 00 
11479  4695 B0            cmp a, b
11480  4696 FD 73         slt ; < (signed)
11481  4698 E4            pop a
11482  4699             ; --- END RELATIONAL
11483  4699             ; --- START LOGICAL OR
11484  4699 D7            push a
11485  469A 11            mov a, b
11486  469B FA F9 FF      lea d, [bp + -7] ; $x
11487  469E 2A            mov b, [d]
11488  469F 38 00 00      mov c, 0
11489  46A2             ; --- START RELATIONAL
11490  46A2 D7            push a
11491  46A3 11            mov a, b
11492  46A4 FD 2E 84 03   mov32 cb, $00000384
11492  46A8 00 00 
11493  46AA B0            cmp a, b
11494  46AB FD 7F         sgt ; >
11495  46AD E4            pop a
11496  46AE             ; --- END RELATIONAL
11497  46AE FD A8         sor a, b ; ||
11498  46B0 E4            pop a
11499  46B1             ; --- END LOGICAL OR
11500  46B1 C0 00 00      cmp b, 0
11501  46B4 C6 BC 46      je _if178_exit
11502  46B7             _if178_TRUE:
11503  46B7             ; return; 
11504  46B7 F9            leave
11505  46B8 09            ret
11506  46B9 0A BC 46      jmp _if178_exit
11507  46BC             _if178_exit:
11508  46BC             ; compute_vector(w1, x, c1, a); 
11509  46BC                              
11510  46BC             ; --- START FUNCTION CALL
11511  46BC                              
11512  46BC FA FD FF      lea d, [bp + -3] ; $a
11513  46BF 2A            mov b, [d]
11514  46C0 38 00 00      mov c, 0
11515  46C3 FD AB         swp b
11516  46C5 D8            push b
11517  46C6                              
11518  46C6 FA FF FF      lea d, [bp + -1] ; $c1
11519  46C9 2A            mov b, [d]
11520  46CA 38 00 00      mov c, 0
11521  46CD FD AB         swp b
11522  46CF D8            push b
11523  46D0                              
11524  46D0 FA F9 FF      lea d, [bp + -7] ; $x
11525  46D3 2A            mov b, [d]
11526  46D4 38 00 00      mov c, 0
11527  46D7 FD AB         swp b
11528  46D9 D8            push b
11529  46DA                              
11530  46DA FA FB FF      lea d, [bp + -5] ; $w1
11531  46DD 2A            mov b, [d]
11532  46DE 38 00 00      mov c, 0
11533  46E1 FD AB         swp b
11534  46E3 D8            push b
11535  46E4 07 58 49      call compute_vector
11536  46E7 51 08 00      add sp, 8
11537  46EA             ; --- END FUNCTION CALL
11538  46EA F9            leave
11539  46EB 09            ret
11540  46EC             
11541  46EC             galaxy_map:
11542  46EC F8 00 00      enter 0 ; (push bp; mov bp, sp)
11543  46EF             ; int i, j, j0; 
11544  46EF 52 02 00      sub sp, 2
11545  46F2 52 02 00      sub sp, 2
11546  46F5 52 02 00      sub sp, 2
11547  46F8             ; printf("\n                   The Galaxy\n\n"); 
11548  46F8                              
11549  46F8             ; --- START FUNCTION CALL
11550  46F8                              
11551  46F8 26 02 80      mov b, _s143 ; "\n                   The Galaxy\n\n"
11552  46FB FD AB         swp b
11553  46FD D8            push b
11554  46FE 07 4F 60      call printf
11555  4701 51 02 00      add sp, 2
11556  4704             ; --- END FUNCTION CALL
11557  4704             ; printf("    1     2     3     4     5     6     7     8\n"); 
11558  4704                              
11559  4704             ; --- START FUNCTION CALL
11560  4704                              
11561  4704 26 23 80      mov b, _s144 ; "    1     2     3     4     5     6     7     8\n"
11562  4707 FD AB         swp b
11563  4709 D8            push b
11564  470A 07 4F 60      call printf
11565  470D 51 02 00      add sp, 2
11566  4710             ; --- END FUNCTION CALL
11567  4710             ; for (i = 1; i <= 8; i++) { 
11568  4710             _for179_init:
11569  4710 FA FF FF      lea d, [bp + -1] ; $i
11570  4713 DA            push d
11571  4714                              
11572  4714 FD 2E 01 00   mov32 cb, $00000001
11572  4718 00 00 
11573  471A E7            pop d
11574  471B FD 43         mov [d], b
11575  471D             _for179_cond:
11576  471D                              
11577  471D FA FF FF      lea d, [bp + -1] ; $i
11578  4720 2A            mov b, [d]
11579  4721 38 00 00      mov c, 0
11580  4724             ; --- START RELATIONAL
11581  4724 D7            push a
11582  4725 11            mov a, b
11583  4726 FD 2E 08 00   mov32 cb, $00000008
11583  472A 00 00 
11584  472C B0            cmp a, b
11585  472D FD 74         sle ; <= (signed)
11586  472F E4            pop a
11587  4730             ; --- END RELATIONAL
11588  4730 C0 00 00      cmp b, 0
11589  4733 C6 46 49      je _for179_exit
11590  4736             _for179_block:
11591  4736             ; printf("%s%d ", gm_1, i); 
11592  4736                              
11593  4736             ; --- START FUNCTION CALL
11594  4736                              
11595  4736 FA FF FF      lea d, [bp + -1] ; $i
11596  4739 2A            mov b, [d]
11597  473A 38 00 00      mov c, 0
11598  473D FD AB         swp b
11599  473F D8            push b
11600  4740                              
11601  4740 3B 1B 70      mov d, _gm_1 ; $gm_1
11602  4743 2A            mov b, [d]
11603  4744 38 00 00      mov c, 0
11604  4747 FD AB         swp b
11605  4749 D8            push b
11606  474A                              
11607  474A 26 54 80      mov b, _s145 ; "%s%d "
11608  474D FD AB         swp b
11609  474F D8            push b
11610  4750 07 4F 60      call printf
11611  4753 51 06 00      add sp, 6
11612  4756             ; --- END FUNCTION CALL
11613  4756             ; quadrant_name(1, i, 1); 
11614  4756                              
11615  4756             ; --- START FUNCTION CALL
11616  4756                              
11617  4756 FD 2E 01 00   mov32 cb, $00000001
11617  475A 00 00 
11618  475C DD            push bl
11619  475D                              
11620  475D FA FF FF      lea d, [bp + -1] ; $i
11621  4760 2A            mov b, [d]
11622  4761 38 00 00      mov c, 0
11623  4764 DD            push bl
11624  4765                              
11625  4765 FD 2E 01 00   mov32 cb, $00000001
11625  4769 00 00 
11626  476B DD            push bl
11627  476C 07 9C 59      call quadrant_name
11628  476F 51 03 00      add sp, 3
11629  4772             ; --- END FUNCTION CALL
11630  4772             ; j0 = (int) (11 - (strlen(quadname) / 2)); 
11631  4772 FA FB FF      lea d, [bp + -5] ; $j0
11632  4775 DA            push d
11633  4776                              
11634  4776                              
11635  4776 FD 2E 0B 00   mov32 cb, $0000000b
11635  477A 00 00 
11636  477C             ; --- START TERMS
11637  477C D7            push a
11638  477D 11            mov a, b
11639  477E                              
11640  477E             ; --- START FUNCTION CALL
11641  477E                              
11642  477E 3B 9E 6E      mov d, _quadname_data ; $quadname
11643  4781 2D            mov b, d
11644  4782 38 00 00      mov c, 0
11645  4785 FD AB         swp b
11646  4787 D8            push b
11647  4788 07 F4 5F      call strlen
11648  478B 51 02 00      add sp, 2
11649  478E             ; --- END FUNCTION CALL
11650  478E             ; --- START FACTORS
11651  478E D7            push a
11652  478F FD D8         push g
11653  4791 11            mov a, b
11654  4792 FD 7A         mov g, c
11655  4794 FD 2E 02 00   mov32 cb, $00000002
11655  4798 00 00 
11656  479A FD D8         push g ; save 'g' as the div instruction uses it
11657  479C AE            div a, b ; /, a: quotient, b: remainder
11658  479D FD F1         pop g
11659  479F FD 38         mov c, g
11660  47A1 27            mov b, a
11661  47A2 FD F1         pop g
11662  47A4 E4            pop a
11663  47A5             ; --- END FACTORS
11664  47A5 60            sub a, b
11665  47A6 27            mov b, a
11666  47A7 E4            pop a
11667  47A8             ; --- END TERMS
11668  47A8 E7            pop d
11669  47A9 FD 43         mov [d], b
11670  47AB             ; for (j = 0; j < j0; j++) 
11671  47AB             _for181_init:
11672  47AB FA FD FF      lea d, [bp + -3] ; $j
11673  47AE DA            push d
11674  47AF                              
11675  47AF FD 2E 00 00   mov32 cb, $00000000
11675  47B3 00 00 
11676  47B5 E7            pop d
11677  47B6 FD 43         mov [d], b
11678  47B8             _for181_cond:
11679  47B8                              
11680  47B8 FA FD FF      lea d, [bp + -3] ; $j
11681  47BB 2A            mov b, [d]
11682  47BC 38 00 00      mov c, 0
11683  47BF             ; --- START RELATIONAL
11684  47BF D7            push a
11685  47C0 11            mov a, b
11686  47C1 FA FB FF      lea d, [bp + -5] ; $j0
11687  47C4 2A            mov b, [d]
11688  47C5 38 00 00      mov c, 0
11689  47C8 B0            cmp a, b
11690  47C9 FD 73         slt ; < (signed)
11691  47CB E4            pop a
11692  47CC             ; --- END RELATIONAL
11693  47CC C0 00 00      cmp b, 0
11694  47CF C6 F2 47      je _for181_exit
11695  47D2             _for181_block:
11696  47D2             ; putchar(' '); 
11697  47D2                              
11698  47D2             ; --- START FUNCTION CALL
11699  47D2                              
11700  47D2 FD 2E 20 00   mov32 cb, $00000020
11700  47D6 00 00 
11701  47D8 DD            push bl
11702  47D9 07 D1 64      call putchar
11703  47DC 51 01 00      add sp, 1
11704  47DF             ; --- END FUNCTION CALL
11705  47DF             _for181_update:
11706  47DF                              
11707  47DF FA FD FF      lea d, [bp + -3] ; $j
11708  47E2 2A            mov b, [d]
11709  47E3 38 00 00      mov c, 0
11710  47E6 11            mov a, b
11711  47E7 FD 77         inc b
11712  47E9 FA FD FF      lea d, [bp + -3] ; $j
11713  47EC FD 43         mov [d], b
11714  47EE 27            mov b, a
11715  47EF 0A B8 47      jmp _for181_cond
11716  47F2             _for181_exit:
11717  47F2             ; puts(quadname); 
11718  47F2                              
11719  47F2             ; --- START FUNCTION CALL
11720  47F2                              
11721  47F2 3B 9E 6E      mov d, _quadname_data ; $quadname
11722  47F5 2D            mov b, d
11723  47F6 38 00 00      mov c, 0
11724  47F9 FD AB         swp b
11725  47FB D8            push b
11726  47FC 07 5C 69      call puts
11727  47FF 51 02 00      add sp, 2
11728  4802             ; --- END FUNCTION CALL
11729  4802             ; for (j = 0; j < j0; j++) 
11730  4802             _for182_init:
11731  4802 FA FD FF      lea d, [bp + -3] ; $j
11732  4805 DA            push d
11733  4806                              
11734  4806 FD 2E 00 00   mov32 cb, $00000000
11734  480A 00 00 
11735  480C E7            pop d
11736  480D FD 43         mov [d], b
11737  480F             _for182_cond:
11738  480F                              
11739  480F FA FD FF      lea d, [bp + -3] ; $j
11740  4812 2A            mov b, [d]
11741  4813 38 00 00      mov c, 0
11742  4816             ; --- START RELATIONAL
11743  4816 D7            push a
11744  4817 11            mov a, b
11745  4818 FA FB FF      lea d, [bp + -5] ; $j0
11746  481B 2A            mov b, [d]
11747  481C 38 00 00      mov c, 0
11748  481F B0            cmp a, b
11749  4820 FD 73         slt ; < (signed)
11750  4822 E4            pop a
11751  4823             ; --- END RELATIONAL
11752  4823 C0 00 00      cmp b, 0
11753  4826 C6 49 48      je _for182_exit
11754  4829             _for182_block:
11755  4829             ; putchar(' '); 
11756  4829                              
11757  4829             ; --- START FUNCTION CALL
11758  4829                              
11759  4829 FD 2E 20 00   mov32 cb, $00000020
11759  482D 00 00 
11760  482F DD            push bl
11761  4830 07 D1 64      call putchar
11762  4833 51 01 00      add sp, 1
11763  4836             ; --- END FUNCTION CALL
11764  4836             _for182_update:
11765  4836                              
11766  4836 FA FD FF      lea d, [bp + -3] ; $j
11767  4839 2A            mov b, [d]
11768  483A 38 00 00      mov c, 0
11769  483D 11            mov a, b
11770  483E FD 77         inc b
11771  4840 FA FD FF      lea d, [bp + -3] ; $j
11772  4843 FD 43         mov [d], b
11773  4845 27            mov b, a
11774  4846 0A 0F 48      jmp _for182_cond
11775  4849             _for182_exit:
11776  4849             ; if (!(strlen(quadname) % 2)) 
11777  4849             _if183_cond:
11778  4849                              
11779  4849                              
11780  4849             ; --- START FUNCTION CALL
11781  4849                              
11782  4849 3B 9E 6E      mov d, _quadname_data ; $quadname
11783  484C 2D            mov b, d
11784  484D 38 00 00      mov c, 0
11785  4850 FD AB         swp b
11786  4852 D8            push b
11787  4853 07 F4 5F      call strlen
11788  4856 51 02 00      add sp, 2
11789  4859             ; --- END FUNCTION CALL
11790  4859             ; --- START FACTORS
11791  4859 D7            push a
11792  485A FD D8         push g
11793  485C 11            mov a, b
11794  485D FD 7A         mov g, c
11795  485F FD 2E 02 00   mov32 cb, $00000002
11795  4863 00 00 
11796  4865 FD D8         push g ; save 'g' as the div instruction uses it
11797  4867 AE            div a, b ; %, a: quotient, b: remainder
11798  4868 11            mov a, b
11799  4869 FD F1         pop g
11800  486B FD 38         mov c, g
11801  486D 27            mov b, a
11802  486E FD F1         pop g
11803  4870 E4            pop a
11804  4871             ; --- END FACTORS
11805  4871 C0 00 00      cmp b, 0
11806  4874 C6 87 48      je _if183_exit
11807  4877             _if183_TRUE:
11808  4877             ; putchar(' '); 
11809  4877                              
11810  4877             ; --- START FUNCTION CALL
11811  4877                              
11812  4877 FD 2E 20 00   mov32 cb, $00000020
11812  487B 00 00 
11813  487D DD            push bl
11814  487E 07 D1 64      call putchar
11815  4881 51 01 00      add sp, 1
11816  4884             ; --- END FUNCTION CALL
11817  4884 0A 87 48      jmp _if183_exit
11818  4887             _if183_exit:
11819  4887             ; quadrant_name(1, i, 5); 
11820  4887                              
11821  4887             ; --- START FUNCTION CALL
11822  4887                              
11823  4887 FD 2E 05 00   mov32 cb, $00000005
11823  488B 00 00 
11824  488D DD            push bl
11825  488E                              
11826  488E FA FF FF      lea d, [bp + -1] ; $i
11827  4891 2A            mov b, [d]
11828  4892 38 00 00      mov c, 0
11829  4895 DD            push bl
11830  4896                              
11831  4896 FD 2E 01 00   mov32 cb, $00000001
11831  489A 00 00 
11832  489C DD            push bl
11833  489D 07 9C 59      call quadrant_name
11834  48A0 51 03 00      add sp, 3
11835  48A3             ; --- END FUNCTION CALL
11836  48A3             ; j0 = (int) (12 - (strlen(quadname) / 2)); 
11837  48A3 FA FB FF      lea d, [bp + -5] ; $j0
11838  48A6 DA            push d
11839  48A7                              
11840  48A7                              
11841  48A7 FD 2E 0C 00   mov32 cb, $0000000c
11841  48AB 00 00 
11842  48AD             ; --- START TERMS
11843  48AD D7            push a
11844  48AE 11            mov a, b
11845  48AF                              
11846  48AF             ; --- START FUNCTION CALL
11847  48AF                              
11848  48AF 3B 9E 6E      mov d, _quadname_data ; $quadname
11849  48B2 2D            mov b, d
11850  48B3 38 00 00      mov c, 0
11851  48B6 FD AB         swp b
11852  48B8 D8            push b
11853  48B9 07 F4 5F      call strlen
11854  48BC 51 02 00      add sp, 2
11855  48BF             ; --- END FUNCTION CALL
11856  48BF             ; --- START FACTORS
11857  48BF D7            push a
11858  48C0 FD D8         push g
11859  48C2 11            mov a, b
11860  48C3 FD 7A         mov g, c
11861  48C5 FD 2E 02 00   mov32 cb, $00000002
11861  48C9 00 00 
11862  48CB FD D8         push g ; save 'g' as the div instruction uses it
11863  48CD AE            div a, b ; /, a: quotient, b: remainder
11864  48CE FD F1         pop g
11865  48D0 FD 38         mov c, g
11866  48D2 27            mov b, a
11867  48D3 FD F1         pop g
11868  48D5 E4            pop a
11869  48D6             ; --- END FACTORS
11870  48D6 60            sub a, b
11871  48D7 27            mov b, a
11872  48D8 E4            pop a
11873  48D9             ; --- END TERMS
11874  48D9 E7            pop d
11875  48DA FD 43         mov [d], b
11876  48DC             ; for (j = 0; j < j0; j++) 
11877  48DC             _for186_init:
11878  48DC FA FD FF      lea d, [bp + -3] ; $j
11879  48DF DA            push d
11880  48E0                              
11881  48E0 FD 2E 00 00   mov32 cb, $00000000
11881  48E4 00 00 
11882  48E6 E7            pop d
11883  48E7 FD 43         mov [d], b
11884  48E9             _for186_cond:
11885  48E9                              
11886  48E9 FA FD FF      lea d, [bp + -3] ; $j
11887  48EC 2A            mov b, [d]
11888  48ED 38 00 00      mov c, 0
11889  48F0             ; --- START RELATIONAL
11890  48F0 D7            push a
11891  48F1 11            mov a, b
11892  48F2 FA FB FF      lea d, [bp + -5] ; $j0
11893  48F5 2A            mov b, [d]
11894  48F6 38 00 00      mov c, 0
11895  48F9 B0            cmp a, b
11896  48FA FD 73         slt ; < (signed)
11897  48FC E4            pop a
11898  48FD             ; --- END RELATIONAL
11899  48FD C0 00 00      cmp b, 0
11900  4900 C6 23 49      je _for186_exit
11901  4903             _for186_block:
11902  4903             ; putchar(' '); 
11903  4903                              
11904  4903             ; --- START FUNCTION CALL
11905  4903                              
11906  4903 FD 2E 20 00   mov32 cb, $00000020
11906  4907 00 00 
11907  4909 DD            push bl
11908  490A 07 D1 64      call putchar
11909  490D 51 01 00      add sp, 1
11910  4910             ; --- END FUNCTION CALL
11911  4910             _for186_update:
11912  4910                              
11913  4910 FA FD FF      lea d, [bp + -3] ; $j
11914  4913 2A            mov b, [d]
11915  4914 38 00 00      mov c, 0
11916  4917 11            mov a, b
11917  4918 FD 77         inc b
11918  491A FA FD FF      lea d, [bp + -3] ; $j
11919  491D FD 43         mov [d], b
11920  491F 27            mov b, a
11921  4920 0A E9 48      jmp _for186_cond
11922  4923             _for186_exit:
11923  4923             ; puts(quadname); 
11924  4923                              
11925  4923             ; --- START FUNCTION CALL
11926  4923                              
11927  4923 3B 9E 6E      mov d, _quadname_data ; $quadname
11928  4926 2D            mov b, d
11929  4927 38 00 00      mov c, 0
11930  492A FD AB         swp b
11931  492C D8            push b
11932  492D 07 5C 69      call puts
11933  4930 51 02 00      add sp, 2
11934  4933             ; --- END FUNCTION CALL
11935  4933             _for179_update:
11936  4933                              
11937  4933 FA FF FF      lea d, [bp + -1] ; $i
11938  4936 2A            mov b, [d]
11939  4937 38 00 00      mov c, 0
11940  493A 11            mov a, b
11941  493B FD 77         inc b
11942  493D FA FF FF      lea d, [bp + -1] ; $i
11943  4940 FD 43         mov [d], b
11944  4942 27            mov b, a
11945  4943 0A 1D 47      jmp _for179_cond
11946  4946             _for179_exit:
11947  4946             ; puts(gm_1); 
11948  4946                              
11949  4946             ; --- START FUNCTION CALL
11950  4946                              
11951  4946 3B 1B 70      mov d, _gm_1 ; $gm_1
11952  4949 2A            mov b, [d]
11953  494A 38 00 00      mov c, 0
11954  494D FD AB         swp b
11955  494F D8            push b
11956  4950 07 5C 69      call puts
11957  4953 51 02 00      add sp, 2
11958  4956             ; --- END FUNCTION CALL
11959  4956 F9            leave
11960  4957 09            ret
11961  4958             
11962  4958             compute_vector:
11963  4958 F8 00 00      enter 0 ; (push bp; mov bp, sp)
11964  495B             ; long unsigned int xl, al; 
11965  495B 52 04 00      sub sp, 4
11966  495E 52 04 00      sub sp, 4
11967  4961             ; puts("  DIRECTION = "); 
11968  4961                              
11969  4961             ; --- START FUNCTION CALL
11970  4961                              
11971  4961 26 5A 80      mov b, _s146 ; "  DIRECTION = "
11972  4964 FD AB         swp b
11973  4966 D8            push b
11974  4967 07 5C 69      call puts
11975  496A 51 02 00      add sp, 2
11976  496D             ; --- END FUNCTION CALL
11977  496D             ; x = x - a; 
11978  496D FA 07 00      lea d, [bp + 7] ; $x
11979  4970 DA            push d
11980  4971                              
11981  4971 FA 07 00      lea d, [bp + 7] ; $x
11982  4974 2A            mov b, [d]
11983  4975 38 00 00      mov c, 0
11984  4978             ; --- START TERMS
11985  4978 D7            push a
11986  4979 11            mov a, b
11987  497A FA 0B 00      lea d, [bp + 11] ; $a
11988  497D 2A            mov b, [d]
11989  497E 38 00 00      mov c, 0
11990  4981 60            sub a, b
11991  4982 27            mov b, a
11992  4983 E4            pop a
11993  4984             ; --- END TERMS
11994  4984 E7            pop d
11995  4985 FD 43         mov [d], b
11996  4987             ; a = c1 - w1; 
11997  4987 FA 0B 00      lea d, [bp + 11] ; $a
11998  498A DA            push d
11999  498B                              
12000  498B FA 09 00      lea d, [bp + 9] ; $c1
12001  498E 2A            mov b, [d]
12002  498F 38 00 00      mov c, 0
12003  4992             ; --- START TERMS
12004  4992 D7            push a
12005  4993 11            mov a, b
12006  4994 FA 05 00      lea d, [bp + 5] ; $w1
12007  4997 2A            mov b, [d]
12008  4998 38 00 00      mov c, 0
12009  499B 60            sub a, b
12010  499C 27            mov b, a
12011  499D E4            pop a
12012  499E             ; --- END TERMS
12013  499E E7            pop d
12014  499F FD 43         mov [d], b
12015  49A1             ; xl = abs(x); 
12016  49A1 FA FD FF      lea d, [bp + -3] ; $xl
12017  49A4 DA            push d
12018  49A5                              
12019  49A5             ; --- START FUNCTION CALL
12020  49A5                              
12021  49A5 FA 07 00      lea d, [bp + 7] ; $x
12022  49A8 2A            mov b, [d]
12023  49A9 38 00 00      mov c, 0
12024  49AC FD AB         swp b
12025  49AE D8            push b
12026  49AF 07 3D 6B      call abs
12027  49B2 51 02 00      add sp, 2
12028  49B5             ; --- END FUNCTION CALL
12029  49B5 E7            pop d
12030  49B6 FD 43         mov [d], b
12031  49B8 26 00 00      mov b, 0
12032  49BB FD 44 02 00   mov [d + 2], b
12033  49BF             ; al = abs(a); 
12034  49BF FA F9 FF      lea d, [bp + -7] ; $al
12035  49C2 DA            push d
12036  49C3                              
12037  49C3             ; --- START FUNCTION CALL
12038  49C3                              
12039  49C3 FA 0B 00      lea d, [bp + 11] ; $a
12040  49C6 2A            mov b, [d]
12041  49C7 38 00 00      mov c, 0
12042  49CA FD AB         swp b
12043  49CC D8            push b
12044  49CD 07 3D 6B      call abs
12045  49D0 51 02 00      add sp, 2
12046  49D3             ; --- END FUNCTION CALL
12047  49D3 E7            pop d
12048  49D4 FD 43         mov [d], b
12049  49D6 26 00 00      mov b, 0
12050  49D9 FD 44 02 00   mov [d + 2], b
12051  49DD             ; if (x < 0) { 
12052  49DD             _if187_cond:
12053  49DD                              
12054  49DD FA 07 00      lea d, [bp + 7] ; $x
12055  49E0 2A            mov b, [d]
12056  49E1 38 00 00      mov c, 0
12057  49E4             ; --- START RELATIONAL
12058  49E4 D7            push a
12059  49E5 11            mov a, b
12060  49E6 FD 2E 00 00   mov32 cb, $00000000
12060  49EA 00 00 
12061  49EC B0            cmp a, b
12062  49ED FD 73         slt ; < (signed)
12063  49EF E4            pop a
12064  49F0             ; --- END RELATIONAL
12065  49F0 C0 00 00      cmp b, 0
12066  49F3 C6 3F 4C      je _if187_else
12067  49F6             _if187_TRUE:
12068  49F6             ; if (a > 0) { 
12069  49F6             _if188_cond:
12070  49F6                              
12071  49F6 FA 0B 00      lea d, [bp + 11] ; $a
12072  49F9 2A            mov b, [d]
12073  49FA 38 00 00      mov c, 0
12074  49FD             ; --- START RELATIONAL
12075  49FD D7            push a
12076  49FE 11            mov a, b
12077  49FF FD 2E 00 00   mov32 cb, $00000000
12077  4A03 00 00 
12078  4A05 B0            cmp a, b
12079  4A06 FD 7F         sgt ; >
12080  4A08 E4            pop a
12081  4A09             ; --- END RELATIONAL
12082  4A09 C0 00 00      cmp b, 0
12083  4A0C C6 04 4C      je _if188_else
12084  4A0F             _if188_TRUE:
12085  4A0F             ; c1 = 300; 
12086  4A0F FA 09 00      lea d, [bp + 9] ; $c1
12087  4A12 DA            push d
12088  4A13                              
12089  4A13 FD 2E 2C 01   mov32 cb, $0000012c
12089  4A17 00 00 
12090  4A19 E7            pop d
12091  4A1A FD 43         mov [d], b
12092  4A1C             ; if (al >= xl) 
12093  4A1C             _if189_cond:
12094  4A1C                              
12095  4A1C FA F9 FF      lea d, [bp + -7] ; $al
12096  4A1F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12097  4A22 FD 39         mov c, b ; And place it into C
12098  4A24 2A            mov b, [d] ; Lower Word in B
12099  4A25             ; --- START RELATIONAL
12100  4A25 D7            push a
12101  4A26 FD D8         push g
12102  4A28 11            mov a, b
12103  4A29 FD 7A         mov g, c
12104  4A2B FA FD FF      lea d, [bp + -3] ; $xl
12105  4A2E 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12106  4A31 FD 39         mov c, b ; And place it into C
12107  4A33 2A            mov b, [d] ; Lower Word in B
12108  4A34 FD AF         cmp32 ga, cb
12109  4A36 FD 82         sgeu
12110  4A38 FD F1         pop g
12111  4A3A E4            pop a
12112  4A3B             ; --- END RELATIONAL
12113  4A3B C0 00 00      cmp b, 0
12114  4A3E C6 D0 4A      je _if189_else
12115  4A41             _if189_TRUE:
12116  4A41             ; printf("%s", print100(c1 + ((xl * 100) / al))); 
12117  4A41                              
12118  4A41             ; --- START FUNCTION CALL
12119  4A41                              
12120  4A41             ; --- START FUNCTION CALL
12121  4A41                              
12122  4A41 FA 09 00      lea d, [bp + 9] ; $c1
12123  4A44 2A            mov b, [d]
12124  4A45 38 00 00      mov c, 0
12125  4A48             ; --- START TERMS
12126  4A48 D7            push a
12127  4A49 11            mov a, b
12128  4A4A                              
12129  4A4A                              
12130  4A4A FA FD FF      lea d, [bp + -3] ; $xl
12131  4A4D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12132  4A50 FD 39         mov c, b ; And place it into C
12133  4A52 2A            mov b, [d] ; Lower Word in B
12134  4A53             ; --- START FACTORS
12135  4A53 D7            push a
12136  4A54 FD D8         push g
12137  4A56 11            mov a, b
12138  4A57 FD 7A         mov g, c
12139  4A59 FD 2E 64 00   mov32 cb, $00000064
12139  4A5D 00 00 
12140  4A5F D7            push a     ; save left operand
12141  4A60 8E            xor a, b   ; xor sign bits
12142  4A61 FD AA         swp a      ; swap bytes
12143  4A63 83            mov cl, al ; save result of xor into 'dl'
12144  4A64 E4            pop a      ; restore left side operator
12145  4A65 DF            push cl    ; save result of xor above
12146  4A66 FD AA         swp a  
12147  4A68 93 80         test al, $80  
12148  4A6A FD AA         swp a  
12149  4A6C C6 71 4A      jz skip_invert_a_190  
12150  4A6F FD 95         neg a 
12151  4A71             skip_invert_a_190:   
12152  4A71 FD AB         swp b
12153  4A73 FD 93 80      test bl, $80  
12154  4A76 FD AB         swp b
12155  4A78 C6 7D 4A      jz skip_invert_b_190  
12156  4A7B FD 97         neg b 
12157  4A7D             skip_invert_b_190:   
12158  4A7D AC            mul a, b ; *
12159  4A7E FD 78         mov g, a
12160  4A80 11            mov a, b
12161  4A81 EA            pop bl
12162  4A82 FD 93 80      test bl, $80
12163  4A85 C6 92 4A      jz _same_signs_190
12164  4A88 2F            mov bl, al
12165  4A89 95            not a
12166  4A8A FD 97         neg b
12167  4A8C 5B 00 00      adc a, 0
12168  4A8F FD 78         mov g, a
12169  4A91 11            mov a, b
12170  4A92             _same_signs_190:
12171  4A92 FD 38         mov c, g
12172  4A94 27            mov b, a
12173  4A95 FD F1         pop g
12174  4A97 E4            pop a
12175  4A98             ; --- END FACTORS
12176  4A98             ; --- START FACTORS
12177  4A98 D7            push a
12178  4A99 FD D8         push g
12179  4A9B 11            mov a, b
12180  4A9C FD 7A         mov g, c
12181  4A9E FA F9 FF      lea d, [bp + -7] ; $al
12182  4AA1 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12183  4AA4 FD 39         mov c, b ; And place it into C
12184  4AA6 2A            mov b, [d] ; Lower Word in B
12185  4AA7 FD D8         push g ; save 'g' as the div instruction uses it
12186  4AA9 AE            div a, b ; /, a: quotient, b: remainder
12187  4AAA FD F1         pop g
12188  4AAC FD 38         mov c, g
12189  4AAE 27            mov b, a
12190  4AAF FD F1         pop g
12191  4AB1 E4            pop a
12192  4AB2             ; --- END FACTORS
12193  4AB2 FD 15         add32 cb, ga
12194  4AB4 E4            pop a
12195  4AB5             ; --- END TERMS
12196  4AB5 FD AB         swp b
12197  4AB7 D8            push b
12198  4AB8 07 06 09      call print100
12199  4ABB 51 02 00      add sp, 2
12200  4ABE             ; --- END FUNCTION CALL
12201  4ABE FD AB         swp b
12202  4AC0 D8            push b
12203  4AC1                              
12204  4AC1 26 69 80      mov b, _s147 ; "%s"
12205  4AC4 FD AB         swp b
12206  4AC6 D8            push b
12207  4AC7 07 4F 60      call printf
12208  4ACA 51 04 00      add sp, 4
12209  4ACD             ; --- END FUNCTION CALL
12210  4ACD 0A B8 4B      jmp _if189_exit
12211  4AD0             _if189_else:
12212  4AD0             ; printf("%s", print100(c1 + ((((xl * 2) - al) * 100)  / xl))); 
12213  4AD0                              
12214  4AD0             ; --- START FUNCTION CALL
12215  4AD0                              
12216  4AD0             ; --- START FUNCTION CALL
12217  4AD0                              
12218  4AD0 FA 09 00      lea d, [bp + 9] ; $c1
12219  4AD3 2A            mov b, [d]
12220  4AD4 38 00 00      mov c, 0
12221  4AD7             ; --- START TERMS
12222  4AD7 D7            push a
12223  4AD8 11            mov a, b
12224  4AD9                              
12225  4AD9                              
12226  4AD9                              
12227  4AD9                              
12228  4AD9 FA FD FF      lea d, [bp + -3] ; $xl
12229  4ADC 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12230  4ADF FD 39         mov c, b ; And place it into C
12231  4AE1 2A            mov b, [d] ; Lower Word in B
12232  4AE2             ; --- START FACTORS
12233  4AE2 D7            push a
12234  4AE3 FD D8         push g
12235  4AE5 11            mov a, b
12236  4AE6 FD 7A         mov g, c
12237  4AE8 FD 2E 02 00   mov32 cb, $00000002
12237  4AEC 00 00 
12238  4AEE D7            push a     ; save left operand
12239  4AEF 8E            xor a, b   ; xor sign bits
12240  4AF0 FD AA         swp a      ; swap bytes
12241  4AF2 83            mov cl, al ; save result of xor into 'dl'
12242  4AF3 E4            pop a      ; restore left side operator
12243  4AF4 DF            push cl    ; save result of xor above
12244  4AF5 FD AA         swp a  
12245  4AF7 93 80         test al, $80  
12246  4AF9 FD AA         swp a  
12247  4AFB C6 00 4B      jz skip_invert_a_192  
12248  4AFE FD 95         neg a 
12249  4B00             skip_invert_a_192:   
12250  4B00 FD AB         swp b
12251  4B02 FD 93 80      test bl, $80  
12252  4B05 FD AB         swp b
12253  4B07 C6 0C 4B      jz skip_invert_b_192  
12254  4B0A FD 97         neg b 
12255  4B0C             skip_invert_b_192:   
12256  4B0C AC            mul a, b ; *
12257  4B0D FD 78         mov g, a
12258  4B0F 11            mov a, b
12259  4B10 EA            pop bl
12260  4B11 FD 93 80      test bl, $80
12261  4B14 C6 21 4B      jz _same_signs_192
12262  4B17 2F            mov bl, al
12263  4B18 95            not a
12264  4B19 FD 97         neg b
12265  4B1B 5B 00 00      adc a, 0
12266  4B1E FD 78         mov g, a
12267  4B20 11            mov a, b
12268  4B21             _same_signs_192:
12269  4B21 FD 38         mov c, g
12270  4B23 27            mov b, a
12271  4B24 FD F1         pop g
12272  4B26 E4            pop a
12273  4B27             ; --- END FACTORS
12274  4B27             ; --- START TERMS
12275  4B27 D7            push a
12276  4B28 FD D8         push g
12277  4B2A 11            mov a, b
12278  4B2B FD 7A         mov g, c
12279  4B2D FA F9 FF      lea d, [bp + -7] ; $al
12280  4B30 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12281  4B33 FD 39         mov c, b ; And place it into C
12282  4B35 2A            mov b, [d] ; Lower Word in B
12283  4B36 FD 1C         sub32 ga, cb
12284  4B38 27            mov b, a
12285  4B39 FD 38         mov c, g
12286  4B3B FD F1         pop g
12287  4B3D E4            pop a
12288  4B3E             ; --- END TERMS
12289  4B3E             ; --- START FACTORS
12290  4B3E D7            push a
12291  4B3F FD D8         push g
12292  4B41 11            mov a, b
12293  4B42 FD 7A         mov g, c
12294  4B44 FD 2E 64 00   mov32 cb, $00000064
12294  4B48 00 00 
12295  4B4A D7            push a     ; save left operand
12296  4B4B 8E            xor a, b   ; xor sign bits
12297  4B4C FD AA         swp a      ; swap bytes
12298  4B4E 83            mov cl, al ; save result of xor into 'dl'
12299  4B4F E4            pop a      ; restore left side operator
12300  4B50 DF            push cl    ; save result of xor above
12301  4B51 FD AA         swp a  
12302  4B53 93 80         test al, $80  
12303  4B55 FD AA         swp a  
12304  4B57 C6 5C 4B      jz skip_invert_a_193  
12305  4B5A FD 95         neg a 
12306  4B5C             skip_invert_a_193:   
12307  4B5C FD AB         swp b
12308  4B5E FD 93 80      test bl, $80  
12309  4B61 FD AB         swp b
12310  4B63 C6 68 4B      jz skip_invert_b_193  
12311  4B66 FD 97         neg b 
12312  4B68             skip_invert_b_193:   
12313  4B68 AC            mul a, b ; *
12314  4B69 FD 78         mov g, a
12315  4B6B 11            mov a, b
12316  4B6C EA            pop bl
12317  4B6D FD 93 80      test bl, $80
12318  4B70 C6 7D 4B      jz _same_signs_193
12319  4B73 2F            mov bl, al
12320  4B74 95            not a
12321  4B75 FD 97         neg b
12322  4B77 5B 00 00      adc a, 0
12323  4B7A FD 78         mov g, a
12324  4B7C 11            mov a, b
12325  4B7D             _same_signs_193:
12326  4B7D FD 38         mov c, g
12327  4B7F 27            mov b, a
12328  4B80 FD F1         pop g
12329  4B82 E4            pop a
12330  4B83             ; --- END FACTORS
12331  4B83             ; --- START FACTORS
12332  4B83 D7            push a
12333  4B84 FD D8         push g
12334  4B86 11            mov a, b
12335  4B87 FD 7A         mov g, c
12336  4B89 FA FD FF      lea d, [bp + -3] ; $xl
12337  4B8C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12338  4B8F FD 39         mov c, b ; And place it into C
12339  4B91 2A            mov b, [d] ; Lower Word in B
12340  4B92 FD D8         push g ; save 'g' as the div instruction uses it
12341  4B94 AE            div a, b ; /, a: quotient, b: remainder
12342  4B95 FD F1         pop g
12343  4B97 FD 38         mov c, g
12344  4B99 27            mov b, a
12345  4B9A FD F1         pop g
12346  4B9C E4            pop a
12347  4B9D             ; --- END FACTORS
12348  4B9D FD 15         add32 cb, ga
12349  4B9F E4            pop a
12350  4BA0             ; --- END TERMS
12351  4BA0 FD AB         swp b
12352  4BA2 D8            push b
12353  4BA3 07 06 09      call print100
12354  4BA6 51 02 00      add sp, 2
12355  4BA9             ; --- END FUNCTION CALL
12356  4BA9 FD AB         swp b
12357  4BAB D8            push b
12358  4BAC                              
12359  4BAC 26 69 80      mov b, _s147 ; "%s"
12360  4BAF FD AB         swp b
12361  4BB1 D8            push b
12362  4BB2 07 4F 60      call printf
12363  4BB5 51 04 00      add sp, 4
12364  4BB8             ; --- END FUNCTION CALL
12365  4BB8             _if189_exit:
12366  4BB8             ; printf(dist_1, print100((x > a) ? x : a)); 
12367  4BB8                              
12368  4BB8             ; --- START FUNCTION CALL
12369  4BB8                              
12370  4BB8             ; --- START FUNCTION CALL
12371  4BB8             _ternary195_cond:
12372  4BB8                              
12373  4BB8 FA 07 00      lea d, [bp + 7] ; $x
12374  4BBB 2A            mov b, [d]
12375  4BBC 38 00 00      mov c, 0
12376  4BBF             ; --- START RELATIONAL
12377  4BBF D7            push a
12378  4BC0 11            mov a, b
12379  4BC1 FA 0B 00      lea d, [bp + 11] ; $a
12380  4BC4 2A            mov b, [d]
12381  4BC5 38 00 00      mov c, 0
12382  4BC8 B0            cmp a, b
12383  4BC9 FD 7F         sgt ; >
12384  4BCB E4            pop a
12385  4BCC             ; --- END RELATIONAL
12386  4BCC C0 00 00      cmp b, 0
12387  4BCF C6 DC 4B      je _ternary195_FALSE
12388  4BD2             _ternary195_TRUE:
12389  4BD2                              
12390  4BD2 FA 07 00      lea d, [bp + 7] ; $x
12391  4BD5 2A            mov b, [d]
12392  4BD6 38 00 00      mov c, 0
12393  4BD9 0A E3 4B      jmp _ternary195_exit
12394  4BDC             _ternary195_FALSE:
12395  4BDC                              
12396  4BDC FA 0B 00      lea d, [bp + 11] ; $a
12397  4BDF 2A            mov b, [d]
12398  4BE0 38 00 00      mov c, 0
12399  4BE3             _ternary195_exit:
12400  4BE3 FD AB         swp b
12401  4BE5 D8            push b
12402  4BE6 07 06 09      call print100
12403  4BE9 51 02 00      add sp, 2
12404  4BEC             ; --- END FUNCTION CALL
12405  4BEC FD AB         swp b
12406  4BEE D8            push b
12407  4BEF                              
12408  4BEF 3B 2F 70      mov d, _dist_1 ; $dist_1
12409  4BF2 2A            mov b, [d]
12410  4BF3 38 00 00      mov c, 0
12411  4BF6 FD AB         swp b
12412  4BF8 D8            push b
12413  4BF9 07 4F 60      call printf
12414  4BFC 51 04 00      add sp, 4
12415  4BFF             ; --- END FUNCTION CALL
12416  4BFF             ; return; 
12417  4BFF F9            leave
12418  4C00 09            ret
12419  4C01 0A 3C 4C      jmp _if188_exit
12420  4C04             _if188_else:
12421  4C04             ; if (x != 0){ 
12422  4C04             _if196_cond:
12423  4C04                              
12424  4C04 FA 07 00      lea d, [bp + 7] ; $x
12425  4C07 2A            mov b, [d]
12426  4C08 38 00 00      mov c, 0
12427  4C0B             ; --- START RELATIONAL
12428  4C0B D7            push a
12429  4C0C 11            mov a, b
12430  4C0D FD 2E 00 00   mov32 cb, $00000000
12430  4C11 00 00 
12431  4C13 B0            cmp a, b
12432  4C14 FD 72         sneq ; !=
12433  4C16 E4            pop a
12434  4C17             ; --- END RELATIONAL
12435  4C17 C0 00 00      cmp b, 0
12436  4C1A C6 2F 4C      je _if196_else
12437  4C1D             _if196_TRUE:
12438  4C1D             ; c1 = 500; 
12439  4C1D FA 09 00      lea d, [bp + 9] ; $c1
12440  4C20 DA            push d
12441  4C21                              
12442  4C21 FD 2E F4 01   mov32 cb, $000001f4
12442  4C25 00 00 
12443  4C27 E7            pop d
12444  4C28 FD 43         mov [d], b
12445  4C2A             ; return; 
12446  4C2A F9            leave
12447  4C2B 09            ret
12448  4C2C 0A 3C 4C      jmp _if196_exit
12449  4C2F             _if196_else:
12450  4C2F             ; c1 = 700; 
12451  4C2F FA 09 00      lea d, [bp + 9] ; $c1
12452  4C32 DA            push d
12453  4C33                              
12454  4C33 FD 2E BC 02   mov32 cb, $000002bc
12454  4C37 00 00 
12455  4C39 E7            pop d
12456  4C3A FD 43         mov [d], b
12457  4C3C             _if196_exit:
12458  4C3C             _if188_exit:
12459  4C3C 0A B9 4E      jmp _if187_exit
12460  4C3F             _if187_else:
12461  4C3F             ; if (a < 0) { 
12462  4C3F             _if197_cond:
12463  4C3F                              
12464  4C3F FA 0B 00      lea d, [bp + 11] ; $a
12465  4C42 2A            mov b, [d]
12466  4C43 38 00 00      mov c, 0
12467  4C46             ; --- START RELATIONAL
12468  4C46 D7            push a
12469  4C47 11            mov a, b
12470  4C48 FD 2E 00 00   mov32 cb, $00000000
12470  4C4C 00 00 
12471  4C4E B0            cmp a, b
12472  4C4F FD 73         slt ; < (signed)
12473  4C51 E4            pop a
12474  4C52             ; --- END RELATIONAL
12475  4C52 C0 00 00      cmp b, 0
12476  4C55 C6 68 4C      je _if197_else
12477  4C58             _if197_TRUE:
12478  4C58             ; c1 = 700; 
12479  4C58 FA 09 00      lea d, [bp + 9] ; $c1
12480  4C5B DA            push d
12481  4C5C                              
12482  4C5C FD 2E BC 02   mov32 cb, $000002bc
12482  4C60 00 00 
12483  4C62 E7            pop d
12484  4C63 FD 43         mov [d], b
12485  4C65 0A B9 4E      jmp _if197_exit
12486  4C68             _if197_else:
12487  4C68             ; if (x > 0) { 
12488  4C68             _if198_cond:
12489  4C68                              
12490  4C68 FA 07 00      lea d, [bp + 7] ; $x
12491  4C6B 2A            mov b, [d]
12492  4C6C 38 00 00      mov c, 0
12493  4C6F             ; --- START RELATIONAL
12494  4C6F D7            push a
12495  4C70 11            mov a, b
12496  4C71 FD 2E 00 00   mov32 cb, $00000000
12496  4C75 00 00 
12497  4C77 B0            cmp a, b
12498  4C78 FD 7F         sgt ; >
12499  4C7A E4            pop a
12500  4C7B             ; --- END RELATIONAL
12501  4C7B C0 00 00      cmp b, 0
12502  4C7E C6 91 4C      je _if198_else
12503  4C81             _if198_TRUE:
12504  4C81             ; c1 = 100; 
12505  4C81 FA 09 00      lea d, [bp + 9] ; $c1
12506  4C84 DA            push d
12507  4C85                              
12508  4C85 FD 2E 64 00   mov32 cb, $00000064
12508  4C89 00 00 
12509  4C8B E7            pop d
12510  4C8C FD 43         mov [d], b
12511  4C8E 0A B9 4E      jmp _if198_exit
12512  4C91             _if198_else:
12513  4C91             ; if (a == 0) { 
12514  4C91             _if199_cond:
12515  4C91                              
12516  4C91 FA 0B 00      lea d, [bp + 11] ; $a
12517  4C94 2A            mov b, [d]
12518  4C95 38 00 00      mov c, 0
12519  4C98             ; --- START RELATIONAL
12520  4C98 D7            push a
12521  4C99 11            mov a, b
12522  4C9A FD 2E 00 00   mov32 cb, $00000000
12522  4C9E 00 00 
12523  4CA0 B0            cmp a, b
12524  4CA1 FD 71         seq ; ==
12525  4CA3 E4            pop a
12526  4CA4             ; --- END RELATIONAL
12527  4CA4 C0 00 00      cmp b, 0
12528  4CA7 C6 BA 4C      je _if199_else
12529  4CAA             _if199_TRUE:
12530  4CAA             ; c1 = 500; 
12531  4CAA FA 09 00      lea d, [bp + 9] ; $c1
12532  4CAD DA            push d
12533  4CAE                              
12534  4CAE FD 2E F4 01   mov32 cb, $000001f4
12534  4CB2 00 00 
12535  4CB4 E7            pop d
12536  4CB5 FD 43         mov [d], b
12537  4CB7 0A B9 4E      jmp _if199_exit
12538  4CBA             _if199_else:
12539  4CBA             ; c1 = 100; 
12540  4CBA FA 09 00      lea d, [bp + 9] ; $c1
12541  4CBD DA            push d
12542  4CBE                              
12543  4CBE FD 2E 64 00   mov32 cb, $00000064
12543  4CC2 00 00 
12544  4CC4 E7            pop d
12545  4CC5 FD 43         mov [d], b
12546  4CC7             ; if (al <= xl) 
12547  4CC7             _if200_cond:
12548  4CC7                              
12549  4CC7 FA F9 FF      lea d, [bp + -7] ; $al
12550  4CCA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12551  4CCD FD 39         mov c, b ; And place it into C
12552  4CCF 2A            mov b, [d] ; Lower Word in B
12553  4CD0             ; --- START RELATIONAL
12554  4CD0 D7            push a
12555  4CD1 FD D8         push g
12556  4CD3 11            mov a, b
12557  4CD4 FD 7A         mov g, c
12558  4CD6 FA FD FF      lea d, [bp + -3] ; $xl
12559  4CD9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12560  4CDC FD 39         mov c, b ; And place it into C
12561  4CDE 2A            mov b, [d] ; Lower Word in B
12562  4CDF FD AF         cmp32 ga, cb
12563  4CE1 FD 76         sleu
12564  4CE3 FD F1         pop g
12565  4CE5 E4            pop a
12566  4CE6             ; --- END RELATIONAL
12567  4CE6 C0 00 00      cmp b, 0
12568  4CE9 C6 7B 4D      je _if200_else
12569  4CEC             _if200_TRUE:
12570  4CEC             ; printf("%s", print100(c1 + ((al * 100) / xl))); 
12571  4CEC                              
12572  4CEC             ; --- START FUNCTION CALL
12573  4CEC                              
12574  4CEC             ; --- START FUNCTION CALL
12575  4CEC                              
12576  4CEC FA 09 00      lea d, [bp + 9] ; $c1
12577  4CEF 2A            mov b, [d]
12578  4CF0 38 00 00      mov c, 0
12579  4CF3             ; --- START TERMS
12580  4CF3 D7            push a
12581  4CF4 11            mov a, b
12582  4CF5                              
12583  4CF5                              
12584  4CF5 FA F9 FF      lea d, [bp + -7] ; $al
12585  4CF8 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12586  4CFB FD 39         mov c, b ; And place it into C
12587  4CFD 2A            mov b, [d] ; Lower Word in B
12588  4CFE             ; --- START FACTORS
12589  4CFE D7            push a
12590  4CFF FD D8         push g
12591  4D01 11            mov a, b
12592  4D02 FD 7A         mov g, c
12593  4D04 FD 2E 64 00   mov32 cb, $00000064
12593  4D08 00 00 
12594  4D0A D7            push a     ; save left operand
12595  4D0B 8E            xor a, b   ; xor sign bits
12596  4D0C FD AA         swp a      ; swap bytes
12597  4D0E 83            mov cl, al ; save result of xor into 'dl'
12598  4D0F E4            pop a      ; restore left side operator
12599  4D10 DF            push cl    ; save result of xor above
12600  4D11 FD AA         swp a  
12601  4D13 93 80         test al, $80  
12602  4D15 FD AA         swp a  
12603  4D17 C6 1C 4D      jz skip_invert_a_201  
12604  4D1A FD 95         neg a 
12605  4D1C             skip_invert_a_201:   
12606  4D1C FD AB         swp b
12607  4D1E FD 93 80      test bl, $80  
12608  4D21 FD AB         swp b
12609  4D23 C6 28 4D      jz skip_invert_b_201  
12610  4D26 FD 97         neg b 
12611  4D28             skip_invert_b_201:   
12612  4D28 AC            mul a, b ; *
12613  4D29 FD 78         mov g, a
12614  4D2B 11            mov a, b
12615  4D2C EA            pop bl
12616  4D2D FD 93 80      test bl, $80
12617  4D30 C6 3D 4D      jz _same_signs_201
12618  4D33 2F            mov bl, al
12619  4D34 95            not a
12620  4D35 FD 97         neg b
12621  4D37 5B 00 00      adc a, 0
12622  4D3A FD 78         mov g, a
12623  4D3C 11            mov a, b
12624  4D3D             _same_signs_201:
12625  4D3D FD 38         mov c, g
12626  4D3F 27            mov b, a
12627  4D40 FD F1         pop g
12628  4D42 E4            pop a
12629  4D43             ; --- END FACTORS
12630  4D43             ; --- START FACTORS
12631  4D43 D7            push a
12632  4D44 FD D8         push g
12633  4D46 11            mov a, b
12634  4D47 FD 7A         mov g, c
12635  4D49 FA FD FF      lea d, [bp + -3] ; $xl
12636  4D4C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12637  4D4F FD 39         mov c, b ; And place it into C
12638  4D51 2A            mov b, [d] ; Lower Word in B
12639  4D52 FD D8         push g ; save 'g' as the div instruction uses it
12640  4D54 AE            div a, b ; /, a: quotient, b: remainder
12641  4D55 FD F1         pop g
12642  4D57 FD 38         mov c, g
12643  4D59 27            mov b, a
12644  4D5A FD F1         pop g
12645  4D5C E4            pop a
12646  4D5D             ; --- END FACTORS
12647  4D5D FD 15         add32 cb, ga
12648  4D5F E4            pop a
12649  4D60             ; --- END TERMS
12650  4D60 FD AB         swp b
12651  4D62 D8            push b
12652  4D63 07 06 09      call print100
12653  4D66 51 02 00      add sp, 2
12654  4D69             ; --- END FUNCTION CALL
12655  4D69 FD AB         swp b
12656  4D6B D8            push b
12657  4D6C                              
12658  4D6C 26 69 80      mov b, _s147 ; "%s"
12659  4D6F FD AB         swp b
12660  4D71 D8            push b
12661  4D72 07 4F 60      call printf
12662  4D75 51 04 00      add sp, 4
12663  4D78             ; --- END FUNCTION CALL
12664  4D78 0A 63 4E      jmp _if200_exit
12665  4D7B             _if200_else:
12666  4D7B             ; printf("%s", print100(c1 + ((((al * 2) - xl) * 100) / al))); 
12667  4D7B                              
12668  4D7B             ; --- START FUNCTION CALL
12669  4D7B                              
12670  4D7B             ; --- START FUNCTION CALL
12671  4D7B                              
12672  4D7B FA 09 00      lea d, [bp + 9] ; $c1
12673  4D7E 2A            mov b, [d]
12674  4D7F 38 00 00      mov c, 0
12675  4D82             ; --- START TERMS
12676  4D82 D7            push a
12677  4D83 11            mov a, b
12678  4D84                              
12679  4D84                              
12680  4D84                              
12681  4D84                              
12682  4D84 FA F9 FF      lea d, [bp + -7] ; $al
12683  4D87 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12684  4D8A FD 39         mov c, b ; And place it into C
12685  4D8C 2A            mov b, [d] ; Lower Word in B
12686  4D8D             ; --- START FACTORS
12687  4D8D D7            push a
12688  4D8E FD D8         push g
12689  4D90 11            mov a, b
12690  4D91 FD 7A         mov g, c
12691  4D93 FD 2E 02 00   mov32 cb, $00000002
12691  4D97 00 00 
12692  4D99 D7            push a     ; save left operand
12693  4D9A 8E            xor a, b   ; xor sign bits
12694  4D9B FD AA         swp a      ; swap bytes
12695  4D9D 83            mov cl, al ; save result of xor into 'dl'
12696  4D9E E4            pop a      ; restore left side operator
12697  4D9F DF            push cl    ; save result of xor above
12698  4DA0 FD AA         swp a  
12699  4DA2 93 80         test al, $80  
12700  4DA4 FD AA         swp a  
12701  4DA6 C6 AB 4D      jz skip_invert_a_203  
12702  4DA9 FD 95         neg a 
12703  4DAB             skip_invert_a_203:   
12704  4DAB FD AB         swp b
12705  4DAD FD 93 80      test bl, $80  
12706  4DB0 FD AB         swp b
12707  4DB2 C6 B7 4D      jz skip_invert_b_203  
12708  4DB5 FD 97         neg b 
12709  4DB7             skip_invert_b_203:   
12710  4DB7 AC            mul a, b ; *
12711  4DB8 FD 78         mov g, a
12712  4DBA 11            mov a, b
12713  4DBB EA            pop bl
12714  4DBC FD 93 80      test bl, $80
12715  4DBF C6 CC 4D      jz _same_signs_203
12716  4DC2 2F            mov bl, al
12717  4DC3 95            not a
12718  4DC4 FD 97         neg b
12719  4DC6 5B 00 00      adc a, 0
12720  4DC9 FD 78         mov g, a
12721  4DCB 11            mov a, b
12722  4DCC             _same_signs_203:
12723  4DCC FD 38         mov c, g
12724  4DCE 27            mov b, a
12725  4DCF FD F1         pop g
12726  4DD1 E4            pop a
12727  4DD2             ; --- END FACTORS
12728  4DD2             ; --- START TERMS
12729  4DD2 D7            push a
12730  4DD3 FD D8         push g
12731  4DD5 11            mov a, b
12732  4DD6 FD 7A         mov g, c
12733  4DD8 FA FD FF      lea d, [bp + -3] ; $xl
12734  4DDB 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12735  4DDE FD 39         mov c, b ; And place it into C
12736  4DE0 2A            mov b, [d] ; Lower Word in B
12737  4DE1 FD 1C         sub32 ga, cb
12738  4DE3 27            mov b, a
12739  4DE4 FD 38         mov c, g
12740  4DE6 FD F1         pop g
12741  4DE8 E4            pop a
12742  4DE9             ; --- END TERMS
12743  4DE9             ; --- START FACTORS
12744  4DE9 D7            push a
12745  4DEA FD D8         push g
12746  4DEC 11            mov a, b
12747  4DED FD 7A         mov g, c
12748  4DEF FD 2E 64 00   mov32 cb, $00000064
12748  4DF3 00 00 
12749  4DF5 D7            push a     ; save left operand
12750  4DF6 8E            xor a, b   ; xor sign bits
12751  4DF7 FD AA         swp a      ; swap bytes
12752  4DF9 83            mov cl, al ; save result of xor into 'dl'
12753  4DFA E4            pop a      ; restore left side operator
12754  4DFB DF            push cl    ; save result of xor above
12755  4DFC FD AA         swp a  
12756  4DFE 93 80         test al, $80  
12757  4E00 FD AA         swp a  
12758  4E02 C6 07 4E      jz skip_invert_a_204  
12759  4E05 FD 95         neg a 
12760  4E07             skip_invert_a_204:   
12761  4E07 FD AB         swp b
12762  4E09 FD 93 80      test bl, $80  
12763  4E0C FD AB         swp b
12764  4E0E C6 13 4E      jz skip_invert_b_204  
12765  4E11 FD 97         neg b 
12766  4E13             skip_invert_b_204:   
12767  4E13 AC            mul a, b ; *
12768  4E14 FD 78         mov g, a
12769  4E16 11            mov a, b
12770  4E17 EA            pop bl
12771  4E18 FD 93 80      test bl, $80
12772  4E1B C6 28 4E      jz _same_signs_204
12773  4E1E 2F            mov bl, al
12774  4E1F 95            not a
12775  4E20 FD 97         neg b
12776  4E22 5B 00 00      adc a, 0
12777  4E25 FD 78         mov g, a
12778  4E27 11            mov a, b
12779  4E28             _same_signs_204:
12780  4E28 FD 38         mov c, g
12781  4E2A 27            mov b, a
12782  4E2B FD F1         pop g
12783  4E2D E4            pop a
12784  4E2E             ; --- END FACTORS
12785  4E2E             ; --- START FACTORS
12786  4E2E D7            push a
12787  4E2F FD D8         push g
12788  4E31 11            mov a, b
12789  4E32 FD 7A         mov g, c
12790  4E34 FA F9 FF      lea d, [bp + -7] ; $al
12791  4E37 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12792  4E3A FD 39         mov c, b ; And place it into C
12793  4E3C 2A            mov b, [d] ; Lower Word in B
12794  4E3D FD D8         push g ; save 'g' as the div instruction uses it
12795  4E3F AE            div a, b ; /, a: quotient, b: remainder
12796  4E40 FD F1         pop g
12797  4E42 FD 38         mov c, g
12798  4E44 27            mov b, a
12799  4E45 FD F1         pop g
12800  4E47 E4            pop a
12801  4E48             ; --- END FACTORS
12802  4E48 FD 15         add32 cb, ga
12803  4E4A E4            pop a
12804  4E4B             ; --- END TERMS
12805  4E4B FD AB         swp b
12806  4E4D D8            push b
12807  4E4E 07 06 09      call print100
12808  4E51 51 02 00      add sp, 2
12809  4E54             ; --- END FUNCTION CALL
12810  4E54 FD AB         swp b
12811  4E56 D8            push b
12812  4E57                              
12813  4E57 26 69 80      mov b, _s147 ; "%s"
12814  4E5A FD AB         swp b
12815  4E5C D8            push b
12816  4E5D 07 4F 60      call printf
12817  4E60 51 04 00      add sp, 4
12818  4E63             ; --- END FUNCTION CALL
12819  4E63             _if200_exit:
12820  4E63             ; printf(dist_1, print100((xl > al) ? xl : al)); 
12821  4E63                              
12822  4E63             ; --- START FUNCTION CALL
12823  4E63                              
12824  4E63             ; --- START FUNCTION CALL
12825  4E63             _ternary206_cond:
12826  4E63                              
12827  4E63 FA FD FF      lea d, [bp + -3] ; $xl
12828  4E66 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12829  4E69 FD 39         mov c, b ; And place it into C
12830  4E6B 2A            mov b, [d] ; Lower Word in B
12831  4E6C             ; --- START RELATIONAL
12832  4E6C D7            push a
12833  4E6D FD D8         push g
12834  4E6F 11            mov a, b
12835  4E70 FD 7A         mov g, c
12836  4E72 FA F9 FF      lea d, [bp + -7] ; $al
12837  4E75 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12838  4E78 FD 39         mov c, b ; And place it into C
12839  4E7A 2A            mov b, [d] ; Lower Word in B
12840  4E7B FD AF         cmp32 ga, cb
12841  4E7D FD 81         sgu
12842  4E7F FD F1         pop g
12843  4E81 E4            pop a
12844  4E82             ; --- END RELATIONAL
12845  4E82 C0 00 00      cmp b, 0
12846  4E85 C6 94 4E      je _ternary206_FALSE
12847  4E88             _ternary206_TRUE:
12848  4E88                              
12849  4E88 FA FD FF      lea d, [bp + -3] ; $xl
12850  4E8B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12851  4E8E FD 39         mov c, b ; And place it into C
12852  4E90 2A            mov b, [d] ; Lower Word in B
12853  4E91 0A 9D 4E      jmp _ternary206_exit
12854  4E94             _ternary206_FALSE:
12855  4E94                              
12856  4E94 FA F9 FF      lea d, [bp + -7] ; $al
12857  4E97 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
12858  4E9A FD 39         mov c, b ; And place it into C
12859  4E9C 2A            mov b, [d] ; Lower Word in B
12860  4E9D             _ternary206_exit:
12861  4E9D FD AB         swp b
12862  4E9F D8            push b
12863  4EA0 07 06 09      call print100
12864  4EA3 51 02 00      add sp, 2
12865  4EA6             ; --- END FUNCTION CALL
12866  4EA6 FD AB         swp b
12867  4EA8 D8            push b
12868  4EA9                              
12869  4EA9 3B 2F 70      mov d, _dist_1 ; $dist_1
12870  4EAC 2A            mov b, [d]
12871  4EAD 38 00 00      mov c, 0
12872  4EB0 FD AB         swp b
12873  4EB2 D8            push b
12874  4EB3 07 4F 60      call printf
12875  4EB6 51 04 00      add sp, 4
12876  4EB9             ; --- END FUNCTION CALL
12877  4EB9             _if199_exit:
12878  4EB9             _if198_exit:
12879  4EB9             _if197_exit:
12880  4EB9             _if187_exit:
12881  4EB9 F9            leave
12882  4EBA 09            ret
12883  4EBB             
12884  4EBB             ship_destroyed:
12885  4EBB F8 00 00      enter 0 ; (push bp; mov bp, sp)
12886  4EBE             ; puts("The Enterprise has been destroyed. The Federation will be conquered.\n"); 
12887  4EBE                              
12888  4EBE             ; --- START FUNCTION CALL
12889  4EBE                              
12890  4EBE 26 6C 80      mov b, _s148 ; "The Enterprise has been destroyed. The Federation will be conquered.\n"
12891  4EC1 FD AB         swp b
12892  4EC3 D8            push b
12893  4EC4 07 5C 69      call puts
12894  4EC7 51 02 00      add sp, 2
12895  4ECA             ; --- END FUNCTION CALL
12896  4ECA             ; end_of_time(); 
12897  4ECA                              
12898  4ECA             ; --- START FUNCTION CALL
12899  4ECA 07 CF 4E      call end_of_time
12900  4ECD F9            leave
12901  4ECE 09            ret
12902  4ECF             
12903  4ECF             end_of_time:
12904  4ECF F8 00 00      enter 0 ; (push bp; mov bp, sp)
12905  4ED2             ; printf("It is stardate %d.\n\n",  FROM_FIXED(stardate)); 
12906  4ED2                              
12907  4ED2             ; --- START FUNCTION CALL
12908  4ED2                              
12909  4ED2             ; --- START FUNCTION CALL
12910  4ED2                              
12911  4ED2 3B 5C 6E      mov d, _stardate ; $stardate
12912  4ED5 2A            mov b, [d]
12913  4ED6 38 00 00      mov c, 0
12914  4ED9 FD AB         swp b
12915  4EDB D8            push b
12916  4EDC 07 68 04      call FROM_FIXED
12917  4EDF 51 02 00      add sp, 2
12918  4EE2             ; --- END FUNCTION CALL
12919  4EE2 FD AB         swp b
12920  4EE4 D8            push b
12921  4EE5                              
12922  4EE5 26 B2 80      mov b, _s149 ; "It is stardate %d.\n\n"
12923  4EE8 FD AB         swp b
12924  4EEA D8            push b
12925  4EEB 07 4F 60      call printf
12926  4EEE 51 04 00      add sp, 4
12927  4EF1             ; --- END FUNCTION CALL
12928  4EF1             ; resign_commision(); 
12929  4EF1                              
12930  4EF1             ; --- START FUNCTION CALL
12931  4EF1 07 F6 4E      call resign_commision
12932  4EF4 F9            leave
12933  4EF5 09            ret
12934  4EF6             
12935  4EF6             resign_commision:
12936  4EF6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
12937  4EF9             ; printf("There were %d Klingon Battlecruisers left at the end of your mission.\n\n", klingons_left); 
12938  4EF9                              
12939  4EF9             ; --- START FUNCTION CALL
12940  4EF9                              
12941  4EF9 3B 36 6E      mov d, _klingons_left ; $klingons_left
12942  4EFC 32            mov bl, [d]
12943  4EFD A7 00         mov bh, 0
12944  4EFF 38 00 00      mov c, 0
12945  4F02 FD AA         swp a
12946  4F04 D8            push b
12947  4F05                              
12948  4F05 26 C7 80      mov b, _s150 ; "There were %d Klingon Battlecruisers left at the end of your mission.\n\n"
12949  4F08 FD AB         swp b
12950  4F0A D8            push b
12951  4F0B 07 4F 60      call printf
12952  4F0E 51 03 00      add sp, 3
12953  4F11             ; --- END FUNCTION CALL
12954  4F11             ; end_of_game(); 
12955  4F11                              
12956  4F11             ; --- START FUNCTION CALL
12957  4F11 07 BB 4F      call end_of_game
12958  4F14 F9            leave
12959  4F15 09            ret
12960  4F16             
12961  4F16             won_game:
12962  4F16 F8 00 00      enter 0 ; (push bp; mov bp, sp)
12963  4F19             ; puts("Congratulations, Captain!  The last Klingon Battle Cruiser\n menacing the Federation has been destoyed.\n"); 
12964  4F19                              
12965  4F19             ; --- START FUNCTION CALL
12966  4F19                              
12967  4F19 26 0F 81      mov b, _s151 ; "Congratulations, Captain!  The last Klingon Battle Cruiser\n menacing the Federation has been destoyed.\n"
12968  4F1C FD AB         swp b
12969  4F1E D8            push b
12970  4F1F 07 5C 69      call puts
12971  4F22 51 02 00      add sp, 2
12972  4F25             ; --- END FUNCTION CALL
12973  4F25             ; if (FROM_FIXED(stardate) - time_start > 0) 
12974  4F25             _if207_cond:
12975  4F25                              
12976  4F25             ; --- START FUNCTION CALL
12977  4F25                              
12978  4F25 3B 5C 6E      mov d, _stardate ; $stardate
12979  4F28 2A            mov b, [d]
12980  4F29 38 00 00      mov c, 0
12981  4F2C FD AB         swp b
12982  4F2E D8            push b
12983  4F2F 07 68 04      call FROM_FIXED
12984  4F32 51 02 00      add sp, 2
12985  4F35             ; --- END FUNCTION CALL
12986  4F35             ; --- START TERMS
12987  4F35 D7            push a
12988  4F36 11            mov a, b
12989  4F37 3B 40 6E      mov d, _time_start ; $time_start
12990  4F3A 2A            mov b, [d]
12991  4F3B 38 00 00      mov c, 0
12992  4F3E 60            sub a, b
12993  4F3F 27            mov b, a
12994  4F40 E4            pop a
12995  4F41             ; --- END TERMS
12996  4F41             ; --- START RELATIONAL
12997  4F41 D7            push a
12998  4F42 11            mov a, b
12999  4F43 FD 2E 00 00   mov32 cb, $00000000
12999  4F47 00 00 
13000  4F49 B0            cmp a, b
13001  4F4A FD 81         sgu ; > (unsigned)
13002  4F4C E4            pop a
13003  4F4D             ; --- END RELATIONAL
13004  4F4D C0 00 00      cmp b, 0
13005  4F50 C6 B6 4F      je _if207_exit
13006  4F53             _if207_TRUE:
13007  4F53             ; printf("Your efficiency rating is %s\n", 
13008  4F53                              
13009  4F53             ; --- START FUNCTION CALL
13010  4F53                              
13011  4F53             ; --- START FUNCTION CALL
13012  4F53                              
13013  4F53             ; --- START FUNCTION CALL
13014  4F53                              
13015  4F53             ; --- START FUNCTION CALL
13016  4F53                              
13017  4F53 3B 35 6E      mov d, _total_klingons ; $total_klingons
13018  4F56 32            mov bl, [d]
13019  4F57 A7 00         mov bh, 0
13020  4F59 38 00 00      mov c, 0
13021  4F5C FD AB         swp b
13022  4F5E D8            push b
13023  4F5F 07 8B 04      call TO_FIXED00
13024  4F62 51 02 00      add sp, 2
13025  4F65             ; --- END FUNCTION CALL
13026  4F65             ; --- START FACTORS
13027  4F65 D7            push a
13028  4F66 FD D8         push g
13029  4F68 11            mov a, b
13030  4F69 FD 7A         mov g, c
13031  4F6B                              
13032  4F6B             ; --- START FUNCTION CALL
13033  4F6B                              
13034  4F6B 3B 5C 6E      mov d, _stardate ; $stardate
13035  4F6E 2A            mov b, [d]
13036  4F6F 38 00 00      mov c, 0
13037  4F72 FD AB         swp b
13038  4F74 D8            push b
13039  4F75 07 68 04      call FROM_FIXED
13040  4F78 51 02 00      add sp, 2
13041  4F7B             ; --- END FUNCTION CALL
13042  4F7B             ; --- START TERMS
13043  4F7B D7            push a
13044  4F7C 11            mov a, b
13045  4F7D 3B 40 6E      mov d, _time_start ; $time_start
13046  4F80 2A            mov b, [d]
13047  4F81 38 00 00      mov c, 0
13048  4F84 60            sub a, b
13049  4F85 27            mov b, a
13050  4F86 E4            pop a
13051  4F87             ; --- END TERMS
13052  4F87 FD D8         push g ; save 'g' as the div instruction uses it
13053  4F89 AE            div a, b ; /, a: quotient, b: remainder
13054  4F8A FD F1         pop g
13055  4F8C FD 38         mov c, g
13056  4F8E 27            mov b, a
13057  4F8F FD F1         pop g
13058  4F91 E4            pop a
13059  4F92             ; --- END FACTORS
13060  4F92 FD AB         swp b
13061  4F94 D8            push b
13062  4F95 07 11 5C      call square00
13063  4F98 51 02 00      add sp, 2
13064  4F9B             ; --- END FUNCTION CALL
13065  4F9B FD AB         swp b
13066  4F9D D8            push b
13067  4F9E 07 06 09      call print100
13068  4FA1 51 02 00      add sp, 2
13069  4FA4             ; --- END FUNCTION CALL
13070  4FA4 FD AB         swp b
13071  4FA6 D8            push b
13072  4FA7                              
13073  4FA7 26 77 81      mov b, _s152 ; "Your efficiency rating is %s\n"
13074  4FAA FD AB         swp b
13075  4FAC D8            push b
13076  4FAD 07 4F 60      call printf
13077  4FB0 51 04 00      add sp, 4
13078  4FB3             ; --- END FUNCTION CALL
13079  4FB3 0A B6 4F      jmp _if207_exit
13080  4FB6             _if207_exit:
13081  4FB6             ; end_of_game(); 
13082  4FB6                              
13083  4FB6             ; --- START FUNCTION CALL
13084  4FB6 07 BB 4F      call end_of_game
13085  4FB9 F9            leave
13086  4FBA 09            ret
13087  4FBB             
13088  4FBB             end_of_game:
13089  4FBB F8 00 00      enter 0 ; (push bp; mov bp, sp)
13090  4FBE             ; char x[4]; 
13091  4FBE 52 04 00      sub sp, 4
13092  4FC1             ; if (starbases_left > 0) { 
13093  4FC1             _if209_cond:
13094  4FC1                              
13095  4FC1 3B 60 6D      mov d, _starbases_left ; $starbases_left
13096  4FC4 32            mov bl, [d]
13097  4FC5 A7 00         mov bh, 0
13098  4FC7 38 00 00      mov c, 0
13099  4FCA             ; --- START RELATIONAL
13100  4FCA D7            push a
13101  4FCB 11            mov a, b
13102  4FCC FD 2E 00 00   mov32 cb, $00000000
13102  4FD0 00 00 
13103  4FD2 B0            cmp a, b
13104  4FD3 FD 7F         sgt ; >
13105  4FD5 E4            pop a
13106  4FD6             ; --- END RELATIONAL
13107  4FD6 C0 00 00      cmp b, 0
13108  4FD9 C6 26 50      je _if209_exit
13109  4FDC             _if209_TRUE:
13110  4FDC             ; puts("The Federation is in need of a new starship commander"); 
13111  4FDC                              
13112  4FDC             ; --- START FUNCTION CALL
13113  4FDC                              
13114  4FDC 26 95 81      mov b, _s153 ; "The Federation is in need of a new starship commander"
13115  4FDF FD AB         swp b
13116  4FE1 D8            push b
13117  4FE2 07 5C 69      call puts
13118  4FE5 51 02 00      add sp, 2
13119  4FE8             ; --- END FUNCTION CALL
13120  4FE8             ; puts(" for a similar mission.\n"); 
13121  4FE8                              
13122  4FE8             ; --- START FUNCTION CALL
13123  4FE8                              
13124  4FE8 26 CB 81      mov b, _s154 ; " for a similar mission.\n"
13125  4FEB FD AB         swp b
13126  4FED D8            push b
13127  4FEE 07 5C 69      call puts
13128  4FF1 51 02 00      add sp, 2
13129  4FF4             ; --- END FUNCTION CALL
13130  4FF4             ; puts("If there is a volunteer, let him step forward and"); 
13131  4FF4                              
13132  4FF4             ; --- START FUNCTION CALL
13133  4FF4                              
13134  4FF4 26 E4 81      mov b, _s155 ; "If there is a volunteer, let him step forward and"
13135  4FF7 FD AB         swp b
13136  4FF9 D8            push b
13137  4FFA 07 5C 69      call puts
13138  4FFD 51 02 00      add sp, 2
13139  5000             ; --- END FUNCTION CALL
13140  5000             ; puts(" enter 'aye': "); 
13141  5000                              
13142  5000             ; --- START FUNCTION CALL
13143  5000                              
13144  5000 26 16 82      mov b, _s156 ; " enter 'aye': "
13145  5003 FD AB         swp b
13146  5005 D8            push b
13147  5006 07 5C 69      call puts
13148  5009 51 02 00      add sp, 2
13149  500C             ; --- END FUNCTION CALL
13150  500C             ; input(x,4); 
13151  500C                              
13152  500C             ; --- START FUNCTION CALL
13153  500C                              
13154  500C FD 2E 04 00   mov32 cb, $00000004
13154  5010 00 00 
13155  5012 DD            push bl
13156  5013                              
13157  5013 FA FD FF      lea d, [bp + -3] ; $x
13158  5016 2D            mov b, d
13159  5017 38 00 00      mov c, 0
13160  501A FD AB         swp b
13161  501C D8            push b
13162  501D 07 83 05      call input
13163  5020 51 03 00      add sp, 3
13164  5023             ; --- END FUNCTION CALL
13165  5023 0A 26 50      jmp _if209_exit
13166  5026             _if209_exit:
13167  5026             ; exit(); 
13168  5026                              
13169  5026             ; --- START FUNCTION CALL
13170  5026 07 10 5E      call exit
13171  5029 F9            leave
13172  502A 09            ret
13173  502B             
13174  502B             klingons_move:
13175  502B F8 00 00      enter 0 ; (push bp; mov bp, sp)
13176  502E             ; int i; 
13177  502E 52 02 00      sub sp, 2
13178  5031             ; struct klingon *k; 
13179  5031 52 02 00      sub sp, 2
13180  5034             ; k = &kdata; 
13181  5034 FA FD FF      lea d, [bp + -3] ; $k
13182  5037 DA            push d
13183  5038                              
13184  5038 3B 28 6E      mov d, _kdata_data ; $kdata
13185  503B 2D            mov b, d
13186  503C E7            pop d
13187  503D FD 43         mov [d], b
13188  503F             ; for (i = 0; i <= 2; i++) { 
13189  503F             _for210_init:
13190  503F FA FF FF      lea d, [bp + -1] ; $i
13191  5042 DA            push d
13192  5043                              
13193  5043 FD 2E 00 00   mov32 cb, $00000000
13193  5047 00 00 
13194  5049 E7            pop d
13195  504A FD 43         mov [d], b
13196  504C             _for210_cond:
13197  504C                              
13198  504C FA FF FF      lea d, [bp + -1] ; $i
13199  504F 2A            mov b, [d]
13200  5050 38 00 00      mov c, 0
13201  5053             ; --- START RELATIONAL
13202  5053 D7            push a
13203  5054 11            mov a, b
13204  5055 FD 2E 02 00   mov32 cb, $00000002
13204  5059 00 00 
13205  505B B0            cmp a, b
13206  505C FD 74         sle ; <= (signed)
13207  505E E4            pop a
13208  505F             ; --- END RELATIONAL
13209  505F C0 00 00      cmp b, 0
13210  5062 C6 EA 50      je _for210_exit
13211  5065             _for210_block:
13212  5065             ; if (k->energy > 0) { 
13213  5065             _if211_cond:
13214  5065                              
13215  5065 FA FD FF      lea d, [bp + -3] ; $k
13216  5068 FD 2A         mov d, [d]
13217  506A 58 02 00      add d, 2
13218  506D 2A            mov b, [d]
13219  506E 38 00 00      mov c, 0
13220  5071             ; --- START RELATIONAL
13221  5071 D7            push a
13222  5072 11            mov a, b
13223  5073 FD 2E 00 00   mov32 cb, $00000000
13223  5077 00 00 
13224  5079 B0            cmp a, b
13225  507A FD 7F         sgt ; >
13226  507C E4            pop a
13227  507D             ; --- END RELATIONAL
13228  507D C0 00 00      cmp b, 0
13229  5080 C6 C5 50      je _if211_exit
13230  5083             _if211_TRUE:
13231  5083             ; wipe_klingon(k); 
13232  5083                              
13233  5083             ; --- START FUNCTION CALL
13234  5083                              
13235  5083 FA FD FF      lea d, [bp + -3] ; $k
13236  5086 2A            mov b, [d]
13237  5087 38 00 00      mov c, 0
13238  508A FD AB         swp b
13239  508C D8            push b
13240  508D 07 7C 2D      call wipe_klingon
13241  5090 51 02 00      add sp, 2
13242  5093             ; --- END FUNCTION CALL
13243  5093             ; find_set_empty_place(	3, k->y, k->x); 
13244  5093                              
13245  5093             ; --- START FUNCTION CALL
13246  5093                              
13247  5093 FA FD FF      lea d, [bp + -3] ; $k
13248  5096 FD 2A         mov d, [d]
13249  5098 58 01 00      add d, 1
13250  509B 32            mov bl, [d]
13251  509C A7 00         mov bh, 0
13252  509E 38 00 00      mov c, 0
13253  50A1 FD AB         swp b
13254  50A3 D8            push b
13255  50A4                              
13256  50A4 FA FD FF      lea d, [bp + -3] ; $k
13257  50A7 FD 2A         mov d, [d]
13258  50A9 58 00 00      add d, 0
13259  50AC 32            mov bl, [d]
13260  50AD A7 00         mov bh, 0
13261  50AF 38 00 00      mov c, 0
13262  50B2 FD AB         swp b
13263  50B4 D8            push b
13264  50B5                              
13265  50B5 FD 2E 03 00   mov32 cb, $00000003
13265  50B9 00 00 
13266  50BB DD            push bl
13267  50BC 07 4C 58      call find_set_empty_place
13268  50BF 51 05 00      add sp, 5
13269  50C2             ; --- END FUNCTION CALL
13270  50C2 0A C5 50      jmp _if211_exit
13271  50C5             _if211_exit:
13272  50C5             ; k++; 
13273  50C5                              
13274  50C5 FA FD FF      lea d, [bp + -3] ; $k
13275  50C8 2A            mov b, [d]
13276  50C9 38 00 00      mov c, 0
13277  50CC 11            mov a, b
13278  50CD FD 77         inc b
13279  50CF FD 77         inc b
13280  50D1 FA FD FF      lea d, [bp + -3] ; $k
13281  50D4 FD 43         mov [d], b
13282  50D6 27            mov b, a
13283  50D7             _for210_update:
13284  50D7                              
13285  50D7 FA FF FF      lea d, [bp + -1] ; $i
13286  50DA 2A            mov b, [d]
13287  50DB 38 00 00      mov c, 0
13288  50DE 11            mov a, b
13289  50DF FD 77         inc b
13290  50E1 FA FF FF      lea d, [bp + -1] ; $i
13291  50E4 FD 43         mov [d], b
13292  50E6 27            mov b, a
13293  50E7 0A 4C 50      jmp _for210_cond
13294  50EA             _for210_exit:
13295  50EA             ; klingons_shoot(); 
13296  50EA                              
13297  50EA             ; --- START FUNCTION CALL
13298  50EA 07 EF 50      call klingons_shoot
13299  50ED F9            leave
13300  50EE 09            ret
13301  50EF             
13302  50EF             klingons_shoot:
13303  50EF F8 00 00      enter 0 ; (push bp; mov bp, sp)
13304  50F2             ; unsigned char r; 
13305  50F2 52 01 00      sub sp, 1
13306  50F5             ; long unsigned int h; 
13307  50F5 52 04 00      sub sp, 4
13308  50F8             ; unsigned char i; 
13309  50F8 52 01 00      sub sp, 1
13310  50FB             ; struct klingon *k; 
13311  50FB 52 02 00      sub sp, 2
13312  50FE             ; long unsigned int ratio; 
13313  50FE 52 04 00      sub sp, 4
13314  5101             ; k = &kdata; 
13315  5101 FA F9 FF      lea d, [bp + -7] ; $k
13316  5104 DA            push d
13317  5105                              
13318  5105 3B 28 6E      mov d, _kdata_data ; $kdata
13319  5108 2D            mov b, d
13320  5109 E7            pop d
13321  510A FD 43         mov [d], b
13322  510C             ; if (klingons <= 0) 
13323  510C             _if212_cond:
13324  510C                              
13325  510C 3B 34 6E      mov d, _klingons ; $klingons
13326  510F 32            mov bl, [d]
13327  5110 A7 00         mov bh, 0
13328  5112 38 00 00      mov c, 0
13329  5115             ; --- START RELATIONAL
13330  5115 D7            push a
13331  5116 11            mov a, b
13332  5117 FD 2E 00 00   mov32 cb, $00000000
13332  511B 00 00 
13333  511D B0            cmp a, b
13334  511E FD 76         sleu ; <= (unsigned)
13335  5120 E4            pop a
13336  5121             ; --- END RELATIONAL
13337  5121 C0 00 00      cmp b, 0
13338  5124 C6 2C 51      je _if212_exit
13339  5127             _if212_TRUE:
13340  5127             ; return; 
13341  5127 F9            leave
13342  5128 09            ret
13343  5129 0A 2C 51      jmp _if212_exit
13344  512C             _if212_exit:
13345  512C             ; if (docked) { 
13346  512C             _if213_cond:
13347  512C                              
13348  512C 3B 81 6D      mov d, _docked ; $docked
13349  512F 32            mov bl, [d]
13350  5130 A7 00         mov bh, 0
13351  5132 38 00 00      mov c, 0
13352  5135 C0 00 00      cmp b, 0
13353  5138 C6 4C 51      je _if213_exit
13354  513B             _if213_TRUE:
13355  513B             ; puts("Starbase shields protect the Enterprise\n"); 
13356  513B                              
13357  513B             ; --- START FUNCTION CALL
13358  513B                              
13359  513B 26 25 82      mov b, _s157 ; "Starbase shields protect the Enterprise\n"
13360  513E FD AB         swp b
13361  5140 D8            push b
13362  5141 07 5C 69      call puts
13363  5144 51 02 00      add sp, 2
13364  5147             ; --- END FUNCTION CALL
13365  5147             ; return; 
13366  5147 F9            leave
13367  5148 09            ret
13368  5149 0A 4C 51      jmp _if213_exit
13369  514C             _if213_exit:
13370  514C             ; for (i = 0; i <= 2; i++) { 
13371  514C             _for214_init:
13372  514C FA FB FF      lea d, [bp + -5] ; $i
13373  514F DA            push d
13374  5150                              
13375  5150 FD 2E 00 00   mov32 cb, $00000000
13375  5154 00 00 
13376  5156 E7            pop d
13377  5157 FD 3E         mov [d], bl
13378  5159             _for214_cond:
13379  5159                              
13380  5159 FA FB FF      lea d, [bp + -5] ; $i
13381  515C 32            mov bl, [d]
13382  515D A7 00         mov bh, 0
13383  515F 38 00 00      mov c, 0
13384  5162             ; --- START RELATIONAL
13385  5162 D7            push a
13386  5163 11            mov a, b
13387  5164 FD 2E 02 00   mov32 cb, $00000002
13387  5168 00 00 
13388  516A B0            cmp a, b
13389  516B FD 76         sleu ; <= (unsigned)
13390  516D E4            pop a
13391  516E             ; --- END RELATIONAL
13392  516E C0 00 00      cmp b, 0
13393  5171 C6 04 55      je _for214_exit
13394  5174             _for214_block:
13395  5174             ; if (k->energy > 0) { 
13396  5174             _if215_cond:
13397  5174                              
13398  5174 FA F9 FF      lea d, [bp + -7] ; $k
13399  5177 FD 2A         mov d, [d]
13400  5179 58 02 00      add d, 2
13401  517C 2A            mov b, [d]
13402  517D 38 00 00      mov c, 0
13403  5180             ; --- START RELATIONAL
13404  5180 D7            push a
13405  5181 11            mov a, b
13406  5182 FD 2E 00 00   mov32 cb, $00000000
13406  5186 00 00 
13407  5188 B0            cmp a, b
13408  5189 FD 7F         sgt ; >
13409  518B E4            pop a
13410  518C             ; --- END RELATIONAL
13411  518C C0 00 00      cmp b, 0
13412  518F C6 DD 54      je _if215_exit
13413  5192             _if215_TRUE:
13414  5192             ; h = k->energy * (200UL + get_rand(100)); 
13415  5192 FA FC FF      lea d, [bp + -4] ; $h
13416  5195 DA            push d
13417  5196                              
13418  5196 FA F9 FF      lea d, [bp + -7] ; $k
13419  5199 FD 2A         mov d, [d]
13420  519B 58 02 00      add d, 2
13421  519E 2A            mov b, [d]
13422  519F 38 00 00      mov c, 0
13423  51A2             ; --- START FACTORS
13424  51A2 D7            push a
13425  51A3 FD D8         push g
13426  51A5 11            mov a, b
13427  51A6 FD 7A         mov g, c
13428  51A8                              
13429  51A8 FD 2E C8 00   mov32 cb, $000000c8
13429  51AC 00 00 
13430  51AE             ; --- START TERMS
13431  51AE D7            push a
13432  51AF FD D8         push g
13433  51B1 11            mov a, b
13434  51B2 FD 7A         mov g, c
13435  51B4             ; --- START FUNCTION CALL
13436  51B4                              
13437  51B4 FD 2E 64 00   mov32 cb, $00000064
13437  51B8 00 00 
13438  51BA FD AB         swp b
13439  51BC D8            push b
13440  51BD 07 FF 04      call get_rand
13441  51C0 51 02 00      add sp, 2
13442  51C3             ; --- END FUNCTION CALL
13443  51C3 FD 15         add32 cb, ga
13444  51C5 FD F1         pop g
13445  51C7 E4            pop a
13446  51C8             ; --- END TERMS
13447  51C8 D7            push a     ; save left operand
13448  51C9 8E            xor a, b   ; xor sign bits
13449  51CA FD AA         swp a      ; swap bytes
13450  51CC 83            mov cl, al ; save result of xor into 'dl'
13451  51CD E4            pop a      ; restore left side operator
13452  51CE DF            push cl    ; save result of xor above
13453  51CF FD AA         swp a  
13454  51D1 93 80         test al, $80  
13455  51D3 FD AA         swp a  
13456  51D5 C6 DA 51      jz skip_invert_a_216  
13457  51D8 FD 95         neg a 
13458  51DA             skip_invert_a_216:   
13459  51DA FD AB         swp b
13460  51DC FD 93 80      test bl, $80  
13461  51DF FD AB         swp b
13462  51E1 C6 E6 51      jz skip_invert_b_216  
13463  51E4 FD 97         neg b 
13464  51E6             skip_invert_b_216:   
13465  51E6 AC            mul a, b ; *
13466  51E7 FD 78         mov g, a
13467  51E9 11            mov a, b
13468  51EA EA            pop bl
13469  51EB FD 93 80      test bl, $80
13470  51EE C6 FB 51      jz _same_signs_216
13471  51F1 2F            mov bl, al
13472  51F2 95            not a
13473  51F3 FD 97         neg b
13474  51F5 5B 00 00      adc a, 0
13475  51F8 FD 78         mov g, a
13476  51FA 11            mov a, b
13477  51FB             _same_signs_216:
13478  51FB FD 38         mov c, g
13479  51FD 27            mov b, a
13480  51FE FD F1         pop g
13481  5200 E4            pop a
13482  5201             ; --- END FACTORS
13483  5201 E7            pop d
13484  5202 FD 43         mov [d], b
13485  5204 28            mov b, c
13486  5205 FD 44 02 00   mov [d + 2], b
13487  5209             ; h =h* 100;	/* Ready for division in fixed */ 
13488  5209 FA FC FF      lea d, [bp + -4] ; $h
13489  520C DA            push d
13490  520D                              
13491  520D FA FC FF      lea d, [bp + -4] ; $h
13492  5210 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13493  5213 FD 39         mov c, b ; And place it into C
13494  5215 2A            mov b, [d] ; Lower Word in B
13495  5216             ; --- START FACTORS
13496  5216 D7            push a
13497  5217 FD D8         push g
13498  5219 11            mov a, b
13499  521A FD 7A         mov g, c
13500  521C FD 2E 64 00   mov32 cb, $00000064
13500  5220 00 00 
13501  5222 D7            push a     ; save left operand
13502  5223 8E            xor a, b   ; xor sign bits
13503  5224 FD AA         swp a      ; swap bytes
13504  5226 83            mov cl, al ; save result of xor into 'dl'
13505  5227 E4            pop a      ; restore left side operator
13506  5228 DF            push cl    ; save result of xor above
13507  5229 FD AA         swp a  
13508  522B 93 80         test al, $80  
13509  522D FD AA         swp a  
13510  522F C6 34 52      jz skip_invert_a_217  
13511  5232 FD 95         neg a 
13512  5234             skip_invert_a_217:   
13513  5234 FD AB         swp b
13514  5236 FD 93 80      test bl, $80  
13515  5239 FD AB         swp b
13516  523B C6 40 52      jz skip_invert_b_217  
13517  523E FD 97         neg b 
13518  5240             skip_invert_b_217:   
13519  5240 AC            mul a, b ; *
13520  5241 FD 78         mov g, a
13521  5243 11            mov a, b
13522  5244 EA            pop bl
13523  5245 FD 93 80      test bl, $80
13524  5248 C6 55 52      jz _same_signs_217
13525  524B 2F            mov bl, al
13526  524C 95            not a
13527  524D FD 97         neg b
13528  524F 5B 00 00      adc a, 0
13529  5252 FD 78         mov g, a
13530  5254 11            mov a, b
13531  5255             _same_signs_217:
13532  5255 FD 38         mov c, g
13533  5257 27            mov b, a
13534  5258 FD F1         pop g
13535  525A E4            pop a
13536  525B             ; --- END FACTORS
13537  525B E7            pop d
13538  525C FD 43         mov [d], b
13539  525E 28            mov b, c
13540  525F FD 44 02 00   mov [d + 2], b
13541  5263             ; h =h/ distance_to(k); 
13542  5263 FA FC FF      lea d, [bp + -4] ; $h
13543  5266 DA            push d
13544  5267                              
13545  5267 FA FC FF      lea d, [bp + -4] ; $h
13546  526A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13547  526D FD 39         mov c, b ; And place it into C
13548  526F 2A            mov b, [d] ; Lower Word in B
13549  5270             ; --- START FACTORS
13550  5270 D7            push a
13551  5271 FD D8         push g
13552  5273 11            mov a, b
13553  5274 FD 7A         mov g, c
13554  5276             ; --- START FUNCTION CALL
13555  5276                              
13556  5276 FA F9 FF      lea d, [bp + -7] ; $k
13557  5279 2A            mov b, [d]
13558  527A 38 00 00      mov c, 0
13559  527D FD AB         swp b
13560  527F D8            push b
13561  5280 07 34 5D      call distance_to
13562  5283 51 02 00      add sp, 2
13563  5286             ; --- END FUNCTION CALL
13564  5286 FD D8         push g ; save 'g' as the div instruction uses it
13565  5288 AE            div a, b ; /, a: quotient, b: remainder
13566  5289 FD F1         pop g
13567  528B FD 38         mov c, g
13568  528D 27            mov b, a
13569  528E FD F1         pop g
13570  5290 E4            pop a
13571  5291             ; --- END FACTORS
13572  5291 E7            pop d
13573  5292 FD 43         mov [d], b
13574  5294 28            mov b, c
13575  5295 FD 44 02 00   mov [d + 2], b
13576  5299             ; shield = shield - FROM_FIXED00(h); 
13577  5299 3B 3D 6E      mov d, _shield ; $shield
13578  529C DA            push d
13579  529D                              
13580  529D 3B 3D 6E      mov d, _shield ; $shield
13581  52A0 2A            mov b, [d]
13582  52A1 38 00 00      mov c, 0
13583  52A4             ; --- START TERMS
13584  52A4 D7            push a
13585  52A5 11            mov a, b
13586  52A6             ; --- START FUNCTION CALL
13587  52A6                              
13588  52A6 FA FC FF      lea d, [bp + -4] ; $h
13589  52A9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13590  52AC FD 39         mov c, b ; And place it into C
13591  52AE 2A            mov b, [d] ; Lower Word in B
13592  52AF FD AB         swp b
13593  52B1 D8            push b
13594  52B2 07 DC 04      call FROM_FIXED00
13595  52B5 51 02 00      add sp, 2
13596  52B8             ; --- END FUNCTION CALL
13597  52B8 60            sub a, b
13598  52B9 27            mov b, a
13599  52BA E4            pop a
13600  52BB             ; --- END TERMS
13601  52BB E7            pop d
13602  52BC FD 43         mov [d], b
13603  52BE             ; k->energy = (k->energy * 100) / (300 + get_rand(100)); 
13604  52BE FA F9 FF      lea d, [bp + -7] ; $k
13605  52C1 FD 2A         mov d, [d]
13606  52C3 58 02 00      add d, 2
13607  52C6 DA            push d
13608  52C7                              
13609  52C7                              
13610  52C7 FA F9 FF      lea d, [bp + -7] ; $k
13611  52CA FD 2A         mov d, [d]
13612  52CC 58 02 00      add d, 2
13613  52CF 2A            mov b, [d]
13614  52D0 38 00 00      mov c, 0
13615  52D3             ; --- START FACTORS
13616  52D3 D7            push a
13617  52D4 FD D8         push g
13618  52D6 11            mov a, b
13619  52D7 FD 7A         mov g, c
13620  52D9 FD 2E 64 00   mov32 cb, $00000064
13620  52DD 00 00 
13621  52DF D7            push a     ; save left operand
13622  52E0 8E            xor a, b   ; xor sign bits
13623  52E1 FD AA         swp a      ; swap bytes
13624  52E3 83            mov cl, al ; save result of xor into 'dl'
13625  52E4 E4            pop a      ; restore left side operator
13626  52E5 DF            push cl    ; save result of xor above
13627  52E6 FD AA         swp a  
13628  52E8 93 80         test al, $80  
13629  52EA FD AA         swp a  
13630  52EC C6 F1 52      jz skip_invert_a_219  
13631  52EF FD 95         neg a 
13632  52F1             skip_invert_a_219:   
13633  52F1 FD AB         swp b
13634  52F3 FD 93 80      test bl, $80  
13635  52F6 FD AB         swp b
13636  52F8 C6 FD 52      jz skip_invert_b_219  
13637  52FB FD 97         neg b 
13638  52FD             skip_invert_b_219:   
13639  52FD AC            mul a, b ; *
13640  52FE FD 78         mov g, a
13641  5300 11            mov a, b
13642  5301 EA            pop bl
13643  5302 FD 93 80      test bl, $80
13644  5305 C6 12 53      jz _same_signs_219
13645  5308 2F            mov bl, al
13646  5309 95            not a
13647  530A FD 97         neg b
13648  530C 5B 00 00      adc a, 0
13649  530F FD 78         mov g, a
13650  5311 11            mov a, b
13651  5312             _same_signs_219:
13652  5312 FD 38         mov c, g
13653  5314 27            mov b, a
13654  5315 FD F1         pop g
13655  5317 E4            pop a
13656  5318             ; --- END FACTORS
13657  5318             ; --- START FACTORS
13658  5318 D7            push a
13659  5319 FD D8         push g
13660  531B 11            mov a, b
13661  531C FD 7A         mov g, c
13662  531E                              
13663  531E FD 2E 2C 01   mov32 cb, $0000012c
13663  5322 00 00 
13664  5324             ; --- START TERMS
13665  5324 D7            push a
13666  5325 11            mov a, b
13667  5326             ; --- START FUNCTION CALL
13668  5326                              
13669  5326 FD 2E 64 00   mov32 cb, $00000064
13669  532A 00 00 
13670  532C FD AB         swp b
13671  532E D8            push b
13672  532F 07 FF 04      call get_rand
13673  5332 51 02 00      add sp, 2
13674  5335             ; --- END FUNCTION CALL
13675  5335 56            add b, a
13676  5336 E4            pop a
13677  5337             ; --- END TERMS
13678  5337 FD D8         push g ; save 'g' as the div instruction uses it
13679  5339 AE            div a, b ; /, a: quotient, b: remainder
13680  533A FD F1         pop g
13681  533C FD 38         mov c, g
13682  533E 27            mov b, a
13683  533F FD F1         pop g
13684  5341 E4            pop a
13685  5342             ; --- END FACTORS
13686  5342 E7            pop d
13687  5343 FD 43         mov [d], b
13688  5345             ; printf("%d unit hit on Enterprise from sector %d, %d\n", (unsigned)FROM_FIXED00(h), k->y, k->x); 
13689  5345                              
13690  5345             ; --- START FUNCTION CALL
13691  5345                              
13692  5345 FA F9 FF      lea d, [bp + -7] ; $k
13693  5348 FD 2A         mov d, [d]
13694  534A 58 01 00      add d, 1
13695  534D 32            mov bl, [d]
13696  534E A7 00         mov bh, 0
13697  5350 38 00 00      mov c, 0
13698  5353 FD AA         swp a
13699  5355 D8            push b
13700  5356                              
13701  5356 FA F9 FF      lea d, [bp + -7] ; $k
13702  5359 FD 2A         mov d, [d]
13703  535B 58 00 00      add d, 0
13704  535E 32            mov bl, [d]
13705  535F A7 00         mov bh, 0
13706  5361 38 00 00      mov c, 0
13707  5364 FD AA         swp a
13708  5366 D8            push b
13709  5367                              
13710  5367                              
13711  5367 FA FC FF      lea d, [bp + -4] ; $h
13712  536A 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13713  536D FD 39         mov c, b ; And place it into C
13714  536F 2A            mov b, [d] ; Lower Word in B
13715  5370 FD AB         swp b
13716  5372 D8            push b
13717  5373                              
13718  5373 26 4E 82      mov b, _s158 ; "%d unit hit on Enterprise from sector %d, %d\n"
13719  5376 FD AB         swp b
13720  5378 D8            push b
13721  5379 07 4F 60      call printf
13722  537C 51 06 00      add sp, 6
13723  537F             ; --- END FUNCTION CALL
13724  537F             ; if (shield <= 0) { 
13725  537F             _if221_cond:
13726  537F                              
13727  537F 3B 3D 6E      mov d, _shield ; $shield
13728  5382 2A            mov b, [d]
13729  5383 38 00 00      mov c, 0
13730  5386             ; --- START RELATIONAL
13731  5386 D7            push a
13732  5387 11            mov a, b
13733  5388 FD 2E 00 00   mov32 cb, $00000000
13733  538C 00 00 
13734  538E B0            cmp a, b
13735  538F FD 74         sle ; <= (signed)
13736  5391 E4            pop a
13737  5392             ; --- END RELATIONAL
13738  5392 C0 00 00      cmp b, 0
13739  5395 C6 AB 53      je _if221_exit
13740  5398             _if221_TRUE:
13741  5398             ; putchar('\n'); 
13742  5398                              
13743  5398             ; --- START FUNCTION CALL
13744  5398                              
13745  5398 FD 2E 0A 00   mov32 cb, $0000000a
13745  539C 00 00 
13746  539E DD            push bl
13747  539F 07 D1 64      call putchar
13748  53A2 51 01 00      add sp, 1
13749  53A5             ; --- END FUNCTION CALL
13750  53A5             ; ship_destroyed(); 
13751  53A5                              
13752  53A5             ; --- START FUNCTION CALL
13753  53A5 07 BB 4E      call ship_destroyed
13754  53A8 0A AB 53      jmp _if221_exit
13755  53AB             _if221_exit:
13756  53AB             ; printf("    <Shields down to %d units>\n\n", shield); 
13757  53AB                              
13758  53AB             ; --- START FUNCTION CALL
13759  53AB                              
13760  53AB 3B 3D 6E      mov d, _shield ; $shield
13761  53AE 2A            mov b, [d]
13762  53AF 38 00 00      mov c, 0
13763  53B2 FD AB         swp b
13764  53B4 D8            push b
13765  53B5                              
13766  53B5 26 7C 82      mov b, _s159 ; "    <Shields down to %d units>\n\n"
13767  53B8 FD AB         swp b
13768  53BA D8            push b
13769  53BB 07 4F 60      call printf
13770  53BE 51 04 00      add sp, 4
13771  53C1             ; --- END FUNCTION CALL
13772  53C1             ; if (h >= 20) { 
13773  53C1             _if222_cond:
13774  53C1                              
13775  53C1 FA FC FF      lea d, [bp + -4] ; $h
13776  53C4 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13777  53C7 FD 39         mov c, b ; And place it into C
13778  53C9 2A            mov b, [d] ; Lower Word in B
13779  53CA             ; --- START RELATIONAL
13780  53CA D7            push a
13781  53CB FD D8         push g
13782  53CD 11            mov a, b
13783  53CE FD 7A         mov g, c
13784  53D0 FD 2E 14 00   mov32 cb, $00000014
13784  53D4 00 00 
13785  53D6 FD AF         cmp32 ga, cb
13786  53D8 FD 82         sgeu
13787  53DA FD F1         pop g
13788  53DC E4            pop a
13789  53DD             ; --- END RELATIONAL
13790  53DD C0 00 00      cmp b, 0
13791  53E0 C6 DA 54      je _if222_exit
13792  53E3             _if222_TRUE:
13793  53E3             ; ratio = ((int)h)/shield; 
13794  53E3 FA F5 FF      lea d, [bp + -11] ; $ratio
13795  53E6 DA            push d
13796  53E7                              
13797  53E7                              
13798  53E7 FA FC FF      lea d, [bp + -4] ; $h
13799  53EA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13800  53ED FD 39         mov c, b ; And place it into C
13801  53EF 2A            mov b, [d] ; Lower Word in B
13802  53F0             ; --- START FACTORS
13803  53F0 D7            push a
13804  53F1 FD D8         push g
13805  53F3 11            mov a, b
13806  53F4 FD 7A         mov g, c
13807  53F6 3B 3D 6E      mov d, _shield ; $shield
13808  53F9 2A            mov b, [d]
13809  53FA 38 00 00      mov c, 0
13810  53FD FD D8         push g ; save 'g' as the div instruction uses it
13811  53FF AE            div a, b ; /, a: quotient, b: remainder
13812  5400 FD F1         pop g
13813  5402 FD 38         mov c, g
13814  5404 27            mov b, a
13815  5405 FD F1         pop g
13816  5407 E4            pop a
13817  5408             ; --- END FACTORS
13818  5408 E7            pop d
13819  5409 FD 43         mov [d], b
13820  540B 26 00 00      mov b, 0
13821  540E FD 44 02 00   mov [d + 2], b
13822  5412             ; if (get_rand(10) <= 6 && ratio > 2) { 
13823  5412             _if224_cond:
13824  5412                              
13825  5412             ; --- START FUNCTION CALL
13826  5412                              
13827  5412 FD 2E 0A 00   mov32 cb, $0000000a
13827  5416 00 00 
13828  5418 FD AB         swp b
13829  541A D8            push b
13830  541B 07 FF 04      call get_rand
13831  541E 51 02 00      add sp, 2
13832  5421             ; --- END FUNCTION CALL
13833  5421             ; --- START RELATIONAL
13834  5421 D7            push a
13835  5422 11            mov a, b
13836  5423 FD 2E 06 00   mov32 cb, $00000006
13836  5427 00 00 
13837  5429 B0            cmp a, b
13838  542A FD 74         sle ; <= (signed)
13839  542C E4            pop a
13840  542D             ; --- END RELATIONAL
13841  542D             ; --- START LOGICAL AND
13842  542D D7            push a
13843  542E 11            mov a, b
13844  542F FA F5 FF      lea d, [bp + -11] ; $ratio
13845  5432 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13846  5435 FD 39         mov c, b ; And place it into C
13847  5437 2A            mov b, [d] ; Lower Word in B
13848  5438             ; --- START RELATIONAL
13849  5438 D7            push a
13850  5439 FD D8         push g
13851  543B 11            mov a, b
13852  543C FD 7A         mov g, c
13853  543E FD 2E 02 00   mov32 cb, $00000002
13853  5442 00 00 
13854  5444 FD AF         cmp32 ga, cb
13855  5446 FD 81         sgu
13856  5448 FD F1         pop g
13857  544A E4            pop a
13858  544B             ; --- END RELATIONAL
13859  544B FD A7         sand a, b
13860  544D E4            pop a
13861  544E             ; --- END LOGICAL AND
13862  544E C0 00 00      cmp b, 0
13863  5451 C6 D7 54      je _if224_exit
13864  5454             _if224_TRUE:
13865  5454             ; r = rand8(); 
13866  5454 FA 00 00      lea d, [bp + 0] ; $r
13867  5457 DA            push d
13868  5458                              
13869  5458             ; --- START FUNCTION CALL
13870  5458 07 6F 05      call rand8
13871  545B E7            pop d
13872  545C FD 3E         mov [d], bl
13873  545E             ; damage[r] =damage[r] - ratio + get_rand(50); 
13874  545E 3B 44 6E      mov d, _damage_data ; $damage
13875  5461 D7            push a
13876  5462 DA            push d
13877  5463                              
13878  5463 FA 00 00      lea d, [bp + 0] ; $r
13879  5466 32            mov bl, [d]
13880  5467 A7 00         mov bh, 0
13881  5469 38 00 00      mov c, 0
13882  546C E7            pop d
13883  546D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13884  5471 E4            pop a
13885  5472 DA            push d
13886  5473                              
13887  5473 3B 44 6E      mov d, _damage_data ; $damage
13888  5476 D7            push a
13889  5477 DA            push d
13890  5478                              
13891  5478 FA 00 00      lea d, [bp + 0] ; $r
13892  547B 32            mov bl, [d]
13893  547C A7 00         mov bh, 0
13894  547E 38 00 00      mov c, 0
13895  5481 E7            pop d
13896  5482 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
13897  5486 E4            pop a
13898  5487 2A            mov b, [d]
13899  5488 38 00 00      mov c, 0
13900  548B             ; --- START TERMS
13901  548B D7            push a
13902  548C 11            mov a, b
13903  548D FA F5 FF      lea d, [bp + -11] ; $ratio
13904  5490 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
13905  5493 FD 39         mov c, b ; And place it into C
13906  5495 2A            mov b, [d] ; Lower Word in B
13907  5496 FD 1C         sub32 ga, cb
13908  5498 27            mov b, a
13909  5499 FD 38         mov c, g
13910  549B 11            mov a, b
13911  549C FD 7A         mov g, c
13912  549E             ; --- START FUNCTION CALL
13913  549E                              
13914  549E FD 2E 32 00   mov32 cb, $00000032
13914  54A2 00 00 
13915  54A4 FD AB         swp b
13916  54A6 D8            push b
13917  54A7 07 FF 04      call get_rand
13918  54AA 51 02 00      add sp, 2
13919  54AD             ; --- END FUNCTION CALL
13920  54AD FD 15         add32 cb, ga
13921  54AF E4            pop a
13922  54B0             ; --- END TERMS
13923  54B0 E7            pop d
13924  54B1 FD 43         mov [d], b
13925  54B3             ; printf("Damage Control reports\n'%s' damaged by hit\n\n", get_device_name(r)); 
13926  54B3                              
13927  54B3             ; --- START FUNCTION CALL
13928  54B3                              
13929  54B3             ; --- START FUNCTION CALL
13930  54B3                              
13931  54B3 FA 00 00      lea d, [bp + 0] ; $r
13932  54B6 32            mov bl, [d]
13933  54B7 A7 00         mov bh, 0
13934  54B9 38 00 00      mov c, 0
13935  54BC FD AB         swp b
13936  54BE D8            push b
13937  54BF 07 40 59      call get_device_name
13938  54C2 51 02 00      add sp, 2
13939  54C5             ; --- END FUNCTION CALL
13940  54C5 FD AB         swp b
13941  54C7 D8            push b
13942  54C8                              
13943  54C8 26 9D 82      mov b, _s160 ; "Damage Control reports\n'%s' damaged by hit\n\n"
13944  54CB FD AB         swp b
13945  54CD D8            push b
13946  54CE 07 4F 60      call printf
13947  54D1 51 04 00      add sp, 4
13948  54D4             ; --- END FUNCTION CALL
13949  54D4 0A D7 54      jmp _if224_exit
13950  54D7             _if224_exit:
13951  54D7 0A DA 54      jmp _if222_exit
13952  54DA             _if222_exit:
13953  54DA 0A DD 54      jmp _if215_exit
13954  54DD             _if215_exit:
13955  54DD             ; k++; 
13956  54DD                              
13957  54DD FA F9 FF      lea d, [bp + -7] ; $k
13958  54E0 2A            mov b, [d]
13959  54E1 38 00 00      mov c, 0
13960  54E4 11            mov a, b
13961  54E5 FD 77         inc b
13962  54E7 FD 77         inc b
13963  54E9 FA F9 FF      lea d, [bp + -7] ; $k
13964  54EC FD 43         mov [d], b
13965  54EE 27            mov b, a
13966  54EF             _for214_update:
13967  54EF                              
13968  54EF FA FB FF      lea d, [bp + -5] ; $i
13969  54F2 32            mov bl, [d]
13970  54F3 A7 00         mov bh, 0
13971  54F5 38 00 00      mov c, 0
13972  54F8 FD 77         inc b
13973  54FA FA FB FF      lea d, [bp + -5] ; $i
13974  54FD FD 3E         mov [d], bl
13975  54FF FD 7D         dec b
13976  5501 0A 59 51      jmp _for214_cond
13977  5504             _for214_exit:
13978  5504 F9            leave
13979  5505 09            ret
13980  5506             
13981  5506             repair_damage:
13982  5506 F8 00 00      enter 0 ; (push bp; mov bp, sp)
13983  5509             ; int i; 
13984  5509 52 02 00      sub sp, 2
13985  550C             ; int d1; 
13986  550C 52 02 00      sub sp, 2
13987  550F             ; unsigned int repair_factor;		/* Repair Factor */ 
13988  550F 52 02 00      sub sp, 2
13989  5512             ; repair_factor = warp; 
13990  5512 FA FB FF      lea d, [bp + -5] ; $repair_factor
13991  5515 DA            push d
13992  5516                              
13993  5516 FA 05 00      lea d, [bp + 5] ; $warp
13994  5519 2A            mov b, [d]
13995  551A 38 00 00      mov c, 0
13996  551D E7            pop d
13997  551E FD 43         mov [d], b
13998  5520             ; if (warp >= 100) 
13999  5520             _if225_cond:
14000  5520                              
14001  5520 FA 05 00      lea d, [bp + 5] ; $warp
14002  5523 2A            mov b, [d]
14003  5524 38 00 00      mov c, 0
14004  5527             ; --- START RELATIONAL
14005  5527 D7            push a
14006  5528 11            mov a, b
14007  5529 FD 2E 64 00   mov32 cb, $00000064
14007  552D 00 00 
14008  552F B0            cmp a, b
14009  5530 FD 82         sgeu ; >= (unsigned)
14010  5532 E4            pop a
14011  5533             ; --- END RELATIONAL
14012  5533 C0 00 00      cmp b, 0
14013  5536 C6 52 55      je _if225_exit
14014  5539             _if225_TRUE:
14015  5539             ; repair_factor = TO_FIXED00(1); 
14016  5539 FA FB FF      lea d, [bp + -5] ; $repair_factor
14017  553C DA            push d
14018  553D                              
14019  553D             ; --- START FUNCTION CALL
14020  553D                              
14021  553D FD 2E 01 00   mov32 cb, $00000001
14021  5541 00 00 
14022  5543 FD AB         swp b
14023  5545 D8            push b
14024  5546 07 8B 04      call TO_FIXED00
14025  5549 51 02 00      add sp, 2
14026  554C             ; --- END FUNCTION CALL
14027  554C E7            pop d
14028  554D FD 43         mov [d], b
14029  554F 0A 52 55      jmp _if225_exit
14030  5552             _if225_exit:
14031  5552             ; for (i = 1; i <= 8; i++) { 
14032  5552             _for226_init:
14033  5552 FA FF FF      lea d, [bp + -1] ; $i
14034  5555 DA            push d
14035  5556                              
14036  5556 FD 2E 01 00   mov32 cb, $00000001
14036  555A 00 00 
14037  555C E7            pop d
14038  555D FD 43         mov [d], b
14039  555F             _for226_cond:
14040  555F                              
14041  555F FA FF FF      lea d, [bp + -1] ; $i
14042  5562 2A            mov b, [d]
14043  5563 38 00 00      mov c, 0
14044  5566             ; --- START RELATIONAL
14045  5566 D7            push a
14046  5567 11            mov a, b
14047  5568 FD 2E 08 00   mov32 cb, $00000008
14047  556C 00 00 
14048  556E B0            cmp a, b
14049  556F FD 74         sle ; <= (signed)
14050  5571 E4            pop a
14051  5572             ; --- END RELATIONAL
14052  5572 C0 00 00      cmp b, 0
14053  5575 C6 FA 56      je _for226_exit
14054  5578             _for226_block:
14055  5578             ; if (damage[i] < 0) { 
14056  5578             _if227_cond:
14057  5578                              
14058  5578 3B 44 6E      mov d, _damage_data ; $damage
14059  557B D7            push a
14060  557C DA            push d
14061  557D                              
14062  557D FA FF FF      lea d, [bp + -1] ; $i
14063  5580 2A            mov b, [d]
14064  5581 38 00 00      mov c, 0
14065  5584 E7            pop d
14066  5585 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14067  5589 E4            pop a
14068  558A 2A            mov b, [d]
14069  558B 38 00 00      mov c, 0
14070  558E             ; --- START RELATIONAL
14071  558E D7            push a
14072  558F 11            mov a, b
14073  5590 FD 2E 00 00   mov32 cb, $00000000
14073  5594 00 00 
14074  5596 B0            cmp a, b
14075  5597 FD 73         slt ; < (signed)
14076  5599 E4            pop a
14077  559A             ; --- END RELATIONAL
14078  559A C0 00 00      cmp b, 0
14079  559D C6 E7 56      je _if227_exit
14080  55A0             _if227_TRUE:
14081  55A0             ; damage[i] = damage[i] + repair_factor; 
14082  55A0 3B 44 6E      mov d, _damage_data ; $damage
14083  55A3 D7            push a
14084  55A4 DA            push d
14085  55A5                              
14086  55A5 FA FF FF      lea d, [bp + -1] ; $i
14087  55A8 2A            mov b, [d]
14088  55A9 38 00 00      mov c, 0
14089  55AC E7            pop d
14090  55AD FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14091  55B1 E4            pop a
14092  55B2 DA            push d
14093  55B3                              
14094  55B3 3B 44 6E      mov d, _damage_data ; $damage
14095  55B6 D7            push a
14096  55B7 DA            push d
14097  55B8                              
14098  55B8 FA FF FF      lea d, [bp + -1] ; $i
14099  55BB 2A            mov b, [d]
14100  55BC 38 00 00      mov c, 0
14101  55BF E7            pop d
14102  55C0 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14103  55C4 E4            pop a
14104  55C5 2A            mov b, [d]
14105  55C6 38 00 00      mov c, 0
14106  55C9             ; --- START TERMS
14107  55C9 D7            push a
14108  55CA 11            mov a, b
14109  55CB FA FB FF      lea d, [bp + -5] ; $repair_factor
14110  55CE 2A            mov b, [d]
14111  55CF 38 00 00      mov c, 0
14112  55D2 56            add b, a
14113  55D3 E4            pop a
14114  55D4             ; --- END TERMS
14115  55D4 E7            pop d
14116  55D5 FD 43         mov [d], b
14117  55D7             ; if (damage[i] > -10 && damage[i] < 0)	/* -0.1 */ 
14118  55D7             _if228_cond:
14119  55D7                              
14120  55D7 3B 44 6E      mov d, _damage_data ; $damage
14121  55DA D7            push a
14122  55DB DA            push d
14123  55DC                              
14124  55DC FA FF FF      lea d, [bp + -1] ; $i
14125  55DF 2A            mov b, [d]
14126  55E0 38 00 00      mov c, 0
14127  55E3 E7            pop d
14128  55E4 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14129  55E8 E4            pop a
14130  55E9 2A            mov b, [d]
14131  55EA 38 00 00      mov c, 0
14132  55ED             ; --- START RELATIONAL
14133  55ED D7            push a
14134  55EE 11            mov a, b
14135  55EF FD 2E F6 FF   mov32 cb, $fffffff6
14135  55F3 FF FF 
14136  55F5 B0            cmp a, b
14137  55F6 FD 7F         sgt ; >
14138  55F8 E4            pop a
14139  55F9             ; --- END RELATIONAL
14140  55F9             ; --- START LOGICAL AND
14141  55F9 D7            push a
14142  55FA 11            mov a, b
14143  55FB 3B 44 6E      mov d, _damage_data ; $damage
14144  55FE D7            push a
14145  55FF DA            push d
14146  5600                              
14147  5600 FA FF FF      lea d, [bp + -1] ; $i
14148  5603 2A            mov b, [d]
14149  5604 38 00 00      mov c, 0
14150  5607 E7            pop d
14151  5608 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14152  560C E4            pop a
14153  560D 2A            mov b, [d]
14154  560E 38 00 00      mov c, 0
14155  5611             ; --- START RELATIONAL
14156  5611 D7            push a
14157  5612 11            mov a, b
14158  5613 FD 2E 00 00   mov32 cb, $00000000
14158  5617 00 00 
14159  5619 B0            cmp a, b
14160  561A FD 73         slt ; < (signed)
14161  561C E4            pop a
14162  561D             ; --- END RELATIONAL
14163  561D FD A7         sand a, b
14164  561F E4            pop a
14165  5620             ; --- END LOGICAL AND
14166  5620 C0 00 00      cmp b, 0
14167  5623 C6 45 56      je _if228_else
14168  5626             _if228_TRUE:
14169  5626             ; damage[i] = -10; 
14170  5626 3B 44 6E      mov d, _damage_data ; $damage
14171  5629 D7            push a
14172  562A DA            push d
14173  562B                              
14174  562B FA FF FF      lea d, [bp + -1] ; $i
14175  562E 2A            mov b, [d]
14176  562F 38 00 00      mov c, 0
14177  5632 E7            pop d
14178  5633 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14179  5637 E4            pop a
14180  5638 DA            push d
14181  5639                              
14182  5639 FD 2E F6 FF   mov32 cb, $fffffff6
14182  563D FF FF 
14183  563F E7            pop d
14184  5640 FD 43         mov [d], b
14185  5642 0A E4 56      jmp _if228_exit
14186  5645             _if228_else:
14187  5645             ; if (damage[i] >= 0) { 
14188  5645             _if229_cond:
14189  5645                              
14190  5645 3B 44 6E      mov d, _damage_data ; $damage
14191  5648 D7            push a
14192  5649 DA            push d
14193  564A                              
14194  564A FA FF FF      lea d, [bp + -1] ; $i
14195  564D 2A            mov b, [d]
14196  564E 38 00 00      mov c, 0
14197  5651 E7            pop d
14198  5652 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14199  5656 E4            pop a
14200  5657 2A            mov b, [d]
14201  5658 38 00 00      mov c, 0
14202  565B             ; --- START RELATIONAL
14203  565B D7            push a
14204  565C 11            mov a, b
14205  565D FD 2E 00 00   mov32 cb, $00000000
14205  5661 00 00 
14206  5663 B0            cmp a, b
14207  5664 FD 80         sge ; >=
14208  5666 E4            pop a
14209  5667             ; --- END RELATIONAL
14210  5667 C0 00 00      cmp b, 0
14211  566A C6 E4 56      je _if229_exit
14212  566D             _if229_TRUE:
14213  566D             ; if (d1 != 1) { 
14214  566D             _if230_cond:
14215  566D                              
14216  566D FA FD FF      lea d, [bp + -3] ; $d1
14217  5670 2A            mov b, [d]
14218  5671 38 00 00      mov c, 0
14219  5674             ; --- START RELATIONAL
14220  5674 D7            push a
14221  5675 11            mov a, b
14222  5676 FD 2E 01 00   mov32 cb, $00000001
14222  567A 00 00 
14223  567C B0            cmp a, b
14224  567D FD 72         sneq ; !=
14225  567F E4            pop a
14226  5680             ; --- END RELATIONAL
14227  5680 C0 00 00      cmp b, 0
14228  5683 C6 A6 56      je _if230_exit
14229  5686             _if230_TRUE:
14230  5686             ; d1 = 1; 
14231  5686 FA FD FF      lea d, [bp + -3] ; $d1
14232  5689 DA            push d
14233  568A                              
14234  568A FD 2E 01 00   mov32 cb, $00000001
14234  568E 00 00 
14235  5690 E7            pop d
14236  5691 FD 43         mov [d], b
14237  5693             ; puts(dcr_1); 
14238  5693                              
14239  5693             ; --- START FUNCTION CALL
14240  5693                              
14241  5693 3B 57 6F      mov d, _dcr_1 ; $dcr_1
14242  5696 2A            mov b, [d]
14243  5697 38 00 00      mov c, 0
14244  569A FD AB         swp b
14245  569C D8            push b
14246  569D 07 5C 69      call puts
14247  56A0 51 02 00      add sp, 2
14248  56A3             ; --- END FUNCTION CALL
14249  56A3 0A A6 56      jmp _if230_exit
14250  56A6             _if230_exit:
14251  56A6             ; printf("    %s repair completed\n\n", 
14252  56A6                              
14253  56A6             ; --- START FUNCTION CALL
14254  56A6                              
14255  56A6             ; --- START FUNCTION CALL
14256  56A6                              
14257  56A6 FA FF FF      lea d, [bp + -1] ; $i
14258  56A9 2A            mov b, [d]
14259  56AA 38 00 00      mov c, 0
14260  56AD FD AB         swp b
14261  56AF D8            push b
14262  56B0 07 40 59      call get_device_name
14263  56B3 51 02 00      add sp, 2
14264  56B6             ; --- END FUNCTION CALL
14265  56B6 FD AB         swp b
14266  56B8 D8            push b
14267  56B9                              
14268  56B9 26 CA 82      mov b, _s161 ; "    %s repair completed\n\n"
14269  56BC FD AB         swp b
14270  56BE D8            push b
14271  56BF 07 4F 60      call printf
14272  56C2 51 04 00      add sp, 4
14273  56C5             ; --- END FUNCTION CALL
14274  56C5             ; damage[i] = 0; 
14275  56C5 3B 44 6E      mov d, _damage_data ; $damage
14276  56C8 D7            push a
14277  56C9 DA            push d
14278  56CA                              
14279  56CA FA FF FF      lea d, [bp + -1] ; $i
14280  56CD 2A            mov b, [d]
14281  56CE 38 00 00      mov c, 0
14282  56D1 E7            pop d
14283  56D2 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14284  56D6 E4            pop a
14285  56D7 DA            push d
14286  56D8                              
14287  56D8 FD 2E 00 00   mov32 cb, $00000000
14287  56DC 00 00 
14288  56DE E7            pop d
14289  56DF FD 43         mov [d], b
14290  56E1 0A E4 56      jmp _if229_exit
14291  56E4             _if229_exit:
14292  56E4             _if228_exit:
14293  56E4 0A E7 56      jmp _if227_exit
14294  56E7             _if227_exit:
14295  56E7             _for226_update:
14296  56E7                              
14297  56E7 FA FF FF      lea d, [bp + -1] ; $i
14298  56EA 2A            mov b, [d]
14299  56EB 38 00 00      mov c, 0
14300  56EE 11            mov a, b
14301  56EF FD 77         inc b
14302  56F1 FA FF FF      lea d, [bp + -1] ; $i
14303  56F4 FD 43         mov [d], b
14304  56F6 27            mov b, a
14305  56F7 0A 5F 55      jmp _for226_cond
14306  56FA             _for226_exit:
14307  56FA             ; unsigned char r; 
14308  56FA 52 01 00      sub sp, 1
14309  56FD             ; if (get_rand(10) <= 2) { 
14310  56FD             _if231_cond:
14311  56FD                              
14312  56FD             ; --- START FUNCTION CALL
14313  56FD                              
14314  56FD FD 2E 0A 00   mov32 cb, $0000000a
14314  5701 00 00 
14315  5703 FD AB         swp b
14316  5705 D8            push b
14317  5706 07 FF 04      call get_rand
14318  5709 51 02 00      add sp, 2
14319  570C             ; --- END FUNCTION CALL
14320  570C             ; --- START RELATIONAL
14321  570C D7            push a
14322  570D 11            mov a, b
14323  570E FD 2E 02 00   mov32 cb, $00000002
14323  5712 00 00 
14324  5714 B0            cmp a, b
14325  5715 FD 74         sle ; <= (signed)
14326  5717 E4            pop a
14327  5718             ; --- END RELATIONAL
14328  5718 C0 00 00      cmp b, 0
14329  571B C6 4A 58      je _if231_exit
14330  571E             _if231_TRUE:
14331  571E             ; r = rand8(); 
14332  571E FA FA FF      lea d, [bp + -6] ; $r
14333  5721 DA            push d
14334  5722                              
14335  5722             ; --- START FUNCTION CALL
14336  5722 07 6F 05      call rand8
14337  5725 E7            pop d
14338  5726 FD 3E         mov [d], bl
14339  5728             ; if (get_rand(10) < 6) { 
14340  5728             _if232_cond:
14341  5728                              
14342  5728             ; --- START FUNCTION CALL
14343  5728                              
14344  5728 FD 2E 0A 00   mov32 cb, $0000000a
14344  572C 00 00 
14345  572E FD AB         swp b
14346  5730 D8            push b
14347  5731 07 FF 04      call get_rand
14348  5734 51 02 00      add sp, 2
14349  5737             ; --- END FUNCTION CALL
14350  5737             ; --- START RELATIONAL
14351  5737 D7            push a
14352  5738 11            mov a, b
14353  5739 FD 2E 06 00   mov32 cb, $00000006
14353  573D 00 00 
14354  573F B0            cmp a, b
14355  5740 FD 73         slt ; < (signed)
14356  5742 E4            pop a
14357  5743             ; --- END RELATIONAL
14358  5743 C0 00 00      cmp b, 0
14359  5746 C6 CB 57      je _if232_else
14360  5749             _if232_TRUE:
14361  5749             ; damage[r] =damage[r]- (get_rand(500) + 100); 
14362  5749 3B 44 6E      mov d, _damage_data ; $damage
14363  574C D7            push a
14364  574D DA            push d
14365  574E                              
14366  574E FA FA FF      lea d, [bp + -6] ; $r
14367  5751 32            mov bl, [d]
14368  5752 A7 00         mov bh, 0
14369  5754 38 00 00      mov c, 0
14370  5757 E7            pop d
14371  5758 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14372  575C E4            pop a
14373  575D DA            push d
14374  575E                              
14375  575E 3B 44 6E      mov d, _damage_data ; $damage
14376  5761 D7            push a
14377  5762 DA            push d
14378  5763                              
14379  5763 FA FA FF      lea d, [bp + -6] ; $r
14380  5766 32            mov bl, [d]
14381  5767 A7 00         mov bh, 0
14382  5769 38 00 00      mov c, 0
14383  576C E7            pop d
14384  576D FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14385  5771 E4            pop a
14386  5772 2A            mov b, [d]
14387  5773 38 00 00      mov c, 0
14388  5776             ; --- START TERMS
14389  5776 D7            push a
14390  5777 11            mov a, b
14391  5778                              
14392  5778             ; --- START FUNCTION CALL
14393  5778                              
14394  5778 FD 2E F4 01   mov32 cb, $000001f4
14394  577C 00 00 
14395  577E FD AB         swp b
14396  5780 D8            push b
14397  5781 07 FF 04      call get_rand
14398  5784 51 02 00      add sp, 2
14399  5787             ; --- END FUNCTION CALL
14400  5787             ; --- START TERMS
14401  5787 D7            push a
14402  5788 11            mov a, b
14403  5789 FD 2E 64 00   mov32 cb, $00000064
14403  578D 00 00 
14404  578F 56            add b, a
14405  5790 E4            pop a
14406  5791             ; --- END TERMS
14407  5791 60            sub a, b
14408  5792 27            mov b, a
14409  5793 E4            pop a
14410  5794             ; --- END TERMS
14411  5794 E7            pop d
14412  5795 FD 43         mov [d], b
14413  5797             ; puts(dcr_1); 
14414  5797                              
14415  5797             ; --- START FUNCTION CALL
14416  5797                              
14417  5797 3B 57 6F      mov d, _dcr_1 ; $dcr_1
14418  579A 2A            mov b, [d]
14419  579B 38 00 00      mov c, 0
14420  579E FD AB         swp b
14421  57A0 D8            push b
14422  57A1 07 5C 69      call puts
14423  57A4 51 02 00      add sp, 2
14424  57A7             ; --- END FUNCTION CALL
14425  57A7             ; printf("    %s damaged\n\n", get_device_name(r)); 
14426  57A7                              
14427  57A7             ; --- START FUNCTION CALL
14428  57A7                              
14429  57A7             ; --- START FUNCTION CALL
14430  57A7                              
14431  57A7 FA FA FF      lea d, [bp + -6] ; $r
14432  57AA 32            mov bl, [d]
14433  57AB A7 00         mov bh, 0
14434  57AD 38 00 00      mov c, 0
14435  57B0 FD AB         swp b
14436  57B2 D8            push b
14437  57B3 07 40 59      call get_device_name
14438  57B6 51 02 00      add sp, 2
14439  57B9             ; --- END FUNCTION CALL
14440  57B9 FD AB         swp b
14441  57BB D8            push b
14442  57BC                              
14443  57BC 26 E4 82      mov b, _s162 ; "    %s damaged\n\n"
14444  57BF FD AB         swp b
14445  57C1 D8            push b
14446  57C2 07 4F 60      call printf
14447  57C5 51 04 00      add sp, 4
14448  57C8             ; --- END FUNCTION CALL
14449  57C8 0A 47 58      jmp _if232_exit
14450  57CB             _if232_else:
14451  57CB             ; damage[r] = damage[r] + get_rand(300) + 100; 
14452  57CB 3B 44 6E      mov d, _damage_data ; $damage
14453  57CE D7            push a
14454  57CF DA            push d
14455  57D0                              
14456  57D0 FA FA FF      lea d, [bp + -6] ; $r
14457  57D3 32            mov bl, [d]
14458  57D4 A7 00         mov bh, 0
14459  57D6 38 00 00      mov c, 0
14460  57D9 E7            pop d
14461  57DA FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14462  57DE E4            pop a
14463  57DF DA            push d
14464  57E0                              
14465  57E0 3B 44 6E      mov d, _damage_data ; $damage
14466  57E3 D7            push a
14467  57E4 DA            push d
14468  57E5                              
14469  57E5 FA FA FF      lea d, [bp + -6] ; $r
14470  57E8 32            mov bl, [d]
14471  57E9 A7 00         mov bh, 0
14472  57EB 38 00 00      mov c, 0
14473  57EE E7            pop d
14474  57EF FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14475  57F3 E4            pop a
14476  57F4 2A            mov b, [d]
14477  57F5 38 00 00      mov c, 0
14478  57F8             ; --- START TERMS
14479  57F8 D7            push a
14480  57F9 11            mov a, b
14481  57FA             ; --- START FUNCTION CALL
14482  57FA                              
14483  57FA FD 2E 2C 01   mov32 cb, $0000012c
14483  57FE 00 00 
14484  5800 FD AB         swp b
14485  5802 D8            push b
14486  5803 07 FF 04      call get_rand
14487  5806 51 02 00      add sp, 2
14488  5809             ; --- END FUNCTION CALL
14489  5809 56            add b, a
14490  580A 11            mov a, b
14491  580B FD 2E 64 00   mov32 cb, $00000064
14491  580F 00 00 
14492  5811 56            add b, a
14493  5812 E4            pop a
14494  5813             ; --- END TERMS
14495  5813 E7            pop d
14496  5814 FD 43         mov [d], b
14497  5816             ; puts(dcr_1); 
14498  5816                              
14499  5816             ; --- START FUNCTION CALL
14500  5816                              
14501  5816 3B 57 6F      mov d, _dcr_1 ; $dcr_1
14502  5819 2A            mov b, [d]
14503  581A 38 00 00      mov c, 0
14504  581D FD AB         swp b
14505  581F D8            push b
14506  5820 07 5C 69      call puts
14507  5823 51 02 00      add sp, 2
14508  5826             ; --- END FUNCTION CALL
14509  5826             ; printf("    %s state of repair improved\n\n", 
14510  5826                              
14511  5826             ; --- START FUNCTION CALL
14512  5826                              
14513  5826             ; --- START FUNCTION CALL
14514  5826                              
14515  5826 FA FA FF      lea d, [bp + -6] ; $r
14516  5829 32            mov bl, [d]
14517  582A A7 00         mov bh, 0
14518  582C 38 00 00      mov c, 0
14519  582F FD AB         swp b
14520  5831 D8            push b
14521  5832 07 40 59      call get_device_name
14522  5835 51 02 00      add sp, 2
14523  5838             ; --- END FUNCTION CALL
14524  5838 FD AB         swp b
14525  583A D8            push b
14526  583B                              
14527  583B 26 F5 82      mov b, _s163 ; "    %s state of repair improved\n\n"
14528  583E FD AB         swp b
14529  5840 D8            push b
14530  5841 07 4F 60      call printf
14531  5844 51 04 00      add sp, 4
14532  5847             ; --- END FUNCTION CALL
14533  5847             _if232_exit:
14534  5847 0A 4A 58      jmp _if231_exit
14535  584A             _if231_exit:
14536  584A F9            leave
14537  584B 09            ret
14538  584C             
14539  584C             find_set_empty_place:
14540  584C F8 00 00      enter 0 ; (push bp; mov bp, sp)
14541  584F             ; unsigned char r1, r2; 
14542  584F 52 01 00      sub sp, 1
14543  5852 52 01 00      sub sp, 1
14544  5855             ; do { 
14545  5855             _do233_block:
14546  5855             ; r1 = rand8(); 
14547  5855 FA 00 00      lea d, [bp + 0] ; $r1
14548  5858 DA            push d
14549  5859                              
14550  5859             ; --- START FUNCTION CALL
14551  5859 07 6F 05      call rand8
14552  585C E7            pop d
14553  585D FD 3E         mov [d], bl
14554  585F             ; r2 = rand8(); 
14555  585F FA FF FF      lea d, [bp + -1] ; $r2
14556  5862 DA            push d
14557  5863                              
14558  5863             ; --- START FUNCTION CALL
14559  5863 07 6F 05      call rand8
14560  5866 E7            pop d
14561  5867 FD 3E         mov [d], bl
14562  5869             ; } while (quad[r1+-1][r2+-1] != 		0 ); 
14563  5869             _do233_cond:
14564  5869                              
14565  5869 3B 5E 6E      mov d, _quad_data ; $quad
14566  586C D7            push a
14567  586D DA            push d
14568  586E                              
14569  586E FA 00 00      lea d, [bp + 0] ; $r1
14570  5871 32            mov bl, [d]
14571  5872 A7 00         mov bh, 0
14572  5874 38 00 00      mov c, 0
14573  5877             ; --- START TERMS
14574  5877 D7            push a
14575  5878 11            mov a, b
14576  5879 FD 2E FF FF   mov32 cb, $ffffffff
14576  587D FF FF 
14577  587F 56            add b, a
14578  5880 E4            pop a
14579  5881             ; --- END TERMS
14580  5881 E7            pop d
14581  5882 FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
14582  5886 DA            push d
14583  5887                              
14584  5887 FA FF FF      lea d, [bp + -1] ; $r2
14585  588A 32            mov bl, [d]
14586  588B A7 00         mov bh, 0
14587  588D 38 00 00      mov c, 0
14588  5890             ; --- START TERMS
14589  5890 D7            push a
14590  5891 11            mov a, b
14591  5892 FD 2E FF FF   mov32 cb, $ffffffff
14591  5896 FF FF 
14592  5898 56            add b, a
14593  5899 E4            pop a
14594  589A             ; --- END TERMS
14595  589A E7            pop d
14596  589B 5A            add d, b
14597  589C E4            pop a
14598  589D 32            mov bl, [d]
14599  589E A7 00         mov bh, 0
14600  58A0 38 00 00      mov c, 0
14601  58A3             ; --- START RELATIONAL
14602  58A3 D7            push a
14603  58A4 11            mov a, b
14604  58A5 FD 2E 00 00   mov32 cb, $00000000
14604  58A9 00 00 
14605  58AB B0            cmp a, b
14606  58AC FD 72         sneq ; !=
14607  58AE E4            pop a
14608  58AF             ; --- END RELATIONAL
14609  58AF C0 01 00      cmp b, 1
14610  58B2 C6 55 58      je _do233_block
14611  58B5             _do233_exit:
14612  58B5             ; quad[r1+-1][r2+-1] = t; 
14613  58B5 3B 5E 6E      mov d, _quad_data ; $quad
14614  58B8 D7            push a
14615  58B9 DA            push d
14616  58BA                              
14617  58BA FA 00 00      lea d, [bp + 0] ; $r1
14618  58BD 32            mov bl, [d]
14619  58BE A7 00         mov bh, 0
14620  58C0 38 00 00      mov c, 0
14621  58C3             ; --- START TERMS
14622  58C3 D7            push a
14623  58C4 11            mov a, b
14624  58C5 FD 2E FF FF   mov32 cb, $ffffffff
14624  58C9 FF FF 
14625  58CB 56            add b, a
14626  58CC E4            pop a
14627  58CD             ; --- END TERMS
14628  58CD E7            pop d
14629  58CE FD 13 08 00   mma 8 ; mov a, 8; mul a, b; add d, b
14630  58D2 DA            push d
14631  58D3                              
14632  58D3 FA FF FF      lea d, [bp + -1] ; $r2
14633  58D6 32            mov bl, [d]
14634  58D7 A7 00         mov bh, 0
14635  58D9 38 00 00      mov c, 0
14636  58DC             ; --- START TERMS
14637  58DC D7            push a
14638  58DD 11            mov a, b
14639  58DE FD 2E FF FF   mov32 cb, $ffffffff
14639  58E2 FF FF 
14640  58E4 56            add b, a
14641  58E5 E4            pop a
14642  58E6             ; --- END TERMS
14643  58E6 E7            pop d
14644  58E7 5A            add d, b
14645  58E8 E4            pop a
14646  58E9 DA            push d
14647  58EA                              
14648  58EA FA 05 00      lea d, [bp + 5] ; $t
14649  58ED 32            mov bl, [d]
14650  58EE A7 00         mov bh, 0
14651  58F0 38 00 00      mov c, 0
14652  58F3 E7            pop d
14653  58F4 FD 3E         mov [d], bl
14654  58F6             ; if (z1) 
14655  58F6             _if234_cond:
14656  58F6                              
14657  58F6 FA 06 00      lea d, [bp + 6] ; $z1
14658  58F9 2A            mov b, [d]
14659  58FA 38 00 00      mov c, 0
14660  58FD C0 00 00      cmp b, 0
14661  5900 C6 1A 59      je _if234_exit
14662  5903             _if234_TRUE:
14663  5903             ; *z1 = r1; 
14664  5903 FA 06 00      lea d, [bp + 6] ; $z1
14665  5906 2A            mov b, [d]
14666  5907 38 00 00      mov c, 0
14667  590A D8            push b
14668  590B                              
14669  590B FA 00 00      lea d, [bp + 0] ; $r1
14670  590E 32            mov bl, [d]
14671  590F A7 00         mov bh, 0
14672  5911 38 00 00      mov c, 0
14673  5914 E7            pop d
14674  5915 FD 3E         mov [d], bl
14675  5917 0A 1A 59      jmp _if234_exit
14676  591A             _if234_exit:
14677  591A             ; if (z2) 
14678  591A             _if235_cond:
14679  591A                              
14680  591A FA 08 00      lea d, [bp + 8] ; $z2
14681  591D 2A            mov b, [d]
14682  591E 38 00 00      mov c, 0
14683  5921 C0 00 00      cmp b, 0
14684  5924 C6 3E 59      je _if235_exit
14685  5927             _if235_TRUE:
14686  5927             ; *z2 = r2; 
14687  5927 FA 08 00      lea d, [bp + 8] ; $z2
14688  592A 2A            mov b, [d]
14689  592B 38 00 00      mov c, 0
14690  592E D8            push b
14691  592F                              
14692  592F FA FF FF      lea d, [bp + -1] ; $r2
14693  5932 32            mov bl, [d]
14694  5933 A7 00         mov bh, 0
14695  5935 38 00 00      mov c, 0
14696  5938 E7            pop d
14697  5939 FD 3E         mov [d], bl
14698  593B 0A 3E 59      jmp _if235_exit
14699  593E             _if235_exit:
14700  593E F9            leave
14701  593F 09            ret
14702  5940             
14703  5940             get_device_name:
14704  5940 F8 00 00      enter 0 ; (push bp; mov bp, sp)
14705  5943             ; if (n < 0 || n > 8) 
14706  5943             _if236_cond:
14707  5943                              
14708  5943 FA 05 00      lea d, [bp + 5] ; $n
14709  5946 2A            mov b, [d]
14710  5947 38 00 00      mov c, 0
14711  594A             ; --- START RELATIONAL
14712  594A D7            push a
14713  594B 11            mov a, b
14714  594C FD 2E 00 00   mov32 cb, $00000000
14714  5950 00 00 
14715  5952 B0            cmp a, b
14716  5953 FD 73         slt ; < (signed)
14717  5955 E4            pop a
14718  5956             ; --- END RELATIONAL
14719  5956             ; --- START LOGICAL OR
14720  5956 D7            push a
14721  5957 11            mov a, b
14722  5958 FA 05 00      lea d, [bp + 5] ; $n
14723  595B 2A            mov b, [d]
14724  595C 38 00 00      mov c, 0
14725  595F             ; --- START RELATIONAL
14726  595F D7            push a
14727  5960 11            mov a, b
14728  5961 FD 2E 08 00   mov32 cb, $00000008
14728  5965 00 00 
14729  5967 B0            cmp a, b
14730  5968 FD 7F         sgt ; >
14731  596A E4            pop a
14732  596B             ; --- END RELATIONAL
14733  596B FD A8         sor a, b ; ||
14734  596D E4            pop a
14735  596E             ; --- END LOGICAL OR
14736  596E C0 00 00      cmp b, 0
14737  5971 C6 84 59      je _if236_exit
14738  5974             _if236_TRUE:
14739  5974             ; n = 0; 
14740  5974 FA 05 00      lea d, [bp + 5] ; $n
14741  5977 DA            push d
14742  5978                              
14743  5978 FD 2E 00 00   mov32 cb, $00000000
14743  597C 00 00 
14744  597E E7            pop d
14745  597F FD 43         mov [d], b
14746  5981 0A 84 59      jmp _if236_exit
14747  5984             _if236_exit:
14748  5984             ; return device_name[n]; 
14749  5984                              
14750  5984 3B 1A 6F      mov d, _device_name_data ; $device_name
14751  5987 D7            push a
14752  5988 DA            push d
14753  5989                              
14754  5989 FA 05 00      lea d, [bp + 5] ; $n
14755  598C 2A            mov b, [d]
14756  598D 38 00 00      mov c, 0
14757  5990 E7            pop d
14758  5991 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14759  5995 E4            pop a
14760  5996 2A            mov b, [d]
14761  5997 38 00 00      mov c, 0
14762  599A F9            leave
14763  599B 09            ret
14764  599C             
14765  599C             quadrant_name:
14766  599C F8 00 00      enter 0 ; (push bp; mov bp, sp)
14767  599F             ; static char *sect_name[] = { "", " I", " II", " III", " IV" }; 
14768  599F 52 14 00      sub sp, 20
14769  59A2             ; if (y < 1 || y > 8 || x < 1 || x > 8) 
14770  59A2             _if237_cond:
14771  59A2                              
14772  59A2 FA 06 00      lea d, [bp + 6] ; $y
14773  59A5 32            mov bl, [d]
14774  59A6 A7 00         mov bh, 0
14775  59A8 38 00 00      mov c, 0
14776  59AB             ; --- START RELATIONAL
14777  59AB D7            push a
14778  59AC 11            mov a, b
14779  59AD FD 2E 01 00   mov32 cb, $00000001
14779  59B1 00 00 
14780  59B3 B0            cmp a, b
14781  59B4 FD 75         slu ; < (unsigned)
14782  59B6 E4            pop a
14783  59B7             ; --- END RELATIONAL
14784  59B7             ; --- START LOGICAL OR
14785  59B7 D7            push a
14786  59B8 11            mov a, b
14787  59B9 FA 06 00      lea d, [bp + 6] ; $y
14788  59BC 32            mov bl, [d]
14789  59BD A7 00         mov bh, 0
14790  59BF 38 00 00      mov c, 0
14791  59C2             ; --- START RELATIONAL
14792  59C2 D7            push a
14793  59C3 11            mov a, b
14794  59C4 FD 2E 08 00   mov32 cb, $00000008
14794  59C8 00 00 
14795  59CA B0            cmp a, b
14796  59CB FD 81         sgu ; > (unsigned)
14797  59CD E4            pop a
14798  59CE             ; --- END RELATIONAL
14799  59CE FD A8         sor a, b ; ||
14800  59D0 11            mov a, b
14801  59D1 FA 07 00      lea d, [bp + 7] ; $x
14802  59D4 32            mov bl, [d]
14803  59D5 A7 00         mov bh, 0
14804  59D7 38 00 00      mov c, 0
14805  59DA             ; --- START RELATIONAL
14806  59DA D7            push a
14807  59DB 11            mov a, b
14808  59DC FD 2E 01 00   mov32 cb, $00000001
14808  59E0 00 00 
14809  59E2 B0            cmp a, b
14810  59E3 FD 75         slu ; < (unsigned)
14811  59E5 E4            pop a
14812  59E6             ; --- END RELATIONAL
14813  59E6 FD A8         sor a, b ; ||
14814  59E8 11            mov a, b
14815  59E9 FA 07 00      lea d, [bp + 7] ; $x
14816  59EC 32            mov bl, [d]
14817  59ED A7 00         mov bh, 0
14818  59EF 38 00 00      mov c, 0
14819  59F2             ; --- START RELATIONAL
14820  59F2 D7            push a
14821  59F3 11            mov a, b
14822  59F4 FD 2E 08 00   mov32 cb, $00000008
14822  59F8 00 00 
14823  59FA B0            cmp a, b
14824  59FB FD 81         sgu ; > (unsigned)
14825  59FD E4            pop a
14826  59FE             ; --- END RELATIONAL
14827  59FE FD A8         sor a, b ; ||
14828  5A00 E4            pop a
14829  5A01             ; --- END LOGICAL OR
14830  5A01 C0 00 00      cmp b, 0
14831  5A04 C6 20 5A      je _if237_exit
14832  5A07             _if237_TRUE:
14833  5A07             ; strcpy(quadname, "Unknown"); 
14834  5A07                              
14835  5A07             ; --- START FUNCTION CALL
14836  5A07                              
14837  5A07 26 27 83      mov b, _s168 ; "Unknown"
14838  5A0A FD AB         swp b
14839  5A0C D8            push b
14840  5A0D                              
14841  5A0D 3B 9E 6E      mov d, _quadname_data ; $quadname
14842  5A10 2D            mov b, d
14843  5A11 38 00 00      mov c, 0
14844  5A14 FD AB         swp b
14845  5A16 D8            push b
14846  5A17 07 97 5E      call strcpy
14847  5A1A 51 04 00      add sp, 4
14848  5A1D             ; --- END FUNCTION CALL
14849  5A1D 0A 20 5A      jmp _if237_exit
14850  5A20             _if237_exit:
14851  5A20             ; if (x <= 4) 
14852  5A20             _if238_cond:
14853  5A20                              
14854  5A20 FA 07 00      lea d, [bp + 7] ; $x
14855  5A23 32            mov bl, [d]
14856  5A24 A7 00         mov bh, 0
14857  5A26 38 00 00      mov c, 0
14858  5A29             ; --- START RELATIONAL
14859  5A29 D7            push a
14860  5A2A 11            mov a, b
14861  5A2B FD 2E 04 00   mov32 cb, $00000004
14861  5A2F 00 00 
14862  5A31 B0            cmp a, b
14863  5A32 FD 76         sleu ; <= (unsigned)
14864  5A34 E4            pop a
14865  5A35             ; --- END RELATIONAL
14866  5A35 C0 00 00      cmp b, 0
14867  5A38 C6 69 5A      je _if238_else
14868  5A3B             _if238_TRUE:
14869  5A3B             ; strcpy(quadname, quad_name[y]); 
14870  5A3B                              
14871  5A3B             ; --- START FUNCTION CALL
14872  5A3B                              
14873  5A3B 3B D4 6E      mov d, _quad_name_data ; $quad_name
14874  5A3E D7            push a
14875  5A3F DA            push d
14876  5A40                              
14877  5A40 FA 06 00      lea d, [bp + 6] ; $y
14878  5A43 32            mov bl, [d]
14879  5A44 A7 00         mov bh, 0
14880  5A46 38 00 00      mov c, 0
14881  5A49 E7            pop d
14882  5A4A FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14883  5A4E E4            pop a
14884  5A4F 2A            mov b, [d]
14885  5A50 38 00 00      mov c, 0
14886  5A53 FD AB         swp b
14887  5A55 D8            push b
14888  5A56                              
14889  5A56 3B 9E 6E      mov d, _quadname_data ; $quadname
14890  5A59 2D            mov b, d
14891  5A5A 38 00 00      mov c, 0
14892  5A5D FD AB         swp b
14893  5A5F D8            push b
14894  5A60 07 97 5E      call strcpy
14895  5A63 51 04 00      add sp, 4
14896  5A66             ; --- END FUNCTION CALL
14897  5A66 0A 9E 5A      jmp _if238_exit
14898  5A69             _if238_else:
14899  5A69             ; strcpy(quadname, quad_name[y + 8]); 
14900  5A69                              
14901  5A69             ; --- START FUNCTION CALL
14902  5A69                              
14903  5A69 3B D4 6E      mov d, _quad_name_data ; $quad_name
14904  5A6C D7            push a
14905  5A6D DA            push d
14906  5A6E                              
14907  5A6E FA 06 00      lea d, [bp + 6] ; $y
14908  5A71 32            mov bl, [d]
14909  5A72 A7 00         mov bh, 0
14910  5A74 38 00 00      mov c, 0
14911  5A77             ; --- START TERMS
14912  5A77 D7            push a
14913  5A78 11            mov a, b
14914  5A79 FD 2E 08 00   mov32 cb, $00000008
14914  5A7D 00 00 
14915  5A7F 56            add b, a
14916  5A80 E4            pop a
14917  5A81             ; --- END TERMS
14918  5A81 E7            pop d
14919  5A82 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
14920  5A86 E4            pop a
14921  5A87 2A            mov b, [d]
14922  5A88 38 00 00      mov c, 0
14923  5A8B FD AB         swp b
14924  5A8D D8            push b
14925  5A8E                              
14926  5A8E 3B 9E 6E      mov d, _quadname_data ; $quadname
14927  5A91 2D            mov b, d
14928  5A92 38 00 00      mov c, 0
14929  5A95 FD AB         swp b
14930  5A97 D8            push b
14931  5A98 07 97 5E      call strcpy
14932  5A9B 51 04 00      add sp, 4
14933  5A9E             ; --- END FUNCTION CALL
14934  5A9E             _if238_exit:
14935  5A9E             ; if (small != 1) { 
14936  5A9E             _if239_cond:
14937  5A9E                              
14938  5A9E FA 05 00      lea d, [bp + 5] ; $small
14939  5AA1 32            mov bl, [d]
14940  5AA2 A7 00         mov bh, 0
14941  5AA4 38 00 00      mov c, 0
14942  5AA7             ; --- START RELATIONAL
14943  5AA7 D7            push a
14944  5AA8 11            mov a, b
14945  5AA9 FD 2E 01 00   mov32 cb, $00000001
14945  5AAD 00 00 
14946  5AAF B0            cmp a, b
14947  5AB0 FD 72         sneq ; !=
14948  5AB2 E4            pop a
14949  5AB3             ; --- END RELATIONAL
14950  5AB3 C0 00 00      cmp b, 0
14951  5AB6 C6 20 5B      je _if239_exit
14952  5AB9             _if239_TRUE:
14953  5AB9             ; if (x > 4) 
14954  5AB9             _if240_cond:
14955  5AB9                              
14956  5AB9 FA 07 00      lea d, [bp + 7] ; $x
14957  5ABC 32            mov bl, [d]
14958  5ABD A7 00         mov bh, 0
14959  5ABF 38 00 00      mov c, 0
14960  5AC2             ; --- START RELATIONAL
14961  5AC2 D7            push a
14962  5AC3 11            mov a, b
14963  5AC4 FD 2E 04 00   mov32 cb, $00000004
14963  5AC8 00 00 
14964  5ACA B0            cmp a, b
14965  5ACB FD 81         sgu ; > (unsigned)
14966  5ACD E4            pop a
14967  5ACE             ; --- END RELATIONAL
14968  5ACE C0 00 00      cmp b, 0
14969  5AD1 C6 F2 5A      je _if240_exit
14970  5AD4             _if240_TRUE:
14971  5AD4             ; x = x - 4; 
14972  5AD4 FA 07 00      lea d, [bp + 7] ; $x
14973  5AD7 DA            push d
14974  5AD8                              
14975  5AD8 FA 07 00      lea d, [bp + 7] ; $x
14976  5ADB 32            mov bl, [d]
14977  5ADC A7 00         mov bh, 0
14978  5ADE 38 00 00      mov c, 0
14979  5AE1             ; --- START TERMS
14980  5AE1 D7            push a
14981  5AE2 11            mov a, b
14982  5AE3 FD 2E 04 00   mov32 cb, $00000004
14982  5AE7 00 00 
14983  5AE9 60            sub a, b
14984  5AEA 27            mov b, a
14985  5AEB E4            pop a
14986  5AEC             ; --- END TERMS
14987  5AEC E7            pop d
14988  5AED FD 3E         mov [d], bl
14989  5AEF 0A F2 5A      jmp _if240_exit
14990  5AF2             _if240_exit:
14991  5AF2             ; strcat(quadname, sect_name[x]); 
14992  5AF2                              
14993  5AF2             ; --- START FUNCTION CALL
14994  5AF2                              
14995  5AF2 3B 41 70      mov d, st_quadrant_name_sect_name_dt ; static sect_name
14996  5AF5 D7            push a
14997  5AF6 DA            push d
14998  5AF7                              
14999  5AF7 FA 07 00      lea d, [bp + 7] ; $x
15000  5AFA 32            mov bl, [d]
15001  5AFB A7 00         mov bh, 0
15002  5AFD 38 00 00      mov c, 0
15003  5B00 E7            pop d
15004  5B01 FD 13 02 00   mma 2 ; mov a, 2; mul a, b; add d, b
15005  5B05 E4            pop a
15006  5B06 2A            mov b, [d]
15007  5B07 38 00 00      mov c, 0
15008  5B0A FD AB         swp b
15009  5B0C D8            push b
15010  5B0D                              
15011  5B0D 3B 9E 6E      mov d, _quadname_data ; $quadname
15012  5B10 2D            mov b, d
15013  5B11 38 00 00      mov c, 0
15014  5B14 FD AB         swp b
15015  5B16 D8            push b
15016  5B17 07 11 5F      call strcat
15017  5B1A 51 04 00      add sp, 4
15018  5B1D             ; --- END FUNCTION CALL
15019  5B1D 0A 20 5B      jmp _if239_exit
15020  5B20             _if239_exit:
15021  5B20             ; return; 
15022  5B20 F9            leave
15023  5B21 09            ret
15024  5B22             
15025  5B22             isqrt:
15026  5B22 F8 00 00      enter 0 ; (push bp; mov bp, sp)
15027  5B25             ; unsigned int b, q, r, t; 
15028  5B25 52 02 00      sub sp, 2
15029  5B28 52 02 00      sub sp, 2
15030  5B2B 52 02 00      sub sp, 2
15031  5B2E 52 02 00      sub sp, 2
15032  5B31             ; b = 0x4000; 
15033  5B31 FA FF FF      lea d, [bp + -1] ; $b
15034  5B34 DA            push d
15035  5B35                              
15036  5B35 FD 2E 00 40   mov32 cb, $00004000
15036  5B39 00 00 
15037  5B3B E7            pop d
15038  5B3C FD 43         mov [d], b
15039  5B3E             ; q = 0; 
15040  5B3E FA FD FF      lea d, [bp + -3] ; $q
15041  5B41 DA            push d
15042  5B42                              
15043  5B42 FD 2E 00 00   mov32 cb, $00000000
15043  5B46 00 00 
15044  5B48 E7            pop d
15045  5B49 FD 43         mov [d], b
15046  5B4B             ; r = i; 
15047  5B4B FA FB FF      lea d, [bp + -5] ; $r
15048  5B4E DA            push d
15049  5B4F                              
15050  5B4F FA 05 00      lea d, [bp + 5] ; $i
15051  5B52 2A            mov b, [d]
15052  5B53 38 00 00      mov c, 0
15053  5B56 E7            pop d
15054  5B57 FD 43         mov [d], b
15055  5B59             ; while (b) { 
15056  5B59             _while241_cond:
15057  5B59                              
15058  5B59 FA FF FF      lea d, [bp + -1] ; $b
15059  5B5C 2A            mov b, [d]
15060  5B5D 38 00 00      mov c, 0
15061  5B60 C0 00 00      cmp b, 0
15062  5B63 C6 08 5C      je _while241_exit
15063  5B66             _while241_block:
15064  5B66             ; t = q + b; 
15065  5B66 FA F9 FF      lea d, [bp + -7] ; $t
15066  5B69 DA            push d
15067  5B6A                              
15068  5B6A FA FD FF      lea d, [bp + -3] ; $q
15069  5B6D 2A            mov b, [d]
15070  5B6E 38 00 00      mov c, 0
15071  5B71             ; --- START TERMS
15072  5B71 D7            push a
15073  5B72 11            mov a, b
15074  5B73 FA FF FF      lea d, [bp + -1] ; $b
15075  5B76 2A            mov b, [d]
15076  5B77 38 00 00      mov c, 0
15077  5B7A 56            add b, a
15078  5B7B E4            pop a
15079  5B7C             ; --- END TERMS
15080  5B7C E7            pop d
15081  5B7D FD 43         mov [d], b
15082  5B7F             ; q =q>> 1; 
15083  5B7F FA FD FF      lea d, [bp + -3] ; $q
15084  5B82 DA            push d
15085  5B83                              
15086  5B83 FA FD FF      lea d, [bp + -3] ; $q
15087  5B86 2A            mov b, [d]
15088  5B87 38 00 00      mov c, 0
15089  5B8A             ; --- START SHIFT
15090  5B8A D7            push a
15091  5B8B 11            mov a, b
15092  5B8C FD 2E 01 00   mov32 cb, $00000001
15092  5B90 00 00 
15093  5B92 FD 39         mov c, b
15094  5B94 A1            shr a, cl
15095  5B95 27            mov b, a
15096  5B96 E4            pop a
15097  5B97             ; --- END SHIFT
15098  5B97 E7            pop d
15099  5B98 FD 43         mov [d], b
15100  5B9A             ; if (r >= t) { 
15101  5B9A             _if242_cond:
15102  5B9A                              
15103  5B9A FA FB FF      lea d, [bp + -5] ; $r
15104  5B9D 2A            mov b, [d]
15105  5B9E 38 00 00      mov c, 0
15106  5BA1             ; --- START RELATIONAL
15107  5BA1 D7            push a
15108  5BA2 11            mov a, b
15109  5BA3 FA F9 FF      lea d, [bp + -7] ; $t
15110  5BA6 2A            mov b, [d]
15111  5BA7 38 00 00      mov c, 0
15112  5BAA B0            cmp a, b
15113  5BAB FD 82         sgeu ; >= (unsigned)
15114  5BAD E4            pop a
15115  5BAE             ; --- END RELATIONAL
15116  5BAE C0 00 00      cmp b, 0
15117  5BB1 C6 EA 5B      je _if242_exit
15118  5BB4             _if242_TRUE:
15119  5BB4             ; r =r- t; 
15120  5BB4 FA FB FF      lea d, [bp + -5] ; $r
15121  5BB7 DA            push d
15122  5BB8                              
15123  5BB8 FA FB FF      lea d, [bp + -5] ; $r
15124  5BBB 2A            mov b, [d]
15125  5BBC 38 00 00      mov c, 0
15126  5BBF             ; --- START TERMS
15127  5BBF D7            push a
15128  5BC0 11            mov a, b
15129  5BC1 FA F9 FF      lea d, [bp + -7] ; $t
15130  5BC4 2A            mov b, [d]
15131  5BC5 38 00 00      mov c, 0
15132  5BC8 60            sub a, b
15133  5BC9 27            mov b, a
15134  5BCA E4            pop a
15135  5BCB             ; --- END TERMS
15136  5BCB E7            pop d
15137  5BCC FD 43         mov [d], b
15138  5BCE             ; q = q + b; 
15139  5BCE FA FD FF      lea d, [bp + -3] ; $q
15140  5BD1 DA            push d
15141  5BD2                              
15142  5BD2 FA FD FF      lea d, [bp + -3] ; $q
15143  5BD5 2A            mov b, [d]
15144  5BD6 38 00 00      mov c, 0
15145  5BD9             ; --- START TERMS
15146  5BD9 D7            push a
15147  5BDA 11            mov a, b
15148  5BDB FA FF FF      lea d, [bp + -1] ; $b
15149  5BDE 2A            mov b, [d]
15150  5BDF 38 00 00      mov c, 0
15151  5BE2 56            add b, a
15152  5BE3 E4            pop a
15153  5BE4             ; --- END TERMS
15154  5BE4 E7            pop d
15155  5BE5 FD 43         mov [d], b
15156  5BE7 0A EA 5B      jmp _if242_exit
15157  5BEA             _if242_exit:
15158  5BEA             ; b =b>> 2; 
15159  5BEA FA FF FF      lea d, [bp + -1] ; $b
15160  5BED DA            push d
15161  5BEE                              
15162  5BEE FA FF FF      lea d, [bp + -1] ; $b
15163  5BF1 2A            mov b, [d]
15164  5BF2 38 00 00      mov c, 0
15165  5BF5             ; --- START SHIFT
15166  5BF5 D7            push a
15167  5BF6 11            mov a, b
15168  5BF7 FD 2E 02 00   mov32 cb, $00000002
15168  5BFB 00 00 
15169  5BFD FD 39         mov c, b
15170  5BFF A1            shr a, cl
15171  5C00 27            mov b, a
15172  5C01 E4            pop a
15173  5C02             ; --- END SHIFT
15174  5C02 E7            pop d
15175  5C03 FD 43         mov [d], b
15176  5C05 0A 59 5B      jmp _while241_cond
15177  5C08             _while241_exit:
15178  5C08             ; return q; 
15179  5C08                              
15180  5C08 FA FD FF      lea d, [bp + -3] ; $q
15181  5C0B 2A            mov b, [d]
15182  5C0C 38 00 00      mov c, 0
15183  5C0F F9            leave
15184  5C10 09            ret
15185  5C11             
15186  5C11             square00:
15187  5C11 F8 00 00      enter 0 ; (push bp; mov bp, sp)
15188  5C14             ; if (abs(t) > 181) { 
15189  5C14             _if243_cond:
15190  5C14                              
15191  5C14             ; --- START FUNCTION CALL
15192  5C14                              
15193  5C14 FA 05 00      lea d, [bp + 5] ; $t
15194  5C17 2A            mov b, [d]
15195  5C18 38 00 00      mov c, 0
15196  5C1B FD AB         swp b
15197  5C1D D8            push b
15198  5C1E 07 3D 6B      call abs
15199  5C21 51 02 00      add sp, 2
15200  5C24             ; --- END FUNCTION CALL
15201  5C24             ; --- START RELATIONAL
15202  5C24 D7            push a
15203  5C25 11            mov a, b
15204  5C26 FD 2E B5 00   mov32 cb, $000000b5
15204  5C2A 00 00 
15205  5C2C B0            cmp a, b
15206  5C2D FD 7F         sgt ; >
15207  5C2F E4            pop a
15208  5C30             ; --- END RELATIONAL
15209  5C30 C0 00 00      cmp b, 0
15210  5C33 C6 B2 5C      je _if243_else
15211  5C36             _if243_TRUE:
15212  5C36             ; t =t/ 10; 
15213  5C36 FA 05 00      lea d, [bp + 5] ; $t
15214  5C39 DA            push d
15215  5C3A                              
15216  5C3A FA 05 00      lea d, [bp + 5] ; $t
15217  5C3D 2A            mov b, [d]
15218  5C3E 38 00 00      mov c, 0
15219  5C41             ; --- START FACTORS
15220  5C41 D7            push a
15221  5C42 FD D8         push g
15222  5C44 11            mov a, b
15223  5C45 FD 7A         mov g, c
15224  5C47 FD 2E 0A 00   mov32 cb, $0000000a
15224  5C4B 00 00 
15225  5C4D FD D8         push g ; save 'g' as the div instruction uses it
15226  5C4F AE            div a, b ; /, a: quotient, b: remainder
15227  5C50 FD F1         pop g
15228  5C52 FD 38         mov c, g
15229  5C54 27            mov b, a
15230  5C55 FD F1         pop g
15231  5C57 E4            pop a
15232  5C58             ; --- END FACTORS
15233  5C58 E7            pop d
15234  5C59 FD 43         mov [d], b
15235  5C5B             ; t =t* t; 
15236  5C5B FA 05 00      lea d, [bp + 5] ; $t
15237  5C5E DA            push d
15238  5C5F                              
15239  5C5F FA 05 00      lea d, [bp + 5] ; $t
15240  5C62 2A            mov b, [d]
15241  5C63 38 00 00      mov c, 0
15242  5C66             ; --- START FACTORS
15243  5C66 D7            push a
15244  5C67 FD D8         push g
15245  5C69 11            mov a, b
15246  5C6A FD 7A         mov g, c
15247  5C6C FA 05 00      lea d, [bp + 5] ; $t
15248  5C6F 2A            mov b, [d]
15249  5C70 38 00 00      mov c, 0
15250  5C73 D7            push a     ; save left operand
15251  5C74 8E            xor a, b   ; xor sign bits
15252  5C75 FD AA         swp a      ; swap bytes
15253  5C77 83            mov cl, al ; save result of xor into 'dl'
15254  5C78 E4            pop a      ; restore left side operator
15255  5C79 DF            push cl    ; save result of xor above
15256  5C7A FD AA         swp a  
15257  5C7C 93 80         test al, $80  
15258  5C7E FD AA         swp a  
15259  5C80 C6 85 5C      jz skip_invert_a_245  
15260  5C83 FD 95         neg a 
15261  5C85             skip_invert_a_245:   
15262  5C85 FD AB         swp b
15263  5C87 FD 93 80      test bl, $80  
15264  5C8A FD AB         swp b
15265  5C8C C6 91 5C      jz skip_invert_b_245  
15266  5C8F FD 97         neg b 
15267  5C91             skip_invert_b_245:   
15268  5C91 AC            mul a, b ; *
15269  5C92 FD 78         mov g, a
15270  5C94 11            mov a, b
15271  5C95 EA            pop bl
15272  5C96 FD 93 80      test bl, $80
15273  5C99 C6 A6 5C      jz _same_signs_245
15274  5C9C 2F            mov bl, al
15275  5C9D 95            not a
15276  5C9E FD 97         neg b
15277  5CA0 5B 00 00      adc a, 0
15278  5CA3 FD 78         mov g, a
15279  5CA5 11            mov a, b
15280  5CA6             _same_signs_245:
15281  5CA6 FD 38         mov c, g
15282  5CA8 27            mov b, a
15283  5CA9 FD F1         pop g
15284  5CAB E4            pop a
15285  5CAC             ; --- END FACTORS
15286  5CAC E7            pop d
15287  5CAD FD 43         mov [d], b
15288  5CAF 0A 2B 5D      jmp _if243_exit
15289  5CB2             _if243_else:
15290  5CB2             ; t =t* t; 
15291  5CB2 FA 05 00      lea d, [bp + 5] ; $t
15292  5CB5 DA            push d
15293  5CB6                              
15294  5CB6 FA 05 00      lea d, [bp + 5] ; $t
15295  5CB9 2A            mov b, [d]
15296  5CBA 38 00 00      mov c, 0
15297  5CBD             ; --- START FACTORS
15298  5CBD D7            push a
15299  5CBE FD D8         push g
15300  5CC0 11            mov a, b
15301  5CC1 FD 7A         mov g, c
15302  5CC3 FA 05 00      lea d, [bp + 5] ; $t
15303  5CC6 2A            mov b, [d]
15304  5CC7 38 00 00      mov c, 0
15305  5CCA D7            push a     ; save left operand
15306  5CCB 8E            xor a, b   ; xor sign bits
15307  5CCC FD AA         swp a      ; swap bytes
15308  5CCE 83            mov cl, al ; save result of xor into 'dl'
15309  5CCF E4            pop a      ; restore left side operator
15310  5CD0 DF            push cl    ; save result of xor above
15311  5CD1 FD AA         swp a  
15312  5CD3 93 80         test al, $80  
15313  5CD5 FD AA         swp a  
15314  5CD7 C6 DC 5C      jz skip_invert_a_246  
15315  5CDA FD 95         neg a 
15316  5CDC             skip_invert_a_246:   
15317  5CDC FD AB         swp b
15318  5CDE FD 93 80      test bl, $80  
15319  5CE1 FD AB         swp b
15320  5CE3 C6 E8 5C      jz skip_invert_b_246  
15321  5CE6 FD 97         neg b 
15322  5CE8             skip_invert_b_246:   
15323  5CE8 AC            mul a, b ; *
15324  5CE9 FD 78         mov g, a
15325  5CEB 11            mov a, b
15326  5CEC EA            pop bl
15327  5CED FD 93 80      test bl, $80
15328  5CF0 C6 FD 5C      jz _same_signs_246
15329  5CF3 2F            mov bl, al
15330  5CF4 95            not a
15331  5CF5 FD 97         neg b
15332  5CF7 5B 00 00      adc a, 0
15333  5CFA FD 78         mov g, a
15334  5CFC 11            mov a, b
15335  5CFD             _same_signs_246:
15336  5CFD FD 38         mov c, g
15337  5CFF 27            mov b, a
15338  5D00 FD F1         pop g
15339  5D02 E4            pop a
15340  5D03             ; --- END FACTORS
15341  5D03 E7            pop d
15342  5D04 FD 43         mov [d], b
15343  5D06             ; t =t/ 100; 
15344  5D06 FA 05 00      lea d, [bp + 5] ; $t
15345  5D09 DA            push d
15346  5D0A                              
15347  5D0A FA 05 00      lea d, [bp + 5] ; $t
15348  5D0D 2A            mov b, [d]
15349  5D0E 38 00 00      mov c, 0
15350  5D11             ; --- START FACTORS
15351  5D11 D7            push a
15352  5D12 FD D8         push g
15353  5D14 11            mov a, b
15354  5D15 FD 7A         mov g, c
15355  5D17 FD 2E 64 00   mov32 cb, $00000064
15355  5D1B 00 00 
15356  5D1D FD D8         push g ; save 'g' as the div instruction uses it
15357  5D1F AE            div a, b ; /, a: quotient, b: remainder
15358  5D20 FD F1         pop g
15359  5D22 FD 38         mov c, g
15360  5D24 27            mov b, a
15361  5D25 FD F1         pop g
15362  5D27 E4            pop a
15363  5D28             ; --- END FACTORS
15364  5D28 E7            pop d
15365  5D29 FD 43         mov [d], b
15366  5D2B             _if243_exit:
15367  5D2B             ; return t; 
15368  5D2B                              
15369  5D2B FA 05 00      lea d, [bp + 5] ; $t
15370  5D2E 2A            mov b, [d]
15371  5D2F 38 00 00      mov c, 0
15372  5D32 F9            leave
15373  5D33 09            ret
15374  5D34             
15375  5D34             distance_to:
15376  5D34 F8 00 00      enter 0 ; (push bp; mov bp, sp)
15377  5D37             ; unsigned int j; 
15378  5D37 52 02 00      sub sp, 2
15379  5D3A             ; j = square00(TO_FIXED00(k->y) - ship_y); 
15380  5D3A FA FF FF      lea d, [bp + -1] ; $j
15381  5D3D DA            push d
15382  5D3E                              
15383  5D3E             ; --- START FUNCTION CALL
15384  5D3E                              
15385  5D3E             ; --- START FUNCTION CALL
15386  5D3E                              
15387  5D3E FA 05 00      lea d, [bp + 5] ; $k
15388  5D41 FD 2A         mov d, [d]
15389  5D43 58 00 00      add d, 0
15390  5D46 32            mov bl, [d]
15391  5D47 A7 00         mov bh, 0
15392  5D49 38 00 00      mov c, 0
15393  5D4C FD AB         swp b
15394  5D4E D8            push b
15395  5D4F 07 8B 04      call TO_FIXED00
15396  5D52 51 02 00      add sp, 2
15397  5D55             ; --- END FUNCTION CALL
15398  5D55             ; --- START TERMS
15399  5D55 D7            push a
15400  5D56 11            mov a, b
15401  5D57 3B 58 6E      mov d, _ship_y ; $ship_y
15402  5D5A 2A            mov b, [d]
15403  5D5B 38 00 00      mov c, 0
15404  5D5E 60            sub a, b
15405  5D5F 27            mov b, a
15406  5D60 E4            pop a
15407  5D61             ; --- END TERMS
15408  5D61 FD AB         swp b
15409  5D63 D8            push b
15410  5D64 07 11 5C      call square00
15411  5D67 51 02 00      add sp, 2
15412  5D6A             ; --- END FUNCTION CALL
15413  5D6A E7            pop d
15414  5D6B FD 43         mov [d], b
15415  5D6D             ; j = j + square00(TO_FIXED00(k->x) - ship_x); 
15416  5D6D FA FF FF      lea d, [bp + -1] ; $j
15417  5D70 DA            push d
15418  5D71                              
15419  5D71 FA FF FF      lea d, [bp + -1] ; $j
15420  5D74 2A            mov b, [d]
15421  5D75 38 00 00      mov c, 0
15422  5D78             ; --- START TERMS
15423  5D78 D7            push a
15424  5D79 11            mov a, b
15425  5D7A             ; --- START FUNCTION CALL
15426  5D7A                              
15427  5D7A             ; --- START FUNCTION CALL
15428  5D7A                              
15429  5D7A FA 05 00      lea d, [bp + 5] ; $k
15430  5D7D FD 2A         mov d, [d]
15431  5D7F 58 01 00      add d, 1
15432  5D82 32            mov bl, [d]
15433  5D83 A7 00         mov bh, 0
15434  5D85 38 00 00      mov c, 0
15435  5D88 FD AB         swp b
15436  5D8A D8            push b
15437  5D8B 07 8B 04      call TO_FIXED00
15438  5D8E 51 02 00      add sp, 2
15439  5D91             ; --- END FUNCTION CALL
15440  5D91             ; --- START TERMS
15441  5D91 D7            push a
15442  5D92 11            mov a, b
15443  5D93 3B 5A 6E      mov d, _ship_x ; $ship_x
15444  5D96 2A            mov b, [d]
15445  5D97 38 00 00      mov c, 0
15446  5D9A 60            sub a, b
15447  5D9B 27            mov b, a
15448  5D9C E4            pop a
15449  5D9D             ; --- END TERMS
15450  5D9D FD AB         swp b
15451  5D9F D8            push b
15452  5DA0 07 11 5C      call square00
15453  5DA3 51 02 00      add sp, 2
15454  5DA6             ; --- END FUNCTION CALL
15455  5DA6 56            add b, a
15456  5DA7 E4            pop a
15457  5DA8             ; --- END TERMS
15458  5DA8 E7            pop d
15459  5DA9 FD 43         mov [d], b
15460  5DAB             ; j = isqrt(j); 
15461  5DAB FA FF FF      lea d, [bp + -1] ; $j
15462  5DAE DA            push d
15463  5DAF                              
15464  5DAF             ; --- START FUNCTION CALL
15465  5DAF                              
15466  5DAF FA FF FF      lea d, [bp + -1] ; $j
15467  5DB2 2A            mov b, [d]
15468  5DB3 38 00 00      mov c, 0
15469  5DB6 FD AB         swp b
15470  5DB8 D8            push b
15471  5DB9 07 22 5B      call isqrt
15472  5DBC 51 02 00      add sp, 2
15473  5DBF             ; --- END FUNCTION CALL
15474  5DBF E7            pop d
15475  5DC0 FD 43         mov [d], b
15476  5DC2 F9            leave
15477  5DC3 09            ret
15478  5DC4             
15479  5DC4             cint100:
15480  5DC4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
15481  5DC7             ; return (d + 50) / 100; 
15482  5DC7                              
15483  5DC7                              
15484  5DC7 FA 05 00      lea d, [bp + 5] ; $d
15485  5DCA 2A            mov b, [d]
15486  5DCB 38 00 00      mov c, 0
15487  5DCE             ; --- START TERMS
15488  5DCE D7            push a
15489  5DCF 11            mov a, b
15490  5DD0 FD 2E 32 00   mov32 cb, $00000032
15490  5DD4 00 00 
15491  5DD6 56            add b, a
15492  5DD7 E4            pop a
15493  5DD8             ; --- END TERMS
15494  5DD8             ; --- START FACTORS
15495  5DD8 D7            push a
15496  5DD9 FD D8         push g
15497  5DDB 11            mov a, b
15498  5DDC FD 7A         mov g, c
15499  5DDE FD 2E 64 00   mov32 cb, $00000064
15499  5DE2 00 00 
15500  5DE4 FD D8         push g ; save 'g' as the div instruction uses it
15501  5DE6 AE            div a, b ; /, a: quotient, b: remainder
15502  5DE7 FD F1         pop g
15503  5DE9 FD 38         mov c, g
15504  5DEB 27            mov b, a
15505  5DEC FD F1         pop g
15506  5DEE E4            pop a
15507  5DEF             ; --- END FACTORS
15508  5DEF F9            leave
15509  5DF0 09            ret
15510  5DF1             
15511  5DF1             showfile:
15512  5DF1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
15513  5DF4 F9            leave
15514  5DF5 09            ret
15515  5DF6             
15516  5DF6             getchar:
15517  5DF6 F8 00 00      enter 0 ; (push bp; mov bp, sp)
15518  5DF9             ; char c; 
15519  5DF9 52 01 00      sub sp, 1
15520  5DFC             ; --- BEGIN INLINE ASM SEGMENT
15521  5DFC 19 01         mov al, 1
15522  5DFE 05 03         syscall sys_io      ; receive in AH
15523  5E00 1A            mov al, ah
15524  5E01 FA 00 00      lea d, [bp + 0] ; $c
15525  5E04 3E            mov [d], al
15526  5E05             ; --- END INLINE ASM SEGMENT
15527  5E05             ; return c; 
15528  5E05                              
15529  5E05 FA 00 00      lea d, [bp + 0] ; $c
15530  5E08 32            mov bl, [d]
15531  5E09 A7 00         mov bh, 0
15532  5E0B 38 00 00      mov c, 0
15533  5E0E F9            leave
15534  5E0F 09            ret
15535  5E10             
15536  5E10             exit:
15537  5E10 F8 00 00      enter 0 ; (push bp; mov bp, sp)
15538  5E13             ; --- BEGIN INLINE ASM SEGMENT
15539  5E13 05 0B         syscall sys_terminate_proc
15540  5E15             ; --- END INLINE ASM SEGMENT
15541  5E15 F9            leave
15542  5E16 09            ret
15543  5E17             
15544  5E17             tolower:
15545  5E17 F8 00 00      enter 0 ; (push bp; mov bp, sp)
15546  5E1A             ; if (ch >= 'A' && ch <= 'Z')  
15547  5E1A             _if249_cond:
15548  5E1A                              
15549  5E1A FA 05 00      lea d, [bp + 5] ; $ch
15550  5E1D 32            mov bl, [d]
15551  5E1E A7 00         mov bh, 0
15552  5E20 38 00 00      mov c, 0
15553  5E23             ; --- START RELATIONAL
15554  5E23 D7            push a
15555  5E24 11            mov a, b
15556  5E25 FD 2E 41 00   mov32 cb, $00000041
15556  5E29 00 00 
15557  5E2B B0            cmp a, b
15558  5E2C FD 80         sge ; >=
15559  5E2E E4            pop a
15560  5E2F             ; --- END RELATIONAL
15561  5E2F             ; --- START LOGICAL AND
15562  5E2F D7            push a
15563  5E30 11            mov a, b
15564  5E31 FA 05 00      lea d, [bp + 5] ; $ch
15565  5E34 32            mov bl, [d]
15566  5E35 A7 00         mov bh, 0
15567  5E37 38 00 00      mov c, 0
15568  5E3A             ; --- START RELATIONAL
15569  5E3A D7            push a
15570  5E3B 11            mov a, b
15571  5E3C FD 2E 5A 00   mov32 cb, $0000005a
15571  5E40 00 00 
15572  5E42 B0            cmp a, b
15573  5E43 FD 74         sle ; <= (signed)
15574  5E45 E4            pop a
15575  5E46             ; --- END RELATIONAL
15576  5E46 FD A7         sand a, b
15577  5E48 E4            pop a
15578  5E49             ; --- END LOGICAL AND
15579  5E49 C0 00 00      cmp b, 0
15580  5E4C C6 70 5E      je _if249_else
15581  5E4F             _if249_TRUE:
15582  5E4F             ; return ch - 'A' + 'a'; 
15583  5E4F                              
15584  5E4F FA 05 00      lea d, [bp + 5] ; $ch
15585  5E52 32            mov bl, [d]
15586  5E53 A7 00         mov bh, 0
15587  5E55 38 00 00      mov c, 0
15588  5E58             ; --- START TERMS
15589  5E58 D7            push a
15590  5E59 11            mov a, b
15591  5E5A FD 2E 41 00   mov32 cb, $00000041
15591  5E5E 00 00 
15592  5E60 60            sub a, b
15593  5E61 27            mov b, a
15594  5E62 11            mov a, b
15595  5E63 FD 2E 61 00   mov32 cb, $00000061
15595  5E67 00 00 
15596  5E69 56            add b, a
15597  5E6A E4            pop a
15598  5E6B             ; --- END TERMS
15599  5E6B F9            leave
15600  5E6C 09            ret
15601  5E6D 0A 7B 5E      jmp _if249_exit
15602  5E70             _if249_else:
15603  5E70             ; return ch; 
15604  5E70                              
15605  5E70 FA 05 00      lea d, [bp + 5] ; $ch
15606  5E73 32            mov bl, [d]
15607  5E74 A7 00         mov bh, 0
15608  5E76 38 00 00      mov c, 0
15609  5E79 F9            leave
15610  5E7A 09            ret
15611  5E7B             _if249_exit:
15612  5E7B F9            leave
15613  5E7C 09            ret
15614  5E7D             
15615  5E7D             rand:
15616  5E7D F8 00 00      enter 0 ; (push bp; mov bp, sp)
15617  5E80             ; int  sec; 
15618  5E80 52 02 00      sub sp, 2
15619  5E83             ; --- BEGIN INLINE ASM SEGMENT
15620  5E83 19 00         mov al, 0
15621  5E85 05 01         syscall sys_rtc					; get seconds
15622  5E87 1A            mov al, ah
15623  5E88 FA FF FF      lea d, [bp + -1] ; $sec
15624  5E8B 1E            mov al, [d]
15625  5E8C 22 00         mov ah, 0
15626  5E8E             ; --- END INLINE ASM SEGMENT
15627  5E8E             ; return sec; 
15628  5E8E                              
15629  5E8E FA FF FF      lea d, [bp + -1] ; $sec
15630  5E91 2A            mov b, [d]
15631  5E92 38 00 00      mov c, 0
15632  5E95 F9            leave
15633  5E96 09            ret
15634  5E97             
15635  5E97             strcpy:
15636  5E97 F8 00 00      enter 0 ; (push bp; mov bp, sp)
15637  5E9A             ; char *psrc; 
15638  5E9A 52 02 00      sub sp, 2
15639  5E9D             ; char *pdest; 
15640  5E9D 52 02 00      sub sp, 2
15641  5EA0             ; psrc = src; 
15642  5EA0 FA FF FF      lea d, [bp + -1] ; $psrc
15643  5EA3 DA            push d
15644  5EA4                              
15645  5EA4 FA 07 00      lea d, [bp + 7] ; $src
15646  5EA7 2A            mov b, [d]
15647  5EA8 38 00 00      mov c, 0
15648  5EAB E7            pop d
15649  5EAC FD 43         mov [d], b
15650  5EAE             ; pdest = dest; 
15651  5EAE FA FD FF      lea d, [bp + -3] ; $pdest
15652  5EB1 DA            push d
15653  5EB2                              
15654  5EB2 FA 05 00      lea d, [bp + 5] ; $dest
15655  5EB5 2A            mov b, [d]
15656  5EB6 38 00 00      mov c, 0
15657  5EB9 E7            pop d
15658  5EBA FD 43         mov [d], b
15659  5EBC             ; while(*psrc) *pdest++ = *psrc++; 
15660  5EBC             _while250_cond:
15661  5EBC                              
15662  5EBC FA FF FF      lea d, [bp + -1] ; $psrc
15663  5EBF 2A            mov b, [d]
15664  5EC0 38 00 00      mov c, 0
15665  5EC3 74            mov d, b
15666  5EC4 32            mov bl, [d]
15667  5EC5 A7 00         mov bh, 0
15668  5EC7 38 00 00      mov c, 0
15669  5ECA C0 00 00      cmp b, 0
15670  5ECD C6 FE 5E      je _while250_exit
15671  5ED0             _while250_block:
15672  5ED0             ; *pdest++ = *psrc++; 
15673  5ED0 FA FD FF      lea d, [bp + -3] ; $pdest
15674  5ED3 2A            mov b, [d]
15675  5ED4 38 00 00      mov c, 0
15676  5ED7 FD 77         inc b
15677  5ED9 FA FD FF      lea d, [bp + -3] ; $pdest
15678  5EDC FD 43         mov [d], b
15679  5EDE FD 7D         dec b
15680  5EE0 D8            push b
15681  5EE1                              
15682  5EE1 FA FF FF      lea d, [bp + -1] ; $psrc
15683  5EE4 2A            mov b, [d]
15684  5EE5 38 00 00      mov c, 0
15685  5EE8 FD 77         inc b
15686  5EEA FA FF FF      lea d, [bp + -1] ; $psrc
15687  5EED FD 43         mov [d], b
15688  5EEF FD 7D         dec b
15689  5EF1 74            mov d, b
15690  5EF2 32            mov bl, [d]
15691  5EF3 A7 00         mov bh, 0
15692  5EF5 38 00 00      mov c, 0
15693  5EF8 E7            pop d
15694  5EF9 FD 3E         mov [d], bl
15695  5EFB 0A BC 5E      jmp _while250_cond
15696  5EFE             _while250_exit:
15697  5EFE             ; *pdest = '\0'; 
15698  5EFE FA FD FF      lea d, [bp + -3] ; $pdest
15699  5F01 2A            mov b, [d]
15700  5F02 38 00 00      mov c, 0
15701  5F05 D8            push b
15702  5F06                              
15703  5F06 FD 2E 00 00   mov32 cb, $00000000
15703  5F0A 00 00 
15704  5F0C E7            pop d
15705  5F0D FD 3E         mov [d], bl
15706  5F0F F9            leave
15707  5F10 09            ret
15708  5F11             
15709  5F11             strcat:
15710  5F11 F8 00 00      enter 0 ; (push bp; mov bp, sp)
15711  5F14             ; int dest_len; 
15712  5F14 52 02 00      sub sp, 2
15713  5F17             ; int i; 
15714  5F17 52 02 00      sub sp, 2
15715  5F1A             ; dest_len = strlen(dest); 
15716  5F1A FA FF FF      lea d, [bp + -1] ; $dest_len
15717  5F1D DA            push d
15718  5F1E                              
15719  5F1E             ; --- START FUNCTION CALL
15720  5F1E                              
15721  5F1E FA 05 00      lea d, [bp + 5] ; $dest
15722  5F21 2A            mov b, [d]
15723  5F22 38 00 00      mov c, 0
15724  5F25 FD AB         swp b
15725  5F27 D8            push b
15726  5F28 07 F4 5F      call strlen
15727  5F2B 51 02 00      add sp, 2
15728  5F2E             ; --- END FUNCTION CALL
15729  5F2E E7            pop d
15730  5F2F FD 43         mov [d], b
15731  5F31             ; for (i = 0; src[i] != 0; i=i+1) { 
15732  5F31             _for251_init:
15733  5F31 FA FD FF      lea d, [bp + -3] ; $i
15734  5F34 DA            push d
15735  5F35                              
15736  5F35 FD 2E 00 00   mov32 cb, $00000000
15736  5F39 00 00 
15737  5F3B E7            pop d
15738  5F3C FD 43         mov [d], b
15739  5F3E             _for251_cond:
15740  5F3E                              
15741  5F3E FA 07 00      lea d, [bp + 7] ; $src
15742  5F41 FD 2A         mov d, [d]
15743  5F43 D7            push a
15744  5F44 DA            push d
15745  5F45                              
15746  5F45 FA FD FF      lea d, [bp + -3] ; $i
15747  5F48 2A            mov b, [d]
15748  5F49 38 00 00      mov c, 0
15749  5F4C E7            pop d
15750  5F4D FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
15751  5F51 E4            pop a
15752  5F52 32            mov bl, [d]
15753  5F53 A7 00         mov bh, 0
15754  5F55 38 00 00      mov c, 0
15755  5F58             ; --- START RELATIONAL
15756  5F58 D7            push a
15757  5F59 11            mov a, b
15758  5F5A FD 2E 00 00   mov32 cb, $00000000
15758  5F5E 00 00 
15759  5F60 B0            cmp a, b
15760  5F61 FD 72         sneq ; !=
15761  5F63 E4            pop a
15762  5F64             ; --- END RELATIONAL
15763  5F64 C0 00 00      cmp b, 0
15764  5F67 C6 C2 5F      je _for251_exit
15765  5F6A             _for251_block:
15766  5F6A             ; dest[dest_len + i] = src[i]; 
15767  5F6A FA 05 00      lea d, [bp + 5] ; $dest
15768  5F6D FD 2A         mov d, [d]
15769  5F6F D7            push a
15770  5F70 DA            push d
15771  5F71                              
15772  5F71 FA FF FF      lea d, [bp + -1] ; $dest_len
15773  5F74 2A            mov b, [d]
15774  5F75 38 00 00      mov c, 0
15775  5F78             ; --- START TERMS
15776  5F78 D7            push a
15777  5F79 11            mov a, b
15778  5F7A FA FD FF      lea d, [bp + -3] ; $i
15779  5F7D 2A            mov b, [d]
15780  5F7E 38 00 00      mov c, 0
15781  5F81 56            add b, a
15782  5F82 E4            pop a
15783  5F83             ; --- END TERMS
15784  5F83 E7            pop d
15785  5F84 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
15786  5F88 E4            pop a
15787  5F89 DA            push d
15788  5F8A                              
15789  5F8A FA 07 00      lea d, [bp + 7] ; $src
15790  5F8D FD 2A         mov d, [d]
15791  5F8F D7            push a
15792  5F90 DA            push d
15793  5F91                              
15794  5F91 FA FD FF      lea d, [bp + -3] ; $i
15795  5F94 2A            mov b, [d]
15796  5F95 38 00 00      mov c, 0
15797  5F98 E7            pop d
15798  5F99 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
15799  5F9D E4            pop a
15800  5F9E 32            mov bl, [d]
15801  5F9F A7 00         mov bh, 0
15802  5FA1 38 00 00      mov c, 0
15803  5FA4 E7            pop d
15804  5FA5 FD 3E         mov [d], bl
15805  5FA7             _for251_update:
15806  5FA7 FA FD FF      lea d, [bp + -3] ; $i
15807  5FAA DA            push d
15808  5FAB                              
15809  5FAB FA FD FF      lea d, [bp + -3] ; $i
15810  5FAE 2A            mov b, [d]
15811  5FAF 38 00 00      mov c, 0
15812  5FB2             ; --- START TERMS
15813  5FB2 D7            push a
15814  5FB3 11            mov a, b
15815  5FB4 FD 2E 01 00   mov32 cb, $00000001
15815  5FB8 00 00 
15816  5FBA 56            add b, a
15817  5FBB E4            pop a
15818  5FBC             ; --- END TERMS
15819  5FBC E7            pop d
15820  5FBD FD 43         mov [d], b
15821  5FBF 0A 3E 5F      jmp _for251_cond
15822  5FC2             _for251_exit:
15823  5FC2             ; dest[dest_len + i] = 0; 
15824  5FC2 FA 05 00      lea d, [bp + 5] ; $dest
15825  5FC5 FD 2A         mov d, [d]
15826  5FC7 D7            push a
15827  5FC8 DA            push d
15828  5FC9                              
15829  5FC9 FA FF FF      lea d, [bp + -1] ; $dest_len
15830  5FCC 2A            mov b, [d]
15831  5FCD 38 00 00      mov c, 0
15832  5FD0             ; --- START TERMS
15833  5FD0 D7            push a
15834  5FD1 11            mov a, b
15835  5FD2 FA FD FF      lea d, [bp + -3] ; $i
15836  5FD5 2A            mov b, [d]
15837  5FD6 38 00 00      mov c, 0
15838  5FD9 56            add b, a
15839  5FDA E4            pop a
15840  5FDB             ; --- END TERMS
15841  5FDB E7            pop d
15842  5FDC FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
15843  5FE0 E4            pop a
15844  5FE1 DA            push d
15845  5FE2                              
15846  5FE2 FD 2E 00 00   mov32 cb, $00000000
15846  5FE6 00 00 
15847  5FE8 E7            pop d
15848  5FE9 FD 3E         mov [d], bl
15849  5FEB             ; return dest; 
15850  5FEB                              
15851  5FEB FA 05 00      lea d, [bp + 5] ; $dest
15852  5FEE 2A            mov b, [d]
15853  5FEF 38 00 00      mov c, 0
15854  5FF2 F9            leave
15855  5FF3 09            ret
15856  5FF4             
15857  5FF4             strlen:
15858  5FF4 F8 00 00      enter 0 ; (push bp; mov bp, sp)
15859  5FF7             ; int length; 
15860  5FF7 52 02 00      sub sp, 2
15861  5FFA             ; length = 0; 
15862  5FFA FA FF FF      lea d, [bp + -1] ; $length
15863  5FFD DA            push d
15864  5FFE                              
15865  5FFE FD 2E 00 00   mov32 cb, $00000000
15865  6002 00 00 
15866  6004 E7            pop d
15867  6005 FD 43         mov [d], b
15868  6007             ; while (str[length] != 0) { 
15869  6007             _while252_cond:
15870  6007                              
15871  6007 FA 05 00      lea d, [bp + 5] ; $str
15872  600A FD 2A         mov d, [d]
15873  600C D7            push a
15874  600D DA            push d
15875  600E                              
15876  600E FA FF FF      lea d, [bp + -1] ; $length
15877  6011 2A            mov b, [d]
15878  6012 38 00 00      mov c, 0
15879  6015 E7            pop d
15880  6016 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
15881  601A E4            pop a
15882  601B 32            mov bl, [d]
15883  601C A7 00         mov bh, 0
15884  601E 38 00 00      mov c, 0
15885  6021             ; --- START RELATIONAL
15886  6021 D7            push a
15887  6022 11            mov a, b
15888  6023 FD 2E 00 00   mov32 cb, $00000000
15888  6027 00 00 
15889  6029 B0            cmp a, b
15890  602A FD 72         sneq ; !=
15891  602C E4            pop a
15892  602D             ; --- END RELATIONAL
15893  602D C0 00 00      cmp b, 0
15894  6030 C6 46 60      je _while252_exit
15895  6033             _while252_block:
15896  6033             ; length++; 
15897  6033                              
15898  6033 FA FF FF      lea d, [bp + -1] ; $length
15899  6036 2A            mov b, [d]
15900  6037 38 00 00      mov c, 0
15901  603A 11            mov a, b
15902  603B FD 77         inc b
15903  603D FA FF FF      lea d, [bp + -1] ; $length
15904  6040 FD 43         mov [d], b
15905  6042 27            mov b, a
15906  6043 0A 07 60      jmp _while252_cond
15907  6046             _while252_exit:
15908  6046             ; return length; 
15909  6046                              
15910  6046 FA FF FF      lea d, [bp + -1] ; $length
15911  6049 2A            mov b, [d]
15912  604A 38 00 00      mov c, 0
15913  604D F9            leave
15914  604E 09            ret
15915  604F             
15916  604F             printf:
15917  604F F8 00 00      enter 0 ; (push bp; mov bp, sp)
15918  6052             ; char *p, *format_p; 
15919  6052 52 02 00      sub sp, 2
15920  6055 52 02 00      sub sp, 2
15921  6058             ; format_p = format; 
15922  6058 FA FD FF      lea d, [bp + -3] ; $format_p
15923  605B DA            push d
15924  605C                              
15925  605C FA 05 00      lea d, [bp + 5] ; $format
15926  605F 2A            mov b, [d]
15927  6060 38 00 00      mov c, 0
15928  6063 E7            pop d
15929  6064 FD 43         mov [d], b
15930  6066             ; p = &format + 2; 
15931  6066 FA FF FF      lea d, [bp + -1] ; $p
15932  6069 DA            push d
15933  606A                              
15934  606A FA 05 00      lea d, [bp + 5] ; $format
15935  606D 2D            mov b, d
15936  606E             ; --- START TERMS
15937  606E D7            push a
15938  606F 11            mov a, b
15939  6070 FD 2E 02 00   mov32 cb, $00000002
15939  6074 00 00 
15940  6076 56            add b, a
15941  6077 E4            pop a
15942  6078             ; --- END TERMS
15943  6078 E7            pop d
15944  6079 FD 43         mov [d], b
15945  607B             ; for(;;){ 
15946  607B             _for253_init:
15947  607B             _for253_cond:
15948  607B             _for253_block:
15949  607B             ; if(!*format_p) break; 
15950  607B             _if254_cond:
15951  607B                              
15952  607B FA FD FF      lea d, [bp + -3] ; $format_p
15953  607E 2A            mov b, [d]
15954  607F 38 00 00      mov c, 0
15955  6082 74            mov d, b
15956  6083 32            mov bl, [d]
15957  6084 A7 00         mov bh, 0
15958  6086 38 00 00      mov c, 0
15959  6089 C0 00 00      cmp b, 0
15960  608C FD 71         seq ; !
15961  608E C0 00 00      cmp b, 0
15962  6091 C6 9A 60      je _if254_else
15963  6094             _if254_TRUE:
15964  6094             ; break; 
15965  6094 0A 4A 63      jmp _for253_exit ; for break
15966  6097 0A 47 63      jmp _if254_exit
15967  609A             _if254_else:
15968  609A             ; if(*format_p == '%'){ 
15969  609A             _if255_cond:
15970  609A                              
15971  609A FA FD FF      lea d, [bp + -3] ; $format_p
15972  609D 2A            mov b, [d]
15973  609E 38 00 00      mov c, 0
15974  60A1 74            mov d, b
15975  60A2 32            mov bl, [d]
15976  60A3 A7 00         mov bh, 0
15977  60A5 38 00 00      mov c, 0
15978  60A8             ; --- START RELATIONAL
15979  60A8 D7            push a
15980  60A9 11            mov a, b
15981  60AA FD 2E 25 00   mov32 cb, $00000025
15981  60AE 00 00 
15982  60B0 B0            cmp a, b
15983  60B1 FD 71         seq ; ==
15984  60B3 E4            pop a
15985  60B4             ; --- END RELATIONAL
15986  60B4 C0 00 00      cmp b, 0
15987  60B7 C6 22 63      je _if255_else
15988  60BA             _if255_TRUE:
15989  60BA             ; format_p++; 
15990  60BA                              
15991  60BA FA FD FF      lea d, [bp + -3] ; $format_p
15992  60BD 2A            mov b, [d]
15993  60BE 38 00 00      mov c, 0
15994  60C1 FD 77         inc b
15995  60C3 FA FD FF      lea d, [bp + -3] ; $format_p
15996  60C6 FD 43         mov [d], b
15997  60C8 FD 7D         dec b
15998  60CA             ; switch(*format_p){ 
15999  60CA             _switch256_expr:
16000  60CA                              
16001  60CA FA FD FF      lea d, [bp + -3] ; $format_p
16002  60CD 2A            mov b, [d]
16003  60CE 38 00 00      mov c, 0
16004  60D1 74            mov d, b
16005  60D2 32            mov bl, [d]
16006  60D3 A7 00         mov bh, 0
16007  60D5 38 00 00      mov c, 0
16008  60D8             _switch256_comparisons:
16009  60D8 C1 6C         cmp bl, $6c
16010  60DA C6 06 61      je _switch256_case0
16011  60DD C1 4C         cmp bl, $4c
16012  60DF C6 06 61      je _switch256_case1
16013  60E2 C1 64         cmp bl, $64
16014  60E4 C6 16 62      je _switch256_case2
16015  60E7 C1 69         cmp bl, $69
16016  60E9 C6 16 62      je _switch256_case3
16017  60EC C1 75         cmp bl, $75
16018  60EE C6 46 62      je _switch256_case4
16019  60F1 C1 78         cmp bl, $78
16020  60F3 C6 76 62      je _switch256_case5
16021  60F6 C1 63         cmp bl, $63
16022  60F8 C6 A6 62      je _switch256_case6
16023  60FB C1 73         cmp bl, $73
16024  60FD C6 D6 62      je _switch256_case7
16025  6100 0A 03 63      jmp _switch256_default
16026  6103 0A 0F 63      jmp _switch256_exit
16027  6106             _switch256_case0:
16028  6106             _switch256_case1:
16029  6106             ; format_p++; 
16030  6106                              
16031  6106 FA FD FF      lea d, [bp + -3] ; $format_p
16032  6109 2A            mov b, [d]
16033  610A 38 00 00      mov c, 0
16034  610D FD 77         inc b
16035  610F FA FD FF      lea d, [bp + -3] ; $format_p
16036  6112 FD 43         mov [d], b
16037  6114 FD 7D         dec b
16038  6116             ; if(*format_p == 'd' || *format_p == 'i') 
16039  6116             _if257_cond:
16040  6116                              
16041  6116 FA FD FF      lea d, [bp + -3] ; $format_p
16042  6119 2A            mov b, [d]
16043  611A 38 00 00      mov c, 0
16044  611D 74            mov d, b
16045  611E 32            mov bl, [d]
16046  611F A7 00         mov bh, 0
16047  6121 38 00 00      mov c, 0
16048  6124             ; --- START RELATIONAL
16049  6124 D7            push a
16050  6125 11            mov a, b
16051  6126 FD 2E 64 00   mov32 cb, $00000064
16051  612A 00 00 
16052  612C B0            cmp a, b
16053  612D FD 71         seq ; ==
16054  612F E4            pop a
16055  6130             ; --- END RELATIONAL
16056  6130             ; --- START LOGICAL OR
16057  6130 D7            push a
16058  6131 11            mov a, b
16059  6132 FA FD FF      lea d, [bp + -3] ; $format_p
16060  6135 2A            mov b, [d]
16061  6136 38 00 00      mov c, 0
16062  6139 74            mov d, b
16063  613A 32            mov bl, [d]
16064  613B A7 00         mov bh, 0
16065  613D 38 00 00      mov c, 0
16066  6140             ; --- START RELATIONAL
16067  6140 D7            push a
16068  6141 11            mov a, b
16069  6142 FD 2E 69 00   mov32 cb, $00000069
16069  6146 00 00 
16070  6148 B0            cmp a, b
16071  6149 FD 71         seq ; ==
16072  614B E4            pop a
16073  614C             ; --- END RELATIONAL
16074  614C FD A8         sor a, b ; ||
16075  614E E4            pop a
16076  614F             ; --- END LOGICAL OR
16077  614F C0 00 00      cmp b, 0
16078  6152 C6 73 61      je _if257_else
16079  6155             _if257_TRUE:
16080  6155             ; print_signed_long(*(long *)p); 
16081  6155                              
16082  6155             ; --- START FUNCTION CALL
16083  6155                              
16084  6155 FA FF FF      lea d, [bp + -1] ; $p
16085  6158 2A            mov b, [d]
16086  6159 38 00 00      mov c, 0
16087  615C 74            mov d, b
16088  615D 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
16089  6160 FD 39         mov c, b ; And place it into C
16090  6162 2A            mov b, [d] ; Lower Word in B
16091  6163 12            mov a, c
16092  6164 FD AA         swp a
16093  6166 D7            push a
16094  6167 FD AB         swp b
16095  6169 D8            push b
16096  616A 07 4C 63      call print_signed_long
16097  616D 51 04 00      add sp, 4
16098  6170             ; --- END FUNCTION CALL
16099  6170 0A FB 61      jmp _if257_exit
16100  6173             _if257_else:
16101  6173             ; if(*format_p == 'u') 
16102  6173             _if258_cond:
16103  6173                              
16104  6173 FA FD FF      lea d, [bp + -3] ; $format_p
16105  6176 2A            mov b, [d]
16106  6177 38 00 00      mov c, 0
16107  617A 74            mov d, b
16108  617B 32            mov bl, [d]
16109  617C A7 00         mov bh, 0
16110  617E 38 00 00      mov c, 0
16111  6181             ; --- START RELATIONAL
16112  6181 D7            push a
16113  6182 11            mov a, b
16114  6183 FD 2E 75 00   mov32 cb, $00000075
16114  6187 00 00 
16115  6189 B0            cmp a, b
16116  618A FD 71         seq ; ==
16117  618C E4            pop a
16118  618D             ; --- END RELATIONAL
16119  618D C0 00 00      cmp b, 0
16120  6190 C6 B1 61      je _if258_else
16121  6193             _if258_TRUE:
16122  6193             ; print_unsigned_long(*(unsigned long *)p); 
16123  6193                              
16124  6193             ; --- START FUNCTION CALL
16125  6193                              
16126  6193 FA FF FF      lea d, [bp + -1] ; $p
16127  6196 2A            mov b, [d]
16128  6197 38 00 00      mov c, 0
16129  619A 74            mov d, b
16130  619B 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
16131  619E FD 39         mov c, b ; And place it into C
16132  61A0 2A            mov b, [d] ; Lower Word in B
16133  61A1 12            mov a, c
16134  61A2 FD AA         swp a
16135  61A4 D7            push a
16136  61A5 FD AB         swp b
16137  61A7 D8            push b
16138  61A8 07 DF 64      call print_unsigned_long
16139  61AB 51 04 00      add sp, 4
16140  61AE             ; --- END FUNCTION CALL
16141  61AE 0A FB 61      jmp _if258_exit
16142  61B1             _if258_else:
16143  61B1             ; if(*format_p == 'x') 
16144  61B1             _if259_cond:
16145  61B1                              
16146  61B1 FA FD FF      lea d, [bp + -3] ; $format_p
16147  61B4 2A            mov b, [d]
16148  61B5 38 00 00      mov c, 0
16149  61B8 74            mov d, b
16150  61B9 32            mov bl, [d]
16151  61BA A7 00         mov bh, 0
16152  61BC 38 00 00      mov c, 0
16153  61BF             ; --- START RELATIONAL
16154  61BF D7            push a
16155  61C0 11            mov a, b
16156  61C1 FD 2E 78 00   mov32 cb, $00000078
16156  61C5 00 00 
16157  61C7 B0            cmp a, b
16158  61C8 FD 71         seq ; ==
16159  61CA E4            pop a
16160  61CB             ; --- END RELATIONAL
16161  61CB C0 00 00      cmp b, 0
16162  61CE C6 EF 61      je _if259_else
16163  61D1             _if259_TRUE:
16164  61D1             ; printx32(*(long int *)p); 
16165  61D1                              
16166  61D1             ; --- START FUNCTION CALL
16167  61D1                              
16168  61D1 FA FF FF      lea d, [bp + -1] ; $p
16169  61D4 2A            mov b, [d]
16170  61D5 38 00 00      mov c, 0
16171  61D8 74            mov d, b
16172  61D9 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
16173  61DC FD 39         mov c, b ; And place it into C
16174  61DE 2A            mov b, [d] ; Lower Word in B
16175  61DF 12            mov a, c
16176  61E0 FD AA         swp a
16177  61E2 D7            push a
16178  61E3 FD AB         swp b
16179  61E5 D8            push b
16180  61E6 07 13 66      call printx32
16181  61E9 51 04 00      add sp, 4
16182  61EC             ; --- END FUNCTION CALL
16183  61EC 0A FB 61      jmp _if259_exit
16184  61EF             _if259_else:
16185  61EF             ; err("Unexpected format in printf."); 
16186  61EF                              
16187  61EF             ; --- START FUNCTION CALL
16188  61EF                              
16189  61EF 26 2F 83      mov b, _s169 ; "Unexpected format in printf."
16190  61F2 FD AB         swp b
16191  61F4 D8            push b
16192  61F5 07 73 66      call err
16193  61F8 51 02 00      add sp, 2
16194  61FB             ; --- END FUNCTION CALL
16195  61FB             _if259_exit:
16196  61FB             _if258_exit:
16197  61FB             _if257_exit:
16198  61FB             ; p = p + 4; 
16199  61FB FA FF FF      lea d, [bp + -1] ; $p
16200  61FE DA            push d
16201  61FF                              
16202  61FF FA FF FF      lea d, [bp + -1] ; $p
16203  6202 2A            mov b, [d]
16204  6203 38 00 00      mov c, 0
16205  6206             ; --- START TERMS
16206  6206 D7            push a
16207  6207 11            mov a, b
16208  6208 FD 2E 04 00   mov32 cb, $00000004
16208  620C 00 00 
16209  620E 56            add b, a
16210  620F E4            pop a
16211  6210             ; --- END TERMS
16212  6210 E7            pop d
16213  6211 FD 43         mov [d], b
16214  6213             ; break; 
16215  6213 0A 0F 63      jmp _switch256_exit ; case break
16216  6216             _switch256_case2:
16217  6216             _switch256_case3:
16218  6216             ; print_signed(*(int*)p); 
16219  6216                              
16220  6216             ; --- START FUNCTION CALL
16221  6216                              
16222  6216 FA FF FF      lea d, [bp + -1] ; $p
16223  6219 2A            mov b, [d]
16224  621A 38 00 00      mov c, 0
16225  621D 74            mov d, b
16226  621E 2A            mov b, [d]
16227  621F 38 00 00      mov c, 0
16228  6222 FD AB         swp b
16229  6224 D8            push b
16230  6225 07 A1 66      call print_signed
16231  6228 51 02 00      add sp, 2
16232  622B             ; --- END FUNCTION CALL
16233  622B             ; p = p + 2; 
16234  622B FA FF FF      lea d, [bp + -1] ; $p
16235  622E DA            push d
16236  622F                              
16237  622F FA FF FF      lea d, [bp + -1] ; $p
16238  6232 2A            mov b, [d]
16239  6233 38 00 00      mov c, 0
16240  6236             ; --- START TERMS
16241  6236 D7            push a
16242  6237 11            mov a, b
16243  6238 FD 2E 02 00   mov32 cb, $00000002
16243  623C 00 00 
16244  623E 56            add b, a
16245  623F E4            pop a
16246  6240             ; --- END TERMS
16247  6240 E7            pop d
16248  6241 FD 43         mov [d], b
16249  6243             ; break; 
16250  6243 0A 0F 63      jmp _switch256_exit ; case break
16251  6246             _switch256_case4:
16252  6246             ; print_unsigned(*(unsigned int*)p); 
16253  6246                              
16254  6246             ; --- START FUNCTION CALL
16255  6246                              
16256  6246 FA FF FF      lea d, [bp + -1] ; $p
16257  6249 2A            mov b, [d]
16258  624A 38 00 00      mov c, 0
16259  624D 74            mov d, b
16260  624E 2A            mov b, [d]
16261  624F 38 00 00      mov c, 0
16262  6252 FD AB         swp b
16263  6254 D8            push b
16264  6255 07 F2 67      call print_unsigned
16265  6258 51 02 00      add sp, 2
16266  625B             ; --- END FUNCTION CALL
16267  625B             ; p = p + 2; 
16268  625B FA FF FF      lea d, [bp + -1] ; $p
16269  625E DA            push d
16270  625F                              
16271  625F FA FF FF      lea d, [bp + -1] ; $p
16272  6262 2A            mov b, [d]
16273  6263 38 00 00      mov c, 0
16274  6266             ; --- START TERMS
16275  6266 D7            push a
16276  6267 11            mov a, b
16277  6268 FD 2E 02 00   mov32 cb, $00000002
16277  626C 00 00 
16278  626E 56            add b, a
16279  626F E4            pop a
16280  6270             ; --- END TERMS
16281  6270 E7            pop d
16282  6271 FD 43         mov [d], b
16283  6273             ; break; 
16284  6273 0A 0F 63      jmp _switch256_exit ; case break
16285  6276             _switch256_case5:
16286  6276             ; printx16(*(int*)p); 
16287  6276                              
16288  6276             ; --- START FUNCTION CALL
16289  6276                              
16290  6276 FA FF FF      lea d, [bp + -1] ; $p
16291  6279 2A            mov b, [d]
16292  627A 38 00 00      mov c, 0
16293  627D 74            mov d, b
16294  627E 2A            mov b, [d]
16295  627F 38 00 00      mov c, 0
16296  6282 FD AB         swp b
16297  6284 D8            push b
16298  6285 07 0A 69      call printx16
16299  6288 51 02 00      add sp, 2
16300  628B             ; --- END FUNCTION CALL
16301  628B             ; p = p + 2; 
16302  628B FA FF FF      lea d, [bp + -1] ; $p
16303  628E DA            push d
16304  628F                              
16305  628F FA FF FF      lea d, [bp + -1] ; $p
16306  6292 2A            mov b, [d]
16307  6293 38 00 00      mov c, 0
16308  6296             ; --- START TERMS
16309  6296 D7            push a
16310  6297 11            mov a, b
16311  6298 FD 2E 02 00   mov32 cb, $00000002
16311  629C 00 00 
16312  629E 56            add b, a
16313  629F E4            pop a
16314  62A0             ; --- END TERMS
16315  62A0 E7            pop d
16316  62A1 FD 43         mov [d], b
16317  62A3             ; break; 
16318  62A3 0A 0F 63      jmp _switch256_exit ; case break
16319  62A6             _switch256_case6:
16320  62A6             ; putchar(*(char*)p); 
16321  62A6                              
16322  62A6             ; --- START FUNCTION CALL
16323  62A6                              
16324  62A6 FA FF FF      lea d, [bp + -1] ; $p
16325  62A9 2A            mov b, [d]
16326  62AA 38 00 00      mov c, 0
16327  62AD 74            mov d, b
16328  62AE 32            mov bl, [d]
16329  62AF A7 00         mov bh, 0
16330  62B1 38 00 00      mov c, 0
16331  62B4 DD            push bl
16332  62B5 07 D1 64      call putchar
16333  62B8 51 01 00      add sp, 1
16334  62BB             ; --- END FUNCTION CALL
16335  62BB             ; p = p + 1; 
16336  62BB FA FF FF      lea d, [bp + -1] ; $p
16337  62BE DA            push d
16338  62BF                              
16339  62BF FA FF FF      lea d, [bp + -1] ; $p
16340  62C2 2A            mov b, [d]
16341  62C3 38 00 00      mov c, 0
16342  62C6             ; --- START TERMS
16343  62C6 D7            push a
16344  62C7 11            mov a, b
16345  62C8 FD 2E 01 00   mov32 cb, $00000001
16345  62CC 00 00 
16346  62CE 56            add b, a
16347  62CF E4            pop a
16348  62D0             ; --- END TERMS
16349  62D0 E7            pop d
16350  62D1 FD 43         mov [d], b
16351  62D3             ; break; 
16352  62D3 0A 0F 63      jmp _switch256_exit ; case break
16353  62D6             _switch256_case7:
16354  62D6             ; print(*(char**)p); 
16355  62D6                              
16356  62D6             ; --- START FUNCTION CALL
16357  62D6                              
16358  62D6 FA FF FF      lea d, [bp + -1] ; $p
16359  62D9 2A            mov b, [d]
16360  62DA 38 00 00      mov c, 0
16361  62DD 74            mov d, b
16362  62DE 2A            mov b, [d]
16363  62DF FD AB         swp b
16364  62E1 D8            push b
16365  62E2 07 88 66      call print
16366  62E5 51 02 00      add sp, 2
16367  62E8             ; --- END FUNCTION CALL
16368  62E8             ; p = p + 2; 
16369  62E8 FA FF FF      lea d, [bp + -1] ; $p
16370  62EB DA            push d
16371  62EC                              
16372  62EC FA FF FF      lea d, [bp + -1] ; $p
16373  62EF 2A            mov b, [d]
16374  62F0 38 00 00      mov c, 0
16375  62F3             ; --- START TERMS
16376  62F3 D7            push a
16377  62F4 11            mov a, b
16378  62F5 FD 2E 02 00   mov32 cb, $00000002
16378  62F9 00 00 
16379  62FB 56            add b, a
16380  62FC E4            pop a
16381  62FD             ; --- END TERMS
16382  62FD E7            pop d
16383  62FE FD 43         mov [d], b
16384  6300             ; break; 
16385  6300 0A 0F 63      jmp _switch256_exit ; case break
16386  6303             _switch256_default:
16387  6303             ; print("Error: Unknown argument type.\n"); 
16388  6303                              
16389  6303             ; --- START FUNCTION CALL
16390  6303                              
16391  6303 26 4C 83      mov b, _s170 ; "Error: Unknown argument type.\n"
16392  6306 FD AB         swp b
16393  6308 D8            push b
16394  6309 07 88 66      call print
16395  630C 51 02 00      add sp, 2
16396  630F             ; --- END FUNCTION CALL
16397  630F             _switch256_exit:
16398  630F             ; format_p++; 
16399  630F                              
16400  630F FA FD FF      lea d, [bp + -3] ; $format_p
16401  6312 2A            mov b, [d]
16402  6313 38 00 00      mov c, 0
16403  6316 FD 77         inc b
16404  6318 FA FD FF      lea d, [bp + -3] ; $format_p
16405  631B FD 43         mov [d], b
16406  631D FD 7D         dec b
16407  631F 0A 47 63      jmp _if255_exit
16408  6322             _if255_else:
16409  6322             ; putchar(*format_p); 
16410  6322                              
16411  6322             ; --- START FUNCTION CALL
16412  6322                              
16413  6322 FA FD FF      lea d, [bp + -3] ; $format_p
16414  6325 2A            mov b, [d]
16415  6326 38 00 00      mov c, 0
16416  6329 74            mov d, b
16417  632A 32            mov bl, [d]
16418  632B A7 00         mov bh, 0
16419  632D 38 00 00      mov c, 0
16420  6330 DD            push bl
16421  6331 07 D1 64      call putchar
16422  6334 51 01 00      add sp, 1
16423  6337             ; --- END FUNCTION CALL
16424  6337             ; format_p++; 
16425  6337                              
16426  6337 FA FD FF      lea d, [bp + -3] ; $format_p
16427  633A 2A            mov b, [d]
16428  633B 38 00 00      mov c, 0
16429  633E FD 77         inc b
16430  6340 FA FD FF      lea d, [bp + -3] ; $format_p
16431  6343 FD 43         mov [d], b
16432  6345 FD 7D         dec b
16433  6347             _if255_exit:
16434  6347             _if254_exit:
16435  6347             _for253_update:
16436  6347 0A 7B 60      jmp _for253_cond
16437  634A             _for253_exit:
16438  634A F9            leave
16439  634B 09            ret
16440  634C             
16441  634C             print_signed_long:
16442  634C F8 00 00      enter 0 ; (push bp; mov bp, sp)
16443  634F             ; char digits[10]; 
16444  634F 52 0A 00      sub sp, 10
16445  6352             ; int i = 0; 
16446  6352 52 02 00      sub sp, 2
16447  6355             ; --- START LOCAL VAR INITIALIZATION
16448  6355 FA F5 FF      lea d, [bp + -11] ; $i
16449  6358 DA            push d
16450  6359                              
16451  6359 FD 2E 00 00   mov32 cb, $00000000
16451  635D 00 00 
16452  635F E7            pop d
16453  6360 FD 43         mov [d], b
16454  6362             ; --- END LOCAL VAR INITIALIZATION
16455  6362             ; if (num < 0) { 
16456  6362             _if260_cond:
16457  6362                              
16458  6362 FA 05 00      lea d, [bp + 5] ; $num
16459  6365 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
16460  6368 FD 39         mov c, b ; And place it into C
16461  636A 2A            mov b, [d] ; Lower Word in B
16462  636B             ; --- START RELATIONAL
16463  636B D7            push a
16464  636C FD D8         push g
16465  636E 11            mov a, b
16466  636F FD 7A         mov g, c
16467  6371 FD 2E 00 00   mov32 cb, $00000000
16467  6375 00 00 
16468  6377 FD AF         cmp32 ga, cb
16469  6379 FD 73         slt ; <
16470  637B FD F1         pop g
16471  637D E4            pop a
16472  637E             ; --- END RELATIONAL
16473  637E C0 00 00      cmp b, 0
16474  6381 C6 B3 63      je _if260_else
16475  6384             _if260_TRUE:
16476  6384             ; putchar('-'); 
16477  6384                              
16478  6384             ; --- START FUNCTION CALL
16479  6384                              
16480  6384 FD 2E 2D 00   mov32 cb, $0000002d
16480  6388 00 00 
16481  638A DD            push bl
16482  638B 07 D1 64      call putchar
16483  638E 51 01 00      add sp, 1
16484  6391             ; --- END FUNCTION CALL
16485  6391             ; num = -num; 
16486  6391 FA 05 00      lea d, [bp + 5] ; $num
16487  6394 DA            push d
16488  6395                              
16489  6395 FA 05 00      lea d, [bp + 5] ; $num
16490  6398 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
16491  639B FD 39         mov c, b ; And place it into C
16492  639D 2A            mov b, [d] ; Lower Word in B
16493  639E 12            mov a, c
16494  639F 95            not a
16495  63A0 97            not b
16496  63A1 55 01 00      add b, 1
16497  63A4 5B 00 00      adc a, 0
16498  63A7 39            mov c, a
16499  63A8 E7            pop d
16500  63A9 FD 43         mov [d], b
16501  63AB 28            mov b, c
16502  63AC FD 44 02 00   mov [d + 2], b
16503  63B0 0A E7 63      jmp _if260_exit
16504  63B3             _if260_else:
16505  63B3             ; if (num == 0) { 
16506  63B3             _if261_cond:
16507  63B3                              
16508  63B3 FA 05 00      lea d, [bp + 5] ; $num
16509  63B6 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
16510  63B9 FD 39         mov c, b ; And place it into C
16511  63BB 2A            mov b, [d] ; Lower Word in B
16512  63BC             ; --- START RELATIONAL
16513  63BC D7            push a
16514  63BD FD D8         push g
16515  63BF 11            mov a, b
16516  63C0 FD 7A         mov g, c
16517  63C2 FD 2E 00 00   mov32 cb, $00000000
16517  63C6 00 00 
16518  63C8 FD AF         cmp32 ga, cb
16519  63CA FD 71         seq ; ==
16520  63CC FD F1         pop g
16521  63CE E4            pop a
16522  63CF             ; --- END RELATIONAL
16523  63CF C0 00 00      cmp b, 0
16524  63D2 C6 E7 63      je _if261_exit
16525  63D5             _if261_TRUE:
16526  63D5             ; putchar('0'); 
16527  63D5                              
16528  63D5             ; --- START FUNCTION CALL
16529  63D5                              
16530  63D5 FD 2E 30 00   mov32 cb, $00000030
16530  63D9 00 00 
16531  63DB DD            push bl
16532  63DC 07 D1 64      call putchar
16533  63DF 51 01 00      add sp, 1
16534  63E2             ; --- END FUNCTION CALL
16535  63E2             ; return; 
16536  63E2 F9            leave
16537  63E3 09            ret
16538  63E4 0A E7 63      jmp _if261_exit
16539  63E7             _if261_exit:
16540  63E7             _if260_exit:
16541  63E7             ; while (num > 0) { 
16542  63E7             _while262_cond:
16543  63E7                              
16544  63E7 FA 05 00      lea d, [bp + 5] ; $num
16545  63EA 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
16546  63ED FD 39         mov c, b ; And place it into C
16547  63EF 2A            mov b, [d] ; Lower Word in B
16548  63F0             ; --- START RELATIONAL
16549  63F0 D7            push a
16550  63F1 FD D8         push g
16551  63F3 11            mov a, b
16552  63F4 FD 7A         mov g, c
16553  63F6 FD 2E 00 00   mov32 cb, $00000000
16553  63FA 00 00 
16554  63FC FD AF         cmp32 ga, cb
16555  63FE FD 7F         sgt
16556  6400 FD F1         pop g
16557  6402 E4            pop a
16558  6403             ; --- END RELATIONAL
16559  6403 C0 00 00      cmp b, 0
16560  6406 C6 87 64      je _while262_exit
16561  6409             _while262_block:
16562  6409             ; digits[i] = '0' + (num % 10); 
16563  6409 FA F7 FF      lea d, [bp + -9] ; $digits
16564  640C D7            push a
16565  640D DA            push d
16566  640E                              
16567  640E FA F5 FF      lea d, [bp + -11] ; $i
16568  6411 2A            mov b, [d]
16569  6412 38 00 00      mov c, 0
16570  6415 E7            pop d
16571  6416 5A            add d, b
16572  6417 E4            pop a
16573  6418 DA            push d
16574  6419                              
16575  6419 FD 2E 30 00   mov32 cb, $00000030
16575  641D 00 00 
16576  641F             ; --- START TERMS
16577  641F D7            push a
16578  6420 11            mov a, b
16579  6421                              
16580  6421 FA 05 00      lea d, [bp + 5] ; $num
16581  6424 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
16582  6427 FD 39         mov c, b ; And place it into C
16583  6429 2A            mov b, [d] ; Lower Word in B
16584  642A             ; --- START FACTORS
16585  642A D7            push a
16586  642B FD D8         push g
16587  642D 11            mov a, b
16588  642E FD 7A         mov g, c
16589  6430 FD 2E 0A 00   mov32 cb, $0000000a
16589  6434 00 00 
16590  6436 FD D8         push g ; save 'g' as the div instruction uses it
16591  6438 AE            div a, b ; %, a: quotient, b: remainder
16592  6439 11            mov a, b
16593  643A FD F1         pop g
16594  643C FD 38         mov c, g
16595  643E 27            mov b, a
16596  643F FD F1         pop g
16597  6441 E4            pop a
16598  6442             ; --- END FACTORS
16599  6442 FD 15         add32 cb, ga
16600  6444 E4            pop a
16601  6445             ; --- END TERMS
16602  6445 E7            pop d
16603  6446 FD 3E         mov [d], bl
16604  6448             ; num = num / 10; 
16605  6448 FA 05 00      lea d, [bp + 5] ; $num
16606  644B DA            push d
16607  644C                              
16608  644C FA 05 00      lea d, [bp + 5] ; $num
16609  644F 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
16610  6452 FD 39         mov c, b ; And place it into C
16611  6454 2A            mov b, [d] ; Lower Word in B
16612  6455             ; --- START FACTORS
16613  6455 D7            push a
16614  6456 FD D8         push g
16615  6458 11            mov a, b
16616  6459 FD 7A         mov g, c
16617  645B FD 2E 0A 00   mov32 cb, $0000000a
16617  645F 00 00 
16618  6461 FD D8         push g ; save 'g' as the div instruction uses it
16619  6463 AE            div a, b ; /, a: quotient, b: remainder
16620  6464 FD F1         pop g
16621  6466 FD 38         mov c, g
16622  6468 27            mov b, a
16623  6469 FD F1         pop g
16624  646B E4            pop a
16625  646C             ; --- END FACTORS
16626  646C E7            pop d
16627  646D FD 43         mov [d], b
16628  646F 28            mov b, c
16629  6470 FD 44 02 00   mov [d + 2], b
16630  6474             ; i++; 
16631  6474                              
16632  6474 FA F5 FF      lea d, [bp + -11] ; $i
16633  6477 2A            mov b, [d]
16634  6478 38 00 00      mov c, 0
16635  647B 11            mov a, b
16636  647C FD 77         inc b
16637  647E FA F5 FF      lea d, [bp + -11] ; $i
16638  6481 FD 43         mov [d], b
16639  6483 27            mov b, a
16640  6484 0A E7 63      jmp _while262_cond
16641  6487             _while262_exit:
16642  6487             ; while (i > 0) { 
16643  6487             _while265_cond:
16644  6487                              
16645  6487 FA F5 FF      lea d, [bp + -11] ; $i
16646  648A 2A            mov b, [d]
16647  648B 38 00 00      mov c, 0
16648  648E             ; --- START RELATIONAL
16649  648E D7            push a
16650  648F 11            mov a, b
16651  6490 FD 2E 00 00   mov32 cb, $00000000
16651  6494 00 00 
16652  6496 B0            cmp a, b
16653  6497 FD 7F         sgt ; >
16654  6499 E4            pop a
16655  649A             ; --- END RELATIONAL
16656  649A C0 00 00      cmp b, 0
16657  649D C6 CF 64      je _while265_exit
16658  64A0             _while265_block:
16659  64A0             ; i--; 
16660  64A0                              
16661  64A0 FA F5 FF      lea d, [bp + -11] ; $i
16662  64A3 2A            mov b, [d]
16663  64A4 38 00 00      mov c, 0
16664  64A7 11            mov a, b
16665  64A8 FD 7D         dec b
16666  64AA FA F5 FF      lea d, [bp + -11] ; $i
16667  64AD FD 43         mov [d], b
16668  64AF 27            mov b, a
16669  64B0             ; putchar(digits[i]); 
16670  64B0                              
16671  64B0             ; --- START FUNCTION CALL
16672  64B0                              
16673  64B0 FA F7 FF      lea d, [bp + -9] ; $digits
16674  64B3 D7            push a
16675  64B4 DA            push d
16676  64B5                              
16677  64B5 FA F5 FF      lea d, [bp + -11] ; $i
16678  64B8 2A            mov b, [d]
16679  64B9 38 00 00      mov c, 0
16680  64BC E7            pop d
16681  64BD 5A            add d, b
16682  64BE E4            pop a
16683  64BF 32            mov bl, [d]
16684  64C0 A7 00         mov bh, 0
16685  64C2 38 00 00      mov c, 0
16686  64C5 DD            push bl
16687  64C6 07 D1 64      call putchar
16688  64C9 51 01 00      add sp, 1
16689  64CC             ; --- END FUNCTION CALL
16690  64CC 0A 87 64      jmp _while265_cond
16691  64CF             _while265_exit:
16692  64CF F9            leave
16693  64D0 09            ret
16694  64D1             
16695  64D1             putchar:
16696  64D1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
16697  64D4             ; --- BEGIN INLINE ASM SEGMENT
16698  64D4 FA 05 00      lea d, [bp + 5] ; $c
16699  64D7 1E            mov al, [d]
16700  64D8 23            mov ah, al
16701  64D9 19 00         mov al, 0
16702  64DB 05 03         syscall sys_io      ; char in AH
16703  64DD             ; --- END INLINE ASM SEGMENT
16704  64DD F9            leave
16705  64DE 09            ret
16706  64DF             
16707  64DF             print_unsigned_long:
16708  64DF F8 00 00      enter 0 ; (push bp; mov bp, sp)
16709  64E2             ; char digits[10]; 
16710  64E2 52 0A 00      sub sp, 10
16711  64E5             ; int i; 
16712  64E5 52 02 00      sub sp, 2
16713  64E8             ; i = 0; 
16714  64E8 FA F5 FF      lea d, [bp + -11] ; $i
16715  64EB DA            push d
16716  64EC                              
16717  64EC FD 2E 00 00   mov32 cb, $00000000
16717  64F0 00 00 
16718  64F2 E7            pop d
16719  64F3 FD 43         mov [d], b
16720  64F5             ; if(num == 0){ 
16721  64F5             _if266_cond:
16722  64F5                              
16723  64F5 FA 05 00      lea d, [bp + 5] ; $num
16724  64F8 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
16725  64FB FD 39         mov c, b ; And place it into C
16726  64FD 2A            mov b, [d] ; Lower Word in B
16727  64FE             ; --- START RELATIONAL
16728  64FE D7            push a
16729  64FF FD D8         push g
16730  6501 11            mov a, b
16731  6502 FD 7A         mov g, c
16732  6504 FD 2E 00 00   mov32 cb, $00000000
16732  6508 00 00 
16733  650A FD AF         cmp32 ga, cb
16734  650C FD 71         seq ; ==
16735  650E FD F1         pop g
16736  6510 E4            pop a
16737  6511             ; --- END RELATIONAL
16738  6511 C0 00 00      cmp b, 0
16739  6514 C6 29 65      je _if266_exit
16740  6517             _if266_TRUE:
16741  6517             ; putchar('0'); 
16742  6517                              
16743  6517             ; --- START FUNCTION CALL
16744  6517                              
16745  6517 FD 2E 30 00   mov32 cb, $00000030
16745  651B 00 00 
16746  651D DD            push bl
16747  651E 07 D1 64      call putchar
16748  6521 51 01 00      add sp, 1
16749  6524             ; --- END FUNCTION CALL
16750  6524             ; return; 
16751  6524 F9            leave
16752  6525 09            ret
16753  6526 0A 29 65      jmp _if266_exit
16754  6529             _if266_exit:
16755  6529             ; while (num > 0) { 
16756  6529             _while267_cond:
16757  6529                              
16758  6529 FA 05 00      lea d, [bp + 5] ; $num
16759  652C 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
16760  652F FD 39         mov c, b ; And place it into C
16761  6531 2A            mov b, [d] ; Lower Word in B
16762  6532             ; --- START RELATIONAL
16763  6532 D7            push a
16764  6533 FD D8         push g
16765  6535 11            mov a, b
16766  6536 FD 7A         mov g, c
16767  6538 FD 2E 00 00   mov32 cb, $00000000
16767  653C 00 00 
16768  653E FD AF         cmp32 ga, cb
16769  6540 FD 81         sgu
16770  6542 FD F1         pop g
16771  6544 E4            pop a
16772  6545             ; --- END RELATIONAL
16773  6545 C0 00 00      cmp b, 0
16774  6548 C6 C9 65      je _while267_exit
16775  654B             _while267_block:
16776  654B             ; digits[i] = '0' + (num % 10); 
16777  654B FA F7 FF      lea d, [bp + -9] ; $digits
16778  654E D7            push a
16779  654F DA            push d
16780  6550                              
16781  6550 FA F5 FF      lea d, [bp + -11] ; $i
16782  6553 2A            mov b, [d]
16783  6554 38 00 00      mov c, 0
16784  6557 E7            pop d
16785  6558 5A            add d, b
16786  6559 E4            pop a
16787  655A DA            push d
16788  655B                              
16789  655B FD 2E 30 00   mov32 cb, $00000030
16789  655F 00 00 
16790  6561             ; --- START TERMS
16791  6561 D7            push a
16792  6562 11            mov a, b
16793  6563                              
16794  6563 FA 05 00      lea d, [bp + 5] ; $num
16795  6566 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
16796  6569 FD 39         mov c, b ; And place it into C
16797  656B 2A            mov b, [d] ; Lower Word in B
16798  656C             ; --- START FACTORS
16799  656C D7            push a
16800  656D FD D8         push g
16801  656F 11            mov a, b
16802  6570 FD 7A         mov g, c
16803  6572 FD 2E 0A 00   mov32 cb, $0000000a
16803  6576 00 00 
16804  6578 FD D8         push g ; save 'g' as the div instruction uses it
16805  657A AE            div a, b ; %, a: quotient, b: remainder
16806  657B 11            mov a, b
16807  657C FD F1         pop g
16808  657E FD 38         mov c, g
16809  6580 27            mov b, a
16810  6581 FD F1         pop g
16811  6583 E4            pop a
16812  6584             ; --- END FACTORS
16813  6584 FD 15         add32 cb, ga
16814  6586 E4            pop a
16815  6587             ; --- END TERMS
16816  6587 E7            pop d
16817  6588 FD 3E         mov [d], bl
16818  658A             ; num = num / 10; 
16819  658A FA 05 00      lea d, [bp + 5] ; $num
16820  658D DA            push d
16821  658E                              
16822  658E FA 05 00      lea d, [bp + 5] ; $num
16823  6591 2B 02 00      mov b, [d + 2] ; Upper Word of the Long Int
16824  6594 FD 39         mov c, b ; And place it into C
16825  6596 2A            mov b, [d] ; Lower Word in B
16826  6597             ; --- START FACTORS
16827  6597 D7            push a
16828  6598 FD D8         push g
16829  659A 11            mov a, b
16830  659B FD 7A         mov g, c
16831  659D FD 2E 0A 00   mov32 cb, $0000000a
16831  65A1 00 00 
16832  65A3 FD D8         push g ; save 'g' as the div instruction uses it
16833  65A5 AE            div a, b ; /, a: quotient, b: remainder
16834  65A6 FD F1         pop g
16835  65A8 FD 38         mov c, g
16836  65AA 27            mov b, a
16837  65AB FD F1         pop g
16838  65AD E4            pop a
16839  65AE             ; --- END FACTORS
16840  65AE E7            pop d
16841  65AF FD 43         mov [d], b
16842  65B1 28            mov b, c
16843  65B2 FD 44 02 00   mov [d + 2], b
16844  65B6             ; i++; 
16845  65B6                              
16846  65B6 FA F5 FF      lea d, [bp + -11] ; $i
16847  65B9 2A            mov b, [d]
16848  65BA 38 00 00      mov c, 0
16849  65BD 11            mov a, b
16850  65BE FD 77         inc b
16851  65C0 FA F5 FF      lea d, [bp + -11] ; $i
16852  65C3 FD 43         mov [d], b
16853  65C5 27            mov b, a
16854  65C6 0A 29 65      jmp _while267_cond
16855  65C9             _while267_exit:
16856  65C9             ; while (i > 0) { 
16857  65C9             _while270_cond:
16858  65C9                              
16859  65C9 FA F5 FF      lea d, [bp + -11] ; $i
16860  65CC 2A            mov b, [d]
16861  65CD 38 00 00      mov c, 0
16862  65D0             ; --- START RELATIONAL
16863  65D0 D7            push a
16864  65D1 11            mov a, b
16865  65D2 FD 2E 00 00   mov32 cb, $00000000
16865  65D6 00 00 
16866  65D8 B0            cmp a, b
16867  65D9 FD 7F         sgt ; >
16868  65DB E4            pop a
16869  65DC             ; --- END RELATIONAL
16870  65DC C0 00 00      cmp b, 0
16871  65DF C6 11 66      je _while270_exit
16872  65E2             _while270_block:
16873  65E2             ; i--; 
16874  65E2                              
16875  65E2 FA F5 FF      lea d, [bp + -11] ; $i
16876  65E5 2A            mov b, [d]
16877  65E6 38 00 00      mov c, 0
16878  65E9 11            mov a, b
16879  65EA FD 7D         dec b
16880  65EC FA F5 FF      lea d, [bp + -11] ; $i
16881  65EF FD 43         mov [d], b
16882  65F1 27            mov b, a
16883  65F2             ; putchar(digits[i]); 
16884  65F2                              
16885  65F2             ; --- START FUNCTION CALL
16886  65F2                              
16887  65F2 FA F7 FF      lea d, [bp + -9] ; $digits
16888  65F5 D7            push a
16889  65F6 DA            push d
16890  65F7                              
16891  65F7 FA F5 FF      lea d, [bp + -11] ; $i
16892  65FA 2A            mov b, [d]
16893  65FB 38 00 00      mov c, 0
16894  65FE E7            pop d
16895  65FF 5A            add d, b
16896  6600 E4            pop a
16897  6601 32            mov bl, [d]
16898  6602 A7 00         mov bh, 0
16899  6604 38 00 00      mov c, 0
16900  6607 DD            push bl
16901  6608 07 D1 64      call putchar
16902  660B 51 01 00      add sp, 1
16903  660E             ; --- END FUNCTION CALL
16904  660E 0A C9 65      jmp _while270_cond
16905  6611             _while270_exit:
16906  6611 F9            leave
16907  6612 09            ret
16908  6613             
16909  6613             printx32:
16910  6613 F8 00 00      enter 0 ; (push bp; mov bp, sp)
16911  6616             ; --- BEGIN INLINE ASM SEGMENT
16912  6616 FA 05 00      lea d, [bp + 5] ; $hex
16913  6619 2B 02 00      mov b, [d+2]
16914  661C 07 25 66      call print_u16x_printx32
16915  661F 2A            mov b, [d]
16916  6620 07 25 66      call print_u16x_printx32
16917  6623             ; --- END INLINE ASM SEGMENT
16918  6623             ; return; 
16919  6623 F9            leave
16920  6624 09            ret
16921  6625             ; --- BEGIN INLINE ASM SEGMENT
16922  6625             print_u16x_printx32:
16923  6625 D7            push a
16924  6626 D8            push b
16925  6627 DD            push bl
16926  6628 30            mov bl, bh
16927  6629 07 47 66      call _itoa_printx32        ; convert bh to char in A
16928  662C 2F            mov bl, al        ; save al
16929  662D 19 00         mov al, 0
16930  662F 05 03         syscall sys_io        ; display AH
16931  6631 24            mov ah, bl        ; retrieve al
16932  6632 19 00         mov al, 0
16933  6634 05 03         syscall sys_io        ; display AL
16934  6636 EA            pop bl
16935  6637 07 47 66      call _itoa_printx32        ; convert bh to char in A
16936  663A 2F            mov bl, al        ; save al
16937  663B 19 00         mov al, 0
16938  663D 05 03         syscall sys_io        ; display AH
16939  663F 24            mov ah, bl        ; retrieve al
16940  6640 19 00         mov al, 0
16941  6642 05 03         syscall sys_io        ; display AL
16942  6644 E5            pop b
16943  6645 E4            pop a
16944  6646 09            ret
16945  6647             _itoa_printx32:
16946  6647 DA            push d
16947  6648 D8            push b
16948  6649 A7 00         mov bh, 0
16949  664B FD A4 04      shr bl, 4  
16950  664E 74            mov d, b
16951  664F 1F 61 66      mov al, [d + s_hex_digits_printx32]
16952  6652 23            mov ah, al
16953  6653 E5            pop b
16954  6654 D8            push b
16955  6655 A7 00         mov bh, 0
16956  6657 FD 87 0F      and bl, $0F
16957  665A 74            mov d, b
16958  665B 1F 61 66      mov al, [d + s_hex_digits_printx32]
16959  665E E5            pop b
16960  665F E7            pop d
16961  6660 09            ret
16962  6661 30 31 32 33 s_hex_digits_printx32: .db "0123456789ABCDEF"  
16962  6665 34 35 36 37 
16962  6669 38 39 41 42 
16962  666D 43 44 45 46 
16963  6671             ; --- END INLINE ASM SEGMENT
16964  6671 F9            leave
16965  6672 09            ret
16966  6673             
16967  6673             err:
16968  6673 F8 00 00      enter 0 ; (push bp; mov bp, sp)
16969  6676             ; print(e); 
16970  6676                              
16971  6676             ; --- START FUNCTION CALL
16972  6676                              
16973  6676 FA 05 00      lea d, [bp + 5] ; $e
16974  6679 2A            mov b, [d]
16975  667A 38 00 00      mov c, 0
16976  667D FD AB         swp b
16977  667F D8            push b
16978  6680 07 88 66      call print
16979  6683 51 02 00      add sp, 2
16980  6686             ; --- END FUNCTION CALL
16981  6686 F9            leave
16982  6687 09            ret
16983  6688             
16984  6688             print:
16985  6688 F8 00 00      enter 0 ; (push bp; mov bp, sp)
16986  668B             ; --- BEGIN INLINE ASM SEGMENT
16987  668B FA 05 00      lea d, [bp + 5] ; $s
16988  668E FD 2A         mov d, [d]
16989  6690             _puts_L1_print:
16990  6690 1E            mov al, [d]
16991  6691 B9 00         cmp al, 0
16992  6693 C6 9F 66      jz _puts_END_print
16993  6696 23            mov ah, al
16994  6697 19 00         mov al, 0
16995  6699 05 03         syscall sys_io
16996  669B 79            inc d
16997  669C 0A 90 66      jmp _puts_L1_print
16998  669F             _puts_END_print:
16999  669F             ; --- END INLINE ASM SEGMENT
17000  669F F9            leave
17001  66A0 09            ret
17002  66A1             
17003  66A1             print_signed:
17004  66A1 F8 00 00      enter 0 ; (push bp; mov bp, sp)
17005  66A4             ; char digits[5]; 
17006  66A4 52 05 00      sub sp, 5
17007  66A7             ; int i = 0; 
17008  66A7 52 02 00      sub sp, 2
17009  66AA             ; --- START LOCAL VAR INITIALIZATION
17010  66AA FA FA FF      lea d, [bp + -6] ; $i
17011  66AD DA            push d
17012  66AE                              
17013  66AE FD 2E 00 00   mov32 cb, $00000000
17013  66B2 00 00 
17014  66B4 E7            pop d
17015  66B5 FD 43         mov [d], b
17016  66B7             ; --- END LOCAL VAR INITIALIZATION
17017  66B7             ; if (num < 0) { 
17018  66B7             _if271_cond:
17019  66B7                              
17020  66B7 FA 05 00      lea d, [bp + 5] ; $num
17021  66BA 2A            mov b, [d]
17022  66BB 38 00 00      mov c, 0
17023  66BE             ; --- START RELATIONAL
17024  66BE D7            push a
17025  66BF 11            mov a, b
17026  66C0 FD 2E 00 00   mov32 cb, $00000000
17026  66C4 00 00 
17027  66C6 B0            cmp a, b
17028  66C7 FD 73         slt ; < (signed)
17029  66C9 E4            pop a
17030  66CA             ; --- END RELATIONAL
17031  66CA C0 00 00      cmp b, 0
17032  66CD C6 F0 66      je _if271_else
17033  66D0             _if271_TRUE:
17034  66D0             ; putchar('-'); 
17035  66D0                              
17036  66D0             ; --- START FUNCTION CALL
17037  66D0                              
17038  66D0 FD 2E 2D 00   mov32 cb, $0000002d
17038  66D4 00 00 
17039  66D6 DD            push bl
17040  66D7 07 D1 64      call putchar
17041  66DA 51 01 00      add sp, 1
17042  66DD             ; --- END FUNCTION CALL
17043  66DD             ; num = -num; 
17044  66DD FA 05 00      lea d, [bp + 5] ; $num
17045  66E0 DA            push d
17046  66E1                              
17047  66E1 FA 05 00      lea d, [bp + 5] ; $num
17048  66E4 2A            mov b, [d]
17049  66E5 38 00 00      mov c, 0
17050  66E8 FD 97         neg b
17051  66EA E7            pop d
17052  66EB FD 43         mov [d], b
17053  66ED 0A 1B 67      jmp _if271_exit
17054  66F0             _if271_else:
17055  66F0             ; if (num == 0) { 
17056  66F0             _if272_cond:
17057  66F0                              
17058  66F0 FA 05 00      lea d, [bp + 5] ; $num
17059  66F3 2A            mov b, [d]
17060  66F4 38 00 00      mov c, 0
17061  66F7             ; --- START RELATIONAL
17062  66F7 D7            push a
17063  66F8 11            mov a, b
17064  66F9 FD 2E 00 00   mov32 cb, $00000000
17064  66FD 00 00 
17065  66FF B0            cmp a, b
17066  6700 FD 71         seq ; ==
17067  6702 E4            pop a
17068  6703             ; --- END RELATIONAL
17069  6703 C0 00 00      cmp b, 0
17070  6706 C6 1B 67      je _if272_exit
17071  6709             _if272_TRUE:
17072  6709             ; putchar('0'); 
17073  6709                              
17074  6709             ; --- START FUNCTION CALL
17075  6709                              
17076  6709 FD 2E 30 00   mov32 cb, $00000030
17076  670D 00 00 
17077  670F DD            push bl
17078  6710 07 D1 64      call putchar
17079  6713 51 01 00      add sp, 1
17080  6716             ; --- END FUNCTION CALL
17081  6716             ; return; 
17082  6716 F9            leave
17083  6717 09            ret
17084  6718 0A 1B 67      jmp _if272_exit
17085  671B             _if272_exit:
17086  671B             _if271_exit:
17087  671B             ; while (num > 0) { 
17088  671B             _while273_cond:
17089  671B                              
17090  671B FA 05 00      lea d, [bp + 5] ; $num
17091  671E 2A            mov b, [d]
17092  671F 38 00 00      mov c, 0
17093  6722             ; --- START RELATIONAL
17094  6722 D7            push a
17095  6723 11            mov a, b
17096  6724 FD 2E 00 00   mov32 cb, $00000000
17096  6728 00 00 
17097  672A B0            cmp a, b
17098  672B FD 7F         sgt ; >
17099  672D E4            pop a
17100  672E             ; --- END RELATIONAL
17101  672E C0 00 00      cmp b, 0
17102  6731 C6 A8 67      je _while273_exit
17103  6734             _while273_block:
17104  6734             ; digits[i] = '0' + (num % 10); 
17105  6734 FA FC FF      lea d, [bp + -4] ; $digits
17106  6737 D7            push a
17107  6738 DA            push d
17108  6739                              
17109  6739 FA FA FF      lea d, [bp + -6] ; $i
17110  673C 2A            mov b, [d]
17111  673D 38 00 00      mov c, 0
17112  6740 E7            pop d
17113  6741 5A            add d, b
17114  6742 E4            pop a
17115  6743 DA            push d
17116  6744                              
17117  6744 FD 2E 30 00   mov32 cb, $00000030
17117  6748 00 00 
17118  674A             ; --- START TERMS
17119  674A D7            push a
17120  674B 11            mov a, b
17121  674C                              
17122  674C FA 05 00      lea d, [bp + 5] ; $num
17123  674F 2A            mov b, [d]
17124  6750 38 00 00      mov c, 0
17125  6753             ; --- START FACTORS
17126  6753 D7            push a
17127  6754 FD D8         push g
17128  6756 11            mov a, b
17129  6757 FD 7A         mov g, c
17130  6759 FD 2E 0A 00   mov32 cb, $0000000a
17130  675D 00 00 
17131  675F FD D8         push g ; save 'g' as the div instruction uses it
17132  6761 AE            div a, b ; %, a: quotient, b: remainder
17133  6762 11            mov a, b
17134  6763 FD F1         pop g
17135  6765 FD 38         mov c, g
17136  6767 27            mov b, a
17137  6768 FD F1         pop g
17138  676A E4            pop a
17139  676B             ; --- END FACTORS
17140  676B 56            add b, a
17141  676C E4            pop a
17142  676D             ; --- END TERMS
17143  676D E7            pop d
17144  676E FD 3E         mov [d], bl
17145  6770             ; num = num / 10; 
17146  6770 FA 05 00      lea d, [bp + 5] ; $num
17147  6773 DA            push d
17148  6774                              
17149  6774 FA 05 00      lea d, [bp + 5] ; $num
17150  6777 2A            mov b, [d]
17151  6778 38 00 00      mov c, 0
17152  677B             ; --- START FACTORS
17153  677B D7            push a
17154  677C FD D8         push g
17155  677E 11            mov a, b
17156  677F FD 7A         mov g, c
17157  6781 FD 2E 0A 00   mov32 cb, $0000000a
17157  6785 00 00 
17158  6787 FD D8         push g ; save 'g' as the div instruction uses it
17159  6789 AE            div a, b ; /, a: quotient, b: remainder
17160  678A FD F1         pop g
17161  678C FD 38         mov c, g
17162  678E 27            mov b, a
17163  678F FD F1         pop g
17164  6791 E4            pop a
17165  6792             ; --- END FACTORS
17166  6792 E7            pop d
17167  6793 FD 43         mov [d], b
17168  6795             ; i++; 
17169  6795                              
17170  6795 FA FA FF      lea d, [bp + -6] ; $i
17171  6798 2A            mov b, [d]
17172  6799 38 00 00      mov c, 0
17173  679C 11            mov a, b
17174  679D FD 77         inc b
17175  679F FA FA FF      lea d, [bp + -6] ; $i
17176  67A2 FD 43         mov [d], b
17177  67A4 27            mov b, a
17178  67A5 0A 1B 67      jmp _while273_cond
17179  67A8             _while273_exit:
17180  67A8             ; while (i > 0) { 
17181  67A8             _while276_cond:
17182  67A8                              
17183  67A8 FA FA FF      lea d, [bp + -6] ; $i
17184  67AB 2A            mov b, [d]
17185  67AC 38 00 00      mov c, 0
17186  67AF             ; --- START RELATIONAL
17187  67AF D7            push a
17188  67B0 11            mov a, b
17189  67B1 FD 2E 00 00   mov32 cb, $00000000
17189  67B5 00 00 
17190  67B7 B0            cmp a, b
17191  67B8 FD 7F         sgt ; >
17192  67BA E4            pop a
17193  67BB             ; --- END RELATIONAL
17194  67BB C0 00 00      cmp b, 0
17195  67BE C6 F0 67      je _while276_exit
17196  67C1             _while276_block:
17197  67C1             ; i--; 
17198  67C1                              
17199  67C1 FA FA FF      lea d, [bp + -6] ; $i
17200  67C4 2A            mov b, [d]
17201  67C5 38 00 00      mov c, 0
17202  67C8 11            mov a, b
17203  67C9 FD 7D         dec b
17204  67CB FA FA FF      lea d, [bp + -6] ; $i
17205  67CE FD 43         mov [d], b
17206  67D0 27            mov b, a
17207  67D1             ; putchar(digits[i]); 
17208  67D1                              
17209  67D1             ; --- START FUNCTION CALL
17210  67D1                              
17211  67D1 FA FC FF      lea d, [bp + -4] ; $digits
17212  67D4 D7            push a
17213  67D5 DA            push d
17214  67D6                              
17215  67D6 FA FA FF      lea d, [bp + -6] ; $i
17216  67D9 2A            mov b, [d]
17217  67DA 38 00 00      mov c, 0
17218  67DD E7            pop d
17219  67DE 5A            add d, b
17220  67DF E4            pop a
17221  67E0 32            mov bl, [d]
17222  67E1 A7 00         mov bh, 0
17223  67E3 38 00 00      mov c, 0
17224  67E6 DD            push bl
17225  67E7 07 D1 64      call putchar
17226  67EA 51 01 00      add sp, 1
17227  67ED             ; --- END FUNCTION CALL
17228  67ED 0A A8 67      jmp _while276_cond
17229  67F0             _while276_exit:
17230  67F0 F9            leave
17231  67F1 09            ret
17232  67F2             
17233  67F2             print_unsigned:
17234  67F2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
17235  67F5             ; char digits[5]; 
17236  67F5 52 05 00      sub sp, 5
17237  67F8             ; int i; 
17238  67F8 52 02 00      sub sp, 2
17239  67FB             ; i = 0; 
17240  67FB FA FA FF      lea d, [bp + -6] ; $i
17241  67FE DA            push d
17242  67FF                              
17243  67FF FD 2E 00 00   mov32 cb, $00000000
17243  6803 00 00 
17244  6805 E7            pop d
17245  6806 FD 43         mov [d], b
17246  6808             ; if(num == 0){ 
17247  6808             _if277_cond:
17248  6808                              
17249  6808 FA 05 00      lea d, [bp + 5] ; $num
17250  680B 2A            mov b, [d]
17251  680C 38 00 00      mov c, 0
17252  680F             ; --- START RELATIONAL
17253  680F D7            push a
17254  6810 11            mov a, b
17255  6811 FD 2E 00 00   mov32 cb, $00000000
17255  6815 00 00 
17256  6817 B0            cmp a, b
17257  6818 FD 71         seq ; ==
17258  681A E4            pop a
17259  681B             ; --- END RELATIONAL
17260  681B C0 00 00      cmp b, 0
17261  681E C6 33 68      je _if277_exit
17262  6821             _if277_TRUE:
17263  6821             ; putchar('0'); 
17264  6821                              
17265  6821             ; --- START FUNCTION CALL
17266  6821                              
17267  6821 FD 2E 30 00   mov32 cb, $00000030
17267  6825 00 00 
17268  6827 DD            push bl
17269  6828 07 D1 64      call putchar
17270  682B 51 01 00      add sp, 1
17271  682E             ; --- END FUNCTION CALL
17272  682E             ; return; 
17273  682E F9            leave
17274  682F 09            ret
17275  6830 0A 33 68      jmp _if277_exit
17276  6833             _if277_exit:
17277  6833             ; while (num > 0) { 
17278  6833             _while278_cond:
17279  6833                              
17280  6833 FA 05 00      lea d, [bp + 5] ; $num
17281  6836 2A            mov b, [d]
17282  6837 38 00 00      mov c, 0
17283  683A             ; --- START RELATIONAL
17284  683A D7            push a
17285  683B 11            mov a, b
17286  683C FD 2E 00 00   mov32 cb, $00000000
17286  6840 00 00 
17287  6842 B0            cmp a, b
17288  6843 FD 81         sgu ; > (unsigned)
17289  6845 E4            pop a
17290  6846             ; --- END RELATIONAL
17291  6846 C0 00 00      cmp b, 0
17292  6849 C6 C0 68      je _while278_exit
17293  684C             _while278_block:
17294  684C             ; digits[i] = '0' + (num % 10); 
17295  684C FA FC FF      lea d, [bp + -4] ; $digits
17296  684F D7            push a
17297  6850 DA            push d
17298  6851                              
17299  6851 FA FA FF      lea d, [bp + -6] ; $i
17300  6854 2A            mov b, [d]
17301  6855 38 00 00      mov c, 0
17302  6858 E7            pop d
17303  6859 5A            add d, b
17304  685A E4            pop a
17305  685B DA            push d
17306  685C                              
17307  685C FD 2E 30 00   mov32 cb, $00000030
17307  6860 00 00 
17308  6862             ; --- START TERMS
17309  6862 D7            push a
17310  6863 11            mov a, b
17311  6864                              
17312  6864 FA 05 00      lea d, [bp + 5] ; $num
17313  6867 2A            mov b, [d]
17314  6868 38 00 00      mov c, 0
17315  686B             ; --- START FACTORS
17316  686B D7            push a
17317  686C FD D8         push g
17318  686E 11            mov a, b
17319  686F FD 7A         mov g, c
17320  6871 FD 2E 0A 00   mov32 cb, $0000000a
17320  6875 00 00 
17321  6877 FD D8         push g ; save 'g' as the div instruction uses it
17322  6879 AE            div a, b ; %, a: quotient, b: remainder
17323  687A 11            mov a, b
17324  687B FD F1         pop g
17325  687D FD 38         mov c, g
17326  687F 27            mov b, a
17327  6880 FD F1         pop g
17328  6882 E4            pop a
17329  6883             ; --- END FACTORS
17330  6883 56            add b, a
17331  6884 E4            pop a
17332  6885             ; --- END TERMS
17333  6885 E7            pop d
17334  6886 FD 3E         mov [d], bl
17335  6888             ; num = num / 10; 
17336  6888 FA 05 00      lea d, [bp + 5] ; $num
17337  688B DA            push d
17338  688C                              
17339  688C FA 05 00      lea d, [bp + 5] ; $num
17340  688F 2A            mov b, [d]
17341  6890 38 00 00      mov c, 0
17342  6893             ; --- START FACTORS
17343  6893 D7            push a
17344  6894 FD D8         push g
17345  6896 11            mov a, b
17346  6897 FD 7A         mov g, c
17347  6899 FD 2E 0A 00   mov32 cb, $0000000a
17347  689D 00 00 
17348  689F FD D8         push g ; save 'g' as the div instruction uses it
17349  68A1 AE            div a, b ; /, a: quotient, b: remainder
17350  68A2 FD F1         pop g
17351  68A4 FD 38         mov c, g
17352  68A6 27            mov b, a
17353  68A7 FD F1         pop g
17354  68A9 E4            pop a
17355  68AA             ; --- END FACTORS
17356  68AA E7            pop d
17357  68AB FD 43         mov [d], b
17358  68AD             ; i++; 
17359  68AD                              
17360  68AD FA FA FF      lea d, [bp + -6] ; $i
17361  68B0 2A            mov b, [d]
17362  68B1 38 00 00      mov c, 0
17363  68B4 11            mov a, b
17364  68B5 FD 77         inc b
17365  68B7 FA FA FF      lea d, [bp + -6] ; $i
17366  68BA FD 43         mov [d], b
17367  68BC 27            mov b, a
17368  68BD 0A 33 68      jmp _while278_cond
17369  68C0             _while278_exit:
17370  68C0             ; while (i > 0) { 
17371  68C0             _while281_cond:
17372  68C0                              
17373  68C0 FA FA FF      lea d, [bp + -6] ; $i
17374  68C3 2A            mov b, [d]
17375  68C4 38 00 00      mov c, 0
17376  68C7             ; --- START RELATIONAL
17377  68C7 D7            push a
17378  68C8 11            mov a, b
17379  68C9 FD 2E 00 00   mov32 cb, $00000000
17379  68CD 00 00 
17380  68CF B0            cmp a, b
17381  68D0 FD 7F         sgt ; >
17382  68D2 E4            pop a
17383  68D3             ; --- END RELATIONAL
17384  68D3 C0 00 00      cmp b, 0
17385  68D6 C6 08 69      je _while281_exit
17386  68D9             _while281_block:
17387  68D9             ; i--; 
17388  68D9                              
17389  68D9 FA FA FF      lea d, [bp + -6] ; $i
17390  68DC 2A            mov b, [d]
17391  68DD 38 00 00      mov c, 0
17392  68E0 11            mov a, b
17393  68E1 FD 7D         dec b
17394  68E3 FA FA FF      lea d, [bp + -6] ; $i
17395  68E6 FD 43         mov [d], b
17396  68E8 27            mov b, a
17397  68E9             ; putchar(digits[i]); 
17398  68E9                              
17399  68E9             ; --- START FUNCTION CALL
17400  68E9                              
17401  68E9 FA FC FF      lea d, [bp + -4] ; $digits
17402  68EC D7            push a
17403  68ED DA            push d
17404  68EE                              
17405  68EE FA FA FF      lea d, [bp + -6] ; $i
17406  68F1 2A            mov b, [d]
17407  68F2 38 00 00      mov c, 0
17408  68F5 E7            pop d
17409  68F6 5A            add d, b
17410  68F7 E4            pop a
17411  68F8 32            mov bl, [d]
17412  68F9 A7 00         mov bh, 0
17413  68FB 38 00 00      mov c, 0
17414  68FE DD            push bl
17415  68FF 07 D1 64      call putchar
17416  6902 51 01 00      add sp, 1
17417  6905             ; --- END FUNCTION CALL
17418  6905 0A C0 68      jmp _while281_cond
17419  6908             _while281_exit:
17420  6908 F9            leave
17421  6909 09            ret
17422  690A             
17423  690A             printx16:
17424  690A F8 00 00      enter 0 ; (push bp; mov bp, sp)
17425  690D             ; --- BEGIN INLINE ASM SEGMENT
17426  690D FA 05 00      lea d, [bp + 5] ; $hex
17427  6910 2A            mov b, [d]
17428  6911             print_u16x_printx16:
17429  6911 DD            push bl
17430  6912 30            mov bl, bh
17431  6913 07 30 69      call _itoa_printx16        ; convert bh to char in A
17432  6916 2F            mov bl, al        ; save al
17433  6917 19 00         mov al, 0
17434  6919 05 03         syscall sys_io        ; display AH
17435  691B 24            mov ah, bl        ; retrieve al
17436  691C 19 00         mov al, 0
17437  691E 05 03         syscall sys_io        ; display AL
17438  6920 EA            pop bl
17439  6921 07 30 69      call _itoa_printx16        ; convert bh to char in A
17440  6924 2F            mov bl, al        ; save al
17441  6925 19 00         mov al, 0
17442  6927 05 03         syscall sys_io        ; display AH
17443  6929 24            mov ah, bl        ; retrieve al
17444  692A 19 00         mov al, 0
17445  692C 05 03         syscall sys_io        ; display AL
17446  692E             ; --- END INLINE ASM SEGMENT
17447  692E             ; return; 
17448  692E F9            leave
17449  692F 09            ret
17450  6930             ; --- BEGIN INLINE ASM SEGMENT
17451  6930             _itoa_printx16:
17452  6930 DA            push d
17453  6931 D8            push b
17454  6932 A7 00         mov bh, 0
17455  6934 FD A4 04      shr bl, 4  
17456  6937 74            mov d, b
17457  6938 1F 4A 69      mov al, [d + s_hex_digits_printx16]
17458  693B 23            mov ah, al
17459  693C E5            pop b
17460  693D D8            push b
17461  693E A7 00         mov bh, 0
17462  6940 FD 87 0F      and bl, $0F
17463  6943 74            mov d, b
17464  6944 1F 4A 69      mov al, [d + s_hex_digits_printx16]
17465  6947 E5            pop b
17466  6948 E7            pop d
17467  6949 09            ret
17468  694A 30 31 32 33 s_hex_digits_printx16:    .db "0123456789ABCDEF"  
17468  694E 34 35 36 37 
17468  6952 38 39 41 42 
17468  6956 43 44 45 46 
17469  695A             ; --- END INLINE ASM SEGMENT
17470  695A F9            leave
17471  695B 09            ret
17472  695C             
17473  695C             puts:
17474  695C F8 00 00      enter 0 ; (push bp; mov bp, sp)
17475  695F             ; --- BEGIN INLINE ASM SEGMENT
17476  695F FA 05 00      lea d, [bp + 5] ; $s
17477  6962 FD 2A         mov d, [d]
17478  6964             _puts_L1_puts:
17479  6964 1E            mov al, [d]
17480  6965 B9 00         cmp al, 0
17481  6967 C6 73 69      jz _puts_END_puts
17482  696A 23            mov ah, al
17483  696B 19 00         mov al, 0
17484  696D 05 03         syscall sys_io
17485  696F 79            inc d
17486  6970 0A 64 69      jmp _puts_L1_puts
17487  6973             _puts_END_puts:
17488  6973 10 00 0A      mov a, $0A00
17489  6976 05 03         syscall sys_io
17490  6978             ; --- END INLINE ASM SEGMENT
17491  6978 F9            leave
17492  6979 09            ret
17493  697A             
17494  697A             memset:
17495  697A F8 00 00      enter 0 ; (push bp; mov bp, sp)
17496  697D             ; int i; 
17497  697D 52 02 00      sub sp, 2
17498  6980             ; for(i = 0; i < size; i++){ 
17499  6980             _for282_init:
17500  6980 FA FF FF      lea d, [bp + -1] ; $i
17501  6983 DA            push d
17502  6984                              
17503  6984 FD 2E 00 00   mov32 cb, $00000000
17503  6988 00 00 
17504  698A E7            pop d
17505  698B FD 43         mov [d], b
17506  698D             _for282_cond:
17507  698D                              
17508  698D FA FF FF      lea d, [bp + -1] ; $i
17509  6990 2A            mov b, [d]
17510  6991 38 00 00      mov c, 0
17511  6994             ; --- START RELATIONAL
17512  6994 D7            push a
17513  6995 11            mov a, b
17514  6996 FA 08 00      lea d, [bp + 8] ; $size
17515  6999 2A            mov b, [d]
17516  699A 38 00 00      mov c, 0
17517  699D B0            cmp a, b
17518  699E FD 73         slt ; < (signed)
17519  69A0 E4            pop a
17520  69A1             ; --- END RELATIONAL
17521  69A1 C0 00 00      cmp b, 0
17522  69A4 C6 D9 69      je _for282_exit
17523  69A7             _for282_block:
17524  69A7             ; *(s+i) = c; 
17525  69A7                              
17526  69A7 FA 05 00      lea d, [bp + 5] ; $s
17527  69AA 2A            mov b, [d]
17528  69AB 38 00 00      mov c, 0
17529  69AE             ; --- START TERMS
17530  69AE D7            push a
17531  69AF 11            mov a, b
17532  69B0 FA FF FF      lea d, [bp + -1] ; $i
17533  69B3 2A            mov b, [d]
17534  69B4 38 00 00      mov c, 0
17535  69B7 56            add b, a
17536  69B8 E4            pop a
17537  69B9             ; --- END TERMS
17538  69B9 D8            push b
17539  69BA                              
17540  69BA FA 07 00      lea d, [bp + 7] ; $c
17541  69BD 32            mov bl, [d]
17542  69BE A7 00         mov bh, 0
17543  69C0 38 00 00      mov c, 0
17544  69C3 E7            pop d
17545  69C4 FD 3E         mov [d], bl
17546  69C6             _for282_update:
17547  69C6                              
17548  69C6 FA FF FF      lea d, [bp + -1] ; $i
17549  69C9 2A            mov b, [d]
17550  69CA 38 00 00      mov c, 0
17551  69CD 11            mov a, b
17552  69CE FD 77         inc b
17553  69D0 FA FF FF      lea d, [bp + -1] ; $i
17554  69D3 FD 43         mov [d], b
17555  69D5 27            mov b, a
17556  69D6 0A 8D 69      jmp _for282_cond
17557  69D9             _for282_exit:
17558  69D9             ; return s; 
17559  69D9                              
17560  69D9 FA 05 00      lea d, [bp + 5] ; $s
17561  69DC 2A            mov b, [d]
17562  69DD 38 00 00      mov c, 0
17563  69E0 F9            leave
17564  69E1 09            ret
17565  69E2             
17566  69E2             strncmp:
17567  69E2 F8 00 00      enter 0 ; (push bp; mov bp, sp)
17568  69E5             ; int i; 
17569  69E5 52 02 00      sub sp, 2
17570  69E8             ; for (i = 0; i < n; i++) { 
17571  69E8             _for283_init:
17572  69E8 FA FF FF      lea d, [bp + -1] ; $i
17573  69EB DA            push d
17574  69EC                              
17575  69EC FD 2E 00 00   mov32 cb, $00000000
17575  69F0 00 00 
17576  69F2 E7            pop d
17577  69F3 FD 43         mov [d], b
17578  69F5             _for283_cond:
17579  69F5                              
17580  69F5 FA FF FF      lea d, [bp + -1] ; $i
17581  69F8 2A            mov b, [d]
17582  69F9 38 00 00      mov c, 0
17583  69FC             ; --- START RELATIONAL
17584  69FC D7            push a
17585  69FD 11            mov a, b
17586  69FE FA 09 00      lea d, [bp + 9] ; $n
17587  6A01 2A            mov b, [d]
17588  6A02 38 00 00      mov c, 0
17589  6A05 B0            cmp a, b
17590  6A06 FD 73         slt ; < (signed)
17591  6A08 E4            pop a
17592  6A09             ; --- END RELATIONAL
17593  6A09 C0 00 00      cmp b, 0
17594  6A0C C6 01 6B      je _for283_exit
17595  6A0F             _for283_block:
17596  6A0F             ; if (str1[i] != str2[i]) { 
17597  6A0F             _if284_cond:
17598  6A0F                              
17599  6A0F FA 05 00      lea d, [bp + 5] ; $str1
17600  6A12 FD 2A         mov d, [d]
17601  6A14 D7            push a
17602  6A15 DA            push d
17603  6A16                              
17604  6A16 FA FF FF      lea d, [bp + -1] ; $i
17605  6A19 2A            mov b, [d]
17606  6A1A 38 00 00      mov c, 0
17607  6A1D E7            pop d
17608  6A1E FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
17609  6A22 E4            pop a
17610  6A23 32            mov bl, [d]
17611  6A24 A7 00         mov bh, 0
17612  6A26 38 00 00      mov c, 0
17613  6A29             ; --- START RELATIONAL
17614  6A29 D7            push a
17615  6A2A 11            mov a, b
17616  6A2B FA 07 00      lea d, [bp + 7] ; $str2
17617  6A2E FD 2A         mov d, [d]
17618  6A30 D7            push a
17619  6A31 DA            push d
17620  6A32                              
17621  6A32 FA FF FF      lea d, [bp + -1] ; $i
17622  6A35 2A            mov b, [d]
17623  6A36 38 00 00      mov c, 0
17624  6A39 E7            pop d
17625  6A3A FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
17626  6A3E E4            pop a
17627  6A3F 32            mov bl, [d]
17628  6A40 A7 00         mov bh, 0
17629  6A42 38 00 00      mov c, 0
17630  6A45 B0            cmp a, b
17631  6A46 FD 72         sneq ; !=
17632  6A48 E4            pop a
17633  6A49             ; --- END RELATIONAL
17634  6A49 C0 00 00      cmp b, 0
17635  6A4C C6 91 6A      je _if284_exit
17636  6A4F             _if284_TRUE:
17637  6A4F             ; return (unsigned char)str1[i] - (unsigned char)str2[i]; 
17638  6A4F                              
17639  6A4F FA 05 00      lea d, [bp + 5] ; $str1
17640  6A52 FD 2A         mov d, [d]
17641  6A54 D7            push a
17642  6A55 DA            push d
17643  6A56                              
17644  6A56 FA FF FF      lea d, [bp + -1] ; $i
17645  6A59 2A            mov b, [d]
17646  6A5A 38 00 00      mov c, 0
17647  6A5D E7            pop d
17648  6A5E FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
17649  6A62 E4            pop a
17650  6A63 32            mov bl, [d]
17651  6A64 A7 00         mov bh, 0
17652  6A66 38 00 00      mov c, 0
17653  6A69 A7 00         mov bh, 0
17654  6A6B             ; --- START TERMS
17655  6A6B D7            push a
17656  6A6C 11            mov a, b
17657  6A6D FA 07 00      lea d, [bp + 7] ; $str2
17658  6A70 FD 2A         mov d, [d]
17659  6A72 D7            push a
17660  6A73 DA            push d
17661  6A74                              
17662  6A74 FA FF FF      lea d, [bp + -1] ; $i
17663  6A77 2A            mov b, [d]
17664  6A78 38 00 00      mov c, 0
17665  6A7B E7            pop d
17666  6A7C FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
17667  6A80 E4            pop a
17668  6A81 32            mov bl, [d]
17669  6A82 A7 00         mov bh, 0
17670  6A84 38 00 00      mov c, 0
17671  6A87 A7 00         mov bh, 0
17672  6A89 60            sub a, b
17673  6A8A 27            mov b, a
17674  6A8B E4            pop a
17675  6A8C             ; --- END TERMS
17676  6A8C F9            leave
17677  6A8D 09            ret
17678  6A8E 0A 91 6A      jmp _if284_exit
17679  6A91             _if284_exit:
17680  6A91             ; if (str1[i] == '\0' || str2[i] == '\0') { 
17681  6A91             _if285_cond:
17682  6A91                              
17683  6A91 FA 05 00      lea d, [bp + 5] ; $str1
17684  6A94 FD 2A         mov d, [d]
17685  6A96 D7            push a
17686  6A97 DA            push d
17687  6A98                              
17688  6A98 FA FF FF      lea d, [bp + -1] ; $i
17689  6A9B 2A            mov b, [d]
17690  6A9C 38 00 00      mov c, 0
17691  6A9F E7            pop d
17692  6AA0 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
17693  6AA4 E4            pop a
17694  6AA5 32            mov bl, [d]
17695  6AA6 A7 00         mov bh, 0
17696  6AA8 38 00 00      mov c, 0
17697  6AAB             ; --- START RELATIONAL
17698  6AAB D7            push a
17699  6AAC 11            mov a, b
17700  6AAD FD 2E 00 00   mov32 cb, $00000000
17700  6AB1 00 00 
17701  6AB3 B0            cmp a, b
17702  6AB4 FD 71         seq ; ==
17703  6AB6 E4            pop a
17704  6AB7             ; --- END RELATIONAL
17705  6AB7             ; --- START LOGICAL OR
17706  6AB7 D7            push a
17707  6AB8 11            mov a, b
17708  6AB9 FA 07 00      lea d, [bp + 7] ; $str2
17709  6ABC FD 2A         mov d, [d]
17710  6ABE D7            push a
17711  6ABF DA            push d
17712  6AC0                              
17713  6AC0 FA FF FF      lea d, [bp + -1] ; $i
17714  6AC3 2A            mov b, [d]
17715  6AC4 38 00 00      mov c, 0
17716  6AC7 E7            pop d
17717  6AC8 FD 13 01 00   mma 1 ; mov a, 1; mul a b; add d, b
17718  6ACC E4            pop a
17719  6ACD 32            mov bl, [d]
17720  6ACE A7 00         mov bh, 0
17721  6AD0 38 00 00      mov c, 0
17722  6AD3             ; --- START RELATIONAL
17723  6AD3 D7            push a
17724  6AD4 11            mov a, b
17725  6AD5 FD 2E 00 00   mov32 cb, $00000000
17725  6AD9 00 00 
17726  6ADB B0            cmp a, b
17727  6ADC FD 71         seq ; ==
17728  6ADE E4            pop a
17729  6ADF             ; --- END RELATIONAL
17730  6ADF FD A8         sor a, b ; ||
17731  6AE1 E4            pop a
17732  6AE2             ; --- END LOGICAL OR
17733  6AE2 C0 00 00      cmp b, 0
17734  6AE5 C6 EE 6A      je _if285_exit
17735  6AE8             _if285_TRUE:
17736  6AE8             ; break; 
17737  6AE8 0A 01 6B      jmp _for283_exit ; for break
17738  6AEB 0A EE 6A      jmp _if285_exit
17739  6AEE             _if285_exit:
17740  6AEE             _for283_update:
17741  6AEE                              
17742  6AEE FA FF FF      lea d, [bp + -1] ; $i
17743  6AF1 2A            mov b, [d]
17744  6AF2 38 00 00      mov c, 0
17745  6AF5 11            mov a, b
17746  6AF6 FD 77         inc b
17747  6AF8 FA FF FF      lea d, [bp + -1] ; $i
17748  6AFB FD 43         mov [d], b
17749  6AFD 27            mov b, a
17750  6AFE 0A F5 69      jmp _for283_cond
17751  6B01             _for283_exit:
17752  6B01             ; return 0; 
17753  6B01                              
17754  6B01 FD 2E 00 00   mov32 cb, $00000000
17754  6B05 00 00 
17755  6B07 F9            leave
17756  6B08 09            ret
17757  6B09             
17758  6B09             is_digit:
17759  6B09 F8 00 00      enter 0 ; (push bp; mov bp, sp)
17760  6B0C             ; return c >= '0' && c <= '9'; 
17761  6B0C                              
17762  6B0C FA 05 00      lea d, [bp + 5] ; $c
17763  6B0F 32            mov bl, [d]
17764  6B10 A7 00         mov bh, 0
17765  6B12 38 00 00      mov c, 0
17766  6B15             ; --- START RELATIONAL
17767  6B15 D7            push a
17768  6B16 11            mov a, b
17769  6B17 FD 2E 30 00   mov32 cb, $00000030
17769  6B1B 00 00 
17770  6B1D B0            cmp a, b
17771  6B1E FD 80         sge ; >=
17772  6B20 E4            pop a
17773  6B21             ; --- END RELATIONAL
17774  6B21             ; --- START LOGICAL AND
17775  6B21 D7            push a
17776  6B22 11            mov a, b
17777  6B23 FA 05 00      lea d, [bp + 5] ; $c
17778  6B26 32            mov bl, [d]
17779  6B27 A7 00         mov bh, 0
17780  6B29 38 00 00      mov c, 0
17781  6B2C             ; --- START RELATIONAL
17782  6B2C D7            push a
17783  6B2D 11            mov a, b
17784  6B2E FD 2E 39 00   mov32 cb, $00000039
17784  6B32 00 00 
17785  6B34 B0            cmp a, b
17786  6B35 FD 74         sle ; <= (signed)
17787  6B37 E4            pop a
17788  6B38             ; --- END RELATIONAL
17789  6B38 FD A7         sand a, b
17790  6B3A E4            pop a
17791  6B3B             ; --- END LOGICAL AND
17792  6B3B F9            leave
17793  6B3C 09            ret
17794  6B3D             
17795  6B3D             abs:
17796  6B3D F8 00 00      enter 0 ; (push bp; mov bp, sp)
17797  6B40             ; return i < 0 ? -i : i; 
17798  6B40             _ternary286_cond:
17799  6B40 FA 05 00      lea d, [bp + 5] ; $i
17800  6B43 2A            mov b, [d]
17801  6B44 38 00 00      mov c, 0
17802  6B47             ; --- START RELATIONAL
17803  6B47 D7            push a
17804  6B48 11            mov a, b
17805  6B49 FD 2E 00 00   mov32 cb, $00000000
17805  6B4D 00 00 
17806  6B4F B0            cmp a, b
17807  6B50 FD 73         slt ; < (signed)
17808  6B52 E4            pop a
17809  6B53             ; --- END RELATIONAL
17810  6B53 C0 00 00      cmp b, 0
17811  6B56 C6 65 6B      je _ternary286_FALSE
17812  6B59             _ternary286_TRUE:
17813  6B59                              
17814  6B59 FA 05 00      lea d, [bp + 5] ; $i
17815  6B5C 2A            mov b, [d]
17816  6B5D 38 00 00      mov c, 0
17817  6B60 FD 97         neg b
17818  6B62 0A 6C 6B      jmp _ternary286_exit
17819  6B65             _ternary286_FALSE:
17820  6B65                              
17821  6B65 FA 05 00      lea d, [bp + 5] ; $i
17822  6B68 2A            mov b, [d]
17823  6B69 38 00 00      mov c, 0
17824  6B6C             _ternary286_exit:
17825  6B6C F9            leave
17826  6B6D 09            ret
17827  6B6E             
17828  6B6E             atoi:
17829  6B6E F8 00 00      enter 0 ; (push bp; mov bp, sp)
17830  6B71             ; int result = 0;  // Initialize result 
17831  6B71 52 02 00      sub sp, 2
17832  6B74             ; --- START LOCAL VAR INITIALIZATION
17833  6B74 FA FF FF      lea d, [bp + -1] ; $result
17834  6B77 DA            push d
17835  6B78                              
17836  6B78 FD 2E 00 00   mov32 cb, $00000000
17836  6B7C 00 00 
17837  6B7E E7            pop d
17838  6B7F FD 43         mov [d], b
17839  6B81             ; --- END LOCAL VAR INITIALIZATION
17840  6B81             ; int sign = 1;    // Initialize sign as positive 
17841  6B81 52 02 00      sub sp, 2
17842  6B84             ; --- START LOCAL VAR INITIALIZATION
17843  6B84 FA FD FF      lea d, [bp + -3] ; $sign
17844  6B87 DA            push d
17845  6B88                              
17846  6B88 FD 2E 01 00   mov32 cb, $00000001
17846  6B8C 00 00 
17847  6B8E E7            pop d
17848  6B8F FD 43         mov [d], b
17849  6B91             ; --- END LOCAL VAR INITIALIZATION
17850  6B91             ; while (*str == ' ') str++; 
17851  6B91             _while287_cond:
17852  6B91                              
17853  6B91 FA 05 00      lea d, [bp + 5] ; $str
17854  6B94 2A            mov b, [d]
17855  6B95 38 00 00      mov c, 0
17856  6B98 74            mov d, b
17857  6B99 32            mov bl, [d]
17858  6B9A A7 00         mov bh, 0
17859  6B9C 38 00 00      mov c, 0
17860  6B9F             ; --- START RELATIONAL
17861  6B9F D7            push a
17862  6BA0 11            mov a, b
17863  6BA1 FD 2E 20 00   mov32 cb, $00000020
17863  6BA5 00 00 
17864  6BA7 B0            cmp a, b
17865  6BA8 FD 71         seq ; ==
17866  6BAA E4            pop a
17867  6BAB             ; --- END RELATIONAL
17868  6BAB C0 00 00      cmp b, 0
17869  6BAE C6 C4 6B      je _while287_exit
17870  6BB1             _while287_block:
17871  6BB1             ; str++; 
17872  6BB1                              
17873  6BB1 FA 05 00      lea d, [bp + 5] ; $str
17874  6BB4 2A            mov b, [d]
17875  6BB5 38 00 00      mov c, 0
17876  6BB8 FD 77         inc b
17877  6BBA FA 05 00      lea d, [bp + 5] ; $str
17878  6BBD FD 43         mov [d], b
17879  6BBF FD 7D         dec b
17880  6BC1 0A 91 6B      jmp _while287_cond
17881  6BC4             _while287_exit:
17882  6BC4             ; if (*str == '-' || *str == '+') { 
17883  6BC4             _if288_cond:
17884  6BC4                              
17885  6BC4 FA 05 00      lea d, [bp + 5] ; $str
17886  6BC7 2A            mov b, [d]
17887  6BC8 38 00 00      mov c, 0
17888  6BCB 74            mov d, b
17889  6BCC 32            mov bl, [d]
17890  6BCD A7 00         mov bh, 0
17891  6BCF 38 00 00      mov c, 0
17892  6BD2             ; --- START RELATIONAL
17893  6BD2 D7            push a
17894  6BD3 11            mov a, b
17895  6BD4 FD 2E 2D 00   mov32 cb, $0000002d
17895  6BD8 00 00 
17896  6BDA B0            cmp a, b
17897  6BDB FD 71         seq ; ==
17898  6BDD E4            pop a
17899  6BDE             ; --- END RELATIONAL
17900  6BDE             ; --- START LOGICAL OR
17901  6BDE D7            push a
17902  6BDF 11            mov a, b
17903  6BE0 FA 05 00      lea d, [bp + 5] ; $str
17904  6BE3 2A            mov b, [d]
17905  6BE4 38 00 00      mov c, 0
17906  6BE7 74            mov d, b
17907  6BE8 32            mov bl, [d]
17908  6BE9 A7 00         mov bh, 0
17909  6BEB 38 00 00      mov c, 0
17910  6BEE             ; --- START RELATIONAL
17911  6BEE D7            push a
17912  6BEF 11            mov a, b
17913  6BF0 FD 2E 2B 00   mov32 cb, $0000002b
17913  6BF4 00 00 
17914  6BF6 B0            cmp a, b
17915  6BF7 FD 71         seq ; ==
17916  6BF9 E4            pop a
17917  6BFA             ; --- END RELATIONAL
17918  6BFA FD A8         sor a, b ; ||
17919  6BFC E4            pop a
17920  6BFD             ; --- END LOGICAL OR
17921  6BFD C0 00 00      cmp b, 0
17922  6C00 C6 46 6C      je _if288_exit
17923  6C03             _if288_TRUE:
17924  6C03             ; if (*str == '-') sign = -1; 
17925  6C03             _if289_cond:
17926  6C03                              
17927  6C03 FA 05 00      lea d, [bp + 5] ; $str
17928  6C06 2A            mov b, [d]
17929  6C07 38 00 00      mov c, 0
17930  6C0A 74            mov d, b
17931  6C0B 32            mov bl, [d]
17932  6C0C A7 00         mov bh, 0
17933  6C0E 38 00 00      mov c, 0
17934  6C11             ; --- START RELATIONAL
17935  6C11 D7            push a
17936  6C12 11            mov a, b
17937  6C13 FD 2E 2D 00   mov32 cb, $0000002d
17937  6C17 00 00 
17938  6C19 B0            cmp a, b
17939  6C1A FD 71         seq ; ==
17940  6C1C E4            pop a
17941  6C1D             ; --- END RELATIONAL
17942  6C1D C0 00 00      cmp b, 0
17943  6C20 C6 33 6C      je _if289_exit
17944  6C23             _if289_TRUE:
17945  6C23             ; sign = -1; 
17946  6C23 FA FD FF      lea d, [bp + -3] ; $sign
17947  6C26 DA            push d
17948  6C27                              
17949  6C27 FD 2E FF FF   mov32 cb, $ffffffff
17949  6C2B FF FF 
17950  6C2D E7            pop d
17951  6C2E FD 43         mov [d], b
17952  6C30 0A 33 6C      jmp _if289_exit
17953  6C33             _if289_exit:
17954  6C33             ; str++; 
17955  6C33                              
17956  6C33 FA 05 00      lea d, [bp + 5] ; $str
17957  6C36 2A            mov b, [d]
17958  6C37 38 00 00      mov c, 0
17959  6C3A FD 77         inc b
17960  6C3C FA 05 00      lea d, [bp + 5] ; $str
17961  6C3F FD 43         mov [d], b
17962  6C41 FD 7D         dec b
17963  6C43 0A 46 6C      jmp _if288_exit
17964  6C46             _if288_exit:
17965  6C46             ; while (*str >= '0' && *str <= '9') { 
17966  6C46             _while290_cond:
17967  6C46                              
17968  6C46 FA 05 00      lea d, [bp + 5] ; $str
17969  6C49 2A            mov b, [d]
17970  6C4A 38 00 00      mov c, 0
17971  6C4D 74            mov d, b
17972  6C4E 32            mov bl, [d]
17973  6C4F A7 00         mov bh, 0
17974  6C51 38 00 00      mov c, 0
17975  6C54             ; --- START RELATIONAL
17976  6C54 D7            push a
17977  6C55 11            mov a, b
17978  6C56 FD 2E 30 00   mov32 cb, $00000030
17978  6C5A 00 00 
17979  6C5C B0            cmp a, b
17980  6C5D FD 82         sgeu ; >= (unsigned)
17981  6C5F E4            pop a
17982  6C60             ; --- END RELATIONAL
17983  6C60             ; --- START LOGICAL AND
17984  6C60 D7            push a
17985  6C61 11            mov a, b
17986  6C62 FA 05 00      lea d, [bp + 5] ; $str
17987  6C65 2A            mov b, [d]
17988  6C66 38 00 00      mov c, 0
17989  6C69 74            mov d, b
17990  6C6A 32            mov bl, [d]
17991  6C6B A7 00         mov bh, 0
17992  6C6D 38 00 00      mov c, 0
17993  6C70             ; --- START RELATIONAL
17994  6C70 D7            push a
17995  6C71 11            mov a, b
17996  6C72 FD 2E 39 00   mov32 cb, $00000039
17996  6C76 00 00 
17997  6C78 B0            cmp a, b
17998  6C79 FD 76         sleu ; <= (unsigned)
17999  6C7B E4            pop a
18000  6C7C             ; --- END RELATIONAL
18001  6C7C FD A7         sand a, b
18002  6C7E E4            pop a
18003  6C7F             ; --- END LOGICAL AND
18004  6C7F C0 00 00      cmp b, 0
18005  6C82 C6 0E 6D      je _while290_exit
18006  6C85             _while290_block:
18007  6C85             ; result = result * 10 + (*str - '0'); 
18008  6C85 FA FF FF      lea d, [bp + -1] ; $result
18009  6C88 DA            push d
18010  6C89                              
18011  6C89 FA FF FF      lea d, [bp + -1] ; $result
18012  6C8C 2A            mov b, [d]
18013  6C8D 38 00 00      mov c, 0
18014  6C90             ; --- START FACTORS
18015  6C90 D7            push a
18016  6C91 FD D8         push g
18017  6C93 11            mov a, b
18018  6C94 FD 7A         mov g, c
18019  6C96 FD 2E 0A 00   mov32 cb, $0000000a
18019  6C9A 00 00 
18020  6C9C D7            push a     ; save left operand
18021  6C9D 8E            xor a, b   ; xor sign bits
18022  6C9E FD AA         swp a      ; swap bytes
18023  6CA0 83            mov cl, al ; save result of xor into 'dl'
18024  6CA1 E4            pop a      ; restore left side operator
18025  6CA2 DF            push cl    ; save result of xor above
18026  6CA3 FD AA         swp a  
18027  6CA5 93 80         test al, $80  
18028  6CA7 FD AA         swp a  
18029  6CA9 C6 AE 6C      jz skip_invert_a_291  
18030  6CAC FD 95         neg a 
18031  6CAE             skip_invert_a_291:   
18032  6CAE FD AB         swp b
18033  6CB0 FD 93 80      test bl, $80  
18034  6CB3 FD AB         swp b
18035  6CB5 C6 BA 6C      jz skip_invert_b_291  
18036  6CB8 FD 97         neg b 
18037  6CBA             skip_invert_b_291:   
18038  6CBA AC            mul a, b ; *
18039  6CBB FD 78         mov g, a
18040  6CBD 11            mov a, b
18041  6CBE EA            pop bl
18042  6CBF FD 93 80      test bl, $80
18043  6CC2 C6 CF 6C      jz _same_signs_291
18044  6CC5 2F            mov bl, al
18045  6CC6 95            not a
18046  6CC7 FD 97         neg b
18047  6CC9 5B 00 00      adc a, 0
18048  6CCC FD 78         mov g, a
18049  6CCE 11            mov a, b
18050  6CCF             _same_signs_291:
18051  6CCF FD 38         mov c, g
18052  6CD1 27            mov b, a
18053  6CD2 FD F1         pop g
18054  6CD4 E4            pop a
18055  6CD5             ; --- END FACTORS
18056  6CD5             ; --- START TERMS
18057  6CD5 D7            push a
18058  6CD6 FD D8         push g
18059  6CD8 11            mov a, b
18060  6CD9 FD 7A         mov g, c
18061  6CDB                              
18062  6CDB FA 05 00      lea d, [bp + 5] ; $str
18063  6CDE 2A            mov b, [d]
18064  6CDF 38 00 00      mov c, 0
18065  6CE2 74            mov d, b
18066  6CE3 32            mov bl, [d]
18067  6CE4 A7 00         mov bh, 0
18068  6CE6 38 00 00      mov c, 0
18069  6CE9             ; --- START TERMS
18070  6CE9 D7            push a
18071  6CEA 11            mov a, b
18072  6CEB FD 2E 30 00   mov32 cb, $00000030
18072  6CEF 00 00 
18073  6CF1 60            sub a, b
18074  6CF2 27            mov b, a
18075  6CF3 E4            pop a
18076  6CF4             ; --- END TERMS
18077  6CF4 56            add b, a
18078  6CF5 FD F1         pop g
18079  6CF7 E4            pop a
18080  6CF8             ; --- END TERMS
18081  6CF8 E7            pop d
18082  6CF9 FD 43         mov [d], b
18083  6CFB             ; str++; 
18084  6CFB                              
18085  6CFB FA 05 00      lea d, [bp + 5] ; $str
18086  6CFE 2A            mov b, [d]
18087  6CFF 38 00 00      mov c, 0
18088  6D02 FD 77         inc b
18089  6D04 FA 05 00      lea d, [bp + 5] ; $str
18090  6D07 FD 43         mov [d], b
18091  6D09 FD 7D         dec b
18092  6D0B 0A 46 6C      jmp _while290_cond
18093  6D0E             _while290_exit:
18094  6D0E             ; return sign * result; 
18095  6D0E                              
18096  6D0E FA FD FF      lea d, [bp + -3] ; $sign
18097  6D11 2A            mov b, [d]
18098  6D12 38 00 00      mov c, 0
18099  6D15             ; --- START FACTORS
18100  6D15 D7            push a
18101  6D16 FD D8         push g
18102  6D18 11            mov a, b
18103  6D19 FD 7A         mov g, c
18104  6D1B FA FF FF      lea d, [bp + -1] ; $result
18105  6D1E 2A            mov b, [d]
18106  6D1F 38 00 00      mov c, 0
18107  6D22 D7            push a     ; save left operand
18108  6D23 8E            xor a, b   ; xor sign bits
18109  6D24 FD AA         swp a      ; swap bytes
18110  6D26 83            mov cl, al ; save result of xor into 'dl'
18111  6D27 E4            pop a      ; restore left side operator
18112  6D28 DF            push cl    ; save result of xor above
18113  6D29 FD AA         swp a  
18114  6D2B 93 80         test al, $80  
18115  6D2D FD AA         swp a  
18116  6D2F C6 34 6D      jz skip_invert_a_292  
18117  6D32 FD 95         neg a 
18118  6D34             skip_invert_a_292:   
18119  6D34 FD AB         swp b
18120  6D36 FD 93 80      test bl, $80  
18121  6D39 FD AB         swp b
18122  6D3B C6 40 6D      jz skip_invert_b_292  
18123  6D3E FD 97         neg b 
18124  6D40             skip_invert_b_292:   
18125  6D40 AC            mul a, b ; *
18126  6D41 FD 78         mov g, a
18127  6D43 11            mov a, b
18128  6D44 EA            pop bl
18129  6D45 FD 93 80      test bl, $80
18130  6D48 C6 55 6D      jz _same_signs_292
18131  6D4B 2F            mov bl, al
18132  6D4C 95            not a
18133  6D4D FD 97         neg b
18134  6D4F 5B 00 00      adc a, 0
18135  6D52 FD 78         mov g, a
18136  6D54 11            mov a, b
18137  6D55             _same_signs_292:
18138  6D55 FD 38         mov c, g
18139  6D57 27            mov b, a
18140  6D58 FD F1         pop g
18141  6D5A E4            pop a
18142  6D5B             ; --- END FACTORS
18143  6D5B F9            leave
18144  6D5C 09            ret
18145  6D5D             ; --- END TEXT SEGMENT
18146  6D5D             
18147  6D5D             ; --- BEGIN DATA SEGMENT
18148  6D5D 00          _starbases: .fill 1, 0
18149  6D5E 00          _base_y: .fill 1, 0
18150  6D5F 00          _base_x: .fill 1, 0
18151  6D60 00          _starbases_left: .fill 1, 0
18152  6D61             _c_data: 
18153  6D61 00          .db 
18154  6D62 00          .db 
18155  6D63 00 00 00 FF .db $00,$00,$00,$ff,$ff,$ff,$00,$01,$01,$01,$00,$01,$01,$01,$00,$ff,$ff,$ff,$00,$01,$01,
18155  6D67 FF FF 00 01 
18155  6D6B 01 01 00 01 
18155  6D6F 01 01 00 FF 
18155  6D73 FF FF 00 01 
18155  6D77 01 
18156  6D78 00 00 00 00 .fill 9, 0
18156  6D7C 00 00 00 00 
18156  6D80 00 
18157  6D81 00          _docked: .fill 1, 0
18158  6D82 00 00       _energy: .fill 2, 0
18159  6D84 B8 0B       _energy0: .dw $0bb8
18160  6D86 00 00 00 00 _map_data: .fill 162, 0
18160  6D8A 00 00 00 00 
18160  6D8E 00 00 00 00 
18160  6D92 00 00 00 00 
18160  6D96 00 00 00 00 
18160  6D9A 00 00 00 00 
18160  6D9E 00 00 00 00 
18160  6DA2 00 00 00 00 
18160  6DA6 00 00 00 00 
18160  6DAA 00 00 00 00 
18160  6DAE 00 00 00 00 
18160  6DB2 00 00 00 00 
18160  6DB6 00 00 00 00 
18160  6DBA 00 00 00 00 
18160  6DBE 00 00 00 00 
18160  6DC2 00 00 00 00 
18160  6DC6 00 00 00 00 
18160  6DCA 00 00 00 00 
18160  6DCE 00 00 00 00 
18160  6DD2 00 00 00 00 
18160  6DD6 00 00 00 00 
18160  6DDA 00 00 00 00 
18160  6DDE 00 00 00 00 
18160  6DE2 00 00 00 00 
18160  6DE6 00 00 00 00 
18160  6DEA 00 00 00 00 
18160  6DEE 00 00 00 00 
18160  6DF2 00 00 00 00 
18160  6DF6 00 00 00 00 
18160  6DFA 00 00 00 00 
18160  6DFE 00 00 00 00 
18160  6E02 00 00 00 00 
18160  6E06 00 00 00 00 
18160  6E0A 00 00 00 00 
18160  6E0E 00 00 00 00 
18160  6E12 00 00 00 00 
18160  6E16 00 00 00 00 
18160  6E1A 00 00 00 00 
18160  6E1E 00 00 00 00 
18160  6E22 00 00 00 00 
18160  6E26 00 00 
18161  6E28 00 00 00 00 _kdata_data: .fill 12, 0
18161  6E2C 00 00 00 00 
18161  6E30 00 00 00 00 
18162  6E34 00          _klingons: .fill 1, 0
18163  6E35 00          _total_klingons: .fill 1, 0
18164  6E36 00          _klingons_left: .fill 1, 0
18165  6E37 00          _torps: .fill 1, 0
18166  6E38 0A          _torps0: .db $0a
18167  6E39 00 00       _quad_y: .fill 2, 0
18168  6E3B 00 00       _quad_x: .fill 2, 0
18169  6E3D 00 00       _shield: .fill 2, 0
18170  6E3F 00          _stars: .fill 1, 0
18171  6E40 00 00       _time_start: .fill 2, 0
18172  6E42 00 00       _time_up: .fill 2, 0
18173  6E44 00 00 00 00 _damage_data: .fill 18, 0
18173  6E48 00 00 00 00 
18173  6E4C 00 00 00 00 
18173  6E50 00 00 00 00 
18173  6E54 00 00 
18174  6E56 00 00       _d4: .fill 2, 0
18175  6E58 00 00       _ship_y: .fill 2, 0
18176  6E5A 00 00       _ship_x: .fill 2, 0
18177  6E5C 00 00       _stardate: .fill 2, 0
18178  6E5E 00 00 00 00 _quad_data: .fill 64, 0
18178  6E62 00 00 00 00 
18178  6E66 00 00 00 00 
18178  6E6A 00 00 00 00 
18178  6E6E 00 00 00 00 
18178  6E72 00 00 00 00 
18178  6E76 00 00 00 00 
18178  6E7A 00 00 00 00 
18178  6E7E 00 00 00 00 
18178  6E82 00 00 00 00 
18178  6E86 00 00 00 00 
18178  6E8A 00 00 00 00 
18178  6E8E 00 00 00 00 
18178  6E92 00 00 00 00 
18178  6E96 00 00 00 00 
18178  6E9A 00 00 00 00 
18179  6E9E 00 00 00 00 _quadname_data: .fill 12, 0
18179  6EA2 00 00 00 00 
18179  6EA6 00 00 00 00 
18180  6EAA 72 65 70 6F _inc_1_data: .db "reports:\n  Incorrect course data, sir!\n", 0
18180  6EAE 72 74 73 3A 
18180  6EB2 0A 20 20 49 
18180  6EB6 6E 63 6F 72 
18180  6EBA 72 65 63 74 
18180  6EBE 20 63 6F 75 
18180  6EC2 72 73 65 20 
18180  6EC6 64 61 74 61 
18180  6ECA 2C 20 73 69 
18180  6ECE 72 21 0A 00 
18181  6ED2 AA 6E       _inc_1: .dw _inc_1_data
18182  6ED4             _quad_name_data: 
18183  6ED4 00 00       .dw 
18184  6ED6 57 70 58 70 .dw _s0, _s1, _s2, _s3, _s4, _s5, _s6, _s7, _s8, _s9, _s10, _s11, _s12, _s13, _s14, _s15, _s16, 
18184  6EDA 60 70 66 70 
18184  6EDE 6E 70 73 70 
18184  6EE2 7B 70 82 70 
18184  6EE6 8E 70 95 70 
18184  6EEA 9C 70 A2 70 
18184  6EEE AA 70 B5 70 
18184  6EF2 BF 70 C7 70 
18184  6EF6 D0 70 
18185  6EF8 00 00 00 00 .fill 34, 0
18185  6EFC 00 00 00 00 
18185  6F00 00 00 00 00 
18185  6F04 00 00 00 00 
18185  6F08 00 00 00 00 
18185  6F0C 00 00 00 00 
18185  6F10 00 00 00 00 
18185  6F14 00 00 00 00 
18185  6F18 00 00 
18186  6F1A             _device_name_data: 
18187  6F1A 00 00       .dw 
18188  6F1C 57 70 D6 70 .dw _s0, _s17, _s18, _s19, _s20, _s21, _s22, _s23, _s24, 
18188  6F20 E3 70 F7 70 
18188  6F24 0A 71 19 71 
18188  6F28 26 71 35 71 
18188  6F2C 44 71 
18189  6F2E 00 00 00 00 .fill 18, 0
18189  6F32 00 00 00 00 
18189  6F36 00 00 00 00 
18189  6F3A 00 00 00 00 
18189  6F3E 00 00 
18190  6F40 44 61 6D 61 _dcr_1_data: .db "Damage Control report:", 0
18190  6F44 67 65 20 43 
18190  6F48 6F 6E 74 72 
18190  6F4C 6F 6C 20 72 
18190  6F50 65 70 6F 72 
18190  6F54 74 3A 00 
18191  6F57 40 6F       _dcr_1: .dw _dcr_1_data
18192  6F59             _plural_2_data: 
18193  6F59 00          .db 
18194  6F5A 00 00       .db $00,$00,
18195  6F5C             _plural_data: 
18196  6F5C 00          .db 
18197  6F5D 69 73 00    .db $69,$73,$00,
18198  6F60 00          .fill 1, 0
18199  6F61             _warpmax_data: 
18200  6F61 00          .db 
18201  6F62 08          .db $08,
18202  6F63 00 00 00    .fill 3, 0
18203  6F66 2D 2D 2D 2D _srs_1_data: .db "------------------------", 0
18203  6F6A 2D 2D 2D 2D 
18203  6F6E 2D 2D 2D 2D 
18203  6F72 2D 2D 2D 2D 
18203  6F76 2D 2D 2D 2D 
18203  6F7A 2D 2D 2D 2D 
18203  6F7E 00 
18204  6F7F 66 6F       _srs_1: .dw _srs_1_data
18205  6F81             _tilestr_data: 
18206  6F81 00 00       .dw 
18207  6F83 55 71 59 71 .dw _s25, _s26, _s27, _s28, _s29, 
18207  6F87 5D 71 61 71 
18207  6F8B 65 71 
18208  6F8D 00 00 00 00 .fill 10, 0
18208  6F91 00 00 00 00 
18208  6F95 00 00 
18209  6F97 2D 2D 2D 2D _lrs_1_data: .db "-------------------\n", 0
18209  6F9B 2D 2D 2D 2D 
18209  6F9F 2D 2D 2D 2D 
18209  6FA3 2D 2D 2D 2D 
18209  6FA7 2D 2D 2D 0A 
18209  6FAB 00 
18210  6FAC 97 6F       _lrs_1: .dw _lrs_1_data
18211  6FAE 20 20 20 2D _gr_1_data: .db "   ----- ----- ----- ----- ----- ----- ----- -----\n", 0
18211  6FB2 2D 2D 2D 2D 
18211  6FB6 20 2D 2D 2D 
18211  6FBA 2D 2D 20 2D 
18211  6FBE 2D 2D 2D 2D 
18211  6FC2 20 2D 2D 2D 
18211  6FC6 2D 2D 20 2D 
18211  6FCA 2D 2D 2D 2D 
18211  6FCE 20 2D 2D 2D 
18211  6FD2 2D 2D 20 2D 
18211  6FD6 2D 2D 2D 2D 
18211  6FDA 20 2D 2D 2D 
18211  6FDE 2D 2D 0A 00 
18212  6FE2 AE 6F       _gr_1: .dw _gr_1_data
18213  6FE4 73 00       _str_s_data: .db "s", 0
18214  6FE6 E4 6F       _str_s: .dw _str_s_data
18215  6FE8 20 20 2D 2D _gm_1_data: .db "  ----- ----- ----- ----- ----- ----- ----- -----\n", 0
18215  6FEC 2D 2D 2D 20 
18215  6FF0 2D 2D 2D 2D 
18215  6FF4 2D 20 2D 2D 
18215  6FF8 2D 2D 2D 20 
18215  6FFC 2D 2D 2D 2D 
18215  7000 2D 20 2D 2D 
18215  7004 2D 2D 2D 20 
18215  7008 2D 2D 2D 2D 
18215  700C 2D 20 2D 2D 
18215  7010 2D 2D 2D 20 
18215  7014 2D 2D 2D 2D 
18215  7018 2D 0A 00 
18216  701B E8 6F       _gm_1: .dw _gm_1_data
18217  701D 20 20 44 49 _dist_1_data: .db "  DISTANCE = %s\n\n", 0
18217  7021 53 54 41 4E 
18217  7025 43 45 20 3D 
18217  7029 20 25 73 0A 
18217  702D 0A 00 
18218  702F 1D 70       _dist_1: .dw _dist_1_data
18219  7031 00 00 00 00 st_print100_buf_dt: .fill 16, 0
18219  7035 00 00 00 00 
18219  7039 00 00 00 00 
18219  703D 00 00 00 00 
18220  7041             st_quadrant_name_sect_name_dt: 
18221  7041 57 70 17 83 .dw _s0, _s164, _s165, _s166, _s167, 
18221  7045 1A 83 1E 83 
18221  7049 23 83 
18222  704B 00 00 00 00 .fill 10, 0
18222  704F 00 00 00 00 
18222  7053 00 00 
18223  7055 41 70       st_quadrant_name_sect_name: .dw st_quadrant_name_sect_name_dt
18224  7057 00          _s0: .db "", 0
18225  7058 41 6E 74 61 _s1: .db "Antares", 0
18225  705C 72 65 73 00 
18226  7060 52 69 67 65 _s2: .db "Rigel", 0
18226  7064 6C 00 
18227  7066 50 72 6F 63 _s3: .db "Procyon", 0
18227  706A 79 6F 6E 00 
18228  706E 56 65 67 61 _s4: .db "Vega", 0
18228  7072 00 
18229  7073 43 61 6E 6F _s5: .db "Canopus", 0
18229  7077 70 75 73 00 
18230  707B 41 6C 74 61 _s6: .db "Altair", 0
18230  707F 69 72 00 
18231  7082 53 61 67 69 _s7: .db "Sagittarius", 0
18231  7086 74 74 61 72 
18231  708A 69 75 73 00 
18232  708E 50 6F 6C 6C _s8: .db "Pollux", 0
18232  7092 75 78 00 
18233  7095 53 69 72 69 _s9: .db "Sirius", 0
18233  7099 75 73 00 
18234  709C 44 65 6E 65 _s10: .db "Deneb", 0
18234  70A0 62 00 
18235  70A2 43 61 70 65 _s11: .db "Capella", 0
18235  70A6 6C 6C 61 00 
18236  70AA 42 65 74 65 _s12: .db "Betelgeuse", 0
18236  70AE 6C 67 65 75 
18236  70B2 73 65 00 
18237  70B5 41 6C 64 65 _s13: .db "Aldebaran", 0
18237  70B9 62 61 72 61 
18237  70BD 6E 00 
18238  70BF 52 65 67 75 _s14: .db "Regulus", 0
18238  70C3 6C 75 73 00 
18239  70C7 41 72 63 74 _s15: .db "Arcturus", 0
18239  70CB 75 72 75 73 
18239  70CF 00 
18240  70D0 53 70 69 63 _s16: .db "Spica", 0
18240  70D4 61 00 
18241  70D6 57 61 72 70 _s17: .db "Warp engines", 0
18241  70DA 20 65 6E 67 
18241  70DE 69 6E 65 73 
18241  70E2 00 
18242  70E3 53 68 6F 72 _s18: .db "Short range sensors", 0
18242  70E7 74 20 72 61 
18242  70EB 6E 67 65 20 
18242  70EF 73 65 6E 73 
18242  70F3 6F 72 73 00 
18243  70F7 4C 6F 6E 67 _s19: .db "Long range sensors", 0
18243  70FB 20 72 61 6E 
18243  70FF 67 65 20 73 
18243  7103 65 6E 73 6F 
18243  7107 72 73 00 
18244  710A 50 68 61 73 _s20: .db "Phaser control", 0
18244  710E 65 72 20 63 
18244  7112 6F 6E 74 72 
18244  7116 6F 6C 00 
18245  7119 50 68 6F 74 _s21: .db "Photon tubes", 0
18245  711D 6F 6E 20 74 
18245  7121 75 62 65 73 
18245  7125 00 
18246  7126 44 61 6D 61 _s22: .db "Damage control", 0
18246  712A 67 65 20 63 
18246  712E 6F 6E 74 72 
18246  7132 6F 6C 00 
18247  7135 53 68 69 65 _s23: .db "Shield control", 0
18247  7139 6C 64 20 63 
18247  713D 6F 6E 74 72 
18247  7141 6F 6C 00 
18248  7144 4C 69 62 72 _s24: .db "Library computer", 0
18248  7148 61 72 79 20 
18248  714C 63 6F 6D 70 
18248  7150 75 74 65 72 
18248  7154 00 
18249  7155 20 20 20 00 _s25: .db "   ", 0
18250  7159 20 2A 20 00 _s26: .db " * ", 0
18251  715D 3E 21 3C 00 _s27: .db ">!<", 0
18252  7161 2B 4B 2B 00 _s28: .db "+K+", 0
18253  7165 3C 2A 3E 00 _s29: .db "<*>", 0
18254  7169 61 72 65 00 _s30: .db "are", 0
18255  716D 69 73 00    _s31: .db "is", 0
18256  7170 25 73 20 25 _s32: .db "%s %s inoperable.\n", 0
18256  7174 73 20 69 6E 
18256  7178 6F 70 65 72 
18256  717C 61 62 6C 65 
18256  7180 2E 0A 00 
18257  7183 73 74 61 72 _s33: .db "startrek.intro", 0
18257  7187 74 72 65 6B 
18257  718B 2E 69 6E 74 
18257  718F 72 6F 00 
18258  7192 73 74 61 72 _s34: .db "startrek.doc", 0
18258  7196 74 72 65 6B 
18258  719A 2E 64 6F 63 
18258  719E 00 
18259  719F 73 74 61 72 _s35: .db "startrek.logo", 0
18259  71A3 74 72 65 6B 
18259  71A7 2E 6C 6F 67 
18259  71AB 6F 00 
18260  71AD 73 74 61 72 _s36: .db "startrek.fatal", 0
18260  71B1 74 72 65 6B 
18260  71B5 2E 66 61 74 
18260  71B9 61 6C 00 
18261  71BC 43 6F 6D 6D _s37: .db "Command? ", 0
18261  71C0 61 6E 64 3F 
18261  71C4 20 00 
18262  71C6 6E 61 76 00 _s38: .db "nav", 0
18263  71CA 73 72 73 00 _s39: .db "srs", 0
18264  71CE 6C 72 73 00 _s40: .db "lrs", 0
18265  71D2 70 68 61 00 _s41: .db "pha", 0
18266  71D6 74 6F 72 00 _s42: .db "tor", 0
18267  71DA 73 68 69 00 _s43: .db "shi", 0
18268  71DE 64 61 6D 00 _s44: .db "dam", 0
18269  71E2 63 6F 6D 00 _s45: .db "com", 0
18270  71E6 78 78 78 00 _s46: .db "xxx", 0
18271  71EA 45 6E 74 65 _s47: .db "Enter one of the following:\n", 0
18271  71EE 72 20 6F 6E 
18271  71F2 65 20 6F 66 
18271  71F6 20 74 68 65 
18271  71FA 20 66 6F 6C 
18271  71FE 6C 6F 77 69 
18271  7202 6E 67 3A 0A 
18271  7206 00 
18272  7207 20 20 6E 61 _s48: .db "  nav - To Set Course", 0
18272  720B 76 20 2D 20 
18272  720F 54 6F 20 53 
18272  7213 65 74 20 43 
18272  7217 6F 75 72 73 
18272  721B 65 00 
18273  721D 20 20 73 72 _s49: .db "  srs - Short Range Sensors", 0
18273  7221 73 20 2D 20 
18273  7225 53 68 6F 72 
18273  7229 74 20 52 61 
18273  722D 6E 67 65 20 
18273  7231 53 65 6E 73 
18273  7235 6F 72 73 00 
18274  7239 20 20 6C 72 _s50: .db "  lrs - Long Range Sensors", 0
18274  723D 73 20 2D 20 
18274  7241 4C 6F 6E 67 
18274  7245 20 52 61 6E 
18274  7249 67 65 20 53 
18274  724D 65 6E 73 6F 
18274  7251 72 73 00 
18275  7254 20 20 70 68 _s51: .db "  pha - Phasers", 0
18275  7258 61 20 2D 20 
18275  725C 50 68 61 73 
18275  7260 65 72 73 00 
18276  7264 20 20 74 6F _s52: .db "  tor - Photon Torpedoes", 0
18276  7268 72 20 2D 20 
18276  726C 50 68 6F 74 
18276  7270 6F 6E 20 54 
18276  7274 6F 72 70 65 
18276  7278 64 6F 65 73 
18276  727C 00 
18277  727D 20 20 73 68 _s53: .db "  shi - Shield Control", 0
18277  7281 69 20 2D 20 
18277  7285 53 68 69 65 
18277  7289 6C 64 20 43 
18277  728D 6F 6E 74 72 
18277  7291 6F 6C 00 
18278  7294 20 20 64 61 _s54: .db "  dam - Damage Control", 0
18278  7298 6D 20 2D 20 
18278  729C 44 61 6D 61 
18278  72A0 67 65 20 43 
18278  72A4 6F 6E 74 72 
18278  72A8 6F 6C 00 
18279  72AB 20 20 63 6F _s55: .db "  com - Library Computer", 0
18279  72AF 6D 20 2D 20 
18279  72B3 4C 69 62 72 
18279  72B7 61 72 79 20 
18279  72BB 43 6F 6D 70 
18279  72BF 75 74 65 72 
18279  72C3 00 
18280  72C4 20 20 78 78 _s56: .db "  xxx - Resign Command\n", 0
18280  72C8 78 20 2D 20 
18280  72CC 52 65 73 69 
18280  72D0 67 6E 20 43 
18280  72D4 6F 6D 6D 61 
18280  72D8 6E 64 0A 00 
18281  72DC 73 00       _s57: .db "s", 0
18282  72DE 4E 6F 77 20 _s58: .db "Now entering %s quadrant...\n\n", 0
18282  72E2 65 6E 74 65 
18282  72E6 72 69 6E 67 
18282  72EA 20 25 73 20 
18282  72EE 71 75 61 64 
18282  72F2 72 61 6E 74 
18282  72F6 2E 2E 2E 0A 
18282  72FA 0A 00 
18283  72FC 0A 59 6F 75 _s59: .db "\nYour mission begins with your starship located", 0
18283  7300 72 20 6D 69 
18283  7304 73 73 69 6F 
18283  7308 6E 20 62 65 
18283  730C 67 69 6E 73 
18283  7310 20 77 69 74 
18283  7314 68 20 79 6F 
18283  7318 75 72 20 73 
18283  731C 74 61 72 73 
18283  7320 68 69 70 20 
18283  7324 6C 6F 63 61 
18283  7328 74 65 64 00 
18284  732C 69 6E 20 74 _s60: .db "in the galactic quadrant %s.\n\n", 0
18284  7330 68 65 20 67 
18284  7334 61 6C 61 63 
18284  7338 74 69 63 20 
18284  733C 71 75 61 64 
18284  7340 72 61 6E 74 
18284  7344 20 25 73 2E 
18284  7348 0A 0A 00 
18285  734B 43 6F 6D 62 _s61: .db "Combat Area  Condition Red\n", 0
18285  734F 61 74 20 41 
18285  7353 72 65 61 20 
18285  7357 20 43 6F 6E 
18285  735B 64 69 74 69 
18285  735F 6F 6E 20 52 
18285  7363 65 64 0A 00 
18286  7367 53 68 69 65 _s62: .db "Shields Dangerously Low\n", 0
18286  736B 6C 64 73 20 
18286  736F 44 61 6E 67 
18286  7373 65 72 6F 75 
18286  7377 73 6C 79 20 
18286  737B 4C 6F 77 0A 
18286  737F 00 
18287  7380 43 6F 75 72 _s63: .db "Course (0-9): ", 0
18287  7384 73 65 20 28 
18287  7388 30 2D 39 29 
18287  738C 3A 20 00 
18288  738F 4C 74 2E 20 _s64: .db "Lt. Sulu%s", 0
18288  7393 53 75 6C 75 
18288  7397 25 73 00 
18289  739A 30 2E 32 00 _s65: .db "0.2", 0
18290  739E 57 61 72 70 _s66: .db "Warp Factor (0-%s): ", 0
18290  73A2 20 46 61 63 
18290  73A6 74 6F 72 20 
18290  73AA 28 30 2D 25 
18290  73AE 73 29 3A 20 
18290  73B2 00 
18291  73B3 57 61 72 70 _s67: .db "Warp Engines are damaged. Maximum speed = Warp 0.2.\n\n", 0
18291  73B7 20 45 6E 67 
18291  73BB 69 6E 65 73 
18291  73BF 20 61 72 65 
18291  73C3 20 64 61 6D 
18291  73C7 61 67 65 64 
18291  73CB 2E 20 4D 61 
18291  73CF 78 69 6D 75 
18291  73D3 6D 20 73 70 
18291  73D7 65 65 64 20 
18291  73DB 3D 20 57 61 
18291  73DF 72 70 20 30 
18291  73E3 2E 32 2E 0A 
18291  73E7 0A 00 
18292  73E9 43 68 69 65 _s68: .db "Chief Engineer Scott reports:\n  The engines won't take warp %s!\n\n", 0
18292  73ED 66 20 45 6E 
18292  73F1 67 69 6E 65 
18292  73F5 65 72 20 53 
18292  73F9 63 6F 74 74 
18292  73FD 20 72 65 70 
18292  7401 6F 72 74 73 
18292  7405 3A 0A 20 20 
18292  7409 54 68 65 20 
18292  740D 65 6E 67 69 
18292  7411 6E 65 73 20 
18292  7415 77 6F 6E 27 
18292  7419 74 20 74 61 
18292  741D 6B 65 20 77 
18292  7421 61 72 70 20 
18292  7425 25 73 21 0A 
18292  7429 0A 
18293  742A 45 6E 67 69 _s69: .db "Engineering reports:\n  Insufficient energy available for maneuvering at warp %s!\n\n", 0
18293  742E 6E 65 65 72 
18293  7432 69 6E 67 20 
18293  7436 72 65 70 6F 
18293  743A 72 74 73 3A 
18293  743E 0A 20 20 49 
18293  7442 6E 73 75 66 
18293  7446 66 69 63 69 
18293  744A 65 6E 74 20 
18293  744E 65 6E 65 72 
18293  7452 67 79 20 61 
18293  7456 76 61 69 6C 
18293  745A 61 62 6C 65 
18293  745E 20 66 6F 72 
18293  7462 20 6D 61 6E 
18293  7466 65 75 76 65 
18293  746A 72 69 6E 67 
18293  746E 20 61 74 20 
18293  7472 77 61 72 70 
18293  7476 20 25 73 21 
18293  747A 0A 0A 00 
18294  747D 44 65 66 6C _s70: .db "Deflector Control Room acknowledges:\n  %d units of energy presently deployed to shields.\n", 0
18294  7481 65 63 74 6F 
18294  7485 72 20 43 6F 
18294  7489 6E 74 72 6F 
18294  748D 6C 20 52 6F 
18294  7491 6F 6D 20 61 
18294  7495 63 6B 6E 6F 
18294  7499 77 6C 65 64 
18294  749D 67 65 73 3A 
18294  74A1 0A 20 20 25 
18294  74A5 64 20 75 6E 
18294  74A9 69 74 73 20 
18294  74AD 6F 66 20 65 
18294  74B1 6E 65 72 67 
18294  74B5 79 20 70 72 
18294  74B9 65 73 65 6E 
18294  74BD 74 6C 79 20 
18294  74C1 64 65 70 6C 
18294  74C5 6F 79 65 64 
18294  74C9 20 74 6F 20 
18294  74CD 73 68 69 65 
18294  74D1 6C 64 73 2E 
18294  74D5 0A 00 
18295  74D7 4C 54 2E 20 _s71: .db "LT. Uhura reports:\n Message from Starfleet Command:\n\n Permission to attempt crossing of galactic perimeter\n is hereby *denie"
18295  74DB 55 68 75 72 
18295  74DF 61 20 72 65 
18295  74E3 70 6F 72 74 
18295  74E7 73 3A 0A 20 
18295  74EB 4D 65 73 73 
18295  74EF 61 67 65 20 
18295  74F3 66 72 6F 6D 
18295  74F7 20 53 74 61 
18295  74FB 72 66 6C 65 
18295  74FF 65 74 20 43 
18295  7503 6F 6D 6D 61 
18295  7507 6E 64 3A 0A 
18295  750B 0A 20 50 65 
18295  750F 72 6D 69 73 
18295  7513 73 69 6F 6E 
18295  7517 20 74 6F 20 
18295  751B 61 74 74 65 
18295  751F 6D 70 74 20 
18295  7523 63 72 6F 73 
18295  7527 73 69 6E 67 
18295  752B 20 6F 66 20 
18295  752F 67 61 6C 61 
18295  7533 63 74 69 63 
18295  7537 20 70 65 72 
18295  753B 69 6D 65 74 
18295  753F 65 72 0A 20 
18295  7543 69 73 20 68 
18295  7547 65 72 65 62 
18295  754B 79 20 2A 64 
18295  754F 65 6E 69 65 
18296  7553 64 2A 2E 20 .db "d*. Shut down your engines.\n\n Chief Engineer Scott reports:\n Warp Engines shut down at sector %d, %d of quadrant %d, %d.\n\n", 0
18296  7557 53 68 75 74 
18296  755B 20 64 6F 77 
18296  755F 6E 20 79 6F 
18296  7563 75 72 20 65 
18296  7567 6E 67 69 6E 
18296  756B 65 73 2E 0A 
18296  756F 0A 20 43 68 
18296  7573 69 65 66 20 
18296  7577 45 6E 67 69 
18296  757B 6E 65 65 72 
18296  757F 20 53 63 6F 
18296  7583 74 74 20 72 
18296  7587 65 70 6F 72 
18296  758B 74 73 3A 0A 
18296  758F 20 57 61 72 
18296  7593 70 20 45 6E 
18296  7597 67 69 6E 65 
18296  759B 73 20 73 68 
18296  759F 75 74 20 64 
18296  75A3 6F 77 6E 20 
18296  75A7 61 74 20 73 
18296  75AB 65 63 74 6F 
18296  75AF 72 20 25 64 
18296  75B3 2C 20 25 64 
18296  75B7 20 6F 66 20 
18296  75BB 71 75 61 64 
18296  75BF 72 61 6E 74 
18296  75C3 20 25 64 2C 
18296  75C7 20 25 64 2E 
18296  75CB 0A 0A 00 
18297  75CE 57 61 72 70 _s72: .db "Warp Engines shut down at sector %d, %d due to bad navigation.\n\n", 0
18297  75D2 20 45 6E 67 
18297  75D6 69 6E 65 73 
18297  75DA 20 73 68 75 
18297  75DE 74 20 64 6F 
18297  75E2 77 6E 20 61 
18297  75E6 74 20 73 65 
18297  75EA 63 74 6F 72 
18297  75EE 20 25 64 2C 
18297  75F2 20 25 64 20 
18297  75F6 64 75 65 20 
18297  75FA 74 6F 20 62 
18297  75FE 61 64 20 6E 
18297  7602 61 76 69 67 
18297  7606 61 74 69 6F 
18297  760A 6E 2E 0A 0A 
18297  760E 00 
18298  760F 53 68 69 65 _s73: .db "Shield Control supplies energy to complete maneuver.\n", 0
18298  7613 6C 64 20 43 
18298  7617 6F 6E 74 72 
18298  761B 6F 6C 20 73 
18298  761F 75 70 70 6C 
18298  7623 69 65 73 20 
18298  7627 65 6E 65 72 
18298  762B 67 79 20 74 
18298  762F 6F 20 63 6F 
18298  7633 6D 70 6C 65 
18298  7637 74 65 20 6D 
18298  763B 61 6E 65 75 
18298  763F 76 65 72 2E 
18298  7643 0A 00 
18299  7645 47 52 45 45 _s74: .db "GREEN", 0
18299  7649 4E 00 
18300  764B 59 45 4C 4C _s75: .db "YELLOW", 0
18300  764F 4F 57 00 
18301  7652 2A 52 45 44 _s76: .db "*RED*", 0
18301  7656 2A 00 
18302  7658 44 4F 43 4B _s77: .db "DOCKED", 0
18302  765C 45 44 00 
18303  765F 53 68 69 65 _s78: .db "Shields dropped for docking purposes.", 0
18303  7663 6C 64 73 20 
18303  7667 64 72 6F 70 
18303  766B 70 65 64 20 
18303  766F 66 6F 72 20 
18303  7673 64 6F 63 6B 
18303  7677 69 6E 67 20 
18303  767B 70 75 72 70 
18303  767F 6F 73 65 73 
18303  7683 2E 00 
18304  7685 0A 2A 2A 2A _s79: .db "\n*** Short Range Sensors are out ***", 0
18304  7689 20 53 68 6F 
18304  768D 72 74 20 52 
18304  7691 61 6E 67 65 
18304  7695 20 53 65 6E 
18304  7699 73 6F 72 73 
18304  769D 20 61 72 65 
18304  76A1 20 6F 75 74 
18304  76A5 20 2A 2A 2A 
18304  76A9 00 
18305  76AA 20 20 20 20 _s80: .db "    Stardate            %d\n", 0
18305  76AE 53 74 61 72 
18305  76B2 64 61 74 65 
18305  76B6 20 20 20 20 
18305  76BA 20 20 20 20 
18305  76BE 20 20 20 20 
18305  76C2 25 64 0A 00 
18306  76C6 20 20 20 20 _s81: .db "    Condition           %s\n", 0
18306  76CA 43 6F 6E 64 
18306  76CE 69 74 69 6F 
18306  76D2 6E 20 20 20 
18306  76D6 20 20 20 20 
18306  76DA 20 20 20 20 
18306  76DE 25 73 0A 00 
18307  76E2 20 20 20 20 _s82: .db "    Quadrant            %d, %d\n", 0
18307  76E6 51 75 61 64 
18307  76EA 72 61 6E 74 
18307  76EE 20 20 20 20 
18307  76F2 20 20 20 20 
18307  76F6 20 20 20 20 
18307  76FA 25 64 2C 20 
18307  76FE 25 64 0A 00 
18308  7702 20 20 20 20 _s83: .db "    Sector              %d, %d\n", 0
18308  7706 53 65 63 74 
18308  770A 6F 72 20 20 
18308  770E 20 20 20 20 
18308  7712 20 20 20 20 
18308  7716 20 20 20 20 
18308  771A 25 64 2C 20 
18308  771E 25 64 0A 00 
18309  7722 20 20 20 20 _s84: .db "    Photon Torpedoes    %d\n", 0
18309  7726 50 68 6F 74 
18309  772A 6F 6E 20 54 
18309  772E 6F 72 70 65 
18309  7732 64 6F 65 73 
18309  7736 20 20 20 20 
18309  773A 25 64 0A 00 
18310  773E 20 20 20 20 _s85: .db "    Total Energy        %d\n", 0
18310  7742 54 6F 74 61 
18310  7746 6C 20 45 6E 
18310  774A 65 72 67 79 
18310  774E 20 20 20 20 
18310  7752 20 20 20 20 
18310  7756 25 64 0A 00 
18311  775A 20 20 20 20 _s86: .db "    Shields             %d\n", 0
18311  775E 53 68 69 65 
18311  7762 6C 64 73 20 
18311  7766 20 20 20 20 
18311  776A 20 20 20 20 
18311  776E 20 20 20 20 
18311  7772 25 64 0A 00 
18312  7776 20 20 20 20 _s87: .db "    Klingons Remaining  %d\n", 0
18312  777A 4B 6C 69 6E 
18312  777E 67 6F 6E 73 
18312  7782 20 52 65 6D 
18312  7786 61 69 6E 69 
18312  778A 6E 67 20 20 
18312  778E 25 64 0A 00 
18313  7792 4C 6F 6E 67 _s88: .db "Long Range Scan for Quadrant %d, %d\n\n", 0
18313  7796 20 52 61 6E 
18313  779A 67 65 20 53 
18313  779E 63 61 6E 20 
18313  77A2 66 6F 72 20 
18313  77A6 51 75 61 64 
18313  77AA 72 61 6E 74 
18313  77AE 20 25 64 2C 
18313  77B2 20 25 64 0A 
18313  77B6 0A 00 
18314  77B8 25 73 3A 00 _s89: .db "%s:", 0
18315  77BC 2A 2A 2A 00 _s90: .db "***", 0
18316  77C0 20 3A 00    _s91: .db " :", 0
18317  77C3 25 73 0A 00 _s92: .db "%s\n", 0
18318  77C7 53 63 69 65 _s93: .db "Science Officer Spock reports:\n  'Sensors show no enemy ships in this quadrant'\n", 0
18318  77CB 6E 63 65 20 
18318  77CF 4F 66 66 69 
18318  77D3 63 65 72 20 
18318  77D7 53 70 6F 63 
18318  77DB 6B 20 72 65 
18318  77DF 70 6F 72 74 
18318  77E3 73 3A 0A 20 
18318  77E7 20 27 53 65 
18318  77EB 6E 73 6F 72 
18318  77EF 73 20 73 68 
18318  77F3 6F 77 20 6E 
18318  77F7 6F 20 65 6E 
18318  77FB 65 6D 79 20 
18318  77FF 73 68 69 70 
18318  7803 73 20 69 6E 
18318  7807 20 74 68 69 
18318  780B 73 20 71 75 
18318  780F 61 64 72 61 
18318  7813 6E 74 27 0A 
18318  7817 00 
18319  7818 43 6F 6D 70 _s94: .db "Computer failure hampers accuracy.", 0
18319  781C 75 74 65 72 
18319  7820 20 66 61 69 
18319  7824 6C 75 72 65 
18319  7828 20 68 61 6D 
18319  782C 70 65 72 73 
18319  7830 20 61 63 63 
18319  7834 75 72 61 63 
18319  7838 79 2E 00 
18320  783B 50 68 61 73 _s95: .db "Phasers locked on target;\n Energy available = %d units\n\n Number of units to fire: ", 0
18320  783F 65 72 73 20 
18320  7843 6C 6F 63 6B 
18320  7847 65 64 20 6F 
18320  784B 6E 20 74 61 
18320  784F 72 67 65 74 
18320  7853 3B 0A 20 45 
18320  7857 6E 65 72 67 
18320  785B 79 20 61 76 
18320  785F 61 69 6C 61 
18320  7863 62 6C 65 20 
18320  7867 3D 20 25 64 
18320  786B 20 75 6E 69 
18320  786F 74 73 0A 0A 
18320  7873 20 4E 75 6D 
18320  7877 62 65 72 20 
18320  787B 6F 66 20 75 
18320  787F 6E 69 74 73 
18320  7883 20 74 6F 20 
18320  7887 66 69 72 65 
18320  788B 3A 20 00 
18321  788E 4E 6F 74 20 _s96: .db "Not enough energy available.\n", 0
18321  7892 65 6E 6F 75 
18321  7896 67 68 20 65 
18321  789A 6E 65 72 67 
18321  789E 79 20 61 76 
18321  78A2 61 69 6C 61 
18321  78A6 62 6C 65 2E 
18321  78AA 0A 00 
18322  78AC 53 65 6E 73 _s97: .db "Sensors show no damage to enemy at %d, %d\n\n", 0
18322  78B0 6F 72 73 20 
18322  78B4 73 68 6F 77 
18322  78B8 20 6E 6F 20 
18322  78BC 64 61 6D 61 
18322  78C0 67 65 20 74 
18322  78C4 6F 20 65 6E 
18322  78C8 65 6D 79 20 
18322  78CC 61 74 20 25 
18322  78D0 64 2C 20 25 
18322  78D4 64 0A 0A 00 
18323  78D8 25 64 20 75 _s98: .db "%d unit hit on Klingon at sector %d, %d\n", 0
18323  78DC 6E 69 74 20 
18323  78E0 68 69 74 20 
18323  78E4 6F 6E 20 4B 
18323  78E8 6C 69 6E 67 
18323  78EC 6F 6E 20 61 
18323  78F0 74 20 73 65 
18323  78F4 63 74 6F 72 
18323  78F8 20 25 64 2C 
18323  78FC 20 25 64 0A 
18323  7900 00 
18324  7901 2A 2A 2A 20 _s99: .db "*** Klingon Destroyed ***\n", 0
18324  7905 4B 6C 69 6E 
18324  7909 67 6F 6E 20 
18324  790D 44 65 73 74 
18324  7911 72 6F 79 65 
18324  7915 64 20 2A 2A 
18324  7919 2A 0A 00 
18325  791C 20 20 20 28 _s100: .db "   (Sensors show %d units remaining.)\n\n", 0
18325  7920 53 65 6E 73 
18325  7924 6F 72 73 20 
18325  7928 73 68 6F 77 
18325  792C 20 25 64 20 
18325  7930 75 6E 69 74 
18325  7934 73 20 72 65 
18325  7938 6D 61 69 6E 
18325  793C 69 6E 67 2E 
18325  7940 29 0A 0A 00 
18326  7944 41 6C 6C 20 _s101: .db "All photon torpedoes expended", 0
18326  7948 70 68 6F 74 
18326  794C 6F 6E 20 74 
18326  7950 6F 72 70 65 
18326  7954 64 6F 65 73 
18326  7958 20 65 78 70 
18326  795C 65 6E 64 65 
18326  7960 64 00 
18327  7962 45 6E 73 69 _s102: .db "Ensign Chekov%s", 0
18327  7966 67 6E 20 43 
18327  796A 68 65 6B 6F 
18327  796E 76 25 73 00 
18328  7972 54 6F 72 70 _s103: .db "Torpedo Track:", 0
18328  7976 65 64 6F 20 
18328  797A 54 72 61 63 
18328  797E 6B 3A 00 
18329  7981 20 20 20 20 _s104: .db "    %d, %d\n", 0
18329  7985 25 64 2C 20 
18329  7989 25 64 0A 00 
18330  798D 54 6F 72 70 _s105: .db "Torpedo Missed\n", 0
18330  7991 65 64 6F 20 
18330  7995 4D 69 73 73 
18330  7999 65 64 0A 00 
18331  799D 53 74 61 72 _s106: .db "Star at %d, %d absorbed torpedo energy.\n\n", 0
18331  79A1 20 61 74 20 
18331  79A5 25 64 2C 20 
18331  79A9 25 64 20 61 
18331  79AD 62 73 6F 72 
18331  79B1 62 65 64 20 
18331  79B5 74 6F 72 70 
18331  79B9 65 64 6F 20 
18331  79BD 65 6E 65 72 
18331  79C1 67 79 2E 0A 
18331  79C5 0A 00 
18332  79C7 2A 2A 2A 20 _s107: .db "*** Starbase Destroyed ***", 0
18332  79CB 53 74 61 72 
18332  79CF 62 61 73 65 
18332  79D3 20 44 65 73 
18332  79D7 74 72 6F 79 
18332  79DB 65 64 20 2A 
18332  79DF 2A 2A 00 
18333  79E2 54 68 61 74 _s108: .db "That does it, Captain!!", 0
18333  79E6 20 64 6F 65 
18333  79EA 73 20 69 74 
18333  79EE 2C 20 43 61 
18333  79F2 70 74 61 69 
18333  79F6 6E 21 21 00 
18334  79FA 59 6F 75 20 _s109: .db "You are hereby relieved of command\n", 0
18334  79FE 61 72 65 20 
18334  7A02 68 65 72 65 
18334  7A06 62 79 20 72 
18334  7A0A 65 6C 69 65 
18334  7A0E 76 65 64 20 
18334  7A12 6F 66 20 63 
18334  7A16 6F 6D 6D 61 
18334  7A1A 6E 64 0A 00 
18335  7A1E 61 6E 64 20 _s110: .db "and sentenced to 99 stardates of hard", 0
18335  7A22 73 65 6E 74 
18335  7A26 65 6E 63 65 
18335  7A2A 64 20 74 6F 
18335  7A2E 20 39 39 20 
18335  7A32 73 74 61 72 
18335  7A36 64 61 74 65 
18335  7A3A 73 20 6F 66 
18335  7A3E 20 68 61 72 
18335  7A42 64 00 
18336  7A44 6C 61 62 6F _s111: .db "labor on Cygnus 12!!\n", 0
18336  7A48 72 20 6F 6E 
18336  7A4C 20 43 79 67 
18336  7A50 6E 75 73 20 
18336  7A54 31 32 21 21 
18336  7A58 0A 00 
18337  7A5A 53 74 61 72 _s112: .db "Starfleet Command reviewing your record to consider\n court martial!\n", 0
18337  7A5E 66 6C 65 65 
18337  7A62 74 20 43 6F 
18337  7A66 6D 6D 61 6E 
18337  7A6A 64 20 72 65 
18337  7A6E 76 69 65 77 
18337  7A72 69 6E 67 20 
18337  7A76 79 6F 75 72 
18337  7A7A 20 72 65 63 
18337  7A7E 6F 72 64 20 
18337  7A82 74 6F 20 63 
18337  7A86 6F 6E 73 69 
18337  7A8A 64 65 72 0A 
18337  7A8E 20 63 6F 75 
18337  7A92 72 74 20 6D 
18337  7A96 61 72 74 69 
18337  7A9A 61 6C 21 0A 
18337  7A9E 00 
18338  7A9F 44 61 6D 61 _s113: .db "Damage Control report not available.", 0
18338  7AA3 67 65 20 43 
18338  7AA7 6F 6E 74 72 
18338  7AAB 6F 6C 20 72 
18338  7AAF 65 70 6F 72 
18338  7AB3 74 20 6E 6F 
18338  7AB7 74 20 61 76 
18338  7ABB 61 69 6C 61 
18338  7ABF 62 6C 65 2E 
18338  7AC3 00 
18339  7AC4 0A 54 65 63 _s114: .db "\nTechnicians standing by to effect repairs to your ship;\nEstimated time to repair: %s stardates.\n Will you authorize the repa"
18339  7AC8 68 6E 69 63 
18339  7ACC 69 61 6E 73 
18339  7AD0 20 73 74 61 
18339  7AD4 6E 64 69 6E 
18339  7AD8 67 20 62 79 
18339  7ADC 20 74 6F 20 
18339  7AE0 65 66 66 65 
18339  7AE4 63 74 20 72 
18339  7AE8 65 70 61 69 
18339  7AEC 72 73 20 74 
18339  7AF0 6F 20 79 6F 
18339  7AF4 75 72 20 73 
18339  7AF8 68 69 70 3B 
18339  7AFC 0A 45 73 74 
18339  7B00 69 6D 61 74 
18339  7B04 65 64 20 74 
18339  7B08 69 6D 65 20 
18339  7B0C 74 6F 20 72 
18339  7B10 65 70 61 69 
18339  7B14 72 3A 20 25 
18339  7B18 73 20 73 74 
18339  7B1C 61 72 64 61 
18339  7B20 74 65 73 2E 
18339  7B24 0A 20 57 69 
18339  7B28 6C 6C 20 79 
18339  7B2C 6F 75 20 61 
18339  7B30 75 74 68 6F 
18339  7B34 72 69 7A 65 
18339  7B38 20 74 68 65 
18339  7B3C 20 72 65 70 
18339  7B40 61 
18340  7B41 69 72 20 6F .db "ir order (y/N)? ", 0
18340  7B45 72 64 65 72 
18340  7B49 20 28 79 2F 
18340  7B4D 4E 29 3F 20 
18340  7B51 00 
18341  7B52 44 65 76 69 _s115: .db "Device            State of Repair", 0
18341  7B56 63 65 20 20 
18341  7B5A 20 20 20 20 
18341  7B5E 20 20 20 20 
18341  7B62 20 20 53 74 
18341  7B66 61 74 65 20 
18341  7B6A 6F 66 20 52 
18341  7B6E 65 70 61 69 
18341  7B72 72 00 
18342  7B74 25 2D 32 35 _s116: .db "%-25s%6s\n", 0
18342  7B78 73 25 36 73 
18342  7B7C 0A 00 
18343  7B7E 0A 00       _s117: .db "\n", 0
18344  7B80 45 6E 65 72 _s118: .db "Energy available = %d\n\n Input number of units to shields: ", 0
18344  7B84 67 79 20 61 
18344  7B88 76 61 69 6C 
18344  7B8C 61 62 6C 65 
18344  7B90 20 3D 20 25 
18344  7B94 64 0A 0A 20 
18344  7B98 49 6E 70 75 
18344  7B9C 74 20 6E 75 
18344  7BA0 6D 62 65 72 
18344  7BA4 20 6F 66 20 
18344  7BA8 75 6E 69 74 
18344  7BAC 73 20 74 6F 
18344  7BB0 20 73 68 69 
18344  7BB4 65 6C 64 73 
18344  7BB8 3A 20 00 
18345  7BBB 3C 53 68 69 _s119: .db "<Shields Unchanged>\n", 0
18345  7BBF 65 6C 64 73 
18345  7BC3 20 55 6E 63 
18345  7BC7 68 61 6E 67 
18345  7BCB 65 64 3E 0A 
18345  7BCF 00 
18346  7BD0 53 68 69 65 _s120: .db "Shield Control Reports:\n  'This is not the Federation Treasury.'", 0
18346  7BD4 6C 64 20 43 
18346  7BD8 6F 6E 74 72 
18346  7BDC 6F 6C 20 52 
18346  7BE0 65 70 6F 72 
18346  7BE4 74 73 3A 0A 
18346  7BE8 20 20 27 54 
18346  7BEC 68 69 73 20 
18346  7BF0 69 73 20 6E 
18346  7BF4 6F 74 20 74 
18346  7BF8 68 65 20 46 
18346  7BFC 65 64 65 72 
18346  7C00 61 74 69 6F 
18346  7C04 6E 20 54 72 
18346  7C08 65 61 73 75 
18346  7C0C 72 79 2E 27 
18346  7C10 00 
18347  7C11 44 65 66 6C _s121: .db "Deflector Control Room report:\n  'Shields now at %d units per your command.'\n\n", 0
18347  7C15 65 63 74 6F 
18347  7C19 72 20 43 6F 
18347  7C1D 6E 74 72 6F 
18347  7C21 6C 20 52 6F 
18347  7C25 6F 6D 20 72 
18347  7C29 65 70 6F 72 
18347  7C2D 74 3A 0A 20 
18347  7C31 20 27 53 68 
18347  7C35 69 65 6C 64 
18347  7C39 73 20 6E 6F 
18347  7C3D 77 20 61 74 
18347  7C41 20 25 64 20 
18347  7C45 75 6E 69 74 
18347  7C49 73 20 70 65 
18347  7C4D 72 20 79 6F 
18347  7C51 75 72 20 63 
18347  7C55 6F 6D 6D 61 
18347  7C59 6E 64 2E 27 
18347  7C5D 0A 0A 00 
18348  7C60 43 6F 6D 70 _s122: .db "Computer active and awating command: ", 0
18348  7C64 75 74 65 72 
18348  7C68 20 61 63 74 
18348  7C6C 69 76 65 20 
18348  7C70 61 6E 64 20 
18348  7C74 61 77 61 74 
18348  7C78 69 6E 67 20 
18348  7C7C 63 6F 6D 6D 
18348  7C80 61 6E 64 3A 
18348  7C84 20 00 
18349  7C86 46 75 6E 63 _s123: .db "Functions available from Library-Computer:\n\n", 0
18349  7C8A 74 69 6F 6E 
18349  7C8E 73 20 61 76 
18349  7C92 61 69 6C 61 
18349  7C96 62 6C 65 20 
18349  7C9A 66 72 6F 6D 
18349  7C9E 20 4C 69 62 
18349  7CA2 72 61 72 79 
18349  7CA6 2D 43 6F 6D 
18349  7CAA 70 75 74 65 
18349  7CAE 72 3A 0A 0A 
18349  7CB2 00 
18350  7CB3 20 20 20 30 _s124: .db "   0 = Cumulative Galactic Record\n", 0
18350  7CB7 20 3D 20 43 
18350  7CBB 75 6D 75 6C 
18350  7CBF 61 74 69 76 
18350  7CC3 65 20 47 61 
18350  7CC7 6C 61 63 74 
18350  7CCB 69 63 20 52 
18350  7CCF 65 63 6F 72 
18350  7CD3 64 0A 00 
18351  7CD6 20 20 20 31 _s125: .db "   1 = Status Report\n", 0
18351  7CDA 20 3D 20 53 
18351  7CDE 74 61 74 75 
18351  7CE2 73 20 52 65 
18351  7CE6 70 6F 72 74 
18351  7CEA 0A 00 
18352  7CEC 20 20 20 32 _s126: .db "   2 = Photon Torpedo Data\n", 0
18352  7CF0 20 3D 20 50 
18352  7CF4 68 6F 74 6F 
18352  7CF8 6E 20 54 6F 
18352  7CFC 72 70 65 64 
18352  7D00 6F 20 44 61 
18352  7D04 74 61 0A 00 
18353  7D08 20 20 20 33 _s127: .db "   3 = Starbase Nav Data\n", 0
18353  7D0C 20 3D 20 53 
18353  7D10 74 61 72 62 
18353  7D14 61 73 65 20 
18353  7D18 4E 61 76 20 
18353  7D1C 44 61 74 61 
18353  7D20 0A 00 
18354  7D22 20 20 20 34 _s128: .db "   4 = Direction/Distance Calculator\n", 0
18354  7D26 20 3D 20 44 
18354  7D2A 69 72 65 63 
18354  7D2E 74 69 6F 6E 
18354  7D32 2F 44 69 73 
18354  7D36 74 61 6E 63 
18354  7D3A 65 20 43 61 
18354  7D3E 6C 63 75 6C 
18354  7D42 61 74 6F 72 
18354  7D46 0A 00 
18355  7D48 20 20 20 35 _s129: .db "   5 = Galaxy 'Region Name' Map\n", 0
18355  7D4C 20 3D 20 47 
18355  7D50 61 6C 61 78 
18355  7D54 79 20 27 52 
18355  7D58 65 67 69 6F 
18355  7D5C 6E 20 4E 61 
18355  7D60 6D 65 27 20 
18355  7D64 4D 61 70 0A 
18355  7D68 00 
18356  7D69 0A 20 20 20 _s130: .db "\n     Computer Record of Galaxy for Quadrant %d,%d\n\n", 0
18356  7D6D 20 20 43 6F 
18356  7D71 6D 70 75 74 
18356  7D75 65 72 20 52 
18356  7D79 65 63 6F 72 
18356  7D7D 64 20 6F 66 
18356  7D81 20 47 61 6C 
18356  7D85 61 78 79 20 
18356  7D89 66 6F 72 20 
18356  7D8D 51 75 61 64 
18356  7D91 72 61 6E 74 
18356  7D95 20 25 64 2C 
18356  7D99 25 64 0A 0A 
18356  7D9D 00 
18357  7D9E 20 20 20 20 _s131: .db "     1     2     3     4     5     6     7     8", 0
18357  7DA2 20 31 20 20 
18357  7DA6 20 20 20 32 
18357  7DAA 20 20 20 20 
18357  7DAE 20 33 20 20 
18357  7DB2 20 20 20 34 
18357  7DB6 20 20 20 20 
18357  7DBA 20 35 20 20 
18357  7DBE 20 20 20 36 
18357  7DC2 20 20 20 20 
18357  7DC6 20 37 20 20 
18357  7DCA 20 20 20 38 
18357  7DCE 00 
18358  7DCF 25 73 25 64 _s132: .db "%s%d", 0
18358  7DD3 00 
18359  7DD4 20 20 20 53 _s133: .db "   Status Report:\n", 0
18359  7DD8 74 61 74 75 
18359  7DDC 73 20 52 65 
18359  7DE0 70 6F 72 74 
18359  7DE4 3A 0A 00 
18360  7DE7 4B 6C 69 6E _s134: .db "Klingon%s Left: %d\n Mission must be completed in %d.%d stardates\n", 0
18360  7DEB 67 6F 6E 25 
18360  7DEF 73 20 4C 65 
18360  7DF3 66 74 3A 20 
18360  7DF7 25 64 0A 20 
18360  7DFB 4D 69 73 73 
18360  7DFF 69 6F 6E 20 
18360  7E03 6D 75 73 74 
18360  7E07 20 62 65 20 
18360  7E0B 63 6F 6D 70 
18360  7E0F 6C 65 74 65 
18360  7E13 64 20 69 6E 
18360  7E17 20 25 64 2E 
18360  7E1B 25 64 20 73 
18360  7E1F 74 61 72 64 
18360  7E23 61 74 65 73 
18360  7E27 0A 00 
18361  7E29 59 6F 75 72 _s135: .db "Your stupidity has left you on your own in the galaxy\n -- you have no starbases left!\n", 0
18361  7E2D 20 73 74 75 
18361  7E31 70 69 64 69 
18361  7E35 74 79 20 68 
18361  7E39 61 73 20 6C 
18361  7E3D 65 66 74 20 
18361  7E41 79 6F 75 20 
18361  7E45 6F 6E 20 79 
18361  7E49 6F 75 72 20 
18361  7E4D 6F 77 6E 20 
18361  7E51 69 6E 20 74 
18361  7E55 68 65 20 67 
18361  7E59 61 6C 61 78 
18361  7E5D 79 0A 20 2D 
18361  7E61 2D 20 79 6F 
18361  7E65 75 20 68 61 
18361  7E69 76 65 20 6E 
18361  7E6D 6F 20 73 74 
18361  7E71 61 72 62 61 
18361  7E75 73 65 73 20 
18361  7E79 6C 65 66 74 
18361  7E7D 21 0A 00 
18362  7E80 54 68 65 20 _s136: .db "The Federation is maintaining %d starbase%s in the galaxy\n\n", 0
18362  7E84 46 65 64 65 
18362  7E88 72 61 74 69 
18362  7E8C 6F 6E 20 69 
18362  7E90 73 20 6D 61 
18362  7E94 69 6E 74 61 
18362  7E98 69 6E 69 6E 
18362  7E9C 67 20 25 64 
18362  7EA0 20 73 74 61 
18362  7EA4 72 62 61 73 
18362  7EA8 65 25 73 20 
18362  7EAC 69 6E 20 74 
18362  7EB0 68 65 20 67 
18362  7EB4 61 6C 61 78 
18362  7EB8 79 0A 0A 00 
18363  7EBC 46 72 6F 6D _s137: .db "From Enterprise to Klingon battlecriuser%s:\n\n", 0
18363  7EC0 20 45 6E 74 
18363  7EC4 65 72 70 72 
18363  7EC8 69 73 65 20 
18363  7ECC 74 6F 20 4B 
18363  7ED0 6C 69 6E 67 
18363  7ED4 6F 6E 20 62 
18363  7ED8 61 74 74 6C 
18363  7EDC 65 63 72 69 
18363  7EE0 75 73 65 72 
18363  7EE4 25 73 3A 0A 
18363  7EE8 0A 00 
18364  7EEA 4D 72 2E 20 _s138: .db "Mr. Spock reports,\n  'Sensors show no starbases in this quadrant.'\n", 0
18364  7EEE 53 70 6F 63 
18364  7EF2 6B 20 72 65 
18364  7EF6 70 6F 72 74 
18364  7EFA 73 2C 0A 20 
18364  7EFE 20 27 53 65 
18364  7F02 6E 73 6F 72 
18364  7F06 73 20 73 68 
18364  7F0A 6F 77 20 6E 
18364  7F0E 6F 20 73 74 
18364  7F12 61 72 62 61 
18364  7F16 73 65 73 20 
18364  7F1A 69 6E 20 74 
18364  7F1E 68 69 73 20 
18364  7F22 71 75 61 64 
18364  7F26 72 61 6E 74 
18364  7F2A 2E 27 0A 00 
18365  7F2E 44 69 72 65 _s139: .db "Direction/Distance Calculator\n You are at quadrant %d,%d sector %d,%d\n\n Please enter initial X coordinate: ", 0
18365  7F32 63 74 69 6F 
18365  7F36 6E 2F 44 69 
18365  7F3A 73 74 61 6E 
18365  7F3E 63 65 20 43 
18365  7F42 61 6C 63 75 
18365  7F46 6C 61 74 6F 
18365  7F4A 72 0A 20 59 
18365  7F4E 6F 75 20 61 
18365  7F52 72 65 20 61 
18365  7F56 74 20 71 75 
18365  7F5A 61 64 72 61 
18365  7F5E 6E 74 20 25 
18365  7F62 64 2C 25 64 
18365  7F66 20 73 65 63 
18365  7F6A 74 6F 72 20 
18365  7F6E 25 64 2C 25 
18365  7F72 64 0A 0A 20 
18365  7F76 50 6C 65 61 
18365  7F7A 73 65 20 65 
18365  7F7E 6E 74 65 72 
18365  7F82 20 69 6E 69 
18365  7F86 74 69 61 6C 
18365  7F8A 20 58 20 63 
18365  7F8E 6F 6F 72 64 
18365  7F92 69 6E 61 74 
18365  7F96 65 3A 20 00 
18366  7F9A 50 6C 65 61 _s140: .db "Please enter initial Y coordinate: ", 0
18366  7F9E 73 65 20 65 
18366  7FA2 6E 74 65 72 
18366  7FA6 20 69 6E 69 
18366  7FAA 74 69 61 6C 
18366  7FAE 20 59 20 63 
18366  7FB2 6F 6F 72 64 
18366  7FB6 69 6E 61 74 
18366  7FBA 65 3A 20 00 
18367  7FBE 50 6C 65 61 _s141: .db "Please enter final X coordinate: ", 0
18367  7FC2 73 65 20 65 
18367  7FC6 6E 74 65 72 
18367  7FCA 20 66 69 6E 
18367  7FCE 61 6C 20 58 
18367  7FD2 20 63 6F 6F 
18367  7FD6 72 64 69 6E 
18367  7FDA 61 74 65 3A 
18367  7FDE 20 00 
18368  7FE0 50 6C 65 61 _s142: .db "Please enter final Y coordinate: ", 0
18368  7FE4 73 65 20 65 
18368  7FE8 6E 74 65 72 
18368  7FEC 20 66 69 6E 
18368  7FF0 61 6C 20 59 
18368  7FF4 20 63 6F 6F 
18368  7FF8 72 64 69 6E 
18368  7FFC 61 74 65 3A 
18368  8000 20 00 
18369  8002 0A 20 20 20 _s143: .db "\n                   The Galaxy\n\n", 0
18369  8006 20 20 20 20 
18369  800A 20 20 20 20 
18369  800E 20 20 20 20 
18369  8012 20 20 20 20 
18369  8016 54 68 65 20 
18369  801A 47 61 6C 61 
18369  801E 78 79 0A 0A 
18369  8022 00 
18370  8023 20 20 20 20 _s144: .db "    1     2     3     4     5     6     7     8\n", 0
18370  8027 31 20 20 20 
18370  802B 20 20 32 20 
18370  802F 20 20 20 20 
18370  8033 33 20 20 20 
18370  8037 20 20 34 20 
18370  803B 20 20 20 20 
18370  803F 35 20 20 20 
18370  8043 20 20 36 20 
18370  8047 20 20 20 20 
18370  804B 37 20 20 20 
18370  804F 20 20 38 0A 
18370  8053 00 
18371  8054 25 73 25 64 _s145: .db "%s%d ", 0
18371  8058 20 00 
18372  805A 20 20 44 49 _s146: .db "  DIRECTION = ", 0
18372  805E 52 45 43 54 
18372  8062 49 4F 4E 20 
18372  8066 3D 20 00 
18373  8069 25 73 00    _s147: .db "%s", 0
18374  806C 54 68 65 20 _s148: .db "The Enterprise has been destroyed. The Federation will be conquered.\n", 0
18374  8070 45 6E 74 65 
18374  8074 72 70 72 69 
18374  8078 73 65 20 68 
18374  807C 61 73 20 62 
18374  8080 65 65 6E 20 
18374  8084 64 65 73 74 
18374  8088 72 6F 79 65 
18374  808C 64 2E 20 54 
18374  8090 68 65 20 46 
18374  8094 65 64 65 72 
18374  8098 61 74 69 6F 
18374  809C 6E 20 77 69 
18374  80A0 6C 6C 20 62 
18374  80A4 65 20 63 6F 
18374  80A8 6E 71 75 65 
18374  80AC 72 65 64 2E 
18374  80B0 0A 00 
18375  80B2 49 74 20 69 _s149: .db "It is stardate %d.\n\n", 0
18375  80B6 73 20 73 74 
18375  80BA 61 72 64 61 
18375  80BE 74 65 20 25 
18375  80C2 64 2E 0A 0A 
18375  80C6 00 
18376  80C7 54 68 65 72 _s150: .db "There were %d Klingon Battlecruisers left at the end of your mission.\n\n", 0
18376  80CB 65 20 77 65 
18376  80CF 72 65 20 25 
18376  80D3 64 20 4B 6C 
18376  80D7 69 6E 67 6F 
18376  80DB 6E 20 42 61 
18376  80DF 74 74 6C 65 
18376  80E3 63 72 75 69 
18376  80E7 73 65 72 73 
18376  80EB 20 6C 65 66 
18376  80EF 74 20 61 74 
18376  80F3 20 74 68 65 
18376  80F7 20 65 6E 64 
18376  80FB 20 6F 66 20 
18376  80FF 79 6F 75 72 
18376  8103 20 6D 69 73 
18376  8107 73 69 6F 6E 
18376  810B 2E 0A 0A 00 
18377  810F 43 6F 6E 67 _s151: .db "Congratulations, Captain!  The last Klingon Battle Cruiser\n menacing the Federation has been destoyed.\n", 0
18377  8113 72 61 74 75 
18377  8117 6C 61 74 69 
18377  811B 6F 6E 73 2C 
18377  811F 20 43 61 70 
18377  8123 74 61 69 6E 
18377  8127 21 20 20 54 
18377  812B 68 65 20 6C 
18377  812F 61 73 74 20 
18377  8133 4B 6C 69 6E 
18377  8137 67 6F 6E 20 
18377  813B 42 61 74 74 
18377  813F 6C 65 20 43 
18377  8143 72 75 69 73 
18377  8147 65 72 0A 20 
18377  814B 6D 65 6E 61 
18377  814F 63 69 6E 67 
18377  8153 20 74 68 65 
18377  8157 20 46 65 64 
18377  815B 65 72 61 74 
18377  815F 69 6F 6E 20 
18377  8163 68 61 73 20 
18377  8167 62 65 65 6E 
18377  816B 20 64 65 73 
18377  816F 74 6F 79 65 
18377  8173 64 2E 0A 00 
18378  8177 59 6F 75 72 _s152: .db "Your efficiency rating is %s\n", 0
18378  817B 20 65 66 66 
18378  817F 69 63 69 65 
18378  8183 6E 63 79 20 
18378  8187 72 61 74 69 
18378  818B 6E 67 20 69 
18378  818F 73 20 25 73 
18378  8193 0A 00 
18379  8195 54 68 65 20 _s153: .db "The Federation is in need of a new starship commander", 0
18379  8199 46 65 64 65 
18379  819D 72 61 74 69 
18379  81A1 6F 6E 20 69 
18379  81A5 73 20 69 6E 
18379  81A9 20 6E 65 65 
18379  81AD 64 20 6F 66 
18379  81B1 20 61 20 6E 
18379  81B5 65 77 20 73 
18379  81B9 74 61 72 73 
18379  81BD 68 69 70 20 
18379  81C1 63 6F 6D 6D 
18379  81C5 61 6E 64 65 
18379  81C9 72 00 
18380  81CB 20 66 6F 72 _s154: .db " for a similar mission.\n", 0
18380  81CF 20 61 20 73 
18380  81D3 69 6D 69 6C 
18380  81D7 61 72 20 6D 
18380  81DB 69 73 73 69 
18380  81DF 6F 6E 2E 0A 
18380  81E3 00 
18381  81E4 49 66 20 74 _s155: .db "If there is a volunteer, let him step forward and", 0
18381  81E8 68 65 72 65 
18381  81EC 20 69 73 20 
18381  81F0 61 20 76 6F 
18381  81F4 6C 75 6E 74 
18381  81F8 65 65 72 2C 
18381  81FC 20 6C 65 74 
18381  8200 20 68 69 6D 
18381  8204 20 73 74 65 
18381  8208 70 20 66 6F 
18381  820C 72 77 61 72 
18381  8210 64 20 61 6E 
18381  8214 64 00 
18382  8216 20 65 6E 74 _s156: .db " enter 'aye': ", 0
18382  821A 65 72 20 27 
18382  821E 61 79 65 27 
18382  8222 3A 20 00 
18383  8225 53 74 61 72 _s157: .db "Starbase shields protect the Enterprise\n", 0
18383  8229 62 61 73 65 
18383  822D 20 73 68 69 
18383  8231 65 6C 64 73 
18383  8235 20 70 72 6F 
18383  8239 74 65 63 74 
18383  823D 20 74 68 65 
18383  8241 20 45 6E 74 
18383  8245 65 72 70 72 
18383  8249 69 73 65 0A 
18383  824D 00 
18384  824E 25 64 20 75 _s158: .db "%d unit hit on Enterprise from sector %d, %d\n", 0
18384  8252 6E 69 74 20 
18384  8256 68 69 74 20 
18384  825A 6F 6E 20 45 
18384  825E 6E 74 65 72 
18384  8262 70 72 69 73 
18384  8266 65 20 66 72 
18384  826A 6F 6D 20 73 
18384  826E 65 63 74 6F 
18384  8272 72 20 25 64 
18384  8276 2C 20 25 64 
18384  827A 0A 00 
18385  827C 20 20 20 20 _s159: .db "    <Shields down to %d units>\n\n", 0
18385  8280 3C 53 68 69 
18385  8284 65 6C 64 73 
18385  8288 20 64 6F 77 
18385  828C 6E 20 74 6F 
18385  8290 20 25 64 20 
18385  8294 75 6E 69 74 
18385  8298 73 3E 0A 0A 
18385  829C 00 
18386  829D 44 61 6D 61 _s160: .db "Damage Control reports\n'%s' damaged by hit\n\n", 0
18386  82A1 67 65 20 43 
18386  82A5 6F 6E 74 72 
18386  82A9 6F 6C 20 72 
18386  82AD 65 70 6F 72 
18386  82B1 74 73 0A 27 
18386  82B5 25 73 27 20 
18386  82B9 64 61 6D 61 
18386  82BD 67 65 64 20 
18386  82C1 62 79 20 68 
18386  82C5 69 74 0A 0A 
18386  82C9 00 
18387  82CA 20 20 20 20 _s161: .db "    %s repair completed\n\n", 0
18387  82CE 25 73 20 72 
18387  82D2 65 70 61 69 
18387  82D6 72 20 63 6F 
18387  82DA 6D 70 6C 65 
18387  82DE 74 65 64 0A 
18387  82E2 0A 00 
18388  82E4 20 20 20 20 _s162: .db "    %s damaged\n\n", 0
18388  82E8 25 73 20 64 
18388  82EC 61 6D 61 67 
18388  82F0 65 64 0A 0A 
18388  82F4 00 
18389  82F5 20 20 20 20 _s163: .db "    %s state of repair improved\n\n", 0
18389  82F9 25 73 20 73 
18389  82FD 74 61 74 65 
18389  8301 20 6F 66 20 
18389  8305 72 65 70 61 
18389  8309 69 72 20 69 
18389  830D 6D 70 72 6F 
18389  8311 76 65 64 0A 
18389  8315 0A 00 
18390  8317 20 49 00    _s164: .db " I", 0
18391  831A 20 49 49 00 _s165: .db " II", 0
18392  831E 20 49 49 49 _s166: .db " III", 0
18392  8322 00 
18393  8323 20 49 56 00 _s167: .db " IV", 0
18394  8327 55 6E 6B 6E _s168: .db "Unknown", 0
18394  832B 6F 77 6E 00 
18395  832F 55 6E 65 78 _s169: .db "Unexpected format in printf.", 0
18395  8333 70 65 63 74 
18395  8337 65 64 20 66 
18395  833B 6F 72 6D 61 
18395  833F 74 20 69 6E 
18395  8343 20 70 72 69 
18395  8347 6E 74 66 2E 
18395  834B 00 
18396  834C 45 72 72 6F _s170: .db "Error: Unknown argument type.\n", 0
18396  8350 72 3A 20 55 
18396  8354 6E 6B 6E 6F 
18396  8358 77 6E 20 61 
18396  835C 72 67 75 6D 
18396  8360 65 6E 74 20 
18396  8364 74 79 70 65 
18396  8368 2E 0A 00 
18397  836B             
18398  836B 6D 83       _heap_top: .dw _heap
18399  836D 00          _heap: .db 0
18400  836E             ; --- END DATA SEGMENT
18401  836E             
18402  836E             .end
tasm: Number of errors = 0
